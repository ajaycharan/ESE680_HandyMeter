
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011e64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000304  00011e64  00011e64  00021e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00012168  00012168  00022168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000184  20000000  00012174  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000008f8  20000184  000122f8  00030184  2**2
                  ALLOC
  5 .stack        00002004  20000a7c  00012bf0  00030184  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000301ae  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005549d  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006a42  00000000  00000000  000856a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000077fe  00000000  00000000  0008c0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001538  00000000  00000000  000938e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012d8  00000000  00000000  00094e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000df7e  00000000  00000000  000960f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000bb99  00000000  00000000  000a4072  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000050d8  00000000  00000000  000afc0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 2a 00 20 55 04 01 00 65 05 01 00 65 05 01 00     .*. U...e...e...
	...
      2c:	65 05 01 00 00 00 00 00 00 00 00 00 65 05 01 00     e...........e...
      3c:	65 05 01 00 65 05 01 00 39 51 00 00 65 05 01 00     e...e...9Q..e...
      4c:	39 1f 00 00 b9 98 00 00 65 05 01 00 65 05 01 00     9.......e...e...
      5c:	49 ea 00 00 65 05 01 00 0d 97 00 00 25 97 00 00     I...e.......%...
      6c:	3d 97 00 00 55 97 00 00 6d 97 00 00 85 97 00 00     =...U...m.......
      7c:	65 05 01 00 65 05 01 00 65 05 01 00 65 05 01 00     e...e...e...e...
      8c:	65 05 01 00 65 05 01 00 00 00 00 00 00 00 00 00     e...e...........
      9c:	65 05 01 00 65 05 01 00 65 05 01 00 65 05 01 00     e...e...e...e...
      ac:	65 05 01 00 00 00 00 00                             e.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000184 	.word	0x20000184
      d4:	00000000 	.word	0x00000000
      d8:	00011e64 	.word	0x00011e64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000188 	.word	0x20000188
     108:	00011e64 	.word	0x00011e64
     10c:	00011e64 	.word	0x00011e64
     110:	00000000 	.word	0x00000000

00000114 <SDMMC_UNSTUFF_BITS>:
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
     114:	b590      	push	{r4, r7, lr}
     116:	b087      	sub	sp, #28
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	000c      	movs	r4, r1
     11e:	0010      	movs	r0, r2
     120:	0019      	movs	r1, r3
     122:	230a      	movs	r3, #10
     124:	18fb      	adds	r3, r7, r3

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     126:	1c22      	adds	r2, r4, #0
     128:	801a      	strh	r2, [r3, #0]
     12a:	2308      	movs	r3, #8
     12c:	18fb      	adds	r3, r7, r3
     12e:	1c02      	adds	r2, r0, #0
     130:	801a      	strh	r2, [r3, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	1c0a      	adds	r2, r1, #0
		if (!sd_mmc_cmd9_mci()) {
     136:	701a      	strb	r2, [r3, #0]
     138:	230a      	movs	r3, #10
     13a:	18fb      	adds	r3, r7, r3
     13c:	881a      	ldrh	r2, [r3, #0]
     13e:	2308      	movs	r3, #8
     140:	18fb      	adds	r3, r7, r3
     142:	881b      	ldrh	r3, [r3, #0]
     144:	1ad3      	subs	r3, r2, r3
     146:	3307      	adds	r3, #7
     148:	2b00      	cmp	r3, #0
			return false;
     14a:	da00      	bge.n	14e <SDMMC_UNSTUFF_BITS+0x3a>
     14c:	3307      	adds	r3, #7
		}
		sd_decode_csd();
     14e:	10db      	asrs	r3, r3, #3
     150:	3b01      	subs	r3, #1
     152:	68fa      	ldr	r2, [r7, #12]
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
     154:	18d3      	adds	r3, r2, r3
     156:	781b      	ldrb	r3, [r3, #0]
     158:	0019      	movs	r1, r3
     15a:	2308      	movs	r3, #8
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
     15c:	18fb      	adds	r3, r7, r3
     15e:	881b      	ldrh	r3, [r3, #0]
     160:	2207      	movs	r2, #7
     162:	4013      	ands	r3, r2
     164:	4119      	asrs	r1, r3
     166:	000b      	movs	r3, r1
     168:	617b      	str	r3, [r7, #20]
     16a:	2308      	movs	r3, #8
     16c:	18fb      	adds	r3, r7, r3
     16e:	881b      	ldrh	r3, [r3, #0]
     170:	2207      	movs	r2, #7
     172:	401a      	ands	r2, r3
     174:	1dfb      	adds	r3, r7, #7
     176:	781b      	ldrb	r3, [r3, #0]
		return false;
     178:	18d3      	adds	r3, r2, r3
     17a:	2b08      	cmp	r3, #8
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     17c:	dd1c      	ble.n	1b8 <SDMMC_UNSTUFF_BITS+0xa4>
     17e:	230a      	movs	r3, #10
     180:	18fb      	adds	r3, r7, r3
     182:	881a      	ldrh	r2, [r3, #0]
     184:	2308      	movs	r3, #8
     186:	18fb      	adds	r3, r7, r3
     188:	881b      	ldrh	r3, [r3, #0]
     18a:	1ad3      	subs	r3, r2, r3
		if (!sd_acmd51()) {
     18c:	3307      	adds	r3, #7
     18e:	2b00      	cmp	r3, #0
     190:	da00      	bge.n	194 <SDMMC_UNSTUFF_BITS+0x80>
     192:	3307      	adds	r3, #7
     194:	10db      	asrs	r3, r3, #3
     196:	3b02      	subs	r3, #2
     198:	68fa      	ldr	r2, [r7, #12]
     19a:	18d3      	adds	r3, r2, r3
     19c:	781b      	ldrb	r3, [r3, #0]
     19e:	0019      	movs	r1, r3
			return false;
     1a0:	2308      	movs	r3, #8
     1a2:	18fb      	adds	r3, r7, r3
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
     1a4:	881b      	ldrh	r3, [r3, #0]
     1a6:	2207      	movs	r2, #7
     1a8:	4013      	ands	r3, r2
     1aa:	2208      	movs	r2, #8
     1ac:	1ad3      	subs	r3, r2, r3
     1ae:	4099      	lsls	r1, r3
     1b0:	000b      	movs	r3, r1
     1b2:	697a      	ldr	r2, [r7, #20]
     1b4:	4313      	orrs	r3, r2
     1b6:	617b      	str	r3, [r7, #20]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1b8:	2308      	movs	r3, #8
     1ba:	18fb      	adds	r3, r7, r3
     1bc:	881b      	ldrh	r3, [r3, #0]
     1be:	2207      	movs	r2, #7
     1c0:	401a      	ands	r2, r3
     1c2:	1dfb      	adds	r3, r7, #7
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	18d3      	adds	r3, r2, r3
			if (!sd_acmd6()) {
     1c8:	2b10      	cmp	r3, #16
     1ca:	dd1c      	ble.n	206 <SDMMC_UNSTUFF_BITS+0xf2>
     1cc:	230a      	movs	r3, #10
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	881a      	ldrh	r2, [r3, #0]
     1d2:	2308      	movs	r3, #8
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	881b      	ldrh	r3, [r3, #0]
     1d8:	1ad3      	subs	r3, r2, r3
     1da:	3307      	adds	r3, #7
				return false;
     1dc:	2b00      	cmp	r3, #0
     1de:	da00      	bge.n	1e2 <SDMMC_UNSTUFF_BITS+0xce>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
     1e0:	3307      	adds	r3, #7
     1e2:	10db      	asrs	r3, r3, #3
     1e4:	3b03      	subs	r3, #3
	}
	if (driver_is_high_speed_capable()) {
     1e6:	68fa      	ldr	r2, [r7, #12]
     1e8:	18d3      	adds	r3, r2, r3
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	0019      	movs	r1, r3
     1ee:	2308      	movs	r3, #8
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	881b      	ldrh	r3, [r3, #0]
     1f4:	2207      	movs	r2, #7
     1f6:	4013      	ands	r3, r2
     1f8:	2210      	movs	r2, #16
     1fa:	1ad3      	subs	r3, r2, r3
     1fc:	4099      	lsls	r1, r3
     1fe:	000b      	movs	r3, r1
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
     200:	697a      	ldr	r2, [r7, #20]
     202:	4313      	orrs	r3, r2
     204:	617b      	str	r3, [r7, #20]
     206:	2308      	movs	r3, #8
     208:	18fb      	adds	r3, r7, r3
     20a:	881b      	ldrh	r3, [r3, #0]
				if (!sd_cm6_set_high_speed()) {
     20c:	2207      	movs	r2, #7
     20e:	401a      	ands	r2, r3
     210:	1dfb      	adds	r3, r7, #7
     212:	781b      	ldrb	r3, [r3, #0]
     214:	18d3      	adds	r3, r2, r3
     216:	2b10      	cmp	r3, #16
     218:	dd1c      	ble.n	254 <SDMMC_UNSTUFF_BITS+0x140>
     21a:	230a      	movs	r3, #10
     21c:	18fb      	adds	r3, r7, r3
     21e:	881a      	ldrh	r2, [r3, #0]
					return false;
     220:	2308      	movs	r3, #8
     222:	18fb      	adds	r3, r7, r3
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
     224:	881b      	ldrh	r3, [r3, #0]
     226:	1ad3      	subs	r3, r2, r3
     228:	3307      	adds	r3, #7
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     22a:	2b00      	cmp	r3, #0
     22c:	da00      	bge.n	230 <SDMMC_UNSTUFF_BITS+0x11c>
     22e:	3307      	adds	r3, #7
     230:	10db      	asrs	r3, r3, #3
     232:	3b03      	subs	r3, #3
     234:	68fa      	ldr	r2, [r7, #12]
     236:	18d3      	adds	r3, r2, r3
     238:	781b      	ldrb	r3, [r3, #0]
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     23a:	0019      	movs	r1, r3
     23c:	2308      	movs	r3, #8
     23e:	18fb      	adds	r3, r7, r3
     240:	881b      	ldrh	r3, [r3, #0]
     242:	2207      	movs	r2, #7
     244:	4013      	ands	r3, r2
     246:	2210      	movs	r2, #16
     248:	1ad3      	subs	r3, r2, r3
     24a:	4099      	lsls	r1, r3
     24c:	000b      	movs	r3, r1
     24e:	697a      	ldr	r2, [r7, #20]
     250:	4313      	orrs	r3, r2
     252:	617b      	str	r3, [r7, #20]
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
			return false;
     258:	2201      	movs	r2, #1
     25a:	409a      	lsls	r2, r3
		}
	}
	return true;
     25c:	0013      	movs	r3, r2
}
     25e:	1e5a      	subs	r2, r3, #1
     260:	697b      	ldr	r3, [r7, #20]
     262:	4013      	ands	r3, r2
     264:	617b      	str	r3, [r7, #20]
     266:	697b      	ldr	r3, [r7, #20]
     268:	0018      	movs	r0, r3
     26a:	46bd      	mov	sp, r7
     26c:	b007      	add	sp, #28
     26e:	bd90      	pop	{r4, r7, pc}

00000270 <mmc_spi_op_cond>:
     270:	b590      	push	{r4, r7, lr}
     272:	b083      	sub	sp, #12
     274:	af00      	add	r7, sp, #0
     276:	4c27      	ldr	r4, [pc, #156]	; (314 <mmc_spi_op_cond+0xa4>)
     278:	447c      	add	r4, pc
     27a:	4b27      	ldr	r3, [pc, #156]	; (318 <mmc_spi_op_cond+0xa8>)
     27c:	607b      	str	r3, [r7, #4]
     27e:	4b27      	ldr	r3, [pc, #156]	; (31c <mmc_spi_op_cond+0xac>)
     280:	2100      	movs	r1, #0
     282:	0018      	movs	r0, r3
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <mmc_spi_op_cond+0xb0>)
     286:	58e3      	ldr	r3, [r4, r3]
     288:	4798      	blx	r3
     28a:	0003      	movs	r3, r0
     28c:	001a      	movs	r2, r3
     28e:	2301      	movs	r3, #1
     290:	4053      	eors	r3, r2
     292:	b2db      	uxtb	r3, r3
     294:	2b00      	cmp	r3, #0
     296:	d001      	beq.n	29c <mmc_spi_op_cond+0x2c>
     298:	2300      	movs	r3, #0
     29a:	e036      	b.n	30a <mmc_spi_op_cond+0x9a>
     29c:	4b21      	ldr	r3, [pc, #132]	; (324 <mmc_spi_op_cond+0xb4>)
     29e:	58e3      	ldr	r3, [r4, r3]
     2a0:	4798      	blx	r3
     2a2:	0003      	movs	r3, r0
     2a4:	603b      	str	r3, [r7, #0]
     2a6:	683b      	ldr	r3, [r7, #0]
     2a8:	2201      	movs	r2, #1
     2aa:	4013      	ands	r3, r2
     2ac:	d006      	beq.n	2bc <mmc_spi_op_cond+0x4c>
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	1e5a      	subs	r2, r3, #1
     2b2:	607a      	str	r2, [r7, #4]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d1e2      	bne.n	27e <mmc_spi_op_cond+0xe>
     2b8:	2300      	movs	r3, #0
     2ba:	e026      	b.n	30a <mmc_spi_op_cond+0x9a>
     2bc:	46c0      	nop			; (mov r8, r8)
     2be:	4b1a      	ldr	r3, [pc, #104]	; (328 <mmc_spi_op_cond+0xb8>)
     2c0:	2100      	movs	r1, #0
     2c2:	0018      	movs	r0, r3
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <mmc_spi_op_cond+0xb0>)
     2c6:	58e3      	ldr	r3, [r4, r3]
     2c8:	4798      	blx	r3
     2ca:	0003      	movs	r3, r0
     2cc:	001a      	movs	r2, r3
     2ce:	2301      	movs	r3, #1
     2d0:	4053      	eors	r3, r2
     2d2:	b2db      	uxtb	r3, r3
     2d4:	2b00      	cmp	r3, #0
     2d6:	d001      	beq.n	2dc <mmc_spi_op_cond+0x6c>
     2d8:	2300      	movs	r3, #0
     2da:	e016      	b.n	30a <mmc_spi_op_cond+0x9a>
     2dc:	4b11      	ldr	r3, [pc, #68]	; (324 <mmc_spi_op_cond+0xb4>)
     2de:	58e3      	ldr	r3, [r4, r3]
     2e0:	4798      	blx	r3
     2e2:	0002      	movs	r2, r0
     2e4:	23c0      	movs	r3, #192	; 0xc0
     2e6:	05db      	lsls	r3, r3, #23
     2e8:	401a      	ands	r2, r3
     2ea:	2380      	movs	r3, #128	; 0x80
     2ec:	05db      	lsls	r3, r3, #23
     2ee:	429a      	cmp	r2, r3
     2f0:	d10a      	bne.n	308 <mmc_spi_op_cond+0x98>
     2f2:	4b0e      	ldr	r3, [pc, #56]	; (32c <mmc_spi_op_cond+0xbc>)
     2f4:	447b      	add	r3, pc
     2f6:	681a      	ldr	r2, [r3, #0]
		sd_mmc_card->type |= CARD_TYPE_HC;
     2f8:	4b0d      	ldr	r3, [pc, #52]	; (330 <mmc_spi_op_cond+0xc0>)
     2fa:	447b      	add	r3, pc
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	7adb      	ldrb	r3, [r3, #11]
     300:	2108      	movs	r1, #8
     302:	430b      	orrs	r3, r1
     304:	b2db      	uxtb	r3, r3
     306:	72d3      	strb	r3, [r2, #11]
	return true;
     308:	2301      	movs	r3, #1
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b003      	add	sp, #12
     310:	bd90      	pop	{r4, r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00011be8 	.word	0x00011be8
     318:	00001bee 	.word	0x00001bee
     31c:	00001101 	.word	0x00001101
     320:	00000264 	.word	0x00000264
     324:	00000298 	.word	0x00000298
     328:	0000053a 	.word	0x0000053a
     32c:	1ffffecc 	.word	0x1ffffecc
     330:	1ffffec6 	.word	0x1ffffec6

00000334 <sd_spi_op_cond>:
{
     334:	b590      	push	{r4, r7, lr}
     336:	b087      	sub	sp, #28
     338:	af00      	add	r7, sp, #0
     33a:	0002      	movs	r2, r0
     33c:	1dfb      	adds	r3, r7, #7
     33e:	701a      	strb	r2, [r3, #0]
     340:	4c32      	ldr	r4, [pc, #200]	; (40c <sd_spi_op_cond+0xd8>)
     342:	447c      	add	r4, pc
	retry = 7150;
     344:	4b32      	ldr	r3, [pc, #200]	; (410 <sd_spi_op_cond+0xdc>)
     346:	613b      	str	r3, [r7, #16]
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     348:	4b32      	ldr	r3, [pc, #200]	; (414 <sd_spi_op_cond+0xe0>)
     34a:	2100      	movs	r1, #0
     34c:	0018      	movs	r0, r3
     34e:	4b32      	ldr	r3, [pc, #200]	; (418 <sd_spi_op_cond+0xe4>)
     350:	58e3      	ldr	r3, [r4, r3]
     352:	4798      	blx	r3
     354:	0003      	movs	r3, r0
     356:	001a      	movs	r2, r3
     358:	2301      	movs	r3, #1
     35a:	4053      	eors	r3, r2
     35c:	b2db      	uxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	d001      	beq.n	366 <sd_spi_op_cond+0x32>
			return false;
     362:	2300      	movs	r3, #0
     364:	e04e      	b.n	404 <sd_spi_op_cond+0xd0>
		arg = 0;
     366:	2300      	movs	r3, #0
     368:	617b      	str	r3, [r7, #20]
		if (v2) {
     36a:	1dfb      	adds	r3, r7, #7
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b00      	cmp	r3, #0
     370:	d004      	beq.n	37c <sd_spi_op_cond+0x48>
			arg |= SD_ACMD41_HCS;
     372:	697b      	ldr	r3, [r7, #20]
     374:	2280      	movs	r2, #128	; 0x80
     376:	05d2      	lsls	r2, r2, #23
     378:	4313      	orrs	r3, r2
     37a:	617b      	str	r3, [r7, #20]
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     37c:	697b      	ldr	r3, [r7, #20]
     37e:	4a27      	ldr	r2, [pc, #156]	; (41c <sd_spi_op_cond+0xe8>)
     380:	0019      	movs	r1, r3
     382:	0010      	movs	r0, r2
     384:	4b24      	ldr	r3, [pc, #144]	; (418 <sd_spi_op_cond+0xe4>)
     386:	58e3      	ldr	r3, [r4, r3]
     388:	4798      	blx	r3
     38a:	0003      	movs	r3, r0
     38c:	001a      	movs	r2, r3
     38e:	2301      	movs	r3, #1
     390:	4053      	eors	r3, r2
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d001      	beq.n	39c <sd_spi_op_cond+0x68>
			return false;
     398:	2300      	movs	r3, #0
     39a:	e033      	b.n	404 <sd_spi_op_cond+0xd0>
		resp = driver_get_response();
     39c:	4b20      	ldr	r3, [pc, #128]	; (420 <sd_spi_op_cond+0xec>)
     39e:	58e3      	ldr	r3, [r4, r3]
     3a0:	4798      	blx	r3
     3a2:	0003      	movs	r3, r0
     3a4:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	2201      	movs	r2, #1
     3aa:	4013      	ands	r3, r2
     3ac:	d006      	beq.n	3bc <sd_spi_op_cond+0x88>
		if (retry-- == 0) {
     3ae:	693b      	ldr	r3, [r7, #16]
     3b0:	1e5a      	subs	r2, r3, #1
     3b2:	613a      	str	r2, [r7, #16]
     3b4:	2b00      	cmp	r3, #0
     3b6:	d1c7      	bne.n	348 <sd_spi_op_cond+0x14>
			return false;
     3b8:	2300      	movs	r3, #0
     3ba:	e023      	b.n	404 <sd_spi_op_cond+0xd0>
			break;
     3bc:	46c0      	nop			; (mov r8, r8)
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3be:	4b19      	ldr	r3, [pc, #100]	; (424 <sd_spi_op_cond+0xf0>)
     3c0:	2100      	movs	r1, #0
     3c2:	0018      	movs	r0, r3
     3c4:	4b14      	ldr	r3, [pc, #80]	; (418 <sd_spi_op_cond+0xe4>)
     3c6:	58e3      	ldr	r3, [r4, r3]
     3c8:	4798      	blx	r3
     3ca:	0003      	movs	r3, r0
     3cc:	001a      	movs	r2, r3
     3ce:	2301      	movs	r3, #1
     3d0:	4053      	eors	r3, r2
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d001      	beq.n	3dc <sd_spi_op_cond+0xa8>
		return false;
     3d8:	2300      	movs	r3, #0
     3da:	e013      	b.n	404 <sd_spi_op_cond+0xd0>
	if ((driver_get_response() & OCR_CCS) != 0) {
     3dc:	4b10      	ldr	r3, [pc, #64]	; (420 <sd_spi_op_cond+0xec>)
     3de:	58e3      	ldr	r3, [r4, r3]
     3e0:	4798      	blx	r3
     3e2:	0002      	movs	r2, r0
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	05db      	lsls	r3, r3, #23
     3e8:	4013      	ands	r3, r2
     3ea:	d00a      	beq.n	402 <sd_spi_op_cond+0xce>
		sd_mmc_card->type |= CARD_TYPE_HC;
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <sd_spi_op_cond+0xf4>)
     3ee:	447b      	add	r3, pc
     3f0:	681a      	ldr	r2, [r3, #0]
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <sd_spi_op_cond+0xf8>)
     3f4:	447b      	add	r3, pc
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	7adb      	ldrb	r3, [r3, #11]
     3fa:	2108      	movs	r1, #8
     3fc:	430b      	orrs	r3, r1
     3fe:	b2db      	uxtb	r3, r3
     400:	72d3      	strb	r3, [r2, #11]
	return true;
     402:	2301      	movs	r3, #1
}
     404:	0018      	movs	r0, r3
     406:	46bd      	mov	sp, r7
     408:	b007      	add	sp, #28
     40a:	bd90      	pop	{r4, r7, pc}
     40c:	00011b1e 	.word	0x00011b1e
     410:	00001bee 	.word	0x00001bee
     414:	00001137 	.word	0x00001137
     418:	00000264 	.word	0x00000264
     41c:	00001129 	.word	0x00001129
     420:	00000298 	.word	0x00000298
     424:	0000053a 	.word	0x0000053a
     428:	1ffffdd2 	.word	0x1ffffdd2
     42c:	1ffffdcc 	.word	0x1ffffdcc

00000430 <sdio_op_cond>:
{
     430:	b580      	push	{r7, lr}
     432:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     434:	2301      	movs	r3, #1
}
     436:	0018      	movs	r0, r3
     438:	46bd      	mov	sp, r7
     43a:	bd80      	pop	{r7, pc}

0000043c <sd_cmd8>:
{
     43c:	b590      	push	{r4, r7, lr}
     43e:	b085      	sub	sp, #20
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
     444:	4c18      	ldr	r4, [pc, #96]	; (4a8 <sd_cmd8+0x6c>)
     446:	447c      	add	r4, pc
	*v2 = 0;
     448:	687b      	ldr	r3, [r7, #4]
     44a:	2200      	movs	r2, #0
     44c:	701a      	strb	r2, [r3, #0]
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     44e:	23d5      	movs	r3, #213	; 0xd5
     450:	005b      	lsls	r3, r3, #1
     452:	4a16      	ldr	r2, [pc, #88]	; (4ac <sd_cmd8+0x70>)
     454:	0019      	movs	r1, r3
     456:	0010      	movs	r0, r2
     458:	4b15      	ldr	r3, [pc, #84]	; (4b0 <sd_cmd8+0x74>)
     45a:	58e3      	ldr	r3, [r4, r3]
     45c:	4798      	blx	r3
     45e:	0003      	movs	r3, r0
     460:	001a      	movs	r2, r3
     462:	2301      	movs	r3, #1
     464:	4053      	eors	r3, r2
     466:	b2db      	uxtb	r3, r3
     468:	2b00      	cmp	r3, #0
     46a:	d001      	beq.n	470 <sd_cmd8+0x34>
		return true; // It is not a V2
     46c:	2301      	movs	r3, #1
     46e:	e016      	b.n	49e <sd_cmd8+0x62>
	resp = driver_get_response();
     470:	4b10      	ldr	r3, [pc, #64]	; (4b4 <sd_cmd8+0x78>)
     472:	58e3      	ldr	r3, [r4, r3]
     474:	4798      	blx	r3
     476:	0003      	movs	r3, r0
     478:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	3301      	adds	r3, #1
     47e:	d101      	bne.n	484 <sd_cmd8+0x48>
		return true; // It is not a V2
     480:	2301      	movs	r3, #1
     482:	e00c      	b.n	49e <sd_cmd8+0x62>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     484:	68fb      	ldr	r3, [r7, #12]
     486:	051b      	lsls	r3, r3, #20
     488:	0d1a      	lsrs	r2, r3, #20
     48a:	23d5      	movs	r3, #213	; 0xd5
     48c:	005b      	lsls	r3, r3, #1
     48e:	429a      	cmp	r2, r3
     490:	d001      	beq.n	496 <sd_cmd8+0x5a>
		return false;
     492:	2300      	movs	r3, #0
     494:	e003      	b.n	49e <sd_cmd8+0x62>
	*v2 = 1;
     496:	687b      	ldr	r3, [r7, #4]
     498:	2201      	movs	r2, #1
     49a:	701a      	strb	r2, [r3, #0]
	return true;
     49c:	2301      	movs	r3, #1
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b005      	add	sp, #20
     4a4:	bd90      	pop	{r4, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00011a1a 	.word	0x00011a1a
     4ac:	00005508 	.word	0x00005508
     4b0:	00000264 	.word	0x00000264
     4b4:	00000298 	.word	0x00000298

000004b8 <mmc_cmd8>:
{
     4b8:	b5b0      	push	{r4, r5, r7, lr}
     4ba:	b088      	sub	sp, #32
     4bc:	af02      	add	r7, sp, #8
     4be:	6078      	str	r0, [r7, #4]
     4c0:	4c46      	ldr	r4, [pc, #280]	; (5dc <mmc_cmd8+0x124>)
     4c2:	447c      	add	r4, pc
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     4c4:	2380      	movs	r3, #128	; 0x80
     4c6:	009a      	lsls	r2, r3, #2
     4c8:	4845      	ldr	r0, [pc, #276]	; (5e0 <mmc_cmd8+0x128>)
     4ca:	2300      	movs	r3, #0
     4cc:	9300      	str	r3, [sp, #0]
     4ce:	2301      	movs	r3, #1
     4d0:	2100      	movs	r1, #0
     4d2:	4d44      	ldr	r5, [pc, #272]	; (5e4 <mmc_cmd8+0x12c>)
     4d4:	5965      	ldr	r5, [r4, r5]
     4d6:	47a8      	blx	r5
     4d8:	0003      	movs	r3, r0
     4da:	001a      	movs	r2, r3
     4dc:	2301      	movs	r3, #1
     4de:	4053      	eors	r3, r2
     4e0:	b2db      	uxtb	r3, r3
     4e2:	2b00      	cmp	r3, #0
     4e4:	d001      	beq.n	4ea <mmc_cmd8+0x32>
		return false;
     4e6:	2300      	movs	r3, #0
     4e8:	e074      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     4ea:	2316      	movs	r3, #22
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	2200      	movs	r2, #0
     4f0:	801a      	strh	r2, [r3, #0]
     4f2:	e015      	b.n	520 <mmc_cmd8+0x68>
		if (!driver_read_word(&ext_csd)) {
     4f4:	2310      	movs	r3, #16
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	0018      	movs	r0, r3
     4fa:	4b3b      	ldr	r3, [pc, #236]	; (5e8 <mmc_cmd8+0x130>)
     4fc:	58e3      	ldr	r3, [r4, r3]
     4fe:	4798      	blx	r3
     500:	0003      	movs	r3, r0
     502:	001a      	movs	r2, r3
     504:	2301      	movs	r3, #1
     506:	4053      	eors	r3, r2
     508:	b2db      	uxtb	r3, r3
     50a:	2b00      	cmp	r3, #0
     50c:	d001      	beq.n	512 <mmc_cmd8+0x5a>
			return false;
     50e:	2300      	movs	r3, #0
     510:	e060      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     512:	2316      	movs	r3, #22
     514:	18fb      	adds	r3, r7, r3
     516:	881a      	ldrh	r2, [r3, #0]
     518:	2316      	movs	r3, #22
     51a:	18fb      	adds	r3, r7, r3
     51c:	3201      	adds	r2, #1
     51e:	801a      	strh	r2, [r3, #0]
     520:	2316      	movs	r3, #22
     522:	18fb      	adds	r3, r7, r3
     524:	881b      	ldrh	r3, [r3, #0]
     526:	2b31      	cmp	r3, #49	; 0x31
     528:	d9e4      	bls.n	4f4 <mmc_cmd8+0x3c>
			& MMC_CTYPE_52MHZ;
     52a:	693b      	ldr	r3, [r7, #16]
     52c:	b2db      	uxtb	r3, r3
     52e:	2202      	movs	r2, #2
     530:	4013      	ands	r3, r2
     532:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
     534:	687b      	ldr	r3, [r7, #4]
     536:	701a      	strb	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     538:	4b2c      	ldr	r3, [pc, #176]	; (5ec <mmc_cmd8+0x134>)
     53a:	447b      	add	r3, pc
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	330e      	adds	r3, #14
     540:	0018      	movs	r0, r3
     542:	230c      	movs	r3, #12
     544:	223e      	movs	r2, #62	; 0x3e
     546:	2180      	movs	r1, #128	; 0x80
     548:	4d29      	ldr	r5, [pc, #164]	; (5f0 <mmc_cmd8+0x138>)
     54a:	447d      	add	r5, pc
     54c:	47a8      	blx	r5
     54e:	0002      	movs	r2, r0
     550:	4b28      	ldr	r3, [pc, #160]	; (5f4 <mmc_cmd8+0x13c>)
     552:	429a      	cmp	r2, r3
     554:	d138      	bne.n	5c8 <mmc_cmd8+0x110>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     556:	e015      	b.n	584 <mmc_cmd8+0xcc>
			if (!driver_read_word(&sec_count)) {
     558:	230c      	movs	r3, #12
     55a:	18fb      	adds	r3, r7, r3
     55c:	0018      	movs	r0, r3
     55e:	4b22      	ldr	r3, [pc, #136]	; (5e8 <mmc_cmd8+0x130>)
     560:	58e3      	ldr	r3, [r4, r3]
     562:	4798      	blx	r3
     564:	0003      	movs	r3, r0
     566:	001a      	movs	r2, r3
     568:	2301      	movs	r3, #1
     56a:	4053      	eors	r3, r2
     56c:	b2db      	uxtb	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d001      	beq.n	576 <mmc_cmd8+0xbe>
				return false;
     572:	2300      	movs	r3, #0
     574:	e02e      	b.n	5d4 <mmc_cmd8+0x11c>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	2316      	movs	r3, #22
     578:	18fb      	adds	r3, r7, r3
     57a:	881a      	ldrh	r2, [r3, #0]
     57c:	2316      	movs	r3, #22
     57e:	18fb      	adds	r3, r7, r3
     580:	3201      	adds	r2, #1
     582:	801a      	strh	r2, [r3, #0]
     584:	2316      	movs	r3, #22
     586:	18fb      	adds	r3, r7, r3
     588:	881b      	ldrh	r3, [r3, #0]
     58a:	2b35      	cmp	r3, #53	; 0x35
     58c:	d9e4      	bls.n	558 <mmc_cmd8+0xa0>
		sd_mmc_card->capacity = sec_count / 2;
     58e:	4b1a      	ldr	r3, [pc, #104]	; (5f8 <mmc_cmd8+0x140>)
     590:	447b      	add	r3, pc
     592:	681b      	ldr	r3, [r3, #0]
     594:	68fa      	ldr	r2, [r7, #12]
     596:	0852      	lsrs	r2, r2, #1
     598:	605a      	str	r2, [r3, #4]
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     59a:	e015      	b.n	5c8 <mmc_cmd8+0x110>
		if (!driver_read_word(&sec_count)) {
     59c:	230c      	movs	r3, #12
     59e:	18fb      	adds	r3, r7, r3
     5a0:	0018      	movs	r0, r3
     5a2:	4b11      	ldr	r3, [pc, #68]	; (5e8 <mmc_cmd8+0x130>)
     5a4:	58e3      	ldr	r3, [r4, r3]
     5a6:	4798      	blx	r3
     5a8:	0003      	movs	r3, r0
     5aa:	001a      	movs	r2, r3
     5ac:	2301      	movs	r3, #1
     5ae:	4053      	eors	r3, r2
     5b0:	b2db      	uxtb	r3, r3
     5b2:	2b00      	cmp	r3, #0
     5b4:	d001      	beq.n	5ba <mmc_cmd8+0x102>
			return false;
     5b6:	2300      	movs	r3, #0
     5b8:	e00c      	b.n	5d4 <mmc_cmd8+0x11c>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     5ba:	2316      	movs	r3, #22
     5bc:	18fb      	adds	r3, r7, r3
     5be:	881a      	ldrh	r2, [r3, #0]
     5c0:	2316      	movs	r3, #22
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	3201      	adds	r2, #1
     5c6:	801a      	strh	r2, [r3, #0]
     5c8:	2316      	movs	r3, #22
     5ca:	18fb      	adds	r3, r7, r3
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	2b7f      	cmp	r3, #127	; 0x7f
     5d0:	d9e4      	bls.n	59c <mmc_cmd8+0xe4>
	return true;
     5d2:	2301      	movs	r3, #1
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b006      	add	sp, #24
     5da:	bdb0      	pop	{r4, r5, r7, pc}
     5dc:	0001199e 	.word	0x0001199e
     5e0:	00081108 	.word	0x00081108
     5e4:	00000130 	.word	0x00000130
     5e8:	00000100 	.word	0x00000100
     5ec:	1ffffc86 	.word	0x1ffffc86
     5f0:	fffffbc7 	.word	0xfffffbc7
     5f4:	00000fff 	.word	0x00000fff
     5f8:	1ffffc30 	.word	0x1ffffc30

000005fc <sd_mmc_cmd9_spi>:
{
     5fc:	b5b0      	push	{r4, r5, r7, lr}
     5fe:	b082      	sub	sp, #8
     600:	af02      	add	r7, sp, #8
     602:	4c18      	ldr	r4, [pc, #96]	; (664 <sd_mmc_cmd9_spi+0x68>)
     604:	447c      	add	r4, pc
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     606:	4b18      	ldr	r3, [pc, #96]	; (668 <sd_mmc_cmd9_spi+0x6c>)
     608:	447b      	add	r3, pc
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	891b      	ldrh	r3, [r3, #8]
     60e:	0419      	lsls	r1, r3, #16
     610:	4816      	ldr	r0, [pc, #88]	; (66c <sd_mmc_cmd9_spi+0x70>)
     612:	2301      	movs	r3, #1
     614:	9300      	str	r3, [sp, #0]
     616:	2301      	movs	r3, #1
     618:	2210      	movs	r2, #16
     61a:	4d15      	ldr	r5, [pc, #84]	; (670 <sd_mmc_cmd9_spi+0x74>)
     61c:	5965      	ldr	r5, [r4, r5]
     61e:	47a8      	blx	r5
     620:	0003      	movs	r3, r0
     622:	001a      	movs	r2, r3
     624:	2301      	movs	r3, #1
     626:	4053      	eors	r3, r2
     628:	b2db      	uxtb	r3, r3
     62a:	2b00      	cmp	r3, #0
     62c:	d001      	beq.n	632 <sd_mmc_cmd9_spi+0x36>
		return false;
     62e:	2300      	movs	r3, #0
     630:	e015      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     632:	4b10      	ldr	r3, [pc, #64]	; (674 <sd_mmc_cmd9_spi+0x78>)
     634:	447b      	add	r3, pc
     636:	681b      	ldr	r3, [r3, #0]
     638:	330e      	adds	r3, #14
     63a:	2101      	movs	r1, #1
     63c:	0018      	movs	r0, r3
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <sd_mmc_cmd9_spi+0x7c>)
     640:	58e3      	ldr	r3, [r4, r3]
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	001a      	movs	r2, r3
     648:	2301      	movs	r3, #1
     64a:	4053      	eors	r3, r2
     64c:	b2db      	uxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	d001      	beq.n	656 <sd_mmc_cmd9_spi+0x5a>
		return false;
     652:	2300      	movs	r3, #0
     654:	e003      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	return driver_wait_end_of_read_blocks();
     656:	4b09      	ldr	r3, [pc, #36]	; (67c <sd_mmc_cmd9_spi+0x80>)
     658:	58e3      	ldr	r3, [r4, r3]
     65a:	4798      	blx	r3
     65c:	0003      	movs	r3, r0
}
     65e:	0018      	movs	r0, r3
     660:	46bd      	mov	sp, r7
     662:	bdb0      	pop	{r4, r5, r7, pc}
     664:	0001185c 	.word	0x0001185c
     668:	1ffffbb8 	.word	0x1ffffbb8
     66c:	00081109 	.word	0x00081109
     670:	00000130 	.word	0x00000130
     674:	1ffffb8c 	.word	0x1ffffb8c
     678:	00000210 	.word	0x00000210
     67c:	00000188 	.word	0x00000188

00000680 <mmc_decode_csd>:
{
     680:	b5b0      	push	{r4, r5, r7, lr}
     682:	b084      	sub	sp, #16
     684:	af00      	add	r7, sp, #0
     686:	4c53      	ldr	r4, [pc, #332]	; (7d4 <mmc_decode_csd+0x154>)
     688:	447c      	add	r4, pc
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     68a:	4b53      	ldr	r3, [pc, #332]	; (7d8 <mmc_decode_csd+0x158>)
     68c:	447b      	add	r3, pc
     68e:	681b      	ldr	r3, [r3, #0]
     690:	330e      	adds	r3, #14
     692:	0018      	movs	r0, r3
     694:	2304      	movs	r3, #4
     696:	227a      	movs	r2, #122	; 0x7a
     698:	2180      	movs	r1, #128	; 0x80
     69a:	4d50      	ldr	r5, [pc, #320]	; (7dc <mmc_decode_csd+0x15c>)
     69c:	447d      	add	r5, pc
     69e:	47a8      	blx	r5
     6a0:	0003      	movs	r3, r0
     6a2:	3b01      	subs	r3, #1
     6a4:	2b03      	cmp	r3, #3
     6a6:	d80b      	bhi.n	6c0 <mmc_decode_csd+0x40>
     6a8:	0018      	movs	r0, r3
     6aa:	f010 f827 	bl	106fc <__gnu_thumb1_case_si>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	0000001c 	.word	0x0000001c
     6b4:	00000028 	.word	0x00000028
     6b8:	00000034 	.word	0x00000034
     6bc:	00000040 	.word	0x00000040
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     6c0:	4b47      	ldr	r3, [pc, #284]	; (7e0 <mmc_decode_csd+0x160>)
     6c2:	447b      	add	r3, pc
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	2212      	movs	r2, #18
     6c8:	731a      	strb	r2, [r3, #12]
		break;
     6ca:	e017      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     6cc:	4b45      	ldr	r3, [pc, #276]	; (7e4 <mmc_decode_csd+0x164>)
     6ce:	447b      	add	r3, pc
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2214      	movs	r2, #20
     6d4:	731a      	strb	r2, [r3, #12]
		break;
     6d6:	e011      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6d8:	4b43      	ldr	r3, [pc, #268]	; (7e8 <mmc_decode_csd+0x168>)
     6da:	447b      	add	r3, pc
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	2222      	movs	r2, #34	; 0x22
     6e0:	731a      	strb	r2, [r3, #12]
		break;
     6e2:	e00b      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6e4:	4b41      	ldr	r3, [pc, #260]	; (7ec <mmc_decode_csd+0x16c>)
     6e6:	447b      	add	r3, pc
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	2230      	movs	r2, #48	; 0x30
     6ec:	731a      	strb	r2, [r3, #12]
		break;
     6ee:	e005      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_4;
     6f0:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <mmc_decode_csd+0x170>)
     6f2:	447b      	add	r3, pc
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	2240      	movs	r2, #64	; 0x40
     6f8:	731a      	strb	r2, [r3, #12]
		break;
     6fa:	46c0      	nop			; (mov r8, r8)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     6fc:	4b3d      	ldr	r3, [pc, #244]	; (7f4 <mmc_decode_csd+0x174>)
     6fe:	447b      	add	r3, pc
     700:	681b      	ldr	r3, [r3, #0]
     702:	330e      	adds	r3, #14
     704:	0018      	movs	r0, r3
     706:	2308      	movs	r3, #8
     708:	2260      	movs	r2, #96	; 0x60
     70a:	2180      	movs	r1, #128	; 0x80
     70c:	4d3a      	ldr	r5, [pc, #232]	; (7f8 <mmc_decode_csd+0x178>)
     70e:	447d      	add	r5, pc
     710:	47a8      	blx	r5
     712:	0003      	movs	r3, r0
     714:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     716:	68fb      	ldr	r3, [r7, #12]
     718:	2207      	movs	r2, #7
     71a:	401a      	ands	r2, r3
     71c:	4b37      	ldr	r3, [pc, #220]	; (7fc <mmc_decode_csd+0x17c>)
     71e:	58e3      	ldr	r3, [r4, r3]
     720:	0092      	lsls	r2, r2, #2
     722:	58d3      	ldr	r3, [r2, r3]
     724:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     726:	68fb      	ldr	r3, [r7, #12]
     728:	08db      	lsrs	r3, r3, #3
     72a:	220f      	movs	r2, #15
     72c:	401a      	ands	r2, r3
     72e:	4b34      	ldr	r3, [pc, #208]	; (800 <mmc_decode_csd+0x180>)
     730:	58e3      	ldr	r3, [r4, r3]
     732:	0092      	lsls	r2, r2, #2
     734:	58d3      	ldr	r3, [r2, r3]
     736:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     738:	4b32      	ldr	r3, [pc, #200]	; (804 <mmc_decode_csd+0x184>)
     73a:	447b      	add	r3, pc
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	68ba      	ldr	r2, [r7, #8]
     740:	6879      	ldr	r1, [r7, #4]
     742:	434a      	muls	r2, r1
     744:	21fa      	movs	r1, #250	; 0xfa
     746:	0089      	lsls	r1, r1, #2
     748:	434a      	muls	r2, r1
     74a:	601a      	str	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     74c:	4b2e      	ldr	r3, [pc, #184]	; (808 <mmc_decode_csd+0x188>)
     74e:	447b      	add	r3, pc
     750:	681b      	ldr	r3, [r3, #0]
     752:	330e      	adds	r3, #14
     754:	0018      	movs	r0, r3
     756:	230c      	movs	r3, #12
     758:	223e      	movs	r2, #62	; 0x3e
     75a:	2180      	movs	r1, #128	; 0x80
     75c:	4c2b      	ldr	r4, [pc, #172]	; (80c <mmc_decode_csd+0x18c>)
     75e:	447c      	add	r4, pc
     760:	47a0      	blx	r4
     762:	0002      	movs	r2, r0
     764:	4b2a      	ldr	r3, [pc, #168]	; (810 <mmc_decode_csd+0x190>)
     766:	429a      	cmp	r2, r3
     768:	d02f      	beq.n	7ca <mmc_decode_csd+0x14a>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     76a:	4b2a      	ldr	r3, [pc, #168]	; (814 <mmc_decode_csd+0x194>)
     76c:	447b      	add	r3, pc
     76e:	681b      	ldr	r3, [r3, #0]
     770:	330e      	adds	r3, #14
     772:	0018      	movs	r0, r3
     774:	230c      	movs	r3, #12
     776:	223e      	movs	r2, #62	; 0x3e
     778:	2180      	movs	r1, #128	; 0x80
     77a:	4c27      	ldr	r4, [pc, #156]	; (818 <mmc_decode_csd+0x198>)
     77c:	447c      	add	r4, pc
     77e:	47a0      	blx	r4
     780:	0003      	movs	r3, r0
     782:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     784:	4b25      	ldr	r3, [pc, #148]	; (81c <mmc_decode_csd+0x19c>)
     786:	447b      	add	r3, pc
     788:	681b      	ldr	r3, [r3, #0]
     78a:	330e      	adds	r3, #14
     78c:	0018      	movs	r0, r3
     78e:	2303      	movs	r3, #3
     790:	222f      	movs	r2, #47	; 0x2f
     792:	2180      	movs	r1, #128	; 0x80
     794:	4d22      	ldr	r5, [pc, #136]	; (820 <mmc_decode_csd+0x1a0>)
     796:	447d      	add	r5, pc
     798:	47a8      	blx	r5
     79a:	0003      	movs	r3, r0
     79c:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     79e:	409c      	lsls	r4, r3
     7a0:	0023      	movs	r3, r4
     7a2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <mmc_decode_csd+0x1a4>)
     7a6:	447b      	add	r3, pc
     7a8:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7aa:	4b1f      	ldr	r3, [pc, #124]	; (828 <mmc_decode_csd+0x1a8>)
     7ac:	447b      	add	r3, pc
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	330e      	adds	r3, #14
     7b2:	0018      	movs	r0, r3
     7b4:	2304      	movs	r3, #4
     7b6:	2250      	movs	r2, #80	; 0x50
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	4d1c      	ldr	r5, [pc, #112]	; (82c <mmc_decode_csd+0x1ac>)
     7bc:	447d      	add	r5, pc
     7be:	47a8      	blx	r5
     7c0:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     7c8:	6063      	str	r3, [r4, #4]
}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	46bd      	mov	sp, r7
     7ce:	b004      	add	sp, #16
     7d0:	bdb0      	pop	{r4, r5, r7, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	000117d8 	.word	0x000117d8
     7d8:	1ffffb34 	.word	0x1ffffb34
     7dc:	fffffa75 	.word	0xfffffa75
     7e0:	1ffffafe 	.word	0x1ffffafe
     7e4:	1ffffaf2 	.word	0x1ffffaf2
     7e8:	1ffffae6 	.word	0x1ffffae6
     7ec:	1ffffada 	.word	0x1ffffada
     7f0:	1fffface 	.word	0x1fffface
     7f4:	1ffffac2 	.word	0x1ffffac2
     7f8:	fffffa03 	.word	0xfffffa03
     7fc:	000001cc 	.word	0x000001cc
     800:	00000094 	.word	0x00000094
     804:	1ffffa86 	.word	0x1ffffa86
     808:	1ffffa72 	.word	0x1ffffa72
     80c:	fffff9b3 	.word	0xfffff9b3
     810:	00000fff 	.word	0x00000fff
     814:	1ffffa54 	.word	0x1ffffa54
     818:	fffff995 	.word	0xfffff995
     81c:	1ffffa3a 	.word	0x1ffffa3a
     820:	fffff97b 	.word	0xfffff97b
     824:	1ffffa1a 	.word	0x1ffffa1a
     828:	1ffffa14 	.word	0x1ffffa14
     82c:	fffff955 	.word	0xfffff955

00000830 <sd_decode_csd>:
{
     830:	b5b0      	push	{r4, r5, r7, lr}
     832:	b084      	sub	sp, #16
     834:	af00      	add	r7, sp, #0
     836:	4c3f      	ldr	r4, [pc, #252]	; (934 <sd_decode_csd+0x104>)
     838:	447c      	add	r4, pc
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     83a:	4b3f      	ldr	r3, [pc, #252]	; (938 <sd_decode_csd+0x108>)
     83c:	447b      	add	r3, pc
     83e:	681b      	ldr	r3, [r3, #0]
     840:	330e      	adds	r3, #14
     842:	0018      	movs	r0, r3
     844:	2308      	movs	r3, #8
     846:	2260      	movs	r2, #96	; 0x60
     848:	2180      	movs	r1, #128	; 0x80
     84a:	4d3c      	ldr	r5, [pc, #240]	; (93c <sd_decode_csd+0x10c>)
     84c:	447d      	add	r5, pc
     84e:	47a8      	blx	r5
     850:	0003      	movs	r3, r0
     852:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     854:	68fb      	ldr	r3, [r7, #12]
     856:	2207      	movs	r2, #7
     858:	401a      	ands	r2, r3
     85a:	4b39      	ldr	r3, [pc, #228]	; (940 <sd_decode_csd+0x110>)
     85c:	58e3      	ldr	r3, [r4, r3]
     85e:	0092      	lsls	r2, r2, #2
     860:	58d3      	ldr	r3, [r2, r3]
     862:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     864:	68fb      	ldr	r3, [r7, #12]
     866:	08db      	lsrs	r3, r3, #3
     868:	220f      	movs	r2, #15
     86a:	401a      	ands	r2, r3
     86c:	4b35      	ldr	r3, [pc, #212]	; (944 <sd_decode_csd+0x114>)
     86e:	58e3      	ldr	r3, [r4, r3]
     870:	0092      	lsls	r2, r2, #2
     872:	58d3      	ldr	r3, [r2, r3]
     874:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     876:	4b34      	ldr	r3, [pc, #208]	; (948 <sd_decode_csd+0x118>)
     878:	447b      	add	r3, pc
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	68ba      	ldr	r2, [r7, #8]
     87e:	6879      	ldr	r1, [r7, #4]
     880:	434a      	muls	r2, r1
     882:	21fa      	movs	r1, #250	; 0xfa
     884:	0089      	lsls	r1, r1, #2
     886:	434a      	muls	r2, r1
     888:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     88a:	4b30      	ldr	r3, [pc, #192]	; (94c <sd_decode_csd+0x11c>)
     88c:	447b      	add	r3, pc
     88e:	681b      	ldr	r3, [r3, #0]
     890:	330e      	adds	r3, #14
     892:	0018      	movs	r0, r3
     894:	2302      	movs	r3, #2
     896:	227e      	movs	r2, #126	; 0x7e
     898:	2180      	movs	r1, #128	; 0x80
     89a:	4c2d      	ldr	r4, [pc, #180]	; (950 <sd_decode_csd+0x120>)
     89c:	447c      	add	r4, pc
     89e:	47a0      	blx	r4
     8a0:	1e03      	subs	r3, r0, #0
     8a2:	d012      	beq.n	8ca <sd_decode_csd+0x9a>
		sd_mmc_card->capacity =
     8a4:	4b2b      	ldr	r3, [pc, #172]	; (954 <sd_decode_csd+0x124>)
     8a6:	447b      	add	r3, pc
     8a8:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
     8aa:	4b2b      	ldr	r3, [pc, #172]	; (958 <sd_decode_csd+0x128>)
     8ac:	447b      	add	r3, pc
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	330e      	adds	r3, #14
     8b2:	0018      	movs	r0, r3
     8b4:	2316      	movs	r3, #22
     8b6:	2230      	movs	r2, #48	; 0x30
     8b8:	2180      	movs	r1, #128	; 0x80
     8ba:	4d28      	ldr	r5, [pc, #160]	; (95c <sd_decode_csd+0x12c>)
     8bc:	447d      	add	r5, pc
     8be:	47a8      	blx	r5
     8c0:	0003      	movs	r3, r0
				* 512;
     8c2:	3301      	adds	r3, #1
     8c4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
     8c6:	6063      	str	r3, [r4, #4]
}
     8c8:	e02f      	b.n	92a <sd_decode_csd+0xfa>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8ca:	4b25      	ldr	r3, [pc, #148]	; (960 <sd_decode_csd+0x130>)
     8cc:	447b      	add	r3, pc
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	330e      	adds	r3, #14
     8d2:	0018      	movs	r0, r3
     8d4:	230c      	movs	r3, #12
     8d6:	223e      	movs	r2, #62	; 0x3e
     8d8:	2180      	movs	r1, #128	; 0x80
     8da:	4c22      	ldr	r4, [pc, #136]	; (964 <sd_decode_csd+0x134>)
     8dc:	447c      	add	r4, pc
     8de:	47a0      	blx	r4
     8e0:	0003      	movs	r3, r0
     8e2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     8e4:	4b20      	ldr	r3, [pc, #128]	; (968 <sd_decode_csd+0x138>)
     8e6:	447b      	add	r3, pc
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	330e      	adds	r3, #14
     8ec:	0018      	movs	r0, r3
     8ee:	2303      	movs	r3, #3
     8f0:	222f      	movs	r2, #47	; 0x2f
     8f2:	2180      	movs	r1, #128	; 0x80
     8f4:	4d1d      	ldr	r5, [pc, #116]	; (96c <sd_decode_csd+0x13c>)
     8f6:	447d      	add	r5, pc
     8f8:	47a8      	blx	r5
     8fa:	0003      	movs	r3, r0
     8fc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8fe:	409c      	lsls	r4, r3
     900:	0023      	movs	r3, r4
     902:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     904:	4b1a      	ldr	r3, [pc, #104]	; (970 <sd_decode_csd+0x140>)
     906:	447b      	add	r3, pc
     908:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
     90a:	4b1a      	ldr	r3, [pc, #104]	; (974 <sd_decode_csd+0x144>)
     90c:	447b      	add	r3, pc
     90e:	681b      	ldr	r3, [r3, #0]
     910:	330e      	adds	r3, #14
     912:	0018      	movs	r0, r3
     914:	2304      	movs	r3, #4
     916:	2250      	movs	r2, #80	; 0x50
     918:	2180      	movs	r1, #128	; 0x80
     91a:	4d17      	ldr	r5, [pc, #92]	; (978 <sd_decode_csd+0x148>)
     91c:	447d      	add	r5, pc
     91e:	47a8      	blx	r5
     920:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     922:	683b      	ldr	r3, [r7, #0]
     924:	4093      	lsls	r3, r2
				/ 1024;
     926:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     928:	6063      	str	r3, [r4, #4]
}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bdb0      	pop	{r4, r5, r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	00011628 	.word	0x00011628
     938:	1ffff984 	.word	0x1ffff984
     93c:	fffff8c5 	.word	0xfffff8c5
     940:	000001cc 	.word	0x000001cc
     944:	000001b0 	.word	0x000001b0
     948:	1ffff948 	.word	0x1ffff948
     94c:	1ffff934 	.word	0x1ffff934
     950:	fffff875 	.word	0xfffff875
     954:	1ffff91a 	.word	0x1ffff91a
     958:	1ffff914 	.word	0x1ffff914
     95c:	fffff855 	.word	0xfffff855
     960:	1ffff8f4 	.word	0x1ffff8f4
     964:	fffff835 	.word	0xfffff835
     968:	1ffff8da 	.word	0x1ffff8da
     96c:	fffff81b 	.word	0xfffff81b
     970:	1ffff8ba 	.word	0x1ffff8ba
     974:	1ffff8b4 	.word	0x1ffff8b4
     978:	fffff7f5 	.word	0xfffff7f5

0000097c <sd_mmc_cmd13>:
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b083      	sub	sp, #12
     980:	af00      	add	r7, sp, #0
     982:	4c13      	ldr	r4, [pc, #76]	; (9d0 <sd_mmc_cmd13+0x54>)
     984:	447c      	add	r4, pc
	nec_timeout = 200000;
     986:	4b13      	ldr	r3, [pc, #76]	; (9d4 <sd_mmc_cmd13+0x58>)
     988:	607b      	str	r3, [r7, #4]
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     98a:	4b13      	ldr	r3, [pc, #76]	; (9d8 <sd_mmc_cmd13+0x5c>)
     98c:	2100      	movs	r1, #0
     98e:	0018      	movs	r0, r3
     990:	4b12      	ldr	r3, [pc, #72]	; (9dc <sd_mmc_cmd13+0x60>)
     992:	58e3      	ldr	r3, [r4, r3]
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	001a      	movs	r2, r3
     99a:	2301      	movs	r3, #1
     99c:	4053      	eors	r3, r2
     99e:	b2db      	uxtb	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	d001      	beq.n	9a8 <sd_mmc_cmd13+0x2c>
				return false;
     9a4:	2300      	movs	r3, #0
     9a6:	e00f      	b.n	9c8 <sd_mmc_cmd13+0x4c>
			if (!(driver_get_response() & 0xFF)) {
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <sd_mmc_cmd13+0x64>)
     9aa:	58e3      	ldr	r3, [r4, r3]
     9ac:	4798      	blx	r3
     9ae:	0002      	movs	r2, r0
     9b0:	23ff      	movs	r3, #255	; 0xff
     9b2:	4013      	ands	r3, r2
     9b4:	d006      	beq.n	9c4 <sd_mmc_cmd13+0x48>
		if (nec_timeout-- == 0) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	1e5a      	subs	r2, r3, #1
     9ba:	607a      	str	r2, [r7, #4]
     9bc:	2b00      	cmp	r3, #0
     9be:	d1e4      	bne.n	98a <sd_mmc_cmd13+0xe>
			return false;
     9c0:	2300      	movs	r3, #0
     9c2:	e001      	b.n	9c8 <sd_mmc_cmd13+0x4c>
				break;
     9c4:	46c0      	nop			; (mov r8, r8)
	return true;
     9c6:	2301      	movs	r3, #1
}
     9c8:	0018      	movs	r0, r3
     9ca:	46bd      	mov	sp, r7
     9cc:	b003      	add	sp, #12
     9ce:	bd90      	pop	{r4, r7, pc}
     9d0:	000114dc 	.word	0x000114dc
     9d4:	00030d40 	.word	0x00030d40
     9d8:	00001b0d 	.word	0x00001b0d
     9dc:	00000264 	.word	0x00000264
     9e0:	00000298 	.word	0x00000298

000009e4 <sd_acmd51>:
{
     9e4:	b5b0      	push	{r4, r5, r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af02      	add	r7, sp, #8
     9ea:	4c3f      	ldr	r4, [pc, #252]	; (ae8 <sd_acmd51+0x104>)
     9ec:	447c      	add	r4, pc
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     9ee:	4b3f      	ldr	r3, [pc, #252]	; (aec <sd_acmd51+0x108>)
     9f0:	447b      	add	r3, pc
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	891b      	ldrh	r3, [r3, #8]
     9f6:	041b      	lsls	r3, r3, #16
     9f8:	4a3d      	ldr	r2, [pc, #244]	; (af0 <sd_acmd51+0x10c>)
     9fa:	0019      	movs	r1, r3
     9fc:	0010      	movs	r0, r2
     9fe:	4b3d      	ldr	r3, [pc, #244]	; (af4 <sd_acmd51+0x110>)
     a00:	58e3      	ldr	r3, [r4, r3]
     a02:	4798      	blx	r3
     a04:	0003      	movs	r3, r0
     a06:	001a      	movs	r2, r3
     a08:	2301      	movs	r3, #1
     a0a:	4053      	eors	r3, r2
     a0c:	b2db      	uxtb	r3, r3
     a0e:	2b00      	cmp	r3, #0
     a10:	d001      	beq.n	a16 <sd_acmd51+0x32>
		return false;
     a12:	2300      	movs	r3, #0
     a14:	e063      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     a16:	4838      	ldr	r0, [pc, #224]	; (af8 <sd_acmd51+0x114>)
     a18:	2301      	movs	r3, #1
     a1a:	9300      	str	r3, [sp, #0]
     a1c:	2301      	movs	r3, #1
     a1e:	2208      	movs	r2, #8
     a20:	2100      	movs	r1, #0
     a22:	4d36      	ldr	r5, [pc, #216]	; (afc <sd_acmd51+0x118>)
     a24:	5965      	ldr	r5, [r4, r5]
     a26:	47a8      	blx	r5
     a28:	0003      	movs	r3, r0
     a2a:	001a      	movs	r2, r3
     a2c:	2301      	movs	r3, #1
     a2e:	4053      	eors	r3, r2
     a30:	b2db      	uxtb	r3, r3
     a32:	2b00      	cmp	r3, #0
     a34:	d001      	beq.n	a3a <sd_acmd51+0x56>
		return false;
     a36:	2300      	movs	r3, #0
     a38:	e051      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_start_read_blocks(scr, 1)) {
     a3a:	003b      	movs	r3, r7
     a3c:	2101      	movs	r1, #1
     a3e:	0018      	movs	r0, r3
     a40:	4b2f      	ldr	r3, [pc, #188]	; (b00 <sd_acmd51+0x11c>)
     a42:	58e3      	ldr	r3, [r4, r3]
     a44:	4798      	blx	r3
     a46:	0003      	movs	r3, r0
     a48:	001a      	movs	r2, r3
     a4a:	2301      	movs	r3, #1
     a4c:	4053      	eors	r3, r2
     a4e:	b2db      	uxtb	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d001      	beq.n	a58 <sd_acmd51+0x74>
		return false;
     a54:	2300      	movs	r3, #0
     a56:	e042      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_wait_end_of_read_blocks()) {
     a58:	4b2a      	ldr	r3, [pc, #168]	; (b04 <sd_acmd51+0x120>)
     a5a:	58e3      	ldr	r3, [r4, r3]
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	001a      	movs	r2, r3
     a62:	2301      	movs	r3, #1
     a64:	4053      	eors	r3, r2
     a66:	b2db      	uxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	d001      	beq.n	a70 <sd_acmd51+0x8c>
		return false;
     a6c:	2300      	movs	r3, #0
     a6e:	e036      	b.n	ade <sd_acmd51+0xfa>
	switch (SD_SCR_SD_SPEC(scr)) {
     a70:	0038      	movs	r0, r7
     a72:	2304      	movs	r3, #4
     a74:	2238      	movs	r2, #56	; 0x38
     a76:	2140      	movs	r1, #64	; 0x40
     a78:	4c23      	ldr	r4, [pc, #140]	; (b08 <sd_acmd51+0x124>)
     a7a:	447c      	add	r4, pc
     a7c:	47a0      	blx	r4
     a7e:	0003      	movs	r3, r0
     a80:	2b01      	cmp	r3, #1
     a82:	d009      	beq.n	a98 <sd_acmd51+0xb4>
     a84:	d302      	bcc.n	a8c <sd_acmd51+0xa8>
     a86:	2b02      	cmp	r3, #2
     a88:	d00c      	beq.n	aa4 <sd_acmd51+0xc0>
     a8a:	e021      	b.n	ad0 <sd_acmd51+0xec>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     a8c:	4b1f      	ldr	r3, [pc, #124]	; (b0c <sd_acmd51+0x128>)
     a8e:	447b      	add	r3, pc
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	2210      	movs	r2, #16
     a94:	731a      	strb	r2, [r3, #12]
		break;
     a96:	e021      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     a98:	4b1d      	ldr	r3, [pc, #116]	; (b10 <sd_acmd51+0x12c>)
     a9a:	447b      	add	r3, pc
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	221a      	movs	r2, #26
     aa0:	731a      	strb	r2, [r3, #12]
		break;
     aa2:	e01b      	b.n	adc <sd_acmd51+0xf8>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     aa4:	0038      	movs	r0, r7
     aa6:	2301      	movs	r3, #1
     aa8:	222f      	movs	r2, #47	; 0x2f
     aaa:	2140      	movs	r1, #64	; 0x40
     aac:	4c19      	ldr	r4, [pc, #100]	; (b14 <sd_acmd51+0x130>)
     aae:	447c      	add	r4, pc
     ab0:	47a0      	blx	r4
     ab2:	0003      	movs	r3, r0
     ab4:	2b01      	cmp	r3, #1
     ab6:	d105      	bne.n	ac4 <sd_acmd51+0xe0>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     ab8:	4b17      	ldr	r3, [pc, #92]	; (b18 <sd_acmd51+0x134>)
     aba:	447b      	add	r3, pc
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	2230      	movs	r2, #48	; 0x30
     ac0:	731a      	strb	r2, [r3, #12]
		break;
     ac2:	e00b      	b.n	adc <sd_acmd51+0xf8>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     ac4:	4b15      	ldr	r3, [pc, #84]	; (b1c <sd_acmd51+0x138>)
     ac6:	447b      	add	r3, pc
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	2220      	movs	r2, #32
     acc:	731a      	strb	r2, [r3, #12]
		break;
     ace:	e005      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     ad0:	4b13      	ldr	r3, [pc, #76]	; (b20 <sd_acmd51+0x13c>)
     ad2:	447b      	add	r3, pc
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	2210      	movs	r2, #16
     ad8:	731a      	strb	r2, [r3, #12]
		break;
     ada:	46c0      	nop			; (mov r8, r8)
	return true;
     adc:	2301      	movs	r3, #1
}
     ade:	0018      	movs	r0, r3
     ae0:	46bd      	mov	sp, r7
     ae2:	b002      	add	sp, #8
     ae4:	bdb0      	pop	{r4, r5, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00011474 	.word	0x00011474
     aec:	1ffff7d0 	.word	0x1ffff7d0
     af0:	00001137 	.word	0x00001137
     af4:	00000264 	.word	0x00000264
     af8:	00081133 	.word	0x00081133
     afc:	00000130 	.word	0x00000130
     b00:	00000210 	.word	0x00000210
     b04:	00000188 	.word	0x00000188
     b08:	fffff697 	.word	0xfffff697
     b0c:	1ffff732 	.word	0x1ffff732
     b10:	1ffff726 	.word	0x1ffff726
     b14:	fffff663 	.word	0xfffff663
     b18:	1ffff706 	.word	0x1ffff706
     b1c:	1ffff6fa 	.word	0x1ffff6fa
     b20:	1ffff6ee 	.word	0x1ffff6ee

00000b24 <sd_mmc_select_slot>:
{
     b24:	b580      	push	{r7, lr}
     b26:	b082      	sub	sp, #8
     b28:	af00      	add	r7, sp, #0
     b2a:	0002      	movs	r2, r0
     b2c:	1dfb      	adds	r3, r7, #7
     b2e:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
     b30:	1dfb      	adds	r3, r7, #7
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d001      	beq.n	b3c <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
     b38:	2304      	movs	r3, #4
     b3a:	e052      	b.n	be2 <sd_mmc_select_slot+0xbe>
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     b3c:	1dfb      	adds	r3, r7, #7
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	4a2a      	ldr	r2, [pc, #168]	; (bec <sd_mmc_select_slot+0xc8>)
     b42:	447a      	add	r2, pc
     b44:	015b      	lsls	r3, r3, #5
     b46:	18d3      	adds	r3, r2, r3
     b48:	330a      	adds	r3, #10
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	2b04      	cmp	r3, #4
     b4e:	d009      	beq.n	b64 <sd_mmc_select_slot+0x40>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	4a26      	ldr	r2, [pc, #152]	; (bf0 <sd_mmc_select_slot+0xcc>)
     b56:	447a      	add	r2, pc
     b58:	015b      	lsls	r3, r3, #5
     b5a:	18d3      	adds	r3, r2, r3
     b5c:	330a      	adds	r3, #10
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b03      	cmp	r3, #3
     b62:	d121      	bne.n	ba8 <sd_mmc_select_slot+0x84>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b64:	1dfb      	adds	r3, r7, #7
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	4a22      	ldr	r2, [pc, #136]	; (bf4 <sd_mmc_select_slot+0xd0>)
     b6a:	447a      	add	r2, pc
     b6c:	015b      	lsls	r3, r3, #5
     b6e:	18d3      	adds	r3, r2, r3
     b70:	330a      	adds	r3, #10
     b72:	2202      	movs	r2, #2
     b74:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b76:	1dfb      	adds	r3, r7, #7
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	4b1f      	ldr	r3, [pc, #124]	; (bf8 <sd_mmc_select_slot+0xd4>)
     b7c:	447b      	add	r3, pc
     b7e:	0152      	lsls	r2, r2, #5
     b80:	491e      	ldr	r1, [pc, #120]	; (bfc <sd_mmc_select_slot+0xd8>)
     b82:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	4a1d      	ldr	r2, [pc, #116]	; (c00 <sd_mmc_select_slot+0xdc>)
     b8a:	447a      	add	r2, pc
     b8c:	015b      	lsls	r3, r3, #5
     b8e:	18d3      	adds	r3, r2, r3
     b90:	330d      	adds	r3, #13
     b92:	2201      	movs	r2, #1
     b94:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	4a1a      	ldr	r2, [pc, #104]	; (c04 <sd_mmc_select_slot+0xe0>)
     b9c:	447a      	add	r2, pc
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18d3      	adds	r3, r2, r3
     ba2:	331e      	adds	r3, #30
     ba4:	2200      	movs	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
	sd_mmc_slot_sel = slot;
     ba8:	4b17      	ldr	r3, [pc, #92]	; (c08 <sd_mmc_select_slot+0xe4>)
     baa:	447b      	add	r3, pc
     bac:	1dfa      	adds	r2, r7, #7
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     bb2:	1dfb      	adds	r3, r7, #7
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	015b      	lsls	r3, r3, #5
     bb8:	4a14      	ldr	r2, [pc, #80]	; (c0c <sd_mmc_select_slot+0xe8>)
     bba:	447a      	add	r2, pc
     bbc:	189a      	adds	r2, r3, r2
     bbe:	4b14      	ldr	r3, [pc, #80]	; (c10 <sd_mmc_select_slot+0xec>)
     bc0:	447b      	add	r3, pc
     bc2:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
     bc4:	4b13      	ldr	r3, [pc, #76]	; (c14 <sd_mmc_select_slot+0xf0>)
     bc6:	447b      	add	r3, pc
     bc8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	4a12      	ldr	r2, [pc, #72]	; (c18 <sd_mmc_select_slot+0xf4>)
     bd0:	447a      	add	r2, pc
     bd2:	015b      	lsls	r3, r3, #5
     bd4:	18d3      	adds	r3, r2, r3
     bd6:	330a      	adds	r3, #10
     bd8:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     bda:	3b02      	subs	r3, #2
     bdc:	425a      	negs	r2, r3
     bde:	4153      	adcs	r3, r2
     be0:	b2db      	uxtb	r3, r3
}
     be2:	0018      	movs	r0, r3
     be4:	46bd      	mov	sp, r7
     be6:	b002      	add	sp, #8
     be8:	bd80      	pop	{r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	1ffff65a 	.word	0x1ffff65a
     bf0:	1ffff646 	.word	0x1ffff646
     bf4:	1ffff632 	.word	0x1ffff632
     bf8:	1ffff620 	.word	0x1ffff620
     bfc:	00061a80 	.word	0x00061a80
     c00:	1ffff612 	.word	0x1ffff612
     c04:	1ffff600 	.word	0x1ffff600
     c08:	1ffff612 	.word	0x1ffff612
     c0c:	1ffff5e2 	.word	0x1ffff5e2
     c10:	1ffff600 	.word	0x1ffff600
     c14:	00000053 	.word	0x00000053
     c18:	1ffff5cc 	.word	0x1ffff5cc

00000c1c <sd_mmc_configure_slot>:
{
     c1c:	b5b0      	push	{r4, r5, r7, lr}
     c1e:	af00      	add	r7, sp, #0
     c20:	4d0c      	ldr	r5, [pc, #48]	; (c54 <sd_mmc_configure_slot+0x38>)
     c22:	447d      	add	r5, pc
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c24:	4b0c      	ldr	r3, [pc, #48]	; (c58 <sd_mmc_configure_slot+0x3c>)
     c26:	447b      	add	r3, pc
     c28:	7818      	ldrb	r0, [r3, #0]
     c2a:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sd_mmc_configure_slot+0x40>)
     c2c:	447b      	add	r3, pc
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <sd_mmc_configure_slot+0x44>)
     c34:	447b      	add	r3, pc
     c36:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c38:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <sd_mmc_configure_slot+0x48>)
     c3c:	447b      	add	r3, pc
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c42:	1e5c      	subs	r4, r3, #1
     c44:	41a3      	sbcs	r3, r4
     c46:	b2db      	uxtb	r3, r3
     c48:	4c07      	ldr	r4, [pc, #28]	; (c68 <sd_mmc_configure_slot+0x4c>)
     c4a:	592c      	ldr	r4, [r5, r4]
     c4c:	47a0      	blx	r4
}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	bdb0      	pop	{r4, r5, r7, pc}
     c54:	0001123e 	.word	0x0001123e
     c58:	1ffff596 	.word	0x1ffff596
     c5c:	1ffff594 	.word	0x1ffff594
     c60:	1ffff58c 	.word	0x1ffff58c
     c64:	1ffff584 	.word	0x1ffff584
     c68:	0000002c 	.word	0x0000002c

00000c6c <sd_mmc_deselect_slot>:
{
     c6c:	b580      	push	{r7, lr}
     c6e:	af00      	add	r7, sp, #0
     c70:	4a08      	ldr	r2, [pc, #32]	; (c94 <sd_mmc_deselect_slot+0x28>)
     c72:	447a      	add	r2, pc
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c74:	4b08      	ldr	r3, [pc, #32]	; (c98 <sd_mmc_deselect_slot+0x2c>)
     c76:	447b      	add	r3, pc
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d106      	bne.n	c8c <sd_mmc_deselect_slot+0x20>
		driver_deselect_device(sd_mmc_slot_sel);
     c7e:	4b07      	ldr	r3, [pc, #28]	; (c9c <sd_mmc_deselect_slot+0x30>)
     c80:	447b      	add	r3, pc
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	0018      	movs	r0, r3
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <sd_mmc_deselect_slot+0x34>)
     c88:	58d3      	ldr	r3, [r2, r3]
     c8a:	4798      	blx	r3
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	000111ee 	.word	0x000111ee
     c98:	1ffff546 	.word	0x1ffff546
     c9c:	1ffff53c 	.word	0x1ffff53c
     ca0:	000002e0 	.word	0x000002e0

00000ca4 <sd_mmc_spi_card_init>:
{
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	af00      	add	r7, sp, #0
     caa:	4c67      	ldr	r4, [pc, #412]	; (e48 <sd_mmc_spi_card_init+0x1a4>)
     cac:	447c      	add	r4, pc
	uint8_t v2 = 0;
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	2200      	movs	r2, #0
     cb2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card->type = CARD_TYPE_SD;
     cb4:	4b65      	ldr	r3, [pc, #404]	; (e4c <sd_mmc_spi_card_init+0x1a8>)
     cb6:	447b      	add	r3, pc
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	2201      	movs	r2, #1
     cbc:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     cbe:	4b64      	ldr	r3, [pc, #400]	; (e50 <sd_mmc_spi_card_init+0x1ac>)
     cc0:	447b      	add	r3, pc
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	2200      	movs	r2, #0
     cc6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     cc8:	4b62      	ldr	r3, [pc, #392]	; (e54 <sd_mmc_spi_card_init+0x1b0>)
     cca:	447b      	add	r3, pc
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	2200      	movs	r2, #0
     cd0:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     cd2:	4b61      	ldr	r3, [pc, #388]	; (e58 <sd_mmc_spi_card_init+0x1b4>)
     cd4:	58e3      	ldr	r3, [r4, r3]
     cd6:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     cd8:	2388      	movs	r3, #136	; 0x88
     cda:	015b      	lsls	r3, r3, #5
     cdc:	2100      	movs	r1, #0
     cde:	0018      	movs	r0, r3
     ce0:	4b5e      	ldr	r3, [pc, #376]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     ce2:	58e3      	ldr	r3, [r4, r3]
     ce4:	4798      	blx	r3
     ce6:	0003      	movs	r3, r0
     ce8:	001a      	movs	r2, r3
     cea:	2301      	movs	r3, #1
     cec:	4053      	eors	r3, r2
     cee:	b2db      	uxtb	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	d001      	beq.n	cf8 <sd_mmc_spi_card_init+0x54>
		return false;
     cf4:	2300      	movs	r3, #0
     cf6:	e0a3      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sd_cmd8(&v2)) {
     cf8:	1dfb      	adds	r3, r7, #7
     cfa:	0018      	movs	r0, r3
     cfc:	4b58      	ldr	r3, [pc, #352]	; (e60 <sd_mmc_spi_card_init+0x1bc>)
     cfe:	447b      	add	r3, pc
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	001a      	movs	r2, r3
     d06:	2301      	movs	r3, #1
     d08:	4053      	eors	r3, r2
     d0a:	b2db      	uxtb	r3, r3
     d0c:	2b00      	cmp	r3, #0
     d0e:	d001      	beq.n	d14 <sd_mmc_spi_card_init+0x70>
		return false;
     d10:	2300      	movs	r3, #0
     d12:	e095      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sdio_op_cond()) {
     d14:	4b53      	ldr	r3, [pc, #332]	; (e64 <sd_mmc_spi_card_init+0x1c0>)
     d16:	447b      	add	r3, pc
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	001a      	movs	r2, r3
     d1e:	2301      	movs	r3, #1
     d20:	4053      	eors	r3, r2
     d22:	b2db      	uxtb	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d001      	beq.n	d2c <sd_mmc_spi_card_init+0x88>
		return false;
     d28:	2300      	movs	r3, #0
     d2a:	e089      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d2c:	4b4e      	ldr	r3, [pc, #312]	; (e68 <sd_mmc_spi_card_init+0x1c4>)
     d2e:	447b      	add	r3, pc
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	7adb      	ldrb	r3, [r3, #11]
     d34:	001a      	movs	r2, r3
     d36:	2301      	movs	r3, #1
     d38:	4013      	ands	r3, r2
     d3a:	d025      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
		if (!sd_spi_op_cond(v2)) {
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	0018      	movs	r0, r3
     d42:	4b4a      	ldr	r3, [pc, #296]	; (e6c <sd_mmc_spi_card_init+0x1c8>)
     d44:	447b      	add	r3, pc
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2301      	movs	r3, #1
     d4e:	4053      	eors	r3, r2
     d50:	b2db      	uxtb	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d009      	beq.n	d6a <sd_mmc_spi_card_init+0xc6>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d56:	4b46      	ldr	r3, [pc, #280]	; (e70 <sd_mmc_spi_card_init+0x1cc>)
     d58:	447b      	add	r3, pc
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	2202      	movs	r2, #2
     d5e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
     d60:	4b44      	ldr	r3, [pc, #272]	; (e74 <sd_mmc_spi_card_init+0x1d0>)
     d62:	447b      	add	r3, pc
     d64:	4798      	blx	r3
     d66:	0003      	movs	r3, r0
     d68:	e06a      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d6a:	4b43      	ldr	r3, [pc, #268]	; (e78 <sd_mmc_spi_card_init+0x1d4>)
     d6c:	2100      	movs	r1, #0
     d6e:	0018      	movs	r0, r3
     d70:	4b3a      	ldr	r3, [pc, #232]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     d72:	58e3      	ldr	r3, [r4, r3]
     d74:	4798      	blx	r3
     d76:	0003      	movs	r3, r0
     d78:	001a      	movs	r2, r3
     d7a:	2301      	movs	r3, #1
     d7c:	4053      	eors	r3, r2
     d7e:	b2db      	uxtb	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d001      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
			return false;
     d84:	2300      	movs	r3, #0
     d86:	e05b      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d88:	4b3c      	ldr	r3, [pc, #240]	; (e7c <sd_mmc_spi_card_init+0x1d8>)
     d8a:	447b      	add	r3, pc
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	7adb      	ldrb	r3, [r3, #11]
     d90:	001a      	movs	r2, r3
     d92:	2301      	movs	r3, #1
     d94:	4013      	ands	r3, r2
     d96:	d01a      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
		if (!sd_mmc_cmd9_spi()) {
     d98:	4b39      	ldr	r3, [pc, #228]	; (e80 <sd_mmc_spi_card_init+0x1dc>)
     d9a:	447b      	add	r3, pc
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	001a      	movs	r2, r3
     da2:	2301      	movs	r3, #1
     da4:	4053      	eors	r3, r2
     da6:	b2db      	uxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	d001      	beq.n	db0 <sd_mmc_spi_card_init+0x10c>
			return false;
     dac:	2300      	movs	r3, #0
     dae:	e047      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		sd_decode_csd();
     db0:	4b34      	ldr	r3, [pc, #208]	; (e84 <sd_mmc_spi_card_init+0x1e0>)
     db2:	447b      	add	r3, pc
     db4:	4798      	blx	r3
		if (!sd_acmd51()) {
     db6:	4b34      	ldr	r3, [pc, #208]	; (e88 <sd_mmc_spi_card_init+0x1e4>)
     db8:	447b      	add	r3, pc
     dba:	4798      	blx	r3
     dbc:	0003      	movs	r3, r0
     dbe:	001a      	movs	r2, r3
     dc0:	2301      	movs	r3, #1
     dc2:	4053      	eors	r3, r2
     dc4:	b2db      	uxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d001      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
			return false;
     dca:	2300      	movs	r3, #0
     dcc:	e038      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dce:	4b2f      	ldr	r3, [pc, #188]	; (e8c <sd_mmc_spi_card_init+0x1e8>)
     dd0:	447b      	add	r3, pc
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	7adb      	ldrb	r3, [r3, #11]
     dd6:	001a      	movs	r2, r3
     dd8:	2301      	movs	r3, #1
     dda:	4013      	ands	r3, r2
     ddc:	d018      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
     dde:	4b2c      	ldr	r3, [pc, #176]	; (e90 <sd_mmc_spi_card_init+0x1ec>)
     de0:	447b      	add	r3, pc
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	7adb      	ldrb	r3, [r3, #11]
     de6:	001a      	movs	r2, r3
     de8:	2308      	movs	r3, #8
     dea:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dec:	d110      	bne.n	e10 <sd_mmc_spi_card_init+0x16c>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	009b      	lsls	r3, r3, #2
     df2:	4a28      	ldr	r2, [pc, #160]	; (e94 <sd_mmc_spi_card_init+0x1f0>)
     df4:	0019      	movs	r1, r3
     df6:	0010      	movs	r0, r2
     df8:	4b18      	ldr	r3, [pc, #96]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     dfa:	58e3      	ldr	r3, [r4, r3]
     dfc:	4798      	blx	r3
     dfe:	0003      	movs	r3, r0
     e00:	001a      	movs	r2, r3
     e02:	2301      	movs	r3, #1
     e04:	4053      	eors	r3, r2
     e06:	b2db      	uxtb	r3, r3
     e08:	2b00      	cmp	r3, #0
     e0a:	d001      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			return false;
     e0c:	2300      	movs	r3, #0
     e0e:	e017      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e10:	4b21      	ldr	r3, [pc, #132]	; (e98 <sd_mmc_spi_card_init+0x1f4>)
     e12:	447b      	add	r3, pc
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	7adb      	ldrb	r3, [r3, #11]
     e18:	001a      	movs	r2, r3
     e1a:	2301      	movs	r3, #1
     e1c:	4013      	ands	r3, r2
     e1e:	d00b      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
		if (!sd_mmc_cmd13()) {
     e20:	4b1e      	ldr	r3, [pc, #120]	; (e9c <sd_mmc_spi_card_init+0x1f8>)
     e22:	447b      	add	r3, pc
     e24:	4798      	blx	r3
     e26:	0003      	movs	r3, r0
     e28:	001a      	movs	r2, r3
     e2a:	2301      	movs	r3, #1
     e2c:	4053      	eors	r3, r2
     e2e:	b2db      	uxtb	r3, r3
     e30:	2b00      	cmp	r3, #0
     e32:	d001      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
			return false;
     e34:	2300      	movs	r3, #0
     e36:	e003      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	sd_mmc_configure_slot();
     e38:	4b19      	ldr	r3, [pc, #100]	; (ea0 <sd_mmc_spi_card_init+0x1fc>)
     e3a:	447b      	add	r3, pc
     e3c:	4798      	blx	r3
	return true;
     e3e:	2301      	movs	r3, #1
}
     e40:	0018      	movs	r0, r3
     e42:	46bd      	mov	sp, r7
     e44:	b003      	add	sp, #12
     e46:	bd90      	pop	{r4, r7, pc}
     e48:	000111b4 	.word	0x000111b4
     e4c:	1ffff50a 	.word	0x1ffff50a
     e50:	1ffff500 	.word	0x1ffff500
     e54:	1ffff4f6 	.word	0x1ffff4f6
     e58:	000002f4 	.word	0x000002f4
     e5c:	00000264 	.word	0x00000264
     e60:	fffff73b 	.word	0xfffff73b
     e64:	fffff717 	.word	0xfffff717
     e68:	1ffff492 	.word	0x1ffff492
     e6c:	fffff5ed 	.word	0xfffff5ed
     e70:	1ffff468 	.word	0x1ffff468
     e74:	0000013f 	.word	0x0000013f
     e78:	0000113b 	.word	0x0000113b
     e7c:	1ffff436 	.word	0x1ffff436
     e80:	fffff85f 	.word	0xfffff85f
     e84:	fffffa7b 	.word	0xfffffa7b
     e88:	fffffc29 	.word	0xfffffc29
     e8c:	1ffff3f0 	.word	0x1ffff3f0
     e90:	1ffff3e0 	.word	0x1ffff3e0
     e94:	00001110 	.word	0x00001110
     e98:	1ffff3ae 	.word	0x1ffff3ae
     e9c:	fffffb57 	.word	0xfffffb57
     ea0:	fffffddf 	.word	0xfffffddf

00000ea4 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
     ea4:	b590      	push	{r4, r7, lr}
     ea6:	b083      	sub	sp, #12
     ea8:	af00      	add	r7, sp, #0
     eaa:	4c3a      	ldr	r4, [pc, #232]	; (f94 <sd_mmc_spi_install_mmc+0xf0>)
     eac:	447c      	add	r4, pc
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     eae:	2388      	movs	r3, #136	; 0x88
     eb0:	015b      	lsls	r3, r3, #5
     eb2:	2100      	movs	r1, #0
     eb4:	0018      	movs	r0, r3
     eb6:	4b38      	ldr	r3, [pc, #224]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eb8:	58e3      	ldr	r3, [r4, r3]
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	001a      	movs	r2, r3
     ec0:	2301      	movs	r3, #1
     ec2:	4053      	eors	r3, r2
     ec4:	b2db      	uxtb	r3, r3
     ec6:	2b00      	cmp	r3, #0
     ec8:	d001      	beq.n	ece <sd_mmc_spi_install_mmc+0x2a>
		return false;
     eca:	2300      	movs	r3, #0
     ecc:	e05e      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	if (!mmc_spi_op_cond()) {
     ece:	4b33      	ldr	r3, [pc, #204]	; (f9c <sd_mmc_spi_install_mmc+0xf8>)
     ed0:	447b      	add	r3, pc
     ed2:	4798      	blx	r3
     ed4:	0003      	movs	r3, r0
     ed6:	001a      	movs	r2, r3
     ed8:	2301      	movs	r3, #1
     eda:	4053      	eors	r3, r2
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d001      	beq.n	ee6 <sd_mmc_spi_install_mmc+0x42>
		return false;
     ee2:	2300      	movs	r3, #0
     ee4:	e052      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ee6:	4b2e      	ldr	r3, [pc, #184]	; (fa0 <sd_mmc_spi_install_mmc+0xfc>)
     ee8:	2100      	movs	r1, #0
     eea:	0018      	movs	r0, r3
     eec:	4b2a      	ldr	r3, [pc, #168]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eee:	58e3      	ldr	r3, [r4, r3]
     ef0:	4798      	blx	r3
     ef2:	0003      	movs	r3, r0
     ef4:	001a      	movs	r2, r3
     ef6:	2301      	movs	r3, #1
     ef8:	4053      	eors	r3, r2
     efa:	b2db      	uxtb	r3, r3
     efc:	2b00      	cmp	r3, #0
     efe:	d001      	beq.n	f04 <sd_mmc_spi_install_mmc+0x60>
		return false;
     f00:	2300      	movs	r3, #0
     f02:	e043      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
     f04:	4b27      	ldr	r3, [pc, #156]	; (fa4 <sd_mmc_spi_install_mmc+0x100>)
     f06:	447b      	add	r3, pc
     f08:	4798      	blx	r3
     f0a:	0003      	movs	r3, r0
     f0c:	001a      	movs	r2, r3
     f0e:	2301      	movs	r3, #1
     f10:	4053      	eors	r3, r2
     f12:	b2db      	uxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <sd_mmc_spi_install_mmc+0x78>
		return false;
     f18:	2300      	movs	r3, #0
     f1a:	e037      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	mmc_decode_csd();
     f1c:	4b22      	ldr	r3, [pc, #136]	; (fa8 <sd_mmc_spi_install_mmc+0x104>)
     f1e:	447b      	add	r3, pc
     f20:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f22:	4b22      	ldr	r3, [pc, #136]	; (fac <sd_mmc_spi_install_mmc+0x108>)
     f24:	447b      	add	r3, pc
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	7b1b      	ldrb	r3, [r3, #12]
     f2a:	2b3f      	cmp	r3, #63	; 0x3f
     f2c:	d90d      	bls.n	f4a <sd_mmc_spi_install_mmc+0xa6>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
     f2e:	1dfb      	adds	r3, r7, #7
     f30:	0018      	movs	r0, r3
     f32:	4b1f      	ldr	r3, [pc, #124]	; (fb0 <sd_mmc_spi_install_mmc+0x10c>)
     f34:	447b      	add	r3, pc
     f36:	4798      	blx	r3
     f38:	0003      	movs	r3, r0
     f3a:	001a      	movs	r2, r3
     f3c:	2301      	movs	r3, #1
     f3e:	4053      	eors	r3, r2
     f40:	b2db      	uxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	d001      	beq.n	f4a <sd_mmc_spi_install_mmc+0xa6>
			return false;
     f46:	2300      	movs	r3, #0
     f48:	e020      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	009b      	lsls	r3, r3, #2
     f4e:	4a19      	ldr	r2, [pc, #100]	; (fb4 <sd_mmc_spi_install_mmc+0x110>)
     f50:	0019      	movs	r1, r3
     f52:	0010      	movs	r0, r2
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     f56:	58e3      	ldr	r3, [r4, r3]
     f58:	4798      	blx	r3
     f5a:	0003      	movs	r3, r0
     f5c:	001a      	movs	r2, r3
     f5e:	2301      	movs	r3, #1
     f60:	4053      	eors	r3, r2
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d001      	beq.n	f6c <sd_mmc_spi_install_mmc+0xc8>
		return false;
     f68:	2300      	movs	r3, #0
     f6a:	e00f      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
     f6c:	4b12      	ldr	r3, [pc, #72]	; (fb8 <sd_mmc_spi_install_mmc+0x114>)
     f6e:	447b      	add	r3, pc
     f70:	4798      	blx	r3
     f72:	0003      	movs	r3, r0
     f74:	001a      	movs	r2, r3
     f76:	2301      	movs	r3, #1
     f78:	4053      	eors	r3, r2
     f7a:	b2db      	uxtb	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d001      	beq.n	f84 <sd_mmc_spi_install_mmc+0xe0>
		return false;
     f80:	2300      	movs	r3, #0
     f82:	e003      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
     f84:	4b0d      	ldr	r3, [pc, #52]	; (fbc <sd_mmc_spi_install_mmc+0x118>)
     f86:	447b      	add	r3, pc
     f88:	4798      	blx	r3
	return true;
     f8a:	2301      	movs	r3, #1
}
     f8c:	0018      	movs	r0, r3
     f8e:	46bd      	mov	sp, r7
     f90:	b003      	add	sp, #12
     f92:	bd90      	pop	{r4, r7, pc}
     f94:	00010fb4 	.word	0x00010fb4
     f98:	00000264 	.word	0x00000264
     f9c:	fffff39d 	.word	0xfffff39d
     fa0:	0000113b 	.word	0x0000113b
     fa4:	fffff6f3 	.word	0xfffff6f3
     fa8:	fffff75f 	.word	0xfffff75f
     fac:	1ffff29c 	.word	0x1ffff29c
     fb0:	fffff581 	.word	0xfffff581
     fb4:	00001110 	.word	0x00001110
     fb8:	fffffa0b 	.word	0xfffffa0b
     fbc:	fffffc93 	.word	0xfffffc93

00000fc0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	4a11      	ldr	r2, [pc, #68]	; (100c <sd_mmc_init+0x4c>)
     fc8:	447a      	add	r2, pc
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fca:	1dfb      	adds	r3, r7, #7
     fcc:	2100      	movs	r1, #0
     fce:	7019      	strb	r1, [r3, #0]
     fd0:	e00d      	b.n	fee <sd_mmc_init+0x2e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     fd2:	1dfb      	adds	r3, r7, #7
     fd4:	781b      	ldrb	r3, [r3, #0]
     fd6:	490e      	ldr	r1, [pc, #56]	; (1010 <sd_mmc_init+0x50>)
     fd8:	4479      	add	r1, pc
     fda:	015b      	lsls	r3, r3, #5
     fdc:	18cb      	adds	r3, r1, r3
     fde:	330a      	adds	r3, #10
     fe0:	2104      	movs	r1, #4
     fe2:	7019      	strb	r1, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fe4:	1dfb      	adds	r3, r7, #7
     fe6:	7819      	ldrb	r1, [r3, #0]
     fe8:	1dfb      	adds	r3, r7, #7
     fea:	3101      	adds	r1, #1
     fec:	7019      	strb	r1, [r3, #0]
     fee:	1dfb      	adds	r3, r7, #7
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d0ed      	beq.n	fd2 <sd_mmc_init+0x12>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     ff6:	4b07      	ldr	r3, [pc, #28]	; (1014 <sd_mmc_init+0x54>)
     ff8:	447b      	add	r3, pc
     ffa:	21ff      	movs	r1, #255	; 0xff
     ffc:	7019      	strb	r1, [r3, #0]
	driver_init();
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <sd_mmc_init+0x58>)
    1000:	58d3      	ldr	r3, [r2, r3]
    1002:	4798      	blx	r3
}
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	46bd      	mov	sp, r7
    1008:	b002      	add	sp, #8
    100a:	bd80      	pop	{r7, pc}
    100c:	00010e98 	.word	0x00010e98
    1010:	1ffff1c4 	.word	0x1ffff1c4
    1014:	1ffff1c4 	.word	0x1ffff1c4
    1018:	0000017c 	.word	0x0000017c

0000101c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    101c:	b590      	push	{r4, r7, lr}
    101e:	b085      	sub	sp, #20
    1020:	af00      	add	r7, sp, #0
    1022:	0002      	movs	r2, r0
    1024:	1dfb      	adds	r3, r7, #7
    1026:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1028:	230f      	movs	r3, #15
    102a:	18fc      	adds	r4, r7, r3
    102c:	1dfb      	adds	r3, r7, #7
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	0018      	movs	r0, r3
    1032:	4b16      	ldr	r3, [pc, #88]	; (108c <sd_mmc_check+0x70>)
    1034:	447b      	add	r3, pc
    1036:	4798      	blx	r3
    1038:	0003      	movs	r3, r0
    103a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	2b01      	cmp	r3, #1
    1044:	d006      	beq.n	1054 <sd_mmc_check+0x38>
		sd_mmc_deselect_slot();
    1046:	4b12      	ldr	r3, [pc, #72]	; (1090 <sd_mmc_check+0x74>)
    1048:	447b      	add	r3, pc
    104a:	4798      	blx	r3
		return sd_mmc_err;
    104c:	230f      	movs	r3, #15
    104e:	18fb      	adds	r3, r7, r3
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	e017      	b.n	1084 <sd_mmc_check+0x68>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1054:	4b0f      	ldr	r3, [pc, #60]	; (1094 <sd_mmc_check+0x78>)
    1056:	447b      	add	r3, pc
    1058:	4798      	blx	r3
    105a:	1e03      	subs	r3, r0, #0
    105c:	d009      	beq.n	1072 <sd_mmc_check+0x56>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    105e:	4b0e      	ldr	r3, [pc, #56]	; (1098 <sd_mmc_check+0x7c>)
    1060:	447b      	add	r3, pc
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2200      	movs	r2, #0
    1066:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <sd_mmc_check+0x80>)
    106a:	447b      	add	r3, pc
    106c:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    106e:	2301      	movs	r3, #1
    1070:	e008      	b.n	1084 <sd_mmc_check+0x68>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1072:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <sd_mmc_check+0x84>)
    1074:	447b      	add	r3, pc
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2203      	movs	r2, #3
    107a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    107c:	4b09      	ldr	r3, [pc, #36]	; (10a4 <sd_mmc_check+0x88>)
    107e:	447b      	add	r3, pc
    1080:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1082:	2303      	movs	r3, #3
}
    1084:	0018      	movs	r0, r3
    1086:	46bd      	mov	sp, r7
    1088:	b005      	add	sp, #20
    108a:	bd90      	pop	{r4, r7, pc}
    108c:	fffffaed 	.word	0xfffffaed
    1090:	fffffc21 	.word	0xfffffc21
    1094:	fffffc4b 	.word	0xfffffc4b
    1098:	1ffff160 	.word	0x1ffff160
    109c:	fffffbff 	.word	0xfffffbff
    10a0:	1ffff14c 	.word	0x1ffff14c
    10a4:	fffffbeb 	.word	0xfffffbeb

000010a8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	0002      	movs	r2, r0
    10b0:	1dfb      	adds	r3, r7, #7
    10b2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10b4:	1dfb      	adds	r3, r7, #7
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	0018      	movs	r0, r3
    10ba:	4b09      	ldr	r3, [pc, #36]	; (10e0 <sd_mmc_get_type+0x38>)
    10bc:	447b      	add	r3, pc
    10be:	4798      	blx	r3
    10c0:	1e03      	subs	r3, r0, #0
    10c2:	d001      	beq.n	10c8 <sd_mmc_get_type+0x20>
		return CARD_TYPE_UNKNOWN;
    10c4:	2300      	movs	r3, #0
    10c6:	e006      	b.n	10d6 <sd_mmc_get_type+0x2e>
	}
	sd_mmc_deselect_slot();
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <sd_mmc_get_type+0x3c>)
    10ca:	447b      	add	r3, pc
    10cc:	4798      	blx	r3
	return sd_mmc_card->type;
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <sd_mmc_get_type+0x40>)
    10d0:	447b      	add	r3, pc
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	7adb      	ldrb	r3, [r3, #11]
}
    10d6:	0018      	movs	r0, r3
    10d8:	46bd      	mov	sp, r7
    10da:	b002      	add	sp, #8
    10dc:	bd80      	pop	{r7, pc}
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	fffffa65 	.word	0xfffffa65
    10e4:	fffffb9f 	.word	0xfffffb9f
    10e8:	1ffff0f0 	.word	0x1ffff0f0

000010ec <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
    10f0:	af00      	add	r7, sp, #0
    10f2:	0002      	movs	r2, r0
    10f4:	1dfb      	adds	r3, r7, #7
    10f6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10f8:	1dfb      	adds	r3, r7, #7
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	0018      	movs	r0, r3
    10fe:	4b09      	ldr	r3, [pc, #36]	; (1124 <sd_mmc_get_capacity+0x38>)
    1100:	447b      	add	r3, pc
    1102:	4798      	blx	r3
    1104:	1e03      	subs	r3, r0, #0
    1106:	d001      	beq.n	110c <sd_mmc_get_capacity+0x20>
		return 0;
    1108:	2300      	movs	r3, #0
    110a:	e006      	b.n	111a <sd_mmc_get_capacity+0x2e>
	}
	sd_mmc_deselect_slot();
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <sd_mmc_get_capacity+0x3c>)
    110e:	447b      	add	r3, pc
    1110:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1112:	4b06      	ldr	r3, [pc, #24]	; (112c <sd_mmc_get_capacity+0x40>)
    1114:	447b      	add	r3, pc
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	685b      	ldr	r3, [r3, #4]
}
    111a:	0018      	movs	r0, r3
    111c:	46bd      	mov	sp, r7
    111e:	b002      	add	sp, #8
    1120:	bd80      	pop	{r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	fffffa21 	.word	0xfffffa21
    1128:	fffffb5b 	.word	0xfffffb5b
    112c:	1ffff0ac 	.word	0x1ffff0ac

00001130 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1130:	b580      	push	{r7, lr}
    1132:	b082      	sub	sp, #8
    1134:	af00      	add	r7, sp, #0
    1136:	0002      	movs	r2, r0
    1138:	1dfb      	adds	r3, r7, #7
    113a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    113c:	2300      	movs	r3, #0
}
    113e:	0018      	movs	r0, r3
    1140:	46bd      	mov	sp, r7
    1142:	b002      	add	sp, #8
    1144:	bd80      	pop	{r7, pc}
	...

00001148 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1148:	b5b0      	push	{r4, r5, r7, lr}
    114a:	b088      	sub	sp, #32
    114c:	af02      	add	r7, sp, #8
    114e:	6039      	str	r1, [r7, #0]
    1150:	0011      	movs	r1, r2
    1152:	1dfb      	adds	r3, r7, #7
    1154:	1c02      	adds	r2, r0, #0
    1156:	701a      	strb	r2, [r3, #0]
    1158:	1d3b      	adds	r3, r7, #4
    115a:	1c0a      	adds	r2, r1, #0
    115c:	801a      	strh	r2, [r3, #0]
    115e:	4d31      	ldr	r5, [pc, #196]	; (1224 <sd_mmc_init_read_blocks+0xdc>)
    1160:	447d      	add	r5, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1162:	230f      	movs	r3, #15
    1164:	18fc      	adds	r4, r7, r3
    1166:	1dfb      	adds	r3, r7, #7
    1168:	781b      	ldrb	r3, [r3, #0]
    116a:	0018      	movs	r0, r3
    116c:	4b2e      	ldr	r3, [pc, #184]	; (1228 <sd_mmc_init_read_blocks+0xe0>)
    116e:	447b      	add	r3, pc
    1170:	4798      	blx	r3
    1172:	0003      	movs	r3, r0
    1174:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1176:	230f      	movs	r3, #15
    1178:	18fb      	adds	r3, r7, r3
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	2b00      	cmp	r3, #0
    117e:	d003      	beq.n	1188 <sd_mmc_init_read_blocks+0x40>
		return sd_mmc_err;
    1180:	230f      	movs	r3, #15
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	e048      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1188:	4b28      	ldr	r3, [pc, #160]	; (122c <sd_mmc_init_read_blocks+0xe4>)
    118a:	447b      	add	r3, pc
    118c:	4798      	blx	r3
    118e:	0003      	movs	r3, r0
    1190:	001a      	movs	r2, r3
    1192:	2301      	movs	r3, #1
    1194:	4053      	eors	r3, r2
    1196:	b2db      	uxtb	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	d004      	beq.n	11a6 <sd_mmc_init_read_blocks+0x5e>
		sd_mmc_deselect_slot();
    119c:	4b24      	ldr	r3, [pc, #144]	; (1230 <sd_mmc_init_read_blocks+0xe8>)
    119e:	447b      	add	r3, pc
    11a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11a2:	2305      	movs	r3, #5
    11a4:	e039      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	if (nb_block > 1) {
    11a6:	1d3b      	adds	r3, r7, #4
    11a8:	881b      	ldrh	r3, [r3, #0]
    11aa:	2b01      	cmp	r3, #1
    11ac:	d902      	bls.n	11b4 <sd_mmc_init_read_blocks+0x6c>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    11ae:	4b21      	ldr	r3, [pc, #132]	; (1234 <sd_mmc_init_read_blocks+0xec>)
    11b0:	617b      	str	r3, [r7, #20]
    11b2:	e001      	b.n	11b8 <sd_mmc_init_read_blocks+0x70>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11b4:	4b20      	ldr	r3, [pc, #128]	; (1238 <sd_mmc_init_read_blocks+0xf0>)
    11b6:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11b8:	4b20      	ldr	r3, [pc, #128]	; (123c <sd_mmc_init_read_blocks+0xf4>)
    11ba:	447b      	add	r3, pc
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	7adb      	ldrb	r3, [r3, #11]
    11c0:	001a      	movs	r2, r3
    11c2:	2308      	movs	r3, #8
    11c4:	4013      	ands	r3, r2
    11c6:	d002      	beq.n	11ce <sd_mmc_init_read_blocks+0x86>
		arg = start;
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	613b      	str	r3, [r7, #16]
    11cc:	e002      	b.n	11d4 <sd_mmc_init_read_blocks+0x8c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    11ce:	683b      	ldr	r3, [r7, #0]
    11d0:	025b      	lsls	r3, r3, #9
    11d2:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11d4:	1d3b      	adds	r3, r7, #4
    11d6:	881c      	ldrh	r4, [r3, #0]
    11d8:	2380      	movs	r3, #128	; 0x80
    11da:	009a      	lsls	r2, r3, #2
    11dc:	6939      	ldr	r1, [r7, #16]
    11de:	6978      	ldr	r0, [r7, #20]
    11e0:	2301      	movs	r3, #1
    11e2:	9300      	str	r3, [sp, #0]
    11e4:	0023      	movs	r3, r4
    11e6:	4c16      	ldr	r4, [pc, #88]	; (1240 <sd_mmc_init_read_blocks+0xf8>)
    11e8:	592c      	ldr	r4, [r5, r4]
    11ea:	47a0      	blx	r4
    11ec:	0003      	movs	r3, r0
    11ee:	001a      	movs	r2, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4053      	eors	r3, r2
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d004      	beq.n	1204 <sd_mmc_init_read_blocks+0xbc>
		sd_mmc_deselect_slot();
    11fa:	4b12      	ldr	r3, [pc, #72]	; (1244 <sd_mmc_init_read_blocks+0xfc>)
    11fc:	447b      	add	r3, pc
    11fe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1200:	2305      	movs	r3, #5
    1202:	e00a      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1204:	4b10      	ldr	r3, [pc, #64]	; (1248 <sd_mmc_init_read_blocks+0x100>)
    1206:	447b      	add	r3, pc
    1208:	1d3a      	adds	r2, r7, #4
    120a:	8812      	ldrh	r2, [r2, #0]
    120c:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    120e:	4b0f      	ldr	r3, [pc, #60]	; (124c <sd_mmc_init_read_blocks+0x104>)
    1210:	447b      	add	r3, pc
    1212:	1d3a      	adds	r2, r7, #4
    1214:	8812      	ldrh	r2, [r2, #0]
    1216:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1218:	2300      	movs	r3, #0
}
    121a:	0018      	movs	r0, r3
    121c:	46bd      	mov	sp, r7
    121e:	b006      	add	sp, #24
    1220:	bdb0      	pop	{r4, r5, r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	00010d00 	.word	0x00010d00
    1228:	fffff9b3 	.word	0xfffff9b3
    122c:	fffff7ef 	.word	0xfffff7ef
    1230:	fffffacb 	.word	0xfffffacb
    1234:	00101112 	.word	0x00101112
    1238:	00081111 	.word	0x00081111
    123c:	1ffff006 	.word	0x1ffff006
    1240:	00000130 	.word	0x00000130
    1244:	fffffa6d 	.word	0xfffffa6d
    1248:	1fffefc0 	.word	0x1fffefc0
    124c:	1fffefb4 	.word	0x1fffefb4

00001250 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
    1258:	000a      	movs	r2, r1
    125a:	1cbb      	adds	r3, r7, #2
    125c:	801a      	strh	r2, [r3, #0]
    125e:	4a12      	ldr	r2, [pc, #72]	; (12a8 <sd_mmc_start_read_blocks+0x58>)
    1260:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1262:	1cbb      	adds	r3, r7, #2
    1264:	8819      	ldrh	r1, [r3, #0]
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	0018      	movs	r0, r3
    126a:	4b10      	ldr	r3, [pc, #64]	; (12ac <sd_mmc_start_read_blocks+0x5c>)
    126c:	58d3      	ldr	r3, [r2, r3]
    126e:	4798      	blx	r3
    1270:	0003      	movs	r3, r0
    1272:	001a      	movs	r2, r3
    1274:	2301      	movs	r3, #1
    1276:	4053      	eors	r3, r2
    1278:	b2db      	uxtb	r3, r3
    127a:	2b00      	cmp	r3, #0
    127c:	d005      	beq.n	128a <sd_mmc_start_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    127e:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <sd_mmc_start_read_blocks+0x60>)
    1280:	447b      	add	r3, pc
    1282:	2200      	movs	r2, #0
    1284:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1286:	2305      	movs	r3, #5
    1288:	e00a      	b.n	12a0 <sd_mmc_start_read_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <sd_mmc_start_read_blocks+0x64>)
    128c:	447b      	add	r3, pc
    128e:	881a      	ldrh	r2, [r3, #0]
    1290:	1cbb      	adds	r3, r7, #2
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	1ad3      	subs	r3, r2, r3
    1296:	b29a      	uxth	r2, r3
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <sd_mmc_start_read_blocks+0x68>)
    129a:	447b      	add	r3, pc
    129c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    129e:	2300      	movs	r3, #0
}
    12a0:	0018      	movs	r0, r3
    12a2:	46bd      	mov	sp, r7
    12a4:	b002      	add	sp, #8
    12a6:	bd80      	pop	{r7, pc}
    12a8:	00010c00 	.word	0x00010c00
    12ac:	00000210 	.word	0x00000210
    12b0:	1fffef46 	.word	0x1fffef46
    12b4:	1fffef3a 	.word	0x1fffef3a
    12b8:	1fffef2c 	.word	0x1fffef2c

000012bc <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    12bc:	b590      	push	{r4, r7, lr}
    12be:	b083      	sub	sp, #12
    12c0:	af00      	add	r7, sp, #0
    12c2:	0002      	movs	r2, r0
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	701a      	strb	r2, [r3, #0]
    12c8:	4c21      	ldr	r4, [pc, #132]	; (1350 <sd_mmc_wait_end_of_read_blocks+0x94>)
    12ca:	447c      	add	r4, pc
	if (!driver_wait_end_of_read_blocks()) {
    12cc:	4b21      	ldr	r3, [pc, #132]	; (1354 <sd_mmc_wait_end_of_read_blocks+0x98>)
    12ce:	58e3      	ldr	r3, [r4, r3]
    12d0:	4798      	blx	r3
    12d2:	0003      	movs	r3, r0
    12d4:	001a      	movs	r2, r3
    12d6:	2301      	movs	r3, #1
    12d8:	4053      	eors	r3, r2
    12da:	b2db      	uxtb	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	d001      	beq.n	12e4 <sd_mmc_wait_end_of_read_blocks+0x28>
		return SD_MMC_ERR_COMM;
    12e0:	2305      	movs	r3, #5
    12e2:	e030      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	if (abort) {
    12e4:	1dfb      	adds	r3, r7, #7
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d004      	beq.n	12f6 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    12ec:	4b1a      	ldr	r3, [pc, #104]	; (1358 <sd_mmc_wait_end_of_read_blocks+0x9c>)
    12ee:	447b      	add	r3, pc
    12f0:	2200      	movs	r2, #0
    12f2:	801a      	strh	r2, [r3, #0]
    12f4:	e006      	b.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    12f6:	4b19      	ldr	r3, [pc, #100]	; (135c <sd_mmc_wait_end_of_read_blocks+0xa0>)
    12f8:	447b      	add	r3, pc
    12fa:	881b      	ldrh	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d001      	beq.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_OK;
    1300:	2300      	movs	r3, #0
    1302:	e020      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1304:	4b16      	ldr	r3, [pc, #88]	; (1360 <sd_mmc_wait_end_of_read_blocks+0xa4>)
    1306:	447b      	add	r3, pc
    1308:	881b      	ldrh	r3, [r3, #0]
    130a:	2b01      	cmp	r3, #1
    130c:	d104      	bne.n	1318 <sd_mmc_wait_end_of_read_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <sd_mmc_wait_end_of_read_blocks+0xa8>)
    1310:	447b      	add	r3, pc
    1312:	4798      	blx	r3
		return SD_MMC_OK;
    1314:	2300      	movs	r3, #0
    1316:	e016      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1318:	4b13      	ldr	r3, [pc, #76]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    131a:	2100      	movs	r1, #0
    131c:	0018      	movs	r0, r3
    131e:	4b13      	ldr	r3, [pc, #76]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    1320:	58e3      	ldr	r3, [r4, r3]
    1322:	4798      	blx	r3
    1324:	0003      	movs	r3, r0
    1326:	001a      	movs	r2, r3
    1328:	2301      	movs	r3, #1
    132a:	4053      	eors	r3, r2
    132c:	b2db      	uxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d005      	beq.n	133e <sd_mmc_wait_end_of_read_blocks+0x82>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1332:	4b0d      	ldr	r3, [pc, #52]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    1334:	2100      	movs	r1, #0
    1336:	0018      	movs	r0, r3
    1338:	4b0c      	ldr	r3, [pc, #48]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    133a:	58e3      	ldr	r3, [r4, r3]
    133c:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    133e:	4b0c      	ldr	r3, [pc, #48]	; (1370 <sd_mmc_wait_end_of_read_blocks+0xb4>)
    1340:	447b      	add	r3, pc
    1342:	4798      	blx	r3
	return SD_MMC_OK;
    1344:	2300      	movs	r3, #0
}
    1346:	0018      	movs	r0, r3
    1348:	46bd      	mov	sp, r7
    134a:	b003      	add	sp, #12
    134c:	bd90      	pop	{r4, r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	00010b96 	.word	0x00010b96
    1354:	00000188 	.word	0x00000188
    1358:	1fffeed8 	.word	0x1fffeed8
    135c:	1fffeece 	.word	0x1fffeece
    1360:	1fffeebe 	.word	0x1fffeebe
    1364:	fffff959 	.word	0xfffff959
    1368:	0000310c 	.word	0x0000310c
    136c:	00000264 	.word	0x00000264
    1370:	fffff929 	.word	0xfffff929

00001374 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1374:	b5b0      	push	{r4, r5, r7, lr}
    1376:	b088      	sub	sp, #32
    1378:	af02      	add	r7, sp, #8
    137a:	6039      	str	r1, [r7, #0]
    137c:	0011      	movs	r1, r2
    137e:	1dfb      	adds	r3, r7, #7
    1380:	1c02      	adds	r2, r0, #0
    1382:	701a      	strb	r2, [r3, #0]
    1384:	1d3b      	adds	r3, r7, #4
    1386:	1c0a      	adds	r2, r1, #0
    1388:	801a      	strh	r2, [r3, #0]
    138a:	4c30      	ldr	r4, [pc, #192]	; (144c <sd_mmc_init_write_blocks+0xd8>)
    138c:	447c      	add	r4, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    138e:	230f      	movs	r3, #15
    1390:	18fd      	adds	r5, r7, r3
    1392:	1dfb      	adds	r3, r7, #7
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	0018      	movs	r0, r3
    1398:	4b2d      	ldr	r3, [pc, #180]	; (1450 <sd_mmc_init_write_blocks+0xdc>)
    139a:	447b      	add	r3, pc
    139c:	4798      	blx	r3
    139e:	0003      	movs	r3, r0
    13a0:	702b      	strb	r3, [r5, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    13a2:	230f      	movs	r3, #15
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781b      	ldrb	r3, [r3, #0]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d003      	beq.n	13b4 <sd_mmc_init_write_blocks+0x40>
		return sd_mmc_err;
    13ac:	230f      	movs	r3, #15
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	e046      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}
	if (sd_mmc_is_write_protected(slot)) {
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	0018      	movs	r0, r3
    13ba:	4b26      	ldr	r3, [pc, #152]	; (1454 <sd_mmc_init_write_blocks+0xe0>)
    13bc:	58e3      	ldr	r3, [r4, r3]
    13be:	4798      	blx	r3
    13c0:	1e03      	subs	r3, r0, #0
    13c2:	d004      	beq.n	13ce <sd_mmc_init_write_blocks+0x5a>
		sd_mmc_deselect_slot();
    13c4:	4b24      	ldr	r3, [pc, #144]	; (1458 <sd_mmc_init_write_blocks+0xe4>)
    13c6:	447b      	add	r3, pc
    13c8:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    13ca:	2307      	movs	r3, #7
    13cc:	e039      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}

	if (nb_block > 1) {
    13ce:	1d3b      	adds	r3, r7, #4
    13d0:	881b      	ldrh	r3, [r3, #0]
    13d2:	2b01      	cmp	r3, #1
    13d4:	d902      	bls.n	13dc <sd_mmc_init_write_blocks+0x68>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    13d6:	4b21      	ldr	r3, [pc, #132]	; (145c <sd_mmc_init_write_blocks+0xe8>)
    13d8:	617b      	str	r3, [r7, #20]
    13da:	e001      	b.n	13e0 <sd_mmc_init_write_blocks+0x6c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    13dc:	4b20      	ldr	r3, [pc, #128]	; (1460 <sd_mmc_init_write_blocks+0xec>)
    13de:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    13e0:	4b20      	ldr	r3, [pc, #128]	; (1464 <sd_mmc_init_write_blocks+0xf0>)
    13e2:	447b      	add	r3, pc
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	7adb      	ldrb	r3, [r3, #11]
    13e8:	001a      	movs	r2, r3
    13ea:	2308      	movs	r3, #8
    13ec:	4013      	ands	r3, r2
    13ee:	d002      	beq.n	13f6 <sd_mmc_init_write_blocks+0x82>
		arg = start;
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	613b      	str	r3, [r7, #16]
    13f4:	e002      	b.n	13fc <sd_mmc_init_write_blocks+0x88>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    13f6:	683b      	ldr	r3, [r7, #0]
    13f8:	025b      	lsls	r3, r3, #9
    13fa:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    13fc:	1d3b      	adds	r3, r7, #4
    13fe:	881d      	ldrh	r5, [r3, #0]
    1400:	2380      	movs	r3, #128	; 0x80
    1402:	009a      	lsls	r2, r3, #2
    1404:	6939      	ldr	r1, [r7, #16]
    1406:	6978      	ldr	r0, [r7, #20]
    1408:	2301      	movs	r3, #1
    140a:	9300      	str	r3, [sp, #0]
    140c:	002b      	movs	r3, r5
    140e:	4d16      	ldr	r5, [pc, #88]	; (1468 <sd_mmc_init_write_blocks+0xf4>)
    1410:	5964      	ldr	r4, [r4, r5]
    1412:	47a0      	blx	r4
    1414:	0003      	movs	r3, r0
    1416:	001a      	movs	r2, r3
    1418:	2301      	movs	r3, #1
    141a:	4053      	eors	r3, r2
    141c:	b2db      	uxtb	r3, r3
    141e:	2b00      	cmp	r3, #0
    1420:	d004      	beq.n	142c <sd_mmc_init_write_blocks+0xb8>
		sd_mmc_deselect_slot();
    1422:	4b12      	ldr	r3, [pc, #72]	; (146c <sd_mmc_init_write_blocks+0xf8>)
    1424:	447b      	add	r3, pc
    1426:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1428:	2305      	movs	r3, #5
    142a:	e00a      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    142c:	4b10      	ldr	r3, [pc, #64]	; (1470 <sd_mmc_init_write_blocks+0xfc>)
    142e:	447b      	add	r3, pc
    1430:	1d3a      	adds	r2, r7, #4
    1432:	8812      	ldrh	r2, [r2, #0]
    1434:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <sd_mmc_init_write_blocks+0x100>)
    1438:	447b      	add	r3, pc
    143a:	1d3a      	adds	r2, r7, #4
    143c:	8812      	ldrh	r2, [r2, #0]
    143e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1440:	2300      	movs	r3, #0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	b006      	add	sp, #24
    1448:	bdb0      	pop	{r4, r5, r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	00010ad4 	.word	0x00010ad4
    1450:	fffff787 	.word	0xfffff787
    1454:	00000148 	.word	0x00000148
    1458:	fffff8a3 	.word	0xfffff8a3
    145c:	00109119 	.word	0x00109119
    1460:	00089118 	.word	0x00089118
    1464:	1fffedde 	.word	0x1fffedde
    1468:	00000130 	.word	0x00000130
    146c:	fffff845 	.word	0xfffff845
    1470:	1fffed98 	.word	0x1fffed98
    1474:	1fffed8c 	.word	0x1fffed8c

00001478 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	000a      	movs	r2, r1
    1482:	1cbb      	adds	r3, r7, #2
    1484:	801a      	strh	r2, [r3, #0]
    1486:	4a12      	ldr	r2, [pc, #72]	; (14d0 <sd_mmc_start_write_blocks+0x58>)
    1488:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    148a:	1cbb      	adds	r3, r7, #2
    148c:	8819      	ldrh	r1, [r3, #0]
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	0018      	movs	r0, r3
    1492:	4b10      	ldr	r3, [pc, #64]	; (14d4 <sd_mmc_start_write_blocks+0x5c>)
    1494:	58d3      	ldr	r3, [r2, r3]
    1496:	4798      	blx	r3
    1498:	0003      	movs	r3, r0
    149a:	001a      	movs	r2, r3
    149c:	2301      	movs	r3, #1
    149e:	4053      	eors	r3, r2
    14a0:	b2db      	uxtb	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <sd_mmc_start_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    14a6:	4b0c      	ldr	r3, [pc, #48]	; (14d8 <sd_mmc_start_write_blocks+0x60>)
    14a8:	447b      	add	r3, pc
    14aa:	2200      	movs	r2, #0
    14ac:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    14ae:	2305      	movs	r3, #5
    14b0:	e00a      	b.n	14c8 <sd_mmc_start_write_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    14b2:	4b0a      	ldr	r3, [pc, #40]	; (14dc <sd_mmc_start_write_blocks+0x64>)
    14b4:	447b      	add	r3, pc
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	1cbb      	adds	r3, r7, #2
    14ba:	881b      	ldrh	r3, [r3, #0]
    14bc:	1ad3      	subs	r3, r2, r3
    14be:	b29a      	uxth	r2, r3
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <sd_mmc_start_write_blocks+0x68>)
    14c2:	447b      	add	r3, pc
    14c4:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    14c6:	2300      	movs	r3, #0
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b002      	add	sp, #8
    14ce:	bd80      	pop	{r7, pc}
    14d0:	000109d8 	.word	0x000109d8
    14d4:	000001dc 	.word	0x000001dc
    14d8:	1fffed1e 	.word	0x1fffed1e
    14dc:	1fffed12 	.word	0x1fffed12
    14e0:	1fffed04 	.word	0x1fffed04

000014e4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b082      	sub	sp, #8
    14e8:	af00      	add	r7, sp, #0
    14ea:	0002      	movs	r2, r0
    14ec:	1dfb      	adds	r3, r7, #7
    14ee:	701a      	strb	r2, [r3, #0]
    14f0:	4a17      	ldr	r2, [pc, #92]	; (1550 <sd_mmc_wait_end_of_write_blocks+0x6c>)
    14f2:	447a      	add	r2, pc
	if (!driver_wait_end_of_write_blocks()) {
    14f4:	4b17      	ldr	r3, [pc, #92]	; (1554 <sd_mmc_wait_end_of_write_blocks+0x70>)
    14f6:	58d3      	ldr	r3, [r2, r3]
    14f8:	4798      	blx	r3
    14fa:	0003      	movs	r3, r0
    14fc:	001a      	movs	r2, r3
    14fe:	2301      	movs	r3, #1
    1500:	4053      	eors	r3, r2
    1502:	b2db      	uxtb	r3, r3
    1504:	2b00      	cmp	r3, #0
    1506:	d001      	beq.n	150c <sd_mmc_wait_end_of_write_blocks+0x28>
		return SD_MMC_ERR_COMM;
    1508:	2305      	movs	r3, #5
    150a:	e01d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}
	if (abort) {
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d004      	beq.n	151e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    1514:	4b10      	ldr	r3, [pc, #64]	; (1558 <sd_mmc_wait_end_of_write_blocks+0x74>)
    1516:	447b      	add	r3, pc
    1518:	2200      	movs	r2, #0
    151a:	801a      	strh	r2, [r3, #0]
    151c:	e006      	b.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    151e:	4b0f      	ldr	r3, [pc, #60]	; (155c <sd_mmc_wait_end_of_write_blocks+0x78>)
    1520:	447b      	add	r3, pc
    1522:	881b      	ldrh	r3, [r3, #0]
    1524:	2b00      	cmp	r3, #0
    1526:	d001      	beq.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
		return SD_MMC_OK;
    1528:	2300      	movs	r3, #0
    152a:	e00d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    152c:	4b0c      	ldr	r3, [pc, #48]	; (1560 <sd_mmc_wait_end_of_write_blocks+0x7c>)
    152e:	447b      	add	r3, pc
    1530:	881b      	ldrh	r3, [r3, #0]
    1532:	2b01      	cmp	r3, #1
    1534:	d104      	bne.n	1540 <sd_mmc_wait_end_of_write_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1536:	4b0b      	ldr	r3, [pc, #44]	; (1564 <sd_mmc_wait_end_of_write_blocks+0x80>)
    1538:	447b      	add	r3, pc
    153a:	4798      	blx	r3
		return SD_MMC_OK;
    153c:	2300      	movs	r3, #0
    153e:	e003      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1540:	4b09      	ldr	r3, [pc, #36]	; (1568 <sd_mmc_wait_end_of_write_blocks+0x84>)
    1542:	447b      	add	r3, pc
    1544:	4798      	blx	r3
	return SD_MMC_OK;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	0001096e 	.word	0x0001096e
    1554:	0000023c 	.word	0x0000023c
    1558:	1fffecb0 	.word	0x1fffecb0
    155c:	1fffeca6 	.word	0x1fffeca6
    1560:	1fffec96 	.word	0x1fffec96
    1564:	fffff731 	.word	0xfffff731
    1568:	fffff727 	.word	0xfffff727

0000156c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    156c:	b590      	push	{r4, r7, lr}
    156e:	b083      	sub	sp, #12
    1570:	af00      	add	r7, sp, #0
    1572:	0002      	movs	r2, r0
    1574:	1dfb      	adds	r3, r7, #7
    1576:	701a      	strb	r2, [r3, #0]
    1578:	4c1a      	ldr	r4, [pc, #104]	; (15e4 <sd_mmc_test_unit_ready+0x78>)
    157a:	447c      	add	r4, pc
	switch (sd_mmc_check(slot))
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	0018      	movs	r0, r3
    1582:	4b19      	ldr	r3, [pc, #100]	; (15e8 <sd_mmc_test_unit_ready+0x7c>)
    1584:	58e3      	ldr	r3, [r4, r3]
    1586:	4798      	blx	r3
    1588:	0003      	movs	r3, r0
    158a:	2b01      	cmp	r3, #1
    158c:	d01b      	beq.n	15c6 <sd_mmc_test_unit_ready+0x5a>
    158e:	2b02      	cmp	r3, #2
    1590:	d01b      	beq.n	15ca <sd_mmc_test_unit_ready+0x5e>
    1592:	2b00      	cmp	r3, #0
    1594:	d121      	bne.n	15da <sd_mmc_test_unit_ready+0x6e>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    1596:	1dfb      	adds	r3, r7, #7
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	4a14      	ldr	r2, [pc, #80]	; (15ec <sd_mmc_test_unit_ready+0x80>)
    159c:	447a      	add	r2, pc
    159e:	5cd3      	ldrb	r3, [r2, r3]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d001      	beq.n	15a8 <sd_mmc_test_unit_ready+0x3c>
			return CTRL_NO_PRESENT;
    15a4:	2302      	movs	r3, #2
    15a6:	e019      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	0018      	movs	r0, r3
    15ae:	4b10      	ldr	r3, [pc, #64]	; (15f0 <sd_mmc_test_unit_ready+0x84>)
    15b0:	58e3      	ldr	r3, [r4, r3]
    15b2:	4798      	blx	r3
    15b4:	0003      	movs	r3, r0
    15b6:	001a      	movs	r2, r3
    15b8:	2303      	movs	r3, #3
    15ba:	4013      	ands	r3, r2
    15bc:	d001      	beq.n	15c2 <sd_mmc_test_unit_ready+0x56>
			return CTRL_GOOD;
    15be:	2300      	movs	r3, #0
    15c0:	e00c      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    15c2:	2302      	movs	r3, #2
    15c4:	e00a      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    15c6:	2303      	movs	r3, #3
    15c8:	e008      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    15ca:	1dfb      	adds	r3, r7, #7
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	4a09      	ldr	r2, [pc, #36]	; (15f4 <sd_mmc_test_unit_ready+0x88>)
    15d0:	447a      	add	r2, pc
    15d2:	2100      	movs	r1, #0
    15d4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    15d6:	2302      	movs	r3, #2
    15d8:	e000      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	default:
		return CTRL_FAIL;
    15da:	2301      	movs	r3, #1
	}
}
    15dc:	0018      	movs	r0, r3
    15de:	46bd      	mov	sp, r7
    15e0:	b003      	add	sp, #12
    15e2:	bd90      	pop	{r4, r7, pc}
    15e4:	000108e6 	.word	0x000108e6
    15e8:	00000068 	.word	0x00000068
    15ec:	1fffec2c 	.word	0x1fffec2c
    15f0:	000000e8 	.word	0x000000e8
    15f4:	1fffebf8 	.word	0x1fffebf8

000015f8 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
    15fc:	4a04      	ldr	r2, [pc, #16]	; (1610 <sd_mmc_test_unit_ready_0+0x18>)
    15fe:	447a      	add	r2, pc
	return sd_mmc_test_unit_ready(0);
    1600:	2000      	movs	r0, #0
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <sd_mmc_test_unit_ready_0+0x1c>)
    1604:	58d3      	ldr	r3, [r2, r3]
    1606:	4798      	blx	r3
    1608:	0003      	movs	r3, r0
}
    160a:	0018      	movs	r0, r3
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}
    1610:	00010862 	.word	0x00010862
    1614:	00000048 	.word	0x00000048

00001618 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1618:	b590      	push	{r4, r7, lr}
    161a:	b083      	sub	sp, #12
    161c:	af00      	add	r7, sp, #0
    161e:	0002      	movs	r2, r0
    1620:	6039      	str	r1, [r7, #0]
    1622:	1dfb      	adds	r3, r7, #7
    1624:	701a      	strb	r2, [r3, #0]
    1626:	4c0c      	ldr	r4, [pc, #48]	; (1658 <sd_mmc_read_capacity+0x40>)
    1628:	447c      	add	r4, pc
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    162a:	1dfb      	adds	r3, r7, #7
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	0018      	movs	r0, r3
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <sd_mmc_read_capacity+0x44>)
    1632:	58e3      	ldr	r3, [r4, r3]
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	005b      	lsls	r3, r3, #1
    163a:	1e5a      	subs	r2, r3, #1
    163c:	683b      	ldr	r3, [r7, #0]
    163e:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1640:	1dfb      	adds	r3, r7, #7
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	0018      	movs	r0, r3
    1646:	4b06      	ldr	r3, [pc, #24]	; (1660 <sd_mmc_read_capacity+0x48>)
    1648:	58e3      	ldr	r3, [r4, r3]
    164a:	4798      	blx	r3
    164c:	0003      	movs	r3, r0
}
    164e:	0018      	movs	r0, r3
    1650:	46bd      	mov	sp, r7
    1652:	b003      	add	sp, #12
    1654:	bd90      	pop	{r4, r7, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00010838 	.word	0x00010838
    165c:	000002fc 	.word	0x000002fc
    1660:	00000048 	.word	0x00000048

00001664 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	4a06      	ldr	r2, [pc, #24]	; (1688 <sd_mmc_read_capacity_0+0x24>)
    166e:	447a      	add	r2, pc
	return sd_mmc_read_capacity(0, nb_sector);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	0019      	movs	r1, r3
    1674:	2000      	movs	r0, #0
    1676:	4b05      	ldr	r3, [pc, #20]	; (168c <sd_mmc_read_capacity_0+0x28>)
    1678:	58d3      	ldr	r3, [r2, r3]
    167a:	4798      	blx	r3
    167c:	0003      	movs	r3, r0
}
    167e:	0018      	movs	r0, r3
    1680:	46bd      	mov	sp, r7
    1682:	b002      	add	sp, #8
    1684:	bd80      	pop	{r7, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	000107f2 	.word	0x000107f2
    168c:	00000150 	.word	0x00000150

00001690 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	0002      	movs	r2, r0
    1698:	1dfb      	adds	r3, r7, #7
    169a:	701a      	strb	r2, [r3, #0]
    169c:	1dbb      	adds	r3, r7, #6
    169e:	1c0a      	adds	r2, r1, #0
    16a0:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    16a2:	1dfb      	adds	r3, r7, #7
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	4a05      	ldr	r2, [pc, #20]	; (16bc <sd_mmc_unload+0x2c>)
    16a8:	447a      	add	r2, pc
    16aa:	1db9      	adds	r1, r7, #6
    16ac:	7809      	ldrb	r1, [r1, #0]
    16ae:	54d1      	strb	r1, [r2, r3]
	return true;
    16b0:	2301      	movs	r3, #1
}
    16b2:	0018      	movs	r0, r3
    16b4:	46bd      	mov	sp, r7
    16b6:	b002      	add	sp, #8
    16b8:	bd80      	pop	{r7, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	1fffeb20 	.word	0x1fffeb20

000016c0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	0002      	movs	r2, r0
    16c8:	1dfb      	adds	r3, r7, #7
    16ca:	701a      	strb	r2, [r3, #0]
    16cc:	4a06      	ldr	r2, [pc, #24]	; (16e8 <sd_mmc_unload_0+0x28>)
    16ce:	447a      	add	r2, pc
	return sd_mmc_unload(0, unload);
    16d0:	1dfb      	adds	r3, r7, #7
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	0019      	movs	r1, r3
    16d6:	2000      	movs	r0, #0
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <sd_mmc_unload_0+0x2c>)
    16da:	58d3      	ldr	r3, [r2, r3]
    16dc:	4798      	blx	r3
    16de:	0003      	movs	r3, r0
}
    16e0:	0018      	movs	r0, r3
    16e2:	46bd      	mov	sp, r7
    16e4:	b002      	add	sp, #8
    16e6:	bd80      	pop	{r7, pc}
    16e8:	00010792 	.word	0x00010792
    16ec:	000001c0 	.word	0x000001c0

000016f0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	0002      	movs	r2, r0
    16f8:	1dfb      	adds	r3, r7, #7
    16fa:	701a      	strb	r2, [r3, #0]
    16fc:	4a06      	ldr	r2, [pc, #24]	; (1718 <sd_mmc_wr_protect+0x28>)
    16fe:	447a      	add	r2, pc
	return sd_mmc_is_write_protected(slot);
    1700:	1dfb      	adds	r3, r7, #7
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	0018      	movs	r0, r3
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <sd_mmc_wr_protect+0x2c>)
    1708:	58d3      	ldr	r3, [r2, r3]
    170a:	4798      	blx	r3
    170c:	0003      	movs	r3, r0
}
    170e:	0018      	movs	r0, r3
    1710:	46bd      	mov	sp, r7
    1712:	b002      	add	sp, #8
    1714:	bd80      	pop	{r7, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	00010762 	.word	0x00010762
    171c:	00000148 	.word	0x00000148

00001720 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1720:	b580      	push	{r7, lr}
    1722:	af00      	add	r7, sp, #0
    1724:	4a04      	ldr	r2, [pc, #16]	; (1738 <sd_mmc_wr_protect_0+0x18>)
    1726:	447a      	add	r2, pc
	return sd_mmc_wr_protect(0);
    1728:	2000      	movs	r0, #0
    172a:	4b04      	ldr	r3, [pc, #16]	; (173c <sd_mmc_wr_protect_0+0x1c>)
    172c:	58d3      	ldr	r3, [r2, r3]
    172e:	4798      	blx	r3
    1730:	0003      	movs	r3, r0
}
    1732:	0018      	movs	r0, r3
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}
    1738:	0001073a 	.word	0x0001073a
    173c:	000001d0 	.word	0x000001d0

00001740 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
    1746:	0002      	movs	r2, r0
    1748:	1dfb      	adds	r3, r7, #7
    174a:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    174c:	2301      	movs	r3, #1
}
    174e:	0018      	movs	r0, r3
    1750:	46bd      	mov	sp, r7
    1752:	b002      	add	sp, #8
    1754:	bd80      	pop	{r7, pc}
	...

00001758 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
    175c:	4a04      	ldr	r2, [pc, #16]	; (1770 <sd_mmc_removal_0+0x18>)
    175e:	447a      	add	r2, pc
	return sd_mmc_removal(0);
    1760:	2000      	movs	r0, #0
    1762:	4b04      	ldr	r3, [pc, #16]	; (1774 <sd_mmc_removal_0+0x1c>)
    1764:	58d3      	ldr	r3, [r2, r3]
    1766:	4798      	blx	r3
    1768:	0003      	movs	r3, r0
}
    176a:	0018      	movs	r0, r3
    176c:	46bd      	mov	sp, r7
    176e:	bd80      	pop	{r7, pc}
    1770:	00010702 	.word	0x00010702
    1774:	00000208 	.word	0x00000208

00001778 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1778:	b590      	push	{r4, r7, lr}
    177a:	b085      	sub	sp, #20
    177c:	af00      	add	r7, sp, #0
    177e:	60b9      	str	r1, [r7, #8]
    1780:	607a      	str	r2, [r7, #4]
    1782:	230f      	movs	r3, #15
    1784:	18fb      	adds	r3, r7, r3
    1786:	1c02      	adds	r2, r0, #0
    1788:	701a      	strb	r2, [r3, #0]
    178a:	4c15      	ldr	r4, [pc, #84]	; (17e0 <sd_mmc_mem_2_ram+0x68>)
    178c:	447c      	add	r4, pc
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    178e:	68b9      	ldr	r1, [r7, #8]
    1790:	230f      	movs	r3, #15
    1792:	18fb      	adds	r3, r7, r3
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	2201      	movs	r2, #1
    1798:	0018      	movs	r0, r3
    179a:	4b12      	ldr	r3, [pc, #72]	; (17e4 <sd_mmc_mem_2_ram+0x6c>)
    179c:	58e3      	ldr	r3, [r4, r3]
    179e:	4798      	blx	r3
    17a0:	1e03      	subs	r3, r0, #0
    17a2:	d005      	beq.n	17b0 <sd_mmc_mem_2_ram+0x38>
    17a4:	2b02      	cmp	r3, #2
    17a6:	d101      	bne.n	17ac <sd_mmc_mem_2_ram+0x34>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    17a8:	2302      	movs	r3, #2
    17aa:	e015      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	default:
		return CTRL_FAIL;
    17ac:	2301      	movs	r3, #1
    17ae:	e013      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
		break;
    17b0:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2101      	movs	r1, #1
    17b6:	0018      	movs	r0, r3
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <sd_mmc_mem_2_ram+0x70>)
    17ba:	58e3      	ldr	r3, [r4, r3]
    17bc:	4798      	blx	r3
    17be:	1e03      	subs	r3, r0, #0
    17c0:	d001      	beq.n	17c6 <sd_mmc_mem_2_ram+0x4e>
		return CTRL_FAIL;
    17c2:	2301      	movs	r3, #1
    17c4:	e008      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    17c6:	2000      	movs	r0, #0
    17c8:	4b08      	ldr	r3, [pc, #32]	; (17ec <sd_mmc_mem_2_ram+0x74>)
    17ca:	58e3      	ldr	r3, [r4, r3]
    17cc:	4798      	blx	r3
    17ce:	1e03      	subs	r3, r0, #0
    17d0:	d001      	beq.n	17d6 <sd_mmc_mem_2_ram+0x5e>
		return CTRL_FAIL;
    17d2:	2301      	movs	r3, #1
    17d4:	e000      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	}
	return CTRL_GOOD;
    17d6:	2300      	movs	r3, #0
}
    17d8:	0018      	movs	r0, r3
    17da:	46bd      	mov	sp, r7
    17dc:	b005      	add	sp, #20
    17de:	bd90      	pop	{r4, r7, pc}
    17e0:	000106d4 	.word	0x000106d4
    17e4:	00000174 	.word	0x00000174
    17e8:	0000010c 	.word	0x0000010c
    17ec:	0000012c 	.word	0x0000012c

000017f0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    17f0:	b590      	push	{r4, r7, lr}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    17f8:	6039      	str	r1, [r7, #0]
    17fa:	4c07      	ldr	r4, [pc, #28]	; (1818 <sd_mmc_mem_2_ram_0+0x28>)
    17fc:	447c      	add	r4, pc
	return sd_mmc_mem_2_ram(0, addr, ram);
    17fe:	683a      	ldr	r2, [r7, #0]
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	0019      	movs	r1, r3
    1804:	2000      	movs	r0, #0
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <sd_mmc_mem_2_ram_0+0x2c>)
    1808:	58e3      	ldr	r3, [r4, r3]
    180a:	4798      	blx	r3
    180c:	0003      	movs	r3, r0
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b003      	add	sp, #12
    1814:	bd90      	pop	{r4, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	00010664 	.word	0x00010664
    181c:	0000028c 	.word	0x0000028c

00001820 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1820:	b590      	push	{r4, r7, lr}
    1822:	b085      	sub	sp, #20
    1824:	af00      	add	r7, sp, #0
    1826:	60b9      	str	r1, [r7, #8]
    1828:	607a      	str	r2, [r7, #4]
    182a:	230f      	movs	r3, #15
    182c:	18fb      	adds	r3, r7, r3
    182e:	1c02      	adds	r2, r0, #0
    1830:	701a      	strb	r2, [r3, #0]
    1832:	4c15      	ldr	r4, [pc, #84]	; (1888 <sd_mmc_ram_2_mem+0x68>)
    1834:	447c      	add	r4, pc
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1836:	68b9      	ldr	r1, [r7, #8]
    1838:	230f      	movs	r3, #15
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2201      	movs	r2, #1
    1840:	0018      	movs	r0, r3
    1842:	4b12      	ldr	r3, [pc, #72]	; (188c <sd_mmc_ram_2_mem+0x6c>)
    1844:	58e3      	ldr	r3, [r4, r3]
    1846:	4798      	blx	r3
    1848:	1e03      	subs	r3, r0, #0
    184a:	d005      	beq.n	1858 <sd_mmc_ram_2_mem+0x38>
    184c:	2b02      	cmp	r3, #2
    184e:	d101      	bne.n	1854 <sd_mmc_ram_2_mem+0x34>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1850:	2302      	movs	r3, #2
    1852:	e015      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	default:
		return CTRL_FAIL;
    1854:	2301      	movs	r3, #1
    1856:	e013      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
		break;
    1858:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	2101      	movs	r1, #1
    185e:	0018      	movs	r0, r3
    1860:	4b0b      	ldr	r3, [pc, #44]	; (1890 <sd_mmc_ram_2_mem+0x70>)
    1862:	58e3      	ldr	r3, [r4, r3]
    1864:	4798      	blx	r3
    1866:	1e03      	subs	r3, r0, #0
    1868:	d001      	beq.n	186e <sd_mmc_ram_2_mem+0x4e>
		return CTRL_FAIL;
    186a:	2301      	movs	r3, #1
    186c:	e008      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    186e:	2000      	movs	r0, #0
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <sd_mmc_ram_2_mem+0x74>)
    1872:	58e3      	ldr	r3, [r4, r3]
    1874:	4798      	blx	r3
    1876:	1e03      	subs	r3, r0, #0
    1878:	d001      	beq.n	187e <sd_mmc_ram_2_mem+0x5e>
		return CTRL_FAIL;
    187a:	2301      	movs	r3, #1
    187c:	e000      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	}
	return CTRL_GOOD;
    187e:	2300      	movs	r3, #0
}
    1880:	0018      	movs	r0, r3
    1882:	46bd      	mov	sp, r7
    1884:	b005      	add	sp, #20
    1886:	bd90      	pop	{r4, r7, pc}
    1888:	0001062c 	.word	0x0001062c
    188c:	000002f0 	.word	0x000002f0
    1890:	00000000 	.word	0x00000000
    1894:	00000060 	.word	0x00000060

00001898 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1898:	b590      	push	{r4, r7, lr}
    189a:	b083      	sub	sp, #12
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
    18a0:	6039      	str	r1, [r7, #0]
    18a2:	4c07      	ldr	r4, [pc, #28]	; (18c0 <sd_mmc_ram_2_mem_0+0x28>)
    18a4:	447c      	add	r4, pc
	return sd_mmc_ram_2_mem(0, addr, ram);
    18a6:	683a      	ldr	r2, [r7, #0]
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	0019      	movs	r1, r3
    18ac:	2000      	movs	r0, #0
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <sd_mmc_ram_2_mem_0+0x2c>)
    18b0:	58e3      	ldr	r3, [r4, r3]
    18b2:	4798      	blx	r3
    18b4:	0003      	movs	r3, r0
}
    18b6:	0018      	movs	r0, r3
    18b8:	46bd      	mov	sp, r7
    18ba:	b003      	add	sp, #12
    18bc:	bd90      	pop	{r4, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	000105bc 	.word	0x000105bc
    18c4:	00000184 	.word	0x00000184

000018c8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	2200      	movs	r2, #0
    18d4:	701a      	strb	r2, [r3, #0]
}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	46bd      	mov	sp, r7
    18da:	b002      	add	sp, #8
    18dc:	bd80      	pop	{r7, pc}
	...

000018e0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	0002      	movs	r2, r0
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	1dfb      	adds	r3, r7, #7
    18ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    18ee:	1dfb      	adds	r3, r7, #7
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b01      	cmp	r3, #1
    18f4:	d00a      	beq.n	190c <system_apb_clock_set_mask+0x2c>
    18f6:	2b02      	cmp	r3, #2
    18f8:	d00f      	beq.n	191a <system_apb_clock_set_mask+0x3a>
    18fa:	2b00      	cmp	r3, #0
    18fc:	d114      	bne.n	1928 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    18fe:	4b0e      	ldr	r3, [pc, #56]	; (1938 <system_apb_clock_set_mask+0x58>)
    1900:	4a0d      	ldr	r2, [pc, #52]	; (1938 <system_apb_clock_set_mask+0x58>)
    1902:	6991      	ldr	r1, [r2, #24]
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	430a      	orrs	r2, r1
    1908:	619a      	str	r2, [r3, #24]
			break;
    190a:	e00f      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    190c:	4b0a      	ldr	r3, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    190e:	4a0a      	ldr	r2, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    1910:	69d1      	ldr	r1, [r2, #28]
    1912:	683a      	ldr	r2, [r7, #0]
    1914:	430a      	orrs	r2, r1
    1916:	61da      	str	r2, [r3, #28]
			break;
    1918:	e008      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <system_apb_clock_set_mask+0x58>)
    191c:	4a06      	ldr	r2, [pc, #24]	; (1938 <system_apb_clock_set_mask+0x58>)
    191e:	6a11      	ldr	r1, [r2, #32]
    1920:	683a      	ldr	r2, [r7, #0]
    1922:	430a      	orrs	r2, r1
    1924:	621a      	str	r2, [r3, #32]
			break;
    1926:	e001      	b.n	192c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1928:	2317      	movs	r3, #23
    192a:	e000      	b.n	192e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    192c:	2300      	movs	r3, #0
}
    192e:	0018      	movs	r0, r3
    1930:	46bd      	mov	sp, r7
    1932:	b002      	add	sp, #8
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	40000400 	.word	0x40000400

0000193c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    193c:	b580      	push	{r7, lr}
    193e:	b082      	sub	sp, #8
    1940:	af00      	add	r7, sp, #0
    1942:	0002      	movs	r2, r0
    1944:	1dfb      	adds	r3, r7, #7
    1946:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1948:	4b06      	ldr	r3, [pc, #24]	; (1964 <system_interrupt_enable+0x28>)
    194a:	1dfa      	adds	r2, r7, #7
    194c:	7812      	ldrb	r2, [r2, #0]
    194e:	0011      	movs	r1, r2
    1950:	221f      	movs	r2, #31
    1952:	400a      	ands	r2, r1
    1954:	2101      	movs	r1, #1
    1956:	4091      	lsls	r1, r2
    1958:	000a      	movs	r2, r1
    195a:	601a      	str	r2, [r3, #0]
}
    195c:	46c0      	nop			; (mov r8, r8)
    195e:	46bd      	mov	sp, r7
    1960:	b002      	add	sp, #8
    1962:	bd80      	pop	{r7, pc}
    1964:	e000e100 	.word	0xe000e100

00001968 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1968:	b580      	push	{r7, lr}
    196a:	b082      	sub	sp, #8
    196c:	af00      	add	r7, sp, #0
    196e:	0002      	movs	r2, r0
    1970:	1dfb      	adds	r3, r7, #7
    1972:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1974:	4a07      	ldr	r2, [pc, #28]	; (1994 <system_interrupt_disable+0x2c>)
    1976:	1dfb      	adds	r3, r7, #7
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	0019      	movs	r1, r3
    197c:	231f      	movs	r3, #31
    197e:	400b      	ands	r3, r1
    1980:	2101      	movs	r1, #1
    1982:	4099      	lsls	r1, r3
    1984:	000b      	movs	r3, r1
    1986:	0019      	movs	r1, r3
    1988:	2380      	movs	r3, #128	; 0x80
    198a:	50d1      	str	r1, [r2, r3]
}
    198c:	46c0      	nop			; (mov r8, r8)
    198e:	46bd      	mov	sp, r7
    1990:	b002      	add	sp, #8
    1992:	bd80      	pop	{r7, pc}
    1994:	e000e100 	.word	0xe000e100

00001998 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    1998:	b580      	push	{r7, lr}
    199a:	b084      	sub	sp, #16
    199c:	af00      	add	r7, sp, #0
    199e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	7a9b      	ldrb	r3, [r3, #10]
    19aa:	b2db      	uxtb	r3, r3
    19ac:	b25b      	sxtb	r3, r3
    19ae:	2b00      	cmp	r3, #0
    19b0:	da01      	bge.n	19b6 <rtc_calendar_is_syncing+0x1e>
                return true;
    19b2:	2301      	movs	r3, #1
    19b4:	e000      	b.n	19b8 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    19b6:	2300      	movs	r3, #0
}
    19b8:	0018      	movs	r0, r3
    19ba:	46bd      	mov	sp, r7
    19bc:	b004      	add	sp, #16
    19be:	bd80      	pop	{r7, pc}

000019c0 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	b084      	sub	sp, #16
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    19ce:	2003      	movs	r0, #3
    19d0:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <rtc_calendar_enable+0x40>)
    19d2:	447b      	add	r3, pc
    19d4:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	0018      	movs	r0, r3
    19dc:	4b09      	ldr	r3, [pc, #36]	; (1a04 <rtc_calendar_enable+0x44>)
    19de:	447b      	add	r3, pc
    19e0:	4798      	blx	r3
    19e2:	1e03      	subs	r3, r0, #0
    19e4:	d1f8      	bne.n	19d8 <rtc_calendar_enable+0x18>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	881b      	ldrh	r3, [r3, #0]
    19ea:	b29b      	uxth	r3, r3
    19ec:	2202      	movs	r2, #2
    19ee:	4313      	orrs	r3, r2
    19f0:	b29a      	uxth	r2, r3
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	801a      	strh	r2, [r3, #0]
}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	46bd      	mov	sp, r7
    19fa:	b004      	add	sp, #16
    19fc:	bd80      	pop	{r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	ffffff67 	.word	0xffffff67
    1a04:	ffffffb7 	.word	0xffffffb7

00001a08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	b084      	sub	sp, #16
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    1a16:	2003      	movs	r0, #3
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <rtc_calendar_disable+0x4c>)
    1a1a:	447b      	add	r3, pc
    1a1c:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	0018      	movs	r0, r3
    1a24:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <rtc_calendar_disable+0x50>)
    1a26:	447b      	add	r3, pc
    1a28:	4798      	blx	r3
    1a2a:	1e03      	subs	r3, r0, #0
    1a2c:	d1f8      	bne.n	1a20 <rtc_calendar_disable+0x18>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	22c1      	movs	r2, #193	; 0xc1
    1a32:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	22c1      	movs	r2, #193	; 0xc1
    1a38:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	881b      	ldrh	r3, [r3, #0]
    1a3e:	b29b      	uxth	r3, r3
    1a40:	2202      	movs	r2, #2
    1a42:	4393      	bics	r3, r2
    1a44:	b29a      	uxth	r2, r3
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	801a      	strh	r2, [r3, #0]
}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46bd      	mov	sp, r7
    1a4e:	b004      	add	sp, #16
    1a50:	bd80      	pop	{r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	ffffff4b 	.word	0xffffff4b
    1a58:	ffffff6f 	.word	0xffffff6f

00001a5c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b084      	sub	sp, #16
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
    1a64:	4a11      	ldr	r2, [pc, #68]	; (1aac <rtc_calendar_reset+0x50>)
    1a66:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	0018      	movs	r0, r3
    1a72:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <rtc_calendar_reset+0x54>)
    1a74:	58d3      	ldr	r3, [r2, r3]
    1a76:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	2200      	movs	r2, #0
    1a7c:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	2200      	movs	r2, #0
    1a82:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a84:	46c0      	nop			; (mov r8, r8)
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	0018      	movs	r0, r3
    1a8a:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <rtc_calendar_reset+0x58>)
    1a8c:	447b      	add	r3, pc
    1a8e:	4798      	blx	r3
    1a90:	1e03      	subs	r3, r0, #0
    1a92:	d1f8      	bne.n	1a86 <rtc_calendar_reset+0x2a>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a94:	68fb      	ldr	r3, [r7, #12]
    1a96:	881b      	ldrh	r3, [r3, #0]
    1a98:	b29b      	uxth	r3, r3
    1a9a:	2201      	movs	r2, #1
    1a9c:	4313      	orrs	r3, r2
    1a9e:	b29a      	uxth	r2, r3
    1aa0:	68fb      	ldr	r3, [r7, #12]
    1aa2:	801a      	strh	r2, [r3, #0]
}
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b004      	add	sp, #16
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	000103fa 	.word	0x000103fa
    1ab0:	00000164 	.word	0x00000164
    1ab4:	ffffff09 	.word	0xffffff09

00001ab8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    1ac0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1ac2:	683b      	ldr	r3, [r7, #0]
    1ac4:	88db      	ldrh	r3, [r3, #6]
    1ac6:	001a      	movs	r2, r3
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	88db      	ldrh	r3, [r3, #6]
    1acc:	1ad3      	subs	r3, r2, r3
    1ace:	069b      	lsls	r3, r3, #26
    1ad0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1ad2:	683b      	ldr	r3, [r7, #0]
    1ad4:	795b      	ldrb	r3, [r3, #5]
    1ad6:	059b      	lsls	r3, r3, #22
    1ad8:	001a      	movs	r2, r3
    1ada:	68fb      	ldr	r3, [r7, #12]
    1adc:	4313      	orrs	r3, r2
    1ade:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1ae0:	683b      	ldr	r3, [r7, #0]
    1ae2:	791b      	ldrb	r3, [r3, #4]
    1ae4:	045b      	lsls	r3, r3, #17
    1ae6:	001a      	movs	r2, r3
    1ae8:	68fb      	ldr	r3, [r7, #12]
    1aea:	4313      	orrs	r3, r2
    1aec:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	789b      	ldrb	r3, [r3, #2]
    1af2:	031b      	lsls	r3, r3, #12
    1af4:	001a      	movs	r2, r3
    1af6:	68fb      	ldr	r3, [r7, #12]
    1af8:	4313      	orrs	r3, r2
    1afa:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	791b      	ldrb	r3, [r3, #4]
    1b00:	2201      	movs	r2, #1
    1b02:	4053      	eors	r3, r2
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d008      	beq.n	1b1c <rtc_calendar_time_to_register_value+0x64>
    1b0a:	683b      	ldr	r3, [r7, #0]
    1b0c:	78db      	ldrb	r3, [r3, #3]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d004      	beq.n	1b1c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1b12:	68fb      	ldr	r3, [r7, #12]
    1b14:	2280      	movs	r2, #128	; 0x80
    1b16:	0252      	lsls	r2, r2, #9
    1b18:	4313      	orrs	r3, r2
    1b1a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	785b      	ldrb	r3, [r3, #1]
    1b20:	019b      	lsls	r3, r3, #6
    1b22:	001a      	movs	r2, r3
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	4313      	orrs	r3, r2
    1b28:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1b2a:	683b      	ldr	r3, [r7, #0]
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	001a      	movs	r2, r3
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	4313      	orrs	r3, r2
    1b34:	60fb      	str	r3, [r7, #12]

	return register_value;
    1b36:	68fb      	ldr	r3, [r7, #12]
}
    1b38:	0018      	movs	r0, r3
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b004      	add	sp, #16
    1b3e:	bd80      	pop	{r7, pc}

00001b40 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b084      	sub	sp, #16
    1b44:	af00      	add	r7, sp, #0
    1b46:	60f8      	str	r0, [r7, #12]
    1b48:	60b9      	str	r1, [r7, #8]
    1b4a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b4c:	68bb      	ldr	r3, [r7, #8]
    1b4e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1b50:	b29a      	uxth	r2, r3
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	88db      	ldrh	r3, [r3, #6]
    1b56:	18d3      	adds	r3, r2, r3
    1b58:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1b5e:	68bb      	ldr	r3, [r7, #8]
    1b60:	0d9b      	lsrs	r3, r3, #22
    1b62:	b2db      	uxtb	r3, r3
    1b64:	220f      	movs	r2, #15
    1b66:	4013      	ands	r3, r2
    1b68:	b2da      	uxtb	r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1b6e:	68bb      	ldr	r3, [r7, #8]
    1b70:	0c5b      	lsrs	r3, r3, #17
    1b72:	b2db      	uxtb	r3, r3
    1b74:	221f      	movs	r2, #31
    1b76:	4013      	ands	r3, r2
    1b78:	b2da      	uxtb	r2, r3
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1b7e:	68fb      	ldr	r3, [r7, #12]
    1b80:	791b      	ldrb	r3, [r3, #4]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1b86:	68bb      	ldr	r3, [r7, #8]
    1b88:	0b1b      	lsrs	r3, r3, #12
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	221f      	movs	r2, #31
    1b8e:	4013      	ands	r3, r2
    1b90:	b2da      	uxtb	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	709a      	strb	r2, [r3, #2]
    1b96:	e010      	b.n	1bba <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1b98:	68bb      	ldr	r3, [r7, #8]
    1b9a:	0b1b      	lsrs	r3, r3, #12
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	220f      	movs	r2, #15
    1ba0:	4013      	ands	r3, r2
    1ba2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1ba8:	68ba      	ldr	r2, [r7, #8]
    1baa:	2380      	movs	r3, #128	; 0x80
    1bac:	025b      	lsls	r3, r3, #9
    1bae:	4013      	ands	r3, r2
    1bb0:	1e5a      	subs	r2, r3, #1
    1bb2:	4193      	sbcs	r3, r2
    1bb4:	b2da      	uxtb	r2, r3
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1bba:	68bb      	ldr	r3, [r7, #8]
    1bbc:	099b      	lsrs	r3, r3, #6
    1bbe:	b2db      	uxtb	r3, r3
    1bc0:	223f      	movs	r2, #63	; 0x3f
    1bc2:	4013      	ands	r3, r2
    1bc4:	b2da      	uxtb	r2, r3
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1bca:	68bb      	ldr	r3, [r7, #8]
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	223f      	movs	r2, #63	; 0x3f
    1bd0:	4013      	ands	r3, r2
    1bd2:	b2da      	uxtb	r2, r3
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1bd8:	46c0      	nop			; (mov r8, r8)
    1bda:	46bd      	mov	sp, r7
    1bdc:	b004      	add	sp, #16
    1bde:	bd80      	pop	{r7, pc}

00001be0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    1be0:	b590      	push	{r4, r7, lr}
    1be2:	b085      	sub	sp, #20
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	6039      	str	r1, [r7, #0]
    1bea:	4c30      	ldr	r4, [pc, #192]	; (1cac <_rtc_calendar_set_config+0xcc>)
    1bec:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bf4:	683b      	ldr	r3, [r7, #0]
    1bf6:	881a      	ldrh	r2, [r3, #0]
    1bf8:	230e      	movs	r3, #14
    1bfa:	18fb      	adds	r3, r7, r3
    1bfc:	2108      	movs	r1, #8
    1bfe:	430a      	orrs	r2, r1
    1c00:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	791b      	ldrb	r3, [r3, #4]
    1c06:	2201      	movs	r2, #1
    1c08:	4053      	eors	r3, r2
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d007      	beq.n	1c20 <_rtc_calendar_set_config+0x40>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c10:	230e      	movs	r3, #14
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	220e      	movs	r2, #14
    1c16:	18ba      	adds	r2, r7, r2
    1c18:	8812      	ldrh	r2, [r2, #0]
    1c1a:	2140      	movs	r1, #64	; 0x40
    1c1c:	430a      	orrs	r2, r1
    1c1e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    1c20:	683b      	ldr	r3, [r7, #0]
    1c22:	789b      	ldrb	r3, [r3, #2]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d007      	beq.n	1c38 <_rtc_calendar_set_config+0x58>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1c28:	230e      	movs	r3, #14
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	220e      	movs	r2, #14
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	8812      	ldrh	r2, [r2, #0]
    1c32:	2180      	movs	r1, #128	; 0x80
    1c34:	430a      	orrs	r2, r1
    1c36:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1c38:	68bb      	ldr	r3, [r7, #8]
    1c3a:	220e      	movs	r2, #14
    1c3c:	18ba      	adds	r2, r7, r2
    1c3e:	8812      	ldrh	r2, [r2, #0]
    1c40:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    1c42:	683b      	ldr	r3, [r7, #0]
    1c44:	78db      	ldrb	r3, [r3, #3]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d008      	beq.n	1c5c <_rtc_calendar_set_config+0x7c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1c4a:	68bb      	ldr	r3, [r7, #8]
    1c4c:	885b      	ldrh	r3, [r3, #2]
    1c4e:	b29b      	uxth	r3, r3
    1c50:	2280      	movs	r2, #128	; 0x80
    1c52:	01d2      	lsls	r2, r2, #7
    1c54:	4313      	orrs	r3, r2
    1c56:	b29a      	uxth	r2, r3
    1c58:	68bb      	ldr	r3, [r7, #8]
    1c5a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c5c:	230d      	movs	r3, #13
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	2200      	movs	r2, #0
    1c62:	701a      	strb	r2, [r3, #0]
    1c64:	e018      	b.n	1c98 <_rtc_calendar_set_config+0xb8>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1c66:	230d      	movs	r3, #13
    1c68:	18fb      	adds	r3, r7, r3
    1c6a:	781a      	ldrb	r2, [r3, #0]
    1c6c:	0013      	movs	r3, r2
    1c6e:	009b      	lsls	r3, r3, #2
    1c70:	189b      	adds	r3, r3, r2
    1c72:	005b      	lsls	r3, r3, #1
    1c74:	3308      	adds	r3, #8
    1c76:	683a      	ldr	r2, [r7, #0]
    1c78:	18d1      	adds	r1, r2, r3
    1c7a:	230d      	movs	r3, #13
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	781a      	ldrb	r2, [r3, #0]
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	0018      	movs	r0, r3
    1c84:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <_rtc_calendar_set_config+0xd0>)
    1c86:	58e3      	ldr	r3, [r4, r3]
    1c88:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c8a:	230d      	movs	r3, #13
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	781a      	ldrb	r2, [r3, #0]
    1c90:	230d      	movs	r3, #13
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	3201      	adds	r2, #1
    1c96:	701a      	strb	r2, [r3, #0]
    1c98:	230d      	movs	r3, #13
    1c9a:	18fb      	adds	r3, r7, r3
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d0e1      	beq.n	1c66 <_rtc_calendar_set_config+0x86>
	}
}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	46bd      	mov	sp, r7
    1ca6:	b005      	add	sp, #20
    1ca8:	bd90      	pop	{r4, r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00010274 	.word	0x00010274
    1cb0:	000002ac 	.word	0x000002ac

00001cb4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    1cb4:	b590      	push	{r4, r7, lr}
    1cb6:	b087      	sub	sp, #28
    1cb8:	af00      	add	r7, sp, #0
    1cba:	60f8      	str	r0, [r7, #12]
    1cbc:	60b9      	str	r1, [r7, #8]
    1cbe:	607a      	str	r2, [r7, #4]
    1cc0:	4c1f      	ldr	r4, [pc, #124]	; (1d40 <rtc_calendar_init+0x8c>)
    1cc2:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	68ba      	ldr	r2, [r7, #8]
    1cc8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    1cca:	2120      	movs	r1, #32
    1ccc:	2000      	movs	r0, #0
    1cce:	4b1d      	ldr	r3, [pc, #116]	; (1d44 <rtc_calendar_init+0x90>)
    1cd0:	447b      	add	r3, pc
    1cd2:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1cd4:	2314      	movs	r3, #20
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	0018      	movs	r0, r3
    1cda:	4b1b      	ldr	r3, [pc, #108]	; (1d48 <rtc_calendar_init+0x94>)
    1cdc:	447b      	add	r3, pc
    1cde:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1ce0:	2314      	movs	r3, #20
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	2202      	movs	r2, #2
    1ce6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1ce8:	2314      	movs	r3, #20
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	0019      	movs	r1, r3
    1cee:	2004      	movs	r0, #4
    1cf0:	4b16      	ldr	r3, [pc, #88]	; (1d4c <rtc_calendar_init+0x98>)
    1cf2:	58e3      	ldr	r3, [r4, r3]
    1cf4:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1cf6:	2004      	movs	r0, #4
    1cf8:	4b15      	ldr	r3, [pc, #84]	; (1d50 <rtc_calendar_init+0x9c>)
    1cfa:	58e3      	ldr	r3, [r4, r3]
    1cfc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	0018      	movs	r0, r3
    1d02:	4b14      	ldr	r3, [pc, #80]	; (1d54 <rtc_calendar_init+0xa0>)
    1d04:	58e3      	ldr	r3, [r4, r3]
    1d06:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	791a      	ldrb	r2, [r3, #4]
    1d0c:	68fb      	ldr	r3, [r7, #12]
    1d0e:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	78da      	ldrb	r2, [r3, #3]
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	88da      	ldrh	r2, [r3, #6]
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    1d20:	4b0d      	ldr	r3, [pc, #52]	; (1d58 <rtc_calendar_init+0xa4>)
    1d22:	58e3      	ldr	r3, [r4, r3]
    1d24:	68fa      	ldr	r2, [r7, #12]
    1d26:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    1d28:	687a      	ldr	r2, [r7, #4]
    1d2a:	68fb      	ldr	r3, [r7, #12]
    1d2c:	0011      	movs	r1, r2
    1d2e:	0018      	movs	r0, r3
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <rtc_calendar_init+0xa8>)
    1d32:	447b      	add	r3, pc
    1d34:	4798      	blx	r3
}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	46bd      	mov	sp, r7
    1d3a:	b007      	add	sp, #28
    1d3c:	bd90      	pop	{r4, r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	0001019e 	.word	0x0001019e
    1d44:	fffffc0d 	.word	0xfffffc0d
    1d48:	fffffbe9 	.word	0xfffffbe9
    1d4c:	000000b0 	.word	0x000000b0
    1d50:	00000238 	.word	0x00000238
    1d54:	00000194 	.word	0x00000194
    1d58:	00000018 	.word	0x00000018
    1d5c:	fffffeab 	.word	0xfffffeab

00001d60 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1d60:	b590      	push	{r4, r7, lr}
    1d62:	b085      	sub	sp, #20
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	6039      	str	r1, [r7, #0]
    1d6a:	4c1f      	ldr	r4, [pc, #124]	; (1de8 <rtc_calendar_get_time+0x88>)
    1d6c:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	795b      	ldrb	r3, [r3, #5]
    1d78:	2201      	movs	r2, #1
    1d7a:	4053      	eors	r3, r2
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d00b      	beq.n	1d9a <rtc_calendar_get_time+0x3a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	4a19      	ldr	r2, [pc, #100]	; (1dec <rtc_calendar_get_time+0x8c>)
    1d86:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    1d88:	46c0      	nop			; (mov r8, r8)
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <rtc_calendar_get_time+0x90>)
    1d90:	447b      	add	r3, pc
    1d92:	4798      	blx	r3
    1d94:	1e03      	subs	r3, r0, #0
    1d96:	d1f8      	bne.n	1d8a <rtc_calendar_get_time+0x2a>
    1d98:	e017      	b.n	1dca <rtc_calendar_get_time+0x6a>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1d9a:	68fb      	ldr	r3, [r7, #12]
    1d9c:	885b      	ldrh	r3, [r3, #2]
    1d9e:	b29b      	uxth	r3, r3
    1da0:	001a      	movs	r2, r3
    1da2:	2380      	movs	r3, #128	; 0x80
    1da4:	01db      	lsls	r3, r3, #7
    1da6:	4013      	ands	r3, r2
    1da8:	d10f      	bne.n	1dca <rtc_calendar_get_time+0x6a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	885b      	ldrh	r3, [r3, #2]
    1dae:	b29b      	uxth	r3, r3
    1db0:	4a10      	ldr	r2, [pc, #64]	; (1df4 <rtc_calendar_get_time+0x94>)
    1db2:	4313      	orrs	r3, r2
    1db4:	b29a      	uxth	r2, r3
    1db6:	68fb      	ldr	r3, [r7, #12]
    1db8:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	0018      	movs	r0, r3
    1dc0:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <rtc_calendar_get_time+0x98>)
    1dc2:	447b      	add	r3, pc
    1dc4:	4798      	blx	r3
    1dc6:	1e03      	subs	r3, r0, #0
    1dc8:	d1f8      	bne.n	1dbc <rtc_calendar_get_time+0x5c>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	691b      	ldr	r3, [r3, #16]
    1dce:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1dd0:	683a      	ldr	r2, [r7, #0]
    1dd2:	68b9      	ldr	r1, [r7, #8]
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	0018      	movs	r0, r3
    1dd8:	4b08      	ldr	r3, [pc, #32]	; (1dfc <rtc_calendar_get_time+0x9c>)
    1dda:	58e3      	ldr	r3, [r4, r3]
    1ddc:	4798      	blx	r3
}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	46bd      	mov	sp, r7
    1de2:	b005      	add	sp, #20
    1de4:	bd90      	pop	{r4, r7, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	000100f4 	.word	0x000100f4
    1dec:	ffff8000 	.word	0xffff8000
    1df0:	fffffc05 	.word	0xfffffc05
    1df4:	ffffc000 	.word	0xffffc000
    1df8:	fffffbd3 	.word	0xfffffbd3
    1dfc:	00000034 	.word	0x00000034

00001e00 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b086      	sub	sp, #24
    1e04:	af00      	add	r7, sp, #0
    1e06:	60f8      	str	r0, [r7, #12]
    1e08:	60b9      	str	r1, [r7, #8]
    1e0a:	1dfb      	adds	r3, r7, #7
    1e0c:	701a      	strb	r2, [r3, #0]
    1e0e:	4a19      	ldr	r2, [pc, #100]	; (1e74 <rtc_calendar_set_alarm+0x74>)
    1e10:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1e18:	1dfb      	adds	r3, r7, #7
    1e1a:	781b      	ldrb	r3, [r3, #0]
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d901      	bls.n	1e24 <rtc_calendar_set_alarm+0x24>
		return STATUS_ERR_INVALID_ARG;
    1e20:	2317      	movs	r3, #23
    1e22:	e022      	b.n	1e6a <rtc_calendar_set_alarm+0x6a>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1e24:	68b9      	ldr	r1, [r7, #8]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	0018      	movs	r0, r3
    1e2a:	4b13      	ldr	r3, [pc, #76]	; (1e78 <rtc_calendar_set_alarm+0x78>)
    1e2c:	58d3      	ldr	r3, [r2, r3]
    1e2e:	4798      	blx	r3
    1e30:	0003      	movs	r3, r0
    1e32:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	0018      	movs	r0, r3
    1e3a:	4b10      	ldr	r3, [pc, #64]	; (1e7c <rtc_calendar_set_alarm+0x7c>)
    1e3c:	447b      	add	r3, pc
    1e3e:	4798      	blx	r3
    1e40:	1e03      	subs	r3, r0, #0
    1e42:	d1f8      	bne.n	1e36 <rtc_calendar_set_alarm+0x36>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1e44:	1dfb      	adds	r3, r7, #7
    1e46:	781a      	ldrb	r2, [r3, #0]
    1e48:	697b      	ldr	r3, [r7, #20]
    1e4a:	3203      	adds	r2, #3
    1e4c:	00d2      	lsls	r2, r2, #3
    1e4e:	6939      	ldr	r1, [r7, #16]
    1e50:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1e52:	1dfb      	adds	r3, r7, #7
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	68ba      	ldr	r2, [r7, #8]
    1e58:	7a11      	ldrb	r1, [r2, #8]
    1e5a:	697a      	ldr	r2, [r7, #20]
    1e5c:	3303      	adds	r3, #3
    1e5e:	00db      	lsls	r3, r3, #3
    1e60:	18d3      	adds	r3, r2, r3
    1e62:	3304      	adds	r3, #4
    1e64:	1c0a      	adds	r2, r1, #0
    1e66:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    1e68:	2300      	movs	r3, #0
}
    1e6a:	0018      	movs	r0, r3
    1e6c:	46bd      	mov	sp, r7
    1e6e:	b006      	add	sp, #24
    1e70:	bd80      	pop	{r7, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	00010050 	.word	0x00010050
    1e78:	00000294 	.word	0x00000294
    1e7c:	fffffb59 	.word	0xfffffb59

00001e80 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b086      	sub	sp, #24
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	4a29      	ldr	r2, [pc, #164]	; (1f30 <_rtc_interrupt_handler+0xb0>)
    1e8a:	447a      	add	r2, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    1e8c:	4b29      	ldr	r3, [pc, #164]	; (1f34 <_rtc_interrupt_handler+0xb4>)
    1e8e:	58d3      	ldr	r3, [r2, r3]
    1e90:	687a      	ldr	r2, [r7, #4]
    1e92:	0092      	lsls	r2, r2, #2
    1e94:	58d3      	ldr	r3, [r2, r3]
    1e96:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    1e98:	697b      	ldr	r3, [r7, #20]
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1e9e:	230e      	movs	r3, #14
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	697a      	ldr	r2, [r7, #20]
    1ea4:	8a52      	ldrh	r2, [r2, #18]
    1ea6:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1ea8:	697b      	ldr	r3, [r7, #20]
    1eaa:	8a1b      	ldrh	r3, [r3, #16]
    1eac:	b29a      	uxth	r2, r3
    1eae:	230e      	movs	r3, #14
    1eb0:	18fb      	adds	r3, r7, r3
    1eb2:	210e      	movs	r1, #14
    1eb4:	1879      	adds	r1, r7, r1
    1eb6:	8809      	ldrh	r1, [r1, #0]
    1eb8:	400a      	ands	r2, r1
    1eba:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    1ebc:	693b      	ldr	r3, [r7, #16]
    1ebe:	7a1b      	ldrb	r3, [r3, #8]
    1ec0:	b2da      	uxtb	r2, r3
    1ec2:	230c      	movs	r3, #12
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1ec8:	693b      	ldr	r3, [r7, #16]
    1eca:	79db      	ldrb	r3, [r3, #7]
    1ecc:	b2db      	uxtb	r3, r3
    1ece:	b29a      	uxth	r2, r3
    1ed0:	230c      	movs	r3, #12
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	210c      	movs	r1, #12
    1ed6:	1879      	adds	r1, r7, r1
    1ed8:	8809      	ldrh	r1, [r1, #0]
    1eda:	400a      	ands	r2, r1
    1edc:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    1ede:	230c      	movs	r3, #12
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	881b      	ldrh	r3, [r3, #0]
    1ee4:	2280      	movs	r2, #128	; 0x80
    1ee6:	4013      	ands	r3, r2
    1ee8:	d00c      	beq.n	1f04 <_rtc_interrupt_handler+0x84>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    1eea:	230e      	movs	r3, #14
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	881b      	ldrh	r3, [r3, #0]
    1ef0:	2202      	movs	r2, #2
    1ef2:	4013      	ands	r3, r2
    1ef4:	d002      	beq.n	1efc <_rtc_interrupt_handler+0x7c>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1ef6:	697b      	ldr	r3, [r7, #20]
    1ef8:	68db      	ldr	r3, [r3, #12]
    1efa:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    1efc:	693b      	ldr	r3, [r7, #16]
    1efe:	2280      	movs	r2, #128	; 0x80
    1f00:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    1f02:	e011      	b.n	1f28 <_rtc_interrupt_handler+0xa8>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    1f04:	230c      	movs	r3, #12
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	881b      	ldrh	r3, [r3, #0]
    1f0a:	2201      	movs	r2, #1
    1f0c:	4013      	ands	r3, r2
    1f0e:	d00b      	beq.n	1f28 <_rtc_interrupt_handler+0xa8>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    1f10:	230e      	movs	r3, #14
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	881b      	ldrh	r3, [r3, #0]
    1f16:	2201      	movs	r2, #1
    1f18:	4013      	ands	r3, r2
    1f1a:	d002      	beq.n	1f22 <_rtc_interrupt_handler+0xa2>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    1f1c:	697b      	ldr	r3, [r7, #20]
    1f1e:	689b      	ldr	r3, [r3, #8]
    1f20:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    1f22:	693b      	ldr	r3, [r7, #16]
    1f24:	2201      	movs	r2, #1
    1f26:	721a      	strb	r2, [r3, #8]
}
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b006      	add	sp, #24
    1f2e:	bd80      	pop	{r7, pc}
    1f30:	0000ffd6 	.word	0x0000ffd6
    1f34:	00000018 	.word	0x00000018

00001f38 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    1f3c:	2000      	movs	r0, #0
    1f3e:	4b03      	ldr	r3, [pc, #12]	; (1f4c <RTC_Handler+0x14>)
    1f40:	447b      	add	r3, pc
    1f42:	4798      	blx	r3
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	bd80      	pop	{r7, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	ffffff3d 	.word	0xffffff3d

00001f50 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b082      	sub	sp, #8
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
	time->second = 0;
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	2200      	movs	r2, #0
    1f5c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	2200      	movs	r2, #0
    1f62:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	2200      	movs	r2, #0
    1f68:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	2200      	movs	r2, #0
    1f6e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	2201      	movs	r2, #1
    1f74:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	2201      	movs	r2, #1
    1f7a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	22fa      	movs	r2, #250	; 0xfa
    1f80:	00d2      	lsls	r2, r2, #3
    1f82:	80da      	strh	r2, [r3, #6]
}
    1f84:	46c0      	nop			; (mov r8, r8)
    1f86:	46bd      	mov	sp, r7
    1f88:	b002      	add	sp, #8
    1f8a:	bd80      	pop	{r7, pc}

00001f8c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    1f8c:	b590      	push	{r4, r7, lr}
    1f8e:	b087      	sub	sp, #28
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
    1f94:	4c26      	ldr	r4, [pc, #152]	; (2030 <STACK_SIZE+0x30>)
    1f96:	447c      	add	r4, pc
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    1f98:	230c      	movs	r3, #12
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b25      	ldr	r3, [pc, #148]	; (2034 <STACK_SIZE+0x34>)
    1fa0:	447b      	add	r3, pc
    1fa2:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	22a0      	movs	r2, #160	; 0xa0
    1fa8:	0112      	lsls	r2, r2, #4
    1faa:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	2200      	movs	r2, #0
    1fb0:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	2200      	movs	r2, #0
    1fb6:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2200      	movs	r2, #0
    1fbc:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	22fa      	movs	r2, #250	; 0xfa
    1fc2:	00d2      	lsls	r2, r2, #3
    1fc4:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1fc6:	2317      	movs	r3, #23
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	2200      	movs	r2, #0
    1fcc:	701a      	strb	r2, [r3, #0]
    1fce:	e026      	b.n	201e <STACK_SIZE+0x1e>
		config->alarm[i].time = time;
    1fd0:	2317      	movs	r3, #23
    1fd2:	18fb      	adds	r3, r7, r3
    1fd4:	781a      	ldrb	r2, [r3, #0]
    1fd6:	6879      	ldr	r1, [r7, #4]
    1fd8:	2008      	movs	r0, #8
    1fda:	0013      	movs	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	189b      	adds	r3, r3, r2
    1fe0:	005b      	lsls	r3, r3, #1
    1fe2:	18cb      	adds	r3, r1, r3
    1fe4:	181a      	adds	r2, r3, r0
    1fe6:	230c      	movs	r3, #12
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	0010      	movs	r0, r2
    1fec:	0019      	movs	r1, r3
    1fee:	2308      	movs	r3, #8
    1ff0:	001a      	movs	r2, r3
    1ff2:	4b11      	ldr	r3, [pc, #68]	; (2038 <STACK_SIZE+0x38>)
    1ff4:	58e3      	ldr	r3, [r4, r3]
    1ff6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1ff8:	2317      	movs	r3, #23
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	781a      	ldrb	r2, [r3, #0]
    1ffe:	6879      	ldr	r1, [r7, #4]
    2000:	0013      	movs	r3, r2
    2002:	009b      	lsls	r3, r3, #2
    2004:	189b      	adds	r3, r3, r2
    2006:	005b      	lsls	r3, r3, #1
    2008:	18cb      	adds	r3, r1, r3
    200a:	3310      	adds	r3, #16
    200c:	2206      	movs	r2, #6
    200e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2010:	2317      	movs	r3, #23
    2012:	18fb      	adds	r3, r7, r3
    2014:	781a      	ldrb	r2, [r3, #0]
    2016:	2317      	movs	r3, #23
    2018:	18fb      	adds	r3, r7, r3
    201a:	3201      	adds	r2, #1
    201c:	701a      	strb	r2, [r3, #0]
    201e:	2317      	movs	r3, #23
    2020:	18fb      	adds	r3, r7, r3
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d0d3      	beq.n	1fd0 <rtc_calendar_get_config_defaults+0x44>
	}
}
    2028:	46c0      	nop			; (mov r8, r8)
    202a:	46bd      	mov	sp, r7
    202c:	b007      	add	sp, #28
    202e:	bd90      	pop	{r4, r7, pc}
    2030:	0000feca 	.word	0x0000feca
    2034:	ffffffad 	.word	0xffffffad
    2038:	0000008c 	.word	0x0000008c

0000203c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    203c:	b590      	push	{r4, r7, lr}
    203e:	b089      	sub	sp, #36	; 0x24
    2040:	af00      	add	r7, sp, #0
    2042:	4c20      	ldr	r4, [pc, #128]	; (20c4 <configure_rtc_calendar+0x88>)
    2044:	447c      	add	r4, pc
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    2046:	230c      	movs	r3, #12
    2048:	18fb      	adds	r3, r7, r3
    204a:	0018      	movs	r0, r3
    204c:	4b1e      	ldr	r3, [pc, #120]	; (20c8 <configure_rtc_calendar+0x8c>)
    204e:	447b      	add	r3, pc
    2050:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    2052:	1d3b      	adds	r3, r7, #4
    2054:	0018      	movs	r0, r3
    2056:	4b1d      	ldr	r3, [pc, #116]	; (20cc <configure_rtc_calendar+0x90>)
    2058:	447b      	add	r3, pc
    205a:	4798      	blx	r3
	init_time.year   = 2014;
    205c:	1d3b      	adds	r3, r7, #4
    205e:	4a1c      	ldr	r2, [pc, #112]	; (20d0 <configure_rtc_calendar+0x94>)
    2060:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    2062:	1d3b      	adds	r3, r7, #4
    2064:	2201      	movs	r2, #1
    2066:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    2068:	1d3b      	adds	r3, r7, #4
    206a:	2201      	movs	r2, #1
    206c:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    206e:	1d3b      	adds	r3, r7, #4
    2070:	2200      	movs	r2, #0
    2072:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    2074:	1d3b      	adds	r3, r7, #4
    2076:	2200      	movs	r2, #0
    2078:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    207a:	1d3b      	adds	r3, r7, #4
    207c:	2204      	movs	r2, #4
    207e:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    2080:	230c      	movs	r3, #12
    2082:	18fb      	adds	r3, r7, r3
    2084:	2201      	movs	r2, #1
    2086:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    2088:	230c      	movs	r3, #12
    208a:	18fb      	adds	r3, r7, r3
    208c:	1d3a      	adds	r2, r7, #4
    208e:	3308      	adds	r3, #8
    2090:	ca03      	ldmia	r2!, {r0, r1}
    2092:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2094:	230c      	movs	r3, #12
    2096:	18fb      	adds	r3, r7, r3
    2098:	2206      	movs	r2, #6
    209a:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    209c:	230c      	movs	r3, #12
    209e:	18fa      	adds	r2, r7, r3
    20a0:	490c      	ldr	r1, [pc, #48]	; (20d4 <configure_rtc_calendar+0x98>)
    20a2:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <configure_rtc_calendar+0x9c>)
    20a4:	58e3      	ldr	r3, [r4, r3]
    20a6:	0018      	movs	r0, r3
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <configure_rtc_calendar+0xa0>)
    20aa:	58e3      	ldr	r3, [r4, r3]
    20ac:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    20ae:	4b0a      	ldr	r3, [pc, #40]	; (20d8 <configure_rtc_calendar+0x9c>)
    20b0:	58e3      	ldr	r3, [r4, r3]
    20b2:	0018      	movs	r0, r3
    20b4:	4b0a      	ldr	r3, [pc, #40]	; (20e0 <configure_rtc_calendar+0xa4>)
    20b6:	58e3      	ldr	r3, [r4, r3]
    20b8:	4798      	blx	r3
}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	46bd      	mov	sp, r7
    20be:	b009      	add	sp, #36	; 0x24
    20c0:	bd90      	pop	{r4, r7, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	0000fe1c 	.word	0x0000fe1c
    20c8:	ffffff3b 	.word	0xffffff3b
    20cc:	fffffef5 	.word	0xfffffef5
    20d0:	000007de 	.word	0x000007de
    20d4:	40001400 	.word	0x40001400
    20d8:	00000030 	.word	0x00000030
    20dc:	000000d0 	.word	0x000000d0
    20e0:	00000058 	.word	0x00000058

000020e4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    20e4:	b5b0      	push	{r4, r5, r7, lr}
    20e6:	b084      	sub	sp, #16
    20e8:	af00      	add	r7, sp, #0
    20ea:	0002      	movs	r2, r0
    20ec:	1dfb      	adds	r3, r7, #7
    20ee:	701a      	strb	r2, [r3, #0]
    20f0:	4c1d      	ldr	r4, [pc, #116]	; (2168 <disk_initialize+0x84>)
    20f2:	447c      	add	r4, pc
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    20f4:	4b1d      	ldr	r3, [pc, #116]	; (216c <disk_initialize+0x88>)
    20f6:	447b      	add	r3, pc
    20f8:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    20fa:	1dfb      	adds	r3, r7, #7
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	2b01      	cmp	r3, #1
    2100:	d901      	bls.n	2106 <disk_initialize+0x22>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    2102:	2301      	movs	r3, #1
    2104:	e02b      	b.n	215e <disk_initialize+0x7a>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    2106:	2300      	movs	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	e011      	b.n	2130 <disk_initialize+0x4c>
		mem_status = mem_test_unit_ready(drv);
    210c:	230b      	movs	r3, #11
    210e:	18fd      	adds	r5, r7, r3
    2110:	1dfb      	adds	r3, r7, #7
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	0018      	movs	r0, r3
    2116:	4b16      	ldr	r3, [pc, #88]	; (2170 <disk_initialize+0x8c>)
    2118:	58e3      	ldr	r3, [r4, r3]
    211a:	4798      	blx	r3
    211c:	0003      	movs	r3, r0
    211e:	702b      	strb	r3, [r5, #0]
		if (CTRL_BUSY != mem_status) {
    2120:	230b      	movs	r3, #11
    2122:	18fb      	adds	r3, r7, r3
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b03      	cmp	r3, #3
    2128:	d106      	bne.n	2138 <disk_initialize+0x54>
	for (i = 0; i < 2; i ++) {
    212a:	68fb      	ldr	r3, [r7, #12]
    212c:	3301      	adds	r3, #1
    212e:	60fb      	str	r3, [r7, #12]
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	2b01      	cmp	r3, #1
    2134:	ddea      	ble.n	210c <disk_initialize+0x28>
    2136:	e000      	b.n	213a <disk_initialize+0x56>
			break;
    2138:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    213a:	230b      	movs	r3, #11
    213c:	18fb      	adds	r3, r7, r3
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	2b00      	cmp	r3, #0
    2142:	d001      	beq.n	2148 <disk_initialize+0x64>
		return STA_NOINIT;
    2144:	2301      	movs	r3, #1
    2146:	e00a      	b.n	215e <disk_initialize+0x7a>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    2148:	1dfb      	adds	r3, r7, #7
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	0018      	movs	r0, r3
    214e:	4b09      	ldr	r3, [pc, #36]	; (2174 <disk_initialize+0x90>)
    2150:	58e3      	ldr	r3, [r4, r3]
    2152:	4798      	blx	r3
    2154:	1e03      	subs	r3, r0, #0
    2156:	d001      	beq.n	215c <disk_initialize+0x78>
		return STA_PROTECT;
    2158:	2304      	movs	r3, #4
    215a:	e000      	b.n	215e <disk_initialize+0x7a>
	}

	/* The memory should already be initialized */
	return 0;
    215c:	2300      	movs	r3, #0
}
    215e:	0018      	movs	r0, r3
    2160:	46bd      	mov	sp, r7
    2162:	b004      	add	sp, #16
    2164:	bdb0      	pop	{r4, r5, r7, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	0000fd6e 	.word	0x0000fd6e
    216c:	ffffff43 	.word	0xffffff43
    2170:	000000f8 	.word	0x000000f8
    2174:	00000084 	.word	0x00000084

00002178 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	0002      	movs	r2, r0
    2180:	1dfb      	adds	r3, r7, #7
    2182:	701a      	strb	r2, [r3, #0]
    2184:	4a0a      	ldr	r2, [pc, #40]	; (21b0 <disk_status+0x38>)
    2186:	447a      	add	r2, pc
	switch (mem_test_unit_ready(drv)) {
    2188:	1dfb      	adds	r3, r7, #7
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	0018      	movs	r0, r3
    218e:	4b09      	ldr	r3, [pc, #36]	; (21b4 <disk_status+0x3c>)
    2190:	58d3      	ldr	r3, [r2, r3]
    2192:	4798      	blx	r3
    2194:	1e03      	subs	r3, r0, #0
    2196:	d002      	beq.n	219e <disk_status+0x26>
    2198:	2b02      	cmp	r3, #2
    219a:	d002      	beq.n	21a2 <disk_status+0x2a>
    219c:	e003      	b.n	21a6 <disk_status+0x2e>
	case CTRL_GOOD:
		return 0;
    219e:	2300      	movs	r3, #0
    21a0:	e002      	b.n	21a8 <disk_status+0x30>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    21a2:	2303      	movs	r3, #3
    21a4:	e000      	b.n	21a8 <disk_status+0x30>
	default:
		return STA_NOINIT;
    21a6:	2301      	movs	r3, #1
	}
}
    21a8:	0018      	movs	r0, r3
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}
    21b0:	0000fcda 	.word	0x0000fcda
    21b4:	000000f8 	.word	0x000000f8

000021b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    21b8:	b5b0      	push	{r4, r5, r7, lr}
    21ba:	b088      	sub	sp, #32
    21bc:	af00      	add	r7, sp, #0
    21be:	60b9      	str	r1, [r7, #8]
    21c0:	607a      	str	r2, [r7, #4]
    21c2:	0019      	movs	r1, r3
    21c4:	230f      	movs	r3, #15
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	1c02      	adds	r2, r0, #0
    21ca:	701a      	strb	r2, [r3, #0]
    21cc:	230e      	movs	r3, #14
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	1c0a      	adds	r2, r1, #0
    21d2:	701a      	strb	r2, [r3, #0]
    21d4:	4c2e      	ldr	r4, [pc, #184]	; (2290 <disk_read+0xd8>)
    21d6:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    21d8:	231b      	movs	r3, #27
    21da:	18fd      	adds	r5, r7, r3
    21dc:	230f      	movs	r3, #15
    21de:	18fb      	adds	r3, r7, r3
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	0018      	movs	r0, r3
    21e4:	4b2b      	ldr	r3, [pc, #172]	; (2294 <disk_read+0xdc>)
    21e6:	58e3      	ldr	r3, [r4, r3]
    21e8:	4798      	blx	r3
    21ea:	0003      	movs	r3, r0
    21ec:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    21ee:	231b      	movs	r3, #27
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d101      	bne.n	21fc <disk_read+0x44>
		return RES_ERROR;
    21f8:	2301      	movs	r3, #1
    21fa:	e044      	b.n	2286 <disk_read+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    21fc:	2314      	movs	r3, #20
    21fe:	18fa      	adds	r2, r7, r3
    2200:	230f      	movs	r3, #15
    2202:	18fb      	adds	r3, r7, r3
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	0011      	movs	r1, r2
    2208:	0018      	movs	r0, r3
    220a:	4b23      	ldr	r3, [pc, #140]	; (2298 <disk_read+0xe0>)
    220c:	58e3      	ldr	r3, [r4, r3]
    220e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    2210:	230e      	movs	r3, #14
    2212:	18fb      	adds	r3, r7, r3
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	221b      	movs	r2, #27
    2218:	18ba      	adds	r2, r7, r2
    221a:	7812      	ldrb	r2, [r2, #0]
    221c:	4353      	muls	r3, r2
    221e:	001a      	movs	r2, r3
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    2224:	697b      	ldr	r3, [r7, #20]
    2226:	3301      	adds	r3, #1
    2228:	211b      	movs	r1, #27
    222a:	1879      	adds	r1, r7, r1
    222c:	7809      	ldrb	r1, [r1, #0]
    222e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    2230:	429a      	cmp	r2, r3
    2232:	d901      	bls.n	2238 <disk_read+0x80>
		return RES_PARERR;
    2234:	2304      	movs	r3, #4
    2236:	e026      	b.n	2286 <disk_read+0xce>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    2238:	2300      	movs	r3, #0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	e01c      	b.n	2278 <disk_read+0xc0>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    223e:	231b      	movs	r3, #27
    2240:	18fb      	adds	r3, r7, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	69fa      	ldr	r2, [r7, #28]
    2246:	435a      	muls	r2, r3
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    224c:	231b      	movs	r3, #27
    224e:	18fb      	adds	r3, r7, r3
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	69fa      	ldr	r2, [r7, #28]
    2254:	4353      	muls	r3, r2
    2256:	025b      	lsls	r3, r3, #9
    2258:	68ba      	ldr	r2, [r7, #8]
    225a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    225c:	230f      	movs	r3, #15
    225e:	18fb      	adds	r3, r7, r3
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	0018      	movs	r0, r3
    2264:	4b0d      	ldr	r3, [pc, #52]	; (229c <disk_read+0xe4>)
    2266:	58e3      	ldr	r3, [r4, r3]
    2268:	4798      	blx	r3
    226a:	1e03      	subs	r3, r0, #0
    226c:	d001      	beq.n	2272 <disk_read+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    226e:	2301      	movs	r3, #1
    2270:	e009      	b.n	2286 <disk_read+0xce>
	for (i = 0; i < count; i++) {
    2272:	69fb      	ldr	r3, [r7, #28]
    2274:	3301      	adds	r3, #1
    2276:	61fb      	str	r3, [r7, #28]
    2278:	230e      	movs	r3, #14
    227a:	18fb      	adds	r3, r7, r3
    227c:	781a      	ldrb	r2, [r3, #0]
    227e:	69fb      	ldr	r3, [r7, #28]
    2280:	429a      	cmp	r2, r3
    2282:	d8dc      	bhi.n	223e <disk_read+0x86>
		}
	}

	return RES_OK;
    2284:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    2286:	0018      	movs	r0, r3
    2288:	46bd      	mov	sp, r7
    228a:	b008      	add	sp, #32
    228c:	bdb0      	pop	{r4, r5, r7, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	0000fc8a 	.word	0x0000fc8a
    2294:	000002f8 	.word	0x000002f8
    2298:	00000088 	.word	0x00000088
    229c:	0000007c 	.word	0x0000007c

000022a0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    22a0:	b5b0      	push	{r4, r5, r7, lr}
    22a2:	b088      	sub	sp, #32
    22a4:	af00      	add	r7, sp, #0
    22a6:	60b9      	str	r1, [r7, #8]
    22a8:	607a      	str	r2, [r7, #4]
    22aa:	0019      	movs	r1, r3
    22ac:	230f      	movs	r3, #15
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	1c02      	adds	r2, r0, #0
    22b2:	701a      	strb	r2, [r3, #0]
    22b4:	230e      	movs	r3, #14
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	1c0a      	adds	r2, r1, #0
    22ba:	701a      	strb	r2, [r3, #0]
    22bc:	4c2e      	ldr	r4, [pc, #184]	; (2378 <disk_write+0xd8>)
    22be:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    22c0:	231b      	movs	r3, #27
    22c2:	18fd      	adds	r5, r7, r3
    22c4:	230f      	movs	r3, #15
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	0018      	movs	r0, r3
    22cc:	4b2b      	ldr	r3, [pc, #172]	; (237c <disk_write+0xdc>)
    22ce:	58e3      	ldr	r3, [r4, r3]
    22d0:	4798      	blx	r3
    22d2:	0003      	movs	r3, r0
    22d4:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    22d6:	231b      	movs	r3, #27
    22d8:	18fb      	adds	r3, r7, r3
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	2b00      	cmp	r3, #0
    22de:	d101      	bne.n	22e4 <disk_write+0x44>
		return RES_ERROR;
    22e0:	2301      	movs	r3, #1
    22e2:	e044      	b.n	236e <disk_write+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    22e4:	2314      	movs	r3, #20
    22e6:	18fa      	adds	r2, r7, r3
    22e8:	230f      	movs	r3, #15
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	0011      	movs	r1, r2
    22f0:	0018      	movs	r0, r3
    22f2:	4b23      	ldr	r3, [pc, #140]	; (2380 <disk_write+0xe0>)
    22f4:	58e3      	ldr	r3, [r4, r3]
    22f6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    22f8:	230e      	movs	r3, #14
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	781b      	ldrb	r3, [r3, #0]
    22fe:	221b      	movs	r2, #27
    2300:	18ba      	adds	r2, r7, r2
    2302:	7812      	ldrb	r2, [r2, #0]
    2304:	4353      	muls	r3, r2
    2306:	001a      	movs	r2, r3
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    230c:	697b      	ldr	r3, [r7, #20]
    230e:	3301      	adds	r3, #1
    2310:	211b      	movs	r1, #27
    2312:	1879      	adds	r1, r7, r1
    2314:	7809      	ldrb	r1, [r1, #0]
    2316:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    2318:	429a      	cmp	r2, r3
    231a:	d901      	bls.n	2320 <disk_write+0x80>
		return RES_PARERR;
    231c:	2304      	movs	r3, #4
    231e:	e026      	b.n	236e <disk_write+0xce>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    2320:	2300      	movs	r3, #0
    2322:	61fb      	str	r3, [r7, #28]
    2324:	e01c      	b.n	2360 <disk_write+0xc0>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    2326:	231b      	movs	r3, #27
    2328:	18fb      	adds	r3, r7, r3
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	69fa      	ldr	r2, [r7, #28]
    232e:	435a      	muls	r2, r3
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    2334:	231b      	movs	r3, #27
    2336:	18fb      	adds	r3, r7, r3
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	69fa      	ldr	r2, [r7, #28]
    233c:	4353      	muls	r3, r2
    233e:	025b      	lsls	r3, r3, #9
    2340:	68ba      	ldr	r2, [r7, #8]
    2342:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    2344:	230f      	movs	r3, #15
    2346:	18fb      	adds	r3, r7, r3
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	0018      	movs	r0, r3
    234c:	4b0d      	ldr	r3, [pc, #52]	; (2384 <disk_write+0xe4>)
    234e:	58e3      	ldr	r3, [r4, r3]
    2350:	4798      	blx	r3
    2352:	1e03      	subs	r3, r0, #0
    2354:	d001      	beq.n	235a <disk_write+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    2356:	2301      	movs	r3, #1
    2358:	e009      	b.n	236e <disk_write+0xce>
	for (i = 0; i < count; i++) {
    235a:	69fb      	ldr	r3, [r7, #28]
    235c:	3301      	adds	r3, #1
    235e:	61fb      	str	r3, [r7, #28]
    2360:	230e      	movs	r3, #14
    2362:	18fb      	adds	r3, r7, r3
    2364:	781a      	ldrb	r2, [r3, #0]
    2366:	69fb      	ldr	r3, [r7, #28]
    2368:	429a      	cmp	r2, r3
    236a:	d8dc      	bhi.n	2326 <disk_write+0x86>
		}
	}

	return RES_OK;
    236c:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    236e:	0018      	movs	r0, r3
    2370:	46bd      	mov	sp, r7
    2372:	b008      	add	sp, #32
    2374:	bdb0      	pop	{r4, r5, r7, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	0000fba2 	.word	0x0000fba2
    237c:	000002f8 	.word	0x000002f8
    2380:	00000088 	.word	0x00000088
    2384:	0000000c 	.word	0x0000000c

00002388 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    2388:	b590      	push	{r4, r7, lr}
    238a:	b085      	sub	sp, #20
    238c:	af00      	add	r7, sp, #0
    238e:	603a      	str	r2, [r7, #0]
    2390:	1dfb      	adds	r3, r7, #7
    2392:	1c02      	adds	r2, r0, #0
    2394:	701a      	strb	r2, [r3, #0]
    2396:	1dbb      	adds	r3, r7, #6
    2398:	1c0a      	adds	r2, r1, #0
    239a:	701a      	strb	r2, [r3, #0]
    239c:	4b39      	ldr	r3, [pc, #228]	; (2484 <disk_ioctl+0xfc>)
    239e:	447b      	add	r3, pc
	DRESULT res = RES_PARERR;
    23a0:	220f      	movs	r2, #15
    23a2:	18ba      	adds	r2, r7, r2
    23a4:	2104      	movs	r1, #4
    23a6:	7011      	strb	r1, [r2, #0]

	switch (ctrl) {
    23a8:	1dba      	adds	r2, r7, #6
    23aa:	7812      	ldrb	r2, [r2, #0]
    23ac:	2a03      	cmp	r2, #3
    23ae:	d85e      	bhi.n	246e <disk_ioctl+0xe6>
    23b0:	0010      	movs	r0, r2
    23b2:	f00e f9a3 	bl	106fc <__gnu_thumb1_case_si>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	00000092 	.word	0x00000092
    23bc:	00000020 	.word	0x00000020
    23c0:	00000042 	.word	0x00000042
    23c4:	00000010 	.word	0x00000010
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	2201      	movs	r2, #1
    23cc:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    23ce:	230f      	movs	r3, #15
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	2200      	movs	r2, #0
    23d4:	701a      	strb	r2, [r3, #0]
		break;
    23d6:	e04e      	b.n	2476 <disk_ioctl+0xee>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    23d8:	2208      	movs	r2, #8
    23da:	18b9      	adds	r1, r7, r2
    23dc:	1dfa      	adds	r2, r7, #7
    23de:	7812      	ldrb	r2, [r2, #0]
    23e0:	0010      	movs	r0, r2
    23e2:	4a29      	ldr	r2, [pc, #164]	; (2488 <disk_ioctl+0x100>)
    23e4:	589b      	ldr	r3, [r3, r2]
    23e6:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    23e8:	68bb      	ldr	r3, [r7, #8]
    23ea:	1c5a      	adds	r2, r3, #1
    23ec:	683b      	ldr	r3, [r7, #0]
    23ee:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    23f0:	230f      	movs	r3, #15
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	2200      	movs	r2, #0
    23f6:	701a      	strb	r2, [r3, #0]
	}
	break;
    23f8:	e03d      	b.n	2476 <disk_ioctl+0xee>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    23fa:	220e      	movs	r2, #14
    23fc:	18bc      	adds	r4, r7, r2
    23fe:	1dfa      	adds	r2, r7, #7
    2400:	7812      	ldrb	r2, [r2, #0]
    2402:	0010      	movs	r0, r2
    2404:	4a21      	ldr	r2, [pc, #132]	; (248c <disk_ioctl+0x104>)
    2406:	589b      	ldr	r3, [r3, r2]
    2408:	4798      	blx	r3
    240a:	0003      	movs	r3, r0
    240c:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    240e:	230e      	movs	r3, #14
    2410:	18fb      	adds	r3, r7, r3
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b01      	cmp	r3, #1
    2416:	d010      	beq.n	243a <disk_ioctl+0xb2>
    2418:	230e      	movs	r3, #14
    241a:	18fb      	adds	r3, r7, r3
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	2b02      	cmp	r3, #2
    2420:	d00b      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    2422:	230e      	movs	r3, #14
    2424:	18fb      	adds	r3, r7, r3
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	2b04      	cmp	r3, #4
    242a:	d006      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    242c:	230e      	movs	r3, #14
    242e:	18fb      	adds	r3, r7, r3
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	2b08      	cmp	r3, #8
    2434:	d001      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    2436:	2301      	movs	r3, #1
    2438:	e020      	b.n	247c <disk_ioctl+0xf4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    2440:	230f      	movs	r3, #15
    2442:	18fb      	adds	r3, r7, r3
    2444:	2200      	movs	r2, #0
    2446:	701a      	strb	r2, [r3, #0]
	}
	break;
    2448:	e015      	b.n	2476 <disk_ioctl+0xee>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    244a:	1dfa      	adds	r2, r7, #7
    244c:	7812      	ldrb	r2, [r2, #0]
    244e:	0010      	movs	r0, r2
    2450:	4a0f      	ldr	r2, [pc, #60]	; (2490 <disk_ioctl+0x108>)
    2452:	589b      	ldr	r3, [r3, r2]
    2454:	4798      	blx	r3
    2456:	1e03      	subs	r3, r0, #0
    2458:	d104      	bne.n	2464 <disk_ioctl+0xdc>
			res = RES_OK;
    245a:	230f      	movs	r3, #15
    245c:	18fb      	adds	r3, r7, r3
    245e:	2200      	movs	r2, #0
    2460:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    2462:	e008      	b.n	2476 <disk_ioctl+0xee>
			res = RES_NOTRDY;
    2464:	230f      	movs	r3, #15
    2466:	18fb      	adds	r3, r7, r3
    2468:	2203      	movs	r2, #3
    246a:	701a      	strb	r2, [r3, #0]
		break;
    246c:	e003      	b.n	2476 <disk_ioctl+0xee>

	default:
		res = RES_PARERR;
    246e:	230f      	movs	r3, #15
    2470:	18fb      	adds	r3, r7, r3
    2472:	2204      	movs	r2, #4
    2474:	701a      	strb	r2, [r3, #0]
	}

	return res;
    2476:	230f      	movs	r3, #15
    2478:	18fb      	adds	r3, r7, r3
    247a:	781b      	ldrb	r3, [r3, #0]
}
    247c:	0018      	movs	r0, r3
    247e:	46bd      	mov	sp, r7
    2480:	b005      	add	sp, #20
    2482:	bd90      	pop	{r4, r7, pc}
    2484:	0000fac2 	.word	0x0000fac2
    2488:	00000088 	.word	0x00000088
    248c:	000002f8 	.word	0x000002f8
    2490:	000000f8 	.word	0x000000f8

00002494 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	4b15      	ldr	r3, [pc, #84]	; (24f0 <get_fattime+0x5c>)
    249c:	447b      	add	r3, pc
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    249e:	1d39      	adds	r1, r7, #4
    24a0:	4a14      	ldr	r2, [pc, #80]	; (24f4 <get_fattime+0x60>)
    24a2:	589a      	ldr	r2, [r3, r2]
    24a4:	0010      	movs	r0, r2
    24a6:	4a14      	ldr	r2, [pc, #80]	; (24f8 <get_fattime+0x64>)
    24a8:	589b      	ldr	r3, [r3, r2]
    24aa:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    24ac:	1d3b      	adds	r3, r7, #4
    24ae:	88db      	ldrh	r3, [r3, #6]
    24b0:	4a12      	ldr	r2, [pc, #72]	; (24fc <get_fattime+0x68>)
    24b2:	4694      	mov	ip, r2
    24b4:	4463      	add	r3, ip
    24b6:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    24b8:	1d3b      	adds	r3, r7, #4
    24ba:	795b      	ldrb	r3, [r3, #5]
    24bc:	055b      	lsls	r3, r3, #21
    24be:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    24c0:	1d3b      	adds	r3, r7, #4
    24c2:	791b      	ldrb	r3, [r3, #4]
    24c4:	041b      	lsls	r3, r3, #16
    24c6:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    24c8:	1d3b      	adds	r3, r7, #4
    24ca:	789b      	ldrb	r3, [r3, #2]
    24cc:	02db      	lsls	r3, r3, #11
    24ce:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    24d0:	1d3b      	adds	r3, r7, #4
    24d2:	785b      	ldrb	r3, [r3, #1]
    24d4:	015b      	lsls	r3, r3, #5
    24d6:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    24d8:	1d3a      	adds	r2, r7, #4
    24da:	7812      	ldrb	r2, [r2, #0]
    24dc:	0852      	lsrs	r2, r2, #1
    24de:	b2d2      	uxtb	r2, r2
    24e0:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    24e2:	60fb      	str	r3, [r7, #12]

	return ul_time;
    24e4:	68fb      	ldr	r3, [r7, #12]
}
    24e6:	0018      	movs	r0, r3
    24e8:	46bd      	mov	sp, r7
    24ea:	b004      	add	sp, #16
    24ec:	bd80      	pop	{r7, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	0000f9c4 	.word	0x0000f9c4
    24f4:	00000030 	.word	0x00000030
    24f8:	00000134 	.word	0x00000134
    24fc:	fffff844 	.word	0xfffff844

00002500 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2500:	b580      	push	{r7, lr}
    2502:	b086      	sub	sp, #24
    2504:	af00      	add	r7, sp, #0
    2506:	60f8      	str	r0, [r7, #12]
    2508:	60b9      	str	r1, [r7, #8]
    250a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    250c:	68fb      	ldr	r3, [r7, #12]
    250e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    2510:	68bb      	ldr	r3, [r7, #8]
    2512:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2514:	e007      	b.n	2526 <mem_cpy+0x26>
		*d++ = *s++;
    2516:	697b      	ldr	r3, [r7, #20]
    2518:	1c5a      	adds	r2, r3, #1
    251a:	617a      	str	r2, [r7, #20]
    251c:	693a      	ldr	r2, [r7, #16]
    251e:	1c51      	adds	r1, r2, #1
    2520:	6139      	str	r1, [r7, #16]
    2522:	7812      	ldrb	r2, [r2, #0]
    2524:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	1e5a      	subs	r2, r3, #1
    252a:	607a      	str	r2, [r7, #4]
    252c:	2b00      	cmp	r3, #0
    252e:	d1f2      	bne.n	2516 <mem_cpy+0x16>
}
    2530:	46c0      	nop			; (mov r8, r8)
    2532:	46bd      	mov	sp, r7
    2534:	b006      	add	sp, #24
    2536:	bd80      	pop	{r7, pc}

00002538 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    2538:	b580      	push	{r7, lr}
    253a:	b086      	sub	sp, #24
    253c:	af00      	add	r7, sp, #0
    253e:	60f8      	str	r0, [r7, #12]
    2540:	60b9      	str	r1, [r7, #8]
    2542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	617b      	str	r3, [r7, #20]

	while (cnt--)
    2548:	e005      	b.n	2556 <mem_set+0x1e>
		*d++ = (BYTE)val;
    254a:	697b      	ldr	r3, [r7, #20]
    254c:	1c5a      	adds	r2, r3, #1
    254e:	617a      	str	r2, [r7, #20]
    2550:	68ba      	ldr	r2, [r7, #8]
    2552:	b2d2      	uxtb	r2, r2
    2554:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	1e5a      	subs	r2, r3, #1
    255a:	607a      	str	r2, [r7, #4]
    255c:	2b00      	cmp	r3, #0
    255e:	d1f4      	bne.n	254a <mem_set+0x12>
}
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46bd      	mov	sp, r7
    2564:	b006      	add	sp, #24
    2566:	bd80      	pop	{r7, pc}

00002568 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    2568:	b580      	push	{r7, lr}
    256a:	b088      	sub	sp, #32
    256c:	af00      	add	r7, sp, #0
    256e:	60f8      	str	r0, [r7, #12]
    2570:	60b9      	str	r1, [r7, #8]
    2572:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	61fb      	str	r3, [r7, #28]
    2578:	68bb      	ldr	r3, [r7, #8]
    257a:	61bb      	str	r3, [r7, #24]
	int r = 0;
    257c:	2300      	movs	r3, #0
    257e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2580:	46c0      	nop			; (mov r8, r8)
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	1e5a      	subs	r2, r3, #1
    2586:	607a      	str	r2, [r7, #4]
    2588:	2b00      	cmp	r3, #0
    258a:	d00d      	beq.n	25a8 <mem_cmp+0x40>
    258c:	69fb      	ldr	r3, [r7, #28]
    258e:	1c5a      	adds	r2, r3, #1
    2590:	61fa      	str	r2, [r7, #28]
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	0019      	movs	r1, r3
    2596:	69bb      	ldr	r3, [r7, #24]
    2598:	1c5a      	adds	r2, r3, #1
    259a:	61ba      	str	r2, [r7, #24]
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	1acb      	subs	r3, r1, r3
    25a0:	617b      	str	r3, [r7, #20]
    25a2:	697b      	ldr	r3, [r7, #20]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d0ec      	beq.n	2582 <mem_cmp+0x1a>
	return r;
    25a8:	697b      	ldr	r3, [r7, #20]
}
    25aa:	0018      	movs	r0, r3
    25ac:	46bd      	mov	sp, r7
    25ae:	b008      	add	sp, #32
    25b0:	bd80      	pop	{r7, pc}

000025b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    25b2:	b580      	push	{r7, lr}
    25b4:	b082      	sub	sp, #8
    25b6:	af00      	add	r7, sp, #0
    25b8:	6078      	str	r0, [r7, #4]
    25ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    25bc:	e002      	b.n	25c4 <chk_chr+0x12>
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	3301      	adds	r3, #1
    25c2:	607b      	str	r3, [r7, #4]
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d005      	beq.n	25d8 <chk_chr+0x26>
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	001a      	movs	r2, r3
    25d2:	683b      	ldr	r3, [r7, #0]
    25d4:	429a      	cmp	r2, r3
    25d6:	d1f2      	bne.n	25be <chk_chr+0xc>
	return *str;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	781b      	ldrb	r3, [r3, #0]
}
    25dc:	0018      	movs	r0, r3
    25de:	46bd      	mov	sp, r7
    25e0:	b002      	add	sp, #8
    25e2:	bd80      	pop	{r7, pc}

000025e4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    25e4:	b5b0      	push	{r4, r5, r7, lr}
    25e6:	b084      	sub	sp, #16
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
    25ec:	6039      	str	r1, [r7, #0]
    25ee:	4c30      	ldr	r4, [pc, #192]	; (26b0 <move_window+0xcc>)
    25f0:	447c      	add	r4, pc
	DWORD wsect;


	wsect = fs->winsect;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25f6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    25f8:	68fa      	ldr	r2, [r7, #12]
    25fa:	683b      	ldr	r3, [r7, #0]
    25fc:	429a      	cmp	r2, r3
    25fe:	d051      	beq.n	26a4 <move_window+0xc0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	791b      	ldrb	r3, [r3, #4]
    2604:	2b00      	cmp	r3, #0
    2606:	d039      	beq.n	267c <move_window+0x98>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	7858      	ldrb	r0, [r3, #1]
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	3330      	adds	r3, #48	; 0x30
    2610:	0019      	movs	r1, r3
    2612:	68fa      	ldr	r2, [r7, #12]
    2614:	2301      	movs	r3, #1
    2616:	4d27      	ldr	r5, [pc, #156]	; (26b4 <move_window+0xd0>)
    2618:	5965      	ldr	r5, [r4, r5]
    261a:	47a8      	blx	r5
    261c:	1e03      	subs	r3, r0, #0
    261e:	d001      	beq.n	2624 <move_window+0x40>
				return FR_DISK_ERR;
    2620:	2301      	movs	r3, #1
    2622:	e040      	b.n	26a6 <move_window+0xc2>
			fs->wflag = 0;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2200      	movs	r2, #0
    2628:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	6a1a      	ldr	r2, [r3, #32]
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	69db      	ldr	r3, [r3, #28]
    2632:	18d2      	adds	r2, r2, r3
    2634:	68fb      	ldr	r3, [r7, #12]
    2636:	429a      	cmp	r2, r3
    2638:	d920      	bls.n	267c <move_window+0x98>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    263a:	230b      	movs	r3, #11
    263c:	18fb      	adds	r3, r7, r3
    263e:	687a      	ldr	r2, [r7, #4]
    2640:	78d2      	ldrb	r2, [r2, #3]
    2642:	701a      	strb	r2, [r3, #0]
    2644:	e015      	b.n	2672 <move_window+0x8e>
					wsect += fs->fsize;
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	69db      	ldr	r3, [r3, #28]
    264a:	68fa      	ldr	r2, [r7, #12]
    264c:	18d3      	adds	r3, r2, r3
    264e:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	7858      	ldrb	r0, [r3, #1]
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	3330      	adds	r3, #48	; 0x30
    2658:	0019      	movs	r1, r3
    265a:	68fa      	ldr	r2, [r7, #12]
    265c:	2301      	movs	r3, #1
    265e:	4d15      	ldr	r5, [pc, #84]	; (26b4 <move_window+0xd0>)
    2660:	5965      	ldr	r5, [r4, r5]
    2662:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2664:	230b      	movs	r3, #11
    2666:	18fb      	adds	r3, r7, r3
    2668:	781a      	ldrb	r2, [r3, #0]
    266a:	230b      	movs	r3, #11
    266c:	18fb      	adds	r3, r7, r3
    266e:	3a01      	subs	r2, #1
    2670:	701a      	strb	r2, [r3, #0]
    2672:	230b      	movs	r3, #11
    2674:	18fb      	adds	r3, r7, r3
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b01      	cmp	r3, #1
    267a:	d8e4      	bhi.n	2646 <move_window+0x62>
				}
			}
		}
#endif
		if (sector) {
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	2b00      	cmp	r3, #0
    2680:	d010      	beq.n	26a4 <move_window+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	7858      	ldrb	r0, [r3, #1]
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	3330      	adds	r3, #48	; 0x30
    268a:	0019      	movs	r1, r3
    268c:	683a      	ldr	r2, [r7, #0]
    268e:	2301      	movs	r3, #1
    2690:	4d09      	ldr	r5, [pc, #36]	; (26b8 <move_window+0xd4>)
    2692:	5964      	ldr	r4, [r4, r5]
    2694:	47a0      	blx	r4
    2696:	1e03      	subs	r3, r0, #0
    2698:	d001      	beq.n	269e <move_window+0xba>
				return FR_DISK_ERR;
    269a:	2301      	movs	r3, #1
    269c:	e003      	b.n	26a6 <move_window+0xc2>
			fs->winsect = sector;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	683a      	ldr	r2, [r7, #0]
    26a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    26a4:	2300      	movs	r3, #0
}
    26a6:	0018      	movs	r0, r3
    26a8:	46bd      	mov	sp, r7
    26aa:	b004      	add	sp, #16
    26ac:	bdb0      	pop	{r4, r5, r7, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	0000f870 	.word	0x0000f870
    26b4:	000002a0 	.word	0x000002a0
    26b8:	000002c0 	.word	0x000002c0

000026bc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    26bc:	b5b0      	push	{r4, r5, r7, lr}
    26be:	b084      	sub	sp, #16
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	4c58      	ldr	r4, [pc, #352]	; (2828 <sync+0x16c>)
    26c6:	447c      	add	r4, pc
	FRESULT res;


	res = move_window(fs, 0);
    26c8:	230f      	movs	r3, #15
    26ca:	18fd      	adds	r5, r7, r3
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2100      	movs	r1, #0
    26d0:	0018      	movs	r0, r3
    26d2:	4b56      	ldr	r3, [pc, #344]	; (282c <sync+0x170>)
    26d4:	447b      	add	r3, pc
    26d6:	4798      	blx	r3
    26d8:	0003      	movs	r3, r0
    26da:	702b      	strb	r3, [r5, #0]
	if (res == FR_OK) {
    26dc:	230f      	movs	r3, #15
    26de:	18fb      	adds	r3, r7, r3
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d000      	beq.n	26e8 <sync+0x2c>
    26e6:	e097      	b.n	2818 <sync+0x15c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	2b03      	cmp	r3, #3
    26ee:	d000      	beq.n	26f2 <sync+0x36>
    26f0:	e084      	b.n	27fc <sync+0x140>
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	795b      	ldrb	r3, [r3, #5]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d100      	bne.n	26fc <sync+0x40>
    26fa:	e07f      	b.n	27fc <sync+0x140>
			fs->winsect = 0;
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	2200      	movs	r2, #0
    2700:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	3330      	adds	r3, #48	; 0x30
    2706:	0018      	movs	r0, r3
    2708:	2380      	movs	r3, #128	; 0x80
    270a:	009b      	lsls	r3, r3, #2
    270c:	001a      	movs	r2, r3
    270e:	2100      	movs	r1, #0
    2710:	4b47      	ldr	r3, [pc, #284]	; (2830 <sync+0x174>)
    2712:	447b      	add	r3, pc
    2714:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	4a46      	ldr	r2, [pc, #280]	; (2834 <sync+0x178>)
    271a:	2155      	movs	r1, #85	; 0x55
    271c:	5499      	strb	r1, [r3, r2]
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	4a45      	ldr	r2, [pc, #276]	; (2838 <sync+0x17c>)
    2722:	21aa      	movs	r1, #170	; 0xaa
    2724:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2230      	movs	r2, #48	; 0x30
    272a:	2152      	movs	r1, #82	; 0x52
    272c:	5499      	strb	r1, [r3, r2]
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	2231      	movs	r2, #49	; 0x31
    2732:	2152      	movs	r1, #82	; 0x52
    2734:	5499      	strb	r1, [r3, r2]
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2232      	movs	r2, #50	; 0x32
    273a:	2161      	movs	r1, #97	; 0x61
    273c:	5499      	strb	r1, [r3, r2]
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	2233      	movs	r2, #51	; 0x33
    2742:	2141      	movs	r1, #65	; 0x41
    2744:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2746:	687a      	ldr	r2, [r7, #4]
    2748:	2385      	movs	r3, #133	; 0x85
    274a:	009b      	lsls	r3, r3, #2
    274c:	2172      	movs	r1, #114	; 0x72
    274e:	54d1      	strb	r1, [r2, r3]
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	4a3a      	ldr	r2, [pc, #232]	; (283c <sync+0x180>)
    2754:	2172      	movs	r1, #114	; 0x72
    2756:	5499      	strb	r1, [r3, r2]
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	4a39      	ldr	r2, [pc, #228]	; (2840 <sync+0x184>)
    275c:	2141      	movs	r1, #65	; 0x41
    275e:	5499      	strb	r1, [r3, r2]
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	4a38      	ldr	r2, [pc, #224]	; (2844 <sync+0x188>)
    2764:	2161      	movs	r1, #97	; 0x61
    2766:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	691b      	ldr	r3, [r3, #16]
    276c:	b2d9      	uxtb	r1, r3
    276e:	687a      	ldr	r2, [r7, #4]
    2770:	2386      	movs	r3, #134	; 0x86
    2772:	009b      	lsls	r3, r3, #2
    2774:	54d1      	strb	r1, [r2, r3]
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	691b      	ldr	r3, [r3, #16]
    277a:	b29b      	uxth	r3, r3
    277c:	0a1b      	lsrs	r3, r3, #8
    277e:	b29b      	uxth	r3, r3
    2780:	b2d9      	uxtb	r1, r3
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	4a30      	ldr	r2, [pc, #192]	; (2848 <sync+0x18c>)
    2786:	5499      	strb	r1, [r3, r2]
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	691b      	ldr	r3, [r3, #16]
    278c:	0c1b      	lsrs	r3, r3, #16
    278e:	b2d9      	uxtb	r1, r3
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	4a2e      	ldr	r2, [pc, #184]	; (284c <sync+0x190>)
    2794:	5499      	strb	r1, [r3, r2]
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	691b      	ldr	r3, [r3, #16]
    279a:	0e1b      	lsrs	r3, r3, #24
    279c:	b2d9      	uxtb	r1, r3
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	4a2b      	ldr	r2, [pc, #172]	; (2850 <sync+0x194>)
    27a2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	68db      	ldr	r3, [r3, #12]
    27a8:	b2d9      	uxtb	r1, r3
    27aa:	687a      	ldr	r2, [r7, #4]
    27ac:	2387      	movs	r3, #135	; 0x87
    27ae:	009b      	lsls	r3, r3, #2
    27b0:	54d1      	strb	r1, [r2, r3]
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	68db      	ldr	r3, [r3, #12]
    27b6:	b29b      	uxth	r3, r3
    27b8:	0a1b      	lsrs	r3, r3, #8
    27ba:	b29b      	uxth	r3, r3
    27bc:	b2d9      	uxtb	r1, r3
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	4a24      	ldr	r2, [pc, #144]	; (2854 <sync+0x198>)
    27c2:	5499      	strb	r1, [r3, r2]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	68db      	ldr	r3, [r3, #12]
    27c8:	0c1b      	lsrs	r3, r3, #16
    27ca:	b2d9      	uxtb	r1, r3
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	4a22      	ldr	r2, [pc, #136]	; (2858 <sync+0x19c>)
    27d0:	5499      	strb	r1, [r3, r2]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	68db      	ldr	r3, [r3, #12]
    27d6:	0e1b      	lsrs	r3, r3, #24
    27d8:	b2d9      	uxtb	r1, r3
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	4a1f      	ldr	r2, [pc, #124]	; (285c <sync+0x1a0>)
    27de:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	7858      	ldrb	r0, [r3, #1]
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	3330      	adds	r3, #48	; 0x30
    27e8:	0019      	movs	r1, r3
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	695a      	ldr	r2, [r3, #20]
    27ee:	2301      	movs	r3, #1
    27f0:	4d1b      	ldr	r5, [pc, #108]	; (2860 <sync+0x1a4>)
    27f2:	5965      	ldr	r5, [r4, r5]
    27f4:	47a8      	blx	r5
			fs->fsi_flag = 0;
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	2200      	movs	r2, #0
    27fa:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	785b      	ldrb	r3, [r3, #1]
    2800:	2200      	movs	r2, #0
    2802:	2100      	movs	r1, #0
    2804:	0018      	movs	r0, r3
    2806:	4b17      	ldr	r3, [pc, #92]	; (2864 <sync+0x1a8>)
    2808:	58e3      	ldr	r3, [r4, r3]
    280a:	4798      	blx	r3
    280c:	1e03      	subs	r3, r0, #0
    280e:	d003      	beq.n	2818 <sync+0x15c>
			res = FR_DISK_ERR;
    2810:	230f      	movs	r3, #15
    2812:	18fb      	adds	r3, r7, r3
    2814:	2201      	movs	r2, #1
    2816:	701a      	strb	r2, [r3, #0]
	}

	return res;
    2818:	230f      	movs	r3, #15
    281a:	18fb      	adds	r3, r7, r3
    281c:	781b      	ldrb	r3, [r3, #0]
}
    281e:	0018      	movs	r0, r3
    2820:	46bd      	mov	sp, r7
    2822:	b004      	add	sp, #16
    2824:	bdb0      	pop	{r4, r5, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	0000f79a 	.word	0x0000f79a
    282c:	ffffff0d 	.word	0xffffff0d
    2830:	fffffe23 	.word	0xfffffe23
    2834:	0000022e 	.word	0x0000022e
    2838:	0000022f 	.word	0x0000022f
    283c:	00000215 	.word	0x00000215
    2840:	00000216 	.word	0x00000216
    2844:	00000217 	.word	0x00000217
    2848:	00000219 	.word	0x00000219
    284c:	0000021a 	.word	0x0000021a
    2850:	0000021b 	.word	0x0000021b
    2854:	0000021d 	.word	0x0000021d
    2858:	0000021e 	.word	0x0000021e
    285c:	0000021f 	.word	0x0000021f
    2860:	000002a0 	.word	0x000002a0
    2864:	000000e4 	.word	0x000000e4

00002868 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    2870:	6039      	str	r1, [r7, #0]
	clst -= 2;
    2872:	683b      	ldr	r3, [r7, #0]
    2874:	3b02      	subs	r3, #2
    2876:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	699b      	ldr	r3, [r3, #24]
    287c:	1e9a      	subs	r2, r3, #2
    287e:	683b      	ldr	r3, [r7, #0]
    2880:	429a      	cmp	r2, r3
    2882:	d801      	bhi.n	2888 <clust2sect+0x20>
    2884:	2300      	movs	r3, #0
    2886:	e007      	b.n	2898 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    2888:	687b      	ldr	r3, [r7, #4]
    288a:	789b      	ldrb	r3, [r3, #2]
    288c:	001a      	movs	r2, r3
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	435a      	muls	r2, r3
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2896:	18d3      	adds	r3, r2, r3
}
    2898:	0018      	movs	r0, r3
    289a:	46bd      	mov	sp, r7
    289c:	b002      	add	sp, #8
    289e:	bd80      	pop	{r7, pc}

000028a0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b086      	sub	sp, #24
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    28a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    28aa:	683b      	ldr	r3, [r7, #0]
    28ac:	2b01      	cmp	r3, #1
    28ae:	d904      	bls.n	28ba <get_fat+0x1a>
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	699a      	ldr	r2, [r3, #24]
    28b4:	683b      	ldr	r3, [r7, #0]
    28b6:	429a      	cmp	r2, r3
    28b8:	d801      	bhi.n	28be <get_fat+0x1e>
		return 1;
    28ba:	2301      	movs	r3, #1
    28bc:	e0a3      	b.n	2a06 <get_fat+0x166>

	switch (fs->fs_type) {
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	781b      	ldrb	r3, [r3, #0]
    28c2:	2b02      	cmp	r3, #2
    28c4:	d04a      	beq.n	295c <get_fat+0xbc>
    28c6:	2b03      	cmp	r3, #3
    28c8:	d06a      	beq.n	29a0 <get_fat+0x100>
    28ca:	2b01      	cmp	r3, #1
    28cc:	d000      	beq.n	28d0 <get_fat+0x30>
    28ce:	e098      	b.n	2a02 <get_fat+0x162>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	617b      	str	r3, [r7, #20]
    28d4:	697b      	ldr	r3, [r7, #20]
    28d6:	085b      	lsrs	r3, r3, #1
    28d8:	697a      	ldr	r2, [r7, #20]
    28da:	18d3      	adds	r3, r2, r3
    28dc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	6a1a      	ldr	r2, [r3, #32]
    28e2:	697b      	ldr	r3, [r7, #20]
    28e4:	0a5b      	lsrs	r3, r3, #9
    28e6:	18d2      	adds	r2, r2, r3
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	0011      	movs	r1, r2
    28ec:	0018      	movs	r0, r3
    28ee:	4b48      	ldr	r3, [pc, #288]	; (2a10 <get_fat+0x170>)
    28f0:	447b      	add	r3, pc
    28f2:	4798      	blx	r3
    28f4:	1e03      	subs	r3, r0, #0
    28f6:	d000      	beq.n	28fa <get_fat+0x5a>
    28f8:	e07c      	b.n	29f4 <get_fat+0x154>
		wc = fs->win[bc % SS(fs)]; bc++;
    28fa:	697b      	ldr	r3, [r7, #20]
    28fc:	05db      	lsls	r3, r3, #23
    28fe:	0ddb      	lsrs	r3, r3, #23
    2900:	687a      	ldr	r2, [r7, #4]
    2902:	2130      	movs	r1, #48	; 0x30
    2904:	18d3      	adds	r3, r2, r3
    2906:	185b      	adds	r3, r3, r1
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	613b      	str	r3, [r7, #16]
    290c:	697b      	ldr	r3, [r7, #20]
    290e:	3301      	adds	r3, #1
    2910:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	6a1a      	ldr	r2, [r3, #32]
    2916:	697b      	ldr	r3, [r7, #20]
    2918:	0a5b      	lsrs	r3, r3, #9
    291a:	18d2      	adds	r2, r2, r3
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	0011      	movs	r1, r2
    2920:	0018      	movs	r0, r3
    2922:	4b3c      	ldr	r3, [pc, #240]	; (2a14 <get_fat+0x174>)
    2924:	447b      	add	r3, pc
    2926:	4798      	blx	r3
    2928:	1e03      	subs	r3, r0, #0
    292a:	d165      	bne.n	29f8 <get_fat+0x158>
		wc |= fs->win[bc % SS(fs)] << 8;
    292c:	697b      	ldr	r3, [r7, #20]
    292e:	05db      	lsls	r3, r3, #23
    2930:	0ddb      	lsrs	r3, r3, #23
    2932:	687a      	ldr	r2, [r7, #4]
    2934:	2130      	movs	r1, #48	; 0x30
    2936:	18d3      	adds	r3, r2, r3
    2938:	185b      	adds	r3, r3, r1
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	021b      	lsls	r3, r3, #8
    293e:	001a      	movs	r2, r3
    2940:	693b      	ldr	r3, [r7, #16]
    2942:	4313      	orrs	r3, r2
    2944:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	2201      	movs	r2, #1
    294a:	4013      	ands	r3, r2
    294c:	d002      	beq.n	2954 <get_fat+0xb4>
    294e:	693b      	ldr	r3, [r7, #16]
    2950:	091b      	lsrs	r3, r3, #4
    2952:	e058      	b.n	2a06 <get_fat+0x166>
    2954:	693b      	ldr	r3, [r7, #16]
    2956:	051b      	lsls	r3, r3, #20
    2958:	0d1b      	lsrs	r3, r3, #20
    295a:	e054      	b.n	2a06 <get_fat+0x166>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	6a1a      	ldr	r2, [r3, #32]
    2960:	683b      	ldr	r3, [r7, #0]
    2962:	0a1b      	lsrs	r3, r3, #8
    2964:	18d2      	adds	r2, r2, r3
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	0011      	movs	r1, r2
    296a:	0018      	movs	r0, r3
    296c:	4b2a      	ldr	r3, [pc, #168]	; (2a18 <get_fat+0x178>)
    296e:	447b      	add	r3, pc
    2970:	4798      	blx	r3
    2972:	1e03      	subs	r3, r0, #0
    2974:	d142      	bne.n	29fc <get_fat+0x15c>
		p = &fs->win[clst * 2 % SS(fs)];
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	005a      	lsls	r2, r3, #1
    297a:	23ff      	movs	r3, #255	; 0xff
    297c:	005b      	lsls	r3, r3, #1
    297e:	4013      	ands	r3, r2
    2980:	3330      	adds	r3, #48	; 0x30
    2982:	687a      	ldr	r2, [r7, #4]
    2984:	18d3      	adds	r3, r2, r3
    2986:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	3301      	adds	r3, #1
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	021b      	lsls	r3, r3, #8
    2990:	b21a      	sxth	r2, r3
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	b21b      	sxth	r3, r3
    2998:	4313      	orrs	r3, r2
    299a:	b21b      	sxth	r3, r3
    299c:	b29b      	uxth	r3, r3
    299e:	e032      	b.n	2a06 <get_fat+0x166>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	6a1a      	ldr	r2, [r3, #32]
    29a4:	683b      	ldr	r3, [r7, #0]
    29a6:	09db      	lsrs	r3, r3, #7
    29a8:	18d2      	adds	r2, r2, r3
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	0011      	movs	r1, r2
    29ae:	0018      	movs	r0, r3
    29b0:	4b1a      	ldr	r3, [pc, #104]	; (2a1c <get_fat+0x17c>)
    29b2:	447b      	add	r3, pc
    29b4:	4798      	blx	r3
    29b6:	1e03      	subs	r3, r0, #0
    29b8:	d122      	bne.n	2a00 <get_fat+0x160>
		p = &fs->win[clst * 4 % SS(fs)];
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	009a      	lsls	r2, r3, #2
    29be:	23fe      	movs	r3, #254	; 0xfe
    29c0:	005b      	lsls	r3, r3, #1
    29c2:	4013      	ands	r3, r2
    29c4:	3330      	adds	r3, #48	; 0x30
    29c6:	687a      	ldr	r2, [r7, #4]
    29c8:	18d3      	adds	r3, r2, r3
    29ca:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    29cc:	68fb      	ldr	r3, [r7, #12]
    29ce:	3303      	adds	r3, #3
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	061a      	lsls	r2, r3, #24
    29d4:	68fb      	ldr	r3, [r7, #12]
    29d6:	3302      	adds	r3, #2
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	041b      	lsls	r3, r3, #16
    29dc:	4313      	orrs	r3, r2
    29de:	68fa      	ldr	r2, [r7, #12]
    29e0:	3201      	adds	r2, #1
    29e2:	7812      	ldrb	r2, [r2, #0]
    29e4:	0212      	lsls	r2, r2, #8
    29e6:	4313      	orrs	r3, r2
    29e8:	68fa      	ldr	r2, [r7, #12]
    29ea:	7812      	ldrb	r2, [r2, #0]
    29ec:	4313      	orrs	r3, r2
    29ee:	011b      	lsls	r3, r3, #4
    29f0:	091b      	lsrs	r3, r3, #4
    29f2:	e008      	b.n	2a06 <get_fat+0x166>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    29f4:	46c0      	nop			; (mov r8, r8)
    29f6:	e004      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    29f8:	46c0      	nop			; (mov r8, r8)
    29fa:	e002      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	e000      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    2a00:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2a02:	2301      	movs	r3, #1
    2a04:	425b      	negs	r3, r3
}
    2a06:	0018      	movs	r0, r3
    2a08:	46bd      	mov	sp, r7
    2a0a:	b006      	add	sp, #24
    2a0c:	bd80      	pop	{r7, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	fffffcf1 	.word	0xfffffcf1
    2a14:	fffffcbd 	.word	0xfffffcbd
    2a18:	fffffc73 	.word	0xfffffc73
    2a1c:	fffffc2f 	.word	0xfffffc2f

00002a20 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    2a20:	b590      	push	{r4, r7, lr}
    2a22:	b089      	sub	sp, #36	; 0x24
    2a24:	af00      	add	r7, sp, #0
    2a26:	60f8      	str	r0, [r7, #12]
    2a28:	60b9      	str	r1, [r7, #8]
    2a2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2a2c:	68bb      	ldr	r3, [r7, #8]
    2a2e:	2b01      	cmp	r3, #1
    2a30:	d904      	bls.n	2a3c <put_fat+0x1c>
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	699a      	ldr	r2, [r3, #24]
    2a36:	68bb      	ldr	r3, [r7, #8]
    2a38:	429a      	cmp	r2, r3
    2a3a:	d804      	bhi.n	2a46 <put_fat+0x26>
		res = FR_INT_ERR;
    2a3c:	231f      	movs	r3, #31
    2a3e:	18fb      	adds	r3, r7, r3
    2a40:	2202      	movs	r2, #2
    2a42:	701a      	strb	r2, [r3, #0]
    2a44:	e104      	b.n	2c50 <put_fat+0x230>

	} else {
		switch (fs->fs_type) {
    2a46:	68fb      	ldr	r3, [r7, #12]
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2b02      	cmp	r3, #2
    2a4c:	d100      	bne.n	2a50 <put_fat+0x30>
    2a4e:	e07a      	b.n	2b46 <put_fat+0x126>
    2a50:	2b03      	cmp	r3, #3
    2a52:	d100      	bne.n	2a56 <put_fat+0x36>
    2a54:	e0a1      	b.n	2b9a <put_fat+0x17a>
    2a56:	2b01      	cmp	r3, #1
    2a58:	d000      	beq.n	2a5c <put_fat+0x3c>
    2a5a:	e0ea      	b.n	2c32 <put_fat+0x212>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    2a5c:	68bb      	ldr	r3, [r7, #8]
    2a5e:	61bb      	str	r3, [r7, #24]
    2a60:	69bb      	ldr	r3, [r7, #24]
    2a62:	085b      	lsrs	r3, r3, #1
    2a64:	69ba      	ldr	r2, [r7, #24]
    2a66:	18d3      	adds	r3, r2, r3
    2a68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2a6a:	68fb      	ldr	r3, [r7, #12]
    2a6c:	6a1a      	ldr	r2, [r3, #32]
    2a6e:	69bb      	ldr	r3, [r7, #24]
    2a70:	0a5b      	lsrs	r3, r3, #9
    2a72:	18d2      	adds	r2, r2, r3
    2a74:	231f      	movs	r3, #31
    2a76:	18fc      	adds	r4, r7, r3
    2a78:	68fb      	ldr	r3, [r7, #12]
    2a7a:	0011      	movs	r1, r2
    2a7c:	0018      	movs	r0, r3
    2a7e:	4b78      	ldr	r3, [pc, #480]	; (2c60 <put_fat+0x240>)
    2a80:	447b      	add	r3, pc
    2a82:	4798      	blx	r3
    2a84:	0003      	movs	r3, r0
    2a86:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2a88:	231f      	movs	r3, #31
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d000      	beq.n	2a94 <put_fat+0x74>
    2a92:	e0d3      	b.n	2c3c <put_fat+0x21c>
			p = &fs->win[bc % SS(fs)];
    2a94:	69bb      	ldr	r3, [r7, #24]
    2a96:	05db      	lsls	r3, r3, #23
    2a98:	0ddb      	lsrs	r3, r3, #23
    2a9a:	3330      	adds	r3, #48	; 0x30
    2a9c:	68fa      	ldr	r2, [r7, #12]
    2a9e:	18d3      	adds	r3, r2, r3
    2aa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2aa2:	68bb      	ldr	r3, [r7, #8]
    2aa4:	2201      	movs	r2, #1
    2aa6:	4013      	ands	r3, r2
    2aa8:	d00d      	beq.n	2ac6 <put_fat+0xa6>
    2aaa:	697b      	ldr	r3, [r7, #20]
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	b25b      	sxtb	r3, r3
    2ab0:	220f      	movs	r2, #15
    2ab2:	4013      	ands	r3, r2
    2ab4:	b25a      	sxtb	r2, r3
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	011b      	lsls	r3, r3, #4
    2abc:	b25b      	sxtb	r3, r3
    2abe:	4313      	orrs	r3, r2
    2ac0:	b25b      	sxtb	r3, r3
    2ac2:	b2db      	uxtb	r3, r3
    2ac4:	e001      	b.n	2aca <put_fat+0xaa>
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	b2db      	uxtb	r3, r3
    2aca:	697a      	ldr	r2, [r7, #20]
    2acc:	7013      	strb	r3, [r2, #0]
			bc++;
    2ace:	69bb      	ldr	r3, [r7, #24]
    2ad0:	3301      	adds	r3, #1
    2ad2:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	2201      	movs	r2, #1
    2ad8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2ada:	68fb      	ldr	r3, [r7, #12]
    2adc:	6a1a      	ldr	r2, [r3, #32]
    2ade:	69bb      	ldr	r3, [r7, #24]
    2ae0:	0a5b      	lsrs	r3, r3, #9
    2ae2:	18d2      	adds	r2, r2, r3
    2ae4:	231f      	movs	r3, #31
    2ae6:	18fc      	adds	r4, r7, r3
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	0011      	movs	r1, r2
    2aec:	0018      	movs	r0, r3
    2aee:	4b5d      	ldr	r3, [pc, #372]	; (2c64 <put_fat+0x244>)
    2af0:	447b      	add	r3, pc
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2af8:	231f      	movs	r3, #31
    2afa:	18fb      	adds	r3, r7, r3
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d000      	beq.n	2b04 <put_fat+0xe4>
    2b02:	e09d      	b.n	2c40 <put_fat+0x220>
			p = &fs->win[bc % SS(fs)];
    2b04:	69bb      	ldr	r3, [r7, #24]
    2b06:	05db      	lsls	r3, r3, #23
    2b08:	0ddb      	lsrs	r3, r3, #23
    2b0a:	3330      	adds	r3, #48	; 0x30
    2b0c:	68fa      	ldr	r2, [r7, #12]
    2b0e:	18d3      	adds	r3, r2, r3
    2b10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2b12:	68bb      	ldr	r3, [r7, #8]
    2b14:	2201      	movs	r2, #1
    2b16:	4013      	ands	r3, r2
    2b18:	d003      	beq.n	2b22 <put_fat+0x102>
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	091b      	lsrs	r3, r3, #4
    2b1e:	b2db      	uxtb	r3, r3
    2b20:	e00e      	b.n	2b40 <put_fat+0x120>
    2b22:	697b      	ldr	r3, [r7, #20]
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	b25b      	sxtb	r3, r3
    2b28:	220f      	movs	r2, #15
    2b2a:	4393      	bics	r3, r2
    2b2c:	b25a      	sxtb	r2, r3
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	0a1b      	lsrs	r3, r3, #8
    2b32:	b25b      	sxtb	r3, r3
    2b34:	210f      	movs	r1, #15
    2b36:	400b      	ands	r3, r1
    2b38:	b25b      	sxtb	r3, r3
    2b3a:	4313      	orrs	r3, r2
    2b3c:	b25b      	sxtb	r3, r3
    2b3e:	b2db      	uxtb	r3, r3
    2b40:	697a      	ldr	r2, [r7, #20]
    2b42:	7013      	strb	r3, [r2, #0]
			break;
    2b44:	e081      	b.n	2c4a <put_fat+0x22a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2b46:	68fb      	ldr	r3, [r7, #12]
    2b48:	6a1a      	ldr	r2, [r3, #32]
    2b4a:	68bb      	ldr	r3, [r7, #8]
    2b4c:	0a1b      	lsrs	r3, r3, #8
    2b4e:	18d2      	adds	r2, r2, r3
    2b50:	231f      	movs	r3, #31
    2b52:	18fc      	adds	r4, r7, r3
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	0011      	movs	r1, r2
    2b58:	0018      	movs	r0, r3
    2b5a:	4b43      	ldr	r3, [pc, #268]	; (2c68 <put_fat+0x248>)
    2b5c:	447b      	add	r3, pc
    2b5e:	4798      	blx	r3
    2b60:	0003      	movs	r3, r0
    2b62:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2b64:	231f      	movs	r3, #31
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d16a      	bne.n	2c44 <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    2b6e:	68bb      	ldr	r3, [r7, #8]
    2b70:	005a      	lsls	r2, r3, #1
    2b72:	23ff      	movs	r3, #255	; 0xff
    2b74:	005b      	lsls	r3, r3, #1
    2b76:	4013      	ands	r3, r2
    2b78:	3330      	adds	r3, #48	; 0x30
    2b7a:	68fa      	ldr	r2, [r7, #12]
    2b7c:	18d3      	adds	r3, r2, r3
    2b7e:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	b2da      	uxtb	r2, r3
    2b84:	697b      	ldr	r3, [r7, #20]
    2b86:	701a      	strb	r2, [r3, #0]
    2b88:	697b      	ldr	r3, [r7, #20]
    2b8a:	3301      	adds	r3, #1
    2b8c:	687a      	ldr	r2, [r7, #4]
    2b8e:	b292      	uxth	r2, r2
    2b90:	0a12      	lsrs	r2, r2, #8
    2b92:	b292      	uxth	r2, r2
    2b94:	b2d2      	uxtb	r2, r2
    2b96:	701a      	strb	r2, [r3, #0]
			break;
    2b98:	e057      	b.n	2c4a <put_fat+0x22a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	6a1a      	ldr	r2, [r3, #32]
    2b9e:	68bb      	ldr	r3, [r7, #8]
    2ba0:	09db      	lsrs	r3, r3, #7
    2ba2:	18d2      	adds	r2, r2, r3
    2ba4:	231f      	movs	r3, #31
    2ba6:	18fc      	adds	r4, r7, r3
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	0011      	movs	r1, r2
    2bac:	0018      	movs	r0, r3
    2bae:	4b2f      	ldr	r3, [pc, #188]	; (2c6c <put_fat+0x24c>)
    2bb0:	447b      	add	r3, pc
    2bb2:	4798      	blx	r3
    2bb4:	0003      	movs	r3, r0
    2bb6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2bb8:	231f      	movs	r3, #31
    2bba:	18fb      	adds	r3, r7, r3
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d142      	bne.n	2c48 <put_fat+0x228>
			p = &fs->win[clst * 4 % SS(fs)];
    2bc2:	68bb      	ldr	r3, [r7, #8]
    2bc4:	009a      	lsls	r2, r3, #2
    2bc6:	23fe      	movs	r3, #254	; 0xfe
    2bc8:	005b      	lsls	r3, r3, #1
    2bca:	4013      	ands	r3, r2
    2bcc:	3330      	adds	r3, #48	; 0x30
    2bce:	68fa      	ldr	r2, [r7, #12]
    2bd0:	18d3      	adds	r3, r2, r3
    2bd2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    2bd4:	697b      	ldr	r3, [r7, #20]
    2bd6:	3303      	adds	r3, #3
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	061a      	lsls	r2, r3, #24
    2bdc:	697b      	ldr	r3, [r7, #20]
    2bde:	3302      	adds	r3, #2
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	041b      	lsls	r3, r3, #16
    2be4:	4313      	orrs	r3, r2
    2be6:	697a      	ldr	r2, [r7, #20]
    2be8:	3201      	adds	r2, #1
    2bea:	7812      	ldrb	r2, [r2, #0]
    2bec:	0212      	lsls	r2, r2, #8
    2bee:	4313      	orrs	r3, r2
    2bf0:	697a      	ldr	r2, [r7, #20]
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	4313      	orrs	r3, r2
    2bf6:	0f1b      	lsrs	r3, r3, #28
    2bf8:	071b      	lsls	r3, r3, #28
    2bfa:	687a      	ldr	r2, [r7, #4]
    2bfc:	4313      	orrs	r3, r2
    2bfe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	b2da      	uxtb	r2, r3
    2c04:	697b      	ldr	r3, [r7, #20]
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	3301      	adds	r3, #1
    2c0c:	687a      	ldr	r2, [r7, #4]
    2c0e:	b292      	uxth	r2, r2
    2c10:	0a12      	lsrs	r2, r2, #8
    2c12:	b292      	uxth	r2, r2
    2c14:	b2d2      	uxtb	r2, r2
    2c16:	701a      	strb	r2, [r3, #0]
    2c18:	697b      	ldr	r3, [r7, #20]
    2c1a:	3302      	adds	r3, #2
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	0c12      	lsrs	r2, r2, #16
    2c20:	b2d2      	uxtb	r2, r2
    2c22:	701a      	strb	r2, [r3, #0]
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	3303      	adds	r3, #3
    2c28:	687a      	ldr	r2, [r7, #4]
    2c2a:	0e12      	lsrs	r2, r2, #24
    2c2c:	b2d2      	uxtb	r2, r2
    2c2e:	701a      	strb	r2, [r3, #0]
			break;
    2c30:	e00b      	b.n	2c4a <put_fat+0x22a>

		default :
			res = FR_INT_ERR;
    2c32:	231f      	movs	r3, #31
    2c34:	18fb      	adds	r3, r7, r3
    2c36:	2202      	movs	r2, #2
    2c38:	701a      	strb	r2, [r3, #0]
    2c3a:	e006      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	e004      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c40:	46c0      	nop			; (mov r8, r8)
    2c42:	e002      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c44:	46c0      	nop			; (mov r8, r8)
    2c46:	e000      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c48:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	2201      	movs	r2, #1
    2c4e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    2c50:	231f      	movs	r3, #31
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	781b      	ldrb	r3, [r3, #0]
}
    2c56:	0018      	movs	r0, r3
    2c58:	46bd      	mov	sp, r7
    2c5a:	b009      	add	sp, #36	; 0x24
    2c5c:	bd90      	pop	{r4, r7, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	fffffb61 	.word	0xfffffb61
    2c64:	fffffaf1 	.word	0xfffffaf1
    2c68:	fffffa85 	.word	0xfffffa85
    2c6c:	fffffa31 	.word	0xfffffa31

00002c70 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    2c70:	b590      	push	{r4, r7, lr}
    2c72:	b085      	sub	sp, #20
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
    2c78:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2c7a:	683b      	ldr	r3, [r7, #0]
    2c7c:	2b01      	cmp	r3, #1
    2c7e:	d904      	bls.n	2c8a <remove_chain+0x1a>
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	699a      	ldr	r2, [r3, #24]
    2c84:	683b      	ldr	r3, [r7, #0]
    2c86:	429a      	cmp	r2, r3
    2c88:	d804      	bhi.n	2c94 <remove_chain+0x24>
		res = FR_INT_ERR;
    2c8a:	230f      	movs	r3, #15
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	2202      	movs	r2, #2
    2c90:	701a      	strb	r2, [r3, #0]
    2c92:	e047      	b.n	2d24 <remove_chain+0xb4>

	} else {
		res = FR_OK;
    2c94:	230f      	movs	r3, #15
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	2200      	movs	r2, #0
    2c9a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2c9c:	e039      	b.n	2d12 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2c9e:	683a      	ldr	r2, [r7, #0]
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	0011      	movs	r1, r2
    2ca4:	0018      	movs	r0, r3
    2ca6:	4b23      	ldr	r3, [pc, #140]	; (2d34 <remove_chain+0xc4>)
    2ca8:	447b      	add	r3, pc
    2caa:	4798      	blx	r3
    2cac:	0003      	movs	r3, r0
    2cae:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    2cb0:	68bb      	ldr	r3, [r7, #8]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d033      	beq.n	2d1e <remove_chain+0xae>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2cb6:	68bb      	ldr	r3, [r7, #8]
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d104      	bne.n	2cc6 <remove_chain+0x56>
    2cbc:	230f      	movs	r3, #15
    2cbe:	18fb      	adds	r3, r7, r3
    2cc0:	2202      	movs	r2, #2
    2cc2:	701a      	strb	r2, [r3, #0]
    2cc4:	e02e      	b.n	2d24 <remove_chain+0xb4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2cc6:	68bb      	ldr	r3, [r7, #8]
    2cc8:	3301      	adds	r3, #1
    2cca:	d104      	bne.n	2cd6 <remove_chain+0x66>
    2ccc:	230f      	movs	r3, #15
    2cce:	18fb      	adds	r3, r7, r3
    2cd0:	2201      	movs	r2, #1
    2cd2:	701a      	strb	r2, [r3, #0]
    2cd4:	e026      	b.n	2d24 <remove_chain+0xb4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2cd6:	230f      	movs	r3, #15
    2cd8:	18fc      	adds	r4, r7, r3
    2cda:	6839      	ldr	r1, [r7, #0]
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	2200      	movs	r2, #0
    2ce0:	0018      	movs	r0, r3
    2ce2:	4b15      	ldr	r3, [pc, #84]	; (2d38 <remove_chain+0xc8>)
    2ce4:	447b      	add	r3, pc
    2ce6:	4798      	blx	r3
    2ce8:	0003      	movs	r3, r0
    2cea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2cec:	230f      	movs	r3, #15
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d115      	bne.n	2d22 <remove_chain+0xb2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	691b      	ldr	r3, [r3, #16]
    2cfa:	3301      	adds	r3, #1
    2cfc:	d007      	beq.n	2d0e <remove_chain+0x9e>
				fs->free_clust++;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	691b      	ldr	r3, [r3, #16]
    2d02:	1c5a      	adds	r2, r3, #1
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	2201      	movs	r2, #1
    2d0c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	699a      	ldr	r2, [r3, #24]
    2d16:	683b      	ldr	r3, [r7, #0]
    2d18:	429a      	cmp	r2, r3
    2d1a:	d8c0      	bhi.n	2c9e <remove_chain+0x2e>
    2d1c:	e002      	b.n	2d24 <remove_chain+0xb4>
			if (nxt == 0) break;				/* Empty cluster? */
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	e000      	b.n	2d24 <remove_chain+0xb4>
			if (res != FR_OK) break;
    2d22:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    2d24:	230f      	movs	r3, #15
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	781b      	ldrb	r3, [r3, #0]
}
    2d2a:	0018      	movs	r0, r3
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b005      	add	sp, #20
    2d30:	bd90      	pop	{r4, r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	fffffbf5 	.word	0xfffffbf5
    2d38:	fffffd39 	.word	0xfffffd39

00002d3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    2d3c:	b590      	push	{r4, r7, lr}
    2d3e:	b087      	sub	sp, #28
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d10d      	bne.n	2d68 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	68db      	ldr	r3, [r3, #12]
    2d50:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2d52:	693b      	ldr	r3, [r7, #16]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d004      	beq.n	2d62 <create_chain+0x26>
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	699a      	ldr	r2, [r3, #24]
    2d5c:	693b      	ldr	r3, [r7, #16]
    2d5e:	429a      	cmp	r2, r3
    2d60:	d819      	bhi.n	2d96 <create_chain+0x5a>
    2d62:	2301      	movs	r3, #1
    2d64:	613b      	str	r3, [r7, #16]
    2d66:	e016      	b.n	2d96 <create_chain+0x5a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2d68:	683a      	ldr	r2, [r7, #0]
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	0011      	movs	r1, r2
    2d6e:	0018      	movs	r0, r3
    2d70:	4b40      	ldr	r3, [pc, #256]	; (2e74 <create_chain+0x138>)
    2d72:	447b      	add	r3, pc
    2d74:	4798      	blx	r3
    2d76:	0003      	movs	r3, r0
    2d78:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2d7a:	68bb      	ldr	r3, [r7, #8]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d801      	bhi.n	2d84 <create_chain+0x48>
    2d80:	2301      	movs	r3, #1
    2d82:	e073      	b.n	2e6c <create_chain+0x130>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	699a      	ldr	r2, [r3, #24]
    2d88:	68bb      	ldr	r3, [r7, #8]
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d901      	bls.n	2d92 <create_chain+0x56>
    2d8e:	68bb      	ldr	r3, [r7, #8]
    2d90:	e06c      	b.n	2e6c <create_chain+0x130>
		scl = clst;
    2d92:	683b      	ldr	r3, [r7, #0]
    2d94:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    2d96:	693b      	ldr	r3, [r7, #16]
    2d98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    2d9a:	697b      	ldr	r3, [r7, #20]
    2d9c:	3301      	adds	r3, #1
    2d9e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	699a      	ldr	r2, [r3, #24]
    2da4:	697b      	ldr	r3, [r7, #20]
    2da6:	429a      	cmp	r2, r3
    2da8:	d807      	bhi.n	2dba <create_chain+0x7e>
			ncl = 2;
    2daa:	2302      	movs	r3, #2
    2dac:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    2dae:	697a      	ldr	r2, [r7, #20]
    2db0:	693b      	ldr	r3, [r7, #16]
    2db2:	429a      	cmp	r2, r3
    2db4:	d901      	bls.n	2dba <create_chain+0x7e>
    2db6:	2300      	movs	r3, #0
    2db8:	e058      	b.n	2e6c <create_chain+0x130>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2dba:	697a      	ldr	r2, [r7, #20]
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	0011      	movs	r1, r2
    2dc0:	0018      	movs	r0, r3
    2dc2:	4b2d      	ldr	r3, [pc, #180]	; (2e78 <create_chain+0x13c>)
    2dc4:	447b      	add	r3, pc
    2dc6:	4798      	blx	r3
    2dc8:	0003      	movs	r3, r0
    2dca:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    2dcc:	68bb      	ldr	r3, [r7, #8]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d00d      	beq.n	2dee <create_chain+0xb2>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2dd2:	68bb      	ldr	r3, [r7, #8]
    2dd4:	3301      	adds	r3, #1
    2dd6:	d002      	beq.n	2dde <create_chain+0xa2>
    2dd8:	68bb      	ldr	r3, [r7, #8]
    2dda:	2b01      	cmp	r3, #1
    2ddc:	d101      	bne.n	2de2 <create_chain+0xa6>
			return cs;
    2dde:	68bb      	ldr	r3, [r7, #8]
    2de0:	e044      	b.n	2e6c <create_chain+0x130>
		if (ncl == scl) return 0;		/* No free cluster */
    2de2:	697a      	ldr	r2, [r7, #20]
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	429a      	cmp	r2, r3
    2de8:	d1d7      	bne.n	2d9a <create_chain+0x5e>
    2dea:	2300      	movs	r3, #0
    2dec:	e03e      	b.n	2e6c <create_chain+0x130>
		if (cs == 0) break;				/* Found a free cluster */
    2dee:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2df0:	230f      	movs	r3, #15
    2df2:	18fc      	adds	r4, r7, r3
    2df4:	4a21      	ldr	r2, [pc, #132]	; (2e7c <create_chain+0x140>)
    2df6:	6979      	ldr	r1, [r7, #20]
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b20      	ldr	r3, [pc, #128]	; (2e80 <create_chain+0x144>)
    2dfe:	447b      	add	r3, pc
    2e00:	4798      	blx	r3
    2e02:	0003      	movs	r3, r0
    2e04:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    2e06:	230f      	movs	r3, #15
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d10d      	bne.n	2e2c <create_chain+0xf0>
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d00a      	beq.n	2e2c <create_chain+0xf0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    2e16:	230f      	movs	r3, #15
    2e18:	18fc      	adds	r4, r7, r3
    2e1a:	697a      	ldr	r2, [r7, #20]
    2e1c:	6839      	ldr	r1, [r7, #0]
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	0018      	movs	r0, r3
    2e22:	4b18      	ldr	r3, [pc, #96]	; (2e84 <create_chain+0x148>)
    2e24:	447b      	add	r3, pc
    2e26:	4798      	blx	r3
    2e28:	0003      	movs	r3, r0
    2e2a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    2e2c:	230f      	movs	r3, #15
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d10f      	bne.n	2e56 <create_chain+0x11a>
		fs->last_clust = ncl;			/* Update FSINFO */
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	697a      	ldr	r2, [r7, #20]
    2e3a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	691b      	ldr	r3, [r3, #16]
    2e40:	3301      	adds	r3, #1
    2e42:	d012      	beq.n	2e6a <create_chain+0x12e>
			fs->free_clust--;
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	691b      	ldr	r3, [r3, #16]
    2e48:	1e5a      	subs	r2, r3, #1
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	2201      	movs	r2, #1
    2e52:	715a      	strb	r2, [r3, #5]
    2e54:	e009      	b.n	2e6a <create_chain+0x12e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2e56:	230f      	movs	r3, #15
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	2b01      	cmp	r3, #1
    2e5e:	d102      	bne.n	2e66 <create_chain+0x12a>
    2e60:	2301      	movs	r3, #1
    2e62:	425b      	negs	r3, r3
    2e64:	e000      	b.n	2e68 <create_chain+0x12c>
    2e66:	2301      	movs	r3, #1
    2e68:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    2e6a:	697b      	ldr	r3, [r7, #20]
}
    2e6c:	0018      	movs	r0, r3
    2e6e:	46bd      	mov	sp, r7
    2e70:	b007      	add	sp, #28
    2e72:	bd90      	pop	{r4, r7, pc}
    2e74:	fffffb2b 	.word	0xfffffb2b
    2e78:	fffffad9 	.word	0xfffffad9
    2e7c:	0fffffff 	.word	0x0fffffff
    2e80:	fffffc1f 	.word	0xfffffc1f
    2e84:	fffffbf9 	.word	0xfffffbf9

00002e88 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b084      	sub	sp, #16
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	6078      	str	r0, [r7, #4]
    2e90:	000a      	movs	r2, r1
    2e92:	1cbb      	adds	r3, r7, #2
    2e94:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	1cba      	adds	r2, r7, #2
    2e9a:	8812      	ldrh	r2, [r2, #0]
    2e9c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	689b      	ldr	r3, [r3, #8]
    2ea2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2ea4:	68fb      	ldr	r3, [r7, #12]
    2ea6:	2b01      	cmp	r3, #1
    2ea8:	d005      	beq.n	2eb6 <dir_sdi+0x2e>
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	699a      	ldr	r2, [r3, #24]
    2eb0:	68fb      	ldr	r3, [r7, #12]
    2eb2:	429a      	cmp	r2, r3
    2eb4:	d801      	bhi.n	2eba <dir_sdi+0x32>
		return FR_INT_ERR;
    2eb6:	2302      	movs	r3, #2
    2eb8:	e077      	b.n	2faa <dir_sdi+0x122>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d108      	bne.n	2ed2 <dir_sdi+0x4a>
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	2b03      	cmp	r3, #3
    2ec8:	d103      	bne.n	2ed2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	681b      	ldr	r3, [r3, #0]
    2ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ed0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d116      	bne.n	2f06 <dir_sdi+0x7e>
		dj->clust = clst;
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	1cba      	adds	r2, r7, #2
    2ee6:	8812      	ldrh	r2, [r2, #0]
    2ee8:	429a      	cmp	r2, r3
    2eea:	d301      	bcc.n	2ef0 <dir_sdi+0x68>
			return FR_INT_ERR;
    2eec:	2302      	movs	r3, #2
    2eee:	e05c      	b.n	2faa <dir_sdi+0x122>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ef6:	1cba      	adds	r2, r7, #2
    2ef8:	8812      	ldrh	r2, [r2, #0]
    2efa:	0912      	lsrs	r2, r2, #4
    2efc:	b292      	uxth	r2, r2
    2efe:	189a      	adds	r2, r3, r2
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	611a      	str	r2, [r3, #16]
    2f04:	e044      	b.n	2f90 <dir_sdi+0x108>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	789b      	ldrb	r3, [r3, #2]
    2f0c:	b29a      	uxth	r2, r3
    2f0e:	230a      	movs	r3, #10
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	0112      	lsls	r2, r2, #4
    2f14:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    2f16:	e021      	b.n	2f5c <dir_sdi+0xd4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	68fa      	ldr	r2, [r7, #12]
    2f1e:	0011      	movs	r1, r2
    2f20:	0018      	movs	r0, r3
    2f22:	4b24      	ldr	r3, [pc, #144]	; (2fb4 <dir_sdi+0x12c>)
    2f24:	447b      	add	r3, pc
    2f26:	4798      	blx	r3
    2f28:	0003      	movs	r3, r0
    2f2a:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2f2c:	68fb      	ldr	r3, [r7, #12]
    2f2e:	3301      	adds	r3, #1
    2f30:	d101      	bne.n	2f36 <dir_sdi+0xae>
    2f32:	2301      	movs	r3, #1
    2f34:	e039      	b.n	2faa <dir_sdi+0x122>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d905      	bls.n	2f48 <dir_sdi+0xc0>
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	699a      	ldr	r2, [r3, #24]
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	429a      	cmp	r2, r3
    2f46:	d801      	bhi.n	2f4c <dir_sdi+0xc4>
				return FR_INT_ERR;
    2f48:	2302      	movs	r3, #2
    2f4a:	e02e      	b.n	2faa <dir_sdi+0x122>
			idx -= ic;
    2f4c:	1cbb      	adds	r3, r7, #2
    2f4e:	1cb9      	adds	r1, r7, #2
    2f50:	220a      	movs	r2, #10
    2f52:	18ba      	adds	r2, r7, r2
    2f54:	8809      	ldrh	r1, [r1, #0]
    2f56:	8812      	ldrh	r2, [r2, #0]
    2f58:	1a8a      	subs	r2, r1, r2
    2f5a:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    2f5c:	1cba      	adds	r2, r7, #2
    2f5e:	230a      	movs	r3, #10
    2f60:	18fb      	adds	r3, r7, r3
    2f62:	8812      	ldrh	r2, [r2, #0]
    2f64:	881b      	ldrh	r3, [r3, #0]
    2f66:	429a      	cmp	r2, r3
    2f68:	d2d6      	bcs.n	2f18 <dir_sdi+0x90>
		}
		dj->clust = clst;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	68fa      	ldr	r2, [r7, #12]
    2f6e:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	68fa      	ldr	r2, [r7, #12]
    2f76:	0011      	movs	r1, r2
    2f78:	0018      	movs	r0, r3
    2f7a:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <dir_sdi+0x130>)
    2f7c:	447b      	add	r3, pc
    2f7e:	4798      	blx	r3
    2f80:	0002      	movs	r2, r0
    2f82:	1cbb      	adds	r3, r7, #2
    2f84:	881b      	ldrh	r3, [r3, #0]
    2f86:	091b      	lsrs	r3, r3, #4
    2f88:	b29b      	uxth	r3, r3
    2f8a:	18d2      	adds	r2, r2, r3
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	3330      	adds	r3, #48	; 0x30
    2f96:	001a      	movs	r2, r3
    2f98:	1cbb      	adds	r3, r7, #2
    2f9a:	881b      	ldrh	r3, [r3, #0]
    2f9c:	210f      	movs	r1, #15
    2f9e:	400b      	ands	r3, r1
    2fa0:	015b      	lsls	r3, r3, #5
    2fa2:	18d2      	adds	r2, r2, r3
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    2fa8:	2300      	movs	r3, #0
}
    2faa:	0018      	movs	r0, r3
    2fac:	46bd      	mov	sp, r7
    2fae:	b004      	add	sp, #16
    2fb0:	bd80      	pop	{r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	fffff979 	.word	0xfffff979
    2fb8:	fffff8e9 	.word	0xfffff8e9

00002fbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2fbc:	b590      	push	{r4, r7, lr}
    2fbe:	b085      	sub	sp, #20
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
    2fc4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	88da      	ldrh	r2, [r3, #6]
    2fca:	2308      	movs	r3, #8
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	3201      	adds	r2, #1
    2fd0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2fd2:	2308      	movs	r3, #8
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	881b      	ldrh	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d003      	beq.n	2fe4 <dir_next+0x28>
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	691b      	ldr	r3, [r3, #16]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d101      	bne.n	2fe8 <dir_next+0x2c>
		return FR_NO_FILE;
    2fe4:	2304      	movs	r3, #4
    2fe6:	e0d9      	b.n	319c <dir_next+0x1e0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2fe8:	2308      	movs	r3, #8
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	881b      	ldrh	r3, [r3, #0]
    2fee:	220f      	movs	r2, #15
    2ff0:	4013      	ands	r3, r2
    2ff2:	b29b      	uxth	r3, r3
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d000      	beq.n	2ffa <dir_next+0x3e>
    2ff8:	e0bd      	b.n	3176 <dir_next+0x1ba>
		dj->sect++;					/* Next sector */
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	691b      	ldr	r3, [r3, #16]
    2ffe:	1c5a      	adds	r2, r3, #1
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	68db      	ldr	r3, [r3, #12]
    3008:	2b00      	cmp	r3, #0
    300a:	d10a      	bne.n	3022 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	891b      	ldrh	r3, [r3, #8]
    3012:	2208      	movs	r2, #8
    3014:	18ba      	adds	r2, r7, r2
    3016:	8812      	ldrh	r2, [r2, #0]
    3018:	429a      	cmp	r2, r3
    301a:	d200      	bcs.n	301e <dir_next+0x62>
    301c:	e0ab      	b.n	3176 <dir_next+0x1ba>
				return FR_NO_FILE;
    301e:	2304      	movs	r3, #4
    3020:	e0bc      	b.n	319c <dir_next+0x1e0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    3022:	2308      	movs	r3, #8
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	091b      	lsrs	r3, r3, #4
    302a:	b29b      	uxth	r3, r3
    302c:	001a      	movs	r2, r3
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	789b      	ldrb	r3, [r3, #2]
    3034:	3b01      	subs	r3, #1
    3036:	4013      	ands	r3, r2
    3038:	d000      	beq.n	303c <dir_next+0x80>
    303a:	e09c      	b.n	3176 <dir_next+0x1ba>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	681a      	ldr	r2, [r3, #0]
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	68db      	ldr	r3, [r3, #12]
    3044:	0019      	movs	r1, r3
    3046:	0010      	movs	r0, r2
    3048:	4b56      	ldr	r3, [pc, #344]	; (31a4 <dir_next+0x1e8>)
    304a:	447b      	add	r3, pc
    304c:	4798      	blx	r3
    304e:	0003      	movs	r3, r0
    3050:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	2b01      	cmp	r3, #1
    3056:	d801      	bhi.n	305c <dir_next+0xa0>
    3058:	2302      	movs	r3, #2
    305a:	e09f      	b.n	319c <dir_next+0x1e0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	3301      	adds	r3, #1
    3060:	d101      	bne.n	3066 <dir_next+0xaa>
    3062:	2301      	movs	r3, #1
    3064:	e09a      	b.n	319c <dir_next+0x1e0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	699a      	ldr	r2, [r3, #24]
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	429a      	cmp	r2, r3
    3070:	d900      	bls.n	3074 <dir_next+0xb8>
    3072:	e072      	b.n	315a <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    3074:	683b      	ldr	r3, [r7, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d101      	bne.n	307e <dir_next+0xc2>
    307a:	2304      	movs	r3, #4
    307c:	e08e      	b.n	319c <dir_next+0x1e0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	681a      	ldr	r2, [r3, #0]
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	68db      	ldr	r3, [r3, #12]
    3086:	0019      	movs	r1, r3
    3088:	0010      	movs	r0, r2
    308a:	4b47      	ldr	r3, [pc, #284]	; (31a8 <dir_next+0x1ec>)
    308c:	447b      	add	r3, pc
    308e:	4798      	blx	r3
    3090:	0003      	movs	r3, r0
    3092:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	2b00      	cmp	r3, #0
    3098:	d101      	bne.n	309e <dir_next+0xe2>
    309a:	2307      	movs	r3, #7
    309c:	e07e      	b.n	319c <dir_next+0x1e0>
					if (clst == 1) return FR_INT_ERR;
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	2b01      	cmp	r3, #1
    30a2:	d101      	bne.n	30a8 <dir_next+0xec>
    30a4:	2302      	movs	r3, #2
    30a6:	e079      	b.n	319c <dir_next+0x1e0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	3301      	adds	r3, #1
    30ac:	d101      	bne.n	30b2 <dir_next+0xf6>
    30ae:	2301      	movs	r3, #1
    30b0:	e074      	b.n	319c <dir_next+0x1e0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	2100      	movs	r1, #0
    30b8:	0018      	movs	r0, r3
    30ba:	4b3c      	ldr	r3, [pc, #240]	; (31ac <dir_next+0x1f0>)
    30bc:	447b      	add	r3, pc
    30be:	4798      	blx	r3
    30c0:	1e03      	subs	r3, r0, #0
    30c2:	d001      	beq.n	30c8 <dir_next+0x10c>
    30c4:	2301      	movs	r3, #1
    30c6:	e069      	b.n	319c <dir_next+0x1e0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	3330      	adds	r3, #48	; 0x30
    30ce:	0018      	movs	r0, r3
    30d0:	2380      	movs	r3, #128	; 0x80
    30d2:	009b      	lsls	r3, r3, #2
    30d4:	001a      	movs	r2, r3
    30d6:	2100      	movs	r1, #0
    30d8:	4b35      	ldr	r3, [pc, #212]	; (31b0 <dir_next+0x1f4>)
    30da:	447b      	add	r3, pc
    30dc:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	681c      	ldr	r4, [r3, #0]
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	681b      	ldr	r3, [r3, #0]
    30e6:	68fa      	ldr	r2, [r7, #12]
    30e8:	0011      	movs	r1, r2
    30ea:	0018      	movs	r0, r3
    30ec:	4b31      	ldr	r3, [pc, #196]	; (31b4 <dir_next+0x1f8>)
    30ee:	447b      	add	r3, pc
    30f0:	4798      	blx	r3
    30f2:	0003      	movs	r3, r0
    30f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    30f6:	230b      	movs	r3, #11
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	2200      	movs	r2, #0
    30fc:	701a      	strb	r2, [r3, #0]
    30fe:	e01a      	b.n	3136 <dir_next+0x17a>
						dj->fs->wflag = 1;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	681b      	ldr	r3, [r3, #0]
    3104:	2201      	movs	r2, #1
    3106:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	681b      	ldr	r3, [r3, #0]
    310c:	2100      	movs	r1, #0
    310e:	0018      	movs	r0, r3
    3110:	4b29      	ldr	r3, [pc, #164]	; (31b8 <dir_next+0x1fc>)
    3112:	447b      	add	r3, pc
    3114:	4798      	blx	r3
    3116:	1e03      	subs	r3, r0, #0
    3118:	d001      	beq.n	311e <dir_next+0x162>
    311a:	2301      	movs	r3, #1
    311c:	e03e      	b.n	319c <dir_next+0x1e0>
						dj->fs->winsect++;
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3124:	3201      	adds	r2, #1
    3126:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3128:	230b      	movs	r3, #11
    312a:	18fb      	adds	r3, r7, r3
    312c:	781a      	ldrb	r2, [r3, #0]
    312e:	230b      	movs	r3, #11
    3130:	18fb      	adds	r3, r7, r3
    3132:	3201      	adds	r2, #1
    3134:	701a      	strb	r2, [r3, #0]
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	789b      	ldrb	r3, [r3, #2]
    313c:	220b      	movs	r2, #11
    313e:	18ba      	adds	r2, r7, r2
    3140:	7812      	ldrb	r2, [r2, #0]
    3142:	429a      	cmp	r2, r3
    3144:	d3dc      	bcc.n	3100 <dir_next+0x144>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	687a      	ldr	r2, [r7, #4]
    314c:	6812      	ldr	r2, [r2, #0]
    314e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3150:	220b      	movs	r2, #11
    3152:	18ba      	adds	r2, r7, r2
    3154:	7812      	ldrb	r2, [r2, #0]
    3156:	1a8a      	subs	r2, r1, r2
    3158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	68fa      	ldr	r2, [r7, #12]
    315e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	68fa      	ldr	r2, [r7, #12]
    3166:	0011      	movs	r1, r2
    3168:	0018      	movs	r0, r3
    316a:	4b14      	ldr	r3, [pc, #80]	; (31bc <dir_next+0x200>)
    316c:	447b      	add	r3, pc
    316e:	4798      	blx	r3
    3170:	0002      	movs	r2, r0
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	2208      	movs	r2, #8
    317a:	18ba      	adds	r2, r7, r2
    317c:	8812      	ldrh	r2, [r2, #0]
    317e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	681b      	ldr	r3, [r3, #0]
    3184:	3330      	adds	r3, #48	; 0x30
    3186:	001a      	movs	r2, r3
    3188:	2308      	movs	r3, #8
    318a:	18fb      	adds	r3, r7, r3
    318c:	881b      	ldrh	r3, [r3, #0]
    318e:	210f      	movs	r1, #15
    3190:	400b      	ands	r3, r1
    3192:	015b      	lsls	r3, r3, #5
    3194:	18d2      	adds	r2, r2, r3
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	615a      	str	r2, [r3, #20]

	return FR_OK;
    319a:	2300      	movs	r3, #0
}
    319c:	0018      	movs	r0, r3
    319e:	46bd      	mov	sp, r7
    31a0:	b005      	add	sp, #20
    31a2:	bd90      	pop	{r4, r7, pc}
    31a4:	fffff853 	.word	0xfffff853
    31a8:	fffffcad 	.word	0xfffffcad
    31ac:	fffff525 	.word	0xfffff525
    31b0:	fffff45b 	.word	0xfffff45b
    31b4:	fffff777 	.word	0xfffff777
    31b8:	fffff4cf 	.word	0xfffff4cf
    31bc:	fffff6f9 	.word	0xfffff6f9

000031c0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    31c0:	b590      	push	{r4, r7, lr}
    31c2:	b087      	sub	sp, #28
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    31c8:	2317      	movs	r3, #23
    31ca:	18fc      	adds	r4, r7, r3
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	2100      	movs	r1, #0
    31d0:	0018      	movs	r0, r3
    31d2:	4b2e      	ldr	r3, [pc, #184]	; (328c <dir_find+0xcc>)
    31d4:	447b      	add	r3, pc
    31d6:	4798      	blx	r3
    31d8:	0003      	movs	r3, r0
    31da:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    31dc:	2317      	movs	r3, #23
    31de:	18fb      	adds	r3, r7, r3
    31e0:	781b      	ldrb	r3, [r3, #0]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d003      	beq.n	31ee <dir_find+0x2e>
    31e6:	2317      	movs	r3, #23
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781b      	ldrb	r3, [r3, #0]
    31ec:	e04a      	b.n	3284 <dir_find+0xc4>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	691b      	ldr	r3, [r3, #16]
    31f6:	2117      	movs	r1, #23
    31f8:	187c      	adds	r4, r7, r1
    31fa:	0019      	movs	r1, r3
    31fc:	0010      	movs	r0, r2
    31fe:	4b24      	ldr	r3, [pc, #144]	; (3290 <dir_find+0xd0>)
    3200:	447b      	add	r3, pc
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    3208:	2317      	movs	r3, #23
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	2b00      	cmp	r3, #0
    3210:	d132      	bne.n	3278 <dir_find+0xb8>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	695b      	ldr	r3, [r3, #20]
    3216:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    3218:	230f      	movs	r3, #15
    321a:	18fb      	adds	r3, r7, r3
    321c:	693a      	ldr	r2, [r7, #16]
    321e:	7812      	ldrb	r2, [r2, #0]
    3220:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3222:	230f      	movs	r3, #15
    3224:	18fb      	adds	r3, r7, r3
    3226:	781b      	ldrb	r3, [r3, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d104      	bne.n	3236 <dir_find+0x76>
    322c:	2317      	movs	r3, #23
    322e:	18fb      	adds	r3, r7, r3
    3230:	2204      	movs	r2, #4
    3232:	701a      	strb	r2, [r3, #0]
    3234:	e023      	b.n	327e <dir_find+0xbe>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3236:	693b      	ldr	r3, [r7, #16]
    3238:	330b      	adds	r3, #11
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	001a      	movs	r2, r3
    323e:	2308      	movs	r3, #8
    3240:	4013      	ands	r3, r2
    3242:	d109      	bne.n	3258 <dir_find+0x98>
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	6999      	ldr	r1, [r3, #24]
    3248:	693b      	ldr	r3, [r7, #16]
    324a:	220b      	movs	r2, #11
    324c:	0018      	movs	r0, r3
    324e:	4b11      	ldr	r3, [pc, #68]	; (3294 <dir_find+0xd4>)
    3250:	447b      	add	r3, pc
    3252:	4798      	blx	r3
    3254:	1e03      	subs	r3, r0, #0
    3256:	d011      	beq.n	327c <dir_find+0xbc>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    3258:	2317      	movs	r3, #23
    325a:	18fc      	adds	r4, r7, r3
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	2100      	movs	r1, #0
    3260:	0018      	movs	r0, r3
    3262:	4b0d      	ldr	r3, [pc, #52]	; (3298 <dir_find+0xd8>)
    3264:	447b      	add	r3, pc
    3266:	4798      	blx	r3
    3268:	0003      	movs	r3, r0
    326a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    326c:	2317      	movs	r3, #23
    326e:	18fb      	adds	r3, r7, r3
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d0bb      	beq.n	31ee <dir_find+0x2e>
    3276:	e002      	b.n	327e <dir_find+0xbe>
		if (res != FR_OK) break;
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	e000      	b.n	327e <dir_find+0xbe>
			break;
    327c:	46c0      	nop			; (mov r8, r8)

	return res;
    327e:	2317      	movs	r3, #23
    3280:	18fb      	adds	r3, r7, r3
    3282:	781b      	ldrb	r3, [r3, #0]
}
    3284:	0018      	movs	r0, r3
    3286:	46bd      	mov	sp, r7
    3288:	b007      	add	sp, #28
    328a:	bd90      	pop	{r4, r7, pc}
    328c:	fffffcb1 	.word	0xfffffcb1
    3290:	fffff3e1 	.word	0xfffff3e1
    3294:	fffff315 	.word	0xfffff315
    3298:	fffffd55 	.word	0xfffffd55

0000329c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    329c:	b590      	push	{r4, r7, lr}
    329e:	b087      	sub	sp, #28
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    32a4:	2317      	movs	r3, #23
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	2204      	movs	r2, #4
    32aa:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    32ac:	e043      	b.n	3336 <dir_read+0x9a>
		res = move_window(dj->fs, dj->sect);
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	681a      	ldr	r2, [r3, #0]
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	691b      	ldr	r3, [r3, #16]
    32b6:	2117      	movs	r1, #23
    32b8:	187c      	adds	r4, r7, r1
    32ba:	0019      	movs	r1, r3
    32bc:	0010      	movs	r0, r2
    32be:	4b2a      	ldr	r3, [pc, #168]	; (3368 <dir_read+0xcc>)
    32c0:	447b      	add	r3, pc
    32c2:	4798      	blx	r3
    32c4:	0003      	movs	r3, r0
    32c6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    32c8:	2317      	movs	r3, #23
    32ca:	18fb      	adds	r3, r7, r3
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d136      	bne.n	3340 <dir_read+0xa4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	695b      	ldr	r3, [r3, #20]
    32d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    32d8:	230f      	movs	r3, #15
    32da:	18fb      	adds	r3, r7, r3
    32dc:	693a      	ldr	r2, [r7, #16]
    32de:	7812      	ldrb	r2, [r2, #0]
    32e0:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    32e2:	230f      	movs	r3, #15
    32e4:	18fb      	adds	r3, r7, r3
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d104      	bne.n	32f6 <dir_read+0x5a>
    32ec:	2317      	movs	r3, #23
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	2204      	movs	r2, #4
    32f2:	701a      	strb	r2, [r3, #0]
    32f4:	e029      	b.n	334a <dir_read+0xae>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    32f6:	230f      	movs	r3, #15
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	2be5      	cmp	r3, #229	; 0xe5
    32fe:	d00b      	beq.n	3318 <dir_read+0x7c>
    3300:	230f      	movs	r3, #15
    3302:	18fb      	adds	r3, r7, r3
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	2b2e      	cmp	r3, #46	; 0x2e
    3308:	d006      	beq.n	3318 <dir_read+0x7c>
    330a:	693b      	ldr	r3, [r7, #16]
    330c:	330b      	adds	r3, #11
    330e:	781b      	ldrb	r3, [r3, #0]
    3310:	001a      	movs	r2, r3
    3312:	2308      	movs	r3, #8
    3314:	4013      	ands	r3, r2
    3316:	d015      	beq.n	3344 <dir_read+0xa8>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    3318:	2317      	movs	r3, #23
    331a:	18fc      	adds	r4, r7, r3
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2100      	movs	r1, #0
    3320:	0018      	movs	r0, r3
    3322:	4b12      	ldr	r3, [pc, #72]	; (336c <dir_read+0xd0>)
    3324:	447b      	add	r3, pc
    3326:	4798      	blx	r3
    3328:	0003      	movs	r3, r0
    332a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    332c:	2317      	movs	r3, #23
    332e:	18fb      	adds	r3, r7, r3
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b00      	cmp	r3, #0
    3334:	d108      	bne.n	3348 <dir_read+0xac>
	while (dj->sect) {
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	691b      	ldr	r3, [r3, #16]
    333a:	2b00      	cmp	r3, #0
    333c:	d1b7      	bne.n	32ae <dir_read+0x12>
    333e:	e004      	b.n	334a <dir_read+0xae>
		if (res != FR_OK) break;
    3340:	46c0      	nop			; (mov r8, r8)
    3342:	e002      	b.n	334a <dir_read+0xae>
			break;
    3344:	46c0      	nop			; (mov r8, r8)
    3346:	e000      	b.n	334a <dir_read+0xae>
		if (res != FR_OK) break;
    3348:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    334a:	2317      	movs	r3, #23
    334c:	18fb      	adds	r3, r7, r3
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d002      	beq.n	335a <dir_read+0xbe>
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	611a      	str	r2, [r3, #16]

	return res;
    335a:	2317      	movs	r3, #23
    335c:	18fb      	adds	r3, r7, r3
    335e:	781b      	ldrb	r3, [r3, #0]
}
    3360:	0018      	movs	r0, r3
    3362:	46bd      	mov	sp, r7
    3364:	b007      	add	sp, #28
    3366:	bd90      	pop	{r4, r7, pc}
    3368:	fffff321 	.word	0xfffff321
    336c:	fffffc95 	.word	0xfffffc95

00003370 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    3370:	b590      	push	{r4, r7, lr}
    3372:	b085      	sub	sp, #20
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    3378:	230f      	movs	r3, #15
    337a:	18fc      	adds	r4, r7, r3
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	2100      	movs	r1, #0
    3380:	0018      	movs	r0, r3
    3382:	4b38      	ldr	r3, [pc, #224]	; (3464 <dir_register+0xf4>)
    3384:	447b      	add	r3, pc
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    338c:	230f      	movs	r3, #15
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d132      	bne.n	33fc <dir_register+0x8c>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	681a      	ldr	r2, [r3, #0]
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	691b      	ldr	r3, [r3, #16]
    339e:	210f      	movs	r1, #15
    33a0:	187c      	adds	r4, r7, r1
    33a2:	0019      	movs	r1, r3
    33a4:	0010      	movs	r0, r2
    33a6:	4b30      	ldr	r3, [pc, #192]	; (3468 <dir_register+0xf8>)
    33a8:	447b      	add	r3, pc
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    33b0:	230f      	movs	r3, #15
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	781b      	ldrb	r3, [r3, #0]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d11f      	bne.n	33fa <dir_register+0x8a>
			c = *dj->dir;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	695a      	ldr	r2, [r3, #20]
    33be:	230e      	movs	r3, #14
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	7812      	ldrb	r2, [r2, #0]
    33c4:	701a      	strb	r2, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    33c6:	230e      	movs	r3, #14
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	781b      	ldrb	r3, [r3, #0]
    33cc:	2be5      	cmp	r3, #229	; 0xe5
    33ce:	d015      	beq.n	33fc <dir_register+0x8c>
    33d0:	230e      	movs	r3, #14
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d010      	beq.n	33fc <dir_register+0x8c>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    33da:	230f      	movs	r3, #15
    33dc:	18fc      	adds	r4, r7, r3
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	2101      	movs	r1, #1
    33e2:	0018      	movs	r0, r3
    33e4:	4b21      	ldr	r3, [pc, #132]	; (346c <dir_register+0xfc>)
    33e6:	447b      	add	r3, pc
    33e8:	4798      	blx	r3
    33ea:	0003      	movs	r3, r0
    33ec:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    33ee:	230f      	movs	r3, #15
    33f0:	18fb      	adds	r3, r7, r3
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d0ce      	beq.n	3396 <dir_register+0x26>
    33f8:	e000      	b.n	33fc <dir_register+0x8c>
			if (res != FR_OK) break;
    33fa:	46c0      	nop			; (mov r8, r8)
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    33fc:	230f      	movs	r3, #15
    33fe:	18fb      	adds	r3, r7, r3
    3400:	781b      	ldrb	r3, [r3, #0]
    3402:	2b00      	cmp	r3, #0
    3404:	d127      	bne.n	3456 <dir_register+0xe6>
		res = move_window(dj->fs, dj->sect);
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	681a      	ldr	r2, [r3, #0]
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	691b      	ldr	r3, [r3, #16]
    340e:	210f      	movs	r1, #15
    3410:	187c      	adds	r4, r7, r1
    3412:	0019      	movs	r1, r3
    3414:	0010      	movs	r0, r2
    3416:	4b16      	ldr	r3, [pc, #88]	; (3470 <dir_register+0x100>)
    3418:	447b      	add	r3, pc
    341a:	4798      	blx	r3
    341c:	0003      	movs	r3, r0
    341e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    3420:	230f      	movs	r3, #15
    3422:	18fb      	adds	r3, r7, r3
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	2b00      	cmp	r3, #0
    3428:	d115      	bne.n	3456 <dir_register+0xe6>
			dir = dj->dir;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	695b      	ldr	r3, [r3, #20]
    342e:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    3430:	68bb      	ldr	r3, [r7, #8]
    3432:	2220      	movs	r2, #32
    3434:	2100      	movs	r1, #0
    3436:	0018      	movs	r0, r3
    3438:	4b0e      	ldr	r3, [pc, #56]	; (3474 <dir_register+0x104>)
    343a:	447b      	add	r3, pc
    343c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	6999      	ldr	r1, [r3, #24]
    3442:	68bb      	ldr	r3, [r7, #8]
    3444:	220b      	movs	r2, #11
    3446:	0018      	movs	r0, r3
    3448:	4b0b      	ldr	r3, [pc, #44]	; (3478 <dir_register+0x108>)
    344a:	447b      	add	r3, pc
    344c:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	2201      	movs	r2, #1
    3454:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    3456:	230f      	movs	r3, #15
    3458:	18fb      	adds	r3, r7, r3
    345a:	781b      	ldrb	r3, [r3, #0]
}
    345c:	0018      	movs	r0, r3
    345e:	46bd      	mov	sp, r7
    3460:	b005      	add	sp, #20
    3462:	bd90      	pop	{r4, r7, pc}
    3464:	fffffb01 	.word	0xfffffb01
    3468:	fffff239 	.word	0xfffff239
    346c:	fffffbd3 	.word	0xfffffbd3
    3470:	fffff1c9 	.word	0xfffff1c9
    3474:	fffff0fb 	.word	0xfffff0fb
    3478:	fffff0b3 	.word	0xfffff0b3

0000347c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    347c:	b590      	push	{r4, r7, lr}
    347e:	b085      	sub	sp, #20
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	88da      	ldrh	r2, [r3, #6]
    3488:	230f      	movs	r3, #15
    348a:	18fc      	adds	r4, r7, r3
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	0011      	movs	r1, r2
    3490:	0018      	movs	r0, r3
    3492:	4b15      	ldr	r3, [pc, #84]	; (34e8 <dir_remove+0x6c>)
    3494:	447b      	add	r3, pc
    3496:	4798      	blx	r3
    3498:	0003      	movs	r3, r0
    349a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    349c:	230f      	movs	r3, #15
    349e:	18fb      	adds	r3, r7, r3
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d119      	bne.n	34da <dir_remove+0x5e>
		res = move_window(dj->fs, dj->sect);
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	681a      	ldr	r2, [r3, #0]
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	691b      	ldr	r3, [r3, #16]
    34ae:	210f      	movs	r1, #15
    34b0:	187c      	adds	r4, r7, r1
    34b2:	0019      	movs	r1, r3
    34b4:	0010      	movs	r0, r2
    34b6:	4b0d      	ldr	r3, [pc, #52]	; (34ec <dir_remove+0x70>)
    34b8:	447b      	add	r3, pc
    34ba:	4798      	blx	r3
    34bc:	0003      	movs	r3, r0
    34be:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    34c0:	230f      	movs	r3, #15
    34c2:	18fb      	adds	r3, r7, r3
    34c4:	781b      	ldrb	r3, [r3, #0]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d107      	bne.n	34da <dir_remove+0x5e>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	695b      	ldr	r3, [r3, #20]
    34ce:	22e5      	movs	r2, #229	; 0xe5
    34d0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	2201      	movs	r2, #1
    34d8:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
    34da:	230f      	movs	r3, #15
    34dc:	18fb      	adds	r3, r7, r3
    34de:	781b      	ldrb	r3, [r3, #0]
}
    34e0:	0018      	movs	r0, r3
    34e2:	46bd      	mov	sp, r7
    34e4:	b005      	add	sp, #20
    34e6:	bd90      	pop	{r4, r7, pc}
    34e8:	fffff9f1 	.word	0xfffff9f1
    34ec:	fffff129 	.word	0xfffff129

000034f0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b088      	sub	sp, #32
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
    34f8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    34fa:	683b      	ldr	r3, [r7, #0]
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	60fb      	str	r3, [r7, #12]
    3500:	e002      	b.n	3508 <create_name+0x18>
    3502:	68fb      	ldr	r3, [r7, #12]
    3504:	3301      	adds	r3, #1
    3506:	60fb      	str	r3, [r7, #12]
    3508:	68fb      	ldr	r3, [r7, #12]
    350a:	781b      	ldrb	r3, [r3, #0]
    350c:	2b2f      	cmp	r3, #47	; 0x2f
    350e:	d0f8      	beq.n	3502 <create_name+0x12>
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	781b      	ldrb	r3, [r3, #0]
    3514:	2b5c      	cmp	r3, #92	; 0x5c
    3516:	d0f4      	beq.n	3502 <create_name+0x12>
	sfn = dj->fn;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	699b      	ldr	r3, [r3, #24]
    351c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
    351e:	68bb      	ldr	r3, [r7, #8]
    3520:	220b      	movs	r2, #11
    3522:	2120      	movs	r1, #32
    3524:	0018      	movs	r0, r3
    3526:	4b75      	ldr	r3, [pc, #468]	; (36fc <create_name+0x20c>)
    3528:	447b      	add	r3, pc
    352a:	4798      	blx	r3
	si = i = b = 0; ni = 8;
    352c:	231f      	movs	r3, #31
    352e:	18fb      	adds	r3, r7, r3
    3530:	2200      	movs	r2, #0
    3532:	701a      	strb	r2, [r3, #0]
    3534:	2300      	movs	r3, #0
    3536:	613b      	str	r3, [r7, #16]
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	617b      	str	r3, [r7, #20]
    353c:	2308      	movs	r3, #8
    353e:	61bb      	str	r3, [r7, #24]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3540:	697b      	ldr	r3, [r7, #20]
    3542:	1c5a      	adds	r2, r3, #1
    3544:	617a      	str	r2, [r7, #20]
    3546:	68fa      	ldr	r2, [r7, #12]
    3548:	18d2      	adds	r2, r2, r3
    354a:	231e      	movs	r3, #30
    354c:	18fb      	adds	r3, r7, r3
    354e:	7812      	ldrb	r2, [r2, #0]
    3550:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3552:	231e      	movs	r3, #30
    3554:	18fb      	adds	r3, r7, r3
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	2b20      	cmp	r3, #32
    355a:	d800      	bhi.n	355e <create_name+0x6e>
    355c:	e07e      	b.n	365c <create_name+0x16c>
    355e:	231e      	movs	r3, #30
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b2f      	cmp	r3, #47	; 0x2f
    3566:	d100      	bne.n	356a <create_name+0x7a>
    3568:	e078      	b.n	365c <create_name+0x16c>
    356a:	231e      	movs	r3, #30
    356c:	18fb      	adds	r3, r7, r3
    356e:	781b      	ldrb	r3, [r3, #0]
    3570:	2b5c      	cmp	r3, #92	; 0x5c
    3572:	d100      	bne.n	3576 <create_name+0x86>
    3574:	e072      	b.n	365c <create_name+0x16c>
		if (c == '.' || i >= ni) {
    3576:	231e      	movs	r3, #30
    3578:	18fb      	adds	r3, r7, r3
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b2e      	cmp	r3, #46	; 0x2e
    357e:	d003      	beq.n	3588 <create_name+0x98>
    3580:	693a      	ldr	r2, [r7, #16]
    3582:	69bb      	ldr	r3, [r7, #24]
    3584:	429a      	cmp	r2, r3
    3586:	d315      	bcc.n	35b4 <create_name+0xc4>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    3588:	69bb      	ldr	r3, [r7, #24]
    358a:	2b08      	cmp	r3, #8
    358c:	d104      	bne.n	3598 <create_name+0xa8>
    358e:	231e      	movs	r3, #30
    3590:	18fb      	adds	r3, r7, r3
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b2e      	cmp	r3, #46	; 0x2e
    3596:	d001      	beq.n	359c <create_name+0xac>
    3598:	2306      	movs	r3, #6
    359a:	e0aa      	b.n	36f2 <create_name+0x202>
			i = 8; ni = 11;
    359c:	2308      	movs	r3, #8
    359e:	613b      	str	r3, [r7, #16]
    35a0:	230b      	movs	r3, #11
    35a2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
    35a4:	231f      	movs	r3, #31
    35a6:	18fb      	adds	r3, r7, r3
    35a8:	221f      	movs	r2, #31
    35aa:	18ba      	adds	r2, r7, r2
    35ac:	7812      	ldrb	r2, [r2, #0]
    35ae:	0092      	lsls	r2, r2, #2
    35b0:	701a      	strb	r2, [r3, #0]
    35b2:	e052      	b.n	365a <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended char? */
    35b4:	231e      	movs	r3, #30
    35b6:	18fb      	adds	r3, r7, r3
    35b8:	781b      	ldrb	r3, [r3, #0]
    35ba:	b25b      	sxtb	r3, r3
    35bc:	2b00      	cmp	r3, #0
    35be:	da09      	bge.n	35d4 <create_name+0xe4>
			b |= 3;						/* Eliminate NT flag */
    35c0:	231f      	movs	r3, #31
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	221f      	movs	r2, #31
    35c6:	18ba      	adds	r2, r7, r2
    35c8:	7812      	ldrb	r2, [r2, #0]
    35ca:	2103      	movs	r1, #3
    35cc:	430a      	orrs	r2, r1
    35ce:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
#else
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
    35d0:	2306      	movs	r3, #6
    35d2:	e08e      	b.n	36f2 <create_name+0x202>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    35d4:	231e      	movs	r3, #30
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	4a49      	ldr	r2, [pc, #292]	; (3700 <create_name+0x210>)
    35dc:	447a      	add	r2, pc
    35de:	0019      	movs	r1, r3
    35e0:	0010      	movs	r0, r2
    35e2:	4b48      	ldr	r3, [pc, #288]	; (3704 <create_name+0x214>)
    35e4:	447b      	add	r3, pc
    35e6:	4798      	blx	r3
    35e8:	1e03      	subs	r3, r0, #0
    35ea:	d001      	beq.n	35f0 <create_name+0x100>
				return FR_INVALID_NAME;
    35ec:	2306      	movs	r3, #6
    35ee:	e080      	b.n	36f2 <create_name+0x202>
			if (IsUpper(c)) {			/* ASCII large capital? */
    35f0:	231e      	movs	r3, #30
    35f2:	18fb      	adds	r3, r7, r3
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b40      	cmp	r3, #64	; 0x40
    35f8:	d90d      	bls.n	3616 <create_name+0x126>
    35fa:	231e      	movs	r3, #30
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	2b5a      	cmp	r3, #90	; 0x5a
    3602:	d808      	bhi.n	3616 <create_name+0x126>
				b |= 2;
    3604:	231f      	movs	r3, #31
    3606:	18fb      	adds	r3, r7, r3
    3608:	221f      	movs	r2, #31
    360a:	18ba      	adds	r2, r7, r2
    360c:	7812      	ldrb	r2, [r2, #0]
    360e:	2102      	movs	r1, #2
    3610:	430a      	orrs	r2, r1
    3612:	701a      	strb	r2, [r3, #0]
    3614:	e018      	b.n	3648 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3616:	231e      	movs	r3, #30
    3618:	18fb      	adds	r3, r7, r3
    361a:	781b      	ldrb	r3, [r3, #0]
    361c:	2b60      	cmp	r3, #96	; 0x60
    361e:	d913      	bls.n	3648 <create_name+0x158>
    3620:	231e      	movs	r3, #30
    3622:	18fb      	adds	r3, r7, r3
    3624:	781b      	ldrb	r3, [r3, #0]
    3626:	2b7a      	cmp	r3, #122	; 0x7a
    3628:	d80e      	bhi.n	3648 <create_name+0x158>
					b |= 1; c -= 0x20;
    362a:	231f      	movs	r3, #31
    362c:	18fb      	adds	r3, r7, r3
    362e:	221f      	movs	r2, #31
    3630:	18ba      	adds	r2, r7, r2
    3632:	7812      	ldrb	r2, [r2, #0]
    3634:	2101      	movs	r1, #1
    3636:	430a      	orrs	r2, r1
    3638:	701a      	strb	r2, [r3, #0]
    363a:	231e      	movs	r3, #30
    363c:	18fb      	adds	r3, r7, r3
    363e:	221e      	movs	r2, #30
    3640:	18ba      	adds	r2, r7, r2
    3642:	7812      	ldrb	r2, [r2, #0]
    3644:	3a20      	subs	r2, #32
    3646:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
    3648:	693b      	ldr	r3, [r7, #16]
    364a:	1c5a      	adds	r2, r3, #1
    364c:	613a      	str	r2, [r7, #16]
    364e:	68ba      	ldr	r2, [r7, #8]
    3650:	18d3      	adds	r3, r2, r3
    3652:	221e      	movs	r2, #30
    3654:	18ba      	adds	r2, r7, r2
    3656:	7812      	ldrb	r2, [r2, #0]
    3658:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
    365a:	e771      	b.n	3540 <create_name+0x50>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    365c:	68fa      	ldr	r2, [r7, #12]
    365e:	697b      	ldr	r3, [r7, #20]
    3660:	18d2      	adds	r2, r2, r3
    3662:	683b      	ldr	r3, [r7, #0]
    3664:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3666:	231e      	movs	r3, #30
    3668:	18fb      	adds	r3, r7, r3
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	2b20      	cmp	r3, #32
    366e:	d801      	bhi.n	3674 <create_name+0x184>
    3670:	2204      	movs	r2, #4
    3672:	e000      	b.n	3676 <create_name+0x186>
    3674:	2200      	movs	r2, #0
    3676:	231e      	movs	r3, #30
    3678:	18fb      	adds	r3, r7, r3
    367a:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    367c:	693b      	ldr	r3, [r7, #16]
    367e:	2b00      	cmp	r3, #0
    3680:	d101      	bne.n	3686 <create_name+0x196>
    3682:	2306      	movs	r3, #6
    3684:	e035      	b.n	36f2 <create_name+0x202>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    3686:	68bb      	ldr	r3, [r7, #8]
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	2be5      	cmp	r3, #229	; 0xe5
    368c:	d102      	bne.n	3694 <create_name+0x1a4>
    368e:	68bb      	ldr	r3, [r7, #8]
    3690:	2205      	movs	r2, #5
    3692:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    3694:	69bb      	ldr	r3, [r7, #24]
    3696:	2b08      	cmp	r3, #8
    3698:	d106      	bne.n	36a8 <create_name+0x1b8>
    369a:	231f      	movs	r3, #31
    369c:	18fb      	adds	r3, r7, r3
    369e:	221f      	movs	r2, #31
    36a0:	18ba      	adds	r2, r7, r2
    36a2:	7812      	ldrb	r2, [r2, #0]
    36a4:	0092      	lsls	r2, r2, #2
    36a6:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    36a8:	231f      	movs	r3, #31
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	781b      	ldrb	r3, [r3, #0]
    36ae:	2203      	movs	r2, #3
    36b0:	4013      	ands	r3, r2
    36b2:	2b01      	cmp	r3, #1
    36b4:	d107      	bne.n	36c6 <create_name+0x1d6>
    36b6:	231e      	movs	r3, #30
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	221e      	movs	r2, #30
    36bc:	18ba      	adds	r2, r7, r2
    36be:	7812      	ldrb	r2, [r2, #0]
    36c0:	2110      	movs	r1, #16
    36c2:	430a      	orrs	r2, r1
    36c4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    36c6:	231f      	movs	r3, #31
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	220c      	movs	r2, #12
    36ce:	4013      	ands	r3, r2
    36d0:	2b04      	cmp	r3, #4
    36d2:	d107      	bne.n	36e4 <create_name+0x1f4>
    36d4:	231e      	movs	r3, #30
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	221e      	movs	r2, #30
    36da:	18ba      	adds	r2, r7, r2
    36dc:	7812      	ldrb	r2, [r2, #0]
    36de:	2108      	movs	r1, #8
    36e0:	430a      	orrs	r2, r1
    36e2:	701a      	strb	r2, [r3, #0]

	sfn[NS] = c;		/* Store NT flag, File name is created */
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	330b      	adds	r3, #11
    36e8:	221e      	movs	r2, #30
    36ea:	18ba      	adds	r2, r7, r2
    36ec:	7812      	ldrb	r2, [r2, #0]
    36ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    36f0:	2300      	movs	r3, #0
#endif
}
    36f2:	0018      	movs	r0, r3
    36f4:	46bd      	mov	sp, r7
    36f6:	b008      	add	sp, #32
    36f8:	bd80      	pop	{r7, pc}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	fffff00d 	.word	0xfffff00d
    3700:	0000e534 	.word	0x0000e534
    3704:	ffffefcb 	.word	0xffffefcb

00003708 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    3708:	b580      	push	{r7, lr}
    370a:	b088      	sub	sp, #32
    370c:	af00      	add	r7, sp, #0
    370e:	6078      	str	r0, [r7, #4]
    3710:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    3712:	683b      	ldr	r3, [r7, #0]
    3714:	3309      	adds	r3, #9
    3716:	61bb      	str	r3, [r7, #24]
	if (dj->sect) {
    3718:	687b      	ldr	r3, [r7, #4]
    371a:	691b      	ldr	r3, [r3, #16]
    371c:	2b00      	cmp	r3, #0
    371e:	d100      	bne.n	3722 <get_fileinfo+0x1a>
    3720:	e08a      	b.n	3838 <get_fileinfo+0x130>
		dir = dj->dir;
    3722:	687b      	ldr	r3, [r7, #4]
    3724:	695b      	ldr	r3, [r3, #20]
    3726:	613b      	str	r3, [r7, #16]
		nt = dir[DIR_NTres];		/* NT flag */
    3728:	230f      	movs	r3, #15
    372a:	18fb      	adds	r3, r7, r3
    372c:	693a      	ldr	r2, [r7, #16]
    372e:	7b12      	ldrb	r2, [r2, #12]
    3730:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    3732:	2300      	movs	r3, #0
    3734:	61fb      	str	r3, [r7, #28]
    3736:	e01e      	b.n	3776 <get_fileinfo+0x6e>
			c = dir[i];
    3738:	693a      	ldr	r2, [r7, #16]
    373a:	69fb      	ldr	r3, [r7, #28]
    373c:	18d2      	adds	r2, r2, r3
    373e:	2317      	movs	r3, #23
    3740:	18fb      	adds	r3, r7, r3
    3742:	7812      	ldrb	r2, [r2, #0]
    3744:	701a      	strb	r2, [r3, #0]
			if (c == ' ') break;
    3746:	2317      	movs	r3, #23
    3748:	18fb      	adds	r3, r7, r3
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b20      	cmp	r3, #32
    374e:	d016      	beq.n	377e <get_fileinfo+0x76>
			if (c == NDDE) c = (TCHAR)DDE;
    3750:	2317      	movs	r3, #23
    3752:	18fb      	adds	r3, r7, r3
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b05      	cmp	r3, #5
    3758:	d103      	bne.n	3762 <get_fileinfo+0x5a>
    375a:	2317      	movs	r3, #23
    375c:	18fb      	adds	r3, r7, r3
    375e:	22e5      	movs	r2, #229	; 0xe5
    3760:	701a      	strb	r2, [r3, #0]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    3762:	69bb      	ldr	r3, [r7, #24]
    3764:	1c5a      	adds	r2, r3, #1
    3766:	61ba      	str	r2, [r7, #24]
    3768:	2217      	movs	r2, #23
    376a:	18ba      	adds	r2, r7, r2
    376c:	7812      	ldrb	r2, [r2, #0]
    376e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    3770:	69fb      	ldr	r3, [r7, #28]
    3772:	3301      	adds	r3, #1
    3774:	61fb      	str	r3, [r7, #28]
    3776:	69fb      	ldr	r3, [r7, #28]
    3778:	2b07      	cmp	r3, #7
    377a:	d9dd      	bls.n	3738 <get_fileinfo+0x30>
    377c:	e000      	b.n	3780 <get_fileinfo+0x78>
			if (c == ' ') break;
    377e:	46c0      	nop			; (mov r8, r8)
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    3780:	693b      	ldr	r3, [r7, #16]
    3782:	3308      	adds	r3, #8
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	2b20      	cmp	r3, #32
    3788:	d022      	beq.n	37d0 <get_fileinfo+0xc8>
			*p++ = '.';
    378a:	69bb      	ldr	r3, [r7, #24]
    378c:	1c5a      	adds	r2, r3, #1
    378e:	61ba      	str	r2, [r7, #24]
    3790:	222e      	movs	r2, #46	; 0x2e
    3792:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    3794:	2308      	movs	r3, #8
    3796:	61fb      	str	r3, [r7, #28]
    3798:	e015      	b.n	37c6 <get_fileinfo+0xbe>
				c = dir[i];
    379a:	693a      	ldr	r2, [r7, #16]
    379c:	69fb      	ldr	r3, [r7, #28]
    379e:	18d2      	adds	r2, r2, r3
    37a0:	2317      	movs	r3, #23
    37a2:	18fb      	adds	r3, r7, r3
    37a4:	7812      	ldrb	r2, [r2, #0]
    37a6:	701a      	strb	r2, [r3, #0]
				if (c == ' ') break;
    37a8:	2317      	movs	r3, #23
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b20      	cmp	r3, #32
    37b0:	d00d      	beq.n	37ce <get_fileinfo+0xc6>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    37b2:	69bb      	ldr	r3, [r7, #24]
    37b4:	1c5a      	adds	r2, r3, #1
    37b6:	61ba      	str	r2, [r7, #24]
    37b8:	2217      	movs	r2, #23
    37ba:	18ba      	adds	r2, r7, r2
    37bc:	7812      	ldrb	r2, [r2, #0]
    37be:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    37c0:	69fb      	ldr	r3, [r7, #28]
    37c2:	3301      	adds	r3, #1
    37c4:	61fb      	str	r3, [r7, #28]
    37c6:	69fb      	ldr	r3, [r7, #28]
    37c8:	2b0a      	cmp	r3, #10
    37ca:	d9e6      	bls.n	379a <get_fileinfo+0x92>
    37cc:	e000      	b.n	37d0 <get_fileinfo+0xc8>
				if (c == ' ') break;
    37ce:	46c0      	nop			; (mov r8, r8)
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    37d0:	693b      	ldr	r3, [r7, #16]
    37d2:	7ada      	ldrb	r2, [r3, #11]
    37d4:	683b      	ldr	r3, [r7, #0]
    37d6:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    37d8:	693b      	ldr	r3, [r7, #16]
    37da:	331f      	adds	r3, #31
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	061a      	lsls	r2, r3, #24
    37e0:	693b      	ldr	r3, [r7, #16]
    37e2:	331e      	adds	r3, #30
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	041b      	lsls	r3, r3, #16
    37e8:	4313      	orrs	r3, r2
    37ea:	693a      	ldr	r2, [r7, #16]
    37ec:	321d      	adds	r2, #29
    37ee:	7812      	ldrb	r2, [r2, #0]
    37f0:	0212      	lsls	r2, r2, #8
    37f2:	4313      	orrs	r3, r2
    37f4:	693a      	ldr	r2, [r7, #16]
    37f6:	321c      	adds	r2, #28
    37f8:	7812      	ldrb	r2, [r2, #0]
    37fa:	431a      	orrs	r2, r3
    37fc:	683b      	ldr	r3, [r7, #0]
    37fe:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    3800:	693b      	ldr	r3, [r7, #16]
    3802:	3319      	adds	r3, #25
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	021b      	lsls	r3, r3, #8
    3808:	b21a      	sxth	r2, r3
    380a:	693b      	ldr	r3, [r7, #16]
    380c:	3318      	adds	r3, #24
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	b21b      	sxth	r3, r3
    3812:	4313      	orrs	r3, r2
    3814:	b21b      	sxth	r3, r3
    3816:	b29a      	uxth	r2, r3
    3818:	683b      	ldr	r3, [r7, #0]
    381a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    381c:	693b      	ldr	r3, [r7, #16]
    381e:	3317      	adds	r3, #23
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	021b      	lsls	r3, r3, #8
    3824:	b21a      	sxth	r2, r3
    3826:	693b      	ldr	r3, [r7, #16]
    3828:	3316      	adds	r3, #22
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	b21b      	sxth	r3, r3
    382e:	4313      	orrs	r3, r2
    3830:	b21b      	sxth	r3, r3
    3832:	b29a      	uxth	r2, r3
    3834:	683b      	ldr	r3, [r7, #0]
    3836:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    3838:	69bb      	ldr	r3, [r7, #24]
    383a:	2200      	movs	r2, #0
    383c:	701a      	strb	r2, [r3, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	46bd      	mov	sp, r7
    3842:	b008      	add	sp, #32
    3844:	bd80      	pop	{r7, pc}
	...

00003848 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    3848:	b590      	push	{r4, r7, lr}
    384a:	b085      	sub	sp, #20
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
    3850:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    3852:	683b      	ldr	r3, [r7, #0]
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	2b2f      	cmp	r3, #47	; 0x2f
    3858:	d003      	beq.n	3862 <follow_path+0x1a>
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	2b5c      	cmp	r3, #92	; 0x5c
    3860:	d102      	bne.n	3868 <follow_path+0x20>
		path++;
    3862:	683b      	ldr	r3, [r7, #0]
    3864:	3301      	adds	r3, #1
    3866:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	2200      	movs	r2, #0
    386c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b1f      	cmp	r3, #31
    3874:	d80d      	bhi.n	3892 <follow_path+0x4a>
		res = dir_sdi(dj, 0);
    3876:	230f      	movs	r3, #15
    3878:	18fc      	adds	r4, r7, r3
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	2100      	movs	r1, #0
    387e:	0018      	movs	r0, r3
    3880:	4b3e      	ldr	r3, [pc, #248]	; (397c <follow_path+0x134>)
    3882:	447b      	add	r3, pc
    3884:	4798      	blx	r3
    3886:	0003      	movs	r3, r0
    3888:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	2200      	movs	r2, #0
    388e:	615a      	str	r2, [r3, #20]
    3890:	e06c      	b.n	396c <follow_path+0x124>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    3892:	230f      	movs	r3, #15
    3894:	18fc      	adds	r4, r7, r3
    3896:	003a      	movs	r2, r7
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	0011      	movs	r1, r2
    389c:	0018      	movs	r0, r3
    389e:	4b38      	ldr	r3, [pc, #224]	; (3980 <follow_path+0x138>)
    38a0:	447b      	add	r3, pc
    38a2:	4798      	blx	r3
    38a4:	0003      	movs	r3, r0
    38a6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    38a8:	230f      	movs	r3, #15
    38aa:	18fb      	adds	r3, r7, r3
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d155      	bne.n	395e <follow_path+0x116>
			res = dir_find(dj);				/* Find it */
    38b2:	230f      	movs	r3, #15
    38b4:	18fc      	adds	r4, r7, r3
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	0018      	movs	r0, r3
    38ba:	4b32      	ldr	r3, [pc, #200]	; (3984 <follow_path+0x13c>)
    38bc:	447b      	add	r3, pc
    38be:	4798      	blx	r3
    38c0:	0003      	movs	r3, r0
    38c2:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	699a      	ldr	r2, [r3, #24]
    38c8:	230e      	movs	r3, #14
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	7ad2      	ldrb	r2, [r2, #11]
    38ce:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    38d0:	230f      	movs	r3, #15
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d00f      	beq.n	38fa <follow_path+0xb2>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    38da:	230f      	movs	r3, #15
    38dc:	18fb      	adds	r3, r7, r3
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	2b04      	cmp	r3, #4
    38e2:	d13e      	bne.n	3962 <follow_path+0x11a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    38e4:	230e      	movs	r3, #14
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	781b      	ldrb	r3, [r3, #0]
    38ea:	2204      	movs	r2, #4
    38ec:	4013      	ands	r3, r2
    38ee:	d13a      	bne.n	3966 <follow_path+0x11e>
    38f0:	230f      	movs	r3, #15
    38f2:	18fb      	adds	r3, r7, r3
    38f4:	2205      	movs	r2, #5
    38f6:	701a      	strb	r2, [r3, #0]
				}
				break;
    38f8:	e035      	b.n	3966 <follow_path+0x11e>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    38fa:	230e      	movs	r3, #14
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	781b      	ldrb	r3, [r3, #0]
    3900:	2204      	movs	r2, #4
    3902:	4013      	ands	r3, r2
    3904:	d131      	bne.n	396a <follow_path+0x122>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	695b      	ldr	r3, [r3, #20]
    390a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    390c:	68bb      	ldr	r3, [r7, #8]
    390e:	330b      	adds	r3, #11
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	001a      	movs	r2, r3
    3914:	2310      	movs	r3, #16
    3916:	4013      	ands	r3, r2
    3918:	d104      	bne.n	3924 <follow_path+0xdc>
				res = FR_NO_PATH; break;
    391a:	230f      	movs	r3, #15
    391c:	18fb      	adds	r3, r7, r3
    391e:	2205      	movs	r2, #5
    3920:	701a      	strb	r2, [r3, #0]
    3922:	e023      	b.n	396c <follow_path+0x124>
			}
			dj->sclust = LD_CLUST(dir);
    3924:	68bb      	ldr	r3, [r7, #8]
    3926:	3315      	adds	r3, #21
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	021b      	lsls	r3, r3, #8
    392c:	b21a      	sxth	r2, r3
    392e:	68bb      	ldr	r3, [r7, #8]
    3930:	3314      	adds	r3, #20
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	b21b      	sxth	r3, r3
    3936:	4313      	orrs	r3, r2
    3938:	b21b      	sxth	r3, r3
    393a:	b29b      	uxth	r3, r3
    393c:	041b      	lsls	r3, r3, #16
    393e:	68ba      	ldr	r2, [r7, #8]
    3940:	321b      	adds	r2, #27
    3942:	7812      	ldrb	r2, [r2, #0]
    3944:	0212      	lsls	r2, r2, #8
    3946:	b211      	sxth	r1, r2
    3948:	68ba      	ldr	r2, [r7, #8]
    394a:	321a      	adds	r2, #26
    394c:	7812      	ldrb	r2, [r2, #0]
    394e:	b212      	sxth	r2, r2
    3950:	430a      	orrs	r2, r1
    3952:	b212      	sxth	r2, r2
    3954:	b292      	uxth	r2, r2
    3956:	431a      	orrs	r2, r3
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    395c:	e799      	b.n	3892 <follow_path+0x4a>
			if (res != FR_OK) break;
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	e004      	b.n	396c <follow_path+0x124>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	e002      	b.n	396c <follow_path+0x124>
				break;
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	e000      	b.n	396c <follow_path+0x124>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    396a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    396c:	230f      	movs	r3, #15
    396e:	18fb      	adds	r3, r7, r3
    3970:	781b      	ldrb	r3, [r3, #0]
}
    3972:	0018      	movs	r0, r3
    3974:	46bd      	mov	sp, r7
    3976:	b005      	add	sp, #20
    3978:	bd90      	pop	{r4, r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	fffff603 	.word	0xfffff603
    3980:	fffffc4d 	.word	0xfffffc4d
    3984:	fffff901 	.word	0xfffff901

00003988 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3988:	b5b0      	push	{r4, r5, r7, lr}
    398a:	b082      	sub	sp, #8
    398c:	af00      	add	r7, sp, #0
    398e:	6078      	str	r0, [r7, #4]
    3990:	6039      	str	r1, [r7, #0]
    3992:	4d30      	ldr	r5, [pc, #192]	; (3a54 <check_fs+0xcc>)
    3994:	447d      	add	r5, pc
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	7858      	ldrb	r0, [r3, #1]
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	3330      	adds	r3, #48	; 0x30
    399e:	0019      	movs	r1, r3
    39a0:	683a      	ldr	r2, [r7, #0]
    39a2:	2301      	movs	r3, #1
    39a4:	4c2c      	ldr	r4, [pc, #176]	; (3a58 <check_fs+0xd0>)
    39a6:	592c      	ldr	r4, [r5, r4]
    39a8:	47a0      	blx	r4
    39aa:	1e03      	subs	r3, r0, #0
    39ac:	d001      	beq.n	39b2 <check_fs+0x2a>
		return 3;
    39ae:	2303      	movs	r3, #3
    39b0:	e04b      	b.n	3a4a <check_fs+0xc2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	4a29      	ldr	r2, [pc, #164]	; (3a5c <check_fs+0xd4>)
    39b6:	4694      	mov	ip, r2
    39b8:	4463      	add	r3, ip
    39ba:	3301      	adds	r3, #1
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	021b      	lsls	r3, r3, #8
    39c0:	b21a      	sxth	r2, r3
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	4925      	ldr	r1, [pc, #148]	; (3a5c <check_fs+0xd4>)
    39c6:	5c5b      	ldrb	r3, [r3, r1]
    39c8:	b21b      	sxth	r3, r3
    39ca:	4313      	orrs	r3, r2
    39cc:	b21b      	sxth	r3, r3
    39ce:	4a24      	ldr	r2, [pc, #144]	; (3a60 <check_fs+0xd8>)
    39d0:	4293      	cmp	r3, r2
    39d2:	d001      	beq.n	39d8 <check_fs+0x50>
		return 2;
    39d4:	2302      	movs	r3, #2
    39d6:	e038      	b.n	3a4a <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	3366      	adds	r3, #102	; 0x66
    39dc:	3303      	adds	r3, #3
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	061a      	lsls	r2, r3, #24
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	3366      	adds	r3, #102	; 0x66
    39e6:	3302      	adds	r3, #2
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	041b      	lsls	r3, r3, #16
    39ec:	4313      	orrs	r3, r2
    39ee:	687a      	ldr	r2, [r7, #4]
    39f0:	3266      	adds	r2, #102	; 0x66
    39f2:	3201      	adds	r2, #1
    39f4:	7812      	ldrb	r2, [r2, #0]
    39f6:	0212      	lsls	r2, r2, #8
    39f8:	4313      	orrs	r3, r2
    39fa:	687a      	ldr	r2, [r7, #4]
    39fc:	2166      	movs	r1, #102	; 0x66
    39fe:	5c52      	ldrb	r2, [r2, r1]
    3a00:	4313      	orrs	r3, r2
    3a02:	021b      	lsls	r3, r3, #8
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	4a17      	ldr	r2, [pc, #92]	; (3a64 <check_fs+0xdc>)
    3a08:	4293      	cmp	r3, r2
    3a0a:	d101      	bne.n	3a10 <check_fs+0x88>
		return 0;
    3a0c:	2300      	movs	r3, #0
    3a0e:	e01c      	b.n	3a4a <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	3382      	adds	r3, #130	; 0x82
    3a14:	3303      	adds	r3, #3
    3a16:	781b      	ldrb	r3, [r3, #0]
    3a18:	061a      	lsls	r2, r3, #24
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	3382      	adds	r3, #130	; 0x82
    3a1e:	3302      	adds	r3, #2
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	041b      	lsls	r3, r3, #16
    3a24:	4313      	orrs	r3, r2
    3a26:	687a      	ldr	r2, [r7, #4]
    3a28:	3282      	adds	r2, #130	; 0x82
    3a2a:	3201      	adds	r2, #1
    3a2c:	7812      	ldrb	r2, [r2, #0]
    3a2e:	0212      	lsls	r2, r2, #8
    3a30:	4313      	orrs	r3, r2
    3a32:	687a      	ldr	r2, [r7, #4]
    3a34:	2182      	movs	r1, #130	; 0x82
    3a36:	5c52      	ldrb	r2, [r2, r1]
    3a38:	4313      	orrs	r3, r2
    3a3a:	021b      	lsls	r3, r3, #8
    3a3c:	0a1b      	lsrs	r3, r3, #8
    3a3e:	4a09      	ldr	r2, [pc, #36]	; (3a64 <check_fs+0xdc>)
    3a40:	4293      	cmp	r3, r2
    3a42:	d101      	bne.n	3a48 <check_fs+0xc0>
		return 0;
    3a44:	2300      	movs	r3, #0
    3a46:	e000      	b.n	3a4a <check_fs+0xc2>

	return 1;
    3a48:	2301      	movs	r3, #1
}
    3a4a:	0018      	movs	r0, r3
    3a4c:	46bd      	mov	sp, r7
    3a4e:	b002      	add	sp, #8
    3a50:	bdb0      	pop	{r4, r5, r7, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	0000e4cc 	.word	0x0000e4cc
    3a58:	000002c0 	.word	0x000002c0
    3a5c:	0000022e 	.word	0x0000022e
    3a60:	ffffaa55 	.word	0xffffaa55
    3a64:	00544146 	.word	0x00544146

00003a68 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    3a68:	b5b0      	push	{r4, r5, r7, lr}
    3a6a:	b092      	sub	sp, #72	; 0x48
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	60b9      	str	r1, [r7, #8]
    3a72:	1dfb      	adds	r3, r7, #7
    3a74:	701a      	strb	r2, [r3, #0]
    3a76:	4cd0      	ldr	r4, [pc, #832]	; (3db8 <chk_mounted+0x350>)
    3a78:	447c      	add	r4, pc
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    3a7a:	68fb      	ldr	r3, [r7, #12]
    3a7c:	681b      	ldr	r3, [r3, #0]
    3a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    3a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	3b30      	subs	r3, #48	; 0x30
    3a86:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a8a:	2b09      	cmp	r3, #9
    3a8c:	d80b      	bhi.n	3aa6 <chk_mounted+0x3e>
    3a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a90:	3301      	adds	r3, #1
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	2b3a      	cmp	r3, #58	; 0x3a
    3a96:	d106      	bne.n	3aa6 <chk_mounted+0x3e>
		p += 2; *path = p;				/* Return pointer to the path name */
    3a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a9a:	3302      	adds	r3, #2
    3a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3aa2:	601a      	str	r2, [r3, #0]
    3aa4:	e001      	b.n	3aaa <chk_mounted+0x42>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    3aa6:	2300      	movs	r3, #0
    3aa8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3aac:	2b00      	cmp	r3, #0
    3aae:	d001      	beq.n	3ab4 <chk_mounted+0x4c>
		return FR_INVALID_DRIVE;
    3ab0:	230b      	movs	r3, #11
    3ab2:	e2bc      	b.n	402e <chk_mounted+0x5c6>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3ab4:	4bc1      	ldr	r3, [pc, #772]	; (3dbc <chk_mounted+0x354>)
    3ab6:	447b      	add	r3, pc
    3ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3aba:	0092      	lsls	r2, r2, #2
    3abc:	58d3      	ldr	r3, [r2, r3]
    3abe:	62bb      	str	r3, [r7, #40]	; 0x28
    3ac0:	68bb      	ldr	r3, [r7, #8]
    3ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ac4:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d101      	bne.n	3ad0 <chk_mounted+0x68>
    3acc:	230c      	movs	r3, #12
    3ace:	e2ae      	b.n	402e <chk_mounted+0x5c6>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d01d      	beq.n	3b14 <chk_mounted+0xac>
		stat = disk_status(fs->drv);
    3ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ada:	785b      	ldrb	r3, [r3, #1]
    3adc:	2227      	movs	r2, #39	; 0x27
    3ade:	18bd      	adds	r5, r7, r2
    3ae0:	0018      	movs	r0, r3
    3ae2:	4bb7      	ldr	r3, [pc, #732]	; (3dc0 <chk_mounted+0x358>)
    3ae4:	58e3      	ldr	r3, [r4, r3]
    3ae6:	4798      	blx	r3
    3ae8:	0003      	movs	r3, r0
    3aea:	702b      	strb	r3, [r5, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3aec:	2327      	movs	r3, #39	; 0x27
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	2201      	movs	r2, #1
    3af4:	4013      	ands	r3, r2
    3af6:	d10d      	bne.n	3b14 <chk_mounted+0xac>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3af8:	1dfb      	adds	r3, r7, #7
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	2b00      	cmp	r3, #0
    3afe:	d007      	beq.n	3b10 <chk_mounted+0xa8>
    3b00:	2327      	movs	r3, #39	; 0x27
    3b02:	18fb      	adds	r3, r7, r3
    3b04:	781b      	ldrb	r3, [r3, #0]
    3b06:	2204      	movs	r2, #4
    3b08:	4013      	ands	r3, r2
    3b0a:	d001      	beq.n	3b10 <chk_mounted+0xa8>
				return FR_WRITE_PROTECTED;
    3b0c:	230a      	movs	r3, #10
    3b0e:	e28e      	b.n	402e <chk_mounted+0x5c6>
			return FR_OK;				/* The file system object is valid */
    3b10:	2300      	movs	r3, #0
    3b12:	e28c      	b.n	402e <chk_mounted+0x5c6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    3b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b16:	2200      	movs	r2, #0
    3b18:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3b1c:	b2da      	uxtb	r2, r3
    3b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b20:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b24:	785b      	ldrb	r3, [r3, #1]
    3b26:	2227      	movs	r2, #39	; 0x27
    3b28:	18bd      	adds	r5, r7, r2
    3b2a:	0018      	movs	r0, r3
    3b2c:	4ba5      	ldr	r3, [pc, #660]	; (3dc4 <chk_mounted+0x35c>)
    3b2e:	58e3      	ldr	r3, [r4, r3]
    3b30:	4798      	blx	r3
    3b32:	0003      	movs	r3, r0
    3b34:	702b      	strb	r3, [r5, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3b36:	2327      	movs	r3, #39	; 0x27
    3b38:	18fb      	adds	r3, r7, r3
    3b3a:	781b      	ldrb	r3, [r3, #0]
    3b3c:	2201      	movs	r2, #1
    3b3e:	4013      	ands	r3, r2
    3b40:	d001      	beq.n	3b46 <chk_mounted+0xde>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3b42:	2303      	movs	r3, #3
    3b44:	e273      	b.n	402e <chk_mounted+0x5c6>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3b46:	1dfb      	adds	r3, r7, #7
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d007      	beq.n	3b5e <chk_mounted+0xf6>
    3b4e:	2327      	movs	r3, #39	; 0x27
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	2204      	movs	r2, #4
    3b56:	4013      	ands	r3, r2
    3b58:	d001      	beq.n	3b5e <chk_mounted+0xf6>
		return FR_WRITE_PROTECTED;
    3b5a:	230a      	movs	r3, #10
    3b5c:	e267      	b.n	402e <chk_mounted+0x5c6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3b5e:	2300      	movs	r3, #0
    3b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b62:	2347      	movs	r3, #71	; 0x47
    3b64:	18fd      	adds	r5, r7, r3
    3b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b6a:	0011      	movs	r1, r2
    3b6c:	0018      	movs	r0, r3
    3b6e:	4b96      	ldr	r3, [pc, #600]	; (3dc8 <chk_mounted+0x360>)
    3b70:	447b      	add	r3, pc
    3b72:	4798      	blx	r3
    3b74:	0003      	movs	r3, r0
    3b76:	702b      	strb	r3, [r5, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3b78:	2347      	movs	r3, #71	; 0x47
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	2b01      	cmp	r3, #1
    3b80:	d13c      	bne.n	3bfc <chk_mounted+0x194>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    3b82:	2346      	movs	r3, #70	; 0x46
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	2200      	movs	r2, #0
    3b88:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    3b8a:	2346      	movs	r3, #70	; 0x46
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d006      	beq.n	3ba2 <chk_mounted+0x13a>
    3b94:	2346      	movs	r3, #70	; 0x46
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781a      	ldrb	r2, [r3, #0]
    3b9a:	2346      	movs	r3, #70	; 0x46
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	3a01      	subs	r2, #1
    3ba0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    3ba2:	2346      	movs	r3, #70	; 0x46
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	781b      	ldrb	r3, [r3, #0]
    3ba8:	011b      	lsls	r3, r3, #4
    3baa:	33bf      	adds	r3, #191	; 0xbf
    3bac:	33ff      	adds	r3, #255	; 0xff
    3bae:	3330      	adds	r3, #48	; 0x30
    3bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bb2:	18d3      	adds	r3, r2, r3
    3bb4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    3bb6:	6a3b      	ldr	r3, [r7, #32]
    3bb8:	3304      	adds	r3, #4
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d01d      	beq.n	3bfc <chk_mounted+0x194>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3bc0:	6a3b      	ldr	r3, [r7, #32]
    3bc2:	330b      	adds	r3, #11
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	061a      	lsls	r2, r3, #24
    3bc8:	6a3b      	ldr	r3, [r7, #32]
    3bca:	330a      	adds	r3, #10
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	041b      	lsls	r3, r3, #16
    3bd0:	4313      	orrs	r3, r2
    3bd2:	6a3a      	ldr	r2, [r7, #32]
    3bd4:	3209      	adds	r2, #9
    3bd6:	7812      	ldrb	r2, [r2, #0]
    3bd8:	0212      	lsls	r2, r2, #8
    3bda:	4313      	orrs	r3, r2
    3bdc:	6a3a      	ldr	r2, [r7, #32]
    3bde:	3208      	adds	r2, #8
    3be0:	7812      	ldrb	r2, [r2, #0]
    3be2:	4313      	orrs	r3, r2
    3be4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3be6:	2347      	movs	r3, #71	; 0x47
    3be8:	18fd      	adds	r5, r7, r3
    3bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bee:	0011      	movs	r1, r2
    3bf0:	0018      	movs	r0, r3
    3bf2:	4b76      	ldr	r3, [pc, #472]	; (3dcc <chk_mounted+0x364>)
    3bf4:	447b      	add	r3, pc
    3bf6:	4798      	blx	r3
    3bf8:	0003      	movs	r3, r0
    3bfa:	702b      	strb	r3, [r5, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    3bfc:	2347      	movs	r3, #71	; 0x47
    3bfe:	18fb      	adds	r3, r7, r3
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	2b03      	cmp	r3, #3
    3c04:	d101      	bne.n	3c0a <chk_mounted+0x1a2>
    3c06:	2301      	movs	r3, #1
    3c08:	e211      	b.n	402e <chk_mounted+0x5c6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3c0a:	2347      	movs	r3, #71	; 0x47
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d001      	beq.n	3c18 <chk_mounted+0x1b0>
    3c14:	230d      	movs	r3, #13
    3c16:	e20a      	b.n	402e <chk_mounted+0x5c6>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c1a:	223c      	movs	r2, #60	; 0x3c
    3c1c:	5c9b      	ldrb	r3, [r3, r2]
    3c1e:	021b      	lsls	r3, r3, #8
    3c20:	b21a      	sxth	r2, r3
    3c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c24:	213b      	movs	r1, #59	; 0x3b
    3c26:	5c5b      	ldrb	r3, [r3, r1]
    3c28:	b21b      	sxth	r3, r3
    3c2a:	4313      	orrs	r3, r2
    3c2c:	b21a      	sxth	r2, r3
    3c2e:	2380      	movs	r3, #128	; 0x80
    3c30:	009b      	lsls	r3, r3, #2
    3c32:	429a      	cmp	r2, r3
    3c34:	d001      	beq.n	3c3a <chk_mounted+0x1d2>
		return FR_NO_FILESYSTEM;
    3c36:	230d      	movs	r3, #13
    3c38:	e1f9      	b.n	402e <chk_mounted+0x5c6>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c3c:	2247      	movs	r2, #71	; 0x47
    3c3e:	5c9b      	ldrb	r3, [r3, r2]
    3c40:	021b      	lsls	r3, r3, #8
    3c42:	b21a      	sxth	r2, r3
    3c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c46:	2146      	movs	r1, #70	; 0x46
    3c48:	5c5b      	ldrb	r3, [r3, r1]
    3c4a:	b21b      	sxth	r3, r3
    3c4c:	4313      	orrs	r3, r2
    3c4e:	b21b      	sxth	r3, r3
    3c50:	b29b      	uxth	r3, r3
    3c52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c56:	2b00      	cmp	r3, #0
    3c58:	d112      	bne.n	3c80 <chk_mounted+0x218>
    3c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c5c:	2257      	movs	r2, #87	; 0x57
    3c5e:	5c9b      	ldrb	r3, [r3, r2]
    3c60:	061a      	lsls	r2, r3, #24
    3c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c64:	2156      	movs	r1, #86	; 0x56
    3c66:	5c5b      	ldrb	r3, [r3, r1]
    3c68:	041b      	lsls	r3, r3, #16
    3c6a:	4313      	orrs	r3, r2
    3c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c6e:	2155      	movs	r1, #85	; 0x55
    3c70:	5c52      	ldrb	r2, [r2, r1]
    3c72:	0212      	lsls	r2, r2, #8
    3c74:	4313      	orrs	r3, r2
    3c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c78:	2154      	movs	r1, #84	; 0x54
    3c7a:	5c52      	ldrb	r2, [r2, r1]
    3c7c:	4313      	orrs	r3, r2
    3c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    3c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c84:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3c86:	231f      	movs	r3, #31
    3c88:	18fb      	adds	r3, r7, r3
    3c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c8c:	2140      	movs	r1, #64	; 0x40
    3c8e:	5c52      	ldrb	r2, [r2, r1]
    3c90:	701a      	strb	r2, [r3, #0]
    3c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c94:	221f      	movs	r2, #31
    3c96:	18ba      	adds	r2, r7, r2
    3c98:	7812      	ldrb	r2, [r2, #0]
    3c9a:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3c9c:	231f      	movs	r3, #31
    3c9e:	18fb      	adds	r3, r7, r3
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b01      	cmp	r3, #1
    3ca4:	d006      	beq.n	3cb4 <chk_mounted+0x24c>
    3ca6:	231f      	movs	r3, #31
    3ca8:	18fb      	adds	r3, r7, r3
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	2b02      	cmp	r3, #2
    3cae:	d001      	beq.n	3cb4 <chk_mounted+0x24c>
    3cb0:	230d      	movs	r3, #13
    3cb2:	e1bc      	b.n	402e <chk_mounted+0x5c6>
	fasize *= b;										/* Number of sectors for FAT area */
    3cb4:	231f      	movs	r3, #31
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	781a      	ldrb	r2, [r3, #0]
    3cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cbc:	4353      	muls	r3, r2
    3cbe:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3cc0:	231f      	movs	r3, #31
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3cc6:	213d      	movs	r1, #61	; 0x3d
    3cc8:	5c52      	ldrb	r2, [r2, r1]
    3cca:	701a      	strb	r2, [r3, #0]
    3ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cce:	221f      	movs	r2, #31
    3cd0:	18ba      	adds	r2, r7, r2
    3cd2:	7812      	ldrb	r2, [r2, #0]
    3cd4:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3cd6:	231f      	movs	r3, #31
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d008      	beq.n	3cf2 <chk_mounted+0x28a>
    3ce0:	231f      	movs	r3, #31
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	221f      	movs	r2, #31
    3ce8:	18ba      	adds	r2, r7, r2
    3cea:	7812      	ldrb	r2, [r2, #0]
    3cec:	3a01      	subs	r2, #1
    3cee:	4013      	ands	r3, r2
    3cf0:	d001      	beq.n	3cf6 <chk_mounted+0x28e>
    3cf2:	230d      	movs	r3, #13
    3cf4:	e19b      	b.n	402e <chk_mounted+0x5c6>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cf8:	2242      	movs	r2, #66	; 0x42
    3cfa:	5c9b      	ldrb	r3, [r3, r2]
    3cfc:	021b      	lsls	r3, r3, #8
    3cfe:	b21a      	sxth	r2, r3
    3d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d02:	2141      	movs	r1, #65	; 0x41
    3d04:	5c5b      	ldrb	r3, [r3, r1]
    3d06:	b21b      	sxth	r3, r3
    3d08:	4313      	orrs	r3, r2
    3d0a:	b21b      	sxth	r3, r3
    3d0c:	b29a      	uxth	r2, r3
    3d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d10:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d14:	891b      	ldrh	r3, [r3, #8]
    3d16:	220f      	movs	r2, #15
    3d18:	4013      	ands	r3, r2
    3d1a:	b29b      	uxth	r3, r3
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d001      	beq.n	3d24 <chk_mounted+0x2bc>
    3d20:	230d      	movs	r3, #13
    3d22:	e184      	b.n	402e <chk_mounted+0x5c6>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d26:	2244      	movs	r2, #68	; 0x44
    3d28:	5c9b      	ldrb	r3, [r3, r2]
    3d2a:	021b      	lsls	r3, r3, #8
    3d2c:	b21a      	sxth	r2, r3
    3d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d30:	2143      	movs	r1, #67	; 0x43
    3d32:	5c5b      	ldrb	r3, [r3, r1]
    3d34:	b21b      	sxth	r3, r3
    3d36:	4313      	orrs	r3, r2
    3d38:	b21b      	sxth	r3, r3
    3d3a:	b29b      	uxth	r3, r3
    3d3c:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d40:	2b00      	cmp	r3, #0
    3d42:	d112      	bne.n	3d6a <chk_mounted+0x302>
    3d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d46:	2253      	movs	r2, #83	; 0x53
    3d48:	5c9b      	ldrb	r3, [r3, r2]
    3d4a:	061a      	lsls	r2, r3, #24
    3d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d4e:	2152      	movs	r1, #82	; 0x52
    3d50:	5c5b      	ldrb	r3, [r3, r1]
    3d52:	041b      	lsls	r3, r3, #16
    3d54:	4313      	orrs	r3, r2
    3d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d58:	2151      	movs	r1, #81	; 0x51
    3d5a:	5c52      	ldrb	r2, [r2, r1]
    3d5c:	0212      	lsls	r2, r2, #8
    3d5e:	4313      	orrs	r3, r2
    3d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d62:	2150      	movs	r1, #80	; 0x50
    3d64:	5c52      	ldrb	r2, [r2, r1]
    3d66:	4313      	orrs	r3, r2
    3d68:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d6c:	223f      	movs	r2, #63	; 0x3f
    3d6e:	5c9b      	ldrb	r3, [r3, r2]
    3d70:	021b      	lsls	r3, r3, #8
    3d72:	b21a      	sxth	r2, r3
    3d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d76:	213e      	movs	r1, #62	; 0x3e
    3d78:	5c5b      	ldrb	r3, [r3, r1]
    3d7a:	b21b      	sxth	r3, r3
    3d7c:	4313      	orrs	r3, r2
    3d7e:	b21a      	sxth	r2, r3
    3d80:	231c      	movs	r3, #28
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3d86:	231c      	movs	r3, #28
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d101      	bne.n	3d94 <chk_mounted+0x32c>
    3d90:	230d      	movs	r3, #13
    3d92:	e14c      	b.n	402e <chk_mounted+0x5c6>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3d94:	231c      	movs	r3, #28
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	881a      	ldrh	r2, [r3, #0]
    3d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3da0:	8912      	ldrh	r2, [r2, #8]
    3da2:	0912      	lsrs	r2, r2, #4
    3da4:	b292      	uxth	r2, r2
    3da6:	189b      	adds	r3, r3, r2
    3da8:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3dac:	69bb      	ldr	r3, [r7, #24]
    3dae:	429a      	cmp	r2, r3
    3db0:	d20e      	bcs.n	3dd0 <chk_mounted+0x368>
    3db2:	230d      	movs	r3, #13
    3db4:	e13b      	b.n	402e <chk_mounted+0x5c6>
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	0000e3e8 	.word	0x0000e3e8
    3dbc:	1fffc716 	.word	0x1fffc716
    3dc0:	000000cc 	.word	0x000000cc
    3dc4:	000000a4 	.word	0x000000a4
    3dc8:	fffffe15 	.word	0xfffffe15
    3dcc:	fffffd91 	.word	0xfffffd91
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3dd2:	69bb      	ldr	r3, [r7, #24]
    3dd4:	1ad2      	subs	r2, r2, r3
    3dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dd8:	789b      	ldrb	r3, [r3, #2]
    3dda:	0019      	movs	r1, r3
    3ddc:	4b96      	ldr	r3, [pc, #600]	; (4038 <chk_mounted+0x5d0>)
    3dde:	58e3      	ldr	r3, [r4, r3]
    3de0:	0010      	movs	r0, r2
    3de2:	4798      	blx	r3
    3de4:	0003      	movs	r3, r0
    3de6:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3de8:	697b      	ldr	r3, [r7, #20]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d101      	bne.n	3df2 <chk_mounted+0x38a>
    3dee:	230d      	movs	r3, #13
    3df0:	e11d      	b.n	402e <chk_mounted+0x5c6>
	fmt = FS_FAT12;
    3df2:	2347      	movs	r3, #71	; 0x47
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	2201      	movs	r2, #1
    3df8:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3dfa:	697b      	ldr	r3, [r7, #20]
    3dfc:	4a8f      	ldr	r2, [pc, #572]	; (403c <chk_mounted+0x5d4>)
    3dfe:	4293      	cmp	r3, r2
    3e00:	d903      	bls.n	3e0a <chk_mounted+0x3a2>
    3e02:	2347      	movs	r3, #71	; 0x47
    3e04:	18fb      	adds	r3, r7, r3
    3e06:	2202      	movs	r2, #2
    3e08:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3e0a:	697b      	ldr	r3, [r7, #20]
    3e0c:	4a8c      	ldr	r2, [pc, #560]	; (4040 <chk_mounted+0x5d8>)
    3e0e:	4293      	cmp	r3, r2
    3e10:	d903      	bls.n	3e1a <chk_mounted+0x3b2>
    3e12:	2347      	movs	r3, #71	; 0x47
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	2203      	movs	r2, #3
    3e18:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3e1a:	697b      	ldr	r3, [r7, #20]
    3e1c:	1c9a      	adds	r2, r3, #2
    3e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e20:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e24:	69bb      	ldr	r3, [r7, #24]
    3e26:	18d2      	adds	r2, r2, r3
    3e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e2a:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3e2c:	231c      	movs	r3, #28
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	881a      	ldrh	r2, [r3, #0]
    3e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3e34:	18d2      	adds	r2, r2, r3
    3e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e38:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    3e3a:	2347      	movs	r3, #71	; 0x47
    3e3c:	18fb      	adds	r3, r7, r3
    3e3e:	781b      	ldrb	r3, [r3, #0]
    3e40:	2b03      	cmp	r3, #3
    3e42:	d11e      	bne.n	3e82 <chk_mounted+0x41a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e46:	891b      	ldrh	r3, [r3, #8]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d001      	beq.n	3e50 <chk_mounted+0x3e8>
    3e4c:	230d      	movs	r3, #13
    3e4e:	e0ee      	b.n	402e <chk_mounted+0x5c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e52:	225f      	movs	r2, #95	; 0x5f
    3e54:	5c9b      	ldrb	r3, [r3, r2]
    3e56:	061a      	lsls	r2, r3, #24
    3e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e5a:	215e      	movs	r1, #94	; 0x5e
    3e5c:	5c5b      	ldrb	r3, [r3, r1]
    3e5e:	041b      	lsls	r3, r3, #16
    3e60:	4313      	orrs	r3, r2
    3e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e64:	215d      	movs	r1, #93	; 0x5d
    3e66:	5c52      	ldrb	r2, [r2, r1]
    3e68:	0212      	lsls	r2, r2, #8
    3e6a:	4313      	orrs	r3, r2
    3e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e6e:	215c      	movs	r1, #92	; 0x5c
    3e70:	5c52      	ldrb	r2, [r2, r1]
    3e72:	431a      	orrs	r2, r3
    3e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e76:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e7a:	699b      	ldr	r3, [r3, #24]
    3e7c:	009b      	lsls	r3, r3, #2
    3e7e:	633b      	str	r3, [r7, #48]	; 0x30
    3e80:	e020      	b.n	3ec4 <chk_mounted+0x45c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e84:	891b      	ldrh	r3, [r3, #8]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d101      	bne.n	3e8e <chk_mounted+0x426>
    3e8a:	230d      	movs	r3, #13
    3e8c:	e0cf      	b.n	402e <chk_mounted+0x5c6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e90:	6a1a      	ldr	r2, [r3, #32]
    3e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e94:	18d2      	adds	r2, r2, r3
    3e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e98:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3e9a:	2347      	movs	r3, #71	; 0x47
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	781b      	ldrb	r3, [r3, #0]
    3ea0:	2b02      	cmp	r3, #2
    3ea2:	d103      	bne.n	3eac <chk_mounted+0x444>
    3ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ea6:	699b      	ldr	r3, [r3, #24]
    3ea8:	005b      	lsls	r3, r3, #1
    3eaa:	e00a      	b.n	3ec2 <chk_mounted+0x45a>
    3eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eae:	699a      	ldr	r2, [r3, #24]
    3eb0:	0013      	movs	r3, r2
    3eb2:	005b      	lsls	r3, r3, #1
    3eb4:	189b      	adds	r3, r3, r2
    3eb6:	085a      	lsrs	r2, r3, #1
    3eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eba:	699b      	ldr	r3, [r3, #24]
    3ebc:	2101      	movs	r1, #1
    3ebe:	400b      	ands	r3, r1
    3ec0:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    3ec2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ec6:	69da      	ldr	r2, [r3, #28]
    3ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3eca:	495e      	ldr	r1, [pc, #376]	; (4044 <chk_mounted+0x5dc>)
    3ecc:	468c      	mov	ip, r1
    3ece:	4463      	add	r3, ip
    3ed0:	0a5b      	lsrs	r3, r3, #9
    3ed2:	429a      	cmp	r2, r3
    3ed4:	d201      	bcs.n	3eda <chk_mounted+0x472>
		return FR_NO_FILESYSTEM;
    3ed6:	230d      	movs	r3, #13
    3ed8:	e0a9      	b.n	402e <chk_mounted+0x5c6>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    3eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3edc:	2201      	movs	r2, #1
    3ede:	4252      	negs	r2, r2
    3ee0:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    3ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ee4:	2200      	movs	r2, #0
    3ee6:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    3ee8:	2347      	movs	r3, #71	; 0x47
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b03      	cmp	r3, #3
    3ef0:	d000      	beq.n	3ef4 <chk_mounted+0x48c>
    3ef2:	e083      	b.n	3ffc <chk_mounted+0x594>
	 	fs->fsi_flag = 0;
    3ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ef6:	2200      	movs	r2, #0
    3ef8:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3efc:	2261      	movs	r2, #97	; 0x61
    3efe:	5c9b      	ldrb	r3, [r3, r2]
    3f00:	021b      	lsls	r3, r3, #8
    3f02:	b21a      	sxth	r2, r3
    3f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f06:	2160      	movs	r1, #96	; 0x60
    3f08:	5c5b      	ldrb	r3, [r3, r1]
    3f0a:	b21b      	sxth	r3, r3
    3f0c:	4313      	orrs	r3, r2
    3f0e:	b21b      	sxth	r3, r3
    3f10:	b29b      	uxth	r3, r3
    3f12:	001a      	movs	r2, r3
    3f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f16:	18d2      	adds	r2, r2, r3
    3f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f1a:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f1e:	7858      	ldrb	r0, [r3, #1]
    3f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f22:	3330      	adds	r3, #48	; 0x30
    3f24:	0019      	movs	r1, r3
    3f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f28:	695a      	ldr	r2, [r3, #20]
    3f2a:	2301      	movs	r3, #1
    3f2c:	4d46      	ldr	r5, [pc, #280]	; (4048 <chk_mounted+0x5e0>)
    3f2e:	5964      	ldr	r4, [r4, r5]
    3f30:	47a0      	blx	r4
    3f32:	1e03      	subs	r3, r0, #0
    3f34:	d162      	bne.n	3ffc <chk_mounted+0x594>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f38:	4a44      	ldr	r2, [pc, #272]	; (404c <chk_mounted+0x5e4>)
    3f3a:	5c9b      	ldrb	r3, [r3, r2]
    3f3c:	021b      	lsls	r3, r3, #8
    3f3e:	b21a      	sxth	r2, r3
    3f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f42:	4943      	ldr	r1, [pc, #268]	; (4050 <chk_mounted+0x5e8>)
    3f44:	5c5b      	ldrb	r3, [r3, r1]
    3f46:	b21b      	sxth	r3, r3
    3f48:	4313      	orrs	r3, r2
    3f4a:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f4c:	4a41      	ldr	r2, [pc, #260]	; (4054 <chk_mounted+0x5ec>)
    3f4e:	4293      	cmp	r3, r2
    3f50:	d154      	bne.n	3ffc <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f54:	2233      	movs	r2, #51	; 0x33
    3f56:	5c9b      	ldrb	r3, [r3, r2]
    3f58:	061a      	lsls	r2, r3, #24
    3f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f5c:	2132      	movs	r1, #50	; 0x32
    3f5e:	5c5b      	ldrb	r3, [r3, r1]
    3f60:	041b      	lsls	r3, r3, #16
    3f62:	4313      	orrs	r3, r2
    3f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f66:	2131      	movs	r1, #49	; 0x31
    3f68:	5c52      	ldrb	r2, [r2, r1]
    3f6a:	0212      	lsls	r2, r2, #8
    3f6c:	4313      	orrs	r3, r2
    3f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f70:	2130      	movs	r1, #48	; 0x30
    3f72:	5c52      	ldrb	r2, [r2, r1]
    3f74:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3f76:	4a38      	ldr	r2, [pc, #224]	; (4058 <chk_mounted+0x5f0>)
    3f78:	4293      	cmp	r3, r2
    3f7a:	d13f      	bne.n	3ffc <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f7e:	4a37      	ldr	r2, [pc, #220]	; (405c <chk_mounted+0x5f4>)
    3f80:	5c9b      	ldrb	r3, [r3, r2]
    3f82:	061a      	lsls	r2, r3, #24
    3f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f86:	4936      	ldr	r1, [pc, #216]	; (4060 <chk_mounted+0x5f8>)
    3f88:	5c5b      	ldrb	r3, [r3, r1]
    3f8a:	041b      	lsls	r3, r3, #16
    3f8c:	4313      	orrs	r3, r2
    3f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f90:	4934      	ldr	r1, [pc, #208]	; (4064 <chk_mounted+0x5fc>)
    3f92:	5c52      	ldrb	r2, [r2, r1]
    3f94:	0212      	lsls	r2, r2, #8
    3f96:	4313      	orrs	r3, r2
    3f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3f9a:	2285      	movs	r2, #133	; 0x85
    3f9c:	0092      	lsls	r2, r2, #2
    3f9e:	5c8a      	ldrb	r2, [r1, r2]
    3fa0:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3fa2:	4a31      	ldr	r2, [pc, #196]	; (4068 <chk_mounted+0x600>)
    3fa4:	4293      	cmp	r3, r2
    3fa6:	d129      	bne.n	3ffc <chk_mounted+0x594>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3faa:	4a30      	ldr	r2, [pc, #192]	; (406c <chk_mounted+0x604>)
    3fac:	5c9b      	ldrb	r3, [r3, r2]
    3fae:	061a      	lsls	r2, r3, #24
    3fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fb2:	492f      	ldr	r1, [pc, #188]	; (4070 <chk_mounted+0x608>)
    3fb4:	5c5b      	ldrb	r3, [r3, r1]
    3fb6:	041b      	lsls	r3, r3, #16
    3fb8:	4313      	orrs	r3, r2
    3fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3fbc:	492d      	ldr	r1, [pc, #180]	; (4074 <chk_mounted+0x60c>)
    3fbe:	5c52      	ldrb	r2, [r2, r1]
    3fc0:	0212      	lsls	r2, r2, #8
    3fc2:	4313      	orrs	r3, r2
    3fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3fc6:	2287      	movs	r2, #135	; 0x87
    3fc8:	0092      	lsls	r2, r2, #2
    3fca:	5c8a      	ldrb	r2, [r1, r2]
    3fcc:	431a      	orrs	r2, r3
    3fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fd0:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fd4:	4a28      	ldr	r2, [pc, #160]	; (4078 <chk_mounted+0x610>)
    3fd6:	5c9b      	ldrb	r3, [r3, r2]
    3fd8:	061a      	lsls	r2, r3, #24
    3fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fdc:	4927      	ldr	r1, [pc, #156]	; (407c <chk_mounted+0x614>)
    3fde:	5c5b      	ldrb	r3, [r3, r1]
    3fe0:	041b      	lsls	r3, r3, #16
    3fe2:	4313      	orrs	r3, r2
    3fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3fe6:	4926      	ldr	r1, [pc, #152]	; (4080 <chk_mounted+0x618>)
    3fe8:	5c52      	ldrb	r2, [r2, r1]
    3fea:	0212      	lsls	r2, r2, #8
    3fec:	4313      	orrs	r3, r2
    3fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3ff0:	2286      	movs	r2, #134	; 0x86
    3ff2:	0092      	lsls	r2, r2, #2
    3ff4:	5c8a      	ldrb	r2, [r1, r2]
    3ff6:	431a      	orrs	r2, r3
    3ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ffa:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    3ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ffe:	2247      	movs	r2, #71	; 0x47
    4000:	18ba      	adds	r2, r7, r2
    4002:	7812      	ldrb	r2, [r2, #0]
    4004:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    4006:	4b1f      	ldr	r3, [pc, #124]	; (4084 <chk_mounted+0x61c>)
    4008:	447b      	add	r3, pc
    400a:	881b      	ldrh	r3, [r3, #0]
    400c:	3301      	adds	r3, #1
    400e:	b29a      	uxth	r2, r3
    4010:	4b1d      	ldr	r3, [pc, #116]	; (4088 <chk_mounted+0x620>)
    4012:	447b      	add	r3, pc
    4014:	801a      	strh	r2, [r3, #0]
    4016:	4b1d      	ldr	r3, [pc, #116]	; (408c <chk_mounted+0x624>)
    4018:	447b      	add	r3, pc
    401a:	881a      	ldrh	r2, [r3, #0]
    401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    401e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    4020:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4022:	2200      	movs	r2, #0
    4024:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    4026:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4028:	2200      	movs	r2, #0
    402a:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    402c:	2300      	movs	r3, #0
}
    402e:	0018      	movs	r0, r3
    4030:	46bd      	mov	sp, r7
    4032:	b012      	add	sp, #72	; 0x48
    4034:	bdb0      	pop	{r4, r5, r7, pc}
    4036:	46c0      	nop			; (mov r8, r8)
    4038:	0000020c 	.word	0x0000020c
    403c:	00000ff5 	.word	0x00000ff5
    4040:	0000fff5 	.word	0x0000fff5
    4044:	000001ff 	.word	0x000001ff
    4048:	000002c0 	.word	0x000002c0
    404c:	0000022f 	.word	0x0000022f
    4050:	0000022e 	.word	0x0000022e
    4054:	ffffaa55 	.word	0xffffaa55
    4058:	41615252 	.word	0x41615252
    405c:	00000217 	.word	0x00000217
    4060:	00000216 	.word	0x00000216
    4064:	00000215 	.word	0x00000215
    4068:	61417272 	.word	0x61417272
    406c:	0000021f 	.word	0x0000021f
    4070:	0000021e 	.word	0x0000021e
    4074:	0000021d 	.word	0x0000021d
    4078:	0000021b 	.word	0x0000021b
    407c:	0000021a 	.word	0x0000021a
    4080:	00000219 	.word	0x00000219
    4084:	1fffc1c8 	.word	0x1fffc1c8
    4088:	1fffc1be 	.word	0x1fffc1be
    408c:	1fffc1b8 	.word	0x1fffc1b8

00004090 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    4090:	b580      	push	{r7, lr}
    4092:	b082      	sub	sp, #8
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
    4098:	000a      	movs	r2, r1
    409a:	1cbb      	adds	r3, r7, #2
    409c:	801a      	strh	r2, [r3, #0]
    409e:	4a11      	ldr	r2, [pc, #68]	; (40e4 <validate+0x54>)
    40a0:	447a      	add	r2, pc
	if (!fs || !fs->fs_type || fs->id != id)
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d009      	beq.n	40bc <validate+0x2c>
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	781b      	ldrb	r3, [r3, #0]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d005      	beq.n	40bc <validate+0x2c>
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	88db      	ldrh	r3, [r3, #6]
    40b4:	1cb9      	adds	r1, r7, #2
    40b6:	8809      	ldrh	r1, [r1, #0]
    40b8:	4299      	cmp	r1, r3
    40ba:	d001      	beq.n	40c0 <validate+0x30>
		return FR_INVALID_OBJECT;
    40bc:	2309      	movs	r3, #9
    40be:	e00d      	b.n	40dc <validate+0x4c>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	785b      	ldrb	r3, [r3, #1]
    40c4:	0018      	movs	r0, r3
    40c6:	4b08      	ldr	r3, [pc, #32]	; (40e8 <validate+0x58>)
    40c8:	58d3      	ldr	r3, [r2, r3]
    40ca:	4798      	blx	r3
    40cc:	0003      	movs	r3, r0
    40ce:	001a      	movs	r2, r3
    40d0:	2301      	movs	r3, #1
    40d2:	4013      	ands	r3, r2
    40d4:	d001      	beq.n	40da <validate+0x4a>
		return FR_NOT_READY;
    40d6:	2303      	movs	r3, #3
    40d8:	e000      	b.n	40dc <validate+0x4c>

	return FR_OK;
    40da:	2300      	movs	r3, #0
}
    40dc:	0018      	movs	r0, r3
    40de:	46bd      	mov	sp, r7
    40e0:	b002      	add	sp, #8
    40e2:	bd80      	pop	{r7, pc}
    40e4:	0000ddc0 	.word	0x0000ddc0
    40e8:	000000cc 	.word	0x000000cc

000040ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b084      	sub	sp, #16
    40f0:	af00      	add	r7, sp, #0
    40f2:	0002      	movs	r2, r0
    40f4:	6039      	str	r1, [r7, #0]
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	2b00      	cmp	r3, #0
    4100:	d001      	beq.n	4106 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    4102:	230b      	movs	r3, #11
    4104:	e01a      	b.n	413c <f_mount+0x50>
	rfs = FatFs[vol];			/* Get current fs object */
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781a      	ldrb	r2, [r3, #0]
    410a:	4b0e      	ldr	r3, [pc, #56]	; (4144 <f_mount+0x58>)
    410c:	447b      	add	r3, pc
    410e:	0092      	lsls	r2, r2, #2
    4110:	58d3      	ldr	r3, [r2, r3]
    4112:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	2b00      	cmp	r3, #0
    4118:	d002      	beq.n	4120 <f_mount+0x34>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	2200      	movs	r2, #0
    411e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    4120:	683b      	ldr	r3, [r7, #0]
    4122:	2b00      	cmp	r3, #0
    4124:	d002      	beq.n	412c <f_mount+0x40>
		fs->fs_type = 0;		/* Clear new fs object */
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	2200      	movs	r2, #0
    412a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    412c:	1dfb      	adds	r3, r7, #7
    412e:	781a      	ldrb	r2, [r3, #0]
    4130:	4b05      	ldr	r3, [pc, #20]	; (4148 <f_mount+0x5c>)
    4132:	447b      	add	r3, pc
    4134:	0092      	lsls	r2, r2, #2
    4136:	6839      	ldr	r1, [r7, #0]
    4138:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    413a:	2300      	movs	r3, #0
}
    413c:	0018      	movs	r0, r3
    413e:	46bd      	mov	sp, r7
    4140:	b004      	add	sp, #16
    4142:	bd80      	pop	{r7, pc}
    4144:	1fffc0c0 	.word	0x1fffc0c0
    4148:	1fffc09a 	.word	0x1fffc09a

0000414c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    414c:	b5b0      	push	{r4, r5, r7, lr}
    414e:	b092      	sub	sp, #72	; 0x48
    4150:	af00      	add	r7, sp, #0
    4152:	60f8      	str	r0, [r7, #12]
    4154:	60b9      	str	r1, [r7, #8]
    4156:	1dfb      	adds	r3, r7, #7
    4158:	701a      	strb	r2, [r3, #0]
    415a:	4cd1      	ldr	r4, [pc, #836]	; (44a0 <f_open+0x354>)
    415c:	447c      	add	r4, pc
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	2200      	movs	r2, #0
    4162:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4164:	1dfb      	adds	r3, r7, #7
    4166:	1dfa      	adds	r2, r7, #7
    4168:	7812      	ldrb	r2, [r2, #0]
    416a:	211f      	movs	r1, #31
    416c:	400a      	ands	r2, r1
    416e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4170:	1dfb      	adds	r3, r7, #7
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2201      	movs	r2, #1
    4176:	4393      	bics	r3, r2
    4178:	b2da      	uxtb	r2, r3
    417a:	2347      	movs	r3, #71	; 0x47
    417c:	18fd      	adds	r5, r7, r3
    417e:	231c      	movs	r3, #28
    4180:	18f9      	adds	r1, r7, r3
    4182:	2308      	movs	r3, #8
    4184:	18fb      	adds	r3, r7, r3
    4186:	0018      	movs	r0, r3
    4188:	4bc6      	ldr	r3, [pc, #792]	; (44a4 <f_open+0x358>)
    418a:	447b      	add	r3, pc
    418c:	4798      	blx	r3
    418e:	0003      	movs	r3, r0
    4190:	702b      	strb	r3, [r5, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4192:	231c      	movs	r3, #28
    4194:	18fb      	adds	r3, r7, r3
    4196:	2210      	movs	r2, #16
    4198:	18ba      	adds	r2, r7, r2
    419a:	619a      	str	r2, [r3, #24]
	if (res == FR_OK)
    419c:	2347      	movs	r3, #71	; 0x47
    419e:	18fb      	adds	r3, r7, r3
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d10b      	bne.n	41be <f_open+0x72>
		res = follow_path(&dj, path);	/* Follow the file path */
    41a6:	68ba      	ldr	r2, [r7, #8]
    41a8:	2347      	movs	r3, #71	; 0x47
    41aa:	18fd      	adds	r5, r7, r3
    41ac:	231c      	movs	r3, #28
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	0011      	movs	r1, r2
    41b2:	0018      	movs	r0, r3
    41b4:	4bbc      	ldr	r3, [pc, #752]	; (44a8 <f_open+0x35c>)
    41b6:	447b      	add	r3, pc
    41b8:	4798      	blx	r3
    41ba:	0003      	movs	r3, r0
    41bc:	702b      	strb	r3, [r5, #0]
	dir = dj.dir;
    41be:	231c      	movs	r3, #28
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	695b      	ldr	r3, [r3, #20]
    41c4:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    41c6:	2347      	movs	r3, #71	; 0x47
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d106      	bne.n	41de <f_open+0x92>
		if (!dir)	/* Current dir itself */
    41d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41d2:	2b00      	cmp	r3, #0
    41d4:	d103      	bne.n	41de <f_open+0x92>
			res = FR_INVALID_NAME;
    41d6:	2347      	movs	r3, #71	; 0x47
    41d8:	18fb      	adds	r3, r7, r3
    41da:	2206      	movs	r2, #6
    41dc:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    41de:	1dfb      	adds	r3, r7, #7
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	221c      	movs	r2, #28
    41e4:	4013      	ands	r3, r2
    41e6:	d100      	bne.n	41ea <f_open+0x9e>
    41e8:	e0cf      	b.n	438a <f_open+0x23e>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    41ea:	2347      	movs	r3, #71	; 0x47
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d019      	beq.n	4228 <f_open+0xdc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    41f4:	2347      	movs	r3, #71	; 0x47
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	2b04      	cmp	r3, #4
    41fc:	d109      	bne.n	4212 <f_open+0xc6>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    41fe:	2347      	movs	r3, #71	; 0x47
    4200:	18fd      	adds	r5, r7, r3
    4202:	231c      	movs	r3, #28
    4204:	18fb      	adds	r3, r7, r3
    4206:	0018      	movs	r0, r3
    4208:	4ba8      	ldr	r3, [pc, #672]	; (44ac <f_open+0x360>)
    420a:	447b      	add	r3, pc
    420c:	4798      	blx	r3
    420e:	0003      	movs	r3, r0
    4210:	702b      	strb	r3, [r5, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4212:	1dfb      	adds	r3, r7, #7
    4214:	1dfa      	adds	r2, r7, #7
    4216:	7812      	ldrb	r2, [r2, #0]
    4218:	2108      	movs	r1, #8
    421a:	430a      	orrs	r2, r1
    421c:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    421e:	231c      	movs	r3, #28
    4220:	18fb      	adds	r3, r7, r3
    4222:	695b      	ldr	r3, [r3, #20]
    4224:	643b      	str	r3, [r7, #64]	; 0x40
    4226:	e014      	b.n	4252 <f_open+0x106>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    422a:	330b      	adds	r3, #11
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	001a      	movs	r2, r3
    4230:	2311      	movs	r3, #17
    4232:	4013      	ands	r3, r2
    4234:	d004      	beq.n	4240 <f_open+0xf4>
				res = FR_DENIED;
    4236:	2347      	movs	r3, #71	; 0x47
    4238:	18fb      	adds	r3, r7, r3
    423a:	2207      	movs	r2, #7
    423c:	701a      	strb	r2, [r3, #0]
    423e:	e008      	b.n	4252 <f_open+0x106>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4240:	1dfb      	adds	r3, r7, #7
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2204      	movs	r2, #4
    4246:	4013      	ands	r3, r2
    4248:	d003      	beq.n	4252 <f_open+0x106>
					res = FR_EXIST;
    424a:	2347      	movs	r3, #71	; 0x47
    424c:	18fb      	adds	r3, r7, r3
    424e:	2208      	movs	r2, #8
    4250:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4252:	2347      	movs	r3, #71	; 0x47
    4254:	18fb      	adds	r3, r7, r3
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	2b00      	cmp	r3, #0
    425a:	d000      	beq.n	425e <f_open+0x112>
    425c:	e0b6      	b.n	43cc <f_open+0x280>
    425e:	1dfb      	adds	r3, r7, #7
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	2208      	movs	r2, #8
    4264:	4013      	ands	r3, r2
    4266:	d100      	bne.n	426a <f_open+0x11e>
    4268:	e0b0      	b.n	43cc <f_open+0x280>
			dw = get_fattime();					/* Created time */
    426a:	4b91      	ldr	r3, [pc, #580]	; (44b0 <f_open+0x364>)
    426c:	58e3      	ldr	r3, [r4, r3]
    426e:	4798      	blx	r3
    4270:	0003      	movs	r3, r0
    4272:	63fb      	str	r3, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
    4274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4276:	330e      	adds	r3, #14
    4278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    427a:	b2d2      	uxtb	r2, r2
    427c:	701a      	strb	r2, [r3, #0]
    427e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4280:	330f      	adds	r3, #15
    4282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4284:	b292      	uxth	r2, r2
    4286:	0a12      	lsrs	r2, r2, #8
    4288:	b292      	uxth	r2, r2
    428a:	b2d2      	uxtb	r2, r2
    428c:	701a      	strb	r2, [r3, #0]
    428e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4290:	3310      	adds	r3, #16
    4292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4294:	0c12      	lsrs	r2, r2, #16
    4296:	b2d2      	uxtb	r2, r2
    4298:	701a      	strb	r2, [r3, #0]
    429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    429c:	3311      	adds	r3, #17
    429e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42a0:	0e12      	lsrs	r2, r2, #24
    42a2:	b2d2      	uxtb	r2, r2
    42a4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    42a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42a8:	330b      	adds	r3, #11
    42aa:	2200      	movs	r2, #0
    42ac:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    42ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42b0:	331c      	adds	r3, #28
    42b2:	2200      	movs	r2, #0
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42b8:	331d      	adds	r3, #29
    42ba:	2200      	movs	r2, #0
    42bc:	701a      	strb	r2, [r3, #0]
    42be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42c0:	331e      	adds	r3, #30
    42c2:	2200      	movs	r2, #0
    42c4:	701a      	strb	r2, [r3, #0]
    42c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42c8:	331f      	adds	r3, #31
    42ca:	2200      	movs	r2, #0
    42cc:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    42ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42d0:	3315      	adds	r3, #21
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	021b      	lsls	r3, r3, #8
    42d6:	b21a      	sxth	r2, r3
    42d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42da:	3314      	adds	r3, #20
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	b21b      	sxth	r3, r3
    42e0:	4313      	orrs	r3, r2
    42e2:	b21b      	sxth	r3, r3
    42e4:	b29b      	uxth	r3, r3
    42e6:	041b      	lsls	r3, r3, #16
    42e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    42ea:	321b      	adds	r2, #27
    42ec:	7812      	ldrb	r2, [r2, #0]
    42ee:	0212      	lsls	r2, r2, #8
    42f0:	b211      	sxth	r1, r2
    42f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    42f4:	321a      	adds	r2, #26
    42f6:	7812      	ldrb	r2, [r2, #0]
    42f8:	b212      	sxth	r2, r2
    42fa:	430a      	orrs	r2, r1
    42fc:	b212      	sxth	r2, r2
    42fe:	b292      	uxth	r2, r2
    4300:	4313      	orrs	r3, r2
    4302:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4306:	331a      	adds	r3, #26
    4308:	2200      	movs	r2, #0
    430a:	701a      	strb	r2, [r3, #0]
    430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    430e:	331b      	adds	r3, #27
    4310:	2200      	movs	r2, #0
    4312:	701a      	strb	r2, [r3, #0]
    4314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4316:	3314      	adds	r3, #20
    4318:	2200      	movs	r2, #0
    431a:	701a      	strb	r2, [r3, #0]
    431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    431e:	3315      	adds	r3, #21
    4320:	2200      	movs	r2, #0
    4322:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    4324:	231c      	movs	r3, #28
    4326:	18fb      	adds	r3, r7, r3
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	2201      	movs	r2, #1
    432c:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4330:	2b00      	cmp	r3, #0
    4332:	d04b      	beq.n	43cc <f_open+0x280>
				dw = dj.fs->winsect;
    4334:	231c      	movs	r3, #28
    4336:	18fb      	adds	r3, r7, r3
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    433c:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
    433e:	231c      	movs	r3, #28
    4340:	18fb      	adds	r3, r7, r3
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	2247      	movs	r2, #71	; 0x47
    4346:	18bc      	adds	r4, r7, r2
    4348:	6bba      	ldr	r2, [r7, #56]	; 0x38
    434a:	0011      	movs	r1, r2
    434c:	0018      	movs	r0, r3
    434e:	4b59      	ldr	r3, [pc, #356]	; (44b4 <f_open+0x368>)
    4350:	447b      	add	r3, pc
    4352:	4798      	blx	r3
    4354:	0003      	movs	r3, r0
    4356:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    4358:	2347      	movs	r3, #71	; 0x47
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	2b00      	cmp	r3, #0
    4360:	d134      	bne.n	43cc <f_open+0x280>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4362:	231c      	movs	r3, #28
    4364:	18fb      	adds	r3, r7, r3
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	6bba      	ldr	r2, [r7, #56]	; 0x38
    436a:	3a01      	subs	r2, #1
    436c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    436e:	231c      	movs	r3, #28
    4370:	18fb      	adds	r3, r7, r3
    4372:	681b      	ldr	r3, [r3, #0]
    4374:	2247      	movs	r2, #71	; 0x47
    4376:	18bc      	adds	r4, r7, r2
    4378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    437a:	0011      	movs	r1, r2
    437c:	0018      	movs	r0, r3
    437e:	4b4e      	ldr	r3, [pc, #312]	; (44b8 <f_open+0x36c>)
    4380:	447b      	add	r3, pc
    4382:	4798      	blx	r3
    4384:	0003      	movs	r3, r0
    4386:	7023      	strb	r3, [r4, #0]
    4388:	e020      	b.n	43cc <f_open+0x280>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    438a:	2347      	movs	r3, #71	; 0x47
    438c:	18fb      	adds	r3, r7, r3
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	d11b      	bne.n	43cc <f_open+0x280>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4396:	330b      	adds	r3, #11
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	001a      	movs	r2, r3
    439c:	2310      	movs	r3, #16
    439e:	4013      	ands	r3, r2
    43a0:	d004      	beq.n	43ac <f_open+0x260>
				res = FR_NO_FILE;
    43a2:	2347      	movs	r3, #71	; 0x47
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	2204      	movs	r2, #4
    43a8:	701a      	strb	r2, [r3, #0]
    43aa:	e00f      	b.n	43cc <f_open+0x280>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	781b      	ldrb	r3, [r3, #0]
    43b0:	2202      	movs	r2, #2
    43b2:	4013      	ands	r3, r2
    43b4:	d00a      	beq.n	43cc <f_open+0x280>
    43b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43b8:	330b      	adds	r3, #11
    43ba:	781b      	ldrb	r3, [r3, #0]
    43bc:	001a      	movs	r2, r3
    43be:	2301      	movs	r3, #1
    43c0:	4013      	ands	r3, r2
    43c2:	d003      	beq.n	43cc <f_open+0x280>
					res = FR_DENIED;
    43c4:	2347      	movs	r3, #71	; 0x47
    43c6:	18fb      	adds	r3, r7, r3
    43c8:	2207      	movs	r2, #7
    43ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    43cc:	2347      	movs	r3, #71	; 0x47
    43ce:	18fb      	adds	r3, r7, r3
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d113      	bne.n	43fe <f_open+0x2b2>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    43d6:	1dfb      	adds	r3, r7, #7
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	2208      	movs	r2, #8
    43dc:	4013      	ands	r3, r2
    43de:	d005      	beq.n	43ec <f_open+0x2a0>
			mode |= FA__WRITTEN;
    43e0:	1dfb      	adds	r3, r7, #7
    43e2:	1dfa      	adds	r2, r7, #7
    43e4:	7812      	ldrb	r2, [r2, #0]
    43e6:	2120      	movs	r1, #32
    43e8:	430a      	orrs	r2, r1
    43ea:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    43ec:	231c      	movs	r3, #28
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    43fc:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    43fe:	2347      	movs	r3, #71	; 0x47
    4400:	18fb      	adds	r3, r7, r3
    4402:	781b      	ldrb	r3, [r3, #0]
    4404:	2b00      	cmp	r3, #0
    4406:	d144      	bne.n	4492 <f_open+0x346>
		fp->flag = mode;					/* File access mode */
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	1dfa      	adds	r2, r7, #7
    440c:	7812      	ldrb	r2, [r2, #0]
    440e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4412:	3315      	adds	r3, #21
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	021b      	lsls	r3, r3, #8
    4418:	b21a      	sxth	r2, r3
    441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    441c:	3314      	adds	r3, #20
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	b21b      	sxth	r3, r3
    4422:	4313      	orrs	r3, r2
    4424:	b21b      	sxth	r3, r3
    4426:	b29b      	uxth	r3, r3
    4428:	041b      	lsls	r3, r3, #16
    442a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    442c:	321b      	adds	r2, #27
    442e:	7812      	ldrb	r2, [r2, #0]
    4430:	0212      	lsls	r2, r2, #8
    4432:	b211      	sxth	r1, r2
    4434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4436:	321a      	adds	r2, #26
    4438:	7812      	ldrb	r2, [r2, #0]
    443a:	b212      	sxth	r2, r2
    443c:	430a      	orrs	r2, r1
    443e:	b212      	sxth	r2, r2
    4440:	b292      	uxth	r2, r2
    4442:	431a      	orrs	r2, r3
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    444a:	331f      	adds	r3, #31
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	061a      	lsls	r2, r3, #24
    4450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4452:	331e      	adds	r3, #30
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	041b      	lsls	r3, r3, #16
    4458:	4313      	orrs	r3, r2
    445a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    445c:	321d      	adds	r2, #29
    445e:	7812      	ldrb	r2, [r2, #0]
    4460:	0212      	lsls	r2, r2, #8
    4462:	4313      	orrs	r3, r2
    4464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4466:	321c      	adds	r2, #28
    4468:	7812      	ldrb	r2, [r2, #0]
    446a:	431a      	orrs	r2, r3
    446c:	68fb      	ldr	r3, [r7, #12]
    446e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	2200      	movs	r2, #0
    4474:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	2200      	movs	r2, #0
    447a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    447c:	231c      	movs	r3, #28
    447e:	18fb      	adds	r3, r7, r3
    4480:	681a      	ldr	r2, [r3, #0]
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	601a      	str	r2, [r3, #0]
    4486:	231c      	movs	r3, #28
    4488:	18fb      	adds	r3, r7, r3
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	88da      	ldrh	r2, [r3, #6]
    448e:	68fb      	ldr	r3, [r7, #12]
    4490:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    4492:	2347      	movs	r3, #71	; 0x47
    4494:	18fb      	adds	r3, r7, r3
    4496:	781b      	ldrb	r3, [r3, #0]
}
    4498:	0018      	movs	r0, r3
    449a:	46bd      	mov	sp, r7
    449c:	b012      	add	sp, #72	; 0x48
    449e:	bdb0      	pop	{r4, r5, r7, pc}
    44a0:	0000dd04 	.word	0x0000dd04
    44a4:	fffff8db 	.word	0xfffff8db
    44a8:	fffff68f 	.word	0xfffff68f
    44ac:	fffff163 	.word	0xfffff163
    44b0:	000001e0 	.word	0x000001e0
    44b4:	ffffe91d 	.word	0xffffe91d
    44b8:	ffffe261 	.word	0xffffe261

000044bc <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    44bc:	b5b0      	push	{r4, r5, r7, lr}
    44be:	b08c      	sub	sp, #48	; 0x30
    44c0:	af00      	add	r7, sp, #0
    44c2:	60f8      	str	r0, [r7, #12]
    44c4:	60b9      	str	r1, [r7, #8]
    44c6:	607a      	str	r2, [r7, #4]
    44c8:	603b      	str	r3, [r7, #0]
    44ca:	4ca1      	ldr	r4, [pc, #644]	; (4750 <f_read+0x294>)
    44cc:	447c      	add	r4, pc
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    44ce:	68bb      	ldr	r3, [r7, #8]
    44d0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    44d2:	683b      	ldr	r3, [r7, #0]
    44d4:	2200      	movs	r2, #0
    44d6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	681a      	ldr	r2, [r3, #0]
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	889b      	ldrh	r3, [r3, #4]
    44e0:	211f      	movs	r1, #31
    44e2:	187d      	adds	r5, r7, r1
    44e4:	0019      	movs	r1, r3
    44e6:	0010      	movs	r0, r2
    44e8:	4b9a      	ldr	r3, [pc, #616]	; (4754 <f_read+0x298>)
    44ea:	447b      	add	r3, pc
    44ec:	4798      	blx	r3
    44ee:	0003      	movs	r3, r0
    44f0:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    44f2:	231f      	movs	r3, #31
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	781b      	ldrb	r3, [r3, #0]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d003      	beq.n	4504 <f_read+0x48>
    44fc:	231f      	movs	r3, #31
    44fe:	18fb      	adds	r3, r7, r3
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	e121      	b.n	4748 <f_read+0x28c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	799b      	ldrb	r3, [r3, #6]
    4508:	b25b      	sxtb	r3, r3
    450a:	2b00      	cmp	r3, #0
    450c:	da01      	bge.n	4512 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    450e:	2302      	movs	r3, #2
    4510:	e11a      	b.n	4748 <f_read+0x28c>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4512:	68fb      	ldr	r3, [r7, #12]
    4514:	799b      	ldrb	r3, [r3, #6]
    4516:	001a      	movs	r2, r3
    4518:	2301      	movs	r3, #1
    451a:	4013      	ands	r3, r2
    451c:	d101      	bne.n	4522 <f_read+0x66>
		LEAVE_FF(fp->fs, FR_DENIED);
    451e:	2307      	movs	r3, #7
    4520:	e112      	b.n	4748 <f_read+0x28c>
	remain = fp->fsize - fp->fptr;
    4522:	68fb      	ldr	r3, [r7, #12]
    4524:	68da      	ldr	r2, [r3, #12]
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	689b      	ldr	r3, [r3, #8]
    452a:	1ad3      	subs	r3, r2, r3
    452c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    452e:	687a      	ldr	r2, [r7, #4]
    4530:	69bb      	ldr	r3, [r7, #24]
    4532:	429a      	cmp	r2, r3
    4534:	d800      	bhi.n	4538 <f_read+0x7c>
    4536:	e102      	b.n	473e <f_read+0x282>
    4538:	69bb      	ldr	r3, [r7, #24]
    453a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    453c:	e0ff      	b.n	473e <f_read+0x282>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	689b      	ldr	r3, [r3, #8]
    4542:	05db      	lsls	r3, r3, #23
    4544:	0ddb      	lsrs	r3, r3, #23
    4546:	d000      	beq.n	454a <f_read+0x8e>
    4548:	e0b4      	b.n	46b4 <f_read+0x1f8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    454a:	68fb      	ldr	r3, [r7, #12]
    454c:	689b      	ldr	r3, [r3, #8]
    454e:	0a5b      	lsrs	r3, r3, #9
    4550:	b2da      	uxtb	r2, r3
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	789b      	ldrb	r3, [r3, #2]
    4558:	3b01      	subs	r3, #1
    455a:	b2d9      	uxtb	r1, r3
    455c:	2317      	movs	r3, #23
    455e:	18fb      	adds	r3, r7, r3
    4560:	400a      	ands	r2, r1
    4562:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    4564:	2317      	movs	r3, #23
    4566:	18fb      	adds	r3, r7, r3
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	d12f      	bne.n	45ce <f_read+0x112>
				if (fp->fptr == 0) {			/* On the top of the file? */
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	689b      	ldr	r3, [r3, #8]
    4572:	2b00      	cmp	r3, #0
    4574:	d103      	bne.n	457e <f_read+0xc2>
					clst = fp->sclust;			/* Follow from the origin */
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	691b      	ldr	r3, [r3, #16]
    457a:	62fb      	str	r3, [r7, #44]	; 0x2c
    457c:	e00a      	b.n	4594 <f_read+0xd8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	681a      	ldr	r2, [r3, #0]
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	695b      	ldr	r3, [r3, #20]
    4586:	0019      	movs	r1, r3
    4588:	0010      	movs	r0, r2
    458a:	4b73      	ldr	r3, [pc, #460]	; (4758 <f_read+0x29c>)
    458c:	447b      	add	r3, pc
    458e:	4798      	blx	r3
    4590:	0003      	movs	r3, r0
    4592:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4596:	2b01      	cmp	r3, #1
    4598:	d809      	bhi.n	45ae <f_read+0xf2>
    459a:	68fb      	ldr	r3, [r7, #12]
    459c:	799b      	ldrb	r3, [r3, #6]
    459e:	2280      	movs	r2, #128	; 0x80
    45a0:	4252      	negs	r2, r2
    45a2:	4313      	orrs	r3, r2
    45a4:	b2da      	uxtb	r2, r3
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	719a      	strb	r2, [r3, #6]
    45aa:	2302      	movs	r3, #2
    45ac:	e0cc      	b.n	4748 <f_read+0x28c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    45ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45b0:	3301      	adds	r3, #1
    45b2:	d109      	bne.n	45c8 <f_read+0x10c>
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	799b      	ldrb	r3, [r3, #6]
    45b8:	2280      	movs	r2, #128	; 0x80
    45ba:	4252      	negs	r2, r2
    45bc:	4313      	orrs	r3, r2
    45be:	b2da      	uxtb	r2, r3
    45c0:	68fb      	ldr	r3, [r7, #12]
    45c2:	719a      	strb	r2, [r3, #6]
    45c4:	2301      	movs	r3, #1
    45c6:	e0bf      	b.n	4748 <f_read+0x28c>
				fp->clust = clst;				/* Update current cluster */
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    45cc:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	681a      	ldr	r2, [r3, #0]
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	695b      	ldr	r3, [r3, #20]
    45d6:	0019      	movs	r1, r3
    45d8:	0010      	movs	r0, r2
    45da:	4b60      	ldr	r3, [pc, #384]	; (475c <f_read+0x2a0>)
    45dc:	447b      	add	r3, pc
    45de:	4798      	blx	r3
    45e0:	0003      	movs	r3, r0
    45e2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    45e4:	693b      	ldr	r3, [r7, #16]
    45e6:	2b00      	cmp	r3, #0
    45e8:	d109      	bne.n	45fe <f_read+0x142>
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	799b      	ldrb	r3, [r3, #6]
    45ee:	2280      	movs	r2, #128	; 0x80
    45f0:	4252      	negs	r2, r2
    45f2:	4313      	orrs	r3, r2
    45f4:	b2da      	uxtb	r2, r3
    45f6:	68fb      	ldr	r3, [r7, #12]
    45f8:	719a      	strb	r2, [r3, #6]
    45fa:	2302      	movs	r3, #2
    45fc:	e0a4      	b.n	4748 <f_read+0x28c>
			sect += csect;
    45fe:	2317      	movs	r3, #23
    4600:	18fb      	adds	r3, r7, r3
    4602:	781b      	ldrb	r3, [r3, #0]
    4604:	693a      	ldr	r2, [r7, #16]
    4606:	18d3      	adds	r3, r2, r3
    4608:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	0a5b      	lsrs	r3, r3, #9
    460e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    4610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4612:	2b00      	cmp	r3, #0
    4614:	d04b      	beq.n	46ae <f_read+0x1f2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4616:	2317      	movs	r3, #23
    4618:	18fb      	adds	r3, r7, r3
    461a:	781a      	ldrb	r2, [r3, #0]
    461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    461e:	18d2      	adds	r2, r2, r3
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	789b      	ldrb	r3, [r3, #2]
    4626:	429a      	cmp	r2, r3
    4628:	d908      	bls.n	463c <f_read+0x180>
					cc = fp->fs->csize - csect;
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	789b      	ldrb	r3, [r3, #2]
    4630:	001a      	movs	r2, r3
    4632:	2317      	movs	r3, #23
    4634:	18fb      	adds	r3, r7, r3
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	1ad3      	subs	r3, r2, r3
    463a:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	7858      	ldrb	r0, [r3, #1]
    4642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4644:	b2db      	uxtb	r3, r3
    4646:	693a      	ldr	r2, [r7, #16]
    4648:	6a39      	ldr	r1, [r7, #32]
    464a:	4d45      	ldr	r5, [pc, #276]	; (4760 <f_read+0x2a4>)
    464c:	5965      	ldr	r5, [r4, r5]
    464e:	47a8      	blx	r5
    4650:	1e03      	subs	r3, r0, #0
    4652:	d009      	beq.n	4668 <f_read+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	799b      	ldrb	r3, [r3, #6]
    4658:	2280      	movs	r2, #128	; 0x80
    465a:	4252      	negs	r2, r2
    465c:	4313      	orrs	r3, r2
    465e:	b2da      	uxtb	r2, r3
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	719a      	strb	r2, [r3, #6]
    4664:	2301      	movs	r3, #1
    4666:	e06f      	b.n	4748 <f_read+0x28c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	791b      	ldrb	r3, [r3, #4]
    466e:	2b00      	cmp	r3, #0
    4670:	d019      	beq.n	46a6 <f_read+0x1ea>
    4672:	68fb      	ldr	r3, [r7, #12]
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4678:	693b      	ldr	r3, [r7, #16]
    467a:	1ad2      	subs	r2, r2, r3
    467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    467e:	429a      	cmp	r2, r3
    4680:	d211      	bcs.n	46a6 <f_read+0x1ea>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	1ad3      	subs	r3, r2, r3
    468c:	025b      	lsls	r3, r3, #9
    468e:	6a3a      	ldr	r2, [r7, #32]
    4690:	18d0      	adds	r0, r2, r3
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	3330      	adds	r3, #48	; 0x30
    4698:	0019      	movs	r1, r3
    469a:	2380      	movs	r3, #128	; 0x80
    469c:	009b      	lsls	r3, r3, #2
    469e:	001a      	movs	r2, r3
    46a0:	4b30      	ldr	r3, [pc, #192]	; (4764 <f_read+0x2a8>)
    46a2:	447b      	add	r3, pc
    46a4:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	025b      	lsls	r3, r3, #9
    46aa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    46ac:	e033      	b.n	4716 <f_read+0x25a>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    46ae:	68fb      	ldr	r3, [r7, #12]
    46b0:	693a      	ldr	r2, [r7, #16]
    46b2:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    46b4:	68fb      	ldr	r3, [r7, #12]
    46b6:	689b      	ldr	r3, [r3, #8]
    46b8:	05db      	lsls	r3, r3, #23
    46ba:	0ddb      	lsrs	r3, r3, #23
    46bc:	2280      	movs	r2, #128	; 0x80
    46be:	0092      	lsls	r2, r2, #2
    46c0:	1ad3      	subs	r3, r2, r3
    46c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    46c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	429a      	cmp	r2, r3
    46ca:	d901      	bls.n	46d0 <f_read+0x214>
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	681a      	ldr	r2, [r3, #0]
    46d4:	68fb      	ldr	r3, [r7, #12]
    46d6:	699b      	ldr	r3, [r3, #24]
    46d8:	0019      	movs	r1, r3
    46da:	0010      	movs	r0, r2
    46dc:	4b22      	ldr	r3, [pc, #136]	; (4768 <f_read+0x2ac>)
    46de:	447b      	add	r3, pc
    46e0:	4798      	blx	r3
    46e2:	1e03      	subs	r3, r0, #0
    46e4:	d009      	beq.n	46fa <f_read+0x23e>
			ABORT(fp->fs, FR_DISK_ERR);
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	799b      	ldrb	r3, [r3, #6]
    46ea:	2280      	movs	r2, #128	; 0x80
    46ec:	4252      	negs	r2, r2
    46ee:	4313      	orrs	r3, r2
    46f0:	b2da      	uxtb	r2, r3
    46f2:	68fb      	ldr	r3, [r7, #12]
    46f4:	719a      	strb	r2, [r3, #6]
    46f6:	2301      	movs	r3, #1
    46f8:	e026      	b.n	4748 <f_read+0x28c>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	681a      	ldr	r2, [r3, #0]
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	689b      	ldr	r3, [r3, #8]
    4702:	05db      	lsls	r3, r3, #23
    4704:	0ddb      	lsrs	r3, r3, #23
    4706:	3330      	adds	r3, #48	; 0x30
    4708:	18d1      	adds	r1, r2, r3
    470a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    470c:	6a3b      	ldr	r3, [r7, #32]
    470e:	0018      	movs	r0, r3
    4710:	4b16      	ldr	r3, [pc, #88]	; (476c <f_read+0x2b0>)
    4712:	447b      	add	r3, pc
    4714:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    4716:	6a3a      	ldr	r2, [r7, #32]
    4718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    471a:	18d3      	adds	r3, r2, r3
    471c:	623b      	str	r3, [r7, #32]
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	689a      	ldr	r2, [r3, #8]
    4722:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4724:	18d2      	adds	r2, r2, r3
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	609a      	str	r2, [r3, #8]
    472a:	683b      	ldr	r3, [r7, #0]
    472c:	681a      	ldr	r2, [r3, #0]
    472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4730:	18d2      	adds	r2, r2, r3
    4732:	683b      	ldr	r3, [r7, #0]
    4734:	601a      	str	r2, [r3, #0]
    4736:	687a      	ldr	r2, [r7, #4]
    4738:	6abb      	ldr	r3, [r7, #40]	; 0x28
    473a:	1ad3      	subs	r3, r2, r3
    473c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	2b00      	cmp	r3, #0
    4742:	d000      	beq.n	4746 <f_read+0x28a>
    4744:	e6fb      	b.n	453e <f_read+0x82>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    4746:	2300      	movs	r3, #0
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	b00c      	add	sp, #48	; 0x30
    474e:	bdb0      	pop	{r4, r5, r7, pc}
    4750:	0000d994 	.word	0x0000d994
    4754:	fffffba3 	.word	0xfffffba3
    4758:	ffffe311 	.word	0xffffe311
    475c:	ffffe289 	.word	0xffffe289
    4760:	000002c0 	.word	0x000002c0
    4764:	ffffde5b 	.word	0xffffde5b
    4768:	ffffdf03 	.word	0xffffdf03
    476c:	ffffddeb 	.word	0xffffddeb

00004770 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    4770:	b590      	push	{r4, r7, lr}
    4772:	b08f      	sub	sp, #60	; 0x3c
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
    4778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    477a:	2337      	movs	r3, #55	; 0x37
    477c:	18fc      	adds	r4, r7, r3
    477e:	2318      	movs	r3, #24
    4780:	18f9      	adds	r1, r7, r3
    4782:	1d3b      	adds	r3, r7, #4
    4784:	2200      	movs	r2, #0
    4786:	0018      	movs	r0, r3
    4788:	4b1c      	ldr	r3, [pc, #112]	; (47fc <f_stat+0x8c>)
    478a:	447b      	add	r3, pc
    478c:	4798      	blx	r3
    478e:	0003      	movs	r3, r0
    4790:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    4792:	2337      	movs	r3, #55	; 0x37
    4794:	18fb      	adds	r3, r7, r3
    4796:	781b      	ldrb	r3, [r3, #0]
    4798:	2b00      	cmp	r3, #0
    479a:	d127      	bne.n	47ec <f_stat+0x7c>
		INIT_BUF(dj);
    479c:	2318      	movs	r3, #24
    479e:	18fb      	adds	r3, r7, r3
    47a0:	220c      	movs	r2, #12
    47a2:	18ba      	adds	r2, r7, r2
    47a4:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
    47a6:	687a      	ldr	r2, [r7, #4]
    47a8:	2337      	movs	r3, #55	; 0x37
    47aa:	18fc      	adds	r4, r7, r3
    47ac:	2318      	movs	r3, #24
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	0011      	movs	r1, r2
    47b2:	0018      	movs	r0, r3
    47b4:	4b12      	ldr	r3, [pc, #72]	; (4800 <f_stat+0x90>)
    47b6:	447b      	add	r3, pc
    47b8:	4798      	blx	r3
    47ba:	0003      	movs	r3, r0
    47bc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {				/* Follow completed */
    47be:	2337      	movs	r3, #55	; 0x37
    47c0:	18fb      	adds	r3, r7, r3
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d111      	bne.n	47ec <f_stat+0x7c>
			if (dj.dir)		/* Found an object */
    47c8:	2318      	movs	r3, #24
    47ca:	18fb      	adds	r3, r7, r3
    47cc:	695b      	ldr	r3, [r3, #20]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d008      	beq.n	47e4 <f_stat+0x74>
				get_fileinfo(&dj, fno);
    47d2:	683a      	ldr	r2, [r7, #0]
    47d4:	2318      	movs	r3, #24
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	0011      	movs	r1, r2
    47da:	0018      	movs	r0, r3
    47dc:	4b09      	ldr	r3, [pc, #36]	; (4804 <f_stat+0x94>)
    47de:	447b      	add	r3, pc
    47e0:	4798      	blx	r3
    47e2:	e003      	b.n	47ec <f_stat+0x7c>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    47e4:	2337      	movs	r3, #55	; 0x37
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	2206      	movs	r2, #6
    47ea:	701a      	strb	r2, [r3, #0]
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    47ec:	2337      	movs	r3, #55	; 0x37
    47ee:	18fb      	adds	r3, r7, r3
    47f0:	781b      	ldrb	r3, [r3, #0]
}
    47f2:	0018      	movs	r0, r3
    47f4:	46bd      	mov	sp, r7
    47f6:	b00f      	add	sp, #60	; 0x3c
    47f8:	bd90      	pop	{r4, r7, pc}
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	fffff2db 	.word	0xfffff2db
    4800:	fffff08f 	.word	0xfffff08f
    4804:	ffffef27 	.word	0xffffef27

00004808 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    4808:	b590      	push	{r4, r7, lr}
    480a:	b097      	sub	sp, #92	; 0x5c
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4810:	2357      	movs	r3, #87	; 0x57
    4812:	18fc      	adds	r4, r7, r3
    4814:	2330      	movs	r3, #48	; 0x30
    4816:	18f9      	adds	r1, r7, r3
    4818:	1d3b      	adds	r3, r7, #4
    481a:	2201      	movs	r2, #1
    481c:	0018      	movs	r0, r3
    481e:	4b6e      	ldr	r3, [pc, #440]	; (49d8 <f_unlink+0x1d0>)
    4820:	447b      	add	r3, pc
    4822:	4798      	blx	r3
    4824:	0003      	movs	r3, r0
    4826:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    4828:	2357      	movs	r3, #87	; 0x57
    482a:	18fb      	adds	r3, r7, r3
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d000      	beq.n	4834 <f_unlink+0x2c>
    4832:	e0c9      	b.n	49c8 <f_unlink+0x1c0>
		INIT_BUF(dj);
    4834:	2330      	movs	r3, #48	; 0x30
    4836:	18fb      	adds	r3, r7, r3
    4838:	2208      	movs	r2, #8
    483a:	18ba      	adds	r2, r7, r2
    483c:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);		/* Follow the file path */
    483e:	687a      	ldr	r2, [r7, #4]
    4840:	2357      	movs	r3, #87	; 0x57
    4842:	18fc      	adds	r4, r7, r3
    4844:	2330      	movs	r3, #48	; 0x30
    4846:	18fb      	adds	r3, r7, r3
    4848:	0011      	movs	r1, r2
    484a:	0018      	movs	r0, r3
    484c:	4b63      	ldr	r3, [pc, #396]	; (49dc <f_unlink+0x1d4>)
    484e:	447b      	add	r3, pc
    4850:	4798      	blx	r3
    4852:	0003      	movs	r3, r0
    4854:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    4856:	2357      	movs	r3, #87	; 0x57
    4858:	18fb      	adds	r3, r7, r3
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	2b00      	cmp	r3, #0
    485e:	d000      	beq.n	4862 <f_unlink+0x5a>
    4860:	e0b2      	b.n	49c8 <f_unlink+0x1c0>
			dir = dj.dir;
    4862:	2330      	movs	r3, #48	; 0x30
    4864:	18fb      	adds	r3, r7, r3
    4866:	695b      	ldr	r3, [r3, #20]
    4868:	653b      	str	r3, [r7, #80]	; 0x50
			if (!dir) {
    486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    486c:	2b00      	cmp	r3, #0
    486e:	d104      	bne.n	487a <f_unlink+0x72>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    4870:	2357      	movs	r3, #87	; 0x57
    4872:	18fb      	adds	r3, r7, r3
    4874:	2206      	movs	r2, #6
    4876:	701a      	strb	r2, [r3, #0]
    4878:	e00a      	b.n	4890 <f_unlink+0x88>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    487a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    487c:	330b      	adds	r3, #11
    487e:	781b      	ldrb	r3, [r3, #0]
    4880:	001a      	movs	r2, r3
    4882:	2301      	movs	r3, #1
    4884:	4013      	ands	r3, r2
    4886:	d003      	beq.n	4890 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
    4888:	2357      	movs	r3, #87	; 0x57
    488a:	18fb      	adds	r3, r7, r3
    488c:	2207      	movs	r2, #7
    488e:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    4890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4892:	3315      	adds	r3, #21
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	021b      	lsls	r3, r3, #8
    4898:	b21a      	sxth	r2, r3
    489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    489c:	3314      	adds	r3, #20
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	b21b      	sxth	r3, r3
    48a2:	4313      	orrs	r3, r2
    48a4:	b21b      	sxth	r3, r3
    48a6:	b29b      	uxth	r3, r3
    48a8:	041b      	lsls	r3, r3, #16
    48aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48ac:	321b      	adds	r2, #27
    48ae:	7812      	ldrb	r2, [r2, #0]
    48b0:	0212      	lsls	r2, r2, #8
    48b2:	b211      	sxth	r1, r2
    48b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48b6:	321a      	adds	r2, #26
    48b8:	7812      	ldrb	r2, [r2, #0]
    48ba:	b212      	sxth	r2, r2
    48bc:	430a      	orrs	r2, r1
    48be:	b212      	sxth	r2, r2
    48c0:	b292      	uxth	r2, r2
    48c2:	4313      	orrs	r3, r2
    48c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    48c6:	2357      	movs	r3, #87	; 0x57
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d147      	bne.n	4960 <f_unlink+0x158>
    48d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    48d2:	330b      	adds	r3, #11
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	001a      	movs	r2, r3
    48d8:	2310      	movs	r3, #16
    48da:	4013      	ands	r3, r2
    48dc:	d040      	beq.n	4960 <f_unlink+0x158>
				if (dclst < 2) {
    48de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48e0:	2b01      	cmp	r3, #1
    48e2:	d804      	bhi.n	48ee <f_unlink+0xe6>
					res = FR_INT_ERR;
    48e4:	2357      	movs	r3, #87	; 0x57
    48e6:	18fb      	adds	r3, r7, r3
    48e8:	2202      	movs	r2, #2
    48ea:	701a      	strb	r2, [r3, #0]
    48ec:	e038      	b.n	4960 <f_unlink+0x158>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    48ee:	2330      	movs	r3, #48	; 0x30
    48f0:	18f9      	adds	r1, r7, r3
    48f2:	2314      	movs	r3, #20
    48f4:	18fb      	adds	r3, r7, r3
    48f6:	221c      	movs	r2, #28
    48f8:	0018      	movs	r0, r3
    48fa:	4b39      	ldr	r3, [pc, #228]	; (49e0 <f_unlink+0x1d8>)
    48fc:	447b      	add	r3, pc
    48fe:	4798      	blx	r3
					sdj.sclust = dclst;
    4900:	2314      	movs	r3, #20
    4902:	18fb      	adds	r3, r7, r3
    4904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4906:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    4908:	2357      	movs	r3, #87	; 0x57
    490a:	18fc      	adds	r4, r7, r3
    490c:	2314      	movs	r3, #20
    490e:	18fb      	adds	r3, r7, r3
    4910:	2102      	movs	r1, #2
    4912:	0018      	movs	r0, r3
    4914:	4b33      	ldr	r3, [pc, #204]	; (49e4 <f_unlink+0x1dc>)
    4916:	447b      	add	r3, pc
    4918:	4798      	blx	r3
    491a:	0003      	movs	r3, r0
    491c:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    491e:	2357      	movs	r3, #87	; 0x57
    4920:	18fb      	adds	r3, r7, r3
    4922:	781b      	ldrb	r3, [r3, #0]
    4924:	2b00      	cmp	r3, #0
    4926:	d11b      	bne.n	4960 <f_unlink+0x158>
						res = dir_read(&sdj);
    4928:	2357      	movs	r3, #87	; 0x57
    492a:	18fc      	adds	r4, r7, r3
    492c:	2314      	movs	r3, #20
    492e:	18fb      	adds	r3, r7, r3
    4930:	0018      	movs	r0, r3
    4932:	4b2d      	ldr	r3, [pc, #180]	; (49e8 <f_unlink+0x1e0>)
    4934:	447b      	add	r3, pc
    4936:	4798      	blx	r3
    4938:	0003      	movs	r3, r0
    493a:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    493c:	2357      	movs	r3, #87	; 0x57
    493e:	18fb      	adds	r3, r7, r3
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	2b00      	cmp	r3, #0
    4944:	d103      	bne.n	494e <f_unlink+0x146>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    4946:	2357      	movs	r3, #87	; 0x57
    4948:	18fb      	adds	r3, r7, r3
    494a:	2207      	movs	r2, #7
    494c:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    494e:	2357      	movs	r3, #87	; 0x57
    4950:	18fb      	adds	r3, r7, r3
    4952:	781b      	ldrb	r3, [r3, #0]
    4954:	2b04      	cmp	r3, #4
    4956:	d103      	bne.n	4960 <f_unlink+0x158>
    4958:	2357      	movs	r3, #87	; 0x57
    495a:	18fb      	adds	r3, r7, r3
    495c:	2200      	movs	r2, #0
    495e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    4960:	2357      	movs	r3, #87	; 0x57
    4962:	18fb      	adds	r3, r7, r3
    4964:	781b      	ldrb	r3, [r3, #0]
    4966:	2b00      	cmp	r3, #0
    4968:	d12e      	bne.n	49c8 <f_unlink+0x1c0>
				res = dir_remove(&dj);		/* Remove the directory entry */
    496a:	2357      	movs	r3, #87	; 0x57
    496c:	18fc      	adds	r4, r7, r3
    496e:	2330      	movs	r3, #48	; 0x30
    4970:	18fb      	adds	r3, r7, r3
    4972:	0018      	movs	r0, r3
    4974:	4b1d      	ldr	r3, [pc, #116]	; (49ec <f_unlink+0x1e4>)
    4976:	447b      	add	r3, pc
    4978:	4798      	blx	r3
    497a:	0003      	movs	r3, r0
    497c:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    497e:	2357      	movs	r3, #87	; 0x57
    4980:	18fb      	adds	r3, r7, r3
    4982:	781b      	ldrb	r3, [r3, #0]
    4984:	2b00      	cmp	r3, #0
    4986:	d11f      	bne.n	49c8 <f_unlink+0x1c0>
					if (dclst)				/* Remove the cluster chain if exist */
    4988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    498a:	2b00      	cmp	r3, #0
    498c:	d00c      	beq.n	49a8 <f_unlink+0x1a0>
						res = remove_chain(dj.fs, dclst);
    498e:	2330      	movs	r3, #48	; 0x30
    4990:	18fb      	adds	r3, r7, r3
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	2257      	movs	r2, #87	; 0x57
    4996:	18bc      	adds	r4, r7, r2
    4998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    499a:	0011      	movs	r1, r2
    499c:	0018      	movs	r0, r3
    499e:	4b14      	ldr	r3, [pc, #80]	; (49f0 <f_unlink+0x1e8>)
    49a0:	447b      	add	r3, pc
    49a2:	4798      	blx	r3
    49a4:	0003      	movs	r3, r0
    49a6:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    49a8:	2357      	movs	r3, #87	; 0x57
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d10a      	bne.n	49c8 <f_unlink+0x1c0>
    49b2:	2330      	movs	r3, #48	; 0x30
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	2257      	movs	r2, #87	; 0x57
    49ba:	18bc      	adds	r4, r7, r2
    49bc:	0018      	movs	r0, r3
    49be:	4b0d      	ldr	r3, [pc, #52]	; (49f4 <f_unlink+0x1ec>)
    49c0:	447b      	add	r3, pc
    49c2:	4798      	blx	r3
    49c4:	0003      	movs	r3, r0
    49c6:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    49c8:	2357      	movs	r3, #87	; 0x57
    49ca:	18fb      	adds	r3, r7, r3
    49cc:	781b      	ldrb	r3, [r3, #0]
}
    49ce:	0018      	movs	r0, r3
    49d0:	46bd      	mov	sp, r7
    49d2:	b017      	add	sp, #92	; 0x5c
    49d4:	bd90      	pop	{r4, r7, pc}
    49d6:	46c0      	nop			; (mov r8, r8)
    49d8:	fffff245 	.word	0xfffff245
    49dc:	ffffeff7 	.word	0xffffeff7
    49e0:	ffffdc01 	.word	0xffffdc01
    49e4:	ffffe56f 	.word	0xffffe56f
    49e8:	ffffe965 	.word	0xffffe965
    49ec:	ffffeb03 	.word	0xffffeb03
    49f0:	ffffe2cd 	.word	0xffffe2cd
    49f4:	ffffdcf9 	.word	0xffffdcf9

000049f8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    49fc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    4a00:	4b02      	ldr	r3, [pc, #8]	; (4a0c <NVIC_SystemReset+0x14>)
    4a02:	4a03      	ldr	r2, [pc, #12]	; (4a10 <NVIC_SystemReset+0x18>)
    4a04:	60da      	str	r2, [r3, #12]
    4a06:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    4a0a:	e7fe      	b.n	4a0a <NVIC_SystemReset+0x12>
    4a0c:	e000ed00 	.word	0xe000ed00
    4a10:	05fa0004 	.word	0x05fa0004

00004a14 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	b082      	sub	sp, #8
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	2200      	movs	r2, #0
    4a20:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	2200      	movs	r2, #0
    4a26:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	2208      	movs	r2, #8
    4a2c:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	2227      	movs	r2, #39	; 0x27
    4a32:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    4a34:	687b      	ldr	r3, [r7, #4]
    4a36:	2201      	movs	r2, #1
    4a38:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	2201      	movs	r2, #1
    4a3e:	71da      	strb	r2, [r3, #7]
}
    4a40:	46c0      	nop			; (mov r8, r8)
    4a42:	46bd      	mov	sp, r7
    4a44:	b002      	add	sp, #8
    4a46:	bd80      	pop	{r7, pc}

00004a48 <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b082      	sub	sp, #8
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	0002      	movs	r2, r0
    4a50:	1dfb      	adds	r3, r7, #7
    4a52:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    4a54:	1dfb      	adds	r3, r7, #7
    4a56:	781b      	ldrb	r3, [r3, #0]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d108      	bne.n	4a6e <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    4a5c:	4b06      	ldr	r3, [pc, #24]	; (4a78 <bod_enable+0x30>)
    4a5e:	4a06      	ldr	r2, [pc, #24]	; (4a78 <bod_enable+0x30>)
    4a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
    4a62:	2102      	movs	r1, #2
    4a64:	430a      	orrs	r2, r1
    4a66:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    4a68:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4a6a:	2300      	movs	r3, #0
    4a6c:	e000      	b.n	4a70 <bod_enable+0x28>
			return STATUS_ERR_INVALID_ARG;
    4a6e:	2317      	movs	r3, #23
}
    4a70:	0018      	movs	r0, r3
    4a72:	46bd      	mov	sp, r7
    4a74:	b002      	add	sp, #8
    4a76:	bd80      	pop	{r7, pc}
    4a78:	40000800 	.word	0x40000800

00004a7c <system_gclk_chan_get_config_defaults>:
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b082      	sub	sp, #8
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	2200      	movs	r2, #0
    4a88:	701a      	strb	r2, [r3, #0]
}
    4a8a:	46c0      	nop			; (mov r8, r8)
    4a8c:	46bd      	mov	sp, r7
    4a8e:	b002      	add	sp, #8
    4a90:	bd80      	pop	{r7, pc}
	...

00004a94 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a94:	b580      	push	{r7, lr}
    4a96:	b084      	sub	sp, #16
    4a98:	af00      	add	r7, sp, #0
    4a9a:	0002      	movs	r2, r0
    4a9c:	1dfb      	adds	r3, r7, #7
    4a9e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4aa0:	230f      	movs	r3, #15
    4aa2:	18fb      	adds	r3, r7, r3
    4aa4:	1dfa      	adds	r2, r7, #7
    4aa6:	7812      	ldrb	r2, [r2, #0]
    4aa8:	09d2      	lsrs	r2, r2, #7
    4aaa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4aac:	230e      	movs	r3, #14
    4aae:	18fb      	adds	r3, r7, r3
    4ab0:	1dfa      	adds	r2, r7, #7
    4ab2:	7812      	ldrb	r2, [r2, #0]
    4ab4:	0952      	lsrs	r2, r2, #5
    4ab6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4ab8:	4b0d      	ldr	r3, [pc, #52]	; (4af0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4abc:	230f      	movs	r3, #15
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	781b      	ldrb	r3, [r3, #0]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d10f      	bne.n	4ae6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4ac6:	230f      	movs	r3, #15
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	781b      	ldrb	r3, [r3, #0]
    4acc:	009b      	lsls	r3, r3, #2
    4ace:	2210      	movs	r2, #16
    4ad0:	4694      	mov	ip, r2
    4ad2:	44bc      	add	ip, r7
    4ad4:	4463      	add	r3, ip
    4ad6:	3b08      	subs	r3, #8
    4ad8:	681a      	ldr	r2, [r3, #0]
    4ada:	230e      	movs	r3, #14
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	01db      	lsls	r3, r3, #7
    4ae2:	18d3      	adds	r3, r2, r3
    4ae4:	e000      	b.n	4ae8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4ae6:	2300      	movs	r3, #0
	}
}
    4ae8:	0018      	movs	r0, r3
    4aea:	46bd      	mov	sp, r7
    4aec:	b004      	add	sp, #16
    4aee:	bd80      	pop	{r7, pc}
    4af0:	41004400 	.word	0x41004400

00004af4 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	2200      	movs	r2, #0
    4b00:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	2201      	movs	r2, #1
    4b06:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4b08:	4b08      	ldr	r3, [pc, #32]	; (4b2c <nvm_get_config_defaults+0x38>)
    4b0a:	685b      	ldr	r3, [r3, #4]
    4b0c:	06db      	lsls	r3, r3, #27
    4b0e:	0f1b      	lsrs	r3, r3, #28
    4b10:	b2db      	uxtb	r3, r3
    4b12:	001a      	movs	r2, r3
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	2200      	movs	r2, #0
    4b1c:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	2200      	movs	r2, #0
    4b22:	711a      	strb	r2, [r3, #4]
}
    4b24:	46c0      	nop			; (mov r8, r8)
    4b26:	46bd      	mov	sp, r7
    4b28:	b002      	add	sp, #8
    4b2a:	bd80      	pop	{r7, pc}
    4b2c:	41004000 	.word	0x41004000

00004b30 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b082      	sub	sp, #8
    4b34:	af00      	add	r7, sp, #0
    4b36:	0002      	movs	r2, r0
    4b38:	1dfb      	adds	r3, r7, #7
    4b3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4b3c:	1dfb      	adds	r3, r7, #7
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	0018      	movs	r0, r3
    4b42:	4b04      	ldr	r3, [pc, #16]	; (4b54 <port_get_group_from_gpio_pin+0x24>)
    4b44:	447b      	add	r3, pc
    4b46:	4798      	blx	r3
    4b48:	0003      	movs	r3, r0
}
    4b4a:	0018      	movs	r0, r3
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b002      	add	sp, #8
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	ffffff4d 	.word	0xffffff4d

00004b58 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b082      	sub	sp, #8
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2200      	movs	r2, #0
    4b64:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	2201      	movs	r2, #1
    4b6a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	2200      	movs	r2, #0
    4b70:	709a      	strb	r2, [r3, #2]
}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	46bd      	mov	sp, r7
    4b76:	b002      	add	sp, #8
    4b78:	bd80      	pop	{r7, pc}
	...

00004b7c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	0002      	movs	r2, r0
    4b84:	1dfb      	adds	r3, r7, #7
    4b86:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b88:	1dfb      	adds	r3, r7, #7
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	0018      	movs	r0, r3
    4b8e:	4b0c      	ldr	r3, [pc, #48]	; (4bc0 <port_pin_get_input_level+0x44>)
    4b90:	447b      	add	r3, pc
    4b92:	4798      	blx	r3
    4b94:	0003      	movs	r3, r0
    4b96:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b98:	1dfb      	adds	r3, r7, #7
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	221f      	movs	r2, #31
    4b9e:	4013      	ands	r3, r2
    4ba0:	2201      	movs	r2, #1
    4ba2:	409a      	lsls	r2, r3
    4ba4:	0013      	movs	r3, r2
    4ba6:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	6a1b      	ldr	r3, [r3, #32]
    4bac:	68ba      	ldr	r2, [r7, #8]
    4bae:	4013      	ands	r3, r2
    4bb0:	1e5a      	subs	r2, r3, #1
    4bb2:	4193      	sbcs	r3, r2
    4bb4:	b2db      	uxtb	r3, r3
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b004      	add	sp, #16
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	ffffff9d 	.word	0xffffff9d

00004bc4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b084      	sub	sp, #16
    4bc8:	af00      	add	r7, sp, #0
    4bca:	0002      	movs	r2, r0
    4bcc:	1dfb      	adds	r3, r7, #7
    4bce:	701a      	strb	r2, [r3, #0]
    4bd0:	1dbb      	adds	r3, r7, #6
    4bd2:	1c0a      	adds	r2, r1, #0
    4bd4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4bd6:	1dfb      	adds	r3, r7, #7
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	0018      	movs	r0, r3
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <port_pin_set_output_level+0x50>)
    4bde:	447b      	add	r3, pc
    4be0:	4798      	blx	r3
    4be2:	0003      	movs	r3, r0
    4be4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4be6:	1dfb      	adds	r3, r7, #7
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	221f      	movs	r2, #31
    4bec:	4013      	ands	r3, r2
    4bee:	2201      	movs	r2, #1
    4bf0:	409a      	lsls	r2, r3
    4bf2:	0013      	movs	r3, r2
    4bf4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4bf6:	1dbb      	adds	r3, r7, #6
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d003      	beq.n	4c06 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	68ba      	ldr	r2, [r7, #8]
    4c02:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4c04:	e002      	b.n	4c0c <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	68ba      	ldr	r2, [r7, #8]
    4c0a:	615a      	str	r2, [r3, #20]
}
    4c0c:	46c0      	nop			; (mov r8, r8)
    4c0e:	46bd      	mov	sp, r7
    4c10:	b004      	add	sp, #16
    4c12:	bd80      	pop	{r7, pc}
    4c14:	ffffff4f 	.word	0xffffff4f

00004c18 <system_interrupt_enable_global>:
{
    4c18:	b580      	push	{r7, lr}
    4c1a:	af00      	add	r7, sp, #0
    4c1c:	4a05      	ldr	r2, [pc, #20]	; (4c34 <system_interrupt_enable_global+0x1c>)
    4c1e:	447a      	add	r2, pc
	cpu_irq_enable();
    4c20:	4b05      	ldr	r3, [pc, #20]	; (4c38 <system_interrupt_enable_global+0x20>)
    4c22:	58d3      	ldr	r3, [r2, r3]
    4c24:	2201      	movs	r2, #1
    4c26:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4c28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4c2c:	b662      	cpsie	i
}
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	46bd      	mov	sp, r7
    4c32:	bd80      	pop	{r7, pc}
    4c34:	0000d242 	.word	0x0000d242
    4c38:	000000ec 	.word	0x000000ec

00004c3c <system_interrupt_disable_global>:
{
    4c3c:	b580      	push	{r7, lr}
    4c3e:	af00      	add	r7, sp, #0
    4c40:	4a05      	ldr	r2, [pc, #20]	; (4c58 <system_interrupt_disable_global+0x1c>)
    4c42:	447a      	add	r2, pc
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4c44:	b672      	cpsid	i
    4c46:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4c4a:	4b04      	ldr	r3, [pc, #16]	; (4c5c <system_interrupt_disable_global+0x20>)
    4c4c:	58d3      	ldr	r3, [r2, r3]
    4c4e:	2200      	movs	r2, #0
    4c50:	701a      	strb	r2, [r3, #0]
}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	46bd      	mov	sp, r7
    4c56:	bd80      	pop	{r7, pc}
    4c58:	0000d21e 	.word	0x0000d21e
    4c5c:	000000ec 	.word	0x000000ec

00004c60 <system_interrupt_enable>:
{
    4c60:	b580      	push	{r7, lr}
    4c62:	b082      	sub	sp, #8
    4c64:	af00      	add	r7, sp, #0
    4c66:	0002      	movs	r2, r0
    4c68:	1dfb      	adds	r3, r7, #7
    4c6a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c6c:	4b06      	ldr	r3, [pc, #24]	; (4c88 <system_interrupt_enable+0x28>)
    4c6e:	1dfa      	adds	r2, r7, #7
    4c70:	7812      	ldrb	r2, [r2, #0]
    4c72:	0011      	movs	r1, r2
    4c74:	221f      	movs	r2, #31
    4c76:	400a      	ands	r2, r1
    4c78:	2101      	movs	r1, #1
    4c7a:	4091      	lsls	r1, r2
    4c7c:	000a      	movs	r2, r1
    4c7e:	601a      	str	r2, [r3, #0]
}
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	b002      	add	sp, #8
    4c86:	bd80      	pop	{r7, pc}
    4c88:	e000e100 	.word	0xe000e100

00004c8c <system_interrupt_disable>:
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b082      	sub	sp, #8
    4c90:	af00      	add	r7, sp, #0
    4c92:	0002      	movs	r2, r0
    4c94:	1dfb      	adds	r3, r7, #7
    4c96:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c98:	4a07      	ldr	r2, [pc, #28]	; (4cb8 <system_interrupt_disable+0x2c>)
    4c9a:	1dfb      	adds	r3, r7, #7
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	0019      	movs	r1, r3
    4ca0:	231f      	movs	r3, #31
    4ca2:	400b      	ands	r3, r1
    4ca4:	2101      	movs	r1, #1
    4ca6:	4099      	lsls	r1, r3
    4ca8:	000b      	movs	r3, r1
    4caa:	0019      	movs	r1, r3
    4cac:	2380      	movs	r3, #128	; 0x80
    4cae:	50d1      	str	r1, [r2, r3]
}
    4cb0:	46c0      	nop			; (mov r8, r8)
    4cb2:	46bd      	mov	sp, r7
    4cb4:	b002      	add	sp, #8
    4cb6:	bd80      	pop	{r7, pc}
    4cb8:	e000e100 	.word	0xe000e100

00004cbc <rtc_calendar_get_time_defaults>:
{
    4cbc:	b580      	push	{r7, lr}
    4cbe:	b082      	sub	sp, #8
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	6078      	str	r0, [r7, #4]
	time->second = 0;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	2200      	movs	r2, #0
    4cce:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	2200      	movs	r2, #0
    4cd4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	2200      	movs	r2, #0
    4cda:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	2201      	movs	r2, #1
    4ce0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	2201      	movs	r2, #1
    4ce6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	22fa      	movs	r2, #250	; 0xfa
    4cec:	00d2      	lsls	r2, r2, #3
    4cee:	80da      	strh	r2, [r3, #6]
}
    4cf0:	46c0      	nop			; (mov r8, r8)
    4cf2:	46bd      	mov	sp, r7
    4cf4:	b002      	add	sp, #8
    4cf6:	bd80      	pop	{r7, pc}

00004cf8 <rtc_calendar_get_config_defaults>:
{
    4cf8:	b590      	push	{r4, r7, lr}
    4cfa:	b087      	sub	sp, #28
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    4d00:	4c26      	ldr	r4, [pc, #152]	; (4d9c <rtc_calendar_get_config_defaults+0xa4>)
    4d02:	447c      	add	r4, pc
	rtc_calendar_get_time_defaults(&time);
    4d04:	230c      	movs	r3, #12
    4d06:	18fb      	adds	r3, r7, r3
    4d08:	0018      	movs	r0, r3
    4d0a:	4b25      	ldr	r3, [pc, #148]	; (4da0 <rtc_calendar_get_config_defaults+0xa8>)
    4d0c:	447b      	add	r3, pc
    4d0e:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	22a0      	movs	r2, #160	; 0xa0
    4d14:	0112      	lsls	r2, r2, #4
    4d16:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	2200      	movs	r2, #0
    4d1c:	709a      	strb	r2, [r3, #2]
	config->continuously_update = false;
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	2200      	movs	r2, #0
    4d22:	70da      	strb	r2, [r3, #3]
	config->clock_24h           = false;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	2200      	movs	r2, #0
    4d28:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	22fa      	movs	r2, #250	; 0xfa
    4d2e:	00d2      	lsls	r2, r2, #3
    4d30:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    4d32:	2317      	movs	r3, #23
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	2200      	movs	r2, #0
    4d38:	701a      	strb	r2, [r3, #0]
    4d3a:	e026      	b.n	4d8a <rtc_calendar_get_config_defaults+0x92>
		config->alarm[i].time = time;
    4d3c:	2317      	movs	r3, #23
    4d3e:	18fb      	adds	r3, r7, r3
    4d40:	781a      	ldrb	r2, [r3, #0]
    4d42:	6879      	ldr	r1, [r7, #4]
    4d44:	2008      	movs	r0, #8
    4d46:	0013      	movs	r3, r2
    4d48:	009b      	lsls	r3, r3, #2
    4d4a:	189b      	adds	r3, r3, r2
    4d4c:	005b      	lsls	r3, r3, #1
    4d4e:	18cb      	adds	r3, r1, r3
    4d50:	181a      	adds	r2, r3, r0
    4d52:	230c      	movs	r3, #12
    4d54:	18fb      	adds	r3, r7, r3
    4d56:	0010      	movs	r0, r2
    4d58:	0019      	movs	r1, r3
    4d5a:	2308      	movs	r3, #8
    4d5c:	001a      	movs	r2, r3
    4d5e:	4b11      	ldr	r3, [pc, #68]	; (4da4 <rtc_calendar_get_config_defaults+0xac>)
    4d60:	58e3      	ldr	r3, [r4, r3]
    4d62:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    4d64:	2317      	movs	r3, #23
    4d66:	18fb      	adds	r3, r7, r3
    4d68:	781a      	ldrb	r2, [r3, #0]
    4d6a:	6879      	ldr	r1, [r7, #4]
    4d6c:	0013      	movs	r3, r2
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	189b      	adds	r3, r3, r2
    4d72:	005b      	lsls	r3, r3, #1
    4d74:	18cb      	adds	r3, r1, r3
    4d76:	3310      	adds	r3, #16
    4d78:	2206      	movs	r2, #6
    4d7a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    4d7c:	2317      	movs	r3, #23
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	781a      	ldrb	r2, [r3, #0]
    4d82:	2317      	movs	r3, #23
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	3201      	adds	r2, #1
    4d88:	701a      	strb	r2, [r3, #0]
    4d8a:	2317      	movs	r3, #23
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d0d3      	beq.n	4d3c <rtc_calendar_get_config_defaults+0x44>
}
    4d94:	46c0      	nop			; (mov r8, r8)
    4d96:	46bd      	mov	sp, r7
    4d98:	b007      	add	sp, #28
    4d9a:	bd90      	pop	{r4, r7, pc}
    4d9c:	0000d15e 	.word	0x0000d15e
    4da0:	ffffffad 	.word	0xffffffad
    4da4:	0000008c 	.word	0x0000008c

00004da8 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	0002      	movs	r2, r0
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4db4:	4b1a      	ldr	r3, [pc, #104]	; (4e20 <system_set_sleepmode+0x78>)
    4db6:	699b      	ldr	r3, [r3, #24]
    4db8:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    4dba:	68fa      	ldr	r2, [r7, #12]
    4dbc:	23f0      	movs	r3, #240	; 0xf0
    4dbe:	011b      	lsls	r3, r3, #4
    4dc0:	4013      	ands	r3, r2
    4dc2:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    4dc4:	68fb      	ldr	r3, [r7, #12]
    4dc6:	0a1b      	lsrs	r3, r3, #8
    4dc8:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	2b02      	cmp	r3, #2
    4dce:	d805      	bhi.n	4ddc <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4dd0:	4a14      	ldr	r2, [pc, #80]	; (4e24 <system_set_sleepmode+0x7c>)
    4dd2:	6853      	ldr	r3, [r2, #4]
    4dd4:	21c0      	movs	r1, #192	; 0xc0
    4dd6:	0089      	lsls	r1, r1, #2
    4dd8:	430b      	orrs	r3, r1
    4dda:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    4ddc:	1dfb      	adds	r3, r7, #7
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	2b00      	cmp	r3, #0
    4de2:	db16      	blt.n	4e12 <system_set_sleepmode+0x6a>
    4de4:	2b02      	cmp	r3, #2
    4de6:	dd02      	ble.n	4dee <system_set_sleepmode+0x46>
    4de8:	2b03      	cmp	r3, #3
    4dea:	d00b      	beq.n	4e04 <system_set_sleepmode+0x5c>
    4dec:	e011      	b.n	4e12 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4dee:	4b0e      	ldr	r3, [pc, #56]	; (4e28 <system_set_sleepmode+0x80>)
    4df0:	4a0d      	ldr	r2, [pc, #52]	; (4e28 <system_set_sleepmode+0x80>)
    4df2:	6912      	ldr	r2, [r2, #16]
    4df4:	2104      	movs	r1, #4
    4df6:	438a      	bics	r2, r1
    4df8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    4dfa:	4a0c      	ldr	r2, [pc, #48]	; (4e2c <system_set_sleepmode+0x84>)
    4dfc:	1dfb      	adds	r3, r7, #7
    4dfe:	781b      	ldrb	r3, [r3, #0]
    4e00:	7053      	strb	r3, [r2, #1]
			break;
    4e02:	e008      	b.n	4e16 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4e04:	4b08      	ldr	r3, [pc, #32]	; (4e28 <system_set_sleepmode+0x80>)
    4e06:	4a08      	ldr	r2, [pc, #32]	; (4e28 <system_set_sleepmode+0x80>)
    4e08:	6912      	ldr	r2, [r2, #16]
    4e0a:	2104      	movs	r1, #4
    4e0c:	430a      	orrs	r2, r1
    4e0e:	611a      	str	r2, [r3, #16]
			break;
    4e10:	e001      	b.n	4e16 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    4e12:	2317      	movs	r3, #23
    4e14:	e000      	b.n	4e18 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    4e16:	2300      	movs	r3, #0
}
    4e18:	0018      	movs	r0, r3
    4e1a:	46bd      	mov	sp, r7
    4e1c:	b004      	add	sp, #16
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	41002000 	.word	0x41002000
    4e24:	41004000 	.word	0x41004000
    4e28:	e000ed00 	.word	0xe000ed00
    4e2c:	40000400 	.word	0x40000400

00004e30 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    4e30:	b580      	push	{r7, lr}
    4e32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    4e34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4e38:	bf30      	wfi
	__DSB();
	__WFI();
}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	46bd      	mov	sp, r7
    4e3e:	bd80      	pop	{r7, pc}

00004e40 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    4e40:	b580      	push	{r7, lr}
    4e42:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    4e44:	4b02      	ldr	r3, [pc, #8]	; (4e50 <system_reset+0x10>)
    4e46:	447b      	add	r3, pc
    4e48:	4798      	blx	r3
}
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bd80      	pop	{r7, pc}
    4e50:	fffffbaf 	.word	0xfffffbaf

00004e54 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    4e54:	b580      	push	{r7, lr}
    4e56:	b084      	sub	sp, #16
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	681b      	ldr	r3, [r3, #0]
    4e60:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4e62:	68fb      	ldr	r3, [r7, #12]
    4e64:	69db      	ldr	r3, [r3, #28]
    4e66:	1e5a      	subs	r2, r3, #1
    4e68:	4193      	sbcs	r3, r2
    4e6a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    4e6c:	0018      	movs	r0, r3
    4e6e:	46bd      	mov	sp, r7
    4e70:	b004      	add	sp, #16
    4e72:	bd80      	pop	{r7, pc}

00004e74 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	b084      	sub	sp, #16
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]
    4e7c:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <spi_disable+0x5c>)
    4e7e:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	681b      	ldr	r3, [r3, #0]
    4e84:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	0018      	movs	r0, r3
    4e8c:	4b11      	ldr	r3, [pc, #68]	; (4ed4 <spi_disable+0x60>)
    4e8e:	58d3      	ldr	r3, [r2, r3]
    4e90:	4798      	blx	r3
    4e92:	0003      	movs	r3, r0
    4e94:	0018      	movs	r0, r3
    4e96:	4b10      	ldr	r3, [pc, #64]	; (4ed8 <spi_disable+0x64>)
    4e98:	447b      	add	r3, pc
    4e9a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4e9c:	46c0      	nop			; (mov r8, r8)
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	0018      	movs	r0, r3
    4ea2:	4b0e      	ldr	r3, [pc, #56]	; (4edc <spi_disable+0x68>)
    4ea4:	447b      	add	r3, pc
    4ea6:	4798      	blx	r3
    4ea8:	1e03      	subs	r3, r0, #0
    4eaa:	d1f8      	bne.n	4e9e <spi_disable+0x2a>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4eac:	68fb      	ldr	r3, [r7, #12]
    4eae:	228f      	movs	r2, #143	; 0x8f
    4eb0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	228f      	movs	r2, #143	; 0x8f
    4eb6:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4eb8:	68fb      	ldr	r3, [r7, #12]
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	2202      	movs	r2, #2
    4ebe:	4393      	bics	r3, r2
    4ec0:	001a      	movs	r2, r3
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	601a      	str	r2, [r3, #0]
}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	46bd      	mov	sp, r7
    4eca:	b004      	add	sp, #16
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	0000cfe2 	.word	0x0000cfe2
    4ed4:	000000a8 	.word	0x000000a8
    4ed8:	fffffdf1 	.word	0xfffffdf1
    4edc:	ffffffad 	.word	0xffffffad

00004ee0 <configure_wakeup>:
static enum status_code configure_rtc(void);
static enum status_code configure_nvm(void);
static uint8_t buff[MAX_BUF_SIZE] = {0};
struct rtc_module rtc_instance;

static enum status_code configure_wakeup(void) {
    4ee0:	b5b0      	push	{r4, r5, r7, lr}
    4ee2:	b084      	sub	sp, #16
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	4c2a      	ldr	r4, [pc, #168]	; (4f90 <configure_wakeup+0xb0>)
    4ee8:	447c      	add	r4, pc
	struct extint_chan_conf ext_conf;
	extint_chan_get_config_defaults(&ext_conf);
    4eea:	003b      	movs	r3, r7
    4eec:	0018      	movs	r0, r3
    4eee:	4b29      	ldr	r3, [pc, #164]	; (4f94 <configure_wakeup+0xb4>)
    4ef0:	58e3      	ldr	r3, [r4, r3]
    4ef2:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    4ef4:	003b      	movs	r3, r7
    4ef6:	2202      	movs	r2, #2
    4ef8:	72da      	strb	r2, [r3, #11]
	ext_conf.filter_input_signal = true;
    4efa:	003b      	movs	r3, r7
    4efc:	2201      	movs	r2, #1
    4efe:	729a      	strb	r2, [r3, #10]
	ext_conf.wake_if_sleeping = true;
    4f00:	003b      	movs	r3, r7
    4f02:	2201      	movs	r2, #1
    4f04:	725a      	strb	r2, [r3, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    4f06:	003b      	movs	r3, r7
    4f08:	2203      	movs	r2, #3
    4f0a:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    4f0c:	003b      	movs	r3, r7
    4f0e:	2200      	movs	r2, #0
    4f10:	605a      	str	r2, [r3, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    4f12:	003b      	movs	r3, r7
    4f14:	2201      	movs	r2, #1
    4f16:	721a      	strb	r2, [r3, #8]
	extint_chan_set_config(3, &ext_conf);
    4f18:	003b      	movs	r3, r7
    4f1a:	0019      	movs	r1, r3
    4f1c:	2003      	movs	r0, #3
    4f1e:	4b1e      	ldr	r3, [pc, #120]	; (4f98 <configure_wakeup+0xb8>)
    4f20:	58e3      	ldr	r3, [r4, r3]
    4f22:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    4f24:	230f      	movs	r3, #15
    4f26:	18fd      	adds	r5, r7, r3
    4f28:	2100      	movs	r1, #0
    4f2a:	2003      	movs	r0, #3
    4f2c:	4b1b      	ldr	r3, [pc, #108]	; (4f9c <configure_wakeup+0xbc>)
    4f2e:	58e3      	ldr	r3, [r4, r3]
    4f30:	4798      	blx	r3
    4f32:	0003      	movs	r3, r0
    4f34:	702b      	strb	r3, [r5, #0]
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    4f36:	003b      	movs	r3, r7
    4f38:	221f      	movs	r2, #31
    4f3a:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    4f3c:	003b      	movs	r3, r7
    4f3e:	2200      	movs	r2, #0
    4f40:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(11, &ext_conf);
    4f42:	003b      	movs	r3, r7
    4f44:	0019      	movs	r1, r3
    4f46:	200b      	movs	r0, #11
    4f48:	4b13      	ldr	r3, [pc, #76]	; (4f98 <configure_wakeup+0xb8>)
    4f4a:	58e3      	ldr	r3, [r4, r3]
    4f4c:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    4f4e:	230e      	movs	r3, #14
    4f50:	18fd      	adds	r5, r7, r3
    4f52:	2100      	movs	r1, #0
    4f54:	200b      	movs	r0, #11
    4f56:	4b11      	ldr	r3, [pc, #68]	; (4f9c <configure_wakeup+0xbc>)
    4f58:	58e3      	ldr	r3, [r4, r3]
    4f5a:	4798      	blx	r3
    4f5c:	0003      	movs	r3, r0
    4f5e:	702b      	strb	r3, [r5, #0]
	if (code1 != STATUS_OK) return code1;
    4f60:	230f      	movs	r3, #15
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d003      	beq.n	4f72 <configure_wakeup+0x92>
    4f6a:	230f      	movs	r3, #15
    4f6c:	18fb      	adds	r3, r7, r3
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	e009      	b.n	4f86 <configure_wakeup+0xa6>
	else if (code2 != STATUS_OK) return code2;
    4f72:	230e      	movs	r3, #14
    4f74:	18fb      	adds	r3, r7, r3
    4f76:	781b      	ldrb	r3, [r3, #0]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d003      	beq.n	4f84 <configure_wakeup+0xa4>
    4f7c:	230e      	movs	r3, #14
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	e000      	b.n	4f86 <configure_wakeup+0xa6>
	else return STATUS_OK;
    4f84:	2300      	movs	r3, #0
}
    4f86:	0018      	movs	r0, r3
    4f88:	46bd      	mov	sp, r7
    4f8a:	b004      	add	sp, #16
    4f8c:	bdb0      	pop	{r4, r5, r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	0000cf78 	.word	0x0000cf78
    4f94:	00000024 	.word	0x00000024
    4f98:	00000124 	.word	0x00000124
    4f9c:	000001ac 	.word	0x000001ac

00004fa0 <configure_rtc>:
static enum status_code configure_rtc(void)
{
    4fa0:	b590      	push	{r4, r7, lr}
    4fa2:	b087      	sub	sp, #28
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	4c1e      	ldr	r4, [pc, #120]	; (5020 <configure_rtc+0x80>)
    4fa8:	447c      	add	r4, pc
	// config base structs
	rtc_instance.hw = RTC;
    4faa:	4b1e      	ldr	r3, [pc, #120]	; (5024 <configure_rtc+0x84>)
    4fac:	58e3      	ldr	r3, [r4, r3]
    4fae:	4a1e      	ldr	r2, [pc, #120]	; (5028 <configure_rtc+0x88>)
    4fb0:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    4fb2:	4b1c      	ldr	r3, [pc, #112]	; (5024 <configure_rtc+0x84>)
    4fb4:	58e3      	ldr	r3, [r4, r3]
    4fb6:	2201      	movs	r2, #1
    4fb8:	711a      	strb	r2, [r3, #4]
	rtc_instance.year_init_value = 2000;
    4fba:	4b1a      	ldr	r3, [pc, #104]	; (5024 <configure_rtc+0x84>)
    4fbc:	58e3      	ldr	r3, [r4, r3]
    4fbe:	22fa      	movs	r2, #250	; 0xfa
    4fc0:	00d2      	lsls	r2, r2, #3
    4fc2:	80da      	strh	r2, [r3, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    4fc4:	1d3b      	adds	r3, r7, #4
    4fc6:	0018      	movs	r0, r3
    4fc8:	4b18      	ldr	r3, [pc, #96]	; (502c <configure_rtc+0x8c>)
    4fca:	447b      	add	r3, pc
    4fcc:	4798      	blx	r3
	config_rtc_calendar.clock_24h = true;
    4fce:	1d3b      	adds	r3, r7, #4
    4fd0:	2201      	movs	r2, #1
    4fd2:	711a      	strb	r2, [r3, #4]
	
	// enable the GCLK to RTC to read out the initial time before enabling
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4fd4:	003b      	movs	r3, r7
    4fd6:	0018      	movs	r0, r3
    4fd8:	4b15      	ldr	r3, [pc, #84]	; (5030 <configure_rtc+0x90>)
    4fda:	447b      	add	r3, pc
    4fdc:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    4fde:	003b      	movs	r3, r7
    4fe0:	2202      	movs	r2, #2
    4fe2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    4fe4:	003b      	movs	r3, r7
    4fe6:	0019      	movs	r1, r3
    4fe8:	2004      	movs	r0, #4
    4fea:	4b12      	ldr	r3, [pc, #72]	; (5034 <configure_rtc+0x94>)
    4fec:	58e3      	ldr	r3, [r4, r3]
    4fee:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    4ff0:	2004      	movs	r0, #4
    4ff2:	4b11      	ldr	r3, [pc, #68]	; (5038 <configure_rtc+0x98>)
    4ff4:	58e3      	ldr	r3, [r4, r3]
    4ff6:	4798      	blx	r3

	// enable the RTC and set the initial time
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    4ff8:	1d3a      	adds	r2, r7, #4
    4ffa:	490b      	ldr	r1, [pc, #44]	; (5028 <configure_rtc+0x88>)
    4ffc:	4b09      	ldr	r3, [pc, #36]	; (5024 <configure_rtc+0x84>)
    4ffe:	58e3      	ldr	r3, [r4, r3]
    5000:	0018      	movs	r0, r3
    5002:	4b0e      	ldr	r3, [pc, #56]	; (503c <configure_rtc+0x9c>)
    5004:	58e3      	ldr	r3, [r4, r3]
    5006:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5008:	4b06      	ldr	r3, [pc, #24]	; (5024 <configure_rtc+0x84>)
    500a:	58e3      	ldr	r3, [r4, r3]
    500c:	0018      	movs	r0, r3
    500e:	4b0c      	ldr	r3, [pc, #48]	; (5040 <configure_rtc+0xa0>)
    5010:	58e3      	ldr	r3, [r4, r3]
    5012:	4798      	blx	r3
	return STATUS_OK;
    5014:	2300      	movs	r3, #0
}
    5016:	0018      	movs	r0, r3
    5018:	46bd      	mov	sp, r7
    501a:	b007      	add	sp, #28
    501c:	bd90      	pop	{r4, r7, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	0000ceb8 	.word	0x0000ceb8
    5024:	00000030 	.word	0x00000030
    5028:	40001400 	.word	0x40001400
    502c:	fffffd2b 	.word	0xfffffd2b
    5030:	fffffa9f 	.word	0xfffffa9f
    5034:	000000b0 	.word	0x000000b0
    5038:	00000238 	.word	0x00000238
    503c:	000000d0 	.word	0x000000d0
    5040:	00000058 	.word	0x00000058

00005044 <configure_nvm>:
static enum status_code configure_nvm(void) {
    5044:	b5b0      	push	{r4, r5, r7, lr}
    5046:	b082      	sub	sp, #8
    5048:	af00      	add	r7, sp, #0
    504a:	4d0c      	ldr	r5, [pc, #48]	; (507c <configure_nvm+0x38>)
    504c:	447d      	add	r5, pc
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    504e:	003b      	movs	r3, r7
    5050:	0018      	movs	r0, r3
    5052:	4b0b      	ldr	r3, [pc, #44]	; (5080 <configure_nvm+0x3c>)
    5054:	447b      	add	r3, pc
    5056:	4798      	blx	r3
	config.manual_page_write = false;
    5058:	003b      	movs	r3, r7
    505a:	2200      	movs	r2, #0
    505c:	705a      	strb	r2, [r3, #1]
	enum status_code code = nvm_set_config(&config);
    505e:	1dfc      	adds	r4, r7, #7
    5060:	003b      	movs	r3, r7
    5062:	0018      	movs	r0, r3
    5064:	4b07      	ldr	r3, [pc, #28]	; (5084 <configure_nvm+0x40>)
    5066:	58eb      	ldr	r3, [r5, r3]
    5068:	4798      	blx	r3
    506a:	0003      	movs	r3, r0
    506c:	7023      	strb	r3, [r4, #0]
	return code;
    506e:	1dfb      	adds	r3, r7, #7
    5070:	781b      	ldrb	r3, [r3, #0]
}
    5072:	0018      	movs	r0, r3
    5074:	46bd      	mov	sp, r7
    5076:	b002      	add	sp, #8
    5078:	bdb0      	pop	{r4, r5, r7, pc}
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	0000ce14 	.word	0x0000ce14
    5080:	fffffa9d 	.word	0xfffffa9d
    5084:	00000258 	.word	0x00000258

00005088 <configure_bod>:
static enum status_code configure_bod(void)
{
    5088:	b5b0      	push	{r4, r5, r7, lr}
    508a:	b084      	sub	sp, #16
    508c:	af00      	add	r7, sp, #0
    508e:	4d24      	ldr	r5, [pc, #144]	; (5120 <configure_bod+0x98>)
    5090:	447d      	add	r5, pc
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    5092:	1d3b      	adds	r3, r7, #4
    5094:	0018      	movs	r0, r3
    5096:	4b23      	ldr	r3, [pc, #140]	; (5124 <configure_bod+0x9c>)
    5098:	447b      	add	r3, pc
    509a:	4798      	blx	r3
	config_bod33.action = BOD_ACTION_INTERRUPT;
    509c:	1d3b      	adds	r3, r7, #4
    509e:	2210      	movs	r2, #16
    50a0:	711a      	strb	r2, [r3, #4]
	config_bod33.hysteresis = 1;
    50a2:	1d3b      	adds	r3, r7, #4
    50a4:	2201      	movs	r2, #1
    50a6:	719a      	strb	r2, [r3, #6]
	config_bod33.run_in_standby = 0;
    50a8:	1d3b      	adds	r3, r7, #4
    50aa:	2200      	movs	r2, #0
    50ac:	71da      	strb	r2, [r3, #7]
	config_bod33.mode = BOD_MODE_SAMPLED;
    50ae:	1d3b      	adds	r3, r7, #4
    50b0:	2280      	movs	r2, #128	; 0x80
    50b2:	0052      	lsls	r2, r2, #1
    50b4:	805a      	strh	r2, [r3, #2]
	config_bod33.level = 40;						// Set to 2.8V
    50b6:	1d3b      	adds	r3, r7, #4
    50b8:	2228      	movs	r2, #40	; 0x28
    50ba:	715a      	strb	r2, [r3, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    50bc:	230f      	movs	r3, #15
    50be:	18fc      	adds	r4, r7, r3
    50c0:	1d3b      	adds	r3, r7, #4
    50c2:	0019      	movs	r1, r3
    50c4:	2000      	movs	r0, #0
    50c6:	4b18      	ldr	r3, [pc, #96]	; (5128 <configure_bod+0xa0>)
    50c8:	58eb      	ldr	r3, [r5, r3]
    50ca:	4798      	blx	r3
    50cc:	0003      	movs	r3, r0
    50ce:	7023      	strb	r3, [r4, #0]
	enum status_code code2 = bod_enable(BOD_BOD33);
    50d0:	230e      	movs	r3, #14
    50d2:	18fc      	adds	r4, r7, r3
    50d4:	2000      	movs	r0, #0
    50d6:	4b15      	ldr	r3, [pc, #84]	; (512c <configure_bod+0xa4>)
    50d8:	447b      	add	r3, pc
    50da:	4798      	blx	r3
    50dc:	0003      	movs	r3, r0
    50de:	7023      	strb	r3, [r4, #0]
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    50e0:	4b13      	ldr	r3, [pc, #76]	; (5130 <configure_bod+0xa8>)
    50e2:	2280      	movs	r2, #128	; 0x80
    50e4:	00d2      	lsls	r2, r2, #3
    50e6:	605a      	str	r2, [r3, #4]
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SYSCTRL);
    50e8:	2001      	movs	r0, #1
    50ea:	4b12      	ldr	r3, [pc, #72]	; (5134 <configure_bod+0xac>)
    50ec:	447b      	add	r3, pc
    50ee:	4798      	blx	r3
	if (code1 != STATUS_OK) return code1;
    50f0:	230f      	movs	r3, #15
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d003      	beq.n	5102 <configure_bod+0x7a>
    50fa:	230f      	movs	r3, #15
    50fc:	18fb      	adds	r3, r7, r3
    50fe:	781b      	ldrb	r3, [r3, #0]
    5100:	e009      	b.n	5116 <configure_bod+0x8e>
	else if (code2 != STATUS_OK) return code2;
    5102:	230e      	movs	r3, #14
    5104:	18fb      	adds	r3, r7, r3
    5106:	781b      	ldrb	r3, [r3, #0]
    5108:	2b00      	cmp	r3, #0
    510a:	d003      	beq.n	5114 <configure_bod+0x8c>
    510c:	230e      	movs	r3, #14
    510e:	18fb      	adds	r3, r7, r3
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	e000      	b.n	5116 <configure_bod+0x8e>
	else return STATUS_OK;
    5114:	2300      	movs	r3, #0
}
    5116:	0018      	movs	r0, r3
    5118:	46bd      	mov	sp, r7
    511a:	b004      	add	sp, #16
    511c:	bdb0      	pop	{r4, r5, r7, pc}
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	0000cdd0 	.word	0x0000cdd0
    5124:	fffff979 	.word	0xfffff979
    5128:	00000224 	.word	0x00000224
    512c:	fffff96d 	.word	0xfffff96d
    5130:	40000800 	.word	0x40000800
    5134:	fffffb71 	.word	0xfffffb71

00005138 <SYSCTRL_Handler>:

// Brown-out action, when supply-voltage < 2.8V ...
void SYSCTRL_Handler(void) {
    5138:	b580      	push	{r7, lr}
    513a:	af00      	add	r7, sp, #0
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    513c:	4b07      	ldr	r3, [pc, #28]	; (515c <SYSCTRL_Handler+0x24>)
    513e:	689a      	ldr	r2, [r3, #8]
    5140:	2380      	movs	r3, #128	; 0x80
    5142:	00db      	lsls	r3, r3, #3
    5144:	4013      	ands	r3, r2
    5146:	d006      	beq.n	5156 <SYSCTRL_Handler+0x1e>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    5148:	4b04      	ldr	r3, [pc, #16]	; (515c <SYSCTRL_Handler+0x24>)
    514a:	2280      	movs	r2, #128	; 0x80
    514c:	00d2      	lsls	r2, r2, #3
    514e:	609a      	str	r2, [r3, #8]
		system_sleep();
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <SYSCTRL_Handler+0x28>)
    5152:	447b      	add	r3, pc
    5154:	4798      	blx	r3
	}
}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	46bd      	mov	sp, r7
    515a:	bd80      	pop	{r7, pc}
    515c:	40000800 	.word	0x40000800
    5160:	fffffcdb 	.word	0xfffffcdb

00005164 <main>:

int main(void)
{
    5164:	b5f0      	push	{r4, r5, r6, r7, lr}
    5166:	46c6      	mov	lr, r8
    5168:	b500      	push	{lr}
    516a:	4ca0      	ldr	r4, [pc, #640]	; (53ec <main+0x288>)
    516c:	44a5      	add	sp, r4
    516e:	af04      	add	r7, sp, #16
    5170:	4c9f      	ldr	r4, [pc, #636]	; (53f0 <main+0x28c>)
    5172:	447c      	add	r4, pc
	delay_init();
    5174:	4b9f      	ldr	r3, [pc, #636]	; (53f4 <main+0x290>)
    5176:	58e3      	ldr	r3, [r4, r3]
    5178:	4798      	blx	r3
	led_blink(1,100,1);				// Blink green once to indicate entry
    517a:	2201      	movs	r2, #1
    517c:	2164      	movs	r1, #100	; 0x64
    517e:	2001      	movs	r0, #1
    5180:	4b9d      	ldr	r3, [pc, #628]	; (53f8 <main+0x294>)
    5182:	447b      	add	r3, pc
    5184:	4798      	blx	r3

	bool gotoApplication = 1;		// Can we skip to the application?
    5186:	4b9d      	ldr	r3, [pc, #628]	; (53fc <main+0x298>)
    5188:	2208      	movs	r2, #8
    518a:	4694      	mov	ip, r2
    518c:	44bc      	add	ip, r7
    518e:	4463      	add	r3, ip
    5190:	2201      	movs	r2, #1
    5192:	701a      	strb	r2, [r3, #0]
	bool sdError = 0;				// Any error in SD card process?
    5194:	4b9a      	ldr	r3, [pc, #616]	; (5400 <main+0x29c>)
    5196:	2208      	movs	r2, #8
    5198:	4694      	mov	ip, r2
    519a:	44bc      	add	ip, r7
    519c:	4463      	add	r3, ip
    519e:	2200      	movs	r2, #0
    51a0:	701a      	strb	r2, [r3, #0]

	const char* new_image_name		= IMAGE_DEFAULT_NAME;
    51a2:	4b98      	ldr	r3, [pc, #608]	; (5404 <main+0x2a0>)
    51a4:	447b      	add	r3, pc
    51a6:	22b0      	movs	r2, #176	; 0xb0
    51a8:	0092      	lsls	r2, r2, #2
    51aa:	2108      	movs	r1, #8
    51ac:	468c      	mov	ip, r1
    51ae:	44bc      	add	ip, r7
    51b0:	4462      	add	r2, ip
    51b2:	6013      	str	r3, [r2, #0]
	const char* golden_image_name	= IMAGE_GOLDEN_NAME;
    51b4:	4b94      	ldr	r3, [pc, #592]	; (5408 <main+0x2a4>)
    51b6:	447b      	add	r3, pc
    51b8:	22af      	movs	r2, #175	; 0xaf
    51ba:	0092      	lsls	r2, r2, #2
    51bc:	2108      	movs	r1, #8
    51be:	468c      	mov	ip, r1
    51c0:	44bc      	add	ip, r7
    51c2:	4462      	add	r2, ip
    51c4:	6013      	str	r3, [r2, #0]
	char* image_name = new_image_name;
    51c6:	23b0      	movs	r3, #176	; 0xb0
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	2208      	movs	r2, #8
    51cc:	4694      	mov	ip, r2
    51ce:	44bc      	add	ip, r7
    51d0:	4463      	add	r3, ip
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	22b4      	movs	r2, #180	; 0xb4
    51d6:	0092      	lsls	r2, r2, #2
    51d8:	2108      	movs	r1, #8
    51da:	468c      	mov	ip, r1
    51dc:	44bc      	add	ip, r7
    51de:	4462      	add	r2, ip
    51e0:	6013      	str	r3, [r2, #0]

	// Check buttons, if both pressed, force bootloader execution with the golden-image
	struct port_config but_cfg;
	port_get_config_defaults(&but_cfg);
    51e2:	23ad      	movs	r3, #173	; 0xad
    51e4:	009b      	lsls	r3, r3, #2
    51e6:	2208      	movs	r2, #8
    51e8:	4694      	mov	ip, r2
    51ea:	44bc      	add	ip, r7
    51ec:	4463      	add	r3, ip
    51ee:	0018      	movs	r0, r3
    51f0:	4b86      	ldr	r3, [pc, #536]	; (540c <main+0x2a8>)
    51f2:	447b      	add	r3, pc
    51f4:	4798      	blx	r3
	port_pin_set_config(BUT1_IRQ_IN_PIN, &but_cfg);
    51f6:	23ad      	movs	r3, #173	; 0xad
    51f8:	009b      	lsls	r3, r3, #2
    51fa:	2208      	movs	r2, #8
    51fc:	4694      	mov	ip, r2
    51fe:	44bc      	add	ip, r7
    5200:	4463      	add	r3, ip
    5202:	0019      	movs	r1, r3
    5204:	2003      	movs	r0, #3
    5206:	4b82      	ldr	r3, [pc, #520]	; (5410 <main+0x2ac>)
    5208:	58e3      	ldr	r3, [r4, r3]
    520a:	4798      	blx	r3
	port_pin_set_config(BUT2_IRQ_IN_PIN, &but_cfg);
    520c:	23ad      	movs	r3, #173	; 0xad
    520e:	009b      	lsls	r3, r3, #2
    5210:	2208      	movs	r2, #8
    5212:	4694      	mov	ip, r2
    5214:	44bc      	add	ip, r7
    5216:	4463      	add	r3, ip
    5218:	0019      	movs	r1, r3
    521a:	201f      	movs	r0, #31
    521c:	4b7c      	ldr	r3, [pc, #496]	; (5410 <main+0x2ac>)
    521e:	58e3      	ldr	r3, [r4, r3]
    5220:	4798      	blx	r3
	bool b1 = !port_pin_get_input_level(BUT1_IRQ_IN_PIN);
    5222:	2003      	movs	r0, #3
    5224:	4b7b      	ldr	r3, [pc, #492]	; (5414 <main+0x2b0>)
    5226:	447b      	add	r3, pc
    5228:	4798      	blx	r3
    522a:	0003      	movs	r3, r0
    522c:	1e5a      	subs	r2, r3, #1
    522e:	4193      	sbcs	r3, r2
    5230:	b2db      	uxtb	r3, r3
    5232:	2201      	movs	r2, #1
    5234:	4053      	eors	r3, r2
    5236:	b2db      	uxtb	r3, r3
    5238:	001a      	movs	r2, r3
    523a:	4b77      	ldr	r3, [pc, #476]	; (5418 <main+0x2b4>)
    523c:	2108      	movs	r1, #8
    523e:	468c      	mov	ip, r1
    5240:	44bc      	add	ip, r7
    5242:	4463      	add	r3, ip
    5244:	701a      	strb	r2, [r3, #0]
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	2101      	movs	r1, #1
    524a:	400a      	ands	r2, r1
    524c:	701a      	strb	r2, [r3, #0]
	bool b2 = !port_pin_get_input_level(BUT2_IRQ_IN_PIN);
    524e:	201f      	movs	r0, #31
    5250:	4b72      	ldr	r3, [pc, #456]	; (541c <main+0x2b8>)
    5252:	447b      	add	r3, pc
    5254:	4798      	blx	r3
    5256:	0003      	movs	r3, r0
    5258:	1e5a      	subs	r2, r3, #1
    525a:	4193      	sbcs	r3, r2
    525c:	b2db      	uxtb	r3, r3
    525e:	2201      	movs	r2, #1
    5260:	4053      	eors	r3, r2
    5262:	b2db      	uxtb	r3, r3
    5264:	001a      	movs	r2, r3
    5266:	4b6e      	ldr	r3, [pc, #440]	; (5420 <main+0x2bc>)
    5268:	2108      	movs	r1, #8
    526a:	468c      	mov	ip, r1
    526c:	44bc      	add	ip, r7
    526e:	4463      	add	r3, ip
    5270:	701a      	strb	r2, [r3, #0]
    5272:	781a      	ldrb	r2, [r3, #0]
    5274:	2101      	movs	r1, #1
    5276:	400a      	ands	r2, r1
    5278:	701a      	strb	r2, [r3, #0]
	if (b1 && b2) {
    527a:	4b67      	ldr	r3, [pc, #412]	; (5418 <main+0x2b4>)
    527c:	2208      	movs	r2, #8
    527e:	4694      	mov	ip, r2
    5280:	44bc      	add	ip, r7
    5282:	4463      	add	r3, ip
    5284:	781b      	ldrb	r3, [r3, #0]
    5286:	2b00      	cmp	r3, #0
    5288:	d01c      	beq.n	52c4 <main+0x160>
    528a:	4b65      	ldr	r3, [pc, #404]	; (5420 <main+0x2bc>)
    528c:	2208      	movs	r2, #8
    528e:	4694      	mov	ip, r2
    5290:	44bc      	add	ip, r7
    5292:	4463      	add	r3, ip
    5294:	781b      	ldrb	r3, [r3, #0]
    5296:	2b00      	cmp	r3, #0
    5298:	d014      	beq.n	52c4 <main+0x160>
		gotoApplication = 0;
    529a:	4b58      	ldr	r3, [pc, #352]	; (53fc <main+0x298>)
    529c:	2208      	movs	r2, #8
    529e:	4694      	mov	ip, r2
    52a0:	44bc      	add	ip, r7
    52a2:	4463      	add	r3, ip
    52a4:	2200      	movs	r2, #0
    52a6:	701a      	strb	r2, [r3, #0]
		image_name = golden_image_name;		// Make the golden image the target
    52a8:	23af      	movs	r3, #175	; 0xaf
    52aa:	009b      	lsls	r3, r3, #2
    52ac:	2208      	movs	r2, #8
    52ae:	4694      	mov	ip, r2
    52b0:	44bc      	add	ip, r7
    52b2:	4463      	add	r3, ip
    52b4:	681b      	ldr	r3, [r3, #0]
    52b6:	22b4      	movs	r2, #180	; 0xb4
    52b8:	0092      	lsls	r2, r2, #2
    52ba:	2108      	movs	r1, #8
    52bc:	468c      	mov	ip, r1
    52be:	44bc      	add	ip, r7
    52c0:	4462      	add	r2, ip
    52c2:	6013      	str	r3, [r2, #0]
	}
	
	// Check SD card for new boot file, force bootloader execution if found
	// Initialize SD card driver
	sd_mmc_init();
    52c4:	4b57      	ldr	r3, [pc, #348]	; (5424 <main+0x2c0>)
    52c6:	58e3      	ldr	r3, [r4, r3]
    52c8:	4798      	blx	r3

	// Attempt to initialize SD card
	Ctrl_status status = CTRL_FAIL;
    52ca:	4b57      	ldr	r3, [pc, #348]	; (5428 <main+0x2c4>)
    52cc:	2208      	movs	r2, #8
    52ce:	4694      	mov	ip, r2
    52d0:	44bc      	add	ip, r7
    52d2:	4463      	add	r3, ip
    52d4:	2201      	movs	r2, #1
    52d6:	701a      	strb	r2, [r3, #0]
	while (status != CTRL_GOOD) {
    52d8:	e02c      	b.n	5334 <main+0x1d0>
		status = sd_mmc_test_unit_ready(0);
    52da:	4b53      	ldr	r3, [pc, #332]	; (5428 <main+0x2c4>)
    52dc:	2208      	movs	r2, #8
    52de:	18ba      	adds	r2, r7, r2
    52e0:	18d5      	adds	r5, r2, r3
    52e2:	2000      	movs	r0, #0
    52e4:	4b51      	ldr	r3, [pc, #324]	; (542c <main+0x2c8>)
    52e6:	58e3      	ldr	r3, [r4, r3]
    52e8:	4798      	blx	r3
    52ea:	0003      	movs	r3, r0
    52ec:	702b      	strb	r3, [r5, #0]
		if (status == CTRL_FAIL || status == CTRL_NO_PRESENT) {
    52ee:	4b4e      	ldr	r3, [pc, #312]	; (5428 <main+0x2c4>)
    52f0:	2208      	movs	r2, #8
    52f2:	4694      	mov	ip, r2
    52f4:	44bc      	add	ip, r7
    52f6:	4463      	add	r3, ip
    52f8:	781b      	ldrb	r3, [r3, #0]
    52fa:	2b01      	cmp	r3, #1
    52fc:	d013      	beq.n	5326 <main+0x1c2>
    52fe:	4b40      	ldr	r3, [pc, #256]	; (5400 <main+0x29c>)
    5300:	2208      	movs	r2, #8
    5302:	4694      	mov	ip, r2
    5304:	44bc      	add	ip, r7
    5306:	4463      	add	r3, ip
    5308:	4a3d      	ldr	r2, [pc, #244]	; (5400 <main+0x29c>)
    530a:	2108      	movs	r1, #8
    530c:	468c      	mov	ip, r1
    530e:	44bc      	add	ip, r7
    5310:	4462      	add	r2, ip
    5312:	7812      	ldrb	r2, [r2, #0]
    5314:	701a      	strb	r2, [r3, #0]
    5316:	4b44      	ldr	r3, [pc, #272]	; (5428 <main+0x2c4>)
    5318:	2208      	movs	r2, #8
    531a:	4694      	mov	ip, r2
    531c:	44bc      	add	ip, r7
    531e:	4463      	add	r3, ip
    5320:	781b      	ldrb	r3, [r3, #0]
    5322:	2b02      	cmp	r3, #2
    5324:	d106      	bne.n	5334 <main+0x1d0>
			sdError = 1;
    5326:	4b36      	ldr	r3, [pc, #216]	; (5400 <main+0x29c>)
    5328:	2208      	movs	r2, #8
    532a:	4694      	mov	ip, r2
    532c:	44bc      	add	ip, r7
    532e:	4463      	add	r3, ip
    5330:	2201      	movs	r2, #1
    5332:	701a      	strb	r2, [r3, #0]
	while (status != CTRL_GOOD) {
    5334:	4b3c      	ldr	r3, [pc, #240]	; (5428 <main+0x2c4>)
    5336:	2208      	movs	r2, #8
    5338:	4694      	mov	ip, r2
    533a:	44bc      	add	ip, r7
    533c:	4463      	add	r3, ip
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	2b00      	cmp	r3, #0
    5342:	d1ca      	bne.n	52da <main+0x176>
	// Check for new firmware image on SD
	FATFS fs;
	FIL file_object;
	FRESULT res;
	FILINFO fno;
	memset(&fs, 0, sizeof(FATFS));	
    5344:	238c      	movs	r3, #140	; 0x8c
    5346:	009a      	lsls	r2, r3, #2
    5348:	2384      	movs	r3, #132	; 0x84
    534a:	2108      	movs	r1, #8
    534c:	468c      	mov	ip, r1
    534e:	44bc      	add	ip, r7
    5350:	4463      	add	r3, ip
    5352:	2100      	movs	r1, #0
    5354:	0018      	movs	r0, r3
    5356:	4b36      	ldr	r3, [pc, #216]	; (5430 <main+0x2cc>)
    5358:	58e3      	ldr	r3, [r4, r3]
    535a:	4798      	blx	r3
	if (sdError == 0) {
    535c:	4b28      	ldr	r3, [pc, #160]	; (5400 <main+0x29c>)
    535e:	2208      	movs	r2, #8
    5360:	4694      	mov	ip, r2
    5362:	44bc      	add	ip, r7
    5364:	4463      	add	r3, ip
    5366:	781b      	ldrb	r3, [r3, #0]
    5368:	2201      	movs	r2, #1
    536a:	4053      	eors	r3, r2
    536c:	b2db      	uxtb	r3, r3
    536e:	2b00      	cmp	r3, #0
    5370:	d06d      	beq.n	544e <main+0x2ea>
		// Mount FAT32 file system on SD card
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5372:	4b30      	ldr	r3, [pc, #192]	; (5434 <main+0x2d0>)
    5374:	2208      	movs	r2, #8
    5376:	18ba      	adds	r2, r7, r2
    5378:	18d5      	adds	r5, r2, r3
    537a:	2384      	movs	r3, #132	; 0x84
    537c:	2208      	movs	r2, #8
    537e:	4694      	mov	ip, r2
    5380:	44bc      	add	ip, r7
    5382:	4463      	add	r3, ip
    5384:	0019      	movs	r1, r3
    5386:	2000      	movs	r0, #0
    5388:	4b2b      	ldr	r3, [pc, #172]	; (5438 <main+0x2d4>)
    538a:	58e3      	ldr	r3, [r4, r3]
    538c:	4798      	blx	r3
    538e:	0003      	movs	r3, r0
    5390:	702b      	strb	r3, [r5, #0]
	
		// Find the image file
		res = f_stat(image_name, &fno);
    5392:	4b28      	ldr	r3, [pc, #160]	; (5434 <main+0x2d0>)
    5394:	2208      	movs	r2, #8
    5396:	18ba      	adds	r2, r7, r2
    5398:	18d5      	adds	r5, r2, r3
    539a:	2348      	movs	r3, #72	; 0x48
    539c:	2208      	movs	r2, #8
    539e:	18ba      	adds	r2, r7, r2
    53a0:	18d2      	adds	r2, r2, r3
    53a2:	23b4      	movs	r3, #180	; 0xb4
    53a4:	009b      	lsls	r3, r3, #2
    53a6:	2108      	movs	r1, #8
    53a8:	468c      	mov	ip, r1
    53aa:	44bc      	add	ip, r7
    53ac:	4463      	add	r3, ip
    53ae:	681b      	ldr	r3, [r3, #0]
    53b0:	0011      	movs	r1, r2
    53b2:	0018      	movs	r0, r3
    53b4:	4b21      	ldr	r3, [pc, #132]	; (543c <main+0x2d8>)
    53b6:	58e3      	ldr	r3, [r4, r3]
    53b8:	4798      	blx	r3
    53ba:	0003      	movs	r3, r0
    53bc:	702b      	strb	r3, [r5, #0]
		if (res == FR_OK) {
    53be:	4b1d      	ldr	r3, [pc, #116]	; (5434 <main+0x2d0>)
    53c0:	2208      	movs	r2, #8
    53c2:	4694      	mov	ip, r2
    53c4:	44bc      	add	ip, r7
    53c6:	4463      	add	r3, ip
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	2b00      	cmp	r3, #0
    53cc:	d138      	bne.n	5440 <main+0x2dc>
			gotoApplication = 0;
    53ce:	4b0b      	ldr	r3, [pc, #44]	; (53fc <main+0x298>)
    53d0:	2208      	movs	r2, #8
    53d2:	4694      	mov	ip, r2
    53d4:	44bc      	add	ip, r7
    53d6:	4463      	add	r3, ip
    53d8:	2200      	movs	r2, #0
    53da:	701a      	strb	r2, [r3, #0]
			sdError = 0;
    53dc:	4b08      	ldr	r3, [pc, #32]	; (5400 <main+0x29c>)
    53de:	2208      	movs	r2, #8
    53e0:	4694      	mov	ip, r2
    53e2:	44bc      	add	ip, r7
    53e4:	4463      	add	r3, ip
    53e6:	2200      	movs	r2, #0
    53e8:	701a      	strb	r2, [r3, #0]
    53ea:	e030      	b.n	544e <main+0x2ea>
    53ec:	fffffd10 	.word	0xfffffd10
    53f0:	0000ccee 	.word	0x0000ccee
    53f4:	00000178 	.word	0x00000178
    53f8:	00000a83 	.word	0x00000a83
    53fc:	000002d7 	.word	0x000002d7
    5400:	000002d6 	.word	0x000002d6
    5404:	0000c97c 	.word	0x0000c97c
    5408:	0000c97a 	.word	0x0000c97a
    540c:	fffff963 	.word	0xfffff963
    5410:	00000240 	.word	0x00000240
    5414:	fffff953 	.word	0xfffff953
    5418:	000002bb 	.word	0x000002bb
    541c:	fffff927 	.word	0xfffff927
    5420:	000002ba 	.word	0x000002ba
    5424:	00000044 	.word	0x00000044
    5428:	000002cf 	.word	0x000002cf
    542c:	00000048 	.word	0x00000048
    5430:	000001f8 	.word	0x000001f8
    5434:	000002b9 	.word	0x000002b9
    5438:	00000218 	.word	0x00000218
    543c:	00000260 	.word	0x00000260
		} else sdError = 1;
    5440:	4b98      	ldr	r3, [pc, #608]	; (56a4 <main+0x540>)
    5442:	2208      	movs	r2, #8
    5444:	4694      	mov	ip, r2
    5446:	44bc      	add	ip, r7
    5448:	4463      	add	r3, ip
    544a:	2201      	movs	r2, #1
    544c:	701a      	strb	r2, [r3, #0]
	}

	// Disable SD card SPI
	struct spi_module spi;
	spi.hw = SD_MMC_SPI;
    544e:	4b96      	ldr	r3, [pc, #600]	; (56a8 <main+0x544>)
    5450:	22b6      	movs	r2, #182	; 0xb6
    5452:	0092      	lsls	r2, r2, #2
    5454:	4694      	mov	ip, r2
    5456:	2208      	movs	r2, #8
    5458:	4690      	mov	r8, r2
    545a:	44b8      	add	r8, r7
    545c:	44c4      	add	ip, r8
    545e:	4463      	add	r3, ip
    5460:	4a92      	ldr	r2, [pc, #584]	; (56ac <main+0x548>)
    5462:	601a      	str	r2, [r3, #0]
	spi_reset(&spi);
    5464:	230c      	movs	r3, #12
    5466:	2208      	movs	r2, #8
    5468:	4694      	mov	ip, r2
    546a:	44bc      	add	ip, r7
    546c:	4463      	add	r3, ip
    546e:	0018      	movs	r0, r3
    5470:	4b8f      	ldr	r3, [pc, #572]	; (56b0 <main+0x54c>)
    5472:	58e3      	ldr	r3, [r4, r3]
    5474:	4798      	blx	r3
	spi_disable(&spi);
    5476:	230c      	movs	r3, #12
    5478:	2208      	movs	r2, #8
    547a:	4694      	mov	ip, r2
    547c:	44bc      	add	ip, r7
    547e:	4463      	add	r3, ip
    5480:	0018      	movs	r0, r3
    5482:	4b8c      	ldr	r3, [pc, #560]	; (56b4 <main+0x550>)
    5484:	447b      	add	r3, pc
    5486:	4798      	blx	r3

	// Disable interrupts
	system_interrupt_disable_global();
    5488:	4b8b      	ldr	r3, [pc, #556]	; (56b8 <main+0x554>)
    548a:	447b      	add	r3, pc
    548c:	4798      	blx	r3

	// Jump to application if allowed
	if (gotoApplication) {
    548e:	4b8b      	ldr	r3, [pc, #556]	; (56bc <main+0x558>)
    5490:	2208      	movs	r2, #8
    5492:	4694      	mov	ip, r2
    5494:	44bc      	add	ip, r7
    5496:	4463      	add	r3, ip
    5498:	781b      	ldrb	r3, [r3, #0]
    549a:	2b00      	cmp	r3, #0
    549c:	d002      	beq.n	54a4 <main+0x340>
		start_application();
    549e:	4b88      	ldr	r3, [pc, #544]	; (56c0 <main+0x55c>)
    54a0:	447b      	add	r3, pc
    54a2:	4798      	blx	r3
	}
	led_blink(2,100,0);					// Blink red once to bootloader activated
    54a4:	2200      	movs	r2, #0
    54a6:	2164      	movs	r1, #100	; 0x64
    54a8:	2002      	movs	r0, #2
    54aa:	4b86      	ldr	r3, [pc, #536]	; (56c4 <main+0x560>)
    54ac:	447b      	add	r3, pc
    54ae:	4798      	blx	r3


	// START BOOTLOADER MAIN PROGRAM
	system_init();						// clocks and I/O pins
    54b0:	4b85      	ldr	r3, [pc, #532]	; (56c8 <main+0x564>)
    54b2:	58e3      	ldr	r3, [r4, r3]
    54b4:	4798      	blx	r3
	delay_init();						// delay clock update
    54b6:	4b85      	ldr	r3, [pc, #532]	; (56cc <main+0x568>)
    54b8:	58e3      	ldr	r3, [r4, r3]
    54ba:	4798      	blx	r3
	system_interrupt_enable_global();	// Enable interrupts
    54bc:	4b84      	ldr	r3, [pc, #528]	; (56d0 <main+0x56c>)
    54be:	447b      	add	r3, pc
    54c0:	4798      	blx	r3
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY); // Allow sleep mode
    54c2:	2003      	movs	r0, #3
    54c4:	4b83      	ldr	r3, [pc, #524]	; (56d4 <main+0x570>)
    54c6:	447b      	add	r3, pc
    54c8:	4798      	blx	r3
#ifdef ENABLE_USB_DEBUG
	stdio_usb_init();					// stdio over USB CDC
    54ca:	4b83      	ldr	r3, [pc, #524]	; (56d8 <main+0x574>)
    54cc:	58e3      	ldr	r3, [r4, r3]
    54ce:	4798      	blx	r3
	stdio_usb_enable();					// stdio over USB CDC
    54d0:	4b82      	ldr	r3, [pc, #520]	; (56dc <main+0x578>)
    54d2:	58e3      	ldr	r3, [r4, r3]
    54d4:	4798      	blx	r3
	delay_ms(500);						// Wait for USB to be ready
    54d6:	23fa      	movs	r3, #250	; 0xfa
    54d8:	005b      	lsls	r3, r3, #1
    54da:	0018      	movs	r0, r3
    54dc:	4b80      	ldr	r3, [pc, #512]	; (56e0 <main+0x57c>)
    54de:	58e3      	ldr	r3, [r4, r3]
    54e0:	4798      	blx	r3
#endif
	// Print diagnostic information
	debug_print("\n\n\n");
    54e2:	4b80      	ldr	r3, [pc, #512]	; (56e4 <main+0x580>)
    54e4:	447b      	add	r3, pc
    54e6:	0018      	movs	r0, r3
    54e8:	4b7f      	ldr	r3, [pc, #508]	; (56e8 <main+0x584>)
    54ea:	447b      	add	r3, pc
    54ec:	4798      	blx	r3
	debug_print("..... Bootloader started .....\n");
    54ee:	4b7f      	ldr	r3, [pc, #508]	; (56ec <main+0x588>)
    54f0:	447b      	add	r3, pc
    54f2:	0018      	movs	r0, r3
    54f4:	4b7e      	ldr	r3, [pc, #504]	; (56f0 <main+0x58c>)
    54f6:	447b      	add	r3, pc
    54f8:	4798      	blx	r3
	debug_print("Compiled on: %s %s \n\n\n", __DATE__, __TIME__);
    54fa:	4b7e      	ldr	r3, [pc, #504]	; (56f4 <main+0x590>)
    54fc:	447b      	add	r3, pc
    54fe:	001a      	movs	r2, r3
    5500:	4b7d      	ldr	r3, [pc, #500]	; (56f8 <main+0x594>)
    5502:	447b      	add	r3, pc
    5504:	0019      	movs	r1, r3
    5506:	4b7d      	ldr	r3, [pc, #500]	; (56fc <main+0x598>)
    5508:	447b      	add	r3, pc
    550a:	0018      	movs	r0, r3
    550c:	4b7c      	ldr	r3, [pc, #496]	; (5700 <main+0x59c>)
    550e:	447b      	add	r3, pc
    5510:	4798      	blx	r3

	// Peripheral init
	enum status_code code;
	code = configure_rtc();				// RTC module
    5512:	23ae      	movs	r3, #174	; 0xae
    5514:	009b      	lsls	r3, r3, #2
    5516:	2208      	movs	r2, #8
    5518:	18ba      	adds	r2, r7, r2
    551a:	18d5      	adds	r5, r2, r3
    551c:	4b79      	ldr	r3, [pc, #484]	; (5704 <main+0x5a0>)
    551e:	447b      	add	r3, pc
    5520:	4798      	blx	r3
    5522:	0003      	movs	r3, r0
    5524:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(1,"RTC module init failed.\n");
    5526:	23ae      	movs	r3, #174	; 0xae
    5528:	009b      	lsls	r3, r3, #2
    552a:	2208      	movs	r2, #8
    552c:	4694      	mov	ip, r2
    552e:	44bc      	add	ip, r7
    5530:	4463      	add	r3, ip
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	2b00      	cmp	r3, #0
    5536:	d006      	beq.n	5546 <main+0x3e2>
    5538:	4b73      	ldr	r3, [pc, #460]	; (5708 <main+0x5a4>)
    553a:	447b      	add	r3, pc
    553c:	0019      	movs	r1, r3
    553e:	2001      	movs	r0, #1
    5540:	4b72      	ldr	r3, [pc, #456]	; (570c <main+0x5a8>)
    5542:	447b      	add	r3, pc
    5544:	4798      	blx	r3
	code = configure_bod();				// BOD detector
    5546:	23ae      	movs	r3, #174	; 0xae
    5548:	009b      	lsls	r3, r3, #2
    554a:	2208      	movs	r2, #8
    554c:	18ba      	adds	r2, r7, r2
    554e:	18d5      	adds	r5, r2, r3
    5550:	4b6f      	ldr	r3, [pc, #444]	; (5710 <main+0x5ac>)
    5552:	447b      	add	r3, pc
    5554:	4798      	blx	r3
    5556:	0003      	movs	r3, r0
    5558:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(2,"BOD module init failed.\n");
    555a:	23ae      	movs	r3, #174	; 0xae
    555c:	009b      	lsls	r3, r3, #2
    555e:	2208      	movs	r2, #8
    5560:	4694      	mov	ip, r2
    5562:	44bc      	add	ip, r7
    5564:	4463      	add	r3, ip
    5566:	781b      	ldrb	r3, [r3, #0]
    5568:	2b00      	cmp	r3, #0
    556a:	d006      	beq.n	557a <main+0x416>
    556c:	4b69      	ldr	r3, [pc, #420]	; (5714 <main+0x5b0>)
    556e:	447b      	add	r3, pc
    5570:	0019      	movs	r1, r3
    5572:	2002      	movs	r0, #2
    5574:	4b68      	ldr	r3, [pc, #416]	; (5718 <main+0x5b4>)
    5576:	447b      	add	r3, pc
    5578:	4798      	blx	r3
	code = configure_wakeup();			// Wake-up from sleep using buttons
    557a:	23ae      	movs	r3, #174	; 0xae
    557c:	009b      	lsls	r3, r3, #2
    557e:	2208      	movs	r2, #8
    5580:	18ba      	adds	r2, r7, r2
    5582:	18d5      	adds	r5, r2, r3
    5584:	4b65      	ldr	r3, [pc, #404]	; (571c <main+0x5b8>)
    5586:	447b      	add	r3, pc
    5588:	4798      	blx	r3
    558a:	0003      	movs	r3, r0
    558c:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(3,"EXTINT module init failed.\n");
    558e:	23ae      	movs	r3, #174	; 0xae
    5590:	009b      	lsls	r3, r3, #2
    5592:	2208      	movs	r2, #8
    5594:	4694      	mov	ip, r2
    5596:	44bc      	add	ip, r7
    5598:	4463      	add	r3, ip
    559a:	781b      	ldrb	r3, [r3, #0]
    559c:	2b00      	cmp	r3, #0
    559e:	d006      	beq.n	55ae <main+0x44a>
    55a0:	4b5f      	ldr	r3, [pc, #380]	; (5720 <main+0x5bc>)
    55a2:	447b      	add	r3, pc
    55a4:	0019      	movs	r1, r3
    55a6:	2003      	movs	r0, #3
    55a8:	4b5e      	ldr	r3, [pc, #376]	; (5724 <main+0x5c0>)
    55aa:	447b      	add	r3, pc
    55ac:	4798      	blx	r3
	code = configure_nvm();				// NVM controller
    55ae:	23ae      	movs	r3, #174	; 0xae
    55b0:	009b      	lsls	r3, r3, #2
    55b2:	2208      	movs	r2, #8
    55b4:	18ba      	adds	r2, r7, r2
    55b6:	18d5      	adds	r5, r2, r3
    55b8:	4b5b      	ldr	r3, [pc, #364]	; (5728 <main+0x5c4>)
    55ba:	447b      	add	r3, pc
    55bc:	4798      	blx	r3
    55be:	0003      	movs	r3, r0
    55c0:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(4,"NVM module init failed.\n");
    55c2:	23ae      	movs	r3, #174	; 0xae
    55c4:	009b      	lsls	r3, r3, #2
    55c6:	2208      	movs	r2, #8
    55c8:	4694      	mov	ip, r2
    55ca:	44bc      	add	ip, r7
    55cc:	4463      	add	r3, ip
    55ce:	781b      	ldrb	r3, [r3, #0]
    55d0:	2b00      	cmp	r3, #0
    55d2:	d006      	beq.n	55e2 <main+0x47e>
    55d4:	4b55      	ldr	r3, [pc, #340]	; (572c <main+0x5c8>)
    55d6:	447b      	add	r3, pc
    55d8:	0019      	movs	r1, r3
    55da:	2004      	movs	r0, #4
    55dc:	4b54      	ldr	r3, [pc, #336]	; (5730 <main+0x5cc>)
    55de:	447b      	add	r3, pc
    55e0:	4798      	blx	r3

	// RTC time check
	struct rtc_calendar_time time;
	rtc_calendar_get_time(&rtc_instance, &time);
    55e2:	230c      	movs	r3, #12
    55e4:	18fa      	adds	r2, r7, r3
    55e6:	4b53      	ldr	r3, [pc, #332]	; (5734 <main+0x5d0>)
    55e8:	58e3      	ldr	r3, [r4, r3]
    55ea:	0011      	movs	r1, r2
    55ec:	0018      	movs	r0, r3
    55ee:	4b52      	ldr	r3, [pc, #328]	; (5738 <main+0x5d4>)
    55f0:	58e3      	ldr	r3, [r4, r3]
    55f2:	4798      	blx	r3
	debug_print("Local Time: %d/%d/%d  %d:%d:%d\n", time.month, time.day, time.year, time.hour, time.minute, time.second);
    55f4:	4b51      	ldr	r3, [pc, #324]	; (573c <main+0x5d8>)
    55f6:	22b6      	movs	r2, #182	; 0xb6
    55f8:	0092      	lsls	r2, r2, #2
    55fa:	4694      	mov	ip, r2
    55fc:	2208      	movs	r2, #8
    55fe:	4690      	mov	r8, r2
    5600:	44b8      	add	r8, r7
    5602:	44c4      	add	ip, r8
    5604:	4463      	add	r3, ip
    5606:	795b      	ldrb	r3, [r3, #5]
    5608:	001d      	movs	r5, r3
    560a:	4b4c      	ldr	r3, [pc, #304]	; (573c <main+0x5d8>)
    560c:	22b6      	movs	r2, #182	; 0xb6
    560e:	0092      	lsls	r2, r2, #2
    5610:	4694      	mov	ip, r2
    5612:	2208      	movs	r2, #8
    5614:	4690      	mov	r8, r2
    5616:	44b8      	add	r8, r7
    5618:	44c4      	add	ip, r8
    561a:	4463      	add	r3, ip
    561c:	791b      	ldrb	r3, [r3, #4]
    561e:	001e      	movs	r6, r3
    5620:	4b46      	ldr	r3, [pc, #280]	; (573c <main+0x5d8>)
    5622:	22b6      	movs	r2, #182	; 0xb6
    5624:	0092      	lsls	r2, r2, #2
    5626:	4694      	mov	ip, r2
    5628:	2208      	movs	r2, #8
    562a:	4690      	mov	r8, r2
    562c:	44b8      	add	r8, r7
    562e:	44c4      	add	ip, r8
    5630:	4463      	add	r3, ip
    5632:	88db      	ldrh	r3, [r3, #6]
    5634:	607b      	str	r3, [r7, #4]
    5636:	4b41      	ldr	r3, [pc, #260]	; (573c <main+0x5d8>)
    5638:	22b6      	movs	r2, #182	; 0xb6
    563a:	0092      	lsls	r2, r2, #2
    563c:	4694      	mov	ip, r2
    563e:	2208      	movs	r2, #8
    5640:	4690      	mov	r8, r2
    5642:	44b8      	add	r8, r7
    5644:	44c4      	add	ip, r8
    5646:	4463      	add	r3, ip
    5648:	789b      	ldrb	r3, [r3, #2]
    564a:	001a      	movs	r2, r3
    564c:	4b3b      	ldr	r3, [pc, #236]	; (573c <main+0x5d8>)
    564e:	21b6      	movs	r1, #182	; 0xb6
    5650:	0089      	lsls	r1, r1, #2
    5652:	468c      	mov	ip, r1
    5654:	2108      	movs	r1, #8
    5656:	4688      	mov	r8, r1
    5658:	44b8      	add	r8, r7
    565a:	44c4      	add	ip, r8
    565c:	4463      	add	r3, ip
    565e:	785b      	ldrb	r3, [r3, #1]
    5660:	0019      	movs	r1, r3
    5662:	4b36      	ldr	r3, [pc, #216]	; (573c <main+0x5d8>)
    5664:	20b6      	movs	r0, #182	; 0xb6
    5666:	0080      	lsls	r0, r0, #2
    5668:	4684      	mov	ip, r0
    566a:	2008      	movs	r0, #8
    566c:	4680      	mov	r8, r0
    566e:	44b8      	add	r8, r7
    5670:	44c4      	add	ip, r8
    5672:	4463      	add	r3, ip
    5674:	781b      	ldrb	r3, [r3, #0]
    5676:	4832      	ldr	r0, [pc, #200]	; (5740 <main+0x5dc>)
    5678:	4478      	add	r0, pc
    567a:	9302      	str	r3, [sp, #8]
    567c:	9101      	str	r1, [sp, #4]
    567e:	9200      	str	r2, [sp, #0]
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	0032      	movs	r2, r6
    5684:	0029      	movs	r1, r5
    5686:	4d2f      	ldr	r5, [pc, #188]	; (5744 <main+0x5e0>)
    5688:	447d      	add	r5, pc
    568a:	47a8      	blx	r5
	debug_print("New image file: %s\n", sdError?"NOT FOUND":"FOUND");
    568c:	4b05      	ldr	r3, [pc, #20]	; (56a4 <main+0x540>)
    568e:	2208      	movs	r2, #8
    5690:	4694      	mov	ip, r2
    5692:	44bc      	add	ip, r7
    5694:	4463      	add	r3, ip
    5696:	781b      	ldrb	r3, [r3, #0]
    5698:	2b00      	cmp	r3, #0
    569a:	d057      	beq.n	574c <main+0x5e8>
    569c:	4b2a      	ldr	r3, [pc, #168]	; (5748 <main+0x5e4>)
    569e:	447b      	add	r3, pc
    56a0:	001a      	movs	r2, r3
    56a2:	e056      	b.n	5752 <main+0x5ee>
    56a4:	000002d6 	.word	0x000002d6
    56a8:	fffffd34 	.word	0xfffffd34
    56ac:	42000c00 	.word	0x42000c00
    56b0:	0000009c 	.word	0x0000009c
    56b4:	fffff9ed 	.word	0xfffff9ed
    56b8:	fffff7af 	.word	0xfffff7af
    56bc:	000002d7 	.word	0x000002d7
    56c0:	00000599 	.word	0x00000599
    56c4:	00000759 	.word	0x00000759
    56c8:	0000004c 	.word	0x0000004c
    56cc:	00000178 	.word	0x00000178
    56d0:	fffff757 	.word	0xfffff757
    56d4:	fffff8df 	.word	0xfffff8df
    56d8:	000002d0 	.word	0x000002d0
    56dc:	0000021c 	.word	0x0000021c
    56e0:	000002a4 	.word	0x000002a4
    56e4:	0000c660 	.word	0x0000c660
    56e8:	000008cb 	.word	0x000008cb
    56ec:	0000c658 	.word	0x0000c658
    56f0:	000008bf 	.word	0x000008bf
    56f4:	0000c66c 	.word	0x0000c66c
    56f8:	0000c672 	.word	0x0000c672
    56fc:	0000c678 	.word	0x0000c678
    5700:	000008a7 	.word	0x000008a7
    5704:	fffffa7f 	.word	0xfffffa7f
    5708:	0000c65e 	.word	0x0000c65e
    570c:	00000807 	.word	0x00000807
    5710:	fffffb33 	.word	0xfffffb33
    5714:	0000c646 	.word	0x0000c646
    5718:	000007d3 	.word	0x000007d3
    571c:	fffff957 	.word	0xfffff957
    5720:	0000c62e 	.word	0x0000c62e
    5724:	0000079f 	.word	0x0000079f
    5728:	fffffa87 	.word	0xfffffa87
    572c:	0000c616 	.word	0x0000c616
    5730:	0000076b 	.word	0x0000076b
    5734:	00000030 	.word	0x00000030
    5738:	00000134 	.word	0x00000134
    573c:	fffffd2c 	.word	0xfffffd2c
    5740:	0000c590 	.word	0x0000c590
    5744:	0000072d 	.word	0x0000072d
    5748:	0000c58a 	.word	0x0000c58a
    574c:	4b99      	ldr	r3, [pc, #612]	; (59b4 <main+0x850>)
    574e:	447b      	add	r3, pc
    5750:	001a      	movs	r2, r3
    5752:	4b99      	ldr	r3, [pc, #612]	; (59b8 <main+0x854>)
    5754:	447b      	add	r3, pc
    5756:	0011      	movs	r1, r2
    5758:	0018      	movs	r0, r3
    575a:	4b98      	ldr	r3, [pc, #608]	; (59bc <main+0x858>)
    575c:	447b      	add	r3, pc
    575e:	4798      	blx	r3
	
	if (sdError) {
    5760:	4b97      	ldr	r3, [pc, #604]	; (59c0 <main+0x85c>)
    5762:	2208      	movs	r2, #8
    5764:	4694      	mov	ip, r2
    5766:	44bc      	add	ip, r7
    5768:	4463      	add	r3, ip
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	2b00      	cmp	r3, #0
    576e:	d015      	beq.n	579c <main+0x638>
		debug_print("Nothing to do. Going to sleep.\n");
    5770:	4b94      	ldr	r3, [pc, #592]	; (59c4 <main+0x860>)
    5772:	447b      	add	r3, pc
    5774:	0018      	movs	r0, r3
    5776:	4b94      	ldr	r3, [pc, #592]	; (59c8 <main+0x864>)
    5778:	447b      	add	r3, pc
    577a:	4798      	blx	r3
		led_blink(1,100,0);		// Blink once to indicate nothing to do
    577c:	2200      	movs	r2, #0
    577e:	2164      	movs	r1, #100	; 0x64
    5780:	2001      	movs	r0, #1
    5782:	4b92      	ldr	r3, [pc, #584]	; (59cc <main+0x868>)
    5784:	447b      	add	r3, pc
    5786:	4798      	blx	r3
		delay_ms(100);
    5788:	2064      	movs	r0, #100	; 0x64
    578a:	4b91      	ldr	r3, [pc, #580]	; (59d0 <main+0x86c>)
    578c:	58e3      	ldr	r3, [r4, r3]
    578e:	4798      	blx	r3
		system_sleep();			// Sleep
    5790:	4b90      	ldr	r3, [pc, #576]	; (59d4 <main+0x870>)
    5792:	447b      	add	r3, pc
    5794:	4798      	blx	r3
		system_reset();			// Restart on wake from sleep
    5796:	4b90      	ldr	r3, [pc, #576]	; (59d8 <main+0x874>)
    5798:	447b      	add	r3, pc
    579a:	4798      	blx	r3
	}

	// Init the SD card driver (spi port) on new clock
	sd_mmc_init();
    579c:	4b8f      	ldr	r3, [pc, #572]	; (59dc <main+0x878>)
    579e:	58e3      	ldr	r3, [r4, r3]
    57a0:	4798      	blx	r3

	// Open the image file
	res = f_open(&file_object,(const char *)image_name, FA_READ);
    57a2:	4b8f      	ldr	r3, [pc, #572]	; (59e0 <main+0x87c>)
    57a4:	2208      	movs	r2, #8
    57a6:	18ba      	adds	r2, r7, r2
    57a8:	18d5      	adds	r5, r2, r3
    57aa:	23b4      	movs	r3, #180	; 0xb4
    57ac:	009b      	lsls	r3, r3, #2
    57ae:	2208      	movs	r2, #8
    57b0:	4694      	mov	ip, r2
    57b2:	44bc      	add	ip, r7
    57b4:	4463      	add	r3, ip
    57b6:	6819      	ldr	r1, [r3, #0]
    57b8:	2360      	movs	r3, #96	; 0x60
    57ba:	2208      	movs	r2, #8
    57bc:	4694      	mov	ip, r2
    57be:	44bc      	add	ip, r7
    57c0:	4463      	add	r3, ip
    57c2:	2201      	movs	r2, #1
    57c4:	0018      	movs	r0, r3
    57c6:	4b87      	ldr	r3, [pc, #540]	; (59e4 <main+0x880>)
    57c8:	58e3      	ldr	r3, [r4, r3]
    57ca:	4798      	blx	r3
    57cc:	0003      	movs	r3, r0
    57ce:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(4,"File open failed.\n");
    57d0:	4b83      	ldr	r3, [pc, #524]	; (59e0 <main+0x87c>)
    57d2:	2208      	movs	r2, #8
    57d4:	4694      	mov	ip, r2
    57d6:	44bc      	add	ip, r7
    57d8:	4463      	add	r3, ip
    57da:	781b      	ldrb	r3, [r3, #0]
    57dc:	2b00      	cmp	r3, #0
    57de:	d006      	beq.n	57ee <main+0x68a>
    57e0:	4b81      	ldr	r3, [pc, #516]	; (59e8 <main+0x884>)
    57e2:	447b      	add	r3, pc
    57e4:	0019      	movs	r1, r3
    57e6:	2004      	movs	r0, #4
    57e8:	4b80      	ldr	r3, [pc, #512]	; (59ec <main+0x888>)
    57ea:	447b      	add	r3, pc
    57ec:	4798      	blx	r3

	// Program memory with image
	UINT iRead = 0;
    57ee:	2300      	movs	r3, #0
    57f0:	60bb      	str	r3, [r7, #8]
	uint32_t len = 0;
    57f2:	2300      	movs	r3, #0
    57f4:	22b2      	movs	r2, #178	; 0xb2
    57f6:	0092      	lsls	r2, r2, #2
    57f8:	2108      	movs	r1, #8
    57fa:	468c      	mov	ip, r1
    57fc:	44bc      	add	ip, r7
    57fe:	4462      	add	r2, ip
    5800:	6013      	str	r3, [r2, #0]
	uint32_t curr_prog_addr = APP_START_ADDRESS;
    5802:	23c0      	movs	r3, #192	; 0xc0
    5804:	025b      	lsls	r3, r3, #9
    5806:	22b1      	movs	r2, #177	; 0xb1
    5808:	0092      	lsls	r2, r2, #2
    580a:	2108      	movs	r1, #8
    580c:	468c      	mov	ip, r1
    580e:	44bc      	add	ip, r7
    5810:	4462      	add	r2, ip
    5812:	6013      	str	r3, [r2, #0]
	do {
		// Read block
		if(file_object.fsize > MAX_CODE_SIZE) fatal_error(6,"File exceeds max size of %d bytes.\n", MAX_CODE_SIZE);
    5814:	4b76      	ldr	r3, [pc, #472]	; (59f0 <main+0x88c>)
    5816:	22b6      	movs	r2, #182	; 0xb6
    5818:	0092      	lsls	r2, r2, #2
    581a:	4694      	mov	ip, r2
    581c:	2208      	movs	r2, #8
    581e:	4690      	mov	r8, r2
    5820:	44b8      	add	r8, r7
    5822:	44c4      	add	ip, r8
    5824:	4463      	add	r3, ip
    5826:	68da      	ldr	r2, [r3, #12]
    5828:	2380      	movs	r3, #128	; 0x80
    582a:	025b      	lsls	r3, r3, #9
    582c:	429a      	cmp	r2, r3
    582e:	d909      	bls.n	5844 <main+0x6e0>
    5830:	2380      	movs	r3, #128	; 0x80
    5832:	025b      	lsls	r3, r3, #9
    5834:	4a6f      	ldr	r2, [pc, #444]	; (59f4 <main+0x890>)
    5836:	447a      	add	r2, pc
    5838:	0011      	movs	r1, r2
    583a:	001a      	movs	r2, r3
    583c:	2006      	movs	r0, #6
    583e:	4b6e      	ldr	r3, [pc, #440]	; (59f8 <main+0x894>)
    5840:	447b      	add	r3, pc
    5842:	4798      	blx	r3
		res = f_read(&file_object, (void *) buff, MAX_BUF_SIZE, &iRead);
    5844:	4b66      	ldr	r3, [pc, #408]	; (59e0 <main+0x87c>)
    5846:	2208      	movs	r2, #8
    5848:	18ba      	adds	r2, r7, r2
    584a:	18d5      	adds	r5, r2, r3
    584c:	2308      	movs	r3, #8
    584e:	18f9      	adds	r1, r7, r3
    5850:	2380      	movs	r3, #128	; 0x80
    5852:	009a      	lsls	r2, r3, #2
    5854:	4b69      	ldr	r3, [pc, #420]	; (59fc <main+0x898>)
    5856:	447b      	add	r3, pc
    5858:	001e      	movs	r6, r3
    585a:	2360      	movs	r3, #96	; 0x60
    585c:	2008      	movs	r0, #8
    585e:	1838      	adds	r0, r7, r0
    5860:	18c0      	adds	r0, r0, r3
    5862:	000b      	movs	r3, r1
    5864:	0031      	movs	r1, r6
    5866:	4e66      	ldr	r6, [pc, #408]	; (5a00 <main+0x89c>)
    5868:	59a6      	ldr	r6, [r4, r6]
    586a:	47b0      	blx	r6
    586c:	0003      	movs	r3, r0
    586e:	702b      	strb	r3, [r5, #0]
		if(res != FR_OK) fatal_error(7,"File read error after %d bytes\n", iRead);
    5870:	4b5b      	ldr	r3, [pc, #364]	; (59e0 <main+0x87c>)
    5872:	2208      	movs	r2, #8
    5874:	4694      	mov	ip, r2
    5876:	44bc      	add	ip, r7
    5878:	4463      	add	r3, ip
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	2b00      	cmp	r3, #0
    587e:	d008      	beq.n	5892 <main+0x72e>
    5880:	68bb      	ldr	r3, [r7, #8]
    5882:	4a60      	ldr	r2, [pc, #384]	; (5a04 <main+0x8a0>)
    5884:	447a      	add	r2, pc
    5886:	0011      	movs	r1, r2
    5888:	001a      	movs	r2, r3
    588a:	2007      	movs	r0, #7
    588c:	4b5e      	ldr	r3, [pc, #376]	; (5a08 <main+0x8a4>)
    588e:	447b      	add	r3, pc
    5890:	4798      	blx	r3
			
		// Program block
		program_memory(curr_prog_addr, buff, iRead);
    5892:	68ba      	ldr	r2, [r7, #8]
    5894:	4b5d      	ldr	r3, [pc, #372]	; (5a0c <main+0x8a8>)
    5896:	447b      	add	r3, pc
    5898:	0019      	movs	r1, r3
    589a:	23b1      	movs	r3, #177	; 0xb1
    589c:	009b      	lsls	r3, r3, #2
    589e:	2008      	movs	r0, #8
    58a0:	4684      	mov	ip, r0
    58a2:	44bc      	add	ip, r7
    58a4:	4463      	add	r3, ip
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	0018      	movs	r0, r3
    58aa:	4b59      	ldr	r3, [pc, #356]	; (5a10 <main+0x8ac>)
    58ac:	447b      	add	r3, pc
    58ae:	4798      	blx	r3
		debug_print("Programed %u of %u bytes\n", (unsigned int)(len), (unsigned int)(file_object.fsize));
    58b0:	4b4f      	ldr	r3, [pc, #316]	; (59f0 <main+0x88c>)
    58b2:	22b6      	movs	r2, #182	; 0xb6
    58b4:	0092      	lsls	r2, r2, #2
    58b6:	4694      	mov	ip, r2
    58b8:	2208      	movs	r2, #8
    58ba:	4690      	mov	r8, r2
    58bc:	44b8      	add	r8, r7
    58be:	44c4      	add	ip, r8
    58c0:	4463      	add	r3, ip
    58c2:	68da      	ldr	r2, [r3, #12]
    58c4:	23b2      	movs	r3, #178	; 0xb2
    58c6:	009b      	lsls	r3, r3, #2
    58c8:	2108      	movs	r1, #8
    58ca:	468c      	mov	ip, r1
    58cc:	44bc      	add	ip, r7
    58ce:	4463      	add	r3, ip
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	4950      	ldr	r1, [pc, #320]	; (5a14 <main+0x8b0>)
    58d4:	4479      	add	r1, pc
    58d6:	0008      	movs	r0, r1
    58d8:	0019      	movs	r1, r3
    58da:	4b4f      	ldr	r3, [pc, #316]	; (5a18 <main+0x8b4>)
    58dc:	447b      	add	r3, pc
    58de:	4798      	blx	r3

		// Increment
		curr_prog_addr += iRead;
    58e0:	68bb      	ldr	r3, [r7, #8]
    58e2:	22b1      	movs	r2, #177	; 0xb1
    58e4:	0092      	lsls	r2, r2, #2
    58e6:	2108      	movs	r1, #8
    58e8:	468c      	mov	ip, r1
    58ea:	44bc      	add	ip, r7
    58ec:	4462      	add	r2, ip
    58ee:	6812      	ldr	r2, [r2, #0]
    58f0:	18d3      	adds	r3, r2, r3
    58f2:	22b1      	movs	r2, #177	; 0xb1
    58f4:	0092      	lsls	r2, r2, #2
    58f6:	2108      	movs	r1, #8
    58f8:	468c      	mov	ip, r1
    58fa:	44bc      	add	ip, r7
    58fc:	4462      	add	r2, ip
    58fe:	6013      	str	r3, [r2, #0]
		len += iRead;
    5900:	68bb      	ldr	r3, [r7, #8]
    5902:	22b2      	movs	r2, #178	; 0xb2
    5904:	0092      	lsls	r2, r2, #2
    5906:	2108      	movs	r1, #8
    5908:	468c      	mov	ip, r1
    590a:	44bc      	add	ip, r7
    590c:	4462      	add	r2, ip
    590e:	6812      	ldr	r2, [r2, #0]
    5910:	18d3      	adds	r3, r2, r3
    5912:	22b2      	movs	r2, #178	; 0xb2
    5914:	0092      	lsls	r2, r2, #2
    5916:	2108      	movs	r1, #8
    5918:	468c      	mov	ip, r1
    591a:	44bc      	add	ip, r7
    591c:	4462      	add	r2, ip
    591e:	6013      	str	r3, [r2, #0]
		
		// Check size
		if(len > MAX_CODE_SIZE)
    5920:	23b2      	movs	r3, #178	; 0xb2
    5922:	009b      	lsls	r3, r3, #2
    5924:	2208      	movs	r2, #8
    5926:	4694      	mov	ip, r2
    5928:	44bc      	add	ip, r7
    592a:	4463      	add	r3, ip
    592c:	681a      	ldr	r2, [r3, #0]
    592e:	2380      	movs	r3, #128	; 0x80
    5930:	025b      	lsls	r3, r3, #9
    5932:	429a      	cmp	r2, r3
    5934:	d906      	bls.n	5944 <main+0x7e0>
		fatal_error(8,"Too many bytes\n");
    5936:	4b39      	ldr	r3, [pc, #228]	; (5a1c <main+0x8b8>)
    5938:	447b      	add	r3, pc
    593a:	0019      	movs	r1, r3
    593c:	2008      	movs	r0, #8
    593e:	4b38      	ldr	r3, [pc, #224]	; (5a20 <main+0x8bc>)
    5940:	447b      	add	r3, pc
    5942:	4798      	blx	r3
	} while (iRead != 0);
    5944:	68bb      	ldr	r3, [r7, #8]
    5946:	2b00      	cmp	r3, #0
    5948:	d000      	beq.n	594c <main+0x7e8>
    594a:	e763      	b.n	5814 <main+0x6b0>
	
	// Delete image from SD
	res = f_unlink((const char *)image_name);
    594c:	4b24      	ldr	r3, [pc, #144]	; (59e0 <main+0x87c>)
    594e:	2208      	movs	r2, #8
    5950:	18ba      	adds	r2, r7, r2
    5952:	18d5      	adds	r5, r2, r3
    5954:	23b4      	movs	r3, #180	; 0xb4
    5956:	009b      	lsls	r3, r3, #2
    5958:	2208      	movs	r2, #8
    595a:	4694      	mov	ip, r2
    595c:	44bc      	add	ip, r7
    595e:	4463      	add	r3, ip
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	0018      	movs	r0, r3
    5964:	4b2f      	ldr	r3, [pc, #188]	; (5a24 <main+0x8c0>)
    5966:	58e3      	ldr	r3, [r4, r3]
    5968:	4798      	blx	r3
    596a:	0003      	movs	r3, r0
    596c:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(9,"Unable to delete file.\n");
    596e:	4b1c      	ldr	r3, [pc, #112]	; (59e0 <main+0x87c>)
    5970:	2208      	movs	r2, #8
    5972:	4694      	mov	ip, r2
    5974:	44bc      	add	ip, r7
    5976:	4463      	add	r3, ip
    5978:	781b      	ldrb	r3, [r3, #0]
    597a:	2b00      	cmp	r3, #0
    597c:	d006      	beq.n	598c <main+0x828>
    597e:	4b2a      	ldr	r3, [pc, #168]	; (5a28 <main+0x8c4>)
    5980:	447b      	add	r3, pc
    5982:	0019      	movs	r1, r3
    5984:	2009      	movs	r0, #9
    5986:	4b29      	ldr	r3, [pc, #164]	; (5a2c <main+0x8c8>)
    5988:	447b      	add	r3, pc
    598a:	4798      	blx	r3
	
	// Trigger re-boot
	system_reset();
    598c:	4b28      	ldr	r3, [pc, #160]	; (5a30 <main+0x8cc>)
    598e:	447b      	add	r3, pc
    5990:	4798      	blx	r3

	fatal_error(10,"Should not be here\n");
    5992:	4b28      	ldr	r3, [pc, #160]	; (5a34 <main+0x8d0>)
    5994:	447b      	add	r3, pc
    5996:	0019      	movs	r1, r3
    5998:	200a      	movs	r0, #10
    599a:	4b27      	ldr	r3, [pc, #156]	; (5a38 <main+0x8d4>)
    599c:	447b      	add	r3, pc
    599e:	4798      	blx	r3
    59a0:	2300      	movs	r3, #0
}
    59a2:	0018      	movs	r0, r3
    59a4:	46bd      	mov	sp, r7
    59a6:	23b8      	movs	r3, #184	; 0xb8
    59a8:	009b      	lsls	r3, r3, #2
    59aa:	449d      	add	sp, r3
    59ac:	bc04      	pop	{r2}
    59ae:	4690      	mov	r8, r2
    59b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b2:	46c0      	nop			; (mov r8, r8)
    59b4:	0000c4e6 	.word	0x0000c4e6
    59b8:	0000c4e8 	.word	0x0000c4e8
    59bc:	00000659 	.word	0x00000659
    59c0:	000002d6 	.word	0x000002d6
    59c4:	0000c4de 	.word	0x0000c4de
    59c8:	0000063d 	.word	0x0000063d
    59cc:	00000481 	.word	0x00000481
    59d0:	000002a4 	.word	0x000002a4
    59d4:	fffff69b 	.word	0xfffff69b
    59d8:	fffff6a5 	.word	0xfffff6a5
    59dc:	00000044 	.word	0x00000044
    59e0:	000002b9 	.word	0x000002b9
    59e4:	0000029c 	.word	0x0000029c
    59e8:	0000c48e 	.word	0x0000c48e
    59ec:	0000055f 	.word	0x0000055f
    59f0:	fffffd88 	.word	0xfffffd88
    59f4:	0000c44e 	.word	0x0000c44e
    59f8:	00000509 	.word	0x00000509
    59fc:	1fffa97e 	.word	0x1fffa97e
    5a00:	000001a0 	.word	0x000001a0
    5a04:	0000c424 	.word	0x0000c424
    5a08:	000004bb 	.word	0x000004bb
    5a0c:	1fffa93e 	.word	0x1fffa93e
    5a10:	000001e5 	.word	0x000001e5
    5a14:	0000c3f4 	.word	0x0000c3f4
    5a18:	000004d9 	.word	0x000004d9
    5a1c:	0000c3ac 	.word	0x0000c3ac
    5a20:	00000409 	.word	0x00000409
    5a24:	00000110 	.word	0x00000110
    5a28:	0000c374 	.word	0x0000c374
    5a2c:	000003c1 	.word	0x000003c1
    5a30:	fffff4af 	.word	0xfffff4af
    5a34:	0000c378 	.word	0x0000c378
    5a38:	000003ad 	.word	0x000003ad

00005a3c <start_application>:

// Jump to the application
static void start_application(void) {
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b084      	sub	sp, #16
    5a40:	af00      	add	r7, sp, #0
	uint32_t *app_check_address_ptr;
	void (*application_code_entry)(void);
	app_check_address_ptr = (uint32_t *) APP_START_ADDRESS;
    5a42:	23c0      	movs	r3, #192	; 0xc0
    5a44:	025b      	lsls	r3, r3, #9
    5a46:	60fb      	str	r3, [r7, #12]
	
	// Don't jump if the application is blank
	if (*app_check_address_ptr == 0xFFFFFFFF) {
    5a48:	68fb      	ldr	r3, [r7, #12]
    5a4a:	681b      	ldr	r3, [r3, #0]
    5a4c:	3301      	adds	r3, #1
    5a4e:	d016      	beq.n	5a7e <start_application+0x42>
		return;
	}

	// Jump to application
	led_blink(2,100,1);				// Blink green twice to indicate jumping to application
    5a50:	2201      	movs	r2, #1
    5a52:	2164      	movs	r1, #100	; 0x64
    5a54:	2002      	movs	r0, #2
    5a56:	4b0c      	ldr	r3, [pc, #48]	; (5a88 <start_application+0x4c>)
    5a58:	447b      	add	r3, pc
    5a5a:	4798      	blx	r3

	// Get the reset vector address
	application_code_entry  = *(uint32_t*)(APP_START_ADDRESS + 4);
    5a5c:	4b0b      	ldr	r3, [pc, #44]	; (5a8c <start_application+0x50>)
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	60bb      	str	r3, [r7, #8]

	// Set stack pointer, set vector table offset, jump to application
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    5a62:	23c0      	movs	r3, #192	; 0xc0
    5a64:	025b      	lsls	r3, r3, #9
    5a66:	681b      	ldr	r3, [r3, #0]
    5a68:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	f383 8808 	msr	MSP, r3
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5a70:	4b07      	ldr	r3, [pc, #28]	; (5a90 <start_application+0x54>)
    5a72:	22c0      	movs	r2, #192	; 0xc0
    5a74:	0252      	lsls	r2, r2, #9
    5a76:	609a      	str	r2, [r3, #8]
	application_code_entry();
    5a78:	68bb      	ldr	r3, [r7, #8]
    5a7a:	4798      	blx	r3
    5a7c:	e000      	b.n	5a80 <start_application+0x44>
		return;
    5a7e:	46c0      	nop			; (mov r8, r8)
}
    5a80:	46bd      	mov	sp, r7
    5a82:	b004      	add	sp, #16
    5a84:	bd80      	pop	{r7, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	000001ad 	.word	0x000001ad
    5a8c:	00018004 	.word	0x00018004
    5a90:	e000ed00 	.word	0xe000ed00

00005a94 <program_memory>:

// Write a buffer of length len to address in flash memory
static void program_memory(uint32_t address, uint8_t *buffer, uint32_t len) {
    5a94:	b590      	push	{r4, r7, lr}
    5a96:	b087      	sub	sp, #28
    5a98:	af00      	add	r7, sp, #0
    5a9a:	60f8      	str	r0, [r7, #12]
    5a9c:	60b9      	str	r1, [r7, #8]
    5a9e:	607a      	str	r2, [r7, #4]
    5aa0:	4c4e      	ldr	r4, [pc, #312]	; (5bdc <program_memory+0x148>)
    5aa2:	447c      	add	r4, pc
	volatile enum status_code code;
	uint32_t offset = 0;
    5aa4:	2300      	movs	r3, #0
    5aa6:	617b      	str	r3, [r7, #20]
	// Multiples of Page Size
	while (len >= NVMCTRL_PAGE_SIZE) {
    5aa8:	e04a      	b.n	5b40 <program_memory+0xac>
		if ((address & 0xFF) == 0) {
    5aaa:	68fb      	ldr	r3, [r7, #12]
    5aac:	22ff      	movs	r2, #255	; 0xff
    5aae:	4013      	ands	r3, r2
    5ab0:	d11c      	bne.n	5aec <program_memory+0x58>
			do {
				code = nvm_erase_row(address);
    5ab2:	68fb      	ldr	r3, [r7, #12]
    5ab4:	0018      	movs	r0, r3
    5ab6:	4b4a      	ldr	r3, [pc, #296]	; (5be0 <program_memory+0x14c>)
    5ab8:	58e3      	ldr	r3, [r4, r3]
    5aba:	4798      	blx	r3
    5abc:	0003      	movs	r3, r0
    5abe:	001a      	movs	r2, r3
    5ac0:	2313      	movs	r3, #19
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    5ac6:	2313      	movs	r3, #19
    5ac8:	18fb      	adds	r3, r7, r3
    5aca:	781b      	ldrb	r3, [r3, #0]
    5acc:	b2db      	uxtb	r3, r3
    5ace:	2b05      	cmp	r3, #5
    5ad0:	d0ef      	beq.n	5ab2 <program_memory+0x1e>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    5ad2:	2313      	movs	r3, #19
    5ad4:	18fb      	adds	r3, r7, r3
    5ad6:	781b      	ldrb	r3, [r3, #0]
    5ad8:	b2db      	uxtb	r3, r3
    5ada:	2b00      	cmp	r3, #0
    5adc:	d006      	beq.n	5aec <program_memory+0x58>
    5ade:	4b41      	ldr	r3, [pc, #260]	; (5be4 <program_memory+0x150>)
    5ae0:	447b      	add	r3, pc
    5ae2:	0019      	movs	r1, r3
    5ae4:	200b      	movs	r0, #11
    5ae6:	4b40      	ldr	r3, [pc, #256]	; (5be8 <program_memory+0x154>)
    5ae8:	447b      	add	r3, pc
    5aea:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    5aec:	68ba      	ldr	r2, [r7, #8]
    5aee:	697b      	ldr	r3, [r7, #20]
    5af0:	18d1      	adds	r1, r2, r3
    5af2:	68fb      	ldr	r3, [r7, #12]
    5af4:	2240      	movs	r2, #64	; 0x40
    5af6:	0018      	movs	r0, r3
    5af8:	4b3c      	ldr	r3, [pc, #240]	; (5bec <program_memory+0x158>)
    5afa:	58e3      	ldr	r3, [r4, r3]
    5afc:	4798      	blx	r3
    5afe:	0003      	movs	r3, r0
    5b00:	001a      	movs	r2, r3
    5b02:	2313      	movs	r3, #19
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    5b08:	2313      	movs	r3, #19
    5b0a:	18fb      	adds	r3, r7, r3
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	2b05      	cmp	r3, #5
    5b12:	d0eb      	beq.n	5aec <program_memory+0x58>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    5b14:	2313      	movs	r3, #19
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	b2db      	uxtb	r3, r3
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	d006      	beq.n	5b2e <program_memory+0x9a>
    5b20:	4b33      	ldr	r3, [pc, #204]	; (5bf0 <program_memory+0x15c>)
    5b22:	447b      	add	r3, pc
    5b24:	0019      	movs	r1, r3
    5b26:	200c      	movs	r0, #12
    5b28:	4b32      	ldr	r3, [pc, #200]	; (5bf4 <program_memory+0x160>)
    5b2a:	447b      	add	r3, pc
    5b2c:	4798      	blx	r3
		address += NVMCTRL_PAGE_SIZE;
    5b2e:	68fb      	ldr	r3, [r7, #12]
    5b30:	3340      	adds	r3, #64	; 0x40
    5b32:	60fb      	str	r3, [r7, #12]
		offset += NVMCTRL_PAGE_SIZE;
    5b34:	697b      	ldr	r3, [r7, #20]
    5b36:	3340      	adds	r3, #64	; 0x40
    5b38:	617b      	str	r3, [r7, #20]
		len -= NVMCTRL_PAGE_SIZE;
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	3b40      	subs	r3, #64	; 0x40
    5b3e:	607b      	str	r3, [r7, #4]
	while (len >= NVMCTRL_PAGE_SIZE) {
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	2b3f      	cmp	r3, #63	; 0x3f
    5b44:	d8b1      	bhi.n	5aaa <program_memory+0x16>
	}
	// Fragment (leftover) bytes
	if (len > 0) {
    5b46:	687b      	ldr	r3, [r7, #4]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d042      	beq.n	5bd2 <program_memory+0x13e>
		if ((address & 0xFF) == 0) {
    5b4c:	68fb      	ldr	r3, [r7, #12]
    5b4e:	22ff      	movs	r2, #255	; 0xff
    5b50:	4013      	ands	r3, r2
    5b52:	d11c      	bne.n	5b8e <program_memory+0xfa>
			do {
				code = nvm_erase_row(address);
    5b54:	68fb      	ldr	r3, [r7, #12]
    5b56:	0018      	movs	r0, r3
    5b58:	4b21      	ldr	r3, [pc, #132]	; (5be0 <program_memory+0x14c>)
    5b5a:	58e3      	ldr	r3, [r4, r3]
    5b5c:	4798      	blx	r3
    5b5e:	0003      	movs	r3, r0
    5b60:	001a      	movs	r2, r3
    5b62:	2313      	movs	r3, #19
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    5b68:	2313      	movs	r3, #19
    5b6a:	18fb      	adds	r3, r7, r3
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	b2db      	uxtb	r3, r3
    5b70:	2b05      	cmp	r3, #5
    5b72:	d0ef      	beq.n	5b54 <program_memory+0xc0>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    5b74:	2313      	movs	r3, #19
    5b76:	18fb      	adds	r3, r7, r3
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d006      	beq.n	5b8e <program_memory+0xfa>
    5b80:	4b1d      	ldr	r3, [pc, #116]	; (5bf8 <program_memory+0x164>)
    5b82:	447b      	add	r3, pc
    5b84:	0019      	movs	r1, r3
    5b86:	200b      	movs	r0, #11
    5b88:	4b1c      	ldr	r3, [pc, #112]	; (5bfc <program_memory+0x168>)
    5b8a:	447b      	add	r3, pc
    5b8c:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, len);
    5b8e:	68ba      	ldr	r2, [r7, #8]
    5b90:	697b      	ldr	r3, [r7, #20]
    5b92:	18d1      	adds	r1, r2, r3
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	b29a      	uxth	r2, r3
    5b98:	68fb      	ldr	r3, [r7, #12]
    5b9a:	0018      	movs	r0, r3
    5b9c:	4b13      	ldr	r3, [pc, #76]	; (5bec <program_memory+0x158>)
    5b9e:	58e3      	ldr	r3, [r4, r3]
    5ba0:	4798      	blx	r3
    5ba2:	0003      	movs	r3, r0
    5ba4:	001a      	movs	r2, r3
    5ba6:	2313      	movs	r3, #19
    5ba8:	18fb      	adds	r3, r7, r3
    5baa:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    5bac:	2313      	movs	r3, #19
    5bae:	18fb      	adds	r3, r7, r3
    5bb0:	781b      	ldrb	r3, [r3, #0]
    5bb2:	b2db      	uxtb	r3, r3
    5bb4:	2b05      	cmp	r3, #5
    5bb6:	d0ea      	beq.n	5b8e <program_memory+0xfa>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    5bb8:	2313      	movs	r3, #19
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	b2db      	uxtb	r3, r3
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d006      	beq.n	5bd2 <program_memory+0x13e>
    5bc4:	4b0e      	ldr	r3, [pc, #56]	; (5c00 <program_memory+0x16c>)
    5bc6:	447b      	add	r3, pc
    5bc8:	0019      	movs	r1, r3
    5bca:	200c      	movs	r0, #12
    5bcc:	4b0d      	ldr	r3, [pc, #52]	; (5c04 <program_memory+0x170>)
    5bce:	447b      	add	r3, pc
    5bd0:	4798      	blx	r3
	}

}
    5bd2:	46c0      	nop			; (mov r8, r8)
    5bd4:	46bd      	mov	sp, r7
    5bd6:	b007      	add	sp, #28
    5bd8:	bd90      	pop	{r4, r7, pc}
    5bda:	46c0      	nop			; (mov r8, r8)
    5bdc:	0000c3be 	.word	0x0000c3be
    5be0:	000000dc 	.word	0x000000dc
    5be4:	0000c240 	.word	0x0000c240
    5be8:	00000261 	.word	0x00000261
    5bec:	00000008 	.word	0x00000008
    5bf0:	0000c216 	.word	0x0000c216
    5bf4:	0000021f 	.word	0x0000021f
    5bf8:	0000c19e 	.word	0x0000c19e
    5bfc:	000001bf 	.word	0x000001bf
    5c00:	0000c172 	.word	0x0000c172
    5c04:	0000017b 	.word	0x0000017b

00005c08 <led_blink>:

// Toggle LED for blink codes
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    5c08:	b590      	push	{r4, r7, lr}
    5c0a:	b087      	sub	sp, #28
    5c0c:	af00      	add	r7, sp, #0
    5c0e:	60f8      	str	r0, [r7, #12]
    5c10:	60b9      	str	r1, [r7, #8]
    5c12:	1dfb      	adds	r3, r7, #7
    5c14:	701a      	strb	r2, [r3, #0]
    5c16:	4c45      	ldr	r4, [pc, #276]	; (5d2c <led_blink+0x124>)
    5c18:	447c      	add	r4, pc
	bool state = 0;
    5c1a:	2317      	movs	r3, #23
    5c1c:	18fb      	adds	r3, r7, r3
    5c1e:	2200      	movs	r2, #0
    5c20:	701a      	strb	r2, [r3, #0]
	struct port_config cfg;
	port_get_config_defaults(&cfg);
    5c22:	2314      	movs	r3, #20
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	0018      	movs	r0, r3
    5c28:	4b41      	ldr	r3, [pc, #260]	; (5d30 <led_blink+0x128>)
    5c2a:	447b      	add	r3, pc
    5c2c:	4798      	blx	r3
	num_blinks = num_blinks * 2;
    5c2e:	68fb      	ldr	r3, [r7, #12]
    5c30:	005b      	lsls	r3, r3, #1
    5c32:	60fb      	str	r3, [r7, #12]
	while(num_blinks > 0) {
    5c34:	e05f      	b.n	5cf6 <led_blink+0xee>
		state = !state;
    5c36:	2317      	movs	r3, #23
    5c38:	18fb      	adds	r3, r7, r3
    5c3a:	781b      	ldrb	r3, [r3, #0]
    5c3c:	1e5a      	subs	r2, r3, #1
    5c3e:	4193      	sbcs	r3, r2
    5c40:	b2db      	uxtb	r3, r3
    5c42:	2201      	movs	r2, #1
    5c44:	4053      	eors	r3, r2
    5c46:	b2db      	uxtb	r3, r3
    5c48:	001a      	movs	r2, r3
    5c4a:	2317      	movs	r3, #23
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	701a      	strb	r2, [r3, #0]
    5c50:	781a      	ldrb	r2, [r3, #0]
    5c52:	2101      	movs	r1, #1
    5c54:	400a      	ands	r2, r1
    5c56:	701a      	strb	r2, [r3, #0]
		if (state) {
    5c58:	2317      	movs	r3, #23
    5c5a:	18fb      	adds	r3, r7, r3
    5c5c:	781b      	ldrb	r3, [r3, #0]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d020      	beq.n	5ca4 <led_blink+0x9c>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    5c62:	2314      	movs	r3, #20
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	2201      	movs	r2, #1
    5c68:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    5c6a:	2314      	movs	r3, #20
    5c6c:	18fb      	adds	r3, r7, r3
    5c6e:	2200      	movs	r2, #0
    5c70:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, !green);
    5c72:	1dfb      	adds	r3, r7, #7
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	1e5a      	subs	r2, r3, #1
    5c78:	4193      	sbcs	r3, r2
    5c7a:	b2db      	uxtb	r3, r3
    5c7c:	2201      	movs	r2, #1
    5c7e:	4053      	eors	r3, r2
    5c80:	b2db      	uxtb	r3, r3
    5c82:	1c1a      	adds	r2, r3, #0
    5c84:	2301      	movs	r3, #1
    5c86:	4013      	ands	r3, r2
    5c88:	b2db      	uxtb	r3, r3
    5c8a:	0019      	movs	r1, r3
    5c8c:	202b      	movs	r0, #43	; 0x2b
    5c8e:	4b29      	ldr	r3, [pc, #164]	; (5d34 <led_blink+0x12c>)
    5c90:	447b      	add	r3, pc
    5c92:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    5c94:	2314      	movs	r3, #20
    5c96:	18fb      	adds	r3, r7, r3
    5c98:	0019      	movs	r1, r3
    5c9a:	202b      	movs	r0, #43	; 0x2b
    5c9c:	4b26      	ldr	r3, [pc, #152]	; (5d38 <led_blink+0x130>)
    5c9e:	58e3      	ldr	r3, [r4, r3]
    5ca0:	4798      	blx	r3
    5ca2:	e013      	b.n	5ccc <led_blink+0xc4>
			} else {
			cfg.direction = PORT_PIN_DIR_INPUT;
    5ca4:	2314      	movs	r3, #20
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	2200      	movs	r2, #0
    5caa:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    5cac:	2314      	movs	r3, #20
    5cae:	18fb      	adds	r3, r7, r3
    5cb0:	2200      	movs	r2, #0
    5cb2:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, 0);
    5cb4:	2100      	movs	r1, #0
    5cb6:	202b      	movs	r0, #43	; 0x2b
    5cb8:	4b20      	ldr	r3, [pc, #128]	; (5d3c <led_blink+0x134>)
    5cba:	447b      	add	r3, pc
    5cbc:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    5cbe:	2314      	movs	r3, #20
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	0019      	movs	r1, r3
    5cc4:	202b      	movs	r0, #43	; 0x2b
    5cc6:	4b1c      	ldr	r3, [pc, #112]	; (5d38 <led_blink+0x130>)
    5cc8:	58e3      	ldr	r3, [r4, r3]
    5cca:	4798      	blx	r3
		}
		delay_ms(blink_period_ms/2);
    5ccc:	68bb      	ldr	r3, [r7, #8]
    5cce:	3301      	adds	r3, #1
    5cd0:	2b02      	cmp	r3, #2
    5cd2:	d909      	bls.n	5ce8 <led_blink+0xe0>
    5cd4:	68bb      	ldr	r3, [r7, #8]
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	da00      	bge.n	5cdc <led_blink+0xd4>
    5cda:	3301      	adds	r3, #1
    5cdc:	105b      	asrs	r3, r3, #1
    5cde:	0018      	movs	r0, r3
    5ce0:	4b17      	ldr	r3, [pc, #92]	; (5d40 <led_blink+0x138>)
    5ce2:	58e3      	ldr	r3, [r4, r3]
    5ce4:	4798      	blx	r3
    5ce6:	e003      	b.n	5cf0 <led_blink+0xe8>
    5ce8:	2001      	movs	r0, #1
    5cea:	4b16      	ldr	r3, [pc, #88]	; (5d44 <led_blink+0x13c>)
    5cec:	58e3      	ldr	r3, [r4, r3]
    5cee:	4798      	blx	r3
		num_blinks--;
    5cf0:	68fb      	ldr	r3, [r7, #12]
    5cf2:	3b01      	subs	r3, #1
    5cf4:	60fb      	str	r3, [r7, #12]
	while(num_blinks > 0) {
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	dc9c      	bgt.n	5c36 <led_blink+0x2e>
	}
	cfg.direction = PORT_PIN_DIR_INPUT;
    5cfc:	2314      	movs	r3, #20
    5cfe:	18fb      	adds	r3, r7, r3
    5d00:	2200      	movs	r2, #0
    5d02:	701a      	strb	r2, [r3, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    5d04:	2314      	movs	r3, #20
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	2200      	movs	r2, #0
    5d0a:	705a      	strb	r2, [r3, #1]
	port_pin_set_output_level(LED_OUT_PIN, 0);
    5d0c:	2100      	movs	r1, #0
    5d0e:	202b      	movs	r0, #43	; 0x2b
    5d10:	4b0d      	ldr	r3, [pc, #52]	; (5d48 <led_blink+0x140>)
    5d12:	447b      	add	r3, pc
    5d14:	4798      	blx	r3
	port_pin_set_config(LED_OUT_PIN, &cfg);
    5d16:	2314      	movs	r3, #20
    5d18:	18fb      	adds	r3, r7, r3
    5d1a:	0019      	movs	r1, r3
    5d1c:	202b      	movs	r0, #43	; 0x2b
    5d1e:	4b06      	ldr	r3, [pc, #24]	; (5d38 <led_blink+0x130>)
    5d20:	58e3      	ldr	r3, [r4, r3]
    5d22:	4798      	blx	r3
}
    5d24:	46c0      	nop			; (mov r8, r8)
    5d26:	46bd      	mov	sp, r7
    5d28:	b007      	add	sp, #28
    5d2a:	bd90      	pop	{r4, r7, pc}
    5d2c:	0000c248 	.word	0x0000c248
    5d30:	ffffef2b 	.word	0xffffef2b
    5d34:	ffffef31 	.word	0xffffef31
    5d38:	00000240 	.word	0x00000240
    5d3c:	ffffef07 	.word	0xffffef07
    5d40:	000002a4 	.word	0x000002a4
    5d44:	000002ec 	.word	0x000002ec
    5d48:	ffffeeaf 	.word	0xffffeeaf

00005d4c <fatal_error>:

// Fatal errors: blink light, print, sleep
static void fatal_error(int numBlinks, const char* fmt, ...) {
    5d4c:	b40e      	push	{r1, r2, r3}
    5d4e:	b590      	push	{r4, r7, lr}
    5d50:	b084      	sub	sp, #16
    5d52:	af00      	add	r7, sp, #0
    5d54:	6078      	str	r0, [r7, #4]
    5d56:	4c12      	ldr	r4, [pc, #72]	; (5da0 <fatal_error+0x54>)
    5d58:	447c      	add	r4, pc
	va_list args;
	va_start(args, fmt);
    5d5a:	2320      	movs	r3, #32
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	60fb      	str	r3, [r7, #12]
	debug_print(fmt, args);
    5d60:	68fa      	ldr	r2, [r7, #12]
    5d62:	69fb      	ldr	r3, [r7, #28]
    5d64:	0011      	movs	r1, r2
    5d66:	0018      	movs	r0, r3
    5d68:	4b0e      	ldr	r3, [pc, #56]	; (5da4 <fatal_error+0x58>)
    5d6a:	447b      	add	r3, pc
    5d6c:	4798      	blx	r3
	va_end(args);
	led_blink(numBlinks, 200, 0);
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	2200      	movs	r2, #0
    5d72:	21c8      	movs	r1, #200	; 0xc8
    5d74:	0018      	movs	r0, r3
    5d76:	4b0c      	ldr	r3, [pc, #48]	; (5da8 <fatal_error+0x5c>)
    5d78:	447b      	add	r3, pc
    5d7a:	4798      	blx	r3
	delay_ms(100);
    5d7c:	2064      	movs	r0, #100	; 0x64
    5d7e:	4b0b      	ldr	r3, [pc, #44]	; (5dac <fatal_error+0x60>)
    5d80:	58e3      	ldr	r3, [r4, r3]
    5d82:	4798      	blx	r3

	// Sleep, wakes on button press and restarts bootloader
	system_sleep();
    5d84:	4b0a      	ldr	r3, [pc, #40]	; (5db0 <fatal_error+0x64>)
    5d86:	447b      	add	r3, pc
    5d88:	4798      	blx	r3
	system_reset();
    5d8a:	4b0a      	ldr	r3, [pc, #40]	; (5db4 <fatal_error+0x68>)
    5d8c:	447b      	add	r3, pc
    5d8e:	4798      	blx	r3
}
    5d90:	46c0      	nop			; (mov r8, r8)
    5d92:	46bd      	mov	sp, r7
    5d94:	b004      	add	sp, #16
    5d96:	bc90      	pop	{r4, r7}
    5d98:	bc08      	pop	{r3}
    5d9a:	b003      	add	sp, #12
    5d9c:	4718      	bx	r3
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	0000c108 	.word	0x0000c108
    5da4:	0000004b 	.word	0x0000004b
    5da8:	fffffe8d 	.word	0xfffffe8d
    5dac:	000002a4 	.word	0x000002a4
    5db0:	fffff0a7 	.word	0xfffff0a7
    5db4:	fffff0b1 	.word	0xfffff0b1

00005db8 <debug_print>:

static void debug_print(const char* fmt, ...) {
    5db8:	b40f      	push	{r0, r1, r2, r3}
    5dba:	b580      	push	{r7, lr}
    5dbc:	b082      	sub	sp, #8
    5dbe:	af00      	add	r7, sp, #0
    5dc0:	4a08      	ldr	r2, [pc, #32]	; (5de4 <debug_print+0x2c>)
    5dc2:	447a      	add	r2, pc
#ifdef ENABLE_USB_DEBUG
	va_list args;
	va_start(args, fmt);
    5dc4:	2314      	movs	r3, #20
    5dc6:	18fb      	adds	r3, r7, r3
    5dc8:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
    5dca:	6879      	ldr	r1, [r7, #4]
    5dcc:	693b      	ldr	r3, [r7, #16]
    5dce:	0018      	movs	r0, r3
    5dd0:	4b05      	ldr	r3, [pc, #20]	; (5de8 <debug_print+0x30>)
    5dd2:	58d3      	ldr	r3, [r2, r3]
    5dd4:	4798      	blx	r3
	va_end(args);
#endif
    5dd6:	46c0      	nop			; (mov r8, r8)
    5dd8:	46bd      	mov	sp, r7
    5dda:	b002      	add	sp, #8
    5ddc:	bc80      	pop	{r7}
    5dde:	bc08      	pop	{r3}
    5de0:	b004      	add	sp, #16
    5de2:	4718      	bx	r3
    5de4:	0000c09e 	.word	0x0000c09e
    5de8:	0000015c 	.word	0x0000015c

00005dec <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	b082      	sub	sp, #8
    5df0:	af00      	add	r7, sp, #0
    5df2:	4a0b      	ldr	r2, [pc, #44]	; (5e20 <cpu_irq_save+0x34>)
    5df4:	447a      	add	r2, pc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5df6:	f3ef 8310 	mrs	r3, PRIMASK
    5dfa:	607b      	str	r3, [r7, #4]
  return(result);
    5dfc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5dfe:	4259      	negs	r1, r3
    5e00:	414b      	adcs	r3, r1
    5e02:	b2db      	uxtb	r3, r3
    5e04:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    5e06:	b672      	cpsid	i
  __ASM volatile ("dmb");
    5e08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5e0c:	4b05      	ldr	r3, [pc, #20]	; (5e24 <cpu_irq_save+0x38>)
    5e0e:	58d3      	ldr	r3, [r2, r3]
    5e10:	2200      	movs	r2, #0
    5e12:	701a      	strb	r2, [r3, #0]
	return flags;
    5e14:	683b      	ldr	r3, [r7, #0]
}
    5e16:	0018      	movs	r0, r3
    5e18:	46bd      	mov	sp, r7
    5e1a:	b002      	add	sp, #8
    5e1c:	bd80      	pop	{r7, pc}
    5e1e:	46c0      	nop			; (mov r8, r8)
    5e20:	0000c06c 	.word	0x0000c06c
    5e24:	000000ec 	.word	0x000000ec

00005e28 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    5e28:	b580      	push	{r7, lr}
    5e2a:	b082      	sub	sp, #8
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	6078      	str	r0, [r7, #4]
	return (flags);
    5e30:	687b      	ldr	r3, [r7, #4]
    5e32:	1e5a      	subs	r2, r3, #1
    5e34:	4193      	sbcs	r3, r2
    5e36:	b2db      	uxtb	r3, r3
}
    5e38:	0018      	movs	r0, r3
    5e3a:	46bd      	mov	sp, r7
    5e3c:	b002      	add	sp, #8
    5e3e:	bd80      	pop	{r7, pc}

00005e40 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    5e40:	b590      	push	{r4, r7, lr}
    5e42:	b083      	sub	sp, #12
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
    5e48:	4c09      	ldr	r4, [pc, #36]	; (5e70 <cpu_irq_restore+0x30>)
    5e4a:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    5e4c:	687b      	ldr	r3, [r7, #4]
    5e4e:	0018      	movs	r0, r3
    5e50:	4b08      	ldr	r3, [pc, #32]	; (5e74 <cpu_irq_restore+0x34>)
    5e52:	447b      	add	r3, pc
    5e54:	4798      	blx	r3
    5e56:	1e03      	subs	r3, r0, #0
    5e58:	d006      	beq.n	5e68 <cpu_irq_restore+0x28>
		cpu_irq_enable();
    5e5a:	4b07      	ldr	r3, [pc, #28]	; (5e78 <cpu_irq_restore+0x38>)
    5e5c:	58e3      	ldr	r3, [r4, r3]
    5e5e:	2201      	movs	r2, #1
    5e60:	701a      	strb	r2, [r3, #0]
    5e62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5e66:	b662      	cpsie	i
}
    5e68:	46c0      	nop			; (mov r8, r8)
    5e6a:	46bd      	mov	sp, r7
    5e6c:	b003      	add	sp, #12
    5e6e:	bd90      	pop	{r4, r7, pc}
    5e70:	0000c016 	.word	0x0000c016
    5e74:	ffffffd3 	.word	0xffffffd3
    5e78:	000000ec 	.word	0x000000ec

00005e7c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    5e7c:	b590      	push	{r4, r7, lr}
    5e7e:	b083      	sub	sp, #12
    5e80:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    5e82:	1dbb      	adds	r3, r7, #6
    5e84:	2200      	movs	r2, #0
    5e86:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    5e88:	4b57      	ldr	r3, [pc, #348]	; (5fe8 <udi_cdc_comm_enable+0x16c>)
    5e8a:	447b      	add	r3, pc
    5e8c:	2200      	movs	r2, #0
    5e8e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    5e90:	1dbb      	adds	r3, r7, #6
    5e92:	781a      	ldrb	r2, [r3, #0]
    5e94:	4b55      	ldr	r3, [pc, #340]	; (5fec <udi_cdc_comm_enable+0x170>)
    5e96:	447b      	add	r3, pc
    5e98:	0052      	lsls	r2, r2, #1
    5e9a:	2100      	movs	r1, #0
    5e9c:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    5e9e:	1dbb      	adds	r3, r7, #6
    5ea0:	781a      	ldrb	r2, [r3, #0]
    5ea2:	4953      	ldr	r1, [pc, #332]	; (5ff0 <udi_cdc_comm_enable+0x174>)
    5ea4:	4479      	add	r1, pc
    5ea6:	0013      	movs	r3, r2
    5ea8:	009b      	lsls	r3, r3, #2
    5eaa:	189b      	adds	r3, r3, r2
    5eac:	005b      	lsls	r3, r3, #1
    5eae:	22a1      	movs	r2, #161	; 0xa1
    5eb0:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    5eb2:	1dbb      	adds	r3, r7, #6
    5eb4:	781a      	ldrb	r2, [r3, #0]
    5eb6:	494f      	ldr	r1, [pc, #316]	; (5ff4 <udi_cdc_comm_enable+0x178>)
    5eb8:	4479      	add	r1, pc
    5eba:	0013      	movs	r3, r2
    5ebc:	009b      	lsls	r3, r3, #2
    5ebe:	189b      	adds	r3, r3, r2
    5ec0:	005b      	lsls	r3, r3, #1
    5ec2:	18cb      	adds	r3, r1, r3
    5ec4:	3301      	adds	r3, #1
    5ec6:	2220      	movs	r2, #32
    5ec8:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    5eca:	1dbb      	adds	r3, r7, #6
    5ecc:	781a      	ldrb	r2, [r3, #0]
    5ece:	494a      	ldr	r1, [pc, #296]	; (5ff8 <udi_cdc_comm_enable+0x17c>)
    5ed0:	4479      	add	r1, pc
    5ed2:	0013      	movs	r3, r2
    5ed4:	009b      	lsls	r3, r3, #2
    5ed6:	189b      	adds	r3, r3, r2
    5ed8:	005b      	lsls	r3, r3, #1
    5eda:	18cb      	adds	r3, r1, r3
    5edc:	3302      	adds	r3, #2
    5ede:	2200      	movs	r2, #0
    5ee0:	801a      	strh	r2, [r3, #0]

	switch (port) {
    5ee2:	1dbb      	adds	r3, r7, #6
    5ee4:	781b      	ldrb	r3, [r3, #0]
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d103      	bne.n	5ef2 <udi_cdc_comm_enable+0x76>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    5eea:	1dfb      	adds	r3, r7, #7
    5eec:	2200      	movs	r2, #0
    5eee:	701a      	strb	r2, [r3, #0]
    5ef0:	e003      	b.n	5efa <udi_cdc_comm_enable+0x7e>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    5ef2:	1dfb      	adds	r3, r7, #7
    5ef4:	2200      	movs	r2, #0
    5ef6:	701a      	strb	r2, [r3, #0]
		break;
    5ef8:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    5efa:	1dbb      	adds	r3, r7, #6
    5efc:	781a      	ldrb	r2, [r3, #0]
    5efe:	1dfb      	adds	r3, r7, #7
    5f00:	781b      	ldrb	r3, [r3, #0]
    5f02:	b298      	uxth	r0, r3
    5f04:	493d      	ldr	r1, [pc, #244]	; (5ffc <udi_cdc_comm_enable+0x180>)
    5f06:	4479      	add	r1, pc
    5f08:	0013      	movs	r3, r2
    5f0a:	009b      	lsls	r3, r3, #2
    5f0c:	189b      	adds	r3, r3, r2
    5f0e:	005b      	lsls	r3, r3, #1
    5f10:	18cb      	adds	r3, r1, r3
    5f12:	3304      	adds	r3, #4
    5f14:	1c02      	adds	r2, r0, #0
    5f16:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    5f18:	1dbb      	adds	r3, r7, #6
    5f1a:	781a      	ldrb	r2, [r3, #0]
    5f1c:	4938      	ldr	r1, [pc, #224]	; (6000 <udi_cdc_comm_enable+0x184>)
    5f1e:	4479      	add	r1, pc
    5f20:	0013      	movs	r3, r2
    5f22:	009b      	lsls	r3, r3, #2
    5f24:	189b      	adds	r3, r3, r2
    5f26:	005b      	lsls	r3, r3, #1
    5f28:	18cb      	adds	r3, r1, r3
    5f2a:	3306      	adds	r3, #6
    5f2c:	2202      	movs	r2, #2
    5f2e:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    5f30:	1dbb      	adds	r3, r7, #6
    5f32:	781a      	ldrb	r2, [r3, #0]
    5f34:	4933      	ldr	r1, [pc, #204]	; (6004 <udi_cdc_comm_enable+0x188>)
    5f36:	4479      	add	r1, pc
    5f38:	0013      	movs	r3, r2
    5f3a:	009b      	lsls	r3, r3, #2
    5f3c:	189b      	adds	r3, r3, r2
    5f3e:	005b      	lsls	r3, r3, #1
    5f40:	18cb      	adds	r3, r1, r3
    5f42:	3308      	adds	r3, #8
    5f44:	2200      	movs	r2, #0
    5f46:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    5f48:	1dbb      	adds	r3, r7, #6
    5f4a:	7819      	ldrb	r1, [r3, #0]
    5f4c:	4a2e      	ldr	r2, [pc, #184]	; (6008 <udi_cdc_comm_enable+0x18c>)
    5f4e:	447a      	add	r2, pc
    5f50:	000b      	movs	r3, r1
    5f52:	00db      	lsls	r3, r3, #3
    5f54:	1a5b      	subs	r3, r3, r1
    5f56:	5c99      	ldrb	r1, [r3, r2]
    5f58:	2000      	movs	r0, #0
    5f5a:	4001      	ands	r1, r0
    5f5c:	5499      	strb	r1, [r3, r2]
    5f5e:	18d1      	adds	r1, r2, r3
    5f60:	7848      	ldrb	r0, [r1, #1]
    5f62:	2400      	movs	r4, #0
    5f64:	4020      	ands	r0, r4
    5f66:	1c04      	adds	r4, r0, #0
    5f68:	203e      	movs	r0, #62	; 0x3e
    5f6a:	4240      	negs	r0, r0
    5f6c:	4320      	orrs	r0, r4
    5f6e:	7048      	strb	r0, [r1, #1]
    5f70:	18d1      	adds	r1, r2, r3
    5f72:	7888      	ldrb	r0, [r1, #2]
    5f74:	2400      	movs	r4, #0
    5f76:	4020      	ands	r0, r4
    5f78:	1c04      	adds	r4, r0, #0
    5f7a:	2001      	movs	r0, #1
    5f7c:	4320      	orrs	r0, r4
    5f7e:	7088      	strb	r0, [r1, #2]
    5f80:	18d3      	adds	r3, r2, r3
    5f82:	78da      	ldrb	r2, [r3, #3]
    5f84:	2100      	movs	r1, #0
    5f86:	400a      	ands	r2, r1
    5f88:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    5f8a:	1dbb      	adds	r3, r7, #6
    5f8c:	781a      	ldrb	r2, [r3, #0]
    5f8e:	491f      	ldr	r1, [pc, #124]	; (600c <udi_cdc_comm_enable+0x190>)
    5f90:	4479      	add	r1, pc
    5f92:	0013      	movs	r3, r2
    5f94:	00db      	lsls	r3, r3, #3
    5f96:	1a9b      	subs	r3, r3, r2
    5f98:	18cb      	adds	r3, r1, r3
    5f9a:	3304      	adds	r3, #4
    5f9c:	2200      	movs	r2, #0
    5f9e:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    5fa0:	1dbb      	adds	r3, r7, #6
    5fa2:	781a      	ldrb	r2, [r3, #0]
    5fa4:	491a      	ldr	r1, [pc, #104]	; (6010 <udi_cdc_comm_enable+0x194>)
    5fa6:	4479      	add	r1, pc
    5fa8:	0013      	movs	r3, r2
    5faa:	00db      	lsls	r3, r3, #3
    5fac:	1a9b      	subs	r3, r3, r2
    5fae:	18cb      	adds	r3, r1, r3
    5fb0:	3305      	adds	r3, #5
    5fb2:	2200      	movs	r2, #0
    5fb4:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    5fb6:	1dbb      	adds	r3, r7, #6
    5fb8:	781a      	ldrb	r2, [r3, #0]
    5fba:	4916      	ldr	r1, [pc, #88]	; (6014 <udi_cdc_comm_enable+0x198>)
    5fbc:	4479      	add	r1, pc
    5fbe:	0013      	movs	r3, r2
    5fc0:	00db      	lsls	r3, r3, #3
    5fc2:	1a9b      	subs	r3, r3, r2
    5fc4:	18cb      	adds	r3, r1, r3
    5fc6:	3306      	adds	r3, #6
    5fc8:	2208      	movs	r2, #8
    5fca:	701a      	strb	r2, [r3, #0]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    5fcc:	4b12      	ldr	r3, [pc, #72]	; (6018 <udi_cdc_comm_enable+0x19c>)
    5fce:	447b      	add	r3, pc
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	b2db      	uxtb	r3, r3
    5fd4:	3301      	adds	r3, #1
    5fd6:	b2da      	uxtb	r2, r3
    5fd8:	4b10      	ldr	r3, [pc, #64]	; (601c <udi_cdc_comm_enable+0x1a0>)
    5fda:	447b      	add	r3, pc
    5fdc:	701a      	strb	r2, [r3, #0]
	return true;
    5fde:	2301      	movs	r3, #1
}
    5fe0:	0018      	movs	r0, r3
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b003      	add	sp, #12
    5fe6:	bd90      	pop	{r4, r7, pc}
    5fe8:	1fffa560 	.word	0x1fffa560
    5fec:	1fffa546 	.word	0x1fffa546
    5ff0:	1fffa53c 	.word	0x1fffa53c
    5ff4:	1fffa528 	.word	0x1fffa528
    5ff8:	1fffa510 	.word	0x1fffa510
    5ffc:	1fffa4da 	.word	0x1fffa4da
    6000:	1fffa4c2 	.word	0x1fffa4c2
    6004:	1fffa4aa 	.word	0x1fffa4aa
    6008:	1fffa486 	.word	0x1fffa486
    600c:	1fffa444 	.word	0x1fffa444
    6010:	1fffa42e 	.word	0x1fffa42e
    6014:	1fffa418 	.word	0x1fffa418
    6018:	1fffa41c 	.word	0x1fffa41c
    601c:	1fffa410 	.word	0x1fffa410

00006020 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    6020:	b580      	push	{r7, lr}
    6022:	b082      	sub	sp, #8
    6024:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6026:	1dfb      	adds	r3, r7, #7
    6028:	2200      	movs	r2, #0
    602a:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    602c:	4b3e      	ldr	r3, [pc, #248]	; (6128 <udi_cdc_data_enable+0x108>)
    602e:	447b      	add	r3, pc
    6030:	2200      	movs	r2, #0
    6032:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    6034:	1dfb      	adds	r3, r7, #7
    6036:	781b      	ldrb	r3, [r3, #0]
    6038:	4a3c      	ldr	r2, [pc, #240]	; (612c <udi_cdc_data_enable+0x10c>)
    603a:	447a      	add	r2, pc
    603c:	2100      	movs	r1, #0
    603e:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    6040:	1dfb      	adds	r3, r7, #7
    6042:	781b      	ldrb	r3, [r3, #0]
    6044:	4a3a      	ldr	r2, [pc, #232]	; (6130 <udi_cdc_data_enable+0x110>)
    6046:	447a      	add	r2, pc
    6048:	2100      	movs	r1, #0
    604a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    604c:	1dfb      	adds	r3, r7, #7
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	4a38      	ldr	r2, [pc, #224]	; (6134 <udi_cdc_data_enable+0x114>)
    6052:	447a      	add	r2, pc
    6054:	2100      	movs	r1, #0
    6056:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    6058:	1dfb      	adds	r3, r7, #7
    605a:	781a      	ldrb	r2, [r3, #0]
    605c:	4b36      	ldr	r3, [pc, #216]	; (6138 <udi_cdc_data_enable+0x118>)
    605e:	447b      	add	r3, pc
    6060:	0092      	lsls	r2, r2, #2
    6062:	2100      	movs	r1, #0
    6064:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    6066:	1dfb      	adds	r3, r7, #7
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	4a34      	ldr	r2, [pc, #208]	; (613c <udi_cdc_data_enable+0x11c>)
    606c:	447a      	add	r2, pc
    606e:	009b      	lsls	r3, r3, #2
    6070:	18d3      	adds	r3, r2, r3
    6072:	3302      	adds	r3, #2
    6074:	2200      	movs	r2, #0
    6076:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    6078:	1dfb      	adds	r3, r7, #7
    607a:	781a      	ldrb	r2, [r3, #0]
    607c:	4b30      	ldr	r3, [pc, #192]	; (6140 <udi_cdc_data_enable+0x120>)
    607e:	447b      	add	r3, pc
    6080:	0052      	lsls	r2, r2, #1
    6082:	2100      	movs	r1, #0
    6084:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    6086:	1dfb      	adds	r3, r7, #7
    6088:	781b      	ldrb	r3, [r3, #0]
    608a:	0018      	movs	r0, r3
    608c:	4b2d      	ldr	r3, [pc, #180]	; (6144 <udi_cdc_data_enable+0x124>)
    608e:	447b      	add	r3, pc
    6090:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    6092:	1dfb      	adds	r3, r7, #7
    6094:	781b      	ldrb	r3, [r3, #0]
    6096:	4a2c      	ldr	r2, [pc, #176]	; (6148 <udi_cdc_data_enable+0x128>)
    6098:	447a      	add	r2, pc
    609a:	2100      	movs	r1, #0
    609c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    609e:	1dfb      	adds	r3, r7, #7
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	4a2a      	ldr	r2, [pc, #168]	; (614c <udi_cdc_data_enable+0x12c>)
    60a4:	447a      	add	r2, pc
    60a6:	2100      	movs	r1, #0
    60a8:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    60aa:	1dfb      	adds	r3, r7, #7
    60ac:	781a      	ldrb	r2, [r3, #0]
    60ae:	4b28      	ldr	r3, [pc, #160]	; (6150 <udi_cdc_data_enable+0x130>)
    60b0:	447b      	add	r3, pc
    60b2:	0092      	lsls	r2, r2, #2
    60b4:	2100      	movs	r1, #0
    60b6:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][1] = 0;
    60b8:	1dfb      	adds	r3, r7, #7
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	4a25      	ldr	r2, [pc, #148]	; (6154 <udi_cdc_data_enable+0x134>)
    60be:	447a      	add	r2, pc
    60c0:	009b      	lsls	r3, r3, #2
    60c2:	18d3      	adds	r3, r2, r3
    60c4:	3302      	adds	r3, #2
    60c6:	2200      	movs	r2, #0
    60c8:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
    60ca:	1dfb      	adds	r3, r7, #7
    60cc:	781a      	ldrb	r2, [r3, #0]
    60ce:	4b22      	ldr	r3, [pc, #136]	; (6158 <udi_cdc_data_enable+0x138>)
    60d0:	447b      	add	r3, pc
    60d2:	0052      	lsls	r2, r2, #1
    60d4:	2100      	movs	r1, #0
    60d6:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    60d8:	1dfb      	adds	r3, r7, #7
    60da:	781b      	ldrb	r3, [r3, #0]
    60dc:	0018      	movs	r0, r3
    60de:	4b1f      	ldr	r3, [pc, #124]	; (615c <udi_cdc_data_enable+0x13c>)
    60e0:	447b      	add	r3, pc
    60e2:	4798      	blx	r3
    60e4:	0003      	movs	r3, r0
    60e6:	001a      	movs	r2, r3
    60e8:	2301      	movs	r3, #1
    60ea:	4053      	eors	r3, r2
    60ec:	b2db      	uxtb	r3, r3
    60ee:	2b00      	cmp	r3, #0
    60f0:	d001      	beq.n	60f6 <udi_cdc_data_enable+0xd6>
		return false;
    60f2:	2300      	movs	r3, #0
    60f4:	e013      	b.n	611e <udi_cdc_data_enable+0xfe>
	}
	udi_cdc_nb_data_enabled++;
    60f6:	4b1a      	ldr	r3, [pc, #104]	; (6160 <udi_cdc_data_enable+0x140>)
    60f8:	447b      	add	r3, pc
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	b2db      	uxtb	r3, r3
    60fe:	3301      	adds	r3, #1
    6100:	b2da      	uxtb	r2, r3
    6102:	4b18      	ldr	r3, [pc, #96]	; (6164 <udi_cdc_data_enable+0x144>)
    6104:	447b      	add	r3, pc
    6106:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    6108:	4b17      	ldr	r3, [pc, #92]	; (6168 <udi_cdc_data_enable+0x148>)
    610a:	447b      	add	r3, pc
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	b2db      	uxtb	r3, r3
    6110:	2b01      	cmp	r3, #1
    6112:	d103      	bne.n	611c <udi_cdc_data_enable+0xfc>
		udi_cdc_data_running = true;
    6114:	4b15      	ldr	r3, [pc, #84]	; (616c <udi_cdc_data_enable+0x14c>)
    6116:	447b      	add	r3, pc
    6118:	2201      	movs	r2, #1
    611a:	701a      	strb	r2, [r3, #0]
	}
	return true;
    611c:	2301      	movs	r3, #1
}
    611e:	0018      	movs	r0, r3
    6120:	46bd      	mov	sp, r7
    6122:	b002      	add	sp, #8
    6124:	bd80      	pop	{r7, pc}
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	1fffa3bd 	.word	0x1fffa3bd
    612c:	1fffa4d2 	.word	0x1fffa4d2
    6130:	1fffa4ca 	.word	0x1fffa4ca
    6134:	1fffa4b2 	.word	0x1fffa4b2
    6138:	1fffa4a2 	.word	0x1fffa4a2
    613c:	1fffa494 	.word	0x1fffa494
    6140:	1fffa48a 	.word	0x1fffa48a
    6144:	000005bf 	.word	0x000005bf
    6148:	1fffa3e4 	.word	0x1fffa3e4
    614c:	1fffa3d0 	.word	0x1fffa3d0
    6150:	1fffa3c0 	.word	0x1fffa3c0
    6154:	1fffa3b2 	.word	0x1fffa3b2
    6158:	1fffa3a8 	.word	0x1fffa3a8
    615c:	00000281 	.word	0x00000281
    6160:	1fffa2f3 	.word	0x1fffa2f3
    6164:	1fffa2e7 	.word	0x1fffa2e7
    6168:	1fffa2e1 	.word	0x1fffa2e1
    616c:	1fffa2d6 	.word	0x1fffa2d6

00006170 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    6170:	b580      	push	{r7, lr}
    6172:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    6174:	4b05      	ldr	r3, [pc, #20]	; (618c <udi_cdc_comm_disable+0x1c>)
    6176:	447b      	add	r3, pc
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	b2db      	uxtb	r3, r3
    617c:	3b01      	subs	r3, #1
    617e:	b2da      	uxtb	r2, r3
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <udi_cdc_comm_disable+0x20>)
    6182:	447b      	add	r3, pc
    6184:	701a      	strb	r2, [r3, #0]
}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	46bd      	mov	sp, r7
    618a:	bd80      	pop	{r7, pc}
    618c:	1fffa274 	.word	0x1fffa274
    6190:	1fffa268 	.word	0x1fffa268

00006194 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    6194:	b580      	push	{r7, lr}
    6196:	b082      	sub	sp, #8
    6198:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    619a:	4b0b      	ldr	r3, [pc, #44]	; (61c8 <udi_cdc_data_disable+0x34>)
    619c:	447b      	add	r3, pc
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	b2db      	uxtb	r3, r3
    61a2:	3b01      	subs	r3, #1
    61a4:	b2da      	uxtb	r2, r3
    61a6:	4b09      	ldr	r3, [pc, #36]	; (61cc <udi_cdc_data_disable+0x38>)
    61a8:	447b      	add	r3, pc
    61aa:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    61ac:	1dfb      	adds	r3, r7, #7
    61ae:	4a08      	ldr	r2, [pc, #32]	; (61d0 <udi_cdc_data_disable+0x3c>)
    61b0:	447a      	add	r2, pc
    61b2:	7812      	ldrb	r2, [r2, #0]
    61b4:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    61b6:	4b07      	ldr	r3, [pc, #28]	; (61d4 <udi_cdc_data_disable+0x40>)
    61b8:	447b      	add	r3, pc
    61ba:	2200      	movs	r2, #0
    61bc:	701a      	strb	r2, [r3, #0]
}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	46bd      	mov	sp, r7
    61c2:	b002      	add	sp, #8
    61c4:	bd80      	pop	{r7, pc}
    61c6:	46c0      	nop			; (mov r8, r8)
    61c8:	1fffa24f 	.word	0x1fffa24f
    61cc:	1fffa243 	.word	0x1fffa243
    61d0:	1fffa23b 	.word	0x1fffa23b
    61d4:	1fffa234 	.word	0x1fffa234

000061d8 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    61d8:	b5b0      	push	{r4, r5, r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	4c36      	ldr	r4, [pc, #216]	; (62b8 <udi_cdc_comm_setup+0xe0>)
    61e0:	447c      	add	r4, pc
	uint8_t port = udi_cdc_setup_to_port();
    61e2:	1dfd      	adds	r5, r7, #7
    61e4:	4b35      	ldr	r3, [pc, #212]	; (62bc <udi_cdc_comm_setup+0xe4>)
    61e6:	447b      	add	r3, pc
    61e8:	4798      	blx	r3
    61ea:	0003      	movs	r3, r0
    61ec:	702b      	strb	r3, [r5, #0]

	if (Udd_setup_is_in()) {
    61ee:	4b34      	ldr	r3, [pc, #208]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    61f0:	58e3      	ldr	r3, [r4, r3]
    61f2:	781b      	ldrb	r3, [r3, #0]
    61f4:	b25b      	sxtb	r3, r3
    61f6:	2b00      	cmp	r3, #0
    61f8:	da24      	bge.n	6244 <udi_cdc_comm_setup+0x6c>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    61fa:	4b31      	ldr	r3, [pc, #196]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    61fc:	58e3      	ldr	r3, [r4, r3]
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	001a      	movs	r2, r3
    6202:	2360      	movs	r3, #96	; 0x60
    6204:	4013      	ands	r3, r2
    6206:	2b20      	cmp	r3, #32
    6208:	d11c      	bne.n	6244 <udi_cdc_comm_setup+0x6c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    620a:	4b2d      	ldr	r3, [pc, #180]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    620c:	58e3      	ldr	r3, [r4, r3]
    620e:	785b      	ldrb	r3, [r3, #1]
    6210:	2b21      	cmp	r3, #33	; 0x21
    6212:	d117      	bne.n	6244 <udi_cdc_comm_setup+0x6c>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    6214:	4b2a      	ldr	r3, [pc, #168]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6216:	58e3      	ldr	r3, [r4, r3]
    6218:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    621a:	2b07      	cmp	r3, #7
    621c:	d001      	beq.n	6222 <udi_cdc_comm_setup+0x4a>
					return false; // Error for USB host
    621e:	2300      	movs	r3, #0
    6220:	e046      	b.n	62b0 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    6222:	1dfb      	adds	r3, r7, #7
    6224:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    6226:	0013      	movs	r3, r2
    6228:	00db      	lsls	r3, r3, #3
    622a:	1a9b      	subs	r3, r3, r2
    622c:	4a25      	ldr	r2, [pc, #148]	; (62c4 <udi_cdc_comm_setup+0xec>)
    622e:	447a      	add	r2, pc
    6230:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    6232:	4b23      	ldr	r3, [pc, #140]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6234:	58e3      	ldr	r3, [r4, r3]
    6236:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    6238:	4b21      	ldr	r3, [pc, #132]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    623a:	58e3      	ldr	r3, [r4, r3]
    623c:	2207      	movs	r2, #7
    623e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    6240:	2301      	movs	r3, #1
    6242:	e035      	b.n	62b0 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	if (Udd_setup_is_out()) {
    6244:	4b1e      	ldr	r3, [pc, #120]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6246:	58e3      	ldr	r3, [r4, r3]
    6248:	781b      	ldrb	r3, [r3, #0]
    624a:	b25b      	sxtb	r3, r3
    624c:	2b00      	cmp	r3, #0
    624e:	db2e      	blt.n	62ae <udi_cdc_comm_setup+0xd6>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    6250:	4b1b      	ldr	r3, [pc, #108]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6252:	58e3      	ldr	r3, [r4, r3]
    6254:	781b      	ldrb	r3, [r3, #0]
    6256:	001a      	movs	r2, r3
    6258:	2360      	movs	r3, #96	; 0x60
    625a:	4013      	ands	r3, r2
    625c:	2b20      	cmp	r3, #32
    625e:	d126      	bne.n	62ae <udi_cdc_comm_setup+0xd6>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    6260:	4b17      	ldr	r3, [pc, #92]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6262:	58e3      	ldr	r3, [r4, r3]
    6264:	785b      	ldrb	r3, [r3, #1]
    6266:	2b20      	cmp	r3, #32
    6268:	d002      	beq.n	6270 <udi_cdc_comm_setup+0x98>
    626a:	2b22      	cmp	r3, #34	; 0x22
    626c:	d01d      	beq.n	62aa <udi_cdc_comm_setup+0xd2>
    626e:	e01e      	b.n	62ae <udi_cdc_comm_setup+0xd6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    6270:	4b13      	ldr	r3, [pc, #76]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6272:	58e3      	ldr	r3, [r4, r3]
    6274:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    6276:	2b07      	cmp	r3, #7
    6278:	d001      	beq.n	627e <udi_cdc_comm_setup+0xa6>
					return false; // Error for USB host
    627a:	2300      	movs	r3, #0
    627c:	e018      	b.n	62b0 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.callback =
    627e:	4b10      	ldr	r3, [pc, #64]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    6280:	58e3      	ldr	r3, [r4, r3]
    6282:	4a11      	ldr	r2, [pc, #68]	; (62c8 <udi_cdc_comm_setup+0xf0>)
    6284:	447a      	add	r2, pc
    6286:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    6288:	1dfb      	adds	r3, r7, #7
    628a:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    628c:	0013      	movs	r3, r2
    628e:	00db      	lsls	r3, r3, #3
    6290:	1a9b      	subs	r3, r3, r2
    6292:	4a0e      	ldr	r2, [pc, #56]	; (62cc <udi_cdc_comm_setup+0xf4>)
    6294:	447a      	add	r2, pc
    6296:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    6298:	4b09      	ldr	r3, [pc, #36]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    629a:	58e3      	ldr	r3, [r4, r3]
    629c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    629e:	4b08      	ldr	r3, [pc, #32]	; (62c0 <udi_cdc_comm_setup+0xe8>)
    62a0:	58e3      	ldr	r3, [r4, r3]
    62a2:	2207      	movs	r2, #7
    62a4:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    62a6:	2301      	movs	r3, #1
    62a8:	e002      	b.n	62b0 <udi_cdc_comm_setup+0xd8>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    62aa:	2301      	movs	r3, #1
    62ac:	e000      	b.n	62b0 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	return false;  // request Not supported
    62ae:	2300      	movs	r3, #0
}
    62b0:	0018      	movs	r0, r3
    62b2:	46bd      	mov	sp, r7
    62b4:	b002      	add	sp, #8
    62b6:	bdb0      	pop	{r4, r5, r7, pc}
    62b8:	0000bc80 	.word	0x0000bc80
    62bc:	0000011f 	.word	0x0000011f
    62c0:	000001e8 	.word	0x000001e8
    62c4:	1fffa1a6 	.word	0x1fffa1a6
    62c8:	000000bd 	.word	0x000000bd
    62cc:	1fffa140 	.word	0x1fffa140

000062d0 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    62d0:	b580      	push	{r7, lr}
    62d2:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    62d4:	2300      	movs	r3, #0
}
    62d6:	0018      	movs	r0, r3
    62d8:	46bd      	mov	sp, r7
    62da:	bd80      	pop	{r7, pc}

000062dc <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    62dc:	b580      	push	{r7, lr}
    62de:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    62e0:	2300      	movs	r3, #0
}
    62e2:	0018      	movs	r0, r3
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}

000062e8 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    62e8:	b580      	push	{r7, lr}
    62ea:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    62ec:	4b04      	ldr	r3, [pc, #16]	; (6300 <udi_cdc_data_sof_notify+0x18>)
    62ee:	447b      	add	r3, pc
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	0018      	movs	r0, r3
    62f4:	4b03      	ldr	r3, [pc, #12]	; (6304 <udi_cdc_data_sof_notify+0x1c>)
    62f6:	447b      	add	r3, pc
    62f8:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    62fa:	46c0      	nop			; (mov r8, r8)
    62fc:	46bd      	mov	sp, r7
    62fe:	bd80      	pop	{r7, pc}
    6300:	1fffa223 	.word	0x1fffa223
    6304:	00000357 	.word	0x00000357

00006308 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    6308:	b580      	push	{r7, lr}
    630a:	b082      	sub	sp, #8
    630c:	af00      	add	r7, sp, #0
    630e:	4a0b      	ldr	r2, [pc, #44]	; (633c <udi_cdc_setup_to_port+0x34>)
    6310:	447a      	add	r2, pc
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    6312:	4b0b      	ldr	r3, [pc, #44]	; (6340 <udi_cdc_setup_to_port+0x38>)
    6314:	58d3      	ldr	r3, [r2, r3]
    6316:	889b      	ldrh	r3, [r3, #4]
    6318:	001a      	movs	r2, r3
    631a:	23ff      	movs	r3, #255	; 0xff
    631c:	4013      	ands	r3, r2
    631e:	d103      	bne.n	6328 <udi_cdc_setup_to_port+0x20>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    6320:	1dfb      	adds	r3, r7, #7
    6322:	2200      	movs	r2, #0
    6324:	701a      	strb	r2, [r3, #0]
    6326:	e003      	b.n	6330 <udi_cdc_setup_to_port+0x28>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    6328:	1dfb      	adds	r3, r7, #7
    632a:	2200      	movs	r2, #0
    632c:	701a      	strb	r2, [r3, #0]
		break;
    632e:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    6330:	1dfb      	adds	r3, r7, #7
    6332:	781b      	ldrb	r3, [r3, #0]
}
    6334:	0018      	movs	r0, r3
    6336:	46bd      	mov	sp, r7
    6338:	b002      	add	sp, #8
    633a:	bd80      	pop	{r7, pc}
    633c:	0000bb50 	.word	0x0000bb50
    6340:	000001e8 	.word	0x000001e8

00006344 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    6344:	b590      	push	{r4, r7, lr}
    6346:	b083      	sub	sp, #12
    6348:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    634a:	1dfc      	adds	r4, r7, #7
    634c:	4b04      	ldr	r3, [pc, #16]	; (6360 <udi_cdc_line_coding_received+0x1c>)
    634e:	447b      	add	r3, pc
    6350:	4798      	blx	r3
    6352:	0003      	movs	r3, r0
    6354:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	46bd      	mov	sp, r7
    635a:	b003      	add	sp, #12
    635c:	bd90      	pop	{r4, r7, pc}
    635e:	46c0      	nop			; (mov r8, r8)
    6360:	ffffffb7 	.word	0xffffffb7

00006364 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    6364:	b5b0      	push	{r4, r5, r7, lr}
    6366:	b088      	sub	sp, #32
    6368:	af02      	add	r7, sp, #8
    636a:	0002      	movs	r2, r0
    636c:	1dfb      	adds	r3, r7, #7
    636e:	701a      	strb	r2, [r3, #0]
    6370:	4c41      	ldr	r4, [pc, #260]	; (6478 <udi_cdc_rx_start+0x114>)
    6372:	447c      	add	r4, pc
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6374:	1dfb      	adds	r3, r7, #7
    6376:	2200      	movs	r2, #0
    6378:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    637a:	4b40      	ldr	r3, [pc, #256]	; (647c <udi_cdc_rx_start+0x118>)
    637c:	447b      	add	r3, pc
    637e:	4798      	blx	r3
    6380:	0003      	movs	r3, r0
    6382:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    6384:	1dfb      	adds	r3, r7, #7
    6386:	781a      	ldrb	r2, [r3, #0]
    6388:	230f      	movs	r3, #15
    638a:	18fb      	adds	r3, r7, r3
    638c:	493c      	ldr	r1, [pc, #240]	; (6480 <udi_cdc_rx_start+0x11c>)
    638e:	4479      	add	r1, pc
    6390:	5c8a      	ldrb	r2, [r1, r2]
    6392:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    6394:	1dfb      	adds	r3, r7, #7
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	4a3a      	ldr	r2, [pc, #232]	; (6484 <udi_cdc_rx_start+0x120>)
    639a:	447a      	add	r2, pc
    639c:	5cd3      	ldrb	r3, [r2, r3]
    639e:	b2db      	uxtb	r3, r3
    63a0:	2b00      	cmp	r3, #0
    63a2:	d114      	bne.n	63ce <udi_cdc_rx_start+0x6a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    63a4:	1dfb      	adds	r3, r7, #7
    63a6:	781a      	ldrb	r2, [r3, #0]
    63a8:	4b37      	ldr	r3, [pc, #220]	; (6488 <udi_cdc_rx_start+0x124>)
    63aa:	447b      	add	r3, pc
    63ac:	0052      	lsls	r2, r2, #1
    63ae:	5ad3      	ldrh	r3, [r2, r3]
    63b0:	b29a      	uxth	r2, r3
    63b2:	1dfb      	adds	r3, r7, #7
    63b4:	7818      	ldrb	r0, [r3, #0]
    63b6:	230f      	movs	r3, #15
    63b8:	18fb      	adds	r3, r7, r3
    63ba:	7819      	ldrb	r1, [r3, #0]
    63bc:	4b33      	ldr	r3, [pc, #204]	; (648c <udi_cdc_rx_start+0x128>)
    63be:	447b      	add	r3, pc
    63c0:	0040      	lsls	r0, r0, #1
    63c2:	1841      	adds	r1, r0, r1
    63c4:	0049      	lsls	r1, r1, #1
    63c6:	5acb      	ldrh	r3, [r1, r3]
    63c8:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
    63ca:	429a      	cmp	r2, r3
    63cc:	d206      	bcs.n	63dc <udi_cdc_rx_start+0x78>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    63ce:	693b      	ldr	r3, [r7, #16]
    63d0:	0018      	movs	r0, r3
    63d2:	4b2f      	ldr	r3, [pc, #188]	; (6490 <udi_cdc_rx_start+0x12c>)
    63d4:	447b      	add	r3, pc
    63d6:	4798      	blx	r3
		return false;
    63d8:	2300      	movs	r3, #0
    63da:	e048      	b.n	646e <udi_cdc_rx_start+0x10a>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    63dc:	1dfb      	adds	r3, r7, #7
    63de:	781a      	ldrb	r2, [r3, #0]
    63e0:	4b2c      	ldr	r3, [pc, #176]	; (6494 <udi_cdc_rx_start+0x130>)
    63e2:	447b      	add	r3, pc
    63e4:	0052      	lsls	r2, r2, #1
    63e6:	2100      	movs	r1, #0
    63e8:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    63ea:	1dfb      	adds	r3, r7, #7
    63ec:	781b      	ldrb	r3, [r3, #0]
    63ee:	220f      	movs	r2, #15
    63f0:	18ba      	adds	r2, r7, r2
    63f2:	7812      	ldrb	r2, [r2, #0]
    63f4:	4251      	negs	r1, r2
    63f6:	414a      	adcs	r2, r1
    63f8:	b2d2      	uxtb	r2, r2
    63fa:	0011      	movs	r1, r2
    63fc:	4a26      	ldr	r2, [pc, #152]	; (6498 <udi_cdc_rx_start+0x134>)
    63fe:	447a      	add	r2, pc
    6400:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    6402:	1dfb      	adds	r3, r7, #7
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	4a25      	ldr	r2, [pc, #148]	; (649c <udi_cdc_rx_start+0x138>)
    6408:	447a      	add	r2, pc
    640a:	2101      	movs	r1, #1
    640c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    640e:	693b      	ldr	r3, [r7, #16]
    6410:	0018      	movs	r0, r3
    6412:	4b23      	ldr	r3, [pc, #140]	; (64a0 <udi_cdc_rx_start+0x13c>)
    6414:	447b      	add	r3, pc
    6416:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    6418:	1dfb      	adds	r3, r7, #7
    641a:	781b      	ldrb	r3, [r3, #0]
    641c:	0018      	movs	r0, r3
    641e:	4b21      	ldr	r3, [pc, #132]	; (64a4 <udi_cdc_rx_start+0x140>)
    6420:	58e3      	ldr	r3, [r4, r3]
    6422:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
    6424:	1dfb      	adds	r3, r7, #7
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	2b00      	cmp	r3, #0
    642a:	d104      	bne.n	6436 <udi_cdc_rx_start+0xd2>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    642c:	2317      	movs	r3, #23
    642e:	18fb      	adds	r3, r7, r3
    6430:	2202      	movs	r2, #2
    6432:	701a      	strb	r2, [r3, #0]
    6434:	e004      	b.n	6440 <udi_cdc_rx_start+0xdc>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    6436:	2317      	movs	r3, #23
    6438:	18fb      	adds	r3, r7, r3
    643a:	2202      	movs	r2, #2
    643c:	701a      	strb	r2, [r3, #0]
		break;
    643e:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    6440:	1dfb      	adds	r3, r7, #7
    6442:	781a      	ldrb	r2, [r3, #0]
    6444:	230f      	movs	r3, #15
    6446:	18fb      	adds	r3, r7, r3
    6448:	781b      	ldrb	r3, [r3, #0]
    644a:	0052      	lsls	r2, r2, #1
    644c:	18d3      	adds	r3, r2, r3
    644e:	019b      	lsls	r3, r3, #6
    6450:	4a15      	ldr	r2, [pc, #84]	; (64a8 <udi_cdc_rx_start+0x144>)
    6452:	447a      	add	r2, pc
    6454:	189a      	adds	r2, r3, r2
	return udd_ep_run(ep,
    6456:	2317      	movs	r3, #23
    6458:	18fb      	adds	r3, r7, r3
    645a:	7818      	ldrb	r0, [r3, #0]
    645c:	4b13      	ldr	r3, [pc, #76]	; (64ac <udi_cdc_rx_start+0x148>)
    645e:	447b      	add	r3, pc
    6460:	9300      	str	r3, [sp, #0]
    6462:	2340      	movs	r3, #64	; 0x40
    6464:	2101      	movs	r1, #1
    6466:	4d12      	ldr	r5, [pc, #72]	; (64b0 <udi_cdc_rx_start+0x14c>)
    6468:	5964      	ldr	r4, [r4, r5]
    646a:	47a0      	blx	r4
    646c:	0003      	movs	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    646e:	0018      	movs	r0, r3
    6470:	46bd      	mov	sp, r7
    6472:	b006      	add	sp, #24
    6474:	bdb0      	pop	{r4, r5, r7, pc}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	0000baee 	.word	0x0000baee
    647c:	fffffa6d 	.word	0xfffffa6d
    6480:	1fffa0e6 	.word	0x1fffa0e6
    6484:	1fffa0e2 	.word	0x1fffa0e2
    6488:	1fffa0ce 	.word	0x1fffa0ce
    648c:	1fffa0b2 	.word	0x1fffa0b2
    6490:	fffffa69 	.word	0xfffffa69
    6494:	1fffa096 	.word	0x1fffa096
    6498:	1fffa076 	.word	0x1fffa076
    649c:	1fffa074 	.word	0x1fffa074
    64a0:	fffffa29 	.word	0xfffffa29
    64a4:	000001b4 	.word	0x000001b4
    64a8:	1fff9f9e 	.word	0x1fff9f9e
    64ac:	00000053 	.word	0x00000053
    64b0:	00000070 	.word	0x00000070

000064b4 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    64b4:	b5b0      	push	{r4, r5, r7, lr}
    64b6:	b086      	sub	sp, #24
    64b8:	af02      	add	r7, sp, #8
    64ba:	6039      	str	r1, [r7, #0]
    64bc:	0011      	movs	r1, r2
    64be:	1dfb      	adds	r3, r7, #7
    64c0:	1c02      	adds	r2, r0, #0
    64c2:	701a      	strb	r2, [r3, #0]
    64c4:	1dbb      	adds	r3, r7, #6
    64c6:	1c0a      	adds	r2, r1, #0
    64c8:	701a      	strb	r2, [r3, #0]
    64ca:	4d2e      	ldr	r5, [pc, #184]	; (6584 <udi_cdc_data_received+0xd0>)
    64cc:	447d      	add	r5, pc
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    64ce:	1dbb      	adds	r3, r7, #6
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	2b02      	cmp	r3, #2
    64d4:	d104      	bne.n	64e0 <udi_cdc_data_received+0x2c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    64d6:	230f      	movs	r3, #15
    64d8:	18fb      	adds	r3, r7, r3
    64da:	2200      	movs	r2, #0
    64dc:	701a      	strb	r2, [r3, #0]
    64de:	e004      	b.n	64ea <udi_cdc_data_received+0x36>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    64e0:	230f      	movs	r3, #15
    64e2:	18fb      	adds	r3, r7, r3
    64e4:	2200      	movs	r2, #0
    64e6:	701a      	strb	r2, [r3, #0]
		break;
    64e8:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    64ea:	1dfb      	adds	r3, r7, #7
    64ec:	781b      	ldrb	r3, [r3, #0]
    64ee:	2b00      	cmp	r3, #0
    64f0:	d144      	bne.n	657c <udi_cdc_data_received+0xc8>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    64f2:	230f      	movs	r3, #15
    64f4:	18fb      	adds	r3, r7, r3
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	4a23      	ldr	r2, [pc, #140]	; (6588 <udi_cdc_data_received+0xd4>)
    64fa:	447a      	add	r2, pc
    64fc:	5cd3      	ldrb	r3, [r2, r3]
    64fe:	b2db      	uxtb	r3, r3
    6500:	425a      	negs	r2, r3
    6502:	4153      	adcs	r3, r2
    6504:	b2da      	uxtb	r2, r3
    6506:	230e      	movs	r3, #14
    6508:	18fb      	adds	r3, r7, r3
    650a:	701a      	strb	r2, [r3, #0]
	if (!n) {
    650c:	683b      	ldr	r3, [r7, #0]
    650e:	2b00      	cmp	r3, #0
    6510:	d116      	bne.n	6540 <udi_cdc_data_received+0x8c>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    6512:	230f      	movs	r3, #15
    6514:	18fb      	adds	r3, r7, r3
    6516:	781a      	ldrb	r2, [r3, #0]
    6518:	230e      	movs	r3, #14
    651a:	18fb      	adds	r3, r7, r3
    651c:	781b      	ldrb	r3, [r3, #0]
    651e:	0052      	lsls	r2, r2, #1
    6520:	18d3      	adds	r3, r2, r3
    6522:	019b      	lsls	r3, r3, #6
    6524:	4a19      	ldr	r2, [pc, #100]	; (658c <udi_cdc_data_received+0xd8>)
    6526:	447a      	add	r2, pc
    6528:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    652a:	1dbb      	adds	r3, r7, #6
    652c:	7818      	ldrb	r0, [r3, #0]
    652e:	4b18      	ldr	r3, [pc, #96]	; (6590 <udi_cdc_data_received+0xdc>)
    6530:	447b      	add	r3, pc
    6532:	9300      	str	r3, [sp, #0]
    6534:	2340      	movs	r3, #64	; 0x40
    6536:	2101      	movs	r1, #1
    6538:	4c16      	ldr	r4, [pc, #88]	; (6594 <udi_cdc_data_received+0xe0>)
    653a:	592c      	ldr	r4, [r5, r4]
    653c:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    653e:	e01e      	b.n	657e <udi_cdc_data_received+0xca>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    6540:	230f      	movs	r3, #15
    6542:	18fb      	adds	r3, r7, r3
    6544:	7819      	ldrb	r1, [r3, #0]
    6546:	230e      	movs	r3, #14
    6548:	18fb      	adds	r3, r7, r3
    654a:	781a      	ldrb	r2, [r3, #0]
    654c:	683b      	ldr	r3, [r7, #0]
    654e:	b298      	uxth	r0, r3
    6550:	4b11      	ldr	r3, [pc, #68]	; (6598 <udi_cdc_data_received+0xe4>)
    6552:	447b      	add	r3, pc
    6554:	0049      	lsls	r1, r1, #1
    6556:	188a      	adds	r2, r1, r2
    6558:	0052      	lsls	r2, r2, #1
    655a:	1c01      	adds	r1, r0, #0
    655c:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    655e:	230f      	movs	r3, #15
    6560:	18fb      	adds	r3, r7, r3
    6562:	781b      	ldrb	r3, [r3, #0]
    6564:	4a0d      	ldr	r2, [pc, #52]	; (659c <udi_cdc_data_received+0xe8>)
    6566:	447a      	add	r2, pc
    6568:	2100      	movs	r1, #0
    656a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    656c:	230f      	movs	r3, #15
    656e:	18fb      	adds	r3, r7, r3
    6570:	781b      	ldrb	r3, [r3, #0]
    6572:	0018      	movs	r0, r3
    6574:	4b0a      	ldr	r3, [pc, #40]	; (65a0 <udi_cdc_data_received+0xec>)
    6576:	447b      	add	r3, pc
    6578:	4798      	blx	r3
    657a:	e000      	b.n	657e <udi_cdc_data_received+0xca>
		return;
    657c:	46c0      	nop			; (mov r8, r8)
}
    657e:	46bd      	mov	sp, r7
    6580:	b004      	add	sp, #16
    6582:	bdb0      	pop	{r4, r5, r7, pc}
    6584:	0000b994 	.word	0x0000b994
    6588:	1fff9f7a 	.word	0x1fff9f7a
    658c:	1fff9eca 	.word	0x1fff9eca
    6590:	ffffff81 	.word	0xffffff81
    6594:	00000070 	.word	0x00000070
    6598:	1fff9f1e 	.word	0x1fff9f1e
    659c:	1fff9f16 	.word	0x1fff9f16
    65a0:	fffffdeb 	.word	0xfffffdeb

000065a4 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    65a4:	b580      	push	{r7, lr}
    65a6:	b084      	sub	sp, #16
    65a8:	af00      	add	r7, sp, #0
    65aa:	6039      	str	r1, [r7, #0]
    65ac:	0011      	movs	r1, r2
    65ae:	1dfb      	adds	r3, r7, #7
    65b0:	1c02      	adds	r2, r0, #0
    65b2:	701a      	strb	r2, [r3, #0]
    65b4:	1dbb      	adds	r3, r7, #6
    65b6:	1c0a      	adds	r2, r1, #0
    65b8:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    65ba:	1dbb      	adds	r3, r7, #6
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	2b81      	cmp	r3, #129	; 0x81
    65c0:	d104      	bne.n	65cc <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    65c2:	230f      	movs	r3, #15
    65c4:	18fb      	adds	r3, r7, r3
    65c6:	2200      	movs	r2, #0
    65c8:	701a      	strb	r2, [r3, #0]
    65ca:	e004      	b.n	65d6 <udi_cdc_data_sent+0x32>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    65cc:	230f      	movs	r3, #15
    65ce:	18fb      	adds	r3, r7, r3
    65d0:	2200      	movs	r2, #0
    65d2:	701a      	strb	r2, [r3, #0]
		break;
    65d4:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    65d6:	1dfb      	adds	r3, r7, #7
    65d8:	781b      	ldrb	r3, [r3, #0]
    65da:	2b00      	cmp	r3, #0
    65dc:	d12a      	bne.n	6634 <udi_cdc_data_sent+0x90>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    65de:	230f      	movs	r3, #15
    65e0:	18fb      	adds	r3, r7, r3
    65e2:	781a      	ldrb	r2, [r3, #0]
    65e4:	230f      	movs	r3, #15
    65e6:	18fb      	adds	r3, r7, r3
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	4914      	ldr	r1, [pc, #80]	; (663c <udi_cdc_data_sent+0x98>)
    65ec:	4479      	add	r1, pc
    65ee:	5ccb      	ldrb	r3, [r1, r3]
    65f0:	b2db      	uxtb	r3, r3
    65f2:	4259      	negs	r1, r3
    65f4:	414b      	adcs	r3, r1
    65f6:	b2db      	uxtb	r3, r3
    65f8:	0019      	movs	r1, r3
    65fa:	4b11      	ldr	r3, [pc, #68]	; (6640 <udi_cdc_data_sent+0x9c>)
    65fc:	447b      	add	r3, pc
    65fe:	0052      	lsls	r2, r2, #1
    6600:	1852      	adds	r2, r2, r1
    6602:	0052      	lsls	r2, r2, #1
    6604:	2100      	movs	r1, #0
    6606:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    6608:	230f      	movs	r3, #15
    660a:	18fb      	adds	r3, r7, r3
    660c:	781b      	ldrb	r3, [r3, #0]
    660e:	4a0d      	ldr	r2, [pc, #52]	; (6644 <udi_cdc_data_sent+0xa0>)
    6610:	447a      	add	r2, pc
    6612:	2100      	movs	r1, #0
    6614:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    6616:	230f      	movs	r3, #15
    6618:	18fb      	adds	r3, r7, r3
    661a:	781b      	ldrb	r3, [r3, #0]
    661c:	4a0a      	ldr	r2, [pc, #40]	; (6648 <udi_cdc_data_sent+0xa4>)
    661e:	447a      	add	r2, pc
    6620:	2100      	movs	r1, #0
    6622:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    6624:	230f      	movs	r3, #15
    6626:	18fb      	adds	r3, r7, r3
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	0018      	movs	r0, r3
    662c:	4b07      	ldr	r3, [pc, #28]	; (664c <udi_cdc_data_sent+0xa8>)
    662e:	447b      	add	r3, pc
    6630:	4798      	blx	r3
    6632:	e000      	b.n	6636 <udi_cdc_data_sent+0x92>
		return;
    6634:	46c0      	nop			; (mov r8, r8)
}
    6636:	46bd      	mov	sp, r7
    6638:	b004      	add	sp, #16
    663a:	bd80      	pop	{r7, pc}
    663c:	1fff9f18 	.word	0x1fff9f18
    6640:	1fff9f04 	.word	0x1fff9f04
    6644:	1fff9f00 	.word	0x1fff9f00
    6648:	1fff9eee 	.word	0x1fff9eee
    664c:	0000001f 	.word	0x0000001f

00006650 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    6650:	b5b0      	push	{r4, r5, r7, lr}
    6652:	b088      	sub	sp, #32
    6654:	af02      	add	r7, sp, #8
    6656:	0002      	movs	r2, r0
    6658:	1dfb      	adds	r3, r7, #7
    665a:	701a      	strb	r2, [r3, #0]
    665c:	4c89      	ldr	r4, [pc, #548]	; (6884 <udi_cdc_tx_send+0x234>)
    665e:	447c      	add	r4, pc
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6660:	1dfb      	adds	r3, r7, #7
    6662:	2200      	movs	r2, #0
    6664:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    6666:	1dfb      	adds	r3, r7, #7
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	4a87      	ldr	r2, [pc, #540]	; (6888 <udi_cdc_tx_send+0x238>)
    666c:	447a      	add	r2, pc
    666e:	5cd3      	ldrb	r3, [r2, r3]
    6670:	b2db      	uxtb	r3, r3
    6672:	2b00      	cmp	r3, #0
    6674:	d000      	beq.n	6678 <udi_cdc_tx_send+0x28>
    6676:	e0fe      	b.n	6876 <udi_cdc_tx_send+0x226>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    6678:	4b84      	ldr	r3, [pc, #528]	; (688c <udi_cdc_tx_send+0x23c>)
    667a:	58e3      	ldr	r3, [r4, r3]
    667c:	4798      	blx	r3
    667e:	1e03      	subs	r3, r0, #0
    6680:	d00c      	beq.n	669c <udi_cdc_tx_send+0x4c>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    6682:	1dfb      	adds	r3, r7, #7
    6684:	781a      	ldrb	r2, [r3, #0]
    6686:	4b82      	ldr	r3, [pc, #520]	; (6890 <udi_cdc_tx_send+0x240>)
    6688:	447b      	add	r3, pc
    668a:	0052      	lsls	r2, r2, #1
    668c:	5ad5      	ldrh	r5, [r2, r3]
    668e:	4b81      	ldr	r3, [pc, #516]	; (6894 <udi_cdc_tx_send+0x244>)
    6690:	58e3      	ldr	r3, [r4, r3]
    6692:	4798      	blx	r3
    6694:	0003      	movs	r3, r0
    6696:	429d      	cmp	r5, r3
    6698:	d10d      	bne.n	66b6 <udi_cdc_tx_send+0x66>
			return; // Wait next SOF to send next data
    669a:	e0ef      	b.n	687c <udi_cdc_tx_send+0x22c>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    669c:	1dfb      	adds	r3, r7, #7
    669e:	781a      	ldrb	r2, [r3, #0]
    66a0:	4b7d      	ldr	r3, [pc, #500]	; (6898 <udi_cdc_tx_send+0x248>)
    66a2:	447b      	add	r3, pc
    66a4:	0052      	lsls	r2, r2, #1
    66a6:	5ad5      	ldrh	r5, [r2, r3]
    66a8:	4b7c      	ldr	r3, [pc, #496]	; (689c <udi_cdc_tx_send+0x24c>)
    66aa:	58e3      	ldr	r3, [r4, r3]
    66ac:	4798      	blx	r3
    66ae:	0003      	movs	r3, r0
    66b0:	429d      	cmp	r5, r3
    66b2:	d100      	bne.n	66b6 <udi_cdc_tx_send+0x66>
    66b4:	e0e1      	b.n	687a <udi_cdc_tx_send+0x22a>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    66b6:	4b7a      	ldr	r3, [pc, #488]	; (68a0 <udi_cdc_tx_send+0x250>)
    66b8:	447b      	add	r3, pc
    66ba:	4798      	blx	r3
    66bc:	0003      	movs	r3, r0
    66be:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    66c0:	1dfb      	adds	r3, r7, #7
    66c2:	781a      	ldrb	r2, [r3, #0]
    66c4:	2317      	movs	r3, #23
    66c6:	18fb      	adds	r3, r7, r3
    66c8:	4976      	ldr	r1, [pc, #472]	; (68a4 <udi_cdc_tx_send+0x254>)
    66ca:	4479      	add	r1, pc
    66cc:	5c8a      	ldrb	r2, [r1, r2]
    66ce:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    66d0:	1dfb      	adds	r3, r7, #7
    66d2:	7819      	ldrb	r1, [r3, #0]
    66d4:	2317      	movs	r3, #23
    66d6:	18fb      	adds	r3, r7, r3
    66d8:	781a      	ldrb	r2, [r3, #0]
    66da:	4b73      	ldr	r3, [pc, #460]	; (68a8 <udi_cdc_tx_send+0x258>)
    66dc:	447b      	add	r3, pc
    66de:	0049      	lsls	r1, r1, #1
    66e0:	188a      	adds	r2, r1, r2
    66e2:	0052      	lsls	r2, r2, #1
    66e4:	5ad3      	ldrh	r3, [r2, r3]
    66e6:	2b00      	cmp	r3, #0
    66e8:	d127      	bne.n	673a <udi_cdc_tx_send+0xea>
		sof_zlp_counter++;
    66ea:	4b70      	ldr	r3, [pc, #448]	; (68ac <udi_cdc_tx_send+0x25c>)
    66ec:	447b      	add	r3, pc
    66ee:	881b      	ldrh	r3, [r3, #0]
    66f0:	3301      	adds	r3, #1
    66f2:	b29a      	uxth	r2, r3
    66f4:	4b6e      	ldr	r3, [pc, #440]	; (68b0 <udi_cdc_tx_send+0x260>)
    66f6:	447b      	add	r3, pc
    66f8:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    66fa:	4b64      	ldr	r3, [pc, #400]	; (688c <udi_cdc_tx_send+0x23c>)
    66fc:	58e3      	ldr	r3, [r4, r3]
    66fe:	4798      	blx	r3
    6700:	0003      	movs	r3, r0
    6702:	001a      	movs	r2, r3
    6704:	2301      	movs	r3, #1
    6706:	4053      	eors	r3, r2
    6708:	b2db      	uxtb	r3, r3
    670a:	2b00      	cmp	r3, #0
    670c:	d004      	beq.n	6718 <udi_cdc_tx_send+0xc8>
    670e:	4b69      	ldr	r3, [pc, #420]	; (68b4 <udi_cdc_tx_send+0x264>)
    6710:	447b      	add	r3, pc
    6712:	881b      	ldrh	r3, [r3, #0]
    6714:	2b63      	cmp	r3, #99	; 0x63
    6716:	d90a      	bls.n	672e <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    6718:	4b5c      	ldr	r3, [pc, #368]	; (688c <udi_cdc_tx_send+0x23c>)
    671a:	58e3      	ldr	r3, [r4, r3]
    671c:	4798      	blx	r3
    671e:	1e03      	subs	r3, r0, #0
    6720:	d00b      	beq.n	673a <udi_cdc_tx_send+0xea>
    6722:	4b65      	ldr	r3, [pc, #404]	; (68b8 <udi_cdc_tx_send+0x268>)
    6724:	447b      	add	r3, pc
    6726:	881b      	ldrh	r3, [r3, #0]
    6728:	4a64      	ldr	r2, [pc, #400]	; (68bc <udi_cdc_tx_send+0x26c>)
    672a:	4293      	cmp	r3, r2
    672c:	d805      	bhi.n	673a <udi_cdc_tx_send+0xea>
			cpu_irq_restore(flags);
    672e:	693b      	ldr	r3, [r7, #16]
    6730:	0018      	movs	r0, r3
    6732:	4b63      	ldr	r3, [pc, #396]	; (68c0 <udi_cdc_tx_send+0x270>)
    6734:	447b      	add	r3, pc
    6736:	4798      	blx	r3
			return;
    6738:	e0a0      	b.n	687c <udi_cdc_tx_send+0x22c>
		}
	}
	sof_zlp_counter = 0;
    673a:	4b62      	ldr	r3, [pc, #392]	; (68c4 <udi_cdc_tx_send+0x274>)
    673c:	447b      	add	r3, pc
    673e:	2200      	movs	r2, #0
    6740:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    6742:	1dfb      	adds	r3, r7, #7
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	4a60      	ldr	r2, [pc, #384]	; (68c8 <udi_cdc_tx_send+0x278>)
    6748:	447a      	add	r2, pc
    674a:	5cd3      	ldrb	r3, [r2, r3]
    674c:	b2db      	uxtb	r3, r3
    674e:	2201      	movs	r2, #1
    6750:	4053      	eors	r3, r2
    6752:	b2db      	uxtb	r3, r3
    6754:	2b00      	cmp	r3, #0
    6756:	d00c      	beq.n	6772 <udi_cdc_tx_send+0x122>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    6758:	1dfb      	adds	r3, r7, #7
    675a:	781b      	ldrb	r3, [r3, #0]
    675c:	2217      	movs	r2, #23
    675e:	18ba      	adds	r2, r7, r2
    6760:	7812      	ldrb	r2, [r2, #0]
    6762:	4251      	negs	r1, r2
    6764:	414a      	adcs	r2, r1
    6766:	b2d2      	uxtb	r2, r2
    6768:	0011      	movs	r1, r2
    676a:	4a58      	ldr	r2, [pc, #352]	; (68cc <udi_cdc_tx_send+0x27c>)
    676c:	447a      	add	r2, pc
    676e:	54d1      	strb	r1, [r2, r3]
    6770:	e008      	b.n	6784 <udi_cdc_tx_send+0x134>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    6772:	2317      	movs	r3, #23
    6774:	18fb      	adds	r3, r7, r3
    6776:	781b      	ldrb	r3, [r3, #0]
    6778:	425a      	negs	r2, r3
    677a:	4153      	adcs	r3, r2
    677c:	b2da      	uxtb	r2, r3
    677e:	2317      	movs	r3, #23
    6780:	18fb      	adds	r3, r7, r3
    6782:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    6784:	1dfb      	adds	r3, r7, #7
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	4a51      	ldr	r2, [pc, #324]	; (68d0 <udi_cdc_tx_send+0x280>)
    678a:	447a      	add	r2, pc
    678c:	2101      	movs	r1, #1
    678e:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    6790:	693b      	ldr	r3, [r7, #16]
    6792:	0018      	movs	r0, r3
    6794:	4b4f      	ldr	r3, [pc, #316]	; (68d4 <udi_cdc_tx_send+0x284>)
    6796:	447b      	add	r3, pc
    6798:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    679a:	1dfb      	adds	r3, r7, #7
    679c:	7819      	ldrb	r1, [r3, #0]
    679e:	2317      	movs	r3, #23
    67a0:	18fb      	adds	r3, r7, r3
    67a2:	781a      	ldrb	r2, [r3, #0]
    67a4:	4b4c      	ldr	r3, [pc, #304]	; (68d8 <udi_cdc_tx_send+0x288>)
    67a6:	447b      	add	r3, pc
    67a8:	0049      	lsls	r1, r1, #1
    67aa:	188a      	adds	r2, r1, r2
    67ac:	0052      	lsls	r2, r2, #1
    67ae:	5ad2      	ldrh	r2, [r2, r3]
    67b0:	230f      	movs	r3, #15
    67b2:	18fb      	adds	r3, r7, r3
    67b4:	3a40      	subs	r2, #64	; 0x40
    67b6:	1e51      	subs	r1, r2, #1
    67b8:	418a      	sbcs	r2, r1
    67ba:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    67bc:	230f      	movs	r3, #15
    67be:	18fb      	adds	r3, r7, r3
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d01c      	beq.n	6800 <udi_cdc_tx_send+0x1b0>
		if (udd_is_high_speed()) {
    67c6:	4b31      	ldr	r3, [pc, #196]	; (688c <udi_cdc_tx_send+0x23c>)
    67c8:	58e3      	ldr	r3, [r4, r3]
    67ca:	4798      	blx	r3
    67cc:	1e03      	subs	r3, r0, #0
    67ce:	d00b      	beq.n	67e8 <udi_cdc_tx_send+0x198>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    67d0:	1dfb      	adds	r3, r7, #7
    67d2:	781d      	ldrb	r5, [r3, #0]
    67d4:	4b2f      	ldr	r3, [pc, #188]	; (6894 <udi_cdc_tx_send+0x244>)
    67d6:	58e3      	ldr	r3, [r4, r3]
    67d8:	4798      	blx	r3
    67da:	0003      	movs	r3, r0
    67dc:	0019      	movs	r1, r3
    67de:	4b3f      	ldr	r3, [pc, #252]	; (68dc <udi_cdc_tx_send+0x28c>)
    67e0:	447b      	add	r3, pc
    67e2:	006a      	lsls	r2, r5, #1
    67e4:	52d1      	strh	r1, [r2, r3]
    67e6:	e012      	b.n	680e <udi_cdc_tx_send+0x1be>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    67e8:	1dfb      	adds	r3, r7, #7
    67ea:	781d      	ldrb	r5, [r3, #0]
    67ec:	4b2b      	ldr	r3, [pc, #172]	; (689c <udi_cdc_tx_send+0x24c>)
    67ee:	58e3      	ldr	r3, [r4, r3]
    67f0:	4798      	blx	r3
    67f2:	0003      	movs	r3, r0
    67f4:	0019      	movs	r1, r3
    67f6:	4b3a      	ldr	r3, [pc, #232]	; (68e0 <udi_cdc_tx_send+0x290>)
    67f8:	447b      	add	r3, pc
    67fa:	006a      	lsls	r2, r5, #1
    67fc:	52d1      	strh	r1, [r2, r3]
    67fe:	e006      	b.n	680e <udi_cdc_tx_send+0x1be>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    6800:	1dfb      	adds	r3, r7, #7
    6802:	781a      	ldrb	r2, [r3, #0]
    6804:	4b37      	ldr	r3, [pc, #220]	; (68e4 <udi_cdc_tx_send+0x294>)
    6806:	447b      	add	r3, pc
    6808:	0052      	lsls	r2, r2, #1
    680a:	2100      	movs	r1, #0
    680c:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    680e:	1dfb      	adds	r3, r7, #7
    6810:	781b      	ldrb	r3, [r3, #0]
    6812:	2b00      	cmp	r3, #0
    6814:	d104      	bne.n	6820 <udi_cdc_tx_send+0x1d0>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    6816:	2316      	movs	r3, #22
    6818:	18fb      	adds	r3, r7, r3
    681a:	2281      	movs	r2, #129	; 0x81
    681c:	701a      	strb	r2, [r3, #0]
    681e:	e004      	b.n	682a <udi_cdc_tx_send+0x1da>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    6820:	2316      	movs	r3, #22
    6822:	18fb      	adds	r3, r7, r3
    6824:	2281      	movs	r2, #129	; 0x81
    6826:	701a      	strb	r2, [r3, #0]
		break;
    6828:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    682a:	1dfb      	adds	r3, r7, #7
    682c:	781a      	ldrb	r2, [r3, #0]
    682e:	2317      	movs	r3, #23
    6830:	18fb      	adds	r3, r7, r3
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	0052      	lsls	r2, r2, #1
    6836:	18d3      	adds	r3, r2, r3
    6838:	019b      	lsls	r3, r3, #6
    683a:	4a2b      	ldr	r2, [pc, #172]	; (68e8 <udi_cdc_tx_send+0x298>)
    683c:	447a      	add	r2, pc
    683e:	189d      	adds	r5, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    6840:	1dfb      	adds	r3, r7, #7
    6842:	7819      	ldrb	r1, [r3, #0]
    6844:	2317      	movs	r3, #23
    6846:	18fb      	adds	r3, r7, r3
    6848:	781a      	ldrb	r2, [r3, #0]
    684a:	4b28      	ldr	r3, [pc, #160]	; (68ec <udi_cdc_tx_send+0x29c>)
    684c:	447b      	add	r3, pc
    684e:	0049      	lsls	r1, r1, #1
    6850:	188a      	adds	r2, r1, r2
    6852:	0052      	lsls	r2, r2, #1
    6854:	5ad3      	ldrh	r3, [r2, r3]
	udd_ep_run( ep,
    6856:	001a      	movs	r2, r3
    6858:	230f      	movs	r3, #15
    685a:	18fb      	adds	r3, r7, r3
    685c:	7819      	ldrb	r1, [r3, #0]
    685e:	2316      	movs	r3, #22
    6860:	18fb      	adds	r3, r7, r3
    6862:	7818      	ldrb	r0, [r3, #0]
    6864:	4b22      	ldr	r3, [pc, #136]	; (68f0 <udi_cdc_tx_send+0x2a0>)
    6866:	447b      	add	r3, pc
    6868:	9300      	str	r3, [sp, #0]
    686a:	0013      	movs	r3, r2
    686c:	002a      	movs	r2, r5
    686e:	4d21      	ldr	r5, [pc, #132]	; (68f4 <udi_cdc_tx_send+0x2a4>)
    6870:	5964      	ldr	r4, [r4, r5]
    6872:	47a0      	blx	r4
    6874:	e002      	b.n	687c <udi_cdc_tx_send+0x22c>
		return; // Already on going or wait next SOF to send next data
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	e000      	b.n	687c <udi_cdc_tx_send+0x22c>
			return; // Wait next SOF to send next data
    687a:	46c0      	nop			; (mov r8, r8)
			udi_cdc_data_sent);
}
    687c:	46bd      	mov	sp, r7
    687e:	b006      	add	sp, #24
    6880:	bdb0      	pop	{r4, r5, r7, pc}
    6882:	46c0      	nop			; (mov r8, r8)
    6884:	0000b802 	.word	0x0000b802
    6888:	1fff9ea0 	.word	0x1fff9ea0
    688c:	00000198 	.word	0x00000198
    6890:	1fff9e80 	.word	0x1fff9e80
    6894:	00000040 	.word	0x00000040
    6898:	1fff9e66 	.word	0x1fff9e66
    689c:	000000c8 	.word	0x000000c8
    68a0:	fffff731 	.word	0xfffff731
    68a4:	1fff9e3a 	.word	0x1fff9e3a
    68a8:	1fff9e24 	.word	0x1fff9e24
    68ac:	1fff9e26 	.word	0x1fff9e26
    68b0:	1fff9e1c 	.word	0x1fff9e1c
    68b4:	1fff9e02 	.word	0x1fff9e02
    68b8:	1fff9dee 	.word	0x1fff9dee
    68bc:	0000031f 	.word	0x0000031f
    68c0:	fffff709 	.word	0xfffff709
    68c4:	1fff9dd6 	.word	0x1fff9dd6
    68c8:	1fff9dc8 	.word	0x1fff9dc8
    68cc:	1fff9d98 	.word	0x1fff9d98
    68d0:	1fff9d82 	.word	0x1fff9d82
    68d4:	fffff6a7 	.word	0xfffff6a7
    68d8:	1fff9d5a 	.word	0x1fff9d5a
    68dc:	1fff9d28 	.word	0x1fff9d28
    68e0:	1fff9d10 	.word	0x1fff9d10
    68e4:	1fff9d02 	.word	0x1fff9d02
    68e8:	1fff9c44 	.word	0x1fff9c44
    68ec:	1fff9cb4 	.word	0x1fff9cb4
    68f0:	fffffd3b 	.word	0xfffffd3b
    68f4:	00000070 	.word	0x00000070

000068f8 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	b086      	sub	sp, #24
    68fc:	af00      	add	r7, sp, #0
    68fe:	0002      	movs	r2, r0
    6900:	1dfb      	adds	r3, r7, #7
    6902:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6904:	1dfb      	adds	r3, r7, #7
    6906:	2200      	movs	r2, #0
    6908:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    690a:	4b17      	ldr	r3, [pc, #92]	; (6968 <udi_cdc_multi_get_nb_received_data+0x70>)
    690c:	447b      	add	r3, pc
    690e:	4798      	blx	r3
    6910:	0003      	movs	r3, r0
    6912:	617b      	str	r3, [r7, #20]
	pos = udi_cdc_rx_pos[port];
    6914:	1dfb      	adds	r3, r7, #7
    6916:	7819      	ldrb	r1, [r3, #0]
    6918:	2312      	movs	r3, #18
    691a:	18fb      	adds	r3, r7, r3
    691c:	4a13      	ldr	r2, [pc, #76]	; (696c <udi_cdc_multi_get_nb_received_data+0x74>)
    691e:	447a      	add	r2, pc
    6920:	0049      	lsls	r1, r1, #1
    6922:	5a8a      	ldrh	r2, [r1, r2]
    6924:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    6926:	1dfb      	adds	r3, r7, #7
    6928:	781a      	ldrb	r2, [r3, #0]
    692a:	1dfb      	adds	r3, r7, #7
    692c:	781b      	ldrb	r3, [r3, #0]
    692e:	4910      	ldr	r1, [pc, #64]	; (6970 <udi_cdc_multi_get_nb_received_data+0x78>)
    6930:	4479      	add	r1, pc
    6932:	5ccb      	ldrb	r3, [r1, r3]
    6934:	b2db      	uxtb	r3, r3
    6936:	0019      	movs	r1, r3
    6938:	4b0e      	ldr	r3, [pc, #56]	; (6974 <udi_cdc_multi_get_nb_received_data+0x7c>)
    693a:	447b      	add	r3, pc
    693c:	0052      	lsls	r2, r2, #1
    693e:	1852      	adds	r2, r2, r1
    6940:	0052      	lsls	r2, r2, #1
    6942:	5ad3      	ldrh	r3, [r2, r3]
    6944:	b29b      	uxth	r3, r3
    6946:	001a      	movs	r2, r3
    6948:	2312      	movs	r3, #18
    694a:	18fb      	adds	r3, r7, r3
    694c:	881b      	ldrh	r3, [r3, #0]
    694e:	1ad3      	subs	r3, r2, r3
    6950:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
    6952:	697b      	ldr	r3, [r7, #20]
    6954:	0018      	movs	r0, r3
    6956:	4b08      	ldr	r3, [pc, #32]	; (6978 <udi_cdc_multi_get_nb_received_data+0x80>)
    6958:	447b      	add	r3, pc
    695a:	4798      	blx	r3
	return nb_received;
    695c:	68fb      	ldr	r3, [r7, #12]
}
    695e:	0018      	movs	r0, r3
    6960:	46bd      	mov	sp, r7
    6962:	b006      	add	sp, #24
    6964:	bd80      	pop	{r7, pc}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	fffff4dd 	.word	0xfffff4dd
    696c:	1fff9b5a 	.word	0x1fff9b5a
    6970:	1fff9b44 	.word	0x1fff9b44
    6974:	1fff9b36 	.word	0x1fff9b36
    6978:	fffff4e5 	.word	0xfffff4e5

0000697c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    697c:	b580      	push	{r7, lr}
    697e:	b082      	sub	sp, #8
    6980:	af00      	add	r7, sp, #0
    6982:	0002      	movs	r2, r0
    6984:	1dfb      	adds	r3, r7, #7
    6986:	701a      	strb	r2, [r3, #0]
    6988:	4a07      	ldr	r2, [pc, #28]	; (69a8 <udi_cdc_multi_is_rx_ready+0x2c>)
    698a:	447a      	add	r2, pc
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    698c:	1dfb      	adds	r3, r7, #7
    698e:	781b      	ldrb	r3, [r3, #0]
    6990:	0018      	movs	r0, r3
    6992:	4b06      	ldr	r3, [pc, #24]	; (69ac <udi_cdc_multi_is_rx_ready+0x30>)
    6994:	58d3      	ldr	r3, [r2, r3]
    6996:	4798      	blx	r3
    6998:	0003      	movs	r3, r0
    699a:	1e5a      	subs	r2, r3, #1
    699c:	4193      	sbcs	r3, r2
    699e:	b2db      	uxtb	r3, r3
}
    69a0:	0018      	movs	r0, r3
    69a2:	46bd      	mov	sp, r7
    69a4:	b002      	add	sp, #8
    69a6:	bd80      	pop	{r7, pc}
    69a8:	0000b4d6 	.word	0x0000b4d6
    69ac:	00000028 	.word	0x00000028

000069b0 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    69b0:	b580      	push	{r7, lr}
    69b2:	b086      	sub	sp, #24
    69b4:	af00      	add	r7, sp, #0
    69b6:	0002      	movs	r2, r0
    69b8:	1dfb      	adds	r3, r7, #7
    69ba:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    69bc:	2300      	movs	r3, #0
    69be:	617b      	str	r3, [r7, #20]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    69c0:	1dfb      	adds	r3, r7, #7
    69c2:	2200      	movs	r2, #0
    69c4:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    69c6:	1dfb      	adds	r3, r7, #7
    69c8:	781a      	ldrb	r2, [r3, #0]
    69ca:	4945      	ldr	r1, [pc, #276]	; (6ae0 <udi_cdc_multi_getc+0x130>)
    69cc:	4479      	add	r1, pc
    69ce:	0013      	movs	r3, r2
    69d0:	00db      	lsls	r3, r3, #3
    69d2:	1a9b      	subs	r3, r3, r2
    69d4:	18cb      	adds	r3, r1, r3
    69d6:	3306      	adds	r3, #6
    69d8:	781a      	ldrb	r2, [r3, #0]
    69da:	2313      	movs	r3, #19
    69dc:	18fb      	adds	r3, r7, r3
    69de:	3a09      	subs	r2, #9
    69e0:	4251      	negs	r1, r2
    69e2:	414a      	adcs	r2, r1
    69e4:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    69e6:	4b3f      	ldr	r3, [pc, #252]	; (6ae4 <udi_cdc_multi_getc+0x134>)
    69e8:	447b      	add	r3, pc
    69ea:	4798      	blx	r3
    69ec:	0003      	movs	r3, r0
    69ee:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    69f0:	1dfb      	adds	r3, r7, #7
    69f2:	7819      	ldrb	r1, [r3, #0]
    69f4:	230a      	movs	r3, #10
    69f6:	18fb      	adds	r3, r7, r3
    69f8:	4a3b      	ldr	r2, [pc, #236]	; (6ae8 <udi_cdc_multi_getc+0x138>)
    69fa:	447a      	add	r2, pc
    69fc:	0049      	lsls	r1, r1, #1
    69fe:	5a8a      	ldrh	r2, [r1, r2]
    6a00:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    6a02:	1dfb      	adds	r3, r7, #7
    6a04:	781a      	ldrb	r2, [r3, #0]
    6a06:	2309      	movs	r3, #9
    6a08:	18fb      	adds	r3, r7, r3
    6a0a:	4938      	ldr	r1, [pc, #224]	; (6aec <udi_cdc_multi_getc+0x13c>)
    6a0c:	4479      	add	r1, pc
    6a0e:	5c8a      	ldrb	r2, [r1, r2]
    6a10:	701a      	strb	r2, [r3, #0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    6a12:	1dfb      	adds	r3, r7, #7
    6a14:	7819      	ldrb	r1, [r3, #0]
    6a16:	2309      	movs	r3, #9
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	781a      	ldrb	r2, [r3, #0]
    6a1c:	4b34      	ldr	r3, [pc, #208]	; (6af0 <udi_cdc_multi_getc+0x140>)
    6a1e:	447b      	add	r3, pc
    6a20:	0049      	lsls	r1, r1, #1
    6a22:	188a      	adds	r2, r1, r2
    6a24:	0052      	lsls	r2, r2, #1
    6a26:	5ad3      	ldrh	r3, [r2, r3]
    6a28:	b299      	uxth	r1, r3
    6a2a:	2308      	movs	r3, #8
    6a2c:	18fa      	adds	r2, r7, r3
    6a2e:	230a      	movs	r3, #10
    6a30:	18fb      	adds	r3, r7, r3
    6a32:	8818      	ldrh	r0, [r3, #0]
    6a34:	2300      	movs	r3, #0
    6a36:	4288      	cmp	r0, r1
    6a38:	415b      	adcs	r3, r3
    6a3a:	7013      	strb	r3, [r2, #0]
	cpu_irq_restore(flags);
    6a3c:	68fb      	ldr	r3, [r7, #12]
    6a3e:	0018      	movs	r0, r3
    6a40:	4b2c      	ldr	r3, [pc, #176]	; (6af4 <udi_cdc_multi_getc+0x144>)
    6a42:	447b      	add	r3, pc
    6a44:	4798      	blx	r3
	while (again) {
    6a46:	2308      	movs	r3, #8
    6a48:	18fb      	adds	r3, r7, r3
    6a4a:	781b      	ldrb	r3, [r3, #0]
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d011      	beq.n	6a74 <udi_cdc_multi_getc+0xc4>
		if (!udi_cdc_data_running) {
    6a50:	4b29      	ldr	r3, [pc, #164]	; (6af8 <udi_cdc_multi_getc+0x148>)
    6a52:	447b      	add	r3, pc
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	b2db      	uxtb	r3, r3
    6a58:	2201      	movs	r2, #1
    6a5a:	4053      	eors	r3, r2
    6a5c:	b2db      	uxtb	r3, r3
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d001      	beq.n	6a66 <udi_cdc_multi_getc+0xb6>
			return 0;
    6a62:	2300      	movs	r3, #0
    6a64:	e038      	b.n	6ad8 <udi_cdc_multi_getc+0x128>
    6a66:	2313      	movs	r3, #19
    6a68:	18fb      	adds	r3, r7, r3
    6a6a:	2213      	movs	r2, #19
    6a6c:	18ba      	adds	r2, r7, r2
    6a6e:	7812      	ldrb	r2, [r2, #0]
    6a70:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    6a72:	e7b8      	b.n	69e6 <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    6a74:	1dfb      	adds	r3, r7, #7
    6a76:	7818      	ldrb	r0, [r3, #0]
    6a78:	2309      	movs	r3, #9
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	781a      	ldrb	r2, [r3, #0]
    6a7e:	230a      	movs	r3, #10
    6a80:	18fb      	adds	r3, r7, r3
    6a82:	881b      	ldrh	r3, [r3, #0]
    6a84:	491d      	ldr	r1, [pc, #116]	; (6afc <udi_cdc_multi_getc+0x14c>)
    6a86:	4479      	add	r1, pc
    6a88:	0040      	lsls	r0, r0, #1
    6a8a:	1882      	adds	r2, r0, r2
    6a8c:	0192      	lsls	r2, r2, #6
    6a8e:	188a      	adds	r2, r1, r2
    6a90:	5cd3      	ldrb	r3, [r2, r3]
    6a92:	001a      	movs	r2, r3
    6a94:	697b      	ldr	r3, [r7, #20]
    6a96:	4313      	orrs	r3, r2
    6a98:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    6a9a:	1dfb      	adds	r3, r7, #7
    6a9c:	781a      	ldrb	r2, [r3, #0]
    6a9e:	230a      	movs	r3, #10
    6aa0:	18fb      	adds	r3, r7, r3
    6aa2:	881b      	ldrh	r3, [r3, #0]
    6aa4:	3301      	adds	r3, #1
    6aa6:	b299      	uxth	r1, r3
    6aa8:	4b15      	ldr	r3, [pc, #84]	; (6b00 <udi_cdc_multi_getc+0x150>)
    6aaa:	447b      	add	r3, pc
    6aac:	0052      	lsls	r2, r2, #1
    6aae:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    6ab0:	1dfb      	adds	r3, r7, #7
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	0018      	movs	r0, r3
    6ab6:	4b13      	ldr	r3, [pc, #76]	; (6b04 <udi_cdc_multi_getc+0x154>)
    6ab8:	447b      	add	r3, pc
    6aba:	4798      	blx	r3

	if (b_databit_9) {
    6abc:	2313      	movs	r3, #19
    6abe:	18fb      	adds	r3, r7, r3
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d007      	beq.n	6ad6 <udi_cdc_multi_getc+0x126>
		// Receive MSB
		b_databit_9 = false;
    6ac6:	2313      	movs	r3, #19
    6ac8:	18fb      	adds	r3, r7, r3
    6aca:	2200      	movs	r2, #0
    6acc:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    6ace:	697b      	ldr	r3, [r7, #20]
    6ad0:	021b      	lsls	r3, r3, #8
    6ad2:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    6ad4:	e787      	b.n	69e6 <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    6ad6:	697b      	ldr	r3, [r7, #20]
}
    6ad8:	0018      	movs	r0, r3
    6ada:	46bd      	mov	sp, r7
    6adc:	b006      	add	sp, #24
    6ade:	bd80      	pop	{r7, pc}
    6ae0:	1fff9a08 	.word	0x1fff9a08
    6ae4:	fffff401 	.word	0xfffff401
    6ae8:	1fff9a7e 	.word	0x1fff9a7e
    6aec:	1fff9a68 	.word	0x1fff9a68
    6af0:	1fff9a52 	.word	0x1fff9a52
    6af4:	fffff3fb 	.word	0xfffff3fb
    6af8:	1fff999a 	.word	0x1fff999a
    6afc:	1fff996a 	.word	0x1fff996a
    6b00:	1fff99ce 	.word	0x1fff99ce
    6b04:	fffff8a9 	.word	0xfffff8a9

00006b08 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    6b08:	b580      	push	{r7, lr}
    6b0a:	af00      	add	r7, sp, #0
    6b0c:	4a04      	ldr	r2, [pc, #16]	; (6b20 <udi_cdc_getc+0x18>)
    6b0e:	447a      	add	r2, pc
	return udi_cdc_multi_getc(0);
    6b10:	2000      	movs	r0, #0
    6b12:	4b04      	ldr	r3, [pc, #16]	; (6b24 <udi_cdc_getc+0x1c>)
    6b14:	58d3      	ldr	r3, [r2, r3]
    6b16:	4798      	blx	r3
    6b18:	0003      	movs	r3, r0
}
    6b1a:	0018      	movs	r0, r3
    6b1c:	46bd      	mov	sp, r7
    6b1e:	bd80      	pop	{r7, pc}
    6b20:	0000b352 	.word	0x0000b352
    6b24:	000001fc 	.word	0x000001fc

00006b28 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    6b28:	b580      	push	{r7, lr}
    6b2a:	b086      	sub	sp, #24
    6b2c:	af00      	add	r7, sp, #0
    6b2e:	0002      	movs	r2, r0
    6b30:	1dfb      	adds	r3, r7, #7
    6b32:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6b34:	1dfb      	adds	r3, r7, #7
    6b36:	2200      	movs	r2, #0
    6b38:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    6b3a:	4b2a      	ldr	r3, [pc, #168]	; (6be4 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
    6b3c:	447b      	add	r3, pc
    6b3e:	4798      	blx	r3
    6b40:	0003      	movs	r3, r0
    6b42:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    6b44:	1dfb      	adds	r3, r7, #7
    6b46:	781a      	ldrb	r2, [r3, #0]
    6b48:	230f      	movs	r3, #15
    6b4a:	18fb      	adds	r3, r7, r3
    6b4c:	4926      	ldr	r1, [pc, #152]	; (6be8 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
    6b4e:	4479      	add	r1, pc
    6b50:	5c8a      	ldrb	r2, [r1, r2]
    6b52:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    6b54:	1dfb      	adds	r3, r7, #7
    6b56:	7819      	ldrb	r1, [r3, #0]
    6b58:	230f      	movs	r3, #15
    6b5a:	18fb      	adds	r3, r7, r3
    6b5c:	781a      	ldrb	r2, [r3, #0]
    6b5e:	4b23      	ldr	r3, [pc, #140]	; (6bec <udi_cdc_multi_get_free_tx_buffer+0xc4>)
    6b60:	447b      	add	r3, pc
    6b62:	0049      	lsls	r1, r1, #1
    6b64:	188a      	adds	r2, r1, r2
    6b66:	0052      	lsls	r2, r2, #1
    6b68:	5ad3      	ldrh	r3, [r2, r3]
    6b6a:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    6b6c:	697b      	ldr	r3, [r7, #20]
    6b6e:	2b40      	cmp	r3, #64	; 0x40
    6b70:	d129      	bne.n	6bc6 <udi_cdc_multi_get_free_tx_buffer+0x9e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    6b72:	1dfb      	adds	r3, r7, #7
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	4a1e      	ldr	r2, [pc, #120]	; (6bf0 <udi_cdc_multi_get_free_tx_buffer+0xc8>)
    6b78:	447a      	add	r2, pc
    6b7a:	5cd3      	ldrb	r3, [r2, r3]
    6b7c:	b2db      	uxtb	r3, r3
    6b7e:	2201      	movs	r2, #1
    6b80:	4053      	eors	r3, r2
    6b82:	b2db      	uxtb	r3, r3
    6b84:	2b00      	cmp	r3, #0
    6b86:	d01e      	beq.n	6bc6 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    6b88:	1dfb      	adds	r3, r7, #7
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	4a19      	ldr	r2, [pc, #100]	; (6bf4 <udi_cdc_multi_get_free_tx_buffer+0xcc>)
    6b8e:	447a      	add	r2, pc
    6b90:	5cd3      	ldrb	r3, [r2, r3]
    6b92:	b2db      	uxtb	r3, r3
    6b94:	2201      	movs	r2, #1
    6b96:	4053      	eors	r3, r2
    6b98:	b2db      	uxtb	r3, r3
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d013      	beq.n	6bc6 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    6b9e:	1dfb      	adds	r3, r7, #7
    6ba0:	781b      	ldrb	r3, [r3, #0]
    6ba2:	4a15      	ldr	r2, [pc, #84]	; (6bf8 <udi_cdc_multi_get_free_tx_buffer+0xd0>)
    6ba4:	447a      	add	r2, pc
    6ba6:	2101      	movs	r1, #1
    6ba8:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    6baa:	1dfb      	adds	r3, r7, #7
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	220f      	movs	r2, #15
    6bb0:	18ba      	adds	r2, r7, r2
    6bb2:	7812      	ldrb	r2, [r2, #0]
    6bb4:	4251      	negs	r1, r2
    6bb6:	414a      	adcs	r2, r1
    6bb8:	b2d2      	uxtb	r2, r2
    6bba:	0011      	movs	r1, r2
    6bbc:	4a0f      	ldr	r2, [pc, #60]	; (6bfc <udi_cdc_multi_get_free_tx_buffer+0xd4>)
    6bbe:	447a      	add	r2, pc
    6bc0:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    6bc2:	2300      	movs	r3, #0
    6bc4:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    6bc6:	697b      	ldr	r3, [r7, #20]
    6bc8:	2240      	movs	r2, #64	; 0x40
    6bca:	1ad3      	subs	r3, r2, r3
    6bcc:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    6bce:	693b      	ldr	r3, [r7, #16]
    6bd0:	0018      	movs	r0, r3
    6bd2:	4b0b      	ldr	r3, [pc, #44]	; (6c00 <udi_cdc_multi_get_free_tx_buffer+0xd8>)
    6bd4:	447b      	add	r3, pc
    6bd6:	4798      	blx	r3
	return retval;
    6bd8:	68bb      	ldr	r3, [r7, #8]
}
    6bda:	0018      	movs	r0, r3
    6bdc:	46bd      	mov	sp, r7
    6bde:	b006      	add	sp, #24
    6be0:	bd80      	pop	{r7, pc}
    6be2:	46c0      	nop			; (mov r8, r8)
    6be4:	fffff2ad 	.word	0xfffff2ad
    6be8:	1fff99b6 	.word	0x1fff99b6
    6bec:	1fff99a0 	.word	0x1fff99a0
    6bf0:	1fff9994 	.word	0x1fff9994
    6bf4:	1fff9982 	.word	0x1fff9982
    6bf8:	1fff996c 	.word	0x1fff996c
    6bfc:	1fff9946 	.word	0x1fff9946
    6c00:	fffff269 	.word	0xfffff269

00006c04 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    6c04:	b580      	push	{r7, lr}
    6c06:	b082      	sub	sp, #8
    6c08:	af00      	add	r7, sp, #0
    6c0a:	0002      	movs	r2, r0
    6c0c:	1dfb      	adds	r3, r7, #7
    6c0e:	701a      	strb	r2, [r3, #0]
    6c10:	4a07      	ldr	r2, [pc, #28]	; (6c30 <udi_cdc_multi_is_tx_ready+0x2c>)
    6c12:	447a      	add	r2, pc
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    6c14:	1dfb      	adds	r3, r7, #7
    6c16:	781b      	ldrb	r3, [r3, #0]
    6c18:	0018      	movs	r0, r3
    6c1a:	4b06      	ldr	r3, [pc, #24]	; (6c34 <udi_cdc_multi_is_tx_ready+0x30>)
    6c1c:	58d3      	ldr	r3, [r2, r3]
    6c1e:	4798      	blx	r3
    6c20:	0003      	movs	r3, r0
    6c22:	1e5a      	subs	r2, r3, #1
    6c24:	4193      	sbcs	r3, r2
    6c26:	b2db      	uxtb	r3, r3
}
    6c28:	0018      	movs	r0, r3
    6c2a:	46bd      	mov	sp, r7
    6c2c:	b002      	add	sp, #8
    6c2e:	bd80      	pop	{r7, pc}
    6c30:	0000b24e 	.word	0x0000b24e
    6c34:	000001c4 	.word	0x000001c4

00006c38 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    6c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c3a:	b087      	sub	sp, #28
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	0002      	movs	r2, r0
    6c40:	6039      	str	r1, [r7, #0]
    6c42:	1dfb      	adds	r3, r7, #7
    6c44:	701a      	strb	r2, [r3, #0]
    6c46:	4c3e      	ldr	r4, [pc, #248]	; (6d40 <udi_cdc_multi_putc+0x108>)
    6c48:	447c      	add	r4, pc
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    6c4a:	1dfb      	adds	r3, r7, #7
    6c4c:	2200      	movs	r2, #0
    6c4e:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    6c50:	1dfb      	adds	r3, r7, #7
    6c52:	781a      	ldrb	r2, [r3, #0]
    6c54:	493b      	ldr	r1, [pc, #236]	; (6d44 <udi_cdc_multi_putc+0x10c>)
    6c56:	4479      	add	r1, pc
    6c58:	0013      	movs	r3, r2
    6c5a:	00db      	lsls	r3, r3, #3
    6c5c:	1a9b      	subs	r3, r3, r2
    6c5e:	18cb      	adds	r3, r1, r3
    6c60:	3306      	adds	r3, #6
    6c62:	781a      	ldrb	r2, [r3, #0]
    6c64:	2317      	movs	r3, #23
    6c66:	18fb      	adds	r3, r7, r3
    6c68:	3a09      	subs	r2, #9
    6c6a:	4251      	negs	r1, r2
    6c6c:	414a      	adcs	r2, r1
    6c6e:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    6c70:	1dfb      	adds	r3, r7, #7
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	0018      	movs	r0, r3
    6c76:	4b34      	ldr	r3, [pc, #208]	; (6d48 <udi_cdc_multi_putc+0x110>)
    6c78:	58e3      	ldr	r3, [r4, r3]
    6c7a:	4798      	blx	r3
    6c7c:	0003      	movs	r3, r0
    6c7e:	001a      	movs	r2, r3
    6c80:	2301      	movs	r3, #1
    6c82:	4053      	eors	r3, r2
    6c84:	b2db      	uxtb	r3, r3
    6c86:	2b00      	cmp	r3, #0
    6c88:	d011      	beq.n	6cae <udi_cdc_multi_putc+0x76>
		if (!udi_cdc_data_running) {
    6c8a:	4b30      	ldr	r3, [pc, #192]	; (6d4c <udi_cdc_multi_putc+0x114>)
    6c8c:	447b      	add	r3, pc
    6c8e:	781b      	ldrb	r3, [r3, #0]
    6c90:	b2db      	uxtb	r3, r3
    6c92:	2201      	movs	r2, #1
    6c94:	4053      	eors	r3, r2
    6c96:	b2db      	uxtb	r3, r3
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d001      	beq.n	6ca0 <udi_cdc_multi_putc+0x68>
			return false;
    6c9c:	2300      	movs	r3, #0
    6c9e:	e04a      	b.n	6d36 <udi_cdc_multi_putc+0xfe>
    6ca0:	2317      	movs	r3, #23
    6ca2:	18fb      	adds	r3, r7, r3
    6ca4:	2217      	movs	r2, #23
    6ca6:	18ba      	adds	r2, r7, r2
    6ca8:	7812      	ldrb	r2, [r2, #0]
    6caa:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    6cac:	e7e0      	b.n	6c70 <udi_cdc_multi_putc+0x38>
	}

	// Write value
	flags = cpu_irq_save();
    6cae:	4b28      	ldr	r3, [pc, #160]	; (6d50 <udi_cdc_multi_putc+0x118>)
    6cb0:	447b      	add	r3, pc
    6cb2:	4798      	blx	r3
    6cb4:	0003      	movs	r3, r0
    6cb6:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    6cb8:	1dfb      	adds	r3, r7, #7
    6cba:	781a      	ldrb	r2, [r3, #0]
    6cbc:	230f      	movs	r3, #15
    6cbe:	18fb      	adds	r3, r7, r3
    6cc0:	4924      	ldr	r1, [pc, #144]	; (6d54 <udi_cdc_multi_putc+0x11c>)
    6cc2:	4479      	add	r1, pc
    6cc4:	5c8a      	ldrb	r2, [r1, r2]
    6cc6:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    6cc8:	1dfb      	adds	r3, r7, #7
    6cca:	781d      	ldrb	r5, [r3, #0]
    6ccc:	230f      	movs	r3, #15
    6cce:	18fb      	adds	r3, r7, r3
    6cd0:	7818      	ldrb	r0, [r3, #0]
    6cd2:	1dfb      	adds	r3, r7, #7
    6cd4:	781a      	ldrb	r2, [r3, #0]
    6cd6:	230f      	movs	r3, #15
    6cd8:	18fb      	adds	r3, r7, r3
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	491e      	ldr	r1, [pc, #120]	; (6d58 <udi_cdc_multi_putc+0x120>)
    6cde:	4479      	add	r1, pc
    6ce0:	0056      	lsls	r6, r2, #1
    6ce2:	18f6      	adds	r6, r6, r3
    6ce4:	0076      	lsls	r6, r6, #1
    6ce6:	5a71      	ldrh	r1, [r6, r1]
    6ce8:	1c4e      	adds	r6, r1, #1
    6cea:	b2b6      	uxth	r6, r6
    6cec:	46b4      	mov	ip, r6
    6cee:	4e1b      	ldr	r6, [pc, #108]	; (6d5c <udi_cdc_multi_putc+0x124>)
    6cf0:	447e      	add	r6, pc
    6cf2:	0052      	lsls	r2, r2, #1
    6cf4:	18d3      	adds	r3, r2, r3
    6cf6:	005b      	lsls	r3, r3, #1
    6cf8:	4662      	mov	r2, ip
    6cfa:	539a      	strh	r2, [r3, r6]
    6cfc:	683b      	ldr	r3, [r7, #0]
    6cfe:	b2de      	uxtb	r6, r3
    6d00:	4a17      	ldr	r2, [pc, #92]	; (6d60 <udi_cdc_multi_putc+0x128>)
    6d02:	447a      	add	r2, pc
    6d04:	006b      	lsls	r3, r5, #1
    6d06:	181b      	adds	r3, r3, r0
    6d08:	019b      	lsls	r3, r3, #6
    6d0a:	18d3      	adds	r3, r2, r3
    6d0c:	1c32      	adds	r2, r6, #0
    6d0e:	545a      	strb	r2, [r3, r1]
	cpu_irq_restore(flags);
    6d10:	693b      	ldr	r3, [r7, #16]
    6d12:	0018      	movs	r0, r3
    6d14:	4b13      	ldr	r3, [pc, #76]	; (6d64 <udi_cdc_multi_putc+0x12c>)
    6d16:	447b      	add	r3, pc
    6d18:	4798      	blx	r3

	if (b_databit_9) {
    6d1a:	2317      	movs	r3, #23
    6d1c:	18fb      	adds	r3, r7, r3
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d007      	beq.n	6d34 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    6d24:	2317      	movs	r3, #23
    6d26:	18fb      	adds	r3, r7, r3
    6d28:	2200      	movs	r2, #0
    6d2a:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    6d2c:	683b      	ldr	r3, [r7, #0]
    6d2e:	121b      	asrs	r3, r3, #8
    6d30:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    6d32:	e79d      	b.n	6c70 <udi_cdc_multi_putc+0x38>
	}
	return true;
    6d34:	2301      	movs	r3, #1
}
    6d36:	0018      	movs	r0, r3
    6d38:	46bd      	mov	sp, r7
    6d3a:	b007      	add	sp, #28
    6d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	0000b218 	.word	0x0000b218
    6d44:	1fff977e 	.word	0x1fff977e
    6d48:	000002dc 	.word	0x000002dc
    6d4c:	1fff9760 	.word	0x1fff9760
    6d50:	fffff139 	.word	0xfffff139
    6d54:	1fff9842 	.word	0x1fff9842
    6d58:	1fff9822 	.word	0x1fff9822
    6d5c:	1fff9810 	.word	0x1fff9810
    6d60:	1fff977e 	.word	0x1fff977e
    6d64:	fffff127 	.word	0xfffff127

00006d68 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b082      	sub	sp, #8
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	6078      	str	r0, [r7, #4]
    6d70:	4a06      	ldr	r2, [pc, #24]	; (6d8c <udi_cdc_putc+0x24>)
    6d72:	447a      	add	r2, pc
	return udi_cdc_multi_putc(0, value);
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	0019      	movs	r1, r3
    6d78:	2000      	movs	r0, #0
    6d7a:	4b05      	ldr	r3, [pc, #20]	; (6d90 <udi_cdc_putc+0x28>)
    6d7c:	58d3      	ldr	r3, [r2, r3]
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
}
    6d82:	0018      	movs	r0, r3
    6d84:	46bd      	mov	sp, r7
    6d86:	b002      	add	sp, #8
    6d88:	bd80      	pop	{r7, pc}
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	0000b0ee 	.word	0x0000b0ee
    6d90:	00000234 	.word	0x00000234

00006d94 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    6d94:	b580      	push	{r7, lr}
    6d96:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    6d98:	4b02      	ldr	r3, [pc, #8]	; (6da4 <udc_get_string_serial_name+0x10>)
    6d9a:	447b      	add	r3, pc
	}
    6d9c:	0018      	movs	r0, r3
    6d9e:	46bd      	mov	sp, r7
    6da0:	bd80      	pop	{r7, pc}
    6da2:	46c0      	nop			; (mov r8, r8)
    6da4:	0000afb6 	.word	0x0000afb6

00006da8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    6dac:	4b08      	ldr	r3, [pc, #32]	; (6dd0 <udc_get_eof_conf+0x28>)
    6dae:	447b      	add	r3, pc
    6db0:	681b      	ldr	r3, [r3, #0]
    6db2:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    6db4:	4b07      	ldr	r3, [pc, #28]	; (6dd4 <udc_get_eof_conf+0x2c>)
    6db6:	447b      	add	r3, pc
    6db8:	681b      	ldr	r3, [r3, #0]
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	7899      	ldrb	r1, [r3, #2]
    6dbe:	78db      	ldrb	r3, [r3, #3]
    6dc0:	021b      	lsls	r3, r3, #8
    6dc2:	430b      	orrs	r3, r1
    6dc4:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    6dc6:	18d3      	adds	r3, r2, r3
}
    6dc8:	0018      	movs	r0, r3
    6dca:	46bd      	mov	sp, r7
    6dcc:	bd80      	pop	{r7, pc}
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	1fff9772 	.word	0x1fff9772
    6dd4:	1fff976a 	.word	0x1fff976a

00006dd8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b084      	sub	sp, #16
    6ddc:	af00      	add	r7, sp, #0
    6dde:	6078      	str	r0, [r7, #4]
    6de0:	000a      	movs	r2, r1
    6de2:	1cfb      	adds	r3, r7, #3
    6de4:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    6de6:	4b14      	ldr	r3, [pc, #80]	; (6e38 <udc_next_desc_in_iface+0x60>)
    6de8:	447b      	add	r3, pc
    6dea:	4798      	blx	r3
    6dec:	0003      	movs	r3, r0
    6dee:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    6df0:	687b      	ldr	r3, [r7, #4]
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	189b      	adds	r3, r3, r2
    6dfa:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    6dfc:	e011      	b.n	6e22 <udc_next_desc_in_iface+0x4a>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    6dfe:	687b      	ldr	r3, [r7, #4]
    6e00:	785b      	ldrb	r3, [r3, #1]
    6e02:	2b04      	cmp	r3, #4
    6e04:	d012      	beq.n	6e2c <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    6e06:	687b      	ldr	r3, [r7, #4]
    6e08:	785b      	ldrb	r3, [r3, #1]
    6e0a:	1cfa      	adds	r2, r7, #3
    6e0c:	7812      	ldrb	r2, [r2, #0]
    6e0e:	429a      	cmp	r2, r3
    6e10:	d101      	bne.n	6e16 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	e00c      	b.n	6e30 <udc_next_desc_in_iface+0x58>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    6e16:	687b      	ldr	r3, [r7, #4]
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    6e1c:	687b      	ldr	r3, [r7, #4]
    6e1e:	189b      	adds	r3, r3, r2
    6e20:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
    6e22:	68fa      	ldr	r2, [r7, #12]
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	429a      	cmp	r2, r3
    6e28:	d8e9      	bhi.n	6dfe <udc_next_desc_in_iface+0x26>
    6e2a:	e000      	b.n	6e2e <udc_next_desc_in_iface+0x56>
			break; // End of global interface descriptor
    6e2c:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
    6e2e:	2300      	movs	r3, #0
}
    6e30:	0018      	movs	r0, r3
    6e32:	46bd      	mov	sp, r7
    6e34:	b004      	add	sp, #16
    6e36:	bd80      	pop	{r7, pc}
    6e38:	ffffffbd 	.word	0xffffffbd

00006e3c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    6e3c:	b580      	push	{r7, lr}
    6e3e:	b084      	sub	sp, #16
    6e40:	af00      	add	r7, sp, #0
    6e42:	0002      	movs	r2, r0
    6e44:	1dfb      	adds	r3, r7, #7
    6e46:	701a      	strb	r2, [r3, #0]
    6e48:	1dbb      	adds	r3, r7, #6
    6e4a:	1c0a      	adds	r2, r1, #0
    6e4c:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    6e4e:	4b26      	ldr	r3, [pc, #152]	; (6ee8 <udc_update_iface_desc+0xac>)
    6e50:	447b      	add	r3, pc
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	2b00      	cmp	r3, #0
    6e56:	d101      	bne.n	6e5c <udc_update_iface_desc+0x20>
		return false;
    6e58:	2300      	movs	r3, #0
    6e5a:	e041      	b.n	6ee0 <udc_update_iface_desc+0xa4>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6e5c:	4b23      	ldr	r3, [pc, #140]	; (6eec <udc_update_iface_desc+0xb0>)
    6e5e:	447b      	add	r3, pc
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	681b      	ldr	r3, [r3, #0]
    6e64:	791b      	ldrb	r3, [r3, #4]
    6e66:	1dfa      	adds	r2, r7, #7
    6e68:	7812      	ldrb	r2, [r2, #0]
    6e6a:	429a      	cmp	r2, r3
    6e6c:	d301      	bcc.n	6e72 <udc_update_iface_desc+0x36>
		return false;
    6e6e:	2300      	movs	r3, #0
    6e70:	e036      	b.n	6ee0 <udc_update_iface_desc+0xa4>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    6e72:	4b1f      	ldr	r3, [pc, #124]	; (6ef0 <udc_update_iface_desc+0xb4>)
    6e74:	447b      	add	r3, pc
    6e76:	681b      	ldr	r3, [r3, #0]
    6e78:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    6e7a:	4b1e      	ldr	r3, [pc, #120]	; (6ef4 <udc_update_iface_desc+0xb8>)
    6e7c:	447b      	add	r3, pc
    6e7e:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    6e80:	4b1d      	ldr	r3, [pc, #116]	; (6ef8 <udc_update_iface_desc+0xbc>)
    6e82:	447b      	add	r3, pc
    6e84:	4798      	blx	r3
    6e86:	0003      	movs	r3, r0
    6e88:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    6e8a:	e022      	b.n	6ed2 <udc_update_iface_desc+0x96>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    6e8c:	4b1b      	ldr	r3, [pc, #108]	; (6efc <udc_update_iface_desc+0xc0>)
    6e8e:	447b      	add	r3, pc
    6e90:	681b      	ldr	r3, [r3, #0]
    6e92:	785b      	ldrb	r3, [r3, #1]
    6e94:	2b04      	cmp	r3, #4
    6e96:	d111      	bne.n	6ebc <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    6e98:	4b19      	ldr	r3, [pc, #100]	; (6f00 <udc_update_iface_desc+0xc4>)
    6e9a:	447b      	add	r3, pc
    6e9c:	681b      	ldr	r3, [r3, #0]
    6e9e:	789b      	ldrb	r3, [r3, #2]
    6ea0:	1dfa      	adds	r2, r7, #7
    6ea2:	7812      	ldrb	r2, [r2, #0]
    6ea4:	429a      	cmp	r2, r3
    6ea6:	d109      	bne.n	6ebc <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    6ea8:	4b16      	ldr	r3, [pc, #88]	; (6f04 <udc_update_iface_desc+0xc8>)
    6eaa:	447b      	add	r3, pc
    6eac:	681b      	ldr	r3, [r3, #0]
    6eae:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    6eb0:	1dba      	adds	r2, r7, #6
    6eb2:	7812      	ldrb	r2, [r2, #0]
    6eb4:	429a      	cmp	r2, r3
    6eb6:	d101      	bne.n	6ebc <udc_update_iface_desc+0x80>
				return true; // Interface found
    6eb8:	2301      	movs	r3, #1
    6eba:	e011      	b.n	6ee0 <udc_update_iface_desc+0xa4>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    6ebc:	4b12      	ldr	r3, [pc, #72]	; (6f08 <udc_update_iface_desc+0xcc>)
    6ebe:	447b      	add	r3, pc
    6ec0:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    6ec2:	4b12      	ldr	r3, [pc, #72]	; (6f0c <udc_update_iface_desc+0xd0>)
    6ec4:	447b      	add	r3, pc
    6ec6:	681b      	ldr	r3, [r3, #0]
    6ec8:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    6eca:	18d2      	adds	r2, r2, r3
    6ecc:	4b10      	ldr	r3, [pc, #64]	; (6f10 <udc_update_iface_desc+0xd4>)
    6ece:	447b      	add	r3, pc
    6ed0:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    6ed2:	4b10      	ldr	r3, [pc, #64]	; (6f14 <udc_update_iface_desc+0xd8>)
    6ed4:	447b      	add	r3, pc
    6ed6:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
    6ed8:	68fa      	ldr	r2, [r7, #12]
    6eda:	429a      	cmp	r2, r3
    6edc:	d8d6      	bhi.n	6e8c <udc_update_iface_desc+0x50>
	}
	return false; // Interface not found
    6ede:	2300      	movs	r3, #0
}
    6ee0:	0018      	movs	r0, r3
    6ee2:	46bd      	mov	sp, r7
    6ee4:	b004      	add	sp, #16
    6ee6:	bd80      	pop	{r7, pc}
    6ee8:	1fff96cc 	.word	0x1fff96cc
    6eec:	1fff96c2 	.word	0x1fff96c2
    6ef0:	1fff96ac 	.word	0x1fff96ac
    6ef4:	1fff96a8 	.word	0x1fff96a8
    6ef8:	ffffff23 	.word	0xffffff23
    6efc:	1fff9696 	.word	0x1fff9696
    6f00:	1fff968a 	.word	0x1fff968a
    6f04:	1fff967a 	.word	0x1fff967a
    6f08:	1fff9666 	.word	0x1fff9666
    6f0c:	1fff9660 	.word	0x1fff9660
    6f10:	1fff9656 	.word	0x1fff9656
    6f14:	1fff9650 	.word	0x1fff9650

00006f18 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    6f18:	b590      	push	{r4, r7, lr}
    6f1a:	b085      	sub	sp, #20
    6f1c:	af00      	add	r7, sp, #0
    6f1e:	0002      	movs	r2, r0
    6f20:	1dfb      	adds	r3, r7, #7
    6f22:	701a      	strb	r2, [r3, #0]
    6f24:	4c27      	ldr	r4, [pc, #156]	; (6fc4 <udc_iface_disable+0xac>)
    6f26:	447c      	add	r4, pc
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    6f28:	1dfb      	adds	r3, r7, #7
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	2100      	movs	r1, #0
    6f2e:	0018      	movs	r0, r3
    6f30:	4b25      	ldr	r3, [pc, #148]	; (6fc8 <udc_iface_disable+0xb0>)
    6f32:	447b      	add	r3, pc
    6f34:	4798      	blx	r3
    6f36:	0003      	movs	r3, r0
    6f38:	001a      	movs	r2, r3
    6f3a:	2301      	movs	r3, #1
    6f3c:	4053      	eors	r3, r2
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	2b00      	cmp	r3, #0
    6f42:	d001      	beq.n	6f48 <udc_iface_disable+0x30>
		return false;
    6f44:	2300      	movs	r3, #0
    6f46:	e039      	b.n	6fbc <udc_iface_disable+0xa4>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    6f48:	4b20      	ldr	r3, [pc, #128]	; (6fcc <udc_iface_disable+0xb4>)
    6f4a:	447b      	add	r3, pc
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	685a      	ldr	r2, [r3, #4]
    6f50:	1dfb      	adds	r3, r7, #7
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	009b      	lsls	r3, r3, #2
    6f56:	18d3      	adds	r3, r2, r3
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    6f5c:	68bb      	ldr	r3, [r7, #8]
    6f5e:	68db      	ldr	r3, [r3, #12]
    6f60:	4798      	blx	r3
    6f62:	0003      	movs	r3, r0
    6f64:	001a      	movs	r2, r3
    6f66:	1dfb      	adds	r3, r7, #7
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	0011      	movs	r1, r2
    6f6c:	0018      	movs	r0, r3
    6f6e:	4b18      	ldr	r3, [pc, #96]	; (6fd0 <udc_iface_disable+0xb8>)
    6f70:	447b      	add	r3, pc
    6f72:	4798      	blx	r3
    6f74:	0003      	movs	r3, r0
    6f76:	001a      	movs	r2, r3
    6f78:	2301      	movs	r3, #1
    6f7a:	4053      	eors	r3, r2
    6f7c:	b2db      	uxtb	r3, r3
    6f7e:	2b00      	cmp	r3, #0
    6f80:	d001      	beq.n	6f86 <udc_iface_disable+0x6e>
		return false;
    6f82:	2300      	movs	r3, #0
    6f84:	e01a      	b.n	6fbc <udc_iface_disable+0xa4>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    6f86:	4b13      	ldr	r3, [pc, #76]	; (6fd4 <udc_iface_disable+0xbc>)
    6f88:	447b      	add	r3, pc
    6f8a:	681b      	ldr	r3, [r3, #0]
    6f8c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    6f8e:	68fb      	ldr	r3, [r7, #12]
    6f90:	2105      	movs	r1, #5
    6f92:	0018      	movs	r0, r3
    6f94:	4b10      	ldr	r3, [pc, #64]	; (6fd8 <udc_iface_disable+0xc0>)
    6f96:	447b      	add	r3, pc
    6f98:	4798      	blx	r3
    6f9a:	0003      	movs	r3, r0
    6f9c:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    6f9e:	68fb      	ldr	r3, [r7, #12]
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d006      	beq.n	6fb2 <udc_iface_disable+0x9a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    6fa4:	68fb      	ldr	r3, [r7, #12]
    6fa6:	789b      	ldrb	r3, [r3, #2]
    6fa8:	0018      	movs	r0, r3
    6faa:	4b0c      	ldr	r3, [pc, #48]	; (6fdc <udc_iface_disable+0xc4>)
    6fac:	58e3      	ldr	r3, [r4, r3]
    6fae:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    6fb0:	e7ed      	b.n	6f8e <udc_iface_disable+0x76>
				break;
    6fb2:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    6fb4:	68bb      	ldr	r3, [r7, #8]
    6fb6:	685b      	ldr	r3, [r3, #4]
    6fb8:	4798      	blx	r3
	return true;
    6fba:	2301      	movs	r3, #1
}
    6fbc:	0018      	movs	r0, r3
    6fbe:	46bd      	mov	sp, r7
    6fc0:	b005      	add	sp, #20
    6fc2:	bd90      	pop	{r4, r7, pc}
    6fc4:	0000af3a 	.word	0x0000af3a
    6fc8:	ffffff07 	.word	0xffffff07
    6fcc:	1fff95d6 	.word	0x1fff95d6
    6fd0:	fffffec9 	.word	0xfffffec9
    6fd4:	1fff959c 	.word	0x1fff959c
    6fd8:	fffffe3f 	.word	0xfffffe3f
    6fdc:	0000018c 	.word	0x0000018c

00006fe0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    6fe0:	b590      	push	{r4, r7, lr}
    6fe2:	b085      	sub	sp, #20
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	0002      	movs	r2, r0
    6fe8:	1dfb      	adds	r3, r7, #7
    6fea:	701a      	strb	r2, [r3, #0]
    6fec:	1dbb      	adds	r3, r7, #6
    6fee:	1c0a      	adds	r2, r1, #0
    6ff0:	701a      	strb	r2, [r3, #0]
    6ff2:	4c25      	ldr	r4, [pc, #148]	; (7088 <udc_iface_enable+0xa8>)
    6ff4:	447c      	add	r4, pc
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    6ff6:	1dbb      	adds	r3, r7, #6
    6ff8:	781a      	ldrb	r2, [r3, #0]
    6ffa:	1dfb      	adds	r3, r7, #7
    6ffc:	781b      	ldrb	r3, [r3, #0]
    6ffe:	0011      	movs	r1, r2
    7000:	0018      	movs	r0, r3
    7002:	4b22      	ldr	r3, [pc, #136]	; (708c <udc_iface_enable+0xac>)
    7004:	447b      	add	r3, pc
    7006:	4798      	blx	r3
    7008:	0003      	movs	r3, r0
    700a:	001a      	movs	r2, r3
    700c:	2301      	movs	r3, #1
    700e:	4053      	eors	r3, r2
    7010:	b2db      	uxtb	r3, r3
    7012:	2b00      	cmp	r3, #0
    7014:	d001      	beq.n	701a <udc_iface_enable+0x3a>
		return false;
    7016:	2300      	movs	r3, #0
    7018:	e032      	b.n	7080 <udc_iface_enable+0xa0>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    701a:	4b1d      	ldr	r3, [pc, #116]	; (7090 <udc_iface_enable+0xb0>)
    701c:	447b      	add	r3, pc
    701e:	681b      	ldr	r3, [r3, #0]
    7020:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    7022:	68fb      	ldr	r3, [r7, #12]
    7024:	2105      	movs	r1, #5
    7026:	0018      	movs	r0, r3
    7028:	4b1a      	ldr	r3, [pc, #104]	; (7094 <udc_iface_enable+0xb4>)
    702a:	447b      	add	r3, pc
    702c:	4798      	blx	r3
    702e:	0003      	movs	r3, r0
    7030:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    7032:	68fb      	ldr	r3, [r7, #12]
    7034:	2b00      	cmp	r3, #0
    7036:	d016      	beq.n	7066 <udc_iface_enable+0x86>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    7038:	68fb      	ldr	r3, [r7, #12]
    703a:	7898      	ldrb	r0, [r3, #2]
    703c:	68fb      	ldr	r3, [r7, #12]
    703e:	78d9      	ldrb	r1, [r3, #3]
    7040:	68fb      	ldr	r3, [r7, #12]
    7042:	791a      	ldrb	r2, [r3, #4]
    7044:	795b      	ldrb	r3, [r3, #5]
    7046:	021b      	lsls	r3, r3, #8
    7048:	4313      	orrs	r3, r2
    704a:	b29b      	uxth	r3, r3
    704c:	001a      	movs	r2, r3
    704e:	4b12      	ldr	r3, [pc, #72]	; (7098 <udc_iface_enable+0xb8>)
    7050:	58e3      	ldr	r3, [r4, r3]
    7052:	4798      	blx	r3
    7054:	0003      	movs	r3, r0
    7056:	001a      	movs	r2, r3
    7058:	2301      	movs	r3, #1
    705a:	4053      	eors	r3, r2
    705c:	b2db      	uxtb	r3, r3
    705e:	2b00      	cmp	r3, #0
    7060:	d0df      	beq.n	7022 <udc_iface_enable+0x42>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    7062:	2300      	movs	r3, #0
    7064:	e00c      	b.n	7080 <udc_iface_enable+0xa0>
			break;
    7066:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    7068:	4b0c      	ldr	r3, [pc, #48]	; (709c <udc_iface_enable+0xbc>)
    706a:	447b      	add	r3, pc
    706c:	681b      	ldr	r3, [r3, #0]
    706e:	685a      	ldr	r2, [r3, #4]
    7070:	1dfb      	adds	r3, r7, #7
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	009b      	lsls	r3, r3, #2
    7076:	18d3      	adds	r3, r2, r3
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	4798      	blx	r3
    707e:	0003      	movs	r3, r0
}
    7080:	0018      	movs	r0, r3
    7082:	46bd      	mov	sp, r7
    7084:	b005      	add	sp, #20
    7086:	bd90      	pop	{r4, r7, pc}
    7088:	0000ae6c 	.word	0x0000ae6c
    708c:	fffffe35 	.word	0xfffffe35
    7090:	1fff9508 	.word	0x1fff9508
    7094:	fffffdab 	.word	0xfffffdab
    7098:	000001ec 	.word	0x000001ec
    709c:	1fff94b6 	.word	0x1fff94b6

000070a0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    70a0:	b580      	push	{r7, lr}
    70a2:	af00      	add	r7, sp, #0
    70a4:	4a03      	ldr	r2, [pc, #12]	; (70b4 <udc_start+0x14>)
    70a6:	447a      	add	r2, pc
	udd_enable();
    70a8:	4b03      	ldr	r3, [pc, #12]	; (70b8 <udc_start+0x18>)
    70aa:	58d3      	ldr	r3, [r2, r3]
    70ac:	4798      	blx	r3
}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	46bd      	mov	sp, r7
    70b2:	bd80      	pop	{r7, pc}
    70b4:	0000adba 	.word	0x0000adba
    70b8:	0000019c 	.word	0x0000019c

000070bc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    70c2:	4b14      	ldr	r3, [pc, #80]	; (7114 <udc_reset+0x58>)
    70c4:	447b      	add	r3, pc
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	2b00      	cmp	r3, #0
    70ca:	d017      	beq.n	70fc <udc_reset+0x40>
		for (iface_num = 0;
    70cc:	1dfb      	adds	r3, r7, #7
    70ce:	2200      	movs	r2, #0
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	e00a      	b.n	70ea <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    70d4:	1dfb      	adds	r3, r7, #7
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	0018      	movs	r0, r3
    70da:	4b0f      	ldr	r3, [pc, #60]	; (7118 <udc_reset+0x5c>)
    70dc:	447b      	add	r3, pc
    70de:	4798      	blx	r3
				iface_num++) {
    70e0:	1dfb      	adds	r3, r7, #7
    70e2:	781a      	ldrb	r2, [r3, #0]
    70e4:	1dfb      	adds	r3, r7, #7
    70e6:	3201      	adds	r2, #1
    70e8:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    70ea:	4b0c      	ldr	r3, [pc, #48]	; (711c <udc_reset+0x60>)
    70ec:	447b      	add	r3, pc
    70ee:	681b      	ldr	r3, [r3, #0]
    70f0:	681b      	ldr	r3, [r3, #0]
    70f2:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    70f4:	1dfa      	adds	r2, r7, #7
    70f6:	7812      	ldrb	r2, [r2, #0]
    70f8:	429a      	cmp	r2, r3
    70fa:	d3eb      	bcc.n	70d4 <udc_reset+0x18>
		}
	}
	udc_num_configuration = 0;
    70fc:	4b08      	ldr	r3, [pc, #32]	; (7120 <udc_reset+0x64>)
    70fe:	447b      	add	r3, pc
    7100:	2200      	movs	r2, #0
    7102:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    7104:	4b07      	ldr	r3, [pc, #28]	; (7124 <udc_reset+0x68>)
    7106:	447b      	add	r3, pc
    7108:	2201      	movs	r2, #1
    710a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    710c:	46c0      	nop			; (mov r8, r8)
    710e:	46bd      	mov	sp, r7
    7110:	b002      	add	sp, #8
    7112:	bd80      	pop	{r7, pc}
    7114:	1fff9458 	.word	0x1fff9458
    7118:	fffffe39 	.word	0xfffffe39
    711c:	1fff9434 	.word	0x1fff9434
    7120:	1fff941e 	.word	0x1fff941e
    7124:	1fff940e 	.word	0x1fff940e

00007128 <udc_sof_notify>:

void udc_sof_notify(void)
{
    7128:	b580      	push	{r7, lr}
    712a:	b082      	sub	sp, #8
    712c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    712e:	4b19      	ldr	r3, [pc, #100]	; (7194 <udc_sof_notify+0x6c>)
    7130:	447b      	add	r3, pc
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	2b00      	cmp	r3, #0
    7136:	d028      	beq.n	718a <udc_sof_notify+0x62>
		for (iface_num = 0;
    7138:	1dfb      	adds	r3, r7, #7
    713a:	2200      	movs	r2, #0
    713c:	701a      	strb	r2, [r3, #0]
    713e:	e01b      	b.n	7178 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    7140:	4b15      	ldr	r3, [pc, #84]	; (7198 <udc_sof_notify+0x70>)
    7142:	447b      	add	r3, pc
    7144:	681b      	ldr	r3, [r3, #0]
    7146:	685a      	ldr	r2, [r3, #4]
    7148:	1dfb      	adds	r3, r7, #7
    714a:	781b      	ldrb	r3, [r3, #0]
    714c:	009b      	lsls	r3, r3, #2
    714e:	18d3      	adds	r3, r2, r3
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	691b      	ldr	r3, [r3, #16]
    7154:	2b00      	cmp	r3, #0
    7156:	d00a      	beq.n	716e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    7158:	4b10      	ldr	r3, [pc, #64]	; (719c <udc_sof_notify+0x74>)
    715a:	447b      	add	r3, pc
    715c:	681b      	ldr	r3, [r3, #0]
    715e:	685a      	ldr	r2, [r3, #4]
    7160:	1dfb      	adds	r3, r7, #7
    7162:	781b      	ldrb	r3, [r3, #0]
    7164:	009b      	lsls	r3, r3, #2
    7166:	18d3      	adds	r3, r2, r3
    7168:	681b      	ldr	r3, [r3, #0]
    716a:	691b      	ldr	r3, [r3, #16]
    716c:	4798      	blx	r3
				iface_num++) {
    716e:	1dfb      	adds	r3, r7, #7
    7170:	781a      	ldrb	r2, [r3, #0]
    7172:	1dfb      	adds	r3, r7, #7
    7174:	3201      	adds	r2, #1
    7176:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7178:	4b09      	ldr	r3, [pc, #36]	; (71a0 <udc_sof_notify+0x78>)
    717a:	447b      	add	r3, pc
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    7182:	1dfa      	adds	r2, r7, #7
    7184:	7812      	ldrb	r2, [r2, #0]
    7186:	429a      	cmp	r2, r3
    7188:	d3da      	bcc.n	7140 <udc_sof_notify+0x18>
			}
		}
	}
}
    718a:	46c0      	nop			; (mov r8, r8)
    718c:	46bd      	mov	sp, r7
    718e:	b002      	add	sp, #8
    7190:	bd80      	pop	{r7, pc}
    7192:	46c0      	nop			; (mov r8, r8)
    7194:	1fff93ec 	.word	0x1fff93ec
    7198:	1fff93de 	.word	0x1fff93de
    719c:	1fff93c6 	.word	0x1fff93c6
    71a0:	1fff93a6 	.word	0x1fff93a6

000071a4 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    71a4:	b580      	push	{r7, lr}
    71a6:	af00      	add	r7, sp, #0
    71a8:	4b09      	ldr	r3, [pc, #36]	; (71d0 <udc_req_std_dev_get_status+0x2c>)
    71aa:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    71ac:	4a09      	ldr	r2, [pc, #36]	; (71d4 <udc_req_std_dev_get_status+0x30>)
    71ae:	589a      	ldr	r2, [r3, r2]
    71b0:	88d2      	ldrh	r2, [r2, #6]
    71b2:	2a02      	cmp	r2, #2
    71b4:	d001      	beq.n	71ba <udc_req_std_dev_get_status+0x16>
		return false;
    71b6:	2300      	movs	r3, #0
    71b8:	e007      	b.n	71ca <udc_req_std_dev_get_status+0x26>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    71ba:	4a07      	ldr	r2, [pc, #28]	; (71d8 <udc_req_std_dev_get_status+0x34>)
    71bc:	447a      	add	r2, pc
    71be:	2102      	movs	r1, #2
    71c0:	0010      	movs	r0, r2
    71c2:	4a06      	ldr	r2, [pc, #24]	; (71dc <udc_req_std_dev_get_status+0x38>)
    71c4:	589b      	ldr	r3, [r3, r2]
    71c6:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    71c8:	2301      	movs	r3, #1
}
    71ca:	0018      	movs	r0, r3
    71cc:	46bd      	mov	sp, r7
    71ce:	bd80      	pop	{r7, pc}
    71d0:	0000acb6 	.word	0x0000acb6
    71d4:	000001e8 	.word	0x000001e8
    71d8:	1fff9358 	.word	0x1fff9358
    71dc:	0000005c 	.word	0x0000005c

000071e0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    71e0:	b5b0      	push	{r4, r5, r7, lr}
    71e2:	af00      	add	r7, sp, #0
    71e4:	4c10      	ldr	r4, [pc, #64]	; (7228 <udc_req_std_ep_get_status+0x48>)
    71e6:	447c      	add	r4, pc
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    71e8:	4b10      	ldr	r3, [pc, #64]	; (722c <udc_req_std_ep_get_status+0x4c>)
    71ea:	58e3      	ldr	r3, [r4, r3]
    71ec:	88db      	ldrh	r3, [r3, #6]
    71ee:	2b02      	cmp	r3, #2
    71f0:	d001      	beq.n	71f6 <udc_req_std_ep_get_status+0x16>
		return false;
    71f2:	2300      	movs	r3, #0
    71f4:	e014      	b.n	7220 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    71f6:	4b0d      	ldr	r3, [pc, #52]	; (722c <udc_req_std_ep_get_status+0x4c>)
    71f8:	58e3      	ldr	r3, [r4, r3]
    71fa:	889b      	ldrh	r3, [r3, #4]
    71fc:	b2db      	uxtb	r3, r3
    71fe:	0018      	movs	r0, r3
    7200:	4b0b      	ldr	r3, [pc, #44]	; (7230 <udc_req_std_ep_get_status+0x50>)
    7202:	58e3      	ldr	r3, [r4, r3]
    7204:	4798      	blx	r3
    7206:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    7208:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    720a:	4b0a      	ldr	r3, [pc, #40]	; (7234 <udc_req_std_ep_get_status+0x54>)
    720c:	447b      	add	r3, pc
    720e:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    7210:	4b09      	ldr	r3, [pc, #36]	; (7238 <udc_req_std_ep_get_status+0x58>)
    7212:	447b      	add	r3, pc
    7214:	2102      	movs	r1, #2
    7216:	0018      	movs	r0, r3
    7218:	4b08      	ldr	r3, [pc, #32]	; (723c <udc_req_std_ep_get_status+0x5c>)
    721a:	58e3      	ldr	r3, [r4, r3]
    721c:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    721e:	2301      	movs	r3, #1
}
    7220:	0018      	movs	r0, r3
    7222:	46bd      	mov	sp, r7
    7224:	bdb0      	pop	{r4, r5, r7, pc}
    7226:	46c0      	nop			; (mov r8, r8)
    7228:	0000ac7a 	.word	0x0000ac7a
    722c:	000001e8 	.word	0x000001e8
    7230:	000001a8 	.word	0x000001a8
    7234:	1fff931c 	.word	0x1fff931c
    7238:	1fff9316 	.word	0x1fff9316
    723c:	0000005c 	.word	0x0000005c

00007240 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    7240:	b580      	push	{r7, lr}
    7242:	af00      	add	r7, sp, #0
    7244:	4b0e      	ldr	r3, [pc, #56]	; (7280 <udc_req_std_dev_clear_feature+0x40>)
    7246:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    7248:	4a0e      	ldr	r2, [pc, #56]	; (7284 <udc_req_std_dev_clear_feature+0x44>)
    724a:	589a      	ldr	r2, [r3, r2]
    724c:	88d2      	ldrh	r2, [r2, #6]
    724e:	2a00      	cmp	r2, #0
    7250:	d001      	beq.n	7256 <udc_req_std_dev_clear_feature+0x16>
		return false;
    7252:	2300      	movs	r3, #0
    7254:	e010      	b.n	7278 <udc_req_std_dev_clear_feature+0x38>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    7256:	4a0b      	ldr	r2, [pc, #44]	; (7284 <udc_req_std_dev_clear_feature+0x44>)
    7258:	589b      	ldr	r3, [r3, r2]
    725a:	885b      	ldrh	r3, [r3, #2]
    725c:	2b01      	cmp	r3, #1
    725e:	d10a      	bne.n	7276 <udc_req_std_dev_clear_feature+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    7260:	4b09      	ldr	r3, [pc, #36]	; (7288 <udc_req_std_dev_clear_feature+0x48>)
    7262:	447b      	add	r3, pc
    7264:	881b      	ldrh	r3, [r3, #0]
    7266:	2202      	movs	r2, #2
    7268:	4393      	bics	r3, r2
    726a:	b29a      	uxth	r2, r3
    726c:	4b07      	ldr	r3, [pc, #28]	; (728c <udc_req_std_dev_clear_feature+0x4c>)
    726e:	447b      	add	r3, pc
    7270:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    7272:	2301      	movs	r3, #1
    7274:	e000      	b.n	7278 <udc_req_std_dev_clear_feature+0x38>
	}
	return false;
    7276:	2300      	movs	r3, #0
}
    7278:	0018      	movs	r0, r3
    727a:	46bd      	mov	sp, r7
    727c:	bd80      	pop	{r7, pc}
    727e:	46c0      	nop			; (mov r8, r8)
    7280:	0000ac1a 	.word	0x0000ac1a
    7284:	000001e8 	.word	0x000001e8
    7288:	1fff92b2 	.word	0x1fff92b2
    728c:	1fff92a6 	.word	0x1fff92a6

00007290 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    7290:	b580      	push	{r7, lr}
    7292:	af00      	add	r7, sp, #0
    7294:	4b0d      	ldr	r3, [pc, #52]	; (72cc <udc_req_std_ep_clear_feature+0x3c>)
    7296:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    7298:	4a0d      	ldr	r2, [pc, #52]	; (72d0 <udc_req_std_ep_clear_feature+0x40>)
    729a:	589a      	ldr	r2, [r3, r2]
    729c:	88d2      	ldrh	r2, [r2, #6]
    729e:	2a00      	cmp	r2, #0
    72a0:	d001      	beq.n	72a6 <udc_req_std_ep_clear_feature+0x16>
		return false;
    72a2:	2300      	movs	r3, #0
    72a4:	e00f      	b.n	72c6 <udc_req_std_ep_clear_feature+0x36>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    72a6:	4a0a      	ldr	r2, [pc, #40]	; (72d0 <udc_req_std_ep_clear_feature+0x40>)
    72a8:	589a      	ldr	r2, [r3, r2]
    72aa:	8852      	ldrh	r2, [r2, #2]
    72ac:	2a00      	cmp	r2, #0
    72ae:	d109      	bne.n	72c4 <udc_req_std_ep_clear_feature+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    72b0:	4a07      	ldr	r2, [pc, #28]	; (72d0 <udc_req_std_ep_clear_feature+0x40>)
    72b2:	589a      	ldr	r2, [r3, r2]
    72b4:	8892      	ldrh	r2, [r2, #4]
    72b6:	b2d2      	uxtb	r2, r2
    72b8:	0010      	movs	r0, r2
    72ba:	4a06      	ldr	r2, [pc, #24]	; (72d4 <udc_req_std_ep_clear_feature+0x44>)
    72bc:	589b      	ldr	r3, [r3, r2]
    72be:	4798      	blx	r3
    72c0:	0003      	movs	r3, r0
    72c2:	e000      	b.n	72c6 <udc_req_std_ep_clear_feature+0x36>
	}
	return false;
    72c4:	2300      	movs	r3, #0
}
    72c6:	0018      	movs	r0, r3
    72c8:	46bd      	mov	sp, r7
    72ca:	bd80      	pop	{r7, pc}
    72cc:	0000abca 	.word	0x0000abca
    72d0:	000001e8 	.word	0x000001e8
    72d4:	000001bc 	.word	0x000001bc

000072d8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    72d8:	b580      	push	{r7, lr}
    72da:	af00      	add	r7, sp, #0
    72dc:	4b0a      	ldr	r3, [pc, #40]	; (7308 <udc_req_std_dev_set_feature+0x30>)
    72de:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    72e0:	4a0a      	ldr	r2, [pc, #40]	; (730c <udc_req_std_dev_set_feature+0x34>)
    72e2:	589a      	ldr	r2, [r3, r2]
    72e4:	88d2      	ldrh	r2, [r2, #6]
    72e6:	2a00      	cmp	r2, #0
    72e8:	d001      	beq.n	72ee <udc_req_std_dev_set_feature+0x16>
		return false;
    72ea:	2300      	movs	r3, #0
    72ec:	e008      	b.n	7300 <udc_req_std_dev_set_feature+0x28>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    72ee:	4a07      	ldr	r2, [pc, #28]	; (730c <udc_req_std_dev_set_feature+0x34>)
    72f0:	589b      	ldr	r3, [r3, r2]
    72f2:	885b      	ldrh	r3, [r3, #2]
    72f4:	2b01      	cmp	r3, #1
    72f6:	d002      	beq.n	72fe <udc_req_std_dev_set_feature+0x26>
			break;
		}
		break;
#endif
	default:
		break;
    72f8:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    72fa:	2300      	movs	r3, #0
    72fc:	e000      	b.n	7300 <udc_req_std_dev_set_feature+0x28>
		return false;
    72fe:	2300      	movs	r3, #0
}
    7300:	0018      	movs	r0, r3
    7302:	46bd      	mov	sp, r7
    7304:	bd80      	pop	{r7, pc}
    7306:	46c0      	nop			; (mov r8, r8)
    7308:	0000ab82 	.word	0x0000ab82
    730c:	000001e8 	.word	0x000001e8

00007310 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    7310:	b5b0      	push	{r4, r5, r7, lr}
    7312:	af00      	add	r7, sp, #0
    7314:	4c11      	ldr	r4, [pc, #68]	; (735c <udc_req_std_ep_set_feature+0x4c>)
    7316:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength) {
    7318:	4b11      	ldr	r3, [pc, #68]	; (7360 <udc_req_std_ep_set_feature+0x50>)
    731a:	58e3      	ldr	r3, [r4, r3]
    731c:	88db      	ldrh	r3, [r3, #6]
    731e:	2b00      	cmp	r3, #0
    7320:	d001      	beq.n	7326 <udc_req_std_ep_set_feature+0x16>
		return false;
    7322:	2300      	movs	r3, #0
    7324:	e017      	b.n	7356 <udc_req_std_ep_set_feature+0x46>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    7326:	4b0e      	ldr	r3, [pc, #56]	; (7360 <udc_req_std_ep_set_feature+0x50>)
    7328:	58e3      	ldr	r3, [r4, r3]
    732a:	885b      	ldrh	r3, [r3, #2]
    732c:	2b00      	cmp	r3, #0
    732e:	d111      	bne.n	7354 <udc_req_std_ep_set_feature+0x44>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    7330:	4b0b      	ldr	r3, [pc, #44]	; (7360 <udc_req_std_ep_set_feature+0x50>)
    7332:	58e3      	ldr	r3, [r4, r3]
    7334:	889b      	ldrh	r3, [r3, #4]
    7336:	b2db      	uxtb	r3, r3
    7338:	0018      	movs	r0, r3
    733a:	4b0a      	ldr	r3, [pc, #40]	; (7364 <udc_req_std_ep_set_feature+0x54>)
    733c:	58e3      	ldr	r3, [r4, r3]
    733e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    7340:	4b07      	ldr	r3, [pc, #28]	; (7360 <udc_req_std_ep_set_feature+0x50>)
    7342:	58e3      	ldr	r3, [r4, r3]
    7344:	889b      	ldrh	r3, [r3, #4]
    7346:	b2db      	uxtb	r3, r3
    7348:	0018      	movs	r0, r3
    734a:	4b07      	ldr	r3, [pc, #28]	; (7368 <udc_req_std_ep_set_feature+0x58>)
    734c:	58e3      	ldr	r3, [r4, r3]
    734e:	4798      	blx	r3
    7350:	0003      	movs	r3, r0
    7352:	e000      	b.n	7356 <udc_req_std_ep_set_feature+0x46>
	}
	return false;
    7354:	2300      	movs	r3, #0
}
    7356:	0018      	movs	r0, r3
    7358:	46bd      	mov	sp, r7
    735a:	bdb0      	pop	{r4, r5, r7, pc}
    735c:	0000ab4a 	.word	0x0000ab4a
    7360:	000001e8 	.word	0x000001e8
    7364:	000001b8 	.word	0x000001b8
    7368:	00000128 	.word	0x00000128

0000736c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    736c:	b580      	push	{r7, lr}
    736e:	af00      	add	r7, sp, #0
    7370:	4b07      	ldr	r3, [pc, #28]	; (7390 <udc_valid_address+0x24>)
    7372:	447b      	add	r3, pc
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    7374:	4a07      	ldr	r2, [pc, #28]	; (7394 <udc_valid_address+0x28>)
    7376:	589a      	ldr	r2, [r3, r2]
    7378:	8852      	ldrh	r2, [r2, #2]
    737a:	b2d2      	uxtb	r2, r2
    737c:	217f      	movs	r1, #127	; 0x7f
    737e:	400a      	ands	r2, r1
    7380:	b2d2      	uxtb	r2, r2
    7382:	0010      	movs	r0, r2
    7384:	4a04      	ldr	r2, [pc, #16]	; (7398 <udc_valid_address+0x2c>)
    7386:	589b      	ldr	r3, [r3, r2]
    7388:	4798      	blx	r3
}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	46bd      	mov	sp, r7
    738e:	bd80      	pop	{r7, pc}
    7390:	0000aaee 	.word	0x0000aaee
    7394:	000001e8 	.word	0x000001e8
    7398:	000002d8 	.word	0x000002d8

0000739c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    739c:	b580      	push	{r7, lr}
    739e:	af00      	add	r7, sp, #0
    73a0:	4b08      	ldr	r3, [pc, #32]	; (73c4 <udc_req_std_dev_set_address+0x28>)
    73a2:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    73a4:	4a08      	ldr	r2, [pc, #32]	; (73c8 <udc_req_std_dev_set_address+0x2c>)
    73a6:	589a      	ldr	r2, [r3, r2]
    73a8:	88d2      	ldrh	r2, [r2, #6]
    73aa:	2a00      	cmp	r2, #0
    73ac:	d001      	beq.n	73b2 <udc_req_std_dev_set_address+0x16>
		return false;
    73ae:	2300      	movs	r3, #0
    73b0:	e005      	b.n	73be <udc_req_std_dev_set_address+0x22>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    73b2:	4a05      	ldr	r2, [pc, #20]	; (73c8 <udc_req_std_dev_set_address+0x2c>)
    73b4:	589b      	ldr	r3, [r3, r2]
    73b6:	4a05      	ldr	r2, [pc, #20]	; (73cc <udc_req_std_dev_set_address+0x30>)
    73b8:	447a      	add	r2, pc
    73ba:	611a      	str	r2, [r3, #16]
	return true;
    73bc:	2301      	movs	r3, #1
}
    73be:	0018      	movs	r0, r3
    73c0:	46bd      	mov	sp, r7
    73c2:	bd80      	pop	{r7, pc}
    73c4:	0000aabe 	.word	0x0000aabe
    73c8:	000001e8 	.word	0x000001e8
    73cc:	ffffffb1 	.word	0xffffffb1

000073d0 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    73d0:	b590      	push	{r4, r7, lr}
    73d2:	b085      	sub	sp, #20
    73d4:	af00      	add	r7, sp, #0
    73d6:	4c3d      	ldr	r4, [pc, #244]	; (74cc <udc_req_std_dev_get_str_desc+0xfc>)
    73d8:	447c      	add	r4, pc
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    73da:	1dfb      	adds	r3, r7, #7
    73dc:	2200      	movs	r2, #0
    73de:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    73e0:	4b3b      	ldr	r3, [pc, #236]	; (74d0 <udc_req_std_dev_get_str_desc+0x100>)
    73e2:	58e3      	ldr	r3, [r4, r3]
    73e4:	885b      	ldrh	r3, [r3, #2]
    73e6:	001a      	movs	r2, r3
    73e8:	23ff      	movs	r3, #255	; 0xff
    73ea:	4013      	ands	r3, r2
    73ec:	2b03      	cmp	r3, #3
    73ee:	d82a      	bhi.n	7446 <udc_req_std_dev_get_str_desc+0x76>
    73f0:	0018      	movs	r0, r3
    73f2:	f009 f983 	bl	106fc <__gnu_thumb1_case_si>
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	00000010 	.word	0x00000010
    73fc:	00000020 	.word	0x00000020
    7400:	0000002e 	.word	0x0000002e
    7404:	0000003c 	.word	0x0000003c
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    7408:	4b32      	ldr	r3, [pc, #200]	; (74d4 <udc_req_std_dev_get_str_desc+0x104>)
    740a:	447b      	add	r3, pc
    740c:	2104      	movs	r1, #4
    740e:	0018      	movs	r0, r3
    7410:	4b31      	ldr	r3, [pc, #196]	; (74d8 <udc_req_std_dev_get_str_desc+0x108>)
    7412:	58e3      	ldr	r3, [r4, r3]
    7414:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    7416:	e018      	b.n	744a <udc_req_std_dev_get_str_desc+0x7a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    7418:	1dfb      	adds	r3, r7, #7
    741a:	220b      	movs	r2, #11
    741c:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    741e:	4b2f      	ldr	r3, [pc, #188]	; (74dc <udc_req_std_dev_get_str_desc+0x10c>)
    7420:	447b      	add	r3, pc
    7422:	60bb      	str	r3, [r7, #8]
		break;
    7424:	e011      	b.n	744a <udc_req_std_dev_get_str_desc+0x7a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    7426:	1dfb      	adds	r3, r7, #7
    7428:	2210      	movs	r2, #16
    742a:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    742c:	4b2c      	ldr	r3, [pc, #176]	; (74e0 <udc_req_std_dev_get_str_desc+0x110>)
    742e:	447b      	add	r3, pc
    7430:	60bb      	str	r3, [r7, #8]
		break;
    7432:	e00a      	b.n	744a <udc_req_std_dev_get_str_desc+0x7a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    7434:	1dfb      	adds	r3, r7, #7
    7436:	2207      	movs	r2, #7
    7438:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    743a:	4b2a      	ldr	r3, [pc, #168]	; (74e4 <udc_req_std_dev_get_str_desc+0x114>)
    743c:	447b      	add	r3, pc
    743e:	4798      	blx	r3
    7440:	0003      	movs	r3, r0
    7442:	60bb      	str	r3, [r7, #8]
		break;
    7444:	e001      	b.n	744a <udc_req_std_dev_get_str_desc+0x7a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    7446:	2300      	movs	r3, #0
    7448:	e03c      	b.n	74c4 <udc_req_std_dev_get_str_desc+0xf4>
	}

	if (str_length) {
    744a:	1dfb      	adds	r3, r7, #7
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	2b00      	cmp	r3, #0
    7450:	d037      	beq.n	74c2 <udc_req_std_dev_get_str_desc+0xf2>
		for(i = 0; i < str_length; i++) {
    7452:	230f      	movs	r3, #15
    7454:	18fb      	adds	r3, r7, r3
    7456:	2200      	movs	r2, #0
    7458:	701a      	strb	r2, [r3, #0]
    745a:	e017      	b.n	748c <udc_req_std_dev_get_str_desc+0xbc>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    745c:	230f      	movs	r3, #15
    745e:	18fb      	adds	r3, r7, r3
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	220f      	movs	r2, #15
    7464:	18ba      	adds	r2, r7, r2
    7466:	7812      	ldrb	r2, [r2, #0]
    7468:	68b9      	ldr	r1, [r7, #8]
    746a:	188a      	adds	r2, r1, r2
    746c:	7812      	ldrb	r2, [r2, #0]
    746e:	b291      	uxth	r1, r2
    7470:	4a1d      	ldr	r2, [pc, #116]	; (74e8 <udc_req_std_dev_get_str_desc+0x118>)
    7472:	447a      	add	r2, pc
    7474:	005b      	lsls	r3, r3, #1
    7476:	18d3      	adds	r3, r2, r3
    7478:	3302      	adds	r3, #2
    747a:	1c0a      	adds	r2, r1, #0
    747c:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
    747e:	230f      	movs	r3, #15
    7480:	18fb      	adds	r3, r7, r3
    7482:	781a      	ldrb	r2, [r3, #0]
    7484:	230f      	movs	r3, #15
    7486:	18fb      	adds	r3, r7, r3
    7488:	3201      	adds	r2, #1
    748a:	701a      	strb	r2, [r3, #0]
    748c:	230f      	movs	r3, #15
    748e:	18fa      	adds	r2, r7, r3
    7490:	1dfb      	adds	r3, r7, #7
    7492:	7812      	ldrb	r2, [r2, #0]
    7494:	781b      	ldrb	r3, [r3, #0]
    7496:	429a      	cmp	r2, r3
    7498:	d3e0      	bcc.n	745c <udc_req_std_dev_get_str_desc+0x8c>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    749a:	1dfb      	adds	r3, r7, #7
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	3301      	adds	r3, #1
    74a0:	b2db      	uxtb	r3, r3
    74a2:	18db      	adds	r3, r3, r3
    74a4:	b2da      	uxtb	r2, r3
    74a6:	4b11      	ldr	r3, [pc, #68]	; (74ec <udc_req_std_dev_get_str_desc+0x11c>)
    74a8:	447b      	add	r3, pc
    74aa:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    74ac:	4b10      	ldr	r3, [pc, #64]	; (74f0 <udc_req_std_dev_get_str_desc+0x120>)
    74ae:	447b      	add	r3, pc
    74b0:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
    74b2:	b29b      	uxth	r3, r3
    74b4:	4a0f      	ldr	r2, [pc, #60]	; (74f4 <udc_req_std_dev_get_str_desc+0x124>)
    74b6:	447a      	add	r2, pc
    74b8:	0019      	movs	r1, r3
    74ba:	0010      	movs	r0, r2
    74bc:	4b06      	ldr	r3, [pc, #24]	; (74d8 <udc_req_std_dev_get_str_desc+0x108>)
    74be:	58e3      	ldr	r3, [r4, r3]
    74c0:	4798      	blx	r3
	}

	return true;
    74c2:	2301      	movs	r3, #1
}
    74c4:	0018      	movs	r0, r3
    74c6:	46bd      	mov	sp, r7
    74c8:	b005      	add	sp, #20
    74ca:	bd90      	pop	{r4, r7, pc}
    74cc:	0000aa88 	.word	0x0000aa88
    74d0:	000001e8 	.word	0x000001e8
    74d4:	1fff8c9a 	.word	0x1fff8c9a
    74d8:	0000005c 	.word	0x0000005c
    74dc:	1fff8c88 	.word	0x1fff8c88
    74e0:	1fff8c86 	.word	0x1fff8c86
    74e4:	fffff955 	.word	0xfffff955
    74e8:	1fff8c56 	.word	0x1fff8c56
    74ec:	1fff8c20 	.word	0x1fff8c20
    74f0:	1fff8c1a 	.word	0x1fff8c1a
    74f4:	1fff8c12 	.word	0x1fff8c12

000074f8 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    74f8:	b590      	push	{r4, r7, lr}
    74fa:	b083      	sub	sp, #12
    74fc:	af00      	add	r7, sp, #0
    74fe:	4c51      	ldr	r4, [pc, #324]	; (7644 <udc_req_std_dev_get_descriptor+0x14c>)
    7500:	447c      	add	r4, pc
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    7502:	4b51      	ldr	r3, [pc, #324]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    7504:	58e3      	ldr	r3, [r4, r3]
    7506:	885a      	ldrh	r2, [r3, #2]
    7508:	1dfb      	adds	r3, r7, #7
    750a:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    750c:	4b4e      	ldr	r3, [pc, #312]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    750e:	58e3      	ldr	r3, [r4, r3]
    7510:	885b      	ldrh	r3, [r3, #2]
    7512:	0a1b      	lsrs	r3, r3, #8
    7514:	b29b      	uxth	r3, r3
    7516:	b2db      	uxtb	r3, r3
    7518:	3b01      	subs	r3, #1
    751a:	2b0e      	cmp	r3, #14
    751c:	d900      	bls.n	7520 <udc_req_std_dev_get_descriptor+0x28>
    751e:	e07b      	b.n	7618 <udc_req_std_dev_get_descriptor+0x120>
    7520:	0018      	movs	r0, r3
    7522:	f009 f8eb 	bl	106fc <__gnu_thumb1_case_si>
    7526:	46c0      	nop			; (mov r8, r8)
    7528:	0000003c 	.word	0x0000003c
    752c:	00000058 	.word	0x00000058
    7530:	000000d8 	.word	0x000000d8
    7534:	000000f0 	.word	0x000000f0
    7538:	000000f0 	.word	0x000000f0
    753c:	000000f0 	.word	0x000000f0
    7540:	000000f0 	.word	0x000000f0
    7544:	000000f0 	.word	0x000000f0
    7548:	000000f0 	.word	0x000000f0
    754c:	000000f0 	.word	0x000000f0
    7550:	000000f0 	.word	0x000000f0
    7554:	000000f0 	.word	0x000000f0
    7558:	000000f0 	.word	0x000000f0
    755c:	000000f0 	.word	0x000000f0
    7560:	000000aa 	.word	0x000000aa
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    7564:	4b39      	ldr	r3, [pc, #228]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    7566:	58e3      	ldr	r3, [r4, r3]
    7568:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    756a:	4b38      	ldr	r3, [pc, #224]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    756c:	58e3      	ldr	r3, [r4, r3]
    756e:	681b      	ldr	r3, [r3, #0]
    7570:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    7572:	b29b      	uxth	r3, r3
    7574:	0019      	movs	r1, r3
    7576:	0010      	movs	r0, r2
    7578:	4b35      	ldr	r3, [pc, #212]	; (7650 <udc_req_std_dev_get_descriptor+0x158>)
    757a:	58e3      	ldr	r3, [r4, r3]
    757c:	4798      	blx	r3
		}
		break;
    757e:	e04e      	b.n	761e <udc_req_std_dev_get_descriptor+0x126>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    7580:	4b32      	ldr	r3, [pc, #200]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    7582:	58e3      	ldr	r3, [r4, r3]
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	7c5b      	ldrb	r3, [r3, #17]
    7588:	1dfa      	adds	r2, r7, #7
    758a:	7812      	ldrb	r2, [r2, #0]
    758c:	429a      	cmp	r2, r3
    758e:	d301      	bcc.n	7594 <udc_req_std_dev_get_descriptor+0x9c>
					bNumConfigurations) {
				return false;
    7590:	2300      	movs	r3, #0
    7592:	e053      	b.n	763c <udc_req_std_dev_get_descriptor+0x144>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    7594:	4b2d      	ldr	r3, [pc, #180]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    7596:	58e3      	ldr	r3, [r4, r3]
    7598:	685a      	ldr	r2, [r3, #4]
    759a:	1dfb      	adds	r3, r7, #7
    759c:	781b      	ldrb	r3, [r3, #0]
    759e:	00db      	lsls	r3, r3, #3
    75a0:	18d3      	adds	r3, r2, r3
    75a2:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    75a4:	4b29      	ldr	r3, [pc, #164]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    75a6:	58e3      	ldr	r3, [r4, r3]
    75a8:	685a      	ldr	r2, [r3, #4]
    75aa:	1dfb      	adds	r3, r7, #7
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	00db      	lsls	r3, r3, #3
    75b0:	18d3      	adds	r3, r2, r3
    75b2:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    75b4:	789a      	ldrb	r2, [r3, #2]
    75b6:	78db      	ldrb	r3, [r3, #3]
    75b8:	021b      	lsls	r3, r3, #8
    75ba:	4313      	orrs	r3, r2
    75bc:	b29b      	uxth	r3, r3
    75be:	0019      	movs	r1, r3
    75c0:	4b23      	ldr	r3, [pc, #140]	; (7650 <udc_req_std_dev_get_descriptor+0x158>)
    75c2:	58e3      	ldr	r3, [r4, r3]
    75c4:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    75c6:	4b20      	ldr	r3, [pc, #128]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    75c8:	58e3      	ldr	r3, [r4, r3]
    75ca:	689b      	ldr	r3, [r3, #8]
    75cc:	2202      	movs	r2, #2
    75ce:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    75d0:	e025      	b.n	761e <udc_req_std_dev_get_descriptor+0x126>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    75d2:	4b1e      	ldr	r3, [pc, #120]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    75d4:	58e3      	ldr	r3, [r4, r3]
    75d6:	689b      	ldr	r3, [r3, #8]
    75d8:	2b00      	cmp	r3, #0
    75da:	d101      	bne.n	75e0 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
    75dc:	2300      	movs	r3, #0
    75de:	e02d      	b.n	763c <udc_req_std_dev_get_descriptor+0x144>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    75e0:	4b1a      	ldr	r3, [pc, #104]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    75e2:	58e3      	ldr	r3, [r4, r3]
    75e4:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    75e6:	4b19      	ldr	r3, [pc, #100]	; (764c <udc_req_std_dev_get_descriptor+0x154>)
    75e8:	58e3      	ldr	r3, [r4, r3]
    75ea:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    75ec:	789a      	ldrb	r2, [r3, #2]
    75ee:	78db      	ldrb	r3, [r3, #3]
    75f0:	021b      	lsls	r3, r3, #8
    75f2:	4313      	orrs	r3, r2
    75f4:	b29b      	uxth	r3, r3
    75f6:	0019      	movs	r1, r3
    75f8:	4b15      	ldr	r3, [pc, #84]	; (7650 <udc_req_std_dev_get_descriptor+0x158>)
    75fa:	58e3      	ldr	r3, [r4, r3]
    75fc:	4798      	blx	r3
		break;
    75fe:	e00e      	b.n	761e <udc_req_std_dev_get_descriptor+0x126>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    7600:	4b14      	ldr	r3, [pc, #80]	; (7654 <udc_req_std_dev_get_descriptor+0x15c>)
    7602:	447b      	add	r3, pc
    7604:	4798      	blx	r3
    7606:	0003      	movs	r3, r0
    7608:	001a      	movs	r2, r3
    760a:	2301      	movs	r3, #1
    760c:	4053      	eors	r3, r2
    760e:	b2db      	uxtb	r3, r3
    7610:	2b00      	cmp	r3, #0
    7612:	d003      	beq.n	761c <udc_req_std_dev_get_descriptor+0x124>
			return false;
    7614:	2300      	movs	r3, #0
    7616:	e011      	b.n	763c <udc_req_std_dev_get_descriptor+0x144>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    7618:	2300      	movs	r3, #0
    761a:	e00f      	b.n	763c <udc_req_std_dev_get_descriptor+0x144>
		break;
    761c:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    761e:	4b0a      	ldr	r3, [pc, #40]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    7620:	58e3      	ldr	r3, [r4, r3]
    7622:	88da      	ldrh	r2, [r3, #6]
    7624:	4b08      	ldr	r3, [pc, #32]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    7626:	58e3      	ldr	r3, [r4, r3]
    7628:	899b      	ldrh	r3, [r3, #12]
    762a:	429a      	cmp	r2, r3
    762c:	d205      	bcs.n	763a <udc_req_std_dev_get_descriptor+0x142>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    762e:	4b06      	ldr	r3, [pc, #24]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    7630:	58e3      	ldr	r3, [r4, r3]
    7632:	88da      	ldrh	r2, [r3, #6]
    7634:	4b04      	ldr	r3, [pc, #16]	; (7648 <udc_req_std_dev_get_descriptor+0x150>)
    7636:	58e3      	ldr	r3, [r4, r3]
    7638:	819a      	strh	r2, [r3, #12]
	}
	return true;
    763a:	2301      	movs	r3, #1
}
    763c:	0018      	movs	r0, r3
    763e:	46bd      	mov	sp, r7
    7640:	b003      	add	sp, #12
    7642:	bd90      	pop	{r4, r7, pc}
    7644:	0000a960 	.word	0x0000a960
    7648:	000001e8 	.word	0x000001e8
    764c:	00000118 	.word	0x00000118
    7650:	0000005c 	.word	0x0000005c
    7654:	fffffdcb 	.word	0xfffffdcb

00007658 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    7658:	b580      	push	{r7, lr}
    765a:	af00      	add	r7, sp, #0
    765c:	4b09      	ldr	r3, [pc, #36]	; (7684 <udc_req_std_dev_get_configuration+0x2c>)
    765e:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != 1) {
    7660:	4a09      	ldr	r2, [pc, #36]	; (7688 <udc_req_std_dev_get_configuration+0x30>)
    7662:	589a      	ldr	r2, [r3, r2]
    7664:	88d2      	ldrh	r2, [r2, #6]
    7666:	2a01      	cmp	r2, #1
    7668:	d001      	beq.n	766e <udc_req_std_dev_get_configuration+0x16>
		return false;
    766a:	2300      	movs	r3, #0
    766c:	e007      	b.n	767e <udc_req_std_dev_get_configuration+0x26>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    766e:	4a07      	ldr	r2, [pc, #28]	; (768c <udc_req_std_dev_get_configuration+0x34>)
    7670:	447a      	add	r2, pc
    7672:	2101      	movs	r1, #1
    7674:	0010      	movs	r0, r2
    7676:	4a06      	ldr	r2, [pc, #24]	; (7690 <udc_req_std_dev_get_configuration+0x38>)
    7678:	589b      	ldr	r3, [r3, r2]
    767a:	4798      	blx	r3
	return true;
    767c:	2301      	movs	r3, #1
}
    767e:	0018      	movs	r0, r3
    7680:	46bd      	mov	sp, r7
    7682:	bd80      	pop	{r7, pc}
    7684:	0000a802 	.word	0x0000a802
    7688:	000001e8 	.word	0x000001e8
    768c:	1fff8eac 	.word	0x1fff8eac
    7690:	0000005c 	.word	0x0000005c

00007694 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    7694:	b590      	push	{r4, r7, lr}
    7696:	b083      	sub	sp, #12
    7698:	af00      	add	r7, sp, #0
    769a:	4c32      	ldr	r4, [pc, #200]	; (7764 <udc_req_std_dev_set_configuration+0xd0>)
    769c:	447c      	add	r4, pc
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    769e:	4b32      	ldr	r3, [pc, #200]	; (7768 <udc_req_std_dev_set_configuration+0xd4>)
    76a0:	58e3      	ldr	r3, [r4, r3]
    76a2:	88db      	ldrh	r3, [r3, #6]
    76a4:	2b00      	cmp	r3, #0
    76a6:	d001      	beq.n	76ac <udc_req_std_dev_set_configuration+0x18>
		return false;
    76a8:	2300      	movs	r3, #0
    76aa:	e056      	b.n	775a <udc_req_std_dev_set_configuration+0xc6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    76ac:	4b2f      	ldr	r3, [pc, #188]	; (776c <udc_req_std_dev_set_configuration+0xd8>)
    76ae:	58e3      	ldr	r3, [r4, r3]
    76b0:	4798      	blx	r3
    76b2:	1e03      	subs	r3, r0, #0
    76b4:	d101      	bne.n	76ba <udc_req_std_dev_set_configuration+0x26>
		return false;
    76b6:	2300      	movs	r3, #0
    76b8:	e04f      	b.n	775a <udc_req_std_dev_set_configuration+0xc6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    76ba:	4b2b      	ldr	r3, [pc, #172]	; (7768 <udc_req_std_dev_set_configuration+0xd4>)
    76bc:	58e3      	ldr	r3, [r4, r3]
    76be:	885b      	ldrh	r3, [r3, #2]
    76c0:	001a      	movs	r2, r3
    76c2:	23ff      	movs	r3, #255	; 0xff
    76c4:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    76c6:	4b2a      	ldr	r3, [pc, #168]	; (7770 <udc_req_std_dev_set_configuration+0xdc>)
    76c8:	58e3      	ldr	r3, [r4, r3]
    76ca:	681b      	ldr	r3, [r3, #0]
    76cc:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    76ce:	429a      	cmp	r2, r3
    76d0:	dd01      	ble.n	76d6 <udc_req_std_dev_set_configuration+0x42>
			return false;
    76d2:	2300      	movs	r3, #0
    76d4:	e041      	b.n	775a <udc_req_std_dev_set_configuration+0xc6>
		}
	}

	// Reset current configuration
	udc_reset();
    76d6:	4b27      	ldr	r3, [pc, #156]	; (7774 <udc_req_std_dev_set_configuration+0xe0>)
    76d8:	58e3      	ldr	r3, [r4, r3]
    76da:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    76dc:	4b22      	ldr	r3, [pc, #136]	; (7768 <udc_req_std_dev_set_configuration+0xd4>)
    76de:	58e3      	ldr	r3, [r4, r3]
    76e0:	885b      	ldrh	r3, [r3, #2]
    76e2:	b2da      	uxtb	r2, r3
    76e4:	4b24      	ldr	r3, [pc, #144]	; (7778 <udc_req_std_dev_set_configuration+0xe4>)
    76e6:	447b      	add	r3, pc
    76e8:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    76ea:	4b24      	ldr	r3, [pc, #144]	; (777c <udc_req_std_dev_set_configuration+0xe8>)
    76ec:	447b      	add	r3, pc
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	2b00      	cmp	r3, #0
    76f2:	d101      	bne.n	76f8 <udc_req_std_dev_set_configuration+0x64>
		return true; // Default empty configuration requested
    76f4:	2301      	movs	r3, #1
    76f6:	e030      	b.n	775a <udc_req_std_dev_set_configuration+0xc6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    76f8:	4b1d      	ldr	r3, [pc, #116]	; (7770 <udc_req_std_dev_set_configuration+0xdc>)
    76fa:	58e3      	ldr	r3, [r4, r3]
    76fc:	685a      	ldr	r2, [r3, #4]
    76fe:	4b20      	ldr	r3, [pc, #128]	; (7780 <udc_req_std_dev_set_configuration+0xec>)
    7700:	447b      	add	r3, pc
    7702:	781b      	ldrb	r3, [r3, #0]
    7704:	491f      	ldr	r1, [pc, #124]	; (7784 <udc_req_std_dev_set_configuration+0xf0>)
    7706:	468c      	mov	ip, r1
    7708:	4463      	add	r3, ip
    770a:	00db      	lsls	r3, r3, #3
    770c:	18d2      	adds	r2, r2, r3
    770e:	4b1e      	ldr	r3, [pc, #120]	; (7788 <udc_req_std_dev_set_configuration+0xf4>)
    7710:	447b      	add	r3, pc
    7712:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7714:	1dfb      	adds	r3, r7, #7
    7716:	2200      	movs	r2, #0
    7718:	701a      	strb	r2, [r3, #0]
    771a:	e014      	b.n	7746 <udc_req_std_dev_set_configuration+0xb2>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    771c:	1dfb      	adds	r3, r7, #7
    771e:	781b      	ldrb	r3, [r3, #0]
    7720:	2100      	movs	r1, #0
    7722:	0018      	movs	r0, r3
    7724:	4b19      	ldr	r3, [pc, #100]	; (778c <udc_req_std_dev_set_configuration+0xf8>)
    7726:	447b      	add	r3, pc
    7728:	4798      	blx	r3
    772a:	0003      	movs	r3, r0
    772c:	001a      	movs	r2, r3
    772e:	2301      	movs	r3, #1
    7730:	4053      	eors	r3, r2
    7732:	b2db      	uxtb	r3, r3
    7734:	2b00      	cmp	r3, #0
    7736:	d001      	beq.n	773c <udc_req_std_dev_set_configuration+0xa8>
			return false;
    7738:	2300      	movs	r3, #0
    773a:	e00e      	b.n	775a <udc_req_std_dev_set_configuration+0xc6>
			iface_num++) {
    773c:	1dfb      	adds	r3, r7, #7
    773e:	781a      	ldrb	r2, [r3, #0]
    7740:	1dfb      	adds	r3, r7, #7
    7742:	3201      	adds	r2, #1
    7744:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7746:	4b12      	ldr	r3, [pc, #72]	; (7790 <udc_req_std_dev_set_configuration+0xfc>)
    7748:	447b      	add	r3, pc
    774a:	681b      	ldr	r3, [r3, #0]
    774c:	681b      	ldr	r3, [r3, #0]
    774e:	791b      	ldrb	r3, [r3, #4]
    7750:	1dfa      	adds	r2, r7, #7
    7752:	7812      	ldrb	r2, [r2, #0]
    7754:	429a      	cmp	r2, r3
    7756:	d3e1      	bcc.n	771c <udc_req_std_dev_set_configuration+0x88>
		}
	}
	return true;
    7758:	2301      	movs	r3, #1
}
    775a:	0018      	movs	r0, r3
    775c:	46bd      	mov	sp, r7
    775e:	b003      	add	sp, #12
    7760:	bd90      	pop	{r4, r7, pc}
    7762:	46c0      	nop			; (mov r8, r8)
    7764:	0000a7c4 	.word	0x0000a7c4
    7768:	000001e8 	.word	0x000001e8
    776c:	00000038 	.word	0x00000038
    7770:	00000118 	.word	0x00000118
    7774:	000000a0 	.word	0x000000a0
    7778:	1fff8e36 	.word	0x1fff8e36
    777c:	1fff8e30 	.word	0x1fff8e30
    7780:	1fff8e1c 	.word	0x1fff8e1c
    7784:	1fffffff 	.word	0x1fffffff
    7788:	1fff8e10 	.word	0x1fff8e10
    778c:	fffff8b7 	.word	0xfffff8b7
    7790:	1fff8dd8 	.word	0x1fff8dd8

00007794 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    7794:	b590      	push	{r4, r7, lr}
    7796:	b083      	sub	sp, #12
    7798:	af00      	add	r7, sp, #0
    779a:	4c27      	ldr	r4, [pc, #156]	; (7838 <udc_req_std_iface_get_setting+0xa4>)
    779c:	447c      	add	r4, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    779e:	4b27      	ldr	r3, [pc, #156]	; (783c <udc_req_std_iface_get_setting+0xa8>)
    77a0:	58e3      	ldr	r3, [r4, r3]
    77a2:	88db      	ldrh	r3, [r3, #6]
    77a4:	2b01      	cmp	r3, #1
    77a6:	d001      	beq.n	77ac <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
    77a8:	2300      	movs	r3, #0
    77aa:	e040      	b.n	782e <udc_req_std_iface_get_setting+0x9a>
	}
	if (!udc_num_configuration) {
    77ac:	4b24      	ldr	r3, [pc, #144]	; (7840 <udc_req_std_iface_get_setting+0xac>)
    77ae:	447b      	add	r3, pc
    77b0:	781b      	ldrb	r3, [r3, #0]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d101      	bne.n	77ba <udc_req_std_iface_get_setting+0x26>
		return false; // The device is not is configured state yet
    77b6:	2300      	movs	r3, #0
    77b8:	e039      	b.n	782e <udc_req_std_iface_get_setting+0x9a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    77ba:	4b20      	ldr	r3, [pc, #128]	; (783c <udc_req_std_iface_get_setting+0xa8>)
    77bc:	58e3      	ldr	r3, [r4, r3]
    77be:	889a      	ldrh	r2, [r3, #4]
    77c0:	1dfb      	adds	r3, r7, #7
    77c2:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    77c4:	4b1f      	ldr	r3, [pc, #124]	; (7844 <udc_req_std_iface_get_setting+0xb0>)
    77c6:	447b      	add	r3, pc
    77c8:	681b      	ldr	r3, [r3, #0]
    77ca:	681b      	ldr	r3, [r3, #0]
    77cc:	791b      	ldrb	r3, [r3, #4]
    77ce:	1dfa      	adds	r2, r7, #7
    77d0:	7812      	ldrb	r2, [r2, #0]
    77d2:	429a      	cmp	r2, r3
    77d4:	d301      	bcc.n	77da <udc_req_std_iface_get_setting+0x46>
		return false;
    77d6:	2300      	movs	r3, #0
    77d8:	e029      	b.n	782e <udc_req_std_iface_get_setting+0x9a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    77da:	1dfb      	adds	r3, r7, #7
    77dc:	781b      	ldrb	r3, [r3, #0]
    77de:	2100      	movs	r1, #0
    77e0:	0018      	movs	r0, r3
    77e2:	4b19      	ldr	r3, [pc, #100]	; (7848 <udc_req_std_iface_get_setting+0xb4>)
    77e4:	447b      	add	r3, pc
    77e6:	4798      	blx	r3
    77e8:	0003      	movs	r3, r0
    77ea:	001a      	movs	r2, r3
    77ec:	2301      	movs	r3, #1
    77ee:	4053      	eors	r3, r2
    77f0:	b2db      	uxtb	r3, r3
    77f2:	2b00      	cmp	r3, #0
    77f4:	d001      	beq.n	77fa <udc_req_std_iface_get_setting+0x66>
		return false;
    77f6:	2300      	movs	r3, #0
    77f8:	e019      	b.n	782e <udc_req_std_iface_get_setting+0x9a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    77fa:	4b14      	ldr	r3, [pc, #80]	; (784c <udc_req_std_iface_get_setting+0xb8>)
    77fc:	447b      	add	r3, pc
    77fe:	681b      	ldr	r3, [r3, #0]
    7800:	685a      	ldr	r2, [r3, #4]
    7802:	1dfb      	adds	r3, r7, #7
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	009b      	lsls	r3, r3, #2
    7808:	18d3      	adds	r3, r2, r3
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    780e:	683b      	ldr	r3, [r7, #0]
    7810:	68db      	ldr	r3, [r3, #12]
    7812:	4798      	blx	r3
    7814:	0003      	movs	r3, r0
    7816:	001a      	movs	r2, r3
    7818:	4b0d      	ldr	r3, [pc, #52]	; (7850 <udc_req_std_iface_get_setting+0xbc>)
    781a:	447b      	add	r3, pc
    781c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    781e:	4b0d      	ldr	r3, [pc, #52]	; (7854 <udc_req_std_iface_get_setting+0xc0>)
    7820:	447b      	add	r3, pc
    7822:	2101      	movs	r1, #1
    7824:	0018      	movs	r0, r3
    7826:	4b0c      	ldr	r3, [pc, #48]	; (7858 <udc_req_std_iface_get_setting+0xc4>)
    7828:	58e3      	ldr	r3, [r4, r3]
    782a:	4798      	blx	r3
	return true;
    782c:	2301      	movs	r3, #1
}
    782e:	0018      	movs	r0, r3
    7830:	46bd      	mov	sp, r7
    7832:	b003      	add	sp, #12
    7834:	bd90      	pop	{r4, r7, pc}
    7836:	46c0      	nop			; (mov r8, r8)
    7838:	0000a6c4 	.word	0x0000a6c4
    783c:	000001e8 	.word	0x000001e8
    7840:	1fff8d6e 	.word	0x1fff8d6e
    7844:	1fff8d5a 	.word	0x1fff8d5a
    7848:	fffff655 	.word	0xfffff655
    784c:	1fff8d24 	.word	0x1fff8d24
    7850:	1fff8cfe 	.word	0x1fff8cfe
    7854:	1fff8cf8 	.word	0x1fff8cf8
    7858:	0000005c 	.word	0x0000005c

0000785c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    785c:	b580      	push	{r7, lr}
    785e:	b082      	sub	sp, #8
    7860:	af00      	add	r7, sp, #0
    7862:	4b1b      	ldr	r3, [pc, #108]	; (78d0 <udc_req_std_iface_set_setting+0x74>)
    7864:	447b      	add	r3, pc
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    7866:	4a1b      	ldr	r2, [pc, #108]	; (78d4 <udc_req_std_iface_set_setting+0x78>)
    7868:	589a      	ldr	r2, [r3, r2]
    786a:	88d2      	ldrh	r2, [r2, #6]
    786c:	2a00      	cmp	r2, #0
    786e:	d001      	beq.n	7874 <udc_req_std_iface_set_setting+0x18>
		return false; // Error in request
    7870:	2300      	movs	r3, #0
    7872:	e029      	b.n	78c8 <udc_req_std_iface_set_setting+0x6c>
	}
	if (!udc_num_configuration) {
    7874:	4a18      	ldr	r2, [pc, #96]	; (78d8 <udc_req_std_iface_set_setting+0x7c>)
    7876:	447a      	add	r2, pc
    7878:	7812      	ldrb	r2, [r2, #0]
    787a:	2a00      	cmp	r2, #0
    787c:	d101      	bne.n	7882 <udc_req_std_iface_set_setting+0x26>
		return false; // The device is not is configured state yet
    787e:	2300      	movs	r3, #0
    7880:	e022      	b.n	78c8 <udc_req_std_iface_set_setting+0x6c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7882:	4a14      	ldr	r2, [pc, #80]	; (78d4 <udc_req_std_iface_set_setting+0x78>)
    7884:	589a      	ldr	r2, [r3, r2]
    7886:	8891      	ldrh	r1, [r2, #4]
    7888:	1dfa      	adds	r2, r7, #7
    788a:	7011      	strb	r1, [r2, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    788c:	4a11      	ldr	r2, [pc, #68]	; (78d4 <udc_req_std_iface_set_setting+0x78>)
    788e:	589b      	ldr	r3, [r3, r2]
    7890:	885a      	ldrh	r2, [r3, #2]
    7892:	1dbb      	adds	r3, r7, #6
    7894:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    7896:	1dfb      	adds	r3, r7, #7
    7898:	781b      	ldrb	r3, [r3, #0]
    789a:	0018      	movs	r0, r3
    789c:	4b0f      	ldr	r3, [pc, #60]	; (78dc <udc_req_std_iface_set_setting+0x80>)
    789e:	447b      	add	r3, pc
    78a0:	4798      	blx	r3
    78a2:	0003      	movs	r3, r0
    78a4:	001a      	movs	r2, r3
    78a6:	2301      	movs	r3, #1
    78a8:	4053      	eors	r3, r2
    78aa:	b2db      	uxtb	r3, r3
    78ac:	2b00      	cmp	r3, #0
    78ae:	d001      	beq.n	78b4 <udc_req_std_iface_set_setting+0x58>
		return false;
    78b0:	2300      	movs	r3, #0
    78b2:	e009      	b.n	78c8 <udc_req_std_iface_set_setting+0x6c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    78b4:	1dbb      	adds	r3, r7, #6
    78b6:	781a      	ldrb	r2, [r3, #0]
    78b8:	1dfb      	adds	r3, r7, #7
    78ba:	781b      	ldrb	r3, [r3, #0]
    78bc:	0011      	movs	r1, r2
    78be:	0018      	movs	r0, r3
    78c0:	4b07      	ldr	r3, [pc, #28]	; (78e0 <udc_req_std_iface_set_setting+0x84>)
    78c2:	447b      	add	r3, pc
    78c4:	4798      	blx	r3
    78c6:	0003      	movs	r3, r0
}
    78c8:	0018      	movs	r0, r3
    78ca:	46bd      	mov	sp, r7
    78cc:	b002      	add	sp, #8
    78ce:	bd80      	pop	{r7, pc}
    78d0:	0000a5fc 	.word	0x0000a5fc
    78d4:	000001e8 	.word	0x000001e8
    78d8:	1fff8ca6 	.word	0x1fff8ca6
    78dc:	fffff677 	.word	0xfffff677
    78e0:	fffff71b 	.word	0xfffff71b

000078e4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    78e4:	b580      	push	{r7, lr}
    78e6:	af00      	add	r7, sp, #0
    78e8:	4b5e      	ldr	r3, [pc, #376]	; (7a64 <udc_reqstd+0x180>)
    78ea:	447b      	add	r3, pc
	if (Udd_setup_is_in()) {
    78ec:	4a5e      	ldr	r2, [pc, #376]	; (7a68 <udc_reqstd+0x184>)
    78ee:	589a      	ldr	r2, [r3, r2]
    78f0:	7812      	ldrb	r2, [r2, #0]
    78f2:	b252      	sxtb	r2, r2
    78f4:	2a00      	cmp	r2, #0
    78f6:	da4d      	bge.n	7994 <udc_reqstd+0xb0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    78f8:	4a5b      	ldr	r2, [pc, #364]	; (7a68 <udc_reqstd+0x184>)
    78fa:	589a      	ldr	r2, [r3, r2]
    78fc:	88d2      	ldrh	r2, [r2, #6]
    78fe:	2a00      	cmp	r2, #0
    7900:	d101      	bne.n	7906 <udc_reqstd+0x22>
			return false; // Error for USB host
    7902:	2300      	movs	r3, #0
    7904:	e0ab      	b.n	7a5e <udc_reqstd+0x17a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7906:	4a58      	ldr	r2, [pc, #352]	; (7a68 <udc_reqstd+0x184>)
    7908:	589a      	ldr	r2, [r3, r2]
    790a:	7812      	ldrb	r2, [r2, #0]
    790c:	0011      	movs	r1, r2
    790e:	221f      	movs	r2, #31
    7910:	400a      	ands	r2, r1
    7912:	d118      	bne.n	7946 <udc_reqstd+0x62>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    7914:	4a54      	ldr	r2, [pc, #336]	; (7a68 <udc_reqstd+0x184>)
    7916:	589a      	ldr	r2, [r3, r2]
    7918:	7852      	ldrb	r2, [r2, #1]
    791a:	2a06      	cmp	r2, #6
    791c:	d009      	beq.n	7932 <udc_reqstd+0x4e>
    791e:	2a08      	cmp	r2, #8
    7920:	d00c      	beq.n	793c <udc_reqstd+0x58>
    7922:	2a00      	cmp	r2, #0
    7924:	d000      	beq.n	7928 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    7926:	e00e      	b.n	7946 <udc_reqstd+0x62>
				return udc_req_std_dev_get_status();
    7928:	4b50      	ldr	r3, [pc, #320]	; (7a6c <udc_reqstd+0x188>)
    792a:	447b      	add	r3, pc
    792c:	4798      	blx	r3
    792e:	0003      	movs	r3, r0
    7930:	e095      	b.n	7a5e <udc_reqstd+0x17a>
				return udc_req_std_dev_get_descriptor();
    7932:	4b4f      	ldr	r3, [pc, #316]	; (7a70 <udc_reqstd+0x18c>)
    7934:	447b      	add	r3, pc
    7936:	4798      	blx	r3
    7938:	0003      	movs	r3, r0
    793a:	e090      	b.n	7a5e <udc_reqstd+0x17a>
				return udc_req_std_dev_get_configuration();
    793c:	4b4d      	ldr	r3, [pc, #308]	; (7a74 <udc_reqstd+0x190>)
    793e:	447b      	add	r3, pc
    7940:	4798      	blx	r3
    7942:	0003      	movs	r3, r0
    7944:	e08b      	b.n	7a5e <udc_reqstd+0x17a>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7946:	4a48      	ldr	r2, [pc, #288]	; (7a68 <udc_reqstd+0x184>)
    7948:	589a      	ldr	r2, [r3, r2]
    794a:	7812      	ldrb	r2, [r2, #0]
    794c:	0011      	movs	r1, r2
    794e:	221f      	movs	r2, #31
    7950:	400a      	ands	r2, r1
    7952:	2a01      	cmp	r2, #1
    7954:	d10a      	bne.n	796c <udc_reqstd+0x88>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7956:	4a44      	ldr	r2, [pc, #272]	; (7a68 <udc_reqstd+0x184>)
    7958:	589a      	ldr	r2, [r3, r2]
    795a:	7852      	ldrb	r2, [r2, #1]
    795c:	2a0a      	cmp	r2, #10
    795e:	d000      	beq.n	7962 <udc_reqstd+0x7e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    7960:	e004      	b.n	796c <udc_reqstd+0x88>
				return udc_req_std_iface_get_setting();
    7962:	4b45      	ldr	r3, [pc, #276]	; (7a78 <udc_reqstd+0x194>)
    7964:	447b      	add	r3, pc
    7966:	4798      	blx	r3
    7968:	0003      	movs	r3, r0
    796a:	e078      	b.n	7a5e <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    796c:	4a3e      	ldr	r2, [pc, #248]	; (7a68 <udc_reqstd+0x184>)
    796e:	589a      	ldr	r2, [r3, r2]
    7970:	7812      	ldrb	r2, [r2, #0]
    7972:	0011      	movs	r1, r2
    7974:	221f      	movs	r2, #31
    7976:	400a      	ands	r2, r1
    7978:	2a02      	cmp	r2, #2
    797a:	d000      	beq.n	797e <udc_reqstd+0x9a>
    797c:	e06e      	b.n	7a5c <udc_reqstd+0x178>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    797e:	4a3a      	ldr	r2, [pc, #232]	; (7a68 <udc_reqstd+0x184>)
    7980:	589b      	ldr	r3, [r3, r2]
    7982:	785b      	ldrb	r3, [r3, #1]
    7984:	2b00      	cmp	r3, #0
    7986:	d000      	beq.n	798a <udc_reqstd+0xa6>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    7988:	e068      	b.n	7a5c <udc_reqstd+0x178>
				return udc_req_std_ep_get_status();
    798a:	4b3c      	ldr	r3, [pc, #240]	; (7a7c <udc_reqstd+0x198>)
    798c:	447b      	add	r3, pc
    798e:	4798      	blx	r3
    7990:	0003      	movs	r3, r0
    7992:	e064      	b.n	7a5e <udc_reqstd+0x17a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    7994:	4a34      	ldr	r2, [pc, #208]	; (7a68 <udc_reqstd+0x184>)
    7996:	589a      	ldr	r2, [r3, r2]
    7998:	7812      	ldrb	r2, [r2, #0]
    799a:	0011      	movs	r1, r2
    799c:	221f      	movs	r2, #31
    799e:	400a      	ands	r2, r1
    79a0:	d12f      	bne.n	7a02 <udc_reqstd+0x11e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    79a2:	4a31      	ldr	r2, [pc, #196]	; (7a68 <udc_reqstd+0x184>)
    79a4:	589a      	ldr	r2, [r3, r2]
    79a6:	7852      	ldrb	r2, [r2, #1]
    79a8:	3a01      	subs	r2, #1
    79aa:	2a08      	cmp	r2, #8
    79ac:	d828      	bhi.n	7a00 <udc_reqstd+0x11c>
    79ae:	0010      	movs	r0, r2
    79b0:	f008 fea4 	bl	106fc <__gnu_thumb1_case_si>
    79b4:	0000002e 	.word	0x0000002e
    79b8:	0000004c 	.word	0x0000004c
    79bc:	00000038 	.word	0x00000038
    79c0:	0000004c 	.word	0x0000004c
    79c4:	00000024 	.word	0x00000024
    79c8:	0000004c 	.word	0x0000004c
    79cc:	0000004c 	.word	0x0000004c
    79d0:	0000004c 	.word	0x0000004c
    79d4:	00000042 	.word	0x00000042
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    79d8:	4b29      	ldr	r3, [pc, #164]	; (7a80 <udc_reqstd+0x19c>)
    79da:	447b      	add	r3, pc
    79dc:	4798      	blx	r3
    79de:	0003      	movs	r3, r0
    79e0:	e03d      	b.n	7a5e <udc_reqstd+0x17a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    79e2:	4b28      	ldr	r3, [pc, #160]	; (7a84 <udc_reqstd+0x1a0>)
    79e4:	447b      	add	r3, pc
    79e6:	4798      	blx	r3
    79e8:	0003      	movs	r3, r0
    79ea:	e038      	b.n	7a5e <udc_reqstd+0x17a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    79ec:	4b26      	ldr	r3, [pc, #152]	; (7a88 <udc_reqstd+0x1a4>)
    79ee:	447b      	add	r3, pc
    79f0:	4798      	blx	r3
    79f2:	0003      	movs	r3, r0
    79f4:	e033      	b.n	7a5e <udc_reqstd+0x17a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    79f6:	4b25      	ldr	r3, [pc, #148]	; (7a8c <udc_reqstd+0x1a8>)
    79f8:	447b      	add	r3, pc
    79fa:	4798      	blx	r3
    79fc:	0003      	movs	r3, r0
    79fe:	e02e      	b.n	7a5e <udc_reqstd+0x17a>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    7a00:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    7a02:	4a19      	ldr	r2, [pc, #100]	; (7a68 <udc_reqstd+0x184>)
    7a04:	589a      	ldr	r2, [r3, r2]
    7a06:	7812      	ldrb	r2, [r2, #0]
    7a08:	0011      	movs	r1, r2
    7a0a:	221f      	movs	r2, #31
    7a0c:	400a      	ands	r2, r1
    7a0e:	2a01      	cmp	r2, #1
    7a10:	d10a      	bne.n	7a28 <udc_reqstd+0x144>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    7a12:	4a15      	ldr	r2, [pc, #84]	; (7a68 <udc_reqstd+0x184>)
    7a14:	589a      	ldr	r2, [r3, r2]
    7a16:	7852      	ldrb	r2, [r2, #1]
    7a18:	2a0b      	cmp	r2, #11
    7a1a:	d000      	beq.n	7a1e <udc_reqstd+0x13a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    7a1c:	e004      	b.n	7a28 <udc_reqstd+0x144>
				return udc_req_std_iface_set_setting();
    7a1e:	4b1c      	ldr	r3, [pc, #112]	; (7a90 <udc_reqstd+0x1ac>)
    7a20:	447b      	add	r3, pc
    7a22:	4798      	blx	r3
    7a24:	0003      	movs	r3, r0
    7a26:	e01a      	b.n	7a5e <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    7a28:	4a0f      	ldr	r2, [pc, #60]	; (7a68 <udc_reqstd+0x184>)
    7a2a:	589a      	ldr	r2, [r3, r2]
    7a2c:	7812      	ldrb	r2, [r2, #0]
    7a2e:	0011      	movs	r1, r2
    7a30:	221f      	movs	r2, #31
    7a32:	400a      	ands	r2, r1
    7a34:	2a02      	cmp	r2, #2
    7a36:	d111      	bne.n	7a5c <udc_reqstd+0x178>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    7a38:	4a0b      	ldr	r2, [pc, #44]	; (7a68 <udc_reqstd+0x184>)
    7a3a:	589b      	ldr	r3, [r3, r2]
    7a3c:	785b      	ldrb	r3, [r3, #1]
    7a3e:	2b01      	cmp	r3, #1
    7a40:	d002      	beq.n	7a48 <udc_reqstd+0x164>
    7a42:	2b03      	cmp	r3, #3
    7a44:	d005      	beq.n	7a52 <udc_reqstd+0x16e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    7a46:	e009      	b.n	7a5c <udc_reqstd+0x178>
				return udc_req_std_ep_clear_feature();
    7a48:	4b12      	ldr	r3, [pc, #72]	; (7a94 <udc_reqstd+0x1b0>)
    7a4a:	447b      	add	r3, pc
    7a4c:	4798      	blx	r3
    7a4e:	0003      	movs	r3, r0
    7a50:	e005      	b.n	7a5e <udc_reqstd+0x17a>
				return udc_req_std_ep_set_feature();
    7a52:	4b11      	ldr	r3, [pc, #68]	; (7a98 <udc_reqstd+0x1b4>)
    7a54:	447b      	add	r3, pc
    7a56:	4798      	blx	r3
    7a58:	0003      	movs	r3, r0
    7a5a:	e000      	b.n	7a5e <udc_reqstd+0x17a>
			}
		}
#endif
	}
	return false;
    7a5c:	2300      	movs	r3, #0
}
    7a5e:	0018      	movs	r0, r3
    7a60:	46bd      	mov	sp, r7
    7a62:	bd80      	pop	{r7, pc}
    7a64:	0000a576 	.word	0x0000a576
    7a68:	000001e8 	.word	0x000001e8
    7a6c:	fffff877 	.word	0xfffff877
    7a70:	fffffbc1 	.word	0xfffffbc1
    7a74:	fffffd17 	.word	0xfffffd17
    7a78:	fffffe2d 	.word	0xfffffe2d
    7a7c:	fffff851 	.word	0xfffff851
    7a80:	fffff9bf 	.word	0xfffff9bf
    7a84:	fffff859 	.word	0xfffff859
    7a88:	fffff8e7 	.word	0xfffff8e7
    7a8c:	fffffc99 	.word	0xfffffc99
    7a90:	fffffe39 	.word	0xfffffe39
    7a94:	fffff843 	.word	0xfffff843
    7a98:	fffff8b9 	.word	0xfffff8b9

00007a9c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b082      	sub	sp, #8
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	4a28      	ldr	r2, [pc, #160]	; (7b44 <udc_req_iface+0xa8>)
    7aa4:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    7aa6:	4b28      	ldr	r3, [pc, #160]	; (7b48 <udc_req_iface+0xac>)
    7aa8:	447b      	add	r3, pc
    7aaa:	781b      	ldrb	r3, [r3, #0]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d101      	bne.n	7ab4 <udc_req_iface+0x18>
		return false; // The device is not is configured state yet
    7ab0:	2300      	movs	r3, #0
    7ab2:	e042      	b.n	7b3a <udc_req_iface+0x9e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7ab4:	4b25      	ldr	r3, [pc, #148]	; (7b4c <udc_req_iface+0xb0>)
    7ab6:	58d3      	ldr	r3, [r2, r3]
    7ab8:	889a      	ldrh	r2, [r3, #4]
    7aba:	1dfb      	adds	r3, r7, #7
    7abc:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    7abe:	4b24      	ldr	r3, [pc, #144]	; (7b50 <udc_req_iface+0xb4>)
    7ac0:	447b      	add	r3, pc
    7ac2:	681b      	ldr	r3, [r3, #0]
    7ac4:	681b      	ldr	r3, [r3, #0]
    7ac6:	791b      	ldrb	r3, [r3, #4]
    7ac8:	1dfa      	adds	r2, r7, #7
    7aca:	7812      	ldrb	r2, [r2, #0]
    7acc:	429a      	cmp	r2, r3
    7ace:	d301      	bcc.n	7ad4 <udc_req_iface+0x38>
		return false;
    7ad0:	2300      	movs	r3, #0
    7ad2:	e032      	b.n	7b3a <udc_req_iface+0x9e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    7ad4:	1dfb      	adds	r3, r7, #7
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	2100      	movs	r1, #0
    7ada:	0018      	movs	r0, r3
    7adc:	4b1d      	ldr	r3, [pc, #116]	; (7b54 <udc_req_iface+0xb8>)
    7ade:	447b      	add	r3, pc
    7ae0:	4798      	blx	r3
    7ae2:	0003      	movs	r3, r0
    7ae4:	001a      	movs	r2, r3
    7ae6:	2301      	movs	r3, #1
    7ae8:	4053      	eors	r3, r2
    7aea:	b2db      	uxtb	r3, r3
    7aec:	2b00      	cmp	r3, #0
    7aee:	d001      	beq.n	7af4 <udc_req_iface+0x58>
		return false;
    7af0:	2300      	movs	r3, #0
    7af2:	e022      	b.n	7b3a <udc_req_iface+0x9e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    7af4:	4b18      	ldr	r3, [pc, #96]	; (7b58 <udc_req_iface+0xbc>)
    7af6:	447b      	add	r3, pc
    7af8:	681b      	ldr	r3, [r3, #0]
    7afa:	685a      	ldr	r2, [r3, #4]
    7afc:	1dfb      	adds	r3, r7, #7
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	009b      	lsls	r3, r3, #2
    7b02:	18d3      	adds	r3, r2, r3
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7b08:	683b      	ldr	r3, [r7, #0]
    7b0a:	68db      	ldr	r3, [r3, #12]
    7b0c:	4798      	blx	r3
    7b0e:	0003      	movs	r3, r0
    7b10:	001a      	movs	r2, r3
    7b12:	1dfb      	adds	r3, r7, #7
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	0011      	movs	r1, r2
    7b18:	0018      	movs	r0, r3
    7b1a:	4b10      	ldr	r3, [pc, #64]	; (7b5c <udc_req_iface+0xc0>)
    7b1c:	447b      	add	r3, pc
    7b1e:	4798      	blx	r3
    7b20:	0003      	movs	r3, r0
    7b22:	001a      	movs	r2, r3
    7b24:	2301      	movs	r3, #1
    7b26:	4053      	eors	r3, r2
    7b28:	b2db      	uxtb	r3, r3
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d001      	beq.n	7b32 <udc_req_iface+0x96>
		return false;
    7b2e:	2300      	movs	r3, #0
    7b30:	e003      	b.n	7b3a <udc_req_iface+0x9e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    7b32:	683b      	ldr	r3, [r7, #0]
    7b34:	689b      	ldr	r3, [r3, #8]
    7b36:	4798      	blx	r3
    7b38:	0003      	movs	r3, r0
}
    7b3a:	0018      	movs	r0, r3
    7b3c:	46bd      	mov	sp, r7
    7b3e:	b002      	add	sp, #8
    7b40:	bd80      	pop	{r7, pc}
    7b42:	46c0      	nop			; (mov r8, r8)
    7b44:	0000a3bc 	.word	0x0000a3bc
    7b48:	1fff8a74 	.word	0x1fff8a74
    7b4c:	000001e8 	.word	0x000001e8
    7b50:	1fff8a60 	.word	0x1fff8a60
    7b54:	fffff35b 	.word	0xfffff35b
    7b58:	1fff8a2a 	.word	0x1fff8a2a
    7b5c:	fffff31d 	.word	0xfffff31d

00007b60 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    7b60:	b580      	push	{r7, lr}
    7b62:	b082      	sub	sp, #8
    7b64:	af00      	add	r7, sp, #0
    7b66:	4a25      	ldr	r2, [pc, #148]	; (7bfc <udc_req_ep+0x9c>)
    7b68:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    7b6a:	4b25      	ldr	r3, [pc, #148]	; (7c00 <udc_req_ep+0xa0>)
    7b6c:	447b      	add	r3, pc
    7b6e:	781b      	ldrb	r3, [r3, #0]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d101      	bne.n	7b78 <udc_req_ep+0x18>
		return false; // The device is not is configured state yet
    7b74:	2300      	movs	r3, #0
    7b76:	e03d      	b.n	7bf4 <udc_req_ep+0x94>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    7b78:	4b22      	ldr	r3, [pc, #136]	; (7c04 <udc_req_ep+0xa4>)
    7b7a:	58d3      	ldr	r3, [r2, r3]
    7b7c:	889a      	ldrh	r2, [r3, #4]
    7b7e:	1dfb      	adds	r3, r7, #7
    7b80:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7b82:	1dfb      	adds	r3, r7, #7
    7b84:	2200      	movs	r2, #0
    7b86:	701a      	strb	r2, [r3, #0]
    7b88:	e02a      	b.n	7be0 <udc_req_ep+0x80>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    7b8a:	4b1f      	ldr	r3, [pc, #124]	; (7c08 <udc_req_ep+0xa8>)
    7b8c:	447b      	add	r3, pc
    7b8e:	681b      	ldr	r3, [r3, #0]
    7b90:	685a      	ldr	r2, [r3, #4]
    7b92:	1dfb      	adds	r3, r7, #7
    7b94:	781b      	ldrb	r3, [r3, #0]
    7b96:	009b      	lsls	r3, r3, #2
    7b98:	18d3      	adds	r3, r2, r3
    7b9a:	681b      	ldr	r3, [r3, #0]
    7b9c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    7b9e:	683b      	ldr	r3, [r7, #0]
    7ba0:	68db      	ldr	r3, [r3, #12]
    7ba2:	4798      	blx	r3
    7ba4:	0003      	movs	r3, r0
    7ba6:	001a      	movs	r2, r3
    7ba8:	1dfb      	adds	r3, r7, #7
    7baa:	781b      	ldrb	r3, [r3, #0]
    7bac:	0011      	movs	r1, r2
    7bae:	0018      	movs	r0, r3
    7bb0:	4b16      	ldr	r3, [pc, #88]	; (7c0c <udc_req_ep+0xac>)
    7bb2:	447b      	add	r3, pc
    7bb4:	4798      	blx	r3
    7bb6:	0003      	movs	r3, r0
    7bb8:	001a      	movs	r2, r3
    7bba:	2301      	movs	r3, #1
    7bbc:	4053      	eors	r3, r2
    7bbe:	b2db      	uxtb	r3, r3
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d001      	beq.n	7bc8 <udc_req_ep+0x68>
			return false;
    7bc4:	2300      	movs	r3, #0
    7bc6:	e015      	b.n	7bf4 <udc_req_ep+0x94>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    7bc8:	683b      	ldr	r3, [r7, #0]
    7bca:	689b      	ldr	r3, [r3, #8]
    7bcc:	4798      	blx	r3
    7bce:	1e03      	subs	r3, r0, #0
    7bd0:	d001      	beq.n	7bd6 <udc_req_ep+0x76>
			return true;
    7bd2:	2301      	movs	r3, #1
    7bd4:	e00e      	b.n	7bf4 <udc_req_ep+0x94>
			iface_num++) {
    7bd6:	1dfb      	adds	r3, r7, #7
    7bd8:	781a      	ldrb	r2, [r3, #0]
    7bda:	1dfb      	adds	r3, r7, #7
    7bdc:	3201      	adds	r2, #1
    7bde:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    7be0:	4b0b      	ldr	r3, [pc, #44]	; (7c10 <udc_req_ep+0xb0>)
    7be2:	447b      	add	r3, pc
    7be4:	681b      	ldr	r3, [r3, #0]
    7be6:	681b      	ldr	r3, [r3, #0]
    7be8:	791b      	ldrb	r3, [r3, #4]
    7bea:	1dfa      	adds	r2, r7, #7
    7bec:	7812      	ldrb	r2, [r2, #0]
    7bee:	429a      	cmp	r2, r3
    7bf0:	d3cb      	bcc.n	7b8a <udc_req_ep+0x2a>
		}
	}
	return false;
    7bf2:	2300      	movs	r3, #0
}
    7bf4:	0018      	movs	r0, r3
    7bf6:	46bd      	mov	sp, r7
    7bf8:	b002      	add	sp, #8
    7bfa:	bd80      	pop	{r7, pc}
    7bfc:	0000a2f8 	.word	0x0000a2f8
    7c00:	1fff89b0 	.word	0x1fff89b0
    7c04:	000001e8 	.word	0x000001e8
    7c08:	1fff8994 	.word	0x1fff8994
    7c0c:	fffff287 	.word	0xfffff287
    7c10:	1fff893e 	.word	0x1fff893e

00007c14 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    7c14:	b5b0      	push	{r4, r5, r7, lr}
    7c16:	af00      	add	r7, sp, #0
    7c18:	4c25      	ldr	r4, [pc, #148]	; (7cb0 <udc_process_setup+0x9c>)
    7c1a:	447c      	add	r4, pc
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    7c1c:	4b25      	ldr	r3, [pc, #148]	; (7cb4 <udc_process_setup+0xa0>)
    7c1e:	58e3      	ldr	r3, [r4, r3]
    7c20:	2200      	movs	r2, #0
    7c22:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    7c24:	4b23      	ldr	r3, [pc, #140]	; (7cb4 <udc_process_setup+0xa0>)
    7c26:	58e3      	ldr	r3, [r4, r3]
    7c28:	2200      	movs	r2, #0
    7c2a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    7c2c:	4b21      	ldr	r3, [pc, #132]	; (7cb4 <udc_process_setup+0xa0>)
    7c2e:	58e3      	ldr	r3, [r4, r3]
    7c30:	2200      	movs	r2, #0
    7c32:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    7c34:	4b1f      	ldr	r3, [pc, #124]	; (7cb4 <udc_process_setup+0xa0>)
    7c36:	58e3      	ldr	r3, [r4, r3]
    7c38:	781b      	ldrb	r3, [r3, #0]
    7c3a:	b25b      	sxtb	r3, r3
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	da06      	bge.n	7c4e <udc_process_setup+0x3a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    7c40:	4b1c      	ldr	r3, [pc, #112]	; (7cb4 <udc_process_setup+0xa0>)
    7c42:	58e3      	ldr	r3, [r4, r3]
    7c44:	88db      	ldrh	r3, [r3, #6]
    7c46:	2b00      	cmp	r3, #0
    7c48:	d101      	bne.n	7c4e <udc_process_setup+0x3a>
			return false; // Error from USB host
    7c4a:	2300      	movs	r3, #0
    7c4c:	e02c      	b.n	7ca8 <udc_process_setup+0x94>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    7c4e:	4b19      	ldr	r3, [pc, #100]	; (7cb4 <udc_process_setup+0xa0>)
    7c50:	58e3      	ldr	r3, [r4, r3]
    7c52:	781b      	ldrb	r3, [r3, #0]
    7c54:	001a      	movs	r2, r3
    7c56:	2360      	movs	r3, #96	; 0x60
    7c58:	4013      	ands	r3, r2
    7c5a:	d106      	bne.n	7c6a <udc_process_setup+0x56>
		if (udc_reqstd()) {
    7c5c:	4b16      	ldr	r3, [pc, #88]	; (7cb8 <udc_process_setup+0xa4>)
    7c5e:	447b      	add	r3, pc
    7c60:	4798      	blx	r3
    7c62:	1e03      	subs	r3, r0, #0
    7c64:	d001      	beq.n	7c6a <udc_process_setup+0x56>
			return true;
    7c66:	2301      	movs	r3, #1
    7c68:	e01e      	b.n	7ca8 <udc_process_setup+0x94>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    7c6a:	4b12      	ldr	r3, [pc, #72]	; (7cb4 <udc_process_setup+0xa0>)
    7c6c:	58e3      	ldr	r3, [r4, r3]
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	001a      	movs	r2, r3
    7c72:	231f      	movs	r3, #31
    7c74:	4013      	ands	r3, r2
    7c76:	2b01      	cmp	r3, #1
    7c78:	d106      	bne.n	7c88 <udc_process_setup+0x74>
		if (udc_req_iface()) {
    7c7a:	4b10      	ldr	r3, [pc, #64]	; (7cbc <udc_process_setup+0xa8>)
    7c7c:	447b      	add	r3, pc
    7c7e:	4798      	blx	r3
    7c80:	1e03      	subs	r3, r0, #0
    7c82:	d001      	beq.n	7c88 <udc_process_setup+0x74>
			return true;
    7c84:	2301      	movs	r3, #1
    7c86:	e00f      	b.n	7ca8 <udc_process_setup+0x94>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    7c88:	4b0a      	ldr	r3, [pc, #40]	; (7cb4 <udc_process_setup+0xa0>)
    7c8a:	58e3      	ldr	r3, [r4, r3]
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	001a      	movs	r2, r3
    7c90:	231f      	movs	r3, #31
    7c92:	4013      	ands	r3, r2
    7c94:	2b02      	cmp	r3, #2
    7c96:	d106      	bne.n	7ca6 <udc_process_setup+0x92>
		if (udc_req_ep()) {
    7c98:	4b09      	ldr	r3, [pc, #36]	; (7cc0 <udc_process_setup+0xac>)
    7c9a:	447b      	add	r3, pc
    7c9c:	4798      	blx	r3
    7c9e:	1e03      	subs	r3, r0, #0
    7ca0:	d001      	beq.n	7ca6 <udc_process_setup+0x92>
			return true;
    7ca2:	2301      	movs	r3, #1
    7ca4:	e000      	b.n	7ca8 <udc_process_setup+0x94>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    7ca6:	2300      	movs	r3, #0
#endif
}
    7ca8:	0018      	movs	r0, r3
    7caa:	46bd      	mov	sp, r7
    7cac:	bdb0      	pop	{r4, r5, r7, pc}
    7cae:	46c0      	nop			; (mov r8, r8)
    7cb0:	0000a246 	.word	0x0000a246
    7cb4:	000001e8 	.word	0x000001e8
    7cb8:	fffffc83 	.word	0xfffffc83
    7cbc:	fffffe1d 	.word	0xfffffe1d
    7cc0:	fffffec3 	.word	0xfffffec3

00007cc4 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
    7cc4:	b580      	push	{r7, lr}
    7cc6:	b082      	sub	sp, #8
    7cc8:	af00      	add	r7, sp, #0
    7cca:	6078      	str	r0, [r7, #4]
    7ccc:	000a      	movs	r2, r1
    7cce:	1cfb      	adds	r3, r7, #3
    7cd0:	701a      	strb	r2, [r3, #0]
    7cd2:	4a0e      	ldr	r2, [pc, #56]	; (7d0c <stdio_usb_putchar+0x48>)
    7cd4:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    7cd6:	4b0e      	ldr	r3, [pc, #56]	; (7d10 <stdio_usb_putchar+0x4c>)
    7cd8:	447b      	add	r3, pc
    7cda:	781b      	ldrb	r3, [r3, #0]
    7cdc:	2101      	movs	r1, #1
    7cde:	404b      	eors	r3, r1
    7ce0:	b2db      	uxtb	r3, r3
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d001      	beq.n	7cea <stdio_usb_putchar+0x26>
		return 0;  // -1
    7ce6:	2300      	movs	r3, #0
    7ce8:	e00b      	b.n	7d02 <stdio_usb_putchar+0x3e>
	}

	return udi_cdc_putc(data) ? 0 : -1;
    7cea:	1cfb      	adds	r3, r7, #3
    7cec:	781b      	ldrb	r3, [r3, #0]
    7cee:	0018      	movs	r0, r3
    7cf0:	4b08      	ldr	r3, [pc, #32]	; (7d14 <stdio_usb_putchar+0x50>)
    7cf2:	58d3      	ldr	r3, [r2, r3]
    7cf4:	4798      	blx	r3
    7cf6:	1e03      	subs	r3, r0, #0
    7cf8:	d001      	beq.n	7cfe <stdio_usb_putchar+0x3a>
    7cfa:	2300      	movs	r3, #0
    7cfc:	e001      	b.n	7d02 <stdio_usb_putchar+0x3e>
    7cfe:	2301      	movs	r3, #1
    7d00:	425b      	negs	r3, r3
}
    7d02:	0018      	movs	r0, r3
    7d04:	46bd      	mov	sp, r7
    7d06:	b002      	add	sp, #8
    7d08:	bd80      	pop	{r7, pc}
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	0000a18c 	.word	0x0000a18c
    7d10:	1fff8852 	.word	0x1fff8852
    7d14:	00000098 	.word	0x00000098

00007d18 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    7d18:	b580      	push	{r7, lr}
    7d1a:	b082      	sub	sp, #8
    7d1c:	af00      	add	r7, sp, #0
    7d1e:	6078      	str	r0, [r7, #4]
    7d20:	6039      	str	r1, [r7, #0]
    7d22:	4a0c      	ldr	r2, [pc, #48]	; (7d54 <stdio_usb_getchar+0x3c>)
    7d24:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    7d26:	4b0c      	ldr	r3, [pc, #48]	; (7d58 <stdio_usb_getchar+0x40>)
    7d28:	447b      	add	r3, pc
    7d2a:	781b      	ldrb	r3, [r3, #0]
    7d2c:	2101      	movs	r1, #1
    7d2e:	404b      	eors	r3, r1
    7d30:	b2db      	uxtb	r3, r3
    7d32:	2b00      	cmp	r3, #0
    7d34:	d003      	beq.n	7d3e <stdio_usb_getchar+0x26>
		*data = 0;  // -1
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	2200      	movs	r2, #0
    7d3a:	701a      	strb	r2, [r3, #0]
		return;
    7d3c:	e006      	b.n	7d4c <stdio_usb_getchar+0x34>
	}

	*data = (char)udi_cdc_getc();
    7d3e:	4b07      	ldr	r3, [pc, #28]	; (7d5c <stdio_usb_getchar+0x44>)
    7d40:	58d3      	ldr	r3, [r2, r3]
    7d42:	4798      	blx	r3
    7d44:	0003      	movs	r3, r0
    7d46:	b2da      	uxtb	r2, r3
    7d48:	683b      	ldr	r3, [r7, #0]
    7d4a:	701a      	strb	r2, [r3, #0]
}
    7d4c:	46bd      	mov	sp, r7
    7d4e:	b002      	add	sp, #8
    7d50:	bd80      	pop	{r7, pc}
    7d52:	46c0      	nop			; (mov r8, r8)
    7d54:	0000a13c 	.word	0x0000a13c
    7d58:	1fff8802 	.word	0x1fff8802
    7d5c:	00000284 	.word	0x00000284

00007d60 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
    7d60:	b580      	push	{r7, lr}
    7d62:	af00      	add	r7, sp, #0
	stdio_usb_interface_enable = true;
    7d64:	4b03      	ldr	r3, [pc, #12]	; (7d74 <stdio_usb_enable+0x14>)
    7d66:	447b      	add	r3, pc
    7d68:	2201      	movs	r2, #1
    7d6a:	701a      	strb	r2, [r3, #0]
	return true;
    7d6c:	2301      	movs	r3, #1
}
    7d6e:	0018      	movs	r0, r3
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}
    7d74:	1fff87c4 	.word	0x1fff87c4

00007d78 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
    7d78:	b5b0      	push	{r4, r5, r7, lr}
    7d7a:	af00      	add	r7, sp, #0
    7d7c:	4c13      	ldr	r4, [pc, #76]	; (7dcc <stdio_usb_init+0x54>)
    7d7e:	447c      	add	r4, pc
	stdio_base = NULL;
    7d80:	4b13      	ldr	r3, [pc, #76]	; (7dd0 <stdio_usb_init+0x58>)
    7d82:	58e3      	ldr	r3, [r4, r3]
    7d84:	2200      	movs	r2, #0
    7d86:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    7d88:	4b12      	ldr	r3, [pc, #72]	; (7dd4 <stdio_usb_init+0x5c>)
    7d8a:	58e3      	ldr	r3, [r4, r3]
    7d8c:	4a12      	ldr	r2, [pc, #72]	; (7dd8 <stdio_usb_init+0x60>)
    7d8e:	58a2      	ldr	r2, [r4, r2]
    7d90:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    7d92:	4b12      	ldr	r3, [pc, #72]	; (7ddc <stdio_usb_init+0x64>)
    7d94:	58e3      	ldr	r3, [r4, r3]
    7d96:	4a12      	ldr	r2, [pc, #72]	; (7de0 <stdio_usb_init+0x68>)
    7d98:	58a2      	ldr	r2, [r4, r2]
    7d9a:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    7d9c:	4b11      	ldr	r3, [pc, #68]	; (7de4 <stdio_usb_init+0x6c>)
    7d9e:	58e3      	ldr	r3, [r4, r3]
    7da0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7da2:	4b11      	ldr	r3, [pc, #68]	; (7de8 <stdio_usb_init+0x70>)
    7da4:	58e3      	ldr	r3, [r4, r3]
    7da6:	681b      	ldr	r3, [r3, #0]
    7da8:	689b      	ldr	r3, [r3, #8]
    7daa:	2100      	movs	r1, #0
    7dac:	0018      	movs	r0, r3
    7dae:	4b0f      	ldr	r3, [pc, #60]	; (7dec <stdio_usb_init+0x74>)
    7db0:	58e3      	ldr	r3, [r4, r3]
    7db2:	4798      	blx	r3
	setbuf(stdin, NULL);
    7db4:	4b0c      	ldr	r3, [pc, #48]	; (7de8 <stdio_usb_init+0x70>)
    7db6:	58e3      	ldr	r3, [r4, r3]
    7db8:	681b      	ldr	r3, [r3, #0]
    7dba:	685b      	ldr	r3, [r3, #4]
    7dbc:	2100      	movs	r1, #0
    7dbe:	0018      	movs	r0, r3
    7dc0:	4b0a      	ldr	r3, [pc, #40]	; (7dec <stdio_usb_init+0x74>)
    7dc2:	58e3      	ldr	r3, [r4, r3]
    7dc4:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	46bd      	mov	sp, r7
    7dca:	bdb0      	pop	{r4, r5, r7, pc}
    7dcc:	0000a0e2 	.word	0x0000a0e2
    7dd0:	00000204 	.word	0x00000204
    7dd4:	0000011c 	.word	0x0000011c
    7dd8:	00000160 	.word	0x00000160
    7ddc:	000000f0 	.word	0x000000f0
    7de0:	00000120 	.word	0x00000120
    7de4:	000002c8 	.word	0x000002c8
    7de8:	00000250 	.word	0x00000250
    7dec:	000002a8 	.word	0x000002a8

00007df0 <system_gclk_chan_get_config_defaults>:
{
    7df0:	b580      	push	{r7, lr}
    7df2:	b082      	sub	sp, #8
    7df4:	af00      	add	r7, sp, #0
    7df6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	2200      	movs	r2, #0
    7dfc:	701a      	strb	r2, [r3, #0]
}
    7dfe:	46c0      	nop			; (mov r8, r8)
    7e00:	46bd      	mov	sp, r7
    7e02:	b002      	add	sp, #8
    7e04:	bd80      	pop	{r7, pc}
	...

00007e08 <system_apb_clock_set_mask>:
{
    7e08:	b580      	push	{r7, lr}
    7e0a:	b082      	sub	sp, #8
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	0002      	movs	r2, r0
    7e10:	6039      	str	r1, [r7, #0]
    7e12:	1dfb      	adds	r3, r7, #7
    7e14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7e16:	1dfb      	adds	r3, r7, #7
    7e18:	781b      	ldrb	r3, [r3, #0]
    7e1a:	2b01      	cmp	r3, #1
    7e1c:	d00a      	beq.n	7e34 <system_apb_clock_set_mask+0x2c>
    7e1e:	2b02      	cmp	r3, #2
    7e20:	d00f      	beq.n	7e42 <system_apb_clock_set_mask+0x3a>
    7e22:	2b00      	cmp	r3, #0
    7e24:	d114      	bne.n	7e50 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7e26:	4b0e      	ldr	r3, [pc, #56]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e28:	4a0d      	ldr	r2, [pc, #52]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e2a:	6991      	ldr	r1, [r2, #24]
    7e2c:	683a      	ldr	r2, [r7, #0]
    7e2e:	430a      	orrs	r2, r1
    7e30:	619a      	str	r2, [r3, #24]
			break;
    7e32:	e00f      	b.n	7e54 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7e34:	4b0a      	ldr	r3, [pc, #40]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e36:	4a0a      	ldr	r2, [pc, #40]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e38:	69d1      	ldr	r1, [r2, #28]
    7e3a:	683a      	ldr	r2, [r7, #0]
    7e3c:	430a      	orrs	r2, r1
    7e3e:	61da      	str	r2, [r3, #28]
			break;
    7e40:	e008      	b.n	7e54 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7e42:	4b07      	ldr	r3, [pc, #28]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e44:	4a06      	ldr	r2, [pc, #24]	; (7e60 <system_apb_clock_set_mask+0x58>)
    7e46:	6a11      	ldr	r1, [r2, #32]
    7e48:	683a      	ldr	r2, [r7, #0]
    7e4a:	430a      	orrs	r2, r1
    7e4c:	621a      	str	r2, [r3, #32]
			break;
    7e4e:	e001      	b.n	7e54 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7e50:	2317      	movs	r3, #23
    7e52:	e000      	b.n	7e56 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7e54:	2300      	movs	r3, #0
}
    7e56:	0018      	movs	r0, r3
    7e58:	46bd      	mov	sp, r7
    7e5a:	b002      	add	sp, #8
    7e5c:	bd80      	pop	{r7, pc}
    7e5e:	46c0      	nop			; (mov r8, r8)
    7e60:	40000400 	.word	0x40000400

00007e64 <system_pinmux_get_config_defaults>:
{
    7e64:	b580      	push	{r7, lr}
    7e66:	b082      	sub	sp, #8
    7e68:	af00      	add	r7, sp, #0
    7e6a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	2280      	movs	r2, #128	; 0x80
    7e70:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7e72:	687b      	ldr	r3, [r7, #4]
    7e74:	2200      	movs	r2, #0
    7e76:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	2201      	movs	r2, #1
    7e7c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	2200      	movs	r2, #0
    7e82:	70da      	strb	r2, [r3, #3]
}
    7e84:	46c0      	nop			; (mov r8, r8)
    7e86:	46bd      	mov	sp, r7
    7e88:	b002      	add	sp, #8
    7e8a:	bd80      	pop	{r7, pc}

00007e8c <system_interrupt_enable>:
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	b082      	sub	sp, #8
    7e90:	af00      	add	r7, sp, #0
    7e92:	0002      	movs	r2, r0
    7e94:	1dfb      	adds	r3, r7, #7
    7e96:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7e98:	4b06      	ldr	r3, [pc, #24]	; (7eb4 <system_interrupt_enable+0x28>)
    7e9a:	1dfa      	adds	r2, r7, #7
    7e9c:	7812      	ldrb	r2, [r2, #0]
    7e9e:	0011      	movs	r1, r2
    7ea0:	221f      	movs	r2, #31
    7ea2:	400a      	ands	r2, r1
    7ea4:	2101      	movs	r1, #1
    7ea6:	4091      	lsls	r1, r2
    7ea8:	000a      	movs	r2, r1
    7eaa:	601a      	str	r2, [r3, #0]
}
    7eac:	46c0      	nop			; (mov r8, r8)
    7eae:	46bd      	mov	sp, r7
    7eb0:	b002      	add	sp, #8
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	e000e100 	.word	0xe000e100

00007eb8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b084      	sub	sp, #16
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	0002      	movs	r2, r0
    7ec0:	1dfb      	adds	r3, r7, #7
    7ec2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    7ec4:	230f      	movs	r3, #15
    7ec6:	18fb      	adds	r3, r7, r3
    7ec8:	1dfa      	adds	r2, r7, #7
    7eca:	7812      	ldrb	r2, [r2, #0]
    7ecc:	0952      	lsrs	r2, r2, #5
    7ece:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    7ed0:	230f      	movs	r3, #15
    7ed2:	18fb      	adds	r3, r7, r3
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	d10c      	bne.n	7ef4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7eda:	4b09      	ldr	r3, [pc, #36]	; (7f00 <_extint_get_eic_from_channel+0x48>)
    7edc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    7ede:	230f      	movs	r3, #15
    7ee0:	18fb      	adds	r3, r7, r3
    7ee2:	781b      	ldrb	r3, [r3, #0]
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	2210      	movs	r2, #16
    7ee8:	4694      	mov	ip, r2
    7eea:	44bc      	add	ip, r7
    7eec:	4463      	add	r3, ip
    7eee:	3b08      	subs	r3, #8
    7ef0:	681b      	ldr	r3, [r3, #0]
    7ef2:	e000      	b.n	7ef6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    7ef4:	2300      	movs	r3, #0
	}
}
    7ef6:	0018      	movs	r0, r3
    7ef8:	46bd      	mov	sp, r7
    7efa:	b004      	add	sp, #16
    7efc:	bd80      	pop	{r7, pc}
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	40001800 	.word	0x40001800

00007f04 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    7f04:	b580      	push	{r7, lr}
    7f06:	b082      	sub	sp, #8
    7f08:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7f0a:	4b0f      	ldr	r3, [pc, #60]	; (7f48 <extint_is_syncing+0x44>)
    7f0c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7f0e:	2300      	movs	r3, #0
    7f10:	607b      	str	r3, [r7, #4]
    7f12:	e011      	b.n	7f38 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	009b      	lsls	r3, r3, #2
    7f18:	2208      	movs	r2, #8
    7f1a:	4694      	mov	ip, r2
    7f1c:	44bc      	add	ip, r7
    7f1e:	4463      	add	r3, ip
    7f20:	3b08      	subs	r3, #8
    7f22:	681b      	ldr	r3, [r3, #0]
    7f24:	785b      	ldrb	r3, [r3, #1]
    7f26:	b2db      	uxtb	r3, r3
    7f28:	b25b      	sxtb	r3, r3
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	da01      	bge.n	7f32 <extint_is_syncing+0x2e>
			return true;
    7f2e:	2301      	movs	r3, #1
    7f30:	e006      	b.n	7f40 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	3301      	adds	r3, #1
    7f36:	607b      	str	r3, [r7, #4]
    7f38:	687b      	ldr	r3, [r7, #4]
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d0ea      	beq.n	7f14 <extint_is_syncing+0x10>
		}
	}
	return false;
    7f3e:	2300      	movs	r3, #0
}
    7f40:	0018      	movs	r0, r3
    7f42:	46bd      	mov	sp, r7
    7f44:	b002      	add	sp, #8
    7f46:	bd80      	pop	{r7, pc}
    7f48:	40001800 	.word	0x40001800

00007f4c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    7f4c:	b590      	push	{r4, r7, lr}
    7f4e:	b085      	sub	sp, #20
    7f50:	af00      	add	r7, sp, #0
    7f52:	4c32      	ldr	r4, [pc, #200]	; (801c <_system_extint_init+0xd0>)
    7f54:	447c      	add	r4, pc
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7f56:	4b32      	ldr	r3, [pc, #200]	; (8020 <_system_extint_init+0xd4>)
    7f58:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    7f5a:	2140      	movs	r1, #64	; 0x40
    7f5c:	2000      	movs	r0, #0
    7f5e:	4b31      	ldr	r3, [pc, #196]	; (8024 <_system_extint_init+0xd8>)
    7f60:	447b      	add	r3, pc
    7f62:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7f64:	003b      	movs	r3, r7
    7f66:	0018      	movs	r0, r3
    7f68:	4b2f      	ldr	r3, [pc, #188]	; (8028 <_system_extint_init+0xdc>)
    7f6a:	447b      	add	r3, pc
    7f6c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    7f6e:	003b      	movs	r3, r7
    7f70:	2202      	movs	r2, #2
    7f72:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    7f74:	003b      	movs	r3, r7
    7f76:	0019      	movs	r1, r3
    7f78:	2005      	movs	r0, #5
    7f7a:	4b2c      	ldr	r3, [pc, #176]	; (802c <_system_extint_init+0xe0>)
    7f7c:	58e3      	ldr	r3, [r4, r3]
    7f7e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    7f80:	2005      	movs	r0, #5
    7f82:	4b2b      	ldr	r3, [pc, #172]	; (8030 <_system_extint_init+0xe4>)
    7f84:	58e3      	ldr	r3, [r4, r3]
    7f86:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7f88:	2300      	movs	r3, #0
    7f8a:	60fb      	str	r3, [r7, #12]
    7f8c:	e018      	b.n	7fc0 <_system_extint_init+0x74>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    7f8e:	68fb      	ldr	r3, [r7, #12]
    7f90:	009b      	lsls	r3, r3, #2
    7f92:	2210      	movs	r2, #16
    7f94:	4694      	mov	ip, r2
    7f96:	44bc      	add	ip, r7
    7f98:	4463      	add	r3, ip
    7f9a:	3b0c      	subs	r3, #12
    7f9c:	681a      	ldr	r2, [r3, #0]
    7f9e:	68fb      	ldr	r3, [r7, #12]
    7fa0:	009b      	lsls	r3, r3, #2
    7fa2:	2110      	movs	r1, #16
    7fa4:	468c      	mov	ip, r1
    7fa6:	44bc      	add	ip, r7
    7fa8:	4463      	add	r3, ip
    7faa:	3b0c      	subs	r3, #12
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	b2db      	uxtb	r3, r3
    7fb2:	2101      	movs	r1, #1
    7fb4:	430b      	orrs	r3, r1
    7fb6:	b2db      	uxtb	r3, r3
    7fb8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7fba:	68fb      	ldr	r3, [r7, #12]
    7fbc:	3301      	adds	r3, #1
    7fbe:	60fb      	str	r3, [r7, #12]
    7fc0:	68fb      	ldr	r3, [r7, #12]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	d0e3      	beq.n	7f8e <_system_extint_init+0x42>
	}

	while (extint_is_syncing()) {
    7fc6:	46c0      	nop			; (mov r8, r8)
    7fc8:	4b1a      	ldr	r3, [pc, #104]	; (8034 <_system_extint_init+0xe8>)
    7fca:	447b      	add	r3, pc
    7fcc:	4798      	blx	r3
    7fce:	1e03      	subs	r3, r0, #0
    7fd0:	d1fa      	bne.n	7fc8 <_system_extint_init+0x7c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7fd2:	230b      	movs	r3, #11
    7fd4:	18fb      	adds	r3, r7, r3
    7fd6:	2200      	movs	r2, #0
    7fd8:	701a      	strb	r2, [r3, #0]
    7fda:	e00e      	b.n	7ffa <_system_extint_init+0xae>
		_extint_dev.callbacks[j] = NULL;
    7fdc:	230b      	movs	r3, #11
    7fde:	18fb      	adds	r3, r7, r3
    7fe0:	781a      	ldrb	r2, [r3, #0]
    7fe2:	4b15      	ldr	r3, [pc, #84]	; (8038 <_system_extint_init+0xec>)
    7fe4:	58e3      	ldr	r3, [r4, r3]
    7fe6:	0092      	lsls	r2, r2, #2
    7fe8:	2100      	movs	r1, #0
    7fea:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7fec:	230b      	movs	r3, #11
    7fee:	18fb      	adds	r3, r7, r3
    7ff0:	781a      	ldrb	r2, [r3, #0]
    7ff2:	230b      	movs	r3, #11
    7ff4:	18fb      	adds	r3, r7, r3
    7ff6:	3201      	adds	r2, #1
    7ff8:	701a      	strb	r2, [r3, #0]
    7ffa:	230b      	movs	r3, #11
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	2b0f      	cmp	r3, #15
    8002:	d9eb      	bls.n	7fdc <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    8004:	2004      	movs	r0, #4
    8006:	4b0d      	ldr	r3, [pc, #52]	; (803c <_system_extint_init+0xf0>)
    8008:	447b      	add	r3, pc
    800a:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    800c:	4b0c      	ldr	r3, [pc, #48]	; (8040 <_system_extint_init+0xf4>)
    800e:	447b      	add	r3, pc
    8010:	4798      	blx	r3
}
    8012:	46c0      	nop			; (mov r8, r8)
    8014:	46bd      	mov	sp, r7
    8016:	b005      	add	sp, #20
    8018:	bd90      	pop	{r4, r7, pc}
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	00009f0c 	.word	0x00009f0c
    8020:	40001800 	.word	0x40001800
    8024:	fffffea5 	.word	0xfffffea5
    8028:	fffffe83 	.word	0xfffffe83
    802c:	000000b0 	.word	0x000000b0
    8030:	00000238 	.word	0x00000238
    8034:	ffffff37 	.word	0xffffff37
    8038:	00000180 	.word	0x00000180
    803c:	fffffe81 	.word	0xfffffe81
    8040:	00000033 	.word	0x00000033

00008044 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    8044:	b580      	push	{r7, lr}
    8046:	b082      	sub	sp, #8
    8048:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    804a:	4b15      	ldr	r3, [pc, #84]	; (80a0 <_extint_enable+0x5c>)
    804c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    804e:	2300      	movs	r3, #0
    8050:	607b      	str	r3, [r7, #4]
    8052:	e018      	b.n	8086 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    8054:	687b      	ldr	r3, [r7, #4]
    8056:	009b      	lsls	r3, r3, #2
    8058:	2208      	movs	r2, #8
    805a:	4694      	mov	ip, r2
    805c:	44bc      	add	ip, r7
    805e:	4463      	add	r3, ip
    8060:	3b08      	subs	r3, #8
    8062:	681a      	ldr	r2, [r3, #0]
    8064:	687b      	ldr	r3, [r7, #4]
    8066:	009b      	lsls	r3, r3, #2
    8068:	2108      	movs	r1, #8
    806a:	468c      	mov	ip, r1
    806c:	44bc      	add	ip, r7
    806e:	4463      	add	r3, ip
    8070:	3b08      	subs	r3, #8
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	b2db      	uxtb	r3, r3
    8078:	2102      	movs	r1, #2
    807a:	430b      	orrs	r3, r1
    807c:	b2db      	uxtb	r3, r3
    807e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8080:	687b      	ldr	r3, [r7, #4]
    8082:	3301      	adds	r3, #1
    8084:	607b      	str	r3, [r7, #4]
    8086:	687b      	ldr	r3, [r7, #4]
    8088:	2b00      	cmp	r3, #0
    808a:	d0e3      	beq.n	8054 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    808c:	46c0      	nop			; (mov r8, r8)
    808e:	4b05      	ldr	r3, [pc, #20]	; (80a4 <_extint_enable+0x60>)
    8090:	447b      	add	r3, pc
    8092:	4798      	blx	r3
    8094:	1e03      	subs	r3, r0, #0
    8096:	d1fa      	bne.n	808e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    8098:	46c0      	nop			; (mov r8, r8)
    809a:	46bd      	mov	sp, r7
    809c:	b002      	add	sp, #8
    809e:	bd80      	pop	{r7, pc}
    80a0:	40001800 	.word	0x40001800
    80a4:	fffffe71 	.word	0xfffffe71

000080a8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    80a8:	b580      	push	{r7, lr}
    80aa:	b082      	sub	sp, #8
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	2200      	movs	r2, #0
    80b4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    80b6:	687b      	ldr	r3, [r7, #4]
    80b8:	2200      	movs	r2, #0
    80ba:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	2201      	movs	r2, #1
    80c0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	2201      	movs	r2, #1
    80c6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    80c8:	687b      	ldr	r3, [r7, #4]
    80ca:	2200      	movs	r2, #0
    80cc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    80ce:	687b      	ldr	r3, [r7, #4]
    80d0:	2202      	movs	r2, #2
    80d2:	72da      	strb	r2, [r3, #11]
}
    80d4:	46c0      	nop			; (mov r8, r8)
    80d6:	46bd      	mov	sp, r7
    80d8:	b002      	add	sp, #8
    80da:	bd80      	pop	{r7, pc}

000080dc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    80dc:	b590      	push	{r4, r7, lr}
    80de:	b087      	sub	sp, #28
    80e0:	af00      	add	r7, sp, #0
    80e2:	0002      	movs	r2, r0
    80e4:	6039      	str	r1, [r7, #0]
    80e6:	1dfb      	adds	r3, r7, #7
    80e8:	701a      	strb	r2, [r3, #0]
    80ea:	4c3b      	ldr	r4, [pc, #236]	; (81d8 <extint_chan_set_config+0xfc>)
    80ec:	447c      	add	r4, pc
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    80ee:	2308      	movs	r3, #8
    80f0:	18fb      	adds	r3, r7, r3
    80f2:	0018      	movs	r0, r3
    80f4:	4b39      	ldr	r3, [pc, #228]	; (81dc <extint_chan_set_config+0x100>)
    80f6:	447b      	add	r3, pc
    80f8:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    80fa:	683b      	ldr	r3, [r7, #0]
    80fc:	685b      	ldr	r3, [r3, #4]
    80fe:	b2da      	uxtb	r2, r3
    8100:	2308      	movs	r3, #8
    8102:	18fb      	adds	r3, r7, r3
    8104:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8106:	2308      	movs	r3, #8
    8108:	18fb      	adds	r3, r7, r3
    810a:	2200      	movs	r2, #0
    810c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    810e:	683b      	ldr	r3, [r7, #0]
    8110:	7a1a      	ldrb	r2, [r3, #8]
    8112:	2308      	movs	r3, #8
    8114:	18fb      	adds	r3, r7, r3
    8116:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    8118:	683b      	ldr	r3, [r7, #0]
    811a:	681b      	ldr	r3, [r3, #0]
    811c:	b2db      	uxtb	r3, r3
    811e:	2208      	movs	r2, #8
    8120:	18ba      	adds	r2, r7, r2
    8122:	0011      	movs	r1, r2
    8124:	0018      	movs	r0, r3
    8126:	4b2e      	ldr	r3, [pc, #184]	; (81e0 <extint_chan_set_config+0x104>)
    8128:	58e3      	ldr	r3, [r4, r3]
    812a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    812c:	1dfb      	adds	r3, r7, #7
    812e:	781b      	ldrb	r3, [r3, #0]
    8130:	0018      	movs	r0, r3
    8132:	4b2c      	ldr	r3, [pc, #176]	; (81e4 <extint_chan_set_config+0x108>)
    8134:	447b      	add	r3, pc
    8136:	4798      	blx	r3
    8138:	0003      	movs	r3, r0
    813a:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    813c:	1dfb      	adds	r3, r7, #7
    813e:	781b      	ldrb	r3, [r3, #0]
    8140:	2207      	movs	r2, #7
    8142:	4013      	ands	r3, r2
    8144:	009b      	lsls	r3, r3, #2
    8146:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    8148:	683b      	ldr	r3, [r7, #0]
    814a:	7adb      	ldrb	r3, [r3, #11]
    814c:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    814e:	683b      	ldr	r3, [r7, #0]
    8150:	7a9b      	ldrb	r3, [r3, #10]
    8152:	2b00      	cmp	r3, #0
    8154:	d003      	beq.n	815e <extint_chan_set_config+0x82>
		new_config |= EIC_CONFIG_FILTEN0;
    8156:	697b      	ldr	r3, [r7, #20]
    8158:	2208      	movs	r2, #8
    815a:	4313      	orrs	r3, r2
    815c:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    815e:	1dfb      	adds	r3, r7, #7
    8160:	781b      	ldrb	r3, [r3, #0]
    8162:	08db      	lsrs	r3, r3, #3
    8164:	b2db      	uxtb	r3, r3
    8166:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    8168:	1dfb      	adds	r3, r7, #7
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	08db      	lsrs	r3, r3, #3
    816e:	b2db      	uxtb	r3, r3
    8170:	001a      	movs	r2, r3
    8172:	693b      	ldr	r3, [r7, #16]
    8174:	3206      	adds	r2, #6
    8176:	0092      	lsls	r2, r2, #2
    8178:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    817a:	210f      	movs	r1, #15
    817c:	68fa      	ldr	r2, [r7, #12]
    817e:	4091      	lsls	r1, r2
    8180:	000a      	movs	r2, r1
    8182:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    8184:	401a      	ands	r2, r3
			(new_config << config_pos);
    8186:	6979      	ldr	r1, [r7, #20]
    8188:	68fb      	ldr	r3, [r7, #12]
    818a:	4099      	lsls	r1, r3
    818c:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    818e:	431a      	orrs	r2, r3
    8190:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    8192:	693b      	ldr	r3, [r7, #16]
    8194:	1d82      	adds	r2, r0, #6
    8196:	0092      	lsls	r2, r2, #2
    8198:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    819a:	683b      	ldr	r3, [r7, #0]
    819c:	7a5b      	ldrb	r3, [r3, #9]
    819e:	2b00      	cmp	r3, #0
    81a0:	d00a      	beq.n	81b8 <extint_chan_set_config+0xdc>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    81a2:	693b      	ldr	r3, [r7, #16]
    81a4:	695a      	ldr	r2, [r3, #20]
    81a6:	1dfb      	adds	r3, r7, #7
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	2101      	movs	r1, #1
    81ac:	4099      	lsls	r1, r3
    81ae:	000b      	movs	r3, r1
    81b0:	431a      	orrs	r2, r3
    81b2:	693b      	ldr	r3, [r7, #16]
    81b4:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    81b6:	e00a      	b.n	81ce <extint_chan_set_config+0xf2>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    81b8:	693b      	ldr	r3, [r7, #16]
    81ba:	695b      	ldr	r3, [r3, #20]
    81bc:	1dfa      	adds	r2, r7, #7
    81be:	7812      	ldrb	r2, [r2, #0]
    81c0:	2101      	movs	r1, #1
    81c2:	4091      	lsls	r1, r2
    81c4:	000a      	movs	r2, r1
    81c6:	43d2      	mvns	r2, r2
    81c8:	401a      	ands	r2, r3
    81ca:	693b      	ldr	r3, [r7, #16]
    81cc:	615a      	str	r2, [r3, #20]
}
    81ce:	46c0      	nop			; (mov r8, r8)
    81d0:	46bd      	mov	sp, r7
    81d2:	b007      	add	sp, #28
    81d4:	bd90      	pop	{r4, r7, pc}
    81d6:	46c0      	nop			; (mov r8, r8)
    81d8:	00009d74 	.word	0x00009d74
    81dc:	fffffd6b 	.word	0xfffffd6b
    81e0:	000002b8 	.word	0x000002b8
    81e4:	fffffd81 	.word	0xfffffd81

000081e8 <system_gclk_chan_get_config_defaults>:
{
    81e8:	b580      	push	{r7, lr}
    81ea:	b082      	sub	sp, #8
    81ec:	af00      	add	r7, sp, #0
    81ee:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    81f0:	687b      	ldr	r3, [r7, #4]
    81f2:	2200      	movs	r2, #0
    81f4:	701a      	strb	r2, [r3, #0]
}
    81f6:	46c0      	nop			; (mov r8, r8)
    81f8:	46bd      	mov	sp, r7
    81fa:	b002      	add	sp, #8
    81fc:	bd80      	pop	{r7, pc}

000081fe <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    81fe:	b580      	push	{r7, lr}
    8200:	b086      	sub	sp, #24
    8202:	af00      	add	r7, sp, #0
    8204:	60f8      	str	r0, [r7, #12]
    8206:	60b9      	str	r1, [r7, #8]
    8208:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    820a:	2316      	movs	r3, #22
    820c:	18fb      	adds	r3, r7, r3
    820e:	2200      	movs	r2, #0
    8210:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    8212:	68bb      	ldr	r3, [r7, #8]
    8214:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    8216:	68bb      	ldr	r3, [r7, #8]
    8218:	085a      	lsrs	r2, r3, #1
    821a:	68fb      	ldr	r3, [r7, #12]
    821c:	429a      	cmp	r2, r3
    821e:	d201      	bcs.n	8224 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    8220:	2340      	movs	r3, #64	; 0x40
    8222:	e026      	b.n	8272 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    8224:	68bb      	ldr	r3, [r7, #8]
    8226:	085b      	lsrs	r3, r3, #1
    8228:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    822a:	e00a      	b.n	8242 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    822c:	693a      	ldr	r2, [r7, #16]
    822e:	68fb      	ldr	r3, [r7, #12]
    8230:	1ad3      	subs	r3, r2, r3
    8232:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    8234:	2316      	movs	r3, #22
    8236:	18fb      	adds	r3, r7, r3
    8238:	881a      	ldrh	r2, [r3, #0]
    823a:	2316      	movs	r3, #22
    823c:	18fb      	adds	r3, r7, r3
    823e:	3201      	adds	r2, #1
    8240:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    8242:	693a      	ldr	r2, [r7, #16]
    8244:	68fb      	ldr	r3, [r7, #12]
    8246:	429a      	cmp	r2, r3
    8248:	d2f0      	bcs.n	822c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    824a:	2316      	movs	r3, #22
    824c:	18fb      	adds	r3, r7, r3
    824e:	2216      	movs	r2, #22
    8250:	18ba      	adds	r2, r7, r2
    8252:	8812      	ldrh	r2, [r2, #0]
    8254:	3a01      	subs	r2, #1
    8256:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    8258:	2316      	movs	r3, #22
    825a:	18fb      	adds	r3, r7, r3
    825c:	881b      	ldrh	r3, [r3, #0]
    825e:	2bff      	cmp	r3, #255	; 0xff
    8260:	d901      	bls.n	8266 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    8262:	2340      	movs	r3, #64	; 0x40
    8264:	e005      	b.n	8272 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    8266:	687b      	ldr	r3, [r7, #4]
    8268:	2216      	movs	r2, #22
    826a:	18ba      	adds	r2, r7, r2
    826c:	8812      	ldrh	r2, [r2, #0]
    826e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    8270:	2300      	movs	r3, #0
	}
}
    8272:	0018      	movs	r0, r3
    8274:	46bd      	mov	sp, r7
    8276:	b006      	add	sp, #24
    8278:	bd80      	pop	{r7, pc}
	...

0000827c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    827c:	b590      	push	{r4, r7, lr}
    827e:	b085      	sub	sp, #20
    8280:	af00      	add	r7, sp, #0
    8282:	0002      	movs	r2, r0
    8284:	1dfb      	adds	r3, r7, #7
    8286:	701a      	strb	r2, [r3, #0]
    8288:	1dbb      	adds	r3, r7, #6
    828a:	1c0a      	adds	r2, r1, #0
    828c:	701a      	strb	r2, [r3, #0]
    828e:	4c1e      	ldr	r4, [pc, #120]	; (8308 <sercom_set_gclk_generator+0x8c>)
    8290:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    8292:	4b1e      	ldr	r3, [pc, #120]	; (830c <sercom_set_gclk_generator+0x90>)
    8294:	447b      	add	r3, pc
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2201      	movs	r2, #1
    829a:	4053      	eors	r3, r2
    829c:	b2db      	uxtb	r3, r3
    829e:	2b00      	cmp	r3, #0
    82a0:	d103      	bne.n	82aa <sercom_set_gclk_generator+0x2e>
    82a2:	1dbb      	adds	r3, r7, #6
    82a4:	781b      	ldrb	r3, [r3, #0]
    82a6:	2b00      	cmp	r3, #0
    82a8:	d020      	beq.n	82ec <sercom_set_gclk_generator+0x70>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    82aa:	230c      	movs	r3, #12
    82ac:	18fb      	adds	r3, r7, r3
    82ae:	0018      	movs	r0, r3
    82b0:	4b17      	ldr	r3, [pc, #92]	; (8310 <sercom_set_gclk_generator+0x94>)
    82b2:	447b      	add	r3, pc
    82b4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    82b6:	230c      	movs	r3, #12
    82b8:	18fb      	adds	r3, r7, r3
    82ba:	1dfa      	adds	r2, r7, #7
    82bc:	7812      	ldrb	r2, [r2, #0]
    82be:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    82c0:	230c      	movs	r3, #12
    82c2:	18fb      	adds	r3, r7, r3
    82c4:	0019      	movs	r1, r3
    82c6:	2013      	movs	r0, #19
    82c8:	4b12      	ldr	r3, [pc, #72]	; (8314 <sercom_set_gclk_generator+0x98>)
    82ca:	58e3      	ldr	r3, [r4, r3]
    82cc:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    82ce:	2013      	movs	r0, #19
    82d0:	4b11      	ldr	r3, [pc, #68]	; (8318 <sercom_set_gclk_generator+0x9c>)
    82d2:	58e3      	ldr	r3, [r4, r3]
    82d4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    82d6:	4b11      	ldr	r3, [pc, #68]	; (831c <sercom_set_gclk_generator+0xa0>)
    82d8:	447b      	add	r3, pc
    82da:	1dfa      	adds	r2, r7, #7
    82dc:	7812      	ldrb	r2, [r2, #0]
    82de:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    82e0:	4b0f      	ldr	r3, [pc, #60]	; (8320 <sercom_set_gclk_generator+0xa4>)
    82e2:	447b      	add	r3, pc
    82e4:	2201      	movs	r2, #1
    82e6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    82e8:	2300      	movs	r3, #0
    82ea:	e009      	b.n	8300 <sercom_set_gclk_generator+0x84>
	} else if (generator_source == _sercom_config.generator_source) {
    82ec:	4b0d      	ldr	r3, [pc, #52]	; (8324 <sercom_set_gclk_generator+0xa8>)
    82ee:	447b      	add	r3, pc
    82f0:	785b      	ldrb	r3, [r3, #1]
    82f2:	1dfa      	adds	r2, r7, #7
    82f4:	7812      	ldrb	r2, [r2, #0]
    82f6:	429a      	cmp	r2, r3
    82f8:	d101      	bne.n	82fe <sercom_set_gclk_generator+0x82>
		/* Return status OK if same config */
		return STATUS_OK;
    82fa:	2300      	movs	r3, #0
    82fc:	e000      	b.n	8300 <sercom_set_gclk_generator+0x84>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    82fe:	231d      	movs	r3, #29
}
    8300:	0018      	movs	r0, r3
    8302:	46bd      	mov	sp, r7
    8304:	b005      	add	sp, #20
    8306:	bd90      	pop	{r4, r7, pc}
    8308:	00009bd0 	.word	0x00009bd0
    830c:	1fff8298 	.word	0x1fff8298
    8310:	ffffff33 	.word	0xffffff33
    8314:	000000b0 	.word	0x000000b0
    8318:	00000238 	.word	0x00000238
    831c:	1fff8254 	.word	0x1fff8254
    8320:	1fff824a 	.word	0x1fff824a
    8324:	1fff823e 	.word	0x1fff823e

00008328 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    8328:	b580      	push	{r7, lr}
    832a:	b082      	sub	sp, #8
    832c:	af00      	add	r7, sp, #0
    832e:	6078      	str	r0, [r7, #4]
    8330:	000a      	movs	r2, r1
    8332:	1cfb      	adds	r3, r7, #3
    8334:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    8336:	687b      	ldr	r3, [r7, #4]
    8338:	4a57      	ldr	r2, [pc, #348]	; (8498 <_sercom_get_default_pad+0x170>)
    833a:	4293      	cmp	r3, r2
    833c:	d046      	beq.n	83cc <_sercom_get_default_pad+0xa4>
    833e:	4a56      	ldr	r2, [pc, #344]	; (8498 <_sercom_get_default_pad+0x170>)
    8340:	4293      	cmp	r3, r2
    8342:	d806      	bhi.n	8352 <_sercom_get_default_pad+0x2a>
    8344:	4a55      	ldr	r2, [pc, #340]	; (849c <_sercom_get_default_pad+0x174>)
    8346:	4293      	cmp	r3, r2
    8348:	d00f      	beq.n	836a <_sercom_get_default_pad+0x42>
    834a:	4a55      	ldr	r2, [pc, #340]	; (84a0 <_sercom_get_default_pad+0x178>)
    834c:	4293      	cmp	r3, r2
    834e:	d025      	beq.n	839c <_sercom_get_default_pad+0x74>
    8350:	e09d      	b.n	848e <_sercom_get_default_pad+0x166>
    8352:	4a54      	ldr	r2, [pc, #336]	; (84a4 <_sercom_get_default_pad+0x17c>)
    8354:	4293      	cmp	r3, r2
    8356:	d100      	bne.n	835a <_sercom_get_default_pad+0x32>
    8358:	e068      	b.n	842c <_sercom_get_default_pad+0x104>
    835a:	4a53      	ldr	r2, [pc, #332]	; (84a8 <_sercom_get_default_pad+0x180>)
    835c:	4293      	cmp	r3, r2
    835e:	d100      	bne.n	8362 <_sercom_get_default_pad+0x3a>
    8360:	e07c      	b.n	845c <_sercom_get_default_pad+0x134>
    8362:	4a52      	ldr	r2, [pc, #328]	; (84ac <_sercom_get_default_pad+0x184>)
    8364:	4293      	cmp	r3, r2
    8366:	d049      	beq.n	83fc <_sercom_get_default_pad+0xd4>
    8368:	e091      	b.n	848e <_sercom_get_default_pad+0x166>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    836a:	1cfb      	adds	r3, r7, #3
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	2b03      	cmp	r3, #3
    8370:	d900      	bls.n	8374 <_sercom_get_default_pad+0x4c>
    8372:	e08b      	b.n	848c <_sercom_get_default_pad+0x164>
    8374:	0018      	movs	r0, r3
    8376:	f008 f9c1 	bl	106fc <__gnu_thumb1_case_si>
    837a:	46c0      	nop			; (mov r8, r8)
    837c:	00000010 	.word	0x00000010
    8380:	00000014 	.word	0x00000014
    8384:	00000018 	.word	0x00000018
    8388:	0000001c 	.word	0x0000001c
    838c:	4b48      	ldr	r3, [pc, #288]	; (84b0 <_sercom_get_default_pad+0x188>)
    838e:	e07f      	b.n	8490 <_sercom_get_default_pad+0x168>
    8390:	4b48      	ldr	r3, [pc, #288]	; (84b4 <_sercom_get_default_pad+0x18c>)
    8392:	e07d      	b.n	8490 <_sercom_get_default_pad+0x168>
    8394:	4b48      	ldr	r3, [pc, #288]	; (84b8 <_sercom_get_default_pad+0x190>)
    8396:	e07b      	b.n	8490 <_sercom_get_default_pad+0x168>
    8398:	4b48      	ldr	r3, [pc, #288]	; (84bc <_sercom_get_default_pad+0x194>)
    839a:	e079      	b.n	8490 <_sercom_get_default_pad+0x168>
    839c:	1cfb      	adds	r3, r7, #3
    839e:	781b      	ldrb	r3, [r3, #0]
    83a0:	2b03      	cmp	r3, #3
    83a2:	d900      	bls.n	83a6 <_sercom_get_default_pad+0x7e>
    83a4:	e072      	b.n	848c <_sercom_get_default_pad+0x164>
    83a6:	0018      	movs	r0, r3
    83a8:	f008 f9a8 	bl	106fc <__gnu_thumb1_case_si>
    83ac:	00000010 	.word	0x00000010
    83b0:	00000014 	.word	0x00000014
    83b4:	00000018 	.word	0x00000018
    83b8:	0000001c 	.word	0x0000001c
    83bc:	2303      	movs	r3, #3
    83be:	e067      	b.n	8490 <_sercom_get_default_pad+0x168>
    83c0:	4b3f      	ldr	r3, [pc, #252]	; (84c0 <_sercom_get_default_pad+0x198>)
    83c2:	e065      	b.n	8490 <_sercom_get_default_pad+0x168>
    83c4:	4b3f      	ldr	r3, [pc, #252]	; (84c4 <_sercom_get_default_pad+0x19c>)
    83c6:	e063      	b.n	8490 <_sercom_get_default_pad+0x168>
    83c8:	4b3f      	ldr	r3, [pc, #252]	; (84c8 <_sercom_get_default_pad+0x1a0>)
    83ca:	e061      	b.n	8490 <_sercom_get_default_pad+0x168>
    83cc:	1cfb      	adds	r3, r7, #3
    83ce:	781b      	ldrb	r3, [r3, #0]
    83d0:	2b03      	cmp	r3, #3
    83d2:	d85b      	bhi.n	848c <_sercom_get_default_pad+0x164>
    83d4:	0018      	movs	r0, r3
    83d6:	f008 f991 	bl	106fc <__gnu_thumb1_case_si>
    83da:	46c0      	nop			; (mov r8, r8)
    83dc:	00000010 	.word	0x00000010
    83e0:	00000014 	.word	0x00000014
    83e4:	00000018 	.word	0x00000018
    83e8:	0000001c 	.word	0x0000001c
    83ec:	4b37      	ldr	r3, [pc, #220]	; (84cc <_sercom_get_default_pad+0x1a4>)
    83ee:	e04f      	b.n	8490 <_sercom_get_default_pad+0x168>
    83f0:	4b37      	ldr	r3, [pc, #220]	; (84d0 <_sercom_get_default_pad+0x1a8>)
    83f2:	e04d      	b.n	8490 <_sercom_get_default_pad+0x168>
    83f4:	4b37      	ldr	r3, [pc, #220]	; (84d4 <_sercom_get_default_pad+0x1ac>)
    83f6:	e04b      	b.n	8490 <_sercom_get_default_pad+0x168>
    83f8:	4b37      	ldr	r3, [pc, #220]	; (84d8 <_sercom_get_default_pad+0x1b0>)
    83fa:	e049      	b.n	8490 <_sercom_get_default_pad+0x168>
    83fc:	1cfb      	adds	r3, r7, #3
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	2b03      	cmp	r3, #3
    8402:	d843      	bhi.n	848c <_sercom_get_default_pad+0x164>
    8404:	0018      	movs	r0, r3
    8406:	f008 f979 	bl	106fc <__gnu_thumb1_case_si>
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	00000010 	.word	0x00000010
    8410:	00000014 	.word	0x00000014
    8414:	00000018 	.word	0x00000018
    8418:	0000001c 	.word	0x0000001c
    841c:	4b2f      	ldr	r3, [pc, #188]	; (84dc <_sercom_get_default_pad+0x1b4>)
    841e:	e037      	b.n	8490 <_sercom_get_default_pad+0x168>
    8420:	4b2f      	ldr	r3, [pc, #188]	; (84e0 <_sercom_get_default_pad+0x1b8>)
    8422:	e035      	b.n	8490 <_sercom_get_default_pad+0x168>
    8424:	4b2f      	ldr	r3, [pc, #188]	; (84e4 <_sercom_get_default_pad+0x1bc>)
    8426:	e033      	b.n	8490 <_sercom_get_default_pad+0x168>
    8428:	4b2f      	ldr	r3, [pc, #188]	; (84e8 <_sercom_get_default_pad+0x1c0>)
    842a:	e031      	b.n	8490 <_sercom_get_default_pad+0x168>
    842c:	1cfb      	adds	r3, r7, #3
    842e:	781b      	ldrb	r3, [r3, #0]
    8430:	2b03      	cmp	r3, #3
    8432:	d82b      	bhi.n	848c <_sercom_get_default_pad+0x164>
    8434:	0018      	movs	r0, r3
    8436:	f008 f961 	bl	106fc <__gnu_thumb1_case_si>
    843a:	46c0      	nop			; (mov r8, r8)
    843c:	00000010 	.word	0x00000010
    8440:	00000014 	.word	0x00000014
    8444:	00000018 	.word	0x00000018
    8448:	0000001c 	.word	0x0000001c
    844c:	4b27      	ldr	r3, [pc, #156]	; (84ec <_sercom_get_default_pad+0x1c4>)
    844e:	e01f      	b.n	8490 <_sercom_get_default_pad+0x168>
    8450:	4b27      	ldr	r3, [pc, #156]	; (84f0 <_sercom_get_default_pad+0x1c8>)
    8452:	e01d      	b.n	8490 <_sercom_get_default_pad+0x168>
    8454:	4b27      	ldr	r3, [pc, #156]	; (84f4 <_sercom_get_default_pad+0x1cc>)
    8456:	e01b      	b.n	8490 <_sercom_get_default_pad+0x168>
    8458:	4b27      	ldr	r3, [pc, #156]	; (84f8 <_sercom_get_default_pad+0x1d0>)
    845a:	e019      	b.n	8490 <_sercom_get_default_pad+0x168>
    845c:	1cfb      	adds	r3, r7, #3
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	2b03      	cmp	r3, #3
    8462:	d813      	bhi.n	848c <_sercom_get_default_pad+0x164>
    8464:	0018      	movs	r0, r3
    8466:	f008 f949 	bl	106fc <__gnu_thumb1_case_si>
    846a:	46c0      	nop			; (mov r8, r8)
    846c:	00000010 	.word	0x00000010
    8470:	00000014 	.word	0x00000014
    8474:	00000018 	.word	0x00000018
    8478:	0000001c 	.word	0x0000001c
    847c:	4b1f      	ldr	r3, [pc, #124]	; (84fc <_sercom_get_default_pad+0x1d4>)
    847e:	e007      	b.n	8490 <_sercom_get_default_pad+0x168>
    8480:	4b1f      	ldr	r3, [pc, #124]	; (8500 <_sercom_get_default_pad+0x1d8>)
    8482:	e005      	b.n	8490 <_sercom_get_default_pad+0x168>
    8484:	4b1f      	ldr	r3, [pc, #124]	; (8504 <_sercom_get_default_pad+0x1dc>)
    8486:	e003      	b.n	8490 <_sercom_get_default_pad+0x168>
    8488:	4b1f      	ldr	r3, [pc, #124]	; (8508 <_sercom_get_default_pad+0x1e0>)
    848a:	e001      	b.n	8490 <_sercom_get_default_pad+0x168>
    848c:	46c0      	nop			; (mov r8, r8)
	}

	Assert(false);
	return 0;
    848e:	2300      	movs	r3, #0
}
    8490:	0018      	movs	r0, r3
    8492:	46bd      	mov	sp, r7
    8494:	b002      	add	sp, #8
    8496:	bd80      	pop	{r7, pc}
    8498:	42001000 	.word	0x42001000
    849c:	42000800 	.word	0x42000800
    84a0:	42000c00 	.word	0x42000c00
    84a4:	42001800 	.word	0x42001800
    84a8:	42001c00 	.word	0x42001c00
    84ac:	42001400 	.word	0x42001400
    84b0:	00040003 	.word	0x00040003
    84b4:	00050003 	.word	0x00050003
    84b8:	00060003 	.word	0x00060003
    84bc:	00070003 	.word	0x00070003
    84c0:	00010003 	.word	0x00010003
    84c4:	001e0003 	.word	0x001e0003
    84c8:	001f0003 	.word	0x001f0003
    84cc:	00080003 	.word	0x00080003
    84d0:	00090003 	.word	0x00090003
    84d4:	000a0003 	.word	0x000a0003
    84d8:	000b0003 	.word	0x000b0003
    84dc:	00100003 	.word	0x00100003
    84e0:	00110003 	.word	0x00110003
    84e4:	00120003 	.word	0x00120003
    84e8:	00130003 	.word	0x00130003
    84ec:	000c0003 	.word	0x000c0003
    84f0:	000d0003 	.word	0x000d0003
    84f4:	000e0003 	.word	0x000e0003
    84f8:	000f0003 	.word	0x000f0003
    84fc:	00160003 	.word	0x00160003
    8500:	00170003 	.word	0x00170003
    8504:	00180003 	.word	0x00180003
    8508:	00190003 	.word	0x00190003

0000850c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    850c:	b590      	push	{r4, r7, lr}
    850e:	b08b      	sub	sp, #44	; 0x2c
    8510:	af00      	add	r7, sp, #0
    8512:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    8514:	230c      	movs	r3, #12
    8516:	18fb      	adds	r3, r7, r3
    8518:	4a0f      	ldr	r2, [pc, #60]	; (8558 <_sercom_get_sercom_inst_index+0x4c>)
    851a:	447a      	add	r2, pc
    851c:	ca13      	ldmia	r2!, {r0, r1, r4}
    851e:	c313      	stmia	r3!, {r0, r1, r4}
    8520:	ca13      	ldmia	r2!, {r0, r1, r4}
    8522:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8524:	2300      	movs	r3, #0
    8526:	627b      	str	r3, [r7, #36]	; 0x24
    8528:	e00e      	b.n	8548 <_sercom_get_sercom_inst_index+0x3c>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    852a:	230c      	movs	r3, #12
    852c:	18fb      	adds	r3, r7, r3
    852e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8530:	0092      	lsls	r2, r2, #2
    8532:	58d3      	ldr	r3, [r2, r3]
    8534:	001a      	movs	r2, r3
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	429a      	cmp	r2, r3
    853a:	d102      	bne.n	8542 <_sercom_get_sercom_inst_index+0x36>
			return i;
    853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    853e:	b2db      	uxtb	r3, r3
    8540:	e006      	b.n	8550 <_sercom_get_sercom_inst_index+0x44>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8544:	3301      	adds	r3, #1
    8546:	627b      	str	r3, [r7, #36]	; 0x24
    8548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    854a:	2b05      	cmp	r3, #5
    854c:	d9ed      	bls.n	852a <_sercom_get_sercom_inst_index+0x1e>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    854e:	2300      	movs	r3, #0
}
    8550:	0018      	movs	r0, r3
    8552:	46bd      	mov	sp, r7
    8554:	b00b      	add	sp, #44	; 0x2c
    8556:	bd90      	pop	{r4, r7, pc}
    8558:	0000983e 	.word	0x0000983e

0000855c <system_pinmux_get_config_defaults>:
{
    855c:	b580      	push	{r7, lr}
    855e:	b082      	sub	sp, #8
    8560:	af00      	add	r7, sp, #0
    8562:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	2280      	movs	r2, #128	; 0x80
    8568:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    856a:	687b      	ldr	r3, [r7, #4]
    856c:	2200      	movs	r2, #0
    856e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	2201      	movs	r2, #1
    8574:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	2200      	movs	r2, #0
    857a:	70da      	strb	r2, [r3, #3]
}
    857c:	46c0      	nop			; (mov r8, r8)
    857e:	46bd      	mov	sp, r7
    8580:	b002      	add	sp, #8
    8582:	bd80      	pop	{r7, pc}

00008584 <system_pinmux_get_group_from_gpio_pin>:
{
    8584:	b580      	push	{r7, lr}
    8586:	b084      	sub	sp, #16
    8588:	af00      	add	r7, sp, #0
    858a:	0002      	movs	r2, r0
    858c:	1dfb      	adds	r3, r7, #7
    858e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8590:	230f      	movs	r3, #15
    8592:	18fb      	adds	r3, r7, r3
    8594:	1dfa      	adds	r2, r7, #7
    8596:	7812      	ldrb	r2, [r2, #0]
    8598:	09d2      	lsrs	r2, r2, #7
    859a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    859c:	230e      	movs	r3, #14
    859e:	18fb      	adds	r3, r7, r3
    85a0:	1dfa      	adds	r2, r7, #7
    85a2:	7812      	ldrb	r2, [r2, #0]
    85a4:	0952      	lsrs	r2, r2, #5
    85a6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    85a8:	4b0d      	ldr	r3, [pc, #52]	; (85e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    85aa:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    85ac:	230f      	movs	r3, #15
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	781b      	ldrb	r3, [r3, #0]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d10f      	bne.n	85d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    85b6:	230f      	movs	r3, #15
    85b8:	18fb      	adds	r3, r7, r3
    85ba:	781b      	ldrb	r3, [r3, #0]
    85bc:	009b      	lsls	r3, r3, #2
    85be:	2210      	movs	r2, #16
    85c0:	4694      	mov	ip, r2
    85c2:	44bc      	add	ip, r7
    85c4:	4463      	add	r3, ip
    85c6:	3b08      	subs	r3, #8
    85c8:	681a      	ldr	r2, [r3, #0]
    85ca:	230e      	movs	r3, #14
    85cc:	18fb      	adds	r3, r7, r3
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	01db      	lsls	r3, r3, #7
    85d2:	18d3      	adds	r3, r2, r3
    85d4:	e000      	b.n	85d8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    85d6:	2300      	movs	r3, #0
}
    85d8:	0018      	movs	r0, r3
    85da:	46bd      	mov	sp, r7
    85dc:	b004      	add	sp, #16
    85de:	bd80      	pop	{r7, pc}
    85e0:	41004400 	.word	0x41004400

000085e4 <port_get_group_from_gpio_pin>:
{
    85e4:	b580      	push	{r7, lr}
    85e6:	b082      	sub	sp, #8
    85e8:	af00      	add	r7, sp, #0
    85ea:	0002      	movs	r2, r0
    85ec:	1dfb      	adds	r3, r7, #7
    85ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    85f0:	1dfb      	adds	r3, r7, #7
    85f2:	781b      	ldrb	r3, [r3, #0]
    85f4:	0018      	movs	r0, r3
    85f6:	4b04      	ldr	r3, [pc, #16]	; (8608 <port_get_group_from_gpio_pin+0x24>)
    85f8:	447b      	add	r3, pc
    85fa:	4798      	blx	r3
    85fc:	0003      	movs	r3, r0
}
    85fe:	0018      	movs	r0, r3
    8600:	46bd      	mov	sp, r7
    8602:	b002      	add	sp, #8
    8604:	bd80      	pop	{r7, pc}
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	ffffff89 	.word	0xffffff89

0000860c <port_pin_set_output_level>:
{
    860c:	b580      	push	{r7, lr}
    860e:	b084      	sub	sp, #16
    8610:	af00      	add	r7, sp, #0
    8612:	0002      	movs	r2, r0
    8614:	1dfb      	adds	r3, r7, #7
    8616:	701a      	strb	r2, [r3, #0]
    8618:	1dbb      	adds	r3, r7, #6
    861a:	1c0a      	adds	r2, r1, #0
    861c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    861e:	1dfb      	adds	r3, r7, #7
    8620:	781b      	ldrb	r3, [r3, #0]
    8622:	0018      	movs	r0, r3
    8624:	4b0d      	ldr	r3, [pc, #52]	; (865c <port_pin_set_output_level+0x50>)
    8626:	447b      	add	r3, pc
    8628:	4798      	blx	r3
    862a:	0003      	movs	r3, r0
    862c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    862e:	1dfb      	adds	r3, r7, #7
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	221f      	movs	r2, #31
    8634:	4013      	ands	r3, r2
    8636:	2201      	movs	r2, #1
    8638:	409a      	lsls	r2, r3
    863a:	0013      	movs	r3, r2
    863c:	60bb      	str	r3, [r7, #8]
	if (level) {
    863e:	1dbb      	adds	r3, r7, #6
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2b00      	cmp	r3, #0
    8644:	d003      	beq.n	864e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    8646:	68fb      	ldr	r3, [r7, #12]
    8648:	68ba      	ldr	r2, [r7, #8]
    864a:	619a      	str	r2, [r3, #24]
}
    864c:	e002      	b.n	8654 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    864e:	68fb      	ldr	r3, [r7, #12]
    8650:	68ba      	ldr	r2, [r7, #8]
    8652:	615a      	str	r2, [r3, #20]
}
    8654:	46c0      	nop			; (mov r8, r8)
    8656:	46bd      	mov	sp, r7
    8658:	b004      	add	sp, #16
    865a:	bd80      	pop	{r7, pc}
    865c:	ffffffbb 	.word	0xffffffbb

00008660 <system_gclk_chan_get_config_defaults>:
{
    8660:	b580      	push	{r7, lr}
    8662:	b082      	sub	sp, #8
    8664:	af00      	add	r7, sp, #0
    8666:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	2200      	movs	r2, #0
    866c:	701a      	strb	r2, [r3, #0]
}
    866e:	46c0      	nop			; (mov r8, r8)
    8670:	46bd      	mov	sp, r7
    8672:	b002      	add	sp, #8
    8674:	bd80      	pop	{r7, pc}
	...

00008678 <system_apb_clock_set_mask>:
{
    8678:	b580      	push	{r7, lr}
    867a:	b082      	sub	sp, #8
    867c:	af00      	add	r7, sp, #0
    867e:	0002      	movs	r2, r0
    8680:	6039      	str	r1, [r7, #0]
    8682:	1dfb      	adds	r3, r7, #7
    8684:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8686:	1dfb      	adds	r3, r7, #7
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	2b01      	cmp	r3, #1
    868c:	d00a      	beq.n	86a4 <system_apb_clock_set_mask+0x2c>
    868e:	2b02      	cmp	r3, #2
    8690:	d00f      	beq.n	86b2 <system_apb_clock_set_mask+0x3a>
    8692:	2b00      	cmp	r3, #0
    8694:	d114      	bne.n	86c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    8696:	4b0e      	ldr	r3, [pc, #56]	; (86d0 <system_apb_clock_set_mask+0x58>)
    8698:	4a0d      	ldr	r2, [pc, #52]	; (86d0 <system_apb_clock_set_mask+0x58>)
    869a:	6991      	ldr	r1, [r2, #24]
    869c:	683a      	ldr	r2, [r7, #0]
    869e:	430a      	orrs	r2, r1
    86a0:	619a      	str	r2, [r3, #24]
			break;
    86a2:	e00f      	b.n	86c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    86a4:	4b0a      	ldr	r3, [pc, #40]	; (86d0 <system_apb_clock_set_mask+0x58>)
    86a6:	4a0a      	ldr	r2, [pc, #40]	; (86d0 <system_apb_clock_set_mask+0x58>)
    86a8:	69d1      	ldr	r1, [r2, #28]
    86aa:	683a      	ldr	r2, [r7, #0]
    86ac:	430a      	orrs	r2, r1
    86ae:	61da      	str	r2, [r3, #28]
			break;
    86b0:	e008      	b.n	86c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    86b2:	4b07      	ldr	r3, [pc, #28]	; (86d0 <system_apb_clock_set_mask+0x58>)
    86b4:	4a06      	ldr	r2, [pc, #24]	; (86d0 <system_apb_clock_set_mask+0x58>)
    86b6:	6a11      	ldr	r1, [r2, #32]
    86b8:	683a      	ldr	r2, [r7, #0]
    86ba:	430a      	orrs	r2, r1
    86bc:	621a      	str	r2, [r3, #32]
			break;
    86be:	e001      	b.n	86c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    86c0:	2317      	movs	r3, #23
    86c2:	e000      	b.n	86c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    86c4:	2300      	movs	r3, #0
}
    86c6:	0018      	movs	r0, r3
    86c8:	46bd      	mov	sp, r7
    86ca:	b002      	add	sp, #8
    86cc:	bd80      	pop	{r7, pc}
    86ce:	46c0      	nop			; (mov r8, r8)
    86d0:	40000400 	.word	0x40000400

000086d4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    86d4:	b580      	push	{r7, lr}
    86d6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    86d8:	4b05      	ldr	r3, [pc, #20]	; (86f0 <system_is_debugger_present+0x1c>)
    86da:	789b      	ldrb	r3, [r3, #2]
    86dc:	b2db      	uxtb	r3, r3
    86de:	001a      	movs	r2, r3
    86e0:	2302      	movs	r3, #2
    86e2:	4013      	ands	r3, r2
    86e4:	1e5a      	subs	r2, r3, #1
    86e6:	4193      	sbcs	r3, r2
    86e8:	b2db      	uxtb	r3, r3
}
    86ea:	0018      	movs	r0, r3
    86ec:	46bd      	mov	sp, r7
    86ee:	bd80      	pop	{r7, pc}
    86f0:	41002000 	.word	0x41002000

000086f4 <system_interrupt_enable>:
{
    86f4:	b580      	push	{r7, lr}
    86f6:	b082      	sub	sp, #8
    86f8:	af00      	add	r7, sp, #0
    86fa:	0002      	movs	r2, r0
    86fc:	1dfb      	adds	r3, r7, #7
    86fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8700:	4b06      	ldr	r3, [pc, #24]	; (871c <system_interrupt_enable+0x28>)
    8702:	1dfa      	adds	r2, r7, #7
    8704:	7812      	ldrb	r2, [r2, #0]
    8706:	0011      	movs	r1, r2
    8708:	221f      	movs	r2, #31
    870a:	400a      	ands	r2, r1
    870c:	2101      	movs	r1, #1
    870e:	4091      	lsls	r1, r2
    8710:	000a      	movs	r2, r1
    8712:	601a      	str	r2, [r3, #0]
}
    8714:	46c0      	nop			; (mov r8, r8)
    8716:	46bd      	mov	sp, r7
    8718:	b002      	add	sp, #8
    871a:	bd80      	pop	{r7, pc}
    871c:	e000e100 	.word	0xe000e100

00008720 <system_interrupt_disable>:
{
    8720:	b580      	push	{r7, lr}
    8722:	b082      	sub	sp, #8
    8724:	af00      	add	r7, sp, #0
    8726:	0002      	movs	r2, r0
    8728:	1dfb      	adds	r3, r7, #7
    872a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    872c:	4a07      	ldr	r2, [pc, #28]	; (874c <system_interrupt_disable+0x2c>)
    872e:	1dfb      	adds	r3, r7, #7
    8730:	781b      	ldrb	r3, [r3, #0]
    8732:	0019      	movs	r1, r3
    8734:	231f      	movs	r3, #31
    8736:	400b      	ands	r3, r1
    8738:	2101      	movs	r1, #1
    873a:	4099      	lsls	r1, r3
    873c:	000b      	movs	r3, r1
    873e:	0019      	movs	r1, r3
    8740:	2380      	movs	r3, #128	; 0x80
    8742:	50d1      	str	r1, [r2, r3]
}
    8744:	46c0      	nop			; (mov r8, r8)
    8746:	46bd      	mov	sp, r7
    8748:	b002      	add	sp, #8
    874a:	bd80      	pop	{r7, pc}
    874c:	e000e100 	.word	0xe000e100

00008750 <spi_is_syncing>:
{
    8750:	b580      	push	{r7, lr}
    8752:	b084      	sub	sp, #16
    8754:	af00      	add	r7, sp, #0
    8756:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    875e:	68fb      	ldr	r3, [r7, #12]
    8760:	69db      	ldr	r3, [r3, #28]
    8762:	1e5a      	subs	r2, r3, #1
    8764:	4193      	sbcs	r3, r2
    8766:	b2db      	uxtb	r3, r3
}
    8768:	0018      	movs	r0, r3
    876a:	46bd      	mov	sp, r7
    876c:	b004      	add	sp, #16
    876e:	bd80      	pop	{r7, pc}

00008770 <spi_enable>:
{
    8770:	b580      	push	{r7, lr}
    8772:	b084      	sub	sp, #16
    8774:	af00      	add	r7, sp, #0
    8776:	6078      	str	r0, [r7, #4]
    8778:	4a10      	ldr	r2, [pc, #64]	; (87bc <spi_enable+0x4c>)
    877a:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	681b      	ldr	r3, [r3, #0]
    8780:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8782:	687b      	ldr	r3, [r7, #4]
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	0018      	movs	r0, r3
    8788:	4b0d      	ldr	r3, [pc, #52]	; (87c0 <spi_enable+0x50>)
    878a:	58d3      	ldr	r3, [r2, r3]
    878c:	4798      	blx	r3
    878e:	0003      	movs	r3, r0
    8790:	0018      	movs	r0, r3
    8792:	4b0c      	ldr	r3, [pc, #48]	; (87c4 <spi_enable+0x54>)
    8794:	447b      	add	r3, pc
    8796:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    8798:	46c0      	nop			; (mov r8, r8)
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	0018      	movs	r0, r3
    879e:	4b0a      	ldr	r3, [pc, #40]	; (87c8 <spi_enable+0x58>)
    87a0:	447b      	add	r3, pc
    87a2:	4798      	blx	r3
    87a4:	1e03      	subs	r3, r0, #0
    87a6:	d1f8      	bne.n	879a <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    87a8:	68fb      	ldr	r3, [r7, #12]
    87aa:	681b      	ldr	r3, [r3, #0]
    87ac:	2202      	movs	r2, #2
    87ae:	431a      	orrs	r2, r3
    87b0:	68fb      	ldr	r3, [r7, #12]
    87b2:	601a      	str	r2, [r3, #0]
}
    87b4:	46c0      	nop			; (mov r8, r8)
    87b6:	46bd      	mov	sp, r7
    87b8:	b004      	add	sp, #16
    87ba:	bd80      	pop	{r7, pc}
    87bc:	000096e6 	.word	0x000096e6
    87c0:	000000a8 	.word	0x000000a8
    87c4:	ffffff5d 	.word	0xffffff5d
    87c8:	ffffffad 	.word	0xffffffad

000087cc <spi_disable>:
{
    87cc:	b580      	push	{r7, lr}
    87ce:	b084      	sub	sp, #16
    87d0:	af00      	add	r7, sp, #0
    87d2:	6078      	str	r0, [r7, #4]
    87d4:	4a14      	ldr	r2, [pc, #80]	; (8828 <spi_disable+0x5c>)
    87d6:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	681b      	ldr	r3, [r3, #0]
    87dc:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    87de:	687b      	ldr	r3, [r7, #4]
    87e0:	681b      	ldr	r3, [r3, #0]
    87e2:	0018      	movs	r0, r3
    87e4:	4b11      	ldr	r3, [pc, #68]	; (882c <spi_disable+0x60>)
    87e6:	58d3      	ldr	r3, [r2, r3]
    87e8:	4798      	blx	r3
    87ea:	0003      	movs	r3, r0
    87ec:	0018      	movs	r0, r3
    87ee:	4b10      	ldr	r3, [pc, #64]	; (8830 <spi_disable+0x64>)
    87f0:	447b      	add	r3, pc
    87f2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    87f4:	46c0      	nop			; (mov r8, r8)
    87f6:	687b      	ldr	r3, [r7, #4]
    87f8:	0018      	movs	r0, r3
    87fa:	4b0e      	ldr	r3, [pc, #56]	; (8834 <spi_disable+0x68>)
    87fc:	447b      	add	r3, pc
    87fe:	4798      	blx	r3
    8800:	1e03      	subs	r3, r0, #0
    8802:	d1f8      	bne.n	87f6 <spi_disable+0x2a>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    8804:	68fb      	ldr	r3, [r7, #12]
    8806:	228f      	movs	r2, #143	; 0x8f
    8808:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    880a:	68fb      	ldr	r3, [r7, #12]
    880c:	228f      	movs	r2, #143	; 0x8f
    880e:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8810:	68fb      	ldr	r3, [r7, #12]
    8812:	681b      	ldr	r3, [r3, #0]
    8814:	2202      	movs	r2, #2
    8816:	4393      	bics	r3, r2
    8818:	001a      	movs	r2, r3
    881a:	68fb      	ldr	r3, [r7, #12]
    881c:	601a      	str	r2, [r3, #0]
}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	46bd      	mov	sp, r7
    8822:	b004      	add	sp, #16
    8824:	bd80      	pop	{r7, pc}
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	0000968a 	.word	0x0000968a
    882c:	000000a8 	.word	0x000000a8
    8830:	ffffff2d 	.word	0xffffff2d
    8834:	ffffff51 	.word	0xffffff51

00008838 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    8838:	b580      	push	{r7, lr}
    883a:	b084      	sub	sp, #16
    883c:	af00      	add	r7, sp, #0
    883e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	681b      	ldr	r3, [r3, #0]
    8844:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8846:	68fb      	ldr	r3, [r7, #12]
    8848:	7e1b      	ldrb	r3, [r3, #24]
    884a:	b2db      	uxtb	r3, r3
    884c:	001a      	movs	r2, r3
    884e:	2302      	movs	r3, #2
    8850:	4013      	ands	r3, r2
    8852:	1e5a      	subs	r2, r3, #1
    8854:	4193      	sbcs	r3, r2
    8856:	b2db      	uxtb	r3, r3
}
    8858:	0018      	movs	r0, r3
    885a:	46bd      	mov	sp, r7
    885c:	b004      	add	sp, #16
    885e:	bd80      	pop	{r7, pc}

00008860 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    8860:	b580      	push	{r7, lr}
    8862:	b084      	sub	sp, #16
    8864:	af00      	add	r7, sp, #0
    8866:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8868:	687b      	ldr	r3, [r7, #4]
    886a:	681b      	ldr	r3, [r3, #0]
    886c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    886e:	68fb      	ldr	r3, [r7, #12]
    8870:	7e1b      	ldrb	r3, [r3, #24]
    8872:	b2db      	uxtb	r3, r3
    8874:	001a      	movs	r2, r3
    8876:	2301      	movs	r3, #1
    8878:	4013      	ands	r3, r2
    887a:	1e5a      	subs	r2, r3, #1
    887c:	4193      	sbcs	r3, r2
    887e:	b2db      	uxtb	r3, r3
}
    8880:	0018      	movs	r0, r3
    8882:	46bd      	mov	sp, r7
    8884:	b004      	add	sp, #16
    8886:	bd80      	pop	{r7, pc}

00008888 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    8888:	b580      	push	{r7, lr}
    888a:	b084      	sub	sp, #16
    888c:	af00      	add	r7, sp, #0
    888e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	681b      	ldr	r3, [r3, #0]
    8894:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8896:	68fb      	ldr	r3, [r7, #12]
    8898:	7e1b      	ldrb	r3, [r3, #24]
    889a:	b2db      	uxtb	r3, r3
    889c:	001a      	movs	r2, r3
    889e:	2304      	movs	r3, #4
    88a0:	4013      	ands	r3, r2
    88a2:	1e5a      	subs	r2, r3, #1
    88a4:	4193      	sbcs	r3, r2
    88a6:	b2db      	uxtb	r3, r3
}
    88a8:	0018      	movs	r0, r3
    88aa:	46bd      	mov	sp, r7
    88ac:	b004      	add	sp, #16
    88ae:	bd80      	pop	{r7, pc}

000088b0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    88b0:	b580      	push	{r7, lr}
    88b2:	b084      	sub	sp, #16
    88b4:	af00      	add	r7, sp, #0
    88b6:	6078      	str	r0, [r7, #4]
    88b8:	000a      	movs	r2, r1
    88ba:	1cbb      	adds	r3, r7, #2
    88bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    88c4:	687b      	ldr	r3, [r7, #4]
    88c6:	0018      	movs	r0, r3
    88c8:	4b0b      	ldr	r3, [pc, #44]	; (88f8 <spi_write+0x48>)
    88ca:	447b      	add	r3, pc
    88cc:	4798      	blx	r3
    88ce:	0003      	movs	r3, r0
    88d0:	001a      	movs	r2, r3
    88d2:	2301      	movs	r3, #1
    88d4:	4053      	eors	r3, r2
    88d6:	b2db      	uxtb	r3, r3
    88d8:	2b00      	cmp	r3, #0
    88da:	d001      	beq.n	88e0 <spi_write+0x30>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    88dc:	2305      	movs	r3, #5
    88de:	e006      	b.n	88ee <spi_write+0x3e>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    88e0:	1cbb      	adds	r3, r7, #2
    88e2:	881b      	ldrh	r3, [r3, #0]
    88e4:	05db      	lsls	r3, r3, #23
    88e6:	0dda      	lsrs	r2, r3, #23
    88e8:	68fb      	ldr	r3, [r7, #12]
    88ea:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    88ec:	2300      	movs	r3, #0
}
    88ee:	0018      	movs	r0, r3
    88f0:	46bd      	mov	sp, r7
    88f2:	b004      	add	sp, #16
    88f4:	bd80      	pop	{r7, pc}
    88f6:	46c0      	nop			; (mov r8, r8)
    88f8:	ffffff93 	.word	0xffffff93

000088fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    88fc:	b580      	push	{r7, lr}
    88fe:	b084      	sub	sp, #16
    8900:	af00      	add	r7, sp, #0
    8902:	6078      	str	r0, [r7, #4]
    8904:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8906:	687b      	ldr	r3, [r7, #4]
    8908:	681b      	ldr	r3, [r3, #0]
    890a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    890c:	687b      	ldr	r3, [r7, #4]
    890e:	0018      	movs	r0, r3
    8910:	4b1b      	ldr	r3, [pc, #108]	; (8980 <spi_read+0x84>)
    8912:	447b      	add	r3, pc
    8914:	4798      	blx	r3
    8916:	0003      	movs	r3, r0
    8918:	001a      	movs	r2, r3
    891a:	2301      	movs	r3, #1
    891c:	4053      	eors	r3, r2
    891e:	b2db      	uxtb	r3, r3
    8920:	2b00      	cmp	r3, #0
    8922:	d001      	beq.n	8928 <spi_read+0x2c>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    8924:	2310      	movs	r3, #16
    8926:	e027      	b.n	8978 <spi_read+0x7c>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    8928:	230f      	movs	r3, #15
    892a:	18fb      	adds	r3, r7, r3
    892c:	2200      	movs	r2, #0
    892e:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	8b5b      	ldrh	r3, [r3, #26]
    8934:	b29b      	uxth	r3, r3
    8936:	001a      	movs	r2, r3
    8938:	2304      	movs	r3, #4
    893a:	4013      	ands	r3, r2
    893c:	d006      	beq.n	894c <spi_read+0x50>
		retval = STATUS_ERR_OVERFLOW;
    893e:	230f      	movs	r3, #15
    8940:	18fb      	adds	r3, r7, r3
    8942:	221e      	movs	r2, #30
    8944:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8946:	68bb      	ldr	r3, [r7, #8]
    8948:	2204      	movs	r2, #4
    894a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    894c:	687b      	ldr	r3, [r7, #4]
    894e:	799b      	ldrb	r3, [r3, #6]
    8950:	2b01      	cmp	r3, #1
    8952:	d108      	bne.n	8966 <spi_read+0x6a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8954:	68bb      	ldr	r3, [r7, #8]
    8956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8958:	b29b      	uxth	r3, r3
    895a:	05db      	lsls	r3, r3, #23
    895c:	0ddb      	lsrs	r3, r3, #23
    895e:	b29a      	uxth	r2, r3
    8960:	683b      	ldr	r3, [r7, #0]
    8962:	801a      	strh	r2, [r3, #0]
    8964:	e005      	b.n	8972 <spi_read+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8966:	68bb      	ldr	r3, [r7, #8]
    8968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    896a:	b2db      	uxtb	r3, r3
    896c:	b29a      	uxth	r2, r3
    896e:	683b      	ldr	r3, [r7, #0]
    8970:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    8972:	230f      	movs	r3, #15
    8974:	18fb      	adds	r3, r7, r3
    8976:	781b      	ldrb	r3, [r3, #0]
}
    8978:	0018      	movs	r0, r3
    897a:	46bd      	mov	sp, r7
    897c:	b004      	add	sp, #16
    897e:	bd80      	pop	{r7, pc}
    8980:	ffffff73 	.word	0xffffff73

00008984 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    8984:	b580      	push	{r7, lr}
    8986:	b084      	sub	sp, #16
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	0018      	movs	r0, r3
    8996:	4b0a      	ldr	r3, [pc, #40]	; (89c0 <spi_reset+0x3c>)
    8998:	447b      	add	r3, pc
    899a:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    899c:	46c0      	nop			; (mov r8, r8)
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	0018      	movs	r0, r3
    89a2:	4b08      	ldr	r3, [pc, #32]	; (89c4 <spi_reset+0x40>)
    89a4:	447b      	add	r3, pc
    89a6:	4798      	blx	r3
    89a8:	1e03      	subs	r3, r0, #0
    89aa:	d1f8      	bne.n	899e <spi_reset+0x1a>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    89ac:	68fb      	ldr	r3, [r7, #12]
    89ae:	681b      	ldr	r3, [r3, #0]
    89b0:	2201      	movs	r2, #1
    89b2:	431a      	orrs	r2, r3
    89b4:	68fb      	ldr	r3, [r7, #12]
    89b6:	601a      	str	r2, [r3, #0]
}
    89b8:	46c0      	nop			; (mov r8, r8)
    89ba:	46bd      	mov	sp, r7
    89bc:	b004      	add	sp, #16
    89be:	bd80      	pop	{r7, pc}
    89c0:	fffffe31 	.word	0xfffffe31
    89c4:	fffffda9 	.word	0xfffffda9

000089c8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    89c8:	b5b0      	push	{r4, r5, r7, lr}
    89ca:	b088      	sub	sp, #32
    89cc:	af00      	add	r7, sp, #0
    89ce:	6078      	str	r0, [r7, #4]
    89d0:	6039      	str	r1, [r7, #0]
    89d2:	4c2e      	ldr	r4, [pc, #184]	; (8a8c <spi_set_baudrate+0xc4>)
    89d4:	447c      	add	r4, pc
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    89d6:	230c      	movs	r3, #12
    89d8:	18fb      	adds	r3, r7, r3
    89da:	2200      	movs	r2, #0
    89dc:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	681b      	ldr	r3, [r3, #0]
    89e2:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    89e4:	687b      	ldr	r3, [r7, #4]
    89e6:	0018      	movs	r0, r3
    89e8:	4b29      	ldr	r3, [pc, #164]	; (8a90 <spi_set_baudrate+0xc8>)
    89ea:	447b      	add	r3, pc
    89ec:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    89ee:	46c0      	nop			; (mov r8, r8)
    89f0:	687b      	ldr	r3, [r7, #4]
    89f2:	0018      	movs	r0, r3
    89f4:	4b27      	ldr	r3, [pc, #156]	; (8a94 <spi_set_baudrate+0xcc>)
    89f6:	447b      	add	r3, pc
    89f8:	4798      	blx	r3
    89fa:	1e03      	subs	r3, r0, #0
    89fc:	d1f8      	bne.n	89f0 <spi_set_baudrate+0x28>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	681b      	ldr	r3, [r3, #0]
    8a02:	0018      	movs	r0, r3
    8a04:	4b24      	ldr	r3, [pc, #144]	; (8a98 <spi_set_baudrate+0xd0>)
    8a06:	58e3      	ldr	r3, [r4, r3]
    8a08:	4798      	blx	r3
    8a0a:	0003      	movs	r3, r0
    8a0c:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8a0e:	69bb      	ldr	r3, [r7, #24]
    8a10:	3314      	adds	r3, #20
    8a12:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8a14:	697b      	ldr	r3, [r7, #20]
    8a16:	b2db      	uxtb	r3, r3
    8a18:	0018      	movs	r0, r3
    8a1a:	4b20      	ldr	r3, [pc, #128]	; (8a9c <spi_set_baudrate+0xd4>)
    8a1c:	58e3      	ldr	r3, [r4, r3]
    8a1e:	4798      	blx	r3
    8a20:	0003      	movs	r3, r0
    8a22:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    8a24:	230f      	movs	r3, #15
    8a26:	18fd      	adds	r5, r7, r3
    8a28:	230c      	movs	r3, #12
    8a2a:	18fa      	adds	r2, r7, r3
    8a2c:	6939      	ldr	r1, [r7, #16]
    8a2e:	683b      	ldr	r3, [r7, #0]
    8a30:	0018      	movs	r0, r3
    8a32:	4b1b      	ldr	r3, [pc, #108]	; (8aa0 <spi_set_baudrate+0xd8>)
    8a34:	58e3      	ldr	r3, [r4, r3]
    8a36:	4798      	blx	r3
    8a38:	0003      	movs	r3, r0
    8a3a:	702b      	strb	r3, [r5, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    8a3c:	230f      	movs	r3, #15
    8a3e:	18fb      	adds	r3, r7, r3
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	2b00      	cmp	r3, #0
    8a44:	d001      	beq.n	8a4a <spi_set_baudrate+0x82>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    8a46:	2317      	movs	r3, #23
    8a48:	e01b      	b.n	8a82 <spi_set_baudrate+0xba>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    8a4a:	230c      	movs	r3, #12
    8a4c:	18fb      	adds	r3, r7, r3
    8a4e:	881b      	ldrh	r3, [r3, #0]
    8a50:	b2da      	uxtb	r2, r3
    8a52:	69fb      	ldr	r3, [r7, #28]
    8a54:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    8a56:	46c0      	nop			; (mov r8, r8)
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	0018      	movs	r0, r3
    8a5c:	4b11      	ldr	r3, [pc, #68]	; (8aa4 <spi_set_baudrate+0xdc>)
    8a5e:	447b      	add	r3, pc
    8a60:	4798      	blx	r3
    8a62:	1e03      	subs	r3, r0, #0
    8a64:	d1f8      	bne.n	8a58 <spi_set_baudrate+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    8a66:	687b      	ldr	r3, [r7, #4]
    8a68:	0018      	movs	r0, r3
    8a6a:	4b0f      	ldr	r3, [pc, #60]	; (8aa8 <spi_set_baudrate+0xe0>)
    8a6c:	447b      	add	r3, pc
    8a6e:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    8a70:	46c0      	nop			; (mov r8, r8)
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	0018      	movs	r0, r3
    8a76:	4b0d      	ldr	r3, [pc, #52]	; (8aac <spi_set_baudrate+0xe4>)
    8a78:	447b      	add	r3, pc
    8a7a:	4798      	blx	r3
    8a7c:	1e03      	subs	r3, r0, #0
    8a7e:	d1f8      	bne.n	8a72 <spi_set_baudrate+0xaa>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    8a80:	2300      	movs	r3, #0
}
    8a82:	0018      	movs	r0, r3
    8a84:	46bd      	mov	sp, r7
    8a86:	b008      	add	sp, #32
    8a88:	bdb0      	pop	{r4, r5, r7, pc}
    8a8a:	46c0      	nop			; (mov r8, r8)
    8a8c:	0000948c 	.word	0x0000948c
    8a90:	fffffddf 	.word	0xfffffddf
    8a94:	fffffd57 	.word	0xfffffd57
    8a98:	000002b4 	.word	0x000002b4
    8a9c:	000001a4 	.word	0x000001a4
    8aa0:	00000108 	.word	0x00000108
    8aa4:	fffffcef 	.word	0xfffffcef
    8aa8:	fffffd01 	.word	0xfffffd01
    8aac:	fffffcd5 	.word	0xfffffcd5

00008ab0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    8ab0:	b5b0      	push	{r4, r5, r7, lr}
    8ab2:	b092      	sub	sp, #72	; 0x48
    8ab4:	af00      	add	r7, sp, #0
    8ab6:	6078      	str	r0, [r7, #4]
    8ab8:	6039      	str	r1, [r7, #0]
    8aba:	4c7f      	ldr	r4, [pc, #508]	; (8cb8 <_spi_set_config+0x208>)
    8abc:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	681b      	ldr	r3, [r3, #0]
    8ac2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	681b      	ldr	r3, [r3, #0]
    8ac8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    8aca:	231c      	movs	r3, #28
    8acc:	18fb      	adds	r3, r7, r3
    8ace:	0018      	movs	r0, r3
    8ad0:	4b7a      	ldr	r3, [pc, #488]	; (8cbc <_spi_set_config+0x20c>)
    8ad2:	447b      	add	r3, pc
    8ad4:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8ad6:	231c      	movs	r3, #28
    8ad8:	18fb      	adds	r3, r7, r3
    8ada:	2200      	movs	r2, #0
    8adc:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    8ade:	683b      	ldr	r3, [r7, #0]
    8ae0:	781b      	ldrb	r3, [r3, #0]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d103      	bne.n	8aee <_spi_set_config+0x3e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8ae6:	231c      	movs	r3, #28
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	2200      	movs	r2, #0
    8aec:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    8aee:	683b      	ldr	r3, [r7, #0]
    8af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    8af2:	230c      	movs	r3, #12
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    8af8:	683b      	ldr	r3, [r7, #0]
    8afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    8afc:	230c      	movs	r3, #12
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    8b02:	683b      	ldr	r3, [r7, #0]
    8b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    8b06:	230c      	movs	r3, #12
    8b08:	18fb      	adds	r3, r7, r3
    8b0a:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    8b0c:	683b      	ldr	r3, [r7, #0]
    8b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    8b10:	230c      	movs	r3, #12
    8b12:	18fb      	adds	r3, r7, r3
    8b14:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    8b16:	2347      	movs	r3, #71	; 0x47
    8b18:	18fb      	adds	r3, r7, r3
    8b1a:	2200      	movs	r2, #0
    8b1c:	701a      	strb	r2, [r3, #0]
    8b1e:	e02e      	b.n	8b7e <_spi_set_config+0xce>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8b20:	2347      	movs	r3, #71	; 0x47
    8b22:	18fb      	adds	r3, r7, r3
    8b24:	781a      	ldrb	r2, [r3, #0]
    8b26:	230c      	movs	r3, #12
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	0092      	lsls	r2, r2, #2
    8b2c:	58d3      	ldr	r3, [r2, r3]
    8b2e:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    8b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b32:	2b00      	cmp	r3, #0
    8b34:	d10a      	bne.n	8b4c <_spi_set_config+0x9c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8b36:	2347      	movs	r3, #71	; 0x47
    8b38:	18fb      	adds	r3, r7, r3
    8b3a:	781a      	ldrb	r2, [r3, #0]
    8b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8b3e:	0011      	movs	r1, r2
    8b40:	0018      	movs	r0, r3
    8b42:	4b5f      	ldr	r3, [pc, #380]	; (8cc0 <_spi_set_config+0x210>)
    8b44:	58e3      	ldr	r3, [r4, r3]
    8b46:	4798      	blx	r3
    8b48:	0003      	movs	r3, r0
    8b4a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    8b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b4e:	3301      	adds	r3, #1
    8b50:	d00e      	beq.n	8b70 <_spi_set_config+0xc0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b54:	b2da      	uxtb	r2, r3
    8b56:	231c      	movs	r3, #28
    8b58:	18fb      	adds	r3, r7, r3
    8b5a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8b5e:	0c1b      	lsrs	r3, r3, #16
    8b60:	b2db      	uxtb	r3, r3
    8b62:	221c      	movs	r2, #28
    8b64:	18ba      	adds	r2, r7, r2
    8b66:	0011      	movs	r1, r2
    8b68:	0018      	movs	r0, r3
    8b6a:	4b56      	ldr	r3, [pc, #344]	; (8cc4 <_spi_set_config+0x214>)
    8b6c:	58e3      	ldr	r3, [r4, r3]
    8b6e:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    8b70:	2347      	movs	r3, #71	; 0x47
    8b72:	18fb      	adds	r3, r7, r3
    8b74:	781a      	ldrb	r2, [r3, #0]
    8b76:	2347      	movs	r3, #71	; 0x47
    8b78:	18fb      	adds	r3, r7, r3
    8b7a:	3201      	adds	r2, #1
    8b7c:	701a      	strb	r2, [r3, #0]
    8b7e:	2347      	movs	r3, #71	; 0x47
    8b80:	18fb      	adds	r3, r7, r3
    8b82:	781b      	ldrb	r3, [r3, #0]
    8b84:	2b03      	cmp	r3, #3
    8b86:	d9cb      	bls.n	8b20 <_spi_set_config+0x70>
		}
	}

	module->mode             = config->mode;
    8b88:	683b      	ldr	r3, [r7, #0]
    8b8a:	781a      	ldrb	r2, [r3, #0]
    8b8c:	687b      	ldr	r3, [r7, #4]
    8b8e:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    8b90:	683b      	ldr	r3, [r7, #0]
    8b92:	7c1a      	ldrb	r2, [r3, #16]
    8b94:	687b      	ldr	r3, [r7, #4]
    8b96:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    8b98:	683b      	ldr	r3, [r7, #0]
    8b9a:	7c9a      	ldrb	r2, [r3, #18]
    8b9c:	687b      	ldr	r3, [r7, #4]
    8b9e:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    8ba0:	683b      	ldr	r3, [r7, #0]
    8ba2:	7d1a      	ldrb	r2, [r3, #20]
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    8ba8:	230a      	movs	r3, #10
    8baa:	18fb      	adds	r3, r7, r3
    8bac:	2200      	movs	r2, #0
    8bae:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    8bb0:	2300      	movs	r3, #0
    8bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    8bb4:	2300      	movs	r3, #0
    8bb6:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    8bb8:	683b      	ldr	r3, [r7, #0]
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	2b01      	cmp	r3, #1
    8bbe:	d12c      	bne.n	8c1a <_spi_set_config+0x16a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	681b      	ldr	r3, [r3, #0]
    8bc4:	0018      	movs	r0, r3
    8bc6:	4b40      	ldr	r3, [pc, #256]	; (8cc8 <_spi_set_config+0x218>)
    8bc8:	58e3      	ldr	r3, [r4, r3]
    8bca:	4798      	blx	r3
    8bcc:	0003      	movs	r3, r0
    8bce:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bd2:	3314      	adds	r3, #20
    8bd4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8bd8:	b2db      	uxtb	r3, r3
    8bda:	0018      	movs	r0, r3
    8bdc:	4b3b      	ldr	r3, [pc, #236]	; (8ccc <_spi_set_config+0x21c>)
    8bde:	58e3      	ldr	r3, [r4, r3]
    8be0:	4798      	blx	r3
    8be2:	0003      	movs	r3, r0
    8be4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    8be6:	683b      	ldr	r3, [r7, #0]
    8be8:	699b      	ldr	r3, [r3, #24]
    8bea:	2223      	movs	r2, #35	; 0x23
    8bec:	18bd      	adds	r5, r7, r2
    8bee:	220a      	movs	r2, #10
    8bf0:	18ba      	adds	r2, r7, r2
    8bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8bf4:	0018      	movs	r0, r3
    8bf6:	4b36      	ldr	r3, [pc, #216]	; (8cd0 <_spi_set_config+0x220>)
    8bf8:	58e3      	ldr	r3, [r4, r3]
    8bfa:	4798      	blx	r3
    8bfc:	0003      	movs	r3, r0
    8bfe:	702b      	strb	r3, [r5, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    8c00:	2323      	movs	r3, #35	; 0x23
    8c02:	18fb      	adds	r3, r7, r3
    8c04:	781b      	ldrb	r3, [r3, #0]
    8c06:	2b00      	cmp	r3, #0
    8c08:	d001      	beq.n	8c0e <_spi_set_config+0x15e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    8c0a:	2317      	movs	r3, #23
    8c0c:	e04f      	b.n	8cae <_spi_set_config+0x1fe>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    8c0e:	230a      	movs	r3, #10
    8c10:	18fb      	adds	r3, r7, r3
    8c12:	881b      	ldrh	r3, [r3, #0]
    8c14:	b2da      	uxtb	r2, r3
    8c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c18:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    8c1a:	683b      	ldr	r3, [r7, #0]
    8c1c:	685b      	ldr	r3, [r3, #4]
    8c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c20:	4313      	orrs	r3, r2
    8c22:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    8c24:	683b      	ldr	r3, [r7, #0]
    8c26:	689b      	ldr	r3, [r3, #8]
    8c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c2a:	4313      	orrs	r3, r2
    8c2c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	68db      	ldr	r3, [r3, #12]
    8c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c34:	4313      	orrs	r3, r2
    8c36:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    8c38:	683b      	ldr	r3, [r7, #0]
    8c3a:	7c1b      	ldrb	r3, [r3, #16]
    8c3c:	001a      	movs	r2, r3
    8c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c40:	4313      	orrs	r3, r2
    8c42:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    8c44:	683b      	ldr	r3, [r7, #0]
    8c46:	7c5b      	ldrb	r3, [r3, #17]
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d104      	bne.n	8c56 <_spi_set_config+0x1a6>
    8c4c:	4b21      	ldr	r3, [pc, #132]	; (8cd4 <_spi_set_config+0x224>)
    8c4e:	447b      	add	r3, pc
    8c50:	4798      	blx	r3
    8c52:	1e03      	subs	r3, r0, #0
    8c54:	d003      	beq.n	8c5e <_spi_set_config+0x1ae>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    8c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c58:	2280      	movs	r2, #128	; 0x80
    8c5a:	4313      	orrs	r3, r2
    8c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    8c5e:	683b      	ldr	r3, [r7, #0]
    8c60:	7c9b      	ldrb	r3, [r3, #18]
    8c62:	2b00      	cmp	r3, #0
    8c64:	d004      	beq.n	8c70 <_spi_set_config+0x1c0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    8c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c68:	2280      	movs	r2, #128	; 0x80
    8c6a:	0292      	lsls	r2, r2, #10
    8c6c:	4313      	orrs	r3, r2
    8c6e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    8c70:	683b      	ldr	r3, [r7, #0]
    8c72:	7cdb      	ldrb	r3, [r3, #19]
    8c74:	2b00      	cmp	r3, #0
    8c76:	d004      	beq.n	8c82 <_spi_set_config+0x1d2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    8c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c7a:	2280      	movs	r2, #128	; 0x80
    8c7c:	0092      	lsls	r2, r2, #2
    8c7e:	4313      	orrs	r3, r2
    8c80:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    8c82:	683b      	ldr	r3, [r7, #0]
    8c84:	7d1b      	ldrb	r3, [r3, #20]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d004      	beq.n	8c94 <_spi_set_config+0x1e4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    8c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c8c:	2280      	movs	r2, #128	; 0x80
    8c8e:	0192      	lsls	r2, r2, #6
    8c90:	4313      	orrs	r3, r2
    8c92:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    8c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c96:	681a      	ldr	r2, [r3, #0]
    8c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c9a:	431a      	orrs	r2, r3
    8c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c9e:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    8ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ca2:	685a      	ldr	r2, [r3, #4]
    8ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8ca6:	431a      	orrs	r2, r3
    8ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8caa:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    8cac:	2300      	movs	r3, #0
}
    8cae:	0018      	movs	r0, r3
    8cb0:	46bd      	mov	sp, r7
    8cb2:	b012      	add	sp, #72	; 0x48
    8cb4:	bdb0      	pop	{r4, r5, r7, pc}
    8cb6:	46c0      	nop			; (mov r8, r8)
    8cb8:	000093a4 	.word	0x000093a4
    8cbc:	fffffa87 	.word	0xfffffa87
    8cc0:	000002cc 	.word	0x000002cc
    8cc4:	000002b8 	.word	0x000002b8
    8cc8:	000002b4 	.word	0x000002b4
    8ccc:	000001a4 	.word	0x000001a4
    8cd0:	00000108 	.word	0x00000108
    8cd4:	fffffa83 	.word	0xfffffa83

00008cd8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    8cd8:	b5b0      	push	{r4, r5, r7, lr}
    8cda:	b08a      	sub	sp, #40	; 0x28
    8cdc:	af00      	add	r7, sp, #0
    8cde:	60f8      	str	r0, [r7, #12]
    8ce0:	60b9      	str	r1, [r7, #8]
    8ce2:	607a      	str	r2, [r7, #4]
    8ce4:	4c5d      	ldr	r4, [pc, #372]	; (8e5c <spi_init+0x184>)
    8ce6:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8ce8:	68fb      	ldr	r3, [r7, #12]
    8cea:	68ba      	ldr	r2, [r7, #8]
    8cec:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    8cee:	68fb      	ldr	r3, [r7, #12]
    8cf0:	681b      	ldr	r3, [r3, #0]
    8cf2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8cf4:	6a3b      	ldr	r3, [r7, #32]
    8cf6:	681b      	ldr	r3, [r3, #0]
    8cf8:	2202      	movs	r2, #2
    8cfa:	4013      	ands	r3, r2
    8cfc:	d001      	beq.n	8d02 <spi_init+0x2a>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    8cfe:	231c      	movs	r3, #28
    8d00:	e0a8      	b.n	8e54 <spi_init+0x17c>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8d02:	6a3b      	ldr	r3, [r7, #32]
    8d04:	681b      	ldr	r3, [r3, #0]
    8d06:	2201      	movs	r2, #1
    8d08:	4013      	ands	r3, r2
    8d0a:	d001      	beq.n	8d10 <spi_init+0x38>
		return STATUS_BUSY;
    8d0c:	2305      	movs	r3, #5
    8d0e:	e0a1      	b.n	8e54 <spi_init+0x17c>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8d10:	68fb      	ldr	r3, [r7, #12]
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	0018      	movs	r0, r3
    8d16:	4b52      	ldr	r3, [pc, #328]	; (8e60 <spi_init+0x188>)
    8d18:	58e3      	ldr	r3, [r4, r3]
    8d1a:	4798      	blx	r3
    8d1c:	0003      	movs	r3, r0
    8d1e:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8d20:	69fb      	ldr	r3, [r7, #28]
    8d22:	3302      	adds	r3, #2
    8d24:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8d26:	69fb      	ldr	r3, [r7, #28]
    8d28:	3314      	adds	r3, #20
    8d2a:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8d2c:	2201      	movs	r2, #1
    8d2e:	69bb      	ldr	r3, [r7, #24]
    8d30:	409a      	lsls	r2, r3
    8d32:	0013      	movs	r3, r2
    8d34:	0019      	movs	r1, r3
    8d36:	2002      	movs	r0, #2
    8d38:	4b4a      	ldr	r3, [pc, #296]	; (8e64 <spi_init+0x18c>)
    8d3a:	447b      	add	r3, pc
    8d3c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8d3e:	2310      	movs	r3, #16
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	0018      	movs	r0, r3
    8d44:	4b48      	ldr	r3, [pc, #288]	; (8e68 <spi_init+0x190>)
    8d46:	447b      	add	r3, pc
    8d48:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    8d4a:	687b      	ldr	r3, [r7, #4]
    8d4c:	2224      	movs	r2, #36	; 0x24
    8d4e:	5c9a      	ldrb	r2, [r3, r2]
    8d50:	2310      	movs	r3, #16
    8d52:	18fb      	adds	r3, r7, r3
    8d54:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8d56:	697b      	ldr	r3, [r7, #20]
    8d58:	b2db      	uxtb	r3, r3
    8d5a:	2210      	movs	r2, #16
    8d5c:	18ba      	adds	r2, r7, r2
    8d5e:	0011      	movs	r1, r2
    8d60:	0018      	movs	r0, r3
    8d62:	4b42      	ldr	r3, [pc, #264]	; (8e6c <spi_init+0x194>)
    8d64:	58e3      	ldr	r3, [r4, r3]
    8d66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8d68:	697b      	ldr	r3, [r7, #20]
    8d6a:	b2db      	uxtb	r3, r3
    8d6c:	0018      	movs	r0, r3
    8d6e:	4b40      	ldr	r3, [pc, #256]	; (8e70 <spi_init+0x198>)
    8d70:	58e3      	ldr	r3, [r4, r3]
    8d72:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	2224      	movs	r2, #36	; 0x24
    8d78:	5c9b      	ldrb	r3, [r3, r2]
    8d7a:	2100      	movs	r1, #0
    8d7c:	0018      	movs	r0, r3
    8d7e:	4b3d      	ldr	r3, [pc, #244]	; (8e74 <spi_init+0x19c>)
    8d80:	58e3      	ldr	r3, [r4, r3]
    8d82:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    8d84:	687b      	ldr	r3, [r7, #4]
    8d86:	781b      	ldrb	r3, [r3, #0]
    8d88:	2b01      	cmp	r3, #1
    8d8a:	d105      	bne.n	8d98 <spi_init+0xc0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    8d8c:	6a3b      	ldr	r3, [r7, #32]
    8d8e:	681b      	ldr	r3, [r3, #0]
    8d90:	220c      	movs	r2, #12
    8d92:	431a      	orrs	r2, r3
    8d94:	6a3b      	ldr	r3, [r7, #32]
    8d96:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8d98:	2327      	movs	r3, #39	; 0x27
    8d9a:	18fb      	adds	r3, r7, r3
    8d9c:	2200      	movs	r2, #0
    8d9e:	701a      	strb	r2, [r3, #0]
    8da0:	e010      	b.n	8dc4 <spi_init+0xec>
		module->callback[i]        = NULL;
    8da2:	2327      	movs	r3, #39	; 0x27
    8da4:	18fb      	adds	r3, r7, r3
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	68fa      	ldr	r2, [r7, #12]
    8daa:	3302      	adds	r3, #2
    8dac:	009b      	lsls	r3, r3, #2
    8dae:	18d3      	adds	r3, r2, r3
    8db0:	3304      	adds	r3, #4
    8db2:	2200      	movs	r2, #0
    8db4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8db6:	2327      	movs	r3, #39	; 0x27
    8db8:	18fb      	adds	r3, r7, r3
    8dba:	781a      	ldrb	r2, [r3, #0]
    8dbc:	2327      	movs	r3, #39	; 0x27
    8dbe:	18fb      	adds	r3, r7, r3
    8dc0:	3201      	adds	r2, #1
    8dc2:	701a      	strb	r2, [r3, #0]
    8dc4:	2327      	movs	r3, #39	; 0x27
    8dc6:	18fb      	adds	r3, r7, r3
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	2b06      	cmp	r3, #6
    8dcc:	d9e9      	bls.n	8da2 <spi_init+0xca>
	}
	module->tx_buffer_ptr              = NULL;
    8dce:	68fb      	ldr	r3, [r7, #12]
    8dd0:	2200      	movs	r2, #0
    8dd2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    8dd4:	68fb      	ldr	r3, [r7, #12]
    8dd6:	2200      	movs	r2, #0
    8dd8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    8dda:	68fb      	ldr	r3, [r7, #12]
    8ddc:	2200      	movs	r2, #0
    8dde:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    8de0:	68fb      	ldr	r3, [r7, #12]
    8de2:	2200      	movs	r2, #0
    8de4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    8de6:	68fb      	ldr	r3, [r7, #12]
    8de8:	2236      	movs	r2, #54	; 0x36
    8dea:	2100      	movs	r1, #0
    8dec:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    8dee:	68fb      	ldr	r3, [r7, #12]
    8df0:	2237      	movs	r2, #55	; 0x37
    8df2:	2100      	movs	r1, #0
    8df4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    8df6:	68fb      	ldr	r3, [r7, #12]
    8df8:	2238      	movs	r2, #56	; 0x38
    8dfa:	2100      	movs	r1, #0
    8dfc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    8dfe:	68fb      	ldr	r3, [r7, #12]
    8e00:	2203      	movs	r2, #3
    8e02:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    8e04:	68fb      	ldr	r3, [r7, #12]
    8e06:	2200      	movs	r2, #0
    8e08:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    8e0a:	68fb      	ldr	r3, [r7, #12]
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	2213      	movs	r2, #19
    8e10:	18bd      	adds	r5, r7, r2
    8e12:	0018      	movs	r0, r3
    8e14:	4b12      	ldr	r3, [pc, #72]	; (8e60 <spi_init+0x188>)
    8e16:	58e3      	ldr	r3, [r4, r3]
    8e18:	4798      	blx	r3
    8e1a:	0003      	movs	r3, r0
    8e1c:	702b      	strb	r3, [r5, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    8e1e:	4b16      	ldr	r3, [pc, #88]	; (8e78 <spi_init+0x1a0>)
    8e20:	58e3      	ldr	r3, [r4, r3]
    8e22:	001a      	movs	r2, r3
    8e24:	2313      	movs	r3, #19
    8e26:	18fb      	adds	r3, r7, r3
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	0011      	movs	r1, r2
    8e2c:	0018      	movs	r0, r3
    8e2e:	4b13      	ldr	r3, [pc, #76]	; (8e7c <spi_init+0x1a4>)
    8e30:	58e3      	ldr	r3, [r4, r3]
    8e32:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    8e34:	2313      	movs	r3, #19
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	781a      	ldrb	r2, [r3, #0]
    8e3a:	4b11      	ldr	r3, [pc, #68]	; (8e80 <spi_init+0x1a8>)
    8e3c:	58e3      	ldr	r3, [r4, r3]
    8e3e:	0092      	lsls	r2, r2, #2
    8e40:	68f9      	ldr	r1, [r7, #12]
    8e42:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    8e44:	687a      	ldr	r2, [r7, #4]
    8e46:	68fb      	ldr	r3, [r7, #12]
    8e48:	0011      	movs	r1, r2
    8e4a:	0018      	movs	r0, r3
    8e4c:	4b0d      	ldr	r3, [pc, #52]	; (8e84 <spi_init+0x1ac>)
    8e4e:	447b      	add	r3, pc
    8e50:	4798      	blx	r3
    8e52:	0003      	movs	r3, r0
}
    8e54:	0018      	movs	r0, r3
    8e56:	46bd      	mov	sp, r7
    8e58:	b00a      	add	sp, #40	; 0x28
    8e5a:	bdb0      	pop	{r4, r5, r7, pc}
    8e5c:	0000917a 	.word	0x0000917a
    8e60:	000002b4 	.word	0x000002b4
    8e64:	fffff93b 	.word	0xfffff93b
    8e68:	fffff917 	.word	0xfffff917
    8e6c:	000000b0 	.word	0x000000b0
    8e70:	00000238 	.word	0x00000238
    8e74:	00000230 	.word	0x00000230
    8e78:	000000c4 	.word	0x000000c4
    8e7c:	00000168 	.word	0x00000168
    8e80:	00000158 	.word	0x00000158
    8e84:	fffffc5f 	.word	0xfffffc5f

00008e88 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    8e88:	b590      	push	{r4, r7, lr}
    8e8a:	b087      	sub	sp, #28
    8e8c:	af00      	add	r7, sp, #0
    8e8e:	60f8      	str	r0, [r7, #12]
    8e90:	60b9      	str	r1, [r7, #8]
    8e92:	0019      	movs	r1, r3
    8e94:	1dbb      	adds	r3, r7, #6
    8e96:	801a      	strh	r2, [r3, #0]
    8e98:	1d3b      	adds	r3, r7, #4
    8e9a:	1c0a      	adds	r2, r1, #0
    8e9c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8e9e:	68fb      	ldr	r3, [r7, #12]
    8ea0:	2238      	movs	r2, #56	; 0x38
    8ea2:	5c9b      	ldrb	r3, [r3, r2]
    8ea4:	b2db      	uxtb	r3, r3
    8ea6:	2b05      	cmp	r3, #5
    8ea8:	d101      	bne.n	8eae <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8eaa:	2305      	movs	r3, #5
    8eac:	e07e      	b.n	8fac <spi_read_buffer_wait+0x124>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    8eae:	1dbb      	adds	r3, r7, #6
    8eb0:	881b      	ldrh	r3, [r3, #0]
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d101      	bne.n	8eba <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    8eb6:	2317      	movs	r3, #23
    8eb8:	e078      	b.n	8fac <spi_read_buffer_wait+0x124>
	}

	if (!(module->receiver_enabled)) {
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	79db      	ldrb	r3, [r3, #7]
    8ebe:	2201      	movs	r2, #1
    8ec0:	4053      	eors	r3, r2
    8ec2:	b2db      	uxtb	r3, r3
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d001      	beq.n	8ecc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    8ec8:	231c      	movs	r3, #28
    8eca:	e06f      	b.n	8fac <spi_read_buffer_wait+0x124>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    8ecc:	2316      	movs	r3, #22
    8ece:	18fb      	adds	r3, r7, r3
    8ed0:	2200      	movs	r2, #0
    8ed2:	801a      	strh	r2, [r3, #0]

	while (length--) {
    8ed4:	e062      	b.n	8f9c <spi_read_buffer_wait+0x114>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    8ed6:	68fb      	ldr	r3, [r7, #12]
    8ed8:	795b      	ldrb	r3, [r3, #5]
    8eda:	2b01      	cmp	r3, #1
    8edc:	d114      	bne.n	8f08 <spi_read_buffer_wait+0x80>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    8ede:	46c0      	nop			; (mov r8, r8)
    8ee0:	68fb      	ldr	r3, [r7, #12]
    8ee2:	0018      	movs	r0, r3
    8ee4:	4b33      	ldr	r3, [pc, #204]	; (8fb4 <spi_read_buffer_wait+0x12c>)
    8ee6:	447b      	add	r3, pc
    8ee8:	4798      	blx	r3
    8eea:	0003      	movs	r3, r0
    8eec:	001a      	movs	r2, r3
    8eee:	2301      	movs	r3, #1
    8ef0:	4053      	eors	r3, r2
    8ef2:	b2db      	uxtb	r3, r3
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d1f3      	bne.n	8ee0 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    8ef8:	1d3b      	adds	r3, r7, #4
    8efa:	881a      	ldrh	r2, [r3, #0]
    8efc:	68fb      	ldr	r3, [r7, #12]
    8efe:	0011      	movs	r1, r2
    8f00:	0018      	movs	r0, r3
    8f02:	4b2d      	ldr	r3, [pc, #180]	; (8fb8 <spi_read_buffer_wait+0x130>)
    8f04:	447b      	add	r3, pc
    8f06:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8f08:	46c0      	nop			; (mov r8, r8)
    8f0a:	68fb      	ldr	r3, [r7, #12]
    8f0c:	0018      	movs	r0, r3
    8f0e:	4b2b      	ldr	r3, [pc, #172]	; (8fbc <spi_read_buffer_wait+0x134>)
    8f10:	447b      	add	r3, pc
    8f12:	4798      	blx	r3
    8f14:	0003      	movs	r3, r0
    8f16:	001a      	movs	r2, r3
    8f18:	2301      	movs	r3, #1
    8f1a:	4053      	eors	r3, r2
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d1f3      	bne.n	8f0a <spi_read_buffer_wait+0x82>
		}

		uint16_t received_data = 0;
    8f22:	2312      	movs	r3, #18
    8f24:	18fb      	adds	r3, r7, r3
    8f26:	2200      	movs	r2, #0
    8f28:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    8f2a:	2315      	movs	r3, #21
    8f2c:	18fc      	adds	r4, r7, r3
    8f2e:	2312      	movs	r3, #18
    8f30:	18fa      	adds	r2, r7, r3
    8f32:	68fb      	ldr	r3, [r7, #12]
    8f34:	0011      	movs	r1, r2
    8f36:	0018      	movs	r0, r3
    8f38:	4b21      	ldr	r3, [pc, #132]	; (8fc0 <spi_read_buffer_wait+0x138>)
    8f3a:	447b      	add	r3, pc
    8f3c:	4798      	blx	r3
    8f3e:	0003      	movs	r3, r0
    8f40:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    8f42:	2315      	movs	r3, #21
    8f44:	18fb      	adds	r3, r7, r3
    8f46:	781b      	ldrb	r3, [r3, #0]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	d003      	beq.n	8f54 <spi_read_buffer_wait+0xcc>
			/* Overflow, abort */
			return retval;
    8f4c:	2315      	movs	r3, #21
    8f4e:	18fb      	adds	r3, r7, r3
    8f50:	781b      	ldrb	r3, [r3, #0]
    8f52:	e02b      	b.n	8fac <spi_read_buffer_wait+0x124>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    8f54:	2316      	movs	r3, #22
    8f56:	18fb      	adds	r3, r7, r3
    8f58:	881b      	ldrh	r3, [r3, #0]
    8f5a:	2216      	movs	r2, #22
    8f5c:	18ba      	adds	r2, r7, r2
    8f5e:	1c59      	adds	r1, r3, #1
    8f60:	8011      	strh	r1, [r2, #0]
    8f62:	001a      	movs	r2, r3
    8f64:	68bb      	ldr	r3, [r7, #8]
    8f66:	189b      	adds	r3, r3, r2
    8f68:	2212      	movs	r2, #18
    8f6a:	18ba      	adds	r2, r7, r2
    8f6c:	8812      	ldrh	r2, [r2, #0]
    8f6e:	b2d2      	uxtb	r2, r2
    8f70:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8f72:	68fb      	ldr	r3, [r7, #12]
    8f74:	799b      	ldrb	r3, [r3, #6]
    8f76:	2b01      	cmp	r3, #1
    8f78:	d110      	bne.n	8f9c <spi_read_buffer_wait+0x114>
			rx_data[rx_pos++] = (received_data >> 8);
    8f7a:	2316      	movs	r3, #22
    8f7c:	18fb      	adds	r3, r7, r3
    8f7e:	881b      	ldrh	r3, [r3, #0]
    8f80:	2216      	movs	r2, #22
    8f82:	18ba      	adds	r2, r7, r2
    8f84:	1c59      	adds	r1, r3, #1
    8f86:	8011      	strh	r1, [r2, #0]
    8f88:	001a      	movs	r2, r3
    8f8a:	68bb      	ldr	r3, [r7, #8]
    8f8c:	189b      	adds	r3, r3, r2
    8f8e:	2212      	movs	r2, #18
    8f90:	18ba      	adds	r2, r7, r2
    8f92:	8812      	ldrh	r2, [r2, #0]
    8f94:	0a12      	lsrs	r2, r2, #8
    8f96:	b292      	uxth	r2, r2
    8f98:	b2d2      	uxtb	r2, r2
    8f9a:	701a      	strb	r2, [r3, #0]
	while (length--) {
    8f9c:	1dbb      	adds	r3, r7, #6
    8f9e:	881b      	ldrh	r3, [r3, #0]
    8fa0:	1dba      	adds	r2, r7, #6
    8fa2:	1e59      	subs	r1, r3, #1
    8fa4:	8011      	strh	r1, [r2, #0]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d195      	bne.n	8ed6 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    8faa:	2300      	movs	r3, #0
}
    8fac:	0018      	movs	r0, r3
    8fae:	46bd      	mov	sp, r7
    8fb0:	b007      	add	sp, #28
    8fb2:	bd90      	pop	{r4, r7, pc}
    8fb4:	fffff977 	.word	0xfffff977
    8fb8:	fffff9a9 	.word	0xfffff9a9
    8fbc:	fffff975 	.word	0xfffff975
    8fc0:	fffff9bf 	.word	0xfffff9bf

00008fc4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8fc4:	b580      	push	{r7, lr}
    8fc6:	b086      	sub	sp, #24
    8fc8:	af00      	add	r7, sp, #0
    8fca:	60f8      	str	r0, [r7, #12]
    8fcc:	60b9      	str	r1, [r7, #8]
    8fce:	1dfb      	adds	r3, r7, #7
    8fd0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    8fd2:	68fb      	ldr	r3, [r7, #12]
    8fd4:	795b      	ldrb	r3, [r3, #5]
    8fd6:	2b01      	cmp	r3, #1
    8fd8:	d001      	beq.n	8fde <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    8fda:	2315      	movs	r3, #21
    8fdc:	e064      	b.n	90a8 <spi_select_slave+0xe4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    8fde:	68fb      	ldr	r3, [r7, #12]
    8fe0:	7a1b      	ldrb	r3, [r3, #8]
    8fe2:	2201      	movs	r2, #1
    8fe4:	4053      	eors	r3, r2
    8fe6:	b2db      	uxtb	r3, r3
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d05c      	beq.n	90a6 <spi_select_slave+0xe2>
#  endif
	{
		if (select) {
    8fec:	1dfb      	adds	r3, r7, #7
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d051      	beq.n	9098 <spi_select_slave+0xd4>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    8ff4:	68bb      	ldr	r3, [r7, #8]
    8ff6:	785b      	ldrb	r3, [r3, #1]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d045      	beq.n	9088 <spi_select_slave+0xc4>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    8ffc:	68fb      	ldr	r3, [r7, #12]
    8ffe:	0018      	movs	r0, r3
    9000:	4b2b      	ldr	r3, [pc, #172]	; (90b0 <spi_select_slave+0xec>)
    9002:	447b      	add	r3, pc
    9004:	4798      	blx	r3
    9006:	0003      	movs	r3, r0
    9008:	001a      	movs	r2, r3
    900a:	2301      	movs	r3, #1
    900c:	4053      	eors	r3, r2
    900e:	b2db      	uxtb	r3, r3
    9010:	2b00      	cmp	r3, #0
    9012:	d008      	beq.n	9026 <spi_select_slave+0x62>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    9014:	68bb      	ldr	r3, [r7, #8]
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	2101      	movs	r1, #1
    901a:	0018      	movs	r0, r3
    901c:	4b25      	ldr	r3, [pc, #148]	; (90b4 <spi_select_slave+0xf0>)
    901e:	447b      	add	r3, pc
    9020:	4798      	blx	r3
					return STATUS_BUSY;
    9022:	2305      	movs	r3, #5
    9024:	e040      	b.n	90a8 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9026:	68bb      	ldr	r3, [r7, #8]
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	2100      	movs	r1, #0
    902c:	0018      	movs	r0, r3
    902e:	4b22      	ldr	r3, [pc, #136]	; (90b8 <spi_select_slave+0xf4>)
    9030:	447b      	add	r3, pc
    9032:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    9034:	68bb      	ldr	r3, [r7, #8]
    9036:	789b      	ldrb	r3, [r3, #2]
    9038:	b29a      	uxth	r2, r3
    903a:	68fb      	ldr	r3, [r7, #12]
    903c:	0011      	movs	r1, r2
    903e:	0018      	movs	r0, r3
    9040:	4b1e      	ldr	r3, [pc, #120]	; (90bc <spi_select_slave+0xf8>)
    9042:	447b      	add	r3, pc
    9044:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    9046:	68fb      	ldr	r3, [r7, #12]
    9048:	79db      	ldrb	r3, [r3, #7]
    904a:	2201      	movs	r2, #1
    904c:	4053      	eors	r3, r2
    904e:	b2db      	uxtb	r3, r3
    9050:	2b00      	cmp	r3, #0
    9052:	d028      	beq.n	90a6 <spi_select_slave+0xe2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    9054:	46c0      	nop			; (mov r8, r8)
    9056:	68fb      	ldr	r3, [r7, #12]
    9058:	0018      	movs	r0, r3
    905a:	4b19      	ldr	r3, [pc, #100]	; (90c0 <spi_select_slave+0xfc>)
    905c:	447b      	add	r3, pc
    905e:	4798      	blx	r3
    9060:	0003      	movs	r3, r0
    9062:	001a      	movs	r2, r3
    9064:	2301      	movs	r3, #1
    9066:	4053      	eors	r3, r2
    9068:	b2db      	uxtb	r3, r3
    906a:	2b00      	cmp	r3, #0
    906c:	d1f3      	bne.n	9056 <spi_select_slave+0x92>
					}
					uint16_t flush = 0;
    906e:	2316      	movs	r3, #22
    9070:	18fb      	adds	r3, r7, r3
    9072:	2200      	movs	r2, #0
    9074:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    9076:	2316      	movs	r3, #22
    9078:	18fa      	adds	r2, r7, r3
    907a:	68fb      	ldr	r3, [r7, #12]
    907c:	0011      	movs	r1, r2
    907e:	0018      	movs	r0, r3
    9080:	4b10      	ldr	r3, [pc, #64]	; (90c4 <spi_select_slave+0x100>)
    9082:	447b      	add	r3, pc
    9084:	4798      	blx	r3
    9086:	e00e      	b.n	90a6 <spi_select_slave+0xe2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9088:	68bb      	ldr	r3, [r7, #8]
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	2100      	movs	r1, #0
    908e:	0018      	movs	r0, r3
    9090:	4b0d      	ldr	r3, [pc, #52]	; (90c8 <spi_select_slave+0x104>)
    9092:	447b      	add	r3, pc
    9094:	4798      	blx	r3
    9096:	e006      	b.n	90a6 <spi_select_slave+0xe2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    9098:	68bb      	ldr	r3, [r7, #8]
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	2101      	movs	r1, #1
    909e:	0018      	movs	r0, r3
    90a0:	4b0a      	ldr	r3, [pc, #40]	; (90cc <spi_select_slave+0x108>)
    90a2:	447b      	add	r3, pc
    90a4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    90a6:	2300      	movs	r3, #0
}
    90a8:	0018      	movs	r0, r3
    90aa:	46bd      	mov	sp, r7
    90ac:	b006      	add	sp, #24
    90ae:	bd80      	pop	{r7, pc}
    90b0:	fffff85b 	.word	0xfffff85b
    90b4:	fffff5eb 	.word	0xfffff5eb
    90b8:	fffff5d9 	.word	0xfffff5d9
    90bc:	fffff86b 	.word	0xfffff86b
    90c0:	fffff829 	.word	0xfffff829
    90c4:	fffff877 	.word	0xfffff877
    90c8:	fffff577 	.word	0xfffff577
    90cc:	fffff567 	.word	0xfffff567

000090d0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    90d0:	b580      	push	{r7, lr}
    90d2:	b086      	sub	sp, #24
    90d4:	af00      	add	r7, sp, #0
    90d6:	60f8      	str	r0, [r7, #12]
    90d8:	60b9      	str	r1, [r7, #8]
    90da:	1dbb      	adds	r3, r7, #6
    90dc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    90de:	68fb      	ldr	r3, [r7, #12]
    90e0:	2238      	movs	r2, #56	; 0x38
    90e2:	5c9b      	ldrb	r3, [r3, r2]
    90e4:	b2db      	uxtb	r3, r3
    90e6:	2b05      	cmp	r3, #5
    90e8:	d101      	bne.n	90ee <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    90ea:	2305      	movs	r3, #5
    90ec:	e08c      	b.n	9208 <spi_write_buffer_wait+0x138>
	}
#  endif

	if (length == 0) {
    90ee:	1dbb      	adds	r3, r7, #6
    90f0:	881b      	ldrh	r3, [r3, #0]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d101      	bne.n	90fa <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    90f6:	2317      	movs	r3, #23
    90f8:	e086      	b.n	9208 <spi_write_buffer_wait+0x138>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    90fa:	2316      	movs	r3, #22
    90fc:	18fb      	adds	r3, r7, r3
    90fe:	2200      	movs	r2, #0
    9100:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    9102:	2314      	movs	r3, #20
    9104:	18fb      	adds	r3, r7, r3
    9106:	1dba      	adds	r2, r7, #6
    9108:	8812      	ldrh	r2, [r2, #0]
    910a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    910c:	e063      	b.n	91d6 <spi_write_buffer_wait+0x106>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    910e:	46c0      	nop			; (mov r8, r8)
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	0018      	movs	r0, r3
    9114:	4b3e      	ldr	r3, [pc, #248]	; (9210 <spi_write_buffer_wait+0x140>)
    9116:	447b      	add	r3, pc
    9118:	4798      	blx	r3
    911a:	0003      	movs	r3, r0
    911c:	001a      	movs	r2, r3
    911e:	2301      	movs	r3, #1
    9120:	4053      	eors	r3, r2
    9122:	b2db      	uxtb	r3, r3
    9124:	2b00      	cmp	r3, #0
    9126:	d1f3      	bne.n	9110 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    9128:	2316      	movs	r3, #22
    912a:	18fb      	adds	r3, r7, r3
    912c:	881b      	ldrh	r3, [r3, #0]
    912e:	2216      	movs	r2, #22
    9130:	18ba      	adds	r2, r7, r2
    9132:	1c59      	adds	r1, r3, #1
    9134:	8011      	strh	r1, [r2, #0]
    9136:	001a      	movs	r2, r3
    9138:	68bb      	ldr	r3, [r7, #8]
    913a:	189b      	adds	r3, r3, r2
    913c:	781a      	ldrb	r2, [r3, #0]
    913e:	2312      	movs	r3, #18
    9140:	18fb      	adds	r3, r7, r3
    9142:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9144:	68fb      	ldr	r3, [r7, #12]
    9146:	799b      	ldrb	r3, [r3, #6]
    9148:	2b01      	cmp	r3, #1
    914a:	d115      	bne.n	9178 <spi_write_buffer_wait+0xa8>
			data_to_send |= (tx_data[tx_pos++] << 8);
    914c:	2316      	movs	r3, #22
    914e:	18fb      	adds	r3, r7, r3
    9150:	881b      	ldrh	r3, [r3, #0]
    9152:	2216      	movs	r2, #22
    9154:	18ba      	adds	r2, r7, r2
    9156:	1c59      	adds	r1, r3, #1
    9158:	8011      	strh	r1, [r2, #0]
    915a:	001a      	movs	r2, r3
    915c:	68bb      	ldr	r3, [r7, #8]
    915e:	189b      	adds	r3, r3, r2
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	021b      	lsls	r3, r3, #8
    9164:	b21a      	sxth	r2, r3
    9166:	2312      	movs	r3, #18
    9168:	18fb      	adds	r3, r7, r3
    916a:	2100      	movs	r1, #0
    916c:	5e5b      	ldrsh	r3, [r3, r1]
    916e:	4313      	orrs	r3, r2
    9170:	b21a      	sxth	r2, r3
    9172:	2312      	movs	r3, #18
    9174:	18fb      	adds	r3, r7, r3
    9176:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    9178:	2312      	movs	r3, #18
    917a:	18fb      	adds	r3, r7, r3
    917c:	881a      	ldrh	r2, [r3, #0]
    917e:	68fb      	ldr	r3, [r7, #12]
    9180:	0011      	movs	r1, r2
    9182:	0018      	movs	r0, r3
    9184:	4b23      	ldr	r3, [pc, #140]	; (9214 <spi_write_buffer_wait+0x144>)
    9186:	447b      	add	r3, pc
    9188:	4798      	blx	r3

		if (module->receiver_enabled) {
    918a:	68fb      	ldr	r3, [r7, #12]
    918c:	79db      	ldrb	r3, [r3, #7]
    918e:	2214      	movs	r2, #20
    9190:	18ba      	adds	r2, r7, r2
    9192:	2114      	movs	r1, #20
    9194:	1879      	adds	r1, r7, r1
    9196:	8809      	ldrh	r1, [r1, #0]
    9198:	8011      	strh	r1, [r2, #0]
    919a:	2b00      	cmp	r3, #0
    919c:	d01b      	beq.n	91d6 <spi_write_buffer_wait+0x106>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    919e:	46c0      	nop			; (mov r8, r8)
    91a0:	68fb      	ldr	r3, [r7, #12]
    91a2:	0018      	movs	r0, r3
    91a4:	4b1c      	ldr	r3, [pc, #112]	; (9218 <spi_write_buffer_wait+0x148>)
    91a6:	447b      	add	r3, pc
    91a8:	4798      	blx	r3
    91aa:	0003      	movs	r3, r0
    91ac:	001a      	movs	r2, r3
    91ae:	2301      	movs	r3, #1
    91b0:	4053      	eors	r3, r2
    91b2:	b2db      	uxtb	r3, r3
    91b4:	2b00      	cmp	r3, #0
    91b6:	d1f3      	bne.n	91a0 <spi_write_buffer_wait+0xd0>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    91b8:	2310      	movs	r3, #16
    91ba:	18fa      	adds	r2, r7, r3
    91bc:	68fb      	ldr	r3, [r7, #12]
    91be:	0011      	movs	r1, r2
    91c0:	0018      	movs	r0, r3
    91c2:	4b16      	ldr	r3, [pc, #88]	; (921c <spi_write_buffer_wait+0x14c>)
    91c4:	447b      	add	r3, pc
    91c6:	4798      	blx	r3
			flush_length--;
    91c8:	2314      	movs	r3, #20
    91ca:	18fb      	adds	r3, r7, r3
    91cc:	881a      	ldrh	r2, [r3, #0]
    91ce:	2314      	movs	r3, #20
    91d0:	18fb      	adds	r3, r7, r3
    91d2:	3a01      	subs	r2, #1
    91d4:	801a      	strh	r2, [r3, #0]
	while (length--) {
    91d6:	1dbb      	adds	r3, r7, #6
    91d8:	881b      	ldrh	r3, [r3, #0]
    91da:	1dba      	adds	r2, r7, #6
    91dc:	1e59      	subs	r1, r3, #1
    91de:	8011      	strh	r1, [r2, #0]
    91e0:	2b00      	cmp	r3, #0
    91e2:	d194      	bne.n	910e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    91e4:	68fb      	ldr	r3, [r7, #12]
    91e6:	795b      	ldrb	r3, [r3, #5]
    91e8:	2b01      	cmp	r3, #1
    91ea:	d10c      	bne.n	9206 <spi_write_buffer_wait+0x136>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    91ec:	46c0      	nop			; (mov r8, r8)
    91ee:	68fb      	ldr	r3, [r7, #12]
    91f0:	0018      	movs	r0, r3
    91f2:	4b0b      	ldr	r3, [pc, #44]	; (9220 <spi_write_buffer_wait+0x150>)
    91f4:	447b      	add	r3, pc
    91f6:	4798      	blx	r3
    91f8:	0003      	movs	r3, r0
    91fa:	001a      	movs	r2, r3
    91fc:	2301      	movs	r3, #1
    91fe:	4053      	eors	r3, r2
    9200:	b2db      	uxtb	r3, r3
    9202:	2b00      	cmp	r3, #0
    9204:	d1f3      	bne.n	91ee <spi_write_buffer_wait+0x11e>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    9206:	2300      	movs	r3, #0
}
    9208:	0018      	movs	r0, r3
    920a:	46bd      	mov	sp, r7
    920c:	b006      	add	sp, #24
    920e:	bd80      	pop	{r7, pc}
    9210:	fffff747 	.word	0xfffff747
    9214:	fffff727 	.word	0xfffff727
    9218:	fffff6df 	.word	0xfffff6df
    921c:	fffff735 	.word	0xfffff735
    9220:	fffff641 	.word	0xfffff641

00009224 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    9224:	b580      	push	{r7, lr}
    9226:	b084      	sub	sp, #16
    9228:	af00      	add	r7, sp, #0
    922a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	681b      	ldr	r3, [r3, #0]
    9230:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	b2da      	uxtb	r2, r3
    923a:	230e      	movs	r3, #14
    923c:	18fb      	adds	r3, r7, r3
    923e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9244:	1c5a      	adds	r2, r3, #1
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    924a:	687b      	ldr	r3, [r7, #4]
    924c:	799b      	ldrb	r3, [r3, #6]
    924e:	2b01      	cmp	r3, #1
    9250:	d113      	bne.n	927a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	b2db      	uxtb	r3, r3
    925a:	021b      	lsls	r3, r3, #8
    925c:	b21a      	sxth	r2, r3
    925e:	230e      	movs	r3, #14
    9260:	18fb      	adds	r3, r7, r3
    9262:	2100      	movs	r1, #0
    9264:	5e5b      	ldrsh	r3, [r3, r1]
    9266:	4313      	orrs	r3, r2
    9268:	b21a      	sxth	r2, r3
    926a:	230e      	movs	r3, #14
    926c:	18fb      	adds	r3, r7, r3
    926e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9274:	1c5a      	adds	r2, r3, #1
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    927a:	230e      	movs	r3, #14
    927c:	18fb      	adds	r3, r7, r3
    927e:	881b      	ldrh	r3, [r3, #0]
    9280:	05db      	lsls	r3, r3, #23
    9282:	0dda      	lsrs	r2, r3, #23
    9284:	68bb      	ldr	r3, [r7, #8]
    9286:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    928c:	b29b      	uxth	r3, r3
    928e:	3b01      	subs	r3, #1
    9290:	b29a      	uxth	r2, r3
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	869a      	strh	r2, [r3, #52]	; 0x34
}
    9296:	46c0      	nop			; (mov r8, r8)
    9298:	46bd      	mov	sp, r7
    929a:	b004      	add	sp, #16
    929c:	bd80      	pop	{r7, pc}
	...

000092a0 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    92a0:	b580      	push	{r7, lr}
    92a2:	b084      	sub	sp, #16
    92a4:	af00      	add	r7, sp, #0
    92a6:	6078      	str	r0, [r7, #4]
    92a8:	4a0a      	ldr	r2, [pc, #40]	; (92d4 <_spi_write_dummy+0x34>)
    92aa:	447a      	add	r2, pc
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	681b      	ldr	r3, [r3, #0]
    92b0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    92b2:	4b09      	ldr	r3, [pc, #36]	; (92d8 <_spi_write_dummy+0x38>)
    92b4:	58d3      	ldr	r3, [r2, r3]
    92b6:	881b      	ldrh	r3, [r3, #0]
    92b8:	001a      	movs	r2, r3
    92ba:	68fb      	ldr	r3, [r7, #12]
    92bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    92c2:	b29b      	uxth	r3, r3
    92c4:	3b01      	subs	r3, #1
    92c6:	b29a      	uxth	r2, r3
    92c8:	687b      	ldr	r3, [r7, #4]
    92ca:	865a      	strh	r2, [r3, #50]	; 0x32
}
    92cc:	46c0      	nop			; (mov r8, r8)
    92ce:	46bd      	mov	sp, r7
    92d0:	b004      	add	sp, #16
    92d2:	bd80      	pop	{r7, pc}
    92d4:	00008bb6 	.word	0x00008bb6
    92d8:	0000013c 	.word	0x0000013c

000092dc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    92dc:	b580      	push	{r7, lr}
    92de:	b084      	sub	sp, #16
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	681b      	ldr	r3, [r3, #0]
    92e8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    92ea:	230a      	movs	r3, #10
    92ec:	18fb      	adds	r3, r7, r3
    92ee:	2200      	movs	r2, #0
    92f0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    92f2:	68fb      	ldr	r3, [r7, #12]
    92f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    92f6:	230a      	movs	r3, #10
    92f8:	18fb      	adds	r3, r7, r3
    92fa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9300:	b29b      	uxth	r3, r3
    9302:	3b01      	subs	r3, #1
    9304:	b29a      	uxth	r2, r3
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	865a      	strh	r2, [r3, #50]	; 0x32
}
    930a:	46c0      	nop			; (mov r8, r8)
    930c:	46bd      	mov	sp, r7
    930e:	b004      	add	sp, #16
    9310:	bd80      	pop	{r7, pc}

00009312 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    9312:	b580      	push	{r7, lr}
    9314:	b084      	sub	sp, #16
    9316:	af00      	add	r7, sp, #0
    9318:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9320:	68fb      	ldr	r3, [r7, #12]
    9322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9324:	b29a      	uxth	r2, r3
    9326:	230a      	movs	r3, #10
    9328:	18fb      	adds	r3, r7, r3
    932a:	05d2      	lsls	r2, r2, #23
    932c:	0dd2      	lsrs	r2, r2, #23
    932e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    9330:	687b      	ldr	r3, [r7, #4]
    9332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9334:	220a      	movs	r2, #10
    9336:	18ba      	adds	r2, r7, r2
    9338:	8812      	ldrh	r2, [r2, #0]
    933a:	b2d2      	uxtb	r2, r2
    933c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    933e:	687b      	ldr	r3, [r7, #4]
    9340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9342:	1c5a      	adds	r2, r3, #1
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9348:	687b      	ldr	r3, [r7, #4]
    934a:	799b      	ldrb	r3, [r3, #6]
    934c:	2b01      	cmp	r3, #1
    934e:	d10d      	bne.n	936c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    9350:	687b      	ldr	r3, [r7, #4]
    9352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9354:	220a      	movs	r2, #10
    9356:	18ba      	adds	r2, r7, r2
    9358:	8812      	ldrh	r2, [r2, #0]
    935a:	0a12      	lsrs	r2, r2, #8
    935c:	b292      	uxth	r2, r2
    935e:	b2d2      	uxtb	r2, r2
    9360:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9366:	1c5a      	adds	r2, r3, #1
    9368:	687b      	ldr	r3, [r7, #4]
    936a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    936c:	687b      	ldr	r3, [r7, #4]
    936e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    9370:	b29b      	uxth	r3, r3
    9372:	3b01      	subs	r3, #1
    9374:	b29a      	uxth	r2, r3
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	861a      	strh	r2, [r3, #48]	; 0x30
}
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	46bd      	mov	sp, r7
    937e:	b004      	add	sp, #16
    9380:	bd80      	pop	{r7, pc}
	...

00009384 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    9384:	b580      	push	{r7, lr}
    9386:	b086      	sub	sp, #24
    9388:	af00      	add	r7, sp, #0
    938a:	0002      	movs	r2, r0
    938c:	1dfb      	adds	r3, r7, #7
    938e:	701a      	strb	r2, [r3, #0]
    9390:	499a      	ldr	r1, [pc, #616]	; (95fc <_spi_interrupt_handler+0x278>)
    9392:	4479      	add	r1, pc
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    9394:	1dfb      	adds	r3, r7, #7
    9396:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    9398:	4b99      	ldr	r3, [pc, #612]	; (9600 <_spi_interrupt_handler+0x27c>)
    939a:	58cb      	ldr	r3, [r1, r3]
    939c:	0092      	lsls	r2, r2, #2
    939e:	58d3      	ldr	r3, [r2, r3]
    93a0:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    93a2:	697b      	ldr	r3, [r7, #20]
    93a4:	681b      	ldr	r3, [r3, #0]
    93a6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    93a8:	697b      	ldr	r3, [r7, #20]
    93aa:	2237      	movs	r2, #55	; 0x37
    93ac:	5c9a      	ldrb	r2, [r3, r2]
    93ae:	697b      	ldr	r3, [r7, #20]
    93b0:	2136      	movs	r1, #54	; 0x36
    93b2:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    93b4:	230f      	movs	r3, #15
    93b6:	18fb      	adds	r3, r7, r3
    93b8:	400a      	ands	r2, r1
    93ba:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    93bc:	693b      	ldr	r3, [r7, #16]
    93be:	7e1b      	ldrb	r3, [r3, #24]
    93c0:	b2da      	uxtb	r2, r3
    93c2:	230c      	movs	r3, #12
    93c4:	18fb      	adds	r3, r7, r3
    93c6:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    93c8:	693b      	ldr	r3, [r7, #16]
    93ca:	7d9b      	ldrb	r3, [r3, #22]
    93cc:	b2db      	uxtb	r3, r3
    93ce:	b29a      	uxth	r2, r3
    93d0:	230c      	movs	r3, #12
    93d2:	18fb      	adds	r3, r7, r3
    93d4:	210c      	movs	r1, #12
    93d6:	1879      	adds	r1, r7, r1
    93d8:	8809      	ldrh	r1, [r1, #0]
    93da:	400a      	ands	r2, r1
    93dc:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    93de:	230c      	movs	r3, #12
    93e0:	18fb      	adds	r3, r7, r3
    93e2:	881b      	ldrh	r3, [r3, #0]
    93e4:	2201      	movs	r2, #1
    93e6:	4013      	ands	r3, r2
    93e8:	d03a      	beq.n	9460 <_spi_interrupt_handler+0xdc>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    93ea:	697b      	ldr	r3, [r7, #20]
    93ec:	795b      	ldrb	r3, [r3, #5]
    93ee:	2b01      	cmp	r3, #1
    93f0:	d111      	bne.n	9416 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    93f2:	697b      	ldr	r3, [r7, #20]
    93f4:	7a5b      	ldrb	r3, [r3, #9]
    93f6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    93f8:	2b00      	cmp	r3, #0
    93fa:	d10c      	bne.n	9416 <_spi_interrupt_handler+0x92>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    93fc:	697b      	ldr	r3, [r7, #20]
    93fe:	0018      	movs	r0, r3
    9400:	4b80      	ldr	r3, [pc, #512]	; (9604 <_spi_interrupt_handler+0x280>)
    9402:	447b      	add	r3, pc
    9404:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    9406:	697b      	ldr	r3, [r7, #20]
    9408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    940a:	b29b      	uxth	r3, r3
    940c:	2b00      	cmp	r3, #0
    940e:	d102      	bne.n	9416 <_spi_interrupt_handler+0x92>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9410:	693b      	ldr	r3, [r7, #16]
    9412:	2201      	movs	r2, #1
    9414:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    9416:	697b      	ldr	r3, [r7, #20]
    9418:	795b      	ldrb	r3, [r3, #5]
		if (0
    941a:	2b01      	cmp	r3, #1
    941c:	d120      	bne.n	9460 <_spi_interrupt_handler+0xdc>
			(module->dir != SPI_DIRECTION_READ))
    941e:	697b      	ldr	r3, [r7, #20]
    9420:	7a5b      	ldrb	r3, [r3, #9]
    9422:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    9424:	2b00      	cmp	r3, #0
    9426:	d01b      	beq.n	9460 <_spi_interrupt_handler+0xdc>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    9428:	697b      	ldr	r3, [r7, #20]
    942a:	0018      	movs	r0, r3
    942c:	4b76      	ldr	r3, [pc, #472]	; (9608 <_spi_interrupt_handler+0x284>)
    942e:	447b      	add	r3, pc
    9430:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    9432:	697b      	ldr	r3, [r7, #20]
    9434:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9436:	b29b      	uxth	r3, r3
    9438:	2b00      	cmp	r3, #0
    943a:	d111      	bne.n	9460 <_spi_interrupt_handler+0xdc>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    943c:	693b      	ldr	r3, [r7, #16]
    943e:	2201      	movs	r2, #1
    9440:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    9442:	697b      	ldr	r3, [r7, #20]
    9444:	7a5b      	ldrb	r3, [r3, #9]
    9446:	b2db      	uxtb	r3, r3
    9448:	2b01      	cmp	r3, #1
    944a:	d109      	bne.n	9460 <_spi_interrupt_handler+0xdc>
						!(module->receiver_enabled)) {
    944c:	697b      	ldr	r3, [r7, #20]
    944e:	79db      	ldrb	r3, [r3, #7]
    9450:	2201      	movs	r2, #1
    9452:	4053      	eors	r3, r2
    9454:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    9456:	2b00      	cmp	r3, #0
    9458:	d002      	beq.n	9460 <_spi_interrupt_handler+0xdc>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    945a:	693b      	ldr	r3, [r7, #16]
    945c:	2202      	movs	r2, #2
    945e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    9460:	230c      	movs	r3, #12
    9462:	18fb      	adds	r3, r7, r3
    9464:	881b      	ldrh	r3, [r3, #0]
    9466:	2204      	movs	r2, #4
    9468:	4013      	ands	r3, r2
    946a:	d100      	bne.n	946e <_spi_interrupt_handler+0xea>
    946c:	e080      	b.n	9570 <_spi_interrupt_handler+0x1ec>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    946e:	693b      	ldr	r3, [r7, #16]
    9470:	8b5b      	ldrh	r3, [r3, #26]
    9472:	b29b      	uxth	r3, r3
    9474:	001a      	movs	r2, r3
    9476:	2304      	movs	r3, #4
    9478:	4013      	ands	r3, r2
    947a:	d022      	beq.n	94c2 <_spi_interrupt_handler+0x13e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    947c:	697b      	ldr	r3, [r7, #20]
    947e:	7a5b      	ldrb	r3, [r3, #9]
    9480:	b2db      	uxtb	r3, r3
    9482:	2b01      	cmp	r3, #1
    9484:	d014      	beq.n	94b0 <_spi_interrupt_handler+0x12c>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    9486:	697b      	ldr	r3, [r7, #20]
    9488:	2238      	movs	r2, #56	; 0x38
    948a:	211e      	movs	r1, #30
    948c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    948e:	697b      	ldr	r3, [r7, #20]
    9490:	2203      	movs	r2, #3
    9492:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    9494:	693b      	ldr	r3, [r7, #16]
    9496:	2205      	movs	r2, #5
    9498:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    949a:	230f      	movs	r3, #15
    949c:	18fb      	adds	r3, r7, r3
    949e:	781b      	ldrb	r3, [r3, #0]
    94a0:	2208      	movs	r2, #8
    94a2:	4013      	ands	r3, r2
    94a4:	d004      	beq.n	94b0 <_spi_interrupt_handler+0x12c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    94a6:	697b      	ldr	r3, [r7, #20]
    94a8:	699b      	ldr	r3, [r3, #24]
    94aa:	697a      	ldr	r2, [r7, #20]
    94ac:	0010      	movs	r0, r2
    94ae:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    94b0:	693b      	ldr	r3, [r7, #16]
    94b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    94b4:	230a      	movs	r3, #10
    94b6:	18fb      	adds	r3, r7, r3
    94b8:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    94ba:	693b      	ldr	r3, [r7, #16]
    94bc:	2204      	movs	r2, #4
    94be:	835a      	strh	r2, [r3, #26]
    94c0:	e056      	b.n	9570 <_spi_interrupt_handler+0x1ec>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    94c2:	697b      	ldr	r3, [r7, #20]
    94c4:	7a5b      	ldrb	r3, [r3, #9]
    94c6:	b2db      	uxtb	r3, r3
    94c8:	2b01      	cmp	r3, #1
    94ca:	d11f      	bne.n	950c <_spi_interrupt_handler+0x188>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    94cc:	697b      	ldr	r3, [r7, #20]
    94ce:	0018      	movs	r0, r3
    94d0:	4b4e      	ldr	r3, [pc, #312]	; (960c <_spi_interrupt_handler+0x288>)
    94d2:	447b      	add	r3, pc
    94d4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    94d6:	697b      	ldr	r3, [r7, #20]
    94d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    94da:	b29b      	uxth	r3, r3
    94dc:	2b00      	cmp	r3, #0
    94de:	d147      	bne.n	9570 <_spi_interrupt_handler+0x1ec>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    94e0:	693b      	ldr	r3, [r7, #16]
    94e2:	2204      	movs	r2, #4
    94e4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    94e6:	697b      	ldr	r3, [r7, #20]
    94e8:	2238      	movs	r2, #56	; 0x38
    94ea:	2100      	movs	r1, #0
    94ec:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    94ee:	697b      	ldr	r3, [r7, #20]
    94f0:	2203      	movs	r2, #3
    94f2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    94f4:	230f      	movs	r3, #15
    94f6:	18fb      	adds	r3, r7, r3
    94f8:	781b      	ldrb	r3, [r3, #0]
    94fa:	2201      	movs	r2, #1
    94fc:	4013      	ands	r3, r2
    94fe:	d037      	beq.n	9570 <_spi_interrupt_handler+0x1ec>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    9500:	697b      	ldr	r3, [r7, #20]
    9502:	68db      	ldr	r3, [r3, #12]
    9504:	697a      	ldr	r2, [r7, #20]
    9506:	0010      	movs	r0, r2
    9508:	4798      	blx	r3
    950a:	e031      	b.n	9570 <_spi_interrupt_handler+0x1ec>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    950c:	697b      	ldr	r3, [r7, #20]
    950e:	0018      	movs	r0, r3
    9510:	4b3f      	ldr	r3, [pc, #252]	; (9610 <_spi_interrupt_handler+0x28c>)
    9512:	447b      	add	r3, pc
    9514:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    9516:	697b      	ldr	r3, [r7, #20]
    9518:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    951a:	b29b      	uxth	r3, r3
    951c:	2b00      	cmp	r3, #0
    951e:	d127      	bne.n	9570 <_spi_interrupt_handler+0x1ec>
					module->status = STATUS_OK;
    9520:	697b      	ldr	r3, [r7, #20]
    9522:	2238      	movs	r2, #56	; 0x38
    9524:	2100      	movs	r1, #0
    9526:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9528:	693b      	ldr	r3, [r7, #16]
    952a:	2204      	movs	r2, #4
    952c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    952e:	697b      	ldr	r3, [r7, #20]
    9530:	7a5b      	ldrb	r3, [r3, #9]
    9532:	b2db      	uxtb	r3, r3
    9534:	2b02      	cmp	r3, #2
    9536:	d10b      	bne.n	9550 <_spi_interrupt_handler+0x1cc>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    9538:	230f      	movs	r3, #15
    953a:	18fb      	adds	r3, r7, r3
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	2204      	movs	r2, #4
    9540:	4013      	ands	r3, r2
    9542:	d015      	beq.n	9570 <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    9544:	697b      	ldr	r3, [r7, #20]
    9546:	695b      	ldr	r3, [r3, #20]
    9548:	697a      	ldr	r2, [r7, #20]
    954a:	0010      	movs	r0, r2
    954c:	4798      	blx	r3
    954e:	e00f      	b.n	9570 <_spi_interrupt_handler+0x1ec>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    9550:	697b      	ldr	r3, [r7, #20]
    9552:	7a5b      	ldrb	r3, [r3, #9]
    9554:	b2db      	uxtb	r3, r3
    9556:	2b00      	cmp	r3, #0
    9558:	d10a      	bne.n	9570 <_spi_interrupt_handler+0x1ec>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    955a:	230f      	movs	r3, #15
    955c:	18fb      	adds	r3, r7, r3
    955e:	781b      	ldrb	r3, [r3, #0]
    9560:	2202      	movs	r2, #2
    9562:	4013      	ands	r3, r2
    9564:	d004      	beq.n	9570 <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    9566:	697b      	ldr	r3, [r7, #20]
    9568:	691b      	ldr	r3, [r3, #16]
    956a:	697a      	ldr	r2, [r7, #20]
    956c:	0010      	movs	r0, r2
    956e:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    9570:	230c      	movs	r3, #12
    9572:	18fb      	adds	r3, r7, r3
    9574:	881b      	ldrh	r3, [r3, #0]
    9576:	2202      	movs	r2, #2
    9578:	4013      	ands	r3, r2
    957a:	d024      	beq.n	95c6 <_spi_interrupt_handler+0x242>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    957c:	697b      	ldr	r3, [r7, #20]
    957e:	795b      	ldrb	r3, [r3, #5]
    9580:	2b01      	cmp	r3, #1
    9582:	d120      	bne.n	95c6 <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9584:	697b      	ldr	r3, [r7, #20]
    9586:	7a5b      	ldrb	r3, [r3, #9]
    9588:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    958a:	2b01      	cmp	r3, #1
    958c:	d11b      	bne.n	95c6 <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    958e:	697b      	ldr	r3, [r7, #20]
    9590:	79db      	ldrb	r3, [r3, #7]
    9592:	2201      	movs	r2, #1
    9594:	4053      	eors	r3, r2
    9596:	b2db      	uxtb	r3, r3
    9598:	2b00      	cmp	r3, #0
    959a:	d014      	beq.n	95c6 <_spi_interrupt_handler+0x242>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    959c:	693b      	ldr	r3, [r7, #16]
    959e:	2202      	movs	r2, #2
    95a0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    95a2:	697b      	ldr	r3, [r7, #20]
    95a4:	2203      	movs	r2, #3
    95a6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    95a8:	697b      	ldr	r3, [r7, #20]
    95aa:	2238      	movs	r2, #56	; 0x38
    95ac:	2100      	movs	r1, #0
    95ae:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    95b0:	230f      	movs	r3, #15
    95b2:	18fb      	adds	r3, r7, r3
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	2201      	movs	r2, #1
    95b8:	4013      	ands	r3, r2
    95ba:	d004      	beq.n	95c6 <_spi_interrupt_handler+0x242>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    95bc:	697b      	ldr	r3, [r7, #20]
    95be:	68db      	ldr	r3, [r3, #12]
    95c0:	697a      	ldr	r2, [r7, #20]
    95c2:	0010      	movs	r0, r2
    95c4:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    95c6:	230c      	movs	r3, #12
    95c8:	18fb      	adds	r3, r7, r3
    95ca:	881b      	ldrh	r3, [r3, #0]
    95cc:	2280      	movs	r2, #128	; 0x80
    95ce:	4013      	ands	r3, r2
    95d0:	d010      	beq.n	95f4 <_spi_interrupt_handler+0x270>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    95d2:	693b      	ldr	r3, [r7, #16]
    95d4:	2280      	movs	r2, #128	; 0x80
    95d6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    95d8:	693b      	ldr	r3, [r7, #16]
    95da:	2280      	movs	r2, #128	; 0x80
    95dc:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    95de:	230f      	movs	r3, #15
    95e0:	18fb      	adds	r3, r7, r3
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	2240      	movs	r2, #64	; 0x40
    95e6:	4013      	ands	r3, r2
    95e8:	d004      	beq.n	95f4 <_spi_interrupt_handler+0x270>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    95ea:	697b      	ldr	r3, [r7, #20]
    95ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    95ee:	697a      	ldr	r2, [r7, #20]
    95f0:	0010      	movs	r0, r2
    95f2:	4798      	blx	r3
		}
	}
#  endif
}
    95f4:	46c0      	nop			; (mov r8, r8)
    95f6:	46bd      	mov	sp, r7
    95f8:	b006      	add	sp, #24
    95fa:	bd80      	pop	{r7, pc}
    95fc:	00008ace 	.word	0x00008ace
    9600:	00000158 	.word	0x00000158
    9604:	fffffe9b 	.word	0xfffffe9b
    9608:	fffffdf3 	.word	0xfffffdf3
    960c:	fffffe07 	.word	0xfffffe07
    9610:	fffffdfd 	.word	0xfffffdfd

00009614 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    9614:	b580      	push	{r7, lr}
    9616:	b082      	sub	sp, #8
    9618:	af00      	add	r7, sp, #0
    961a:	0002      	movs	r2, r0
    961c:	1dfb      	adds	r3, r7, #7
    961e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    9620:	46c0      	nop			; (mov r8, r8)
    9622:	46bd      	mov	sp, r7
    9624:	b002      	add	sp, #8
    9626:	bd80      	pop	{r7, pc}

00009628 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    9628:	b580      	push	{r7, lr}
    962a:	b084      	sub	sp, #16
    962c:	af00      	add	r7, sp, #0
    962e:	0002      	movs	r2, r0
    9630:	6039      	str	r1, [r7, #0]
    9632:	1dfb      	adds	r3, r7, #7
    9634:	701a      	strb	r2, [r3, #0]
    9636:	4a17      	ldr	r2, [pc, #92]	; (9694 <_sercom_set_handler+0x6c>)
    9638:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    963a:	4b17      	ldr	r3, [pc, #92]	; (9698 <_sercom_set_handler+0x70>)
    963c:	447b      	add	r3, pc
    963e:	781b      	ldrb	r3, [r3, #0]
    9640:	2101      	movs	r1, #1
    9642:	404b      	eors	r3, r1
    9644:	b2db      	uxtb	r3, r3
    9646:	2b00      	cmp	r3, #0
    9648:	d019      	beq.n	967e <_sercom_set_handler+0x56>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    964a:	2300      	movs	r3, #0
    964c:	60fb      	str	r3, [r7, #12]
    964e:	e00f      	b.n	9670 <_sercom_set_handler+0x48>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    9650:	4b12      	ldr	r3, [pc, #72]	; (969c <_sercom_set_handler+0x74>)
    9652:	447b      	add	r3, pc
    9654:	68f9      	ldr	r1, [r7, #12]
    9656:	0089      	lsls	r1, r1, #2
    9658:	4811      	ldr	r0, [pc, #68]	; (96a0 <_sercom_set_handler+0x78>)
    965a:	4478      	add	r0, pc
    965c:	50c8      	str	r0, [r1, r3]
			_sercom_instances[i] = NULL;
    965e:	4b11      	ldr	r3, [pc, #68]	; (96a4 <_sercom_set_handler+0x7c>)
    9660:	58d3      	ldr	r3, [r2, r3]
    9662:	68f9      	ldr	r1, [r7, #12]
    9664:	0089      	lsls	r1, r1, #2
    9666:	2000      	movs	r0, #0
    9668:	50c8      	str	r0, [r1, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    966a:	68fb      	ldr	r3, [r7, #12]
    966c:	3301      	adds	r3, #1
    966e:	60fb      	str	r3, [r7, #12]
    9670:	68fb      	ldr	r3, [r7, #12]
    9672:	2b05      	cmp	r3, #5
    9674:	d9ec      	bls.n	9650 <_sercom_set_handler+0x28>
		}

		_handler_table_initialized = true;
    9676:	4b0c      	ldr	r3, [pc, #48]	; (96a8 <_sercom_set_handler+0x80>)
    9678:	447b      	add	r3, pc
    967a:	2201      	movs	r2, #1
    967c:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    967e:	1dfb      	adds	r3, r7, #7
    9680:	781a      	ldrb	r2, [r3, #0]
    9682:	4b0a      	ldr	r3, [pc, #40]	; (96ac <_sercom_set_handler+0x84>)
    9684:	447b      	add	r3, pc
    9686:	0092      	lsls	r2, r2, #2
    9688:	6839      	ldr	r1, [r7, #0]
    968a:	50d1      	str	r1, [r2, r3]
}
    968c:	46c0      	nop			; (mov r8, r8)
    968e:	46bd      	mov	sp, r7
    9690:	b004      	add	sp, #16
    9692:	bd80      	pop	{r7, pc}
    9694:	00008828 	.word	0x00008828
    9698:	1fff6ef2 	.word	0x1fff6ef2
    969c:	1fff6ede 	.word	0x1fff6ede
    96a0:	ffffffb7 	.word	0xffffffb7
    96a4:	00000158 	.word	0x00000158
    96a8:	1fff6eb6 	.word	0x1fff6eb6
    96ac:	1fff6eac 	.word	0x1fff6eac

000096b0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    96b0:	b5b0      	push	{r4, r5, r7, lr}
    96b2:	b084      	sub	sp, #16
    96b4:	af00      	add	r7, sp, #0
    96b6:	6078      	str	r0, [r7, #4]
    96b8:	4c10      	ldr	r4, [pc, #64]	; (96fc <_sercom_get_interrupt_vector+0x4c>)
    96ba:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    96bc:	2308      	movs	r3, #8
    96be:	18fa      	adds	r2, r7, r3
    96c0:	4b0f      	ldr	r3, [pc, #60]	; (9700 <_sercom_get_interrupt_vector+0x50>)
    96c2:	447b      	add	r3, pc
    96c4:	0010      	movs	r0, r2
    96c6:	0019      	movs	r1, r3
    96c8:	2306      	movs	r3, #6
    96ca:	001a      	movs	r2, r3
    96cc:	4b0d      	ldr	r3, [pc, #52]	; (9704 <_sercom_get_interrupt_vector+0x54>)
    96ce:	58e3      	ldr	r3, [r4, r3]
    96d0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    96d2:	230f      	movs	r3, #15
    96d4:	18fd      	adds	r5, r7, r3
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	0018      	movs	r0, r3
    96da:	4b0b      	ldr	r3, [pc, #44]	; (9708 <_sercom_get_interrupt_vector+0x58>)
    96dc:	58e3      	ldr	r3, [r4, r3]
    96de:	4798      	blx	r3
    96e0:	0003      	movs	r3, r0
    96e2:	702b      	strb	r3, [r5, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    96e4:	230f      	movs	r3, #15
    96e6:	18fb      	adds	r3, r7, r3
    96e8:	781b      	ldrb	r3, [r3, #0]
    96ea:	2208      	movs	r2, #8
    96ec:	18ba      	adds	r2, r7, r2
    96ee:	5cd3      	ldrb	r3, [r2, r3]
    96f0:	b25b      	sxtb	r3, r3
}
    96f2:	0018      	movs	r0, r3
    96f4:	46bd      	mov	sp, r7
    96f6:	b004      	add	sp, #16
    96f8:	bdb0      	pop	{r4, r5, r7, pc}
    96fa:	46c0      	nop			; (mov r8, r8)
    96fc:	000087a6 	.word	0x000087a6
    9700:	000086ae 	.word	0x000086ae
    9704:	0000008c 	.word	0x0000008c
    9708:	000002b4 	.word	0x000002b4

0000970c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    970c:	b580      	push	{r7, lr}
    970e:	af00      	add	r7, sp, #0
    9710:	4b03      	ldr	r3, [pc, #12]	; (9720 <SERCOM0_Handler+0x14>)
    9712:	447b      	add	r3, pc
    9714:	681b      	ldr	r3, [r3, #0]
    9716:	2000      	movs	r0, #0
    9718:	4798      	blx	r3
    971a:	46c0      	nop			; (mov r8, r8)
    971c:	46bd      	mov	sp, r7
    971e:	bd80      	pop	{r7, pc}
    9720:	1fff6e1e 	.word	0x1fff6e1e

00009724 <SERCOM1_Handler>:
    9724:	b580      	push	{r7, lr}
    9726:	af00      	add	r7, sp, #0
    9728:	4b03      	ldr	r3, [pc, #12]	; (9738 <SERCOM1_Handler+0x14>)
    972a:	447b      	add	r3, pc
    972c:	685b      	ldr	r3, [r3, #4]
    972e:	2001      	movs	r0, #1
    9730:	4798      	blx	r3
    9732:	46c0      	nop			; (mov r8, r8)
    9734:	46bd      	mov	sp, r7
    9736:	bd80      	pop	{r7, pc}
    9738:	1fff6e06 	.word	0x1fff6e06

0000973c <SERCOM2_Handler>:
    973c:	b580      	push	{r7, lr}
    973e:	af00      	add	r7, sp, #0
    9740:	4b03      	ldr	r3, [pc, #12]	; (9750 <SERCOM2_Handler+0x14>)
    9742:	447b      	add	r3, pc
    9744:	689b      	ldr	r3, [r3, #8]
    9746:	2002      	movs	r0, #2
    9748:	4798      	blx	r3
    974a:	46c0      	nop			; (mov r8, r8)
    974c:	46bd      	mov	sp, r7
    974e:	bd80      	pop	{r7, pc}
    9750:	1fff6dee 	.word	0x1fff6dee

00009754 <SERCOM3_Handler>:
    9754:	b580      	push	{r7, lr}
    9756:	af00      	add	r7, sp, #0
    9758:	4b03      	ldr	r3, [pc, #12]	; (9768 <SERCOM3_Handler+0x14>)
    975a:	447b      	add	r3, pc
    975c:	68db      	ldr	r3, [r3, #12]
    975e:	2003      	movs	r0, #3
    9760:	4798      	blx	r3
    9762:	46c0      	nop			; (mov r8, r8)
    9764:	46bd      	mov	sp, r7
    9766:	bd80      	pop	{r7, pc}
    9768:	1fff6dd6 	.word	0x1fff6dd6

0000976c <SERCOM4_Handler>:
    976c:	b580      	push	{r7, lr}
    976e:	af00      	add	r7, sp, #0
    9770:	4b03      	ldr	r3, [pc, #12]	; (9780 <SERCOM4_Handler+0x14>)
    9772:	447b      	add	r3, pc
    9774:	691b      	ldr	r3, [r3, #16]
    9776:	2004      	movs	r0, #4
    9778:	4798      	blx	r3
    977a:	46c0      	nop			; (mov r8, r8)
    977c:	46bd      	mov	sp, r7
    977e:	bd80      	pop	{r7, pc}
    9780:	1fff6dbe 	.word	0x1fff6dbe

00009784 <SERCOM5_Handler>:
    9784:	b580      	push	{r7, lr}
    9786:	af00      	add	r7, sp, #0
    9788:	4b03      	ldr	r3, [pc, #12]	; (9798 <SERCOM5_Handler+0x14>)
    978a:	447b      	add	r3, pc
    978c:	695b      	ldr	r3, [r3, #20]
    978e:	2005      	movs	r0, #5
    9790:	4798      	blx	r3
    9792:	46c0      	nop			; (mov r8, r8)
    9794:	46bd      	mov	sp, r7
    9796:	bd80      	pop	{r7, pc}
    9798:	1fff6da6 	.word	0x1fff6da6

0000979c <_extint_get_eic_from_channel>:
{
    979c:	b580      	push	{r7, lr}
    979e:	b084      	sub	sp, #16
    97a0:	af00      	add	r7, sp, #0
    97a2:	0002      	movs	r2, r0
    97a4:	1dfb      	adds	r3, r7, #7
    97a6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    97a8:	230f      	movs	r3, #15
    97aa:	18fb      	adds	r3, r7, r3
    97ac:	1dfa      	adds	r2, r7, #7
    97ae:	7812      	ldrb	r2, [r2, #0]
    97b0:	0952      	lsrs	r2, r2, #5
    97b2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    97b4:	230f      	movs	r3, #15
    97b6:	18fb      	adds	r3, r7, r3
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	2b00      	cmp	r3, #0
    97bc:	d10c      	bne.n	97d8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    97be:	4b09      	ldr	r3, [pc, #36]	; (97e4 <_extint_get_eic_from_channel+0x48>)
    97c0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    97c2:	230f      	movs	r3, #15
    97c4:	18fb      	adds	r3, r7, r3
    97c6:	781b      	ldrb	r3, [r3, #0]
    97c8:	009b      	lsls	r3, r3, #2
    97ca:	2210      	movs	r2, #16
    97cc:	4694      	mov	ip, r2
    97ce:	44bc      	add	ip, r7
    97d0:	4463      	add	r3, ip
    97d2:	3b08      	subs	r3, #8
    97d4:	681b      	ldr	r3, [r3, #0]
    97d6:	e000      	b.n	97da <_extint_get_eic_from_channel+0x3e>
		return NULL;
    97d8:	2300      	movs	r3, #0
}
    97da:	0018      	movs	r0, r3
    97dc:	46bd      	mov	sp, r7
    97de:	b004      	add	sp, #16
    97e0:	bd80      	pop	{r7, pc}
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	40001800 	.word	0x40001800

000097e8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b084      	sub	sp, #16
    97ec:	af00      	add	r7, sp, #0
    97ee:	0002      	movs	r2, r0
    97f0:	1dfb      	adds	r3, r7, #7
    97f2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    97f4:	1dfb      	adds	r3, r7, #7
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	0018      	movs	r0, r3
    97fa:	4b0c      	ldr	r3, [pc, #48]	; (982c <extint_chan_is_detected+0x44>)
    97fc:	447b      	add	r3, pc
    97fe:	4798      	blx	r3
    9800:	0003      	movs	r3, r0
    9802:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    9804:	1dfb      	adds	r3, r7, #7
    9806:	781b      	ldrb	r3, [r3, #0]
    9808:	221f      	movs	r2, #31
    980a:	4013      	ands	r3, r2
    980c:	2201      	movs	r2, #1
    980e:	409a      	lsls	r2, r3
    9810:	0013      	movs	r3, r2
    9812:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    9814:	68fb      	ldr	r3, [r7, #12]
    9816:	691b      	ldr	r3, [r3, #16]
    9818:	68ba      	ldr	r2, [r7, #8]
    981a:	4013      	ands	r3, r2
    981c:	1e5a      	subs	r2, r3, #1
    981e:	4193      	sbcs	r3, r2
    9820:	b2db      	uxtb	r3, r3
}
    9822:	0018      	movs	r0, r3
    9824:	46bd      	mov	sp, r7
    9826:	b004      	add	sp, #16
    9828:	bd80      	pop	{r7, pc}
    982a:	46c0      	nop			; (mov r8, r8)
    982c:	ffffff9d 	.word	0xffffff9d

00009830 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    9830:	b580      	push	{r7, lr}
    9832:	b084      	sub	sp, #16
    9834:	af00      	add	r7, sp, #0
    9836:	0002      	movs	r2, r0
    9838:	1dfb      	adds	r3, r7, #7
    983a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    983c:	1dfb      	adds	r3, r7, #7
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	0018      	movs	r0, r3
    9842:	4b0a      	ldr	r3, [pc, #40]	; (986c <extint_chan_clear_detected+0x3c>)
    9844:	447b      	add	r3, pc
    9846:	4798      	blx	r3
    9848:	0003      	movs	r3, r0
    984a:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    984c:	1dfb      	adds	r3, r7, #7
    984e:	781b      	ldrb	r3, [r3, #0]
    9850:	221f      	movs	r2, #31
    9852:	4013      	ands	r3, r2
    9854:	2201      	movs	r2, #1
    9856:	409a      	lsls	r2, r3
    9858:	0013      	movs	r3, r2
    985a:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    985c:	68fb      	ldr	r3, [r7, #12]
    985e:	68ba      	ldr	r2, [r7, #8]
    9860:	611a      	str	r2, [r3, #16]
}
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	46bd      	mov	sp, r7
    9866:	b004      	add	sp, #16
    9868:	bd80      	pop	{r7, pc}
    986a:	46c0      	nop			; (mov r8, r8)
    986c:	ffffff55 	.word	0xffffff55

00009870 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    9870:	b580      	push	{r7, lr}
    9872:	b084      	sub	sp, #16
    9874:	af00      	add	r7, sp, #0
    9876:	0002      	movs	r2, r0
    9878:	1dfb      	adds	r3, r7, #7
    987a:	701a      	strb	r2, [r3, #0]
    987c:	1dbb      	adds	r3, r7, #6
    987e:	1c0a      	adds	r2, r1, #0
    9880:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9882:	1dbb      	adds	r3, r7, #6
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	2b00      	cmp	r3, #0
    9888:	d10f      	bne.n	98aa <extint_chan_enable_callback+0x3a>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    988a:	1dfb      	adds	r3, r7, #7
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	0018      	movs	r0, r3
    9890:	4b08      	ldr	r3, [pc, #32]	; (98b4 <extint_chan_enable_callback+0x44>)
    9892:	447b      	add	r3, pc
    9894:	4798      	blx	r3
    9896:	0003      	movs	r3, r0
    9898:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    989a:	1dfb      	adds	r3, r7, #7
    989c:	781b      	ldrb	r3, [r3, #0]
    989e:	2201      	movs	r2, #1
    98a0:	409a      	lsls	r2, r3
    98a2:	68fb      	ldr	r3, [r7, #12]
    98a4:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    98a6:	2300      	movs	r3, #0
    98a8:	e000      	b.n	98ac <extint_chan_enable_callback+0x3c>
		return STATUS_ERR_INVALID_ARG;
    98aa:	2317      	movs	r3, #23
}
    98ac:	0018      	movs	r0, r3
    98ae:	46bd      	mov	sp, r7
    98b0:	b004      	add	sp, #16
    98b2:	bd80      	pop	{r7, pc}
    98b4:	ffffff07 	.word	0xffffff07

000098b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    98b8:	b5b0      	push	{r4, r5, r7, lr}
    98ba:	af00      	add	r7, sp, #0
    98bc:	4c1c      	ldr	r4, [pc, #112]	; (9930 <EIC_Handler+0x78>)
    98be:	447c      	add	r4, pc
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    98c0:	4b1c      	ldr	r3, [pc, #112]	; (9934 <EIC_Handler+0x7c>)
    98c2:	58e3      	ldr	r3, [r4, r3]
    98c4:	2200      	movs	r2, #0
    98c6:	701a      	strb	r2, [r3, #0]
    98c8:	e02a      	b.n	9920 <EIC_Handler+0x68>
		if (extint_chan_is_detected(_current_channel)) {
    98ca:	4b1a      	ldr	r3, [pc, #104]	; (9934 <EIC_Handler+0x7c>)
    98cc:	58e3      	ldr	r3, [r4, r3]
    98ce:	781b      	ldrb	r3, [r3, #0]
    98d0:	0018      	movs	r0, r3
    98d2:	4b19      	ldr	r3, [pc, #100]	; (9938 <EIC_Handler+0x80>)
    98d4:	447b      	add	r3, pc
    98d6:	4798      	blx	r3
    98d8:	1e03      	subs	r3, r0, #0
    98da:	d019      	beq.n	9910 <EIC_Handler+0x58>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    98dc:	4b15      	ldr	r3, [pc, #84]	; (9934 <EIC_Handler+0x7c>)
    98de:	58e3      	ldr	r3, [r4, r3]
    98e0:	781b      	ldrb	r3, [r3, #0]
    98e2:	0018      	movs	r0, r3
    98e4:	4b15      	ldr	r3, [pc, #84]	; (993c <EIC_Handler+0x84>)
    98e6:	447b      	add	r3, pc
    98e8:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    98ea:	4b12      	ldr	r3, [pc, #72]	; (9934 <EIC_Handler+0x7c>)
    98ec:	58e3      	ldr	r3, [r4, r3]
    98ee:	781b      	ldrb	r3, [r3, #0]
    98f0:	001a      	movs	r2, r3
    98f2:	4b13      	ldr	r3, [pc, #76]	; (9940 <EIC_Handler+0x88>)
    98f4:	58e3      	ldr	r3, [r4, r3]
    98f6:	0092      	lsls	r2, r2, #2
    98f8:	58d3      	ldr	r3, [r2, r3]
    98fa:	2b00      	cmp	r3, #0
    98fc:	d008      	beq.n	9910 <EIC_Handler+0x58>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    98fe:	4b0d      	ldr	r3, [pc, #52]	; (9934 <EIC_Handler+0x7c>)
    9900:	58e3      	ldr	r3, [r4, r3]
    9902:	781b      	ldrb	r3, [r3, #0]
    9904:	001a      	movs	r2, r3
    9906:	4b0e      	ldr	r3, [pc, #56]	; (9940 <EIC_Handler+0x88>)
    9908:	58e3      	ldr	r3, [r4, r3]
    990a:	0092      	lsls	r2, r2, #2
    990c:	58d3      	ldr	r3, [r2, r3]
    990e:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9910:	4b08      	ldr	r3, [pc, #32]	; (9934 <EIC_Handler+0x7c>)
    9912:	58e3      	ldr	r3, [r4, r3]
    9914:	781b      	ldrb	r3, [r3, #0]
    9916:	3301      	adds	r3, #1
    9918:	b2da      	uxtb	r2, r3
    991a:	4b06      	ldr	r3, [pc, #24]	; (9934 <EIC_Handler+0x7c>)
    991c:	58e3      	ldr	r3, [r4, r3]
    991e:	701a      	strb	r2, [r3, #0]
    9920:	4b04      	ldr	r3, [pc, #16]	; (9934 <EIC_Handler+0x7c>)
    9922:	58e3      	ldr	r3, [r4, r3]
    9924:	781b      	ldrb	r3, [r3, #0]
    9926:	2b0f      	cmp	r3, #15
    9928:	d9cf      	bls.n	98ca <EIC_Handler+0x12>
			}
		}
	}
}
    992a:	46c0      	nop			; (mov r8, r8)
    992c:	46bd      	mov	sp, r7
    992e:	bdb0      	pop	{r4, r5, r7, pc}
    9930:	000085a2 	.word	0x000085a2
    9934:	000001f4 	.word	0x000001f4
    9938:	ffffff11 	.word	0xffffff11
    993c:	ffffff47 	.word	0xffffff47
    9940:	00000180 	.word	0x00000180

00009944 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    9944:	b580      	push	{r7, lr}
    9946:	b084      	sub	sp, #16
    9948:	af00      	add	r7, sp, #0
    994a:	0002      	movs	r2, r0
    994c:	6039      	str	r1, [r7, #0]
    994e:	1dfb      	adds	r3, r7, #7
    9950:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    9952:	2300      	movs	r3, #0
    9954:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    9956:	4b2b      	ldr	r3, [pc, #172]	; (9a04 <bod_set_config+0xc0>)
    9958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    995a:	2202      	movs	r2, #2
    995c:	4013      	ands	r3, r2
    995e:	d005      	beq.n	996c <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    9960:	4b28      	ldr	r3, [pc, #160]	; (9a04 <bod_set_config+0xc0>)
    9962:	4a28      	ldr	r2, [pc, #160]	; (9a04 <bod_set_config+0xc0>)
    9964:	6b52      	ldr	r2, [r2, #52]	; 0x34
    9966:	2102      	movs	r1, #2
    9968:	438a      	bics	r2, r1
    996a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    996c:	683b      	ldr	r3, [r7, #0]
    996e:	881b      	ldrh	r3, [r3, #0]
    9970:	001a      	movs	r2, r3
    9972:	683b      	ldr	r3, [r7, #0]
    9974:	791b      	ldrb	r3, [r3, #4]
    9976:	4313      	orrs	r3, r2
			(uint32_t)conf->mode;
    9978:	683a      	ldr	r2, [r7, #0]
    997a:	8852      	ldrh	r2, [r2, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    997c:	4313      	orrs	r3, r2
    997e:	68fa      	ldr	r2, [r7, #12]
    9980:	4313      	orrs	r3, r2
    9982:	60fb      	str	r3, [r7, #12]

	if (conf->mode == BOD_MODE_SAMPLED) {
    9984:	683b      	ldr	r3, [r7, #0]
    9986:	885a      	ldrh	r2, [r3, #2]
    9988:	2380      	movs	r3, #128	; 0x80
    998a:	005b      	lsls	r3, r3, #1
    998c:	429a      	cmp	r2, r3
    998e:	d104      	bne.n	999a <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    9990:	68fb      	ldr	r3, [r7, #12]
    9992:	2280      	movs	r2, #128	; 0x80
    9994:	0092      	lsls	r2, r2, #2
    9996:	4313      	orrs	r3, r2
    9998:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    999a:	683b      	ldr	r3, [r7, #0]
    999c:	799b      	ldrb	r3, [r3, #6]
    999e:	2b00      	cmp	r3, #0
    99a0:	d003      	beq.n	99aa <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    99a2:	68fb      	ldr	r3, [r7, #12]
    99a4:	2204      	movs	r2, #4
    99a6:	4313      	orrs	r3, r2
    99a8:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    99aa:	683b      	ldr	r3, [r7, #0]
    99ac:	79db      	ldrb	r3, [r3, #7]
    99ae:	2b00      	cmp	r3, #0
    99b0:	d003      	beq.n	99ba <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    99b2:	68fb      	ldr	r3, [r7, #12]
    99b4:	2240      	movs	r2, #64	; 0x40
    99b6:	4313      	orrs	r3, r2
    99b8:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    99ba:	1dfb      	adds	r3, r7, #7
    99bc:	781b      	ldrb	r3, [r3, #0]
    99be:	2b00      	cmp	r3, #0
    99c0:	d118      	bne.n	99f4 <bod_set_config+0xb0>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    99c2:	683b      	ldr	r3, [r7, #0]
    99c4:	795b      	ldrb	r3, [r3, #5]
    99c6:	2b3f      	cmp	r3, #63	; 0x3f
    99c8:	d901      	bls.n	99ce <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    99ca:	2317      	movs	r3, #23
    99cc:	e015      	b.n	99fa <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    99ce:	4b0d      	ldr	r3, [pc, #52]	; (9a04 <bod_set_config+0xc0>)
    99d0:	683a      	ldr	r2, [r7, #0]
    99d2:	7952      	ldrb	r2, [r2, #5]
    99d4:	0412      	lsls	r2, r2, #16
    99d6:	0011      	movs	r1, r2
    99d8:	22fc      	movs	r2, #252	; 0xfc
    99da:	0392      	lsls	r2, r2, #14
    99dc:	4011      	ands	r1, r2
    99de:	68fa      	ldr	r2, [r7, #12]
    99e0:	430a      	orrs	r2, r1
    99e2:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    99e4:	46c0      	nop			; (mov r8, r8)
    99e6:	4b07      	ldr	r3, [pc, #28]	; (9a04 <bod_set_config+0xc0>)
    99e8:	68da      	ldr	r2, [r3, #12]
    99ea:	2380      	movs	r3, #128	; 0x80
    99ec:	011b      	lsls	r3, r3, #4
    99ee:	4013      	ands	r3, r2
    99f0:	d0f9      	beq.n	99e6 <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    99f2:	e001      	b.n	99f8 <bod_set_config+0xb4>
		default:
			return STATUS_ERR_INVALID_ARG;
    99f4:	2317      	movs	r3, #23
    99f6:	e000      	b.n	99fa <bod_set_config+0xb6>
	}

	return STATUS_OK;
    99f8:	2300      	movs	r3, #0
}
    99fa:	0018      	movs	r0, r3
    99fc:	46bd      	mov	sp, r7
    99fe:	b004      	add	sp, #16
    9a00:	bd80      	pop	{r7, pc}
    9a02:	46c0      	nop			; (mov r8, r8)
    9a04:	40000800 	.word	0x40000800

00009a08 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	b082      	sub	sp, #8
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    9a10:	687b      	ldr	r3, [r7, #4]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d00c      	beq.n	9a30 <delay_cycles+0x28>
		SysTick->LOAD = n;
    9a16:	4b08      	ldr	r3, [pc, #32]	; (9a38 <delay_cycles+0x30>)
    9a18:	687a      	ldr	r2, [r7, #4]
    9a1a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    9a1c:	4b06      	ldr	r3, [pc, #24]	; (9a38 <delay_cycles+0x30>)
    9a1e:	2200      	movs	r2, #0
    9a20:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	4b04      	ldr	r3, [pc, #16]	; (9a38 <delay_cycles+0x30>)
    9a26:	681a      	ldr	r2, [r3, #0]
    9a28:	2380      	movs	r3, #128	; 0x80
    9a2a:	025b      	lsls	r3, r3, #9
    9a2c:	4013      	ands	r3, r2
    9a2e:	d0f9      	beq.n	9a24 <delay_cycles+0x1c>
		};
	}
}
    9a30:	46c0      	nop			; (mov r8, r8)
    9a32:	46bd      	mov	sp, r7
    9a34:	b002      	add	sp, #8
    9a36:	bd80      	pop	{r7, pc}
    9a38:	e000e010 	.word	0xe000e010

00009a3c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9a3c:	b5b0      	push	{r4, r5, r7, lr}
    9a3e:	af00      	add	r7, sp, #0
    9a40:	4c15      	ldr	r4, [pc, #84]	; (9a98 <delay_init+0x5c>)
    9a42:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9a44:	2000      	movs	r0, #0
    9a46:	4b15      	ldr	r3, [pc, #84]	; (9a9c <delay_init+0x60>)
    9a48:	58e3      	ldr	r3, [r4, r3]
    9a4a:	4798      	blx	r3
    9a4c:	0002      	movs	r2, r0
    9a4e:	4b14      	ldr	r3, [pc, #80]	; (9aa0 <delay_init+0x64>)
    9a50:	447b      	add	r3, pc
    9a52:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    9a54:	4b13      	ldr	r3, [pc, #76]	; (9aa4 <delay_init+0x68>)
    9a56:	447b      	add	r3, pc
    9a58:	6818      	ldr	r0, [r3, #0]
    9a5a:	4b13      	ldr	r3, [pc, #76]	; (9aa8 <delay_init+0x6c>)
    9a5c:	58e3      	ldr	r3, [r4, r3]
    9a5e:	001a      	movs	r2, r3
    9a60:	23fa      	movs	r3, #250	; 0xfa
    9a62:	0099      	lsls	r1, r3, #2
    9a64:	4790      	blx	r2
    9a66:	0003      	movs	r3, r0
    9a68:	001a      	movs	r2, r3
    9a6a:	4b10      	ldr	r3, [pc, #64]	; (9aac <delay_init+0x70>)
    9a6c:	447b      	add	r3, pc
    9a6e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    9a70:	4b0f      	ldr	r3, [pc, #60]	; (9ab0 <delay_init+0x74>)
    9a72:	447b      	add	r3, pc
    9a74:	6818      	ldr	r0, [r3, #0]
    9a76:	4b0c      	ldr	r3, [pc, #48]	; (9aa8 <delay_init+0x6c>)
    9a78:	58e3      	ldr	r3, [r4, r3]
    9a7a:	001a      	movs	r2, r3
    9a7c:	23fa      	movs	r3, #250	; 0xfa
    9a7e:	0099      	lsls	r1, r3, #2
    9a80:	4790      	blx	r2
    9a82:	0003      	movs	r3, r0
    9a84:	001a      	movs	r2, r3
    9a86:	4b0b      	ldr	r3, [pc, #44]	; (9ab4 <delay_init+0x78>)
    9a88:	447b      	add	r3, pc
    9a8a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9a8c:	4b0a      	ldr	r3, [pc, #40]	; (9ab8 <delay_init+0x7c>)
    9a8e:	2205      	movs	r2, #5
    9a90:	601a      	str	r2, [r3, #0]
}
    9a92:	46c0      	nop			; (mov r8, r8)
    9a94:	46bd      	mov	sp, r7
    9a96:	bdb0      	pop	{r4, r5, r7, pc}
    9a98:	0000841e 	.word	0x0000841e
    9a9c:	000000e0 	.word	0x000000e0
    9aa0:	1fff669c 	.word	0x1fff669c
    9aa4:	1fff6696 	.word	0x1fff6696
    9aa8:	0000020c 	.word	0x0000020c
    9aac:	1fff6680 	.word	0x1fff6680
    9ab0:	1fff667a 	.word	0x1fff667a
    9ab4:	1fff6668 	.word	0x1fff6668
    9ab8:	e000e010 	.word	0xe000e010

00009abc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    9abc:	b580      	push	{r7, lr}
    9abe:	b082      	sub	sp, #8
    9ac0:	af00      	add	r7, sp, #0
    9ac2:	6078      	str	r0, [r7, #4]
	while (n--) {
    9ac4:	e006      	b.n	9ad4 <delay_cycles_us+0x18>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    9ac6:	4b08      	ldr	r3, [pc, #32]	; (9ae8 <delay_cycles_us+0x2c>)
    9ac8:	447b      	add	r3, pc
    9aca:	681b      	ldr	r3, [r3, #0]
    9acc:	0018      	movs	r0, r3
    9ace:	4b07      	ldr	r3, [pc, #28]	; (9aec <delay_cycles_us+0x30>)
    9ad0:	447b      	add	r3, pc
    9ad2:	4798      	blx	r3
	while (n--) {
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	1e5a      	subs	r2, r3, #1
    9ad8:	607a      	str	r2, [r7, #4]
    9ada:	2b00      	cmp	r3, #0
    9adc:	d1f3      	bne.n	9ac6 <delay_cycles_us+0xa>
	}
}
    9ade:	46c0      	nop			; (mov r8, r8)
    9ae0:	46bd      	mov	sp, r7
    9ae2:	b002      	add	sp, #8
    9ae4:	bd80      	pop	{r7, pc}
    9ae6:	46c0      	nop			; (mov r8, r8)
    9ae8:	1fff6628 	.word	0x1fff6628
    9aec:	ffffff35 	.word	0xffffff35

00009af0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    9af0:	b580      	push	{r7, lr}
    9af2:	b082      	sub	sp, #8
    9af4:	af00      	add	r7, sp, #0
    9af6:	6078      	str	r0, [r7, #4]
	while (n--) {
    9af8:	e006      	b.n	9b08 <delay_cycles_ms+0x18>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    9afa:	4b08      	ldr	r3, [pc, #32]	; (9b1c <delay_cycles_ms+0x2c>)
    9afc:	447b      	add	r3, pc
    9afe:	681b      	ldr	r3, [r3, #0]
    9b00:	0018      	movs	r0, r3
    9b02:	4b07      	ldr	r3, [pc, #28]	; (9b20 <delay_cycles_ms+0x30>)
    9b04:	447b      	add	r3, pc
    9b06:	4798      	blx	r3
	while (n--) {
    9b08:	687b      	ldr	r3, [r7, #4]
    9b0a:	1e5a      	subs	r2, r3, #1
    9b0c:	607a      	str	r2, [r7, #4]
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d1f3      	bne.n	9afa <delay_cycles_ms+0xa>
	}
}
    9b12:	46c0      	nop			; (mov r8, r8)
    9b14:	46bd      	mov	sp, r7
    9b16:	b002      	add	sp, #8
    9b18:	bd80      	pop	{r7, pc}
    9b1a:	46c0      	nop			; (mov r8, r8)
    9b1c:	1fff65f0 	.word	0x1fff65f0
    9b20:	ffffff01 	.word	0xffffff01

00009b24 <system_pinmux_get_group_from_gpio_pin>:
{
    9b24:	b580      	push	{r7, lr}
    9b26:	b084      	sub	sp, #16
    9b28:	af00      	add	r7, sp, #0
    9b2a:	0002      	movs	r2, r0
    9b2c:	1dfb      	adds	r3, r7, #7
    9b2e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9b30:	230f      	movs	r3, #15
    9b32:	18fb      	adds	r3, r7, r3
    9b34:	1dfa      	adds	r2, r7, #7
    9b36:	7812      	ldrb	r2, [r2, #0]
    9b38:	09d2      	lsrs	r2, r2, #7
    9b3a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9b3c:	230e      	movs	r3, #14
    9b3e:	18fb      	adds	r3, r7, r3
    9b40:	1dfa      	adds	r2, r7, #7
    9b42:	7812      	ldrb	r2, [r2, #0]
    9b44:	0952      	lsrs	r2, r2, #5
    9b46:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9b48:	4b0d      	ldr	r3, [pc, #52]	; (9b80 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9b4a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9b4c:	230f      	movs	r3, #15
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	781b      	ldrb	r3, [r3, #0]
    9b52:	2b00      	cmp	r3, #0
    9b54:	d10f      	bne.n	9b76 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9b56:	230f      	movs	r3, #15
    9b58:	18fb      	adds	r3, r7, r3
    9b5a:	781b      	ldrb	r3, [r3, #0]
    9b5c:	009b      	lsls	r3, r3, #2
    9b5e:	2210      	movs	r2, #16
    9b60:	4694      	mov	ip, r2
    9b62:	44bc      	add	ip, r7
    9b64:	4463      	add	r3, ip
    9b66:	3b08      	subs	r3, #8
    9b68:	681a      	ldr	r2, [r3, #0]
    9b6a:	230e      	movs	r3, #14
    9b6c:	18fb      	adds	r3, r7, r3
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	01db      	lsls	r3, r3, #7
    9b72:	18d3      	adds	r3, r2, r3
    9b74:	e000      	b.n	9b78 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9b76:	2300      	movs	r3, #0
}
    9b78:	0018      	movs	r0, r3
    9b7a:	46bd      	mov	sp, r7
    9b7c:	b004      	add	sp, #16
    9b7e:	bd80      	pop	{r7, pc}
    9b80:	41004400 	.word	0x41004400

00009b84 <port_get_group_from_gpio_pin>:
{
    9b84:	b580      	push	{r7, lr}
    9b86:	b082      	sub	sp, #8
    9b88:	af00      	add	r7, sp, #0
    9b8a:	0002      	movs	r2, r0
    9b8c:	1dfb      	adds	r3, r7, #7
    9b8e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9b90:	1dfb      	adds	r3, r7, #7
    9b92:	781b      	ldrb	r3, [r3, #0]
    9b94:	0018      	movs	r0, r3
    9b96:	4b04      	ldr	r3, [pc, #16]	; (9ba8 <port_get_group_from_gpio_pin+0x24>)
    9b98:	447b      	add	r3, pc
    9b9a:	4798      	blx	r3
    9b9c:	0003      	movs	r3, r0
}
    9b9e:	0018      	movs	r0, r3
    9ba0:	46bd      	mov	sp, r7
    9ba2:	b002      	add	sp, #8
    9ba4:	bd80      	pop	{r7, pc}
    9ba6:	46c0      	nop			; (mov r8, r8)
    9ba8:	ffffff89 	.word	0xffffff89

00009bac <port_get_config_defaults>:
{
    9bac:	b580      	push	{r7, lr}
    9bae:	b082      	sub	sp, #8
    9bb0:	af00      	add	r7, sp, #0
    9bb2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    9bb4:	687b      	ldr	r3, [r7, #4]
    9bb6:	2200      	movs	r2, #0
    9bb8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9bba:	687b      	ldr	r3, [r7, #4]
    9bbc:	2201      	movs	r2, #1
    9bbe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    9bc0:	687b      	ldr	r3, [r7, #4]
    9bc2:	2200      	movs	r2, #0
    9bc4:	709a      	strb	r2, [r3, #2]
}
    9bc6:	46c0      	nop			; (mov r8, r8)
    9bc8:	46bd      	mov	sp, r7
    9bca:	b002      	add	sp, #8
    9bcc:	bd80      	pop	{r7, pc}
	...

00009bd0 <port_pin_set_output_level>:
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b084      	sub	sp, #16
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	0002      	movs	r2, r0
    9bd8:	1dfb      	adds	r3, r7, #7
    9bda:	701a      	strb	r2, [r3, #0]
    9bdc:	1dbb      	adds	r3, r7, #6
    9bde:	1c0a      	adds	r2, r1, #0
    9be0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9be2:	1dfb      	adds	r3, r7, #7
    9be4:	781b      	ldrb	r3, [r3, #0]
    9be6:	0018      	movs	r0, r3
    9be8:	4b0d      	ldr	r3, [pc, #52]	; (9c20 <port_pin_set_output_level+0x50>)
    9bea:	447b      	add	r3, pc
    9bec:	4798      	blx	r3
    9bee:	0003      	movs	r3, r0
    9bf0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9bf2:	1dfb      	adds	r3, r7, #7
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	221f      	movs	r2, #31
    9bf8:	4013      	ands	r3, r2
    9bfa:	2201      	movs	r2, #1
    9bfc:	409a      	lsls	r2, r3
    9bfe:	0013      	movs	r3, r2
    9c00:	60bb      	str	r3, [r7, #8]
	if (level) {
    9c02:	1dbb      	adds	r3, r7, #6
    9c04:	781b      	ldrb	r3, [r3, #0]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d003      	beq.n	9c12 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    9c0a:	68fb      	ldr	r3, [r7, #12]
    9c0c:	68ba      	ldr	r2, [r7, #8]
    9c0e:	619a      	str	r2, [r3, #24]
}
    9c10:	e002      	b.n	9c18 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    9c12:	68fb      	ldr	r3, [r7, #12]
    9c14:	68ba      	ldr	r2, [r7, #8]
    9c16:	615a      	str	r2, [r3, #20]
}
    9c18:	46c0      	nop			; (mov r8, r8)
    9c1a:	46bd      	mov	sp, r7
    9c1c:	b004      	add	sp, #16
    9c1e:	bd80      	pop	{r7, pc}
    9c20:	ffffff97 	.word	0xffffff97

00009c24 <system_interrupt_enable>:
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b082      	sub	sp, #8
    9c28:	af00      	add	r7, sp, #0
    9c2a:	0002      	movs	r2, r0
    9c2c:	1dfb      	adds	r3, r7, #7
    9c2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9c30:	4b06      	ldr	r3, [pc, #24]	; (9c4c <system_interrupt_enable+0x28>)
    9c32:	1dfa      	adds	r2, r7, #7
    9c34:	7812      	ldrb	r2, [r2, #0]
    9c36:	0011      	movs	r1, r2
    9c38:	221f      	movs	r2, #31
    9c3a:	400a      	ands	r2, r1
    9c3c:	2101      	movs	r1, #1
    9c3e:	4091      	lsls	r1, r2
    9c40:	000a      	movs	r2, r1
    9c42:	601a      	str	r2, [r3, #0]
}
    9c44:	46c0      	nop			; (mov r8, r8)
    9c46:	46bd      	mov	sp, r7
    9c48:	b002      	add	sp, #8
    9c4a:	bd80      	pop	{r7, pc}
    9c4c:	e000e100 	.word	0xe000e100

00009c50 <spi_is_syncing>:
{
    9c50:	b580      	push	{r7, lr}
    9c52:	b084      	sub	sp, #16
    9c54:	af00      	add	r7, sp, #0
    9c56:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9c58:	687b      	ldr	r3, [r7, #4]
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    9c5e:	68fb      	ldr	r3, [r7, #12]
    9c60:	69db      	ldr	r3, [r3, #28]
    9c62:	1e5a      	subs	r2, r3, #1
    9c64:	4193      	sbcs	r3, r2
    9c66:	b2db      	uxtb	r3, r3
}
    9c68:	0018      	movs	r0, r3
    9c6a:	46bd      	mov	sp, r7
    9c6c:	b004      	add	sp, #16
    9c6e:	bd80      	pop	{r7, pc}

00009c70 <spi_get_config_defaults>:
{
    9c70:	b590      	push	{r4, r7, lr}
    9c72:	b083      	sub	sp, #12
    9c74:	af00      	add	r7, sp, #0
    9c76:	6078      	str	r0, [r7, #4]
    9c78:	4c1e      	ldr	r4, [pc, #120]	; (9cf4 <spi_get_config_defaults+0x84>)
    9c7a:	447c      	add	r4, pc
	config->mode             = SPI_MODE_MASTER;
    9c7c:	687b      	ldr	r3, [r7, #4]
    9c7e:	2201      	movs	r2, #1
    9c80:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9c82:	687b      	ldr	r3, [r7, #4]
    9c84:	2200      	movs	r2, #0
    9c86:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9c88:	687b      	ldr	r3, [r7, #4]
    9c8a:	2200      	movs	r2, #0
    9c8c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    9c8e:	687b      	ldr	r3, [r7, #4]
    9c90:	22c0      	movs	r2, #192	; 0xc0
    9c92:	0392      	lsls	r2, r2, #14
    9c94:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9c96:	687b      	ldr	r3, [r7, #4]
    9c98:	2200      	movs	r2, #0
    9c9a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	2200      	movs	r2, #0
    9ca0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	2201      	movs	r2, #1
    9ca6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	2201      	movs	r2, #1
    9cac:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    9cae:	687b      	ldr	r3, [r7, #4]
    9cb0:	2200      	movs	r2, #0
    9cb2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    9cb4:	687b      	ldr	r3, [r7, #4]
    9cb6:	2224      	movs	r2, #36	; 0x24
    9cb8:	2100      	movs	r1, #0
    9cba:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9cbc:	687b      	ldr	r3, [r7, #4]
    9cbe:	3318      	adds	r3, #24
    9cc0:	220c      	movs	r2, #12
    9cc2:	2100      	movs	r1, #0
    9cc4:	0018      	movs	r0, r3
    9cc6:	4b0c      	ldr	r3, [pc, #48]	; (9cf8 <spi_get_config_defaults+0x88>)
    9cc8:	58e3      	ldr	r3, [r4, r3]
    9cca:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    9ccc:	687b      	ldr	r3, [r7, #4]
    9cce:	4a0b      	ldr	r2, [pc, #44]	; (9cfc <spi_get_config_defaults+0x8c>)
    9cd0:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	2200      	movs	r2, #0
    9cd6:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	2200      	movs	r2, #0
    9cdc:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	2200      	movs	r2, #0
    9ce2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	2200      	movs	r2, #0
    9ce8:	635a      	str	r2, [r3, #52]	; 0x34
};
    9cea:	46c0      	nop			; (mov r8, r8)
    9cec:	46bd      	mov	sp, r7
    9cee:	b003      	add	sp, #12
    9cf0:	bd90      	pop	{r4, r7, pc}
    9cf2:	46c0      	nop			; (mov r8, r8)
    9cf4:	000081e6 	.word	0x000081e6
    9cf8:	000001f8 	.word	0x000001f8
    9cfc:	000186a0 	.word	0x000186a0

00009d00 <spi_slave_inst_get_config_defaults>:
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b082      	sub	sp, #8
    9d04:	af00      	add	r7, sp, #0
    9d06:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    9d08:	687b      	ldr	r3, [r7, #4]
    9d0a:	220a      	movs	r2, #10
    9d0c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    9d0e:	687b      	ldr	r3, [r7, #4]
    9d10:	2200      	movs	r2, #0
    9d12:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	2200      	movs	r2, #0
    9d18:	709a      	strb	r2, [r3, #2]
}
    9d1a:	46c0      	nop			; (mov r8, r8)
    9d1c:	46bd      	mov	sp, r7
    9d1e:	b002      	add	sp, #8
    9d20:	bd80      	pop	{r7, pc}
	...

00009d24 <spi_attach_slave>:
{
    9d24:	b590      	push	{r4, r7, lr}
    9d26:	b085      	sub	sp, #20
    9d28:	af00      	add	r7, sp, #0
    9d2a:	6078      	str	r0, [r7, #4]
    9d2c:	6039      	str	r1, [r7, #0]
    9d2e:	4c16      	ldr	r4, [pc, #88]	; (9d88 <spi_attach_slave+0x64>)
    9d30:	447c      	add	r4, pc
	slave->ss_pin          = config->ss_pin;
    9d32:	683b      	ldr	r3, [r7, #0]
    9d34:	781a      	ldrb	r2, [r3, #0]
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    9d3a:	683b      	ldr	r3, [r7, #0]
    9d3c:	785a      	ldrb	r2, [r3, #1]
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    9d42:	683b      	ldr	r3, [r7, #0]
    9d44:	789a      	ldrb	r2, [r3, #2]
    9d46:	687b      	ldr	r3, [r7, #4]
    9d48:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    9d4a:	230c      	movs	r3, #12
    9d4c:	18fb      	adds	r3, r7, r3
    9d4e:	0018      	movs	r0, r3
    9d50:	4b0e      	ldr	r3, [pc, #56]	; (9d8c <spi_attach_slave+0x68>)
    9d52:	447b      	add	r3, pc
    9d54:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    9d56:	230c      	movs	r3, #12
    9d58:	18fb      	adds	r3, r7, r3
    9d5a:	2201      	movs	r2, #1
    9d5c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    9d5e:	687b      	ldr	r3, [r7, #4]
    9d60:	781b      	ldrb	r3, [r3, #0]
    9d62:	220c      	movs	r2, #12
    9d64:	18ba      	adds	r2, r7, r2
    9d66:	0011      	movs	r1, r2
    9d68:	0018      	movs	r0, r3
    9d6a:	4b09      	ldr	r3, [pc, #36]	; (9d90 <spi_attach_slave+0x6c>)
    9d6c:	58e3      	ldr	r3, [r4, r3]
    9d6e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	781b      	ldrb	r3, [r3, #0]
    9d74:	2101      	movs	r1, #1
    9d76:	0018      	movs	r0, r3
    9d78:	4b06      	ldr	r3, [pc, #24]	; (9d94 <spi_attach_slave+0x70>)
    9d7a:	447b      	add	r3, pc
    9d7c:	4798      	blx	r3
}
    9d7e:	46c0      	nop			; (mov r8, r8)
    9d80:	46bd      	mov	sp, r7
    9d82:	b005      	add	sp, #20
    9d84:	bd90      	pop	{r4, r7, pc}
    9d86:	46c0      	nop			; (mov r8, r8)
    9d88:	00008130 	.word	0x00008130
    9d8c:	fffffe57 	.word	0xfffffe57
    9d90:	00000240 	.word	0x00000240
    9d94:	fffffe53 	.word	0xfffffe53

00009d98 <spi_enable>:
{
    9d98:	b580      	push	{r7, lr}
    9d9a:	b084      	sub	sp, #16
    9d9c:	af00      	add	r7, sp, #0
    9d9e:	6078      	str	r0, [r7, #4]
    9da0:	4a10      	ldr	r2, [pc, #64]	; (9de4 <spi_enable+0x4c>)
    9da2:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    9da4:	687b      	ldr	r3, [r7, #4]
    9da6:	681b      	ldr	r3, [r3, #0]
    9da8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9daa:	687b      	ldr	r3, [r7, #4]
    9dac:	681b      	ldr	r3, [r3, #0]
    9dae:	0018      	movs	r0, r3
    9db0:	4b0d      	ldr	r3, [pc, #52]	; (9de8 <spi_enable+0x50>)
    9db2:	58d3      	ldr	r3, [r2, r3]
    9db4:	4798      	blx	r3
    9db6:	0003      	movs	r3, r0
    9db8:	0018      	movs	r0, r3
    9dba:	4b0c      	ldr	r3, [pc, #48]	; (9dec <spi_enable+0x54>)
    9dbc:	447b      	add	r3, pc
    9dbe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    9dc0:	46c0      	nop			; (mov r8, r8)
    9dc2:	687b      	ldr	r3, [r7, #4]
    9dc4:	0018      	movs	r0, r3
    9dc6:	4b0a      	ldr	r3, [pc, #40]	; (9df0 <spi_enable+0x58>)
    9dc8:	447b      	add	r3, pc
    9dca:	4798      	blx	r3
    9dcc:	1e03      	subs	r3, r0, #0
    9dce:	d1f8      	bne.n	9dc2 <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	2202      	movs	r2, #2
    9dd6:	431a      	orrs	r2, r3
    9dd8:	68fb      	ldr	r3, [r7, #12]
    9dda:	601a      	str	r2, [r3, #0]
}
    9ddc:	46c0      	nop			; (mov r8, r8)
    9dde:	46bd      	mov	sp, r7
    9de0:	b004      	add	sp, #16
    9de2:	bd80      	pop	{r7, pc}
    9de4:	000080be 	.word	0x000080be
    9de8:	000000a8 	.word	0x000000a8
    9dec:	fffffe65 	.word	0xfffffe65
    9df0:	fffffe85 	.word	0xfffffe85

00009df4 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b084      	sub	sp, #16
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
    9dfc:	000a      	movs	r2, r1
    9dfe:	1cfb      	adds	r3, r7, #3
    9e00:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    9e02:	230f      	movs	r3, #15
    9e04:	18fb      	adds	r3, r7, r3
    9e06:	2200      	movs	r2, #0
    9e08:	701a      	strb	r2, [r3, #0]
	while (size--) {
    9e0a:	e038      	b.n	9e7e <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	1c5a      	adds	r2, r3, #1
    9e10:	607a      	str	r2, [r7, #4]
    9e12:	220e      	movs	r2, #14
    9e14:	18ba      	adds	r2, r7, r2
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    9e1a:	230d      	movs	r3, #13
    9e1c:	18fb      	adds	r3, r7, r3
    9e1e:	2200      	movs	r2, #0
    9e20:	701a      	strb	r2, [r3, #0]
    9e22:	e027      	b.n	9e74 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    9e24:	230f      	movs	r3, #15
    9e26:	18fa      	adds	r2, r7, r3
    9e28:	230f      	movs	r3, #15
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	18db      	adds	r3, r3, r3
    9e30:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    9e32:	230e      	movs	r3, #14
    9e34:	18fa      	adds	r2, r7, r3
    9e36:	230f      	movs	r3, #15
    9e38:	18fb      	adds	r3, r7, r3
    9e3a:	7812      	ldrb	r2, [r2, #0]
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	4053      	eors	r3, r2
    9e40:	b2db      	uxtb	r3, r3
    9e42:	b25b      	sxtb	r3, r3
    9e44:	2b00      	cmp	r3, #0
    9e46:	da07      	bge.n	9e58 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    9e48:	230f      	movs	r3, #15
    9e4a:	18fb      	adds	r3, r7, r3
    9e4c:	220f      	movs	r2, #15
    9e4e:	18ba      	adds	r2, r7, r2
    9e50:	7812      	ldrb	r2, [r2, #0]
    9e52:	2109      	movs	r1, #9
    9e54:	404a      	eors	r2, r1
    9e56:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    9e58:	230e      	movs	r3, #14
    9e5a:	18fa      	adds	r2, r7, r3
    9e5c:	230e      	movs	r3, #14
    9e5e:	18fb      	adds	r3, r7, r3
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	18db      	adds	r3, r3, r3
    9e64:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    9e66:	230d      	movs	r3, #13
    9e68:	18fb      	adds	r3, r7, r3
    9e6a:	781a      	ldrb	r2, [r3, #0]
    9e6c:	230d      	movs	r3, #13
    9e6e:	18fb      	adds	r3, r7, r3
    9e70:	3201      	adds	r2, #1
    9e72:	701a      	strb	r2, [r3, #0]
    9e74:	230d      	movs	r3, #13
    9e76:	18fb      	adds	r3, r7, r3
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	2b07      	cmp	r3, #7
    9e7c:	d9d2      	bls.n	9e24 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    9e7e:	1cfb      	adds	r3, r7, #3
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	1cfa      	adds	r2, r7, #3
    9e84:	1e59      	subs	r1, r3, #1
    9e86:	7011      	strb	r1, [r2, #0]
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d1bf      	bne.n	9e0c <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    9e8c:	230f      	movs	r3, #15
    9e8e:	18fb      	adds	r3, r7, r3
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	005b      	lsls	r3, r3, #1
    9e94:	b25b      	sxtb	r3, r3
    9e96:	2201      	movs	r2, #1
    9e98:	4313      	orrs	r3, r2
    9e9a:	b25a      	sxtb	r2, r3
    9e9c:	230f      	movs	r3, #15
    9e9e:	18fb      	adds	r3, r7, r3
    9ea0:	701a      	strb	r2, [r3, #0]
	return crc;
    9ea2:	230f      	movs	r3, #15
    9ea4:	18fb      	adds	r3, r7, r3
    9ea6:	781b      	ldrb	r3, [r3, #0]
}
    9ea8:	0018      	movs	r0, r3
    9eaa:	46bd      	mov	sp, r7
    9eac:	b004      	add	sp, #16
    9eae:	bd80      	pop	{r7, pc}

00009eb0 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    9eb0:	b5b0      	push	{r4, r5, r7, lr}
    9eb2:	b082      	sub	sp, #8
    9eb4:	af00      	add	r7, sp, #0
    9eb6:	4c1c      	ldr	r4, [pc, #112]	; (9f28 <sd_mmc_spi_wait_busy+0x78>)
    9eb8:	447c      	add	r4, pc
	uint8_t line = 0xFF;
    9eba:	1c7b      	adds	r3, r7, #1
    9ebc:	22ff      	movs	r2, #255	; 0xff
    9ebe:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    9ec0:	1cbb      	adds	r3, r7, #2
    9ec2:	22ff      	movs	r2, #255	; 0xff
    9ec4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9ec6:	1cbb      	adds	r3, r7, #2
    9ec8:	881b      	ldrh	r3, [r3, #0]
    9eca:	1c79      	adds	r1, r7, #1
    9ecc:	4a17      	ldr	r2, [pc, #92]	; (9f2c <sd_mmc_spi_wait_busy+0x7c>)
    9ece:	447a      	add	r2, pc
    9ed0:	0010      	movs	r0, r2
    9ed2:	2201      	movs	r2, #1
    9ed4:	4d16      	ldr	r5, [pc, #88]	; (9f30 <sd_mmc_spi_wait_busy+0x80>)
    9ed6:	5965      	ldr	r5, [r4, r5]
    9ed8:	47a8      	blx	r5
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    9eda:	4b16      	ldr	r3, [pc, #88]	; (9f34 <sd_mmc_spi_wait_busy+0x84>)
    9edc:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9ede:	1cbb      	adds	r3, r7, #2
    9ee0:	881b      	ldrh	r3, [r3, #0]
    9ee2:	1c79      	adds	r1, r7, #1
    9ee4:	4a14      	ldr	r2, [pc, #80]	; (9f38 <sd_mmc_spi_wait_busy+0x88>)
    9ee6:	447a      	add	r2, pc
    9ee8:	0010      	movs	r0, r2
    9eea:	2201      	movs	r2, #1
    9eec:	4d10      	ldr	r5, [pc, #64]	; (9f30 <sd_mmc_spi_wait_busy+0x80>)
    9eee:	5965      	ldr	r5, [r4, r5]
    9ef0:	47a8      	blx	r5
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9ef2:	1cbb      	adds	r3, r7, #2
    9ef4:	881b      	ldrh	r3, [r3, #0]
    9ef6:	1c79      	adds	r1, r7, #1
    9ef8:	4a10      	ldr	r2, [pc, #64]	; (9f3c <sd_mmc_spi_wait_busy+0x8c>)
    9efa:	447a      	add	r2, pc
    9efc:	0010      	movs	r0, r2
    9efe:	2201      	movs	r2, #1
    9f00:	4d0b      	ldr	r5, [pc, #44]	; (9f30 <sd_mmc_spi_wait_busy+0x80>)
    9f02:	5965      	ldr	r5, [r4, r5]
    9f04:	47a8      	blx	r5
			dummy);
		if (!(nec_timeout--)) {
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	1e5a      	subs	r2, r3, #1
    9f0a:	607a      	str	r2, [r7, #4]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d101      	bne.n	9f14 <sd_mmc_spi_wait_busy+0x64>
			return false;
    9f10:	2300      	movs	r3, #0
    9f12:	e004      	b.n	9f1e <sd_mmc_spi_wait_busy+0x6e>
		}
	} while (line != 0xFF);
    9f14:	1c7b      	adds	r3, r7, #1
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	2bff      	cmp	r3, #255	; 0xff
    9f1a:	d1ea      	bne.n	9ef2 <sd_mmc_spi_wait_busy+0x42>
	return true;
    9f1c:	2301      	movs	r3, #1
}
    9f1e:	0018      	movs	r0, r3
    9f20:	46bd      	mov	sp, r7
    9f22:	b002      	add	sp, #8
    9f24:	bdb0      	pop	{r4, r5, r7, pc}
    9f26:	46c0      	nop			; (mov r8, r8)
    9f28:	00007fa8 	.word	0x00007fa8
    9f2c:	1fff667a 	.word	0x1fff667a
    9f30:	000001f0 	.word	0x000001f0
    9f34:	00030d40 	.word	0x00030d40
    9f38:	1fff6662 	.word	0x1fff6662
    9f3c:	1fff664e 	.word	0x1fff664e

00009f40 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    9f40:	b5b0      	push	{r4, r5, r7, lr}
    9f42:	b082      	sub	sp, #8
    9f44:	af00      	add	r7, sp, #0
    9f46:	4c1f      	ldr	r4, [pc, #124]	; (9fc4 <sd_mmc_spi_start_read_block+0x84>)
    9f48:	447c      	add	r4, pc
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    9f4a:	1cbb      	adds	r3, r7, #2
    9f4c:	22ff      	movs	r2, #255	; 0xff
    9f4e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    9f50:	1c7b      	adds	r3, r7, #1
    9f52:	2200      	movs	r2, #0
    9f54:	701a      	strb	r2, [r3, #0]
	i = 500000;
    9f56:	4b1c      	ldr	r3, [pc, #112]	; (9fc8 <sd_mmc_spi_start_read_block+0x88>)
    9f58:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	1e5a      	subs	r2, r3, #1
    9f5e:	607a      	str	r2, [r7, #4]
    9f60:	2b00      	cmp	r3, #0
    9f62:	d105      	bne.n	9f70 <sd_mmc_spi_start_read_block+0x30>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    9f64:	4b19      	ldr	r3, [pc, #100]	; (9fcc <sd_mmc_spi_start_read_block+0x8c>)
    9f66:	447b      	add	r3, pc
    9f68:	2204      	movs	r2, #4
    9f6a:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    9f6c:	2300      	movs	r3, #0
    9f6e:	e025      	b.n	9fbc <sd_mmc_spi_start_read_block+0x7c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    9f70:	1cbb      	adds	r3, r7, #2
    9f72:	881b      	ldrh	r3, [r3, #0]
    9f74:	1c79      	adds	r1, r7, #1
    9f76:	4a16      	ldr	r2, [pc, #88]	; (9fd0 <sd_mmc_spi_start_read_block+0x90>)
    9f78:	447a      	add	r2, pc
    9f7a:	0010      	movs	r0, r2
    9f7c:	2201      	movs	r2, #1
    9f7e:	4d15      	ldr	r5, [pc, #84]	; (9fd4 <sd_mmc_spi_start_read_block+0x94>)
    9f80:	5965      	ldr	r5, [r4, r5]
    9f82:	47a8      	blx	r5
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    9f84:	1c7b      	adds	r3, r7, #1
    9f86:	781b      	ldrb	r3, [r3, #0]
    9f88:	001a      	movs	r2, r3
    9f8a:	23f0      	movs	r3, #240	; 0xf0
    9f8c:	4013      	ands	r3, r2
    9f8e:	d110      	bne.n	9fb2 <sd_mmc_spi_start_read_block+0x72>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    9f90:	1c7b      	adds	r3, r7, #1
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	001a      	movs	r2, r3
    9f96:	2307      	movs	r3, #7
    9f98:	4013      	ands	r3, r2
    9f9a:	d004      	beq.n	9fa6 <sd_mmc_spi_start_read_block+0x66>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    9f9c:	4b0e      	ldr	r3, [pc, #56]	; (9fd8 <sd_mmc_spi_start_read_block+0x98>)
    9f9e:	447b      	add	r3, pc
    9fa0:	2207      	movs	r2, #7
    9fa2:	701a      	strb	r2, [r3, #0]
    9fa4:	e003      	b.n	9fae <sd_mmc_spi_start_read_block+0x6e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    9fa6:	4b0d      	ldr	r3, [pc, #52]	; (9fdc <sd_mmc_spi_start_read_block+0x9c>)
    9fa8:	447b      	add	r3, pc
    9faa:	220b      	movs	r2, #11
    9fac:	701a      	strb	r2, [r3, #0]
			}
			return false;
    9fae:	2300      	movs	r3, #0
    9fb0:	e004      	b.n	9fbc <sd_mmc_spi_start_read_block+0x7c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    9fb2:	1c7b      	adds	r3, r7, #1
    9fb4:	781b      	ldrb	r3, [r3, #0]
    9fb6:	2bfe      	cmp	r3, #254	; 0xfe
    9fb8:	d1cf      	bne.n	9f5a <sd_mmc_spi_start_read_block+0x1a>

	return true;
    9fba:	2301      	movs	r3, #1
}
    9fbc:	0018      	movs	r0, r3
    9fbe:	46bd      	mov	sp, r7
    9fc0:	b002      	add	sp, #8
    9fc2:	bdb0      	pop	{r4, r5, r7, pc}
    9fc4:	00007f18 	.word	0x00007f18
    9fc8:	0007a120 	.word	0x0007a120
    9fcc:	1fff6625 	.word	0x1fff6625
    9fd0:	1fff65d0 	.word	0x1fff65d0
    9fd4:	000001f0 	.word	0x000001f0
    9fd8:	1fff65ed 	.word	0x1fff65ed
    9fdc:	1fff65e3 	.word	0x1fff65e3

00009fe0 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    9fe0:	b5b0      	push	{r4, r5, r7, lr}
    9fe2:	b082      	sub	sp, #8
    9fe4:	af00      	add	r7, sp, #0
    9fe6:	4d09      	ldr	r5, [pc, #36]	; (a00c <sd_mmc_spi_stop_read_block+0x2c>)
    9fe8:	447d      	add	r5, pc
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    9fea:	1dbb      	adds	r3, r7, #6
    9fec:	22ff      	movs	r2, #255	; 0xff
    9fee:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    9ff0:	1dbb      	adds	r3, r7, #6
    9ff2:	881b      	ldrh	r3, [r3, #0]
    9ff4:	1d39      	adds	r1, r7, #4
    9ff6:	4a06      	ldr	r2, [pc, #24]	; (a010 <sd_mmc_spi_stop_read_block+0x30>)
    9ff8:	447a      	add	r2, pc
    9ffa:	0010      	movs	r0, r2
    9ffc:	2202      	movs	r2, #2
    9ffe:	4c05      	ldr	r4, [pc, #20]	; (a014 <sd_mmc_spi_stop_read_block+0x34>)
    a000:	592c      	ldr	r4, [r5, r4]
    a002:	47a0      	blx	r4
			dummy);
}
    a004:	46c0      	nop			; (mov r8, r8)
    a006:	46bd      	mov	sp, r7
    a008:	b002      	add	sp, #8
    a00a:	bdb0      	pop	{r4, r5, r7, pc}
    a00c:	00007e78 	.word	0x00007e78
    a010:	1fff6550 	.word	0x1fff6550
    a014:	000001f0 	.word	0x000001f0

0000a018 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    a018:	b590      	push	{r4, r7, lr}
    a01a:	b083      	sub	sp, #12
    a01c:	af00      	add	r7, sp, #0
    a01e:	4c13      	ldr	r4, [pc, #76]	; (a06c <sd_mmc_spi_start_write_block+0x54>)
    a020:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    a022:	1dfb      	adds	r3, r7, #7
    a024:	22ff      	movs	r2, #255	; 0xff
    a026:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    a028:	1dfb      	adds	r3, r7, #7
    a02a:	4a11      	ldr	r2, [pc, #68]	; (a070 <sd_mmc_spi_start_write_block+0x58>)
    a02c:	447a      	add	r2, pc
    a02e:	0010      	movs	r0, r2
    a030:	2201      	movs	r2, #1
    a032:	0019      	movs	r1, r3
    a034:	4b0f      	ldr	r3, [pc, #60]	; (a074 <sd_mmc_spi_start_write_block+0x5c>)
    a036:	58e3      	ldr	r3, [r4, r3]
    a038:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    a03a:	4b0f      	ldr	r3, [pc, #60]	; (a078 <sd_mmc_spi_start_write_block+0x60>)
    a03c:	447b      	add	r3, pc
    a03e:	881b      	ldrh	r3, [r3, #0]
    a040:	2b01      	cmp	r3, #1
    a042:	d103      	bne.n	a04c <sd_mmc_spi_start_write_block+0x34>
		token = SPI_TOKEN_SINGLE_WRITE;
    a044:	1dbb      	adds	r3, r7, #6
    a046:	22fe      	movs	r2, #254	; 0xfe
    a048:	701a      	strb	r2, [r3, #0]
    a04a:	e002      	b.n	a052 <sd_mmc_spi_start_write_block+0x3a>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    a04c:	1dbb      	adds	r3, r7, #6
    a04e:	22fc      	movs	r2, #252	; 0xfc
    a050:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    a052:	1dbb      	adds	r3, r7, #6
    a054:	4a09      	ldr	r2, [pc, #36]	; (a07c <sd_mmc_spi_start_write_block+0x64>)
    a056:	447a      	add	r2, pc
    a058:	0010      	movs	r0, r2
    a05a:	2201      	movs	r2, #1
    a05c:	0019      	movs	r1, r3
    a05e:	4b05      	ldr	r3, [pc, #20]	; (a074 <sd_mmc_spi_start_write_block+0x5c>)
    a060:	58e3      	ldr	r3, [r4, r3]
    a062:	4798      	blx	r3
}
    a064:	46c0      	nop			; (mov r8, r8)
    a066:	46bd      	mov	sp, r7
    a068:	b003      	add	sp, #12
    a06a:	bd90      	pop	{r4, r7, pc}
    a06c:	00007e40 	.word	0x00007e40
    a070:	1fff651c 	.word	0x1fff651c
    a074:	000002d4 	.word	0x000002d4
    a078:	1fff655a 	.word	0x1fff655a
    a07c:	1fff64f2 	.word	0x1fff64f2

0000a080 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    a080:	b5b0      	push	{r4, r5, r7, lr}
    a082:	b082      	sub	sp, #8
    a084:	af00      	add	r7, sp, #0
    a086:	4c24      	ldr	r4, [pc, #144]	; (a118 <sd_mmc_spi_stop_write_block+0x98>)
    a088:	447c      	add	r4, pc
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    a08a:	1dbb      	adds	r3, r7, #6
    a08c:	22ff      	movs	r2, #255	; 0xff
    a08e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    a090:	1cbb      	adds	r3, r7, #2
    a092:	2201      	movs	r2, #1
    a094:	4252      	negs	r2, r2
    a096:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    a098:	1cbb      	adds	r3, r7, #2
    a09a:	4a20      	ldr	r2, [pc, #128]	; (a11c <sd_mmc_spi_stop_write_block+0x9c>)
    a09c:	447a      	add	r2, pc
    a09e:	0010      	movs	r0, r2
    a0a0:	2202      	movs	r2, #2
    a0a2:	0019      	movs	r1, r3
    a0a4:	4b1e      	ldr	r3, [pc, #120]	; (a120 <sd_mmc_spi_stop_write_block+0xa0>)
    a0a6:	58e3      	ldr	r3, [r4, r3]
    a0a8:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    a0aa:	1dbb      	adds	r3, r7, #6
    a0ac:	881b      	ldrh	r3, [r3, #0]
    a0ae:	1d79      	adds	r1, r7, #5
    a0b0:	4a1c      	ldr	r2, [pc, #112]	; (a124 <sd_mmc_spi_stop_write_block+0xa4>)
    a0b2:	447a      	add	r2, pc
    a0b4:	0010      	movs	r0, r2
    a0b6:	2201      	movs	r2, #1
    a0b8:	4d1b      	ldr	r5, [pc, #108]	; (a128 <sd_mmc_spi_stop_write_block+0xa8>)
    a0ba:	5964      	ldr	r4, [r4, r5]
    a0bc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    a0be:	1d7b      	adds	r3, r7, #5
    a0c0:	781b      	ldrb	r3, [r3, #0]
    a0c2:	001a      	movs	r2, r3
    a0c4:	2310      	movs	r3, #16
    a0c6:	4013      	ands	r3, r2
    a0c8:	d105      	bne.n	a0d6 <sd_mmc_spi_stop_write_block+0x56>
    a0ca:	1d7b      	adds	r3, r7, #5
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	001a      	movs	r2, r3
    a0d0:	2301      	movs	r3, #1
    a0d2:	4013      	ands	r3, r2
    a0d4:	d105      	bne.n	a0e2 <sd_mmc_spi_stop_write_block+0x62>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a0d6:	4b15      	ldr	r3, [pc, #84]	; (a12c <sd_mmc_spi_stop_write_block+0xac>)
    a0d8:	447b      	add	r3, pc
    a0da:	2201      	movs	r2, #1
    a0dc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    a0de:	2300      	movs	r3, #0
    a0e0:	e016      	b.n	a110 <sd_mmc_spi_stop_write_block+0x90>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    a0e2:	1d7b      	adds	r3, r7, #5
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	001a      	movs	r2, r3
    a0e8:	231e      	movs	r3, #30
    a0ea:	4013      	ands	r3, r2
    a0ec:	2b04      	cmp	r3, #4
    a0ee:	d00d      	beq.n	a10c <sd_mmc_spi_stop_write_block+0x8c>
    a0f0:	2b0a      	cmp	r3, #10
    a0f2:	d105      	bne.n	a100 <sd_mmc_spi_stop_write_block+0x80>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    a0f4:	4b0e      	ldr	r3, [pc, #56]	; (a130 <sd_mmc_spi_stop_write_block+0xb0>)
    a0f6:	447b      	add	r3, pc
    a0f8:	2208      	movs	r2, #8
    a0fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    a0fc:	2300      	movs	r3, #0
    a0fe:	e007      	b.n	a110 <sd_mmc_spi_stop_write_block+0x90>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    a100:	4b0c      	ldr	r3, [pc, #48]	; (a134 <sd_mmc_spi_stop_write_block+0xb4>)
    a102:	447b      	add	r3, pc
    a104:	220a      	movs	r2, #10
    a106:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    a108:	2300      	movs	r3, #0
    a10a:	e001      	b.n	a110 <sd_mmc_spi_stop_write_block+0x90>
		break;
    a10c:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    a10e:	2301      	movs	r3, #1
}
    a110:	0018      	movs	r0, r3
    a112:	46bd      	mov	sp, r7
    a114:	b002      	add	sp, #8
    a116:	bdb0      	pop	{r4, r5, r7, pc}
    a118:	00007dd8 	.word	0x00007dd8
    a11c:	1fff64ac 	.word	0x1fff64ac
    a120:	000002d4 	.word	0x000002d4
    a124:	1fff6496 	.word	0x1fff6496
    a128:	000001f0 	.word	0x000001f0
    a12c:	1fff64b3 	.word	0x1fff64b3
    a130:	1fff6495 	.word	0x1fff6495
    a134:	1fff6489 	.word	0x1fff6489

0000a138 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    a138:	b5b0      	push	{r4, r5, r7, lr}
    a13a:	b082      	sub	sp, #8
    a13c:	af00      	add	r7, sp, #0
    a13e:	4c25      	ldr	r4, [pc, #148]	; (a1d4 <sd_mmc_spi_stop_multiwrite_block+0x9c>)
    a140:	447c      	add	r4, pc
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    a142:	4b25      	ldr	r3, [pc, #148]	; (a1d8 <sd_mmc_spi_stop_multiwrite_block+0xa0>)
    a144:	447b      	add	r3, pc
    a146:	881b      	ldrh	r3, [r3, #0]
    a148:	2b01      	cmp	r3, #1
    a14a:	d101      	bne.n	a150 <sd_mmc_spi_stop_multiwrite_block+0x18>
		return true; // Single block write
    a14c:	2301      	movs	r3, #1
    a14e:	e03c      	b.n	a1ca <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	if (sd_mmc_spi_nb_block >
    a150:	4b22      	ldr	r3, [pc, #136]	; (a1dc <sd_mmc_spi_stop_multiwrite_block+0xa4>)
    a152:	447b      	add	r3, pc
    a154:	881b      	ldrh	r3, [r3, #0]
    a156:	001d      	movs	r5, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    a158:	4b21      	ldr	r3, [pc, #132]	; (a1e0 <sd_mmc_spi_stop_multiwrite_block+0xa8>)
    a15a:	447b      	add	r3, pc
    a15c:	681a      	ldr	r2, [r3, #0]
    a15e:	4b21      	ldr	r3, [pc, #132]	; (a1e4 <sd_mmc_spi_stop_multiwrite_block+0xac>)
    a160:	447b      	add	r3, pc
    a162:	881b      	ldrh	r3, [r3, #0]
    a164:	0019      	movs	r1, r3
    a166:	4b20      	ldr	r3, [pc, #128]	; (a1e8 <sd_mmc_spi_stop_multiwrite_block+0xb0>)
    a168:	58e3      	ldr	r3, [r4, r3]
    a16a:	0010      	movs	r0, r2
    a16c:	4798      	blx	r3
    a16e:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    a170:	429d      	cmp	r5, r3
    a172:	d901      	bls.n	a178 <sd_mmc_spi_stop_multiwrite_block+0x40>
		return true; // It is not the End of multi write
    a174:	2301      	movs	r3, #1
    a176:	e028      	b.n	a1ca <sd_mmc_spi_stop_multiwrite_block+0x92>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    a178:	1dfb      	adds	r3, r7, #7
    a17a:	22ff      	movs	r2, #255	; 0xff
    a17c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a17e:	1dfb      	adds	r3, r7, #7
    a180:	4a1a      	ldr	r2, [pc, #104]	; (a1ec <sd_mmc_spi_stop_multiwrite_block+0xb4>)
    a182:	447a      	add	r2, pc
    a184:	0010      	movs	r0, r2
    a186:	2201      	movs	r2, #1
    a188:	0019      	movs	r1, r3
    a18a:	4b19      	ldr	r3, [pc, #100]	; (a1f0 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    a18c:	58e3      	ldr	r3, [r4, r3]
    a18e:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    a190:	1dfb      	adds	r3, r7, #7
    a192:	22fd      	movs	r2, #253	; 0xfd
    a194:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a196:	1dfb      	adds	r3, r7, #7
    a198:	4a16      	ldr	r2, [pc, #88]	; (a1f4 <sd_mmc_spi_stop_multiwrite_block+0xbc>)
    a19a:	447a      	add	r2, pc
    a19c:	0010      	movs	r0, r2
    a19e:	2201      	movs	r2, #1
    a1a0:	0019      	movs	r1, r3
    a1a2:	4b13      	ldr	r3, [pc, #76]	; (a1f0 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    a1a4:	58e3      	ldr	r3, [r4, r3]
    a1a6:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    a1a8:	4b13      	ldr	r3, [pc, #76]	; (a1f8 <sd_mmc_spi_stop_multiwrite_block+0xc0>)
    a1aa:	447b      	add	r3, pc
    a1ac:	4798      	blx	r3
    a1ae:	0003      	movs	r3, r0
    a1b0:	001a      	movs	r2, r3
    a1b2:	2301      	movs	r3, #1
    a1b4:	4053      	eors	r3, r2
    a1b6:	b2db      	uxtb	r3, r3
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d005      	beq.n	a1c8 <sd_mmc_spi_stop_multiwrite_block+0x90>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a1bc:	4b0f      	ldr	r3, [pc, #60]	; (a1fc <sd_mmc_spi_stop_multiwrite_block+0xc4>)
    a1be:	447b      	add	r3, pc
    a1c0:	2205      	movs	r2, #5
    a1c2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    a1c4:	2300      	movs	r3, #0
    a1c6:	e000      	b.n	a1ca <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	return true;
    a1c8:	2301      	movs	r3, #1
}
    a1ca:	0018      	movs	r0, r3
    a1cc:	46bd      	mov	sp, r7
    a1ce:	b002      	add	sp, #8
    a1d0:	bdb0      	pop	{r4, r5, r7, pc}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	00007d20 	.word	0x00007d20
    a1d8:	1fff6452 	.word	0x1fff6452
    a1dc:	1fff6444 	.word	0x1fff6444
    a1e0:	1fff6436 	.word	0x1fff6436
    a1e4:	1fff6434 	.word	0x1fff6434
    a1e8:	0000020c 	.word	0x0000020c
    a1ec:	1fff63c6 	.word	0x1fff63c6
    a1f0:	000002d4 	.word	0x000002d4
    a1f4:	1fff63ae 	.word	0x1fff63ae
    a1f8:	fffffd03 	.word	0xfffffd03
    a1fc:	1fff63cd 	.word	0x1fff63cd

0000a200 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    a200:	b590      	push	{r4, r7, lr}
    a202:	b091      	sub	sp, #68	; 0x44
    a204:	af00      	add	r7, sp, #0
    a206:	4c28      	ldr	r4, [pc, #160]	; (a2a8 <sd_mmc_spi_init+0xa8>)
    a208:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a20a:	4b28      	ldr	r3, [pc, #160]	; (a2ac <sd_mmc_spi_init+0xac>)
    a20c:	447b      	add	r3, pc
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    a212:	233c      	movs	r3, #60	; 0x3c
    a214:	18fb      	adds	r3, r7, r3
    a216:	0018      	movs	r0, r3
    a218:	4b25      	ldr	r3, [pc, #148]	; (a2b0 <sd_mmc_spi_init+0xb0>)
    a21a:	447b      	add	r3, pc
    a21c:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
#endif
	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    a21e:	1d3b      	adds	r3, r7, #4
    a220:	0018      	movs	r0, r3
    a222:	4b24      	ldr	r3, [pc, #144]	; (a2b4 <sd_mmc_spi_init+0xb4>)
    a224:	447b      	add	r3, pc
    a226:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    a228:	1d3b      	adds	r3, r7, #4
    a22a:	2280      	movs	r2, #128	; 0x80
    a22c:	0292      	lsls	r2, r2, #10
    a22e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    a230:	1d3b      	adds	r3, r7, #4
    a232:	4a21      	ldr	r2, [pc, #132]	; (a2b8 <sd_mmc_spi_init+0xb8>)
    a234:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    a236:	1d3b      	adds	r3, r7, #4
    a238:	4a20      	ldr	r2, [pc, #128]	; (a2bc <sd_mmc_spi_init+0xbc>)
    a23a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    a23c:	1d3b      	adds	r3, r7, #4
    a23e:	4a20      	ldr	r2, [pc, #128]	; (a2c0 <sd_mmc_spi_init+0xc0>)
    a240:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    a242:	1d3b      	adds	r3, r7, #4
    a244:	4a1f      	ldr	r2, [pc, #124]	; (a2c4 <sd_mmc_spi_init+0xc4>)
    a246:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    a248:	1d3b      	adds	r3, r7, #4
    a24a:	2224      	movs	r2, #36	; 0x24
    a24c:	2100      	movs	r1, #0
    a24e:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    a250:	1d3b      	adds	r3, r7, #4
    a252:	4a1d      	ldr	r2, [pc, #116]	; (a2c8 <sd_mmc_spi_init+0xc8>)
    a254:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    a256:	1d3b      	adds	r3, r7, #4
    a258:	491c      	ldr	r1, [pc, #112]	; (a2cc <sd_mmc_spi_init+0xcc>)
    a25a:	4a1d      	ldr	r2, [pc, #116]	; (a2d0 <sd_mmc_spi_init+0xd0>)
    a25c:	447a      	add	r2, pc
    a25e:	0010      	movs	r0, r2
    a260:	001a      	movs	r2, r3
    a262:	4b1c      	ldr	r3, [pc, #112]	; (a2d4 <sd_mmc_spi_init+0xd4>)
    a264:	58e3      	ldr	r3, [r4, r3]
    a266:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    a268:	4b1b      	ldr	r3, [pc, #108]	; (a2d8 <sd_mmc_spi_init+0xd8>)
    a26a:	447b      	add	r3, pc
    a26c:	0018      	movs	r0, r3
    a26e:	4b1b      	ldr	r3, [pc, #108]	; (a2dc <sd_mmc_spi_init+0xdc>)
    a270:	447b      	add	r3, pc
    a272:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    a274:	4b1a      	ldr	r3, [pc, #104]	; (a2e0 <sd_mmc_spi_init+0xe0>)
    a276:	447b      	add	r3, pc
    a278:	0018      	movs	r0, r3
    a27a:	4b1a      	ldr	r3, [pc, #104]	; (a2e4 <sd_mmc_spi_init+0xe4>)
    a27c:	447b      	add	r3, pc
    a27e:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    a280:	4b19      	ldr	r3, [pc, #100]	; (a2e8 <sd_mmc_spi_init+0xe8>)
    a282:	58e3      	ldr	r3, [r4, r3]
    a284:	781a      	ldrb	r2, [r3, #0]
    a286:	4b19      	ldr	r3, [pc, #100]	; (a2ec <sd_mmc_spi_init+0xec>)
    a288:	447b      	add	r3, pc
    a28a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    a28c:	4b18      	ldr	r3, [pc, #96]	; (a2f0 <sd_mmc_spi_init+0xf0>)
    a28e:	447b      	add	r3, pc
    a290:	001a      	movs	r2, r3
    a292:	4b18      	ldr	r3, [pc, #96]	; (a2f4 <sd_mmc_spi_init+0xf4>)
    a294:	447b      	add	r3, pc
    a296:	0011      	movs	r1, r2
    a298:	0018      	movs	r0, r3
    a29a:	4b17      	ldr	r3, [pc, #92]	; (a2f8 <sd_mmc_spi_init+0xf8>)
    a29c:	447b      	add	r3, pc
    a29e:	4798      	blx	r3
}
    a2a0:	46c0      	nop			; (mov r8, r8)
    a2a2:	46bd      	mov	sp, r7
    a2a4:	b011      	add	sp, #68	; 0x44
    a2a6:	bd90      	pop	{r4, r7, pc}
    a2a8:	00007c58 	.word	0x00007c58
    a2ac:	1fff637f 	.word	0x1fff637f
    a2b0:	fffff98f 	.word	0xfffff98f
    a2b4:	fffffa49 	.word	0xfffffa49
    a2b8:	00100002 	.word	0x00100002
    a2bc:	00110002 	.word	0x00110002
    a2c0:	00120002 	.word	0x00120002
    a2c4:	00130002 	.word	0x00130002
    a2c8:	00061a80 	.word	0x00061a80
    a2cc:	42000c00 	.word	0x42000c00
    a2d0:	1fff62ec 	.word	0x1fff62ec
    a2d4:	000000b8 	.word	0x000000b8
    a2d8:	1fff62de 	.word	0x1fff62de
    a2dc:	fffffb25 	.word	0xfffffb25
    a2e0:	1fff6312 	.word	0x1fff6312
    a2e4:	fffffa81 	.word	0xfffffa81
    a2e8:	000001e4 	.word	0x000001e4
    a2ec:	1fff6300 	.word	0x1fff6300
    a2f0:	1fff62fa 	.word	0x1fff62fa
    a2f4:	1fff62f0 	.word	0x1fff62f0
    a2f8:	fffffa85 	.word	0xfffffa85

0000a2fc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    a2fc:	b590      	push	{r4, r7, lr}
    a2fe:	b083      	sub	sp, #12
    a300:	af00      	add	r7, sp, #0
    a302:	0004      	movs	r4, r0
    a304:	6039      	str	r1, [r7, #0]
    a306:	0010      	movs	r0, r2
    a308:	0019      	movs	r1, r3
    a30a:	1dfb      	adds	r3, r7, #7
    a30c:	1c22      	adds	r2, r4, #0
    a30e:	701a      	strb	r2, [r3, #0]
    a310:	1dbb      	adds	r3, r7, #6
    a312:	1c02      	adds	r2, r0, #0
    a314:	701a      	strb	r2, [r3, #0]
    a316:	1d7b      	adds	r3, r7, #5
    a318:	1c0a      	adds	r2, r1, #0
    a31a:	701a      	strb	r2, [r3, #0]
    a31c:	4c18      	ldr	r4, [pc, #96]	; (a380 <sd_mmc_spi_select_device+0x84>)
    a31e:	447c      	add	r4, pc
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a320:	4b18      	ldr	r3, [pc, #96]	; (a384 <sd_mmc_spi_select_device+0x88>)
    a322:	447b      	add	r3, pc
    a324:	2200      	movs	r2, #0
    a326:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    a328:	683b      	ldr	r3, [r7, #0]
    a32a:	4a17      	ldr	r2, [pc, #92]	; (a388 <sd_mmc_spi_select_device+0x8c>)
    a32c:	4293      	cmp	r3, r2
    a32e:	d907      	bls.n	a340 <sd_mmc_spi_select_device+0x44>
		clock = SD_MMC_SPI_MAX_CLOCK;
    a330:	4b15      	ldr	r3, [pc, #84]	; (a388 <sd_mmc_spi_select_device+0x8c>)
    a332:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a334:	e004      	b.n	a340 <sd_mmc_spi_select_device+0x44>
		clock -= clock / 8;
    a336:	683b      	ldr	r3, [r7, #0]
    a338:	08db      	lsrs	r3, r3, #3
    a33a:	683a      	ldr	r2, [r7, #0]
    a33c:	1ad3      	subs	r3, r2, r3
    a33e:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a340:	683b      	ldr	r3, [r7, #0]
    a342:	4a12      	ldr	r2, [pc, #72]	; (a38c <sd_mmc_spi_select_device+0x90>)
    a344:	447a      	add	r2, pc
    a346:	0019      	movs	r1, r3
    a348:	0010      	movs	r0, r2
    a34a:	4b11      	ldr	r3, [pc, #68]	; (a390 <sd_mmc_spi_select_device+0x94>)
    a34c:	58e3      	ldr	r3, [r4, r3]
    a34e:	4798      	blx	r3
    a350:	0003      	movs	r3, r0
    a352:	2b17      	cmp	r3, #23
    a354:	d0ef      	beq.n	a336 <sd_mmc_spi_select_device+0x3a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    a356:	1dfb      	adds	r3, r7, #7
    a358:	781a      	ldrb	r2, [r3, #0]
    a35a:	0013      	movs	r3, r2
    a35c:	005b      	lsls	r3, r3, #1
    a35e:	189b      	adds	r3, r3, r2
    a360:	4a0c      	ldr	r2, [pc, #48]	; (a394 <sd_mmc_spi_select_device+0x98>)
    a362:	447a      	add	r2, pc
    a364:	189b      	adds	r3, r3, r2
    a366:	4a0c      	ldr	r2, [pc, #48]	; (a398 <sd_mmc_spi_select_device+0x9c>)
    a368:	447a      	add	r2, pc
    a36a:	0010      	movs	r0, r2
    a36c:	2201      	movs	r2, #1
    a36e:	0019      	movs	r1, r3
    a370:	4b0a      	ldr	r3, [pc, #40]	; (a39c <sd_mmc_spi_select_device+0xa0>)
    a372:	58e3      	ldr	r3, [r4, r3]
    a374:	4798      	blx	r3
}
    a376:	46c0      	nop			; (mov r8, r8)
    a378:	46bd      	mov	sp, r7
    a37a:	b003      	add	sp, #12
    a37c:	bd90      	pop	{r4, r7, pc}
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	00007b42 	.word	0x00007b42
    a384:	1fff6269 	.word	0x1fff6269
    a388:	003d0900 	.word	0x003d0900
    a38c:	1fff6204 	.word	0x1fff6204
    a390:	00000268 	.word	0x00000268
    a394:	1fff6222 	.word	0x1fff6222
    a398:	1fff61e0 	.word	0x1fff61e0
    a39c:	00000004 	.word	0x00000004

0000a3a0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    a3a0:	b590      	push	{r4, r7, lr}
    a3a2:	b083      	sub	sp, #12
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	0002      	movs	r2, r0
    a3a8:	1dfb      	adds	r3, r7, #7
    a3aa:	701a      	strb	r2, [r3, #0]
    a3ac:	4c0c      	ldr	r4, [pc, #48]	; (a3e0 <sd_mmc_spi_deselect_device+0x40>)
    a3ae:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a3b0:	4b0c      	ldr	r3, [pc, #48]	; (a3e4 <sd_mmc_spi_deselect_device+0x44>)
    a3b2:	447b      	add	r3, pc
    a3b4:	2200      	movs	r2, #0
    a3b6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    a3b8:	1dfb      	adds	r3, r7, #7
    a3ba:	781a      	ldrb	r2, [r3, #0]
    a3bc:	0013      	movs	r3, r2
    a3be:	005b      	lsls	r3, r3, #1
    a3c0:	189b      	adds	r3, r3, r2
    a3c2:	4a09      	ldr	r2, [pc, #36]	; (a3e8 <sd_mmc_spi_deselect_device+0x48>)
    a3c4:	447a      	add	r2, pc
    a3c6:	189b      	adds	r3, r3, r2
    a3c8:	4a08      	ldr	r2, [pc, #32]	; (a3ec <sd_mmc_spi_deselect_device+0x4c>)
    a3ca:	447a      	add	r2, pc
    a3cc:	0010      	movs	r0, r2
    a3ce:	2200      	movs	r2, #0
    a3d0:	0019      	movs	r1, r3
    a3d2:	4b07      	ldr	r3, [pc, #28]	; (a3f0 <sd_mmc_spi_deselect_device+0x50>)
    a3d4:	58e3      	ldr	r3, [r4, r3]
    a3d6:	4798      	blx	r3
}
    a3d8:	46c0      	nop			; (mov r8, r8)
    a3da:	46bd      	mov	sp, r7
    a3dc:	b003      	add	sp, #12
    a3de:	bd90      	pop	{r4, r7, pc}
    a3e0:	00007ab2 	.word	0x00007ab2
    a3e4:	1fff61d9 	.word	0x1fff61d9
    a3e8:	1fff61c0 	.word	0x1fff61c0
    a3ec:	1fff617e 	.word	0x1fff617e
    a3f0:	00000004 	.word	0x00000004

0000a3f4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    a3f4:	b590      	push	{r4, r7, lr}
    a3f6:	b083      	sub	sp, #12
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	4c11      	ldr	r4, [pc, #68]	; (a440 <sd_mmc_spi_send_clock+0x4c>)
    a3fc:	447c      	add	r4, pc
	uint8_t i;
	uint8_t dummy = 0xFF;
    a3fe:	1dbb      	adds	r3, r7, #6
    a400:	22ff      	movs	r2, #255	; 0xff
    a402:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a404:	4b0f      	ldr	r3, [pc, #60]	; (a444 <sd_mmc_spi_send_clock+0x50>)
    a406:	447b      	add	r3, pc
    a408:	2200      	movs	r2, #0
    a40a:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    a40c:	1dfb      	adds	r3, r7, #7
    a40e:	2200      	movs	r2, #0
    a410:	701a      	strb	r2, [r3, #0]
    a412:	e00d      	b.n	a430 <sd_mmc_spi_send_clock+0x3c>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    a414:	1dbb      	adds	r3, r7, #6
    a416:	4a0c      	ldr	r2, [pc, #48]	; (a448 <sd_mmc_spi_send_clock+0x54>)
    a418:	447a      	add	r2, pc
    a41a:	0010      	movs	r0, r2
    a41c:	2201      	movs	r2, #1
    a41e:	0019      	movs	r1, r3
    a420:	4b0a      	ldr	r3, [pc, #40]	; (a44c <sd_mmc_spi_send_clock+0x58>)
    a422:	58e3      	ldr	r3, [r4, r3]
    a424:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    a426:	1dfb      	adds	r3, r7, #7
    a428:	781a      	ldrb	r2, [r3, #0]
    a42a:	1dfb      	adds	r3, r7, #7
    a42c:	3201      	adds	r2, #1
    a42e:	701a      	strb	r2, [r3, #0]
    a430:	1dfb      	adds	r3, r7, #7
    a432:	781b      	ldrb	r3, [r3, #0]
    a434:	2b09      	cmp	r3, #9
    a436:	d9ed      	bls.n	a414 <sd_mmc_spi_send_clock+0x20>
	}
}
    a438:	46c0      	nop			; (mov r8, r8)
    a43a:	46bd      	mov	sp, r7
    a43c:	b003      	add	sp, #12
    a43e:	bd90      	pop	{r4, r7, pc}
    a440:	00007a64 	.word	0x00007a64
    a444:	1fff6185 	.word	0x1fff6185
    a448:	1fff6130 	.word	0x1fff6130
    a44c:	000002d4 	.word	0x000002d4

0000a450 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    a450:	b5b0      	push	{r4, r5, r7, lr}
    a452:	b084      	sub	sp, #16
    a454:	af02      	add	r7, sp, #8
    a456:	6078      	str	r0, [r7, #4]
    a458:	6039      	str	r1, [r7, #0]
    a45a:	4d08      	ldr	r5, [pc, #32]	; (a47c <sd_mmc_spi_send_cmd+0x2c>)
    a45c:	447d      	add	r5, pc
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    a45e:	6839      	ldr	r1, [r7, #0]
    a460:	6878      	ldr	r0, [r7, #4]
    a462:	2300      	movs	r3, #0
    a464:	9300      	str	r3, [sp, #0]
    a466:	2300      	movs	r3, #0
    a468:	2200      	movs	r2, #0
    a46a:	4c05      	ldr	r4, [pc, #20]	; (a480 <sd_mmc_spi_send_cmd+0x30>)
    a46c:	592c      	ldr	r4, [r5, r4]
    a46e:	47a0      	blx	r4
    a470:	0003      	movs	r3, r0
}
    a472:	0018      	movs	r0, r3
    a474:	46bd      	mov	sp, r7
    a476:	b002      	add	sp, #8
    a478:	bdb0      	pop	{r4, r5, r7, pc}
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	00007a04 	.word	0x00007a04
    a480:	00000130 	.word	0x00000130

0000a484 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    a484:	b5b0      	push	{r4, r5, r7, lr}
    a486:	b088      	sub	sp, #32
    a488:	af00      	add	r7, sp, #0
    a48a:	60f8      	str	r0, [r7, #12]
    a48c:	60b9      	str	r1, [r7, #8]
    a48e:	0019      	movs	r1, r3
    a490:	1dbb      	adds	r3, r7, #6
    a492:	801a      	strh	r2, [r3, #0]
    a494:	1d3b      	adds	r3, r7, #4
    a496:	1c0a      	adds	r2, r1, #0
    a498:	801a      	strh	r2, [r3, #0]
    a49a:	4c8a      	ldr	r4, [pc, #552]	; (a6c4 <sd_mmc_spi_adtc_start+0x240>)
    a49c:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    a49e:	231b      	movs	r3, #27
    a4a0:	18fb      	adds	r3, r7, r3
    a4a2:	22ff      	movs	r2, #255	; 0xff
    a4a4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    a4a6:	231c      	movs	r3, #28
    a4a8:	18fb      	adds	r3, r7, r3
    a4aa:	22ff      	movs	r2, #255	; 0xff
    a4ac:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a4ae:	4b86      	ldr	r3, [pc, #536]	; (a6c8 <sd_mmc_spi_adtc_start+0x244>)
    a4b0:	447b      	add	r3, pc
    a4b2:	2200      	movs	r2, #0
    a4b4:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a4b6:	68fb      	ldr	r3, [r7, #12]
    a4b8:	b2db      	uxtb	r3, r3
    a4ba:	223f      	movs	r2, #63	; 0x3f
    a4bc:	4013      	ands	r3, r2
    a4be:	b2db      	uxtb	r3, r3
    a4c0:	2240      	movs	r2, #64	; 0x40
    a4c2:	4313      	orrs	r3, r2
    a4c4:	b2da      	uxtb	r2, r3
    a4c6:	2314      	movs	r3, #20
    a4c8:	18fb      	adds	r3, r7, r3
    a4ca:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    a4cc:	68bb      	ldr	r3, [r7, #8]
    a4ce:	0e1b      	lsrs	r3, r3, #24
    a4d0:	b2da      	uxtb	r2, r3
    a4d2:	2314      	movs	r3, #20
    a4d4:	18fb      	adds	r3, r7, r3
    a4d6:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    a4d8:	68bb      	ldr	r3, [r7, #8]
    a4da:	0c1b      	lsrs	r3, r3, #16
    a4dc:	b2da      	uxtb	r2, r3
    a4de:	2314      	movs	r3, #20
    a4e0:	18fb      	adds	r3, r7, r3
    a4e2:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    a4e4:	68bb      	ldr	r3, [r7, #8]
    a4e6:	0a1b      	lsrs	r3, r3, #8
    a4e8:	b2da      	uxtb	r2, r3
    a4ea:	2314      	movs	r3, #20
    a4ec:	18fb      	adds	r3, r7, r3
    a4ee:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    a4f0:	68bb      	ldr	r3, [r7, #8]
    a4f2:	b2da      	uxtb	r2, r3
    a4f4:	2314      	movs	r3, #20
    a4f6:	18fb      	adds	r3, r7, r3
    a4f8:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    a4fa:	2314      	movs	r3, #20
    a4fc:	18fb      	adds	r3, r7, r3
    a4fe:	2105      	movs	r1, #5
    a500:	0018      	movs	r0, r3
    a502:	4b72      	ldr	r3, [pc, #456]	; (a6cc <sd_mmc_spi_adtc_start+0x248>)
    a504:	447b      	add	r3, pc
    a506:	4798      	blx	r3
    a508:	0003      	movs	r3, r0
    a50a:	001a      	movs	r2, r3
    a50c:	2314      	movs	r3, #20
    a50e:	18fb      	adds	r3, r7, r3
    a510:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    a512:	231b      	movs	r3, #27
    a514:	18fb      	adds	r3, r7, r3
    a516:	4a6e      	ldr	r2, [pc, #440]	; (a6d0 <sd_mmc_spi_adtc_start+0x24c>)
    a518:	447a      	add	r2, pc
    a51a:	0010      	movs	r0, r2
    a51c:	2201      	movs	r2, #1
    a51e:	0019      	movs	r1, r3
    a520:	4b6c      	ldr	r3, [pc, #432]	; (a6d4 <sd_mmc_spi_adtc_start+0x250>)
    a522:	58e3      	ldr	r3, [r4, r3]
    a524:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    a526:	2314      	movs	r3, #20
    a528:	18fb      	adds	r3, r7, r3
    a52a:	4a6b      	ldr	r2, [pc, #428]	; (a6d8 <sd_mmc_spi_adtc_start+0x254>)
    a52c:	447a      	add	r2, pc
    a52e:	0010      	movs	r0, r2
    a530:	2206      	movs	r2, #6
    a532:	0019      	movs	r1, r3
    a534:	4b67      	ldr	r3, [pc, #412]	; (a6d4 <sd_mmc_spi_adtc_start+0x250>)
    a536:	58e3      	ldr	r3, [r4, r3]
    a538:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    a53a:	2313      	movs	r3, #19
    a53c:	18fb      	adds	r3, r7, r3
    a53e:	22ff      	movs	r2, #255	; 0xff
    a540:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    a542:	231c      	movs	r3, #28
    a544:	18fb      	adds	r3, r7, r3
    a546:	881b      	ldrh	r3, [r3, #0]
    a548:	2213      	movs	r2, #19
    a54a:	18b9      	adds	r1, r7, r2
    a54c:	4a63      	ldr	r2, [pc, #396]	; (a6dc <sd_mmc_spi_adtc_start+0x258>)
    a54e:	447a      	add	r2, pc
    a550:	0010      	movs	r0, r2
    a552:	2201      	movs	r2, #1
    a554:	4d62      	ldr	r5, [pc, #392]	; (a6e0 <sd_mmc_spi_adtc_start+0x25c>)
    a556:	5965      	ldr	r5, [r4, r5]
    a558:	47a8      	blx	r5
			dummy2);
	ncr_timeout = 7;
    a55a:	231f      	movs	r3, #31
    a55c:	18fb      	adds	r3, r7, r3
    a55e:	2207      	movs	r2, #7
    a560:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    a562:	231c      	movs	r3, #28
    a564:	18fb      	adds	r3, r7, r3
    a566:	881b      	ldrh	r3, [r3, #0]
    a568:	2213      	movs	r2, #19
    a56a:	18b9      	adds	r1, r7, r2
    a56c:	4a5d      	ldr	r2, [pc, #372]	; (a6e4 <sd_mmc_spi_adtc_start+0x260>)
    a56e:	447a      	add	r2, pc
    a570:	0010      	movs	r0, r2
    a572:	2201      	movs	r2, #1
    a574:	4d5a      	ldr	r5, [pc, #360]	; (a6e0 <sd_mmc_spi_adtc_start+0x25c>)
    a576:	5965      	ldr	r5, [r4, r5]
    a578:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    a57a:	2313      	movs	r3, #19
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	b25b      	sxtb	r3, r3
    a582:	2b00      	cmp	r3, #0
    a584:	da11      	bge.n	a5aa <sd_mmc_spi_adtc_start+0x126>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    a586:	231f      	movs	r3, #31
    a588:	18fb      	adds	r3, r7, r3
    a58a:	221f      	movs	r2, #31
    a58c:	18ba      	adds	r2, r7, r2
    a58e:	7812      	ldrb	r2, [r2, #0]
    a590:	3a01      	subs	r2, #1
    a592:	701a      	strb	r2, [r3, #0]
    a594:	231f      	movs	r3, #31
    a596:	18fb      	adds	r3, r7, r3
    a598:	781b      	ldrb	r3, [r3, #0]
    a59a:	2b00      	cmp	r3, #0
    a59c:	d1e1      	bne.n	a562 <sd_mmc_spi_adtc_start+0xde>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    a59e:	4b52      	ldr	r3, [pc, #328]	; (a6e8 <sd_mmc_spi_adtc_start+0x264>)
    a5a0:	447b      	add	r3, pc
    a5a2:	2202      	movs	r2, #2
    a5a4:	701a      	strb	r2, [r3, #0]
			return false;
    a5a6:	2300      	movs	r3, #0
    a5a8:	e088      	b.n	a6bc <sd_mmc_spi_adtc_start+0x238>
			break;
    a5aa:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    a5ac:	2313      	movs	r3, #19
    a5ae:	18fb      	adds	r3, r7, r3
    a5b0:	781b      	ldrb	r3, [r3, #0]
    a5b2:	001a      	movs	r2, r3
    a5b4:	4b4d      	ldr	r3, [pc, #308]	; (a6ec <sd_mmc_spi_adtc_start+0x268>)
    a5b6:	447b      	add	r3, pc
    a5b8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    a5ba:	2313      	movs	r3, #19
    a5bc:	18fb      	adds	r3, r7, r3
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	001a      	movs	r2, r3
    a5c2:	2308      	movs	r3, #8
    a5c4:	4013      	ands	r3, r2
    a5c6:	d005      	beq.n	a5d4 <sd_mmc_spi_adtc_start+0x150>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    a5c8:	4b49      	ldr	r3, [pc, #292]	; (a6f0 <sd_mmc_spi_adtc_start+0x26c>)
    a5ca:	447b      	add	r3, pc
    a5cc:	2206      	movs	r2, #6
    a5ce:	701a      	strb	r2, [r3, #0]
		return false;
    a5d0:	2300      	movs	r3, #0
    a5d2:	e073      	b.n	a6bc <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    a5d4:	2313      	movs	r3, #19
    a5d6:	18fb      	adds	r3, r7, r3
    a5d8:	781b      	ldrb	r3, [r3, #0]
    a5da:	001a      	movs	r2, r3
    a5dc:	2304      	movs	r3, #4
    a5de:	4013      	ands	r3, r2
    a5e0:	d005      	beq.n	a5ee <sd_mmc_spi_adtc_start+0x16a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    a5e2:	4b44      	ldr	r3, [pc, #272]	; (a6f4 <sd_mmc_spi_adtc_start+0x270>)
    a5e4:	447b      	add	r3, pc
    a5e6:	2209      	movs	r2, #9
    a5e8:	701a      	strb	r2, [r3, #0]
		return false;
    a5ea:	2300      	movs	r3, #0
    a5ec:	e066      	b.n	a6bc <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & ~R1_SPI_IDLE) {
    a5ee:	2313      	movs	r3, #19
    a5f0:	18fb      	adds	r3, r7, r3
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	001a      	movs	r2, r3
    a5f6:	2301      	movs	r3, #1
    a5f8:	439a      	bics	r2, r3
    a5fa:	1e13      	subs	r3, r2, #0
    a5fc:	d005      	beq.n	a60a <sd_mmc_spi_adtc_start+0x186>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a5fe:	4b3e      	ldr	r3, [pc, #248]	; (a6f8 <sd_mmc_spi_adtc_start+0x274>)
    a600:	447b      	add	r3, pc
    a602:	2201      	movs	r2, #1
    a604:	701a      	strb	r2, [r3, #0]
		return false;
    a606:	2300      	movs	r3, #0
    a608:	e058      	b.n	a6bc <sd_mmc_spi_adtc_start+0x238>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    a60a:	68fa      	ldr	r2, [r7, #12]
    a60c:	2380      	movs	r3, #128	; 0x80
    a60e:	019b      	lsls	r3, r3, #6
    a610:	4013      	ands	r3, r2
    a612:	d00f      	beq.n	a634 <sd_mmc_spi_adtc_start+0x1b0>
		if (!sd_mmc_spi_wait_busy()) {
    a614:	4b39      	ldr	r3, [pc, #228]	; (a6fc <sd_mmc_spi_adtc_start+0x278>)
    a616:	447b      	add	r3, pc
    a618:	4798      	blx	r3
    a61a:	0003      	movs	r3, r0
    a61c:	001a      	movs	r2, r3
    a61e:	2301      	movs	r3, #1
    a620:	4053      	eors	r3, r2
    a622:	b2db      	uxtb	r3, r3
    a624:	2b00      	cmp	r3, #0
    a626:	d005      	beq.n	a634 <sd_mmc_spi_adtc_start+0x1b0>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    a628:	4b35      	ldr	r3, [pc, #212]	; (a700 <sd_mmc_spi_adtc_start+0x27c>)
    a62a:	447b      	add	r3, pc
    a62c:	2203      	movs	r2, #3
    a62e:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    a630:	2300      	movs	r3, #0
    a632:	e043      	b.n	a6bc <sd_mmc_spi_adtc_start+0x238>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    a634:	68fa      	ldr	r2, [r7, #12]
    a636:	2380      	movs	r3, #128	; 0x80
    a638:	009b      	lsls	r3, r3, #2
    a63a:	4013      	ands	r3, r2
    a63c:	d016      	beq.n	a66c <sd_mmc_spi_adtc_start+0x1e8>
		sd_mmc_spi_response_32 = 0;
    a63e:	4b31      	ldr	r3, [pc, #196]	; (a704 <sd_mmc_spi_adtc_start+0x280>)
    a640:	447b      	add	r3, pc
    a642:	2200      	movs	r2, #0
    a644:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    a646:	231c      	movs	r3, #28
    a648:	18fb      	adds	r3, r7, r3
    a64a:	881b      	ldrh	r3, [r3, #0]
    a64c:	4a2e      	ldr	r2, [pc, #184]	; (a708 <sd_mmc_spi_adtc_start+0x284>)
    a64e:	447a      	add	r2, pc
    a650:	0011      	movs	r1, r2
    a652:	4a2e      	ldr	r2, [pc, #184]	; (a70c <sd_mmc_spi_adtc_start+0x288>)
    a654:	447a      	add	r2, pc
    a656:	0010      	movs	r0, r2
    a658:	2201      	movs	r2, #1
    a65a:	4d21      	ldr	r5, [pc, #132]	; (a6e0 <sd_mmc_spi_adtc_start+0x25c>)
    a65c:	5965      	ldr	r5, [r4, r5]
    a65e:	47a8      	blx	r5
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    a660:	4b2b      	ldr	r3, [pc, #172]	; (a710 <sd_mmc_spi_adtc_start+0x28c>)
    a662:	447b      	add	r3, pc
    a664:	681a      	ldr	r2, [r3, #0]
    a666:	4b2b      	ldr	r3, [pc, #172]	; (a714 <sd_mmc_spi_adtc_start+0x290>)
    a668:	447b      	add	r3, pc
    a66a:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    a66c:	68fa      	ldr	r2, [r7, #12]
    a66e:	2380      	movs	r3, #128	; 0x80
    a670:	00db      	lsls	r3, r3, #3
    a672:	4013      	ands	r3, r2
    a674:	d013      	beq.n	a69e <sd_mmc_spi_adtc_start+0x21a>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    a676:	231c      	movs	r3, #28
    a678:	18fb      	adds	r3, r7, r3
    a67a:	881b      	ldrh	r3, [r3, #0]
    a67c:	4a26      	ldr	r2, [pc, #152]	; (a718 <sd_mmc_spi_adtc_start+0x294>)
    a67e:	447a      	add	r2, pc
    a680:	0011      	movs	r1, r2
    a682:	4a26      	ldr	r2, [pc, #152]	; (a71c <sd_mmc_spi_adtc_start+0x298>)
    a684:	447a      	add	r2, pc
    a686:	0010      	movs	r0, r2
    a688:	2204      	movs	r2, #4
    a68a:	4d15      	ldr	r5, [pc, #84]	; (a6e0 <sd_mmc_spi_adtc_start+0x25c>)
    a68c:	5964      	ldr	r4, [r4, r5]
    a68e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    a690:	4b23      	ldr	r3, [pc, #140]	; (a720 <sd_mmc_spi_adtc_start+0x29c>)
    a692:	447b      	add	r3, pc
    a694:	681b      	ldr	r3, [r3, #0]
    a696:	ba1a      	rev	r2, r3
    a698:	4b22      	ldr	r3, [pc, #136]	; (a724 <sd_mmc_spi_adtc_start+0x2a0>)
    a69a:	447b      	add	r3, pc
    a69c:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    a69e:	4b22      	ldr	r3, [pc, #136]	; (a728 <sd_mmc_spi_adtc_start+0x2a4>)
    a6a0:	447b      	add	r3, pc
    a6a2:	1dba      	adds	r2, r7, #6
    a6a4:	8812      	ldrh	r2, [r2, #0]
    a6a6:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    a6a8:	4b20      	ldr	r3, [pc, #128]	; (a72c <sd_mmc_spi_adtc_start+0x2a8>)
    a6aa:	447b      	add	r3, pc
    a6ac:	1d3a      	adds	r2, r7, #4
    a6ae:	8812      	ldrh	r2, [r2, #0]
    a6b0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    a6b2:	4b1f      	ldr	r3, [pc, #124]	; (a730 <sd_mmc_spi_adtc_start+0x2ac>)
    a6b4:	447b      	add	r3, pc
    a6b6:	2200      	movs	r2, #0
    a6b8:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    a6ba:	2301      	movs	r3, #1
}
    a6bc:	0018      	movs	r0, r3
    a6be:	46bd      	mov	sp, r7
    a6c0:	b008      	add	sp, #32
    a6c2:	bdb0      	pop	{r4, r5, r7, pc}
    a6c4:	000079c4 	.word	0x000079c4
    a6c8:	1fff60db 	.word	0x1fff60db
    a6cc:	fffff8ed 	.word	0xfffff8ed
    a6d0:	1fff6030 	.word	0x1fff6030
    a6d4:	000002d4 	.word	0x000002d4
    a6d8:	1fff601c 	.word	0x1fff601c
    a6dc:	1fff5ffa 	.word	0x1fff5ffa
    a6e0:	000001f0 	.word	0x000001f0
    a6e4:	1fff5fda 	.word	0x1fff5fda
    a6e8:	1fff5feb 	.word	0x1fff5feb
    a6ec:	1fff5fd6 	.word	0x1fff5fd6
    a6f0:	1fff5fc1 	.word	0x1fff5fc1
    a6f4:	1fff5fa7 	.word	0x1fff5fa7
    a6f8:	1fff5f8b 	.word	0x1fff5f8b
    a6fc:	fffff897 	.word	0xfffff897
    a700:	1fff5f61 	.word	0x1fff5f61
    a704:	1fff5f4c 	.word	0x1fff5f4c
    a708:	1fff5f3e 	.word	0x1fff5f3e
    a70c:	1fff5ef4 	.word	0x1fff5ef4
    a710:	1fff5f2a 	.word	0x1fff5f2a
    a714:	1fff5f24 	.word	0x1fff5f24
    a718:	1fff5f0e 	.word	0x1fff5f0e
    a71c:	1fff5ec4 	.word	0x1fff5ec4
    a720:	1fff5efa 	.word	0x1fff5efa
    a724:	1fff5ef2 	.word	0x1fff5ef2
    a728:	1fff5ef4 	.word	0x1fff5ef4
    a72c:	1fff5eec 	.word	0x1fff5eec
    a730:	1fff5edc 	.word	0x1fff5edc

0000a734 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    a734:	b580      	push	{r7, lr}
    a736:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    a738:	4b02      	ldr	r3, [pc, #8]	; (a744 <sd_mmc_spi_get_response+0x10>)
    a73a:	447b      	add	r3, pc
    a73c:	681b      	ldr	r3, [r3, #0]
}
    a73e:	0018      	movs	r0, r3
    a740:	46bd      	mov	sp, r7
    a742:	bd80      	pop	{r7, pc}
    a744:	1fff5e52 	.word	0x1fff5e52

0000a748 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    a748:	b5b0      	push	{r4, r5, r7, lr}
    a74a:	b084      	sub	sp, #16
    a74c:	af00      	add	r7, sp, #0
    a74e:	6078      	str	r0, [r7, #4]
    a750:	4c26      	ldr	r4, [pc, #152]	; (a7ec <sd_mmc_spi_read_word+0xa4>)
    a752:	447c      	add	r4, pc
	uint16_t dummy = 0xFF;
    a754:	230e      	movs	r3, #14
    a756:	18fb      	adds	r3, r7, r3
    a758:	22ff      	movs	r2, #255	; 0xff
    a75a:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a75c:	4b24      	ldr	r3, [pc, #144]	; (a7f0 <sd_mmc_spi_read_word+0xa8>)
    a75e:	447b      	add	r3, pc
    a760:	2200      	movs	r2, #0
    a762:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    a764:	4b23      	ldr	r3, [pc, #140]	; (a7f4 <sd_mmc_spi_read_word+0xac>)
    a766:	447b      	add	r3, pc
    a768:	681a      	ldr	r2, [r3, #0]
    a76a:	4b23      	ldr	r3, [pc, #140]	; (a7f8 <sd_mmc_spi_read_word+0xb0>)
    a76c:	447b      	add	r3, pc
    a76e:	881b      	ldrh	r3, [r3, #0]
    a770:	0019      	movs	r1, r3
    a772:	4b22      	ldr	r3, [pc, #136]	; (a7fc <sd_mmc_spi_read_word+0xb4>)
    a774:	58e3      	ldr	r3, [r4, r3]
    a776:	0010      	movs	r0, r2
    a778:	4798      	blx	r3
    a77a:	1e0b      	subs	r3, r1, #0
    a77c:	d10b      	bne.n	a796 <sd_mmc_spi_read_word+0x4e>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    a77e:	4b20      	ldr	r3, [pc, #128]	; (a800 <sd_mmc_spi_read_word+0xb8>)
    a780:	447b      	add	r3, pc
    a782:	4798      	blx	r3
    a784:	0003      	movs	r3, r0
    a786:	001a      	movs	r2, r3
    a788:	2301      	movs	r3, #1
    a78a:	4053      	eors	r3, r2
    a78c:	b2db      	uxtb	r3, r3
    a78e:	2b00      	cmp	r3, #0
    a790:	d001      	beq.n	a796 <sd_mmc_spi_read_word+0x4e>
			return false;
    a792:	2300      	movs	r3, #0
    a794:	e026      	b.n	a7e4 <sd_mmc_spi_read_word+0x9c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    a796:	230e      	movs	r3, #14
    a798:	18fb      	adds	r3, r7, r3
    a79a:	881b      	ldrh	r3, [r3, #0]
    a79c:	1d39      	adds	r1, r7, #4
    a79e:	4a19      	ldr	r2, [pc, #100]	; (a804 <sd_mmc_spi_read_word+0xbc>)
    a7a0:	447a      	add	r2, pc
    a7a2:	0010      	movs	r0, r2
    a7a4:	2204      	movs	r2, #4
    a7a6:	4d18      	ldr	r5, [pc, #96]	; (a808 <sd_mmc_spi_read_word+0xc0>)
    a7a8:	5965      	ldr	r5, [r4, r5]
    a7aa:	47a8      	blx	r5
			dummy);
	*value = le32_to_cpu(*value);
    a7ac:	687b      	ldr	r3, [r7, #4]
    a7ae:	687a      	ldr	r2, [r7, #4]
    a7b0:	6812      	ldr	r2, [r2, #0]
    a7b2:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    a7b4:	4b15      	ldr	r3, [pc, #84]	; (a80c <sd_mmc_spi_read_word+0xc4>)
    a7b6:	447b      	add	r3, pc
    a7b8:	681b      	ldr	r3, [r3, #0]
    a7ba:	1d1a      	adds	r2, r3, #4
    a7bc:	4b14      	ldr	r3, [pc, #80]	; (a810 <sd_mmc_spi_read_word+0xc8>)
    a7be:	447b      	add	r3, pc
    a7c0:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    a7c2:	4b14      	ldr	r3, [pc, #80]	; (a814 <sd_mmc_spi_read_word+0xcc>)
    a7c4:	447b      	add	r3, pc
    a7c6:	681a      	ldr	r2, [r3, #0]
    a7c8:	4b13      	ldr	r3, [pc, #76]	; (a818 <sd_mmc_spi_read_word+0xd0>)
    a7ca:	447b      	add	r3, pc
    a7cc:	881b      	ldrh	r3, [r3, #0]
    a7ce:	0019      	movs	r1, r3
    a7d0:	4b0a      	ldr	r3, [pc, #40]	; (a7fc <sd_mmc_spi_read_word+0xb4>)
    a7d2:	58e3      	ldr	r3, [r4, r3]
    a7d4:	0010      	movs	r0, r2
    a7d6:	4798      	blx	r3
    a7d8:	1e0b      	subs	r3, r1, #0
    a7da:	d102      	bne.n	a7e2 <sd_mmc_spi_read_word+0x9a>
		// End of block
		sd_mmc_spi_stop_read_block();
    a7dc:	4b0f      	ldr	r3, [pc, #60]	; (a81c <sd_mmc_spi_read_word+0xd4>)
    a7de:	447b      	add	r3, pc
    a7e0:	4798      	blx	r3
	}
	return true;
    a7e2:	2301      	movs	r3, #1
}
    a7e4:	0018      	movs	r0, r3
    a7e6:	46bd      	mov	sp, r7
    a7e8:	b004      	add	sp, #16
    a7ea:	bdb0      	pop	{r4, r5, r7, pc}
    a7ec:	0000770e 	.word	0x0000770e
    a7f0:	1fff5e2d 	.word	0x1fff5e2d
    a7f4:	1fff5e2a 	.word	0x1fff5e2a
    a7f8:	1fff5e28 	.word	0x1fff5e28
    a7fc:	00000270 	.word	0x00000270
    a800:	fffff7bd 	.word	0xfffff7bd
    a804:	1fff5da8 	.word	0x1fff5da8
    a808:	000001f0 	.word	0x000001f0
    a80c:	1fff5dda 	.word	0x1fff5dda
    a810:	1fff5dd2 	.word	0x1fff5dd2
    a814:	1fff5dcc 	.word	0x1fff5dcc
    a818:	1fff5dca 	.word	0x1fff5dca
    a81c:	fffff7ff 	.word	0xfffff7ff

0000a820 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    a820:	b5b0      	push	{r4, r5, r7, lr}
    a822:	b084      	sub	sp, #16
    a824:	af00      	add	r7, sp, #0
    a826:	6078      	str	r0, [r7, #4]
    a828:	000a      	movs	r2, r1
    a82a:	1cbb      	adds	r3, r7, #2
    a82c:	801a      	strh	r2, [r3, #0]
    a82e:	4c24      	ldr	r4, [pc, #144]	; (a8c0 <sd_mmc_spi_start_read_blocks+0xa0>)
    a830:	447c      	add	r4, pc
	uint32_t pos;
	uint16_t dummy = 0xFF;
    a832:	230a      	movs	r3, #10
    a834:	18fb      	adds	r3, r7, r3
    a836:	22ff      	movs	r2, #255	; 0xff
    a838:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a83a:	4b22      	ldr	r3, [pc, #136]	; (a8c4 <sd_mmc_spi_start_read_blocks+0xa4>)
    a83c:	447b      	add	r3, pc
    a83e:	2200      	movs	r2, #0
    a840:	701a      	strb	r2, [r3, #0]
	pos = 0;
    a842:	2300      	movs	r3, #0
    a844:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    a846:	e02e      	b.n	a8a6 <sd_mmc_spi_start_read_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    a848:	4b1f      	ldr	r3, [pc, #124]	; (a8c8 <sd_mmc_spi_start_read_blocks+0xa8>)
    a84a:	447b      	add	r3, pc
    a84c:	4798      	blx	r3
    a84e:	0003      	movs	r3, r0
    a850:	001a      	movs	r2, r3
    a852:	2301      	movs	r3, #1
    a854:	4053      	eors	r3, r2
    a856:	b2db      	uxtb	r3, r3
    a858:	2b00      	cmp	r3, #0
    a85a:	d001      	beq.n	a860 <sd_mmc_spi_start_read_blocks+0x40>
			return false;
    a85c:	2300      	movs	r3, #0
    a85e:	e02a      	b.n	a8b6 <sd_mmc_spi_start_read_blocks+0x96>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    a860:	687a      	ldr	r2, [r7, #4]
    a862:	68fb      	ldr	r3, [r7, #12]
    a864:	18d1      	adds	r1, r2, r3
    a866:	4b19      	ldr	r3, [pc, #100]	; (a8cc <sd_mmc_spi_start_read_blocks+0xac>)
    a868:	447b      	add	r3, pc
    a86a:	881a      	ldrh	r2, [r3, #0]
    a86c:	230a      	movs	r3, #10
    a86e:	18fb      	adds	r3, r7, r3
    a870:	881b      	ldrh	r3, [r3, #0]
    a872:	4817      	ldr	r0, [pc, #92]	; (a8d0 <sd_mmc_spi_start_read_blocks+0xb0>)
    a874:	4478      	add	r0, pc
    a876:	4d17      	ldr	r5, [pc, #92]	; (a8d4 <sd_mmc_spi_start_read_blocks+0xb4>)
    a878:	5965      	ldr	r5, [r4, r5]
    a87a:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    a87c:	4b16      	ldr	r3, [pc, #88]	; (a8d8 <sd_mmc_spi_start_read_blocks+0xb8>)
    a87e:	447b      	add	r3, pc
    a880:	881b      	ldrh	r3, [r3, #0]
    a882:	001a      	movs	r2, r3
    a884:	68fb      	ldr	r3, [r7, #12]
    a886:	189b      	adds	r3, r3, r2
    a888:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    a88a:	4b14      	ldr	r3, [pc, #80]	; (a8dc <sd_mmc_spi_start_read_blocks+0xbc>)
    a88c:	447b      	add	r3, pc
    a88e:	881b      	ldrh	r3, [r3, #0]
    a890:	001a      	movs	r2, r3
    a892:	4b13      	ldr	r3, [pc, #76]	; (a8e0 <sd_mmc_spi_start_read_blocks+0xc0>)
    a894:	447b      	add	r3, pc
    a896:	681b      	ldr	r3, [r3, #0]
    a898:	18d2      	adds	r2, r2, r3
    a89a:	4b12      	ldr	r3, [pc, #72]	; (a8e4 <sd_mmc_spi_start_read_blocks+0xc4>)
    a89c:	447b      	add	r3, pc
    a89e:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    a8a0:	4b11      	ldr	r3, [pc, #68]	; (a8e8 <sd_mmc_spi_start_read_blocks+0xc8>)
    a8a2:	447b      	add	r3, pc
    a8a4:	4798      	blx	r3
	while (nb_block--) {
    a8a6:	1cbb      	adds	r3, r7, #2
    a8a8:	881b      	ldrh	r3, [r3, #0]
    a8aa:	1cba      	adds	r2, r7, #2
    a8ac:	1e59      	subs	r1, r3, #1
    a8ae:	8011      	strh	r1, [r2, #0]
    a8b0:	2b00      	cmp	r3, #0
    a8b2:	d1c9      	bne.n	a848 <sd_mmc_spi_start_read_blocks+0x28>
	}
	return true;
    a8b4:	2301      	movs	r3, #1
}
    a8b6:	0018      	movs	r0, r3
    a8b8:	46bd      	mov	sp, r7
    a8ba:	b004      	add	sp, #16
    a8bc:	bdb0      	pop	{r4, r5, r7, pc}
    a8be:	46c0      	nop			; (mov r8, r8)
    a8c0:	00007630 	.word	0x00007630
    a8c4:	1fff5d4f 	.word	0x1fff5d4f
    a8c8:	fffff6f3 	.word	0xfffff6f3
    a8cc:	1fff5d2c 	.word	0x1fff5d2c
    a8d0:	1fff5cd4 	.word	0x1fff5cd4
    a8d4:	000001f0 	.word	0x000001f0
    a8d8:	1fff5d16 	.word	0x1fff5d16
    a8dc:	1fff5d08 	.word	0x1fff5d08
    a8e0:	1fff5cfc 	.word	0x1fff5cfc
    a8e4:	1fff5cf4 	.word	0x1fff5cf4
    a8e8:	fffff73b 	.word	0xfffff73b

0000a8ec <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    a8ec:	b580      	push	{r7, lr}
    a8ee:	af00      	add	r7, sp, #0
	return true;
    a8f0:	2301      	movs	r3, #1
}
    a8f2:	0018      	movs	r0, r3
    a8f4:	46bd      	mov	sp, r7
    a8f6:	bd80      	pop	{r7, pc}

0000a8f8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    a8f8:	b590      	push	{r4, r7, lr}
    a8fa:	b085      	sub	sp, #20
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	6078      	str	r0, [r7, #4]
    a900:	000a      	movs	r2, r1
    a902:	1cbb      	adds	r3, r7, #2
    a904:	801a      	strh	r2, [r3, #0]
    a906:	4c2b      	ldr	r4, [pc, #172]	; (a9b4 <sd_mmc_spi_start_write_blocks+0xbc>)
    a908:	447c      	add	r4, pc
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a90a:	4b2b      	ldr	r3, [pc, #172]	; (a9b8 <sd_mmc_spi_start_write_blocks+0xc0>)
    a90c:	447b      	add	r3, pc
    a90e:	2200      	movs	r2, #0
    a910:	701a      	strb	r2, [r3, #0]
	pos = 0;
    a912:	2300      	movs	r3, #0
    a914:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    a916:	e041      	b.n	a99c <sd_mmc_spi_start_write_blocks+0xa4>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    a918:	4b28      	ldr	r3, [pc, #160]	; (a9bc <sd_mmc_spi_start_write_blocks+0xc4>)
    a91a:	447b      	add	r3, pc
    a91c:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    a91e:	687a      	ldr	r2, [r7, #4]
    a920:	68fb      	ldr	r3, [r7, #12]
    a922:	18d1      	adds	r1, r2, r3
    a924:	4b26      	ldr	r3, [pc, #152]	; (a9c0 <sd_mmc_spi_start_write_blocks+0xc8>)
    a926:	447b      	add	r3, pc
    a928:	881b      	ldrh	r3, [r3, #0]
    a92a:	4a26      	ldr	r2, [pc, #152]	; (a9c4 <sd_mmc_spi_start_write_blocks+0xcc>)
    a92c:	447a      	add	r2, pc
    a92e:	0010      	movs	r0, r2
    a930:	001a      	movs	r2, r3
    a932:	4b25      	ldr	r3, [pc, #148]	; (a9c8 <sd_mmc_spi_start_write_blocks+0xd0>)
    a934:	58e3      	ldr	r3, [r4, r3]
    a936:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    a938:	4b24      	ldr	r3, [pc, #144]	; (a9cc <sd_mmc_spi_start_write_blocks+0xd4>)
    a93a:	447b      	add	r3, pc
    a93c:	881b      	ldrh	r3, [r3, #0]
    a93e:	001a      	movs	r2, r3
    a940:	68fb      	ldr	r3, [r7, #12]
    a942:	189b      	adds	r3, r3, r2
    a944:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    a946:	4b22      	ldr	r3, [pc, #136]	; (a9d0 <sd_mmc_spi_start_write_blocks+0xd8>)
    a948:	447b      	add	r3, pc
    a94a:	881b      	ldrh	r3, [r3, #0]
    a94c:	001a      	movs	r2, r3
    a94e:	4b21      	ldr	r3, [pc, #132]	; (a9d4 <sd_mmc_spi_start_write_blocks+0xdc>)
    a950:	447b      	add	r3, pc
    a952:	681b      	ldr	r3, [r3, #0]
    a954:	18d2      	adds	r2, r2, r3
    a956:	4b20      	ldr	r3, [pc, #128]	; (a9d8 <sd_mmc_spi_start_write_blocks+0xe0>)
    a958:	447b      	add	r3, pc
    a95a:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    a95c:	4b1f      	ldr	r3, [pc, #124]	; (a9dc <sd_mmc_spi_start_write_blocks+0xe4>)
    a95e:	447b      	add	r3, pc
    a960:	4798      	blx	r3
    a962:	0003      	movs	r3, r0
    a964:	001a      	movs	r2, r3
    a966:	2301      	movs	r3, #1
    a968:	4053      	eors	r3, r2
    a96a:	b2db      	uxtb	r3, r3
    a96c:	2b00      	cmp	r3, #0
    a96e:	d001      	beq.n	a974 <sd_mmc_spi_start_write_blocks+0x7c>
			return false;
    a970:	2300      	movs	r3, #0
    a972:	e01b      	b.n	a9ac <sd_mmc_spi_start_write_blocks+0xb4>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    a974:	1cbb      	adds	r3, r7, #2
    a976:	881b      	ldrh	r3, [r3, #0]
    a978:	2b00      	cmp	r3, #0
    a97a:	d00f      	beq.n	a99c <sd_mmc_spi_start_write_blocks+0xa4>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    a97c:	4b18      	ldr	r3, [pc, #96]	; (a9e0 <sd_mmc_spi_start_write_blocks+0xe8>)
    a97e:	447b      	add	r3, pc
    a980:	4798      	blx	r3
    a982:	0003      	movs	r3, r0
    a984:	001a      	movs	r2, r3
    a986:	2301      	movs	r3, #1
    a988:	4053      	eors	r3, r2
    a98a:	b2db      	uxtb	r3, r3
    a98c:	2b00      	cmp	r3, #0
    a98e:	d005      	beq.n	a99c <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a990:	4b14      	ldr	r3, [pc, #80]	; (a9e4 <sd_mmc_spi_start_write_blocks+0xec>)
    a992:	447b      	add	r3, pc
    a994:	2205      	movs	r2, #5
    a996:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    a998:	2300      	movs	r3, #0
    a99a:	e007      	b.n	a9ac <sd_mmc_spi_start_write_blocks+0xb4>
	while (nb_block--) {
    a99c:	1cbb      	adds	r3, r7, #2
    a99e:	881b      	ldrh	r3, [r3, #0]
    a9a0:	1cba      	adds	r2, r7, #2
    a9a2:	1e59      	subs	r1, r3, #1
    a9a4:	8011      	strh	r1, [r2, #0]
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d1b6      	bne.n	a918 <sd_mmc_spi_start_write_blocks+0x20>
			}
		}
	}
	return true;
    a9aa:	2301      	movs	r3, #1
}
    a9ac:	0018      	movs	r0, r3
    a9ae:	46bd      	mov	sp, r7
    a9b0:	b005      	add	sp, #20
    a9b2:	bd90      	pop	{r4, r7, pc}
    a9b4:	00007558 	.word	0x00007558
    a9b8:	1fff5c7f 	.word	0x1fff5c7f
    a9bc:	fffff6fb 	.word	0xfffff6fb
    a9c0:	1fff5c6e 	.word	0x1fff5c6e
    a9c4:	1fff5c1c 	.word	0x1fff5c1c
    a9c8:	000002d4 	.word	0x000002d4
    a9cc:	1fff5c5a 	.word	0x1fff5c5a
    a9d0:	1fff5c4c 	.word	0x1fff5c4c
    a9d4:	1fff5c40 	.word	0x1fff5c40
    a9d8:	1fff5c38 	.word	0x1fff5c38
    a9dc:	fffff71f 	.word	0xfffff71f
    a9e0:	fffff52f 	.word	0xfffff52f
    a9e4:	1fff5bf9 	.word	0x1fff5bf9

0000a9e8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    a9e8:	b580      	push	{r7, lr}
    a9ea:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    a9ec:	4b0b      	ldr	r3, [pc, #44]	; (aa1c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    a9ee:	447b      	add	r3, pc
    a9f0:	4798      	blx	r3
    a9f2:	0003      	movs	r3, r0
    a9f4:	001a      	movs	r2, r3
    a9f6:	2301      	movs	r3, #1
    a9f8:	4053      	eors	r3, r2
    a9fa:	b2db      	uxtb	r3, r3
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d005      	beq.n	aa0c <sd_mmc_spi_wait_end_of_write_blocks+0x24>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    aa00:	4b07      	ldr	r3, [pc, #28]	; (aa20 <sd_mmc_spi_wait_end_of_write_blocks+0x38>)
    aa02:	447b      	add	r3, pc
    aa04:	2205      	movs	r2, #5
    aa06:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    aa08:	2300      	movs	r3, #0
    aa0a:	e003      	b.n	aa14 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    aa0c:	4b05      	ldr	r3, [pc, #20]	; (aa24 <sd_mmc_spi_wait_end_of_write_blocks+0x3c>)
    aa0e:	447b      	add	r3, pc
    aa10:	4798      	blx	r3
    aa12:	0003      	movs	r3, r0
}
    aa14:	0018      	movs	r0, r3
    aa16:	46bd      	mov	sp, r7
    aa18:	bd80      	pop	{r7, pc}
    aa1a:	46c0      	nop			; (mov r8, r8)
    aa1c:	fffff4bf 	.word	0xfffff4bf
    aa20:	1fff5b89 	.word	0x1fff5b89
    aa24:	fffff727 	.word	0xfffff727

0000aa28 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    aa28:	b580      	push	{r7, lr}
    aa2a:	b084      	sub	sp, #16
    aa2c:	af00      	add	r7, sp, #0
    aa2e:	0002      	movs	r2, r0
    aa30:	1dfb      	adds	r3, r7, #7
    aa32:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    aa34:	1dfb      	adds	r3, r7, #7
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d109      	bne.n	aa50 <mem_test_unit_ready+0x28>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    aa3c:	1dfb      	adds	r3, r7, #7
    aa3e:	781a      	ldrb	r2, [r3, #0]
    aa40:	4b09      	ldr	r3, [pc, #36]	; (aa68 <mem_test_unit_ready+0x40>)
    aa42:	447b      	add	r3, pc
    aa44:	0152      	lsls	r2, r2, #5
    aa46:	58d3      	ldr	r3, [r2, r3]
  status =
    aa48:	4798      	blx	r3
    aa4a:	0003      	movs	r3, r0
    aa4c:	001a      	movs	r2, r3
    aa4e:	e000      	b.n	aa52 <mem_test_unit_ready+0x2a>
    aa50:	2201      	movs	r2, #1
    aa52:	230f      	movs	r3, #15
    aa54:	18fb      	adds	r3, r7, r3
    aa56:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    aa58:	230f      	movs	r3, #15
    aa5a:	18fb      	adds	r3, r7, r3
    aa5c:	781b      	ldrb	r3, [r3, #0]
}
    aa5e:	0018      	movs	r0, r3
    aa60:	46bd      	mov	sp, r7
    aa62:	b004      	add	sp, #16
    aa64:	bd80      	pop	{r7, pc}
    aa66:	46c0      	nop			; (mov r8, r8)
    aa68:	1fff56b6 	.word	0x1fff56b6

0000aa6c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b084      	sub	sp, #16
    aa70:	af00      	add	r7, sp, #0
    aa72:	0002      	movs	r2, r0
    aa74:	6039      	str	r1, [r7, #0]
    aa76:	1dfb      	adds	r3, r7, #7
    aa78:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    aa7a:	1dfb      	adds	r3, r7, #7
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d10d      	bne.n	aa9e <mem_read_capacity+0x32>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    aa82:	1dfb      	adds	r3, r7, #7
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	4a0b      	ldr	r2, [pc, #44]	; (aab4 <mem_read_capacity+0x48>)
    aa88:	447a      	add	r2, pc
    aa8a:	015b      	lsls	r3, r3, #5
    aa8c:	18d3      	adds	r3, r2, r3
    aa8e:	3304      	adds	r3, #4
    aa90:	681b      	ldr	r3, [r3, #0]
  status =
    aa92:	683a      	ldr	r2, [r7, #0]
    aa94:	0010      	movs	r0, r2
    aa96:	4798      	blx	r3
    aa98:	0003      	movs	r3, r0
    aa9a:	001a      	movs	r2, r3
    aa9c:	e000      	b.n	aaa0 <mem_read_capacity+0x34>
    aa9e:	2201      	movs	r2, #1
    aaa0:	230f      	movs	r3, #15
    aaa2:	18fb      	adds	r3, r7, r3
    aaa4:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    aaa6:	230f      	movs	r3, #15
    aaa8:	18fb      	adds	r3, r7, r3
    aaaa:	781b      	ldrb	r3, [r3, #0]
}
    aaac:	0018      	movs	r0, r3
    aaae:	46bd      	mov	sp, r7
    aab0:	b004      	add	sp, #16
    aab2:	bd80      	pop	{r7, pc}
    aab4:	1fff5670 	.word	0x1fff5670

0000aab8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    aab8:	b580      	push	{r7, lr}
    aaba:	b084      	sub	sp, #16
    aabc:	af00      	add	r7, sp, #0
    aabe:	0002      	movs	r2, r0
    aac0:	1dfb      	adds	r3, r7, #7
    aac2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    aac4:	1dfb      	adds	r3, r7, #7
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	425a      	negs	r2, r3
    aaca:	4153      	adcs	r3, r2
    aacc:	b2da      	uxtb	r2, r3
  sector_size =
    aace:	230f      	movs	r3, #15
    aad0:	18fb      	adds	r3, r7, r3
    aad2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    aad4:	230f      	movs	r3, #15
    aad6:	18fb      	adds	r3, r7, r3
    aad8:	781b      	ldrb	r3, [r3, #0]
}
    aada:	0018      	movs	r0, r3
    aadc:	46bd      	mov	sp, r7
    aade:	b004      	add	sp, #16
    aae0:	bd80      	pop	{r7, pc}
	...

0000aae4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    aae4:	b580      	push	{r7, lr}
    aae6:	b084      	sub	sp, #16
    aae8:	af00      	add	r7, sp, #0
    aaea:	0002      	movs	r2, r0
    aaec:	1dfb      	adds	r3, r7, #7
    aaee:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    aaf0:	1dfb      	adds	r3, r7, #7
    aaf2:	781b      	ldrb	r3, [r3, #0]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d10a      	bne.n	ab0e <mem_wr_protect+0x2a>
    aaf8:	1dfb      	adds	r3, r7, #7
    aafa:	781b      	ldrb	r3, [r3, #0]
    aafc:	4a0a      	ldr	r2, [pc, #40]	; (ab28 <mem_wr_protect+0x44>)
    aafe:	447a      	add	r2, pc
    ab00:	015b      	lsls	r3, r3, #5
    ab02:	18d3      	adds	r3, r2, r3
    ab04:	330c      	adds	r3, #12
    ab06:	681b      	ldr	r3, [r3, #0]
    ab08:	4798      	blx	r3
    ab0a:	1e03      	subs	r3, r0, #0
    ab0c:	d001      	beq.n	ab12 <mem_wr_protect+0x2e>
    ab0e:	2201      	movs	r2, #1
    ab10:	e000      	b.n	ab14 <mem_wr_protect+0x30>
    ab12:	2200      	movs	r2, #0
  wr_protect =
    ab14:	230f      	movs	r3, #15
    ab16:	18fb      	adds	r3, r7, r3
    ab18:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    ab1a:	230f      	movs	r3, #15
    ab1c:	18fb      	adds	r3, r7, r3
    ab1e:	781b      	ldrb	r3, [r3, #0]
}
    ab20:	0018      	movs	r0, r3
    ab22:	46bd      	mov	sp, r7
    ab24:	b004      	add	sp, #16
    ab26:	bd80      	pop	{r7, pc}
    ab28:	1fff55fa 	.word	0x1fff55fa

0000ab2c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b086      	sub	sp, #24
    ab30:	af00      	add	r7, sp, #0
    ab32:	60b9      	str	r1, [r7, #8]
    ab34:	607a      	str	r2, [r7, #4]
    ab36:	230f      	movs	r3, #15
    ab38:	18fb      	adds	r3, r7, r3
    ab3a:	1c02      	adds	r2, r0, #0
    ab3c:	701a      	strb	r2, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    ab3e:	230f      	movs	r3, #15
    ab40:	18fb      	adds	r3, r7, r3
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	2b00      	cmp	r3, #0
    ab46:	d10f      	bne.n	ab68 <memory_2_ram+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    ab48:	230f      	movs	r3, #15
    ab4a:	18fb      	adds	r3, r7, r3
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	4a0c      	ldr	r2, [pc, #48]	; (ab80 <memory_2_ram+0x54>)
    ab50:	447a      	add	r2, pc
    ab52:	015b      	lsls	r3, r3, #5
    ab54:	18d3      	adds	r3, r2, r3
    ab56:	3314      	adds	r3, #20
    ab58:	681b      	ldr	r3, [r3, #0]
  status =
    ab5a:	6879      	ldr	r1, [r7, #4]
    ab5c:	68ba      	ldr	r2, [r7, #8]
    ab5e:	0010      	movs	r0, r2
    ab60:	4798      	blx	r3
    ab62:	0003      	movs	r3, r0
    ab64:	001a      	movs	r2, r3
    ab66:	e000      	b.n	ab6a <memory_2_ram+0x3e>
    ab68:	2201      	movs	r2, #1
    ab6a:	2317      	movs	r3, #23
    ab6c:	18fb      	adds	r3, r7, r3
    ab6e:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    ab70:	2317      	movs	r3, #23
    ab72:	18fb      	adds	r3, r7, r3
    ab74:	781b      	ldrb	r3, [r3, #0]
}
    ab76:	0018      	movs	r0, r3
    ab78:	46bd      	mov	sp, r7
    ab7a:	b006      	add	sp, #24
    ab7c:	bd80      	pop	{r7, pc}
    ab7e:	46c0      	nop			; (mov r8, r8)
    ab80:	1fff55a8 	.word	0x1fff55a8

0000ab84 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b086      	sub	sp, #24
    ab88:	af00      	add	r7, sp, #0
    ab8a:	60b9      	str	r1, [r7, #8]
    ab8c:	607a      	str	r2, [r7, #4]
    ab8e:	230f      	movs	r3, #15
    ab90:	18fb      	adds	r3, r7, r3
    ab92:	1c02      	adds	r2, r0, #0
    ab94:	701a      	strb	r2, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    ab96:	230f      	movs	r3, #15
    ab98:	18fb      	adds	r3, r7, r3
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d10f      	bne.n	abc0 <ram_2_memory+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    aba0:	230f      	movs	r3, #15
    aba2:	18fb      	adds	r3, r7, r3
    aba4:	781b      	ldrb	r3, [r3, #0]
    aba6:	4a0c      	ldr	r2, [pc, #48]	; (abd8 <ram_2_memory+0x54>)
    aba8:	447a      	add	r2, pc
    abaa:	015b      	lsls	r3, r3, #5
    abac:	18d3      	adds	r3, r2, r3
    abae:	3318      	adds	r3, #24
    abb0:	681b      	ldr	r3, [r3, #0]
  status =
    abb2:	6879      	ldr	r1, [r7, #4]
    abb4:	68ba      	ldr	r2, [r7, #8]
    abb6:	0010      	movs	r0, r2
    abb8:	4798      	blx	r3
    abba:	0003      	movs	r3, r0
    abbc:	001a      	movs	r2, r3
    abbe:	e000      	b.n	abc2 <ram_2_memory+0x3e>
    abc0:	2201      	movs	r2, #1
    abc2:	2317      	movs	r3, #23
    abc4:	18fb      	adds	r3, r7, r3
    abc6:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    abc8:	2317      	movs	r3, #23
    abca:	18fb      	adds	r3, r7, r3
    abcc:	781b      	ldrb	r3, [r3, #0]
}
    abce:	0018      	movs	r0, r3
    abd0:	46bd      	mov	sp, r7
    abd2:	b006      	add	sp, #24
    abd4:	bd80      	pop	{r7, pc}
    abd6:	46c0      	nop			; (mov r8, r8)
    abd8:	1fff5550 	.word	0x1fff5550

0000abdc <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    abdc:	b580      	push	{r7, lr}
    abde:	b082      	sub	sp, #8
    abe0:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    abe2:	4b07      	ldr	r3, [pc, #28]	; (ac00 <nvm_is_ready+0x24>)
    abe4:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	7d1b      	ldrb	r3, [r3, #20]
    abea:	b2db      	uxtb	r3, r3
    abec:	001a      	movs	r2, r3
    abee:	2301      	movs	r3, #1
    abf0:	4013      	ands	r3, r2
    abf2:	1e5a      	subs	r2, r3, #1
    abf4:	4193      	sbcs	r3, r2
    abf6:	b2db      	uxtb	r3, r3
}
    abf8:	0018      	movs	r0, r3
    abfa:	46bd      	mov	sp, r7
    abfc:	b002      	add	sp, #8
    abfe:	bd80      	pop	{r7, pc}
    ac00:	41004000 	.word	0x41004000

0000ac04 <system_apb_clock_set_mask>:
{
    ac04:	b580      	push	{r7, lr}
    ac06:	b082      	sub	sp, #8
    ac08:	af00      	add	r7, sp, #0
    ac0a:	0002      	movs	r2, r0
    ac0c:	6039      	str	r1, [r7, #0]
    ac0e:	1dfb      	adds	r3, r7, #7
    ac10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ac12:	1dfb      	adds	r3, r7, #7
    ac14:	781b      	ldrb	r3, [r3, #0]
    ac16:	2b01      	cmp	r3, #1
    ac18:	d00a      	beq.n	ac30 <system_apb_clock_set_mask+0x2c>
    ac1a:	2b02      	cmp	r3, #2
    ac1c:	d00f      	beq.n	ac3e <system_apb_clock_set_mask+0x3a>
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d114      	bne.n	ac4c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ac22:	4b0e      	ldr	r3, [pc, #56]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac24:	4a0d      	ldr	r2, [pc, #52]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac26:	6991      	ldr	r1, [r2, #24]
    ac28:	683a      	ldr	r2, [r7, #0]
    ac2a:	430a      	orrs	r2, r1
    ac2c:	619a      	str	r2, [r3, #24]
			break;
    ac2e:	e00f      	b.n	ac50 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ac30:	4b0a      	ldr	r3, [pc, #40]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac32:	4a0a      	ldr	r2, [pc, #40]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac34:	69d1      	ldr	r1, [r2, #28]
    ac36:	683a      	ldr	r2, [r7, #0]
    ac38:	430a      	orrs	r2, r1
    ac3a:	61da      	str	r2, [r3, #28]
			break;
    ac3c:	e008      	b.n	ac50 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ac3e:	4b07      	ldr	r3, [pc, #28]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac40:	4a06      	ldr	r2, [pc, #24]	; (ac5c <system_apb_clock_set_mask+0x58>)
    ac42:	6a11      	ldr	r1, [r2, #32]
    ac44:	683a      	ldr	r2, [r7, #0]
    ac46:	430a      	orrs	r2, r1
    ac48:	621a      	str	r2, [r3, #32]
			break;
    ac4a:	e001      	b.n	ac50 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ac4c:	2317      	movs	r3, #23
    ac4e:	e000      	b.n	ac52 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ac50:	2300      	movs	r3, #0
}
    ac52:	0018      	movs	r0, r3
    ac54:	46bd      	mov	sp, r7
    ac56:	b002      	add	sp, #8
    ac58:	bd80      	pop	{r7, pc}
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	40000400 	.word	0x40000400

0000ac60 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b084      	sub	sp, #16
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    ac68:	4b31      	ldr	r3, [pc, #196]	; (ad30 <nvm_set_config+0xd0>)
    ac6a:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    ac6c:	2104      	movs	r1, #4
    ac6e:	2001      	movs	r0, #1
    ac70:	4b30      	ldr	r3, [pc, #192]	; (ad34 <nvm_set_config+0xd4>)
    ac72:	447b      	add	r3, pc
    ac74:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    ac76:	68fb      	ldr	r3, [r7, #12]
    ac78:	2220      	movs	r2, #32
    ac7a:	32ff      	adds	r2, #255	; 0xff
    ac7c:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    ac7e:	4b2e      	ldr	r3, [pc, #184]	; (ad38 <nvm_set_config+0xd8>)
    ac80:	447b      	add	r3, pc
    ac82:	4798      	blx	r3
    ac84:	0003      	movs	r3, r0
    ac86:	001a      	movs	r2, r3
    ac88:	2301      	movs	r3, #1
    ac8a:	4053      	eors	r3, r2
    ac8c:	b2db      	uxtb	r3, r3
    ac8e:	2b00      	cmp	r3, #0
    ac90:	d001      	beq.n	ac96 <nvm_set_config+0x36>
		return STATUS_BUSY;
    ac92:	2305      	movs	r3, #5
    ac94:	e048      	b.n	ad28 <nvm_set_config+0xc8>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    ac96:	687b      	ldr	r3, [r7, #4]
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	021b      	lsls	r3, r3, #8
    ac9c:	001a      	movs	r2, r3
    ac9e:	23c0      	movs	r3, #192	; 0xc0
    aca0:	009b      	lsls	r3, r3, #2
    aca2:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	785b      	ldrb	r3, [r3, #1]
    aca8:	01db      	lsls	r3, r3, #7
    acaa:	0019      	movs	r1, r3
    acac:	23ff      	movs	r3, #255	; 0xff
    acae:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    acb0:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    acb2:	687b      	ldr	r3, [r7, #4]
    acb4:	789b      	ldrb	r3, [r3, #2]
    acb6:	005b      	lsls	r3, r3, #1
    acb8:	0019      	movs	r1, r3
    acba:	231e      	movs	r3, #30
    acbc:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    acbe:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    acc0:	687b      	ldr	r3, [r7, #4]
    acc2:	78db      	ldrb	r3, [r3, #3]
    acc4:	049b      	lsls	r3, r3, #18
    acc6:	0019      	movs	r1, r3
    acc8:	2380      	movs	r3, #128	; 0x80
    acca:	02db      	lsls	r3, r3, #11
    accc:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    acce:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	791b      	ldrb	r3, [r3, #4]
    acd4:	041b      	lsls	r3, r3, #16
    acd6:	0019      	movs	r1, r3
    acd8:	23c0      	movs	r3, #192	; 0xc0
    acda:	029b      	lsls	r3, r3, #10
    acdc:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    acde:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    ace0:	68fb      	ldr	r3, [r7, #12]
    ace2:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    ace4:	68fb      	ldr	r3, [r7, #12]
    ace6:	689b      	ldr	r3, [r3, #8]
    ace8:	035b      	lsls	r3, r3, #13
    acea:	0f5b      	lsrs	r3, r3, #29
    acec:	b2db      	uxtb	r3, r3
    acee:	001a      	movs	r2, r3
    acf0:	2308      	movs	r3, #8
    acf2:	4093      	lsls	r3, r2
    acf4:	b29a      	uxth	r2, r3
    acf6:	4b11      	ldr	r3, [pc, #68]	; (ad3c <nvm_set_config+0xdc>)
    acf8:	447b      	add	r3, pc
    acfa:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    acfc:	68fb      	ldr	r3, [r7, #12]
    acfe:	689b      	ldr	r3, [r3, #8]
    ad00:	b29a      	uxth	r2, r3
    ad02:	4b0f      	ldr	r3, [pc, #60]	; (ad40 <nvm_set_config+0xe0>)
    ad04:	447b      	add	r3, pc
    ad06:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    ad08:	687b      	ldr	r3, [r7, #4]
    ad0a:	785a      	ldrb	r2, [r3, #1]
    ad0c:	4b0d      	ldr	r3, [pc, #52]	; (ad44 <nvm_set_config+0xe4>)
    ad0e:	447b      	add	r3, pc
    ad10:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    ad12:	68fb      	ldr	r3, [r7, #12]
    ad14:	8b1b      	ldrh	r3, [r3, #24]
    ad16:	b29b      	uxth	r3, r3
    ad18:	001a      	movs	r2, r3
    ad1a:	2380      	movs	r3, #128	; 0x80
    ad1c:	005b      	lsls	r3, r3, #1
    ad1e:	4013      	ands	r3, r2
    ad20:	d001      	beq.n	ad26 <nvm_set_config+0xc6>
		return STATUS_ERR_IO;
    ad22:	2310      	movs	r3, #16
    ad24:	e000      	b.n	ad28 <nvm_set_config+0xc8>
	}

	return STATUS_OK;
    ad26:	2300      	movs	r3, #0
}
    ad28:	0018      	movs	r0, r3
    ad2a:	46bd      	mov	sp, r7
    ad2c:	b004      	add	sp, #16
    ad2e:	bd80      	pop	{r7, pc}
    ad30:	41004000 	.word	0x41004000
    ad34:	ffffff8f 	.word	0xffffff8f
    ad38:	ffffff59 	.word	0xffffff59
    ad3c:	1fff58a0 	.word	0x1fff58a0
    ad40:	1fff5894 	.word	0x1fff5894
    ad44:	1fff588a 	.word	0x1fff588a

0000ad48 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    ad48:	b580      	push	{r7, lr}
    ad4a:	b086      	sub	sp, #24
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	60b9      	str	r1, [r7, #8]
    ad50:	607a      	str	r2, [r7, #4]
    ad52:	230f      	movs	r3, #15
    ad54:	18fb      	adds	r3, r7, r3
    ad56:	1c02      	adds	r2, r0, #0
    ad58:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    ad5a:	4b80      	ldr	r3, [pc, #512]	; (af5c <nvm_execute_command+0x214>)
    ad5c:	447b      	add	r3, pc
    ad5e:	881b      	ldrh	r3, [r3, #0]
    ad60:	001a      	movs	r2, r3
    ad62:	4b7f      	ldr	r3, [pc, #508]	; (af60 <nvm_execute_command+0x218>)
    ad64:	447b      	add	r3, pc
    ad66:	885b      	ldrh	r3, [r3, #2]
    ad68:	435a      	muls	r2, r3
    ad6a:	68bb      	ldr	r3, [r7, #8]
    ad6c:	429a      	cmp	r2, r3
    ad6e:	d209      	bcs.n	ad84 <nvm_execute_command+0x3c>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    ad70:	68bb      	ldr	r3, [r7, #8]
    ad72:	4a7c      	ldr	r2, [pc, #496]	; (af64 <nvm_execute_command+0x21c>)
    ad74:	4293      	cmp	r3, r2
    ad76:	d903      	bls.n	ad80 <nvm_execute_command+0x38>
    ad78:	68bb      	ldr	r3, [r7, #8]
    ad7a:	4a7b      	ldr	r2, [pc, #492]	; (af68 <nvm_execute_command+0x220>)
    ad7c:	4293      	cmp	r3, r2
    ad7e:	d901      	bls.n	ad84 <nvm_execute_command+0x3c>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    ad80:	2318      	movs	r3, #24
    ad82:	e0e6      	b.n	af52 <nvm_execute_command+0x20a>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    ad84:	4b79      	ldr	r3, [pc, #484]	; (af6c <nvm_execute_command+0x224>)
    ad86:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    ad88:	697b      	ldr	r3, [r7, #20]
    ad8a:	685b      	ldr	r3, [r3, #4]
    ad8c:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    ad8e:	693b      	ldr	r3, [r7, #16]
    ad90:	2280      	movs	r2, #128	; 0x80
    ad92:	02d2      	lsls	r2, r2, #11
    ad94:	431a      	orrs	r2, r3
    ad96:	697b      	ldr	r3, [r7, #20]
    ad98:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    ad9a:	697b      	ldr	r3, [r7, #20]
    ad9c:	2220      	movs	r2, #32
    ad9e:	32ff      	adds	r2, #255	; 0xff
    ada0:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    ada2:	4b73      	ldr	r3, [pc, #460]	; (af70 <nvm_execute_command+0x228>)
    ada4:	447b      	add	r3, pc
    ada6:	4798      	blx	r3
    ada8:	0003      	movs	r3, r0
    adaa:	001a      	movs	r2, r3
    adac:	2301      	movs	r3, #1
    adae:	4053      	eors	r3, r2
    adb0:	b2db      	uxtb	r3, r3
    adb2:	2b00      	cmp	r3, #0
    adb4:	d004      	beq.n	adc0 <nvm_execute_command+0x78>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    adb6:	697b      	ldr	r3, [r7, #20]
    adb8:	693a      	ldr	r2, [r7, #16]
    adba:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    adbc:	2305      	movs	r3, #5
    adbe:	e0c8      	b.n	af52 <nvm_execute_command+0x20a>
	}

	switch (command) {
    adc0:	230f      	movs	r3, #15
    adc2:	18fb      	adds	r3, r7, r3
    adc4:	781b      	ldrb	r3, [r3, #0]
    adc6:	3b02      	subs	r3, #2
    adc8:	2b43      	cmp	r3, #67	; 0x43
    adca:	d900      	bls.n	adce <nvm_execute_command+0x86>
    adcc:	e0a3      	b.n	af16 <nvm_execute_command+0x1ce>
    adce:	0018      	movs	r0, r3
    add0:	f005 fc94 	bl	106fc <__gnu_thumb1_case_si>
    add4:	00000136 	.word	0x00000136
    add8:	00000142 	.word	0x00000142
    addc:	00000136 	.word	0x00000136
    ade0:	00000110 	.word	0x00000110
    ade4:	00000110 	.word	0x00000110
    ade8:	00000142 	.word	0x00000142
    adec:	00000142 	.word	0x00000142
    adf0:	00000142 	.word	0x00000142
    adf4:	00000142 	.word	0x00000142
    adf8:	00000142 	.word	0x00000142
    adfc:	00000142 	.word	0x00000142
    ae00:	00000142 	.word	0x00000142
    ae04:	00000142 	.word	0x00000142
    ae08:	00000142 	.word	0x00000142
    ae0c:	00000142 	.word	0x00000142
    ae10:	00000142 	.word	0x00000142
    ae14:	00000142 	.word	0x00000142
    ae18:	00000142 	.word	0x00000142
    ae1c:	00000142 	.word	0x00000142
    ae20:	00000142 	.word	0x00000142
    ae24:	00000142 	.word	0x00000142
    ae28:	00000142 	.word	0x00000142
    ae2c:	00000142 	.word	0x00000142
    ae30:	00000142 	.word	0x00000142
    ae34:	00000142 	.word	0x00000142
    ae38:	00000142 	.word	0x00000142
    ae3c:	00000142 	.word	0x00000142
    ae40:	00000142 	.word	0x00000142
    ae44:	00000142 	.word	0x00000142
    ae48:	00000142 	.word	0x00000142
    ae4c:	00000142 	.word	0x00000142
    ae50:	00000142 	.word	0x00000142
    ae54:	00000142 	.word	0x00000142
    ae58:	00000142 	.word	0x00000142
    ae5c:	00000142 	.word	0x00000142
    ae60:	00000142 	.word	0x00000142
    ae64:	00000142 	.word	0x00000142
    ae68:	00000142 	.word	0x00000142
    ae6c:	00000142 	.word	0x00000142
    ae70:	00000142 	.word	0x00000142
    ae74:	00000142 	.word	0x00000142
    ae78:	00000142 	.word	0x00000142
    ae7c:	00000142 	.word	0x00000142
    ae80:	00000142 	.word	0x00000142
    ae84:	00000142 	.word	0x00000142
    ae88:	00000142 	.word	0x00000142
    ae8c:	00000142 	.word	0x00000142
    ae90:	00000142 	.word	0x00000142
    ae94:	00000142 	.word	0x00000142
    ae98:	00000142 	.word	0x00000142
    ae9c:	00000142 	.word	0x00000142
    aea0:	00000142 	.word	0x00000142
    aea4:	00000142 	.word	0x00000142
    aea8:	00000142 	.word	0x00000142
    aeac:	00000142 	.word	0x00000142
    aeb0:	00000142 	.word	0x00000142
    aeb4:	00000142 	.word	0x00000142
    aeb8:	00000142 	.word	0x00000142
    aebc:	00000142 	.word	0x00000142
    aec0:	00000142 	.word	0x00000142
    aec4:	00000142 	.word	0x00000142
    aec8:	00000142 	.word	0x00000142
    aecc:	00000136 	.word	0x00000136
    aed0:	00000136 	.word	0x00000136
    aed4:	0000014c 	.word	0x0000014c
    aed8:	0000014c 	.word	0x0000014c
    aedc:	0000014c 	.word	0x0000014c
    aee0:	0000014c 	.word	0x0000014c
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    aee4:	697b      	ldr	r3, [r7, #20]
    aee6:	8b1b      	ldrh	r3, [r3, #24]
    aee8:	b29b      	uxth	r3, r3
    aeea:	001a      	movs	r2, r3
    aeec:	2380      	movs	r3, #128	; 0x80
    aeee:	005b      	lsls	r3, r3, #1
    aef0:	4013      	ands	r3, r2
    aef2:	d004      	beq.n	aefe <nvm_execute_command+0x1b6>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    aef4:	697b      	ldr	r3, [r7, #20]
    aef6:	693a      	ldr	r2, [r7, #16]
    aef8:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    aefa:	2310      	movs	r3, #16
    aefc:	e029      	b.n	af52 <nvm_execute_command+0x20a>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    aefe:	68bb      	ldr	r3, [r7, #8]
    af00:	089b      	lsrs	r3, r3, #2
    af02:	005a      	lsls	r2, r3, #1
    af04:	697b      	ldr	r3, [r7, #20]
    af06:	61da      	str	r2, [r3, #28]
			break;
    af08:	e00b      	b.n	af22 <nvm_execute_command+0x1da>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    af0a:	68bb      	ldr	r3, [r7, #8]
    af0c:	089b      	lsrs	r3, r3, #2
    af0e:	005a      	lsls	r2, r3, #1
    af10:	697b      	ldr	r3, [r7, #20]
    af12:	61da      	str	r2, [r3, #28]
			break;
    af14:	e005      	b.n	af22 <nvm_execute_command+0x1da>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    af16:	697b      	ldr	r3, [r7, #20]
    af18:	693a      	ldr	r2, [r7, #16]
    af1a:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    af1c:	2317      	movs	r3, #23
    af1e:	e018      	b.n	af52 <nvm_execute_command+0x20a>
			break;
    af20:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    af22:	230f      	movs	r3, #15
    af24:	18fb      	adds	r3, r7, r3
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	b29b      	uxth	r3, r3
    af2a:	4a12      	ldr	r2, [pc, #72]	; (af74 <nvm_execute_command+0x22c>)
    af2c:	4313      	orrs	r3, r2
    af2e:	b29a      	uxth	r2, r3
    af30:	697b      	ldr	r3, [r7, #20]
    af32:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    af34:	46c0      	nop			; (mov r8, r8)
    af36:	4b10      	ldr	r3, [pc, #64]	; (af78 <nvm_execute_command+0x230>)
    af38:	447b      	add	r3, pc
    af3a:	4798      	blx	r3
    af3c:	0003      	movs	r3, r0
    af3e:	001a      	movs	r2, r3
    af40:	2301      	movs	r3, #1
    af42:	4053      	eors	r3, r2
    af44:	b2db      	uxtb	r3, r3
    af46:	2b00      	cmp	r3, #0
    af48:	d1f5      	bne.n	af36 <nvm_execute_command+0x1ee>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    af4a:	697b      	ldr	r3, [r7, #20]
    af4c:	693a      	ldr	r2, [r7, #16]
    af4e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    af50:	2300      	movs	r3, #0
}
    af52:	0018      	movs	r0, r3
    af54:	46bd      	mov	sp, r7
    af56:	b006      	add	sp, #24
    af58:	bd80      	pop	{r7, pc}
    af5a:	46c0      	nop			; (mov r8, r8)
    af5c:	1fff583c 	.word	0x1fff583c
    af60:	1fff5834 	.word	0x1fff5834
    af64:	00803fff 	.word	0x00803fff
    af68:	00806000 	.word	0x00806000
    af6c:	41004000 	.word	0x41004000
    af70:	fffffe35 	.word	0xfffffe35
    af74:	ffffa500 	.word	0xffffa500
    af78:	fffffca1 	.word	0xfffffca1

0000af7c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    af7c:	b590      	push	{r4, r7, lr}
    af7e:	b089      	sub	sp, #36	; 0x24
    af80:	af00      	add	r7, sp, #0
    af82:	60f8      	str	r0, [r7, #12]
    af84:	60b9      	str	r1, [r7, #8]
    af86:	1dbb      	adds	r3, r7, #6
    af88:	801a      	strh	r2, [r3, #0]
    af8a:	4c4f      	ldr	r4, [pc, #316]	; (b0c8 <nvm_write_buffer+0x14c>)
    af8c:	447c      	add	r4, pc
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    af8e:	4b4f      	ldr	r3, [pc, #316]	; (b0cc <nvm_write_buffer+0x150>)
    af90:	447b      	add	r3, pc
    af92:	881b      	ldrh	r3, [r3, #0]
    af94:	001a      	movs	r2, r3
    af96:	4b4e      	ldr	r3, [pc, #312]	; (b0d0 <nvm_write_buffer+0x154>)
    af98:	447b      	add	r3, pc
    af9a:	885b      	ldrh	r3, [r3, #2]
    af9c:	435a      	muls	r2, r3
	if (destination_address >
    af9e:	68fb      	ldr	r3, [r7, #12]
    afa0:	429a      	cmp	r2, r3
    afa2:	d201      	bcs.n	afa8 <nvm_write_buffer+0x2c>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    afa4:	2318      	movs	r3, #24
    afa6:	e08a      	b.n	b0be <nvm_write_buffer+0x142>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    afa8:	4b4a      	ldr	r3, [pc, #296]	; (b0d4 <nvm_write_buffer+0x158>)
    afaa:	447b      	add	r3, pc
    afac:	881b      	ldrh	r3, [r3, #0]
    afae:	3b01      	subs	r3, #1
    afb0:	001a      	movs	r2, r3
    afb2:	68fb      	ldr	r3, [r7, #12]
    afb4:	4013      	ands	r3, r2
    afb6:	d001      	beq.n	afbc <nvm_write_buffer+0x40>
		return STATUS_ERR_BAD_ADDRESS;
    afb8:	2318      	movs	r3, #24
    afba:	e080      	b.n	b0be <nvm_write_buffer+0x142>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    afbc:	4b46      	ldr	r3, [pc, #280]	; (b0d8 <nvm_write_buffer+0x15c>)
    afbe:	447b      	add	r3, pc
    afc0:	881b      	ldrh	r3, [r3, #0]
    afc2:	1dba      	adds	r2, r7, #6
    afc4:	8812      	ldrh	r2, [r2, #0]
    afc6:	429a      	cmp	r2, r3
    afc8:	d901      	bls.n	afce <nvm_write_buffer+0x52>
		return STATUS_ERR_INVALID_ARG;
    afca:	2317      	movs	r3, #23
    afcc:	e077      	b.n	b0be <nvm_write_buffer+0x142>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    afce:	4b43      	ldr	r3, [pc, #268]	; (b0dc <nvm_write_buffer+0x160>)
    afd0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    afd2:	4b43      	ldr	r3, [pc, #268]	; (b0e0 <nvm_write_buffer+0x164>)
    afd4:	447b      	add	r3, pc
    afd6:	4798      	blx	r3
    afd8:	0003      	movs	r3, r0
    afda:	001a      	movs	r2, r3
    afdc:	2301      	movs	r3, #1
    afde:	4053      	eors	r3, r2
    afe0:	b2db      	uxtb	r3, r3
    afe2:	2b00      	cmp	r3, #0
    afe4:	d001      	beq.n	afea <nvm_write_buffer+0x6e>
		return STATUS_BUSY;
    afe6:	2305      	movs	r3, #5
    afe8:	e069      	b.n	b0be <nvm_write_buffer+0x142>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    afea:	697b      	ldr	r3, [r7, #20]
    afec:	4a3d      	ldr	r2, [pc, #244]	; (b0e4 <nvm_write_buffer+0x168>)
    afee:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    aff0:	46c0      	nop			; (mov r8, r8)
    aff2:	4b3d      	ldr	r3, [pc, #244]	; (b0e8 <nvm_write_buffer+0x16c>)
    aff4:	447b      	add	r3, pc
    aff6:	4798      	blx	r3
    aff8:	0003      	movs	r3, r0
    affa:	001a      	movs	r2, r3
    affc:	2301      	movs	r3, #1
    affe:	4053      	eors	r3, r2
    b000:	b2db      	uxtb	r3, r3
    b002:	2b00      	cmp	r3, #0
    b004:	d1f5      	bne.n	aff2 <nvm_write_buffer+0x76>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    b006:	697b      	ldr	r3, [r7, #20]
    b008:	2220      	movs	r2, #32
    b00a:	32ff      	adds	r2, #255	; 0xff
    b00c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    b00e:	68fb      	ldr	r3, [r7, #12]
    b010:	085b      	lsrs	r3, r3, #1
    b012:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    b014:	231a      	movs	r3, #26
    b016:	18fb      	adds	r3, r7, r3
    b018:	2200      	movs	r2, #0
    b01a:	801a      	strh	r2, [r3, #0]
    b01c:	e032      	b.n	b084 <nvm_write_buffer+0x108>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    b01e:	231a      	movs	r3, #26
    b020:	18fb      	adds	r3, r7, r3
    b022:	881b      	ldrh	r3, [r3, #0]
    b024:	68ba      	ldr	r2, [r7, #8]
    b026:	18d3      	adds	r3, r2, r3
    b028:	781a      	ldrb	r2, [r3, #0]
    b02a:	2318      	movs	r3, #24
    b02c:	18fb      	adds	r3, r7, r3
    b02e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    b030:	231a      	movs	r3, #26
    b032:	18fb      	adds	r3, r7, r3
    b034:	881a      	ldrh	r2, [r3, #0]
    b036:	1dbb      	adds	r3, r7, #6
    b038:	881b      	ldrh	r3, [r3, #0]
    b03a:	3b01      	subs	r3, #1
    b03c:	429a      	cmp	r2, r3
    b03e:	da11      	bge.n	b064 <nvm_write_buffer+0xe8>
			data |= (buffer[i + 1] << 8);
    b040:	231a      	movs	r3, #26
    b042:	18fb      	adds	r3, r7, r3
    b044:	881b      	ldrh	r3, [r3, #0]
    b046:	3301      	adds	r3, #1
    b048:	68ba      	ldr	r2, [r7, #8]
    b04a:	18d3      	adds	r3, r2, r3
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	021b      	lsls	r3, r3, #8
    b050:	b21a      	sxth	r2, r3
    b052:	2318      	movs	r3, #24
    b054:	18fb      	adds	r3, r7, r3
    b056:	2100      	movs	r1, #0
    b058:	5e5b      	ldrsh	r3, [r3, r1]
    b05a:	4313      	orrs	r3, r2
    b05c:	b21a      	sxth	r2, r3
    b05e:	2318      	movs	r3, #24
    b060:	18fb      	adds	r3, r7, r3
    b062:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    b064:	69fb      	ldr	r3, [r7, #28]
    b066:	1c5a      	adds	r2, r3, #1
    b068:	61fa      	str	r2, [r7, #28]
    b06a:	005b      	lsls	r3, r3, #1
    b06c:	001a      	movs	r2, r3
    b06e:	2318      	movs	r3, #24
    b070:	18fb      	adds	r3, r7, r3
    b072:	881b      	ldrh	r3, [r3, #0]
    b074:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    b076:	231a      	movs	r3, #26
    b078:	18fb      	adds	r3, r7, r3
    b07a:	221a      	movs	r2, #26
    b07c:	18ba      	adds	r2, r7, r2
    b07e:	8812      	ldrh	r2, [r2, #0]
    b080:	3202      	adds	r2, #2
    b082:	801a      	strh	r2, [r3, #0]
    b084:	231a      	movs	r3, #26
    b086:	18fa      	adds	r2, r7, r3
    b088:	1dbb      	adds	r3, r7, #6
    b08a:	8812      	ldrh	r2, [r2, #0]
    b08c:	881b      	ldrh	r3, [r3, #0]
    b08e:	429a      	cmp	r2, r3
    b090:	d3c5      	bcc.n	b01e <nvm_write_buffer+0xa2>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    b092:	4b16      	ldr	r3, [pc, #88]	; (b0ec <nvm_write_buffer+0x170>)
    b094:	447b      	add	r3, pc
    b096:	791b      	ldrb	r3, [r3, #4]
    b098:	2201      	movs	r2, #1
    b09a:	4053      	eors	r3, r2
    b09c:	b2db      	uxtb	r3, r3
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d00c      	beq.n	b0bc <nvm_write_buffer+0x140>
    b0a2:	1dbb      	adds	r3, r7, #6
    b0a4:	881b      	ldrh	r3, [r3, #0]
    b0a6:	2b3f      	cmp	r3, #63	; 0x3f
    b0a8:	d808      	bhi.n	b0bc <nvm_write_buffer+0x140>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    b0aa:	68fb      	ldr	r3, [r7, #12]
    b0ac:	2200      	movs	r2, #0
    b0ae:	0019      	movs	r1, r3
    b0b0:	2004      	movs	r0, #4
    b0b2:	4b0f      	ldr	r3, [pc, #60]	; (b0f0 <nvm_write_buffer+0x174>)
    b0b4:	58e3      	ldr	r3, [r4, r3]
    b0b6:	4798      	blx	r3
    b0b8:	0003      	movs	r3, r0
    b0ba:	e000      	b.n	b0be <nvm_write_buffer+0x142>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    b0bc:	2300      	movs	r3, #0
}
    b0be:	0018      	movs	r0, r3
    b0c0:	46bd      	mov	sp, r7
    b0c2:	b009      	add	sp, #36	; 0x24
    b0c4:	bd90      	pop	{r4, r7, pc}
    b0c6:	46c0      	nop			; (mov r8, r8)
    b0c8:	00006ed4 	.word	0x00006ed4
    b0cc:	1fff5608 	.word	0x1fff5608
    b0d0:	1fff5600 	.word	0x1fff5600
    b0d4:	1fff55ee 	.word	0x1fff55ee
    b0d8:	1fff55da 	.word	0x1fff55da
    b0dc:	41004000 	.word	0x41004000
    b0e0:	fffffc05 	.word	0xfffffc05
    b0e4:	ffffa544 	.word	0xffffa544
    b0e8:	fffffbe5 	.word	0xfffffbe5
    b0ec:	1fff5504 	.word	0x1fff5504
    b0f0:	00000244 	.word	0x00000244

0000b0f4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    b0f4:	b580      	push	{r7, lr}
    b0f6:	b084      	sub	sp, #16
    b0f8:	af00      	add	r7, sp, #0
    b0fa:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    b0fc:	4b25      	ldr	r3, [pc, #148]	; (b194 <nvm_erase_row+0xa0>)
    b0fe:	447b      	add	r3, pc
    b100:	881b      	ldrh	r3, [r3, #0]
    b102:	001a      	movs	r2, r3
    b104:	4b24      	ldr	r3, [pc, #144]	; (b198 <nvm_erase_row+0xa4>)
    b106:	447b      	add	r3, pc
    b108:	885b      	ldrh	r3, [r3, #2]
    b10a:	435a      	muls	r2, r3
	if (row_address >
    b10c:	687b      	ldr	r3, [r7, #4]
    b10e:	429a      	cmp	r2, r3
    b110:	d201      	bcs.n	b116 <nvm_erase_row+0x22>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    b112:	2318      	movs	r3, #24
    b114:	e03a      	b.n	b18c <nvm_erase_row+0x98>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    b116:	4b21      	ldr	r3, [pc, #132]	; (b19c <nvm_erase_row+0xa8>)
    b118:	447b      	add	r3, pc
    b11a:	881b      	ldrh	r3, [r3, #0]
    b11c:	009b      	lsls	r3, r3, #2
    b11e:	3b01      	subs	r3, #1
    b120:	001a      	movs	r2, r3
    b122:	687b      	ldr	r3, [r7, #4]
    b124:	4013      	ands	r3, r2
    b126:	d001      	beq.n	b12c <nvm_erase_row+0x38>
		return STATUS_ERR_BAD_ADDRESS;
    b128:	2318      	movs	r3, #24
    b12a:	e02f      	b.n	b18c <nvm_erase_row+0x98>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    b12c:	4b1c      	ldr	r3, [pc, #112]	; (b1a0 <nvm_erase_row+0xac>)
    b12e:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    b130:	4b1c      	ldr	r3, [pc, #112]	; (b1a4 <nvm_erase_row+0xb0>)
    b132:	447b      	add	r3, pc
    b134:	4798      	blx	r3
    b136:	0003      	movs	r3, r0
    b138:	001a      	movs	r2, r3
    b13a:	2301      	movs	r3, #1
    b13c:	4053      	eors	r3, r2
    b13e:	b2db      	uxtb	r3, r3
    b140:	2b00      	cmp	r3, #0
    b142:	d001      	beq.n	b148 <nvm_erase_row+0x54>
		return STATUS_BUSY;
    b144:	2305      	movs	r3, #5
    b146:	e021      	b.n	b18c <nvm_erase_row+0x98>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    b148:	68fb      	ldr	r3, [r7, #12]
    b14a:	2220      	movs	r2, #32
    b14c:	32ff      	adds	r2, #255	; 0xff
    b14e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    b150:	687b      	ldr	r3, [r7, #4]
    b152:	089b      	lsrs	r3, r3, #2
    b154:	005a      	lsls	r2, r3, #1
    b156:	68fb      	ldr	r3, [r7, #12]
    b158:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    b15a:	68fb      	ldr	r3, [r7, #12]
    b15c:	4a12      	ldr	r2, [pc, #72]	; (b1a8 <nvm_erase_row+0xb4>)
    b15e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    b160:	46c0      	nop			; (mov r8, r8)
    b162:	4b12      	ldr	r3, [pc, #72]	; (b1ac <nvm_erase_row+0xb8>)
    b164:	447b      	add	r3, pc
    b166:	4798      	blx	r3
    b168:	0003      	movs	r3, r0
    b16a:	001a      	movs	r2, r3
    b16c:	2301      	movs	r3, #1
    b16e:	4053      	eors	r3, r2
    b170:	b2db      	uxtb	r3, r3
    b172:	2b00      	cmp	r3, #0
    b174:	d1f5      	bne.n	b162 <nvm_erase_row+0x6e>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    b176:	68fb      	ldr	r3, [r7, #12]
    b178:	8b1b      	ldrh	r3, [r3, #24]
    b17a:	b29b      	uxth	r3, r3
    b17c:	b2db      	uxtb	r3, r3
    b17e:	001a      	movs	r2, r3
    b180:	231c      	movs	r3, #28
    b182:	4013      	ands	r3, r2
    b184:	d001      	beq.n	b18a <nvm_erase_row+0x96>
		return STATUS_ABORTED;
    b186:	2304      	movs	r3, #4
    b188:	e000      	b.n	b18c <nvm_erase_row+0x98>
	}

	return STATUS_OK;
    b18a:	2300      	movs	r3, #0
}
    b18c:	0018      	movs	r0, r3
    b18e:	46bd      	mov	sp, r7
    b190:	b004      	add	sp, #16
    b192:	bd80      	pop	{r7, pc}
    b194:	1fff549a 	.word	0x1fff549a
    b198:	1fff5492 	.word	0x1fff5492
    b19c:	1fff5480 	.word	0x1fff5480
    b1a0:	41004000 	.word	0x41004000
    b1a4:	fffffaa7 	.word	0xfffffaa7
    b1a8:	ffffa502 	.word	0xffffa502
    b1ac:	fffffa75 	.word	0xfffffa75

0000b1b0 <system_pinmux_get_config_defaults>:
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b082      	sub	sp, #8
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	2280      	movs	r2, #128	; 0x80
    b1bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b1be:	687b      	ldr	r3, [r7, #4]
    b1c0:	2200      	movs	r2, #0
    b1c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	2201      	movs	r2, #1
    b1c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	2200      	movs	r2, #0
    b1ce:	70da      	strb	r2, [r3, #3]
}
    b1d0:	46c0      	nop			; (mov r8, r8)
    b1d2:	46bd      	mov	sp, r7
    b1d4:	b002      	add	sp, #8
    b1d6:	bd80      	pop	{r7, pc}

0000b1d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    b1d8:	b590      	push	{r4, r7, lr}
    b1da:	b085      	sub	sp, #20
    b1dc:	af00      	add	r7, sp, #0
    b1de:	0002      	movs	r2, r0
    b1e0:	6039      	str	r1, [r7, #0]
    b1e2:	1dfb      	adds	r3, r7, #7
    b1e4:	701a      	strb	r2, [r3, #0]
    b1e6:	4c14      	ldr	r4, [pc, #80]	; (b238 <port_pin_set_config+0x60>)
    b1e8:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    b1ea:	230c      	movs	r3, #12
    b1ec:	18fb      	adds	r3, r7, r3
    b1ee:	0018      	movs	r0, r3
    b1f0:	4b12      	ldr	r3, [pc, #72]	; (b23c <port_pin_set_config+0x64>)
    b1f2:	447b      	add	r3, pc
    b1f4:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    b1f6:	230c      	movs	r3, #12
    b1f8:	18fb      	adds	r3, r7, r3
    b1fa:	2280      	movs	r2, #128	; 0x80
    b1fc:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    b1fe:	683b      	ldr	r3, [r7, #0]
    b200:	781a      	ldrb	r2, [r3, #0]
    b202:	230c      	movs	r3, #12
    b204:	18fb      	adds	r3, r7, r3
    b206:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    b208:	683b      	ldr	r3, [r7, #0]
    b20a:	785a      	ldrb	r2, [r3, #1]
    b20c:	230c      	movs	r3, #12
    b20e:	18fb      	adds	r3, r7, r3
    b210:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    b212:	683b      	ldr	r3, [r7, #0]
    b214:	789a      	ldrb	r2, [r3, #2]
    b216:	230c      	movs	r3, #12
    b218:	18fb      	adds	r3, r7, r3
    b21a:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    b21c:	230c      	movs	r3, #12
    b21e:	18fa      	adds	r2, r7, r3
    b220:	1dfb      	adds	r3, r7, #7
    b222:	781b      	ldrb	r3, [r3, #0]
    b224:	0011      	movs	r1, r2
    b226:	0018      	movs	r0, r3
    b228:	4b05      	ldr	r3, [pc, #20]	; (b240 <port_pin_set_config+0x68>)
    b22a:	58e3      	ldr	r3, [r4, r3]
    b22c:	4798      	blx	r3
}
    b22e:	46c0      	nop			; (mov r8, r8)
    b230:	46bd      	mov	sp, r7
    b232:	b005      	add	sp, #20
    b234:	bd90      	pop	{r4, r7, pc}
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	00006c78 	.word	0x00006c78
    b23c:	ffffffbb 	.word	0xffffffbb
    b240:	000002b8 	.word	0x000002b8

0000b244 <cpu_irq_save>:
{
    b244:	b580      	push	{r7, lr}
    b246:	b082      	sub	sp, #8
    b248:	af00      	add	r7, sp, #0
    b24a:	4a0b      	ldr	r2, [pc, #44]	; (b278 <cpu_irq_save+0x34>)
    b24c:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b24e:	f3ef 8310 	mrs	r3, PRIMASK
    b252:	607b      	str	r3, [r7, #4]
  return(result);
    b254:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    b256:	4259      	negs	r1, r3
    b258:	414b      	adcs	r3, r1
    b25a:	b2db      	uxtb	r3, r3
    b25c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b25e:	b672      	cpsid	i
    b260:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    b264:	4b05      	ldr	r3, [pc, #20]	; (b27c <cpu_irq_save+0x38>)
    b266:	58d3      	ldr	r3, [r2, r3]
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
	return flags;
    b26c:	683b      	ldr	r3, [r7, #0]
}
    b26e:	0018      	movs	r0, r3
    b270:	46bd      	mov	sp, r7
    b272:	b002      	add	sp, #8
    b274:	bd80      	pop	{r7, pc}
    b276:	46c0      	nop			; (mov r8, r8)
    b278:	00006c14 	.word	0x00006c14
    b27c:	000000ec 	.word	0x000000ec

0000b280 <cpu_irq_is_enabled_flags>:
{
    b280:	b580      	push	{r7, lr}
    b282:	b082      	sub	sp, #8
    b284:	af00      	add	r7, sp, #0
    b286:	6078      	str	r0, [r7, #4]
	return (flags);
    b288:	687b      	ldr	r3, [r7, #4]
    b28a:	1e5a      	subs	r2, r3, #1
    b28c:	4193      	sbcs	r3, r2
    b28e:	b2db      	uxtb	r3, r3
}
    b290:	0018      	movs	r0, r3
    b292:	46bd      	mov	sp, r7
    b294:	b002      	add	sp, #8
    b296:	bd80      	pop	{r7, pc}

0000b298 <cpu_irq_restore>:
{
    b298:	b590      	push	{r4, r7, lr}
    b29a:	b083      	sub	sp, #12
    b29c:	af00      	add	r7, sp, #0
    b29e:	6078      	str	r0, [r7, #4]
    b2a0:	4c09      	ldr	r4, [pc, #36]	; (b2c8 <cpu_irq_restore+0x30>)
    b2a2:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    b2a4:	687b      	ldr	r3, [r7, #4]
    b2a6:	0018      	movs	r0, r3
    b2a8:	4b08      	ldr	r3, [pc, #32]	; (b2cc <cpu_irq_restore+0x34>)
    b2aa:	447b      	add	r3, pc
    b2ac:	4798      	blx	r3
    b2ae:	1e03      	subs	r3, r0, #0
    b2b0:	d006      	beq.n	b2c0 <cpu_irq_restore+0x28>
		cpu_irq_enable();
    b2b2:	4b07      	ldr	r3, [pc, #28]	; (b2d0 <cpu_irq_restore+0x38>)
    b2b4:	58e3      	ldr	r3, [r4, r3]
    b2b6:	2201      	movs	r2, #1
    b2b8:	701a      	strb	r2, [r3, #0]
    b2ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b2be:	b662      	cpsie	i
}
    b2c0:	46c0      	nop			; (mov r8, r8)
    b2c2:	46bd      	mov	sp, r7
    b2c4:	b003      	add	sp, #12
    b2c6:	bd90      	pop	{r4, r7, pc}
    b2c8:	00006bbe 	.word	0x00006bbe
    b2cc:	ffffffd3 	.word	0xffffffd3
    b2d0:	000000ec 	.word	0x000000ec

0000b2d4 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    b2d4:	b580      	push	{r7, lr}
    b2d6:	b082      	sub	sp, #8
    b2d8:	af00      	add	r7, sp, #0
    b2da:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	681a      	ldr	r2, [r3, #0]
    b2e0:	687b      	ldr	r3, [r7, #4]
    b2e2:	681b      	ldr	r3, [r3, #0]
    b2e4:	891b      	ldrh	r3, [r3, #8]
    b2e6:	b29b      	uxth	r3, r3
    b2e8:	2101      	movs	r1, #1
    b2ea:	438b      	bics	r3, r1
    b2ec:	b29b      	uxth	r3, r3
    b2ee:	8113      	strh	r3, [r2, #8]
}
    b2f0:	46c0      	nop			; (mov r8, r8)
    b2f2:	46bd      	mov	sp, r7
    b2f4:	b002      	add	sp, #8
    b2f6:	bd80      	pop	{r7, pc}

0000b2f8 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    b2f8:	b580      	push	{r7, lr}
    b2fa:	b082      	sub	sp, #8
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	681b      	ldr	r3, [r3, #0]
    b304:	7a9b      	ldrb	r3, [r3, #10]
    b306:	065b      	lsls	r3, r3, #25
    b308:	0e5b      	lsrs	r3, r3, #25
    b30a:	b2db      	uxtb	r3, r3
}
    b30c:	0018      	movs	r0, r3
    b30e:	46bd      	mov	sp, r7
    b310:	b002      	add	sp, #8
    b312:	bd80      	pop	{r7, pc}

0000b314 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    b314:	b580      	push	{r7, lr}
    b316:	b082      	sub	sp, #8
    b318:	af00      	add	r7, sp, #0
    b31a:	6078      	str	r0, [r7, #4]
    b31c:	000a      	movs	r2, r1
    b31e:	1cfb      	adds	r3, r7, #3
    b320:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    b322:	687b      	ldr	r3, [r7, #4]
    b324:	681b      	ldr	r3, [r3, #0]
    b326:	1cfa      	adds	r2, r7, #3
    b328:	7812      	ldrb	r2, [r2, #0]
    b32a:	2180      	movs	r1, #128	; 0x80
    b32c:	4249      	negs	r1, r1
    b32e:	430a      	orrs	r2, r1
    b330:	b2d2      	uxtb	r2, r2
    b332:	729a      	strb	r2, [r3, #10]
}
    b334:	46c0      	nop			; (mov r8, r8)
    b336:	46bd      	mov	sp, r7
    b338:	b002      	add	sp, #8
    b33a:	bd80      	pop	{r7, pc}

0000b33c <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    b33c:	b580      	push	{r7, lr}
    b33e:	b082      	sub	sp, #8
    b340:	af00      	add	r7, sp, #0
    b342:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    b344:	687b      	ldr	r3, [r7, #4]
    b346:	681b      	ldr	r3, [r3, #0]
    b348:	8a1b      	ldrh	r3, [r3, #16]
    b34a:	049b      	lsls	r3, r3, #18
    b34c:	0d5b      	lsrs	r3, r3, #21
    b34e:	b29b      	uxth	r3, r3
}
    b350:	0018      	movs	r0, r3
    b352:	46bd      	mov	sp, r7
    b354:	b002      	add	sp, #8
    b356:	bd80      	pop	{r7, pc}

0000b358 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    b358:	b580      	push	{r7, lr}
    b35a:	b082      	sub	sp, #8
    b35c:	af00      	add	r7, sp, #0
    b35e:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	681b      	ldr	r3, [r3, #0]
    b364:	8a1b      	ldrh	r3, [r3, #16]
    b366:	b29b      	uxth	r3, r3
}
    b368:	0018      	movs	r0, r3
    b36a:	46bd      	mov	sp, r7
    b36c:	b002      	add	sp, #8
    b36e:	bd80      	pop	{r7, pc}

0000b370 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    b370:	b580      	push	{r7, lr}
    b372:	b082      	sub	sp, #8
    b374:	af00      	add	r7, sp, #0
    b376:	6078      	str	r0, [r7, #4]
    b378:	000a      	movs	r2, r1
    b37a:	1cfb      	adds	r3, r7, #3
    b37c:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	681a      	ldr	r2, [r3, #0]
    b382:	1cfb      	adds	r3, r7, #3
    b384:	781b      	ldrb	r3, [r3, #0]
    b386:	2103      	movs	r1, #3
    b388:	400b      	ands	r3, r1
    b38a:	b2d9      	uxtb	r1, r3
    b38c:	8913      	ldrh	r3, [r2, #8]
    b38e:	1c08      	adds	r0, r1, #0
    b390:	2103      	movs	r1, #3
    b392:	4001      	ands	r1, r0
    b394:	0288      	lsls	r0, r1, #10
    b396:	4905      	ldr	r1, [pc, #20]	; (b3ac <usb_device_set_lpm_mode+0x3c>)
    b398:	400b      	ands	r3, r1
    b39a:	1c19      	adds	r1, r3, #0
    b39c:	1c03      	adds	r3, r0, #0
    b39e:	430b      	orrs	r3, r1
    b3a0:	8113      	strh	r3, [r2, #8]
}
    b3a2:	46c0      	nop			; (mov r8, r8)
    b3a4:	46bd      	mov	sp, r7
    b3a6:	b002      	add	sp, #8
    b3a8:	bd80      	pop	{r7, pc}
    b3aa:	46c0      	nop			; (mov r8, r8)
    b3ac:	fffff3ff 	.word	0xfffff3ff

0000b3b0 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    b3b0:	b590      	push	{r4, r7, lr}
    b3b2:	b085      	sub	sp, #20
    b3b4:	af00      	add	r7, sp, #0
    b3b6:	0002      	movs	r2, r0
    b3b8:	1dfb      	adds	r3, r7, #7
    b3ba:	701a      	strb	r2, [r3, #0]
    b3bc:	4c10      	ldr	r4, [pc, #64]	; (b400 <sleepmgr_lock_mode+0x50>)
    b3be:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    b3c0:	1dfb      	adds	r3, r7, #7
    b3c2:	781b      	ldrb	r3, [r3, #0]
    b3c4:	4a0f      	ldr	r2, [pc, #60]	; (b404 <sleepmgr_lock_mode+0x54>)
    b3c6:	58a2      	ldr	r2, [r4, r2]
    b3c8:	5cd3      	ldrb	r3, [r2, r3]
    b3ca:	2bff      	cmp	r3, #255	; 0xff
    b3cc:	d100      	bne.n	b3d0 <sleepmgr_lock_mode+0x20>
		while (true) {
    b3ce:	e7fe      	b.n	b3ce <sleepmgr_lock_mode+0x1e>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    b3d0:	4b0d      	ldr	r3, [pc, #52]	; (b408 <sleepmgr_lock_mode+0x58>)
    b3d2:	447b      	add	r3, pc
    b3d4:	4798      	blx	r3
    b3d6:	0003      	movs	r3, r0
    b3d8:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    b3da:	1dfb      	adds	r3, r7, #7
    b3dc:	781b      	ldrb	r3, [r3, #0]
    b3de:	4a09      	ldr	r2, [pc, #36]	; (b404 <sleepmgr_lock_mode+0x54>)
    b3e0:	58a2      	ldr	r2, [r4, r2]
    b3e2:	5cd2      	ldrb	r2, [r2, r3]
    b3e4:	3201      	adds	r2, #1
    b3e6:	b2d1      	uxtb	r1, r2
    b3e8:	4a06      	ldr	r2, [pc, #24]	; (b404 <sleepmgr_lock_mode+0x54>)
    b3ea:	58a2      	ldr	r2, [r4, r2]
    b3ec:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    b3ee:	68fb      	ldr	r3, [r7, #12]
    b3f0:	0018      	movs	r0, r3
    b3f2:	4b06      	ldr	r3, [pc, #24]	; (b40c <sleepmgr_lock_mode+0x5c>)
    b3f4:	447b      	add	r3, pc
    b3f6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    b3f8:	46c0      	nop			; (mov r8, r8)
    b3fa:	46bd      	mov	sp, r7
    b3fc:	b005      	add	sp, #20
    b3fe:	bd90      	pop	{r4, r7, pc}
    b400:	00006aa2 	.word	0x00006aa2
    b404:	00000220 	.word	0x00000220
    b408:	fffffe6f 	.word	0xfffffe6f
    b40c:	fffffea1 	.word	0xfffffea1

0000b410 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    b410:	b590      	push	{r4, r7, lr}
    b412:	b085      	sub	sp, #20
    b414:	af00      	add	r7, sp, #0
    b416:	0002      	movs	r2, r0
    b418:	1dfb      	adds	r3, r7, #7
    b41a:	701a      	strb	r2, [r3, #0]
    b41c:	4c10      	ldr	r4, [pc, #64]	; (b460 <sleepmgr_unlock_mode+0x50>)
    b41e:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    b420:	1dfb      	adds	r3, r7, #7
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	4a0f      	ldr	r2, [pc, #60]	; (b464 <sleepmgr_unlock_mode+0x54>)
    b426:	58a2      	ldr	r2, [r4, r2]
    b428:	5cd3      	ldrb	r3, [r2, r3]
    b42a:	2b00      	cmp	r3, #0
    b42c:	d100      	bne.n	b430 <sleepmgr_unlock_mode+0x20>
		while (true) {
    b42e:	e7fe      	b.n	b42e <sleepmgr_unlock_mode+0x1e>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    b430:	4b0d      	ldr	r3, [pc, #52]	; (b468 <sleepmgr_unlock_mode+0x58>)
    b432:	447b      	add	r3, pc
    b434:	4798      	blx	r3
    b436:	0003      	movs	r3, r0
    b438:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    b43a:	1dfb      	adds	r3, r7, #7
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	4a09      	ldr	r2, [pc, #36]	; (b464 <sleepmgr_unlock_mode+0x54>)
    b440:	58a2      	ldr	r2, [r4, r2]
    b442:	5cd2      	ldrb	r2, [r2, r3]
    b444:	3a01      	subs	r2, #1
    b446:	b2d1      	uxtb	r1, r2
    b448:	4a06      	ldr	r2, [pc, #24]	; (b464 <sleepmgr_unlock_mode+0x54>)
    b44a:	58a2      	ldr	r2, [r4, r2]
    b44c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    b44e:	68fb      	ldr	r3, [r7, #12]
    b450:	0018      	movs	r0, r3
    b452:	4b06      	ldr	r3, [pc, #24]	; (b46c <sleepmgr_unlock_mode+0x5c>)
    b454:	447b      	add	r3, pc
    b456:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    b458:	46c0      	nop			; (mov r8, r8)
    b45a:	46bd      	mov	sp, r7
    b45c:	b005      	add	sp, #20
    b45e:	bd90      	pop	{r4, r7, pc}
    b460:	00006a42 	.word	0x00006a42
    b464:	00000220 	.word	0x00000220
    b468:	fffffe0f 	.word	0xfffffe0f
    b46c:	fffffe41 	.word	0xfffffe41

0000b470 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    b470:	b580      	push	{r7, lr}
    b472:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    b474:	4b0c      	ldr	r3, [pc, #48]	; (b4a8 <udd_wait_clock_ready+0x38>)
    b476:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    b478:	b29b      	uxth	r3, r3
    b47a:	001a      	movs	r2, r3
    b47c:	2320      	movs	r3, #32
    b47e:	4013      	ands	r3, r2
    b480:	d107      	bne.n	b492 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    b482:	46c0      	nop			; (mov r8, r8)
    b484:	4b08      	ldr	r3, [pc, #32]	; (b4a8 <udd_wait_clock_ready+0x38>)
    b486:	68db      	ldr	r3, [r3, #12]
    b488:	22d0      	movs	r2, #208	; 0xd0
    b48a:	4013      	ands	r3, r2
    b48c:	2bd0      	cmp	r3, #208	; 0xd0
    b48e:	d1f9      	bne.n	b484 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    b490:	e006      	b.n	b4a0 <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    b492:	46c0      	nop			; (mov r8, r8)
    b494:	4b04      	ldr	r3, [pc, #16]	; (b4a8 <udd_wait_clock_ready+0x38>)
    b496:	68db      	ldr	r3, [r3, #12]
    b498:	2210      	movs	r2, #16
    b49a:	4013      	ands	r3, r2
    b49c:	2b10      	cmp	r3, #16
    b49e:	d1f9      	bne.n	b494 <udd_wait_clock_ready+0x24>
}
    b4a0:	46c0      	nop			; (mov r8, r8)
    b4a2:	46bd      	mov	sp, r7
    b4a4:	bd80      	pop	{r7, pc}
    b4a6:	46c0      	nop			; (mov r8, r8)
    b4a8:	40000800 	.word	0x40000800

0000b4ac <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    b4ac:	b590      	push	{r4, r7, lr}
    b4ae:	b085      	sub	sp, #20
    b4b0:	af00      	add	r7, sp, #0
    b4b2:	0002      	movs	r2, r0
    b4b4:	1dfb      	adds	r3, r7, #7
    b4b6:	701a      	strb	r2, [r3, #0]
    b4b8:	4c1d      	ldr	r4, [pc, #116]	; (b530 <udd_sleep_mode+0x84>)
    b4ba:	447c      	add	r4, pc
	enum sleepmgr_mode sleep_mode[] = {
    b4bc:	230c      	movs	r3, #12
    b4be:	18fa      	adds	r2, r7, r3
    b4c0:	4b1c      	ldr	r3, [pc, #112]	; (b534 <udd_sleep_mode+0x88>)
    b4c2:	447b      	add	r3, pc
    b4c4:	0010      	movs	r0, r2
    b4c6:	0019      	movs	r1, r3
    b4c8:	2304      	movs	r3, #4
    b4ca:	001a      	movs	r2, r3
    b4cc:	4b1a      	ldr	r3, [pc, #104]	; (b538 <udd_sleep_mode+0x8c>)
    b4ce:	58e3      	ldr	r3, [r4, r3]
    b4d0:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    b4d2:	4b1a      	ldr	r3, [pc, #104]	; (b53c <udd_sleep_mode+0x90>)
    b4d4:	447b      	add	r3, pc
    b4d6:	781b      	ldrb	r3, [r3, #0]
    b4d8:	1dfa      	adds	r2, r7, #7
    b4da:	7812      	ldrb	r2, [r2, #0]
    b4dc:	429a      	cmp	r2, r3
    b4de:	d022      	beq.n	b526 <udd_sleep_mode+0x7a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    b4e0:	1dfb      	adds	r3, r7, #7
    b4e2:	781b      	ldrb	r3, [r3, #0]
    b4e4:	2b00      	cmp	r3, #0
    b4e6:	d008      	beq.n	b4fa <udd_sleep_mode+0x4e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    b4e8:	1dfb      	adds	r3, r7, #7
    b4ea:	781b      	ldrb	r3, [r3, #0]
    b4ec:	220c      	movs	r2, #12
    b4ee:	18ba      	adds	r2, r7, r2
    b4f0:	5cd3      	ldrb	r3, [r2, r3]
    b4f2:	0018      	movs	r0, r3
    b4f4:	4b12      	ldr	r3, [pc, #72]	; (b540 <udd_sleep_mode+0x94>)
    b4f6:	447b      	add	r3, pc
    b4f8:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    b4fa:	4b12      	ldr	r3, [pc, #72]	; (b544 <udd_sleep_mode+0x98>)
    b4fc:	447b      	add	r3, pc
    b4fe:	781b      	ldrb	r3, [r3, #0]
    b500:	2b00      	cmp	r3, #0
    b502:	d00a      	beq.n	b51a <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    b504:	4b10      	ldr	r3, [pc, #64]	; (b548 <udd_sleep_mode+0x9c>)
    b506:	447b      	add	r3, pc
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	001a      	movs	r2, r3
    b50c:	230c      	movs	r3, #12
    b50e:	18fb      	adds	r3, r7, r3
    b510:	5c9b      	ldrb	r3, [r3, r2]
    b512:	0018      	movs	r0, r3
    b514:	4b0d      	ldr	r3, [pc, #52]	; (b54c <udd_sleep_mode+0xa0>)
    b516:	447b      	add	r3, pc
    b518:	4798      	blx	r3
	}
	udd_state = new_state;
    b51a:	4b0d      	ldr	r3, [pc, #52]	; (b550 <udd_sleep_mode+0xa4>)
    b51c:	447b      	add	r3, pc
    b51e:	1dfa      	adds	r2, r7, #7
    b520:	7812      	ldrb	r2, [r2, #0]
    b522:	701a      	strb	r2, [r3, #0]
    b524:	e000      	b.n	b528 <udd_sleep_mode+0x7c>
		return; // No change
    b526:	46c0      	nop			; (mov r8, r8)
}
    b528:	46bd      	mov	sp, r7
    b52a:	b005      	add	sp, #20
    b52c:	bd90      	pop	{r4, r7, pc}
    b52e:	46c0      	nop			; (mov r8, r8)
    b530:	000069a6 	.word	0x000069a6
    b534:	000068ce 	.word	0x000068ce
    b538:	0000008c 	.word	0x0000008c
    b53c:	1fff5148 	.word	0x1fff5148
    b540:	fffffeb7 	.word	0xfffffeb7
    b544:	1fff5120 	.word	0x1fff5120
    b548:	1fff5116 	.word	0x1fff5116
    b54c:	fffffef7 	.word	0xfffffef7
    b550:	1fff5100 	.word	0x1fff5100

0000b554 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    b554:	b580      	push	{r7, lr}
    b556:	b082      	sub	sp, #8
    b558:	af00      	add	r7, sp, #0
    b55a:	0002      	movs	r2, r0
    b55c:	1dfb      	adds	r3, r7, #7
    b55e:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    b560:	1dfb      	adds	r3, r7, #7
    b562:	781b      	ldrb	r3, [r3, #0]
    b564:	2b00      	cmp	r3, #0
    b566:	d003      	beq.n	b570 <udd_ep_get_job+0x1c>
    b568:	1dfb      	adds	r3, r7, #7
    b56a:	781b      	ldrb	r3, [r3, #0]
    b56c:	2b80      	cmp	r3, #128	; 0x80
    b56e:	d101      	bne.n	b574 <udd_ep_get_job+0x20>
		return NULL;
    b570:	2300      	movs	r3, #0
    b572:	e013      	b.n	b59c <udd_ep_get_job+0x48>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    b574:	1dfb      	adds	r3, r7, #7
    b576:	781b      	ldrb	r3, [r3, #0]
    b578:	220f      	movs	r2, #15
    b57a:	4013      	ands	r3, r2
    b57c:	005b      	lsls	r3, r3, #1
    b57e:	1dfa      	adds	r2, r7, #7
    b580:	7812      	ldrb	r2, [r2, #0]
    b582:	b252      	sxtb	r2, r2
    b584:	b2d2      	uxtb	r2, r2
    b586:	09d2      	lsrs	r2, r2, #7
    b588:	b2d2      	uxtb	r2, r2
    b58a:	189b      	adds	r3, r3, r2
    b58c:	1e9a      	subs	r2, r3, #2
    b58e:	0013      	movs	r3, r2
    b590:	009b      	lsls	r3, r3, #2
    b592:	189b      	adds	r3, r3, r2
    b594:	009b      	lsls	r3, r3, #2
    b596:	4a03      	ldr	r2, [pc, #12]	; (b5a4 <udd_ep_get_job+0x50>)
    b598:	447a      	add	r2, pc
    b59a:	189b      	adds	r3, r3, r2
	}
}
    b59c:	0018      	movs	r0, r3
    b59e:	46bd      	mov	sp, r7
    b5a0:	b002      	add	sp, #8
    b5a2:	bd80      	pop	{r7, pc}
    b5a4:	1fff500c 	.word	0x1fff500c

0000b5a8 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    b5a8:	b5b0      	push	{r4, r5, r7, lr}
    b5aa:	b088      	sub	sp, #32
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
    b5b0:	4c5f      	ldr	r4, [pc, #380]	; (b730 <udd_ep_trans_in_next+0x188>)
    b5b2:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    b5b4:	687b      	ldr	r3, [r7, #4]
    b5b6:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    b5b8:	2317      	movs	r3, #23
    b5ba:	18fb      	adds	r3, r7, r3
    b5bc:	69ba      	ldr	r2, [r7, #24]
    b5be:	7992      	ldrb	r2, [r2, #6]
    b5c0:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    b5c2:	2317      	movs	r3, #23
    b5c4:	18fb      	adds	r3, r7, r3
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	0018      	movs	r0, r3
    b5ca:	4b5a      	ldr	r3, [pc, #360]	; (b734 <udd_ep_trans_in_next+0x18c>)
    b5cc:	447b      	add	r3, pc
    b5ce:	4798      	blx	r3
    b5d0:	0003      	movs	r3, r0
    b5d2:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    b5d4:	230f      	movs	r3, #15
    b5d6:	18fb      	adds	r3, r7, r3
    b5d8:	2217      	movs	r2, #23
    b5da:	18ba      	adds	r2, r7, r2
    b5dc:	7812      	ldrb	r2, [r2, #0]
    b5de:	210f      	movs	r1, #15
    b5e0:	400a      	ands	r2, r1
    b5e2:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    b5e4:	230c      	movs	r3, #12
    b5e6:	18fb      	adds	r3, r7, r3
    b5e8:	693a      	ldr	r2, [r7, #16]
    b5ea:	8a12      	ldrh	r2, [r2, #16]
    b5ec:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    b5ee:	230a      	movs	r3, #10
    b5f0:	18fb      	adds	r3, r7, r3
    b5f2:	69ba      	ldr	r2, [r7, #24]
    b5f4:	8852      	ldrh	r2, [r2, #2]
    b5f6:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    b5f8:	693b      	ldr	r3, [r7, #16]
    b5fa:	68da      	ldr	r2, [r3, #12]
    b5fc:	230a      	movs	r3, #10
    b5fe:	18fb      	adds	r3, r7, r3
    b600:	881b      	ldrh	r3, [r3, #0]
    b602:	18d2      	adds	r2, r2, r3
    b604:	693b      	ldr	r3, [r7, #16]
    b606:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    b608:	693b      	ldr	r3, [r7, #16]
    b60a:	68da      	ldr	r2, [r3, #12]
    b60c:	693b      	ldr	r3, [r7, #16]
    b60e:	689b      	ldr	r3, [r3, #8]
    b610:	429a      	cmp	r2, r3
    b612:	d05a      	beq.n	b6ca <udd_ep_trans_in_next+0x122>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    b614:	693b      	ldr	r3, [r7, #16]
    b616:	689b      	ldr	r3, [r3, #8]
    b618:	b299      	uxth	r1, r3
    b61a:	693b      	ldr	r3, [r7, #16]
    b61c:	68db      	ldr	r3, [r3, #12]
    b61e:	b29a      	uxth	r2, r3
    b620:	231e      	movs	r3, #30
    b622:	18fb      	adds	r3, r7, r3
    b624:	1a8a      	subs	r2, r1, r2
    b626:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    b628:	231e      	movs	r3, #30
    b62a:	18fb      	adds	r3, r7, r3
    b62c:	881b      	ldrh	r3, [r3, #0]
    b62e:	4a42      	ldr	r2, [pc, #264]	; (b738 <udd_ep_trans_in_next+0x190>)
    b630:	4293      	cmp	r3, r2
    b632:	d90e      	bls.n	b652 <udd_ep_trans_in_next+0xaa>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    b634:	230c      	movs	r3, #12
    b636:	18fb      	adds	r3, r7, r3
    b638:	881a      	ldrh	r2, [r3, #0]
    b63a:	483f      	ldr	r0, [pc, #252]	; (b738 <udd_ep_trans_in_next+0x190>)
    b63c:	4b3f      	ldr	r3, [pc, #252]	; (b73c <udd_ep_trans_in_next+0x194>)
    b63e:	58e3      	ldr	r3, [r4, r3]
    b640:	0011      	movs	r1, r2
    b642:	4798      	blx	r3
    b644:	000b      	movs	r3, r1
    b646:	b29a      	uxth	r2, r3
    b648:	231e      	movs	r3, #30
    b64a:	18fb      	adds	r3, r7, r3
    b64c:	493a      	ldr	r1, [pc, #232]	; (b738 <udd_ep_trans_in_next+0x190>)
    b64e:	1a8a      	subs	r2, r1, r2
    b650:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    b652:	693b      	ldr	r3, [r7, #16]
    b654:	7c9b      	ldrb	r3, [r3, #18]
    b656:	2202      	movs	r2, #2
    b658:	4013      	ands	r3, r2
    b65a:	b2db      	uxtb	r3, r3
    b65c:	2b00      	cmp	r3, #0
    b65e:	d00f      	beq.n	b680 <udd_ep_trans_in_next+0xd8>
    b660:	231e      	movs	r3, #30
    b662:	18fa      	adds	r2, r7, r3
    b664:	230c      	movs	r3, #12
    b666:	18fb      	adds	r3, r7, r3
    b668:	8812      	ldrh	r2, [r2, #0]
    b66a:	8819      	ldrh	r1, [r3, #0]
    b66c:	4b34      	ldr	r3, [pc, #208]	; (b740 <udd_ep_trans_in_next+0x198>)
    b66e:	58e3      	ldr	r3, [r4, r3]
    b670:	0010      	movs	r0, r2
    b672:	4798      	blx	r3
    b674:	000b      	movs	r3, r1
    b676:	b29b      	uxth	r3, r3
    b678:	2b00      	cmp	r3, #0
    b67a:	d101      	bne.n	b680 <udd_ep_trans_in_next+0xd8>
    b67c:	2301      	movs	r3, #1
    b67e:	e000      	b.n	b682 <udd_ep_trans_in_next+0xda>
    b680:	2300      	movs	r3, #0
    b682:	b2db      	uxtb	r3, r3
    b684:	1c1a      	adds	r2, r3, #0
    b686:	2301      	movs	r3, #1
    b688:	4013      	ands	r3, r2
    b68a:	b2da      	uxtb	r2, r3
    b68c:	693b      	ldr	r3, [r7, #16]
    b68e:	2101      	movs	r1, #1
    b690:	400a      	ands	r2, r1
    b692:	1890      	adds	r0, r2, r2
    b694:	7c9a      	ldrb	r2, [r3, #18]
    b696:	2102      	movs	r1, #2
    b698:	438a      	bics	r2, r1
    b69a:	1c11      	adds	r1, r2, #0
    b69c:	1c02      	adds	r2, r0, #0
    b69e:	430a      	orrs	r2, r1
    b6a0:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    b6a2:	693b      	ldr	r3, [r7, #16]
    b6a4:	685a      	ldr	r2, [r3, #4]
    b6a6:	693b      	ldr	r3, [r7, #16]
    b6a8:	68db      	ldr	r3, [r3, #12]
    b6aa:	18d2      	adds	r2, r2, r3
    b6ac:	231e      	movs	r3, #30
    b6ae:	18fb      	adds	r3, r7, r3
    b6b0:	8818      	ldrh	r0, [r3, #0]
    b6b2:	230f      	movs	r3, #15
    b6b4:	18fb      	adds	r3, r7, r3
    b6b6:	7819      	ldrb	r1, [r3, #0]
    b6b8:	4b22      	ldr	r3, [pc, #136]	; (b744 <udd_ep_trans_in_next+0x19c>)
    b6ba:	58e3      	ldr	r3, [r4, r3]
    b6bc:	001d      	movs	r5, r3
    b6be:	0003      	movs	r3, r0
    b6c0:	0028      	movs	r0, r5
    b6c2:	4d21      	ldr	r5, [pc, #132]	; (b748 <udd_ep_trans_in_next+0x1a0>)
    b6c4:	5964      	ldr	r4, [r4, r5]
    b6c6:	47a0      	blx	r4
		return;
    b6c8:	e02e      	b.n	b728 <udd_ep_trans_in_next+0x180>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    b6ca:	693b      	ldr	r3, [r7, #16]
    b6cc:	7c9b      	ldrb	r3, [r3, #18]
    b6ce:	2202      	movs	r2, #2
    b6d0:	4013      	ands	r3, r2
    b6d2:	b2db      	uxtb	r3, r3
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d014      	beq.n	b702 <udd_ep_trans_in_next+0x15a>
		ptr_job->b_shortpacket = false;
    b6d8:	693b      	ldr	r3, [r7, #16]
    b6da:	7c9a      	ldrb	r2, [r3, #18]
    b6dc:	2102      	movs	r1, #2
    b6de:	438a      	bics	r2, r1
    b6e0:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    b6e2:	693b      	ldr	r3, [r7, #16]
    b6e4:	685a      	ldr	r2, [r3, #4]
    b6e6:	693b      	ldr	r3, [r7, #16]
    b6e8:	68db      	ldr	r3, [r3, #12]
    b6ea:	18d2      	adds	r2, r2, r3
    b6ec:	230f      	movs	r3, #15
    b6ee:	18fb      	adds	r3, r7, r3
    b6f0:	7819      	ldrb	r1, [r3, #0]
    b6f2:	4b14      	ldr	r3, [pc, #80]	; (b744 <udd_ep_trans_in_next+0x19c>)
    b6f4:	58e3      	ldr	r3, [r4, r3]
    b6f6:	0018      	movs	r0, r3
    b6f8:	2300      	movs	r3, #0
    b6fa:	4d13      	ldr	r5, [pc, #76]	; (b748 <udd_ep_trans_in_next+0x1a0>)
    b6fc:	5964      	ldr	r4, [r4, r5]
    b6fe:	47a0      	blx	r4
		return;
    b700:	e012      	b.n	b728 <udd_ep_trans_in_next+0x180>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    b702:	693b      	ldr	r3, [r7, #16]
    b704:	7c9a      	ldrb	r2, [r3, #18]
    b706:	2101      	movs	r1, #1
    b708:	438a      	bics	r2, r1
    b70a:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    b70c:	693b      	ldr	r3, [r7, #16]
    b70e:	681b      	ldr	r3, [r3, #0]
    b710:	2b00      	cmp	r3, #0
    b712:	d009      	beq.n	b728 <udd_ep_trans_in_next+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    b714:	693b      	ldr	r3, [r7, #16]
    b716:	681c      	ldr	r4, [r3, #0]
    b718:	693b      	ldr	r3, [r7, #16]
    b71a:	68d9      	ldr	r1, [r3, #12]
    b71c:	2317      	movs	r3, #23
    b71e:	18fb      	adds	r3, r7, r3
    b720:	781b      	ldrb	r3, [r3, #0]
    b722:	001a      	movs	r2, r3
    b724:	2000      	movs	r0, #0
    b726:	47a0      	blx	r4
	}
}
    b728:	46bd      	mov	sp, r7
    b72a:	b008      	add	sp, #32
    b72c:	bdb0      	pop	{r4, r5, r7, pc}
    b72e:	46c0      	nop			; (mov r8, r8)
    b730:	000068ae 	.word	0x000068ae
    b734:	ffffff85 	.word	0xffffff85
    b738:	00001fff 	.word	0x00001fff
    b73c:	000002e8 	.word	0x000002e8
    b740:	00000270 	.word	0x00000270
    b744:	00000078 	.word	0x00000078
    b748:	00000300 	.word	0x00000300

0000b74c <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b74e:	b089      	sub	sp, #36	; 0x24
    b750:	af00      	add	r7, sp, #0
    b752:	6078      	str	r0, [r7, #4]
    b754:	4c74      	ldr	r4, [pc, #464]	; (b928 <udd_ep_trans_out_next+0x1dc>)
    b756:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    b75c:	2317      	movs	r3, #23
    b75e:	18fb      	adds	r3, r7, r3
    b760:	69ba      	ldr	r2, [r7, #24]
    b762:	7992      	ldrb	r2, [r2, #6]
    b764:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    b766:	2317      	movs	r3, #23
    b768:	18fb      	adds	r3, r7, r3
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	0018      	movs	r0, r3
    b76e:	4b6f      	ldr	r3, [pc, #444]	; (b92c <udd_ep_trans_out_next+0x1e0>)
    b770:	447b      	add	r3, pc
    b772:	4798      	blx	r3
    b774:	0003      	movs	r3, r0
    b776:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    b778:	230f      	movs	r3, #15
    b77a:	18fb      	adds	r3, r7, r3
    b77c:	2217      	movs	r2, #23
    b77e:	18ba      	adds	r2, r7, r2
    b780:	7812      	ldrb	r2, [r2, #0]
    b782:	210f      	movs	r1, #15
    b784:	400a      	ands	r2, r1
    b786:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    b788:	230c      	movs	r3, #12
    b78a:	18fb      	adds	r3, r7, r3
    b78c:	693a      	ldr	r2, [r7, #16]
    b78e:	8a12      	ldrh	r2, [r2, #16]
    b790:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    b792:	230a      	movs	r3, #10
    b794:	18fb      	adds	r3, r7, r3
    b796:	69ba      	ldr	r2, [r7, #24]
    b798:	8812      	ldrh	r2, [r2, #0]
    b79a:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    b79c:	693b      	ldr	r3, [r7, #16]
    b79e:	7c9b      	ldrb	r3, [r3, #18]
    b7a0:	2204      	movs	r2, #4
    b7a2:	4013      	ands	r3, r2
    b7a4:	b2db      	uxtb	r3, r3
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d01c      	beq.n	b7e4 <udd_ep_trans_out_next+0x98>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    b7aa:	693b      	ldr	r3, [r7, #16]
    b7ac:	685a      	ldr	r2, [r3, #4]
    b7ae:	693b      	ldr	r3, [r7, #16]
    b7b0:	68db      	ldr	r3, [r3, #12]
    b7b2:	18d5      	adds	r5, r2, r3
    b7b4:	230f      	movs	r3, #15
    b7b6:	18fb      	adds	r3, r7, r3
    b7b8:	781b      	ldrb	r3, [r3, #0]
    b7ba:	3b01      	subs	r3, #1
    b7bc:	019b      	lsls	r3, r3, #6
    b7be:	4a5c      	ldr	r2, [pc, #368]	; (b930 <udd_ep_trans_out_next+0x1e4>)
    b7c0:	58a2      	ldr	r2, [r4, r2]
    b7c2:	189e      	adds	r6, r3, r2
    b7c4:	693b      	ldr	r3, [r7, #16]
    b7c6:	689a      	ldr	r2, [r3, #8]
    b7c8:	230c      	movs	r3, #12
    b7ca:	18fb      	adds	r3, r7, r3
    b7cc:	8819      	ldrh	r1, [r3, #0]
    b7ce:	4b59      	ldr	r3, [pc, #356]	; (b934 <udd_ep_trans_out_next+0x1e8>)
    b7d0:	58e3      	ldr	r3, [r4, r3]
    b7d2:	0010      	movs	r0, r2
    b7d4:	4798      	blx	r3
    b7d6:	000b      	movs	r3, r1
    b7d8:	001a      	movs	r2, r3
    b7da:	0031      	movs	r1, r6
    b7dc:	0028      	movs	r0, r5
    b7de:	4b56      	ldr	r3, [pc, #344]	; (b938 <udd_ep_trans_out_next+0x1ec>)
    b7e0:	58e3      	ldr	r3, [r4, r3]
    b7e2:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    b7e4:	693b      	ldr	r3, [r7, #16]
    b7e6:	68da      	ldr	r2, [r3, #12]
    b7e8:	230a      	movs	r3, #10
    b7ea:	18fb      	adds	r3, r7, r3
    b7ec:	881b      	ldrh	r3, [r3, #0]
    b7ee:	18d2      	adds	r2, r2, r3
    b7f0:	693b      	ldr	r3, [r7, #16]
    b7f2:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    b7f4:	693b      	ldr	r3, [r7, #16]
    b7f6:	68da      	ldr	r2, [r3, #12]
    b7f8:	693b      	ldr	r3, [r7, #16]
    b7fa:	689b      	ldr	r3, [r3, #8]
    b7fc:	429a      	cmp	r2, r3
    b7fe:	d903      	bls.n	b808 <udd_ep_trans_out_next+0xbc>
		ptr_job->nb_trans = ptr_job->buf_size;
    b800:	693b      	ldr	r3, [r7, #16]
    b802:	689a      	ldr	r2, [r3, #8]
    b804:	693b      	ldr	r3, [r7, #16]
    b806:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    b808:	69bb      	ldr	r3, [r7, #24]
    b80a:	889b      	ldrh	r3, [r3, #4]
    b80c:	220a      	movs	r2, #10
    b80e:	18ba      	adds	r2, r7, r2
    b810:	8812      	ldrh	r2, [r2, #0]
    b812:	429a      	cmp	r2, r3
    b814:	d000      	beq.n	b818 <udd_ep_trans_out_next+0xcc>
    b816:	e071      	b.n	b8fc <udd_ep_trans_out_next+0x1b0>
    b818:	693b      	ldr	r3, [r7, #16]
    b81a:	68da      	ldr	r2, [r3, #12]
    b81c:	693b      	ldr	r3, [r7, #16]
    b81e:	689b      	ldr	r3, [r3, #8]
    b820:	429a      	cmp	r2, r3
    b822:	d100      	bne.n	b826 <udd_ep_trans_out_next+0xda>
    b824:	e06a      	b.n	b8fc <udd_ep_trans_out_next+0x1b0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    b826:	693b      	ldr	r3, [r7, #16]
    b828:	689b      	ldr	r3, [r3, #8]
    b82a:	b299      	uxth	r1, r3
    b82c:	693b      	ldr	r3, [r7, #16]
    b82e:	68db      	ldr	r3, [r3, #12]
    b830:	b29a      	uxth	r2, r3
    b832:	231e      	movs	r3, #30
    b834:	18fb      	adds	r3, r7, r3
    b836:	1a8a      	subs	r2, r1, r2
    b838:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    b83a:	231e      	movs	r3, #30
    b83c:	18fb      	adds	r3, r7, r3
    b83e:	881b      	ldrh	r3, [r3, #0]
    b840:	4a3e      	ldr	r2, [pc, #248]	; (b93c <udd_ep_trans_out_next+0x1f0>)
    b842:	4293      	cmp	r3, r2
    b844:	d90f      	bls.n	b866 <udd_ep_trans_out_next+0x11a>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    b846:	230c      	movs	r3, #12
    b848:	18fb      	adds	r3, r7, r3
    b84a:	881a      	ldrh	r2, [r3, #0]
    b84c:	483b      	ldr	r0, [pc, #236]	; (b93c <udd_ep_trans_out_next+0x1f0>)
    b84e:	4b3c      	ldr	r3, [pc, #240]	; (b940 <udd_ep_trans_out_next+0x1f4>)
    b850:	58e3      	ldr	r3, [r4, r3]
    b852:	0011      	movs	r1, r2
    b854:	4798      	blx	r3
    b856:	000b      	movs	r3, r1
    b858:	b29a      	uxth	r2, r3
    b85a:	231e      	movs	r3, #30
    b85c:	18fb      	adds	r3, r7, r3
    b85e:	4937      	ldr	r1, [pc, #220]	; (b93c <udd_ep_trans_out_next+0x1f0>)
    b860:	1a8a      	subs	r2, r1, r2
    b862:	801a      	strh	r2, [r3, #0]
    b864:	e012      	b.n	b88c <udd_ep_trans_out_next+0x140>
		} else {
			next_trans -= next_trans % ep_size;
    b866:	231e      	movs	r3, #30
    b868:	18fa      	adds	r2, r7, r3
    b86a:	230c      	movs	r3, #12
    b86c:	18fb      	adds	r3, r7, r3
    b86e:	8812      	ldrh	r2, [r2, #0]
    b870:	8819      	ldrh	r1, [r3, #0]
    b872:	4b30      	ldr	r3, [pc, #192]	; (b934 <udd_ep_trans_out_next+0x1e8>)
    b874:	58e3      	ldr	r3, [r4, r3]
    b876:	0010      	movs	r0, r2
    b878:	4798      	blx	r3
    b87a:	000b      	movs	r3, r1
    b87c:	b29a      	uxth	r2, r3
    b87e:	231e      	movs	r3, #30
    b880:	18fb      	adds	r3, r7, r3
    b882:	211e      	movs	r1, #30
    b884:	1879      	adds	r1, r7, r1
    b886:	8809      	ldrh	r1, [r1, #0]
    b888:	1a8a      	subs	r2, r1, r2
    b88a:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    b88c:	231e      	movs	r3, #30
    b88e:	18fa      	adds	r2, r7, r3
    b890:	230c      	movs	r3, #12
    b892:	18fb      	adds	r3, r7, r3
    b894:	8812      	ldrh	r2, [r2, #0]
    b896:	881b      	ldrh	r3, [r3, #0]
    b898:	429a      	cmp	r2, r3
    b89a:	d21b      	bcs.n	b8d4 <udd_ep_trans_out_next+0x188>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    b89c:	693b      	ldr	r3, [r7, #16]
    b89e:	7c9a      	ldrb	r2, [r3, #18]
    b8a0:	2104      	movs	r1, #4
    b8a2:	430a      	orrs	r2, r1
    b8a4:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    b8a6:	230f      	movs	r3, #15
    b8a8:	18fb      	adds	r3, r7, r3
    b8aa:	781b      	ldrb	r3, [r3, #0]
    b8ac:	3b01      	subs	r3, #1
    b8ae:	019b      	lsls	r3, r3, #6
    b8b0:	4a1f      	ldr	r2, [pc, #124]	; (b930 <udd_ep_trans_out_next+0x1e4>)
    b8b2:	58a2      	ldr	r2, [r4, r2]
    b8b4:	189a      	adds	r2, r3, r2
    b8b6:	230c      	movs	r3, #12
    b8b8:	18fb      	adds	r3, r7, r3
    b8ba:	8818      	ldrh	r0, [r3, #0]
    b8bc:	230f      	movs	r3, #15
    b8be:	18fb      	adds	r3, r7, r3
    b8c0:	7819      	ldrb	r1, [r3, #0]
    b8c2:	4b20      	ldr	r3, [pc, #128]	; (b944 <udd_ep_trans_out_next+0x1f8>)
    b8c4:	58e3      	ldr	r3, [r4, r3]
    b8c6:	001d      	movs	r5, r3
    b8c8:	0003      	movs	r3, r0
    b8ca:	0028      	movs	r0, r5
    b8cc:	4d1e      	ldr	r5, [pc, #120]	; (b948 <udd_ep_trans_out_next+0x1fc>)
    b8ce:	5964      	ldr	r4, [r4, r5]
    b8d0:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    b8d2:	e026      	b.n	b922 <udd_ep_trans_out_next+0x1d6>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    b8d4:	693b      	ldr	r3, [r7, #16]
    b8d6:	685a      	ldr	r2, [r3, #4]
    b8d8:	693b      	ldr	r3, [r7, #16]
    b8da:	68db      	ldr	r3, [r3, #12]
    b8dc:	18d2      	adds	r2, r2, r3
    b8de:	231e      	movs	r3, #30
    b8e0:	18fb      	adds	r3, r7, r3
    b8e2:	8818      	ldrh	r0, [r3, #0]
    b8e4:	230f      	movs	r3, #15
    b8e6:	18fb      	adds	r3, r7, r3
    b8e8:	7819      	ldrb	r1, [r3, #0]
    b8ea:	4b16      	ldr	r3, [pc, #88]	; (b944 <udd_ep_trans_out_next+0x1f8>)
    b8ec:	58e3      	ldr	r3, [r4, r3]
    b8ee:	001d      	movs	r5, r3
    b8f0:	0003      	movs	r3, r0
    b8f2:	0028      	movs	r0, r5
    b8f4:	4d14      	ldr	r5, [pc, #80]	; (b948 <udd_ep_trans_out_next+0x1fc>)
    b8f6:	5964      	ldr	r4, [r4, r5]
    b8f8:	47a0      	blx	r4
		return;
    b8fa:	e012      	b.n	b922 <udd_ep_trans_out_next+0x1d6>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    b8fc:	693b      	ldr	r3, [r7, #16]
    b8fe:	7c9a      	ldrb	r2, [r3, #18]
    b900:	2101      	movs	r1, #1
    b902:	438a      	bics	r2, r1
    b904:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    b906:	693b      	ldr	r3, [r7, #16]
    b908:	681b      	ldr	r3, [r3, #0]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d009      	beq.n	b922 <udd_ep_trans_out_next+0x1d6>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    b90e:	693b      	ldr	r3, [r7, #16]
    b910:	681c      	ldr	r4, [r3, #0]
    b912:	693b      	ldr	r3, [r7, #16]
    b914:	68d9      	ldr	r1, [r3, #12]
    b916:	2317      	movs	r3, #23
    b918:	18fb      	adds	r3, r7, r3
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	001a      	movs	r2, r3
    b91e:	2000      	movs	r0, #0
    b920:	47a0      	blx	r4
	}
}
    b922:	46bd      	mov	sp, r7
    b924:	b009      	add	sp, #36	; 0x24
    b926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b928:	0000670a 	.word	0x0000670a
    b92c:	fffffde1 	.word	0xfffffde1
    b930:	0000001c 	.word	0x0000001c
    b934:	00000270 	.word	0x00000270
    b938:	0000008c 	.word	0x0000008c
    b93c:	00001fff 	.word	0x00001fff
    b940:	000002e8 	.word	0x000002e8
    b944:	00000078 	.word	0x00000078
    b948:	0000014c 	.word	0x0000014c

0000b94c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    b94c:	b580      	push	{r7, lr}
    b94e:	b084      	sub	sp, #16
    b950:	af00      	add	r7, sp, #0
    b952:	6078      	str	r0, [r7, #4]
    b954:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    b956:	683b      	ldr	r3, [r7, #0]
    b958:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    b95a:	230b      	movs	r3, #11
    b95c:	18fb      	adds	r3, r7, r3
    b95e:	68fa      	ldr	r2, [r7, #12]
    b960:	7992      	ldrb	r2, [r2, #6]
    b962:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    b964:	230b      	movs	r3, #11
    b966:	18fb      	adds	r3, r7, r3
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	b25b      	sxtb	r3, r3
    b96c:	2b00      	cmp	r3, #0
    b96e:	da05      	bge.n	b97c <udd_ep_transfer_process+0x30>
		udd_ep_trans_in_next(pointer);
    b970:	683b      	ldr	r3, [r7, #0]
    b972:	0018      	movs	r0, r3
    b974:	4b06      	ldr	r3, [pc, #24]	; (b990 <udd_ep_transfer_process+0x44>)
    b976:	447b      	add	r3, pc
    b978:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    b97a:	e004      	b.n	b986 <udd_ep_transfer_process+0x3a>
		udd_ep_trans_out_next(pointer);
    b97c:	683b      	ldr	r3, [r7, #0]
    b97e:	0018      	movs	r0, r3
    b980:	4b04      	ldr	r3, [pc, #16]	; (b994 <udd_ep_transfer_process+0x48>)
    b982:	447b      	add	r3, pc
    b984:	4798      	blx	r3
}
    b986:	46c0      	nop			; (mov r8, r8)
    b988:	46bd      	mov	sp, r7
    b98a:	b004      	add	sp, #16
    b98c:	bd80      	pop	{r7, pc}
    b98e:	46c0      	nop			; (mov r8, r8)
    b990:	fffffc2f 	.word	0xfffffc2f
    b994:	fffffdc7 	.word	0xfffffdc7

0000b998 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    b998:	b590      	push	{r4, r7, lr}
    b99a:	b085      	sub	sp, #20
    b99c:	af00      	add	r7, sp, #0
    b99e:	0002      	movs	r2, r0
    b9a0:	1dfb      	adds	r3, r7, #7
    b9a2:	701a      	strb	r2, [r3, #0]
    b9a4:	4b17      	ldr	r3, [pc, #92]	; (ba04 <udd_ep_abort+0x6c>)
    b9a6:	447b      	add	r3, pc
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    b9a8:	1dfa      	adds	r2, r7, #7
    b9aa:	7811      	ldrb	r1, [r2, #0]
    b9ac:	4a16      	ldr	r2, [pc, #88]	; (ba08 <udd_ep_abort+0x70>)
    b9ae:	589a      	ldr	r2, [r3, r2]
    b9b0:	0010      	movs	r0, r2
    b9b2:	4a16      	ldr	r2, [pc, #88]	; (ba0c <udd_ep_abort+0x74>)
    b9b4:	589b      	ldr	r3, [r3, r2]
    b9b6:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    b9b8:	1dfb      	adds	r3, r7, #7
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	0018      	movs	r0, r3
    b9be:	4b14      	ldr	r3, [pc, #80]	; (ba10 <udd_ep_abort+0x78>)
    b9c0:	447b      	add	r3, pc
    b9c2:	4798      	blx	r3
    b9c4:	0003      	movs	r3, r0
    b9c6:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    b9c8:	68fb      	ldr	r3, [r7, #12]
    b9ca:	7c9b      	ldrb	r3, [r3, #18]
    b9cc:	2201      	movs	r2, #1
    b9ce:	4013      	ands	r3, r2
    b9d0:	b2db      	uxtb	r3, r3
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d012      	beq.n	b9fc <udd_ep_abort+0x64>
		return;
	}
	ptr_job->busy = false;
    b9d6:	68fb      	ldr	r3, [r7, #12]
    b9d8:	7c9a      	ldrb	r2, [r3, #18]
    b9da:	2101      	movs	r1, #1
    b9dc:	438a      	bics	r2, r1
    b9de:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    b9e0:	68fb      	ldr	r3, [r7, #12]
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d00a      	beq.n	b9fe <udd_ep_abort+0x66>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    b9e8:	68fb      	ldr	r3, [r7, #12]
    b9ea:	681c      	ldr	r4, [r3, #0]
    b9ec:	68fb      	ldr	r3, [r7, #12]
    b9ee:	68d9      	ldr	r1, [r3, #12]
    b9f0:	1dfb      	adds	r3, r7, #7
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	001a      	movs	r2, r3
    b9f6:	2001      	movs	r0, #1
    b9f8:	47a0      	blx	r4
    b9fa:	e000      	b.n	b9fe <udd_ep_abort+0x66>
		return;
    b9fc:	46c0      	nop			; (mov r8, r8)
	}
}
    b9fe:	46bd      	mov	sp, r7
    ba00:	b005      	add	sp, #20
    ba02:	bd90      	pop	{r4, r7, pc}
    ba04:	000064ba 	.word	0x000064ba
    ba08:	00000078 	.word	0x00000078
    ba0c:	00000010 	.word	0x00000010
    ba10:	fffffb91 	.word	0xfffffb91

0000ba14 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    ba14:	b580      	push	{r7, lr}
    ba16:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1 || SAMR30
	return false;
    ba18:	2300      	movs	r3, #0
#endif
}
    ba1a:	0018      	movs	r0, r3
    ba1c:	46bd      	mov	sp, r7
    ba1e:	bd80      	pop	{r7, pc}

0000ba20 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    ba20:	b580      	push	{r7, lr}
    ba22:	af00      	add	r7, sp, #0
    ba24:	4a05      	ldr	r2, [pc, #20]	; (ba3c <udd_get_frame_number+0x1c>)
    ba26:	447a      	add	r2, pc
	return usb_device_get_frame_number(&usb_device);
    ba28:	4b05      	ldr	r3, [pc, #20]	; (ba40 <udd_get_frame_number+0x20>)
    ba2a:	58d3      	ldr	r3, [r2, r3]
    ba2c:	0018      	movs	r0, r3
    ba2e:	4b05      	ldr	r3, [pc, #20]	; (ba44 <udd_get_frame_number+0x24>)
    ba30:	447b      	add	r3, pc
    ba32:	4798      	blx	r3
    ba34:	0003      	movs	r3, r0
}
    ba36:	0018      	movs	r0, r3
    ba38:	46bd      	mov	sp, r7
    ba3a:	bd80      	pop	{r7, pc}
    ba3c:	0000643a 	.word	0x0000643a
    ba40:	00000078 	.word	0x00000078
    ba44:	fffff909 	.word	0xfffff909

0000ba48 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    ba48:	b580      	push	{r7, lr}
    ba4a:	af00      	add	r7, sp, #0
    ba4c:	4a05      	ldr	r2, [pc, #20]	; (ba64 <udd_get_micro_frame_number+0x1c>)
    ba4e:	447a      	add	r2, pc
	return usb_device_get_micro_frame_number(&usb_device);
    ba50:	4b05      	ldr	r3, [pc, #20]	; (ba68 <udd_get_micro_frame_number+0x20>)
    ba52:	58d3      	ldr	r3, [r2, r3]
    ba54:	0018      	movs	r0, r3
    ba56:	4b05      	ldr	r3, [pc, #20]	; (ba6c <udd_get_micro_frame_number+0x24>)
    ba58:	447b      	add	r3, pc
    ba5a:	4798      	blx	r3
    ba5c:	0003      	movs	r3, r0
}
    ba5e:	0018      	movs	r0, r3
    ba60:	46bd      	mov	sp, r7
    ba62:	bd80      	pop	{r7, pc}
    ba64:	00006412 	.word	0x00006412
    ba68:	00000078 	.word	0x00000078
    ba6c:	fffff8fd 	.word	0xfffff8fd

0000ba70 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    ba70:	b590      	push	{r4, r7, lr}
    ba72:	b085      	sub	sp, #20
    ba74:	af00      	add	r7, sp, #0
    ba76:	0002      	movs	r2, r0
    ba78:	1dfb      	adds	r3, r7, #7
    ba7a:	701a      	strb	r2, [r3, #0]
    ba7c:	4c1e      	ldr	r4, [pc, #120]	; (baf8 <udd_ep_free+0x88>)
    ba7e:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    ba80:	2308      	movs	r3, #8
    ba82:	18fb      	adds	r3, r7, r3
    ba84:	0018      	movs	r0, r3
    ba86:	4b1d      	ldr	r3, [pc, #116]	; (bafc <udd_ep_free+0x8c>)
    ba88:	58e3      	ldr	r3, [r4, r3]
    ba8a:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    ba8c:	230f      	movs	r3, #15
    ba8e:	18fb      	adds	r3, r7, r3
    ba90:	1dfa      	adds	r2, r7, #7
    ba92:	7812      	ldrb	r2, [r2, #0]
    ba94:	210f      	movs	r1, #15
    ba96:	400a      	ands	r2, r1
    ba98:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    ba9a:	1dfb      	adds	r3, r7, #7
    ba9c:	781b      	ldrb	r3, [r3, #0]
    ba9e:	0018      	movs	r0, r3
    baa0:	4b17      	ldr	r3, [pc, #92]	; (bb00 <udd_ep_free+0x90>)
    baa2:	58e3      	ldr	r3, [r4, r3]
    baa4:	4798      	blx	r3

	config_ep.ep_address = ep;
    baa6:	2308      	movs	r3, #8
    baa8:	18fb      	adds	r3, r7, r3
    baaa:	1dfa      	adds	r2, r7, #7
    baac:	7812      	ldrb	r2, [r2, #0]
    baae:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    bab0:	2308      	movs	r3, #8
    bab2:	18fb      	adds	r3, r7, r3
    bab4:	2200      	movs	r2, #0
    bab6:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    bab8:	2308      	movs	r3, #8
    baba:	18fa      	adds	r2, r7, r3
    babc:	4b11      	ldr	r3, [pc, #68]	; (bb04 <udd_ep_free+0x94>)
    babe:	58e3      	ldr	r3, [r4, r3]
    bac0:	0011      	movs	r1, r2
    bac2:	0018      	movs	r0, r3
    bac4:	4b10      	ldr	r3, [pc, #64]	; (bb08 <udd_ep_free+0x98>)
    bac6:	58e3      	ldr	r3, [r4, r3]
    bac8:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    baca:	230f      	movs	r3, #15
    bacc:	18fb      	adds	r3, r7, r3
    bace:	7819      	ldrb	r1, [r3, #0]
    bad0:	4b0c      	ldr	r3, [pc, #48]	; (bb04 <udd_ep_free+0x94>)
    bad2:	58e3      	ldr	r3, [r4, r3]
    bad4:	2200      	movs	r2, #0
    bad6:	0018      	movs	r0, r3
    bad8:	4b0c      	ldr	r3, [pc, #48]	; (bb0c <udd_ep_free+0x9c>)
    bada:	58e3      	ldr	r3, [r4, r3]
    badc:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    bade:	1dfb      	adds	r3, r7, #7
    bae0:	7819      	ldrb	r1, [r3, #0]
    bae2:	4b08      	ldr	r3, [pc, #32]	; (bb04 <udd_ep_free+0x94>)
    bae4:	58e3      	ldr	r3, [r4, r3]
    bae6:	2200      	movs	r2, #0
    bae8:	0018      	movs	r0, r3
    baea:	4b09      	ldr	r3, [pc, #36]	; (bb10 <udd_ep_free+0xa0>)
    baec:	58e3      	ldr	r3, [r4, r3]
    baee:	4798      	blx	r3
}
    baf0:	46c0      	nop			; (mov r8, r8)
    baf2:	46bd      	mov	sp, r7
    baf4:	b005      	add	sp, #20
    baf6:	bd90      	pop	{r4, r7, pc}
    baf8:	000063e2 	.word	0x000063e2
    bafc:	00000104 	.word	0x00000104
    bb00:	000001b8 	.word	0x000001b8
    bb04:	00000078 	.word	0x00000078
    bb08:	00000074 	.word	0x00000074
    bb0c:	00000144 	.word	0x00000144
    bb10:	000001d8 	.word	0x000001d8

0000bb14 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    bb14:	b5b0      	push	{r4, r5, r7, lr}
    bb16:	b086      	sub	sp, #24
    bb18:	af00      	add	r7, sp, #0
    bb1a:	0004      	movs	r4, r0
    bb1c:	0008      	movs	r0, r1
    bb1e:	0011      	movs	r1, r2
    bb20:	1dfb      	adds	r3, r7, #7
    bb22:	1c22      	adds	r2, r4, #0
    bb24:	701a      	strb	r2, [r3, #0]
    bb26:	1dbb      	adds	r3, r7, #6
    bb28:	1c02      	adds	r2, r0, #0
    bb2a:	701a      	strb	r2, [r3, #0]
    bb2c:	1d3b      	adds	r3, r7, #4
    bb2e:	1c0a      	adds	r2, r1, #0
    bb30:	801a      	strh	r2, [r3, #0]
    bb32:	4c62      	ldr	r4, [pc, #392]	; (bcbc <udd_ep_alloc+0x1a8>)
    bb34:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    bb36:	230c      	movs	r3, #12
    bb38:	18fb      	adds	r3, r7, r3
    bb3a:	0018      	movs	r0, r3
    bb3c:	4b60      	ldr	r3, [pc, #384]	; (bcc0 <udd_ep_alloc+0x1ac>)
    bb3e:	58e3      	ldr	r3, [r4, r3]
    bb40:	4798      	blx	r3

	config_ep.ep_address = ep;
    bb42:	230c      	movs	r3, #12
    bb44:	18fb      	adds	r3, r7, r3
    bb46:	1dfa      	adds	r2, r7, #7
    bb48:	7812      	ldrb	r2, [r2, #0]
    bb4a:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    bb4c:	1d3b      	adds	r3, r7, #4
    bb4e:	881b      	ldrh	r3, [r3, #0]
    bb50:	2b08      	cmp	r3, #8
    bb52:	d804      	bhi.n	bb5e <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    bb54:	230c      	movs	r3, #12
    bb56:	18fb      	adds	r3, r7, r3
    bb58:	2200      	movs	r2, #0
    bb5a:	705a      	strb	r2, [r3, #1]
    bb5c:	e045      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 16) {
    bb5e:	1d3b      	adds	r3, r7, #4
    bb60:	881b      	ldrh	r3, [r3, #0]
    bb62:	2b10      	cmp	r3, #16
    bb64:	d804      	bhi.n	bb70 <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    bb66:	230c      	movs	r3, #12
    bb68:	18fb      	adds	r3, r7, r3
    bb6a:	2201      	movs	r2, #1
    bb6c:	705a      	strb	r2, [r3, #1]
    bb6e:	e03c      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 32) {
    bb70:	1d3b      	adds	r3, r7, #4
    bb72:	881b      	ldrh	r3, [r3, #0]
    bb74:	2b20      	cmp	r3, #32
    bb76:	d804      	bhi.n	bb82 <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    bb78:	230c      	movs	r3, #12
    bb7a:	18fb      	adds	r3, r7, r3
    bb7c:	2202      	movs	r2, #2
    bb7e:	705a      	strb	r2, [r3, #1]
    bb80:	e033      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 64) {
    bb82:	1d3b      	adds	r3, r7, #4
    bb84:	881b      	ldrh	r3, [r3, #0]
    bb86:	2b40      	cmp	r3, #64	; 0x40
    bb88:	d804      	bhi.n	bb94 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    bb8a:	230c      	movs	r3, #12
    bb8c:	18fb      	adds	r3, r7, r3
    bb8e:	2203      	movs	r2, #3
    bb90:	705a      	strb	r2, [r3, #1]
    bb92:	e02a      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 128) {
    bb94:	1d3b      	adds	r3, r7, #4
    bb96:	881b      	ldrh	r3, [r3, #0]
    bb98:	2b80      	cmp	r3, #128	; 0x80
    bb9a:	d804      	bhi.n	bba6 <udd_ep_alloc+0x92>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    bb9c:	230c      	movs	r3, #12
    bb9e:	18fb      	adds	r3, r7, r3
    bba0:	2204      	movs	r2, #4
    bba2:	705a      	strb	r2, [r3, #1]
    bba4:	e021      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 256) {
    bba6:	1d3b      	adds	r3, r7, #4
    bba8:	881a      	ldrh	r2, [r3, #0]
    bbaa:	2380      	movs	r3, #128	; 0x80
    bbac:	005b      	lsls	r3, r3, #1
    bbae:	429a      	cmp	r2, r3
    bbb0:	d804      	bhi.n	bbbc <udd_ep_alloc+0xa8>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    bbb2:	230c      	movs	r3, #12
    bbb4:	18fb      	adds	r3, r7, r3
    bbb6:	2205      	movs	r2, #5
    bbb8:	705a      	strb	r2, [r3, #1]
    bbba:	e016      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 512) {
    bbbc:	1d3b      	adds	r3, r7, #4
    bbbe:	881a      	ldrh	r2, [r3, #0]
    bbc0:	2380      	movs	r3, #128	; 0x80
    bbc2:	009b      	lsls	r3, r3, #2
    bbc4:	429a      	cmp	r2, r3
    bbc6:	d804      	bhi.n	bbd2 <udd_ep_alloc+0xbe>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    bbc8:	230c      	movs	r3, #12
    bbca:	18fb      	adds	r3, r7, r3
    bbcc:	2206      	movs	r2, #6
    bbce:	705a      	strb	r2, [r3, #1]
    bbd0:	e00b      	b.n	bbea <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 1023) {
    bbd2:	1d3b      	adds	r3, r7, #4
    bbd4:	881b      	ldrh	r3, [r3, #0]
    bbd6:	4a3b      	ldr	r2, [pc, #236]	; (bcc4 <udd_ep_alloc+0x1b0>)
    bbd8:	4293      	cmp	r3, r2
    bbda:	d804      	bhi.n	bbe6 <udd_ep_alloc+0xd2>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    bbdc:	230c      	movs	r3, #12
    bbde:	18fb      	adds	r3, r7, r3
    bbe0:	2207      	movs	r2, #7
    bbe2:	705a      	strb	r2, [r3, #1]
    bbe4:	e001      	b.n	bbea <udd_ep_alloc+0xd6>
	} else {
		return false;
    bbe6:	2300      	movs	r3, #0
    bbe8:	e063      	b.n	bcb2 <udd_ep_alloc+0x19e>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    bbea:	1dfb      	adds	r3, r7, #7
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	0018      	movs	r0, r3
    bbf0:	4b35      	ldr	r3, [pc, #212]	; (bcc8 <udd_ep_alloc+0x1b4>)
    bbf2:	447b      	add	r3, pc
    bbf4:	4798      	blx	r3
    bbf6:	0003      	movs	r3, r0
    bbf8:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    bbfa:	697b      	ldr	r3, [r7, #20]
    bbfc:	1d3a      	adds	r2, r7, #4
    bbfe:	8812      	ldrh	r2, [r2, #0]
    bc00:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    bc02:	1dbb      	adds	r3, r7, #6
    bc04:	1dba      	adds	r2, r7, #6
    bc06:	7812      	ldrb	r2, [r2, #0]
    bc08:	2103      	movs	r1, #3
    bc0a:	400a      	ands	r2, r1
    bc0c:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    bc0e:	1dbb      	adds	r3, r7, #6
    bc10:	781b      	ldrb	r3, [r3, #0]
    bc12:	2b01      	cmp	r3, #1
    bc14:	d104      	bne.n	bc20 <udd_ep_alloc+0x10c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    bc16:	230c      	movs	r3, #12
    bc18:	18fb      	adds	r3, r7, r3
    bc1a:	2202      	movs	r2, #2
    bc1c:	70da      	strb	r2, [r3, #3]
    bc1e:	e013      	b.n	bc48 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    bc20:	1dbb      	adds	r3, r7, #6
    bc22:	781b      	ldrb	r3, [r3, #0]
    bc24:	2b02      	cmp	r3, #2
    bc26:	d104      	bne.n	bc32 <udd_ep_alloc+0x11e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    bc28:	230c      	movs	r3, #12
    bc2a:	18fb      	adds	r3, r7, r3
    bc2c:	2203      	movs	r2, #3
    bc2e:	70da      	strb	r2, [r3, #3]
    bc30:	e00a      	b.n	bc48 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    bc32:	1dbb      	adds	r3, r7, #6
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	2b03      	cmp	r3, #3
    bc38:	d104      	bne.n	bc44 <udd_ep_alloc+0x130>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    bc3a:	230c      	movs	r3, #12
    bc3c:	18fb      	adds	r3, r7, r3
    bc3e:	2204      	movs	r2, #4
    bc40:	70da      	strb	r2, [r3, #3]
    bc42:	e001      	b.n	bc48 <udd_ep_alloc+0x134>
	} else {
		return false;
    bc44:	2300      	movs	r3, #0
    bc46:	e034      	b.n	bcb2 <udd_ep_alloc+0x19e>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    bc48:	2313      	movs	r3, #19
    bc4a:	18fb      	adds	r3, r7, r3
    bc4c:	1dfa      	adds	r2, r7, #7
    bc4e:	7812      	ldrb	r2, [r2, #0]
    bc50:	210f      	movs	r1, #15
    bc52:	400a      	ands	r2, r1
    bc54:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    bc56:	230c      	movs	r3, #12
    bc58:	18fa      	adds	r2, r7, r3
    bc5a:	4b1c      	ldr	r3, [pc, #112]	; (bccc <udd_ep_alloc+0x1b8>)
    bc5c:	58e3      	ldr	r3, [r4, r3]
    bc5e:	0011      	movs	r1, r2
    bc60:	0018      	movs	r0, r3
    bc62:	4b1b      	ldr	r3, [pc, #108]	; (bcd0 <udd_ep_alloc+0x1bc>)
    bc64:	58e3      	ldr	r3, [r4, r3]
    bc66:	4798      	blx	r3
    bc68:	1e03      	subs	r3, r0, #0
    bc6a:	d001      	beq.n	bc70 <udd_ep_alloc+0x15c>
		return false;
    bc6c:	2300      	movs	r3, #0
    bc6e:	e020      	b.n	bcb2 <udd_ep_alloc+0x19e>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    bc70:	4b18      	ldr	r3, [pc, #96]	; (bcd4 <udd_ep_alloc+0x1c0>)
    bc72:	447b      	add	r3, pc
    bc74:	001a      	movs	r2, r3
    bc76:	2313      	movs	r3, #19
    bc78:	18fb      	adds	r3, r7, r3
    bc7a:	7819      	ldrb	r1, [r3, #0]
    bc7c:	4b13      	ldr	r3, [pc, #76]	; (bccc <udd_ep_alloc+0x1b8>)
    bc7e:	58e3      	ldr	r3, [r4, r3]
    bc80:	0018      	movs	r0, r3
    bc82:	0013      	movs	r3, r2
    bc84:	2200      	movs	r2, #0
    bc86:	4d14      	ldr	r5, [pc, #80]	; (bcd8 <udd_ep_alloc+0x1c4>)
    bc88:	5965      	ldr	r5, [r4, r5]
    bc8a:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    bc8c:	1dfb      	adds	r3, r7, #7
    bc8e:	7819      	ldrb	r1, [r3, #0]
    bc90:	4b0e      	ldr	r3, [pc, #56]	; (bccc <udd_ep_alloc+0x1b8>)
    bc92:	58e3      	ldr	r3, [r4, r3]
    bc94:	2200      	movs	r2, #0
    bc96:	0018      	movs	r0, r3
    bc98:	4b10      	ldr	r3, [pc, #64]	; (bcdc <udd_ep_alloc+0x1c8>)
    bc9a:	58e3      	ldr	r3, [r4, r3]
    bc9c:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    bc9e:	1dfb      	adds	r3, r7, #7
    bca0:	7819      	ldrb	r1, [r3, #0]
    bca2:	4b0a      	ldr	r3, [pc, #40]	; (bccc <udd_ep_alloc+0x1b8>)
    bca4:	58e3      	ldr	r3, [r4, r3]
    bca6:	2201      	movs	r2, #1
    bca8:	0018      	movs	r0, r3
    bcaa:	4b0c      	ldr	r3, [pc, #48]	; (bcdc <udd_ep_alloc+0x1c8>)
    bcac:	58e3      	ldr	r3, [r4, r3]
    bcae:	4798      	blx	r3

	return true;
    bcb0:	2301      	movs	r3, #1
}
    bcb2:	0018      	movs	r0, r3
    bcb4:	46bd      	mov	sp, r7
    bcb6:	b006      	add	sp, #24
    bcb8:	bdb0      	pop	{r4, r5, r7, pc}
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	0000632c 	.word	0x0000632c
    bcc0:	00000104 	.word	0x00000104
    bcc4:	000003ff 	.word	0x000003ff
    bcc8:	fffff95f 	.word	0xfffff95f
    bccc:	00000078 	.word	0x00000078
    bcd0:	00000074 	.word	0x00000074
    bcd4:	fffffcd7 	.word	0xfffffcd7
    bcd8:	00000154 	.word	0x00000154
    bcdc:	000002b0 	.word	0x000002b0

0000bce0 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    bce0:	b580      	push	{r7, lr}
    bce2:	b082      	sub	sp, #8
    bce4:	af00      	add	r7, sp, #0
    bce6:	0002      	movs	r2, r0
    bce8:	1dfb      	adds	r3, r7, #7
    bcea:	701a      	strb	r2, [r3, #0]
    bcec:	4b07      	ldr	r3, [pc, #28]	; (bd0c <udd_ep_is_halted+0x2c>)
    bcee:	447b      	add	r3, pc
	return usb_device_endpoint_is_halted(&usb_device, ep);
    bcf0:	1dfa      	adds	r2, r7, #7
    bcf2:	7811      	ldrb	r1, [r2, #0]
    bcf4:	4a06      	ldr	r2, [pc, #24]	; (bd10 <udd_ep_is_halted+0x30>)
    bcf6:	589a      	ldr	r2, [r3, r2]
    bcf8:	0010      	movs	r0, r2
    bcfa:	4a06      	ldr	r2, [pc, #24]	; (bd14 <udd_ep_is_halted+0x34>)
    bcfc:	589b      	ldr	r3, [r3, r2]
    bcfe:	4798      	blx	r3
    bd00:	0003      	movs	r3, r0
}
    bd02:	0018      	movs	r0, r3
    bd04:	46bd      	mov	sp, r7
    bd06:	b002      	add	sp, #8
    bd08:	bd80      	pop	{r7, pc}
    bd0a:	46c0      	nop			; (mov r8, r8)
    bd0c:	00006172 	.word	0x00006172
    bd10:	00000078 	.word	0x00000078
    bd14:	00000138 	.word	0x00000138

0000bd18 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    bd18:	b590      	push	{r4, r7, lr}
    bd1a:	b085      	sub	sp, #20
    bd1c:	af00      	add	r7, sp, #0
    bd1e:	0002      	movs	r2, r0
    bd20:	1dfb      	adds	r3, r7, #7
    bd22:	701a      	strb	r2, [r3, #0]
    bd24:	4c11      	ldr	r4, [pc, #68]	; (bd6c <udd_ep_set_halt+0x54>)
    bd26:	447c      	add	r4, pc
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    bd28:	230f      	movs	r3, #15
    bd2a:	18fb      	adds	r3, r7, r3
    bd2c:	1dfa      	adds	r2, r7, #7
    bd2e:	7812      	ldrb	r2, [r2, #0]
    bd30:	210f      	movs	r1, #15
    bd32:	400a      	ands	r2, r1
    bd34:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    bd36:	230f      	movs	r3, #15
    bd38:	18fb      	adds	r3, r7, r3
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	2b03      	cmp	r3, #3
    bd3e:	d901      	bls.n	bd44 <udd_ep_set_halt+0x2c>
		return false;
    bd40:	2300      	movs	r3, #0
    bd42:	e00f      	b.n	bd64 <udd_ep_set_halt+0x4c>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    bd44:	1dfb      	adds	r3, r7, #7
    bd46:	781a      	ldrb	r2, [r3, #0]
    bd48:	4b09      	ldr	r3, [pc, #36]	; (bd70 <udd_ep_set_halt+0x58>)
    bd4a:	58e3      	ldr	r3, [r4, r3]
    bd4c:	0011      	movs	r1, r2
    bd4e:	0018      	movs	r0, r3
    bd50:	4b08      	ldr	r3, [pc, #32]	; (bd74 <udd_ep_set_halt+0x5c>)
    bd52:	58e3      	ldr	r3, [r4, r3]
    bd54:	4798      	blx	r3

	udd_ep_abort(ep);
    bd56:	1dfb      	adds	r3, r7, #7
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	0018      	movs	r0, r3
    bd5c:	4b06      	ldr	r3, [pc, #24]	; (bd78 <udd_ep_set_halt+0x60>)
    bd5e:	58e3      	ldr	r3, [r4, r3]
    bd60:	4798      	blx	r3
	return true;
    bd62:	2301      	movs	r3, #1
}
    bd64:	0018      	movs	r0, r3
    bd66:	46bd      	mov	sp, r7
    bd68:	b005      	add	sp, #20
    bd6a:	bd90      	pop	{r4, r7, pc}
    bd6c:	0000613a 	.word	0x0000613a
    bd70:	00000078 	.word	0x00000078
    bd74:	00000274 	.word	0x00000274
    bd78:	000001b8 	.word	0x000001b8

0000bd7c <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    bd7c:	b590      	push	{r4, r7, lr}
    bd7e:	b085      	sub	sp, #20
    bd80:	af00      	add	r7, sp, #0
    bd82:	0002      	movs	r2, r0
    bd84:	1dfb      	adds	r3, r7, #7
    bd86:	701a      	strb	r2, [r3, #0]
    bd88:	4c1a      	ldr	r4, [pc, #104]	; (bdf4 <udd_ep_clear_halt+0x78>)
    bd8a:	447c      	add	r4, pc
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    bd8c:	230f      	movs	r3, #15
    bd8e:	18fb      	adds	r3, r7, r3
    bd90:	1dfa      	adds	r2, r7, #7
    bd92:	7812      	ldrb	r2, [r2, #0]
    bd94:	210f      	movs	r1, #15
    bd96:	400a      	ands	r2, r1
    bd98:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    bd9a:	230f      	movs	r3, #15
    bd9c:	18fb      	adds	r3, r7, r3
    bd9e:	781b      	ldrb	r3, [r3, #0]
    bda0:	2b03      	cmp	r3, #3
    bda2:	d901      	bls.n	bda8 <udd_ep_clear_halt+0x2c>
		return false;
    bda4:	2300      	movs	r3, #0
    bda6:	e020      	b.n	bdea <udd_ep_clear_halt+0x6e>
	}
	ptr_job = udd_ep_get_job(ep);
    bda8:	1dfb      	adds	r3, r7, #7
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	0018      	movs	r0, r3
    bdae:	4b12      	ldr	r3, [pc, #72]	; (bdf8 <udd_ep_clear_halt+0x7c>)
    bdb0:	447b      	add	r3, pc
    bdb2:	4798      	blx	r3
    bdb4:	0003      	movs	r3, r0
    bdb6:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    bdb8:	1dfb      	adds	r3, r7, #7
    bdba:	781a      	ldrb	r2, [r3, #0]
    bdbc:	4b0f      	ldr	r3, [pc, #60]	; (bdfc <udd_ep_clear_halt+0x80>)
    bdbe:	58e3      	ldr	r3, [r4, r3]
    bdc0:	0011      	movs	r1, r2
    bdc2:	0018      	movs	r0, r3
    bdc4:	4b0e      	ldr	r3, [pc, #56]	; (be00 <udd_ep_clear_halt+0x84>)
    bdc6:	58e3      	ldr	r3, [r4, r3]
    bdc8:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    bdca:	68bb      	ldr	r3, [r7, #8]
    bdcc:	7c9b      	ldrb	r3, [r3, #18]
    bdce:	2201      	movs	r2, #1
    bdd0:	4013      	ands	r3, r2
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d007      	beq.n	bde8 <udd_ep_clear_halt+0x6c>
		ptr_job->busy = false;
    bdd8:	68bb      	ldr	r3, [r7, #8]
    bdda:	7c9a      	ldrb	r2, [r3, #18]
    bddc:	2101      	movs	r1, #1
    bdde:	438a      	bics	r2, r1
    bde0:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    bde2:	68bb      	ldr	r3, [r7, #8]
    bde4:	681b      	ldr	r3, [r3, #0]
    bde6:	4798      	blx	r3
	}

	return true;
    bde8:	2301      	movs	r3, #1
}
    bdea:	0018      	movs	r0, r3
    bdec:	46bd      	mov	sp, r7
    bdee:	b005      	add	sp, #20
    bdf0:	bd90      	pop	{r4, r7, pc}
    bdf2:	46c0      	nop			; (mov r8, r8)
    bdf4:	000060d6 	.word	0x000060d6
    bdf8:	fffff7a1 	.word	0xfffff7a1
    bdfc:	00000078 	.word	0x00000078
    be00:	00000228 	.word	0x00000228

0000be04 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    be04:	b5b0      	push	{r4, r5, r7, lr}
    be06:	af00      	add	r7, sp, #0
    be08:	4c0b      	ldr	r4, [pc, #44]	; (be38 <udd_ctrl_stall_data+0x34>)
    be0a:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    be0c:	4b0b      	ldr	r3, [pc, #44]	; (be3c <udd_ctrl_stall_data+0x38>)
    be0e:	447b      	add	r3, pc
    be10:	2205      	movs	r2, #5
    be12:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    be14:	4b0a      	ldr	r3, [pc, #40]	; (be40 <udd_ctrl_stall_data+0x3c>)
    be16:	58e3      	ldr	r3, [r4, r3]
    be18:	2180      	movs	r1, #128	; 0x80
    be1a:	0018      	movs	r0, r3
    be1c:	4b09      	ldr	r3, [pc, #36]	; (be44 <udd_ctrl_stall_data+0x40>)
    be1e:	58e3      	ldr	r3, [r4, r3]
    be20:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    be22:	4b07      	ldr	r3, [pc, #28]	; (be40 <udd_ctrl_stall_data+0x3c>)
    be24:	58e3      	ldr	r3, [r4, r3]
    be26:	2100      	movs	r1, #0
    be28:	0018      	movs	r0, r3
    be2a:	4b07      	ldr	r3, [pc, #28]	; (be48 <udd_ctrl_stall_data+0x44>)
    be2c:	58e3      	ldr	r3, [r4, r3]
    be2e:	4798      	blx	r3
}
    be30:	46c0      	nop			; (mov r8, r8)
    be32:	46bd      	mov	sp, r7
    be34:	bdb0      	pop	{r4, r5, r7, pc}
    be36:	46c0      	nop			; (mov r8, r8)
    be38:	00006056 	.word	0x00006056
    be3c:	1fff4790 	.word	0x1fff4790
    be40:	00000078 	.word	0x00000078
    be44:	00000274 	.word	0x00000274
    be48:	00000228 	.word	0x00000228

0000be4c <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    be4c:	b5b0      	push	{r4, r5, r7, lr}
    be4e:	b088      	sub	sp, #32
    be50:	af00      	add	r7, sp, #0
    be52:	60ba      	str	r2, [r7, #8]
    be54:	607b      	str	r3, [r7, #4]
    be56:	230f      	movs	r3, #15
    be58:	18fb      	adds	r3, r7, r3
    be5a:	1c02      	adds	r2, r0, #0
    be5c:	701a      	strb	r2, [r3, #0]
    be5e:	230e      	movs	r3, #14
    be60:	18fb      	adds	r3, r7, r3
    be62:	1c0a      	adds	r2, r1, #0
    be64:	701a      	strb	r2, [r3, #0]
    be66:	4cb3      	ldr	r4, [pc, #716]	; (c134 <udd_ep_run+0x2e8>)
    be68:	447c      	add	r4, pc
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    be6a:	231d      	movs	r3, #29
    be6c:	18fb      	adds	r3, r7, r3
    be6e:	220f      	movs	r2, #15
    be70:	18ba      	adds	r2, r7, r2
    be72:	7812      	ldrb	r2, [r2, #0]
    be74:	210f      	movs	r1, #15
    be76:	400a      	ands	r2, r1
    be78:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    be7a:	231d      	movs	r3, #29
    be7c:	18fb      	adds	r3, r7, r3
    be7e:	781b      	ldrb	r3, [r3, #0]
    be80:	2b03      	cmp	r3, #3
    be82:	d808      	bhi.n	be96 <udd_ep_run+0x4a>
    be84:	230f      	movs	r3, #15
    be86:	18fb      	adds	r3, r7, r3
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	0018      	movs	r0, r3
    be8c:	4baa      	ldr	r3, [pc, #680]	; (c138 <udd_ep_run+0x2ec>)
    be8e:	58e3      	ldr	r3, [r4, r3]
    be90:	4798      	blx	r3
    be92:	1e03      	subs	r3, r0, #0
    be94:	d001      	beq.n	be9a <udd_ep_run+0x4e>
		return false;
    be96:	2300      	movs	r3, #0
    be98:	e148      	b.n	c12c <udd_ep_run+0x2e0>
	}

	ptr_job = udd_ep_get_job(ep);
    be9a:	230f      	movs	r3, #15
    be9c:	18fb      	adds	r3, r7, r3
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	0018      	movs	r0, r3
    bea2:	4ba6      	ldr	r3, [pc, #664]	; (c13c <udd_ep_run+0x2f0>)
    bea4:	447b      	add	r3, pc
    bea6:	4798      	blx	r3
    bea8:	0003      	movs	r3, r0
    beaa:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    beac:	4ba4      	ldr	r3, [pc, #656]	; (c140 <udd_ep_run+0x2f4>)
    beae:	447b      	add	r3, pc
    beb0:	4798      	blx	r3
    beb2:	0003      	movs	r3, r0
    beb4:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    beb6:	69bb      	ldr	r3, [r7, #24]
    beb8:	7c9b      	ldrb	r3, [r3, #18]
    beba:	2201      	movs	r2, #1
    bebc:	4013      	ands	r3, r2
    bebe:	b2db      	uxtb	r3, r3
    bec0:	2b00      	cmp	r3, #0
    bec2:	d006      	beq.n	bed2 <udd_ep_run+0x86>
		cpu_irq_restore(flags);
    bec4:	697b      	ldr	r3, [r7, #20]
    bec6:	0018      	movs	r0, r3
    bec8:	4b9e      	ldr	r3, [pc, #632]	; (c144 <udd_ep_run+0x2f8>)
    beca:	447b      	add	r3, pc
    becc:	4798      	blx	r3
		return false; /* Job already on going */
    bece:	2300      	movs	r3, #0
    bed0:	e12c      	b.n	c12c <udd_ep_run+0x2e0>
	}
	ptr_job->busy = true;
    bed2:	69bb      	ldr	r3, [r7, #24]
    bed4:	7c9a      	ldrb	r2, [r3, #18]
    bed6:	2101      	movs	r1, #1
    bed8:	430a      	orrs	r2, r1
    beda:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    bedc:	697b      	ldr	r3, [r7, #20]
    bede:	0018      	movs	r0, r3
    bee0:	4b99      	ldr	r3, [pc, #612]	; (c148 <udd_ep_run+0x2fc>)
    bee2:	447b      	add	r3, pc
    bee4:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    bee6:	69bb      	ldr	r3, [r7, #24]
    bee8:	68ba      	ldr	r2, [r7, #8]
    beea:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    beec:	69bb      	ldr	r3, [r7, #24]
    beee:	687a      	ldr	r2, [r7, #4]
    bef0:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    bef2:	69bb      	ldr	r3, [r7, #24]
    bef4:	2200      	movs	r2, #0
    bef6:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    bef8:	69bb      	ldr	r3, [r7, #24]
    befa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    befc:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    befe:	69bb      	ldr	r3, [r7, #24]
    bf00:	220e      	movs	r2, #14
    bf02:	18ba      	adds	r2, r7, r2
    bf04:	7812      	ldrb	r2, [r2, #0]
    bf06:	2101      	movs	r1, #1
    bf08:	400a      	ands	r2, r1
    bf0a:	1890      	adds	r0, r2, r2
    bf0c:	7c9a      	ldrb	r2, [r3, #18]
    bf0e:	2102      	movs	r1, #2
    bf10:	438a      	bics	r2, r1
    bf12:	1c11      	adds	r1, r2, #0
    bf14:	1c02      	adds	r2, r0, #0
    bf16:	430a      	orrs	r2, r1
    bf18:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    bf1a:	69bb      	ldr	r3, [r7, #24]
    bf1c:	7c9a      	ldrb	r2, [r3, #18]
    bf1e:	2104      	movs	r1, #4
    bf20:	438a      	bics	r2, r1
    bf22:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    bf24:	230f      	movs	r3, #15
    bf26:	18fb      	adds	r3, r7, r3
    bf28:	781b      	ldrb	r3, [r3, #0]
    bf2a:	b25b      	sxtb	r3, r3
    bf2c:	2b00      	cmp	r3, #0
    bf2e:	db00      	blt.n	bf32 <udd_ep_run+0xe6>
    bf30:	e07e      	b.n	c030 <udd_ep_run+0x1e4>
		if (0 != ptr_job->buf_size) {
    bf32:	69bb      	ldr	r3, [r7, #24]
    bf34:	689b      	ldr	r3, [r3, #8]
    bf36:	2b00      	cmp	r3, #0
    bf38:	d041      	beq.n	bfbe <udd_ep_run+0x172>
			next_trans = ptr_job->buf_size;
    bf3a:	69bb      	ldr	r3, [r7, #24]
    bf3c:	689a      	ldr	r2, [r3, #8]
    bf3e:	231e      	movs	r3, #30
    bf40:	18fb      	adds	r3, r7, r3
    bf42:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    bf44:	231e      	movs	r3, #30
    bf46:	18fb      	adds	r3, r7, r3
    bf48:	881b      	ldrh	r3, [r3, #0]
    bf4a:	4a80      	ldr	r2, [pc, #512]	; (c14c <udd_ep_run+0x300>)
    bf4c:	4293      	cmp	r3, r2
    bf4e:	d90e      	bls.n	bf6e <udd_ep_run+0x122>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    bf50:	69bb      	ldr	r3, [r7, #24]
    bf52:	8a1b      	ldrh	r3, [r3, #16]
    bf54:	0019      	movs	r1, r3
    bf56:	4a7d      	ldr	r2, [pc, #500]	; (c14c <udd_ep_run+0x300>)
    bf58:	4b7d      	ldr	r3, [pc, #500]	; (c150 <udd_ep_run+0x304>)
    bf5a:	58e3      	ldr	r3, [r4, r3]
    bf5c:	0010      	movs	r0, r2
    bf5e:	4798      	blx	r3
    bf60:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    bf62:	b29a      	uxth	r2, r3
    bf64:	231e      	movs	r3, #30
    bf66:	18fb      	adds	r3, r7, r3
    bf68:	4978      	ldr	r1, [pc, #480]	; (c14c <udd_ep_run+0x300>)
    bf6a:	1a8a      	subs	r2, r1, r2
    bf6c:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    bf6e:	69bb      	ldr	r3, [r7, #24]
    bf70:	7c9b      	ldrb	r3, [r3, #18]
    bf72:	2202      	movs	r2, #2
    bf74:	4013      	ands	r3, r2
    bf76:	b2db      	uxtb	r3, r3
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d00e      	beq.n	bf9a <udd_ep_run+0x14e>
					(0 == (next_trans % ptr_job->ep_size));
    bf7c:	69bb      	ldr	r3, [r7, #24]
    bf7e:	8a19      	ldrh	r1, [r3, #16]
    bf80:	231e      	movs	r3, #30
    bf82:	18fb      	adds	r3, r7, r3
    bf84:	881a      	ldrh	r2, [r3, #0]
    bf86:	4b73      	ldr	r3, [pc, #460]	; (c154 <udd_ep_run+0x308>)
    bf88:	58e3      	ldr	r3, [r4, r3]
    bf8a:	0010      	movs	r0, r2
    bf8c:	4798      	blx	r3
    bf8e:	000b      	movs	r3, r1
    bf90:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    bf92:	2b00      	cmp	r3, #0
    bf94:	d101      	bne.n	bf9a <udd_ep_run+0x14e>
    bf96:	2301      	movs	r3, #1
    bf98:	e000      	b.n	bf9c <udd_ep_run+0x150>
    bf9a:	2300      	movs	r3, #0
    bf9c:	b2db      	uxtb	r3, r3
    bf9e:	1c1a      	adds	r2, r3, #0
    bfa0:	2301      	movs	r3, #1
    bfa2:	4013      	ands	r3, r2
    bfa4:	b2da      	uxtb	r2, r3
    bfa6:	69bb      	ldr	r3, [r7, #24]
    bfa8:	2101      	movs	r1, #1
    bfaa:	400a      	ands	r2, r1
    bfac:	1890      	adds	r0, r2, r2
    bfae:	7c9a      	ldrb	r2, [r3, #18]
    bfb0:	2102      	movs	r1, #2
    bfb2:	438a      	bics	r2, r1
    bfb4:	1c11      	adds	r1, r2, #0
    bfb6:	1c02      	adds	r2, r0, #0
    bfb8:	430a      	orrs	r2, r1
    bfba:	749a      	strb	r2, [r3, #18]
    bfbc:	e023      	b.n	c006 <udd_ep_run+0x1ba>
		} else if (true == ptr_job->b_shortpacket) {
    bfbe:	69bb      	ldr	r3, [r7, #24]
    bfc0:	7c9b      	ldrb	r3, [r3, #18]
    bfc2:	2202      	movs	r2, #2
    bfc4:	4013      	ands	r3, r2
    bfc6:	b2db      	uxtb	r3, r3
    bfc8:	2b00      	cmp	r3, #0
    bfca:	d009      	beq.n	bfe0 <udd_ep_run+0x194>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    bfcc:	69bb      	ldr	r3, [r7, #24]
    bfce:	7c9a      	ldrb	r2, [r3, #18]
    bfd0:	2102      	movs	r1, #2
    bfd2:	438a      	bics	r2, r1
    bfd4:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    bfd6:	231e      	movs	r3, #30
    bfd8:	18fb      	adds	r3, r7, r3
    bfda:	2200      	movs	r2, #0
    bfdc:	801a      	strh	r2, [r3, #0]
    bfde:	e012      	b.n	c006 <udd_ep_run+0x1ba>
		} else {
			ptr_job->busy = false;
    bfe0:	69bb      	ldr	r3, [r7, #24]
    bfe2:	7c9a      	ldrb	r2, [r3, #18]
    bfe4:	2101      	movs	r1, #1
    bfe6:	438a      	bics	r2, r1
    bfe8:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    bfea:	69bb      	ldr	r3, [r7, #24]
    bfec:	681b      	ldr	r3, [r3, #0]
    bfee:	2b00      	cmp	r3, #0
    bff0:	d007      	beq.n	c002 <udd_ep_run+0x1b6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    bff2:	69bb      	ldr	r3, [r7, #24]
    bff4:	681b      	ldr	r3, [r3, #0]
    bff6:	220f      	movs	r2, #15
    bff8:	18ba      	adds	r2, r7, r2
    bffa:	7812      	ldrb	r2, [r2, #0]
    bffc:	2100      	movs	r1, #0
    bffe:	2000      	movs	r0, #0
    c000:	4798      	blx	r3
			}
			return true;
    c002:	2301      	movs	r3, #1
    c004:	e092      	b.n	c12c <udd_ep_run+0x2e0>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    c006:	69bb      	ldr	r3, [r7, #24]
    c008:	685a      	ldr	r2, [r3, #4]
    c00a:	231e      	movs	r3, #30
    c00c:	18fb      	adds	r3, r7, r3
    c00e:	8818      	ldrh	r0, [r3, #0]
    c010:	231d      	movs	r3, #29
    c012:	18fb      	adds	r3, r7, r3
    c014:	7819      	ldrb	r1, [r3, #0]
    c016:	4b50      	ldr	r3, [pc, #320]	; (c158 <udd_ep_run+0x30c>)
    c018:	58e3      	ldr	r3, [r4, r3]
    c01a:	001d      	movs	r5, r3
    c01c:	0003      	movs	r3, r0
    c01e:	0028      	movs	r0, r5
    c020:	4d4e      	ldr	r5, [pc, #312]	; (c15c <udd_ep_run+0x310>)
    c022:	5964      	ldr	r4, [r4, r5]
    c024:	47a0      	blx	r4
    c026:	0003      	movs	r3, r0
		return (STATUS_OK ==
    c028:	425a      	negs	r2, r3
    c02a:	4153      	adcs	r3, r2
    c02c:	b2db      	uxtb	r3, r3
    c02e:	e07d      	b.n	c12c <udd_ep_run+0x2e0>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    c030:	69bb      	ldr	r3, [r7, #24]
    c032:	689b      	ldr	r3, [r3, #8]
    c034:	2b00      	cmp	r3, #0
    c036:	d067      	beq.n	c108 <udd_ep_run+0x2bc>
			next_trans = ptr_job->buf_size;
    c038:	69bb      	ldr	r3, [r7, #24]
    c03a:	689a      	ldr	r2, [r3, #8]
    c03c:	231e      	movs	r3, #30
    c03e:	18fb      	adds	r3, r7, r3
    c040:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    c042:	231e      	movs	r3, #30
    c044:	18fb      	adds	r3, r7, r3
    c046:	881b      	ldrh	r3, [r3, #0]
    c048:	4a40      	ldr	r2, [pc, #256]	; (c14c <udd_ep_run+0x300>)
    c04a:	4293      	cmp	r3, r2
    c04c:	d90f      	bls.n	c06e <udd_ep_run+0x222>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    c04e:	69bb      	ldr	r3, [r7, #24]
    c050:	8a1b      	ldrh	r3, [r3, #16]
    c052:	0019      	movs	r1, r3
    c054:	4a3d      	ldr	r2, [pc, #244]	; (c14c <udd_ep_run+0x300>)
    c056:	4b3e      	ldr	r3, [pc, #248]	; (c150 <udd_ep_run+0x304>)
    c058:	58e3      	ldr	r3, [r4, r3]
    c05a:	0010      	movs	r0, r2
    c05c:	4798      	blx	r3
    c05e:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    c060:	b29a      	uxth	r2, r3
    c062:	231e      	movs	r3, #30
    c064:	18fb      	adds	r3, r7, r3
    c066:	4939      	ldr	r1, [pc, #228]	; (c14c <udd_ep_run+0x300>)
    c068:	1a8a      	subs	r2, r1, r2
    c06a:	801a      	strh	r2, [r3, #0]
    c06c:	e011      	b.n	c092 <udd_ep_run+0x246>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    c06e:	69bb      	ldr	r3, [r7, #24]
    c070:	8a19      	ldrh	r1, [r3, #16]
    c072:	231e      	movs	r3, #30
    c074:	18fb      	adds	r3, r7, r3
    c076:	881a      	ldrh	r2, [r3, #0]
    c078:	4b36      	ldr	r3, [pc, #216]	; (c154 <udd_ep_run+0x308>)
    c07a:	58e3      	ldr	r3, [r4, r3]
    c07c:	0010      	movs	r0, r2
    c07e:	4798      	blx	r3
    c080:	000b      	movs	r3, r1
    c082:	b29a      	uxth	r2, r3
    c084:	231e      	movs	r3, #30
    c086:	18fb      	adds	r3, r7, r3
    c088:	211e      	movs	r1, #30
    c08a:	1879      	adds	r1, r7, r1
    c08c:	8809      	ldrh	r1, [r1, #0]
    c08e:	1a8a      	subs	r2, r1, r2
    c090:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    c092:	69bb      	ldr	r3, [r7, #24]
    c094:	8a1b      	ldrh	r3, [r3, #16]
    c096:	221e      	movs	r2, #30
    c098:	18ba      	adds	r2, r7, r2
    c09a:	8812      	ldrh	r2, [r2, #0]
    c09c:	429a      	cmp	r2, r3
    c09e:	d21e      	bcs.n	c0de <udd_ep_run+0x292>
				ptr_job->b_use_out_cache_buffer = true;
    c0a0:	69bb      	ldr	r3, [r7, #24]
    c0a2:	7c9a      	ldrb	r2, [r3, #18]
    c0a4:	2104      	movs	r1, #4
    c0a6:	430a      	orrs	r2, r1
    c0a8:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    c0aa:	231d      	movs	r3, #29
    c0ac:	18fb      	adds	r3, r7, r3
    c0ae:	781b      	ldrb	r3, [r3, #0]
    c0b0:	3b01      	subs	r3, #1
    c0b2:	019b      	lsls	r3, r3, #6
    c0b4:	4a2a      	ldr	r2, [pc, #168]	; (c160 <udd_ep_run+0x314>)
    c0b6:	58a2      	ldr	r2, [r4, r2]
    c0b8:	189a      	adds	r2, r3, r2
								ptr_job->ep_size));
    c0ba:	69bb      	ldr	r3, [r7, #24]
    c0bc:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    c0be:	001d      	movs	r5, r3
    c0c0:	231d      	movs	r3, #29
    c0c2:	18fb      	adds	r3, r7, r3
    c0c4:	7819      	ldrb	r1, [r3, #0]
    c0c6:	4b24      	ldr	r3, [pc, #144]	; (c158 <udd_ep_run+0x30c>)
    c0c8:	58e3      	ldr	r3, [r4, r3]
    c0ca:	0018      	movs	r0, r3
    c0cc:	002b      	movs	r3, r5
    c0ce:	4d25      	ldr	r5, [pc, #148]	; (c164 <udd_ep_run+0x318>)
    c0d0:	5964      	ldr	r4, [r4, r5]
    c0d2:	47a0      	blx	r4
    c0d4:	0003      	movs	r3, r0
				return (STATUS_OK ==
    c0d6:	425a      	negs	r2, r3
    c0d8:	4153      	adcs	r3, r2
    c0da:	b2db      	uxtb	r3, r3
    c0dc:	e026      	b.n	c12c <udd_ep_run+0x2e0>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    c0de:	69bb      	ldr	r3, [r7, #24]
    c0e0:	685a      	ldr	r2, [r3, #4]
    c0e2:	231e      	movs	r3, #30
    c0e4:	18fb      	adds	r3, r7, r3
    c0e6:	8818      	ldrh	r0, [r3, #0]
    c0e8:	231d      	movs	r3, #29
    c0ea:	18fb      	adds	r3, r7, r3
    c0ec:	7819      	ldrb	r1, [r3, #0]
    c0ee:	4b1a      	ldr	r3, [pc, #104]	; (c158 <udd_ep_run+0x30c>)
    c0f0:	58e3      	ldr	r3, [r4, r3]
    c0f2:	001d      	movs	r5, r3
    c0f4:	0003      	movs	r3, r0
    c0f6:	0028      	movs	r0, r5
    c0f8:	4d1a      	ldr	r5, [pc, #104]	; (c164 <udd_ep_run+0x318>)
    c0fa:	5964      	ldr	r4, [r4, r5]
    c0fc:	47a0      	blx	r4
    c0fe:	0003      	movs	r3, r0
				return (STATUS_OK ==
    c100:	425a      	negs	r2, r3
    c102:	4153      	adcs	r3, r2
    c104:	b2db      	uxtb	r3, r3
    c106:	e011      	b.n	c12c <udd_ep_run+0x2e0>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    c108:	69bb      	ldr	r3, [r7, #24]
    c10a:	7c9a      	ldrb	r2, [r3, #18]
    c10c:	2101      	movs	r1, #1
    c10e:	438a      	bics	r2, r1
    c110:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    c112:	69bb      	ldr	r3, [r7, #24]
    c114:	681b      	ldr	r3, [r3, #0]
    c116:	2b00      	cmp	r3, #0
    c118:	d007      	beq.n	c12a <udd_ep_run+0x2de>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    c11a:	69bb      	ldr	r3, [r7, #24]
    c11c:	681b      	ldr	r3, [r3, #0]
    c11e:	220f      	movs	r2, #15
    c120:	18ba      	adds	r2, r7, r2
    c122:	7812      	ldrb	r2, [r2, #0]
    c124:	2100      	movs	r1, #0
    c126:	2000      	movs	r0, #0
    c128:	4798      	blx	r3
			}
			return true;
    c12a:	2301      	movs	r3, #1
		}
	}
}
    c12c:	0018      	movs	r0, r3
    c12e:	46bd      	mov	sp, r7
    c130:	b008      	add	sp, #32
    c132:	bdb0      	pop	{r4, r5, r7, pc}
    c134:	00005ff8 	.word	0x00005ff8
    c138:	000001a8 	.word	0x000001a8
    c13c:	fffff6ad 	.word	0xfffff6ad
    c140:	fffff393 	.word	0xfffff393
    c144:	fffff3cb 	.word	0xfffff3cb
    c148:	fffff3b3 	.word	0xfffff3b3
    c14c:	00001fff 	.word	0x00001fff
    c150:	000002e8 	.word	0x000002e8
    c154:	00000270 	.word	0x00000270
    c158:	00000078 	.word	0x00000078
    c15c:	00000300 	.word	0x00000300
    c160:	0000001c 	.word	0x0000001c
    c164:	0000014c 	.word	0x0000014c

0000c168 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    c168:	b580      	push	{r7, lr}
    c16a:	b082      	sub	sp, #8
    c16c:	af00      	add	r7, sp, #0
    c16e:	0002      	movs	r2, r0
    c170:	1dfb      	adds	r3, r7, #7
    c172:	701a      	strb	r2, [r3, #0]
    c174:	4a06      	ldr	r2, [pc, #24]	; (c190 <udd_set_address+0x28>)
    c176:	447a      	add	r2, pc
	usb_device_set_address(&usb_device,address);
    c178:	1dfb      	adds	r3, r7, #7
    c17a:	7819      	ldrb	r1, [r3, #0]
    c17c:	4b05      	ldr	r3, [pc, #20]	; (c194 <udd_set_address+0x2c>)
    c17e:	58d3      	ldr	r3, [r2, r3]
    c180:	0018      	movs	r0, r3
    c182:	4b05      	ldr	r3, [pc, #20]	; (c198 <udd_set_address+0x30>)
    c184:	447b      	add	r3, pc
    c186:	4798      	blx	r3
}
    c188:	46c0      	nop			; (mov r8, r8)
    c18a:	46bd      	mov	sp, r7
    c18c:	b002      	add	sp, #8
    c18e:	bd80      	pop	{r7, pc}
    c190:	00005cea 	.word	0x00005cea
    c194:	00000078 	.word	0x00000078
    c198:	fffff18d 	.word	0xfffff18d

0000c19c <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    c19c:	b580      	push	{r7, lr}
    c19e:	af00      	add	r7, sp, #0
    c1a0:	4a05      	ldr	r2, [pc, #20]	; (c1b8 <udd_getaddress+0x1c>)
    c1a2:	447a      	add	r2, pc
	return usb_device_get_address(&usb_device);
    c1a4:	4b05      	ldr	r3, [pc, #20]	; (c1bc <udd_getaddress+0x20>)
    c1a6:	58d3      	ldr	r3, [r2, r3]
    c1a8:	0018      	movs	r0, r3
    c1aa:	4b05      	ldr	r3, [pc, #20]	; (c1c0 <udd_getaddress+0x24>)
    c1ac:	447b      	add	r3, pc
    c1ae:	4798      	blx	r3
    c1b0:	0003      	movs	r3, r0
}
    c1b2:	0018      	movs	r0, r3
    c1b4:	46bd      	mov	sp, r7
    c1b6:	bd80      	pop	{r7, pc}
    c1b8:	00005cbe 	.word	0x00005cbe
    c1bc:	00000078 	.word	0x00000078
    c1c0:	fffff149 	.word	0xfffff149

0000c1c4 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
    c1cc:	000a      	movs	r2, r1
    c1ce:	1cbb      	adds	r3, r7, #2
    c1d0:	801a      	strh	r2, [r3, #0]
    c1d2:	4b07      	ldr	r3, [pc, #28]	; (c1f0 <udd_set_setup_payload+0x2c>)
    c1d4:	447b      	add	r3, pc
	udd_g_ctrlreq.payload = payload;
    c1d6:	4a07      	ldr	r2, [pc, #28]	; (c1f4 <udd_set_setup_payload+0x30>)
    c1d8:	589a      	ldr	r2, [r3, r2]
    c1da:	6879      	ldr	r1, [r7, #4]
    c1dc:	6091      	str	r1, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    c1de:	4a05      	ldr	r2, [pc, #20]	; (c1f4 <udd_set_setup_payload+0x30>)
    c1e0:	589b      	ldr	r3, [r3, r2]
    c1e2:	1cba      	adds	r2, r7, #2
    c1e4:	8812      	ldrh	r2, [r2, #0]
    c1e6:	819a      	strh	r2, [r3, #12]
}
    c1e8:	46c0      	nop			; (mov r8, r8)
    c1ea:	46bd      	mov	sp, r7
    c1ec:	b002      	add	sp, #8
    c1ee:	bd80      	pop	{r7, pc}
    c1f0:	00005c8c 	.word	0x00005c8c
    c1f4:	000001e8 	.word	0x000001e8

0000c1f8 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    c1f8:	b580      	push	{r7, lr}
    c1fa:	af00      	add	r7, sp, #0
    c1fc:	4b1f      	ldr	r3, [pc, #124]	; (c27c <udd_ctrl_fetch_ram+0x84>)
    c1fe:	447b      	add	r3, pc
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    c200:	4a1f      	ldr	r2, [pc, #124]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c202:	589a      	ldr	r2, [r3, r2]
    c204:	7811      	ldrb	r1, [r2, #0]
    c206:	4a1f      	ldr	r2, [pc, #124]	; (c284 <udd_ctrl_fetch_ram+0x8c>)
    c208:	589a      	ldr	r2, [r3, r2]
    c20a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    c20c:	4a1c      	ldr	r2, [pc, #112]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c20e:	589a      	ldr	r2, [r3, r2]
    c210:	7851      	ldrb	r1, [r2, #1]
    c212:	4a1c      	ldr	r2, [pc, #112]	; (c284 <udd_ctrl_fetch_ram+0x8c>)
    c214:	589a      	ldr	r2, [r3, r2]
    c216:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    c218:	4a19      	ldr	r2, [pc, #100]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c21a:	589a      	ldr	r2, [r3, r2]
    c21c:	78d2      	ldrb	r2, [r2, #3]
    c21e:	b292      	uxth	r2, r2
    c220:	0212      	lsls	r2, r2, #8
    c222:	b291      	uxth	r1, r2
    c224:	4a16      	ldr	r2, [pc, #88]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c226:	589a      	ldr	r2, [r3, r2]
    c228:	7892      	ldrb	r2, [r2, #2]
    c22a:	b292      	uxth	r2, r2
    c22c:	188a      	adds	r2, r1, r2
    c22e:	b291      	uxth	r1, r2
    c230:	4a14      	ldr	r2, [pc, #80]	; (c284 <udd_ctrl_fetch_ram+0x8c>)
    c232:	589a      	ldr	r2, [r3, r2]
    c234:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    c236:	4a12      	ldr	r2, [pc, #72]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c238:	589a      	ldr	r2, [r3, r2]
    c23a:	7952      	ldrb	r2, [r2, #5]
    c23c:	b292      	uxth	r2, r2
    c23e:	0212      	lsls	r2, r2, #8
    c240:	b291      	uxth	r1, r2
    c242:	4a0f      	ldr	r2, [pc, #60]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c244:	589a      	ldr	r2, [r3, r2]
    c246:	7912      	ldrb	r2, [r2, #4]
    c248:	b292      	uxth	r2, r2
    c24a:	188a      	adds	r2, r1, r2
    c24c:	b291      	uxth	r1, r2
    c24e:	4a0d      	ldr	r2, [pc, #52]	; (c284 <udd_ctrl_fetch_ram+0x8c>)
    c250:	589a      	ldr	r2, [r3, r2]
    c252:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    c254:	4a0a      	ldr	r2, [pc, #40]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c256:	589a      	ldr	r2, [r3, r2]
    c258:	79d2      	ldrb	r2, [r2, #7]
    c25a:	b292      	uxth	r2, r2
    c25c:	0212      	lsls	r2, r2, #8
    c25e:	b291      	uxth	r1, r2
    c260:	4a07      	ldr	r2, [pc, #28]	; (c280 <udd_ctrl_fetch_ram+0x88>)
    c262:	589a      	ldr	r2, [r3, r2]
    c264:	7992      	ldrb	r2, [r2, #6]
    c266:	b292      	uxth	r2, r2
    c268:	188a      	adds	r2, r1, r2
    c26a:	b291      	uxth	r1, r2
    c26c:	4a05      	ldr	r2, [pc, #20]	; (c284 <udd_ctrl_fetch_ram+0x8c>)
    c26e:	589b      	ldr	r3, [r3, r2]
    c270:	1c0a      	adds	r2, r1, #0
    c272:	80da      	strh	r2, [r3, #6]
}
    c274:	46c0      	nop			; (mov r8, r8)
    c276:	46bd      	mov	sp, r7
    c278:	bd80      	pop	{r7, pc}
    c27a:	46c0      	nop			; (mov r8, r8)
    c27c:	00005c62 	.word	0x00005c62
    c280:	000002bc 	.word	0x000002bc
    c284:	000001e8 	.word	0x000001e8

0000c288 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    c288:	b5b0      	push	{r4, r5, r7, lr}
    c28a:	af00      	add	r7, sp, #0
    c28c:	4c0e      	ldr	r4, [pc, #56]	; (c2c8 <udd_ctrl_send_zlp_in+0x40>)
    c28e:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    c290:	4b0e      	ldr	r3, [pc, #56]	; (c2cc <udd_ctrl_send_zlp_in+0x44>)
    c292:	447b      	add	r3, pc
    c294:	2203      	movs	r2, #3
    c296:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    c298:	4b0d      	ldr	r3, [pc, #52]	; (c2d0 <udd_ctrl_send_zlp_in+0x48>)
    c29a:	58e3      	ldr	r3, [r4, r3]
    c29c:	001a      	movs	r2, r3
    c29e:	4b0d      	ldr	r3, [pc, #52]	; (c2d4 <udd_ctrl_send_zlp_in+0x4c>)
    c2a0:	58e3      	ldr	r3, [r4, r3]
    c2a2:	0011      	movs	r1, r2
    c2a4:	0018      	movs	r0, r3
    c2a6:	4b0c      	ldr	r3, [pc, #48]	; (c2d8 <udd_ctrl_send_zlp_in+0x50>)
    c2a8:	58e3      	ldr	r3, [r4, r3]
    c2aa:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    c2ac:	4b0b      	ldr	r3, [pc, #44]	; (c2dc <udd_ctrl_send_zlp_in+0x54>)
    c2ae:	58e3      	ldr	r3, [r4, r3]
    c2b0:	689a      	ldr	r2, [r3, #8]
    c2b2:	4b08      	ldr	r3, [pc, #32]	; (c2d4 <udd_ctrl_send_zlp_in+0x4c>)
    c2b4:	58e3      	ldr	r3, [r4, r3]
    c2b6:	0018      	movs	r0, r3
    c2b8:	2300      	movs	r3, #0
    c2ba:	2100      	movs	r1, #0
    c2bc:	4d08      	ldr	r5, [pc, #32]	; (c2e0 <udd_ctrl_send_zlp_in+0x58>)
    c2be:	5964      	ldr	r4, [r4, r5]
    c2c0:	47a0      	blx	r4
}
    c2c2:	46c0      	nop			; (mov r8, r8)
    c2c4:	46bd      	mov	sp, r7
    c2c6:	bdb0      	pop	{r4, r5, r7, pc}
    c2c8:	00005bd2 	.word	0x00005bd2
    c2cc:	1fff430c 	.word	0x1fff430c
    c2d0:	000002bc 	.word	0x000002bc
    c2d4:	00000078 	.word	0x00000078
    c2d8:	000000c0 	.word	0x000000c0
    c2dc:	000001e8 	.word	0x000001e8
    c2e0:	00000300 	.word	0x00000300

0000c2e4 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    c2e4:	b5b0      	push	{r4, r5, r7, lr}
    c2e6:	b082      	sub	sp, #8
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	4c3e      	ldr	r4, [pc, #248]	; (c3e4 <udd_ctrl_in_sent+0x100>)
    c2ec:	447c      	add	r4, pc
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    c2ee:	4b3e      	ldr	r3, [pc, #248]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c2f0:	58e3      	ldr	r3, [r4, r3]
    c2f2:	8999      	ldrh	r1, [r3, #12]
    c2f4:	4b3d      	ldr	r3, [pc, #244]	; (c3ec <udd_ctrl_in_sent+0x108>)
    c2f6:	447b      	add	r3, pc
    c2f8:	881a      	ldrh	r2, [r3, #0]
    c2fa:	1dbb      	adds	r3, r7, #6
    c2fc:	1a8a      	subs	r2, r1, r2
    c2fe:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    c300:	1dbb      	adds	r3, r7, #6
    c302:	881b      	ldrh	r3, [r3, #0]
    c304:	2b00      	cmp	r3, #0
    c306:	d13f      	bne.n	c388 <udd_ctrl_in_sent+0xa4>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    c308:	4b39      	ldr	r3, [pc, #228]	; (c3f0 <udd_ctrl_in_sent+0x10c>)
    c30a:	447b      	add	r3, pc
    c30c:	881a      	ldrh	r2, [r3, #0]
    c30e:	4b39      	ldr	r3, [pc, #228]	; (c3f4 <udd_ctrl_in_sent+0x110>)
    c310:	447b      	add	r3, pc
    c312:	881b      	ldrh	r3, [r3, #0]
    c314:	18d3      	adds	r3, r2, r3
    c316:	b29a      	uxth	r2, r3
    c318:	4b37      	ldr	r3, [pc, #220]	; (c3f8 <udd_ctrl_in_sent+0x114>)
    c31a:	447b      	add	r3, pc
    c31c:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    c31e:	4b32      	ldr	r3, [pc, #200]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c320:	58e3      	ldr	r3, [r4, r3]
    c322:	88da      	ldrh	r2, [r3, #6]
    c324:	4b35      	ldr	r3, [pc, #212]	; (c3fc <udd_ctrl_in_sent+0x118>)
    c326:	447b      	add	r3, pc
    c328:	881b      	ldrh	r3, [r3, #0]
    c32a:	429a      	cmp	r2, r3
    c32c:	d004      	beq.n	c338 <udd_ctrl_in_sent+0x54>
    c32e:	4b34      	ldr	r3, [pc, #208]	; (c400 <udd_ctrl_in_sent+0x11c>)
    c330:	447b      	add	r3, pc
    c332:	781b      	ldrb	r3, [r3, #0]
    c334:	2b00      	cmp	r3, #0
    c336:	d00e      	beq.n	c356 <udd_ctrl_in_sent+0x72>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    c338:	4b32      	ldr	r3, [pc, #200]	; (c404 <udd_ctrl_in_sent+0x120>)
    c33a:	447b      	add	r3, pc
    c33c:	2204      	movs	r2, #4
    c33e:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    c340:	4b31      	ldr	r3, [pc, #196]	; (c408 <udd_ctrl_in_sent+0x124>)
    c342:	58e3      	ldr	r3, [r4, r3]
    c344:	001a      	movs	r2, r3
    c346:	4b31      	ldr	r3, [pc, #196]	; (c40c <udd_ctrl_in_sent+0x128>)
    c348:	58e3      	ldr	r3, [r4, r3]
    c34a:	0011      	movs	r1, r2
    c34c:	0018      	movs	r0, r3
    c34e:	4b30      	ldr	r3, [pc, #192]	; (c410 <udd_ctrl_in_sent+0x12c>)
    c350:	58e3      	ldr	r3, [r4, r3]
    c352:	4798      	blx	r3
			return;
    c354:	e043      	b.n	c3de <udd_ctrl_in_sent+0xfa>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    c356:	4b24      	ldr	r3, [pc, #144]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c358:	58e3      	ldr	r3, [r4, r3]
    c35a:	695b      	ldr	r3, [r3, #20]
    c35c:	2b00      	cmp	r3, #0
    c35e:	d013      	beq.n	c388 <udd_ctrl_in_sent+0xa4>
    c360:	4b21      	ldr	r3, [pc, #132]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c362:	58e3      	ldr	r3, [r4, r3]
    c364:	695b      	ldr	r3, [r3, #20]
    c366:	4798      	blx	r3
    c368:	0003      	movs	r3, r0
    c36a:	001a      	movs	r2, r3
    c36c:	2301      	movs	r3, #1
    c36e:	4053      	eors	r3, r2
    c370:	b2db      	uxtb	r3, r3
    c372:	2b00      	cmp	r3, #0
    c374:	d108      	bne.n	c388 <udd_ctrl_in_sent+0xa4>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    c376:	4b27      	ldr	r3, [pc, #156]	; (c414 <udd_ctrl_in_sent+0x130>)
    c378:	447b      	add	r3, pc
    c37a:	2200      	movs	r2, #0
    c37c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    c37e:	1dbb      	adds	r3, r7, #6
    c380:	4a19      	ldr	r2, [pc, #100]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c382:	58a2      	ldr	r2, [r4, r2]
    c384:	8992      	ldrh	r2, [r2, #12]
    c386:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    c388:	1dbb      	adds	r3, r7, #6
    c38a:	881b      	ldrh	r3, [r3, #0]
    c38c:	2b3f      	cmp	r3, #63	; 0x3f
    c38e:	d907      	bls.n	c3a0 <udd_ctrl_in_sent+0xbc>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    c390:	1dbb      	adds	r3, r7, #6
    c392:	2240      	movs	r2, #64	; 0x40
    c394:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    c396:	4b20      	ldr	r3, [pc, #128]	; (c418 <udd_ctrl_in_sent+0x134>)
    c398:	447b      	add	r3, pc
    c39a:	2200      	movs	r2, #0
    c39c:	701a      	strb	r2, [r3, #0]
    c39e:	e003      	b.n	c3a8 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
    c3a0:	4b1e      	ldr	r3, [pc, #120]	; (c41c <udd_ctrl_in_sent+0x138>)
    c3a2:	447b      	add	r3, pc
    c3a4:	2201      	movs	r2, #1
    c3a6:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    c3a8:	4b0f      	ldr	r3, [pc, #60]	; (c3e8 <udd_ctrl_in_sent+0x104>)
    c3aa:	58e3      	ldr	r3, [r4, r3]
    c3ac:	689b      	ldr	r3, [r3, #8]
    c3ae:	4a1c      	ldr	r2, [pc, #112]	; (c420 <udd_ctrl_in_sent+0x13c>)
    c3b0:	447a      	add	r2, pc
    c3b2:	8812      	ldrh	r2, [r2, #0]
    c3b4:	189a      	adds	r2, r3, r2
    c3b6:	1dbb      	adds	r3, r7, #6
    c3b8:	8819      	ldrh	r1, [r3, #0]
    c3ba:	4b14      	ldr	r3, [pc, #80]	; (c40c <udd_ctrl_in_sent+0x128>)
    c3bc:	58e3      	ldr	r3, [r4, r3]
    c3be:	0018      	movs	r0, r3
    c3c0:	000b      	movs	r3, r1
    c3c2:	2100      	movs	r1, #0
    c3c4:	4d17      	ldr	r5, [pc, #92]	; (c424 <udd_ctrl_in_sent+0x140>)
    c3c6:	5964      	ldr	r4, [r4, r5]
    c3c8:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    c3ca:	4b17      	ldr	r3, [pc, #92]	; (c428 <udd_ctrl_in_sent+0x144>)
    c3cc:	447b      	add	r3, pc
    c3ce:	881a      	ldrh	r2, [r3, #0]
    c3d0:	1dbb      	adds	r3, r7, #6
    c3d2:	881b      	ldrh	r3, [r3, #0]
    c3d4:	18d3      	adds	r3, r2, r3
    c3d6:	b29a      	uxth	r2, r3
    c3d8:	4b14      	ldr	r3, [pc, #80]	; (c42c <udd_ctrl_in_sent+0x148>)
    c3da:	447b      	add	r3, pc
    c3dc:	801a      	strh	r2, [r3, #0]
}
    c3de:	46bd      	mov	sp, r7
    c3e0:	b002      	add	sp, #8
    c3e2:	bdb0      	pop	{r4, r5, r7, pc}
    c3e4:	00005b74 	.word	0x00005b74
    c3e8:	000001e8 	.word	0x000001e8
    c3ec:	1fff42ac 	.word	0x1fff42ac
    c3f0:	1fff4296 	.word	0x1fff4296
    c3f4:	1fff4292 	.word	0x1fff4292
    c3f8:	1fff4286 	.word	0x1fff4286
    c3fc:	1fff427a 	.word	0x1fff427a
    c400:	1fff42ed 	.word	0x1fff42ed
    c404:	1fff4264 	.word	0x1fff4264
    c408:	000002bc 	.word	0x000002bc
    c40c:	00000078 	.word	0x00000078
    c410:	000000c0 	.word	0x000000c0
    c414:	1fff422a 	.word	0x1fff422a
    c418:	1fff4285 	.word	0x1fff4285
    c41c:	1fff427b 	.word	0x1fff427b
    c420:	1fff41f2 	.word	0x1fff41f2
    c424:	00000300 	.word	0x00000300
    c428:	1fff41d6 	.word	0x1fff41d6
    c42c:	1fff41c8 	.word	0x1fff41c8

0000c430 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    c430:	b5b0      	push	{r4, r5, r7, lr}
    c432:	b084      	sub	sp, #16
    c434:	af00      	add	r7, sp, #0
    c436:	6078      	str	r0, [r7, #4]
    c438:	4c5c      	ldr	r4, [pc, #368]	; (c5ac <udd_ctrl_out_received+0x17c>)
    c43a:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    c43c:	687b      	ldr	r3, [r7, #4]
    c43e:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    c440:	230e      	movs	r3, #14
    c442:	18fb      	adds	r3, r7, r3
    c444:	68ba      	ldr	r2, [r7, #8]
    c446:	8812      	ldrh	r2, [r2, #0]
    c448:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    c44a:	4b59      	ldr	r3, [pc, #356]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c44c:	58e3      	ldr	r3, [r4, r3]
    c44e:	899b      	ldrh	r3, [r3, #12]
    c450:	001a      	movs	r2, r3
    c452:	4b58      	ldr	r3, [pc, #352]	; (c5b4 <udd_ctrl_out_received+0x184>)
    c454:	447b      	add	r3, pc
    c456:	881b      	ldrh	r3, [r3, #0]
    c458:	0019      	movs	r1, r3
    c45a:	230e      	movs	r3, #14
    c45c:	18fb      	adds	r3, r7, r3
    c45e:	881b      	ldrh	r3, [r3, #0]
    c460:	18cb      	adds	r3, r1, r3
    c462:	429a      	cmp	r2, r3
    c464:	da09      	bge.n	c47a <udd_ctrl_out_received+0x4a>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    c466:	4b52      	ldr	r3, [pc, #328]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c468:	58e3      	ldr	r3, [r4, r3]
    c46a:	8999      	ldrh	r1, [r3, #12]
    c46c:	4b52      	ldr	r3, [pc, #328]	; (c5b8 <udd_ctrl_out_received+0x188>)
    c46e:	447b      	add	r3, pc
    c470:	881a      	ldrh	r2, [r3, #0]
    c472:	230e      	movs	r3, #14
    c474:	18fb      	adds	r3, r7, r3
    c476:	1a8a      	subs	r2, r1, r2
    c478:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    c47a:	4b4d      	ldr	r3, [pc, #308]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c47c:	58e3      	ldr	r3, [r4, r3]
    c47e:	689b      	ldr	r3, [r3, #8]
    c480:	4a4e      	ldr	r2, [pc, #312]	; (c5bc <udd_ctrl_out_received+0x18c>)
    c482:	447a      	add	r2, pc
    c484:	8812      	ldrh	r2, [r2, #0]
    c486:	1898      	adds	r0, r3, r2
    c488:	230e      	movs	r3, #14
    c48a:	18fb      	adds	r3, r7, r3
    c48c:	881a      	ldrh	r2, [r3, #0]
    c48e:	4b4c      	ldr	r3, [pc, #304]	; (c5c0 <udd_ctrl_out_received+0x190>)
    c490:	58e3      	ldr	r3, [r4, r3]
    c492:	0019      	movs	r1, r3
    c494:	4b4b      	ldr	r3, [pc, #300]	; (c5c4 <udd_ctrl_out_received+0x194>)
    c496:	58e3      	ldr	r3, [r4, r3]
    c498:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    c49a:	4b4b      	ldr	r3, [pc, #300]	; (c5c8 <udd_ctrl_out_received+0x198>)
    c49c:	447b      	add	r3, pc
    c49e:	881a      	ldrh	r2, [r3, #0]
    c4a0:	230e      	movs	r3, #14
    c4a2:	18fb      	adds	r3, r7, r3
    c4a4:	881b      	ldrh	r3, [r3, #0]
    c4a6:	18d3      	adds	r3, r2, r3
    c4a8:	b29a      	uxth	r2, r3
    c4aa:	4b48      	ldr	r3, [pc, #288]	; (c5cc <udd_ctrl_out_received+0x19c>)
    c4ac:	447b      	add	r3, pc
    c4ae:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    c4b0:	230e      	movs	r3, #14
    c4b2:	18fb      	adds	r3, r7, r3
    c4b4:	881b      	ldrh	r3, [r3, #0]
    c4b6:	2b40      	cmp	r3, #64	; 0x40
    c4b8:	d10d      	bne.n	c4d6 <udd_ctrl_out_received+0xa6>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    c4ba:	4b3d      	ldr	r3, [pc, #244]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c4bc:	58e3      	ldr	r3, [r4, r3]
    c4be:	88db      	ldrh	r3, [r3, #6]
    c4c0:	001a      	movs	r2, r3
    c4c2:	4b43      	ldr	r3, [pc, #268]	; (c5d0 <udd_ctrl_out_received+0x1a0>)
    c4c4:	447b      	add	r3, pc
    c4c6:	881b      	ldrh	r3, [r3, #0]
    c4c8:	0019      	movs	r1, r3
    c4ca:	4b42      	ldr	r3, [pc, #264]	; (c5d4 <udd_ctrl_out_received+0x1a4>)
    c4cc:	447b      	add	r3, pc
    c4ce:	881b      	ldrh	r3, [r3, #0]
    c4d0:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    c4d2:	429a      	cmp	r2, r3
    c4d4:	dc22      	bgt.n	c51c <udd_ctrl_out_received+0xec>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    c4d6:	4b40      	ldr	r3, [pc, #256]	; (c5d8 <udd_ctrl_out_received+0x1a8>)
    c4d8:	447b      	add	r3, pc
    c4da:	881a      	ldrh	r2, [r3, #0]
    c4dc:	4b34      	ldr	r3, [pc, #208]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c4de:	58e3      	ldr	r3, [r4, r3]
    c4e0:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    c4e2:	4b33      	ldr	r3, [pc, #204]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c4e4:	58e3      	ldr	r3, [r4, r3]
    c4e6:	695b      	ldr	r3, [r3, #20]
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	d013      	beq.n	c514 <udd_ctrl_out_received+0xe4>
			if (!udd_g_ctrlreq.over_under_run()) {
    c4ec:	4b30      	ldr	r3, [pc, #192]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c4ee:	58e3      	ldr	r3, [r4, r3]
    c4f0:	695b      	ldr	r3, [r3, #20]
    c4f2:	4798      	blx	r3
    c4f4:	0003      	movs	r3, r0
    c4f6:	001a      	movs	r2, r3
    c4f8:	2301      	movs	r3, #1
    c4fa:	4053      	eors	r3, r2
    c4fc:	b2db      	uxtb	r3, r3
    c4fe:	2b00      	cmp	r3, #0
    c500:	d008      	beq.n	c514 <udd_ctrl_out_received+0xe4>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c502:	4b36      	ldr	r3, [pc, #216]	; (c5dc <udd_ctrl_out_received+0x1ac>)
    c504:	447b      	add	r3, pc
    c506:	2205      	movs	r2, #5
    c508:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    c50a:	2000      	movs	r0, #0
    c50c:	4b34      	ldr	r3, [pc, #208]	; (c5e0 <udd_ctrl_out_received+0x1b0>)
    c50e:	58e3      	ldr	r3, [r4, r3]
    c510:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    c512:	e047      	b.n	c5a4 <udd_ctrl_out_received+0x174>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    c514:	4b33      	ldr	r3, [pc, #204]	; (c5e4 <udd_ctrl_out_received+0x1b4>)
    c516:	447b      	add	r3, pc
    c518:	4798      	blx	r3
		return;
    c51a:	e043      	b.n	c5a4 <udd_ctrl_out_received+0x174>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    c51c:	4b24      	ldr	r3, [pc, #144]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c51e:	58e3      	ldr	r3, [r4, r3]
    c520:	899a      	ldrh	r2, [r3, #12]
    c522:	4b31      	ldr	r3, [pc, #196]	; (c5e8 <udd_ctrl_out_received+0x1b8>)
    c524:	447b      	add	r3, pc
    c526:	881b      	ldrh	r3, [r3, #0]
    c528:	429a      	cmp	r2, r3
    c52a:	d130      	bne.n	c58e <udd_ctrl_out_received+0x15e>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    c52c:	4b20      	ldr	r3, [pc, #128]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c52e:	58e3      	ldr	r3, [r4, r3]
    c530:	695b      	ldr	r3, [r3, #20]
    c532:	2b00      	cmp	r3, #0
    c534:	d108      	bne.n	c548 <udd_ctrl_out_received+0x118>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c536:	4b2d      	ldr	r3, [pc, #180]	; (c5ec <udd_ctrl_out_received+0x1bc>)
    c538:	447b      	add	r3, pc
    c53a:	2205      	movs	r2, #5
    c53c:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    c53e:	2000      	movs	r0, #0
    c540:	4b27      	ldr	r3, [pc, #156]	; (c5e0 <udd_ctrl_out_received+0x1b0>)
    c542:	58e3      	ldr	r3, [r4, r3]
    c544:	4798      	blx	r3
			return;
    c546:	e02d      	b.n	c5a4 <udd_ctrl_out_received+0x174>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    c548:	4b19      	ldr	r3, [pc, #100]	; (c5b0 <udd_ctrl_out_received+0x180>)
    c54a:	58e3      	ldr	r3, [r4, r3]
    c54c:	695b      	ldr	r3, [r3, #20]
    c54e:	4798      	blx	r3
    c550:	0003      	movs	r3, r0
    c552:	001a      	movs	r2, r3
    c554:	2301      	movs	r3, #1
    c556:	4053      	eors	r3, r2
    c558:	b2db      	uxtb	r3, r3
    c55a:	2b00      	cmp	r3, #0
    c55c:	d008      	beq.n	c570 <udd_ctrl_out_received+0x140>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c55e:	4b24      	ldr	r3, [pc, #144]	; (c5f0 <udd_ctrl_out_received+0x1c0>)
    c560:	447b      	add	r3, pc
    c562:	2205      	movs	r2, #5
    c564:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    c566:	2000      	movs	r0, #0
    c568:	4b1d      	ldr	r3, [pc, #116]	; (c5e0 <udd_ctrl_out_received+0x1b0>)
    c56a:	58e3      	ldr	r3, [r4, r3]
    c56c:	4798      	blx	r3
			return;
    c56e:	e019      	b.n	c5a4 <udd_ctrl_out_received+0x174>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    c570:	4b20      	ldr	r3, [pc, #128]	; (c5f4 <udd_ctrl_out_received+0x1c4>)
    c572:	447b      	add	r3, pc
    c574:	881a      	ldrh	r2, [r3, #0]
    c576:	4b20      	ldr	r3, [pc, #128]	; (c5f8 <udd_ctrl_out_received+0x1c8>)
    c578:	447b      	add	r3, pc
    c57a:	881b      	ldrh	r3, [r3, #0]
    c57c:	18d3      	adds	r3, r2, r3
    c57e:	b29a      	uxth	r2, r3
    c580:	4b1e      	ldr	r3, [pc, #120]	; (c5fc <udd_ctrl_out_received+0x1cc>)
    c582:	447b      	add	r3, pc
    c584:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    c586:	4b1e      	ldr	r3, [pc, #120]	; (c600 <udd_ctrl_out_received+0x1d0>)
    c588:	447b      	add	r3, pc
    c58a:	2200      	movs	r2, #0
    c58c:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c58e:	4b0c      	ldr	r3, [pc, #48]	; (c5c0 <udd_ctrl_out_received+0x190>)
    c590:	58e3      	ldr	r3, [r4, r3]
    c592:	001a      	movs	r2, r3
    c594:	4b1b      	ldr	r3, [pc, #108]	; (c604 <udd_ctrl_out_received+0x1d4>)
    c596:	58e3      	ldr	r3, [r4, r3]
    c598:	0018      	movs	r0, r3
    c59a:	2340      	movs	r3, #64	; 0x40
    c59c:	2100      	movs	r1, #0
    c59e:	4d1a      	ldr	r5, [pc, #104]	; (c608 <udd_ctrl_out_received+0x1d8>)
    c5a0:	5964      	ldr	r4, [r4, r5]
    c5a2:	47a0      	blx	r4
}
    c5a4:	46bd      	mov	sp, r7
    c5a6:	b004      	add	sp, #16
    c5a8:	bdb0      	pop	{r4, r5, r7, pc}
    c5aa:	46c0      	nop			; (mov r8, r8)
    c5ac:	00005a26 	.word	0x00005a26
    c5b0:	000001e8 	.word	0x000001e8
    c5b4:	1fff414e 	.word	0x1fff414e
    c5b8:	1fff4134 	.word	0x1fff4134
    c5bc:	1fff4120 	.word	0x1fff4120
    c5c0:	000002bc 	.word	0x000002bc
    c5c4:	0000008c 	.word	0x0000008c
    c5c8:	1fff4106 	.word	0x1fff4106
    c5cc:	1fff40f6 	.word	0x1fff40f6
    c5d0:	1fff40dc 	.word	0x1fff40dc
    c5d4:	1fff40d6 	.word	0x1fff40d6
    c5d8:	1fff40ca 	.word	0x1fff40ca
    c5dc:	1fff409a 	.word	0x1fff409a
    c5e0:	00000128 	.word	0x00000128
    c5e4:	fffffd6f 	.word	0xfffffd6f
    c5e8:	1fff407e 	.word	0x1fff407e
    c5ec:	1fff4066 	.word	0x1fff4066
    c5f0:	1fff403e 	.word	0x1fff403e
    c5f4:	1fff402e 	.word	0x1fff402e
    c5f8:	1fff402a 	.word	0x1fff402a
    c5fc:	1fff401e 	.word	0x1fff401e
    c600:	1fff401a 	.word	0x1fff401a
    c604:	00000078 	.word	0x00000078
    c608:	0000014c 	.word	0x0000014c

0000c60c <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    c60c:	b5b0      	push	{r4, r5, r7, lr}
    c60e:	b084      	sub	sp, #16
    c610:	af00      	add	r7, sp, #0
    c612:	6078      	str	r0, [r7, #4]
    c614:	6039      	str	r1, [r7, #0]
    c616:	4c39      	ldr	r4, [pc, #228]	; (c6fc <_usb_ep0_on_setup+0xf0>)
    c618:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    c61a:	683b      	ldr	r3, [r7, #0]
    c61c:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    c61e:	4b38      	ldr	r3, [pc, #224]	; (c700 <_usb_ep0_on_setup+0xf4>)
    c620:	447b      	add	r3, pc
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	2b00      	cmp	r3, #0
    c626:	d00c      	beq.n	c642 <_usb_ep0_on_setup+0x36>
		if (NULL != udd_g_ctrlreq.callback) {
    c628:	4b36      	ldr	r3, [pc, #216]	; (c704 <_usb_ep0_on_setup+0xf8>)
    c62a:	58e3      	ldr	r3, [r4, r3]
    c62c:	691b      	ldr	r3, [r3, #16]
    c62e:	2b00      	cmp	r3, #0
    c630:	d003      	beq.n	c63a <_usb_ep0_on_setup+0x2e>
			udd_g_ctrlreq.callback();
    c632:	4b34      	ldr	r3, [pc, #208]	; (c704 <_usb_ep0_on_setup+0xf8>)
    c634:	58e3      	ldr	r3, [r4, r3]
    c636:	691b      	ldr	r3, [r3, #16]
    c638:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    c63a:	4b33      	ldr	r3, [pc, #204]	; (c708 <_usb_ep0_on_setup+0xfc>)
    c63c:	447b      	add	r3, pc
    c63e:	2200      	movs	r2, #0
    c640:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	881b      	ldrh	r3, [r3, #0]
    c646:	2b08      	cmp	r3, #8
    c648:	d003      	beq.n	c652 <_usb_ep0_on_setup+0x46>
		udd_ctrl_stall_data();
    c64a:	4b30      	ldr	r3, [pc, #192]	; (c70c <_usb_ep0_on_setup+0x100>)
    c64c:	447b      	add	r3, pc
    c64e:	4798      	blx	r3
		return;
    c650:	e051      	b.n	c6f6 <_usb_ep0_on_setup+0xea>
	} else {
		udd_ctrl_fetch_ram();
    c652:	4b2f      	ldr	r3, [pc, #188]	; (c710 <_usb_ep0_on_setup+0x104>)
    c654:	447b      	add	r3, pc
    c656:	4798      	blx	r3
		if (false == udc_process_setup()) {
    c658:	4b2e      	ldr	r3, [pc, #184]	; (c714 <_usb_ep0_on_setup+0x108>)
    c65a:	58e3      	ldr	r3, [r4, r3]
    c65c:	4798      	blx	r3
    c65e:	0003      	movs	r3, r0
    c660:	001a      	movs	r2, r3
    c662:	2301      	movs	r3, #1
    c664:	4053      	eors	r3, r2
    c666:	b2db      	uxtb	r3, r3
    c668:	2b00      	cmp	r3, #0
    c66a:	d003      	beq.n	c674 <_usb_ep0_on_setup+0x68>
			udd_ctrl_stall_data();
    c66c:	4b2a      	ldr	r3, [pc, #168]	; (c718 <_usb_ep0_on_setup+0x10c>)
    c66e:	447b      	add	r3, pc
    c670:	4798      	blx	r3
			return;
    c672:	e040      	b.n	c6f6 <_usb_ep0_on_setup+0xea>
		} else if (Udd_setup_is_in()) {
    c674:	4b23      	ldr	r3, [pc, #140]	; (c704 <_usb_ep0_on_setup+0xf8>)
    c676:	58e3      	ldr	r3, [r4, r3]
    c678:	781b      	ldrb	r3, [r3, #0]
    c67a:	b25b      	sxtb	r3, r3
    c67c:	2b00      	cmp	r3, #0
    c67e:	da1a      	bge.n	c6b6 <_usb_ep0_on_setup+0xaa>
			udd_ctrl_prev_payload_nb_trans = 0;
    c680:	4b26      	ldr	r3, [pc, #152]	; (c71c <_usb_ep0_on_setup+0x110>)
    c682:	447b      	add	r3, pc
    c684:	2200      	movs	r2, #0
    c686:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    c688:	4b25      	ldr	r3, [pc, #148]	; (c720 <_usb_ep0_on_setup+0x114>)
    c68a:	447b      	add	r3, pc
    c68c:	2200      	movs	r2, #0
    c68e:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    c690:	4b24      	ldr	r3, [pc, #144]	; (c724 <_usb_ep0_on_setup+0x118>)
    c692:	447b      	add	r3, pc
    c694:	2202      	movs	r2, #2
    c696:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c698:	4b23      	ldr	r3, [pc, #140]	; (c728 <_usb_ep0_on_setup+0x11c>)
    c69a:	58e3      	ldr	r3, [r4, r3]
    c69c:	001a      	movs	r2, r3
    c69e:	4b23      	ldr	r3, [pc, #140]	; (c72c <_usb_ep0_on_setup+0x120>)
    c6a0:	58e3      	ldr	r3, [r4, r3]
    c6a2:	0018      	movs	r0, r3
    c6a4:	2340      	movs	r3, #64	; 0x40
    c6a6:	2100      	movs	r1, #0
    c6a8:	4d21      	ldr	r5, [pc, #132]	; (c730 <_usb_ep0_on_setup+0x124>)
    c6aa:	5964      	ldr	r4, [r4, r5]
    c6ac:	47a0      	blx	r4
			udd_ctrl_in_sent();
    c6ae:	4b21      	ldr	r3, [pc, #132]	; (c734 <_usb_ep0_on_setup+0x128>)
    c6b0:	447b      	add	r3, pc
    c6b2:	4798      	blx	r3
    c6b4:	e01f      	b.n	c6f6 <_usb_ep0_on_setup+0xea>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    c6b6:	4b13      	ldr	r3, [pc, #76]	; (c704 <_usb_ep0_on_setup+0xf8>)
    c6b8:	58e3      	ldr	r3, [r4, r3]
    c6ba:	88db      	ldrh	r3, [r3, #6]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d103      	bne.n	c6c8 <_usb_ep0_on_setup+0xbc>
				udd_ctrl_send_zlp_in();
    c6c0:	4b1d      	ldr	r3, [pc, #116]	; (c738 <_usb_ep0_on_setup+0x12c>)
    c6c2:	447b      	add	r3, pc
    c6c4:	4798      	blx	r3
				return;
    c6c6:	e016      	b.n	c6f6 <_usb_ep0_on_setup+0xea>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    c6c8:	4b1c      	ldr	r3, [pc, #112]	; (c73c <_usb_ep0_on_setup+0x130>)
    c6ca:	447b      	add	r3, pc
    c6cc:	2200      	movs	r2, #0
    c6ce:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    c6d0:	4b1b      	ldr	r3, [pc, #108]	; (c740 <_usb_ep0_on_setup+0x134>)
    c6d2:	447b      	add	r3, pc
    c6d4:	2200      	movs	r2, #0
    c6d6:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    c6d8:	4b1a      	ldr	r3, [pc, #104]	; (c744 <_usb_ep0_on_setup+0x138>)
    c6da:	447b      	add	r3, pc
    c6dc:	2201      	movs	r2, #1
    c6de:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c6e0:	4b11      	ldr	r3, [pc, #68]	; (c728 <_usb_ep0_on_setup+0x11c>)
    c6e2:	58e3      	ldr	r3, [r4, r3]
    c6e4:	001a      	movs	r2, r3
    c6e6:	4b11      	ldr	r3, [pc, #68]	; (c72c <_usb_ep0_on_setup+0x120>)
    c6e8:	58e3      	ldr	r3, [r4, r3]
    c6ea:	0018      	movs	r0, r3
    c6ec:	2340      	movs	r3, #64	; 0x40
    c6ee:	2100      	movs	r1, #0
    c6f0:	4d0f      	ldr	r5, [pc, #60]	; (c730 <_usb_ep0_on_setup+0x124>)
    c6f2:	5964      	ldr	r4, [r4, r5]
    c6f4:	47a0      	blx	r4
			}
		}
	}
}
    c6f6:	46bd      	mov	sp, r7
    c6f8:	b004      	add	sp, #16
    c6fa:	bdb0      	pop	{r4, r5, r7, pc}
    c6fc:	00005848 	.word	0x00005848
    c700:	1fff3f7e 	.word	0x1fff3f7e
    c704:	000001e8 	.word	0x000001e8
    c708:	1fff3f62 	.word	0x1fff3f62
    c70c:	fffff7b5 	.word	0xfffff7b5
    c710:	fffffba1 	.word	0xfffffba1
    c714:	00000140 	.word	0x00000140
    c718:	fffff793 	.word	0xfffff793
    c71c:	1fff3f1e 	.word	0x1fff3f1e
    c720:	1fff3f18 	.word	0x1fff3f18
    c724:	1fff3f0c 	.word	0x1fff3f0c
    c728:	000002bc 	.word	0x000002bc
    c72c:	00000078 	.word	0x00000078
    c730:	0000014c 	.word	0x0000014c
    c734:	fffffc31 	.word	0xfffffc31
    c738:	fffffbc3 	.word	0xfffffbc3
    c73c:	1fff3ed6 	.word	0x1fff3ed6
    c740:	1fff3ed0 	.word	0x1fff3ed0
    c744:	1fff3ec4 	.word	0x1fff3ec4

0000c748 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    c748:	b580      	push	{r7, lr}
    c74a:	b084      	sub	sp, #16
    c74c:	af00      	add	r7, sp, #0
    c74e:	6078      	str	r0, [r7, #4]
    c750:	4b0e      	ldr	r3, [pc, #56]	; (c78c <udd_ctrl_underflow+0x44>)
    c752:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    c754:	687a      	ldr	r2, [r7, #4]
    c756:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    c758:	4a0d      	ldr	r2, [pc, #52]	; (c790 <udd_ctrl_underflow+0x48>)
    c75a:	447a      	add	r2, pc
    c75c:	7812      	ldrb	r2, [r2, #0]
    c75e:	2a01      	cmp	r2, #1
    c760:	d103      	bne.n	c76a <udd_ctrl_underflow+0x22>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    c762:	4b0c      	ldr	r3, [pc, #48]	; (c794 <udd_ctrl_underflow+0x4c>)
    c764:	447b      	add	r3, pc
    c766:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    c768:	e00c      	b.n	c784 <udd_ctrl_underflow+0x3c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    c76a:	4a0b      	ldr	r2, [pc, #44]	; (c798 <udd_ctrl_underflow+0x50>)
    c76c:	447a      	add	r2, pc
    c76e:	7812      	ldrb	r2, [r2, #0]
    c770:	2a04      	cmp	r2, #4
    c772:	d107      	bne.n	c784 <udd_ctrl_underflow+0x3c>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    c774:	68fa      	ldr	r2, [r7, #12]
    c776:	7991      	ldrb	r1, [r2, #6]
    c778:	4a08      	ldr	r2, [pc, #32]	; (c79c <udd_ctrl_underflow+0x54>)
    c77a:	589a      	ldr	r2, [r3, r2]
    c77c:	0010      	movs	r0, r2
    c77e:	4a08      	ldr	r2, [pc, #32]	; (c7a0 <udd_ctrl_underflow+0x58>)
    c780:	589b      	ldr	r3, [r3, r2]
    c782:	4798      	blx	r3
}
    c784:	46c0      	nop			; (mov r8, r8)
    c786:	46bd      	mov	sp, r7
    c788:	b004      	add	sp, #16
    c78a:	bd80      	pop	{r7, pc}
    c78c:	0000570e 	.word	0x0000570e
    c790:	1fff3e44 	.word	0x1fff3e44
    c794:	fffffb21 	.word	0xfffffb21
    c798:	1fff3e32 	.word	0x1fff3e32
    c79c:	00000078 	.word	0x00000078
    c7a0:	00000274 	.word	0x00000274

0000c7a4 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    c7a4:	b580      	push	{r7, lr}
    c7a6:	b084      	sub	sp, #16
    c7a8:	af00      	add	r7, sp, #0
    c7aa:	6078      	str	r0, [r7, #4]
    c7ac:	4b0f      	ldr	r3, [pc, #60]	; (c7ec <udd_ctrl_overflow+0x48>)
    c7ae:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    c7b0:	687a      	ldr	r2, [r7, #4]
    c7b2:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    c7b4:	4a0e      	ldr	r2, [pc, #56]	; (c7f0 <udd_ctrl_overflow+0x4c>)
    c7b6:	447a      	add	r2, pc
    c7b8:	7812      	ldrb	r2, [r2, #0]
    c7ba:	2a02      	cmp	r2, #2
    c7bc:	d104      	bne.n	c7c8 <udd_ctrl_overflow+0x24>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    c7be:	4b0d      	ldr	r3, [pc, #52]	; (c7f4 <udd_ctrl_overflow+0x50>)
    c7c0:	447b      	add	r3, pc
    c7c2:	2204      	movs	r2, #4
    c7c4:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    c7c6:	e00c      	b.n	c7e2 <udd_ctrl_overflow+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    c7c8:	4a0b      	ldr	r2, [pc, #44]	; (c7f8 <udd_ctrl_overflow+0x54>)
    c7ca:	447a      	add	r2, pc
    c7cc:	7812      	ldrb	r2, [r2, #0]
    c7ce:	2a03      	cmp	r2, #3
    c7d0:	d107      	bne.n	c7e2 <udd_ctrl_overflow+0x3e>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    c7d2:	68fa      	ldr	r2, [r7, #12]
    c7d4:	7991      	ldrb	r1, [r2, #6]
    c7d6:	4a09      	ldr	r2, [pc, #36]	; (c7fc <udd_ctrl_overflow+0x58>)
    c7d8:	589a      	ldr	r2, [r3, r2]
    c7da:	0010      	movs	r0, r2
    c7dc:	4a08      	ldr	r2, [pc, #32]	; (c800 <udd_ctrl_overflow+0x5c>)
    c7de:	589b      	ldr	r3, [r3, r2]
    c7e0:	4798      	blx	r3
}
    c7e2:	46c0      	nop			; (mov r8, r8)
    c7e4:	46bd      	mov	sp, r7
    c7e6:	b004      	add	sp, #16
    c7e8:	bd80      	pop	{r7, pc}
    c7ea:	46c0      	nop			; (mov r8, r8)
    c7ec:	000056b2 	.word	0x000056b2
    c7f0:	1fff3de8 	.word	0x1fff3de8
    c7f4:	1fff3dde 	.word	0x1fff3dde
    c7f8:	1fff3dd4 	.word	0x1fff3dd4
    c7fc:	00000078 	.word	0x00000078
    c800:	00000274 	.word	0x00000274

0000c804 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    c804:	b580      	push	{r7, lr}
    c806:	b084      	sub	sp, #16
    c808:	af00      	add	r7, sp, #0
    c80a:	6078      	str	r0, [r7, #4]
    c80c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    c80e:	683b      	ldr	r3, [r7, #0]
    c810:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    c812:	68fb      	ldr	r3, [r7, #12]
    c814:	799b      	ldrb	r3, [r3, #6]
    c816:	b25b      	sxtb	r3, r3
    c818:	2b00      	cmp	r3, #0
    c81a:	da05      	bge.n	c828 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    c81c:	683b      	ldr	r3, [r7, #0]
    c81e:	0018      	movs	r0, r3
    c820:	4b06      	ldr	r3, [pc, #24]	; (c83c <_usb_ep0_on_tansfer_fail+0x38>)
    c822:	447b      	add	r3, pc
    c824:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    c826:	e004      	b.n	c832 <_usb_ep0_on_tansfer_fail+0x2e>
		udd_ctrl_overflow(pointer);
    c828:	683b      	ldr	r3, [r7, #0]
    c82a:	0018      	movs	r0, r3
    c82c:	4b04      	ldr	r3, [pc, #16]	; (c840 <_usb_ep0_on_tansfer_fail+0x3c>)
    c82e:	447b      	add	r3, pc
    c830:	4798      	blx	r3
}
    c832:	46c0      	nop			; (mov r8, r8)
    c834:	46bd      	mov	sp, r7
    c836:	b004      	add	sp, #16
    c838:	bd80      	pop	{r7, pc}
    c83a:	46c0      	nop			; (mov r8, r8)
    c83c:	ffffff23 	.word	0xffffff23
    c840:	ffffff73 	.word	0xffffff73

0000c844 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    c844:	b580      	push	{r7, lr}
    c846:	b082      	sub	sp, #8
    c848:	af00      	add	r7, sp, #0
    c84a:	6078      	str	r0, [r7, #4]
    c84c:	6039      	str	r1, [r7, #0]
    c84e:	4b13      	ldr	r3, [pc, #76]	; (c89c <_usb_ep0_on_tansfer_ok+0x58>)
    c850:	447b      	add	r3, pc
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    c852:	4a13      	ldr	r2, [pc, #76]	; (c8a0 <_usb_ep0_on_tansfer_ok+0x5c>)
    c854:	447a      	add	r2, pc
    c856:	7812      	ldrb	r2, [r2, #0]
    c858:	2a01      	cmp	r2, #1
    c85a:	d105      	bne.n	c868 <_usb_ep0_on_tansfer_ok+0x24>
			udd_ctrl_out_received(pointer);
    c85c:	683b      	ldr	r3, [r7, #0]
    c85e:	0018      	movs	r0, r3
    c860:	4b10      	ldr	r3, [pc, #64]	; (c8a4 <_usb_ep0_on_tansfer_ok+0x60>)
    c862:	447b      	add	r3, pc
    c864:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    c866:	e015      	b.n	c894 <_usb_ep0_on_tansfer_ok+0x50>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    c868:	4a0f      	ldr	r2, [pc, #60]	; (c8a8 <_usb_ep0_on_tansfer_ok+0x64>)
    c86a:	447a      	add	r2, pc
    c86c:	7812      	ldrb	r2, [r2, #0]
    c86e:	2a02      	cmp	r2, #2
    c870:	d103      	bne.n	c87a <_usb_ep0_on_tansfer_ok+0x36>
			udd_ctrl_in_sent();
    c872:	4b0e      	ldr	r3, [pc, #56]	; (c8ac <_usb_ep0_on_tansfer_ok+0x68>)
    c874:	447b      	add	r3, pc
    c876:	4798      	blx	r3
}
    c878:	e00c      	b.n	c894 <_usb_ep0_on_tansfer_ok+0x50>
			if (NULL != udd_g_ctrlreq.callback) {
    c87a:	4a0d      	ldr	r2, [pc, #52]	; (c8b0 <_usb_ep0_on_tansfer_ok+0x6c>)
    c87c:	589a      	ldr	r2, [r3, r2]
    c87e:	6912      	ldr	r2, [r2, #16]
    c880:	2a00      	cmp	r2, #0
    c882:	d003      	beq.n	c88c <_usb_ep0_on_tansfer_ok+0x48>
				udd_g_ctrlreq.callback();
    c884:	4a0a      	ldr	r2, [pc, #40]	; (c8b0 <_usb_ep0_on_tansfer_ok+0x6c>)
    c886:	589b      	ldr	r3, [r3, r2]
    c888:	691b      	ldr	r3, [r3, #16]
    c88a:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    c88c:	4b09      	ldr	r3, [pc, #36]	; (c8b4 <_usb_ep0_on_tansfer_ok+0x70>)
    c88e:	447b      	add	r3, pc
    c890:	2200      	movs	r2, #0
    c892:	701a      	strb	r2, [r3, #0]
}
    c894:	46c0      	nop			; (mov r8, r8)
    c896:	46bd      	mov	sp, r7
    c898:	b002      	add	sp, #8
    c89a:	bd80      	pop	{r7, pc}
    c89c:	00005610 	.word	0x00005610
    c8a0:	1fff3d4a 	.word	0x1fff3d4a
    c8a4:	fffffbcb 	.word	0xfffffbcb
    c8a8:	1fff3d34 	.word	0x1fff3d34
    c8ac:	fffffa6d 	.word	0xfffffa6d
    c8b0:	000001e8 	.word	0x000001e8
    c8b4:	1fff3d10 	.word	0x1fff3d10

0000c8b8 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    c8b8:	b5b0      	push	{r4, r5, r7, lr}
    c8ba:	b084      	sub	sp, #16
    c8bc:	af00      	add	r7, sp, #0
    c8be:	6078      	str	r0, [r7, #4]
    c8c0:	4c2b      	ldr	r4, [pc, #172]	; (c970 <udd_ctrl_ep_enable+0xb8>)
    c8c2:	447c      	add	r4, pc
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    c8c4:	230c      	movs	r3, #12
    c8c6:	18fb      	adds	r3, r7, r3
    c8c8:	0018      	movs	r0, r3
    c8ca:	4b2a      	ldr	r3, [pc, #168]	; (c974 <udd_ctrl_ep_enable+0xbc>)
    c8cc:	58e3      	ldr	r3, [r4, r3]
    c8ce:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    c8d0:	230c      	movs	r3, #12
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	2203      	movs	r2, #3
    c8d6:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    c8d8:	230c      	movs	r3, #12
    c8da:	18fa      	adds	r2, r7, r3
    c8dc:	687b      	ldr	r3, [r7, #4]
    c8de:	0011      	movs	r1, r2
    c8e0:	0018      	movs	r0, r3
    c8e2:	4b25      	ldr	r3, [pc, #148]	; (c978 <udd_ctrl_ep_enable+0xc0>)
    c8e4:	58e3      	ldr	r3, [r4, r3]
    c8e6:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    c8e8:	4b24      	ldr	r3, [pc, #144]	; (c97c <udd_ctrl_ep_enable+0xc4>)
    c8ea:	58e3      	ldr	r3, [r4, r3]
    c8ec:	001a      	movs	r2, r3
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	0011      	movs	r1, r2
    c8f2:	0018      	movs	r0, r3
    c8f4:	4b22      	ldr	r3, [pc, #136]	; (c980 <udd_ctrl_ep_enable+0xc8>)
    c8f6:	58e3      	ldr	r3, [r4, r3]
    c8f8:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    c8fa:	4b22      	ldr	r3, [pc, #136]	; (c984 <udd_ctrl_ep_enable+0xcc>)
    c8fc:	447b      	add	r3, pc
    c8fe:	6878      	ldr	r0, [r7, #4]
    c900:	2202      	movs	r2, #2
    c902:	2100      	movs	r1, #0
    c904:	4d20      	ldr	r5, [pc, #128]	; (c988 <udd_ctrl_ep_enable+0xd0>)
    c906:	5965      	ldr	r5, [r4, r5]
    c908:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    c90a:	4b20      	ldr	r3, [pc, #128]	; (c98c <udd_ctrl_ep_enable+0xd4>)
    c90c:	447b      	add	r3, pc
    c90e:	6878      	ldr	r0, [r7, #4]
    c910:	2200      	movs	r2, #0
    c912:	2100      	movs	r1, #0
    c914:	4d1c      	ldr	r5, [pc, #112]	; (c988 <udd_ctrl_ep_enable+0xd0>)
    c916:	5965      	ldr	r5, [r4, r5]
    c918:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    c91a:	4b1d      	ldr	r3, [pc, #116]	; (c990 <udd_ctrl_ep_enable+0xd8>)
    c91c:	447b      	add	r3, pc
    c91e:	6878      	ldr	r0, [r7, #4]
    c920:	2201      	movs	r2, #1
    c922:	2100      	movs	r1, #0
    c924:	4d18      	ldr	r5, [pc, #96]	; (c988 <udd_ctrl_ep_enable+0xd0>)
    c926:	5965      	ldr	r5, [r4, r5]
    c928:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	2202      	movs	r2, #2
    c92e:	2100      	movs	r1, #0
    c930:	0018      	movs	r0, r3
    c932:	4b18      	ldr	r3, [pc, #96]	; (c994 <udd_ctrl_ep_enable+0xdc>)
    c934:	58e3      	ldr	r3, [r4, r3]
    c936:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    c938:	687b      	ldr	r3, [r7, #4]
    c93a:	2200      	movs	r2, #0
    c93c:	2100      	movs	r1, #0
    c93e:	0018      	movs	r0, r3
    c940:	4b14      	ldr	r3, [pc, #80]	; (c994 <udd_ctrl_ep_enable+0xdc>)
    c942:	58e3      	ldr	r3, [r4, r3]
    c944:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    c946:	687b      	ldr	r3, [r7, #4]
    c948:	2201      	movs	r2, #1
    c94a:	2100      	movs	r1, #0
    c94c:	0018      	movs	r0, r3
    c94e:	4b11      	ldr	r3, [pc, #68]	; (c994 <udd_ctrl_ep_enable+0xdc>)
    c950:	58e3      	ldr	r3, [r4, r3]
    c952:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    c954:	687b      	ldr	r3, [r7, #4]
    c956:	2101      	movs	r1, #1
    c958:	0018      	movs	r0, r3
    c95a:	4b0f      	ldr	r3, [pc, #60]	; (c998 <udd_ctrl_ep_enable+0xe0>)
    c95c:	447b      	add	r3, pc
    c95e:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    c960:	4b0e      	ldr	r3, [pc, #56]	; (c99c <udd_ctrl_ep_enable+0xe4>)
    c962:	447b      	add	r3, pc
    c964:	2200      	movs	r2, #0
    c966:	701a      	strb	r2, [r3, #0]
}
    c968:	46c0      	nop			; (mov r8, r8)
    c96a:	46bd      	mov	sp, r7
    c96c:	b004      	add	sp, #16
    c96e:	bdb0      	pop	{r4, r5, r7, pc}
    c970:	0000559e 	.word	0x0000559e
    c974:	00000104 	.word	0x00000104
    c978:	00000074 	.word	0x00000074
    c97c:	000002bc 	.word	0x000002bc
    c980:	000000c0 	.word	0x000000c0
    c984:	fffffd0d 	.word	0xfffffd0d
    c988:	00000154 	.word	0x00000154
    c98c:	ffffff35 	.word	0xffffff35
    c990:	fffffee5 	.word	0xfffffee5
    c994:	000002b0 	.word	0x000002b0
    c998:	ffffea11 	.word	0xffffea11
    c99c:	1fff3c3c 	.word	0x1fff3c3c

0000c9a0 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    c9a0:	b590      	push	{r4, r7, lr}
    c9a2:	b083      	sub	sp, #12
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	6078      	str	r0, [r7, #4]
    c9a8:	6039      	str	r1, [r7, #0]
    c9aa:	4c0c      	ldr	r4, [pc, #48]	; (c9dc <_usb_on_suspend+0x3c>)
    c9ac:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    c9ae:	4b0c      	ldr	r3, [pc, #48]	; (c9e0 <_usb_on_suspend+0x40>)
    c9b0:	58e3      	ldr	r3, [r4, r3]
    c9b2:	2104      	movs	r1, #4
    c9b4:	0018      	movs	r0, r3
    c9b6:	4b0b      	ldr	r3, [pc, #44]	; (c9e4 <_usb_on_suspend+0x44>)
    c9b8:	58e3      	ldr	r3, [r4, r3]
    c9ba:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    c9bc:	4b08      	ldr	r3, [pc, #32]	; (c9e0 <_usb_on_suspend+0x40>)
    c9be:	58e3      	ldr	r3, [r4, r3]
    c9c0:	2102      	movs	r1, #2
    c9c2:	0018      	movs	r0, r3
    c9c4:	4b08      	ldr	r3, [pc, #32]	; (c9e8 <_usb_on_suspend+0x48>)
    c9c6:	58e3      	ldr	r3, [r4, r3]
    c9c8:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    c9ca:	2001      	movs	r0, #1
    c9cc:	4b07      	ldr	r3, [pc, #28]	; (c9ec <_usb_on_suspend+0x4c>)
    c9ce:	447b      	add	r3, pc
    c9d0:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
#endif
}
    c9d2:	46c0      	nop			; (mov r8, r8)
    c9d4:	46bd      	mov	sp, r7
    c9d6:	b003      	add	sp, #12
    c9d8:	bd90      	pop	{r4, r7, pc}
    c9da:	46c0      	nop			; (mov r8, r8)
    c9dc:	000054b4 	.word	0x000054b4
    c9e0:	00000078 	.word	0x00000078
    c9e4:	00000054 	.word	0x00000054
    c9e8:	0000016c 	.word	0x0000016c
    c9ec:	ffffeadb 	.word	0xffffeadb

0000c9f0 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    c9f0:	b590      	push	{r4, r7, lr}
    c9f2:	b085      	sub	sp, #20
    c9f4:	af00      	add	r7, sp, #0
    c9f6:	6078      	str	r0, [r7, #4]
    c9f8:	6039      	str	r1, [r7, #0]
    c9fa:	4c10      	ldr	r4, [pc, #64]	; (ca3c <_usb_device_lpm_suspend+0x4c>)
    c9fc:	447c      	add	r4, pc
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    c9fe:	683b      	ldr	r3, [r7, #0]
    ca00:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    ca02:	4b0f      	ldr	r3, [pc, #60]	; (ca40 <_usb_device_lpm_suspend+0x50>)
    ca04:	58e3      	ldr	r3, [r4, r3]
    ca06:	2106      	movs	r1, #6
    ca08:	0018      	movs	r0, r3
    ca0a:	4b0e      	ldr	r3, [pc, #56]	; (ca44 <_usb_device_lpm_suspend+0x54>)
    ca0c:	58e3      	ldr	r3, [r4, r3]
    ca0e:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    ca10:	4b0b      	ldr	r3, [pc, #44]	; (ca40 <_usb_device_lpm_suspend+0x50>)
    ca12:	58e3      	ldr	r3, [r4, r3]
    ca14:	2104      	movs	r1, #4
    ca16:	0018      	movs	r0, r3
    ca18:	4b0a      	ldr	r3, [pc, #40]	; (ca44 <_usb_device_lpm_suspend+0x54>)
    ca1a:	58e3      	ldr	r3, [r4, r3]
    ca1c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    ca1e:	4b08      	ldr	r3, [pc, #32]	; (ca40 <_usb_device_lpm_suspend+0x50>)
    ca20:	58e3      	ldr	r3, [r4, r3]
    ca22:	2102      	movs	r1, #2
    ca24:	0018      	movs	r0, r3
    ca26:	4b08      	ldr	r3, [pc, #32]	; (ca48 <_usb_device_lpm_suspend+0x58>)
    ca28:	58e3      	ldr	r3, [r4, r3]
    ca2a:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    ca2c:	2002      	movs	r0, #2
    ca2e:	4b07      	ldr	r3, [pc, #28]	; (ca4c <_usb_device_lpm_suspend+0x5c>)
    ca30:	447b      	add	r3, pc
    ca32:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    ca34:	46c0      	nop			; (mov r8, r8)
    ca36:	46bd      	mov	sp, r7
    ca38:	b005      	add	sp, #20
    ca3a:	bd90      	pop	{r4, r7, pc}
    ca3c:	00005464 	.word	0x00005464
    ca40:	00000078 	.word	0x00000078
    ca44:	00000054 	.word	0x00000054
    ca48:	0000016c 	.word	0x0000016c
    ca4c:	ffffea79 	.word	0xffffea79

0000ca50 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    ca50:	b580      	push	{r7, lr}
    ca52:	b082      	sub	sp, #8
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
    ca58:	6039      	str	r1, [r7, #0]
    ca5a:	4a04      	ldr	r2, [pc, #16]	; (ca6c <_usb_on_sof_notify+0x1c>)
    ca5c:	447a      	add	r2, pc
	udc_sof_notify();
    ca5e:	4b04      	ldr	r3, [pc, #16]	; (ca70 <_usb_on_sof_notify+0x20>)
    ca60:	58d3      	ldr	r3, [r2, r3]
    ca62:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    ca64:	46c0      	nop			; (mov r8, r8)
    ca66:	46bd      	mov	sp, r7
    ca68:	b002      	add	sp, #8
    ca6a:	bd80      	pop	{r7, pc}
    ca6c:	00005404 	.word	0x00005404
    ca70:	00000190 	.word	0x00000190

0000ca74 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	b082      	sub	sp, #8
    ca78:	af00      	add	r7, sp, #0
    ca7a:	6078      	str	r0, [r7, #4]
    ca7c:	6039      	str	r1, [r7, #0]
    ca7e:	4a0a      	ldr	r2, [pc, #40]	; (caa8 <_usb_on_bus_reset+0x34>)
    ca80:	447a      	add	r2, pc
	// Reset USB Device Stack Core
	udc_reset();
    ca82:	4b0a      	ldr	r3, [pc, #40]	; (caac <_usb_on_bus_reset+0x38>)
    ca84:	58d3      	ldr	r3, [r2, r3]
    ca86:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    ca88:	687b      	ldr	r3, [r7, #4]
    ca8a:	2100      	movs	r1, #0
    ca8c:	0018      	movs	r0, r3
    ca8e:	4b08      	ldr	r3, [pc, #32]	; (cab0 <_usb_on_bus_reset+0x3c>)
    ca90:	447b      	add	r3, pc
    ca92:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    ca94:	687b      	ldr	r3, [r7, #4]
    ca96:	0018      	movs	r0, r3
    ca98:	4b06      	ldr	r3, [pc, #24]	; (cab4 <_usb_on_bus_reset+0x40>)
    ca9a:	447b      	add	r3, pc
    ca9c:	4798      	blx	r3
}
    ca9e:	46c0      	nop			; (mov r8, r8)
    caa0:	46bd      	mov	sp, r7
    caa2:	b002      	add	sp, #8
    caa4:	bd80      	pop	{r7, pc}
    caa6:	46c0      	nop			; (mov r8, r8)
    caa8:	000053e0 	.word	0x000053e0
    caac:	000000a0 	.word	0x000000a0
    cab0:	ffffe881 	.word	0xffffe881
    cab4:	fffffe1b 	.word	0xfffffe1b

0000cab8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    cab8:	b590      	push	{r4, r7, lr}
    caba:	b083      	sub	sp, #12
    cabc:	af00      	add	r7, sp, #0
    cabe:	6078      	str	r0, [r7, #4]
    cac0:	6039      	str	r1, [r7, #0]
    cac2:	4c16      	ldr	r4, [pc, #88]	; (cb1c <_usb_on_wakeup+0x64>)
    cac4:	447c      	add	r4, pc
	udd_wait_clock_ready();
    cac6:	4b16      	ldr	r3, [pc, #88]	; (cb20 <_usb_on_wakeup+0x68>)
    cac8:	447b      	add	r3, pc
    caca:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    cacc:	4b15      	ldr	r3, [pc, #84]	; (cb24 <_usb_on_wakeup+0x6c>)
    cace:	58e3      	ldr	r3, [r4, r3]
    cad0:	2102      	movs	r1, #2
    cad2:	0018      	movs	r0, r3
    cad4:	4b14      	ldr	r3, [pc, #80]	; (cb28 <_usb_on_wakeup+0x70>)
    cad6:	58e3      	ldr	r3, [r4, r3]
    cad8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    cada:	4b12      	ldr	r3, [pc, #72]	; (cb24 <_usb_on_wakeup+0x6c>)
    cadc:	58e3      	ldr	r3, [r4, r3]
    cade:	2104      	movs	r1, #4
    cae0:	0018      	movs	r0, r3
    cae2:	4b12      	ldr	r3, [pc, #72]	; (cb2c <_usb_on_wakeup+0x74>)
    cae4:	58e3      	ldr	r3, [r4, r3]
    cae6:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    cae8:	4b11      	ldr	r3, [pc, #68]	; (cb30 <_usb_on_wakeup+0x78>)
    caea:	447b      	add	r3, pc
    caec:	001a      	movs	r2, r3
    caee:	4b0d      	ldr	r3, [pc, #52]	; (cb24 <_usb_on_wakeup+0x6c>)
    caf0:	58e3      	ldr	r3, [r4, r3]
    caf2:	2106      	movs	r1, #6
    caf4:	0018      	movs	r0, r3
    caf6:	4b0f      	ldr	r3, [pc, #60]	; (cb34 <_usb_on_wakeup+0x7c>)
    caf8:	58e3      	ldr	r3, [r4, r3]
    cafa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    cafc:	4b09      	ldr	r3, [pc, #36]	; (cb24 <_usb_on_wakeup+0x6c>)
    cafe:	58e3      	ldr	r3, [r4, r3]
    cb00:	2106      	movs	r1, #6
    cb02:	0018      	movs	r0, r3
    cb04:	4b09      	ldr	r3, [pc, #36]	; (cb2c <_usb_on_wakeup+0x74>)
    cb06:	58e3      	ldr	r3, [r4, r3]
    cb08:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    cb0a:	2003      	movs	r0, #3
    cb0c:	4b0a      	ldr	r3, [pc, #40]	; (cb38 <_usb_on_wakeup+0x80>)
    cb0e:	447b      	add	r3, pc
    cb10:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    cb12:	46c0      	nop			; (mov r8, r8)
    cb14:	46bd      	mov	sp, r7
    cb16:	b003      	add	sp, #12
    cb18:	bd90      	pop	{r4, r7, pc}
    cb1a:	46c0      	nop			; (mov r8, r8)
    cb1c:	0000539c 	.word	0x0000539c
    cb20:	ffffe9a5 	.word	0xffffe9a5
    cb24:	00000078 	.word	0x00000078
    cb28:	00000054 	.word	0x00000054
    cb2c:	0000016c 	.word	0x0000016c
    cb30:	ffffff03 	.word	0xffffff03
    cb34:	0000003c 	.word	0x0000003c
    cb38:	ffffe99b 	.word	0xffffe99b

0000cb3c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    cb3c:	b5b0      	push	{r4, r5, r7, lr}
    cb3e:	af00      	add	r7, sp, #0
    cb40:	4c31      	ldr	r4, [pc, #196]	; (cc08 <udd_attach+0xcc>)
    cb42:	447c      	add	r4, pc
	udd_sleep_mode(UDD_STATE_IDLE);
    cb44:	2003      	movs	r0, #3
    cb46:	4b31      	ldr	r3, [pc, #196]	; (cc0c <udd_attach+0xd0>)
    cb48:	447b      	add	r3, pc
    cb4a:	4798      	blx	r3
	usb_device_attach(&usb_device);
    cb4c:	4b30      	ldr	r3, [pc, #192]	; (cc10 <udd_attach+0xd4>)
    cb4e:	58e3      	ldr	r3, [r4, r3]
    cb50:	0018      	movs	r0, r3
    cb52:	4b30      	ldr	r3, [pc, #192]	; (cc14 <udd_attach+0xd8>)
    cb54:	447b      	add	r3, pc
    cb56:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    cb58:	4b2f      	ldr	r3, [pc, #188]	; (cc18 <udd_attach+0xdc>)
    cb5a:	447b      	add	r3, pc
    cb5c:	001a      	movs	r2, r3
    cb5e:	4b2c      	ldr	r3, [pc, #176]	; (cc10 <udd_attach+0xd4>)
    cb60:	58e3      	ldr	r3, [r4, r3]
    cb62:	2104      	movs	r1, #4
    cb64:	0018      	movs	r0, r3
    cb66:	4b2d      	ldr	r3, [pc, #180]	; (cc1c <udd_attach+0xe0>)
    cb68:	58e3      	ldr	r3, [r4, r3]
    cb6a:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    cb6c:	4b2c      	ldr	r3, [pc, #176]	; (cc20 <udd_attach+0xe4>)
    cb6e:	447b      	add	r3, pc
    cb70:	001a      	movs	r2, r3
    cb72:	4b27      	ldr	r3, [pc, #156]	; (cc10 <udd_attach+0xd4>)
    cb74:	58e3      	ldr	r3, [r4, r3]
    cb76:	2100      	movs	r1, #0
    cb78:	0018      	movs	r0, r3
    cb7a:	4b28      	ldr	r3, [pc, #160]	; (cc1c <udd_attach+0xe0>)
    cb7c:	58e3      	ldr	r3, [r4, r3]
    cb7e:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    cb80:	4b28      	ldr	r3, [pc, #160]	; (cc24 <udd_attach+0xe8>)
    cb82:	447b      	add	r3, pc
    cb84:	001a      	movs	r2, r3
    cb86:	4b22      	ldr	r3, [pc, #136]	; (cc10 <udd_attach+0xd4>)
    cb88:	58e3      	ldr	r3, [r4, r3]
    cb8a:	2101      	movs	r1, #1
    cb8c:	0018      	movs	r0, r3
    cb8e:	4b23      	ldr	r3, [pc, #140]	; (cc1c <udd_attach+0xe0>)
    cb90:	58e3      	ldr	r3, [r4, r3]
    cb92:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    cb94:	4b24      	ldr	r3, [pc, #144]	; (cc28 <udd_attach+0xec>)
    cb96:	447b      	add	r3, pc
    cb98:	001a      	movs	r2, r3
    cb9a:	4b1d      	ldr	r3, [pc, #116]	; (cc10 <udd_attach+0xd4>)
    cb9c:	58e3      	ldr	r3, [r4, r3]
    cb9e:	2102      	movs	r1, #2
    cba0:	0018      	movs	r0, r3
    cba2:	4b1e      	ldr	r3, [pc, #120]	; (cc1c <udd_attach+0xe0>)
    cba4:	58e3      	ldr	r3, [r4, r3]
    cba6:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    cba8:	4b19      	ldr	r3, [pc, #100]	; (cc10 <udd_attach+0xd4>)
    cbaa:	58e3      	ldr	r3, [r4, r3]
    cbac:	2104      	movs	r1, #4
    cbae:	0018      	movs	r0, r3
    cbb0:	4b1e      	ldr	r3, [pc, #120]	; (cc2c <udd_attach+0xf0>)
    cbb2:	58e3      	ldr	r3, [r4, r3]
    cbb4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    cbb6:	4b16      	ldr	r3, [pc, #88]	; (cc10 <udd_attach+0xd4>)
    cbb8:	58e3      	ldr	r3, [r4, r3]
    cbba:	2100      	movs	r1, #0
    cbbc:	0018      	movs	r0, r3
    cbbe:	4b1b      	ldr	r3, [pc, #108]	; (cc2c <udd_attach+0xf0>)
    cbc0:	58e3      	ldr	r3, [r4, r3]
    cbc2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    cbc4:	4b12      	ldr	r3, [pc, #72]	; (cc10 <udd_attach+0xd4>)
    cbc6:	58e3      	ldr	r3, [r4, r3]
    cbc8:	2101      	movs	r1, #1
    cbca:	0018      	movs	r0, r3
    cbcc:	4b17      	ldr	r3, [pc, #92]	; (cc2c <udd_attach+0xf0>)
    cbce:	58e3      	ldr	r3, [r4, r3]
    cbd0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    cbd2:	4b0f      	ldr	r3, [pc, #60]	; (cc10 <udd_attach+0xd4>)
    cbd4:	58e3      	ldr	r3, [r4, r3]
    cbd6:	2102      	movs	r1, #2
    cbd8:	0018      	movs	r0, r3
    cbda:	4b14      	ldr	r3, [pc, #80]	; (cc2c <udd_attach+0xf0>)
    cbdc:	58e3      	ldr	r3, [r4, r3]
    cbde:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    cbe0:	4b13      	ldr	r3, [pc, #76]	; (cc30 <udd_attach+0xf4>)
    cbe2:	447b      	add	r3, pc
    cbe4:	001a      	movs	r2, r3
    cbe6:	4b0a      	ldr	r3, [pc, #40]	; (cc10 <udd_attach+0xd4>)
    cbe8:	58e3      	ldr	r3, [r4, r3]
    cbea:	2106      	movs	r1, #6
    cbec:	0018      	movs	r0, r3
    cbee:	4b0b      	ldr	r3, [pc, #44]	; (cc1c <udd_attach+0xe0>)
    cbf0:	58e3      	ldr	r3, [r4, r3]
    cbf2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    cbf4:	4b06      	ldr	r3, [pc, #24]	; (cc10 <udd_attach+0xd4>)
    cbf6:	58e3      	ldr	r3, [r4, r3]
    cbf8:	2106      	movs	r1, #6
    cbfa:	0018      	movs	r0, r3
    cbfc:	4b0b      	ldr	r3, [pc, #44]	; (cc2c <udd_attach+0xf0>)
    cbfe:	58e3      	ldr	r3, [r4, r3]
    cc00:	4798      	blx	r3
#endif
}
    cc02:	46c0      	nop			; (mov r8, r8)
    cc04:	46bd      	mov	sp, r7
    cc06:	bdb0      	pop	{r4, r5, r7, pc}
    cc08:	0000531e 	.word	0x0000531e
    cc0c:	ffffe961 	.word	0xffffe961
    cc10:	00000078 	.word	0x00000078
    cc14:	ffffe77d 	.word	0xffffe77d
    cc18:	fffffe43 	.word	0xfffffe43
    cc1c:	0000003c 	.word	0x0000003c
    cc20:	fffffedf 	.word	0xfffffedf
    cc24:	fffffeef 	.word	0xfffffeef
    cc28:	ffffff1f 	.word	0xffffff1f
    cc2c:	0000016c 	.word	0x0000016c
    cc30:	fffffe0b 	.word	0xfffffe0b

0000cc34 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    cc34:	b590      	push	{r4, r7, lr}
    cc36:	b083      	sub	sp, #12
    cc38:	af00      	add	r7, sp, #0
    cc3a:	4c18      	ldr	r4, [pc, #96]	; (cc9c <udd_enable+0x68>)
    cc3c:	447c      	add	r4, pc
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    cc3e:	4b18      	ldr	r3, [pc, #96]	; (cca0 <udd_enable+0x6c>)
    cc40:	447b      	add	r3, pc
    cc42:	4798      	blx	r3
    cc44:	0003      	movs	r3, r0
    cc46:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    cc48:	003b      	movs	r3, r7
    cc4a:	0018      	movs	r0, r3
    cc4c:	4b15      	ldr	r3, [pc, #84]	; (cca4 <udd_enable+0x70>)
    cc4e:	58e3      	ldr	r3, [r4, r3]
    cc50:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    cc52:	003b      	movs	r3, r7
    cc54:	2200      	movs	r2, #0
    cc56:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    cc58:	003a      	movs	r2, r7
    cc5a:	4913      	ldr	r1, [pc, #76]	; (cca8 <udd_enable+0x74>)
    cc5c:	4b13      	ldr	r3, [pc, #76]	; (ccac <udd_enable+0x78>)
    cc5e:	58e3      	ldr	r3, [r4, r3]
    cc60:	0018      	movs	r0, r3
    cc62:	4b13      	ldr	r3, [pc, #76]	; (ccb0 <udd_enable+0x7c>)
    cc64:	58e3      	ldr	r3, [r4, r3]
    cc66:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    cc68:	4b10      	ldr	r3, [pc, #64]	; (ccac <udd_enable+0x78>)
    cc6a:	58e3      	ldr	r3, [r4, r3]
    cc6c:	0018      	movs	r0, r3
    cc6e:	4b11      	ldr	r3, [pc, #68]	; (ccb4 <udd_enable+0x80>)
    cc70:	58e3      	ldr	r3, [r4, r3]
    cc72:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    cc74:	4b10      	ldr	r3, [pc, #64]	; (ccb8 <udd_enable+0x84>)
    cc76:	447b      	add	r3, pc
    cc78:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    cc7a:	2001      	movs	r0, #1
    cc7c:	4b0f      	ldr	r3, [pc, #60]	; (ccbc <udd_enable+0x88>)
    cc7e:	447b      	add	r3, pc
    cc80:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    cc82:	4b0f      	ldr	r3, [pc, #60]	; (ccc0 <udd_enable+0x8c>)
    cc84:	58e3      	ldr	r3, [r4, r3]
    cc86:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	0018      	movs	r0, r3
    cc8c:	4b0d      	ldr	r3, [pc, #52]	; (ccc4 <udd_enable+0x90>)
    cc8e:	447b      	add	r3, pc
    cc90:	4798      	blx	r3
}
    cc92:	46c0      	nop			; (mov r8, r8)
    cc94:	46bd      	mov	sp, r7
    cc96:	b003      	add	sp, #12
    cc98:	bd90      	pop	{r4, r7, pc}
    cc9a:	46c0      	nop			; (mov r8, r8)
    cc9c:	00005224 	.word	0x00005224
    cca0:	ffffe601 	.word	0xffffe601
    cca4:	000000b4 	.word	0x000000b4
    cca8:	41005000 	.word	0x41005000
    ccac:	00000078 	.word	0x00000078
    ccb0:	000000bc 	.word	0x000000bc
    ccb4:	000002e4 	.word	0x000002e4
    ccb8:	ffffe7f7 	.word	0xffffe7f7
    ccbc:	ffffe82b 	.word	0xffffe82b
    ccc0:	00000248 	.word	0x00000248
    ccc4:	ffffe607 	.word	0xffffe607

0000ccc8 <system_gclk_chan_get_config_defaults>:
{
    ccc8:	b580      	push	{r7, lr}
    ccca:	b082      	sub	sp, #8
    cccc:	af00      	add	r7, sp, #0
    ccce:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    ccd0:	687b      	ldr	r3, [r7, #4]
    ccd2:	2200      	movs	r2, #0
    ccd4:	701a      	strb	r2, [r3, #0]
}
    ccd6:	46c0      	nop			; (mov r8, r8)
    ccd8:	46bd      	mov	sp, r7
    ccda:	b002      	add	sp, #8
    ccdc:	bd80      	pop	{r7, pc}
	...

0000cce0 <system_apb_clock_set_mask>:
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b082      	sub	sp, #8
    cce4:	af00      	add	r7, sp, #0
    cce6:	0002      	movs	r2, r0
    cce8:	6039      	str	r1, [r7, #0]
    ccea:	1dfb      	adds	r3, r7, #7
    ccec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ccee:	1dfb      	adds	r3, r7, #7
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	2b01      	cmp	r3, #1
    ccf4:	d00a      	beq.n	cd0c <system_apb_clock_set_mask+0x2c>
    ccf6:	2b02      	cmp	r3, #2
    ccf8:	d00f      	beq.n	cd1a <system_apb_clock_set_mask+0x3a>
    ccfa:	2b00      	cmp	r3, #0
    ccfc:	d114      	bne.n	cd28 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ccfe:	4b0e      	ldr	r3, [pc, #56]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd00:	4a0d      	ldr	r2, [pc, #52]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd02:	6991      	ldr	r1, [r2, #24]
    cd04:	683a      	ldr	r2, [r7, #0]
    cd06:	430a      	orrs	r2, r1
    cd08:	619a      	str	r2, [r3, #24]
			break;
    cd0a:	e00f      	b.n	cd2c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    cd0c:	4b0a      	ldr	r3, [pc, #40]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd0e:	4a0a      	ldr	r2, [pc, #40]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd10:	69d1      	ldr	r1, [r2, #28]
    cd12:	683a      	ldr	r2, [r7, #0]
    cd14:	430a      	orrs	r2, r1
    cd16:	61da      	str	r2, [r3, #28]
			break;
    cd18:	e008      	b.n	cd2c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    cd1a:	4b07      	ldr	r3, [pc, #28]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd1c:	4a06      	ldr	r2, [pc, #24]	; (cd38 <system_apb_clock_set_mask+0x58>)
    cd1e:	6a11      	ldr	r1, [r2, #32]
    cd20:	683a      	ldr	r2, [r7, #0]
    cd22:	430a      	orrs	r2, r1
    cd24:	621a      	str	r2, [r3, #32]
			break;
    cd26:	e001      	b.n	cd2c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    cd28:	2317      	movs	r3, #23
    cd2a:	e000      	b.n	cd2e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    cd2c:	2300      	movs	r3, #0
}
    cd2e:	0018      	movs	r0, r3
    cd30:	46bd      	mov	sp, r7
    cd32:	b002      	add	sp, #8
    cd34:	bd80      	pop	{r7, pc}
    cd36:	46c0      	nop			; (mov r8, r8)
    cd38:	40000400 	.word	0x40000400

0000cd3c <system_pinmux_get_config_defaults>:
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b082      	sub	sp, #8
    cd40:	af00      	add	r7, sp, #0
    cd42:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cd44:	687b      	ldr	r3, [r7, #4]
    cd46:	2280      	movs	r2, #128	; 0x80
    cd48:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cd4a:	687b      	ldr	r3, [r7, #4]
    cd4c:	2200      	movs	r2, #0
    cd4e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cd50:	687b      	ldr	r3, [r7, #4]
    cd52:	2201      	movs	r2, #1
    cd54:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cd56:	687b      	ldr	r3, [r7, #4]
    cd58:	2200      	movs	r2, #0
    cd5a:	70da      	strb	r2, [r3, #3]
}
    cd5c:	46c0      	nop			; (mov r8, r8)
    cd5e:	46bd      	mov	sp, r7
    cd60:	b002      	add	sp, #8
    cd62:	bd80      	pop	{r7, pc}

0000cd64 <system_interrupt_enable>:
{
    cd64:	b580      	push	{r7, lr}
    cd66:	b082      	sub	sp, #8
    cd68:	af00      	add	r7, sp, #0
    cd6a:	0002      	movs	r2, r0
    cd6c:	1dfb      	adds	r3, r7, #7
    cd6e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cd70:	4b06      	ldr	r3, [pc, #24]	; (cd8c <system_interrupt_enable+0x28>)
    cd72:	1dfa      	adds	r2, r7, #7
    cd74:	7812      	ldrb	r2, [r2, #0]
    cd76:	0011      	movs	r1, r2
    cd78:	221f      	movs	r2, #31
    cd7a:	400a      	ands	r2, r1
    cd7c:	2101      	movs	r1, #1
    cd7e:	4091      	lsls	r1, r2
    cd80:	000a      	movs	r2, r1
    cd82:	601a      	str	r2, [r3, #0]
}
    cd84:	46c0      	nop			; (mov r8, r8)
    cd86:	46bd      	mov	sp, r7
    cd88:	b002      	add	sp, #8
    cd8a:	bd80      	pop	{r7, pc}
    cd8c:	e000e100 	.word	0xe000e100

0000cd90 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    cd90:	b590      	push	{r4, r7, lr}
    cd92:	b083      	sub	sp, #12
    cd94:	af00      	add	r7, sp, #0
    cd96:	4c44      	ldr	r4, [pc, #272]	; (cea8 <_usb_host_interrupt_handler+0x118>)
    cd98:	447c      	add	r4, pc
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    cd9a:	4b44      	ldr	r3, [pc, #272]	; (ceac <_usb_host_interrupt_handler+0x11c>)
    cd9c:	447b      	add	r3, pc
    cd9e:	681b      	ldr	r3, [r3, #0]
    cda0:	681b      	ldr	r3, [r3, #0]
    cda2:	8c1b      	ldrh	r3, [r3, #32]
    cda4:	b29b      	uxth	r3, r3
    cda6:	2b00      	cmp	r3, #0
    cda8:	d00c      	beq.n	cdc4 <_usb_host_interrupt_handler+0x34>
    cdaa:	4b41      	ldr	r3, [pc, #260]	; (ceb0 <_usb_host_interrupt_handler+0x120>)
    cdac:	447b      	add	r3, pc
    cdae:	681b      	ldr	r3, [r3, #0]
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	8c1b      	ldrh	r3, [r3, #32]
    cdb4:	b29b      	uxth	r3, r3
    cdb6:	001a      	movs	r2, r3
    cdb8:	4b3e      	ldr	r3, [pc, #248]	; (ceb4 <_usb_host_interrupt_handler+0x124>)
    cdba:	58e3      	ldr	r3, [r4, r3]
    cdbc:	0010      	movs	r0, r2
    cdbe:	4798      	blx	r3
    cdc0:	0003      	movs	r3, r0
    cdc2:	e000      	b.n	cdc6 <_usb_host_interrupt_handler+0x36>
    cdc4:	2320      	movs	r3, #32
    cdc6:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	2b1f      	cmp	r3, #31
    cdcc:	d900      	bls.n	cdd0 <_usb_host_interrupt_handler+0x40>
    cdce:	e1f5      	b.n	d1bc <_usb_host_interrupt_handler+0x42c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    cdd0:	4b39      	ldr	r3, [pc, #228]	; (ceb8 <_usb_host_interrupt_handler+0x128>)
    cdd2:	447b      	add	r3, pc
    cdd4:	681b      	ldr	r3, [r3, #0]
    cdd6:	681a      	ldr	r2, [r3, #0]
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	3308      	adds	r3, #8
    cddc:	015b      	lsls	r3, r3, #5
    cdde:	18d3      	adds	r3, r2, r3
    cde0:	3307      	adds	r3, #7
    cde2:	781b      	ldrb	r3, [r3, #0]
    cde4:	b2db      	uxtb	r3, r3
    cde6:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    cde8:	683b      	ldr	r3, [r7, #0]
    cdea:	2203      	movs	r2, #3
    cdec:	4013      	ands	r3, r2
    cdee:	d100      	bne.n	cdf2 <_usb_host_interrupt_handler+0x62>
    cdf0:	e0b9      	b.n	cf66 <_usb_host_interrupt_handler+0x1d6>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cdf2:	2201      	movs	r2, #1
    cdf4:	687b      	ldr	r3, [r7, #4]
    cdf6:	409a      	lsls	r2, r3
    cdf8:	0013      	movs	r3, r2
    cdfa:	43db      	mvns	r3, r3
    cdfc:	001a      	movs	r2, r3
    cdfe:	4b2f      	ldr	r3, [pc, #188]	; (cebc <_usb_host_interrupt_handler+0x12c>)
    ce00:	58e3      	ldr	r3, [r4, r3]
    ce02:	681b      	ldr	r3, [r3, #0]
    ce04:	401a      	ands	r2, r3
    ce06:	4b2d      	ldr	r3, [pc, #180]	; (cebc <_usb_host_interrupt_handler+0x12c>)
    ce08:	58e3      	ldr	r3, [r4, r3]
    ce0a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    ce0c:	4b2c      	ldr	r3, [pc, #176]	; (cec0 <_usb_host_interrupt_handler+0x130>)
    ce0e:	447b      	add	r3, pc
    ce10:	681b      	ldr	r3, [r3, #0]
    ce12:	681a      	ldr	r2, [r3, #0]
    ce14:	687b      	ldr	r3, [r7, #4]
    ce16:	3308      	adds	r3, #8
    ce18:	015b      	lsls	r3, r3, #5
    ce1a:	18d3      	adds	r3, r2, r3
    ce1c:	3307      	adds	r3, #7
    ce1e:	2203      	movs	r2, #3
    ce20:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    ce22:	4b28      	ldr	r3, [pc, #160]	; (cec4 <_usb_host_interrupt_handler+0x134>)
    ce24:	447b      	add	r3, pc
    ce26:	681a      	ldr	r2, [r3, #0]
    ce28:	21ae      	movs	r1, #174	; 0xae
    ce2a:	687b      	ldr	r3, [r7, #4]
    ce2c:	18d3      	adds	r3, r2, r3
    ce2e:	185b      	adds	r3, r3, r1
    ce30:	781b      	ldrb	r3, [r3, #0]
    ce32:	001a      	movs	r2, r3
    ce34:	2301      	movs	r3, #1
    ce36:	4013      	ands	r3, r2
    ce38:	d100      	bne.n	ce3c <_usb_host_interrupt_handler+0xac>
    ce3a:	e094      	b.n	cf66 <_usb_host_interrupt_handler+0x1d6>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    ce3c:	687b      	ldr	r3, [r7, #4]
    ce3e:	b2da      	uxtb	r2, r3
    ce40:	4b21      	ldr	r3, [pc, #132]	; (cec8 <_usb_host_interrupt_handler+0x138>)
    ce42:	447b      	add	r3, pc
    ce44:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    ce46:	4b21      	ldr	r3, [pc, #132]	; (cecc <_usb_host_interrupt_handler+0x13c>)
    ce48:	447b      	add	r3, pc
    ce4a:	681b      	ldr	r3, [r3, #0]
    ce4c:	681b      	ldr	r3, [r3, #0]
    ce4e:	687a      	ldr	r2, [r7, #4]
    ce50:	3208      	adds	r2, #8
    ce52:	0152      	lsls	r2, r2, #5
    ce54:	5cd3      	ldrb	r3, [r2, r3]
    ce56:	079b      	lsls	r3, r3, #30
    ce58:	0f9b      	lsrs	r3, r3, #30
    ce5a:	b2db      	uxtb	r3, r3
    ce5c:	2b01      	cmp	r3, #1
    ce5e:	d13d      	bne.n	cedc <_usb_host_interrupt_handler+0x14c>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    ce60:	4b1b      	ldr	r3, [pc, #108]	; (ced0 <_usb_host_interrupt_handler+0x140>)
    ce62:	58e2      	ldr	r2, [r4, r3]
    ce64:	687b      	ldr	r3, [r7, #4]
    ce66:	015b      	lsls	r3, r3, #5
    ce68:	18d3      	adds	r3, r2, r3
    ce6a:	685b      	ldr	r3, [r3, #4]
    ce6c:	049b      	lsls	r3, r3, #18
    ce6e:	0c9b      	lsrs	r3, r3, #18
    ce70:	b29b      	uxth	r3, r3
    ce72:	001a      	movs	r2, r3
    ce74:	4b17      	ldr	r3, [pc, #92]	; (ced4 <_usb_host_interrupt_handler+0x144>)
    ce76:	447b      	add	r3, pc
    ce78:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    ce7a:	4b15      	ldr	r3, [pc, #84]	; (ced0 <_usb_host_interrupt_handler+0x140>)
    ce7c:	58e2      	ldr	r2, [r4, r3]
    ce7e:	687b      	ldr	r3, [r7, #4]
    ce80:	015b      	lsls	r3, r3, #5
    ce82:	18d3      	adds	r3, r2, r3
    ce84:	685b      	ldr	r3, [r3, #4]
    ce86:	011b      	lsls	r3, r3, #4
    ce88:	0c9b      	lsrs	r3, r3, #18
    ce8a:	b29b      	uxth	r3, r3
    ce8c:	001a      	movs	r2, r3
    ce8e:	4b12      	ldr	r3, [pc, #72]	; (ced8 <_usb_host_interrupt_handler+0x148>)
    ce90:	447b      	add	r3, pc
    ce92:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    ce94:	4b0e      	ldr	r3, [pc, #56]	; (ced0 <_usb_host_interrupt_handler+0x140>)
    ce96:	58e2      	ldr	r2, [r4, r3]
    ce98:	687b      	ldr	r3, [r7, #4]
    ce9a:	015b      	lsls	r3, r3, #5
    ce9c:	18d3      	adds	r3, r2, r3
    ce9e:	685a      	ldr	r2, [r3, #4]
    cea0:	0b92      	lsrs	r2, r2, #14
    cea2:	0392      	lsls	r2, r2, #14
    cea4:	605a      	str	r2, [r3, #4]
    cea6:	e04e      	b.n	cf46 <_usb_host_interrupt_handler+0x1b6>
    cea8:	000050c8 	.word	0x000050c8
    ceac:	1fff3884 	.word	0x1fff3884
    ceb0:	1fff3874 	.word	0x1fff3874
    ceb4:	00000278 	.word	0x00000278
    ceb8:	1fff384e 	.word	0x1fff384e
    cebc:	000000ac 	.word	0x000000ac
    cec0:	1fff3812 	.word	0x1fff3812
    cec4:	1fff37fc 	.word	0x1fff37fc
    cec8:	1fff37e2 	.word	0x1fff37e2
    cecc:	1fff37d8 	.word	0x1fff37d8
    ced0:	00000020 	.word	0x00000020
    ced4:	1fff37ae 	.word	0x1fff37ae
    ced8:	1fff3794 	.word	0x1fff3794
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    cedc:	4b99      	ldr	r3, [pc, #612]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    cede:	58e2      	ldr	r2, [r4, r3]
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	015b      	lsls	r3, r3, #5
    cee4:	18d3      	adds	r3, r2, r3
    cee6:	685b      	ldr	r3, [r3, #4]
    cee8:	011b      	lsls	r3, r3, #4
    ceea:	0c9b      	lsrs	r3, r3, #18
    ceec:	b29b      	uxth	r3, r3
    ceee:	001a      	movs	r2, r3
    cef0:	4b95      	ldr	r3, [pc, #596]	; (d148 <_usb_host_interrupt_handler+0x3b8>)
    cef2:	447b      	add	r3, pc
    cef4:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    cef6:	4b93      	ldr	r3, [pc, #588]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    cef8:	58e2      	ldr	r2, [r4, r3]
    cefa:	687b      	ldr	r3, [r7, #4]
    cefc:	015b      	lsls	r3, r3, #5
    cefe:	18d3      	adds	r3, r2, r3
    cf00:	685b      	ldr	r3, [r3, #4]
    cf02:	049b      	lsls	r3, r3, #18
    cf04:	0c9b      	lsrs	r3, r3, #18
    cf06:	b29b      	uxth	r3, r3
    cf08:	001a      	movs	r2, r3
    cf0a:	4b90      	ldr	r3, [pc, #576]	; (d14c <_usb_host_interrupt_handler+0x3bc>)
    cf0c:	447b      	add	r3, pc
    cf0e:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    cf10:	4b8c      	ldr	r3, [pc, #560]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    cf12:	58e2      	ldr	r2, [r4, r3]
    cf14:	687b      	ldr	r3, [r7, #4]
    cf16:	015b      	lsls	r3, r3, #5
    cf18:	18d3      	adds	r3, r2, r3
    cf1a:	685a      	ldr	r2, [r3, #4]
    cf1c:	498c      	ldr	r1, [pc, #560]	; (d150 <_usb_host_interrupt_handler+0x3c0>)
    cf1e:	400a      	ands	r2, r1
    cf20:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    cf22:	4b8c      	ldr	r3, [pc, #560]	; (d154 <_usb_host_interrupt_handler+0x3c4>)
    cf24:	447b      	add	r3, pc
    cf26:	885b      	ldrh	r3, [r3, #2]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d10c      	bne.n	cf46 <_usb_host_interrupt_handler+0x1b6>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    cf2c:	4b85      	ldr	r3, [pc, #532]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    cf2e:	58e2      	ldr	r2, [r4, r3]
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	015b      	lsls	r3, r3, #5
    cf34:	18d3      	adds	r3, r2, r3
    cf36:	685b      	ldr	r3, [r3, #4]
    cf38:	049b      	lsls	r3, r3, #18
    cf3a:	0c9b      	lsrs	r3, r3, #18
    cf3c:	b29b      	uxth	r3, r3
    cf3e:	001a      	movs	r2, r3
    cf40:	4b85      	ldr	r3, [pc, #532]	; (d158 <_usb_host_interrupt_handler+0x3c8>)
    cf42:	447b      	add	r3, pc
    cf44:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    cf46:	4b85      	ldr	r3, [pc, #532]	; (d15c <_usb_host_interrupt_handler+0x3cc>)
    cf48:	447b      	add	r3, pc
    cf4a:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    cf4c:	687b      	ldr	r3, [r7, #4]
    cf4e:	3302      	adds	r3, #2
    cf50:	011b      	lsls	r3, r3, #4
    cf52:	18d3      	adds	r3, r2, r3
    cf54:	3304      	adds	r3, #4
    cf56:	681a      	ldr	r2, [r3, #0]
    cf58:	4b81      	ldr	r3, [pc, #516]	; (d160 <_usb_host_interrupt_handler+0x3d0>)
    cf5a:	447b      	add	r3, pc
    cf5c:	681b      	ldr	r3, [r3, #0]
    cf5e:	4981      	ldr	r1, [pc, #516]	; (d164 <_usb_host_interrupt_handler+0x3d4>)
    cf60:	4479      	add	r1, pc
    cf62:	0018      	movs	r0, r3
    cf64:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    cf66:	683b      	ldr	r3, [r7, #0]
    cf68:	2204      	movs	r2, #4
    cf6a:	4013      	ands	r3, r2
    cf6c:	d017      	beq.n	cf9e <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cf6e:	2201      	movs	r2, #1
    cf70:	687b      	ldr	r3, [r7, #4]
    cf72:	409a      	lsls	r2, r3
    cf74:	0013      	movs	r3, r2
    cf76:	43db      	mvns	r3, r3
    cf78:	001a      	movs	r2, r3
    cf7a:	4b7b      	ldr	r3, [pc, #492]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    cf7c:	58e3      	ldr	r3, [r4, r3]
    cf7e:	681b      	ldr	r3, [r3, #0]
    cf80:	401a      	ands	r2, r3
    cf82:	4b79      	ldr	r3, [pc, #484]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    cf84:	58e3      	ldr	r3, [r4, r3]
    cf86:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cf88:	4b78      	ldr	r3, [pc, #480]	; (d16c <_usb_host_interrupt_handler+0x3dc>)
    cf8a:	447b      	add	r3, pc
    cf8c:	681b      	ldr	r3, [r3, #0]
    cf8e:	681a      	ldr	r2, [r3, #0]
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	3308      	adds	r3, #8
    cf94:	015b      	lsls	r3, r3, #5
    cf96:	18d3      	adds	r3, r2, r3
    cf98:	3307      	adds	r3, #7
    cf9a:	2204      	movs	r2, #4
    cf9c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    cf9e:	683b      	ldr	r3, [r7, #0]
    cfa0:	2208      	movs	r2, #8
    cfa2:	4013      	ands	r3, r2
    cfa4:	d046      	beq.n	d034 <_usb_host_interrupt_handler+0x2a4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cfa6:	2201      	movs	r2, #1
    cfa8:	687b      	ldr	r3, [r7, #4]
    cfaa:	409a      	lsls	r2, r3
    cfac:	0013      	movs	r3, r2
    cfae:	43db      	mvns	r3, r3
    cfb0:	001a      	movs	r2, r3
    cfb2:	4b6d      	ldr	r3, [pc, #436]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    cfb4:	58e3      	ldr	r3, [r4, r3]
    cfb6:	681b      	ldr	r3, [r3, #0]
    cfb8:	401a      	ands	r2, r3
    cfba:	4b6b      	ldr	r3, [pc, #428]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    cfbc:	58e3      	ldr	r3, [r4, r3]
    cfbe:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cfc0:	4b6b      	ldr	r3, [pc, #428]	; (d170 <_usb_host_interrupt_handler+0x3e0>)
    cfc2:	447b      	add	r3, pc
    cfc4:	681b      	ldr	r3, [r3, #0]
    cfc6:	681a      	ldr	r2, [r3, #0]
    cfc8:	687b      	ldr	r3, [r7, #4]
    cfca:	3308      	adds	r3, #8
    cfcc:	015b      	lsls	r3, r3, #5
    cfce:	18d3      	adds	r3, r2, r3
    cfd0:	3307      	adds	r3, #7
    cfd2:	2208      	movs	r2, #8
    cfd4:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    cfd6:	4b67      	ldr	r3, [pc, #412]	; (d174 <_usb_host_interrupt_handler+0x3e4>)
    cfd8:	447b      	add	r3, pc
    cfda:	681a      	ldr	r2, [r3, #0]
    cfdc:	21ae      	movs	r1, #174	; 0xae
    cfde:	687b      	ldr	r3, [r7, #4]
    cfe0:	18d3      	adds	r3, r2, r3
    cfe2:	185b      	adds	r3, r3, r1
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	001a      	movs	r2, r3
    cfe8:	2302      	movs	r3, #2
    cfea:	4013      	ands	r3, r2
    cfec:	d022      	beq.n	d034 <_usb_host_interrupt_handler+0x2a4>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    cfee:	687b      	ldr	r3, [r7, #4]
    cff0:	b2da      	uxtb	r2, r3
    cff2:	4b61      	ldr	r3, [pc, #388]	; (d178 <_usb_host_interrupt_handler+0x3e8>)
    cff4:	447b      	add	r3, pc
    cff6:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    cff8:	4b52      	ldr	r3, [pc, #328]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    cffa:	58e2      	ldr	r2, [r4, r3]
    cffc:	687b      	ldr	r3, [r7, #4]
    cffe:	015b      	lsls	r3, r3, #5
    d000:	18d3      	adds	r3, r2, r3
    d002:	330e      	adds	r3, #14
    d004:	881b      	ldrh	r3, [r3, #0]
    d006:	b29b      	uxth	r3, r3
    d008:	b2db      	uxtb	r3, r3
    d00a:	221f      	movs	r2, #31
    d00c:	4013      	ands	r3, r2
    d00e:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    d010:	4b5a      	ldr	r3, [pc, #360]	; (d17c <_usb_host_interrupt_handler+0x3ec>)
    d012:	447b      	add	r3, pc
    d014:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    d016:	4b5a      	ldr	r3, [pc, #360]	; (d180 <_usb_host_interrupt_handler+0x3f0>)
    d018:	447b      	add	r3, pc
    d01a:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    d01c:	687b      	ldr	r3, [r7, #4]
    d01e:	011b      	lsls	r3, r3, #4
    d020:	18d3      	adds	r3, r2, r3
    d022:	3328      	adds	r3, #40	; 0x28
    d024:	681a      	ldr	r2, [r3, #0]
    d026:	4b57      	ldr	r3, [pc, #348]	; (d184 <_usb_host_interrupt_handler+0x3f4>)
    d028:	447b      	add	r3, pc
    d02a:	681b      	ldr	r3, [r3, #0]
    d02c:	4956      	ldr	r1, [pc, #344]	; (d188 <_usb_host_interrupt_handler+0x3f8>)
    d02e:	4479      	add	r1, pc
    d030:	0018      	movs	r0, r3
    d032:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    d034:	683b      	ldr	r3, [r7, #0]
    d036:	2210      	movs	r2, #16
    d038:	4013      	ands	r3, r2
    d03a:	d043      	beq.n	d0c4 <_usb_host_interrupt_handler+0x334>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    d03c:	2201      	movs	r2, #1
    d03e:	687b      	ldr	r3, [r7, #4]
    d040:	409a      	lsls	r2, r3
    d042:	0013      	movs	r3, r2
    d044:	43db      	mvns	r3, r3
    d046:	001a      	movs	r2, r3
    d048:	4b47      	ldr	r3, [pc, #284]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    d04a:	58e3      	ldr	r3, [r4, r3]
    d04c:	681b      	ldr	r3, [r3, #0]
    d04e:	401a      	ands	r2, r3
    d050:	4b45      	ldr	r3, [pc, #276]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    d052:	58e3      	ldr	r3, [r4, r3]
    d054:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    d056:	4b4d      	ldr	r3, [pc, #308]	; (d18c <_usb_host_interrupt_handler+0x3fc>)
    d058:	447b      	add	r3, pc
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	681a      	ldr	r2, [r3, #0]
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	3308      	adds	r3, #8
    d062:	015b      	lsls	r3, r3, #5
    d064:	18d3      	adds	r3, r2, r3
    d066:	3307      	adds	r3, #7
    d068:	2210      	movs	r2, #16
    d06a:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    d06c:	4b48      	ldr	r3, [pc, #288]	; (d190 <_usb_host_interrupt_handler+0x400>)
    d06e:	447b      	add	r3, pc
    d070:	681a      	ldr	r2, [r3, #0]
    d072:	21ae      	movs	r1, #174	; 0xae
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	18d3      	adds	r3, r2, r3
    d078:	185b      	adds	r3, r3, r1
    d07a:	781b      	ldrb	r3, [r3, #0]
    d07c:	001a      	movs	r2, r3
    d07e:	2304      	movs	r3, #4
    d080:	4013      	ands	r3, r2
    d082:	d01f      	beq.n	d0c4 <_usb_host_interrupt_handler+0x334>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    d084:	687b      	ldr	r3, [r7, #4]
    d086:	b2da      	uxtb	r2, r3
    d088:	4b42      	ldr	r3, [pc, #264]	; (d194 <_usb_host_interrupt_handler+0x404>)
    d08a:	447b      	add	r3, pc
    d08c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    d08e:	4b2d      	ldr	r3, [pc, #180]	; (d144 <_usb_host_interrupt_handler+0x3b4>)
    d090:	58e2      	ldr	r2, [r4, r3]
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	015b      	lsls	r3, r3, #5
    d096:	18d3      	adds	r3, r2, r3
    d098:	685b      	ldr	r3, [r3, #4]
    d09a:	011b      	lsls	r3, r3, #4
    d09c:	0c9b      	lsrs	r3, r3, #18
    d09e:	b29b      	uxth	r3, r3
    d0a0:	001a      	movs	r2, r3
    d0a2:	4b3d      	ldr	r3, [pc, #244]	; (d198 <_usb_host_interrupt_handler+0x408>)
    d0a4:	447b      	add	r3, pc
    d0a6:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    d0a8:	4b3c      	ldr	r3, [pc, #240]	; (d19c <_usb_host_interrupt_handler+0x40c>)
    d0aa:	447b      	add	r3, pc
    d0ac:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    d0ae:	687b      	ldr	r3, [r7, #4]
    d0b0:	011b      	lsls	r3, r3, #4
    d0b2:	18d3      	adds	r3, r2, r3
    d0b4:	332c      	adds	r3, #44	; 0x2c
    d0b6:	681a      	ldr	r2, [r3, #0]
    d0b8:	4b39      	ldr	r3, [pc, #228]	; (d1a0 <_usb_host_interrupt_handler+0x410>)
    d0ba:	447b      	add	r3, pc
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	2100      	movs	r1, #0
    d0c0:	0018      	movs	r0, r3
    d0c2:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    d0c4:	683b      	ldr	r3, [r7, #0]
    d0c6:	2220      	movs	r2, #32
    d0c8:	4013      	ands	r3, r2
    d0ca:	d100      	bne.n	d0ce <_usb_host_interrupt_handler+0x33e>
    d0cc:	e170      	b.n	d3b0 <_usb_host_interrupt_handler+0x620>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    d0ce:	2201      	movs	r2, #1
    d0d0:	687b      	ldr	r3, [r7, #4]
    d0d2:	409a      	lsls	r2, r3
    d0d4:	0013      	movs	r3, r2
    d0d6:	43db      	mvns	r3, r3
    d0d8:	001a      	movs	r2, r3
    d0da:	4b23      	ldr	r3, [pc, #140]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    d0dc:	58e3      	ldr	r3, [r4, r3]
    d0de:	681b      	ldr	r3, [r3, #0]
    d0e0:	401a      	ands	r2, r3
    d0e2:	4b21      	ldr	r3, [pc, #132]	; (d168 <_usb_host_interrupt_handler+0x3d8>)
    d0e4:	58e3      	ldr	r3, [r4, r3]
    d0e6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    d0e8:	4b2e      	ldr	r3, [pc, #184]	; (d1a4 <_usb_host_interrupt_handler+0x414>)
    d0ea:	447b      	add	r3, pc
    d0ec:	681b      	ldr	r3, [r3, #0]
    d0ee:	681a      	ldr	r2, [r3, #0]
    d0f0:	687b      	ldr	r3, [r7, #4]
    d0f2:	3308      	adds	r3, #8
    d0f4:	015b      	lsls	r3, r3, #5
    d0f6:	18d3      	adds	r3, r2, r3
    d0f8:	3307      	adds	r3, #7
    d0fa:	2220      	movs	r2, #32
    d0fc:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    d0fe:	4b2a      	ldr	r3, [pc, #168]	; (d1a8 <_usb_host_interrupt_handler+0x418>)
    d100:	447b      	add	r3, pc
    d102:	681a      	ldr	r2, [r3, #0]
    d104:	21ae      	movs	r1, #174	; 0xae
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	18d3      	adds	r3, r2, r3
    d10a:	185b      	adds	r3, r3, r1
    d10c:	781b      	ldrb	r3, [r3, #0]
    d10e:	001a      	movs	r2, r3
    d110:	2308      	movs	r3, #8
    d112:	4013      	ands	r3, r2
    d114:	d100      	bne.n	d118 <_usb_host_interrupt_handler+0x388>
    d116:	e14b      	b.n	d3b0 <_usb_host_interrupt_handler+0x620>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    d118:	687b      	ldr	r3, [r7, #4]
    d11a:	b2da      	uxtb	r2, r3
    d11c:	4b23      	ldr	r3, [pc, #140]	; (d1ac <_usb_host_interrupt_handler+0x41c>)
    d11e:	447b      	add	r3, pc
    d120:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    d122:	4b23      	ldr	r3, [pc, #140]	; (d1b0 <_usb_host_interrupt_handler+0x420>)
    d124:	447b      	add	r3, pc
    d126:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	011b      	lsls	r3, r3, #4
    d12c:	18d3      	adds	r3, r2, r3
    d12e:	3330      	adds	r3, #48	; 0x30
    d130:	681a      	ldr	r2, [r3, #0]
    d132:	4b20      	ldr	r3, [pc, #128]	; (d1b4 <_usb_host_interrupt_handler+0x424>)
    d134:	447b      	add	r3, pc
    d136:	681b      	ldr	r3, [r3, #0]
    d138:	491f      	ldr	r1, [pc, #124]	; (d1b8 <_usb_host_interrupt_handler+0x428>)
    d13a:	4479      	add	r1, pc
    d13c:	0018      	movs	r0, r3
    d13e:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    d140:	e136      	b.n	d3b0 <_usb_host_interrupt_handler+0x620>
    d142:	46c0      	nop			; (mov r8, r8)
    d144:	00000020 	.word	0x00000020
    d148:	1fff3732 	.word	0x1fff3732
    d14c:	1fff3718 	.word	0x1fff3718
    d150:	f0003fff 	.word	0xf0003fff
    d154:	1fff3700 	.word	0x1fff3700
    d158:	1fff36e2 	.word	0x1fff36e2
    d15c:	1fff36d8 	.word	0x1fff36d8
    d160:	1fff36c6 	.word	0x1fff36c6
    d164:	1fff36c4 	.word	0x1fff36c4
    d168:	000000ac 	.word	0x000000ac
    d16c:	1fff3696 	.word	0x1fff3696
    d170:	1fff365e 	.word	0x1fff365e
    d174:	1fff3648 	.word	0x1fff3648
    d178:	1fff3630 	.word	0x1fff3630
    d17c:	1fff3612 	.word	0x1fff3612
    d180:	1fff3608 	.word	0x1fff3608
    d184:	1fff35f8 	.word	0x1fff35f8
    d188:	1fff35f6 	.word	0x1fff35f6
    d18c:	1fff35c8 	.word	0x1fff35c8
    d190:	1fff35b2 	.word	0x1fff35b2
    d194:	1fff359a 	.word	0x1fff359a
    d198:	1fff3580 	.word	0x1fff3580
    d19c:	1fff3576 	.word	0x1fff3576
    d1a0:	1fff3566 	.word	0x1fff3566
    d1a4:	1fff3536 	.word	0x1fff3536
    d1a8:	1fff3520 	.word	0x1fff3520
    d1ac:	1fff3506 	.word	0x1fff3506
    d1b0:	1fff34fc 	.word	0x1fff34fc
    d1b4:	1fff34ec 	.word	0x1fff34ec
    d1b8:	1fff34ea 	.word	0x1fff34ea
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    d1bc:	4b7e      	ldr	r3, [pc, #504]	; (d3b8 <_usb_host_interrupt_handler+0x628>)
    d1be:	447b      	add	r3, pc
    d1c0:	681b      	ldr	r3, [r3, #0]
    d1c2:	681b      	ldr	r3, [r3, #0]
    d1c4:	8b9b      	ldrh	r3, [r3, #28]
    d1c6:	b29b      	uxth	r3, r3
    d1c8:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    d1ca:	683b      	ldr	r3, [r7, #0]
    d1cc:	2204      	movs	r2, #4
    d1ce:	4013      	ands	r3, r2
    d1d0:	d017      	beq.n	d202 <_usb_host_interrupt_handler+0x472>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    d1d2:	4b7a      	ldr	r3, [pc, #488]	; (d3bc <_usb_host_interrupt_handler+0x62c>)
    d1d4:	447b      	add	r3, pc
    d1d6:	681b      	ldr	r3, [r3, #0]
    d1d8:	681b      	ldr	r3, [r3, #0]
    d1da:	2204      	movs	r2, #4
    d1dc:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    d1de:	4b78      	ldr	r3, [pc, #480]	; (d3c0 <_usb_host_interrupt_handler+0x630>)
    d1e0:	447b      	add	r3, pc
    d1e2:	681b      	ldr	r3, [r3, #0]
    d1e4:	22a5      	movs	r2, #165	; 0xa5
    d1e6:	5c9b      	ldrb	r3, [r3, r2]
    d1e8:	001a      	movs	r2, r3
    d1ea:	2301      	movs	r3, #1
    d1ec:	4013      	ands	r3, r2
    d1ee:	d008      	beq.n	d202 <_usb_host_interrupt_handler+0x472>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    d1f0:	4b74      	ldr	r3, [pc, #464]	; (d3c4 <_usb_host_interrupt_handler+0x634>)
    d1f2:	447b      	add	r3, pc
    d1f4:	681b      	ldr	r3, [r3, #0]
    d1f6:	685a      	ldr	r2, [r3, #4]
    d1f8:	4b73      	ldr	r3, [pc, #460]	; (d3c8 <_usb_host_interrupt_handler+0x638>)
    d1fa:	447b      	add	r3, pc
    d1fc:	681b      	ldr	r3, [r3, #0]
    d1fe:	0018      	movs	r0, r3
    d200:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    d202:	683b      	ldr	r3, [r7, #0]
    d204:	2208      	movs	r2, #8
    d206:	4013      	ands	r3, r2
    d208:	d01b      	beq.n	d242 <_usb_host_interrupt_handler+0x4b2>
			host_pipe_job_busy_status = 0;
    d20a:	4b70      	ldr	r3, [pc, #448]	; (d3cc <_usb_host_interrupt_handler+0x63c>)
    d20c:	58e3      	ldr	r3, [r4, r3]
    d20e:	2200      	movs	r2, #0
    d210:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    d212:	4b6f      	ldr	r3, [pc, #444]	; (d3d0 <_usb_host_interrupt_handler+0x640>)
    d214:	447b      	add	r3, pc
    d216:	681b      	ldr	r3, [r3, #0]
    d218:	681b      	ldr	r3, [r3, #0]
    d21a:	2208      	movs	r2, #8
    d21c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    d21e:	4b6d      	ldr	r3, [pc, #436]	; (d3d4 <_usb_host_interrupt_handler+0x644>)
    d220:	447b      	add	r3, pc
    d222:	681b      	ldr	r3, [r3, #0]
    d224:	22a5      	movs	r2, #165	; 0xa5
    d226:	5c9b      	ldrb	r3, [r3, r2]
    d228:	001a      	movs	r2, r3
    d22a:	2302      	movs	r3, #2
    d22c:	4013      	ands	r3, r2
    d22e:	d008      	beq.n	d242 <_usb_host_interrupt_handler+0x4b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    d230:	4b69      	ldr	r3, [pc, #420]	; (d3d8 <_usb_host_interrupt_handler+0x648>)
    d232:	447b      	add	r3, pc
    d234:	681b      	ldr	r3, [r3, #0]
    d236:	689a      	ldr	r2, [r3, #8]
    d238:	4b68      	ldr	r3, [pc, #416]	; (d3dc <_usb_host_interrupt_handler+0x64c>)
    d23a:	447b      	add	r3, pc
    d23c:	681b      	ldr	r3, [r3, #0]
    d23e:	0018      	movs	r0, r3
    d240:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    d242:	683b      	ldr	r3, [r7, #0]
    d244:	2240      	movs	r2, #64	; 0x40
    d246:	4013      	ands	r3, r2
    d248:	d017      	beq.n	d27a <_usb_host_interrupt_handler+0x4ea>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    d24a:	4b65      	ldr	r3, [pc, #404]	; (d3e0 <_usb_host_interrupt_handler+0x650>)
    d24c:	447b      	add	r3, pc
    d24e:	681b      	ldr	r3, [r3, #0]
    d250:	681b      	ldr	r3, [r3, #0]
    d252:	2240      	movs	r2, #64	; 0x40
    d254:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    d256:	4b63      	ldr	r3, [pc, #396]	; (d3e4 <_usb_host_interrupt_handler+0x654>)
    d258:	447b      	add	r3, pc
    d25a:	681b      	ldr	r3, [r3, #0]
    d25c:	22a5      	movs	r2, #165	; 0xa5
    d25e:	5c9b      	ldrb	r3, [r3, r2]
    d260:	001a      	movs	r2, r3
    d262:	2310      	movs	r3, #16
    d264:	4013      	ands	r3, r2
    d266:	d008      	beq.n	d27a <_usb_host_interrupt_handler+0x4ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    d268:	4b5f      	ldr	r3, [pc, #380]	; (d3e8 <_usb_host_interrupt_handler+0x658>)
    d26a:	447b      	add	r3, pc
    d26c:	681b      	ldr	r3, [r3, #0]
    d26e:	695a      	ldr	r2, [r3, #20]
    d270:	4b5e      	ldr	r3, [pc, #376]	; (d3ec <_usb_host_interrupt_handler+0x65c>)
    d272:	447b      	add	r3, pc
    d274:	681b      	ldr	r3, [r3, #0]
    d276:	0018      	movs	r0, r3
    d278:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    d27a:	683b      	ldr	r3, [r7, #0]
    d27c:	2220      	movs	r2, #32
    d27e:	4013      	ands	r3, r2
    d280:	d017      	beq.n	d2b2 <_usb_host_interrupt_handler+0x522>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    d282:	4b5b      	ldr	r3, [pc, #364]	; (d3f0 <_usb_host_interrupt_handler+0x660>)
    d284:	447b      	add	r3, pc
    d286:	681b      	ldr	r3, [r3, #0]
    d288:	681b      	ldr	r3, [r3, #0]
    d28a:	2220      	movs	r2, #32
    d28c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    d28e:	4b59      	ldr	r3, [pc, #356]	; (d3f4 <_usb_host_interrupt_handler+0x664>)
    d290:	447b      	add	r3, pc
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	22a5      	movs	r2, #165	; 0xa5
    d296:	5c9b      	ldrb	r3, [r3, r2]
    d298:	001a      	movs	r2, r3
    d29a:	2308      	movs	r3, #8
    d29c:	4013      	ands	r3, r2
    d29e:	d008      	beq.n	d2b2 <_usb_host_interrupt_handler+0x522>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    d2a0:	4b55      	ldr	r3, [pc, #340]	; (d3f8 <_usb_host_interrupt_handler+0x668>)
    d2a2:	447b      	add	r3, pc
    d2a4:	681b      	ldr	r3, [r3, #0]
    d2a6:	691a      	ldr	r2, [r3, #16]
    d2a8:	4b54      	ldr	r3, [pc, #336]	; (d3fc <_usb_host_interrupt_handler+0x66c>)
    d2aa:	447b      	add	r3, pc
    d2ac:	681b      	ldr	r3, [r3, #0]
    d2ae:	0018      	movs	r0, r3
    d2b0:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    d2b2:	683b      	ldr	r3, [r7, #0]
    d2b4:	2210      	movs	r2, #16
    d2b6:	4013      	ands	r3, r2
    d2b8:	d017      	beq.n	d2ea <_usb_host_interrupt_handler+0x55a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    d2ba:	4b51      	ldr	r3, [pc, #324]	; (d400 <_usb_host_interrupt_handler+0x670>)
    d2bc:	447b      	add	r3, pc
    d2be:	681b      	ldr	r3, [r3, #0]
    d2c0:	681b      	ldr	r3, [r3, #0]
    d2c2:	2210      	movs	r2, #16
    d2c4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    d2c6:	4b4f      	ldr	r3, [pc, #316]	; (d404 <_usb_host_interrupt_handler+0x674>)
    d2c8:	447b      	add	r3, pc
    d2ca:	681b      	ldr	r3, [r3, #0]
    d2cc:	22a5      	movs	r2, #165	; 0xa5
    d2ce:	5c9b      	ldrb	r3, [r3, r2]
    d2d0:	001a      	movs	r2, r3
    d2d2:	2304      	movs	r3, #4
    d2d4:	4013      	ands	r3, r2
    d2d6:	d008      	beq.n	d2ea <_usb_host_interrupt_handler+0x55a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    d2d8:	4b4b      	ldr	r3, [pc, #300]	; (d408 <_usb_host_interrupt_handler+0x678>)
    d2da:	447b      	add	r3, pc
    d2dc:	681b      	ldr	r3, [r3, #0]
    d2de:	68da      	ldr	r2, [r3, #12]
    d2e0:	4b4a      	ldr	r3, [pc, #296]	; (d40c <_usb_host_interrupt_handler+0x67c>)
    d2e2:	447b      	add	r3, pc
    d2e4:	681b      	ldr	r3, [r3, #0]
    d2e6:	0018      	movs	r0, r3
    d2e8:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    d2ea:	683b      	ldr	r3, [r7, #0]
    d2ec:	2280      	movs	r2, #128	; 0x80
    d2ee:	4013      	ands	r3, r2
    d2f0:	d01b      	beq.n	d32a <_usb_host_interrupt_handler+0x59a>
			host_pipe_job_busy_status = 0;
    d2f2:	4b36      	ldr	r3, [pc, #216]	; (d3cc <_usb_host_interrupt_handler+0x63c>)
    d2f4:	58e3      	ldr	r3, [r4, r3]
    d2f6:	2200      	movs	r2, #0
    d2f8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    d2fa:	4b45      	ldr	r3, [pc, #276]	; (d410 <_usb_host_interrupt_handler+0x680>)
    d2fc:	447b      	add	r3, pc
    d2fe:	681b      	ldr	r3, [r3, #0]
    d300:	681b      	ldr	r3, [r3, #0]
    d302:	2280      	movs	r2, #128	; 0x80
    d304:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    d306:	4b43      	ldr	r3, [pc, #268]	; (d414 <_usb_host_interrupt_handler+0x684>)
    d308:	447b      	add	r3, pc
    d30a:	681b      	ldr	r3, [r3, #0]
    d30c:	22a5      	movs	r2, #165	; 0xa5
    d30e:	5c9b      	ldrb	r3, [r3, r2]
    d310:	001a      	movs	r2, r3
    d312:	2320      	movs	r3, #32
    d314:	4013      	ands	r3, r2
    d316:	d008      	beq.n	d32a <_usb_host_interrupt_handler+0x59a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    d318:	4b3f      	ldr	r3, [pc, #252]	; (d418 <_usb_host_interrupt_handler+0x688>)
    d31a:	447b      	add	r3, pc
    d31c:	681b      	ldr	r3, [r3, #0]
    d31e:	699a      	ldr	r2, [r3, #24]
    d320:	4b3e      	ldr	r3, [pc, #248]	; (d41c <_usb_host_interrupt_handler+0x68c>)
    d322:	447b      	add	r3, pc
    d324:	681b      	ldr	r3, [r3, #0]
    d326:	0018      	movs	r0, r3
    d328:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    d32a:	683a      	ldr	r2, [r7, #0]
    d32c:	2380      	movs	r3, #128	; 0x80
    d32e:	005b      	lsls	r3, r3, #1
    d330:	4013      	ands	r3, r2
    d332:	d01c      	beq.n	d36e <_usb_host_interrupt_handler+0x5de>
			host_pipe_job_busy_status = 0;
    d334:	4b25      	ldr	r3, [pc, #148]	; (d3cc <_usb_host_interrupt_handler+0x63c>)
    d336:	58e3      	ldr	r3, [r4, r3]
    d338:	2200      	movs	r2, #0
    d33a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    d33c:	4b38      	ldr	r3, [pc, #224]	; (d420 <_usb_host_interrupt_handler+0x690>)
    d33e:	447b      	add	r3, pc
    d340:	681b      	ldr	r3, [r3, #0]
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	2280      	movs	r2, #128	; 0x80
    d346:	0052      	lsls	r2, r2, #1
    d348:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    d34a:	4b36      	ldr	r3, [pc, #216]	; (d424 <_usb_host_interrupt_handler+0x694>)
    d34c:	447b      	add	r3, pc
    d34e:	681b      	ldr	r3, [r3, #0]
    d350:	22a5      	movs	r2, #165	; 0xa5
    d352:	5c9b      	ldrb	r3, [r3, r2]
    d354:	001a      	movs	r2, r3
    d356:	2340      	movs	r3, #64	; 0x40
    d358:	4013      	ands	r3, r2
    d35a:	d008      	beq.n	d36e <_usb_host_interrupt_handler+0x5de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    d35c:	4b32      	ldr	r3, [pc, #200]	; (d428 <_usb_host_interrupt_handler+0x698>)
    d35e:	447b      	add	r3, pc
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	69da      	ldr	r2, [r3, #28]
    d364:	4b31      	ldr	r3, [pc, #196]	; (d42c <_usb_host_interrupt_handler+0x69c>)
    d366:	447b      	add	r3, pc
    d368:	681b      	ldr	r3, [r3, #0]
    d36a:	0018      	movs	r0, r3
    d36c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    d36e:	683a      	ldr	r2, [r7, #0]
    d370:	2380      	movs	r3, #128	; 0x80
    d372:	009b      	lsls	r3, r3, #2
    d374:	4013      	ands	r3, r2
    d376:	d01b      	beq.n	d3b0 <_usb_host_interrupt_handler+0x620>
			host_pipe_job_busy_status = 0;
    d378:	4b14      	ldr	r3, [pc, #80]	; (d3cc <_usb_host_interrupt_handler+0x63c>)
    d37a:	58e3      	ldr	r3, [r4, r3]
    d37c:	2200      	movs	r2, #0
    d37e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    d380:	4b2b      	ldr	r3, [pc, #172]	; (d430 <_usb_host_interrupt_handler+0x6a0>)
    d382:	447b      	add	r3, pc
    d384:	681b      	ldr	r3, [r3, #0]
    d386:	681b      	ldr	r3, [r3, #0]
    d388:	2280      	movs	r2, #128	; 0x80
    d38a:	0092      	lsls	r2, r2, #2
    d38c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    d38e:	4b29      	ldr	r3, [pc, #164]	; (d434 <_usb_host_interrupt_handler+0x6a4>)
    d390:	447b      	add	r3, pc
    d392:	681b      	ldr	r3, [r3, #0]
    d394:	22a5      	movs	r2, #165	; 0xa5
    d396:	5c9b      	ldrb	r3, [r3, r2]
    d398:	b25b      	sxtb	r3, r3
    d39a:	2b00      	cmp	r3, #0
    d39c:	da08      	bge.n	d3b0 <_usb_host_interrupt_handler+0x620>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    d39e:	4b26      	ldr	r3, [pc, #152]	; (d438 <_usb_host_interrupt_handler+0x6a8>)
    d3a0:	447b      	add	r3, pc
    d3a2:	681b      	ldr	r3, [r3, #0]
    d3a4:	6a1a      	ldr	r2, [r3, #32]
    d3a6:	4b25      	ldr	r3, [pc, #148]	; (d43c <_usb_host_interrupt_handler+0x6ac>)
    d3a8:	447b      	add	r3, pc
    d3aa:	681b      	ldr	r3, [r3, #0]
    d3ac:	0018      	movs	r0, r3
    d3ae:	4790      	blx	r2
}
    d3b0:	46c0      	nop			; (mov r8, r8)
    d3b2:	46bd      	mov	sp, r7
    d3b4:	b003      	add	sp, #12
    d3b6:	bd90      	pop	{r4, r7, pc}
    d3b8:	1fff3462 	.word	0x1fff3462
    d3bc:	1fff344c 	.word	0x1fff344c
    d3c0:	1fff3440 	.word	0x1fff3440
    d3c4:	1fff342e 	.word	0x1fff342e
    d3c8:	1fff3426 	.word	0x1fff3426
    d3cc:	000000ac 	.word	0x000000ac
    d3d0:	1fff340c 	.word	0x1fff340c
    d3d4:	1fff3400 	.word	0x1fff3400
    d3d8:	1fff33ee 	.word	0x1fff33ee
    d3dc:	1fff33e6 	.word	0x1fff33e6
    d3e0:	1fff33d4 	.word	0x1fff33d4
    d3e4:	1fff33c8 	.word	0x1fff33c8
    d3e8:	1fff33b6 	.word	0x1fff33b6
    d3ec:	1fff33ae 	.word	0x1fff33ae
    d3f0:	1fff339c 	.word	0x1fff339c
    d3f4:	1fff3390 	.word	0x1fff3390
    d3f8:	1fff337e 	.word	0x1fff337e
    d3fc:	1fff3376 	.word	0x1fff3376
    d400:	1fff3364 	.word	0x1fff3364
    d404:	1fff3358 	.word	0x1fff3358
    d408:	1fff3346 	.word	0x1fff3346
    d40c:	1fff333e 	.word	0x1fff333e
    d410:	1fff3324 	.word	0x1fff3324
    d414:	1fff3318 	.word	0x1fff3318
    d418:	1fff3306 	.word	0x1fff3306
    d41c:	1fff32fe 	.word	0x1fff32fe
    d420:	1fff32e2 	.word	0x1fff32e2
    d424:	1fff32d4 	.word	0x1fff32d4
    d428:	1fff32c2 	.word	0x1fff32c2
    d42c:	1fff32ba 	.word	0x1fff32ba
    d430:	1fff329e 	.word	0x1fff329e
    d434:	1fff3290 	.word	0x1fff3290
    d438:	1fff3280 	.word	0x1fff3280
    d43c:	1fff3278 	.word	0x1fff3278

0000d440 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    d440:	b580      	push	{r7, lr}
    d442:	b084      	sub	sp, #16
    d444:	af00      	add	r7, sp, #0
    d446:	60f8      	str	r0, [r7, #12]
    d448:	607a      	str	r2, [r7, #4]
    d44a:	230b      	movs	r3, #11
    d44c:	18fb      	adds	r3, r7, r3
    d44e:	1c0a      	adds	r2, r1, #0
    d450:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    d452:	230b      	movs	r3, #11
    d454:	18fb      	adds	r3, r7, r3
    d456:	781a      	ldrb	r2, [r3, #0]
    d458:	68fb      	ldr	r3, [r7, #12]
    d45a:	322e      	adds	r2, #46	; 0x2e
    d45c:	0092      	lsls	r2, r2, #2
    d45e:	6879      	ldr	r1, [r7, #4]
    d460:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    d462:	68fa      	ldr	r2, [r7, #12]
    d464:	23aa      	movs	r3, #170	; 0xaa
    d466:	005b      	lsls	r3, r3, #1
    d468:	5ad2      	ldrh	r2, [r2, r3]
    d46a:	230b      	movs	r3, #11
    d46c:	18fb      	adds	r3, r7, r3
    d46e:	7819      	ldrb	r1, [r3, #0]
    d470:	4b07      	ldr	r3, [pc, #28]	; (d490 <usb_device_register_callback+0x50>)
    d472:	447b      	add	r3, pc
    d474:	0049      	lsls	r1, r1, #1
    d476:	5acb      	ldrh	r3, [r1, r3]
    d478:	4313      	orrs	r3, r2
    d47a:	b299      	uxth	r1, r3
    d47c:	68fa      	ldr	r2, [r7, #12]
    d47e:	23aa      	movs	r3, #170	; 0xaa
    d480:	005b      	lsls	r3, r3, #1
    d482:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    d484:	2300      	movs	r3, #0
}
    d486:	0018      	movs	r0, r3
    d488:	46bd      	mov	sp, r7
    d48a:	b004      	add	sp, #16
    d48c:	bd80      	pop	{r7, pc}
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	00004922 	.word	0x00004922

0000d494 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    d494:	b580      	push	{r7, lr}
    d496:	b082      	sub	sp, #8
    d498:	af00      	add	r7, sp, #0
    d49a:	6078      	str	r0, [r7, #4]
    d49c:	000a      	movs	r2, r1
    d49e:	1cfb      	adds	r3, r7, #3
    d4a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	681b      	ldr	r3, [r3, #0]
    d4a6:	1cfa      	adds	r2, r7, #3
    d4a8:	7811      	ldrb	r1, [r2, #0]
    d4aa:	4a11      	ldr	r2, [pc, #68]	; (d4f0 <usb_device_enable_callback+0x5c>)
    d4ac:	447a      	add	r2, pc
    d4ae:	0049      	lsls	r1, r1, #1
    d4b0:	5a8a      	ldrh	r2, [r1, r2]
    d4b2:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    d4b4:	687a      	ldr	r2, [r7, #4]
    d4b6:	23ab      	movs	r3, #171	; 0xab
    d4b8:	005b      	lsls	r3, r3, #1
    d4ba:	5ad2      	ldrh	r2, [r2, r3]
    d4bc:	1cfb      	adds	r3, r7, #3
    d4be:	7819      	ldrb	r1, [r3, #0]
    d4c0:	4b0c      	ldr	r3, [pc, #48]	; (d4f4 <usb_device_enable_callback+0x60>)
    d4c2:	447b      	add	r3, pc
    d4c4:	0049      	lsls	r1, r1, #1
    d4c6:	5acb      	ldrh	r3, [r1, r3]
    d4c8:	4313      	orrs	r3, r2
    d4ca:	b299      	uxth	r1, r3
    d4cc:	687a      	ldr	r2, [r7, #4]
    d4ce:	23ab      	movs	r3, #171	; 0xab
    d4d0:	005b      	lsls	r3, r3, #1
    d4d2:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    d4d4:	687b      	ldr	r3, [r7, #4]
    d4d6:	681b      	ldr	r3, [r3, #0]
    d4d8:	1cfa      	adds	r2, r7, #3
    d4da:	7811      	ldrb	r1, [r2, #0]
    d4dc:	4a06      	ldr	r2, [pc, #24]	; (d4f8 <usb_device_enable_callback+0x64>)
    d4de:	447a      	add	r2, pc
    d4e0:	0049      	lsls	r1, r1, #1
    d4e2:	5a8a      	ldrh	r2, [r1, r2]
    d4e4:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    d4e6:	2300      	movs	r3, #0
}
    d4e8:	0018      	movs	r0, r3
    d4ea:	46bd      	mov	sp, r7
    d4ec:	b002      	add	sp, #8
    d4ee:	bd80      	pop	{r7, pc}
    d4f0:	000048e8 	.word	0x000048e8
    d4f4:	000048d2 	.word	0x000048d2
    d4f8:	000048b6 	.word	0x000048b6

0000d4fc <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    d4fc:	b580      	push	{r7, lr}
    d4fe:	b082      	sub	sp, #8
    d500:	af00      	add	r7, sp, #0
    d502:	6078      	str	r0, [r7, #4]
    d504:	000a      	movs	r2, r1
    d506:	1cfb      	adds	r3, r7, #3
    d508:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    d50a:	687a      	ldr	r2, [r7, #4]
    d50c:	23ab      	movs	r3, #171	; 0xab
    d50e:	005b      	lsls	r3, r3, #1
    d510:	5ad3      	ldrh	r3, [r2, r3]
    d512:	b21b      	sxth	r3, r3
    d514:	1cfa      	adds	r2, r7, #3
    d516:	7811      	ldrb	r1, [r2, #0]
    d518:	4a0d      	ldr	r2, [pc, #52]	; (d550 <usb_device_disable_callback+0x54>)
    d51a:	447a      	add	r2, pc
    d51c:	0049      	lsls	r1, r1, #1
    d51e:	5a8a      	ldrh	r2, [r1, r2]
    d520:	b212      	sxth	r2, r2
    d522:	43d2      	mvns	r2, r2
    d524:	b212      	sxth	r2, r2
    d526:	4013      	ands	r3, r2
    d528:	b21b      	sxth	r3, r3
    d52a:	b299      	uxth	r1, r3
    d52c:	687a      	ldr	r2, [r7, #4]
    d52e:	23ab      	movs	r3, #171	; 0xab
    d530:	005b      	lsls	r3, r3, #1
    d532:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	681b      	ldr	r3, [r3, #0]
    d538:	1cfa      	adds	r2, r7, #3
    d53a:	7811      	ldrb	r1, [r2, #0]
    d53c:	4a05      	ldr	r2, [pc, #20]	; (d554 <usb_device_disable_callback+0x58>)
    d53e:	447a      	add	r2, pc
    d540:	0049      	lsls	r1, r1, #1
    d542:	5a8a      	ldrh	r2, [r1, r2]
    d544:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    d546:	2300      	movs	r3, #0
}
    d548:	0018      	movs	r0, r3
    d54a:	46bd      	mov	sp, r7
    d54c:	b002      	add	sp, #8
    d54e:	bd80      	pop	{r7, pc}
    d550:	0000487a 	.word	0x0000487a
    d554:	00004856 	.word	0x00004856

0000d558 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    d558:	b580      	push	{r7, lr}
    d55a:	b084      	sub	sp, #16
    d55c:	af00      	add	r7, sp, #0
    d55e:	60f8      	str	r0, [r7, #12]
    d560:	0008      	movs	r0, r1
    d562:	0011      	movs	r1, r2
    d564:	607b      	str	r3, [r7, #4]
    d566:	230b      	movs	r3, #11
    d568:	18fb      	adds	r3, r7, r3
    d56a:	1c02      	adds	r2, r0, #0
    d56c:	701a      	strb	r2, [r3, #0]
    d56e:	230a      	movs	r3, #10
    d570:	18fb      	adds	r3, r7, r3
    d572:	1c0a      	adds	r2, r1, #0
    d574:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    d576:	230b      	movs	r3, #11
    d578:	18fb      	adds	r3, r7, r3
    d57a:	7819      	ldrb	r1, [r3, #0]
    d57c:	230a      	movs	r3, #10
    d57e:	18fb      	adds	r3, r7, r3
    d580:	781b      	ldrb	r3, [r3, #0]
    d582:	68fa      	ldr	r2, [r7, #12]
    d584:	0089      	lsls	r1, r1, #2
    d586:	18cb      	adds	r3, r1, r3
    d588:	3334      	adds	r3, #52	; 0x34
    d58a:	009b      	lsls	r3, r3, #2
    d58c:	18d3      	adds	r3, r2, r3
    d58e:	3304      	adds	r3, #4
    d590:	687a      	ldr	r2, [r7, #4]
    d592:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    d594:	230b      	movs	r3, #11
    d596:	18fb      	adds	r3, r7, r3
    d598:	781a      	ldrb	r2, [r3, #0]
    d59a:	230b      	movs	r3, #11
    d59c:	18fb      	adds	r3, r7, r3
    d59e:	7819      	ldrb	r1, [r3, #0]
    d5a0:	68f8      	ldr	r0, [r7, #12]
    d5a2:	23ac      	movs	r3, #172	; 0xac
    d5a4:	005b      	lsls	r3, r3, #1
    d5a6:	1841      	adds	r1, r0, r1
    d5a8:	18cb      	adds	r3, r1, r3
    d5aa:	7819      	ldrb	r1, [r3, #0]
    d5ac:	230a      	movs	r3, #10
    d5ae:	18fb      	adds	r3, r7, r3
    d5b0:	781b      	ldrb	r3, [r3, #0]
    d5b2:	4808      	ldr	r0, [pc, #32]	; (d5d4 <usb_device_endpoint_register_callback+0x7c>)
    d5b4:	4478      	add	r0, pc
    d5b6:	5cc3      	ldrb	r3, [r0, r3]
    d5b8:	430b      	orrs	r3, r1
    d5ba:	b2d8      	uxtb	r0, r3
    d5bc:	68f9      	ldr	r1, [r7, #12]
    d5be:	23ac      	movs	r3, #172	; 0xac
    d5c0:	005b      	lsls	r3, r3, #1
    d5c2:	188a      	adds	r2, r1, r2
    d5c4:	18d3      	adds	r3, r2, r3
    d5c6:	1c02      	adds	r2, r0, #0
    d5c8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    d5ca:	2300      	movs	r3, #0
}
    d5cc:	0018      	movs	r0, r3
    d5ce:	46bd      	mov	sp, r7
    d5d0:	b004      	add	sp, #16
    d5d2:	bd80      	pop	{r7, pc}
    d5d4:	000047f0 	.word	0x000047f0

0000d5d8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    d5d8:	b580      	push	{r7, lr}
    d5da:	b082      	sub	sp, #8
    d5dc:	af00      	add	r7, sp, #0
    d5de:	6078      	str	r0, [r7, #4]
    d5e0:	0008      	movs	r0, r1
    d5e2:	0011      	movs	r1, r2
    d5e4:	1cfb      	adds	r3, r7, #3
    d5e6:	1c02      	adds	r2, r0, #0
    d5e8:	701a      	strb	r2, [r3, #0]
    d5ea:	1cbb      	adds	r3, r7, #2
    d5ec:	1c0a      	adds	r2, r1, #0
    d5ee:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    d5f0:	1cfb      	adds	r3, r7, #3
    d5f2:	7819      	ldrb	r1, [r3, #0]
    d5f4:	1cbb      	adds	r3, r7, #2
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	687a      	ldr	r2, [r7, #4]
    d5fa:	0089      	lsls	r1, r1, #2
    d5fc:	18cb      	adds	r3, r1, r3
    d5fe:	3334      	adds	r3, #52	; 0x34
    d600:	009b      	lsls	r3, r3, #2
    d602:	18d3      	adds	r3, r2, r3
    d604:	3304      	adds	r3, #4
    d606:	2200      	movs	r2, #0
    d608:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    d60a:	1cfb      	adds	r3, r7, #3
    d60c:	781a      	ldrb	r2, [r3, #0]
    d60e:	1cfb      	adds	r3, r7, #3
    d610:	7819      	ldrb	r1, [r3, #0]
    d612:	6878      	ldr	r0, [r7, #4]
    d614:	23ac      	movs	r3, #172	; 0xac
    d616:	005b      	lsls	r3, r3, #1
    d618:	1841      	adds	r1, r0, r1
    d61a:	18cb      	adds	r3, r1, r3
    d61c:	781b      	ldrb	r3, [r3, #0]
    d61e:	b25b      	sxtb	r3, r3
    d620:	1cb9      	adds	r1, r7, #2
    d622:	7809      	ldrb	r1, [r1, #0]
    d624:	480a      	ldr	r0, [pc, #40]	; (d650 <usb_device_endpoint_unregister_callback+0x78>)
    d626:	4478      	add	r0, pc
    d628:	5c41      	ldrb	r1, [r0, r1]
    d62a:	b249      	sxtb	r1, r1
    d62c:	43c9      	mvns	r1, r1
    d62e:	b249      	sxtb	r1, r1
    d630:	400b      	ands	r3, r1
    d632:	b25b      	sxtb	r3, r3
    d634:	b2d8      	uxtb	r0, r3
    d636:	6879      	ldr	r1, [r7, #4]
    d638:	23ac      	movs	r3, #172	; 0xac
    d63a:	005b      	lsls	r3, r3, #1
    d63c:	188a      	adds	r2, r1, r2
    d63e:	18d3      	adds	r3, r2, r3
    d640:	1c02      	adds	r2, r0, #0
    d642:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    d644:	2300      	movs	r3, #0
}
    d646:	0018      	movs	r0, r3
    d648:	46bd      	mov	sp, r7
    d64a:	b002      	add	sp, #8
    d64c:	bd80      	pop	{r7, pc}
    d64e:	46c0      	nop			; (mov r8, r8)
    d650:	0000477e 	.word	0x0000477e

0000d654 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    d654:	b580      	push	{r7, lr}
    d656:	b084      	sub	sp, #16
    d658:	af00      	add	r7, sp, #0
    d65a:	6078      	str	r0, [r7, #4]
    d65c:	0008      	movs	r0, r1
    d65e:	0011      	movs	r1, r2
    d660:	1cfb      	adds	r3, r7, #3
    d662:	1c02      	adds	r2, r0, #0
    d664:	701a      	strb	r2, [r3, #0]
    d666:	1cbb      	adds	r3, r7, #2
    d668:	1c0a      	adds	r2, r1, #0
    d66a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d66c:	230f      	movs	r3, #15
    d66e:	18fb      	adds	r3, r7, r3
    d670:	1cfa      	adds	r2, r7, #3
    d672:	7812      	ldrb	r2, [r2, #0]
    d674:	210f      	movs	r1, #15
    d676:	400a      	ands	r2, r1
    d678:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    d67a:	230f      	movs	r3, #15
    d67c:	18fb      	adds	r3, r7, r3
    d67e:	781a      	ldrb	r2, [r3, #0]
    d680:	230f      	movs	r3, #15
    d682:	18fb      	adds	r3, r7, r3
    d684:	7819      	ldrb	r1, [r3, #0]
    d686:	6878      	ldr	r0, [r7, #4]
    d688:	23b0      	movs	r3, #176	; 0xb0
    d68a:	005b      	lsls	r3, r3, #1
    d68c:	1841      	adds	r1, r0, r1
    d68e:	18cb      	adds	r3, r1, r3
    d690:	7819      	ldrb	r1, [r3, #0]
    d692:	1cbb      	adds	r3, r7, #2
    d694:	781b      	ldrb	r3, [r3, #0]
    d696:	4855      	ldr	r0, [pc, #340]	; (d7ec <usb_device_endpoint_enable_callback+0x198>)
    d698:	4478      	add	r0, pc
    d69a:	5cc3      	ldrb	r3, [r0, r3]
    d69c:	430b      	orrs	r3, r1
    d69e:	b2d8      	uxtb	r0, r3
    d6a0:	6879      	ldr	r1, [r7, #4]
    d6a2:	23b0      	movs	r3, #176	; 0xb0
    d6a4:	005b      	lsls	r3, r3, #1
    d6a6:	188a      	adds	r2, r1, r2
    d6a8:	18d3      	adds	r3, r2, r3
    d6aa:	1c02      	adds	r2, r0, #0
    d6ac:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    d6ae:	1cbb      	adds	r3, r7, #2
    d6b0:	781b      	ldrb	r3, [r3, #0]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d12f      	bne.n	d716 <usb_device_endpoint_enable_callback+0xc2>
		if (ep_num == 0) { // control endpoint
    d6b6:	230f      	movs	r3, #15
    d6b8:	18fb      	adds	r3, r7, r3
    d6ba:	781b      	ldrb	r3, [r3, #0]
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d10c      	bne.n	d6da <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    d6c0:	687b      	ldr	r3, [r7, #4]
    d6c2:	6819      	ldr	r1, [r3, #0]
    d6c4:	230f      	movs	r3, #15
    d6c6:	18fb      	adds	r3, r7, r3
    d6c8:	781a      	ldrb	r2, [r3, #0]
    d6ca:	230a      	movs	r3, #10
    d6cc:	33ff      	adds	r3, #255	; 0xff
    d6ce:	0152      	lsls	r2, r2, #5
    d6d0:	188a      	adds	r2, r1, r2
    d6d2:	18d3      	adds	r3, r2, r3
    d6d4:	2203      	movs	r2, #3
    d6d6:	701a      	strb	r2, [r3, #0]
    d6d8:	e01d      	b.n	d716 <usb_device_endpoint_enable_callback+0xc2>
		} else if (ep & USB_EP_DIR_IN) {
    d6da:	1cfb      	adds	r3, r7, #3
    d6dc:	781b      	ldrb	r3, [r3, #0]
    d6de:	b25b      	sxtb	r3, r3
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	da0c      	bge.n	d6fe <usb_device_endpoint_enable_callback+0xaa>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    d6e4:	687b      	ldr	r3, [r7, #4]
    d6e6:	6819      	ldr	r1, [r3, #0]
    d6e8:	230f      	movs	r3, #15
    d6ea:	18fb      	adds	r3, r7, r3
    d6ec:	781a      	ldrb	r2, [r3, #0]
    d6ee:	230a      	movs	r3, #10
    d6f0:	33ff      	adds	r3, #255	; 0xff
    d6f2:	0152      	lsls	r2, r2, #5
    d6f4:	188a      	adds	r2, r1, r2
    d6f6:	18d3      	adds	r3, r2, r3
    d6f8:	2202      	movs	r2, #2
    d6fa:	701a      	strb	r2, [r3, #0]
    d6fc:	e00b      	b.n	d716 <usb_device_endpoint_enable_callback+0xc2>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    d6fe:	687b      	ldr	r3, [r7, #4]
    d700:	6819      	ldr	r1, [r3, #0]
    d702:	230f      	movs	r3, #15
    d704:	18fb      	adds	r3, r7, r3
    d706:	781a      	ldrb	r2, [r3, #0]
    d708:	230a      	movs	r3, #10
    d70a:	33ff      	adds	r3, #255	; 0xff
    d70c:	0152      	lsls	r2, r2, #5
    d70e:	188a      	adds	r2, r1, r2
    d710:	18d3      	adds	r3, r2, r3
    d712:	2201      	movs	r2, #1
    d714:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    d716:	1cbb      	adds	r3, r7, #2
    d718:	781b      	ldrb	r3, [r3, #0]
    d71a:	2b01      	cmp	r3, #1
    d71c:	d12f      	bne.n	d77e <usb_device_endpoint_enable_callback+0x12a>
		if (ep_num == 0) { // control endpoint
    d71e:	230f      	movs	r3, #15
    d720:	18fb      	adds	r3, r7, r3
    d722:	781b      	ldrb	r3, [r3, #0]
    d724:	2b00      	cmp	r3, #0
    d726:	d10c      	bne.n	d742 <usb_device_endpoint_enable_callback+0xee>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    d728:	687b      	ldr	r3, [r7, #4]
    d72a:	6819      	ldr	r1, [r3, #0]
    d72c:	230f      	movs	r3, #15
    d72e:	18fb      	adds	r3, r7, r3
    d730:	781a      	ldrb	r2, [r3, #0]
    d732:	230a      	movs	r3, #10
    d734:	33ff      	adds	r3, #255	; 0xff
    d736:	0152      	lsls	r2, r2, #5
    d738:	188a      	adds	r2, r1, r2
    d73a:	18d3      	adds	r3, r2, r3
    d73c:	220c      	movs	r2, #12
    d73e:	701a      	strb	r2, [r3, #0]
    d740:	e01d      	b.n	d77e <usb_device_endpoint_enable_callback+0x12a>
		} else if (ep & USB_EP_DIR_IN) {
    d742:	1cfb      	adds	r3, r7, #3
    d744:	781b      	ldrb	r3, [r3, #0]
    d746:	b25b      	sxtb	r3, r3
    d748:	2b00      	cmp	r3, #0
    d74a:	da0c      	bge.n	d766 <usb_device_endpoint_enable_callback+0x112>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    d74c:	687b      	ldr	r3, [r7, #4]
    d74e:	6819      	ldr	r1, [r3, #0]
    d750:	230f      	movs	r3, #15
    d752:	18fb      	adds	r3, r7, r3
    d754:	781a      	ldrb	r2, [r3, #0]
    d756:	230a      	movs	r3, #10
    d758:	33ff      	adds	r3, #255	; 0xff
    d75a:	0152      	lsls	r2, r2, #5
    d75c:	188a      	adds	r2, r1, r2
    d75e:	18d3      	adds	r3, r2, r3
    d760:	2208      	movs	r2, #8
    d762:	701a      	strb	r2, [r3, #0]
    d764:	e00b      	b.n	d77e <usb_device_endpoint_enable_callback+0x12a>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    d766:	687b      	ldr	r3, [r7, #4]
    d768:	6819      	ldr	r1, [r3, #0]
    d76a:	230f      	movs	r3, #15
    d76c:	18fb      	adds	r3, r7, r3
    d76e:	781a      	ldrb	r2, [r3, #0]
    d770:	230a      	movs	r3, #10
    d772:	33ff      	adds	r3, #255	; 0xff
    d774:	0152      	lsls	r2, r2, #5
    d776:	188a      	adds	r2, r1, r2
    d778:	18d3      	adds	r3, r2, r3
    d77a:	2204      	movs	r2, #4
    d77c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    d77e:	1cbb      	adds	r3, r7, #2
    d780:	781b      	ldrb	r3, [r3, #0]
    d782:	2b02      	cmp	r3, #2
    d784:	d10b      	bne.n	d79e <usb_device_endpoint_enable_callback+0x14a>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    d786:	687b      	ldr	r3, [r7, #4]
    d788:	6819      	ldr	r1, [r3, #0]
    d78a:	230f      	movs	r3, #15
    d78c:	18fb      	adds	r3, r7, r3
    d78e:	781a      	ldrb	r2, [r3, #0]
    d790:	230a      	movs	r3, #10
    d792:	33ff      	adds	r3, #255	; 0xff
    d794:	0152      	lsls	r2, r2, #5
    d796:	188a      	adds	r2, r1, r2
    d798:	18d3      	adds	r3, r2, r3
    d79a:	2210      	movs	r2, #16
    d79c:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    d79e:	1cbb      	adds	r3, r7, #2
    d7a0:	781b      	ldrb	r3, [r3, #0]
    d7a2:	2b03      	cmp	r3, #3
    d7a4:	d11d      	bne.n	d7e2 <usb_device_endpoint_enable_callback+0x18e>
		if (ep & USB_EP_DIR_IN) {
    d7a6:	1cfb      	adds	r3, r7, #3
    d7a8:	781b      	ldrb	r3, [r3, #0]
    d7aa:	b25b      	sxtb	r3, r3
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	da0c      	bge.n	d7ca <usb_device_endpoint_enable_callback+0x176>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	6819      	ldr	r1, [r3, #0]
    d7b4:	230f      	movs	r3, #15
    d7b6:	18fb      	adds	r3, r7, r3
    d7b8:	781a      	ldrb	r2, [r3, #0]
    d7ba:	230a      	movs	r3, #10
    d7bc:	33ff      	adds	r3, #255	; 0xff
    d7be:	0152      	lsls	r2, r2, #5
    d7c0:	188a      	adds	r2, r1, r2
    d7c2:	18d3      	adds	r3, r2, r3
    d7c4:	2240      	movs	r2, #64	; 0x40
    d7c6:	701a      	strb	r2, [r3, #0]
    d7c8:	e00b      	b.n	d7e2 <usb_device_endpoint_enable_callback+0x18e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    d7ca:	687b      	ldr	r3, [r7, #4]
    d7cc:	6819      	ldr	r1, [r3, #0]
    d7ce:	230f      	movs	r3, #15
    d7d0:	18fb      	adds	r3, r7, r3
    d7d2:	781a      	ldrb	r2, [r3, #0]
    d7d4:	230a      	movs	r3, #10
    d7d6:	33ff      	adds	r3, #255	; 0xff
    d7d8:	0152      	lsls	r2, r2, #5
    d7da:	188a      	adds	r2, r1, r2
    d7dc:	18d3      	adds	r3, r2, r3
    d7de:	2220      	movs	r2, #32
    d7e0:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    d7e2:	2300      	movs	r3, #0
}
    d7e4:	0018      	movs	r0, r3
    d7e6:	46bd      	mov	sp, r7
    d7e8:	b004      	add	sp, #16
    d7ea:	bd80      	pop	{r7, pc}
    d7ec:	0000470c 	.word	0x0000470c

0000d7f0 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    d7f0:	b580      	push	{r7, lr}
    d7f2:	b084      	sub	sp, #16
    d7f4:	af00      	add	r7, sp, #0
    d7f6:	6078      	str	r0, [r7, #4]
    d7f8:	0008      	movs	r0, r1
    d7fa:	0011      	movs	r1, r2
    d7fc:	1cfb      	adds	r3, r7, #3
    d7fe:	1c02      	adds	r2, r0, #0
    d800:	701a      	strb	r2, [r3, #0]
    d802:	1cbb      	adds	r3, r7, #2
    d804:	1c0a      	adds	r2, r1, #0
    d806:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d808:	230f      	movs	r3, #15
    d80a:	18fb      	adds	r3, r7, r3
    d80c:	1cfa      	adds	r2, r7, #3
    d80e:	7812      	ldrb	r2, [r2, #0]
    d810:	210f      	movs	r1, #15
    d812:	400a      	ands	r2, r1
    d814:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    d816:	230f      	movs	r3, #15
    d818:	18fb      	adds	r3, r7, r3
    d81a:	781a      	ldrb	r2, [r3, #0]
    d81c:	230f      	movs	r3, #15
    d81e:	18fb      	adds	r3, r7, r3
    d820:	7819      	ldrb	r1, [r3, #0]
    d822:	6878      	ldr	r0, [r7, #4]
    d824:	23b0      	movs	r3, #176	; 0xb0
    d826:	005b      	lsls	r3, r3, #1
    d828:	1841      	adds	r1, r0, r1
    d82a:	18cb      	adds	r3, r1, r3
    d82c:	781b      	ldrb	r3, [r3, #0]
    d82e:	b25b      	sxtb	r3, r3
    d830:	1cb9      	adds	r1, r7, #2
    d832:	7809      	ldrb	r1, [r1, #0]
    d834:	4857      	ldr	r0, [pc, #348]	; (d994 <usb_device_endpoint_disable_callback+0x1a4>)
    d836:	4478      	add	r0, pc
    d838:	5c41      	ldrb	r1, [r0, r1]
    d83a:	b249      	sxtb	r1, r1
    d83c:	43c9      	mvns	r1, r1
    d83e:	b249      	sxtb	r1, r1
    d840:	400b      	ands	r3, r1
    d842:	b25b      	sxtb	r3, r3
    d844:	b2d8      	uxtb	r0, r3
    d846:	6879      	ldr	r1, [r7, #4]
    d848:	23b0      	movs	r3, #176	; 0xb0
    d84a:	005b      	lsls	r3, r3, #1
    d84c:	188a      	adds	r2, r1, r2
    d84e:	18d3      	adds	r3, r2, r3
    d850:	1c02      	adds	r2, r0, #0
    d852:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    d854:	1cbb      	adds	r3, r7, #2
    d856:	781b      	ldrb	r3, [r3, #0]
    d858:	2b00      	cmp	r3, #0
    d85a:	d12f      	bne.n	d8bc <usb_device_endpoint_disable_callback+0xcc>
		if (ep_num == 0) { // control endpoint
    d85c:	230f      	movs	r3, #15
    d85e:	18fb      	adds	r3, r7, r3
    d860:	781b      	ldrb	r3, [r3, #0]
    d862:	2b00      	cmp	r3, #0
    d864:	d10c      	bne.n	d880 <usb_device_endpoint_disable_callback+0x90>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    d866:	687b      	ldr	r3, [r7, #4]
    d868:	6819      	ldr	r1, [r3, #0]
    d86a:	230f      	movs	r3, #15
    d86c:	18fb      	adds	r3, r7, r3
    d86e:	781a      	ldrb	r2, [r3, #0]
    d870:	2384      	movs	r3, #132	; 0x84
    d872:	005b      	lsls	r3, r3, #1
    d874:	0152      	lsls	r2, r2, #5
    d876:	188a      	adds	r2, r1, r2
    d878:	18d3      	adds	r3, r2, r3
    d87a:	2203      	movs	r2, #3
    d87c:	701a      	strb	r2, [r3, #0]
    d87e:	e01d      	b.n	d8bc <usb_device_endpoint_disable_callback+0xcc>
		} else if (ep & USB_EP_DIR_IN) {
    d880:	1cfb      	adds	r3, r7, #3
    d882:	781b      	ldrb	r3, [r3, #0]
    d884:	b25b      	sxtb	r3, r3
    d886:	2b00      	cmp	r3, #0
    d888:	da0c      	bge.n	d8a4 <usb_device_endpoint_disable_callback+0xb4>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    d88a:	687b      	ldr	r3, [r7, #4]
    d88c:	6819      	ldr	r1, [r3, #0]
    d88e:	230f      	movs	r3, #15
    d890:	18fb      	adds	r3, r7, r3
    d892:	781a      	ldrb	r2, [r3, #0]
    d894:	2384      	movs	r3, #132	; 0x84
    d896:	005b      	lsls	r3, r3, #1
    d898:	0152      	lsls	r2, r2, #5
    d89a:	188a      	adds	r2, r1, r2
    d89c:	18d3      	adds	r3, r2, r3
    d89e:	2202      	movs	r2, #2
    d8a0:	701a      	strb	r2, [r3, #0]
    d8a2:	e00b      	b.n	d8bc <usb_device_endpoint_disable_callback+0xcc>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    d8a4:	687b      	ldr	r3, [r7, #4]
    d8a6:	6819      	ldr	r1, [r3, #0]
    d8a8:	230f      	movs	r3, #15
    d8aa:	18fb      	adds	r3, r7, r3
    d8ac:	781a      	ldrb	r2, [r3, #0]
    d8ae:	2384      	movs	r3, #132	; 0x84
    d8b0:	005b      	lsls	r3, r3, #1
    d8b2:	0152      	lsls	r2, r2, #5
    d8b4:	188a      	adds	r2, r1, r2
    d8b6:	18d3      	adds	r3, r2, r3
    d8b8:	2201      	movs	r2, #1
    d8ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    d8bc:	1cbb      	adds	r3, r7, #2
    d8be:	781b      	ldrb	r3, [r3, #0]
    d8c0:	2b01      	cmp	r3, #1
    d8c2:	d12f      	bne.n	d924 <usb_device_endpoint_disable_callback+0x134>
		if (ep_num == 0) { // control endpoint
    d8c4:	230f      	movs	r3, #15
    d8c6:	18fb      	adds	r3, r7, r3
    d8c8:	781b      	ldrb	r3, [r3, #0]
    d8ca:	2b00      	cmp	r3, #0
    d8cc:	d10c      	bne.n	d8e8 <usb_device_endpoint_disable_callback+0xf8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	6819      	ldr	r1, [r3, #0]
    d8d2:	230f      	movs	r3, #15
    d8d4:	18fb      	adds	r3, r7, r3
    d8d6:	781a      	ldrb	r2, [r3, #0]
    d8d8:	2384      	movs	r3, #132	; 0x84
    d8da:	005b      	lsls	r3, r3, #1
    d8dc:	0152      	lsls	r2, r2, #5
    d8de:	188a      	adds	r2, r1, r2
    d8e0:	18d3      	adds	r3, r2, r3
    d8e2:	220c      	movs	r2, #12
    d8e4:	701a      	strb	r2, [r3, #0]
    d8e6:	e01d      	b.n	d924 <usb_device_endpoint_disable_callback+0x134>
		} else if (ep & USB_EP_DIR_IN) {
    d8e8:	1cfb      	adds	r3, r7, #3
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	b25b      	sxtb	r3, r3
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	da0c      	bge.n	d90c <usb_device_endpoint_disable_callback+0x11c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    d8f2:	687b      	ldr	r3, [r7, #4]
    d8f4:	6819      	ldr	r1, [r3, #0]
    d8f6:	230f      	movs	r3, #15
    d8f8:	18fb      	adds	r3, r7, r3
    d8fa:	781a      	ldrb	r2, [r3, #0]
    d8fc:	2384      	movs	r3, #132	; 0x84
    d8fe:	005b      	lsls	r3, r3, #1
    d900:	0152      	lsls	r2, r2, #5
    d902:	188a      	adds	r2, r1, r2
    d904:	18d3      	adds	r3, r2, r3
    d906:	2208      	movs	r2, #8
    d908:	701a      	strb	r2, [r3, #0]
    d90a:	e00b      	b.n	d924 <usb_device_endpoint_disable_callback+0x134>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    d90c:	687b      	ldr	r3, [r7, #4]
    d90e:	6819      	ldr	r1, [r3, #0]
    d910:	230f      	movs	r3, #15
    d912:	18fb      	adds	r3, r7, r3
    d914:	781a      	ldrb	r2, [r3, #0]
    d916:	2384      	movs	r3, #132	; 0x84
    d918:	005b      	lsls	r3, r3, #1
    d91a:	0152      	lsls	r2, r2, #5
    d91c:	188a      	adds	r2, r1, r2
    d91e:	18d3      	adds	r3, r2, r3
    d920:	2204      	movs	r2, #4
    d922:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    d924:	1cbb      	adds	r3, r7, #2
    d926:	781b      	ldrb	r3, [r3, #0]
    d928:	2b02      	cmp	r3, #2
    d92a:	d10b      	bne.n	d944 <usb_device_endpoint_disable_callback+0x154>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    d92c:	687b      	ldr	r3, [r7, #4]
    d92e:	6819      	ldr	r1, [r3, #0]
    d930:	230f      	movs	r3, #15
    d932:	18fb      	adds	r3, r7, r3
    d934:	781a      	ldrb	r2, [r3, #0]
    d936:	2384      	movs	r3, #132	; 0x84
    d938:	005b      	lsls	r3, r3, #1
    d93a:	0152      	lsls	r2, r2, #5
    d93c:	188a      	adds	r2, r1, r2
    d93e:	18d3      	adds	r3, r2, r3
    d940:	2210      	movs	r2, #16
    d942:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    d944:	1cbb      	adds	r3, r7, #2
    d946:	781b      	ldrb	r3, [r3, #0]
    d948:	2b03      	cmp	r3, #3
    d94a:	d11d      	bne.n	d988 <usb_device_endpoint_disable_callback+0x198>
		if (ep & USB_EP_DIR_IN) {
    d94c:	1cfb      	adds	r3, r7, #3
    d94e:	781b      	ldrb	r3, [r3, #0]
    d950:	b25b      	sxtb	r3, r3
    d952:	2b00      	cmp	r3, #0
    d954:	da0c      	bge.n	d970 <usb_device_endpoint_disable_callback+0x180>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	6819      	ldr	r1, [r3, #0]
    d95a:	230f      	movs	r3, #15
    d95c:	18fb      	adds	r3, r7, r3
    d95e:	781a      	ldrb	r2, [r3, #0]
    d960:	2384      	movs	r3, #132	; 0x84
    d962:	005b      	lsls	r3, r3, #1
    d964:	0152      	lsls	r2, r2, #5
    d966:	188a      	adds	r2, r1, r2
    d968:	18d3      	adds	r3, r2, r3
    d96a:	2240      	movs	r2, #64	; 0x40
    d96c:	701a      	strb	r2, [r3, #0]
    d96e:	e00b      	b.n	d988 <usb_device_endpoint_disable_callback+0x198>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    d970:	687b      	ldr	r3, [r7, #4]
    d972:	6819      	ldr	r1, [r3, #0]
    d974:	230f      	movs	r3, #15
    d976:	18fb      	adds	r3, r7, r3
    d978:	781a      	ldrb	r2, [r3, #0]
    d97a:	2384      	movs	r3, #132	; 0x84
    d97c:	005b      	lsls	r3, r3, #1
    d97e:	0152      	lsls	r2, r2, #5
    d980:	188a      	adds	r2, r1, r2
    d982:	18d3      	adds	r3, r2, r3
    d984:	2220      	movs	r2, #32
    d986:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    d988:	2300      	movs	r3, #0
}
    d98a:	0018      	movs	r0, r3
    d98c:	46bd      	mov	sp, r7
    d98e:	b004      	add	sp, #16
    d990:	bd80      	pop	{r7, pc}
    d992:	46c0      	nop			; (mov r8, r8)
    d994:	0000456e 	.word	0x0000456e

0000d998 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    d998:	b580      	push	{r7, lr}
    d99a:	b082      	sub	sp, #8
    d99c:	af00      	add	r7, sp, #0
    d99e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    d9a0:	687b      	ldr	r3, [r7, #4]
    d9a2:	2200      	movs	r2, #0
    d9a4:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    d9a6:	687b      	ldr	r3, [r7, #4]
    d9a8:	2200      	movs	r2, #0
    d9aa:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    d9ac:	687b      	ldr	r3, [r7, #4]
    d9ae:	2200      	movs	r2, #0
    d9b0:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    d9b2:	687b      	ldr	r3, [r7, #4]
    d9b4:	2201      	movs	r2, #1
    d9b6:	70da      	strb	r2, [r3, #3]
}
    d9b8:	46c0      	nop			; (mov r8, r8)
    d9ba:	46bd      	mov	sp, r7
    d9bc:	b002      	add	sp, #8
    d9be:	bd80      	pop	{r7, pc}

0000d9c0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    d9c0:	b5b0      	push	{r4, r5, r7, lr}
    d9c2:	b084      	sub	sp, #16
    d9c4:	af00      	add	r7, sp, #0
    d9c6:	6078      	str	r0, [r7, #4]
    d9c8:	6039      	str	r1, [r7, #0]
    d9ca:	4bdf      	ldr	r3, [pc, #892]	; (dd48 <usb_device_endpoint_set_config+0x388>)
    d9cc:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    d9ce:	683a      	ldr	r2, [r7, #0]
    d9d0:	7811      	ldrb	r1, [r2, #0]
    d9d2:	220f      	movs	r2, #15
    d9d4:	18ba      	adds	r2, r7, r2
    d9d6:	200f      	movs	r0, #15
    d9d8:	4001      	ands	r1, r0
    d9da:	7011      	strb	r1, [r2, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    d9dc:	683a      	ldr	r2, [r7, #0]
    d9de:	7812      	ldrb	r2, [r2, #0]
    d9e0:	b252      	sxtb	r2, r2
    d9e2:	b2d2      	uxtb	r2, r2
    d9e4:	09d2      	lsrs	r2, r2, #7
    d9e6:	b2d1      	uxtb	r1, r2
    d9e8:	220e      	movs	r2, #14
    d9ea:	18ba      	adds	r2, r7, r2
    d9ec:	7011      	strb	r1, [r2, #0]

	switch (ep_config->ep_type) {
    d9ee:	683a      	ldr	r2, [r7, #0]
    d9f0:	78d2      	ldrb	r2, [r2, #3]
    d9f2:	2a04      	cmp	r2, #4
    d9f4:	d900      	bls.n	d9f8 <usb_device_endpoint_set_config+0x38>
    d9f6:	e214      	b.n	de22 <usb_device_endpoint_set_config+0x462>
    d9f8:	0010      	movs	r0, r2
    d9fa:	f002 fe7f 	bl	106fc <__gnu_thumb1_case_si>
    d9fe:	46c0      	nop			; (mov r8, r8)
    da00:	00000014 	.word	0x00000014
    da04:	0000002a 	.word	0x0000002a
    da08:	000001aa 	.word	0x000001aa
    da0c:	00000278 	.word	0x00000278
    da10:	00000354 	.word	0x00000354
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    da14:	687b      	ldr	r3, [r7, #4]
    da16:	681b      	ldr	r3, [r3, #0]
    da18:	220f      	movs	r2, #15
    da1a:	18ba      	adds	r2, r7, r2
    da1c:	7812      	ldrb	r2, [r2, #0]
    da1e:	3208      	adds	r2, #8
    da20:	0152      	lsls	r2, r2, #5
    da22:	2100      	movs	r1, #0
    da24:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    da26:	2300      	movs	r3, #0
    da28:	e259      	b.n	dede <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    da2a:	687a      	ldr	r2, [r7, #4]
    da2c:	6812      	ldr	r2, [r2, #0]
    da2e:	210f      	movs	r1, #15
    da30:	1879      	adds	r1, r7, r1
    da32:	7809      	ldrb	r1, [r1, #0]
    da34:	3108      	adds	r1, #8
    da36:	0149      	lsls	r1, r1, #5
    da38:	5c8a      	ldrb	r2, [r1, r2]
    da3a:	b2d2      	uxtb	r2, r2
    da3c:	0011      	movs	r1, r2
    da3e:	2207      	movs	r2, #7
    da40:	400a      	ands	r2, r1
    da42:	d130      	bne.n	daa6 <usb_device_endpoint_set_config+0xe6>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    da44:	687a      	ldr	r2, [r7, #4]
    da46:	6812      	ldr	r2, [r2, #0]
    da48:	210f      	movs	r1, #15
    da4a:	1879      	adds	r1, r7, r1
    da4c:	7809      	ldrb	r1, [r1, #0]
    da4e:	3108      	adds	r1, #8
    da50:	0149      	lsls	r1, r1, #5
    da52:	5c8a      	ldrb	r2, [r1, r2]
    da54:	b2d2      	uxtb	r2, r2
    da56:	0011      	movs	r1, r2
    da58:	2270      	movs	r2, #112	; 0x70
    da5a:	400a      	ands	r2, r1
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    da5c:	d123      	bne.n	daa6 <usb_device_endpoint_set_config+0xe6>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    da5e:	687a      	ldr	r2, [r7, #4]
    da60:	6812      	ldr	r2, [r2, #0]
    da62:	210f      	movs	r1, #15
    da64:	1879      	adds	r1, r7, r1
    da66:	7809      	ldrb	r1, [r1, #0]
    da68:	3108      	adds	r1, #8
    da6a:	0149      	lsls	r1, r1, #5
    da6c:	2011      	movs	r0, #17
    da6e:	5488      	strb	r0, [r1, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    da70:	687a      	ldr	r2, [r7, #4]
    da72:	6811      	ldr	r1, [r2, #0]
    da74:	220f      	movs	r2, #15
    da76:	18ba      	adds	r2, r7, r2
    da78:	7812      	ldrb	r2, [r2, #0]
    da7a:	3208      	adds	r2, #8
    da7c:	0152      	lsls	r2, r2, #5
    da7e:	188a      	adds	r2, r1, r2
    da80:	3205      	adds	r2, #5
    da82:	2140      	movs	r1, #64	; 0x40
    da84:	7011      	strb	r1, [r2, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    da86:	687a      	ldr	r2, [r7, #4]
    da88:	6811      	ldr	r1, [r2, #0]
    da8a:	220f      	movs	r2, #15
    da8c:	18ba      	adds	r2, r7, r2
    da8e:	7812      	ldrb	r2, [r2, #0]
    da90:	3208      	adds	r2, #8
    da92:	0152      	lsls	r2, r2, #5
    da94:	188a      	adds	r2, r1, r2
    da96:	3204      	adds	r2, #4
    da98:	2180      	movs	r1, #128	; 0x80
    da9a:	7011      	strb	r1, [r2, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    da9c:	683a      	ldr	r2, [r7, #0]
    da9e:	7892      	ldrb	r2, [r2, #2]
    daa0:	2a00      	cmp	r2, #0
    daa2:	d102      	bne.n	daaa <usb_device_endpoint_set_config+0xea>
    daa4:	e02c      	b.n	db00 <usb_device_endpoint_set_config+0x140>
				return STATUS_ERR_DENIED;
    daa6:	231c      	movs	r3, #28
    daa8:	e219      	b.n	dede <usb_device_endpoint_set_config+0x51e>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    daaa:	220f      	movs	r2, #15
    daac:	18ba      	adds	r2, r7, r2
    daae:	7814      	ldrb	r4, [r2, #0]
    dab0:	220f      	movs	r2, #15
    dab2:	18ba      	adds	r2, r7, r2
    dab4:	7812      	ldrb	r2, [r2, #0]
    dab6:	49a5      	ldr	r1, [pc, #660]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    dab8:	5859      	ldr	r1, [r3, r1]
    daba:	0152      	lsls	r2, r2, #5
    dabc:	188a      	adds	r2, r1, r2
    dabe:	3204      	adds	r2, #4
    dac0:	6812      	ldr	r2, [r2, #0]
    dac2:	2180      	movs	r1, #128	; 0x80
    dac4:	0609      	lsls	r1, r1, #24
    dac6:	4311      	orrs	r1, r2
    dac8:	4aa0      	ldr	r2, [pc, #640]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    daca:	5898      	ldr	r0, [r3, r2]
    dacc:	0162      	lsls	r2, r4, #5
    dace:	1882      	adds	r2, r0, r2
    dad0:	3204      	adds	r2, #4
    dad2:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    dad4:	220f      	movs	r2, #15
    dad6:	18ba      	adds	r2, r7, r2
    dad8:	7814      	ldrb	r4, [r2, #0]
    dada:	220f      	movs	r2, #15
    dadc:	18ba      	adds	r2, r7, r2
    dade:	7812      	ldrb	r2, [r2, #0]
    dae0:	499a      	ldr	r1, [pc, #616]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    dae2:	5859      	ldr	r1, [r3, r1]
    dae4:	0152      	lsls	r2, r2, #5
    dae6:	188a      	adds	r2, r1, r2
    dae8:	3214      	adds	r2, #20
    daea:	6812      	ldr	r2, [r2, #0]
    daec:	2180      	movs	r1, #128	; 0x80
    daee:	0609      	lsls	r1, r1, #24
    daf0:	4311      	orrs	r1, r2
    daf2:	4a96      	ldr	r2, [pc, #600]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    daf4:	5898      	ldr	r0, [r3, r2]
    daf6:	0162      	lsls	r2, r4, #5
    daf8:	1882      	adds	r2, r0, r2
    dafa:	3214      	adds	r2, #20
    dafc:	6011      	str	r1, [r2, #0]
    dafe:	e027      	b.n	db50 <usb_device_endpoint_set_config+0x190>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    db00:	220f      	movs	r2, #15
    db02:	18ba      	adds	r2, r7, r2
    db04:	7814      	ldrb	r4, [r2, #0]
    db06:	220f      	movs	r2, #15
    db08:	18ba      	adds	r2, r7, r2
    db0a:	7812      	ldrb	r2, [r2, #0]
    db0c:	498f      	ldr	r1, [pc, #572]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db0e:	5859      	ldr	r1, [r3, r1]
    db10:	0152      	lsls	r2, r2, #5
    db12:	188a      	adds	r2, r1, r2
    db14:	3204      	adds	r2, #4
    db16:	6812      	ldr	r2, [r2, #0]
    db18:	0052      	lsls	r2, r2, #1
    db1a:	0851      	lsrs	r1, r2, #1
    db1c:	4a8b      	ldr	r2, [pc, #556]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db1e:	5898      	ldr	r0, [r3, r2]
    db20:	0162      	lsls	r2, r4, #5
    db22:	1882      	adds	r2, r0, r2
    db24:	3204      	adds	r2, #4
    db26:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    db28:	220f      	movs	r2, #15
    db2a:	18ba      	adds	r2, r7, r2
    db2c:	7814      	ldrb	r4, [r2, #0]
    db2e:	220f      	movs	r2, #15
    db30:	18ba      	adds	r2, r7, r2
    db32:	7812      	ldrb	r2, [r2, #0]
    db34:	4985      	ldr	r1, [pc, #532]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db36:	5859      	ldr	r1, [r3, r1]
    db38:	0152      	lsls	r2, r2, #5
    db3a:	188a      	adds	r2, r1, r2
    db3c:	3214      	adds	r2, #20
    db3e:	6812      	ldr	r2, [r2, #0]
    db40:	0052      	lsls	r2, r2, #1
    db42:	0851      	lsrs	r1, r2, #1
    db44:	4a81      	ldr	r2, [pc, #516]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db46:	5898      	ldr	r0, [r3, r2]
    db48:	0162      	lsls	r2, r4, #5
    db4a:	1882      	adds	r2, r0, r2
    db4c:	3214      	adds	r2, #20
    db4e:	6011      	str	r1, [r2, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    db50:	220f      	movs	r2, #15
    db52:	18ba      	adds	r2, r7, r2
    db54:	7812      	ldrb	r2, [r2, #0]
    db56:	6839      	ldr	r1, [r7, #0]
    db58:	7849      	ldrb	r1, [r1, #1]
    db5a:	1c08      	adds	r0, r1, #0
    db5c:	2107      	movs	r1, #7
    db5e:	4001      	ands	r1, r0
    db60:	b2c8      	uxtb	r0, r1
    db62:	497a      	ldr	r1, [pc, #488]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db64:	5859      	ldr	r1, [r3, r1]
    db66:	0152      	lsls	r2, r2, #5
    db68:	188a      	adds	r2, r1, r2
    db6a:	6851      	ldr	r1, [r2, #4]
    db6c:	2407      	movs	r4, #7
    db6e:	4020      	ands	r0, r4
    db70:	0700      	lsls	r0, r0, #28
    db72:	4c77      	ldr	r4, [pc, #476]	; (dd50 <usb_device_endpoint_set_config+0x390>)
    db74:	4021      	ands	r1, r4
    db76:	4301      	orrs	r1, r0
    db78:	6051      	str	r1, [r2, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    db7a:	220f      	movs	r2, #15
    db7c:	18ba      	adds	r2, r7, r2
    db7e:	7810      	ldrb	r0, [r2, #0]
    db80:	683a      	ldr	r2, [r7, #0]
    db82:	7852      	ldrb	r2, [r2, #1]
    db84:	1c11      	adds	r1, r2, #0
    db86:	2207      	movs	r2, #7
    db88:	400a      	ands	r2, r1
    db8a:	b2d1      	uxtb	r1, r2
    db8c:	4a6f      	ldr	r2, [pc, #444]	; (dd4c <usb_device_endpoint_set_config+0x38c>)
    db8e:	589a      	ldr	r2, [r3, r2]
    db90:	0143      	lsls	r3, r0, #5
    db92:	18d3      	adds	r3, r2, r3
    db94:	3310      	adds	r3, #16
    db96:	685a      	ldr	r2, [r3, #4]
    db98:	2007      	movs	r0, #7
    db9a:	4001      	ands	r1, r0
    db9c:	0709      	lsls	r1, r1, #28
    db9e:	486c      	ldr	r0, [pc, #432]	; (dd50 <usb_device_endpoint_set_config+0x390>)
    dba0:	4002      	ands	r2, r0
    dba2:	430a      	orrs	r2, r1
    dba4:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    dba6:	2300      	movs	r3, #0
    dba8:	e199      	b.n	dede <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    dbaa:	220e      	movs	r2, #14
    dbac:	18ba      	adds	r2, r7, r2
    dbae:	7812      	ldrb	r2, [r2, #0]
    dbb0:	2a00      	cmp	r2, #0
    dbb2:	d030      	beq.n	dc16 <usb_device_endpoint_set_config+0x256>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    dbb4:	687a      	ldr	r2, [r7, #4]
    dbb6:	6812      	ldr	r2, [r2, #0]
    dbb8:	210f      	movs	r1, #15
    dbba:	1879      	adds	r1, r7, r1
    dbbc:	7809      	ldrb	r1, [r1, #0]
    dbbe:	3108      	adds	r1, #8
    dbc0:	0149      	lsls	r1, r1, #5
    dbc2:	5c8a      	ldrb	r2, [r1, r2]
    dbc4:	b2d2      	uxtb	r2, r2
    dbc6:	0011      	movs	r1, r2
    dbc8:	2270      	movs	r2, #112	; 0x70
    dbca:	400a      	ands	r2, r1
    dbcc:	d121      	bne.n	dc12 <usb_device_endpoint_set_config+0x252>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    dbce:	687a      	ldr	r2, [r7, #4]
    dbd0:	6811      	ldr	r1, [r2, #0]
    dbd2:	220f      	movs	r2, #15
    dbd4:	18ba      	adds	r2, r7, r2
    dbd6:	7810      	ldrb	r0, [r2, #0]
    dbd8:	687a      	ldr	r2, [r7, #4]
    dbda:	6812      	ldr	r2, [r2, #0]
    dbdc:	240f      	movs	r4, #15
    dbde:	193c      	adds	r4, r7, r4
    dbe0:	7824      	ldrb	r4, [r4, #0]
    dbe2:	3408      	adds	r4, #8
    dbe4:	0164      	lsls	r4, r4, #5
    dbe6:	5ca2      	ldrb	r2, [r4, r2]
    dbe8:	b2d2      	uxtb	r2, r2
    dbea:	2420      	movs	r4, #32
    dbec:	4322      	orrs	r2, r4
    dbee:	b2d4      	uxtb	r4, r2
    dbf0:	0002      	movs	r2, r0
    dbf2:	3208      	adds	r2, #8
    dbf4:	0152      	lsls	r2, r2, #5
    dbf6:	1c20      	adds	r0, r4, #0
    dbf8:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    dbfa:	687a      	ldr	r2, [r7, #4]
    dbfc:	6811      	ldr	r1, [r2, #0]
    dbfe:	220f      	movs	r2, #15
    dc00:	18ba      	adds	r2, r7, r2
    dc02:	7812      	ldrb	r2, [r2, #0]
    dc04:	3208      	adds	r2, #8
    dc06:	0152      	lsls	r2, r2, #5
    dc08:	188a      	adds	r2, r1, r2
    dc0a:	3204      	adds	r2, #4
    dc0c:	2180      	movs	r1, #128	; 0x80
    dc0e:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    dc10:	e108      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    dc12:	231c      	movs	r3, #28
    dc14:	e163      	b.n	dede <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    dc16:	687a      	ldr	r2, [r7, #4]
    dc18:	6812      	ldr	r2, [r2, #0]
    dc1a:	210f      	movs	r1, #15
    dc1c:	1879      	adds	r1, r7, r1
    dc1e:	7809      	ldrb	r1, [r1, #0]
    dc20:	3108      	adds	r1, #8
    dc22:	0149      	lsls	r1, r1, #5
    dc24:	5c8a      	ldrb	r2, [r1, r2]
    dc26:	b2d2      	uxtb	r2, r2
    dc28:	0011      	movs	r1, r2
    dc2a:	2207      	movs	r2, #7
    dc2c:	400a      	ands	r2, r1
    dc2e:	d121      	bne.n	dc74 <usb_device_endpoint_set_config+0x2b4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    dc30:	687a      	ldr	r2, [r7, #4]
    dc32:	6811      	ldr	r1, [r2, #0]
    dc34:	220f      	movs	r2, #15
    dc36:	18ba      	adds	r2, r7, r2
    dc38:	7810      	ldrb	r0, [r2, #0]
    dc3a:	687a      	ldr	r2, [r7, #4]
    dc3c:	6812      	ldr	r2, [r2, #0]
    dc3e:	240f      	movs	r4, #15
    dc40:	193c      	adds	r4, r7, r4
    dc42:	7824      	ldrb	r4, [r4, #0]
    dc44:	3408      	adds	r4, #8
    dc46:	0164      	lsls	r4, r4, #5
    dc48:	5ca2      	ldrb	r2, [r4, r2]
    dc4a:	b2d2      	uxtb	r2, r2
    dc4c:	2402      	movs	r4, #2
    dc4e:	4322      	orrs	r2, r4
    dc50:	b2d4      	uxtb	r4, r2
    dc52:	0002      	movs	r2, r0
    dc54:	3208      	adds	r2, #8
    dc56:	0152      	lsls	r2, r2, #5
    dc58:	1c20      	adds	r0, r4, #0
    dc5a:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    dc5c:	687a      	ldr	r2, [r7, #4]
    dc5e:	6811      	ldr	r1, [r2, #0]
    dc60:	220f      	movs	r2, #15
    dc62:	18ba      	adds	r2, r7, r2
    dc64:	7812      	ldrb	r2, [r2, #0]
    dc66:	3208      	adds	r2, #8
    dc68:	0152      	lsls	r2, r2, #5
    dc6a:	188a      	adds	r2, r1, r2
    dc6c:	3205      	adds	r2, #5
    dc6e:	2140      	movs	r1, #64	; 0x40
    dc70:	7011      	strb	r1, [r2, #0]
			break;
    dc72:	e0d7      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    dc74:	231c      	movs	r3, #28
    dc76:	e132      	b.n	dede <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    dc78:	220e      	movs	r2, #14
    dc7a:	18ba      	adds	r2, r7, r2
    dc7c:	7812      	ldrb	r2, [r2, #0]
    dc7e:	2a00      	cmp	r2, #0
    dc80:	d030      	beq.n	dce4 <usb_device_endpoint_set_config+0x324>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    dc82:	687a      	ldr	r2, [r7, #4]
    dc84:	6812      	ldr	r2, [r2, #0]
    dc86:	210f      	movs	r1, #15
    dc88:	1879      	adds	r1, r7, r1
    dc8a:	7809      	ldrb	r1, [r1, #0]
    dc8c:	3108      	adds	r1, #8
    dc8e:	0149      	lsls	r1, r1, #5
    dc90:	5c8a      	ldrb	r2, [r1, r2]
    dc92:	b2d2      	uxtb	r2, r2
    dc94:	0011      	movs	r1, r2
    dc96:	2270      	movs	r2, #112	; 0x70
    dc98:	400a      	ands	r2, r1
    dc9a:	d121      	bne.n	dce0 <usb_device_endpoint_set_config+0x320>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    dc9c:	687a      	ldr	r2, [r7, #4]
    dc9e:	6811      	ldr	r1, [r2, #0]
    dca0:	220f      	movs	r2, #15
    dca2:	18ba      	adds	r2, r7, r2
    dca4:	7810      	ldrb	r0, [r2, #0]
    dca6:	687a      	ldr	r2, [r7, #4]
    dca8:	6812      	ldr	r2, [r2, #0]
    dcaa:	240f      	movs	r4, #15
    dcac:	193c      	adds	r4, r7, r4
    dcae:	7824      	ldrb	r4, [r4, #0]
    dcb0:	3408      	adds	r4, #8
    dcb2:	0164      	lsls	r4, r4, #5
    dcb4:	5ca2      	ldrb	r2, [r4, r2]
    dcb6:	b2d2      	uxtb	r2, r2
    dcb8:	2430      	movs	r4, #48	; 0x30
    dcba:	4322      	orrs	r2, r4
    dcbc:	b2d4      	uxtb	r4, r2
    dcbe:	0002      	movs	r2, r0
    dcc0:	3208      	adds	r2, #8
    dcc2:	0152      	lsls	r2, r2, #5
    dcc4:	1c20      	adds	r0, r4, #0
    dcc6:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    dcc8:	687a      	ldr	r2, [r7, #4]
    dcca:	6811      	ldr	r1, [r2, #0]
    dccc:	220f      	movs	r2, #15
    dcce:	18ba      	adds	r2, r7, r2
    dcd0:	7812      	ldrb	r2, [r2, #0]
    dcd2:	3208      	adds	r2, #8
    dcd4:	0152      	lsls	r2, r2, #5
    dcd6:	188a      	adds	r2, r1, r2
    dcd8:	3204      	adds	r2, #4
    dcda:	2180      	movs	r1, #128	; 0x80
    dcdc:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    dcde:	e0a1      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    dce0:	231c      	movs	r3, #28
    dce2:	e0fc      	b.n	dede <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    dce4:	687a      	ldr	r2, [r7, #4]
    dce6:	6812      	ldr	r2, [r2, #0]
    dce8:	210f      	movs	r1, #15
    dcea:	1879      	adds	r1, r7, r1
    dcec:	7809      	ldrb	r1, [r1, #0]
    dcee:	3108      	adds	r1, #8
    dcf0:	0149      	lsls	r1, r1, #5
    dcf2:	5c8a      	ldrb	r2, [r1, r2]
    dcf4:	b2d2      	uxtb	r2, r2
    dcf6:	0011      	movs	r1, r2
    dcf8:	2207      	movs	r2, #7
    dcfa:	400a      	ands	r2, r1
    dcfc:	d121      	bne.n	dd42 <usb_device_endpoint_set_config+0x382>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    dcfe:	687a      	ldr	r2, [r7, #4]
    dd00:	6811      	ldr	r1, [r2, #0]
    dd02:	220f      	movs	r2, #15
    dd04:	18ba      	adds	r2, r7, r2
    dd06:	7810      	ldrb	r0, [r2, #0]
    dd08:	687a      	ldr	r2, [r7, #4]
    dd0a:	6812      	ldr	r2, [r2, #0]
    dd0c:	240f      	movs	r4, #15
    dd0e:	193c      	adds	r4, r7, r4
    dd10:	7824      	ldrb	r4, [r4, #0]
    dd12:	3408      	adds	r4, #8
    dd14:	0164      	lsls	r4, r4, #5
    dd16:	5ca2      	ldrb	r2, [r4, r2]
    dd18:	b2d2      	uxtb	r2, r2
    dd1a:	2403      	movs	r4, #3
    dd1c:	4322      	orrs	r2, r4
    dd1e:	b2d4      	uxtb	r4, r2
    dd20:	0002      	movs	r2, r0
    dd22:	3208      	adds	r2, #8
    dd24:	0152      	lsls	r2, r2, #5
    dd26:	1c20      	adds	r0, r4, #0
    dd28:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    dd2a:	687a      	ldr	r2, [r7, #4]
    dd2c:	6811      	ldr	r1, [r2, #0]
    dd2e:	220f      	movs	r2, #15
    dd30:	18ba      	adds	r2, r7, r2
    dd32:	7812      	ldrb	r2, [r2, #0]
    dd34:	3208      	adds	r2, #8
    dd36:	0152      	lsls	r2, r2, #5
    dd38:	188a      	adds	r2, r1, r2
    dd3a:	3205      	adds	r2, #5
    dd3c:	2140      	movs	r1, #64	; 0x40
    dd3e:	7011      	strb	r1, [r2, #0]
			break;
    dd40:	e070      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    dd42:	231c      	movs	r3, #28
    dd44:	e0cb      	b.n	dede <usb_device_endpoint_set_config+0x51e>
    dd46:	46c0      	nop			; (mov r8, r8)
    dd48:	00004494 	.word	0x00004494
    dd4c:	00000020 	.word	0x00000020
    dd50:	8fffffff 	.word	0x8fffffff

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    dd54:	220e      	movs	r2, #14
    dd56:	18ba      	adds	r2, r7, r2
    dd58:	7812      	ldrb	r2, [r2, #0]
    dd5a:	2a00      	cmp	r2, #0
    dd5c:	d030      	beq.n	ddc0 <usb_device_endpoint_set_config+0x400>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    dd5e:	687a      	ldr	r2, [r7, #4]
    dd60:	6812      	ldr	r2, [r2, #0]
    dd62:	210f      	movs	r1, #15
    dd64:	1879      	adds	r1, r7, r1
    dd66:	7809      	ldrb	r1, [r1, #0]
    dd68:	3108      	adds	r1, #8
    dd6a:	0149      	lsls	r1, r1, #5
    dd6c:	5c8a      	ldrb	r2, [r1, r2]
    dd6e:	b2d2      	uxtb	r2, r2
    dd70:	0011      	movs	r1, r2
    dd72:	2270      	movs	r2, #112	; 0x70
    dd74:	400a      	ands	r2, r1
    dd76:	d121      	bne.n	ddbc <usb_device_endpoint_set_config+0x3fc>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    dd78:	687a      	ldr	r2, [r7, #4]
    dd7a:	6811      	ldr	r1, [r2, #0]
    dd7c:	220f      	movs	r2, #15
    dd7e:	18ba      	adds	r2, r7, r2
    dd80:	7810      	ldrb	r0, [r2, #0]
    dd82:	687a      	ldr	r2, [r7, #4]
    dd84:	6812      	ldr	r2, [r2, #0]
    dd86:	240f      	movs	r4, #15
    dd88:	193c      	adds	r4, r7, r4
    dd8a:	7824      	ldrb	r4, [r4, #0]
    dd8c:	3408      	adds	r4, #8
    dd8e:	0164      	lsls	r4, r4, #5
    dd90:	5ca2      	ldrb	r2, [r4, r2]
    dd92:	b2d2      	uxtb	r2, r2
    dd94:	2440      	movs	r4, #64	; 0x40
    dd96:	4322      	orrs	r2, r4
    dd98:	b2d4      	uxtb	r4, r2
    dd9a:	0002      	movs	r2, r0
    dd9c:	3208      	adds	r2, #8
    dd9e:	0152      	lsls	r2, r2, #5
    dda0:	1c20      	adds	r0, r4, #0
    dda2:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    dda4:	687a      	ldr	r2, [r7, #4]
    dda6:	6811      	ldr	r1, [r2, #0]
    dda8:	220f      	movs	r2, #15
    ddaa:	18ba      	adds	r2, r7, r2
    ddac:	7812      	ldrb	r2, [r2, #0]
    ddae:	3208      	adds	r2, #8
    ddb0:	0152      	lsls	r2, r2, #5
    ddb2:	188a      	adds	r2, r1, r2
    ddb4:	3204      	adds	r2, #4
    ddb6:	2180      	movs	r1, #128	; 0x80
    ddb8:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    ddba:	e033      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    ddbc:	231c      	movs	r3, #28
    ddbe:	e08e      	b.n	dede <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    ddc0:	687a      	ldr	r2, [r7, #4]
    ddc2:	6812      	ldr	r2, [r2, #0]
    ddc4:	210f      	movs	r1, #15
    ddc6:	1879      	adds	r1, r7, r1
    ddc8:	7809      	ldrb	r1, [r1, #0]
    ddca:	3108      	adds	r1, #8
    ddcc:	0149      	lsls	r1, r1, #5
    ddce:	5c8a      	ldrb	r2, [r1, r2]
    ddd0:	b2d2      	uxtb	r2, r2
    ddd2:	0011      	movs	r1, r2
    ddd4:	2207      	movs	r2, #7
    ddd6:	400a      	ands	r2, r1
    ddd8:	d121      	bne.n	de1e <usb_device_endpoint_set_config+0x45e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    ddda:	687a      	ldr	r2, [r7, #4]
    dddc:	6811      	ldr	r1, [r2, #0]
    ddde:	220f      	movs	r2, #15
    dde0:	18ba      	adds	r2, r7, r2
    dde2:	7810      	ldrb	r0, [r2, #0]
    dde4:	687a      	ldr	r2, [r7, #4]
    dde6:	6812      	ldr	r2, [r2, #0]
    dde8:	240f      	movs	r4, #15
    ddea:	193c      	adds	r4, r7, r4
    ddec:	7824      	ldrb	r4, [r4, #0]
    ddee:	3408      	adds	r4, #8
    ddf0:	0164      	lsls	r4, r4, #5
    ddf2:	5ca2      	ldrb	r2, [r4, r2]
    ddf4:	b2d2      	uxtb	r2, r2
    ddf6:	2404      	movs	r4, #4
    ddf8:	4322      	orrs	r2, r4
    ddfa:	b2d4      	uxtb	r4, r2
    ddfc:	0002      	movs	r2, r0
    ddfe:	3208      	adds	r2, #8
    de00:	0152      	lsls	r2, r2, #5
    de02:	1c20      	adds	r0, r4, #0
    de04:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    de06:	687a      	ldr	r2, [r7, #4]
    de08:	6811      	ldr	r1, [r2, #0]
    de0a:	220f      	movs	r2, #15
    de0c:	18ba      	adds	r2, r7, r2
    de0e:	7812      	ldrb	r2, [r2, #0]
    de10:	3208      	adds	r2, #8
    de12:	0152      	lsls	r2, r2, #5
    de14:	188a      	adds	r2, r1, r2
    de16:	3205      	adds	r2, #5
    de18:	2140      	movs	r1, #64	; 0x40
    de1a:	7011      	strb	r1, [r2, #0]
			break;
    de1c:	e002      	b.n	de24 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    de1e:	231c      	movs	r3, #28
    de20:	e05d      	b.n	dede <usb_device_endpoint_set_config+0x51e>

		default:
			break;
    de22:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    de24:	220f      	movs	r2, #15
    de26:	18ba      	adds	r2, r7, r2
    de28:	7814      	ldrb	r4, [r2, #0]
    de2a:	220e      	movs	r2, #14
    de2c:	18ba      	adds	r2, r7, r2
    de2e:	7812      	ldrb	r2, [r2, #0]
    de30:	6839      	ldr	r1, [r7, #0]
    de32:	7849      	ldrb	r1, [r1, #1]
    de34:	1c08      	adds	r0, r1, #0
    de36:	2107      	movs	r1, #7
    de38:	4001      	ands	r1, r0
    de3a:	b2c8      	uxtb	r0, r1
    de3c:	492a      	ldr	r1, [pc, #168]	; (dee8 <usb_device_endpoint_set_config+0x528>)
    de3e:	5859      	ldr	r1, [r3, r1]
    de40:	0064      	lsls	r4, r4, #1
    de42:	18a2      	adds	r2, r4, r2
    de44:	0112      	lsls	r2, r2, #4
    de46:	188a      	adds	r2, r1, r2
    de48:	6851      	ldr	r1, [r2, #4]
    de4a:	2407      	movs	r4, #7
    de4c:	4020      	ands	r0, r4
    de4e:	0700      	lsls	r0, r0, #28
    de50:	4c26      	ldr	r4, [pc, #152]	; (deec <usb_device_endpoint_set_config+0x52c>)
    de52:	4021      	ands	r1, r4
    de54:	4301      	orrs	r1, r0
    de56:	6051      	str	r1, [r2, #4]

	if (true == ep_config->auto_zlp) {
    de58:	683a      	ldr	r2, [r7, #0]
    de5a:	7892      	ldrb	r2, [r2, #2]
    de5c:	2a00      	cmp	r2, #0
    de5e:	d01f      	beq.n	dea0 <usb_device_endpoint_set_config+0x4e0>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    de60:	220f      	movs	r2, #15
    de62:	18ba      	adds	r2, r7, r2
    de64:	7814      	ldrb	r4, [r2, #0]
    de66:	220e      	movs	r2, #14
    de68:	18ba      	adds	r2, r7, r2
    de6a:	7810      	ldrb	r0, [r2, #0]
    de6c:	220f      	movs	r2, #15
    de6e:	18ba      	adds	r2, r7, r2
    de70:	7815      	ldrb	r5, [r2, #0]
    de72:	220e      	movs	r2, #14
    de74:	18ba      	adds	r2, r7, r2
    de76:	7812      	ldrb	r2, [r2, #0]
    de78:	491b      	ldr	r1, [pc, #108]	; (dee8 <usb_device_endpoint_set_config+0x528>)
    de7a:	5859      	ldr	r1, [r3, r1]
    de7c:	006d      	lsls	r5, r5, #1
    de7e:	18aa      	adds	r2, r5, r2
    de80:	0112      	lsls	r2, r2, #4
    de82:	188a      	adds	r2, r1, r2
    de84:	3204      	adds	r2, #4
    de86:	6812      	ldr	r2, [r2, #0]
    de88:	2180      	movs	r1, #128	; 0x80
    de8a:	0609      	lsls	r1, r1, #24
    de8c:	430a      	orrs	r2, r1
    de8e:	4916      	ldr	r1, [pc, #88]	; (dee8 <usb_device_endpoint_set_config+0x528>)
    de90:	5859      	ldr	r1, [r3, r1]
    de92:	0063      	lsls	r3, r4, #1
    de94:	181b      	adds	r3, r3, r0
    de96:	011b      	lsls	r3, r3, #4
    de98:	18cb      	adds	r3, r1, r3
    de9a:	3304      	adds	r3, #4
    de9c:	601a      	str	r2, [r3, #0]
    de9e:	e01d      	b.n	dedc <usb_device_endpoint_set_config+0x51c>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    dea0:	220f      	movs	r2, #15
    dea2:	18ba      	adds	r2, r7, r2
    dea4:	7814      	ldrb	r4, [r2, #0]
    dea6:	220e      	movs	r2, #14
    dea8:	18ba      	adds	r2, r7, r2
    deaa:	7810      	ldrb	r0, [r2, #0]
    deac:	220f      	movs	r2, #15
    deae:	18ba      	adds	r2, r7, r2
    deb0:	7815      	ldrb	r5, [r2, #0]
    deb2:	220e      	movs	r2, #14
    deb4:	18ba      	adds	r2, r7, r2
    deb6:	7812      	ldrb	r2, [r2, #0]
    deb8:	490b      	ldr	r1, [pc, #44]	; (dee8 <usb_device_endpoint_set_config+0x528>)
    deba:	5859      	ldr	r1, [r3, r1]
    debc:	006d      	lsls	r5, r5, #1
    debe:	18aa      	adds	r2, r5, r2
    dec0:	0112      	lsls	r2, r2, #4
    dec2:	188a      	adds	r2, r1, r2
    dec4:	3204      	adds	r2, #4
    dec6:	6812      	ldr	r2, [r2, #0]
    dec8:	0052      	lsls	r2, r2, #1
    deca:	0852      	lsrs	r2, r2, #1
    decc:	4906      	ldr	r1, [pc, #24]	; (dee8 <usb_device_endpoint_set_config+0x528>)
    dece:	5859      	ldr	r1, [r3, r1]
    ded0:	0063      	lsls	r3, r4, #1
    ded2:	181b      	adds	r3, r3, r0
    ded4:	011b      	lsls	r3, r3, #4
    ded6:	18cb      	adds	r3, r1, r3
    ded8:	3304      	adds	r3, #4
    deda:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    dedc:	2300      	movs	r3, #0
}
    dede:	0018      	movs	r0, r3
    dee0:	46bd      	mov	sp, r7
    dee2:	b004      	add	sp, #16
    dee4:	bdb0      	pop	{r4, r5, r7, pc}
    dee6:	46c0      	nop			; (mov r8, r8)
    dee8:	00000020 	.word	0x00000020
    deec:	8fffffff 	.word	0x8fffffff

0000def0 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    def0:	b580      	push	{r7, lr}
    def2:	b084      	sub	sp, #16
    def4:	af00      	add	r7, sp, #0
    def6:	6078      	str	r0, [r7, #4]
    def8:	000a      	movs	r2, r1
    defa:	1cfb      	adds	r3, r7, #3
    defc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    defe:	230f      	movs	r3, #15
    df00:	18fb      	adds	r3, r7, r3
    df02:	1cfa      	adds	r2, r7, #3
    df04:	7812      	ldrb	r2, [r2, #0]
    df06:	210f      	movs	r1, #15
    df08:	400a      	ands	r2, r1
    df0a:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    df0c:	1cfb      	adds	r3, r7, #3
    df0e:	781b      	ldrb	r3, [r3, #0]
    df10:	b25b      	sxtb	r3, r3
    df12:	2b00      	cmp	r3, #0
    df14:	da16      	bge.n	df44 <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    df16:	687b      	ldr	r3, [r7, #4]
    df18:	681a      	ldr	r2, [r3, #0]
    df1a:	230f      	movs	r3, #15
    df1c:	18fb      	adds	r3, r7, r3
    df1e:	781b      	ldrb	r3, [r3, #0]
    df20:	3308      	adds	r3, #8
    df22:	015b      	lsls	r3, r3, #5
    df24:	18d3      	adds	r3, r2, r3
    df26:	3304      	adds	r3, #4
    df28:	2280      	movs	r2, #128	; 0x80
    df2a:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	681a      	ldr	r2, [r3, #0]
    df30:	230f      	movs	r3, #15
    df32:	18fb      	adds	r3, r7, r3
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	3308      	adds	r3, #8
    df38:	015b      	lsls	r3, r3, #5
    df3a:	18d3      	adds	r3, r2, r3
    df3c:	3307      	adds	r3, #7
    df3e:	2202      	movs	r2, #2
    df40:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    df42:	e015      	b.n	df70 <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    df44:	687b      	ldr	r3, [r7, #4]
    df46:	681a      	ldr	r2, [r3, #0]
    df48:	230f      	movs	r3, #15
    df4a:	18fb      	adds	r3, r7, r3
    df4c:	781b      	ldrb	r3, [r3, #0]
    df4e:	3308      	adds	r3, #8
    df50:	015b      	lsls	r3, r3, #5
    df52:	18d3      	adds	r3, r2, r3
    df54:	3305      	adds	r3, #5
    df56:	2240      	movs	r2, #64	; 0x40
    df58:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    df5a:	687b      	ldr	r3, [r7, #4]
    df5c:	681a      	ldr	r2, [r3, #0]
    df5e:	230f      	movs	r3, #15
    df60:	18fb      	adds	r3, r7, r3
    df62:	781b      	ldrb	r3, [r3, #0]
    df64:	3308      	adds	r3, #8
    df66:	015b      	lsls	r3, r3, #5
    df68:	18d3      	adds	r3, r2, r3
    df6a:	3307      	adds	r3, #7
    df6c:	2201      	movs	r2, #1
    df6e:	701a      	strb	r2, [r3, #0]
}
    df70:	46c0      	nop			; (mov r8, r8)
    df72:	46bd      	mov	sp, r7
    df74:	b004      	add	sp, #16
    df76:	bd80      	pop	{r7, pc}

0000df78 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    df78:	b580      	push	{r7, lr}
    df7a:	b084      	sub	sp, #16
    df7c:	af00      	add	r7, sp, #0
    df7e:	6078      	str	r0, [r7, #4]
    df80:	000a      	movs	r2, r1
    df82:	1cfb      	adds	r3, r7, #3
    df84:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    df86:	230f      	movs	r3, #15
    df88:	18fb      	adds	r3, r7, r3
    df8a:	1cfa      	adds	r2, r7, #3
    df8c:	7812      	ldrb	r2, [r2, #0]
    df8e:	210f      	movs	r1, #15
    df90:	400a      	ands	r2, r1
    df92:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    df94:	1cfb      	adds	r3, r7, #3
    df96:	781b      	ldrb	r3, [r3, #0]
    df98:	b25b      	sxtb	r3, r3
    df9a:	2b00      	cmp	r3, #0
    df9c:	da11      	bge.n	dfc2 <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    df9e:	687b      	ldr	r3, [r7, #4]
    dfa0:	681a      	ldr	r2, [r3, #0]
    dfa2:	230f      	movs	r3, #15
    dfa4:	18fb      	adds	r3, r7, r3
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	3308      	adds	r3, #8
    dfaa:	015b      	lsls	r3, r3, #5
    dfac:	18d3      	adds	r3, r2, r3
    dfae:	3306      	adds	r3, #6
    dfb0:	781b      	ldrb	r3, [r3, #0]
    dfb2:	b2db      	uxtb	r3, r3
    dfb4:	001a      	movs	r2, r3
    dfb6:	2320      	movs	r3, #32
    dfb8:	4013      	ands	r3, r2
    dfba:	1e5a      	subs	r2, r3, #1
    dfbc:	4193      	sbcs	r3, r2
    dfbe:	b2db      	uxtb	r3, r3
    dfc0:	e010      	b.n	dfe4 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	681a      	ldr	r2, [r3, #0]
    dfc6:	230f      	movs	r3, #15
    dfc8:	18fb      	adds	r3, r7, r3
    dfca:	781b      	ldrb	r3, [r3, #0]
    dfcc:	3308      	adds	r3, #8
    dfce:	015b      	lsls	r3, r3, #5
    dfd0:	18d3      	adds	r3, r2, r3
    dfd2:	3306      	adds	r3, #6
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	b2db      	uxtb	r3, r3
    dfd8:	001a      	movs	r2, r3
    dfda:	2310      	movs	r3, #16
    dfdc:	4013      	ands	r3, r2
    dfde:	1e5a      	subs	r2, r3, #1
    dfe0:	4193      	sbcs	r3, r2
    dfe2:	b2db      	uxtb	r3, r3
	}
}
    dfe4:	0018      	movs	r0, r3
    dfe6:	46bd      	mov	sp, r7
    dfe8:	b004      	add	sp, #16
    dfea:	bd80      	pop	{r7, pc}

0000dfec <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b084      	sub	sp, #16
    dff0:	af00      	add	r7, sp, #0
    dff2:	6078      	str	r0, [r7, #4]
    dff4:	000a      	movs	r2, r1
    dff6:	1cfb      	adds	r3, r7, #3
    dff8:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    dffa:	230f      	movs	r3, #15
    dffc:	18fb      	adds	r3, r7, r3
    dffe:	1cfa      	adds	r2, r7, #3
    e000:	7812      	ldrb	r2, [r2, #0]
    e002:	210f      	movs	r1, #15
    e004:	400a      	ands	r2, r1
    e006:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    e008:	1cfb      	adds	r3, r7, #3
    e00a:	781b      	ldrb	r3, [r3, #0]
    e00c:	b25b      	sxtb	r3, r3
    e00e:	2b00      	cmp	r3, #0
    e010:	da0b      	bge.n	e02a <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    e012:	687b      	ldr	r3, [r7, #4]
    e014:	681a      	ldr	r2, [r3, #0]
    e016:	230f      	movs	r3, #15
    e018:	18fb      	adds	r3, r7, r3
    e01a:	781b      	ldrb	r3, [r3, #0]
    e01c:	3308      	adds	r3, #8
    e01e:	015b      	lsls	r3, r3, #5
    e020:	18d3      	adds	r3, r2, r3
    e022:	3305      	adds	r3, #5
    e024:	2220      	movs	r2, #32
    e026:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    e028:	e00a      	b.n	e040 <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    e02a:	687b      	ldr	r3, [r7, #4]
    e02c:	681a      	ldr	r2, [r3, #0]
    e02e:	230f      	movs	r3, #15
    e030:	18fb      	adds	r3, r7, r3
    e032:	781b      	ldrb	r3, [r3, #0]
    e034:	3308      	adds	r3, #8
    e036:	015b      	lsls	r3, r3, #5
    e038:	18d3      	adds	r3, r2, r3
    e03a:	3305      	adds	r3, #5
    e03c:	2210      	movs	r2, #16
    e03e:	701a      	strb	r2, [r3, #0]
}
    e040:	46c0      	nop			; (mov r8, r8)
    e042:	46bd      	mov	sp, r7
    e044:	b004      	add	sp, #16
    e046:	bd80      	pop	{r7, pc}

0000e048 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    e048:	b580      	push	{r7, lr}
    e04a:	b084      	sub	sp, #16
    e04c:	af00      	add	r7, sp, #0
    e04e:	6078      	str	r0, [r7, #4]
    e050:	000a      	movs	r2, r1
    e052:	1cfb      	adds	r3, r7, #3
    e054:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    e056:	230f      	movs	r3, #15
    e058:	18fb      	adds	r3, r7, r3
    e05a:	1cfa      	adds	r2, r7, #3
    e05c:	7812      	ldrb	r2, [r2, #0]
    e05e:	210f      	movs	r1, #15
    e060:	400a      	ands	r2, r1
    e062:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    e064:	1cfb      	adds	r3, r7, #3
    e066:	781b      	ldrb	r3, [r3, #0]
    e068:	b25b      	sxtb	r3, r3
    e06a:	2b00      	cmp	r3, #0
    e06c:	da3f      	bge.n	e0ee <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    e06e:	687b      	ldr	r3, [r7, #4]
    e070:	681a      	ldr	r2, [r3, #0]
    e072:	230f      	movs	r3, #15
    e074:	18fb      	adds	r3, r7, r3
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	3308      	adds	r3, #8
    e07a:	015b      	lsls	r3, r3, #5
    e07c:	18d3      	adds	r3, r2, r3
    e07e:	3306      	adds	r3, #6
    e080:	781b      	ldrb	r3, [r3, #0]
    e082:	b2db      	uxtb	r3, r3
    e084:	001a      	movs	r2, r3
    e086:	2320      	movs	r3, #32
    e088:	4013      	ands	r3, r2
    e08a:	d06f      	beq.n	e16c <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    e08c:	687b      	ldr	r3, [r7, #4]
    e08e:	681a      	ldr	r2, [r3, #0]
    e090:	230f      	movs	r3, #15
    e092:	18fb      	adds	r3, r7, r3
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	3308      	adds	r3, #8
    e098:	015b      	lsls	r3, r3, #5
    e09a:	18d3      	adds	r3, r2, r3
    e09c:	3304      	adds	r3, #4
    e09e:	2220      	movs	r2, #32
    e0a0:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	681a      	ldr	r2, [r3, #0]
    e0a6:	230f      	movs	r3, #15
    e0a8:	18fb      	adds	r3, r7, r3
    e0aa:	781b      	ldrb	r3, [r3, #0]
    e0ac:	3308      	adds	r3, #8
    e0ae:	015b      	lsls	r3, r3, #5
    e0b0:	18d3      	adds	r3, r2, r3
    e0b2:	3307      	adds	r3, #7
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	b2db      	uxtb	r3, r3
    e0b8:	001a      	movs	r2, r3
    e0ba:	2340      	movs	r3, #64	; 0x40
    e0bc:	4013      	ands	r3, r2
    e0be:	d055      	beq.n	e16c <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	681a      	ldr	r2, [r3, #0]
    e0c4:	230f      	movs	r3, #15
    e0c6:	18fb      	adds	r3, r7, r3
    e0c8:	781b      	ldrb	r3, [r3, #0]
    e0ca:	3308      	adds	r3, #8
    e0cc:	015b      	lsls	r3, r3, #5
    e0ce:	18d3      	adds	r3, r2, r3
    e0d0:	3307      	adds	r3, #7
    e0d2:	2240      	movs	r2, #64	; 0x40
    e0d4:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    e0d6:	687b      	ldr	r3, [r7, #4]
    e0d8:	681a      	ldr	r2, [r3, #0]
    e0da:	230f      	movs	r3, #15
    e0dc:	18fb      	adds	r3, r7, r3
    e0de:	781b      	ldrb	r3, [r3, #0]
    e0e0:	3308      	adds	r3, #8
    e0e2:	015b      	lsls	r3, r3, #5
    e0e4:	18d3      	adds	r3, r2, r3
    e0e6:	3304      	adds	r3, #4
    e0e8:	2202      	movs	r2, #2
    e0ea:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    e0ec:	e03e      	b.n	e16c <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    e0ee:	687b      	ldr	r3, [r7, #4]
    e0f0:	681a      	ldr	r2, [r3, #0]
    e0f2:	230f      	movs	r3, #15
    e0f4:	18fb      	adds	r3, r7, r3
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	3308      	adds	r3, #8
    e0fa:	015b      	lsls	r3, r3, #5
    e0fc:	18d3      	adds	r3, r2, r3
    e0fe:	3306      	adds	r3, #6
    e100:	781b      	ldrb	r3, [r3, #0]
    e102:	b2db      	uxtb	r3, r3
    e104:	001a      	movs	r2, r3
    e106:	2310      	movs	r3, #16
    e108:	4013      	ands	r3, r2
    e10a:	d02f      	beq.n	e16c <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	681a      	ldr	r2, [r3, #0]
    e110:	230f      	movs	r3, #15
    e112:	18fb      	adds	r3, r7, r3
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	3308      	adds	r3, #8
    e118:	015b      	lsls	r3, r3, #5
    e11a:	18d3      	adds	r3, r2, r3
    e11c:	3304      	adds	r3, #4
    e11e:	2210      	movs	r2, #16
    e120:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    e122:	687b      	ldr	r3, [r7, #4]
    e124:	681a      	ldr	r2, [r3, #0]
    e126:	230f      	movs	r3, #15
    e128:	18fb      	adds	r3, r7, r3
    e12a:	781b      	ldrb	r3, [r3, #0]
    e12c:	3308      	adds	r3, #8
    e12e:	015b      	lsls	r3, r3, #5
    e130:	18d3      	adds	r3, r2, r3
    e132:	3307      	adds	r3, #7
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	b2db      	uxtb	r3, r3
    e138:	001a      	movs	r2, r3
    e13a:	2320      	movs	r3, #32
    e13c:	4013      	ands	r3, r2
    e13e:	d015      	beq.n	e16c <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	681a      	ldr	r2, [r3, #0]
    e144:	230f      	movs	r3, #15
    e146:	18fb      	adds	r3, r7, r3
    e148:	781b      	ldrb	r3, [r3, #0]
    e14a:	3308      	adds	r3, #8
    e14c:	015b      	lsls	r3, r3, #5
    e14e:	18d3      	adds	r3, r2, r3
    e150:	3307      	adds	r3, #7
    e152:	2220      	movs	r2, #32
    e154:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    e156:	687b      	ldr	r3, [r7, #4]
    e158:	681a      	ldr	r2, [r3, #0]
    e15a:	230f      	movs	r3, #15
    e15c:	18fb      	adds	r3, r7, r3
    e15e:	781b      	ldrb	r3, [r3, #0]
    e160:	3308      	adds	r3, #8
    e162:	015b      	lsls	r3, r3, #5
    e164:	18d3      	adds	r3, r2, r3
    e166:	3304      	adds	r3, #4
    e168:	2201      	movs	r2, #1
    e16a:	701a      	strb	r2, [r3, #0]
}
    e16c:	46c0      	nop			; (mov r8, r8)
    e16e:	46bd      	mov	sp, r7
    e170:	b004      	add	sp, #16
    e172:	bd80      	pop	{r7, pc}

0000e174 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    e174:	b580      	push	{r7, lr}
    e176:	b086      	sub	sp, #24
    e178:	af00      	add	r7, sp, #0
    e17a:	60f8      	str	r0, [r7, #12]
    e17c:	607a      	str	r2, [r7, #4]
    e17e:	603b      	str	r3, [r7, #0]
    e180:	230b      	movs	r3, #11
    e182:	18fb      	adds	r3, r7, r3
    e184:	1c0a      	adds	r2, r1, #0
    e186:	701a      	strb	r2, [r3, #0]
    e188:	4b28      	ldr	r3, [pc, #160]	; (e22c <usb_device_endpoint_write_buffer_job+0xb8>)
    e18a:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    e18c:	68fa      	ldr	r2, [r7, #12]
    e18e:	6812      	ldr	r2, [r2, #0]
    e190:	210b      	movs	r1, #11
    e192:	1879      	adds	r1, r7, r1
    e194:	7809      	ldrb	r1, [r1, #0]
    e196:	3108      	adds	r1, #8
    e198:	0149      	lsls	r1, r1, #5
    e19a:	5c8a      	ldrb	r2, [r1, r2]
    e19c:	0652      	lsls	r2, r2, #25
    e19e:	0f52      	lsrs	r2, r2, #29
    e1a0:	b2d1      	uxtb	r1, r2
    e1a2:	2217      	movs	r2, #23
    e1a4:	18ba      	adds	r2, r7, r2
    e1a6:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    e1a8:	2217      	movs	r2, #23
    e1aa:	18ba      	adds	r2, r7, r2
    e1ac:	7812      	ldrb	r2, [r2, #0]
    e1ae:	2a00      	cmp	r2, #0
    e1b0:	d101      	bne.n	e1b6 <usb_device_endpoint_write_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    e1b2:	231c      	movs	r3, #28
    e1b4:	e035      	b.n	e222 <usb_device_endpoint_write_buffer_job+0xae>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    e1b6:	220b      	movs	r2, #11
    e1b8:	18ba      	adds	r2, r7, r2
    e1ba:	7812      	ldrb	r2, [r2, #0]
    e1bc:	6879      	ldr	r1, [r7, #4]
    e1be:	481c      	ldr	r0, [pc, #112]	; (e230 <usb_device_endpoint_write_buffer_job+0xbc>)
    e1c0:	5818      	ldr	r0, [r3, r0]
    e1c2:	0152      	lsls	r2, r2, #5
    e1c4:	1882      	adds	r2, r0, r2
    e1c6:	3210      	adds	r2, #16
    e1c8:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    e1ca:	220b      	movs	r2, #11
    e1cc:	18ba      	adds	r2, r7, r2
    e1ce:	7812      	ldrb	r2, [r2, #0]
    e1d0:	4917      	ldr	r1, [pc, #92]	; (e230 <usb_device_endpoint_write_buffer_job+0xbc>)
    e1d2:	5859      	ldr	r1, [r3, r1]
    e1d4:	0152      	lsls	r2, r2, #5
    e1d6:	188a      	adds	r2, r1, r2
    e1d8:	3210      	adds	r2, #16
    e1da:	6851      	ldr	r1, [r2, #4]
    e1dc:	4815      	ldr	r0, [pc, #84]	; (e234 <usb_device_endpoint_write_buffer_job+0xc0>)
    e1de:	4001      	ands	r1, r0
    e1e0:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    e1e2:	220b      	movs	r2, #11
    e1e4:	18ba      	adds	r2, r7, r2
    e1e6:	7810      	ldrb	r0, [r2, #0]
    e1e8:	683a      	ldr	r2, [r7, #0]
    e1ea:	b292      	uxth	r2, r2
    e1ec:	0492      	lsls	r2, r2, #18
    e1ee:	0c92      	lsrs	r2, r2, #18
    e1f0:	b291      	uxth	r1, r2
    e1f2:	4a0f      	ldr	r2, [pc, #60]	; (e230 <usb_device_endpoint_write_buffer_job+0xbc>)
    e1f4:	589a      	ldr	r2, [r3, r2]
    e1f6:	0143      	lsls	r3, r0, #5
    e1f8:	18d3      	adds	r3, r2, r3
    e1fa:	3310      	adds	r3, #16
    e1fc:	685a      	ldr	r2, [r3, #4]
    e1fe:	0489      	lsls	r1, r1, #18
    e200:	0c89      	lsrs	r1, r1, #18
    e202:	0b92      	lsrs	r2, r2, #14
    e204:	0392      	lsls	r2, r2, #14
    e206:	430a      	orrs	r2, r1
    e208:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    e20a:	68fb      	ldr	r3, [r7, #12]
    e20c:	681a      	ldr	r2, [r3, #0]
    e20e:	230b      	movs	r3, #11
    e210:	18fb      	adds	r3, r7, r3
    e212:	781b      	ldrb	r3, [r3, #0]
    e214:	3308      	adds	r3, #8
    e216:	015b      	lsls	r3, r3, #5
    e218:	18d3      	adds	r3, r2, r3
    e21a:	3305      	adds	r3, #5
    e21c:	2280      	movs	r2, #128	; 0x80
    e21e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    e220:	2300      	movs	r3, #0
}
    e222:	0018      	movs	r0, r3
    e224:	46bd      	mov	sp, r7
    e226:	b006      	add	sp, #24
    e228:	bd80      	pop	{r7, pc}
    e22a:	46c0      	nop			; (mov r8, r8)
    e22c:	00003cd6 	.word	0x00003cd6
    e230:	00000020 	.word	0x00000020
    e234:	f0003fff 	.word	0xf0003fff

0000e238 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    e238:	b590      	push	{r4, r7, lr}
    e23a:	b087      	sub	sp, #28
    e23c:	af00      	add	r7, sp, #0
    e23e:	60f8      	str	r0, [r7, #12]
    e240:	607a      	str	r2, [r7, #4]
    e242:	603b      	str	r3, [r7, #0]
    e244:	230b      	movs	r3, #11
    e246:	18fb      	adds	r3, r7, r3
    e248:	1c0a      	adds	r2, r1, #0
    e24a:	701a      	strb	r2, [r3, #0]
    e24c:	4b26      	ldr	r3, [pc, #152]	; (e2e8 <usb_device_endpoint_read_buffer_job+0xb0>)
    e24e:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    e250:	68fa      	ldr	r2, [r7, #12]
    e252:	6812      	ldr	r2, [r2, #0]
    e254:	210b      	movs	r1, #11
    e256:	1879      	adds	r1, r7, r1
    e258:	7809      	ldrb	r1, [r1, #0]
    e25a:	3108      	adds	r1, #8
    e25c:	0149      	lsls	r1, r1, #5
    e25e:	5c8a      	ldrb	r2, [r1, r2]
    e260:	0752      	lsls	r2, r2, #29
    e262:	0f52      	lsrs	r2, r2, #29
    e264:	b2d1      	uxtb	r1, r2
    e266:	2217      	movs	r2, #23
    e268:	18ba      	adds	r2, r7, r2
    e26a:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    e26c:	2217      	movs	r2, #23
    e26e:	18ba      	adds	r2, r7, r2
    e270:	7812      	ldrb	r2, [r2, #0]
    e272:	2a00      	cmp	r2, #0
    e274:	d101      	bne.n	e27a <usb_device_endpoint_read_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    e276:	231c      	movs	r3, #28
    e278:	e032      	b.n	e2e0 <usb_device_endpoint_read_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    e27a:	220b      	movs	r2, #11
    e27c:	18ba      	adds	r2, r7, r2
    e27e:	7811      	ldrb	r1, [r2, #0]
    e280:	6878      	ldr	r0, [r7, #4]
    e282:	4a1a      	ldr	r2, [pc, #104]	; (e2ec <usb_device_endpoint_read_buffer_job+0xb4>)
    e284:	589a      	ldr	r2, [r3, r2]
    e286:	0149      	lsls	r1, r1, #5
    e288:	5088      	str	r0, [r1, r2]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    e28a:	220b      	movs	r2, #11
    e28c:	18ba      	adds	r2, r7, r2
    e28e:	7812      	ldrb	r2, [r2, #0]
    e290:	6839      	ldr	r1, [r7, #0]
    e292:	b289      	uxth	r1, r1
    e294:	0489      	lsls	r1, r1, #18
    e296:	0c89      	lsrs	r1, r1, #18
    e298:	b288      	uxth	r0, r1
    e29a:	4914      	ldr	r1, [pc, #80]	; (e2ec <usb_device_endpoint_read_buffer_job+0xb4>)
    e29c:	5859      	ldr	r1, [r3, r1]
    e29e:	0152      	lsls	r2, r2, #5
    e2a0:	188a      	adds	r2, r1, r2
    e2a2:	6851      	ldr	r1, [r2, #4]
    e2a4:	0480      	lsls	r0, r0, #18
    e2a6:	0c80      	lsrs	r0, r0, #18
    e2a8:	0380      	lsls	r0, r0, #14
    e2aa:	4c11      	ldr	r4, [pc, #68]	; (e2f0 <usb_device_endpoint_read_buffer_job+0xb8>)
    e2ac:	4021      	ands	r1, r4
    e2ae:	4301      	orrs	r1, r0
    e2b0:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    e2b2:	220b      	movs	r2, #11
    e2b4:	18ba      	adds	r2, r7, r2
    e2b6:	7811      	ldrb	r1, [r2, #0]
    e2b8:	4a0c      	ldr	r2, [pc, #48]	; (e2ec <usb_device_endpoint_read_buffer_job+0xb4>)
    e2ba:	589a      	ldr	r2, [r3, r2]
    e2bc:	014b      	lsls	r3, r1, #5
    e2be:	18d3      	adds	r3, r2, r3
    e2c0:	685a      	ldr	r2, [r3, #4]
    e2c2:	0b92      	lsrs	r2, r2, #14
    e2c4:	0392      	lsls	r2, r2, #14
    e2c6:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    e2c8:	68fb      	ldr	r3, [r7, #12]
    e2ca:	681a      	ldr	r2, [r3, #0]
    e2cc:	230b      	movs	r3, #11
    e2ce:	18fb      	adds	r3, r7, r3
    e2d0:	781b      	ldrb	r3, [r3, #0]
    e2d2:	3308      	adds	r3, #8
    e2d4:	015b      	lsls	r3, r3, #5
    e2d6:	18d3      	adds	r3, r2, r3
    e2d8:	3304      	adds	r3, #4
    e2da:	2240      	movs	r2, #64	; 0x40
    e2dc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    e2de:	2300      	movs	r3, #0
}
    e2e0:	0018      	movs	r0, r3
    e2e2:	46bd      	mov	sp, r7
    e2e4:	b007      	add	sp, #28
    e2e6:	bd90      	pop	{r4, r7, pc}
    e2e8:	00003c12 	.word	0x00003c12
    e2ec:	00000020 	.word	0x00000020
    e2f0:	f0003fff 	.word	0xf0003fff

0000e2f4 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    e2f4:	b580      	push	{r7, lr}
    e2f6:	b082      	sub	sp, #8
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
    e2fc:	6039      	str	r1, [r7, #0]
    e2fe:	4b10      	ldr	r3, [pc, #64]	; (e340 <usb_device_endpoint_setup_buffer_job+0x4c>)
    e300:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    e302:	6839      	ldr	r1, [r7, #0]
    e304:	4a0f      	ldr	r2, [pc, #60]	; (e344 <usb_device_endpoint_setup_buffer_job+0x50>)
    e306:	589a      	ldr	r2, [r3, r2]
    e308:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    e30a:	4a0e      	ldr	r2, [pc, #56]	; (e344 <usb_device_endpoint_setup_buffer_job+0x50>)
    e30c:	589a      	ldr	r2, [r3, r2]
    e30e:	6851      	ldr	r1, [r2, #4]
    e310:	480d      	ldr	r0, [pc, #52]	; (e348 <usb_device_endpoint_setup_buffer_job+0x54>)
    e312:	4001      	ands	r1, r0
    e314:	2080      	movs	r0, #128	; 0x80
    e316:	0280      	lsls	r0, r0, #10
    e318:	4301      	orrs	r1, r0
    e31a:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    e31c:	4a09      	ldr	r2, [pc, #36]	; (e344 <usb_device_endpoint_setup_buffer_job+0x50>)
    e31e:	589b      	ldr	r3, [r3, r2]
    e320:	685a      	ldr	r2, [r3, #4]
    e322:	0b92      	lsrs	r2, r2, #14
    e324:	0392      	lsls	r2, r2, #14
    e326:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    e328:	687b      	ldr	r3, [r7, #4]
    e32a:	681a      	ldr	r2, [r3, #0]
    e32c:	2382      	movs	r3, #130	; 0x82
    e32e:	005b      	lsls	r3, r3, #1
    e330:	2140      	movs	r1, #64	; 0x40
    e332:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    e334:	2300      	movs	r3, #0
}
    e336:	0018      	movs	r0, r3
    e338:	46bd      	mov	sp, r7
    e33a:	b002      	add	sp, #8
    e33c:	bd80      	pop	{r7, pc}
    e33e:	46c0      	nop			; (mov r8, r8)
    e340:	00003b60 	.word	0x00003b60
    e344:	00000020 	.word	0x00000020
    e348:	f0003fff 	.word	0xf0003fff

0000e34c <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    e34c:	b590      	push	{r4, r7, lr}
    e34e:	b085      	sub	sp, #20
    e350:	af00      	add	r7, sp, #0
    e352:	4cb2      	ldr	r4, [pc, #712]	; (e61c <_usb_device_interrupt_handler+0x2d0>)
    e354:	447c      	add	r4, pc
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    e356:	4bb2      	ldr	r3, [pc, #712]	; (e620 <_usb_device_interrupt_handler+0x2d4>)
    e358:	447b      	add	r3, pc
    e35a:	681b      	ldr	r3, [r3, #0]
    e35c:	681a      	ldr	r2, [r3, #0]
    e35e:	2308      	movs	r3, #8
    e360:	18fb      	adds	r3, r7, r3
    e362:	8c12      	ldrh	r2, [r2, #32]
    e364:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    e366:	2308      	movs	r3, #8
    e368:	18fb      	adds	r3, r7, r3
    e36a:	881b      	ldrh	r3, [r3, #0]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d000      	beq.n	e372 <_usb_device_interrupt_handler+0x26>
    e370:	e061      	b.n	e436 <_usb_device_interrupt_handler+0xea>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    e372:	4bac      	ldr	r3, [pc, #688]	; (e624 <_usb_device_interrupt_handler+0x2d8>)
    e374:	447b      	add	r3, pc
    e376:	681b      	ldr	r3, [r3, #0]
    e378:	681a      	ldr	r2, [r3, #0]
    e37a:	1dbb      	adds	r3, r7, #6
    e37c:	8b92      	ldrh	r2, [r2, #28]
    e37e:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    e380:	4ba9      	ldr	r3, [pc, #676]	; (e628 <_usb_device_interrupt_handler+0x2dc>)
    e382:	447b      	add	r3, pc
    e384:	681a      	ldr	r2, [r3, #0]
    e386:	23ab      	movs	r3, #171	; 0xab
    e388:	005b      	lsls	r3, r3, #1
    e38a:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    e38c:	1dba      	adds	r2, r7, #6
    e38e:	8812      	ldrh	r2, [r2, #0]
    e390:	4013      	ands	r3, r2
    e392:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    e394:	4ba5      	ldr	r3, [pc, #660]	; (e62c <_usb_device_interrupt_handler+0x2e0>)
    e396:	447b      	add	r3, pc
    e398:	6819      	ldr	r1, [r3, #0]
    e39a:	23aa      	movs	r3, #170	; 0xaa
    e39c:	005b      	lsls	r3, r3, #1
    e39e:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    e3a0:	1d3b      	adds	r3, r7, #4
    e3a2:	400a      	ands	r2, r1
    e3a4:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    e3a6:	2300      	movs	r3, #0
    e3a8:	60fb      	str	r3, [r7, #12]
    e3aa:	e040      	b.n	e42e <_usb_device_interrupt_handler+0xe2>
			if (flags & _usb_device_irq_bits[i]) {
    e3ac:	4ba0      	ldr	r3, [pc, #640]	; (e630 <_usb_device_interrupt_handler+0x2e4>)
    e3ae:	447b      	add	r3, pc
    e3b0:	68fa      	ldr	r2, [r7, #12]
    e3b2:	0052      	lsls	r2, r2, #1
    e3b4:	5ad3      	ldrh	r3, [r2, r3]
    e3b6:	1dba      	adds	r2, r7, #6
    e3b8:	8812      	ldrh	r2, [r2, #0]
    e3ba:	4013      	ands	r3, r2
    e3bc:	b29b      	uxth	r3, r3
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d009      	beq.n	e3d6 <_usb_device_interrupt_handler+0x8a>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    e3c2:	4b9c      	ldr	r3, [pc, #624]	; (e634 <_usb_device_interrupt_handler+0x2e8>)
    e3c4:	447b      	add	r3, pc
    e3c6:	681b      	ldr	r3, [r3, #0]
    e3c8:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    e3ca:	4a9b      	ldr	r2, [pc, #620]	; (e638 <_usb_device_interrupt_handler+0x2ec>)
    e3cc:	447a      	add	r2, pc
    e3ce:	68f9      	ldr	r1, [r7, #12]
    e3d0:	0049      	lsls	r1, r1, #1
    e3d2:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    e3d4:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    e3d6:	4b99      	ldr	r3, [pc, #612]	; (e63c <_usb_device_interrupt_handler+0x2f0>)
    e3d8:	447b      	add	r3, pc
    e3da:	68fa      	ldr	r2, [r7, #12]
    e3dc:	0052      	lsls	r2, r2, #1
    e3de:	5ad3      	ldrh	r3, [r2, r3]
    e3e0:	1d3a      	adds	r2, r7, #4
    e3e2:	8812      	ldrh	r2, [r2, #0]
    e3e4:	4013      	ands	r3, r2
    e3e6:	b29b      	uxth	r3, r3
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d01d      	beq.n	e428 <_usb_device_interrupt_handler+0xdc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    e3ec:	68fb      	ldr	r3, [r7, #12]
    e3ee:	2b06      	cmp	r3, #6
    e3f0:	d10c      	bne.n	e40c <_usb_device_interrupt_handler+0xc0>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    e3f2:	4b93      	ldr	r3, [pc, #588]	; (e640 <_usb_device_interrupt_handler+0x2f4>)
    e3f4:	58e3      	ldr	r3, [r4, r3]
    e3f6:	891b      	ldrh	r3, [r3, #8]
    e3f8:	045b      	lsls	r3, r3, #17
    e3fa:	0d5b      	lsrs	r3, r3, #21
    e3fc:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    e3fe:	001a      	movs	r2, r3
    e400:	2380      	movs	r3, #128	; 0x80
    e402:	005b      	lsls	r3, r3, #1
    e404:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    e406:	4b8f      	ldr	r3, [pc, #572]	; (e644 <_usb_device_interrupt_handler+0x2f8>)
    e408:	447b      	add	r3, pc
    e40a:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    e40c:	4b8e      	ldr	r3, [pc, #568]	; (e648 <_usb_device_interrupt_handler+0x2fc>)
    e40e:	447b      	add	r3, pc
    e410:	681b      	ldr	r3, [r3, #0]
    e412:	68fa      	ldr	r2, [r7, #12]
    e414:	322e      	adds	r2, #46	; 0x2e
    e416:	0092      	lsls	r2, r2, #2
    e418:	58d2      	ldr	r2, [r2, r3]
    e41a:	4b8c      	ldr	r3, [pc, #560]	; (e64c <_usb_device_interrupt_handler+0x300>)
    e41c:	447b      	add	r3, pc
    e41e:	681b      	ldr	r3, [r3, #0]
    e420:	498b      	ldr	r1, [pc, #556]	; (e650 <_usb_device_interrupt_handler+0x304>)
    e422:	4479      	add	r1, pc
    e424:	0018      	movs	r0, r3
    e426:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    e428:	68fb      	ldr	r3, [r7, #12]
    e42a:	3301      	adds	r3, #1
    e42c:	60fb      	str	r3, [r7, #12]
    e42e:	68fb      	ldr	r3, [r7, #12]
    e430:	2b06      	cmp	r3, #6
    e432:	ddbb      	ble.n	e3ac <_usb_device_interrupt_handler+0x60>
    e434:	e2ba      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    e436:	230b      	movs	r3, #11
    e438:	18fb      	adds	r3, r7, r3
    e43a:	2200      	movs	r2, #0
    e43c:	701a      	strb	r2, [r3, #0]
    e43e:	e2a5      	b.n	e98c <_usb_device_interrupt_handler+0x640>

			if (ep_inst & (1 << i)) {
    e440:	2308      	movs	r3, #8
    e442:	18fb      	adds	r3, r7, r3
    e444:	881a      	ldrh	r2, [r3, #0]
    e446:	230b      	movs	r3, #11
    e448:	18fb      	adds	r3, r7, r3
    e44a:	781b      	ldrb	r3, [r3, #0]
    e44c:	411a      	asrs	r2, r3
    e44e:	0013      	movs	r3, r2
    e450:	2201      	movs	r2, #1
    e452:	4013      	ands	r3, r2
    e454:	d100      	bne.n	e458 <_usb_device_interrupt_handler+0x10c>
    e456:	e292      	b.n	e97e <_usb_device_interrupt_handler+0x632>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    e458:	4b7e      	ldr	r3, [pc, #504]	; (e654 <_usb_device_interrupt_handler+0x308>)
    e45a:	447b      	add	r3, pc
    e45c:	681b      	ldr	r3, [r3, #0]
    e45e:	681a      	ldr	r2, [r3, #0]
    e460:	230b      	movs	r3, #11
    e462:	18fb      	adds	r3, r7, r3
    e464:	781b      	ldrb	r3, [r3, #0]
    e466:	3308      	adds	r3, #8
    e468:	015b      	lsls	r3, r3, #5
    e46a:	18d3      	adds	r3, r2, r3
    e46c:	3307      	adds	r3, #7
    e46e:	781b      	ldrb	r3, [r3, #0]
    e470:	b2da      	uxtb	r2, r3
    e472:	1dbb      	adds	r3, r7, #6
    e474:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    e476:	4b78      	ldr	r3, [pc, #480]	; (e658 <_usb_device_interrupt_handler+0x30c>)
    e478:	447b      	add	r3, pc
    e47a:	6819      	ldr	r1, [r3, #0]
    e47c:	230b      	movs	r3, #11
    e47e:	18fb      	adds	r3, r7, r3
    e480:	781a      	ldrb	r2, [r3, #0]
    e482:	23b0      	movs	r3, #176	; 0xb0
    e484:	005b      	lsls	r3, r3, #1
    e486:	188a      	adds	r2, r1, r2
    e488:	18d3      	adds	r3, r2, r3
    e48a:	781b      	ldrb	r3, [r3, #0]
    e48c:	b29b      	uxth	r3, r3
				flags_run = flags &
    e48e:	1dba      	adds	r2, r7, #6
    e490:	8812      	ldrh	r2, [r2, #0]
    e492:	4013      	ands	r3, r2
    e494:	b29b      	uxth	r3, r3
    e496:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    e498:	4b70      	ldr	r3, [pc, #448]	; (e65c <_usb_device_interrupt_handler+0x310>)
    e49a:	447b      	add	r3, pc
    e49c:	6818      	ldr	r0, [r3, #0]
    e49e:	230b      	movs	r3, #11
    e4a0:	18fb      	adds	r3, r7, r3
    e4a2:	7819      	ldrb	r1, [r3, #0]
    e4a4:	23ac      	movs	r3, #172	; 0xac
    e4a6:	005b      	lsls	r3, r3, #1
    e4a8:	1841      	adds	r1, r0, r1
    e4aa:	18cb      	adds	r3, r1, r3
    e4ac:	781b      	ldrb	r3, [r3, #0]
    e4ae:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    e4b0:	4013      	ands	r3, r2
    e4b2:	b21a      	sxth	r2, r3
				flags_run = flags &
    e4b4:	1d3b      	adds	r3, r7, #4
    e4b6:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    e4b8:	1dbb      	adds	r3, r7, #6
    e4ba:	881b      	ldrh	r3, [r3, #0]
    e4bc:	2260      	movs	r2, #96	; 0x60
    e4be:	4013      	ands	r3, r2
    e4c0:	d065      	beq.n	e58e <_usb_device_interrupt_handler+0x242>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    e4c2:	4b67      	ldr	r3, [pc, #412]	; (e660 <_usb_device_interrupt_handler+0x314>)
    e4c4:	447b      	add	r3, pc
    e4c6:	681b      	ldr	r3, [r3, #0]
    e4c8:	681a      	ldr	r2, [r3, #0]
    e4ca:	230b      	movs	r3, #11
    e4cc:	18fb      	adds	r3, r7, r3
    e4ce:	781b      	ldrb	r3, [r3, #0]
    e4d0:	3308      	adds	r3, #8
    e4d2:	015b      	lsls	r3, r3, #5
    e4d4:	18d3      	adds	r3, r2, r3
    e4d6:	3307      	adds	r3, #7
    e4d8:	781b      	ldrb	r3, [r3, #0]
    e4da:	b2db      	uxtb	r3, r3
    e4dc:	001a      	movs	r2, r3
    e4de:	2340      	movs	r3, #64	; 0x40
    e4e0:	4013      	ands	r3, r2
    e4e2:	d017      	beq.n	e514 <_usb_device_interrupt_handler+0x1c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    e4e4:	4b5f      	ldr	r3, [pc, #380]	; (e664 <_usb_device_interrupt_handler+0x318>)
    e4e6:	447b      	add	r3, pc
    e4e8:	681b      	ldr	r3, [r3, #0]
    e4ea:	681a      	ldr	r2, [r3, #0]
    e4ec:	230b      	movs	r3, #11
    e4ee:	18fb      	adds	r3, r7, r3
    e4f0:	781b      	ldrb	r3, [r3, #0]
    e4f2:	3308      	adds	r3, #8
    e4f4:	015b      	lsls	r3, r3, #5
    e4f6:	18d3      	adds	r3, r2, r3
    e4f8:	3307      	adds	r3, #7
    e4fa:	2240      	movs	r2, #64	; 0x40
    e4fc:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    e4fe:	230b      	movs	r3, #11
    e500:	18fb      	adds	r3, r7, r3
    e502:	781b      	ldrb	r3, [r3, #0]
    e504:	2280      	movs	r2, #128	; 0x80
    e506:	4252      	negs	r2, r2
    e508:	4313      	orrs	r3, r2
    e50a:	b2da      	uxtb	r2, r3
    e50c:	4b56      	ldr	r3, [pc, #344]	; (e668 <_usb_device_interrupt_handler+0x31c>)
    e50e:	447b      	add	r3, pc
    e510:	719a      	strb	r2, [r3, #6]
    e512:	e023      	b.n	e55c <_usb_device_interrupt_handler+0x210>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    e514:	4b55      	ldr	r3, [pc, #340]	; (e66c <_usb_device_interrupt_handler+0x320>)
    e516:	447b      	add	r3, pc
    e518:	681b      	ldr	r3, [r3, #0]
    e51a:	681a      	ldr	r2, [r3, #0]
    e51c:	230b      	movs	r3, #11
    e51e:	18fb      	adds	r3, r7, r3
    e520:	781b      	ldrb	r3, [r3, #0]
    e522:	3308      	adds	r3, #8
    e524:	015b      	lsls	r3, r3, #5
    e526:	18d3      	adds	r3, r2, r3
    e528:	3307      	adds	r3, #7
    e52a:	781b      	ldrb	r3, [r3, #0]
    e52c:	b2db      	uxtb	r3, r3
    e52e:	001a      	movs	r2, r3
    e530:	2320      	movs	r3, #32
    e532:	4013      	ands	r3, r2
    e534:	d012      	beq.n	e55c <_usb_device_interrupt_handler+0x210>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    e536:	4b4e      	ldr	r3, [pc, #312]	; (e670 <_usb_device_interrupt_handler+0x324>)
    e538:	447b      	add	r3, pc
    e53a:	681b      	ldr	r3, [r3, #0]
    e53c:	681a      	ldr	r2, [r3, #0]
    e53e:	230b      	movs	r3, #11
    e540:	18fb      	adds	r3, r7, r3
    e542:	781b      	ldrb	r3, [r3, #0]
    e544:	3308      	adds	r3, #8
    e546:	015b      	lsls	r3, r3, #5
    e548:	18d3      	adds	r3, r2, r3
    e54a:	3307      	adds	r3, #7
    e54c:	2220      	movs	r2, #32
    e54e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    e550:	4b48      	ldr	r3, [pc, #288]	; (e674 <_usb_device_interrupt_handler+0x328>)
    e552:	447b      	add	r3, pc
    e554:	220b      	movs	r2, #11
    e556:	18ba      	adds	r2, r7, r2
    e558:	7812      	ldrb	r2, [r2, #0]
    e55a:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    e55c:	1d3b      	adds	r3, r7, #4
    e55e:	881b      	ldrh	r3, [r3, #0]
    e560:	2260      	movs	r2, #96	; 0x60
    e562:	4013      	ands	r3, r2
    e564:	d100      	bne.n	e568 <_usb_device_interrupt_handler+0x21c>
    e566:	e218      	b.n	e99a <_usb_device_interrupt_handler+0x64e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    e568:	4b43      	ldr	r3, [pc, #268]	; (e678 <_usb_device_interrupt_handler+0x32c>)
    e56a:	447b      	add	r3, pc
    e56c:	681a      	ldr	r2, [r3, #0]
    e56e:	230b      	movs	r3, #11
    e570:	18fb      	adds	r3, r7, r3
    e572:	781b      	ldrb	r3, [r3, #0]
    e574:	21e0      	movs	r1, #224	; 0xe0
    e576:	011b      	lsls	r3, r3, #4
    e578:	18d3      	adds	r3, r2, r3
    e57a:	185b      	adds	r3, r3, r1
    e57c:	681a      	ldr	r2, [r3, #0]
    e57e:	4b3f      	ldr	r3, [pc, #252]	; (e67c <_usb_device_interrupt_handler+0x330>)
    e580:	447b      	add	r3, pc
    e582:	681b      	ldr	r3, [r3, #0]
    e584:	493e      	ldr	r1, [pc, #248]	; (e680 <_usb_device_interrupt_handler+0x334>)
    e586:	4479      	add	r1, pc
    e588:	0018      	movs	r0, r3
    e58a:	4790      	blx	r2
					}
					return;
    e58c:	e205      	b.n	e99a <_usb_device_interrupt_handler+0x64e>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    e58e:	1dbb      	adds	r3, r7, #6
    e590:	881b      	ldrh	r3, [r3, #0]
    e592:	2210      	movs	r2, #16
    e594:	4013      	ands	r3, r2
    e596:	d100      	bne.n	e59a <_usb_device_interrupt_handler+0x24e>
    e598:	e080      	b.n	e69c <_usb_device_interrupt_handler+0x350>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    e59a:	4b3a      	ldr	r3, [pc, #232]	; (e684 <_usb_device_interrupt_handler+0x338>)
    e59c:	447b      	add	r3, pc
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	681a      	ldr	r2, [r3, #0]
    e5a2:	230b      	movs	r3, #11
    e5a4:	18fb      	adds	r3, r7, r3
    e5a6:	781b      	ldrb	r3, [r3, #0]
    e5a8:	3308      	adds	r3, #8
    e5aa:	015b      	lsls	r3, r3, #5
    e5ac:	18d3      	adds	r3, r2, r3
    e5ae:	3307      	adds	r3, #7
    e5b0:	2210      	movs	r2, #16
    e5b2:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    e5b4:	4b34      	ldr	r3, [pc, #208]	; (e688 <_usb_device_interrupt_handler+0x33c>)
    e5b6:	447b      	add	r3, pc
    e5b8:	6819      	ldr	r1, [r3, #0]
    e5ba:	230b      	movs	r3, #11
    e5bc:	18fb      	adds	r3, r7, r3
    e5be:	781a      	ldrb	r2, [r3, #0]
    e5c0:	23b0      	movs	r3, #176	; 0xb0
    e5c2:	005b      	lsls	r3, r3, #1
    e5c4:	188a      	adds	r2, r1, r2
    e5c6:	18d3      	adds	r3, r2, r3
    e5c8:	781b      	ldrb	r3, [r3, #0]
    e5ca:	2210      	movs	r2, #16
    e5cc:	4013      	ands	r3, r2
    e5ce:	b2db      	uxtb	r3, r3
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d100      	bne.n	e5d6 <_usb_device_interrupt_handler+0x28a>
    e5d4:	e1e3      	b.n	e99e <_usb_device_interrupt_handler+0x652>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    e5d6:	230b      	movs	r3, #11
    e5d8:	18fb      	adds	r3, r7, r3
    e5da:	781b      	ldrb	r3, [r3, #0]
    e5dc:	4a18      	ldr	r2, [pc, #96]	; (e640 <_usb_device_interrupt_handler+0x2f4>)
    e5de:	58a2      	ldr	r2, [r4, r2]
    e5e0:	015b      	lsls	r3, r3, #5
    e5e2:	18d3      	adds	r3, r2, r3
    e5e4:	685b      	ldr	r3, [r3, #4]
    e5e6:	049b      	lsls	r3, r3, #18
    e5e8:	0c9b      	lsrs	r3, r3, #18
    e5ea:	b29b      	uxth	r3, r3
    e5ec:	001a      	movs	r2, r3
    e5ee:	4b27      	ldr	r3, [pc, #156]	; (e68c <_usb_device_interrupt_handler+0x340>)
    e5f0:	447b      	add	r3, pc
    e5f2:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    e5f4:	4b26      	ldr	r3, [pc, #152]	; (e690 <_usb_device_interrupt_handler+0x344>)
    e5f6:	447b      	add	r3, pc
    e5f8:	681a      	ldr	r2, [r3, #0]
    e5fa:	230b      	movs	r3, #11
    e5fc:	18fb      	adds	r3, r7, r3
    e5fe:	781b      	ldrb	r3, [r3, #0]
    e600:	21dc      	movs	r1, #220	; 0xdc
    e602:	011b      	lsls	r3, r3, #4
    e604:	18d3      	adds	r3, r2, r3
    e606:	185b      	adds	r3, r3, r1
    e608:	681a      	ldr	r2, [r3, #0]
    e60a:	4b22      	ldr	r3, [pc, #136]	; (e694 <_usb_device_interrupt_handler+0x348>)
    e60c:	447b      	add	r3, pc
    e60e:	681b      	ldr	r3, [r3, #0]
    e610:	4921      	ldr	r1, [pc, #132]	; (e698 <_usb_device_interrupt_handler+0x34c>)
    e612:	4479      	add	r1, pc
    e614:	0018      	movs	r0, r3
    e616:	4790      	blx	r2
					}
					return;
    e618:	e1c1      	b.n	e99e <_usb_device_interrupt_handler+0x652>
    e61a:	46c0      	nop			; (mov r8, r8)
    e61c:	00003b0c 	.word	0x00003b0c
    e620:	1fff22c8 	.word	0x1fff22c8
    e624:	1fff22ac 	.word	0x1fff22ac
    e628:	1fff229e 	.word	0x1fff229e
    e62c:	1fff228a 	.word	0x1fff228a
    e630:	000039e6 	.word	0x000039e6
    e634:	1fff225c 	.word	0x1fff225c
    e638:	000039c8 	.word	0x000039c8
    e63c:	000039bc 	.word	0x000039bc
    e640:	00000020 	.word	0x00000020
    e644:	1fff2224 	.word	0x1fff2224
    e648:	1fff2212 	.word	0x1fff2212
    e64c:	1fff2204 	.word	0x1fff2204
    e650:	1fff220a 	.word	0x1fff220a
    e654:	1fff21c6 	.word	0x1fff21c6
    e658:	1fff21a8 	.word	0x1fff21a8
    e65c:	1fff2186 	.word	0x1fff2186
    e660:	1fff215c 	.word	0x1fff215c
    e664:	1fff213a 	.word	0x1fff213a
    e668:	1fff2122 	.word	0x1fff2122
    e66c:	1fff210a 	.word	0x1fff210a
    e670:	1fff20e8 	.word	0x1fff20e8
    e674:	1fff20de 	.word	0x1fff20de
    e678:	1fff20b6 	.word	0x1fff20b6
    e67c:	1fff20a0 	.word	0x1fff20a0
    e680:	1fff20aa 	.word	0x1fff20aa
    e684:	1fff2084 	.word	0x1fff2084
    e688:	1fff206a 	.word	0x1fff206a
    e68c:	1fff2040 	.word	0x1fff2040
    e690:	1fff202a 	.word	0x1fff202a
    e694:	1fff2014 	.word	0x1fff2014
    e698:	1fff201e 	.word	0x1fff201e
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    e69c:	1dbb      	adds	r3, r7, #6
    e69e:	881b      	ldrh	r3, [r3, #0]
    e6a0:	2203      	movs	r2, #3
    e6a2:	4013      	ands	r3, r2
    e6a4:	d100      	bne.n	e6a8 <_usb_device_interrupt_handler+0x35c>
    e6a6:	e093      	b.n	e7d0 <_usb_device_interrupt_handler+0x484>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    e6a8:	4bc2      	ldr	r3, [pc, #776]	; (e9b4 <_usb_device_interrupt_handler+0x668>)
    e6aa:	447b      	add	r3, pc
    e6ac:	681b      	ldr	r3, [r3, #0]
    e6ae:	681a      	ldr	r2, [r3, #0]
    e6b0:	230b      	movs	r3, #11
    e6b2:	18fb      	adds	r3, r7, r3
    e6b4:	781b      	ldrb	r3, [r3, #0]
    e6b6:	3308      	adds	r3, #8
    e6b8:	015b      	lsls	r3, r3, #5
    e6ba:	18d3      	adds	r3, r2, r3
    e6bc:	3307      	adds	r3, #7
    e6be:	781b      	ldrb	r3, [r3, #0]
    e6c0:	b2db      	uxtb	r3, r3
    e6c2:	001a      	movs	r2, r3
    e6c4:	2302      	movs	r3, #2
    e6c6:	4013      	ands	r3, r2
    e6c8:	d027      	beq.n	e71a <_usb_device_interrupt_handler+0x3ce>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    e6ca:	4bbb      	ldr	r3, [pc, #748]	; (e9b8 <_usb_device_interrupt_handler+0x66c>)
    e6cc:	447b      	add	r3, pc
    e6ce:	681b      	ldr	r3, [r3, #0]
    e6d0:	681a      	ldr	r2, [r3, #0]
    e6d2:	230b      	movs	r3, #11
    e6d4:	18fb      	adds	r3, r7, r3
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	3308      	adds	r3, #8
    e6da:	015b      	lsls	r3, r3, #5
    e6dc:	18d3      	adds	r3, r2, r3
    e6de:	3307      	adds	r3, #7
    e6e0:	2202      	movs	r2, #2
    e6e2:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    e6e4:	230b      	movs	r3, #11
    e6e6:	18fb      	adds	r3, r7, r3
    e6e8:	781b      	ldrb	r3, [r3, #0]
    e6ea:	2280      	movs	r2, #128	; 0x80
    e6ec:	4252      	negs	r2, r2
    e6ee:	4313      	orrs	r3, r2
    e6f0:	b2da      	uxtb	r2, r3
    e6f2:	4bb2      	ldr	r3, [pc, #712]	; (e9bc <_usb_device_interrupt_handler+0x670>)
    e6f4:	447b      	add	r3, pc
    e6f6:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    e6f8:	230b      	movs	r3, #11
    e6fa:	18fb      	adds	r3, r7, r3
    e6fc:	781b      	ldrb	r3, [r3, #0]
    e6fe:	4ab0      	ldr	r2, [pc, #704]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e700:	58a2      	ldr	r2, [r4, r2]
    e702:	015b      	lsls	r3, r3, #5
    e704:	18d3      	adds	r3, r2, r3
    e706:	3310      	adds	r3, #16
    e708:	685b      	ldr	r3, [r3, #4]
    e70a:	049b      	lsls	r3, r3, #18
    e70c:	0c9b      	lsrs	r3, r3, #18
    e70e:	b29b      	uxth	r3, r3
    e710:	001a      	movs	r2, r3
    e712:	4bac      	ldr	r3, [pc, #688]	; (e9c4 <_usb_device_interrupt_handler+0x678>)
    e714:	447b      	add	r3, pc
    e716:	805a      	strh	r2, [r3, #2]
    e718:	e041      	b.n	e79e <_usb_device_interrupt_handler+0x452>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    e71a:	4bab      	ldr	r3, [pc, #684]	; (e9c8 <_usb_device_interrupt_handler+0x67c>)
    e71c:	447b      	add	r3, pc
    e71e:	681b      	ldr	r3, [r3, #0]
    e720:	681a      	ldr	r2, [r3, #0]
    e722:	230b      	movs	r3, #11
    e724:	18fb      	adds	r3, r7, r3
    e726:	781b      	ldrb	r3, [r3, #0]
    e728:	3308      	adds	r3, #8
    e72a:	015b      	lsls	r3, r3, #5
    e72c:	18d3      	adds	r3, r2, r3
    e72e:	3307      	adds	r3, #7
    e730:	781b      	ldrb	r3, [r3, #0]
    e732:	b2db      	uxtb	r3, r3
    e734:	001a      	movs	r2, r3
    e736:	2301      	movs	r3, #1
    e738:	4013      	ands	r3, r2
    e73a:	d030      	beq.n	e79e <_usb_device_interrupt_handler+0x452>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    e73c:	4ba3      	ldr	r3, [pc, #652]	; (e9cc <_usb_device_interrupt_handler+0x680>)
    e73e:	447b      	add	r3, pc
    e740:	681b      	ldr	r3, [r3, #0]
    e742:	681a      	ldr	r2, [r3, #0]
    e744:	230b      	movs	r3, #11
    e746:	18fb      	adds	r3, r7, r3
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	3308      	adds	r3, #8
    e74c:	015b      	lsls	r3, r3, #5
    e74e:	18d3      	adds	r3, r2, r3
    e750:	3307      	adds	r3, #7
    e752:	2201      	movs	r2, #1
    e754:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    e756:	4b9e      	ldr	r3, [pc, #632]	; (e9d0 <_usb_device_interrupt_handler+0x684>)
    e758:	447b      	add	r3, pc
    e75a:	220b      	movs	r2, #11
    e75c:	18ba      	adds	r2, r7, r2
    e75e:	7812      	ldrb	r2, [r2, #0]
    e760:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    e762:	230b      	movs	r3, #11
    e764:	18fb      	adds	r3, r7, r3
    e766:	781b      	ldrb	r3, [r3, #0]
    e768:	4a95      	ldr	r2, [pc, #596]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e76a:	58a2      	ldr	r2, [r4, r2]
    e76c:	015b      	lsls	r3, r3, #5
    e76e:	18d3      	adds	r3, r2, r3
    e770:	685b      	ldr	r3, [r3, #4]
    e772:	049b      	lsls	r3, r3, #18
    e774:	0c9b      	lsrs	r3, r3, #18
    e776:	b29b      	uxth	r3, r3
    e778:	001a      	movs	r2, r3
    e77a:	4b96      	ldr	r3, [pc, #600]	; (e9d4 <_usb_device_interrupt_handler+0x688>)
    e77c:	447b      	add	r3, pc
    e77e:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    e780:	230b      	movs	r3, #11
    e782:	18fb      	adds	r3, r7, r3
    e784:	781b      	ldrb	r3, [r3, #0]
    e786:	4a8e      	ldr	r2, [pc, #568]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e788:	58a2      	ldr	r2, [r4, r2]
    e78a:	015b      	lsls	r3, r3, #5
    e78c:	18d3      	adds	r3, r2, r3
    e78e:	685b      	ldr	r3, [r3, #4]
    e790:	011b      	lsls	r3, r3, #4
    e792:	0c9b      	lsrs	r3, r3, #18
    e794:	b29b      	uxth	r3, r3
    e796:	001a      	movs	r2, r3
    e798:	4b8f      	ldr	r3, [pc, #572]	; (e9d8 <_usb_device_interrupt_handler+0x68c>)
    e79a:	447b      	add	r3, pc
    e79c:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    e79e:	1d3b      	adds	r3, r7, #4
    e7a0:	881b      	ldrh	r3, [r3, #0]
    e7a2:	2203      	movs	r2, #3
    e7a4:	4013      	ands	r3, r2
    e7a6:	d100      	bne.n	e7aa <_usb_device_interrupt_handler+0x45e>
    e7a8:	e0fb      	b.n	e9a2 <_usb_device_interrupt_handler+0x656>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    e7aa:	4b8c      	ldr	r3, [pc, #560]	; (e9dc <_usb_device_interrupt_handler+0x690>)
    e7ac:	447b      	add	r3, pc
    e7ae:	681a      	ldr	r2, [r3, #0]
    e7b0:	230b      	movs	r3, #11
    e7b2:	18fb      	adds	r3, r7, r3
    e7b4:	781b      	ldrb	r3, [r3, #0]
    e7b6:	330d      	adds	r3, #13
    e7b8:	011b      	lsls	r3, r3, #4
    e7ba:	18d3      	adds	r3, r2, r3
    e7bc:	3304      	adds	r3, #4
    e7be:	681a      	ldr	r2, [r3, #0]
    e7c0:	4b87      	ldr	r3, [pc, #540]	; (e9e0 <_usb_device_interrupt_handler+0x694>)
    e7c2:	447b      	add	r3, pc
    e7c4:	681b      	ldr	r3, [r3, #0]
    e7c6:	4987      	ldr	r1, [pc, #540]	; (e9e4 <_usb_device_interrupt_handler+0x698>)
    e7c8:	4479      	add	r1, pc
    e7ca:	0018      	movs	r0, r3
    e7cc:	4790      	blx	r2
					}
					return;
    e7ce:	e0e8      	b.n	e9a2 <_usb_device_interrupt_handler+0x656>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    e7d0:	1dbb      	adds	r3, r7, #6
    e7d2:	881b      	ldrh	r3, [r3, #0]
    e7d4:	220c      	movs	r2, #12
    e7d6:	4013      	ands	r3, r2
    e7d8:	d100      	bne.n	e7dc <_usb_device_interrupt_handler+0x490>
    e7da:	e0d0      	b.n	e97e <_usb_device_interrupt_handler+0x632>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    e7dc:	4b82      	ldr	r3, [pc, #520]	; (e9e8 <_usb_device_interrupt_handler+0x69c>)
    e7de:	447b      	add	r3, pc
    e7e0:	681b      	ldr	r3, [r3, #0]
    e7e2:	681a      	ldr	r2, [r3, #0]
    e7e4:	230b      	movs	r3, #11
    e7e6:	18fb      	adds	r3, r7, r3
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	3308      	adds	r3, #8
    e7ec:	015b      	lsls	r3, r3, #5
    e7ee:	18d3      	adds	r3, r2, r3
    e7f0:	3307      	adds	r3, #7
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	b2db      	uxtb	r3, r3
    e7f6:	001a      	movs	r2, r3
    e7f8:	2308      	movs	r3, #8
    e7fa:	4013      	ands	r3, r2
    e7fc:	d04d      	beq.n	e89a <_usb_device_interrupt_handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    e7fe:	4b7b      	ldr	r3, [pc, #492]	; (e9ec <_usb_device_interrupt_handler+0x6a0>)
    e800:	447b      	add	r3, pc
    e802:	681b      	ldr	r3, [r3, #0]
    e804:	681a      	ldr	r2, [r3, #0]
    e806:	230b      	movs	r3, #11
    e808:	18fb      	adds	r3, r7, r3
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	3308      	adds	r3, #8
    e80e:	015b      	lsls	r3, r3, #5
    e810:	18d3      	adds	r3, r2, r3
    e812:	3307      	adds	r3, #7
    e814:	2208      	movs	r2, #8
    e816:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    e818:	230b      	movs	r3, #11
    e81a:	18fb      	adds	r3, r7, r3
    e81c:	781b      	ldrb	r3, [r3, #0]
    e81e:	4a68      	ldr	r2, [pc, #416]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e820:	58a2      	ldr	r2, [r4, r2]
    e822:	015b      	lsls	r3, r3, #5
    e824:	18d3      	adds	r3, r2, r3
    e826:	331a      	adds	r3, #26
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	b2db      	uxtb	r3, r3
    e82c:	001a      	movs	r2, r3
    e82e:	2302      	movs	r3, #2
    e830:	4013      	ands	r3, r2
    e832:	d016      	beq.n	e862 <_usb_device_interrupt_handler+0x516>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    e834:	230b      	movs	r3, #11
    e836:	18fb      	adds	r3, r7, r3
    e838:	781b      	ldrb	r3, [r3, #0]
    e83a:	220b      	movs	r2, #11
    e83c:	18ba      	adds	r2, r7, r2
    e83e:	7812      	ldrb	r2, [r2, #0]
    e840:	495f      	ldr	r1, [pc, #380]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e842:	5861      	ldr	r1, [r4, r1]
    e844:	0152      	lsls	r2, r2, #5
    e846:	188a      	adds	r2, r1, r2
    e848:	321a      	adds	r2, #26
    e84a:	7812      	ldrb	r2, [r2, #0]
    e84c:	b2d2      	uxtb	r2, r2
    e84e:	2102      	movs	r1, #2
    e850:	438a      	bics	r2, r1
    e852:	b2d1      	uxtb	r1, r2
    e854:	4a5a      	ldr	r2, [pc, #360]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e856:	58a2      	ldr	r2, [r4, r2]
    e858:	015b      	lsls	r3, r3, #5
    e85a:	18d3      	adds	r3, r2, r3
    e85c:	331a      	adds	r3, #26
    e85e:	1c0a      	adds	r2, r1, #0
    e860:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    e862:	230b      	movs	r3, #11
    e864:	18fb      	adds	r3, r7, r3
    e866:	781b      	ldrb	r3, [r3, #0]
    e868:	2280      	movs	r2, #128	; 0x80
    e86a:	4252      	negs	r2, r2
    e86c:	4313      	orrs	r3, r2
    e86e:	b2da      	uxtb	r2, r3
    e870:	4b5f      	ldr	r3, [pc, #380]	; (e9f0 <_usb_device_interrupt_handler+0x6a4>)
    e872:	447b      	add	r3, pc
    e874:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    e876:	4b5f      	ldr	r3, [pc, #380]	; (e9f4 <_usb_device_interrupt_handler+0x6a8>)
    e878:	447b      	add	r3, pc
    e87a:	681b      	ldr	r3, [r3, #0]
    e87c:	681a      	ldr	r2, [r3, #0]
    e87e:	230b      	movs	r3, #11
    e880:	18fb      	adds	r3, r7, r3
    e882:	781b      	ldrb	r3, [r3, #0]
    e884:	3308      	adds	r3, #8
    e886:	015b      	lsls	r3, r3, #5
    e888:	18d3      	adds	r3, r2, r3
    e88a:	3307      	adds	r3, #7
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	b2db      	uxtb	r3, r3
    e890:	001a      	movs	r2, r3
    e892:	2302      	movs	r3, #2
    e894:	4013      	ands	r3, r2
    e896:	d05a      	beq.n	e94e <_usb_device_interrupt_handler+0x602>
							return;
    e898:	e088      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    e89a:	4b57      	ldr	r3, [pc, #348]	; (e9f8 <_usb_device_interrupt_handler+0x6ac>)
    e89c:	447b      	add	r3, pc
    e89e:	681b      	ldr	r3, [r3, #0]
    e8a0:	681a      	ldr	r2, [r3, #0]
    e8a2:	230b      	movs	r3, #11
    e8a4:	18fb      	adds	r3, r7, r3
    e8a6:	781b      	ldrb	r3, [r3, #0]
    e8a8:	3308      	adds	r3, #8
    e8aa:	015b      	lsls	r3, r3, #5
    e8ac:	18d3      	adds	r3, r2, r3
    e8ae:	3307      	adds	r3, #7
    e8b0:	781b      	ldrb	r3, [r3, #0]
    e8b2:	b2db      	uxtb	r3, r3
    e8b4:	001a      	movs	r2, r3
    e8b6:	2304      	movs	r3, #4
    e8b8:	4013      	ands	r3, r2
    e8ba:	d048      	beq.n	e94e <_usb_device_interrupt_handler+0x602>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    e8bc:	4b4f      	ldr	r3, [pc, #316]	; (e9fc <_usb_device_interrupt_handler+0x6b0>)
    e8be:	447b      	add	r3, pc
    e8c0:	681b      	ldr	r3, [r3, #0]
    e8c2:	681a      	ldr	r2, [r3, #0]
    e8c4:	230b      	movs	r3, #11
    e8c6:	18fb      	adds	r3, r7, r3
    e8c8:	781b      	ldrb	r3, [r3, #0]
    e8ca:	3308      	adds	r3, #8
    e8cc:	015b      	lsls	r3, r3, #5
    e8ce:	18d3      	adds	r3, r2, r3
    e8d0:	3307      	adds	r3, #7
    e8d2:	2204      	movs	r2, #4
    e8d4:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    e8d6:	230b      	movs	r3, #11
    e8d8:	18fb      	adds	r3, r7, r3
    e8da:	781b      	ldrb	r3, [r3, #0]
    e8dc:	4a38      	ldr	r2, [pc, #224]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e8de:	58a2      	ldr	r2, [r4, r2]
    e8e0:	015b      	lsls	r3, r3, #5
    e8e2:	18d3      	adds	r3, r2, r3
    e8e4:	330a      	adds	r3, #10
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	b2db      	uxtb	r3, r3
    e8ea:	001a      	movs	r2, r3
    e8ec:	2302      	movs	r3, #2
    e8ee:	4013      	ands	r3, r2
    e8f0:	d016      	beq.n	e920 <_usb_device_interrupt_handler+0x5d4>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    e8f2:	230b      	movs	r3, #11
    e8f4:	18fb      	adds	r3, r7, r3
    e8f6:	781b      	ldrb	r3, [r3, #0]
    e8f8:	220b      	movs	r2, #11
    e8fa:	18ba      	adds	r2, r7, r2
    e8fc:	7812      	ldrb	r2, [r2, #0]
    e8fe:	4930      	ldr	r1, [pc, #192]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e900:	5861      	ldr	r1, [r4, r1]
    e902:	0152      	lsls	r2, r2, #5
    e904:	188a      	adds	r2, r1, r2
    e906:	320a      	adds	r2, #10
    e908:	7812      	ldrb	r2, [r2, #0]
    e90a:	b2d2      	uxtb	r2, r2
    e90c:	2102      	movs	r1, #2
    e90e:	438a      	bics	r2, r1
    e910:	b2d1      	uxtb	r1, r2
    e912:	4a2b      	ldr	r2, [pc, #172]	; (e9c0 <_usb_device_interrupt_handler+0x674>)
    e914:	58a2      	ldr	r2, [r4, r2]
    e916:	015b      	lsls	r3, r3, #5
    e918:	18d3      	adds	r3, r2, r3
    e91a:	330a      	adds	r3, #10
    e91c:	1c0a      	adds	r2, r1, #0
    e91e:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    e920:	4b37      	ldr	r3, [pc, #220]	; (ea00 <_usb_device_interrupt_handler+0x6b4>)
    e922:	447b      	add	r3, pc
    e924:	220b      	movs	r2, #11
    e926:	18ba      	adds	r2, r7, r2
    e928:	7812      	ldrb	r2, [r2, #0]
    e92a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    e92c:	4b35      	ldr	r3, [pc, #212]	; (ea04 <_usb_device_interrupt_handler+0x6b8>)
    e92e:	447b      	add	r3, pc
    e930:	681b      	ldr	r3, [r3, #0]
    e932:	681a      	ldr	r2, [r3, #0]
    e934:	230b      	movs	r3, #11
    e936:	18fb      	adds	r3, r7, r3
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	3308      	adds	r3, #8
    e93c:	015b      	lsls	r3, r3, #5
    e93e:	18d3      	adds	r3, r2, r3
    e940:	3307      	adds	r3, #7
    e942:	781b      	ldrb	r3, [r3, #0]
    e944:	b2db      	uxtb	r3, r3
    e946:	001a      	movs	r2, r3
    e948:	2301      	movs	r3, #1
    e94a:	4013      	ands	r3, r2
    e94c:	d12b      	bne.n	e9a6 <_usb_device_interrupt_handler+0x65a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    e94e:	1d3b      	adds	r3, r7, #4
    e950:	881b      	ldrh	r3, [r3, #0]
    e952:	220c      	movs	r2, #12
    e954:	4013      	ands	r3, r2
    e956:	d028      	beq.n	e9aa <_usb_device_interrupt_handler+0x65e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    e958:	4b2b      	ldr	r3, [pc, #172]	; (ea08 <_usb_device_interrupt_handler+0x6bc>)
    e95a:	447b      	add	r3, pc
    e95c:	681a      	ldr	r2, [r3, #0]
    e95e:	230b      	movs	r3, #11
    e960:	18fb      	adds	r3, r7, r3
    e962:	781b      	ldrb	r3, [r3, #0]
    e964:	21d8      	movs	r1, #216	; 0xd8
    e966:	011b      	lsls	r3, r3, #4
    e968:	18d3      	adds	r3, r2, r3
    e96a:	185b      	adds	r3, r3, r1
    e96c:	681a      	ldr	r2, [r3, #0]
    e96e:	4b27      	ldr	r3, [pc, #156]	; (ea0c <_usb_device_interrupt_handler+0x6c0>)
    e970:	447b      	add	r3, pc
    e972:	681b      	ldr	r3, [r3, #0]
    e974:	4926      	ldr	r1, [pc, #152]	; (ea10 <_usb_device_interrupt_handler+0x6c4>)
    e976:	4479      	add	r1, pc
    e978:	0018      	movs	r0, r3
    e97a:	4790      	blx	r2
					}
					return;
    e97c:	e015      	b.n	e9aa <_usb_device_interrupt_handler+0x65e>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    e97e:	230b      	movs	r3, #11
    e980:	18fb      	adds	r3, r7, r3
    e982:	781a      	ldrb	r2, [r3, #0]
    e984:	230b      	movs	r3, #11
    e986:	18fb      	adds	r3, r7, r3
    e988:	3201      	adds	r2, #1
    e98a:	701a      	strb	r2, [r3, #0]
    e98c:	230b      	movs	r3, #11
    e98e:	18fb      	adds	r3, r7, r3
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	2b07      	cmp	r3, #7
    e994:	d800      	bhi.n	e998 <_usb_device_interrupt_handler+0x64c>
    e996:	e553      	b.n	e440 <_usb_device_interrupt_handler+0xf4>
    e998:	e008      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
					return;
    e99a:	46c0      	nop			; (mov r8, r8)
    e99c:	e006      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
					return;
    e99e:	46c0      	nop			; (mov r8, r8)
    e9a0:	e004      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
					return;
    e9a2:	46c0      	nop			; (mov r8, r8)
    e9a4:	e002      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
							return;
    e9a6:	46c0      	nop			; (mov r8, r8)
    e9a8:	e000      	b.n	e9ac <_usb_device_interrupt_handler+0x660>
					return;
    e9aa:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    e9ac:	46bd      	mov	sp, r7
    e9ae:	b005      	add	sp, #20
    e9b0:	bd90      	pop	{r4, r7, pc}
    e9b2:	46c0      	nop			; (mov r8, r8)
    e9b4:	1fff1f76 	.word	0x1fff1f76
    e9b8:	1fff1f54 	.word	0x1fff1f54
    e9bc:	1fff1f3c 	.word	0x1fff1f3c
    e9c0:	00000020 	.word	0x00000020
    e9c4:	1fff1f1c 	.word	0x1fff1f1c
    e9c8:	1fff1f04 	.word	0x1fff1f04
    e9cc:	1fff1ee2 	.word	0x1fff1ee2
    e9d0:	1fff1ed8 	.word	0x1fff1ed8
    e9d4:	1fff1eb4 	.word	0x1fff1eb4
    e9d8:	1fff1e96 	.word	0x1fff1e96
    e9dc:	1fff1e74 	.word	0x1fff1e74
    e9e0:	1fff1e5e 	.word	0x1fff1e5e
    e9e4:	1fff1e68 	.word	0x1fff1e68
    e9e8:	1fff1e42 	.word	0x1fff1e42
    e9ec:	1fff1e20 	.word	0x1fff1e20
    e9f0:	1fff1dbe 	.word	0x1fff1dbe
    e9f4:	1fff1da8 	.word	0x1fff1da8
    e9f8:	1fff1d84 	.word	0x1fff1d84
    e9fc:	1fff1d62 	.word	0x1fff1d62
    ea00:	1fff1d0e 	.word	0x1fff1d0e
    ea04:	1fff1cf2 	.word	0x1fff1cf2
    ea08:	1fff1cc6 	.word	0x1fff1cc6
    ea0c:	1fff1cb0 	.word	0x1fff1cb0
    ea10:	1fff1cba 	.word	0x1fff1cba

0000ea14 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	681a      	ldr	r2, [r3, #0]
    ea20:	687b      	ldr	r3, [r7, #4]
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	781b      	ldrb	r3, [r3, #0]
    ea26:	b2db      	uxtb	r3, r3
    ea28:	2102      	movs	r1, #2
    ea2a:	430b      	orrs	r3, r1
    ea2c:	b2db      	uxtb	r3, r3
    ea2e:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    ea30:	46c0      	nop			; (mov r8, r8)
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	681b      	ldr	r3, [r3, #0]
    ea36:	789b      	ldrb	r3, [r3, #2]
    ea38:	b2db      	uxtb	r3, r3
    ea3a:	2b02      	cmp	r3, #2
    ea3c:	d0f9      	beq.n	ea32 <usb_enable+0x1e>
}
    ea3e:	46c0      	nop			; (mov r8, r8)
    ea40:	46bd      	mov	sp, r7
    ea42:	b002      	add	sp, #8
    ea44:	bd80      	pop	{r7, pc}
	...

0000ea48 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    ea48:	b580      	push	{r7, lr}
    ea4a:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    ea4c:	4b09      	ldr	r3, [pc, #36]	; (ea74 <USB_Handler+0x2c>)
    ea4e:	447b      	add	r3, pc
    ea50:	681b      	ldr	r3, [r3, #0]
    ea52:	681b      	ldr	r3, [r3, #0]
    ea54:	781b      	ldrb	r3, [r3, #0]
    ea56:	061b      	lsls	r3, r3, #24
    ea58:	0fdb      	lsrs	r3, r3, #31
    ea5a:	b2db      	uxtb	r3, r3
    ea5c:	2b00      	cmp	r3, #0
    ea5e:	d003      	beq.n	ea68 <USB_Handler+0x20>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    ea60:	4b05      	ldr	r3, [pc, #20]	; (ea78 <USB_Handler+0x30>)
    ea62:	447b      	add	r3, pc
    ea64:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    ea66:	e002      	b.n	ea6e <USB_Handler+0x26>
		_usb_device_interrupt_handler();
    ea68:	4b04      	ldr	r3, [pc, #16]	; (ea7c <USB_Handler+0x34>)
    ea6a:	447b      	add	r3, pc
    ea6c:	4798      	blx	r3
}
    ea6e:	46c0      	nop			; (mov r8, r8)
    ea70:	46bd      	mov	sp, r7
    ea72:	bd80      	pop	{r7, pc}
    ea74:	1fff1bd2 	.word	0x1fff1bd2
    ea78:	ffffe32b 	.word	0xffffe32b
    ea7c:	fffff8df 	.word	0xfffff8df

0000ea80 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    ea80:	b580      	push	{r7, lr}
    ea82:	b082      	sub	sp, #8
    ea84:	af00      	add	r7, sp, #0
    ea86:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    ea88:	687b      	ldr	r3, [r7, #4]
    ea8a:	2200      	movs	r2, #0
    ea8c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    ea8e:	687b      	ldr	r3, [r7, #4]
    ea90:	2201      	movs	r2, #1
    ea92:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    ea94:	687b      	ldr	r3, [r7, #4]
    ea96:	2200      	movs	r2, #0
    ea98:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    ea9a:	687b      	ldr	r3, [r7, #4]
    ea9c:	2201      	movs	r2, #1
    ea9e:	70da      	strb	r2, [r3, #3]
}
    eaa0:	46c0      	nop			; (mov r8, r8)
    eaa2:	46bd      	mov	sp, r7
    eaa4:	b002      	add	sp, #8
    eaa6:	bd80      	pop	{r7, pc}

0000eaa8 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    eaa8:	b590      	push	{r4, r7, lr}
    eaaa:	b08d      	sub	sp, #52	; 0x34
    eaac:	af00      	add	r7, sp, #0
    eaae:	60f8      	str	r0, [r7, #12]
    eab0:	60b9      	str	r1, [r7, #8]
    eab2:	607a      	str	r2, [r7, #4]
    eab4:	4ccc      	ldr	r4, [pc, #816]	; (ede8 <usb_init+0x340>)
    eab6:	447c      	add	r4, pc
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    eab8:	4bcc      	ldr	r3, [pc, #816]	; (edec <usb_init+0x344>)
    eaba:	58e3      	ldr	r3, [r4, r3]
    eabc:	2200      	movs	r2, #0
    eabe:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    eac0:	4bcb      	ldr	r3, [pc, #812]	; (edf0 <usb_init+0x348>)
    eac2:	447b      	add	r3, pc
    eac4:	68fa      	ldr	r2, [r7, #12]
    eac6:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    eac8:	68fb      	ldr	r3, [r7, #12]
    eaca:	68ba      	ldr	r2, [r7, #8]
    eacc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    eace:	2120      	movs	r1, #32
    ead0:	2001      	movs	r0, #1
    ead2:	4bc8      	ldr	r3, [pc, #800]	; (edf4 <usb_init+0x34c>)
    ead4:	447b      	add	r3, pc
    ead6:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    ead8:	2318      	movs	r3, #24
    eada:	18fb      	adds	r3, r7, r3
    eadc:	0018      	movs	r0, r3
    eade:	4bc6      	ldr	r3, [pc, #792]	; (edf8 <usb_init+0x350>)
    eae0:	447b      	add	r3, pc
    eae2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    eae4:	2318      	movs	r3, #24
    eae6:	18fb      	adds	r3, r7, r3
    eae8:	2206      	movs	r2, #6
    eaea:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    eaec:	2318      	movs	r3, #24
    eaee:	18fb      	adds	r3, r7, r3
    eaf0:	0019      	movs	r1, r3
    eaf2:	2018      	movs	r0, #24
    eaf4:	4bc1      	ldr	r3, [pc, #772]	; (edfc <usb_init+0x354>)
    eaf6:	58e3      	ldr	r3, [r4, r3]
    eaf8:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    eafa:	2318      	movs	r3, #24
    eafc:	18fb      	adds	r3, r7, r3
    eafe:	2206      	movs	r2, #6
    eb00:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    eb02:	2318      	movs	r3, #24
    eb04:	18fb      	adds	r3, r7, r3
    eb06:	0019      	movs	r1, r3
    eb08:	2019      	movs	r0, #25
    eb0a:	4bbc      	ldr	r3, [pc, #752]	; (edfc <usb_init+0x354>)
    eb0c:	58e3      	ldr	r3, [r4, r3]
    eb0e:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    eb10:	2314      	movs	r3, #20
    eb12:	18fb      	adds	r3, r7, r3
    eb14:	0018      	movs	r0, r3
    eb16:	4bba      	ldr	r3, [pc, #744]	; (ee00 <usb_init+0x358>)
    eb18:	447b      	add	r3, pc
    eb1a:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    eb1c:	687b      	ldr	r3, [r7, #4]
    eb1e:	789a      	ldrb	r2, [r3, #2]
    eb20:	2314      	movs	r3, #20
    eb22:	18fb      	adds	r3, r7, r3
    eb24:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    eb26:	2314      	movs	r3, #20
    eb28:	18fb      	adds	r3, r7, r3
    eb2a:	0019      	movs	r1, r3
    eb2c:	2006      	movs	r0, #6
    eb2e:	4bb5      	ldr	r3, [pc, #724]	; (ee04 <usb_init+0x35c>)
    eb30:	58e3      	ldr	r3, [r4, r3]
    eb32:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    eb34:	2006      	movs	r0, #6
    eb36:	4bb4      	ldr	r3, [pc, #720]	; (ee08 <usb_init+0x360>)
    eb38:	58e3      	ldr	r3, [r4, r3]
    eb3a:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    eb3c:	68ba      	ldr	r2, [r7, #8]
    eb3e:	7813      	ldrb	r3, [r2, #0]
    eb40:	2101      	movs	r1, #1
    eb42:	430b      	orrs	r3, r1
    eb44:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    eb46:	46c0      	nop			; (mov r8, r8)
    eb48:	68bb      	ldr	r3, [r7, #8]
    eb4a:	789b      	ldrb	r3, [r3, #2]
    eb4c:	07db      	lsls	r3, r3, #31
    eb4e:	0fdb      	lsrs	r3, r3, #31
    eb50:	b2db      	uxtb	r3, r3
    eb52:	2b00      	cmp	r3, #0
    eb54:	d1f8      	bne.n	eb48 <usb_init+0xa0>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    eb56:	4aad      	ldr	r2, [pc, #692]	; (ee0c <usb_init+0x364>)
    eb58:	78d3      	ldrb	r3, [r2, #3]
    eb5a:	2103      	movs	r1, #3
    eb5c:	438b      	bics	r3, r1
    eb5e:	1c19      	adds	r1, r3, #0
    eb60:	2302      	movs	r3, #2
    eb62:	430b      	orrs	r3, r1
    eb64:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    eb66:	4aa9      	ldr	r2, [pc, #676]	; (ee0c <usb_init+0x364>)
    eb68:	78d3      	ldrb	r3, [r2, #3]
    eb6a:	210c      	movs	r1, #12
    eb6c:	438b      	bics	r3, r1
    eb6e:	1c19      	adds	r1, r3, #0
    eb70:	2308      	movs	r3, #8
    eb72:	430b      	orrs	r3, r1
    eb74:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    eb76:	4ba6      	ldr	r3, [pc, #664]	; (ee10 <usb_init+0x368>)
    eb78:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    eb7a:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    eb7c:	221f      	movs	r2, #31
    eb7e:	4013      	ands	r3, r2
    eb80:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb84:	2b1f      	cmp	r3, #31
    eb86:	d101      	bne.n	eb8c <usb_init+0xe4>
		pad_transn = 5;
    eb88:	2305      	movs	r3, #5
    eb8a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb8e:	b2db      	uxtb	r3, r3
    eb90:	1c1a      	adds	r2, r3, #0
    eb92:	231f      	movs	r3, #31
    eb94:	4013      	ands	r3, r2
    eb96:	b2d9      	uxtb	r1, r3
    eb98:	68ba      	ldr	r2, [r7, #8]
    eb9a:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    eb9c:	1c08      	adds	r0, r1, #0
    eb9e:	211f      	movs	r1, #31
    eba0:	4001      	ands	r1, r0
    eba2:	0188      	lsls	r0, r1, #6
    eba4:	499b      	ldr	r1, [pc, #620]	; (ee14 <usb_init+0x36c>)
    eba6:	400b      	ands	r3, r1
    eba8:	1c19      	adds	r1, r3, #0
    ebaa:	1c03      	adds	r3, r0, #0
    ebac:	430b      	orrs	r3, r1
    ebae:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    ebb0:	4b97      	ldr	r3, [pc, #604]	; (ee10 <usb_init+0x368>)
    ebb2:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    ebb4:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    ebb6:	221f      	movs	r2, #31
    ebb8:	4013      	ands	r3, r2
    ebba:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    ebbc:	6a3b      	ldr	r3, [r7, #32]
    ebbe:	2b1f      	cmp	r3, #31
    ebc0:	d101      	bne.n	ebc6 <usb_init+0x11e>
		pad_transp = 29;
    ebc2:	231d      	movs	r3, #29
    ebc4:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    ebc6:	6a3b      	ldr	r3, [r7, #32]
    ebc8:	b2db      	uxtb	r3, r3
    ebca:	1c1a      	adds	r2, r3, #0
    ebcc:	231f      	movs	r3, #31
    ebce:	4013      	ands	r3, r2
    ebd0:	b2d9      	uxtb	r1, r3
    ebd2:	68ba      	ldr	r2, [r7, #8]
    ebd4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    ebd6:	1c08      	adds	r0, r1, #0
    ebd8:	211f      	movs	r1, #31
    ebda:	4008      	ands	r0, r1
    ebdc:	211f      	movs	r1, #31
    ebde:	438b      	bics	r3, r1
    ebe0:	1c19      	adds	r1, r3, #0
    ebe2:	1c03      	adds	r3, r0, #0
    ebe4:	430b      	orrs	r3, r1
    ebe6:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    ebe8:	4b89      	ldr	r3, [pc, #548]	; (ee10 <usb_init+0x368>)
    ebea:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    ebec:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    ebee:	2207      	movs	r2, #7
    ebf0:	4013      	ands	r3, r2
    ebf2:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    ebf4:	69fb      	ldr	r3, [r7, #28]
    ebf6:	2b07      	cmp	r3, #7
    ebf8:	d101      	bne.n	ebfe <usb_init+0x156>
		pad_trim = 3;
    ebfa:	2303      	movs	r3, #3
    ebfc:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    ebfe:	69fb      	ldr	r3, [r7, #28]
    ec00:	b2db      	uxtb	r3, r3
    ec02:	1c1a      	adds	r2, r3, #0
    ec04:	2307      	movs	r3, #7
    ec06:	4013      	ands	r3, r2
    ec08:	b2d9      	uxtb	r1, r3
    ec0a:	68ba      	ldr	r2, [r7, #8]
    ec0c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    ec0e:	1c08      	adds	r0, r1, #0
    ec10:	2107      	movs	r1, #7
    ec12:	4001      	ands	r1, r0
    ec14:	0308      	lsls	r0, r1, #12
    ec16:	4980      	ldr	r1, [pc, #512]	; (ee18 <usb_init+0x370>)
    ec18:	400b      	ands	r3, r1
    ec1a:	1c19      	adds	r1, r3, #0
    ec1c:	1c03      	adds	r3, r0, #0
    ec1e:	430b      	orrs	r3, r1
    ec20:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    ec22:	687b      	ldr	r3, [r7, #4]
    ec24:	7819      	ldrb	r1, [r3, #0]
    ec26:	68ba      	ldr	r2, [r7, #8]
    ec28:	7813      	ldrb	r3, [r2, #0]
    ec2a:	01c8      	lsls	r0, r1, #7
    ec2c:	217f      	movs	r1, #127	; 0x7f
    ec2e:	400b      	ands	r3, r1
    ec30:	1c19      	adds	r1, r3, #0
    ec32:	1c03      	adds	r3, r0, #0
    ec34:	430b      	orrs	r3, r1
    ec36:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    ec38:	687b      	ldr	r3, [r7, #4]
    ec3a:	7859      	ldrb	r1, [r3, #1]
    ec3c:	68ba      	ldr	r2, [r7, #8]
    ec3e:	7813      	ldrb	r3, [r2, #0]
    ec40:	2001      	movs	r0, #1
    ec42:	4001      	ands	r1, r0
    ec44:	0088      	lsls	r0, r1, #2
    ec46:	2104      	movs	r1, #4
    ec48:	438b      	bics	r3, r1
    ec4a:	1c19      	adds	r1, r3, #0
    ec4c:	1c03      	adds	r3, r0, #0
    ec4e:	430b      	orrs	r3, r1
    ec50:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    ec52:	4b72      	ldr	r3, [pc, #456]	; (ee1c <usb_init+0x374>)
    ec54:	58e3      	ldr	r3, [r4, r3]
    ec56:	001a      	movs	r2, r3
    ec58:	68bb      	ldr	r3, [r7, #8]
    ec5a:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    ec5c:	687b      	ldr	r3, [r7, #4]
    ec5e:	78db      	ldrb	r3, [r3, #3]
    ec60:	2b01      	cmp	r3, #1
    ec62:	d106      	bne.n	ec72 <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    ec64:	68fb      	ldr	r3, [r7, #12]
    ec66:	681a      	ldr	r2, [r3, #0]
    ec68:	8913      	ldrh	r3, [r2, #8]
    ec6a:	210c      	movs	r1, #12
    ec6c:	438b      	bics	r3, r1
    ec6e:	8113      	strh	r3, [r2, #8]
    ec70:	e00c      	b.n	ec8c <usb_init+0x1e4>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    ec72:	687b      	ldr	r3, [r7, #4]
    ec74:	78db      	ldrb	r3, [r3, #3]
    ec76:	2b00      	cmp	r3, #0
    ec78:	d108      	bne.n	ec8c <usb_init+0x1e4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    ec7a:	68fb      	ldr	r3, [r7, #12]
    ec7c:	681a      	ldr	r2, [r3, #0]
    ec7e:	8913      	ldrh	r3, [r2, #8]
    ec80:	210c      	movs	r1, #12
    ec82:	438b      	bics	r3, r1
    ec84:	1c19      	adds	r1, r3, #0
    ec86:	2304      	movs	r3, #4
    ec88:	430b      	orrs	r3, r1
    ec8a:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    ec8c:	2380      	movs	r3, #128	; 0x80
    ec8e:	005a      	lsls	r2, r3, #1
    ec90:	4b62      	ldr	r3, [pc, #392]	; (ee1c <usb_init+0x374>)
    ec92:	58e3      	ldr	r3, [r4, r3]
    ec94:	2100      	movs	r1, #0
    ec96:	0018      	movs	r0, r3
    ec98:	4b61      	ldr	r3, [pc, #388]	; (ee20 <usb_init+0x378>)
    ec9a:	58e3      	ldr	r3, [r4, r3]
    ec9c:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    ec9e:	2300      	movs	r3, #0
    eca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    eca2:	e009      	b.n	ecb8 <usb_init+0x210>
		module_inst->host_callback[i] = NULL;
    eca4:	68fa      	ldr	r2, [r7, #12]
    eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eca8:	009b      	lsls	r3, r3, #2
    ecaa:	18d3      	adds	r3, r2, r3
    ecac:	3304      	adds	r3, #4
    ecae:	2200      	movs	r2, #0
    ecb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecb4:	3301      	adds	r3, #1
    ecb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecba:	2b07      	cmp	r3, #7
    ecbc:	d9f2      	bls.n	eca4 <usb_init+0x1fc>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    ecbe:	2300      	movs	r3, #0
    ecc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecc2:	e016      	b.n	ecf2 <usb_init+0x24a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    ecc4:	2300      	movs	r3, #0
    ecc6:	62bb      	str	r3, [r7, #40]	; 0x28
    ecc8:	e00d      	b.n	ece6 <usb_init+0x23e>
			module_inst->host_pipe_callback[i][j] = NULL;
    ecca:	68fa      	ldr	r2, [r7, #12]
    eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecce:	0099      	lsls	r1, r3, #2
    ecd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecd2:	18cb      	adds	r3, r1, r3
    ecd4:	3308      	adds	r3, #8
    ecd6:	009b      	lsls	r3, r3, #2
    ecd8:	18d3      	adds	r3, r2, r3
    ecda:	3304      	adds	r3, #4
    ecdc:	2200      	movs	r2, #0
    ecde:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ece2:	3301      	adds	r3, #1
    ece4:	62bb      	str	r3, [r7, #40]	; 0x28
    ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ece8:	2b03      	cmp	r3, #3
    ecea:	d9ee      	bls.n	ecca <usb_init+0x222>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecee:	3301      	adds	r3, #1
    ecf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecf4:	2b07      	cmp	r3, #7
    ecf6:	d9e5      	bls.n	ecc4 <usb_init+0x21c>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    ecf8:	68fb      	ldr	r3, [r7, #12]
    ecfa:	22a4      	movs	r2, #164	; 0xa4
    ecfc:	2100      	movs	r1, #0
    ecfe:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    ed00:	68fb      	ldr	r3, [r7, #12]
    ed02:	22a5      	movs	r2, #165	; 0xa5
    ed04:	2100      	movs	r1, #0
    ed06:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    ed08:	2300      	movs	r3, #0
    ed0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed0c:	e010      	b.n	ed30 <usb_init+0x288>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    ed0e:	68fa      	ldr	r2, [r7, #12]
    ed10:	21a6      	movs	r1, #166	; 0xa6
    ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed14:	18d3      	adds	r3, r2, r3
    ed16:	185b      	adds	r3, r3, r1
    ed18:	2200      	movs	r2, #0
    ed1a:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    ed1c:	68fa      	ldr	r2, [r7, #12]
    ed1e:	21ae      	movs	r1, #174	; 0xae
    ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed22:	18d3      	adds	r3, r2, r3
    ed24:	185b      	adds	r3, r3, r1
    ed26:	2200      	movs	r2, #0
    ed28:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    ed2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed2c:	3301      	adds	r3, #1
    ed2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed32:	2b07      	cmp	r3, #7
    ed34:	d9eb      	bls.n	ed0e <usb_init+0x266>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    ed36:	2300      	movs	r3, #0
    ed38:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed3a:	e008      	b.n	ed4e <usb_init+0x2a6>
		module_inst->device_callback[i] = NULL;
    ed3c:	68fb      	ldr	r3, [r7, #12]
    ed3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ed40:	322e      	adds	r2, #46	; 0x2e
    ed42:	0092      	lsls	r2, r2, #2
    ed44:	2100      	movs	r1, #0
    ed46:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed4a:	3301      	adds	r3, #1
    ed4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed50:	2b06      	cmp	r3, #6
    ed52:	d9f3      	bls.n	ed3c <usb_init+0x294>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    ed54:	2300      	movs	r3, #0
    ed56:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed58:	e016      	b.n	ed88 <usb_init+0x2e0>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    ed5a:	2300      	movs	r3, #0
    ed5c:	62bb      	str	r3, [r7, #40]	; 0x28
    ed5e:	e00d      	b.n	ed7c <usb_init+0x2d4>
			module_inst->device_endpoint_callback[i][j] = NULL;
    ed60:	68fa      	ldr	r2, [r7, #12]
    ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed64:	0099      	lsls	r1, r3, #2
    ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed68:	18cb      	adds	r3, r1, r3
    ed6a:	3334      	adds	r3, #52	; 0x34
    ed6c:	009b      	lsls	r3, r3, #2
    ed6e:	18d3      	adds	r3, r2, r3
    ed70:	3304      	adds	r3, #4
    ed72:	2200      	movs	r2, #0
    ed74:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed78:	3301      	adds	r3, #1
    ed7a:	62bb      	str	r3, [r7, #40]	; 0x28
    ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed7e:	2b03      	cmp	r3, #3
    ed80:	d9ee      	bls.n	ed60 <usb_init+0x2b8>
	for (i = 0; i < USB_EPT_NUM; i++) {
    ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed84:	3301      	adds	r3, #1
    ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed8a:	2b07      	cmp	r3, #7
    ed8c:	d9e5      	bls.n	ed5a <usb_init+0x2b2>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    ed8e:	68fa      	ldr	r2, [r7, #12]
    ed90:	23aa      	movs	r3, #170	; 0xaa
    ed92:	005b      	lsls	r3, r3, #1
    ed94:	2100      	movs	r1, #0
    ed96:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    ed98:	68fa      	ldr	r2, [r7, #12]
    ed9a:	23ab      	movs	r3, #171	; 0xab
    ed9c:	005b      	lsls	r3, r3, #1
    ed9e:	2100      	movs	r1, #0
    eda0:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    eda2:	2300      	movs	r3, #0
    eda4:	62bb      	str	r3, [r7, #40]	; 0x28
    eda6:	e012      	b.n	edce <usb_init+0x326>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    eda8:	68f9      	ldr	r1, [r7, #12]
    edaa:	23ac      	movs	r3, #172	; 0xac
    edac:	005b      	lsls	r3, r3, #1
    edae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    edb0:	188a      	adds	r2, r1, r2
    edb2:	18d3      	adds	r3, r2, r3
    edb4:	2200      	movs	r2, #0
    edb6:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    edb8:	68f9      	ldr	r1, [r7, #12]
    edba:	23b0      	movs	r3, #176	; 0xb0
    edbc:	005b      	lsls	r3, r3, #1
    edbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    edc0:	188a      	adds	r2, r1, r2
    edc2:	18d3      	adds	r3, r2, r3
    edc4:	2200      	movs	r2, #0
    edc6:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edca:	3301      	adds	r3, #1
    edcc:	62bb      	str	r3, [r7, #40]	; 0x28
    edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edd0:	2b07      	cmp	r3, #7
    edd2:	d9e9      	bls.n	eda8 <usb_init+0x300>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    edd4:	2007      	movs	r0, #7
    edd6:	4b13      	ldr	r3, [pc, #76]	; (ee24 <usb_init+0x37c>)
    edd8:	447b      	add	r3, pc
    edda:	4798      	blx	r3

	return STATUS_OK;
    eddc:	2300      	movs	r3, #0
}
    edde:	0018      	movs	r0, r3
    ede0:	46bd      	mov	sp, r7
    ede2:	b00d      	add	sp, #52	; 0x34
    ede4:	bd90      	pop	{r4, r7, pc}
    ede6:	46c0      	nop			; (mov r8, r8)
    ede8:	000033aa 	.word	0x000033aa
    edec:	000000ac 	.word	0x000000ac
    edf0:	1fff1b5e 	.word	0x1fff1b5e
    edf4:	ffffe209 	.word	0xffffe209
    edf8:	ffffe259 	.word	0xffffe259
    edfc:	000002b8 	.word	0x000002b8
    ee00:	ffffe1ad 	.word	0xffffe1ad
    ee04:	000000b0 	.word	0x000000b0
    ee08:	00000238 	.word	0x00000238
    ee0c:	41005000 	.word	0x41005000
    ee10:	00806024 	.word	0x00806024
    ee14:	fffff83f 	.word	0xfffff83f
    ee18:	ffff8fff 	.word	0xffff8fff
    ee1c:	00000020 	.word	0x00000020
    ee20:	000001f8 	.word	0x000001f8
    ee24:	ffffdf89 	.word	0xffffdf89

0000ee28 <system_pinmux_get_group_from_gpio_pin>:
{
    ee28:	b580      	push	{r7, lr}
    ee2a:	b084      	sub	sp, #16
    ee2c:	af00      	add	r7, sp, #0
    ee2e:	0002      	movs	r2, r0
    ee30:	1dfb      	adds	r3, r7, #7
    ee32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ee34:	230f      	movs	r3, #15
    ee36:	18fb      	adds	r3, r7, r3
    ee38:	1dfa      	adds	r2, r7, #7
    ee3a:	7812      	ldrb	r2, [r2, #0]
    ee3c:	09d2      	lsrs	r2, r2, #7
    ee3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ee40:	230e      	movs	r3, #14
    ee42:	18fb      	adds	r3, r7, r3
    ee44:	1dfa      	adds	r2, r7, #7
    ee46:	7812      	ldrb	r2, [r2, #0]
    ee48:	0952      	lsrs	r2, r2, #5
    ee4a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ee4c:	4b0d      	ldr	r3, [pc, #52]	; (ee84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ee4e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ee50:	230f      	movs	r3, #15
    ee52:	18fb      	adds	r3, r7, r3
    ee54:	781b      	ldrb	r3, [r3, #0]
    ee56:	2b00      	cmp	r3, #0
    ee58:	d10f      	bne.n	ee7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ee5a:	230f      	movs	r3, #15
    ee5c:	18fb      	adds	r3, r7, r3
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	009b      	lsls	r3, r3, #2
    ee62:	2210      	movs	r2, #16
    ee64:	4694      	mov	ip, r2
    ee66:	44bc      	add	ip, r7
    ee68:	4463      	add	r3, ip
    ee6a:	3b08      	subs	r3, #8
    ee6c:	681a      	ldr	r2, [r3, #0]
    ee6e:	230e      	movs	r3, #14
    ee70:	18fb      	adds	r3, r7, r3
    ee72:	781b      	ldrb	r3, [r3, #0]
    ee74:	01db      	lsls	r3, r3, #7
    ee76:	18d3      	adds	r3, r2, r3
    ee78:	e000      	b.n	ee7c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ee7a:	2300      	movs	r3, #0
}
    ee7c:	0018      	movs	r0, r3
    ee7e:	46bd      	mov	sp, r7
    ee80:	b004      	add	sp, #16
    ee82:	bd80      	pop	{r7, pc}
    ee84:	41004400 	.word	0x41004400

0000ee88 <port_get_group_from_gpio_pin>:
{
    ee88:	b580      	push	{r7, lr}
    ee8a:	b082      	sub	sp, #8
    ee8c:	af00      	add	r7, sp, #0
    ee8e:	0002      	movs	r2, r0
    ee90:	1dfb      	adds	r3, r7, #7
    ee92:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ee94:	1dfb      	adds	r3, r7, #7
    ee96:	781b      	ldrb	r3, [r3, #0]
    ee98:	0018      	movs	r0, r3
    ee9a:	4b04      	ldr	r3, [pc, #16]	; (eeac <port_get_group_from_gpio_pin+0x24>)
    ee9c:	447b      	add	r3, pc
    ee9e:	4798      	blx	r3
    eea0:	0003      	movs	r3, r0
}
    eea2:	0018      	movs	r0, r3
    eea4:	46bd      	mov	sp, r7
    eea6:	b002      	add	sp, #8
    eea8:	bd80      	pop	{r7, pc}
    eeaa:	46c0      	nop			; (mov r8, r8)
    eeac:	ffffff89 	.word	0xffffff89

0000eeb0 <port_get_config_defaults>:
{
    eeb0:	b580      	push	{r7, lr}
    eeb2:	b082      	sub	sp, #8
    eeb4:	af00      	add	r7, sp, #0
    eeb6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	2200      	movs	r2, #0
    eebc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	2201      	movs	r2, #1
    eec2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    eec4:	687b      	ldr	r3, [r7, #4]
    eec6:	2200      	movs	r2, #0
    eec8:	709a      	strb	r2, [r3, #2]
}
    eeca:	46c0      	nop			; (mov r8, r8)
    eecc:	46bd      	mov	sp, r7
    eece:	b002      	add	sp, #8
    eed0:	bd80      	pop	{r7, pc}
	...

0000eed4 <port_pin_set_output_level>:
{
    eed4:	b580      	push	{r7, lr}
    eed6:	b084      	sub	sp, #16
    eed8:	af00      	add	r7, sp, #0
    eeda:	0002      	movs	r2, r0
    eedc:	1dfb      	adds	r3, r7, #7
    eede:	701a      	strb	r2, [r3, #0]
    eee0:	1dbb      	adds	r3, r7, #6
    eee2:	1c0a      	adds	r2, r1, #0
    eee4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    eee6:	1dfb      	adds	r3, r7, #7
    eee8:	781b      	ldrb	r3, [r3, #0]
    eeea:	0018      	movs	r0, r3
    eeec:	4b0d      	ldr	r3, [pc, #52]	; (ef24 <port_pin_set_output_level+0x50>)
    eeee:	447b      	add	r3, pc
    eef0:	4798      	blx	r3
    eef2:	0003      	movs	r3, r0
    eef4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    eef6:	1dfb      	adds	r3, r7, #7
    eef8:	781b      	ldrb	r3, [r3, #0]
    eefa:	221f      	movs	r2, #31
    eefc:	4013      	ands	r3, r2
    eefe:	2201      	movs	r2, #1
    ef00:	409a      	lsls	r2, r3
    ef02:	0013      	movs	r3, r2
    ef04:	60bb      	str	r3, [r7, #8]
	if (level) {
    ef06:	1dbb      	adds	r3, r7, #6
    ef08:	781b      	ldrb	r3, [r3, #0]
    ef0a:	2b00      	cmp	r3, #0
    ef0c:	d003      	beq.n	ef16 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    ef0e:	68fb      	ldr	r3, [r7, #12]
    ef10:	68ba      	ldr	r2, [r7, #8]
    ef12:	619a      	str	r2, [r3, #24]
}
    ef14:	e002      	b.n	ef1c <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    ef16:	68fb      	ldr	r3, [r7, #12]
    ef18:	68ba      	ldr	r2, [r7, #8]
    ef1a:	615a      	str	r2, [r3, #20]
}
    ef1c:	46c0      	nop			; (mov r8, r8)
    ef1e:	46bd      	mov	sp, r7
    ef20:	b004      	add	sp, #16
    ef22:	bd80      	pop	{r7, pc}
    ef24:	ffffff97 	.word	0xffffff97

0000ef28 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    ef28:	b590      	push	{r4, r7, lr}
    ef2a:	b083      	sub	sp, #12
    ef2c:	af00      	add	r7, sp, #0
    ef2e:	4ca5      	ldr	r4, [pc, #660]	; (f1c4 <system_board_init+0x29c>)
    ef30:	447c      	add	r4, pc
	// Initialize all IO's to turn everything off and low-power
	struct port_config config;
	port_get_config_defaults(&config);
    ef32:	1d3b      	adds	r3, r7, #4
    ef34:	0018      	movs	r0, r3
    ef36:	4ba4      	ldr	r3, [pc, #656]	; (f1c8 <system_board_init+0x2a0>)
    ef38:	447b      	add	r3, pc
    ef3a:	4798      	blx	r3

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    ef3c:	1d3b      	adds	r3, r7, #4
    ef3e:	2200      	movs	r2, #0
    ef40:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    ef42:	1d3b      	adds	r3, r7, #4
    ef44:	2201      	movs	r2, #1
    ef46:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    ef48:	1d3b      	adds	r3, r7, #4
    ef4a:	2200      	movs	r2, #0
    ef4c:	709a      	strb	r2, [r3, #2]
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    ef4e:	1d3b      	adds	r3, r7, #4
    ef50:	0019      	movs	r1, r3
    ef52:	2013      	movs	r0, #19
    ef54:	4b9d      	ldr	r3, [pc, #628]	; (f1cc <system_board_init+0x2a4>)
    ef56:	58e3      	ldr	r3, [r4, r3]
    ef58:	4798      	blx	r3
    ef5a:	1d3b      	adds	r3, r7, #4
    ef5c:	0019      	movs	r1, r3
    ef5e:	2010      	movs	r0, #16
    ef60:	4b9a      	ldr	r3, [pc, #616]	; (f1cc <system_board_init+0x2a4>)
    ef62:	58e3      	ldr	r3, [r4, r3]
    ef64:	4798      	blx	r3
    ef66:	1d3b      	adds	r3, r7, #4
    ef68:	0019      	movs	r1, r3
    ef6a:	2011      	movs	r0, #17
    ef6c:	4b97      	ldr	r3, [pc, #604]	; (f1cc <system_board_init+0x2a4>)
    ef6e:	58e3      	ldr	r3, [r4, r3]
    ef70:	4798      	blx	r3
    ef72:	1d3b      	adds	r3, r7, #4
    ef74:	0019      	movs	r1, r3
    ef76:	2012      	movs	r0, #18
    ef78:	4b94      	ldr	r3, [pc, #592]	; (f1cc <system_board_init+0x2a4>)
    ef7a:	58e3      	ldr	r3, [r4, r3]
    ef7c:	4798      	blx	r3
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    ef7e:	1d3b      	adds	r3, r7, #4
    ef80:	2200      	movs	r2, #0
    ef82:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    ef84:	1d3b      	adds	r3, r7, #4
    ef86:	2200      	movs	r2, #0
    ef88:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    ef8a:	1d3b      	adds	r3, r7, #4
    ef8c:	2201      	movs	r2, #1
    ef8e:	709a      	strb	r2, [r3, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    ef90:	1d3b      	adds	r3, r7, #4
    ef92:	0019      	movs	r1, r3
    ef94:	2014      	movs	r0, #20
    ef96:	4b8d      	ldr	r3, [pc, #564]	; (f1cc <system_board_init+0x2a4>)
    ef98:	58e3      	ldr	r3, [r4, r3]
    ef9a:	4798      	blx	r3
    ef9c:	1d3b      	adds	r3, r7, #4
    ef9e:	0019      	movs	r1, r3
    efa0:	2015      	movs	r0, #21
    efa2:	4b8a      	ldr	r3, [pc, #552]	; (f1cc <system_board_init+0x2a4>)
    efa4:	58e3      	ldr	r3, [r4, r3]
    efa6:	4798      	blx	r3

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    efa8:	1d3b      	adds	r3, r7, #4
    efaa:	2200      	movs	r2, #0
    efac:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    efae:	1d3b      	adds	r3, r7, #4
    efb0:	2201      	movs	r2, #1
    efb2:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    efb4:	1d3b      	adds	r3, r7, #4
    efb6:	2201      	movs	r2, #1
    efb8:	709a      	strb	r2, [r3, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    efba:	1d3b      	adds	r3, r7, #4
    efbc:	0019      	movs	r1, r3
    efbe:	2018      	movs	r0, #24
    efc0:	4b82      	ldr	r3, [pc, #520]	; (f1cc <system_board_init+0x2a4>)
    efc2:	58e3      	ldr	r3, [r4, r3]
    efc4:	4798      	blx	r3
    efc6:	1d3b      	adds	r3, r7, #4
    efc8:	0019      	movs	r1, r3
    efca:	2019      	movs	r0, #25
    efcc:	4b7f      	ldr	r3, [pc, #508]	; (f1cc <system_board_init+0x2a4>)
    efce:	58e3      	ldr	r3, [r4, r3]
    efd0:	4798      	blx	r3

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    efd2:	1d3b      	adds	r3, r7, #4
    efd4:	2200      	movs	r2, #0
    efd6:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    efd8:	1d3b      	adds	r3, r7, #4
    efda:	2202      	movs	r2, #2
    efdc:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    efde:	1d3b      	adds	r3, r7, #4
    efe0:	2201      	movs	r2, #1
    efe2:	709a      	strb	r2, [r3, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    efe4:	1d3b      	adds	r3, r7, #4
    efe6:	0019      	movs	r1, r3
    efe8:	2036      	movs	r0, #54	; 0x36
    efea:	4b78      	ldr	r3, [pc, #480]	; (f1cc <system_board_init+0x2a4>)
    efec:	58e3      	ldr	r3, [r4, r3]
    efee:	4798      	blx	r3
    eff0:	1d3b      	adds	r3, r7, #4
    eff2:	0019      	movs	r1, r3
    eff4:	2022      	movs	r0, #34	; 0x22
    eff6:	4b75      	ldr	r3, [pc, #468]	; (f1cc <system_board_init+0x2a4>)
    eff8:	58e3      	ldr	r3, [r4, r3]
    effa:	4798      	blx	r3
    effc:	1d3b      	adds	r3, r7, #4
    effe:	0019      	movs	r1, r3
    f000:	2037      	movs	r0, #55	; 0x37
    f002:	4b72      	ldr	r3, [pc, #456]	; (f1cc <system_board_init+0x2a4>)
    f004:	58e3      	ldr	r3, [r4, r3]
    f006:	4798      	blx	r3
    f008:	1d3b      	adds	r3, r7, #4
    f00a:	0019      	movs	r1, r3
    f00c:	2023      	movs	r0, #35	; 0x23
    f00e:	4b6f      	ldr	r3, [pc, #444]	; (f1cc <system_board_init+0x2a4>)
    f010:	58e3      	ldr	r3, [r4, r3]
    f012:	4798      	blx	r3
    f014:	1d3b      	adds	r3, r7, #4
    f016:	0019      	movs	r1, r3
    f018:	202a      	movs	r0, #42	; 0x2a
    f01a:	4b6c      	ldr	r3, [pc, #432]	; (f1cc <system_board_init+0x2a4>)
    f01c:	58e3      	ldr	r3, [r4, r3]
    f01e:	4798      	blx	r3

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    f020:	1d3b      	adds	r3, r7, #4
    f022:	2200      	movs	r2, #0
    f024:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    f026:	1d3b      	adds	r3, r7, #4
    f028:	2201      	movs	r2, #1
    f02a:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    f02c:	1d3b      	adds	r3, r7, #4
    f02e:	2200      	movs	r2, #0
    f030:	709a      	strb	r2, [r3, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    f032:	1d3b      	adds	r3, r7, #4
    f034:	0019      	movs	r1, r3
    f036:	2003      	movs	r0, #3
    f038:	4b64      	ldr	r3, [pc, #400]	; (f1cc <system_board_init+0x2a4>)
    f03a:	58e3      	ldr	r3, [r4, r3]
    f03c:	4798      	blx	r3
    f03e:	1d3b      	adds	r3, r7, #4
    f040:	0019      	movs	r1, r3
    f042:	201f      	movs	r0, #31
    f044:	4b61      	ldr	r3, [pc, #388]	; (f1cc <system_board_init+0x2a4>)
    f046:	58e3      	ldr	r3, [r4, r3]
    f048:	4798      	blx	r3

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    f04a:	1d3b      	adds	r3, r7, #4
    f04c:	2200      	movs	r2, #0
    f04e:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    f050:	1d3b      	adds	r3, r7, #4
    f052:	2200      	movs	r2, #0
    f054:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f056:	1d3b      	adds	r3, r7, #4
    f058:	2201      	movs	r2, #1
    f05a:	709a      	strb	r2, [r3, #2]
	CFG(BATSENSE_ADC_PIN);
    f05c:	1d3b      	adds	r3, r7, #4
    f05e:	0019      	movs	r1, r3
    f060:	2002      	movs	r0, #2
    f062:	4b5a      	ldr	r3, [pc, #360]	; (f1cc <system_board_init+0x2a4>)
    f064:	58e3      	ldr	r3, [r4, r3]
    f066:	4798      	blx	r3

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    f068:	1d3b      	adds	r3, r7, #4
    f06a:	2200      	movs	r2, #0
    f06c:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    f06e:	1d3b      	adds	r3, r7, #4
    f070:	2200      	movs	r2, #0
    f072:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f074:	1d3b      	adds	r3, r7, #4
    f076:	2201      	movs	r2, #1
    f078:	709a      	strb	r2, [r3, #2]
	CFG(LED_OUT_PIN);
    f07a:	1d3b      	adds	r3, r7, #4
    f07c:	0019      	movs	r1, r3
    f07e:	202b      	movs	r0, #43	; 0x2b
    f080:	4b52      	ldr	r3, [pc, #328]	; (f1cc <system_board_init+0x2a4>)
    f082:	58e3      	ldr	r3, [r4, r3]
    f084:	4798      	blx	r3
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    f086:	1d3b      	adds	r3, r7, #4
    f088:	2200      	movs	r2, #0
    f08a:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f08c:	1d3b      	adds	r3, r7, #4
    f08e:	2202      	movs	r2, #2
    f090:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f092:	1d3b      	adds	r3, r7, #4
    f094:	2201      	movs	r2, #1
    f096:	709a      	strb	r2, [r3, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    f098:	1d3b      	adds	r3, r7, #4
    f09a:	0019      	movs	r1, r3
    f09c:	2004      	movs	r0, #4
    f09e:	4b4b      	ldr	r3, [pc, #300]	; (f1cc <system_board_init+0x2a4>)
    f0a0:	58e3      	ldr	r3, [r4, r3]
    f0a2:	4798      	blx	r3
    f0a4:	1d3b      	adds	r3, r7, #4
    f0a6:	0019      	movs	r1, r3
    f0a8:	2005      	movs	r0, #5
    f0aa:	4b48      	ldr	r3, [pc, #288]	; (f1cc <system_board_init+0x2a4>)
    f0ac:	58e3      	ldr	r3, [r4, r3]
    f0ae:	4798      	blx	r3
    f0b0:	1d3b      	adds	r3, r7, #4
    f0b2:	0019      	movs	r1, r3
    f0b4:	2006      	movs	r0, #6
    f0b6:	4b45      	ldr	r3, [pc, #276]	; (f1cc <system_board_init+0x2a4>)
    f0b8:	58e3      	ldr	r3, [r4, r3]
    f0ba:	4798      	blx	r3
    f0bc:	1d3b      	adds	r3, r7, #4
    f0be:	0019      	movs	r1, r3
    f0c0:	2007      	movs	r0, #7
    f0c2:	4b42      	ldr	r3, [pc, #264]	; (f1cc <system_board_init+0x2a4>)
    f0c4:	58e3      	ldr	r3, [r4, r3]
    f0c6:	4798      	blx	r3
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    f0c8:	1d3b      	adds	r3, r7, #4
    f0ca:	0019      	movs	r1, r3
    f0cc:	2008      	movs	r0, #8
    f0ce:	4b3f      	ldr	r3, [pc, #252]	; (f1cc <system_board_init+0x2a4>)
    f0d0:	58e3      	ldr	r3, [r4, r3]
    f0d2:	4798      	blx	r3
    f0d4:	1d3b      	adds	r3, r7, #4
    f0d6:	0019      	movs	r1, r3
    f0d8:	2009      	movs	r0, #9
    f0da:	4b3c      	ldr	r3, [pc, #240]	; (f1cc <system_board_init+0x2a4>)
    f0dc:	58e3      	ldr	r3, [r4, r3]
    f0de:	4798      	blx	r3
    f0e0:	1d3b      	adds	r3, r7, #4
    f0e2:	0019      	movs	r1, r3
    f0e4:	200a      	movs	r0, #10
    f0e6:	4b39      	ldr	r3, [pc, #228]	; (f1cc <system_board_init+0x2a4>)
    f0e8:	58e3      	ldr	r3, [r4, r3]
    f0ea:	4798      	blx	r3
    f0ec:	1d3b      	adds	r3, r7, #4
    f0ee:	0019      	movs	r1, r3
    f0f0:	200b      	movs	r0, #11
    f0f2:	4b36      	ldr	r3, [pc, #216]	; (f1cc <system_board_init+0x2a4>)
    f0f4:	58e3      	ldr	r3, [r4, r3]
    f0f6:	4798      	blx	r3
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
    f0f8:	1d3b      	adds	r3, r7, #4
    f0fa:	2200      	movs	r2, #0
    f0fc:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f0fe:	1d3b      	adds	r3, r7, #4
    f100:	2202      	movs	r2, #2
    f102:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f104:	1d3b      	adds	r3, r7, #4
    f106:	2201      	movs	r2, #1
    f108:	709a      	strb	r2, [r3, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    f10a:	1d3b      	adds	r3, r7, #4
    f10c:	0019      	movs	r1, r3
    f10e:	2017      	movs	r0, #23
    f110:	4b2e      	ldr	r3, [pc, #184]	; (f1cc <system_board_init+0x2a4>)
    f112:	58e3      	ldr	r3, [r4, r3]
    f114:	4798      	blx	r3

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
    f116:	1d3b      	adds	r3, r7, #4
    f118:	2200      	movs	r2, #0
    f11a:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f11c:	1d3b      	adds	r3, r7, #4
    f11e:	2202      	movs	r2, #2
    f120:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f122:	1d3b      	adds	r3, r7, #4
    f124:	2201      	movs	r2, #1
    f126:	709a      	strb	r2, [r3, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    f128:	1d3b      	adds	r3, r7, #4
    f12a:	0019      	movs	r1, r3
    f12c:	200e      	movs	r0, #14
    f12e:	4b27      	ldr	r3, [pc, #156]	; (f1cc <system_board_init+0x2a4>)
    f130:	58e3      	ldr	r3, [r4, r3]
    f132:	4798      	blx	r3
    f134:	1d3b      	adds	r3, r7, #4
    f136:	0019      	movs	r1, r3
    f138:	200f      	movs	r0, #15
    f13a:	4b24      	ldr	r3, [pc, #144]	; (f1cc <system_board_init+0x2a4>)
    f13c:	58e3      	ldr	r3, [r4, r3]
    f13e:	4798      	blx	r3
    f140:	1d3b      	adds	r3, r7, #4
    f142:	0019      	movs	r1, r3
    f144:	200c      	movs	r0, #12
    f146:	4b21      	ldr	r3, [pc, #132]	; (f1cc <system_board_init+0x2a4>)
    f148:	58e3      	ldr	r3, [r4, r3]
    f14a:	4798      	blx	r3
    f14c:	1d3b      	adds	r3, r7, #4
    f14e:	0019      	movs	r1, r3
    f150:	200d      	movs	r0, #13
    f152:	4b1e      	ldr	r3, [pc, #120]	; (f1cc <system_board_init+0x2a4>)
    f154:	58e3      	ldr	r3, [r4, r3]
    f156:	4798      	blx	r3
    f158:	1d3b      	adds	r3, r7, #4
    f15a:	0019      	movs	r1, r3
    f15c:	2029      	movs	r0, #41	; 0x29
    f15e:	4b1b      	ldr	r3, [pc, #108]	; (f1cc <system_board_init+0x2a4>)
    f160:	58e3      	ldr	r3, [r4, r3]
    f162:	4798      	blx	r3
    f164:	1d3b      	adds	r3, r7, #4
    f166:	0019      	movs	r1, r3
    f168:	2016      	movs	r0, #22
    f16a:	4b18      	ldr	r3, [pc, #96]	; (f1cc <system_board_init+0x2a4>)
    f16c:	58e3      	ldr	r3, [r4, r3]
    f16e:	4798      	blx	r3
    f170:	1d3b      	adds	r3, r7, #4
    f172:	0019      	movs	r1, r3
    f174:	2028      	movs	r0, #40	; 0x28
    f176:	4b15      	ldr	r3, [pc, #84]	; (f1cc <system_board_init+0x2a4>)
    f178:	58e3      	ldr	r3, [r4, r3]
    f17a:	4798      	blx	r3
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    f17c:	1d3b      	adds	r3, r7, #4
    f17e:	2201      	movs	r2, #1
    f180:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    f182:	1d3b      	adds	r3, r7, #4
    f184:	2200      	movs	r2, #0
    f186:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    f188:	1d3b      	adds	r3, r7, #4
    f18a:	2200      	movs	r2, #0
    f18c:	709a      	strb	r2, [r3, #2]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
    f18e:	2100      	movs	r1, #0
    f190:	201b      	movs	r0, #27
    f192:	4b0f      	ldr	r3, [pc, #60]	; (f1d0 <system_board_init+0x2a8>)
    f194:	447b      	add	r3, pc
    f196:	4798      	blx	r3
    f198:	2100      	movs	r1, #0
    f19a:	201c      	movs	r0, #28
    f19c:	4b0d      	ldr	r3, [pc, #52]	; (f1d4 <system_board_init+0x2ac>)
    f19e:	447b      	add	r3, pc
    f1a0:	4798      	blx	r3
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    f1a2:	1d3b      	adds	r3, r7, #4
    f1a4:	0019      	movs	r1, r3
    f1a6:	201b      	movs	r0, #27
    f1a8:	4b08      	ldr	r3, [pc, #32]	; (f1cc <system_board_init+0x2a4>)
    f1aa:	58e3      	ldr	r3, [r4, r3]
    f1ac:	4798      	blx	r3
    f1ae:	1d3b      	adds	r3, r7, #4
    f1b0:	0019      	movs	r1, r3
    f1b2:	201c      	movs	r0, #28
    f1b4:	4b05      	ldr	r3, [pc, #20]	; (f1cc <system_board_init+0x2a4>)
    f1b6:	58e3      	ldr	r3, [r4, r3]
    f1b8:	4798      	blx	r3
	
    f1ba:	46c0      	nop			; (mov r8, r8)
    f1bc:	46bd      	mov	sp, r7
    f1be:	b003      	add	sp, #12
    f1c0:	bd90      	pop	{r4, r7, pc}
    f1c2:	46c0      	nop			; (mov r8, r8)
    f1c4:	00002f30 	.word	0x00002f30
    f1c8:	ffffff75 	.word	0xffffff75
    f1cc:	00000240 	.word	0x00000240
    f1d0:	fffffd3d 	.word	0xfffffd3d
    f1d4:	fffffd33 	.word	0xfffffd33

0000f1d8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    f1d8:	b580      	push	{r7, lr}
    f1da:	b082      	sub	sp, #8
    f1dc:	af00      	add	r7, sp, #0
    f1de:	4a14      	ldr	r2, [pc, #80]	; (f230 <cpu_irq_enter_critical+0x58>)
    f1e0:	447a      	add	r2, pc
	if (cpu_irq_critical_section_counter == 0) {
    f1e2:	4b14      	ldr	r3, [pc, #80]	; (f234 <cpu_irq_enter_critical+0x5c>)
    f1e4:	447b      	add	r3, pc
    f1e6:	681b      	ldr	r3, [r3, #0]
    f1e8:	2b00      	cmp	r3, #0
    f1ea:	d115      	bne.n	f218 <cpu_irq_enter_critical+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f1ec:	f3ef 8310 	mrs	r3, PRIMASK
    f1f0:	607b      	str	r3, [r7, #4]
  return(result);
    f1f2:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d10b      	bne.n	f210 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
    f1f8:	b672      	cpsid	i
    f1fa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    f1fe:	4b0e      	ldr	r3, [pc, #56]	; (f238 <cpu_irq_enter_critical+0x60>)
    f200:	58d3      	ldr	r3, [r2, r3]
    f202:	2200      	movs	r2, #0
    f204:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    f206:	4b0d      	ldr	r3, [pc, #52]	; (f23c <cpu_irq_enter_critical+0x64>)
    f208:	447b      	add	r3, pc
    f20a:	2201      	movs	r2, #1
    f20c:	701a      	strb	r2, [r3, #0]
    f20e:	e003      	b.n	f218 <cpu_irq_enter_critical+0x40>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    f210:	4b0b      	ldr	r3, [pc, #44]	; (f240 <cpu_irq_enter_critical+0x68>)
    f212:	447b      	add	r3, pc
    f214:	2200      	movs	r2, #0
    f216:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    f218:	4b0a      	ldr	r3, [pc, #40]	; (f244 <cpu_irq_enter_critical+0x6c>)
    f21a:	447b      	add	r3, pc
    f21c:	681b      	ldr	r3, [r3, #0]
    f21e:	1c5a      	adds	r2, r3, #1
    f220:	4b09      	ldr	r3, [pc, #36]	; (f248 <cpu_irq_enter_critical+0x70>)
    f222:	447b      	add	r3, pc
    f224:	601a      	str	r2, [r3, #0]
}
    f226:	46c0      	nop			; (mov r8, r8)
    f228:	46bd      	mov	sp, r7
    f22a:	b002      	add	sp, #8
    f22c:	bd80      	pop	{r7, pc}
    f22e:	46c0      	nop			; (mov r8, r8)
    f230:	00002c80 	.word	0x00002c80
    f234:	1fff1458 	.word	0x1fff1458
    f238:	000000ec 	.word	0x000000ec
    f23c:	1fff1438 	.word	0x1fff1438
    f240:	1fff142e 	.word	0x1fff142e
    f244:	1fff1422 	.word	0x1fff1422
    f248:	1fff141a 	.word	0x1fff141a

0000f24c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    f24c:	b580      	push	{r7, lr}
    f24e:	af00      	add	r7, sp, #0
    f250:	4a0e      	ldr	r2, [pc, #56]	; (f28c <cpu_irq_leave_critical+0x40>)
    f252:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    f254:	4b0e      	ldr	r3, [pc, #56]	; (f290 <cpu_irq_leave_critical+0x44>)
    f256:	447b      	add	r3, pc
    f258:	681b      	ldr	r3, [r3, #0]
    f25a:	1e59      	subs	r1, r3, #1
    f25c:	4b0d      	ldr	r3, [pc, #52]	; (f294 <cpu_irq_leave_critical+0x48>)
    f25e:	447b      	add	r3, pc
    f260:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    f262:	4b0d      	ldr	r3, [pc, #52]	; (f298 <cpu_irq_leave_critical+0x4c>)
    f264:	447b      	add	r3, pc
    f266:	681b      	ldr	r3, [r3, #0]
    f268:	2b00      	cmp	r3, #0
    f26a:	d10c      	bne.n	f286 <cpu_irq_leave_critical+0x3a>
    f26c:	4b0b      	ldr	r3, [pc, #44]	; (f29c <cpu_irq_leave_critical+0x50>)
    f26e:	447b      	add	r3, pc
    f270:	781b      	ldrb	r3, [r3, #0]
    f272:	b2db      	uxtb	r3, r3
    f274:	2b00      	cmp	r3, #0
    f276:	d006      	beq.n	f286 <cpu_irq_leave_critical+0x3a>
		cpu_irq_enable();
    f278:	4b09      	ldr	r3, [pc, #36]	; (f2a0 <cpu_irq_leave_critical+0x54>)
    f27a:	58d3      	ldr	r3, [r2, r3]
    f27c:	2201      	movs	r2, #1
    f27e:	701a      	strb	r2, [r3, #0]
    f280:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f284:	b662      	cpsie	i
	}
}
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	46bd      	mov	sp, r7
    f28a:	bd80      	pop	{r7, pc}
    f28c:	00002c0e 	.word	0x00002c0e
    f290:	1fff13e6 	.word	0x1fff13e6
    f294:	1fff13de 	.word	0x1fff13de
    f298:	1fff13d8 	.word	0x1fff13d8
    f29c:	1fff13d2 	.word	0x1fff13d2
    f2a0:	000000ec 	.word	0x000000ec

0000f2a4 <system_gclk_gen_get_config_defaults>:
{
    f2a4:	b580      	push	{r7, lr}
    f2a6:	b082      	sub	sp, #8
    f2a8:	af00      	add	r7, sp, #0
    f2aa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    f2ac:	687b      	ldr	r3, [r7, #4]
    f2ae:	2201      	movs	r2, #1
    f2b0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    f2b2:	687b      	ldr	r3, [r7, #4]
    f2b4:	2200      	movs	r2, #0
    f2b6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	2206      	movs	r2, #6
    f2bc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    f2be:	687b      	ldr	r3, [r7, #4]
    f2c0:	2200      	movs	r2, #0
    f2c2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    f2c4:	687b      	ldr	r3, [r7, #4]
    f2c6:	2200      	movs	r2, #0
    f2c8:	725a      	strb	r2, [r3, #9]
}
    f2ca:	46c0      	nop			; (mov r8, r8)
    f2cc:	46bd      	mov	sp, r7
    f2ce:	b002      	add	sp, #8
    f2d0:	bd80      	pop	{r7, pc}

0000f2d2 <system_gclk_chan_get_config_defaults>:
{
    f2d2:	b580      	push	{r7, lr}
    f2d4:	b082      	sub	sp, #8
    f2d6:	af00      	add	r7, sp, #0
    f2d8:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    f2da:	687b      	ldr	r3, [r7, #4]
    f2dc:	2200      	movs	r2, #0
    f2de:	701a      	strb	r2, [r3, #0]
}
    f2e0:	46c0      	nop			; (mov r8, r8)
    f2e2:	46bd      	mov	sp, r7
    f2e4:	b002      	add	sp, #8
    f2e6:	bd80      	pop	{r7, pc}

0000f2e8 <system_clock_source_xosc32k_get_config_defaults>:
{
    f2e8:	b580      	push	{r7, lr}
    f2ea:	b082      	sub	sp, #8
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    f2f0:	687b      	ldr	r3, [r7, #4]
    f2f2:	2200      	movs	r2, #0
    f2f4:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    f2f6:	687b      	ldr	r3, [r7, #4]
    f2f8:	2204      	movs	r2, #4
    f2fa:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	2200      	movs	r2, #0
    f300:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    f302:	687b      	ldr	r3, [r7, #4]
    f304:	2280      	movs	r2, #128	; 0x80
    f306:	0212      	lsls	r2, r2, #8
    f308:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	2200      	movs	r2, #0
    f30e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    f310:	687b      	ldr	r3, [r7, #4]
    f312:	2201      	movs	r2, #1
    f314:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    f316:	687b      	ldr	r3, [r7, #4]
    f318:	2200      	movs	r2, #0
    f31a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	2201      	movs	r2, #1
    f320:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	2200      	movs	r2, #0
    f326:	739a      	strb	r2, [r3, #14]
}
    f328:	46c0      	nop			; (mov r8, r8)
    f32a:	46bd      	mov	sp, r7
    f32c:	b002      	add	sp, #8
    f32e:	bd80      	pop	{r7, pc}

0000f330 <system_clock_source_osc8m_get_config_defaults>:
{
    f330:	b580      	push	{r7, lr}
    f332:	b082      	sub	sp, #8
    f334:	af00      	add	r7, sp, #0
    f336:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	2203      	movs	r2, #3
    f33c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	2200      	movs	r2, #0
    f342:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    f344:	687b      	ldr	r3, [r7, #4]
    f346:	2201      	movs	r2, #1
    f348:	709a      	strb	r2, [r3, #2]
}
    f34a:	46c0      	nop			; (mov r8, r8)
    f34c:	46bd      	mov	sp, r7
    f34e:	b002      	add	sp, #8
    f350:	bd80      	pop	{r7, pc}

0000f352 <system_clock_source_dfll_get_config_defaults>:
{
    f352:	b580      	push	{r7, lr}
    f354:	b082      	sub	sp, #8
    f356:	af00      	add	r7, sp, #0
    f358:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    f35a:	687b      	ldr	r3, [r7, #4]
    f35c:	2200      	movs	r2, #0
    f35e:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f360:	687b      	ldr	r3, [r7, #4]
    f362:	2200      	movs	r2, #0
    f364:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    f366:	687b      	ldr	r3, [r7, #4]
    f368:	2200      	movs	r2, #0
    f36a:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f36c:	687b      	ldr	r3, [r7, #4]
    f36e:	2200      	movs	r2, #0
    f370:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f372:	687b      	ldr	r3, [r7, #4]
    f374:	2200      	movs	r2, #0
    f376:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    f378:	687b      	ldr	r3, [r7, #4]
    f37a:	2201      	movs	r2, #1
    f37c:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    f37e:	687b      	ldr	r3, [r7, #4]
    f380:	2207      	movs	r2, #7
    f382:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    f384:	687b      	ldr	r3, [r7, #4]
    f386:	223f      	movs	r2, #63	; 0x3f
    f388:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    f38a:	687b      	ldr	r3, [r7, #4]
    f38c:	2201      	movs	r2, #1
    f38e:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    f390:	687b      	ldr	r3, [r7, #4]
    f392:	2201      	movs	r2, #1
    f394:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    f396:	687b      	ldr	r3, [r7, #4]
    f398:	2206      	movs	r2, #6
    f39a:	821a      	strh	r2, [r3, #16]
}
    f39c:	46c0      	nop			; (mov r8, r8)
    f39e:	46bd      	mov	sp, r7
    f3a0:	b002      	add	sp, #8
    f3a2:	bd80      	pop	{r7, pc}

0000f3a4 <system_cpu_clock_set_divider>:
{
    f3a4:	b580      	push	{r7, lr}
    f3a6:	b082      	sub	sp, #8
    f3a8:	af00      	add	r7, sp, #0
    f3aa:	0002      	movs	r2, r0
    f3ac:	1dfb      	adds	r3, r7, #7
    f3ae:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    f3b0:	4a03      	ldr	r2, [pc, #12]	; (f3c0 <system_cpu_clock_set_divider+0x1c>)
    f3b2:	1dfb      	adds	r3, r7, #7
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	7213      	strb	r3, [r2, #8]
}
    f3b8:	46c0      	nop			; (mov r8, r8)
    f3ba:	46bd      	mov	sp, r7
    f3bc:	b002      	add	sp, #8
    f3be:	bd80      	pop	{r7, pc}
    f3c0:	40000400 	.word	0x40000400

0000f3c4 <system_apb_clock_set_divider>:
{
    f3c4:	b580      	push	{r7, lr}
    f3c6:	b082      	sub	sp, #8
    f3c8:	af00      	add	r7, sp, #0
    f3ca:	0002      	movs	r2, r0
    f3cc:	1dfb      	adds	r3, r7, #7
    f3ce:	701a      	strb	r2, [r3, #0]
    f3d0:	1dbb      	adds	r3, r7, #6
    f3d2:	1c0a      	adds	r2, r1, #0
    f3d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    f3d6:	1dfb      	adds	r3, r7, #7
    f3d8:	781b      	ldrb	r3, [r3, #0]
    f3da:	2b01      	cmp	r3, #1
    f3dc:	d008      	beq.n	f3f0 <system_apb_clock_set_divider+0x2c>
    f3de:	2b02      	cmp	r3, #2
    f3e0:	d00b      	beq.n	f3fa <system_apb_clock_set_divider+0x36>
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	d10e      	bne.n	f404 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    f3e6:	4a0b      	ldr	r2, [pc, #44]	; (f414 <system_apb_clock_set_divider+0x50>)
    f3e8:	1dbb      	adds	r3, r7, #6
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	7253      	strb	r3, [r2, #9]
			break;
    f3ee:	e00b      	b.n	f408 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    f3f0:	4a08      	ldr	r2, [pc, #32]	; (f414 <system_apb_clock_set_divider+0x50>)
    f3f2:	1dbb      	adds	r3, r7, #6
    f3f4:	781b      	ldrb	r3, [r3, #0]
    f3f6:	7293      	strb	r3, [r2, #10]
			break;
    f3f8:	e006      	b.n	f408 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    f3fa:	4a06      	ldr	r2, [pc, #24]	; (f414 <system_apb_clock_set_divider+0x50>)
    f3fc:	1dbb      	adds	r3, r7, #6
    f3fe:	781b      	ldrb	r3, [r3, #0]
    f400:	72d3      	strb	r3, [r2, #11]
			break;
    f402:	e001      	b.n	f408 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    f404:	2317      	movs	r3, #23
    f406:	e000      	b.n	f40a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    f408:	2300      	movs	r3, #0
}
    f40a:	0018      	movs	r0, r3
    f40c:	46bd      	mov	sp, r7
    f40e:	b002      	add	sp, #8
    f410:	bd80      	pop	{r7, pc}
    f412:	46c0      	nop			; (mov r8, r8)
    f414:	40000400 	.word	0x40000400

0000f418 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    f418:	b580      	push	{r7, lr}
    f41a:	b082      	sub	sp, #8
    f41c:	af00      	add	r7, sp, #0
    f41e:	0002      	movs	r2, r0
    f420:	1dfb      	adds	r3, r7, #7
    f422:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    f424:	4a08      	ldr	r2, [pc, #32]	; (f448 <system_flash_set_waitstates+0x30>)
    f426:	1dfb      	adds	r3, r7, #7
    f428:	781b      	ldrb	r3, [r3, #0]
    f42a:	210f      	movs	r1, #15
    f42c:	400b      	ands	r3, r1
    f42e:	b2d9      	uxtb	r1, r3
    f430:	6853      	ldr	r3, [r2, #4]
    f432:	200f      	movs	r0, #15
    f434:	4001      	ands	r1, r0
    f436:	0049      	lsls	r1, r1, #1
    f438:	201e      	movs	r0, #30
    f43a:	4383      	bics	r3, r0
    f43c:	430b      	orrs	r3, r1
    f43e:	6053      	str	r3, [r2, #4]
}
    f440:	46c0      	nop			; (mov r8, r8)
    f442:	46bd      	mov	sp, r7
    f444:	b002      	add	sp, #8
    f446:	bd80      	pop	{r7, pc}
    f448:	41004000 	.word	0x41004000

0000f44c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    f44c:	b580      	push	{r7, lr}
    f44e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    f450:	46c0      	nop			; (mov r8, r8)
    f452:	4b04      	ldr	r3, [pc, #16]	; (f464 <_system_dfll_wait_for_sync+0x18>)
    f454:	68db      	ldr	r3, [r3, #12]
    f456:	2210      	movs	r2, #16
    f458:	4013      	ands	r3, r2
    f45a:	d0fa      	beq.n	f452 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    f45c:	46c0      	nop			; (mov r8, r8)
    f45e:	46bd      	mov	sp, r7
    f460:	bd80      	pop	{r7, pc}
    f462:	46c0      	nop			; (mov r8, r8)
    f464:	40000800 	.word	0x40000800

0000f468 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    f468:	b580      	push	{r7, lr}
    f46a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    f46c:	4b0f      	ldr	r3, [pc, #60]	; (f4ac <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f46e:	2202      	movs	r2, #2
    f470:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    f472:	4b0f      	ldr	r3, [pc, #60]	; (f4b0 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    f474:	447b      	add	r3, pc
    f476:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    f478:	4a0c      	ldr	r2, [pc, #48]	; (f4ac <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f47a:	4b0e      	ldr	r3, [pc, #56]	; (f4b4 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    f47c:	447b      	add	r3, pc
    f47e:	689b      	ldr	r3, [r3, #8]
    f480:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    f482:	4a0a      	ldr	r2, [pc, #40]	; (f4ac <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f484:	4b0c      	ldr	r3, [pc, #48]	; (f4b8 <_system_clock_source_dfll_set_config_errata_9905+0x50>)
    f486:	447b      	add	r3, pc
    f488:	685b      	ldr	r3, [r3, #4]
    f48a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    f48c:	4b07      	ldr	r3, [pc, #28]	; (f4ac <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f48e:	2200      	movs	r2, #0
    f490:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    f492:	4b0a      	ldr	r3, [pc, #40]	; (f4bc <_system_clock_source_dfll_set_config_errata_9905+0x54>)
    f494:	447b      	add	r3, pc
    f496:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    f498:	4a04      	ldr	r2, [pc, #16]	; (f4ac <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f49a:	4b09      	ldr	r3, [pc, #36]	; (f4c0 <_system_clock_source_dfll_set_config_errata_9905+0x58>)
    f49c:	447b      	add	r3, pc
    f49e:	681b      	ldr	r3, [r3, #0]
    f4a0:	b29b      	uxth	r3, r3
    f4a2:	8493      	strh	r3, [r2, #36]	; 0x24
}
    f4a4:	46c0      	nop			; (mov r8, r8)
    f4a6:	46bd      	mov	sp, r7
    f4a8:	bd80      	pop	{r7, pc}
    f4aa:	46c0      	nop			; (mov r8, r8)
    f4ac:	40000800 	.word	0x40000800
    f4b0:	ffffffd5 	.word	0xffffffd5
    f4b4:	1fff11c8 	.word	0x1fff11c8
    f4b8:	1fff11be 	.word	0x1fff11be
    f4bc:	ffffffb5 	.word	0xffffffb5
    f4c0:	1fff11a8 	.word	0x1fff11a8

0000f4c4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    f4c4:	b590      	push	{r4, r7, lr}
    f4c6:	b083      	sub	sp, #12
    f4c8:	af00      	add	r7, sp, #0
    f4ca:	0002      	movs	r2, r0
    f4cc:	1dfb      	adds	r3, r7, #7
    f4ce:	701a      	strb	r2, [r3, #0]
    f4d0:	4c32      	ldr	r4, [pc, #200]	; (f59c <system_clock_source_get_hz+0xd8>)
    f4d2:	447c      	add	r4, pc
	switch (clock_source) {
    f4d4:	1dfb      	adds	r3, r7, #7
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	2b08      	cmp	r3, #8
    f4da:	d859      	bhi.n	f590 <system_clock_source_get_hz+0xcc>
    f4dc:	0018      	movs	r0, r3
    f4de:	f001 f90d 	bl	106fc <__gnu_thumb1_case_si>
    f4e2:	46c0      	nop			; (mov r8, r8)
    f4e4:	00000024 	.word	0x00000024
    f4e8:	000000ac 	.word	0x000000ac
    f4ec:	000000ac 	.word	0x000000ac
    f4f0:	00000044 	.word	0x00000044
    f4f4:	0000003e 	.word	0x0000003e
    f4f8:	0000004a 	.word	0x0000004a
    f4fc:	0000002c 	.word	0x0000002c
    f500:	00000052 	.word	0x00000052
    f504:	00000090 	.word	0x00000090
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    f508:	4b25      	ldr	r3, [pc, #148]	; (f5a0 <system_clock_source_get_hz+0xdc>)
    f50a:	447b      	add	r3, pc
    f50c:	691b      	ldr	r3, [r3, #16]
    f50e:	e040      	b.n	f592 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    f510:	4b24      	ldr	r3, [pc, #144]	; (f5a4 <system_clock_source_get_hz+0xe0>)
    f512:	6a1b      	ldr	r3, [r3, #32]
    f514:	059b      	lsls	r3, r3, #22
    f516:	0f9b      	lsrs	r3, r3, #30
    f518:	b2db      	uxtb	r3, r3
    f51a:	001a      	movs	r2, r3
    f51c:	4b22      	ldr	r3, [pc, #136]	; (f5a8 <system_clock_source_get_hz+0xe4>)
    f51e:	40d3      	lsrs	r3, r2
    f520:	e037      	b.n	f592 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    f522:	2380      	movs	r3, #128	; 0x80
    f524:	021b      	lsls	r3, r3, #8
    f526:	e034      	b.n	f592 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    f528:	2380      	movs	r3, #128	; 0x80
    f52a:	021b      	lsls	r3, r3, #8
    f52c:	e031      	b.n	f592 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    f52e:	4b1f      	ldr	r3, [pc, #124]	; (f5ac <system_clock_source_get_hz+0xe8>)
    f530:	447b      	add	r3, pc
    f532:	695b      	ldr	r3, [r3, #20]
    f534:	e02d      	b.n	f592 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    f536:	4b1e      	ldr	r3, [pc, #120]	; (f5b0 <system_clock_source_get_hz+0xec>)
    f538:	447b      	add	r3, pc
    f53a:	681b      	ldr	r3, [r3, #0]
    f53c:	2202      	movs	r2, #2
    f53e:	4013      	ands	r3, r2
    f540:	d101      	bne.n	f546 <system_clock_source_get_hz+0x82>
			return 0;
    f542:	2300      	movs	r3, #0
    f544:	e025      	b.n	f592 <system_clock_source_get_hz+0xce>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    f546:	4b1b      	ldr	r3, [pc, #108]	; (f5b4 <system_clock_source_get_hz+0xf0>)
    f548:	447b      	add	r3, pc
    f54a:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    f54c:	4b1a      	ldr	r3, [pc, #104]	; (f5b8 <system_clock_source_get_hz+0xf4>)
    f54e:	447b      	add	r3, pc
    f550:	681b      	ldr	r3, [r3, #0]
    f552:	2204      	movs	r2, #4
    f554:	4013      	ands	r3, r2
    f556:	d00b      	beq.n	f570 <system_clock_source_get_hz+0xac>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f558:	2000      	movs	r0, #0
    f55a:	4b18      	ldr	r3, [pc, #96]	; (f5bc <system_clock_source_get_hz+0xf8>)
    f55c:	58e3      	ldr	r3, [r4, r3]
    f55e:	4798      	blx	r3
    f560:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    f562:	4b17      	ldr	r3, [pc, #92]	; (f5c0 <system_clock_source_get_hz+0xfc>)
    f564:	447b      	add	r3, pc
    f566:	689b      	ldr	r3, [r3, #8]
    f568:	041b      	lsls	r3, r3, #16
    f56a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f56c:	4353      	muls	r3, r2
    f56e:	e010      	b.n	f592 <system_clock_source_get_hz+0xce>
		}

		return 48000000UL;
    f570:	4b14      	ldr	r3, [pc, #80]	; (f5c4 <system_clock_source_get_hz+0x100>)
    f572:	e00e      	b.n	f592 <system_clock_source_get_hz+0xce>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    f574:	4a0b      	ldr	r2, [pc, #44]	; (f5a4 <system_clock_source_get_hz+0xe0>)
    f576:	2350      	movs	r3, #80	; 0x50
    f578:	5cd3      	ldrb	r3, [r2, r3]
    f57a:	b2db      	uxtb	r3, r3
    f57c:	001a      	movs	r2, r3
    f57e:	2304      	movs	r3, #4
    f580:	4013      	ands	r3, r2
    f582:	d101      	bne.n	f588 <system_clock_source_get_hz+0xc4>
			return 0;
    f584:	2300      	movs	r3, #0
    f586:	e004      	b.n	f592 <system_clock_source_get_hz+0xce>
		}

		return _system_clock_inst.dpll.frequency;
    f588:	4b0f      	ldr	r3, [pc, #60]	; (f5c8 <system_clock_source_get_hz+0x104>)
    f58a:	447b      	add	r3, pc
    f58c:	68db      	ldr	r3, [r3, #12]
    f58e:	e000      	b.n	f592 <system_clock_source_get_hz+0xce>
#endif

	default:
		return 0;
    f590:	2300      	movs	r3, #0
	}
}
    f592:	0018      	movs	r0, r3
    f594:	46bd      	mov	sp, r7
    f596:	b003      	add	sp, #12
    f598:	bd90      	pop	{r4, r7, pc}
    f59a:	46c0      	nop			; (mov r8, r8)
    f59c:	0000298e 	.word	0x0000298e
    f5a0:	1fff113a 	.word	0x1fff113a
    f5a4:	40000800 	.word	0x40000800
    f5a8:	007a1200 	.word	0x007a1200
    f5ac:	1fff1114 	.word	0x1fff1114
    f5b0:	1fff110c 	.word	0x1fff110c
    f5b4:	ffffff01 	.word	0xffffff01
    f5b8:	1fff10f6 	.word	0x1fff10f6
    f5bc:	000001a4 	.word	0x000001a4
    f5c0:	1fff10e0 	.word	0x1fff10e0
    f5c4:	02dc6c00 	.word	0x02dc6c00
    f5c8:	1fff10ba 	.word	0x1fff10ba

0000f5cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    f5cc:	b580      	push	{r7, lr}
    f5ce:	b084      	sub	sp, #16
    f5d0:	af00      	add	r7, sp, #0
    f5d2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    f5d4:	4b1a      	ldr	r3, [pc, #104]	; (f640 <system_clock_source_osc8m_set_config+0x74>)
    f5d6:	6a1b      	ldr	r3, [r3, #32]
    f5d8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    f5da:	687b      	ldr	r3, [r7, #4]
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	1c1a      	adds	r2, r3, #0
    f5e0:	2303      	movs	r3, #3
    f5e2:	4013      	ands	r3, r2
    f5e4:	b2da      	uxtb	r2, r3
    f5e6:	230d      	movs	r3, #13
    f5e8:	18fb      	adds	r3, r7, r3
    f5ea:	2103      	movs	r1, #3
    f5ec:	400a      	ands	r2, r1
    f5ee:	0010      	movs	r0, r2
    f5f0:	781a      	ldrb	r2, [r3, #0]
    f5f2:	2103      	movs	r1, #3
    f5f4:	438a      	bics	r2, r1
    f5f6:	1c11      	adds	r1, r2, #0
    f5f8:	1c02      	adds	r2, r0, #0
    f5fa:	430a      	orrs	r2, r1
    f5fc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    f5fe:	687b      	ldr	r3, [r7, #4]
    f600:	789a      	ldrb	r2, [r3, #2]
    f602:	230c      	movs	r3, #12
    f604:	18fb      	adds	r3, r7, r3
    f606:	01d0      	lsls	r0, r2, #7
    f608:	781a      	ldrb	r2, [r3, #0]
    f60a:	217f      	movs	r1, #127	; 0x7f
    f60c:	400a      	ands	r2, r1
    f60e:	1c11      	adds	r1, r2, #0
    f610:	1c02      	adds	r2, r0, #0
    f612:	430a      	orrs	r2, r1
    f614:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    f616:	687b      	ldr	r3, [r7, #4]
    f618:	785a      	ldrb	r2, [r3, #1]
    f61a:	230c      	movs	r3, #12
    f61c:	18fb      	adds	r3, r7, r3
    f61e:	2101      	movs	r1, #1
    f620:	400a      	ands	r2, r1
    f622:	0190      	lsls	r0, r2, #6
    f624:	781a      	ldrb	r2, [r3, #0]
    f626:	2140      	movs	r1, #64	; 0x40
    f628:	438a      	bics	r2, r1
    f62a:	1c11      	adds	r1, r2, #0
    f62c:	1c02      	adds	r2, r0, #0
    f62e:	430a      	orrs	r2, r1
    f630:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    f632:	4b03      	ldr	r3, [pc, #12]	; (f640 <system_clock_source_osc8m_set_config+0x74>)
    f634:	68fa      	ldr	r2, [r7, #12]
    f636:	621a      	str	r2, [r3, #32]
}
    f638:	46c0      	nop			; (mov r8, r8)
    f63a:	46bd      	mov	sp, r7
    f63c:	b004      	add	sp, #16
    f63e:	bd80      	pop	{r7, pc}
    f640:	40000800 	.word	0x40000800

0000f644 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    f644:	b580      	push	{r7, lr}
    f646:	b084      	sub	sp, #16
    f648:	af00      	add	r7, sp, #0
    f64a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    f64c:	4a43      	ldr	r2, [pc, #268]	; (f75c <system_clock_source_xosc32k_set_config+0x118>)
    f64e:	230c      	movs	r3, #12
    f650:	18fb      	adds	r3, r7, r3
    f652:	8a92      	ldrh	r2, [r2, #20]
    f654:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    f656:	687b      	ldr	r3, [r7, #4]
    f658:	785b      	ldrb	r3, [r3, #1]
    f65a:	1c1a      	adds	r2, r3, #0
    f65c:	2307      	movs	r3, #7
    f65e:	4013      	ands	r3, r2
    f660:	b2da      	uxtb	r2, r3
    f662:	230c      	movs	r3, #12
    f664:	18fb      	adds	r3, r7, r3
    f666:	2107      	movs	r1, #7
    f668:	400a      	ands	r2, r1
    f66a:	0010      	movs	r0, r2
    f66c:	785a      	ldrb	r2, [r3, #1]
    f66e:	2107      	movs	r1, #7
    f670:	438a      	bics	r2, r1
    f672:	1c11      	adds	r1, r2, #0
    f674:	1c02      	adds	r2, r0, #0
    f676:	430a      	orrs	r2, r1
    f678:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    f67a:	687b      	ldr	r3, [r7, #4]
    f67c:	781b      	ldrb	r3, [r3, #0]
    f67e:	2b00      	cmp	r3, #0
    f680:	d106      	bne.n	f690 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    f682:	230c      	movs	r3, #12
    f684:	18fb      	adds	r3, r7, r3
    f686:	781a      	ldrb	r2, [r3, #0]
    f688:	2104      	movs	r1, #4
    f68a:	430a      	orrs	r2, r1
    f68c:	701a      	strb	r2, [r3, #0]
    f68e:	e005      	b.n	f69c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    f690:	230c      	movs	r3, #12
    f692:	18fb      	adds	r3, r7, r3
    f694:	781a      	ldrb	r2, [r3, #0]
    f696:	2104      	movs	r1, #4
    f698:	438a      	bics	r2, r1
    f69a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    f69c:	687b      	ldr	r3, [r7, #4]
    f69e:	789a      	ldrb	r2, [r3, #2]
    f6a0:	230c      	movs	r3, #12
    f6a2:	18fb      	adds	r3, r7, r3
    f6a4:	2101      	movs	r1, #1
    f6a6:	400a      	ands	r2, r1
    f6a8:	0150      	lsls	r0, r2, #5
    f6aa:	781a      	ldrb	r2, [r3, #0]
    f6ac:	2120      	movs	r1, #32
    f6ae:	438a      	bics	r2, r1
    f6b0:	1c11      	adds	r1, r2, #0
    f6b2:	1c02      	adds	r2, r0, #0
    f6b4:	430a      	orrs	r2, r1
    f6b6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	78da      	ldrb	r2, [r3, #3]
    f6bc:	230c      	movs	r3, #12
    f6be:	18fb      	adds	r3, r7, r3
    f6c0:	2101      	movs	r1, #1
    f6c2:	400a      	ands	r2, r1
    f6c4:	0110      	lsls	r0, r2, #4
    f6c6:	781a      	ldrb	r2, [r3, #0]
    f6c8:	2110      	movs	r1, #16
    f6ca:	438a      	bics	r2, r1
    f6cc:	1c11      	adds	r1, r2, #0
    f6ce:	1c02      	adds	r2, r0, #0
    f6d0:	430a      	orrs	r2, r1
    f6d2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	791a      	ldrb	r2, [r3, #4]
    f6d8:	230c      	movs	r3, #12
    f6da:	18fb      	adds	r3, r7, r3
    f6dc:	2101      	movs	r1, #1
    f6de:	400a      	ands	r2, r1
    f6e0:	00d0      	lsls	r0, r2, #3
    f6e2:	781a      	ldrb	r2, [r3, #0]
    f6e4:	2108      	movs	r1, #8
    f6e6:	438a      	bics	r2, r1
    f6e8:	1c11      	adds	r1, r2, #0
    f6ea:	1c02      	adds	r2, r0, #0
    f6ec:	430a      	orrs	r2, r1
    f6ee:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	7b5a      	ldrb	r2, [r3, #13]
    f6f4:	230c      	movs	r3, #12
    f6f6:	18fb      	adds	r3, r7, r3
    f6f8:	01d0      	lsls	r0, r2, #7
    f6fa:	781a      	ldrb	r2, [r3, #0]
    f6fc:	217f      	movs	r1, #127	; 0x7f
    f6fe:	400a      	ands	r2, r1
    f700:	1c11      	adds	r1, r2, #0
    f702:	1c02      	adds	r2, r0, #0
    f704:	430a      	orrs	r2, r1
    f706:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    f708:	687b      	ldr	r3, [r7, #4]
    f70a:	7b1a      	ldrb	r2, [r3, #12]
    f70c:	230c      	movs	r3, #12
    f70e:	18fb      	adds	r3, r7, r3
    f710:	2101      	movs	r1, #1
    f712:	400a      	ands	r2, r1
    f714:	0190      	lsls	r0, r2, #6
    f716:	781a      	ldrb	r2, [r3, #0]
    f718:	2140      	movs	r1, #64	; 0x40
    f71a:	438a      	bics	r2, r1
    f71c:	1c11      	adds	r1, r2, #0
    f71e:	1c02      	adds	r2, r0, #0
    f720:	430a      	orrs	r2, r1
    f722:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    f724:	687b      	ldr	r3, [r7, #4]
    f726:	7b9a      	ldrb	r2, [r3, #14]
    f728:	230c      	movs	r3, #12
    f72a:	18fb      	adds	r3, r7, r3
    f72c:	2101      	movs	r1, #1
    f72e:	400a      	ands	r2, r1
    f730:	0110      	lsls	r0, r2, #4
    f732:	785a      	ldrb	r2, [r3, #1]
    f734:	2110      	movs	r1, #16
    f736:	438a      	bics	r2, r1
    f738:	1c11      	adds	r1, r2, #0
    f73a:	1c02      	adds	r2, r0, #0
    f73c:	430a      	orrs	r2, r1
    f73e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	689a      	ldr	r2, [r3, #8]
    f744:	4b06      	ldr	r3, [pc, #24]	; (f760 <system_clock_source_xosc32k_set_config+0x11c>)
    f746:	447b      	add	r3, pc
    f748:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    f74a:	4a04      	ldr	r2, [pc, #16]	; (f75c <system_clock_source_xosc32k_set_config+0x118>)
    f74c:	230c      	movs	r3, #12
    f74e:	18fb      	adds	r3, r7, r3
    f750:	881b      	ldrh	r3, [r3, #0]
    f752:	8293      	strh	r3, [r2, #20]
}
    f754:	46c0      	nop			; (mov r8, r8)
    f756:	46bd      	mov	sp, r7
    f758:	b004      	add	sp, #16
    f75a:	bd80      	pop	{r7, pc}
    f75c:	40000800 	.word	0x40000800
    f760:	1fff0efe 	.word	0x1fff0efe

0000f764 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    f764:	b580      	push	{r7, lr}
    f766:	b082      	sub	sp, #8
    f768:	af00      	add	r7, sp, #0
    f76a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	7a1b      	ldrb	r3, [r3, #8]
    f770:	029b      	lsls	r3, r3, #10
    f772:	041b      	lsls	r3, r3, #16
    f774:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    f776:	687b      	ldr	r3, [r7, #4]
    f778:	895b      	ldrh	r3, [r3, #10]
    f77a:	059b      	lsls	r3, r3, #22
    f77c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f77e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    f780:	4b2e      	ldr	r3, [pc, #184]	; (f83c <system_clock_source_dfll_set_config+0xd8>)
    f782:	447b      	add	r3, pc
    f784:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    f78a:	687b      	ldr	r3, [r7, #4]
    f78c:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    f78e:	4313      	orrs	r3, r2
    f790:	b2db      	uxtb	r3, r3
    f792:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    f798:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    f79a:	687a      	ldr	r2, [r7, #4]
    f79c:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    f79e:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    f7a0:	687b      	ldr	r3, [r7, #4]
    f7a2:	785b      	ldrb	r3, [r3, #1]
    f7a4:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    f7a6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    f7a8:	4b25      	ldr	r3, [pc, #148]	; (f840 <system_clock_source_dfll_set_config+0xdc>)
    f7aa:	447b      	add	r3, pc
    f7ac:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	781b      	ldrb	r3, [r3, #0]
    f7b2:	2b04      	cmp	r3, #4
    f7b4:	d119      	bne.n	f7ea <system_clock_source_dfll_set_config+0x86>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f7b6:	687b      	ldr	r3, [r7, #4]
    f7b8:	7b1b      	ldrb	r3, [r3, #12]
    f7ba:	069b      	lsls	r3, r3, #26
    f7bc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f7be:	687b      	ldr	r3, [r7, #4]
    f7c0:	89db      	ldrh	r3, [r3, #14]
    f7c2:	041b      	lsls	r3, r3, #16
    f7c4:	0019      	movs	r1, r3
    f7c6:	4b1f      	ldr	r3, [pc, #124]	; (f844 <system_clock_source_dfll_set_config+0xe0>)
    f7c8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f7ca:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f7cc:	687a      	ldr	r2, [r7, #4]
    f7ce:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f7d0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    f7d2:	4b1d      	ldr	r3, [pc, #116]	; (f848 <system_clock_source_dfll_set_config+0xe4>)
    f7d4:	447b      	add	r3, pc
    f7d6:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    f7d8:	4b1c      	ldr	r3, [pc, #112]	; (f84c <system_clock_source_dfll_set_config+0xe8>)
    f7da:	447b      	add	r3, pc
    f7dc:	681b      	ldr	r3, [r3, #0]
    f7de:	687a      	ldr	r2, [r7, #4]
    f7e0:	7812      	ldrb	r2, [r2, #0]
    f7e2:	431a      	orrs	r2, r3
    f7e4:	4b1a      	ldr	r3, [pc, #104]	; (f850 <system_clock_source_dfll_set_config+0xec>)
    f7e6:	447b      	add	r3, pc
    f7e8:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    f7ea:	687b      	ldr	r3, [r7, #4]
    f7ec:	781b      	ldrb	r3, [r3, #0]
    f7ee:	2b20      	cmp	r3, #32
    f7f0:	d11f      	bne.n	f832 <system_clock_source_dfll_set_config+0xce>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f7f2:	687b      	ldr	r3, [r7, #4]
    f7f4:	7b1b      	ldrb	r3, [r3, #12]
    f7f6:	069b      	lsls	r3, r3, #26
    f7f8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f7fa:	687b      	ldr	r3, [r7, #4]
    f7fc:	89db      	ldrh	r3, [r3, #14]
    f7fe:	041b      	lsls	r3, r3, #16
    f800:	0019      	movs	r1, r3
    f802:	4b10      	ldr	r3, [pc, #64]	; (f844 <system_clock_source_dfll_set_config+0xe0>)
    f804:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f806:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f808:	687a      	ldr	r2, [r7, #4]
    f80a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f80c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    f80e:	4b11      	ldr	r3, [pc, #68]	; (f854 <system_clock_source_dfll_set_config+0xf0>)
    f810:	447b      	add	r3, pc
    f812:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    f814:	4b10      	ldr	r3, [pc, #64]	; (f858 <system_clock_source_dfll_set_config+0xf4>)
    f816:	447b      	add	r3, pc
    f818:	681b      	ldr	r3, [r3, #0]
    f81a:	687a      	ldr	r2, [r7, #4]
    f81c:	7812      	ldrb	r2, [r2, #0]
    f81e:	2104      	movs	r1, #4
    f820:	430a      	orrs	r2, r1
    f822:	b2d2      	uxtb	r2, r2
    f824:	4313      	orrs	r3, r2
    f826:	2280      	movs	r2, #128	; 0x80
    f828:	00d2      	lsls	r2, r2, #3
    f82a:	431a      	orrs	r2, r3
    f82c:	4b0b      	ldr	r3, [pc, #44]	; (f85c <system_clock_source_dfll_set_config+0xf8>)
    f82e:	447b      	add	r3, pc
    f830:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    f832:	46c0      	nop			; (mov r8, r8)
    f834:	46bd      	mov	sp, r7
    f836:	b002      	add	sp, #8
    f838:	bd80      	pop	{r7, pc}
    f83a:	46c0      	nop			; (mov r8, r8)
    f83c:	1fff0ec2 	.word	0x1fff0ec2
    f840:	1fff0e9a 	.word	0x1fff0e9a
    f844:	03ff0000 	.word	0x03ff0000
    f848:	1fff0e70 	.word	0x1fff0e70
    f84c:	1fff0e6a 	.word	0x1fff0e6a
    f850:	1fff0e5e 	.word	0x1fff0e5e
    f854:	1fff0e34 	.word	0x1fff0e34
    f858:	1fff0e2e 	.word	0x1fff0e2e
    f85c:	1fff0e16 	.word	0x1fff0e16

0000f860 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    f860:	b580      	push	{r7, lr}
    f862:	b082      	sub	sp, #8
    f864:	af00      	add	r7, sp, #0
    f866:	0002      	movs	r2, r0
    f868:	1dfb      	adds	r3, r7, #7
    f86a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    f86c:	1dfb      	adds	r3, r7, #7
    f86e:	781b      	ldrb	r3, [r3, #0]
    f870:	2b08      	cmp	r3, #8
    f872:	d84f      	bhi.n	f914 <system_clock_source_enable+0xb4>
    f874:	0018      	movs	r0, r3
    f876:	f000 ff41 	bl	106fc <__gnu_thumb1_case_si>
    f87a:	46c0      	nop			; (mov r8, r8)
    f87c:	00000042 	.word	0x00000042
    f880:	00000098 	.word	0x00000098
    f884:	00000098 	.word	0x00000098
    f888:	00000094 	.word	0x00000094
    f88c:	00000034 	.word	0x00000034
    f890:	00000054 	.word	0x00000054
    f894:	00000024 	.word	0x00000024
    f898:	00000066 	.word	0x00000066
    f89c:	0000007e 	.word	0x0000007e
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    f8a0:	4b20      	ldr	r3, [pc, #128]	; (f924 <system_clock_source_enable+0xc4>)
    f8a2:	4a20      	ldr	r2, [pc, #128]	; (f924 <system_clock_source_enable+0xc4>)
    f8a4:	6a12      	ldr	r2, [r2, #32]
    f8a6:	2102      	movs	r1, #2
    f8a8:	430a      	orrs	r2, r1
    f8aa:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    f8ac:	2300      	movs	r3, #0
    f8ae:	e034      	b.n	f91a <system_clock_source_enable+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    f8b0:	4b1c      	ldr	r3, [pc, #112]	; (f924 <system_clock_source_enable+0xc4>)
    f8b2:	4a1c      	ldr	r2, [pc, #112]	; (f924 <system_clock_source_enable+0xc4>)
    f8b4:	6992      	ldr	r2, [r2, #24]
    f8b6:	2102      	movs	r1, #2
    f8b8:	430a      	orrs	r2, r1
    f8ba:	619a      	str	r2, [r3, #24]
		break;
    f8bc:	e02c      	b.n	f918 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    f8be:	4a19      	ldr	r2, [pc, #100]	; (f924 <system_clock_source_enable+0xc4>)
    f8c0:	4b18      	ldr	r3, [pc, #96]	; (f924 <system_clock_source_enable+0xc4>)
    f8c2:	8a1b      	ldrh	r3, [r3, #16]
    f8c4:	b29b      	uxth	r3, r3
    f8c6:	2102      	movs	r1, #2
    f8c8:	430b      	orrs	r3, r1
    f8ca:	b29b      	uxth	r3, r3
    f8cc:	8213      	strh	r3, [r2, #16]
		break;
    f8ce:	e023      	b.n	f918 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    f8d0:	4a14      	ldr	r2, [pc, #80]	; (f924 <system_clock_source_enable+0xc4>)
    f8d2:	4b14      	ldr	r3, [pc, #80]	; (f924 <system_clock_source_enable+0xc4>)
    f8d4:	8a9b      	ldrh	r3, [r3, #20]
    f8d6:	b29b      	uxth	r3, r3
    f8d8:	2102      	movs	r1, #2
    f8da:	430b      	orrs	r3, r1
    f8dc:	b29b      	uxth	r3, r3
    f8de:	8293      	strh	r3, [r2, #20]
		break;
    f8e0:	e01a      	b.n	f918 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    f8e2:	4b11      	ldr	r3, [pc, #68]	; (f928 <system_clock_source_enable+0xc8>)
    f8e4:	447b      	add	r3, pc
    f8e6:	681b      	ldr	r3, [r3, #0]
    f8e8:	2202      	movs	r2, #2
    f8ea:	431a      	orrs	r2, r3
    f8ec:	4b0f      	ldr	r3, [pc, #60]	; (f92c <system_clock_source_enable+0xcc>)
    f8ee:	447b      	add	r3, pc
    f8f0:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    f8f2:	4b0f      	ldr	r3, [pc, #60]	; (f930 <system_clock_source_enable+0xd0>)
    f8f4:	447b      	add	r3, pc
    f8f6:	4798      	blx	r3
		break;
    f8f8:	e00e      	b.n	f918 <system_clock_source_enable+0xb8>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    f8fa:	4a0a      	ldr	r2, [pc, #40]	; (f924 <system_clock_source_enable+0xc4>)
    f8fc:	4909      	ldr	r1, [pc, #36]	; (f924 <system_clock_source_enable+0xc4>)
    f8fe:	2344      	movs	r3, #68	; 0x44
    f900:	5ccb      	ldrb	r3, [r1, r3]
    f902:	b2db      	uxtb	r3, r3
    f904:	2102      	movs	r1, #2
    f906:	430b      	orrs	r3, r1
    f908:	b2d9      	uxtb	r1, r3
    f90a:	2344      	movs	r3, #68	; 0x44
    f90c:	54d1      	strb	r1, [r2, r3]
		break;
    f90e:	e003      	b.n	f918 <system_clock_source_enable+0xb8>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    f910:	2300      	movs	r3, #0
    f912:	e002      	b.n	f91a <system_clock_source_enable+0xba>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f914:	2317      	movs	r3, #23
    f916:	e000      	b.n	f91a <system_clock_source_enable+0xba>
	}

	return STATUS_OK;
    f918:	2300      	movs	r3, #0
}
    f91a:	0018      	movs	r0, r3
    f91c:	46bd      	mov	sp, r7
    f91e:	b002      	add	sp, #8
    f920:	bd80      	pop	{r7, pc}
    f922:	46c0      	nop			; (mov r8, r8)
    f924:	40000800 	.word	0x40000800
    f928:	1fff0d60 	.word	0x1fff0d60
    f92c:	1fff0d56 	.word	0x1fff0d56
    f930:	fffffb71 	.word	0xfffffb71

0000f934 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    f934:	b580      	push	{r7, lr}
    f936:	b084      	sub	sp, #16
    f938:	af00      	add	r7, sp, #0
    f93a:	0002      	movs	r2, r0
    f93c:	1dfb      	adds	r3, r7, #7
    f93e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    f940:	2300      	movs	r3, #0
    f942:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    f944:	1dfb      	adds	r3, r7, #7
    f946:	781b      	ldrb	r3, [r3, #0]
    f948:	2b08      	cmp	r3, #8
    f94a:	d832      	bhi.n	f9b2 <system_clock_source_is_ready+0x7e>
    f94c:	0018      	movs	r0, r3
    f94e:	f000 fed5 	bl	106fc <__gnu_thumb1_case_si>
    f952:	46c0      	nop			; (mov r8, r8)
    f954:	00000030 	.word	0x00000030
    f958:	0000005e 	.word	0x0000005e
    f95c:	0000005e 	.word	0x0000005e
    f960:	0000005a 	.word	0x0000005a
    f964:	0000002a 	.word	0x0000002a
    f968:	00000036 	.word	0x00000036
    f96c:	00000024 	.word	0x00000024
    f970:	0000003c 	.word	0x0000003c
    f974:	00000042 	.word	0x00000042
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    f978:	2308      	movs	r3, #8
    f97a:	60fb      	str	r3, [r7, #12]
		break;
    f97c:	e01b      	b.n	f9b6 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    f97e:	2304      	movs	r3, #4
    f980:	60fb      	str	r3, [r7, #12]
		break;
    f982:	e018      	b.n	f9b6 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    f984:	2301      	movs	r3, #1
    f986:	60fb      	str	r3, [r7, #12]
		break;
    f988:	e015      	b.n	f9b6 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    f98a:	2302      	movs	r3, #2
    f98c:	60fb      	str	r3, [r7, #12]
		break;
    f98e:	e012      	b.n	f9b6 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    f990:	23d0      	movs	r3, #208	; 0xd0
    f992:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    f994:	e00f      	b.n	f9b6 <system_clock_source_is_ready+0x82>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    f996:	4a0e      	ldr	r2, [pc, #56]	; (f9d0 <system_clock_source_is_ready+0x9c>)
    f998:	2350      	movs	r3, #80	; 0x50
    f99a:	5cd3      	ldrb	r3, [r2, r3]
    f99c:	b2db      	uxtb	r3, r3
    f99e:	001a      	movs	r2, r3
    f9a0:	2303      	movs	r3, #3
    f9a2:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    f9a4:	3b03      	subs	r3, #3
    f9a6:	425a      	negs	r2, r3
    f9a8:	4153      	adcs	r3, r2
    f9aa:	b2db      	uxtb	r3, r3
    f9ac:	e00c      	b.n	f9c8 <system_clock_source_is_ready+0x94>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    f9ae:	2301      	movs	r3, #1
    f9b0:	e00a      	b.n	f9c8 <system_clock_source_is_ready+0x94>

	default:
		return false;
    f9b2:	2300      	movs	r3, #0
    f9b4:	e008      	b.n	f9c8 <system_clock_source_is_ready+0x94>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    f9b6:	4b06      	ldr	r3, [pc, #24]	; (f9d0 <system_clock_source_is_ready+0x9c>)
    f9b8:	68db      	ldr	r3, [r3, #12]
    f9ba:	68fa      	ldr	r2, [r7, #12]
    f9bc:	401a      	ands	r2, r3
    f9be:	68fb      	ldr	r3, [r7, #12]
    f9c0:	1ad3      	subs	r3, r2, r3
    f9c2:	425a      	negs	r2, r3
    f9c4:	4153      	adcs	r3, r2
    f9c6:	b2db      	uxtb	r3, r3
}
    f9c8:	0018      	movs	r0, r3
    f9ca:	46bd      	mov	sp, r7
    f9cc:	b004      	add	sp, #16
    f9ce:	bd80      	pop	{r7, pc}
    f9d0:	40000800 	.word	0x40000800

0000f9d4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    f9d4:	b590      	push	{r4, r7, lr}
    f9d6:	b083      	sub	sp, #12
    f9d8:	af00      	add	r7, sp, #0
    f9da:	4c0d      	ldr	r4, [pc, #52]	; (fa10 <_switch_peripheral_gclk+0x3c>)
    f9dc:	447c      	add	r4, pc
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    f9de:	003b      	movs	r3, r7
    f9e0:	2203      	movs	r2, #3
    f9e2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f9e4:	2300      	movs	r3, #0
    f9e6:	607b      	str	r3, [r7, #4]
    f9e8:	e00a      	b.n	fa00 <_switch_peripheral_gclk+0x2c>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	b2db      	uxtb	r3, r3
    f9ee:	003a      	movs	r2, r7
    f9f0:	0011      	movs	r1, r2
    f9f2:	0018      	movs	r0, r3
    f9f4:	4b07      	ldr	r3, [pc, #28]	; (fa14 <_switch_peripheral_gclk+0x40>)
    f9f6:	58e3      	ldr	r3, [r4, r3]
    f9f8:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f9fa:	687b      	ldr	r3, [r7, #4]
    f9fc:	3301      	adds	r3, #1
    f9fe:	607b      	str	r3, [r7, #4]
    fa00:	687b      	ldr	r3, [r7, #4]
    fa02:	2b24      	cmp	r3, #36	; 0x24
    fa04:	d9f1      	bls.n	f9ea <_switch_peripheral_gclk+0x16>
	}
}
    fa06:	46c0      	nop			; (mov r8, r8)
    fa08:	46bd      	mov	sp, r7
    fa0a:	b003      	add	sp, #12
    fa0c:	bd90      	pop	{r4, r7, pc}
    fa0e:	46c0      	nop			; (mov r8, r8)
    fa10:	00002484 	.word	0x00002484
    fa14:	000000b0 	.word	0x000000b0

0000fa18 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    fa18:	b590      	push	{r4, r7, lr}
    fa1a:	b0ab      	sub	sp, #172	; 0xac
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	4ca9      	ldr	r4, [pc, #676]	; (fcc4 <system_clock_init+0x2ac>)
    fa20:	447c      	add	r4, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    fa22:	4ba9      	ldr	r3, [pc, #676]	; (fcc8 <system_clock_init+0x2b0>)
    fa24:	22c2      	movs	r2, #194	; 0xc2
    fa26:	00d2      	lsls	r2, r2, #3
    fa28:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    fa2a:	2001      	movs	r0, #1
    fa2c:	4ba7      	ldr	r3, [pc, #668]	; (fccc <system_clock_init+0x2b4>)
    fa2e:	447b      	add	r3, pc
    fa30:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    fa32:	4ba7      	ldr	r3, [pc, #668]	; (fcd0 <system_clock_init+0x2b8>)
    fa34:	447b      	add	r3, pc
    fa36:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    fa38:	2394      	movs	r3, #148	; 0x94
    fa3a:	18fb      	adds	r3, r7, r3
    fa3c:	0018      	movs	r0, r3
    fa3e:	4ba5      	ldr	r3, [pc, #660]	; (fcd4 <system_clock_init+0x2bc>)
    fa40:	447b      	add	r3, pc
    fa42:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    fa44:	2394      	movs	r3, #148	; 0x94
    fa46:	18fb      	adds	r3, r7, r3
    fa48:	2280      	movs	r2, #128	; 0x80
    fa4a:	0212      	lsls	r2, r2, #8
    fa4c:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    fa4e:	2394      	movs	r3, #148	; 0x94
    fa50:	18fb      	adds	r3, r7, r3
    fa52:	2200      	movs	r2, #0
    fa54:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fa56:	2394      	movs	r3, #148	; 0x94
    fa58:	18fb      	adds	r3, r7, r3
    fa5a:	2202      	movs	r2, #2
    fa5c:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    fa5e:	2394      	movs	r3, #148	; 0x94
    fa60:	18fb      	adds	r3, r7, r3
    fa62:	2201      	movs	r2, #1
    fa64:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    fa66:	2394      	movs	r3, #148	; 0x94
    fa68:	18fb      	adds	r3, r7, r3
    fa6a:	2200      	movs	r2, #0
    fa6c:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    fa6e:	2394      	movs	r3, #148	; 0x94
    fa70:	18fb      	adds	r3, r7, r3
    fa72:	2201      	movs	r2, #1
    fa74:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    fa76:	2394      	movs	r3, #148	; 0x94
    fa78:	18fb      	adds	r3, r7, r3
    fa7a:	2200      	movs	r2, #0
    fa7c:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    fa7e:	2394      	movs	r3, #148	; 0x94
    fa80:	18fb      	adds	r3, r7, r3
    fa82:	2201      	movs	r2, #1
    fa84:	731a      	strb	r2, [r3, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fa86:	2394      	movs	r3, #148	; 0x94
    fa88:	18fb      	adds	r3, r7, r3
    fa8a:	0018      	movs	r0, r3
    fa8c:	4b92      	ldr	r3, [pc, #584]	; (fcd8 <system_clock_init+0x2c0>)
    fa8e:	58e3      	ldr	r3, [r4, r3]
    fa90:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fa92:	2005      	movs	r0, #5
    fa94:	4b91      	ldr	r3, [pc, #580]	; (fcdc <system_clock_init+0x2c4>)
    fa96:	58e3      	ldr	r3, [r4, r3]
    fa98:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	2005      	movs	r0, #5
    fa9e:	4b90      	ldr	r3, [pc, #576]	; (fce0 <system_clock_init+0x2c8>)
    faa0:	58e3      	ldr	r3, [r4, r3]
    faa2:	4798      	blx	r3
    faa4:	0003      	movs	r3, r0
    faa6:	001a      	movs	r2, r3
    faa8:	2301      	movs	r3, #1
    faaa:	4053      	eors	r3, r2
    faac:	b2db      	uxtb	r3, r3
    faae:	2b00      	cmp	r3, #0
    fab0:	d1f4      	bne.n	fa9c <system_clock_init+0x84>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    fab2:	4a85      	ldr	r2, [pc, #532]	; (fcc8 <system_clock_init+0x2b0>)
    fab4:	8a93      	ldrh	r3, [r2, #20]
    fab6:	2180      	movs	r1, #128	; 0x80
    fab8:	430b      	orrs	r3, r1
    faba:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    fabc:	2380      	movs	r3, #128	; 0x80
    fabe:	18fb      	adds	r3, r7, r3
    fac0:	0018      	movs	r0, r3
    fac2:	4b88      	ldr	r3, [pc, #544]	; (fce4 <system_clock_init+0x2cc>)
    fac4:	447b      	add	r3, pc
    fac6:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fac8:	2380      	movs	r3, #128	; 0x80
    faca:	18fb      	adds	r3, r7, r3
    facc:	2204      	movs	r2, #4
    face:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    fad0:	2380      	movs	r3, #128	; 0x80
    fad2:	18fb      	adds	r3, r7, r3
    fad4:	2200      	movs	r2, #0
    fad6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fad8:	4b83      	ldr	r3, [pc, #524]	; (fce8 <system_clock_init+0x2d0>)
    fada:	681b      	ldr	r3, [r3, #0]
    fadc:	0e9b      	lsrs	r3, r3, #26
    fade:	22a4      	movs	r2, #164	; 0xa4
    fae0:	18ba      	adds	r2, r7, r2
    fae2:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    fae4:	23a4      	movs	r3, #164	; 0xa4
    fae6:	18fb      	adds	r3, r7, r3
    fae8:	681b      	ldr	r3, [r3, #0]
    faea:	2b3f      	cmp	r3, #63	; 0x3f
    faec:	d103      	bne.n	faf6 <system_clock_init+0xde>
		coarse = 0x1f;
    faee:	231f      	movs	r3, #31
    faf0:	22a4      	movs	r2, #164	; 0xa4
    faf2:	18ba      	adds	r2, r7, r2
    faf4:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    faf6:	23a4      	movs	r3, #164	; 0xa4
    faf8:	18fb      	adds	r3, r7, r3
    fafa:	681b      	ldr	r3, [r3, #0]
    fafc:	b2da      	uxtb	r2, r3
    fafe:	2380      	movs	r3, #128	; 0x80
    fb00:	18fb      	adds	r3, r7, r3
    fb02:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    fb04:	2380      	movs	r3, #128	; 0x80
    fb06:	18fb      	adds	r3, r7, r3
    fb08:	2200      	movs	r2, #0
    fb0a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    fb0c:	2380      	movs	r3, #128	; 0x80
    fb0e:	18fb      	adds	r3, r7, r3
    fb10:	2200      	movs	r2, #0
    fb12:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    fb14:	2380      	movs	r3, #128	; 0x80
    fb16:	18fb      	adds	r3, r7, r3
    fb18:	2200      	movs	r2, #0
    fb1a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    fb1c:	2380      	movs	r3, #128	; 0x80
    fb1e:	18fb      	adds	r3, r7, r3
    fb20:	2200      	movs	r2, #0
    fb22:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fb24:	2380      	movs	r3, #128	; 0x80
    fb26:	18fb      	adds	r3, r7, r3
    fb28:	4a70      	ldr	r2, [pc, #448]	; (fcec <system_clock_init+0x2d4>)
    fb2a:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    fb2c:	2380      	movs	r3, #128	; 0x80
    fb2e:	18fb      	adds	r3, r7, r3
    fb30:	2207      	movs	r2, #7
    fb32:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    fb34:	2380      	movs	r3, #128	; 0x80
    fb36:	18fb      	adds	r3, r7, r3
    fb38:	223f      	movs	r2, #63	; 0x3f
    fb3a:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    fb3c:	2380      	movs	r3, #128	; 0x80
    fb3e:	18fb      	adds	r3, r7, r3
    fb40:	0018      	movs	r0, r3
    fb42:	4b6b      	ldr	r3, [pc, #428]	; (fcf0 <system_clock_init+0x2d8>)
    fb44:	58e3      	ldr	r3, [r4, r3]
    fb46:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    fb48:	237c      	movs	r3, #124	; 0x7c
    fb4a:	18fb      	adds	r3, r7, r3
    fb4c:	0018      	movs	r0, r3
    fb4e:	4b69      	ldr	r3, [pc, #420]	; (fcf4 <system_clock_init+0x2dc>)
    fb50:	447b      	add	r3, pc
    fb52:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    fb54:	237c      	movs	r3, #124	; 0x7c
    fb56:	18fb      	adds	r3, r7, r3
    fb58:	2200      	movs	r2, #0
    fb5a:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    fb5c:	237c      	movs	r3, #124	; 0x7c
    fb5e:	18fb      	adds	r3, r7, r3
    fb60:	2201      	movs	r2, #1
    fb62:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    fb64:	237c      	movs	r3, #124	; 0x7c
    fb66:	18fb      	adds	r3, r7, r3
    fb68:	2200      	movs	r2, #0
    fb6a:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    fb6c:	237c      	movs	r3, #124	; 0x7c
    fb6e:	18fb      	adds	r3, r7, r3
    fb70:	0018      	movs	r0, r3
    fb72:	4b61      	ldr	r3, [pc, #388]	; (fcf8 <system_clock_init+0x2e0>)
    fb74:	58e3      	ldr	r3, [r4, r3]
    fb76:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    fb78:	2006      	movs	r0, #6
    fb7a:	4b58      	ldr	r3, [pc, #352]	; (fcdc <system_clock_init+0x2c4>)
    fb7c:	58e3      	ldr	r3, [r4, r3]
    fb7e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    fb80:	4b5e      	ldr	r3, [pc, #376]	; (fcfc <system_clock_init+0x2e4>)
    fb82:	58e3      	ldr	r3, [r4, r3]
    fb84:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    fb86:	2364      	movs	r3, #100	; 0x64
    fb88:	18fb      	adds	r3, r7, r3
    fb8a:	0018      	movs	r0, r3
    fb8c:	4b5c      	ldr	r3, [pc, #368]	; (fd00 <system_clock_init+0x2e8>)
    fb8e:	447b      	add	r3, pc
    fb90:	4798      	blx	r3
    fb92:	2364      	movs	r3, #100	; 0x64
    fb94:	18fb      	adds	r3, r7, r3
    fb96:	2205      	movs	r2, #5
    fb98:	701a      	strb	r2, [r3, #0]
    fb9a:	2364      	movs	r3, #100	; 0x64
    fb9c:	18fb      	adds	r3, r7, r3
    fb9e:	2201      	movs	r2, #1
    fba0:	605a      	str	r2, [r3, #4]
    fba2:	2364      	movs	r3, #100	; 0x64
    fba4:	18fb      	adds	r3, r7, r3
    fba6:	2200      	movs	r2, #0
    fba8:	721a      	strb	r2, [r3, #8]
    fbaa:	2364      	movs	r3, #100	; 0x64
    fbac:	18fb      	adds	r3, r7, r3
    fbae:	2200      	movs	r2, #0
    fbb0:	725a      	strb	r2, [r3, #9]
    fbb2:	2364      	movs	r3, #100	; 0x64
    fbb4:	18fb      	adds	r3, r7, r3
    fbb6:	0019      	movs	r1, r3
    fbb8:	2001      	movs	r0, #1
    fbba:	4b52      	ldr	r3, [pc, #328]	; (fd04 <system_clock_init+0x2ec>)
    fbbc:	58e3      	ldr	r3, [r4, r3]
    fbbe:	4798      	blx	r3
    fbc0:	2001      	movs	r0, #1
    fbc2:	4b51      	ldr	r3, [pc, #324]	; (fd08 <system_clock_init+0x2f0>)
    fbc4:	58e3      	ldr	r3, [r4, r3]
    fbc6:	4798      	blx	r3
    fbc8:	2358      	movs	r3, #88	; 0x58
    fbca:	18fb      	adds	r3, r7, r3
    fbcc:	0018      	movs	r0, r3
    fbce:	4b4f      	ldr	r3, [pc, #316]	; (fd0c <system_clock_init+0x2f4>)
    fbd0:	447b      	add	r3, pc
    fbd2:	4798      	blx	r3
    fbd4:	2358      	movs	r3, #88	; 0x58
    fbd6:	18fb      	adds	r3, r7, r3
    fbd8:	2205      	movs	r2, #5
    fbda:	701a      	strb	r2, [r3, #0]
    fbdc:	2358      	movs	r3, #88	; 0x58
    fbde:	18fb      	adds	r3, r7, r3
    fbe0:	2220      	movs	r2, #32
    fbe2:	605a      	str	r2, [r3, #4]
    fbe4:	2358      	movs	r3, #88	; 0x58
    fbe6:	18fb      	adds	r3, r7, r3
    fbe8:	2201      	movs	r2, #1
    fbea:	721a      	strb	r2, [r3, #8]
    fbec:	2358      	movs	r3, #88	; 0x58
    fbee:	18fb      	adds	r3, r7, r3
    fbf0:	2200      	movs	r2, #0
    fbf2:	725a      	strb	r2, [r3, #9]
    fbf4:	2358      	movs	r3, #88	; 0x58
    fbf6:	18fb      	adds	r3, r7, r3
    fbf8:	0019      	movs	r1, r3
    fbfa:	2002      	movs	r0, #2
    fbfc:	4b41      	ldr	r3, [pc, #260]	; (fd04 <system_clock_init+0x2ec>)
    fbfe:	58e3      	ldr	r3, [r4, r3]
    fc00:	4798      	blx	r3
    fc02:	2002      	movs	r0, #2
    fc04:	4b40      	ldr	r3, [pc, #256]	; (fd08 <system_clock_init+0x2f0>)
    fc06:	58e3      	ldr	r3, [r4, r3]
    fc08:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    fc0a:	230c      	movs	r3, #12
    fc0c:	18fb      	adds	r3, r7, r3
    fc0e:	0018      	movs	r0, r3
    fc10:	4b3f      	ldr	r3, [pc, #252]	; (fd10 <system_clock_init+0x2f8>)
    fc12:	447b      	add	r3, pc
    fc14:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    fc16:	230c      	movs	r3, #12
    fc18:	18fb      	adds	r3, r7, r3
    fc1a:	2201      	movs	r2, #1
    fc1c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    fc1e:	230c      	movs	r3, #12
    fc20:	18fb      	adds	r3, r7, r3
    fc22:	0019      	movs	r1, r3
    fc24:	2000      	movs	r0, #0
    fc26:	4b3b      	ldr	r3, [pc, #236]	; (fd14 <system_clock_init+0x2fc>)
    fc28:	58e3      	ldr	r3, [r4, r3]
    fc2a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    fc2c:	2000      	movs	r0, #0
    fc2e:	4b3a      	ldr	r3, [pc, #232]	; (fd18 <system_clock_init+0x300>)
    fc30:	58e3      	ldr	r3, [r4, r3]
    fc32:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    fc34:	2007      	movs	r0, #7
    fc36:	4b29      	ldr	r3, [pc, #164]	; (fcdc <system_clock_init+0x2c4>)
    fc38:	58e3      	ldr	r3, [r4, r3]
    fc3a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    fc3c:	46c0      	nop			; (mov r8, r8)
    fc3e:	2007      	movs	r0, #7
    fc40:	4b27      	ldr	r3, [pc, #156]	; (fce0 <system_clock_init+0x2c8>)
    fc42:	58e3      	ldr	r3, [r4, r3]
    fc44:	4798      	blx	r3
    fc46:	0003      	movs	r3, r0
    fc48:	001a      	movs	r2, r3
    fc4a:	2301      	movs	r3, #1
    fc4c:	4053      	eors	r3, r2
    fc4e:	b2db      	uxtb	r3, r3
    fc50:	2b00      	cmp	r3, #0
    fc52:	d1f4      	bne.n	fc3e <system_clock_init+0x226>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    fc54:	4a1c      	ldr	r2, [pc, #112]	; (fcc8 <system_clock_init+0x2b0>)
    fc56:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    fc58:	2180      	movs	r1, #128	; 0x80
    fc5a:	430b      	orrs	r3, r1
    fc5c:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    fc5e:	2000      	movs	r0, #0
    fc60:	4b2e      	ldr	r3, [pc, #184]	; (fd1c <system_clock_init+0x304>)
    fc62:	447b      	add	r3, pc
    fc64:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    fc66:	2100      	movs	r1, #0
    fc68:	2000      	movs	r0, #0
    fc6a:	4b2d      	ldr	r3, [pc, #180]	; (fd20 <system_clock_init+0x308>)
    fc6c:	447b      	add	r3, pc
    fc6e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    fc70:	2100      	movs	r1, #0
    fc72:	2001      	movs	r0, #1
    fc74:	4b2b      	ldr	r3, [pc, #172]	; (fd24 <system_clock_init+0x30c>)
    fc76:	447b      	add	r3, pc
    fc78:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    fc7a:	2100      	movs	r1, #0
    fc7c:	2002      	movs	r0, #2
    fc7e:	4b2a      	ldr	r3, [pc, #168]	; (fd28 <system_clock_init+0x310>)
    fc80:	447b      	add	r3, pc
    fc82:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    fc84:	003b      	movs	r3, r7
    fc86:	0018      	movs	r0, r3
    fc88:	4b28      	ldr	r3, [pc, #160]	; (fd2c <system_clock_init+0x314>)
    fc8a:	447b      	add	r3, pc
    fc8c:	4798      	blx	r3
    fc8e:	003b      	movs	r3, r7
    fc90:	2207      	movs	r2, #7
    fc92:	701a      	strb	r2, [r3, #0]
    fc94:	003b      	movs	r3, r7
    fc96:	2201      	movs	r2, #1
    fc98:	605a      	str	r2, [r3, #4]
    fc9a:	003b      	movs	r3, r7
    fc9c:	2200      	movs	r2, #0
    fc9e:	721a      	strb	r2, [r3, #8]
    fca0:	003b      	movs	r3, r7
    fca2:	2200      	movs	r2, #0
    fca4:	725a      	strb	r2, [r3, #9]
    fca6:	003b      	movs	r3, r7
    fca8:	0019      	movs	r1, r3
    fcaa:	2000      	movs	r0, #0
    fcac:	4b15      	ldr	r3, [pc, #84]	; (fd04 <system_clock_init+0x2ec>)
    fcae:	58e3      	ldr	r3, [r4, r3]
    fcb0:	4798      	blx	r3
    fcb2:	2000      	movs	r0, #0
    fcb4:	4b14      	ldr	r3, [pc, #80]	; (fd08 <system_clock_init+0x2f0>)
    fcb6:	58e3      	ldr	r3, [r4, r3]
    fcb8:	4798      	blx	r3
#endif
}
    fcba:	46c0      	nop			; (mov r8, r8)
    fcbc:	46bd      	mov	sp, r7
    fcbe:	b02b      	add	sp, #172	; 0xac
    fcc0:	bd90      	pop	{r4, r7, pc}
    fcc2:	46c0      	nop			; (mov r8, r8)
    fcc4:	00002440 	.word	0x00002440
    fcc8:	40000800 	.word	0x40000800
    fccc:	fffff9e7 	.word	0xfffff9e7
    fcd0:	ffffff9d 	.word	0xffffff9d
    fcd4:	fffff8a5 	.word	0xfffff8a5
    fcd8:	0000022c 	.word	0x0000022c
    fcdc:	0000025c 	.word	0x0000025c
    fce0:	00000280 	.word	0x00000280
    fce4:	fffff88b 	.word	0xfffff88b
    fce8:	00806024 	.word	0x00806024
    fcec:	000005dc 	.word	0x000005dc
    fcf0:	00000064 	.word	0x00000064
    fcf4:	fffff7dd 	.word	0xfffff7dd
    fcf8:	00000114 	.word	0x00000114
    fcfc:	000002c4 	.word	0x000002c4
    fd00:	fffff713 	.word	0xfffff713
    fd04:	000000f4 	.word	0x000000f4
    fd08:	000001d4 	.word	0x000001d4
    fd0c:	fffff6d1 	.word	0xfffff6d1
    fd10:	fffff6bd 	.word	0xfffff6bd
    fd14:	000000b0 	.word	0x000000b0
    fd18:	00000238 	.word	0x00000238
    fd1c:	fffff73f 	.word	0xfffff73f
    fd20:	fffff755 	.word	0xfffff755
    fd24:	fffff74b 	.word	0xfffff74b
    fd28:	fffff741 	.word	0xfffff741
    fd2c:	fffff617 	.word	0xfffff617

0000fd30 <system_apb_clock_set_mask>:
{
    fd30:	b580      	push	{r7, lr}
    fd32:	b082      	sub	sp, #8
    fd34:	af00      	add	r7, sp, #0
    fd36:	0002      	movs	r2, r0
    fd38:	6039      	str	r1, [r7, #0]
    fd3a:	1dfb      	adds	r3, r7, #7
    fd3c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    fd3e:	1dfb      	adds	r3, r7, #7
    fd40:	781b      	ldrb	r3, [r3, #0]
    fd42:	2b01      	cmp	r3, #1
    fd44:	d00a      	beq.n	fd5c <system_apb_clock_set_mask+0x2c>
    fd46:	2b02      	cmp	r3, #2
    fd48:	d00f      	beq.n	fd6a <system_apb_clock_set_mask+0x3a>
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d114      	bne.n	fd78 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    fd4e:	4b0e      	ldr	r3, [pc, #56]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd50:	4a0d      	ldr	r2, [pc, #52]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd52:	6991      	ldr	r1, [r2, #24]
    fd54:	683a      	ldr	r2, [r7, #0]
    fd56:	430a      	orrs	r2, r1
    fd58:	619a      	str	r2, [r3, #24]
			break;
    fd5a:	e00f      	b.n	fd7c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    fd5c:	4b0a      	ldr	r3, [pc, #40]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd5e:	4a0a      	ldr	r2, [pc, #40]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd60:	69d1      	ldr	r1, [r2, #28]
    fd62:	683a      	ldr	r2, [r7, #0]
    fd64:	430a      	orrs	r2, r1
    fd66:	61da      	str	r2, [r3, #28]
			break;
    fd68:	e008      	b.n	fd7c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    fd6a:	4b07      	ldr	r3, [pc, #28]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd6c:	4a06      	ldr	r2, [pc, #24]	; (fd88 <system_apb_clock_set_mask+0x58>)
    fd6e:	6a11      	ldr	r1, [r2, #32]
    fd70:	683a      	ldr	r2, [r7, #0]
    fd72:	430a      	orrs	r2, r1
    fd74:	621a      	str	r2, [r3, #32]
			break;
    fd76:	e001      	b.n	fd7c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    fd78:	2317      	movs	r3, #23
    fd7a:	e000      	b.n	fd7e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    fd7c:	2300      	movs	r3, #0
}
    fd7e:	0018      	movs	r0, r3
    fd80:	46bd      	mov	sp, r7
    fd82:	b002      	add	sp, #8
    fd84:	bd80      	pop	{r7, pc}
    fd86:	46c0      	nop			; (mov r8, r8)
    fd88:	40000400 	.word	0x40000400

0000fd8c <system_interrupt_enter_critical_section>:
{
    fd8c:	b580      	push	{r7, lr}
    fd8e:	af00      	add	r7, sp, #0
    fd90:	4a03      	ldr	r2, [pc, #12]	; (fda0 <system_interrupt_enter_critical_section+0x14>)
    fd92:	447a      	add	r2, pc
	cpu_irq_enter_critical();
    fd94:	4b03      	ldr	r3, [pc, #12]	; (fda4 <system_interrupt_enter_critical_section+0x18>)
    fd96:	58d3      	ldr	r3, [r2, r3]
    fd98:	4798      	blx	r3
}
    fd9a:	46c0      	nop			; (mov r8, r8)
    fd9c:	46bd      	mov	sp, r7
    fd9e:	bd80      	pop	{r7, pc}
    fda0:	000020ce 	.word	0x000020ce
    fda4:	000000d8 	.word	0x000000d8

0000fda8 <system_interrupt_leave_critical_section>:
{
    fda8:	b580      	push	{r7, lr}
    fdaa:	af00      	add	r7, sp, #0
    fdac:	4a03      	ldr	r2, [pc, #12]	; (fdbc <system_interrupt_leave_critical_section+0x14>)
    fdae:	447a      	add	r2, pc
	cpu_irq_leave_critical();
    fdb0:	4b03      	ldr	r3, [pc, #12]	; (fdc0 <system_interrupt_leave_critical_section+0x18>)
    fdb2:	58d3      	ldr	r3, [r2, r3]
    fdb4:	4798      	blx	r3
}
    fdb6:	46c0      	nop			; (mov r8, r8)
    fdb8:	46bd      	mov	sp, r7
    fdba:	bd80      	pop	{r7, pc}
    fdbc:	000020b2 	.word	0x000020b2
    fdc0:	00000014 	.word	0x00000014

0000fdc4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    fdc4:	b580      	push	{r7, lr}
    fdc6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fdc8:	4b05      	ldr	r3, [pc, #20]	; (fde0 <system_gclk_is_syncing+0x1c>)
    fdca:	785b      	ldrb	r3, [r3, #1]
    fdcc:	b2db      	uxtb	r3, r3
    fdce:	b25b      	sxtb	r3, r3
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	da01      	bge.n	fdd8 <system_gclk_is_syncing+0x14>
		return true;
    fdd4:	2301      	movs	r3, #1
    fdd6:	e000      	b.n	fdda <system_gclk_is_syncing+0x16>
	}

	return false;
    fdd8:	2300      	movs	r3, #0
}
    fdda:	0018      	movs	r0, r3
    fddc:	46bd      	mov	sp, r7
    fdde:	bd80      	pop	{r7, pc}
    fde0:	40000c00 	.word	0x40000c00

0000fde4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    fde4:	b580      	push	{r7, lr}
    fde6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    fde8:	2108      	movs	r1, #8
    fdea:	2000      	movs	r0, #0
    fdec:	4b08      	ldr	r3, [pc, #32]	; (fe10 <system_gclk_init+0x2c>)
    fdee:	447b      	add	r3, pc
    fdf0:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    fdf2:	4b08      	ldr	r3, [pc, #32]	; (fe14 <system_gclk_init+0x30>)
    fdf4:	2201      	movs	r2, #1
    fdf6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    fdf8:	46c0      	nop			; (mov r8, r8)
    fdfa:	4b06      	ldr	r3, [pc, #24]	; (fe14 <system_gclk_init+0x30>)
    fdfc:	781b      	ldrb	r3, [r3, #0]
    fdfe:	b2db      	uxtb	r3, r3
    fe00:	001a      	movs	r2, r3
    fe02:	2301      	movs	r3, #1
    fe04:	4013      	ands	r3, r2
    fe06:	d1f8      	bne.n	fdfa <system_gclk_init+0x16>
		/* Wait for reset to complete */
	}
}
    fe08:	46c0      	nop			; (mov r8, r8)
    fe0a:	46bd      	mov	sp, r7
    fe0c:	bd80      	pop	{r7, pc}
    fe0e:	46c0      	nop			; (mov r8, r8)
    fe10:	ffffff3f 	.word	0xffffff3f
    fe14:	40000c00 	.word	0x40000c00

0000fe18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    fe18:	b580      	push	{r7, lr}
    fe1a:	b086      	sub	sp, #24
    fe1c:	af00      	add	r7, sp, #0
    fe1e:	0002      	movs	r2, r0
    fe20:	6039      	str	r1, [r7, #0]
    fe22:	1dfb      	adds	r3, r7, #7
    fe24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    fe26:	1dfb      	adds	r3, r7, #7
    fe28:	781b      	ldrb	r3, [r3, #0]
    fe2a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    fe2c:	1dfb      	adds	r3, r7, #7
    fe2e:	781b      	ldrb	r3, [r3, #0]
    fe30:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    fe32:	683b      	ldr	r3, [r7, #0]
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	021b      	lsls	r3, r3, #8
    fe38:	001a      	movs	r2, r3
    fe3a:	697b      	ldr	r3, [r7, #20]
    fe3c:	4313      	orrs	r3, r2
    fe3e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    fe40:	683b      	ldr	r3, [r7, #0]
    fe42:	785b      	ldrb	r3, [r3, #1]
    fe44:	2b00      	cmp	r3, #0
    fe46:	d004      	beq.n	fe52 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    fe48:	697b      	ldr	r3, [r7, #20]
    fe4a:	2280      	movs	r2, #128	; 0x80
    fe4c:	02d2      	lsls	r2, r2, #11
    fe4e:	4313      	orrs	r3, r2
    fe50:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    fe52:	683b      	ldr	r3, [r7, #0]
    fe54:	7a5b      	ldrb	r3, [r3, #9]
    fe56:	2b00      	cmp	r3, #0
    fe58:	d004      	beq.n	fe64 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    fe5a:	697b      	ldr	r3, [r7, #20]
    fe5c:	2280      	movs	r2, #128	; 0x80
    fe5e:	0312      	lsls	r2, r2, #12
    fe60:	4313      	orrs	r3, r2
    fe62:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    fe64:	683b      	ldr	r3, [r7, #0]
    fe66:	685b      	ldr	r3, [r3, #4]
    fe68:	2b01      	cmp	r3, #1
    fe6a:	d92c      	bls.n	fec6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    fe6c:	683b      	ldr	r3, [r7, #0]
    fe6e:	685a      	ldr	r2, [r3, #4]
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	685b      	ldr	r3, [r3, #4]
    fe74:	3b01      	subs	r3, #1
    fe76:	4013      	ands	r3, r2
    fe78:	d11a      	bne.n	feb0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    fe7a:	2300      	movs	r3, #0
    fe7c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    fe7e:	2302      	movs	r3, #2
    fe80:	60bb      	str	r3, [r7, #8]
    fe82:	e005      	b.n	fe90 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    fe84:	68fb      	ldr	r3, [r7, #12]
    fe86:	3301      	adds	r3, #1
    fe88:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    fe8a:	68bb      	ldr	r3, [r7, #8]
    fe8c:	005b      	lsls	r3, r3, #1
    fe8e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    fe90:	683b      	ldr	r3, [r7, #0]
    fe92:	685a      	ldr	r2, [r3, #4]
    fe94:	68bb      	ldr	r3, [r7, #8]
    fe96:	429a      	cmp	r2, r3
    fe98:	d8f4      	bhi.n	fe84 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    fe9a:	68fb      	ldr	r3, [r7, #12]
    fe9c:	021b      	lsls	r3, r3, #8
    fe9e:	693a      	ldr	r2, [r7, #16]
    fea0:	4313      	orrs	r3, r2
    fea2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    fea4:	697b      	ldr	r3, [r7, #20]
    fea6:	2280      	movs	r2, #128	; 0x80
    fea8:	0352      	lsls	r2, r2, #13
    feaa:	4313      	orrs	r3, r2
    feac:	617b      	str	r3, [r7, #20]
    feae:	e00a      	b.n	fec6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    feb0:	683b      	ldr	r3, [r7, #0]
    feb2:	685b      	ldr	r3, [r3, #4]
    feb4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    feb6:	693a      	ldr	r2, [r7, #16]
    feb8:	4313      	orrs	r3, r2
    feba:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    febc:	697b      	ldr	r3, [r7, #20]
    febe:	2280      	movs	r2, #128	; 0x80
    fec0:	0292      	lsls	r2, r2, #10
    fec2:	4313      	orrs	r3, r2
    fec4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    fec6:	683b      	ldr	r3, [r7, #0]
    fec8:	7a1b      	ldrb	r3, [r3, #8]
    feca:	2b00      	cmp	r3, #0
    fecc:	d004      	beq.n	fed8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    fece:	697b      	ldr	r3, [r7, #20]
    fed0:	2280      	movs	r2, #128	; 0x80
    fed2:	0392      	lsls	r2, r2, #14
    fed4:	4313      	orrs	r3, r2
    fed6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    fed8:	46c0      	nop			; (mov r8, r8)
    feda:	4b15      	ldr	r3, [pc, #84]	; (ff30 <system_gclk_gen_set_config+0x118>)
    fedc:	447b      	add	r3, pc
    fede:	4798      	blx	r3
    fee0:	1e03      	subs	r3, r0, #0
    fee2:	d1fa      	bne.n	feda <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    fee4:	4b13      	ldr	r3, [pc, #76]	; (ff34 <system_gclk_gen_set_config+0x11c>)
    fee6:	447b      	add	r3, pc
    fee8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    feea:	4a13      	ldr	r2, [pc, #76]	; (ff38 <system_gclk_gen_set_config+0x120>)
    feec:	1dfb      	adds	r3, r7, #7
    feee:	781b      	ldrb	r3, [r3, #0]
    fef0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    fef2:	46c0      	nop			; (mov r8, r8)
    fef4:	4b11      	ldr	r3, [pc, #68]	; (ff3c <system_gclk_gen_set_config+0x124>)
    fef6:	447b      	add	r3, pc
    fef8:	4798      	blx	r3
    fefa:	1e03      	subs	r3, r0, #0
    fefc:	d1fa      	bne.n	fef4 <system_gclk_gen_set_config+0xdc>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    fefe:	4b10      	ldr	r3, [pc, #64]	; (ff40 <system_gclk_gen_set_config+0x128>)
    ff00:	693a      	ldr	r2, [r7, #16]
    ff02:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    ff04:	46c0      	nop			; (mov r8, r8)
    ff06:	4b0f      	ldr	r3, [pc, #60]	; (ff44 <system_gclk_gen_set_config+0x12c>)
    ff08:	447b      	add	r3, pc
    ff0a:	4798      	blx	r3
    ff0c:	1e03      	subs	r3, r0, #0
    ff0e:	d1fa      	bne.n	ff06 <system_gclk_gen_set_config+0xee>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ff10:	4b0b      	ldr	r3, [pc, #44]	; (ff40 <system_gclk_gen_set_config+0x128>)
    ff12:	4a0b      	ldr	r2, [pc, #44]	; (ff40 <system_gclk_gen_set_config+0x128>)
    ff14:	6851      	ldr	r1, [r2, #4]
    ff16:	2280      	movs	r2, #128	; 0x80
    ff18:	0252      	lsls	r2, r2, #9
    ff1a:	4011      	ands	r1, r2
    ff1c:	697a      	ldr	r2, [r7, #20]
    ff1e:	430a      	orrs	r2, r1
    ff20:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ff22:	4b09      	ldr	r3, [pc, #36]	; (ff48 <system_gclk_gen_set_config+0x130>)
    ff24:	447b      	add	r3, pc
    ff26:	4798      	blx	r3
}
    ff28:	46c0      	nop			; (mov r8, r8)
    ff2a:	46bd      	mov	sp, r7
    ff2c:	b006      	add	sp, #24
    ff2e:	bd80      	pop	{r7, pc}
    ff30:	fffffee5 	.word	0xfffffee5
    ff34:	fffffea3 	.word	0xfffffea3
    ff38:	40000c08 	.word	0x40000c08
    ff3c:	fffffecb 	.word	0xfffffecb
    ff40:	40000c00 	.word	0x40000c00
    ff44:	fffffeb9 	.word	0xfffffeb9
    ff48:	fffffe81 	.word	0xfffffe81

0000ff4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ff4c:	b580      	push	{r7, lr}
    ff4e:	b082      	sub	sp, #8
    ff50:	af00      	add	r7, sp, #0
    ff52:	0002      	movs	r2, r0
    ff54:	1dfb      	adds	r3, r7, #7
    ff56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ff58:	46c0      	nop			; (mov r8, r8)
    ff5a:	4b10      	ldr	r3, [pc, #64]	; (ff9c <system_gclk_gen_enable+0x50>)
    ff5c:	447b      	add	r3, pc
    ff5e:	4798      	blx	r3
    ff60:	1e03      	subs	r3, r0, #0
    ff62:	d1fa      	bne.n	ff5a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ff64:	4b0e      	ldr	r3, [pc, #56]	; (ffa0 <system_gclk_gen_enable+0x54>)
    ff66:	447b      	add	r3, pc
    ff68:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ff6a:	4a0e      	ldr	r2, [pc, #56]	; (ffa4 <system_gclk_gen_enable+0x58>)
    ff6c:	1dfb      	adds	r3, r7, #7
    ff6e:	781b      	ldrb	r3, [r3, #0]
    ff70:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ff72:	46c0      	nop			; (mov r8, r8)
    ff74:	4b0c      	ldr	r3, [pc, #48]	; (ffa8 <system_gclk_gen_enable+0x5c>)
    ff76:	447b      	add	r3, pc
    ff78:	4798      	blx	r3
    ff7a:	1e03      	subs	r3, r0, #0
    ff7c:	d1fa      	bne.n	ff74 <system_gclk_gen_enable+0x28>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    ff7e:	4b0b      	ldr	r3, [pc, #44]	; (ffac <system_gclk_gen_enable+0x60>)
    ff80:	4a0a      	ldr	r2, [pc, #40]	; (ffac <system_gclk_gen_enable+0x60>)
    ff82:	6852      	ldr	r2, [r2, #4]
    ff84:	2180      	movs	r1, #128	; 0x80
    ff86:	0249      	lsls	r1, r1, #9
    ff88:	430a      	orrs	r2, r1
    ff8a:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ff8c:	4b08      	ldr	r3, [pc, #32]	; (ffb0 <system_gclk_gen_enable+0x64>)
    ff8e:	447b      	add	r3, pc
    ff90:	4798      	blx	r3
}
    ff92:	46c0      	nop			; (mov r8, r8)
    ff94:	46bd      	mov	sp, r7
    ff96:	b002      	add	sp, #8
    ff98:	bd80      	pop	{r7, pc}
    ff9a:	46c0      	nop			; (mov r8, r8)
    ff9c:	fffffe65 	.word	0xfffffe65
    ffa0:	fffffe23 	.word	0xfffffe23
    ffa4:	40000c04 	.word	0x40000c04
    ffa8:	fffffe4b 	.word	0xfffffe4b
    ffac:	40000c00 	.word	0x40000c00
    ffb0:	fffffe17 	.word	0xfffffe17

0000ffb4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ffb4:	b590      	push	{r4, r7, lr}
    ffb6:	b087      	sub	sp, #28
    ffb8:	af00      	add	r7, sp, #0
    ffba:	0002      	movs	r2, r0
    ffbc:	1dfb      	adds	r3, r7, #7
    ffbe:	701a      	strb	r2, [r3, #0]
    ffc0:	4c2f      	ldr	r4, [pc, #188]	; (10080 <system_gclk_gen_get_hz+0xcc>)
    ffc2:	447c      	add	r4, pc
	while (system_gclk_is_syncing()) {
    ffc4:	46c0      	nop			; (mov r8, r8)
    ffc6:	4b2f      	ldr	r3, [pc, #188]	; (10084 <system_gclk_gen_get_hz+0xd0>)
    ffc8:	447b      	add	r3, pc
    ffca:	4798      	blx	r3
    ffcc:	1e03      	subs	r3, r0, #0
    ffce:	d1fa      	bne.n	ffc6 <system_gclk_gen_get_hz+0x12>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ffd0:	4b2d      	ldr	r3, [pc, #180]	; (10088 <system_gclk_gen_get_hz+0xd4>)
    ffd2:	447b      	add	r3, pc
    ffd4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ffd6:	4a2d      	ldr	r2, [pc, #180]	; (1008c <system_gclk_gen_get_hz+0xd8>)
    ffd8:	1dfb      	adds	r3, r7, #7
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ffde:	46c0      	nop			; (mov r8, r8)
    ffe0:	4b2b      	ldr	r3, [pc, #172]	; (10090 <system_gclk_gen_get_hz+0xdc>)
    ffe2:	447b      	add	r3, pc
    ffe4:	4798      	blx	r3
    ffe6:	1e03      	subs	r3, r0, #0
    ffe8:	d1fa      	bne.n	ffe0 <system_gclk_gen_get_hz+0x2c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ffea:	4b2a      	ldr	r3, [pc, #168]	; (10094 <system_gclk_gen_get_hz+0xe0>)
    ffec:	685b      	ldr	r3, [r3, #4]
    ffee:	04db      	lsls	r3, r3, #19
    fff0:	0edb      	lsrs	r3, r3, #27
    fff2:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    fff4:	0018      	movs	r0, r3
    fff6:	4b28      	ldr	r3, [pc, #160]	; (10098 <system_gclk_gen_get_hz+0xe4>)
    fff8:	58e3      	ldr	r3, [r4, r3]
    fffa:	4798      	blx	r3
    fffc:	0003      	movs	r3, r0
    fffe:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10000:	4a22      	ldr	r2, [pc, #136]	; (1008c <system_gclk_gen_get_hz+0xd8>)
   10002:	1dfb      	adds	r3, r7, #7
   10004:	781b      	ldrb	r3, [r3, #0]
   10006:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   10008:	4b22      	ldr	r3, [pc, #136]	; (10094 <system_gclk_gen_get_hz+0xe0>)
   1000a:	685b      	ldr	r3, [r3, #4]
   1000c:	02db      	lsls	r3, r3, #11
   1000e:	0fdb      	lsrs	r3, r3, #31
   10010:	b2da      	uxtb	r2, r3
   10012:	2313      	movs	r3, #19
   10014:	18fb      	adds	r3, r7, r3
   10016:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10018:	4a20      	ldr	r2, [pc, #128]	; (1009c <system_gclk_gen_get_hz+0xe8>)
   1001a:	1dfb      	adds	r3, r7, #7
   1001c:	781b      	ldrb	r3, [r3, #0]
   1001e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   10020:	46c0      	nop			; (mov r8, r8)
   10022:	4b1f      	ldr	r3, [pc, #124]	; (100a0 <system_gclk_gen_get_hz+0xec>)
   10024:	447b      	add	r3, pc
   10026:	4798      	blx	r3
   10028:	1e03      	subs	r3, r0, #0
   1002a:	d1fa      	bne.n	10022 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1002c:	4b19      	ldr	r3, [pc, #100]	; (10094 <system_gclk_gen_get_hz+0xe0>)
   1002e:	689b      	ldr	r3, [r3, #8]
   10030:	021b      	lsls	r3, r3, #8
   10032:	0c1b      	lsrs	r3, r3, #16
   10034:	b29b      	uxth	r3, r3
   10036:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   10038:	4b1a      	ldr	r3, [pc, #104]	; (100a4 <system_gclk_gen_get_hz+0xf0>)
   1003a:	447b      	add	r3, pc
   1003c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1003e:	2313      	movs	r3, #19
   10040:	18fb      	adds	r3, r7, r3
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	2b00      	cmp	r3, #0
   10046:	d10a      	bne.n	1005e <system_gclk_gen_get_hz+0xaa>
   10048:	68fb      	ldr	r3, [r7, #12]
   1004a:	2b01      	cmp	r3, #1
   1004c:	d907      	bls.n	1005e <system_gclk_gen_get_hz+0xaa>
		gen_input_hz /= divider;
   1004e:	4b16      	ldr	r3, [pc, #88]	; (100a8 <system_gclk_gen_get_hz+0xf4>)
   10050:	58e3      	ldr	r3, [r4, r3]
   10052:	68f9      	ldr	r1, [r7, #12]
   10054:	6978      	ldr	r0, [r7, #20]
   10056:	4798      	blx	r3
   10058:	0003      	movs	r3, r0
   1005a:	617b      	str	r3, [r7, #20]
   1005c:	e00a      	b.n	10074 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
   1005e:	2313      	movs	r3, #19
   10060:	18fb      	adds	r3, r7, r3
   10062:	781b      	ldrb	r3, [r3, #0]
   10064:	2b00      	cmp	r3, #0
   10066:	d005      	beq.n	10074 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
   10068:	68fb      	ldr	r3, [r7, #12]
   1006a:	3301      	adds	r3, #1
   1006c:	697a      	ldr	r2, [r7, #20]
   1006e:	40da      	lsrs	r2, r3
   10070:	0013      	movs	r3, r2
   10072:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   10074:	697b      	ldr	r3, [r7, #20]
}
   10076:	0018      	movs	r0, r3
   10078:	46bd      	mov	sp, r7
   1007a:	b007      	add	sp, #28
   1007c:	bd90      	pop	{r4, r7, pc}
   1007e:	46c0      	nop			; (mov r8, r8)
   10080:	00001e9e 	.word	0x00001e9e
   10084:	fffffdf9 	.word	0xfffffdf9
   10088:	fffffdb7 	.word	0xfffffdb7
   1008c:	40000c04 	.word	0x40000c04
   10090:	fffffddf 	.word	0xfffffddf
   10094:	40000c00 	.word	0x40000c00
   10098:	0000026c 	.word	0x0000026c
   1009c:	40000c08 	.word	0x40000c08
   100a0:	fffffd9d 	.word	0xfffffd9d
   100a4:	fffffd6b 	.word	0xfffffd6b
   100a8:	0000020c 	.word	0x0000020c

000100ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   100ac:	b580      	push	{r7, lr}
   100ae:	b084      	sub	sp, #16
   100b0:	af00      	add	r7, sp, #0
   100b2:	0002      	movs	r2, r0
   100b4:	6039      	str	r1, [r7, #0]
   100b6:	1dfb      	adds	r3, r7, #7
   100b8:	701a      	strb	r2, [r3, #0]
   100ba:	4a0d      	ldr	r2, [pc, #52]	; (100f0 <system_gclk_chan_set_config+0x44>)
   100bc:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   100be:	1dfb      	adds	r3, r7, #7
   100c0:	781b      	ldrb	r3, [r3, #0]
   100c2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   100c4:	683b      	ldr	r3, [r7, #0]
   100c6:	781b      	ldrb	r3, [r3, #0]
   100c8:	021b      	lsls	r3, r3, #8
   100ca:	0019      	movs	r1, r3
   100cc:	68fb      	ldr	r3, [r7, #12]
   100ce:	430b      	orrs	r3, r1
   100d0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   100d2:	1dfb      	adds	r3, r7, #7
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	0018      	movs	r0, r3
   100d8:	4b06      	ldr	r3, [pc, #24]	; (100f4 <system_gclk_chan_set_config+0x48>)
   100da:	58d3      	ldr	r3, [r2, r3]
   100dc:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   100de:	4b06      	ldr	r3, [pc, #24]	; (100f8 <system_gclk_chan_set_config+0x4c>)
   100e0:	68fa      	ldr	r2, [r7, #12]
   100e2:	b292      	uxth	r2, r2
   100e4:	805a      	strh	r2, [r3, #2]
}
   100e6:	46c0      	nop			; (mov r8, r8)
   100e8:	46bd      	mov	sp, r7
   100ea:	b004      	add	sp, #16
   100ec:	bd80      	pop	{r7, pc}
   100ee:	46c0      	nop			; (mov r8, r8)
   100f0:	00001da4 	.word	0x00001da4
   100f4:	00000290 	.word	0x00000290
   100f8:	40000c00 	.word	0x40000c00

000100fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   100fc:	b580      	push	{r7, lr}
   100fe:	b082      	sub	sp, #8
   10100:	af00      	add	r7, sp, #0
   10102:	0002      	movs	r2, r0
   10104:	1dfb      	adds	r3, r7, #7
   10106:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   10108:	4b0b      	ldr	r3, [pc, #44]	; (10138 <system_gclk_chan_enable+0x3c>)
   1010a:	447b      	add	r3, pc
   1010c:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1010e:	4a0b      	ldr	r2, [pc, #44]	; (1013c <system_gclk_chan_enable+0x40>)
   10110:	1dfb      	adds	r3, r7, #7
   10112:	781b      	ldrb	r3, [r3, #0]
   10114:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   10116:	490a      	ldr	r1, [pc, #40]	; (10140 <system_gclk_chan_enable+0x44>)
   10118:	4b09      	ldr	r3, [pc, #36]	; (10140 <system_gclk_chan_enable+0x44>)
   1011a:	885b      	ldrh	r3, [r3, #2]
   1011c:	b29b      	uxth	r3, r3
   1011e:	2280      	movs	r2, #128	; 0x80
   10120:	01d2      	lsls	r2, r2, #7
   10122:	4313      	orrs	r3, r2
   10124:	b29b      	uxth	r3, r3
   10126:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   10128:	4b06      	ldr	r3, [pc, #24]	; (10144 <system_gclk_chan_enable+0x48>)
   1012a:	447b      	add	r3, pc
   1012c:	4798      	blx	r3
}
   1012e:	46c0      	nop			; (mov r8, r8)
   10130:	46bd      	mov	sp, r7
   10132:	b002      	add	sp, #8
   10134:	bd80      	pop	{r7, pc}
   10136:	46c0      	nop			; (mov r8, r8)
   10138:	fffffc7f 	.word	0xfffffc7f
   1013c:	40000c02 	.word	0x40000c02
   10140:	40000c00 	.word	0x40000c00
   10144:	fffffc7b 	.word	0xfffffc7b

00010148 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   10148:	b580      	push	{r7, lr}
   1014a:	b084      	sub	sp, #16
   1014c:	af00      	add	r7, sp, #0
   1014e:	0002      	movs	r2, r0
   10150:	1dfb      	adds	r3, r7, #7
   10152:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   10154:	4b1d      	ldr	r3, [pc, #116]	; (101cc <system_gclk_chan_disable+0x84>)
   10156:	447b      	add	r3, pc
   10158:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1015a:	4a1d      	ldr	r2, [pc, #116]	; (101d0 <system_gclk_chan_disable+0x88>)
   1015c:	1dfb      	adds	r3, r7, #7
   1015e:	781b      	ldrb	r3, [r3, #0]
   10160:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   10162:	4b1c      	ldr	r3, [pc, #112]	; (101d4 <system_gclk_chan_disable+0x8c>)
   10164:	885b      	ldrh	r3, [r3, #2]
   10166:	051b      	lsls	r3, r3, #20
   10168:	0f1b      	lsrs	r3, r3, #28
   1016a:	b2db      	uxtb	r3, r3
   1016c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1016e:	4a19      	ldr	r2, [pc, #100]	; (101d4 <system_gclk_chan_disable+0x8c>)
   10170:	8853      	ldrh	r3, [r2, #2]
   10172:	4919      	ldr	r1, [pc, #100]	; (101d8 <system_gclk_chan_disable+0x90>)
   10174:	400b      	ands	r3, r1
   10176:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10178:	4a16      	ldr	r2, [pc, #88]	; (101d4 <system_gclk_chan_disable+0x8c>)
   1017a:	4b16      	ldr	r3, [pc, #88]	; (101d4 <system_gclk_chan_disable+0x8c>)
   1017c:	885b      	ldrh	r3, [r3, #2]
   1017e:	b29b      	uxth	r3, r3
   10180:	4916      	ldr	r1, [pc, #88]	; (101dc <system_gclk_chan_disable+0x94>)
   10182:	400b      	ands	r3, r1
   10184:	b29b      	uxth	r3, r3
   10186:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10188:	46c0      	nop			; (mov r8, r8)
   1018a:	4b12      	ldr	r3, [pc, #72]	; (101d4 <system_gclk_chan_disable+0x8c>)
   1018c:	885b      	ldrh	r3, [r3, #2]
   1018e:	b29b      	uxth	r3, r3
   10190:	001a      	movs	r2, r3
   10192:	2380      	movs	r3, #128	; 0x80
   10194:	01db      	lsls	r3, r3, #7
   10196:	4013      	ands	r3, r2
   10198:	d1f7      	bne.n	1018a <system_gclk_chan_disable+0x42>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1019a:	4a0e      	ldr	r2, [pc, #56]	; (101d4 <system_gclk_chan_disable+0x8c>)
   1019c:	68fb      	ldr	r3, [r7, #12]
   1019e:	b2db      	uxtb	r3, r3
   101a0:	1c19      	adds	r1, r3, #0
   101a2:	230f      	movs	r3, #15
   101a4:	400b      	ands	r3, r1
   101a6:	b2d9      	uxtb	r1, r3
   101a8:	8853      	ldrh	r3, [r2, #2]
   101aa:	1c08      	adds	r0, r1, #0
   101ac:	210f      	movs	r1, #15
   101ae:	4001      	ands	r1, r0
   101b0:	0208      	lsls	r0, r1, #8
   101b2:	4909      	ldr	r1, [pc, #36]	; (101d8 <system_gclk_chan_disable+0x90>)
   101b4:	400b      	ands	r3, r1
   101b6:	1c19      	adds	r1, r3, #0
   101b8:	1c03      	adds	r3, r0, #0
   101ba:	430b      	orrs	r3, r1
   101bc:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   101be:	4b08      	ldr	r3, [pc, #32]	; (101e0 <system_gclk_chan_disable+0x98>)
   101c0:	447b      	add	r3, pc
   101c2:	4798      	blx	r3
}
   101c4:	46c0      	nop			; (mov r8, r8)
   101c6:	46bd      	mov	sp, r7
   101c8:	b004      	add	sp, #16
   101ca:	bd80      	pop	{r7, pc}
   101cc:	fffffc33 	.word	0xfffffc33
   101d0:	40000c02 	.word	0x40000c02
   101d4:	40000c00 	.word	0x40000c00
   101d8:	fffff0ff 	.word	0xfffff0ff
   101dc:	ffffbfff 	.word	0xffffbfff
   101e0:	fffffbe5 	.word	0xfffffbe5

000101e4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   101e4:	b590      	push	{r4, r7, lr}
   101e6:	b085      	sub	sp, #20
   101e8:	af00      	add	r7, sp, #0
   101ea:	0002      	movs	r2, r0
   101ec:	1dfb      	adds	r3, r7, #7
   101ee:	701a      	strb	r2, [r3, #0]
   101f0:	4c0f      	ldr	r4, [pc, #60]	; (10230 <system_gclk_chan_get_hz+0x4c>)
   101f2:	447c      	add	r4, pc
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   101f4:	4b0f      	ldr	r3, [pc, #60]	; (10234 <system_gclk_chan_get_hz+0x50>)
   101f6:	447b      	add	r3, pc
   101f8:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   101fa:	4a0f      	ldr	r2, [pc, #60]	; (10238 <system_gclk_chan_get_hz+0x54>)
   101fc:	1dfb      	adds	r3, r7, #7
   101fe:	781b      	ldrb	r3, [r3, #0]
   10200:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   10202:	4b0e      	ldr	r3, [pc, #56]	; (1023c <system_gclk_chan_get_hz+0x58>)
   10204:	885b      	ldrh	r3, [r3, #2]
   10206:	051b      	lsls	r3, r3, #20
   10208:	0f1b      	lsrs	r3, r3, #28
   1020a:	b2da      	uxtb	r2, r3
   1020c:	230f      	movs	r3, #15
   1020e:	18fb      	adds	r3, r7, r3
   10210:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   10212:	4b0b      	ldr	r3, [pc, #44]	; (10240 <system_gclk_chan_get_hz+0x5c>)
   10214:	447b      	add	r3, pc
   10216:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   10218:	230f      	movs	r3, #15
   1021a:	18fb      	adds	r3, r7, r3
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	0018      	movs	r0, r3
   10220:	4b08      	ldr	r3, [pc, #32]	; (10244 <system_gclk_chan_get_hz+0x60>)
   10222:	58e3      	ldr	r3, [r4, r3]
   10224:	4798      	blx	r3
   10226:	0003      	movs	r3, r0
}
   10228:	0018      	movs	r0, r3
   1022a:	46bd      	mov	sp, r7
   1022c:	b005      	add	sp, #20
   1022e:	bd90      	pop	{r4, r7, pc}
   10230:	00001c6e 	.word	0x00001c6e
   10234:	fffffb93 	.word	0xfffffb93
   10238:	40000c02 	.word	0x40000c02
   1023c:	40000c00 	.word	0x40000c00
   10240:	fffffb91 	.word	0xfffffb91
   10244:	000000e0 	.word	0x000000e0

00010248 <system_pinmux_get_group_from_gpio_pin>:
{
   10248:	b580      	push	{r7, lr}
   1024a:	b084      	sub	sp, #16
   1024c:	af00      	add	r7, sp, #0
   1024e:	0002      	movs	r2, r0
   10250:	1dfb      	adds	r3, r7, #7
   10252:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10254:	230f      	movs	r3, #15
   10256:	18fb      	adds	r3, r7, r3
   10258:	1dfa      	adds	r2, r7, #7
   1025a:	7812      	ldrb	r2, [r2, #0]
   1025c:	09d2      	lsrs	r2, r2, #7
   1025e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10260:	230e      	movs	r3, #14
   10262:	18fb      	adds	r3, r7, r3
   10264:	1dfa      	adds	r2, r7, #7
   10266:	7812      	ldrb	r2, [r2, #0]
   10268:	0952      	lsrs	r2, r2, #5
   1026a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1026c:	4b0d      	ldr	r3, [pc, #52]	; (102a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1026e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   10270:	230f      	movs	r3, #15
   10272:	18fb      	adds	r3, r7, r3
   10274:	781b      	ldrb	r3, [r3, #0]
   10276:	2b00      	cmp	r3, #0
   10278:	d10f      	bne.n	1029a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1027a:	230f      	movs	r3, #15
   1027c:	18fb      	adds	r3, r7, r3
   1027e:	781b      	ldrb	r3, [r3, #0]
   10280:	009b      	lsls	r3, r3, #2
   10282:	2210      	movs	r2, #16
   10284:	4694      	mov	ip, r2
   10286:	44bc      	add	ip, r7
   10288:	4463      	add	r3, ip
   1028a:	3b08      	subs	r3, #8
   1028c:	681a      	ldr	r2, [r3, #0]
   1028e:	230e      	movs	r3, #14
   10290:	18fb      	adds	r3, r7, r3
   10292:	781b      	ldrb	r3, [r3, #0]
   10294:	01db      	lsls	r3, r3, #7
   10296:	18d3      	adds	r3, r2, r3
   10298:	e000      	b.n	1029c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1029a:	2300      	movs	r3, #0
}
   1029c:	0018      	movs	r0, r3
   1029e:	46bd      	mov	sp, r7
   102a0:	b004      	add	sp, #16
   102a2:	bd80      	pop	{r7, pc}
   102a4:	41004400 	.word	0x41004400

000102a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   102a8:	b580      	push	{r7, lr}
   102aa:	b088      	sub	sp, #32
   102ac:	af00      	add	r7, sp, #0
   102ae:	60f8      	str	r0, [r7, #12]
   102b0:	60b9      	str	r1, [r7, #8]
   102b2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   102b4:	2300      	movs	r3, #0
   102b6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   102b8:	687b      	ldr	r3, [r7, #4]
   102ba:	78db      	ldrb	r3, [r3, #3]
   102bc:	2201      	movs	r2, #1
   102be:	4053      	eors	r3, r2
   102c0:	b2db      	uxtb	r3, r3
   102c2:	2b00      	cmp	r3, #0
   102c4:	d035      	beq.n	10332 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   102c6:	687b      	ldr	r3, [r7, #4]
   102c8:	781b      	ldrb	r3, [r3, #0]
   102ca:	2b80      	cmp	r3, #128	; 0x80
   102cc:	d00b      	beq.n	102e6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   102ce:	69fb      	ldr	r3, [r7, #28]
   102d0:	2280      	movs	r2, #128	; 0x80
   102d2:	0252      	lsls	r2, r2, #9
   102d4:	4313      	orrs	r3, r2
   102d6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   102d8:	687b      	ldr	r3, [r7, #4]
   102da:	781b      	ldrb	r3, [r3, #0]
   102dc:	061b      	lsls	r3, r3, #24
   102de:	001a      	movs	r2, r3
   102e0:	69fb      	ldr	r3, [r7, #28]
   102e2:	4313      	orrs	r3, r2
   102e4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   102e6:	687b      	ldr	r3, [r7, #4]
   102e8:	785b      	ldrb	r3, [r3, #1]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d003      	beq.n	102f6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   102ee:	687b      	ldr	r3, [r7, #4]
   102f0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   102f2:	2b02      	cmp	r3, #2
   102f4:	d110      	bne.n	10318 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   102f6:	69fb      	ldr	r3, [r7, #28]
   102f8:	2280      	movs	r2, #128	; 0x80
   102fa:	0292      	lsls	r2, r2, #10
   102fc:	4313      	orrs	r3, r2
   102fe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   10300:	687b      	ldr	r3, [r7, #4]
   10302:	789b      	ldrb	r3, [r3, #2]
   10304:	2b00      	cmp	r3, #0
   10306:	d004      	beq.n	10312 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   10308:	69fb      	ldr	r3, [r7, #28]
   1030a:	2280      	movs	r2, #128	; 0x80
   1030c:	02d2      	lsls	r2, r2, #11
   1030e:	4313      	orrs	r3, r2
   10310:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   10312:	68fb      	ldr	r3, [r7, #12]
   10314:	68ba      	ldr	r2, [r7, #8]
   10316:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10318:	687b      	ldr	r3, [r7, #4]
   1031a:	785b      	ldrb	r3, [r3, #1]
   1031c:	2b01      	cmp	r3, #1
   1031e:	d003      	beq.n	10328 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   10320:	687b      	ldr	r3, [r7, #4]
   10322:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10324:	2b02      	cmp	r3, #2
   10326:	d107      	bne.n	10338 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   10328:	69fb      	ldr	r3, [r7, #28]
   1032a:	4a22      	ldr	r2, [pc, #136]	; (103b4 <_system_pinmux_config+0x10c>)
   1032c:	4013      	ands	r3, r2
   1032e:	61fb      	str	r3, [r7, #28]
   10330:	e002      	b.n	10338 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   10332:	68fb      	ldr	r3, [r7, #12]
   10334:	68ba      	ldr	r2, [r7, #8]
   10336:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   10338:	68bb      	ldr	r3, [r7, #8]
   1033a:	041b      	lsls	r3, r3, #16
   1033c:	0c1b      	lsrs	r3, r3, #16
   1033e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10340:	68bb      	ldr	r3, [r7, #8]
   10342:	0c1b      	lsrs	r3, r3, #16
   10344:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10346:	69ba      	ldr	r2, [r7, #24]
   10348:	69fb      	ldr	r3, [r7, #28]
   1034a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1034c:	22a0      	movs	r2, #160	; 0xa0
   1034e:	05d2      	lsls	r2, r2, #23
   10350:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10352:	68fb      	ldr	r3, [r7, #12]
   10354:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10356:	697a      	ldr	r2, [r7, #20]
   10358:	69fb      	ldr	r3, [r7, #28]
   1035a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1035c:	22d0      	movs	r2, #208	; 0xd0
   1035e:	0612      	lsls	r2, r2, #24
   10360:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10362:	68fb      	ldr	r3, [r7, #12]
   10364:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   10366:	687b      	ldr	r3, [r7, #4]
   10368:	78db      	ldrb	r3, [r3, #3]
   1036a:	2201      	movs	r2, #1
   1036c:	4053      	eors	r3, r2
   1036e:	b2db      	uxtb	r3, r3
   10370:	2b00      	cmp	r3, #0
   10372:	d01a      	beq.n	103aa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   10374:	69fa      	ldr	r2, [r7, #28]
   10376:	2380      	movs	r3, #128	; 0x80
   10378:	02db      	lsls	r3, r3, #11
   1037a:	4013      	ands	r3, r2
   1037c:	d00a      	beq.n	10394 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1037e:	687b      	ldr	r3, [r7, #4]
   10380:	789b      	ldrb	r3, [r3, #2]
   10382:	2b01      	cmp	r3, #1
   10384:	d103      	bne.n	1038e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   10386:	68fb      	ldr	r3, [r7, #12]
   10388:	68ba      	ldr	r2, [r7, #8]
   1038a:	619a      	str	r2, [r3, #24]
   1038c:	e002      	b.n	10394 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1038e:	68fb      	ldr	r3, [r7, #12]
   10390:	68ba      	ldr	r2, [r7, #8]
   10392:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10394:	687b      	ldr	r3, [r7, #4]
   10396:	785b      	ldrb	r3, [r3, #1]
   10398:	2b01      	cmp	r3, #1
   1039a:	d003      	beq.n	103a4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1039c:	687b      	ldr	r3, [r7, #4]
   1039e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   103a0:	2b02      	cmp	r3, #2
   103a2:	d102      	bne.n	103aa <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   103a4:	68fb      	ldr	r3, [r7, #12]
   103a6:	68ba      	ldr	r2, [r7, #8]
   103a8:	609a      	str	r2, [r3, #8]
		}
	}
}
   103aa:	46c0      	nop			; (mov r8, r8)
   103ac:	46bd      	mov	sp, r7
   103ae:	b008      	add	sp, #32
   103b0:	bd80      	pop	{r7, pc}
   103b2:	46c0      	nop			; (mov r8, r8)
   103b4:	fffbffff 	.word	0xfffbffff

000103b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   103b8:	b580      	push	{r7, lr}
   103ba:	b084      	sub	sp, #16
   103bc:	af00      	add	r7, sp, #0
   103be:	0002      	movs	r2, r0
   103c0:	6039      	str	r1, [r7, #0]
   103c2:	1dfb      	adds	r3, r7, #7
   103c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   103c6:	1dfb      	adds	r3, r7, #7
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	0018      	movs	r0, r3
   103cc:	4b0b      	ldr	r3, [pc, #44]	; (103fc <system_pinmux_pin_set_config+0x44>)
   103ce:	447b      	add	r3, pc
   103d0:	4798      	blx	r3
   103d2:	0003      	movs	r3, r0
   103d4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   103d6:	1dfb      	adds	r3, r7, #7
   103d8:	781b      	ldrb	r3, [r3, #0]
   103da:	221f      	movs	r2, #31
   103dc:	4013      	ands	r3, r2
   103de:	2201      	movs	r2, #1
   103e0:	409a      	lsls	r2, r3
   103e2:	0013      	movs	r3, r2
   103e4:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   103e6:	683a      	ldr	r2, [r7, #0]
   103e8:	68b9      	ldr	r1, [r7, #8]
   103ea:	68fb      	ldr	r3, [r7, #12]
   103ec:	0018      	movs	r0, r3
   103ee:	4b04      	ldr	r3, [pc, #16]	; (10400 <system_pinmux_pin_set_config+0x48>)
   103f0:	447b      	add	r3, pc
   103f2:	4798      	blx	r3
}
   103f4:	46c0      	nop			; (mov r8, r8)
   103f6:	46bd      	mov	sp, r7
   103f8:	b004      	add	sp, #16
   103fa:	bd80      	pop	{r7, pc}
   103fc:	fffffe77 	.word	0xfffffe77
   10400:	fffffeb5 	.word	0xfffffeb5

00010404 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   10404:	b580      	push	{r7, lr}
   10406:	af00      	add	r7, sp, #0
	return;
   10408:	46c0      	nop			; (mov r8, r8)
}
   1040a:	46bd      	mov	sp, r7
   1040c:	bd80      	pop	{r7, pc}
	...

00010410 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   10410:	b5b0      	push	{r4, r5, r7, lr}
   10412:	af00      	add	r7, sp, #0
   10414:	4c09      	ldr	r4, [pc, #36]	; (1043c <system_init+0x2c>)
   10416:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   10418:	4b09      	ldr	r3, [pc, #36]	; (10440 <system_init+0x30>)
   1041a:	58e3      	ldr	r3, [r4, r3]
   1041c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1041e:	4b09      	ldr	r3, [pc, #36]	; (10444 <system_init+0x34>)
   10420:	58e3      	ldr	r3, [r4, r3]
   10422:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   10424:	4b08      	ldr	r3, [pc, #32]	; (10448 <system_init+0x38>)
   10426:	58e3      	ldr	r3, [r4, r3]
   10428:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1042a:	4b08      	ldr	r3, [pc, #32]	; (1044c <system_init+0x3c>)
   1042c:	58e3      	ldr	r3, [r4, r3]
   1042e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   10430:	4b07      	ldr	r3, [pc, #28]	; (10450 <system_init+0x40>)
   10432:	58e3      	ldr	r3, [r4, r3]
   10434:	4798      	blx	r3
}
   10436:	46c0      	nop			; (mov r8, r8)
   10438:	46bd      	mov	sp, r7
   1043a:	bdb0      	pop	{r4, r5, r7, pc}
   1043c:	00001a4a 	.word	0x00001a4a
   10440:	00000254 	.word	0x00000254
   10444:	000001c8 	.word	0x000001c8
   10448:	0000024c 	.word	0x0000024c
   1044c:	00000170 	.word	0x00000170
   10450:	000000d4 	.word	0x000000d4

00010454 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   10454:	b590      	push	{r4, r7, lr}
   10456:	b083      	sub	sp, #12
   10458:	af00      	add	r7, sp, #0
   1045a:	4c34      	ldr	r4, [pc, #208]	; (1052c <Reset_Handler+0xd8>)
   1045c:	447c      	add	r4, pc
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1045e:	4b34      	ldr	r3, [pc, #208]	; (10530 <Reset_Handler+0xdc>)
   10460:	58e3      	ldr	r3, [r4, r3]
   10462:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   10464:	4b33      	ldr	r3, [pc, #204]	; (10534 <Reset_Handler+0xe0>)
   10466:	58e3      	ldr	r3, [r4, r3]
   10468:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1046a:	687a      	ldr	r2, [r7, #4]
   1046c:	683b      	ldr	r3, [r7, #0]
   1046e:	429a      	cmp	r2, r3
   10470:	d00d      	beq.n	1048e <Reset_Handler+0x3a>
                for (; pDest < &_erelocate;) {
   10472:	e007      	b.n	10484 <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
   10474:	683b      	ldr	r3, [r7, #0]
   10476:	1d1a      	adds	r2, r3, #4
   10478:	603a      	str	r2, [r7, #0]
   1047a:	687a      	ldr	r2, [r7, #4]
   1047c:	1d11      	adds	r1, r2, #4
   1047e:	6079      	str	r1, [r7, #4]
   10480:	6812      	ldr	r2, [r2, #0]
   10482:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   10484:	683b      	ldr	r3, [r7, #0]
   10486:	4a2c      	ldr	r2, [pc, #176]	; (10538 <Reset_Handler+0xe4>)
   10488:	58a2      	ldr	r2, [r4, r2]
   1048a:	4293      	cmp	r3, r2
   1048c:	d3f2      	bcc.n	10474 <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1048e:	4b2b      	ldr	r3, [pc, #172]	; (1053c <Reset_Handler+0xe8>)
   10490:	58e3      	ldr	r3, [r4, r3]
   10492:	603b      	str	r3, [r7, #0]
   10494:	e004      	b.n	104a0 <Reset_Handler+0x4c>
                *pDest++ = 0;
   10496:	683b      	ldr	r3, [r7, #0]
   10498:	1d1a      	adds	r2, r3, #4
   1049a:	603a      	str	r2, [r7, #0]
   1049c:	2200      	movs	r2, #0
   1049e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   104a0:	683b      	ldr	r3, [r7, #0]
   104a2:	4a27      	ldr	r2, [pc, #156]	; (10540 <Reset_Handler+0xec>)
   104a4:	58a2      	ldr	r2, [r4, r2]
   104a6:	4293      	cmp	r3, r2
   104a8:	d3f5      	bcc.n	10496 <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   104aa:	4b26      	ldr	r3, [pc, #152]	; (10544 <Reset_Handler+0xf0>)
   104ac:	58e3      	ldr	r3, [r4, r3]
   104ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   104b0:	4b25      	ldr	r3, [pc, #148]	; (10548 <Reset_Handler+0xf4>)
   104b2:	687a      	ldr	r2, [r7, #4]
   104b4:	21ff      	movs	r1, #255	; 0xff
   104b6:	438a      	bics	r2, r1
   104b8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   104ba:	4a24      	ldr	r2, [pc, #144]	; (1054c <Reset_Handler+0xf8>)
   104bc:	2390      	movs	r3, #144	; 0x90
   104be:	005b      	lsls	r3, r3, #1
   104c0:	2102      	movs	r1, #2
   104c2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   104c4:	4a22      	ldr	r2, [pc, #136]	; (10550 <Reset_Handler+0xfc>)
   104c6:	78d3      	ldrb	r3, [r2, #3]
   104c8:	2103      	movs	r1, #3
   104ca:	438b      	bics	r3, r1
   104cc:	1c19      	adds	r1, r3, #0
   104ce:	2302      	movs	r3, #2
   104d0:	430b      	orrs	r3, r1
   104d2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   104d4:	4a1e      	ldr	r2, [pc, #120]	; (10550 <Reset_Handler+0xfc>)
   104d6:	78d3      	ldrb	r3, [r2, #3]
   104d8:	210c      	movs	r1, #12
   104da:	438b      	bics	r3, r1
   104dc:	1c19      	adds	r1, r3, #0
   104de:	2308      	movs	r3, #8
   104e0:	430b      	orrs	r3, r1
   104e2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   104e4:	4a1b      	ldr	r2, [pc, #108]	; (10554 <Reset_Handler+0x100>)
   104e6:	7b93      	ldrb	r3, [r2, #14]
   104e8:	2130      	movs	r1, #48	; 0x30
   104ea:	438b      	bics	r3, r1
   104ec:	1c19      	adds	r1, r3, #0
   104ee:	2320      	movs	r3, #32
   104f0:	430b      	orrs	r3, r1
   104f2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   104f4:	4a17      	ldr	r2, [pc, #92]	; (10554 <Reset_Handler+0x100>)
   104f6:	7b93      	ldrb	r3, [r2, #14]
   104f8:	210c      	movs	r1, #12
   104fa:	438b      	bics	r3, r1
   104fc:	1c19      	adds	r1, r3, #0
   104fe:	2308      	movs	r3, #8
   10500:	430b      	orrs	r3, r1
   10502:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   10504:	4a13      	ldr	r2, [pc, #76]	; (10554 <Reset_Handler+0x100>)
   10506:	7b93      	ldrb	r3, [r2, #14]
   10508:	2103      	movs	r1, #3
   1050a:	438b      	bics	r3, r1
   1050c:	1c19      	adds	r1, r3, #0
   1050e:	2302      	movs	r3, #2
   10510:	430b      	orrs	r3, r1
   10512:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   10514:	4a10      	ldr	r2, [pc, #64]	; (10558 <Reset_Handler+0x104>)
   10516:	6853      	ldr	r3, [r2, #4]
   10518:	2180      	movs	r1, #128	; 0x80
   1051a:	430b      	orrs	r3, r1
   1051c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1051e:	4b0f      	ldr	r3, [pc, #60]	; (1055c <Reset_Handler+0x108>)
   10520:	58e3      	ldr	r3, [r4, r3]
   10522:	4798      	blx	r3

        /* Branch to main function */
        main();
   10524:	4b0e      	ldr	r3, [pc, #56]	; (10560 <Reset_Handler+0x10c>)
   10526:	58e3      	ldr	r3, [r4, r3]
   10528:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1052a:	e7fe      	b.n	1052a <Reset_Handler+0xd6>
   1052c:	00001a04 	.word	0x00001a04
   10530:	0000006c 	.word	0x0000006c
   10534:	00000090 	.word	0x00000090
   10538:	0000027c 	.word	0x0000027c
   1053c:	00000080 	.word	0x00000080
   10540:	00000214 	.word	0x00000214
   10544:	00000050 	.word	0x00000050
   10548:	e000ed00 	.word	0xe000ed00
   1054c:	41007000 	.word	0x41007000
   10550:	41005000 	.word	0x41005000
   10554:	41004800 	.word	0x41004800
   10558:	41004000 	.word	0x41004000
   1055c:	000000fc 	.word	0x000000fc
   10560:	00000200 	.word	0x00000200

00010564 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   10564:	b580      	push	{r7, lr}
   10566:	af00      	add	r7, sp, #0
        while (1) {
   10568:	e7fe      	b.n	10568 <Dummy_Handler+0x4>
	...

0001056c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1056c:	b590      	push	{r4, r7, lr}
   1056e:	b087      	sub	sp, #28
   10570:	af00      	add	r7, sp, #0
   10572:	60f8      	str	r0, [r7, #12]
   10574:	60b9      	str	r1, [r7, #8]
   10576:	607a      	str	r2, [r7, #4]
   10578:	4c11      	ldr	r4, [pc, #68]	; (105c0 <_read+0x54>)
   1057a:	447c      	add	r4, pc
	int nChars = 0;
   1057c:	2300      	movs	r3, #0
   1057e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   10580:	68fb      	ldr	r3, [r7, #12]
   10582:	2b00      	cmp	r3, #0
   10584:	d014      	beq.n	105b0 <_read+0x44>
		return -1;
   10586:	2301      	movs	r3, #1
   10588:	425b      	negs	r3, r3
   1058a:	e015      	b.n	105b8 <_read+0x4c>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   1058c:	4b0d      	ldr	r3, [pc, #52]	; (105c4 <_read+0x58>)
   1058e:	58e3      	ldr	r3, [r4, r3]
   10590:	681a      	ldr	r2, [r3, #0]
   10592:	4b0d      	ldr	r3, [pc, #52]	; (105c8 <_read+0x5c>)
   10594:	58e3      	ldr	r3, [r4, r3]
   10596:	681b      	ldr	r3, [r3, #0]
   10598:	68b9      	ldr	r1, [r7, #8]
   1059a:	0018      	movs	r0, r3
   1059c:	4790      	blx	r2
		ptr++;
   1059e:	68bb      	ldr	r3, [r7, #8]
   105a0:	3301      	adds	r3, #1
   105a2:	60bb      	str	r3, [r7, #8]
		nChars++;
   105a4:	697b      	ldr	r3, [r7, #20]
   105a6:	3301      	adds	r3, #1
   105a8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   105aa:	687b      	ldr	r3, [r7, #4]
   105ac:	3b01      	subs	r3, #1
   105ae:	607b      	str	r3, [r7, #4]
   105b0:	687b      	ldr	r3, [r7, #4]
   105b2:	2b00      	cmp	r3, #0
   105b4:	dcea      	bgt.n	1058c <_read+0x20>
	}
	return nChars;
   105b6:	697b      	ldr	r3, [r7, #20]
}
   105b8:	0018      	movs	r0, r3
   105ba:	46bd      	mov	sp, r7
   105bc:	b007      	add	sp, #28
   105be:	bd90      	pop	{r4, r7, pc}
   105c0:	000018e6 	.word	0x000018e6
   105c4:	000000f0 	.word	0x000000f0
   105c8:	00000204 	.word	0x00000204

000105cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   105cc:	b590      	push	{r4, r7, lr}
   105ce:	b087      	sub	sp, #28
   105d0:	af00      	add	r7, sp, #0
   105d2:	60f8      	str	r0, [r7, #12]
   105d4:	60b9      	str	r1, [r7, #8]
   105d6:	607a      	str	r2, [r7, #4]
   105d8:	4c17      	ldr	r4, [pc, #92]	; (10638 <_write+0x6c>)
   105da:	447c      	add	r4, pc
	int nChars = 0;
   105dc:	2300      	movs	r3, #0
   105de:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   105e0:	68fb      	ldr	r3, [r7, #12]
   105e2:	2b01      	cmp	r3, #1
   105e4:	d01f      	beq.n	10626 <_write+0x5a>
   105e6:	68fb      	ldr	r3, [r7, #12]
   105e8:	2b02      	cmp	r3, #2
   105ea:	d01c      	beq.n	10626 <_write+0x5a>
   105ec:	68fb      	ldr	r3, [r7, #12]
   105ee:	2b03      	cmp	r3, #3
   105f0:	d019      	beq.n	10626 <_write+0x5a>
		return -1;
   105f2:	2301      	movs	r3, #1
   105f4:	425b      	negs	r3, r3
   105f6:	e01a      	b.n	1062e <_write+0x62>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   105f8:	4b10      	ldr	r3, [pc, #64]	; (1063c <_write+0x70>)
   105fa:	58e3      	ldr	r3, [r4, r3]
   105fc:	681a      	ldr	r2, [r3, #0]
   105fe:	4b10      	ldr	r3, [pc, #64]	; (10640 <_write+0x74>)
   10600:	58e3      	ldr	r3, [r4, r3]
   10602:	6818      	ldr	r0, [r3, #0]
   10604:	68bb      	ldr	r3, [r7, #8]
   10606:	1c59      	adds	r1, r3, #1
   10608:	60b9      	str	r1, [r7, #8]
   1060a:	781b      	ldrb	r3, [r3, #0]
   1060c:	0019      	movs	r1, r3
   1060e:	4790      	blx	r2
   10610:	1e03      	subs	r3, r0, #0
   10612:	da02      	bge.n	1061a <_write+0x4e>
			return -1;
   10614:	2301      	movs	r3, #1
   10616:	425b      	negs	r3, r3
   10618:	e009      	b.n	1062e <_write+0x62>
		}
		++nChars;
   1061a:	697b      	ldr	r3, [r7, #20]
   1061c:	3301      	adds	r3, #1
   1061e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   10620:	687b      	ldr	r3, [r7, #4]
   10622:	3b01      	subs	r3, #1
   10624:	607b      	str	r3, [r7, #4]
   10626:	687b      	ldr	r3, [r7, #4]
   10628:	2b00      	cmp	r3, #0
   1062a:	d1e5      	bne.n	105f8 <_write+0x2c>
	}
	return nChars;
   1062c:	697b      	ldr	r3, [r7, #20]
}
   1062e:	0018      	movs	r0, r3
   10630:	46bd      	mov	sp, r7
   10632:	b007      	add	sp, #28
   10634:	bd90      	pop	{r4, r7, pc}
   10636:	46c0      	nop			; (mov r8, r8)
   10638:	00001886 	.word	0x00001886
   1063c:	0000011c 	.word	0x0000011c
   10640:	00000204 	.word	0x00000204

00010644 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   10644:	b580      	push	{r7, lr}
   10646:	b084      	sub	sp, #16
   10648:	af00      	add	r7, sp, #0
   1064a:	6078      	str	r0, [r7, #4]
   1064c:	490e      	ldr	r1, [pc, #56]	; (10688 <_sbrk+0x44>)
   1064e:	4479      	add	r1, pc
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   10650:	4b0e      	ldr	r3, [pc, #56]	; (1068c <_sbrk+0x48>)
   10652:	447b      	add	r3, pc
   10654:	681b      	ldr	r3, [r3, #0]
   10656:	2b00      	cmp	r3, #0
   10658:	d104      	bne.n	10664 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
   1065a:	4b0d      	ldr	r3, [pc, #52]	; (10690 <_sbrk+0x4c>)
   1065c:	447b      	add	r3, pc
   1065e:	4a0d      	ldr	r2, [pc, #52]	; (10694 <_sbrk+0x50>)
   10660:	588a      	ldr	r2, [r1, r2]
   10662:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   10664:	4b0c      	ldr	r3, [pc, #48]	; (10698 <_sbrk+0x54>)
   10666:	447b      	add	r3, pc
   10668:	681b      	ldr	r3, [r3, #0]
   1066a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1066c:	4b0b      	ldr	r3, [pc, #44]	; (1069c <_sbrk+0x58>)
   1066e:	447b      	add	r3, pc
   10670:	681a      	ldr	r2, [r3, #0]
   10672:	687b      	ldr	r3, [r7, #4]
   10674:	18d2      	adds	r2, r2, r3
   10676:	4b0a      	ldr	r3, [pc, #40]	; (106a0 <_sbrk+0x5c>)
   10678:	447b      	add	r3, pc
   1067a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   1067c:	68fb      	ldr	r3, [r7, #12]
}
   1067e:	0018      	movs	r0, r3
   10680:	46bd      	mov	sp, r7
   10682:	b004      	add	sp, #16
   10684:	bd80      	pop	{r7, pc}
   10686:	46c0      	nop			; (mov r8, r8)
   10688:	00001812 	.word	0x00001812
   1068c:	1fff000a 	.word	0x1fff000a
   10690:	1fff0000 	.word	0x1fff0000
   10694:	00000288 	.word	0x00000288
   10698:	1ffefff6 	.word	0x1ffefff6
   1069c:	1ffeffee 	.word	0x1ffeffee
   106a0:	1ffeffe4 	.word	0x1ffeffe4

000106a4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   106a4:	b580      	push	{r7, lr}
   106a6:	b082      	sub	sp, #8
   106a8:	af00      	add	r7, sp, #0
   106aa:	6078      	str	r0, [r7, #4]
	return -1;
   106ac:	2301      	movs	r3, #1
   106ae:	425b      	negs	r3, r3
}
   106b0:	0018      	movs	r0, r3
   106b2:	46bd      	mov	sp, r7
   106b4:	b002      	add	sp, #8
   106b6:	bd80      	pop	{r7, pc}

000106b8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   106b8:	b580      	push	{r7, lr}
   106ba:	b082      	sub	sp, #8
   106bc:	af00      	add	r7, sp, #0
   106be:	6078      	str	r0, [r7, #4]
   106c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   106c2:	683b      	ldr	r3, [r7, #0]
   106c4:	2280      	movs	r2, #128	; 0x80
   106c6:	0192      	lsls	r2, r2, #6
   106c8:	605a      	str	r2, [r3, #4]

	return 0;
   106ca:	2300      	movs	r3, #0
}
   106cc:	0018      	movs	r0, r3
   106ce:	46bd      	mov	sp, r7
   106d0:	b002      	add	sp, #8
   106d2:	bd80      	pop	{r7, pc}

000106d4 <_isatty>:

extern int _isatty(int file)
{
   106d4:	b580      	push	{r7, lr}
   106d6:	b082      	sub	sp, #8
   106d8:	af00      	add	r7, sp, #0
   106da:	6078      	str	r0, [r7, #4]
	return 1;
   106dc:	2301      	movs	r3, #1
}
   106de:	0018      	movs	r0, r3
   106e0:	46bd      	mov	sp, r7
   106e2:	b002      	add	sp, #8
   106e4:	bd80      	pop	{r7, pc}

000106e6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   106e6:	b580      	push	{r7, lr}
   106e8:	b084      	sub	sp, #16
   106ea:	af00      	add	r7, sp, #0
   106ec:	60f8      	str	r0, [r7, #12]
   106ee:	60b9      	str	r1, [r7, #8]
   106f0:	607a      	str	r2, [r7, #4]
	return 0;
   106f2:	2300      	movs	r3, #0
}
   106f4:	0018      	movs	r0, r3
   106f6:	46bd      	mov	sp, r7
   106f8:	b004      	add	sp, #16
   106fa:	bd80      	pop	{r7, pc}

000106fc <__gnu_thumb1_case_si>:
   106fc:	b403      	push	{r0, r1}
   106fe:	4671      	mov	r1, lr
   10700:	3102      	adds	r1, #2
   10702:	0889      	lsrs	r1, r1, #2
   10704:	0080      	lsls	r0, r0, #2
   10706:	0089      	lsls	r1, r1, #2
   10708:	5808      	ldr	r0, [r1, r0]
   1070a:	1840      	adds	r0, r0, r1
   1070c:	4686      	mov	lr, r0
   1070e:	bc03      	pop	{r0, r1}
   10710:	46f7      	mov	pc, lr
   10712:	46c0      	nop			; (mov r8, r8)

00010714 <__udivsi3>:
   10714:	2200      	movs	r2, #0
   10716:	0843      	lsrs	r3, r0, #1
   10718:	428b      	cmp	r3, r1
   1071a:	d374      	bcc.n	10806 <__udivsi3+0xf2>
   1071c:	0903      	lsrs	r3, r0, #4
   1071e:	428b      	cmp	r3, r1
   10720:	d35f      	bcc.n	107e2 <__udivsi3+0xce>
   10722:	0a03      	lsrs	r3, r0, #8
   10724:	428b      	cmp	r3, r1
   10726:	d344      	bcc.n	107b2 <__udivsi3+0x9e>
   10728:	0b03      	lsrs	r3, r0, #12
   1072a:	428b      	cmp	r3, r1
   1072c:	d328      	bcc.n	10780 <__udivsi3+0x6c>
   1072e:	0c03      	lsrs	r3, r0, #16
   10730:	428b      	cmp	r3, r1
   10732:	d30d      	bcc.n	10750 <__udivsi3+0x3c>
   10734:	22ff      	movs	r2, #255	; 0xff
   10736:	0209      	lsls	r1, r1, #8
   10738:	ba12      	rev	r2, r2
   1073a:	0c03      	lsrs	r3, r0, #16
   1073c:	428b      	cmp	r3, r1
   1073e:	d302      	bcc.n	10746 <__udivsi3+0x32>
   10740:	1212      	asrs	r2, r2, #8
   10742:	0209      	lsls	r1, r1, #8
   10744:	d065      	beq.n	10812 <__udivsi3+0xfe>
   10746:	0b03      	lsrs	r3, r0, #12
   10748:	428b      	cmp	r3, r1
   1074a:	d319      	bcc.n	10780 <__udivsi3+0x6c>
   1074c:	e000      	b.n	10750 <__udivsi3+0x3c>
   1074e:	0a09      	lsrs	r1, r1, #8
   10750:	0bc3      	lsrs	r3, r0, #15
   10752:	428b      	cmp	r3, r1
   10754:	d301      	bcc.n	1075a <__udivsi3+0x46>
   10756:	03cb      	lsls	r3, r1, #15
   10758:	1ac0      	subs	r0, r0, r3
   1075a:	4152      	adcs	r2, r2
   1075c:	0b83      	lsrs	r3, r0, #14
   1075e:	428b      	cmp	r3, r1
   10760:	d301      	bcc.n	10766 <__udivsi3+0x52>
   10762:	038b      	lsls	r3, r1, #14
   10764:	1ac0      	subs	r0, r0, r3
   10766:	4152      	adcs	r2, r2
   10768:	0b43      	lsrs	r3, r0, #13
   1076a:	428b      	cmp	r3, r1
   1076c:	d301      	bcc.n	10772 <__udivsi3+0x5e>
   1076e:	034b      	lsls	r3, r1, #13
   10770:	1ac0      	subs	r0, r0, r3
   10772:	4152      	adcs	r2, r2
   10774:	0b03      	lsrs	r3, r0, #12
   10776:	428b      	cmp	r3, r1
   10778:	d301      	bcc.n	1077e <__udivsi3+0x6a>
   1077a:	030b      	lsls	r3, r1, #12
   1077c:	1ac0      	subs	r0, r0, r3
   1077e:	4152      	adcs	r2, r2
   10780:	0ac3      	lsrs	r3, r0, #11
   10782:	428b      	cmp	r3, r1
   10784:	d301      	bcc.n	1078a <__udivsi3+0x76>
   10786:	02cb      	lsls	r3, r1, #11
   10788:	1ac0      	subs	r0, r0, r3
   1078a:	4152      	adcs	r2, r2
   1078c:	0a83      	lsrs	r3, r0, #10
   1078e:	428b      	cmp	r3, r1
   10790:	d301      	bcc.n	10796 <__udivsi3+0x82>
   10792:	028b      	lsls	r3, r1, #10
   10794:	1ac0      	subs	r0, r0, r3
   10796:	4152      	adcs	r2, r2
   10798:	0a43      	lsrs	r3, r0, #9
   1079a:	428b      	cmp	r3, r1
   1079c:	d301      	bcc.n	107a2 <__udivsi3+0x8e>
   1079e:	024b      	lsls	r3, r1, #9
   107a0:	1ac0      	subs	r0, r0, r3
   107a2:	4152      	adcs	r2, r2
   107a4:	0a03      	lsrs	r3, r0, #8
   107a6:	428b      	cmp	r3, r1
   107a8:	d301      	bcc.n	107ae <__udivsi3+0x9a>
   107aa:	020b      	lsls	r3, r1, #8
   107ac:	1ac0      	subs	r0, r0, r3
   107ae:	4152      	adcs	r2, r2
   107b0:	d2cd      	bcs.n	1074e <__udivsi3+0x3a>
   107b2:	09c3      	lsrs	r3, r0, #7
   107b4:	428b      	cmp	r3, r1
   107b6:	d301      	bcc.n	107bc <__udivsi3+0xa8>
   107b8:	01cb      	lsls	r3, r1, #7
   107ba:	1ac0      	subs	r0, r0, r3
   107bc:	4152      	adcs	r2, r2
   107be:	0983      	lsrs	r3, r0, #6
   107c0:	428b      	cmp	r3, r1
   107c2:	d301      	bcc.n	107c8 <__udivsi3+0xb4>
   107c4:	018b      	lsls	r3, r1, #6
   107c6:	1ac0      	subs	r0, r0, r3
   107c8:	4152      	adcs	r2, r2
   107ca:	0943      	lsrs	r3, r0, #5
   107cc:	428b      	cmp	r3, r1
   107ce:	d301      	bcc.n	107d4 <__udivsi3+0xc0>
   107d0:	014b      	lsls	r3, r1, #5
   107d2:	1ac0      	subs	r0, r0, r3
   107d4:	4152      	adcs	r2, r2
   107d6:	0903      	lsrs	r3, r0, #4
   107d8:	428b      	cmp	r3, r1
   107da:	d301      	bcc.n	107e0 <__udivsi3+0xcc>
   107dc:	010b      	lsls	r3, r1, #4
   107de:	1ac0      	subs	r0, r0, r3
   107e0:	4152      	adcs	r2, r2
   107e2:	08c3      	lsrs	r3, r0, #3
   107e4:	428b      	cmp	r3, r1
   107e6:	d301      	bcc.n	107ec <__udivsi3+0xd8>
   107e8:	00cb      	lsls	r3, r1, #3
   107ea:	1ac0      	subs	r0, r0, r3
   107ec:	4152      	adcs	r2, r2
   107ee:	0883      	lsrs	r3, r0, #2
   107f0:	428b      	cmp	r3, r1
   107f2:	d301      	bcc.n	107f8 <__udivsi3+0xe4>
   107f4:	008b      	lsls	r3, r1, #2
   107f6:	1ac0      	subs	r0, r0, r3
   107f8:	4152      	adcs	r2, r2
   107fa:	0843      	lsrs	r3, r0, #1
   107fc:	428b      	cmp	r3, r1
   107fe:	d301      	bcc.n	10804 <__udivsi3+0xf0>
   10800:	004b      	lsls	r3, r1, #1
   10802:	1ac0      	subs	r0, r0, r3
   10804:	4152      	adcs	r2, r2
   10806:	1a41      	subs	r1, r0, r1
   10808:	d200      	bcs.n	1080c <__udivsi3+0xf8>
   1080a:	4601      	mov	r1, r0
   1080c:	4152      	adcs	r2, r2
   1080e:	4610      	mov	r0, r2
   10810:	4770      	bx	lr
   10812:	e7ff      	b.n	10814 <__udivsi3+0x100>
   10814:	b501      	push	{r0, lr}
   10816:	2000      	movs	r0, #0
   10818:	f000 f8f0 	bl	109fc <__aeabi_idiv0>
   1081c:	bd02      	pop	{r1, pc}
   1081e:	46c0      	nop			; (mov r8, r8)

00010820 <__aeabi_uidivmod>:
   10820:	2900      	cmp	r1, #0
   10822:	d0f7      	beq.n	10814 <__udivsi3+0x100>
   10824:	e776      	b.n	10714 <__udivsi3>
   10826:	4770      	bx	lr

00010828 <__divsi3>:
   10828:	4603      	mov	r3, r0
   1082a:	430b      	orrs	r3, r1
   1082c:	d47f      	bmi.n	1092e <__divsi3+0x106>
   1082e:	2200      	movs	r2, #0
   10830:	0843      	lsrs	r3, r0, #1
   10832:	428b      	cmp	r3, r1
   10834:	d374      	bcc.n	10920 <__divsi3+0xf8>
   10836:	0903      	lsrs	r3, r0, #4
   10838:	428b      	cmp	r3, r1
   1083a:	d35f      	bcc.n	108fc <__divsi3+0xd4>
   1083c:	0a03      	lsrs	r3, r0, #8
   1083e:	428b      	cmp	r3, r1
   10840:	d344      	bcc.n	108cc <__divsi3+0xa4>
   10842:	0b03      	lsrs	r3, r0, #12
   10844:	428b      	cmp	r3, r1
   10846:	d328      	bcc.n	1089a <__divsi3+0x72>
   10848:	0c03      	lsrs	r3, r0, #16
   1084a:	428b      	cmp	r3, r1
   1084c:	d30d      	bcc.n	1086a <__divsi3+0x42>
   1084e:	22ff      	movs	r2, #255	; 0xff
   10850:	0209      	lsls	r1, r1, #8
   10852:	ba12      	rev	r2, r2
   10854:	0c03      	lsrs	r3, r0, #16
   10856:	428b      	cmp	r3, r1
   10858:	d302      	bcc.n	10860 <__divsi3+0x38>
   1085a:	1212      	asrs	r2, r2, #8
   1085c:	0209      	lsls	r1, r1, #8
   1085e:	d065      	beq.n	1092c <__divsi3+0x104>
   10860:	0b03      	lsrs	r3, r0, #12
   10862:	428b      	cmp	r3, r1
   10864:	d319      	bcc.n	1089a <__divsi3+0x72>
   10866:	e000      	b.n	1086a <__divsi3+0x42>
   10868:	0a09      	lsrs	r1, r1, #8
   1086a:	0bc3      	lsrs	r3, r0, #15
   1086c:	428b      	cmp	r3, r1
   1086e:	d301      	bcc.n	10874 <__divsi3+0x4c>
   10870:	03cb      	lsls	r3, r1, #15
   10872:	1ac0      	subs	r0, r0, r3
   10874:	4152      	adcs	r2, r2
   10876:	0b83      	lsrs	r3, r0, #14
   10878:	428b      	cmp	r3, r1
   1087a:	d301      	bcc.n	10880 <__divsi3+0x58>
   1087c:	038b      	lsls	r3, r1, #14
   1087e:	1ac0      	subs	r0, r0, r3
   10880:	4152      	adcs	r2, r2
   10882:	0b43      	lsrs	r3, r0, #13
   10884:	428b      	cmp	r3, r1
   10886:	d301      	bcc.n	1088c <__divsi3+0x64>
   10888:	034b      	lsls	r3, r1, #13
   1088a:	1ac0      	subs	r0, r0, r3
   1088c:	4152      	adcs	r2, r2
   1088e:	0b03      	lsrs	r3, r0, #12
   10890:	428b      	cmp	r3, r1
   10892:	d301      	bcc.n	10898 <__divsi3+0x70>
   10894:	030b      	lsls	r3, r1, #12
   10896:	1ac0      	subs	r0, r0, r3
   10898:	4152      	adcs	r2, r2
   1089a:	0ac3      	lsrs	r3, r0, #11
   1089c:	428b      	cmp	r3, r1
   1089e:	d301      	bcc.n	108a4 <__divsi3+0x7c>
   108a0:	02cb      	lsls	r3, r1, #11
   108a2:	1ac0      	subs	r0, r0, r3
   108a4:	4152      	adcs	r2, r2
   108a6:	0a83      	lsrs	r3, r0, #10
   108a8:	428b      	cmp	r3, r1
   108aa:	d301      	bcc.n	108b0 <__divsi3+0x88>
   108ac:	028b      	lsls	r3, r1, #10
   108ae:	1ac0      	subs	r0, r0, r3
   108b0:	4152      	adcs	r2, r2
   108b2:	0a43      	lsrs	r3, r0, #9
   108b4:	428b      	cmp	r3, r1
   108b6:	d301      	bcc.n	108bc <__divsi3+0x94>
   108b8:	024b      	lsls	r3, r1, #9
   108ba:	1ac0      	subs	r0, r0, r3
   108bc:	4152      	adcs	r2, r2
   108be:	0a03      	lsrs	r3, r0, #8
   108c0:	428b      	cmp	r3, r1
   108c2:	d301      	bcc.n	108c8 <__divsi3+0xa0>
   108c4:	020b      	lsls	r3, r1, #8
   108c6:	1ac0      	subs	r0, r0, r3
   108c8:	4152      	adcs	r2, r2
   108ca:	d2cd      	bcs.n	10868 <__divsi3+0x40>
   108cc:	09c3      	lsrs	r3, r0, #7
   108ce:	428b      	cmp	r3, r1
   108d0:	d301      	bcc.n	108d6 <__divsi3+0xae>
   108d2:	01cb      	lsls	r3, r1, #7
   108d4:	1ac0      	subs	r0, r0, r3
   108d6:	4152      	adcs	r2, r2
   108d8:	0983      	lsrs	r3, r0, #6
   108da:	428b      	cmp	r3, r1
   108dc:	d301      	bcc.n	108e2 <__divsi3+0xba>
   108de:	018b      	lsls	r3, r1, #6
   108e0:	1ac0      	subs	r0, r0, r3
   108e2:	4152      	adcs	r2, r2
   108e4:	0943      	lsrs	r3, r0, #5
   108e6:	428b      	cmp	r3, r1
   108e8:	d301      	bcc.n	108ee <__divsi3+0xc6>
   108ea:	014b      	lsls	r3, r1, #5
   108ec:	1ac0      	subs	r0, r0, r3
   108ee:	4152      	adcs	r2, r2
   108f0:	0903      	lsrs	r3, r0, #4
   108f2:	428b      	cmp	r3, r1
   108f4:	d301      	bcc.n	108fa <__divsi3+0xd2>
   108f6:	010b      	lsls	r3, r1, #4
   108f8:	1ac0      	subs	r0, r0, r3
   108fa:	4152      	adcs	r2, r2
   108fc:	08c3      	lsrs	r3, r0, #3
   108fe:	428b      	cmp	r3, r1
   10900:	d301      	bcc.n	10906 <__divsi3+0xde>
   10902:	00cb      	lsls	r3, r1, #3
   10904:	1ac0      	subs	r0, r0, r3
   10906:	4152      	adcs	r2, r2
   10908:	0883      	lsrs	r3, r0, #2
   1090a:	428b      	cmp	r3, r1
   1090c:	d301      	bcc.n	10912 <__divsi3+0xea>
   1090e:	008b      	lsls	r3, r1, #2
   10910:	1ac0      	subs	r0, r0, r3
   10912:	4152      	adcs	r2, r2
   10914:	0843      	lsrs	r3, r0, #1
   10916:	428b      	cmp	r3, r1
   10918:	d301      	bcc.n	1091e <__divsi3+0xf6>
   1091a:	004b      	lsls	r3, r1, #1
   1091c:	1ac0      	subs	r0, r0, r3
   1091e:	4152      	adcs	r2, r2
   10920:	1a41      	subs	r1, r0, r1
   10922:	d200      	bcs.n	10926 <__divsi3+0xfe>
   10924:	4601      	mov	r1, r0
   10926:	4152      	adcs	r2, r2
   10928:	4610      	mov	r0, r2
   1092a:	4770      	bx	lr
   1092c:	e05d      	b.n	109ea <__divsi3+0x1c2>
   1092e:	0fca      	lsrs	r2, r1, #31
   10930:	d000      	beq.n	10934 <__divsi3+0x10c>
   10932:	4249      	negs	r1, r1
   10934:	1003      	asrs	r3, r0, #32
   10936:	d300      	bcc.n	1093a <__divsi3+0x112>
   10938:	4240      	negs	r0, r0
   1093a:	4053      	eors	r3, r2
   1093c:	2200      	movs	r2, #0
   1093e:	469c      	mov	ip, r3
   10940:	0903      	lsrs	r3, r0, #4
   10942:	428b      	cmp	r3, r1
   10944:	d32d      	bcc.n	109a2 <__divsi3+0x17a>
   10946:	0a03      	lsrs	r3, r0, #8
   10948:	428b      	cmp	r3, r1
   1094a:	d312      	bcc.n	10972 <__divsi3+0x14a>
   1094c:	22fc      	movs	r2, #252	; 0xfc
   1094e:	0189      	lsls	r1, r1, #6
   10950:	ba12      	rev	r2, r2
   10952:	0a03      	lsrs	r3, r0, #8
   10954:	428b      	cmp	r3, r1
   10956:	d30c      	bcc.n	10972 <__divsi3+0x14a>
   10958:	0189      	lsls	r1, r1, #6
   1095a:	1192      	asrs	r2, r2, #6
   1095c:	428b      	cmp	r3, r1
   1095e:	d308      	bcc.n	10972 <__divsi3+0x14a>
   10960:	0189      	lsls	r1, r1, #6
   10962:	1192      	asrs	r2, r2, #6
   10964:	428b      	cmp	r3, r1
   10966:	d304      	bcc.n	10972 <__divsi3+0x14a>
   10968:	0189      	lsls	r1, r1, #6
   1096a:	d03a      	beq.n	109e2 <__divsi3+0x1ba>
   1096c:	1192      	asrs	r2, r2, #6
   1096e:	e000      	b.n	10972 <__divsi3+0x14a>
   10970:	0989      	lsrs	r1, r1, #6
   10972:	09c3      	lsrs	r3, r0, #7
   10974:	428b      	cmp	r3, r1
   10976:	d301      	bcc.n	1097c <__divsi3+0x154>
   10978:	01cb      	lsls	r3, r1, #7
   1097a:	1ac0      	subs	r0, r0, r3
   1097c:	4152      	adcs	r2, r2
   1097e:	0983      	lsrs	r3, r0, #6
   10980:	428b      	cmp	r3, r1
   10982:	d301      	bcc.n	10988 <__divsi3+0x160>
   10984:	018b      	lsls	r3, r1, #6
   10986:	1ac0      	subs	r0, r0, r3
   10988:	4152      	adcs	r2, r2
   1098a:	0943      	lsrs	r3, r0, #5
   1098c:	428b      	cmp	r3, r1
   1098e:	d301      	bcc.n	10994 <__divsi3+0x16c>
   10990:	014b      	lsls	r3, r1, #5
   10992:	1ac0      	subs	r0, r0, r3
   10994:	4152      	adcs	r2, r2
   10996:	0903      	lsrs	r3, r0, #4
   10998:	428b      	cmp	r3, r1
   1099a:	d301      	bcc.n	109a0 <__divsi3+0x178>
   1099c:	010b      	lsls	r3, r1, #4
   1099e:	1ac0      	subs	r0, r0, r3
   109a0:	4152      	adcs	r2, r2
   109a2:	08c3      	lsrs	r3, r0, #3
   109a4:	428b      	cmp	r3, r1
   109a6:	d301      	bcc.n	109ac <__divsi3+0x184>
   109a8:	00cb      	lsls	r3, r1, #3
   109aa:	1ac0      	subs	r0, r0, r3
   109ac:	4152      	adcs	r2, r2
   109ae:	0883      	lsrs	r3, r0, #2
   109b0:	428b      	cmp	r3, r1
   109b2:	d301      	bcc.n	109b8 <__divsi3+0x190>
   109b4:	008b      	lsls	r3, r1, #2
   109b6:	1ac0      	subs	r0, r0, r3
   109b8:	4152      	adcs	r2, r2
   109ba:	d2d9      	bcs.n	10970 <__divsi3+0x148>
   109bc:	0843      	lsrs	r3, r0, #1
   109be:	428b      	cmp	r3, r1
   109c0:	d301      	bcc.n	109c6 <__divsi3+0x19e>
   109c2:	004b      	lsls	r3, r1, #1
   109c4:	1ac0      	subs	r0, r0, r3
   109c6:	4152      	adcs	r2, r2
   109c8:	1a41      	subs	r1, r0, r1
   109ca:	d200      	bcs.n	109ce <__divsi3+0x1a6>
   109cc:	4601      	mov	r1, r0
   109ce:	4663      	mov	r3, ip
   109d0:	4152      	adcs	r2, r2
   109d2:	105b      	asrs	r3, r3, #1
   109d4:	4610      	mov	r0, r2
   109d6:	d301      	bcc.n	109dc <__divsi3+0x1b4>
   109d8:	4240      	negs	r0, r0
   109da:	2b00      	cmp	r3, #0
   109dc:	d500      	bpl.n	109e0 <__divsi3+0x1b8>
   109de:	4249      	negs	r1, r1
   109e0:	4770      	bx	lr
   109e2:	4663      	mov	r3, ip
   109e4:	105b      	asrs	r3, r3, #1
   109e6:	d300      	bcc.n	109ea <__divsi3+0x1c2>
   109e8:	4240      	negs	r0, r0
   109ea:	b501      	push	{r0, lr}
   109ec:	2000      	movs	r0, #0
   109ee:	f000 f805 	bl	109fc <__aeabi_idiv0>
   109f2:	bd02      	pop	{r1, pc}

000109f4 <__aeabi_idivmod>:
   109f4:	2900      	cmp	r1, #0
   109f6:	d0f8      	beq.n	109ea <__divsi3+0x1c2>
   109f8:	e716      	b.n	10828 <__divsi3>
   109fa:	4770      	bx	lr

000109fc <__aeabi_idiv0>:
   109fc:	4770      	bx	lr
   109fe:	46c0      	nop			; (mov r8, r8)

00010a00 <__ctzsi2>:
   10a00:	4241      	negs	r1, r0
   10a02:	4008      	ands	r0, r1
   10a04:	211c      	movs	r1, #28
   10a06:	2301      	movs	r3, #1
   10a08:	041b      	lsls	r3, r3, #16
   10a0a:	4298      	cmp	r0, r3
   10a0c:	d301      	bcc.n	10a12 <__ctzsi2+0x12>
   10a0e:	0c00      	lsrs	r0, r0, #16
   10a10:	3910      	subs	r1, #16
   10a12:	0a1b      	lsrs	r3, r3, #8
   10a14:	4298      	cmp	r0, r3
   10a16:	d301      	bcc.n	10a1c <__ctzsi2+0x1c>
   10a18:	0a00      	lsrs	r0, r0, #8
   10a1a:	3908      	subs	r1, #8
   10a1c:	091b      	lsrs	r3, r3, #4
   10a1e:	4298      	cmp	r0, r3
   10a20:	d301      	bcc.n	10a26 <__ctzsi2+0x26>
   10a22:	0900      	lsrs	r0, r0, #4
   10a24:	3904      	subs	r1, #4
   10a26:	a202      	add	r2, pc, #8	; (adr r2, 10a30 <__ctzsi2+0x30>)
   10a28:	5c10      	ldrb	r0, [r2, r0]
   10a2a:	1a40      	subs	r0, r0, r1
   10a2c:	4770      	bx	lr
   10a2e:	46c0      	nop			; (mov r8, r8)
   10a30:	1d1d1c1b 	.word	0x1d1d1c1b
   10a34:	1e1e1e1e 	.word	0x1e1e1e1e
   10a38:	1f1f1f1f 	.word	0x1f1f1f1f
   10a3c:	1f1f1f1f 	.word	0x1f1f1f1f

00010a40 <__libc_init_array>:
   10a40:	b570      	push	{r4, r5, r6, lr}
   10a42:	2600      	movs	r6, #0
   10a44:	4d0c      	ldr	r5, [pc, #48]	; (10a78 <__libc_init_array+0x38>)
   10a46:	4c0d      	ldr	r4, [pc, #52]	; (10a7c <__libc_init_array+0x3c>)
   10a48:	1b64      	subs	r4, r4, r5
   10a4a:	10a4      	asrs	r4, r4, #2
   10a4c:	42a6      	cmp	r6, r4
   10a4e:	d109      	bne.n	10a64 <__libc_init_array+0x24>
   10a50:	2600      	movs	r6, #0
   10a52:	f001 f9f7 	bl	11e44 <_init>
   10a56:	4d0a      	ldr	r5, [pc, #40]	; (10a80 <__libc_init_array+0x40>)
   10a58:	4c0a      	ldr	r4, [pc, #40]	; (10a84 <__libc_init_array+0x44>)
   10a5a:	1b64      	subs	r4, r4, r5
   10a5c:	10a4      	asrs	r4, r4, #2
   10a5e:	42a6      	cmp	r6, r4
   10a60:	d105      	bne.n	10a6e <__libc_init_array+0x2e>
   10a62:	bd70      	pop	{r4, r5, r6, pc}
   10a64:	00b3      	lsls	r3, r6, #2
   10a66:	58eb      	ldr	r3, [r5, r3]
   10a68:	4798      	blx	r3
   10a6a:	3601      	adds	r6, #1
   10a6c:	e7ee      	b.n	10a4c <__libc_init_array+0xc>
   10a6e:	00b3      	lsls	r3, r6, #2
   10a70:	58eb      	ldr	r3, [r5, r3]
   10a72:	4798      	blx	r3
   10a74:	3601      	adds	r6, #1
   10a76:	e7f2      	b.n	10a5e <__libc_init_array+0x1e>
   10a78:	00011e50 	.word	0x00011e50
   10a7c:	00011e50 	.word	0x00011e50
   10a80:	00011e50 	.word	0x00011e50
   10a84:	00011e54 	.word	0x00011e54

00010a88 <memcpy>:
   10a88:	2300      	movs	r3, #0
   10a8a:	b510      	push	{r4, lr}
   10a8c:	429a      	cmp	r2, r3
   10a8e:	d100      	bne.n	10a92 <memcpy+0xa>
   10a90:	bd10      	pop	{r4, pc}
   10a92:	5ccc      	ldrb	r4, [r1, r3]
   10a94:	54c4      	strb	r4, [r0, r3]
   10a96:	3301      	adds	r3, #1
   10a98:	e7f8      	b.n	10a8c <memcpy+0x4>

00010a9a <memset>:
   10a9a:	0003      	movs	r3, r0
   10a9c:	1882      	adds	r2, r0, r2
   10a9e:	4293      	cmp	r3, r2
   10aa0:	d100      	bne.n	10aa4 <memset+0xa>
   10aa2:	4770      	bx	lr
   10aa4:	7019      	strb	r1, [r3, #0]
   10aa6:	3301      	adds	r3, #1
   10aa8:	e7f9      	b.n	10a9e <memset+0x4>

00010aaa <setbuf>:
   10aaa:	424a      	negs	r2, r1
   10aac:	414a      	adcs	r2, r1
   10aae:	2380      	movs	r3, #128	; 0x80
   10ab0:	b510      	push	{r4, lr}
   10ab2:	0052      	lsls	r2, r2, #1
   10ab4:	00db      	lsls	r3, r3, #3
   10ab6:	f000 f801 	bl	10abc <setvbuf>
   10aba:	bd10      	pop	{r4, pc}

00010abc <setvbuf>:
   10abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10abe:	001d      	movs	r5, r3
   10ac0:	4b4f      	ldr	r3, [pc, #316]	; (10c00 <setvbuf+0x144>)
   10ac2:	b085      	sub	sp, #20
   10ac4:	681e      	ldr	r6, [r3, #0]
   10ac6:	0004      	movs	r4, r0
   10ac8:	000f      	movs	r7, r1
   10aca:	9200      	str	r2, [sp, #0]
   10acc:	2e00      	cmp	r6, #0
   10ace:	d005      	beq.n	10adc <setvbuf+0x20>
   10ad0:	69b3      	ldr	r3, [r6, #24]
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d102      	bne.n	10adc <setvbuf+0x20>
   10ad6:	0030      	movs	r0, r6
   10ad8:	f000 f9aa 	bl	10e30 <__sinit>
   10adc:	4b49      	ldr	r3, [pc, #292]	; (10c04 <setvbuf+0x148>)
   10ade:	429c      	cmp	r4, r3
   10ae0:	d150      	bne.n	10b84 <setvbuf+0xc8>
   10ae2:	6874      	ldr	r4, [r6, #4]
   10ae4:	9b00      	ldr	r3, [sp, #0]
   10ae6:	2b02      	cmp	r3, #2
   10ae8:	d005      	beq.n	10af6 <setvbuf+0x3a>
   10aea:	2b01      	cmp	r3, #1
   10aec:	d900      	bls.n	10af0 <setvbuf+0x34>
   10aee:	e084      	b.n	10bfa <setvbuf+0x13e>
   10af0:	2d00      	cmp	r5, #0
   10af2:	da00      	bge.n	10af6 <setvbuf+0x3a>
   10af4:	e081      	b.n	10bfa <setvbuf+0x13e>
   10af6:	0021      	movs	r1, r4
   10af8:	0030      	movs	r0, r6
   10afa:	f000 f92b 	bl	10d54 <_fflush_r>
   10afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10b00:	2900      	cmp	r1, #0
   10b02:	d008      	beq.n	10b16 <setvbuf+0x5a>
   10b04:	0023      	movs	r3, r4
   10b06:	3344      	adds	r3, #68	; 0x44
   10b08:	4299      	cmp	r1, r3
   10b0a:	d002      	beq.n	10b12 <setvbuf+0x56>
   10b0c:	0030      	movs	r0, r6
   10b0e:	f000 fa95 	bl	1103c <_free_r>
   10b12:	2300      	movs	r3, #0
   10b14:	6363      	str	r3, [r4, #52]	; 0x34
   10b16:	2300      	movs	r3, #0
   10b18:	61a3      	str	r3, [r4, #24]
   10b1a:	6063      	str	r3, [r4, #4]
   10b1c:	89a3      	ldrh	r3, [r4, #12]
   10b1e:	061b      	lsls	r3, r3, #24
   10b20:	d503      	bpl.n	10b2a <setvbuf+0x6e>
   10b22:	6921      	ldr	r1, [r4, #16]
   10b24:	0030      	movs	r0, r6
   10b26:	f000 fa89 	bl	1103c <_free_r>
   10b2a:	89a3      	ldrh	r3, [r4, #12]
   10b2c:	4a36      	ldr	r2, [pc, #216]	; (10c08 <setvbuf+0x14c>)
   10b2e:	4013      	ands	r3, r2
   10b30:	81a3      	strh	r3, [r4, #12]
   10b32:	9b00      	ldr	r3, [sp, #0]
   10b34:	2b02      	cmp	r3, #2
   10b36:	d05a      	beq.n	10bee <setvbuf+0x132>
   10b38:	ab03      	add	r3, sp, #12
   10b3a:	aa02      	add	r2, sp, #8
   10b3c:	0021      	movs	r1, r4
   10b3e:	0030      	movs	r0, r6
   10b40:	f000 fa0c 	bl	10f5c <__swhatbuf_r>
   10b44:	89a3      	ldrh	r3, [r4, #12]
   10b46:	4318      	orrs	r0, r3
   10b48:	81a0      	strh	r0, [r4, #12]
   10b4a:	2d00      	cmp	r5, #0
   10b4c:	d124      	bne.n	10b98 <setvbuf+0xdc>
   10b4e:	9d02      	ldr	r5, [sp, #8]
   10b50:	0028      	movs	r0, r5
   10b52:	f000 fa69 	bl	11028 <malloc>
   10b56:	9501      	str	r5, [sp, #4]
   10b58:	1e07      	subs	r7, r0, #0
   10b5a:	d142      	bne.n	10be2 <setvbuf+0x126>
   10b5c:	9b02      	ldr	r3, [sp, #8]
   10b5e:	9301      	str	r3, [sp, #4]
   10b60:	42ab      	cmp	r3, r5
   10b62:	d139      	bne.n	10bd8 <setvbuf+0x11c>
   10b64:	2001      	movs	r0, #1
   10b66:	4240      	negs	r0, r0
   10b68:	2302      	movs	r3, #2
   10b6a:	89a2      	ldrh	r2, [r4, #12]
   10b6c:	4313      	orrs	r3, r2
   10b6e:	81a3      	strh	r3, [r4, #12]
   10b70:	2300      	movs	r3, #0
   10b72:	60a3      	str	r3, [r4, #8]
   10b74:	0023      	movs	r3, r4
   10b76:	3347      	adds	r3, #71	; 0x47
   10b78:	6023      	str	r3, [r4, #0]
   10b7a:	6123      	str	r3, [r4, #16]
   10b7c:	2301      	movs	r3, #1
   10b7e:	6163      	str	r3, [r4, #20]
   10b80:	b005      	add	sp, #20
   10b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b84:	4b21      	ldr	r3, [pc, #132]	; (10c0c <setvbuf+0x150>)
   10b86:	429c      	cmp	r4, r3
   10b88:	d101      	bne.n	10b8e <setvbuf+0xd2>
   10b8a:	68b4      	ldr	r4, [r6, #8]
   10b8c:	e7aa      	b.n	10ae4 <setvbuf+0x28>
   10b8e:	4b20      	ldr	r3, [pc, #128]	; (10c10 <setvbuf+0x154>)
   10b90:	429c      	cmp	r4, r3
   10b92:	d1a7      	bne.n	10ae4 <setvbuf+0x28>
   10b94:	68f4      	ldr	r4, [r6, #12]
   10b96:	e7a5      	b.n	10ae4 <setvbuf+0x28>
   10b98:	2f00      	cmp	r7, #0
   10b9a:	d0d9      	beq.n	10b50 <setvbuf+0x94>
   10b9c:	69b3      	ldr	r3, [r6, #24]
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d102      	bne.n	10ba8 <setvbuf+0xec>
   10ba2:	0030      	movs	r0, r6
   10ba4:	f000 f944 	bl	10e30 <__sinit>
   10ba8:	9b00      	ldr	r3, [sp, #0]
   10baa:	2b01      	cmp	r3, #1
   10bac:	d103      	bne.n	10bb6 <setvbuf+0xfa>
   10bae:	89a3      	ldrh	r3, [r4, #12]
   10bb0:	9a00      	ldr	r2, [sp, #0]
   10bb2:	431a      	orrs	r2, r3
   10bb4:	81a2      	strh	r2, [r4, #12]
   10bb6:	2008      	movs	r0, #8
   10bb8:	89a3      	ldrh	r3, [r4, #12]
   10bba:	6027      	str	r7, [r4, #0]
   10bbc:	6127      	str	r7, [r4, #16]
   10bbe:	6165      	str	r5, [r4, #20]
   10bc0:	4018      	ands	r0, r3
   10bc2:	d018      	beq.n	10bf6 <setvbuf+0x13a>
   10bc4:	2001      	movs	r0, #1
   10bc6:	4018      	ands	r0, r3
   10bc8:	2300      	movs	r3, #0
   10bca:	4298      	cmp	r0, r3
   10bcc:	d011      	beq.n	10bf2 <setvbuf+0x136>
   10bce:	426d      	negs	r5, r5
   10bd0:	60a3      	str	r3, [r4, #8]
   10bd2:	61a5      	str	r5, [r4, #24]
   10bd4:	0018      	movs	r0, r3
   10bd6:	e7d3      	b.n	10b80 <setvbuf+0xc4>
   10bd8:	9801      	ldr	r0, [sp, #4]
   10bda:	f000 fa25 	bl	11028 <malloc>
   10bde:	1e07      	subs	r7, r0, #0
   10be0:	d0c0      	beq.n	10b64 <setvbuf+0xa8>
   10be2:	2380      	movs	r3, #128	; 0x80
   10be4:	89a2      	ldrh	r2, [r4, #12]
   10be6:	9d01      	ldr	r5, [sp, #4]
   10be8:	4313      	orrs	r3, r2
   10bea:	81a3      	strh	r3, [r4, #12]
   10bec:	e7d6      	b.n	10b9c <setvbuf+0xe0>
   10bee:	2000      	movs	r0, #0
   10bf0:	e7ba      	b.n	10b68 <setvbuf+0xac>
   10bf2:	60a5      	str	r5, [r4, #8]
   10bf4:	e7c4      	b.n	10b80 <setvbuf+0xc4>
   10bf6:	60a0      	str	r0, [r4, #8]
   10bf8:	e7c2      	b.n	10b80 <setvbuf+0xc4>
   10bfa:	2001      	movs	r0, #1
   10bfc:	4240      	negs	r0, r0
   10bfe:	e7bf      	b.n	10b80 <setvbuf+0xc4>
   10c00:	20000120 	.word	0x20000120
   10c04:	00011dd0 	.word	0x00011dd0
   10c08:	fffff35c 	.word	0xfffff35c
   10c0c:	00011df0 	.word	0x00011df0
   10c10:	00011db0 	.word	0x00011db0

00010c14 <viprintf>:
   10c14:	4b09      	ldr	r3, [pc, #36]	; (10c3c <viprintf+0x28>)
   10c16:	b570      	push	{r4, r5, r6, lr}
   10c18:	681c      	ldr	r4, [r3, #0]
   10c1a:	0005      	movs	r5, r0
   10c1c:	000e      	movs	r6, r1
   10c1e:	2c00      	cmp	r4, #0
   10c20:	d005      	beq.n	10c2e <viprintf+0x1a>
   10c22:	69a3      	ldr	r3, [r4, #24]
   10c24:	2b00      	cmp	r3, #0
   10c26:	d102      	bne.n	10c2e <viprintf+0x1a>
   10c28:	0020      	movs	r0, r4
   10c2a:	f000 f901 	bl	10e30 <__sinit>
   10c2e:	0033      	movs	r3, r6
   10c30:	002a      	movs	r2, r5
   10c32:	68a1      	ldr	r1, [r4, #8]
   10c34:	0020      	movs	r0, r4
   10c36:	f000 fad1 	bl	111dc <_vfiprintf_r>
   10c3a:	bd70      	pop	{r4, r5, r6, pc}
   10c3c:	20000120 	.word	0x20000120

00010c40 <__sflush_r>:
   10c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10c42:	898a      	ldrh	r2, [r1, #12]
   10c44:	0005      	movs	r5, r0
   10c46:	000c      	movs	r4, r1
   10c48:	0713      	lsls	r3, r2, #28
   10c4a:	d460      	bmi.n	10d0e <__sflush_r+0xce>
   10c4c:	684b      	ldr	r3, [r1, #4]
   10c4e:	2b00      	cmp	r3, #0
   10c50:	dc04      	bgt.n	10c5c <__sflush_r+0x1c>
   10c52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10c54:	2b00      	cmp	r3, #0
   10c56:	dc01      	bgt.n	10c5c <__sflush_r+0x1c>
   10c58:	2000      	movs	r0, #0
   10c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10c5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10c5e:	2f00      	cmp	r7, #0
   10c60:	d0fa      	beq.n	10c58 <__sflush_r+0x18>
   10c62:	2300      	movs	r3, #0
   10c64:	682e      	ldr	r6, [r5, #0]
   10c66:	602b      	str	r3, [r5, #0]
   10c68:	2380      	movs	r3, #128	; 0x80
   10c6a:	015b      	lsls	r3, r3, #5
   10c6c:	401a      	ands	r2, r3
   10c6e:	d034      	beq.n	10cda <__sflush_r+0x9a>
   10c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10c72:	89a3      	ldrh	r3, [r4, #12]
   10c74:	075b      	lsls	r3, r3, #29
   10c76:	d506      	bpl.n	10c86 <__sflush_r+0x46>
   10c78:	6863      	ldr	r3, [r4, #4]
   10c7a:	1ac0      	subs	r0, r0, r3
   10c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d001      	beq.n	10c86 <__sflush_r+0x46>
   10c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10c84:	1ac0      	subs	r0, r0, r3
   10c86:	0002      	movs	r2, r0
   10c88:	6a21      	ldr	r1, [r4, #32]
   10c8a:	2300      	movs	r3, #0
   10c8c:	0028      	movs	r0, r5
   10c8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10c90:	47b8      	blx	r7
   10c92:	89a1      	ldrh	r1, [r4, #12]
   10c94:	1c43      	adds	r3, r0, #1
   10c96:	d106      	bne.n	10ca6 <__sflush_r+0x66>
   10c98:	682b      	ldr	r3, [r5, #0]
   10c9a:	2b1d      	cmp	r3, #29
   10c9c:	d831      	bhi.n	10d02 <__sflush_r+0xc2>
   10c9e:	4a2c      	ldr	r2, [pc, #176]	; (10d50 <__sflush_r+0x110>)
   10ca0:	40da      	lsrs	r2, r3
   10ca2:	07d3      	lsls	r3, r2, #31
   10ca4:	d52d      	bpl.n	10d02 <__sflush_r+0xc2>
   10ca6:	2300      	movs	r3, #0
   10ca8:	6063      	str	r3, [r4, #4]
   10caa:	6923      	ldr	r3, [r4, #16]
   10cac:	6023      	str	r3, [r4, #0]
   10cae:	04cb      	lsls	r3, r1, #19
   10cb0:	d505      	bpl.n	10cbe <__sflush_r+0x7e>
   10cb2:	1c43      	adds	r3, r0, #1
   10cb4:	d102      	bne.n	10cbc <__sflush_r+0x7c>
   10cb6:	682b      	ldr	r3, [r5, #0]
   10cb8:	2b00      	cmp	r3, #0
   10cba:	d100      	bne.n	10cbe <__sflush_r+0x7e>
   10cbc:	6560      	str	r0, [r4, #84]	; 0x54
   10cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10cc0:	602e      	str	r6, [r5, #0]
   10cc2:	2900      	cmp	r1, #0
   10cc4:	d0c8      	beq.n	10c58 <__sflush_r+0x18>
   10cc6:	0023      	movs	r3, r4
   10cc8:	3344      	adds	r3, #68	; 0x44
   10cca:	4299      	cmp	r1, r3
   10ccc:	d002      	beq.n	10cd4 <__sflush_r+0x94>
   10cce:	0028      	movs	r0, r5
   10cd0:	f000 f9b4 	bl	1103c <_free_r>
   10cd4:	2000      	movs	r0, #0
   10cd6:	6360      	str	r0, [r4, #52]	; 0x34
   10cd8:	e7bf      	b.n	10c5a <__sflush_r+0x1a>
   10cda:	2301      	movs	r3, #1
   10cdc:	6a21      	ldr	r1, [r4, #32]
   10cde:	0028      	movs	r0, r5
   10ce0:	47b8      	blx	r7
   10ce2:	1c43      	adds	r3, r0, #1
   10ce4:	d1c5      	bne.n	10c72 <__sflush_r+0x32>
   10ce6:	682b      	ldr	r3, [r5, #0]
   10ce8:	2b00      	cmp	r3, #0
   10cea:	d0c2      	beq.n	10c72 <__sflush_r+0x32>
   10cec:	2b1d      	cmp	r3, #29
   10cee:	d001      	beq.n	10cf4 <__sflush_r+0xb4>
   10cf0:	2b16      	cmp	r3, #22
   10cf2:	d101      	bne.n	10cf8 <__sflush_r+0xb8>
   10cf4:	602e      	str	r6, [r5, #0]
   10cf6:	e7af      	b.n	10c58 <__sflush_r+0x18>
   10cf8:	2340      	movs	r3, #64	; 0x40
   10cfa:	89a2      	ldrh	r2, [r4, #12]
   10cfc:	4313      	orrs	r3, r2
   10cfe:	81a3      	strh	r3, [r4, #12]
   10d00:	e7ab      	b.n	10c5a <__sflush_r+0x1a>
   10d02:	2340      	movs	r3, #64	; 0x40
   10d04:	430b      	orrs	r3, r1
   10d06:	2001      	movs	r0, #1
   10d08:	81a3      	strh	r3, [r4, #12]
   10d0a:	4240      	negs	r0, r0
   10d0c:	e7a5      	b.n	10c5a <__sflush_r+0x1a>
   10d0e:	690f      	ldr	r7, [r1, #16]
   10d10:	2f00      	cmp	r7, #0
   10d12:	d0a1      	beq.n	10c58 <__sflush_r+0x18>
   10d14:	680b      	ldr	r3, [r1, #0]
   10d16:	600f      	str	r7, [r1, #0]
   10d18:	1bdb      	subs	r3, r3, r7
   10d1a:	9301      	str	r3, [sp, #4]
   10d1c:	2300      	movs	r3, #0
   10d1e:	0792      	lsls	r2, r2, #30
   10d20:	d100      	bne.n	10d24 <__sflush_r+0xe4>
   10d22:	694b      	ldr	r3, [r1, #20]
   10d24:	60a3      	str	r3, [r4, #8]
   10d26:	9b01      	ldr	r3, [sp, #4]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	dc00      	bgt.n	10d2e <__sflush_r+0xee>
   10d2c:	e794      	b.n	10c58 <__sflush_r+0x18>
   10d2e:	9b01      	ldr	r3, [sp, #4]
   10d30:	003a      	movs	r2, r7
   10d32:	6a21      	ldr	r1, [r4, #32]
   10d34:	0028      	movs	r0, r5
   10d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10d38:	47b0      	blx	r6
   10d3a:	2800      	cmp	r0, #0
   10d3c:	dc03      	bgt.n	10d46 <__sflush_r+0x106>
   10d3e:	2340      	movs	r3, #64	; 0x40
   10d40:	89a2      	ldrh	r2, [r4, #12]
   10d42:	4313      	orrs	r3, r2
   10d44:	e7df      	b.n	10d06 <__sflush_r+0xc6>
   10d46:	9b01      	ldr	r3, [sp, #4]
   10d48:	183f      	adds	r7, r7, r0
   10d4a:	1a1b      	subs	r3, r3, r0
   10d4c:	9301      	str	r3, [sp, #4]
   10d4e:	e7ea      	b.n	10d26 <__sflush_r+0xe6>
   10d50:	20400001 	.word	0x20400001

00010d54 <_fflush_r>:
   10d54:	690b      	ldr	r3, [r1, #16]
   10d56:	b570      	push	{r4, r5, r6, lr}
   10d58:	0005      	movs	r5, r0
   10d5a:	000c      	movs	r4, r1
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d101      	bne.n	10d64 <_fflush_r+0x10>
   10d60:	2000      	movs	r0, #0
   10d62:	bd70      	pop	{r4, r5, r6, pc}
   10d64:	2800      	cmp	r0, #0
   10d66:	d004      	beq.n	10d72 <_fflush_r+0x1e>
   10d68:	6983      	ldr	r3, [r0, #24]
   10d6a:	2b00      	cmp	r3, #0
   10d6c:	d101      	bne.n	10d72 <_fflush_r+0x1e>
   10d6e:	f000 f85f 	bl	10e30 <__sinit>
   10d72:	4b0b      	ldr	r3, [pc, #44]	; (10da0 <_fflush_r+0x4c>)
   10d74:	429c      	cmp	r4, r3
   10d76:	d109      	bne.n	10d8c <_fflush_r+0x38>
   10d78:	686c      	ldr	r4, [r5, #4]
   10d7a:	220c      	movs	r2, #12
   10d7c:	5ea3      	ldrsh	r3, [r4, r2]
   10d7e:	2b00      	cmp	r3, #0
   10d80:	d0ee      	beq.n	10d60 <_fflush_r+0xc>
   10d82:	0021      	movs	r1, r4
   10d84:	0028      	movs	r0, r5
   10d86:	f7ff ff5b 	bl	10c40 <__sflush_r>
   10d8a:	e7ea      	b.n	10d62 <_fflush_r+0xe>
   10d8c:	4b05      	ldr	r3, [pc, #20]	; (10da4 <_fflush_r+0x50>)
   10d8e:	429c      	cmp	r4, r3
   10d90:	d101      	bne.n	10d96 <_fflush_r+0x42>
   10d92:	68ac      	ldr	r4, [r5, #8]
   10d94:	e7f1      	b.n	10d7a <_fflush_r+0x26>
   10d96:	4b04      	ldr	r3, [pc, #16]	; (10da8 <_fflush_r+0x54>)
   10d98:	429c      	cmp	r4, r3
   10d9a:	d1ee      	bne.n	10d7a <_fflush_r+0x26>
   10d9c:	68ec      	ldr	r4, [r5, #12]
   10d9e:	e7ec      	b.n	10d7a <_fflush_r+0x26>
   10da0:	00011dd0 	.word	0x00011dd0
   10da4:	00011df0 	.word	0x00011df0
   10da8:	00011db0 	.word	0x00011db0

00010dac <_cleanup_r>:
   10dac:	b510      	push	{r4, lr}
   10dae:	4902      	ldr	r1, [pc, #8]	; (10db8 <_cleanup_r+0xc>)
   10db0:	f000 f8b2 	bl	10f18 <_fwalk_reent>
   10db4:	bd10      	pop	{r4, pc}
   10db6:	46c0      	nop			; (mov r8, r8)
   10db8:	00010d55 	.word	0x00010d55

00010dbc <std.isra.0>:
   10dbc:	2300      	movs	r3, #0
   10dbe:	b510      	push	{r4, lr}
   10dc0:	0004      	movs	r4, r0
   10dc2:	6003      	str	r3, [r0, #0]
   10dc4:	6043      	str	r3, [r0, #4]
   10dc6:	6083      	str	r3, [r0, #8]
   10dc8:	8181      	strh	r1, [r0, #12]
   10dca:	6643      	str	r3, [r0, #100]	; 0x64
   10dcc:	81c2      	strh	r2, [r0, #14]
   10dce:	6103      	str	r3, [r0, #16]
   10dd0:	6143      	str	r3, [r0, #20]
   10dd2:	6183      	str	r3, [r0, #24]
   10dd4:	0019      	movs	r1, r3
   10dd6:	2208      	movs	r2, #8
   10dd8:	305c      	adds	r0, #92	; 0x5c
   10dda:	f7ff fe5e 	bl	10a9a <memset>
   10dde:	4b05      	ldr	r3, [pc, #20]	; (10df4 <std.isra.0+0x38>)
   10de0:	6224      	str	r4, [r4, #32]
   10de2:	6263      	str	r3, [r4, #36]	; 0x24
   10de4:	4b04      	ldr	r3, [pc, #16]	; (10df8 <std.isra.0+0x3c>)
   10de6:	62a3      	str	r3, [r4, #40]	; 0x28
   10de8:	4b04      	ldr	r3, [pc, #16]	; (10dfc <std.isra.0+0x40>)
   10dea:	62e3      	str	r3, [r4, #44]	; 0x2c
   10dec:	4b04      	ldr	r3, [pc, #16]	; (10e00 <std.isra.0+0x44>)
   10dee:	6323      	str	r3, [r4, #48]	; 0x30
   10df0:	bd10      	pop	{r4, pc}
   10df2:	46c0      	nop			; (mov r8, r8)
   10df4:	00011749 	.word	0x00011749
   10df8:	00011771 	.word	0x00011771
   10dfc:	000117a9 	.word	0x000117a9
   10e00:	000117d5 	.word	0x000117d5

00010e04 <__sfmoreglue>:
   10e04:	b570      	push	{r4, r5, r6, lr}
   10e06:	2568      	movs	r5, #104	; 0x68
   10e08:	1e4a      	subs	r2, r1, #1
   10e0a:	4355      	muls	r5, r2
   10e0c:	000e      	movs	r6, r1
   10e0e:	0029      	movs	r1, r5
   10e10:	3174      	adds	r1, #116	; 0x74
   10e12:	f000 f95d 	bl	110d0 <_malloc_r>
   10e16:	1e04      	subs	r4, r0, #0
   10e18:	d008      	beq.n	10e2c <__sfmoreglue+0x28>
   10e1a:	2100      	movs	r1, #0
   10e1c:	002a      	movs	r2, r5
   10e1e:	6001      	str	r1, [r0, #0]
   10e20:	6046      	str	r6, [r0, #4]
   10e22:	300c      	adds	r0, #12
   10e24:	60a0      	str	r0, [r4, #8]
   10e26:	3268      	adds	r2, #104	; 0x68
   10e28:	f7ff fe37 	bl	10a9a <memset>
   10e2c:	0020      	movs	r0, r4
   10e2e:	bd70      	pop	{r4, r5, r6, pc}

00010e30 <__sinit>:
   10e30:	6983      	ldr	r3, [r0, #24]
   10e32:	b513      	push	{r0, r1, r4, lr}
   10e34:	0004      	movs	r4, r0
   10e36:	2b00      	cmp	r3, #0
   10e38:	d128      	bne.n	10e8c <__sinit+0x5c>
   10e3a:	6483      	str	r3, [r0, #72]	; 0x48
   10e3c:	64c3      	str	r3, [r0, #76]	; 0x4c
   10e3e:	6503      	str	r3, [r0, #80]	; 0x50
   10e40:	4b13      	ldr	r3, [pc, #76]	; (10e90 <__sinit+0x60>)
   10e42:	4a14      	ldr	r2, [pc, #80]	; (10e94 <__sinit+0x64>)
   10e44:	681b      	ldr	r3, [r3, #0]
   10e46:	6282      	str	r2, [r0, #40]	; 0x28
   10e48:	9301      	str	r3, [sp, #4]
   10e4a:	4298      	cmp	r0, r3
   10e4c:	d101      	bne.n	10e52 <__sinit+0x22>
   10e4e:	2301      	movs	r3, #1
   10e50:	6183      	str	r3, [r0, #24]
   10e52:	0020      	movs	r0, r4
   10e54:	f000 f820 	bl	10e98 <__sfp>
   10e58:	6060      	str	r0, [r4, #4]
   10e5a:	0020      	movs	r0, r4
   10e5c:	f000 f81c 	bl	10e98 <__sfp>
   10e60:	60a0      	str	r0, [r4, #8]
   10e62:	0020      	movs	r0, r4
   10e64:	f000 f818 	bl	10e98 <__sfp>
   10e68:	2200      	movs	r2, #0
   10e6a:	60e0      	str	r0, [r4, #12]
   10e6c:	2104      	movs	r1, #4
   10e6e:	6860      	ldr	r0, [r4, #4]
   10e70:	f7ff ffa4 	bl	10dbc <std.isra.0>
   10e74:	2201      	movs	r2, #1
   10e76:	2109      	movs	r1, #9
   10e78:	68a0      	ldr	r0, [r4, #8]
   10e7a:	f7ff ff9f 	bl	10dbc <std.isra.0>
   10e7e:	2202      	movs	r2, #2
   10e80:	2112      	movs	r1, #18
   10e82:	68e0      	ldr	r0, [r4, #12]
   10e84:	f7ff ff9a 	bl	10dbc <std.isra.0>
   10e88:	2301      	movs	r3, #1
   10e8a:	61a3      	str	r3, [r4, #24]
   10e8c:	bd13      	pop	{r0, r1, r4, pc}
   10e8e:	46c0      	nop			; (mov r8, r8)
   10e90:	00011dac 	.word	0x00011dac
   10e94:	00010dad 	.word	0x00010dad

00010e98 <__sfp>:
   10e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e9a:	4b1e      	ldr	r3, [pc, #120]	; (10f14 <__sfp+0x7c>)
   10e9c:	0007      	movs	r7, r0
   10e9e:	681e      	ldr	r6, [r3, #0]
   10ea0:	69b3      	ldr	r3, [r6, #24]
   10ea2:	2b00      	cmp	r3, #0
   10ea4:	d102      	bne.n	10eac <__sfp+0x14>
   10ea6:	0030      	movs	r0, r6
   10ea8:	f7ff ffc2 	bl	10e30 <__sinit>
   10eac:	3648      	adds	r6, #72	; 0x48
   10eae:	68b4      	ldr	r4, [r6, #8]
   10eb0:	6873      	ldr	r3, [r6, #4]
   10eb2:	3b01      	subs	r3, #1
   10eb4:	d504      	bpl.n	10ec0 <__sfp+0x28>
   10eb6:	6833      	ldr	r3, [r6, #0]
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d007      	beq.n	10ecc <__sfp+0x34>
   10ebc:	6836      	ldr	r6, [r6, #0]
   10ebe:	e7f6      	b.n	10eae <__sfp+0x16>
   10ec0:	220c      	movs	r2, #12
   10ec2:	5ea5      	ldrsh	r5, [r4, r2]
   10ec4:	2d00      	cmp	r5, #0
   10ec6:	d00d      	beq.n	10ee4 <__sfp+0x4c>
   10ec8:	3468      	adds	r4, #104	; 0x68
   10eca:	e7f2      	b.n	10eb2 <__sfp+0x1a>
   10ecc:	2104      	movs	r1, #4
   10ece:	0038      	movs	r0, r7
   10ed0:	f7ff ff98 	bl	10e04 <__sfmoreglue>
   10ed4:	6030      	str	r0, [r6, #0]
   10ed6:	2800      	cmp	r0, #0
   10ed8:	d1f0      	bne.n	10ebc <__sfp+0x24>
   10eda:	230c      	movs	r3, #12
   10edc:	0004      	movs	r4, r0
   10ede:	603b      	str	r3, [r7, #0]
   10ee0:	0020      	movs	r0, r4
   10ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ee4:	2301      	movs	r3, #1
   10ee6:	0020      	movs	r0, r4
   10ee8:	425b      	negs	r3, r3
   10eea:	81e3      	strh	r3, [r4, #14]
   10eec:	3302      	adds	r3, #2
   10eee:	81a3      	strh	r3, [r4, #12]
   10ef0:	6665      	str	r5, [r4, #100]	; 0x64
   10ef2:	6025      	str	r5, [r4, #0]
   10ef4:	60a5      	str	r5, [r4, #8]
   10ef6:	6065      	str	r5, [r4, #4]
   10ef8:	6125      	str	r5, [r4, #16]
   10efa:	6165      	str	r5, [r4, #20]
   10efc:	61a5      	str	r5, [r4, #24]
   10efe:	2208      	movs	r2, #8
   10f00:	0029      	movs	r1, r5
   10f02:	305c      	adds	r0, #92	; 0x5c
   10f04:	f7ff fdc9 	bl	10a9a <memset>
   10f08:	6365      	str	r5, [r4, #52]	; 0x34
   10f0a:	63a5      	str	r5, [r4, #56]	; 0x38
   10f0c:	64a5      	str	r5, [r4, #72]	; 0x48
   10f0e:	64e5      	str	r5, [r4, #76]	; 0x4c
   10f10:	e7e6      	b.n	10ee0 <__sfp+0x48>
   10f12:	46c0      	nop			; (mov r8, r8)
   10f14:	00011dac 	.word	0x00011dac

00010f18 <_fwalk_reent>:
   10f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f1a:	0004      	movs	r4, r0
   10f1c:	0007      	movs	r7, r0
   10f1e:	2600      	movs	r6, #0
   10f20:	9101      	str	r1, [sp, #4]
   10f22:	3448      	adds	r4, #72	; 0x48
   10f24:	2c00      	cmp	r4, #0
   10f26:	d101      	bne.n	10f2c <_fwalk_reent+0x14>
   10f28:	0030      	movs	r0, r6
   10f2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10f2c:	6863      	ldr	r3, [r4, #4]
   10f2e:	68a5      	ldr	r5, [r4, #8]
   10f30:	9300      	str	r3, [sp, #0]
   10f32:	9b00      	ldr	r3, [sp, #0]
   10f34:	3b01      	subs	r3, #1
   10f36:	9300      	str	r3, [sp, #0]
   10f38:	d501      	bpl.n	10f3e <_fwalk_reent+0x26>
   10f3a:	6824      	ldr	r4, [r4, #0]
   10f3c:	e7f2      	b.n	10f24 <_fwalk_reent+0xc>
   10f3e:	89ab      	ldrh	r3, [r5, #12]
   10f40:	2b01      	cmp	r3, #1
   10f42:	d908      	bls.n	10f56 <_fwalk_reent+0x3e>
   10f44:	220e      	movs	r2, #14
   10f46:	5eab      	ldrsh	r3, [r5, r2]
   10f48:	3301      	adds	r3, #1
   10f4a:	d004      	beq.n	10f56 <_fwalk_reent+0x3e>
   10f4c:	0029      	movs	r1, r5
   10f4e:	0038      	movs	r0, r7
   10f50:	9b01      	ldr	r3, [sp, #4]
   10f52:	4798      	blx	r3
   10f54:	4306      	orrs	r6, r0
   10f56:	3568      	adds	r5, #104	; 0x68
   10f58:	e7eb      	b.n	10f32 <_fwalk_reent+0x1a>
	...

00010f5c <__swhatbuf_r>:
   10f5c:	b570      	push	{r4, r5, r6, lr}
   10f5e:	000e      	movs	r6, r1
   10f60:	001d      	movs	r5, r3
   10f62:	230e      	movs	r3, #14
   10f64:	5ec9      	ldrsh	r1, [r1, r3]
   10f66:	b090      	sub	sp, #64	; 0x40
   10f68:	0014      	movs	r4, r2
   10f6a:	2900      	cmp	r1, #0
   10f6c:	da07      	bge.n	10f7e <__swhatbuf_r+0x22>
   10f6e:	2300      	movs	r3, #0
   10f70:	602b      	str	r3, [r5, #0]
   10f72:	89b3      	ldrh	r3, [r6, #12]
   10f74:	061b      	lsls	r3, r3, #24
   10f76:	d411      	bmi.n	10f9c <__swhatbuf_r+0x40>
   10f78:	2380      	movs	r3, #128	; 0x80
   10f7a:	00db      	lsls	r3, r3, #3
   10f7c:	e00f      	b.n	10f9e <__swhatbuf_r+0x42>
   10f7e:	aa01      	add	r2, sp, #4
   10f80:	f000 fd20 	bl	119c4 <_fstat_r>
   10f84:	2800      	cmp	r0, #0
   10f86:	dbf2      	blt.n	10f6e <__swhatbuf_r+0x12>
   10f88:	22f0      	movs	r2, #240	; 0xf0
   10f8a:	9b02      	ldr	r3, [sp, #8]
   10f8c:	0212      	lsls	r2, r2, #8
   10f8e:	4013      	ands	r3, r2
   10f90:	4a05      	ldr	r2, [pc, #20]	; (10fa8 <__swhatbuf_r+0x4c>)
   10f92:	189b      	adds	r3, r3, r2
   10f94:	425a      	negs	r2, r3
   10f96:	4153      	adcs	r3, r2
   10f98:	602b      	str	r3, [r5, #0]
   10f9a:	e7ed      	b.n	10f78 <__swhatbuf_r+0x1c>
   10f9c:	2340      	movs	r3, #64	; 0x40
   10f9e:	2000      	movs	r0, #0
   10fa0:	6023      	str	r3, [r4, #0]
   10fa2:	b010      	add	sp, #64	; 0x40
   10fa4:	bd70      	pop	{r4, r5, r6, pc}
   10fa6:	46c0      	nop			; (mov r8, r8)
   10fa8:	ffffe000 	.word	0xffffe000

00010fac <__smakebuf_r>:
   10fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10fae:	2602      	movs	r6, #2
   10fb0:	898b      	ldrh	r3, [r1, #12]
   10fb2:	0005      	movs	r5, r0
   10fb4:	000c      	movs	r4, r1
   10fb6:	4233      	tst	r3, r6
   10fb8:	d006      	beq.n	10fc8 <__smakebuf_r+0x1c>
   10fba:	0023      	movs	r3, r4
   10fbc:	3347      	adds	r3, #71	; 0x47
   10fbe:	6023      	str	r3, [r4, #0]
   10fc0:	6123      	str	r3, [r4, #16]
   10fc2:	2301      	movs	r3, #1
   10fc4:	6163      	str	r3, [r4, #20]
   10fc6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10fc8:	ab01      	add	r3, sp, #4
   10fca:	466a      	mov	r2, sp
   10fcc:	f7ff ffc6 	bl	10f5c <__swhatbuf_r>
   10fd0:	9900      	ldr	r1, [sp, #0]
   10fd2:	0007      	movs	r7, r0
   10fd4:	0028      	movs	r0, r5
   10fd6:	f000 f87b 	bl	110d0 <_malloc_r>
   10fda:	2800      	cmp	r0, #0
   10fdc:	d106      	bne.n	10fec <__smakebuf_r+0x40>
   10fde:	220c      	movs	r2, #12
   10fe0:	5ea3      	ldrsh	r3, [r4, r2]
   10fe2:	059a      	lsls	r2, r3, #22
   10fe4:	d4ef      	bmi.n	10fc6 <__smakebuf_r+0x1a>
   10fe6:	431e      	orrs	r6, r3
   10fe8:	81a6      	strh	r6, [r4, #12]
   10fea:	e7e6      	b.n	10fba <__smakebuf_r+0xe>
   10fec:	4b0d      	ldr	r3, [pc, #52]	; (11024 <__smakebuf_r+0x78>)
   10fee:	62ab      	str	r3, [r5, #40]	; 0x28
   10ff0:	2380      	movs	r3, #128	; 0x80
   10ff2:	89a2      	ldrh	r2, [r4, #12]
   10ff4:	6020      	str	r0, [r4, #0]
   10ff6:	4313      	orrs	r3, r2
   10ff8:	81a3      	strh	r3, [r4, #12]
   10ffa:	9b00      	ldr	r3, [sp, #0]
   10ffc:	6120      	str	r0, [r4, #16]
   10ffe:	6163      	str	r3, [r4, #20]
   11000:	9b01      	ldr	r3, [sp, #4]
   11002:	2b00      	cmp	r3, #0
   11004:	d00a      	beq.n	1101c <__smakebuf_r+0x70>
   11006:	230e      	movs	r3, #14
   11008:	5ee1      	ldrsh	r1, [r4, r3]
   1100a:	0028      	movs	r0, r5
   1100c:	f000 fcec 	bl	119e8 <_isatty_r>
   11010:	2800      	cmp	r0, #0
   11012:	d003      	beq.n	1101c <__smakebuf_r+0x70>
   11014:	2301      	movs	r3, #1
   11016:	89a2      	ldrh	r2, [r4, #12]
   11018:	4313      	orrs	r3, r2
   1101a:	81a3      	strh	r3, [r4, #12]
   1101c:	89a0      	ldrh	r0, [r4, #12]
   1101e:	4338      	orrs	r0, r7
   11020:	81a0      	strh	r0, [r4, #12]
   11022:	e7d0      	b.n	10fc6 <__smakebuf_r+0x1a>
   11024:	00010dad 	.word	0x00010dad

00011028 <malloc>:
   11028:	b510      	push	{r4, lr}
   1102a:	4b03      	ldr	r3, [pc, #12]	; (11038 <malloc+0x10>)
   1102c:	0001      	movs	r1, r0
   1102e:	6818      	ldr	r0, [r3, #0]
   11030:	f000 f84e 	bl	110d0 <_malloc_r>
   11034:	bd10      	pop	{r4, pc}
   11036:	46c0      	nop			; (mov r8, r8)
   11038:	20000120 	.word	0x20000120

0001103c <_free_r>:
   1103c:	b570      	push	{r4, r5, r6, lr}
   1103e:	0005      	movs	r5, r0
   11040:	2900      	cmp	r1, #0
   11042:	d010      	beq.n	11066 <_free_r+0x2a>
   11044:	1f0c      	subs	r4, r1, #4
   11046:	6823      	ldr	r3, [r4, #0]
   11048:	2b00      	cmp	r3, #0
   1104a:	da00      	bge.n	1104e <_free_r+0x12>
   1104c:	18e4      	adds	r4, r4, r3
   1104e:	0028      	movs	r0, r5
   11050:	f000 fcfb 	bl	11a4a <__malloc_lock>
   11054:	4a1d      	ldr	r2, [pc, #116]	; (110cc <_free_r+0x90>)
   11056:	6813      	ldr	r3, [r2, #0]
   11058:	2b00      	cmp	r3, #0
   1105a:	d105      	bne.n	11068 <_free_r+0x2c>
   1105c:	6063      	str	r3, [r4, #4]
   1105e:	6014      	str	r4, [r2, #0]
   11060:	0028      	movs	r0, r5
   11062:	f000 fcf3 	bl	11a4c <__malloc_unlock>
   11066:	bd70      	pop	{r4, r5, r6, pc}
   11068:	42a3      	cmp	r3, r4
   1106a:	d909      	bls.n	11080 <_free_r+0x44>
   1106c:	6821      	ldr	r1, [r4, #0]
   1106e:	1860      	adds	r0, r4, r1
   11070:	4283      	cmp	r3, r0
   11072:	d1f3      	bne.n	1105c <_free_r+0x20>
   11074:	6818      	ldr	r0, [r3, #0]
   11076:	685b      	ldr	r3, [r3, #4]
   11078:	1841      	adds	r1, r0, r1
   1107a:	6021      	str	r1, [r4, #0]
   1107c:	e7ee      	b.n	1105c <_free_r+0x20>
   1107e:	0013      	movs	r3, r2
   11080:	685a      	ldr	r2, [r3, #4]
   11082:	2a00      	cmp	r2, #0
   11084:	d001      	beq.n	1108a <_free_r+0x4e>
   11086:	42a2      	cmp	r2, r4
   11088:	d9f9      	bls.n	1107e <_free_r+0x42>
   1108a:	6819      	ldr	r1, [r3, #0]
   1108c:	1858      	adds	r0, r3, r1
   1108e:	42a0      	cmp	r0, r4
   11090:	d10b      	bne.n	110aa <_free_r+0x6e>
   11092:	6820      	ldr	r0, [r4, #0]
   11094:	1809      	adds	r1, r1, r0
   11096:	1858      	adds	r0, r3, r1
   11098:	6019      	str	r1, [r3, #0]
   1109a:	4282      	cmp	r2, r0
   1109c:	d1e0      	bne.n	11060 <_free_r+0x24>
   1109e:	6810      	ldr	r0, [r2, #0]
   110a0:	6852      	ldr	r2, [r2, #4]
   110a2:	1841      	adds	r1, r0, r1
   110a4:	6019      	str	r1, [r3, #0]
   110a6:	605a      	str	r2, [r3, #4]
   110a8:	e7da      	b.n	11060 <_free_r+0x24>
   110aa:	42a0      	cmp	r0, r4
   110ac:	d902      	bls.n	110b4 <_free_r+0x78>
   110ae:	230c      	movs	r3, #12
   110b0:	602b      	str	r3, [r5, #0]
   110b2:	e7d5      	b.n	11060 <_free_r+0x24>
   110b4:	6821      	ldr	r1, [r4, #0]
   110b6:	1860      	adds	r0, r4, r1
   110b8:	4282      	cmp	r2, r0
   110ba:	d103      	bne.n	110c4 <_free_r+0x88>
   110bc:	6810      	ldr	r0, [r2, #0]
   110be:	6852      	ldr	r2, [r2, #4]
   110c0:	1841      	adds	r1, r0, r1
   110c2:	6021      	str	r1, [r4, #0]
   110c4:	6062      	str	r2, [r4, #4]
   110c6:	605c      	str	r4, [r3, #4]
   110c8:	e7ca      	b.n	11060 <_free_r+0x24>
   110ca:	46c0      	nop			; (mov r8, r8)
   110cc:	20000664 	.word	0x20000664

000110d0 <_malloc_r>:
   110d0:	2303      	movs	r3, #3
   110d2:	b570      	push	{r4, r5, r6, lr}
   110d4:	1ccd      	adds	r5, r1, #3
   110d6:	439d      	bics	r5, r3
   110d8:	3508      	adds	r5, #8
   110da:	0006      	movs	r6, r0
   110dc:	2d0c      	cmp	r5, #12
   110de:	d21e      	bcs.n	1111e <_malloc_r+0x4e>
   110e0:	250c      	movs	r5, #12
   110e2:	42a9      	cmp	r1, r5
   110e4:	d81d      	bhi.n	11122 <_malloc_r+0x52>
   110e6:	0030      	movs	r0, r6
   110e8:	f000 fcaf 	bl	11a4a <__malloc_lock>
   110ec:	4a25      	ldr	r2, [pc, #148]	; (11184 <_malloc_r+0xb4>)
   110ee:	6814      	ldr	r4, [r2, #0]
   110f0:	0021      	movs	r1, r4
   110f2:	2900      	cmp	r1, #0
   110f4:	d119      	bne.n	1112a <_malloc_r+0x5a>
   110f6:	4c24      	ldr	r4, [pc, #144]	; (11188 <_malloc_r+0xb8>)
   110f8:	6823      	ldr	r3, [r4, #0]
   110fa:	2b00      	cmp	r3, #0
   110fc:	d103      	bne.n	11106 <_malloc_r+0x36>
   110fe:	0030      	movs	r0, r6
   11100:	f000 fb10 	bl	11724 <_sbrk_r>
   11104:	6020      	str	r0, [r4, #0]
   11106:	0029      	movs	r1, r5
   11108:	0030      	movs	r0, r6
   1110a:	f000 fb0b 	bl	11724 <_sbrk_r>
   1110e:	1c43      	adds	r3, r0, #1
   11110:	d12c      	bne.n	1116c <_malloc_r+0x9c>
   11112:	230c      	movs	r3, #12
   11114:	0030      	movs	r0, r6
   11116:	6033      	str	r3, [r6, #0]
   11118:	f000 fc98 	bl	11a4c <__malloc_unlock>
   1111c:	e003      	b.n	11126 <_malloc_r+0x56>
   1111e:	2d00      	cmp	r5, #0
   11120:	dadf      	bge.n	110e2 <_malloc_r+0x12>
   11122:	230c      	movs	r3, #12
   11124:	6033      	str	r3, [r6, #0]
   11126:	2000      	movs	r0, #0
   11128:	bd70      	pop	{r4, r5, r6, pc}
   1112a:	680b      	ldr	r3, [r1, #0]
   1112c:	1b5b      	subs	r3, r3, r5
   1112e:	d41a      	bmi.n	11166 <_malloc_r+0x96>
   11130:	2b0b      	cmp	r3, #11
   11132:	d903      	bls.n	1113c <_malloc_r+0x6c>
   11134:	600b      	str	r3, [r1, #0]
   11136:	18cc      	adds	r4, r1, r3
   11138:	6025      	str	r5, [r4, #0]
   1113a:	e003      	b.n	11144 <_malloc_r+0x74>
   1113c:	428c      	cmp	r4, r1
   1113e:	d10e      	bne.n	1115e <_malloc_r+0x8e>
   11140:	6863      	ldr	r3, [r4, #4]
   11142:	6013      	str	r3, [r2, #0]
   11144:	0030      	movs	r0, r6
   11146:	f000 fc81 	bl	11a4c <__malloc_unlock>
   1114a:	0020      	movs	r0, r4
   1114c:	2207      	movs	r2, #7
   1114e:	300b      	adds	r0, #11
   11150:	1d23      	adds	r3, r4, #4
   11152:	4390      	bics	r0, r2
   11154:	1ac3      	subs	r3, r0, r3
   11156:	d0e7      	beq.n	11128 <_malloc_r+0x58>
   11158:	425a      	negs	r2, r3
   1115a:	50e2      	str	r2, [r4, r3]
   1115c:	e7e4      	b.n	11128 <_malloc_r+0x58>
   1115e:	684b      	ldr	r3, [r1, #4]
   11160:	6063      	str	r3, [r4, #4]
   11162:	000c      	movs	r4, r1
   11164:	e7ee      	b.n	11144 <_malloc_r+0x74>
   11166:	000c      	movs	r4, r1
   11168:	6849      	ldr	r1, [r1, #4]
   1116a:	e7c2      	b.n	110f2 <_malloc_r+0x22>
   1116c:	2303      	movs	r3, #3
   1116e:	1cc4      	adds	r4, r0, #3
   11170:	439c      	bics	r4, r3
   11172:	42a0      	cmp	r0, r4
   11174:	d0e0      	beq.n	11138 <_malloc_r+0x68>
   11176:	1a21      	subs	r1, r4, r0
   11178:	0030      	movs	r0, r6
   1117a:	f000 fad3 	bl	11724 <_sbrk_r>
   1117e:	1c43      	adds	r3, r0, #1
   11180:	d1da      	bne.n	11138 <_malloc_r+0x68>
   11182:	e7c6      	b.n	11112 <_malloc_r+0x42>
   11184:	20000664 	.word	0x20000664
   11188:	20000668 	.word	0x20000668

0001118c <__sfputc_r>:
   1118c:	6893      	ldr	r3, [r2, #8]
   1118e:	b510      	push	{r4, lr}
   11190:	3b01      	subs	r3, #1
   11192:	6093      	str	r3, [r2, #8]
   11194:	2b00      	cmp	r3, #0
   11196:	da05      	bge.n	111a4 <__sfputc_r+0x18>
   11198:	6994      	ldr	r4, [r2, #24]
   1119a:	42a3      	cmp	r3, r4
   1119c:	db08      	blt.n	111b0 <__sfputc_r+0x24>
   1119e:	b2cb      	uxtb	r3, r1
   111a0:	2b0a      	cmp	r3, #10
   111a2:	d005      	beq.n	111b0 <__sfputc_r+0x24>
   111a4:	6813      	ldr	r3, [r2, #0]
   111a6:	1c58      	adds	r0, r3, #1
   111a8:	6010      	str	r0, [r2, #0]
   111aa:	7019      	strb	r1, [r3, #0]
   111ac:	b2c8      	uxtb	r0, r1
   111ae:	bd10      	pop	{r4, pc}
   111b0:	f000 fb16 	bl	117e0 <__swbuf_r>
   111b4:	e7fb      	b.n	111ae <__sfputc_r+0x22>

000111b6 <__sfputs_r>:
   111b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111b8:	0006      	movs	r6, r0
   111ba:	000f      	movs	r7, r1
   111bc:	0014      	movs	r4, r2
   111be:	18d5      	adds	r5, r2, r3
   111c0:	42ac      	cmp	r4, r5
   111c2:	d101      	bne.n	111c8 <__sfputs_r+0x12>
   111c4:	2000      	movs	r0, #0
   111c6:	e007      	b.n	111d8 <__sfputs_r+0x22>
   111c8:	7821      	ldrb	r1, [r4, #0]
   111ca:	003a      	movs	r2, r7
   111cc:	0030      	movs	r0, r6
   111ce:	f7ff ffdd 	bl	1118c <__sfputc_r>
   111d2:	3401      	adds	r4, #1
   111d4:	1c43      	adds	r3, r0, #1
   111d6:	d1f3      	bne.n	111c0 <__sfputs_r+0xa>
   111d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000111dc <_vfiprintf_r>:
   111dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   111de:	b09f      	sub	sp, #124	; 0x7c
   111e0:	0006      	movs	r6, r0
   111e2:	000f      	movs	r7, r1
   111e4:	0014      	movs	r4, r2
   111e6:	9305      	str	r3, [sp, #20]
   111e8:	2800      	cmp	r0, #0
   111ea:	d004      	beq.n	111f6 <_vfiprintf_r+0x1a>
   111ec:	6983      	ldr	r3, [r0, #24]
   111ee:	2b00      	cmp	r3, #0
   111f0:	d101      	bne.n	111f6 <_vfiprintf_r+0x1a>
   111f2:	f7ff fe1d 	bl	10e30 <__sinit>
   111f6:	4b7f      	ldr	r3, [pc, #508]	; (113f4 <_vfiprintf_r+0x218>)
   111f8:	429f      	cmp	r7, r3
   111fa:	d15c      	bne.n	112b6 <_vfiprintf_r+0xda>
   111fc:	6877      	ldr	r7, [r6, #4]
   111fe:	89bb      	ldrh	r3, [r7, #12]
   11200:	071b      	lsls	r3, r3, #28
   11202:	d562      	bpl.n	112ca <_vfiprintf_r+0xee>
   11204:	693b      	ldr	r3, [r7, #16]
   11206:	2b00      	cmp	r3, #0
   11208:	d05f      	beq.n	112ca <_vfiprintf_r+0xee>
   1120a:	2300      	movs	r3, #0
   1120c:	ad06      	add	r5, sp, #24
   1120e:	616b      	str	r3, [r5, #20]
   11210:	3320      	adds	r3, #32
   11212:	766b      	strb	r3, [r5, #25]
   11214:	3310      	adds	r3, #16
   11216:	76ab      	strb	r3, [r5, #26]
   11218:	9402      	str	r4, [sp, #8]
   1121a:	9c02      	ldr	r4, [sp, #8]
   1121c:	7823      	ldrb	r3, [r4, #0]
   1121e:	2b00      	cmp	r3, #0
   11220:	d15d      	bne.n	112de <_vfiprintf_r+0x102>
   11222:	9b02      	ldr	r3, [sp, #8]
   11224:	1ae3      	subs	r3, r4, r3
   11226:	9304      	str	r3, [sp, #16]
   11228:	d00d      	beq.n	11246 <_vfiprintf_r+0x6a>
   1122a:	9b04      	ldr	r3, [sp, #16]
   1122c:	9a02      	ldr	r2, [sp, #8]
   1122e:	0039      	movs	r1, r7
   11230:	0030      	movs	r0, r6
   11232:	f7ff ffc0 	bl	111b6 <__sfputs_r>
   11236:	1c43      	adds	r3, r0, #1
   11238:	d100      	bne.n	1123c <_vfiprintf_r+0x60>
   1123a:	e0cc      	b.n	113d6 <_vfiprintf_r+0x1fa>
   1123c:	696a      	ldr	r2, [r5, #20]
   1123e:	9b04      	ldr	r3, [sp, #16]
   11240:	4694      	mov	ip, r2
   11242:	4463      	add	r3, ip
   11244:	616b      	str	r3, [r5, #20]
   11246:	7823      	ldrb	r3, [r4, #0]
   11248:	2b00      	cmp	r3, #0
   1124a:	d100      	bne.n	1124e <_vfiprintf_r+0x72>
   1124c:	e0c3      	b.n	113d6 <_vfiprintf_r+0x1fa>
   1124e:	2201      	movs	r2, #1
   11250:	2300      	movs	r3, #0
   11252:	4252      	negs	r2, r2
   11254:	606a      	str	r2, [r5, #4]
   11256:	a902      	add	r1, sp, #8
   11258:	3254      	adds	r2, #84	; 0x54
   1125a:	1852      	adds	r2, r2, r1
   1125c:	3401      	adds	r4, #1
   1125e:	602b      	str	r3, [r5, #0]
   11260:	60eb      	str	r3, [r5, #12]
   11262:	60ab      	str	r3, [r5, #8]
   11264:	7013      	strb	r3, [r2, #0]
   11266:	65ab      	str	r3, [r5, #88]	; 0x58
   11268:	7821      	ldrb	r1, [r4, #0]
   1126a:	2205      	movs	r2, #5
   1126c:	4862      	ldr	r0, [pc, #392]	; (113f8 <_vfiprintf_r+0x21c>)
   1126e:	f000 fbe1 	bl	11a34 <memchr>
   11272:	1c63      	adds	r3, r4, #1
   11274:	469c      	mov	ip, r3
   11276:	2800      	cmp	r0, #0
   11278:	d135      	bne.n	112e6 <_vfiprintf_r+0x10a>
   1127a:	6829      	ldr	r1, [r5, #0]
   1127c:	06cb      	lsls	r3, r1, #27
   1127e:	d504      	bpl.n	1128a <_vfiprintf_r+0xae>
   11280:	2353      	movs	r3, #83	; 0x53
   11282:	aa02      	add	r2, sp, #8
   11284:	3020      	adds	r0, #32
   11286:	189b      	adds	r3, r3, r2
   11288:	7018      	strb	r0, [r3, #0]
   1128a:	070b      	lsls	r3, r1, #28
   1128c:	d504      	bpl.n	11298 <_vfiprintf_r+0xbc>
   1128e:	2353      	movs	r3, #83	; 0x53
   11290:	202b      	movs	r0, #43	; 0x2b
   11292:	aa02      	add	r2, sp, #8
   11294:	189b      	adds	r3, r3, r2
   11296:	7018      	strb	r0, [r3, #0]
   11298:	7823      	ldrb	r3, [r4, #0]
   1129a:	2b2a      	cmp	r3, #42	; 0x2a
   1129c:	d02c      	beq.n	112f8 <_vfiprintf_r+0x11c>
   1129e:	2000      	movs	r0, #0
   112a0:	210a      	movs	r1, #10
   112a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112a4:	7822      	ldrb	r2, [r4, #0]
   112a6:	3a30      	subs	r2, #48	; 0x30
   112a8:	2a09      	cmp	r2, #9
   112aa:	d800      	bhi.n	112ae <_vfiprintf_r+0xd2>
   112ac:	e06b      	b.n	11386 <_vfiprintf_r+0x1aa>
   112ae:	2800      	cmp	r0, #0
   112b0:	d02a      	beq.n	11308 <_vfiprintf_r+0x12c>
   112b2:	9309      	str	r3, [sp, #36]	; 0x24
   112b4:	e028      	b.n	11308 <_vfiprintf_r+0x12c>
   112b6:	4b51      	ldr	r3, [pc, #324]	; (113fc <_vfiprintf_r+0x220>)
   112b8:	429f      	cmp	r7, r3
   112ba:	d101      	bne.n	112c0 <_vfiprintf_r+0xe4>
   112bc:	68b7      	ldr	r7, [r6, #8]
   112be:	e79e      	b.n	111fe <_vfiprintf_r+0x22>
   112c0:	4b4f      	ldr	r3, [pc, #316]	; (11400 <_vfiprintf_r+0x224>)
   112c2:	429f      	cmp	r7, r3
   112c4:	d19b      	bne.n	111fe <_vfiprintf_r+0x22>
   112c6:	68f7      	ldr	r7, [r6, #12]
   112c8:	e799      	b.n	111fe <_vfiprintf_r+0x22>
   112ca:	0039      	movs	r1, r7
   112cc:	0030      	movs	r0, r6
   112ce:	f000 faf1 	bl	118b4 <__swsetup_r>
   112d2:	2800      	cmp	r0, #0
   112d4:	d099      	beq.n	1120a <_vfiprintf_r+0x2e>
   112d6:	2001      	movs	r0, #1
   112d8:	4240      	negs	r0, r0
   112da:	b01f      	add	sp, #124	; 0x7c
   112dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112de:	2b25      	cmp	r3, #37	; 0x25
   112e0:	d09f      	beq.n	11222 <_vfiprintf_r+0x46>
   112e2:	3401      	adds	r4, #1
   112e4:	e79a      	b.n	1121c <_vfiprintf_r+0x40>
   112e6:	4b44      	ldr	r3, [pc, #272]	; (113f8 <_vfiprintf_r+0x21c>)
   112e8:	6829      	ldr	r1, [r5, #0]
   112ea:	1ac0      	subs	r0, r0, r3
   112ec:	2301      	movs	r3, #1
   112ee:	4083      	lsls	r3, r0
   112f0:	430b      	orrs	r3, r1
   112f2:	602b      	str	r3, [r5, #0]
   112f4:	4664      	mov	r4, ip
   112f6:	e7b7      	b.n	11268 <_vfiprintf_r+0x8c>
   112f8:	9b05      	ldr	r3, [sp, #20]
   112fa:	1d18      	adds	r0, r3, #4
   112fc:	681b      	ldr	r3, [r3, #0]
   112fe:	9005      	str	r0, [sp, #20]
   11300:	2b00      	cmp	r3, #0
   11302:	db3a      	blt.n	1137a <_vfiprintf_r+0x19e>
   11304:	9309      	str	r3, [sp, #36]	; 0x24
   11306:	4664      	mov	r4, ip
   11308:	7823      	ldrb	r3, [r4, #0]
   1130a:	2b2e      	cmp	r3, #46	; 0x2e
   1130c:	d10b      	bne.n	11326 <_vfiprintf_r+0x14a>
   1130e:	7863      	ldrb	r3, [r4, #1]
   11310:	1c62      	adds	r2, r4, #1
   11312:	2b2a      	cmp	r3, #42	; 0x2a
   11314:	d13f      	bne.n	11396 <_vfiprintf_r+0x1ba>
   11316:	9b05      	ldr	r3, [sp, #20]
   11318:	3402      	adds	r4, #2
   1131a:	1d1a      	adds	r2, r3, #4
   1131c:	681b      	ldr	r3, [r3, #0]
   1131e:	9205      	str	r2, [sp, #20]
   11320:	2b00      	cmp	r3, #0
   11322:	db35      	blt.n	11390 <_vfiprintf_r+0x1b4>
   11324:	9307      	str	r3, [sp, #28]
   11326:	7821      	ldrb	r1, [r4, #0]
   11328:	2203      	movs	r2, #3
   1132a:	4836      	ldr	r0, [pc, #216]	; (11404 <_vfiprintf_r+0x228>)
   1132c:	f000 fb82 	bl	11a34 <memchr>
   11330:	2800      	cmp	r0, #0
   11332:	d007      	beq.n	11344 <_vfiprintf_r+0x168>
   11334:	4b33      	ldr	r3, [pc, #204]	; (11404 <_vfiprintf_r+0x228>)
   11336:	682a      	ldr	r2, [r5, #0]
   11338:	1ac0      	subs	r0, r0, r3
   1133a:	2340      	movs	r3, #64	; 0x40
   1133c:	4083      	lsls	r3, r0
   1133e:	4313      	orrs	r3, r2
   11340:	602b      	str	r3, [r5, #0]
   11342:	3401      	adds	r4, #1
   11344:	7821      	ldrb	r1, [r4, #0]
   11346:	1c63      	adds	r3, r4, #1
   11348:	2206      	movs	r2, #6
   1134a:	482f      	ldr	r0, [pc, #188]	; (11408 <_vfiprintf_r+0x22c>)
   1134c:	9302      	str	r3, [sp, #8]
   1134e:	7629      	strb	r1, [r5, #24]
   11350:	f000 fb70 	bl	11a34 <memchr>
   11354:	2800      	cmp	r0, #0
   11356:	d044      	beq.n	113e2 <_vfiprintf_r+0x206>
   11358:	4b2c      	ldr	r3, [pc, #176]	; (1140c <_vfiprintf_r+0x230>)
   1135a:	2b00      	cmp	r3, #0
   1135c:	d12f      	bne.n	113be <_vfiprintf_r+0x1e2>
   1135e:	6829      	ldr	r1, [r5, #0]
   11360:	9b05      	ldr	r3, [sp, #20]
   11362:	2207      	movs	r2, #7
   11364:	05c9      	lsls	r1, r1, #23
   11366:	d528      	bpl.n	113ba <_vfiprintf_r+0x1de>
   11368:	189b      	adds	r3, r3, r2
   1136a:	4393      	bics	r3, r2
   1136c:	3308      	adds	r3, #8
   1136e:	9305      	str	r3, [sp, #20]
   11370:	696b      	ldr	r3, [r5, #20]
   11372:	9a03      	ldr	r2, [sp, #12]
   11374:	189b      	adds	r3, r3, r2
   11376:	616b      	str	r3, [r5, #20]
   11378:	e74f      	b.n	1121a <_vfiprintf_r+0x3e>
   1137a:	425b      	negs	r3, r3
   1137c:	60eb      	str	r3, [r5, #12]
   1137e:	2302      	movs	r3, #2
   11380:	430b      	orrs	r3, r1
   11382:	602b      	str	r3, [r5, #0]
   11384:	e7bf      	b.n	11306 <_vfiprintf_r+0x12a>
   11386:	434b      	muls	r3, r1
   11388:	3401      	adds	r4, #1
   1138a:	189b      	adds	r3, r3, r2
   1138c:	2001      	movs	r0, #1
   1138e:	e789      	b.n	112a4 <_vfiprintf_r+0xc8>
   11390:	2301      	movs	r3, #1
   11392:	425b      	negs	r3, r3
   11394:	e7c6      	b.n	11324 <_vfiprintf_r+0x148>
   11396:	2300      	movs	r3, #0
   11398:	0014      	movs	r4, r2
   1139a:	200a      	movs	r0, #10
   1139c:	001a      	movs	r2, r3
   1139e:	606b      	str	r3, [r5, #4]
   113a0:	7821      	ldrb	r1, [r4, #0]
   113a2:	3930      	subs	r1, #48	; 0x30
   113a4:	2909      	cmp	r1, #9
   113a6:	d903      	bls.n	113b0 <_vfiprintf_r+0x1d4>
   113a8:	2b00      	cmp	r3, #0
   113aa:	d0bc      	beq.n	11326 <_vfiprintf_r+0x14a>
   113ac:	9207      	str	r2, [sp, #28]
   113ae:	e7ba      	b.n	11326 <_vfiprintf_r+0x14a>
   113b0:	4342      	muls	r2, r0
   113b2:	3401      	adds	r4, #1
   113b4:	1852      	adds	r2, r2, r1
   113b6:	2301      	movs	r3, #1
   113b8:	e7f2      	b.n	113a0 <_vfiprintf_r+0x1c4>
   113ba:	3307      	adds	r3, #7
   113bc:	e7d5      	b.n	1136a <_vfiprintf_r+0x18e>
   113be:	ab05      	add	r3, sp, #20
   113c0:	9300      	str	r3, [sp, #0]
   113c2:	003a      	movs	r2, r7
   113c4:	4b12      	ldr	r3, [pc, #72]	; (11410 <_vfiprintf_r+0x234>)
   113c6:	0029      	movs	r1, r5
   113c8:	0030      	movs	r0, r6
   113ca:	e000      	b.n	113ce <_vfiprintf_r+0x1f2>
   113cc:	bf00      	nop
   113ce:	9003      	str	r0, [sp, #12]
   113d0:	9b03      	ldr	r3, [sp, #12]
   113d2:	3301      	adds	r3, #1
   113d4:	d1cc      	bne.n	11370 <_vfiprintf_r+0x194>
   113d6:	89bb      	ldrh	r3, [r7, #12]
   113d8:	065b      	lsls	r3, r3, #25
   113da:	d500      	bpl.n	113de <_vfiprintf_r+0x202>
   113dc:	e77b      	b.n	112d6 <_vfiprintf_r+0xfa>
   113de:	980b      	ldr	r0, [sp, #44]	; 0x2c
   113e0:	e77b      	b.n	112da <_vfiprintf_r+0xfe>
   113e2:	ab05      	add	r3, sp, #20
   113e4:	9300      	str	r3, [sp, #0]
   113e6:	003a      	movs	r2, r7
   113e8:	4b09      	ldr	r3, [pc, #36]	; (11410 <_vfiprintf_r+0x234>)
   113ea:	0029      	movs	r1, r5
   113ec:	0030      	movs	r0, r6
   113ee:	f000 f87f 	bl	114f0 <_printf_i>
   113f2:	e7ec      	b.n	113ce <_vfiprintf_r+0x1f2>
   113f4:	00011dd0 	.word	0x00011dd0
   113f8:	00011e10 	.word	0x00011e10
   113fc:	00011df0 	.word	0x00011df0
   11400:	00011db0 	.word	0x00011db0
   11404:	00011e16 	.word	0x00011e16
   11408:	00011e1a 	.word	0x00011e1a
   1140c:	00000000 	.word	0x00000000
   11410:	000111b7 	.word	0x000111b7

00011414 <_printf_common>:
   11414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11416:	0015      	movs	r5, r2
   11418:	9301      	str	r3, [sp, #4]
   1141a:	688a      	ldr	r2, [r1, #8]
   1141c:	690b      	ldr	r3, [r1, #16]
   1141e:	9000      	str	r0, [sp, #0]
   11420:	000c      	movs	r4, r1
   11422:	4293      	cmp	r3, r2
   11424:	da00      	bge.n	11428 <_printf_common+0x14>
   11426:	0013      	movs	r3, r2
   11428:	0022      	movs	r2, r4
   1142a:	602b      	str	r3, [r5, #0]
   1142c:	3243      	adds	r2, #67	; 0x43
   1142e:	7812      	ldrb	r2, [r2, #0]
   11430:	2a00      	cmp	r2, #0
   11432:	d001      	beq.n	11438 <_printf_common+0x24>
   11434:	3301      	adds	r3, #1
   11436:	602b      	str	r3, [r5, #0]
   11438:	6823      	ldr	r3, [r4, #0]
   1143a:	069b      	lsls	r3, r3, #26
   1143c:	d502      	bpl.n	11444 <_printf_common+0x30>
   1143e:	682b      	ldr	r3, [r5, #0]
   11440:	3302      	adds	r3, #2
   11442:	602b      	str	r3, [r5, #0]
   11444:	2706      	movs	r7, #6
   11446:	6823      	ldr	r3, [r4, #0]
   11448:	401f      	ands	r7, r3
   1144a:	d027      	beq.n	1149c <_printf_common+0x88>
   1144c:	0023      	movs	r3, r4
   1144e:	3343      	adds	r3, #67	; 0x43
   11450:	781b      	ldrb	r3, [r3, #0]
   11452:	1e5a      	subs	r2, r3, #1
   11454:	4193      	sbcs	r3, r2
   11456:	6822      	ldr	r2, [r4, #0]
   11458:	0692      	lsls	r2, r2, #26
   1145a:	d430      	bmi.n	114be <_printf_common+0xaa>
   1145c:	0022      	movs	r2, r4
   1145e:	9901      	ldr	r1, [sp, #4]
   11460:	3243      	adds	r2, #67	; 0x43
   11462:	9800      	ldr	r0, [sp, #0]
   11464:	9e08      	ldr	r6, [sp, #32]
   11466:	47b0      	blx	r6
   11468:	1c43      	adds	r3, r0, #1
   1146a:	d025      	beq.n	114b8 <_printf_common+0xa4>
   1146c:	2306      	movs	r3, #6
   1146e:	6820      	ldr	r0, [r4, #0]
   11470:	682a      	ldr	r2, [r5, #0]
   11472:	68e1      	ldr	r1, [r4, #12]
   11474:	4003      	ands	r3, r0
   11476:	2500      	movs	r5, #0
   11478:	2b04      	cmp	r3, #4
   1147a:	d103      	bne.n	11484 <_printf_common+0x70>
   1147c:	1a8d      	subs	r5, r1, r2
   1147e:	43eb      	mvns	r3, r5
   11480:	17db      	asrs	r3, r3, #31
   11482:	401d      	ands	r5, r3
   11484:	68a3      	ldr	r3, [r4, #8]
   11486:	6922      	ldr	r2, [r4, #16]
   11488:	4293      	cmp	r3, r2
   1148a:	dd01      	ble.n	11490 <_printf_common+0x7c>
   1148c:	1a9b      	subs	r3, r3, r2
   1148e:	18ed      	adds	r5, r5, r3
   11490:	2700      	movs	r7, #0
   11492:	42bd      	cmp	r5, r7
   11494:	d120      	bne.n	114d8 <_printf_common+0xc4>
   11496:	2000      	movs	r0, #0
   11498:	e010      	b.n	114bc <_printf_common+0xa8>
   1149a:	3701      	adds	r7, #1
   1149c:	68e3      	ldr	r3, [r4, #12]
   1149e:	682a      	ldr	r2, [r5, #0]
   114a0:	1a9b      	subs	r3, r3, r2
   114a2:	429f      	cmp	r7, r3
   114a4:	dad2      	bge.n	1144c <_printf_common+0x38>
   114a6:	0022      	movs	r2, r4
   114a8:	2301      	movs	r3, #1
   114aa:	3219      	adds	r2, #25
   114ac:	9901      	ldr	r1, [sp, #4]
   114ae:	9800      	ldr	r0, [sp, #0]
   114b0:	9e08      	ldr	r6, [sp, #32]
   114b2:	47b0      	blx	r6
   114b4:	1c43      	adds	r3, r0, #1
   114b6:	d1f0      	bne.n	1149a <_printf_common+0x86>
   114b8:	2001      	movs	r0, #1
   114ba:	4240      	negs	r0, r0
   114bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   114be:	2030      	movs	r0, #48	; 0x30
   114c0:	18e1      	adds	r1, r4, r3
   114c2:	3143      	adds	r1, #67	; 0x43
   114c4:	7008      	strb	r0, [r1, #0]
   114c6:	0021      	movs	r1, r4
   114c8:	1c5a      	adds	r2, r3, #1
   114ca:	3145      	adds	r1, #69	; 0x45
   114cc:	7809      	ldrb	r1, [r1, #0]
   114ce:	18a2      	adds	r2, r4, r2
   114d0:	3243      	adds	r2, #67	; 0x43
   114d2:	3302      	adds	r3, #2
   114d4:	7011      	strb	r1, [r2, #0]
   114d6:	e7c1      	b.n	1145c <_printf_common+0x48>
   114d8:	0022      	movs	r2, r4
   114da:	2301      	movs	r3, #1
   114dc:	321a      	adds	r2, #26
   114de:	9901      	ldr	r1, [sp, #4]
   114e0:	9800      	ldr	r0, [sp, #0]
   114e2:	9e08      	ldr	r6, [sp, #32]
   114e4:	47b0      	blx	r6
   114e6:	1c43      	adds	r3, r0, #1
   114e8:	d0e6      	beq.n	114b8 <_printf_common+0xa4>
   114ea:	3701      	adds	r7, #1
   114ec:	e7d1      	b.n	11492 <_printf_common+0x7e>
	...

000114f0 <_printf_i>:
   114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114f2:	b08b      	sub	sp, #44	; 0x2c
   114f4:	9206      	str	r2, [sp, #24]
   114f6:	000a      	movs	r2, r1
   114f8:	3243      	adds	r2, #67	; 0x43
   114fa:	9307      	str	r3, [sp, #28]
   114fc:	9005      	str	r0, [sp, #20]
   114fe:	9204      	str	r2, [sp, #16]
   11500:	7e0a      	ldrb	r2, [r1, #24]
   11502:	000c      	movs	r4, r1
   11504:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11506:	2a6e      	cmp	r2, #110	; 0x6e
   11508:	d100      	bne.n	1150c <_printf_i+0x1c>
   1150a:	e08f      	b.n	1162c <_printf_i+0x13c>
   1150c:	d817      	bhi.n	1153e <_printf_i+0x4e>
   1150e:	2a63      	cmp	r2, #99	; 0x63
   11510:	d02c      	beq.n	1156c <_printf_i+0x7c>
   11512:	d808      	bhi.n	11526 <_printf_i+0x36>
   11514:	2a00      	cmp	r2, #0
   11516:	d100      	bne.n	1151a <_printf_i+0x2a>
   11518:	e099      	b.n	1164e <_printf_i+0x15e>
   1151a:	2a58      	cmp	r2, #88	; 0x58
   1151c:	d054      	beq.n	115c8 <_printf_i+0xd8>
   1151e:	0026      	movs	r6, r4
   11520:	3642      	adds	r6, #66	; 0x42
   11522:	7032      	strb	r2, [r6, #0]
   11524:	e029      	b.n	1157a <_printf_i+0x8a>
   11526:	2a64      	cmp	r2, #100	; 0x64
   11528:	d001      	beq.n	1152e <_printf_i+0x3e>
   1152a:	2a69      	cmp	r2, #105	; 0x69
   1152c:	d1f7      	bne.n	1151e <_printf_i+0x2e>
   1152e:	6821      	ldr	r1, [r4, #0]
   11530:	681a      	ldr	r2, [r3, #0]
   11532:	0608      	lsls	r0, r1, #24
   11534:	d523      	bpl.n	1157e <_printf_i+0x8e>
   11536:	1d11      	adds	r1, r2, #4
   11538:	6019      	str	r1, [r3, #0]
   1153a:	6815      	ldr	r5, [r2, #0]
   1153c:	e025      	b.n	1158a <_printf_i+0x9a>
   1153e:	2a73      	cmp	r2, #115	; 0x73
   11540:	d100      	bne.n	11544 <_printf_i+0x54>
   11542:	e088      	b.n	11656 <_printf_i+0x166>
   11544:	d808      	bhi.n	11558 <_printf_i+0x68>
   11546:	2a6f      	cmp	r2, #111	; 0x6f
   11548:	d029      	beq.n	1159e <_printf_i+0xae>
   1154a:	2a70      	cmp	r2, #112	; 0x70
   1154c:	d1e7      	bne.n	1151e <_printf_i+0x2e>
   1154e:	2220      	movs	r2, #32
   11550:	6809      	ldr	r1, [r1, #0]
   11552:	430a      	orrs	r2, r1
   11554:	6022      	str	r2, [r4, #0]
   11556:	e003      	b.n	11560 <_printf_i+0x70>
   11558:	2a75      	cmp	r2, #117	; 0x75
   1155a:	d020      	beq.n	1159e <_printf_i+0xae>
   1155c:	2a78      	cmp	r2, #120	; 0x78
   1155e:	d1de      	bne.n	1151e <_printf_i+0x2e>
   11560:	0022      	movs	r2, r4
   11562:	2178      	movs	r1, #120	; 0x78
   11564:	3245      	adds	r2, #69	; 0x45
   11566:	7011      	strb	r1, [r2, #0]
   11568:	4a6c      	ldr	r2, [pc, #432]	; (1171c <_printf_i+0x22c>)
   1156a:	e030      	b.n	115ce <_printf_i+0xde>
   1156c:	000e      	movs	r6, r1
   1156e:	681a      	ldr	r2, [r3, #0]
   11570:	3642      	adds	r6, #66	; 0x42
   11572:	1d11      	adds	r1, r2, #4
   11574:	6019      	str	r1, [r3, #0]
   11576:	6813      	ldr	r3, [r2, #0]
   11578:	7033      	strb	r3, [r6, #0]
   1157a:	2301      	movs	r3, #1
   1157c:	e079      	b.n	11672 <_printf_i+0x182>
   1157e:	0649      	lsls	r1, r1, #25
   11580:	d5d9      	bpl.n	11536 <_printf_i+0x46>
   11582:	1d11      	adds	r1, r2, #4
   11584:	6019      	str	r1, [r3, #0]
   11586:	2300      	movs	r3, #0
   11588:	5ed5      	ldrsh	r5, [r2, r3]
   1158a:	2d00      	cmp	r5, #0
   1158c:	da03      	bge.n	11596 <_printf_i+0xa6>
   1158e:	232d      	movs	r3, #45	; 0x2d
   11590:	9a04      	ldr	r2, [sp, #16]
   11592:	426d      	negs	r5, r5
   11594:	7013      	strb	r3, [r2, #0]
   11596:	4b62      	ldr	r3, [pc, #392]	; (11720 <_printf_i+0x230>)
   11598:	270a      	movs	r7, #10
   1159a:	9303      	str	r3, [sp, #12]
   1159c:	e02f      	b.n	115fe <_printf_i+0x10e>
   1159e:	6820      	ldr	r0, [r4, #0]
   115a0:	6819      	ldr	r1, [r3, #0]
   115a2:	0605      	lsls	r5, r0, #24
   115a4:	d503      	bpl.n	115ae <_printf_i+0xbe>
   115a6:	1d08      	adds	r0, r1, #4
   115a8:	6018      	str	r0, [r3, #0]
   115aa:	680d      	ldr	r5, [r1, #0]
   115ac:	e005      	b.n	115ba <_printf_i+0xca>
   115ae:	0640      	lsls	r0, r0, #25
   115b0:	d5f9      	bpl.n	115a6 <_printf_i+0xb6>
   115b2:	680d      	ldr	r5, [r1, #0]
   115b4:	1d08      	adds	r0, r1, #4
   115b6:	6018      	str	r0, [r3, #0]
   115b8:	b2ad      	uxth	r5, r5
   115ba:	4b59      	ldr	r3, [pc, #356]	; (11720 <_printf_i+0x230>)
   115bc:	2708      	movs	r7, #8
   115be:	9303      	str	r3, [sp, #12]
   115c0:	2a6f      	cmp	r2, #111	; 0x6f
   115c2:	d018      	beq.n	115f6 <_printf_i+0x106>
   115c4:	270a      	movs	r7, #10
   115c6:	e016      	b.n	115f6 <_printf_i+0x106>
   115c8:	3145      	adds	r1, #69	; 0x45
   115ca:	700a      	strb	r2, [r1, #0]
   115cc:	4a54      	ldr	r2, [pc, #336]	; (11720 <_printf_i+0x230>)
   115ce:	9203      	str	r2, [sp, #12]
   115d0:	681a      	ldr	r2, [r3, #0]
   115d2:	6821      	ldr	r1, [r4, #0]
   115d4:	1d10      	adds	r0, r2, #4
   115d6:	6018      	str	r0, [r3, #0]
   115d8:	6815      	ldr	r5, [r2, #0]
   115da:	0608      	lsls	r0, r1, #24
   115dc:	d522      	bpl.n	11624 <_printf_i+0x134>
   115de:	07cb      	lsls	r3, r1, #31
   115e0:	d502      	bpl.n	115e8 <_printf_i+0xf8>
   115e2:	2320      	movs	r3, #32
   115e4:	4319      	orrs	r1, r3
   115e6:	6021      	str	r1, [r4, #0]
   115e8:	2710      	movs	r7, #16
   115ea:	2d00      	cmp	r5, #0
   115ec:	d103      	bne.n	115f6 <_printf_i+0x106>
   115ee:	2320      	movs	r3, #32
   115f0:	6822      	ldr	r2, [r4, #0]
   115f2:	439a      	bics	r2, r3
   115f4:	6022      	str	r2, [r4, #0]
   115f6:	0023      	movs	r3, r4
   115f8:	2200      	movs	r2, #0
   115fa:	3343      	adds	r3, #67	; 0x43
   115fc:	701a      	strb	r2, [r3, #0]
   115fe:	6863      	ldr	r3, [r4, #4]
   11600:	60a3      	str	r3, [r4, #8]
   11602:	2b00      	cmp	r3, #0
   11604:	db5c      	blt.n	116c0 <_printf_i+0x1d0>
   11606:	2204      	movs	r2, #4
   11608:	6821      	ldr	r1, [r4, #0]
   1160a:	4391      	bics	r1, r2
   1160c:	6021      	str	r1, [r4, #0]
   1160e:	2d00      	cmp	r5, #0
   11610:	d158      	bne.n	116c4 <_printf_i+0x1d4>
   11612:	9e04      	ldr	r6, [sp, #16]
   11614:	2b00      	cmp	r3, #0
   11616:	d064      	beq.n	116e2 <_printf_i+0x1f2>
   11618:	0026      	movs	r6, r4
   1161a:	9b03      	ldr	r3, [sp, #12]
   1161c:	3642      	adds	r6, #66	; 0x42
   1161e:	781b      	ldrb	r3, [r3, #0]
   11620:	7033      	strb	r3, [r6, #0]
   11622:	e05e      	b.n	116e2 <_printf_i+0x1f2>
   11624:	0648      	lsls	r0, r1, #25
   11626:	d5da      	bpl.n	115de <_printf_i+0xee>
   11628:	b2ad      	uxth	r5, r5
   1162a:	e7d8      	b.n	115de <_printf_i+0xee>
   1162c:	6809      	ldr	r1, [r1, #0]
   1162e:	681a      	ldr	r2, [r3, #0]
   11630:	0608      	lsls	r0, r1, #24
   11632:	d505      	bpl.n	11640 <_printf_i+0x150>
   11634:	1d11      	adds	r1, r2, #4
   11636:	6019      	str	r1, [r3, #0]
   11638:	6813      	ldr	r3, [r2, #0]
   1163a:	6962      	ldr	r2, [r4, #20]
   1163c:	601a      	str	r2, [r3, #0]
   1163e:	e006      	b.n	1164e <_printf_i+0x15e>
   11640:	0649      	lsls	r1, r1, #25
   11642:	d5f7      	bpl.n	11634 <_printf_i+0x144>
   11644:	1d11      	adds	r1, r2, #4
   11646:	6019      	str	r1, [r3, #0]
   11648:	6813      	ldr	r3, [r2, #0]
   1164a:	8aa2      	ldrh	r2, [r4, #20]
   1164c:	801a      	strh	r2, [r3, #0]
   1164e:	2300      	movs	r3, #0
   11650:	9e04      	ldr	r6, [sp, #16]
   11652:	6123      	str	r3, [r4, #16]
   11654:	e054      	b.n	11700 <_printf_i+0x210>
   11656:	681a      	ldr	r2, [r3, #0]
   11658:	1d11      	adds	r1, r2, #4
   1165a:	6019      	str	r1, [r3, #0]
   1165c:	6816      	ldr	r6, [r2, #0]
   1165e:	2100      	movs	r1, #0
   11660:	6862      	ldr	r2, [r4, #4]
   11662:	0030      	movs	r0, r6
   11664:	f000 f9e6 	bl	11a34 <memchr>
   11668:	2800      	cmp	r0, #0
   1166a:	d001      	beq.n	11670 <_printf_i+0x180>
   1166c:	1b80      	subs	r0, r0, r6
   1166e:	6060      	str	r0, [r4, #4]
   11670:	6863      	ldr	r3, [r4, #4]
   11672:	6123      	str	r3, [r4, #16]
   11674:	2300      	movs	r3, #0
   11676:	9a04      	ldr	r2, [sp, #16]
   11678:	7013      	strb	r3, [r2, #0]
   1167a:	e041      	b.n	11700 <_printf_i+0x210>
   1167c:	6923      	ldr	r3, [r4, #16]
   1167e:	0032      	movs	r2, r6
   11680:	9906      	ldr	r1, [sp, #24]
   11682:	9805      	ldr	r0, [sp, #20]
   11684:	9d07      	ldr	r5, [sp, #28]
   11686:	47a8      	blx	r5
   11688:	1c43      	adds	r3, r0, #1
   1168a:	d043      	beq.n	11714 <_printf_i+0x224>
   1168c:	6823      	ldr	r3, [r4, #0]
   1168e:	2500      	movs	r5, #0
   11690:	079b      	lsls	r3, r3, #30
   11692:	d40f      	bmi.n	116b4 <_printf_i+0x1c4>
   11694:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11696:	68e0      	ldr	r0, [r4, #12]
   11698:	4298      	cmp	r0, r3
   1169a:	da3d      	bge.n	11718 <_printf_i+0x228>
   1169c:	0018      	movs	r0, r3
   1169e:	e03b      	b.n	11718 <_printf_i+0x228>
   116a0:	0022      	movs	r2, r4
   116a2:	2301      	movs	r3, #1
   116a4:	3219      	adds	r2, #25
   116a6:	9906      	ldr	r1, [sp, #24]
   116a8:	9805      	ldr	r0, [sp, #20]
   116aa:	9e07      	ldr	r6, [sp, #28]
   116ac:	47b0      	blx	r6
   116ae:	1c43      	adds	r3, r0, #1
   116b0:	d030      	beq.n	11714 <_printf_i+0x224>
   116b2:	3501      	adds	r5, #1
   116b4:	68e3      	ldr	r3, [r4, #12]
   116b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   116b8:	1a9b      	subs	r3, r3, r2
   116ba:	429d      	cmp	r5, r3
   116bc:	dbf0      	blt.n	116a0 <_printf_i+0x1b0>
   116be:	e7e9      	b.n	11694 <_printf_i+0x1a4>
   116c0:	2d00      	cmp	r5, #0
   116c2:	d0a9      	beq.n	11618 <_printf_i+0x128>
   116c4:	9e04      	ldr	r6, [sp, #16]
   116c6:	0028      	movs	r0, r5
   116c8:	0039      	movs	r1, r7
   116ca:	f7ff f8a9 	bl	10820 <__aeabi_uidivmod>
   116ce:	9b03      	ldr	r3, [sp, #12]
   116d0:	3e01      	subs	r6, #1
   116d2:	5c5b      	ldrb	r3, [r3, r1]
   116d4:	0028      	movs	r0, r5
   116d6:	7033      	strb	r3, [r6, #0]
   116d8:	0039      	movs	r1, r7
   116da:	f7ff f81b 	bl	10714 <__udivsi3>
   116de:	1e05      	subs	r5, r0, #0
   116e0:	d1f1      	bne.n	116c6 <_printf_i+0x1d6>
   116e2:	2f08      	cmp	r7, #8
   116e4:	d109      	bne.n	116fa <_printf_i+0x20a>
   116e6:	6823      	ldr	r3, [r4, #0]
   116e8:	07db      	lsls	r3, r3, #31
   116ea:	d506      	bpl.n	116fa <_printf_i+0x20a>
   116ec:	6863      	ldr	r3, [r4, #4]
   116ee:	6922      	ldr	r2, [r4, #16]
   116f0:	4293      	cmp	r3, r2
   116f2:	dc02      	bgt.n	116fa <_printf_i+0x20a>
   116f4:	2330      	movs	r3, #48	; 0x30
   116f6:	3e01      	subs	r6, #1
   116f8:	7033      	strb	r3, [r6, #0]
   116fa:	9b04      	ldr	r3, [sp, #16]
   116fc:	1b9b      	subs	r3, r3, r6
   116fe:	6123      	str	r3, [r4, #16]
   11700:	9b07      	ldr	r3, [sp, #28]
   11702:	aa09      	add	r2, sp, #36	; 0x24
   11704:	9300      	str	r3, [sp, #0]
   11706:	0021      	movs	r1, r4
   11708:	9b06      	ldr	r3, [sp, #24]
   1170a:	9805      	ldr	r0, [sp, #20]
   1170c:	f7ff fe82 	bl	11414 <_printf_common>
   11710:	1c43      	adds	r3, r0, #1
   11712:	d1b3      	bne.n	1167c <_printf_i+0x18c>
   11714:	2001      	movs	r0, #1
   11716:	4240      	negs	r0, r0
   11718:	b00b      	add	sp, #44	; 0x2c
   1171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1171c:	00011e32 	.word	0x00011e32
   11720:	00011e21 	.word	0x00011e21

00011724 <_sbrk_r>:
   11724:	2300      	movs	r3, #0
   11726:	b570      	push	{r4, r5, r6, lr}
   11728:	4c06      	ldr	r4, [pc, #24]	; (11744 <_sbrk_r+0x20>)
   1172a:	0005      	movs	r5, r0
   1172c:	0008      	movs	r0, r1
   1172e:	6023      	str	r3, [r4, #0]
   11730:	f7fe ff88 	bl	10644 <_sbrk>
   11734:	1c43      	adds	r3, r0, #1
   11736:	d103      	bne.n	11740 <_sbrk_r+0x1c>
   11738:	6823      	ldr	r3, [r4, #0]
   1173a:	2b00      	cmp	r3, #0
   1173c:	d000      	beq.n	11740 <_sbrk_r+0x1c>
   1173e:	602b      	str	r3, [r5, #0]
   11740:	bd70      	pop	{r4, r5, r6, pc}
   11742:	46c0      	nop			; (mov r8, r8)
   11744:	20000a78 	.word	0x20000a78

00011748 <__sread>:
   11748:	b570      	push	{r4, r5, r6, lr}
   1174a:	000c      	movs	r4, r1
   1174c:	250e      	movs	r5, #14
   1174e:	5f49      	ldrsh	r1, [r1, r5]
   11750:	f000 f97e 	bl	11a50 <_read_r>
   11754:	2800      	cmp	r0, #0
   11756:	db03      	blt.n	11760 <__sread+0x18>
   11758:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1175a:	181b      	adds	r3, r3, r0
   1175c:	6563      	str	r3, [r4, #84]	; 0x54
   1175e:	bd70      	pop	{r4, r5, r6, pc}
   11760:	89a3      	ldrh	r3, [r4, #12]
   11762:	4a02      	ldr	r2, [pc, #8]	; (1176c <__sread+0x24>)
   11764:	4013      	ands	r3, r2
   11766:	81a3      	strh	r3, [r4, #12]
   11768:	e7f9      	b.n	1175e <__sread+0x16>
   1176a:	46c0      	nop			; (mov r8, r8)
   1176c:	ffffefff 	.word	0xffffefff

00011770 <__swrite>:
   11770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11772:	001f      	movs	r7, r3
   11774:	898b      	ldrh	r3, [r1, #12]
   11776:	0005      	movs	r5, r0
   11778:	000c      	movs	r4, r1
   1177a:	0016      	movs	r6, r2
   1177c:	05db      	lsls	r3, r3, #23
   1177e:	d505      	bpl.n	1178c <__swrite+0x1c>
   11780:	230e      	movs	r3, #14
   11782:	5ec9      	ldrsh	r1, [r1, r3]
   11784:	2200      	movs	r2, #0
   11786:	2302      	movs	r3, #2
   11788:	f000 f940 	bl	11a0c <_lseek_r>
   1178c:	89a3      	ldrh	r3, [r4, #12]
   1178e:	4a05      	ldr	r2, [pc, #20]	; (117a4 <__swrite+0x34>)
   11790:	0028      	movs	r0, r5
   11792:	4013      	ands	r3, r2
   11794:	81a3      	strh	r3, [r4, #12]
   11796:	0032      	movs	r2, r6
   11798:	230e      	movs	r3, #14
   1179a:	5ee1      	ldrsh	r1, [r4, r3]
   1179c:	003b      	movs	r3, r7
   1179e:	f000 f875 	bl	1188c <_write_r>
   117a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117a4:	ffffefff 	.word	0xffffefff

000117a8 <__sseek>:
   117a8:	b570      	push	{r4, r5, r6, lr}
   117aa:	000c      	movs	r4, r1
   117ac:	250e      	movs	r5, #14
   117ae:	5f49      	ldrsh	r1, [r1, r5]
   117b0:	f000 f92c 	bl	11a0c <_lseek_r>
   117b4:	89a3      	ldrh	r3, [r4, #12]
   117b6:	1c42      	adds	r2, r0, #1
   117b8:	d103      	bne.n	117c2 <__sseek+0x1a>
   117ba:	4a05      	ldr	r2, [pc, #20]	; (117d0 <__sseek+0x28>)
   117bc:	4013      	ands	r3, r2
   117be:	81a3      	strh	r3, [r4, #12]
   117c0:	bd70      	pop	{r4, r5, r6, pc}
   117c2:	2280      	movs	r2, #128	; 0x80
   117c4:	0152      	lsls	r2, r2, #5
   117c6:	4313      	orrs	r3, r2
   117c8:	81a3      	strh	r3, [r4, #12]
   117ca:	6560      	str	r0, [r4, #84]	; 0x54
   117cc:	e7f8      	b.n	117c0 <__sseek+0x18>
   117ce:	46c0      	nop			; (mov r8, r8)
   117d0:	ffffefff 	.word	0xffffefff

000117d4 <__sclose>:
   117d4:	b510      	push	{r4, lr}
   117d6:	230e      	movs	r3, #14
   117d8:	5ec9      	ldrsh	r1, [r1, r3]
   117da:	f000 f8e1 	bl	119a0 <_close_r>
   117de:	bd10      	pop	{r4, pc}

000117e0 <__swbuf_r>:
   117e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117e2:	0005      	movs	r5, r0
   117e4:	000e      	movs	r6, r1
   117e6:	0014      	movs	r4, r2
   117e8:	2800      	cmp	r0, #0
   117ea:	d004      	beq.n	117f6 <__swbuf_r+0x16>
   117ec:	6983      	ldr	r3, [r0, #24]
   117ee:	2b00      	cmp	r3, #0
   117f0:	d101      	bne.n	117f6 <__swbuf_r+0x16>
   117f2:	f7ff fb1d 	bl	10e30 <__sinit>
   117f6:	4b22      	ldr	r3, [pc, #136]	; (11880 <__swbuf_r+0xa0>)
   117f8:	429c      	cmp	r4, r3
   117fa:	d12d      	bne.n	11858 <__swbuf_r+0x78>
   117fc:	686c      	ldr	r4, [r5, #4]
   117fe:	69a3      	ldr	r3, [r4, #24]
   11800:	60a3      	str	r3, [r4, #8]
   11802:	89a3      	ldrh	r3, [r4, #12]
   11804:	071b      	lsls	r3, r3, #28
   11806:	d531      	bpl.n	1186c <__swbuf_r+0x8c>
   11808:	6923      	ldr	r3, [r4, #16]
   1180a:	2b00      	cmp	r3, #0
   1180c:	d02e      	beq.n	1186c <__swbuf_r+0x8c>
   1180e:	6823      	ldr	r3, [r4, #0]
   11810:	6922      	ldr	r2, [r4, #16]
   11812:	b2f7      	uxtb	r7, r6
   11814:	1a98      	subs	r0, r3, r2
   11816:	6963      	ldr	r3, [r4, #20]
   11818:	b2f6      	uxtb	r6, r6
   1181a:	4298      	cmp	r0, r3
   1181c:	db05      	blt.n	1182a <__swbuf_r+0x4a>
   1181e:	0021      	movs	r1, r4
   11820:	0028      	movs	r0, r5
   11822:	f7ff fa97 	bl	10d54 <_fflush_r>
   11826:	2800      	cmp	r0, #0
   11828:	d126      	bne.n	11878 <__swbuf_r+0x98>
   1182a:	68a3      	ldr	r3, [r4, #8]
   1182c:	3001      	adds	r0, #1
   1182e:	3b01      	subs	r3, #1
   11830:	60a3      	str	r3, [r4, #8]
   11832:	6823      	ldr	r3, [r4, #0]
   11834:	1c5a      	adds	r2, r3, #1
   11836:	6022      	str	r2, [r4, #0]
   11838:	701f      	strb	r7, [r3, #0]
   1183a:	6963      	ldr	r3, [r4, #20]
   1183c:	4298      	cmp	r0, r3
   1183e:	d004      	beq.n	1184a <__swbuf_r+0x6a>
   11840:	89a3      	ldrh	r3, [r4, #12]
   11842:	07db      	lsls	r3, r3, #31
   11844:	d51a      	bpl.n	1187c <__swbuf_r+0x9c>
   11846:	2e0a      	cmp	r6, #10
   11848:	d118      	bne.n	1187c <__swbuf_r+0x9c>
   1184a:	0021      	movs	r1, r4
   1184c:	0028      	movs	r0, r5
   1184e:	f7ff fa81 	bl	10d54 <_fflush_r>
   11852:	2800      	cmp	r0, #0
   11854:	d012      	beq.n	1187c <__swbuf_r+0x9c>
   11856:	e00f      	b.n	11878 <__swbuf_r+0x98>
   11858:	4b0a      	ldr	r3, [pc, #40]	; (11884 <__swbuf_r+0xa4>)
   1185a:	429c      	cmp	r4, r3
   1185c:	d101      	bne.n	11862 <__swbuf_r+0x82>
   1185e:	68ac      	ldr	r4, [r5, #8]
   11860:	e7cd      	b.n	117fe <__swbuf_r+0x1e>
   11862:	4b09      	ldr	r3, [pc, #36]	; (11888 <__swbuf_r+0xa8>)
   11864:	429c      	cmp	r4, r3
   11866:	d1ca      	bne.n	117fe <__swbuf_r+0x1e>
   11868:	68ec      	ldr	r4, [r5, #12]
   1186a:	e7c8      	b.n	117fe <__swbuf_r+0x1e>
   1186c:	0021      	movs	r1, r4
   1186e:	0028      	movs	r0, r5
   11870:	f000 f820 	bl	118b4 <__swsetup_r>
   11874:	2800      	cmp	r0, #0
   11876:	d0ca      	beq.n	1180e <__swbuf_r+0x2e>
   11878:	2601      	movs	r6, #1
   1187a:	4276      	negs	r6, r6
   1187c:	0030      	movs	r0, r6
   1187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11880:	00011dd0 	.word	0x00011dd0
   11884:	00011df0 	.word	0x00011df0
   11888:	00011db0 	.word	0x00011db0

0001188c <_write_r>:
   1188c:	b570      	push	{r4, r5, r6, lr}
   1188e:	0005      	movs	r5, r0
   11890:	0008      	movs	r0, r1
   11892:	0011      	movs	r1, r2
   11894:	2200      	movs	r2, #0
   11896:	4c06      	ldr	r4, [pc, #24]	; (118b0 <_write_r+0x24>)
   11898:	6022      	str	r2, [r4, #0]
   1189a:	001a      	movs	r2, r3
   1189c:	f7fe fe96 	bl	105cc <_write>
   118a0:	1c43      	adds	r3, r0, #1
   118a2:	d103      	bne.n	118ac <_write_r+0x20>
   118a4:	6823      	ldr	r3, [r4, #0]
   118a6:	2b00      	cmp	r3, #0
   118a8:	d000      	beq.n	118ac <_write_r+0x20>
   118aa:	602b      	str	r3, [r5, #0]
   118ac:	bd70      	pop	{r4, r5, r6, pc}
   118ae:	46c0      	nop			; (mov r8, r8)
   118b0:	20000a78 	.word	0x20000a78

000118b4 <__swsetup_r>:
   118b4:	4b36      	ldr	r3, [pc, #216]	; (11990 <__swsetup_r+0xdc>)
   118b6:	b570      	push	{r4, r5, r6, lr}
   118b8:	681d      	ldr	r5, [r3, #0]
   118ba:	0006      	movs	r6, r0
   118bc:	000c      	movs	r4, r1
   118be:	2d00      	cmp	r5, #0
   118c0:	d005      	beq.n	118ce <__swsetup_r+0x1a>
   118c2:	69ab      	ldr	r3, [r5, #24]
   118c4:	2b00      	cmp	r3, #0
   118c6:	d102      	bne.n	118ce <__swsetup_r+0x1a>
   118c8:	0028      	movs	r0, r5
   118ca:	f7ff fab1 	bl	10e30 <__sinit>
   118ce:	4b31      	ldr	r3, [pc, #196]	; (11994 <__swsetup_r+0xe0>)
   118d0:	429c      	cmp	r4, r3
   118d2:	d10f      	bne.n	118f4 <__swsetup_r+0x40>
   118d4:	686c      	ldr	r4, [r5, #4]
   118d6:	230c      	movs	r3, #12
   118d8:	5ee2      	ldrsh	r2, [r4, r3]
   118da:	b293      	uxth	r3, r2
   118dc:	0719      	lsls	r1, r3, #28
   118de:	d42d      	bmi.n	1193c <__swsetup_r+0x88>
   118e0:	06d9      	lsls	r1, r3, #27
   118e2:	d411      	bmi.n	11908 <__swsetup_r+0x54>
   118e4:	2309      	movs	r3, #9
   118e6:	2001      	movs	r0, #1
   118e8:	6033      	str	r3, [r6, #0]
   118ea:	3337      	adds	r3, #55	; 0x37
   118ec:	4313      	orrs	r3, r2
   118ee:	81a3      	strh	r3, [r4, #12]
   118f0:	4240      	negs	r0, r0
   118f2:	bd70      	pop	{r4, r5, r6, pc}
   118f4:	4b28      	ldr	r3, [pc, #160]	; (11998 <__swsetup_r+0xe4>)
   118f6:	429c      	cmp	r4, r3
   118f8:	d101      	bne.n	118fe <__swsetup_r+0x4a>
   118fa:	68ac      	ldr	r4, [r5, #8]
   118fc:	e7eb      	b.n	118d6 <__swsetup_r+0x22>
   118fe:	4b27      	ldr	r3, [pc, #156]	; (1199c <__swsetup_r+0xe8>)
   11900:	429c      	cmp	r4, r3
   11902:	d1e8      	bne.n	118d6 <__swsetup_r+0x22>
   11904:	68ec      	ldr	r4, [r5, #12]
   11906:	e7e6      	b.n	118d6 <__swsetup_r+0x22>
   11908:	075b      	lsls	r3, r3, #29
   1190a:	d513      	bpl.n	11934 <__swsetup_r+0x80>
   1190c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1190e:	2900      	cmp	r1, #0
   11910:	d008      	beq.n	11924 <__swsetup_r+0x70>
   11912:	0023      	movs	r3, r4
   11914:	3344      	adds	r3, #68	; 0x44
   11916:	4299      	cmp	r1, r3
   11918:	d002      	beq.n	11920 <__swsetup_r+0x6c>
   1191a:	0030      	movs	r0, r6
   1191c:	f7ff fb8e 	bl	1103c <_free_r>
   11920:	2300      	movs	r3, #0
   11922:	6363      	str	r3, [r4, #52]	; 0x34
   11924:	2224      	movs	r2, #36	; 0x24
   11926:	89a3      	ldrh	r3, [r4, #12]
   11928:	4393      	bics	r3, r2
   1192a:	81a3      	strh	r3, [r4, #12]
   1192c:	2300      	movs	r3, #0
   1192e:	6063      	str	r3, [r4, #4]
   11930:	6923      	ldr	r3, [r4, #16]
   11932:	6023      	str	r3, [r4, #0]
   11934:	2308      	movs	r3, #8
   11936:	89a2      	ldrh	r2, [r4, #12]
   11938:	4313      	orrs	r3, r2
   1193a:	81a3      	strh	r3, [r4, #12]
   1193c:	6923      	ldr	r3, [r4, #16]
   1193e:	2b00      	cmp	r3, #0
   11940:	d10b      	bne.n	1195a <__swsetup_r+0xa6>
   11942:	21a0      	movs	r1, #160	; 0xa0
   11944:	2280      	movs	r2, #128	; 0x80
   11946:	89a3      	ldrh	r3, [r4, #12]
   11948:	0089      	lsls	r1, r1, #2
   1194a:	0092      	lsls	r2, r2, #2
   1194c:	400b      	ands	r3, r1
   1194e:	4293      	cmp	r3, r2
   11950:	d003      	beq.n	1195a <__swsetup_r+0xa6>
   11952:	0021      	movs	r1, r4
   11954:	0030      	movs	r0, r6
   11956:	f7ff fb29 	bl	10fac <__smakebuf_r>
   1195a:	2301      	movs	r3, #1
   1195c:	89a2      	ldrh	r2, [r4, #12]
   1195e:	4013      	ands	r3, r2
   11960:	d011      	beq.n	11986 <__swsetup_r+0xd2>
   11962:	2300      	movs	r3, #0
   11964:	60a3      	str	r3, [r4, #8]
   11966:	6963      	ldr	r3, [r4, #20]
   11968:	425b      	negs	r3, r3
   1196a:	61a3      	str	r3, [r4, #24]
   1196c:	2000      	movs	r0, #0
   1196e:	6923      	ldr	r3, [r4, #16]
   11970:	4283      	cmp	r3, r0
   11972:	d1be      	bne.n	118f2 <__swsetup_r+0x3e>
   11974:	230c      	movs	r3, #12
   11976:	5ee2      	ldrsh	r2, [r4, r3]
   11978:	0613      	lsls	r3, r2, #24
   1197a:	d5ba      	bpl.n	118f2 <__swsetup_r+0x3e>
   1197c:	2340      	movs	r3, #64	; 0x40
   1197e:	4313      	orrs	r3, r2
   11980:	81a3      	strh	r3, [r4, #12]
   11982:	3801      	subs	r0, #1
   11984:	e7b5      	b.n	118f2 <__swsetup_r+0x3e>
   11986:	0792      	lsls	r2, r2, #30
   11988:	d400      	bmi.n	1198c <__swsetup_r+0xd8>
   1198a:	6963      	ldr	r3, [r4, #20]
   1198c:	60a3      	str	r3, [r4, #8]
   1198e:	e7ed      	b.n	1196c <__swsetup_r+0xb8>
   11990:	20000120 	.word	0x20000120
   11994:	00011dd0 	.word	0x00011dd0
   11998:	00011df0 	.word	0x00011df0
   1199c:	00011db0 	.word	0x00011db0

000119a0 <_close_r>:
   119a0:	2300      	movs	r3, #0
   119a2:	b570      	push	{r4, r5, r6, lr}
   119a4:	4c06      	ldr	r4, [pc, #24]	; (119c0 <_close_r+0x20>)
   119a6:	0005      	movs	r5, r0
   119a8:	0008      	movs	r0, r1
   119aa:	6023      	str	r3, [r4, #0]
   119ac:	f7fe fe7a 	bl	106a4 <_close>
   119b0:	1c43      	adds	r3, r0, #1
   119b2:	d103      	bne.n	119bc <_close_r+0x1c>
   119b4:	6823      	ldr	r3, [r4, #0]
   119b6:	2b00      	cmp	r3, #0
   119b8:	d000      	beq.n	119bc <_close_r+0x1c>
   119ba:	602b      	str	r3, [r5, #0]
   119bc:	bd70      	pop	{r4, r5, r6, pc}
   119be:	46c0      	nop			; (mov r8, r8)
   119c0:	20000a78 	.word	0x20000a78

000119c4 <_fstat_r>:
   119c4:	2300      	movs	r3, #0
   119c6:	b570      	push	{r4, r5, r6, lr}
   119c8:	4c06      	ldr	r4, [pc, #24]	; (119e4 <_fstat_r+0x20>)
   119ca:	0005      	movs	r5, r0
   119cc:	0008      	movs	r0, r1
   119ce:	0011      	movs	r1, r2
   119d0:	6023      	str	r3, [r4, #0]
   119d2:	f7fe fe71 	bl	106b8 <_fstat>
   119d6:	1c43      	adds	r3, r0, #1
   119d8:	d103      	bne.n	119e2 <_fstat_r+0x1e>
   119da:	6823      	ldr	r3, [r4, #0]
   119dc:	2b00      	cmp	r3, #0
   119de:	d000      	beq.n	119e2 <_fstat_r+0x1e>
   119e0:	602b      	str	r3, [r5, #0]
   119e2:	bd70      	pop	{r4, r5, r6, pc}
   119e4:	20000a78 	.word	0x20000a78

000119e8 <_isatty_r>:
   119e8:	2300      	movs	r3, #0
   119ea:	b570      	push	{r4, r5, r6, lr}
   119ec:	4c06      	ldr	r4, [pc, #24]	; (11a08 <_isatty_r+0x20>)
   119ee:	0005      	movs	r5, r0
   119f0:	0008      	movs	r0, r1
   119f2:	6023      	str	r3, [r4, #0]
   119f4:	f7fe fe6e 	bl	106d4 <_isatty>
   119f8:	1c43      	adds	r3, r0, #1
   119fa:	d103      	bne.n	11a04 <_isatty_r+0x1c>
   119fc:	6823      	ldr	r3, [r4, #0]
   119fe:	2b00      	cmp	r3, #0
   11a00:	d000      	beq.n	11a04 <_isatty_r+0x1c>
   11a02:	602b      	str	r3, [r5, #0]
   11a04:	bd70      	pop	{r4, r5, r6, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20000a78 	.word	0x20000a78

00011a0c <_lseek_r>:
   11a0c:	b570      	push	{r4, r5, r6, lr}
   11a0e:	0005      	movs	r5, r0
   11a10:	0008      	movs	r0, r1
   11a12:	0011      	movs	r1, r2
   11a14:	2200      	movs	r2, #0
   11a16:	4c06      	ldr	r4, [pc, #24]	; (11a30 <_lseek_r+0x24>)
   11a18:	6022      	str	r2, [r4, #0]
   11a1a:	001a      	movs	r2, r3
   11a1c:	f7fe fe63 	bl	106e6 <_lseek>
   11a20:	1c43      	adds	r3, r0, #1
   11a22:	d103      	bne.n	11a2c <_lseek_r+0x20>
   11a24:	6823      	ldr	r3, [r4, #0]
   11a26:	2b00      	cmp	r3, #0
   11a28:	d000      	beq.n	11a2c <_lseek_r+0x20>
   11a2a:	602b      	str	r3, [r5, #0]
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	46c0      	nop			; (mov r8, r8)
   11a30:	20000a78 	.word	0x20000a78

00011a34 <memchr>:
   11a34:	b2c9      	uxtb	r1, r1
   11a36:	1882      	adds	r2, r0, r2
   11a38:	4290      	cmp	r0, r2
   11a3a:	d101      	bne.n	11a40 <memchr+0xc>
   11a3c:	2000      	movs	r0, #0
   11a3e:	4770      	bx	lr
   11a40:	7803      	ldrb	r3, [r0, #0]
   11a42:	428b      	cmp	r3, r1
   11a44:	d0fb      	beq.n	11a3e <memchr+0xa>
   11a46:	3001      	adds	r0, #1
   11a48:	e7f6      	b.n	11a38 <memchr+0x4>

00011a4a <__malloc_lock>:
   11a4a:	4770      	bx	lr

00011a4c <__malloc_unlock>:
   11a4c:	4770      	bx	lr
	...

00011a50 <_read_r>:
   11a50:	b570      	push	{r4, r5, r6, lr}
   11a52:	0005      	movs	r5, r0
   11a54:	0008      	movs	r0, r1
   11a56:	0011      	movs	r1, r2
   11a58:	2200      	movs	r2, #0
   11a5a:	4c06      	ldr	r4, [pc, #24]	; (11a74 <_read_r+0x24>)
   11a5c:	6022      	str	r2, [r4, #0]
   11a5e:	001a      	movs	r2, r3
   11a60:	f7fe fd84 	bl	1056c <_read>
   11a64:	1c43      	adds	r3, r0, #1
   11a66:	d103      	bne.n	11a70 <_read_r+0x20>
   11a68:	6823      	ldr	r3, [r4, #0]
   11a6a:	2b00      	cmp	r3, #0
   11a6c:	d000      	beq.n	11a70 <_read_r+0x20>
   11a6e:	602b      	str	r3, [r5, #0]
   11a70:	bd70      	pop	{r4, r5, r6, pc}
   11a72:	46c0      	nop			; (mov r8, r8)
   11a74:	20000a78 	.word	0x20000a78

00011a78 <sd_mmc_trans_units>:
   11a78:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00011a94 <sd_trans_multipliers>:
   11a94:	00000000 0000000a 0000000c 0000000d     ................
   11aa4:	0000000f 00000014 00000019 0000001e     ................
   11ab4:	00000023 00000028 0000002d 00000032     #...(...-...2...
   11ac4:	00000037 0000003c 00000046 00000050     7...<...F...P...

00011ad4 <mmc_trans_multipliers>:
   11ad4:	00000000 0000000a 0000000c 0000000d     ................
   11ae4:	0000000f 00000014 0000001a 0000001e     ................
   11af4:	00000023 00000028 0000002d 00000034     #...(...-...4...
   11b04:	00000037 0000003c 00000046 00000050     7...<...F...P...
   11b14:	2c2b2a22 3d3c3b3a 5d5b3f3e 00007f7c     "*+,:;<=>?[]|...
   11b24:	495f4453 4547414d 4e49422e 00000000     SD_IMAGE.BIN....
   11b34:	4341422e 5f50554b 47414d49 49422e45     .BACKUP_IMAGE.BI
   11b44:	0000004e 000a0a0a 2e2e2e2e 6f42202e     N............ Bo
   11b54:	6f6c746f 72656461 61747320 64657472     otloader started
   11b64:	2e2e2e20 000a2e2e 343a3831 32303a30      .......18:40:02
   11b74:	00000000 20727041 32203033 00373130     ....Apr 30 2017.
   11b84:	706d6f43 64656c69 3a6e6f20 20732520     Compiled on: %s 
   11b94:	0a207325 00000a0a 20435452 75646f6d     %s .....RTC modu
   11ba4:	6920656c 2074696e 6c696166 0a2e6465     le init failed..
   11bb4:	00000000 20444f42 75646f6d 6920656c     ....BOD module i
   11bc4:	2074696e 6c696166 0a2e6465 00000000     nit failed......
   11bd4:	49545845 6d20544e 6c75646f 6e692065     EXTINT module in
   11be4:	66207469 656c6961 000a2e64 204d564e     it failed...NVM 
   11bf4:	75646f6d 6920656c 2074696e 6c696166     module init fail
   11c04:	0a2e6465 00000000 61636f4c 6954206c     ed......Local Ti
   11c14:	203a656d 252f6425 64252f64 64252020     me: %d/%d/%d  %d
   11c24:	3a64253a 000a6425 20544f4e 4e554f46     :%d:%d..NOT FOUN
   11c34:	00000044 4e554f46 00000044 2077654e     D...FOUND...New 
   11c44:	67616d69 69662065 203a656c 000a7325     image file: %s..
   11c54:	68746f4e 20676e69 64206f74 47202e6f     Nothing to do. G
   11c64:	676e696f 206f7420 65656c73 000a2e70     oing to sleep...
   11c74:	656c6946 65706f20 6166206e 64656c69     File open failed
   11c84:	00000a2e 656c6946 63786520 73646565     ....File exceeds
   11c94:	78616d20 7a697320 666f2065 20642520      max size of %d 
   11ca4:	65747962 000a2e73 656c6946 61657220     bytes...File rea
   11cb4:	72652064 20726f72 65746661 64252072     d error after %d
   11cc4:	74796220 000a7365 676f7250 656d6172      bytes..Programe
   11cd4:	75252064 20666f20 62207525 73657479     d %u of %u bytes
   11ce4:	0000000a 206f6f54 796e616d 74796220     ....Too many byt
   11cf4:	000a7365 62616e55 7420656c 6564206f     es..Unable to de
   11d04:	6574656c 6c696620 000a2e65 756f6853     lete file...Shou
   11d14:	6e20646c 6220746f 65682065 000a6572     ld not be here..
   11d24:	204d564e 73617265 6f722065 72652077     NVM erase row er
   11d34:	0a726f72 00000000 204d564e 74697277     ror.....NVM writ
   11d44:	75622065 72656666 72726520 000a726f     e buffer error..
   11d54:	2e2e3231 0046452e 42000800 42000c00     12...EF....B...B
   11d64:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   11d74:	0c0b0a09 00000e0d 2f445322 20434d4d     ........"SD/MMC 
   11d84:	64726143 6f6c5320 22302074 00000000     Card Slot 0"....
   11d94:	01020300                                ....

00011d98 <_usb_device_irq_bits>:
   11d98:	00080004 00800070 01000001 00000200     ....p...........

00011da8 <_usb_endpoint_irq_bits>:
   11da8:	60100c03                                ...`

00011dac <_global_impure_ptr>:
   11dac:	20000124                                $.. 

00011db0 <__sf_fake_stderr>:
	...

00011dd0 <__sf_fake_stdin>:
	...

00011df0 <__sf_fake_stdout>:
	...
   11e10:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   11e20:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   11e30:	31300046 35343332 39383736 64636261     F.0123456789abcd
   11e40:	00006665                                ef..

00011e44 <_init>:
   11e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e46:	46c0      	nop			; (mov r8, r8)
   11e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11e4a:	bc08      	pop	{r3}
   11e4c:	469e      	mov	lr, r3
   11e4e:	4770      	bx	lr

00011e50 <__init_array_start>:
   11e50:	000000dd 	.word	0x000000dd

00011e54 <_fini>:
   11e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e56:	46c0      	nop			; (mov r8, r8)
   11e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11e5a:	bc08      	pop	{r3}
   11e5c:	469e      	mov	lr, r3
   11e5e:	4770      	bx	lr

00011e60 <__fini_array_start>:
   11e60:	000000b5 	.word	0x000000b5
