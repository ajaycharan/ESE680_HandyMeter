
samw25_xplained_pro_serial_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000588  20000074  00004fb0  00020074  2**2
                  ALLOC
  3 .stack        00002004  200005fc  00005538  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ddd5  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006069  00000000  00000000  0005deca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c77e  00000000  00000000  00063f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009a8  00000000  00000000  000706b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ff0  00000000  00000000  00071059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009691  00000000  00000000  00072049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000088bd  00000000  00000000  0007b6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002164  00000000  00000000  00083f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 26 00 20 f9 31 00 00 f5 31 00 00 f5 31 00 00     .&. .1...1...1..
	...
      2c:	f5 31 00 00 00 00 00 00 00 00 00 00 f5 31 00 00     .1...........1..
      3c:	f5 31 00 00 f5 31 00 00 f5 31 00 00 f5 31 00 00     .1...1...1...1..
      4c:	f5 31 00 00 ed 19 00 00 f5 31 00 00 f5 31 00 00     .1.......1...1..
      5c:	f5 31 00 00 f5 31 00 00 c9 1e 00 00 d9 1e 00 00     .1...1..........
      6c:	e9 1e 00 00 f9 1e 00 00 09 1f 00 00 19 1f 00 00     ................
      7c:	31 31 00 00 41 31 00 00 51 31 00 00 c5 31 00 00     11..A1..Q1...1..
      8c:	d5 31 00 00 e5 31 00 00 f5 31 00 00 f5 31 00 00     .1...1...1...1..
      9c:	f5 31 00 00 f5 31 00 00 f5 31 00 00 f5 31 00 00     .1...1...1...1..
      ac:	f5 31 00 00                                         .1..

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000074 	.word	0x20000074
      d0:	00000000 	.word	0x00000000
      d4:	00004f3c 	.word	0x00004f3c

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	20000078 	.word	0x20000078
     104:	00004f3c 	.word	0x00004f3c
     108:	00004f3c 	.word	0x00004f3c
     10c:	00000000 	.word	0x00000000

00000110 <usart_rx_complete_handler>:
	}
}

static void usart_rx_complete_handler(const struct usart_module *const module)
{
	usart_pkt_received = 1;
     110:	2201      	movs	r2, #1
     112:	4b0a      	ldr	r3, [pc, #40]	; (13c <usart_rx_complete_handler+0x2c>)
     114:	701a      	strb	r2, [r3, #0]
	usart_pkt = (uint8_t *)(module->rx_buffer_ptr - schedule_rx_length);
     116:	4b0a      	ldr	r3, [pc, #40]	; (140 <usart_rx_complete_handler+0x30>)
     118:	881a      	ldrh	r2, [r3, #0]
     11a:	6a43      	ldr	r3, [r0, #36]	; 0x24
     11c:	1a9b      	subs	r3, r3, r2
     11e:	4a09      	ldr	r2, [pc, #36]	; (144 <usart_rx_complete_handler+0x34>)
     120:	6013      	str	r3, [r2, #0]
	if(change_state) {
     122:	4b09      	ldr	r3, [pc, #36]	; (148 <usart_rx_complete_handler+0x38>)
     124:	781b      	ldrb	r3, [r3, #0]
     126:	2b00      	cmp	r3, #0
     128:	d006      	beq.n	138 <usart_rx_complete_handler+0x28>
		usart_prot_handler_status = new_state;
     12a:	4b08      	ldr	r3, [pc, #32]	; (14c <usart_rx_complete_handler+0x3c>)
     12c:	781a      	ldrb	r2, [r3, #0]
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <usart_rx_complete_handler+0x40>)
     130:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     132:	2200      	movs	r2, #0
     134:	4b04      	ldr	r3, [pc, #16]	; (148 <usart_rx_complete_handler+0x38>)
     136:	701a      	strb	r2, [r3, #0]
	}
}
     138:	4770      	bx	lr
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	20000500 	.word	0x20000500
     140:	200000d0 	.word	0x200000d0
     144:	200004fc 	.word	0x200004fc
     148:	200000c4 	.word	0x200000c4
     14c:	200000c5 	.word	0x200000c5
     150:	20000501 	.word	0x20000501

00000154 <usart_tx_complete_handler>:
{
     154:	b510      	push	{r4, lr}
	if(schedule_rx) {
     156:	4b10      	ldr	r3, [pc, #64]	; (198 <usart_tx_complete_handler+0x44>)
     158:	781b      	ldrb	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d00a      	beq.n	174 <usart_tx_complete_handler+0x20>
		if(schedule_rx_length == 1) {
     15e:	4b0f      	ldr	r3, [pc, #60]	; (19c <usart_tx_complete_handler+0x48>)
     160:	881a      	ldrh	r2, [r3, #0]
     162:	2a01      	cmp	r2, #1
     164:	d012      	beq.n	18c <usart_tx_complete_handler+0x38>
			usart_read_buffer_job((struct usart_module *)module, (uint8_t *)schedule_rx_buffer, schedule_rx_length);
     166:	4b0e      	ldr	r3, [pc, #56]	; (1a0 <usart_tx_complete_handler+0x4c>)
     168:	6819      	ldr	r1, [r3, #0]
     16a:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <usart_tx_complete_handler+0x50>)
     16c:	4798      	blx	r3
		schedule_rx = 0;
     16e:	2200      	movs	r2, #0
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <usart_tx_complete_handler+0x44>)
     172:	701a      	strb	r2, [r3, #0]
	if(change_state) {
     174:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <usart_tx_complete_handler+0x54>)
     176:	781b      	ldrb	r3, [r3, #0]
     178:	2b00      	cmp	r3, #0
     17a:	d006      	beq.n	18a <usart_tx_complete_handler+0x36>
		usart_prot_handler_status = new_state;
     17c:	4b0b      	ldr	r3, [pc, #44]	; (1ac <usart_tx_complete_handler+0x58>)
     17e:	781a      	ldrb	r2, [r3, #0]
     180:	4b0b      	ldr	r3, [pc, #44]	; (1b0 <usart_tx_complete_handler+0x5c>)
     182:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     184:	2200      	movs	r2, #0
     186:	4b08      	ldr	r3, [pc, #32]	; (1a8 <usart_tx_complete_handler+0x54>)
     188:	701a      	strb	r2, [r3, #0]
}
     18a:	bd10      	pop	{r4, pc}
			usart_read_job((struct usart_module *)module, schedule_rx_buffer);
     18c:	4b04      	ldr	r3, [pc, #16]	; (1a0 <usart_tx_complete_handler+0x4c>)
     18e:	6819      	ldr	r1, [r3, #0]
     190:	4b08      	ldr	r3, [pc, #32]	; (1b4 <usart_tx_complete_handler+0x60>)
     192:	4798      	blx	r3
     194:	e7eb      	b.n	16e <usart_tx_complete_handler+0x1a>
     196:	46c0      	nop			; (mov r8, r8)
     198:	200000c8 	.word	0x200000c8
     19c:	200000d0 	.word	0x200000d0
     1a0:	200000cc 	.word	0x200000cc
     1a4:	000027fd 	.word	0x000027fd
     1a8:	200000c4 	.word	0x200000c4
     1ac:	200000c5 	.word	0x200000c5
     1b0:	20000501 	.word	0x20000501
     1b4:	000027a9 	.word	0x000027a9

000001b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     1b8:	b570      	push	{r4, r5, r6, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	0005      	movs	r5, r0
     1be:	000e      	movs	r6, r1
	uint16_t temp = 0;
     1c0:	2200      	movs	r2, #0
     1c2:	466b      	mov	r3, sp
     1c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     1c6:	4c06      	ldr	r4, [pc, #24]	; (1e0 <usart_serial_getchar+0x28>)
     1c8:	466b      	mov	r3, sp
     1ca:	1d99      	adds	r1, r3, #6
     1cc:	0028      	movs	r0, r5
     1ce:	47a0      	blx	r4
     1d0:	2800      	cmp	r0, #0
     1d2:	d1f9      	bne.n	1c8 <usart_serial_getchar+0x10>

	*c = temp;
     1d4:	466b      	mov	r3, sp
     1d6:	3306      	adds	r3, #6
     1d8:	881b      	ldrh	r3, [r3, #0]
     1da:	7033      	strb	r3, [r6, #0]
}
     1dc:	b002      	add	sp, #8
     1de:	bd70      	pop	{r4, r5, r6, pc}
     1e0:	000026b9 	.word	0x000026b9

000001e4 <usart_serial_putchar>:
{
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     1e8:	b28c      	uxth	r4, r1
     1ea:	4e03      	ldr	r6, [pc, #12]	; (1f8 <usart_serial_putchar+0x14>)
     1ec:	0021      	movs	r1, r4
     1ee:	0028      	movs	r0, r5
     1f0:	47b0      	blx	r6
     1f2:	2800      	cmp	r0, #0
     1f4:	d1fa      	bne.n	1ec <usart_serial_putchar+0x8>
}
     1f6:	bd70      	pop	{r4, r5, r6, pc}
     1f8:	0000268d 	.word	0x0000268d

000001fc <configure_console>:
}
/**
 *  Configure UART console.
 */
static void configure_console(uint32_t baud)
{
     1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fe:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     200:	2380      	movs	r3, #128	; 0x80
     202:	05db      	lsls	r3, r3, #23
     204:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     206:	2300      	movs	r3, #0
     208:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     20a:	22ff      	movs	r2, #255	; 0xff
     20c:	4669      	mov	r1, sp
     20e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     210:	2200      	movs	r2, #0
     212:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     214:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     216:	2501      	movs	r5, #1
     218:	2124      	movs	r1, #36	; 0x24
     21a:	466c      	mov	r4, sp
     21c:	5465      	strb	r5, [r4, r1]
	config->transmitter_enable = true;
     21e:	3101      	adds	r1, #1
     220:	5465      	strb	r5, [r4, r1]
	config->clock_polarity_inverted = false;
     222:	3101      	adds	r1, #1
     224:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     226:	3101      	adds	r1, #1
     228:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     22a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     22c:	3105      	adds	r1, #5
     22e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     230:	3101      	adds	r1, #1
     232:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     234:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     236:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     238:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     23a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     23c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     23e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
     240:	2313      	movs	r3, #19
     242:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     244:	7762      	strb	r2, [r4, #29]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     246:	23c4      	movs	r3, #196	; 0xc4
     248:	039b      	lsls	r3, r3, #14
     24a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     24c:	2301      	movs	r3, #1
     24e:	425b      	negs	r3, r3
     250:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     252:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     254:	4b22      	ldr	r3, [pc, #136]	; (2e0 <configure_console+0xe4>)
     256:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     258:	4b22      	ldr	r3, [pc, #136]	; (2e4 <configure_console+0xe8>)
     25a:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = baud;
     25c:	9008      	str	r0, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     25e:	4c22      	ldr	r4, [pc, #136]	; (2e8 <configure_console+0xec>)
     260:	4b22      	ldr	r3, [pc, #136]	; (2ec <configure_console+0xf0>)
     262:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     264:	4a22      	ldr	r2, [pc, #136]	; (2f0 <configure_console+0xf4>)
     266:	4b23      	ldr	r3, [pc, #140]	; (2f4 <configure_console+0xf8>)
     268:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     26a:	4a23      	ldr	r2, [pc, #140]	; (2f8 <configure_console+0xfc>)
     26c:	4b23      	ldr	r3, [pc, #140]	; (2fc <configure_console+0x100>)
     26e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     270:	466a      	mov	r2, sp
     272:	4923      	ldr	r1, [pc, #140]	; (300 <configure_console+0x104>)
     274:	0020      	movs	r0, r4
     276:	4b23      	ldr	r3, [pc, #140]	; (304 <configure_console+0x108>)
     278:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     27a:	4f23      	ldr	r7, [pc, #140]	; (308 <configure_console+0x10c>)
     27c:	683b      	ldr	r3, [r7, #0]
     27e:	6898      	ldr	r0, [r3, #8]
     280:	2100      	movs	r1, #0
     282:	4e22      	ldr	r6, [pc, #136]	; (30c <configure_console+0x110>)
     284:	47b0      	blx	r6
	setbuf(stdin, NULL);
     286:	683b      	ldr	r3, [r7, #0]
     288:	6858      	ldr	r0, [r3, #4]
     28a:	2100      	movs	r1, #0
     28c:	47b0      	blx	r6
	//usart_conf.sample_rate = USART_SAMPLE_RATE_16X_FRACTIONAL;
	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
	usart_register_callback(&cdc_uart_module,usart_rx_complete_handler,USART_CALLBACK_BUFFER_RECEIVED);
     28e:	2201      	movs	r2, #1
     290:	491f      	ldr	r1, [pc, #124]	; (310 <configure_console+0x114>)
     292:	0020      	movs	r0, r4
     294:	4e1f      	ldr	r6, [pc, #124]	; (314 <configure_console+0x118>)
     296:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module,usart_tx_complete_handler,USART_CALLBACK_BUFFER_TRANSMITTED);
     298:	2200      	movs	r2, #0
     29a:	491f      	ldr	r1, [pc, #124]	; (318 <configure_console+0x11c>)
     29c:	0020      	movs	r0, r4
     29e:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     2a0:	2231      	movs	r2, #49	; 0x31
     2a2:	5ca3      	ldrb	r3, [r4, r2]
     2a4:	2103      	movs	r1, #3
     2a6:	430b      	orrs	r3, r1
     2a8:	54a3      	strb	r3, [r4, r2]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     2aa:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2ac:	0030      	movs	r0, r6
     2ae:	4b1b      	ldr	r3, [pc, #108]	; (31c <configure_console+0x120>)
     2b0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2b2:	231f      	movs	r3, #31
     2b4:	4018      	ands	r0, r3
     2b6:	4085      	lsls	r5, r0
     2b8:	4b19      	ldr	r3, [pc, #100]	; (320 <configure_console+0x124>)
     2ba:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     2bc:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     2be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     2c0:	2b00      	cmp	r3, #0
     2c2:	d1fc      	bne.n	2be <configure_console+0xc2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     2c4:	6833      	ldr	r3, [r6, #0]
     2c6:	2202      	movs	r2, #2
     2c8:	4313      	orrs	r3, r2
     2ca:	6033      	str	r3, [r6, #0]
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_TRANSMITTED);
	//usart_register_callback(&cdc_uart_module,usart_err_handler,USART_CALLBACK_ERROR);
	//usart_enable_callback(&cdc_uart_module,USART_CALLBACK_ERROR);
	usart_enable(&cdc_uart_module);
	schedule_rx_length = 1;
     2cc:	3a01      	subs	r2, #1
     2ce:	4b15      	ldr	r3, [pc, #84]	; (324 <configure_console+0x128>)
     2d0:	801a      	strh	r2, [r3, #0]
	usart_read_job(&cdc_uart_module,&usart_cmd_recv_buffer[0]);
     2d2:	4915      	ldr	r1, [pc, #84]	; (328 <configure_console+0x12c>)
     2d4:	4804      	ldr	r0, [pc, #16]	; (2e8 <configure_console+0xec>)
     2d6:	4b15      	ldr	r3, [pc, #84]	; (32c <configure_console+0x130>)
     2d8:	4798      	blx	r3
}
     2da:	b011      	add	sp, #68	; 0x44
     2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00180002 	.word	0x00180002
     2e4:	00190002 	.word	0x00190002
     2e8:	20000090 	.word	0x20000090
     2ec:	200005f4 	.word	0x200005f4
     2f0:	000001e5 	.word	0x000001e5
     2f4:	200005f0 	.word	0x200005f0
     2f8:	000001b9 	.word	0x000001b9
     2fc:	200005ec 	.word	0x200005ec
     300:	42001400 	.word	0x42001400
     304:	00002349 	.word	0x00002349
     308:	20000010 	.word	0x20000010
     30c:	00003659 	.word	0x00003659
     310:	00000111 	.word	0x00000111
     314:	00002757 	.word	0x00002757
     318:	00000155 	.word	0x00000155
     31c:	00001e99 	.word	0x00001e99
     320:	e000e100 	.word	0xe000e100
     324:	200000d0 	.word	0x200000d0
     328:	200000e8 	.word	0x200000e8
     32c:	000027a9 	.word	0x000027a9

00000330 <main>:
	return ret;
}


int main (void)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	46c6      	mov	lr, r8
     334:	b500      	push	{lr}
     336:	b084      	sub	sp, #16

	sint8 ret = 0;
	system_init();
     338:	4bd5      	ldr	r3, [pc, #852]	; (690 <main+0x360>)
     33a:	4798      	blx	r3
	/* Initialize the UART console. */
	configure_console(CONF_STDIO_BAUDRATE);
     33c:	20e1      	movs	r0, #225	; 0xe1
     33e:	0240      	lsls	r0, r0, #9
     340:	4bd4      	ldr	r3, [pc, #848]	; (694 <main+0x364>)
     342:	4798      	blx	r3
	/* Output example information */

	
	while(1)
	{
		nm_bsp_init();
     344:	4ed4      	ldr	r6, [pc, #848]	; (698 <main+0x368>)
			config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
			config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
			config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
			config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;

			extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     346:	4dd5      	ldr	r5, [pc, #852]	; (69c <main+0x36c>)
	ret = m2m_wifi_download_mode();
     348:	4cd5      	ldr	r4, [pc, #852]	; (6a0 <main+0x370>)
     34a:	e00b      	b.n	364 <main+0x34>
		M2M_ERR("Failed to put the WiFi Chip in download mode\n");
     34c:	22b6      	movs	r2, #182	; 0xb6
     34e:	0052      	lsls	r2, r2, #1
     350:	49d4      	ldr	r1, [pc, #848]	; (6a4 <main+0x374>)
     352:	48d5      	ldr	r0, [pc, #852]	; (6a8 <main+0x378>)
     354:	4bd5      	ldr	r3, [pc, #852]	; (6ac <main+0x37c>)
     356:	4798      	blx	r3
     358:	48d5      	ldr	r0, [pc, #852]	; (6b0 <main+0x380>)
     35a:	4bd6      	ldr	r3, [pc, #856]	; (6b4 <main+0x384>)
     35c:	4798      	blx	r3
     35e:	200d      	movs	r0, #13
     360:	4bd5      	ldr	r3, [pc, #852]	; (6b8 <main+0x388>)
     362:	4798      	blx	r3
		nm_bsp_init();
     364:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
     366:	a901      	add	r1, sp, #4
     368:	2300      	movs	r3, #0
     36a:	604b      	str	r3, [r1, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     36c:	2201      	movs	r2, #1
     36e:	720a      	strb	r2, [r1, #8]
	config->wake_if_sleeping    = true;
     370:	724a      	strb	r2, [r1, #9]
	config->filter_input_signal = false;
     372:	728b      	strb	r3, [r1, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     374:	3302      	adds	r3, #2
     376:	72cb      	strb	r3, [r1, #11]
			config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     378:	3327      	adds	r3, #39	; 0x27
     37a:	9301      	str	r3, [sp, #4]
			extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     37c:	2009      	movs	r0, #9
     37e:	47a8      	blx	r5
	ret = m2m_wifi_download_mode();
     380:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)
     382:	2800      	cmp	r0, #0
     384:	d1e2      	bne.n	34c <main+0x1c>
		if(usart_pkt_received) {
     386:	4ccd      	ldr	r4, [pc, #820]	; (6bc <main+0x38c>)
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
     388:	4bcd      	ldr	r3, [pc, #820]	; (6c0 <main+0x390>)
     38a:	1d1d      	adds	r5, r3, #4
     38c:	e1e3      	b.n	756 <main+0x426>
			usart_pkt_received = 0;
     38e:	2200      	movs	r2, #0
     390:	4bca      	ldr	r3, [pc, #808]	; (6bc <main+0x38c>)
     392:	701a      	strb	r2, [r3, #0]
switch(usart_prot_handler_status) {
     394:	4bcb      	ldr	r3, [pc, #812]	; (6c4 <main+0x394>)
     396:	781a      	ldrb	r2, [r3, #0]
     398:	2a04      	cmp	r2, #4
     39a:	d900      	bls.n	39e <main+0x6e>
     39c:	e125      	b.n	5ea <main+0x2ba>
     39e:	0093      	lsls	r3, r2, #2
     3a0:	4ac9      	ldr	r2, [pc, #804]	; (6c8 <main+0x398>)
     3a2:	58d3      	ldr	r3, [r2, r3]
     3a4:	469f      	mov	pc, r3
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
     3a6:	4bc9      	ldr	r3, [pc, #804]	; (6cc <main+0x39c>)
     3a8:	881b      	ldrh	r3, [r3, #0]
     3aa:	2b01      	cmp	r3, #1
     3ac:	d011      	beq.n	3d2 <main+0xa2>
			usart_cmd_recv_buffer[0] = 0xFF;
     3ae:	4bc4      	ldr	r3, [pc, #784]	; (6c0 <main+0x390>)
     3b0:	22ff      	movs	r2, #255	; 0xff
     3b2:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     3b4:	4ac6      	ldr	r2, [pc, #792]	; (6d0 <main+0x3a0>)
     3b6:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
     3b8:	2201      	movs	r2, #1
     3ba:	4bc4      	ldr	r3, [pc, #784]	; (6cc <main+0x39c>)
     3bc:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
     3be:	4bc5      	ldr	r3, [pc, #788]	; (6d4 <main+0x3a4>)
     3c0:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     3c2:	22ea      	movs	r2, #234	; 0xea
     3c4:	4bc4      	ldr	r3, [pc, #784]	; (6d8 <main+0x3a8>)
     3c6:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     3c8:	21ea      	movs	r1, #234	; 0xea
     3ca:	48c4      	ldr	r0, [pc, #784]	; (6dc <main+0x3ac>)
     3cc:	4bc4      	ldr	r3, [pc, #784]	; (6e0 <main+0x3b0>)
     3ce:	4798      	blx	r3
     3d0:	e1c5      	b.n	75e <main+0x42e>
			if((usart_pkt[0] == 0x12)) {
     3d2:	4bc4      	ldr	r3, [pc, #784]	; (6e4 <main+0x3b4>)
     3d4:	681b      	ldr	r3, [r3, #0]
     3d6:	7819      	ldrb	r1, [r3, #0]
     3d8:	2912      	cmp	r1, #18
     3da:	d00e      	beq.n	3fa <main+0xca>
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     3dc:	4ab8      	ldr	r2, [pc, #736]	; (6c0 <main+0x390>)
     3de:	4bbc      	ldr	r3, [pc, #752]	; (6d0 <main+0x3a0>)
     3e0:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     3e2:	2201      	movs	r2, #1
     3e4:	4bb9      	ldr	r3, [pc, #740]	; (6cc <main+0x39c>)
     3e6:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     3e8:	4bba      	ldr	r3, [pc, #744]	; (6d4 <main+0x3a4>)
     3ea:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = usart_pkt[0];
     3ec:	4bba      	ldr	r3, [pc, #744]	; (6d8 <main+0x3a8>)
     3ee:	7019      	strb	r1, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     3f0:	b289      	uxth	r1, r1
     3f2:	48ba      	ldr	r0, [pc, #744]	; (6dc <main+0x3ac>)
     3f4:	4bba      	ldr	r3, [pc, #744]	; (6e0 <main+0x3b0>)
     3f6:	4798      	blx	r3
     3f8:	e1b1      	b.n	75e <main+0x42e>
				usart_prot_handler_status = WAIT_SYNC;
     3fa:	2301      	movs	r3, #1
     3fc:	4ab1      	ldr	r2, [pc, #708]	; (6c4 <main+0x394>)
     3fe:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     400:	4aaf      	ldr	r2, [pc, #700]	; (6c0 <main+0x390>)
     402:	31ed      	adds	r1, #237	; 0xed
     404:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     406:	49b2      	ldr	r1, [pc, #712]	; (6d0 <main+0x3a0>)
     408:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
     40a:	4ab0      	ldr	r2, [pc, #704]	; (6cc <main+0x39c>)
     40c:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
     40e:	4bb1      	ldr	r3, [pc, #708]	; (6d4 <main+0x3a4>)
     410:	2201      	movs	r2, #1
     412:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5B;
     414:	225b      	movs	r2, #91	; 0x5b
     416:	4bb0      	ldr	r3, [pc, #704]	; (6d8 <main+0x3a8>)
     418:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     41a:	215b      	movs	r1, #91	; 0x5b
     41c:	48af      	ldr	r0, [pc, #700]	; (6dc <main+0x3ac>)
     41e:	4bb0      	ldr	r3, [pc, #704]	; (6e0 <main+0x3b0>)
     420:	4798      	blx	r3
     422:	e19c      	b.n	75e <main+0x42e>
			if(usart_pkt[0] == 0xA5) {
     424:	4baf      	ldr	r3, [pc, #700]	; (6e4 <main+0x3b4>)
     426:	681b      	ldr	r3, [r3, #0]
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	2ba5      	cmp	r3, #165	; 0xa5
     42c:	d017      	beq.n	45e <main+0x12e>
			else if(usart_pkt[0] == 0x12) {	//uart identification command
     42e:	2b12      	cmp	r3, #18
     430:	d023      	beq.n	47a <main+0x14a>
				if(!uart_reconfigure) {
     432:	4bad      	ldr	r3, [pc, #692]	; (6e8 <main+0x3b8>)
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d131      	bne.n	49e <main+0x16e>
					usart_tx_buffer[0] = 0x5A;
     43a:	225a      	movs	r2, #90	; 0x5a
     43c:	4ba6      	ldr	r3, [pc, #664]	; (6d8 <main+0x3a8>)
     43e:	701a      	strb	r2, [r3, #0]
					usart_cmd_recv_buffer[0] = 0xFF;
     440:	4b9f      	ldr	r3, [pc, #636]	; (6c0 <main+0x390>)
     442:	32a5      	adds	r2, #165	; 0xa5
     444:	801a      	strh	r2, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     446:	4aa2      	ldr	r2, [pc, #648]	; (6d0 <main+0x3a0>)
     448:	6013      	str	r3, [r2, #0]
					schedule_rx_length = 1;
     44a:	2201      	movs	r2, #1
     44c:	4b9f      	ldr	r3, [pc, #636]	; (6cc <main+0x39c>)
     44e:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     450:	4ba0      	ldr	r3, [pc, #640]	; (6d4 <main+0x3a4>)
     452:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     454:	215a      	movs	r1, #90	; 0x5a
     456:	48a1      	ldr	r0, [pc, #644]	; (6dc <main+0x3ac>)
     458:	4ba1      	ldr	r3, [pc, #644]	; (6e0 <main+0x3b0>)
     45a:	4798      	blx	r3
     45c:	e17f      	b.n	75e <main+0x42e>
				usart_prot_handler_status = WAITING;
     45e:	2202      	movs	r2, #2
     460:	4b98      	ldr	r3, [pc, #608]	; (6c4 <main+0x394>)
     462:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer_u8[4] = 0xFF;
     464:	23ff      	movs	r3, #255	; 0xff
     466:	4a96      	ldr	r2, [pc, #600]	; (6c0 <main+0x390>)
     468:	7113      	strb	r3, [r2, #4]
				schedule_rx_length = 1;
     46a:	2201      	movs	r2, #1
     46c:	4b97      	ldr	r3, [pc, #604]	; (6cc <main+0x39c>)
     46e:	801a      	strh	r2, [r3, #0]
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
     470:	0029      	movs	r1, r5
     472:	489a      	ldr	r0, [pc, #616]	; (6dc <main+0x3ac>)
     474:	4b9d      	ldr	r3, [pc, #628]	; (6ec <main+0x3bc>)
     476:	4798      	blx	r3
     478:	e171      	b.n	75e <main+0x42e>
				usart_tx_buffer[0] = 0x5B;
     47a:	225b      	movs	r2, #91	; 0x5b
     47c:	4b96      	ldr	r3, [pc, #600]	; (6d8 <main+0x3a8>)
     47e:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     480:	4b8f      	ldr	r3, [pc, #572]	; (6c0 <main+0x390>)
     482:	32a4      	adds	r2, #164	; 0xa4
     484:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     486:	4a92      	ldr	r2, [pc, #584]	; (6d0 <main+0x3a0>)
     488:	6013      	str	r3, [r2, #0]
				schedule_rx_length = 1;
     48a:	2201      	movs	r2, #1
     48c:	4b8f      	ldr	r3, [pc, #572]	; (6cc <main+0x39c>)
     48e:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     490:	4b90      	ldr	r3, [pc, #576]	; (6d4 <main+0x3a4>)
     492:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     494:	215b      	movs	r1, #91	; 0x5b
     496:	4891      	ldr	r0, [pc, #580]	; (6dc <main+0x3ac>)
     498:	4b91      	ldr	r3, [pc, #580]	; (6e0 <main+0x3b0>)
     49a:	4798      	blx	r3
     49c:	e15f      	b.n	75e <main+0x42e>
					schedule_rx_length = 1;
     49e:	2201      	movs	r2, #1
     4a0:	4b8a      	ldr	r3, [pc, #552]	; (6cc <main+0x39c>)
     4a2:	801a      	strh	r2, [r3, #0]
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
     4a4:	4986      	ldr	r1, [pc, #536]	; (6c0 <main+0x390>)
     4a6:	488d      	ldr	r0, [pc, #564]	; (6dc <main+0x3ac>)
     4a8:	4b90      	ldr	r3, [pc, #576]	; (6ec <main+0x3bc>)
     4aa:	4798      	blx	r3
     4ac:	e157      	b.n	75e <main+0x42e>
			usart_prot_handler_status = COLLECTING_HDR;
     4ae:	2203      	movs	r2, #3
     4b0:	4b84      	ldr	r3, [pc, #528]	; (6c4 <main+0x394>)
     4b2:	701a      	strb	r2, [r3, #0]
			uart_cmd_buf = usart_pkt;
     4b4:	4b8b      	ldr	r3, [pc, #556]	; (6e4 <main+0x3b4>)
     4b6:	681a      	ldr	r2, [r3, #0]
     4b8:	4b8d      	ldr	r3, [pc, #564]	; (6f0 <main+0x3c0>)
     4ba:	601a      	str	r2, [r3, #0]
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
     4bc:	220b      	movs	r2, #11
     4be:	4b83      	ldr	r3, [pc, #524]	; (6cc <main+0x39c>)
     4c0:	801a      	strh	r2, [r3, #0]
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
     4c2:	4886      	ldr	r0, [pc, #536]	; (6dc <main+0x3ac>)
     4c4:	6a41      	ldr	r1, [r0, #36]	; 0x24
     4c6:	4b8b      	ldr	r3, [pc, #556]	; (6f4 <main+0x3c4>)
     4c8:	4798      	blx	r3
     4ca:	e148      	b.n	75e <main+0x42e>
				checksum ^= *(((uint8_t *)uart_cmd_buf)+i);
     4cc:	4b88      	ldr	r3, [pc, #544]	; (6f0 <main+0x3c0>)
     4ce:	6819      	ldr	r1, [r3, #0]
     4d0:	000b      	movs	r3, r1
     4d2:	000f      	movs	r7, r1
     4d4:	370c      	adds	r7, #12
     4d6:	2000      	movs	r0, #0
     4d8:	e000      	b.n	4dc <main+0x1ac>
     4da:	0010      	movs	r0, r2
     4dc:	781e      	ldrb	r6, [r3, #0]
     4de:	0032      	movs	r2, r6
     4e0:	4042      	eors	r2, r0
     4e2:	b2d2      	uxtb	r2, r2
     4e4:	3301      	adds	r3, #1
			for(i=0;i<(USART_CMD_HDR_LENGTH);i++) {
     4e6:	42bb      	cmp	r3, r7
     4e8:	d1f7      	bne.n	4da <main+0x1aa>
			if(checksum != 0) {
     4ea:	4286      	cmp	r6, r0
     4ec:	d11a      	bne.n	524 <main+0x1f4>
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
     4ee:	4e82      	ldr	r6, [pc, #520]	; (6f8 <main+0x3c8>)
     4f0:	220c      	movs	r2, #12
     4f2:	0030      	movs	r0, r6
     4f4:	4b81      	ldr	r3, [pc, #516]	; (6fc <main+0x3cc>)
     4f6:	4798      	blx	r3
				if((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
     4f8:	6832      	ldr	r2, [r6, #0]
     4fa:	7833      	ldrb	r3, [r6, #0]
     4fc:	2b03      	cmp	r3, #3
     4fe:	d026      	beq.n	54e <main+0x21e>
				else if((uart_cmd.cmd & 0xFF) == WRITE_REG) {
     500:	2b01      	cmp	r3, #1
     502:	d03a      	beq.n	57a <main+0x24a>
					serial_command_pending = 1;
     504:	2301      	movs	r3, #1
     506:	4a7e      	ldr	r2, [pc, #504]	; (700 <main+0x3d0>)
     508:	7013      	strb	r3, [r2, #0]
					change_state = 1;
     50a:	4a7e      	ldr	r2, [pc, #504]	; (704 <main+0x3d4>)
     50c:	7013      	strb	r3, [r2, #0]
					new_state = PROCESSING;
     50e:	2205      	movs	r2, #5
     510:	4b7d      	ldr	r3, [pc, #500]	; (708 <main+0x3d8>)
     512:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     514:	32a7      	adds	r2, #167	; 0xa7
     516:	4b70      	ldr	r3, [pc, #448]	; (6d8 <main+0x3a8>)
     518:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     51a:	21ac      	movs	r1, #172	; 0xac
     51c:	486f      	ldr	r0, [pc, #444]	; (6dc <main+0x3ac>)
     51e:	4b70      	ldr	r3, [pc, #448]	; (6e0 <main+0x3b0>)
     520:	4798      	blx	r3
     522:	e11c      	b.n	75e <main+0x42e>
				usart_prot_handler_status = WAIT_SYNC;
     524:	2301      	movs	r3, #1
     526:	4a67      	ldr	r2, [pc, #412]	; (6c4 <main+0x394>)
     528:	7013      	strb	r3, [r2, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     52a:	4a65      	ldr	r2, [pc, #404]	; (6c0 <main+0x390>)
     52c:	21ff      	movs	r1, #255	; 0xff
     52e:	8011      	strh	r1, [r2, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     530:	4967      	ldr	r1, [pc, #412]	; (6d0 <main+0x3a0>)
     532:	600a      	str	r2, [r1, #0]
				schedule_rx_length = 1;
     534:	4a65      	ldr	r2, [pc, #404]	; (6cc <main+0x39c>)
     536:	8013      	strh	r3, [r2, #0]
				schedule_rx = 1;
     538:	4b66      	ldr	r3, [pc, #408]	; (6d4 <main+0x3a4>)
     53a:	2201      	movs	r2, #1
     53c:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5A;
     53e:	225a      	movs	r2, #90	; 0x5a
     540:	4b65      	ldr	r3, [pc, #404]	; (6d8 <main+0x3a8>)
     542:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     544:	215a      	movs	r1, #90	; 0x5a
     546:	4865      	ldr	r0, [pc, #404]	; (6dc <main+0x3ac>)
     548:	4b65      	ldr	r3, [pc, #404]	; (6e0 <main+0x3b0>)
     54a:	4798      	blx	r3
     54c:	e107      	b.n	75e <main+0x42e>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
     54e:	2104      	movs	r1, #4
     550:	4b5c      	ldr	r3, [pc, #368]	; (6c4 <main+0x394>)
     552:	7019      	strb	r1, [r3, #0]
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
     554:	0c12      	lsrs	r2, r2, #16
     556:	4b6d      	ldr	r3, [pc, #436]	; (70c <main+0x3dc>)
     558:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     55a:	3903      	subs	r1, #3
     55c:	4b5d      	ldr	r3, [pc, #372]	; (6d4 <main+0x3a4>)
     55e:	7019      	strb	r1, [r3, #0]
					schedule_rx_buffer = &usart_payload_buffer[0];
     560:	496b      	ldr	r1, [pc, #428]	; (710 <main+0x3e0>)
     562:	4b5b      	ldr	r3, [pc, #364]	; (6d0 <main+0x3a0>)
     564:	6019      	str	r1, [r3, #0]
					schedule_rx_length = payload_length;
     566:	4b59      	ldr	r3, [pc, #356]	; (6cc <main+0x39c>)
     568:	801a      	strh	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     56a:	22ac      	movs	r2, #172	; 0xac
     56c:	4b5a      	ldr	r3, [pc, #360]	; (6d8 <main+0x3a8>)
     56e:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     570:	21ac      	movs	r1, #172	; 0xac
     572:	485a      	ldr	r0, [pc, #360]	; (6dc <main+0x3ac>)
     574:	4b5a      	ldr	r3, [pc, #360]	; (6e0 <main+0x3b0>)
     576:	4798      	blx	r3
     578:	e0f1      	b.n	75e <main+0x42e>
					serial_command_pending = 1;
     57a:	2201      	movs	r2, #1
     57c:	4b60      	ldr	r3, [pc, #384]	; (700 <main+0x3d0>)
     57e:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = PROCESSING;
     580:	3204      	adds	r2, #4
     582:	4b50      	ldr	r3, [pc, #320]	; (6c4 <main+0x394>)
     584:	701a      	strb	r2, [r3, #0]
		if(usart_err_on_reception) {
     586:	4b63      	ldr	r3, [pc, #396]	; (714 <main+0x3e4>)
     588:	781b      	ldrb	r3, [r3, #0]
     58a:	2b00      	cmp	r3, #0
     58c:	d100      	bne.n	590 <main+0x260>
     58e:	e0f3      	b.n	778 <main+0x448>
			usart_err_on_reception = 0;
     590:	2200      	movs	r2, #0
     592:	4b60      	ldr	r3, [pc, #384]	; (714 <main+0x3e4>)
     594:	701a      	strb	r2, [r3, #0]
switch(usart_prot_handler_status) {
     596:	4b4b      	ldr	r3, [pc, #300]	; (6c4 <main+0x394>)
     598:	781a      	ldrb	r2, [r3, #0]
     59a:	2a04      	cmp	r2, #4
     59c:	d874      	bhi.n	688 <main+0x358>
     59e:	0093      	lsls	r3, r2, #2
     5a0:	4a5d      	ldr	r2, [pc, #372]	; (718 <main+0x3e8>)
     5a2:	58d3      	ldr	r3, [r2, r3]
     5a4:	469f      	mov	pc, r3
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
     5a6:	4b49      	ldr	r3, [pc, #292]	; (6cc <main+0x39c>)
     5a8:	881a      	ldrh	r2, [r3, #0]
     5aa:	4b58      	ldr	r3, [pc, #352]	; (70c <main+0x3dc>)
     5ac:	881b      	ldrh	r3, [r3, #0]
     5ae:	429a      	cmp	r2, r3
     5b0:	d014      	beq.n	5dc <main+0x2ac>
			usart_prot_handler_status = WAIT_SYNC;
     5b2:	2201      	movs	r2, #1
     5b4:	4b43      	ldr	r3, [pc, #268]	; (6c4 <main+0x394>)
     5b6:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0x5A;
     5b8:	215a      	movs	r1, #90	; 0x5a
     5ba:	4b47      	ldr	r3, [pc, #284]	; (6d8 <main+0x3a8>)
     5bc:	7019      	strb	r1, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     5be:	4b40      	ldr	r3, [pc, #256]	; (6c0 <main+0x390>)
     5c0:	31a5      	adds	r1, #165	; 0xa5
     5c2:	8019      	strh	r1, [r3, #0]
			schedule_rx_length = 1;
     5c4:	4941      	ldr	r1, [pc, #260]	; (6cc <main+0x39c>)
     5c6:	800a      	strh	r2, [r1, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     5c8:	4a41      	ldr	r2, [pc, #260]	; (6d0 <main+0x3a0>)
     5ca:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
     5cc:	4b41      	ldr	r3, [pc, #260]	; (6d4 <main+0x3a4>)
     5ce:	2201      	movs	r2, #1
     5d0:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     5d2:	215a      	movs	r1, #90	; 0x5a
     5d4:	4841      	ldr	r0, [pc, #260]	; (6dc <main+0x3ac>)
     5d6:	4b42      	ldr	r3, [pc, #264]	; (6e0 <main+0x3b0>)
     5d8:	4798      	blx	r3
     5da:	e0c0      	b.n	75e <main+0x42e>
			serial_command_pending = 1;
     5dc:	2201      	movs	r2, #1
     5de:	4b48      	ldr	r3, [pc, #288]	; (700 <main+0x3d0>)
     5e0:	701a      	strb	r2, [r3, #0]
			usart_prot_handler_status = PROCESSING;
     5e2:	3204      	adds	r2, #4
     5e4:	4b37      	ldr	r3, [pc, #220]	; (6c4 <main+0x394>)
     5e6:	701a      	strb	r2, [r3, #0]
     5e8:	e7cd      	b.n	586 <main+0x256>
		usart_prot_handler_status = WAIT_SYNC;		
     5ea:	2201      	movs	r2, #1
     5ec:	4b35      	ldr	r3, [pc, #212]	; (6c4 <main+0x394>)
     5ee:	701a      	strb	r2, [r3, #0]
     5f0:	e0b5      	b.n	75e <main+0x42e>
			usart_cmd_recv_buffer[0] = 0xFF;
     5f2:	4b33      	ldr	r3, [pc, #204]	; (6c0 <main+0x390>)
     5f4:	22ff      	movs	r2, #255	; 0xff
     5f6:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     5f8:	4a35      	ldr	r2, [pc, #212]	; (6d0 <main+0x3a0>)
     5fa:	6013      	str	r3, [r2, #0]
			schedule_rx_length = 1;
     5fc:	2201      	movs	r2, #1
     5fe:	4b33      	ldr	r3, [pc, #204]	; (6cc <main+0x39c>)
     600:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
     602:	4b34      	ldr	r3, [pc, #208]	; (6d4 <main+0x3a4>)
     604:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     606:	22ea      	movs	r2, #234	; 0xea
     608:	4b33      	ldr	r3, [pc, #204]	; (6d8 <main+0x3a8>)
     60a:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     60c:	21ea      	movs	r1, #234	; 0xea
     60e:	4833      	ldr	r0, [pc, #204]	; (6dc <main+0x3ac>)
     610:	4b33      	ldr	r3, [pc, #204]	; (6e0 <main+0x3b0>)
     612:	4798      	blx	r3
     614:	e0a8      	b.n	768 <main+0x438>
			usart_prot_handler_status = WAIT_SYNC;
     616:	2301      	movs	r3, #1
     618:	4a2a      	ldr	r2, [pc, #168]	; (6c4 <main+0x394>)
     61a:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     61c:	4928      	ldr	r1, [pc, #160]	; (6c0 <main+0x390>)
     61e:	4a2c      	ldr	r2, [pc, #176]	; (6d0 <main+0x3a0>)
     620:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
     622:	4a2c      	ldr	r2, [pc, #176]	; (6d4 <main+0x3a4>)
     624:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
     626:	4a29      	ldr	r2, [pc, #164]	; (6cc <main+0x39c>)
     628:	8013      	strh	r3, [r2, #0]
			usart_tx_buffer[0] = 0xEA;
     62a:	22ea      	movs	r2, #234	; 0xea
     62c:	4b2a      	ldr	r3, [pc, #168]	; (6d8 <main+0x3a8>)
     62e:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     630:	21ea      	movs	r1, #234	; 0xea
     632:	482a      	ldr	r0, [pc, #168]	; (6dc <main+0x3ac>)
     634:	4b2a      	ldr	r3, [pc, #168]	; (6e0 <main+0x3b0>)
     636:	4798      	blx	r3
     638:	e096      	b.n	768 <main+0x438>
			usart_prot_handler_status = WAIT_SYNC;
     63a:	2301      	movs	r3, #1
     63c:	4a21      	ldr	r2, [pc, #132]	; (6c4 <main+0x394>)
     63e:	7013      	strb	r3, [r2, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     640:	491f      	ldr	r1, [pc, #124]	; (6c0 <main+0x390>)
     642:	4a23      	ldr	r2, [pc, #140]	; (6d0 <main+0x3a0>)
     644:	6011      	str	r1, [r2, #0]
			schedule_rx = 1;
     646:	4a23      	ldr	r2, [pc, #140]	; (6d4 <main+0x3a4>)
     648:	7013      	strb	r3, [r2, #0]
			schedule_rx_length = 1;
     64a:	4a20      	ldr	r2, [pc, #128]	; (6cc <main+0x39c>)
     64c:	8013      	strh	r3, [r2, #0]
			usart_tx_buffer[0] = 0xEA;
     64e:	22ea      	movs	r2, #234	; 0xea
     650:	4b21      	ldr	r3, [pc, #132]	; (6d8 <main+0x3a8>)
     652:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     654:	21ea      	movs	r1, #234	; 0xea
     656:	4821      	ldr	r0, [pc, #132]	; (6dc <main+0x3ac>)
     658:	4b21      	ldr	r3, [pc, #132]	; (6e0 <main+0x3b0>)
     65a:	4798      	blx	r3
     65c:	e084      	b.n	768 <main+0x438>
			usart_prot_handler_status = WAIT_SYNC;
     65e:	2201      	movs	r2, #1
     660:	4b18      	ldr	r3, [pc, #96]	; (6c4 <main+0x394>)
     662:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     664:	21ea      	movs	r1, #234	; 0xea
     666:	4b1c      	ldr	r3, [pc, #112]	; (6d8 <main+0x3a8>)
     668:	7019      	strb	r1, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     66a:	4b15      	ldr	r3, [pc, #84]	; (6c0 <main+0x390>)
     66c:	3115      	adds	r1, #21
     66e:	8019      	strh	r1, [r3, #0]
			schedule_rx_length = 1;
     670:	4916      	ldr	r1, [pc, #88]	; (6cc <main+0x39c>)
     672:	800a      	strh	r2, [r1, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     674:	4a16      	ldr	r2, [pc, #88]	; (6d0 <main+0x3a0>)
     676:	6013      	str	r3, [r2, #0]
			schedule_rx = 1;
     678:	4b16      	ldr	r3, [pc, #88]	; (6d4 <main+0x3a4>)
     67a:	2201      	movs	r2, #1
     67c:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     67e:	21ea      	movs	r1, #234	; 0xea
     680:	4816      	ldr	r0, [pc, #88]	; (6dc <main+0x3ac>)
     682:	4b17      	ldr	r3, [pc, #92]	; (6e0 <main+0x3b0>)
     684:	4798      	blx	r3
     686:	e06f      	b.n	768 <main+0x438>
		usart_prot_handler_status = WAIT_SYNC;		
     688:	2201      	movs	r2, #1
     68a:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <main+0x394>)
     68c:	701a      	strb	r2, [r3, #0]
     68e:	e062      	b.n	756 <main+0x426>
     690:	000030c1 	.word	0x000030c1
     694:	000001fd 	.word	0x000001fd
     698:	00000925 	.word	0x00000925
     69c:	00001975 	.word	0x00001975
     6a0:	00000bb5 	.word	0x00000bb5
     6a4:	000046bc 	.word	0x000046bc
     6a8:	000046dc 	.word	0x000046dc
     6ac:	00003529 	.word	0x00003529
     6b0:	000046f0 	.word	0x000046f0
     6b4:	00003645 	.word	0x00003645
     6b8:	0000355d 	.word	0x0000355d
     6bc:	20000500 	.word	0x20000500
     6c0:	200000e8 	.word	0x200000e8
     6c4:	20000501 	.word	0x20000501
     6c8:	00004668 	.word	0x00004668
     6cc:	200000d0 	.word	0x200000d0
     6d0:	200000cc 	.word	0x200000cc
     6d4:	200000c8 	.word	0x200000c8
     6d8:	20000504 	.word	0x20000504
     6dc:	20000090 	.word	0x20000090
     6e0:	0000276f 	.word	0x0000276f
     6e4:	200004fc 	.word	0x200004fc
     6e8:	200000e4 	.word	0x200000e4
     6ec:	000027a9 	.word	0x000027a9
     6f0:	200000e0 	.word	0x200000e0
     6f4:	000027fd 	.word	0x000027fd
     6f8:	200000d4 	.word	0x200000d4
     6fc:	00003505 	.word	0x00003505
     700:	200000d2 	.word	0x200000d2
     704:	200000c4 	.word	0x200000c4
     708:	200000c5 	.word	0x200000c5
     70c:	200000c6 	.word	0x200000c6
     710:	200000fc 	.word	0x200000fc
     714:	200000f8 	.word	0x200000f8
     718:	0000467c 	.word	0x0000467c
					temp = nm_read_reg(uart_cmd.addr);
     71c:	4b59      	ldr	r3, [pc, #356]	; (884 <main+0x554>)
     71e:	6858      	ldr	r0, [r3, #4]
     720:	4b59      	ldr	r3, [pc, #356]	; (888 <main+0x558>)
     722:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     724:	4a59      	ldr	r2, [pc, #356]	; (88c <main+0x55c>)
     726:	4b5a      	ldr	r3, [pc, #360]	; (890 <main+0x560>)
     728:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     72a:	2201      	movs	r2, #1
     72c:	4b59      	ldr	r3, [pc, #356]	; (894 <main+0x564>)
     72e:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     730:	4b59      	ldr	r3, [pc, #356]	; (898 <main+0x568>)
     732:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     734:	4b59      	ldr	r3, [pc, #356]	; (89c <main+0x56c>)
     736:	701a      	strb	r2, [r3, #0]
		tx_data[i] = tx_data[j];
     738:	4959      	ldr	r1, [pc, #356]	; (8a0 <main+0x570>)
					usart_tx_buffer[3] = (uint8)(temp >> 24);
     73a:	0e03      	lsrs	r3, r0, #24
     73c:	700b      	strb	r3, [r1, #0]
					usart_tx_buffer[0] = (uint8)(temp >> 0);
     73e:	70c8      	strb	r0, [r1, #3]
					usart_tx_buffer[2] = (uint8)(temp >> 16);
     740:	0c03      	lsrs	r3, r0, #16
     742:	704b      	strb	r3, [r1, #1]
					usart_tx_buffer[1] = (uint8)(temp >> 8);
     744:	0a00      	lsrs	r0, r0, #8
     746:	7088      	strb	r0, [r1, #2]
	usart_write_buffer_job(module,tx_data,length);
     748:	2204      	movs	r2, #4
     74a:	4856      	ldr	r0, [pc, #344]	; (8a4 <main+0x574>)
     74c:	4b56      	ldr	r3, [pc, #344]	; (8a8 <main+0x578>)
     74e:	4798      	blx	r3
			serial_command_pending = 0;
     750:	2200      	movs	r2, #0
     752:	4b56      	ldr	r3, [pc, #344]	; (8ac <main+0x57c>)
     754:	701a      	strb	r2, [r3, #0]
		if(usart_pkt_received) {
     756:	7823      	ldrb	r3, [r4, #0]
     758:	2b00      	cmp	r3, #0
     75a:	d000      	beq.n	75e <main+0x42e>
     75c:	e617      	b.n	38e <main+0x5e>
		if(usart_err_on_reception) {
     75e:	4b54      	ldr	r3, [pc, #336]	; (8b0 <main+0x580>)
     760:	781b      	ldrb	r3, [r3, #0]
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <main+0x438>
     766:	e713      	b.n	590 <main+0x260>
		if(serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
     768:	4b50      	ldr	r3, [pc, #320]	; (8ac <main+0x57c>)
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2b00      	cmp	r3, #0
     76e:	d0f2      	beq.n	756 <main+0x426>
     770:	4b4a      	ldr	r3, [pc, #296]	; (89c <main+0x56c>)
     772:	781b      	ldrb	r3, [r3, #0]
     774:	2b05      	cmp	r3, #5
     776:	d1ee      	bne.n	756 <main+0x426>
			switch((uart_cmd.cmd) & 0xFF) {
     778:	4b42      	ldr	r3, [pc, #264]	; (884 <main+0x554>)
     77a:	681a      	ldr	r2, [r3, #0]
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	2b0a      	cmp	r3, #10
     780:	d8e6      	bhi.n	750 <main+0x420>
     782:	009b      	lsls	r3, r3, #2
     784:	494b      	ldr	r1, [pc, #300]	; (8b4 <main+0x584>)
     786:	58cb      	ldr	r3, [r1, r3]
     788:	469f      	mov	pc, r3
					nm_write_reg(uart_cmd.addr,uart_cmd.val);
     78a:	4b3e      	ldr	r3, [pc, #248]	; (884 <main+0x554>)
     78c:	6899      	ldr	r1, [r3, #8]
     78e:	6858      	ldr	r0, [r3, #4]
     790:	4b49      	ldr	r3, [pc, #292]	; (8b8 <main+0x588>)
     792:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     794:	4a3d      	ldr	r2, [pc, #244]	; (88c <main+0x55c>)
     796:	4b3e      	ldr	r3, [pc, #248]	; (890 <main+0x560>)
     798:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     79a:	2201      	movs	r2, #1
     79c:	4b3d      	ldr	r3, [pc, #244]	; (894 <main+0x564>)
     79e:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     7a0:	4b3d      	ldr	r3, [pc, #244]	; (898 <main+0x568>)
     7a2:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     7a4:	22ac      	movs	r2, #172	; 0xac
     7a6:	4b3e      	ldr	r3, [pc, #248]	; (8a0 <main+0x570>)
     7a8:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     7aa:	4b3c      	ldr	r3, [pc, #240]	; (89c <main+0x56c>)
     7ac:	2201      	movs	r2, #1
     7ae:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     7b0:	21ac      	movs	r1, #172	; 0xac
     7b2:	483c      	ldr	r0, [pc, #240]	; (8a4 <main+0x574>)
     7b4:	4b41      	ldr	r3, [pc, #260]	; (8bc <main+0x58c>)
     7b6:	4798      	blx	r3
     7b8:	e7ca      	b.n	750 <main+0x420>
					nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     7ba:	0c12      	lsrs	r2, r2, #16
     7bc:	4e40      	ldr	r6, [pc, #256]	; (8c0 <main+0x590>)
     7be:	4f31      	ldr	r7, [pc, #196]	; (884 <main+0x554>)
     7c0:	0031      	movs	r1, r6
     7c2:	6878      	ldr	r0, [r7, #4]
     7c4:	4b3f      	ldr	r3, [pc, #252]	; (8c4 <main+0x594>)
     7c6:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     7c8:	4a30      	ldr	r2, [pc, #192]	; (88c <main+0x55c>)
     7ca:	4b31      	ldr	r3, [pc, #196]	; (890 <main+0x560>)
     7cc:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     7ce:	2201      	movs	r2, #1
     7d0:	4b30      	ldr	r3, [pc, #192]	; (894 <main+0x564>)
     7d2:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     7d4:	4b30      	ldr	r3, [pc, #192]	; (898 <main+0x568>)
     7d6:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     7d8:	4b30      	ldr	r3, [pc, #192]	; (89c <main+0x56c>)
     7da:	701a      	strb	r2, [r3, #0]
					usart_write_buffer_job(&cdc_uart_module, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     7dc:	887a      	ldrh	r2, [r7, #2]
     7de:	0031      	movs	r1, r6
     7e0:	4830      	ldr	r0, [pc, #192]	; (8a4 <main+0x574>)
     7e2:	4b31      	ldr	r3, [pc, #196]	; (8a8 <main+0x578>)
     7e4:	4798      	blx	r3
     7e6:	e7b3      	b.n	750 <main+0x420>
					nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     7e8:	0c12      	lsrs	r2, r2, #16
     7ea:	4b26      	ldr	r3, [pc, #152]	; (884 <main+0x554>)
     7ec:	6858      	ldr	r0, [r3, #4]
     7ee:	4934      	ldr	r1, [pc, #208]	; (8c0 <main+0x590>)
     7f0:	4b35      	ldr	r3, [pc, #212]	; (8c8 <main+0x598>)
     7f2:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     7f4:	4a25      	ldr	r2, [pc, #148]	; (88c <main+0x55c>)
     7f6:	4b26      	ldr	r3, [pc, #152]	; (890 <main+0x560>)
     7f8:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     7fa:	2201      	movs	r2, #1
     7fc:	4b25      	ldr	r3, [pc, #148]	; (894 <main+0x564>)
     7fe:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     800:	4b25      	ldr	r3, [pc, #148]	; (898 <main+0x568>)
     802:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     804:	22ac      	movs	r2, #172	; 0xac
     806:	4b26      	ldr	r3, [pc, #152]	; (8a0 <main+0x570>)
     808:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     80a:	4b24      	ldr	r3, [pc, #144]	; (89c <main+0x56c>)
     80c:	2201      	movs	r2, #1
     80e:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     810:	21ac      	movs	r1, #172	; 0xac
     812:	4824      	ldr	r0, [pc, #144]	; (8a4 <main+0x574>)
     814:	4b29      	ldr	r3, [pc, #164]	; (8bc <main+0x58c>)
     816:	4798      	blx	r3
     818:	e79a      	b.n	750 <main+0x420>
					usart_prot_handler_status = WAIT_SYNC;
     81a:	2601      	movs	r6, #1
     81c:	4b1f      	ldr	r3, [pc, #124]	; (89c <main+0x56c>)
     81e:	701e      	strb	r6, [r3, #0]
					uart_reconfigure = 1;
     820:	4b2a      	ldr	r3, [pc, #168]	; (8cc <main+0x59c>)
     822:	701e      	strb	r6, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     824:	4b1f      	ldr	r3, [pc, #124]	; (8a4 <main+0x574>)
     826:	4698      	mov	r8, r3
     828:	681f      	ldr	r7, [r3, #0]

	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     82a:	0038      	movs	r0, r7
     82c:	4b28      	ldr	r3, [pc, #160]	; (8d0 <main+0x5a0>)
     82e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     830:	231f      	movs	r3, #31
     832:	4018      	ands	r0, r3
     834:	4086      	lsls	r6, r0
     836:	3361      	adds	r3, #97	; 0x61
     838:	4a26      	ldr	r2, [pc, #152]	; (8d4 <main+0x5a4>)
     83a:	50d6      	str	r6, [r2, r3]
	SercomUsart *const usart_hw = &(module->hw->USART);
     83c:	4643      	mov	r3, r8
     83e:	681a      	ldr	r2, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
     840:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     842:	2b00      	cmp	r3, #0
     844:	d1fc      	bne.n	840 <main+0x510>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     846:	683b      	ldr	r3, [r7, #0]
     848:	2202      	movs	r2, #2
     84a:	4393      	bics	r3, r2
     84c:	603b      	str	r3, [r7, #0]
					configure_console(uart_cmd.val);
     84e:	4b0d      	ldr	r3, [pc, #52]	; (884 <main+0x554>)
     850:	6898      	ldr	r0, [r3, #8]
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <main+0x5a8>)
     854:	4798      	blx	r3
     856:	e77b      	b.n	750 <main+0x420>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     858:	4b20      	ldr	r3, [pc, #128]	; (8dc <main+0x5ac>)
     85a:	6a19      	ldr	r1, [r3, #32]
     85c:	0589      	lsls	r1, r1, #22
     85e:	0fc9      	lsrs	r1, r1, #31
					usart_tx_buffer[0] = port_pin_get_input_level(PIN_PB09);
     860:	4b0f      	ldr	r3, [pc, #60]	; (8a0 <main+0x570>)
     862:	7019      	strb	r1, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     864:	4a09      	ldr	r2, [pc, #36]	; (88c <main+0x55c>)
     866:	4b0a      	ldr	r3, [pc, #40]	; (890 <main+0x560>)
     868:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     86a:	4b0a      	ldr	r3, [pc, #40]	; (894 <main+0x564>)
     86c:	2201      	movs	r2, #1
     86e:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     870:	4b09      	ldr	r3, [pc, #36]	; (898 <main+0x568>)
     872:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     874:	4b09      	ldr	r3, [pc, #36]	; (89c <main+0x56c>)
     876:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     878:	b289      	uxth	r1, r1
     87a:	480a      	ldr	r0, [pc, #40]	; (8a4 <main+0x574>)
     87c:	4b0f      	ldr	r3, [pc, #60]	; (8bc <main+0x58c>)
     87e:	4798      	blx	r3
     880:	e766      	b.n	750 <main+0x420>
     882:	46c0      	nop			; (mov r8, r8)
     884:	200000d4 	.word	0x200000d4
     888:	00000cfd 	.word	0x00000cfd
     88c:	200000e8 	.word	0x200000e8
     890:	200000cc 	.word	0x200000cc
     894:	200000d0 	.word	0x200000d0
     898:	200000c8 	.word	0x200000c8
     89c:	20000501 	.word	0x20000501
     8a0:	20000504 	.word	0x20000504
     8a4:	20000090 	.word	0x20000090
     8a8:	000027c9 	.word	0x000027c9
     8ac:	200000d2 	.word	0x200000d2
     8b0:	200000f8 	.word	0x200000f8
     8b4:	00004690 	.word	0x00004690
     8b8:	00000d15 	.word	0x00000d15
     8bc:	0000276f 	.word	0x0000276f
     8c0:	200000fc 	.word	0x200000fc
     8c4:	00000d21 	.word	0x00000d21
     8c8:	00000d89 	.word	0x00000d89
     8cc:	200000e4 	.word	0x200000e4
     8d0:	00001e99 	.word	0x00001e99
     8d4:	e000e100 	.word	0xe000e100
     8d8:	000001fd 	.word	0x000001fd
     8dc:	41004480 	.word	0x41004480

000008e0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     8e0:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     8e2:	1e44      	subs	r4, r0, #1
     8e4:	2800      	cmp	r0, #0
     8e6:	d004      	beq.n	8f2 <nm_bsp_sleep+0x12>
		delay_ms(1);
     8e8:	4d02      	ldr	r5, [pc, #8]	; (8f4 <nm_bsp_sleep+0x14>)
     8ea:	2001      	movs	r0, #1
     8ec:	47a8      	blx	r5
	while (u32TimeMsec--) {
     8ee:	3c01      	subs	r4, #1
     8f0:	d2fb      	bcs.n	8ea <nm_bsp_sleep+0xa>
	}
}
     8f2:	bd70      	pop	{r4, r5, r6, pc}
     8f4:	0000181d 	.word	0x0000181d

000008f8 <nm_bsp_reset>:
{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     8fa:	4c08      	ldr	r4, [pc, #32]	; (91c <nm_bsp_reset+0x24>)
     8fc:	2780      	movs	r7, #128	; 0x80
     8fe:	057f      	lsls	r7, r7, #21
     900:	6167      	str	r7, [r4, #20]
     902:	2680      	movs	r6, #128	; 0x80
     904:	0536      	lsls	r6, r6, #20
     906:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     908:	2064      	movs	r0, #100	; 0x64
     90a:	4d05      	ldr	r5, [pc, #20]	; (920 <nm_bsp_reset+0x28>)
     90c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     90e:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     910:	200a      	movs	r0, #10
     912:	47a8      	blx	r5
     914:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     916:	2064      	movs	r0, #100	; 0x64
     918:	47a8      	blx	r5
}
     91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     91c:	41004400 	.word	0x41004400
     920:	000008e1 	.word	0x000008e1

00000924 <nm_bsp_init>:
{
     924:	b570      	push	{r4, r5, r6, lr}
     926:	b082      	sub	sp, #8
	gpfIsr = NULL;
     928:	2300      	movs	r3, #0
     92a:	4a13      	ldr	r2, [pc, #76]	; (978 <nm_bsp_init+0x54>)
     92c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     92e:	ac01      	add	r4, sp, #4
     930:	2501      	movs	r5, #1
     932:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     934:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     936:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     938:	0021      	movs	r1, r4
     93a:	201b      	movs	r0, #27
     93c:	4e0f      	ldr	r6, [pc, #60]	; (97c <nm_bsp_init+0x58>)
     93e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     940:	0021      	movs	r1, r4
     942:	201c      	movs	r0, #28
     944:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     946:	0021      	movs	r1, r4
     948:	2028      	movs	r0, #40	; 0x28
     94a:	47b0      	blx	r6
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     94c:	4b0c      	ldr	r3, [pc, #48]	; (980 <nm_bsp_init+0x5c>)
     94e:	681b      	ldr	r3, [r3, #0]
     950:	421d      	tst	r5, r3
     952:	d003      	beq.n	95c <nm_bsp_init+0x38>
     954:	4b0a      	ldr	r3, [pc, #40]	; (980 <nm_bsp_init+0x5c>)
     956:	681b      	ldr	r3, [r3, #0]
     958:	079b      	lsls	r3, r3, #30
     95a:	d401      	bmi.n	960 <nm_bsp_init+0x3c>
	    delay_init();
     95c:	4b09      	ldr	r3, [pc, #36]	; (984 <nm_bsp_init+0x60>)
     95e:	4798      	blx	r3
	nm_bsp_reset();
     960:	4b09      	ldr	r3, [pc, #36]	; (988 <nm_bsp_init+0x64>)
     962:	4798      	blx	r3
	cpu_irq_enable();
     964:	2201      	movs	r2, #1
     966:	4b09      	ldr	r3, [pc, #36]	; (98c <nm_bsp_init+0x68>)
     968:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     96a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     96e:	b662      	cpsie	i
}
     970:	2000      	movs	r0, #0
     972:	b002      	add	sp, #8
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	20000514 	.word	0x20000514
     97c:	00001a41 	.word	0x00001a41
     980:	e000e010 	.word	0xe000e010
     984:	000017dd 	.word	0x000017dd
     988:	000008f9 	.word	0x000008f9
     98c:	2000000c 	.word	0x2000000c

00000990 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     990:	b510      	push	{r4, lr}
     992:	b090      	sub	sp, #64	; 0x40
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     994:	4c2b      	ldr	r4, [pc, #172]	; (a44 <nm_bus_init+0xb4>)
     996:	230e      	movs	r3, #14
     998:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     99a:	2300      	movs	r3, #0
     99c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     99e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     9a0:	a901      	add	r1, sp, #4
     9a2:	2201      	movs	r2, #1
     9a4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     9a6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     9a8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     9aa:	200e      	movs	r0, #14
     9ac:	4b26      	ldr	r3, [pc, #152]	; (a48 <nm_bus_init+0xb8>)
     9ae:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     9b0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9b6:	2900      	cmp	r1, #0
     9b8:	d104      	bne.n	9c4 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     9ba:	0953      	lsrs	r3, r2, #5
     9bc:	01db      	lsls	r3, r3, #7
     9be:	4923      	ldr	r1, [pc, #140]	; (a4c <nm_bus_init+0xbc>)
     9c0:	468c      	mov	ip, r1
     9c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9c4:	211f      	movs	r1, #31
     9c6:	4011      	ands	r1, r2
     9c8:	2201      	movs	r2, #1
     9ca:	0010      	movs	r0, r2
     9cc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     9ce:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     9d0:	ac02      	add	r4, sp, #8
     9d2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     9d4:	2300      	movs	r3, #0
     9d6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     9d8:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     9da:	21c0      	movs	r1, #192	; 0xc0
     9dc:	0389      	lsls	r1, r1, #14
     9de:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     9e0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     9e2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     9e4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     9e6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     9e8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     9ea:	3223      	adds	r2, #35	; 0x23
     9ec:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     9ee:	3a18      	subs	r2, #24
     9f0:	2100      	movs	r1, #0
     9f2:	a808      	add	r0, sp, #32
     9f4:	4b16      	ldr	r3, [pc, #88]	; (a50 <nm_bus_init+0xc0>)
     9f6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     9f8:	4b16      	ldr	r3, [pc, #88]	; (a54 <nm_bus_init+0xc4>)
     9fa:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     9fc:	4b16      	ldr	r3, [pc, #88]	; (a58 <nm_bus_init+0xc8>)
     9fe:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     a00:	2301      	movs	r3, #1
     a02:	425b      	negs	r3, r3
     a04:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     a06:	4b15      	ldr	r3, [pc, #84]	; (a5c <nm_bus_init+0xcc>)
     a08:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     a0a:	4b15      	ldr	r3, [pc, #84]	; (a60 <nm_bus_init+0xd0>)
     a0c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     a0e:	0022      	movs	r2, r4
     a10:	4914      	ldr	r1, [pc, #80]	; (a64 <nm_bus_init+0xd4>)
     a12:	4815      	ldr	r0, [pc, #84]	; (a68 <nm_bus_init+0xd8>)
     a14:	4b15      	ldr	r3, [pc, #84]	; (a6c <nm_bus_init+0xdc>)
     a16:	4798      	blx	r3
     a18:	2800      	cmp	r0, #0
     a1a:	d110      	bne.n	a3e <nm_bus_init+0xae>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a1c:	4b12      	ldr	r3, [pc, #72]	; (a68 <nm_bus_init+0xd8>)
     a1e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     a20:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     a22:	2b00      	cmp	r3, #0
     a24:	d1fc      	bne.n	a20 <nm_bus_init+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     a26:	6813      	ldr	r3, [r2, #0]
     a28:	2102      	movs	r1, #2
     a2a:	430b      	orrs	r3, r1
     a2c:	6013      	str	r3, [r2, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     a2e:	4b10      	ldr	r3, [pc, #64]	; (a70 <nm_bus_init+0xe0>)
     a30:	4798      	blx	r3
	nm_bsp_sleep(1);
     a32:	2001      	movs	r0, #1
     a34:	4b0f      	ldr	r3, [pc, #60]	; (a74 <nm_bus_init+0xe4>)
     a36:	4798      	blx	r3
#endif
	return result;
     a38:	2000      	movs	r0, #0
}
     a3a:	b010      	add	sp, #64	; 0x40
     a3c:	bd10      	pop	{r4, pc}
		return M2M_ERR_BUS_FAIL;
     a3e:	2006      	movs	r0, #6
     a40:	4240      	negs	r0, r0
     a42:	e7fa      	b.n	a3a <nm_bus_init+0xaa>
     a44:	20000568 	.word	0x20000568
     a48:	00001a41 	.word	0x00001a41
     a4c:	41004400 	.word	0x41004400
     a50:	00003517 	.word	0x00003517
     a54:	000c0002 	.word	0x000c0002
     a58:	000d0002 	.word	0x000d0002
     a5c:	000f0002 	.word	0x000f0002
     a60:	00989680 	.word	0x00989680
     a64:	42001000 	.word	0x42001000
     a68:	2000056c 	.word	0x2000056c
     a6c:	00001f29 	.word	0x00001f29
     a70:	000008f9 	.word	0x000008f9
     a74:	000008e1 	.word	0x000008e1

00000a78 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     a78:	b5f0      	push	{r4, r5, r6, r7, lr}
     a7a:	46de      	mov	lr, fp
     a7c:	4657      	mov	r7, sl
     a7e:	464e      	mov	r6, r9
     a80:	4645      	mov	r5, r8
     a82:	b5e0      	push	{r5, r6, r7, lr}
     a84:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
     a86:	2803      	cmp	r0, #3
     a88:	d000      	beq.n	a8c <nm_bus_ioctl+0x14>
     a8a:	e072      	b.n	b72 <nm_bus_ioctl+0xfa>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     a8c:	680e      	ldr	r6, [r1, #0]
     a8e:	684d      	ldr	r5, [r1, #4]
     a90:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     a92:	2200      	movs	r2, #0
     a94:	ab02      	add	r3, sp, #8
     a96:	71da      	strb	r2, [r3, #7]
	if (!pu8Mosi) {
     a98:	2e00      	cmp	r6, #0
     a9a:	d027      	beq.n	aec <nm_bus_ioctl+0x74>
	else if(!pu8Miso) {
     a9c:	2d00      	cmp	r5, #0
     a9e:	d165      	bne.n	b6c <nm_bus_ioctl+0xf4>
		u8SkipMiso = 1;
     aa0:	2301      	movs	r3, #1
     aa2:	4698      	mov	r8, r3
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     aa4:	2300      	movs	r3, #0
     aa6:	9301      	str	r3, [sp, #4]
		pu8Miso = &u8Dummy;
     aa8:	ab02      	add	r3, sp, #8
     aaa:	1ddd      	adds	r5, r3, #7
	spi_select_slave(&master, &slave_inst, true);
     aac:	2201      	movs	r2, #1
     aae:	4938      	ldr	r1, [pc, #224]	; (b90 <nm_bus_ioctl+0x118>)
     ab0:	4838      	ldr	r0, [pc, #224]	; (b94 <nm_bus_ioctl+0x11c>)
     ab2:	4b39      	ldr	r3, [pc, #228]	; (b98 <nm_bus_ioctl+0x120>)
     ab4:	4798      	blx	r3
	while (u16Sz) {
     ab6:	2c00      	cmp	r4, #0
     ab8:	d045      	beq.n	b46 <nm_bus_ioctl+0xce>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     aba:	4b36      	ldr	r3, [pc, #216]	; (b94 <nm_bus_ioctl+0x11c>)
     abc:	469b      	mov	fp, r3
		while (!spi_is_ready_to_write(&master))
     abe:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     ac0:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ac2:	469a      	mov	sl, r3
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ac4:	2304      	movs	r3, #4
     ac6:	469c      	mov	ip, r3
	enum status_code retval = STATUS_OK;
     ac8:	46a9      	mov	r9, r5
     aca:	0025      	movs	r5, r4
		txd_data = *pu8Mosi;
     acc:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     ace:	465b      	mov	r3, fp
     ad0:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ad2:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     ad4:	4239      	tst	r1, r7
     ad6:	d0fc      	beq.n	ad2 <nm_bus_ioctl+0x5a>
     ad8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     ada:	4239      	tst	r1, r7
     adc:	d0fc      	beq.n	ad8 <nm_bus_ioctl+0x60>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ade:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ae0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     ae2:	4211      	tst	r1, r2
     ae4:	d0fc      	beq.n	ae0 <nm_bus_ioctl+0x68>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ae6:	4651      	mov	r1, sl
     ae8:	798c      	ldrb	r4, [r1, #6]
     aea:	e00c      	b.n	b06 <nm_bus_ioctl+0x8e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     aec:	2300      	movs	r3, #0
     aee:	4698      	mov	r8, r3
		u8SkipMosi = 1;
     af0:	3301      	adds	r3, #1
     af2:	9301      	str	r3, [sp, #4]
		pu8Mosi = &u8Dummy;
     af4:	ab02      	add	r3, sp, #8
     af6:	1dde      	adds	r6, r3, #7
     af8:	e7d8      	b.n	aac <nm_bus_ioctl+0x34>
     afa:	2c01      	cmp	r4, #1
     afc:	d011      	beq.n	b22 <nm_bus_ioctl+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     afe:	6a99      	ldr	r1, [r3, #40]	; 0x28
     b00:	b2c9      	uxtb	r1, r1
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     b02:	2800      	cmp	r0, #0
     b04:	d011      	beq.n	b2a <nm_bus_ioctl+0xb2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b06:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     b08:	4211      	tst	r1, r2
     b0a:	d0fc      	beq.n	b06 <nm_bus_ioctl+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b0c:	8b59      	ldrh	r1, [r3, #26]
	enum status_code retval = STATUS_OK;
     b0e:	2000      	movs	r0, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b10:	4211      	tst	r1, r2
     b12:	d0f2      	beq.n	afa <nm_bus_ioctl+0x82>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     b14:	8b59      	ldrh	r1, [r3, #26]
     b16:	4660      	mov	r0, ip
     b18:	4301      	orrs	r1, r0
     b1a:	b289      	uxth	r1, r1
     b1c:	8359      	strh	r1, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     b1e:	201e      	movs	r0, #30
     b20:	e7eb      	b.n	afa <nm_bus_ioctl+0x82>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     b22:	6a99      	ldr	r1, [r3, #40]	; 0x28
     b24:	05c9      	lsls	r1, r1, #23
     b26:	0dc9      	lsrs	r1, r1, #23
     b28:	e7eb      	b.n	b02 <nm_bus_ioctl+0x8a>
		*pu8Miso = rxd_data;
     b2a:	464b      	mov	r3, r9
     b2c:	7019      	strb	r1, [r3, #0]
		u16Sz--;
     b2e:	3d01      	subs	r5, #1
     b30:	b2ad      	uxth	r5, r5
			pu8Miso++;
     b32:	4643      	mov	r3, r8
     b34:	4259      	negs	r1, r3
     b36:	414b      	adcs	r3, r1
     b38:	4499      	add	r9, r3
			pu8Mosi++;
     b3a:	9b01      	ldr	r3, [sp, #4]
     b3c:	4259      	negs	r1, r3
     b3e:	414b      	adcs	r3, r1
     b40:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     b42:	2d00      	cmp	r5, #0
     b44:	d1c2      	bne.n	acc <nm_bus_ioctl+0x54>
	SercomSpi *const spi_module = &(module->hw->SPI);
     b46:	4b13      	ldr	r3, [pc, #76]	; (b94 <nm_bus_ioctl+0x11c>)
     b48:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     b4a:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     b4c:	7e0b      	ldrb	r3, [r1, #24]
     b4e:	4213      	tst	r3, r2
     b50:	d0fc      	beq.n	b4c <nm_bus_ioctl+0xd4>
	spi_select_slave(&master, &slave_inst, false);
     b52:	2200      	movs	r2, #0
     b54:	490e      	ldr	r1, [pc, #56]	; (b90 <nm_bus_ioctl+0x118>)
     b56:	480f      	ldr	r0, [pc, #60]	; (b94 <nm_bus_ioctl+0x11c>)
     b58:	4b0f      	ldr	r3, [pc, #60]	; (b98 <nm_bus_ioctl+0x120>)
     b5a:	4798      	blx	r3
	return M2M_SUCCESS;
     b5c:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     b5e:	b005      	add	sp, #20
     b60:	bc3c      	pop	{r2, r3, r4, r5}
     b62:	4690      	mov	r8, r2
     b64:	4699      	mov	r9, r3
     b66:	46a2      	mov	sl, r4
     b68:	46ab      	mov	fp, r5
     b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_BUS_FAIL;
     b6c:	2006      	movs	r0, #6
     b6e:	4240      	negs	r0, r0
		break;
     b70:	e7f5      	b.n	b5e <nm_bus_ioctl+0xe6>
			M2M_ERR("invalide ioclt cmd\n");
     b72:	2286      	movs	r2, #134	; 0x86
     b74:	0052      	lsls	r2, r2, #1
     b76:	4909      	ldr	r1, [pc, #36]	; (b9c <nm_bus_ioctl+0x124>)
     b78:	4809      	ldr	r0, [pc, #36]	; (ba0 <nm_bus_ioctl+0x128>)
     b7a:	4b0a      	ldr	r3, [pc, #40]	; (ba4 <nm_bus_ioctl+0x12c>)
     b7c:	4798      	blx	r3
     b7e:	480a      	ldr	r0, [pc, #40]	; (ba8 <nm_bus_ioctl+0x130>)
     b80:	4b0a      	ldr	r3, [pc, #40]	; (bac <nm_bus_ioctl+0x134>)
     b82:	4798      	blx	r3
     b84:	200d      	movs	r0, #13
     b86:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <nm_bus_ioctl+0x138>)
     b88:	4798      	blx	r3
			s8Ret = -1;
     b8a:	2001      	movs	r0, #1
     b8c:	4240      	negs	r0, r0
			break;
     b8e:	e7e6      	b.n	b5e <nm_bus_ioctl+0xe6>
     b90:	20000568 	.word	0x20000568
     b94:	2000056c 	.word	0x2000056c
     b98:	00002251 	.word	0x00002251
     b9c:	00004720 	.word	0x00004720
     ba0:	000046dc 	.word	0x000046dc
     ba4:	00003529 	.word	0x00003529
     ba8:	00004730 	.word	0x00004730
     bac:	00003645 	.word	0x00003645
     bb0:	0000355d 	.word	0x0000355d

00000bb4 <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
     bb4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
     bb6:	4b04      	ldr	r3, [pc, #16]	; (bc8 <m2m_wifi_download_mode+0x14>)
     bb8:	4798      	blx	r3
     bba:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     bbc:	d001      	beq.n	bc2 <m2m_wifi_download_mode+0xe>

	enable_interrupts();

_EXIT0:
	return ret;
}
     bbe:	0020      	movs	r0, r4
     bc0:	bd10      	pop	{r4, pc}
	enable_interrupts();
     bc2:	4b02      	ldr	r3, [pc, #8]	; (bcc <m2m_wifi_download_mode+0x18>)
     bc4:	4798      	blx	r3
     bc6:	e7fa      	b.n	bbe <m2m_wifi_download_mode+0xa>
     bc8:	00000df1 	.word	0x00000df1
     bcc:	00000bd1 	.word	0x00000bd1

00000bd0 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
     bd0:	b500      	push	{lr}
     bd2:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
     bd4:	a901      	add	r1, sp, #4
     bd6:	4817      	ldr	r0, [pc, #92]	; (c34 <enable_interrupts+0x64>)
     bd8:	4b17      	ldr	r3, [pc, #92]	; (c38 <enable_interrupts+0x68>)
     bda:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
     bdc:	2800      	cmp	r0, #0
     bde:	d11d      	bne.n	c1c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
     be0:	2180      	movs	r1, #128	; 0x80
     be2:	0049      	lsls	r1, r1, #1
     be4:	9b01      	ldr	r3, [sp, #4]
     be6:	4319      	orrs	r1, r3
     be8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
     bea:	4812      	ldr	r0, [pc, #72]	; (c34 <enable_interrupts+0x64>)
     bec:	4b13      	ldr	r3, [pc, #76]	; (c3c <enable_interrupts+0x6c>)
     bee:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
     bf0:	2800      	cmp	r0, #0
     bf2:	d116      	bne.n	c22 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
     bf4:	a901      	add	r1, sp, #4
     bf6:	20d0      	movs	r0, #208	; 0xd0
     bf8:	0140      	lsls	r0, r0, #5
     bfa:	4b0f      	ldr	r3, [pc, #60]	; (c38 <enable_interrupts+0x68>)
     bfc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
     bfe:	2800      	cmp	r0, #0
     c00:	d112      	bne.n	c28 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
     c02:	2180      	movs	r1, #128	; 0x80
     c04:	0249      	lsls	r1, r1, #9
     c06:	9b01      	ldr	r3, [sp, #4]
     c08:	4319      	orrs	r1, r3
     c0a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
     c0c:	20d0      	movs	r0, #208	; 0xd0
     c0e:	0140      	lsls	r0, r0, #5
     c10:	4b0a      	ldr	r3, [pc, #40]	; (c3c <enable_interrupts+0x6c>)
     c12:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
     c14:	2800      	cmp	r0, #0
     c16:	d10a      	bne.n	c2e <enable_interrupts+0x5e>
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
     c18:	b003      	add	sp, #12
     c1a:	bd00      	pop	{pc}
		return M2M_ERR_BUS_FAIL;
     c1c:	2006      	movs	r0, #6
     c1e:	4240      	negs	r0, r0
     c20:	e7fa      	b.n	c18 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
     c22:	2006      	movs	r0, #6
     c24:	4240      	negs	r0, r0
     c26:	e7f7      	b.n	c18 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
     c28:	2006      	movs	r0, #6
     c2a:	4240      	negs	r0, r0
     c2c:	e7f4      	b.n	c18 <enable_interrupts+0x48>
		return M2M_ERR_BUS_FAIL;
     c2e:	2006      	movs	r0, #6
     c30:	4240      	negs	r0, r0
     c32:	e7f1      	b.n	c18 <enable_interrupts+0x48>
     c34:	00001408 	.word	0x00001408
     c38:	00000d09 	.word	0x00000d09
     c3c:	00000d15 	.word	0x00000d15

00000c40 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
     c40:	b510      	push	{r4, lr}
     c42:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
     c44:	4b21      	ldr	r3, [pc, #132]	; (ccc <nmi_get_chipid+0x8c>)
     c46:	681c      	ldr	r4, [r3, #0]
     c48:	2c00      	cmp	r4, #0
     c4a:	d004      	beq.n	c56 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
     c4c:	4b1f      	ldr	r3, [pc, #124]	; (ccc <nmi_get_chipid+0x8c>)
     c4e:	681c      	ldr	r4, [r3, #0]
}
     c50:	0020      	movs	r0, r4
     c52:	b002      	add	sp, #8
     c54:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
     c56:	0019      	movs	r1, r3
     c58:	2080      	movs	r0, #128	; 0x80
     c5a:	0140      	lsls	r0, r0, #5
     c5c:	4b1c      	ldr	r3, [pc, #112]	; (cd0 <nmi_get_chipid+0x90>)
     c5e:	4798      	blx	r3
     c60:	2800      	cmp	r0, #0
     c62:	d003      	beq.n	c6c <nmi_get_chipid+0x2c>
			chipid = 0;
     c64:	2200      	movs	r2, #0
     c66:	4b19      	ldr	r3, [pc, #100]	; (ccc <nmi_get_chipid+0x8c>)
     c68:	601a      	str	r2, [r3, #0]
			return 0;
     c6a:	e7f1      	b.n	c50 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
     c6c:	a901      	add	r1, sp, #4
     c6e:	4819      	ldr	r0, [pc, #100]	; (cd4 <nmi_get_chipid+0x94>)
     c70:	4b17      	ldr	r3, [pc, #92]	; (cd0 <nmi_get_chipid+0x90>)
     c72:	4798      	blx	r3
     c74:	2800      	cmp	r0, #0
     c76:	d003      	beq.n	c80 <nmi_get_chipid+0x40>
			chipid = 0;
     c78:	2200      	movs	r2, #0
     c7a:	4b14      	ldr	r3, [pc, #80]	; (ccc <nmi_get_chipid+0x8c>)
     c7c:	601a      	str	r2, [r3, #0]
			return 0;
     c7e:	e7e7      	b.n	c50 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
     c80:	4b12      	ldr	r3, [pc, #72]	; (ccc <nmi_get_chipid+0x8c>)
     c82:	681b      	ldr	r3, [r3, #0]
     c84:	4a14      	ldr	r2, [pc, #80]	; (cd8 <nmi_get_chipid+0x98>)
     c86:	4293      	cmp	r3, r2
     c88:	d00b      	beq.n	ca2 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
     c8a:	4a14      	ldr	r2, [pc, #80]	; (cdc <nmi_get_chipid+0x9c>)
     c8c:	4293      	cmp	r3, r2
     c8e:	d00f      	beq.n	cb0 <nmi_get_chipid+0x70>
		chipid |= 0x050000;
     c90:	490e      	ldr	r1, [pc, #56]	; (ccc <nmi_get_chipid+0x8c>)
		chipid &= ~(0x0f0000);
     c92:	4a13      	ldr	r2, [pc, #76]	; (ce0 <nmi_get_chipid+0xa0>)
     c94:	680b      	ldr	r3, [r1, #0]
     c96:	401a      	ands	r2, r3
		chipid |= 0x050000;
     c98:	23a0      	movs	r3, #160	; 0xa0
     c9a:	02db      	lsls	r3, r3, #11
     c9c:	4313      	orrs	r3, r2
     c9e:	600b      	str	r3, [r1, #0]
     ca0:	e7d4      	b.n	c4c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	2b01      	cmp	r3, #1
     ca6:	d0f3      	beq.n	c90 <nmi_get_chipid+0x50>
				chipid = 0x1002a1;
     ca8:	4a0e      	ldr	r2, [pc, #56]	; (ce4 <nmi_get_chipid+0xa4>)
     caa:	4b08      	ldr	r3, [pc, #32]	; (ccc <nmi_get_chipid+0x8c>)
     cac:	601a      	str	r2, [r3, #0]
     cae:	e7ef      	b.n	c90 <nmi_get_chipid+0x50>
			if(rfrevid == 3) { /* 1002B0 */
     cb0:	9b01      	ldr	r3, [sp, #4]
     cb2:	2b03      	cmp	r3, #3
     cb4:	d0ec      	beq.n	c90 <nmi_get_chipid+0x50>
			} else if(rfrevid == 4) { /* 1002B1 */
     cb6:	2b04      	cmp	r3, #4
     cb8:	d003      	beq.n	cc2 <nmi_get_chipid+0x82>
				chipid = 0x1002b2;
     cba:	4a0b      	ldr	r2, [pc, #44]	; (ce8 <nmi_get_chipid+0xa8>)
     cbc:	4b03      	ldr	r3, [pc, #12]	; (ccc <nmi_get_chipid+0x8c>)
     cbe:	601a      	str	r2, [r3, #0]
     cc0:	e7e6      	b.n	c90 <nmi_get_chipid+0x50>
				chipid = 0x1002b1;
     cc2:	4a0a      	ldr	r2, [pc, #40]	; (cec <nmi_get_chipid+0xac>)
     cc4:	4b01      	ldr	r3, [pc, #4]	; (ccc <nmi_get_chipid+0x8c>)
     cc6:	601a      	str	r2, [r3, #0]
     cc8:	e7e2      	b.n	c90 <nmi_get_chipid+0x50>
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	20000518 	.word	0x20000518
     cd0:	00000d09 	.word	0x00000d09
     cd4:	000013f4 	.word	0x000013f4
     cd8:	001002a0 	.word	0x001002a0
     cdc:	001002b0 	.word	0x001002b0
     ce0:	fff0ffff 	.word	0xfff0ffff
     ce4:	001002a1 	.word	0x001002a1
     ce8:	001002b2 	.word	0x001002b2
     cec:	001002b1 	.word	0x001002b1

00000cf0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
     cf0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
     cf2:	4b01      	ldr	r3, [pc, #4]	; (cf8 <nm_bus_iface_init+0x8>)
     cf4:	4798      	blx	r3

	return ret;
}
     cf6:	bd10      	pop	{r4, pc}
     cf8:	00000991 	.word	0x00000991

00000cfc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
     cfc:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
     cfe:	4b01      	ldr	r3, [pc, #4]	; (d04 <nm_read_reg+0x8>)
     d00:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
     d02:	bd10      	pop	{r4, pc}
     d04:	000013e5 	.word	0x000013e5

00000d08 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
     d08:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
     d0a:	4b01      	ldr	r3, [pc, #4]	; (d10 <nm_read_reg_with_ret+0x8>)
     d0c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
     d0e:	bd10      	pop	{r4, pc}
     d10:	000013f9 	.word	0x000013f9

00000d14 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
     d14:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
     d16:	4b01      	ldr	r3, [pc, #4]	; (d1c <nm_write_reg+0x8>)
     d18:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
     d1a:	bd10      	pop	{r4, pc}
     d1c:	00001411 	.word	0x00001411

00000d20 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     d20:	b5f0      	push	{r4, r5, r6, r7, lr}
     d22:	46d6      	mov	lr, sl
     d24:	464f      	mov	r7, r9
     d26:	4646      	mov	r6, r8
     d28:	b5c0      	push	{r6, r7, lr}
     d2a:	b082      	sub	sp, #8
     d2c:	4680      	mov	r8, r0
     d2e:	4689      	mov	r9, r1
     d30:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     d32:	4b13      	ldr	r3, [pc, #76]	; (d80 <nm_read_block+0x60>)
     d34:	881f      	ldrh	r7, [r3, #0]
     d36:	3f08      	subs	r7, #8
     d38:	b2bb      	uxth	r3, r7
     d3a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     d3c:	001e      	movs	r6, r3
     d3e:	0004      	movs	r4, r0
     d40:	429a      	cmp	r2, r3
     d42:	d91a      	bls.n	d7a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     d44:	4b0f      	ldr	r3, [pc, #60]	; (d84 <nm_read_block+0x64>)
     d46:	469a      	mov	sl, r3
     d48:	1a37      	subs	r7, r6, r0
     d4a:	4643      	mov	r3, r8
     d4c:	1ae1      	subs	r1, r4, r3
     d4e:	4449      	add	r1, r9
     d50:	9a01      	ldr	r2, [sp, #4]
     d52:	0020      	movs	r0, r4
     d54:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     d56:	2800      	cmp	r0, #0
     d58:	d109      	bne.n	d6e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     d5a:	1bad      	subs	r5, r5, r6
     d5c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     d5e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     d60:	42b5      	cmp	r5, r6
     d62:	d8f2      	bhi.n	d4a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     d64:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     d66:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
     d68:	0020      	movs	r0, r4
     d6a:	4b06      	ldr	r3, [pc, #24]	; (d84 <nm_read_block+0x64>)
     d6c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     d6e:	b002      	add	sp, #8
     d70:	bc1c      	pop	{r2, r3, r4}
     d72:	4690      	mov	r8, r2
     d74:	4699      	mov	r9, r3
     d76:	46a2      	mov	sl, r4
     d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     d7a:	2100      	movs	r1, #0
     d7c:	e7f2      	b.n	d64 <nm_read_block+0x44>
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	20000000 	.word	0x20000000
     d84:	00001551 	.word	0x00001551

00000d88 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
     d88:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8a:	46d6      	mov	lr, sl
     d8c:	464f      	mov	r7, r9
     d8e:	4646      	mov	r6, r8
     d90:	b5c0      	push	{r6, r7, lr}
     d92:	b082      	sub	sp, #8
     d94:	4680      	mov	r8, r0
     d96:	4689      	mov	r9, r1
     d98:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
     d9a:	4b13      	ldr	r3, [pc, #76]	; (de8 <nm_write_block+0x60>)
     d9c:	881f      	ldrh	r7, [r3, #0]
     d9e:	3f08      	subs	r7, #8
     da0:	b2bb      	uxth	r3, r7
     da2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
     da4:	001e      	movs	r6, r3
     da6:	0004      	movs	r4, r0
     da8:	429a      	cmp	r2, r3
     daa:	d91a      	bls.n	de2 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     dac:	4b0f      	ldr	r3, [pc, #60]	; (dec <nm_write_block+0x64>)
     dae:	469a      	mov	sl, r3
     db0:	1a37      	subs	r7, r6, r0
     db2:	4643      	mov	r3, r8
     db4:	1ae1      	subs	r1, r4, r3
     db6:	4449      	add	r1, r9
     db8:	9a01      	ldr	r2, [sp, #4]
     dba:	0020      	movs	r0, r4
     dbc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
     dbe:	2800      	cmp	r0, #0
     dc0:	d109      	bne.n	dd6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
     dc2:	1bad      	subs	r5, r5, r6
     dc4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
     dc6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
     dc8:	42b5      	cmp	r5, r6
     dca:	d8f2      	bhi.n	db2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     dcc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
     dce:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
     dd0:	0020      	movs	r0, r4
     dd2:	4b06      	ldr	r3, [pc, #24]	; (dec <nm_write_block+0x64>)
     dd4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
     dd6:	b002      	add	sp, #8
     dd8:	bc1c      	pop	{r2, r3, r4}
     dda:	4690      	mov	r8, r2
     ddc:	4699      	mov	r9, r3
     dde:	46a2      	mov	sl, r4
     de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
     de2:	2100      	movs	r1, #0
     de4:	e7f2      	b.n	dcc <nm_write_block+0x44>
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	20000000 	.word	0x20000000
     dec:	00001629 	.word	0x00001629

00000df0 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
     df0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;

	ret = nm_bus_iface_init(NULL);
     df2:	2000      	movs	r0, #0
     df4:	4b11      	ldr	r3, [pc, #68]	; (e3c <nm_drv_init_download_mode+0x4c>)
     df6:	4798      	blx	r3
     df8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
     dfa:	d112      	bne.n	e22 <nm_drv_init_download_mode+0x32>
	}


#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
     dfc:	4b10      	ldr	r3, [pc, #64]	; (e40 <nm_drv_init_download_mode+0x50>)
     dfe:	4798      	blx	r3
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
     e00:	4810      	ldr	r0, [pc, #64]	; (e44 <nm_drv_init_download_mode+0x54>)
     e02:	4d11      	ldr	r5, [pc, #68]	; (e48 <nm_drv_init_download_mode+0x58>)
     e04:	47a8      	blx	r5
     e06:	4b11      	ldr	r3, [pc, #68]	; (e4c <nm_drv_init_download_mode+0x5c>)
     e08:	4798      	blx	r3
     e0a:	0001      	movs	r1, r0
     e0c:	4810      	ldr	r0, [pc, #64]	; (e50 <nm_drv_init_download_mode+0x60>)
     e0e:	47a8      	blx	r5
     e10:	200d      	movs	r0, #13
     e12:	4b10      	ldr	r3, [pc, #64]	; (e54 <nm_drv_init_download_mode+0x64>)
     e14:	4798      	blx	r3

	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);
     e16:	2100      	movs	r1, #0
     e18:	480f      	ldr	r0, [pc, #60]	; (e58 <nm_drv_init_download_mode+0x68>)
     e1a:	4b10      	ldr	r3, [pc, #64]	; (e5c <nm_drv_init_download_mode+0x6c>)
     e1c:	4798      	blx	r3

ERR1:
	return ret;
}
     e1e:	0020      	movs	r0, r4
     e20:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi start]: fail init bus\n");
     e22:	2275      	movs	r2, #117	; 0x75
     e24:	490e      	ldr	r1, [pc, #56]	; (e60 <nm_drv_init_download_mode+0x70>)
     e26:	480f      	ldr	r0, [pc, #60]	; (e64 <nm_drv_init_download_mode+0x74>)
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <nm_drv_init_download_mode+0x58>)
     e2a:	4798      	blx	r3
     e2c:	480e      	ldr	r0, [pc, #56]	; (e68 <nm_drv_init_download_mode+0x78>)
     e2e:	4b0f      	ldr	r3, [pc, #60]	; (e6c <nm_drv_init_download_mode+0x7c>)
     e30:	4798      	blx	r3
     e32:	200d      	movs	r0, #13
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <nm_drv_init_download_mode+0x64>)
     e36:	4798      	blx	r3
		goto ERR1;
     e38:	e7f1      	b.n	e1e <nm_drv_init_download_mode+0x2e>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	00000cf1 	.word	0x00000cf1
     e40:	00001429 	.word	0x00001429
     e44:	0000477c 	.word	0x0000477c
     e48:	00003529 	.word	0x00003529
     e4c:	00000c41 	.word	0x00000c41
     e50:	00004788 	.word	0x00004788
     e54:	0000355d 	.word	0x0000355d
     e58:	00020300 	.word	0x00020300
     e5c:	00000d15 	.word	0x00000d15
     e60:	00004744 	.word	0x00004744
     e64:	000046dc 	.word	0x000046dc
     e68:	00004760 	.word	0x00004760
     e6c:	00003645 	.word	0x00003645

00000e70 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
     e70:	b500      	push	{lr}
     e72:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
     e74:	ab01      	add	r3, sp, #4
     e76:	2200      	movs	r2, #0
     e78:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
     e7a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
     e7c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
     e7e:	0019      	movs	r1, r3
     e80:	2003      	movs	r0, #3
     e82:	4b02      	ldr	r3, [pc, #8]	; (e8c <nmi_spi_read+0x1c>)
     e84:	4798      	blx	r3
}
     e86:	b005      	add	sp, #20
     e88:	bd00      	pop	{pc}
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	00000a79 	.word	0x00000a79

00000e90 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
     e90:	b5f0      	push	{r4, r5, r6, r7, lr}
     e92:	46c6      	mov	lr, r8
     e94:	b500      	push	{lr}
     e96:	b082      	sub	sp, #8
     e98:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
     e9a:	28cf      	cmp	r0, #207	; 0xcf
     e9c:	d02b      	beq.n	ef6 <spi_cmd_rsp+0x66>
     e9e:	0003      	movs	r3, r0
     ea0:	333b      	adds	r3, #59	; 0x3b
     ea2:	b2db      	uxtb	r3, r3
     ea4:	2b01      	cmp	r3, #1
     ea6:	d926      	bls.n	ef6 <spi_cmd_rsp+0x66>
{
     ea8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     eaa:	466b      	mov	r3, sp
     eac:	1dde      	adds	r6, r3, #7
     eae:	4b26      	ldr	r3, [pc, #152]	; (f48 <spi_cmd_rsp+0xb8>)
     eb0:	4698      	mov	r8, r3
     eb2:	2101      	movs	r1, #1
     eb4:	0030      	movs	r0, r6
     eb6:	47c0      	blx	r8
     eb8:	1e05      	subs	r5, r0, #0
     eba:	d125      	bne.n	f08 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
     ebc:	7833      	ldrb	r3, [r6, #0]
     ebe:	42bb      	cmp	r3, r7
     ec0:	d030      	beq.n	f24 <spi_cmd_rsp+0x94>
     ec2:	3c01      	subs	r4, #1
     ec4:	b2e4      	uxtb	r4, r4
     ec6:	2c00      	cmp	r4, #0
     ec8:	d1f3      	bne.n	eb2 <spi_cmd_rsp+0x22>
     eca:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     ecc:	466b      	mov	r3, sp
     ece:	1dde      	adds	r6, r3, #7
     ed0:	4f1d      	ldr	r7, [pc, #116]	; (f48 <spi_cmd_rsp+0xb8>)
     ed2:	2101      	movs	r1, #1
     ed4:	0030      	movs	r0, r6
     ed6:	47b8      	blx	r7
     ed8:	2800      	cmp	r0, #0
     eda:	d125      	bne.n	f28 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
     edc:	7833      	ldrb	r3, [r6, #0]
     ede:	2b00      	cmp	r3, #0
     ee0:	d02f      	beq.n	f42 <spi_cmd_rsp+0xb2>
     ee2:	3c01      	subs	r4, #1
     ee4:	b2e4      	uxtb	r4, r4
     ee6:	2c00      	cmp	r4, #0
     ee8:	d1f3      	bne.n	ed2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
     eea:	2501      	movs	r5, #1

_fail_:

	return result;
}
     eec:	0028      	movs	r0, r5
     eee:	b002      	add	sp, #8
     ef0:	bc04      	pop	{r2}
     ef2:	4690      	mov	r8, r2
     ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     ef6:	2101      	movs	r1, #1
     ef8:	466b      	mov	r3, sp
     efa:	1dd8      	adds	r0, r3, #7
     efc:	4b12      	ldr	r3, [pc, #72]	; (f48 <spi_cmd_rsp+0xb8>)
     efe:	4798      	blx	r3
			result = N_FAIL;
     f00:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     f02:	2800      	cmp	r0, #0
     f04:	d0d0      	beq.n	ea8 <spi_cmd_rsp+0x18>
     f06:	e7f1      	b.n	eec <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
     f08:	223c      	movs	r2, #60	; 0x3c
     f0a:	32ff      	adds	r2, #255	; 0xff
     f0c:	490f      	ldr	r1, [pc, #60]	; (f4c <spi_cmd_rsp+0xbc>)
     f0e:	4810      	ldr	r0, [pc, #64]	; (f50 <spi_cmd_rsp+0xc0>)
     f10:	4b10      	ldr	r3, [pc, #64]	; (f54 <spi_cmd_rsp+0xc4>)
     f12:	4798      	blx	r3
     f14:	4810      	ldr	r0, [pc, #64]	; (f58 <spi_cmd_rsp+0xc8>)
     f16:	4b11      	ldr	r3, [pc, #68]	; (f5c <spi_cmd_rsp+0xcc>)
     f18:	4798      	blx	r3
     f1a:	200d      	movs	r0, #13
     f1c:	4b10      	ldr	r3, [pc, #64]	; (f60 <spi_cmd_rsp+0xd0>)
     f1e:	4798      	blx	r3
			result = N_FAIL;
     f20:	2500      	movs	r5, #0
			goto _fail_;
     f22:	e7e3      	b.n	eec <spi_cmd_rsp+0x5c>
     f24:	240b      	movs	r4, #11
     f26:	e7d1      	b.n	ecc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
     f28:	224a      	movs	r2, #74	; 0x4a
     f2a:	32ff      	adds	r2, #255	; 0xff
     f2c:	4907      	ldr	r1, [pc, #28]	; (f4c <spi_cmd_rsp+0xbc>)
     f2e:	4808      	ldr	r0, [pc, #32]	; (f50 <spi_cmd_rsp+0xc0>)
     f30:	4b08      	ldr	r3, [pc, #32]	; (f54 <spi_cmd_rsp+0xc4>)
     f32:	4798      	blx	r3
     f34:	4808      	ldr	r0, [pc, #32]	; (f58 <spi_cmd_rsp+0xc8>)
     f36:	4b09      	ldr	r3, [pc, #36]	; (f5c <spi_cmd_rsp+0xcc>)
     f38:	4798      	blx	r3
     f3a:	200d      	movs	r0, #13
     f3c:	4b08      	ldr	r3, [pc, #32]	; (f60 <spi_cmd_rsp+0xd0>)
     f3e:	4798      	blx	r3
			goto _fail_;
     f40:	e7d4      	b.n	eec <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
     f42:	2501      	movs	r5, #1
     f44:	e7d2      	b.n	eec <spi_cmd_rsp+0x5c>
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	00000e71 	.word	0x00000e71
     f4c:	000047dc 	.word	0x000047dc
     f50:	000046dc 	.word	0x000046dc
     f54:	00003529 	.word	0x00003529
     f58:	00004c14 	.word	0x00004c14
     f5c:	00003645 	.word	0x00003645
     f60:	0000355d 	.word	0x0000355d

00000f64 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
     f64:	b5f0      	push	{r4, r5, r6, r7, lr}
     f66:	46de      	mov	lr, fp
     f68:	4657      	mov	r7, sl
     f6a:	464e      	mov	r6, r9
     f6c:	4645      	mov	r5, r8
     f6e:	b5e0      	push	{r5, r6, r7, lr}
     f70:	b087      	sub	sp, #28
     f72:	9001      	str	r0, [sp, #4]
     f74:	4689      	mov	r9, r1
     f76:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
     f78:	2300      	movs	r3, #0
     f7a:	469a      	mov	sl, r3
     f7c:	2380      	movs	r3, #128	; 0x80
     f7e:	019b      	lsls	r3, r3, #6
     f80:	469b      	mov	fp, r3
     f82:	466a      	mov	r2, sp
     f84:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     f86:	4b3d      	ldr	r3, [pc, #244]	; (107c <spi_data_read+0x118>)
     f88:	4698      	mov	r8, r3
     f8a:	e02f      	b.n	fec <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
     f8c:	226c      	movs	r2, #108	; 0x6c
     f8e:	32ff      	adds	r2, #255	; 0xff
     f90:	493b      	ldr	r1, [pc, #236]	; (1080 <spi_data_read+0x11c>)
     f92:	483c      	ldr	r0, [pc, #240]	; (1084 <spi_data_read+0x120>)
     f94:	4b3c      	ldr	r3, [pc, #240]	; (1088 <spi_data_read+0x124>)
     f96:	4798      	blx	r3
     f98:	483c      	ldr	r0, [pc, #240]	; (108c <spi_data_read+0x128>)
     f9a:	4b3d      	ldr	r3, [pc, #244]	; (1090 <spi_data_read+0x12c>)
     f9c:	4798      	blx	r3
     f9e:	200d      	movs	r0, #13
     fa0:	4b3c      	ldr	r3, [pc, #240]	; (1094 <spi_data_read+0x130>)
     fa2:	4798      	blx	r3
     fa4:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
     fa6:	0028      	movs	r0, r5
     fa8:	b007      	add	sp, #28
     faa:	bc3c      	pop	{r2, r3, r4, r5}
     fac:	4690      	mov	r8, r2
     fae:	4699      	mov	r9, r3
     fb0:	46a2      	mov	sl, r4
     fb2:	46ab      	mov	fp, r5
     fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
     fb6:	2c00      	cmp	r4, #0
     fb8:	dd2e      	ble.n	1018 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
     fba:	9b01      	ldr	r3, [sp, #4]
     fbc:	4453      	add	r3, sl
     fbe:	0018      	movs	r0, r3
     fc0:	0039      	movs	r1, r7
     fc2:	4b2e      	ldr	r3, [pc, #184]	; (107c <spi_data_read+0x118>)
     fc4:	4798      	blx	r3
     fc6:	1e04      	subs	r4, r0, #0
     fc8:	d134      	bne.n	1034 <spi_data_read+0xd0>
		if(!clockless)
     fca:	9b02      	ldr	r3, [sp, #8]
     fcc:	2b00      	cmp	r3, #0
     fce:	d103      	bne.n	fd8 <spi_data_read+0x74>
			if (!gu8Crc_off) {
     fd0:	4b31      	ldr	r3, [pc, #196]	; (1098 <spi_data_read+0x134>)
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d03a      	beq.n	104e <spi_data_read+0xea>
		ix += nbytes;
     fd8:	4653      	mov	r3, sl
     fda:	18fb      	adds	r3, r7, r3
     fdc:	b21b      	sxth	r3, r3
     fde:	469a      	mov	sl, r3
		sz -= nbytes;
     fe0:	464b      	mov	r3, r9
     fe2:	1bdf      	subs	r7, r3, r7
     fe4:	b2bb      	uxth	r3, r7
     fe6:	4699      	mov	r9, r3
	} while (sz);
     fe8:	2b00      	cmp	r3, #0
     fea:	d044      	beq.n	1076 <spi_data_read+0x112>
     fec:	464f      	mov	r7, r9
     fee:	45d9      	cmp	r9, fp
     ff0:	d901      	bls.n	ff6 <spi_data_read+0x92>
     ff2:	466b      	mov	r3, sp
     ff4:	89df      	ldrh	r7, [r3, #14]
     ff6:	b2bf      	uxth	r7, r7
		retry = 10;
     ff8:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
     ffa:	ab04      	add	r3, sp, #16
     ffc:	1cde      	adds	r6, r3, #3
     ffe:	2101      	movs	r1, #1
    1000:	0030      	movs	r0, r6
    1002:	47c0      	blx	r8
    1004:	1e05      	subs	r5, r0, #0
    1006:	d1c1      	bne.n	f8c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    1008:	7833      	ldrb	r3, [r6, #0]
    100a:	091b      	lsrs	r3, r3, #4
    100c:	2b0f      	cmp	r3, #15
    100e:	d0d2      	beq.n	fb6 <spi_data_read+0x52>
    1010:	3c01      	subs	r4, #1
    1012:	b224      	sxth	r4, r4
		} while (retry--);
    1014:	1c63      	adds	r3, r4, #1
    1016:	d1f2      	bne.n	ffe <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1018:	2278      	movs	r2, #120	; 0x78
    101a:	32ff      	adds	r2, #255	; 0xff
    101c:	4918      	ldr	r1, [pc, #96]	; (1080 <spi_data_read+0x11c>)
    101e:	4819      	ldr	r0, [pc, #100]	; (1084 <spi_data_read+0x120>)
    1020:	4c19      	ldr	r4, [pc, #100]	; (1088 <spi_data_read+0x124>)
    1022:	47a0      	blx	r4
    1024:	ab04      	add	r3, sp, #16
    1026:	78d9      	ldrb	r1, [r3, #3]
    1028:	481c      	ldr	r0, [pc, #112]	; (109c <spi_data_read+0x138>)
    102a:	47a0      	blx	r4
    102c:	200d      	movs	r0, #13
    102e:	4b19      	ldr	r3, [pc, #100]	; (1094 <spi_data_read+0x130>)
    1030:	4798      	blx	r3
			break;
    1032:	e7b8      	b.n	fa6 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    1034:	22c0      	movs	r2, #192	; 0xc0
    1036:	0052      	lsls	r2, r2, #1
    1038:	4911      	ldr	r1, [pc, #68]	; (1080 <spi_data_read+0x11c>)
    103a:	4812      	ldr	r0, [pc, #72]	; (1084 <spi_data_read+0x120>)
    103c:	4b12      	ldr	r3, [pc, #72]	; (1088 <spi_data_read+0x124>)
    103e:	4798      	blx	r3
    1040:	4817      	ldr	r0, [pc, #92]	; (10a0 <spi_data_read+0x13c>)
    1042:	4b13      	ldr	r3, [pc, #76]	; (1090 <spi_data_read+0x12c>)
    1044:	4798      	blx	r3
    1046:	200d      	movs	r0, #13
    1048:	4b12      	ldr	r3, [pc, #72]	; (1094 <spi_data_read+0x130>)
    104a:	4798      	blx	r3
			break;
    104c:	e7ab      	b.n	fa6 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    104e:	2102      	movs	r1, #2
    1050:	a805      	add	r0, sp, #20
    1052:	4b0a      	ldr	r3, [pc, #40]	; (107c <spi_data_read+0x118>)
    1054:	4798      	blx	r3
    1056:	2800      	cmp	r0, #0
    1058:	d0be      	beq.n	fd8 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    105a:	228c      	movs	r2, #140	; 0x8c
    105c:	32ff      	adds	r2, #255	; 0xff
    105e:	4908      	ldr	r1, [pc, #32]	; (1080 <spi_data_read+0x11c>)
    1060:	4808      	ldr	r0, [pc, #32]	; (1084 <spi_data_read+0x120>)
    1062:	4b09      	ldr	r3, [pc, #36]	; (1088 <spi_data_read+0x124>)
    1064:	4798      	blx	r3
    1066:	480f      	ldr	r0, [pc, #60]	; (10a4 <spi_data_read+0x140>)
    1068:	4b09      	ldr	r3, [pc, #36]	; (1090 <spi_data_read+0x12c>)
    106a:	4798      	blx	r3
    106c:	200d      	movs	r0, #13
    106e:	4b09      	ldr	r3, [pc, #36]	; (1094 <spi_data_read+0x130>)
    1070:	4798      	blx	r3
					result = N_FAIL;
    1072:	0025      	movs	r5, r4
					break;
    1074:	e797      	b.n	fa6 <spi_data_read+0x42>
    1076:	2501      	movs	r5, #1
    1078:	e795      	b.n	fa6 <spi_data_read+0x42>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	00000e71 	.word	0x00000e71
    1080:	000047e8 	.word	0x000047e8
    1084:	000046dc 	.word	0x000046dc
    1088:	00003529 	.word	0x00003529
    108c:	00004c48 	.word	0x00004c48
    1090:	00003645 	.word	0x00003645
    1094:	0000355d 	.word	0x0000355d
    1098:	2000051c 	.word	0x2000051c
    109c:	00004c7c 	.word	0x00004c7c
    10a0:	00004cac 	.word	0x00004cac
    10a4:	00004cdc 	.word	0x00004cdc

000010a8 <nmi_spi_write>:
{
    10a8:	b500      	push	{lr}
    10aa:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
    10ac:	ab01      	add	r3, sp, #4
    10ae:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    10b0:	2200      	movs	r2, #0
    10b2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    10b4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    10b6:	0019      	movs	r1, r3
    10b8:	2003      	movs	r0, #3
    10ba:	4b02      	ldr	r3, [pc, #8]	; (10c4 <nmi_spi_write+0x1c>)
    10bc:	4798      	blx	r3
}
    10be:	b005      	add	sp, #20
    10c0:	bd00      	pop	{pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00000a79 	.word	0x00000a79

000010c8 <spi_cmd>:
{
    10c8:	b570      	push	{r4, r5, r6, lr}
    10ca:	b084      	sub	sp, #16
    10cc:	ac08      	add	r4, sp, #32
    10ce:	7825      	ldrb	r5, [r4, #0]
	bc[0] = cmd;
    10d0:	ac01      	add	r4, sp, #4
    10d2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    10d4:	303f      	adds	r0, #63	; 0x3f
    10d6:	b2c4      	uxtb	r4, r0
    10d8:	2c0e      	cmp	r4, #14
    10da:	d900      	bls.n	10de <spi_cmd+0x16>
    10dc:	e084      	b.n	11e8 <spi_cmd+0x120>
    10de:	00a0      	lsls	r0, r4, #2
    10e0:	4c4f      	ldr	r4, [pc, #316]	; (1220 <spi_cmd+0x158>)
    10e2:	5820      	ldr	r0, [r4, r0]
    10e4:	4687      	mov	pc, r0
		bc[1] = (uint8)(adr >> 16);
    10e6:	ab01      	add	r3, sp, #4
    10e8:	0c0a      	lsrs	r2, r1, #16
    10ea:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    10ec:	0a0a      	lsrs	r2, r1, #8
    10ee:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    10f0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    10f2:	2105      	movs	r1, #5
		if (!gu8Crc_off)
    10f4:	4b4b      	ldr	r3, [pc, #300]	; (1224 <spi_cmd+0x15c>)
    10f6:	781b      	ldrb	r3, [r3, #0]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d077      	beq.n	11ec <spi_cmd+0x124>
			len-=1;
    10fc:	3901      	subs	r1, #1
    10fe:	b2c9      	uxtb	r1, r1
    1100:	e083      	b.n	120a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    1102:	0a0b      	lsrs	r3, r1, #8
    1104:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1106:	2d00      	cmp	r5, #0
    1108:	d107      	bne.n	111a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    110a:	aa01      	add	r2, sp, #4
    110c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    110e:	ab01      	add	r3, sp, #4
    1110:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1112:	2200      	movs	r2, #0
    1114:	70da      	strb	r2, [r3, #3]
		len = 5;
    1116:	2105      	movs	r1, #5
		break;
    1118:	e7ec      	b.n	10f4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    111a:	2280      	movs	r2, #128	; 0x80
    111c:	4252      	negs	r2, r2
    111e:	4313      	orrs	r3, r2
    1120:	aa01      	add	r2, sp, #4
    1122:	7053      	strb	r3, [r2, #1]
    1124:	e7f3      	b.n	110e <spi_cmd+0x46>
		bc[1] = 0x00;
    1126:	ab01      	add	r3, sp, #4
    1128:	2200      	movs	r2, #0
    112a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    112c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    112e:	70da      	strb	r2, [r3, #3]
		len = 5;
    1130:	2105      	movs	r1, #5
		break;
    1132:	e7df      	b.n	10f4 <spi_cmd+0x2c>
		bc[1] = 0x00;
    1134:	ab01      	add	r3, sp, #4
    1136:	2200      	movs	r2, #0
    1138:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    113a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    113c:	70da      	strb	r2, [r3, #3]
		len = 5;
    113e:	2105      	movs	r1, #5
		break;
    1140:	e7d8      	b.n	10f4 <spi_cmd+0x2c>
		bc[1] = 0xff;
    1142:	ab01      	add	r3, sp, #4
    1144:	22ff      	movs	r2, #255	; 0xff
    1146:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1148:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    114a:	70da      	strb	r2, [r3, #3]
		len = 5;
    114c:	2105      	movs	r1, #5
		break;
    114e:	e7d1      	b.n	10f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1150:	aa01      	add	r2, sp, #4
    1152:	0c08      	lsrs	r0, r1, #16
    1154:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1156:	0a08      	lsrs	r0, r1, #8
    1158:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    115a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    115c:	0a19      	lsrs	r1, r3, #8
    115e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1160:	7153      	strb	r3, [r2, #5]
		len = 7;
    1162:	2107      	movs	r1, #7
		break;
    1164:	e7c6      	b.n	10f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1166:	aa01      	add	r2, sp, #4
    1168:	0c08      	lsrs	r0, r1, #16
    116a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    116c:	0a08      	lsrs	r0, r1, #8
    116e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1170:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1172:	0c19      	lsrs	r1, r3, #16
    1174:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1176:	0a19      	lsrs	r1, r3, #8
    1178:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    117a:	7193      	strb	r3, [r2, #6]
		len = 8;
    117c:	2108      	movs	r1, #8
		break;
    117e:	e7b9      	b.n	10f4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1180:	0a0b      	lsrs	r3, r1, #8
    1182:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1184:	2d00      	cmp	r5, #0
    1186:	d10c      	bne.n	11a2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1188:	a801      	add	r0, sp, #4
    118a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    118c:	ab01      	add	r3, sp, #4
    118e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1190:	0e11      	lsrs	r1, r2, #24
    1192:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1194:	0c11      	lsrs	r1, r2, #16
    1196:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1198:	0a11      	lsrs	r1, r2, #8
    119a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    119c:	719a      	strb	r2, [r3, #6]
		len = 8;
    119e:	2108      	movs	r1, #8
		break;
    11a0:	e7a8      	b.n	10f4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    11a2:	2080      	movs	r0, #128	; 0x80
    11a4:	4240      	negs	r0, r0
    11a6:	4303      	orrs	r3, r0
    11a8:	a801      	add	r0, sp, #4
    11aa:	7043      	strb	r3, [r0, #1]
    11ac:	e7ee      	b.n	118c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    11ae:	ab01      	add	r3, sp, #4
    11b0:	0c08      	lsrs	r0, r1, #16
    11b2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    11b4:	0a08      	lsrs	r0, r1, #8
    11b6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    11b8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    11ba:	0e11      	lsrs	r1, r2, #24
    11bc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    11be:	0c11      	lsrs	r1, r2, #16
    11c0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    11c2:	0a11      	lsrs	r1, r2, #8
    11c4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    11c6:	71da      	strb	r2, [r3, #7]
		len = 9;
    11c8:	2109      	movs	r1, #9
		break;
    11ca:	e793      	b.n	10f4 <spi_cmd+0x2c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    11cc:	228e      	movs	r2, #142	; 0x8e
    11ce:	0052      	lsls	r2, r2, #1
    11d0:	4915      	ldr	r1, [pc, #84]	; (1228 <spi_cmd+0x160>)
    11d2:	4816      	ldr	r0, [pc, #88]	; (122c <spi_cmd+0x164>)
    11d4:	4b16      	ldr	r3, [pc, #88]	; (1230 <spi_cmd+0x168>)
    11d6:	4798      	blx	r3
    11d8:	4816      	ldr	r0, [pc, #88]	; (1234 <spi_cmd+0x16c>)
    11da:	4b17      	ldr	r3, [pc, #92]	; (1238 <spi_cmd+0x170>)
    11dc:	4798      	blx	r3
    11de:	200d      	movs	r0, #13
    11e0:	4b16      	ldr	r3, [pc, #88]	; (123c <spi_cmd+0x174>)
    11e2:	4798      	blx	r3
			result = N_FAIL;
    11e4:	2300      	movs	r3, #0
    11e6:	e017      	b.n	1218 <spi_cmd+0x150>
	switch (cmd) {
    11e8:	2300      	movs	r3, #0
    11ea:	e015      	b.n	1218 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    11ec:	1e4e      	subs	r6, r1, #1
    11ee:	aa01      	add	r2, sp, #4
    11f0:	1995      	adds	r5, r2, r6
    11f2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    11f4:	4c12      	ldr	r4, [pc, #72]	; (1240 <spi_cmd+0x178>)
    11f6:	005b      	lsls	r3, r3, #1
    11f8:	7810      	ldrb	r0, [r2, #0]
    11fa:	4043      	eors	r3, r0
    11fc:	5ce3      	ldrb	r3, [r4, r3]
    11fe:	3201      	adds	r2, #1
	while (len--)
    1200:	42aa      	cmp	r2, r5
    1202:	d1f8      	bne.n	11f6 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1204:	005b      	lsls	r3, r3, #1
    1206:	aa01      	add	r2, sp, #4
    1208:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    120a:	b289      	uxth	r1, r1
    120c:	a801      	add	r0, sp, #4
    120e:	4b0d      	ldr	r3, [pc, #52]	; (1244 <spi_cmd+0x17c>)
    1210:	4798      	blx	r3
    1212:	2301      	movs	r3, #1
    1214:	2800      	cmp	r0, #0
    1216:	d1d9      	bne.n	11cc <spi_cmd+0x104>
}
    1218:	0018      	movs	r0, r3
    121a:	b004      	add	sp, #16
    121c:	bd70      	pop	{r4, r5, r6, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	00004798 	.word	0x00004798
    1224:	2000051c 	.word	0x2000051c
    1228:	000047d4 	.word	0x000047d4
    122c:	000046dc 	.word	0x000046dc
    1230:	00003529 	.word	0x00003529
    1234:	00004be8 	.word	0x00004be8
    1238:	00003645 	.word	0x00003645
    123c:	0000355d 	.word	0x0000355d
    1240:	00004850 	.word	0x00004850
    1244:	000010a9 	.word	0x000010a9

00001248 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	b082      	sub	sp, #8
    124c:	0004      	movs	r4, r0
    124e:	000a      	movs	r2, r1
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    1250:	2830      	cmp	r0, #48	; 0x30
    1252:	d917      	bls.n	1284 <spi_write_reg+0x3c>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    1254:	2300      	movs	r3, #0
		cmd = CMD_SINGLE_WRITE;
    1256:	25c9      	movs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    1258:	9300      	str	r3, [sp, #0]
    125a:	2304      	movs	r3, #4
    125c:	0021      	movs	r1, r4
    125e:	0028      	movs	r0, r5
    1260:	4e16      	ldr	r6, [pc, #88]	; (12bc <spi_write_reg+0x74>)
    1262:	47b0      	blx	r6
	if (result != N_OK) {
    1264:	2801      	cmp	r0, #1
    1266:	d010      	beq.n	128a <spi_write_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    1268:	4a15      	ldr	r2, [pc, #84]	; (12c0 <spi_write_reg+0x78>)
    126a:	4916      	ldr	r1, [pc, #88]	; (12c4 <spi_write_reg+0x7c>)
    126c:	4816      	ldr	r0, [pc, #88]	; (12c8 <spi_write_reg+0x80>)
    126e:	4d17      	ldr	r5, [pc, #92]	; (12cc <spi_write_reg+0x84>)
    1270:	47a8      	blx	r5
    1272:	0021      	movs	r1, r4
    1274:	4816      	ldr	r0, [pc, #88]	; (12d0 <spi_write_reg+0x88>)
    1276:	47a8      	blx	r5
    1278:	200d      	movs	r0, #13
    127a:	4b16      	ldr	r3, [pc, #88]	; (12d4 <spi_write_reg+0x8c>)
    127c:	4798      	blx	r3
		return N_FAIL;
    127e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
    1280:	b002      	add	sp, #8
    1282:	bd70      	pop	{r4, r5, r6, pc}
		clockless = 1;
    1284:	2301      	movs	r3, #1
		cmd = CMD_INTERNAL_WRITE;
    1286:	25c3      	movs	r5, #195	; 0xc3
    1288:	e7e6      	b.n	1258 <spi_write_reg+0x10>
	result = spi_cmd_rsp(cmd);
    128a:	0028      	movs	r0, r5
    128c:	4b12      	ldr	r3, [pc, #72]	; (12d8 <spi_write_reg+0x90>)
    128e:	4798      	blx	r3
	if (result != N_OK) {
    1290:	2801      	cmp	r0, #1
    1292:	d0f5      	beq.n	1280 <spi_write_reg+0x38>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    1294:	4a11      	ldr	r2, [pc, #68]	; (12dc <spi_write_reg+0x94>)
    1296:	490b      	ldr	r1, [pc, #44]	; (12c4 <spi_write_reg+0x7c>)
    1298:	480b      	ldr	r0, [pc, #44]	; (12c8 <spi_write_reg+0x80>)
    129a:	4d0c      	ldr	r5, [pc, #48]	; (12cc <spi_write_reg+0x84>)
    129c:	47a8      	blx	r5
    129e:	0021      	movs	r1, r4
    12a0:	480f      	ldr	r0, [pc, #60]	; (12e0 <spi_write_reg+0x98>)
    12a2:	47a8      	blx	r5
    12a4:	200d      	movs	r0, #13
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <spi_write_reg+0x8c>)
    12a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    12aa:	2300      	movs	r3, #0
    12ac:	9300      	str	r3, [sp, #0]
    12ae:	2200      	movs	r2, #0
    12b0:	2100      	movs	r1, #0
    12b2:	20cf      	movs	r0, #207	; 0xcf
    12b4:	4c01      	ldr	r4, [pc, #4]	; (12bc <spi_write_reg+0x74>)
    12b6:	47a0      	blx	r4
		return N_FAIL;
    12b8:	2000      	movs	r0, #0
    12ba:	e7e1      	b.n	1280 <spi_write_reg+0x38>
    12bc:	000010c9 	.word	0x000010c9
    12c0:	000001ff 	.word	0x000001ff
    12c4:	00004808 	.word	0x00004808
    12c8:	000046dc 	.word	0x000046dc
    12cc:	00003529 	.word	0x00003529
    12d0:	00004d90 	.word	0x00004d90
    12d4:	0000355d 	.word	0x0000355d
    12d8:	00000e91 	.word	0x00000e91
    12dc:	00000205 	.word	0x00000205
    12e0:	00004dbc 	.word	0x00004dbc

000012e4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    12e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e6:	b087      	sub	sp, #28
    12e8:	0004      	movs	r4, r0
    12ea:	9103      	str	r1, [sp, #12]
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    12ec:	28ff      	cmp	r0, #255	; 0xff
    12ee:	d918      	bls.n	1322 <spi_read_reg+0x3e>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    12f0:	2700      	movs	r7, #0
		cmd = CMD_SINGLE_READ;
    12f2:	25ca      	movs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    12f4:	9700      	str	r7, [sp, #0]
    12f6:	2304      	movs	r3, #4
    12f8:	2200      	movs	r2, #0
    12fa:	0021      	movs	r1, r4
    12fc:	0028      	movs	r0, r5
    12fe:	4e2b      	ldr	r6, [pc, #172]	; (13ac <spi_read_reg+0xc8>)
    1300:	47b0      	blx	r6
	if (result != N_OK) {
    1302:	2801      	cmp	r0, #1
    1304:	d010      	beq.n	1328 <spi_read_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    1306:	4a2a      	ldr	r2, [pc, #168]	; (13b0 <spi_read_reg+0xcc>)
    1308:	492a      	ldr	r1, [pc, #168]	; (13b4 <spi_read_reg+0xd0>)
    130a:	482b      	ldr	r0, [pc, #172]	; (13b8 <spi_read_reg+0xd4>)
    130c:	4d2b      	ldr	r5, [pc, #172]	; (13bc <spi_read_reg+0xd8>)
    130e:	47a8      	blx	r5
    1310:	0021      	movs	r1, r4
    1312:	482b      	ldr	r0, [pc, #172]	; (13c0 <spi_read_reg+0xdc>)
    1314:	47a8      	blx	r5
    1316:	200d      	movs	r0, #13
    1318:	4b2a      	ldr	r3, [pc, #168]	; (13c4 <spi_read_reg+0xe0>)
    131a:	4798      	blx	r3
		return N_FAIL;
    131c:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
    131e:	b007      	add	sp, #28
    1320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		clockless = 1;
    1322:	2701      	movs	r7, #1
		cmd = CMD_INTERNAL_READ;
    1324:	25c4      	movs	r5, #196	; 0xc4
    1326:	e7e5      	b.n	12f4 <spi_read_reg+0x10>
	result = spi_cmd_rsp(cmd);
    1328:	0028      	movs	r0, r5
    132a:	4b27      	ldr	r3, [pc, #156]	; (13c8 <spi_read_reg+0xe4>)
    132c:	4798      	blx	r3
	if (result != N_OK) {
    132e:	2801      	cmp	r0, #1
    1330:	d013      	beq.n	135a <spi_read_reg+0x76>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    1332:	4a26      	ldr	r2, [pc, #152]	; (13cc <spi_read_reg+0xe8>)
    1334:	491f      	ldr	r1, [pc, #124]	; (13b4 <spi_read_reg+0xd0>)
    1336:	4820      	ldr	r0, [pc, #128]	; (13b8 <spi_read_reg+0xd4>)
    1338:	4d20      	ldr	r5, [pc, #128]	; (13bc <spi_read_reg+0xd8>)
    133a:	47a8      	blx	r5
    133c:	0021      	movs	r1, r4
    133e:	4824      	ldr	r0, [pc, #144]	; (13d0 <spi_read_reg+0xec>)
    1340:	47a8      	blx	r5
    1342:	200d      	movs	r0, #13
    1344:	4b1f      	ldr	r3, [pc, #124]	; (13c4 <spi_read_reg+0xe0>)
    1346:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    1348:	2300      	movs	r3, #0
    134a:	9300      	str	r3, [sp, #0]
    134c:	2200      	movs	r2, #0
    134e:	2100      	movs	r1, #0
    1350:	20cf      	movs	r0, #207	; 0xcf
    1352:	4c16      	ldr	r4, [pc, #88]	; (13ac <spi_read_reg+0xc8>)
    1354:	47a0      	blx	r4
		return N_FAIL;
    1356:	2000      	movs	r0, #0
    1358:	e7e1      	b.n	131e <spi_read_reg+0x3a>
	result = spi_data_read(&tmp[0], 4, clockless);
    135a:	003a      	movs	r2, r7
    135c:	2104      	movs	r1, #4
    135e:	a805      	add	r0, sp, #20
    1360:	4b1c      	ldr	r3, [pc, #112]	; (13d4 <spi_read_reg+0xf0>)
    1362:	4798      	blx	r3
	if (result != N_OK) {
    1364:	2801      	cmp	r0, #1
    1366:	d10d      	bne.n	1384 <spi_read_reg+0xa0>
		((uint32)tmp[1] << 8) |
    1368:	aa05      	add	r2, sp, #20
    136a:	7853      	ldrb	r3, [r2, #1]
    136c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    136e:	7891      	ldrb	r1, [r2, #2]
    1370:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    1372:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    1374:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    1376:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    1378:	78d2      	ldrb	r2, [r2, #3]
    137a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    137c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    137e:	9a03      	ldr	r2, [sp, #12]
    1380:	6013      	str	r3, [r2, #0]
	return N_OK;
    1382:	e7cc      	b.n	131e <spi_read_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    1384:	4a14      	ldr	r2, [pc, #80]	; (13d8 <spi_read_reg+0xf4>)
    1386:	490b      	ldr	r1, [pc, #44]	; (13b4 <spi_read_reg+0xd0>)
    1388:	480b      	ldr	r0, [pc, #44]	; (13b8 <spi_read_reg+0xd4>)
    138a:	4b0c      	ldr	r3, [pc, #48]	; (13bc <spi_read_reg+0xd8>)
    138c:	4798      	blx	r3
    138e:	4813      	ldr	r0, [pc, #76]	; (13dc <spi_read_reg+0xf8>)
    1390:	4b13      	ldr	r3, [pc, #76]	; (13e0 <spi_read_reg+0xfc>)
    1392:	4798      	blx	r3
    1394:	200d      	movs	r0, #13
    1396:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <spi_read_reg+0xe0>)
    1398:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    139a:	2300      	movs	r3, #0
    139c:	9300      	str	r3, [sp, #0]
    139e:	2200      	movs	r2, #0
    13a0:	2100      	movs	r1, #0
    13a2:	20cf      	movs	r0, #207	; 0xcf
    13a4:	4c01      	ldr	r4, [pc, #4]	; (13ac <spi_read_reg+0xc8>)
    13a6:	47a0      	blx	r4
		return N_FAIL;
    13a8:	2000      	movs	r0, #0
    13aa:	e7b8      	b.n	131e <spi_read_reg+0x3a>
    13ac:	000010c9 	.word	0x000010c9
    13b0:	00000259 	.word	0x00000259
    13b4:	00004828 	.word	0x00004828
    13b8:	000046dc 	.word	0x000046dc
    13bc:	00003529 	.word	0x00003529
    13c0:	00004d10 	.word	0x00004d10
    13c4:	0000355d 	.word	0x0000355d
    13c8:	00000e91 	.word	0x00000e91
    13cc:	0000025f 	.word	0x0000025f
    13d0:	00004d3c 	.word	0x00004d3c
    13d4:	00000f65 	.word	0x00000f65
    13d8:	00000267 	.word	0x00000267
    13dc:	00004d70 	.word	0x00004d70
    13e0:	00003645 	.word	0x00003645

000013e4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    13e4:	b500      	push	{lr}
    13e6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    13e8:	a901      	add	r1, sp, #4
    13ea:	4b02      	ldr	r3, [pc, #8]	; (13f4 <nm_spi_read_reg+0x10>)
    13ec:	4798      	blx	r3

	return u32Val;
}
    13ee:	9801      	ldr	r0, [sp, #4]
    13f0:	b003      	add	sp, #12
    13f2:	bd00      	pop	{pc}
    13f4:	000012e5 	.word	0x000012e5

000013f8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    13f8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <nm_spi_read_reg_with_ret+0x14>)
    13fc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    13fe:	2300      	movs	r3, #0
    1400:	2801      	cmp	r0, #1
    1402:	d101      	bne.n	1408 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    1404:	0018      	movs	r0, r3
    1406:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    1408:	3b06      	subs	r3, #6
    140a:	e7fb      	b.n	1404 <nm_spi_read_reg_with_ret+0xc>
    140c:	000012e5 	.word	0x000012e5

00001410 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1410:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    1412:	4b04      	ldr	r3, [pc, #16]	; (1424 <nm_spi_write_reg+0x14>)
    1414:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1416:	2300      	movs	r3, #0
    1418:	2801      	cmp	r0, #1
    141a:	d101      	bne.n	1420 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    141c:	0018      	movs	r0, r3
    141e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    1420:	3b06      	subs	r3, #6
    1422:	e7fb      	b.n	141c <nm_spi_write_reg+0xc>
    1424:	00001249 	.word	0x00001249

00001428 <nm_spi_init>:
{
    1428:	b510      	push	{r4, lr}
    142a:	b082      	sub	sp, #8
	uint32 reg =0;
    142c:	2300      	movs	r3, #0
    142e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    1430:	4a36      	ldr	r2, [pc, #216]	; (150c <nm_spi_init+0xe4>)
    1432:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    1434:	4669      	mov	r1, sp
    1436:	4836      	ldr	r0, [pc, #216]	; (1510 <nm_spi_init+0xe8>)
    1438:	4b36      	ldr	r3, [pc, #216]	; (1514 <nm_spi_init+0xec>)
    143a:	4798      	blx	r3
    143c:	2800      	cmp	r0, #0
    143e:	d028      	beq.n	1492 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    1440:	4b32      	ldr	r3, [pc, #200]	; (150c <nm_spi_init+0xe4>)
    1442:	781b      	ldrb	r3, [r3, #0]
    1444:	2b00      	cmp	r3, #0
    1446:	d10d      	bne.n	1464 <nm_spi_init+0x3c>
		reg &= ~0x70;
    1448:	337c      	adds	r3, #124	; 0x7c
    144a:	9900      	ldr	r1, [sp, #0]
    144c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    144e:	3b2c      	subs	r3, #44	; 0x2c
    1450:	4319      	orrs	r1, r3
    1452:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    1454:	482e      	ldr	r0, [pc, #184]	; (1510 <nm_spi_init+0xe8>)
    1456:	4b30      	ldr	r3, [pc, #192]	; (1518 <nm_spi_init+0xf0>)
    1458:	4798      	blx	r3
    145a:	1e04      	subs	r4, r0, #0
    145c:	d03a      	beq.n	14d4 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    145e:	2201      	movs	r2, #1
    1460:	4b2a      	ldr	r3, [pc, #168]	; (150c <nm_spi_init+0xe4>)
    1462:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    1464:	a901      	add	r1, sp, #4
    1466:	2080      	movs	r0, #128	; 0x80
    1468:	0140      	lsls	r0, r0, #5
    146a:	4b2a      	ldr	r3, [pc, #168]	; (1514 <nm_spi_init+0xec>)
    146c:	4798      	blx	r3
    146e:	2800      	cmp	r0, #0
    1470:	d03c      	beq.n	14ec <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    1472:	4c27      	ldr	r4, [pc, #156]	; (1510 <nm_spi_init+0xe8>)
    1474:	0020      	movs	r0, r4
    1476:	4b29      	ldr	r3, [pc, #164]	; (151c <nm_spi_init+0xf4>)
    1478:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    147a:	2370      	movs	r3, #112	; 0x70
    147c:	0001      	movs	r1, r0
    147e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    1480:	2050      	movs	r0, #80	; 0x50
    1482:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    1484:	0020      	movs	r0, r4
    1486:	4b26      	ldr	r3, [pc, #152]	; (1520 <nm_spi_init+0xf8>)
    1488:	4798      	blx	r3
	return M2M_SUCCESS;
    148a:	2400      	movs	r4, #0
}
    148c:	0020      	movs	r0, r4
    148e:	b002      	add	sp, #8
    1490:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    1492:	2201      	movs	r2, #1
    1494:	4b1d      	ldr	r3, [pc, #116]	; (150c <nm_spi_init+0xe4>)
    1496:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    1498:	4a22      	ldr	r2, [pc, #136]	; (1524 <nm_spi_init+0xfc>)
    149a:	4923      	ldr	r1, [pc, #140]	; (1528 <nm_spi_init+0x100>)
    149c:	4823      	ldr	r0, [pc, #140]	; (152c <nm_spi_init+0x104>)
    149e:	4b24      	ldr	r3, [pc, #144]	; (1530 <nm_spi_init+0x108>)
    14a0:	4798      	blx	r3
    14a2:	4824      	ldr	r0, [pc, #144]	; (1534 <nm_spi_init+0x10c>)
    14a4:	4b24      	ldr	r3, [pc, #144]	; (1538 <nm_spi_init+0x110>)
    14a6:	4798      	blx	r3
    14a8:	200d      	movs	r0, #13
    14aa:	4b24      	ldr	r3, [pc, #144]	; (153c <nm_spi_init+0x114>)
    14ac:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    14ae:	4669      	mov	r1, sp
    14b0:	4817      	ldr	r0, [pc, #92]	; (1510 <nm_spi_init+0xe8>)
    14b2:	4b18      	ldr	r3, [pc, #96]	; (1514 <nm_spi_init+0xec>)
    14b4:	4798      	blx	r3
    14b6:	1e04      	subs	r4, r0, #0
    14b8:	d1c2      	bne.n	1440 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    14ba:	22b7      	movs	r2, #183	; 0xb7
    14bc:	0092      	lsls	r2, r2, #2
    14be:	491a      	ldr	r1, [pc, #104]	; (1528 <nm_spi_init+0x100>)
    14c0:	481a      	ldr	r0, [pc, #104]	; (152c <nm_spi_init+0x104>)
    14c2:	4b1b      	ldr	r3, [pc, #108]	; (1530 <nm_spi_init+0x108>)
    14c4:	4798      	blx	r3
    14c6:	481e      	ldr	r0, [pc, #120]	; (1540 <nm_spi_init+0x118>)
    14c8:	4b1b      	ldr	r3, [pc, #108]	; (1538 <nm_spi_init+0x110>)
    14ca:	4798      	blx	r3
    14cc:	200d      	movs	r0, #13
    14ce:	4b1b      	ldr	r3, [pc, #108]	; (153c <nm_spi_init+0x114>)
    14d0:	4798      	blx	r3
			return 0;
    14d2:	e7db      	b.n	148c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    14d4:	4a1b      	ldr	r2, [pc, #108]	; (1544 <nm_spi_init+0x11c>)
    14d6:	4914      	ldr	r1, [pc, #80]	; (1528 <nm_spi_init+0x100>)
    14d8:	4814      	ldr	r0, [pc, #80]	; (152c <nm_spi_init+0x104>)
    14da:	4b15      	ldr	r3, [pc, #84]	; (1530 <nm_spi_init+0x108>)
    14dc:	4798      	blx	r3
    14de:	481a      	ldr	r0, [pc, #104]	; (1548 <nm_spi_init+0x120>)
    14e0:	4b15      	ldr	r3, [pc, #84]	; (1538 <nm_spi_init+0x110>)
    14e2:	4798      	blx	r3
    14e4:	200d      	movs	r0, #13
    14e6:	4b15      	ldr	r3, [pc, #84]	; (153c <nm_spi_init+0x114>)
    14e8:	4798      	blx	r3
			return 0;
    14ea:	e7cf      	b.n	148c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    14ec:	22bc      	movs	r2, #188	; 0xbc
    14ee:	0092      	lsls	r2, r2, #2
    14f0:	490d      	ldr	r1, [pc, #52]	; (1528 <nm_spi_init+0x100>)
    14f2:	480e      	ldr	r0, [pc, #56]	; (152c <nm_spi_init+0x104>)
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <nm_spi_init+0x108>)
    14f6:	4798      	blx	r3
    14f8:	4814      	ldr	r0, [pc, #80]	; (154c <nm_spi_init+0x124>)
    14fa:	4b0f      	ldr	r3, [pc, #60]	; (1538 <nm_spi_init+0x110>)
    14fc:	4798      	blx	r3
    14fe:	200d      	movs	r0, #13
    1500:	4b0e      	ldr	r3, [pc, #56]	; (153c <nm_spi_init+0x114>)
    1502:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    1504:	2406      	movs	r4, #6
    1506:	4264      	negs	r4, r4
    1508:	e7c0      	b.n	148c <nm_spi_init+0x64>
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	2000051c 	.word	0x2000051c
    1510:	0000e824 	.word	0x0000e824
    1514:	000012e5 	.word	0x000012e5
    1518:	00001249 	.word	0x00001249
    151c:	000013e5 	.word	0x000013e5
    1520:	00001411 	.word	0x00001411
    1524:	000002d9 	.word	0x000002d9
    1528:	00004844 	.word	0x00004844
    152c:	000046dc 	.word	0x000046dc
    1530:	00003529 	.word	0x00003529
    1534:	00004950 	.word	0x00004950
    1538:	00003645 	.word	0x00003645
    153c:	0000355d 	.word	0x0000355d
    1540:	000049a0 	.word	0x000049a0
    1544:	000002e6 	.word	0x000002e6
    1548:	000049cc 	.word	0x000049cc
    154c:	00004a00 	.word	0x00004a00

00001550 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1550:	b5f0      	push	{r4, r5, r6, r7, lr}
    1552:	b083      	sub	sp, #12
    1554:	0004      	movs	r4, r0
    1556:	000e      	movs	r6, r1
    1558:	0015      	movs	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    155a:	2300      	movs	r3, #0
    155c:	9300      	str	r3, [sp, #0]
    155e:	0013      	movs	r3, r2
    1560:	2200      	movs	r2, #0
    1562:	0001      	movs	r1, r0
    1564:	20c8      	movs	r0, #200	; 0xc8
    1566:	4f24      	ldr	r7, [pc, #144]	; (15f8 <nm_spi_read_block+0xa8>)
    1568:	47b8      	blx	r7
	if (result != N_OK) {
    156a:	2801      	cmp	r0, #1
    156c:	d00f      	beq.n	158e <nm_spi_read_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    156e:	22a2      	movs	r2, #162	; 0xa2
    1570:	0092      	lsls	r2, r2, #2
    1572:	4922      	ldr	r1, [pc, #136]	; (15fc <nm_spi_read_block+0xac>)
    1574:	4822      	ldr	r0, [pc, #136]	; (1600 <nm_spi_read_block+0xb0>)
    1576:	4d23      	ldr	r5, [pc, #140]	; (1604 <nm_spi_read_block+0xb4>)
    1578:	47a8      	blx	r5
    157a:	0021      	movs	r1, r4
    157c:	4822      	ldr	r0, [pc, #136]	; (1608 <nm_spi_read_block+0xb8>)
    157e:	47a8      	blx	r5
    1580:	200d      	movs	r0, #13
    1582:	4b22      	ldr	r3, [pc, #136]	; (160c <nm_spi_read_block+0xbc>)
    1584:	4798      	blx	r3
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    1586:	2006      	movs	r0, #6
    1588:	4240      	negs	r0, r0

	return s8Ret;
}
    158a:	b003      	add	sp, #12
    158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    158e:	20c8      	movs	r0, #200	; 0xc8
    1590:	4b1f      	ldr	r3, [pc, #124]	; (1610 <nm_spi_read_block+0xc0>)
    1592:	4798      	blx	r3
	if (result != N_OK) {
    1594:	2801      	cmp	r0, #1
    1596:	d012      	beq.n	15be <nm_spi_read_block+0x6e>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    1598:	4a1e      	ldr	r2, [pc, #120]	; (1614 <nm_spi_read_block+0xc4>)
    159a:	4918      	ldr	r1, [pc, #96]	; (15fc <nm_spi_read_block+0xac>)
    159c:	4818      	ldr	r0, [pc, #96]	; (1600 <nm_spi_read_block+0xb0>)
    159e:	4d19      	ldr	r5, [pc, #100]	; (1604 <nm_spi_read_block+0xb4>)
    15a0:	47a8      	blx	r5
    15a2:	0021      	movs	r1, r4
    15a4:	481c      	ldr	r0, [pc, #112]	; (1618 <nm_spi_read_block+0xc8>)
    15a6:	47a8      	blx	r5
    15a8:	200d      	movs	r0, #13
    15aa:	4b18      	ldr	r3, [pc, #96]	; (160c <nm_spi_read_block+0xbc>)
    15ac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    15ae:	2300      	movs	r3, #0
    15b0:	9300      	str	r3, [sp, #0]
    15b2:	2200      	movs	r2, #0
    15b4:	2100      	movs	r1, #0
    15b6:	20cf      	movs	r0, #207	; 0xcf
    15b8:	4c0f      	ldr	r4, [pc, #60]	; (15f8 <nm_spi_read_block+0xa8>)
    15ba:	47a0      	blx	r4
    15bc:	e7e3      	b.n	1586 <nm_spi_read_block+0x36>
	result = spi_data_read(buf, size,0);
    15be:	2200      	movs	r2, #0
    15c0:	0029      	movs	r1, r5
    15c2:	0030      	movs	r0, r6
    15c4:	4b15      	ldr	r3, [pc, #84]	; (161c <nm_spi_read_block+0xcc>)
    15c6:	4798      	blx	r3
    15c8:	0003      	movs	r3, r0
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    15ca:	2000      	movs	r0, #0
	if (result != N_OK) {
    15cc:	2b01      	cmp	r3, #1
    15ce:	d0dc      	beq.n	158a <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    15d0:	22a6      	movs	r2, #166	; 0xa6
    15d2:	0092      	lsls	r2, r2, #2
    15d4:	4909      	ldr	r1, [pc, #36]	; (15fc <nm_spi_read_block+0xac>)
    15d6:	480a      	ldr	r0, [pc, #40]	; (1600 <nm_spi_read_block+0xb0>)
    15d8:	4b0a      	ldr	r3, [pc, #40]	; (1604 <nm_spi_read_block+0xb4>)
    15da:	4798      	blx	r3
    15dc:	4810      	ldr	r0, [pc, #64]	; (1620 <nm_spi_read_block+0xd0>)
    15de:	4b11      	ldr	r3, [pc, #68]	; (1624 <nm_spi_read_block+0xd4>)
    15e0:	4798      	blx	r3
    15e2:	200d      	movs	r0, #13
    15e4:	4b09      	ldr	r3, [pc, #36]	; (160c <nm_spi_read_block+0xbc>)
    15e6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    15e8:	2300      	movs	r3, #0
    15ea:	9300      	str	r3, [sp, #0]
    15ec:	2200      	movs	r2, #0
    15ee:	2100      	movs	r1, #0
    15f0:	20cf      	movs	r0, #207	; 0xcf
    15f2:	4c01      	ldr	r4, [pc, #4]	; (15f8 <nm_spi_read_block+0xa8>)
    15f4:	47a0      	blx	r4
    15f6:	e7c6      	b.n	1586 <nm_spi_read_block+0x36>
    15f8:	000010c9 	.word	0x000010c9
    15fc:	00004838 	.word	0x00004838
    1600:	000046dc 	.word	0x000046dc
    1604:	00003529 	.word	0x00003529
    1608:	00004a24 	.word	0x00004a24
    160c:	0000355d 	.word	0x0000355d
    1610:	00000e91 	.word	0x00000e91
    1614:	0000028e 	.word	0x0000028e
    1618:	00004a54 	.word	0x00004a54
    161c:	00000f65 	.word	0x00000f65
    1620:	00004a8c 	.word	0x00004a8c
    1624:	00003645 	.word	0x00003645

00001628 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1628:	b5f0      	push	{r4, r5, r6, r7, lr}
    162a:	46d6      	mov	lr, sl
    162c:	b500      	push	{lr}
    162e:	b086      	sub	sp, #24
    1630:	0004      	movs	r4, r0
    1632:	468a      	mov	sl, r1
    1634:	0015      	movs	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    1636:	2300      	movs	r3, #0
    1638:	9300      	str	r3, [sp, #0]
    163a:	0013      	movs	r3, r2
    163c:	2200      	movs	r2, #0
    163e:	0001      	movs	r1, r0
    1640:	20c7      	movs	r0, #199	; 0xc7
    1642:	4e53      	ldr	r6, [pc, #332]	; (1790 <nm_spi_write_block+0x168>)
    1644:	47b0      	blx	r6
	if (result != N_OK) {
    1646:	2801      	cmp	r0, #1
    1648:	d010      	beq.n	166c <nm_spi_write_block+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    164a:	4a52      	ldr	r2, [pc, #328]	; (1794 <nm_spi_write_block+0x16c>)
    164c:	4952      	ldr	r1, [pc, #328]	; (1798 <nm_spi_write_block+0x170>)
    164e:	4853      	ldr	r0, [pc, #332]	; (179c <nm_spi_write_block+0x174>)
    1650:	4d53      	ldr	r5, [pc, #332]	; (17a0 <nm_spi_write_block+0x178>)
    1652:	47a8      	blx	r5
    1654:	0021      	movs	r1, r4
    1656:	4853      	ldr	r0, [pc, #332]	; (17a4 <nm_spi_write_block+0x17c>)
    1658:	47a8      	blx	r5
    165a:	200d      	movs	r0, #13
    165c:	4b52      	ldr	r3, [pc, #328]	; (17a8 <nm_spi_write_block+0x180>)
    165e:	4798      	blx	r3
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    1660:	2006      	movs	r0, #6
    1662:	4240      	negs	r0, r0

	return s8Ret;
}
    1664:	b006      	add	sp, #24
    1666:	bc04      	pop	{r2}
    1668:	4692      	mov	sl, r2
    166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    166c:	20c7      	movs	r0, #199	; 0xc7
    166e:	4b4f      	ldr	r3, [pc, #316]	; (17ac <nm_spi_write_block+0x184>)
    1670:	4798      	blx	r3
	if (result != N_OK) {
    1672:	2801      	cmp	r0, #1
    1674:	d012      	beq.n	169c <nm_spi_write_block+0x74>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    1676:	4a4e      	ldr	r2, [pc, #312]	; (17b0 <nm_spi_write_block+0x188>)
    1678:	4947      	ldr	r1, [pc, #284]	; (1798 <nm_spi_write_block+0x170>)
    167a:	4848      	ldr	r0, [pc, #288]	; (179c <nm_spi_write_block+0x174>)
    167c:	4d48      	ldr	r5, [pc, #288]	; (17a0 <nm_spi_write_block+0x178>)
    167e:	47a8      	blx	r5
    1680:	0021      	movs	r1, r4
    1682:	484c      	ldr	r0, [pc, #304]	; (17b4 <nm_spi_write_block+0x18c>)
    1684:	47a8      	blx	r5
    1686:	200d      	movs	r0, #13
    1688:	4b47      	ldr	r3, [pc, #284]	; (17a8 <nm_spi_write_block+0x180>)
    168a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    168c:	2300      	movs	r3, #0
    168e:	9300      	str	r3, [sp, #0]
    1690:	2200      	movs	r2, #0
    1692:	2100      	movs	r1, #0
    1694:	20cf      	movs	r0, #207	; 0xcf
    1696:	4c3e      	ldr	r4, [pc, #248]	; (1790 <nm_spi_write_block+0x168>)
    1698:	47a0      	blx	r4
    169a:	e7e1      	b.n	1660 <nm_spi_write_block+0x38>
	uint8 cmd, order, crc[2] = {0};
    169c:	2200      	movs	r2, #0
    169e:	ab05      	add	r3, sp, #20
    16a0:	801a      	strh	r2, [r3, #0]
	ix = 0;
    16a2:	2600      	movs	r6, #0
    16a4:	2780      	movs	r7, #128	; 0x80
    16a6:	01bf      	lsls	r7, r7, #6
    16a8:	466b      	mov	r3, sp
    16aa:	81df      	strh	r7, [r3, #14]
    16ac:	e021      	b.n	16f2 <nm_spi_write_block+0xca>
				order = 0x2;
    16ae:	2300      	movs	r3, #0
    16b0:	42af      	cmp	r7, r5
    16b2:	415b      	adcs	r3, r3
    16b4:	3302      	adds	r3, #2
		cmd |= order;
    16b6:	200b      	movs	r0, #11
    16b8:	aa02      	add	r2, sp, #8
    16ba:	4694      	mov	ip, r2
    16bc:	4460      	add	r0, ip
    16be:	2210      	movs	r2, #16
    16c0:	4252      	negs	r2, r2
    16c2:	4313      	orrs	r3, r2
    16c4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    16c6:	2101      	movs	r1, #1
    16c8:	4b3b      	ldr	r3, [pc, #236]	; (17b8 <nm_spi_write_block+0x190>)
    16ca:	4798      	blx	r3
    16cc:	2800      	cmp	r0, #0
    16ce:	d11d      	bne.n	170c <nm_spi_write_block+0xe4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    16d0:	4653      	mov	r3, sl
    16d2:	1998      	adds	r0, r3, r6
    16d4:	0021      	movs	r1, r4
    16d6:	4b38      	ldr	r3, [pc, #224]	; (17b8 <nm_spi_write_block+0x190>)
    16d8:	4798      	blx	r3
    16da:	2800      	cmp	r0, #0
    16dc:	d136      	bne.n	174c <nm_spi_write_block+0x124>
		if (!gu8Crc_off) {
    16de:	4b37      	ldr	r3, [pc, #220]	; (17bc <nm_spi_write_block+0x194>)
    16e0:	781b      	ldrb	r3, [r3, #0]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d03f      	beq.n	1766 <nm_spi_write_block+0x13e>
		ix += nbytes;
    16e6:	19a6      	adds	r6, r4, r6
    16e8:	b236      	sxth	r6, r6
		sz -= nbytes;
    16ea:	1b2d      	subs	r5, r5, r4
    16ec:	b2ad      	uxth	r5, r5
	} while (sz);
    16ee:	2d00      	cmp	r5, #0
    16f0:	d04c      	beq.n	178c <nm_spi_write_block+0x164>
    16f2:	1c2c      	adds	r4, r5, #0
    16f4:	42bd      	cmp	r5, r7
    16f6:	d901      	bls.n	16fc <nm_spi_write_block+0xd4>
    16f8:	466b      	mov	r3, sp
    16fa:	89dc      	ldrh	r4, [r3, #14]
    16fc:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    16fe:	2e00      	cmp	r6, #0
    1700:	d1d5      	bne.n	16ae <nm_spi_write_block+0x86>
				order = 0x3;
    1702:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    1704:	42bd      	cmp	r5, r7
    1706:	d9d6      	bls.n	16b6 <nm_spi_write_block+0x8e>
				order = 0x1;
    1708:	3b02      	subs	r3, #2
    170a:	e7d4      	b.n	16b6 <nm_spi_write_block+0x8e>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    170c:	22de      	movs	r2, #222	; 0xde
    170e:	0052      	lsls	r2, r2, #1
    1710:	492b      	ldr	r1, [pc, #172]	; (17c0 <nm_spi_write_block+0x198>)
    1712:	4822      	ldr	r0, [pc, #136]	; (179c <nm_spi_write_block+0x174>)
    1714:	4b22      	ldr	r3, [pc, #136]	; (17a0 <nm_spi_write_block+0x178>)
    1716:	4798      	blx	r3
    1718:	482a      	ldr	r0, [pc, #168]	; (17c4 <nm_spi_write_block+0x19c>)
    171a:	4b2b      	ldr	r3, [pc, #172]	; (17c8 <nm_spi_write_block+0x1a0>)
    171c:	4798      	blx	r3
    171e:	200d      	movs	r0, #13
    1720:	4b21      	ldr	r3, [pc, #132]	; (17a8 <nm_spi_write_block+0x180>)
    1722:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    1724:	4a29      	ldr	r2, [pc, #164]	; (17cc <nm_spi_write_block+0x1a4>)
    1726:	491c      	ldr	r1, [pc, #112]	; (1798 <nm_spi_write_block+0x170>)
    1728:	481c      	ldr	r0, [pc, #112]	; (179c <nm_spi_write_block+0x174>)
    172a:	4b1d      	ldr	r3, [pc, #116]	; (17a0 <nm_spi_write_block+0x178>)
    172c:	4798      	blx	r3
    172e:	4828      	ldr	r0, [pc, #160]	; (17d0 <nm_spi_write_block+0x1a8>)
    1730:	4b25      	ldr	r3, [pc, #148]	; (17c8 <nm_spi_write_block+0x1a0>)
    1732:	4798      	blx	r3
    1734:	200d      	movs	r0, #13
    1736:	4b1c      	ldr	r3, [pc, #112]	; (17a8 <nm_spi_write_block+0x180>)
    1738:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    173a:	2300      	movs	r3, #0
    173c:	9300      	str	r3, [sp, #0]
    173e:	2200      	movs	r2, #0
    1740:	2100      	movs	r1, #0
    1742:	20cf      	movs	r0, #207	; 0xcf
    1744:	4c12      	ldr	r4, [pc, #72]	; (1790 <nm_spi_write_block+0x168>)
    1746:	47a0      	blx	r4
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    1748:	2000      	movs	r0, #0
    174a:	e78b      	b.n	1664 <nm_spi_write_block+0x3c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    174c:	22c6      	movs	r2, #198	; 0xc6
    174e:	32ff      	adds	r2, #255	; 0xff
    1750:	491b      	ldr	r1, [pc, #108]	; (17c0 <nm_spi_write_block+0x198>)
    1752:	4812      	ldr	r0, [pc, #72]	; (179c <nm_spi_write_block+0x174>)
    1754:	4b12      	ldr	r3, [pc, #72]	; (17a0 <nm_spi_write_block+0x178>)
    1756:	4798      	blx	r3
    1758:	481e      	ldr	r0, [pc, #120]	; (17d4 <nm_spi_write_block+0x1ac>)
    175a:	4b1b      	ldr	r3, [pc, #108]	; (17c8 <nm_spi_write_block+0x1a0>)
    175c:	4798      	blx	r3
    175e:	200d      	movs	r0, #13
    1760:	4b11      	ldr	r3, [pc, #68]	; (17a8 <nm_spi_write_block+0x180>)
    1762:	4798      	blx	r3
    1764:	e7de      	b.n	1724 <nm_spi_write_block+0xfc>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    1766:	2102      	movs	r1, #2
    1768:	a805      	add	r0, sp, #20
    176a:	4b13      	ldr	r3, [pc, #76]	; (17b8 <nm_spi_write_block+0x190>)
    176c:	4798      	blx	r3
    176e:	2800      	cmp	r0, #0
    1770:	d0b9      	beq.n	16e6 <nm_spi_write_block+0xbe>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    1772:	22d0      	movs	r2, #208	; 0xd0
    1774:	32ff      	adds	r2, #255	; 0xff
    1776:	4912      	ldr	r1, [pc, #72]	; (17c0 <nm_spi_write_block+0x198>)
    1778:	4808      	ldr	r0, [pc, #32]	; (179c <nm_spi_write_block+0x174>)
    177a:	4b09      	ldr	r3, [pc, #36]	; (17a0 <nm_spi_write_block+0x178>)
    177c:	4798      	blx	r3
    177e:	4816      	ldr	r0, [pc, #88]	; (17d8 <nm_spi_write_block+0x1b0>)
    1780:	4b11      	ldr	r3, [pc, #68]	; (17c8 <nm_spi_write_block+0x1a0>)
    1782:	4798      	blx	r3
    1784:	200d      	movs	r0, #13
    1786:	4b08      	ldr	r3, [pc, #32]	; (17a8 <nm_spi_write_block+0x180>)
    1788:	4798      	blx	r3
    178a:	e7cb      	b.n	1724 <nm_spi_write_block+0xfc>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    178c:	2000      	movs	r0, #0
    178e:	e769      	b.n	1664 <nm_spi_write_block+0x3c>
    1790:	000010c9 	.word	0x000010c9
    1794:	00000223 	.word	0x00000223
    1798:	00004818 	.word	0x00004818
    179c:	000046dc 	.word	0x000046dc
    17a0:	00003529 	.word	0x00003529
    17a4:	00004ab4 	.word	0x00004ab4
    17a8:	0000355d 	.word	0x0000355d
    17ac:	00000e91 	.word	0x00000e91
    17b0:	00000229 	.word	0x00000229
    17b4:	00004ae4 	.word	0x00004ae4
    17b8:	000010a9 	.word	0x000010a9
    17bc:	2000051c 	.word	0x2000051c
    17c0:	000047f8 	.word	0x000047f8
    17c4:	00004b1c 	.word	0x00004b1c
    17c8:	00003645 	.word	0x00003645
    17cc:	0000023a 	.word	0x0000023a
    17d0:	00004bc0 	.word	0x00004bc0
    17d4:	00004b54 	.word	0x00004b54
    17d8:	00004b88 	.word	0x00004b88

000017dc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    17de:	2000      	movs	r0, #0
    17e0:	4b08      	ldr	r3, [pc, #32]	; (1804 <delay_init+0x28>)
    17e2:	4798      	blx	r3
    17e4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    17e6:	4c08      	ldr	r4, [pc, #32]	; (1808 <delay_init+0x2c>)
    17e8:	21fa      	movs	r1, #250	; 0xfa
    17ea:	0089      	lsls	r1, r1, #2
    17ec:	47a0      	blx	r4
    17ee:	4b07      	ldr	r3, [pc, #28]	; (180c <delay_init+0x30>)
    17f0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    17f2:	4907      	ldr	r1, [pc, #28]	; (1810 <delay_init+0x34>)
    17f4:	0028      	movs	r0, r5
    17f6:	47a0      	blx	r4
    17f8:	4b06      	ldr	r3, [pc, #24]	; (1814 <delay_init+0x38>)
    17fa:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    17fc:	2205      	movs	r2, #5
    17fe:	4b06      	ldr	r3, [pc, #24]	; (1818 <delay_init+0x3c>)
    1800:	601a      	str	r2, [r3, #0]
}
    1802:	bd70      	pop	{r4, r5, r6, pc}
    1804:	00002e7d 	.word	0x00002e7d
    1808:	00003351 	.word	0x00003351
    180c:	20000004 	.word	0x20000004
    1810:	000f4240 	.word	0x000f4240
    1814:	20000008 	.word	0x20000008
    1818:	e000e010 	.word	0xe000e010

0000181c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    181c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    181e:	4b08      	ldr	r3, [pc, #32]	; (1840 <delay_cycles_ms+0x24>)
    1820:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1822:	4a08      	ldr	r2, [pc, #32]	; (1844 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1824:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1826:	2180      	movs	r1, #128	; 0x80
    1828:	0249      	lsls	r1, r1, #9
	while (n--) {
    182a:	3801      	subs	r0, #1
    182c:	d307      	bcc.n	183e <delay_cycles_ms+0x22>
	if (n > 0) {
    182e:	2c00      	cmp	r4, #0
    1830:	d0fb      	beq.n	182a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1832:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1834:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1836:	6813      	ldr	r3, [r2, #0]
    1838:	420b      	tst	r3, r1
    183a:	d0fc      	beq.n	1836 <delay_cycles_ms+0x1a>
    183c:	e7f5      	b.n	182a <delay_cycles_ms+0xe>
	}
}
    183e:	bd30      	pop	{r4, r5, pc}
    1840:	20000004 	.word	0x20000004
    1844:	e000e010 	.word	0xe000e010

00001848 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1848:	4b0c      	ldr	r3, [pc, #48]	; (187c <cpu_irq_enter_critical+0x34>)
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d106      	bne.n	185e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1850:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1854:	2b00      	cmp	r3, #0
    1856:	d007      	beq.n	1868 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1858:	2200      	movs	r2, #0
    185a:	4b09      	ldr	r3, [pc, #36]	; (1880 <cpu_irq_enter_critical+0x38>)
    185c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    185e:	4a07      	ldr	r2, [pc, #28]	; (187c <cpu_irq_enter_critical+0x34>)
    1860:	6813      	ldr	r3, [r2, #0]
    1862:	3301      	adds	r3, #1
    1864:	6013      	str	r3, [r2, #0]
}
    1866:	4770      	bx	lr
  __ASM volatile ("cpsid i");
    1868:	b672      	cpsid	i
    186a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    186e:	2200      	movs	r2, #0
    1870:	4b04      	ldr	r3, [pc, #16]	; (1884 <cpu_irq_enter_critical+0x3c>)
    1872:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1874:	3201      	adds	r2, #1
    1876:	4b02      	ldr	r3, [pc, #8]	; (1880 <cpu_irq_enter_critical+0x38>)
    1878:	701a      	strb	r2, [r3, #0]
    187a:	e7f0      	b.n	185e <cpu_irq_enter_critical+0x16>
    187c:	20000520 	.word	0x20000520
    1880:	20000524 	.word	0x20000524
    1884:	2000000c 	.word	0x2000000c

00001888 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1888:	4b08      	ldr	r3, [pc, #32]	; (18ac <cpu_irq_leave_critical+0x24>)
    188a:	681a      	ldr	r2, [r3, #0]
    188c:	3a01      	subs	r2, #1
    188e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	2b00      	cmp	r3, #0
    1894:	d109      	bne.n	18aa <cpu_irq_leave_critical+0x22>
    1896:	4b06      	ldr	r3, [pc, #24]	; (18b0 <cpu_irq_leave_critical+0x28>)
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d005      	beq.n	18aa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    189e:	2201      	movs	r2, #1
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <cpu_irq_leave_critical+0x2c>)
    18a2:	701a      	strb	r2, [r3, #0]
    18a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
    18a8:	b662      	cpsie	i
	}
}
    18aa:	4770      	bx	lr
    18ac:	20000520 	.word	0x20000520
    18b0:	20000524 	.word	0x20000524
    18b4:	2000000c 	.word	0x2000000c

000018b8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    18b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ba:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    18bc:	ac01      	add	r4, sp, #4
    18be:	2501      	movs	r5, #1
    18c0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    18c2:	2700      	movs	r7, #0
    18c4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    18c6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    18c8:	0021      	movs	r1, r4
    18ca:	2017      	movs	r0, #23
    18cc:	4e06      	ldr	r6, [pc, #24]	; (18e8 <system_board_init+0x30>)
    18ce:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    18d0:	2280      	movs	r2, #128	; 0x80
    18d2:	0412      	lsls	r2, r2, #16
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <system_board_init+0x34>)
    18d6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    18d8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    18da:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    18dc:	0021      	movs	r1, r4
    18de:	2037      	movs	r0, #55	; 0x37
    18e0:	47b0      	blx	r6
}
    18e2:	b003      	add	sp, #12
    18e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	00001a41 	.word	0x00001a41
    18ec:	41004400 	.word	0x41004400

000018f0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    18f0:	4a04      	ldr	r2, [pc, #16]	; (1904 <_extint_enable+0x14>)
    18f2:	7813      	ldrb	r3, [r2, #0]
    18f4:	2102      	movs	r1, #2
    18f6:	430b      	orrs	r3, r1
    18f8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    18fa:	7853      	ldrb	r3, [r2, #1]
    18fc:	b25b      	sxtb	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	dbfb      	blt.n	18fa <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1902:	4770      	bx	lr
    1904:	40001800 	.word	0x40001800

00001908 <_system_extint_init>:
{
    1908:	b500      	push	{lr}
    190a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    190c:	4a12      	ldr	r2, [pc, #72]	; (1958 <_system_extint_init+0x50>)
    190e:	6993      	ldr	r3, [r2, #24]
    1910:	2140      	movs	r1, #64	; 0x40
    1912:	430b      	orrs	r3, r1
    1914:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1916:	a901      	add	r1, sp, #4
    1918:	2300      	movs	r3, #0
    191a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    191c:	2005      	movs	r0, #5
    191e:	4b0f      	ldr	r3, [pc, #60]	; (195c <_system_extint_init+0x54>)
    1920:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1922:	2005      	movs	r0, #5
    1924:	4b0e      	ldr	r3, [pc, #56]	; (1960 <_system_extint_init+0x58>)
    1926:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1928:	4a0e      	ldr	r2, [pc, #56]	; (1964 <_system_extint_init+0x5c>)
    192a:	7813      	ldrb	r3, [r2, #0]
    192c:	2101      	movs	r1, #1
    192e:	430b      	orrs	r3, r1
    1930:	7013      	strb	r3, [r2, #0]
    1932:	7853      	ldrb	r3, [r2, #1]
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	dbfb      	blt.n	1932 <_system_extint_init+0x2a>
    193a:	4b0b      	ldr	r3, [pc, #44]	; (1968 <_system_extint_init+0x60>)
    193c:	0019      	movs	r1, r3
    193e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1940:	2200      	movs	r2, #0
    1942:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1944:	4299      	cmp	r1, r3
    1946:	d1fc      	bne.n	1942 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1948:	2210      	movs	r2, #16
    194a:	4b08      	ldr	r3, [pc, #32]	; (196c <_system_extint_init+0x64>)
    194c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    194e:	4b08      	ldr	r3, [pc, #32]	; (1970 <_system_extint_init+0x68>)
    1950:	4798      	blx	r3
}
    1952:	b003      	add	sp, #12
    1954:	bd00      	pop	{pc}
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	40000400 	.word	0x40000400
    195c:	00002f95 	.word	0x00002f95
    1960:	00002f09 	.word	0x00002f09
    1964:	40001800 	.word	0x40001800
    1968:	20000578 	.word	0x20000578
    196c:	e000e100 	.word	0xe000e100
    1970:	000018f1 	.word	0x000018f1

00001974 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1974:	b5f0      	push	{r4, r5, r6, r7, lr}
    1976:	b083      	sub	sp, #12
    1978:	0005      	movs	r5, r0
    197a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    197c:	a901      	add	r1, sp, #4
    197e:	2300      	movs	r3, #0
    1980:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1982:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1984:	7923      	ldrb	r3, [r4, #4]
    1986:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1988:	7a23      	ldrb	r3, [r4, #8]
    198a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    198c:	7820      	ldrb	r0, [r4, #0]
    198e:	4b15      	ldr	r3, [pc, #84]	; (19e4 <extint_chan_set_config+0x70>)
    1990:	4798      	blx	r3
		return NULL;
    1992:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1994:	2d1f      	cmp	r5, #31
    1996:	d800      	bhi.n	199a <extint_chan_set_config+0x26>
		return eics[eic_index];
    1998:	4813      	ldr	r0, [pc, #76]	; (19e8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    199a:	2207      	movs	r2, #7
    199c:	402a      	ands	r2, r5
    199e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    19a0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    19a2:	7aa3      	ldrb	r3, [r4, #10]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d001      	beq.n	19ac <extint_chan_set_config+0x38>
    19a8:	2308      	movs	r3, #8
    19aa:	431f      	orrs	r7, r3
    19ac:	08eb      	lsrs	r3, r5, #3
    19ae:	009b      	lsls	r3, r3, #2
    19b0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    19b2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    19b4:	260f      	movs	r6, #15
    19b6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    19b8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    19ba:	4097      	lsls	r7, r2
    19bc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    19be:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    19c0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    19c2:	7a63      	ldrb	r3, [r4, #9]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d106      	bne.n	19d6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    19c8:	6943      	ldr	r3, [r0, #20]
    19ca:	2201      	movs	r2, #1
    19cc:	40aa      	lsls	r2, r5
    19ce:	4393      	bics	r3, r2
    19d0:	6143      	str	r3, [r0, #20]
	}
}
    19d2:	b003      	add	sp, #12
    19d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    19d6:	6942      	ldr	r2, [r0, #20]
    19d8:	2301      	movs	r3, #1
    19da:	40ab      	lsls	r3, r5
    19dc:	4313      	orrs	r3, r2
    19de:	6143      	str	r3, [r0, #20]
    19e0:	e7f7      	b.n	19d2 <extint_chan_set_config+0x5e>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	0000308d 	.word	0x0000308d
    19e8:	40001800 	.word	0x40001800

000019ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    19ec:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    19ee:	2200      	movs	r2, #0
    19f0:	4b10      	ldr	r3, [pc, #64]	; (1a34 <EIC_Handler+0x48>)
    19f2:	701a      	strb	r2, [r3, #0]
    19f4:	2300      	movs	r3, #0
    19f6:	4910      	ldr	r1, [pc, #64]	; (1a38 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    19f8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    19fa:	4e10      	ldr	r6, [pc, #64]	; (1a3c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    19fc:	4c0d      	ldr	r4, [pc, #52]	; (1a34 <EIC_Handler+0x48>)
    19fe:	e00a      	b.n	1a16 <EIC_Handler+0x2a>
		return eics[eic_index];
    1a00:	490d      	ldr	r1, [pc, #52]	; (1a38 <EIC_Handler+0x4c>)
    1a02:	e008      	b.n	1a16 <EIC_Handler+0x2a>
    1a04:	7823      	ldrb	r3, [r4, #0]
    1a06:	3301      	adds	r3, #1
    1a08:	b2db      	uxtb	r3, r3
    1a0a:	7023      	strb	r3, [r4, #0]
    1a0c:	2b0f      	cmp	r3, #15
    1a0e:	d810      	bhi.n	1a32 <EIC_Handler+0x46>
		return NULL;
    1a10:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1a12:	2b1f      	cmp	r3, #31
    1a14:	d9f4      	bls.n	1a00 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1a16:	0028      	movs	r0, r5
    1a18:	4018      	ands	r0, r3
    1a1a:	2201      	movs	r2, #1
    1a1c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1a1e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1a20:	4210      	tst	r0, r2
    1a22:	d0ef      	beq.n	1a04 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1a24:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1a26:	009b      	lsls	r3, r3, #2
    1a28:	599b      	ldr	r3, [r3, r6]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d0ea      	beq.n	1a04 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1a2e:	4798      	blx	r3
    1a30:	e7e8      	b.n	1a04 <EIC_Handler+0x18>
			}
		}
	}
}
    1a32:	bd70      	pop	{r4, r5, r6, pc}
    1a34:	200005b8 	.word	0x200005b8
    1a38:	40001800 	.word	0x40001800
    1a3c:	20000578 	.word	0x20000578

00001a40 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a40:	b500      	push	{lr}
    1a42:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a44:	ab01      	add	r3, sp, #4
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a4a:	780a      	ldrb	r2, [r1, #0]
    1a4c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a4e:	784a      	ldrb	r2, [r1, #1]
    1a50:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a52:	788a      	ldrb	r2, [r1, #2]
    1a54:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a56:	0019      	movs	r1, r3
    1a58:	4b01      	ldr	r3, [pc, #4]	; (1a60 <port_pin_set_config+0x20>)
    1a5a:	4798      	blx	r3
}
    1a5c:	b003      	add	sp, #12
    1a5e:	bd00      	pop	{pc}
    1a60:	0000308d 	.word	0x0000308d

00001a64 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1a64:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    1a66:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a68:	2340      	movs	r3, #64	; 0x40
    1a6a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1a6c:	4281      	cmp	r1, r0
    1a6e:	d202      	bcs.n	1a76 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1a70:	0018      	movs	r0, r3
    1a72:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1a74:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1a76:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1a78:	1c63      	adds	r3, r4, #1
    1a7a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1a7c:	4288      	cmp	r0, r1
    1a7e:	d9f9      	bls.n	1a74 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a80:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1a82:	2cff      	cmp	r4, #255	; 0xff
    1a84:	d8f4      	bhi.n	1a70 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1a86:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1a88:	2300      	movs	r3, #0
    1a8a:	e7f1      	b.n	1a70 <_sercom_get_sync_baud_val+0xc>

00001a8c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a8e:	46de      	mov	lr, fp
    1a90:	4657      	mov	r7, sl
    1a92:	464e      	mov	r6, r9
    1a94:	4645      	mov	r5, r8
    1a96:	b5e0      	push	{r5, r6, r7, lr}
    1a98:	b089      	sub	sp, #36	; 0x24
    1a9a:	000c      	movs	r4, r1
    1a9c:	9205      	str	r2, [sp, #20]
    1a9e:	aa12      	add	r2, sp, #72	; 0x48
    1aa0:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1aa2:	0005      	movs	r5, r0
    1aa4:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1aa6:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1aa8:	42a5      	cmp	r5, r4
    1aaa:	d907      	bls.n	1abc <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1aac:	0010      	movs	r0, r2
    1aae:	b009      	add	sp, #36	; 0x24
    1ab0:	bc3c      	pop	{r2, r3, r4, r5}
    1ab2:	4690      	mov	r8, r2
    1ab4:	4699      	mov	r9, r3
    1ab6:	46a2      	mov	sl, r4
    1ab8:	46ab      	mov	fp, r5
    1aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1abc:	2b00      	cmp	r3, #0
    1abe:	d155      	bne.n	1b6c <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1ac0:	0002      	movs	r2, r0
    1ac2:	0008      	movs	r0, r1
    1ac4:	2100      	movs	r1, #0
    1ac6:	4d63      	ldr	r5, [pc, #396]	; (1c54 <_sercom_get_async_baud_val+0x1c8>)
    1ac8:	47a8      	blx	r5
    1aca:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1acc:	0026      	movs	r6, r4
    1ace:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    1ad0:	2300      	movs	r3, #0
    1ad2:	2400      	movs	r4, #0
    1ad4:	9300      	str	r3, [sp, #0]
    1ad6:	9401      	str	r4, [sp, #4]
    1ad8:	2200      	movs	r2, #0
    1ada:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1adc:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1ade:	2120      	movs	r1, #32
    1ae0:	468c      	mov	ip, r1
    1ae2:	391f      	subs	r1, #31
    1ae4:	9602      	str	r6, [sp, #8]
    1ae6:	9703      	str	r7, [sp, #12]
    1ae8:	e014      	b.n	1b14 <_sercom_get_async_baud_val+0x88>
    1aea:	4664      	mov	r4, ip
    1aec:	1a24      	subs	r4, r4, r0
    1aee:	000d      	movs	r5, r1
    1af0:	40e5      	lsrs	r5, r4
    1af2:	46a8      	mov	r8, r5
    1af4:	e015      	b.n	1b22 <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1af6:	9c02      	ldr	r4, [sp, #8]
    1af8:	9d03      	ldr	r5, [sp, #12]
    1afa:	1b12      	subs	r2, r2, r4
    1afc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1afe:	464d      	mov	r5, r9
    1b00:	9e00      	ldr	r6, [sp, #0]
    1b02:	9f01      	ldr	r7, [sp, #4]
    1b04:	4335      	orrs	r5, r6
    1b06:	003c      	movs	r4, r7
    1b08:	4646      	mov	r6, r8
    1b0a:	4334      	orrs	r4, r6
    1b0c:	9500      	str	r5, [sp, #0]
    1b0e:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    1b10:	3801      	subs	r0, #1
    1b12:	d31d      	bcc.n	1b50 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    1b14:	2420      	movs	r4, #32
    1b16:	4264      	negs	r4, r4
    1b18:	1904      	adds	r4, r0, r4
    1b1a:	d4e6      	bmi.n	1aea <_sercom_get_async_baud_val+0x5e>
    1b1c:	000d      	movs	r5, r1
    1b1e:	40a5      	lsls	r5, r4
    1b20:	46a8      	mov	r8, r5
    1b22:	000c      	movs	r4, r1
    1b24:	4084      	lsls	r4, r0
    1b26:	46a1      	mov	r9, r4
		r = r << 1;
    1b28:	1892      	adds	r2, r2, r2
    1b2a:	415b      	adcs	r3, r3
    1b2c:	0014      	movs	r4, r2
    1b2e:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1b30:	4646      	mov	r6, r8
    1b32:	465f      	mov	r7, fp
    1b34:	423e      	tst	r6, r7
    1b36:	d003      	beq.n	1b40 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    1b38:	000e      	movs	r6, r1
    1b3a:	4326      	orrs	r6, r4
    1b3c:	0032      	movs	r2, r6
    1b3e:	002b      	movs	r3, r5
		if (r >= d) {
    1b40:	9c02      	ldr	r4, [sp, #8]
    1b42:	9d03      	ldr	r5, [sp, #12]
    1b44:	429d      	cmp	r5, r3
    1b46:	d8e3      	bhi.n	1b10 <_sercom_get_async_baud_val+0x84>
    1b48:	d1d5      	bne.n	1af6 <_sercom_get_async_baud_val+0x6a>
    1b4a:	4294      	cmp	r4, r2
    1b4c:	d8e0      	bhi.n	1b10 <_sercom_get_async_baud_val+0x84>
    1b4e:	e7d2      	b.n	1af6 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1b50:	2200      	movs	r2, #0
    1b52:	2301      	movs	r3, #1
    1b54:	9800      	ldr	r0, [sp, #0]
    1b56:	9901      	ldr	r1, [sp, #4]
    1b58:	1a12      	subs	r2, r2, r0
    1b5a:	418b      	sbcs	r3, r1
    1b5c:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    1b5e:	0c13      	lsrs	r3, r2, #16
    1b60:	040a      	lsls	r2, r1, #16
    1b62:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1b64:	9b05      	ldr	r3, [sp, #20]
    1b66:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1b68:	2200      	movs	r2, #0
    1b6a:	e79f      	b.n	1aac <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    1b6c:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1b6e:	2b01      	cmp	r3, #1
    1b70:	d1f8      	bne.n	1b64 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    1b72:	0f63      	lsrs	r3, r4, #29
    1b74:	9304      	str	r3, [sp, #16]
    1b76:	00e3      	lsls	r3, r4, #3
    1b78:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1b7a:	000a      	movs	r2, r1
    1b7c:	2300      	movs	r3, #0
    1b7e:	2100      	movs	r1, #0
    1b80:	4c34      	ldr	r4, [pc, #208]	; (1c54 <_sercom_get_async_baud_val+0x1c8>)
    1b82:	47a0      	blx	r4
    1b84:	0004      	movs	r4, r0
    1b86:	000d      	movs	r5, r1
    1b88:	2300      	movs	r3, #0
    1b8a:	469c      	mov	ip, r3
    1b8c:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    1b8e:	3320      	adds	r3, #32
    1b90:	469b      	mov	fp, r3
    1b92:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    1b94:	4663      	mov	r3, ip
    1b96:	9307      	str	r3, [sp, #28]
    1b98:	e048      	b.n	1c2c <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    1b9a:	4659      	mov	r1, fp
    1b9c:	1bc9      	subs	r1, r1, r7
    1b9e:	0030      	movs	r0, r6
    1ba0:	40c8      	lsrs	r0, r1
    1ba2:	4682      	mov	sl, r0
    1ba4:	e010      	b.n	1bc8 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    1ba6:	9800      	ldr	r0, [sp, #0]
    1ba8:	9901      	ldr	r1, [sp, #4]
    1baa:	1a12      	subs	r2, r2, r0
    1bac:	418b      	sbcs	r3, r1
			q |= bit_shift;
    1bae:	9902      	ldr	r1, [sp, #8]
    1bb0:	4648      	mov	r0, r9
    1bb2:	4301      	orrs	r1, r0
    1bb4:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    1bb6:	3f01      	subs	r7, #1
    1bb8:	d325      	bcc.n	1c06 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    1bba:	2120      	movs	r1, #32
    1bbc:	4249      	negs	r1, r1
    1bbe:	1879      	adds	r1, r7, r1
    1bc0:	d4eb      	bmi.n	1b9a <_sercom_get_async_baud_val+0x10e>
    1bc2:	0030      	movs	r0, r6
    1bc4:	4088      	lsls	r0, r1
    1bc6:	4682      	mov	sl, r0
    1bc8:	0031      	movs	r1, r6
    1bca:	40b9      	lsls	r1, r7
    1bcc:	4689      	mov	r9, r1
		r = r << 1;
    1bce:	1892      	adds	r2, r2, r2
    1bd0:	415b      	adcs	r3, r3
    1bd2:	0010      	movs	r0, r2
    1bd4:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1bd6:	4644      	mov	r4, r8
    1bd8:	464d      	mov	r5, r9
    1bda:	402c      	ands	r4, r5
    1bdc:	46a4      	mov	ip, r4
    1bde:	4654      	mov	r4, sl
    1be0:	9d04      	ldr	r5, [sp, #16]
    1be2:	402c      	ands	r4, r5
    1be4:	46a2      	mov	sl, r4
    1be6:	4664      	mov	r4, ip
    1be8:	4655      	mov	r5, sl
    1bea:	432c      	orrs	r4, r5
    1bec:	d003      	beq.n	1bf6 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    1bee:	0034      	movs	r4, r6
    1bf0:	4304      	orrs	r4, r0
    1bf2:	0022      	movs	r2, r4
    1bf4:	000b      	movs	r3, r1
		if (r >= d) {
    1bf6:	9800      	ldr	r0, [sp, #0]
    1bf8:	9901      	ldr	r1, [sp, #4]
    1bfa:	4299      	cmp	r1, r3
    1bfc:	d8db      	bhi.n	1bb6 <_sercom_get_async_baud_val+0x12a>
    1bfe:	d1d2      	bne.n	1ba6 <_sercom_get_async_baud_val+0x11a>
    1c00:	4290      	cmp	r0, r2
    1c02:	d8d8      	bhi.n	1bb6 <_sercom_get_async_baud_val+0x12a>
    1c04:	e7cf      	b.n	1ba6 <_sercom_get_async_baud_val+0x11a>
    1c06:	9c00      	ldr	r4, [sp, #0]
    1c08:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1c0a:	9902      	ldr	r1, [sp, #8]
    1c0c:	9a07      	ldr	r2, [sp, #28]
    1c0e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    1c10:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    1c12:	4911      	ldr	r1, [pc, #68]	; (1c58 <_sercom_get_async_baud_val+0x1cc>)
    1c14:	428b      	cmp	r3, r1
    1c16:	d914      	bls.n	1c42 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1c18:	9b06      	ldr	r3, [sp, #24]
    1c1a:	3301      	adds	r3, #1
    1c1c:	b2db      	uxtb	r3, r3
    1c1e:	0019      	movs	r1, r3
    1c20:	9306      	str	r3, [sp, #24]
    1c22:	0013      	movs	r3, r2
    1c24:	3301      	adds	r3, #1
    1c26:	9307      	str	r3, [sp, #28]
    1c28:	2908      	cmp	r1, #8
    1c2a:	d008      	beq.n	1c3e <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    1c2c:	2300      	movs	r3, #0
    1c2e:	9302      	str	r3, [sp, #8]
    1c30:	2200      	movs	r2, #0
    1c32:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1c34:	213f      	movs	r1, #63	; 0x3f
    1c36:	9400      	str	r4, [sp, #0]
    1c38:	9501      	str	r5, [sp, #4]
    1c3a:	000f      	movs	r7, r1
    1c3c:	e7bd      	b.n	1bba <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c3e:	2240      	movs	r2, #64	; 0x40
    1c40:	e734      	b.n	1aac <_sercom_get_async_baud_val+0x20>
    1c42:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    1c44:	9906      	ldr	r1, [sp, #24]
    1c46:	2908      	cmp	r1, #8
    1c48:	d100      	bne.n	1c4c <_sercom_get_async_baud_val+0x1c0>
    1c4a:	e72f      	b.n	1aac <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    1c4c:	034a      	lsls	r2, r1, #13
    1c4e:	431a      	orrs	r2, r3
    1c50:	e788      	b.n	1b64 <_sercom_get_async_baud_val+0xd8>
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	00003469 	.word	0x00003469
    1c58:	00001fff 	.word	0x00001fff

00001c5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    1c62:	4b0e      	ldr	r3, [pc, #56]	; (1c9c <sercom_set_gclk_generator+0x40>)
    1c64:	781b      	ldrb	r3, [r3, #0]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d007      	beq.n	1c7a <sercom_set_gclk_generator+0x1e>
    1c6a:	2900      	cmp	r1, #0
    1c6c:	d105      	bne.n	1c7a <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1c6e:	4b0b      	ldr	r3, [pc, #44]	; (1c9c <sercom_set_gclk_generator+0x40>)
    1c70:	785b      	ldrb	r3, [r3, #1]
    1c72:	4283      	cmp	r3, r0
    1c74:	d010      	beq.n	1c98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1c76:	201d      	movs	r0, #29
    1c78:	e00c      	b.n	1c94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1c7a:	a901      	add	r1, sp, #4
    1c7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1c7e:	2013      	movs	r0, #19
    1c80:	4b07      	ldr	r3, [pc, #28]	; (1ca0 <sercom_set_gclk_generator+0x44>)
    1c82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1c84:	2013      	movs	r0, #19
    1c86:	4b07      	ldr	r3, [pc, #28]	; (1ca4 <sercom_set_gclk_generator+0x48>)
    1c88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1c8a:	4b04      	ldr	r3, [pc, #16]	; (1c9c <sercom_set_gclk_generator+0x40>)
    1c8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1c8e:	2201      	movs	r2, #1
    1c90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1c92:	2000      	movs	r0, #0
}
    1c94:	b002      	add	sp, #8
    1c96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1c98:	2000      	movs	r0, #0
    1c9a:	e7fb      	b.n	1c94 <sercom_set_gclk_generator+0x38>
    1c9c:	20000528 	.word	0x20000528
    1ca0:	00002f95 	.word	0x00002f95
    1ca4:	00002f09 	.word	0x00002f09

00001ca8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1ca8:	4b40      	ldr	r3, [pc, #256]	; (1dac <_sercom_get_default_pad+0x104>)
    1caa:	4298      	cmp	r0, r3
    1cac:	d031      	beq.n	1d12 <_sercom_get_default_pad+0x6a>
    1cae:	d90a      	bls.n	1cc6 <_sercom_get_default_pad+0x1e>
    1cb0:	4b3f      	ldr	r3, [pc, #252]	; (1db0 <_sercom_get_default_pad+0x108>)
    1cb2:	4298      	cmp	r0, r3
    1cb4:	d04d      	beq.n	1d52 <_sercom_get_default_pad+0xaa>
    1cb6:	4b3f      	ldr	r3, [pc, #252]	; (1db4 <_sercom_get_default_pad+0x10c>)
    1cb8:	4298      	cmp	r0, r3
    1cba:	d05a      	beq.n	1d72 <_sercom_get_default_pad+0xca>
    1cbc:	4b3e      	ldr	r3, [pc, #248]	; (1db8 <_sercom_get_default_pad+0x110>)
    1cbe:	4298      	cmp	r0, r3
    1cc0:	d037      	beq.n	1d32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1cc2:	2000      	movs	r0, #0
}
    1cc4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1cc6:	4b3d      	ldr	r3, [pc, #244]	; (1dbc <_sercom_get_default_pad+0x114>)
    1cc8:	4298      	cmp	r0, r3
    1cca:	d00c      	beq.n	1ce6 <_sercom_get_default_pad+0x3e>
    1ccc:	4b3c      	ldr	r3, [pc, #240]	; (1dc0 <_sercom_get_default_pad+0x118>)
    1cce:	4298      	cmp	r0, r3
    1cd0:	d1f7      	bne.n	1cc2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cd2:	2901      	cmp	r1, #1
    1cd4:	d017      	beq.n	1d06 <_sercom_get_default_pad+0x5e>
    1cd6:	2900      	cmp	r1, #0
    1cd8:	d05d      	beq.n	1d96 <_sercom_get_default_pad+0xee>
    1cda:	2902      	cmp	r1, #2
    1cdc:	d015      	beq.n	1d0a <_sercom_get_default_pad+0x62>
    1cde:	2903      	cmp	r1, #3
    1ce0:	d015      	beq.n	1d0e <_sercom_get_default_pad+0x66>
	return 0;
    1ce2:	2000      	movs	r0, #0
    1ce4:	e7ee      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ce6:	2901      	cmp	r1, #1
    1ce8:	d007      	beq.n	1cfa <_sercom_get_default_pad+0x52>
    1cea:	2900      	cmp	r1, #0
    1cec:	d051      	beq.n	1d92 <_sercom_get_default_pad+0xea>
    1cee:	2902      	cmp	r1, #2
    1cf0:	d005      	beq.n	1cfe <_sercom_get_default_pad+0x56>
    1cf2:	2903      	cmp	r1, #3
    1cf4:	d005      	beq.n	1d02 <_sercom_get_default_pad+0x5a>
	return 0;
    1cf6:	2000      	movs	r0, #0
    1cf8:	e7e4      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cfa:	4832      	ldr	r0, [pc, #200]	; (1dc4 <_sercom_get_default_pad+0x11c>)
    1cfc:	e7e2      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1cfe:	4832      	ldr	r0, [pc, #200]	; (1dc8 <_sercom_get_default_pad+0x120>)
    1d00:	e7e0      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d02:	4832      	ldr	r0, [pc, #200]	; (1dcc <_sercom_get_default_pad+0x124>)
    1d04:	e7de      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d06:	4832      	ldr	r0, [pc, #200]	; (1dd0 <_sercom_get_default_pad+0x128>)
    1d08:	e7dc      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d0a:	4832      	ldr	r0, [pc, #200]	; (1dd4 <_sercom_get_default_pad+0x12c>)
    1d0c:	e7da      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d0e:	4832      	ldr	r0, [pc, #200]	; (1dd8 <_sercom_get_default_pad+0x130>)
    1d10:	e7d8      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d12:	2901      	cmp	r1, #1
    1d14:	d007      	beq.n	1d26 <_sercom_get_default_pad+0x7e>
    1d16:	2900      	cmp	r1, #0
    1d18:	d03f      	beq.n	1d9a <_sercom_get_default_pad+0xf2>
    1d1a:	2902      	cmp	r1, #2
    1d1c:	d005      	beq.n	1d2a <_sercom_get_default_pad+0x82>
    1d1e:	2903      	cmp	r1, #3
    1d20:	d005      	beq.n	1d2e <_sercom_get_default_pad+0x86>
	return 0;
    1d22:	2000      	movs	r0, #0
    1d24:	e7ce      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d26:	482d      	ldr	r0, [pc, #180]	; (1ddc <_sercom_get_default_pad+0x134>)
    1d28:	e7cc      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d2a:	482d      	ldr	r0, [pc, #180]	; (1de0 <_sercom_get_default_pad+0x138>)
    1d2c:	e7ca      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d2e:	482d      	ldr	r0, [pc, #180]	; (1de4 <_sercom_get_default_pad+0x13c>)
    1d30:	e7c8      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d32:	2901      	cmp	r1, #1
    1d34:	d007      	beq.n	1d46 <_sercom_get_default_pad+0x9e>
    1d36:	2900      	cmp	r1, #0
    1d38:	d031      	beq.n	1d9e <_sercom_get_default_pad+0xf6>
    1d3a:	2902      	cmp	r1, #2
    1d3c:	d005      	beq.n	1d4a <_sercom_get_default_pad+0xa2>
    1d3e:	2903      	cmp	r1, #3
    1d40:	d005      	beq.n	1d4e <_sercom_get_default_pad+0xa6>
	return 0;
    1d42:	2000      	movs	r0, #0
    1d44:	e7be      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d46:	4828      	ldr	r0, [pc, #160]	; (1de8 <_sercom_get_default_pad+0x140>)
    1d48:	e7bc      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d4a:	4828      	ldr	r0, [pc, #160]	; (1dec <_sercom_get_default_pad+0x144>)
    1d4c:	e7ba      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d4e:	4828      	ldr	r0, [pc, #160]	; (1df0 <_sercom_get_default_pad+0x148>)
    1d50:	e7b8      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d52:	2901      	cmp	r1, #1
    1d54:	d007      	beq.n	1d66 <_sercom_get_default_pad+0xbe>
    1d56:	2900      	cmp	r1, #0
    1d58:	d023      	beq.n	1da2 <_sercom_get_default_pad+0xfa>
    1d5a:	2902      	cmp	r1, #2
    1d5c:	d005      	beq.n	1d6a <_sercom_get_default_pad+0xc2>
    1d5e:	2903      	cmp	r1, #3
    1d60:	d005      	beq.n	1d6e <_sercom_get_default_pad+0xc6>
	return 0;
    1d62:	2000      	movs	r0, #0
    1d64:	e7ae      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d66:	4823      	ldr	r0, [pc, #140]	; (1df4 <_sercom_get_default_pad+0x14c>)
    1d68:	e7ac      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d6a:	4823      	ldr	r0, [pc, #140]	; (1df8 <_sercom_get_default_pad+0x150>)
    1d6c:	e7aa      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d6e:	4823      	ldr	r0, [pc, #140]	; (1dfc <_sercom_get_default_pad+0x154>)
    1d70:	e7a8      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d72:	2901      	cmp	r1, #1
    1d74:	d007      	beq.n	1d86 <_sercom_get_default_pad+0xde>
    1d76:	2900      	cmp	r1, #0
    1d78:	d015      	beq.n	1da6 <_sercom_get_default_pad+0xfe>
    1d7a:	2902      	cmp	r1, #2
    1d7c:	d005      	beq.n	1d8a <_sercom_get_default_pad+0xe2>
    1d7e:	2903      	cmp	r1, #3
    1d80:	d005      	beq.n	1d8e <_sercom_get_default_pad+0xe6>
	return 0;
    1d82:	2000      	movs	r0, #0
    1d84:	e79e      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d86:	481e      	ldr	r0, [pc, #120]	; (1e00 <_sercom_get_default_pad+0x158>)
    1d88:	e79c      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d8a:	481e      	ldr	r0, [pc, #120]	; (1e04 <_sercom_get_default_pad+0x15c>)
    1d8c:	e79a      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d8e:	481e      	ldr	r0, [pc, #120]	; (1e08 <_sercom_get_default_pad+0x160>)
    1d90:	e798      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d92:	481e      	ldr	r0, [pc, #120]	; (1e0c <_sercom_get_default_pad+0x164>)
    1d94:	e796      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d96:	2003      	movs	r0, #3
    1d98:	e794      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d9a:	481d      	ldr	r0, [pc, #116]	; (1e10 <_sercom_get_default_pad+0x168>)
    1d9c:	e792      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1d9e:	481d      	ldr	r0, [pc, #116]	; (1e14 <_sercom_get_default_pad+0x16c>)
    1da0:	e790      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1da2:	481d      	ldr	r0, [pc, #116]	; (1e18 <_sercom_get_default_pad+0x170>)
    1da4:	e78e      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1da6:	481d      	ldr	r0, [pc, #116]	; (1e1c <_sercom_get_default_pad+0x174>)
    1da8:	e78c      	b.n	1cc4 <_sercom_get_default_pad+0x1c>
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	42001000 	.word	0x42001000
    1db0:	42001800 	.word	0x42001800
    1db4:	42001c00 	.word	0x42001c00
    1db8:	42001400 	.word	0x42001400
    1dbc:	42000800 	.word	0x42000800
    1dc0:	42000c00 	.word	0x42000c00
    1dc4:	00050003 	.word	0x00050003
    1dc8:	00060003 	.word	0x00060003
    1dcc:	00070003 	.word	0x00070003
    1dd0:	00010003 	.word	0x00010003
    1dd4:	001e0003 	.word	0x001e0003
    1dd8:	001f0003 	.word	0x001f0003
    1ddc:	00090003 	.word	0x00090003
    1de0:	000a0003 	.word	0x000a0003
    1de4:	000b0003 	.word	0x000b0003
    1de8:	00110003 	.word	0x00110003
    1dec:	00120003 	.word	0x00120003
    1df0:	00130003 	.word	0x00130003
    1df4:	000d0003 	.word	0x000d0003
    1df8:	000e0003 	.word	0x000e0003
    1dfc:	000f0003 	.word	0x000f0003
    1e00:	00170003 	.word	0x00170003
    1e04:	00180003 	.word	0x00180003
    1e08:	00190003 	.word	0x00190003
    1e0c:	00040003 	.word	0x00040003
    1e10:	00080003 	.word	0x00080003
    1e14:	00100003 	.word	0x00100003
    1e18:	000c0003 	.word	0x000c0003
    1e1c:	00160003 	.word	0x00160003

00001e20 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e20:	4770      	bx	lr
	...

00001e24 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1e24:	b530      	push	{r4, r5, lr}
    1e26:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1e28:	4b0b      	ldr	r3, [pc, #44]	; (1e58 <_sercom_get_sercom_inst_index+0x34>)
    1e2a:	466a      	mov	r2, sp
    1e2c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1e2e:	c232      	stmia	r2!, {r1, r4, r5}
    1e30:	cb32      	ldmia	r3!, {r1, r4, r5}
    1e32:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1e34:	9b00      	ldr	r3, [sp, #0]
    1e36:	4283      	cmp	r3, r0
    1e38:	d00b      	beq.n	1e52 <_sercom_get_sercom_inst_index+0x2e>
    1e3a:	2301      	movs	r3, #1
    1e3c:	009a      	lsls	r2, r3, #2
    1e3e:	4669      	mov	r1, sp
    1e40:	5852      	ldr	r2, [r2, r1]
    1e42:	4282      	cmp	r2, r0
    1e44:	d006      	beq.n	1e54 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e46:	3301      	adds	r3, #1
    1e48:	2b06      	cmp	r3, #6
    1e4a:	d1f7      	bne.n	1e3c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1e4c:	2000      	movs	r0, #0
}
    1e4e:	b007      	add	sp, #28
    1e50:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e52:	2300      	movs	r3, #0
			return i;
    1e54:	b2d8      	uxtb	r0, r3
    1e56:	e7fa      	b.n	1e4e <_sercom_get_sercom_inst_index+0x2a>
    1e58:	00004df4 	.word	0x00004df4

00001e5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1e5e:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <_sercom_set_handler+0x2c>)
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d10c      	bne.n	1e80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e66:	4f09      	ldr	r7, [pc, #36]	; (1e8c <_sercom_set_handler+0x30>)
    1e68:	4e09      	ldr	r6, [pc, #36]	; (1e90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1e6a:	4d0a      	ldr	r5, [pc, #40]	; (1e94 <_sercom_set_handler+0x38>)
    1e6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1e70:	195a      	adds	r2, r3, r5
    1e72:	6014      	str	r4, [r2, #0]
    1e74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e76:	2b18      	cmp	r3, #24
    1e78:	d1f9      	bne.n	1e6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1e7a:	2201      	movs	r2, #1
    1e7c:	4b02      	ldr	r3, [pc, #8]	; (1e88 <_sercom_set_handler+0x2c>)
    1e7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e80:	0080      	lsls	r0, r0, #2
    1e82:	4b02      	ldr	r3, [pc, #8]	; (1e8c <_sercom_set_handler+0x30>)
    1e84:	50c1      	str	r1, [r0, r3]
}
    1e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e88:	2000052a 	.word	0x2000052a
    1e8c:	2000052c 	.word	0x2000052c
    1e90:	00001e21 	.word	0x00001e21
    1e94:	200005bc 	.word	0x200005bc

00001e98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1e98:	b500      	push	{lr}
    1e9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1e9c:	2309      	movs	r3, #9
    1e9e:	466a      	mov	r2, sp
    1ea0:	7013      	strb	r3, [r2, #0]
    1ea2:	3301      	adds	r3, #1
    1ea4:	7053      	strb	r3, [r2, #1]
    1ea6:	3301      	adds	r3, #1
    1ea8:	7093      	strb	r3, [r2, #2]
    1eaa:	3301      	adds	r3, #1
    1eac:	70d3      	strb	r3, [r2, #3]
    1eae:	3301      	adds	r3, #1
    1eb0:	7113      	strb	r3, [r2, #4]
    1eb2:	3301      	adds	r3, #1
    1eb4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <_sercom_get_interrupt_vector+0x2c>)
    1eb8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1eba:	466b      	mov	r3, sp
    1ebc:	5618      	ldrsb	r0, [r3, r0]
}
    1ebe:	b003      	add	sp, #12
    1ec0:	bd00      	pop	{pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	00001e25 	.word	0x00001e25

00001ec8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ec8:	b510      	push	{r4, lr}
    1eca:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <SERCOM0_Handler+0xc>)
    1ecc:	681b      	ldr	r3, [r3, #0]
    1ece:	2000      	movs	r0, #0
    1ed0:	4798      	blx	r3
    1ed2:	bd10      	pop	{r4, pc}
    1ed4:	2000052c 	.word	0x2000052c

00001ed8 <SERCOM1_Handler>:
    1ed8:	b510      	push	{r4, lr}
    1eda:	4b02      	ldr	r3, [pc, #8]	; (1ee4 <SERCOM1_Handler+0xc>)
    1edc:	685b      	ldr	r3, [r3, #4]
    1ede:	2001      	movs	r0, #1
    1ee0:	4798      	blx	r3
    1ee2:	bd10      	pop	{r4, pc}
    1ee4:	2000052c 	.word	0x2000052c

00001ee8 <SERCOM2_Handler>:
    1ee8:	b510      	push	{r4, lr}
    1eea:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <SERCOM2_Handler+0xc>)
    1eec:	689b      	ldr	r3, [r3, #8]
    1eee:	2002      	movs	r0, #2
    1ef0:	4798      	blx	r3
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	2000052c 	.word	0x2000052c

00001ef8 <SERCOM3_Handler>:
    1ef8:	b510      	push	{r4, lr}
    1efa:	4b02      	ldr	r3, [pc, #8]	; (1f04 <SERCOM3_Handler+0xc>)
    1efc:	68db      	ldr	r3, [r3, #12]
    1efe:	2003      	movs	r0, #3
    1f00:	4798      	blx	r3
    1f02:	bd10      	pop	{r4, pc}
    1f04:	2000052c 	.word	0x2000052c

00001f08 <SERCOM4_Handler>:
    1f08:	b510      	push	{r4, lr}
    1f0a:	4b02      	ldr	r3, [pc, #8]	; (1f14 <SERCOM4_Handler+0xc>)
    1f0c:	691b      	ldr	r3, [r3, #16]
    1f0e:	2004      	movs	r0, #4
    1f10:	4798      	blx	r3
    1f12:	bd10      	pop	{r4, pc}
    1f14:	2000052c 	.word	0x2000052c

00001f18 <SERCOM5_Handler>:
    1f18:	b510      	push	{r4, lr}
    1f1a:	4b02      	ldr	r3, [pc, #8]	; (1f24 <SERCOM5_Handler+0xc>)
    1f1c:	695b      	ldr	r3, [r3, #20]
    1f1e:	2005      	movs	r0, #5
    1f20:	4798      	blx	r3
    1f22:	bd10      	pop	{r4, pc}
    1f24:	2000052c 	.word	0x2000052c

00001f28 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2a:	46d6      	mov	lr, sl
    1f2c:	464f      	mov	r7, r9
    1f2e:	b580      	push	{r7, lr}
    1f30:	b08b      	sub	sp, #44	; 0x2c
    1f32:	4681      	mov	r9, r0
    1f34:	000f      	movs	r7, r1
    1f36:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1f38:	0003      	movs	r3, r0
    1f3a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1f3c:	680b      	ldr	r3, [r1, #0]
    1f3e:	079b      	lsls	r3, r3, #30
    1f40:	d409      	bmi.n	1f56 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f42:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1f44:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f46:	07db      	lsls	r3, r3, #31
    1f48:	d400      	bmi.n	1f4c <spi_init+0x24>
    1f4a:	e0b1      	b.n	20b0 <STACK_SIZE+0xb0>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1f4c:	b00b      	add	sp, #44	; 0x2c
    1f4e:	bc0c      	pop	{r2, r3}
    1f50:	4691      	mov	r9, r2
    1f52:	469a      	mov	sl, r3
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    1f56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f58:	9305      	str	r3, [sp, #20]
    1f5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1f5c:	9306      	str	r3, [sp, #24]
    1f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1f60:	9307      	str	r3, [sp, #28]
    1f62:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1f64:	9308      	str	r3, [sp, #32]
    1f66:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f68:	ab05      	add	r3, sp, #20
    1f6a:	9301      	str	r3, [sp, #4]
    1f6c:	e00a      	b.n	1f84 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1f6e:	0038      	movs	r0, r7
    1f70:	4bac      	ldr	r3, [pc, #688]	; (2224 <STACK_SIZE+0x224>)
    1f72:	4798      	blx	r3
    1f74:	e00c      	b.n	1f90 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1f76:	230f      	movs	r3, #15
    1f78:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1f7a:	4281      	cmp	r1, r0
    1f7c:	d12d      	bne.n	1fda <spi_init+0xb2>
    1f7e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1f80:	2e04      	cmp	r6, #4
    1f82:	d02f      	beq.n	1fe4 <spi_init+0xbc>
    1f84:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f86:	00b3      	lsls	r3, r6, #2
    1f88:	9a01      	ldr	r2, [sp, #4]
    1f8a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1f8c:	2800      	cmp	r0, #0
    1f8e:	d0ee      	beq.n	1f6e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    1f90:	1c43      	adds	r3, r0, #1
    1f92:	d0f4      	beq.n	1f7e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    1f94:	0401      	lsls	r1, r0, #16
    1f96:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1f98:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1f9a:	b2c3      	uxtb	r3, r0
    1f9c:	469c      	mov	ip, r3
		return NULL;
    1f9e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1fa0:	0602      	lsls	r2, r0, #24
    1fa2:	d405      	bmi.n	1fb0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    1fa4:	4663      	mov	r3, ip
    1fa6:	095b      	lsrs	r3, r3, #5
    1fa8:	01db      	lsls	r3, r3, #7
    1faa:	4a9f      	ldr	r2, [pc, #636]	; (2228 <STACK_SIZE+0x228>)
    1fac:	4692      	mov	sl, r2
    1fae:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    1fb0:	221f      	movs	r2, #31
    1fb2:	4660      	mov	r0, ip
    1fb4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1fb6:	1898      	adds	r0, r3, r2
    1fb8:	3040      	adds	r0, #64	; 0x40
    1fba:	7800      	ldrb	r0, [r0, #0]
    1fbc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1fbe:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1fc0:	4655      	mov	r5, sl
    1fc2:	07ed      	lsls	r5, r5, #31
    1fc4:	d5d9      	bpl.n	1f7a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    1fc6:	0852      	lsrs	r2, r2, #1
    1fc8:	189b      	adds	r3, r3, r2
    1fca:	3330      	adds	r3, #48	; 0x30
    1fcc:	7818      	ldrb	r0, [r3, #0]
    1fce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1fd0:	4663      	mov	r3, ip
    1fd2:	07db      	lsls	r3, r3, #31
    1fd4:	d5cf      	bpl.n	1f76 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    1fd6:	0900      	lsrs	r0, r0, #4
    1fd8:	e7cf      	b.n	1f7a <spi_init+0x52>
			module->hw = NULL;
    1fda:	2300      	movs	r3, #0
    1fdc:	464a      	mov	r2, r9
    1fde:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    1fe0:	201c      	movs	r0, #28
    1fe2:	e7b3      	b.n	1f4c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1fe4:	2013      	movs	r0, #19
    1fe6:	4b91      	ldr	r3, [pc, #580]	; (222c <STACK_SIZE+0x22c>)
    1fe8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1fea:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    1fec:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    1fee:	2a01      	cmp	r2, #1
    1ff0:	d016      	beq.n	2020 <STACK_SIZE+0x20>
	if (config->mode == SPI_MODE_SLAVE) {
    1ff2:	7821      	ldrb	r1, [r4, #0]
    1ff4:	2900      	cmp	r1, #0
    1ff6:	d127      	bne.n	2048 <STACK_SIZE+0x48>
		if (spi_module->CTRLA.reg != addr) {
    1ff8:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1ffa:	7fe2      	ldrb	r2, [r4, #31]
    1ffc:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1ffe:	7fa0      	ldrb	r0, [r4, #30]
    2000:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    2002:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    2004:	429a      	cmp	r2, r3
    2006:	d1a1      	bne.n	1f4c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    2008:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    200a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    200c:	3004      	adds	r0, #4
    200e:	5c20      	ldrb	r0, [r4, r0]
    2010:	2800      	cmp	r0, #0
    2012:	d001      	beq.n	2018 <STACK_SIZE+0x18>
    2014:	2040      	movs	r0, #64	; 0x40
    2016:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    2018:	2008      	movs	r0, #8
    201a:	4303      	orrs	r3, r0
    201c:	431d      	orrs	r5, r3
    201e:	e014      	b.n	204a <STACK_SIZE+0x4a>
		enum status_code error_code = _sercom_get_sync_baud_val(
    2020:	aa04      	add	r2, sp, #16
    2022:	0001      	movs	r1, r0
    2024:	69a0      	ldr	r0, [r4, #24]
    2026:	4b82      	ldr	r3, [pc, #520]	; (2230 <STACK_SIZE+0x230>)
    2028:	4798      	blx	r3
    202a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    202c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    202e:	2b00      	cmp	r3, #0
    2030:	d000      	beq.n	2034 <STACK_SIZE+0x34>
    2032:	e78b      	b.n	1f4c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2034:	7b3b      	ldrb	r3, [r7, #12]
    2036:	b2db      	uxtb	r3, r3
    2038:	aa04      	add	r2, sp, #16
    203a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    203c:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    203e:	429a      	cmp	r2, r3
    2040:	d000      	beq.n	2044 <STACK_SIZE+0x44>
    2042:	e783      	b.n	1f4c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    2044:	350c      	adds	r5, #12
    2046:	e7d4      	b.n	1ff2 <spi_init+0xca>
	uint32_t ctrlb = 0;
    2048:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    204a:	6863      	ldr	r3, [r4, #4]
    204c:	68a0      	ldr	r0, [r4, #8]
    204e:	4303      	orrs	r3, r0
    2050:	68e0      	ldr	r0, [r4, #12]
    2052:	4303      	orrs	r3, r0
    2054:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    2056:	7c20      	ldrb	r0, [r4, #16]
    2058:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    205a:	7c60      	ldrb	r0, [r4, #17]
    205c:	2800      	cmp	r0, #0
    205e:	d001      	beq.n	2064 <STACK_SIZE+0x64>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2060:	2080      	movs	r0, #128	; 0x80
    2062:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    2064:	7ca0      	ldrb	r0, [r4, #18]
    2066:	2800      	cmp	r0, #0
    2068:	d002      	beq.n	2070 <STACK_SIZE+0x70>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    206a:	2080      	movs	r0, #128	; 0x80
    206c:	0280      	lsls	r0, r0, #10
    206e:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    2070:	7ce0      	ldrb	r0, [r4, #19]
    2072:	2800      	cmp	r0, #0
    2074:	d002      	beq.n	207c <STACK_SIZE+0x7c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2076:	2080      	movs	r0, #128	; 0x80
    2078:	0080      	lsls	r0, r0, #2
    207a:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    207c:	7d20      	ldrb	r0, [r4, #20]
    207e:	2800      	cmp	r0, #0
    2080:	d002      	beq.n	2088 <STACK_SIZE+0x88>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2082:	2080      	movs	r0, #128	; 0x80
    2084:	0180      	lsls	r0, r0, #6
    2086:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    2088:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    208a:	2502      	movs	r5, #2
    208c:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    208e:	4283      	cmp	r3, r0
    2090:	d004      	beq.n	209c <STACK_SIZE+0x9c>
	module->hw = NULL;
    2092:	2300      	movs	r3, #0
    2094:	464a      	mov	r2, r9
    2096:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    2098:	201c      	movs	r0, #28
    209a:	e757      	b.n	1f4c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    209c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    209e:	4293      	cmp	r3, r2
    20a0:	d1f7      	bne.n	2092 <STACK_SIZE+0x92>
		module->mode           = config->mode;
    20a2:	464b      	mov	r3, r9
    20a4:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    20a6:	7c23      	ldrb	r3, [r4, #16]
    20a8:	464a      	mov	r2, r9
    20aa:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    20ac:	2000      	movs	r0, #0
    20ae:	e74d      	b.n	1f4c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20b0:	0008      	movs	r0, r1
    20b2:	4b60      	ldr	r3, [pc, #384]	; (2234 <STACK_SIZE+0x234>)
    20b4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20b6:	4a60      	ldr	r2, [pc, #384]	; (2238 <STACK_SIZE+0x238>)
    20b8:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    20ba:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    20bc:	2301      	movs	r3, #1
    20be:	40ab      	lsls	r3, r5
    20c0:	430b      	orrs	r3, r1
    20c2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    20c4:	a909      	add	r1, sp, #36	; 0x24
    20c6:	2624      	movs	r6, #36	; 0x24
    20c8:	5da3      	ldrb	r3, [r4, r6]
    20ca:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20cc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    20ce:	b2c5      	uxtb	r5, r0
    20d0:	0028      	movs	r0, r5
    20d2:	4b5a      	ldr	r3, [pc, #360]	; (223c <STACK_SIZE+0x23c>)
    20d4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    20d6:	0028      	movs	r0, r5
    20d8:	4b59      	ldr	r3, [pc, #356]	; (2240 <STACK_SIZE+0x240>)
    20da:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    20dc:	5da0      	ldrb	r0, [r4, r6]
    20de:	2100      	movs	r1, #0
    20e0:	4b58      	ldr	r3, [pc, #352]	; (2244 <STACK_SIZE+0x244>)
    20e2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    20e4:	7823      	ldrb	r3, [r4, #0]
    20e6:	2b01      	cmp	r3, #1
    20e8:	d01b      	beq.n	2122 <STACK_SIZE+0x122>
	if (config->mode == SPI_MODE_SLAVE) {
    20ea:	7823      	ldrb	r3, [r4, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d103      	bne.n	20f8 <STACK_SIZE+0xf8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    20f0:	683b      	ldr	r3, [r7, #0]
    20f2:	2208      	movs	r2, #8
    20f4:	4313      	orrs	r3, r2
    20f6:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20f8:	464b      	mov	r3, r9
    20fa:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20fc:	ab04      	add	r3, sp, #16
    20fe:	2280      	movs	r2, #128	; 0x80
    2100:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2102:	2200      	movs	r2, #0
    2104:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2106:	2101      	movs	r1, #1
    2108:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    210a:	70da      	strb	r2, [r3, #3]
	uint32_t pad_pinmuxes[] = {
    210c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    210e:	9305      	str	r3, [sp, #20]
    2110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2112:	9306      	str	r3, [sp, #24]
    2114:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2116:	9307      	str	r3, [sp, #28]
    2118:	6b63      	ldr	r3, [r4, #52]	; 0x34
    211a:	9308      	str	r3, [sp, #32]
    211c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    211e:	ad05      	add	r5, sp, #20
    2120:	e011      	b.n	2146 <STACK_SIZE+0x146>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    2122:	683b      	ldr	r3, [r7, #0]
    2124:	220c      	movs	r2, #12
    2126:	4313      	orrs	r3, r2
    2128:	603b      	str	r3, [r7, #0]
    212a:	e7de      	b.n	20ea <STACK_SIZE+0xea>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    212c:	0030      	movs	r0, r6
    212e:	4b3d      	ldr	r3, [pc, #244]	; (2224 <STACK_SIZE+0x224>)
    2130:	4798      	blx	r3
    2132:	e00d      	b.n	2150 <STACK_SIZE+0x150>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2134:	a904      	add	r1, sp, #16
    2136:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2138:	0c00      	lsrs	r0, r0, #16
    213a:	b2c0      	uxtb	r0, r0
    213c:	4b42      	ldr	r3, [pc, #264]	; (2248 <STACK_SIZE+0x248>)
    213e:	4798      	blx	r3
    2140:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2142:	2f04      	cmp	r7, #4
    2144:	d007      	beq.n	2156 <STACK_SIZE+0x156>
    2146:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2148:	00bb      	lsls	r3, r7, #2
    214a:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    214c:	2800      	cmp	r0, #0
    214e:	d0ed      	beq.n	212c <STACK_SIZE+0x12c>
		if (current_pinmux != PINMUX_UNUSED) {
    2150:	1c43      	adds	r3, r0, #1
    2152:	d1ef      	bne.n	2134 <STACK_SIZE+0x134>
    2154:	e7f4      	b.n	2140 <STACK_SIZE+0x140>
	module->mode             = config->mode;
    2156:	7823      	ldrb	r3, [r4, #0]
    2158:	464a      	mov	r2, r9
    215a:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    215c:	7c23      	ldrb	r3, [r4, #16]
    215e:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    2160:	7ca3      	ldrb	r3, [r4, #18]
    2162:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2164:	7d23      	ldrb	r3, [r4, #20]
    2166:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    2168:	2200      	movs	r2, #0
    216a:	ab02      	add	r3, sp, #8
    216c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    216e:	7823      	ldrb	r3, [r4, #0]
    2170:	2b01      	cmp	r3, #1
    2172:	d012      	beq.n	219a <STACK_SIZE+0x19a>
	if (config->mode == SPI_MODE_SLAVE) {
    2174:	7823      	ldrb	r3, [r4, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d127      	bne.n	21ca <STACK_SIZE+0x1ca>
		ctrla = config->mode_specific.slave.frame_format;
    217a:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    217c:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    217e:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    2180:	7fe1      	ldrb	r1, [r4, #31]
    2182:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    2184:	7fa5      	ldrb	r5, [r4, #30]
    2186:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    2188:	4319      	orrs	r1, r3
    218a:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    218c:	2320      	movs	r3, #32
    218e:	5ce3      	ldrb	r3, [r4, r3]
    2190:	2b00      	cmp	r3, #0
    2192:	d01c      	beq.n	21ce <STACK_SIZE+0x1ce>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    2194:	2340      	movs	r3, #64	; 0x40
    2196:	431a      	orrs	r2, r3
    2198:	e019      	b.n	21ce <STACK_SIZE+0x1ce>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    219a:	464b      	mov	r3, r9
    219c:	6818      	ldr	r0, [r3, #0]
    219e:	4b25      	ldr	r3, [pc, #148]	; (2234 <STACK_SIZE+0x234>)
    21a0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    21a2:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    21a4:	b2c0      	uxtb	r0, r0
    21a6:	4b21      	ldr	r3, [pc, #132]	; (222c <STACK_SIZE+0x22c>)
    21a8:	4798      	blx	r3
    21aa:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    21ac:	ab02      	add	r3, sp, #8
    21ae:	1d9a      	adds	r2, r3, #6
    21b0:	69a0      	ldr	r0, [r4, #24]
    21b2:	4b1f      	ldr	r3, [pc, #124]	; (2230 <STACK_SIZE+0x230>)
    21b4:	4798      	blx	r3
    21b6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    21b8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    21ba:	2b00      	cmp	r3, #0
    21bc:	d000      	beq.n	21c0 <STACK_SIZE+0x1c0>
    21be:	e6c5      	b.n	1f4c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    21c0:	ab02      	add	r3, sp, #8
    21c2:	3306      	adds	r3, #6
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	7333      	strb	r3, [r6, #12]
    21c8:	e7d4      	b.n	2174 <STACK_SIZE+0x174>
	uint32_t ctrlb = 0;
    21ca:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    21cc:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    21ce:	6863      	ldr	r3, [r4, #4]
    21d0:	68a1      	ldr	r1, [r4, #8]
    21d2:	430b      	orrs	r3, r1
    21d4:	68e1      	ldr	r1, [r4, #12]
    21d6:	430b      	orrs	r3, r1
    21d8:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    21da:	7c21      	ldrb	r1, [r4, #16]
    21dc:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    21de:	7c61      	ldrb	r1, [r4, #17]
    21e0:	2900      	cmp	r1, #0
    21e2:	d103      	bne.n	21ec <STACK_SIZE+0x1ec>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    21e4:	4919      	ldr	r1, [pc, #100]	; (224c <STACK_SIZE+0x24c>)
    21e6:	7889      	ldrb	r1, [r1, #2]
    21e8:	0789      	lsls	r1, r1, #30
    21ea:	d501      	bpl.n	21f0 <STACK_SIZE+0x1f0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    21ec:	2180      	movs	r1, #128	; 0x80
    21ee:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    21f0:	7ca1      	ldrb	r1, [r4, #18]
    21f2:	2900      	cmp	r1, #0
    21f4:	d002      	beq.n	21fc <STACK_SIZE+0x1fc>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    21f6:	2180      	movs	r1, #128	; 0x80
    21f8:	0289      	lsls	r1, r1, #10
    21fa:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    21fc:	7ce1      	ldrb	r1, [r4, #19]
    21fe:	2900      	cmp	r1, #0
    2200:	d002      	beq.n	2208 <STACK_SIZE+0x208>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2202:	2180      	movs	r1, #128	; 0x80
    2204:	0089      	lsls	r1, r1, #2
    2206:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    2208:	7d21      	ldrb	r1, [r4, #20]
    220a:	2900      	cmp	r1, #0
    220c:	d002      	beq.n	2214 <STACK_SIZE+0x214>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    220e:	2180      	movs	r1, #128	; 0x80
    2210:	0189      	lsls	r1, r1, #6
    2212:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    2214:	6831      	ldr	r1, [r6, #0]
    2216:	430b      	orrs	r3, r1
    2218:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    221a:	6873      	ldr	r3, [r6, #4]
    221c:	431a      	orrs	r2, r3
    221e:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    2220:	2000      	movs	r0, #0
    2222:	e693      	b.n	1f4c <spi_init+0x24>
    2224:	00001ca9 	.word	0x00001ca9
    2228:	41004400 	.word	0x41004400
    222c:	00002fb1 	.word	0x00002fb1
    2230:	00001a65 	.word	0x00001a65
    2234:	00001e25 	.word	0x00001e25
    2238:	40000400 	.word	0x40000400
    223c:	00002f95 	.word	0x00002f95
    2240:	00002f09 	.word	0x00002f09
    2244:	00001c5d 	.word	0x00001c5d
    2248:	0000308d 	.word	0x0000308d
    224c:	41002000 	.word	0x41002000

00002250 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2250:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2252:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2254:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2256:	2c01      	cmp	r4, #1
    2258:	d001      	beq.n	225e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    225a:	0018      	movs	r0, r3
    225c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    225e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    2260:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    2262:	2c00      	cmp	r4, #0
    2264:	d1f9      	bne.n	225a <spi_select_slave+0xa>
		if (select) {
    2266:	2a00      	cmp	r2, #0
    2268:	d05a      	beq.n	2320 <spi_select_slave+0xd0>
			if (slave->address_enabled) {
    226a:	784b      	ldrb	r3, [r1, #1]
    226c:	2b00      	cmp	r3, #0
    226e:	d046      	beq.n	22fe <spi_select_slave+0xae>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2270:	6803      	ldr	r3, [r0, #0]
    2272:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2274:	07db      	lsls	r3, r3, #31
    2276:	d410      	bmi.n	229a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2278:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    227a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    227c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    227e:	2900      	cmp	r1, #0
    2280:	d104      	bne.n	228c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    2282:	0953      	lsrs	r3, r2, #5
    2284:	01db      	lsls	r3, r3, #7
    2286:	492f      	ldr	r1, [pc, #188]	; (2344 <spi_select_slave+0xf4>)
    2288:	468c      	mov	ip, r1
    228a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    228c:	211f      	movs	r1, #31
    228e:	4011      	ands	r1, r2
    2290:	2201      	movs	r2, #1
    2292:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2294:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2296:	2305      	movs	r3, #5
    2298:	e7df      	b.n	225a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    229a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    229c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    229e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    22a0:	2c00      	cmp	r4, #0
    22a2:	d104      	bne.n	22ae <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    22a4:	0953      	lsrs	r3, r2, #5
    22a6:	01db      	lsls	r3, r3, #7
    22a8:	4c26      	ldr	r4, [pc, #152]	; (2344 <spi_select_slave+0xf4>)
    22aa:	46a4      	mov	ip, r4
    22ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22ae:	241f      	movs	r4, #31
    22b0:	4014      	ands	r4, r2
    22b2:	2201      	movs	r2, #1
    22b4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    22b6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    22b8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    22ba:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    22bc:	07d2      	lsls	r2, r2, #31
    22be:	d501      	bpl.n	22c4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    22c0:	788a      	ldrb	r2, [r1, #2]
    22c2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    22c4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    22c6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    22c8:	2a00      	cmp	r2, #0
    22ca:	d1c6      	bne.n	225a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22cc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    22ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    22d0:	7e13      	ldrb	r3, [r2, #24]
    22d2:	420b      	tst	r3, r1
    22d4:	d0fc      	beq.n	22d0 <spi_select_slave+0x80>
    22d6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    22d8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    22da:	0749      	lsls	r1, r1, #29
    22dc:	d5bd      	bpl.n	225a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    22de:	8b53      	ldrh	r3, [r2, #26]
    22e0:	075b      	lsls	r3, r3, #29
    22e2:	d503      	bpl.n	22ec <spi_select_slave+0x9c>
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    22e4:	8b53      	ldrh	r3, [r2, #26]
    22e6:	2104      	movs	r1, #4
    22e8:	430b      	orrs	r3, r1
    22ea:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22ec:	7983      	ldrb	r3, [r0, #6]
    22ee:	2b01      	cmp	r3, #1
    22f0:	d002      	beq.n	22f8 <spi_select_slave+0xa8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    22f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    22f4:	2300      	movs	r3, #0
    22f6:	e7b0      	b.n	225a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    22f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    22fa:	2300      	movs	r3, #0
    22fc:	e7ad      	b.n	225a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    22fe:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2300:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2302:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2304:	2900      	cmp	r1, #0
    2306:	d104      	bne.n	2312 <spi_select_slave+0xc2>
		return &(ports[port_index]->Group[group_index]);
    2308:	0953      	lsrs	r3, r2, #5
    230a:	01db      	lsls	r3, r3, #7
    230c:	490d      	ldr	r1, [pc, #52]	; (2344 <spi_select_slave+0xf4>)
    230e:	468c      	mov	ip, r1
    2310:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2312:	211f      	movs	r1, #31
    2314:	4011      	ands	r1, r2
    2316:	2201      	movs	r2, #1
    2318:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    231a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    231c:	2300      	movs	r3, #0
    231e:	e79c      	b.n	225a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2320:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2322:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2324:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2326:	2900      	cmp	r1, #0
    2328:	d104      	bne.n	2334 <spi_select_slave+0xe4>
		return &(ports[port_index]->Group[group_index]);
    232a:	0953      	lsrs	r3, r2, #5
    232c:	01db      	lsls	r3, r3, #7
    232e:	4905      	ldr	r1, [pc, #20]	; (2344 <spi_select_slave+0xf4>)
    2330:	468c      	mov	ip, r1
    2332:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2334:	211f      	movs	r1, #31
    2336:	4011      	ands	r1, r2
    2338:	2201      	movs	r2, #1
    233a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    233c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    233e:	2300      	movs	r3, #0
    2340:	e78b      	b.n	225a <spi_select_slave+0xa>
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	41004400 	.word	0x41004400

00002348 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2348:	b5f0      	push	{r4, r5, r6, r7, lr}
    234a:	46de      	mov	lr, fp
    234c:	4657      	mov	r7, sl
    234e:	464e      	mov	r6, r9
    2350:	4645      	mov	r5, r8
    2352:	b5e0      	push	{r5, r6, r7, lr}
    2354:	b091      	sub	sp, #68	; 0x44
    2356:	0005      	movs	r5, r0
    2358:	000c      	movs	r4, r1
    235a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    235c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    235e:	0008      	movs	r0, r1
    2360:	4bbc      	ldr	r3, [pc, #752]	; (2654 <usart_init+0x30c>)
    2362:	4798      	blx	r3
    2364:	0002      	movs	r2, r0
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2366:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2368:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    236a:	07db      	lsls	r3, r3, #31
    236c:	d506      	bpl.n	237c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    236e:	b011      	add	sp, #68	; 0x44
    2370:	bc3c      	pop	{r2, r3, r4, r5}
    2372:	4690      	mov	r8, r2
    2374:	4699      	mov	r9, r3
    2376:	46a2      	mov	sl, r4
    2378:	46ab      	mov	fp, r5
    237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    237c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    237e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2380:	079b      	lsls	r3, r3, #30
    2382:	d4f4      	bmi.n	236e <usart_init+0x26>
    2384:	49b4      	ldr	r1, [pc, #720]	; (2658 <usart_init+0x310>)
    2386:	6a08      	ldr	r0, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2388:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    238a:	2301      	movs	r3, #1
    238c:	40bb      	lsls	r3, r7
    238e:	4303      	orrs	r3, r0
    2390:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2392:	a90f      	add	r1, sp, #60	; 0x3c
    2394:	272d      	movs	r7, #45	; 0x2d
    2396:	5df3      	ldrb	r3, [r6, r7]
    2398:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    239a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    239c:	b2d3      	uxtb	r3, r2
    239e:	9303      	str	r3, [sp, #12]
    23a0:	0018      	movs	r0, r3
    23a2:	4bae      	ldr	r3, [pc, #696]	; (265c <usart_init+0x314>)
    23a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    23a6:	9803      	ldr	r0, [sp, #12]
    23a8:	4bad      	ldr	r3, [pc, #692]	; (2660 <usart_init+0x318>)
    23aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    23ac:	5df0      	ldrb	r0, [r6, r7]
    23ae:	2100      	movs	r1, #0
    23b0:	4bac      	ldr	r3, [pc, #688]	; (2664 <usart_init+0x31c>)
    23b2:	4798      	blx	r3
	module->character_size = config->character_size;
    23b4:	7af3      	ldrb	r3, [r6, #11]
    23b6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    23b8:	2324      	movs	r3, #36	; 0x24
    23ba:	5cf3      	ldrb	r3, [r6, r3]
    23bc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    23be:	2325      	movs	r3, #37	; 0x25
    23c0:	5cf3      	ldrb	r3, [r6, r3]
    23c2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    23c4:	7ef3      	ldrb	r3, [r6, #27]
    23c6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    23c8:	7f33      	ldrb	r3, [r6, #28]
    23ca:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23cc:	682b      	ldr	r3, [r5, #0]
    23ce:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23d0:	0018      	movs	r0, r3
    23d2:	4ba0      	ldr	r3, [pc, #640]	; (2654 <usart_init+0x30c>)
    23d4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23d6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    23d8:	2200      	movs	r2, #0
    23da:	230e      	movs	r3, #14
    23dc:	a906      	add	r1, sp, #24
    23de:	468c      	mov	ip, r1
    23e0:	4463      	add	r3, ip
    23e2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    23e4:	8a33      	ldrh	r3, [r6, #16]
    23e6:	4698      	mov	r8, r3
    23e8:	2380      	movs	r3, #128	; 0x80
    23ea:	01db      	lsls	r3, r3, #7
    23ec:	4598      	cmp	r8, r3
    23ee:	d100      	bne.n	23f2 <usart_init+0xaa>
    23f0:	e09f      	b.n	2532 <usart_init+0x1ea>
    23f2:	d90e      	bls.n	2412 <usart_init+0xca>
    23f4:	23c0      	movs	r3, #192	; 0xc0
    23f6:	01db      	lsls	r3, r3, #7
    23f8:	4598      	cmp	r8, r3
    23fa:	d100      	bne.n	23fe <usart_init+0xb6>
    23fc:	e094      	b.n	2528 <usart_init+0x1e0>
    23fe:	2380      	movs	r3, #128	; 0x80
    2400:	021b      	lsls	r3, r3, #8
    2402:	4598      	cmp	r8, r3
    2404:	d000      	beq.n	2408 <usart_init+0xc0>
    2406:	e11f      	b.n	2648 <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2408:	2303      	movs	r3, #3
    240a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    240c:	2300      	movs	r3, #0
    240e:	9307      	str	r3, [sp, #28]
    2410:	e008      	b.n	2424 <usart_init+0xdc>
	switch (config->sample_rate) {
    2412:	2380      	movs	r3, #128	; 0x80
    2414:	019b      	lsls	r3, r3, #6
    2416:	4598      	cmp	r8, r3
    2418:	d000      	beq.n	241c <usart_init+0xd4>
    241a:	e115      	b.n	2648 <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    241c:	2310      	movs	r3, #16
    241e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2420:	3b0f      	subs	r3, #15
    2422:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2424:	6833      	ldr	r3, [r6, #0]
    2426:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2428:	68f3      	ldr	r3, [r6, #12]
    242a:	4699      	mov	r9, r3
		config->sample_adjustment |
    242c:	6973      	ldr	r3, [r6, #20]
    242e:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2430:	7e33      	ldrb	r3, [r6, #24]
    2432:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2434:	2326      	movs	r3, #38	; 0x26
    2436:	5cf3      	ldrb	r3, [r6, r3]
    2438:	469a      	mov	sl, r3
	switch (config->transfer_mode)
    243a:	6873      	ldr	r3, [r6, #4]
    243c:	2b00      	cmp	r3, #0
    243e:	d100      	bne.n	2442 <usart_init+0xfa>
    2440:	e0a2      	b.n	2588 <usart_init+0x240>
    2442:	2280      	movs	r2, #128	; 0x80
    2444:	0552      	lsls	r2, r2, #21
    2446:	4293      	cmp	r3, r2
    2448:	d100      	bne.n	244c <usart_init+0x104>
    244a:	e086      	b.n	255a <usart_init+0x212>
	if(config->encoding_format_enable) {
    244c:	7e73      	ldrb	r3, [r6, #25]
    244e:	2b00      	cmp	r3, #0
    2450:	d002      	beq.n	2458 <usart_init+0x110>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2452:	7eb3      	ldrb	r3, [r6, #26]
    2454:	9a03      	ldr	r2, [sp, #12]
    2456:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2458:	682a      	ldr	r2, [r5, #0]
    245a:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    245c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    245e:	2b00      	cmp	r3, #0
    2460:	d1fc      	bne.n	245c <usart_init+0x114>
    2462:	9703      	str	r7, [sp, #12]
	usart_hw->BAUD.reg = baud;
    2464:	330e      	adds	r3, #14
    2466:	a906      	add	r1, sp, #24
    2468:	468c      	mov	ip, r1
    246a:	4463      	add	r3, ip
    246c:	881b      	ldrh	r3, [r3, #0]
    246e:	81bb      	strh	r3, [r7, #12]
	ctrla |= config->transfer_mode;
    2470:	9a05      	ldr	r2, [sp, #20]
    2472:	464b      	mov	r3, r9
    2474:	431a      	orrs	r2, r3
    2476:	465b      	mov	r3, fp
    2478:	431a      	orrs	r2, r3
    247a:	6873      	ldr	r3, [r6, #4]
    247c:	431a      	orrs	r2, r3
    247e:	4643      	mov	r3, r8
    2480:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2482:	9b04      	ldr	r3, [sp, #16]
    2484:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
    2486:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2488:	4653      	mov	r3, sl
    248a:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
    248c:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    248e:	2327      	movs	r3, #39	; 0x27
    2490:	5cf3      	ldrb	r3, [r6, r3]
    2492:	2b00      	cmp	r3, #0
    2494:	d101      	bne.n	249a <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2496:	3304      	adds	r3, #4
    2498:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    249a:	7e71      	ldrb	r1, [r6, #25]
    249c:	0289      	lsls	r1, r1, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    249e:	7f33      	ldrb	r3, [r6, #28]
    24a0:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24a2:	4319      	orrs	r1, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    24a4:	7ab3      	ldrb	r3, [r6, #10]
    24a6:	7af0      	ldrb	r0, [r6, #11]
    24a8:	4303      	orrs	r3, r0
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24aa:	4319      	orrs	r1, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    24ac:	7f73      	ldrb	r3, [r6, #29]
    24ae:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24b0:	4319      	orrs	r1, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    24b2:	2324      	movs	r3, #36	; 0x24
    24b4:	5cf3      	ldrb	r3, [r6, r3]
    24b6:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    24b8:	4319      	orrs	r1, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    24ba:	2325      	movs	r3, #37	; 0x25
    24bc:	5cf3      	ldrb	r3, [r6, r3]
    24be:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    24c0:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    24c2:	8933      	ldrh	r3, [r6, #8]
    24c4:	2bff      	cmp	r3, #255	; 0xff
    24c6:	d100      	bne.n	24ca <usart_init+0x182>
    24c8:	e082      	b.n	25d0 <usart_init+0x288>
		if(config->lin_slave_enable) {
    24ca:	7ef0      	ldrb	r0, [r6, #27]
    24cc:	2800      	cmp	r0, #0
    24ce:	d002      	beq.n	24d6 <usart_init+0x18e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    24d0:	20a0      	movs	r0, #160	; 0xa0
    24d2:	04c0      	lsls	r0, r0, #19
    24d4:	4302      	orrs	r2, r0
		ctrlb |= config->parity;
    24d6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    24d8:	232c      	movs	r3, #44	; 0x2c
    24da:	5cf3      	ldrb	r3, [r6, r3]
    24dc:	2b00      	cmp	r3, #0
    24de:	d103      	bne.n	24e8 <usart_init+0x1a0>
    24e0:	4b61      	ldr	r3, [pc, #388]	; (2668 <usart_init+0x320>)
    24e2:	789b      	ldrb	r3, [r3, #2]
    24e4:	079b      	lsls	r3, r3, #30
    24e6:	d501      	bpl.n	24ec <usart_init+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    24e8:	2380      	movs	r3, #128	; 0x80
    24ea:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    24ec:	6828      	ldr	r0, [r5, #0]
    24ee:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    24f0:	69c3      	ldr	r3, [r0, #28]
	while (usart_is_syncing(module)) {
    24f2:	2b00      	cmp	r3, #0
    24f4:	d1fc      	bne.n	24f0 <usart_init+0x1a8>
	usart_hw->CTRLB.reg = ctrlb;
    24f6:	6079      	str	r1, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    24f8:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24fa:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    24fc:	2b00      	cmp	r3, #0
    24fe:	d1fc      	bne.n	24fa <usart_init+0x1b2>
	usart_hw->CTRLA.reg = ctrla;
    2500:	603a      	str	r2, [r7, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2502:	ab0e      	add	r3, sp, #56	; 0x38
    2504:	2280      	movs	r2, #128	; 0x80
    2506:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2508:	2200      	movs	r2, #0
    250a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    250c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    250e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2510:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2512:	930a      	str	r3, [sp, #40]	; 0x28
    2514:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2516:	930b      	str	r3, [sp, #44]	; 0x2c
    2518:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    251a:	930c      	str	r3, [sp, #48]	; 0x30
    251c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    251e:	9303      	str	r3, [sp, #12]
    2520:	930d      	str	r3, [sp, #52]	; 0x34
    2522:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2524:	ae0a      	add	r6, sp, #40	; 0x28
    2526:	e061      	b.n	25ec <usart_init+0x2a4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2528:	2308      	movs	r3, #8
    252a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    252c:	3b07      	subs	r3, #7
    252e:	9307      	str	r3, [sp, #28]
    2530:	e778      	b.n	2424 <usart_init+0xdc>
	ctrla = (uint32_t)config->data_order |
    2532:	6833      	ldr	r3, [r6, #0]
    2534:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2536:	68f3      	ldr	r3, [r6, #12]
    2538:	4699      	mov	r9, r3
		config->sample_adjustment |
    253a:	6973      	ldr	r3, [r6, #20]
    253c:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    253e:	7e33      	ldrb	r3, [r6, #24]
    2540:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2542:	2326      	movs	r3, #38	; 0x26
    2544:	5cf3      	ldrb	r3, [r6, r3]
    2546:	469a      	mov	sl, r3
	switch (config->transfer_mode)
    2548:	6873      	ldr	r3, [r6, #4]
    254a:	2b00      	cmp	r3, #0
    254c:	d018      	beq.n	2580 <usart_init+0x238>
    254e:	2280      	movs	r2, #128	; 0x80
    2550:	0552      	lsls	r2, r2, #21
    2552:	4293      	cmp	r3, r2
    2554:	d001      	beq.n	255a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2556:	2000      	movs	r0, #0
    2558:	e025      	b.n	25a6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    255a:	2327      	movs	r3, #39	; 0x27
    255c:	5cf3      	ldrb	r3, [r6, r3]
    255e:	2b00      	cmp	r3, #0
    2560:	d000      	beq.n	2564 <usart_init+0x21c>
    2562:	e773      	b.n	244c <usart_init+0x104>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2564:	6a33      	ldr	r3, [r6, #32]
    2566:	001f      	movs	r7, r3
    2568:	b2c0      	uxtb	r0, r0
    256a:	4b40      	ldr	r3, [pc, #256]	; (266c <usart_init+0x324>)
    256c:	4798      	blx	r3
    256e:	0001      	movs	r1, r0
    2570:	220e      	movs	r2, #14
    2572:	ab06      	add	r3, sp, #24
    2574:	469c      	mov	ip, r3
    2576:	4462      	add	r2, ip
    2578:	0038      	movs	r0, r7
    257a:	4b3d      	ldr	r3, [pc, #244]	; (2670 <usart_init+0x328>)
    257c:	4798      	blx	r3
    257e:	e012      	b.n	25a6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2580:	2308      	movs	r3, #8
    2582:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2584:	2300      	movs	r3, #0
    2586:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2588:	2327      	movs	r3, #39	; 0x27
    258a:	5cf3      	ldrb	r3, [r6, r3]
    258c:	2b00      	cmp	r3, #0
    258e:	d00e      	beq.n	25ae <usart_init+0x266>
				status_code =
    2590:	9b06      	ldr	r3, [sp, #24]
    2592:	9300      	str	r3, [sp, #0]
    2594:	9b07      	ldr	r3, [sp, #28]
    2596:	220e      	movs	r2, #14
    2598:	a906      	add	r1, sp, #24
    259a:	468c      	mov	ip, r1
    259c:	4462      	add	r2, ip
    259e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    25a0:	6a30      	ldr	r0, [r6, #32]
    25a2:	4f34      	ldr	r7, [pc, #208]	; (2674 <usart_init+0x32c>)
    25a4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    25a6:	2800      	cmp	r0, #0
    25a8:	d000      	beq.n	25ac <usart_init+0x264>
    25aa:	e6e0      	b.n	236e <usart_init+0x26>
    25ac:	e74e      	b.n	244c <usart_init+0x104>
						_sercom_get_async_baud_val(config->baudrate,
    25ae:	6a33      	ldr	r3, [r6, #32]
    25b0:	001f      	movs	r7, r3
    25b2:	b2c0      	uxtb	r0, r0
    25b4:	4b2d      	ldr	r3, [pc, #180]	; (266c <usart_init+0x324>)
    25b6:	4798      	blx	r3
    25b8:	0001      	movs	r1, r0
				status_code =
    25ba:	9b06      	ldr	r3, [sp, #24]
    25bc:	9300      	str	r3, [sp, #0]
    25be:	9b07      	ldr	r3, [sp, #28]
    25c0:	220e      	movs	r2, #14
    25c2:	a806      	add	r0, sp, #24
    25c4:	4684      	mov	ip, r0
    25c6:	4462      	add	r2, ip
    25c8:	0038      	movs	r0, r7
    25ca:	4f2a      	ldr	r7, [pc, #168]	; (2674 <usart_init+0x32c>)
    25cc:	47b8      	blx	r7
    25ce:	e7ea      	b.n	25a6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    25d0:	7ef3      	ldrb	r3, [r6, #27]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d080      	beq.n	24d8 <usart_init+0x190>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	04db      	lsls	r3, r3, #19
    25da:	431a      	orrs	r2, r3
    25dc:	e77c      	b.n	24d8 <usart_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    25de:	0020      	movs	r0, r4
    25e0:	4b25      	ldr	r3, [pc, #148]	; (2678 <usart_init+0x330>)
    25e2:	4798      	blx	r3
    25e4:	e007      	b.n	25f6 <usart_init+0x2ae>
    25e6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    25e8:	2f04      	cmp	r7, #4
    25ea:	d00d      	beq.n	2608 <usart_init+0x2c0>
    25ec:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25ee:	00bb      	lsls	r3, r7, #2
    25f0:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    25f2:	2800      	cmp	r0, #0
    25f4:	d0f3      	beq.n	25de <usart_init+0x296>
		if (current_pinmux != PINMUX_UNUSED) {
    25f6:	1c43      	adds	r3, r0, #1
    25f8:	d0f5      	beq.n	25e6 <usart_init+0x29e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    25fa:	a90e      	add	r1, sp, #56	; 0x38
    25fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    25fe:	0c00      	lsrs	r0, r0, #16
    2600:	b2c0      	uxtb	r0, r0
    2602:	4b1e      	ldr	r3, [pc, #120]	; (267c <usart_init+0x334>)
    2604:	4798      	blx	r3
    2606:	e7ee      	b.n	25e6 <usart_init+0x29e>
		module->callback[i]            = NULL;
    2608:	2300      	movs	r3, #0
    260a:	60eb      	str	r3, [r5, #12]
    260c:	612b      	str	r3, [r5, #16]
    260e:	616b      	str	r3, [r5, #20]
    2610:	61ab      	str	r3, [r5, #24]
    2612:	61eb      	str	r3, [r5, #28]
    2614:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2616:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2618:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    261a:	2200      	movs	r2, #0
    261c:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    261e:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2620:	3330      	adds	r3, #48	; 0x30
    2622:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2624:	3301      	adds	r3, #1
    2626:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2628:	3301      	adds	r3, #1
    262a:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    262c:	3301      	adds	r3, #1
    262e:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2630:	6828      	ldr	r0, [r5, #0]
    2632:	4b08      	ldr	r3, [pc, #32]	; (2654 <usart_init+0x30c>)
    2634:	4798      	blx	r3
    2636:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2638:	4911      	ldr	r1, [pc, #68]	; (2680 <usart_init+0x338>)
    263a:	4b12      	ldr	r3, [pc, #72]	; (2684 <usart_init+0x33c>)
    263c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    263e:	00a4      	lsls	r4, r4, #2
    2640:	4b11      	ldr	r3, [pc, #68]	; (2688 <usart_init+0x340>)
    2642:	50e5      	str	r5, [r4, r3]
	return status_code;
    2644:	2000      	movs	r0, #0
    2646:	e692      	b.n	236e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2648:	2310      	movs	r3, #16
    264a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    264c:	2300      	movs	r3, #0
    264e:	9307      	str	r3, [sp, #28]
    2650:	e6e8      	b.n	2424 <usart_init+0xdc>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	00001e25 	.word	0x00001e25
    2658:	40000400 	.word	0x40000400
    265c:	00002f95 	.word	0x00002f95
    2660:	00002f09 	.word	0x00002f09
    2664:	00001c5d 	.word	0x00001c5d
    2668:	41002000 	.word	0x41002000
    266c:	00002fb1 	.word	0x00002fb1
    2670:	00001a65 	.word	0x00001a65
    2674:	00001a8d 	.word	0x00001a8d
    2678:	00001ca9 	.word	0x00001ca9
    267c:	0000308d 	.word	0x0000308d
    2680:	00002829 	.word	0x00002829
    2684:	00001e5d 	.word	0x00001e5d
    2688:	200005bc 	.word	0x200005bc

0000268c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    268c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    268e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2690:	2a00      	cmp	r2, #0
    2692:	d101      	bne.n	2698 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2694:	0018      	movs	r0, r3
    2696:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2698:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    269a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    269c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    269e:	2a00      	cmp	r2, #0
    26a0:	d1f8      	bne.n	2694 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    26a2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    26a4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    26a6:	2a00      	cmp	r2, #0
    26a8:	d1fc      	bne.n	26a4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    26aa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    26ac:	2102      	movs	r1, #2
    26ae:	7e1a      	ldrb	r2, [r3, #24]
    26b0:	420a      	tst	r2, r1
    26b2:	d0fc      	beq.n	26ae <usart_write_wait+0x22>
	return STATUS_OK;
    26b4:	2300      	movs	r3, #0
    26b6:	e7ed      	b.n	2694 <usart_write_wait+0x8>

000026b8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    26b8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    26ba:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    26bc:	2a00      	cmp	r2, #0
    26be:	d101      	bne.n	26c4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    26c0:	0018      	movs	r0, r3
    26c2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    26c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    26c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    26c8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    26ca:	2a00      	cmp	r2, #0
    26cc:	d1f8      	bne.n	26c0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    26ce:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    26d0:	7e10      	ldrb	r0, [r2, #24]
    26d2:	0740      	lsls	r0, r0, #29
    26d4:	d5f4      	bpl.n	26c0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    26d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26d8:	2b00      	cmp	r3, #0
    26da:	d1fc      	bne.n	26d6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    26dc:	8b53      	ldrh	r3, [r2, #26]
    26de:	b2db      	uxtb	r3, r3
	if (error_code) {
    26e0:	0698      	lsls	r0, r3, #26
    26e2:	d021      	beq.n	2728 <usart_read_wait+0x70>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    26e4:	0798      	lsls	r0, r3, #30
    26e6:	d503      	bpl.n	26f0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    26e8:	2302      	movs	r3, #2
    26ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    26ec:	3318      	adds	r3, #24
    26ee:	e7e7      	b.n	26c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    26f0:	0758      	lsls	r0, r3, #29
    26f2:	d503      	bpl.n	26fc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    26f4:	2304      	movs	r3, #4
    26f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    26f8:	331a      	adds	r3, #26
    26fa:	e7e1      	b.n	26c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    26fc:	07d8      	lsls	r0, r3, #31
    26fe:	d503      	bpl.n	2708 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2700:	2301      	movs	r3, #1
    2702:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2704:	3312      	adds	r3, #18
    2706:	e7db      	b.n	26c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2708:	06d8      	lsls	r0, r3, #27
    270a:	d505      	bpl.n	2718 <usart_read_wait+0x60>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    270c:	8b53      	ldrh	r3, [r2, #26]
    270e:	2110      	movs	r1, #16
    2710:	430b      	orrs	r3, r1
    2712:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2714:	2342      	movs	r3, #66	; 0x42
    2716:	e7d3      	b.n	26c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2718:	069b      	lsls	r3, r3, #26
    271a:	d505      	bpl.n	2728 <usart_read_wait+0x70>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    271c:	8b53      	ldrh	r3, [r2, #26]
    271e:	2120      	movs	r1, #32
    2720:	430b      	orrs	r3, r1
    2722:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2724:	2341      	movs	r3, #65	; 0x41
    2726:	e7cb      	b.n	26c0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2728:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    272a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    272c:	2300      	movs	r3, #0
    272e:	e7c7      	b.n	26c0 <usart_read_wait+0x8>

00002730 <_usart_read_buffer>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2730:	6803      	ldr	r3, [r0, #0]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    2732:	8582      	strh	r2, [r0, #44]	; 0x2c
	module->rx_buffer_ptr              = rx_data;
    2734:	6241      	str	r1, [r0, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2736:	2105      	movs	r1, #5
    2738:	2232      	movs	r2, #50	; 0x32
    273a:	5481      	strb	r1, [r0, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    273c:	3a2e      	subs	r2, #46	; 0x2e
    273e:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    2740:	7a02      	ldrb	r2, [r0, #8]
    2742:	2a00      	cmp	r2, #0
    2744:	d001      	beq.n	274a <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2746:	2220      	movs	r2, #32
    2748:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    274a:	7a42      	ldrb	r2, [r0, #9]
    274c:	2a00      	cmp	r2, #0
    274e:	d001      	beq.n	2754 <_usart_read_buffer+0x24>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2750:	2208      	movs	r2, #8
    2752:	759a      	strb	r2, [r3, #22]
	}
#endif
}
    2754:	4770      	bx	lr

00002756 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2756:	1c93      	adds	r3, r2, #2
    2758:	009b      	lsls	r3, r3, #2
    275a:	18c3      	adds	r3, r0, r3
    275c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    275e:	2130      	movs	r1, #48	; 0x30
    2760:	2301      	movs	r3, #1
    2762:	4093      	lsls	r3, r2
    2764:	001a      	movs	r2, r3
    2766:	5c43      	ldrb	r3, [r0, r1]
    2768:	4313      	orrs	r3, r2
    276a:	5443      	strb	r3, [r0, r1]
}
    276c:	4770      	bx	lr

0000276e <usart_write_job>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_job(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    276e:	b082      	sub	sp, #8
    2770:	466b      	mov	r3, sp
    2772:	80d9      	strh	r1, [r3, #6]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2774:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2776:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    2778:	2205      	movs	r2, #5
	if (module->remaining_tx_buffer_length > 0) {
    277a:	2b00      	cmp	r3, #0
    277c:	d002      	beq.n	2784 <usart_write_job+0x16>

	/* Call internal write buffer function with length 1 */
	_usart_write_buffer(module, (uint8_t *)&tx_data, 1);

	return STATUS_OK;
}
    277e:	0010      	movs	r0, r2
    2780:	b002      	add	sp, #8
    2782:	4770      	bx	lr
	if (!(module->transmitter_enabled)) {
    2784:	79c3      	ldrb	r3, [r0, #7]
		return STATUS_ERR_DENIED;
    2786:	3217      	adds	r2, #23
	if (!(module->transmitter_enabled)) {
    2788:	2b00      	cmp	r3, #0
    278a:	d0f8      	beq.n	277e <usart_write_job+0x10>
	SercomUsart *const usart_hw = &(module->hw->USART);
    278c:	6803      	ldr	r3, [r0, #0]
	module->remaining_tx_buffer_length = length;
    278e:	3a1b      	subs	r2, #27
    2790:	85c2      	strh	r2, [r0, #46]	; 0x2e
	module->tx_buffer_ptr              = tx_data;
    2792:	466a      	mov	r2, sp
    2794:	3206      	adds	r2, #6
    2796:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2798:	2105      	movs	r1, #5
    279a:	2233      	movs	r2, #51	; 0x33
    279c:	5481      	strb	r1, [r0, r2]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    279e:	2201      	movs	r2, #1
    27a0:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    27a2:	2200      	movs	r2, #0
    27a4:	e7eb      	b.n	277e <usart_write_job+0x10>
	...

000027a8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed,
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    27a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    27aa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    27ac:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    27ae:	2205      	movs	r2, #5
	if (module->remaining_rx_buffer_length > 0) {
    27b0:	2b00      	cmp	r3, #0
    27b2:	d001      	beq.n	27b8 <usart_read_job+0x10>

	/* Call internal read buffer function with length 1 */
	_usart_read_buffer(module, (uint8_t *)rx_data, 1);

	return STATUS_OK;
}
    27b4:	0010      	movs	r0, r2
    27b6:	bd10      	pop	{r4, pc}
	_usart_read_buffer(module, (uint8_t *)rx_data, 1);
    27b8:	3a04      	subs	r2, #4
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <usart_read_job+0x1c>)
    27bc:	4798      	blx	r3
	return STATUS_OK;
    27be:	2200      	movs	r2, #0
    27c0:	e7f8      	b.n	27b4 <usart_read_job+0xc>
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	00002731 	.word	0x00002731

000027c8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    27c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    27ca:	2317      	movs	r3, #23
	if (length == 0) {
    27cc:	2a00      	cmp	r2, #0
    27ce:	d101      	bne.n	27d4 <usart_write_buffer_job+0xc>

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);

	return STATUS_OK;
}
    27d0:	0018      	movs	r0, r3
    27d2:	bd10      	pop	{r4, pc}
	if (module->remaining_tx_buffer_length > 0) {
    27d4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
    27d6:	b2a4      	uxth	r4, r4
		return STATUS_BUSY;
    27d8:	3b12      	subs	r3, #18
	if (module->remaining_tx_buffer_length > 0) {
    27da:	2c00      	cmp	r4, #0
    27dc:	d1f8      	bne.n	27d0 <usart_write_buffer_job+0x8>
	if (!(module->transmitter_enabled)) {
    27de:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    27e0:	3317      	adds	r3, #23
	if (!(module->transmitter_enabled)) {
    27e2:	2c00      	cmp	r4, #0
    27e4:	d0f4      	beq.n	27d0 <usart_write_buffer_job+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    27e6:	6803      	ldr	r3, [r0, #0]
	module->remaining_tx_buffer_length = length;
    27e8:	85c2      	strh	r2, [r0, #46]	; 0x2e
	module->tx_buffer_ptr              = tx_data;
    27ea:	6281      	str	r1, [r0, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    27ec:	2105      	movs	r1, #5
    27ee:	2233      	movs	r2, #51	; 0x33
    27f0:	5481      	strb	r1, [r0, r2]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    27f2:	3a32      	subs	r2, #50	; 0x32
    27f4:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    27f6:	2300      	movs	r3, #0
    27f8:	e7ea      	b.n	27d0 <usart_write_buffer_job+0x8>
	...

000027fc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    27fc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    27fe:	2317      	movs	r3, #23
	if (length == 0) {
    2800:	2a00      	cmp	r2, #0
    2802:	d101      	bne.n	2808 <usart_read_buffer_job+0xc>

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);

	return STATUS_OK;
}
    2804:	0018      	movs	r0, r3
    2806:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2808:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    280a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    280c:	2c00      	cmp	r4, #0
    280e:	d0f9      	beq.n	2804 <usart_read_buffer_job+0x8>
	if (module->remaining_rx_buffer_length > 0) {
    2810:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    2812:	b2a4      	uxth	r4, r4
		return STATUS_BUSY;
    2814:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2816:	2c00      	cmp	r4, #0
    2818:	d1f4      	bne.n	2804 <usart_read_buffer_job+0x8>
	_usart_read_buffer(module, rx_data, length);
    281a:	4b02      	ldr	r3, [pc, #8]	; (2824 <usart_read_buffer_job+0x28>)
    281c:	4798      	blx	r3
	return STATUS_OK;
    281e:	2300      	movs	r3, #0
    2820:	e7f0      	b.n	2804 <usart_read_buffer_job+0x8>
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	00002731 	.word	0x00002731

00002828 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    282a:	0080      	lsls	r0, r0, #2
    282c:	4b67      	ldr	r3, [pc, #412]	; (29cc <_usart_interrupt_handler+0x1a4>)
    282e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2830:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2832:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2834:	2b00      	cmp	r3, #0
    2836:	d1fc      	bne.n	2832 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2838:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    283a:	7da6      	ldrb	r6, [r4, #22]
    283c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    283e:	2330      	movs	r3, #48	; 0x30
    2840:	5ceb      	ldrb	r3, [r5, r3]
    2842:	2231      	movs	r2, #49	; 0x31
    2844:	5caf      	ldrb	r7, [r5, r2]
    2846:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2848:	07f3      	lsls	r3, r6, #31
    284a:	d522      	bpl.n	2892 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    284c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    284e:	b29b      	uxth	r3, r3
    2850:	2b00      	cmp	r3, #0
    2852:	d01c      	beq.n	288e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2854:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2856:	7813      	ldrb	r3, [r2, #0]
    2858:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    285a:	1c51      	adds	r1, r2, #1
    285c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    285e:	7969      	ldrb	r1, [r5, #5]
    2860:	2901      	cmp	r1, #1
    2862:	d00e      	beq.n	2882 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2864:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2866:	05db      	lsls	r3, r3, #23
    2868:	0ddb      	lsrs	r3, r3, #23
    286a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    286c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    286e:	3b01      	subs	r3, #1
    2870:	b29b      	uxth	r3, r3
    2872:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2874:	2b00      	cmp	r3, #0
    2876:	d10c      	bne.n	2892 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2878:	3301      	adds	r3, #1
    287a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    287c:	3301      	adds	r3, #1
    287e:	75a3      	strb	r3, [r4, #22]
    2880:	e007      	b.n	2892 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2882:	7851      	ldrb	r1, [r2, #1]
    2884:	0209      	lsls	r1, r1, #8
    2886:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2888:	3202      	adds	r2, #2
    288a:	62aa      	str	r2, [r5, #40]	; 0x28
    288c:	e7eb      	b.n	2866 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    288e:	2301      	movs	r3, #1
    2890:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2892:	07b3      	lsls	r3, r6, #30
    2894:	d506      	bpl.n	28a4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2896:	2302      	movs	r3, #2
    2898:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    289a:	2200      	movs	r2, #0
    289c:	3331      	adds	r3, #49	; 0x31
    289e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    28a0:	07fb      	lsls	r3, r7, #31
    28a2:	d41c      	bmi.n	28de <_usart_interrupt_handler+0xb6>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    28a4:	0773      	lsls	r3, r6, #29
    28a6:	d56f      	bpl.n	2988 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    28a8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    28aa:	b29b      	uxth	r3, r3
    28ac:	2b00      	cmp	r3, #0
    28ae:	d069      	beq.n	2984 <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    28b0:	8b63      	ldrh	r3, [r4, #26]
    28b2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    28b4:	071a      	lsls	r2, r3, #28
    28b6:	d416      	bmi.n	28e6 <_usart_interrupt_handler+0xbe>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    28b8:	223f      	movs	r2, #63	; 0x3f
    28ba:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    28bc:	2b00      	cmp	r3, #0
    28be:	d03e      	beq.n	293e <_usart_interrupt_handler+0x116>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    28c0:	079a      	lsls	r2, r3, #30
    28c2:	d513      	bpl.n	28ec <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    28c4:	221a      	movs	r2, #26
    28c6:	2332      	movs	r3, #50	; 0x32
    28c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    28ca:	8b63      	ldrh	r3, [r4, #26]
    28cc:	3a18      	subs	r2, #24
    28ce:	4313      	orrs	r3, r2
    28d0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    28d2:	077b      	lsls	r3, r7, #29
    28d4:	d558      	bpl.n	2988 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    28d6:	0028      	movs	r0, r5
    28d8:	696b      	ldr	r3, [r5, #20]
    28da:	4798      	blx	r3
    28dc:	e054      	b.n	2988 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    28de:	0028      	movs	r0, r5
    28e0:	68eb      	ldr	r3, [r5, #12]
    28e2:	4798      	blx	r3
    28e4:	e7de      	b.n	28a4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    28e6:	2237      	movs	r2, #55	; 0x37
    28e8:	4013      	ands	r3, r2
    28ea:	e7e7      	b.n	28bc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28ec:	075a      	lsls	r2, r3, #29
    28ee:	d507      	bpl.n	2900 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    28f0:	221e      	movs	r2, #30
    28f2:	2332      	movs	r3, #50	; 0x32
    28f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    28f6:	8b63      	ldrh	r3, [r4, #26]
    28f8:	3a1a      	subs	r2, #26
    28fa:	4313      	orrs	r3, r2
    28fc:	8363      	strh	r3, [r4, #26]
    28fe:	e7e8      	b.n	28d2 <_usart_interrupt_handler+0xaa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2900:	07da      	lsls	r2, r3, #31
    2902:	d507      	bpl.n	2914 <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2904:	2213      	movs	r2, #19
    2906:	2332      	movs	r3, #50	; 0x32
    2908:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    290a:	8b63      	ldrh	r3, [r4, #26]
    290c:	3a12      	subs	r2, #18
    290e:	4313      	orrs	r3, r2
    2910:	8363      	strh	r3, [r4, #26]
    2912:	e7de      	b.n	28d2 <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2914:	06da      	lsls	r2, r3, #27
    2916:	d507      	bpl.n	2928 <_usart_interrupt_handler+0x100>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2918:	2242      	movs	r2, #66	; 0x42
    291a:	2332      	movs	r3, #50	; 0x32
    291c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    291e:	8b63      	ldrh	r3, [r4, #26]
    2920:	3a32      	subs	r2, #50	; 0x32
    2922:	4313      	orrs	r3, r2
    2924:	8363      	strh	r3, [r4, #26]
    2926:	e7d4      	b.n	28d2 <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2928:	2220      	movs	r2, #32
    292a:	421a      	tst	r2, r3
    292c:	d0d1      	beq.n	28d2 <_usart_interrupt_handler+0xaa>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    292e:	3221      	adds	r2, #33	; 0x21
    2930:	2332      	movs	r3, #50	; 0x32
    2932:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    2934:	8b63      	ldrh	r3, [r4, #26]
    2936:	3a21      	subs	r2, #33	; 0x21
    2938:	4313      	orrs	r3, r2
    293a:	8363      	strh	r3, [r4, #26]
    293c:	e7c9      	b.n	28d2 <_usart_interrupt_handler+0xaa>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    293e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2940:	05db      	lsls	r3, r3, #23
    2942:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2944:	b2da      	uxtb	r2, r3
    2946:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2948:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    294a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    294c:	1c51      	adds	r1, r2, #1
    294e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2950:	7969      	ldrb	r1, [r5, #5]
    2952:	2901      	cmp	r1, #1
    2954:	d010      	beq.n	2978 <_usart_interrupt_handler+0x150>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2956:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2958:	3b01      	subs	r3, #1
    295a:	b29b      	uxth	r3, r3
    295c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    295e:	2b00      	cmp	r3, #0
    2960:	d112      	bne.n	2988 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2962:	3304      	adds	r3, #4
    2964:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2966:	2200      	movs	r2, #0
    2968:	332e      	adds	r3, #46	; 0x2e
    296a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    296c:	07bb      	lsls	r3, r7, #30
    296e:	d50b      	bpl.n	2988 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2970:	0028      	movs	r0, r5
    2972:	692b      	ldr	r3, [r5, #16]
    2974:	4798      	blx	r3
    2976:	e007      	b.n	2988 <_usart_interrupt_handler+0x160>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2978:	0a1b      	lsrs	r3, r3, #8
    297a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    297c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    297e:	3301      	adds	r3, #1
    2980:	626b      	str	r3, [r5, #36]	; 0x24
    2982:	e7e8      	b.n	2956 <_usart_interrupt_handler+0x12e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2984:	2304      	movs	r3, #4
    2986:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2988:	06f3      	lsls	r3, r6, #27
    298a:	d504      	bpl.n	2996 <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    298c:	2310      	movs	r3, #16
    298e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2990:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2992:	06fb      	lsls	r3, r7, #27
    2994:	d40e      	bmi.n	29b4 <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2996:	06b3      	lsls	r3, r6, #26
    2998:	d504      	bpl.n	29a4 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    299a:	2320      	movs	r3, #32
    299c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    299e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    29a0:	073b      	lsls	r3, r7, #28
    29a2:	d40b      	bmi.n	29bc <_usart_interrupt_handler+0x194>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    29a4:	0733      	lsls	r3, r6, #28
    29a6:	d504      	bpl.n	29b2 <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    29a8:	2308      	movs	r3, #8
    29aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    29ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    29ae:	06bb      	lsls	r3, r7, #26
    29b0:	d408      	bmi.n	29c4 <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    29b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    29b4:	0028      	movs	r0, r5
    29b6:	69eb      	ldr	r3, [r5, #28]
    29b8:	4798      	blx	r3
    29ba:	e7ec      	b.n	2996 <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    29bc:	0028      	movs	r0, r5
    29be:	69ab      	ldr	r3, [r5, #24]
    29c0:	4798      	blx	r3
    29c2:	e7ef      	b.n	29a4 <_usart_interrupt_handler+0x17c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    29c4:	6a2b      	ldr	r3, [r5, #32]
    29c6:	0028      	movs	r0, r5
    29c8:	4798      	blx	r3
}
    29ca:	e7f2      	b.n	29b2 <_usart_interrupt_handler+0x18a>
    29cc:	200005bc 	.word	0x200005bc

000029d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    29d0:	b510      	push	{r4, lr}
	switch (clock_source) {
    29d2:	2808      	cmp	r0, #8
    29d4:	d803      	bhi.n	29de <system_clock_source_get_hz+0xe>
    29d6:	0080      	lsls	r0, r0, #2
    29d8:	4b1b      	ldr	r3, [pc, #108]	; (2a48 <system_clock_source_get_hz+0x78>)
    29da:	581b      	ldr	r3, [r3, r0]
    29dc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    29de:	2000      	movs	r0, #0
    29e0:	e030      	b.n	2a44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    29e2:	4b1a      	ldr	r3, [pc, #104]	; (2a4c <system_clock_source_get_hz+0x7c>)
    29e4:	6918      	ldr	r0, [r3, #16]
    29e6:	e02d      	b.n	2a44 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    29e8:	4b19      	ldr	r3, [pc, #100]	; (2a50 <system_clock_source_get_hz+0x80>)
    29ea:	6a1b      	ldr	r3, [r3, #32]
    29ec:	059b      	lsls	r3, r3, #22
    29ee:	0f9b      	lsrs	r3, r3, #30
    29f0:	4818      	ldr	r0, [pc, #96]	; (2a54 <system_clock_source_get_hz+0x84>)
    29f2:	40d8      	lsrs	r0, r3
    29f4:	e026      	b.n	2a44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    29f6:	4b15      	ldr	r3, [pc, #84]	; (2a4c <system_clock_source_get_hz+0x7c>)
    29f8:	6958      	ldr	r0, [r3, #20]
    29fa:	e023      	b.n	2a44 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    29fc:	4b13      	ldr	r3, [pc, #76]	; (2a4c <system_clock_source_get_hz+0x7c>)
    29fe:	681b      	ldr	r3, [r3, #0]
			return 0;
    2a00:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2a02:	079b      	lsls	r3, r3, #30
    2a04:	d51e      	bpl.n	2a44 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a06:	4912      	ldr	r1, [pc, #72]	; (2a50 <system_clock_source_get_hz+0x80>)
    2a08:	2210      	movs	r2, #16
    2a0a:	68cb      	ldr	r3, [r1, #12]
    2a0c:	421a      	tst	r2, r3
    2a0e:	d0fc      	beq.n	2a0a <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2a10:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <system_clock_source_get_hz+0x7c>)
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	075b      	lsls	r3, r3, #29
    2a16:	d401      	bmi.n	2a1c <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2a18:	480f      	ldr	r0, [pc, #60]	; (2a58 <system_clock_source_get_hz+0x88>)
    2a1a:	e013      	b.n	2a44 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2a1c:	2000      	movs	r0, #0
    2a1e:	4b0f      	ldr	r3, [pc, #60]	; (2a5c <system_clock_source_get_hz+0x8c>)
    2a20:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2a22:	4b0a      	ldr	r3, [pc, #40]	; (2a4c <system_clock_source_get_hz+0x7c>)
    2a24:	689b      	ldr	r3, [r3, #8]
    2a26:	041b      	lsls	r3, r3, #16
    2a28:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2a2a:	4358      	muls	r0, r3
    2a2c:	e00a      	b.n	2a44 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2a2e:	2350      	movs	r3, #80	; 0x50
    2a30:	4a07      	ldr	r2, [pc, #28]	; (2a50 <system_clock_source_get_hz+0x80>)
    2a32:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2a34:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2a36:	075b      	lsls	r3, r3, #29
    2a38:	d504      	bpl.n	2a44 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2a3a:	4b04      	ldr	r3, [pc, #16]	; (2a4c <system_clock_source_get_hz+0x7c>)
    2a3c:	68d8      	ldr	r0, [r3, #12]
    2a3e:	e001      	b.n	2a44 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2a40:	2080      	movs	r0, #128	; 0x80
    2a42:	0200      	lsls	r0, r0, #8
	}
}
    2a44:	bd10      	pop	{r4, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	00004e0c 	.word	0x00004e0c
    2a4c:	20000544 	.word	0x20000544
    2a50:	40000800 	.word	0x40000800
    2a54:	007a1200 	.word	0x007a1200
    2a58:	02dc6c00 	.word	0x02dc6c00
    2a5c:	00002fb1 	.word	0x00002fb1

00002a60 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2a60:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2a62:	490c      	ldr	r1, [pc, #48]	; (2a94 <system_clock_source_osc8m_set_config+0x34>)
    2a64:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2a66:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2a68:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2a6a:	7840      	ldrb	r0, [r0, #1]
    2a6c:	2201      	movs	r2, #1
    2a6e:	4010      	ands	r0, r2
    2a70:	0180      	lsls	r0, r0, #6
    2a72:	2640      	movs	r6, #64	; 0x40
    2a74:	43b3      	bics	r3, r6
    2a76:	4303      	orrs	r3, r0
    2a78:	402a      	ands	r2, r5
    2a7a:	01d2      	lsls	r2, r2, #7
    2a7c:	2080      	movs	r0, #128	; 0x80
    2a7e:	4383      	bics	r3, r0
    2a80:	4313      	orrs	r3, r2
    2a82:	2203      	movs	r2, #3
    2a84:	4022      	ands	r2, r4
    2a86:	0212      	lsls	r2, r2, #8
    2a88:	4803      	ldr	r0, [pc, #12]	; (2a98 <system_clock_source_osc8m_set_config+0x38>)
    2a8a:	4003      	ands	r3, r0
    2a8c:	4313      	orrs	r3, r2
    2a8e:	620b      	str	r3, [r1, #32]
}
    2a90:	bd70      	pop	{r4, r5, r6, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	40000800 	.word	0x40000800
    2a98:	fffffcff 	.word	0xfffffcff

00002a9c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9e:	46ce      	mov	lr, r9
    2aa0:	4647      	mov	r7, r8
    2aa2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2aa4:	4b19      	ldr	r3, [pc, #100]	; (2b0c <system_clock_source_osc32k_set_config+0x70>)
    2aa6:	4699      	mov	r9, r3
    2aa8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2aaa:	7841      	ldrb	r1, [r0, #1]
    2aac:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2aae:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2ab0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2ab2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2ab4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2ab6:	7880      	ldrb	r0, [r0, #2]
    2ab8:	2101      	movs	r1, #1
    2aba:	4008      	ands	r0, r1
    2abc:	0080      	lsls	r0, r0, #2
    2abe:	2204      	movs	r2, #4
    2ac0:	4393      	bics	r3, r2
    2ac2:	4303      	orrs	r3, r0
    2ac4:	4660      	mov	r0, ip
    2ac6:	4008      	ands	r0, r1
    2ac8:	00c0      	lsls	r0, r0, #3
    2aca:	3204      	adds	r2, #4
    2acc:	4393      	bics	r3, r2
    2ace:	4303      	orrs	r3, r0
    2ad0:	0038      	movs	r0, r7
    2ad2:	4008      	ands	r0, r1
    2ad4:	0180      	lsls	r0, r0, #6
    2ad6:	2740      	movs	r7, #64	; 0x40
    2ad8:	43bb      	bics	r3, r7
    2ada:	4303      	orrs	r3, r0
    2adc:	0030      	movs	r0, r6
    2ade:	4008      	ands	r0, r1
    2ae0:	01c0      	lsls	r0, r0, #7
    2ae2:	2680      	movs	r6, #128	; 0x80
    2ae4:	43b3      	bics	r3, r6
    2ae6:	4303      	orrs	r3, r0
    2ae8:	2007      	movs	r0, #7
    2aea:	4005      	ands	r5, r0
    2aec:	022d      	lsls	r5, r5, #8
    2aee:	4808      	ldr	r0, [pc, #32]	; (2b10 <system_clock_source_osc32k_set_config+0x74>)
    2af0:	4003      	ands	r3, r0
    2af2:	432b      	orrs	r3, r5
    2af4:	4021      	ands	r1, r4
    2af6:	0309      	lsls	r1, r1, #12
    2af8:	4806      	ldr	r0, [pc, #24]	; (2b14 <system_clock_source_osc32k_set_config+0x78>)
    2afa:	4003      	ands	r3, r0
    2afc:	430b      	orrs	r3, r1
    2afe:	464a      	mov	r2, r9
    2b00:	6193      	str	r3, [r2, #24]
}
    2b02:	bc0c      	pop	{r2, r3}
    2b04:	4690      	mov	r8, r2
    2b06:	4699      	mov	r9, r3
    2b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	40000800 	.word	0x40000800
    2b10:	fffff8ff 	.word	0xfffff8ff
    2b14:	ffffefff 	.word	0xffffefff

00002b18 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2b18:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b1a:	7a03      	ldrb	r3, [r0, #8]
    2b1c:	069b      	lsls	r3, r3, #26
    2b1e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2b20:	8942      	ldrh	r2, [r0, #10]
    2b22:	0592      	lsls	r2, r2, #22
    2b24:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2b26:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2b28:	4915      	ldr	r1, [pc, #84]	; (2b80 <system_clock_source_dfll_set_config+0x68>)
    2b2a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2b2c:	8843      	ldrh	r3, [r0, #2]
    2b2e:	8882      	ldrh	r2, [r0, #4]
    2b30:	4313      	orrs	r3, r2
			(uint32_t)config->wakeup_lock     |
    2b32:	7982      	ldrb	r2, [r0, #6]
    2b34:	79c4      	ldrb	r4, [r0, #7]
    2b36:	4322      	orrs	r2, r4
			(uint32_t)config->quick_lock      |
    2b38:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2b3a:	7842      	ldrb	r2, [r0, #1]
    2b3c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2b3e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2b40:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2b42:	7803      	ldrb	r3, [r0, #0]
    2b44:	2b04      	cmp	r3, #4
    2b46:	d00a      	beq.n	2b5e <system_clock_source_dfll_set_config+0x46>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2b48:	2b20      	cmp	r3, #32
    2b4a:	d107      	bne.n	2b5c <system_clock_source_dfll_set_config+0x44>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b4c:	8a02      	ldrh	r2, [r0, #16]
		_system_clock_inst.dfll.mul =
    2b4e:	4b0c      	ldr	r3, [pc, #48]	; (2b80 <system_clock_source_dfll_set_config+0x68>)
    2b50:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2b52:	6819      	ldr	r1, [r3, #0]
    2b54:	2284      	movs	r2, #132	; 0x84
    2b56:	00d2      	lsls	r2, r2, #3
    2b58:	430a      	orrs	r2, r1
    2b5a:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2b5c:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b5e:	7b03      	ldrb	r3, [r0, #12]
    2b60:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b62:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b64:	4313      	orrs	r3, r2
    2b66:	89c2      	ldrh	r2, [r0, #14]
    2b68:	0412      	lsls	r2, r2, #16
    2b6a:	4906      	ldr	r1, [pc, #24]	; (2b84 <system_clock_source_dfll_set_config+0x6c>)
    2b6c:	400a      	ands	r2, r1
    2b6e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b70:	4a03      	ldr	r2, [pc, #12]	; (2b80 <system_clock_source_dfll_set_config+0x68>)
    2b72:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b74:	6813      	ldr	r3, [r2, #0]
    2b76:	2104      	movs	r1, #4
    2b78:	430b      	orrs	r3, r1
    2b7a:	6013      	str	r3, [r2, #0]
    2b7c:	e7ee      	b.n	2b5c <system_clock_source_dfll_set_config+0x44>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	20000544 	.word	0x20000544
    2b84:	03ff0000 	.word	0x03ff0000

00002b88 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b88:	2808      	cmp	r0, #8
    2b8a:	d803      	bhi.n	2b94 <system_clock_source_enable+0xc>
    2b8c:	0080      	lsls	r0, r0, #2
    2b8e:	4b22      	ldr	r3, [pc, #136]	; (2c18 <system_clock_source_enable+0x90>)
    2b90:	581b      	ldr	r3, [r3, r0]
    2b92:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b94:	2017      	movs	r0, #23
    2b96:	e03e      	b.n	2c16 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b98:	4a20      	ldr	r2, [pc, #128]	; (2c1c <system_clock_source_enable+0x94>)
    2b9a:	6a13      	ldr	r3, [r2, #32]
    2b9c:	2102      	movs	r1, #2
    2b9e:	430b      	orrs	r3, r1
    2ba0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2ba2:	2000      	movs	r0, #0
    2ba4:	e037      	b.n	2c16 <system_clock_source_enable+0x8e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2ba6:	4a1d      	ldr	r2, [pc, #116]	; (2c1c <system_clock_source_enable+0x94>)
    2ba8:	6993      	ldr	r3, [r2, #24]
    2baa:	2102      	movs	r1, #2
    2bac:	430b      	orrs	r3, r1
    2bae:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2bb0:	2000      	movs	r0, #0
		break;
    2bb2:	e030      	b.n	2c16 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2bb4:	4a19      	ldr	r2, [pc, #100]	; (2c1c <system_clock_source_enable+0x94>)
    2bb6:	8a13      	ldrh	r3, [r2, #16]
    2bb8:	2102      	movs	r1, #2
    2bba:	430b      	orrs	r3, r1
    2bbc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2bbe:	2000      	movs	r0, #0
		break;
    2bc0:	e029      	b.n	2c16 <system_clock_source_enable+0x8e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2bc2:	4a16      	ldr	r2, [pc, #88]	; (2c1c <system_clock_source_enable+0x94>)
    2bc4:	8a93      	ldrh	r3, [r2, #20]
    2bc6:	2102      	movs	r1, #2
    2bc8:	430b      	orrs	r3, r1
    2bca:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2bcc:	2000      	movs	r0, #0
		break;
    2bce:	e022      	b.n	2c16 <system_clock_source_enable+0x8e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2bd0:	4b13      	ldr	r3, [pc, #76]	; (2c20 <system_clock_source_enable+0x98>)
    2bd2:	681a      	ldr	r2, [r3, #0]
    2bd4:	2102      	movs	r1, #2
    2bd6:	430a      	orrs	r2, r1
    2bd8:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	4a11      	ldr	r2, [pc, #68]	; (2c24 <system_clock_source_enable+0x9c>)
    2bde:	4013      	ands	r3, r2
    2be0:	4a0e      	ldr	r2, [pc, #56]	; (2c1c <system_clock_source_enable+0x94>)
    2be2:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2be4:	0011      	movs	r1, r2
    2be6:	2210      	movs	r2, #16
    2be8:	68cb      	ldr	r3, [r1, #12]
    2bea:	421a      	tst	r2, r3
    2bec:	d0fc      	beq.n	2be8 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2bee:	4a0c      	ldr	r2, [pc, #48]	; (2c20 <system_clock_source_enable+0x98>)
    2bf0:	6891      	ldr	r1, [r2, #8]
    2bf2:	4b0a      	ldr	r3, [pc, #40]	; (2c1c <system_clock_source_enable+0x94>)
    2bf4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2bf6:	6851      	ldr	r1, [r2, #4]
    2bf8:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2bfa:	6812      	ldr	r2, [r2, #0]
    2bfc:	b292      	uxth	r2, r2
    2bfe:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    2c00:	2000      	movs	r0, #0
    2c02:	e008      	b.n	2c16 <system_clock_source_enable+0x8e>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2c04:	4905      	ldr	r1, [pc, #20]	; (2c1c <system_clock_source_enable+0x94>)
    2c06:	2244      	movs	r2, #68	; 0x44
    2c08:	5c8b      	ldrb	r3, [r1, r2]
    2c0a:	2002      	movs	r0, #2
    2c0c:	4303      	orrs	r3, r0
    2c0e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2c10:	2000      	movs	r0, #0
		break;
    2c12:	e000      	b.n	2c16 <system_clock_source_enable+0x8e>
		return STATUS_OK;
    2c14:	2000      	movs	r0, #0
}
    2c16:	4770      	bx	lr
    2c18:	00004e30 	.word	0x00004e30
    2c1c:	40000800 	.word	0x40000800
    2c20:	20000544 	.word	0x20000544
    2c24:	0000ff7f 	.word	0x0000ff7f

00002c28 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	46ce      	mov	lr, r9
    2c2c:	4647      	mov	r7, r8
    2c2e:	b580      	push	{r7, lr}
    2c30:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2c32:	493c      	ldr	r1, [pc, #240]	; (2d24 <system_clock_init+0xfc>)
    2c34:	23c2      	movs	r3, #194	; 0xc2
    2c36:	00db      	lsls	r3, r3, #3
    2c38:	608b      	str	r3, [r1, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2c3a:	4a3b      	ldr	r2, [pc, #236]	; (2d28 <system_clock_init+0x100>)
    2c3c:	6853      	ldr	r3, [r2, #4]
    2c3e:	201e      	movs	r0, #30
    2c40:	4383      	bics	r3, r0
    2c42:	2704      	movs	r7, #4
    2c44:	433b      	orrs	r3, r7
    2c46:	6053      	str	r3, [r2, #4]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    2c48:	4b38      	ldr	r3, [pc, #224]	; (2d2c <system_clock_init+0x104>)
    2c4a:	681b      	ldr	r3, [r3, #0]
	SYSCTRL->OSC32K.bit.CALIB =
    2c4c:	04db      	lsls	r3, r3, #19
    2c4e:	698a      	ldr	r2, [r1, #24]
    2c50:	0e5b      	lsrs	r3, r3, #25
    2c52:	041b      	lsls	r3, r3, #16
    2c54:	4836      	ldr	r0, [pc, #216]	; (2d30 <system_clock_init+0x108>)
    2c56:	4002      	ands	r2, r0
    2c58:	4313      	orrs	r3, r2
    2c5a:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2c5c:	a80a      	add	r0, sp, #40	; 0x28
    2c5e:	2501      	movs	r5, #1
    2c60:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    2c62:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    2c64:	2400      	movs	r4, #0
    2c66:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    2c68:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2c6a:	2307      	movs	r3, #7
    2c6c:	4699      	mov	r9, r3
    2c6e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2c70:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2c72:	4b30      	ldr	r3, [pc, #192]	; (2d34 <system_clock_init+0x10c>)
    2c74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2c76:	2004      	movs	r0, #4
    2c78:	4b2f      	ldr	r3, [pc, #188]	; (2d38 <system_clock_init+0x110>)
    2c7a:	4698      	mov	r8, r3
    2c7c:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c7e:	a805      	add	r0, sp, #20
    2c80:	2600      	movs	r6, #0
    2c82:	8044      	strh	r4, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2c84:	8084      	strh	r4, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c86:	7186      	strb	r6, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c88:	71c6      	strb	r6, [r0, #7]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    2c8a:	464b      	mov	r3, r9
    2c8c:	7203      	strb	r3, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2c8e:	233f      	movs	r3, #63	; 0x3f
    2c90:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c92:	7007      	strb	r7, [r0, #0]
	dfll_conf.on_demand      = false;
    2c94:	7046      	strb	r6, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2c96:	22b7      	movs	r2, #183	; 0xb7
    2c98:	00d2      	lsls	r2, r2, #3
    2c9a:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c9c:	464a      	mov	r2, r9
    2c9e:	7302      	strb	r2, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2ca0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2ca2:	4b26      	ldr	r3, [pc, #152]	; (2d3c <system_clock_init+0x114>)
    2ca4:	4798      	blx	r3
	config->on_demand       = true;
    2ca6:	a804      	add	r0, sp, #16
    2ca8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2caa:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2cac:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2cae:	4b24      	ldr	r3, [pc, #144]	; (2d40 <system_clock_init+0x118>)
    2cb0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2cb2:	2006      	movs	r0, #6
    2cb4:	47c0      	blx	r8


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2cb6:	4b23      	ldr	r3, [pc, #140]	; (2d44 <system_clock_init+0x11c>)
    2cb8:	4798      	blx	r3
	config->division_factor    = 1;
    2cba:	ac01      	add	r4, sp, #4
    2cbc:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    2cbe:	7066      	strb	r6, [r4, #1]
	config->run_in_standby     = false;
    2cc0:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    2cc2:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2cc4:	7027      	strb	r7, [r4, #0]
    2cc6:	0021      	movs	r1, r4
    2cc8:	2001      	movs	r0, #1
    2cca:	4b1f      	ldr	r3, [pc, #124]	; (2d48 <system_clock_init+0x120>)
    2ccc:	4798      	blx	r3
    2cce:	2001      	movs	r0, #1
    2cd0:	4b1e      	ldr	r3, [pc, #120]	; (2d4c <system_clock_init+0x124>)
    2cd2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2cd4:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2cd6:	0021      	movs	r1, r4
    2cd8:	2000      	movs	r0, #0
    2cda:	4b1d      	ldr	r3, [pc, #116]	; (2d50 <system_clock_init+0x128>)
    2cdc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2cde:	2000      	movs	r0, #0
    2ce0:	4b1c      	ldr	r3, [pc, #112]	; (2d54 <system_clock_init+0x12c>)
    2ce2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2ce4:	2007      	movs	r0, #7
    2ce6:	47c0      	blx	r8
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2ce8:	490e      	ldr	r1, [pc, #56]	; (2d24 <system_clock_init+0xfc>)
    2cea:	22d0      	movs	r2, #208	; 0xd0
    2cec:	68cb      	ldr	r3, [r1, #12]
    2cee:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2cf0:	2bd0      	cmp	r3, #208	; 0xd0
    2cf2:	d1fb      	bne.n	2cec <system_clock_init+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    2cf4:	4a18      	ldr	r2, [pc, #96]	; (2d58 <system_clock_init+0x130>)
    2cf6:	2300      	movs	r3, #0
    2cf8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2cfa:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2cfc:	7293      	strb	r3, [r2, #10]
	config->division_factor    = 1;
    2cfe:	a901      	add	r1, sp, #4
    2d00:	2201      	movs	r2, #1
    2d02:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2d04:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2d06:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2d08:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2d0a:	3307      	adds	r3, #7
    2d0c:	700b      	strb	r3, [r1, #0]
    2d0e:	2000      	movs	r0, #0
    2d10:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <system_clock_init+0x120>)
    2d12:	4798      	blx	r3
    2d14:	2000      	movs	r0, #0
    2d16:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <system_clock_init+0x124>)
    2d18:	4798      	blx	r3
#endif
}
    2d1a:	b00d      	add	sp, #52	; 0x34
    2d1c:	bc0c      	pop	{r2, r3}
    2d1e:	4690      	mov	r8, r2
    2d20:	4699      	mov	r9, r3
    2d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d24:	40000800 	.word	0x40000800
    2d28:	41004000 	.word	0x41004000
    2d2c:	00806024 	.word	0x00806024
    2d30:	ff80ffff 	.word	0xff80ffff
    2d34:	00002a9d 	.word	0x00002a9d
    2d38:	00002b89 	.word	0x00002b89
    2d3c:	00002b19 	.word	0x00002b19
    2d40:	00002a61 	.word	0x00002a61
    2d44:	00002d5d 	.word	0x00002d5d
    2d48:	00002d81 	.word	0x00002d81
    2d4c:	00002e39 	.word	0x00002e39
    2d50:	00002f95 	.word	0x00002f95
    2d54:	00002f09 	.word	0x00002f09
    2d58:	40000400 	.word	0x40000400

00002d5c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2d5c:	4a06      	ldr	r2, [pc, #24]	; (2d78 <system_gclk_init+0x1c>)
    2d5e:	6993      	ldr	r3, [r2, #24]
    2d60:	2108      	movs	r1, #8
    2d62:	430b      	orrs	r3, r1
    2d64:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2d66:	2201      	movs	r2, #1
    2d68:	4b04      	ldr	r3, [pc, #16]	; (2d7c <system_gclk_init+0x20>)
    2d6a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2d6c:	0019      	movs	r1, r3
    2d6e:	780b      	ldrb	r3, [r1, #0]
    2d70:	4213      	tst	r3, r2
    2d72:	d1fc      	bne.n	2d6e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2d74:	4770      	bx	lr
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	40000400 	.word	0x40000400
    2d7c:	40000c00 	.word	0x40000c00

00002d80 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2d80:	b570      	push	{r4, r5, r6, lr}
    2d82:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2d84:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d86:	780d      	ldrb	r5, [r1, #0]
    2d88:	022d      	lsls	r5, r5, #8
    2d8a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2d8c:	784b      	ldrb	r3, [r1, #1]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d002      	beq.n	2d98 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d92:	2380      	movs	r3, #128	; 0x80
    2d94:	02db      	lsls	r3, r3, #11
    2d96:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2d98:	7a4b      	ldrb	r3, [r1, #9]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d002      	beq.n	2da4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2d9e:	2380      	movs	r3, #128	; 0x80
    2da0:	031b      	lsls	r3, r3, #12
    2da2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2da4:	6848      	ldr	r0, [r1, #4]
    2da6:	2801      	cmp	r0, #1
    2da8:	d910      	bls.n	2dcc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2daa:	1e43      	subs	r3, r0, #1
    2dac:	4218      	tst	r0, r3
    2dae:	d134      	bne.n	2e1a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2db0:	2802      	cmp	r0, #2
    2db2:	d930      	bls.n	2e16 <system_gclk_gen_set_config+0x96>
    2db4:	2302      	movs	r3, #2
    2db6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2db8:	3201      	adds	r2, #1
						mask <<= 1) {
    2dba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2dbc:	4298      	cmp	r0, r3
    2dbe:	d8fb      	bhi.n	2db8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2dc0:	0212      	lsls	r2, r2, #8
    2dc2:	4332      	orrs	r2, r6
    2dc4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2dc6:	2380      	movs	r3, #128	; 0x80
    2dc8:	035b      	lsls	r3, r3, #13
    2dca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2dcc:	7a0b      	ldrb	r3, [r1, #8]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d002      	beq.n	2dd8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2dd2:	2380      	movs	r3, #128	; 0x80
    2dd4:	039b      	lsls	r3, r3, #14
    2dd6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    2dd8:	4a13      	ldr	r2, [pc, #76]	; (2e28 <system_gclk_gen_set_config+0xa8>)
    2dda:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2ddc:	b25b      	sxtb	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	dbfb      	blt.n	2dda <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2de2:	4b12      	ldr	r3, [pc, #72]	; (2e2c <system_gclk_gen_set_config+0xac>)
    2de4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2de6:	4b12      	ldr	r3, [pc, #72]	; (2e30 <system_gclk_gen_set_config+0xb0>)
    2de8:	701e      	strb	r6, [r3, #0]
    2dea:	4a0f      	ldr	r2, [pc, #60]	; (2e28 <system_gclk_gen_set_config+0xa8>)
    2dec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2dee:	b25b      	sxtb	r3, r3
    2df0:	2b00      	cmp	r3, #0
    2df2:	dbfb      	blt.n	2dec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2df4:	4b0c      	ldr	r3, [pc, #48]	; (2e28 <system_gclk_gen_set_config+0xa8>)
    2df6:	609c      	str	r4, [r3, #8]
    2df8:	001a      	movs	r2, r3
    2dfa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2dfc:	b25b      	sxtb	r3, r3
    2dfe:	2b00      	cmp	r3, #0
    2e00:	dbfb      	blt.n	2dfa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2e02:	4a09      	ldr	r2, [pc, #36]	; (2e28 <system_gclk_gen_set_config+0xa8>)
    2e04:	6853      	ldr	r3, [r2, #4]
    2e06:	2180      	movs	r1, #128	; 0x80
    2e08:	0249      	lsls	r1, r1, #9
    2e0a:	400b      	ands	r3, r1
    2e0c:	431d      	orrs	r5, r3
    2e0e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2e10:	4b08      	ldr	r3, [pc, #32]	; (2e34 <system_gclk_gen_set_config+0xb4>)
    2e12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e14:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2e16:	2200      	movs	r2, #0
    2e18:	e7d2      	b.n	2dc0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2e1a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2e1c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2e1e:	2380      	movs	r3, #128	; 0x80
    2e20:	029b      	lsls	r3, r3, #10
    2e22:	431d      	orrs	r5, r3
    2e24:	e7d2      	b.n	2dcc <system_gclk_gen_set_config+0x4c>
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	40000c00 	.word	0x40000c00
    2e2c:	00001849 	.word	0x00001849
    2e30:	40000c08 	.word	0x40000c08
    2e34:	00001889 	.word	0x00001889

00002e38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2e38:	b510      	push	{r4, lr}
    2e3a:	0004      	movs	r4, r0
    2e3c:	4a0b      	ldr	r2, [pc, #44]	; (2e6c <system_gclk_gen_enable+0x34>)
    2e3e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e40:	b25b      	sxtb	r3, r3
    2e42:	2b00      	cmp	r3, #0
    2e44:	dbfb      	blt.n	2e3e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2e46:	4b0a      	ldr	r3, [pc, #40]	; (2e70 <system_gclk_gen_enable+0x38>)
    2e48:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e4a:	4b0a      	ldr	r3, [pc, #40]	; (2e74 <system_gclk_gen_enable+0x3c>)
    2e4c:	701c      	strb	r4, [r3, #0]
    2e4e:	4a07      	ldr	r2, [pc, #28]	; (2e6c <system_gclk_gen_enable+0x34>)
    2e50:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e52:	b25b      	sxtb	r3, r3
    2e54:	2b00      	cmp	r3, #0
    2e56:	dbfb      	blt.n	2e50 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2e58:	4a04      	ldr	r2, [pc, #16]	; (2e6c <system_gclk_gen_enable+0x34>)
    2e5a:	6851      	ldr	r1, [r2, #4]
    2e5c:	2380      	movs	r3, #128	; 0x80
    2e5e:	025b      	lsls	r3, r3, #9
    2e60:	430b      	orrs	r3, r1
    2e62:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2e64:	4b04      	ldr	r3, [pc, #16]	; (2e78 <system_gclk_gen_enable+0x40>)
    2e66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e68:	bd10      	pop	{r4, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	40000c00 	.word	0x40000c00
    2e70:	00001849 	.word	0x00001849
    2e74:	40000c04 	.word	0x40000c04
    2e78:	00001889 	.word	0x00001889

00002e7c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2e7c:	b570      	push	{r4, r5, r6, lr}
    2e7e:	0004      	movs	r4, r0
    2e80:	4a1a      	ldr	r2, [pc, #104]	; (2eec <system_gclk_gen_get_hz+0x70>)
    2e82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e84:	b25b      	sxtb	r3, r3
    2e86:	2b00      	cmp	r3, #0
    2e88:	dbfb      	blt.n	2e82 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2e8a:	4b19      	ldr	r3, [pc, #100]	; (2ef0 <system_gclk_gen_get_hz+0x74>)
    2e8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e8e:	4b19      	ldr	r3, [pc, #100]	; (2ef4 <system_gclk_gen_get_hz+0x78>)
    2e90:	701c      	strb	r4, [r3, #0]
    2e92:	4a16      	ldr	r2, [pc, #88]	; (2eec <system_gclk_gen_get_hz+0x70>)
    2e94:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e96:	b25b      	sxtb	r3, r3
    2e98:	2b00      	cmp	r3, #0
    2e9a:	dbfb      	blt.n	2e94 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2e9c:	4e13      	ldr	r6, [pc, #76]	; (2eec <system_gclk_gen_get_hz+0x70>)
    2e9e:	6870      	ldr	r0, [r6, #4]
    2ea0:	04c0      	lsls	r0, r0, #19
    2ea2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2ea4:	4b14      	ldr	r3, [pc, #80]	; (2ef8 <system_gclk_gen_get_hz+0x7c>)
    2ea6:	4798      	blx	r3
    2ea8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2eaa:	4b12      	ldr	r3, [pc, #72]	; (2ef4 <system_gclk_gen_get_hz+0x78>)
    2eac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2eae:	6876      	ldr	r6, [r6, #4]
    2eb0:	02f6      	lsls	r6, r6, #11
    2eb2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2eb4:	4b11      	ldr	r3, [pc, #68]	; (2efc <system_gclk_gen_get_hz+0x80>)
    2eb6:	701c      	strb	r4, [r3, #0]
    2eb8:	4a0c      	ldr	r2, [pc, #48]	; (2eec <system_gclk_gen_get_hz+0x70>)
    2eba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2ebc:	b25b      	sxtb	r3, r3
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	dbfb      	blt.n	2eba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2ec2:	4b0a      	ldr	r3, [pc, #40]	; (2eec <system_gclk_gen_get_hz+0x70>)
    2ec4:	689c      	ldr	r4, [r3, #8]
    2ec6:	0224      	lsls	r4, r4, #8
    2ec8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2eca:	4b0d      	ldr	r3, [pc, #52]	; (2f00 <system_gclk_gen_get_hz+0x84>)
    2ecc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2ece:	2e00      	cmp	r6, #0
    2ed0:	d107      	bne.n	2ee2 <system_gclk_gen_get_hz+0x66>
    2ed2:	2c01      	cmp	r4, #1
    2ed4:	d907      	bls.n	2ee6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2ed6:	0021      	movs	r1, r4
    2ed8:	0028      	movs	r0, r5
    2eda:	4b0a      	ldr	r3, [pc, #40]	; (2f04 <system_gclk_gen_get_hz+0x88>)
    2edc:	4798      	blx	r3
    2ede:	0005      	movs	r5, r0
    2ee0:	e001      	b.n	2ee6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2ee2:	3401      	adds	r4, #1
    2ee4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2ee6:	0028      	movs	r0, r5
    2ee8:	bd70      	pop	{r4, r5, r6, pc}
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	40000c00 	.word	0x40000c00
    2ef0:	00001849 	.word	0x00001849
    2ef4:	40000c04 	.word	0x40000c04
    2ef8:	000029d1 	.word	0x000029d1
    2efc:	40000c08 	.word	0x40000c08
    2f00:	00001889 	.word	0x00001889
    2f04:	00003351 	.word	0x00003351

00002f08 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2f08:	b510      	push	{r4, lr}
    2f0a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f0c:	4b06      	ldr	r3, [pc, #24]	; (2f28 <system_gclk_chan_enable+0x20>)
    2f0e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f10:	4b06      	ldr	r3, [pc, #24]	; (2f2c <system_gclk_chan_enable+0x24>)
    2f12:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2f14:	4a06      	ldr	r2, [pc, #24]	; (2f30 <system_gclk_chan_enable+0x28>)
    2f16:	8853      	ldrh	r3, [r2, #2]
    2f18:	2180      	movs	r1, #128	; 0x80
    2f1a:	01c9      	lsls	r1, r1, #7
    2f1c:	430b      	orrs	r3, r1
    2f1e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2f20:	4b04      	ldr	r3, [pc, #16]	; (2f34 <system_gclk_chan_enable+0x2c>)
    2f22:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f24:	bd10      	pop	{r4, pc}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	00001849 	.word	0x00001849
    2f2c:	40000c02 	.word	0x40000c02
    2f30:	40000c00 	.word	0x40000c00
    2f34:	00001889 	.word	0x00001889

00002f38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2f38:	b510      	push	{r4, lr}
    2f3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f3c:	4b0f      	ldr	r3, [pc, #60]	; (2f7c <system_gclk_chan_disable+0x44>)
    2f3e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f40:	4b0f      	ldr	r3, [pc, #60]	; (2f80 <system_gclk_chan_disable+0x48>)
    2f42:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2f44:	4a0f      	ldr	r2, [pc, #60]	; (2f84 <system_gclk_chan_disable+0x4c>)
    2f46:	8853      	ldrh	r3, [r2, #2]
    2f48:	051b      	lsls	r3, r3, #20
    2f4a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2f4c:	8853      	ldrh	r3, [r2, #2]
    2f4e:	490e      	ldr	r1, [pc, #56]	; (2f88 <system_gclk_chan_disable+0x50>)
    2f50:	400b      	ands	r3, r1
    2f52:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2f54:	8853      	ldrh	r3, [r2, #2]
    2f56:	490d      	ldr	r1, [pc, #52]	; (2f8c <system_gclk_chan_disable+0x54>)
    2f58:	400b      	ands	r3, r1
    2f5a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2f5c:	0011      	movs	r1, r2
    2f5e:	2280      	movs	r2, #128	; 0x80
    2f60:	01d2      	lsls	r2, r2, #7
    2f62:	884b      	ldrh	r3, [r1, #2]
    2f64:	4213      	tst	r3, r2
    2f66:	d1fc      	bne.n	2f62 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2f68:	4906      	ldr	r1, [pc, #24]	; (2f84 <system_gclk_chan_disable+0x4c>)
    2f6a:	884a      	ldrh	r2, [r1, #2]
    2f6c:	0203      	lsls	r3, r0, #8
    2f6e:	4806      	ldr	r0, [pc, #24]	; (2f88 <system_gclk_chan_disable+0x50>)
    2f70:	4002      	ands	r2, r0
    2f72:	4313      	orrs	r3, r2
    2f74:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2f76:	4b06      	ldr	r3, [pc, #24]	; (2f90 <system_gclk_chan_disable+0x58>)
    2f78:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f7a:	bd10      	pop	{r4, pc}
    2f7c:	00001849 	.word	0x00001849
    2f80:	40000c02 	.word	0x40000c02
    2f84:	40000c00 	.word	0x40000c00
    2f88:	fffff0ff 	.word	0xfffff0ff
    2f8c:	ffffbfff 	.word	0xffffbfff
    2f90:	00001889 	.word	0x00001889

00002f94 <system_gclk_chan_set_config>:
{
    2f94:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2f96:	780c      	ldrb	r4, [r1, #0]
    2f98:	0224      	lsls	r4, r4, #8
    2f9a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2f9c:	4b02      	ldr	r3, [pc, #8]	; (2fa8 <system_gclk_chan_set_config+0x14>)
    2f9e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2fa0:	b2a4      	uxth	r4, r4
    2fa2:	4b02      	ldr	r3, [pc, #8]	; (2fac <system_gclk_chan_set_config+0x18>)
    2fa4:	805c      	strh	r4, [r3, #2]
}
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	00002f39 	.word	0x00002f39
    2fac:	40000c00 	.word	0x40000c00

00002fb0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2fb0:	b510      	push	{r4, lr}
    2fb2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2fb4:	4b06      	ldr	r3, [pc, #24]	; (2fd0 <system_gclk_chan_get_hz+0x20>)
    2fb6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2fb8:	4b06      	ldr	r3, [pc, #24]	; (2fd4 <system_gclk_chan_get_hz+0x24>)
    2fba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2fbc:	4b06      	ldr	r3, [pc, #24]	; (2fd8 <system_gclk_chan_get_hz+0x28>)
    2fbe:	885c      	ldrh	r4, [r3, #2]
    2fc0:	0524      	lsls	r4, r4, #20
    2fc2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2fc4:	4b05      	ldr	r3, [pc, #20]	; (2fdc <system_gclk_chan_get_hz+0x2c>)
    2fc6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2fc8:	0020      	movs	r0, r4
    2fca:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <system_gclk_chan_get_hz+0x30>)
    2fcc:	4798      	blx	r3
}
    2fce:	bd10      	pop	{r4, pc}
    2fd0:	00001849 	.word	0x00001849
    2fd4:	40000c02 	.word	0x40000c02
    2fd8:	40000c00 	.word	0x40000c00
    2fdc:	00001889 	.word	0x00001889
    2fe0:	00002e7d 	.word	0x00002e7d

00002fe4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2fe4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2fe6:	78d3      	ldrb	r3, [r2, #3]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d139      	bne.n	3060 <_system_pinmux_config+0x7c>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2fec:	7813      	ldrb	r3, [r2, #0]
    2fee:	2b80      	cmp	r3, #128	; 0x80
    2ff0:	d029      	beq.n	3046 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2ff2:	061b      	lsls	r3, r3, #24
    2ff4:	2480      	movs	r4, #128	; 0x80
    2ff6:	0264      	lsls	r4, r4, #9
    2ff8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ffa:	7854      	ldrb	r4, [r2, #1]
    2ffc:	2502      	movs	r5, #2
    2ffe:	43ac      	bics	r4, r5
    3000:	d106      	bne.n	3010 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3002:	7894      	ldrb	r4, [r2, #2]
    3004:	2c00      	cmp	r4, #0
    3006:	d120      	bne.n	304a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3008:	2480      	movs	r4, #128	; 0x80
    300a:	02a4      	lsls	r4, r4, #10
    300c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    300e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3010:	7854      	ldrb	r4, [r2, #1]
    3012:	3c01      	subs	r4, #1
    3014:	2c01      	cmp	r4, #1
    3016:	d91c      	bls.n	3052 <_system_pinmux_config+0x6e>
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3018:	040d      	lsls	r5, r1, #16
    301a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    301c:	24a0      	movs	r4, #160	; 0xa0
    301e:	05e4      	lsls	r4, r4, #23
    3020:	432c      	orrs	r4, r5
    3022:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3024:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3026:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3028:	24d0      	movs	r4, #208	; 0xd0
    302a:	0624      	lsls	r4, r4, #24
    302c:	432c      	orrs	r4, r5
    302e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3030:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3032:	78d4      	ldrb	r4, [r2, #3]
    3034:	2c00      	cmp	r4, #0
    3036:	d125      	bne.n	3084 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3038:	035b      	lsls	r3, r3, #13
    303a:	d51f      	bpl.n	307c <_system_pinmux_config+0x98>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    303c:	7893      	ldrb	r3, [r2, #2]
    303e:	2b01      	cmp	r3, #1
    3040:	d00a      	beq.n	3058 <_system_pinmux_config+0x74>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3042:	6141      	str	r1, [r0, #20]
    3044:	e01a      	b.n	307c <_system_pinmux_config+0x98>
	uint32_t pin_cfg = 0;
    3046:	2300      	movs	r3, #0
    3048:	e7d7      	b.n	2ffa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    304a:	24c0      	movs	r4, #192	; 0xc0
    304c:	02e4      	lsls	r4, r4, #11
    304e:	4323      	orrs	r3, r4
    3050:	e7dd      	b.n	300e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3052:	4c0d      	ldr	r4, [pc, #52]	; (3088 <_system_pinmux_config+0xa4>)
    3054:	4023      	ands	r3, r4
    3056:	e7df      	b.n	3018 <_system_pinmux_config+0x34>
				port->OUTSET.reg = pin_mask;
    3058:	6181      	str	r1, [r0, #24]
    305a:	e00f      	b.n	307c <_system_pinmux_config+0x98>

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    305c:	6081      	str	r1, [r0, #8]
		}
	}
}
    305e:	e011      	b.n	3084 <_system_pinmux_config+0xa0>
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3060:	040c      	lsls	r4, r1, #16
    3062:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3064:	23a0      	movs	r3, #160	; 0xa0
    3066:	05db      	lsls	r3, r3, #23
    3068:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    306a:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    306c:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    306e:	23d0      	movs	r3, #208	; 0xd0
    3070:	061b      	lsls	r3, r3, #24
    3072:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3074:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3076:	78d3      	ldrb	r3, [r2, #3]
    3078:	2b00      	cmp	r3, #0
    307a:	d103      	bne.n	3084 <_system_pinmux_config+0xa0>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    307c:	7853      	ldrb	r3, [r2, #1]
    307e:	3b01      	subs	r3, #1
    3080:	2b01      	cmp	r3, #1
    3082:	d9eb      	bls.n	305c <_system_pinmux_config+0x78>
}
    3084:	bd30      	pop	{r4, r5, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	fffbffff 	.word	0xfffbffff

0000308c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    308c:	b510      	push	{r4, lr}
    308e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    3090:	09c1      	lsrs	r1, r0, #7
		return NULL;
    3092:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3094:	2900      	cmp	r1, #0
    3096:	d104      	bne.n	30a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3098:	0943      	lsrs	r3, r0, #5
    309a:	01db      	lsls	r3, r3, #7
    309c:	4905      	ldr	r1, [pc, #20]	; (30b4 <system_pinmux_pin_set_config+0x28>)
    309e:	468c      	mov	ip, r1
    30a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    30a2:	241f      	movs	r4, #31
    30a4:	4020      	ands	r0, r4
    30a6:	2101      	movs	r1, #1
    30a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    30aa:	0018      	movs	r0, r3
    30ac:	4b02      	ldr	r3, [pc, #8]	; (30b8 <system_pinmux_pin_set_config+0x2c>)
    30ae:	4798      	blx	r3
}
    30b0:	bd10      	pop	{r4, pc}
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	41004400 	.word	0x41004400
    30b8:	00002fe5 	.word	0x00002fe5

000030bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    30bc:	4770      	bx	lr
	...

000030c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    30c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    30c2:	4b04      	ldr	r3, [pc, #16]	; (30d4 <system_init+0x14>)
    30c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    30c6:	4b04      	ldr	r3, [pc, #16]	; (30d8 <system_init+0x18>)
    30c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    30ca:	4b04      	ldr	r3, [pc, #16]	; (30dc <system_init+0x1c>)
    30cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    30ce:	4b04      	ldr	r3, [pc, #16]	; (30e0 <system_init+0x20>)
    30d0:	4798      	blx	r3
}
    30d2:	bd10      	pop	{r4, pc}
    30d4:	00002c29 	.word	0x00002c29
    30d8:	000018b9 	.word	0x000018b9
    30dc:	000030bd 	.word	0x000030bd
    30e0:	00001909 	.word	0x00001909

000030e4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    30e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30e6:	46c6      	mov	lr, r8
    30e8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    30ea:	0080      	lsls	r0, r0, #2
    30ec:	4b0e      	ldr	r3, [pc, #56]	; (3128 <_tcc_interrupt_handler+0x44>)
    30ee:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    30f0:	683b      	ldr	r3, [r7, #0]
    30f2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    30f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    30f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    30f8:	4013      	ands	r3, r2
    30fa:	401e      	ands	r6, r3
    30fc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    30fe:	4b0b      	ldr	r3, [pc, #44]	; (312c <_tcc_interrupt_handler+0x48>)
    3100:	4698      	mov	r8, r3
    3102:	e002      	b.n	310a <_tcc_interrupt_handler+0x26>
    3104:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    3106:	2c30      	cmp	r4, #48	; 0x30
    3108:	d00a      	beq.n	3120 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    310a:	4643      	mov	r3, r8
    310c:	58e5      	ldr	r5, [r4, r3]
    310e:	4235      	tst	r5, r6
    3110:	d0f8      	beq.n	3104 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    3112:	193b      	adds	r3, r7, r4
    3114:	685b      	ldr	r3, [r3, #4]
    3116:	0038      	movs	r0, r7
    3118:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    311a:	683b      	ldr	r3, [r7, #0]
    311c:	62dd      	str	r5, [r3, #44]	; 0x2c
    311e:	e7f1      	b.n	3104 <_tcc_interrupt_handler+0x20>
		}
	}
}
    3120:	bc04      	pop	{r2}
    3122:	4690      	mov	r8, r2
    3124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	200005d4 	.word	0x200005d4
    312c:	00004e54 	.word	0x00004e54

00003130 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    3130:	b510      	push	{r4, lr}
    3132:	2000      	movs	r0, #0
    3134:	4b01      	ldr	r3, [pc, #4]	; (313c <TCC0_Handler+0xc>)
    3136:	4798      	blx	r3
    3138:	bd10      	pop	{r4, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	000030e5 	.word	0x000030e5

00003140 <TCC1_Handler>:
    3140:	b510      	push	{r4, lr}
    3142:	2001      	movs	r0, #1
    3144:	4b01      	ldr	r3, [pc, #4]	; (314c <TCC1_Handler+0xc>)
    3146:	4798      	blx	r3
    3148:	bd10      	pop	{r4, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	000030e5 	.word	0x000030e5

00003150 <TCC2_Handler>:
    3150:	b510      	push	{r4, lr}
    3152:	2002      	movs	r0, #2
    3154:	4b01      	ldr	r3, [pc, #4]	; (315c <TCC2_Handler+0xc>)
    3156:	4798      	blx	r3
    3158:	bd10      	pop	{r4, pc}
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	000030e5 	.word	0x000030e5

00003160 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3160:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3162:	0080      	lsls	r0, r0, #2
    3164:	4b16      	ldr	r3, [pc, #88]	; (31c0 <_tc_interrupt_handler+0x60>)
    3166:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3168:	6823      	ldr	r3, [r4, #0]
    316a:	7b9d      	ldrb	r5, [r3, #14]
    316c:	7e22      	ldrb	r2, [r4, #24]
    316e:	7e63      	ldrb	r3, [r4, #25]
    3170:	4013      	ands	r3, r2
    3172:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3174:	07eb      	lsls	r3, r5, #31
    3176:	d406      	bmi.n	3186 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3178:	07ab      	lsls	r3, r5, #30
    317a:	d40b      	bmi.n	3194 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    317c:	06eb      	lsls	r3, r5, #27
    317e:	d410      	bmi.n	31a2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3180:	06ab      	lsls	r3, r5, #26
    3182:	d415      	bmi.n	31b0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    3184:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3186:	0020      	movs	r0, r4
    3188:	68a3      	ldr	r3, [r4, #8]
    318a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    318c:	2301      	movs	r3, #1
    318e:	6822      	ldr	r2, [r4, #0]
    3190:	7393      	strb	r3, [r2, #14]
    3192:	e7f1      	b.n	3178 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    3194:	0020      	movs	r0, r4
    3196:	68e3      	ldr	r3, [r4, #12]
    3198:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    319a:	2302      	movs	r3, #2
    319c:	6822      	ldr	r2, [r4, #0]
    319e:	7393      	strb	r3, [r2, #14]
    31a0:	e7ec      	b.n	317c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    31a2:	0020      	movs	r0, r4
    31a4:	6923      	ldr	r3, [r4, #16]
    31a6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    31a8:	2310      	movs	r3, #16
    31aa:	6822      	ldr	r2, [r4, #0]
    31ac:	7393      	strb	r3, [r2, #14]
    31ae:	e7e7      	b.n	3180 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    31b0:	0020      	movs	r0, r4
    31b2:	6963      	ldr	r3, [r4, #20]
    31b4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    31b6:	6823      	ldr	r3, [r4, #0]
    31b8:	2220      	movs	r2, #32
    31ba:	739a      	strb	r2, [r3, #14]
}
    31bc:	e7e2      	b.n	3184 <_tc_interrupt_handler+0x24>
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	200005e0 	.word	0x200005e0

000031c4 <TC3_Handler>:
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    31c4:	b510      	push	{r4, lr}
    31c6:	2000      	movs	r0, #0
    31c8:	4b01      	ldr	r3, [pc, #4]	; (31d0 <TC3_Handler+0xc>)
    31ca:	4798      	blx	r3
    31cc:	bd10      	pop	{r4, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	00003161 	.word	0x00003161

000031d4 <TC4_Handler>:
    31d4:	b510      	push	{r4, lr}
    31d6:	2001      	movs	r0, #1
    31d8:	4b01      	ldr	r3, [pc, #4]	; (31e0 <TC4_Handler+0xc>)
    31da:	4798      	blx	r3
    31dc:	bd10      	pop	{r4, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	00003161 	.word	0x00003161

000031e4 <TC5_Handler>:
    31e4:	b510      	push	{r4, lr}
    31e6:	2002      	movs	r0, #2
    31e8:	4b01      	ldr	r3, [pc, #4]	; (31f0 <TC5_Handler+0xc>)
    31ea:	4798      	blx	r3
    31ec:	bd10      	pop	{r4, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00003161 	.word	0x00003161

000031f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    31f4:	e7fe      	b.n	31f4 <Dummy_Handler>
	...

000031f8 <Reset_Handler>:
{
    31f8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    31fa:	4a17      	ldr	r2, [pc, #92]	; (3258 <Reset_Handler+0x60>)
    31fc:	4b17      	ldr	r3, [pc, #92]	; (325c <Reset_Handler+0x64>)
    31fe:	429a      	cmp	r2, r3
    3200:	d011      	beq.n	3226 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3202:	001a      	movs	r2, r3
    3204:	4b16      	ldr	r3, [pc, #88]	; (3260 <Reset_Handler+0x68>)
    3206:	429a      	cmp	r2, r3
    3208:	d20d      	bcs.n	3226 <Reset_Handler+0x2e>
    320a:	4a16      	ldr	r2, [pc, #88]	; (3264 <Reset_Handler+0x6c>)
    320c:	3303      	adds	r3, #3
    320e:	1a9b      	subs	r3, r3, r2
    3210:	089b      	lsrs	r3, r3, #2
    3212:	3301      	adds	r3, #1
    3214:	009b      	lsls	r3, r3, #2
    3216:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3218:	4810      	ldr	r0, [pc, #64]	; (325c <Reset_Handler+0x64>)
    321a:	490f      	ldr	r1, [pc, #60]	; (3258 <Reset_Handler+0x60>)
    321c:	588c      	ldr	r4, [r1, r2]
    321e:	5084      	str	r4, [r0, r2]
    3220:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3222:	429a      	cmp	r2, r3
    3224:	d1fa      	bne.n	321c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3226:	4a10      	ldr	r2, [pc, #64]	; (3268 <Reset_Handler+0x70>)
    3228:	4b10      	ldr	r3, [pc, #64]	; (326c <Reset_Handler+0x74>)
    322a:	429a      	cmp	r2, r3
    322c:	d20a      	bcs.n	3244 <Reset_Handler+0x4c>
    322e:	43d3      	mvns	r3, r2
    3230:	490e      	ldr	r1, [pc, #56]	; (326c <Reset_Handler+0x74>)
    3232:	185b      	adds	r3, r3, r1
    3234:	2103      	movs	r1, #3
    3236:	438b      	bics	r3, r1
    3238:	3304      	adds	r3, #4
    323a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    323c:	2100      	movs	r1, #0
    323e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3240:	4293      	cmp	r3, r2
    3242:	d1fc      	bne.n	323e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3244:	4a0a      	ldr	r2, [pc, #40]	; (3270 <Reset_Handler+0x78>)
    3246:	217f      	movs	r1, #127	; 0x7f
    3248:	4b0a      	ldr	r3, [pc, #40]	; (3274 <Reset_Handler+0x7c>)
    324a:	438b      	bics	r3, r1
    324c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    324e:	4b0a      	ldr	r3, [pc, #40]	; (3278 <Reset_Handler+0x80>)
    3250:	4798      	blx	r3
        main();
    3252:	4b0a      	ldr	r3, [pc, #40]	; (327c <Reset_Handler+0x84>)
    3254:	4798      	blx	r3
    3256:	e7fe      	b.n	3256 <Reset_Handler+0x5e>
    3258:	00004f3c 	.word	0x00004f3c
    325c:	20000000 	.word	0x20000000
    3260:	20000074 	.word	0x20000074
    3264:	20000004 	.word	0x20000004
    3268:	20000074 	.word	0x20000074
    326c:	200005fc 	.word	0x200005fc
    3270:	e000ed00 	.word	0xe000ed00
    3274:	00000000 	.word	0x00000000
    3278:	000034bd 	.word	0x000034bd
    327c:	00000331 	.word	0x00000331

00003280 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3280:	b5f0      	push	{r4, r5, r6, r7, lr}
    3282:	46c6      	mov	lr, r8
    3284:	b500      	push	{lr}
    3286:	000c      	movs	r4, r1
    3288:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    328a:	2800      	cmp	r0, #0
    328c:	d10f      	bne.n	32ae <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    328e:	2a00      	cmp	r2, #0
    3290:	dd11      	ble.n	32b6 <_read+0x36>
    3292:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3294:	4e09      	ldr	r6, [pc, #36]	; (32bc <_read+0x3c>)
    3296:	4d0a      	ldr	r5, [pc, #40]	; (32c0 <_read+0x40>)
    3298:	6830      	ldr	r0, [r6, #0]
    329a:	0021      	movs	r1, r4
    329c:	682b      	ldr	r3, [r5, #0]
    329e:	4798      	blx	r3
		ptr++;
    32a0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    32a2:	42bc      	cmp	r4, r7
    32a4:	d1f8      	bne.n	3298 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    32a6:	4640      	mov	r0, r8
    32a8:	bc04      	pop	{r2}
    32aa:	4690      	mov	r8, r2
    32ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    32ae:	2301      	movs	r3, #1
    32b0:	425b      	negs	r3, r3
    32b2:	4698      	mov	r8, r3
    32b4:	e7f7      	b.n	32a6 <_read+0x26>
	for (; len > 0; --len) {
    32b6:	4680      	mov	r8, r0
    32b8:	e7f5      	b.n	32a6 <_read+0x26>
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	200005f4 	.word	0x200005f4
    32c0:	200005ec 	.word	0x200005ec

000032c4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    32c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32c6:	46c6      	mov	lr, r8
    32c8:	b500      	push	{lr}
    32ca:	000e      	movs	r6, r1
    32cc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    32ce:	3801      	subs	r0, #1
    32d0:	2802      	cmp	r0, #2
    32d2:	d810      	bhi.n	32f6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    32d4:	2a00      	cmp	r2, #0
    32d6:	d011      	beq.n	32fc <_write+0x38>
    32d8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    32da:	4b0c      	ldr	r3, [pc, #48]	; (330c <_write+0x48>)
    32dc:	4698      	mov	r8, r3
    32de:	4f0c      	ldr	r7, [pc, #48]	; (3310 <_write+0x4c>)
    32e0:	4643      	mov	r3, r8
    32e2:	6818      	ldr	r0, [r3, #0]
    32e4:	5d31      	ldrb	r1, [r6, r4]
    32e6:	683b      	ldr	r3, [r7, #0]
    32e8:	4798      	blx	r3
    32ea:	2800      	cmp	r0, #0
    32ec:	db08      	blt.n	3300 <_write+0x3c>
			return -1;
		}
		++nChars;
    32ee:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    32f0:	42a5      	cmp	r5, r4
    32f2:	d1f5      	bne.n	32e0 <_write+0x1c>
    32f4:	e006      	b.n	3304 <_write+0x40>
		return -1;
    32f6:	2401      	movs	r4, #1
    32f8:	4264      	negs	r4, r4
    32fa:	e003      	b.n	3304 <_write+0x40>
	for (; len != 0; --len) {
    32fc:	0014      	movs	r4, r2
    32fe:	e001      	b.n	3304 <_write+0x40>
			return -1;
    3300:	2401      	movs	r4, #1
    3302:	4264      	negs	r4, r4
	}
	return nChars;
}
    3304:	0020      	movs	r0, r4
    3306:	bc04      	pop	{r2}
    3308:	4690      	mov	r8, r2
    330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    330c:	200005f4 	.word	0x200005f4
    3310:	200005f0 	.word	0x200005f0

00003314 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3314:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3316:	4a06      	ldr	r2, [pc, #24]	; (3330 <_sbrk+0x1c>)
    3318:	6812      	ldr	r2, [r2, #0]
    331a:	2a00      	cmp	r2, #0
    331c:	d004      	beq.n	3328 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    331e:	4a04      	ldr	r2, [pc, #16]	; (3330 <_sbrk+0x1c>)
    3320:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3322:	18c3      	adds	r3, r0, r3
    3324:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3326:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3328:	4902      	ldr	r1, [pc, #8]	; (3334 <_sbrk+0x20>)
    332a:	4a01      	ldr	r2, [pc, #4]	; (3330 <_sbrk+0x1c>)
    332c:	6011      	str	r1, [r2, #0]
    332e:	e7f6      	b.n	331e <_sbrk+0xa>
    3330:	2000055c 	.word	0x2000055c
    3334:	20002600 	.word	0x20002600

00003338 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3338:	2001      	movs	r0, #1
    333a:	4240      	negs	r0, r0
    333c:	4770      	bx	lr

0000333e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    333e:	2380      	movs	r3, #128	; 0x80
    3340:	019b      	lsls	r3, r3, #6
    3342:	604b      	str	r3, [r1, #4]

	return 0;
}
    3344:	2000      	movs	r0, #0
    3346:	4770      	bx	lr

00003348 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3348:	2001      	movs	r0, #1
    334a:	4770      	bx	lr

0000334c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    334c:	2000      	movs	r0, #0
    334e:	4770      	bx	lr

00003350 <__udivsi3>:
    3350:	2200      	movs	r2, #0
    3352:	0843      	lsrs	r3, r0, #1
    3354:	428b      	cmp	r3, r1
    3356:	d374      	bcc.n	3442 <__udivsi3+0xf2>
    3358:	0903      	lsrs	r3, r0, #4
    335a:	428b      	cmp	r3, r1
    335c:	d35f      	bcc.n	341e <__udivsi3+0xce>
    335e:	0a03      	lsrs	r3, r0, #8
    3360:	428b      	cmp	r3, r1
    3362:	d344      	bcc.n	33ee <__udivsi3+0x9e>
    3364:	0b03      	lsrs	r3, r0, #12
    3366:	428b      	cmp	r3, r1
    3368:	d328      	bcc.n	33bc <__udivsi3+0x6c>
    336a:	0c03      	lsrs	r3, r0, #16
    336c:	428b      	cmp	r3, r1
    336e:	d30d      	bcc.n	338c <__udivsi3+0x3c>
    3370:	22ff      	movs	r2, #255	; 0xff
    3372:	0209      	lsls	r1, r1, #8
    3374:	ba12      	rev	r2, r2
    3376:	0c03      	lsrs	r3, r0, #16
    3378:	428b      	cmp	r3, r1
    337a:	d302      	bcc.n	3382 <__udivsi3+0x32>
    337c:	1212      	asrs	r2, r2, #8
    337e:	0209      	lsls	r1, r1, #8
    3380:	d065      	beq.n	344e <__udivsi3+0xfe>
    3382:	0b03      	lsrs	r3, r0, #12
    3384:	428b      	cmp	r3, r1
    3386:	d319      	bcc.n	33bc <__udivsi3+0x6c>
    3388:	e000      	b.n	338c <__udivsi3+0x3c>
    338a:	0a09      	lsrs	r1, r1, #8
    338c:	0bc3      	lsrs	r3, r0, #15
    338e:	428b      	cmp	r3, r1
    3390:	d301      	bcc.n	3396 <__udivsi3+0x46>
    3392:	03cb      	lsls	r3, r1, #15
    3394:	1ac0      	subs	r0, r0, r3
    3396:	4152      	adcs	r2, r2
    3398:	0b83      	lsrs	r3, r0, #14
    339a:	428b      	cmp	r3, r1
    339c:	d301      	bcc.n	33a2 <__udivsi3+0x52>
    339e:	038b      	lsls	r3, r1, #14
    33a0:	1ac0      	subs	r0, r0, r3
    33a2:	4152      	adcs	r2, r2
    33a4:	0b43      	lsrs	r3, r0, #13
    33a6:	428b      	cmp	r3, r1
    33a8:	d301      	bcc.n	33ae <__udivsi3+0x5e>
    33aa:	034b      	lsls	r3, r1, #13
    33ac:	1ac0      	subs	r0, r0, r3
    33ae:	4152      	adcs	r2, r2
    33b0:	0b03      	lsrs	r3, r0, #12
    33b2:	428b      	cmp	r3, r1
    33b4:	d301      	bcc.n	33ba <__udivsi3+0x6a>
    33b6:	030b      	lsls	r3, r1, #12
    33b8:	1ac0      	subs	r0, r0, r3
    33ba:	4152      	adcs	r2, r2
    33bc:	0ac3      	lsrs	r3, r0, #11
    33be:	428b      	cmp	r3, r1
    33c0:	d301      	bcc.n	33c6 <__udivsi3+0x76>
    33c2:	02cb      	lsls	r3, r1, #11
    33c4:	1ac0      	subs	r0, r0, r3
    33c6:	4152      	adcs	r2, r2
    33c8:	0a83      	lsrs	r3, r0, #10
    33ca:	428b      	cmp	r3, r1
    33cc:	d301      	bcc.n	33d2 <__udivsi3+0x82>
    33ce:	028b      	lsls	r3, r1, #10
    33d0:	1ac0      	subs	r0, r0, r3
    33d2:	4152      	adcs	r2, r2
    33d4:	0a43      	lsrs	r3, r0, #9
    33d6:	428b      	cmp	r3, r1
    33d8:	d301      	bcc.n	33de <__udivsi3+0x8e>
    33da:	024b      	lsls	r3, r1, #9
    33dc:	1ac0      	subs	r0, r0, r3
    33de:	4152      	adcs	r2, r2
    33e0:	0a03      	lsrs	r3, r0, #8
    33e2:	428b      	cmp	r3, r1
    33e4:	d301      	bcc.n	33ea <__udivsi3+0x9a>
    33e6:	020b      	lsls	r3, r1, #8
    33e8:	1ac0      	subs	r0, r0, r3
    33ea:	4152      	adcs	r2, r2
    33ec:	d2cd      	bcs.n	338a <__udivsi3+0x3a>
    33ee:	09c3      	lsrs	r3, r0, #7
    33f0:	428b      	cmp	r3, r1
    33f2:	d301      	bcc.n	33f8 <__udivsi3+0xa8>
    33f4:	01cb      	lsls	r3, r1, #7
    33f6:	1ac0      	subs	r0, r0, r3
    33f8:	4152      	adcs	r2, r2
    33fa:	0983      	lsrs	r3, r0, #6
    33fc:	428b      	cmp	r3, r1
    33fe:	d301      	bcc.n	3404 <__udivsi3+0xb4>
    3400:	018b      	lsls	r3, r1, #6
    3402:	1ac0      	subs	r0, r0, r3
    3404:	4152      	adcs	r2, r2
    3406:	0943      	lsrs	r3, r0, #5
    3408:	428b      	cmp	r3, r1
    340a:	d301      	bcc.n	3410 <__udivsi3+0xc0>
    340c:	014b      	lsls	r3, r1, #5
    340e:	1ac0      	subs	r0, r0, r3
    3410:	4152      	adcs	r2, r2
    3412:	0903      	lsrs	r3, r0, #4
    3414:	428b      	cmp	r3, r1
    3416:	d301      	bcc.n	341c <__udivsi3+0xcc>
    3418:	010b      	lsls	r3, r1, #4
    341a:	1ac0      	subs	r0, r0, r3
    341c:	4152      	adcs	r2, r2
    341e:	08c3      	lsrs	r3, r0, #3
    3420:	428b      	cmp	r3, r1
    3422:	d301      	bcc.n	3428 <__udivsi3+0xd8>
    3424:	00cb      	lsls	r3, r1, #3
    3426:	1ac0      	subs	r0, r0, r3
    3428:	4152      	adcs	r2, r2
    342a:	0883      	lsrs	r3, r0, #2
    342c:	428b      	cmp	r3, r1
    342e:	d301      	bcc.n	3434 <__udivsi3+0xe4>
    3430:	008b      	lsls	r3, r1, #2
    3432:	1ac0      	subs	r0, r0, r3
    3434:	4152      	adcs	r2, r2
    3436:	0843      	lsrs	r3, r0, #1
    3438:	428b      	cmp	r3, r1
    343a:	d301      	bcc.n	3440 <__udivsi3+0xf0>
    343c:	004b      	lsls	r3, r1, #1
    343e:	1ac0      	subs	r0, r0, r3
    3440:	4152      	adcs	r2, r2
    3442:	1a41      	subs	r1, r0, r1
    3444:	d200      	bcs.n	3448 <__udivsi3+0xf8>
    3446:	4601      	mov	r1, r0
    3448:	4152      	adcs	r2, r2
    344a:	4610      	mov	r0, r2
    344c:	4770      	bx	lr
    344e:	e7ff      	b.n	3450 <__udivsi3+0x100>
    3450:	b501      	push	{r0, lr}
    3452:	2000      	movs	r0, #0
    3454:	f000 f806 	bl	3464 <__aeabi_idiv0>
    3458:	bd02      	pop	{r1, pc}
    345a:	46c0      	nop			; (mov r8, r8)

0000345c <__aeabi_uidivmod>:
    345c:	2900      	cmp	r1, #0
    345e:	d0f7      	beq.n	3450 <__udivsi3+0x100>
    3460:	e776      	b.n	3350 <__udivsi3>
    3462:	4770      	bx	lr

00003464 <__aeabi_idiv0>:
    3464:	4770      	bx	lr
    3466:	46c0      	nop			; (mov r8, r8)

00003468 <__aeabi_lmul>:
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46ce      	mov	lr, r9
    346c:	4647      	mov	r7, r8
    346e:	0415      	lsls	r5, r2, #16
    3470:	0c2d      	lsrs	r5, r5, #16
    3472:	002e      	movs	r6, r5
    3474:	b580      	push	{r7, lr}
    3476:	0407      	lsls	r7, r0, #16
    3478:	0c14      	lsrs	r4, r2, #16
    347a:	0c3f      	lsrs	r7, r7, #16
    347c:	4699      	mov	r9, r3
    347e:	0c03      	lsrs	r3, r0, #16
    3480:	437e      	muls	r6, r7
    3482:	435d      	muls	r5, r3
    3484:	4367      	muls	r7, r4
    3486:	4363      	muls	r3, r4
    3488:	197f      	adds	r7, r7, r5
    348a:	0c34      	lsrs	r4, r6, #16
    348c:	19e4      	adds	r4, r4, r7
    348e:	469c      	mov	ip, r3
    3490:	42a5      	cmp	r5, r4
    3492:	d903      	bls.n	349c <__aeabi_lmul+0x34>
    3494:	2380      	movs	r3, #128	; 0x80
    3496:	025b      	lsls	r3, r3, #9
    3498:	4698      	mov	r8, r3
    349a:	44c4      	add	ip, r8
    349c:	464b      	mov	r3, r9
    349e:	4351      	muls	r1, r2
    34a0:	4343      	muls	r3, r0
    34a2:	0436      	lsls	r6, r6, #16
    34a4:	0c36      	lsrs	r6, r6, #16
    34a6:	0c25      	lsrs	r5, r4, #16
    34a8:	0424      	lsls	r4, r4, #16
    34aa:	4465      	add	r5, ip
    34ac:	19a4      	adds	r4, r4, r6
    34ae:	1859      	adds	r1, r3, r1
    34b0:	1949      	adds	r1, r1, r5
    34b2:	0020      	movs	r0, r4
    34b4:	bc0c      	pop	{r2, r3}
    34b6:	4690      	mov	r8, r2
    34b8:	4699      	mov	r9, r3
    34ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034bc <__libc_init_array>:
    34bc:	b570      	push	{r4, r5, r6, lr}
    34be:	2600      	movs	r6, #0
    34c0:	4d0c      	ldr	r5, [pc, #48]	; (34f4 <__libc_init_array+0x38>)
    34c2:	4c0d      	ldr	r4, [pc, #52]	; (34f8 <__libc_init_array+0x3c>)
    34c4:	1b64      	subs	r4, r4, r5
    34c6:	10a4      	asrs	r4, r4, #2
    34c8:	42a6      	cmp	r6, r4
    34ca:	d109      	bne.n	34e0 <__libc_init_array+0x24>
    34cc:	2600      	movs	r6, #0
    34ce:	f001 fd25 	bl	4f1c <_init>
    34d2:	4d0a      	ldr	r5, [pc, #40]	; (34fc <__libc_init_array+0x40>)
    34d4:	4c0a      	ldr	r4, [pc, #40]	; (3500 <__libc_init_array+0x44>)
    34d6:	1b64      	subs	r4, r4, r5
    34d8:	10a4      	asrs	r4, r4, #2
    34da:	42a6      	cmp	r6, r4
    34dc:	d105      	bne.n	34ea <__libc_init_array+0x2e>
    34de:	bd70      	pop	{r4, r5, r6, pc}
    34e0:	00b3      	lsls	r3, r6, #2
    34e2:	58eb      	ldr	r3, [r5, r3]
    34e4:	4798      	blx	r3
    34e6:	3601      	adds	r6, #1
    34e8:	e7ee      	b.n	34c8 <__libc_init_array+0xc>
    34ea:	00b3      	lsls	r3, r6, #2
    34ec:	58eb      	ldr	r3, [r5, r3]
    34ee:	4798      	blx	r3
    34f0:	3601      	adds	r6, #1
    34f2:	e7f2      	b.n	34da <__libc_init_array+0x1e>
    34f4:	00004f28 	.word	0x00004f28
    34f8:	00004f28 	.word	0x00004f28
    34fc:	00004f28 	.word	0x00004f28
    3500:	00004f2c 	.word	0x00004f2c

00003504 <memcpy>:
    3504:	2300      	movs	r3, #0
    3506:	b510      	push	{r4, lr}
    3508:	429a      	cmp	r2, r3
    350a:	d100      	bne.n	350e <memcpy+0xa>
    350c:	bd10      	pop	{r4, pc}
    350e:	5ccc      	ldrb	r4, [r1, r3]
    3510:	54c4      	strb	r4, [r0, r3]
    3512:	3301      	adds	r3, #1
    3514:	e7f8      	b.n	3508 <memcpy+0x4>

00003516 <memset>:
    3516:	0003      	movs	r3, r0
    3518:	1882      	adds	r2, r0, r2
    351a:	4293      	cmp	r3, r2
    351c:	d100      	bne.n	3520 <memset+0xa>
    351e:	4770      	bx	lr
    3520:	7019      	strb	r1, [r3, #0]
    3522:	3301      	adds	r3, #1
    3524:	e7f9      	b.n	351a <memset+0x4>
	...

00003528 <iprintf>:
    3528:	b40f      	push	{r0, r1, r2, r3}
    352a:	4b0b      	ldr	r3, [pc, #44]	; (3558 <iprintf+0x30>)
    352c:	b513      	push	{r0, r1, r4, lr}
    352e:	681c      	ldr	r4, [r3, #0]
    3530:	2c00      	cmp	r4, #0
    3532:	d005      	beq.n	3540 <iprintf+0x18>
    3534:	69a3      	ldr	r3, [r4, #24]
    3536:	2b00      	cmp	r3, #0
    3538:	d102      	bne.n	3540 <iprintf+0x18>
    353a:	0020      	movs	r0, r4
    353c:	f000 fb06 	bl	3b4c <__sinit>
    3540:	ab05      	add	r3, sp, #20
    3542:	9a04      	ldr	r2, [sp, #16]
    3544:	68a1      	ldr	r1, [r4, #8]
    3546:	0020      	movs	r0, r4
    3548:	9301      	str	r3, [sp, #4]
    354a:	f000 fcd5 	bl	3ef8 <_vfiprintf_r>
    354e:	bc16      	pop	{r1, r2, r4}
    3550:	bc08      	pop	{r3}
    3552:	b004      	add	sp, #16
    3554:	4718      	bx	r3
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	20000010 	.word	0x20000010

0000355c <putchar>:
    355c:	4b08      	ldr	r3, [pc, #32]	; (3580 <putchar+0x24>)
    355e:	b570      	push	{r4, r5, r6, lr}
    3560:	681c      	ldr	r4, [r3, #0]
    3562:	0005      	movs	r5, r0
    3564:	2c00      	cmp	r4, #0
    3566:	d005      	beq.n	3574 <putchar+0x18>
    3568:	69a3      	ldr	r3, [r4, #24]
    356a:	2b00      	cmp	r3, #0
    356c:	d102      	bne.n	3574 <putchar+0x18>
    356e:	0020      	movs	r0, r4
    3570:	f000 faec 	bl	3b4c <__sinit>
    3574:	0029      	movs	r1, r5
    3576:	68a2      	ldr	r2, [r4, #8]
    3578:	0020      	movs	r0, r4
    357a:	f000 ff61 	bl	4440 <_putc_r>
    357e:	bd70      	pop	{r4, r5, r6, pc}
    3580:	20000010 	.word	0x20000010

00003584 <_puts_r>:
    3584:	b570      	push	{r4, r5, r6, lr}
    3586:	0005      	movs	r5, r0
    3588:	000e      	movs	r6, r1
    358a:	2800      	cmp	r0, #0
    358c:	d004      	beq.n	3598 <_puts_r+0x14>
    358e:	6983      	ldr	r3, [r0, #24]
    3590:	2b00      	cmp	r3, #0
    3592:	d101      	bne.n	3598 <_puts_r+0x14>
    3594:	f000 fada 	bl	3b4c <__sinit>
    3598:	69ab      	ldr	r3, [r5, #24]
    359a:	68ac      	ldr	r4, [r5, #8]
    359c:	2b00      	cmp	r3, #0
    359e:	d102      	bne.n	35a6 <_puts_r+0x22>
    35a0:	0028      	movs	r0, r5
    35a2:	f000 fad3 	bl	3b4c <__sinit>
    35a6:	4b24      	ldr	r3, [pc, #144]	; (3638 <_puts_r+0xb4>)
    35a8:	429c      	cmp	r4, r3
    35aa:	d10f      	bne.n	35cc <_puts_r+0x48>
    35ac:	686c      	ldr	r4, [r5, #4]
    35ae:	89a3      	ldrh	r3, [r4, #12]
    35b0:	071b      	lsls	r3, r3, #28
    35b2:	d502      	bpl.n	35ba <_puts_r+0x36>
    35b4:	6923      	ldr	r3, [r4, #16]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d120      	bne.n	35fc <_puts_r+0x78>
    35ba:	0021      	movs	r1, r4
    35bc:	0028      	movs	r0, r5
    35be:	f000 f957 	bl	3870 <__swsetup_r>
    35c2:	2800      	cmp	r0, #0
    35c4:	d01a      	beq.n	35fc <_puts_r+0x78>
    35c6:	2001      	movs	r0, #1
    35c8:	4240      	negs	r0, r0
    35ca:	bd70      	pop	{r4, r5, r6, pc}
    35cc:	4b1b      	ldr	r3, [pc, #108]	; (363c <_puts_r+0xb8>)
    35ce:	429c      	cmp	r4, r3
    35d0:	d101      	bne.n	35d6 <_puts_r+0x52>
    35d2:	68ac      	ldr	r4, [r5, #8]
    35d4:	e7eb      	b.n	35ae <_puts_r+0x2a>
    35d6:	4b1a      	ldr	r3, [pc, #104]	; (3640 <_puts_r+0xbc>)
    35d8:	429c      	cmp	r4, r3
    35da:	d1e8      	bne.n	35ae <_puts_r+0x2a>
    35dc:	68ec      	ldr	r4, [r5, #12]
    35de:	e7e6      	b.n	35ae <_puts_r+0x2a>
    35e0:	3b01      	subs	r3, #1
    35e2:	3601      	adds	r6, #1
    35e4:	60a3      	str	r3, [r4, #8]
    35e6:	2b00      	cmp	r3, #0
    35e8:	da04      	bge.n	35f4 <_puts_r+0x70>
    35ea:	69a2      	ldr	r2, [r4, #24]
    35ec:	4293      	cmp	r3, r2
    35ee:	db16      	blt.n	361e <_puts_r+0x9a>
    35f0:	290a      	cmp	r1, #10
    35f2:	d014      	beq.n	361e <_puts_r+0x9a>
    35f4:	6823      	ldr	r3, [r4, #0]
    35f6:	1c5a      	adds	r2, r3, #1
    35f8:	6022      	str	r2, [r4, #0]
    35fa:	7019      	strb	r1, [r3, #0]
    35fc:	7831      	ldrb	r1, [r6, #0]
    35fe:	68a3      	ldr	r3, [r4, #8]
    3600:	2900      	cmp	r1, #0
    3602:	d1ed      	bne.n	35e0 <_puts_r+0x5c>
    3604:	3b01      	subs	r3, #1
    3606:	60a3      	str	r3, [r4, #8]
    3608:	2b00      	cmp	r3, #0
    360a:	da0f      	bge.n	362c <_puts_r+0xa8>
    360c:	0022      	movs	r2, r4
    360e:	310a      	adds	r1, #10
    3610:	0028      	movs	r0, r5
    3612:	f000 f8d7 	bl	37c4 <__swbuf_r>
    3616:	1c43      	adds	r3, r0, #1
    3618:	d0d5      	beq.n	35c6 <_puts_r+0x42>
    361a:	200a      	movs	r0, #10
    361c:	e7d5      	b.n	35ca <_puts_r+0x46>
    361e:	0022      	movs	r2, r4
    3620:	0028      	movs	r0, r5
    3622:	f000 f8cf 	bl	37c4 <__swbuf_r>
    3626:	1c43      	adds	r3, r0, #1
    3628:	d1e8      	bne.n	35fc <_puts_r+0x78>
    362a:	e7cc      	b.n	35c6 <_puts_r+0x42>
    362c:	200a      	movs	r0, #10
    362e:	6823      	ldr	r3, [r4, #0]
    3630:	1c5a      	adds	r2, r3, #1
    3632:	6022      	str	r2, [r4, #0]
    3634:	7018      	strb	r0, [r3, #0]
    3636:	e7c8      	b.n	35ca <_puts_r+0x46>
    3638:	00004ea8 	.word	0x00004ea8
    363c:	00004ec8 	.word	0x00004ec8
    3640:	00004e88 	.word	0x00004e88

00003644 <puts>:
    3644:	b510      	push	{r4, lr}
    3646:	4b03      	ldr	r3, [pc, #12]	; (3654 <puts+0x10>)
    3648:	0001      	movs	r1, r0
    364a:	6818      	ldr	r0, [r3, #0]
    364c:	f7ff ff9a 	bl	3584 <_puts_r>
    3650:	bd10      	pop	{r4, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	20000010 	.word	0x20000010

00003658 <setbuf>:
    3658:	424a      	negs	r2, r1
    365a:	414a      	adcs	r2, r1
    365c:	2380      	movs	r3, #128	; 0x80
    365e:	b510      	push	{r4, lr}
    3660:	0052      	lsls	r2, r2, #1
    3662:	00db      	lsls	r3, r3, #3
    3664:	f000 f802 	bl	366c <setvbuf>
    3668:	bd10      	pop	{r4, pc}
	...

0000366c <setvbuf>:
    366c:	b5f0      	push	{r4, r5, r6, r7, lr}
    366e:	001d      	movs	r5, r3
    3670:	4b4f      	ldr	r3, [pc, #316]	; (37b0 <setvbuf+0x144>)
    3672:	b085      	sub	sp, #20
    3674:	681e      	ldr	r6, [r3, #0]
    3676:	0004      	movs	r4, r0
    3678:	000f      	movs	r7, r1
    367a:	9200      	str	r2, [sp, #0]
    367c:	2e00      	cmp	r6, #0
    367e:	d005      	beq.n	368c <setvbuf+0x20>
    3680:	69b3      	ldr	r3, [r6, #24]
    3682:	2b00      	cmp	r3, #0
    3684:	d102      	bne.n	368c <setvbuf+0x20>
    3686:	0030      	movs	r0, r6
    3688:	f000 fa60 	bl	3b4c <__sinit>
    368c:	4b49      	ldr	r3, [pc, #292]	; (37b4 <setvbuf+0x148>)
    368e:	429c      	cmp	r4, r3
    3690:	d150      	bne.n	3734 <setvbuf+0xc8>
    3692:	6874      	ldr	r4, [r6, #4]
    3694:	9b00      	ldr	r3, [sp, #0]
    3696:	2b02      	cmp	r3, #2
    3698:	d005      	beq.n	36a6 <setvbuf+0x3a>
    369a:	2b01      	cmp	r3, #1
    369c:	d900      	bls.n	36a0 <setvbuf+0x34>
    369e:	e084      	b.n	37aa <setvbuf+0x13e>
    36a0:	2d00      	cmp	r5, #0
    36a2:	da00      	bge.n	36a6 <setvbuf+0x3a>
    36a4:	e081      	b.n	37aa <setvbuf+0x13e>
    36a6:	0021      	movs	r1, r4
    36a8:	0030      	movs	r0, r6
    36aa:	f000 f9e1 	bl	3a70 <_fflush_r>
    36ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    36b0:	2900      	cmp	r1, #0
    36b2:	d008      	beq.n	36c6 <setvbuf+0x5a>
    36b4:	0023      	movs	r3, r4
    36b6:	3344      	adds	r3, #68	; 0x44
    36b8:	4299      	cmp	r1, r3
    36ba:	d002      	beq.n	36c2 <setvbuf+0x56>
    36bc:	0030      	movs	r0, r6
    36be:	f000 fb4b 	bl	3d58 <_free_r>
    36c2:	2300      	movs	r3, #0
    36c4:	6363      	str	r3, [r4, #52]	; 0x34
    36c6:	2300      	movs	r3, #0
    36c8:	61a3      	str	r3, [r4, #24]
    36ca:	6063      	str	r3, [r4, #4]
    36cc:	89a3      	ldrh	r3, [r4, #12]
    36ce:	061b      	lsls	r3, r3, #24
    36d0:	d503      	bpl.n	36da <setvbuf+0x6e>
    36d2:	6921      	ldr	r1, [r4, #16]
    36d4:	0030      	movs	r0, r6
    36d6:	f000 fb3f 	bl	3d58 <_free_r>
    36da:	89a3      	ldrh	r3, [r4, #12]
    36dc:	4a36      	ldr	r2, [pc, #216]	; (37b8 <setvbuf+0x14c>)
    36de:	4013      	ands	r3, r2
    36e0:	81a3      	strh	r3, [r4, #12]
    36e2:	9b00      	ldr	r3, [sp, #0]
    36e4:	2b02      	cmp	r3, #2
    36e6:	d05a      	beq.n	379e <setvbuf+0x132>
    36e8:	ab03      	add	r3, sp, #12
    36ea:	aa02      	add	r2, sp, #8
    36ec:	0021      	movs	r1, r4
    36ee:	0030      	movs	r0, r6
    36f0:	f000 fac2 	bl	3c78 <__swhatbuf_r>
    36f4:	89a3      	ldrh	r3, [r4, #12]
    36f6:	4318      	orrs	r0, r3
    36f8:	81a0      	strh	r0, [r4, #12]
    36fa:	2d00      	cmp	r5, #0
    36fc:	d124      	bne.n	3748 <setvbuf+0xdc>
    36fe:	9d02      	ldr	r5, [sp, #8]
    3700:	0028      	movs	r0, r5
    3702:	f000 fb1f 	bl	3d44 <malloc>
    3706:	9501      	str	r5, [sp, #4]
    3708:	1e07      	subs	r7, r0, #0
    370a:	d142      	bne.n	3792 <setvbuf+0x126>
    370c:	9b02      	ldr	r3, [sp, #8]
    370e:	9301      	str	r3, [sp, #4]
    3710:	42ab      	cmp	r3, r5
    3712:	d139      	bne.n	3788 <setvbuf+0x11c>
    3714:	2001      	movs	r0, #1
    3716:	4240      	negs	r0, r0
    3718:	2302      	movs	r3, #2
    371a:	89a2      	ldrh	r2, [r4, #12]
    371c:	4313      	orrs	r3, r2
    371e:	81a3      	strh	r3, [r4, #12]
    3720:	2300      	movs	r3, #0
    3722:	60a3      	str	r3, [r4, #8]
    3724:	0023      	movs	r3, r4
    3726:	3347      	adds	r3, #71	; 0x47
    3728:	6023      	str	r3, [r4, #0]
    372a:	6123      	str	r3, [r4, #16]
    372c:	2301      	movs	r3, #1
    372e:	6163      	str	r3, [r4, #20]
    3730:	b005      	add	sp, #20
    3732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3734:	4b21      	ldr	r3, [pc, #132]	; (37bc <setvbuf+0x150>)
    3736:	429c      	cmp	r4, r3
    3738:	d101      	bne.n	373e <setvbuf+0xd2>
    373a:	68b4      	ldr	r4, [r6, #8]
    373c:	e7aa      	b.n	3694 <setvbuf+0x28>
    373e:	4b20      	ldr	r3, [pc, #128]	; (37c0 <setvbuf+0x154>)
    3740:	429c      	cmp	r4, r3
    3742:	d1a7      	bne.n	3694 <setvbuf+0x28>
    3744:	68f4      	ldr	r4, [r6, #12]
    3746:	e7a5      	b.n	3694 <setvbuf+0x28>
    3748:	2f00      	cmp	r7, #0
    374a:	d0d9      	beq.n	3700 <setvbuf+0x94>
    374c:	69b3      	ldr	r3, [r6, #24]
    374e:	2b00      	cmp	r3, #0
    3750:	d102      	bne.n	3758 <setvbuf+0xec>
    3752:	0030      	movs	r0, r6
    3754:	f000 f9fa 	bl	3b4c <__sinit>
    3758:	9b00      	ldr	r3, [sp, #0]
    375a:	2b01      	cmp	r3, #1
    375c:	d103      	bne.n	3766 <setvbuf+0xfa>
    375e:	89a3      	ldrh	r3, [r4, #12]
    3760:	9a00      	ldr	r2, [sp, #0]
    3762:	431a      	orrs	r2, r3
    3764:	81a2      	strh	r2, [r4, #12]
    3766:	2008      	movs	r0, #8
    3768:	89a3      	ldrh	r3, [r4, #12]
    376a:	6027      	str	r7, [r4, #0]
    376c:	6127      	str	r7, [r4, #16]
    376e:	6165      	str	r5, [r4, #20]
    3770:	4018      	ands	r0, r3
    3772:	d018      	beq.n	37a6 <setvbuf+0x13a>
    3774:	2001      	movs	r0, #1
    3776:	4018      	ands	r0, r3
    3778:	2300      	movs	r3, #0
    377a:	4298      	cmp	r0, r3
    377c:	d011      	beq.n	37a2 <setvbuf+0x136>
    377e:	426d      	negs	r5, r5
    3780:	60a3      	str	r3, [r4, #8]
    3782:	61a5      	str	r5, [r4, #24]
    3784:	0018      	movs	r0, r3
    3786:	e7d3      	b.n	3730 <setvbuf+0xc4>
    3788:	9801      	ldr	r0, [sp, #4]
    378a:	f000 fadb 	bl	3d44 <malloc>
    378e:	1e07      	subs	r7, r0, #0
    3790:	d0c0      	beq.n	3714 <setvbuf+0xa8>
    3792:	2380      	movs	r3, #128	; 0x80
    3794:	89a2      	ldrh	r2, [r4, #12]
    3796:	9d01      	ldr	r5, [sp, #4]
    3798:	4313      	orrs	r3, r2
    379a:	81a3      	strh	r3, [r4, #12]
    379c:	e7d6      	b.n	374c <setvbuf+0xe0>
    379e:	2000      	movs	r0, #0
    37a0:	e7ba      	b.n	3718 <setvbuf+0xac>
    37a2:	60a5      	str	r5, [r4, #8]
    37a4:	e7c4      	b.n	3730 <setvbuf+0xc4>
    37a6:	60a0      	str	r0, [r4, #8]
    37a8:	e7c2      	b.n	3730 <setvbuf+0xc4>
    37aa:	2001      	movs	r0, #1
    37ac:	4240      	negs	r0, r0
    37ae:	e7bf      	b.n	3730 <setvbuf+0xc4>
    37b0:	20000010 	.word	0x20000010
    37b4:	00004ea8 	.word	0x00004ea8
    37b8:	fffff35c 	.word	0xfffff35c
    37bc:	00004ec8 	.word	0x00004ec8
    37c0:	00004e88 	.word	0x00004e88

000037c4 <__swbuf_r>:
    37c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37c6:	0005      	movs	r5, r0
    37c8:	000e      	movs	r6, r1
    37ca:	0014      	movs	r4, r2
    37cc:	2800      	cmp	r0, #0
    37ce:	d004      	beq.n	37da <__swbuf_r+0x16>
    37d0:	6983      	ldr	r3, [r0, #24]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d101      	bne.n	37da <__swbuf_r+0x16>
    37d6:	f000 f9b9 	bl	3b4c <__sinit>
    37da:	4b22      	ldr	r3, [pc, #136]	; (3864 <__swbuf_r+0xa0>)
    37dc:	429c      	cmp	r4, r3
    37de:	d12d      	bne.n	383c <__swbuf_r+0x78>
    37e0:	686c      	ldr	r4, [r5, #4]
    37e2:	69a3      	ldr	r3, [r4, #24]
    37e4:	60a3      	str	r3, [r4, #8]
    37e6:	89a3      	ldrh	r3, [r4, #12]
    37e8:	071b      	lsls	r3, r3, #28
    37ea:	d531      	bpl.n	3850 <__swbuf_r+0x8c>
    37ec:	6923      	ldr	r3, [r4, #16]
    37ee:	2b00      	cmp	r3, #0
    37f0:	d02e      	beq.n	3850 <__swbuf_r+0x8c>
    37f2:	6823      	ldr	r3, [r4, #0]
    37f4:	6922      	ldr	r2, [r4, #16]
    37f6:	b2f7      	uxtb	r7, r6
    37f8:	1a98      	subs	r0, r3, r2
    37fa:	6963      	ldr	r3, [r4, #20]
    37fc:	b2f6      	uxtb	r6, r6
    37fe:	4298      	cmp	r0, r3
    3800:	db05      	blt.n	380e <__swbuf_r+0x4a>
    3802:	0021      	movs	r1, r4
    3804:	0028      	movs	r0, r5
    3806:	f000 f933 	bl	3a70 <_fflush_r>
    380a:	2800      	cmp	r0, #0
    380c:	d126      	bne.n	385c <__swbuf_r+0x98>
    380e:	68a3      	ldr	r3, [r4, #8]
    3810:	3001      	adds	r0, #1
    3812:	3b01      	subs	r3, #1
    3814:	60a3      	str	r3, [r4, #8]
    3816:	6823      	ldr	r3, [r4, #0]
    3818:	1c5a      	adds	r2, r3, #1
    381a:	6022      	str	r2, [r4, #0]
    381c:	701f      	strb	r7, [r3, #0]
    381e:	6963      	ldr	r3, [r4, #20]
    3820:	4298      	cmp	r0, r3
    3822:	d004      	beq.n	382e <__swbuf_r+0x6a>
    3824:	89a3      	ldrh	r3, [r4, #12]
    3826:	07db      	lsls	r3, r3, #31
    3828:	d51a      	bpl.n	3860 <__swbuf_r+0x9c>
    382a:	2e0a      	cmp	r6, #10
    382c:	d118      	bne.n	3860 <__swbuf_r+0x9c>
    382e:	0021      	movs	r1, r4
    3830:	0028      	movs	r0, r5
    3832:	f000 f91d 	bl	3a70 <_fflush_r>
    3836:	2800      	cmp	r0, #0
    3838:	d012      	beq.n	3860 <__swbuf_r+0x9c>
    383a:	e00f      	b.n	385c <__swbuf_r+0x98>
    383c:	4b0a      	ldr	r3, [pc, #40]	; (3868 <__swbuf_r+0xa4>)
    383e:	429c      	cmp	r4, r3
    3840:	d101      	bne.n	3846 <__swbuf_r+0x82>
    3842:	68ac      	ldr	r4, [r5, #8]
    3844:	e7cd      	b.n	37e2 <__swbuf_r+0x1e>
    3846:	4b09      	ldr	r3, [pc, #36]	; (386c <__swbuf_r+0xa8>)
    3848:	429c      	cmp	r4, r3
    384a:	d1ca      	bne.n	37e2 <__swbuf_r+0x1e>
    384c:	68ec      	ldr	r4, [r5, #12]
    384e:	e7c8      	b.n	37e2 <__swbuf_r+0x1e>
    3850:	0021      	movs	r1, r4
    3852:	0028      	movs	r0, r5
    3854:	f000 f80c 	bl	3870 <__swsetup_r>
    3858:	2800      	cmp	r0, #0
    385a:	d0ca      	beq.n	37f2 <__swbuf_r+0x2e>
    385c:	2601      	movs	r6, #1
    385e:	4276      	negs	r6, r6
    3860:	0030      	movs	r0, r6
    3862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3864:	00004ea8 	.word	0x00004ea8
    3868:	00004ec8 	.word	0x00004ec8
    386c:	00004e88 	.word	0x00004e88

00003870 <__swsetup_r>:
    3870:	4b36      	ldr	r3, [pc, #216]	; (394c <__swsetup_r+0xdc>)
    3872:	b570      	push	{r4, r5, r6, lr}
    3874:	681d      	ldr	r5, [r3, #0]
    3876:	0006      	movs	r6, r0
    3878:	000c      	movs	r4, r1
    387a:	2d00      	cmp	r5, #0
    387c:	d005      	beq.n	388a <__swsetup_r+0x1a>
    387e:	69ab      	ldr	r3, [r5, #24]
    3880:	2b00      	cmp	r3, #0
    3882:	d102      	bne.n	388a <__swsetup_r+0x1a>
    3884:	0028      	movs	r0, r5
    3886:	f000 f961 	bl	3b4c <__sinit>
    388a:	4b31      	ldr	r3, [pc, #196]	; (3950 <__swsetup_r+0xe0>)
    388c:	429c      	cmp	r4, r3
    388e:	d10f      	bne.n	38b0 <__swsetup_r+0x40>
    3890:	686c      	ldr	r4, [r5, #4]
    3892:	230c      	movs	r3, #12
    3894:	5ee2      	ldrsh	r2, [r4, r3]
    3896:	b293      	uxth	r3, r2
    3898:	0719      	lsls	r1, r3, #28
    389a:	d42d      	bmi.n	38f8 <__swsetup_r+0x88>
    389c:	06d9      	lsls	r1, r3, #27
    389e:	d411      	bmi.n	38c4 <__swsetup_r+0x54>
    38a0:	2309      	movs	r3, #9
    38a2:	2001      	movs	r0, #1
    38a4:	6033      	str	r3, [r6, #0]
    38a6:	3337      	adds	r3, #55	; 0x37
    38a8:	4313      	orrs	r3, r2
    38aa:	81a3      	strh	r3, [r4, #12]
    38ac:	4240      	negs	r0, r0
    38ae:	bd70      	pop	{r4, r5, r6, pc}
    38b0:	4b28      	ldr	r3, [pc, #160]	; (3954 <__swsetup_r+0xe4>)
    38b2:	429c      	cmp	r4, r3
    38b4:	d101      	bne.n	38ba <__swsetup_r+0x4a>
    38b6:	68ac      	ldr	r4, [r5, #8]
    38b8:	e7eb      	b.n	3892 <__swsetup_r+0x22>
    38ba:	4b27      	ldr	r3, [pc, #156]	; (3958 <__swsetup_r+0xe8>)
    38bc:	429c      	cmp	r4, r3
    38be:	d1e8      	bne.n	3892 <__swsetup_r+0x22>
    38c0:	68ec      	ldr	r4, [r5, #12]
    38c2:	e7e6      	b.n	3892 <__swsetup_r+0x22>
    38c4:	075b      	lsls	r3, r3, #29
    38c6:	d513      	bpl.n	38f0 <__swsetup_r+0x80>
    38c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38ca:	2900      	cmp	r1, #0
    38cc:	d008      	beq.n	38e0 <__swsetup_r+0x70>
    38ce:	0023      	movs	r3, r4
    38d0:	3344      	adds	r3, #68	; 0x44
    38d2:	4299      	cmp	r1, r3
    38d4:	d002      	beq.n	38dc <__swsetup_r+0x6c>
    38d6:	0030      	movs	r0, r6
    38d8:	f000 fa3e 	bl	3d58 <_free_r>
    38dc:	2300      	movs	r3, #0
    38de:	6363      	str	r3, [r4, #52]	; 0x34
    38e0:	2224      	movs	r2, #36	; 0x24
    38e2:	89a3      	ldrh	r3, [r4, #12]
    38e4:	4393      	bics	r3, r2
    38e6:	81a3      	strh	r3, [r4, #12]
    38e8:	2300      	movs	r3, #0
    38ea:	6063      	str	r3, [r4, #4]
    38ec:	6923      	ldr	r3, [r4, #16]
    38ee:	6023      	str	r3, [r4, #0]
    38f0:	2308      	movs	r3, #8
    38f2:	89a2      	ldrh	r2, [r4, #12]
    38f4:	4313      	orrs	r3, r2
    38f6:	81a3      	strh	r3, [r4, #12]
    38f8:	6923      	ldr	r3, [r4, #16]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d10b      	bne.n	3916 <__swsetup_r+0xa6>
    38fe:	21a0      	movs	r1, #160	; 0xa0
    3900:	2280      	movs	r2, #128	; 0x80
    3902:	89a3      	ldrh	r3, [r4, #12]
    3904:	0089      	lsls	r1, r1, #2
    3906:	0092      	lsls	r2, r2, #2
    3908:	400b      	ands	r3, r1
    390a:	4293      	cmp	r3, r2
    390c:	d003      	beq.n	3916 <__swsetup_r+0xa6>
    390e:	0021      	movs	r1, r4
    3910:	0030      	movs	r0, r6
    3912:	f000 f9d9 	bl	3cc8 <__smakebuf_r>
    3916:	2301      	movs	r3, #1
    3918:	89a2      	ldrh	r2, [r4, #12]
    391a:	4013      	ands	r3, r2
    391c:	d011      	beq.n	3942 <__swsetup_r+0xd2>
    391e:	2300      	movs	r3, #0
    3920:	60a3      	str	r3, [r4, #8]
    3922:	6963      	ldr	r3, [r4, #20]
    3924:	425b      	negs	r3, r3
    3926:	61a3      	str	r3, [r4, #24]
    3928:	2000      	movs	r0, #0
    392a:	6923      	ldr	r3, [r4, #16]
    392c:	4283      	cmp	r3, r0
    392e:	d1be      	bne.n	38ae <__swsetup_r+0x3e>
    3930:	230c      	movs	r3, #12
    3932:	5ee2      	ldrsh	r2, [r4, r3]
    3934:	0613      	lsls	r3, r2, #24
    3936:	d5ba      	bpl.n	38ae <__swsetup_r+0x3e>
    3938:	2340      	movs	r3, #64	; 0x40
    393a:	4313      	orrs	r3, r2
    393c:	81a3      	strh	r3, [r4, #12]
    393e:	3801      	subs	r0, #1
    3940:	e7b5      	b.n	38ae <__swsetup_r+0x3e>
    3942:	0792      	lsls	r2, r2, #30
    3944:	d400      	bmi.n	3948 <__swsetup_r+0xd8>
    3946:	6963      	ldr	r3, [r4, #20]
    3948:	60a3      	str	r3, [r4, #8]
    394a:	e7ed      	b.n	3928 <__swsetup_r+0xb8>
    394c:	20000010 	.word	0x20000010
    3950:	00004ea8 	.word	0x00004ea8
    3954:	00004ec8 	.word	0x00004ec8
    3958:	00004e88 	.word	0x00004e88

0000395c <__sflush_r>:
    395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    395e:	898a      	ldrh	r2, [r1, #12]
    3960:	0005      	movs	r5, r0
    3962:	000c      	movs	r4, r1
    3964:	0713      	lsls	r3, r2, #28
    3966:	d460      	bmi.n	3a2a <__sflush_r+0xce>
    3968:	684b      	ldr	r3, [r1, #4]
    396a:	2b00      	cmp	r3, #0
    396c:	dc04      	bgt.n	3978 <__sflush_r+0x1c>
    396e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3970:	2b00      	cmp	r3, #0
    3972:	dc01      	bgt.n	3978 <__sflush_r+0x1c>
    3974:	2000      	movs	r0, #0
    3976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3978:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    397a:	2f00      	cmp	r7, #0
    397c:	d0fa      	beq.n	3974 <__sflush_r+0x18>
    397e:	2300      	movs	r3, #0
    3980:	682e      	ldr	r6, [r5, #0]
    3982:	602b      	str	r3, [r5, #0]
    3984:	2380      	movs	r3, #128	; 0x80
    3986:	015b      	lsls	r3, r3, #5
    3988:	401a      	ands	r2, r3
    398a:	d034      	beq.n	39f6 <__sflush_r+0x9a>
    398c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    398e:	89a3      	ldrh	r3, [r4, #12]
    3990:	075b      	lsls	r3, r3, #29
    3992:	d506      	bpl.n	39a2 <__sflush_r+0x46>
    3994:	6863      	ldr	r3, [r4, #4]
    3996:	1ac0      	subs	r0, r0, r3
    3998:	6b63      	ldr	r3, [r4, #52]	; 0x34
    399a:	2b00      	cmp	r3, #0
    399c:	d001      	beq.n	39a2 <__sflush_r+0x46>
    399e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    39a0:	1ac0      	subs	r0, r0, r3
    39a2:	0002      	movs	r2, r0
    39a4:	6a21      	ldr	r1, [r4, #32]
    39a6:	2300      	movs	r3, #0
    39a8:	0028      	movs	r0, r5
    39aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    39ac:	47b8      	blx	r7
    39ae:	89a1      	ldrh	r1, [r4, #12]
    39b0:	1c43      	adds	r3, r0, #1
    39b2:	d106      	bne.n	39c2 <__sflush_r+0x66>
    39b4:	682b      	ldr	r3, [r5, #0]
    39b6:	2b1d      	cmp	r3, #29
    39b8:	d831      	bhi.n	3a1e <__sflush_r+0xc2>
    39ba:	4a2c      	ldr	r2, [pc, #176]	; (3a6c <__sflush_r+0x110>)
    39bc:	40da      	lsrs	r2, r3
    39be:	07d3      	lsls	r3, r2, #31
    39c0:	d52d      	bpl.n	3a1e <__sflush_r+0xc2>
    39c2:	2300      	movs	r3, #0
    39c4:	6063      	str	r3, [r4, #4]
    39c6:	6923      	ldr	r3, [r4, #16]
    39c8:	6023      	str	r3, [r4, #0]
    39ca:	04cb      	lsls	r3, r1, #19
    39cc:	d505      	bpl.n	39da <__sflush_r+0x7e>
    39ce:	1c43      	adds	r3, r0, #1
    39d0:	d102      	bne.n	39d8 <__sflush_r+0x7c>
    39d2:	682b      	ldr	r3, [r5, #0]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d100      	bne.n	39da <__sflush_r+0x7e>
    39d8:	6560      	str	r0, [r4, #84]	; 0x54
    39da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    39dc:	602e      	str	r6, [r5, #0]
    39de:	2900      	cmp	r1, #0
    39e0:	d0c8      	beq.n	3974 <__sflush_r+0x18>
    39e2:	0023      	movs	r3, r4
    39e4:	3344      	adds	r3, #68	; 0x44
    39e6:	4299      	cmp	r1, r3
    39e8:	d002      	beq.n	39f0 <__sflush_r+0x94>
    39ea:	0028      	movs	r0, r5
    39ec:	f000 f9b4 	bl	3d58 <_free_r>
    39f0:	2000      	movs	r0, #0
    39f2:	6360      	str	r0, [r4, #52]	; 0x34
    39f4:	e7bf      	b.n	3976 <__sflush_r+0x1a>
    39f6:	2301      	movs	r3, #1
    39f8:	6a21      	ldr	r1, [r4, #32]
    39fa:	0028      	movs	r0, r5
    39fc:	47b8      	blx	r7
    39fe:	1c43      	adds	r3, r0, #1
    3a00:	d1c5      	bne.n	398e <__sflush_r+0x32>
    3a02:	682b      	ldr	r3, [r5, #0]
    3a04:	2b00      	cmp	r3, #0
    3a06:	d0c2      	beq.n	398e <__sflush_r+0x32>
    3a08:	2b1d      	cmp	r3, #29
    3a0a:	d001      	beq.n	3a10 <__sflush_r+0xb4>
    3a0c:	2b16      	cmp	r3, #22
    3a0e:	d101      	bne.n	3a14 <__sflush_r+0xb8>
    3a10:	602e      	str	r6, [r5, #0]
    3a12:	e7af      	b.n	3974 <__sflush_r+0x18>
    3a14:	2340      	movs	r3, #64	; 0x40
    3a16:	89a2      	ldrh	r2, [r4, #12]
    3a18:	4313      	orrs	r3, r2
    3a1a:	81a3      	strh	r3, [r4, #12]
    3a1c:	e7ab      	b.n	3976 <__sflush_r+0x1a>
    3a1e:	2340      	movs	r3, #64	; 0x40
    3a20:	430b      	orrs	r3, r1
    3a22:	2001      	movs	r0, #1
    3a24:	81a3      	strh	r3, [r4, #12]
    3a26:	4240      	negs	r0, r0
    3a28:	e7a5      	b.n	3976 <__sflush_r+0x1a>
    3a2a:	690f      	ldr	r7, [r1, #16]
    3a2c:	2f00      	cmp	r7, #0
    3a2e:	d0a1      	beq.n	3974 <__sflush_r+0x18>
    3a30:	680b      	ldr	r3, [r1, #0]
    3a32:	600f      	str	r7, [r1, #0]
    3a34:	1bdb      	subs	r3, r3, r7
    3a36:	9301      	str	r3, [sp, #4]
    3a38:	2300      	movs	r3, #0
    3a3a:	0792      	lsls	r2, r2, #30
    3a3c:	d100      	bne.n	3a40 <__sflush_r+0xe4>
    3a3e:	694b      	ldr	r3, [r1, #20]
    3a40:	60a3      	str	r3, [r4, #8]
    3a42:	9b01      	ldr	r3, [sp, #4]
    3a44:	2b00      	cmp	r3, #0
    3a46:	dc00      	bgt.n	3a4a <__sflush_r+0xee>
    3a48:	e794      	b.n	3974 <__sflush_r+0x18>
    3a4a:	9b01      	ldr	r3, [sp, #4]
    3a4c:	003a      	movs	r2, r7
    3a4e:	6a21      	ldr	r1, [r4, #32]
    3a50:	0028      	movs	r0, r5
    3a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3a54:	47b0      	blx	r6
    3a56:	2800      	cmp	r0, #0
    3a58:	dc03      	bgt.n	3a62 <__sflush_r+0x106>
    3a5a:	2340      	movs	r3, #64	; 0x40
    3a5c:	89a2      	ldrh	r2, [r4, #12]
    3a5e:	4313      	orrs	r3, r2
    3a60:	e7df      	b.n	3a22 <__sflush_r+0xc6>
    3a62:	9b01      	ldr	r3, [sp, #4]
    3a64:	183f      	adds	r7, r7, r0
    3a66:	1a1b      	subs	r3, r3, r0
    3a68:	9301      	str	r3, [sp, #4]
    3a6a:	e7ea      	b.n	3a42 <__sflush_r+0xe6>
    3a6c:	20400001 	.word	0x20400001

00003a70 <_fflush_r>:
    3a70:	690b      	ldr	r3, [r1, #16]
    3a72:	b570      	push	{r4, r5, r6, lr}
    3a74:	0005      	movs	r5, r0
    3a76:	000c      	movs	r4, r1
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d101      	bne.n	3a80 <_fflush_r+0x10>
    3a7c:	2000      	movs	r0, #0
    3a7e:	bd70      	pop	{r4, r5, r6, pc}
    3a80:	2800      	cmp	r0, #0
    3a82:	d004      	beq.n	3a8e <_fflush_r+0x1e>
    3a84:	6983      	ldr	r3, [r0, #24]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d101      	bne.n	3a8e <_fflush_r+0x1e>
    3a8a:	f000 f85f 	bl	3b4c <__sinit>
    3a8e:	4b0b      	ldr	r3, [pc, #44]	; (3abc <_fflush_r+0x4c>)
    3a90:	429c      	cmp	r4, r3
    3a92:	d109      	bne.n	3aa8 <_fflush_r+0x38>
    3a94:	686c      	ldr	r4, [r5, #4]
    3a96:	220c      	movs	r2, #12
    3a98:	5ea3      	ldrsh	r3, [r4, r2]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d0ee      	beq.n	3a7c <_fflush_r+0xc>
    3a9e:	0021      	movs	r1, r4
    3aa0:	0028      	movs	r0, r5
    3aa2:	f7ff ff5b 	bl	395c <__sflush_r>
    3aa6:	e7ea      	b.n	3a7e <_fflush_r+0xe>
    3aa8:	4b05      	ldr	r3, [pc, #20]	; (3ac0 <_fflush_r+0x50>)
    3aaa:	429c      	cmp	r4, r3
    3aac:	d101      	bne.n	3ab2 <_fflush_r+0x42>
    3aae:	68ac      	ldr	r4, [r5, #8]
    3ab0:	e7f1      	b.n	3a96 <_fflush_r+0x26>
    3ab2:	4b04      	ldr	r3, [pc, #16]	; (3ac4 <_fflush_r+0x54>)
    3ab4:	429c      	cmp	r4, r3
    3ab6:	d1ee      	bne.n	3a96 <_fflush_r+0x26>
    3ab8:	68ec      	ldr	r4, [r5, #12]
    3aba:	e7ec      	b.n	3a96 <_fflush_r+0x26>
    3abc:	00004ea8 	.word	0x00004ea8
    3ac0:	00004ec8 	.word	0x00004ec8
    3ac4:	00004e88 	.word	0x00004e88

00003ac8 <_cleanup_r>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	4902      	ldr	r1, [pc, #8]	; (3ad4 <_cleanup_r+0xc>)
    3acc:	f000 f8b2 	bl	3c34 <_fwalk_reent>
    3ad0:	bd10      	pop	{r4, pc}
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	00003a71 	.word	0x00003a71

00003ad8 <std.isra.0>:
    3ad8:	2300      	movs	r3, #0
    3ada:	b510      	push	{r4, lr}
    3adc:	0004      	movs	r4, r0
    3ade:	6003      	str	r3, [r0, #0]
    3ae0:	6043      	str	r3, [r0, #4]
    3ae2:	6083      	str	r3, [r0, #8]
    3ae4:	8181      	strh	r1, [r0, #12]
    3ae6:	6643      	str	r3, [r0, #100]	; 0x64
    3ae8:	81c2      	strh	r2, [r0, #14]
    3aea:	6103      	str	r3, [r0, #16]
    3aec:	6143      	str	r3, [r0, #20]
    3aee:	6183      	str	r3, [r0, #24]
    3af0:	0019      	movs	r1, r3
    3af2:	2208      	movs	r2, #8
    3af4:	305c      	adds	r0, #92	; 0x5c
    3af6:	f7ff fd0e 	bl	3516 <memset>
    3afa:	4b05      	ldr	r3, [pc, #20]	; (3b10 <std.isra.0+0x38>)
    3afc:	6224      	str	r4, [r4, #32]
    3afe:	6263      	str	r3, [r4, #36]	; 0x24
    3b00:	4b04      	ldr	r3, [pc, #16]	; (3b14 <std.isra.0+0x3c>)
    3b02:	62a3      	str	r3, [r4, #40]	; 0x28
    3b04:	4b04      	ldr	r3, [pc, #16]	; (3b18 <std.isra.0+0x40>)
    3b06:	62e3      	str	r3, [r4, #44]	; 0x2c
    3b08:	4b04      	ldr	r3, [pc, #16]	; (3b1c <std.isra.0+0x44>)
    3b0a:	6323      	str	r3, [r4, #48]	; 0x30
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	000044d1 	.word	0x000044d1
    3b14:	000044f9 	.word	0x000044f9
    3b18:	00004531 	.word	0x00004531
    3b1c:	0000455d 	.word	0x0000455d

00003b20 <__sfmoreglue>:
    3b20:	b570      	push	{r4, r5, r6, lr}
    3b22:	2568      	movs	r5, #104	; 0x68
    3b24:	1e4a      	subs	r2, r1, #1
    3b26:	4355      	muls	r5, r2
    3b28:	000e      	movs	r6, r1
    3b2a:	0029      	movs	r1, r5
    3b2c:	3174      	adds	r1, #116	; 0x74
    3b2e:	f000 f95d 	bl	3dec <_malloc_r>
    3b32:	1e04      	subs	r4, r0, #0
    3b34:	d008      	beq.n	3b48 <__sfmoreglue+0x28>
    3b36:	2100      	movs	r1, #0
    3b38:	002a      	movs	r2, r5
    3b3a:	6001      	str	r1, [r0, #0]
    3b3c:	6046      	str	r6, [r0, #4]
    3b3e:	300c      	adds	r0, #12
    3b40:	60a0      	str	r0, [r4, #8]
    3b42:	3268      	adds	r2, #104	; 0x68
    3b44:	f7ff fce7 	bl	3516 <memset>
    3b48:	0020      	movs	r0, r4
    3b4a:	bd70      	pop	{r4, r5, r6, pc}

00003b4c <__sinit>:
    3b4c:	6983      	ldr	r3, [r0, #24]
    3b4e:	b513      	push	{r0, r1, r4, lr}
    3b50:	0004      	movs	r4, r0
    3b52:	2b00      	cmp	r3, #0
    3b54:	d128      	bne.n	3ba8 <__sinit+0x5c>
    3b56:	6483      	str	r3, [r0, #72]	; 0x48
    3b58:	64c3      	str	r3, [r0, #76]	; 0x4c
    3b5a:	6503      	str	r3, [r0, #80]	; 0x50
    3b5c:	4b13      	ldr	r3, [pc, #76]	; (3bac <__sinit+0x60>)
    3b5e:	4a14      	ldr	r2, [pc, #80]	; (3bb0 <__sinit+0x64>)
    3b60:	681b      	ldr	r3, [r3, #0]
    3b62:	6282      	str	r2, [r0, #40]	; 0x28
    3b64:	9301      	str	r3, [sp, #4]
    3b66:	4298      	cmp	r0, r3
    3b68:	d101      	bne.n	3b6e <__sinit+0x22>
    3b6a:	2301      	movs	r3, #1
    3b6c:	6183      	str	r3, [r0, #24]
    3b6e:	0020      	movs	r0, r4
    3b70:	f000 f820 	bl	3bb4 <__sfp>
    3b74:	6060      	str	r0, [r4, #4]
    3b76:	0020      	movs	r0, r4
    3b78:	f000 f81c 	bl	3bb4 <__sfp>
    3b7c:	60a0      	str	r0, [r4, #8]
    3b7e:	0020      	movs	r0, r4
    3b80:	f000 f818 	bl	3bb4 <__sfp>
    3b84:	2200      	movs	r2, #0
    3b86:	60e0      	str	r0, [r4, #12]
    3b88:	2104      	movs	r1, #4
    3b8a:	6860      	ldr	r0, [r4, #4]
    3b8c:	f7ff ffa4 	bl	3ad8 <std.isra.0>
    3b90:	2201      	movs	r2, #1
    3b92:	2109      	movs	r1, #9
    3b94:	68a0      	ldr	r0, [r4, #8]
    3b96:	f7ff ff9f 	bl	3ad8 <std.isra.0>
    3b9a:	2202      	movs	r2, #2
    3b9c:	2112      	movs	r1, #18
    3b9e:	68e0      	ldr	r0, [r4, #12]
    3ba0:	f7ff ff9a 	bl	3ad8 <std.isra.0>
    3ba4:	2301      	movs	r3, #1
    3ba6:	61a3      	str	r3, [r4, #24]
    3ba8:	bd13      	pop	{r0, r1, r4, pc}
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	00004e84 	.word	0x00004e84
    3bb0:	00003ac9 	.word	0x00003ac9

00003bb4 <__sfp>:
    3bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb6:	4b1e      	ldr	r3, [pc, #120]	; (3c30 <__sfp+0x7c>)
    3bb8:	0007      	movs	r7, r0
    3bba:	681e      	ldr	r6, [r3, #0]
    3bbc:	69b3      	ldr	r3, [r6, #24]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d102      	bne.n	3bc8 <__sfp+0x14>
    3bc2:	0030      	movs	r0, r6
    3bc4:	f7ff ffc2 	bl	3b4c <__sinit>
    3bc8:	3648      	adds	r6, #72	; 0x48
    3bca:	68b4      	ldr	r4, [r6, #8]
    3bcc:	6873      	ldr	r3, [r6, #4]
    3bce:	3b01      	subs	r3, #1
    3bd0:	d504      	bpl.n	3bdc <__sfp+0x28>
    3bd2:	6833      	ldr	r3, [r6, #0]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d007      	beq.n	3be8 <__sfp+0x34>
    3bd8:	6836      	ldr	r6, [r6, #0]
    3bda:	e7f6      	b.n	3bca <__sfp+0x16>
    3bdc:	220c      	movs	r2, #12
    3bde:	5ea5      	ldrsh	r5, [r4, r2]
    3be0:	2d00      	cmp	r5, #0
    3be2:	d00d      	beq.n	3c00 <__sfp+0x4c>
    3be4:	3468      	adds	r4, #104	; 0x68
    3be6:	e7f2      	b.n	3bce <__sfp+0x1a>
    3be8:	2104      	movs	r1, #4
    3bea:	0038      	movs	r0, r7
    3bec:	f7ff ff98 	bl	3b20 <__sfmoreglue>
    3bf0:	6030      	str	r0, [r6, #0]
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d1f0      	bne.n	3bd8 <__sfp+0x24>
    3bf6:	230c      	movs	r3, #12
    3bf8:	0004      	movs	r4, r0
    3bfa:	603b      	str	r3, [r7, #0]
    3bfc:	0020      	movs	r0, r4
    3bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c00:	2301      	movs	r3, #1
    3c02:	0020      	movs	r0, r4
    3c04:	425b      	negs	r3, r3
    3c06:	81e3      	strh	r3, [r4, #14]
    3c08:	3302      	adds	r3, #2
    3c0a:	81a3      	strh	r3, [r4, #12]
    3c0c:	6665      	str	r5, [r4, #100]	; 0x64
    3c0e:	6025      	str	r5, [r4, #0]
    3c10:	60a5      	str	r5, [r4, #8]
    3c12:	6065      	str	r5, [r4, #4]
    3c14:	6125      	str	r5, [r4, #16]
    3c16:	6165      	str	r5, [r4, #20]
    3c18:	61a5      	str	r5, [r4, #24]
    3c1a:	2208      	movs	r2, #8
    3c1c:	0029      	movs	r1, r5
    3c1e:	305c      	adds	r0, #92	; 0x5c
    3c20:	f7ff fc79 	bl	3516 <memset>
    3c24:	6365      	str	r5, [r4, #52]	; 0x34
    3c26:	63a5      	str	r5, [r4, #56]	; 0x38
    3c28:	64a5      	str	r5, [r4, #72]	; 0x48
    3c2a:	64e5      	str	r5, [r4, #76]	; 0x4c
    3c2c:	e7e6      	b.n	3bfc <__sfp+0x48>
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	00004e84 	.word	0x00004e84

00003c34 <_fwalk_reent>:
    3c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c36:	0004      	movs	r4, r0
    3c38:	0007      	movs	r7, r0
    3c3a:	2600      	movs	r6, #0
    3c3c:	9101      	str	r1, [sp, #4]
    3c3e:	3448      	adds	r4, #72	; 0x48
    3c40:	2c00      	cmp	r4, #0
    3c42:	d101      	bne.n	3c48 <_fwalk_reent+0x14>
    3c44:	0030      	movs	r0, r6
    3c46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c48:	6863      	ldr	r3, [r4, #4]
    3c4a:	68a5      	ldr	r5, [r4, #8]
    3c4c:	9300      	str	r3, [sp, #0]
    3c4e:	9b00      	ldr	r3, [sp, #0]
    3c50:	3b01      	subs	r3, #1
    3c52:	9300      	str	r3, [sp, #0]
    3c54:	d501      	bpl.n	3c5a <_fwalk_reent+0x26>
    3c56:	6824      	ldr	r4, [r4, #0]
    3c58:	e7f2      	b.n	3c40 <_fwalk_reent+0xc>
    3c5a:	89ab      	ldrh	r3, [r5, #12]
    3c5c:	2b01      	cmp	r3, #1
    3c5e:	d908      	bls.n	3c72 <_fwalk_reent+0x3e>
    3c60:	220e      	movs	r2, #14
    3c62:	5eab      	ldrsh	r3, [r5, r2]
    3c64:	3301      	adds	r3, #1
    3c66:	d004      	beq.n	3c72 <_fwalk_reent+0x3e>
    3c68:	0029      	movs	r1, r5
    3c6a:	0038      	movs	r0, r7
    3c6c:	9b01      	ldr	r3, [sp, #4]
    3c6e:	4798      	blx	r3
    3c70:	4306      	orrs	r6, r0
    3c72:	3568      	adds	r5, #104	; 0x68
    3c74:	e7eb      	b.n	3c4e <_fwalk_reent+0x1a>
	...

00003c78 <__swhatbuf_r>:
    3c78:	b570      	push	{r4, r5, r6, lr}
    3c7a:	000e      	movs	r6, r1
    3c7c:	001d      	movs	r5, r3
    3c7e:	230e      	movs	r3, #14
    3c80:	5ec9      	ldrsh	r1, [r1, r3]
    3c82:	b090      	sub	sp, #64	; 0x40
    3c84:	0014      	movs	r4, r2
    3c86:	2900      	cmp	r1, #0
    3c88:	da07      	bge.n	3c9a <__swhatbuf_r+0x22>
    3c8a:	2300      	movs	r3, #0
    3c8c:	602b      	str	r3, [r5, #0]
    3c8e:	89b3      	ldrh	r3, [r6, #12]
    3c90:	061b      	lsls	r3, r3, #24
    3c92:	d411      	bmi.n	3cb8 <__swhatbuf_r+0x40>
    3c94:	2380      	movs	r3, #128	; 0x80
    3c96:	00db      	lsls	r3, r3, #3
    3c98:	e00f      	b.n	3cba <__swhatbuf_r+0x42>
    3c9a:	aa01      	add	r2, sp, #4
    3c9c:	f000 fc8a 	bl	45b4 <_fstat_r>
    3ca0:	2800      	cmp	r0, #0
    3ca2:	dbf2      	blt.n	3c8a <__swhatbuf_r+0x12>
    3ca4:	22f0      	movs	r2, #240	; 0xf0
    3ca6:	9b02      	ldr	r3, [sp, #8]
    3ca8:	0212      	lsls	r2, r2, #8
    3caa:	4013      	ands	r3, r2
    3cac:	4a05      	ldr	r2, [pc, #20]	; (3cc4 <__swhatbuf_r+0x4c>)
    3cae:	189b      	adds	r3, r3, r2
    3cb0:	425a      	negs	r2, r3
    3cb2:	4153      	adcs	r3, r2
    3cb4:	602b      	str	r3, [r5, #0]
    3cb6:	e7ed      	b.n	3c94 <__swhatbuf_r+0x1c>
    3cb8:	2340      	movs	r3, #64	; 0x40
    3cba:	2000      	movs	r0, #0
    3cbc:	6023      	str	r3, [r4, #0]
    3cbe:	b010      	add	sp, #64	; 0x40
    3cc0:	bd70      	pop	{r4, r5, r6, pc}
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	ffffe000 	.word	0xffffe000

00003cc8 <__smakebuf_r>:
    3cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cca:	2602      	movs	r6, #2
    3ccc:	898b      	ldrh	r3, [r1, #12]
    3cce:	0005      	movs	r5, r0
    3cd0:	000c      	movs	r4, r1
    3cd2:	4233      	tst	r3, r6
    3cd4:	d006      	beq.n	3ce4 <__smakebuf_r+0x1c>
    3cd6:	0023      	movs	r3, r4
    3cd8:	3347      	adds	r3, #71	; 0x47
    3cda:	6023      	str	r3, [r4, #0]
    3cdc:	6123      	str	r3, [r4, #16]
    3cde:	2301      	movs	r3, #1
    3ce0:	6163      	str	r3, [r4, #20]
    3ce2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3ce4:	ab01      	add	r3, sp, #4
    3ce6:	466a      	mov	r2, sp
    3ce8:	f7ff ffc6 	bl	3c78 <__swhatbuf_r>
    3cec:	9900      	ldr	r1, [sp, #0]
    3cee:	0007      	movs	r7, r0
    3cf0:	0028      	movs	r0, r5
    3cf2:	f000 f87b 	bl	3dec <_malloc_r>
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d106      	bne.n	3d08 <__smakebuf_r+0x40>
    3cfa:	220c      	movs	r2, #12
    3cfc:	5ea3      	ldrsh	r3, [r4, r2]
    3cfe:	059a      	lsls	r2, r3, #22
    3d00:	d4ef      	bmi.n	3ce2 <__smakebuf_r+0x1a>
    3d02:	431e      	orrs	r6, r3
    3d04:	81a6      	strh	r6, [r4, #12]
    3d06:	e7e6      	b.n	3cd6 <__smakebuf_r+0xe>
    3d08:	4b0d      	ldr	r3, [pc, #52]	; (3d40 <__smakebuf_r+0x78>)
    3d0a:	62ab      	str	r3, [r5, #40]	; 0x28
    3d0c:	2380      	movs	r3, #128	; 0x80
    3d0e:	89a2      	ldrh	r2, [r4, #12]
    3d10:	6020      	str	r0, [r4, #0]
    3d12:	4313      	orrs	r3, r2
    3d14:	81a3      	strh	r3, [r4, #12]
    3d16:	9b00      	ldr	r3, [sp, #0]
    3d18:	6120      	str	r0, [r4, #16]
    3d1a:	6163      	str	r3, [r4, #20]
    3d1c:	9b01      	ldr	r3, [sp, #4]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d00a      	beq.n	3d38 <__smakebuf_r+0x70>
    3d22:	230e      	movs	r3, #14
    3d24:	5ee1      	ldrsh	r1, [r4, r3]
    3d26:	0028      	movs	r0, r5
    3d28:	f000 fc56 	bl	45d8 <_isatty_r>
    3d2c:	2800      	cmp	r0, #0
    3d2e:	d003      	beq.n	3d38 <__smakebuf_r+0x70>
    3d30:	2301      	movs	r3, #1
    3d32:	89a2      	ldrh	r2, [r4, #12]
    3d34:	4313      	orrs	r3, r2
    3d36:	81a3      	strh	r3, [r4, #12]
    3d38:	89a0      	ldrh	r0, [r4, #12]
    3d3a:	4338      	orrs	r0, r7
    3d3c:	81a0      	strh	r0, [r4, #12]
    3d3e:	e7d0      	b.n	3ce2 <__smakebuf_r+0x1a>
    3d40:	00003ac9 	.word	0x00003ac9

00003d44 <malloc>:
    3d44:	b510      	push	{r4, lr}
    3d46:	4b03      	ldr	r3, [pc, #12]	; (3d54 <malloc+0x10>)
    3d48:	0001      	movs	r1, r0
    3d4a:	6818      	ldr	r0, [r3, #0]
    3d4c:	f000 f84e 	bl	3dec <_malloc_r>
    3d50:	bd10      	pop	{r4, pc}
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	20000010 	.word	0x20000010

00003d58 <_free_r>:
    3d58:	b570      	push	{r4, r5, r6, lr}
    3d5a:	0005      	movs	r5, r0
    3d5c:	2900      	cmp	r1, #0
    3d5e:	d010      	beq.n	3d82 <_free_r+0x2a>
    3d60:	1f0c      	subs	r4, r1, #4
    3d62:	6823      	ldr	r3, [r4, #0]
    3d64:	2b00      	cmp	r3, #0
    3d66:	da00      	bge.n	3d6a <_free_r+0x12>
    3d68:	18e4      	adds	r4, r4, r3
    3d6a:	0028      	movs	r0, r5
    3d6c:	f000 fc65 	bl	463a <__malloc_lock>
    3d70:	4a1d      	ldr	r2, [pc, #116]	; (3de8 <_free_r+0x90>)
    3d72:	6813      	ldr	r3, [r2, #0]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d105      	bne.n	3d84 <_free_r+0x2c>
    3d78:	6063      	str	r3, [r4, #4]
    3d7a:	6014      	str	r4, [r2, #0]
    3d7c:	0028      	movs	r0, r5
    3d7e:	f000 fc5d 	bl	463c <__malloc_unlock>
    3d82:	bd70      	pop	{r4, r5, r6, pc}
    3d84:	42a3      	cmp	r3, r4
    3d86:	d909      	bls.n	3d9c <_free_r+0x44>
    3d88:	6821      	ldr	r1, [r4, #0]
    3d8a:	1860      	adds	r0, r4, r1
    3d8c:	4283      	cmp	r3, r0
    3d8e:	d1f3      	bne.n	3d78 <_free_r+0x20>
    3d90:	6818      	ldr	r0, [r3, #0]
    3d92:	685b      	ldr	r3, [r3, #4]
    3d94:	1841      	adds	r1, r0, r1
    3d96:	6021      	str	r1, [r4, #0]
    3d98:	e7ee      	b.n	3d78 <_free_r+0x20>
    3d9a:	0013      	movs	r3, r2
    3d9c:	685a      	ldr	r2, [r3, #4]
    3d9e:	2a00      	cmp	r2, #0
    3da0:	d001      	beq.n	3da6 <_free_r+0x4e>
    3da2:	42a2      	cmp	r2, r4
    3da4:	d9f9      	bls.n	3d9a <_free_r+0x42>
    3da6:	6819      	ldr	r1, [r3, #0]
    3da8:	1858      	adds	r0, r3, r1
    3daa:	42a0      	cmp	r0, r4
    3dac:	d10b      	bne.n	3dc6 <_free_r+0x6e>
    3dae:	6820      	ldr	r0, [r4, #0]
    3db0:	1809      	adds	r1, r1, r0
    3db2:	1858      	adds	r0, r3, r1
    3db4:	6019      	str	r1, [r3, #0]
    3db6:	4282      	cmp	r2, r0
    3db8:	d1e0      	bne.n	3d7c <_free_r+0x24>
    3dba:	6810      	ldr	r0, [r2, #0]
    3dbc:	6852      	ldr	r2, [r2, #4]
    3dbe:	1841      	adds	r1, r0, r1
    3dc0:	6019      	str	r1, [r3, #0]
    3dc2:	605a      	str	r2, [r3, #4]
    3dc4:	e7da      	b.n	3d7c <_free_r+0x24>
    3dc6:	42a0      	cmp	r0, r4
    3dc8:	d902      	bls.n	3dd0 <_free_r+0x78>
    3dca:	230c      	movs	r3, #12
    3dcc:	602b      	str	r3, [r5, #0]
    3dce:	e7d5      	b.n	3d7c <_free_r+0x24>
    3dd0:	6821      	ldr	r1, [r4, #0]
    3dd2:	1860      	adds	r0, r4, r1
    3dd4:	4282      	cmp	r2, r0
    3dd6:	d103      	bne.n	3de0 <_free_r+0x88>
    3dd8:	6810      	ldr	r0, [r2, #0]
    3dda:	6852      	ldr	r2, [r2, #4]
    3ddc:	1841      	adds	r1, r0, r1
    3dde:	6021      	str	r1, [r4, #0]
    3de0:	6062      	str	r2, [r4, #4]
    3de2:	605c      	str	r4, [r3, #4]
    3de4:	e7ca      	b.n	3d7c <_free_r+0x24>
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	20000560 	.word	0x20000560

00003dec <_malloc_r>:
    3dec:	2303      	movs	r3, #3
    3dee:	b570      	push	{r4, r5, r6, lr}
    3df0:	1ccd      	adds	r5, r1, #3
    3df2:	439d      	bics	r5, r3
    3df4:	3508      	adds	r5, #8
    3df6:	0006      	movs	r6, r0
    3df8:	2d0c      	cmp	r5, #12
    3dfa:	d21e      	bcs.n	3e3a <_malloc_r+0x4e>
    3dfc:	250c      	movs	r5, #12
    3dfe:	42a9      	cmp	r1, r5
    3e00:	d81d      	bhi.n	3e3e <_malloc_r+0x52>
    3e02:	0030      	movs	r0, r6
    3e04:	f000 fc19 	bl	463a <__malloc_lock>
    3e08:	4a25      	ldr	r2, [pc, #148]	; (3ea0 <_malloc_r+0xb4>)
    3e0a:	6814      	ldr	r4, [r2, #0]
    3e0c:	0021      	movs	r1, r4
    3e0e:	2900      	cmp	r1, #0
    3e10:	d119      	bne.n	3e46 <_malloc_r+0x5a>
    3e12:	4c24      	ldr	r4, [pc, #144]	; (3ea4 <_malloc_r+0xb8>)
    3e14:	6823      	ldr	r3, [r4, #0]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d103      	bne.n	3e22 <_malloc_r+0x36>
    3e1a:	0030      	movs	r0, r6
    3e1c:	f000 fb46 	bl	44ac <_sbrk_r>
    3e20:	6020      	str	r0, [r4, #0]
    3e22:	0029      	movs	r1, r5
    3e24:	0030      	movs	r0, r6
    3e26:	f000 fb41 	bl	44ac <_sbrk_r>
    3e2a:	1c43      	adds	r3, r0, #1
    3e2c:	d12c      	bne.n	3e88 <_malloc_r+0x9c>
    3e2e:	230c      	movs	r3, #12
    3e30:	0030      	movs	r0, r6
    3e32:	6033      	str	r3, [r6, #0]
    3e34:	f000 fc02 	bl	463c <__malloc_unlock>
    3e38:	e003      	b.n	3e42 <_malloc_r+0x56>
    3e3a:	2d00      	cmp	r5, #0
    3e3c:	dadf      	bge.n	3dfe <_malloc_r+0x12>
    3e3e:	230c      	movs	r3, #12
    3e40:	6033      	str	r3, [r6, #0]
    3e42:	2000      	movs	r0, #0
    3e44:	bd70      	pop	{r4, r5, r6, pc}
    3e46:	680b      	ldr	r3, [r1, #0]
    3e48:	1b5b      	subs	r3, r3, r5
    3e4a:	d41a      	bmi.n	3e82 <_malloc_r+0x96>
    3e4c:	2b0b      	cmp	r3, #11
    3e4e:	d903      	bls.n	3e58 <_malloc_r+0x6c>
    3e50:	600b      	str	r3, [r1, #0]
    3e52:	18cc      	adds	r4, r1, r3
    3e54:	6025      	str	r5, [r4, #0]
    3e56:	e003      	b.n	3e60 <_malloc_r+0x74>
    3e58:	428c      	cmp	r4, r1
    3e5a:	d10e      	bne.n	3e7a <_malloc_r+0x8e>
    3e5c:	6863      	ldr	r3, [r4, #4]
    3e5e:	6013      	str	r3, [r2, #0]
    3e60:	0030      	movs	r0, r6
    3e62:	f000 fbeb 	bl	463c <__malloc_unlock>
    3e66:	0020      	movs	r0, r4
    3e68:	2207      	movs	r2, #7
    3e6a:	300b      	adds	r0, #11
    3e6c:	1d23      	adds	r3, r4, #4
    3e6e:	4390      	bics	r0, r2
    3e70:	1ac3      	subs	r3, r0, r3
    3e72:	d0e7      	beq.n	3e44 <_malloc_r+0x58>
    3e74:	425a      	negs	r2, r3
    3e76:	50e2      	str	r2, [r4, r3]
    3e78:	e7e4      	b.n	3e44 <_malloc_r+0x58>
    3e7a:	684b      	ldr	r3, [r1, #4]
    3e7c:	6063      	str	r3, [r4, #4]
    3e7e:	000c      	movs	r4, r1
    3e80:	e7ee      	b.n	3e60 <_malloc_r+0x74>
    3e82:	000c      	movs	r4, r1
    3e84:	6849      	ldr	r1, [r1, #4]
    3e86:	e7c2      	b.n	3e0e <_malloc_r+0x22>
    3e88:	2303      	movs	r3, #3
    3e8a:	1cc4      	adds	r4, r0, #3
    3e8c:	439c      	bics	r4, r3
    3e8e:	42a0      	cmp	r0, r4
    3e90:	d0e0      	beq.n	3e54 <_malloc_r+0x68>
    3e92:	1a21      	subs	r1, r4, r0
    3e94:	0030      	movs	r0, r6
    3e96:	f000 fb09 	bl	44ac <_sbrk_r>
    3e9a:	1c43      	adds	r3, r0, #1
    3e9c:	d1da      	bne.n	3e54 <_malloc_r+0x68>
    3e9e:	e7c6      	b.n	3e2e <_malloc_r+0x42>
    3ea0:	20000560 	.word	0x20000560
    3ea4:	20000564 	.word	0x20000564

00003ea8 <__sfputc_r>:
    3ea8:	6893      	ldr	r3, [r2, #8]
    3eaa:	b510      	push	{r4, lr}
    3eac:	3b01      	subs	r3, #1
    3eae:	6093      	str	r3, [r2, #8]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	da05      	bge.n	3ec0 <__sfputc_r+0x18>
    3eb4:	6994      	ldr	r4, [r2, #24]
    3eb6:	42a3      	cmp	r3, r4
    3eb8:	db08      	blt.n	3ecc <__sfputc_r+0x24>
    3eba:	b2cb      	uxtb	r3, r1
    3ebc:	2b0a      	cmp	r3, #10
    3ebe:	d005      	beq.n	3ecc <__sfputc_r+0x24>
    3ec0:	6813      	ldr	r3, [r2, #0]
    3ec2:	1c58      	adds	r0, r3, #1
    3ec4:	6010      	str	r0, [r2, #0]
    3ec6:	7019      	strb	r1, [r3, #0]
    3ec8:	b2c8      	uxtb	r0, r1
    3eca:	bd10      	pop	{r4, pc}
    3ecc:	f7ff fc7a 	bl	37c4 <__swbuf_r>
    3ed0:	e7fb      	b.n	3eca <__sfputc_r+0x22>

00003ed2 <__sfputs_r>:
    3ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed4:	0006      	movs	r6, r0
    3ed6:	000f      	movs	r7, r1
    3ed8:	0014      	movs	r4, r2
    3eda:	18d5      	adds	r5, r2, r3
    3edc:	42ac      	cmp	r4, r5
    3ede:	d101      	bne.n	3ee4 <__sfputs_r+0x12>
    3ee0:	2000      	movs	r0, #0
    3ee2:	e007      	b.n	3ef4 <__sfputs_r+0x22>
    3ee4:	7821      	ldrb	r1, [r4, #0]
    3ee6:	003a      	movs	r2, r7
    3ee8:	0030      	movs	r0, r6
    3eea:	f7ff ffdd 	bl	3ea8 <__sfputc_r>
    3eee:	3401      	adds	r4, #1
    3ef0:	1c43      	adds	r3, r0, #1
    3ef2:	d1f3      	bne.n	3edc <__sfputs_r+0xa>
    3ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003ef8 <_vfiprintf_r>:
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	b09f      	sub	sp, #124	; 0x7c
    3efc:	0006      	movs	r6, r0
    3efe:	000f      	movs	r7, r1
    3f00:	0014      	movs	r4, r2
    3f02:	9305      	str	r3, [sp, #20]
    3f04:	2800      	cmp	r0, #0
    3f06:	d004      	beq.n	3f12 <_vfiprintf_r+0x1a>
    3f08:	6983      	ldr	r3, [r0, #24]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d101      	bne.n	3f12 <_vfiprintf_r+0x1a>
    3f0e:	f7ff fe1d 	bl	3b4c <__sinit>
    3f12:	4b7f      	ldr	r3, [pc, #508]	; (4110 <_vfiprintf_r+0x218>)
    3f14:	429f      	cmp	r7, r3
    3f16:	d15c      	bne.n	3fd2 <_vfiprintf_r+0xda>
    3f18:	6877      	ldr	r7, [r6, #4]
    3f1a:	89bb      	ldrh	r3, [r7, #12]
    3f1c:	071b      	lsls	r3, r3, #28
    3f1e:	d562      	bpl.n	3fe6 <_vfiprintf_r+0xee>
    3f20:	693b      	ldr	r3, [r7, #16]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d05f      	beq.n	3fe6 <_vfiprintf_r+0xee>
    3f26:	2300      	movs	r3, #0
    3f28:	ad06      	add	r5, sp, #24
    3f2a:	616b      	str	r3, [r5, #20]
    3f2c:	3320      	adds	r3, #32
    3f2e:	766b      	strb	r3, [r5, #25]
    3f30:	3310      	adds	r3, #16
    3f32:	76ab      	strb	r3, [r5, #26]
    3f34:	9402      	str	r4, [sp, #8]
    3f36:	9c02      	ldr	r4, [sp, #8]
    3f38:	7823      	ldrb	r3, [r4, #0]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d15d      	bne.n	3ffa <_vfiprintf_r+0x102>
    3f3e:	9b02      	ldr	r3, [sp, #8]
    3f40:	1ae3      	subs	r3, r4, r3
    3f42:	9304      	str	r3, [sp, #16]
    3f44:	d00d      	beq.n	3f62 <_vfiprintf_r+0x6a>
    3f46:	9b04      	ldr	r3, [sp, #16]
    3f48:	9a02      	ldr	r2, [sp, #8]
    3f4a:	0039      	movs	r1, r7
    3f4c:	0030      	movs	r0, r6
    3f4e:	f7ff ffc0 	bl	3ed2 <__sfputs_r>
    3f52:	1c43      	adds	r3, r0, #1
    3f54:	d100      	bne.n	3f58 <_vfiprintf_r+0x60>
    3f56:	e0cc      	b.n	40f2 <_vfiprintf_r+0x1fa>
    3f58:	696a      	ldr	r2, [r5, #20]
    3f5a:	9b04      	ldr	r3, [sp, #16]
    3f5c:	4694      	mov	ip, r2
    3f5e:	4463      	add	r3, ip
    3f60:	616b      	str	r3, [r5, #20]
    3f62:	7823      	ldrb	r3, [r4, #0]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d100      	bne.n	3f6a <_vfiprintf_r+0x72>
    3f68:	e0c3      	b.n	40f2 <_vfiprintf_r+0x1fa>
    3f6a:	2201      	movs	r2, #1
    3f6c:	2300      	movs	r3, #0
    3f6e:	4252      	negs	r2, r2
    3f70:	606a      	str	r2, [r5, #4]
    3f72:	a902      	add	r1, sp, #8
    3f74:	3254      	adds	r2, #84	; 0x54
    3f76:	1852      	adds	r2, r2, r1
    3f78:	3401      	adds	r4, #1
    3f7a:	602b      	str	r3, [r5, #0]
    3f7c:	60eb      	str	r3, [r5, #12]
    3f7e:	60ab      	str	r3, [r5, #8]
    3f80:	7013      	strb	r3, [r2, #0]
    3f82:	65ab      	str	r3, [r5, #88]	; 0x58
    3f84:	7821      	ldrb	r1, [r4, #0]
    3f86:	2205      	movs	r2, #5
    3f88:	4862      	ldr	r0, [pc, #392]	; (4114 <_vfiprintf_r+0x21c>)
    3f8a:	f000 fb4b 	bl	4624 <memchr>
    3f8e:	1c63      	adds	r3, r4, #1
    3f90:	469c      	mov	ip, r3
    3f92:	2800      	cmp	r0, #0
    3f94:	d135      	bne.n	4002 <_vfiprintf_r+0x10a>
    3f96:	6829      	ldr	r1, [r5, #0]
    3f98:	06cb      	lsls	r3, r1, #27
    3f9a:	d504      	bpl.n	3fa6 <_vfiprintf_r+0xae>
    3f9c:	2353      	movs	r3, #83	; 0x53
    3f9e:	aa02      	add	r2, sp, #8
    3fa0:	3020      	adds	r0, #32
    3fa2:	189b      	adds	r3, r3, r2
    3fa4:	7018      	strb	r0, [r3, #0]
    3fa6:	070b      	lsls	r3, r1, #28
    3fa8:	d504      	bpl.n	3fb4 <_vfiprintf_r+0xbc>
    3faa:	2353      	movs	r3, #83	; 0x53
    3fac:	202b      	movs	r0, #43	; 0x2b
    3fae:	aa02      	add	r2, sp, #8
    3fb0:	189b      	adds	r3, r3, r2
    3fb2:	7018      	strb	r0, [r3, #0]
    3fb4:	7823      	ldrb	r3, [r4, #0]
    3fb6:	2b2a      	cmp	r3, #42	; 0x2a
    3fb8:	d02c      	beq.n	4014 <_vfiprintf_r+0x11c>
    3fba:	2000      	movs	r0, #0
    3fbc:	210a      	movs	r1, #10
    3fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fc0:	7822      	ldrb	r2, [r4, #0]
    3fc2:	3a30      	subs	r2, #48	; 0x30
    3fc4:	2a09      	cmp	r2, #9
    3fc6:	d800      	bhi.n	3fca <_vfiprintf_r+0xd2>
    3fc8:	e06b      	b.n	40a2 <_vfiprintf_r+0x1aa>
    3fca:	2800      	cmp	r0, #0
    3fcc:	d02a      	beq.n	4024 <_vfiprintf_r+0x12c>
    3fce:	9309      	str	r3, [sp, #36]	; 0x24
    3fd0:	e028      	b.n	4024 <_vfiprintf_r+0x12c>
    3fd2:	4b51      	ldr	r3, [pc, #324]	; (4118 <_vfiprintf_r+0x220>)
    3fd4:	429f      	cmp	r7, r3
    3fd6:	d101      	bne.n	3fdc <_vfiprintf_r+0xe4>
    3fd8:	68b7      	ldr	r7, [r6, #8]
    3fda:	e79e      	b.n	3f1a <_vfiprintf_r+0x22>
    3fdc:	4b4f      	ldr	r3, [pc, #316]	; (411c <_vfiprintf_r+0x224>)
    3fde:	429f      	cmp	r7, r3
    3fe0:	d19b      	bne.n	3f1a <_vfiprintf_r+0x22>
    3fe2:	68f7      	ldr	r7, [r6, #12]
    3fe4:	e799      	b.n	3f1a <_vfiprintf_r+0x22>
    3fe6:	0039      	movs	r1, r7
    3fe8:	0030      	movs	r0, r6
    3fea:	f7ff fc41 	bl	3870 <__swsetup_r>
    3fee:	2800      	cmp	r0, #0
    3ff0:	d099      	beq.n	3f26 <_vfiprintf_r+0x2e>
    3ff2:	2001      	movs	r0, #1
    3ff4:	4240      	negs	r0, r0
    3ff6:	b01f      	add	sp, #124	; 0x7c
    3ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ffa:	2b25      	cmp	r3, #37	; 0x25
    3ffc:	d09f      	beq.n	3f3e <_vfiprintf_r+0x46>
    3ffe:	3401      	adds	r4, #1
    4000:	e79a      	b.n	3f38 <_vfiprintf_r+0x40>
    4002:	4b44      	ldr	r3, [pc, #272]	; (4114 <_vfiprintf_r+0x21c>)
    4004:	6829      	ldr	r1, [r5, #0]
    4006:	1ac0      	subs	r0, r0, r3
    4008:	2301      	movs	r3, #1
    400a:	4083      	lsls	r3, r0
    400c:	430b      	orrs	r3, r1
    400e:	602b      	str	r3, [r5, #0]
    4010:	4664      	mov	r4, ip
    4012:	e7b7      	b.n	3f84 <_vfiprintf_r+0x8c>
    4014:	9b05      	ldr	r3, [sp, #20]
    4016:	1d18      	adds	r0, r3, #4
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	9005      	str	r0, [sp, #20]
    401c:	2b00      	cmp	r3, #0
    401e:	db3a      	blt.n	4096 <_vfiprintf_r+0x19e>
    4020:	9309      	str	r3, [sp, #36]	; 0x24
    4022:	4664      	mov	r4, ip
    4024:	7823      	ldrb	r3, [r4, #0]
    4026:	2b2e      	cmp	r3, #46	; 0x2e
    4028:	d10b      	bne.n	4042 <_vfiprintf_r+0x14a>
    402a:	7863      	ldrb	r3, [r4, #1]
    402c:	1c62      	adds	r2, r4, #1
    402e:	2b2a      	cmp	r3, #42	; 0x2a
    4030:	d13f      	bne.n	40b2 <_vfiprintf_r+0x1ba>
    4032:	9b05      	ldr	r3, [sp, #20]
    4034:	3402      	adds	r4, #2
    4036:	1d1a      	adds	r2, r3, #4
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	9205      	str	r2, [sp, #20]
    403c:	2b00      	cmp	r3, #0
    403e:	db35      	blt.n	40ac <_vfiprintf_r+0x1b4>
    4040:	9307      	str	r3, [sp, #28]
    4042:	7821      	ldrb	r1, [r4, #0]
    4044:	2203      	movs	r2, #3
    4046:	4836      	ldr	r0, [pc, #216]	; (4120 <_vfiprintf_r+0x228>)
    4048:	f000 faec 	bl	4624 <memchr>
    404c:	2800      	cmp	r0, #0
    404e:	d007      	beq.n	4060 <_vfiprintf_r+0x168>
    4050:	4b33      	ldr	r3, [pc, #204]	; (4120 <_vfiprintf_r+0x228>)
    4052:	682a      	ldr	r2, [r5, #0]
    4054:	1ac0      	subs	r0, r0, r3
    4056:	2340      	movs	r3, #64	; 0x40
    4058:	4083      	lsls	r3, r0
    405a:	4313      	orrs	r3, r2
    405c:	602b      	str	r3, [r5, #0]
    405e:	3401      	adds	r4, #1
    4060:	7821      	ldrb	r1, [r4, #0]
    4062:	1c63      	adds	r3, r4, #1
    4064:	2206      	movs	r2, #6
    4066:	482f      	ldr	r0, [pc, #188]	; (4124 <_vfiprintf_r+0x22c>)
    4068:	9302      	str	r3, [sp, #8]
    406a:	7629      	strb	r1, [r5, #24]
    406c:	f000 fada 	bl	4624 <memchr>
    4070:	2800      	cmp	r0, #0
    4072:	d044      	beq.n	40fe <_vfiprintf_r+0x206>
    4074:	4b2c      	ldr	r3, [pc, #176]	; (4128 <_vfiprintf_r+0x230>)
    4076:	2b00      	cmp	r3, #0
    4078:	d12f      	bne.n	40da <_vfiprintf_r+0x1e2>
    407a:	6829      	ldr	r1, [r5, #0]
    407c:	9b05      	ldr	r3, [sp, #20]
    407e:	2207      	movs	r2, #7
    4080:	05c9      	lsls	r1, r1, #23
    4082:	d528      	bpl.n	40d6 <_vfiprintf_r+0x1de>
    4084:	189b      	adds	r3, r3, r2
    4086:	4393      	bics	r3, r2
    4088:	3308      	adds	r3, #8
    408a:	9305      	str	r3, [sp, #20]
    408c:	696b      	ldr	r3, [r5, #20]
    408e:	9a03      	ldr	r2, [sp, #12]
    4090:	189b      	adds	r3, r3, r2
    4092:	616b      	str	r3, [r5, #20]
    4094:	e74f      	b.n	3f36 <_vfiprintf_r+0x3e>
    4096:	425b      	negs	r3, r3
    4098:	60eb      	str	r3, [r5, #12]
    409a:	2302      	movs	r3, #2
    409c:	430b      	orrs	r3, r1
    409e:	602b      	str	r3, [r5, #0]
    40a0:	e7bf      	b.n	4022 <_vfiprintf_r+0x12a>
    40a2:	434b      	muls	r3, r1
    40a4:	3401      	adds	r4, #1
    40a6:	189b      	adds	r3, r3, r2
    40a8:	2001      	movs	r0, #1
    40aa:	e789      	b.n	3fc0 <_vfiprintf_r+0xc8>
    40ac:	2301      	movs	r3, #1
    40ae:	425b      	negs	r3, r3
    40b0:	e7c6      	b.n	4040 <_vfiprintf_r+0x148>
    40b2:	2300      	movs	r3, #0
    40b4:	0014      	movs	r4, r2
    40b6:	200a      	movs	r0, #10
    40b8:	001a      	movs	r2, r3
    40ba:	606b      	str	r3, [r5, #4]
    40bc:	7821      	ldrb	r1, [r4, #0]
    40be:	3930      	subs	r1, #48	; 0x30
    40c0:	2909      	cmp	r1, #9
    40c2:	d903      	bls.n	40cc <_vfiprintf_r+0x1d4>
    40c4:	2b00      	cmp	r3, #0
    40c6:	d0bc      	beq.n	4042 <_vfiprintf_r+0x14a>
    40c8:	9207      	str	r2, [sp, #28]
    40ca:	e7ba      	b.n	4042 <_vfiprintf_r+0x14a>
    40cc:	4342      	muls	r2, r0
    40ce:	3401      	adds	r4, #1
    40d0:	1852      	adds	r2, r2, r1
    40d2:	2301      	movs	r3, #1
    40d4:	e7f2      	b.n	40bc <_vfiprintf_r+0x1c4>
    40d6:	3307      	adds	r3, #7
    40d8:	e7d5      	b.n	4086 <_vfiprintf_r+0x18e>
    40da:	ab05      	add	r3, sp, #20
    40dc:	9300      	str	r3, [sp, #0]
    40de:	003a      	movs	r2, r7
    40e0:	4b12      	ldr	r3, [pc, #72]	; (412c <_vfiprintf_r+0x234>)
    40e2:	0029      	movs	r1, r5
    40e4:	0030      	movs	r0, r6
    40e6:	e000      	b.n	40ea <_vfiprintf_r+0x1f2>
    40e8:	bf00      	nop
    40ea:	9003      	str	r0, [sp, #12]
    40ec:	9b03      	ldr	r3, [sp, #12]
    40ee:	3301      	adds	r3, #1
    40f0:	d1cc      	bne.n	408c <_vfiprintf_r+0x194>
    40f2:	89bb      	ldrh	r3, [r7, #12]
    40f4:	065b      	lsls	r3, r3, #25
    40f6:	d500      	bpl.n	40fa <_vfiprintf_r+0x202>
    40f8:	e77b      	b.n	3ff2 <_vfiprintf_r+0xfa>
    40fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    40fc:	e77b      	b.n	3ff6 <_vfiprintf_r+0xfe>
    40fe:	ab05      	add	r3, sp, #20
    4100:	9300      	str	r3, [sp, #0]
    4102:	003a      	movs	r2, r7
    4104:	4b09      	ldr	r3, [pc, #36]	; (412c <_vfiprintf_r+0x234>)
    4106:	0029      	movs	r1, r5
    4108:	0030      	movs	r0, r6
    410a:	f000 f87f 	bl	420c <_printf_i>
    410e:	e7ec      	b.n	40ea <_vfiprintf_r+0x1f2>
    4110:	00004ea8 	.word	0x00004ea8
    4114:	00004ee8 	.word	0x00004ee8
    4118:	00004ec8 	.word	0x00004ec8
    411c:	00004e88 	.word	0x00004e88
    4120:	00004eee 	.word	0x00004eee
    4124:	00004ef2 	.word	0x00004ef2
    4128:	00000000 	.word	0x00000000
    412c:	00003ed3 	.word	0x00003ed3

00004130 <_printf_common>:
    4130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4132:	0015      	movs	r5, r2
    4134:	9301      	str	r3, [sp, #4]
    4136:	688a      	ldr	r2, [r1, #8]
    4138:	690b      	ldr	r3, [r1, #16]
    413a:	9000      	str	r0, [sp, #0]
    413c:	000c      	movs	r4, r1
    413e:	4293      	cmp	r3, r2
    4140:	da00      	bge.n	4144 <_printf_common+0x14>
    4142:	0013      	movs	r3, r2
    4144:	0022      	movs	r2, r4
    4146:	602b      	str	r3, [r5, #0]
    4148:	3243      	adds	r2, #67	; 0x43
    414a:	7812      	ldrb	r2, [r2, #0]
    414c:	2a00      	cmp	r2, #0
    414e:	d001      	beq.n	4154 <_printf_common+0x24>
    4150:	3301      	adds	r3, #1
    4152:	602b      	str	r3, [r5, #0]
    4154:	6823      	ldr	r3, [r4, #0]
    4156:	069b      	lsls	r3, r3, #26
    4158:	d502      	bpl.n	4160 <_printf_common+0x30>
    415a:	682b      	ldr	r3, [r5, #0]
    415c:	3302      	adds	r3, #2
    415e:	602b      	str	r3, [r5, #0]
    4160:	2706      	movs	r7, #6
    4162:	6823      	ldr	r3, [r4, #0]
    4164:	401f      	ands	r7, r3
    4166:	d027      	beq.n	41b8 <_printf_common+0x88>
    4168:	0023      	movs	r3, r4
    416a:	3343      	adds	r3, #67	; 0x43
    416c:	781b      	ldrb	r3, [r3, #0]
    416e:	1e5a      	subs	r2, r3, #1
    4170:	4193      	sbcs	r3, r2
    4172:	6822      	ldr	r2, [r4, #0]
    4174:	0692      	lsls	r2, r2, #26
    4176:	d430      	bmi.n	41da <_printf_common+0xaa>
    4178:	0022      	movs	r2, r4
    417a:	9901      	ldr	r1, [sp, #4]
    417c:	3243      	adds	r2, #67	; 0x43
    417e:	9800      	ldr	r0, [sp, #0]
    4180:	9e08      	ldr	r6, [sp, #32]
    4182:	47b0      	blx	r6
    4184:	1c43      	adds	r3, r0, #1
    4186:	d025      	beq.n	41d4 <_printf_common+0xa4>
    4188:	2306      	movs	r3, #6
    418a:	6820      	ldr	r0, [r4, #0]
    418c:	682a      	ldr	r2, [r5, #0]
    418e:	68e1      	ldr	r1, [r4, #12]
    4190:	4003      	ands	r3, r0
    4192:	2500      	movs	r5, #0
    4194:	2b04      	cmp	r3, #4
    4196:	d103      	bne.n	41a0 <_printf_common+0x70>
    4198:	1a8d      	subs	r5, r1, r2
    419a:	43eb      	mvns	r3, r5
    419c:	17db      	asrs	r3, r3, #31
    419e:	401d      	ands	r5, r3
    41a0:	68a3      	ldr	r3, [r4, #8]
    41a2:	6922      	ldr	r2, [r4, #16]
    41a4:	4293      	cmp	r3, r2
    41a6:	dd01      	ble.n	41ac <_printf_common+0x7c>
    41a8:	1a9b      	subs	r3, r3, r2
    41aa:	18ed      	adds	r5, r5, r3
    41ac:	2700      	movs	r7, #0
    41ae:	42bd      	cmp	r5, r7
    41b0:	d120      	bne.n	41f4 <_printf_common+0xc4>
    41b2:	2000      	movs	r0, #0
    41b4:	e010      	b.n	41d8 <_printf_common+0xa8>
    41b6:	3701      	adds	r7, #1
    41b8:	68e3      	ldr	r3, [r4, #12]
    41ba:	682a      	ldr	r2, [r5, #0]
    41bc:	1a9b      	subs	r3, r3, r2
    41be:	429f      	cmp	r7, r3
    41c0:	dad2      	bge.n	4168 <_printf_common+0x38>
    41c2:	0022      	movs	r2, r4
    41c4:	2301      	movs	r3, #1
    41c6:	3219      	adds	r2, #25
    41c8:	9901      	ldr	r1, [sp, #4]
    41ca:	9800      	ldr	r0, [sp, #0]
    41cc:	9e08      	ldr	r6, [sp, #32]
    41ce:	47b0      	blx	r6
    41d0:	1c43      	adds	r3, r0, #1
    41d2:	d1f0      	bne.n	41b6 <_printf_common+0x86>
    41d4:	2001      	movs	r0, #1
    41d6:	4240      	negs	r0, r0
    41d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    41da:	2030      	movs	r0, #48	; 0x30
    41dc:	18e1      	adds	r1, r4, r3
    41de:	3143      	adds	r1, #67	; 0x43
    41e0:	7008      	strb	r0, [r1, #0]
    41e2:	0021      	movs	r1, r4
    41e4:	1c5a      	adds	r2, r3, #1
    41e6:	3145      	adds	r1, #69	; 0x45
    41e8:	7809      	ldrb	r1, [r1, #0]
    41ea:	18a2      	adds	r2, r4, r2
    41ec:	3243      	adds	r2, #67	; 0x43
    41ee:	3302      	adds	r3, #2
    41f0:	7011      	strb	r1, [r2, #0]
    41f2:	e7c1      	b.n	4178 <_printf_common+0x48>
    41f4:	0022      	movs	r2, r4
    41f6:	2301      	movs	r3, #1
    41f8:	321a      	adds	r2, #26
    41fa:	9901      	ldr	r1, [sp, #4]
    41fc:	9800      	ldr	r0, [sp, #0]
    41fe:	9e08      	ldr	r6, [sp, #32]
    4200:	47b0      	blx	r6
    4202:	1c43      	adds	r3, r0, #1
    4204:	d0e6      	beq.n	41d4 <_printf_common+0xa4>
    4206:	3701      	adds	r7, #1
    4208:	e7d1      	b.n	41ae <_printf_common+0x7e>
	...

0000420c <_printf_i>:
    420c:	b5f0      	push	{r4, r5, r6, r7, lr}
    420e:	b08b      	sub	sp, #44	; 0x2c
    4210:	9206      	str	r2, [sp, #24]
    4212:	000a      	movs	r2, r1
    4214:	3243      	adds	r2, #67	; 0x43
    4216:	9307      	str	r3, [sp, #28]
    4218:	9005      	str	r0, [sp, #20]
    421a:	9204      	str	r2, [sp, #16]
    421c:	7e0a      	ldrb	r2, [r1, #24]
    421e:	000c      	movs	r4, r1
    4220:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4222:	2a6e      	cmp	r2, #110	; 0x6e
    4224:	d100      	bne.n	4228 <_printf_i+0x1c>
    4226:	e08f      	b.n	4348 <_printf_i+0x13c>
    4228:	d817      	bhi.n	425a <_printf_i+0x4e>
    422a:	2a63      	cmp	r2, #99	; 0x63
    422c:	d02c      	beq.n	4288 <_printf_i+0x7c>
    422e:	d808      	bhi.n	4242 <_printf_i+0x36>
    4230:	2a00      	cmp	r2, #0
    4232:	d100      	bne.n	4236 <_printf_i+0x2a>
    4234:	e099      	b.n	436a <_printf_i+0x15e>
    4236:	2a58      	cmp	r2, #88	; 0x58
    4238:	d054      	beq.n	42e4 <_printf_i+0xd8>
    423a:	0026      	movs	r6, r4
    423c:	3642      	adds	r6, #66	; 0x42
    423e:	7032      	strb	r2, [r6, #0]
    4240:	e029      	b.n	4296 <_printf_i+0x8a>
    4242:	2a64      	cmp	r2, #100	; 0x64
    4244:	d001      	beq.n	424a <_printf_i+0x3e>
    4246:	2a69      	cmp	r2, #105	; 0x69
    4248:	d1f7      	bne.n	423a <_printf_i+0x2e>
    424a:	6821      	ldr	r1, [r4, #0]
    424c:	681a      	ldr	r2, [r3, #0]
    424e:	0608      	lsls	r0, r1, #24
    4250:	d523      	bpl.n	429a <_printf_i+0x8e>
    4252:	1d11      	adds	r1, r2, #4
    4254:	6019      	str	r1, [r3, #0]
    4256:	6815      	ldr	r5, [r2, #0]
    4258:	e025      	b.n	42a6 <_printf_i+0x9a>
    425a:	2a73      	cmp	r2, #115	; 0x73
    425c:	d100      	bne.n	4260 <_printf_i+0x54>
    425e:	e088      	b.n	4372 <_printf_i+0x166>
    4260:	d808      	bhi.n	4274 <_printf_i+0x68>
    4262:	2a6f      	cmp	r2, #111	; 0x6f
    4264:	d029      	beq.n	42ba <_printf_i+0xae>
    4266:	2a70      	cmp	r2, #112	; 0x70
    4268:	d1e7      	bne.n	423a <_printf_i+0x2e>
    426a:	2220      	movs	r2, #32
    426c:	6809      	ldr	r1, [r1, #0]
    426e:	430a      	orrs	r2, r1
    4270:	6022      	str	r2, [r4, #0]
    4272:	e003      	b.n	427c <_printf_i+0x70>
    4274:	2a75      	cmp	r2, #117	; 0x75
    4276:	d020      	beq.n	42ba <_printf_i+0xae>
    4278:	2a78      	cmp	r2, #120	; 0x78
    427a:	d1de      	bne.n	423a <_printf_i+0x2e>
    427c:	0022      	movs	r2, r4
    427e:	2178      	movs	r1, #120	; 0x78
    4280:	3245      	adds	r2, #69	; 0x45
    4282:	7011      	strb	r1, [r2, #0]
    4284:	4a6c      	ldr	r2, [pc, #432]	; (4438 <_printf_i+0x22c>)
    4286:	e030      	b.n	42ea <_printf_i+0xde>
    4288:	000e      	movs	r6, r1
    428a:	681a      	ldr	r2, [r3, #0]
    428c:	3642      	adds	r6, #66	; 0x42
    428e:	1d11      	adds	r1, r2, #4
    4290:	6019      	str	r1, [r3, #0]
    4292:	6813      	ldr	r3, [r2, #0]
    4294:	7033      	strb	r3, [r6, #0]
    4296:	2301      	movs	r3, #1
    4298:	e079      	b.n	438e <_printf_i+0x182>
    429a:	0649      	lsls	r1, r1, #25
    429c:	d5d9      	bpl.n	4252 <_printf_i+0x46>
    429e:	1d11      	adds	r1, r2, #4
    42a0:	6019      	str	r1, [r3, #0]
    42a2:	2300      	movs	r3, #0
    42a4:	5ed5      	ldrsh	r5, [r2, r3]
    42a6:	2d00      	cmp	r5, #0
    42a8:	da03      	bge.n	42b2 <_printf_i+0xa6>
    42aa:	232d      	movs	r3, #45	; 0x2d
    42ac:	9a04      	ldr	r2, [sp, #16]
    42ae:	426d      	negs	r5, r5
    42b0:	7013      	strb	r3, [r2, #0]
    42b2:	4b62      	ldr	r3, [pc, #392]	; (443c <_printf_i+0x230>)
    42b4:	270a      	movs	r7, #10
    42b6:	9303      	str	r3, [sp, #12]
    42b8:	e02f      	b.n	431a <_printf_i+0x10e>
    42ba:	6820      	ldr	r0, [r4, #0]
    42bc:	6819      	ldr	r1, [r3, #0]
    42be:	0605      	lsls	r5, r0, #24
    42c0:	d503      	bpl.n	42ca <_printf_i+0xbe>
    42c2:	1d08      	adds	r0, r1, #4
    42c4:	6018      	str	r0, [r3, #0]
    42c6:	680d      	ldr	r5, [r1, #0]
    42c8:	e005      	b.n	42d6 <_printf_i+0xca>
    42ca:	0640      	lsls	r0, r0, #25
    42cc:	d5f9      	bpl.n	42c2 <_printf_i+0xb6>
    42ce:	680d      	ldr	r5, [r1, #0]
    42d0:	1d08      	adds	r0, r1, #4
    42d2:	6018      	str	r0, [r3, #0]
    42d4:	b2ad      	uxth	r5, r5
    42d6:	4b59      	ldr	r3, [pc, #356]	; (443c <_printf_i+0x230>)
    42d8:	2708      	movs	r7, #8
    42da:	9303      	str	r3, [sp, #12]
    42dc:	2a6f      	cmp	r2, #111	; 0x6f
    42de:	d018      	beq.n	4312 <_printf_i+0x106>
    42e0:	270a      	movs	r7, #10
    42e2:	e016      	b.n	4312 <_printf_i+0x106>
    42e4:	3145      	adds	r1, #69	; 0x45
    42e6:	700a      	strb	r2, [r1, #0]
    42e8:	4a54      	ldr	r2, [pc, #336]	; (443c <_printf_i+0x230>)
    42ea:	9203      	str	r2, [sp, #12]
    42ec:	681a      	ldr	r2, [r3, #0]
    42ee:	6821      	ldr	r1, [r4, #0]
    42f0:	1d10      	adds	r0, r2, #4
    42f2:	6018      	str	r0, [r3, #0]
    42f4:	6815      	ldr	r5, [r2, #0]
    42f6:	0608      	lsls	r0, r1, #24
    42f8:	d522      	bpl.n	4340 <_printf_i+0x134>
    42fa:	07cb      	lsls	r3, r1, #31
    42fc:	d502      	bpl.n	4304 <_printf_i+0xf8>
    42fe:	2320      	movs	r3, #32
    4300:	4319      	orrs	r1, r3
    4302:	6021      	str	r1, [r4, #0]
    4304:	2710      	movs	r7, #16
    4306:	2d00      	cmp	r5, #0
    4308:	d103      	bne.n	4312 <_printf_i+0x106>
    430a:	2320      	movs	r3, #32
    430c:	6822      	ldr	r2, [r4, #0]
    430e:	439a      	bics	r2, r3
    4310:	6022      	str	r2, [r4, #0]
    4312:	0023      	movs	r3, r4
    4314:	2200      	movs	r2, #0
    4316:	3343      	adds	r3, #67	; 0x43
    4318:	701a      	strb	r2, [r3, #0]
    431a:	6863      	ldr	r3, [r4, #4]
    431c:	60a3      	str	r3, [r4, #8]
    431e:	2b00      	cmp	r3, #0
    4320:	db5c      	blt.n	43dc <_printf_i+0x1d0>
    4322:	2204      	movs	r2, #4
    4324:	6821      	ldr	r1, [r4, #0]
    4326:	4391      	bics	r1, r2
    4328:	6021      	str	r1, [r4, #0]
    432a:	2d00      	cmp	r5, #0
    432c:	d158      	bne.n	43e0 <_printf_i+0x1d4>
    432e:	9e04      	ldr	r6, [sp, #16]
    4330:	2b00      	cmp	r3, #0
    4332:	d064      	beq.n	43fe <_printf_i+0x1f2>
    4334:	0026      	movs	r6, r4
    4336:	9b03      	ldr	r3, [sp, #12]
    4338:	3642      	adds	r6, #66	; 0x42
    433a:	781b      	ldrb	r3, [r3, #0]
    433c:	7033      	strb	r3, [r6, #0]
    433e:	e05e      	b.n	43fe <_printf_i+0x1f2>
    4340:	0648      	lsls	r0, r1, #25
    4342:	d5da      	bpl.n	42fa <_printf_i+0xee>
    4344:	b2ad      	uxth	r5, r5
    4346:	e7d8      	b.n	42fa <_printf_i+0xee>
    4348:	6809      	ldr	r1, [r1, #0]
    434a:	681a      	ldr	r2, [r3, #0]
    434c:	0608      	lsls	r0, r1, #24
    434e:	d505      	bpl.n	435c <_printf_i+0x150>
    4350:	1d11      	adds	r1, r2, #4
    4352:	6019      	str	r1, [r3, #0]
    4354:	6813      	ldr	r3, [r2, #0]
    4356:	6962      	ldr	r2, [r4, #20]
    4358:	601a      	str	r2, [r3, #0]
    435a:	e006      	b.n	436a <_printf_i+0x15e>
    435c:	0649      	lsls	r1, r1, #25
    435e:	d5f7      	bpl.n	4350 <_printf_i+0x144>
    4360:	1d11      	adds	r1, r2, #4
    4362:	6019      	str	r1, [r3, #0]
    4364:	6813      	ldr	r3, [r2, #0]
    4366:	8aa2      	ldrh	r2, [r4, #20]
    4368:	801a      	strh	r2, [r3, #0]
    436a:	2300      	movs	r3, #0
    436c:	9e04      	ldr	r6, [sp, #16]
    436e:	6123      	str	r3, [r4, #16]
    4370:	e054      	b.n	441c <_printf_i+0x210>
    4372:	681a      	ldr	r2, [r3, #0]
    4374:	1d11      	adds	r1, r2, #4
    4376:	6019      	str	r1, [r3, #0]
    4378:	6816      	ldr	r6, [r2, #0]
    437a:	2100      	movs	r1, #0
    437c:	6862      	ldr	r2, [r4, #4]
    437e:	0030      	movs	r0, r6
    4380:	f000 f950 	bl	4624 <memchr>
    4384:	2800      	cmp	r0, #0
    4386:	d001      	beq.n	438c <_printf_i+0x180>
    4388:	1b80      	subs	r0, r0, r6
    438a:	6060      	str	r0, [r4, #4]
    438c:	6863      	ldr	r3, [r4, #4]
    438e:	6123      	str	r3, [r4, #16]
    4390:	2300      	movs	r3, #0
    4392:	9a04      	ldr	r2, [sp, #16]
    4394:	7013      	strb	r3, [r2, #0]
    4396:	e041      	b.n	441c <_printf_i+0x210>
    4398:	6923      	ldr	r3, [r4, #16]
    439a:	0032      	movs	r2, r6
    439c:	9906      	ldr	r1, [sp, #24]
    439e:	9805      	ldr	r0, [sp, #20]
    43a0:	9d07      	ldr	r5, [sp, #28]
    43a2:	47a8      	blx	r5
    43a4:	1c43      	adds	r3, r0, #1
    43a6:	d043      	beq.n	4430 <_printf_i+0x224>
    43a8:	6823      	ldr	r3, [r4, #0]
    43aa:	2500      	movs	r5, #0
    43ac:	079b      	lsls	r3, r3, #30
    43ae:	d40f      	bmi.n	43d0 <_printf_i+0x1c4>
    43b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43b2:	68e0      	ldr	r0, [r4, #12]
    43b4:	4298      	cmp	r0, r3
    43b6:	da3d      	bge.n	4434 <_printf_i+0x228>
    43b8:	0018      	movs	r0, r3
    43ba:	e03b      	b.n	4434 <_printf_i+0x228>
    43bc:	0022      	movs	r2, r4
    43be:	2301      	movs	r3, #1
    43c0:	3219      	adds	r2, #25
    43c2:	9906      	ldr	r1, [sp, #24]
    43c4:	9805      	ldr	r0, [sp, #20]
    43c6:	9e07      	ldr	r6, [sp, #28]
    43c8:	47b0      	blx	r6
    43ca:	1c43      	adds	r3, r0, #1
    43cc:	d030      	beq.n	4430 <_printf_i+0x224>
    43ce:	3501      	adds	r5, #1
    43d0:	68e3      	ldr	r3, [r4, #12]
    43d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    43d4:	1a9b      	subs	r3, r3, r2
    43d6:	429d      	cmp	r5, r3
    43d8:	dbf0      	blt.n	43bc <_printf_i+0x1b0>
    43da:	e7e9      	b.n	43b0 <_printf_i+0x1a4>
    43dc:	2d00      	cmp	r5, #0
    43de:	d0a9      	beq.n	4334 <_printf_i+0x128>
    43e0:	9e04      	ldr	r6, [sp, #16]
    43e2:	0028      	movs	r0, r5
    43e4:	0039      	movs	r1, r7
    43e6:	f7ff f839 	bl	345c <__aeabi_uidivmod>
    43ea:	9b03      	ldr	r3, [sp, #12]
    43ec:	3e01      	subs	r6, #1
    43ee:	5c5b      	ldrb	r3, [r3, r1]
    43f0:	0028      	movs	r0, r5
    43f2:	7033      	strb	r3, [r6, #0]
    43f4:	0039      	movs	r1, r7
    43f6:	f7fe ffab 	bl	3350 <__udivsi3>
    43fa:	1e05      	subs	r5, r0, #0
    43fc:	d1f1      	bne.n	43e2 <_printf_i+0x1d6>
    43fe:	2f08      	cmp	r7, #8
    4400:	d109      	bne.n	4416 <_printf_i+0x20a>
    4402:	6823      	ldr	r3, [r4, #0]
    4404:	07db      	lsls	r3, r3, #31
    4406:	d506      	bpl.n	4416 <_printf_i+0x20a>
    4408:	6863      	ldr	r3, [r4, #4]
    440a:	6922      	ldr	r2, [r4, #16]
    440c:	4293      	cmp	r3, r2
    440e:	dc02      	bgt.n	4416 <_printf_i+0x20a>
    4410:	2330      	movs	r3, #48	; 0x30
    4412:	3e01      	subs	r6, #1
    4414:	7033      	strb	r3, [r6, #0]
    4416:	9b04      	ldr	r3, [sp, #16]
    4418:	1b9b      	subs	r3, r3, r6
    441a:	6123      	str	r3, [r4, #16]
    441c:	9b07      	ldr	r3, [sp, #28]
    441e:	aa09      	add	r2, sp, #36	; 0x24
    4420:	9300      	str	r3, [sp, #0]
    4422:	0021      	movs	r1, r4
    4424:	9b06      	ldr	r3, [sp, #24]
    4426:	9805      	ldr	r0, [sp, #20]
    4428:	f7ff fe82 	bl	4130 <_printf_common>
    442c:	1c43      	adds	r3, r0, #1
    442e:	d1b3      	bne.n	4398 <_printf_i+0x18c>
    4430:	2001      	movs	r0, #1
    4432:	4240      	negs	r0, r0
    4434:	b00b      	add	sp, #44	; 0x2c
    4436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4438:	00004f0a 	.word	0x00004f0a
    443c:	00004ef9 	.word	0x00004ef9

00004440 <_putc_r>:
    4440:	b570      	push	{r4, r5, r6, lr}
    4442:	0006      	movs	r6, r0
    4444:	000d      	movs	r5, r1
    4446:	0014      	movs	r4, r2
    4448:	2800      	cmp	r0, #0
    444a:	d004      	beq.n	4456 <_putc_r+0x16>
    444c:	6983      	ldr	r3, [r0, #24]
    444e:	2b00      	cmp	r3, #0
    4450:	d101      	bne.n	4456 <_putc_r+0x16>
    4452:	f7ff fb7b 	bl	3b4c <__sinit>
    4456:	4b12      	ldr	r3, [pc, #72]	; (44a0 <_putc_r+0x60>)
    4458:	429c      	cmp	r4, r3
    445a:	d111      	bne.n	4480 <_putc_r+0x40>
    445c:	6874      	ldr	r4, [r6, #4]
    445e:	68a3      	ldr	r3, [r4, #8]
    4460:	3b01      	subs	r3, #1
    4462:	60a3      	str	r3, [r4, #8]
    4464:	2b00      	cmp	r3, #0
    4466:	da05      	bge.n	4474 <_putc_r+0x34>
    4468:	69a2      	ldr	r2, [r4, #24]
    446a:	4293      	cmp	r3, r2
    446c:	db12      	blt.n	4494 <_putc_r+0x54>
    446e:	b2eb      	uxtb	r3, r5
    4470:	2b0a      	cmp	r3, #10
    4472:	d00f      	beq.n	4494 <_putc_r+0x54>
    4474:	6823      	ldr	r3, [r4, #0]
    4476:	b2e8      	uxtb	r0, r5
    4478:	1c5a      	adds	r2, r3, #1
    447a:	6022      	str	r2, [r4, #0]
    447c:	701d      	strb	r5, [r3, #0]
    447e:	bd70      	pop	{r4, r5, r6, pc}
    4480:	4b08      	ldr	r3, [pc, #32]	; (44a4 <_putc_r+0x64>)
    4482:	429c      	cmp	r4, r3
    4484:	d101      	bne.n	448a <_putc_r+0x4a>
    4486:	68b4      	ldr	r4, [r6, #8]
    4488:	e7e9      	b.n	445e <_putc_r+0x1e>
    448a:	4b07      	ldr	r3, [pc, #28]	; (44a8 <_putc_r+0x68>)
    448c:	429c      	cmp	r4, r3
    448e:	d1e6      	bne.n	445e <_putc_r+0x1e>
    4490:	68f4      	ldr	r4, [r6, #12]
    4492:	e7e4      	b.n	445e <_putc_r+0x1e>
    4494:	0022      	movs	r2, r4
    4496:	0029      	movs	r1, r5
    4498:	0030      	movs	r0, r6
    449a:	f7ff f993 	bl	37c4 <__swbuf_r>
    449e:	e7ee      	b.n	447e <_putc_r+0x3e>
    44a0:	00004ea8 	.word	0x00004ea8
    44a4:	00004ec8 	.word	0x00004ec8
    44a8:	00004e88 	.word	0x00004e88

000044ac <_sbrk_r>:
    44ac:	2300      	movs	r3, #0
    44ae:	b570      	push	{r4, r5, r6, lr}
    44b0:	4c06      	ldr	r4, [pc, #24]	; (44cc <_sbrk_r+0x20>)
    44b2:	0005      	movs	r5, r0
    44b4:	0008      	movs	r0, r1
    44b6:	6023      	str	r3, [r4, #0]
    44b8:	f7fe ff2c 	bl	3314 <_sbrk>
    44bc:	1c43      	adds	r3, r0, #1
    44be:	d103      	bne.n	44c8 <_sbrk_r+0x1c>
    44c0:	6823      	ldr	r3, [r4, #0]
    44c2:	2b00      	cmp	r3, #0
    44c4:	d000      	beq.n	44c8 <_sbrk_r+0x1c>
    44c6:	602b      	str	r3, [r5, #0]
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	200005f8 	.word	0x200005f8

000044d0 <__sread>:
    44d0:	b570      	push	{r4, r5, r6, lr}
    44d2:	000c      	movs	r4, r1
    44d4:	250e      	movs	r5, #14
    44d6:	5f49      	ldrsh	r1, [r1, r5]
    44d8:	f000 f8b2 	bl	4640 <_read_r>
    44dc:	2800      	cmp	r0, #0
    44de:	db03      	blt.n	44e8 <__sread+0x18>
    44e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    44e2:	181b      	adds	r3, r3, r0
    44e4:	6563      	str	r3, [r4, #84]	; 0x54
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	89a3      	ldrh	r3, [r4, #12]
    44ea:	4a02      	ldr	r2, [pc, #8]	; (44f4 <__sread+0x24>)
    44ec:	4013      	ands	r3, r2
    44ee:	81a3      	strh	r3, [r4, #12]
    44f0:	e7f9      	b.n	44e6 <__sread+0x16>
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	ffffefff 	.word	0xffffefff

000044f8 <__swrite>:
    44f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44fa:	001f      	movs	r7, r3
    44fc:	898b      	ldrh	r3, [r1, #12]
    44fe:	0005      	movs	r5, r0
    4500:	000c      	movs	r4, r1
    4502:	0016      	movs	r6, r2
    4504:	05db      	lsls	r3, r3, #23
    4506:	d505      	bpl.n	4514 <__swrite+0x1c>
    4508:	230e      	movs	r3, #14
    450a:	5ec9      	ldrsh	r1, [r1, r3]
    450c:	2200      	movs	r2, #0
    450e:	2302      	movs	r3, #2
    4510:	f000 f874 	bl	45fc <_lseek_r>
    4514:	89a3      	ldrh	r3, [r4, #12]
    4516:	4a05      	ldr	r2, [pc, #20]	; (452c <__swrite+0x34>)
    4518:	0028      	movs	r0, r5
    451a:	4013      	ands	r3, r2
    451c:	81a3      	strh	r3, [r4, #12]
    451e:	0032      	movs	r2, r6
    4520:	230e      	movs	r3, #14
    4522:	5ee1      	ldrsh	r1, [r4, r3]
    4524:	003b      	movs	r3, r7
    4526:	f000 f81f 	bl	4568 <_write_r>
    452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    452c:	ffffefff 	.word	0xffffefff

00004530 <__sseek>:
    4530:	b570      	push	{r4, r5, r6, lr}
    4532:	000c      	movs	r4, r1
    4534:	250e      	movs	r5, #14
    4536:	5f49      	ldrsh	r1, [r1, r5]
    4538:	f000 f860 	bl	45fc <_lseek_r>
    453c:	89a3      	ldrh	r3, [r4, #12]
    453e:	1c42      	adds	r2, r0, #1
    4540:	d103      	bne.n	454a <__sseek+0x1a>
    4542:	4a05      	ldr	r2, [pc, #20]	; (4558 <__sseek+0x28>)
    4544:	4013      	ands	r3, r2
    4546:	81a3      	strh	r3, [r4, #12]
    4548:	bd70      	pop	{r4, r5, r6, pc}
    454a:	2280      	movs	r2, #128	; 0x80
    454c:	0152      	lsls	r2, r2, #5
    454e:	4313      	orrs	r3, r2
    4550:	81a3      	strh	r3, [r4, #12]
    4552:	6560      	str	r0, [r4, #84]	; 0x54
    4554:	e7f8      	b.n	4548 <__sseek+0x18>
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	ffffefff 	.word	0xffffefff

0000455c <__sclose>:
    455c:	b510      	push	{r4, lr}
    455e:	230e      	movs	r3, #14
    4560:	5ec9      	ldrsh	r1, [r1, r3]
    4562:	f000 f815 	bl	4590 <_close_r>
    4566:	bd10      	pop	{r4, pc}

00004568 <_write_r>:
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	0005      	movs	r5, r0
    456c:	0008      	movs	r0, r1
    456e:	0011      	movs	r1, r2
    4570:	2200      	movs	r2, #0
    4572:	4c06      	ldr	r4, [pc, #24]	; (458c <_write_r+0x24>)
    4574:	6022      	str	r2, [r4, #0]
    4576:	001a      	movs	r2, r3
    4578:	f7fe fea4 	bl	32c4 <_write>
    457c:	1c43      	adds	r3, r0, #1
    457e:	d103      	bne.n	4588 <_write_r+0x20>
    4580:	6823      	ldr	r3, [r4, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	d000      	beq.n	4588 <_write_r+0x20>
    4586:	602b      	str	r3, [r5, #0]
    4588:	bd70      	pop	{r4, r5, r6, pc}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	200005f8 	.word	0x200005f8

00004590 <_close_r>:
    4590:	2300      	movs	r3, #0
    4592:	b570      	push	{r4, r5, r6, lr}
    4594:	4c06      	ldr	r4, [pc, #24]	; (45b0 <_close_r+0x20>)
    4596:	0005      	movs	r5, r0
    4598:	0008      	movs	r0, r1
    459a:	6023      	str	r3, [r4, #0]
    459c:	f7fe fecc 	bl	3338 <_close>
    45a0:	1c43      	adds	r3, r0, #1
    45a2:	d103      	bne.n	45ac <_close_r+0x1c>
    45a4:	6823      	ldr	r3, [r4, #0]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d000      	beq.n	45ac <_close_r+0x1c>
    45aa:	602b      	str	r3, [r5, #0]
    45ac:	bd70      	pop	{r4, r5, r6, pc}
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	200005f8 	.word	0x200005f8

000045b4 <_fstat_r>:
    45b4:	2300      	movs	r3, #0
    45b6:	b570      	push	{r4, r5, r6, lr}
    45b8:	4c06      	ldr	r4, [pc, #24]	; (45d4 <_fstat_r+0x20>)
    45ba:	0005      	movs	r5, r0
    45bc:	0008      	movs	r0, r1
    45be:	0011      	movs	r1, r2
    45c0:	6023      	str	r3, [r4, #0]
    45c2:	f7fe febc 	bl	333e <_fstat>
    45c6:	1c43      	adds	r3, r0, #1
    45c8:	d103      	bne.n	45d2 <_fstat_r+0x1e>
    45ca:	6823      	ldr	r3, [r4, #0]
    45cc:	2b00      	cmp	r3, #0
    45ce:	d000      	beq.n	45d2 <_fstat_r+0x1e>
    45d0:	602b      	str	r3, [r5, #0]
    45d2:	bd70      	pop	{r4, r5, r6, pc}
    45d4:	200005f8 	.word	0x200005f8

000045d8 <_isatty_r>:
    45d8:	2300      	movs	r3, #0
    45da:	b570      	push	{r4, r5, r6, lr}
    45dc:	4c06      	ldr	r4, [pc, #24]	; (45f8 <_isatty_r+0x20>)
    45de:	0005      	movs	r5, r0
    45e0:	0008      	movs	r0, r1
    45e2:	6023      	str	r3, [r4, #0]
    45e4:	f7fe feb0 	bl	3348 <_isatty>
    45e8:	1c43      	adds	r3, r0, #1
    45ea:	d103      	bne.n	45f4 <_isatty_r+0x1c>
    45ec:	6823      	ldr	r3, [r4, #0]
    45ee:	2b00      	cmp	r3, #0
    45f0:	d000      	beq.n	45f4 <_isatty_r+0x1c>
    45f2:	602b      	str	r3, [r5, #0]
    45f4:	bd70      	pop	{r4, r5, r6, pc}
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	200005f8 	.word	0x200005f8

000045fc <_lseek_r>:
    45fc:	b570      	push	{r4, r5, r6, lr}
    45fe:	0005      	movs	r5, r0
    4600:	0008      	movs	r0, r1
    4602:	0011      	movs	r1, r2
    4604:	2200      	movs	r2, #0
    4606:	4c06      	ldr	r4, [pc, #24]	; (4620 <_lseek_r+0x24>)
    4608:	6022      	str	r2, [r4, #0]
    460a:	001a      	movs	r2, r3
    460c:	f7fe fe9e 	bl	334c <_lseek>
    4610:	1c43      	adds	r3, r0, #1
    4612:	d103      	bne.n	461c <_lseek_r+0x20>
    4614:	6823      	ldr	r3, [r4, #0]
    4616:	2b00      	cmp	r3, #0
    4618:	d000      	beq.n	461c <_lseek_r+0x20>
    461a:	602b      	str	r3, [r5, #0]
    461c:	bd70      	pop	{r4, r5, r6, pc}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	200005f8 	.word	0x200005f8

00004624 <memchr>:
    4624:	b2c9      	uxtb	r1, r1
    4626:	1882      	adds	r2, r0, r2
    4628:	4290      	cmp	r0, r2
    462a:	d101      	bne.n	4630 <memchr+0xc>
    462c:	2000      	movs	r0, #0
    462e:	4770      	bx	lr
    4630:	7803      	ldrb	r3, [r0, #0]
    4632:	428b      	cmp	r3, r1
    4634:	d0fb      	beq.n	462e <memchr+0xa>
    4636:	3001      	adds	r0, #1
    4638:	e7f6      	b.n	4628 <memchr+0x4>

0000463a <__malloc_lock>:
    463a:	4770      	bx	lr

0000463c <__malloc_unlock>:
    463c:	4770      	bx	lr
	...

00004640 <_read_r>:
    4640:	b570      	push	{r4, r5, r6, lr}
    4642:	0005      	movs	r5, r0
    4644:	0008      	movs	r0, r1
    4646:	0011      	movs	r1, r2
    4648:	2200      	movs	r2, #0
    464a:	4c06      	ldr	r4, [pc, #24]	; (4664 <_read_r+0x24>)
    464c:	6022      	str	r2, [r4, #0]
    464e:	001a      	movs	r2, r3
    4650:	f7fe fe16 	bl	3280 <_read>
    4654:	1c43      	adds	r3, r0, #1
    4656:	d103      	bne.n	4660 <_read_r+0x20>
    4658:	6823      	ldr	r3, [r4, #0]
    465a:	2b00      	cmp	r3, #0
    465c:	d000      	beq.n	4660 <_read_r+0x20>
    465e:	602b      	str	r3, [r5, #0]
    4660:	bd70      	pop	{r4, r5, r6, pc}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	200005f8 	.word	0x200005f8
    4668:	000003a6 	.word	0x000003a6
    466c:	00000424 	.word	0x00000424
    4670:	000004ae 	.word	0x000004ae
    4674:	000004cc 	.word	0x000004cc
    4678:	000005a6 	.word	0x000005a6
    467c:	000005f2 	.word	0x000005f2
    4680:	00000768 	.word	0x00000768
    4684:	00000616 	.word	0x00000616
    4688:	0000063a 	.word	0x0000063a
    468c:	0000065e 	.word	0x0000065e
    4690:	0000071c 	.word	0x0000071c
    4694:	0000078a 	.word	0x0000078a
    4698:	000007ba 	.word	0x000007ba
    469c:	000007e8 	.word	0x000007e8
    46a0:	00000750 	.word	0x00000750
    46a4:	0000081a 	.word	0x0000081a
    46a8:	00000750 	.word	0x00000750
    46ac:	00000750 	.word	0x00000750
    46b0:	00000750 	.word	0x00000750
    46b4:	00000750 	.word	0x00000750
    46b8:	00000858 	.word	0x00000858

000046bc <__FUNCTION__.14698>:
    46bc:	65746e65 69775f72 665f6966 776d7269     enter_wifi_firmw
    46cc:	5f657261 6e776f64 64616f6c 00000000     are_download....
    46dc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    46ec:	00005d64 6c696146 74206465 7570206f     d]..Failed to pu
    46fc:	68742074 69572065 43206946 20706968     t the WiFi Chip 
    470c:	64206e69 6c6e776f 2064616f 65646f6d     in download mode
    471c:	00000000                                ....

00004720 <__FUNCTION__.14141>:
    4720:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    4730:	61766e69 6564696c 636f6920 6320746c     invalide ioclt c
    4740:	0000646d                                md..

00004744 <__FUNCTION__.12710>:
    4744:	645f6d6e 695f7672 5f74696e 6e776f64     nm_drv_init_down
    4754:	64616f6c 646f6d5f 00000065 696d6e5b     load_mode...[nmi
    4764:	61747320 3a5d7472 69616620 6e69206c      start]: fail in
    4774:	62207469 00007375 50504128 4e492829     it bus..(APP)(IN
    4784:	00294f46 70696843 20444920 0a786c25     FO).Chip ID %lx.
    4794:	00000000 00001150 00001150 00001180     ....P...P.......
    47a4:	00001102 00001126 00001134 00001166     ....&...4...f...
    47b4:	00001166 000011ae 000010e6 000011e8     f...............
    47c4:	000011e8 000011e8 000011e8 00001142     ............B...

000047d4 <__FUNCTION__.12113>:
    47d4:	5f697073 00646d63                       spi_cmd.

000047dc <__FUNCTION__.12121>:
    47dc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000047e8 <__FUNCTION__.12137>:
    47e8:	5f697073 61746164 6165725f 00000064     spi_data_read...

000047f8 <__FUNCTION__.12152>:
    47f8:	5f697073 61746164 6972775f 00006574     spi_data_write..

00004808 <__FUNCTION__.12162>:
    4808:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00004818 <__FUNCTION__.12170>:
    4818:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00004828 <__FUNCTION__.12179>:
    4828:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00004838 <__FUNCTION__.12187>:
    4838:	735f6d6e 725f6970 00646165              nm_spi_read.

00004844 <__FUNCTION__.12204>:
    4844:	735f6d6e 695f6970 0074696e              nm_spi_init.

00004850 <crc7_syndrome_table>:
    4850:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    4860:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    4870:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    4880:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    4890:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    48a0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    48b0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    48c0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    48d0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    48e0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    48f0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    4900:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    4910:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    4920:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    4930:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    4940:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    4950:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4960:	6e692064 6e726574 72206c61 20646165     d internal read 
    4970:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    4980:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    4990:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    49a0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    49b0:	6e692064 6e726574 72206c61 20646165     d internal read 
    49c0:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    49d0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    49e0:	6e726574 77206c61 65746972 6f727020     ternal write pro
    49f0:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    4a00:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    4a10:	20646d63 64616572 69686320 64692070     cmd read chip id
    4a20:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4a30:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    4a40:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    4a50:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4a60:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    4a70:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    4a80:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    4a90:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    4aa0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    4ab0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4ac0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    4ad0:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    4ae0:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    4af0:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    4b00:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    4b10:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    4b20:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    4b30:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    4b40:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    4b50:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4b60:	656c6961 61642064 62206174 6b636f6c     ailed data block
    4b70:	69727720 202c6574 20737562 6f727265      write, bus erro
    4b80:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    4b90:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    4ba0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    4bb0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    4bc0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4bd0:	6c622064 206b636f 61746164 69727720     d block data wri
    4be0:	2e2e6574 0000002e 696d6e5b 69707320     te......[nmi spi
    4bf0:	46203a5d 656c6961 6d632064 72772064     ]: Failed cmd wr
    4c00:	2c657469 73756220 72726520 2e2e726f     ite, bus error..
    4c10:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    4c20:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    4c30:	72206573 2c646165 73756220 72726520     se read, bus err
    4c40:	2e2e726f 0000002e 696d6e5b 69707320     or......[nmi spi
    4c50:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    4c60:	6f707365 2065736e 64616572 7562202c     esponse read, bu
    4c70:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    4c80:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    4c90:	72206174 6f707365 2065736e 64616572     ta response read
    4ca0:	282e2e2e 78323025 00000a29 696d6e5b     ...(%02x)...[nmi
    4cb0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    4cc0:	62206174 6b636f6c 61657220 62202c64     ta block read, b
    4cd0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    4ce0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    4cf0:	62206174 6b636f6c 63726320 61657220     ta block crc rea
    4d00:	62202c64 65207375 726f7272 002e2e2e     d, bus error....
    4d10:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4d20:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
    4d30:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
    4d40:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    4d50:	65722064 6e6f7073 202c6573 64616572     d response, read
    4d60:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    4d70:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4d80:	61642064 72206174 2e646165 00002e2e     d data read.....
    4d90:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    4da0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    4db0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    4dc0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    4dd0:	65722064 6e6f7073 202c6573 74697277     d response, writ
    4de0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    4df0:	00000000 42000800 42000c00 42001000     .......B...B...B
    4e00:	42001400 42001800 42001c00 000029e2     ...B...B...B.)..
    4e10:	000029de 000029de 00002a40 00002a40     .)...)..@*..@*..
    4e20:	000029f6 000029e8 000029fc 00002a2e     .)...)...)...*..
    4e30:	00002bb4 00002b94 00002b94 00002c14     .+...+...+...,..
    4e40:	00002ba6 00002bc2 00002b98 00002bd0     .+...+...+...+..
    4e50:	00002c04                                .,..

00004e54 <_tcc_intflag>:
    4e54:	00000001 00000002 00000004 00000008     ................
    4e64:	00001000 00002000 00004000 00008000     ..... ...@......
    4e74:	00010000 00020000 00040000 00080000     ................

00004e84 <_global_impure_ptr>:
    4e84:	20000014                                ... 

00004e88 <__sf_fake_stderr>:
	...

00004ea8 <__sf_fake_stdin>:
	...

00004ec8 <__sf_fake_stdout>:
	...
    4ee8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4ef8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4f08:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4f18:	00006665                                ef..

00004f1c <_init>:
    4f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f1e:	46c0      	nop			; (mov r8, r8)
    4f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f22:	bc08      	pop	{r3}
    4f24:	469e      	mov	lr, r3
    4f26:	4770      	bx	lr

00004f28 <__init_array_start>:
    4f28:	000000d9 	.word	0x000000d9

00004f2c <_fini>:
    4f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f32:	bc08      	pop	{r3}
    4f34:	469e      	mov	lr, r3
    4f36:	4770      	bx	lr

00004f38 <__fini_array_start>:
    4f38:	000000b1 	.word	0x000000b1
