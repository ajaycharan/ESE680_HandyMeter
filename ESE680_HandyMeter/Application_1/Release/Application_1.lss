
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e5c0  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003cc  20000000  000165c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cd4  200003d0  00016990  000203cc  2**4
                  ALLOC
  3 .stack        00002004  200010a4  00017664  000203cc  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000203f6  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007289  00000000  00000000  0002044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002412  00000000  00000000  000276d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002516  00000000  00000000  00029aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001728  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003450  00000000  00000000  0002d728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000099d8  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000486b  00000000  00000000  0003a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004f08  00000000  00000000  0003edbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	a8 30 00 20 91 1d 01 00 8d 1d 01 00 8d 1d 01 00     .0. ............
	...
    802c:	8d 1d 01 00 00 00 00 00 00 00 00 00 8d 1d 01 00     ................
    803c:	8d 1d 01 00 8d 1d 01 00 1d 9f 00 00 8d 1d 01 00     ................
    804c:	a1 f1 00 00 4d ee 00 00 8d 1d 01 00 35 ed 00 00     ....M.......5...
    805c:	fd 15 01 00 8d 1d 01 00 61 f4 00 00 71 f4 00 00     ........a...q...
    806c:	81 f4 00 00 91 f4 00 00 a1 f4 00 00 b1 f4 00 00     ................
    807c:	d1 87 00 00 e1 87 00 00 f1 87 00 00 8d 1d 01 00     ................
    808c:	8d 1d 01 00 8d 1d 01 00 00 00 00 00 00 00 00 00     ................
    809c:	8d 1d 01 00 8d 1d 01 00 8d 1d 01 00 8d 1d 01 00     ................
    80ac:	8d 1d 01 00 00 00 00 00                             ........

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200003d0 	.word	0x200003d0
    80d4:	00000000 	.word	0x00000000
    80d8:	000165c0 	.word	0x000165c0

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200003d4 	.word	0x200003d4
    8108:	000165c0 	.word	0x000165c0
    810c:	000165c0 	.word	0x000165c0
    8110:	00000000 	.word	0x00000000

00008114 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    8114:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
    8116:	4b0e      	ldr	r3, [pc, #56]	; (8150 <sd_mmc_test_unit_ready+0x3c>)
{
    8118:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    811a:	4798      	blx	r3
    811c:	2801      	cmp	r0, #1
    811e:	d015      	beq.n	814c <sd_mmc_test_unit_ready+0x38>
    8120:	2800      	cmp	r0, #0
    8122:	d008      	beq.n	8136 <sd_mmc_test_unit_ready+0x22>
    8124:	2802      	cmp	r0, #2
    8126:	d001      	beq.n	812c <sd_mmc_test_unit_ready+0x18>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    8128:	2001      	movs	r0, #1
	}
}
    812a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
    812c:	2200      	movs	r2, #0
    812e:	4b09      	ldr	r3, [pc, #36]	; (8154 <sd_mmc_test_unit_ready+0x40>)
    8130:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    8132:	2002      	movs	r0, #2
    8134:	e7f9      	b.n	812a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_ejected[slot]) {
    8136:	4b07      	ldr	r3, [pc, #28]	; (8154 <sd_mmc_test_unit_ready+0x40>)
    8138:	5d1b      	ldrb	r3, [r3, r4]
    813a:	2b00      	cmp	r3, #0
    813c:	d1f9      	bne.n	8132 <sd_mmc_test_unit_ready+0x1e>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    813e:	4b06      	ldr	r3, [pc, #24]	; (8158 <sd_mmc_test_unit_ready+0x44>)
    8140:	0020      	movs	r0, r4
    8142:	4798      	blx	r3
    8144:	0783      	lsls	r3, r0, #30
    8146:	d0f4      	beq.n	8132 <sd_mmc_test_unit_ready+0x1e>
			return CTRL_GOOD;
    8148:	2000      	movs	r0, #0
    814a:	e7ee      	b.n	812a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    814c:	2003      	movs	r0, #3
    814e:	e7ec      	b.n	812a <sd_mmc_test_unit_ready+0x16>
    8150:	0000a49d 	.word	0x0000a49d
    8154:	200003ec 	.word	0x200003ec
    8158:	0000a925 	.word	0x0000a925

0000815c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    815c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    815e:	2000      	movs	r0, #0
    8160:	4b01      	ldr	r3, [pc, #4]	; (8168 <sd_mmc_test_unit_ready_0+0xc>)
    8162:	4798      	blx	r3
}
    8164:	bd10      	pop	{r4, pc}
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	00008115 	.word	0x00008115

0000816c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    816c:	b570      	push	{r4, r5, r6, lr}
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    816e:	4b05      	ldr	r3, [pc, #20]	; (8184 <sd_mmc_read_capacity+0x18>)
{
    8170:	000d      	movs	r5, r1
    8172:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    8174:	4798      	blx	r3
    8176:	0040      	lsls	r0, r0, #1
    8178:	3801      	subs	r0, #1
    817a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    817c:	4b02      	ldr	r3, [pc, #8]	; (8188 <sd_mmc_read_capacity+0x1c>)
    817e:	0020      	movs	r0, r4
    8180:	4798      	blx	r3
}
    8182:	bd70      	pop	{r4, r5, r6, pc}
    8184:	0000a961 	.word	0x0000a961
    8188:	00008115 	.word	0x00008115

0000818c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    818c:	b510      	push	{r4, lr}
    818e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    8190:	4b01      	ldr	r3, [pc, #4]	; (8198 <sd_mmc_read_capacity_0+0xc>)
    8192:	2000      	movs	r0, #0
    8194:	4798      	blx	r3
}
    8196:	bd10      	pop	{r4, pc}
    8198:	0000816d 	.word	0x0000816d

0000819c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    819c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    819e:	2000      	movs	r0, #0
    81a0:	4b01      	ldr	r3, [pc, #4]	; (81a8 <sd_mmc_wr_protect_0+0xc>)
    81a2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    81a4:	bd10      	pop	{r4, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	0000a99d 	.word	0x0000a99d

000081ac <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    81ac:	4b08      	ldr	r3, [pc, #32]	; (81d0 <_tcc_get_inst_index+0x24>)
    81ae:	4298      	cmp	r0, r3
    81b0:	d009      	beq.n	81c6 <_tcc_get_inst_index+0x1a>
    81b2:	4b08      	ldr	r3, [pc, #32]	; (81d4 <_tcc_get_inst_index+0x28>)
    81b4:	4298      	cmp	r0, r3
    81b6:	d008      	beq.n	81ca <_tcc_get_inst_index+0x1e>
    81b8:	4b07      	ldr	r3, [pc, #28]	; (81d8 <_tcc_get_inst_index+0x2c>)
    81ba:	469c      	mov	ip, r3
    81bc:	4460      	add	r0, ip
    81be:	4243      	negs	r3, r0
    81c0:	4158      	adcs	r0, r3
    81c2:	0040      	lsls	r0, r0, #1
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    81c4:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    81c6:	2000      	movs	r0, #0
    81c8:	e7fc      	b.n	81c4 <_tcc_get_inst_index+0x18>
    81ca:	2001      	movs	r0, #1
			return i;
    81cc:	e7fa      	b.n	81c4 <_tcc_get_inst_index+0x18>
    81ce:	46c0      	nop			; (mov r8, r8)
    81d0:	42002000 	.word	0x42002000
    81d4:	42002400 	.word	0x42002400
    81d8:	bdffd800 	.word	0xbdffd800

000081dc <tcc_get_config_defaults>:
		if (hw == tcc_modules[i]) {
    81dc:	4b53      	ldr	r3, [pc, #332]	; (832c <tcc_get_config_defaults+0x150>)
    81de:	4299      	cmp	r1, r3
    81e0:	d006      	beq.n	81f0 <tcc_get_config_defaults+0x14>
    81e2:	4b53      	ldr	r3, [pc, #332]	; (8330 <tcc_get_config_defaults+0x154>)
    81e4:	4299      	cmp	r1, r3
    81e6:	d003      	beq.n	81f0 <tcc_get_config_defaults+0x14>
    81e8:	4b52      	ldr	r3, [pc, #328]	; (8334 <tcc_get_config_defaults+0x158>)
    81ea:	4299      	cmp	r1, r3
    81ec:	d100      	bne.n	81f0 <tcc_get_config_defaults+0x14>
    81ee:	e09a      	b.n	8326 <tcc_get_config_defaults+0x14a>
    81f0:	4a51      	ldr	r2, [pc, #324]	; (8338 <tcc_get_config_defaults+0x15c>)
{
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);

	/* Base counter defaults */
	config->counter.count                  = 0;
    81f2:	2300      	movs	r3, #0

	config->counter.period                 = _tcc_maxs[module_index];
    81f4:	6042      	str	r2, [r0, #4]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    81f6:	222c      	movs	r2, #44	; 0x2c
	config->counter.count                  = 0;
    81f8:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    81fa:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    81fc:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    81fe:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    8200:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    8202:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    8204:	61c3      	str	r3, [r0, #28]
    8206:	6203      	str	r3, [r0, #32]
    8208:	6243      	str	r3, [r0, #36]	; 0x24
    820a:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    820c:	7503      	strb	r3, [r0, #20]
    820e:	7543      	strb	r3, [r0, #21]
    8210:	7583      	strb	r3, [r0, #22]
    8212:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    8214:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    8216:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    8218:	7403      	strb	r3, [r0, #16]
    821a:	7443      	strb	r3, [r0, #17]
    821c:	7483      	strb	r3, [r0, #18]
    821e:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    8220:	5483      	strb	r3, [r0, r2]
    8222:	3201      	adds	r2, #1
    8224:	5483      	strb	r3, [r0, r2]
    8226:	3201      	adds	r2, #1
    8228:	5483      	strb	r3, [r0, r2]
    822a:	3201      	adds	r2, #1
    822c:	5483      	strb	r3, [r0, r2]
    822e:	3201      	adds	r2, #1
    8230:	5483      	strb	r3, [r0, r2]
    8232:	3201      	adds	r2, #1
    8234:	5483      	strb	r3, [r0, r2]
    8236:	3201      	adds	r2, #1
    8238:	5483      	strb	r3, [r0, r2]
    823a:	3201      	adds	r2, #1
    823c:	5483      	strb	r3, [r0, r2]
    823e:	3201      	adds	r2, #1
    8240:	5483      	strb	r3, [r0, r2]
    8242:	3201      	adds	r2, #1
    8244:	5483      	strb	r3, [r0, r2]
    8246:	3201      	adds	r2, #1
    8248:	5483      	strb	r3, [r0, r2]
    824a:	3201      	adds	r2, #1
    824c:	5483      	strb	r3, [r0, r2]
    824e:	3201      	adds	r2, #1
    8250:	5483      	strb	r3, [r0, r2]
    8252:	3201      	adds	r2, #1
    8254:	5483      	strb	r3, [r0, r2]
    8256:	3201      	adds	r2, #1
    8258:	5483      	strb	r3, [r0, r2]
    825a:	3201      	adds	r2, #1
    825c:	5483      	strb	r3, [r0, r2]
    825e:	3201      	adds	r2, #1
    8260:	5483      	strb	r3, [r0, r2]
    8262:	3201      	adds	r2, #1
    8264:	5483      	strb	r3, [r0, r2]
    8266:	3201      	adds	r2, #1
    8268:	5483      	strb	r3, [r0, r2]
    826a:	3201      	adds	r2, #1
    826c:	5483      	strb	r3, [r0, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    826e:	3201      	adds	r2, #1
    8270:	5483      	strb	r3, [r0, r2]
    8272:	3201      	adds	r2, #1
    8274:	5483      	strb	r3, [r0, r2]
    8276:	3201      	adds	r2, #1
    8278:	5483      	strb	r3, [r0, r2]
    827a:	3201      	adds	r2, #1
    827c:	5483      	strb	r3, [r0, r2]
    827e:	3201      	adds	r2, #1
    8280:	5483      	strb	r3, [r0, r2]
    8282:	3201      	adds	r2, #1
    8284:	5483      	strb	r3, [r0, r2]
    8286:	3201      	adds	r2, #1
    8288:	5483      	strb	r3, [r0, r2]
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    828a:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    828c:	3201      	adds	r2, #1
    828e:	5483      	strb	r3, [r0, r2]
    8290:	3201      	adds	r2, #1
    8292:	5483      	strb	r3, [r0, r2]
    8294:	3201      	adds	r2, #1
    8296:	5483      	strb	r3, [r0, r2]
    8298:	3201      	adds	r2, #1
    829a:	5483      	strb	r3, [r0, r2]
    829c:	3201      	adds	r2, #1
    829e:	5483      	strb	r3, [r0, r2]
    82a0:	3201      	adds	r2, #1
    82a2:	5483      	strb	r3, [r0, r2]
    82a4:	3201      	adds	r2, #1
    82a6:	5483      	strb	r3, [r0, r2]
    82a8:	3201      	adds	r2, #1
    82aa:	5483      	strb	r3, [r0, r2]
    82ac:	3201      	adds	r2, #1
    82ae:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    82b0:	3201      	adds	r2, #1
    82b2:	5483      	strb	r3, [r0, r2]
    82b4:	3201      	adds	r2, #1
    82b6:	5483      	strb	r3, [r0, r2]
    82b8:	3201      	adds	r2, #1
    82ba:	5483      	strb	r3, [r0, r2]
    82bc:	3201      	adds	r2, #1
    82be:	5483      	strb	r3, [r0, r2]
    82c0:	3201      	adds	r2, #1
    82c2:	5483      	strb	r3, [r0, r2]
    82c4:	3201      	adds	r2, #1
    82c6:	5483      	strb	r3, [r0, r2]
    82c8:	3201      	adds	r2, #1
    82ca:	5483      	strb	r3, [r0, r2]
    82cc:	3201      	adds	r2, #1
    82ce:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    82d0:	3241      	adds	r2, #65	; 0x41
    82d2:	5483      	strb	r3, [r0, r2]
    82d4:	3201      	adds	r2, #1
    82d6:	6583      	str	r3, [r0, #88]	; 0x58
    82d8:	6783      	str	r3, [r0, #120]	; 0x78
    82da:	5483      	strb	r3, [r0, r2]
    82dc:	3201      	adds	r2, #1
    82de:	65c3      	str	r3, [r0, #92]	; 0x5c
    82e0:	67c3      	str	r3, [r0, #124]	; 0x7c
    82e2:	5483      	strb	r3, [r0, r2]
    82e4:	3a1a      	subs	r2, #26
    82e6:	6603      	str	r3, [r0, #96]	; 0x60
    82e8:	5083      	str	r3, [r0, r2]
    82ea:	321b      	adds	r2, #27
    82ec:	5483      	strb	r3, [r0, r2]
    82ee:	3a17      	subs	r2, #23
    82f0:	6643      	str	r3, [r0, #100]	; 0x64
    82f2:	5083      	str	r3, [r0, r2]
    82f4:	3218      	adds	r2, #24
    82f6:	5483      	strb	r3, [r0, r2]
    82f8:	3a14      	subs	r2, #20
    82fa:	6683      	str	r3, [r0, #104]	; 0x68
    82fc:	5083      	str	r3, [r0, r2]
    82fe:	3215      	adds	r2, #21
    8300:	5483      	strb	r3, [r0, r2]
    8302:	3a11      	subs	r2, #17
    8304:	66c3      	str	r3, [r0, #108]	; 0x6c
    8306:	5083      	str	r3, [r0, r2]
    8308:	3212      	adds	r2, #18
    830a:	5483      	strb	r3, [r0, r2]
    830c:	3a0e      	subs	r2, #14
    830e:	6703      	str	r3, [r0, #112]	; 0x70
    8310:	5083      	str	r3, [r0, r2]
    8312:	320f      	adds	r2, #15
    8314:	5483      	strb	r3, [r0, r2]
    8316:	3a0b      	subs	r2, #11
    8318:	6743      	str	r3, [r0, #116]	; 0x74
    831a:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    831c:	320c      	adds	r2, #12
    831e:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    8320:	3201      	adds	r2, #1
    8322:	5483      	strb	r3, [r0, r2]
}
    8324:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    8326:	4a05      	ldr	r2, [pc, #20]	; (833c <tcc_get_config_defaults+0x160>)
    8328:	e763      	b.n	81f2 <tcc_get_config_defaults+0x16>
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	42002000 	.word	0x42002000
    8330:	42002400 	.word	0x42002400
    8334:	42002800 	.word	0x42002800
    8338:	00ffffff 	.word	0x00ffffff
    833c:	0000ffff 	.word	0x0000ffff

00008340 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    8340:	b5f0      	push	{r4, r5, r6, r7, lr}
    8342:	4645      	mov	r5, r8
    8344:	46de      	mov	lr, fp
    8346:	4657      	mov	r7, sl
    8348:	464e      	mov	r6, r9
    834a:	b5e0      	push	{r5, r6, r7, lr}
		if (hw == tcc_modules[i]) {
    834c:	4bc4      	ldr	r3, [pc, #784]	; (8660 <tcc_init+0x320>)
{
    834e:	b08f      	sub	sp, #60	; 0x3c
    8350:	000c      	movs	r4, r1
    8352:	0015      	movs	r5, r2
		if (hw == tcc_modules[i]) {
    8354:	4299      	cmp	r1, r3
    8356:	d100      	bne.n	835a <tcc_init+0x1a>
    8358:	e0fb      	b.n	8552 <tcc_init+0x212>
    835a:	4bc2      	ldr	r3, [pc, #776]	; (8664 <tcc_init+0x324>)
    835c:	4299      	cmp	r1, r3
    835e:	d100      	bne.n	8362 <tcc_init+0x22>
    8360:	e0fb      	b.n	855a <tcc_init+0x21a>
    8362:	4bc1      	ldr	r3, [pc, #772]	; (8668 <tcc_init+0x328>)
    8364:	2680      	movs	r6, #128	; 0x80
    8366:	4299      	cmp	r1, r3
    8368:	d100      	bne.n	836c <tcc_init+0x2c>
    836a:	e0fa      	b.n	8562 <tcc_init+0x222>
    836c:	2300      	movs	r3, #0
    836e:	0076      	lsls	r6, r6, #1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8370:	49be      	ldr	r1, [pc, #760]	; (866c <tcc_init+0x32c>)
    8372:	6a0a      	ldr	r2, [r1, #32]
    8374:	4332      	orrs	r2, r6
    8376:	620a      	str	r2, [r1, #32]
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    8378:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    837a:	221c      	movs	r2, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    837c:	0789      	lsls	r1, r1, #30
    837e:	d507      	bpl.n	8390 <tcc_init+0x50>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    8380:	0010      	movs	r0, r2
    8382:	b00f      	add	sp, #60	; 0x3c
    8384:	bc3c      	pop	{r2, r3, r4, r5}
    8386:	4690      	mov	r8, r2
    8388:	4699      	mov	r9, r3
    838a:	46a2      	mov	sl, r4
    838c:	46ab      	mov	fp, r5
    838e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    8390:	6821      	ldr	r1, [r4, #0]
    8392:	07c9      	lsls	r1, r1, #31
    8394:	d4f4      	bmi.n	8380 <tcc_init+0x40>
	uint32_t count_max  = _tcc_maxs[module_index];
    8396:	4ab6      	ldr	r2, [pc, #728]	; (8670 <tcc_init+0x330>)
    8398:	0099      	lsls	r1, r3, #2
    839a:	5856      	ldr	r6, [r2, r1]
	if ((config->counter.count > count_max)
    839c:	682a      	ldr	r2, [r5, #0]
    839e:	4296      	cmp	r6, r2
    83a0:	d201      	bcs.n	83a6 <tcc_init+0x66>
		return STATUS_ERR_INVALID_ARG;
    83a2:	2217      	movs	r2, #23
    83a4:	e7ec      	b.n	8380 <tcc_init+0x40>
		|| (config->counter.period > count_max)
    83a6:	686a      	ldr	r2, [r5, #4]
    83a8:	4296      	cmp	r6, r2
    83aa:	d3fa      	bcc.n	83a2 <tcc_init+0x62>
    83ac:	221c      	movs	r2, #28
    83ae:	4694      	mov	ip, r2
    83b0:	44ac      	add	ip, r5
    83b2:	4662      	mov	r2, ip
    83b4:	002f      	movs	r7, r5
    83b6:	469c      	mov	ip, r3
    83b8:	9204      	str	r2, [sp, #16]
    83ba:	372c      	adds	r7, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    83bc:	6813      	ldr	r3, [r2, #0]
    83be:	429e      	cmp	r6, r3
    83c0:	d3ef      	bcc.n	83a2 <tcc_init+0x62>
    83c2:	3204      	adds	r2, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    83c4:	42ba      	cmp	r2, r7
    83c6:	d1f9      	bne.n	83bc <tcc_init+0x7c>
    83c8:	2698      	movs	r6, #152	; 0x98
    83ca:	4663      	mov	r3, ip
    83cc:	46b4      	mov	ip, r6
    83ce:	44ac      	add	ip, r5
    83d0:	4666      	mov	r6, ip
    83d2:	9605      	str	r6, [sp, #20]
    83d4:	2600      	movs	r6, #0
    83d6:	4667      	mov	r7, ip
    83d8:	46b4      	mov	ip, r6
		if (i >= _tcc_ow_nums[module_index]) {
    83da:	4ea6      	ldr	r6, [pc, #664]	; (8674 <tcc_init+0x334>)
    83dc:	46b1      	mov	r9, r6
    83de:	4666      	mov	r6, ip
    83e0:	4694      	mov	ip, r2
    83e2:	001a      	movs	r2, r3
		if (!config->pins.enable_wave_out_pin[i]) {
    83e4:	783b      	ldrb	r3, [r7, #0]
    83e6:	2b00      	cmp	r3, #0
    83e8:	d003      	beq.n	83f2 <tcc_init+0xb2>
		if (i >= _tcc_ow_nums[module_index]) {
    83ea:	464b      	mov	r3, r9
    83ec:	5c9b      	ldrb	r3, [r3, r2]
    83ee:	42b3      	cmp	r3, r6
    83f0:	ddd7      	ble.n	83a2 <tcc_init+0x62>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    83f2:	3601      	adds	r6, #1
    83f4:	3701      	adds	r7, #1
    83f6:	2e08      	cmp	r6, #8
    83f8:	d1f4      	bne.n	83e4 <tcc_init+0xa4>
    83fa:	0013      	movs	r3, r2
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    83fc:	2780      	movs	r7, #128	; 0x80
    83fe:	4e9e      	ldr	r6, [pc, #632]	; (8678 <tcc_init+0x338>)
    8400:	047f      	lsls	r7, r7, #17
    8402:	5cf6      	ldrb	r6, [r6, r3]
    8404:	4662      	mov	r2, ip
    8406:	9602      	str	r6, [sp, #8]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    8408:	2600      	movs	r6, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    840a:	46b8      	mov	r8, r7
    840c:	469c      	mov	ip, r3
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    840e:	9601      	str	r6, [sp, #4]
		if (config->capture.channel_function[i] ==
    8410:	19af      	adds	r7, r5, r6
    8412:	7c3f      	ldrb	r7, [r7, #16]
    8414:	2f01      	cmp	r7, #1
    8416:	d100      	bne.n	841a <tcc_init+0xda>
    8418:	e0a6      	b.n	8568 <tcc_init+0x228>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    841a:	3601      	adds	r6, #1
    841c:	2e04      	cmp	r6, #4
    841e:	d1f7      	bne.n	8410 <tcc_init+0xd0>
	if (config->run_in_standby) {
    8420:	369d      	adds	r6, #157	; 0x9d
    8422:	5dae      	ldrb	r6, [r5, r6]
    8424:	4663      	mov	r3, ip
    8426:	2e00      	cmp	r6, #0
    8428:	d004      	beq.n	8434 <tcc_init+0xf4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    842a:	2680      	movs	r6, #128	; 0x80
    842c:	9f01      	ldr	r7, [sp, #4]
    842e:	0136      	lsls	r6, r6, #4
    8430:	4337      	orrs	r7, r6
    8432:	9701      	str	r7, [sp, #4]
	if (config->counter.oneshot) {
    8434:	7a2e      	ldrb	r6, [r5, #8]
	uint8_t ctrlb = 0;
    8436:	1e77      	subs	r7, r6, #1
    8438:	41be      	sbcs	r6, r7
    843a:	00b6      	lsls	r6, r6, #2
    843c:	9603      	str	r6, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    843e:	7a6e      	ldrb	r6, [r5, #9]
    8440:	2e01      	cmp	r6, #1
    8442:	d100      	bne.n	8446 <tcc_init+0x106>
    8444:	e107      	b.n	8656 <tcc_init+0x316>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8446:	7b2e      	ldrb	r6, [r5, #12]
    8448:	9606      	str	r6, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    844a:	7aee      	ldrb	r6, [r5, #11]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    844c:	9308      	str	r3, [sp, #32]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    844e:	9607      	str	r6, [sp, #28]
    8450:	2600      	movs	r6, #0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    8452:	0037      	movs	r7, r6
    8454:	9109      	str	r1, [sp, #36]	; 0x24
		if (cfg->capture_channel >= cc_num) {
    8456:	7a53      	ldrb	r3, [r2, #9]
    8458:	469a      	mov	sl, r3
    845a:	9b02      	ldr	r3, [sp, #8]
    845c:	459a      	cmp	sl, r3
    845e:	d2a0      	bcs.n	83a2 <tcc_init+0x62>
		if (cfg->filter_value > 0xF) {
    8460:	7816      	ldrb	r6, [r2, #0]
    8462:	2e0f      	cmp	r6, #15
    8464:	d89d      	bhi.n	83a2 <tcc_init+0x62>
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    8466:	7853      	ldrb	r3, [r2, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8468:	0636      	lsls	r6, r6, #24
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    846a:	041b      	lsls	r3, r3, #16
    846c:	469b      	mov	fp, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    846e:	23f0      	movs	r3, #240	; 0xf0
    8470:	051b      	lsls	r3, r3, #20
    8472:	401e      	ands	r6, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    8474:	465b      	mov	r3, fp
    8476:	4333      	orrs	r3, r6
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    8478:	7896      	ldrb	r6, [r2, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    847a:	469b      	mov	fp, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    847c:	1e73      	subs	r3, r6, #1
    847e:	419e      	sbcs	r6, r3
    8480:	01f3      	lsls	r3, r6, #7
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    8482:	78d6      	ldrb	r6, [r2, #3]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    8484:	4699      	mov	r9, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    8486:	1e73      	subs	r3, r6, #1
    8488:	419e      	sbcs	r6, r3
    848a:	00f3      	lsls	r3, r6, #3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    848c:	7916      	ldrb	r6, [r2, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    848e:	4698      	mov	r8, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    8490:	1e73      	subs	r3, r6, #1
    8492:	419e      	sbcs	r6, r3
    8494:	0133      	lsls	r3, r6, #4
    8496:	469c      	mov	ip, r3
				| TCC_FCTRLA_SRC(cfg->source)
    8498:	2303      	movs	r3, #3
    849a:	7956      	ldrb	r6, [r2, #5]
				| TCC_FCTRLA_HALT(cfg->halt_action)
    849c:	21c0      	movs	r1, #192	; 0xc0
				| TCC_FCTRLA_SRC(cfg->source)
    849e:	401e      	ands	r6, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84a0:	465b      	mov	r3, fp
    84a2:	4333      	orrs	r3, r6
    84a4:	469b      	mov	fp, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    84a6:	2360      	movs	r3, #96	; 0x60
    84a8:	7996      	ldrb	r6, [r2, #6]
				| TCC_FCTRLA_HALT(cfg->halt_action)
    84aa:	0089      	lsls	r1, r1, #2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    84ac:	0176      	lsls	r6, r6, #5
    84ae:	401e      	ands	r6, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84b0:	465b      	mov	r3, fp
    84b2:	431e      	orrs	r6, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    84b4:	79d3      	ldrb	r3, [r2, #7]
    84b6:	021b      	lsls	r3, r3, #8
    84b8:	400b      	ands	r3, r1
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    84ba:	21e0      	movs	r1, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84bc:	431e      	orrs	r6, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    84be:	7a13      	ldrb	r3, [r2, #8]
    84c0:	01c9      	lsls	r1, r1, #7
    84c2:	031b      	lsls	r3, r3, #12
    84c4:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84c6:	431e      	orrs	r6, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    84c8:	21c0      	movs	r1, #192	; 0xc0
    84ca:	4653      	mov	r3, sl
    84cc:	0109      	lsls	r1, r1, #4
    84ce:	029b      	lsls	r3, r3, #10
    84d0:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84d2:	431e      	orrs	r6, r3
    84d4:	464b      	mov	r3, r9
    84d6:	431e      	orrs	r6, r3
    84d8:	4643      	mov	r3, r8
    84da:	431e      	orrs	r6, r3
    84dc:	4663      	mov	r3, ip
		value_buffer[i] = fault;
    84de:	2108      	movs	r1, #8
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    84e0:	431e      	orrs	r6, r3
		value_buffer[i] = fault;
    84e2:	ab0a      	add	r3, sp, #40	; 0x28
    84e4:	185b      	adds	r3, r3, r1
    84e6:	51de      	str	r6, [r3, r7]
    84e8:	3704      	adds	r7, #4
    84ea:	320a      	adds	r2, #10
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    84ec:	2f08      	cmp	r7, #8
    84ee:	d1b2      	bne.n	8456 <tcc_init+0x116>
    84f0:	9b08      	ldr	r3, [sp, #32]
	uint8_t ow_num = _tcc_ow_nums[module_index];
    84f2:	4a60      	ldr	r2, [pc, #384]	; (8674 <tcc_init+0x334>)
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    84f4:	2701      	movs	r7, #1
	uint8_t ow_num = _tcc_ow_nums[module_index];
    84f6:	5cd2      	ldrb	r2, [r2, r3]
    84f8:	002e      	movs	r6, r5
    84fa:	4692      	mov	sl, r2
    84fc:	2241      	movs	r2, #65	; 0x41
    84fe:	4694      	mov	ip, r2
	drvctrl = 0;
    8500:	2200      	movs	r2, #0
    8502:	9909      	ldr	r1, [sp, #36]	; 0x24
    8504:	44ac      	add	ip, r5
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    8506:	46bb      	mov	fp, r7
    8508:	3650      	adds	r6, #80	; 0x50
    850a:	4667      	mov	r7, ip
    850c:	4688      	mov	r8, r1
    850e:	469c      	mov	ip, r3
    8510:	0013      	movs	r3, r2
    8512:	e014      	b.n	853e <tcc_init+0x1fe>
			if (i >= ow_num) {
    8514:	4592      	cmp	sl, r2
    8516:	d800      	bhi.n	851a <tcc_init+0x1da>
    8518:	e743      	b.n	83a2 <tcc_init+0x62>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    851a:	2180      	movs	r1, #128	; 0x80
    851c:	0249      	lsls	r1, r1, #9
    851e:	4091      	lsls	r1, r2
    8520:	430b      	orrs	r3, r1
		if (config->wave_ext.non_recoverable_fault[i].output !=
    8522:	7839      	ldrb	r1, [r7, #0]
    8524:	2900      	cmp	r1, #0
    8526:	d005      	beq.n	8534 <tcc_init+0x1f4>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    8528:	2902      	cmp	r1, #2
    852a:	d100      	bne.n	852e <tcc_init+0x1ee>
    852c:	e08e      	b.n	864c <tcc_init+0x30c>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    852e:	4659      	mov	r1, fp
    8530:	4091      	lsls	r1, r2
    8532:	430b      	orrs	r3, r1
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    8534:	3201      	adds	r2, #1
    8536:	3601      	adds	r6, #1
    8538:	3702      	adds	r7, #2
    853a:	2a08      	cmp	r2, #8
    853c:	d01e      	beq.n	857c <tcc_init+0x23c>
		if (config->wave_ext.invert[i]) {
    853e:	7831      	ldrb	r1, [r6, #0]
    8540:	2900      	cmp	r1, #0
    8542:	d1e7      	bne.n	8514 <tcc_init+0x1d4>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    8544:	7839      	ldrb	r1, [r7, #0]
    8546:	2900      	cmp	r1, #0
    8548:	d0f4      	beq.n	8534 <tcc_init+0x1f4>
			if (i >= ow_num) {
    854a:	4592      	cmp	sl, r2
    854c:	d8ec      	bhi.n	8528 <tcc_init+0x1e8>
		return STATUS_ERR_INVALID_ARG;
    854e:	2217      	movs	r2, #23
    8550:	e716      	b.n	8380 <tcc_init+0x40>
		if (hw == tcc_modules[i]) {
    8552:	2680      	movs	r6, #128	; 0x80
    8554:	2300      	movs	r3, #0
    8556:	0076      	lsls	r6, r6, #1
    8558:	e70a      	b.n	8370 <tcc_init+0x30>
    855a:	2680      	movs	r6, #128	; 0x80
    855c:	2301      	movs	r3, #1
    855e:	00b6      	lsls	r6, r6, #2
    8560:	e706      	b.n	8370 <tcc_init+0x30>
    8562:	00f6      	lsls	r6, r6, #3
    8564:	2302      	movs	r3, #2
    8566:	e703      	b.n	8370 <tcc_init+0x30>
			if (i > _tcc_cc_nums[module_index]) {
    8568:	9b02      	ldr	r3, [sp, #8]
    856a:	42b3      	cmp	r3, r6
    856c:	da00      	bge.n	8570 <tcc_init+0x230>
    856e:	e718      	b.n	83a2 <tcc_init+0x62>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    8570:	4647      	mov	r7, r8
    8572:	40b7      	lsls	r7, r6
    8574:	9b01      	ldr	r3, [sp, #4]
    8576:	433b      	orrs	r3, r7
    8578:	9301      	str	r3, [sp, #4]
    857a:	e74e      	b.n	841a <tcc_init+0xda>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    857c:	2630      	movs	r6, #48	; 0x30
    857e:	7e6a      	ldrb	r2, [r5, #25]
    8580:	4641      	mov	r1, r8
    8582:	0112      	lsls	r2, r2, #4
    8584:	4016      	ands	r6, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    8586:	7e2a      	ldrb	r2, [r5, #24]
    8588:	4698      	mov	r8, r3
    858a:	4663      	mov	r3, ip
    858c:	4694      	mov	ip, r2
    858e:	2207      	movs	r2, #7
    8590:	4667      	mov	r7, ip
    8592:	403a      	ands	r2, r7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    8594:	4316      	orrs	r6, r2
    8596:	46b3      	mov	fp, r6
			wave |= (TCC_WAVE_POL0 << n);
    8598:	2680      	movs	r6, #128	; 0x80
    859a:	0276      	lsls	r6, r6, #9
    859c:	46b4      	mov	ip, r6
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    859e:	2200      	movs	r2, #0
    85a0:	465e      	mov	r6, fp
		if (wav_cfg->wave_polarity[n]) {
    85a2:	18af      	adds	r7, r5, r2
    85a4:	7d3f      	ldrb	r7, [r7, #20]
    85a6:	2f00      	cmp	r7, #0
    85a8:	d006      	beq.n	85b8 <tcc_init+0x278>
			if (n >= cc_num) {
    85aa:	9f02      	ldr	r7, [sp, #8]
    85ac:	4297      	cmp	r7, r2
    85ae:	dc00      	bgt.n	85b2 <tcc_init+0x272>
    85b0:	e6f7      	b.n	83a2 <tcc_init+0x62>
			wave |= (TCC_WAVE_POL0 << n);
    85b2:	4667      	mov	r7, ip
    85b4:	4097      	lsls	r7, r2
    85b6:	433e      	orrs	r6, r7
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    85b8:	3201      	adds	r2, #1
    85ba:	2a04      	cmp	r2, #4
    85bc:	d1f1      	bne.n	85a2 <tcc_init+0x262>
    85be:	46b3      	mov	fp, r6
    85c0:	2634      	movs	r6, #52	; 0x34
    85c2:	46b4      	mov	ip, r6
    85c4:	4484      	add	ip, r0
		module_inst->callback[i] = NULL;
    85c6:	2600      	movs	r6, #0
    85c8:	4667      	mov	r7, ip
    85ca:	1d02      	adds	r2, r0, #4
    85cc:	c240      	stmia	r2!, {r6}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    85ce:	42ba      	cmp	r2, r7
    85d0:	d1fc      	bne.n	85cc <tcc_init+0x28c>
	_tcc_instances[module_index] = module_inst;
    85d2:	4a2a      	ldr	r2, [pc, #168]	; (867c <tcc_init+0x33c>)
	module_inst->register_callback_mask = 0;
    85d4:	6346      	str	r6, [r0, #52]	; 0x34
	_tcc_instances[module_index] = module_inst;
    85d6:	5050      	str	r0, [r2, r1]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    85d8:	22a0      	movs	r2, #160	; 0xa0
	module_inst->enable_callback_mask = 0;
    85da:	6386      	str	r6, [r0, #56]	; 0x38
	module_inst->hw = hw;
    85dc:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    85de:	5ca9      	ldrb	r1, [r5, r2]
    85e0:	3a64      	subs	r2, #100	; 0x64
    85e2:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    85e4:	7aaa      	ldrb	r2, [r5, #10]
    85e6:	a90a      	add	r1, sp, #40	; 0x28
    85e8:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    85ea:	4a25      	ldr	r2, [pc, #148]	; (8680 <tcc_init+0x340>)
    85ec:	5cd6      	ldrb	r6, [r2, r3]
    85ee:	4b25      	ldr	r3, [pc, #148]	; (8684 <tcc_init+0x344>)
    85f0:	0030      	movs	r0, r6
    85f2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    85f4:	4b24      	ldr	r3, [pc, #144]	; (8688 <tcc_init+0x348>)
    85f6:	0030      	movs	r0, r6
    85f8:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    85fa:	4653      	mov	r3, sl
    85fc:	2b00      	cmp	r3, #0
    85fe:	d048      	beq.n	8692 <tcc_init+0x352>
    8600:	2358      	movs	r3, #88	; 0x58
    8602:	4699      	mov	r9, r3
    8604:	4653      	mov	r3, sl
    8606:	3398      	adds	r3, #152	; 0x98
    8608:	18eb      	adds	r3, r5, r3
    860a:	9308      	str	r3, [sp, #32]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    860c:	2301      	movs	r3, #1
    860e:	469a      	mov	sl, r3
		system_pinmux_pin_set_config(
    8610:	0023      	movs	r3, r4
    8612:	44a9      	add	r9, r5
    8614:	464c      	mov	r4, r9
    8616:	ae0b      	add	r6, sp, #44	; 0x2c
    8618:	9f05      	ldr	r7, [sp, #20]
    861a:	4699      	mov	r9, r3
    861c:	e004      	b.n	8628 <tcc_init+0x2e8>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    861e:	9b08      	ldr	r3, [sp, #32]
    8620:	3701      	adds	r7, #1
    8622:	3404      	adds	r4, #4
    8624:	429f      	cmp	r7, r3
    8626:	d033      	beq.n	8690 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    8628:	783b      	ldrb	r3, [r7, #0]
    862a:	2b00      	cmp	r3, #0
    862c:	d0f7      	beq.n	861e <tcc_init+0x2de>
    862e:	4653      	mov	r3, sl
    8630:	70b3      	strb	r3, [r6, #2]
	config->powersave    = false;
    8632:	2300      	movs	r3, #0
    8634:	70f3      	strb	r3, [r6, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    8636:	3320      	adds	r3, #32
    8638:	18e3      	adds	r3, r4, r3
    863a:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    863c:	7820      	ldrb	r0, [r4, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    863e:	7033      	strb	r3, [r6, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8640:	4653      	mov	r3, sl
		system_pinmux_pin_set_config(
    8642:	0031      	movs	r1, r6
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8644:	7073      	strb	r3, [r6, #1]
		system_pinmux_pin_set_config(
    8646:	4b11      	ldr	r3, [pc, #68]	; (868c <tcc_init+0x34c>)
    8648:	4798      	blx	r3
    864a:	e7e8      	b.n	861e <tcc_init+0x2de>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    864c:	2102      	movs	r1, #2
    864e:	31ff      	adds	r1, #255	; 0xff
    8650:	4091      	lsls	r1, r2
    8652:	430b      	orrs	r3, r1
    8654:	e76e      	b.n	8534 <tcc_init+0x1f4>
		ctrlb |= TCC_CTRLBSET_DIR;
    8656:	9f03      	ldr	r7, [sp, #12]
    8658:	4337      	orrs	r7, r6
    865a:	9703      	str	r7, [sp, #12]
    865c:	e6f3      	b.n	8446 <tcc_init+0x106>
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	42002000 	.word	0x42002000
    8664:	42002400 	.word	0x42002400
    8668:	42002800 	.word	0x42002800
    866c:	40000400 	.word	0x40000400
    8670:	00014d18 	.word	0x00014d18
    8674:	00014d24 	.word	0x00014d24
    8678:	00014d10 	.word	0x00014d10
    867c:	200009b8 	.word	0x200009b8
    8680:	00014d14 	.word	0x00014d14
    8684:	00010169 	.word	0x00010169
    8688:	000100e1 	.word	0x000100e1
    868c:	00010269 	.word	0x00010269
    8690:	464c      	mov	r4, r9
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8692:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    8694:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8696:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    8698:	0212      	lsls	r2, r2, #8
    869a:	4313      	orrs	r3, r2
    869c:	9a01      	ldr	r2, [sp, #4]
    869e:	4313      	orrs	r3, r2
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    86a0:	2204      	movs	r2, #4
	hw->CTRLA.reg = ctrla;
    86a2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    86a4:	68a3      	ldr	r3, [r4, #8]
    86a6:	421a      	tst	r2, r3
    86a8:	d1fc      	bne.n	86a4 <tcc_init+0x364>
	hw->CTRLBCLR.reg = 0xFF;
    86aa:	23ff      	movs	r3, #255	; 0xff
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    86ac:	2204      	movs	r2, #4
	hw->CTRLBCLR.reg = 0xFF;
    86ae:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    86b0:	68a3      	ldr	r3, [r4, #8]
    86b2:	421a      	tst	r2, r3
    86b4:	d1fc      	bne.n	86b0 <tcc_init+0x370>
	hw->CTRLBSET.reg = ctrlb;
    86b6:	466b      	mov	r3, sp
    86b8:	7b1b      	ldrb	r3, [r3, #12]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    86ba:	4a18      	ldr	r2, [pc, #96]	; (871c <tcc_init+0x3dc>)
	hw->CTRLBSET.reg = ctrlb;
    86bc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    86be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    86c0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    86c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86c4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    86c6:	4643      	mov	r3, r8
    86c8:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    86ca:	68a3      	ldr	r3, [r4, #8]
    86cc:	4213      	tst	r3, r2
    86ce:	d1fc      	bne.n	86ca <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    86d0:	465b      	mov	r3, fp
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    86d2:	2210      	movs	r2, #16
	hw->WAVE.reg = waves[0];
    86d4:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    86d6:	68a3      	ldr	r3, [r4, #8]
    86d8:	421a      	tst	r2, r3
    86da:	d1fc      	bne.n	86d6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    86dc:	682b      	ldr	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    86de:	4a10      	ldr	r2, [pc, #64]	; (8720 <tcc_init+0x3e0>)
	hw->COUNT.reg = config->counter.count;
    86e0:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    86e2:	68a3      	ldr	r3, [r4, #8]
    86e4:	4213      	tst	r3, r2
    86e6:	d1fc      	bne.n	86e2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    86e8:	686b      	ldr	r3, [r5, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    86ea:	2100      	movs	r1, #0
	hw->PER.reg = (config->counter.period);
    86ec:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    86ee:	9b02      	ldr	r3, [sp, #8]
    86f0:	2b00      	cmp	r3, #0
    86f2:	d010      	beq.n	8716 <tcc_init+0x3d6>
    86f4:	480b      	ldr	r0, [pc, #44]	; (8724 <tcc_init+0x3e4>)
    86f6:	9d04      	ldr	r5, [sp, #16]
    86f8:	0002      	movs	r2, r0
    86fa:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    86fc:	68a3      	ldr	r3, [r4, #8]
    86fe:	421a      	tst	r2, r3
    8700:	d1fc      	bne.n	86fc <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    8702:	000b      	movs	r3, r1
    8704:	3310      	adds	r3, #16
    8706:	cd04      	ldmia	r5!, {r2}
    8708:	009b      	lsls	r3, r3, #2
    870a:	18e3      	adds	r3, r4, r3
    870c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    870e:	9b02      	ldr	r3, [sp, #8]
    8710:	3101      	adds	r1, #1
    8712:	4299      	cmp	r1, r3
    8714:	dbf0      	blt.n	86f8 <tcc_init+0x3b8>
	return STATUS_OK;
    8716:	2200      	movs	r2, #0
    8718:	e632      	b.n	8380 <tcc_init+0x40>
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	00020040 	.word	0x00020040
    8720:	00040080 	.word	0x00040080
    8724:	00080100 	.word	0x00080100

00008728 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8728:	0092      	lsls	r2, r2, #2
    872a:	1883      	adds	r3, r0, r2
    872c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    872e:	4b03      	ldr	r3, [pc, #12]	; (873c <tcc_register_callback+0x14>)
    8730:	58d3      	ldr	r3, [r2, r3]
    8732:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8734:	4313      	orrs	r3, r2
    8736:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    8738:	2000      	movs	r0, #0
    873a:	4770      	bx	lr
    873c:	00014d28 	.word	0x00014d28

00008740 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    8740:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    8742:	4b0b      	ldr	r3, [pc, #44]	; (8770 <tcc_enable_callback+0x30>)
{
    8744:	0004      	movs	r4, r0
			_tcc_get_inst_index(module->hw)));
    8746:	6800      	ldr	r0, [r0, #0]
{
    8748:	000d      	movs	r5, r1
			_tcc_get_inst_index(module->hw)));
    874a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    874c:	221f      	movs	r2, #31
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    874e:	4b09      	ldr	r3, [pc, #36]	; (8774 <tcc_enable_callback+0x34>)

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    8750:	00ad      	lsls	r5, r5, #2
    8752:	5c1b      	ldrb	r3, [r3, r0]
    8754:	401a      	ands	r2, r3
    8756:	2301      	movs	r3, #1
    8758:	4093      	lsls	r3, r2
    875a:	4a07      	ldr	r2, [pc, #28]	; (8778 <tcc_enable_callback+0x38>)
    875c:	6013      	str	r3, [r2, #0]
    875e:	4b07      	ldr	r3, [pc, #28]	; (877c <tcc_enable_callback+0x3c>)
    8760:	58ea      	ldr	r2, [r5, r3]
    8762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8764:	4313      	orrs	r3, r2
    8766:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    8768:	6823      	ldr	r3, [r4, #0]
    876a:	629a      	str	r2, [r3, #40]	; 0x28
}
    876c:	bd70      	pop	{r4, r5, r6, pc}
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	000081ad 	.word	0x000081ad
    8774:	00014d58 	.word	0x00014d58
    8778:	e000e100 	.word	0xe000e100
    877c:	00014d28 	.word	0x00014d28

00008780 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    8780:	b5f0      	push	{r4, r5, r6, r7, lr}
    8782:	46c6      	mov	lr, r8
    8784:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    8786:	4b10      	ldr	r3, [pc, #64]	; (87c8 <_tcc_interrupt_handler+0x48>)
    8788:	0080      	lsls	r0, r0, #2
    878a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    878c:	2404      	movs	r4, #4
    878e:	683b      	ldr	r3, [r7, #0]
    8790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8792:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8796:	2501      	movs	r5, #1
    8798:	4013      	ands	r3, r2
    879a:	401e      	ands	r6, r3
    879c:	4b0b      	ldr	r3, [pc, #44]	; (87cc <_tcc_interrupt_handler+0x4c>)
    879e:	4698      	mov	r8, r3
    87a0:	e005      	b.n	87ae <_tcc_interrupt_handler+0x2e>
    87a2:	1d23      	adds	r3, r4, #4
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    87a4:	2b34      	cmp	r3, #52	; 0x34
    87a6:	d00c      	beq.n	87c2 <_tcc_interrupt_handler+0x42>
    87a8:	4642      	mov	r2, r8
    87aa:	5915      	ldr	r5, [r2, r4]
    87ac:	001c      	movs	r4, r3
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    87ae:	4235      	tst	r5, r6
    87b0:	d0f7      	beq.n	87a2 <_tcc_interrupt_handler+0x22>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    87b2:	593b      	ldr	r3, [r7, r4]
    87b4:	0038      	movs	r0, r7
    87b6:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    87b8:	683b      	ldr	r3, [r7, #0]
    87ba:	62dd      	str	r5, [r3, #44]	; 0x2c
    87bc:	1d23      	adds	r3, r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    87be:	2b34      	cmp	r3, #52	; 0x34
    87c0:	d1f2      	bne.n	87a8 <_tcc_interrupt_handler+0x28>
		}
	}
}
    87c2:	bc04      	pop	{r2}
    87c4:	4690      	mov	r8, r2
    87c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    87c8:	200009b8 	.word	0x200009b8
    87cc:	00014d28 	.word	0x00014d28

000087d0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    87d0:	b510      	push	{r4, lr}
    87d2:	2000      	movs	r0, #0
    87d4:	4b01      	ldr	r3, [pc, #4]	; (87dc <TCC0_Handler+0xc>)
    87d6:	4798      	blx	r3
    87d8:	bd10      	pop	{r4, pc}
    87da:	46c0      	nop			; (mov r8, r8)
    87dc:	00008781 	.word	0x00008781

000087e0 <TCC1_Handler>:
    87e0:	b510      	push	{r4, lr}
    87e2:	2001      	movs	r0, #1
    87e4:	4b01      	ldr	r3, [pc, #4]	; (87ec <TCC1_Handler+0xc>)
    87e6:	4798      	blx	r3
    87e8:	bd10      	pop	{r4, pc}
    87ea:	46c0      	nop			; (mov r8, r8)
    87ec:	00008781 	.word	0x00008781

000087f0 <TCC2_Handler>:
    87f0:	b510      	push	{r4, lr}
    87f2:	2002      	movs	r0, #2
    87f4:	4b01      	ldr	r3, [pc, #4]	; (87fc <TCC2_Handler+0xc>)
    87f6:	4798      	blx	r3
    87f8:	bd10      	pop	{r4, pc}
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	00008781 	.word	0x00008781

00008800 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    8800:	b5f0      	push	{r4, r5, r6, r7, lr}
    8802:	46c6      	mov	lr, r8
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    8804:	2541      	movs	r5, #65	; 0x41
{
    8806:	b500      	push	{lr}
    8808:	0004      	movs	r4, r0
	module->sending = 1;
    880a:	5d43      	ldrb	r3, [r0, r5]
    880c:	2001      	movs	r0, #1
    880e:	4303      	orrs	r3, r0

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    8810:	2000      	movs	r0, #0
	module->sending = 1;
    8812:	5563      	strb	r3, [r4, r5]
	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    8814:	b292      	uxth	r2, r2
    8816:	2300      	movs	r3, #0
    8818:	5620      	ldrsb	r0, [r4, r0]
    881a:	4f11      	ldr	r7, [pc, #68]	; (8860 <_http_client_send_wait+0x60>)
    881c:	47b8      	blx	r7
	module->sending = 1;
    881e:	2601      	movs	r6, #1
		module->sending = 0;
    8820:	5d63      	ldrb	r3, [r4, r5]
	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    8822:	2800      	cmp	r0, #0
    8824:	db18      	blt.n	8858 <_http_client_send_wait+0x58>
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    8826:	421e      	tst	r6, r3
    8828:	d012      	beq.n	8850 <_http_client_send_wait+0x50>
    882a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    882c:	2b02      	cmp	r3, #2
    882e:	d90f      	bls.n	8850 <_http_client_send_wait+0x50>
    8830:	4b0c      	ldr	r3, [pc, #48]	; (8864 <_http_client_send_wait+0x64>)
    8832:	4f0d      	ldr	r7, [pc, #52]	; (8868 <_http_client_send_wait+0x68>)
    8834:	4698      	mov	r8, r3
    8836:	2641      	movs	r6, #65	; 0x41
    8838:	2501      	movs	r5, #1
    883a:	e002      	b.n	8842 <_http_client_send_wait+0x42>
    883c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    883e:	2b02      	cmp	r3, #2
    8840:	d906      	bls.n	8850 <_http_client_send_wait+0x50>
		m2m_wifi_handle_events(NULL);
    8842:	2000      	movs	r0, #0
    8844:	47c0      	blx	r8
		sw_timer_task(module->config.timer_inst);
    8846:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8848:	47b8      	blx	r7
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    884a:	5da3      	ldrb	r3, [r4, r6]
    884c:	421d      	tst	r5, r3
    884e:	d1f5      	bne.n	883c <_http_client_send_wait+0x3c>
{
    8850:	2000      	movs	r0, #0
	}

	return 0;
}
    8852:	bc04      	pop	{r2}
    8854:	4690      	mov	r8, r2
    8856:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module->sending = 0;
    8858:	43b3      	bics	r3, r6
    885a:	5563      	strb	r3, [r4, r5]
		return result;
    885c:	e7f9      	b.n	8852 <_http_client_send_wait+0x52>
    885e:	46c0      	nop			; (mov r8, r8)
    8860:	0000dba1 	.word	0x0000dba1
    8864:	0000bf85 	.word	0x0000bf85
    8868:	00009931 	.word	0x00009931

0000886c <http_client_get_config_defaults>:
	config->port = 80;
    886c:	2350      	movs	r3, #80	; 0x50
    886e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8870:	2300      	movs	r3, #0
    8872:	7083      	strb	r3, [r0, #2]
	config->timer_inst = NULL;
    8874:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    8876:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    8878:	3301      	adds	r3, #1
    887a:	33ff      	adds	r3, #255	; 0xff
    887c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    887e:	3bae      	subs	r3, #174	; 0xae
	config->timeout = 20000;
    8880:	4a02      	ldr	r2, [pc, #8]	; (888c <http_client_get_config_defaults+0x20>)
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    8882:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    8884:	4b02      	ldr	r3, [pc, #8]	; (8890 <http_client_get_config_defaults+0x24>)
	config->timeout = 20000;
    8886:	8102      	strh	r2, [r0, #8]
	config->user_agent = DEFAULT_USER_AGENT;
    8888:	6183      	str	r3, [r0, #24]
}
    888a:	4770      	bx	lr
    888c:	00004e20 	.word	0x00004e20
    8890:	00014f20 	.word	0x00014f20

00008894 <http_client_init>:
{
    8894:	b570      	push	{r4, r5, r6, lr}
    8896:	0004      	movs	r4, r0
    8898:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    889a:	2800      	cmp	r0, #0
    889c:	d02c      	beq.n	88f8 <http_client_init+0x64>
    889e:	2900      	cmp	r1, #0
    88a0:	d02a      	beq.n	88f8 <http_client_init+0x64>
	if (config->recv_buffer_size == 0) {
    88a2:	690b      	ldr	r3, [r1, #16]
    88a4:	2b00      	cmp	r3, #0
    88a6:	d027      	beq.n	88f8 <http_client_init+0x64>
	if (config->timer_inst == NULL) {
    88a8:	684b      	ldr	r3, [r1, #4]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d024      	beq.n	88f8 <http_client_init+0x64>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    88ae:	694b      	ldr	r3, [r1, #20]
    88b0:	2b51      	cmp	r3, #81	; 0x51
    88b2:	d921      	bls.n	88f8 <http_client_init+0x64>
	memset(module, 0, sizeof(struct http_client_module));
    88b4:	22e8      	movs	r2, #232	; 0xe8
    88b6:	2100      	movs	r1, #0
    88b8:	4b18      	ldr	r3, [pc, #96]	; (891c <http_client_init+0x88>)
    88ba:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    88bc:	0020      	movs	r0, r4
    88be:	4b18      	ldr	r3, [pc, #96]	; (8920 <http_client_init+0x8c>)
    88c0:	221c      	movs	r2, #28
    88c2:	0029      	movs	r1, r5
    88c4:	3050      	adds	r0, #80	; 0x50
    88c6:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    88c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    88ca:	2b00      	cmp	r3, #0
    88cc:	d017      	beq.n	88fe <http_client_init+0x6a>
	if (config->timeout > 0) {
    88ce:	892b      	ldrh	r3, [r5, #8]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d105      	bne.n	88e0 <http_client_init+0x4c>
	module->req.state = STATE_INIT;
    88d4:	2300      	movs	r3, #0
	module->resp.state = STATE_PARSE_HEADER;
    88d6:	22d8      	movs	r2, #216	; 0xd8
	return 0;
    88d8:	2000      	movs	r0, #0
	module->req.state = STATE_INIT;
    88da:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    88dc:	50a3      	str	r3, [r4, r2]
}
    88de:	bd70      	pop	{r4, r5, r6, pc}
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    88e0:	6868      	ldr	r0, [r5, #4]
    88e2:	2300      	movs	r3, #0
    88e4:	0022      	movs	r2, r4
    88e6:	490f      	ldr	r1, [pc, #60]	; (8924 <http_client_init+0x90>)
    88e8:	4d0f      	ldr	r5, [pc, #60]	; (8928 <http_client_init+0x94>)
    88ea:	47a8      	blx	r5
    88ec:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    88ee:	2800      	cmp	r0, #0
    88f0:	daf0      	bge.n	88d4 <http_client_init+0x40>
			return -ENOSPC;
    88f2:	201c      	movs	r0, #28
    88f4:	4240      	negs	r0, r0
    88f6:	e7f2      	b.n	88de <http_client_init+0x4a>
		return -EINVAL;
    88f8:	2016      	movs	r0, #22
    88fa:	4240      	negs	r0, r0
    88fc:	e7ef      	b.n	88de <http_client_init+0x4a>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    88fe:	6928      	ldr	r0, [r5, #16]
    8900:	4b0a      	ldr	r3, [pc, #40]	; (892c <http_client_init+0x98>)
    8902:	4798      	blx	r3
    8904:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    8906:	2800      	cmp	r0, #0
    8908:	d005      	beq.n	8916 <http_client_init+0x82>
		module->alloc_buffer = 1;
    890a:	2241      	movs	r2, #65	; 0x41
    890c:	2104      	movs	r1, #4
    890e:	5ca3      	ldrb	r3, [r4, r2]
    8910:	430b      	orrs	r3, r1
    8912:	54a3      	strb	r3, [r4, r2]
    8914:	e7db      	b.n	88ce <http_client_init+0x3a>
			return -ENOMEM;
    8916:	200c      	movs	r0, #12
    8918:	4240      	negs	r0, r0
    891a:	e7e0      	b.n	88de <http_client_init+0x4a>
    891c:	000135cb 	.word	0x000135cb
    8920:	00013595 	.word	0x00013595
    8924:	00008a49 	.word	0x00008a49
    8928:	000098a9 	.word	0x000098a9
    892c:	0001356d 	.word	0x0001356d

00008930 <http_client_register_callback>:
	if (module == NULL) {
    8930:	2800      	cmp	r0, #0
    8932:	d002      	beq.n	893a <http_client_register_callback+0xa>
	module->cb = callback;
    8934:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    8936:	2000      	movs	r0, #0
}
    8938:	4770      	bx	lr
		return -EINVAL;
    893a:	2016      	movs	r0, #22
    893c:	4240      	negs	r0, r0
    893e:	e7fb      	b.n	8938 <http_client_register_callback+0x8>

00008940 <_http_client_clear_conn>:
	if (module->req.entity.close) {
    8940:	23c0      	movs	r3, #192	; 0xc0
{
    8942:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (module->req.entity.close) {
    8944:	58c3      	ldr	r3, [r0, r3]
{
    8946:	b085      	sub	sp, #20
    8948:	0004      	movs	r4, r0
    894a:	000f      	movs	r7, r1
	if (module->req.entity.close) {
    894c:	2b00      	cmp	r3, #0
    894e:	d002      	beq.n	8956 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    8950:	22c4      	movs	r2, #196	; 0xc4
    8952:	5880      	ldr	r0, [r0, r2]
    8954:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    8956:	0020      	movs	r0, r4
    8958:	2218      	movs	r2, #24
    895a:	2100      	movs	r1, #0
    895c:	30b0      	adds	r0, #176	; 0xb0
    895e:	4e16      	ldr	r6, [pc, #88]	; (89b8 <_http_client_clear_conn+0x78>)
    8960:	47b0      	blx	r6
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    8962:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8964:	2b00      	cmp	r3, #0
    8966:	d121      	bne.n	89ac <_http_client_clear_conn+0x6c>
	module_ref_inst[module->sock] = NULL;
    8968:	2300      	movs	r3, #0
    896a:	2500      	movs	r5, #0
	memset(&module->req, 0, sizeof(struct http_client_req));
    896c:	0020      	movs	r0, r4
	module_ref_inst[module->sock] = NULL;
    896e:	56e3      	ldrsb	r3, [r4, r3]
    8970:	4a12      	ldr	r2, [pc, #72]	; (89bc <_http_client_clear_conn+0x7c>)
    8972:	009b      	lsls	r3, r3, #2
    8974:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    8976:	2100      	movs	r1, #0
    8978:	226c      	movs	r2, #108	; 0x6c
    897a:	306c      	adds	r0, #108	; 0x6c
    897c:	47b0      	blx	r6
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    897e:	0020      	movs	r0, r4
    8980:	2210      	movs	r2, #16
    8982:	2100      	movs	r1, #0
    8984:	30d8      	adds	r0, #216	; 0xd8
    8986:	47b0      	blx	r6
	module->resp.state = STATE_PARSE_HEADER;
    8988:	23d8      	movs	r3, #216	; 0xd8
	module->sending = 0;
    898a:	2241      	movs	r2, #65	; 0x41
	module->permanent = 0;
    898c:	21fc      	movs	r1, #252	; 0xfc
	module->req.state = STATE_INIT;
    898e:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    8990:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    8992:	5ca3      	ldrb	r3, [r4, r2]
	data.disconnected.reason = reason;
    8994:	9701      	str	r7, [sp, #4]
	module->permanent = 0;
    8996:	400b      	ands	r3, r1
    8998:	54a3      	strb	r3, [r4, r2]
	if (module->cb) {
    899a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    899c:	2b00      	cmp	r3, #0
    899e:	d003      	beq.n	89a8 <_http_client_clear_conn+0x68>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    89a0:	aa01      	add	r2, sp, #4
    89a2:	39f8      	subs	r1, #248	; 0xf8
    89a4:	0020      	movs	r0, r4
    89a6:	4798      	blx	r3
}
    89a8:	b005      	add	sp, #20
    89aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    89ac:	2000      	movs	r0, #0
    89ae:	4b04      	ldr	r3, [pc, #16]	; (89c0 <_http_client_clear_conn+0x80>)
    89b0:	5620      	ldrsb	r0, [r4, r0]
    89b2:	4798      	blx	r3
    89b4:	e7d8      	b.n	8968 <_http_client_clear_conn+0x28>
    89b6:	46c0      	nop			; (mov r8, r8)
    89b8:	000135cb 	.word	0x000135cb
    89bc:	200003f0 	.word	0x200003f0
    89c0:	0000dc99 	.word	0x0000dc99

000089c4 <http_client_socket_resolve_handler>:
{
    89c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89c6:	4647      	mov	r7, r8
    89c8:	46ce      	mov	lr, r9
    89ca:	4c1b      	ldr	r4, [pc, #108]	; (8a38 <http_client_socket_resolve_handler+0x74>)
    89cc:	4680      	mov	r8, r0
    89ce:	0026      	movs	r6, r4
    89d0:	4689      	mov	r9, r1
    89d2:	b580      	push	{r7, lr}
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    89d4:	4f19      	ldr	r7, [pc, #100]	; (8a3c <http_client_socket_resolve_handler+0x78>)
{
    89d6:	b085      	sub	sp, #20
    89d8:	361c      	adds	r6, #28
		if (module_ref_inst[i] != NULL) {
    89da:	6825      	ldr	r5, [r4, #0]
    89dc:	2d00      	cmp	r5, #0
    89de:	d007      	beq.n	89f0 <http_client_socket_resolve_handler+0x2c>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    89e0:	1c69      	adds	r1, r5, #1
    89e2:	4640      	mov	r0, r8
    89e4:	47b8      	blx	r7
    89e6:	2800      	cmp	r0, #0
    89e8:	d102      	bne.n	89f0 <http_client_socket_resolve_handler+0x2c>
    89ea:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    89ec:	2b01      	cmp	r3, #1
    89ee:	d007      	beq.n	8a00 <http_client_socket_resolve_handler+0x3c>
    89f0:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    89f2:	42b4      	cmp	r4, r6
    89f4:	d1f1      	bne.n	89da <http_client_socket_resolve_handler+0x16>
}
    89f6:	b005      	add	sp, #20
    89f8:	bc0c      	pop	{r2, r3}
    89fa:	4690      	mov	r8, r2
    89fc:	4699      	mov	r9, r3
    89fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    8a00:	464b      	mov	r3, r9
    8a02:	2b00      	cmp	r3, #0
    8a04:	d105      	bne.n	8a12 <http_client_socket_resolve_handler+0x4e>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    8a06:	2176      	movs	r1, #118	; 0x76
    8a08:	0028      	movs	r0, r5
    8a0a:	4249      	negs	r1, r1
    8a0c:	4b0c      	ldr	r3, [pc, #48]	; (8a40 <http_client_socket_resolve_handler+0x7c>)
    8a0e:	4798      	blx	r3
					return;
    8a10:	e7f1      	b.n	89f6 <http_client_socket_resolve_handler+0x32>
				addr_in.sin_family = AF_INET;
    8a12:	466a      	mov	r2, sp
    8a14:	2302      	movs	r3, #2
    8a16:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    8a18:	334e      	adds	r3, #78	; 0x4e
    8a1a:	5aeb      	ldrh	r3, [r5, r3]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8a1c:	2000      	movs	r0, #0
				addr_in.sin_port = _htons(module->config.port);
    8a1e:	021a      	lsls	r2, r3, #8
    8a20:	0a1b      	lsrs	r3, r3, #8
    8a22:	4313      	orrs	r3, r2
    8a24:	466a      	mov	r2, sp
    8a26:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    8a28:	464b      	mov	r3, r9
    8a2a:	9301      	str	r3, [sp, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8a2c:	5628      	ldrsb	r0, [r5, r0]
    8a2e:	2210      	movs	r2, #16
    8a30:	4669      	mov	r1, sp
    8a32:	4b04      	ldr	r3, [pc, #16]	; (8a44 <http_client_socket_resolve_handler+0x80>)
    8a34:	4798      	blx	r3
				return;
    8a36:	e7de      	b.n	89f6 <http_client_socket_resolve_handler+0x32>
    8a38:	200003f0 	.word	0x200003f0
    8a3c:	00013a31 	.word	0x00013a31
    8a40:	00008941 	.word	0x00008941
    8a44:	0000db2d 	.word	0x0000db2d

00008a48 <http_client_timer_callback>:
{
    8a48:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    8a4a:	2a00      	cmp	r2, #0
    8a4c:	d004      	beq.n	8a58 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    8a4e:	213e      	movs	r1, #62	; 0x3e
    8a50:	0010      	movs	r0, r2
    8a52:	4249      	negs	r1, r1
    8a54:	4b01      	ldr	r3, [pc, #4]	; (8a5c <http_client_timer_callback+0x14>)
    8a56:	4798      	blx	r3
}
    8a58:	bd10      	pop	{r4, pc}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	00008941 	.word	0x00008941

00008a60 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    8a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a62:	4645      	mov	r5, r8
    8a64:	46de      	mov	lr, fp
    8a66:	4657      	mov	r7, sl
    8a68:	464e      	mov	r6, r9
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8a6a:	231c      	movs	r3, #28
{
    8a6c:	b5e0      	push	{r5, r6, r7, lr}
    8a6e:	0004      	movs	r4, r0
    8a70:	b093      	sub	sp, #76	; 0x4c
    8a72:	af02      	add	r7, sp, #8
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8a74:	2210      	movs	r2, #16
    8a76:	49c6      	ldr	r1, [pc, #792]	; (8d90 <_http_client_request+0x330>)
    8a78:	18f8      	adds	r0, r7, r3
    8a7a:	4bc6      	ldr	r3, [pc, #792]	; (8d94 <_http_client_request+0x334>)
    8a7c:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    8a7e:	4669      	mov	r1, sp
    8a80:	6e62      	ldr	r2, [r4, #100]	; 0x64
{
    8a82:	46e8      	mov	r8, sp
	char buffer[module->config.send_buffer_size];
    8a84:	1dd3      	adds	r3, r2, #7
    8a86:	08db      	lsrs	r3, r3, #3
    8a88:	00db      	lsls	r3, r3, #3
    8a8a:	1acb      	subs	r3, r1, r3
    8a8c:	469d      	mov	sp, r3

	if (module == NULL) {
		return;
	}

	if (module->sending != 0) {
    8a8e:	2341      	movs	r3, #65	; 0x41
    8a90:	5ce1      	ldrb	r1, [r4, r3]
    8a92:	3b40      	subs	r3, #64	; 0x40
	char buffer[module->config.send_buffer_size];
    8a94:	ad02      	add	r5, sp, #8
	if (module->sending != 0) {
    8a96:	400b      	ands	r3, r1
    8a98:	d127      	bne.n	8aea <_http_client_request+0x8a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    8a9a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    8a9c:	2903      	cmp	r1, #3
    8a9e:	d02d      	beq.n	8afc <_http_client_request+0x9c>
    8aa0:	2904      	cmp	r1, #4
    8aa2:	d122      	bne.n	8aea <_http_client_request+0x8a>
		stream_writer_send_remain(&writer);

		module->req.state = STATE_REQ_SEND_ENTITY;
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    8aa4:	26cc      	movs	r6, #204	; 0xcc
    8aa6:	59a2      	ldr	r2, [r4, r6]
    8aa8:	2a00      	cmp	r2, #0
    8aaa:	da00      	bge.n	8aae <_http_client_request+0x4e>
    8aac:	e0d0      	b.n	8c50 <_http_client_request+0x1f0>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    8aae:	d012      	beq.n	8ad6 <_http_client_request+0x76>
    8ab0:	0021      	movs	r1, r4
    8ab2:	31b0      	adds	r1, #176	; 0xb0
    8ab4:	68cb      	ldr	r3, [r1, #12]
    8ab6:	4699      	mov	r9, r3
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d00c      	beq.n	8ad6 <_http_client_request+0x76>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    8abc:	23d0      	movs	r3, #208	; 0xd0
    8abe:	469a      	mov	sl, r3
    8ac0:	58e3      	ldr	r3, [r4, r3]
    8ac2:	429a      	cmp	r2, r3
    8ac4:	dd00      	ble.n	8ac8 <_http_client_request+0x68>
    8ac6:	e10d      	b.n	8ce4 <_http_client_request+0x284>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    8ac8:	23c0      	movs	r3, #192	; 0xc0
    8aca:	58e3      	ldr	r3, [r4, r3]
    8acc:	2b00      	cmp	r3, #0
    8ace:	d002      	beq.n	8ad6 <_http_client_request+0x76>
					module->req.entity.close(module->req.entity.priv_data);
    8ad0:	22c4      	movs	r2, #196	; 0xc4
    8ad2:	58a0      	ldr	r0, [r4, r2]
    8ad4:	4798      	blx	r3
				}
				module->req.sent_length += size;
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    8ad6:	2302      	movs	r3, #2
    8ad8:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    8ada:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8adc:	2b00      	cmp	r3, #0
    8ade:	d004      	beq.n	8aea <_http_client_request+0x8a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    8ae0:	2210      	movs	r2, #16
    8ae2:	2101      	movs	r1, #1
    8ae4:	18ba      	adds	r2, r7, r2
    8ae6:	0020      	movs	r0, r4
    8ae8:	4798      	blx	r3
    8aea:	46c5      	mov	sp, r8
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    8aec:	46bd      	mov	sp, r7
    8aee:	b011      	add	sp, #68	; 0x44
    8af0:	bc3c      	pop	{r2, r3, r4, r5}
    8af2:	4690      	mov	r8, r2
    8af4:	4699      	mov	r9, r3
    8af6:	46a2      	mov	sl, r4
    8af8:	46ab      	mov	fp, r5
    8afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module->req.content_length = 0;
    8afc:	21cc      	movs	r1, #204	; 0xcc
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    8afe:	202c      	movs	r0, #44	; 0x2c
		module->req.content_length = 0;
    8b00:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    8b02:	3104      	adds	r1, #4
    8b04:	5063      	str	r3, [r4, r1]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    8b06:	1838      	adds	r0, r7, r0
    8b08:	4ba3      	ldr	r3, [pc, #652]	; (8d98 <_http_client_request+0x338>)
    8b0a:	9400      	str	r4, [sp, #0]
    8b0c:	0029      	movs	r1, r5
    8b0e:	4ea3      	ldr	r6, [pc, #652]	; (8d9c <_http_client_request+0x33c>)
    8b10:	47b0      	blx	r6
		if (module->req.method == HTTP_METHOD_GET) {
    8b12:	23c8      	movs	r3, #200	; 0xc8
    8b14:	5ce3      	ldrb	r3, [r4, r3]
    8b16:	2b01      	cmp	r3, #1
    8b18:	d100      	bne.n	8b1c <_http_client_request+0xbc>
    8b1a:	e109      	b.n	8d30 <_http_client_request+0x2d0>
		} else if (module->req.method == HTTP_METHOD_POST) {
    8b1c:	2b02      	cmp	r3, #2
    8b1e:	d100      	bne.n	8b22 <_http_client_request+0xc2>
    8b20:	e113      	b.n	8d4a <_http_client_request+0x2ea>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    8b22:	2b03      	cmp	r3, #3
    8b24:	d100      	bne.n	8b28 <_http_client_request+0xc8>
    8b26:	e117      	b.n	8d58 <_http_client_request+0x2f8>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    8b28:	2b04      	cmp	r3, #4
    8b2a:	d100      	bne.n	8b2e <_http_client_request+0xce>
    8b2c:	e11b      	b.n	8d66 <_http_client_request+0x306>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    8b2e:	2b05      	cmp	r3, #5
    8b30:	d100      	bne.n	8b34 <_http_client_request+0xd4>
    8b32:	e11f      	b.n	8d74 <_http_client_request+0x314>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    8b34:	2b06      	cmp	r3, #6
    8b36:	d100      	bne.n	8b3a <_http_client_request+0xda>
    8b38:	e123      	b.n	8d82 <_http_client_request+0x322>
    8b3a:	4e99      	ldr	r6, [pc, #612]	; (8da0 <_http_client_request+0x340>)
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    8b3c:	2370      	movs	r3, #112	; 0x70
    8b3e:	469a      	mov	sl, r3
    8b40:	4b98      	ldr	r3, [pc, #608]	; (8da4 <_http_client_request+0x344>)
    8b42:	44a2      	add	sl, r4
    8b44:	4650      	mov	r0, sl
    8b46:	4699      	mov	r9, r3
    8b48:	4798      	blx	r3
    8b4a:	232c      	movs	r3, #44	; 0x2c
    8b4c:	0002      	movs	r2, r0
    8b4e:	4651      	mov	r1, sl
    8b50:	18f8      	adds	r0, r7, r3
    8b52:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    8b54:	232c      	movs	r3, #44	; 0x2c
    8b56:	220b      	movs	r2, #11
    8b58:	18f8      	adds	r0, r7, r3
    8b5a:	4993      	ldr	r1, [pc, #588]	; (8da8 <_http_client_request+0x348>)
    8b5c:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    8b5e:	232c      	movs	r3, #44	; 0x2c
    8b60:	220c      	movs	r2, #12
    8b62:	4992      	ldr	r1, [pc, #584]	; (8dac <_http_client_request+0x34c>)
    8b64:	18f8      	adds	r0, r7, r3
    8b66:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    8b68:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8b6a:	0018      	movs	r0, r3
    8b6c:	469a      	mov	sl, r3
    8b6e:	47c8      	blx	r9
    8b70:	232c      	movs	r3, #44	; 0x2c
    8b72:	0002      	movs	r2, r0
    8b74:	4651      	mov	r1, sl
    8b76:	18f8      	adds	r0, r7, r3
    8b78:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8b7a:	4b8d      	ldr	r3, [pc, #564]	; (8db0 <_http_client_request+0x350>)
    8b7c:	2202      	movs	r2, #2
    8b7e:	0019      	movs	r1, r3
    8b80:	469a      	mov	sl, r3
    8b82:	232c      	movs	r3, #44	; 0x2c
    8b84:	18f8      	adds	r0, r7, r3
    8b86:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    8b88:	232c      	movs	r3, #44	; 0x2c
    8b8a:	2206      	movs	r2, #6
    8b8c:	4989      	ldr	r1, [pc, #548]	; (8db4 <_http_client_request+0x354>)
    8b8e:	18f8      	adds	r0, r7, r3
    8b90:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    8b92:	1c63      	adds	r3, r4, #1
    8b94:	0018      	movs	r0, r3
    8b96:	469b      	mov	fp, r3
    8b98:	47c8      	blx	r9
    8b9a:	232c      	movs	r3, #44	; 0x2c
    8b9c:	0002      	movs	r2, r0
    8b9e:	4659      	mov	r1, fp
    8ba0:	18f8      	adds	r0, r7, r3
    8ba2:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8ba4:	232c      	movs	r3, #44	; 0x2c
    8ba6:	2202      	movs	r2, #2
    8ba8:	18f8      	adds	r0, r7, r3
    8baa:	4651      	mov	r1, sl
    8bac:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    8bae:	232c      	movs	r3, #44	; 0x2c
    8bb0:	2218      	movs	r2, #24
    8bb2:	18f8      	adds	r0, r7, r3
    8bb4:	4980      	ldr	r1, [pc, #512]	; (8db8 <_http_client_request+0x358>)
    8bb6:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    8bb8:	232c      	movs	r3, #44	; 0x2c
    8bba:	2213      	movs	r2, #19
    8bbc:	18f8      	adds	r0, r7, r3
    8bbe:	497f      	ldr	r1, [pc, #508]	; (8dbc <_http_client_request+0x35c>)
    8bc0:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    8bc2:	232c      	movs	r3, #44	; 0x2c
    8bc4:	2217      	movs	r2, #23
    8bc6:	18f8      	adds	r0, r7, r3
    8bc8:	497d      	ldr	r1, [pc, #500]	; (8dc0 <_http_client_request+0x360>)
    8bca:	47b0      	blx	r6
		if (entity->read != NULL) {
    8bcc:	0023      	movs	r3, r4
    8bce:	33b0      	adds	r3, #176	; 0xb0
    8bd0:	68da      	ldr	r2, [r3, #12]
    8bd2:	2a00      	cmp	r2, #0
    8bd4:	d024      	beq.n	8c20 <_http_client_request+0x1c0>
			if (entity->is_chunked) {
    8bd6:	22b0      	movs	r2, #176	; 0xb0
    8bd8:	5ca2      	ldrb	r2, [r4, r2]
    8bda:	4693      	mov	fp, r2
    8bdc:	2a00      	cmp	r2, #0
    8bde:	d000      	beq.n	8be2 <_http_client_request+0x182>
    8be0:	e09c      	b.n	8d1c <_http_client_request+0x2bc>
			} else if(entity->get_contents_length) {
    8be2:	689a      	ldr	r2, [r3, #8]
    8be4:	2a00      	cmp	r2, #0
    8be6:	d01b      	beq.n	8c20 <_http_client_request+0x1c0>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    8be8:	6958      	ldr	r0, [r3, #20]
    8bea:	4790      	blx	r2
    8bec:	23cc      	movs	r3, #204	; 0xcc
    8bee:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    8bf0:	2800      	cmp	r0, #0
    8bf2:	db63      	blt.n	8cbc <_http_client_request+0x25c>
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    8bf4:	0002      	movs	r2, r0
    8bf6:	4973      	ldr	r1, [pc, #460]	; (8dc4 <_http_client_request+0x364>)
    8bf8:	4b73      	ldr	r3, [pc, #460]	; (8dc8 <_http_client_request+0x368>)
    8bfa:	1d38      	adds	r0, r7, #4
    8bfc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    8bfe:	232c      	movs	r3, #44	; 0x2c
    8c00:	2210      	movs	r2, #16
    8c02:	18f8      	adds	r0, r7, r3
    8c04:	4971      	ldr	r1, [pc, #452]	; (8dcc <_http_client_request+0x36c>)
    8c06:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, length, strlen(length));
    8c08:	1d38      	adds	r0, r7, #4
    8c0a:	47c8      	blx	r9
    8c0c:	232c      	movs	r3, #44	; 0x2c
    8c0e:	0002      	movs	r2, r0
    8c10:	1d39      	adds	r1, r7, #4
    8c12:	18f8      	adds	r0, r7, r3
    8c14:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8c16:	232c      	movs	r3, #44	; 0x2c
    8c18:	2202      	movs	r2, #2
    8c1a:	4651      	mov	r1, sl
    8c1c:	18f8      	adds	r0, r7, r3
    8c1e:	47b0      	blx	r6
		if (module->req.ext_header != NULL ) {
    8c20:	23d4      	movs	r3, #212	; 0xd4
    8c22:	58e3      	ldr	r3, [r4, r3]
    8c24:	469b      	mov	fp, r3
    8c26:	2b00      	cmp	r3, #0
    8c28:	d006      	beq.n	8c38 <_http_client_request+0x1d8>
			stream_writer_send_buffer(&writer,
    8c2a:	0018      	movs	r0, r3
    8c2c:	47c8      	blx	r9
    8c2e:	232c      	movs	r3, #44	; 0x2c
    8c30:	0002      	movs	r2, r0
    8c32:	4659      	mov	r1, fp
    8c34:	18f8      	adds	r0, r7, r3
    8c36:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8c38:	232c      	movs	r3, #44	; 0x2c
    8c3a:	2202      	movs	r2, #2
    8c3c:	18f8      	adds	r0, r7, r3
    8c3e:	4651      	mov	r1, sl
    8c40:	47b0      	blx	r6
		stream_writer_send_remain(&writer);
    8c42:	232c      	movs	r3, #44	; 0x2c
    8c44:	18f8      	adds	r0, r7, r3
    8c46:	4b62      	ldr	r3, [pc, #392]	; (8dd0 <_http_client_request+0x370>)
    8c48:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    8c4a:	2304      	movs	r3, #4
    8c4c:	66e3      	str	r3, [r4, #108]	; 0x6c
    8c4e:	e729      	b.n	8aa4 <_http_client_request+0x44>
		if (module->req.content_length < 0 && entity->read) {
    8c50:	0020      	movs	r0, r4
    8c52:	30b0      	adds	r0, #176	; 0xb0
    8c54:	68c6      	ldr	r6, [r0, #12]
    8c56:	2e00      	cmp	r6, #0
    8c58:	d100      	bne.n	8c5c <_http_client_request+0x1fc>
    8c5a:	e73c      	b.n	8ad6 <_http_client_request+0x76>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    8c5c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    8c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8c60:	58e3      	ldr	r3, [r4, r3]
    8c62:	3a07      	subs	r2, #7
    8c64:	1d69      	adds	r1, r5, #5
    8c66:	6940      	ldr	r0, [r0, #20]
    8c68:	47b0      	blx	r6
    8c6a:	43c3      	mvns	r3, r0
    8c6c:	0006      	movs	r6, r0
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    8c6e:	220a      	movs	r2, #10
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    8c70:	210d      	movs	r1, #13
    8c72:	17db      	asrs	r3, r3, #31
    8c74:	401e      	ands	r6, r3
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    8c76:	19ab      	adds	r3, r5, r6
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    8c78:	712a      	strb	r2, [r5, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    8c7a:	70e9      	strb	r1, [r5, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    8c7c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    8c7e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    8c80:	230f      	movs	r3, #15
    8c82:	001a      	movs	r2, r3
    8c84:	310f      	adds	r1, #15
    8c86:	1879      	adds	r1, r7, r1
    8c88:	4032      	ands	r2, r6
    8c8a:	5c8a      	ldrb	r2, [r1, r2]
				ptr = buffer + 2;
    8c8c:	1ca9      	adds	r1, r5, #2
				*ptr = CH_LUT[size % 16];
    8c8e:	70aa      	strb	r2, [r5, #2]
			if (size >= 0x10) {
    8c90:	2e0f      	cmp	r6, #15
    8c92:	dc16      	bgt.n	8cc2 <_http_client_request+0x262>
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    8c94:	2000      	movs	r0, #0
    8c96:	1cca      	adds	r2, r1, #3
    8c98:	1b52      	subs	r2, r2, r5
    8c9a:	1d33      	adds	r3, r6, #4
    8c9c:	18d2      	adds	r2, r2, r3
    8c9e:	b292      	uxth	r2, r2
    8ca0:	5620      	ldrsb	r0, [r4, r0]
    8ca2:	2300      	movs	r3, #0
    8ca4:	4d4b      	ldr	r5, [pc, #300]	; (8dd4 <_http_client_request+0x374>)
    8ca6:	47a8      	blx	r5
    8ca8:	2800      	cmp	r0, #0
    8caa:	db48      	blt.n	8d3e <_http_client_request+0x2de>
			module->req.sent_length += size;
    8cac:	22d0      	movs	r2, #208	; 0xd0
    8cae:	58a3      	ldr	r3, [r4, r2]
    8cb0:	199b      	adds	r3, r3, r6
    8cb2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    8cb4:	2e00      	cmp	r6, #0
    8cb6:	d100      	bne.n	8cba <_http_client_request+0x25a>
    8cb8:	e706      	b.n	8ac8 <_http_client_request+0x68>
    8cba:	e716      	b.n	8aea <_http_client_request+0x8a>
					module->req.content_length = 0;
    8cbc:	465a      	mov	r2, fp
    8cbe:	50e2      	str	r2, [r4, r3]
    8cc0:	e7ae      	b.n	8c20 <_http_client_request+0x1c0>
				*ptr = CH_LUT[(size / 0x10) % 16];
    8cc2:	211c      	movs	r1, #28
    8cc4:	1132      	asrs	r2, r6, #4
    8cc6:	1879      	adds	r1, r7, r1
    8cc8:	401a      	ands	r2, r3
    8cca:	5c8a      	ldrb	r2, [r1, r2]
				ptr = buffer + 1;
    8ccc:	1c69      	adds	r1, r5, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    8cce:	706a      	strb	r2, [r5, #1]
			if (size >= 0x100) {
    8cd0:	2eff      	cmp	r6, #255	; 0xff
    8cd2:	dddf      	ble.n	8c94 <_http_client_request+0x234>
				*ptr = CH_LUT[(size / 0x100) % 16];
    8cd4:	1232      	asrs	r2, r6, #8
    8cd6:	4013      	ands	r3, r2
    8cd8:	221c      	movs	r2, #28
    8cda:	18ba      	adds	r2, r7, r2
    8cdc:	5cd3      	ldrb	r3, [r2, r3]
    8cde:	0029      	movs	r1, r5
    8ce0:	702b      	strb	r3, [r5, #0]
    8ce2:	e7d7      	b.n	8c94 <_http_client_request+0x234>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    8ce4:	6948      	ldr	r0, [r1, #20]
    8ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8ce8:	0029      	movs	r1, r5
    8cea:	47c8      	blx	r9
			if (size < 0) {
    8cec:	2800      	cmp	r0, #0
    8cee:	db26      	blt.n	8d3e <_http_client_request+0x2de>
				if (size > module->req.content_length - module->req.sent_length) {
    8cf0:	4653      	mov	r3, sl
    8cf2:	59a6      	ldr	r6, [r4, r6]
    8cf4:	58e3      	ldr	r3, [r4, r3]
    8cf6:	1af6      	subs	r6, r6, r3
    8cf8:	4286      	cmp	r6, r0
    8cfa:	dd00      	ble.n	8cfe <_http_client_request+0x29e>
    8cfc:	0006      	movs	r6, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    8cfe:	2000      	movs	r0, #0
    8d00:	0029      	movs	r1, r5
    8d02:	b2b2      	uxth	r2, r6
    8d04:	5620      	ldrsb	r0, [r4, r0]
    8d06:	2300      	movs	r3, #0
    8d08:	4d32      	ldr	r5, [pc, #200]	; (8dd4 <_http_client_request+0x374>)
    8d0a:	47a8      	blx	r5
    8d0c:	2800      	cmp	r0, #0
    8d0e:	db16      	blt.n	8d3e <_http_client_request+0x2de>
				module->req.sent_length += size;
    8d10:	23d0      	movs	r3, #208	; 0xd0
    8d12:	58e2      	ldr	r2, [r4, r3]
    8d14:	4694      	mov	ip, r2
    8d16:	4466      	add	r6, ip
    8d18:	50e6      	str	r6, [r4, r3]
    8d1a:	e6e6      	b.n	8aea <_http_client_request+0x8a>
				module->req.content_length = -1;
    8d1c:	2201      	movs	r2, #1
    8d1e:	23cc      	movs	r3, #204	; 0xcc
    8d20:	4252      	negs	r2, r2
    8d22:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    8d24:	3ba0      	subs	r3, #160	; 0xa0
    8d26:	321d      	adds	r2, #29
    8d28:	492b      	ldr	r1, [pc, #172]	; (8dd8 <_http_client_request+0x378>)
    8d2a:	18f8      	adds	r0, r7, r3
    8d2c:	47b0      	blx	r6
    8d2e:	e777      	b.n	8c20 <_http_client_request+0x1c0>
			stream_writer_send_buffer(&writer, "GET ", 4);
    8d30:	332b      	adds	r3, #43	; 0x2b
    8d32:	2204      	movs	r2, #4
    8d34:	4929      	ldr	r1, [pc, #164]	; (8ddc <_http_client_request+0x37c>)
    8d36:	18f8      	adds	r0, r7, r3
    8d38:	4e19      	ldr	r6, [pc, #100]	; (8da0 <_http_client_request+0x340>)
    8d3a:	47b0      	blx	r6
    8d3c:	e6fe      	b.n	8b3c <_http_client_request+0xdc>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    8d3e:	2105      	movs	r1, #5
    8d40:	0020      	movs	r0, r4
    8d42:	4249      	negs	r1, r1
    8d44:	4b26      	ldr	r3, [pc, #152]	; (8de0 <_http_client_request+0x380>)
    8d46:	4798      	blx	r3
    8d48:	e6cf      	b.n	8aea <_http_client_request+0x8a>
			stream_writer_send_buffer(&writer, "POST ", 5);
    8d4a:	332a      	adds	r3, #42	; 0x2a
    8d4c:	2205      	movs	r2, #5
    8d4e:	4925      	ldr	r1, [pc, #148]	; (8de4 <_http_client_request+0x384>)
    8d50:	18f8      	adds	r0, r7, r3
    8d52:	4e13      	ldr	r6, [pc, #76]	; (8da0 <_http_client_request+0x340>)
    8d54:	47b0      	blx	r6
    8d56:	e6f1      	b.n	8b3c <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    8d58:	3329      	adds	r3, #41	; 0x29
    8d5a:	2207      	movs	r2, #7
    8d5c:	4922      	ldr	r1, [pc, #136]	; (8de8 <_http_client_request+0x388>)
    8d5e:	18f8      	adds	r0, r7, r3
    8d60:	4e0f      	ldr	r6, [pc, #60]	; (8da0 <_http_client_request+0x340>)
    8d62:	47b0      	blx	r6
    8d64:	e6ea      	b.n	8b3c <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    8d66:	3328      	adds	r3, #40	; 0x28
    8d68:	2204      	movs	r2, #4
    8d6a:	4920      	ldr	r1, [pc, #128]	; (8dec <_http_client_request+0x38c>)
    8d6c:	18f8      	adds	r0, r7, r3
    8d6e:	4e0c      	ldr	r6, [pc, #48]	; (8da0 <_http_client_request+0x340>)
    8d70:	47b0      	blx	r6
    8d72:	e6e3      	b.n	8b3c <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    8d74:	3327      	adds	r3, #39	; 0x27
    8d76:	2208      	movs	r2, #8
    8d78:	491d      	ldr	r1, [pc, #116]	; (8df0 <_http_client_request+0x390>)
    8d7a:	18f8      	adds	r0, r7, r3
    8d7c:	4e08      	ldr	r6, [pc, #32]	; (8da0 <_http_client_request+0x340>)
    8d7e:	47b0      	blx	r6
    8d80:	e6dc      	b.n	8b3c <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    8d82:	232c      	movs	r3, #44	; 0x2c
    8d84:	2205      	movs	r2, #5
    8d86:	491b      	ldr	r1, [pc, #108]	; (8df4 <_http_client_request+0x394>)
    8d88:	18f8      	adds	r0, r7, r3
    8d8a:	4e05      	ldr	r6, [pc, #20]	; (8da0 <_http_client_request+0x340>)
    8d8c:	47b0      	blx	r6
    8d8e:	e6d5      	b.n	8b3c <_http_client_request+0xdc>
    8d90:	00014e08 	.word	0x00014e08
    8d94:	00013595 	.word	0x00013595
    8d98:	00008801 	.word	0x00008801
    8d9c:	00009759 	.word	0x00009759
    8da0:	00009795 	.word	0x00009795
    8da4:	00013a8f 	.word	0x00013a8f
    8da8:	00014e7c 	.word	0x00014e7c
    8dac:	00014e88 	.word	0x00014e88
    8db0:	00015140 	.word	0x00015140
    8db4:	00014e98 	.word	0x00014e98
    8db8:	00014ea0 	.word	0x00014ea0
    8dbc:	00014ebc 	.word	0x00014ebc
    8dc0:	00014ed0 	.word	0x00014ed0
    8dc4:	00014f08 	.word	0x00014f08
    8dc8:	000139ed 	.word	0x000139ed
    8dcc:	00014f0c 	.word	0x00014f0c
    8dd0:	000097b9 	.word	0x000097b9
    8dd4:	0000dba1 	.word	0x0000dba1
    8dd8:	00014ee8 	.word	0x00014ee8
    8ddc:	00014e48 	.word	0x00014e48
    8de0:	00008941 	.word	0x00008941
    8de4:	00014e50 	.word	0x00014e50
    8de8:	00014e58 	.word	0x00014e58
    8dec:	00014e60 	.word	0x00014e60
    8df0:	00014e68 	.word	0x00014e68
    8df4:	00014e74 	.word	0x00014e74

00008df8 <http_client_send_request>:
{
    8df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dfa:	464e      	mov	r6, r9
    8dfc:	4645      	mov	r5, r8
    8dfe:	46de      	mov	lr, fp
    8e00:	4657      	mov	r7, sl
    8e02:	b5e0      	push	{r5, r6, r7, lr}
    8e04:	b087      	sub	sp, #28
    8e06:	0005      	movs	r5, r0
    8e08:	000c      	movs	r4, r1
    8e0a:	9200      	str	r2, [sp, #0]
    8e0c:	4699      	mov	r9, r3
	if (module == NULL) {
    8e0e:	2800      	cmp	r0, #0
    8e10:	d100      	bne.n	8e14 <http_client_send_request+0x1c>
    8e12:	e104      	b.n	901e <http_client_send_request+0x226>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    8e14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    8e16:	2b02      	cmp	r3, #2
    8e18:	d900      	bls.n	8e1c <http_client_send_request+0x24>
    8e1a:	e104      	b.n	9026 <http_client_send_request+0x22e>
	if (!strncmp(url, "http://", 7)) {
    8e1c:	4b8a      	ldr	r3, [pc, #552]	; (9048 <http_client_send_request+0x250>)
    8e1e:	2207      	movs	r2, #7
    8e20:	498a      	ldr	r1, [pc, #552]	; (904c <http_client_send_request+0x254>)
    8e22:	0020      	movs	r0, r4
    8e24:	4698      	mov	r8, r3
    8e26:	4798      	blx	r3
    8e28:	2800      	cmp	r0, #0
    8e2a:	d078      	beq.n	8f1e <http_client_send_request+0x126>
	} else if (!strncmp(url, "https://", 8)) {
    8e2c:	2208      	movs	r2, #8
    8e2e:	4988      	ldr	r1, [pc, #544]	; (9050 <http_client_send_request+0x258>)
    8e30:	0020      	movs	r0, r4
    8e32:	47c0      	blx	r8
    8e34:	2800      	cmp	r0, #0
    8e36:	d100      	bne.n	8e3a <http_client_send_request+0x42>
    8e38:	e0d1      	b.n	8fde <http_client_send_request+0x1e6>
	int i = 0, j = 0, reconnect = 0;
    8e3a:	2300      	movs	r3, #0
	} else if (!strncmp(url, "https://", 8)) {
    8e3c:	2600      	movs	r6, #0
	int i = 0, j = 0, reconnect = 0;
    8e3e:	9301      	str	r3, [sp, #4]
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8e40:	4b84      	ldr	r3, [pc, #528]	; (9054 <http_client_send_request+0x25c>)
    8e42:	1c6f      	adds	r7, r5, #1
    8e44:	0038      	movs	r0, r7
    8e46:	469b      	mov	fp, r3
    8e48:	4798      	blx	r3
    8e4a:	19a6      	adds	r6, r4, r6
    8e4c:	0002      	movs	r2, r0
    8e4e:	0031      	movs	r1, r6
    8e50:	0038      	movs	r0, r7
    8e52:	47c0      	blx	r8
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8e54:	7833      	ldrb	r3, [r6, #0]
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8e56:	4682      	mov	sl, r0
    8e58:	4680      	mov	r8, r0
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d100      	bne.n	8e60 <http_client_send_request+0x68>
    8e5e:	e0dc      	b.n	901a <http_client_send_request+0x222>
    8e60:	2b2f      	cmp	r3, #47	; 0x2f
    8e62:	d100      	bne.n	8e66 <http_client_send_request+0x6e>
    8e64:	e0d9      	b.n	901a <http_client_send_request+0x222>
    8e66:	9a01      	ldr	r2, [sp, #4]
    8e68:	3201      	adds	r2, #1
    8e6a:	18a4      	adds	r4, r4, r2
    8e6c:	2200      	movs	r2, #0
    8e6e:	e002      	b.n	8e76 <http_client_send_request+0x7e>
    8e70:	3401      	adds	r4, #1
    8e72:	2b2f      	cmp	r3, #47	; 0x2f
    8e74:	d005      	beq.n	8e82 <http_client_send_request+0x8a>
		module->host[j++] = url[i];
    8e76:	3201      	adds	r2, #1
    8e78:	54ab      	strb	r3, [r5, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8e7a:	7823      	ldrb	r3, [r4, #0]
    8e7c:	0026      	movs	r6, r4
    8e7e:	2b00      	cmp	r3, #0
    8e80:	d1f6      	bne.n	8e70 <http_client_send_request+0x78>
	module->host[j] = '\0';
    8e82:	2300      	movs	r3, #0
    8e84:	18aa      	adds	r2, r5, r2
    8e86:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    8e88:	786b      	ldrb	r3, [r5, #1]
    8e8a:	2b00      	cmp	r3, #0
    8e8c:	d100      	bne.n	8e90 <http_client_send_request+0x98>
    8e8e:	e0c6      	b.n	901e <http_client_send_request+0x226>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    8e90:	0030      	movs	r0, r6
    8e92:	47d8      	blx	fp
    8e94:	283f      	cmp	r0, #63	; 0x3f
    8e96:	d900      	bls.n	8e9a <http_client_send_request+0xa2>
    8e98:	e0c9      	b.n	902e <http_client_send_request+0x236>
	if (module->req.ext_header != NULL) {
    8e9a:	23d4      	movs	r3, #212	; 0xd4
    8e9c:	58e8      	ldr	r0, [r5, r3]
    8e9e:	2800      	cmp	r0, #0
    8ea0:	d001      	beq.n	8ea6 <http_client_send_request+0xae>
		free(module->req.ext_header);
    8ea2:	4b6d      	ldr	r3, [pc, #436]	; (9058 <http_client_send_request+0x260>)
    8ea4:	4798      	blx	r3
	if (ext_header != NULL) {
    8ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	d100      	bne.n	8eae <http_client_send_request+0xb6>
    8eac:	e093      	b.n	8fd6 <http_client_send_request+0x1de>
		module->req.ext_header = strdup(ext_header);
    8eae:	0018      	movs	r0, r3
    8eb0:	4b6a      	ldr	r3, [pc, #424]	; (905c <http_client_send_request+0x264>)
    8eb2:	4798      	blx	r3
    8eb4:	23d4      	movs	r3, #212	; 0xd4
    8eb6:	50e8      	str	r0, [r5, r3]
		if (module->req.ext_header == NULL) {
    8eb8:	2800      	cmp	r0, #0
    8eba:	d100      	bne.n	8ebe <http_client_send_request+0xc6>
    8ebc:	e0bf      	b.n	903e <http_client_send_request+0x246>
	module->sending = 0;
    8ebe:	2241      	movs	r2, #65	; 0x41
    8ec0:	2101      	movs	r1, #1
    8ec2:	5cab      	ldrb	r3, [r5, r2]
    8ec4:	438b      	bics	r3, r1
    8ec6:	54ab      	strb	r3, [r5, r2]
	module->recved_size = 0;
    8ec8:	2300      	movs	r3, #0
    8eca:	646b      	str	r3, [r5, #68]	; 0x44
	if (uri[0] == '/') {
    8ecc:	7833      	ldrb	r3, [r6, #0]
    8ece:	2b2f      	cmp	r3, #47	; 0x2f
    8ed0:	d100      	bne.n	8ed4 <http_client_send_request+0xdc>
    8ed2:	e09c      	b.n	900e <http_client_send_request+0x216>
		module->req.uri[0] = '/';
    8ed4:	2370      	movs	r3, #112	; 0x70
    8ed6:	222f      	movs	r2, #47	; 0x2f
    8ed8:	54ea      	strb	r2, [r5, r3]
		if (uri[0] != 0) {
    8eda:	7833      	ldrb	r3, [r6, #0]
    8edc:	2b00      	cmp	r3, #0
    8ede:	d000      	beq.n	8ee2 <http_client_send_request+0xea>
    8ee0:	e085      	b.n	8fee <http_client_send_request+0x1f6>
	if (entity != NULL) {
    8ee2:	464b      	mov	r3, r9
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8ee4:	2218      	movs	r2, #24
	if (entity != NULL) {
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d100      	bne.n	8eec <http_client_send_request+0xf4>
    8eea:	e08a      	b.n	9002 <http_client_send_request+0x20a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8eec:	0028      	movs	r0, r5
    8eee:	4649      	mov	r1, r9
    8ef0:	30b0      	adds	r0, #176	; 0xb0
    8ef2:	4b5b      	ldr	r3, [pc, #364]	; (9060 <http_client_send_request+0x268>)
    8ef4:	4798      	blx	r3
	module->req.method = method;
    8ef6:	466a      	mov	r2, sp
    8ef8:	23c8      	movs	r3, #200	; 0xc8
    8efa:	7812      	ldrb	r2, [r2, #0]
    8efc:	54ea      	strb	r2, [r5, r3]
	switch (module->req.state) {
    8efe:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8f00:	2b01      	cmp	r3, #1
    8f02:	d010      	beq.n	8f26 <http_client_send_request+0x12e>
    8f04:	2b00      	cmp	r3, #0
    8f06:	d015      	beq.n	8f34 <http_client_send_request+0x13c>
    8f08:	2b02      	cmp	r3, #2
    8f0a:	d16c      	bne.n	8fe6 <http_client_send_request+0x1ee>
		if (!reconnect) {
    8f0c:	4653      	mov	r3, sl
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d10c      	bne.n	8f2c <http_client_send_request+0x134>
			module->req.state = STATE_REQ_SEND_HEADER;
    8f12:	3303      	adds	r3, #3
    8f14:	66eb      	str	r3, [r5, #108]	; 0x6c
			_http_client_request(module);
    8f16:	0028      	movs	r0, r5
    8f18:	4b52      	ldr	r3, [pc, #328]	; (9064 <http_client_send_request+0x26c>)
    8f1a:	4798      	blx	r3
			break;
    8f1c:	e037      	b.n	8f8e <http_client_send_request+0x196>
		i = 7;
    8f1e:	2307      	movs	r3, #7
    8f20:	2607      	movs	r6, #7
    8f22:	9301      	str	r3, [sp, #4]
    8f24:	e78c      	b.n	8e40 <http_client_send_request+0x48>
		if (!reconnect) {
    8f26:	4653      	mov	r3, sl
    8f28:	2b00      	cmp	r3, #0
    8f2a:	d030      	beq.n	8f8e <http_client_send_request+0x196>
			_http_client_clear_conn(module, 0);
    8f2c:	2100      	movs	r1, #0
    8f2e:	0028      	movs	r0, r5
    8f30:	4b4d      	ldr	r3, [pc, #308]	; (9068 <http_client_send_request+0x270>)
    8f32:	4798      	blx	r3
		if (module->config.tls) {
    8f34:	2352      	movs	r3, #82	; 0x52
    8f36:	5cea      	ldrb	r2, [r5, r3]
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8f38:	2101      	movs	r1, #1
		if (module->config.tls) {
    8f3a:	1e53      	subs	r3, r2, #1
    8f3c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8f3e:	2002      	movs	r0, #2
    8f40:	b2d2      	uxtb	r2, r2
    8f42:	4b4a      	ldr	r3, [pc, #296]	; (906c <http_client_send_request+0x274>)
    8f44:	4798      	blx	r3
    8f46:	7028      	strb	r0, [r5, #0]
		if (module->sock >= 0) {
    8f48:	2800      	cmp	r0, #0
    8f4a:	da00      	bge.n	8f4e <http_client_send_request+0x156>
    8f4c:	e073      	b.n	9036 <http_client_send_request+0x23e>
			module_ref_inst[module->sock] = module;
    8f4e:	4b48      	ldr	r3, [pc, #288]	; (9070 <http_client_send_request+0x278>)
    8f50:	0080      	lsls	r0, r0, #2
    8f52:	50c5      	str	r5, [r0, r3]
    8f54:	0039      	movs	r1, r7
	uint32_t isv6 = 0;
    8f56:	2400      	movs	r4, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    8f58:	2020      	movs	r0, #32
		} else if ((ch & 0x30) != 0x30) {
    8f5a:	2630      	movs	r6, #48	; 0x30
	while (*host != '\0') {
    8f5c:	780a      	ldrb	r2, [r1, #0]
    8f5e:	2a00      	cmp	r2, #0
    8f60:	d021      	beq.n	8fa6 <http_client_send_request+0x1ae>
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    8f62:	0013      	movs	r3, r2
    8f64:	4383      	bics	r3, r0
    8f66:	3b41      	subs	r3, #65	; 0x41
		ch = *host++;
    8f68:	3101      	adds	r1, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    8f6a:	2b05      	cmp	r3, #5
    8f6c:	d917      	bls.n	8f9e <http_client_send_request+0x1a6>
    8f6e:	2a3a      	cmp	r2, #58	; 0x3a
    8f70:	d015      	beq.n	8f9e <http_client_send_request+0x1a6>
    8f72:	2a2f      	cmp	r2, #47	; 0x2f
    8f74:	d013      	beq.n	8f9e <http_client_send_request+0x1a6>
		} else if (ch == '.') {
    8f76:	2a2e      	cmp	r2, #46	; 0x2e
    8f78:	d02a      	beq.n	8fd0 <http_client_send_request+0x1d8>
		} else if ((ch & 0x30) != 0x30) {
    8f7a:	4032      	ands	r2, r6
    8f7c:	2a30      	cmp	r2, #48	; 0x30
    8f7e:	d0ed      	beq.n	8f5c <http_client_send_request+0x164>
				gethostbyname((uint8*)module->host);
    8f80:	0038      	movs	r0, r7
    8f82:	4b3c      	ldr	r3, [pc, #240]	; (9074 <http_client_send_request+0x27c>)
    8f84:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    8f86:	2301      	movs	r3, #1
    8f88:	66eb      	str	r3, [r5, #108]	; 0x6c
	return 0;
    8f8a:	2300      	movs	r3, #0
    8f8c:	4698      	mov	r8, r3
}
    8f8e:	4640      	mov	r0, r8
    8f90:	b007      	add	sp, #28
    8f92:	bc3c      	pop	{r2, r3, r4, r5}
    8f94:	4690      	mov	r8, r2
    8f96:	4699      	mov	r9, r3
    8f98:	46a2      	mov	sl, r4
    8f9a:	46ab      	mov	fp, r5
    8f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (*host != '\0') {
    8f9e:	780a      	ldrb	r2, [r1, #0]
			isv6 = 1;
    8fa0:	2401      	movs	r4, #1
	while (*host != '\0') {
    8fa2:	2a00      	cmp	r2, #0
    8fa4:	d1dd      	bne.n	8f62 <http_client_send_request+0x16a>
				addr_in.sin_family = AF_INET;
    8fa6:	2302      	movs	r3, #2
    8fa8:	aa02      	add	r2, sp, #8
    8faa:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    8fac:	334e      	adds	r3, #78	; 0x4e
    8fae:	5aeb      	ldrh	r3, [r5, r3]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    8fb0:	0038      	movs	r0, r7
				addr_in.sin_port = _htons(module->config.port);
    8fb2:	021a      	lsls	r2, r3, #8
    8fb4:	0a1b      	lsrs	r3, r3, #8
    8fb6:	4313      	orrs	r3, r2
    8fb8:	aa02      	add	r2, sp, #8
    8fba:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    8fbc:	4b2e      	ldr	r3, [pc, #184]	; (9078 <http_client_send_request+0x280>)
    8fbe:	4798      	blx	r3
    8fc0:	9003      	str	r0, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8fc2:	2000      	movs	r0, #0
    8fc4:	2210      	movs	r2, #16
    8fc6:	5628      	ldrsb	r0, [r5, r0]
    8fc8:	a902      	add	r1, sp, #8
    8fca:	4b2c      	ldr	r3, [pc, #176]	; (907c <http_client_send_request+0x284>)
    8fcc:	4798      	blx	r3
    8fce:	e7da      	b.n	8f86 <http_client_send_request+0x18e>
			if (isv6) {
    8fd0:	2c00      	cmp	r4, #0
    8fd2:	d0c3      	beq.n	8f5c <http_client_send_request+0x164>
    8fd4:	e7d4      	b.n	8f80 <http_client_send_request+0x188>
		module->req.ext_header = NULL;
    8fd6:	23d4      	movs	r3, #212	; 0xd4
    8fd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8fda:	50ea      	str	r2, [r5, r3]
    8fdc:	e76f      	b.n	8ebe <http_client_send_request+0xc6>
		i = 8;
    8fde:	2308      	movs	r3, #8
    8fe0:	2608      	movs	r6, #8
    8fe2:	9301      	str	r3, [sp, #4]
    8fe4:	e72c      	b.n	8e40 <http_client_send_request+0x48>
		return -EAGAIN;
    8fe6:	230b      	movs	r3, #11
    8fe8:	425b      	negs	r3, r3
    8fea:	4698      	mov	r8, r3
    8fec:	e7cf      	b.n	8f8e <http_client_send_request+0x196>
			strcpy(module->req.uri + 1, uri);
    8fee:	0028      	movs	r0, r5
    8ff0:	4b23      	ldr	r3, [pc, #140]	; (9080 <http_client_send_request+0x288>)
    8ff2:	0031      	movs	r1, r6
    8ff4:	3071      	adds	r0, #113	; 0x71
    8ff6:	4798      	blx	r3
	if (entity != NULL) {
    8ff8:	464b      	mov	r3, r9
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8ffa:	2218      	movs	r2, #24
	if (entity != NULL) {
    8ffc:	2b00      	cmp	r3, #0
    8ffe:	d000      	beq.n	9002 <http_client_send_request+0x20a>
    9000:	e774      	b.n	8eec <http_client_send_request+0xf4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    9002:	0028      	movs	r0, r5
    9004:	2100      	movs	r1, #0
    9006:	4b1f      	ldr	r3, [pc, #124]	; (9084 <http_client_send_request+0x28c>)
    9008:	30b0      	adds	r0, #176	; 0xb0
    900a:	4798      	blx	r3
    900c:	e773      	b.n	8ef6 <http_client_send_request+0xfe>
		strcpy(module->req.uri, uri);
    900e:	0028      	movs	r0, r5
    9010:	0031      	movs	r1, r6
    9012:	4b1b      	ldr	r3, [pc, #108]	; (9080 <http_client_send_request+0x288>)
    9014:	3070      	adds	r0, #112	; 0x70
    9016:	4798      	blx	r3
    9018:	e763      	b.n	8ee2 <http_client_send_request+0xea>
	int i = 0, j = 0, reconnect = 0;
    901a:	2200      	movs	r2, #0
    901c:	e731      	b.n	8e82 <http_client_send_request+0x8a>
		return -EINVAL;
    901e:	2316      	movs	r3, #22
    9020:	425b      	negs	r3, r3
    9022:	4698      	mov	r8, r3
    9024:	e7b3      	b.n	8f8e <http_client_send_request+0x196>
		return -EBUSY;
    9026:	2310      	movs	r3, #16
    9028:	425b      	negs	r3, r3
    902a:	4698      	mov	r8, r3
    902c:	e7af      	b.n	8f8e <http_client_send_request+0x196>
		return -ENAMETOOLONG;
    902e:	235b      	movs	r3, #91	; 0x5b
    9030:	425b      	negs	r3, r3
    9032:	4698      	mov	r8, r3
    9034:	e7ab      	b.n	8f8e <http_client_send_request+0x196>
			return -ENOSPC;
    9036:	231c      	movs	r3, #28
    9038:	425b      	negs	r3, r3
    903a:	4698      	mov	r8, r3
    903c:	e7a7      	b.n	8f8e <http_client_send_request+0x196>
			return -ENOMEM;
    903e:	230c      	movs	r3, #12
    9040:	425b      	negs	r3, r3
    9042:	4698      	mov	r8, r3
    9044:	e7a3      	b.n	8f8e <http_client_send_request+0x196>
    9046:	46c0      	nop			; (mov r8, r8)
    9048:	00013a9d 	.word	0x00013a9d
    904c:	00014f2c 	.word	0x00014f2c
    9050:	00014f34 	.word	0x00014f34
    9054:	00013a8f 	.word	0x00013a8f
    9058:	00013581 	.word	0x00013581
    905c:	00013a55 	.word	0x00013a55
    9060:	00013595 	.word	0x00013595
    9064:	00008a61 	.word	0x00008a61
    9068:	00008941 	.word	0x00008941
    906c:	0000da05 	.word	0x0000da05
    9070:	200003f0 	.word	0x200003f0
    9074:	0000dd81 	.word	0x0000dd81
    9078:	0000dd29 	.word	0x0000dd29
    907c:	0000db2d 	.word	0x0000db2d
    9080:	00013a45 	.word	0x00013a45
    9084:	000135cb 	.word	0x000135cb

00009088 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    9088:	b510      	push	{r4, lr}
	if (module == NULL) {
    908a:	2800      	cmp	r0, #0
    908c:	d00d      	beq.n	90aa <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    908e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    9090:	6e02      	ldr	r2, [r0, #96]	; 0x60
    9092:	4291      	cmp	r1, r2
    9094:	d20a      	bcs.n	90ac <_http_client_recv_packet+0x24>
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
		module->config.recv_buffer + module->recved_size,
    9096:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	recv(module->sock,
    9098:	7800      	ldrb	r0, [r0, #0]
		module->config.recv_buffer + module->recved_size,
    909a:	469c      	mov	ip, r3
	recv(module->sock,
    909c:	1a52      	subs	r2, r2, r1
    909e:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    90a0:	4461      	add	r1, ip
	recv(module->sock,
    90a2:	b240      	sxtb	r0, r0
    90a4:	2300      	movs	r3, #0
    90a6:	4c04      	ldr	r4, [pc, #16]	; (90b8 <_http_client_recv_packet+0x30>)
    90a8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    90aa:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    90ac:	218b      	movs	r1, #139	; 0x8b
    90ae:	4b03      	ldr	r3, [pc, #12]	; (90bc <_http_client_recv_packet+0x34>)
    90b0:	4249      	negs	r1, r1
    90b2:	4798      	blx	r3
		return;
    90b4:	e7f9      	b.n	90aa <_http_client_recv_packet+0x22>
    90b6:	46c0      	nop			; (mov r8, r8)
    90b8:	0000dc1d 	.word	0x0000dc1d
    90bc:	00008941 	.word	0x00008941

000090c0 <_http_client_handle_header>:
	}
	return 0;
}

int _http_client_handle_header(struct http_client_module *const module)
{
    90c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90c2:	4657      	mov	r7, sl
    90c4:	464e      	mov	r6, r9
    90c6:	4645      	mov	r5, r8
    90c8:	46de      	mov	lr, fp
    90ca:	b5e0      	push	{r5, r6, r7, lr}
    90cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    90ce:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    90d0:	4699      	mov	r9, r3
    90d2:	4b79      	ldr	r3, [pc, #484]	; (92b8 <_http_client_handle_header+0x1f8>)
{
    90d4:	b085      	sub	sp, #20
    90d6:	4698      	mov	r8, r3
    90d8:	0007      	movs	r7, r0
		ptr_line_end = strstr(ptr, new_line);
    90da:	4641      	mov	r1, r8
    90dc:	0020      	movs	r0, r4
    90de:	4b77      	ldr	r3, [pc, #476]	; (92bc <_http_client_handle_header+0x1fc>)
    90e0:	4798      	blx	r3
	for (ptr = module->config.recv_buffer ; ; ) {
    90e2:	46a2      	mov	sl, r4
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
			return 0;
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    90e4:	4e76      	ldr	r6, [pc, #472]	; (92c0 <_http_client_handle_header+0x200>)
		ptr_line_end = strstr(ptr, new_line);
    90e6:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    90e8:	d043      	beq.n	9172 <_http_client_handle_header+0xb2>
    90ea:	4653      	mov	r3, sl
    90ec:	444b      	add	r3, r9
    90ee:	4298      	cmp	r0, r3
    90f0:	d23f      	bcs.n	9172 <_http_client_handle_header+0xb2>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    90f2:	2202      	movs	r2, #2
    90f4:	4641      	mov	r1, r8
    90f6:	0020      	movs	r0, r4
    90f8:	47b0      	blx	r6
    90fa:	2800      	cmp	r0, #0
    90fc:	d100      	bne.n	9100 <_http_client_handle_header+0x40>
    90fe:	e0a4      	b.n	924a <_http_client_handle_header+0x18a>
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
			return 1;
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    9100:	2210      	movs	r2, #16
    9102:	4970      	ldr	r1, [pc, #448]	; (92c4 <_http_client_handle_header+0x204>)
    9104:	0020      	movs	r0, r4
    9106:	47b0      	blx	r6
    9108:	2800      	cmp	r0, #0
    910a:	d069      	beq.n	91e0 <_http_client_handle_header+0x120>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    910c:	2213      	movs	r2, #19
    910e:	496e      	ldr	r1, [pc, #440]	; (92c8 <_http_client_handle_header+0x208>)
    9110:	0020      	movs	r0, r4
    9112:	47b0      	blx	r6
    9114:	2800      	cmp	r0, #0
    9116:	d13a      	bne.n	918e <_http_client_handle_header+0xce>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    9118:	0022      	movs	r2, r4
    911a:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    911c:	4295      	cmp	r5, r2
    911e:	d921      	bls.n	9164 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    9120:	7ce3      	ldrb	r3, [r4, #19]
    9122:	2b20      	cmp	r3, #32
    9124:	d011      	beq.n	914a <_http_client_handle_header+0x8a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    9126:	2220      	movs	r2, #32
    9128:	4393      	bics	r3, r2
    912a:	2b43      	cmp	r3, #67	; 0x43
    912c:	d017      	beq.n	915e <_http_client_handle_header+0x9e>
					/* Chunked transfer */
					module->req.content_length = -1;
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
    912e:	2186      	movs	r1, #134	; 0x86
    9130:	4683      	mov	fp, r0
    9132:	4249      	negs	r1, r1
    9134:	0038      	movs	r0, r7
    9136:	4b65      	ldr	r3, [pc, #404]	; (92cc <_http_client_handle_header+0x20c>)
    9138:	4798      	blx	r3
			}
		}

		ptr = ptr_line_end + strlen(new_line);
	}
}
    913a:	4658      	mov	r0, fp
    913c:	b005      	add	sp, #20
    913e:	bc3c      	pop	{r2, r3, r4, r5}
    9140:	4690      	mov	r8, r2
    9142:	4699      	mov	r9, r3
    9144:	46a2      	mov	sl, r4
    9146:	46ab      	mov	fp, r5
    9148:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (; ptr_line_end > type_ptr; type_ptr++) {
    914a:	3201      	adds	r2, #1
    914c:	4295      	cmp	r5, r2
    914e:	d009      	beq.n	9164 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    9150:	7813      	ldrb	r3, [r2, #0]
    9152:	2b20      	cmp	r3, #32
    9154:	d0f9      	beq.n	914a <_http_client_handle_header+0x8a>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    9156:	2220      	movs	r2, #32
    9158:	4393      	bics	r3, r2
    915a:	2b43      	cmp	r3, #67	; 0x43
    915c:	d1e7      	bne.n	912e <_http_client_handle_header+0x6e>
					module->req.content_length = -1;
    915e:	3a21      	subs	r2, #33	; 0x21
    9160:	3389      	adds	r3, #137	; 0x89
    9162:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    9164:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    9166:	4641      	mov	r1, r8
    9168:	0020      	movs	r0, r4
    916a:	4b54      	ldr	r3, [pc, #336]	; (92bc <_http_client_handle_header+0x1fc>)
    916c:	4798      	blx	r3
    916e:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    9170:	d1bb      	bne.n	90ea <_http_client_handle_header+0x2a>
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
	char *buffer = module->config.recv_buffer;
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9172:	464b      	mov	r3, r9
    9174:	1b1d      	subs	r5, r3, r4
    9176:	4455      	add	r5, sl

	if (remain > 0) {
    9178:	2d00      	cmp	r5, #0
    917a:	dd62      	ble.n	9242 <_http_client_handle_header+0x182>
		memmove(buffer, base, remain);
    917c:	4b54      	ldr	r3, [pc, #336]	; (92d0 <_http_client_handle_header+0x210>)
    917e:	002a      	movs	r2, r5
    9180:	0021      	movs	r1, r4
    9182:	4650      	mov	r0, sl
    9184:	4798      	blx	r3
			return 0;
    9186:	2300      	movs	r3, #0
		module->recved_size = remain;
    9188:	647d      	str	r5, [r7, #68]	; 0x44
			return 0;
    918a:	469b      	mov	fp, r3
    918c:	e7d5      	b.n	913a <_http_client_handle_header+0x7a>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    918e:	220c      	movs	r2, #12
    9190:	4950      	ldr	r1, [pc, #320]	; (92d4 <_http_client_handle_header+0x214>)
    9192:	0020      	movs	r0, r4
    9194:	47b0      	blx	r6
    9196:	2800      	cmp	r0, #0
    9198:	d12e      	bne.n	91f8 <_http_client_handle_header+0x138>
			char *type_ptr = ptr + strlen("Connection: ");
    919a:	0022      	movs	r2, r4
    919c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    919e:	4295      	cmp	r5, r2
    91a0:	d9e0      	bls.n	9164 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    91a2:	7b23      	ldrb	r3, [r4, #12]
    91a4:	2b20      	cmp	r3, #32
    91a6:	d00a      	beq.n	91be <_http_client_handle_header+0xfe>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    91a8:	2220      	movs	r2, #32
    91aa:	4393      	bics	r3, r2
    91ac:	2b4b      	cmp	r3, #75	; 0x4b
    91ae:	d010      	beq.n	91d2 <_http_client_handle_header+0x112>
					module->permanent = 0;
    91b0:	2241      	movs	r2, #65	; 0x41
    91b2:	2102      	movs	r1, #2
    91b4:	5cbb      	ldrb	r3, [r7, r2]
		ptr = ptr_line_end + strlen(new_line);
    91b6:	1cac      	adds	r4, r5, #2
					module->permanent = 0;
    91b8:	438b      	bics	r3, r1
    91ba:	54bb      	strb	r3, [r7, r2]
    91bc:	e7d3      	b.n	9166 <_http_client_handle_header+0xa6>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    91be:	3201      	adds	r2, #1
    91c0:	4295      	cmp	r5, r2
    91c2:	d0cf      	beq.n	9164 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    91c4:	7813      	ldrb	r3, [r2, #0]
    91c6:	2b20      	cmp	r3, #32
    91c8:	d0f9      	beq.n	91be <_http_client_handle_header+0xfe>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    91ca:	2220      	movs	r2, #32
    91cc:	4393      	bics	r3, r2
    91ce:	2b4b      	cmp	r3, #75	; 0x4b
    91d0:	d1ee      	bne.n	91b0 <_http_client_handle_header+0xf0>
					module->permanent = 1;
    91d2:	2102      	movs	r1, #2
    91d4:	3221      	adds	r2, #33	; 0x21
    91d6:	5cbb      	ldrb	r3, [r7, r2]
		ptr = ptr_line_end + strlen(new_line);
    91d8:	1cac      	adds	r4, r5, #2
					module->permanent = 1;
    91da:	430b      	orrs	r3, r1
    91dc:	54bb      	strb	r3, [r7, r2]
    91de:	e7c2      	b.n	9166 <_http_client_handle_header+0xa6>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    91e0:	0020      	movs	r0, r4
    91e2:	4b3d      	ldr	r3, [pc, #244]	; (92d8 <_http_client_handle_header+0x218>)
    91e4:	3010      	adds	r0, #16
    91e6:	4798      	blx	r3
    91e8:	23dc      	movs	r3, #220	; 0xdc
    91ea:	50f8      	str	r0, [r7, r3]
    91ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		ptr = ptr_line_end + strlen(new_line);
    91ee:	1cac      	adds	r4, r5, #2
    91f0:	469a      	mov	sl, r3
    91f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    91f4:	4699      	mov	r9, r3
    91f6:	e7b6      	b.n	9166 <_http_client_handle_header+0xa6>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    91f8:	2205      	movs	r2, #5
    91fa:	4938      	ldr	r1, [pc, #224]	; (92dc <_http_client_handle_header+0x21c>)
    91fc:	0020      	movs	r0, r4
    91fe:	47b0      	blx	r6
    9200:	4683      	mov	fp, r0
    9202:	2800      	cmp	r0, #0
    9204:	d1ae      	bne.n	9164 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    9206:	0020      	movs	r0, r4
    9208:	4b33      	ldr	r3, [pc, #204]	; (92d8 <_http_client_handle_header+0x218>)
    920a:	3009      	adds	r0, #9
    920c:	4798      	blx	r3
    920e:	23e4      	movs	r3, #228	; 0xe4
			module->resp.content_length = 0;
    9210:	465a      	mov	r2, fp
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    9212:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    9214:	3b08      	subs	r3, #8
    9216:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    9218:	7963      	ldrb	r3, [r4, #5]
				module->permanent = 1;
    921a:	2241      	movs	r2, #65	; 0x41
			if (ptr [5] > '1' || ptr[7] > '0') {
    921c:	2b31      	cmp	r3, #49	; 0x31
    921e:	d909      	bls.n	9234 <_http_client_handle_header+0x174>
				module->permanent = 1;
    9220:	2102      	movs	r1, #2
    9222:	5cbb      	ldrb	r3, [r7, r2]
    9224:	430b      	orrs	r3, r1
				module->permanent = 0;
    9226:	54bb      	strb	r3, [r7, r2]
    9228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		ptr = ptr_line_end + strlen(new_line);
    922a:	1cac      	adds	r4, r5, #2
    922c:	469a      	mov	sl, r3
    922e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9230:	4699      	mov	r9, r3
    9232:	e798      	b.n	9166 <_http_client_handle_header+0xa6>
			if (ptr [5] > '1' || ptr[7] > '0') {
    9234:	79e3      	ldrb	r3, [r4, #7]
    9236:	2b30      	cmp	r3, #48	; 0x30
    9238:	d8f2      	bhi.n	9220 <_http_client_handle_header+0x160>
				module->permanent = 0;
    923a:	2102      	movs	r1, #2
    923c:	5cbb      	ldrb	r3, [r7, r2]
    923e:	438b      	bics	r3, r1
    9240:	e7f1      	b.n	9226 <_http_client_handle_header+0x166>
	} else {
		module->recved_size = 0;
    9242:	2300      	movs	r3, #0
    9244:	647b      	str	r3, [r7, #68]	; 0x44
			return 0;
    9246:	469b      	mov	fp, r3
    9248:	e777      	b.n	913a <_http_client_handle_header+0x7a>
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    924a:	464b      	mov	r3, r9
			_http_client_move_buffer(module, ptr + strlen(new_line));
    924c:	1ca1      	adds	r1, r4, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    924e:	1a5c      	subs	r4, r3, r1
    9250:	4454      	add	r4, sl
	if (remain > 0) {
    9252:	2c00      	cmp	r4, #0
    9254:	dd22      	ble.n	929c <_http_client_handle_header+0x1dc>
		memmove(buffer, base, remain);
    9256:	0022      	movs	r2, r4
    9258:	4650      	mov	r0, sl
    925a:	4b1d      	ldr	r3, [pc, #116]	; (92d0 <_http_client_handle_header+0x210>)
    925c:	4798      	blx	r3
		module->recved_size = remain;
    925e:	647c      	str	r4, [r7, #68]	; 0x44
			if (module->cb && module->resp.response_code) {
    9260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9262:	2b00      	cmp	r3, #0
    9264:	d014      	beq.n	9290 <_http_client_handle_header+0x1d0>
    9266:	22e4      	movs	r2, #228	; 0xe4
    9268:	5ab9      	ldrh	r1, [r7, r2]
    926a:	2900      	cmp	r1, #0
    926c:	d010      	beq.n	9290 <_http_client_handle_header+0x1d0>
				if (module->resp.content_length < 0) {
    926e:	3a08      	subs	r2, #8
    9270:	58b8      	ldr	r0, [r7, r2]
    9272:	2800      	cmp	r0, #0
    9274:	db14      	blt.n	92a0 <_http_client_handle_header+0x1e0>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    9276:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    9278:	4290      	cmp	r0, r2
    927a:	dd09      	ble.n	9290 <_http_client_handle_header+0x1d0>
					data.recv_response.response_code = module->resp.response_code;
    927c:	aa01      	add	r2, sp, #4
    927e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    9280:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    9282:	2100      	movs	r1, #0
					module->resp.read_length = 0;
    9284:	20e0      	movs	r0, #224	; 0xe0
					data.recv_response.content = NULL;
    9286:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    9288:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    928a:	3102      	adds	r1, #2
    928c:	0038      	movs	r0, r7
    928e:	4798      	blx	r3
			module->resp.state = STATE_PARSE_ENTITY;
    9290:	23d8      	movs	r3, #216	; 0xd8
    9292:	2201      	movs	r2, #1
    9294:	50fa      	str	r2, [r7, r3]
			return 1;
    9296:	3bd7      	subs	r3, #215	; 0xd7
    9298:	469b      	mov	fp, r3
    929a:	e74e      	b.n	913a <_http_client_handle_header+0x7a>
		module->recved_size = 0;
    929c:	6478      	str	r0, [r7, #68]	; 0x44
    929e:	e7df      	b.n	9260 <_http_client_handle_header+0x1a0>
					data.recv_response.response_code = module->resp.response_code;
    92a0:	aa01      	add	r2, sp, #4
    92a2:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    92a4:	2101      	movs	r1, #1
					module->resp.read_length = 0;
    92a6:	20e0      	movs	r0, #224	; 0xe0
					data.recv_response.is_chunked = 1;
    92a8:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    92aa:	2100      	movs	r1, #0
    92ac:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    92ae:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    92b0:	0038      	movs	r0, r7
    92b2:	3102      	adds	r1, #2
    92b4:	4798      	blx	r3
    92b6:	e7eb      	b.n	9290 <_http_client_handle_header+0x1d0>
    92b8:	00015140 	.word	0x00015140
    92bc:	00013b0d 	.word	0x00013b0d
    92c0:	00013a9d 	.word	0x00013a9d
    92c4:	00014f0c 	.word	0x00014f0c
    92c8:	00014e1c 	.word	0x00014e1c
    92cc:	00008941 	.word	0x00008941
    92d0:	000135a7 	.word	0x000135a7
    92d4:	00014e30 	.word	0x00014e30
    92d8:	00013519 	.word	0x00013519
    92dc:	00014e40 	.word	0x00014e40

000092e0 <_http_client_handle_entity>:
{
    92e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92e2:	46d6      	mov	lr, sl
    92e4:	464f      	mov	r7, r9
    92e6:	4646      	mov	r6, r8
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    92e8:	23dc      	movs	r3, #220	; 0xdc
{
    92ea:	b5c0      	push	{r6, r7, lr}
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    92ec:	58c3      	ldr	r3, [r0, r3]
{
    92ee:	b084      	sub	sp, #16
    92f0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    92f2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    92f4:	2b00      	cmp	r3, #0
    92f6:	da00      	bge.n	92fa <_http_client_handle_entity+0x1a>
    92f8:	e071      	b.n	93de <_http_client_handle_entity+0xfe>
    92fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
    92fc:	4293      	cmp	r3, r2
    92fe:	dc28      	bgt.n	9352 <_http_client_handle_entity+0x72>
		if ((int)module->recved_size >= module->resp.content_length) {
    9300:	6c42      	ldr	r2, [r0, #68]	; 0x44
	return 0;
    9302:	2600      	movs	r6, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    9304:	4293      	cmp	r3, r2
    9306:	dc47      	bgt.n	9398 <_http_client_handle_entity+0xb8>
			if (module->cb && module->resp.response_code) {
    9308:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    930a:	2f00      	cmp	r7, #0
    930c:	d00a      	beq.n	9324 <_http_client_handle_entity+0x44>
    930e:	22e4      	movs	r2, #228	; 0xe4
    9310:	5a81      	ldrh	r1, [r0, r2]
    9312:	2900      	cmp	r1, #0
    9314:	d006      	beq.n	9324 <_http_client_handle_entity+0x44>
				data.recv_response.response_code = module->resp.response_code;
    9316:	aa01      	add	r2, sp, #4
    9318:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    931a:	7096      	strb	r6, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    931c:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    931e:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    9320:	2102      	movs	r1, #2
    9322:	47b8      	blx	r7
			module->resp.state = STATE_PARSE_HEADER;
    9324:	2300      	movs	r3, #0
    9326:	22d8      	movs	r2, #216	; 0xd8
    9328:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    932a:	320c      	adds	r2, #12
    932c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    932e:	3aa3      	subs	r2, #163	; 0xa3
    9330:	5ca2      	ldrb	r2, [r4, r2]
    9332:	0792      	lsls	r2, r2, #30
    9334:	d549      	bpl.n	93ca <_http_client_handle_entity+0xea>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    9336:	22dc      	movs	r2, #220	; 0xdc
    9338:	58a1      	ldr	r1, [r4, r2]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    933a:	6c62      	ldr	r2, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    933c:	1869      	adds	r1, r5, r1
	char *buffer = module->config.recv_buffer;
    933e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9340:	1a56      	subs	r6, r2, r1
    9342:	1986      	adds	r6, r0, r6
	if (remain > 0) {
    9344:	2e00      	cmp	r6, #0
    9346:	dd47      	ble.n	93d8 <_http_client_handle_entity+0xf8>
		memmove(buffer, base, remain);
    9348:	0032      	movs	r2, r6
    934a:	4b81      	ldr	r3, [pc, #516]	; (9550 <_http_client_handle_entity+0x270>)
    934c:	4798      	blx	r3
		module->recved_size = remain;
    934e:	6466      	str	r6, [r4, #68]	; 0x44
    9350:	e022      	b.n	9398 <_http_client_handle_entity+0xb8>
			data.recv_chunked_data.length = module->recved_size;
    9352:	6c41      	ldr	r1, [r0, #68]	; 0x44
			module->resp.read_length += (int)module->recved_size;
    9354:	20e0      	movs	r0, #224	; 0xe0
    9356:	5822      	ldr	r2, [r4, r0]
			data.recv_chunked_data.length = module->recved_size;
    9358:	9101      	str	r1, [sp, #4]
			module->resp.read_length += (int)module->recved_size;
    935a:	188a      	adds	r2, r1, r2
			data.recv_chunked_data.data = buffer;
    935c:	9502      	str	r5, [sp, #8]
			module->resp.read_length += (int)module->recved_size;
    935e:	5022      	str	r2, [r4, r0]
			if (module->resp.content_length <= module->resp.read_length) {
    9360:	4293      	cmp	r3, r2
    9362:	dd20      	ble.n	93a6 <_http_client_handle_entity+0xc6>
				data.recv_chunked_data.is_complete = 0;
    9364:	2300      	movs	r3, #0
    9366:	466a      	mov	r2, sp
    9368:	7313      	strb	r3, [r2, #12]
			if (module->cb) {
    936a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    936c:	2b00      	cmp	r3, #0
    936e:	d100      	bne.n	9372 <_http_client_handle_entity+0x92>
    9370:	e0ec      	b.n	954c <_http_client_handle_entity+0x26c>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    9372:	aa01      	add	r2, sp, #4
    9374:	2103      	movs	r1, #3
    9376:	0020      	movs	r0, r4
    9378:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    937a:	466b      	mov	r3, sp
    937c:	7b1b      	ldrb	r3, [r3, #12]
    937e:	2b01      	cmp	r3, #1
    9380:	d01c      	beq.n	93bc <_http_client_handle_entity+0xdc>
    9382:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9384:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9386:	1869      	adds	r1, r5, r1
    9388:	1b45      	subs	r5, r0, r5
	if (remain > 0) {
    938a:	2d00      	cmp	r5, #0
    938c:	dd23      	ble.n	93d6 <_http_client_handle_entity+0xf6>
	return 0;
    938e:	2600      	movs	r6, #0
		memmove(buffer, base, remain);
    9390:	002a      	movs	r2, r5
    9392:	4b6f      	ldr	r3, [pc, #444]	; (9550 <_http_client_handle_entity+0x270>)
    9394:	4798      	blx	r3
		module->recved_size = remain;
    9396:	6465      	str	r5, [r4, #68]	; 0x44
}
    9398:	0030      	movs	r0, r6
    939a:	b004      	add	sp, #16
    939c:	bc1c      	pop	{r2, r3, r4}
    939e:	4690      	mov	r8, r2
    93a0:	4699      	mov	r9, r3
    93a2:	46a2      	mov	sl, r4
    93a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module->resp.state = STATE_PARSE_HEADER;
    93a6:	2300      	movs	r3, #0
    93a8:	22d8      	movs	r2, #216	; 0xd8
    93aa:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    93ac:	320c      	adds	r2, #12
    93ae:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    93b0:	466a      	mov	r2, sp
    93b2:	3301      	adds	r3, #1
    93b4:	7313      	strb	r3, [r2, #12]
			if (module->cb) {
    93b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    93b8:	2b00      	cmp	r3, #0
    93ba:	d1da      	bne.n	9372 <_http_client_handle_entity+0x92>
				if (module->permanent == 0) {
    93bc:	2341      	movs	r3, #65	; 0x41
    93be:	5ce3      	ldrb	r3, [r4, r3]
    93c0:	079b      	lsls	r3, r3, #30
    93c2:	d4de      	bmi.n	9382 <_http_client_handle_entity+0xa2>
					printf("1\r\n");
    93c4:	4863      	ldr	r0, [pc, #396]	; (9554 <_http_client_handle_entity+0x274>)
    93c6:	4b64      	ldr	r3, [pc, #400]	; (9558 <_http_client_handle_entity+0x278>)
    93c8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    93ca:	2100      	movs	r1, #0
    93cc:	0020      	movs	r0, r4
    93ce:	4b63      	ldr	r3, [pc, #396]	; (955c <_http_client_handle_entity+0x27c>)
    93d0:	4798      	blx	r3
					return 0;
    93d2:	2600      	movs	r6, #0
    93d4:	e7e0      	b.n	9398 <_http_client_handle_entity+0xb8>
		module->recved_size = 0;
    93d6:	2300      	movs	r3, #0
    93d8:	6463      	str	r3, [r4, #68]	; 0x44
	return 0;
    93da:	2600      	movs	r6, #0
    93dc:	e7dc      	b.n	9398 <_http_client_handle_entity+0xb8>
		if (module->resp.read_length >= 0) {
    93de:	23e0      	movs	r3, #224	; 0xe0
    93e0:	4698      	mov	r8, r3
		memmove(buffer, base, remain);
    93e2:	4b5b      	ldr	r3, [pc, #364]	; (9550 <_http_client_handle_entity+0x270>)
	int extension = 0;
    93e4:	2700      	movs	r7, #0
		memmove(buffer, base, remain);
    93e6:	4699      	mov	r9, r3
	int length = (int)module->recved_size;
    93e8:	6c46      	ldr	r6, [r0, #68]	; 0x44
		if (module->resp.read_length >= 0) {
    93ea:	4643      	mov	r3, r8
    93ec:	58e1      	ldr	r1, [r4, r3]
    93ee:	2900      	cmp	r1, #0
    93f0:	db27      	blt.n	9442 <_http_client_handle_entity+0x162>
			if (module->resp.read_length == 0) {
    93f2:	2900      	cmp	r1, #0
    93f4:	d157      	bne.n	94a6 <_http_client_handle_entity+0x1c6>
				module->resp.state = STATE_PARSE_HEADER;
    93f6:	23d8      	movs	r3, #216	; 0xd8
    93f8:	50e1      	str	r1, [r4, r3]
				module->resp.response_code = 0;
    93fa:	330c      	adds	r3, #12
    93fc:	52e1      	strh	r1, [r4, r3]
				data.recv_chunked_data.is_complete = 1;
    93fe:	aa01      	add	r2, sp, #4
    9400:	3be3      	subs	r3, #227	; 0xe3
    9402:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    9404:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
				data.recv_chunked_data.length = 0;
    9406:	9101      	str	r1, [sp, #4]
				data.recv_chunked_data.data = NULL;
    9408:	6051      	str	r1, [r2, #4]
				if (module->cb) {
    940a:	2b00      	cmp	r3, #0
    940c:	d002      	beq.n	9414 <_http_client_handle_entity+0x134>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    940e:	3103      	adds	r1, #3
    9410:	0020      	movs	r0, r4
    9412:	4798      	blx	r3
				if (module->permanent == 0) {
    9414:	2341      	movs	r3, #65	; 0x41
    9416:	5ce3      	ldrb	r3, [r4, r3]
    9418:	079b      	lsls	r3, r3, #30
    941a:	d400      	bmi.n	941e <_http_client_handle_entity+0x13e>
    941c:	e08b      	b.n	9536 <_http_client_handle_entity+0x256>
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    941e:	6c63      	ldr	r3, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + 2);
    9420:	1ca9      	adds	r1, r5, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9422:	1a5b      	subs	r3, r3, r1
    9424:	469a      	mov	sl, r3
	char *buffer = module->config.recv_buffer;
    9426:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9428:	4482      	add	sl, r0
	if (remain > 0) {
    942a:	4653      	mov	r3, sl
    942c:	2b00      	cmp	r3, #0
    942e:	dd7d      	ble.n	952c <_http_client_handle_entity+0x24c>
		memmove(buffer, base, remain);
    9430:	4b47      	ldr	r3, [pc, #284]	; (9550 <_http_client_handle_entity+0x270>)
    9432:	4652      	mov	r2, sl
    9434:	4798      	blx	r3
		module->recved_size = remain;
    9436:	4653      	mov	r3, sl
    9438:	6463      	str	r3, [r4, #68]	; 0x44
		if (module->resp.read_length >= 0) {
    943a:	4643      	mov	r3, r8
    943c:	58e1      	ldr	r1, [r4, r3]
    943e:	2900      	cmp	r1, #0
    9440:	dad7      	bge.n	93f2 <_http_client_handle_entity+0x112>
			module->resp.read_length = 0;
    9442:	2300      	movs	r3, #0
    9444:	4642      	mov	r2, r8
    9446:	50a3      	str	r3, [r4, r2]
			for (; length > 0; buffer++, length--) {
    9448:	2e00      	cmp	r6, #0
    944a:	dd72      	ble.n	9532 <_http_client_handle_entity+0x252>
				if (*buffer == '\n') {
    944c:	782b      	ldrb	r3, [r5, #0]
    944e:	2200      	movs	r2, #0
    9450:	2b0a      	cmp	r3, #10
    9452:	d10c      	bne.n	946e <_http_client_handle_entity+0x18e>
    9454:	e047      	b.n	94e6 <_http_client_handle_entity+0x206>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    9456:	0112      	lsls	r2, r2, #4
    9458:	18d2      	adds	r2, r2, r3
    945a:	4643      	mov	r3, r8
    945c:	3a30      	subs	r2, #48	; 0x30
    945e:	50e2      	str	r2, [r4, r3]
			for (; length > 0; buffer++, length--) {
    9460:	3e01      	subs	r6, #1
    9462:	3501      	adds	r5, #1
    9464:	2e00      	cmp	r6, #0
    9466:	d015      	beq.n	9494 <_http_client_handle_entity+0x1b4>
				if (*buffer == '\n') {
    9468:	782b      	ldrb	r3, [r5, #0]
    946a:	2b0a      	cmp	r3, #10
    946c:	d03b      	beq.n	94e6 <_http_client_handle_entity+0x206>
				if (extension != 0) {
    946e:	2f00      	cmp	r7, #0
    9470:	d1f6      	bne.n	9460 <_http_client_handle_entity+0x180>
				if (*buffer >= '0' && *buffer <= '9') {
    9472:	0019      	movs	r1, r3
    9474:	3930      	subs	r1, #48	; 0x30
    9476:	2909      	cmp	r1, #9
    9478:	d9ed      	bls.n	9456 <_http_client_handle_entity+0x176>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    947a:	0019      	movs	r1, r3
    947c:	3961      	subs	r1, #97	; 0x61
    947e:	2905      	cmp	r1, #5
    9480:	d846      	bhi.n	9510 <_http_client_handle_entity+0x230>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    9482:	0112      	lsls	r2, r2, #4
    9484:	18d2      	adds	r2, r2, r3
    9486:	4643      	mov	r3, r8
    9488:	3a61      	subs	r2, #97	; 0x61
			for (; length > 0; buffer++, length--) {
    948a:	3e01      	subs	r6, #1
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    948c:	50e2      	str	r2, [r4, r3]
			for (; length > 0; buffer++, length--) {
    948e:	3501      	adds	r5, #1
    9490:	2e00      	cmp	r6, #0
    9492:	d1e9      	bne.n	9468 <_http_client_handle_entity+0x188>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    9494:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9496:	4293      	cmp	r3, r2
    9498:	db52      	blt.n	9540 <_http_client_handle_entity+0x260>
				module->resp.read_length = -1;
    949a:	2201      	movs	r2, #1
    949c:	23e0      	movs	r3, #224	; 0xe0
    949e:	4252      	negs	r2, r2
    94a0:	50e2      	str	r2, [r4, r3]
	return 0;
    94a2:	2600      	movs	r6, #0
    94a4:	e778      	b.n	9398 <_http_client_handle_entity+0xb8>
			} else if (module->resp.read_length <= length) {
    94a6:	42b1      	cmp	r1, r6
    94a8:	dc24      	bgt.n	94f4 <_http_client_handle_entity+0x214>
				data.recv_chunked_data.is_complete = 0;
    94aa:	2300      	movs	r3, #0
				data.recv_chunked_data.length = module->resp.read_length;
    94ac:	aa01      	add	r2, sp, #4
				data.recv_chunked_data.is_complete = 0;
    94ae:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    94b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
				data.recv_chunked_data.length = module->resp.read_length;
    94b2:	9101      	str	r1, [sp, #4]
				data.recv_chunked_data.data = buffer;
    94b4:	6055      	str	r5, [r2, #4]
				if (module->cb) {
    94b6:	2b00      	cmp	r3, #0
    94b8:	d004      	beq.n	94c4 <_http_client_handle_entity+0x1e4>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    94ba:	2103      	movs	r1, #3
    94bc:	0020      	movs	r0, r4
    94be:	4798      	blx	r3
    94c0:	4643      	mov	r3, r8
    94c2:	58e1      	ldr	r1, [r4, r3]
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    94c4:	3102      	adds	r1, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    94c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    94c8:	1869      	adds	r1, r5, r1
	char *buffer = module->config.recv_buffer;
    94ca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    94cc:	1a5e      	subs	r6, r3, r1
    94ce:	1986      	adds	r6, r0, r6
	if (remain > 0) {
    94d0:	2e00      	cmp	r6, #0
    94d2:	dd15      	ble.n	9500 <_http_client_handle_entity+0x220>
		memmove(buffer, base, remain);
    94d4:	0032      	movs	r2, r6
    94d6:	47c8      	blx	r9
				module->resp.read_length = -1;
    94d8:	2301      	movs	r3, #1
    94da:	4642      	mov	r2, r8
    94dc:	425b      	negs	r3, r3
		module->recved_size = remain;
    94de:	6466      	str	r6, [r4, #68]	; 0x44
    94e0:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    94e2:	50a3      	str	r3, [r4, r2]
    94e4:	e781      	b.n	93ea <_http_client_handle_entity+0x10a>
					buffer++;
    94e6:	3501      	adds	r5, #1
					length--;
    94e8:	3e01      	subs	r6, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    94ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
    94ec:	4293      	cmp	r3, r2
    94ee:	db27      	blt.n	9540 <_http_client_handle_entity+0x260>
			if (length  == 0) {
    94f0:	2e00      	cmp	r6, #0
    94f2:	d0d2      	beq.n	949a <_http_client_handle_entity+0x1ba>
    94f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
	} while(module->recved_size > 0);
    94f6:	2b00      	cmp	r3, #0
    94f8:	d000      	beq.n	94fc <_http_client_handle_entity+0x21c>
    94fa:	e776      	b.n	93ea <_http_client_handle_entity+0x10a>
	return 0;
    94fc:	2600      	movs	r6, #0
    94fe:	e74b      	b.n	9398 <_http_client_handle_entity+0xb8>
		module->recved_size = 0;
    9500:	2300      	movs	r3, #0
				module->resp.read_length = -1;
    9502:	2201      	movs	r2, #1
		module->recved_size = 0;
    9504:	6463      	str	r3, [r4, #68]	; 0x44
				module->resp.read_length = -1;
    9506:	4252      	negs	r2, r2
    9508:	33e0      	adds	r3, #224	; 0xe0
    950a:	50e2      	str	r2, [r4, r3]
	return 0;
    950c:	2600      	movs	r6, #0
    950e:	e743      	b.n	9398 <_http_client_handle_entity+0xb8>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    9510:	0019      	movs	r1, r3
    9512:	3941      	subs	r1, #65	; 0x41
    9514:	2905      	cmp	r1, #5
    9516:	d805      	bhi.n	9524 <_http_client_handle_entity+0x244>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    9518:	0112      	lsls	r2, r2, #4
    951a:	18d2      	adds	r2, r2, r3
    951c:	4643      	mov	r3, r8
    951e:	3a41      	subs	r2, #65	; 0x41
    9520:	50e2      	str	r2, [r4, r3]
    9522:	e79d      	b.n	9460 <_http_client_handle_entity+0x180>
				} else if (*buffer == ';') {
    9524:	3b3b      	subs	r3, #59	; 0x3b
    9526:	425f      	negs	r7, r3
    9528:	415f      	adcs	r7, r3
    952a:	e799      	b.n	9460 <_http_client_handle_entity+0x180>
		module->recved_size = 0;
    952c:	2300      	movs	r3, #0
    952e:	6463      	str	r3, [r4, #68]	; 0x44
    9530:	e7b7      	b.n	94a2 <_http_client_handle_entity+0x1c2>
			for (; length > 0; buffer++, length--) {
    9532:	2200      	movs	r2, #0
    9534:	e7d9      	b.n	94ea <_http_client_handle_entity+0x20a>
					_http_client_clear_conn(module, 0);
    9536:	2100      	movs	r1, #0
    9538:	0020      	movs	r0, r4
    953a:	4b08      	ldr	r3, [pc, #32]	; (955c <_http_client_handle_entity+0x27c>)
    953c:	4798      	blx	r3
    953e:	e7b0      	b.n	94a2 <_http_client_handle_entity+0x1c2>
				_http_client_clear_conn(module, -EOVERFLOW);
    9540:	218b      	movs	r1, #139	; 0x8b
    9542:	0020      	movs	r0, r4
    9544:	4249      	negs	r1, r1
    9546:	4b05      	ldr	r3, [pc, #20]	; (955c <_http_client_handle_entity+0x27c>)
    9548:	4798      	blx	r3
    954a:	e7aa      	b.n	94a2 <_http_client_handle_entity+0x1c2>
			if (module->cb) {
    954c:	0028      	movs	r0, r5
    954e:	e71a      	b.n	9386 <_http_client_handle_entity+0xa6>
    9550:	000135a7 	.word	0x000135a7
    9554:	00014e18 	.word	0x00014e18
    9558:	00013849 	.word	0x00013849
    955c:	00008941 	.word	0x00008941

00009560 <_http_client_handle_response>:
	switch(module->resp.state) {
    9560:	23d8      	movs	r3, #216	; 0xd8
{
    9562:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    9564:	58c3      	ldr	r3, [r0, r3]
    9566:	2b00      	cmp	r3, #0
    9568:	d006      	beq.n	9578 <_http_client_handle_response+0x18>
    956a:	2b01      	cmp	r3, #1
    956c:	d001      	beq.n	9572 <_http_client_handle_response+0x12>
	return 0;
    956e:	2000      	movs	r0, #0
}
    9570:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    9572:	4b03      	ldr	r3, [pc, #12]	; (9580 <_http_client_handle_response+0x20>)
    9574:	4798      	blx	r3
    9576:	e7fb      	b.n	9570 <_http_client_handle_response+0x10>
		return _http_client_handle_header(module);
    9578:	4b02      	ldr	r3, [pc, #8]	; (9584 <_http_client_handle_response+0x24>)
    957a:	4798      	blx	r3
    957c:	e7f8      	b.n	9570 <_http_client_handle_response+0x10>
    957e:	46c0      	nop			; (mov r8, r8)
    9580:	000092e1 	.word	0x000092e1
    9584:	000090c1 	.word	0x000090c1

00009588 <_http_client_recved_packet>:
{
    9588:	b570      	push	{r4, r5, r6, lr}
	module->recved_size += read_len;
    958a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    958c:	0004      	movs	r4, r0
	module->recved_size += read_len;
    958e:	469c      	mov	ip, r3
	if (module->config.timeout > 0) {
    9590:	2358      	movs	r3, #88	; 0x58
	module->recved_size += read_len;
    9592:	4461      	add	r1, ip
    9594:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    9596:	5ac3      	ldrh	r3, [r0, r3]
    9598:	2b00      	cmp	r3, #0
    959a:	d105      	bne.n	95a8 <_http_client_recved_packet+0x20>
    959c:	4d05      	ldr	r5, [pc, #20]	; (95b4 <_http_client_recved_packet+0x2c>)
	while(_http_client_handle_response(module) != 0);
    959e:	0020      	movs	r0, r4
    95a0:	47a8      	blx	r5
    95a2:	2800      	cmp	r0, #0
    95a4:	d1fb      	bne.n	959e <_http_client_recved_packet+0x16>
}
    95a6:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    95a8:	6c81      	ldr	r1, [r0, #72]	; 0x48
    95aa:	4b03      	ldr	r3, [pc, #12]	; (95b8 <_http_client_recved_packet+0x30>)
    95ac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    95ae:	4798      	blx	r3
    95b0:	e7f4      	b.n	959c <_http_client_recved_packet+0x14>
    95b2:	46c0      	nop			; (mov r8, r8)
    95b4:	00009561 	.word	0x00009561
    95b8:	00009921 	.word	0x00009921

000095bc <http_client_socket_event_handler>:
{
    95bc:	b510      	push	{r4, lr}
	struct http_client_module *module = module_ref_inst[sock];
    95be:	4b5d      	ldr	r3, [pc, #372]	; (9734 <http_client_socket_event_handler+0x178>)
    95c0:	0080      	lsls	r0, r0, #2
    95c2:	58c4      	ldr	r4, [r0, r3]
{
    95c4:	b084      	sub	sp, #16
	if (module == NULL) {
    95c6:	2c00      	cmp	r4, #0
    95c8:	d005      	beq.n	95d6 <http_client_socket_event_handler+0x1a>
	switch (msg_type) {
    95ca:	2906      	cmp	r1, #6
    95cc:	d02d      	beq.n	962a <http_client_socket_event_handler+0x6e>
    95ce:	2907      	cmp	r1, #7
    95d0:	d003      	beq.n	95da <http_client_socket_event_handler+0x1e>
    95d2:	2905      	cmp	r1, #5
    95d4:	d00e      	beq.n	95f4 <http_client_socket_event_handler+0x38>
}
    95d6:	b004      	add	sp, #16
    95d8:	bd10      	pop	{r4, pc}
		send_ret = *(int16_t*)msg_data;
    95da:	2300      	movs	r3, #0
    95dc:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    95de:	2b00      	cmp	r3, #0
    95e0:	db37      	blt.n	9652 <http_client_socket_event_handler+0x96>
    		_http_client_request(module);
    95e2:	0020      	movs	r0, r4
    95e4:	4b54      	ldr	r3, [pc, #336]	; (9738 <http_client_socket_event_handler+0x17c>)
    95e6:	4798      	blx	r3
		module->sending = 0;
    95e8:	2241      	movs	r2, #65	; 0x41
    95ea:	2101      	movs	r1, #1
    95ec:	5ca3      	ldrb	r3, [r4, r2]
    95ee:	438b      	bics	r3, r1
    95f0:	54a3      	strb	r3, [r4, r2]
    	break;
    95f2:	e7f0      	b.n	95d6 <http_client_socket_event_handler+0x1a>
    	data.sock_connected.result = msg_connect->s8Error;
    95f4:	2301      	movs	r3, #1
    95f6:	56d3      	ldrsb	r3, [r2, r3]
    95f8:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    95fa:	2b00      	cmp	r3, #0
    95fc:	db31      	blt.n	9662 <http_client_socket_event_handler+0xa6>
			if (module->cb != NULL) {
    95fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9600:	2b00      	cmp	r3, #0
    9602:	d003      	beq.n	960c <http_client_socket_event_handler+0x50>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    9604:	aa01      	add	r2, sp, #4
    9606:	2100      	movs	r1, #0
    9608:	0020      	movs	r0, r4
    960a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    960c:	2303      	movs	r3, #3
    960e:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    9610:	3355      	adds	r3, #85	; 0x55
    9612:	5ae2      	ldrh	r2, [r4, r3]
    9614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    9616:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9618:	4b48      	ldr	r3, [pc, #288]	; (973c <http_client_socket_event_handler+0x180>)
    961a:	4798      	blx	r3
    		_http_client_recv_packet(module);
    961c:	0020      	movs	r0, r4
    961e:	4b48      	ldr	r3, [pc, #288]	; (9740 <http_client_socket_event_handler+0x184>)
    9620:	4798      	blx	r3
			_http_client_request(module);
    9622:	0020      	movs	r0, r4
    9624:	4b44      	ldr	r3, [pc, #272]	; (9738 <http_client_socket_event_handler+0x17c>)
    9626:	4798      	blx	r3
    9628:	e7d5      	b.n	95d6 <http_client_socket_event_handler+0x1a>
    	if (msg_recv->s16BufferSize > 0) {
    962a:	2304      	movs	r3, #4
    962c:	5ed1      	ldrsh	r1, [r2, r3]
    962e:	2900      	cmp	r1, #0
    9630:	dd06      	ble.n	9640 <http_client_socket_event_handler+0x84>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    9632:	0020      	movs	r0, r4
    9634:	4b43      	ldr	r3, [pc, #268]	; (9744 <http_client_socket_event_handler+0x188>)
    9636:	4798      	blx	r3
		_http_client_recv_packet(module);
    9638:	0020      	movs	r0, r4
    963a:	4b41      	ldr	r3, [pc, #260]	; (9740 <http_client_socket_event_handler+0x184>)
    963c:	4798      	blx	r3
		break;
    963e:	e7ca      	b.n	95d6 <http_client_socket_event_handler+0x1a>
	switch (err) {
    9640:	000b      	movs	r3, r1
    9642:	330e      	adds	r3, #14
    9644:	b29b      	uxth	r3, r3
    9646:	2b0e      	cmp	r3, #14
    9648:	d823      	bhi.n	9692 <http_client_socket_event_handler+0xd6>
    964a:	4a3f      	ldr	r2, [pc, #252]	; (9748 <http_client_socket_event_handler+0x18c>)
    964c:	009b      	lsls	r3, r3, #2
    964e:	58d3      	ldr	r3, [r2, r3]
    9650:	469f      	mov	pc, r3
    9652:	330e      	adds	r3, #14
    9654:	b29b      	uxth	r3, r3
    9656:	2b0d      	cmp	r3, #13
    9658:	d80c      	bhi.n	9674 <http_client_socket_event_handler+0xb8>
    965a:	4a3c      	ldr	r2, [pc, #240]	; (974c <http_client_socket_event_handler+0x190>)
    965c:	009b      	lsls	r3, r3, #2
    965e:	58d3      	ldr	r3, [r2, r3]
    9660:	469f      	mov	pc, r3
    9662:	001a      	movs	r2, r3
    9664:	320e      	adds	r2, #14
    9666:	b2d2      	uxtb	r2, r2
    9668:	2a0d      	cmp	r2, #13
    966a:	d85f      	bhi.n	972c <http_client_socket_event_handler+0x170>
    966c:	4938      	ldr	r1, [pc, #224]	; (9750 <http_client_socket_event_handler+0x194>)
    966e:	0092      	lsls	r2, r2, #2
    9670:	588a      	ldr	r2, [r1, r2]
    9672:	4697      	mov	pc, r2
			return -EIO;
    9674:	2105      	movs	r1, #5
    9676:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    9678:	0020      	movs	r0, r4
    967a:	4b36      	ldr	r3, [pc, #216]	; (9754 <http_client_socket_event_handler+0x198>)
    967c:	4798      	blx	r3
    967e:	e7b3      	b.n	95e8 <http_client_socket_event_handler+0x2c>
			return -ENOMEM;
    9680:	210c      	movs	r1, #12
    9682:	4249      	negs	r1, r1
    9684:	e7f8      	b.n	9678 <http_client_socket_event_handler+0xbc>
    9686:	210c      	movs	r1, #12
    9688:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    968a:	0020      	movs	r0, r4
    968c:	4b31      	ldr	r3, [pc, #196]	; (9754 <http_client_socket_event_handler+0x198>)
    968e:	4798      	blx	r3
    9690:	e7d2      	b.n	9638 <http_client_socket_event_handler+0x7c>
			if (err < 0) {
    9692:	2900      	cmp	r1, #0
    9694:	d0f9      	beq.n	968a <http_client_socket_event_handler+0xce>
				return -EIO;
    9696:	2105      	movs	r1, #5
    9698:	4249      	negs	r1, r1
    969a:	e7f6      	b.n	968a <http_client_socket_event_handler+0xce>
			return -EDESTADDRREQ;
    969c:	2179      	movs	r1, #121	; 0x79
    969e:	4249      	negs	r1, r1
    96a0:	e7f3      	b.n	968a <http_client_socket_event_handler+0xce>
			return -EADDRINUSE;
    96a2:	2170      	movs	r1, #112	; 0x70
    96a4:	4249      	negs	r1, r1
    96a6:	e7e7      	b.n	9678 <http_client_socket_event_handler+0xbc>
			return -EINVAL;
    96a8:	2116      	movs	r1, #22
    96aa:	4249      	negs	r1, r1
    96ac:	e7e4      	b.n	9678 <http_client_socket_event_handler+0xbc>
    96ae:	2116      	movs	r1, #22
    96b0:	4249      	negs	r1, r1
    96b2:	e7ea      	b.n	968a <http_client_socket_event_handler+0xce>
			return -ECONNRESET;
    96b4:	2168      	movs	r1, #104	; 0x68
    96b6:	4249      	negs	r1, r1
    96b8:	e7e7      	b.n	968a <http_client_socket_event_handler+0xce>
			return -EAGAIN;
    96ba:	210b      	movs	r1, #11
    96bc:	4249      	negs	r1, r1
    96be:	e7e4      	b.n	968a <http_client_socket_event_handler+0xce>
			return -EBUSY; /* HW error occurred. Retry it*/
    96c0:	2110      	movs	r1, #16
    96c2:	4249      	negs	r1, r1
    96c4:	e7e1      	b.n	968a <http_client_socket_event_handler+0xce>
			return -EDESTADDRREQ;
    96c6:	2179      	movs	r1, #121	; 0x79
    96c8:	4249      	negs	r1, r1
    96ca:	e7d5      	b.n	9678 <http_client_socket_event_handler+0xbc>
			return -ECONNRESET;
    96cc:	2168      	movs	r1, #104	; 0x68
    96ce:	4249      	negs	r1, r1
    96d0:	e7d2      	b.n	9678 <http_client_socket_event_handler+0xbc>
			return -EAGAIN;
    96d2:	210b      	movs	r1, #11
    96d4:	4249      	negs	r1, r1
    96d6:	e7cf      	b.n	9678 <http_client_socket_event_handler+0xbc>
			return -EBUSY; /* HW error occurred. Retry it*/
    96d8:	2110      	movs	r1, #16
    96da:	4249      	negs	r1, r1
    96dc:	e7cc      	b.n	9678 <http_client_socket_event_handler+0xbc>
			return -EADDRINUSE;
    96de:	2170      	movs	r1, #112	; 0x70
    96e0:	4249      	negs	r1, r1
    96e2:	e7d2      	b.n	968a <http_client_socket_event_handler+0xce>
			return -ENOENT;
    96e4:	2102      	movs	r1, #2
    96e6:	4249      	negs	r1, r1
    96e8:	e7cf      	b.n	968a <http_client_socket_event_handler+0xce>
			return -ENOMEM;
    96ea:	210c      	movs	r1, #12
    96ec:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    96ee:	0020      	movs	r0, r4
    96f0:	4b18      	ldr	r3, [pc, #96]	; (9754 <http_client_socket_event_handler+0x198>)
    96f2:	4798      	blx	r3
    96f4:	e76f      	b.n	95d6 <http_client_socket_event_handler+0x1a>
			return -ENOENT;
    96f6:	2102      	movs	r1, #2
    96f8:	4249      	negs	r1, r1
    96fa:	e7bd      	b.n	9678 <http_client_socket_event_handler+0xbc>
				return -EIO;
    96fc:	2105      	movs	r1, #5
    96fe:	4249      	negs	r1, r1
    9700:	e7f5      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -EINVAL;
    9702:	2116      	movs	r1, #22
    9704:	4249      	negs	r1, r1
    9706:	e7f2      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -EDESTADDRREQ;
    9708:	2179      	movs	r1, #121	; 0x79
    970a:	4249      	negs	r1, r1
    970c:	e7ef      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -EADDRINUSE;
    970e:	2170      	movs	r1, #112	; 0x70
    9710:	4249      	negs	r1, r1
    9712:	e7ec      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -ENOENT;
    9714:	2102      	movs	r1, #2
    9716:	4249      	negs	r1, r1
    9718:	e7e9      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -ECONNRESET;
    971a:	2168      	movs	r1, #104	; 0x68
    971c:	4249      	negs	r1, r1
    971e:	e7e6      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -EAGAIN;
    9720:	210b      	movs	r1, #11
    9722:	4249      	negs	r1, r1
    9724:	e7e3      	b.n	96ee <http_client_socket_event_handler+0x132>
			return -EBUSY; /* HW error occurred. Retry it*/
    9726:	2110      	movs	r1, #16
    9728:	4249      	negs	r1, r1
    972a:	e7e0      	b.n	96ee <http_client_socket_event_handler+0x132>
			if (err < 0) {
    972c:	2b00      	cmp	r3, #0
    972e:	dbe5      	blt.n	96fc <http_client_socket_event_handler+0x140>
			return 0;
    9730:	2100      	movs	r1, #0
    9732:	e7dc      	b.n	96ee <http_client_socket_event_handler+0x132>
    9734:	200003f0 	.word	0x200003f0
    9738:	00008a61 	.word	0x00008a61
    973c:	000098f5 	.word	0x000098f5
    9740:	00009089 	.word	0x00009089
    9744:	00009589 	.word	0x00009589
    9748:	00014d5c 	.word	0x00014d5c
    974c:	00014d98 	.word	0x00014d98
    9750:	00014dd0 	.word	0x00014dd0
    9754:	00008941 	.word	0x00008941

00009758 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    9758:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
	writer->written = 0;
    975a:	2200      	movs	r2, #0
	writer->write_func = func;
    975c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    975e:	9b00      	ldr	r3, [sp, #0]
	writer->buffer = buffer;
    9760:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    9762:	6042      	str	r2, [r0, #4]
	writer->priv_data = priv_data;
    9764:	60c3      	str	r3, [r0, #12]
}
    9766:	4770      	bx	lr

00009768 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    9768:	b570      	push	{r4, r5, r6, lr}
	int remain = writer->max_size - writer->written;
    976a:	6842      	ldr	r2, [r0, #4]
    976c:	6803      	ldr	r3, [r0, #0]
{
    976e:	0004      	movs	r4, r0
    9770:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    9772:	1a9b      	subs	r3, r3, r2
	
	if (remain < 1) {
    9774:	2b00      	cmp	r3, #0
    9776:	dd04      	ble.n	9782 <stream_writer_send_8+0x1a>
    9778:	1c56      	adds	r6, r2, #1
		stream_writer_send_remain(writer);
	}
	
	writer->buffer[writer->written++] = (char)value;
    977a:	6923      	ldr	r3, [r4, #16]
    977c:	6066      	str	r6, [r4, #4]
    977e:	549d      	strb	r5, [r3, r2]
}
    9780:	bd70      	pop	{r4, r5, r6, pc}
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
	if(writer->written > 0) {
    9782:	2601      	movs	r6, #1
    9784:	2a00      	cmp	r2, #0
    9786:	d0f8      	beq.n	977a <stream_writer_send_8+0x12>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    9788:	6901      	ldr	r1, [r0, #16]
    978a:	68a3      	ldr	r3, [r4, #8]
    978c:	68c0      	ldr	r0, [r0, #12]
    978e:	4798      	blx	r3
    9790:	2200      	movs	r2, #0
    9792:	e7f2      	b.n	977a <stream_writer_send_8+0x12>

00009794 <stream_writer_send_buffer>:
{
    9794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9796:	0006      	movs	r6, r0
    9798:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    979a:	2a00      	cmp	r2, #0
    979c:	d008      	beq.n	97b0 <stream_writer_send_buffer+0x1c>
    979e:	4f05      	ldr	r7, [pc, #20]	; (97b4 <stream_writer_send_buffer+0x20>)
    97a0:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    97a2:	2100      	movs	r1, #0
    97a4:	0030      	movs	r0, r6
    97a6:	5661      	ldrsb	r1, [r4, r1]
	for (; length > 0; length--, buffer++) {
    97a8:	3401      	adds	r4, #1
		stream_writer_send_8(writer, *buffer);
    97aa:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    97ac:	42a5      	cmp	r5, r4
    97ae:	d1f8      	bne.n	97a2 <stream_writer_send_buffer+0xe>
}
    97b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97b2:	46c0      	nop			; (mov r8, r8)
    97b4:	00009769 	.word	0x00009769

000097b8 <stream_writer_send_remain>:
{
    97b8:	b510      	push	{r4, lr}
	if(writer->written > 0) {
    97ba:	6842      	ldr	r2, [r0, #4]
{
    97bc:	0004      	movs	r4, r0
	if(writer->written > 0) {
    97be:	2a00      	cmp	r2, #0
    97c0:	d005      	beq.n	97ce <stream_writer_send_remain+0x16>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    97c2:	6901      	ldr	r1, [r0, #16]
    97c4:	68a3      	ldr	r3, [r4, #8]
    97c6:	68c0      	ldr	r0, [r0, #12]
    97c8:	4798      	blx	r3
		writer->written = 0;
    97ca:	2300      	movs	r3, #0
    97cc:	6063      	str	r3, [r4, #4]
	}
}
    97ce:	bd10      	pop	{r4, pc}

000097d0 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    97d0:	4a02      	ldr	r2, [pc, #8]	; (97dc <sw_timer_tcc_callback+0xc>)
    97d2:	6813      	ldr	r3, [r2, #0]
    97d4:	3301      	adds	r3, #1
    97d6:	6013      	str	r3, [r2, #0]
}
    97d8:	4770      	bx	lr
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	2000040c 	.word	0x2000040c

000097e0 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    97e0:	2364      	movs	r3, #100	; 0x64
    97e2:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    97e4:	2300      	movs	r3, #0
    97e6:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    97e8:	7043      	strb	r3, [r0, #1]
}
    97ea:	4770      	bx	lr

000097ec <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    97ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ee:	46c6      	mov	lr, r8
    97f0:	b500      	push	{lr}
    97f2:	b0ac      	sub	sp, #176	; 0xb0
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    97f4:	466a      	mov	r2, sp
{
    97f6:	000d      	movs	r5, r1
	Tcc *hw[] = TCC_INSTS;
    97f8:	466e      	mov	r6, sp
    97fa:	4b1c      	ldr	r3, [pc, #112]	; (986c <sw_timer_init+0x80>)
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    97fc:	3028      	adds	r0, #40	; 0x28
	Tcc *hw[] = TCC_INSTS;
    97fe:	cb92      	ldmia	r3!, {r1, r4, r7}
    9800:	c292      	stmia	r2!, {r1, r4, r7}
	module_inst->accuracy = config->accuracy;
    9802:	886b      	ldrh	r3, [r5, #2]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    9804:	0017      	movs	r7, r2
	module_inst->accuracy = config->accuracy;
    9806:	6403      	str	r3, [r0, #64]	; 0x40
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    9808:	782b      	ldrb	r3, [r5, #0]
	tcc_module = &module_inst->tcc_inst;
    980a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    980c:	009b      	lsls	r3, r3, #2
    980e:	0010      	movs	r0, r2
    9810:	5999      	ldr	r1, [r3, r6]
    9812:	4b17      	ldr	r3, [pc, #92]	; (9870 <sw_timer_init+0x84>)
    9814:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    9816:	4b17      	ldr	r3, [pc, #92]	; (9874 <sw_timer_init+0x88>)
    9818:	2000      	movs	r0, #0
    981a:	4798      	blx	r3
    981c:	4b16      	ldr	r3, [pc, #88]	; (9878 <sw_timer_init+0x8c>)
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    981e:	8869      	ldrh	r1, [r5, #2]
    9820:	7a1b      	ldrb	r3, [r3, #8]
    9822:	40d8      	lsrs	r0, r3
    9824:	4680      	mov	r8, r0
    9826:	20fa      	movs	r0, #250	; 0xfa
    9828:	4b14      	ldr	r3, [pc, #80]	; (987c <sw_timer_init+0x90>)
    982a:	0200      	lsls	r0, r0, #8
    982c:	4798      	blx	r3
    982e:	4b14      	ldr	r3, [pc, #80]	; (9880 <sw_timer_init+0x94>)
    9830:	0001      	movs	r1, r0
    9832:	4640      	mov	r0, r8
    9834:	4798      	blx	r3
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    9836:	2305      	movs	r3, #5
    9838:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    983a:	782b      	ldrb	r3, [r5, #0]
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    983c:	6078      	str	r0, [r7, #4]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    983e:	009b      	lsls	r3, r3, #2
    9840:	5999      	ldr	r1, [r3, r6]
    9842:	003a      	movs	r2, r7
    9844:	0020      	movs	r0, r4
    9846:	4b0f      	ldr	r3, [pc, #60]	; (9884 <sw_timer_init+0x98>)
    9848:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    984a:	786a      	ldrb	r2, [r5, #1]
    984c:	490e      	ldr	r1, [pc, #56]	; (9888 <sw_timer_init+0x9c>)
    984e:	3208      	adds	r2, #8
    9850:	b2d2      	uxtb	r2, r2
    9852:	0020      	movs	r0, r4
    9854:	4b0d      	ldr	r3, [pc, #52]	; (988c <sw_timer_init+0xa0>)
    9856:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    9858:	7869      	ldrb	r1, [r5, #1]
    985a:	0020      	movs	r0, r4
    985c:	3108      	adds	r1, #8
    985e:	b2c9      	uxtb	r1, r1
    9860:	4b0b      	ldr	r3, [pc, #44]	; (9890 <sw_timer_init+0xa4>)
    9862:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    9864:	b02c      	add	sp, #176	; 0xb0
    9866:	bc04      	pop	{r2}
    9868:	4690      	mov	r8, r2
    986a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    986c:	00014f40 	.word	0x00014f40
    9870:	000081dd 	.word	0x000081dd
    9874:	00010059 	.word	0x00010059
    9878:	40000400 	.word	0x40000400
    987c:	00013301 	.word	0x00013301
    9880:	000131ed 	.word	0x000131ed
    9884:	00008341 	.word	0x00008341
    9888:	000097d1 	.word	0x000097d1
    988c:	00008729 	.word	0x00008729
    9890:	00008741 	.word	0x00008741

00009894 <sw_timer_enable>:
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    9894:	2102      	movs	r1, #2
    9896:	6a82      	ldr	r2, [r0, #40]	; 0x28
    9898:	6893      	ldr	r3, [r2, #8]
    989a:	4219      	tst	r1, r3
    989c:	d1fc      	bne.n	9898 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    989e:	6813      	ldr	r3, [r2, #0]
    98a0:	4319      	orrs	r1, r3
    98a2:	6011      	str	r1, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    98a4:	4770      	bx	lr
    98a6:	46c0      	nop			; (mov r8, r8)

000098a8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    98a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    98aa:	7805      	ldrb	r5, [r0, #0]
{
    98ac:	0004      	movs	r4, r0
		if (module_inst->handler[index].used == 0) {
    98ae:	07e8      	lsls	r0, r5, #31
    98b0:	d506      	bpl.n	98c0 <sw_timer_register_callback+0x18>
    98b2:	7d25      	ldrb	r5, [r4, #20]
    98b4:	07e8      	lsls	r0, r5, #31
    98b6:	d518      	bpl.n	98ea <sw_timer_register_callback+0x42>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    98b8:	2501      	movs	r5, #1
    98ba:	426d      	negs	r5, r5
}
    98bc:	0028      	movs	r0, r5
    98be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    98c0:	2500      	movs	r5, #0
			handler->callback_enable = 0;
    98c2:	2002      	movs	r0, #2
			handler->callback = callback;
    98c4:	00ae      	lsls	r6, r5, #2
    98c6:	1976      	adds	r6, r6, r5
    98c8:	00b6      	lsls	r6, r6, #2
    98ca:	19a7      	adds	r7, r4, r6
    98cc:	6079      	str	r1, [r7, #4]
			handler->callback_enable = 0;
    98ce:	5da1      	ldrb	r1, [r4, r6]
    98d0:	4381      	bics	r1, r0
    98d2:	55a1      	strb	r1, [r4, r6]
			handler->context = context;
    98d4:	60ba      	str	r2, [r7, #8]
			handler->period = period / module_inst->accuracy;
    98d6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    98d8:	0018      	movs	r0, r3
    98da:	4b05      	ldr	r3, [pc, #20]	; (98f0 <sw_timer_register_callback+0x48>)
    98dc:	4798      	blx	r3
			handler->used = 1;
    98de:	2201      	movs	r2, #1
			handler->period = period / module_inst->accuracy;
    98e0:	60f8      	str	r0, [r7, #12]
			handler->used = 1;
    98e2:	5da3      	ldrb	r3, [r4, r6]
    98e4:	4313      	orrs	r3, r2
    98e6:	55a3      	strb	r3, [r4, r6]
			return index;
    98e8:	e7e8      	b.n	98bc <sw_timer_register_callback+0x14>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    98ea:	2501      	movs	r5, #1
    98ec:	e7e9      	b.n	98c2 <sw_timer_register_callback+0x1a>
    98ee:	46c0      	nop			; (mov r8, r8)
    98f0:	000131ed 	.word	0x000131ed

000098f4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    98f4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    98f6:	2402      	movs	r4, #2
    98f8:	008b      	lsls	r3, r1, #2
    98fa:	1859      	adds	r1, r3, r1
    98fc:	0089      	lsls	r1, r1, #2
    98fe:	5c0b      	ldrb	r3, [r1, r0]
    9900:	4323      	orrs	r3, r4
    9902:	540b      	strb	r3, [r1, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    9904:	1844      	adds	r4, r0, r1
    9906:	4b04      	ldr	r3, [pc, #16]	; (9918 <sw_timer_enable_callback+0x24>)
    9908:	6e81      	ldr	r1, [r0, #104]	; 0x68
    990a:	0010      	movs	r0, r2
    990c:	4798      	blx	r3
    990e:	4b03      	ldr	r3, [pc, #12]	; (991c <sw_timer_enable_callback+0x28>)
    9910:	681b      	ldr	r3, [r3, #0]
    9912:	18c0      	adds	r0, r0, r3
    9914:	6120      	str	r0, [r4, #16]
}
    9916:	bd10      	pop	{r4, pc}
    9918:	000131ed 	.word	0x000131ed
    991c:	2000040c 	.word	0x2000040c

00009920 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    9920:	2202      	movs	r2, #2
    9922:	008b      	lsls	r3, r1, #2
    9924:	1859      	adds	r1, r3, r1
    9926:	0089      	lsls	r1, r1, #2
    9928:	5c0b      	ldrb	r3, [r1, r0]
    992a:	4393      	bics	r3, r2
    992c:	540b      	strb	r3, [r1, r0]
}
    992e:	4770      	bx	lr

00009930 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    9930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9932:	4b22      	ldr	r3, [pc, #136]	; (99bc <sw_timer_task+0x8c>)
{
    9934:	4645      	mov	r5, r8
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9936:	4698      	mov	r8, r3
    9938:	2304      	movs	r3, #4
{
    993a:	4657      	mov	r7, sl
    993c:	464e      	mov	r6, r9
    993e:	46de      	mov	lr, fp
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9940:	469a      	mov	sl, r3
    9942:	2304      	movs	r3, #4
{
    9944:	b5e0      	push	{r5, r6, r7, lr}
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    9946:	2400      	movs	r4, #0
{
    9948:	0007      	movs	r7, r0
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    994a:	4699      	mov	r9, r3
    994c:	1d05      	adds	r5, r0, #4
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    994e:	00a3      	lsls	r3, r4, #2
    9950:	191a      	adds	r2, r3, r4
    9952:	0092      	lsls	r2, r2, #2
    9954:	469b      	mov	fp, r3
    9956:	5dd3      	ldrb	r3, [r2, r7]
    9958:	07d9      	lsls	r1, r3, #31
    995a:	d506      	bpl.n	996a <sw_timer_task+0x3a>
    995c:	0799      	lsls	r1, r3, #30
    995e:	d504      	bpl.n	996a <sw_timer_task+0x3a>
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9960:	4641      	mov	r1, r8
    9962:	6808      	ldr	r0, [r1, #0]
    9964:	68e9      	ldr	r1, [r5, #12]
    9966:	1a09      	subs	r1, r1, r0
    9968:	d409      	bmi.n	997e <sw_timer_task+0x4e>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    996a:	3401      	adds	r4, #1
    996c:	3514      	adds	r5, #20
    996e:	2c02      	cmp	r4, #2
    9970:	d1ed      	bne.n	994e <sw_timer_task+0x1e>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    9972:	bc3c      	pop	{r2, r3, r4, r5}
    9974:	4690      	mov	r8, r2
    9976:	4699      	mov	r9, r3
    9978:	46a2      	mov	sl, r4
    997a:	46ab      	mov	fp, r5
    997c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    997e:	4649      	mov	r1, r9
    9980:	4219      	tst	r1, r3
    9982:	d1f2      	bne.n	996a <sw_timer_task+0x3a>
				handler->busy = 1;
    9984:	4651      	mov	r1, sl
    9986:	430b      	orrs	r3, r1
    9988:	55d3      	strb	r3, [r2, r7]
				if (handler->period > 0) {
    998a:	68ab      	ldr	r3, [r5, #8]
    998c:	2b00      	cmp	r3, #0
    998e:	d111      	bne.n	99b4 <sw_timer_task+0x84>
					handler->callback_enable = 0;
    9990:	2102      	movs	r1, #2
    9992:	5dd3      	ldrb	r3, [r2, r7]
    9994:	438b      	bics	r3, r1
    9996:	55d3      	strb	r3, [r2, r7]
    9998:	68ab      	ldr	r3, [r5, #8]
				handler->callback(module_inst, index, handler->context, handler->period);
    999a:	686a      	ldr	r2, [r5, #4]
    999c:	682e      	ldr	r6, [r5, #0]
    999e:	0021      	movs	r1, r4
    99a0:	0038      	movs	r0, r7
    99a2:	47b0      	blx	r6
				handler->busy = 0;
    99a4:	465b      	mov	r3, fp
    99a6:	464a      	mov	r2, r9
    99a8:	191e      	adds	r6, r3, r4
    99aa:	00b6      	lsls	r6, r6, #2
    99ac:	5df3      	ldrb	r3, [r6, r7]
    99ae:	4393      	bics	r3, r2
    99b0:	55f3      	strb	r3, [r6, r7]
    99b2:	e7da      	b.n	996a <sw_timer_task+0x3a>
					handler->expire_time = sw_timer_tick + handler->period;
    99b4:	18c0      	adds	r0, r0, r3
    99b6:	60e8      	str	r0, [r5, #12]
    99b8:	e7ef      	b.n	999a <sw_timer_task+0x6a>
    99ba:	46c0      	nop			; (mov r8, r8)
    99bc:	2000040c 	.word	0x2000040c

000099c0 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    99c0:	b570      	push	{r4, r5, r6, lr}
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    99c2:	0a0b      	lsrs	r3, r1, #8
{
    99c4:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    99c6:	21ff      	movs	r1, #255	; 0xff
{
    99c8:	0005      	movs	r5, r0
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    99ca:	000a      	movs	r2, r1
{
    99cc:	b082      	sub	sp, #8
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    99ce:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    99d0:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    99d2:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    99d4:	400b      	ands	r3, r1
    99d6:	4001      	ands	r1, r0
    99d8:	4022      	ands	r2, r4
    99da:	9100      	str	r1, [sp, #0]
    99dc:	4e04      	ldr	r6, [pc, #16]	; (99f0 <resolve_cb+0x30>)
    99de:	0029      	movs	r1, r5
    99e0:	4804      	ldr	r0, [pc, #16]	; (99f4 <resolve_cb+0x34>)
    99e2:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    99e4:	0021      	movs	r1, r4
    99e6:	0028      	movs	r0, r5
    99e8:	4b03      	ldr	r3, [pc, #12]	; (99f8 <resolve_cb+0x38>)
    99ea:	4798      	blx	r3
}
    99ec:	b002      	add	sp, #8
    99ee:	bd70      	pop	{r4, r5, r6, pc}
    99f0:	0001372d 	.word	0x0001372d
    99f4:	000151f8 	.word	0x000151f8
    99f8:	000089c5 	.word	0x000089c5

000099fc <socket_cb>:
{
    99fc:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    99fe:	4b01      	ldr	r3, [pc, #4]	; (9a04 <socket_cb+0x8>)
    9a00:	4798      	blx	r3
}
    9a02:	bd10      	pop	{r4, pc}
    9a04:	000095bd 	.word	0x000095bd

00009a08 <start_download>:
{
    9a08:	b510      	push	{r4, lr}
	return ((down_state & mask) != 0);
    9a0a:	4b14      	ldr	r3, [pc, #80]	; (9a5c <start_download+0x54>)
{
    9a0c:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    9a0e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    9a10:	07da      	lsls	r2, r3, #31
    9a12:	d512      	bpl.n	9a3a <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
    9a14:	079a      	lsls	r2, r3, #30
    9a16:	d51c      	bpl.n	9a52 <start_download+0x4a>
	if (is_state_set(GET_REQUESTED)) {
    9a18:	075a      	lsls	r2, r3, #29
    9a1a:	d412      	bmi.n	9a42 <start_download+0x3a>
	if (is_state_set(DOWNLOADING)) {
    9a1c:	2408      	movs	r4, #8
    9a1e:	401c      	ands	r4, r3
    9a20:	d113      	bne.n	9a4a <start_download+0x42>
	printf("start_download: sending HTTP request...\r\n");
    9a22:	4b0f      	ldr	r3, [pc, #60]	; (9a60 <start_download+0x58>)
    9a24:	480f      	ldr	r0, [pc, #60]	; (9a64 <start_download+0x5c>)
    9a26:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    9a28:	9400      	str	r4, [sp, #0]
    9a2a:	2300      	movs	r3, #0
    9a2c:	2201      	movs	r2, #1
    9a2e:	490e      	ldr	r1, [pc, #56]	; (9a68 <start_download+0x60>)
    9a30:	480e      	ldr	r0, [pc, #56]	; (9a6c <start_download+0x64>)
    9a32:	4c0f      	ldr	r4, [pc, #60]	; (9a70 <start_download+0x68>)
    9a34:	47a0      	blx	r4
}
    9a36:	b002      	add	sp, #8
    9a38:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    9a3a:	4b09      	ldr	r3, [pc, #36]	; (9a60 <start_download+0x58>)
    9a3c:	480d      	ldr	r0, [pc, #52]	; (9a74 <start_download+0x6c>)
    9a3e:	4798      	blx	r3
		return;
    9a40:	e7f9      	b.n	9a36 <start_download+0x2e>
		printf("start_download: request is sent already.\r\n");
    9a42:	4b07      	ldr	r3, [pc, #28]	; (9a60 <start_download+0x58>)
    9a44:	480c      	ldr	r0, [pc, #48]	; (9a78 <start_download+0x70>)
    9a46:	4798      	blx	r3
		return;
    9a48:	e7f5      	b.n	9a36 <start_download+0x2e>
		printf("start_download: running download already.\r\n");
    9a4a:	4b05      	ldr	r3, [pc, #20]	; (9a60 <start_download+0x58>)
    9a4c:	480b      	ldr	r0, [pc, #44]	; (9a7c <start_download+0x74>)
    9a4e:	4798      	blx	r3
		return;
    9a50:	e7f1      	b.n	9a36 <start_download+0x2e>
		printf("start_download: Wi-Fi is not connected.\r\n");
    9a52:	4b03      	ldr	r3, [pc, #12]	; (9a60 <start_download+0x58>)
    9a54:	480a      	ldr	r0, [pc, #40]	; (9a80 <start_download+0x78>)
    9a56:	4798      	blx	r3
		return;
    9a58:	e7ed      	b.n	9a36 <start_download+0x2e>
    9a5a:	46c0      	nop			; (mov r8, r8)
    9a5c:	20000410 	.word	0x20000410
    9a60:	00013849 	.word	0x00013849
    9a64:	000152d4 	.word	0x000152d4
    9a68:	00015300 	.word	0x00015300
    9a6c:	20000a44 	.word	0x20000a44
    9a70:	00008df9 	.word	0x00008df9
    9a74:	00015228 	.word	0x00015228
    9a78:	0001527c 	.word	0x0001527c
    9a7c:	000152a8 	.word	0x000152a8
    9a80:	00015250 	.word	0x00015250

00009a84 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    9a84:	b530      	push	{r4, r5, lr}
    9a86:	b083      	sub	sp, #12
	switch (u8MsgType) {
    9a88:	282c      	cmp	r0, #44	; 0x2c
    9a8a:	d013      	beq.n	9ab4 <wifi_cb+0x30>
    9a8c:	2832      	cmp	r0, #50	; 0x32
    9a8e:	d10f      	bne.n	9ab0 <wifi_cb+0x2c>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    9a90:	7808      	ldrb	r0, [r1, #0]
    9a92:	788b      	ldrb	r3, [r1, #2]
    9a94:	784a      	ldrb	r2, [r1, #1]
    9a96:	78c9      	ldrb	r1, [r1, #3]
    9a98:	4c1c      	ldr	r4, [pc, #112]	; (9b0c <wifi_cb+0x88>)
    9a9a:	9100      	str	r1, [sp, #0]
    9a9c:	0001      	movs	r1, r0
    9a9e:	481c      	ldr	r0, [pc, #112]	; (9b10 <wifi_cb+0x8c>)
    9aa0:	47a0      	blx	r4
	down_state |= mask;
    9aa2:	2102      	movs	r1, #2
    9aa4:	4a1b      	ldr	r2, [pc, #108]	; (9b14 <wifi_cb+0x90>)
    9aa6:	7813      	ldrb	r3, [r2, #0]
    9aa8:	430b      	orrs	r3, r1
    9aaa:	7013      	strb	r3, [r2, #0]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		add_state(WIFI_CONNECTED);
		start_download();
    9aac:	4b1a      	ldr	r3, [pc, #104]	; (9b18 <wifi_cb+0x94>)
    9aae:	4798      	blx	r3
	}

	default:
		break;
	}
}
    9ab0:	b003      	add	sp, #12
    9ab2:	bd30      	pop	{r4, r5, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    9ab4:	780b      	ldrb	r3, [r1, #0]
    9ab6:	2b01      	cmp	r3, #1
    9ab8:	d021      	beq.n	9afe <wifi_cb+0x7a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    9aba:	2b00      	cmp	r3, #0
    9abc:	d1f8      	bne.n	9ab0 <wifi_cb+0x2c>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    9abe:	4b17      	ldr	r3, [pc, #92]	; (9b1c <wifi_cb+0x98>)
    9ac0:	4817      	ldr	r0, [pc, #92]	; (9b20 <wifi_cb+0x9c>)
    9ac2:	4798      	blx	r3
	down_state &= ~mask;
    9ac4:	2202      	movs	r2, #2
	return ((down_state & mask) != 0);
    9ac6:	2508      	movs	r5, #8
	down_state &= ~mask;
    9ac8:	4c12      	ldr	r4, [pc, #72]	; (9b14 <wifi_cb+0x90>)
    9aca:	7823      	ldrb	r3, [r4, #0]
    9acc:	4393      	bics	r3, r2
    9ace:	7023      	strb	r3, [r4, #0]
			if (is_state_set(DOWNLOADING)) {
    9ad0:	421d      	tst	r5, r3
    9ad2:	d10d      	bne.n	9af0 <wifi_cb+0x6c>
	return ((down_state & mask) != 0);
    9ad4:	2204      	movs	r2, #4
			if (is_state_set(GET_REQUESTED)) {
    9ad6:	421a      	tst	r2, r3
    9ad8:	d001      	beq.n	9ade <wifi_cb+0x5a>
	down_state &= ~mask;
    9ada:	4393      	bics	r3, r2
    9adc:	7023      	strb	r3, [r4, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    9ade:	23ff      	movs	r3, #255	; 0xff
    9ae0:	2202      	movs	r2, #2
    9ae2:	9300      	str	r3, [sp, #0]
    9ae4:	210b      	movs	r1, #11
    9ae6:	4b0f      	ldr	r3, [pc, #60]	; (9b24 <wifi_cb+0xa0>)
    9ae8:	4c0f      	ldr	r4, [pc, #60]	; (9b28 <wifi_cb+0xa4>)
    9aea:	4810      	ldr	r0, [pc, #64]	; (9b2c <wifi_cb+0xa8>)
    9aec:	47a0      	blx	r4
    9aee:	e7df      	b.n	9ab0 <wifi_cb+0x2c>
				f_close(&file_object);
    9af0:	4b0f      	ldr	r3, [pc, #60]	; (9b30 <wifi_cb+0xac>)
    9af2:	4810      	ldr	r0, [pc, #64]	; (9b34 <wifi_cb+0xb0>)
    9af4:	4798      	blx	r3
	down_state &= ~mask;
    9af6:	7823      	ldrb	r3, [r4, #0]
    9af8:	43ab      	bics	r3, r5
    9afa:	7023      	strb	r3, [r4, #0]
    9afc:	e7ea      	b.n	9ad4 <wifi_cb+0x50>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    9afe:	4b07      	ldr	r3, [pc, #28]	; (9b1c <wifi_cb+0x98>)
    9b00:	480d      	ldr	r0, [pc, #52]	; (9b38 <wifi_cb+0xb4>)
    9b02:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    9b04:	4b0d      	ldr	r3, [pc, #52]	; (9b3c <wifi_cb+0xb8>)
    9b06:	4798      	blx	r3
    9b08:	e7d2      	b.n	9ab0 <wifi_cb+0x2c>
    9b0a:	46c0      	nop			; (mov r8, r8)
    9b0c:	0001372d 	.word	0x0001372d
    9b10:	000154cc 	.word	0x000154cc
    9b14:	20000410 	.word	0x20000410
    9b18:	00009a09 	.word	0x00009a09
    9b1c:	00013849 	.word	0x00013849
    9b20:	00015494 	.word	0x00015494
    9b24:	000154b4 	.word	0x000154b4
    9b28:	0000c1a5 	.word	0x0000c1a5
    9b2c:	000154c0 	.word	0x000154c0
    9b30:	000131d9 	.word	0x000131d9
    9b34:	20000644 	.word	0x20000644
    9b38:	00015474 	.word	0x00015474
    9b3c:	0000c1c1 	.word	0x0000c1c1

00009b40 <rename_to_unique.constprop.3>:
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
    9b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b42:	46de      	mov	lr, fp
    9b44:	4645      	mov	r5, r8
    9b46:	4657      	mov	r7, sl
    9b48:	464e      	mov	r6, r9
    9b4a:	b5e0      	push	{r5, r6, r7, lr}
    9b4c:	b0c7      	sub	sp, #284	; 0x11c
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    9b4e:	22fb      	movs	r2, #251	; 0xfb
    9b50:	2100      	movs	r1, #0
    9b52:	4b53      	ldr	r3, [pc, #332]	; (9ca0 <rename_to_unique.constprop.3+0x160>)
    9b54:	a807      	add	r0, sp, #28
    9b56:	4798      	blx	r3
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    9b58:	2209      	movs	r2, #9
    9b5a:	2100      	movs	r1, #0
    9b5c:	4b50      	ldr	r3, [pc, #320]	; (9ca0 <rename_to_unique.constprop.3+0x160>)
    9b5e:	a804      	add	r0, sp, #16
    9b60:	4798      	blx	r3
	char numbering[NUMBRING_MAX + 1] = {0};
    9b62:	2300      	movs	r3, #0
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9b64:	4d4f      	ldr	r5, [pc, #316]	; (9ca4 <rename_to_unique.constprop.3+0x164>)
    9b66:	2200      	movs	r2, #0
    9b68:	494f      	ldr	r1, [pc, #316]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9b6a:	0028      	movs	r0, r5
    9b6c:	4f4f      	ldr	r7, [pc, #316]	; (9cac <rename_to_unique.constprop.3+0x16c>)
	char numbering[NUMBRING_MAX + 1] = {0};
    9b6e:	9303      	str	r3, [sp, #12]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9b70:	47b8      	blx	r7
	f_close(&file_object);
    9b72:	4b4f      	ldr	r3, [pc, #316]	; (9cb0 <rename_to_unique.constprop.3+0x170>)
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9b74:	0004      	movs	r4, r0
	f_close(&file_object);
    9b76:	0028      	movs	r0, r5
    9b78:	4698      	mov	r8, r3
    9b7a:	4798      	blx	r3
		return true;
    9b7c:	2001      	movs	r0, #1
	if (!is_exist_file(fp, file_path_name)) {
    9b7e:	2c00      	cmp	r4, #0
    9b80:	d14f      	bne.n	9c22 <rename_to_unique.constprop.3+0xe2>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    9b82:	4b4c      	ldr	r3, [pc, #304]	; (9cb4 <rename_to_unique.constprop.3+0x174>)
    9b84:	4848      	ldr	r0, [pc, #288]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9b86:	4699      	mov	r9, r3
    9b88:	4798      	blx	r3
    9b8a:	0006      	movs	r6, r0
    9b8c:	28fa      	cmp	r0, #250	; 0xfa
    9b8e:	d847      	bhi.n	9c20 <rename_to_unique.constprop.3+0xe0>
	p = strrchr(file_path_name, '.');
    9b90:	212e      	movs	r1, #46	; 0x2e
    9b92:	4845      	ldr	r0, [pc, #276]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9b94:	4b48      	ldr	r3, [pc, #288]	; (9cb8 <rename_to_unique.constprop.3+0x178>)
    9b96:	4798      	blx	r3
    9b98:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
    9b9a:	d007      	beq.n	9bac <rename_to_unique.constprop.3+0x6c>
		ext_len = strlen(p);
    9b9c:	47c8      	blx	r9
    9b9e:	466a      	mov	r2, sp
    9ba0:	8010      	strh	r0, [r2, #0]
    9ba2:	8813      	ldrh	r3, [r2, #0]
    9ba4:	4682      	mov	sl, r0
    9ba6:	4699      	mov	r9, r3
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    9ba8:	2b07      	cmp	r3, #7
    9baa:	d941      	bls.n	9c30 <rename_to_unique.constprop.3+0xf0>
			strncpy(name, file_path_name, name_len);
    9bac:	4b43      	ldr	r3, [pc, #268]	; (9cbc <rename_to_unique.constprop.3+0x17c>)
    9bae:	22f6      	movs	r2, #246	; 0xf6
    9bb0:	493d      	ldr	r1, [pc, #244]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9bb2:	a807      	add	r0, sp, #28
    9bb4:	469a      	mov	sl, r3
    9bb6:	4798      	blx	r3
	bool valid_ext = false;
    9bb8:	2200      	movs	r2, #0
			strncpy(name, file_path_name, name_len);
    9bba:	23f7      	movs	r3, #247	; 0xf7
    9bbc:	21f7      	movs	r1, #247	; 0xf7
    9bbe:	26f6      	movs	r6, #246	; 0xf6
	bool valid_ext = false;
    9bc0:	9200      	str	r2, [sp, #0]
	name[name_len++] = '-';
    9bc2:	2414      	movs	r4, #20
    9bc4:	222d      	movs	r2, #45	; 0x2d
    9bc6:	a802      	add	r0, sp, #8
    9bc8:	1900      	adds	r0, r0, r4
    9bca:	5582      	strb	r2, [r0, r6]
    9bcc:	aa07      	add	r2, sp, #28
    9bce:	4691      	mov	r9, r2
    9bd0:	4a3b      	ldr	r2, [pc, #236]	; (9cc0 <rename_to_unique.constprop.3+0x180>)
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9bd2:	3303      	adds	r3, #3
    9bd4:	4693      	mov	fp, r2
    9bd6:	aa07      	add	r2, sp, #28
    9bd8:	4694      	mov	ip, r2
    9bda:	4463      	add	r3, ip
    9bdc:	4489      	add	r9, r1
	name[name_len++] = '-';
    9bde:	3c13      	subs	r4, #19
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9be0:	9301      	str	r3, [sp, #4]
    9be2:	e00d      	b.n	9c00 <rename_to_unique.constprop.3+0xc0>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9be4:	2200      	movs	r2, #0
    9be6:	a907      	add	r1, sp, #28
    9be8:	0028      	movs	r0, r5
    9bea:	47b8      	blx	r7
    9bec:	0006      	movs	r6, r0
	f_close(&file_object);
    9bee:	0028      	movs	r0, r5
    9bf0:	47c0      	blx	r8
		if (!is_exist_file(fp, name)) {
    9bf2:	2e00      	cmp	r6, #0
    9bf4:	d139      	bne.n	9c6a <rename_to_unique.constprop.3+0x12a>
	for (i = 1; i < count; i++) {
    9bf6:	23fa      	movs	r3, #250	; 0xfa
    9bf8:	3401      	adds	r4, #1
    9bfa:	009b      	lsls	r3, r3, #2
    9bfc:	429c      	cmp	r4, r3
    9bfe:	d00f      	beq.n	9c20 <rename_to_unique.constprop.3+0xe0>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    9c00:	0022      	movs	r2, r4
    9c02:	4930      	ldr	r1, [pc, #192]	; (9cc4 <rename_to_unique.constprop.3+0x184>)
    9c04:	a803      	add	r0, sp, #12
    9c06:	47d8      	blx	fp
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    9c08:	2203      	movs	r2, #3
    9c0a:	a903      	add	r1, sp, #12
    9c0c:	4648      	mov	r0, r9
    9c0e:	47d0      	blx	sl
		if (valid_ext) {
    9c10:	9b00      	ldr	r3, [sp, #0]
    9c12:	2b00      	cmp	r3, #0
    9c14:	d0e6      	beq.n	9be4 <rename_to_unique.constprop.3+0xa4>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9c16:	a904      	add	r1, sp, #16
    9c18:	9801      	ldr	r0, [sp, #4]
    9c1a:	4b2b      	ldr	r3, [pc, #172]	; (9cc8 <rename_to_unique.constprop.3+0x188>)
    9c1c:	4798      	blx	r3
    9c1e:	e7e1      	b.n	9be4 <rename_to_unique.constprop.3+0xa4>
		return false;
    9c20:	2000      	movs	r0, #0
}
    9c22:	b047      	add	sp, #284	; 0x11c
    9c24:	bc3c      	pop	{r2, r3, r4, r5}
    9c26:	4690      	mov	r8, r2
    9c28:	4699      	mov	r9, r3
    9c2a:	46a2      	mov	sl, r4
    9c2c:	46ab      	mov	fp, r5
    9c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(ext, p);
    9c30:	1c42      	adds	r2, r0, #1
    9c32:	4b26      	ldr	r3, [pc, #152]	; (9ccc <rename_to_unique.constprop.3+0x18c>)
    9c34:	0021      	movs	r1, r4
    9c36:	a804      	add	r0, sp, #16
    9c38:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    9c3a:	4653      	mov	r3, sl
    9c3c:	041b      	lsls	r3, r3, #16
    9c3e:	0c1b      	lsrs	r3, r3, #16
    9c40:	1af6      	subs	r6, r6, r3
    9c42:	2ef6      	cmp	r6, #246	; 0xf6
    9c44:	d91c      	bls.n	9c80 <rename_to_unique.constprop.3+0x140>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    9c46:	464b      	mov	r3, r9
    9c48:	26f6      	movs	r6, #246	; 0xf6
    9c4a:	1af6      	subs	r6, r6, r3
    9c4c:	b2b6      	uxth	r6, r6
				strncpy(name, file_path_name, name_len);
    9c4e:	4b1b      	ldr	r3, [pc, #108]	; (9cbc <rename_to_unique.constprop.3+0x17c>)
    9c50:	0032      	movs	r2, r6
    9c52:	4915      	ldr	r1, [pc, #84]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9c54:	a807      	add	r0, sp, #28
    9c56:	469a      	mov	sl, r3
    9c58:	4798      	blx	r3
    9c5a:	464a      	mov	r2, r9
    9c5c:	23f7      	movs	r3, #247	; 0xf7
    9c5e:	1a9b      	subs	r3, r3, r2
			valid_ext = true;
    9c60:	2201      	movs	r2, #1
    9c62:	b29b      	uxth	r3, r3
    9c64:	0019      	movs	r1, r3
    9c66:	9200      	str	r2, [sp, #0]
    9c68:	e7ab      	b.n	9bc2 <rename_to_unique.constprop.3+0x82>
			memset(file_path_name, 0, max_len);
    9c6a:	22fa      	movs	r2, #250	; 0xfa
    9c6c:	2100      	movs	r1, #0
    9c6e:	4b0c      	ldr	r3, [pc, #48]	; (9ca0 <rename_to_unique.constprop.3+0x160>)
    9c70:	480d      	ldr	r0, [pc, #52]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9c72:	4798      	blx	r3
			strcpy(file_path_name, name);
    9c74:	a907      	add	r1, sp, #28
    9c76:	480c      	ldr	r0, [pc, #48]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
    9c78:	4b13      	ldr	r3, [pc, #76]	; (9cc8 <rename_to_unique.constprop.3+0x188>)
    9c7a:	4798      	blx	r3
			return true;
    9c7c:	2001      	movs	r0, #1
    9c7e:	e7d0      	b.n	9c22 <rename_to_unique.constprop.3+0xe2>
				name_len = (p - file_path_name);
    9c80:	4b09      	ldr	r3, [pc, #36]	; (9ca8 <rename_to_unique.constprop.3+0x168>)
				strncpy(name, file_path_name, name_len);
    9c82:	a807      	add	r0, sp, #28
				name_len = (p - file_path_name);
    9c84:	1ae4      	subs	r4, r4, r3
				strncpy(name, file_path_name, name_len);
    9c86:	0426      	lsls	r6, r4, #16
    9c88:	0019      	movs	r1, r3
    9c8a:	0c36      	lsrs	r6, r6, #16
    9c8c:	4b0b      	ldr	r3, [pc, #44]	; (9cbc <rename_to_unique.constprop.3+0x17c>)
    9c8e:	0032      	movs	r2, r6
    9c90:	469a      	mov	sl, r3
    9c92:	4798      	blx	r3
			valid_ext = true;
    9c94:	2201      	movs	r2, #1
    9c96:	3401      	adds	r4, #1
    9c98:	b2a3      	uxth	r3, r4
    9c9a:	0019      	movs	r1, r3
    9c9c:	9200      	str	r2, [sp, #0]
    9c9e:	e790      	b.n	9bc2 <rename_to_unique.constprop.3+0x82>
    9ca0:	000135cb 	.word	0x000135cb
    9ca4:	20000644 	.word	0x20000644
    9ca8:	20000000 	.word	0x20000000
    9cac:	00012d8d 	.word	0x00012d8d
    9cb0:	000131d9 	.word	0x000131d9
    9cb4:	00013a8f 	.word	0x00013a8f
    9cb8:	00013ae9 	.word	0x00013ae9
    9cbc:	00013abf 	.word	0x00013abf
    9cc0:	000139ed 	.word	0x000139ed
    9cc4:	000151f0 	.word	0x000151f0
    9cc8:	00013a45 	.word	0x00013a45
    9ccc:	00013595 	.word	0x00013595

00009cd0 <store_file_packet.part.2>:
static void store_file_packet(char *data, uint32_t length)
    9cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cd2:	4647      	mov	r7, r8
    9cd4:	46ce      	mov	lr, r9
    9cd6:	b580      	push	{r7, lr}
	return ((down_state & mask) != 0);
    9cd8:	4d38      	ldr	r5, [pc, #224]	; (9dbc <store_file_packet.part.2+0xec>)
static void store_file_packet(char *data, uint32_t length)
    9cda:	b083      	sub	sp, #12
	return ((down_state & mask) != 0);
    9cdc:	782b      	ldrb	r3, [r5, #0]
static void store_file_packet(char *data, uint32_t length)
    9cde:	4680      	mov	r8, r0
    9ce0:	000f      	movs	r7, r1
	if (!is_state_set(DOWNLOADING)) {
    9ce2:	071b      	lsls	r3, r3, #28
    9ce4:	d45b      	bmi.n	9d9e <store_file_packet.part.2+0xce>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    9ce6:	2330      	movs	r3, #48	; 0x30
    9ce8:	4e35      	ldr	r6, [pc, #212]	; (9dc0 <store_file_packet.part.2+0xf0>)
		save_file_name[1] = ':';
    9cea:	4c36      	ldr	r4, [pc, #216]	; (9dc4 <store_file_packet.part.2+0xf4>)
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    9cec:	7033      	strb	r3, [r6, #0]
		save_file_name[1] = ':';
    9cee:	330a      	adds	r3, #10
    9cf0:	7073      	strb	r3, [r6, #1]
    9cf2:	e000      	b.n	9cf6 <store_file_packet.part.2+0x26>
		while (*cp != '/') {
    9cf4:	0004      	movs	r4, r0
			cp--;
    9cf6:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    9cf8:	7803      	ldrb	r3, [r0, #0]
    9cfa:	2b2f      	cmp	r3, #47	; 0x2f
    9cfc:	d1fa      	bne.n	9cf4 <store_file_packet.part.2+0x24>
		if (strlen(cp) > 1) {
    9cfe:	4b32      	ldr	r3, [pc, #200]	; (9dc8 <store_file_packet.part.2+0xf8>)
    9d00:	4798      	blx	r3
    9d02:	2801      	cmp	r0, #1
    9d04:	d951      	bls.n	9daa <store_file_packet.part.2+0xda>
			strcpy(&save_file_name[2], cp);
    9d06:	0021      	movs	r1, r4
    9d08:	4b30      	ldr	r3, [pc, #192]	; (9dcc <store_file_packet.part.2+0xfc>)
    9d0a:	1cb0      	adds	r0, r6, #2
    9d0c:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    9d0e:	4b30      	ldr	r3, [pc, #192]	; (9dd0 <store_file_packet.part.2+0x100>)
    9d10:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    9d12:	4b30      	ldr	r3, [pc, #192]	; (9dd4 <store_file_packet.part.2+0x104>)
    9d14:	0031      	movs	r1, r6
    9d16:	4830      	ldr	r0, [pc, #192]	; (9dd8 <store_file_packet.part.2+0x108>)
    9d18:	4699      	mov	r9, r3
    9d1a:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    9d1c:	4c2f      	ldr	r4, [pc, #188]	; (9ddc <store_file_packet.part.2+0x10c>)
    9d1e:	220a      	movs	r2, #10
    9d20:	0031      	movs	r1, r6
    9d22:	0020      	movs	r0, r4
    9d24:	4b2e      	ldr	r3, [pc, #184]	; (9de0 <store_file_packet.part.2+0x110>)
    9d26:	4798      	blx	r3
		if (ret != FR_OK) {
    9d28:	2800      	cmp	r0, #0
    9d2a:	d13a      	bne.n	9da2 <store_file_packet.part.2+0xd2>
	down_state |= mask;
    9d2c:	2208      	movs	r2, #8
		received_file_size = 0;
    9d2e:	4b2d      	ldr	r3, [pc, #180]	; (9de4 <store_file_packet.part.2+0x114>)
    9d30:	6018      	str	r0, [r3, #0]
	down_state |= mask;
    9d32:	782b      	ldrb	r3, [r5, #0]
    9d34:	4313      	orrs	r3, r2
    9d36:	702b      	strb	r3, [r5, #0]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    9d38:	ab01      	add	r3, sp, #4
    9d3a:	003a      	movs	r2, r7
    9d3c:	4641      	mov	r1, r8
    9d3e:	0020      	movs	r0, r4
    9d40:	4e29      	ldr	r6, [pc, #164]	; (9de8 <store_file_packet.part.2+0x118>)
		UINT wsize = length;
    9d42:	9701      	str	r7, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    9d44:	47b0      	blx	r6
		if (ret != FR_OK) {
    9d46:	2800      	cmp	r0, #0
    9d48:	d00e      	beq.n	9d68 <store_file_packet.part.2+0x98>
			f_close(&file_object);
    9d4a:	4b28      	ldr	r3, [pc, #160]	; (9dec <store_file_packet.part.2+0x11c>)
    9d4c:	0020      	movs	r0, r4
    9d4e:	4798      	blx	r3
	down_state |= mask;
    9d50:	2220      	movs	r2, #32
    9d52:	782b      	ldrb	r3, [r5, #0]
			printf("store_file_packet: file write error, download canceled.\r\n");
    9d54:	4826      	ldr	r0, [pc, #152]	; (9df0 <store_file_packet.part.2+0x120>)
	down_state |= mask;
    9d56:	4313      	orrs	r3, r2
    9d58:	702b      	strb	r3, [r5, #0]
			printf("store_file_packet: file write error, download canceled.\r\n");
    9d5a:	4b26      	ldr	r3, [pc, #152]	; (9df4 <store_file_packet.part.2+0x124>)
    9d5c:	4798      	blx	r3
}
    9d5e:	b003      	add	sp, #12
    9d60:	bc0c      	pop	{r2, r3}
    9d62:	4690      	mov	r8, r2
    9d64:	4699      	mov	r9, r3
    9d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		received_file_size += wsize;
    9d68:	9a01      	ldr	r2, [sp, #4]
    9d6a:	4e1e      	ldr	r6, [pc, #120]	; (9de4 <store_file_packet.part.2+0x114>)
    9d6c:	4694      	mov	ip, r2
    9d6e:	6833      	ldr	r3, [r6, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    9d70:	4f21      	ldr	r7, [pc, #132]	; (9df8 <store_file_packet.part.2+0x128>)
		received_file_size += wsize;
    9d72:	4463      	add	r3, ip
    9d74:	0019      	movs	r1, r3
    9d76:	6033      	str	r3, [r6, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    9d78:	683a      	ldr	r2, [r7, #0]
    9d7a:	4b16      	ldr	r3, [pc, #88]	; (9dd4 <store_file_packet.part.2+0x104>)
    9d7c:	481f      	ldr	r0, [pc, #124]	; (9dfc <store_file_packet.part.2+0x12c>)
    9d7e:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    9d80:	6832      	ldr	r2, [r6, #0]
    9d82:	683b      	ldr	r3, [r7, #0]
    9d84:	429a      	cmp	r2, r3
    9d86:	d3ea      	bcc.n	9d5e <store_file_packet.part.2+0x8e>
			f_close(&file_object);
    9d88:	4b18      	ldr	r3, [pc, #96]	; (9dec <store_file_packet.part.2+0x11c>)
    9d8a:	0020      	movs	r0, r4
    9d8c:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    9d8e:	4b19      	ldr	r3, [pc, #100]	; (9df4 <store_file_packet.part.2+0x124>)
    9d90:	481b      	ldr	r0, [pc, #108]	; (9e00 <store_file_packet.part.2+0x130>)
    9d92:	4798      	blx	r3
	down_state |= mask;
    9d94:	2210      	movs	r2, #16
    9d96:	782b      	ldrb	r3, [r5, #0]
    9d98:	4313      	orrs	r3, r2
    9d9a:	702b      	strb	r3, [r5, #0]
    9d9c:	e7df      	b.n	9d5e <store_file_packet.part.2+0x8e>
    9d9e:	4c0f      	ldr	r4, [pc, #60]	; (9ddc <store_file_packet.part.2+0x10c>)
    9da0:	e7ca      	b.n	9d38 <store_file_packet.part.2+0x68>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    9da2:	0001      	movs	r1, r0
    9da4:	4817      	ldr	r0, [pc, #92]	; (9e04 <store_file_packet.part.2+0x134>)
    9da6:	47c8      	blx	r9
    9da8:	e7d9      	b.n	9d5e <store_file_packet.part.2+0x8e>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    9daa:	4b12      	ldr	r3, [pc, #72]	; (9df4 <store_file_packet.part.2+0x124>)
    9dac:	4816      	ldr	r0, [pc, #88]	; (9e08 <store_file_packet.part.2+0x138>)
    9dae:	4798      	blx	r3
	down_state |= mask;
    9db0:	2220      	movs	r2, #32
    9db2:	782b      	ldrb	r3, [r5, #0]
    9db4:	4313      	orrs	r3, r2
    9db6:	702b      	strb	r3, [r5, #0]
    9db8:	e7d1      	b.n	9d5e <store_file_packet.part.2+0x8e>
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	20000410 	.word	0x20000410
    9dc0:	20000000 	.word	0x20000000
    9dc4:	00015330 	.word	0x00015330
    9dc8:	00013a8f 	.word	0x00013a8f
    9dcc:	00013a45 	.word	0x00013a45
    9dd0:	00009b41 	.word	0x00009b41
    9dd4:	0001372d 	.word	0x0001372d
    9dd8:	00015334 	.word	0x00015334
    9ddc:	20000644 	.word	0x20000644
    9de0:	00012d8d 	.word	0x00012d8d
    9de4:	2000066c 	.word	0x2000066c
    9de8:	00012f09 	.word	0x00012f09
    9dec:	000131d9 	.word	0x000131d9
    9df0:	000153d0 	.word	0x000153d0
    9df4:	00013849 	.word	0x00013849
    9df8:	20000668 	.word	0x20000668
    9dfc:	0001540c 	.word	0x0001540c
    9e00:	00015440 	.word	0x00015440
    9e04:	0001539c 	.word	0x0001539c
    9e08:	0001535c 	.word	0x0001535c

00009e0c <http_client_callback>:
{
    9e0c:	b570      	push	{r4, r5, r6, lr}
    9e0e:	0014      	movs	r4, r2
	switch (type) {
    9e10:	2904      	cmp	r1, #4
    9e12:	d813      	bhi.n	9e3c <http_client_callback+0x30>
    9e14:	4b32      	ldr	r3, [pc, #200]	; (9ee0 <http_client_callback+0xd4>)
    9e16:	0089      	lsls	r1, r1, #2
    9e18:	585b      	ldr	r3, [r3, r1]
    9e1a:	469f      	mov	pc, r3
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    9e1c:	6850      	ldr	r0, [r2, #4]
    9e1e:	6811      	ldr	r1, [r2, #0]
	if ((data == NULL) || (length < 1)) {
    9e20:	2800      	cmp	r0, #0
    9e22:	d03b      	beq.n	9e9c <http_client_callback+0x90>
    9e24:	2900      	cmp	r1, #0
    9e26:	d039      	beq.n	9e9c <http_client_callback+0x90>
    9e28:	4b2e      	ldr	r3, [pc, #184]	; (9ee4 <http_client_callback+0xd8>)
    9e2a:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    9e2c:	7a23      	ldrb	r3, [r4, #8]
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d004      	beq.n	9e3c <http_client_callback+0x30>
	down_state |= mask;
    9e32:	2110      	movs	r1, #16
    9e34:	4a2c      	ldr	r2, [pc, #176]	; (9ee8 <http_client_callback+0xdc>)
    9e36:	7813      	ldrb	r3, [r2, #0]
    9e38:	430b      	orrs	r3, r1
    9e3a:	7013      	strb	r3, [r2, #0]
}
    9e3c:	bd70      	pop	{r4, r5, r6, pc}
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    9e3e:	4b2b      	ldr	r3, [pc, #172]	; (9eec <http_client_callback+0xe0>)
    9e40:	6811      	ldr	r1, [r2, #0]
    9e42:	482b      	ldr	r0, [pc, #172]	; (9ef0 <http_client_callback+0xe4>)
    9e44:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    9e46:	6823      	ldr	r3, [r4, #0]
    9e48:	330b      	adds	r3, #11
    9e4a:	d1f7      	bne.n	9e3c <http_client_callback+0x30>
	return ((down_state & mask) != 0);
    9e4c:	2508      	movs	r5, #8
    9e4e:	4c26      	ldr	r4, [pc, #152]	; (9ee8 <http_client_callback+0xdc>)
    9e50:	7823      	ldrb	r3, [r4, #0]
			if (is_state_set(DOWNLOADING)) {
    9e52:	421d      	tst	r5, r3
    9e54:	d138      	bne.n	9ec8 <http_client_callback+0xbc>
	return ((down_state & mask) != 0);
    9e56:	2204      	movs	r2, #4
			if (is_state_set(GET_REQUESTED)) {
    9e58:	421a      	tst	r2, r3
    9e5a:	d001      	beq.n	9e60 <http_client_callback+0x54>
	down_state &= ~mask;
    9e5c:	4393      	bics	r3, r2
    9e5e:	7023      	strb	r3, [r4, #0]
			start_download();
    9e60:	4b24      	ldr	r3, [pc, #144]	; (9ef4 <http_client_callback+0xe8>)
    9e62:	4798      	blx	r3
    9e64:	e7ea      	b.n	9e3c <http_client_callback+0x30>
		printf("http_client_callback: request completed.\r\n");
    9e66:	4b24      	ldr	r3, [pc, #144]	; (9ef8 <http_client_callback+0xec>)
    9e68:	4824      	ldr	r0, [pc, #144]	; (9efc <http_client_callback+0xf0>)
    9e6a:	4798      	blx	r3
	down_state |= mask;
    9e6c:	2104      	movs	r1, #4
    9e6e:	4a1e      	ldr	r2, [pc, #120]	; (9ee8 <http_client_callback+0xdc>)
    9e70:	7813      	ldrb	r3, [r2, #0]
    9e72:	430b      	orrs	r3, r1
    9e74:	7013      	strb	r3, [r2, #0]
    9e76:	e7e1      	b.n	9e3c <http_client_callback+0x30>
		printf("http_client_callback: HTTP client socket connected.\r\n");
    9e78:	4b1f      	ldr	r3, [pc, #124]	; (9ef8 <http_client_callback+0xec>)
    9e7a:	4821      	ldr	r0, [pc, #132]	; (9f00 <http_client_callback+0xf4>)
    9e7c:	4798      	blx	r3
		break;
    9e7e:	e7dd      	b.n	9e3c <http_client_callback+0x30>
		printf("http_client_callback: received response %u data size %u\r\n",
    9e80:	8811      	ldrh	r1, [r2, #0]
    9e82:	4b1a      	ldr	r3, [pc, #104]	; (9eec <http_client_callback+0xe0>)
    9e84:	6852      	ldr	r2, [r2, #4]
    9e86:	481f      	ldr	r0, [pc, #124]	; (9f04 <http_client_callback+0xf8>)
    9e88:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    9e8a:	8823      	ldrh	r3, [r4, #0]
    9e8c:	2bc8      	cmp	r3, #200	; 0xc8
    9e8e:	d009      	beq.n	9ea4 <http_client_callback+0x98>
	down_state |= mask;
    9e90:	2120      	movs	r1, #32
    9e92:	4a15      	ldr	r2, [pc, #84]	; (9ee8 <http_client_callback+0xdc>)
    9e94:	7813      	ldrb	r3, [r2, #0]
    9e96:	430b      	orrs	r3, r1
    9e98:	7013      	strb	r3, [r2, #0]
    9e9a:	e7cf      	b.n	9e3c <http_client_callback+0x30>
		printf("store_file_packet: empty data.\r\n");
    9e9c:	4b16      	ldr	r3, [pc, #88]	; (9ef8 <http_client_callback+0xec>)
    9e9e:	481a      	ldr	r0, [pc, #104]	; (9f08 <http_client_callback+0xfc>)
    9ea0:	4798      	blx	r3
    9ea2:	e7c3      	b.n	9e2c <http_client_callback+0x20>
			received_file_size = 0;
    9ea4:	2200      	movs	r2, #0
			http_file_size = data->recv_response.content_length;
    9ea6:	4b19      	ldr	r3, [pc, #100]	; (9f0c <http_client_callback+0x100>)
    9ea8:	6861      	ldr	r1, [r4, #4]
    9eaa:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    9eac:	4b18      	ldr	r3, [pc, #96]	; (9f10 <http_client_callback+0x104>)
    9eae:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    9eb0:	2380      	movs	r3, #128	; 0x80
    9eb2:	00db      	lsls	r3, r3, #3
    9eb4:	4299      	cmp	r1, r3
    9eb6:	d8c1      	bhi.n	9e3c <http_client_callback+0x30>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    9eb8:	68a0      	ldr	r0, [r4, #8]
	if ((data == NULL) || (length < 1)) {
    9eba:	2800      	cmp	r0, #0
    9ebc:	d00b      	beq.n	9ed6 <http_client_callback+0xca>
    9ebe:	2900      	cmp	r1, #0
    9ec0:	d009      	beq.n	9ed6 <http_client_callback+0xca>
    9ec2:	4b08      	ldr	r3, [pc, #32]	; (9ee4 <http_client_callback+0xd8>)
    9ec4:	4798      	blx	r3
    9ec6:	e7b4      	b.n	9e32 <http_client_callback+0x26>
				f_close(&file_object);
    9ec8:	4b12      	ldr	r3, [pc, #72]	; (9f14 <http_client_callback+0x108>)
    9eca:	4813      	ldr	r0, [pc, #76]	; (9f18 <http_client_callback+0x10c>)
    9ecc:	4798      	blx	r3
	down_state &= ~mask;
    9ece:	7823      	ldrb	r3, [r4, #0]
    9ed0:	43ab      	bics	r3, r5
    9ed2:	7023      	strb	r3, [r4, #0]
    9ed4:	e7bf      	b.n	9e56 <http_client_callback+0x4a>
		printf("store_file_packet: empty data.\r\n");
    9ed6:	4b08      	ldr	r3, [pc, #32]	; (9ef8 <http_client_callback+0xec>)
    9ed8:	480b      	ldr	r0, [pc, #44]	; (9f08 <http_client_callback+0xfc>)
    9eda:	4798      	blx	r3
    9edc:	e7a9      	b.n	9e32 <http_client_callback+0x26>
    9ede:	46c0      	nop			; (mov r8, r8)
    9ee0:	00014f4c 	.word	0x00014f4c
    9ee4:	00009cd1 	.word	0x00009cd1
    9ee8:	20000410 	.word	0x20000410
    9eec:	0001372d 	.word	0x0001372d
    9ef0:	00015020 	.word	0x00015020
    9ef4:	00009a09 	.word	0x00009a09
    9ef8:	00013849 	.word	0x00013849
    9efc:	00014f98 	.word	0x00014f98
    9f00:	00014f60 	.word	0x00014f60
    9f04:	00014fc4 	.word	0x00014fc4
    9f08:	00015000 	.word	0x00015000
    9f0c:	20000668 	.word	0x20000668
    9f10:	2000066c 	.word	0x2000066c
    9f14:	000131d9 	.word	0x000131d9
    9f18:	20000644 	.word	0x20000644

00009f1c <SYSCTRL_Handler>:
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    9f1c:	2280      	movs	r2, #128	; 0x80
    9f1e:	4b05      	ldr	r3, [pc, #20]	; (9f34 <SYSCTRL_Handler+0x18>)
    9f20:	00d2      	lsls	r2, r2, #3
    9f22:	6899      	ldr	r1, [r3, #8]
    9f24:	4211      	tst	r1, r2
    9f26:	d003      	beq.n	9f30 <SYSCTRL_Handler+0x14>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    9f28:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    9f2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    9f2e:	bf30      	wfi
}
    9f30:	4770      	bx	lr
    9f32:	46c0      	nop			; (mov r8, r8)
    9f34:	40000800 	.word	0x40000800

00009f38 <main>:
		return;
	}
}

int main(void)
{
    9f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f3a:	46de      	mov	lr, fp
    9f3c:	4657      	mov	r7, sl
    9f3e:	464e      	mov	r6, r9
    9f40:	4645      	mov	r5, r8
    9f42:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
    9f44:	4b7f      	ldr	r3, [pc, #508]	; (a144 <main+0x20c>)
{
    9f46:	b08b      	sub	sp, #44	; 0x2c
	system_init();
    9f48:	4798      	blx	r3
	delay_init();
    9f4a:	4b7f      	ldr	r3, [pc, #508]	; (a148 <main+0x210>)
    9f4c:	4798      	blx	r3
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    9f4e:	2300      	movs	r3, #0
    9f50:	ac03      	add	r4, sp, #12
    9f52:	469a      	mov	sl, r3
    9f54:	8023      	strh	r3, [r4, #0]
	config_bod33.action = BOD_ACTION_INTERRUPT;
    9f56:	2310      	movs	r3, #16
    9f58:	2500      	movs	r5, #0
	conf->mode           = BOD_MODE_CONTINUOUS;
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    9f5a:	2601      	movs	r6, #1
    9f5c:	7123      	strb	r3, [r4, #4]
	config_bod33.mode = BOD_MODE_SAMPLED;
    9f5e:	33f0      	adds	r3, #240	; 0xf0
    9f60:	8063      	strh	r3, [r4, #2]
	config_bod33.level = 40;						// Set to 2.8V
    9f62:	3bd8      	subs	r3, #216	; 0xd8
    9f64:	7163      	strb	r3, [r4, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    9f66:	0021      	movs	r1, r4
    9f68:	4b78      	ldr	r3, [pc, #480]	; (a14c <main+0x214>)
    9f6a:	2000      	movs	r0, #0
    9f6c:	71a6      	strb	r6, [r4, #6]
	config_bod33.run_in_standby = 0;
    9f6e:	71e5      	strb	r5, [r4, #7]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    9f70:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    9f72:	2102      	movs	r1, #2
    9f74:	4b76      	ldr	r3, [pc, #472]	; (a150 <main+0x218>)
	rtc_instance.hw = RTC;
    9f76:	4f77      	ldr	r7, [pc, #476]	; (a154 <main+0x21c>)
    9f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9f7a:	4688      	mov	r8, r1
    9f7c:	430a      	orrs	r2, r1
    9f7e:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    9f80:	2280      	movs	r2, #128	; 0x80
    9f82:	00d2      	lsls	r2, r2, #3
    9f84:	605a      	str	r2, [r3, #4]
    9f86:	4b74      	ldr	r3, [pc, #464]	; (a158 <main+0x220>)
    9f88:	4691      	mov	r9, r2
    9f8a:	6019      	str	r1, [r3, #0]
	rtc_instance.hw = RTC;
    9f8c:	4b73      	ldr	r3, [pc, #460]	; (a15c <main+0x224>)
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    9f8e:	22a0      	movs	r2, #160	; 0xa0
    9f90:	603b      	str	r3, [r7, #0]
    9f92:	469b      	mov	fp, r3
	rtc_instance.year_init_value = 2000;
    9f94:	23fa      	movs	r3, #250	; 0xfa
    9f96:	00db      	lsls	r3, r3, #3
    9f98:	80fb      	strh	r3, [r7, #6]
	config->clear_on_match      = false;
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    9f9a:	80e3      	strh	r3, [r4, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    9f9c:	81e3      	strh	r3, [r4, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    9f9e:	2306      	movs	r3, #6
    9fa0:	7423      	strb	r3, [r4, #16]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    9fa2:	4643      	mov	r3, r8
    9fa4:	a902      	add	r1, sp, #8
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    9fa6:	0112      	lsls	r2, r2, #4
    9fa8:	700b      	strb	r3, [r1, #0]
		config->alarm[i].time = time;
    9faa:	7225      	strb	r5, [r4, #8]
    9fac:	7265      	strb	r5, [r4, #9]
    9fae:	72a5      	strb	r5, [r4, #10]
    9fb0:	72e5      	strb	r5, [r4, #11]
    9fb2:	7326      	strb	r6, [r4, #12]
    9fb4:	7366      	strb	r6, [r4, #13]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    9fb6:	2004      	movs	r0, #4
    9fb8:	4b69      	ldr	r3, [pc, #420]	; (a160 <main+0x228>)
	rtc_instance.clock_24h = 1;
    9fba:	713e      	strb	r6, [r7, #4]
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    9fbc:	8022      	strh	r2, [r4, #0]
	config->clear_on_match      = false;
    9fbe:	70a5      	strb	r5, [r4, #2]
	config->continuously_update = false;
    9fc0:	70e5      	strb	r5, [r4, #3]
	config_rtc_calendar.clock_24h = true;
    9fc2:	7126      	strb	r6, [r4, #4]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    9fc4:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    9fc6:	2004      	movs	r0, #4
    9fc8:	4b66      	ldr	r3, [pc, #408]	; (a164 <main+0x22c>)
    9fca:	4798      	blx	r3
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    9fcc:	0022      	movs	r2, r4
    9fce:	4659      	mov	r1, fp
    9fd0:	0038      	movs	r0, r7
    9fd2:	4b65      	ldr	r3, [pc, #404]	; (a168 <main+0x230>)
    9fd4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    9fd6:	0038      	movs	r0, r7
    9fd8:	4b64      	ldr	r3, [pc, #400]	; (a16c <main+0x234>)
    9fda:	4798      	blx	r3
	extint_chan_get_config_defaults(&ext_conf);
    9fdc:	0020      	movs	r0, r4
    9fde:	4b64      	ldr	r3, [pc, #400]	; (a170 <main+0x238>)
    9fe0:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    9fe2:	4643      	mov	r3, r8
    9fe4:	72e3      	strb	r3, [r4, #11]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    9fe6:	2303      	movs	r3, #3
    9fe8:	9303      	str	r3, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    9fea:	4653      	mov	r3, sl
    9fec:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(3, &ext_conf);
    9fee:	4b61      	ldr	r3, [pc, #388]	; (a174 <main+0x23c>)
    9ff0:	0021      	movs	r1, r4
    9ff2:	2003      	movs	r0, #3
    9ff4:	4698      	mov	r8, r3
	ext_conf.filter_input_signal = true;
    9ff6:	72a6      	strb	r6, [r4, #10]
	ext_conf.wake_if_sleeping = true;
    9ff8:	7266      	strb	r6, [r4, #9]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    9ffa:	7226      	strb	r6, [r4, #8]
	extint_chan_set_config(3, &ext_conf);
    9ffc:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    9ffe:	2100      	movs	r1, #0
    a000:	4f5d      	ldr	r7, [pc, #372]	; (a178 <main+0x240>)
    a002:	2003      	movs	r0, #3
    a004:	47b8      	blx	r7
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    a006:	231f      	movs	r3, #31
    a008:	9303      	str	r3, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    a00a:	4653      	mov	r3, sl
	extint_chan_set_config(11, &ext_conf);
    a00c:	0021      	movs	r1, r4
    a00e:	200b      	movs	r0, #11
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    a010:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(11, &ext_conf);
    a012:	47c0      	blx	r8
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    a014:	2100      	movs	r1, #0
    a016:	200b      	movs	r0, #11
    a018:	47b8      	blx	r7
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    a01a:	4b58      	ldr	r3, [pc, #352]	; (a17c <main+0x244>)
    a01c:	701d      	strb	r5, [r3, #0]
    a01e:	705d      	strb	r5, [r3, #1]
    a020:	709d      	strb	r5, [r3, #2]
    a022:	70dd      	strb	r5, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    a024:	711e      	strb	r6, [r3, #4]
	configure_bod();
	configure_rtc();
	configure_wakeup();
	sleepmgr_init();
	stdio_usb_init();
    a026:	4b56      	ldr	r3, [pc, #344]	; (a180 <main+0x248>)
    a028:	4798      	blx	r3
	stdio_usb_enable();
    a02a:	4b56      	ldr	r3, [pc, #344]	; (a184 <main+0x24c>)
    a02c:	4798      	blx	r3
	down_state = NOT_READY;
    a02e:	4e56      	ldr	r6, [pc, #344]	; (a188 <main+0x250>)
	sw_timer_get_config_defaults(&swt_conf);
    a030:	0020      	movs	r0, r4
    a032:	4b56      	ldr	r3, [pc, #344]	; (a18c <main+0x254>)
	down_state = NOT_READY;
    a034:	7035      	strb	r5, [r6, #0]
	sw_timer_get_config_defaults(&swt_conf);
    a036:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    a038:	4b55      	ldr	r3, [pc, #340]	; (a190 <main+0x258>)
    a03a:	0021      	movs	r1, r4
    a03c:	4698      	mov	r8, r3
    a03e:	0018      	movs	r0, r3
    a040:	4b54      	ldr	r3, [pc, #336]	; (a194 <main+0x25c>)
    a042:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    a044:	4640      	mov	r0, r8
    a046:	4b54      	ldr	r3, [pc, #336]	; (a198 <main+0x260>)
    a048:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    a04a:	0020      	movs	r0, r4
    a04c:	4b53      	ldr	r3, [pc, #332]	; (a19c <main+0x264>)
    a04e:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    a050:	464b      	mov	r3, r9
    a052:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    a054:	4643      	mov	r3, r8
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    a056:	4d52      	ldr	r5, [pc, #328]	; (a1a0 <main+0x268>)
	httpc_conf.timer_inst = &swt_module_inst;
    a058:	6063      	str	r3, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    a05a:	0021      	movs	r1, r4
    a05c:	0028      	movs	r0, r5
    a05e:	4b51      	ldr	r3, [pc, #324]	; (a1a4 <main+0x26c>)
    a060:	4798      	blx	r3
    a062:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    a064:	db64      	blt.n	a130 <main+0x1f8>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    a066:	4950      	ldr	r1, [pc, #320]	; (a1a8 <main+0x270>)
    a068:	0028      	movs	r0, r5
    a06a:	4b50      	ldr	r3, [pc, #320]	; (a1ac <main+0x274>)
    a06c:	4798      	blx	r3
	sd_mmc_init();
    a06e:	4b50      	ldr	r3, [pc, #320]	; (a1b0 <main+0x278>)
    a070:	4798      	blx	r3
    a072:	4b50      	ldr	r3, [pc, #320]	; (a1b4 <main+0x27c>)
    a074:	4d50      	ldr	r5, [pc, #320]	; (a1b8 <main+0x280>)
    a076:	469b      	mov	fp, r3
    a078:	4b50      	ldr	r3, [pc, #320]	; (a1bc <main+0x284>)
    a07a:	4f51      	ldr	r7, [pc, #324]	; (a1c0 <main+0x288>)
    a07c:	469a      	mov	sl, r3
    a07e:	4b51      	ldr	r3, [pc, #324]	; (a1c4 <main+0x28c>)
    a080:	4699      	mov	r9, r3
			status = sd_mmc_test_unit_ready(0);
    a082:	2000      	movs	r0, #0
    a084:	47d8      	blx	fp
			if (CTRL_FAIL == status) {
    a086:	2801      	cmp	r0, #1
    a088:	d023      	beq.n	a0d2 <main+0x19a>
		} while (CTRL_GOOD != status);
    a08a:	2800      	cmp	r0, #0
    a08c:	d1f9      	bne.n	a082 <main+0x14a>
		printf("init_storage: mounting SD card...\r\n");
    a08e:	484e      	ldr	r0, [pc, #312]	; (a1c8 <main+0x290>)
    a090:	47a8      	blx	r5
		memset(&fatfs, 0, sizeof(FATFS));
    a092:	228c      	movs	r2, #140	; 0x8c
    a094:	4f4d      	ldr	r7, [pc, #308]	; (a1cc <main+0x294>)
    a096:	2100      	movs	r1, #0
    a098:	4b4d      	ldr	r3, [pc, #308]	; (a1d0 <main+0x298>)
    a09a:	0092      	lsls	r2, r2, #2
    a09c:	0038      	movs	r0, r7
    a09e:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    a0a0:	0039      	movs	r1, r7
    a0a2:	2000      	movs	r0, #0
    a0a4:	4b4b      	ldr	r3, [pc, #300]	; (a1d4 <main+0x29c>)
    a0a6:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    a0a8:	280b      	cmp	r0, #11
    a0aa:	d045      	beq.n	a138 <main+0x200>
		printf("init_storage: SD card mount OK.\r\n");
    a0ac:	484a      	ldr	r0, [pc, #296]	; (a1d8 <main+0x2a0>)
    a0ae:	47a8      	blx	r5
	down_state |= mask;
    a0b0:	2301      	movs	r3, #1
    a0b2:	7832      	ldrb	r2, [r6, #0]
    a0b4:	4f49      	ldr	r7, [pc, #292]	; (a1dc <main+0x2a4>)
    a0b6:	4313      	orrs	r3, r2
    a0b8:	7033      	strb	r3, [r6, #0]
	init_state();
	configure_iot_sw_timer();
	configure_http_client();
	init_storage();
	nm_bsp_init();
    a0ba:	4b49      	ldr	r3, [pc, #292]	; (a1e0 <main+0x2a8>)
    a0bc:	4798      	blx	r3

	tstrWifiInitParam param;
	int8_t ret;
		
	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    a0be:	4b49      	ldr	r3, [pc, #292]	; (a1e4 <main+0x2ac>)
	ret = m2m_wifi_init(&param);
    a0c0:	0020      	movs	r0, r4
	param.pfAppWifiCb = wifi_cb;
    a0c2:	9303      	str	r3, [sp, #12]
	ret = m2m_wifi_init(&param);
    a0c4:	4b48      	ldr	r3, [pc, #288]	; (a1e8 <main+0x2b0>)
    a0c6:	4798      	blx	r3
    a0c8:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    a0ca:	d00b      	beq.n	a0e4 <main+0x1ac>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    a0cc:	4847      	ldr	r0, [pc, #284]	; (a1ec <main+0x2b4>)
    a0ce:	47b8      	blx	r7
    a0d0:	e7fe      	b.n	a0d0 <main+0x198>
				printf("init_storage: SD Card install failed.\r\n");
    a0d2:	4650      	mov	r0, sl
    a0d4:	47a8      	blx	r5
				printf("init_storage: try unplug and re-plug the card.\r\n");
    a0d6:	4648      	mov	r0, r9
    a0d8:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    a0da:	2000      	movs	r0, #0
    a0dc:	47b8      	blx	r7
    a0de:	2802      	cmp	r0, #2
    a0e0:	d1fb      	bne.n	a0da <main+0x1a2>
    a0e2:	e7ce      	b.n	a082 <main+0x14a>
		while (1) {
		}
	}

	/* Initialize socket module. */
	socketInit();
    a0e4:	4b42      	ldr	r3, [pc, #264]	; (a1f0 <main+0x2b8>)
    a0e6:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    a0e8:	4b42      	ldr	r3, [pc, #264]	; (a1f4 <main+0x2bc>)
    a0ea:	4943      	ldr	r1, [pc, #268]	; (a1f8 <main+0x2c0>)
    a0ec:	4843      	ldr	r0, [pc, #268]	; (a1fc <main+0x2c4>)
    a0ee:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    a0f0:	4c43      	ldr	r4, [pc, #268]	; (a200 <main+0x2c8>)
    a0f2:	4844      	ldr	r0, [pc, #272]	; (a204 <main+0x2cc>)
    a0f4:	0021      	movs	r1, r4
    a0f6:	47b8      	blx	r7
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    a0f8:	23ff      	movs	r3, #255	; 0xff
    a0fa:	2202      	movs	r2, #2
    a0fc:	9300      	str	r3, [sp, #0]
    a0fe:	210b      	movs	r1, #11
    a100:	4b41      	ldr	r3, [pc, #260]	; (a208 <main+0x2d0>)
    a102:	0020      	movs	r0, r4
    a104:	4c41      	ldr	r4, [pc, #260]	; (a20c <main+0x2d4>)
    a106:	47a0      	blx	r4

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    a108:	2330      	movs	r3, #48	; 0x30
    a10a:	4941      	ldr	r1, [pc, #260]	; (a210 <main+0x2d8>)
    a10c:	7832      	ldrb	r2, [r6, #0]
    a10e:	4689      	mov	r9, r1
    a110:	4f40      	ldr	r7, [pc, #256]	; (a214 <main+0x2dc>)
    a112:	001c      	movs	r4, r3
    a114:	421a      	tst	r2, r3
    a116:	d106      	bne.n	a126 <main+0x1ee>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    a118:	2000      	movs	r0, #0
    a11a:	47c8      	blx	r9
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    a11c:	4640      	mov	r0, r8
    a11e:	47b8      	blx	r7
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    a120:	7833      	ldrb	r3, [r6, #0]
    a122:	421c      	tst	r4, r3
    a124:	d0f8      	beq.n	a118 <main+0x1e0>
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    a126:	483c      	ldr	r0, [pc, #240]	; (a218 <main+0x2e0>)
    a128:	47a8      	blx	r5
	printf("main: done.\r\n");
    a12a:	483c      	ldr	r0, [pc, #240]	; (a21c <main+0x2e4>)
    a12c:	47a8      	blx	r5
    a12e:	e7fe      	b.n	a12e <main+0x1f6>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    a130:	483b      	ldr	r0, [pc, #236]	; (a220 <main+0x2e8>)
    a132:	4b2a      	ldr	r3, [pc, #168]	; (a1dc <main+0x2a4>)
    a134:	4798      	blx	r3
    a136:	e7fe      	b.n	a136 <main+0x1fe>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    a138:	210b      	movs	r1, #11
    a13a:	4f28      	ldr	r7, [pc, #160]	; (a1dc <main+0x2a4>)
    a13c:	4839      	ldr	r0, [pc, #228]	; (a224 <main+0x2ec>)
    a13e:	47b8      	blx	r7
    a140:	e7bb      	b.n	a0ba <main+0x182>
    a142:	46c0      	nop			; (mov r8, r8)
    a144:	0001029d 	.word	0x0001029d
    a148:	0000aed5 	.word	0x0000aed5
    a14c:	0000ecc5 	.word	0x0000ecc5
    a150:	40000800 	.word	0x40000800
    a154:	200009c4 	.word	0x200009c4
    a158:	e000e100 	.word	0xe000e100
    a15c:	40001400 	.word	0x40001400
    a160:	00010169 	.word	0x00010169
    a164:	000100e1 	.word	0x000100e1
    a168:	0000f10d 	.word	0x0000f10d
    a16c:	0000efb1 	.word	0x0000efb1
    a170:	0000ef01 	.word	0x0000ef01
    a174:	0000ef15 	.word	0x0000ef15
    a178:	0000ee05 	.word	0x0000ee05
    a17c:	20000c54 	.word	0x20000c54
    a180:	0000ec75 	.word	0x0000ec75
    a184:	0000ec65 	.word	0x0000ec65
    a188:	20000410 	.word	0x20000410
    a18c:	000097e1 	.word	0x000097e1
    a190:	200009d8 	.word	0x200009d8
    a194:	000097ed 	.word	0x000097ed
    a198:	00009895 	.word	0x00009895
    a19c:	0000886d 	.word	0x0000886d
    a1a0:	20000a44 	.word	0x20000a44
    a1a4:	00008895 	.word	0x00008895
    a1a8:	00009e0d 	.word	0x00009e0d
    a1ac:	00008931 	.word	0x00008931
    a1b0:	0000a47d 	.word	0x0000a47d
    a1b4:	00008115 	.word	0x00008115
    a1b8:	00013849 	.word	0x00013849
    a1bc:	00015098 	.word	0x00015098
    a1c0:	0000a49d 	.word	0x0000a49d
    a1c4:	000150c0 	.word	0x000150c0
    a1c8:	000150f0 	.word	0x000150f0
    a1cc:	20000414 	.word	0x20000414
    a1d0:	000135cb 	.word	0x000135cb
    a1d4:	00012d65 	.word	0x00012d65
    a1d8:	00015144 	.word	0x00015144
    a1dc:	0001372d 	.word	0x0001372d
    a1e0:	0000afa9 	.word	0x0000afa9
    a1e4:	00009a85 	.word	0x00009a85
    a1e8:	0000be4d 	.word	0x0000be4d
    a1ec:	00015168 	.word	0x00015168
    a1f0:	0000d9b1 	.word	0x0000d9b1
    a1f4:	0000d9f1 	.word	0x0000d9f1
    a1f8:	000099c1 	.word	0x000099c1
    a1fc:	000099fd 	.word	0x000099fd
    a200:	000154c0 	.word	0x000154c0
    a204:	00015194 	.word	0x00015194
    a208:	000154b4 	.word	0x000154b4
    a20c:	0000c1a5 	.word	0x0000c1a5
    a210:	0000bf85 	.word	0x0000bf85
    a214:	00009931 	.word	0x00009931
    a218:	000151b8 	.word	0x000151b8
    a21c:	000151e0 	.word	0x000151e0
    a220:	00015050 	.word	0x00015050
    a224:	00015114 	.word	0x00015114

0000a228 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    a228:	b5f0      	push	{r4, r5, r6, r7, lr}
    a22a:	46c6      	mov	lr, r8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    a22c:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
    a22e:	2701      	movs	r7, #1
    a230:	b500      	push	{lr}
    a232:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    a234:	ac01      	add	r4, sp, #4

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    a236:	4d4d      	ldr	r5, [pc, #308]	; (a36c <system_board_init+0x144>)
    a238:	0021      	movs	r1, r4
    a23a:	2013      	movs	r0, #19
    a23c:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    a23e:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    a240:	70a6      	strb	r6, [r4, #2]
    a242:	47a8      	blx	r5
    a244:	0021      	movs	r1, r4
    a246:	2010      	movs	r0, #16
    a248:	47a8      	blx	r5
    a24a:	0021      	movs	r1, r4
    a24c:	2011      	movs	r0, #17
    a24e:	47a8      	blx	r5
    a250:	0021      	movs	r1, r4
    a252:	2012      	movs	r0, #18
    a254:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    a256:	0021      	movs	r1, r4
    a258:	2014      	movs	r0, #20
	config.direction	= PORT_PIN_DIR_INPUT;
    a25a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a25c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a25e:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    a260:	47a8      	blx	r5
    a262:	0021      	movs	r1, r4
    a264:	2015      	movs	r0, #21
    a266:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 1;
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    a268:	0021      	movs	r1, r4
    a26a:	2018      	movs	r0, #24
	config.direction	= PORT_PIN_DIR_INPUT;
    a26c:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    a26e:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
    a270:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    a272:	47a8      	blx	r5
    a274:	0021      	movs	r1, r4
    a276:	2019      	movs	r0, #25
    a278:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a27a:	2302      	movs	r3, #2
    a27c:	4698      	mov	r8, r3
	config.powersave	= 1;
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    a27e:	0021      	movs	r1, r4
    a280:	2036      	movs	r0, #54	; 0x36
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a282:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a284:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a286:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    a288:	47a8      	blx	r5
    a28a:	0021      	movs	r1, r4
    a28c:	2022      	movs	r0, #34	; 0x22
    a28e:	47a8      	blx	r5
    a290:	0021      	movs	r1, r4
    a292:	2037      	movs	r0, #55	; 0x37
    a294:	47a8      	blx	r5
    a296:	0021      	movs	r1, r4
    a298:	2023      	movs	r0, #35	; 0x23
    a29a:	47a8      	blx	r5
    a29c:	0021      	movs	r1, r4
    a29e:	202a      	movs	r0, #42	; 0x2a
    a2a0:	47a8      	blx	r5

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    a2a2:	0021      	movs	r1, r4
    a2a4:	2003      	movs	r0, #3
	config.direction	= PORT_PIN_DIR_INPUT;
    a2a6:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    a2a8:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
    a2aa:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    a2ac:	47a8      	blx	r5
    a2ae:	0021      	movs	r1, r4
    a2b0:	201f      	movs	r0, #31
    a2b2:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(BATSENSE_ADC_PIN);
    a2b4:	0021      	movs	r1, r4
    a2b6:	2002      	movs	r0, #2
	config.direction	= PORT_PIN_DIR_INPUT;
    a2b8:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a2ba:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a2bc:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
    a2be:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LED_OUT_PIN);
    a2c0:	0021      	movs	r1, r4
    a2c2:	202b      	movs	r0, #43	; 0x2b
	config.direction	= PORT_PIN_DIR_INPUT;
    a2c4:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a2c6:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a2c8:	70a7      	strb	r7, [r4, #2]
	CFG(LED_OUT_PIN);
    a2ca:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a2cc:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    a2ce:	0021      	movs	r1, r4
    a2d0:	2004      	movs	r0, #4
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a2d2:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a2d4:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a2d6:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    a2d8:	47a8      	blx	r5
    a2da:	0021      	movs	r1, r4
    a2dc:	2005      	movs	r0, #5
    a2de:	47a8      	blx	r5
    a2e0:	0021      	movs	r1, r4
    a2e2:	2006      	movs	r0, #6
    a2e4:	47a8      	blx	r5
    a2e6:	0021      	movs	r1, r4
    a2e8:	2007      	movs	r0, #7
    a2ea:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    a2ec:	0021      	movs	r1, r4
    a2ee:	2008      	movs	r0, #8
    a2f0:	47a8      	blx	r5
    a2f2:	0021      	movs	r1, r4
    a2f4:	2009      	movs	r0, #9
    a2f6:	47a8      	blx	r5
    a2f8:	0021      	movs	r1, r4
    a2fa:	200a      	movs	r0, #10
    a2fc:	47a8      	blx	r5
    a2fe:	0021      	movs	r1, r4
    a300:	200b      	movs	r0, #11
    a302:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a304:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(ACCYEN_GP_OUT_PIN);
    a306:	0021      	movs	r1, r4
    a308:	2017      	movs	r0, #23
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a30a:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a30c:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a30e:	70a7      	strb	r7, [r4, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    a310:	47a8      	blx	r5

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a312:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    a314:	0021      	movs	r1, r4
    a316:	200e      	movs	r0, #14
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a318:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a31a:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a31c:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    a31e:	47a8      	blx	r5
    a320:	0021      	movs	r1, r4
    a322:	200f      	movs	r0, #15
    a324:	47a8      	blx	r5
    a326:	0021      	movs	r1, r4
    a328:	200c      	movs	r0, #12
    a32a:	47a8      	blx	r5
    a32c:	0021      	movs	r1, r4
    a32e:	200d      	movs	r0, #13
    a330:	47a8      	blx	r5
    a332:	0021      	movs	r1, r4
    a334:	2029      	movs	r0, #41	; 0x29
    a336:	47a8      	blx	r5
    a338:	0021      	movs	r1, r4
    a33a:	2016      	movs	r0, #22
    a33c:	47a8      	blx	r5
    a33e:	0021      	movs	r1, r4
    a340:	2028      	movs	r0, #40	; 0x28
    a342:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    a344:	2280      	movs	r2, #128	; 0x80
    a346:	4b0a      	ldr	r3, [pc, #40]	; (a370 <system_board_init+0x148>)
    a348:	0512      	lsls	r2, r2, #20
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    a34a:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a34c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
    a34e:	70a6      	strb	r6, [r4, #2]
    a350:	615a      	str	r2, [r3, #20]
    a352:	2280      	movs	r2, #128	; 0x80
    a354:	0552      	lsls	r2, r2, #21
    a356:	615a      	str	r2, [r3, #20]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    a358:	0021      	movs	r1, r4
    a35a:	201b      	movs	r0, #27
    a35c:	47a8      	blx	r5
    a35e:	0021      	movs	r1, r4
    a360:	201c      	movs	r0, #28
    a362:	47a8      	blx	r5
	
    a364:	b002      	add	sp, #8
    a366:	bc04      	pop	{r2}
    a368:	4690      	mov	r8, r2
    a36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a36c:	0000ef8d 	.word	0x0000ef8d
    a370:	41004400 	.word	0x41004400

0000a374 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    a374:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a376:	4b06      	ldr	r3, [pc, #24]	; (a390 <sd_mmc_configure_slot+0x1c>)
    a378:	4806      	ldr	r0, [pc, #24]	; (a394 <sd_mmc_configure_slot+0x20>)
    a37a:	6819      	ldr	r1, [r3, #0]
    a37c:	7800      	ldrb	r0, [r0, #0]
    a37e:	7f8b      	ldrb	r3, [r1, #30]
    a380:	4c05      	ldr	r4, [pc, #20]	; (a398 <sd_mmc_configure_slot+0x24>)
    a382:	1e5a      	subs	r2, r3, #1
    a384:	4193      	sbcs	r3, r2
    a386:	7b4a      	ldrb	r2, [r1, #13]
    a388:	b2db      	uxtb	r3, r3
    a38a:	6809      	ldr	r1, [r1, #0]
    a38c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    a38e:	bd10      	pop	{r4, pc}
    a390:	20000670 	.word	0x20000670
    a394:	20000694 	.word	0x20000694
    a398:	0000ab65 	.word	0x0000ab65

0000a39c <sd_mmc_cmd13>:
{
    a39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39e:	46c6      	mov	lr, r8
			if (!(driver_get_response() & 0xFF)) {
    a3a0:	4b0b      	ldr	r3, [pc, #44]	; (a3d0 <sd_mmc_cmd13+0x34>)
{
    a3a2:	b500      	push	{lr}
    a3a4:	4c0b      	ldr	r4, [pc, #44]	; (a3d4 <sd_mmc_cmd13+0x38>)
    a3a6:	4e0c      	ldr	r6, [pc, #48]	; (a3d8 <sd_mmc_cmd13+0x3c>)
			if (!(driver_get_response() & 0xFF)) {
    a3a8:	4698      	mov	r8, r3
    a3aa:	27ff      	movs	r7, #255	; 0xff
    a3ac:	e005      	b.n	a3ba <sd_mmc_cmd13+0x1e>
    a3ae:	47c0      	blx	r8
    a3b0:	4207      	tst	r7, r0
    a3b2:	d008      	beq.n	a3c6 <sd_mmc_cmd13+0x2a>
    a3b4:	3c01      	subs	r4, #1
		if (nec_timeout-- == 0) {
    a3b6:	2c00      	cmp	r4, #0
    a3b8:	d004      	beq.n	a3c4 <sd_mmc_cmd13+0x28>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a3ba:	2100      	movs	r1, #0
    a3bc:	4807      	ldr	r0, [pc, #28]	; (a3dc <sd_mmc_cmd13+0x40>)
    a3be:	47b0      	blx	r6
    a3c0:	1e05      	subs	r5, r0, #0
    a3c2:	d1f4      	bne.n	a3ae <sd_mmc_cmd13+0x12>
				return false;
    a3c4:	2500      	movs	r5, #0
}
    a3c6:	0028      	movs	r0, r5
    a3c8:	bc04      	pop	{r2}
    a3ca:	4690      	mov	r8, r2
    a3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3ce:	46c0      	nop			; (mov r8, r8)
    a3d0:	0000adbd 	.word	0x0000adbd
    a3d4:	00030d41 	.word	0x00030d41
    a3d8:	0000ada5 	.word	0x0000ada5
    a3dc:	00001b0d 	.word	0x00001b0d

0000a3e0 <sd_mmc_select_slot.part.0>:
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
    a3e0:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a3e2:	4b0e      	ldr	r3, [pc, #56]	; (a41c <sd_mmc_select_slot.part.0+0x3c>)
    a3e4:	0144      	lsls	r4, r0, #5
    a3e6:	1919      	adds	r1, r3, r4
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a3e8:	7a8a      	ldrb	r2, [r1, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a3ea:	3a03      	subs	r2, #3
    a3ec:	2a01      	cmp	r2, #1
    a3ee:	d90c      	bls.n	a40a <sd_mmc_select_slot.part.0+0x2a>
	sd_mmc_card = &sd_mmc_cards[slot];
    a3f0:	191c      	adds	r4, r3, r4
    a3f2:	4b0b      	ldr	r3, [pc, #44]	; (a420 <sd_mmc_select_slot.part.0+0x40>)
	sd_mmc_slot_sel = slot;
    a3f4:	4a0b      	ldr	r2, [pc, #44]	; (a424 <sd_mmc_select_slot.part.0+0x44>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a3f6:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    a3f8:	4b0b      	ldr	r3, [pc, #44]	; (a428 <sd_mmc_select_slot.part.0+0x48>)
	sd_mmc_slot_sel = slot;
    a3fa:	7010      	strb	r0, [r2, #0]
	sd_mmc_configure_slot();
    a3fc:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    a3fe:	7aa0      	ldrb	r0, [r4, #10]
    a400:	3802      	subs	r0, #2
    a402:	4243      	negs	r3, r0
    a404:	4158      	adcs	r0, r3
    a406:	b2c0      	uxtb	r0, r0
}
    a408:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a40a:	2202      	movs	r2, #2
    a40c:	728a      	strb	r2, [r1, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a40e:	4a07      	ldr	r2, [pc, #28]	; (a42c <sd_mmc_select_slot.part.0+0x4c>)
    a410:	511a      	str	r2, [r3, r4]
		sd_mmc_cards[slot].bus_width = 1;
    a412:	2201      	movs	r2, #1
    a414:	734a      	strb	r2, [r1, #13]
		sd_mmc_cards[slot].high_speed = 0;
    a416:	2200      	movs	r2, #0
    a418:	778a      	strb	r2, [r1, #30]
    a41a:	e7e9      	b.n	a3f0 <sd_mmc_select_slot.part.0+0x10>
    a41c:	20000674 	.word	0x20000674
    a420:	20000670 	.word	0x20000670
    a424:	20000694 	.word	0x20000694
    a428:	0000a375 	.word	0x0000a375
    a42c:	00061a80 	.word	0x00061a80

0000a430 <sd_mmc_cmd9_spi>:
{
    a430:	b530      	push	{r4, r5, lr}
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a432:	4c0d      	ldr	r4, [pc, #52]	; (a468 <sd_mmc_cmd9_spi+0x38>)
{
    a434:	b083      	sub	sp, #12
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a436:	6823      	ldr	r3, [r4, #0]
    a438:	2210      	movs	r2, #16
    a43a:	8919      	ldrh	r1, [r3, #8]
    a43c:	2301      	movs	r3, #1
    a43e:	0409      	lsls	r1, r1, #16
    a440:	9300      	str	r3, [sp, #0]
    a442:	480a      	ldr	r0, [pc, #40]	; (a46c <sd_mmc_cmd9_spi+0x3c>)
    a444:	4d0a      	ldr	r5, [pc, #40]	; (a470 <sd_mmc_cmd9_spi+0x40>)
    a446:	47a8      	blx	r5
    a448:	2800      	cmp	r0, #0
    a44a:	d102      	bne.n	a452 <sd_mmc_cmd9_spi+0x22>
		return false;
    a44c:	2000      	movs	r0, #0
}
    a44e:	b003      	add	sp, #12
    a450:	bd30      	pop	{r4, r5, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    a452:	6820      	ldr	r0, [r4, #0]
    a454:	2101      	movs	r1, #1
    a456:	300e      	adds	r0, #14
    a458:	4b06      	ldr	r3, [pc, #24]	; (a474 <sd_mmc_cmd9_spi+0x44>)
    a45a:	4798      	blx	r3
    a45c:	2800      	cmp	r0, #0
    a45e:	d0f5      	beq.n	a44c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    a460:	4b05      	ldr	r3, [pc, #20]	; (a478 <sd_mmc_cmd9_spi+0x48>)
    a462:	4798      	blx	r3
    a464:	e7f3      	b.n	a44e <sd_mmc_cmd9_spi+0x1e>
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	20000670 	.word	0x20000670
    a46c:	00081109 	.word	0x00081109
    a470:	0000ac19 	.word	0x0000ac19
    a474:	0000ae41 	.word	0x0000ae41
    a478:	0000aed1 	.word	0x0000aed1

0000a47c <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a47c:	2204      	movs	r2, #4
{
    a47e:	b510      	push	{r4, lr}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a480:	4b03      	ldr	r3, [pc, #12]	; (a490 <sd_mmc_init+0x14>)
    a482:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    a484:	4b03      	ldr	r3, [pc, #12]	; (a494 <sd_mmc_init+0x18>)
    a486:	32fb      	adds	r2, #251	; 0xfb
    a488:	701a      	strb	r2, [r3, #0]
	driver_init();
    a48a:	4b03      	ldr	r3, [pc, #12]	; (a498 <sd_mmc_init+0x1c>)
    a48c:	4798      	blx	r3
}
    a48e:	bd10      	pop	{r4, pc}
    a490:	20000674 	.word	0x20000674
    a494:	20000694 	.word	0x20000694
    a498:	0000aa69 	.word	0x0000aa69

0000a49c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    a49c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a49e:	46ce      	mov	lr, r9
    a4a0:	4647      	mov	r7, r8
    a4a2:	b580      	push	{r7, lr}
    a4a4:	0005      	movs	r5, r0
    a4a6:	b087      	sub	sp, #28
		return SD_MMC_ERR_SLOT;
    a4a8:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    a4aa:	2800      	cmp	r0, #0
    a4ac:	d009      	beq.n	a4c2 <sd_mmc_check+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a4ae:	4b96      	ldr	r3, [pc, #600]	; (a708 <sd_mmc_check+0x26c>)
    a4b0:	781b      	ldrb	r3, [r3, #0]
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d021      	beq.n	a4fa <sd_mmc_check+0x5e>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    a4b6:	0020      	movs	r0, r4
    a4b8:	b007      	add	sp, #28
    a4ba:	bc0c      	pop	{r2, r3}
    a4bc:	4690      	mov	r8, r2
    a4be:	4699      	mov	r9, r3
    a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4c2:	2000      	movs	r0, #0
    a4c4:	4b91      	ldr	r3, [pc, #580]	; (a70c <sd_mmc_check+0x270>)
    a4c6:	4798      	blx	r3
    a4c8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    a4ca:	2801      	cmp	r0, #1
    a4cc:	d1ef      	bne.n	a4ae <sd_mmc_check+0x12>
	sd_mmc_card->type = CARD_TYPE_SD;
    a4ce:	4f90      	ldr	r7, [pc, #576]	; (a710 <sd_mmc_check+0x274>)
    a4d0:	683b      	ldr	r3, [r7, #0]
    a4d2:	72d8      	strb	r0, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    a4d4:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
    a4d6:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
    a4d8:	4b8e      	ldr	r3, [pc, #568]	; (a714 <sd_mmc_check+0x278>)
    a4da:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a4dc:	2088      	movs	r0, #136	; 0x88
    a4de:	2100      	movs	r1, #0
    a4e0:	0140      	lsls	r0, r0, #5
    a4e2:	4e8d      	ldr	r6, [pc, #564]	; (a718 <sd_mmc_check+0x27c>)
    a4e4:	47b0      	blx	r6
    a4e6:	2800      	cmp	r0, #0
    a4e8:	d10b      	bne.n	a502 <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a4ea:	2203      	movs	r2, #3
    a4ec:	683b      	ldr	r3, [r7, #0]
	return SD_MMC_ERR_UNUSABLE;
    a4ee:	2403      	movs	r4, #3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a4f0:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a4f2:	4b85      	ldr	r3, [pc, #532]	; (a708 <sd_mmc_check+0x26c>)
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d1dd      	bne.n	a4b6 <sd_mmc_check+0x1a>
		driver_deselect_device(sd_mmc_slot_sel);
    a4fa:	2000      	movs	r0, #0
    a4fc:	4b87      	ldr	r3, [pc, #540]	; (a71c <sd_mmc_check+0x280>)
    a4fe:	4798      	blx	r3
    a500:	e7d9      	b.n	a4b6 <sd_mmc_check+0x1a>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a502:	23d5      	movs	r3, #213	; 0xd5
    a504:	005b      	lsls	r3, r3, #1
    a506:	0019      	movs	r1, r3
    a508:	4885      	ldr	r0, [pc, #532]	; (a720 <sd_mmc_check+0x284>)
    a50a:	4698      	mov	r8, r3
    a50c:	47b0      	blx	r6
    a50e:	2800      	cmp	r0, #0
    a510:	d11b      	bne.n	a54a <sd_mmc_check+0xae>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a512:	683b      	ldr	r3, [r7, #0]
    a514:	7ada      	ldrb	r2, [r3, #11]
    a516:	07d3      	lsls	r3, r2, #31
    a518:	d421      	bmi.n	a55e <sd_mmc_check+0xc2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a51a:	2309      	movs	r3, #9
    a51c:	4013      	ands	r3, r2
    a51e:	2b01      	cmp	r3, #1
    a520:	d10d      	bne.n	a53e <sd_mmc_check+0xa2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a522:	2180      	movs	r1, #128	; 0x80
    a524:	487f      	ldr	r0, [pc, #508]	; (a724 <sd_mmc_check+0x288>)
    a526:	0089      	lsls	r1, r1, #2
    a528:	47b0      	blx	r6
    a52a:	2800      	cmp	r0, #0
    a52c:	d0dd      	beq.n	a4ea <sd_mmc_check+0x4e>
    a52e:	683b      	ldr	r3, [r7, #0]
    a530:	7adb      	ldrb	r3, [r3, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a532:	07db      	lsls	r3, r3, #31
    a534:	d503      	bpl.n	a53e <sd_mmc_check+0xa2>
	if (!sd_mmc_cmd13()) {
    a536:	4b7c      	ldr	r3, [pc, #496]	; (a728 <sd_mmc_check+0x28c>)
    a538:	4798      	blx	r3
    a53a:	2800      	cmp	r0, #0
    a53c:	d0d5      	beq.n	a4ea <sd_mmc_check+0x4e>
	sd_mmc_configure_slot();
    a53e:	4b7b      	ldr	r3, [pc, #492]	; (a72c <sd_mmc_check+0x290>)
    a540:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    a542:	2200      	movs	r2, #0
    a544:	683b      	ldr	r3, [r7, #0]
    a546:	729a      	strb	r2, [r3, #10]
    a548:	e7b1      	b.n	a4ae <sd_mmc_check+0x12>
	resp = driver_get_response();
    a54a:	4b79      	ldr	r3, [pc, #484]	; (a730 <sd_mmc_check+0x294>)
    a54c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    a54e:	1c43      	adds	r3, r0, #1
    a550:	d0df      	beq.n	a512 <sd_mmc_check+0x76>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a552:	0500      	lsls	r0, r0, #20
    a554:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
    a556:	2501      	movs	r5, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a558:	4540      	cmp	r0, r8
    a55a:	d1c6      	bne.n	a4ea <sd_mmc_check+0x4e>
    a55c:	e7d9      	b.n	a512 <sd_mmc_check+0x76>
    a55e:	1e6b      	subs	r3, r5, #1
    a560:	419d      	sbcs	r5, r3
    a562:	07ab      	lsls	r3, r5, #30
    a564:	4698      	mov	r8, r3
		resp = driver_get_response();
    a566:	4b72      	ldr	r3, [pc, #456]	; (a730 <sd_mmc_check+0x294>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a568:	4d72      	ldr	r5, [pc, #456]	; (a734 <sd_mmc_check+0x298>)
		resp = driver_get_response();
    a56a:	4699      	mov	r9, r3
    a56c:	e00b      	b.n	a586 <sd_mmc_check+0xea>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a56e:	4641      	mov	r1, r8
    a570:	4871      	ldr	r0, [pc, #452]	; (a738 <sd_mmc_check+0x29c>)
    a572:	47b0      	blx	r6
    a574:	2800      	cmp	r0, #0
    a576:	d00b      	beq.n	a590 <sd_mmc_check+0xf4>
		resp = driver_get_response();
    a578:	47c8      	blx	r9
		if (!(resp & R1_SPI_IDLE)) {
    a57a:	07c3      	lsls	r3, r0, #31
    a57c:	d400      	bmi.n	a580 <sd_mmc_check+0xe4>
    a57e:	e0f3      	b.n	a768 <sd_mmc_check+0x2cc>
    a580:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a582:	2d00      	cmp	r5, #0
    a584:	d004      	beq.n	a590 <sd_mmc_check+0xf4>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a586:	2100      	movs	r1, #0
    a588:	486c      	ldr	r0, [pc, #432]	; (a73c <sd_mmc_check+0x2a0>)
    a58a:	47b0      	blx	r6
    a58c:	2800      	cmp	r0, #0
    a58e:	d1ee      	bne.n	a56e <sd_mmc_check+0xd2>
			sd_mmc_card->type = CARD_TYPE_MMC;
    a590:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a592:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
    a594:	683a      	ldr	r2, [r7, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a596:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
    a598:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a59a:	0140      	lsls	r0, r0, #5
    a59c:	47b0      	blx	r6
    a59e:	2800      	cmp	r0, #0
    a5a0:	d0a3      	beq.n	a4ea <sd_mmc_check+0x4e>
		resp = driver_get_response();
    a5a2:	4b63      	ldr	r3, [pc, #396]	; (a730 <sd_mmc_check+0x294>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a5a4:	4d63      	ldr	r5, [pc, #396]	; (a734 <sd_mmc_check+0x298>)
		resp = driver_get_response();
    a5a6:	4698      	mov	r8, r3
		if (!(resp & R1_SPI_IDLE)) {
    a5a8:	2301      	movs	r3, #1
    a5aa:	4699      	mov	r9, r3
    a5ac:	e002      	b.n	a5b4 <sd_mmc_check+0x118>
    a5ae:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a5b0:	2d00      	cmp	r5, #0
    a5b2:	d09a      	beq.n	a4ea <sd_mmc_check+0x4e>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a5b4:	2100      	movs	r1, #0
    a5b6:	4862      	ldr	r0, [pc, #392]	; (a740 <sd_mmc_check+0x2a4>)
    a5b8:	47b0      	blx	r6
    a5ba:	2800      	cmp	r0, #0
    a5bc:	d095      	beq.n	a4ea <sd_mmc_check+0x4e>
		resp = driver_get_response();
    a5be:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
    a5c0:	464b      	mov	r3, r9
    a5c2:	4203      	tst	r3, r0
    a5c4:	d1f3      	bne.n	a5ae <sd_mmc_check+0x112>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a5c6:	2100      	movs	r1, #0
    a5c8:	485e      	ldr	r0, [pc, #376]	; (a744 <sd_mmc_check+0x2a8>)
    a5ca:	47b0      	blx	r6
    a5cc:	2800      	cmp	r0, #0
    a5ce:	d08c      	beq.n	a4ea <sd_mmc_check+0x4e>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a5d0:	47c0      	blx	r8
    a5d2:	23c0      	movs	r3, #192	; 0xc0
    a5d4:	05db      	lsls	r3, r3, #23
    a5d6:	4018      	ands	r0, r3
    a5d8:	2380      	movs	r3, #128	; 0x80
    a5da:	05db      	lsls	r3, r3, #23
    a5dc:	4298      	cmp	r0, r3
    a5de:	d104      	bne.n	a5ea <sd_mmc_check+0x14e>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a5e0:	2308      	movs	r3, #8
    a5e2:	683a      	ldr	r2, [r7, #0]
    a5e4:	7ad1      	ldrb	r1, [r2, #11]
    a5e6:	430b      	orrs	r3, r1
    a5e8:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a5ea:	2100      	movs	r1, #0
    a5ec:	4856      	ldr	r0, [pc, #344]	; (a748 <sd_mmc_check+0x2ac>)
    a5ee:	47b0      	blx	r6
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d100      	bne.n	a5f6 <sd_mmc_check+0x15a>
    a5f4:	e779      	b.n	a4ea <sd_mmc_check+0x4e>
	if (!sd_mmc_cmd9_spi()) {
    a5f6:	4b55      	ldr	r3, [pc, #340]	; (a74c <sd_mmc_check+0x2b0>)
    a5f8:	4798      	blx	r3
    a5fa:	2800      	cmp	r0, #0
    a5fc:	d100      	bne.n	a600 <sd_mmc_check+0x164>
    a5fe:	e774      	b.n	a4ea <sd_mmc_check+0x4e>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a600:	683a      	ldr	r2, [r7, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a602:	7b93      	ldrb	r3, [r2, #14]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
    a604:	069b      	lsls	r3, r3, #26
    a606:	0f1b      	lsrs	r3, r3, #28
    a608:	2b02      	cmp	r3, #2
    a60a:	d100      	bne.n	a60e <sd_mmc_check+0x172>
    a60c:	e148      	b.n	a8a0 <sd_mmc_check+0x404>
    a60e:	d800      	bhi.n	a612 <sd_mmc_check+0x176>
    a610:	e154      	b.n	a8bc <sd_mmc_check+0x420>
    a612:	2b03      	cmp	r3, #3
    a614:	d100      	bne.n	a618 <sd_mmc_check+0x17c>
    a616:	e14e      	b.n	a8b6 <sd_mmc_check+0x41a>
    a618:	2b04      	cmp	r3, #4
    a61a:	d000      	beq.n	a61e <sd_mmc_check+0x182>
    a61c:	e13d      	b.n	a89a <sd_mmc_check+0x3fe>
		sd_mmc_card->version = CARD_VER_MMC_4;
    a61e:	2340      	movs	r3, #64	; 0x40
    a620:	7313      	strb	r3, [r2, #12]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a622:	210f      	movs	r1, #15
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a624:	2507      	movs	r5, #7
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a626:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a628:	4688      	mov	r8, r1
    a62a:	08d8      	lsrs	r0, r3, #3
    a62c:	4008      	ands	r0, r1
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a62e:	402b      	ands	r3, r5
	sd_mmc_card->clock = unit * mul * 1000;
    a630:	4947      	ldr	r1, [pc, #284]	; (a750 <sd_mmc_check+0x2b4>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a632:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a634:	585b      	ldr	r3, [r3, r1]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a636:	0080      	lsls	r0, r0, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a638:	469c      	mov	ip, r3
    a63a:	23fa      	movs	r3, #250	; 0xfa
    a63c:	4661      	mov	r1, ip
    a63e:	009b      	lsls	r3, r3, #2
    a640:	434b      	muls	r3, r1
    a642:	4944      	ldr	r1, [pc, #272]	; (a754 <sd_mmc_check+0x2b8>)
    a644:	5840      	ldr	r0, [r0, r1]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a646:	7d11      	ldrb	r1, [r2, #20]
    a648:	4343      	muls	r3, r0
    a64a:	6013      	str	r3, [r2, #0]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a64c:	7d53      	ldrb	r3, [r2, #21]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a64e:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a650:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a652:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a654:	1180      	asrs	r0, r0, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a656:	430b      	orrs	r3, r1
    a658:	4303      	orrs	r3, r0
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    a65a:	483f      	ldr	r0, [pc, #252]	; (a758 <sd_mmc_check+0x2bc>)
	value &=  ((uint32_t)1 << size) - 1;
    a65c:	051b      	lsls	r3, r3, #20
    a65e:	0d1b      	lsrs	r3, r3, #20
    a660:	4283      	cmp	r3, r0
    a662:	d00e      	beq.n	a682 <sd_mmc_check+0x1e6>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a664:	7e10      	ldrb	r0, [r2, #24]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a666:	3301      	adds	r3, #1
    a668:	11c1      	asrs	r1, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a66a:	7dd0      	ldrb	r0, [r2, #23]
    a66c:	0040      	lsls	r0, r0, #1
    a66e:	4308      	orrs	r0, r1
	value &=  ((uint32_t)1 << size) - 1;
    a670:	4028      	ands	r0, r5
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a672:	3002      	adds	r0, #2
    a674:	4641      	mov	r1, r8
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a676:	4083      	lsls	r3, r0
    a678:	7cd0      	ldrb	r0, [r2, #19]
    a67a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a67c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a67e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a680:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    a682:	7b13      	ldrb	r3, [r2, #12]
    a684:	2b3f      	cmp	r3, #63	; 0x3f
    a686:	d936      	bls.n	a6f6 <sd_mmc_check+0x25a>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a688:	2100      	movs	r1, #0
    a68a:	2280      	movs	r2, #128	; 0x80
    a68c:	9100      	str	r1, [sp, #0]
    a68e:	2301      	movs	r3, #1
    a690:	0092      	lsls	r2, r2, #2
    a692:	4832      	ldr	r0, [pc, #200]	; (a75c <sd_mmc_check+0x2c0>)
    a694:	4d32      	ldr	r5, [pc, #200]	; (a760 <sd_mmc_check+0x2c4>)
    a696:	47a8      	blx	r5
    a698:	2800      	cmp	r0, #0
    a69a:	d100      	bne.n	a69e <sd_mmc_check+0x202>
    a69c:	e725      	b.n	a4ea <sd_mmc_check+0x4e>
    a69e:	2332      	movs	r3, #50	; 0x32
    a6a0:	4698      	mov	r8, r3
    a6a2:	4d30      	ldr	r5, [pc, #192]	; (a764 <sd_mmc_check+0x2c8>)
		if (!driver_read_word(&ext_csd)) {
    a6a4:	a803      	add	r0, sp, #12
    a6a6:	47a8      	blx	r5
    a6a8:	2800      	cmp	r0, #0
    a6aa:	d100      	bne.n	a6ae <sd_mmc_check+0x212>
    a6ac:	e71d      	b.n	a4ea <sd_mmc_check+0x4e>
    a6ae:	4643      	mov	r3, r8
    a6b0:	3b01      	subs	r3, #1
    a6b2:	b29b      	uxth	r3, r3
    a6b4:	4698      	mov	r8, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	d1f4      	bne.n	a6a4 <sd_mmc_check+0x208>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a6ba:	6839      	ldr	r1, [r7, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a6bc:	7d8a      	ldrb	r2, [r1, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a6be:	7d4b      	ldrb	r3, [r1, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a6c0:	7d09      	ldrb	r1, [r1, #20]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a6c2:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a6c4:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a6c6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a6c8:	430b      	orrs	r3, r1
    a6ca:	4313      	orrs	r3, r2
    a6cc:	4a22      	ldr	r2, [pc, #136]	; (a758 <sd_mmc_check+0x2bc>)
	value &=  ((uint32_t)1 << size) - 1;
    a6ce:	051b      	lsls	r3, r3, #20
    a6d0:	0d1b      	lsrs	r3, r3, #20
    a6d2:	4293      	cmp	r3, r2
    a6d4:	d100      	bne.n	a6d8 <sd_mmc_check+0x23c>
    a6d6:	e0fa      	b.n	a8ce <sd_mmc_check+0x432>
    a6d8:	2332      	movs	r3, #50	; 0x32
    a6da:	4698      	mov	r8, r3
    a6dc:	ab04      	add	r3, sp, #16
    a6de:	4699      	mov	r9, r3
		if (!driver_read_word(&sec_count)) {
    a6e0:	4648      	mov	r0, r9
    a6e2:	47a8      	blx	r5
    a6e4:	2800      	cmp	r0, #0
    a6e6:	d100      	bne.n	a6ea <sd_mmc_check+0x24e>
    a6e8:	e6ff      	b.n	a4ea <sd_mmc_check+0x4e>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a6ea:	4643      	mov	r3, r8
    a6ec:	3301      	adds	r3, #1
    a6ee:	b29b      	uxth	r3, r3
    a6f0:	4698      	mov	r8, r3
    a6f2:	2b80      	cmp	r3, #128	; 0x80
    a6f4:	d1f4      	bne.n	a6e0 <sd_mmc_check+0x244>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a6f6:	2180      	movs	r1, #128	; 0x80
    a6f8:	480a      	ldr	r0, [pc, #40]	; (a724 <sd_mmc_check+0x288>)
    a6fa:	0089      	lsls	r1, r1, #2
    a6fc:	47b0      	blx	r6
    a6fe:	2800      	cmp	r0, #0
    a700:	d100      	bne.n	a704 <sd_mmc_check+0x268>
    a702:	e6f2      	b.n	a4ea <sd_mmc_check+0x4e>
    a704:	e717      	b.n	a536 <sd_mmc_check+0x9a>
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	20000694 	.word	0x20000694
    a70c:	0000a3e1 	.word	0x0000a3e1
    a710:	20000670 	.word	0x20000670
    a714:	0000abe1 	.word	0x0000abe1
    a718:	0000ada5 	.word	0x0000ada5
    a71c:	0000abb9 	.word	0x0000abb9
    a720:	00005508 	.word	0x00005508
    a724:	00001110 	.word	0x00001110
    a728:	0000a39d 	.word	0x0000a39d
    a72c:	0000a375 	.word	0x0000a375
    a730:	0000adbd 	.word	0x0000adbd
    a734:	00001bef 	.word	0x00001bef
    a738:	00001129 	.word	0x00001129
    a73c:	00001137 	.word	0x00001137
    a740:	00001101 	.word	0x00001101
    a744:	0000053a 	.word	0x0000053a
    a748:	0000113b 	.word	0x0000113b
    a74c:	0000a431 	.word	0x0000a431
    a750:	00015534 	.word	0x00015534
    a754:	000154f4 	.word	0x000154f4
    a758:	00000fff 	.word	0x00000fff
    a75c:	00081108 	.word	0x00081108
    a760:	0000ac19 	.word	0x0000ac19
    a764:	0000adc9 	.word	0x0000adc9
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a768:	2100      	movs	r1, #0
    a76a:	4864      	ldr	r0, [pc, #400]	; (a8fc <sd_mmc_check+0x460>)
    a76c:	47b0      	blx	r6
    a76e:	2800      	cmp	r0, #0
    a770:	d100      	bne.n	a774 <sd_mmc_check+0x2d8>
    a772:	e70d      	b.n	a590 <sd_mmc_check+0xf4>
	if ((driver_get_response() & OCR_CCS) != 0) {
    a774:	47c8      	blx	r9
    a776:	0043      	lsls	r3, r0, #1
    a778:	d504      	bpl.n	a784 <sd_mmc_check+0x2e8>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a77a:	2308      	movs	r3, #8
    a77c:	683a      	ldr	r2, [r7, #0]
    a77e:	7ad1      	ldrb	r1, [r2, #11]
    a780:	430b      	orrs	r3, r1
    a782:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a784:	2100      	movs	r1, #0
    a786:	485e      	ldr	r0, [pc, #376]	; (a900 <sd_mmc_check+0x464>)
    a788:	47b0      	blx	r6
    a78a:	2800      	cmp	r0, #0
    a78c:	d100      	bne.n	a790 <sd_mmc_check+0x2f4>
    a78e:	e6ac      	b.n	a4ea <sd_mmc_check+0x4e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a790:	683b      	ldr	r3, [r7, #0]
    a792:	7adb      	ldrb	r3, [r3, #11]
    a794:	07da      	lsls	r2, r3, #31
    a796:	d57a      	bpl.n	a88e <sd_mmc_check+0x3f2>
		if (!sd_mmc_cmd9_spi()) {
    a798:	4b5a      	ldr	r3, [pc, #360]	; (a904 <sd_mmc_check+0x468>)
    a79a:	4798      	blx	r3
    a79c:	2800      	cmp	r0, #0
    a79e:	d100      	bne.n	a7a2 <sd_mmc_check+0x306>
    a7a0:	e6a3      	b.n	a4ea <sd_mmc_check+0x4e>
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a7a2:	210f      	movs	r1, #15
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a7a4:	2007      	movs	r0, #7
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    a7a6:	683b      	ldr	r3, [r7, #0]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a7a8:	4688      	mov	r8, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7aa:	7c5a      	ldrb	r2, [r3, #17]
    a7ac:	08d5      	lsrs	r5, r2, #3
    a7ae:	400d      	ands	r5, r1
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a7b0:	4002      	ands	r2, r0
	sd_mmc_card->clock = unit * mul * 1000;
    a7b2:	4955      	ldr	r1, [pc, #340]	; (a908 <sd_mmc_check+0x46c>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a7b4:	0092      	lsls	r2, r2, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a7b6:	5852      	ldr	r2, [r2, r1]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a7b8:	00ad      	lsls	r5, r5, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a7ba:	4694      	mov	ip, r2
    a7bc:	22fa      	movs	r2, #250	; 0xfa
    a7be:	4661      	mov	r1, ip
    a7c0:	0092      	lsls	r2, r2, #2
    a7c2:	434a      	muls	r2, r1
    a7c4:	4951      	ldr	r1, [pc, #324]	; (a90c <sd_mmc_check+0x470>)
    a7c6:	586d      	ldr	r5, [r5, r1]
    a7c8:	436a      	muls	r2, r5
    a7ca:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    a7cc:	7b9a      	ldrb	r2, [r3, #14]
    a7ce:	0992      	lsrs	r2, r2, #6
    a7d0:	d14e      	bne.n	a870 <sd_mmc_check+0x3d4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7d2:	7d5a      	ldrb	r2, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7d4:	7d19      	ldrb	r1, [r3, #20]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7d6:	7d9d      	ldrb	r5, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7d8:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7da:	0092      	lsls	r2, r2, #2
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7dc:	11ad      	asrs	r5, r5, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7de:	430a      	orrs	r2, r1
    a7e0:	432a      	orrs	r2, r5
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7e2:	7e1d      	ldrb	r5, [r3, #24]
	value &=  ((uint32_t)1 << size) - 1;
    a7e4:	0512      	lsls	r2, r2, #20
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7e6:	11e9      	asrs	r1, r5, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7e8:	7ddd      	ldrb	r5, [r3, #23]
	value &=  ((uint32_t)1 << size) - 1;
    a7ea:	0d12      	lsrs	r2, r2, #20
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7ec:	006d      	lsls	r5, r5, #1
    a7ee:	430d      	orrs	r5, r1
	value &=  ((uint32_t)1 << size) - 1;
    a7f0:	4028      	ands	r0, r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a7f2:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a7f4:	3201      	adds	r2, #1
    a7f6:	4641      	mov	r1, r8
    a7f8:	4082      	lsls	r2, r0
    a7fa:	7cd8      	ldrb	r0, [r3, #19]
    a7fc:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a7fe:	408a      	lsls	r2, r1
				/ 1024;
    a800:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
    a802:	605a      	str	r2, [r3, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    a804:	8919      	ldrh	r1, [r3, #8]
    a806:	4842      	ldr	r0, [pc, #264]	; (a910 <sd_mmc_check+0x474>)
    a808:	0409      	lsls	r1, r1, #16
    a80a:	47b0      	blx	r6
    a80c:	2800      	cmp	r0, #0
    a80e:	d100      	bne.n	a812 <sd_mmc_check+0x376>
    a810:	e66b      	b.n	a4ea <sd_mmc_check+0x4e>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a812:	2301      	movs	r3, #1
    a814:	2208      	movs	r2, #8
    a816:	9300      	str	r3, [sp, #0]
    a818:	2100      	movs	r1, #0
    a81a:	483e      	ldr	r0, [pc, #248]	; (a914 <sd_mmc_check+0x478>)
    a81c:	4d3e      	ldr	r5, [pc, #248]	; (a918 <sd_mmc_check+0x47c>)
    a81e:	47a8      	blx	r5
    a820:	2800      	cmp	r0, #0
    a822:	d100      	bne.n	a826 <sd_mmc_check+0x38a>
    a824:	e661      	b.n	a4ea <sd_mmc_check+0x4e>
	if (!driver_start_read_blocks(scr, 1)) {
    a826:	ad04      	add	r5, sp, #16
    a828:	2101      	movs	r1, #1
    a82a:	0028      	movs	r0, r5
    a82c:	4b3b      	ldr	r3, [pc, #236]	; (a91c <sd_mmc_check+0x480>)
    a82e:	4798      	blx	r3
    a830:	2800      	cmp	r0, #0
    a832:	d100      	bne.n	a836 <sd_mmc_check+0x39a>
    a834:	e659      	b.n	a4ea <sd_mmc_check+0x4e>
	if (!driver_wait_end_of_read_blocks()) {
    a836:	4b3a      	ldr	r3, [pc, #232]	; (a920 <sd_mmc_check+0x484>)
    a838:	4798      	blx	r3
    a83a:	2800      	cmp	r0, #0
    a83c:	d100      	bne.n	a840 <sd_mmc_check+0x3a4>
    a83e:	e654      	b.n	a4ea <sd_mmc_check+0x4e>
	switch (SD_SCR_SD_SPEC(scr)) {
    a840:	220f      	movs	r2, #15
    a842:	782b      	ldrb	r3, [r5, #0]
    a844:	4013      	ands	r3, r2
    a846:	2b01      	cmp	r3, #1
    a848:	d031      	beq.n	a8ae <sd_mmc_check+0x412>
    a84a:	2b00      	cmp	r3, #0
    a84c:	d02b      	beq.n	a8a6 <sd_mmc_check+0x40a>
    a84e:	2b02      	cmp	r3, #2
    a850:	d129      	bne.n	a8a6 <sd_mmc_check+0x40a>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    a852:	78ab      	ldrb	r3, [r5, #2]
    a854:	09db      	lsrs	r3, r3, #7
    a856:	2b01      	cmp	r3, #1
    a858:	d035      	beq.n	a8c6 <sd_mmc_check+0x42a>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    a85a:	2320      	movs	r3, #32
    a85c:	683a      	ldr	r2, [r7, #0]
    a85e:	7313      	strb	r3, [r2, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a860:	2209      	movs	r2, #9
    a862:	683b      	ldr	r3, [r7, #0]
    a864:	7adb      	ldrb	r3, [r3, #11]
    a866:	401a      	ands	r2, r3
    a868:	2a01      	cmp	r2, #1
    a86a:	d000      	beq.n	a86e <sd_mmc_check+0x3d2>
    a86c:	e661      	b.n	a532 <sd_mmc_check+0x96>
    a86e:	e658      	b.n	a522 <sd_mmc_check+0x86>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a870:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a872:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a874:	0212      	lsls	r2, r2, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a876:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a878:	430a      	orrs	r2, r1
				* 512;
    a87a:	2180      	movs	r1, #128	; 0x80
    a87c:	0089      	lsls	r1, r1, #2
    a87e:	468c      	mov	ip, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a880:	7dd8      	ldrb	r0, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a882:	4302      	orrs	r2, r0
	value &=  ((uint32_t)1 << size) - 1;
    a884:	0292      	lsls	r2, r2, #10
    a886:	0852      	lsrs	r2, r2, #1
    a888:	4462      	add	r2, ip
		sd_mmc_card->capacity =
    a88a:	605a      	str	r2, [r3, #4]
    a88c:	e7ba      	b.n	a804 <sd_mmc_check+0x368>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a88e:	2209      	movs	r2, #9
    a890:	4013      	ands	r3, r2
    a892:	2b01      	cmp	r3, #1
    a894:	d000      	beq.n	a898 <sd_mmc_check+0x3fc>
    a896:	e652      	b.n	a53e <sd_mmc_check+0xa2>
    a898:	e643      	b.n	a522 <sd_mmc_check+0x86>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    a89a:	2312      	movs	r3, #18
    a89c:	7313      	strb	r3, [r2, #12]
    a89e:	e6c0      	b.n	a622 <sd_mmc_check+0x186>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    a8a0:	2322      	movs	r3, #34	; 0x22
    a8a2:	7313      	strb	r3, [r2, #12]
    a8a4:	e6bd      	b.n	a622 <sd_mmc_check+0x186>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a8a6:	2310      	movs	r3, #16
    a8a8:	683a      	ldr	r2, [r7, #0]
    a8aa:	7313      	strb	r3, [r2, #12]
    a8ac:	e7d8      	b.n	a860 <sd_mmc_check+0x3c4>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a8ae:	231a      	movs	r3, #26
    a8b0:	683a      	ldr	r2, [r7, #0]
    a8b2:	7313      	strb	r3, [r2, #12]
    a8b4:	e7d4      	b.n	a860 <sd_mmc_check+0x3c4>
		sd_mmc_card->version = CARD_VER_MMC_3;
    a8b6:	2330      	movs	r3, #48	; 0x30
    a8b8:	7313      	strb	r3, [r2, #12]
    a8ba:	e6b2      	b.n	a622 <sd_mmc_check+0x186>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a8bc:	2b01      	cmp	r3, #1
    a8be:	d1ec      	bne.n	a89a <sd_mmc_check+0x3fe>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a8c0:	2314      	movs	r3, #20
    a8c2:	7313      	strb	r3, [r2, #12]
    a8c4:	e6ad      	b.n	a622 <sd_mmc_check+0x186>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a8c6:	683a      	ldr	r2, [r7, #0]
    a8c8:	332f      	adds	r3, #47	; 0x2f
    a8ca:	7313      	strb	r3, [r2, #12]
    a8cc:	e7c8      	b.n	a860 <sd_mmc_check+0x3c4>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a8ce:	2304      	movs	r3, #4
    a8d0:	4698      	mov	r8, r3
    a8d2:	ab04      	add	r3, sp, #16
    a8d4:	4699      	mov	r9, r3
			if (!driver_read_word(&sec_count)) {
    a8d6:	4648      	mov	r0, r9
    a8d8:	47a8      	blx	r5
    a8da:	2800      	cmp	r0, #0
    a8dc:	d100      	bne.n	a8e0 <sd_mmc_check+0x444>
    a8de:	e604      	b.n	a4ea <sd_mmc_check+0x4e>
    a8e0:	4643      	mov	r3, r8
    a8e2:	3b01      	subs	r3, #1
    a8e4:	b29b      	uxth	r3, r3
    a8e6:	4698      	mov	r8, r3
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a8e8:	2b00      	cmp	r3, #0
    a8ea:	d1f4      	bne.n	a8d6 <sd_mmc_check+0x43a>
		sd_mmc_card->capacity = sec_count / 2;
    a8ec:	9b04      	ldr	r3, [sp, #16]
    a8ee:	683a      	ldr	r2, [r7, #0]
    a8f0:	085b      	lsrs	r3, r3, #1
    a8f2:	6053      	str	r3, [r2, #4]
    a8f4:	2336      	movs	r3, #54	; 0x36
    a8f6:	4698      	mov	r8, r3
    a8f8:	e6f2      	b.n	a6e0 <sd_mmc_check+0x244>
    a8fa:	46c0      	nop			; (mov r8, r8)
    a8fc:	0000053a 	.word	0x0000053a
    a900:	0000113b 	.word	0x0000113b
    a904:	0000a431 	.word	0x0000a431
    a908:	00015534 	.word	0x00015534
    a90c:	00015550 	.word	0x00015550
    a910:	00001137 	.word	0x00001137
    a914:	00081133 	.word	0x00081133
    a918:	0000ac19 	.word	0x0000ac19
    a91c:	0000ae41 	.word	0x0000ae41
    a920:	0000aed1 	.word	0x0000aed1

0000a924 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    a924:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    a926:	2800      	cmp	r0, #0
    a928:	d001      	beq.n	a92e <sd_mmc_get_type+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
    a92a:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    a92c:	bd10      	pop	{r4, pc}
    a92e:	2000      	movs	r0, #0
    a930:	4b07      	ldr	r3, [pc, #28]	; (a950 <sd_mmc_get_type+0x2c>)
    a932:	4798      	blx	r3
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a934:	2800      	cmp	r0, #0
    a936:	d1f8      	bne.n	a92a <sd_mmc_get_type+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a938:	4b06      	ldr	r3, [pc, #24]	; (a954 <sd_mmc_get_type+0x30>)
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	2b00      	cmp	r3, #0
    a93e:	d003      	beq.n	a948 <sd_mmc_get_type+0x24>
	return sd_mmc_card->type;
    a940:	4b05      	ldr	r3, [pc, #20]	; (a958 <sd_mmc_get_type+0x34>)
    a942:	681b      	ldr	r3, [r3, #0]
    a944:	7ad8      	ldrb	r0, [r3, #11]
    a946:	e7f1      	b.n	a92c <sd_mmc_get_type+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    a948:	4b04      	ldr	r3, [pc, #16]	; (a95c <sd_mmc_get_type+0x38>)
    a94a:	4798      	blx	r3
    a94c:	e7f8      	b.n	a940 <sd_mmc_get_type+0x1c>
    a94e:	46c0      	nop			; (mov r8, r8)
    a950:	0000a3e1 	.word	0x0000a3e1
    a954:	20000694 	.word	0x20000694
    a958:	20000670 	.word	0x20000670
    a95c:	0000abb9 	.word	0x0000abb9

0000a960 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    a960:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    a962:	2800      	cmp	r0, #0
    a964:	d001      	beq.n	a96a <sd_mmc_get_capacity+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
    a966:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    a968:	bd10      	pop	{r4, pc}
    a96a:	2000      	movs	r0, #0
    a96c:	4b07      	ldr	r3, [pc, #28]	; (a98c <sd_mmc_get_capacity+0x2c>)
    a96e:	4798      	blx	r3
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a970:	2800      	cmp	r0, #0
    a972:	d1f8      	bne.n	a966 <sd_mmc_get_capacity+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a974:	4b06      	ldr	r3, [pc, #24]	; (a990 <sd_mmc_get_capacity+0x30>)
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	2b00      	cmp	r3, #0
    a97a:	d003      	beq.n	a984 <sd_mmc_get_capacity+0x24>
	return sd_mmc_card->capacity;
    a97c:	4b05      	ldr	r3, [pc, #20]	; (a994 <sd_mmc_get_capacity+0x34>)
    a97e:	681b      	ldr	r3, [r3, #0]
    a980:	6858      	ldr	r0, [r3, #4]
    a982:	e7f1      	b.n	a968 <sd_mmc_get_capacity+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    a984:	4b04      	ldr	r3, [pc, #16]	; (a998 <sd_mmc_get_capacity+0x38>)
    a986:	4798      	blx	r3
    a988:	e7f8      	b.n	a97c <sd_mmc_get_capacity+0x1c>
    a98a:	46c0      	nop			; (mov r8, r8)
    a98c:	0000a3e1 	.word	0x0000a3e1
    a990:	20000694 	.word	0x20000694
    a994:	20000670 	.word	0x20000670
    a998:	0000abb9 	.word	0x0000abb9

0000a99c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    a99c:	2000      	movs	r0, #0
    a99e:	4770      	bx	lr

0000a9a0 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    a9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9a2:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    a9a4:	466b      	mov	r3, sp
    a9a6:	1ddd      	adds	r5, r3, #7
    a9a8:	23ff      	movs	r3, #255	; 0xff
	uint16_t dummy = 0xFF;

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a9aa:	4f11      	ldr	r7, [pc, #68]	; (a9f0 <sd_mmc_spi_wait_busy+0x50>)
    a9ac:	4e11      	ldr	r6, [pc, #68]	; (a9f4 <sd_mmc_spi_wait_busy+0x54>)
    a9ae:	2201      	movs	r2, #1
    a9b0:	0029      	movs	r1, r5
    a9b2:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    a9b4:	702b      	strb	r3, [r5, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a9b6:	47b0      	blx	r6
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a9b8:	23ff      	movs	r3, #255	; 0xff
    a9ba:	2201      	movs	r2, #1
    a9bc:	0029      	movs	r1, r5
    a9be:	0038      	movs	r0, r7
    a9c0:	47b0      	blx	r6
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a9c2:	23ff      	movs	r3, #255	; 0xff
    a9c4:	2201      	movs	r2, #1
    a9c6:	0029      	movs	r1, r5
    a9c8:	0038      	movs	r0, r7
    a9ca:	47b0      	blx	r6
    a9cc:	4c0a      	ldr	r4, [pc, #40]	; (a9f8 <sd_mmc_spi_wait_busy+0x58>)
    a9ce:	e007      	b.n	a9e0 <sd_mmc_spi_wait_busy+0x40>
    a9d0:	23ff      	movs	r3, #255	; 0xff
    a9d2:	2201      	movs	r2, #1
    a9d4:	0029      	movs	r1, r5
    a9d6:	0038      	movs	r0, r7
    a9d8:	3c01      	subs	r4, #1
    a9da:	47b0      	blx	r6
			dummy);
		if (!(nec_timeout--)) {
    a9dc:	2c00      	cmp	r4, #0
    a9de:	d005      	beq.n	a9ec <sd_mmc_spi_wait_busy+0x4c>
			return false;
		}
	} while (line != 0xFF);
    a9e0:	782b      	ldrb	r3, [r5, #0]
    a9e2:	2bff      	cmp	r3, #255	; 0xff
    a9e4:	d1f4      	bne.n	a9d0 <sd_mmc_spi_wait_busy+0x30>
	return true;
    a9e6:	2001      	movs	r0, #1
}
    a9e8:	b003      	add	sp, #12
    a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
    a9ec:	2000      	movs	r0, #0
    a9ee:	e7fb      	b.n	a9e8 <sd_mmc_spi_wait_busy+0x48>
    a9f0:	20000698 	.word	0x20000698
    a9f4:	0000f76d 	.word	0x0000f76d
    a9f8:	00030d40 	.word	0x00030d40

0000a9fc <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9fe:	46c6      	mov	lr, r8
    aa00:	b500      	push	{lr}
    aa02:	b082      	sub	sp, #8
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    aa04:	466b      	mov	r3, sp
    aa06:	1ddd      	adds	r5, r3, #7
    aa08:	2300      	movs	r3, #0
    aa0a:	702b      	strb	r3, [r5, #0]
    aa0c:	4b12      	ldr	r3, [pc, #72]	; (aa58 <sd_mmc_spi_start_read_block+0x5c>)
    aa0e:	4c13      	ldr	r4, [pc, #76]	; (aa5c <sd_mmc_spi_start_read_block+0x60>)
    aa10:	4698      	mov	r8, r3
    aa12:	4f13      	ldr	r7, [pc, #76]	; (aa60 <sd_mmc_spi_start_read_block+0x64>)
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    aa14:	260f      	movs	r6, #15
    aa16:	e004      	b.n	aa22 <sd_mmc_spi_start_read_block+0x26>
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
			}
			return false;
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    aa18:	2bfe      	cmp	r3, #254	; 0xfe
    aa1a:	d016      	beq.n	aa4a <sd_mmc_spi_start_read_block+0x4e>
    aa1c:	3c01      	subs	r4, #1
		if (i-- == 0) {
    aa1e:	2c00      	cmp	r4, #0
    aa20:	d015      	beq.n	aa4e <sd_mmc_spi_start_read_block+0x52>
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    aa22:	23ff      	movs	r3, #255	; 0xff
    aa24:	2201      	movs	r2, #1
    aa26:	0029      	movs	r1, r5
    aa28:	4640      	mov	r0, r8
    aa2a:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    aa2c:	782b      	ldrb	r3, [r5, #0]
    aa2e:	001a      	movs	r2, r3
    aa30:	43b2      	bics	r2, r6
    aa32:	d1f1      	bne.n	aa18 <sd_mmc_spi_start_read_block+0x1c>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    aa34:	3207      	adds	r2, #7
    aa36:	421a      	tst	r2, r3
    aa38:	d100      	bne.n	aa3c <sd_mmc_spi_start_read_block+0x40>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    aa3a:	220b      	movs	r2, #11
			return false;
    aa3c:	2000      	movs	r0, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    aa3e:	4b09      	ldr	r3, [pc, #36]	; (aa64 <sd_mmc_spi_start_read_block+0x68>)
    aa40:	701a      	strb	r2, [r3, #0]

	return true;
}
    aa42:	b002      	add	sp, #8
    aa44:	bc04      	pop	{r2}
    aa46:	4690      	mov	r8, r2
    aa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    aa4a:	2001      	movs	r0, #1
    aa4c:	e7f9      	b.n	aa42 <sd_mmc_spi_start_read_block+0x46>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    aa4e:	2204      	movs	r2, #4
    aa50:	4b04      	ldr	r3, [pc, #16]	; (aa64 <sd_mmc_spi_start_read_block+0x68>)
			return false;
    aa52:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    aa54:	701a      	strb	r2, [r3, #0]
			return false;
    aa56:	e7f4      	b.n	aa42 <sd_mmc_spi_start_read_block+0x46>
    aa58:	20000698 	.word	0x20000698
    aa5c:	0007a120 	.word	0x0007a120
    aa60:	0000f76d 	.word	0x0000f76d
    aa64:	200006db 	.word	0x200006db

0000aa68 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa68:	2300      	movs	r3, #0
    aa6a:	4a2d      	ldr	r2, [pc, #180]	; (ab20 <sd_mmc_spi_init+0xb8>)
{
    aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa6e:	7013      	strb	r3, [r2, #0]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    aa70:	2224      	movs	r2, #36	; 0x24
	config->mode             = SPI_MODE_MASTER;
    aa72:	2501      	movs	r5, #1
{
    aa74:	b091      	sub	sp, #68	; 0x44
    aa76:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
    aa78:	54a3      	strb	r3, [r4, r2]
	config->data_order       = SPI_DATA_ORDER_MSB;
    aa7a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    aa7c:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    aa7e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    aa80:	7463      	strb	r3, [r4, #17]
	config->master_slave_select_enable= false;
    aa82:	7523      	strb	r3, [r4, #20]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    aa84:	3a18      	subs	r2, #24
    aa86:	2100      	movs	r1, #0
    aa88:	4b26      	ldr	r3, [pc, #152]	; (ab24 <sd_mmc_spi_init+0xbc>)
    aa8a:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
    aa8c:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
    aa8e:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    aa90:	74e5      	strb	r5, [r4, #19]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    aa92:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    aa94:	2380      	movs	r3, #128	; 0x80
    aa96:	029b      	lsls	r3, r3, #10
    aa98:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    aa9a:	4b23      	ldr	r3, [pc, #140]	; (ab28 <sd_mmc_spi_init+0xc0>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    aa9c:	4f23      	ldr	r7, [pc, #140]	; (ab2c <sd_mmc_spi_init+0xc4>)
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    aa9e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    aaa0:	4b23      	ldr	r3, [pc, #140]	; (ab30 <sd_mmc_spi_init+0xc8>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    aaa2:	0022      	movs	r2, r4
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    aaa4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    aaa6:	4b23      	ldr	r3, [pc, #140]	; (ab34 <sd_mmc_spi_init+0xcc>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    aaa8:	4923      	ldr	r1, [pc, #140]	; (ab38 <sd_mmc_spi_init+0xd0>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    aaaa:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    aaac:	4b23      	ldr	r3, [pc, #140]	; (ab3c <sd_mmc_spi_init+0xd4>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    aaae:	0038      	movs	r0, r7
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    aab0:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    aab2:	4b23      	ldr	r3, [pc, #140]	; (ab40 <sd_mmc_spi_init+0xd8>)
    aab4:	61a3      	str	r3, [r4, #24]
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    aab6:	4b23      	ldr	r3, [pc, #140]	; (ab44 <sd_mmc_spi_init+0xdc>)
    aab8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    aaba:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    aabc:	4b22      	ldr	r3, [pc, #136]	; (ab48 <sd_mmc_spi_init+0xe0>)
    aabe:	0030      	movs	r0, r6
    aac0:	4798      	blx	r3
    aac2:	231f      	movs	r3, #31
    aac4:	4018      	ands	r0, r3
    aac6:	4085      	lsls	r5, r0
    aac8:	4b20      	ldr	r3, [pc, #128]	; (ab4c <sd_mmc_spi_init+0xe4>)
    aaca:	601d      	str	r5, [r3, #0]
    aacc:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    aace:	69dc      	ldr	r4, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    aad0:	2c00      	cmp	r4, #0
    aad2:	d1fc      	bne.n	aace <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    aad4:	2202      	movs	r2, #2
	config->input_pull = PORT_PIN_PULL_UP;
    aad6:	2501      	movs	r5, #1
    aad8:	6833      	ldr	r3, [r6, #0]
    aada:	a901      	add	r1, sp, #4
    aadc:	4313      	orrs	r3, r2
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    aade:	4a1c      	ldr	r2, [pc, #112]	; (ab50 <sd_mmc_spi_init+0xe8>)
    aae0:	6033      	str	r3, [r6, #0]
    aae2:	7810      	ldrb	r0, [r2, #0]
	config->address_enabled = false;
    aae4:	4b1b      	ldr	r3, [pc, #108]	; (ab54 <sd_mmc_spi_init+0xec>)
	slave->ss_pin          = config->ss_pin;
    aae6:	4e1c      	ldr	r6, [pc, #112]	; (ab58 <sd_mmc_spi_init+0xf0>)
	config->address_enabled = false;
    aae8:	705c      	strb	r4, [r3, #1]
	config->address         = 0;
    aaea:	709c      	strb	r4, [r3, #2]
    aaec:	7018      	strb	r0, [r3, #0]
	slave->ss_pin          = config->ss_pin;
    aaee:	7030      	strb	r0, [r6, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    aaf0:	4b1a      	ldr	r3, [pc, #104]	; (ab5c <sd_mmc_spi_init+0xf4>)
	slave->address_enabled = config->address_enabled;
    aaf2:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    aaf4:	70b4      	strb	r4, [r6, #2]
    aaf6:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    aaf8:	708c      	strb	r4, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    aafa:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    aafc:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    aafe:	7831      	ldrb	r1, [r6, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    ab00:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    ab02:	09ca      	lsrs	r2, r1, #7
    ab04:	d109      	bne.n	ab1a <sd_mmc_spi_init+0xb2>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ab06:	321f      	adds	r2, #31
    ab08:	400a      	ands	r2, r1
    ab0a:	4095      	lsls	r5, r2
		port_base->OUTSET.reg = pin_mask;
    ab0c:	4a14      	ldr	r2, [pc, #80]	; (ab60 <sd_mmc_spi_init+0xf8>)
    ab0e:	01db      	lsls	r3, r3, #7
    ab10:	4694      	mov	ip, r2
    ab12:	4463      	add	r3, ip
    ab14:	619d      	str	r5, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    ab16:	b011      	add	sp, #68	; 0x44
    ab18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab1a:	61a4      	str	r4, [r4, #24]
    ab1c:	deff      	udf	#255	; 0xff
    ab1e:	46c0      	nop			; (mov r8, r8)
    ab20:	200006db 	.word	0x200006db
    ab24:	000135cb 	.word	0x000135cb
    ab28:	00100002 	.word	0x00100002
    ab2c:	20000698 	.word	0x20000698
    ab30:	00110002 	.word	0x00110002
    ab34:	00120002 	.word	0x00120002
    ab38:	42000c00 	.word	0x42000c00
    ab3c:	00130002 	.word	0x00130002
    ab40:	00061a80 	.word	0x00061a80
    ab44:	0000f575 	.word	0x0000f575
    ab48:	0000f431 	.word	0x0000f431
    ab4c:	e000e100 	.word	0xe000e100
    ab50:	200000fc 	.word	0x200000fc
    ab54:	200006e8 	.word	0x200006e8
    ab58:	200006d8 	.word	0x200006d8
    ab5c:	0000ef8d 	.word	0x0000ef8d
    ab60:	41004400 	.word	0x41004400

0000ab64 <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab64:	2200      	movs	r2, #0
{
    ab66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab68:	4b0d      	ldr	r3, [pc, #52]	; (aba0 <sd_mmc_spi_select_device+0x3c>)
{
    ab6a:	0007      	movs	r7, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ab6c:	701a      	strb	r2, [r3, #0]
    ab6e:	4b0d      	ldr	r3, [pc, #52]	; (aba4 <sd_mmc_spi_select_device+0x40>)
    ab70:	000c      	movs	r4, r1
    ab72:	4299      	cmp	r1, r3
    ab74:	d900      	bls.n	ab78 <sd_mmc_spi_select_device+0x14>
    ab76:	001c      	movs	r4, r3
    ab78:	4d0b      	ldr	r5, [pc, #44]	; (aba8 <sd_mmc_spi_select_device+0x44>)
    ab7a:	4e0c      	ldr	r6, [pc, #48]	; (abac <sd_mmc_spi_select_device+0x48>)
    ab7c:	e001      	b.n	ab82 <sd_mmc_spi_select_device+0x1e>
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
		clock -= clock / 8;
    ab7e:	08e3      	lsrs	r3, r4, #3
    ab80:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    ab82:	0021      	movs	r1, r4
    ab84:	0028      	movs	r0, r5
    ab86:	47b0      	blx	r6
    ab88:	2817      	cmp	r0, #23
    ab8a:	d0f8      	beq.n	ab7e <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    ab8c:	0079      	lsls	r1, r7, #1
    ab8e:	19cf      	adds	r7, r1, r7
    ab90:	4907      	ldr	r1, [pc, #28]	; (abb0 <sd_mmc_spi_select_device+0x4c>)
    ab92:	0028      	movs	r0, r5
    ab94:	19c9      	adds	r1, r1, r7
    ab96:	2201      	movs	r2, #1
    ab98:	4b06      	ldr	r3, [pc, #24]	; (abb4 <sd_mmc_spi_select_device+0x50>)
    ab9a:	4798      	blx	r3
}
    ab9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab9e:	46c0      	nop			; (mov r8, r8)
    aba0:	200006db 	.word	0x200006db
    aba4:	016e3600 	.word	0x016e3600
    aba8:	20000698 	.word	0x20000698
    abac:	0000f4c1 	.word	0x0000f4c1
    abb0:	200006d8 	.word	0x200006d8
    abb4:	0000f83d 	.word	0x0000f83d

0000abb8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    abb8:	2200      	movs	r2, #0
{
    abba:	b510      	push	{r4, lr}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    abbc:	0041      	lsls	r1, r0, #1
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    abbe:	4b04      	ldr	r3, [pc, #16]	; (abd0 <sd_mmc_spi_deselect_device+0x18>)
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    abc0:	1808      	adds	r0, r1, r0
    abc2:	4904      	ldr	r1, [pc, #16]	; (abd4 <sd_mmc_spi_deselect_device+0x1c>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    abc4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    abc6:	1809      	adds	r1, r1, r0
    abc8:	4b03      	ldr	r3, [pc, #12]	; (abd8 <sd_mmc_spi_deselect_device+0x20>)
    abca:	4804      	ldr	r0, [pc, #16]	; (abdc <sd_mmc_spi_deselect_device+0x24>)
    abcc:	4798      	blx	r3
}
    abce:	bd10      	pop	{r4, pc}
    abd0:	200006db 	.word	0x200006db
    abd4:	200006d8 	.word	0x200006d8
    abd8:	0000f83d 	.word	0x0000f83d
    abdc:	20000698 	.word	0x20000698

0000abe0 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    abe2:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
    abe4:	466b      	mov	r3, sp
    abe6:	1ddd      	adds	r5, r3, #7
    abe8:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    abea:	2200      	movs	r2, #0
    abec:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
    abee:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    abf0:	4b06      	ldr	r3, [pc, #24]	; (ac0c <sd_mmc_spi_send_clock+0x2c>)
    abf2:	4f07      	ldr	r7, [pc, #28]	; (ac10 <sd_mmc_spi_send_clock+0x30>)
    abf4:	4e07      	ldr	r6, [pc, #28]	; (ac14 <sd_mmc_spi_send_clock+0x34>)
    abf6:	701a      	strb	r2, [r3, #0]
    abf8:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    abfa:	2201      	movs	r2, #1
    abfc:	0029      	movs	r1, r5
    abfe:	0038      	movs	r0, r7
    ac00:	b2e4      	uxtb	r4, r4
    ac02:	47b0      	blx	r6
	for (i = 0; i < 10; i++) {
    ac04:	2c00      	cmp	r4, #0
    ac06:	d1f7      	bne.n	abf8 <sd_mmc_spi_send_clock+0x18>
	}
}
    ac08:	b003      	add	sp, #12
    ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac0c:	200006db 	.word	0x200006db
    ac10:	20000698 	.word	0x20000698
    ac14:	0000f911 	.word	0x0000f911

0000ac18 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    ac18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac1a:	464e      	mov	r6, r9
    ac1c:	4645      	mov	r5, r8
    ac1e:	46de      	mov	lr, fp
    ac20:	4657      	mov	r7, sl
    ac22:	b5e0      	push	{r5, r6, r7, lr}
    ac24:	b085      	sub	sp, #20
    ac26:	4699      	mov	r9, r3
	uint8_t dummy = 0xFF;
    ac28:	466b      	mov	r3, sp
{
    ac2a:	4683      	mov	fp, r0
    ac2c:	0008      	movs	r0, r1
	uint8_t dummy = 0xFF;
    ac2e:	1d99      	adds	r1, r3, #6
    ac30:	23ff      	movs	r3, #255	; 0xff
    ac32:	700b      	strb	r3, [r1, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac34:	4b52      	ldr	r3, [pc, #328]	; (ad80 <sd_mmc_spi_adtc_start+0x168>)
{
    ac36:	4690      	mov	r8, r2
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac38:	469a      	mov	sl, r3
    ac3a:	2300      	movs	r3, #0
    ac3c:	4652      	mov	r2, sl
    ac3e:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    ac40:	465b      	mov	r3, fp
    ac42:	223f      	movs	r2, #63	; 0x3f
    ac44:	401a      	ands	r2, r3
    ac46:	2340      	movs	r3, #64	; 0x40
    ac48:	ac02      	add	r4, sp, #8
    ac4a:	431a      	orrs	r2, r3
	cmd_token[1] = arg >> 24;
    ac4c:	0e03      	lsrs	r3, r0, #24
    ac4e:	7063      	strb	r3, [r4, #1]
	cmd_token[2] = arg >> 16;
    ac50:	0c03      	lsrs	r3, r0, #16
    ac52:	70a3      	strb	r3, [r4, #2]
	cmd_token[3] = arg >> 8;
    ac54:	0a03      	lsrs	r3, r0, #8
    ac56:	70e3      	strb	r3, [r4, #3]
	cmd_token[4] = arg;
    ac58:	2600      	movs	r6, #0
	crc = 0;
    ac5a:	2300      	movs	r3, #0
				crc ^= 0x09;
    ac5c:	2509      	movs	r5, #9
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    ac5e:	7022      	strb	r2, [r4, #0]
	cmd_token[4] = arg;
    ac60:	7120      	strb	r0, [r4, #4]
	crc = 0;
    ac62:	2008      	movs	r0, #8
    ac64:	e005      	b.n	ac72 <sd_mmc_spi_adtc_start+0x5a>
    ac66:	3801      	subs	r0, #1
			value <<= 1;
    ac68:	0052      	lsls	r2, r2, #1
    ac6a:	b2c0      	uxtb	r0, r0
    ac6c:	b2d2      	uxtb	r2, r2
		for (i = 0; i < 8; i++) {
    ac6e:	2800      	cmp	r0, #0
    ac70:	d00d      	beq.n	ac8e <sd_mmc_spi_adtc_start+0x76>
			crc <<= 1;
    ac72:	005b      	lsls	r3, r3, #1
    ac74:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    ac76:	001f      	movs	r7, r3
    ac78:	4057      	eors	r7, r2
    ac7a:	063f      	lsls	r7, r7, #24
    ac7c:	d5f3      	bpl.n	ac66 <sd_mmc_spi_adtc_start+0x4e>
    ac7e:	3801      	subs	r0, #1
				crc ^= 0x09;
    ac80:	406b      	eors	r3, r5
			value <<= 1;
    ac82:	0052      	lsls	r2, r2, #1
    ac84:	b2c0      	uxtb	r0, r0
				crc ^= 0x09;
    ac86:	b2db      	uxtb	r3, r3
			value <<= 1;
    ac88:	b2d2      	uxtb	r2, r2
		for (i = 0; i < 8; i++) {
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d1f1      	bne.n	ac72 <sd_mmc_spi_adtc_start+0x5a>
    ac8e:	3601      	adds	r6, #1
	while (size--) {
    ac90:	2e05      	cmp	r6, #5
    ac92:	d001      	beq.n	ac98 <sd_mmc_spi_adtc_start+0x80>
    ac94:	5da2      	ldrb	r2, [r4, r6]
    ac96:	e7e4      	b.n	ac62 <sd_mmc_spi_adtc_start+0x4a>
	crc = (crc << 1) | 1;
    ac98:	2201      	movs	r2, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    ac9a:	4e3a      	ldr	r6, [pc, #232]	; (ad84 <sd_mmc_spi_adtc_start+0x16c>)
	crc = (crc << 1) | 1;
    ac9c:	005b      	lsls	r3, r3, #1
    ac9e:	4313      	orrs	r3, r2
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    aca0:	4d39      	ldr	r5, [pc, #228]	; (ad88 <sd_mmc_spi_adtc_start+0x170>)
    aca2:	2201      	movs	r2, #1
    aca4:	0030      	movs	r0, r6
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    aca6:	7163      	strb	r3, [r4, #5]
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    aca8:	47a8      	blx	r5
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    acaa:	0021      	movs	r1, r4
    acac:	2206      	movs	r2, #6
    acae:	0030      	movs	r0, r6
    acb0:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    acb2:	466b      	mov	r3, sp
    acb4:	1ddc      	adds	r4, r3, #7
    acb6:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    acb8:	2201      	movs	r2, #1
    acba:	0021      	movs	r1, r4
    acbc:	0030      	movs	r0, r6
    acbe:	4f33      	ldr	r7, [pc, #204]	; (ad8c <sd_mmc_spi_adtc_start+0x174>)
	r1 = 0xFF;
    acc0:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    acc2:	2507      	movs	r5, #7
    acc4:	47b8      	blx	r7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    acc6:	23ff      	movs	r3, #255	; 0xff
    acc8:	2201      	movs	r2, #1
    acca:	0021      	movs	r1, r4
    accc:	0030      	movs	r0, r6
    acce:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    acd0:	7823      	ldrb	r3, [r4, #0]
    acd2:	b25a      	sxtb	r2, r3
    acd4:	2a00      	cmp	r2, #0
    acd6:	da0e      	bge.n	acf6 <sd_mmc_spi_adtc_start+0xde>
    acd8:	3d01      	subs	r5, #1
    acda:	b2ed      	uxtb	r5, r5
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    acdc:	2d00      	cmp	r5, #0
    acde:	d1f2      	bne.n	acc6 <sd_mmc_spi_adtc_start+0xae>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ace0:	2302      	movs	r3, #2
    ace2:	4652      	mov	r2, sl
			return false;
    ace4:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ace6:	7013      	strb	r3, [r2, #0]

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    ace8:	b005      	add	sp, #20
    acea:	bc3c      	pop	{r2, r3, r4, r5}
    acec:	4690      	mov	r8, r2
    acee:	4699      	mov	r9, r3
    acf0:	46a2      	mov	sl, r4
    acf2:	46ab      	mov	fp, r5
    acf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    acf6:	4c26      	ldr	r4, [pc, #152]	; (ad90 <sd_mmc_spi_adtc_start+0x178>)
    acf8:	6023      	str	r3, [r4, #0]
	if (r1 & R1_SPI_COM_CRC) {
    acfa:	071a      	lsls	r2, r3, #28
    acfc:	d418      	bmi.n	ad30 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    acfe:	075a      	lsls	r2, r3, #29
    ad00:	d41b      	bmi.n	ad3a <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    ad02:	2201      	movs	r2, #1
    ad04:	4393      	bics	r3, r2
    ad06:	d136      	bne.n	ad76 <sd_mmc_spi_adtc_start+0x15e>
	if (cmd & SDMMC_RESP_BUSY) {
    ad08:	465b      	mov	r3, fp
    ad0a:	049b      	lsls	r3, r3, #18
    ad0c:	d41a      	bmi.n	ad44 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_8) {
    ad0e:	465b      	mov	r3, fp
    ad10:	059b      	lsls	r3, r3, #22
    ad12:	d428      	bmi.n	ad66 <sd_mmc_spi_adtc_start+0x14e>
	if (cmd & SDMMC_RESP_32) {
    ad14:	465b      	mov	r3, fp
    ad16:	055b      	lsls	r3, r3, #21
    ad18:	d41c      	bmi.n	ad54 <sd_mmc_spi_adtc_start+0x13c>
	sd_mmc_spi_block_size = block_size;
    ad1a:	4642      	mov	r2, r8
    ad1c:	4b1d      	ldr	r3, [pc, #116]	; (ad94 <sd_mmc_spi_adtc_start+0x17c>)
	return true; // Command complete
    ad1e:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
    ad20:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    ad22:	464a      	mov	r2, r9
    ad24:	4b1c      	ldr	r3, [pc, #112]	; (ad98 <sd_mmc_spi_adtc_start+0x180>)
    ad26:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    ad28:	2200      	movs	r2, #0
    ad2a:	4b1c      	ldr	r3, [pc, #112]	; (ad9c <sd_mmc_spi_adtc_start+0x184>)
    ad2c:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    ad2e:	e7db      	b.n	ace8 <sd_mmc_spi_adtc_start+0xd0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    ad30:	2306      	movs	r3, #6
    ad32:	4652      	mov	r2, sl
		return false;
    ad34:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    ad36:	7013      	strb	r3, [r2, #0]
		return false;
    ad38:	e7d6      	b.n	ace8 <sd_mmc_spi_adtc_start+0xd0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    ad3a:	2309      	movs	r3, #9
    ad3c:	4652      	mov	r2, sl
		return false;
    ad3e:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    ad40:	7013      	strb	r3, [r2, #0]
		return false;
    ad42:	e7d1      	b.n	ace8 <sd_mmc_spi_adtc_start+0xd0>
		if (!sd_mmc_spi_wait_busy()) {
    ad44:	4b16      	ldr	r3, [pc, #88]	; (ada0 <sd_mmc_spi_adtc_start+0x188>)
    ad46:	4798      	blx	r3
    ad48:	2800      	cmp	r0, #0
    ad4a:	d1e0      	bne.n	ad0e <sd_mmc_spi_adtc_start+0xf6>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    ad4c:	2303      	movs	r3, #3
    ad4e:	4652      	mov	r2, sl
    ad50:	7013      	strb	r3, [r2, #0]
			return false;
    ad52:	e7c9      	b.n	ace8 <sd_mmc_spi_adtc_start+0xd0>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    ad54:	23ff      	movs	r3, #255	; 0xff
    ad56:	2204      	movs	r2, #4
    ad58:	0021      	movs	r1, r4
    ad5a:	0030      	movs	r0, r6
    ad5c:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    ad5e:	6823      	ldr	r3, [r4, #0]
    ad60:	ba1b      	rev	r3, r3
    ad62:	6023      	str	r3, [r4, #0]
    ad64:	e7d9      	b.n	ad1a <sd_mmc_spi_adtc_start+0x102>
		sd_mmc_spi_response_32 = 0;
    ad66:	2300      	movs	r3, #0
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    ad68:	2201      	movs	r2, #1
		sd_mmc_spi_response_32 = 0;
    ad6a:	6023      	str	r3, [r4, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    ad6c:	0021      	movs	r1, r4
    ad6e:	33ff      	adds	r3, #255	; 0xff
    ad70:	0030      	movs	r0, r6
    ad72:	47b8      	blx	r7
    ad74:	e7ce      	b.n	ad14 <sd_mmc_spi_adtc_start+0xfc>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ad76:	4653      	mov	r3, sl
		return false;
    ad78:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ad7a:	701a      	strb	r2, [r3, #0]
		return false;
    ad7c:	e7b4      	b.n	ace8 <sd_mmc_spi_adtc_start+0xd0>
    ad7e:	46c0      	nop			; (mov r8, r8)
    ad80:	200006db 	.word	0x200006db
    ad84:	20000698 	.word	0x20000698
    ad88:	0000f911 	.word	0x0000f911
    ad8c:	0000f76d 	.word	0x0000f76d
    ad90:	200006e0 	.word	0x200006e0
    ad94:	200006d4 	.word	0x200006d4
    ad98:	200006dc 	.word	0x200006dc
    ad9c:	200006e4 	.word	0x200006e4
    ada0:	0000a9a1 	.word	0x0000a9a1

0000ada4 <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ada4:	2300      	movs	r3, #0
{
    ada6:	b510      	push	{r4, lr}
    ada8:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    adaa:	9300      	str	r3, [sp, #0]
    adac:	2200      	movs	r2, #0
    adae:	4c02      	ldr	r4, [pc, #8]	; (adb8 <sd_mmc_spi_send_cmd+0x14>)
    adb0:	47a0      	blx	r4
}
    adb2:	b002      	add	sp, #8
    adb4:	bd10      	pop	{r4, pc}
    adb6:	46c0      	nop			; (mov r8, r8)
    adb8:	0000ac19 	.word	0x0000ac19

0000adbc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    adbc:	4b01      	ldr	r3, [pc, #4]	; (adc4 <sd_mmc_spi_get_response+0x8>)
    adbe:	6818      	ldr	r0, [r3, #0]
}
    adc0:	4770      	bx	lr
    adc2:	46c0      	nop			; (mov r8, r8)
    adc4:	200006e0 	.word	0x200006e0

0000adc8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adca:	46c6      	mov	lr, r8
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    adcc:	2200      	movs	r2, #0
{
    adce:	b500      	push	{lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    add0:	4b14      	ldr	r3, [pc, #80]	; (ae24 <sd_mmc_spi_read_word+0x5c>)
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    add2:	4c15      	ldr	r4, [pc, #84]	; (ae28 <sd_mmc_spi_read_word+0x60>)
    add4:	4d15      	ldr	r5, [pc, #84]	; (ae2c <sd_mmc_spi_read_word+0x64>)
{
    add6:	b084      	sub	sp, #16
    add8:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    adda:	701a      	strb	r2, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    addc:	8829      	ldrh	r1, [r5, #0]
    adde:	4e14      	ldr	r6, [pc, #80]	; (ae30 <sd_mmc_spi_read_word+0x68>)
    ade0:	6820      	ldr	r0, [r4, #0]
    ade2:	47b0      	blx	r6
    ade4:	2900      	cmp	r1, #0
    ade6:	d103      	bne.n	adf0 <sd_mmc_spi_read_word+0x28>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    ade8:	4b12      	ldr	r3, [pc, #72]	; (ae34 <sd_mmc_spi_read_word+0x6c>)
    adea:	4798      	blx	r3
    adec:	2800      	cmp	r0, #0
    adee:	d00f      	beq.n	ae10 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    adf0:	4b11      	ldr	r3, [pc, #68]	; (ae38 <sd_mmc_spi_read_word+0x70>)
    adf2:	a901      	add	r1, sp, #4
    adf4:	4698      	mov	r8, r3
    adf6:	2204      	movs	r2, #4
    adf8:	23ff      	movs	r3, #255	; 0xff
    adfa:	4640      	mov	r0, r8
    adfc:	4f0f      	ldr	r7, [pc, #60]	; (ae3c <sd_mmc_spi_read_word+0x74>)
    adfe:	47b8      	blx	r7
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    ae00:	6823      	ldr	r3, [r4, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ae02:	8829      	ldrh	r1, [r5, #0]
	sd_mmc_spi_transfert_pos += 4;
    ae04:	1d18      	adds	r0, r3, #4
    ae06:	6020      	str	r0, [r4, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ae08:	47b0      	blx	r6
    ae0a:	2900      	cmp	r1, #0
    ae0c:	d004      	beq.n	ae18 <sd_mmc_spi_read_word+0x50>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    ae0e:	2001      	movs	r0, #1
}
    ae10:	b004      	add	sp, #16
    ae12:	bc04      	pop	{r2}
    ae14:	4690      	mov	r8, r2
    ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ae18:	23ff      	movs	r3, #255	; 0xff
    ae1a:	2202      	movs	r2, #2
    ae1c:	a903      	add	r1, sp, #12
    ae1e:	4640      	mov	r0, r8
    ae20:	47b8      	blx	r7
    ae22:	e7f4      	b.n	ae0e <sd_mmc_spi_read_word+0x46>
    ae24:	200006db 	.word	0x200006db
    ae28:	200006e4 	.word	0x200006e4
    ae2c:	200006d4 	.word	0x200006d4
    ae30:	000132f9 	.word	0x000132f9
    ae34:	0000a9fd 	.word	0x0000a9fd
    ae38:	20000698 	.word	0x20000698
    ae3c:	0000f76d 	.word	0x0000f76d

0000ae40 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae42:	46d6      	mov	lr, sl
    ae44:	464f      	mov	r7, r9
    ae46:	4646      	mov	r6, r8
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ae48:	2200      	movs	r2, #0
{
    ae4a:	b5c0      	push	{r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ae4c:	4b19      	ldr	r3, [pc, #100]	; (aeb4 <sd_mmc_spi_start_read_blocks+0x74>)
	pos = 0;
	while (nb_block--) {
    ae4e:	1e4c      	subs	r4, r1, #1
{
    ae50:	b082      	sub	sp, #8
    ae52:	4682      	mov	sl, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ae54:	701a      	strb	r2, [r3, #0]
	while (nb_block--) {
    ae56:	b2a4      	uxth	r4, r4
    ae58:	2900      	cmp	r1, #0
    ae5a:	d029      	beq.n	aeb0 <sd_mmc_spi_start_read_blocks+0x70>
    ae5c:	4b16      	ldr	r3, [pc, #88]	; (aeb8 <sd_mmc_spi_start_read_blocks+0x78>)
    ae5e:	2500      	movs	r5, #0
    ae60:	4699      	mov	r9, r3
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    ae62:	4b16      	ldr	r3, [pc, #88]	; (aebc <sd_mmc_spi_start_read_blocks+0x7c>)
    ae64:	4f16      	ldr	r7, [pc, #88]	; (aec0 <sd_mmc_spi_start_read_blocks+0x80>)
    ae66:	4698      	mov	r8, r3
    ae68:	4e16      	ldr	r6, [pc, #88]	; (aec4 <sd_mmc_spi_start_read_blocks+0x84>)
    ae6a:	e018      	b.n	ae9e <sd_mmc_spi_start_read_blocks+0x5e>
    ae6c:	4643      	mov	r3, r8
    ae6e:	881a      	ldrh	r2, [r3, #0]
    ae70:	4653      	mov	r3, sl
    ae72:	0038      	movs	r0, r7
    ae74:	1959      	adds	r1, r3, r5
    ae76:	23ff      	movs	r3, #255	; 0xff
    ae78:	47b0      	blx	r6
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ae7a:	4a13      	ldr	r2, [pc, #76]	; (aec8 <sd_mmc_spi_start_read_blocks+0x88>)
		pos += sd_mmc_spi_block_size;
    ae7c:	4643      	mov	r3, r8
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ae7e:	6811      	ldr	r1, [r2, #0]
		pos += sd_mmc_spi_block_size;
    ae80:	881b      	ldrh	r3, [r3, #0]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ae82:	468c      	mov	ip, r1
		pos += sd_mmc_spi_block_size;
    ae84:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ae86:	4463      	add	r3, ip
    ae88:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ae8a:	a901      	add	r1, sp, #4
    ae8c:	23ff      	movs	r3, #255	; 0xff
    ae8e:	2202      	movs	r2, #2
    ae90:	0038      	movs	r0, r7
    ae92:	47b0      	blx	r6
	while (nb_block--) {
    ae94:	3c01      	subs	r4, #1
    ae96:	4b0d      	ldr	r3, [pc, #52]	; (aecc <sd_mmc_spi_start_read_blocks+0x8c>)
    ae98:	b2a4      	uxth	r4, r4
    ae9a:	429c      	cmp	r4, r3
    ae9c:	d008      	beq.n	aeb0 <sd_mmc_spi_start_read_blocks+0x70>
		if (!sd_mmc_spi_start_read_block()) {
    ae9e:	47c8      	blx	r9
    aea0:	2800      	cmp	r0, #0
    aea2:	d1e3      	bne.n	ae6c <sd_mmc_spi_start_read_blocks+0x2c>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    aea4:	b002      	add	sp, #8
    aea6:	bc1c      	pop	{r2, r3, r4}
    aea8:	4690      	mov	r8, r2
    aeaa:	4699      	mov	r9, r3
    aeac:	46a2      	mov	sl, r4
    aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    aeb0:	2001      	movs	r0, #1
    aeb2:	e7f7      	b.n	aea4 <sd_mmc_spi_start_read_blocks+0x64>
    aeb4:	200006db 	.word	0x200006db
    aeb8:	0000a9fd 	.word	0x0000a9fd
    aebc:	200006d4 	.word	0x200006d4
    aec0:	20000698 	.word	0x20000698
    aec4:	0000f76d 	.word	0x0000f76d
    aec8:	200006e4 	.word	0x200006e4
    aecc:	0000ffff 	.word	0x0000ffff

0000aed0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    aed0:	2001      	movs	r0, #1
    aed2:	4770      	bx	lr

0000aed4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    aed4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    aed6:	4b09      	ldr	r3, [pc, #36]	; (aefc <delay_init+0x28>)
    aed8:	2000      	movs	r0, #0
    aeda:	4798      	blx	r3
	cycles_per_ms /= 1000;
    aedc:	21fa      	movs	r1, #250	; 0xfa
    aede:	4c08      	ldr	r4, [pc, #32]	; (af00 <delay_init+0x2c>)
    aee0:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
    aee2:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    aee4:	47a0      	blx	r4
    aee6:	4b07      	ldr	r3, [pc, #28]	; (af04 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
    aee8:	4907      	ldr	r1, [pc, #28]	; (af08 <delay_init+0x34>)
	cycles_per_ms /= 1000;
    aeea:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    aeec:	0028      	movs	r0, r5
    aeee:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    aef0:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
    aef2:	4b06      	ldr	r3, [pc, #24]	; (af0c <delay_init+0x38>)
    aef4:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    aef6:	4b06      	ldr	r3, [pc, #24]	; (af10 <delay_init+0x3c>)
    aef8:	601a      	str	r2, [r3, #0]
}
    aefa:	bd70      	pop	{r4, r5, r6, pc}
    aefc:	00010059 	.word	0x00010059
    af00:	000131ed 	.word	0x000131ed
    af04:	20000100 	.word	0x20000100
    af08:	000f4240 	.word	0x000f4240
    af0c:	20000104 	.word	0x20000104
    af10:	e000e010 	.word	0xe000e010

0000af14 <delay_cycles_ms>:
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    af14:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    af16:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
    af18:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    af1a:	4b08      	ldr	r3, [pc, #32]	; (af3c <delay_cycles_ms+0x28>)
		SysTick->LOAD = n;
    af1c:	4a08      	ldr	r2, [pc, #32]	; (af40 <delay_cycles_ms+0x2c>)
    af1e:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    af20:	0249      	lsls	r1, r1, #9
	while (n--) {
    af22:	3801      	subs	r0, #1
    af24:	d308      	bcc.n	af38 <delay_cycles_ms+0x24>
	if (n > 0) {
    af26:	2c00      	cmp	r4, #0
    af28:	d0fb      	beq.n	af22 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    af2a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    af2c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    af2e:	6813      	ldr	r3, [r2, #0]
    af30:	420b      	tst	r3, r1
    af32:	d0fc      	beq.n	af2e <delay_cycles_ms+0x1a>
    af34:	3801      	subs	r0, #1
    af36:	d2f6      	bcs.n	af26 <delay_cycles_ms+0x12>
	}
}
    af38:	bd30      	pop	{r4, r5, pc}
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	20000100 	.word	0x20000100
    af40:	e000e010 	.word	0xe000e010

0000af44 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    af44:	b510      	push	{r4, lr}
	if (gpfIsr) {
    af46:	4b03      	ldr	r3, [pc, #12]	; (af54 <chip_isr+0x10>)
    af48:	681b      	ldr	r3, [r3, #0]
    af4a:	2b00      	cmp	r3, #0
    af4c:	d000      	beq.n	af50 <chip_isr+0xc>
		gpfIsr();
    af4e:	4798      	blx	r3
	}
}
    af50:	bd10      	pop	{r4, pc}
    af52:	46c0      	nop			; (mov r8, r8)
    af54:	200006ec 	.word	0x200006ec

0000af58 <nm_bsp_reset>:
		port_base->OUTCLR.reg = pin_mask;
    af58:	2280      	movs	r2, #128	; 0x80
    af5a:	4b11      	ldr	r3, [pc, #68]	; (afa0 <nm_bsp_reset+0x48>)
    af5c:	0552      	lsls	r2, r2, #21
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    af5e:	b570      	push	{r4, r5, r6, lr}
    af60:	615a      	str	r2, [r3, #20]
    af62:	2280      	movs	r2, #128	; 0x80
    af64:	2464      	movs	r4, #100	; 0x64
    af66:	0512      	lsls	r2, r2, #20
    af68:	4d0e      	ldr	r5, [pc, #56]	; (afa4 <nm_bsp_reset+0x4c>)
    af6a:	615a      	str	r2, [r3, #20]
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
		delay_ms(1);
    af6c:	2001      	movs	r0, #1
    af6e:	3c01      	subs	r4, #1
    af70:	47a8      	blx	r5
	while (u32TimeMsec--) {
    af72:	2c00      	cmp	r4, #0
    af74:	d1fa      	bne.n	af6c <nm_bsp_reset+0x14>
		port_base->OUTSET.reg = pin_mask;
    af76:	2280      	movs	r2, #128	; 0x80
    af78:	4b09      	ldr	r3, [pc, #36]	; (afa0 <nm_bsp_reset+0x48>)
    af7a:	0552      	lsls	r2, r2, #21
    af7c:	619a      	str	r2, [r3, #24]
    af7e:	3464      	adds	r4, #100	; 0x64
		delay_ms(1);
    af80:	2001      	movs	r0, #1
    af82:	3c01      	subs	r4, #1
    af84:	47a8      	blx	r5
	while (u32TimeMsec--) {
    af86:	2c00      	cmp	r4, #0
    af88:	d1fa      	bne.n	af80 <nm_bsp_reset+0x28>
    af8a:	2280      	movs	r2, #128	; 0x80
    af8c:	4b04      	ldr	r3, [pc, #16]	; (afa0 <nm_bsp_reset+0x48>)
    af8e:	0512      	lsls	r2, r2, #20
    af90:	619a      	str	r2, [r3, #24]
    af92:	3464      	adds	r4, #100	; 0x64
		delay_ms(1);
    af94:	2001      	movs	r0, #1
    af96:	3c01      	subs	r4, #1
    af98:	47a8      	blx	r5
	while (u32TimeMsec--) {
    af9a:	2c00      	cmp	r4, #0
    af9c:	d1fa      	bne.n	af94 <nm_bsp_reset+0x3c>
}
    af9e:	bd70      	pop	{r4, r5, r6, pc}
    afa0:	41004400 	.word	0x41004400
    afa4:	0000af15 	.word	0x0000af15

0000afa8 <nm_bsp_init>:
{
    afa8:	b570      	push	{r4, r5, r6, lr}
	gpfIsr = NULL;
    afaa:	2300      	movs	r3, #0
	config->input_pull = PORT_PIN_PULL_UP;
    afac:	2501      	movs	r5, #1
{
    afae:	b082      	sub	sp, #8
    afb0:	ac01      	add	r4, sp, #4
	gpfIsr = NULL;
    afb2:	4a15      	ldr	r2, [pc, #84]	; (b008 <nm_bsp_init+0x60>)
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    afb4:	4e15      	ldr	r6, [pc, #84]	; (b00c <nm_bsp_init+0x64>)
    afb6:	0021      	movs	r1, r4
    afb8:	201b      	movs	r0, #27
	gpfIsr = NULL;
    afba:	6013      	str	r3, [r2, #0]
	config->powersave  = false;
    afbc:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    afbe:	7065      	strb	r5, [r4, #1]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    afc0:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    afc2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    afc4:	0021      	movs	r1, r4
    afc6:	201c      	movs	r0, #28
    afc8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    afca:	0021      	movs	r1, r4
    afcc:	2028      	movs	r0, #40	; 0x28
    afce:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    afd0:	2280      	movs	r2, #128	; 0x80
    afd2:	4b0f      	ldr	r3, [pc, #60]	; (b010 <nm_bsp_init+0x68>)
    afd4:	0552      	lsls	r2, r2, #21
    afd6:	615a      	str	r2, [r3, #20]
    afd8:	2280      	movs	r2, #128	; 0x80
    afda:	0512      	lsls	r2, r2, #20
    afdc:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    afde:	4b0d      	ldr	r3, [pc, #52]	; (b014 <nm_bsp_init+0x6c>)
    afe0:	681a      	ldr	r2, [r3, #0]
    afe2:	4215      	tst	r5, r2
    afe4:	d002      	beq.n	afec <nm_bsp_init+0x44>
    afe6:	681b      	ldr	r3, [r3, #0]
    afe8:	079b      	lsls	r3, r3, #30
    afea:	d401      	bmi.n	aff0 <nm_bsp_init+0x48>
	    delay_init();
    afec:	4b0a      	ldr	r3, [pc, #40]	; (b018 <nm_bsp_init+0x70>)
    afee:	4798      	blx	r3
	nm_bsp_reset();
    aff0:	4b0a      	ldr	r3, [pc, #40]	; (b01c <nm_bsp_init+0x74>)
    aff2:	4798      	blx	r3
	cpu_irq_enable();
    aff4:	2201      	movs	r2, #1
    aff6:	4b0a      	ldr	r3, [pc, #40]	; (b020 <nm_bsp_init+0x78>)
    aff8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    affa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    affe:	b662      	cpsie	i
}
    b000:	2000      	movs	r0, #0
    b002:	b002      	add	sp, #8
    b004:	bd70      	pop	{r4, r5, r6, pc}
    b006:	46c0      	nop			; (mov r8, r8)
    b008:	200006ec 	.word	0x200006ec
    b00c:	0000ef8d 	.word	0x0000ef8d
    b010:	41004400 	.word	0x41004400
    b014:	e000e010 	.word	0xe000e010
    b018:	0000aed5 	.word	0x0000aed5
    b01c:	0000af59 	.word	0x0000af59
    b020:	200001f9 	.word	0x200001f9

0000b024 <nm_bsp_sleep>:
{
    b024:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    b026:	1e44      	subs	r4, r0, #1
    b028:	2800      	cmp	r0, #0
    b02a:	d004      	beq.n	b036 <nm_bsp_sleep+0x12>
    b02c:	4d02      	ldr	r5, [pc, #8]	; (b038 <nm_bsp_sleep+0x14>)
		delay_ms(1);
    b02e:	2001      	movs	r0, #1
    b030:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b032:	3c01      	subs	r4, #1
    b034:	d2fb      	bcs.n	b02e <nm_bsp_sleep+0xa>
	}
}
    b036:	bd70      	pop	{r4, r5, r6, pc}
    b038:	0000af15 	.word	0x0000af15

0000b03c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    b03c:	b510      	push	{r4, lr}
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    b03e:	4b0f      	ldr	r3, [pc, #60]	; (b07c <nm_bsp_register_isr+0x40>)
{
    b040:	b084      	sub	sp, #16

	extint_chan_get_config_defaults(&config_extint_chan);
    b042:	ac01      	add	r4, sp, #4
	gpfIsr = pfIsr;
    b044:	6018      	str	r0, [r3, #0]
	extint_chan_get_config_defaults(&config_extint_chan);
    b046:	0020      	movs	r0, r4
    b048:	4b0d      	ldr	r3, [pc, #52]	; (b080 <nm_bsp_register_isr+0x44>)
    b04a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    b04c:	2329      	movs	r3, #41	; 0x29
    b04e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    b050:	2300      	movs	r3, #0
    b052:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b054:	3301      	adds	r3, #1
    b056:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b058:	3301      	adds	r3, #1
    b05a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    b05c:	0021      	movs	r1, r4
    b05e:	2009      	movs	r0, #9
    b060:	4b08      	ldr	r3, [pc, #32]	; (b084 <nm_bsp_register_isr+0x48>)
    b062:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    b064:	2200      	movs	r2, #0
    b066:	2109      	movs	r1, #9
    b068:	4b07      	ldr	r3, [pc, #28]	; (b088 <nm_bsp_register_isr+0x4c>)
    b06a:	4808      	ldr	r0, [pc, #32]	; (b08c <nm_bsp_register_isr+0x50>)
    b06c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b06e:	2100      	movs	r1, #0
    b070:	4b07      	ldr	r3, [pc, #28]	; (b090 <nm_bsp_register_isr+0x54>)
    b072:	2009      	movs	r0, #9
    b074:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    b076:	b004      	add	sp, #16
    b078:	bd10      	pop	{r4, pc}
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	200006ec 	.word	0x200006ec
    b080:	0000ef01 	.word	0x0000ef01
    b084:	0000ef15 	.word	0x0000ef15
    b088:	0000eddd 	.word	0x0000eddd
    b08c:	0000af45 	.word	0x0000af45
    b090:	0000ee05 	.word	0x0000ee05

0000b094 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    b094:	b510      	push	{r4, lr}
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b096:	2100      	movs	r1, #0
	if (u8Enable) {
    b098:	2800      	cmp	r0, #0
    b09a:	d103      	bne.n	b0a4 <nm_bsp_interrupt_ctrl+0x10>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    b09c:	2009      	movs	r0, #9
    b09e:	4b03      	ldr	r3, [pc, #12]	; (b0ac <nm_bsp_interrupt_ctrl+0x18>)
    b0a0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    b0a2:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b0a4:	4b02      	ldr	r3, [pc, #8]	; (b0b0 <nm_bsp_interrupt_ctrl+0x1c>)
    b0a6:	2009      	movs	r0, #9
    b0a8:	4798      	blx	r3
    b0aa:	e7fa      	b.n	b0a2 <nm_bsp_interrupt_ctrl+0xe>
    b0ac:	0000ee29 	.word	0x0000ee29
    b0b0:	0000ee05 	.word	0x0000ee05

0000b0b4 <nm_bus_init>:
	slave->ss_pin          = config->ss_pin;
    b0b4:	230e      	movs	r3, #14
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    b0b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0b8:	4e30      	ldr	r6, [pc, #192]	; (b17c <nm_bus_init+0xc8>)
    b0ba:	b08f      	sub	sp, #60	; 0x3c
	slave->address_enabled = config->address_enabled;
    b0bc:	2500      	movs	r5, #0
	slave->ss_pin          = config->ss_pin;
    b0be:	7033      	strb	r3, [r6, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b0c0:	2401      	movs	r4, #1
    b0c2:	466b      	mov	r3, sp
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b0c4:	4669      	mov	r1, sp
    b0c6:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    b0c8:	709d      	strb	r5, [r3, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    b0ca:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b0cc:	200e      	movs	r0, #14
    b0ce:	4b2c      	ldr	r3, [pc, #176]	; (b180 <nm_bus_init+0xcc>)
	slave->address_enabled = config->address_enabled;
    b0d0:	7075      	strb	r5, [r6, #1]
	slave->address         = config->address;
    b0d2:	70b5      	strb	r5, [r6, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b0d4:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    b0d6:	7831      	ldrb	r1, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
    b0d8:	094a      	lsrs	r2, r1, #5
	if (port_index < PORT_INST_NUM) {
    b0da:	09cb      	lsrs	r3, r1, #7
    b0dc:	d148      	bne.n	b170 <nm_bus_init+0xbc>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b0de:	0020      	movs	r0, r4
    b0e0:	351f      	adds	r5, #31
    b0e2:	4029      	ands	r1, r5
    b0e4:	4088      	lsls	r0, r1
    b0e6:	0001      	movs	r1, r0
		port_base->OUTSET.reg = pin_mask;
    b0e8:	4826      	ldr	r0, [pc, #152]	; (b184 <nm_bus_init+0xd0>)
    b0ea:	01d2      	lsls	r2, r2, #7
    b0ec:	4684      	mov	ip, r0
    b0ee:	4462      	add	r2, ip
    b0f0:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    b0f2:	466a      	mov	r2, sp
    b0f4:	7014      	strb	r4, [r2, #0]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    b0f6:	22c0      	movs	r2, #192	; 0xc0
    b0f8:	0392      	lsls	r2, r2, #14
    b0fa:	9203      	str	r2, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b0fc:	466a      	mov	r2, sp
	config->generator_source = GCLK_GENERATOR_0;
    b0fe:	4669      	mov	r1, sp
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b100:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    b102:	7453      	strb	r3, [r2, #17]
	config->master_slave_select_enable= false;
    b104:	7513      	strb	r3, [r2, #20]
	config->receiver_enable  = true;
    b106:	7494      	strb	r4, [r2, #18]
	config->select_slave_low_detect_enable= true;
    b108:	74d4      	strb	r4, [r2, #19]
	config->generator_source = GCLK_GENERATOR_0;
    b10a:	2224      	movs	r2, #36	; 0x24
	config->data_order       = SPI_DATA_ORDER_MSB;
    b10c:	9301      	str	r3, [sp, #4]
	config->generator_source = GCLK_GENERATOR_0;
    b10e:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b110:	9302      	str	r3, [sp, #8]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b112:	3a18      	subs	r2, #24
    b114:	2100      	movs	r1, #0
    b116:	4b1c      	ldr	r3, [pc, #112]	; (b188 <nm_bus_init+0xd4>)
    b118:	a806      	add	r0, sp, #24
    b11a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    b11c:	4b1b      	ldr	r3, [pc, #108]	; (b18c <nm_bus_init+0xd8>)
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b11e:	4e1c      	ldr	r6, [pc, #112]	; (b190 <nm_bus_init+0xdc>)
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    b120:	930a      	str	r3, [sp, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    b122:	4b1c      	ldr	r3, [pc, #112]	; (b194 <nm_bus_init+0xe0>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b124:	466a      	mov	r2, sp
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    b126:	930b      	str	r3, [sp, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    b128:	4b1b      	ldr	r3, [pc, #108]	; (b198 <nm_bus_init+0xe4>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b12a:	491c      	ldr	r1, [pc, #112]	; (b19c <nm_bus_init+0xe8>)
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    b12c:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    b12e:	4b1c      	ldr	r3, [pc, #112]	; (b1a0 <nm_bus_init+0xec>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b130:	0030      	movs	r0, r6
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    b132:	930d      	str	r3, [sp, #52]	; 0x34
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    b134:	4b1b      	ldr	r3, [pc, #108]	; (b1a4 <nm_bus_init+0xf0>)
    b136:	9306      	str	r3, [sp, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b138:	4b1b      	ldr	r3, [pc, #108]	; (b1a8 <nm_bus_init+0xf4>)
    b13a:	4798      	blx	r3
    b13c:	2800      	cmp	r0, #0
    b13e:	d119      	bne.n	b174 <nm_bus_init+0xc0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b140:	6837      	ldr	r7, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b142:	4b1a      	ldr	r3, [pc, #104]	; (b1ac <nm_bus_init+0xf8>)
    b144:	0038      	movs	r0, r7
    b146:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b148:	4005      	ands	r5, r0
    b14a:	40ac      	lsls	r4, r5
    b14c:	4b18      	ldr	r3, [pc, #96]	; (b1b0 <nm_bus_init+0xfc>)
    b14e:	601c      	str	r4, [r3, #0]
    b150:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b152:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b154:	2b00      	cmp	r3, #0
    b156:	d1fc      	bne.n	b152 <nm_bus_init+0x9e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b158:	2202      	movs	r2, #2
    b15a:	683b      	ldr	r3, [r7, #0]
    b15c:	4313      	orrs	r3, r2
    b15e:	603b      	str	r3, [r7, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    b160:	4b14      	ldr	r3, [pc, #80]	; (b1b4 <nm_bus_init+0x100>)
    b162:	4798      	blx	r3
	nm_bsp_sleep(1);
    b164:	2001      	movs	r0, #1
    b166:	4b14      	ldr	r3, [pc, #80]	; (b1b8 <nm_bus_init+0x104>)
    b168:	4798      	blx	r3
#endif
	return result;
    b16a:	2000      	movs	r0, #0
}
    b16c:	b00f      	add	sp, #60	; 0x3c
    b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b170:	61ad      	str	r5, [r5, #24]
    b172:	deff      	udf	#255	; 0xff
		return M2M_ERR_BUS_FAIL;
    b174:	2006      	movs	r0, #6
    b176:	4240      	negs	r0, r0
    b178:	e7f8      	b.n	b16c <nm_bus_init+0xb8>
    b17a:	46c0      	nop			; (mov r8, r8)
    b17c:	20000b2c 	.word	0x20000b2c
    b180:	0000ef8d 	.word	0x0000ef8d
    b184:	41004400 	.word	0x41004400
    b188:	000135cb 	.word	0x000135cb
    b18c:	000c0002 	.word	0x000c0002
    b190:	20000b30 	.word	0x20000b30
    b194:	000d0002 	.word	0x000d0002
    b198:	000e0002 	.word	0x000e0002
    b19c:	42001000 	.word	0x42001000
    b1a0:	000f0002 	.word	0x000f0002
    b1a4:	00b71b00 	.word	0x00b71b00
    b1a8:	0000f575 	.word	0x0000f575
    b1ac:	0000f431 	.word	0x0000f431
    b1b0:	e000e100 	.word	0xe000e100
    b1b4:	0000af59 	.word	0x0000af59
    b1b8:	0000b025 	.word	0x0000b025

0000b1bc <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    b1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1be:	46de      	mov	lr, fp
    b1c0:	4657      	mov	r7, sl
    b1c2:	464e      	mov	r6, r9
    b1c4:	4645      	mov	r5, r8
    b1c6:	b5e0      	push	{r5, r6, r7, lr}
    b1c8:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
    b1ca:	2803      	cmp	r0, #3
    b1cc:	d000      	beq.n	b1d0 <nm_bus_ioctl+0x14>
    b1ce:	e074      	b.n	b2ba <nm_bus_ioctl+0xfe>
	uint8 u8Dummy = 0;
    b1d0:	2200      	movs	r2, #0
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b1d2:	680b      	ldr	r3, [r1, #0]
    b1d4:	684e      	ldr	r6, [r1, #4]
    b1d6:	9301      	str	r3, [sp, #4]
	uint8 u8Dummy = 0;
    b1d8:	ab02      	add	r3, sp, #8
    b1da:	3307      	adds	r3, #7
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b1dc:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    b1de:	701a      	strb	r2, [r3, #0]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b1e0:	2e00      	cmp	r6, #0
    b1e2:	d058      	beq.n	b296 <nm_bus_ioctl+0xda>
    b1e4:	2c00      	cmp	r4, #0
    b1e6:	d065      	beq.n	b2b4 <nm_bus_ioctl+0xf8>
	if (pu8Mosi == NULL) {
    b1e8:	9a01      	ldr	r2, [sp, #4]
    b1ea:	2a00      	cmp	r2, #0
    b1ec:	d05e      	beq.n	b2ac <nm_bus_ioctl+0xf0>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b1ee:	2300      	movs	r3, #0
    b1f0:	469b      	mov	fp, r3
    b1f2:	2300      	movs	r3, #0
    b1f4:	469a      	mov	sl, r3
	spi_select_slave(&master, &slave_inst, true);
    b1f6:	4b38      	ldr	r3, [pc, #224]	; (b2d8 <nm_bus_ioctl+0x11c>)
    b1f8:	4d38      	ldr	r5, [pc, #224]	; (b2dc <nm_bus_ioctl+0x120>)
    b1fa:	0019      	movs	r1, r3
    b1fc:	4699      	mov	r9, r3
    b1fe:	4b38      	ldr	r3, [pc, #224]	; (b2e0 <nm_bus_ioctl+0x124>)
    b200:	2201      	movs	r2, #1
    b202:	0028      	movs	r0, r5
    b204:	4698      	mov	r8, r3
    b206:	4798      	blx	r3
			pu8Miso++;
    b208:	4650      	mov	r0, sl
    b20a:	4243      	negs	r3, r0
    b20c:	4158      	adcs	r0, r3
    b20e:	4682      	mov	sl, r0
			pu8Mosi++;
    b210:	4658      	mov	r0, fp
    b212:	4243      	negs	r3, r0
    b214:	4158      	adcs	r0, r3
		while (!spi_is_ready_to_write(&master))
    b216:	2101      	movs	r1, #1
		while (!spi_is_ready_to_read(&master))
    b218:	2204      	movs	r2, #4
			pu8Mosi++;
    b21a:	4683      	mov	fp, r0
		txd_data = *pu8Mosi;
    b21c:	9b01      	ldr	r3, [sp, #4]
    b21e:	7818      	ldrb	r0, [r3, #0]
    b220:	682b      	ldr	r3, [r5, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    b222:	7e1f      	ldrb	r7, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    b224:	4239      	tst	r1, r7
    b226:	d0fc      	beq.n	b222 <nm_bus_ioctl+0x66>
    b228:	7e1f      	ldrb	r7, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    b22a:	4239      	tst	r1, r7
    b22c:	d0fc      	beq.n	b228 <nm_bus_ioctl+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    b22e:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b230:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    b232:	4202      	tst	r2, r0
    b234:	d0fc      	beq.n	b230 <nm_bus_ioctl+0x74>
    b236:	79a8      	ldrb	r0, [r5, #6]
    b238:	7e1f      	ldrb	r7, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    b23a:	423a      	tst	r2, r7
    b23c:	d0fc      	beq.n	b238 <nm_bus_ioctl+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b23e:	8b5f      	ldrh	r7, [r3, #26]
    b240:	423a      	tst	r2, r7
    b242:	d007      	beq.n	b254 <nm_bus_ioctl+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    b244:	835a      	strh	r2, [r3, #26]

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b246:	6a9f      	ldr	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b248:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    b24a:	423a      	tst	r2, r7
    b24c:	d0f4      	beq.n	b238 <nm_bus_ioctl+0x7c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b24e:	8b5f      	ldrh	r7, [r3, #26]
    b250:	423a      	tst	r2, r7
    b252:	d1f7      	bne.n	b244 <nm_bus_ioctl+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b256:	2801      	cmp	r0, #1
    b258:	d01a      	beq.n	b290 <nm_bus_ioctl+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b25a:	b2db      	uxtb	r3, r3
		*pu8Miso = rxd_data;
    b25c:	7033      	strb	r3, [r6, #0]
			pu8Mosi++;
    b25e:	9b01      	ldr	r3, [sp, #4]
		u16Sz--;
    b260:	3c01      	subs	r4, #1
			pu8Mosi++;
    b262:	445b      	add	r3, fp
		u16Sz--;
    b264:	b2a4      	uxth	r4, r4
			pu8Miso++;
    b266:	4456      	add	r6, sl
			pu8Mosi++;
    b268:	9301      	str	r3, [sp, #4]
	while (u16Sz) {
    b26a:	2c00      	cmp	r4, #0
    b26c:	d1d6      	bne.n	b21c <nm_bus_ioctl+0x60>
	while (!spi_is_write_complete(&master))
    b26e:	2202      	movs	r2, #2
    b270:	6829      	ldr	r1, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    b272:	7e0b      	ldrb	r3, [r1, #24]
    b274:	421a      	tst	r2, r3
    b276:	d0fc      	beq.n	b272 <nm_bus_ioctl+0xb6>
	spi_select_slave(&master, &slave_inst, false);
    b278:	2200      	movs	r2, #0
    b27a:	4649      	mov	r1, r9
    b27c:	0028      	movs	r0, r5
    b27e:	47c0      	blx	r8
	return M2M_SUCCESS;
    b280:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    b282:	b005      	add	sp, #20
    b284:	bc3c      	pop	{r2, r3, r4, r5}
    b286:	4690      	mov	r8, r2
    b288:	4699      	mov	r9, r3
    b28a:	46a2      	mov	sl, r4
    b28c:	46ab      	mov	fp, r5
    b28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b290:	05db      	lsls	r3, r3, #23
    b292:	0ddb      	lsrs	r3, r3, #23
    b294:	e7e2      	b.n	b25c <nm_bus_ioctl+0xa0>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b296:	9a01      	ldr	r2, [sp, #4]
    b298:	2a00      	cmp	r2, #0
    b29a:	d00b      	beq.n	b2b4 <nm_bus_ioctl+0xf8>
    b29c:	2c00      	cmp	r4, #0
    b29e:	d009      	beq.n	b2b4 <nm_bus_ioctl+0xf8>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b2a0:	2200      	movs	r2, #0
    b2a2:	4693      	mov	fp, r2
		u8SkipMiso = 1;
    b2a4:	3201      	adds	r2, #1
    b2a6:	4692      	mov	sl, r2
		pu8Miso = &u8Dummy;
    b2a8:	001e      	movs	r6, r3
    b2aa:	e7a4      	b.n	b1f6 <nm_bus_ioctl+0x3a>
		u8SkipMosi = 1;
    b2ac:	2201      	movs	r2, #1
		pu8Mosi = &u8Dummy;
    b2ae:	9301      	str	r3, [sp, #4]
		u8SkipMosi = 1;
    b2b0:	4693      	mov	fp, r2
    b2b2:	e79e      	b.n	b1f2 <nm_bus_ioctl+0x36>
		return M2M_ERR_INVALID_ARG;
    b2b4:	200f      	movs	r0, #15
    b2b6:	4240      	negs	r0, r0
		break;
    b2b8:	e7e3      	b.n	b282 <nm_bus_ioctl+0xc6>
			M2M_ERR("invalide ioclt cmd\n");
    b2ba:	220e      	movs	r2, #14
    b2bc:	4909      	ldr	r1, [pc, #36]	; (b2e4 <nm_bus_ioctl+0x128>)
    b2be:	32ff      	adds	r2, #255	; 0xff
    b2c0:	4b09      	ldr	r3, [pc, #36]	; (b2e8 <nm_bus_ioctl+0x12c>)
    b2c2:	480a      	ldr	r0, [pc, #40]	; (b2ec <nm_bus_ioctl+0x130>)
    b2c4:	4798      	blx	r3
    b2c6:	4b0a      	ldr	r3, [pc, #40]	; (b2f0 <nm_bus_ioctl+0x134>)
    b2c8:	480a      	ldr	r0, [pc, #40]	; (b2f4 <nm_bus_ioctl+0x138>)
    b2ca:	4798      	blx	r3
    b2cc:	200d      	movs	r0, #13
    b2ce:	4b0a      	ldr	r3, [pc, #40]	; (b2f8 <nm_bus_ioctl+0x13c>)
    b2d0:	4798      	blx	r3
			s8Ret = -1;
    b2d2:	2001      	movs	r0, #1
    b2d4:	4240      	negs	r0, r0
	return s8Ret;
    b2d6:	e7d4      	b.n	b282 <nm_bus_ioctl+0xc6>
    b2d8:	20000b2c 	.word	0x20000b2c
    b2dc:	20000b30 	.word	0x20000b30
    b2e0:	0000f83d 	.word	0x0000f83d
    b2e4:	00015590 	.word	0x00015590
    b2e8:	0001372d 	.word	0x0001372d
    b2ec:	000155a0 	.word	0x000155a0
    b2f0:	00013849 	.word	0x00013849
    b2f4:	000155b4 	.word	0x000155b4
    b2f8:	00013761 	.word	0x00013761

0000b2fc <nm_bus_deinit>:
	config->direction  = PORT_PIN_DIR_INPUT;
    b2fc:	2300      	movs	r3, #0
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    b2fe:	b570      	push	{r4, r5, r6, lr}
	SercomSpi *const spi_module = &(module->hw->SPI);
    b300:	4e15      	ldr	r6, [pc, #84]	; (b358 <nm_bus_deinit+0x5c>)
    b302:	b082      	sub	sp, #8
    b304:	6835      	ldr	r5, [r6, #0]
    b306:	ac01      	add	r4, sp, #4
    b308:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    b30a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    b30c:	7063      	strb	r3, [r4, #1]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    b30e:	0028      	movs	r0, r5
    b310:	4b12      	ldr	r3, [pc, #72]	; (b35c <nm_bus_deinit+0x60>)
    b312:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b314:	231f      	movs	r3, #31
    b316:	4018      	ands	r0, r3
    b318:	3b1e      	subs	r3, #30
    b31a:	2280      	movs	r2, #128	; 0x80
    b31c:	4083      	lsls	r3, r0
    b31e:	4910      	ldr	r1, [pc, #64]	; (b360 <nm_bus_deinit+0x64>)
    b320:	508b      	str	r3, [r1, r2]
    b322:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b324:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b326:	2b00      	cmp	r3, #0
    b328:	d1fc      	bne.n	b324 <nm_bus_deinit+0x28>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b32a:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    b32c:	338f      	adds	r3, #143	; 0x8f
    b32e:	752b      	strb	r3, [r5, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    b330:	762b      	strb	r3, [r5, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b332:	682b      	ldr	r3, [r5, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    b334:	0021      	movs	r1, r4
    b336:	4393      	bics	r3, r2
    b338:	602b      	str	r3, [r5, #0]
    b33a:	200c      	movs	r0, #12
    b33c:	4d09      	ldr	r5, [pc, #36]	; (b364 <nm_bus_deinit+0x68>)
    b33e:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    b340:	0021      	movs	r1, r4
    b342:	200f      	movs	r0, #15
    b344:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    b346:	0021      	movs	r1, r4
    b348:	200d      	movs	r0, #13
    b34a:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    b34c:	0021      	movs	r1, r4
    b34e:	200e      	movs	r0, #14
    b350:	47a8      	blx	r5
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    b352:	2000      	movs	r0, #0
    b354:	b002      	add	sp, #8
    b356:	bd70      	pop	{r4, r5, r6, pc}
    b358:	20000b30 	.word	0x20000b30
    b35c:	0000f431 	.word	0x0000f431
    b360:	e000e100 	.word	0xe000e100
    b364:	0000ef8d 	.word	0x0000ef8d

0000b368 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    b368:	b510      	push	{r4, lr}
    b36a:	1884      	adds	r4, r0, r2
	if(sz == 0) return;
    b36c:	2a00      	cmp	r2, #0
    b36e:	d005      	beq.n	b37c <m2m_memcpy+0x14>
	do
	{
		*pDst = *pSrc;
    b370:	780b      	ldrb	r3, [r1, #0]
		pDst++;
		pSrc++;
    b372:	3101      	adds	r1, #1
		*pDst = *pSrc;
    b374:	7003      	strb	r3, [r0, #0]
		pDst++;
    b376:	3001      	adds	r0, #1
	}while(--sz);
    b378:	42a0      	cmp	r0, r4
    b37a:	d1f9      	bne.n	b370 <m2m_memcpy+0x8>
}
    b37c:	bd10      	pop	{r4, pc}
    b37e:	46c0      	nop			; (mov r8, r8)

0000b380 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    b380:	1883      	adds	r3, r0, r2
	if(sz == 0) return;
    b382:	2a00      	cmp	r2, #0
    b384:	d003      	beq.n	b38e <m2m_memset+0xe>
	do
	{
		*pBuf = val;
    b386:	7001      	strb	r1, [r0, #0]
		pBuf++;
    b388:	3001      	adds	r0, #1
	}while(--sz);
    b38a:	4298      	cmp	r0, r3
    b38c:	d1fb      	bne.n	b386 <m2m_memset+0x6>
}
    b38e:	4770      	bx	lr

0000b390 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    b390:	7802      	ldrb	r2, [r0, #0]
{
    b392:	0003      	movs	r3, r0
	while(*pcStr)
    b394:	2000      	movs	r0, #0
    b396:	2a00      	cmp	r2, #0
    b398:	d005      	beq.n	b3a6 <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
    b39a:	3301      	adds	r3, #1
	while(*pcStr)
    b39c:	781a      	ldrb	r2, [r3, #0]
		u16StrLen ++;
    b39e:	3001      	adds	r0, #1
    b3a0:	b280      	uxth	r0, r0
	while(*pcStr)
    b3a2:	2a00      	cmp	r2, #0
    b3a4:	d1f9      	bne.n	b39a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    b3a6:	4770      	bx	lr

0000b3a8 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    b3a8:	4a02      	ldr	r2, [pc, #8]	; (b3b4 <isr+0xc>)
    b3aa:	78d3      	ldrb	r3, [r2, #3]
    b3ac:	3301      	adds	r3, #1
    b3ae:	b2db      	uxtb	r3, r3
    b3b0:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    b3b2:	4770      	bx	lr
    b3b4:	20000b6c 	.word	0x20000b6c

0000b3b8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    b3b8:	4770      	bx	lr
    b3ba:	46c0      	nop			; (mov r8, r8)

0000b3bc <hif_set_rx_done>:
	gstrHifCxt.u8HifRXDone = 0;
    b3bc:	2200      	movs	r2, #0
{
    b3be:	b500      	push	{lr}
	gstrHifCxt.u8HifRXDone = 0;
    b3c0:	4b0a      	ldr	r3, [pc, #40]	; (b3ec <hif_set_rx_done+0x30>)
{
    b3c2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    b3c4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    b3c6:	2001      	movs	r0, #1
    b3c8:	4b09      	ldr	r3, [pc, #36]	; (b3f0 <hif_set_rx_done+0x34>)
    b3ca:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    b3cc:	a901      	add	r1, sp, #4
    b3ce:	4809      	ldr	r0, [pc, #36]	; (b3f4 <hif_set_rx_done+0x38>)
    b3d0:	4b09      	ldr	r3, [pc, #36]	; (b3f8 <hif_set_rx_done+0x3c>)
    b3d2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b3d4:	2800      	cmp	r0, #0
    b3d6:	d106      	bne.n	b3e6 <hif_set_rx_done+0x2a>
	reg |= NBIT1;
    b3d8:	2102      	movs	r1, #2
    b3da:	9b01      	ldr	r3, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b3dc:	4805      	ldr	r0, [pc, #20]	; (b3f4 <hif_set_rx_done+0x38>)
	reg |= NBIT1;
    b3de:	4319      	orrs	r1, r3
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b3e0:	4b06      	ldr	r3, [pc, #24]	; (b3fc <hif_set_rx_done+0x40>)
	reg |= NBIT1;
    b3e2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b3e4:	4798      	blx	r3
}
    b3e6:	b003      	add	sp, #12
    b3e8:	bd00      	pop	{pc}
    b3ea:	46c0      	nop			; (mov r8, r8)
    b3ec:	20000b6c 	.word	0x20000b6c
    b3f0:	0000b095 	.word	0x0000b095
    b3f4:	00001070 	.word	0x00001070
    b3f8:	0000c67d 	.word	0x0000c67d
    b3fc:	0000c689 	.word	0x0000c689

0000b400 <hif_chip_wake.part.0>:
*	@fn		NMI_API sint8 hif_chip_wake(void);
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
    b400:	b510      	push	{r4, lr}
	if(gstrHifCxt.u8HifRXDone)
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    b402:	4c09      	ldr	r4, [pc, #36]	; (b428 <hif_chip_wake.part.0+0x28>)
    b404:	7863      	ldrb	r3, [r4, #1]
    b406:	2b00      	cmp	r3, #0
    b408:	d102      	bne.n	b410 <hif_chip_wake.part.0+0x10>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b40a:	7823      	ldrb	r3, [r4, #0]
    b40c:	2b00      	cmp	r3, #0
    b40e:	d105      	bne.n	b41c <hif_chip_wake.part.0+0x1c>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    b410:	2000      	movs	r0, #0
    b412:	7863      	ldrb	r3, [r4, #1]
    b414:	3301      	adds	r3, #1
    b416:	b2db      	uxtb	r3, r3
    b418:	7063      	strb	r3, [r4, #1]
ERR1:
	return ret;
}
    b41a:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    b41c:	4b03      	ldr	r3, [pc, #12]	; (b42c <hif_chip_wake.part.0+0x2c>)
    b41e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    b420:	2800      	cmp	r0, #0
    b422:	d0f5      	beq.n	b410 <hif_chip_wake.part.0+0x10>
    b424:	e7f9      	b.n	b41a <hif_chip_wake.part.0+0x1a>
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	20000b6c 	.word	0x20000b6c
    b42c:	0000c37d 	.word	0x0000c37d

0000b430 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    b430:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    b432:	4b09      	ldr	r3, [pc, #36]	; (b458 <hif_chip_sleep+0x28>)
    b434:	785a      	ldrb	r2, [r3, #1]
    b436:	2a00      	cmp	r2, #0
    b438:	d003      	beq.n	b442 <hif_chip_sleep+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    b43a:	785a      	ldrb	r2, [r3, #1]
    b43c:	3a01      	subs	r2, #1
    b43e:	b2d2      	uxtb	r2, r2
    b440:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    b442:	785a      	ldrb	r2, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    b444:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    b446:	2a00      	cmp	r2, #0
    b448:	d102      	bne.n	b450 <hif_chip_sleep+0x20>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b44a:	781b      	ldrb	r3, [r3, #0]
    b44c:	2b00      	cmp	r3, #0
    b44e:	d100      	bne.n	b452 <hif_chip_sleep+0x22>
		{
		}
	}
ERR1:
	return ret;
}
    b450:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    b452:	4b02      	ldr	r3, [pc, #8]	; (b45c <hif_chip_sleep+0x2c>)
    b454:	4798      	blx	r3
    b456:	e7fb      	b.n	b450 <hif_chip_sleep+0x20>
    b458:	20000b6c 	.word	0x20000b6c
    b45c:	0000c319 	.word	0x0000c319

0000b460 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    b460:	b5f0      	push	{r4, r5, r6, r7, lr}
    b462:	464e      	mov	r6, r9
    b464:	46de      	mov	lr, fp
    b466:	4657      	mov	r7, sl
    b468:	4645      	mov	r5, r8
    b46a:	b5e0      	push	{r5, r6, r7, lr}
    b46c:	b08b      	sub	sp, #44	; 0x2c
    b46e:	9301      	str	r3, [sp, #4]
    b470:	ab14      	add	r3, sp, #80	; 0x50
    b472:	9202      	str	r2, [sp, #8]
    b474:	cb04      	ldmia	r3!, {r2}
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b476:	ac06      	add	r4, sp, #24
{
    b478:	881b      	ldrh	r3, [r3, #0]
    b47a:	4692      	mov	sl, r2
    b47c:	469b      	mov	fp, r3
    b47e:	ab16      	add	r3, sp, #88	; 0x58
    b480:	881b      	ldrh	r3, [r3, #0]
    b482:	4681      	mov	r9, r0
    b484:	001a      	movs	r2, r3
    b486:	9303      	str	r3, [sp, #12]
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b488:	237f      	movs	r3, #127	; 0x7f
    b48a:	400b      	ands	r3, r1
    b48c:	7063      	strb	r3, [r4, #1]
	strHif.u8Gid		= u8Gid;
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    b48e:	2308      	movs	r3, #8
	strHif.u8Gid		= u8Gid;
    b490:	7020      	strb	r0, [r4, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    b492:	8063      	strh	r3, [r4, #2]
	if(pu8DataBuf != NULL)
    b494:	4653      	mov	r3, sl
{
    b496:	000e      	movs	r6, r1
	if(pu8DataBuf != NULL)
    b498:	2b00      	cmp	r3, #0
    b49a:	d100      	bne.n	b49e <hif_send+0x3e>
    b49c:	e081      	b.n	b5a2 <hif_send+0x142>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    b49e:	4694      	mov	ip, r2
    b4a0:	8863      	ldrh	r3, [r4, #2]
    b4a2:	445b      	add	r3, fp
    b4a4:	4463      	add	r3, ip
    b4a6:	b29b      	uxth	r3, r3
    b4a8:	8063      	strh	r3, [r4, #2]
	if(gstrHifCxt.u8HifRXDone)
    b4aa:	4f6d      	ldr	r7, [pc, #436]	; (b660 <hif_send+0x200>)
    b4ac:	78bb      	ldrb	r3, [r7, #2]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d02a      	beq.n	b508 <hif_send+0xa8>
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
	if(ret == M2M_SUCCESS)
	{
		volatile uint32 reg, dma_addr = 0;
    b4b2:	2300      	movs	r3, #0
		volatile uint16 cnt = 0;
    b4b4:	aa04      	add	r2, sp, #16
    b4b6:	1d95      	adds	r5, r2, #6
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
		reg |= (uint32)u8Gid;
    b4b8:	464a      	mov	r2, r9
		volatile uint32 reg, dma_addr = 0;
    b4ba:	9308      	str	r3, [sp, #32]
		volatile uint16 cnt = 0;
    b4bc:	802b      	strh	r3, [r5, #0]
		reg = 0UL;
    b4be:	9307      	str	r3, [sp, #28]
		reg |= (uint32)u8Gid;
    b4c0:	9b07      	ldr	r3, [sp, #28]
		reg |= ((uint32)u8Opcode<<8);
    b4c2:	0236      	lsls	r6, r6, #8
		reg |= (uint32)u8Gid;
    b4c4:	431a      	orrs	r2, r3
    b4c6:	9207      	str	r2, [sp, #28]
		reg |= ((uint32)u8Opcode<<8);
    b4c8:	9b07      	ldr	r3, [sp, #28]
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b4ca:	4866      	ldr	r0, [pc, #408]	; (b664 <hif_send+0x204>)
		reg |= ((uint32)u8Opcode<<8);
    b4cc:	431e      	orrs	r6, r3
    b4ce:	9607      	str	r6, [sp, #28]
		reg |= ((uint32)strHif.u16Length<<16);
    b4d0:	8863      	ldrh	r3, [r4, #2]
    b4d2:	9a07      	ldr	r2, [sp, #28]
    b4d4:	041b      	lsls	r3, r3, #16
    b4d6:	4313      	orrs	r3, r2
    b4d8:	9307      	str	r3, [sp, #28]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b4da:	4b63      	ldr	r3, [pc, #396]	; (b668 <hif_send+0x208>)
    b4dc:	9907      	ldr	r1, [sp, #28]
    b4de:	4699      	mov	r9, r3
    b4e0:	4798      	blx	r3
    b4e2:	4680      	mov	r8, r0
		if(M2M_SUCCESS != ret) goto ERR1;
    b4e4:	2800      	cmp	r0, #0
    b4e6:	d021      	beq.n	b52c <hif_send+0xcc>
	if(gstrHifCxt.u8ChipSleep >= 1)
    b4e8:	787b      	ldrb	r3, [r7, #1]
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d107      	bne.n	b4fe <hif_send+0x9e>
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
}
    b4ee:	4640      	mov	r0, r8
    b4f0:	b00b      	add	sp, #44	; 0x2c
    b4f2:	bc3c      	pop	{r2, r3, r4, r5}
    b4f4:	4690      	mov	r8, r2
    b4f6:	4699      	mov	r9, r3
    b4f8:	46a2      	mov	sl, r4
    b4fa:	46ab      	mov	fp, r5
    b4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gstrHifCxt.u8ChipSleep--;
    b4fe:	787b      	ldrb	r3, [r7, #1]
    b500:	3b01      	subs	r3, #1
    b502:	b2db      	uxtb	r3, r3
    b504:	707b      	strb	r3, [r7, #1]
    b506:	e7f2      	b.n	b4ee <hif_send+0x8e>
    b508:	4b58      	ldr	r3, [pc, #352]	; (b66c <hif_send+0x20c>)
    b50a:	4798      	blx	r3
    b50c:	4680      	mov	r8, r0
	if(ret == M2M_SUCCESS)
    b50e:	2800      	cmp	r0, #0
    b510:	d0cf      	beq.n	b4b2 <hif_send+0x52>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    b512:	22cb      	movs	r2, #203	; 0xcb
    b514:	4956      	ldr	r1, [pc, #344]	; (b670 <hif_send+0x210>)
    b516:	0052      	lsls	r2, r2, #1
    b518:	4b56      	ldr	r3, [pc, #344]	; (b674 <hif_send+0x214>)
    b51a:	4857      	ldr	r0, [pc, #348]	; (b678 <hif_send+0x218>)
    b51c:	4798      	blx	r3
    b51e:	4b57      	ldr	r3, [pc, #348]	; (b67c <hif_send+0x21c>)
    b520:	4857      	ldr	r0, [pc, #348]	; (b680 <hif_send+0x220>)
    b522:	4798      	blx	r3
    b524:	4b57      	ldr	r3, [pc, #348]	; (b684 <hif_send+0x224>)
    b526:	200d      	movs	r0, #13
    b528:	4798      	blx	r3
		goto ERR2;
    b52a:	e7e0      	b.n	b4ee <hif_send+0x8e>
		reg |= NBIT1;
    b52c:	2202      	movs	r2, #2
		reg = 0UL;
    b52e:	9007      	str	r0, [sp, #28]
		reg |= NBIT1;
    b530:	9b07      	ldr	r3, [sp, #28]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    b532:	4855      	ldr	r0, [pc, #340]	; (b688 <hif_send+0x228>)
		reg |= NBIT1;
    b534:	4313      	orrs	r3, r2
    b536:	9307      	str	r3, [sp, #28]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    b538:	9907      	ldr	r1, [sp, #28]
    b53a:	47c8      	blx	r9
    b53c:	4680      	mov	r8, r0
		if(M2M_SUCCESS != ret) goto ERR1;
    b53e:	2800      	cmp	r0, #0
    b540:	d1d2      	bne.n	b4e8 <hif_send+0x88>
		dma_addr = 0;
    b542:	9008      	str	r0, [sp, #32]
		for(cnt = 0; cnt < 1000; cnt ++)
    b544:	8028      	strh	r0, [r5, #0]
    b546:	882a      	ldrh	r2, [r5, #0]
    b548:	4b50      	ldr	r3, [pc, #320]	; (b68c <hif_send+0x22c>)
    b54a:	429a      	cmp	r2, r3
    b54c:	d830      	bhi.n	b5b0 <hif_send+0x150>
    b54e:	4b50      	ldr	r3, [pc, #320]	; (b690 <hif_send+0x230>)
    b550:	4698      	mov	r8, r3
    b552:	e00e      	b.n	b572 <hif_send+0x112>
				nm_bsp_sleep(1);
    b554:	2001      	movs	r0, #1
    b556:	4b4f      	ldr	r3, [pc, #316]	; (b694 <hif_send+0x234>)
    b558:	4798      	blx	r3
			if (!(reg & NBIT1))
    b55a:	2602      	movs	r6, #2
    b55c:	9b07      	ldr	r3, [sp, #28]
    b55e:	401e      	ands	r6, r3
    b560:	d070      	beq.n	b644 <hif_send+0x1e4>
		for(cnt = 0; cnt < 1000; cnt ++)
    b562:	882b      	ldrh	r3, [r5, #0]
    b564:	3301      	adds	r3, #1
    b566:	b29b      	uxth	r3, r3
    b568:	802b      	strh	r3, [r5, #0]
    b56a:	882a      	ldrh	r2, [r5, #0]
    b56c:	4b47      	ldr	r3, [pc, #284]	; (b68c <hif_send+0x22c>)
    b56e:	429a      	cmp	r2, r3
    b570:	d81e      	bhi.n	b5b0 <hif_send+0x150>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    b572:	a907      	add	r1, sp, #28
    b574:	4844      	ldr	r0, [pc, #272]	; (b688 <hif_send+0x228>)
    b576:	47c0      	blx	r8
			if(ret != M2M_SUCCESS) break;
    b578:	2800      	cmp	r0, #0
    b57a:	d119      	bne.n	b5b0 <hif_send+0x150>
			if(cnt >= 500) {
    b57c:	23f4      	movs	r3, #244	; 0xf4
    b57e:	882a      	ldrh	r2, [r5, #0]
    b580:	33ff      	adds	r3, #255	; 0xff
    b582:	429a      	cmp	r2, r3
    b584:	d9e9      	bls.n	b55a <hif_send+0xfa>
				if(cnt < 501) {
    b586:	882a      	ldrh	r2, [r5, #0]
    b588:	3301      	adds	r3, #1
    b58a:	429a      	cmp	r2, r3
    b58c:	d8e2      	bhi.n	b554 <hif_send+0xf4>
					M2M_INFO("Slowing down...\n");
    b58e:	4b39      	ldr	r3, [pc, #228]	; (b674 <hif_send+0x214>)
    b590:	4841      	ldr	r0, [pc, #260]	; (b698 <hif_send+0x238>)
    b592:	4798      	blx	r3
    b594:	4b39      	ldr	r3, [pc, #228]	; (b67c <hif_send+0x21c>)
    b596:	4841      	ldr	r0, [pc, #260]	; (b69c <hif_send+0x23c>)
    b598:	4798      	blx	r3
    b59a:	4b3a      	ldr	r3, [pc, #232]	; (b684 <hif_send+0x224>)
    b59c:	200d      	movs	r0, #13
    b59e:	4798      	blx	r3
    b5a0:	e7d8      	b.n	b554 <hif_send+0xf4>
		strHif.u16Length += u16CtrlBufSize;
    b5a2:	9a01      	ldr	r2, [sp, #4]
    b5a4:	8863      	ldrh	r3, [r4, #2]
    b5a6:	4694      	mov	ip, r2
    b5a8:	4463      	add	r3, ip
    b5aa:	b29b      	uxth	r3, r3
    b5ac:	8063      	strh	r3, [r4, #2]
    b5ae:	e77c      	b.n	b4aa <hif_send+0x4a>
		if (dma_addr != 0)
    b5b0:	9b08      	ldr	r3, [sp, #32]
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d04e      	beq.n	b654 <hif_send+0x1f4>
			u32CurrAddr = dma_addr;
    b5b6:	9b08      	ldr	r3, [sp, #32]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    b5b8:	0021      	movs	r1, r4
			u32CurrAddr = dma_addr;
    b5ba:	9309      	str	r3, [sp, #36]	; 0x24
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    b5bc:	8863      	ldrh	r3, [r4, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    b5be:	2208      	movs	r2, #8
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    b5c0:	b29b      	uxth	r3, r3
    b5c2:	8063      	strh	r3, [r4, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    b5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5c6:	4c36      	ldr	r4, [pc, #216]	; (b6a0 <hif_send+0x240>)
    b5c8:	47a0      	blx	r4
    b5ca:	4680      	mov	r8, r0
			if(M2M_SUCCESS != ret) goto ERR1;
    b5cc:	2800      	cmp	r0, #0
    b5ce:	d000      	beq.n	b5d2 <hif_send+0x172>
    b5d0:	e78a      	b.n	b4e8 <hif_send+0x88>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    b5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5d4:	3308      	adds	r3, #8
    b5d6:	9309      	str	r3, [sp, #36]	; 0x24
			if(pu8CtrlBuf != NULL)
    b5d8:	9b02      	ldr	r3, [sp, #8]
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d00c      	beq.n	b5f8 <hif_send+0x198>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    b5de:	9d01      	ldr	r5, [sp, #4]
    b5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5e2:	002a      	movs	r2, r5
    b5e4:	0019      	movs	r1, r3
    b5e6:	47a0      	blx	r4
    b5e8:	4680      	mov	r8, r0
				if(M2M_SUCCESS != ret) goto ERR1;
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d000      	beq.n	b5f0 <hif_send+0x190>
    b5ee:	e77b      	b.n	b4e8 <hif_send+0x88>
				u32CurrAddr += u16CtrlBufSize;
    b5f0:	46ac      	mov	ip, r5
    b5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5f4:	4463      	add	r3, ip
    b5f6:	9309      	str	r3, [sp, #36]	; 0x24
			if(pu8DataBuf != NULL)
    b5f8:	4653      	mov	r3, sl
    b5fa:	2b00      	cmp	r3, #0
    b5fc:	d010      	beq.n	b620 <hif_send+0x1c0>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    b5fe:	9901      	ldr	r1, [sp, #4]
    b600:	9b03      	ldr	r3, [sp, #12]
    b602:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b604:	1a5b      	subs	r3, r3, r1
    b606:	189b      	adds	r3, r3, r2
    b608:	9309      	str	r3, [sp, #36]	; 0x24
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    b60a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b60c:	465a      	mov	r2, fp
    b60e:	4651      	mov	r1, sl
    b610:	47a0      	blx	r4
    b612:	4680      	mov	r8, r0
				if(M2M_SUCCESS != ret) goto ERR1;
    b614:	2800      	cmp	r0, #0
    b616:	d000      	beq.n	b61a <hif_send+0x1ba>
    b618:	e766      	b.n	b4e8 <hif_send+0x88>
				u32CurrAddr += u16DataSize;
    b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b61c:	445b      	add	r3, fp
    b61e:	9309      	str	r3, [sp, #36]	; 0x24
			reg |= NBIT1;
    b620:	2202      	movs	r2, #2
			reg = dma_addr << 2;
    b622:	9b08      	ldr	r3, [sp, #32]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    b624:	481f      	ldr	r0, [pc, #124]	; (b6a4 <hif_send+0x244>)
			reg = dma_addr << 2;
    b626:	009b      	lsls	r3, r3, #2
    b628:	9307      	str	r3, [sp, #28]
			reg |= NBIT1;
    b62a:	9b07      	ldr	r3, [sp, #28]
    b62c:	4313      	orrs	r3, r2
    b62e:	9307      	str	r3, [sp, #28]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    b630:	9907      	ldr	r1, [sp, #28]
    b632:	47c8      	blx	r9
    b634:	4680      	mov	r8, r0
			if(M2M_SUCCESS != ret) goto ERR1;
    b636:	2800      	cmp	r0, #0
    b638:	d000      	beq.n	b63c <hif_send+0x1dc>
    b63a:	e755      	b.n	b4e8 <hif_send+0x88>
 	ret = hif_chip_sleep();
    b63c:	4b1a      	ldr	r3, [pc, #104]	; (b6a8 <hif_send+0x248>)
    b63e:	4798      	blx	r3
    b640:	4680      	mov	r8, r0
	return ret;
    b642:	e754      	b.n	b4ee <hif_send+0x8e>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    b644:	a908      	add	r1, sp, #32
    b646:	4819      	ldr	r0, [pc, #100]	; (b6ac <hif_send+0x24c>)
    b648:	47c0      	blx	r8
    b64a:	4680      	mov	r8, r0
				if(ret != M2M_SUCCESS) {
    b64c:	2800      	cmp	r0, #0
    b64e:	d0af      	beq.n	b5b0 <hif_send+0x150>
					dma_addr = 0;
    b650:	9608      	str	r6, [sp, #32]
					goto ERR1;
    b652:	e749      	b.n	b4e8 <hif_send+0x88>
			ret = hif_chip_sleep();
    b654:	4b14      	ldr	r3, [pc, #80]	; (b6a8 <hif_send+0x248>)
    b656:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    b658:	2303      	movs	r3, #3
    b65a:	425b      	negs	r3, r3
    b65c:	4698      	mov	r8, r3
			goto ERR2;
    b65e:	e746      	b.n	b4ee <hif_send+0x8e>
    b660:	20000b6c 	.word	0x20000b6c
    b664:	0000108c 	.word	0x0000108c
    b668:	0000c689 	.word	0x0000c689
    b66c:	0000b401 	.word	0x0000b401
    b670:	000155e8 	.word	0x000155e8
    b674:	0001372d 	.word	0x0001372d
    b678:	000155a0 	.word	0x000155a0
    b67c:	00013849 	.word	0x00013849
    b680:	000158ec 	.word	0x000158ec
    b684:	00013761 	.word	0x00013761
    b688:	00001078 	.word	0x00001078
    b68c:	000003e7 	.word	0x000003e7
    b690:	0000c67d 	.word	0x0000c67d
    b694:	0000b025 	.word	0x0000b025
    b698:	000158d0 	.word	0x000158d0
    b69c:	000158dc 	.word	0x000158dc
    b6a0:	0000c6f9 	.word	0x0000c6f9
    b6a4:	0000106c 	.word	0x0000106c
    b6a8:	0000b431 	.word	0x0000b431
    b6ac:	00150400 	.word	0x00150400

0000b6b0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    b6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6b2:	4657      	mov	r7, sl
    b6b4:	46de      	mov	lr, fp
    b6b6:	464e      	mov	r6, r9
    b6b8:	4645      	mov	r5, r8
    b6ba:	b5e0      	push	{r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    b6bc:	4bb5      	ldr	r3, [pc, #724]	; (b994 <hif_handle_isr+0x2e4>)
{
    b6be:	b087      	sub	sp, #28
	while (gstrHifCxt.u8Interrupt) {
    b6c0:	469a      	mov	sl, r3
    b6c2:	78db      	ldrb	r3, [r3, #3]
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d100      	bne.n	b6ca <hif_handle_isr+0x1a>
    b6c8:	e09d      	b.n	b806 <hif_handle_isr+0x156>
    b6ca:	4bb3      	ldr	r3, [pc, #716]	; (b998 <hif_handle_isr+0x2e8>)
    b6cc:	ae04      	add	r6, sp, #16
    b6ce:	4699      	mov	r9, r3
    b6d0:	4bb2      	ldr	r3, [pc, #712]	; (b99c <hif_handle_isr+0x2ec>)
    b6d2:	469b      	mov	fp, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    b6d4:	4653      	mov	r3, sl
    b6d6:	4652      	mov	r2, sl
    b6d8:	78db      	ldrb	r3, [r3, #3]
    b6da:	3b01      	subs	r3, #1
    b6dc:	b2db      	uxtb	r3, r3
    b6de:	70d3      	strb	r3, [r2, #3]
    b6e0:	e034      	b.n	b74c <hif_handle_isr+0x9c>
		if(reg & 0x1)	/* New interrupt has been received */
    b6e2:	9b03      	ldr	r3, [sp, #12]
    b6e4:	3401      	adds	r4, #1
    b6e6:	4223      	tst	r3, r4
    b6e8:	d100      	bne.n	b6ec <hif_handle_isr+0x3c>
    b6ea:	e0d4      	b.n	b896 <hif_handle_isr+0x1e6>
			nm_bsp_interrupt_ctrl(0);
    b6ec:	2000      	movs	r0, #0
    b6ee:	47d8      	blx	fp
			reg &= ~NBIT0;
    b6f0:	9903      	ldr	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b6f2:	48ab      	ldr	r0, [pc, #684]	; (b9a0 <hif_handle_isr+0x2f0>)
			reg &= ~NBIT0;
    b6f4:	43a1      	bics	r1, r4
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b6f6:	4bab      	ldr	r3, [pc, #684]	; (b9a4 <hif_handle_isr+0x2f4>)
			reg &= ~NBIT0;
    b6f8:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b6fa:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    b6fc:	2800      	cmp	r0, #0
    b6fe:	d138      	bne.n	b772 <hif_handle_isr+0xc2>
			gstrHifCxt.u8HifRXDone = 1;
    b700:	4653      	mov	r3, sl
    b702:	709c      	strb	r4, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    b704:	9b03      	ldr	r3, [sp, #12]
    b706:	049f      	lsls	r7, r3, #18
    b708:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
    b70a:	d100      	bne.n	b70e <hif_handle_isr+0x5e>
    b70c:	e0db      	b.n	b8c6 <hif_handle_isr+0x216>
				uint32 address = 0;
    b70e:	9005      	str	r0, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    b710:	a905      	add	r1, sp, #20
    b712:	48a5      	ldr	r0, [pc, #660]	; (b9a8 <hif_handle_isr+0x2f8>)
    b714:	47c8      	blx	r9
    b716:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    b718:	d031      	beq.n	b77e <hif_handle_isr+0xce>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    b71a:	22c8      	movs	r2, #200	; 0xc8
    b71c:	4ba3      	ldr	r3, [pc, #652]	; (b9ac <hif_handle_isr+0x2fc>)
    b71e:	32ff      	adds	r2, #255	; 0xff
    b720:	49a3      	ldr	r1, [pc, #652]	; (b9b0 <hif_handle_isr+0x300>)
    b722:	0018      	movs	r0, r3
    b724:	4da3      	ldr	r5, [pc, #652]	; (b9b4 <hif_handle_isr+0x304>)
    b726:	4698      	mov	r8, r3
    b728:	47a8      	blx	r5
    b72a:	48a3      	ldr	r0, [pc, #652]	; (b9b8 <hif_handle_isr+0x308>)
					M2M_ERR("(hif) address bus fail\n");
    b72c:	4ba3      	ldr	r3, [pc, #652]	; (b9bc <hif_handle_isr+0x30c>)
    b72e:	4798      	blx	r3
    b730:	200d      	movs	r0, #13
    b732:	4fa3      	ldr	r7, [pc, #652]	; (b9c0 <hif_handle_isr+0x310>)
    b734:	47b8      	blx	r7
					nm_bsp_interrupt_ctrl(1);
    b736:	2001      	movs	r0, #1
    b738:	47d8      	blx	fp
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    b73a:	4aa2      	ldr	r2, [pc, #648]	; (b9c4 <hif_handle_isr+0x314>)
    b73c:	49a2      	ldr	r1, [pc, #648]	; (b9c8 <hif_handle_isr+0x318>)
    b73e:	4640      	mov	r0, r8
    b740:	47a8      	blx	r5
    b742:	0021      	movs	r1, r4
    b744:	48a1      	ldr	r0, [pc, #644]	; (b9cc <hif_handle_isr+0x31c>)
    b746:	47a8      	blx	r5
    b748:	200d      	movs	r0, #13
    b74a:	47b8      	blx	r7
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    b74c:	a903      	add	r1, sp, #12
    b74e:	4894      	ldr	r0, [pc, #592]	; (b9a0 <hif_handle_isr+0x2f0>)
    b750:	47c8      	blx	r9
    b752:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    b754:	d0c5      	beq.n	b6e2 <hif_handle_isr+0x32>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    b756:	4b95      	ldr	r3, [pc, #596]	; (b9ac <hif_handle_isr+0x2fc>)
    b758:	4a9d      	ldr	r2, [pc, #628]	; (b9d0 <hif_handle_isr+0x320>)
    b75a:	4995      	ldr	r1, [pc, #596]	; (b9b0 <hif_handle_isr+0x300>)
    b75c:	0018      	movs	r0, r3
    b75e:	4d95      	ldr	r5, [pc, #596]	; (b9b4 <hif_handle_isr+0x304>)
    b760:	4698      	mov	r8, r3
    b762:	47a8      	blx	r5
    b764:	4b95      	ldr	r3, [pc, #596]	; (b9bc <hif_handle_isr+0x30c>)
    b766:	489b      	ldr	r0, [pc, #620]	; (b9d4 <hif_handle_isr+0x324>)
    b768:	4798      	blx	r3
    b76a:	4f95      	ldr	r7, [pc, #596]	; (b9c0 <hif_handle_isr+0x310>)
    b76c:	200d      	movs	r0, #13
    b76e:	47b8      	blx	r7
    b770:	e7e3      	b.n	b73a <hif_handle_isr+0x8a>
    b772:	4b8e      	ldr	r3, [pc, #568]	; (b9ac <hif_handle_isr+0x2fc>)
    b774:	0004      	movs	r4, r0
    b776:	4698      	mov	r8, r3
    b778:	4d8e      	ldr	r5, [pc, #568]	; (b9b4 <hif_handle_isr+0x304>)
    b77a:	4f91      	ldr	r7, [pc, #580]	; (b9c0 <hif_handle_isr+0x310>)
    b77c:	e7dd      	b.n	b73a <hif_handle_isr+0x8a>
				gstrHifCxt.u32RxAddr = address;
    b77e:	4653      	mov	r3, sl
    b780:	9a05      	ldr	r2, [sp, #20]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b782:	0031      	movs	r1, r6
				gstrHifCxt.u32RxAddr = address;
    b784:	605a      	str	r2, [r3, #4]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b786:	9805      	ldr	r0, [sp, #20]
				gstrHifCxt.u32RxSize = size;
    b788:	609f      	str	r7, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b78a:	2204      	movs	r2, #4
    b78c:	4b92      	ldr	r3, [pc, #584]	; (b9d8 <hif_handle_isr+0x328>)
    b78e:	4798      	blx	r3
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    b790:	8873      	ldrh	r3, [r6, #2]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b792:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    b794:	b29b      	uxth	r3, r3
    b796:	8073      	strh	r3, [r6, #2]
				if(M2M_SUCCESS != ret)
    b798:	2800      	cmp	r0, #0
    b79a:	d13c      	bne.n	b816 <hif_handle_isr+0x166>
				if(strHif.u16Length != size)
    b79c:	8873      	ldrh	r3, [r6, #2]
    b79e:	429f      	cmp	r7, r3
    b7a0:	d003      	beq.n	b7aa <hif_handle_isr+0xfa>
					if((size - strHif.u16Length) > 4)
    b7a2:	8873      	ldrh	r3, [r6, #2]
    b7a4:	1afb      	subs	r3, r7, r3
    b7a6:	2b04      	cmp	r3, #4
    b7a8:	dc5c      	bgt.n	b864 <hif_handle_isr+0x1b4>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    b7aa:	7833      	ldrb	r3, [r6, #0]
    b7ac:	2b01      	cmp	r3, #1
    b7ae:	d052      	beq.n	b856 <hif_handle_isr+0x1a6>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    b7b0:	7833      	ldrb	r3, [r6, #0]
    b7b2:	2b02      	cmp	r3, #2
    b7b4:	d100      	bne.n	b7b8 <hif_handle_isr+0x108>
    b7b6:	e07f      	b.n	b8b8 <hif_handle_isr+0x208>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    b7b8:	7833      	ldrb	r3, [r6, #0]
    b7ba:	2b04      	cmp	r3, #4
    b7bc:	d100      	bne.n	b7c0 <hif_handle_isr+0x110>
    b7be:	e093      	b.n	b8e8 <hif_handle_isr+0x238>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    b7c0:	7833      	ldrb	r3, [r6, #0]
    b7c2:	2b06      	cmp	r3, #6
    b7c4:	d100      	bne.n	b7c8 <hif_handle_isr+0x118>
    b7c6:	e096      	b.n	b8f6 <hif_handle_isr+0x246>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    b7c8:	7833      	ldrb	r3, [r6, #0]
    b7ca:	2b07      	cmp	r3, #7
    b7cc:	d100      	bne.n	b7d0 <hif_handle_isr+0x120>
    b7ce:	e0a9      	b.n	b924 <hif_handle_isr+0x274>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    b7d0:	7833      	ldrb	r3, [r6, #0]
    b7d2:	2b05      	cmp	r3, #5
    b7d4:	d000      	beq.n	b7d8 <hif_handle_isr+0x128>
    b7d6:	e095      	b.n	b904 <hif_handle_isr+0x254>
				    if(gstrHifCxt.pfSslCb)
    b7d8:	4653      	mov	r3, sl
    b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7dc:	2b00      	cmp	r3, #0
    b7de:	d009      	beq.n	b7f4 <hif_handle_isr+0x144>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7e0:	4653      	mov	r3, sl
    b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7e4:	7870      	ldrb	r0, [r6, #1]
    b7e6:	8871      	ldrh	r1, [r6, #2]
    b7e8:	9a05      	ldr	r2, [sp, #20]
    b7ea:	3908      	subs	r1, #8
    b7ec:	b2c0      	uxtb	r0, r0
    b7ee:	3208      	adds	r2, #8
    b7f0:	b289      	uxth	r1, r1
    b7f2:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    b7f4:	4653      	mov	r3, sl
    b7f6:	789b      	ldrb	r3, [r3, #2]
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	d116      	bne.n	b82a <hif_handle_isr+0x17a>
	while (gstrHifCxt.u8Interrupt) {
    b7fc:	4653      	mov	r3, sl
    b7fe:	78db      	ldrb	r3, [r3, #3]
    b800:	2b00      	cmp	r3, #0
    b802:	d000      	beq.n	b806 <hif_handle_isr+0x156>
    b804:	e766      	b.n	b6d4 <hif_handle_isr+0x24>
			}
		}
	}

	return ret;
}
    b806:	2000      	movs	r0, #0
    b808:	b007      	add	sp, #28
    b80a:	bc3c      	pop	{r2, r3, r4, r5}
    b80c:	4690      	mov	r8, r2
    b80e:	4699      	mov	r9, r3
    b810:	46a2      	mov	sl, r4
    b812:	46ab      	mov	fp, r5
    b814:	bdf0      	pop	{r4, r5, r6, r7, pc}
					M2M_ERR("(hif) address bus fail\n");
    b816:	22d2      	movs	r2, #210	; 0xd2
    b818:	4b64      	ldr	r3, [pc, #400]	; (b9ac <hif_handle_isr+0x2fc>)
    b81a:	32ff      	adds	r2, #255	; 0xff
    b81c:	4964      	ldr	r1, [pc, #400]	; (b9b0 <hif_handle_isr+0x300>)
    b81e:	0018      	movs	r0, r3
    b820:	4d64      	ldr	r5, [pc, #400]	; (b9b4 <hif_handle_isr+0x304>)
    b822:	4698      	mov	r8, r3
    b824:	47a8      	blx	r5
    b826:	486d      	ldr	r0, [pc, #436]	; (b9dc <hif_handle_isr+0x32c>)
    b828:	e780      	b.n	b72c <hif_handle_isr+0x7c>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    b82a:	4b60      	ldr	r3, [pc, #384]	; (b9ac <hif_handle_isr+0x2fc>)
    b82c:	4a6c      	ldr	r2, [pc, #432]	; (b9e0 <hif_handle_isr+0x330>)
    b82e:	0018      	movs	r0, r3
    b830:	495f      	ldr	r1, [pc, #380]	; (b9b0 <hif_handle_isr+0x300>)
    b832:	4d60      	ldr	r5, [pc, #384]	; (b9b4 <hif_handle_isr+0x304>)
    b834:	4698      	mov	r8, r3
    b836:	47a8      	blx	r5
    b838:	7831      	ldrb	r1, [r6, #0]
    b83a:	7872      	ldrb	r2, [r6, #1]
    b83c:	b2c9      	uxtb	r1, r1
    b83e:	b2d2      	uxtb	r2, r2
    b840:	4868      	ldr	r0, [pc, #416]	; (b9e4 <hif_handle_isr+0x334>)
    b842:	47a8      	blx	r5
    b844:	200d      	movs	r0, #13
    b846:	4f5e      	ldr	r7, [pc, #376]	; (b9c0 <hif_handle_isr+0x310>)
    b848:	47b8      	blx	r7
					ret = hif_set_rx_done();
    b84a:	4b67      	ldr	r3, [pc, #412]	; (b9e8 <hif_handle_isr+0x338>)
    b84c:	4798      	blx	r3
					if(ret != M2M_SUCCESS) goto ERR1;
    b84e:	2800      	cmp	r0, #0
    b850:	d0d4      	beq.n	b7fc <hif_handle_isr+0x14c>
    b852:	0004      	movs	r4, r0
    b854:	e771      	b.n	b73a <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfWifiCb)
    b856:	4653      	mov	r3, sl
    b858:	68db      	ldr	r3, [r3, #12]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d069      	beq.n	b932 <hif_handle_isr+0x282>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b85e:	4653      	mov	r3, sl
    b860:	68db      	ldr	r3, [r3, #12]
    b862:	e7bf      	b.n	b7e4 <hif_handle_isr+0x134>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    b864:	22ed      	movs	r2, #237	; 0xed
						nm_bsp_interrupt_ctrl(1);
    b866:	2406      	movs	r4, #6
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    b868:	4b50      	ldr	r3, [pc, #320]	; (b9ac <hif_handle_isr+0x2fc>)
    b86a:	0052      	lsls	r2, r2, #1
    b86c:	4950      	ldr	r1, [pc, #320]	; (b9b0 <hif_handle_isr+0x300>)
    b86e:	0018      	movs	r0, r3
    b870:	4d50      	ldr	r5, [pc, #320]	; (b9b4 <hif_handle_isr+0x304>)
    b872:	4698      	mov	r8, r3
    b874:	47a8      	blx	r5
    b876:	8872      	ldrh	r2, [r6, #2]
    b878:	7833      	ldrb	r3, [r6, #0]
    b87a:	7871      	ldrb	r1, [r6, #1]
    b87c:	b292      	uxth	r2, r2
    b87e:	b2db      	uxtb	r3, r3
    b880:	9100      	str	r1, [sp, #0]
    b882:	485a      	ldr	r0, [pc, #360]	; (b9ec <hif_handle_isr+0x33c>)
    b884:	0039      	movs	r1, r7
    b886:	47a8      	blx	r5
    b888:	200d      	movs	r0, #13
    b88a:	4f4d      	ldr	r7, [pc, #308]	; (b9c0 <hif_handle_isr+0x310>)
    b88c:	47b8      	blx	r7
						nm_bsp_interrupt_ctrl(1);
    b88e:	2001      	movs	r0, #1
    b890:	47d8      	blx	fp
    b892:	4264      	negs	r4, r4
    b894:	e751      	b.n	b73a <hif_handle_isr+0x8a>
			M2M_ERR("(hif) False interrupt %lx",reg);
    b896:	2289      	movs	r2, #137	; 0x89
    b898:	240c      	movs	r4, #12
    b89a:	4b44      	ldr	r3, [pc, #272]	; (b9ac <hif_handle_isr+0x2fc>)
    b89c:	0092      	lsls	r2, r2, #2
    b89e:	0018      	movs	r0, r3
    b8a0:	4943      	ldr	r1, [pc, #268]	; (b9b0 <hif_handle_isr+0x300>)
    b8a2:	4d44      	ldr	r5, [pc, #272]	; (b9b4 <hif_handle_isr+0x304>)
    b8a4:	4698      	mov	r8, r3
    b8a6:	47a8      	blx	r5
    b8a8:	9903      	ldr	r1, [sp, #12]
    b8aa:	4851      	ldr	r0, [pc, #324]	; (b9f0 <hif_handle_isr+0x340>)
    b8ac:	47a8      	blx	r5
    b8ae:	200d      	movs	r0, #13
    b8b0:	4f43      	ldr	r7, [pc, #268]	; (b9c0 <hif_handle_isr+0x310>)
    b8b2:	47b8      	blx	r7
    b8b4:	4264      	negs	r4, r4
    b8b6:	e740      	b.n	b73a <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfIpCb)
    b8b8:	4653      	mov	r3, sl
    b8ba:	691b      	ldr	r3, [r3, #16]
    b8bc:	2b00      	cmp	r3, #0
    b8be:	d046      	beq.n	b94e <hif_handle_isr+0x29e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b8c0:	4653      	mov	r3, sl
    b8c2:	691b      	ldr	r3, [r3, #16]
    b8c4:	e78e      	b.n	b7e4 <hif_handle_isr+0x134>
				M2M_ERR("(hif) Wrong Size\n");
    b8c6:	2287      	movs	r2, #135	; 0x87
    b8c8:	2402      	movs	r4, #2
    b8ca:	4b38      	ldr	r3, [pc, #224]	; (b9ac <hif_handle_isr+0x2fc>)
    b8cc:	0092      	lsls	r2, r2, #2
    b8ce:	4938      	ldr	r1, [pc, #224]	; (b9b0 <hif_handle_isr+0x300>)
    b8d0:	0018      	movs	r0, r3
    b8d2:	4d38      	ldr	r5, [pc, #224]	; (b9b4 <hif_handle_isr+0x304>)
    b8d4:	4698      	mov	r8, r3
    b8d6:	47a8      	blx	r5
    b8d8:	4b38      	ldr	r3, [pc, #224]	; (b9bc <hif_handle_isr+0x30c>)
    b8da:	4846      	ldr	r0, [pc, #280]	; (b9f4 <hif_handle_isr+0x344>)
    b8dc:	4798      	blx	r3
    b8de:	200d      	movs	r0, #13
    b8e0:	4f37      	ldr	r7, [pc, #220]	; (b9c0 <hif_handle_isr+0x310>)
    b8e2:	47b8      	blx	r7
    b8e4:	4264      	negs	r4, r4
    b8e6:	e728      	b.n	b73a <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfOtaCb)
    b8e8:	4653      	mov	r3, sl
    b8ea:	695b      	ldr	r3, [r3, #20]
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	d037      	beq.n	b960 <hif_handle_isr+0x2b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b8f0:	4653      	mov	r3, sl
    b8f2:	695b      	ldr	r3, [r3, #20]
    b8f4:	e776      	b.n	b7e4 <hif_handle_isr+0x134>
					if(gstrHifCxt.pfCryptoCb)
    b8f6:	4653      	mov	r3, sl
    b8f8:	6a1b      	ldr	r3, [r3, #32]
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d039      	beq.n	b972 <hif_handle_isr+0x2c2>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b8fe:	4653      	mov	r3, sl
    b900:	6a1b      	ldr	r3, [r3, #32]
    b902:	e76f      	b.n	b7e4 <hif_handle_isr+0x134>
					M2M_ERR("(hif) invalid group ID\n");
    b904:	2406      	movs	r4, #6
    b906:	4b29      	ldr	r3, [pc, #164]	; (b9ac <hif_handle_isr+0x2fc>)
    b908:	4a3b      	ldr	r2, [pc, #236]	; (b9f8 <hif_handle_isr+0x348>)
    b90a:	4929      	ldr	r1, [pc, #164]	; (b9b0 <hif_handle_isr+0x300>)
    b90c:	0018      	movs	r0, r3
    b90e:	4d29      	ldr	r5, [pc, #164]	; (b9b4 <hif_handle_isr+0x304>)
    b910:	4698      	mov	r8, r3
    b912:	47a8      	blx	r5
    b914:	4b29      	ldr	r3, [pc, #164]	; (b9bc <hif_handle_isr+0x30c>)
    b916:	4839      	ldr	r0, [pc, #228]	; (b9fc <hif_handle_isr+0x34c>)
    b918:	4798      	blx	r3
    b91a:	200d      	movs	r0, #13
    b91c:	4f28      	ldr	r7, [pc, #160]	; (b9c0 <hif_handle_isr+0x310>)
    b91e:	47b8      	blx	r7
    b920:	4264      	negs	r4, r4
    b922:	e70a      	b.n	b73a <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfSigmaCb)
    b924:	4653      	mov	r3, sl
    b926:	699b      	ldr	r3, [r3, #24]
    b928:	2b00      	cmp	r3, #0
    b92a:	d02a      	beq.n	b982 <hif_handle_isr+0x2d2>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b92c:	4653      	mov	r3, sl
    b92e:	699b      	ldr	r3, [r3, #24]
    b930:	e758      	b.n	b7e4 <hif_handle_isr+0x134>
						M2M_ERR("WIFI callback is not registered\n");
    b932:	22f3      	movs	r2, #243	; 0xf3
    b934:	4b1d      	ldr	r3, [pc, #116]	; (b9ac <hif_handle_isr+0x2fc>)
    b936:	0052      	lsls	r2, r2, #1
    b938:	491d      	ldr	r1, [pc, #116]	; (b9b0 <hif_handle_isr+0x300>)
    b93a:	0018      	movs	r0, r3
    b93c:	4d1d      	ldr	r5, [pc, #116]	; (b9b4 <hif_handle_isr+0x304>)
    b93e:	47a8      	blx	r5
    b940:	482f      	ldr	r0, [pc, #188]	; (ba00 <hif_handle_isr+0x350>)
						M2M_ERR("Sigma callback is not registered\n");
    b942:	4b1e      	ldr	r3, [pc, #120]	; (b9bc <hif_handle_isr+0x30c>)
    b944:	4798      	blx	r3
    b946:	4f1e      	ldr	r7, [pc, #120]	; (b9c0 <hif_handle_isr+0x310>)
    b948:	200d      	movs	r0, #13
    b94a:	47b8      	blx	r7
    b94c:	e752      	b.n	b7f4 <hif_handle_isr+0x144>
						M2M_ERR("Scoket callback is not registered\n");
    b94e:	22f7      	movs	r2, #247	; 0xf7
    b950:	4b16      	ldr	r3, [pc, #88]	; (b9ac <hif_handle_isr+0x2fc>)
    b952:	0052      	lsls	r2, r2, #1
    b954:	4916      	ldr	r1, [pc, #88]	; (b9b0 <hif_handle_isr+0x300>)
    b956:	0018      	movs	r0, r3
    b958:	4d16      	ldr	r5, [pc, #88]	; (b9b4 <hif_handle_isr+0x304>)
    b95a:	47a8      	blx	r5
    b95c:	4829      	ldr	r0, [pc, #164]	; (ba04 <hif_handle_isr+0x354>)
    b95e:	e7f0      	b.n	b942 <hif_handle_isr+0x292>
						M2M_ERR("Ota callback is not registered\n");
    b960:	22fb      	movs	r2, #251	; 0xfb
    b962:	4b12      	ldr	r3, [pc, #72]	; (b9ac <hif_handle_isr+0x2fc>)
    b964:	0052      	lsls	r2, r2, #1
    b966:	4912      	ldr	r1, [pc, #72]	; (b9b0 <hif_handle_isr+0x300>)
    b968:	0018      	movs	r0, r3
    b96a:	4d12      	ldr	r5, [pc, #72]	; (b9b4 <hif_handle_isr+0x304>)
    b96c:	47a8      	blx	r5
    b96e:	4826      	ldr	r0, [pc, #152]	; (ba08 <hif_handle_isr+0x358>)
    b970:	e7e7      	b.n	b942 <hif_handle_isr+0x292>
						M2M_ERR("Crypto callback is not registered\n");
    b972:	4b0e      	ldr	r3, [pc, #56]	; (b9ac <hif_handle_isr+0x2fc>)
    b974:	4a25      	ldr	r2, [pc, #148]	; (ba0c <hif_handle_isr+0x35c>)
    b976:	490e      	ldr	r1, [pc, #56]	; (b9b0 <hif_handle_isr+0x300>)
    b978:	0018      	movs	r0, r3
    b97a:	4d0e      	ldr	r5, [pc, #56]	; (b9b4 <hif_handle_isr+0x304>)
    b97c:	47a8      	blx	r5
    b97e:	4824      	ldr	r0, [pc, #144]	; (ba10 <hif_handle_isr+0x360>)
    b980:	e7df      	b.n	b942 <hif_handle_isr+0x292>
						M2M_ERR("Sigma callback is not registered\n");
    b982:	4b0a      	ldr	r3, [pc, #40]	; (b9ac <hif_handle_isr+0x2fc>)
    b984:	4a23      	ldr	r2, [pc, #140]	; (ba14 <hif_handle_isr+0x364>)
    b986:	490a      	ldr	r1, [pc, #40]	; (b9b0 <hif_handle_isr+0x300>)
    b988:	0018      	movs	r0, r3
    b98a:	4d0a      	ldr	r5, [pc, #40]	; (b9b4 <hif_handle_isr+0x304>)
    b98c:	47a8      	blx	r5
    b98e:	4822      	ldr	r0, [pc, #136]	; (ba18 <hif_handle_isr+0x368>)
    b990:	e7d7      	b.n	b942 <hif_handle_isr+0x292>
    b992:	46c0      	nop			; (mov r8, r8)
    b994:	20000b6c 	.word	0x20000b6c
    b998:	0000c67d 	.word	0x0000c67d
    b99c:	0000b095 	.word	0x0000b095
    b9a0:	00001070 	.word	0x00001070
    b9a4:	0000c689 	.word	0x0000c689
    b9a8:	00001084 	.word	0x00001084
    b9ac:	000155a0 	.word	0x000155a0
    b9b0:	000155f4 	.word	0x000155f4
    b9b4:	0001372d 	.word	0x0001372d
    b9b8:	00015628 	.word	0x00015628
    b9bc:	00013849 	.word	0x00013849
    b9c0:	00013761 	.word	0x00013761
    b9c4:	0000024a 	.word	0x0000024a
    b9c8:	000155fc 	.word	0x000155fc
    b9cc:	000157e8 	.word	0x000157e8
    b9d0:	0000022d 	.word	0x0000022d
    b9d4:	000157c4 	.word	0x000157c4
    b9d8:	0000c695 	.word	0x0000c695
    b9dc:	0001564c 	.word	0x0001564c
    b9e0:	00000215 	.word	0x00000215
    b9e4:	00015768 	.word	0x00015768
    b9e8:	0000b3bd 	.word	0x0000b3bd
    b9ec:	00015664 	.word	0x00015664
    b9f0:	000157a8 	.word	0x000157a8
    b9f4:	00015794 	.word	0x00015794
    b9f8:	0000020f 	.word	0x0000020f
    b9fc:	00015750 	.word	0x00015750
    ba00:	000156a4 	.word	0x000156a4
    ba04:	000156c4 	.word	0x000156c4
    ba08:	000156e8 	.word	0x000156e8
    ba0c:	000001ff 	.word	0x000001ff
    ba10:	00015708 	.word	0x00015708
    ba14:	00000206 	.word	0x00000206
    ba18:	0001572c 	.word	0x0001572c

0000ba1c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba1e:	0014      	movs	r4, r2
    ba20:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    ba22:	2800      	cmp	r0, #0
    ba24:	d01d      	beq.n	ba62 <hif_receive+0x46>
    ba26:	2900      	cmp	r1, #0
    ba28:	d01b      	beq.n	ba62 <hif_receive+0x46>
    ba2a:	2a00      	cmp	r2, #0
    ba2c:	d019      	beq.n	ba62 <hif_receive+0x46>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    ba2e:	4e1f      	ldr	r6, [pc, #124]	; (baac <hif_receive+0x90>)
    ba30:	68b3      	ldr	r3, [r6, #8]
    ba32:	429a      	cmp	r2, r3
    ba34:	d82f      	bhi.n	ba96 <hif_receive+0x7a>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    ba36:	6873      	ldr	r3, [r6, #4]
    ba38:	4298      	cmp	r0, r3
    ba3a:	d317      	bcc.n	ba6c <hif_receive+0x50>
    ba3c:	6873      	ldr	r3, [r6, #4]
    ba3e:	1887      	adds	r7, r0, r2
    ba40:	68b2      	ldr	r2, [r6, #8]
    ba42:	189b      	adds	r3, r3, r2
    ba44:	429f      	cmp	r7, r3
    ba46:	d811      	bhi.n	ba6c <hif_receive+0x50>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    ba48:	0022      	movs	r2, r4
    ba4a:	4b19      	ldr	r3, [pc, #100]	; (bab0 <hif_receive+0x94>)
    ba4c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ba4e:	2800      	cmp	r0, #0
    ba50:	d10b      	bne.n	ba6a <hif_receive+0x4e>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    ba52:	6873      	ldr	r3, [r6, #4]
    ba54:	68b2      	ldr	r2, [r6, #8]
    ba56:	189b      	adds	r3, r3, r2
    ba58:	429f      	cmp	r7, r3
    ba5a:	d004      	beq.n	ba66 <hif_receive+0x4a>
    ba5c:	2d00      	cmp	r5, #0
    ba5e:	d102      	bne.n	ba66 <hif_receive+0x4a>
    ba60:	e003      	b.n	ba6a <hif_receive+0x4e>
		if(isDone)
    ba62:	2d00      	cmp	r5, #0
    ba64:	d010      	beq.n	ba88 <hif_receive+0x6c>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    ba66:	4b13      	ldr	r3, [pc, #76]	; (bab4 <hif_receive+0x98>)
    ba68:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    ba6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    ba6c:	4a12      	ldr	r2, [pc, #72]	; (bab8 <hif_receive+0x9c>)
    ba6e:	4913      	ldr	r1, [pc, #76]	; (babc <hif_receive+0xa0>)
    ba70:	4813      	ldr	r0, [pc, #76]	; (bac0 <hif_receive+0xa4>)
    ba72:	4b14      	ldr	r3, [pc, #80]	; (bac4 <hif_receive+0xa8>)
    ba74:	4798      	blx	r3
    ba76:	4814      	ldr	r0, [pc, #80]	; (bac8 <hif_receive+0xac>)
    ba78:	4b14      	ldr	r3, [pc, #80]	; (bacc <hif_receive+0xb0>)
    ba7a:	4798      	blx	r3
    ba7c:	200d      	movs	r0, #13
    ba7e:	4b14      	ldr	r3, [pc, #80]	; (bad0 <hif_receive+0xb4>)
    ba80:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ba82:	200c      	movs	r0, #12
    ba84:	4240      	negs	r0, r0
		goto ERR1;
    ba86:	e7f0      	b.n	ba6a <hif_receive+0x4e>
			M2M_ERR(" hif_receive: Invalid argument\n");
    ba88:	4a12      	ldr	r2, [pc, #72]	; (bad4 <hif_receive+0xb8>)
    ba8a:	490c      	ldr	r1, [pc, #48]	; (babc <hif_receive+0xa0>)
    ba8c:	480c      	ldr	r0, [pc, #48]	; (bac0 <hif_receive+0xa4>)
    ba8e:	4b0d      	ldr	r3, [pc, #52]	; (bac4 <hif_receive+0xa8>)
    ba90:	4798      	blx	r3
    ba92:	4811      	ldr	r0, [pc, #68]	; (bad8 <hif_receive+0xbc>)
    ba94:	e7f0      	b.n	ba78 <hif_receive+0x5c>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    ba96:	4a11      	ldr	r2, [pc, #68]	; (badc <hif_receive+0xc0>)
    ba98:	4908      	ldr	r1, [pc, #32]	; (babc <hif_receive+0xa0>)
    ba9a:	4d0a      	ldr	r5, [pc, #40]	; (bac4 <hif_receive+0xa8>)
    ba9c:	4808      	ldr	r0, [pc, #32]	; (bac0 <hif_receive+0xa4>)
    ba9e:	47a8      	blx	r5
    baa0:	68b2      	ldr	r2, [r6, #8]
    baa2:	0021      	movs	r1, r4
    baa4:	480e      	ldr	r0, [pc, #56]	; (bae0 <hif_receive+0xc4>)
    baa6:	47a8      	blx	r5
    baa8:	e7e8      	b.n	ba7c <hif_receive+0x60>
    baaa:	46c0      	nop			; (mov r8, r8)
    baac:	20000b6c 	.word	0x20000b6c
    bab0:	0000c695 	.word	0x0000c695
    bab4:	0000b3bd 	.word	0x0000b3bd
    bab8:	00000279 	.word	0x00000279
    babc:	0001560c 	.word	0x0001560c
    bac0:	000155a0 	.word	0x000155a0
    bac4:	0001372d 	.word	0x0001372d
    bac8:	00015880 	.word	0x00015880
    bacc:	00013849 	.word	0x00013849
    bad0:	00013761 	.word	0x00013761
    bad4:	0000026b 	.word	0x0000026b
    bad8:	00015818 	.word	0x00015818
    badc:	00000273 	.word	0x00000273
    bae0:	00015838 	.word	0x00015838

0000bae4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    bae4:	b570      	push	{r4, r5, r6, lr}
    bae6:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    bae8:	2807      	cmp	r0, #7
    baea:	d81f      	bhi.n	bb2c <hif_register_cb+0x48>
    baec:	4a16      	ldr	r2, [pc, #88]	; (bb48 <hif_register_cb+0x64>)
    baee:	0083      	lsls	r3, r0, #2
    baf0:	58d3      	ldr	r3, [r2, r3]
    baf2:	469f      	mov	pc, r3
	sint8 ret = M2M_SUCCESS;
    baf4:	2000      	movs	r0, #0
			break;
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    baf6:	4b15      	ldr	r3, [pc, #84]	; (bb4c <hif_register_cb+0x68>)
    baf8:	6199      	str	r1, [r3, #24]
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    bafa:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    bafc:	4b13      	ldr	r3, [pc, #76]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bafe:	2000      	movs	r0, #0
			gstrHifCxt.pfWifiCb = fn;
    bb00:	60d9      	str	r1, [r3, #12]
			break;
    bb02:	e7fa      	b.n	bafa <hif_register_cb+0x16>
			gstrHifCxt.pfIpCb = fn;
    bb04:	4b11      	ldr	r3, [pc, #68]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bb06:	2000      	movs	r0, #0
			gstrHifCxt.pfIpCb = fn;
    bb08:	6119      	str	r1, [r3, #16]
			break;
    bb0a:	e7f6      	b.n	bafa <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    bb0c:	4b0f      	ldr	r3, [pc, #60]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bb0e:	2000      	movs	r0, #0
			gstrHifCxt.pfHifCb = fn;
    bb10:	61d9      	str	r1, [r3, #28]
			break;
    bb12:	e7f2      	b.n	bafa <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    bb14:	4b0d      	ldr	r3, [pc, #52]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bb16:	2000      	movs	r0, #0
			gstrHifCxt.pfOtaCb = fn;
    bb18:	6159      	str	r1, [r3, #20]
			break;
    bb1a:	e7ee      	b.n	bafa <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    bb1c:	4b0b      	ldr	r3, [pc, #44]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bb1e:	2000      	movs	r0, #0
			gstrHifCxt.pfSslCb = fn;
    bb20:	6259      	str	r1, [r3, #36]	; 0x24
			break;
    bb22:	e7ea      	b.n	bafa <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    bb24:	4b09      	ldr	r3, [pc, #36]	; (bb4c <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    bb26:	2000      	movs	r0, #0
			gstrHifCxt.pfCryptoCb = fn;
    bb28:	6219      	str	r1, [r3, #32]
			break;
    bb2a:	e7e6      	b.n	bafa <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    bb2c:	4a08      	ldr	r2, [pc, #32]	; (bb50 <hif_register_cb+0x6c>)
    bb2e:	4909      	ldr	r1, [pc, #36]	; (bb54 <hif_register_cb+0x70>)
    bb30:	4d09      	ldr	r5, [pc, #36]	; (bb58 <hif_register_cb+0x74>)
    bb32:	480a      	ldr	r0, [pc, #40]	; (bb5c <hif_register_cb+0x78>)
    bb34:	47a8      	blx	r5
    bb36:	0021      	movs	r1, r4
    bb38:	4809      	ldr	r0, [pc, #36]	; (bb60 <hif_register_cb+0x7c>)
    bb3a:	47a8      	blx	r5
    bb3c:	200d      	movs	r0, #13
    bb3e:	4b09      	ldr	r3, [pc, #36]	; (bb64 <hif_register_cb+0x80>)
    bb40:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    bb42:	200c      	movs	r0, #12
    bb44:	4240      	negs	r0, r0
			break;
    bb46:	e7d8      	b.n	bafa <hif_register_cb+0x16>
    bb48:	000155c8 	.word	0x000155c8
    bb4c:	20000b6c 	.word	0x20000b6c
    bb50:	000002b1 	.word	0x000002b1
    bb54:	00015618 	.word	0x00015618
    bb58:	0001372d 	.word	0x0001372d
    bb5c:	000155a0 	.word	0x000155a0
    bb60:	000158c4 	.word	0x000158c4
    bb64:	00013761 	.word	0x00013761

0000bb68 <hif_init>:
{
    bb68:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    bb6a:	2228      	movs	r2, #40	; 0x28
    bb6c:	2100      	movs	r1, #0
    bb6e:	4806      	ldr	r0, [pc, #24]	; (bb88 <hif_init+0x20>)
    bb70:	4b06      	ldr	r3, [pc, #24]	; (bb8c <hif_init+0x24>)
    bb72:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    bb74:	4806      	ldr	r0, [pc, #24]	; (bb90 <hif_init+0x28>)
    bb76:	4b07      	ldr	r3, [pc, #28]	; (bb94 <hif_init+0x2c>)
    bb78:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    bb7a:	4907      	ldr	r1, [pc, #28]	; (bb98 <hif_init+0x30>)
    bb7c:	2003      	movs	r0, #3
    bb7e:	4b07      	ldr	r3, [pc, #28]	; (bb9c <hif_init+0x34>)
    bb80:	4798      	blx	r3
}
    bb82:	2000      	movs	r0, #0
    bb84:	bd10      	pop	{r4, pc}
    bb86:	46c0      	nop			; (mov r8, r8)
    bb88:	20000b6c 	.word	0x20000b6c
    bb8c:	0000b381 	.word	0x0000b381
    bb90:	0000b3a9 	.word	0x0000b3a9
    bb94:	0000b03d 	.word	0x0000b03d
    bb98:	0000b3b9 	.word	0x0000b3b9
    bb9c:	0000bae5 	.word	0x0000bae5

0000bba0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    bba0:	b530      	push	{r4, r5, lr}
    bba2:	0004      	movs	r4, r0
    bba4:	b09d      	sub	sp, #116	; 0x74
    bba6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    bba8:	282c      	cmp	r0, #44	; 0x2c
    bbaa:	d03f      	beq.n	bc2c <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    bbac:	281b      	cmp	r0, #27
    bbae:	d04d      	beq.n	bc4c <m2m_wifi_cb+0xac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    bbb0:	2806      	cmp	r0, #6
    bbb2:	d05b      	beq.n	bc6c <m2m_wifi_cb+0xcc>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    bbb4:	280e      	cmp	r0, #14
    bbb6:	d027      	beq.n	bc08 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    bbb8:	2832      	cmp	r0, #50	; 0x32
    bbba:	d027      	beq.n	bc0c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    bbbc:	282f      	cmp	r0, #47	; 0x2f
    bbbe:	d065      	beq.n	bc8c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    bbc0:	2834      	cmp	r0, #52	; 0x34
    bbc2:	d100      	bne.n	bbc6 <m2m_wifi_cb+0x26>
    bbc4:	e077      	b.n	bcb6 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    bbc6:	2811      	cmp	r0, #17
    bbc8:	d100      	bne.n	bbcc <m2m_wifi_cb+0x2c>
    bbca:	e0a8      	b.n	bd1e <m2m_wifi_cb+0x17e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    bbcc:	2813      	cmp	r0, #19
    bbce:	d100      	bne.n	bbd2 <m2m_wifi_cb+0x32>
    bbd0:	e0be      	b.n	bd50 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    bbd2:	2804      	cmp	r0, #4
    bbd4:	d100      	bne.n	bbd8 <m2m_wifi_cb+0x38>
    bbd6:	e0ea      	b.n	bdae <m2m_wifi_cb+0x20e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    bbd8:	2865      	cmp	r0, #101	; 0x65
    bbda:	d100      	bne.n	bbde <m2m_wifi_cb+0x3e>
    bbdc:	e08d      	b.n	bcfa <m2m_wifi_cb+0x15a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    bbde:	2809      	cmp	r0, #9
    bbe0:	d100      	bne.n	bbe4 <m2m_wifi_cb+0x44>
    bbe2:	e0f6      	b.n	bdd2 <m2m_wifi_cb+0x232>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    bbe4:	282a      	cmp	r0, #42	; 0x2a
    bbe6:	d100      	bne.n	bbea <m2m_wifi_cb+0x4a>
    bbe8:	e105      	b.n	bdf6 <m2m_wifi_cb+0x256>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    bbea:	2820      	cmp	r0, #32
    bbec:	d100      	bne.n	bbf0 <m2m_wifi_cb+0x50>
    bbee:	e0c2      	b.n	bd76 <m2m_wifi_cb+0x1d6>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    bbf0:	2292      	movs	r2, #146	; 0x92
    bbf2:	498a      	ldr	r1, [pc, #552]	; (be1c <m2m_wifi_cb+0x27c>)
    bbf4:	0052      	lsls	r2, r2, #1
    bbf6:	4d8a      	ldr	r5, [pc, #552]	; (be20 <m2m_wifi_cb+0x280>)
    bbf8:	488a      	ldr	r0, [pc, #552]	; (be24 <m2m_wifi_cb+0x284>)
    bbfa:	47a8      	blx	r5
    bbfc:	0021      	movs	r1, r4
    bbfe:	488a      	ldr	r0, [pc, #552]	; (be28 <m2m_wifi_cb+0x288>)
    bc00:	47a8      	blx	r5
    bc02:	200d      	movs	r0, #13
    bc04:	4b89      	ldr	r3, [pc, #548]	; (be2c <m2m_wifi_cb+0x28c>)
    bc06:	4798      	blx	r3
	}
}
    bc08:	b01d      	add	sp, #116	; 0x74
    bc0a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    bc0c:	2300      	movs	r3, #0
    bc0e:	2214      	movs	r2, #20
    bc10:	a903      	add	r1, sp, #12
    bc12:	0028      	movs	r0, r5
    bc14:	4c86      	ldr	r4, [pc, #536]	; (be30 <m2m_wifi_cb+0x290>)
    bc16:	47a0      	blx	r4
    bc18:	2800      	cmp	r0, #0
    bc1a:	d1f5      	bne.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc1c:	4b85      	ldr	r3, [pc, #532]	; (be34 <m2m_wifi_cb+0x294>)
    bc1e:	681b      	ldr	r3, [r3, #0]
    bc20:	2b00      	cmp	r3, #0
    bc22:	d0f1      	beq.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    bc24:	a903      	add	r1, sp, #12
    bc26:	3032      	adds	r0, #50	; 0x32
    bc28:	4798      	blx	r3
    bc2a:	e7ed      	b.n	bc08 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    bc2c:	2300      	movs	r3, #0
    bc2e:	2204      	movs	r2, #4
    bc30:	a903      	add	r1, sp, #12
    bc32:	0028      	movs	r0, r5
    bc34:	4c7e      	ldr	r4, [pc, #504]	; (be30 <m2m_wifi_cb+0x290>)
    bc36:	47a0      	blx	r4
    bc38:	2800      	cmp	r0, #0
    bc3a:	d1e5      	bne.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc3c:	4b7d      	ldr	r3, [pc, #500]	; (be34 <m2m_wifi_cb+0x294>)
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	2b00      	cmp	r3, #0
    bc42:	d0e1      	beq.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    bc44:	a903      	add	r1, sp, #12
    bc46:	302c      	adds	r0, #44	; 0x2c
    bc48:	4798      	blx	r3
    bc4a:	e7dd      	b.n	bc08 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    bc4c:	2300      	movs	r3, #0
    bc4e:	2208      	movs	r2, #8
    bc50:	a903      	add	r1, sp, #12
    bc52:	0028      	movs	r0, r5
    bc54:	4c76      	ldr	r4, [pc, #472]	; (be30 <m2m_wifi_cb+0x290>)
    bc56:	47a0      	blx	r4
    bc58:	2800      	cmp	r0, #0
    bc5a:	d1d5      	bne.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc5c:	4b75      	ldr	r3, [pc, #468]	; (be34 <m2m_wifi_cb+0x294>)
    bc5e:	681b      	ldr	r3, [r3, #0]
    bc60:	2b00      	cmp	r3, #0
    bc62:	d0d1      	beq.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    bc64:	a903      	add	r1, sp, #12
    bc66:	301b      	adds	r0, #27
    bc68:	4798      	blx	r3
    bc6a:	e7cd      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    bc6c:	2301      	movs	r3, #1
    bc6e:	2230      	movs	r2, #48	; 0x30
    bc70:	a903      	add	r1, sp, #12
    bc72:	0028      	movs	r0, r5
    bc74:	4c6e      	ldr	r4, [pc, #440]	; (be30 <m2m_wifi_cb+0x290>)
    bc76:	47a0      	blx	r4
    bc78:	2800      	cmp	r0, #0
    bc7a:	d1c5      	bne.n	bc08 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bc7c:	4b6d      	ldr	r3, [pc, #436]	; (be34 <m2m_wifi_cb+0x294>)
    bc7e:	681b      	ldr	r3, [r3, #0]
    bc80:	2b00      	cmp	r3, #0
    bc82:	d0c1      	beq.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    bc84:	a903      	add	r1, sp, #12
    bc86:	3006      	adds	r0, #6
    bc88:	4798      	blx	r3
    bc8a:	e7bd      	b.n	bc08 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    bc8c:	2264      	movs	r2, #100	; 0x64
    bc8e:	2100      	movs	r1, #0
    bc90:	a803      	add	r0, sp, #12
    bc92:	4b69      	ldr	r3, [pc, #420]	; (be38 <m2m_wifi_cb+0x298>)
    bc94:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    bc96:	2300      	movs	r3, #0
    bc98:	2264      	movs	r2, #100	; 0x64
    bc9a:	a903      	add	r1, sp, #12
    bc9c:	0028      	movs	r0, r5
    bc9e:	4c64      	ldr	r4, [pc, #400]	; (be30 <m2m_wifi_cb+0x290>)
    bca0:	47a0      	blx	r4
    bca2:	2800      	cmp	r0, #0
    bca4:	d1b0      	bne.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bca6:	4b63      	ldr	r3, [pc, #396]	; (be34 <m2m_wifi_cb+0x294>)
    bca8:	681b      	ldr	r3, [r3, #0]
    bcaa:	2b00      	cmp	r3, #0
    bcac:	d0ac      	beq.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    bcae:	a903      	add	r1, sp, #12
    bcb0:	302f      	adds	r0, #47	; 0x2f
    bcb2:	4798      	blx	r3
    bcb4:	e7a8      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    bcb6:	2300      	movs	r3, #0
    bcb8:	2204      	movs	r2, #4
    bcba:	a903      	add	r1, sp, #12
    bcbc:	0028      	movs	r0, r5
    bcbe:	4c5c      	ldr	r4, [pc, #368]	; (be30 <m2m_wifi_cb+0x290>)
    bcc0:	47a0      	blx	r4
    bcc2:	2800      	cmp	r0, #0
    bcc4:	d1a0      	bne.n	bc08 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    bcc6:	4d56      	ldr	r5, [pc, #344]	; (be20 <m2m_wifi_cb+0x280>)
    bcc8:	485c      	ldr	r0, [pc, #368]	; (be3c <m2m_wifi_cb+0x29c>)
    bcca:	47a8      	blx	r5
    bccc:	20ff      	movs	r0, #255	; 0xff
    bcce:	9c03      	ldr	r4, [sp, #12]
    bcd0:	0a23      	lsrs	r3, r4, #8
    bcd2:	0c22      	lsrs	r2, r4, #16
    bcd4:	4003      	ands	r3, r0
    bcd6:	4002      	ands	r2, r0
    bcd8:	4020      	ands	r0, r4
    bcda:	0e21      	lsrs	r1, r4, #24
    bcdc:	9000      	str	r0, [sp, #0]
    bcde:	4858      	ldr	r0, [pc, #352]	; (be40 <m2m_wifi_cb+0x2a0>)
    bce0:	47a8      	blx	r5
    bce2:	4b52      	ldr	r3, [pc, #328]	; (be2c <m2m_wifi_cb+0x28c>)
    bce4:	200d      	movs	r0, #13
    bce6:	4798      	blx	r3
			if (gpfAppWifiCb)
    bce8:	4b52      	ldr	r3, [pc, #328]	; (be34 <m2m_wifi_cb+0x294>)
    bcea:	681b      	ldr	r3, [r3, #0]
    bcec:	2b00      	cmp	r3, #0
    bcee:	d100      	bne.n	bcf2 <m2m_wifi_cb+0x152>
    bcf0:	e78a      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    bcf2:	2100      	movs	r1, #0
    bcf4:	2034      	movs	r0, #52	; 0x34
    bcf6:	4798      	blx	r3
    bcf8:	e786      	b.n	bc08 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bcfa:	2300      	movs	r3, #0
    bcfc:	2204      	movs	r2, #4
    bcfe:	a903      	add	r1, sp, #12
    bd00:	0028      	movs	r0, r5
    bd02:	4c4b      	ldr	r4, [pc, #300]	; (be30 <m2m_wifi_cb+0x290>)
    bd04:	47a0      	blx	r4
    bd06:	2800      	cmp	r0, #0
    bd08:	d000      	beq.n	bd0c <m2m_wifi_cb+0x16c>
    bd0a:	e77d      	b.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd0c:	4b49      	ldr	r3, [pc, #292]	; (be34 <m2m_wifi_cb+0x294>)
    bd0e:	681b      	ldr	r3, [r3, #0]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d100      	bne.n	bd16 <m2m_wifi_cb+0x176>
    bd14:	e778      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    bd16:	a903      	add	r1, sp, #12
    bd18:	3065      	adds	r0, #101	; 0x65
    bd1a:	4798      	blx	r3
    bd1c:	e774      	b.n	bc08 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    bd1e:	2200      	movs	r2, #0
    bd20:	4b48      	ldr	r3, [pc, #288]	; (be44 <m2m_wifi_cb+0x2a4>)
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    bd22:	ac03      	add	r4, sp, #12
		gu8scanInProgress = 0;
    bd24:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    bd26:	0028      	movs	r0, r5
    bd28:	2300      	movs	r3, #0
    bd2a:	3204      	adds	r2, #4
    bd2c:	0021      	movs	r1, r4
    bd2e:	4d40      	ldr	r5, [pc, #256]	; (be30 <m2m_wifi_cb+0x290>)
    bd30:	47a8      	blx	r5
    bd32:	2800      	cmp	r0, #0
    bd34:	d000      	beq.n	bd38 <m2m_wifi_cb+0x198>
    bd36:	e767      	b.n	bc08 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    bd38:	4b43      	ldr	r3, [pc, #268]	; (be48 <m2m_wifi_cb+0x2a8>)
    bd3a:	7822      	ldrb	r2, [r4, #0]
    bd3c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    bd3e:	4b3d      	ldr	r3, [pc, #244]	; (be34 <m2m_wifi_cb+0x294>)
    bd40:	681b      	ldr	r3, [r3, #0]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d100      	bne.n	bd48 <m2m_wifi_cb+0x1a8>
    bd46:	e75f      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    bd48:	0021      	movs	r1, r4
    bd4a:	3011      	adds	r0, #17
    bd4c:	4798      	blx	r3
    bd4e:	e75b      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    bd50:	ac03      	add	r4, sp, #12
    bd52:	0028      	movs	r0, r5
    bd54:	2300      	movs	r3, #0
    bd56:	222c      	movs	r2, #44	; 0x2c
    bd58:	0021      	movs	r1, r4
    bd5a:	4d35      	ldr	r5, [pc, #212]	; (be30 <m2m_wifi_cb+0x290>)
    bd5c:	47a8      	blx	r5
    bd5e:	2800      	cmp	r0, #0
    bd60:	d000      	beq.n	bd64 <m2m_wifi_cb+0x1c4>
    bd62:	e751      	b.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd64:	4b33      	ldr	r3, [pc, #204]	; (be34 <m2m_wifi_cb+0x294>)
    bd66:	681b      	ldr	r3, [r3, #0]
    bd68:	2b00      	cmp	r3, #0
    bd6a:	d100      	bne.n	bd6e <m2m_wifi_cb+0x1ce>
    bd6c:	e74c      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    bd6e:	0021      	movs	r1, r4
    bd70:	3013      	adds	r0, #19
    bd72:	4798      	blx	r3
    bd74:	e748      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    bd76:	2300      	movs	r3, #0
    bd78:	2208      	movs	r2, #8
    bd7a:	a903      	add	r1, sp, #12
    bd7c:	0028      	movs	r0, r5
    bd7e:	4c2c      	ldr	r4, [pc, #176]	; (be30 <m2m_wifi_cb+0x290>)
    bd80:	47a0      	blx	r4
    bd82:	2800      	cmp	r0, #0
    bd84:	d000      	beq.n	bd88 <m2m_wifi_cb+0x1e8>
    bd86:	e73f      	b.n	bc08 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    bd88:	466b      	mov	r3, sp
    bd8a:	0028      	movs	r0, r5
    bd8c:	8a1a      	ldrh	r2, [r3, #16]
    bd8e:	3008      	adds	r0, #8
    bd90:	2301      	movs	r3, #1
    bd92:	9903      	ldr	r1, [sp, #12]
    bd94:	47a0      	blx	r4
    bd96:	2800      	cmp	r0, #0
    bd98:	d000      	beq.n	bd9c <m2m_wifi_cb+0x1fc>
    bd9a:	e735      	b.n	bc08 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    bd9c:	4b25      	ldr	r3, [pc, #148]	; (be34 <m2m_wifi_cb+0x294>)
    bd9e:	681b      	ldr	r3, [r3, #0]
    bda0:	2b00      	cmp	r3, #0
    bda2:	d100      	bne.n	bda6 <m2m_wifi_cb+0x206>
    bda4:	e730      	b.n	bc08 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    bda6:	a903      	add	r1, sp, #12
    bda8:	3020      	adds	r0, #32
    bdaa:	4798      	blx	r3
    bdac:	e72c      	b.n	bc08 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bdae:	2300      	movs	r3, #0
    bdb0:	2204      	movs	r2, #4
    bdb2:	a903      	add	r1, sp, #12
    bdb4:	0028      	movs	r0, r5
    bdb6:	4c1e      	ldr	r4, [pc, #120]	; (be30 <m2m_wifi_cb+0x290>)
    bdb8:	47a0      	blx	r4
    bdba:	2800      	cmp	r0, #0
    bdbc:	d000      	beq.n	bdc0 <m2m_wifi_cb+0x220>
    bdbe:	e723      	b.n	bc08 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bdc0:	4b1c      	ldr	r3, [pc, #112]	; (be34 <m2m_wifi_cb+0x294>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d100      	bne.n	bdca <m2m_wifi_cb+0x22a>
    bdc8:	e71e      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    bdca:	a903      	add	r1, sp, #12
    bdcc:	3004      	adds	r0, #4
    bdce:	4798      	blx	r3
    bdd0:	e71a      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    bdd2:	2301      	movs	r3, #1
    bdd4:	2264      	movs	r2, #100	; 0x64
    bdd6:	a903      	add	r1, sp, #12
    bdd8:	0028      	movs	r0, r5
    bdda:	4c15      	ldr	r4, [pc, #84]	; (be30 <m2m_wifi_cb+0x290>)
    bddc:	47a0      	blx	r4
    bdde:	2800      	cmp	r0, #0
    bde0:	d000      	beq.n	bde4 <m2m_wifi_cb+0x244>
    bde2:	e711      	b.n	bc08 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bde4:	4b13      	ldr	r3, [pc, #76]	; (be34 <m2m_wifi_cb+0x294>)
    bde6:	681b      	ldr	r3, [r3, #0]
    bde8:	2b00      	cmp	r3, #0
    bdea:	d100      	bne.n	bdee <m2m_wifi_cb+0x24e>
    bdec:	e70c      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    bdee:	a903      	add	r1, sp, #12
    bdf0:	3009      	adds	r0, #9
    bdf2:	4798      	blx	r3
    bdf4:	e708      	b.n	bc08 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    bdf6:	2301      	movs	r3, #1
    bdf8:	2204      	movs	r2, #4
    bdfa:	a903      	add	r1, sp, #12
    bdfc:	0028      	movs	r0, r5
    bdfe:	4c0c      	ldr	r4, [pc, #48]	; (be30 <m2m_wifi_cb+0x290>)
    be00:	47a0      	blx	r4
    be02:	2800      	cmp	r0, #0
    be04:	d000      	beq.n	be08 <m2m_wifi_cb+0x268>
    be06:	e6ff      	b.n	bc08 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    be08:	4b0a      	ldr	r3, [pc, #40]	; (be34 <m2m_wifi_cb+0x294>)
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	2b00      	cmp	r3, #0
    be0e:	d100      	bne.n	be12 <m2m_wifi_cb+0x272>
    be10:	e6fa      	b.n	bc08 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    be12:	a903      	add	r1, sp, #12
    be14:	302a      	adds	r0, #42	; 0x2a
    be16:	4798      	blx	r3
    be18:	e6f6      	b.n	bc08 <m2m_wifi_cb+0x68>
    be1a:	46c0      	nop			; (mov r8, r8)
    be1c:	00015908 	.word	0x00015908
    be20:	0001372d 	.word	0x0001372d
    be24:	000155a0 	.word	0x000155a0
    be28:	00015958 	.word	0x00015958
    be2c:	00013761 	.word	0x00013761
    be30:	0000ba1d 	.word	0x0000ba1d
    be34:	200006f0 	.word	0x200006f0
    be38:	0000b381 	.word	0x0000b381
    be3c:	000158d0 	.word	0x000158d0
    be40:	00015938 	.word	0x00015938
    be44:	200006f5 	.word	0x200006f5
    be48:	200006f4 	.word	0x200006f4

0000be4c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4e:	46c6      	mov	lr, r8
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    be50:	230f      	movs	r3, #15
    be52:	2201      	movs	r2, #1
{
    be54:	b500      	push	{lr}
    be56:	b08e      	sub	sp, #56	; 0x38
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    be58:	446b      	add	r3, sp
    be5a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    be5c:	2800      	cmp	r0, #0
    be5e:	d062      	beq.n	bf26 <m2m_wifi_init+0xda>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    be60:	6801      	ldr	r1, [r0, #0]
    be62:	4a32      	ldr	r2, [pc, #200]	; (bf2c <m2m_wifi_init+0xe0>)
#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    be64:	0018      	movs	r0, r3
	gpfAppWifiCb = param->pfAppWifiCb;
    be66:	6011      	str	r1, [r2, #0]
	gu8scanInProgress = 0;
    be68:	2100      	movs	r1, #0
    be6a:	4a31      	ldr	r2, [pc, #196]	; (bf30 <m2m_wifi_init+0xe4>)
	ret = nm_drv_init(&u8WifiMode);
    be6c:	4b31      	ldr	r3, [pc, #196]	; (bf34 <m2m_wifi_init+0xe8>)
	gu8scanInProgress = 0;
    be6e:	7011      	strb	r1, [r2, #0]
	ret = nm_drv_init(&u8WifiMode);
    be70:	4798      	blx	r3
    be72:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    be74:	d004      	beq.n	be80 <m2m_wifi_init+0x34>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    be76:	0020      	movs	r0, r4
    be78:	b00e      	add	sp, #56	; 0x38
    be7a:	bc04      	pop	{r2}
    be7c:	4690      	mov	r8, r2
    be7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    be80:	2000      	movs	r0, #0
    be82:	4b2d      	ldr	r3, [pc, #180]	; (bf38 <m2m_wifi_init+0xec>)
    be84:	4798      	blx	r3
    be86:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    be88:	d003      	beq.n	be92 <m2m_wifi_init+0x46>
	nm_drv_deinit(NULL);
    be8a:	4b2c      	ldr	r3, [pc, #176]	; (bf3c <m2m_wifi_init+0xf0>)
    be8c:	2000      	movs	r0, #0
    be8e:	4798      	blx	r3
    be90:	e7f1      	b.n	be76 <m2m_wifi_init+0x2a>
	ret = nm_get_firmware_full_info(&strtmp);
    be92:	ae04      	add	r6, sp, #16
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    be94:	492a      	ldr	r1, [pc, #168]	; (bf40 <m2m_wifi_init+0xf4>)
    be96:	4b2b      	ldr	r3, [pc, #172]	; (bf44 <m2m_wifi_init+0xf8>)
    be98:	2001      	movs	r0, #1
    be9a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    be9c:	4b2a      	ldr	r3, [pc, #168]	; (bf48 <m2m_wifi_init+0xfc>)
    be9e:	0030      	movs	r0, r6
    bea0:	4798      	blx	r3
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    bea2:	4b2a      	ldr	r3, [pc, #168]	; (bf4c <m2m_wifi_init+0x100>)
    bea4:	4d2a      	ldr	r5, [pc, #168]	; (bf50 <m2m_wifi_init+0x104>)
    bea6:	4698      	mov	r8, r3
	ret = nm_get_firmware_full_info(&strtmp);
    bea8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    beaa:	0018      	movs	r0, r3
    beac:	47a8      	blx	r5
    beae:	8c30      	ldrh	r0, [r6, #32]
    beb0:	79b3      	ldrb	r3, [r6, #6]
    beb2:	7972      	ldrb	r2, [r6, #5]
    beb4:	7931      	ldrb	r1, [r6, #4]
    beb6:	9000      	str	r0, [sp, #0]
    beb8:	4826      	ldr	r0, [pc, #152]	; (bf54 <m2m_wifi_init+0x108>)
    beba:	47a8      	blx	r5
    bebc:	4f26      	ldr	r7, [pc, #152]	; (bf58 <m2m_wifi_init+0x10c>)
    bebe:	200d      	movs	r0, #13
    bec0:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    bec2:	4640      	mov	r0, r8
    bec4:	47a8      	blx	r5
    bec6:	2226      	movs	r2, #38	; 0x26
    bec8:	211a      	movs	r1, #26
    beca:	446a      	add	r2, sp
    becc:	4469      	add	r1, sp
    bece:	4823      	ldr	r0, [pc, #140]	; (bf5c <m2m_wifi_init+0x110>)
    bed0:	47a8      	blx	r5
    bed2:	200d      	movs	r0, #13
    bed4:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    bed6:	4640      	mov	r0, r8
    bed8:	47a8      	blx	r5
    beda:	7a73      	ldrb	r3, [r6, #9]
    bedc:	7a32      	ldrb	r2, [r6, #8]
    bede:	79f1      	ldrb	r1, [r6, #7]
    bee0:	481f      	ldr	r0, [pc, #124]	; (bf60 <m2m_wifi_init+0x114>)
    bee2:	47a8      	blx	r5
    bee4:	200d      	movs	r0, #13
    bee6:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    bee8:	4640      	mov	r0, r8
    beea:	47a8      	blx	r5
    beec:	2302      	movs	r3, #2
    beee:	2205      	movs	r2, #5
    bef0:	2113      	movs	r1, #19
    bef2:	481c      	ldr	r0, [pc, #112]	; (bf64 <m2m_wifi_init+0x118>)
    bef4:	47a8      	blx	r5
    bef6:	200d      	movs	r0, #13
    bef8:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    befa:	4640      	mov	r0, r8
    befc:	47a8      	blx	r5
    befe:	4a1a      	ldr	r2, [pc, #104]	; (bf68 <m2m_wifi_init+0x11c>)
    bf00:	491a      	ldr	r1, [pc, #104]	; (bf6c <m2m_wifi_init+0x120>)
    bf02:	481b      	ldr	r0, [pc, #108]	; (bf70 <m2m_wifi_init+0x124>)
    bf04:	47a8      	blx	r5
    bf06:	200d      	movs	r0, #13
    bf08:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    bf0a:	0023      	movs	r3, r4
    bf0c:	330d      	adds	r3, #13
    bf0e:	d1b2      	bne.n	be76 <m2m_wifi_init+0x2a>
		M2M_ERR("Mismatch Firmawre Version\n");
    bf10:	22e8      	movs	r2, #232	; 0xe8
    bf12:	4918      	ldr	r1, [pc, #96]	; (bf74 <m2m_wifi_init+0x128>)
    bf14:	32ff      	adds	r2, #255	; 0xff
    bf16:	4818      	ldr	r0, [pc, #96]	; (bf78 <m2m_wifi_init+0x12c>)
    bf18:	47a8      	blx	r5
    bf1a:	4b18      	ldr	r3, [pc, #96]	; (bf7c <m2m_wifi_init+0x130>)
    bf1c:	4818      	ldr	r0, [pc, #96]	; (bf80 <m2m_wifi_init+0x134>)
    bf1e:	4798      	blx	r3
    bf20:	200d      	movs	r0, #13
    bf22:	47b8      	blx	r7
    bf24:	e7a7      	b.n	be76 <m2m_wifi_init+0x2a>
		ret = M2M_ERR_FAIL;
    bf26:	240c      	movs	r4, #12
    bf28:	4264      	negs	r4, r4
    bf2a:	e7a4      	b.n	be76 <m2m_wifi_init+0x2a>
    bf2c:	200006f0 	.word	0x200006f0
    bf30:	200006f5 	.word	0x200006f5
    bf34:	0000c825 	.word	0x0000c825
    bf38:	0000bb69 	.word	0x0000bb69
    bf3c:	0000c901 	.word	0x0000c901
    bf40:	0000bba1 	.word	0x0000bba1
    bf44:	0000bae5 	.word	0x0000bae5
    bf48:	0000c75d 	.word	0x0000c75d
    bf4c:	000158d0 	.word	0x000158d0
    bf50:	0001372d 	.word	0x0001372d
    bf54:	00015a14 	.word	0x00015a14
    bf58:	00013761 	.word	0x00013761
    bf5c:	00015a3c 	.word	0x00015a3c
    bf60:	00015a58 	.word	0x00015a58
    bf64:	00015a7c 	.word	0x00015a7c
    bf68:	00015a94 	.word	0x00015a94
    bf6c:	00015aa0 	.word	0x00015aa0
    bf70:	00015aac 	.word	0x00015aac
    bf74:	00015914 	.word	0x00015914
    bf78:	000155a0 	.word	0x000155a0
    bf7c:	00013849 	.word	0x00013849
    bf80:	00015ac4 	.word	0x00015ac4

0000bf84 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    bf84:	b510      	push	{r4, lr}
	return hif_handle_isr();
    bf86:	4b01      	ldr	r3, [pc, #4]	; (bf8c <m2m_wifi_handle_events+0x8>)
    bf88:	4798      	blx	r3
}
    bf8a:	bd10      	pop	{r4, pc}
    bf8c:	0000b6b1 	.word	0x0000b6b1

0000bf90 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    bf90:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf92:	4657      	mov	r7, sl
    bf94:	464e      	mov	r6, r9
    bf96:	4645      	mov	r5, r8
    bf98:	46de      	mov	lr, fp
    bf9a:	b5e0      	push	{r5, r6, r7, lr}
    bf9c:	b0a1      	sub	sp, #132	; 0x84
    bf9e:	4699      	mov	r9, r3
    bfa0:	ab2a      	add	r3, sp, #168	; 0xa8
    bfa2:	881b      	ldrh	r3, [r3, #0]
    bfa4:	4682      	mov	sl, r0
    bfa6:	4698      	mov	r8, r3
    bfa8:	ab2b      	add	r3, sp, #172	; 0xac
    bfaa:	000c      	movs	r4, r1
    bfac:	0016      	movs	r6, r2
    bfae:	781f      	ldrb	r7, [r3, #0]
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    bfb0:	2a01      	cmp	r2, #1
    bfb2:	d005      	beq.n	bfc0 <m2m_wifi_connect_sc+0x30>
	{
		if(pvAuthInfo == NULL)
    bfb4:	464b      	mov	r3, r9
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d100      	bne.n	bfbc <m2m_wifi_connect_sc+0x2c>
    bfba:	e0be      	b.n	c13a <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    bfbc:	2a02      	cmp	r2, #2
    bfbe:	d069      	beq.n	c094 <m2m_wifi_connect_sc+0x104>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    bfc0:	1e63      	subs	r3, r4, #1
    bfc2:	2b1f      	cmp	r3, #31
    bfc4:	d900      	bls.n	bfc8 <m2m_wifi_connect_sc+0x38>
    bfc6:	e0a1      	b.n	c10c <m2m_wifi_connect_sc+0x17c>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    bfc8:	4643      	mov	r3, r8
    bfca:	3b01      	subs	r3, #1
    bfcc:	2b0d      	cmp	r3, #13
    bfce:	d903      	bls.n	bfd8 <m2m_wifi_connect_sc+0x48>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    bfd0:	4643      	mov	r3, r8
    bfd2:	2bff      	cmp	r3, #255	; 0xff
    bfd4:	d000      	beq.n	bfd8 <m2m_wifi_connect_sc+0x48>
    bfd6:	e08a      	b.n	c0ee <m2m_wifi_connect_sc+0x15e>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    bfd8:	205a      	movs	r0, #90	; 0x5a
    bfda:	4b5b      	ldr	r3, [pc, #364]	; (c148 <m2m_wifi_connect_sc+0x1b8>)
    bfdc:	0022      	movs	r2, r4
    bfde:	4651      	mov	r1, sl
    bfe0:	4468      	add	r0, sp
    bfe2:	469a      	mov	sl, r3
    bfe4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    bfe6:	2300      	movs	r3, #0
	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    bfe8:	ad05      	add	r5, sp, #20
	strConnect.au8SSID[u8SsidLen]	= 0;
    bfea:	192c      	adds	r4, r5, r4
    bfec:	3446      	adds	r4, #70	; 0x46
    bfee:	469b      	mov	fp, r3
    bff0:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    bff2:	4642      	mov	r2, r8
    bff4:	2344      	movs	r3, #68	; 0x44
    bff6:	52ea      	strh	r2, [r5, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    bff8:	1e7b      	subs	r3, r7, #1
    bffa:	419f      	sbcs	r7, r3
    bffc:	2367      	movs	r3, #103	; 0x67
    bffe:	54ef      	strb	r7, [r5, r3]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    c000:	3b26      	subs	r3, #38	; 0x26
    c002:	54ee      	strb	r6, [r5, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    c004:	2e03      	cmp	r6, #3
    c006:	d017      	beq.n	c038 <m2m_wifi_connect_sc+0xa8>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    c008:	2e02      	cmp	r6, #2
    c00a:	d064      	beq.n	c0d6 <m2m_wifi_connect_sc+0x146>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    c00c:	2e04      	cmp	r6, #4
    c00e:	d03c      	beq.n	c08a <m2m_wifi_connect_sc+0xfa>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    c010:	2e01      	cmp	r6, #1
    c012:	d000      	beq.n	c016 <m2m_wifi_connect_sc+0x86>
    c014:	e073      	b.n	c0fe <m2m_wifi_connect_sc+0x16e>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    c016:	2300      	movs	r3, #0
    c018:	002a      	movs	r2, r5
    c01a:	9302      	str	r3, [sp, #8]
    c01c:	9301      	str	r3, [sp, #4]
    c01e:	9300      	str	r3, [sp, #0]
    c020:	2128      	movs	r1, #40	; 0x28
    c022:	336c      	adds	r3, #108	; 0x6c
    c024:	2001      	movs	r0, #1
    c026:	4c49      	ldr	r4, [pc, #292]	; (c14c <m2m_wifi_connect_sc+0x1bc>)
    c028:	47a0      	blx	r4

ERR1:
	return ret;
}
    c02a:	b021      	add	sp, #132	; 0x84
    c02c:	bc3c      	pop	{r2, r3, r4, r5}
    c02e:	4690      	mov	r8, r2
    c030:	4699      	mov	r9, r3
    c032:	46a2      	mov	sl, r4
    c034:	46ab      	mov	fp, r5
    c036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    c038:	464b      	mov	r3, r9
    c03a:	781b      	ldrb	r3, [r3, #0]
    c03c:	3b01      	subs	r3, #1
    c03e:	b2db      	uxtb	r3, r3
    c040:	702b      	strb	r3, [r5, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    c042:	2b03      	cmp	r3, #3
    c044:	d869      	bhi.n	c11a <m2m_wifi_connect_sc+0x18a>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    c046:	464b      	mov	r3, r9
    c048:	785a      	ldrb	r2, [r3, #1]
    c04a:	1e53      	subs	r3, r2, #1
    c04c:	706b      	strb	r3, [r5, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    c04e:	0011      	movs	r1, r2
    c050:	2310      	movs	r3, #16
    c052:	4399      	bics	r1, r3
    c054:	290b      	cmp	r1, #11
    c056:	d00d      	beq.n	c074 <m2m_wifi_connect_sc+0xe4>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    c058:	493d      	ldr	r1, [pc, #244]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c05a:	4a3e      	ldr	r2, [pc, #248]	; (c154 <m2m_wifi_connect_sc+0x1c4>)
    c05c:	483e      	ldr	r0, [pc, #248]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c05e:	4c3f      	ldr	r4, [pc, #252]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c060:	47a0      	blx	r4
    c062:	7869      	ldrb	r1, [r5, #1]
    c064:	483e      	ldr	r0, [pc, #248]	; (c160 <m2m_wifi_connect_sc+0x1d0>)
    c066:	47a0      	blx	r4
					M2M_ERR("Invalid Key\n");
    c068:	200d      	movs	r0, #13
    c06a:	4b3e      	ldr	r3, [pc, #248]	; (c164 <m2m_wifi_connect_sc+0x1d4>)
    c06c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    c06e:	200c      	movs	r0, #12
    c070:	4240      	negs	r0, r0
					goto ERR1;
    c072:	e7da      	b.n	c02a <m2m_wifi_connect_sc+0x9a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    c074:	464b      	mov	r3, r9
    c076:	2016      	movs	r0, #22
    c078:	1c99      	adds	r1, r3, #2
    c07a:	4468      	add	r0, sp
    c07c:	47d0      	blx	sl
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    c07e:	464b      	mov	r3, r9
    c080:	465a      	mov	r2, fp
    c082:	785b      	ldrb	r3, [r3, #1]
    c084:	18eb      	adds	r3, r5, r3
    c086:	709a      	strb	r2, [r3, #2]
    c088:	e7c5      	b.n	c016 <m2m_wifi_connect_sc+0x86>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    c08a:	223e      	movs	r2, #62	; 0x3e
    c08c:	4649      	mov	r1, r9
    c08e:	0028      	movs	r0, r5
    c090:	47d0      	blx	sl
    c092:	e7c0      	b.n	c016 <m2m_wifi_connect_sc+0x86>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c094:	4648      	mov	r0, r9
    c096:	4b34      	ldr	r3, [pc, #208]	; (c168 <m2m_wifi_connect_sc+0x1d8>)
    c098:	4798      	blx	r3
    c09a:	2840      	cmp	r0, #64	; 0x40
    c09c:	d190      	bne.n	bfc0 <m2m_wifi_connect_sc+0x30>
    c09e:	4648      	mov	r0, r9
    c0a0:	464a      	mov	r2, r9
    c0a2:	3040      	adds	r0, #64	; 0x40
    c0a4:	e009      	b.n	c0ba <m2m_wifi_connect_sc+0x12a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c0a6:	390a      	subs	r1, #10
    c0a8:	2906      	cmp	r1, #6
    c0aa:	d90b      	bls.n	c0c4 <m2m_wifi_connect_sc+0x134>
    c0ac:	3b47      	subs	r3, #71	; 0x47
    c0ae:	2b19      	cmp	r3, #25
    c0b0:	d908      	bls.n	c0c4 <m2m_wifi_connect_sc+0x134>
    c0b2:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    c0b4:	4282      	cmp	r2, r0
    c0b6:	d100      	bne.n	c0ba <m2m_wifi_connect_sc+0x12a>
    c0b8:	e782      	b.n	bfc0 <m2m_wifi_connect_sc+0x30>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c0ba:	7813      	ldrb	r3, [r2, #0]
    c0bc:	0019      	movs	r1, r3
    c0be:	3930      	subs	r1, #48	; 0x30
    c0c0:	2936      	cmp	r1, #54	; 0x36
    c0c2:	d9f0      	bls.n	c0a6 <m2m_wifi_connect_sc+0x116>
					M2M_ERR("Invalid Key\n");
    c0c4:	4a29      	ldr	r2, [pc, #164]	; (c16c <m2m_wifi_connect_sc+0x1dc>)
    c0c6:	4922      	ldr	r1, [pc, #136]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c0c8:	4823      	ldr	r0, [pc, #140]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c0ca:	4b24      	ldr	r3, [pc, #144]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c0cc:	4798      	blx	r3
    c0ce:	4828      	ldr	r0, [pc, #160]	; (c170 <m2m_wifi_connect_sc+0x1e0>)
    c0d0:	4b28      	ldr	r3, [pc, #160]	; (c174 <m2m_wifi_connect_sc+0x1e4>)
    c0d2:	4798      	blx	r3
    c0d4:	e7c8      	b.n	c068 <m2m_wifi_connect_sc+0xd8>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    c0d6:	4b24      	ldr	r3, [pc, #144]	; (c168 <m2m_wifi_connect_sc+0x1d8>)
    c0d8:	4648      	mov	r0, r9
    c0da:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    c0dc:	1e43      	subs	r3, r0, #1
    c0de:	b29b      	uxth	r3, r3
    c0e0:	2b3f      	cmp	r3, #63	; 0x3f
    c0e2:	d823      	bhi.n	c12c <m2m_wifi_connect_sc+0x19c>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    c0e4:	1c42      	adds	r2, r0, #1
    c0e6:	4649      	mov	r1, r9
    c0e8:	0028      	movs	r0, r5
    c0ea:	47d0      	blx	sl
    c0ec:	e793      	b.n	c016 <m2m_wifi_connect_sc+0x86>
			M2M_ERR("CH INVALID\n");
    c0ee:	228d      	movs	r2, #141	; 0x8d
    c0f0:	4917      	ldr	r1, [pc, #92]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c0f2:	0092      	lsls	r2, r2, #2
    c0f4:	4818      	ldr	r0, [pc, #96]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c0f6:	4b19      	ldr	r3, [pc, #100]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c0f8:	4798      	blx	r3
    c0fa:	481f      	ldr	r0, [pc, #124]	; (c178 <m2m_wifi_connect_sc+0x1e8>)
    c0fc:	e7e8      	b.n	c0d0 <m2m_wifi_connect_sc+0x140>
		M2M_ERR("undefined sec type\n");
    c0fe:	4a1f      	ldr	r2, [pc, #124]	; (c17c <m2m_wifi_connect_sc+0x1ec>)
    c100:	4913      	ldr	r1, [pc, #76]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c102:	4815      	ldr	r0, [pc, #84]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c104:	4b15      	ldr	r3, [pc, #84]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c106:	4798      	blx	r3
    c108:	481d      	ldr	r0, [pc, #116]	; (c180 <m2m_wifi_connect_sc+0x1f0>)
    c10a:	e7e1      	b.n	c0d0 <m2m_wifi_connect_sc+0x140>
		M2M_ERR("SSID LEN INVALID\n");
    c10c:	4a1d      	ldr	r2, [pc, #116]	; (c184 <m2m_wifi_connect_sc+0x1f4>)
    c10e:	4910      	ldr	r1, [pc, #64]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c110:	4811      	ldr	r0, [pc, #68]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c112:	4b12      	ldr	r3, [pc, #72]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c114:	4798      	blx	r3
    c116:	481c      	ldr	r0, [pc, #112]	; (c188 <m2m_wifi_connect_sc+0x1f8>)
    c118:	e7da      	b.n	c0d0 <m2m_wifi_connect_sc+0x140>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    c11a:	4a1c      	ldr	r2, [pc, #112]	; (c18c <m2m_wifi_connect_sc+0x1fc>)
    c11c:	490c      	ldr	r1, [pc, #48]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c11e:	4c0f      	ldr	r4, [pc, #60]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c120:	480d      	ldr	r0, [pc, #52]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c122:	47a0      	blx	r4
    c124:	7829      	ldrb	r1, [r5, #0]
    c126:	481a      	ldr	r0, [pc, #104]	; (c190 <m2m_wifi_connect_sc+0x200>)
    c128:	47a0      	blx	r4
    c12a:	e79d      	b.n	c068 <m2m_wifi_connect_sc+0xd8>
			M2M_ERR("Incorrect PSK key length\n");
    c12c:	4a19      	ldr	r2, [pc, #100]	; (c194 <m2m_wifi_connect_sc+0x204>)
    c12e:	4908      	ldr	r1, [pc, #32]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c130:	4809      	ldr	r0, [pc, #36]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c132:	4b0a      	ldr	r3, [pc, #40]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c134:	4798      	blx	r3
    c136:	4818      	ldr	r0, [pc, #96]	; (c198 <m2m_wifi_connect_sc+0x208>)
    c138:	e7ca      	b.n	c0d0 <m2m_wifi_connect_sc+0x140>
			M2M_ERR("Key is not valid\n");
    c13a:	4a18      	ldr	r2, [pc, #96]	; (c19c <m2m_wifi_connect_sc+0x20c>)
    c13c:	4904      	ldr	r1, [pc, #16]	; (c150 <m2m_wifi_connect_sc+0x1c0>)
    c13e:	4806      	ldr	r0, [pc, #24]	; (c158 <m2m_wifi_connect_sc+0x1c8>)
    c140:	4b06      	ldr	r3, [pc, #24]	; (c15c <m2m_wifi_connect_sc+0x1cc>)
    c142:	4798      	blx	r3
    c144:	4816      	ldr	r0, [pc, #88]	; (c1a0 <m2m_wifi_connect_sc+0x210>)
    c146:	e7c3      	b.n	c0d0 <m2m_wifi_connect_sc+0x140>
    c148:	0000b369 	.word	0x0000b369
    c14c:	0000b461 	.word	0x0000b461
    c150:	00015924 	.word	0x00015924
    c154:	00000252 	.word	0x00000252
    c158:	000155a0 	.word	0x000155a0
    c15c:	0001372d 	.word	0x0001372d
    c160:	000159c8 	.word	0x000159c8
    c164:	00013761 	.word	0x00013761
    c168:	0000b391 	.word	0x0000b391
    c16c:	00000221 	.word	0x00000221
    c170:	00015980 	.word	0x00015980
    c174:	00013849 	.word	0x00013849
    c178:	000159a0 	.word	0x000159a0
    c17c:	00000271 	.word	0x00000271
    c180:	00015a00 	.word	0x00015a00
    c184:	0000022b 	.word	0x0000022b
    c188:	0001598c 	.word	0x0001598c
    c18c:	0000024b 	.word	0x0000024b
    c190:	000159ac 	.word	0x000159ac
    c194:	00000261 	.word	0x00000261
    c198:	000159e4 	.word	0x000159e4
    c19c:	00000215 	.word	0x00000215
    c1a0:	0001596c 	.word	0x0001596c

0000c1a4 <m2m_wifi_connect>:
{
    c1a4:	b530      	push	{r4, r5, lr}
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c1a6:	2500      	movs	r5, #0
{
    c1a8:	b083      	sub	sp, #12
    c1aa:	ac06      	add	r4, sp, #24
    c1ac:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c1ae:	9501      	str	r5, [sp, #4]
    c1b0:	9400      	str	r4, [sp, #0]
    c1b2:	4c02      	ldr	r4, [pc, #8]	; (c1bc <m2m_wifi_connect+0x18>)
    c1b4:	47a0      	blx	r4
}
    c1b6:	b003      	add	sp, #12
    c1b8:	bd30      	pop	{r4, r5, pc}
    c1ba:	46c0      	nop			; (mov r8, r8)
    c1bc:	0000bf91 	.word	0x0000bf91

0000c1c0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    c1c0:	2000      	movs	r0, #0
    c1c2:	4770      	bx	lr

0000c1c4 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    c1c6:	2480      	movs	r4, #128	; 0x80
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
		if(val32 != 0) {		
			uint32 reg = 0;
    c1c8:	2500      	movs	r5, #0
	val32 |= rHAVE_RESERVED1_BIT;
    c1ca:	0064      	lsls	r4, r4, #1
    c1cc:	4f09      	ldr	r7, [pc, #36]	; (c1f4 <chip_apply_conf+0x30>)
    c1ce:	4e0a      	ldr	r6, [pc, #40]	; (c1f8 <chip_apply_conf+0x34>)
{
    c1d0:	b083      	sub	sp, #12
	val32 |= rHAVE_RESERVED1_BIT;
    c1d2:	4304      	orrs	r4, r0
		nm_write_reg(rNMI_GP_REG_1, val32);
    c1d4:	20a5      	movs	r0, #165	; 0xa5
    c1d6:	0021      	movs	r1, r4
    c1d8:	0140      	lsls	r0, r0, #5
    c1da:	47b8      	blx	r7
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c1dc:	20a5      	movs	r0, #165	; 0xa5
    c1de:	a901      	add	r1, sp, #4
    c1e0:	0140      	lsls	r0, r0, #5
			uint32 reg = 0;
    c1e2:	9501      	str	r5, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c1e4:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    c1e6:	2800      	cmp	r0, #0
    c1e8:	d1f4      	bne.n	c1d4 <chip_apply_conf+0x10>
				if(reg == val32)
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	429c      	cmp	r4, r3
    c1ee:	d1f1      	bne.n	c1d4 <chip_apply_conf+0x10>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    c1f0:	b003      	add	sp, #12
    c1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1f4:	0000c689 	.word	0x0000c689
    c1f8:	0000c67d 	.word	0x0000c67d

0000c1fc <enable_interrupts>:
	}
}

sint8 enable_interrupts(void)
{
	uint32 reg = 0;
    c1fc:	2300      	movs	r3, #0
{
    c1fe:	b530      	push	{r4, r5, lr}
    c200:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c202:	a901      	add	r1, sp, #4
    c204:	4810      	ldr	r0, [pc, #64]	; (c248 <enable_interrupts+0x4c>)
    c206:	4c11      	ldr	r4, [pc, #68]	; (c24c <enable_interrupts+0x50>)
	uint32 reg = 0;
    c208:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c20a:	47a0      	blx	r4
	if (M2M_SUCCESS != ret) goto ERR1;
    c20c:	2800      	cmp	r0, #0
    c20e:	d001      	beq.n	c214 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    c210:	b003      	add	sp, #12
    c212:	bd30      	pop	{r4, r5, pc}
	reg |= ((uint32) 1 << 8);
    c214:	2180      	movs	r1, #128	; 0x80
    c216:	9b01      	ldr	r3, [sp, #4]
    c218:	0049      	lsls	r1, r1, #1
    c21a:	4319      	orrs	r1, r3
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c21c:	480a      	ldr	r0, [pc, #40]	; (c248 <enable_interrupts+0x4c>)
    c21e:	4d0c      	ldr	r5, [pc, #48]	; (c250 <enable_interrupts+0x54>)
	reg |= ((uint32) 1 << 8);
    c220:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c222:	47a8      	blx	r5
	if (M2M_SUCCESS != ret) goto ERR1;
    c224:	2800      	cmp	r0, #0
    c226:	d1f3      	bne.n	c210 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    c228:	20d0      	movs	r0, #208	; 0xd0
    c22a:	a901      	add	r1, sp, #4
    c22c:	0140      	lsls	r0, r0, #5
    c22e:	47a0      	blx	r4
	if (M2M_SUCCESS != ret) goto ERR1;
    c230:	2800      	cmp	r0, #0
    c232:	d1ed      	bne.n	c210 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    c234:	2180      	movs	r1, #128	; 0x80
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c236:	20d0      	movs	r0, #208	; 0xd0
	reg |= ((uint32) 1 << 16);
    c238:	9b01      	ldr	r3, [sp, #4]
    c23a:	0249      	lsls	r1, r1, #9
    c23c:	4319      	orrs	r1, r3
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c23e:	0140      	lsls	r0, r0, #5
	reg |= ((uint32) 1 << 16);
    c240:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c242:	47a8      	blx	r5
    c244:	e7e4      	b.n	c210 <enable_interrupts+0x14>
    c246:	46c0      	nop			; (mov r8, r8)
    c248:	00001408 	.word	0x00001408
    c24c:	0000c67d 	.word	0x0000c67d
    c250:	0000c689 	.word	0x0000c689

0000c254 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    c254:	b570      	push	{r4, r5, r6, lr}
	static uint32 chipid = 0;

	if (chipid == 0) {
    c256:	4d26      	ldr	r5, [pc, #152]	; (c2f0 <nmi_get_chipid+0x9c>)
{
    c258:	b082      	sub	sp, #8
	if (chipid == 0) {
    c25a:	682c      	ldr	r4, [r5, #0]
    c25c:	2c00      	cmp	r4, #0
    c25e:	d002      	beq.n	c266 <nmi_get_chipid+0x12>
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
}
    c260:	0020      	movs	r0, r4
    c262:	b002      	add	sp, #8
    c264:	bd70      	pop	{r4, r5, r6, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    c266:	2080      	movs	r0, #128	; 0x80
    c268:	0029      	movs	r1, r5
    c26a:	0140      	lsls	r0, r0, #5
    c26c:	4e21      	ldr	r6, [pc, #132]	; (c2f4 <nmi_get_chipid+0xa0>)
    c26e:	47b0      	blx	r6
    c270:	2800      	cmp	r0, #0
    c272:	d002      	beq.n	c27a <nmi_get_chipid+0x26>
			chipid = 0;
    c274:	2300      	movs	r3, #0
    c276:	602b      	str	r3, [r5, #0]
    c278:	e7f2      	b.n	c260 <nmi_get_chipid+0xc>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    c27a:	a901      	add	r1, sp, #4
    c27c:	481e      	ldr	r0, [pc, #120]	; (c2f8 <nmi_get_chipid+0xa4>)
    c27e:	47b0      	blx	r6
    c280:	2800      	cmp	r0, #0
    c282:	d1f7      	bne.n	c274 <nmi_get_chipid+0x20>
		if (chipid == 0x1002a0)  {
    c284:	682b      	ldr	r3, [r5, #0]
    c286:	4a1d      	ldr	r2, [pc, #116]	; (c2fc <nmi_get_chipid+0xa8>)
    c288:	4293      	cmp	r3, r2
    c28a:	d00c      	beq.n	c2a6 <nmi_get_chipid+0x52>
		} else if(chipid == 0x1002b0) {
    c28c:	4a1c      	ldr	r2, [pc, #112]	; (c300 <nmi_get_chipid+0xac>)
    c28e:	4293      	cmp	r3, r2
    c290:	d012      	beq.n	c2b8 <nmi_get_chipid+0x64>
		}else if(chipid == 0x1000F0) { 
    c292:	4a1c      	ldr	r2, [pc, #112]	; (c304 <nmi_get_chipid+0xb0>)
    c294:	4293      	cmp	r3, r2
    c296:	d01a      	beq.n	c2ce <nmi_get_chipid+0x7a>
    c298:	4c1b      	ldr	r4, [pc, #108]	; (c308 <nmi_get_chipid+0xb4>)
    c29a:	4023      	ands	r3, r4
    c29c:	24a0      	movs	r4, #160	; 0xa0
    c29e:	02e4      	lsls	r4, r4, #11
    c2a0:	431c      	orrs	r4, r3
		chipid |= 0x050000;
    c2a2:	602c      	str	r4, [r5, #0]
	return chipid;
    c2a4:	e7dc      	b.n	c260 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    c2a6:	9b01      	ldr	r3, [sp, #4]
    c2a8:	1e5c      	subs	r4, r3, #1
    c2aa:	1e63      	subs	r3, r4, #1
    c2ac:	419c      	sbcs	r4, r3
    c2ae:	4b17      	ldr	r3, [pc, #92]	; (c30c <nmi_get_chipid+0xb8>)
    c2b0:	469c      	mov	ip, r3
    c2b2:	4464      	add	r4, ip
		chipid |= 0x050000;
    c2b4:	602c      	str	r4, [r5, #0]
    c2b6:	e7d3      	b.n	c260 <nmi_get_chipid+0xc>
			if(rfrevid == 3) { /* 1002B0 */
    c2b8:	9c01      	ldr	r4, [sp, #4]
    c2ba:	2c03      	cmp	r4, #3
    c2bc:	d015      	beq.n	c2ea <nmi_get_chipid+0x96>
			} else if(rfrevid == 4) { /* 1002B1 */
    c2be:	3c04      	subs	r4, #4
    c2c0:	1e63      	subs	r3, r4, #1
    c2c2:	419c      	sbcs	r4, r3
    c2c4:	4b12      	ldr	r3, [pc, #72]	; (c310 <nmi_get_chipid+0xbc>)
    c2c6:	469c      	mov	ip, r3
    c2c8:	4464      	add	r4, ip
		chipid |= 0x050000;
    c2ca:	602c      	str	r4, [r5, #0]
    c2cc:	e7c8      	b.n	c260 <nmi_get_chipid+0xc>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    c2ce:	20ec      	movs	r0, #236	; 0xec
    c2d0:	0029      	movs	r1, r5
    c2d2:	0380      	lsls	r0, r0, #14
    c2d4:	47b0      	blx	r6
    c2d6:	2800      	cmp	r0, #0
    c2d8:	d1cc      	bne.n	c274 <nmi_get_chipid+0x20>
    c2da:	24a0      	movs	r4, #160	; 0xa0
    c2dc:	682a      	ldr	r2, [r5, #0]
    c2de:	4b0a      	ldr	r3, [pc, #40]	; (c308 <nmi_get_chipid+0xb4>)
    c2e0:	02e4      	lsls	r4, r4, #11
    c2e2:	4013      	ands	r3, r2
    c2e4:	431c      	orrs	r4, r3
		chipid |= 0x050000;
    c2e6:	602c      	str	r4, [r5, #0]
    c2e8:	e7ba      	b.n	c260 <nmi_get_chipid+0xc>
    c2ea:	4c0a      	ldr	r4, [pc, #40]	; (c314 <nmi_get_chipid+0xc0>)
    c2ec:	602c      	str	r4, [r5, #0]
    c2ee:	e7b7      	b.n	c260 <nmi_get_chipid+0xc>
    c2f0:	200006f8 	.word	0x200006f8
    c2f4:	0000c67d 	.word	0x0000c67d
    c2f8:	000013f4 	.word	0x000013f4
    c2fc:	001002a0 	.word	0x001002a0
    c300:	001002b0 	.word	0x001002b0
    c304:	001000f0 	.word	0x001000f0
    c308:	fff0ffff 	.word	0xfff0ffff
    c30c:	001502a0 	.word	0x001502a0
    c310:	001502b1 	.word	0x001502b1
    c314:	001502b0 	.word	0x001502b0

0000c318 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    c318:	b530      	push	{r4, r5, lr}
    c31a:	4c16      	ldr	r4, [pc, #88]	; (c374 <chip_sleep+0x5c>)
    c31c:	b083      	sub	sp, #12
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    c31e:	2501      	movs	r5, #1
    c320:	e002      	b.n	c328 <chip_sleep+0x10>
    c322:	9b01      	ldr	r3, [sp, #4]
    c324:	422b      	tst	r3, r5
    c326:	d006      	beq.n	c336 <chip_sleep+0x1e>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c328:	a901      	add	r1, sp, #4
    c32a:	2010      	movs	r0, #16
    c32c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    c32e:	2800      	cmp	r0, #0
    c330:	d0f7      	beq.n	c322 <chip_sleep+0xa>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    c332:	b003      	add	sp, #12
    c334:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c336:	a901      	add	r1, sp, #4
    c338:	3001      	adds	r0, #1
    c33a:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;
    c33c:	2800      	cmp	r0, #0
    c33e:	d1f8      	bne.n	c332 <chip_sleep+0x1a>
	if(reg & NBIT1)
    c340:	2302      	movs	r3, #2
    c342:	9901      	ldr	r1, [sp, #4]
    c344:	420b      	tst	r3, r1
    c346:	d006      	beq.n	c356 <chip_sleep+0x3e>
		reg &=~NBIT1;
    c348:	4399      	bics	r1, r3
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c34a:	2001      	movs	r0, #1
    c34c:	4b0a      	ldr	r3, [pc, #40]	; (c378 <chip_sleep+0x60>)
		reg &=~NBIT1;
    c34e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c350:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    c352:	2800      	cmp	r0, #0
    c354:	d1ed      	bne.n	c332 <chip_sleep+0x1a>
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c356:	a901      	add	r1, sp, #4
    c358:	200b      	movs	r0, #11
    c35a:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;
    c35c:	2800      	cmp	r0, #0
    c35e:	d1e8      	bne.n	c332 <chip_sleep+0x1a>
	if(reg & NBIT0)
    c360:	2301      	movs	r3, #1
    c362:	9901      	ldr	r1, [sp, #4]
    c364:	420b      	tst	r3, r1
    c366:	d0e4      	beq.n	c332 <chip_sleep+0x1a>
		reg &= ~NBIT0;
    c368:	4399      	bics	r1, r3
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c36a:	200b      	movs	r0, #11
    c36c:	4b02      	ldr	r3, [pc, #8]	; (c378 <chip_sleep+0x60>)
		reg &= ~NBIT0;
    c36e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c370:	4798      	blx	r3
    c372:	e7de      	b.n	c332 <chip_sleep+0x1a>
    c374:	0000c67d 	.word	0x0000c67d
    c378:	0000c689 	.word	0x0000c689

0000c37c <chip_wake>:
sint8 chip_wake(void)
{
    c37c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c37e:	46c6      	mov	lr, r8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c380:	2300      	movs	r3, #0
{
    c382:	b500      	push	{lr}
    c384:	b082      	sub	sp, #8

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c386:	4669      	mov	r1, sp
    c388:	200b      	movs	r0, #11
    c38a:	4d2b      	ldr	r5, [pc, #172]	; (c438 <chip_wake+0xbc>)
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c38c:	9300      	str	r3, [sp, #0]
    c38e:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c390:	47a8      	blx	r5
    c392:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c394:	d12b      	bne.n	c3ee <chip_wake+0x72>
	
	if(!(reg & NBIT0))
    c396:	2301      	movs	r3, #1
    c398:	9900      	ldr	r1, [sp, #0]
    c39a:	420b      	tst	r3, r1
    c39c:	d02c      	beq.n	c3f8 <chip_wake+0x7c>
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c39e:	4669      	mov	r1, sp
    c3a0:	2001      	movs	r0, #1
    c3a2:	47a8      	blx	r5
    c3a4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c3a6:	d122      	bne.n	c3ee <chip_wake+0x72>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    c3a8:	2302      	movs	r3, #2
    c3aa:	9900      	ldr	r1, [sp, #0]
    c3ac:	420b      	tst	r3, r1
    c3ae:	d02a      	beq.n	c406 <chip_wake+0x8a>
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    c3b0:	4b22      	ldr	r3, [pc, #136]	; (c43c <chip_wake+0xc0>)
{
    c3b2:	2605      	movs	r6, #5
		if(clk_status_reg & NBIT2) {
    c3b4:	2704      	movs	r7, #4
		nm_bsp_sleep(2);
    c3b6:	4698      	mov	r8, r3
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c3b8:	a901      	add	r1, sp, #4
    c3ba:	200f      	movs	r0, #15
    c3bc:	47a8      	blx	r5
    c3be:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    c3c0:	d128      	bne.n	c414 <chip_wake+0x98>
		if(clk_status_reg & NBIT2) {
    c3c2:	9b01      	ldr	r3, [sp, #4]
    c3c4:	423b      	tst	r3, r7
    c3c6:	d133      	bne.n	c430 <chip_wake+0xb4>
		nm_bsp_sleep(2);
    c3c8:	2002      	movs	r0, #2
    c3ca:	3e01      	subs	r6, #1
    c3cc:	47c0      	blx	r8
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    c3ce:	2e00      	cmp	r6, #0
    c3d0:	d1f2      	bne.n	c3b8 <chip_wake+0x3c>
		{
			M2M_ERR("Failed to wakup the chip\n");
    c3d2:	22af      	movs	r2, #175	; 0xaf
    c3d4:	491a      	ldr	r1, [pc, #104]	; (c440 <chip_wake+0xc4>)
    c3d6:	0052      	lsls	r2, r2, #1
    c3d8:	4b1a      	ldr	r3, [pc, #104]	; (c444 <chip_wake+0xc8>)
    c3da:	481b      	ldr	r0, [pc, #108]	; (c448 <chip_wake+0xcc>)
    c3dc:	4798      	blx	r3
    c3de:	4b1b      	ldr	r3, [pc, #108]	; (c44c <chip_wake+0xd0>)
    c3e0:	481b      	ldr	r0, [pc, #108]	; (c450 <chip_wake+0xd4>)
    c3e2:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c3e4:	2404      	movs	r4, #4
			M2M_ERR("Failed to wakup the chip\n");
    c3e6:	200d      	movs	r0, #13
    c3e8:	4b1a      	ldr	r3, [pc, #104]	; (c454 <chip_wake+0xd8>)
    c3ea:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c3ec:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    c3ee:	0020      	movs	r0, r4
    c3f0:	b002      	add	sp, #8
    c3f2:	bc04      	pop	{r2}
    c3f4:	4690      	mov	r8, r2
    c3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    c3f8:	4319      	orrs	r1, r3
    c3fa:	200b      	movs	r0, #11
    c3fc:	4b16      	ldr	r3, [pc, #88]	; (c458 <chip_wake+0xdc>)
    c3fe:	4798      	blx	r3
    c400:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c402:	d0cc      	beq.n	c39e <chip_wake+0x22>
    c404:	e7f3      	b.n	c3ee <chip_wake+0x72>
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    c406:	4319      	orrs	r1, r3
    c408:	2001      	movs	r0, #1
    c40a:	4b13      	ldr	r3, [pc, #76]	; (c458 <chip_wake+0xdc>)
    c40c:	4798      	blx	r3
    c40e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    c410:	d0ce      	beq.n	c3b0 <chip_wake+0x34>
    c412:	e7ec      	b.n	c3ee <chip_wake+0x72>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    c414:	22aa      	movs	r2, #170	; 0xaa
    c416:	4d0b      	ldr	r5, [pc, #44]	; (c444 <chip_wake+0xc8>)
    c418:	0052      	lsls	r2, r2, #1
    c41a:	4909      	ldr	r1, [pc, #36]	; (c440 <chip_wake+0xc4>)
    c41c:	480a      	ldr	r0, [pc, #40]	; (c448 <chip_wake+0xcc>)
    c41e:	47a8      	blx	r5
    c420:	9a01      	ldr	r2, [sp, #4]
    c422:	0021      	movs	r1, r4
    c424:	480d      	ldr	r0, [pc, #52]	; (c45c <chip_wake+0xe0>)
    c426:	47a8      	blx	r5
    c428:	4b0a      	ldr	r3, [pc, #40]	; (c454 <chip_wake+0xd8>)
    c42a:	200d      	movs	r0, #13
    c42c:	4798      	blx	r3
			goto _WAKE_EXIT;
    c42e:	e7de      	b.n	c3ee <chip_wake+0x72>
	nm_bus_reset();
    c430:	4b0b      	ldr	r3, [pc, #44]	; (c460 <chip_wake+0xe4>)
    c432:	4798      	blx	r3
    c434:	e7db      	b.n	c3ee <chip_wake+0x72>
    c436:	46c0      	nop			; (mov r8, r8)
    c438:	0000c67d 	.word	0x0000c67d
    c43c:	0000b025 	.word	0x0000b025
    c440:	00015ae0 	.word	0x00015ae0
    c444:	0001372d 	.word	0x0001372d
    c448:	000155a0 	.word	0x000155a0
    c44c:	00013849 	.word	0x00013849
    c450:	00015b28 	.word	0x00015b28
    c454:	00013761 	.word	0x00013761
    c458:	0000c689 	.word	0x0000c689
    c45c:	00015b10 	.word	0x00015b10
    c460:	0000c665 	.word	0x0000c665

0000c464 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c466:	0007      	movs	r7, r0
    c468:	4c29      	ldr	r4, [pc, #164]	; (c510 <wait_for_bootrom+0xac>)
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c46a:	4d2a      	ldr	r5, [pc, #168]	; (c514 <wait_for_bootrom+0xb0>)
    c46c:	e001      	b.n	c472 <wait_for_bootrom+0xe>
    c46e:	2001      	movs	r0, #1
    c470:	47a8      	blx	r5
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c472:	4829      	ldr	r0, [pc, #164]	; (c518 <wait_for_bootrom+0xb4>)
    c474:	47a0      	blx	r4
		if (reg & 0x80000000) {
    c476:	2800      	cmp	r0, #0
    c478:	daf9      	bge.n	c46e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    c47a:	4828      	ldr	r0, [pc, #160]	; (c51c <wait_for_bootrom+0xb8>)
    c47c:	47a0      	blx	r4
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    c47e:	07c3      	lsls	r3, r0, #31
    c480:	d407      	bmi.n	c492 <wait_for_bootrom+0x2e>
    c482:	4e24      	ldr	r6, [pc, #144]	; (c514 <wait_for_bootrom+0xb0>)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    c484:	4d26      	ldr	r5, [pc, #152]	; (c520 <wait_for_bootrom+0xbc>)
		{
			nm_bsp_sleep(1);
    c486:	2001      	movs	r0, #1
    c488:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    c48a:	4826      	ldr	r0, [pc, #152]	; (c524 <wait_for_bootrom+0xc0>)
    c48c:	47a0      	blx	r4
		while(reg != M2M_FINISH_BOOT_ROM)
    c48e:	42a8      	cmp	r0, r5
    c490:	d1f9      	bne.n	c486 <wait_for_bootrom+0x22>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    c492:	2f02      	cmp	r7, #2
    c494:	d028      	beq.n	c4e8 <wait_for_bootrom+0x84>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    c496:	2f03      	cmp	r7, #3
    c498:	d030      	beq.n	c4fc <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c49a:	4923      	ldr	r1, [pc, #140]	; (c528 <wait_for_bootrom+0xc4>)
    c49c:	4823      	ldr	r0, [pc, #140]	; (c52c <wait_for_bootrom+0xc8>)
    c49e:	4c24      	ldr	r4, [pc, #144]	; (c530 <wait_for_bootrom+0xcc>)
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    c4a0:	2f04      	cmp	r7, #4
    c4a2:	d01e      	beq.n	c4e2 <wait_for_bootrom+0x7e>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c4a4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c4a6:	2500      	movs	r5, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    c4a8:	4b22      	ldr	r3, [pc, #136]	; (c534 <wait_for_bootrom+0xd0>)
    c4aa:	4798      	blx	r3
    c4ac:	4b22      	ldr	r3, [pc, #136]	; (c538 <wait_for_bootrom+0xd4>)
    c4ae:	0500      	lsls	r0, r0, #20
    c4b0:	0d00      	lsrs	r0, r0, #20
    c4b2:	4298      	cmp	r0, r3
    c4b4:	d810      	bhi.n	c4d8 <wait_for_bootrom+0x74>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    c4b6:	0028      	movs	r0, r5
    c4b8:	4b20      	ldr	r3, [pc, #128]	; (c53c <wait_for_bootrom+0xd8>)
    c4ba:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    c4bc:	4d20      	ldr	r5, [pc, #128]	; (c540 <wait_for_bootrom+0xdc>)
    c4be:	4821      	ldr	r0, [pc, #132]	; (c544 <wait_for_bootrom+0xe0>)
    c4c0:	47a8      	blx	r5
    c4c2:	4919      	ldr	r1, [pc, #100]	; (c528 <wait_for_bootrom+0xc4>)
    c4c4:	4820      	ldr	r0, [pc, #128]	; (c548 <wait_for_bootrom+0xe4>)
    c4c6:	47a8      	blx	r5
    c4c8:	4b20      	ldr	r3, [pc, #128]	; (c54c <wait_for_bootrom+0xe8>)
    c4ca:	200d      	movs	r0, #13
    c4cc:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    c4ce:	4920      	ldr	r1, [pc, #128]	; (c550 <wait_for_bootrom+0xec>)
    c4d0:	4814      	ldr	r0, [pc, #80]	; (c524 <wait_for_bootrom+0xc0>)
    c4d2:	47a0      	blx	r4
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    c4d4:	2000      	movs	r0, #0
    c4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    c4d8:	2002      	movs	r0, #2
    c4da:	4b18      	ldr	r3, [pc, #96]	; (c53c <wait_for_bootrom+0xd8>)
    c4dc:	4328      	orrs	r0, r5
    c4de:	4798      	blx	r3
    c4e0:	e7ec      	b.n	c4bc <wait_for_bootrom+0x58>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c4e2:	47a0      	blx	r4
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    c4e4:	2580      	movs	r5, #128	; 0x80
    c4e6:	e7df      	b.n	c4a8 <wait_for_bootrom+0x44>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c4e8:	491a      	ldr	r1, [pc, #104]	; (c554 <wait_for_bootrom+0xf0>)
    c4ea:	4c11      	ldr	r4, [pc, #68]	; (c530 <wait_for_bootrom+0xcc>)
    c4ec:	481a      	ldr	r0, [pc, #104]	; (c558 <wait_for_bootrom+0xf4>)
    c4ee:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    c4f0:	2180      	movs	r1, #128	; 0x80
    c4f2:	480e      	ldr	r0, [pc, #56]	; (c52c <wait_for_bootrom+0xc8>)
    c4f4:	0349      	lsls	r1, r1, #13
    c4f6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c4f8:	2500      	movs	r5, #0
    c4fa:	e7d5      	b.n	c4a8 <wait_for_bootrom+0x44>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c4fc:	4915      	ldr	r1, [pc, #84]	; (c554 <wait_for_bootrom+0xf0>)
    c4fe:	4c0c      	ldr	r4, [pc, #48]	; (c530 <wait_for_bootrom+0xcc>)
    c500:	4815      	ldr	r0, [pc, #84]	; (c558 <wait_for_bootrom+0xf4>)
    c502:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    c504:	2100      	movs	r1, #0
    c506:	4809      	ldr	r0, [pc, #36]	; (c52c <wait_for_bootrom+0xc8>)
    c508:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c50a:	2500      	movs	r5, #0
    c50c:	e7cc      	b.n	c4a8 <wait_for_bootrom+0x44>
    c50e:	46c0      	nop			; (mov r8, r8)
    c510:	0000c671 	.word	0x0000c671
    c514:	0000b025 	.word	0x0000b025
    c518:	00001014 	.word	0x00001014
    c51c:	000207bc 	.word	0x000207bc
    c520:	10add09e 	.word	0x10add09e
    c524:	000c000c 	.word	0x000c000c
    c528:	13521352 	.word	0x13521352
    c52c:	0000108c 	.word	0x0000108c
    c530:	0000c689 	.word	0x0000c689
    c534:	0000c255 	.word	0x0000c255
    c538:	0000039f 	.word	0x0000039f
    c53c:	0000c1c5 	.word	0x0000c1c5
    c540:	0001372d 	.word	0x0001372d
    c544:	000158d0 	.word	0x000158d0
    c548:	00015b44 	.word	0x00015b44
    c54c:	00013761 	.word	0x00013761
    c550:	ef522f61 	.word	0xef522f61
    c554:	3c1cd57d 	.word	0x3c1cd57d
    c558:	000207ac 	.word	0x000207ac

0000c55c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    c55c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    c55e:	4b16      	ldr	r3, [pc, #88]	; (c5b8 <wait_for_firmware_start+0x5c>)
{
    c560:	b082      	sub	sp, #8
	volatile uint32 regAddress = NMI_STATE_REG;
    c562:	9300      	str	r3, [sp, #0]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    c564:	4b15      	ldr	r3, [pc, #84]	; (c5bc <wait_for_firmware_start+0x60>)
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    c566:	3802      	subs	r0, #2
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    c568:	9301      	str	r3, [sp, #4]
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    c56a:	2801      	cmp	r0, #1
    c56c:	d917      	bls.n	c59e <wait_for_firmware_start+0x42>
{
    c56e:	2401      	movs	r4, #1
    c570:	2000      	movs	r0, #0
    c572:	4264      	negs	r4, r4
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c574:	4e12      	ldr	r6, [pc, #72]	; (c5c0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    c576:	4d13      	ldr	r5, [pc, #76]	; (c5c4 <wait_for_firmware_start+0x68>)
    c578:	e006      	b.n	c588 <wait_for_firmware_start+0x2c>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c57a:	2002      	movs	r0, #2
    c57c:	47b0      	blx	r6
    c57e:	3c01      	subs	r4, #1
		reg = nm_read_reg(regAddress);
    c580:	9800      	ldr	r0, [sp, #0]
    c582:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
    c584:	2c00      	cmp	r4, #0
    c586:	d00f      	beq.n	c5a8 <wait_for_firmware_start+0x4c>
	while (checkValue != reg)
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	4298      	cmp	r0, r3
    c58c:	d1f5      	bne.n	c57a <wait_for_firmware_start+0x1e>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    c58e:	9a01      	ldr	r2, [sp, #4]
    c590:	4b0a      	ldr	r3, [pc, #40]	; (c5bc <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    c592:	2400      	movs	r4, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    c594:	429a      	cmp	r2, r3
    c596:	d00a      	beq.n	c5ae <wait_for_firmware_start+0x52>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    c598:	0020      	movs	r0, r4
    c59a:	b002      	add	sp, #8
    c59c:	bd70      	pop	{r4, r5, r6, pc}
		regAddress = NMI_REV_REG;
    c59e:	4b0a      	ldr	r3, [pc, #40]	; (c5c8 <wait_for_firmware_start+0x6c>)
    c5a0:	9300      	str	r3, [sp, #0]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    c5a2:	4b0a      	ldr	r3, [pc, #40]	; (c5cc <wait_for_firmware_start+0x70>)
    c5a4:	9301      	str	r3, [sp, #4]
    c5a6:	e7e2      	b.n	c56e <wait_for_firmware_start+0x12>
			ret = M2M_ERR_INIT;
    c5a8:	2405      	movs	r4, #5
    c5aa:	4264      	negs	r4, r4
    c5ac:	e7f4      	b.n	c598 <wait_for_firmware_start+0x3c>
		nm_write_reg(NMI_STATE_REG, 0);
    c5ae:	2100      	movs	r1, #0
    c5b0:	4b07      	ldr	r3, [pc, #28]	; (c5d0 <wait_for_firmware_start+0x74>)
    c5b2:	4801      	ldr	r0, [pc, #4]	; (c5b8 <wait_for_firmware_start+0x5c>)
    c5b4:	4798      	blx	r3
    c5b6:	e7ef      	b.n	c598 <wait_for_firmware_start+0x3c>
    c5b8:	0000108c 	.word	0x0000108c
    c5bc:	02532636 	.word	0x02532636
    c5c0:	0000b025 	.word	0x0000b025
    c5c4:	0000c671 	.word	0x0000c671
    c5c8:	000207ac 	.word	0x000207ac
    c5cc:	d75dc1c3 	.word	0xd75dc1c3
    c5d0:	0000c689 	.word	0x0000c689

0000c5d4 <chip_deinit>:

sint8 chip_deinit(void)
{
	uint32 reg = 0;
    c5d4:	2300      	movs	r3, #0
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    c5d6:	20a0      	movs	r0, #160	; 0xa0
{
    c5d8:	b510      	push	{r4, lr}
    c5da:	b082      	sub	sp, #8
	uint32 reg = 0;
    c5dc:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    c5de:	a901      	add	r1, sp, #4
    c5e0:	0140      	lsls	r0, r0, #5
    c5e2:	4b0f      	ldr	r3, [pc, #60]	; (c620 <chip_deinit+0x4c>)
    c5e4:	4798      	blx	r3
    c5e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c5e8:	d118      	bne.n	c61c <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c5ea:	20a0      	movs	r0, #160	; 0xa0
	reg &= ~(1 << 10);
    c5ec:	9b01      	ldr	r3, [sp, #4]
    c5ee:	490d      	ldr	r1, [pc, #52]	; (c624 <chip_deinit+0x50>)
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c5f0:	0140      	lsls	r0, r0, #5
	reg &= ~(1 << 10);
    c5f2:	4019      	ands	r1, r3
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c5f4:	4b0c      	ldr	r3, [pc, #48]	; (c628 <chip_deinit+0x54>)
	reg &= ~(1 << 10);
    c5f6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c5f8:	4798      	blx	r3
    c5fa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c5fc:	d102      	bne.n	c604 <chip_deinit+0x30>
		goto ERR1;
	}

ERR1:
	return ret;
}
    c5fe:	0020      	movs	r0, r4
    c600:	b002      	add	sp, #8
    c602:	bd10      	pop	{r4, pc}
		M2M_ERR("failed to de-initialize\n");
    c604:	4a09      	ldr	r2, [pc, #36]	; (c62c <chip_deinit+0x58>)
    c606:	490a      	ldr	r1, [pc, #40]	; (c630 <chip_deinit+0x5c>)
    c608:	4b0a      	ldr	r3, [pc, #40]	; (c634 <chip_deinit+0x60>)
    c60a:	480b      	ldr	r0, [pc, #44]	; (c638 <chip_deinit+0x64>)
    c60c:	4798      	blx	r3
    c60e:	4b0b      	ldr	r3, [pc, #44]	; (c63c <chip_deinit+0x68>)
    c610:	480b      	ldr	r0, [pc, #44]	; (c640 <chip_deinit+0x6c>)
    c612:	4798      	blx	r3
    c614:	4b0b      	ldr	r3, [pc, #44]	; (c644 <chip_deinit+0x70>)
    c616:	200d      	movs	r0, #13
    c618:	4798      	blx	r3
		goto ERR1;
    c61a:	e7f0      	b.n	c5fe <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
    c61c:	4a0a      	ldr	r2, [pc, #40]	; (c648 <chip_deinit+0x74>)
    c61e:	e7f2      	b.n	c606 <chip_deinit+0x32>
    c620:	0000c67d 	.word	0x0000c67d
    c624:	fffffbff 	.word	0xfffffbff
    c628:	0000c689 	.word	0x0000c689
    c62c:	0000020b 	.word	0x0000020b
    c630:	00015aec 	.word	0x00015aec
    c634:	0001372d 	.word	0x0001372d
    c638:	000155a0 	.word	0x000155a0
    c63c:	00013849 	.word	0x00013849
    c640:	00015af8 	.word	0x00015af8
    c644:	00013761 	.word	0x00013761
    c648:	00000205 	.word	0x00000205

0000c64c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    c64c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    c64e:	4b01      	ldr	r3, [pc, #4]	; (c654 <nm_bus_iface_init+0x8>)
    c650:	4798      	blx	r3
	return ret;
}
    c652:	bd10      	pop	{r4, pc}
    c654:	0000b0b5 	.word	0x0000b0b5

0000c658 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    c658:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    c65a:	4b01      	ldr	r3, [pc, #4]	; (c660 <nm_bus_iface_deinit+0x8>)
    c65c:	4798      	blx	r3

	return ret;
}
    c65e:	bd10      	pop	{r4, pc}
    c660:	0000b2fd 	.word	0x0000b2fd

0000c664 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    c664:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    c666:	4b01      	ldr	r3, [pc, #4]	; (c66c <nm_bus_reset+0x8>)
    c668:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    c66a:	bd10      	pop	{r4, pc}
    c66c:	0000cfd5 	.word	0x0000cfd5

0000c670 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    c670:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    c672:	4b01      	ldr	r3, [pc, #4]	; (c678 <nm_read_reg+0x8>)
    c674:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    c676:	bd10      	pop	{r4, pc}
    c678:	0000d141 	.word	0x0000d141

0000c67c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c67c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    c67e:	4b01      	ldr	r3, [pc, #4]	; (c684 <nm_read_reg_with_ret+0x8>)
    c680:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    c682:	bd10      	pop	{r4, pc}
    c684:	0000d155 	.word	0x0000d155

0000c688 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c688:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    c68a:	4b01      	ldr	r3, [pc, #4]	; (c690 <nm_write_reg+0x8>)
    c68c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    c68e:	bd10      	pop	{r4, pc}
    c690:	0000d16d 	.word	0x0000d16d

0000c694 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c694:	b5f0      	push	{r4, r5, r6, r7, lr}
    c696:	4646      	mov	r6, r8
    c698:	464f      	mov	r7, r9
    c69a:	46d6      	mov	lr, sl
    c69c:	b5c0      	push	{r6, r7, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c69e:	4b14      	ldr	r3, [pc, #80]	; (c6f0 <nm_read_block+0x5c>)
{
    c6a0:	0007      	movs	r7, r0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c6a2:	881d      	ldrh	r5, [r3, #0]
{
    c6a4:	4688      	mov	r8, r1
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c6a6:	3d08      	subs	r5, #8
    c6a8:	b2ad      	uxth	r5, r5
{
    c6aa:	0016      	movs	r6, r2
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c6ac:	0004      	movs	r4, r0
    c6ae:	42aa      	cmp	r2, r5
    c6b0:	d916      	bls.n	c6e0 <nm_read_block+0x4c>
    c6b2:	4b10      	ldr	r3, [pc, #64]	; (c6f4 <nm_read_block+0x60>)
    c6b4:	4699      	mov	r9, r3
    c6b6:	1a2b      	subs	r3, r5, r0
    c6b8:	469a      	mov	sl, r3
    c6ba:	e005      	b.n	c6c8 <nm_read_block+0x34>
    c6bc:	4653      	mov	r3, sl
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    c6be:	1b76      	subs	r6, r6, r5
    c6c0:	1919      	adds	r1, r3, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c6c2:	1964      	adds	r4, r4, r5
		if(u32Sz <= u16MaxTrxSz)
    c6c4:	42ae      	cmp	r6, r5
    c6c6:	d90e      	bls.n	c6e6 <nm_read_block+0x52>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c6c8:	1be1      	subs	r1, r4, r7
    c6ca:	4441      	add	r1, r8
    c6cc:	002a      	movs	r2, r5
    c6ce:	0020      	movs	r0, r4
    c6d0:	47c8      	blx	r9
			if(M2M_SUCCESS != s8Ret) break;
    c6d2:	2800      	cmp	r0, #0
    c6d4:	d0f2      	beq.n	c6bc <nm_read_block+0x28>
		}
	}

	return s8Ret;
}
    c6d6:	bc1c      	pop	{r2, r3, r4}
    c6d8:	4690      	mov	r8, r2
    c6da:	4699      	mov	r9, r3
    c6dc:	46a2      	mov	sl, r4
    c6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6e0:	4b04      	ldr	r3, [pc, #16]	; (c6f4 <nm_read_block+0x60>)
	uint32 off = 0;
    c6e2:	2100      	movs	r1, #0
    c6e4:	4699      	mov	r9, r3
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c6e6:	b2b2      	uxth	r2, r6
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c6e8:	4441      	add	r1, r8
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c6ea:	0020      	movs	r0, r4
    c6ec:	47c8      	blx	r9
			break;
    c6ee:	e7f2      	b.n	c6d6 <nm_read_block+0x42>
    c6f0:	20000108 	.word	0x20000108
    c6f4:	0000d185 	.word	0x0000d185

0000c6f8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6fa:	4646      	mov	r6, r8
    c6fc:	464f      	mov	r7, r9
    c6fe:	46d6      	mov	lr, sl
    c700:	b5c0      	push	{r6, r7, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c702:	4b14      	ldr	r3, [pc, #80]	; (c754 <nm_write_block+0x5c>)
{
    c704:	0007      	movs	r7, r0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c706:	881d      	ldrh	r5, [r3, #0]
{
    c708:	4688      	mov	r8, r1
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c70a:	3d08      	subs	r5, #8
    c70c:	b2ad      	uxth	r5, r5
{
    c70e:	0016      	movs	r6, r2
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c710:	0004      	movs	r4, r0
    c712:	42aa      	cmp	r2, r5
    c714:	d916      	bls.n	c744 <nm_write_block+0x4c>
    c716:	4b10      	ldr	r3, [pc, #64]	; (c758 <nm_write_block+0x60>)
    c718:	4699      	mov	r9, r3
    c71a:	1a2b      	subs	r3, r5, r0
    c71c:	469a      	mov	sl, r3
    c71e:	e005      	b.n	c72c <nm_write_block+0x34>
    c720:	4653      	mov	r3, sl
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    c722:	1b76      	subs	r6, r6, r5
    c724:	1919      	adds	r1, r3, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c726:	1964      	adds	r4, r4, r5
		if(u32Sz <= u16MaxTrxSz)
    c728:	42ae      	cmp	r6, r5
    c72a:	d90e      	bls.n	c74a <nm_write_block+0x52>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c72c:	1be1      	subs	r1, r4, r7
    c72e:	4441      	add	r1, r8
    c730:	002a      	movs	r2, r5
    c732:	0020      	movs	r0, r4
    c734:	47c8      	blx	r9
			if(M2M_SUCCESS != s8Ret) break;
    c736:	2800      	cmp	r0, #0
    c738:	d0f2      	beq.n	c720 <nm_write_block+0x28>
		}
	}

	return s8Ret;
}
    c73a:	bc1c      	pop	{r2, r3, r4}
    c73c:	4690      	mov	r8, r2
    c73e:	4699      	mov	r9, r3
    c740:	46a2      	mov	sl, r4
    c742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c744:	4b04      	ldr	r3, [pc, #16]	; (c758 <nm_write_block+0x60>)
	uint32 off = 0;
    c746:	2100      	movs	r1, #0
    c748:	4699      	mov	r9, r3
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c74a:	b2b2      	uxth	r2, r6
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c74c:	4441      	add	r1, r8
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c74e:	0020      	movs	r0, r4
    c750:	47c8      	blx	r9
			break;
    c752:	e7f2      	b.n	c73a <nm_write_block+0x42>
    c754:	20000108 	.word	0x20000108
    c758:	0000d2e5 	.word	0x0000d2e5

0000c75c <nm_get_firmware_full_info>:
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    c75c:	2300      	movs	r3, #0
{
    c75e:	b570      	push	{r4, r5, r6, lr}
    c760:	b084      	sub	sp, #16
    c762:	0004      	movs	r4, r0
	uint32	reg = 0;
    c764:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    c766:	2208      	movs	r2, #8
    c768:	2100      	movs	r1, #0
    c76a:	a802      	add	r0, sp, #8
    c76c:	4b26      	ldr	r3, [pc, #152]	; (c808 <nm_get_firmware_full_info+0xac>)
    c76e:	4798      	blx	r3
	if (pstrRev != NULL)
    c770:	2c00      	cmp	r4, #0
    c772:	d03f      	beq.n	c7f4 <nm_get_firmware_full_info+0x98>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    c774:	2100      	movs	r1, #0
    c776:	0020      	movs	r0, r4
    c778:	4b24      	ldr	r3, [pc, #144]	; (c80c <nm_get_firmware_full_info+0xb0>)
    c77a:	2228      	movs	r2, #40	; 0x28
    c77c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    c77e:	a901      	add	r1, sp, #4
    c780:	4823      	ldr	r0, [pc, #140]	; (c810 <nm_get_firmware_full_info+0xb4>)
    c782:	4b24      	ldr	r3, [pc, #144]	; (c814 <nm_get_firmware_full_info+0xb8>)
    c784:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    c786:	2800      	cmp	r0, #0
    c788:	d135      	bne.n	c7f6 <nm_get_firmware_full_info+0x9a>
		{
			if(reg != 0)
    c78a:	9801      	ldr	r0, [sp, #4]
    c78c:	2800      	cmp	r0, #0
    c78e:	d034      	beq.n	c7fa <nm_get_firmware_full_info+0x9e>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    c790:	25c0      	movs	r5, #192	; 0xc0
    c792:	02ad      	lsls	r5, r5, #10
    c794:	4328      	orrs	r0, r5
    c796:	2208      	movs	r2, #8
    c798:	a902      	add	r1, sp, #8
    c79a:	4e1f      	ldr	r6, [pc, #124]	; (c818 <nm_get_firmware_full_info+0xbc>)
    c79c:	47b0      	blx	r6
				if(ret == M2M_SUCCESS)
    c79e:	2800      	cmp	r0, #0
    c7a0:	d129      	bne.n	c7f6 <nm_get_firmware_full_info+0x9a>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    c7a2:	466b      	mov	r3, sp
    c7a4:	8998      	ldrh	r0, [r3, #12]
    c7a6:	9001      	str	r0, [sp, #4]
					if(reg != 0)
    c7a8:	2800      	cmp	r0, #0
    c7aa:	d026      	beq.n	c7fa <nm_get_firmware_full_info+0x9e>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    c7ac:	4328      	orrs	r0, r5
    c7ae:	2228      	movs	r2, #40	; 0x28
    c7b0:	0021      	movs	r1, r4
    c7b2:	47b0      	blx	r6
						if(ret == M2M_SUCCESS)
    c7b4:	2800      	cmp	r0, #0
    c7b6:	d11e      	bne.n	c7f6 <nm_get_firmware_full_info+0x9a>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    c7b8:	230f      	movs	r3, #15
    c7ba:	7921      	ldrb	r1, [r4, #4]
    c7bc:	79a2      	ldrb	r2, [r4, #6]
    c7be:	0209      	lsls	r1, r1, #8
    c7c0:	401a      	ands	r2, r3
    c7c2:	430a      	orrs	r2, r1
    c7c4:	7961      	ldrb	r1, [r4, #5]
    c7c6:	30ff      	adds	r0, #255	; 0xff
    c7c8:	0109      	lsls	r1, r1, #4
    c7ca:	4001      	ands	r1, r0
    c7cc:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    c7ce:	7a65      	ldrb	r5, [r4, #9]
    c7d0:	79e1      	ldrb	r1, [r4, #7]
    c7d2:	402b      	ands	r3, r5
    c7d4:	0209      	lsls	r1, r1, #8
    c7d6:	430b      	orrs	r3, r1
    c7d8:	7a21      	ldrb	r1, [r4, #8]
    c7da:	0109      	lsls	r1, r1, #4
    c7dc:	4008      	ands	r0, r1
    c7de:	4303      	orrs	r3, r0
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    c7e0:	2a00      	cmp	r2, #0
    c7e2:	d00a      	beq.n	c7fa <nm_get_firmware_full_info+0x9e>
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d008      	beq.n	c7fa <nm_get_firmware_full_info+0x9e>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    c7e8:	490c      	ldr	r1, [pc, #48]	; (c81c <nm_get_firmware_full_info+0xc0>)
    c7ea:	428b      	cmp	r3, r1
    c7ec:	d808      	bhi.n	c800 <nm_get_firmware_full_info+0xa4>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    c7ee:	4b0c      	ldr	r3, [pc, #48]	; (c820 <nm_get_firmware_full_info+0xc4>)
    c7f0:	429a      	cmp	r2, r3
    c7f2:	d905      	bls.n	c800 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    c7f4:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    c7f6:	b004      	add	sp, #16
    c7f8:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    c7fa:	200c      	movs	r0, #12
    c7fc:	4240      	negs	r0, r0
    c7fe:	e7fa      	b.n	c7f6 <nm_get_firmware_full_info+0x9a>
								ret = M2M_ERR_FW_VER_MISMATCH;
    c800:	200d      	movs	r0, #13
    c802:	4240      	negs	r0, r0
    c804:	e7f7      	b.n	c7f6 <nm_get_firmware_full_info+0x9a>
    c806:	46c0      	nop			; (mov r8, r8)
    c808:	000135cb 	.word	0x000135cb
    c80c:	0000b381 	.word	0x0000b381
    c810:	000c0008 	.word	0x000c0008
    c814:	0000c67d 	.word	0x0000c67d
    c818:	0000c695 	.word	0x0000c695
    c81c:	00001352 	.word	0x00001352
    c820:	00001351 	.word	0x00001351

0000c824 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    c826:	2800      	cmp	r0, #0
    c828:	d01e      	beq.n	c868 <nm_drv_init+0x44>
		u8Mode = *((uint8 *)arg);
    c82a:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    c82c:	1e6b      	subs	r3, r5, #1
    c82e:	2b03      	cmp	r3, #3
    c830:	d81a      	bhi.n	c868 <nm_drv_init+0x44>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    c832:	2000      	movs	r0, #0
    c834:	4b22      	ldr	r3, [pc, #136]	; (c8c0 <nm_drv_init+0x9c>)
    c836:	4798      	blx	r3
    c838:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c83a:	d11b      	bne.n	c874 <nm_drv_init+0x50>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    c83c:	4e21      	ldr	r6, [pc, #132]	; (c8c4 <nm_drv_init+0xa0>)
    c83e:	4822      	ldr	r0, [pc, #136]	; (c8c8 <nm_drv_init+0xa4>)
    c840:	47b0      	blx	r6
    c842:	4b22      	ldr	r3, [pc, #136]	; (c8cc <nm_drv_init+0xa8>)
    c844:	4798      	blx	r3
    c846:	0001      	movs	r1, r0
    c848:	4821      	ldr	r0, [pc, #132]	; (c8d0 <nm_drv_init+0xac>)
    c84a:	47b0      	blx	r6
    c84c:	200d      	movs	r0, #13
    c84e:	4f21      	ldr	r7, [pc, #132]	; (c8d4 <nm_drv_init+0xb0>)
    c850:	47b8      	blx	r7
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    c852:	4b21      	ldr	r3, [pc, #132]	; (c8d8 <nm_drv_init+0xb4>)
    c854:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    c856:	0028      	movs	r0, r5
    c858:	4b20      	ldr	r3, [pc, #128]	; (c8dc <nm_drv_init+0xb8>)
    c85a:	4798      	blx	r3
    c85c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c85e:	d016      	beq.n	c88e <nm_drv_init+0x6a>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    c860:	4b1f      	ldr	r3, [pc, #124]	; (c8e0 <nm_drv_init+0xbc>)
    c862:	4798      	blx	r3
ERR1:
	return ret;
}
    c864:	0020      	movs	r0, r4
    c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = nm_bus_iface_init(NULL);
    c868:	2000      	movs	r0, #0
    c86a:	4b15      	ldr	r3, [pc, #84]	; (c8c0 <nm_drv_init+0x9c>)
    c86c:	4798      	blx	r3
		u8Mode = M2M_WIFI_MODE_NORMAL;
    c86e:	2501      	movs	r5, #1
	ret = nm_bus_iface_init(NULL);
    c870:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c872:	d0e3      	beq.n	c83c <nm_drv_init+0x18>
		M2M_ERR("[nmi start]: fail init bus\n");
    c874:	2228      	movs	r2, #40	; 0x28
    c876:	491b      	ldr	r1, [pc, #108]	; (c8e4 <nm_drv_init+0xc0>)
    c878:	32ff      	adds	r2, #255	; 0xff
    c87a:	4b12      	ldr	r3, [pc, #72]	; (c8c4 <nm_drv_init+0xa0>)
    c87c:	481a      	ldr	r0, [pc, #104]	; (c8e8 <nm_drv_init+0xc4>)
    c87e:	4798      	blx	r3
    c880:	4b1a      	ldr	r3, [pc, #104]	; (c8ec <nm_drv_init+0xc8>)
    c882:	481b      	ldr	r0, [pc, #108]	; (c8f0 <nm_drv_init+0xcc>)
    c884:	4798      	blx	r3
    c886:	4b13      	ldr	r3, [pc, #76]	; (c8d4 <nm_drv_init+0xb0>)
    c888:	200d      	movs	r0, #13
    c88a:	4798      	blx	r3
		goto ERR1;
    c88c:	e7ea      	b.n	c864 <nm_drv_init+0x40>
	ret = wait_for_firmware_start(u8Mode);
    c88e:	0028      	movs	r0, r5
    c890:	4b18      	ldr	r3, [pc, #96]	; (c8f4 <nm_drv_init+0xd0>)
    c892:	4798      	blx	r3
    c894:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c896:	d1e3      	bne.n	c860 <nm_drv_init+0x3c>
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    c898:	3d02      	subs	r5, #2
    c89a:	2d01      	cmp	r5, #1
    c89c:	d9e2      	bls.n	c864 <nm_drv_init+0x40>
	ret = enable_interrupts();
    c89e:	4b16      	ldr	r3, [pc, #88]	; (c8f8 <nm_drv_init+0xd4>)
    c8a0:	4798      	blx	r3
    c8a2:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    c8a4:	d0de      	beq.n	c864 <nm_drv_init+0x40>
		M2M_ERR("failed to enable interrupts..\n");
    c8a6:	2256      	movs	r2, #86	; 0x56
    c8a8:	490e      	ldr	r1, [pc, #56]	; (c8e4 <nm_drv_init+0xc0>)
    c8aa:	32ff      	adds	r2, #255	; 0xff
    c8ac:	480e      	ldr	r0, [pc, #56]	; (c8e8 <nm_drv_init+0xc4>)
    c8ae:	47b0      	blx	r6
    c8b0:	4b0e      	ldr	r3, [pc, #56]	; (c8ec <nm_drv_init+0xc8>)
    c8b2:	4812      	ldr	r0, [pc, #72]	; (c8fc <nm_drv_init+0xd8>)
    c8b4:	4798      	blx	r3
    c8b6:	200d      	movs	r0, #13
    c8b8:	47b8      	blx	r7
		goto ERR2;
    c8ba:	002c      	movs	r4, r5
    c8bc:	e7d0      	b.n	c860 <nm_drv_init+0x3c>
    c8be:	46c0      	nop			; (mov r8, r8)
    c8c0:	0000c64d 	.word	0x0000c64d
    c8c4:	0001372d 	.word	0x0001372d
    c8c8:	000158d0 	.word	0x000158d0
    c8cc:	0000c255 	.word	0x0000c255
    c8d0:	00015c14 	.word	0x00015c14
    c8d4:	00013761 	.word	0x00013761
    c8d8:	0000cffd 	.word	0x0000cffd
    c8dc:	0000c465 	.word	0x0000c465
    c8e0:	0000c659 	.word	0x0000c659
    c8e4:	00015b5c 	.word	0x00015b5c
    c8e8:	000155a0 	.word	0x000155a0
    c8ec:	00013849 	.word	0x00013849
    c8f0:	00015bf8 	.word	0x00015bf8
    c8f4:	0000c55d 	.word	0x0000c55d
    c8f8:	0000c1fd 	.word	0x0000c1fd
    c8fc:	00015bd8 	.word	0x00015bd8

0000c900 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    c900:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    c902:	4b17      	ldr	r3, [pc, #92]	; (c960 <nm_drv_deinit+0x60>)
    c904:	4798      	blx	r3
    c906:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c908:	d119      	bne.n	c93e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    c90a:	2000      	movs	r0, #0
    c90c:	4b15      	ldr	r3, [pc, #84]	; (c964 <nm_drv_deinit+0x64>)
    c90e:	4798      	blx	r3
    c910:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c912:	d107      	bne.n	c924 <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    c914:	4b14      	ldr	r3, [pc, #80]	; (c968 <nm_drv_deinit+0x68>)
    c916:	4798      	blx	r3
    c918:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c91a:	d118      	bne.n	c94e <nm_drv_deinit+0x4e>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    c91c:	4b13      	ldr	r3, [pc, #76]	; (c96c <nm_drv_deinit+0x6c>)
    c91e:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    c920:	0020      	movs	r0, r4
    c922:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    c924:	2274      	movs	r2, #116	; 0x74
    c926:	4912      	ldr	r1, [pc, #72]	; (c970 <nm_drv_deinit+0x70>)
    c928:	32ff      	adds	r2, #255	; 0xff
    c92a:	4812      	ldr	r0, [pc, #72]	; (c974 <nm_drv_deinit+0x74>)
    c92c:	4b12      	ldr	r3, [pc, #72]	; (c978 <nm_drv_deinit+0x78>)
    c92e:	4798      	blx	r3
    c930:	4812      	ldr	r0, [pc, #72]	; (c97c <nm_drv_deinit+0x7c>)
    c932:	4b13      	ldr	r3, [pc, #76]	; (c980 <nm_drv_deinit+0x80>)
    c934:	4798      	blx	r3
    c936:	4b13      	ldr	r3, [pc, #76]	; (c984 <nm_drv_deinit+0x84>)
    c938:	200d      	movs	r0, #13
    c93a:	4798      	blx	r3
		goto ERR1;
    c93c:	e7f0      	b.n	c920 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    c93e:	22b6      	movs	r2, #182	; 0xb6
    c940:	490b      	ldr	r1, [pc, #44]	; (c970 <nm_drv_deinit+0x70>)
    c942:	0052      	lsls	r2, r2, #1
    c944:	480b      	ldr	r0, [pc, #44]	; (c974 <nm_drv_deinit+0x74>)
    c946:	4b0c      	ldr	r3, [pc, #48]	; (c978 <nm_drv_deinit+0x78>)
    c948:	4798      	blx	r3
    c94a:	480f      	ldr	r0, [pc, #60]	; (c988 <nm_drv_deinit+0x88>)
    c94c:	e7f1      	b.n	c932 <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: fail init bus\n");
    c94e:	227a      	movs	r2, #122	; 0x7a
    c950:	4907      	ldr	r1, [pc, #28]	; (c970 <nm_drv_deinit+0x70>)
    c952:	32ff      	adds	r2, #255	; 0xff
    c954:	4807      	ldr	r0, [pc, #28]	; (c974 <nm_drv_deinit+0x74>)
    c956:	4b08      	ldr	r3, [pc, #32]	; (c978 <nm_drv_deinit+0x78>)
    c958:	4798      	blx	r3
    c95a:	480c      	ldr	r0, [pc, #48]	; (c98c <nm_drv_deinit+0x8c>)
    c95c:	e7e9      	b.n	c932 <nm_drv_deinit+0x32>
    c95e:	46c0      	nop			; (mov r8, r8)
    c960:	0000c5d5 	.word	0x0000c5d5
    c964:	0000ddbd 	.word	0x0000ddbd
    c968:	0000c659 	.word	0x0000c659
    c96c:	0000d131 	.word	0x0000d131
    c970:	00015b68 	.word	0x00015b68
    c974:	000155a0 	.word	0x000155a0
    c978:	0001372d 	.word	0x0001372d
    c97c:	00015b98 	.word	0x00015b98
    c980:	00013849 	.word	0x00013849
    c984:	00013761 	.word	0x00013761
    c988:	00015b78 	.word	0x00015b78
    c98c:	00015bbc 	.word	0x00015bbc

0000c990 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	b086      	sub	sp, #24
    c994:	ac0a      	add	r4, sp, #40	; 0x28
    c996:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    c998:	466c      	mov	r4, sp
    c99a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    c99c:	303f      	adds	r0, #63	; 0x3f
    c99e:	b2c0      	uxtb	r0, r0
    c9a0:	280e      	cmp	r0, #14
    c9a2:	d900      	bls.n	c9a6 <spi_cmd+0x16>
    c9a4:	e08f      	b.n	cac6 <spi_cmd+0x136>
    c9a6:	4c49      	ldr	r4, [pc, #292]	; (cacc <spi_cmd+0x13c>)
    c9a8:	0080      	lsls	r0, r0, #2
    c9aa:	5820      	ldr	r0, [r4, r0]
    c9ac:	4687      	mov	pc, r0
		bc[2] = 0x00;
		bc[3] = 0x00;
		len = 5;
		break;
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    c9ae:	2300      	movs	r3, #0
		bc[2] = 0x00;
		bc[3] = 0x00;
		len = 5;
		break;
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    c9b0:	466a      	mov	r2, sp
		bc[2] = 0xff;
		bc[3] = 0xff;
		len = 5;
    c9b2:	2505      	movs	r5, #5
		bc[1] = 0xff;
    c9b4:	7053      	strb	r3, [r2, #1]
		bc[2] = 0xff;
    c9b6:	7093      	strb	r3, [r2, #2]
		bc[3] = 0xff;
    c9b8:	70d3      	strb	r3, [r2, #3]
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    c9ba:	4b45      	ldr	r3, [pc, #276]	; (cad0 <spi_cmd+0x140>)
    c9bc:	781b      	ldrb	r3, [r3, #0]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d01d      	beq.n	c9fe <spi_cmd+0x6e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    c9c2:	3d01      	subs	r5, #1
    c9c4:	b2ed      	uxtb	r5, r5
	spi.pu8InBuf = b;
    c9c6:	466b      	mov	r3, sp
    c9c8:	9303      	str	r3, [sp, #12]
	spi.pu8OutBuf = NULL;
    c9ca:	2300      	movs	r3, #0
	spi.pu8InBuf = b;
    c9cc:	a903      	add	r1, sp, #12
	spi.pu8OutBuf = NULL;
    c9ce:	604b      	str	r3, [r1, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    c9d0:	2003      	movs	r0, #3
    c9d2:	4b40      	ldr	r3, [pc, #256]	; (cad4 <spi_cmd+0x144>)
	spi.u16Sz = sz;
    c9d4:	810d      	strh	r5, [r1, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    c9d6:	4798      	blx	r3
    c9d8:	0003      	movs	r3, r0
    c9da:	2001      	movs	r0, #1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d00c      	beq.n	c9fa <spi_cmd+0x6a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    c9e0:	2228      	movs	r2, #40	; 0x28
    c9e2:	493d      	ldr	r1, [pc, #244]	; (cad8 <spi_cmd+0x148>)
    c9e4:	32ff      	adds	r2, #255	; 0xff
    c9e6:	4b3d      	ldr	r3, [pc, #244]	; (cadc <spi_cmd+0x14c>)
    c9e8:	483d      	ldr	r0, [pc, #244]	; (cae0 <spi_cmd+0x150>)
    c9ea:	4798      	blx	r3
    c9ec:	4b3d      	ldr	r3, [pc, #244]	; (cae4 <spi_cmd+0x154>)
    c9ee:	483e      	ldr	r0, [pc, #248]	; (cae8 <spi_cmd+0x158>)
    c9f0:	4798      	blx	r3
    c9f2:	200d      	movs	r0, #13
    c9f4:	4b3d      	ldr	r3, [pc, #244]	; (caec <spi_cmd+0x15c>)
    c9f6:	4798      	blx	r3
			result = N_FAIL;
    c9f8:	2000      	movs	r0, #0
		}
	}

	return result;
}
    c9fa:	b006      	add	sp, #24
    c9fc:	bd70      	pop	{r4, r5, r6, pc}
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    c9fe:	1e6e      	subs	r6, r5, #1
    ca00:	0034      	movs	r4, r6
    ca02:	466a      	mov	r2, sp
    ca04:	237f      	movs	r3, #127	; 0x7f
    ca06:	483a      	ldr	r0, [pc, #232]	; (caf0 <spi_cmd+0x160>)
    ca08:	446c      	add	r4, sp
	return crc7_syndrome_table[(crc << 1) ^ data];
    ca0a:	7811      	ldrb	r1, [r2, #0]
    ca0c:	005b      	lsls	r3, r3, #1
    ca0e:	404b      	eors	r3, r1
    ca10:	3201      	adds	r2, #1
    ca12:	5cc3      	ldrb	r3, [r0, r3]
	while (len--)
    ca14:	4294      	cmp	r4, r2
    ca16:	d1f8      	bne.n	ca0a <spi_cmd+0x7a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    ca18:	466a      	mov	r2, sp
    ca1a:	005b      	lsls	r3, r3, #1
    ca1c:	5593      	strb	r3, [r2, r6]
    ca1e:	e7d2      	b.n	c9c6 <spi_cmd+0x36>
		bc[1] = 0xff;
    ca20:	23ff      	movs	r3, #255	; 0xff
    ca22:	e7c5      	b.n	c9b0 <spi_cmd+0x20>
		bc[1] = (uint8)(adr >> 16);
    ca24:	4668      	mov	r0, sp
    ca26:	0c0a      	lsrs	r2, r1, #16
    ca28:	7042      	strb	r2, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    ca2a:	0a0a      	lsrs	r2, r1, #8
    ca2c:	7082      	strb	r2, [r0, #2]
		bc[4] = (uint8)(sz >> 16);
    ca2e:	0c1a      	lsrs	r2, r3, #16
    ca30:	7102      	strb	r2, [r0, #4]
		bc[5] = (uint8)(sz >> 8);
    ca32:	0a1a      	lsrs	r2, r3, #8
		bc[3] = (uint8)adr;
    ca34:	70c1      	strb	r1, [r0, #3]
		bc[5] = (uint8)(sz >> 8);
    ca36:	7142      	strb	r2, [r0, #5]
		bc[6] = (uint8)(sz);
    ca38:	7183      	strb	r3, [r0, #6]
		len = 8;
    ca3a:	2508      	movs	r5, #8
		break;
    ca3c:	e7bd      	b.n	c9ba <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    ca3e:	4668      	mov	r0, sp
    ca40:	0c0b      	lsrs	r3, r1, #16
    ca42:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    ca44:	0a0b      	lsrs	r3, r1, #8
    ca46:	7083      	strb	r3, [r0, #2]
		bc[4] = (uint8)(u32data >> 24);
    ca48:	0e13      	lsrs	r3, r2, #24
    ca4a:	7103      	strb	r3, [r0, #4]
		bc[5] = (uint8)(u32data >> 16);
    ca4c:	0c13      	lsrs	r3, r2, #16
    ca4e:	7143      	strb	r3, [r0, #5]
		bc[6] = (uint8)(u32data >> 8);
    ca50:	0a13      	lsrs	r3, r2, #8
		bc[3] = (uint8)(adr);
    ca52:	70c1      	strb	r1, [r0, #3]
		bc[6] = (uint8)(u32data >> 8);
    ca54:	7183      	strb	r3, [r0, #6]
		bc[7] = (uint8)(u32data);
    ca56:	71c2      	strb	r2, [r0, #7]
		len = 9;
    ca58:	2509      	movs	r5, #9
		break;
    ca5a:	e7ae      	b.n	c9ba <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    ca5c:	466a      	mov	r2, sp
    ca5e:	0c0b      	lsrs	r3, r1, #16
    ca60:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    ca62:	0a0b      	lsrs	r3, r1, #8
    ca64:	7093      	strb	r3, [r2, #2]
		bc[3] = (uint8)adr;
    ca66:	70d1      	strb	r1, [r2, #3]
		len = 5;
    ca68:	2505      	movs	r5, #5
		break;
    ca6a:	e7a6      	b.n	c9ba <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    ca6c:	4668      	mov	r0, sp
    ca6e:	0c0a      	lsrs	r2, r1, #16
    ca70:	7042      	strb	r2, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    ca72:	0a0a      	lsrs	r2, r1, #8
    ca74:	7082      	strb	r2, [r0, #2]
		bc[4] = (uint8)(sz >> 8);
    ca76:	0a1a      	lsrs	r2, r3, #8
		bc[3] = (uint8)adr;
    ca78:	70c1      	strb	r1, [r0, #3]
		bc[4] = (uint8)(sz >> 8);
    ca7a:	7102      	strb	r2, [r0, #4]
		bc[5] = (uint8)(sz);
    ca7c:	7143      	strb	r3, [r0, #5]
		len = 7;
    ca7e:	2507      	movs	r5, #7
		break;
    ca80:	e79b      	b.n	c9ba <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 8);
    ca82:	0a0b      	lsrs	r3, r1, #8
    ca84:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    ca86:	2d00      	cmp	r5, #0
    ca88:	d002      	beq.n	ca90 <spi_cmd+0x100>
    ca8a:	2080      	movs	r0, #128	; 0x80
    ca8c:	4240      	negs	r0, r0
    ca8e:	4303      	orrs	r3, r0
    ca90:	4668      	mov	r0, sp
    ca92:	7043      	strb	r3, [r0, #1]
		bc[3] = (uint8)(u32data >> 24);
    ca94:	0e13      	lsrs	r3, r2, #24
    ca96:	70c3      	strb	r3, [r0, #3]
		bc[4] = (uint8)(u32data >> 16);
    ca98:	0c13      	lsrs	r3, r2, #16
    ca9a:	7103      	strb	r3, [r0, #4]
		bc[5] = (uint8)(u32data >> 8);
    ca9c:	0a13      	lsrs	r3, r2, #8
		bc[2] = (uint8)(adr);
    ca9e:	7081      	strb	r1, [r0, #2]
		bc[5] = (uint8)(u32data >> 8);
    caa0:	7143      	strb	r3, [r0, #5]
		bc[6] = (uint8)(u32data);
    caa2:	7182      	strb	r2, [r0, #6]
		len = 8;
    caa4:	2508      	movs	r5, #8
		break;
    caa6:	e788      	b.n	c9ba <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 8);
    caa8:	0a0b      	lsrs	r3, r1, #8
    caaa:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    caac:	2d00      	cmp	r5, #0
    caae:	d002      	beq.n	cab6 <spi_cmd+0x126>
    cab0:	2280      	movs	r2, #128	; 0x80
    cab2:	4252      	negs	r2, r2
    cab4:	4313      	orrs	r3, r2
    cab6:	466a      	mov	r2, sp
    cab8:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    caba:	7091      	strb	r1, [r2, #2]
		bc[3] = 0x00;
    cabc:	2300      	movs	r3, #0
    cabe:	466a      	mov	r2, sp
		len = 5;
    cac0:	2505      	movs	r5, #5
		bc[3] = 0x00;
    cac2:	70d3      	strb	r3, [r2, #3]
		break;
    cac4:	e779      	b.n	c9ba <spi_cmd+0x2a>
	switch (cmd) {
    cac6:	2000      	movs	r0, #0
    cac8:	e797      	b.n	c9fa <spi_cmd+0x6a>
    caca:	46c0      	nop			; (mov r8, r8)
    cacc:	00015c24 	.word	0x00015c24
    cad0:	200006fc 	.word	0x200006fc
    cad4:	0000b1bd 	.word	0x0000b1bd
    cad8:	00015c68 	.word	0x00015c68
    cadc:	0001372d 	.word	0x0001372d
    cae0:	000155a0 	.word	0x000155a0
    cae4:	00013849 	.word	0x00013849
    cae8:	000160f8 	.word	0x000160f8
    caec:	00013761 	.word	0x00013761
    caf0:	00015cf4 	.word	0x00015cf4

0000caf4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    caf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    caf6:	464e      	mov	r6, r9
    caf8:	46de      	mov	lr, fp
    cafa:	4657      	mov	r7, sl
    cafc:	4645      	mov	r5, r8
    cafe:	b5e0      	push	{r5, r6, r7, lr}
    cb00:	b085      	sub	sp, #20
    cb02:	4681      	mov	r9, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    cb04:	0003      	movs	r3, r0
	spi.pu8InBuf = NULL;
    cb06:	ac01      	add	r4, sp, #4
	if ((cmd == CMD_RESET) ||
    cb08:	28cf      	cmp	r0, #207	; 0xcf
    cb0a:	d03c      	beq.n	cb86 <spi_cmd_rsp+0x92>
    cb0c:	333b      	adds	r3, #59	; 0x3b
    cb0e:	b2db      	uxtb	r3, r3
    cb10:	2b01      	cmp	r3, #1
    cb12:	d938      	bls.n	cb86 <spi_cmd_rsp+0x92>
    cb14:	466b      	mov	r3, sp
    cb16:	1cde      	adds	r6, r3, #3
    cb18:	4b30      	ldr	r3, [pc, #192]	; (cbdc <spi_cmd_rsp+0xe8>)
    cb1a:	4698      	mov	r8, r3
	spi.pu8InBuf = NULL;
    cb1c:	2300      	movs	r3, #0
    cb1e:	469b      	mov	fp, r3
	spi.u16Sz = sz;
    cb20:	3301      	adds	r3, #1
{
    cb22:	250b      	movs	r5, #11
	spi.u16Sz = sz;
    cb24:	469a      	mov	sl, r3
	spi.pu8InBuf = NULL;
    cb26:	465b      	mov	r3, fp
    cb28:	6023      	str	r3, [r4, #0]
	spi.u16Sz = sz;
    cb2a:	4653      	mov	r3, sl
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb2c:	0021      	movs	r1, r4
    cb2e:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    cb30:	6066      	str	r6, [r4, #4]
	spi.u16Sz = sz;
    cb32:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb34:	47c0      	blx	r8
    cb36:	1e07      	subs	r7, r0, #0

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cb38:	d135      	bne.n	cba6 <spi_cmd_rsp+0xb2>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    cb3a:	7833      	ldrb	r3, [r6, #0]
    cb3c:	454b      	cmp	r3, r9
    cb3e:	d003      	beq.n	cb48 <spi_cmd_rsp+0x54>
    cb40:	3d01      	subs	r5, #1
    cb42:	b2ed      	uxtb	r5, r5
    cb44:	2d00      	cmp	r5, #0
    cb46:	d1ee      	bne.n	cb26 <spi_cmd_rsp+0x32>
	spi.pu8InBuf = NULL;
    cb48:	2300      	movs	r3, #0
    cb4a:	469a      	mov	sl, r3
	spi.u16Sz = sz;
    cb4c:	3301      	adds	r3, #1
    cb4e:	250b      	movs	r5, #11
    cb50:	4699      	mov	r9, r3
	spi.pu8InBuf = NULL;
    cb52:	4653      	mov	r3, sl
    cb54:	6023      	str	r3, [r4, #0]
	spi.u16Sz = sz;
    cb56:	464b      	mov	r3, r9
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb58:	0021      	movs	r1, r4
    cb5a:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    cb5c:	6066      	str	r6, [r4, #4]
	spi.u16Sz = sz;
    cb5e:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb60:	47c0      	blx	r8
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cb62:	2800      	cmp	r0, #0
    cb64:	d12d      	bne.n	cbc2 <spi_cmd_rsp+0xce>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    cb66:	7833      	ldrb	r3, [r6, #0]
    cb68:	2b00      	cmp	r3, #0
    cb6a:	d003      	beq.n	cb74 <spi_cmd_rsp+0x80>
    cb6c:	3d01      	subs	r5, #1
    cb6e:	b2ed      	uxtb	r5, r5
    cb70:	2d00      	cmp	r5, #0
    cb72:	d1ee      	bne.n	cb52 <spi_cmd_rsp+0x5e>
	sint8 result = N_OK;
    cb74:	2701      	movs	r7, #1

_fail_:

	return result;
}
    cb76:	0038      	movs	r0, r7
    cb78:	b005      	add	sp, #20
    cb7a:	bc3c      	pop	{r2, r3, r4, r5}
    cb7c:	4690      	mov	r8, r2
    cb7e:	4699      	mov	r9, r3
    cb80:	46a2      	mov	sl, r4
    cb82:	46ab      	mov	fp, r5
    cb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi.pu8InBuf = NULL;
    cb86:	2300      	movs	r3, #0
    cb88:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
    cb8a:	466b      	mov	r3, sp
    cb8c:	1cde      	adds	r6, r3, #3
	spi.u16Sz = sz;
    cb8e:	2301      	movs	r3, #1
    cb90:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb92:	4b12      	ldr	r3, [pc, #72]	; (cbdc <spi_cmd_rsp+0xe8>)
    cb94:	0021      	movs	r1, r4
    cb96:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    cb98:	6066      	str	r6, [r4, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb9a:	4698      	mov	r8, r3
    cb9c:	4798      	blx	r3
			result = N_FAIL;
    cb9e:	2700      	movs	r7, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cba0:	2800      	cmp	r0, #0
    cba2:	d0bb      	beq.n	cb1c <spi_cmd_rsp+0x28>
    cba4:	e7e7      	b.n	cb76 <spi_cmd_rsp+0x82>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    cba6:	22b1      	movs	r2, #177	; 0xb1
    cba8:	490d      	ldr	r1, [pc, #52]	; (cbe0 <spi_cmd_rsp+0xec>)
    cbaa:	0052      	lsls	r2, r2, #1
    cbac:	4b0d      	ldr	r3, [pc, #52]	; (cbe4 <spi_cmd_rsp+0xf0>)
    cbae:	480e      	ldr	r0, [pc, #56]	; (cbe8 <spi_cmd_rsp+0xf4>)
    cbb0:	4798      	blx	r3
    cbb2:	4b0e      	ldr	r3, [pc, #56]	; (cbec <spi_cmd_rsp+0xf8>)
    cbb4:	480e      	ldr	r0, [pc, #56]	; (cbf0 <spi_cmd_rsp+0xfc>)
    cbb6:	4798      	blx	r3
    cbb8:	200d      	movs	r0, #13
    cbba:	4b0e      	ldr	r3, [pc, #56]	; (cbf4 <spi_cmd_rsp+0x100>)
    cbbc:	4798      	blx	r3
			result = N_FAIL;
    cbbe:	2700      	movs	r7, #0
			goto _fail_;
    cbc0:	e7d9      	b.n	cb76 <spi_cmd_rsp+0x82>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    cbc2:	22b8      	movs	r2, #184	; 0xb8
    cbc4:	4906      	ldr	r1, [pc, #24]	; (cbe0 <spi_cmd_rsp+0xec>)
    cbc6:	0052      	lsls	r2, r2, #1
    cbc8:	4b06      	ldr	r3, [pc, #24]	; (cbe4 <spi_cmd_rsp+0xf0>)
    cbca:	4807      	ldr	r0, [pc, #28]	; (cbe8 <spi_cmd_rsp+0xf4>)
    cbcc:	4798      	blx	r3
    cbce:	4b07      	ldr	r3, [pc, #28]	; (cbec <spi_cmd_rsp+0xf8>)
    cbd0:	4807      	ldr	r0, [pc, #28]	; (cbf0 <spi_cmd_rsp+0xfc>)
    cbd2:	4798      	blx	r3
    cbd4:	4b07      	ldr	r3, [pc, #28]	; (cbf4 <spi_cmd_rsp+0x100>)
    cbd6:	200d      	movs	r0, #13
    cbd8:	4798      	blx	r3
			goto _fail_;
    cbda:	e7cc      	b.n	cb76 <spi_cmd_rsp+0x82>
    cbdc:	0000b1bd 	.word	0x0000b1bd
    cbe0:	00015c80 	.word	0x00015c80
    cbe4:	0001372d 	.word	0x0001372d
    cbe8:	000155a0 	.word	0x000155a0
    cbec:	00013849 	.word	0x00013849
    cbf0:	00016124 	.word	0x00016124
    cbf4:	00013761 	.word	0x00013761

0000cbf8 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    cbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbfa:	4645      	mov	r5, r8
    cbfc:	4657      	mov	r7, sl
    cbfe:	464e      	mov	r6, r9
    cc00:	46de      	mov	lr, fp
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    cc02:	2300      	movs	r3, #0
{
    cc04:	b5e0      	push	{r5, r6, r7, lr}
    cc06:	b08b      	sub	sp, #44	; 0x2c
	ix = 0;
    cc08:	9300      	str	r3, [sp, #0]
    cc0a:	ab04      	add	r3, sp, #16
    cc0c:	1ddf      	adds	r7, r3, #7
    cc0e:	4b46      	ldr	r3, [pc, #280]	; (cd28 <spi_data_read+0x130>)
{
    cc10:	4688      	mov	r8, r1
    cc12:	4699      	mov	r9, r3
    cc14:	9003      	str	r0, [sp, #12]
    cc16:	9202      	str	r2, [sp, #8]
    cc18:	ad07      	add	r5, sp, #28
    cc1a:	2280      	movs	r2, #128	; 0x80
    cc1c:	4643      	mov	r3, r8
    cc1e:	0192      	lsls	r2, r2, #6
    cc20:	4590      	cmp	r8, r2
    cc22:	d901      	bls.n	cc28 <spi_data_read+0x30>
    cc24:	4b41      	ldr	r3, [pc, #260]	; (cd2c <spi_data_read+0x134>)
    cc26:	881b      	ldrh	r3, [r3, #0]
    cc28:	b29b      	uxth	r3, r3
    cc2a:	9301      	str	r3, [sp, #4]
	spi.pu8InBuf = NULL;
    cc2c:	2300      	movs	r3, #0
    cc2e:	469b      	mov	fp, r3
	spi.u16Sz = sz;
    cc30:	3301      	adds	r3, #1
			nbytes = DATA_PKT_SZ;

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    cc32:	240a      	movs	r4, #10
	spi.u16Sz = sz;
    cc34:	469a      	mov	sl, r3
	spi.pu8InBuf = NULL;
    cc36:	465b      	mov	r3, fp
    cc38:	602b      	str	r3, [r5, #0]
	spi.u16Sz = sz;
    cc3a:	4653      	mov	r3, sl
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cc3c:	0029      	movs	r1, r5
    cc3e:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    cc40:	606f      	str	r7, [r5, #4]
	spi.u16Sz = sz;
    cc42:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cc44:	47c8      	blx	r9
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc46:	2800      	cmp	r0, #0
    cc48:	d141      	bne.n	ccce <spi_data_read+0xd6>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    cc4a:	783b      	ldrb	r3, [r7, #0]
    cc4c:	091b      	lsrs	r3, r3, #4
    cc4e:	2b0f      	cmp	r3, #15
    cc50:	d017      	beq.n	cc82 <spi_data_read+0x8a>
    cc52:	3c01      	subs	r4, #1
    cc54:	b224      	sxth	r4, r4
				break;
		} while (retry--);
    cc56:	1c63      	adds	r3, r4, #1
    cc58:	d1ed      	bne.n	cc36 <spi_data_read+0x3e>
    cc5a:	0006      	movs	r6, r0

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    cc5c:	4a34      	ldr	r2, [pc, #208]	; (cd30 <spi_data_read+0x138>)
    cc5e:	4935      	ldr	r1, [pc, #212]	; (cd34 <spi_data_read+0x13c>)
    cc60:	4c35      	ldr	r4, [pc, #212]	; (cd38 <spi_data_read+0x140>)
    cc62:	4836      	ldr	r0, [pc, #216]	; (cd3c <spi_data_read+0x144>)
    cc64:	47a0      	blx	r4
    cc66:	7839      	ldrb	r1, [r7, #0]
    cc68:	4835      	ldr	r0, [pc, #212]	; (cd40 <spi_data_read+0x148>)
    cc6a:	47a0      	blx	r4
    cc6c:	200d      	movs	r0, #13
    cc6e:	4b35      	ldr	r3, [pc, #212]	; (cd44 <spi_data_read+0x14c>)
    cc70:	4798      	blx	r3
		sz -= nbytes;

	} while (sz);

	return result;
}
    cc72:	0030      	movs	r0, r6
    cc74:	b00b      	add	sp, #44	; 0x2c
    cc76:	bc3c      	pop	{r2, r3, r4, r5}
    cc78:	4690      	mov	r8, r2
    cc7a:	4699      	mov	r9, r3
    cc7c:	46a2      	mov	sl, r4
    cc7e:	46ab      	mov	fp, r5
    cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc82:	0006      	movs	r6, r0
		if (retry <= 0) {
    cc84:	2c00      	cmp	r4, #0
    cc86:	d0e9      	beq.n	cc5c <spi_data_read+0x64>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    cc88:	9a00      	ldr	r2, [sp, #0]
    cc8a:	9b03      	ldr	r3, [sp, #12]
    cc8c:	4694      	mov	ip, r2
    cc8e:	4463      	add	r3, ip
	spi.pu8OutBuf = b;
    cc90:	606b      	str	r3, [r5, #4]
	spi.u16Sz = sz;
    cc92:	466b      	mov	r3, sp
    cc94:	889b      	ldrh	r3, [r3, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cc96:	0029      	movs	r1, r5
    cc98:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    cc9a:	602e      	str	r6, [r5, #0]
	spi.u16Sz = sz;
    cc9c:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cc9e:	47c8      	blx	r9
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    cca0:	2800      	cmp	r0, #0
    cca2:	d133      	bne.n	cd0c <spi_data_read+0x114>
		if(!clockless)
    cca4:	9b02      	ldr	r3, [sp, #8]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d103      	bne.n	ccb2 <spi_data_read+0xba>
			if (!gu8Crc_off) {
    ccaa:	4b27      	ldr	r3, [pc, #156]	; (cd48 <spi_data_read+0x150>)
    ccac:	781b      	ldrb	r3, [r3, #0]
    ccae:	2b00      	cmp	r3, #0
    ccb0:	d01a      	beq.n	cce8 <spi_data_read+0xf0>
		ix += nbytes;
    ccb2:	9901      	ldr	r1, [sp, #4]
    ccb4:	9b00      	ldr	r3, [sp, #0]
    ccb6:	468c      	mov	ip, r1
    ccb8:	4463      	add	r3, ip
    ccba:	b21b      	sxth	r3, r3
    ccbc:	9300      	str	r3, [sp, #0]
		sz -= nbytes;
    ccbe:	4643      	mov	r3, r8
    ccc0:	1a5b      	subs	r3, r3, r1
    ccc2:	b29b      	uxth	r3, r3
    ccc4:	4698      	mov	r8, r3
	} while (sz);
    ccc6:	2b00      	cmp	r3, #0
    ccc8:	d1a7      	bne.n	cc1a <spi_data_read+0x22>
    ccca:	2601      	movs	r6, #1
	return result;
    cccc:	e7d1      	b.n	cc72 <spi_data_read+0x7a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    ccce:	4a1f      	ldr	r2, [pc, #124]	; (cd4c <spi_data_read+0x154>)
    ccd0:	4918      	ldr	r1, [pc, #96]	; (cd34 <spi_data_read+0x13c>)
    ccd2:	481a      	ldr	r0, [pc, #104]	; (cd3c <spi_data_read+0x144>)
    ccd4:	4b18      	ldr	r3, [pc, #96]	; (cd38 <spi_data_read+0x140>)
    ccd6:	4798      	blx	r3
    ccd8:	481d      	ldr	r0, [pc, #116]	; (cd50 <spi_data_read+0x158>)
    ccda:	4b1e      	ldr	r3, [pc, #120]	; (cd54 <spi_data_read+0x15c>)
    ccdc:	4798      	blx	r3
    ccde:	200d      	movs	r0, #13
    cce0:	4b18      	ldr	r3, [pc, #96]	; (cd44 <spi_data_read+0x14c>)
    cce2:	4798      	blx	r3
    cce4:	2600      	movs	r6, #0
    cce6:	e7c4      	b.n	cc72 <spi_data_read+0x7a>
	spi.pu8InBuf = NULL;
    cce8:	9b02      	ldr	r3, [sp, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ccea:	0029      	movs	r1, r5
	spi.pu8InBuf = NULL;
    ccec:	602b      	str	r3, [r5, #0]
	spi.pu8OutBuf = b;
    ccee:	ab06      	add	r3, sp, #24
    ccf0:	606b      	str	r3, [r5, #4]
	spi.u16Sz = sz;
    ccf2:	2302      	movs	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ccf4:	2003      	movs	r0, #3
	spi.u16Sz = sz;
    ccf6:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ccf8:	47c8      	blx	r9
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    ccfa:	2800      	cmp	r0, #0
    ccfc:	d0d9      	beq.n	ccb2 <spi_data_read+0xba>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    ccfe:	4a16      	ldr	r2, [pc, #88]	; (cd58 <spi_data_read+0x160>)
    cd00:	490c      	ldr	r1, [pc, #48]	; (cd34 <spi_data_read+0x13c>)
    cd02:	480e      	ldr	r0, [pc, #56]	; (cd3c <spi_data_read+0x144>)
    cd04:	4b0c      	ldr	r3, [pc, #48]	; (cd38 <spi_data_read+0x140>)
    cd06:	4798      	blx	r3
    cd08:	4814      	ldr	r0, [pc, #80]	; (cd5c <spi_data_read+0x164>)
    cd0a:	e7e6      	b.n	ccda <spi_data_read+0xe2>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    cd0c:	22c5      	movs	r2, #197	; 0xc5
    cd0e:	4909      	ldr	r1, [pc, #36]	; (cd34 <spi_data_read+0x13c>)
    cd10:	0092      	lsls	r2, r2, #2
    cd12:	4b09      	ldr	r3, [pc, #36]	; (cd38 <spi_data_read+0x140>)
    cd14:	4809      	ldr	r0, [pc, #36]	; (cd3c <spi_data_read+0x144>)
    cd16:	4798      	blx	r3
    cd18:	4b0e      	ldr	r3, [pc, #56]	; (cd54 <spi_data_read+0x15c>)
    cd1a:	4811      	ldr	r0, [pc, #68]	; (cd60 <spi_data_read+0x168>)
    cd1c:	4798      	blx	r3
    cd1e:	4b09      	ldr	r3, [pc, #36]	; (cd44 <spi_data_read+0x14c>)
    cd20:	200d      	movs	r0, #13
    cd22:	4798      	blx	r3
			break;
    cd24:	e7a5      	b.n	cc72 <spi_data_read+0x7a>
    cd26:	46c0      	nop			; (mov r8, r8)
    cd28:	0000b1bd 	.word	0x0000b1bd
    cd2c:	00015c60 	.word	0x00015c60
    cd30:	0000030b 	.word	0x0000030b
    cd34:	00015c8c 	.word	0x00015c8c
    cd38:	0001372d 	.word	0x0001372d
    cd3c:	000155a0 	.word	0x000155a0
    cd40:	0001618c 	.word	0x0001618c
    cd44:	00013761 	.word	0x00013761
    cd48:	200006fc 	.word	0x200006fc
    cd4c:	000002ff 	.word	0x000002ff
    cd50:	00016158 	.word	0x00016158
    cd54:	00013849 	.word	0x00013849
    cd58:	0000031f 	.word	0x0000031f
    cd5c:	000161ec 	.word	0x000161ec
    cd60:	000161bc 	.word	0x000161bc

0000cd64 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    cd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd66:	464e      	mov	r6, r9
    cd68:	46de      	mov	lr, fp
    cd6a:	4657      	mov	r7, sl
    cd6c:	4645      	mov	r5, r8
    cd6e:	b5e0      	push	{r5, r6, r7, lr}
    cd70:	b087      	sub	sp, #28
    cd72:	0006      	movs	r6, r0
    cd74:	9103      	str	r1, [sp, #12]
    cd76:	2830      	cmp	r0, #48	; 0x30
    cd78:	d85e      	bhi.n	ce38 <spi_write_reg+0xd4>
    cd7a:	4b31      	ldr	r3, [pc, #196]	; (ce40 <spi_write_reg+0xdc>)
    cd7c:	781b      	ldrb	r3, [r3, #0]
    cd7e:	b2db      	uxtb	r3, r3
    cd80:	9304      	str	r3, [sp, #16]
    cd82:	2230      	movs	r2, #48	; 0x30
    cd84:	2300      	movs	r3, #0
    cd86:	42b2      	cmp	r2, r6
    cd88:	415b      	adcs	r3, r3
    cd8a:	250a      	movs	r5, #10
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	9305      	str	r3, [sp, #20]
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    cd90:	9b05      	ldr	r3, [sp, #20]
    cd92:	9a03      	ldr	r2, [sp, #12]
    cd94:	9300      	str	r3, [sp, #0]
    cd96:	0031      	movs	r1, r6
    cd98:	2304      	movs	r3, #4
    cd9a:	9804      	ldr	r0, [sp, #16]
    cd9c:	4c29      	ldr	r4, [pc, #164]	; (ce44 <spi_write_reg+0xe0>)
    cd9e:	47a0      	blx	r4
    cda0:	4680      	mov	r8, r0
	if (result != N_OK) {
    cda2:	2801      	cmp	r0, #1
    cda4:	d035      	beq.n	ce12 <spi_write_reg+0xae>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    cda6:	4b28      	ldr	r3, [pc, #160]	; (ce48 <spi_write_reg+0xe4>)
    cda8:	4a28      	ldr	r2, [pc, #160]	; (ce4c <spi_write_reg+0xe8>)
    cdaa:	469b      	mov	fp, r3
    cdac:	4b28      	ldr	r3, [pc, #160]	; (ce50 <spi_write_reg+0xec>)
    cdae:	4659      	mov	r1, fp
    cdb0:	0018      	movs	r0, r3
    cdb2:	4c28      	ldr	r4, [pc, #160]	; (ce54 <spi_write_reg+0xf0>)
    cdb4:	469a      	mov	sl, r3
    cdb6:	47a0      	blx	r4
    cdb8:	0031      	movs	r1, r6
    cdba:	4827      	ldr	r0, [pc, #156]	; (ce58 <spi_write_reg+0xf4>)
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    cdbc:	47a0      	blx	r4
    cdbe:	4b27      	ldr	r3, [pc, #156]	; (ce5c <spi_write_reg+0xf8>)
    cdc0:	200d      	movs	r0, #13
    cdc2:	4699      	mov	r9, r3
    cdc4:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    cdc6:	2001      	movs	r0, #1
    cdc8:	4b25      	ldr	r3, [pc, #148]	; (ce60 <spi_write_reg+0xfc>)
    cdca:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cdcc:	2300      	movs	r3, #0
    cdce:	2200      	movs	r2, #0
    cdd0:	2100      	movs	r1, #0
    cdd2:	9300      	str	r3, [sp, #0]
    cdd4:	20cf      	movs	r0, #207	; 0xcf
    cdd6:	4f1b      	ldr	r7, [pc, #108]	; (ce44 <spi_write_reg+0xe0>)
    cdd8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    cdda:	4b22      	ldr	r3, [pc, #136]	; (ce64 <spi_write_reg+0x100>)
    cddc:	20cf      	movs	r0, #207	; 0xcf
    cdde:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    cde0:	4a21      	ldr	r2, [pc, #132]	; (ce68 <spi_write_reg+0x104>)
    cde2:	4659      	mov	r1, fp
    cde4:	4650      	mov	r0, sl
    cde6:	47a0      	blx	r4
    cde8:	0029      	movs	r1, r5
    cdea:	9b03      	ldr	r3, [sp, #12]
    cdec:	0032      	movs	r2, r6
    cdee:	481f      	ldr	r0, [pc, #124]	; (ce6c <spi_write_reg+0x108>)
    cdf0:	47a0      	blx	r4
    cdf2:	200d      	movs	r0, #13
    cdf4:	47c8      	blx	r9
    cdf6:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    cdf8:	2001      	movs	r0, #1
    cdfa:	4b19      	ldr	r3, [pc, #100]	; (ce60 <spi_write_reg+0xfc>)
    cdfc:	4798      	blx	r3
		retry--;
		if(retry) goto _RETRY_;
    cdfe:	2d00      	cmp	r5, #0
    ce00:	d1c6      	bne.n	cd90 <spi_write_reg+0x2c>
	}

	return result;
}
    ce02:	4640      	mov	r0, r8
    ce04:	b007      	add	sp, #28
    ce06:	bc3c      	pop	{r2, r3, r4, r5}
    ce08:	4690      	mov	r8, r2
    ce0a:	4699      	mov	r9, r3
    ce0c:	46a2      	mov	sl, r4
    ce0e:	46ab      	mov	fp, r5
    ce10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    ce12:	9804      	ldr	r0, [sp, #16]
    ce14:	4b13      	ldr	r3, [pc, #76]	; (ce64 <spi_write_reg+0x100>)
    ce16:	4798      	blx	r3
    ce18:	4680      	mov	r8, r0
	if (result != N_OK) {
    ce1a:	2801      	cmp	r0, #1
    ce1c:	d0f1      	beq.n	ce02 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    ce1e:	4b0a      	ldr	r3, [pc, #40]	; (ce48 <spi_write_reg+0xe4>)
    ce20:	22e7      	movs	r2, #231	; 0xe7
    ce22:	469b      	mov	fp, r3
    ce24:	4b0a      	ldr	r3, [pc, #40]	; (ce50 <spi_write_reg+0xec>)
    ce26:	4659      	mov	r1, fp
    ce28:	0092      	lsls	r2, r2, #2
    ce2a:	0018      	movs	r0, r3
    ce2c:	4c09      	ldr	r4, [pc, #36]	; (ce54 <spi_write_reg+0xf0>)
    ce2e:	469a      	mov	sl, r3
    ce30:	47a0      	blx	r4
    ce32:	0031      	movs	r1, r6
    ce34:	480e      	ldr	r0, [pc, #56]	; (ce70 <spi_write_reg+0x10c>)
    ce36:	e7c1      	b.n	cdbc <spi_write_reg+0x58>
    ce38:	4b0e      	ldr	r3, [pc, #56]	; (ce74 <spi_write_reg+0x110>)
    ce3a:	781b      	ldrb	r3, [r3, #0]
    ce3c:	e79f      	b.n	cd7e <spi_write_reg+0x1a>
    ce3e:	46c0      	nop			; (mov r8, r8)
    ce40:	00015c62 	.word	0x00015c62
    ce44:	0000c991 	.word	0x0000c991
    ce48:	00015cac 	.word	0x00015cac
    ce4c:	00000396 	.word	0x00000396
    ce50:	000155a0 	.word	0x000155a0
    ce54:	0001372d 	.word	0x0001372d
    ce58:	000162b8 	.word	0x000162b8
    ce5c:	00013761 	.word	0x00013761
    ce60:	0000b025 	.word	0x0000b025
    ce64:	0000caf5 	.word	0x0000caf5
    ce68:	000003af 	.word	0x000003af
    ce6c:	0001631c 	.word	0x0001631c
    ce70:	000162e4 	.word	0x000162e4
    ce74:	00015c63 	.word	0x00015c63

0000ce78 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce7a:	464e      	mov	r6, r9
    ce7c:	46de      	mov	lr, fp
    ce7e:	4657      	mov	r7, sl
    ce80:	4645      	mov	r5, r8
    ce82:	b5e0      	push	{r5, r6, r7, lr}
    ce84:	b089      	sub	sp, #36	; 0x24
    ce86:	0006      	movs	r6, r0
    ce88:	9105      	str	r1, [sp, #20]
    ce8a:	28ff      	cmp	r0, #255	; 0xff
    ce8c:	d868      	bhi.n	cf60 <spi_read_reg+0xe8>
    ce8e:	4b3e      	ldr	r3, [pc, #248]	; (cf88 <spi_read_reg+0x110>)
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	b2db      	uxtb	r3, r3
    ce94:	9303      	str	r3, [sp, #12]
    ce96:	22ff      	movs	r2, #255	; 0xff
    ce98:	2300      	movs	r3, #0
    ce9a:	42b2      	cmp	r2, r6
    ce9c:	415b      	adcs	r3, r3
    ce9e:	b2db      	uxtb	r3, r3
    cea0:	9304      	str	r3, [sp, #16]
    cea2:	250a      	movs	r5, #10
    cea4:	e02c      	b.n	cf00 <spi_read_reg+0x88>
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    cea6:	4b39      	ldr	r3, [pc, #228]	; (cf8c <spi_read_reg+0x114>)
    cea8:	4a39      	ldr	r2, [pc, #228]	; (cf90 <spi_read_reg+0x118>)
    ceaa:	469b      	mov	fp, r3
    ceac:	4b39      	ldr	r3, [pc, #228]	; (cf94 <spi_read_reg+0x11c>)
    ceae:	4659      	mov	r1, fp
    ceb0:	0018      	movs	r0, r3
    ceb2:	4c39      	ldr	r4, [pc, #228]	; (cf98 <spi_read_reg+0x120>)
    ceb4:	4699      	mov	r9, r3
    ceb6:	47a0      	blx	r4
    ceb8:	0031      	movs	r1, r6
    ceba:	4838      	ldr	r0, [pc, #224]	; (cf9c <spi_read_reg+0x124>)
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    cebc:	47a0      	blx	r4
    cebe:	4b38      	ldr	r3, [pc, #224]	; (cfa0 <spi_read_reg+0x128>)
    cec0:	200d      	movs	r0, #13
    cec2:	4698      	mov	r8, r3
    cec4:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    cec6:	2001      	movs	r0, #1
    cec8:	4b36      	ldr	r3, [pc, #216]	; (cfa4 <spi_read_reg+0x12c>)
    ceca:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cecc:	2300      	movs	r3, #0
    cece:	2200      	movs	r2, #0
    ced0:	2100      	movs	r1, #0
    ced2:	9300      	str	r3, [sp, #0]
    ced4:	20cf      	movs	r0, #207	; 0xcf
    ced6:	4f34      	ldr	r7, [pc, #208]	; (cfa8 <spi_read_reg+0x130>)
    ced8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ceda:	4b34      	ldr	r3, [pc, #208]	; (cfac <spi_read_reg+0x134>)
    cedc:	20cf      	movs	r0, #207	; 0xcf
    cede:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    cee0:	4a33      	ldr	r2, [pc, #204]	; (cfb0 <spi_read_reg+0x138>)
    cee2:	4659      	mov	r1, fp
    cee4:	4648      	mov	r0, r9
    cee6:	47a0      	blx	r4
    cee8:	0029      	movs	r1, r5
    ceea:	0032      	movs	r2, r6
    ceec:	4831      	ldr	r0, [pc, #196]	; (cfb4 <spi_read_reg+0x13c>)
    ceee:	47a0      	blx	r4
    cef0:	200d      	movs	r0, #13
    cef2:	47c0      	blx	r8
    cef4:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    cef6:	2001      	movs	r0, #1
    cef8:	4b2a      	ldr	r3, [pc, #168]	; (cfa4 <spi_read_reg+0x12c>)
    cefa:	4798      	blx	r3
		retry--;
		if(retry) goto _RETRY_;
    cefc:	2d00      	cmp	r5, #0
    cefe:	d027      	beq.n	cf50 <spi_read_reg+0xd8>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    cf00:	9b04      	ldr	r3, [sp, #16]
    cf02:	2200      	movs	r2, #0
    cf04:	9300      	str	r3, [sp, #0]
    cf06:	0031      	movs	r1, r6
    cf08:	2304      	movs	r3, #4
    cf0a:	9803      	ldr	r0, [sp, #12]
    cf0c:	4c26      	ldr	r4, [pc, #152]	; (cfa8 <spi_read_reg+0x130>)
    cf0e:	47a0      	blx	r4
    cf10:	4682      	mov	sl, r0
	if (result != N_OK) {
    cf12:	2801      	cmp	r0, #1
    cf14:	d1c7      	bne.n	cea6 <spi_read_reg+0x2e>
	result = spi_cmd_rsp(cmd);
    cf16:	9803      	ldr	r0, [sp, #12]
    cf18:	4b24      	ldr	r3, [pc, #144]	; (cfac <spi_read_reg+0x134>)
    cf1a:	4798      	blx	r3
    cf1c:	4682      	mov	sl, r0
	if (result != N_OK) {
    cf1e:	2801      	cmp	r0, #1
    cf20:	d00b      	beq.n	cf3a <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    cf22:	4b1a      	ldr	r3, [pc, #104]	; (cf8c <spi_read_reg+0x114>)
    cf24:	4a24      	ldr	r2, [pc, #144]	; (cfb8 <spi_read_reg+0x140>)
    cf26:	469b      	mov	fp, r3
    cf28:	4b1a      	ldr	r3, [pc, #104]	; (cf94 <spi_read_reg+0x11c>)
    cf2a:	4659      	mov	r1, fp
    cf2c:	0018      	movs	r0, r3
    cf2e:	4c1a      	ldr	r4, [pc, #104]	; (cf98 <spi_read_reg+0x120>)
    cf30:	4699      	mov	r9, r3
    cf32:	47a0      	blx	r4
    cf34:	0031      	movs	r1, r6
    cf36:	4821      	ldr	r0, [pc, #132]	; (cfbc <spi_read_reg+0x144>)
    cf38:	e7c0      	b.n	cebc <spi_read_reg+0x44>
	result = spi_data_read(&tmp[0], 4, clockless);
    cf3a:	9a04      	ldr	r2, [sp, #16]
    cf3c:	2104      	movs	r1, #4
    cf3e:	a807      	add	r0, sp, #28
    cf40:	4b1f      	ldr	r3, [pc, #124]	; (cfc0 <spi_read_reg+0x148>)
    cf42:	4798      	blx	r3
    cf44:	4682      	mov	sl, r0
	if (result != N_OK) {
    cf46:	2801      	cmp	r0, #1
    cf48:	d10d      	bne.n	cf66 <spi_read_reg+0xee>
	*u32data = tmp[0] |
    cf4a:	9b05      	ldr	r3, [sp, #20]
    cf4c:	9a07      	ldr	r2, [sp, #28]
    cf4e:	601a      	str	r2, [r3, #0]
	}
		
	return result;
}
    cf50:	4650      	mov	r0, sl
    cf52:	b009      	add	sp, #36	; 0x24
    cf54:	bc3c      	pop	{r2, r3, r4, r5}
    cf56:	4690      	mov	r8, r2
    cf58:	4699      	mov	r9, r3
    cf5a:	46a2      	mov	sl, r4
    cf5c:	46ab      	mov	fp, r5
    cf5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf60:	4b18      	ldr	r3, [pc, #96]	; (cfc4 <spi_read_reg+0x14c>)
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	e795      	b.n	ce92 <spi_read_reg+0x1a>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    cf66:	4b09      	ldr	r3, [pc, #36]	; (cf8c <spi_read_reg+0x114>)
    cf68:	4a17      	ldr	r2, [pc, #92]	; (cfc8 <spi_read_reg+0x150>)
    cf6a:	469b      	mov	fp, r3
    cf6c:	4b09      	ldr	r3, [pc, #36]	; (cf94 <spi_read_reg+0x11c>)
    cf6e:	4659      	mov	r1, fp
    cf70:	0018      	movs	r0, r3
    cf72:	4c09      	ldr	r4, [pc, #36]	; (cf98 <spi_read_reg+0x120>)
    cf74:	4699      	mov	r9, r3
    cf76:	47a0      	blx	r4
    cf78:	4b14      	ldr	r3, [pc, #80]	; (cfcc <spi_read_reg+0x154>)
    cf7a:	4815      	ldr	r0, [pc, #84]	; (cfd0 <spi_read_reg+0x158>)
    cf7c:	4798      	blx	r3
    cf7e:	4b08      	ldr	r3, [pc, #32]	; (cfa0 <spi_read_reg+0x128>)
    cf80:	200d      	movs	r0, #13
    cf82:	4698      	mov	r8, r3
    cf84:	4798      	blx	r3
		goto _FAIL_;
    cf86:	e79e      	b.n	cec6 <spi_read_reg+0x4e>
    cf88:	00015c64 	.word	0x00015c64
    cf8c:	00015ccc 	.word	0x00015ccc
    cf90:	00000417 	.word	0x00000417
    cf94:	000155a0 	.word	0x000155a0
    cf98:	0001372d 	.word	0x0001372d
    cf9c:	00016220 	.word	0x00016220
    cfa0:	00013761 	.word	0x00013761
    cfa4:	0000b025 	.word	0x0000b025
    cfa8:	0000c991 	.word	0x0000c991
    cfac:	0000caf5 	.word	0x0000caf5
    cfb0:	0000043c 	.word	0x0000043c
    cfb4:	000162a0 	.word	0x000162a0
    cfb8:	0000041d 	.word	0x0000041d
    cfbc:	0001624c 	.word	0x0001624c
    cfc0:	0000cbf9 	.word	0x0000cbf9
    cfc4:	00015c65 	.word	0x00015c65
    cfc8:	00000424 	.word	0x00000424
    cfcc:	00013849 	.word	0x00013849
    cfd0:	00016280 	.word	0x00016280

0000cfd4 <nm_spi_reset>:
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cfd4:	2300      	movs	r3, #0
{
    cfd6:	b510      	push	{r4, lr}
    cfd8:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cfda:	9300      	str	r3, [sp, #0]
    cfdc:	2200      	movs	r2, #0
    cfde:	2100      	movs	r1, #0
    cfe0:	4c04      	ldr	r4, [pc, #16]	; (cff4 <nm_spi_reset+0x20>)
    cfe2:	20cf      	movs	r0, #207	; 0xcf
    cfe4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    cfe6:	4b04      	ldr	r3, [pc, #16]	; (cff8 <nm_spi_reset+0x24>)
    cfe8:	20cf      	movs	r0, #207	; 0xcf
    cfea:	4798      	blx	r3
	return M2M_SUCCESS;
}
    cfec:	2000      	movs	r0, #0
    cfee:	b002      	add	sp, #8
    cff0:	bd10      	pop	{r4, pc}
    cff2:	46c0      	nop			; (mov r8, r8)
    cff4:	0000c991 	.word	0x0000c991
    cff8:	0000caf5 	.word	0x0000caf5

0000cffc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    cffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cffe:	4645      	mov	r5, r8
    d000:	46de      	mov	lr, fp
    d002:	4657      	mov	r7, sl
    d004:	464e      	mov	r6, r9
	uint32 chipid;
	uint32 reg = 0;
    d006:	2300      	movs	r3, #0
{
    d008:	b5e0      	push	{r5, r6, r7, lr}
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    d00a:	4d38      	ldr	r5, [pc, #224]	; (d0ec <nm_spi_init+0xf0>)
{
    d00c:	b085      	sub	sp, #20

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d00e:	a902      	add	r1, sp, #8
    d010:	4837      	ldr	r0, [pc, #220]	; (d0f0 <nm_spi_init+0xf4>)
    d012:	4c38      	ldr	r4, [pc, #224]	; (d0f4 <nm_spi_init+0xf8>)
	uint32 reg = 0;
    d014:	9302      	str	r3, [sp, #8]
	gu8Crc_off = 0;
    d016:	702b      	strb	r3, [r5, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d018:	47a0      	blx	r4
    d01a:	2800      	cmp	r0, #0
    d01c:	d02a      	beq.n	d074 <nm_spi_init+0x78>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    d01e:	782b      	ldrb	r3, [r5, #0]
    d020:	2b00      	cmp	r3, #0
    d022:	d019      	beq.n	d058 <nm_spi_init+0x5c>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    d024:	2080      	movs	r0, #128	; 0x80
    d026:	a901      	add	r1, sp, #4
    d028:	0140      	lsls	r0, r0, #5
    d02a:	47a0      	blx	r4
    d02c:	2800      	cmp	r0, #0
    d02e:	d04e      	beq.n	d0ce <nm_spi_init+0xd2>
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    d030:	a903      	add	r1, sp, #12
    d032:	482f      	ldr	r0, [pc, #188]	; (d0f0 <nm_spi_init+0xf4>)
    d034:	47a0      	blx	r4
	val32 &= ~(0x7 << 4);
    d036:	2370      	movs	r3, #112	; 0x70
    d038:	9903      	ldr	r1, [sp, #12]
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    d03a:	482d      	ldr	r0, [pc, #180]	; (d0f0 <nm_spi_init+0xf4>)
	val32 &= ~(0x7 << 4);
    d03c:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    d03e:	3b20      	subs	r3, #32
    d040:	4319      	orrs	r1, r3
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d042:	4b2d      	ldr	r3, [pc, #180]	; (d0f8 <nm_spi_init+0xfc>)
    d044:	4798      	blx	r3
	return M2M_SUCCESS;
    d046:	2600      	movs	r6, #0
}
    d048:	0030      	movs	r0, r6
    d04a:	b005      	add	sp, #20
    d04c:	bc3c      	pop	{r2, r3, r4, r5}
    d04e:	4690      	mov	r8, r2
    d050:	4699      	mov	r9, r3
    d052:	46a2      	mov	sl, r4
    d054:	46ab      	mov	fp, r5
    d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reg &= ~0x70;
    d058:	9902      	ldr	r1, [sp, #8]
    d05a:	337c      	adds	r3, #124	; 0x7c
    d05c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    d05e:	3b2c      	subs	r3, #44	; 0x2c
    d060:	4319      	orrs	r1, r3
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d062:	4823      	ldr	r0, [pc, #140]	; (d0f0 <nm_spi_init+0xf4>)
    d064:	4b24      	ldr	r3, [pc, #144]	; (d0f8 <nm_spi_init+0xfc>)
		reg |= (0x5 << 4);
    d066:	9102      	str	r1, [sp, #8]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d068:	4798      	blx	r3
    d06a:	1e06      	subs	r6, r0, #0
    d06c:	d023      	beq.n	d0b6 <nm_spi_init+0xba>
		gu8Crc_off = 1;
    d06e:	2301      	movs	r3, #1
    d070:	702b      	strb	r3, [r5, #0]
    d072:	e7d7      	b.n	d024 <nm_spi_init+0x28>
		gu8Crc_off = 1;
    d074:	2301      	movs	r3, #1
    d076:	702b      	strb	r3, [r5, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    d078:	4b20      	ldr	r3, [pc, #128]	; (d0fc <nm_spi_init+0x100>)
    d07a:	4a21      	ldr	r2, [pc, #132]	; (d100 <nm_spi_init+0x104>)
    d07c:	469b      	mov	fp, r3
    d07e:	4b21      	ldr	r3, [pc, #132]	; (d104 <nm_spi_init+0x108>)
    d080:	4659      	mov	r1, fp
    d082:	0018      	movs	r0, r3
    d084:	469a      	mov	sl, r3
    d086:	4b20      	ldr	r3, [pc, #128]	; (d108 <nm_spi_init+0x10c>)
    d088:	4699      	mov	r9, r3
    d08a:	4798      	blx	r3
    d08c:	4b1f      	ldr	r3, [pc, #124]	; (d10c <nm_spi_init+0x110>)
    d08e:	4820      	ldr	r0, [pc, #128]	; (d110 <nm_spi_init+0x114>)
    d090:	4698      	mov	r8, r3
    d092:	4798      	blx	r3
    d094:	200d      	movs	r0, #13
    d096:	4f1f      	ldr	r7, [pc, #124]	; (d114 <nm_spi_init+0x118>)
    d098:	47b8      	blx	r7
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    d09a:	a902      	add	r1, sp, #8
    d09c:	4814      	ldr	r0, [pc, #80]	; (d0f0 <nm_spi_init+0xf4>)
    d09e:	47a0      	blx	r4
    d0a0:	1e06      	subs	r6, r0, #0
    d0a2:	d1bc      	bne.n	d01e <nm_spi_init+0x22>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    d0a4:	4a1c      	ldr	r2, [pc, #112]	; (d118 <nm_spi_init+0x11c>)
    d0a6:	4659      	mov	r1, fp
    d0a8:	4650      	mov	r0, sl
    d0aa:	47c8      	blx	r9
    d0ac:	481b      	ldr	r0, [pc, #108]	; (d11c <nm_spi_init+0x120>)
    d0ae:	47c0      	blx	r8
    d0b0:	200d      	movs	r0, #13
    d0b2:	47b8      	blx	r7
			return 0;
    d0b4:	e7c8      	b.n	d048 <nm_spi_init+0x4c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    d0b6:	4a1a      	ldr	r2, [pc, #104]	; (d120 <nm_spi_init+0x124>)
    d0b8:	4910      	ldr	r1, [pc, #64]	; (d0fc <nm_spi_init+0x100>)
    d0ba:	4b13      	ldr	r3, [pc, #76]	; (d108 <nm_spi_init+0x10c>)
    d0bc:	4811      	ldr	r0, [pc, #68]	; (d104 <nm_spi_init+0x108>)
    d0be:	4798      	blx	r3
    d0c0:	4b12      	ldr	r3, [pc, #72]	; (d10c <nm_spi_init+0x110>)
    d0c2:	4818      	ldr	r0, [pc, #96]	; (d124 <nm_spi_init+0x128>)
    d0c4:	4798      	blx	r3
    d0c6:	4b13      	ldr	r3, [pc, #76]	; (d114 <nm_spi_init+0x118>)
    d0c8:	200d      	movs	r0, #13
    d0ca:	4798      	blx	r3
			return 0;
    d0cc:	e7bc      	b.n	d048 <nm_spi_init+0x4c>
		return M2M_ERR_BUS_FAIL;
    d0ce:	2606      	movs	r6, #6
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    d0d0:	4a15      	ldr	r2, [pc, #84]	; (d128 <nm_spi_init+0x12c>)
    d0d2:	490a      	ldr	r1, [pc, #40]	; (d0fc <nm_spi_init+0x100>)
    d0d4:	4b0c      	ldr	r3, [pc, #48]	; (d108 <nm_spi_init+0x10c>)
    d0d6:	480b      	ldr	r0, [pc, #44]	; (d104 <nm_spi_init+0x108>)
    d0d8:	4798      	blx	r3
    d0da:	4b0c      	ldr	r3, [pc, #48]	; (d10c <nm_spi_init+0x110>)
    d0dc:	4813      	ldr	r0, [pc, #76]	; (d12c <nm_spi_init+0x130>)
    d0de:	4798      	blx	r3
    d0e0:	200d      	movs	r0, #13
    d0e2:	4b0c      	ldr	r3, [pc, #48]	; (d114 <nm_spi_init+0x118>)
    d0e4:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    d0e6:	4276      	negs	r6, r6
    d0e8:	e7ae      	b.n	d048 <nm_spi_init+0x4c>
    d0ea:	46c0      	nop			; (mov r8, r8)
    d0ec:	200006fc 	.word	0x200006fc
    d0f0:	0000e824 	.word	0x0000e824
    d0f4:	0000ce79 	.word	0x0000ce79
    d0f8:	0000cd65 	.word	0x0000cd65
    d0fc:	00015ce8 	.word	0x00015ce8
    d100:	000004c7 	.word	0x000004c7
    d104:	000155a0 	.word	0x000155a0
    d108:	0001372d 	.word	0x0001372d
    d10c:	00013849 	.word	0x00013849
    d110:	00015df4 	.word	0x00015df4
    d114:	00013761 	.word	0x00013761
    d118:	000004ca 	.word	0x000004ca
    d11c:	00015e44 	.word	0x00015e44
    d120:	000004d4 	.word	0x000004d4
    d124:	00015e70 	.word	0x00015e70
    d128:	000004de 	.word	0x000004de
    d12c:	00015ea4 	.word	0x00015ea4

0000d130 <nm_spi_deinit>:
	gu8Crc_off = 0;
    d130:	2200      	movs	r2, #0
    d132:	4b02      	ldr	r3, [pc, #8]	; (d13c <nm_spi_deinit+0xc>)
}
    d134:	2000      	movs	r0, #0
	gu8Crc_off = 0;
    d136:	701a      	strb	r2, [r3, #0]
}
    d138:	4770      	bx	lr
    d13a:	46c0      	nop			; (mov r8, r8)
    d13c:	200006fc 	.word	0x200006fc

0000d140 <nm_spi_read_reg>:
{
    d140:	b500      	push	{lr}
    d142:	b083      	sub	sp, #12
	spi_read_reg(u32Addr, &u32Val);
    d144:	a901      	add	r1, sp, #4
    d146:	4b02      	ldr	r3, [pc, #8]	; (d150 <nm_spi_read_reg+0x10>)
    d148:	4798      	blx	r3
}
    d14a:	9801      	ldr	r0, [sp, #4]
    d14c:	b003      	add	sp, #12
    d14e:	bd00      	pop	{pc}
    d150:	0000ce79 	.word	0x0000ce79

0000d154 <nm_spi_read_reg_with_ret>:
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d154:	4b04      	ldr	r3, [pc, #16]	; (d168 <nm_spi_read_reg_with_ret+0x14>)
{
    d156:	b510      	push	{r4, lr}
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d158:	4798      	blx	r3
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d15a:	2300      	movs	r3, #0
    d15c:	2801      	cmp	r0, #1
    d15e:	d101      	bne.n	d164 <nm_spi_read_reg_with_ret+0x10>
}
    d160:	0018      	movs	r0, r3
    d162:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d164:	3b06      	subs	r3, #6
    d166:	e7fb      	b.n	d160 <nm_spi_read_reg_with_ret+0xc>
    d168:	0000ce79 	.word	0x0000ce79

0000d16c <nm_spi_write_reg>:
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d16c:	4b04      	ldr	r3, [pc, #16]	; (d180 <nm_spi_write_reg+0x14>)
{
    d16e:	b510      	push	{r4, lr}
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d170:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d172:	2300      	movs	r3, #0
    d174:	2801      	cmp	r0, #1
    d176:	d101      	bne.n	d17c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d178:	0018      	movs	r0, r3
    d17a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d17c:	3b06      	subs	r3, #6
    d17e:	e7fb      	b.n	d178 <nm_spi_write_reg+0xc>
    d180:	0000cd65 	.word	0x0000cd65

0000d184 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d184:	b5f0      	push	{r4, r5, r6, r7, lr}
    d186:	4657      	mov	r7, sl
    d188:	464e      	mov	r6, r9
    d18a:	4645      	mov	r5, r8
    d18c:	46de      	mov	lr, fp
	uint8 single_byte_workaround = 0;
    d18e:	2300      	movs	r3, #0
{
    d190:	b5e0      	push	{r5, r6, r7, lr}
    d192:	b087      	sub	sp, #28
    d194:	9103      	str	r1, [sp, #12]
    d196:	0016      	movs	r6, r2
    d198:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    d19a:	9302      	str	r3, [sp, #8]
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d19c:	4682      	mov	sl, r0
    d19e:	e02d      	b.n	d1fc <nm_spi_read_block+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    d1a0:	4b3f      	ldr	r3, [pc, #252]	; (d2a0 <nm_spi_read_block+0x11c>)
    d1a2:	4a40      	ldr	r2, [pc, #256]	; (d2a4 <nm_spi_read_block+0x120>)
    d1a4:	469b      	mov	fp, r3
    d1a6:	4b40      	ldr	r3, [pc, #256]	; (d2a8 <nm_spi_read_block+0x124>)
    d1a8:	4659      	mov	r1, fp
    d1aa:	0018      	movs	r0, r3
    d1ac:	4c3f      	ldr	r4, [pc, #252]	; (d2ac <nm_spi_read_block+0x128>)
    d1ae:	4699      	mov	r9, r3
    d1b0:	47a0      	blx	r4
    d1b2:	4651      	mov	r1, sl
    d1b4:	483e      	ldr	r0, [pc, #248]	; (d2b0 <nm_spi_read_block+0x12c>)
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d1b6:	47a0      	blx	r4
    d1b8:	4b3e      	ldr	r3, [pc, #248]	; (d2b4 <nm_spi_read_block+0x130>)
    d1ba:	200d      	movs	r0, #13
    d1bc:	4698      	mov	r8, r3
    d1be:	4798      	blx	r3
		nm_bsp_sleep(1);
    d1c0:	2001      	movs	r0, #1
    d1c2:	4b3d      	ldr	r3, [pc, #244]	; (d2b8 <nm_spi_read_block+0x134>)
    d1c4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d1c6:	2300      	movs	r3, #0
    d1c8:	2200      	movs	r2, #0
    d1ca:	2100      	movs	r1, #0
    d1cc:	9300      	str	r3, [sp, #0]
    d1ce:	20cf      	movs	r0, #207	; 0xcf
    d1d0:	4f3a      	ldr	r7, [pc, #232]	; (d2bc <nm_spi_read_block+0x138>)
    d1d2:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d1d4:	4b3a      	ldr	r3, [pc, #232]	; (d2c0 <nm_spi_read_block+0x13c>)
    d1d6:	20cf      	movs	r0, #207	; 0xcf
    d1d8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d1da:	4a3a      	ldr	r2, [pc, #232]	; (d2c4 <nm_spi_read_block+0x140>)
    d1dc:	4659      	mov	r1, fp
    d1de:	4648      	mov	r0, r9
    d1e0:	47a0      	blx	r4
    d1e2:	0029      	movs	r1, r5
    d1e4:	0033      	movs	r3, r6
    d1e6:	4652      	mov	r2, sl
    d1e8:	4837      	ldr	r0, [pc, #220]	; (d2c8 <nm_spi_read_block+0x144>)
    d1ea:	47a0      	blx	r4
    d1ec:	200d      	movs	r0, #13
    d1ee:	47c0      	blx	r8
    d1f0:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    d1f2:	2001      	movs	r0, #1
    d1f4:	4b30      	ldr	r3, [pc, #192]	; (d2b8 <nm_spi_read_block+0x134>)
    d1f6:	4798      	blx	r3
		if(retry) goto _RETRY_;
    d1f8:	2d00      	cmp	r5, #0
    d1fa:	d02c      	beq.n	d256 <nm_spi_read_block+0xd2>
	if (size == 1)
    d1fc:	2e01      	cmp	r6, #1
    d1fe:	d019      	beq.n	d234 <nm_spi_read_block+0xb0>
    d200:	0033      	movs	r3, r6
	result = spi_cmd(cmd, addr, 0, size,0);
    d202:	2200      	movs	r2, #0
    d204:	4651      	mov	r1, sl
    d206:	9200      	str	r2, [sp, #0]
    d208:	20c8      	movs	r0, #200	; 0xc8
    d20a:	4c2c      	ldr	r4, [pc, #176]	; (d2bc <nm_spi_read_block+0x138>)
    d20c:	47a0      	blx	r4
	if (result != N_OK) {
    d20e:	2801      	cmp	r0, #1
    d210:	d1c6      	bne.n	d1a0 <nm_spi_read_block+0x1c>
	result = spi_cmd_rsp(cmd);
    d212:	20c8      	movs	r0, #200	; 0xc8
    d214:	4b2a      	ldr	r3, [pc, #168]	; (d2c0 <nm_spi_read_block+0x13c>)
    d216:	4798      	blx	r3
	if (result != N_OK) {
    d218:	2801      	cmp	r0, #1
    d21a:	d010      	beq.n	d23e <nm_spi_read_block+0xba>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d21c:	4b20      	ldr	r3, [pc, #128]	; (d2a0 <nm_spi_read_block+0x11c>)
    d21e:	4a2b      	ldr	r2, [pc, #172]	; (d2cc <nm_spi_read_block+0x148>)
    d220:	469b      	mov	fp, r3
    d222:	4b21      	ldr	r3, [pc, #132]	; (d2a8 <nm_spi_read_block+0x124>)
    d224:	4659      	mov	r1, fp
    d226:	0018      	movs	r0, r3
    d228:	4c20      	ldr	r4, [pc, #128]	; (d2ac <nm_spi_read_block+0x128>)
    d22a:	4699      	mov	r9, r3
    d22c:	47a0      	blx	r4
    d22e:	4651      	mov	r1, sl
    d230:	4827      	ldr	r0, [pc, #156]	; (d2d0 <nm_spi_read_block+0x14c>)
    d232:	e7c0      	b.n	d1b6 <nm_spi_read_block+0x32>
		single_byte_workaround = 1;
    d234:	2201      	movs	r2, #1
	if (size == 1)
    d236:	2302      	movs	r3, #2
		single_byte_workaround = 1;
    d238:	9202      	str	r2, [sp, #8]
		size = 2;
    d23a:	2602      	movs	r6, #2
    d23c:	e7e1      	b.n	d202 <nm_spi_read_block+0x7e>
	if (single_byte_workaround)
    d23e:	9b02      	ldr	r3, [sp, #8]
    d240:	2b00      	cmp	r3, #0
    d242:	d111      	bne.n	d268 <nm_spi_read_block+0xe4>
		result = spi_data_read(buf, size,0);
    d244:	2200      	movs	r2, #0
    d246:	0031      	movs	r1, r6
    d248:	9803      	ldr	r0, [sp, #12]
    d24a:	4b22      	ldr	r3, [pc, #136]	; (d2d4 <nm_spi_read_block+0x150>)
    d24c:	4798      	blx	r3
	if (result != N_OK) {
    d24e:	2801      	cmp	r0, #1
    d250:	d115      	bne.n	d27e <nm_spi_read_block+0xfa>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d252:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    d254:	e001      	b.n	d25a <nm_spi_read_block+0xd6>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d256:	2006      	movs	r0, #6
    d258:	4240      	negs	r0, r0
}
    d25a:	b007      	add	sp, #28
    d25c:	bc3c      	pop	{r2, r3, r4, r5}
    d25e:	4690      	mov	r8, r2
    d260:	4699      	mov	r9, r3
    d262:	46a2      	mov	sl, r4
    d264:	46ab      	mov	fp, r5
    d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = spi_data_read(tmp, size,0);
    d268:	ac05      	add	r4, sp, #20
    d26a:	2200      	movs	r2, #0
    d26c:	4b19      	ldr	r3, [pc, #100]	; (d2d4 <nm_spi_read_block+0x150>)
    d26e:	0031      	movs	r1, r6
    d270:	0020      	movs	r0, r4
    d272:	4798      	blx	r3
		buf[0] = tmp[0];
    d274:	7823      	ldrb	r3, [r4, #0]
    d276:	9a03      	ldr	r2, [sp, #12]
    d278:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    d27a:	2801      	cmp	r0, #1
    d27c:	d0e9      	beq.n	d252 <nm_spi_read_block+0xce>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d27e:	4b08      	ldr	r3, [pc, #32]	; (d2a0 <nm_spi_read_block+0x11c>)
    d280:	4a15      	ldr	r2, [pc, #84]	; (d2d8 <nm_spi_read_block+0x154>)
    d282:	469b      	mov	fp, r3
    d284:	4b08      	ldr	r3, [pc, #32]	; (d2a8 <nm_spi_read_block+0x124>)
    d286:	4659      	mov	r1, fp
    d288:	0018      	movs	r0, r3
    d28a:	4c08      	ldr	r4, [pc, #32]	; (d2ac <nm_spi_read_block+0x128>)
    d28c:	4699      	mov	r9, r3
    d28e:	47a0      	blx	r4
    d290:	4b12      	ldr	r3, [pc, #72]	; (d2dc <nm_spi_read_block+0x158>)
    d292:	4813      	ldr	r0, [pc, #76]	; (d2e0 <nm_spi_read_block+0x15c>)
    d294:	4798      	blx	r3
    d296:	4b07      	ldr	r3, [pc, #28]	; (d2b4 <nm_spi_read_block+0x130>)
    d298:	200d      	movs	r0, #13
    d29a:	4698      	mov	r8, r3
    d29c:	4798      	blx	r3
    d29e:	e78f      	b.n	d1c0 <nm_spi_read_block+0x3c>
    d2a0:	00015cdc 	.word	0x00015cdc
    d2a4:	0000045d 	.word	0x0000045d
    d2a8:	000155a0 	.word	0x000155a0
    d2ac:	0001372d 	.word	0x0001372d
    d2b0:	00015ec8 	.word	0x00015ec8
    d2b4:	00013761 	.word	0x00013761
    d2b8:	0000b025 	.word	0x0000b025
    d2bc:	0000c991 	.word	0x0000c991
    d2c0:	0000caf5 	.word	0x0000caf5
    d2c4:	00000484 	.word	0x00000484
    d2c8:	00015f58 	.word	0x00015f58
    d2cc:	00000463 	.word	0x00000463
    d2d0:	00015ef8 	.word	0x00015ef8
    d2d4:	0000cbf9 	.word	0x0000cbf9
    d2d8:	00000473 	.word	0x00000473
    d2dc:	00013849 	.word	0x00013849
    d2e0:	00015f30 	.word	0x00015f30

0000d2e4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d2e4:	230a      	movs	r3, #10
    d2e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2e8:	46de      	mov	lr, fp
    d2ea:	4657      	mov	r7, sl
    d2ec:	464e      	mov	r6, r9
    d2ee:	4645      	mov	r5, r8
    d2f0:	469a      	mov	sl, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    d2f2:	2300      	movs	r3, #0
{
    d2f4:	b5e0      	push	{r5, r6, r7, lr}
    d2f6:	b08d      	sub	sp, #52	; 0x34
    d2f8:	9003      	str	r0, [sp, #12]
    d2fa:	9105      	str	r1, [sp, #20]
    d2fc:	4691      	mov	r9, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    d2fe:	469b      	mov	fp, r3
    d300:	e030      	b.n	d364 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    d302:	4b90      	ldr	r3, [pc, #576]	; (d544 <nm_spi_write_block+0x260>)
    d304:	4e90      	ldr	r6, [pc, #576]	; (d548 <nm_spi_write_block+0x264>)
    d306:	0019      	movs	r1, r3
    d308:	4a90      	ldr	r2, [pc, #576]	; (d54c <nm_spi_write_block+0x268>)
    d30a:	4c91      	ldr	r4, [pc, #580]	; (d550 <nm_spi_write_block+0x26c>)
    d30c:	0030      	movs	r0, r6
    d30e:	9304      	str	r3, [sp, #16]
    d310:	47a0      	blx	r4
    d312:	0029      	movs	r1, r5
    d314:	488f      	ldr	r0, [pc, #572]	; (d554 <nm_spi_write_block+0x270>)
    d316:	47a0      	blx	r4
    d318:	200d      	movs	r0, #13
    d31a:	4d8f      	ldr	r5, [pc, #572]	; (d558 <nm_spi_write_block+0x274>)
    d31c:	47a8      	blx	r5
		nm_bsp_sleep(1);
    d31e:	4b8f      	ldr	r3, [pc, #572]	; (d55c <nm_spi_write_block+0x278>)
    d320:	2001      	movs	r0, #1
    d322:	4698      	mov	r8, r3
    d324:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d326:	465b      	mov	r3, fp
    d328:	2200      	movs	r2, #0
    d32a:	2100      	movs	r1, #0
    d32c:	9300      	str	r3, [sp, #0]
    d32e:	20cf      	movs	r0, #207	; 0xcf
    d330:	2300      	movs	r3, #0
    d332:	4f8b      	ldr	r7, [pc, #556]	; (d560 <nm_spi_write_block+0x27c>)
    d334:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d336:	4b8b      	ldr	r3, [pc, #556]	; (d564 <nm_spi_write_block+0x280>)
    d338:	20cf      	movs	r0, #207	; 0xcf
    d33a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d33c:	4a8a      	ldr	r2, [pc, #552]	; (d568 <nm_spi_write_block+0x284>)
    d33e:	9904      	ldr	r1, [sp, #16]
    d340:	0030      	movs	r0, r6
    d342:	47a0      	blx	r4
    d344:	464b      	mov	r3, r9
    d346:	4651      	mov	r1, sl
    d348:	9a03      	ldr	r2, [sp, #12]
    d34a:	4888      	ldr	r0, [pc, #544]	; (d56c <nm_spi_write_block+0x288>)
    d34c:	47a0      	blx	r4
    d34e:	200d      	movs	r0, #13
    d350:	47a8      	blx	r5
		nm_bsp_sleep(1);
    d352:	2001      	movs	r0, #1
    d354:	47c0      	blx	r8
    d356:	2301      	movs	r3, #1
    d358:	425b      	negs	r3, r3
    d35a:	469c      	mov	ip, r3
    d35c:	44e2      	add	sl, ip
		if(retry) goto _RETRY_;
    d35e:	4653      	mov	r3, sl
    d360:	2b00      	cmp	r3, #0
    d362:	d025      	beq.n	d3b0 <nm_spi_write_block+0xcc>
	if (size == 1)
    d364:	464b      	mov	r3, r9
    d366:	2b01      	cmp	r3, #1
    d368:	d01e      	beq.n	d3a8 <nm_spi_write_block+0xc4>
	result = spi_cmd(cmd, addr, 0, size,0);
    d36a:	465a      	mov	r2, fp
    d36c:	9d03      	ldr	r5, [sp, #12]
    d36e:	9200      	str	r2, [sp, #0]
    d370:	0029      	movs	r1, r5
    d372:	2200      	movs	r2, #0
    d374:	20c7      	movs	r0, #199	; 0xc7
    d376:	4c7a      	ldr	r4, [pc, #488]	; (d560 <nm_spi_write_block+0x27c>)
    d378:	47a0      	blx	r4
	if (result != N_OK) {
    d37a:	2801      	cmp	r0, #1
    d37c:	d1c1      	bne.n	d302 <nm_spi_write_block+0x1e>
	result = spi_cmd_rsp(cmd);
    d37e:	20c7      	movs	r0, #199	; 0xc7
    d380:	4b78      	ldr	r3, [pc, #480]	; (d564 <nm_spi_write_block+0x280>)
    d382:	4798      	blx	r3
	if (result != N_OK) {
    d384:	2801      	cmp	r0, #1
    d386:	d01c      	beq.n	d3c2 <nm_spi_write_block+0xde>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    d388:	22f4      	movs	r2, #244	; 0xf4
    d38a:	4b6e      	ldr	r3, [pc, #440]	; (d544 <nm_spi_write_block+0x260>)
    d38c:	4e6e      	ldr	r6, [pc, #440]	; (d548 <nm_spi_write_block+0x264>)
    d38e:	0019      	movs	r1, r3
    d390:	0092      	lsls	r2, r2, #2
    d392:	4c6f      	ldr	r4, [pc, #444]	; (d550 <nm_spi_write_block+0x26c>)
    d394:	0030      	movs	r0, r6
    d396:	9304      	str	r3, [sp, #16]
    d398:	47a0      	blx	r4
    d39a:	9903      	ldr	r1, [sp, #12]
    d39c:	4874      	ldr	r0, [pc, #464]	; (d570 <nm_spi_write_block+0x28c>)
    d39e:	47a0      	blx	r4
    d3a0:	4d6d      	ldr	r5, [pc, #436]	; (d558 <nm_spi_write_block+0x274>)
    d3a2:	200d      	movs	r0, #13
    d3a4:	47a8      	blx	r5
    d3a6:	e7ba      	b.n	d31e <nm_spi_write_block+0x3a>
		size = 2;
    d3a8:	2202      	movs	r2, #2
	if (size == 1)
    d3aa:	2302      	movs	r3, #2
		size = 2;
    d3ac:	4691      	mov	r9, r2
    d3ae:	e7dc      	b.n	d36a <nm_spi_write_block+0x86>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    d3b0:	2006      	movs	r0, #6
    d3b2:	4240      	negs	r0, r0

	return s8Ret;
}
    d3b4:	b00d      	add	sp, #52	; 0x34
    d3b6:	bc3c      	pop	{r2, r3, r4, r5}
    d3b8:	4690      	mov	r8, r2
    d3ba:	4699      	mov	r9, r3
    d3bc:	46a2      	mov	sl, r4
    d3be:	46ab      	mov	fp, r5
    d3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8 cmd, order, crc[2] = {0};
    d3c2:	465a      	mov	r2, fp
    d3c4:	ab04      	add	r3, sp, #16
    d3c6:	821a      	strh	r2, [r3, #16]
	ix = 0;
    d3c8:	2300      	movs	r3, #0
	uint8 cmd, order, crc[2] = {0};
    d3ca:	464c      	mov	r4, r9
	ix = 0;
    d3cc:	4698      	mov	r8, r3
    d3ce:	ae09      	add	r6, sp, #36	; 0x24
    d3d0:	4f68      	ldr	r7, [pc, #416]	; (d574 <nm_spi_write_block+0x290>)
    d3d2:	e02a      	b.n	d42a <nm_spi_write_block+0x146>
			if (sz <= DATA_PKT_SZ)
    d3d4:	2280      	movs	r2, #128	; 0x80
    d3d6:	33f1      	adds	r3, #241	; 0xf1
    d3d8:	0192      	lsls	r2, r2, #6
    d3da:	4294      	cmp	r4, r2
    d3dc:	d800      	bhi.n	d3e0 <nm_spi_write_block+0xfc>
    d3de:	3302      	adds	r3, #2
		cmd |= order;
    d3e0:	aa04      	add	r2, sp, #16
    d3e2:	73d3      	strb	r3, [r2, #15]
	spi.pu8InBuf = b;
    d3e4:	4694      	mov	ip, r2
    d3e6:	230f      	movs	r3, #15
    d3e8:	4463      	add	r3, ip
    d3ea:	6033      	str	r3, [r6, #0]
	spi.pu8OutBuf = NULL;
    d3ec:	465b      	mov	r3, fp
    d3ee:	6073      	str	r3, [r6, #4]
	spi.u16Sz = sz;
    d3f0:	2301      	movs	r3, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d3f2:	0031      	movs	r1, r6
    d3f4:	2003      	movs	r0, #3
	spi.u16Sz = sz;
    d3f6:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d3f8:	47b8      	blx	r7
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    d3fa:	2800      	cmp	r0, #0
    d3fc:	d139      	bne.n	d472 <nm_spi_write_block+0x18e>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d3fe:	9b05      	ldr	r3, [sp, #20]
	spi.pu8OutBuf = NULL;
    d400:	6070      	str	r0, [r6, #4]
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d402:	4443      	add	r3, r8
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d404:	0031      	movs	r1, r6
    d406:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    d408:	6033      	str	r3, [r6, #0]
	spi.u16Sz = sz;
    d40a:	8135      	strh	r5, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d40c:	47b8      	blx	r7
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d40e:	2800      	cmp	r0, #0
    d410:	d149      	bne.n	d4a6 <nm_spi_write_block+0x1c2>
		if (!gu8Crc_off) {
    d412:	4b59      	ldr	r3, [pc, #356]	; (d578 <nm_spi_write_block+0x294>)
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	2b00      	cmp	r3, #0
    d418:	d019      	beq.n	d44e <nm_spi_write_block+0x16a>
		ix += nbytes;
    d41a:	4643      	mov	r3, r8
		sz -= nbytes;
    d41c:	1b64      	subs	r4, r4, r5
		ix += nbytes;
    d41e:	18eb      	adds	r3, r5, r3
    d420:	b21b      	sxth	r3, r3
		sz -= nbytes;
    d422:	b2a4      	uxth	r4, r4
		ix += nbytes;
    d424:	4698      	mov	r8, r3
	} while (sz);
    d426:	2c00      	cmp	r4, #0
    d428:	d045      	beq.n	d4b6 <nm_spi_write_block+0x1d2>
    d42a:	2380      	movs	r3, #128	; 0x80
    d42c:	1c25      	adds	r5, r4, #0
    d42e:	019b      	lsls	r3, r3, #6
    d430:	429c      	cmp	r4, r3
    d432:	d901      	bls.n	d438 <nm_spi_write_block+0x154>
    d434:	4b51      	ldr	r3, [pc, #324]	; (d57c <nm_spi_write_block+0x298>)
    d436:	881d      	ldrh	r5, [r3, #0]
		if (ix == 0)  {
    d438:	4643      	mov	r3, r8
    d43a:	b2ad      	uxth	r5, r5
    d43c:	2b00      	cmp	r3, #0
    d43e:	d0c9      	beq.n	d3d4 <nm_spi_write_block+0xf0>
			if (sz <= DATA_PKT_SZ)
    d440:	2180      	movs	r1, #128	; 0x80
    d442:	465b      	mov	r3, fp
    d444:	0189      	lsls	r1, r1, #6
    d446:	42a1      	cmp	r1, r4
    d448:	415b      	adcs	r3, r3
    d44a:	33f2      	adds	r3, #242	; 0xf2
    d44c:	e7c8      	b.n	d3e0 <nm_spi_write_block+0xfc>
	spi.pu8InBuf = b;
    d44e:	aa08      	add	r2, sp, #32
	spi.pu8OutBuf = NULL;
    d450:	6073      	str	r3, [r6, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d452:	0031      	movs	r1, r6
	spi.u16Sz = sz;
    d454:	3302      	adds	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d456:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    d458:	6032      	str	r2, [r6, #0]
	spi.u16Sz = sz;
    d45a:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d45c:	47b8      	blx	r7
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    d45e:	2800      	cmp	r0, #0
    d460:	d0db      	beq.n	d41a <nm_spi_write_block+0x136>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d462:	4e39      	ldr	r6, [pc, #228]	; (d548 <nm_spi_write_block+0x264>)
    d464:	4a46      	ldr	r2, [pc, #280]	; (d580 <nm_spi_write_block+0x29c>)
    d466:	4947      	ldr	r1, [pc, #284]	; (d584 <nm_spi_write_block+0x2a0>)
    d468:	0030      	movs	r0, r6
    d46a:	4c39      	ldr	r4, [pc, #228]	; (d550 <nm_spi_write_block+0x26c>)
    d46c:	47a0      	blx	r4
    d46e:	4846      	ldr	r0, [pc, #280]	; (d588 <nm_spi_write_block+0x2a4>)
    d470:	e007      	b.n	d482 <nm_spi_write_block+0x19e>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    d472:	22d4      	movs	r2, #212	; 0xd4
    d474:	4e34      	ldr	r6, [pc, #208]	; (d548 <nm_spi_write_block+0x264>)
    d476:	0092      	lsls	r2, r2, #2
    d478:	4942      	ldr	r1, [pc, #264]	; (d584 <nm_spi_write_block+0x2a0>)
    d47a:	0030      	movs	r0, r6
    d47c:	4c34      	ldr	r4, [pc, #208]	; (d550 <nm_spi_write_block+0x26c>)
    d47e:	47a0      	blx	r4
    d480:	4842      	ldr	r0, [pc, #264]	; (d58c <nm_spi_write_block+0x2a8>)
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d482:	4b43      	ldr	r3, [pc, #268]	; (d590 <nm_spi_write_block+0x2ac>)
    d484:	4698      	mov	r8, r3
    d486:	4798      	blx	r3
    d488:	200d      	movs	r0, #13
    d48a:	4d33      	ldr	r5, [pc, #204]	; (d558 <nm_spi_write_block+0x274>)
    d48c:	47a8      	blx	r5
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d48e:	22f8      	movs	r2, #248	; 0xf8
    d490:	4b2c      	ldr	r3, [pc, #176]	; (d544 <nm_spi_write_block+0x260>)
    d492:	9304      	str	r3, [sp, #16]
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d494:	0092      	lsls	r2, r2, #2
    d496:	0019      	movs	r1, r3
    d498:	0030      	movs	r0, r6
    d49a:	47a0      	blx	r4
    d49c:	483d      	ldr	r0, [pc, #244]	; (d594 <nm_spi_write_block+0x2b0>)
    d49e:	47c0      	blx	r8
    d4a0:	200d      	movs	r0, #13
    d4a2:	47a8      	blx	r5
    d4a4:	e73b      	b.n	d31e <nm_spi_write_block+0x3a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    d4a6:	4e28      	ldr	r6, [pc, #160]	; (d548 <nm_spi_write_block+0x264>)
    d4a8:	4a3b      	ldr	r2, [pc, #236]	; (d598 <nm_spi_write_block+0x2b4>)
    d4aa:	4936      	ldr	r1, [pc, #216]	; (d584 <nm_spi_write_block+0x2a0>)
    d4ac:	0030      	movs	r0, r6
    d4ae:	4c28      	ldr	r4, [pc, #160]	; (d550 <nm_spi_write_block+0x26c>)
    d4b0:	47a0      	blx	r4
    d4b2:	483a      	ldr	r0, [pc, #232]	; (d59c <nm_spi_write_block+0x2b8>)
    d4b4:	e7e5      	b.n	d482 <nm_spi_write_block+0x19e>
    if (!gu8Crc_off)
    d4b6:	4b30      	ldr	r3, [pc, #192]	; (d578 <nm_spi_write_block+0x294>)
    d4b8:	781b      	ldrb	r3, [r3, #0]
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d12e      	bne.n	d51c <nm_spi_write_block+0x238>
		len = 2;
    d4be:	2402      	movs	r4, #2
    if (!gu8Crc_off)
    d4c0:	3302      	adds	r3, #2
	spi.pu8InBuf = NULL;
    d4c2:	465a      	mov	r2, fp
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d4c4:	0031      	movs	r1, r6
	spi.pu8InBuf = NULL;
    d4c6:	6032      	str	r2, [r6, #0]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d4c8:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d4ca:	aa08      	add	r2, sp, #32
    d4cc:	6072      	str	r2, [r6, #4]
	spi.u16Sz = sz;
    d4ce:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d4d0:	47b8      	blx	r7
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    d4d2:	2800      	cmp	r0, #0
    d4d4:	d127      	bne.n	d526 <nm_spi_write_block+0x242>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    d4d6:	ab08      	add	r3, sp, #32
    d4d8:	469c      	mov	ip, r3
    d4da:	4464      	add	r4, ip
    d4dc:	1e63      	subs	r3, r4, #1
    d4de:	781b      	ldrb	r3, [r3, #0]
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	d103      	bne.n	d4ec <nm_spi_write_block+0x208>
    d4e4:	3c02      	subs	r4, #2
    d4e6:	7823      	ldrb	r3, [r4, #0]
    d4e8:	2bc3      	cmp	r3, #195	; 0xc3
    d4ea:	d01a      	beq.n	d522 <nm_spi_write_block+0x23e>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    d4ec:	22a1      	movs	r2, #161	; 0xa1
    d4ee:	4e16      	ldr	r6, [pc, #88]	; (d548 <nm_spi_write_block+0x264>)
    d4f0:	0052      	lsls	r2, r2, #1
    d4f2:	492b      	ldr	r1, [pc, #172]	; (d5a0 <nm_spi_write_block+0x2bc>)
    d4f4:	4c16      	ldr	r4, [pc, #88]	; (d550 <nm_spi_write_block+0x26c>)
    d4f6:	0030      	movs	r0, r6
    d4f8:	47a0      	blx	r4
    d4fa:	ab04      	add	r3, sp, #16
    d4fc:	aa04      	add	r2, sp, #16
    d4fe:	a904      	add	r1, sp, #16
    d500:	7c9b      	ldrb	r3, [r3, #18]
    d502:	7c52      	ldrb	r2, [r2, #17]
    d504:	7c09      	ldrb	r1, [r1, #16]
    d506:	4827      	ldr	r0, [pc, #156]	; (d5a4 <nm_spi_write_block+0x2c0>)
    d508:	47a0      	blx	r4
    d50a:	200d      	movs	r0, #13
    d50c:	4d12      	ldr	r5, [pc, #72]	; (d558 <nm_spi_write_block+0x274>)
    d50e:	47a8      	blx	r5
    d510:	4b1f      	ldr	r3, [pc, #124]	; (d590 <nm_spi_write_block+0x2ac>)
    d512:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d514:	4b0b      	ldr	r3, [pc, #44]	; (d544 <nm_spi_write_block+0x260>)
    d516:	22fa      	movs	r2, #250	; 0xfa
    d518:	9304      	str	r3, [sp, #16]
    d51a:	e7bb      	b.n	d494 <nm_spi_write_block+0x1b0>
    if (!gu8Crc_off)
    d51c:	2303      	movs	r3, #3
		len = 3;
    d51e:	2403      	movs	r4, #3
    d520:	e7cf      	b.n	d4c2 <nm_spi_write_block+0x1de>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d522:	2000      	movs	r0, #0
    d524:	e746      	b.n	d3b4 <nm_spi_write_block+0xd0>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    d526:	223c      	movs	r2, #60	; 0x3c
    d528:	4e07      	ldr	r6, [pc, #28]	; (d548 <nm_spi_write_block+0x264>)
    d52a:	32ff      	adds	r2, #255	; 0xff
    d52c:	491c      	ldr	r1, [pc, #112]	; (d5a0 <nm_spi_write_block+0x2bc>)
    d52e:	0030      	movs	r0, r6
    d530:	4c07      	ldr	r4, [pc, #28]	; (d550 <nm_spi_write_block+0x26c>)
    d532:	47a0      	blx	r4
    d534:	4b16      	ldr	r3, [pc, #88]	; (d590 <nm_spi_write_block+0x2ac>)
    d536:	481c      	ldr	r0, [pc, #112]	; (d5a8 <nm_spi_write_block+0x2c4>)
    d538:	4698      	mov	r8, r3
    d53a:	4798      	blx	r3
    d53c:	4d06      	ldr	r5, [pc, #24]	; (d558 <nm_spi_write_block+0x274>)
    d53e:	200d      	movs	r0, #13
    d540:	47a8      	blx	r5
    d542:	e7e7      	b.n	d514 <nm_spi_write_block+0x230>
    d544:	00015cbc 	.word	0x00015cbc
    d548:	000155a0 	.word	0x000155a0
    d54c:	000003ca 	.word	0x000003ca
    d550:	0001372d 	.word	0x0001372d
    d554:	00015f74 	.word	0x00015f74
    d558:	00013761 	.word	0x00013761
    d55c:	0000b025 	.word	0x0000b025
    d560:	0000c991 	.word	0x0000c991
    d564:	0000caf5 	.word	0x0000caf5
    d568:	000003f2 	.word	0x000003f2
    d56c:	00015f58 	.word	0x00015f58
    d570:	00015fa4 	.word	0x00015fa4
    d574:	0000b1bd 	.word	0x0000b1bd
    d578:	200006fc 	.word	0x200006fc
    d57c:	00015c60 	.word	0x00015c60
    d580:	00000363 	.word	0x00000363
    d584:	00015c9c 	.word	0x00015c9c
    d588:	00016048 	.word	0x00016048
    d58c:	00015fdc 	.word	0x00015fdc
    d590:	00013849 	.word	0x00013849
    d594:	000160d0 	.word	0x000160d0
    d598:	00000359 	.word	0x00000359
    d59c:	00016014 	.word	0x00016014
    d5a0:	00015c70 	.word	0x00015c70
    d5a4:	000160a0 	.word	0x000160a0
    d5a8:	00016080 	.word	0x00016080

0000d5ac <Socket_ReadSocketData.part.0>:
		1.0

Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ae:	464e      	mov	r6, r9
    d5b0:	4645      	mov	r5, r8
    d5b2:	4657      	mov	r7, sl
    d5b4:	46de      	mov	lr, fp
    d5b6:	b5e0      	push	{r5, r6, r7, lr}
    d5b8:	b085      	sub	sp, #20
    d5ba:	001f      	movs	r7, r3
    d5bc:	ab0e      	add	r3, sp, #56	; 0x38
    d5be:	881d      	ldrh	r5, [r3, #0]
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    d5c0:	4b38      	ldr	r3, [pc, #224]	; (d6a4 <Socket_ReadSocketData.part.0+0xf8>)
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    d5c2:	9203      	str	r2, [sp, #12]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    d5c4:	4699      	mov	r9, r3
    d5c6:	0103      	lsls	r3, r0, #4
    d5c8:	4698      	mov	r8, r3
    d5ca:	464b      	mov	r3, r9
    d5cc:	4642      	mov	r2, r8
    d5ce:	589b      	ldr	r3, [r3, r2]
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    d5d0:	9002      	str	r0, [sp, #8]
    d5d2:	000e      	movs	r6, r1
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	d007      	beq.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
    d5d8:	464b      	mov	r3, r9
    d5da:	4443      	add	r3, r8
    d5dc:	889a      	ldrh	r2, [r3, #4]
    d5de:	2a00      	cmp	r2, #0
    d5e0:	d002      	beq.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
    d5e2:	7a9a      	ldrb	r2, [r3, #10]
    d5e4:	2a01      	cmp	r2, #1
    d5e6:	d006      	beq.n	d5f6 <Socket_ReadSocketData.part.0+0x4a>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    d5e8:	b005      	add	sp, #20
    d5ea:	bc3c      	pop	{r2, r3, r4, r5}
    d5ec:	4690      	mov	r8, r2
    d5ee:	4699      	mov	r9, r3
    d5f0:	46a2      	mov	sl, r4
    d5f2:	46ab      	mov	fp, r5
    d5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d5f6:	469a      	mov	sl, r3
				if (gpfAppSocketCb)
    d5f8:	4b2b      	ldr	r3, [pc, #172]	; (d6a8 <Socket_ReadSocketData.part.0+0xfc>)
		pstrRecv->u16RemainingSize = u16ReadCount;
    d5fa:	80cd      	strh	r5, [r1, #6]
				if (gpfAppSocketCb)
    d5fc:	469b      	mov	fp, r3
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d5fe:	230a      	movs	r3, #10
    d600:	4453      	add	r3, sl
    d602:	9301      	str	r3, [sp, #4]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d604:	4653      	mov	r3, sl
    d606:	889b      	ldrh	r3, [r3, #4]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d608:	9700      	str	r7, [sp, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d60a:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    d60c:	b21b      	sxth	r3, r3
    d60e:	2b00      	cmp	r3, #0
    d610:	dd3a      	ble.n	d688 <Socket_ReadSocketData.part.0+0xdc>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    d612:	4653      	mov	r3, sl
    d614:	889c      	ldrh	r4, [r3, #4]
				u8SetRxDone = 0;
    d616:	2300      	movs	r3, #0
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    d618:	b2a4      	uxth	r4, r4
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    d61a:	464a      	mov	r2, r9
    d61c:	4641      	mov	r1, r8
    d61e:	9800      	ldr	r0, [sp, #0]
    d620:	5851      	ldr	r1, [r2, r1]
    d622:	4f22      	ldr	r7, [pc, #136]	; (d6ac <Socket_ReadSocketData.part.0+0x100>)
    d624:	0022      	movs	r2, r4
    d626:	47b8      	blx	r7
    d628:	2800      	cmp	r0, #0
    d62a:	d130      	bne.n	d68e <Socket_ReadSocketData.part.0+0xe2>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    d62c:	464b      	mov	r3, r9
    d62e:	4642      	mov	r2, r8
    d630:	589b      	ldr	r3, [r3, r2]
				pstrRecv->s16BufferSize		= u16Read;
    d632:	80b4      	strh	r4, [r6, #4]
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    d634:	6033      	str	r3, [r6, #0]
				pstrRecv->u16RemainingSize	-= u16Read;
    d636:	88f3      	ldrh	r3, [r6, #6]
    d638:	1b1b      	subs	r3, r3, r4
    d63a:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    d63c:	465b      	mov	r3, fp
    d63e:	681b      	ldr	r3, [r3, #0]
    d640:	2b00      	cmp	r3, #0
    d642:	d005      	beq.n	d650 <Socket_ReadSocketData.part.0+0xa4>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    d644:	465b      	mov	r3, fp
    d646:	0032      	movs	r2, r6
    d648:	681b      	ldr	r3, [r3, #0]
    d64a:	9903      	ldr	r1, [sp, #12]
    d64c:	9802      	ldr	r0, [sp, #8]
    d64e:	4798      	blx	r3
				u32Address += u16Read;
    d650:	9b00      	ldr	r3, [sp, #0]
				u16ReadCount -= u16Read;
    d652:	1b2d      	subs	r5, r5, r4
				u32Address += u16Read;
    d654:	469c      	mov	ip, r3
    d656:	44a4      	add	ip, r4
    d658:	4663      	mov	r3, ip
    d65a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d65c:	9b01      	ldr	r3, [sp, #4]
				u16ReadCount -= u16Read;
    d65e:	b2ad      	uxth	r5, r5
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d660:	781b      	ldrb	r3, [r3, #0]
    d662:	2b00      	cmp	r3, #0
    d664:	d108      	bne.n	d678 <Socket_ReadSocketData.part.0+0xcc>
    d666:	2d00      	cmp	r5, #0
    d668:	d0be      	beq.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d66a:	3301      	adds	r3, #1
    d66c:	2200      	movs	r2, #0
    d66e:	2100      	movs	r1, #0
    d670:	4c0e      	ldr	r4, [pc, #56]	; (d6ac <Socket_ReadSocketData.part.0+0x100>)
    d672:	2000      	movs	r0, #0
    d674:	47a0      	blx	r4
    d676:	e7b7      	b.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
		}while(u16ReadCount != 0);
    d678:	2d00      	cmp	r5, #0
    d67a:	d0b5      	beq.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d67c:	4653      	mov	r3, sl
    d67e:	889b      	ldrh	r3, [r3, #4]
    d680:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    d682:	b21b      	sxth	r3, r3
    d684:	2b00      	cmp	r3, #0
    d686:	dcc4      	bgt.n	d612 <Socket_ReadSocketData.part.0+0x66>
    d688:	002c      	movs	r4, r5
			u8SetRxDone = 1;
    d68a:	2301      	movs	r3, #1
    d68c:	e7c5      	b.n	d61a <Socket_ReadSocketData.part.0+0x6e>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    d68e:	4c08      	ldr	r4, [pc, #32]	; (d6b0 <Socket_ReadSocketData.part.0+0x104>)
    d690:	4808      	ldr	r0, [pc, #32]	; (d6b4 <Socket_ReadSocketData.part.0+0x108>)
    d692:	47a0      	blx	r4
    d694:	0029      	movs	r1, r5
    d696:	4808      	ldr	r0, [pc, #32]	; (d6b8 <Socket_ReadSocketData.part.0+0x10c>)
    d698:	47a0      	blx	r4
    d69a:	4b08      	ldr	r3, [pc, #32]	; (d6bc <Socket_ReadSocketData.part.0+0x110>)
    d69c:	200d      	movs	r0, #13
    d69e:	4798      	blx	r3
    d6a0:	e7a2      	b.n	d5e8 <Socket_ReadSocketData.part.0+0x3c>
    d6a2:	46c0      	nop			; (mov r8, r8)
    d6a4:	20000b98 	.word	0x20000b98
    d6a8:	20000c48 	.word	0x20000c48
    d6ac:	0000ba1d 	.word	0x0000ba1d
    d6b0:	0001372d 	.word	0x0001372d
    d6b4:	000158d0 	.word	0x000158d0
    d6b8:	00016338 	.word	0x00016338
    d6bc:	00013761 	.word	0x00013761

0000d6c0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    d6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6c2:	46d6      	mov	lr, sl
    d6c4:	464f      	mov	r7, r9
    d6c6:	4646      	mov	r6, r8
    d6c8:	b5c0      	push	{r6, r7, lr}
    d6ca:	000d      	movs	r5, r1
    d6cc:	b09a      	sub	sp, #104	; 0x68
    d6ce:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    d6d0:	2841      	cmp	r0, #65	; 0x41
    d6d2:	d041      	beq.n	d758 <m2m_ip_cb+0x98>
    d6d4:	2854      	cmp	r0, #84	; 0x54
    d6d6:	d03f      	beq.n	d758 <m2m_ip_cb+0x98>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    d6d8:	2842      	cmp	r0, #66	; 0x42
    d6da:	d100      	bne.n	d6de <m2m_ip_cb+0x1e>
    d6dc:	e0e3      	b.n	d8a6 <m2m_ip_cb+0x1e6>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    d6de:	2843      	cmp	r0, #67	; 0x43
    d6e0:	d051      	beq.n	d786 <m2m_ip_cb+0xc6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    d6e2:	2844      	cmp	r0, #68	; 0x44
    d6e4:	d100      	bne.n	d6e8 <m2m_ip_cb+0x28>
    d6e6:	e0b9      	b.n	d85c <m2m_ip_cb+0x19c>
    d6e8:	284b      	cmp	r0, #75	; 0x4b
    d6ea:	d100      	bne.n	d6ee <m2m_ip_cb+0x2e>
    d6ec:	e0b6      	b.n	d85c <m2m_ip_cb+0x19c>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    d6ee:	284a      	cmp	r0, #74	; 0x4a
    d6f0:	d100      	bne.n	d6f4 <m2m_ip_cb+0x34>
    d6f2:	e115      	b.n	d920 <m2m_ip_cb+0x260>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    d6f4:	2846      	cmp	r0, #70	; 0x46
    d6f6:	d100      	bne.n	d6fa <m2m_ip_cb+0x3a>
    d6f8:	e084      	b.n	d804 <m2m_ip_cb+0x144>
    d6fa:	2848      	cmp	r0, #72	; 0x48
    d6fc:	d100      	bne.n	d700 <m2m_ip_cb+0x40>
    d6fe:	e0eb      	b.n	d8d8 <m2m_ip_cb+0x218>
    d700:	284d      	cmp	r0, #77	; 0x4d
    d702:	d100      	bne.n	d706 <m2m_ip_cb+0x46>
    d704:	e07e      	b.n	d804 <m2m_ip_cb+0x144>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    d706:	2845      	cmp	r0, #69	; 0x45
    d708:	d100      	bne.n	d70c <m2m_ip_cb+0x4c>
    d70a:	e11e      	b.n	d94a <m2m_ip_cb+0x28a>
    d70c:	2847      	cmp	r0, #71	; 0x47
    d70e:	d100      	bne.n	d712 <m2m_ip_cb+0x52>
    d710:	e0e5      	b.n	d8de <m2m_ip_cb+0x21e>
    d712:	284c      	cmp	r0, #76	; 0x4c
    d714:	d100      	bne.n	d718 <m2m_ip_cb+0x58>
    d716:	e118      	b.n	d94a <m2m_ip_cb+0x28a>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    d718:	2852      	cmp	r0, #82	; 0x52
    d71a:	d117      	bne.n	d74c <m2m_ip_cb+0x8c>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    d71c:	0020      	movs	r0, r4
    d71e:	2301      	movs	r3, #1
    d720:	2214      	movs	r2, #20
    d722:	a909      	add	r1, sp, #36	; 0x24
    d724:	4c9b      	ldr	r4, [pc, #620]	; (d994 <m2m_ip_cb+0x2d4>)
    d726:	47a0      	blx	r4
    d728:	2800      	cmp	r0, #0
    d72a:	d10f      	bne.n	d74c <m2m_ip_cb+0x8c>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    d72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d72e:	9303      	str	r3, [sp, #12]
    d730:	9a03      	ldr	r2, [sp, #12]
    d732:	4b99      	ldr	r3, [pc, #612]	; (d998 <m2m_ip_cb+0x2d8>)
    d734:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    d736:	681a      	ldr	r2, [r3, #0]
    d738:	2a00      	cmp	r2, #0
    d73a:	d007      	beq.n	d74c <m2m_ip_cb+0x8c>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    d73c:	212c      	movs	r1, #44	; 0x2c
    d73e:	aa02      	add	r2, sp, #8
    d740:	1852      	adds	r2, r2, r1
    d742:	681b      	ldr	r3, [r3, #0]
    d744:	7812      	ldrb	r2, [r2, #0]
    d746:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d748:	9809      	ldr	r0, [sp, #36]	; 0x24
    d74a:	4798      	blx	r3
			}
		}
	}
}
    d74c:	b01a      	add	sp, #104	; 0x68
    d74e:	bc1c      	pop	{r2, r3, r4}
    d750:	4690      	mov	r8, r2
    d752:	4699      	mov	r9, r3
    d754:	46a2      	mov	sl, r4
    d756:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    d758:	0020      	movs	r0, r4
    d75a:	2300      	movs	r3, #0
    d75c:	2204      	movs	r2, #4
    d75e:	a909      	add	r1, sp, #36	; 0x24
    d760:	4c8c      	ldr	r4, [pc, #560]	; (d994 <m2m_ip_cb+0x2d4>)
    d762:	47a0      	blx	r4
    d764:	2800      	cmp	r0, #0
    d766:	d1f1      	bne.n	d74c <m2m_ip_cb+0x8c>
			strBind.status = strBindReply.s8Status;
    d768:	ab02      	add	r3, sp, #8
    d76a:	7f5b      	ldrb	r3, [r3, #29]
    d76c:	aa05      	add	r2, sp, #20
    d76e:	7013      	strb	r3, [r2, #0]
			if(gpfAppSocketCb)
    d770:	4b8a      	ldr	r3, [pc, #552]	; (d99c <m2m_ip_cb+0x2dc>)
    d772:	6819      	ldr	r1, [r3, #0]
    d774:	2900      	cmp	r1, #0
    d776:	d0e9      	beq.n	d74c <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    d778:	201c      	movs	r0, #28
    d77a:	a902      	add	r1, sp, #8
    d77c:	5608      	ldrsb	r0, [r1, r0]
    d77e:	681b      	ldr	r3, [r3, #0]
    d780:	2101      	movs	r1, #1
    d782:	4798      	blx	r3
	{
    d784:	e7e2      	b.n	d74c <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    d786:	ad05      	add	r5, sp, #20
    d788:	0020      	movs	r0, r4
    d78a:	2300      	movs	r3, #0
    d78c:	220c      	movs	r2, #12
    d78e:	0029      	movs	r1, r5
    d790:	4c80      	ldr	r4, [pc, #512]	; (d994 <m2m_ip_cb+0x2d4>)
    d792:	47a0      	blx	r4
    d794:	2800      	cmp	r0, #0
    d796:	d1d9      	bne.n	d74c <m2m_ip_cb+0x8c>
			if(strAcceptReply.sConnectedSock >= 0)
    d798:	2009      	movs	r0, #9
    d79a:	5628      	ldrsb	r0, [r5, r0]
    d79c:	2800      	cmp	r0, #0
    d79e:	db1f      	blt.n	d7e0 <m2m_ip_cb+0x120>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    d7a0:	2208      	movs	r2, #8
    d7a2:	56aa      	ldrsb	r2, [r5, r2]
    d7a4:	4b7e      	ldr	r3, [pc, #504]	; (d9a0 <m2m_ip_cb+0x2e0>)
    d7a6:	0112      	lsls	r2, r2, #4
    d7a8:	189a      	adds	r2, r3, r2
    d7aa:	7ad2      	ldrb	r2, [r2, #11]
    d7ac:	0104      	lsls	r4, r0, #4
    d7ae:	1919      	adds	r1, r3, r4
    d7b0:	b2d2      	uxtb	r2, r2
    d7b2:	72ca      	strb	r2, [r1, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    d7b4:	2201      	movs	r2, #1
    d7b6:	728a      	strb	r2, [r1, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d7b8:	896a      	ldrh	r2, [r5, #10]
    d7ba:	3a08      	subs	r2, #8
    d7bc:	b292      	uxth	r2, r2
    d7be:	810a      	strh	r2, [r1, #8]
				++gu16SessionID;
    d7c0:	4a78      	ldr	r2, [pc, #480]	; (d9a4 <m2m_ip_cb+0x2e4>)
    d7c2:	8811      	ldrh	r1, [r2, #0]
    d7c4:	3101      	adds	r1, #1
    d7c6:	b289      	uxth	r1, r1
    d7c8:	8011      	strh	r1, [r2, #0]
				if(gu16SessionID == 0)
    d7ca:	8811      	ldrh	r1, [r2, #0]
    d7cc:	2900      	cmp	r1, #0
    d7ce:	d103      	bne.n	d7d8 <m2m_ip_cb+0x118>
					++gu16SessionID;
    d7d0:	8811      	ldrh	r1, [r2, #0]
    d7d2:	3101      	adds	r1, #1
    d7d4:	b289      	uxth	r1, r1
    d7d6:	8011      	strh	r1, [r2, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    d7d8:	8812      	ldrh	r2, [r2, #0]
    d7da:	191b      	adds	r3, r3, r4
    d7dc:	b292      	uxth	r2, r2
    d7de:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_family		= AF_INET;
    d7e0:	2302      	movs	r3, #2
			strAccept.sock = strAcceptReply.sConnectedSock;
    d7e2:	aa09      	add	r2, sp, #36	; 0x24
    d7e4:	7010      	strb	r0, [r2, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    d7e6:	8093      	strh	r3, [r2, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    d7e8:	886b      	ldrh	r3, [r5, #2]
    d7ea:	80d3      	strh	r3, [r2, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    d7ec:	686b      	ldr	r3, [r5, #4]
    d7ee:	6093      	str	r3, [r2, #8]
			if(gpfAppSocketCb)
    d7f0:	4b6a      	ldr	r3, [pc, #424]	; (d99c <m2m_ip_cb+0x2dc>)
    d7f2:	6819      	ldr	r1, [r3, #0]
    d7f4:	2900      	cmp	r1, #0
    d7f6:	d0a9      	beq.n	d74c <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    d7f8:	2008      	movs	r0, #8
    d7fa:	681b      	ldr	r3, [r3, #0]
    d7fc:	5628      	ldrsb	r0, [r5, r0]
    d7fe:	2104      	movs	r1, #4
    d800:	4798      	blx	r3
    d802:	e7a3      	b.n	d74c <m2m_ip_cb+0x8c>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    d804:	2306      	movs	r3, #6
    d806:	4698      	mov	r8, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    d808:	ae05      	add	r6, sp, #20
    d80a:	2300      	movs	r3, #0
    d80c:	2210      	movs	r2, #16
    d80e:	0031      	movs	r1, r6
    d810:	0020      	movs	r0, r4
    d812:	4f60      	ldr	r7, [pc, #384]	; (d994 <m2m_ip_cb+0x2d4>)
    d814:	47b8      	blx	r7
    d816:	2800      	cmp	r0, #0
    d818:	d000      	beq.n	d81c <m2m_ip_cb+0x15c>
    d81a:	e797      	b.n	d74c <m2m_ip_cb+0x8c>
			sock			= strRecvReply.sock;
    d81c:	230c      	movs	r3, #12
    d81e:	56f3      	ldrsb	r3, [r6, r3]
			gastrSockets[sock].bIsRecvPending = 0;
    d820:	4a5f      	ldr	r2, [pc, #380]	; (d9a0 <m2m_ip_cb+0x2e0>)
			sock			= strRecvReply.sock;
    d822:	469c      	mov	ip, r3
			gastrSockets[sock].bIsRecvPending = 0;
    d824:	011b      	lsls	r3, r3, #4
    d826:	18d2      	adds	r2, r2, r3
			u16SessionID = strRecvReply.u16SessionID;
    d828:	89f1      	ldrh	r1, [r6, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    d82a:	7310      	strb	r0, [r2, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    d82c:	2308      	movs	r3, #8
    d82e:	5ef0      	ldrsh	r0, [r6, r3]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    d830:	ab02      	add	r3, sp, #8
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    d832:	4682      	mov	sl, r0
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    d834:	8970      	ldrh	r0, [r6, #10]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d836:	88d2      	ldrh	r2, [r2, #6]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    d838:	4681      	mov	r9, r0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    d83a:	8870      	ldrh	r0, [r6, #2]
    d83c:	84d8      	strh	r0, [r3, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    d83e:	6873      	ldr	r3, [r6, #4]
    d840:	9303      	str	r3, [sp, #12]
    d842:	930c      	str	r3, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d844:	4291      	cmp	r1, r2
    d846:	d100      	bne.n	d84a <m2m_ip_cb+0x18a>
    d848:	e081      	b.n	d94e <m2m_ip_cb+0x28e>
				if(u16ReadSize < u16BufferSize)
    d84a:	2d10      	cmp	r5, #16
    d84c:	d800      	bhi.n	d850 <m2m_ip_cb+0x190>
    d84e:	e77d      	b.n	d74c <m2m_ip_cb+0x8c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d850:	2301      	movs	r3, #1
    d852:	2200      	movs	r2, #0
    d854:	2100      	movs	r1, #0
    d856:	2000      	movs	r0, #0
    d858:	47b8      	blx	r7
    d85a:	e777      	b.n	d74c <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    d85c:	0020      	movs	r0, r4
    d85e:	2300      	movs	r3, #0
    d860:	2204      	movs	r2, #4
    d862:	a909      	add	r1, sp, #36	; 0x24
    d864:	4c4b      	ldr	r4, [pc, #300]	; (d994 <m2m_ip_cb+0x2d4>)
    d866:	47a0      	blx	r4
    d868:	2800      	cmp	r0, #0
    d86a:	d000      	beq.n	d86e <m2m_ip_cb+0x1ae>
    d86c:	e76e      	b.n	d74c <m2m_ip_cb+0x8c>
			strConnMsg.sock		= strConnectReply.sock;
    d86e:	201c      	movs	r0, #28
    d870:	ab02      	add	r3, sp, #8
    d872:	5618      	ldrsb	r0, [r3, r0]
    d874:	ad05      	add	r5, sp, #20
    d876:	7028      	strb	r0, [r5, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    d878:	7f5b      	ldrb	r3, [r3, #29]
    d87a:	b25b      	sxtb	r3, r3
    d87c:	706b      	strb	r3, [r5, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    d87e:	2b00      	cmp	r3, #0
    d880:	d107      	bne.n	d892 <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d882:	ab02      	add	r3, sp, #8
    d884:	8bdb      	ldrh	r3, [r3, #30]
    d886:	4a46      	ldr	r2, [pc, #280]	; (d9a0 <m2m_ip_cb+0x2e0>)
    d888:	3b08      	subs	r3, #8
    d88a:	0101      	lsls	r1, r0, #4
    d88c:	b29b      	uxth	r3, r3
    d88e:	1852      	adds	r2, r2, r1
    d890:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    d892:	4b42      	ldr	r3, [pc, #264]	; (d99c <m2m_ip_cb+0x2dc>)
    d894:	681a      	ldr	r2, [r3, #0]
    d896:	2a00      	cmp	r2, #0
    d898:	d100      	bne.n	d89c <m2m_ip_cb+0x1dc>
    d89a:	e757      	b.n	d74c <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    d89c:	681b      	ldr	r3, [r3, #0]
    d89e:	002a      	movs	r2, r5
    d8a0:	2105      	movs	r1, #5
    d8a2:	4798      	blx	r3
    d8a4:	e752      	b.n	d74c <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    d8a6:	0020      	movs	r0, r4
    d8a8:	2300      	movs	r3, #0
    d8aa:	2204      	movs	r2, #4
    d8ac:	a909      	add	r1, sp, #36	; 0x24
    d8ae:	4c39      	ldr	r4, [pc, #228]	; (d994 <m2m_ip_cb+0x2d4>)
    d8b0:	47a0      	blx	r4
    d8b2:	2800      	cmp	r0, #0
    d8b4:	d000      	beq.n	d8b8 <m2m_ip_cb+0x1f8>
    d8b6:	e749      	b.n	d74c <m2m_ip_cb+0x8c>
			strListen.status = strListenReply.s8Status;
    d8b8:	ab02      	add	r3, sp, #8
    d8ba:	7f5b      	ldrb	r3, [r3, #29]
    d8bc:	aa05      	add	r2, sp, #20
    d8be:	7013      	strb	r3, [r2, #0]
			if(gpfAppSocketCb)
    d8c0:	4b36      	ldr	r3, [pc, #216]	; (d99c <m2m_ip_cb+0x2dc>)
    d8c2:	6819      	ldr	r1, [r3, #0]
    d8c4:	2900      	cmp	r1, #0
    d8c6:	d100      	bne.n	d8ca <m2m_ip_cb+0x20a>
    d8c8:	e740      	b.n	d74c <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    d8ca:	201c      	movs	r0, #28
    d8cc:	a902      	add	r1, sp, #8
    d8ce:	5608      	ldrsb	r0, [r1, r0]
    d8d0:	681b      	ldr	r3, [r3, #0]
    d8d2:	2102      	movs	r1, #2
    d8d4:	4798      	blx	r3
    d8d6:	e739      	b.n	d74c <m2m_ip_cb+0x8c>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    d8d8:	2309      	movs	r3, #9
    d8da:	4698      	mov	r8, r3
    d8dc:	e794      	b.n	d808 <m2m_ip_cb+0x148>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    d8de:	2508      	movs	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    d8e0:	0020      	movs	r0, r4
    d8e2:	2300      	movs	r3, #0
    d8e4:	2208      	movs	r2, #8
    d8e6:	a909      	add	r1, sp, #36	; 0x24
    d8e8:	4c2a      	ldr	r4, [pc, #168]	; (d994 <m2m_ip_cb+0x2d4>)
    d8ea:	47a0      	blx	r4
    d8ec:	2800      	cmp	r0, #0
    d8ee:	d000      	beq.n	d8f2 <m2m_ip_cb+0x232>
    d8f0:	e72c      	b.n	d74c <m2m_ip_cb+0x8c>
			sock = strReply.sock;
    d8f2:	201c      	movs	r0, #28
    d8f4:	ab02      	add	r3, sp, #8
    d8f6:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    d8f8:	8c19      	ldrh	r1, [r3, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    d8fa:	8bdb      	ldrh	r3, [r3, #30]
    d8fc:	aa05      	add	r2, sp, #20
    d8fe:	8013      	strh	r3, [r2, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d900:	4b27      	ldr	r3, [pc, #156]	; (d9a0 <m2m_ip_cb+0x2e0>)
    d902:	0104      	lsls	r4, r0, #4
    d904:	191b      	adds	r3, r3, r4
    d906:	88db      	ldrh	r3, [r3, #6]
    d908:	4299      	cmp	r1, r3
    d90a:	d000      	beq.n	d90e <m2m_ip_cb+0x24e>
    d90c:	e71e      	b.n	d74c <m2m_ip_cb+0x8c>
				if(gpfAppSocketCb)
    d90e:	4b23      	ldr	r3, [pc, #140]	; (d99c <m2m_ip_cb+0x2dc>)
    d910:	6819      	ldr	r1, [r3, #0]
    d912:	2900      	cmp	r1, #0
    d914:	d100      	bne.n	d918 <m2m_ip_cb+0x258>
    d916:	e719      	b.n	d74c <m2m_ip_cb+0x8c>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    d918:	681b      	ldr	r3, [r3, #0]
    d91a:	0029      	movs	r1, r5
    d91c:	4798      	blx	r3
    d91e:	e715      	b.n	d74c <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    d920:	0020      	movs	r0, r4
    d922:	2300      	movs	r3, #0
    d924:	2244      	movs	r2, #68	; 0x44
    d926:	a909      	add	r1, sp, #36	; 0x24
    d928:	4c1a      	ldr	r4, [pc, #104]	; (d994 <m2m_ip_cb+0x2d4>)
    d92a:	47a0      	blx	r4
    d92c:	2800      	cmp	r0, #0
    d92e:	d000      	beq.n	d932 <m2m_ip_cb+0x272>
    d930:	e70c      	b.n	d74c <m2m_ip_cb+0x8c>
			if(gpfAppResolveCb)
    d932:	4b1d      	ldr	r3, [pc, #116]	; (d9a8 <m2m_ip_cb+0x2e8>)
    d934:	681a      	ldr	r2, [r3, #0]
    d936:	2a00      	cmp	r2, #0
    d938:	d100      	bne.n	d93c <m2m_ip_cb+0x27c>
    d93a:	e707      	b.n	d74c <m2m_ip_cb+0x8c>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    d93c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d93e:	681b      	ldr	r3, [r3, #0]
    d940:	0011      	movs	r1, r2
    d942:	a809      	add	r0, sp, #36	; 0x24
    d944:	9203      	str	r2, [sp, #12]
    d946:	4798      	blx	r3
    d948:	e700      	b.n	d74c <m2m_ip_cb+0x8c>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    d94a:	2507      	movs	r5, #7
    d94c:	e7c8      	b.n	d8e0 <m2m_ip_cb+0x220>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    d94e:	4653      	mov	r3, sl
    d950:	2b00      	cmp	r3, #0
    d952:	dd0e      	ble.n	d972 <m2m_ip_cb+0x2b2>
    d954:	45aa      	cmp	sl, r5
    d956:	da0c      	bge.n	d972 <m2m_ip_cb+0x2b2>
    d958:	466a      	mov	r2, sp
    d95a:	4653      	mov	r3, sl
    d95c:	8193      	strh	r3, [r2, #12]
    d95e:	8993      	ldrh	r3, [r2, #12]
					u32Address += u16DataOffset;
    d960:	444c      	add	r4, r9
    d962:	9300      	str	r3, [sp, #0]
    d964:	4642      	mov	r2, r8
    d966:	0023      	movs	r3, r4
    d968:	a909      	add	r1, sp, #36	; 0x24
    d96a:	4660      	mov	r0, ip
    d96c:	4c0f      	ldr	r4, [pc, #60]	; (d9ac <m2m_ip_cb+0x2ec>)
    d96e:	47a0      	blx	r4
    d970:	e6ec      	b.n	d74c <m2m_ip_cb+0x8c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    d972:	4652      	mov	r2, sl
    d974:	ab02      	add	r3, sp, #8
    d976:	841a      	strh	r2, [r3, #32]
					strRecvMsg.pu8Buffer		= NULL;
    d978:	2300      	movs	r3, #0
    d97a:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    d97c:	4b07      	ldr	r3, [pc, #28]	; (d99c <m2m_ip_cb+0x2dc>)
    d97e:	681a      	ldr	r2, [r3, #0]
    d980:	2a00      	cmp	r2, #0
    d982:	d100      	bne.n	d986 <m2m_ip_cb+0x2c6>
    d984:	e6e2      	b.n	d74c <m2m_ip_cb+0x8c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    d986:	681b      	ldr	r3, [r3, #0]
    d988:	aa09      	add	r2, sp, #36	; 0x24
    d98a:	4641      	mov	r1, r8
    d98c:	4660      	mov	r0, ip
    d98e:	4798      	blx	r3
    d990:	e6dc      	b.n	d74c <m2m_ip_cb+0x8c>
    d992:	46c0      	nop			; (mov r8, r8)
    d994:	0000ba1d 	.word	0x0000ba1d
    d998:	20000c4c 	.word	0x20000c4c
    d99c:	20000c48 	.word	0x20000c48
    d9a0:	20000b98 	.word	0x20000b98
    d9a4:	200006fe 	.word	0x200006fe
    d9a8:	20000c50 	.word	0x20000c50
    d9ac:	0000d5ad 	.word	0x0000d5ad

0000d9b0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    d9b0:	b570      	push	{r4, r5, r6, lr}
	if(gbSocketInit == 0)
    d9b2:	4d09      	ldr	r5, [pc, #36]	; (d9d8 <socketInit+0x28>)
    d9b4:	782c      	ldrb	r4, [r5, #0]
    d9b6:	b2e4      	uxtb	r4, r4
    d9b8:	2c00      	cmp	r4, #0
    d9ba:	d10c      	bne.n	d9d6 <socketInit+0x26>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    d9bc:	22b0      	movs	r2, #176	; 0xb0
    d9be:	2100      	movs	r1, #0
    d9c0:	4806      	ldr	r0, [pc, #24]	; (d9dc <socketInit+0x2c>)
    d9c2:	4b07      	ldr	r3, [pc, #28]	; (d9e0 <socketInit+0x30>)
    d9c4:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    d9c6:	4b07      	ldr	r3, [pc, #28]	; (d9e4 <socketInit+0x34>)
    d9c8:	4907      	ldr	r1, [pc, #28]	; (d9e8 <socketInit+0x38>)
    d9ca:	2002      	movs	r0, #2
    d9cc:	4798      	blx	r3
		gbSocketInit	= 1;
    d9ce:	2301      	movs	r3, #1
    d9d0:	702b      	strb	r3, [r5, #0]
		gu16SessionID	= 0;
    d9d2:	4b06      	ldr	r3, [pc, #24]	; (d9ec <socketInit+0x3c>)
    d9d4:	801c      	strh	r4, [r3, #0]
	}
}
    d9d6:	bd70      	pop	{r4, r5, r6, pc}
    d9d8:	200006fd 	.word	0x200006fd
    d9dc:	20000b98 	.word	0x20000b98
    d9e0:	0000b381 	.word	0x0000b381
    d9e4:	0000bae5 	.word	0x0000bae5
    d9e8:	0000d6c1 	.word	0x0000d6c1
    d9ec:	200006fe 	.word	0x200006fe

0000d9f0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    d9f0:	4b02      	ldr	r3, [pc, #8]	; (d9fc <registerSocketCallback+0xc>)
    d9f2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    d9f4:	4b02      	ldr	r3, [pc, #8]	; (da00 <registerSocketCallback+0x10>)
    d9f6:	6019      	str	r1, [r3, #0]
}
    d9f8:	4770      	bx	lr
    d9fa:	46c0      	nop			; (mov r8, r8)
    d9fc:	20000c48 	.word	0x20000c48
    da00:	20000c50 	.word	0x20000c50

0000da04 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    da04:	b5f0      	push	{r4, r5, r6, r7, lr}
    da06:	464f      	mov	r7, r9
    da08:	46d6      	mov	lr, sl
    da0a:	4646      	mov	r6, r8
    da0c:	b5c0      	push	{r6, r7, lr}
    da0e:	4691      	mov	r9, r2
    da10:	b086      	sub	sp, #24
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    da12:	2802      	cmp	r0, #2
    da14:	d103      	bne.n	da1e <socket+0x1a>
	{
		if(u8Type == SOCK_STREAM)
    da16:	2901      	cmp	r1, #1
    da18:	d00a      	beq.n	da30 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    da1a:	2902      	cmp	r1, #2
    da1c:	d022      	beq.n	da64 <socket+0x60>
	SOCKET					sock = -1;
    da1e:	2501      	movs	r5, #1
    da20:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    da22:	0028      	movs	r0, r5
    da24:	b006      	add	sp, #24
    da26:	bc1c      	pop	{r2, r3, r4}
    da28:	4690      	mov	r8, r2
    da2a:	4699      	mov	r9, r3
    da2c:	46a2      	mov	sl, r4
    da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da30:	4b32      	ldr	r3, [pc, #200]	; (dafc <socket+0xf8>)
    da32:	2607      	movs	r6, #7
    da34:	469a      	mov	sl, r3
    da36:	4b32      	ldr	r3, [pc, #200]	; (db00 <socket+0xfc>)
    da38:	4f32      	ldr	r7, [pc, #200]	; (db04 <socket+0x100>)
    da3a:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    da3c:	783d      	ldrb	r5, [r7, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    da3e:	783c      	ldrb	r4, [r7, #0]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    da40:	7838      	ldrb	r0, [r7, #0]
    da42:	2107      	movs	r1, #7
    da44:	3001      	adds	r0, #1
    da46:	47d0      	blx	sl
				pstrSock	= &gastrSockets[u8NextTcpSock];
    da48:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    da4a:	b2c9      	uxtb	r1, r1
				if(!pstrSock->bIsUsed)
    da4c:	0124      	lsls	r4, r4, #4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    da4e:	7039      	strb	r1, [r7, #0]
				if(!pstrSock->bIsUsed)
    da50:	4444      	add	r4, r8
    da52:	7aa3      	ldrb	r3, [r4, #10]
				u8SockID	= u8NextTcpSock;
    da54:	b2ed      	uxtb	r5, r5
				if(!pstrSock->bIsUsed)
    da56:	2b00      	cmp	r3, #0
    da58:	d01a      	beq.n	da90 <socket+0x8c>
    da5a:	3e01      	subs	r6, #1
    da5c:	b2f6      	uxtb	r6, r6
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    da5e:	2e00      	cmp	r6, #0
    da60:	d1ec      	bne.n	da3c <socket+0x38>
    da62:	e7dc      	b.n	da1e <socket+0x1a>
    da64:	2204      	movs	r2, #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    da66:	2003      	movs	r0, #3
    da68:	4927      	ldr	r1, [pc, #156]	; (db08 <socket+0x104>)
    da6a:	4e28      	ldr	r6, [pc, #160]	; (db0c <socket+0x108>)
				u8SockID		= u8NextUdpSock;
    da6c:	780d      	ldrb	r5, [r1, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    da6e:	780c      	ldrb	r4, [r1, #0]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    da70:	780b      	ldrb	r3, [r1, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    da72:	0124      	lsls	r4, r4, #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    da74:	3301      	adds	r3, #1
    da76:	4003      	ands	r3, r0
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    da78:	1934      	adds	r4, r6, r4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    da7a:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    da7c:	7aa3      	ldrb	r3, [r4, #10]
				u8SockID		= u8NextUdpSock;
    da7e:	b2ed      	uxtb	r5, r5
				if(!pstrSock->bIsUsed)
    da80:	2b00      	cmp	r3, #0
    da82:	d004      	beq.n	da8e <socket+0x8a>
    da84:	3a01      	subs	r2, #1
    da86:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    da88:	2a00      	cmp	r2, #0
    da8a:	d1ef      	bne.n	da6c <socket+0x68>
    da8c:	e7c7      	b.n	da1e <socket+0x1a>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    da8e:	3507      	adds	r5, #7
    da90:	b26d      	sxtb	r5, r5
		if(sock >= 0)
    da92:	2d00      	cmp	r5, #0
    da94:	dbc5      	blt.n	da22 <socket+0x1e>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    da96:	4b1e      	ldr	r3, [pc, #120]	; (db10 <socket+0x10c>)
    da98:	2210      	movs	r2, #16
    da9a:	2100      	movs	r1, #0
    da9c:	0020      	movs	r0, r4
    da9e:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    daa0:	2301      	movs	r3, #1
			++gu16SessionID;
    daa2:	4e1c      	ldr	r6, [pc, #112]	; (db14 <socket+0x110>)
			pstrSock->bIsUsed = 1;
    daa4:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    daa6:	8833      	ldrh	r3, [r6, #0]
    daa8:	3301      	adds	r3, #1
    daaa:	b29b      	uxth	r3, r3
    daac:	8033      	strh	r3, [r6, #0]
			if(gu16SessionID == 0)
    daae:	8833      	ldrh	r3, [r6, #0]
    dab0:	2b00      	cmp	r3, #0
    dab2:	d103      	bne.n	dabc <socket+0xb8>
				++gu16SessionID;
    dab4:	8833      	ldrh	r3, [r6, #0]
    dab6:	3301      	adds	r3, #1
    dab8:	b29b      	uxth	r3, r3
    daba:	8033      	strh	r3, [r6, #0]
			pstrSock->u16SessionID = gu16SessionID;
    dabc:	8833      	ldrh	r3, [r6, #0]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    dabe:	4f16      	ldr	r7, [pc, #88]	; (db18 <socket+0x114>)
			pstrSock->u16SessionID = gu16SessionID;
    dac0:	b29b      	uxth	r3, r3
    dac2:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    dac4:	4815      	ldr	r0, [pc, #84]	; (db1c <socket+0x118>)
    dac6:	47b8      	blx	r7
    dac8:	8832      	ldrh	r2, [r6, #0]
    daca:	0029      	movs	r1, r5
    dacc:	b292      	uxth	r2, r2
    dace:	4814      	ldr	r0, [pc, #80]	; (db20 <socket+0x11c>)
    dad0:	47b8      	blx	r7
    dad2:	4b14      	ldr	r3, [pc, #80]	; (db24 <socket+0x120>)
    dad4:	200d      	movs	r0, #13
    dad6:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    dad8:	464b      	mov	r3, r9
    dada:	07db      	lsls	r3, r3, #31
    dadc:	d5a1      	bpl.n	da22 <socket+0x1e>
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    dade:	2321      	movs	r3, #33	; 0x21
    dae0:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    dae2:	2300      	movs	r3, #0
				strSSLCreate.sslSock = sock;
    dae4:	aa05      	add	r2, sp, #20
    dae6:	7015      	strb	r5, [r2, #0]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    dae8:	2150      	movs	r1, #80	; 0x50
    daea:	9302      	str	r3, [sp, #8]
    daec:	9301      	str	r3, [sp, #4]
    daee:	9300      	str	r3, [sp, #0]
    daf0:	4c0d      	ldr	r4, [pc, #52]	; (db28 <socket+0x124>)
    daf2:	3304      	adds	r3, #4
    daf4:	2002      	movs	r0, #2
    daf6:	47a0      	blx	r4
    daf8:	e793      	b.n	da22 <socket+0x1e>
    dafa:	46c0      	nop			; (mov r8, r8)
    dafc:	000134cd 	.word	0x000134cd
    db00:	20000b98 	.word	0x20000b98
    db04:	20000700 	.word	0x20000700
    db08:	20000701 	.word	0x20000701
    db0c:	20000c08 	.word	0x20000c08
    db10:	0000b381 	.word	0x0000b381
    db14:	200006fe 	.word	0x200006fe
    db18:	0001372d 	.word	0x0001372d
    db1c:	000158d0 	.word	0x000158d0
    db20:	00016364 	.word	0x00016364
    db24:	00013761 	.word	0x00013761
    db28:	0000b461 	.word	0x0000b461

0000db2c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db2e:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    db30:	2800      	cmp	r0, #0
    db32:	db2c      	blt.n	db8e <connect+0x62>
    db34:	2900      	cmp	r1, #0
    db36:	d02a      	beq.n	db8e <connect+0x62>
    db38:	4d16      	ldr	r5, [pc, #88]	; (db94 <connect+0x68>)
    db3a:	0106      	lsls	r6, r0, #4
    db3c:	19ac      	adds	r4, r5, r6
    db3e:	7aa3      	ldrb	r3, [r4, #10]
    db40:	b2db      	uxtb	r3, r3
    db42:	2b01      	cmp	r3, #1
    db44:	d123      	bne.n	db8e <connect+0x62>
    db46:	2a00      	cmp	r2, #0
    db48:	d021      	beq.n	db8e <connect+0x62>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    db4a:	7ae2      	ldrb	r2, [r4, #11]
    db4c:	4213      	tst	r3, r2
    db4e:	d119      	bne.n	db84 <connect+0x58>
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    db50:	2744      	movs	r7, #68	; 0x44
    db52:	ac05      	add	r4, sp, #20
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    db54:	7220      	strb	r0, [r4, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    db56:	2208      	movs	r2, #8
    db58:	0020      	movs	r0, r4
    db5a:	4b0f      	ldr	r3, [pc, #60]	; (db98 <connect+0x6c>)

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    db5c:	19ad      	adds	r5, r5, r6
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    db5e:	4798      	blx	r3
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    db60:	88eb      	ldrh	r3, [r5, #6]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    db62:	0022      	movs	r2, r4
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    db64:	8163      	strh	r3, [r4, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    db66:	2300      	movs	r3, #0
    db68:	0039      	movs	r1, r7
    db6a:	9302      	str	r3, [sp, #8]
    db6c:	9301      	str	r3, [sp, #4]
    db6e:	9300      	str	r3, [sp, #0]
    db70:	2002      	movs	r0, #2
    db72:	330c      	adds	r3, #12
    db74:	4c09      	ldr	r4, [pc, #36]	; (db9c <connect+0x70>)
    db76:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    db78:	2800      	cmp	r0, #0
    db7a:	d001      	beq.n	db80 <connect+0x54>
		{
			s8Ret = SOCK_ERR_INVALID;
    db7c:	2009      	movs	r0, #9
    db7e:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    db80:	b009      	add	sp, #36	; 0x24
    db82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    db84:	7ae3      	ldrb	r3, [r4, #11]
    db86:	ac05      	add	r4, sp, #20
    db88:	7263      	strb	r3, [r4, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    db8a:	274b      	movs	r7, #75	; 0x4b
    db8c:	e7e2      	b.n	db54 <connect+0x28>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    db8e:	2006      	movs	r0, #6
    db90:	4240      	negs	r0, r0
    db92:	e7f5      	b.n	db80 <connect+0x54>
    db94:	20000b98 	.word	0x20000b98
    db98:	0000b369 	.word	0x0000b369
    db9c:	0000b461 	.word	0x0000b461

0000dba0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    dba0:	b570      	push	{r4, r5, r6, lr}
    dba2:	b088      	sub	sp, #32
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    dba4:	2800      	cmp	r0, #0
    dba6:	db32      	blt.n	dc0e <send+0x6e>
    dba8:	2900      	cmp	r1, #0
    dbaa:	d030      	beq.n	dc0e <send+0x6e>
    dbac:	23af      	movs	r3, #175	; 0xaf
    dbae:	00db      	lsls	r3, r3, #3
    dbb0:	429a      	cmp	r2, r3
    dbb2:	d82c      	bhi.n	dc0e <send+0x6e>
    dbb4:	4b17      	ldr	r3, [pc, #92]	; (dc14 <send+0x74>)
    dbb6:	0106      	lsls	r6, r0, #4
    dbb8:	199d      	adds	r5, r3, r6
    dbba:	7aac      	ldrb	r4, [r5, #10]
    dbbc:	2c01      	cmp	r4, #1
    dbbe:	d126      	bne.n	dc0e <send+0x6e>
		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    dbc0:	88ed      	ldrh	r5, [r5, #6]
		strSend.sock			= sock;
    dbc2:	ac04      	add	r4, sp, #16
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    dbc4:	81a5      	strh	r5, [r4, #12]
		strSend.sock			= sock;
    dbc6:	7020      	strb	r0, [r4, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    dbc8:	8062      	strh	r2, [r4, #2]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    dbca:	2544      	movs	r5, #68	; 0x44
		if(sock >= TCP_SOCK_MAX)
    dbcc:	2806      	cmp	r0, #6
    dbce:	dd17      	ble.n	dc00 <send+0x60>
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dbd0:	199b      	adds	r3, r3, r6
    dbd2:	7ade      	ldrb	r6, [r3, #11]
    dbd4:	20c5      	movs	r0, #197	; 0xc5
    dbd6:	07f6      	lsls	r6, r6, #31
    dbd8:	d502      	bpl.n	dbe0 <send+0x40>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    dbda:	891d      	ldrh	r5, [r3, #8]
    dbdc:	3007      	adds	r0, #7
    dbde:	b2ad      	uxth	r5, r5
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    dbe0:	9201      	str	r2, [sp, #4]
    dbe2:	9100      	str	r1, [sp, #0]
    dbe4:	2310      	movs	r3, #16
    dbe6:	0022      	movs	r2, r4
    dbe8:	0001      	movs	r1, r0
    dbea:	9502      	str	r5, [sp, #8]
    dbec:	2002      	movs	r0, #2
    dbee:	4c0a      	ldr	r4, [pc, #40]	; (dc18 <send+0x78>)
    dbf0:	47a0      	blx	r4
    dbf2:	0003      	movs	r3, r0
    dbf4:	2000      	movs	r0, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    dbf6:	2b00      	cmp	r3, #0
    dbf8:	d000      	beq.n	dbfc <send+0x5c>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    dbfa:	380e      	subs	r0, #14
		}
	}
	return s16Ret;
}
    dbfc:	b008      	add	sp, #32
    dbfe:	bd70      	pop	{r4, r5, r6, pc}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dc00:	199b      	adds	r3, r3, r6
    dc02:	7ade      	ldrb	r6, [r3, #11]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    dc04:	350c      	adds	r5, #12
    dc06:	20c5      	movs	r0, #197	; 0xc5
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dc08:	07f6      	lsls	r6, r6, #31
    dc0a:	d5e9      	bpl.n	dbe0 <send+0x40>
    dc0c:	e7e5      	b.n	dbda <send+0x3a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    dc0e:	2006      	movs	r0, #6
    dc10:	4240      	negs	r0, r0
    dc12:	e7f3      	b.n	dbfc <send+0x5c>
    dc14:	20000b98 	.word	0x20000b98
    dc18:	0000b461 	.word	0x0000b461

0000dc1c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc1e:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    dc20:	2800      	cmp	r0, #0
    dc22:	db31      	blt.n	dc88 <recv+0x6c>
    dc24:	2900      	cmp	r1, #0
    dc26:	d02f      	beq.n	dc88 <recv+0x6c>
    dc28:	2a00      	cmp	r2, #0
    dc2a:	d02d      	beq.n	dc88 <recv+0x6c>
    dc2c:	4e18      	ldr	r6, [pc, #96]	; (dc90 <recv+0x74>)
    dc2e:	0107      	lsls	r7, r0, #4
    dc30:	19f5      	adds	r5, r6, r7
    dc32:	7aac      	ldrb	r4, [r5, #10]
    dc34:	b2e4      	uxtb	r4, r4
    dc36:	2c01      	cmp	r4, #1
    dc38:	d126      	bne.n	dc88 <recv+0x6c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    dc3a:	51f1      	str	r1, [r6, r7]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    dc3c:	80aa      	strh	r2, [r5, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    dc3e:	7b29      	ldrb	r1, [r5, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    dc40:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    dc42:	2900      	cmp	r1, #0
    dc44:	d11a      	bne.n	dc7c <recv+0x60>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    dc46:	732c      	strb	r4, [r5, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dc48:	7aea      	ldrb	r2, [r5, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    dc4a:	3146      	adds	r1, #70	; 0x46
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dc4c:	4214      	tst	r4, r2
    dc4e:	d000      	beq.n	dc52 <recv+0x36>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    dc50:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    dc52:	2b00      	cmp	r3, #0
    dc54:	d015      	beq.n	dc82 <recv+0x66>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    dc56:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    dc58:	19f6      	adds	r6, r6, r7
    dc5a:	88f3      	ldrh	r3, [r6, #6]
			strRecv.sock = sock;
    dc5c:	aa04      	add	r2, sp, #16
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    dc5e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    dc60:	2300      	movs	r3, #0
			strRecv.sock = sock;
    dc62:	7110      	strb	r0, [r2, #4]
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    dc64:	4c0b      	ldr	r4, [pc, #44]	; (dc94 <recv+0x78>)
    dc66:	9302      	str	r3, [sp, #8]
    dc68:	9301      	str	r3, [sp, #4]
    dc6a:	9300      	str	r3, [sp, #0]
    dc6c:	2002      	movs	r0, #2
    dc6e:	3308      	adds	r3, #8
    dc70:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
    dc72:	2200      	movs	r2, #0
    dc74:	2800      	cmp	r0, #0
    dc76:	d001      	beq.n	dc7c <recv+0x60>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    dc78:	220e      	movs	r2, #14
    dc7a:	4252      	negs	r2, r2
			}
		}
	}
	return s16Ret;
}
    dc7c:	0010      	movs	r0, r2
    dc7e:	b007      	add	sp, #28
    dc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    dc82:	3b01      	subs	r3, #1
    dc84:	9304      	str	r3, [sp, #16]
    dc86:	e7e7      	b.n	dc58 <recv+0x3c>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    dc88:	2206      	movs	r2, #6
    dc8a:	4252      	negs	r2, r2
    dc8c:	e7f6      	b.n	dc7c <recv+0x60>
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	20000b98 	.word	0x20000b98
    dc94:	0000b461 	.word	0x0000b461

0000dc98 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    dc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc9a:	0004      	movs	r4, r0
    dc9c:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    dc9e:	4d1b      	ldr	r5, [pc, #108]	; (dd0c <close+0x74>)
    dca0:	481b      	ldr	r0, [pc, #108]	; (dd10 <close+0x78>)
    dca2:	47a8      	blx	r5
    dca4:	0021      	movs	r1, r4
    dca6:	481b      	ldr	r0, [pc, #108]	; (dd14 <close+0x7c>)
    dca8:	47a8      	blx	r5
    dcaa:	200d      	movs	r0, #13
    dcac:	4b1a      	ldr	r3, [pc, #104]	; (dd18 <close+0x80>)
    dcae:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    dcb0:	2c00      	cmp	r4, #0
    dcb2:	db27      	blt.n	dd04 <close+0x6c>
    dcb4:	4e19      	ldr	r6, [pc, #100]	; (dd1c <close+0x84>)
    dcb6:	0127      	lsls	r7, r4, #4
    dcb8:	19f3      	adds	r3, r6, r7
    dcba:	7a9d      	ldrb	r5, [r3, #10]
    dcbc:	b2ed      	uxtb	r5, r5
    dcbe:	2d01      	cmp	r5, #1
    dcc0:	d120      	bne.n	dd04 <close+0x6c>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    dcc2:	88d9      	ldrh	r1, [r3, #6]
		strclose.sock = sock; 
    dcc4:	aa05      	add	r2, sp, #20
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    dcc6:	8051      	strh	r1, [r2, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    dcc8:	2100      	movs	r1, #0
    dcca:	7299      	strb	r1, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    dccc:	80d9      	strh	r1, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dcce:	7adb      	ldrb	r3, [r3, #11]
		strclose.sock = sock; 
    dcd0:	7014      	strb	r4, [r2, #0]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    dcd2:	3149      	adds	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dcd4:	421d      	tst	r5, r3
    dcd6:	d000      	beq.n	dcda <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    dcd8:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    dcda:	2300      	movs	r3, #0
    dcdc:	4c10      	ldr	r4, [pc, #64]	; (dd20 <close+0x88>)
    dcde:	9302      	str	r3, [sp, #8]
    dce0:	9301      	str	r3, [sp, #4]
    dce2:	9300      	str	r3, [sp, #0]
    dce4:	2002      	movs	r0, #2
    dce6:	3304      	adds	r3, #4
    dce8:	47a0      	blx	r4
    dcea:	1e04      	subs	r4, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    dcec:	d107      	bne.n	dcfe <close+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    dcee:	19f0      	adds	r0, r6, r7
    dcf0:	2210      	movs	r2, #16
    dcf2:	2100      	movs	r1, #0
    dcf4:	4b0b      	ldr	r3, [pc, #44]	; (dd24 <close+0x8c>)
    dcf6:	4798      	blx	r3
	}
	return s8Ret;
}
    dcf8:	0020      	movs	r0, r4
    dcfa:	b007      	add	sp, #28
    dcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			s8Ret = SOCK_ERR_INVALID;
    dcfe:	2409      	movs	r4, #9
    dd00:	4264      	negs	r4, r4
    dd02:	e7f4      	b.n	dcee <close+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    dd04:	2406      	movs	r4, #6
    dd06:	4264      	negs	r4, r4
    dd08:	e7f6      	b.n	dcf8 <close+0x60>
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	0001372d 	.word	0x0001372d
    dd10:	000158d0 	.word	0x000158d0
    dd14:	0001634c 	.word	0x0001634c
    dd18:	00013761 	.word	0x00013761
    dd1c:	20000b98 	.word	0x20000b98
    dd20:	0000b461 	.word	0x0000b461
    dd24:	0000b381 	.word	0x0000b381

0000dd28 <nmi_inet_addr>:
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
	uint8	tmp;
	uint32	u32IP = 0;
    dd28:	2300      	movs	r3, #0
{
    dd2a:	b570      	push	{r4, r5, r6, lr}
	uint32	u32IP = 0;
    dd2c:	2500      	movs	r5, #0
{
    dd2e:	b082      	sub	sp, #8
	uint32	u32IP = 0;
    dd30:	9300      	str	r3, [sp, #0]
			{
				return 0;
			}
			if(c == '.' || c == 0)
			{
				au8IP[i] = tmp;
    dd32:	a901      	add	r1, sp, #4
			c = *pcIpAddr;
    dd34:	7802      	ldrb	r2, [r0, #0]
    dd36:	1cc6      	adds	r6, r0, #3
    dd38:	2300      	movs	r3, #0
			if(c == '.' || c == 0)
    dd3a:	2a2e      	cmp	r2, #46	; 0x2e
    dd3c:	d010      	beq.n	dd60 <nmi_inet_addr+0x38>
    dd3e:	2a00      	cmp	r2, #0
    dd40:	d00e      	beq.n	dd60 <nmi_inet_addr+0x38>
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
    dd42:	3a30      	subs	r2, #48	; 0x30
    dd44:	b2d2      	uxtb	r2, r2
    dd46:	2a09      	cmp	r2, #9
    dd48:	d816      	bhi.n	dd78 <nmi_inet_addr+0x50>
			if(j > 4)
    dd4a:	42b0      	cmp	r0, r6
    dd4c:	d014      	beq.n	dd78 <nmi_inet_addr+0x50>
			{
				tmp = (tmp * 10) + (c - '0');
    dd4e:	009c      	lsls	r4, r3, #2
    dd50:	191b      	adds	r3, r3, r4
    dd52:	005b      	lsls	r3, r3, #1
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    dd54:	3001      	adds	r0, #1
				tmp = (tmp * 10) + (c - '0');
    dd56:	189b      	adds	r3, r3, r2
			c = *pcIpAddr;
    dd58:	7802      	ldrb	r2, [r0, #0]
				tmp = (tmp * 10) + (c - '0');
    dd5a:	b2db      	uxtb	r3, r3
			if(c == '.' || c == 0)
    dd5c:	2a2e      	cmp	r2, #46	; 0x2e
    dd5e:	d1ee      	bne.n	dd3e <nmi_inet_addr+0x16>
				au8IP[i] = tmp;
    dd60:	554b      	strb	r3, [r1, r5]
    dd62:	3501      	adds	r5, #1
			++pcIpAddr;
    dd64:	3001      	adds	r0, #1
	for(i = 0; i < 4; ++i)
    dd66:	2d04      	cmp	r5, #4
    dd68:	d1e4      	bne.n	dd34 <nmi_inet_addr+0xc>
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    dd6a:	4668      	mov	r0, sp
    dd6c:	2204      	movs	r2, #4
    dd6e:	4b03      	ldr	r3, [pc, #12]	; (dd7c <nmi_inet_addr+0x54>)
    dd70:	4798      	blx	r3
	return u32IP;
    dd72:	9800      	ldr	r0, [sp, #0]
}
    dd74:	b002      	add	sp, #8
    dd76:	bd70      	pop	{r4, r5, r6, pc}
				return 0;
    dd78:	2000      	movs	r0, #0
    dd7a:	e7fb      	b.n	dd74 <nmi_inet_addr+0x4c>
    dd7c:	0000b369 	.word	0x0000b369

0000dd80 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    dd80:	b510      	push	{r4, lr}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    dd82:	4b0c      	ldr	r3, [pc, #48]	; (ddb4 <gethostbyname+0x34>)
{
    dd84:	b084      	sub	sp, #16
    dd86:	0004      	movs	r4, r0
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    dd88:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    dd8a:	b2c3      	uxtb	r3, r0
    dd8c:	2b40      	cmp	r3, #64	; 0x40
    dd8e:	d80d      	bhi.n	ddac <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    dd90:	23ff      	movs	r3, #255	; 0xff
    dd92:	2200      	movs	r2, #0
    dd94:	4003      	ands	r3, r0
    dd96:	9202      	str	r2, [sp, #8]
    dd98:	9201      	str	r2, [sp, #4]
    dd9a:	9200      	str	r2, [sp, #0]
    dd9c:	3301      	adds	r3, #1
    dd9e:	0022      	movs	r2, r4
    dda0:	214a      	movs	r1, #74	; 0x4a
    dda2:	2002      	movs	r0, #2
    dda4:	4c04      	ldr	r4, [pc, #16]	; (ddb8 <gethostbyname+0x38>)
    dda6:	47a0      	blx	r4
	}
	return s8Err;
}
    dda8:	b004      	add	sp, #16
    ddaa:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    ddac:	2006      	movs	r0, #6
    ddae:	4240      	negs	r0, r0
    ddb0:	e7fa      	b.n	dda8 <gethostbyname+0x28>
    ddb2:	46c0      	nop			; (mov r8, r8)
    ddb4:	0000b391 	.word	0x0000b391
    ddb8:	0000b461 	.word	0x0000b461

0000ddbc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    ddbc:	b570      	push	{r4, r5, r6, lr}
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    ddbe:	4b27      	ldr	r3, [pc, #156]	; (de5c <spi_flash_enable+0xa0>)
{
    ddc0:	b082      	sub	sp, #8
    ddc2:	0005      	movs	r5, r0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    ddc4:	4798      	blx	r3
    ddc6:	4b26      	ldr	r3, [pc, #152]	; (de60 <spi_flash_enable+0xa4>)
    ddc8:	0500      	lsls	r0, r0, #20
    ddca:	0d00      	lsrs	r0, r0, #20
	sint8 s8Ret = M2M_SUCCESS;
    ddcc:	2400      	movs	r4, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    ddce:	4298      	cmp	r0, r3
    ddd0:	d802      	bhi.n	ddd8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    ddd2:	0020      	movs	r0, r4
    ddd4:	b002      	add	sp, #8
    ddd6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    ddd8:	a901      	add	r1, sp, #4
    ddda:	4822      	ldr	r0, [pc, #136]	; (de64 <spi_flash_enable+0xa8>)
    dddc:	4b22      	ldr	r3, [pc, #136]	; (de68 <spi_flash_enable+0xac>)
    ddde:	4798      	blx	r3
    dde0:	1e04      	subs	r4, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    dde2:	d1f6      	bne.n	ddd2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    dde4:	9a01      	ldr	r2, [sp, #4]
    dde6:	4b21      	ldr	r3, [pc, #132]	; (de6c <spi_flash_enable+0xb0>)
		u32Val |= ((0x1111ul) << 12);
    dde8:	4921      	ldr	r1, [pc, #132]	; (de70 <spi_flash_enable+0xb4>)
		u32Val &= ~((0x7777ul) << 12);
    ddea:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    ddec:	4319      	orrs	r1, r3
		nm_write_reg(0x1410, u32Val);
    ddee:	481d      	ldr	r0, [pc, #116]	; (de64 <spi_flash_enable+0xa8>)
    ddf0:	4e20      	ldr	r6, [pc, #128]	; (de74 <spi_flash_enable+0xb8>)
		u32Val |= ((0x1111ul) << 12);
    ddf2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    ddf4:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    ddf6:	2100      	movs	r1, #0
    ddf8:	481f      	ldr	r0, [pc, #124]	; (de78 <spi_flash_enable+0xbc>)
		if(enable) {
    ddfa:	2d00      	cmp	r5, #0
    ddfc:	d01b      	beq.n	de36 <spi_flash_enable+0x7a>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    ddfe:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    de00:	21ab      	movs	r1, #171	; 0xab
    de02:	481e      	ldr	r0, [pc, #120]	; (de7c <spi_flash_enable+0xc0>)
    de04:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    de06:	2101      	movs	r1, #1
    de08:	481d      	ldr	r0, [pc, #116]	; (de80 <spi_flash_enable+0xc4>)
    de0a:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    de0c:	2100      	movs	r1, #0
    de0e:	481d      	ldr	r0, [pc, #116]	; (de84 <spi_flash_enable+0xc8>)
    de10:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    de12:	2181      	movs	r1, #129	; 0x81
    de14:	481c      	ldr	r0, [pc, #112]	; (de88 <spi_flash_enable+0xcc>)
    de16:	47b0      	blx	r6
    de18:	4d1c      	ldr	r5, [pc, #112]	; (de8c <spi_flash_enable+0xd0>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    de1a:	481d      	ldr	r0, [pc, #116]	; (de90 <spi_flash_enable+0xd4>)
    de1c:	47a8      	blx	r5
    de1e:	2801      	cmp	r0, #1
    de20:	d1fb      	bne.n	de1a <spi_flash_enable+0x5e>
		u32Val |= ((0x0010ul) << 12);
    de22:	2180      	movs	r1, #128	; 0x80
		u32Val &= ~((0x7777ul) << 12);
    de24:	9a01      	ldr	r2, [sp, #4]
    de26:	4b11      	ldr	r3, [pc, #68]	; (de6c <spi_flash_enable+0xb0>)
		u32Val |= ((0x0010ul) << 12);
    de28:	0249      	lsls	r1, r1, #9
		u32Val &= ~((0x7777ul) << 12);
    de2a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    de2c:	4319      	orrs	r1, r3
		nm_write_reg(0x1410, u32Val);
    de2e:	480d      	ldr	r0, [pc, #52]	; (de64 <spi_flash_enable+0xa8>)
		u32Val |= ((0x0010ul) << 12);
    de30:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    de32:	47b0      	blx	r6
    de34:	e7cd      	b.n	ddd2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    de36:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    de38:	21b9      	movs	r1, #185	; 0xb9
    de3a:	4810      	ldr	r0, [pc, #64]	; (de7c <spi_flash_enable+0xc0>)
    de3c:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    de3e:	2101      	movs	r1, #1
    de40:	480f      	ldr	r0, [pc, #60]	; (de80 <spi_flash_enable+0xc4>)
    de42:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    de44:	2100      	movs	r1, #0
    de46:	480f      	ldr	r0, [pc, #60]	; (de84 <spi_flash_enable+0xc8>)
    de48:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    de4a:	2181      	movs	r1, #129	; 0x81
    de4c:	480e      	ldr	r0, [pc, #56]	; (de88 <spi_flash_enable+0xcc>)
    de4e:	47b0      	blx	r6
    de50:	4d0e      	ldr	r5, [pc, #56]	; (de8c <spi_flash_enable+0xd0>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    de52:	480f      	ldr	r0, [pc, #60]	; (de90 <spi_flash_enable+0xd4>)
    de54:	47a8      	blx	r5
    de56:	2801      	cmp	r0, #1
    de58:	d1fb      	bne.n	de52 <spi_flash_enable+0x96>
    de5a:	e7e2      	b.n	de22 <spi_flash_enable+0x66>
    de5c:	0000c255 	.word	0x0000c255
    de60:	0000039f 	.word	0x0000039f
    de64:	00001410 	.word	0x00001410
    de68:	0000c67d 	.word	0x0000c67d
    de6c:	f8888fff 	.word	0xf8888fff
    de70:	01111000 	.word	0x01111000
    de74:	0000c689 	.word	0x0000c689
    de78:	00010208 	.word	0x00010208
    de7c:	0001020c 	.word	0x0001020c
    de80:	00010214 	.word	0x00010214
    de84:	0001021c 	.word	0x0001021c
    de88:	00010204 	.word	0x00010204
    de8c:	0000c671 	.word	0x0000c671
    de90:	00010218 	.word	0x00010218

0000de94 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    de94:	0003      	movs	r3, r0
    de96:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    de98:	2001      	movs	r0, #1
    de9a:	2b00      	cmp	r3, #0
    de9c:	d101      	bne.n	dea2 <mem_test_unit_ready+0xe>
    de9e:	4b01      	ldr	r3, [pc, #4]	; (dea4 <mem_test_unit_ready+0x10>)
    dea0:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
    dea2:	bd10      	pop	{r4, pc}
    dea4:	0000815d 	.word	0x0000815d

0000dea8 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    dea8:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    deaa:	2301      	movs	r3, #1
    deac:	2800      	cmp	r0, #0
    deae:	d103      	bne.n	deb8 <mem_read_capacity+0x10>
    deb0:	4b02      	ldr	r3, [pc, #8]	; (debc <mem_read_capacity+0x14>)
    deb2:	0008      	movs	r0, r1
    deb4:	4798      	blx	r3
    deb6:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
    deb8:	0018      	movs	r0, r3
    deba:	bd10      	pop	{r4, pc}
    debc:	0000818d 	.word	0x0000818d

0000dec0 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    dec0:	4243      	negs	r3, r0
    dec2:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    dec4:	b2c0      	uxtb	r0, r0
    dec6:	4770      	bx	lr

0000dec8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    dec8:	0003      	movs	r3, r0
    deca:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    decc:	2001      	movs	r0, #1
    dece:	2b00      	cmp	r3, #0
    ded0:	d101      	bne.n	ded6 <mem_wr_protect+0xe>
    ded2:	4b01      	ldr	r3, [pc, #4]	; (ded8 <mem_wr_protect+0x10>)
    ded4:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    ded6:	bd10      	pop	{r4, pc}
    ded8:	0000819d 	.word	0x0000819d

0000dedc <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    dedc:	2200      	movs	r2, #0
    dede:	490f      	ldr	r1, [pc, #60]	; (df1c <udi_cdc_comm_enable+0x40>)
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    dee0:	4b0f      	ldr	r3, [pc, #60]	; (df20 <udi_cdc_comm_enable+0x44>)
{
    dee2:	b510      	push	{r4, lr}

	uid_cdc_state_msg[port].header.bmRequestType =
    dee4:	24a1      	movs	r4, #161	; 0xa1
	udi_cdc_nb_comm_enabled = 0;
    dee6:	700a      	strb	r2, [r1, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
    dee8:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
    deea:	4b0e      	ldr	r3, [pc, #56]	; (df24 <udi_cdc_comm_enable+0x48>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
    deec:	2000      	movs	r0, #0
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    deee:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    def0:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    def2:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    def4:	22e1      	movs	r2, #225	; 0xe1
	uid_cdc_state_msg[port].header.bmRequestType =
    def6:	701c      	strb	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    def8:	3c81      	subs	r4, #129	; 0x81
    defa:	705c      	strb	r4, [r3, #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    defc:	3c1e      	subs	r4, #30
    defe:	80dc      	strh	r4, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    df00:	4b09      	ldr	r3, [pc, #36]	; (df28 <udi_cdc_comm_enable+0x4c>)
    df02:	0252      	lsls	r2, r2, #9
    df04:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    df06:	2208      	movs	r2, #8
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    df08:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    df0a:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    df0c:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    df0e:	780b      	ldrb	r3, [r1, #0]
	return true;
}
    df10:	2001      	movs	r0, #1
	udi_cdc_nb_comm_enabled++;
    df12:	3301      	adds	r3, #1
    df14:	b2db      	uxtb	r3, r3
    df16:	700b      	strb	r3, [r1, #0]
}
    df18:	bd10      	pop	{r4, pc}
    df1a:	46c0      	nop			; (mov r8, r8)
    df1c:	2000070f 	.word	0x2000070f
    df20:	200007a4 	.word	0x200007a4
    df24:	2000083c 	.word	0x2000083c
    df28:	20000708 	.word	0x20000708

0000df2c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    df2c:	4a02      	ldr	r2, [pc, #8]	; (df38 <udi_cdc_comm_disable+0xc>)
    df2e:	7813      	ldrb	r3, [r2, #0]
    df30:	3b01      	subs	r3, #1
    df32:	b2db      	uxtb	r3, r3
    df34:	7013      	strb	r3, [r2, #0]
}
    df36:	4770      	bx	lr
    df38:	2000070f 	.word	0x2000070f

0000df3c <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    df3c:	4a04      	ldr	r2, [pc, #16]	; (df50 <udi_cdc_data_disable+0x14>)
    df3e:	7813      	ldrb	r3, [r2, #0]
    df40:	3b01      	subs	r3, #1
    df42:	b2db      	uxtb	r3, r3
    df44:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
    df46:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    df48:	2200      	movs	r2, #0
    df4a:	4b02      	ldr	r3, [pc, #8]	; (df54 <udi_cdc_data_disable+0x18>)
    df4c:	701a      	strb	r2, [r3, #0]
}
    df4e:	4770      	bx	lr
    df50:	20000710 	.word	0x20000710
    df54:	20000704 	.word	0x20000704

0000df58 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    df58:	2000      	movs	r0, #0
    df5a:	4770      	bx	lr

0000df5c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    df5c:	2000      	movs	r0, #0
    df5e:	4770      	bx	lr

0000df60 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    df60:	4770      	bx	lr
    df62:	46c0      	nop			; (mov r8, r8)

0000df64 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
    df64:	4913      	ldr	r1, [pc, #76]	; (dfb4 <udi_cdc_comm_setup+0x50>)
    df66:	780b      	ldrb	r3, [r1, #0]
    df68:	b25a      	sxtb	r2, r3
    df6a:	2a00      	cmp	r2, #0
    df6c:	db05      	blt.n	df7a <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    df6e:	2260      	movs	r2, #96	; 0x60
	return false;  // request Not supported
    df70:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    df72:	4013      	ands	r3, r2
    df74:	2b20      	cmp	r3, #32
    df76:	d010      	beq.n	df9a <udi_cdc_comm_setup+0x36>
}
    df78:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    df7a:	2260      	movs	r2, #96	; 0x60
	return false;  // request Not supported
    df7c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    df7e:	4013      	ands	r3, r2
    df80:	2b20      	cmp	r3, #32
    df82:	d1f9      	bne.n	df78 <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
    df84:	784b      	ldrb	r3, [r1, #1]
    df86:	2b21      	cmp	r3, #33	; 0x21
    df88:	d1f6      	bne.n	df78 <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
    df8a:	88cb      	ldrh	r3, [r1, #6]
    df8c:	2b07      	cmp	r3, #7
    df8e:	d1f3      	bne.n	df78 <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.payload =
    df90:	4a09      	ldr	r2, [pc, #36]	; (dfb8 <udi_cdc_comm_setup+0x54>)
				udd_g_ctrlreq.payload_size =
    df92:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload =
    df94:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size =
    df96:	2001      	movs	r0, #1
    df98:	e7ee      	b.n	df78 <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
    df9a:	784b      	ldrb	r3, [r1, #1]
    df9c:	2b20      	cmp	r3, #32
    df9e:	d003      	beq.n	dfa8 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
    dfa0:	3b22      	subs	r3, #34	; 0x22
    dfa2:	4258      	negs	r0, r3
    dfa4:	4158      	adcs	r0, r3
    dfa6:	e7e7      	b.n	df78 <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
    dfa8:	88cb      	ldrh	r3, [r1, #6]
    dfaa:	2b07      	cmp	r3, #7
    dfac:	d1e4      	bne.n	df78 <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.callback =
    dfae:	4a03      	ldr	r2, [pc, #12]	; (dfbc <udi_cdc_comm_setup+0x58>)
    dfb0:	610a      	str	r2, [r1, #16]
    dfb2:	e7ed      	b.n	df90 <udi_cdc_comm_setup+0x2c>
    dfb4:	20000f3c 	.word	0x20000f3c
    dfb8:	20000708 	.word	0x20000708
    dfbc:	0000df61 	.word	0x0000df61

0000dfc0 <udi_cdc_tx_send.isra.2>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
    dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfc2:	4645      	mov	r5, r8
    dfc4:	46de      	mov	lr, fp
    dfc6:	4657      	mov	r7, sl
    dfc8:	464e      	mov	r6, r9
    dfca:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    dfcc:	4d4a      	ldr	r5, [pc, #296]	; (e0f8 <udi_cdc_tx_send.isra.2+0x138>)
static void udi_cdc_tx_send(uint8_t port)
    dfce:	b087      	sub	sp, #28
	if (udi_cdc_tx_trans_ongoing[port]) {
    dfd0:	782b      	ldrb	r3, [r5, #0]
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	d006      	beq.n	dfe4 <udi_cdc_tx_send.isra.2+0x24>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    dfd6:	b007      	add	sp, #28
    dfd8:	bc3c      	pop	{r2, r3, r4, r5}
    dfda:	4690      	mov	r8, r2
    dfdc:	4699      	mov	r9, r3
    dfde:	46a2      	mov	sl, r4
    dfe0:	46ab      	mov	fp, r5
    dfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (udd_is_high_speed()) {
    dfe4:	4f45      	ldr	r7, [pc, #276]	; (e0fc <udi_cdc_tx_send.isra.2+0x13c>)
    dfe6:	47b8      	blx	r7
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    dfe8:	4b45      	ldr	r3, [pc, #276]	; (e100 <udi_cdc_tx_send.isra.2+0x140>)
    dfea:	4698      	mov	r8, r3
    dfec:	881c      	ldrh	r4, [r3, #0]
	if (udd_is_high_speed()) {
    dfee:	2800      	cmp	r0, #0
    dff0:	d14d      	bne.n	e08e <udi_cdc_tx_send.isra.2+0xce>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    dff2:	4b44      	ldr	r3, [pc, #272]	; (e104 <udi_cdc_tx_send.isra.2+0x144>)
    dff4:	4798      	blx	r3
    dff6:	4284      	cmp	r4, r0
    dff8:	d0ed      	beq.n	dfd6 <udi_cdc_tx_send.isra.2+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    dffa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    dffe:	425a      	negs	r2, r3
    e000:	4153      	adcs	r3, r2
    e002:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    e004:	b672      	cpsid	i
    e006:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e00a:	2300      	movs	r3, #0
    e00c:	4a3e      	ldr	r2, [pc, #248]	; (e108 <udi_cdc_tx_send.isra.2+0x148>)
    e00e:	7013      	strb	r3, [r2, #0]
	return flags;
    e010:	9b05      	ldr	r3, [sp, #20]
    e012:	9303      	str	r3, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    e014:	4b3d      	ldr	r3, [pc, #244]	; (e10c <udi_cdc_tx_send.isra.2+0x14c>)
    e016:	781c      	ldrb	r4, [r3, #0]
    e018:	469b      	mov	fp, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    e01a:	4b3d      	ldr	r3, [pc, #244]	; (e110 <udi_cdc_tx_send.isra.2+0x150>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    e01c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    e01e:	4699      	mov	r9, r3
    e020:	464a      	mov	r2, r9
    e022:	0063      	lsls	r3, r4, #1
    e024:	5ad3      	ldrh	r3, [r2, r3]
    e026:	0026      	movs	r6, r4
    e028:	2b00      	cmp	r3, #0
    e02a:	d03c      	beq.n	e0a6 <udi_cdc_tx_send.isra.2+0xe6>
    e02c:	4b39      	ldr	r3, [pc, #228]	; (e114 <udi_cdc_tx_send.isra.2+0x154>)
    e02e:	469a      	mov	sl, r3
	sof_zlp_counter = 0;
    e030:	2300      	movs	r3, #0
    e032:	4652      	mov	r2, sl
    e034:	8013      	strh	r3, [r2, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    e036:	4b38      	ldr	r3, [pc, #224]	; (e118 <udi_cdc_tx_send.isra.2+0x158>)
    e038:	781b      	ldrb	r3, [r3, #0]
    e03a:	2b00      	cmp	r3, #0
    e03c:	d12c      	bne.n	e098 <udi_cdc_tx_send.isra.2+0xd8>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    e03e:	4263      	negs	r3, r4
    e040:	415c      	adcs	r4, r3
    e042:	465b      	mov	r3, fp
    e044:	b2e4      	uxtb	r4, r4
    e046:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    e048:	2301      	movs	r3, #1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    e04a:	9a03      	ldr	r2, [sp, #12]
    e04c:	702b      	strb	r3, [r5, #0]
    e04e:	2a00      	cmp	r2, #0
    e050:	d14a      	bne.n	e0e8 <udi_cdc_tx_send.isra.2+0x128>
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    e052:	464b      	mov	r3, r9
    e054:	0075      	lsls	r5, r6, #1
    e056:	5b5b      	ldrh	r3, [r3, r5]
    e058:	001c      	movs	r4, r3
    e05a:	3c40      	subs	r4, #64	; 0x40
    e05c:	1e62      	subs	r2, r4, #1
    e05e:	4194      	sbcs	r4, r2
    e060:	b2e4      	uxtb	r4, r4
	if (b_short_packet) {
    e062:	2b40      	cmp	r3, #64	; 0x40
    e064:	d01b      	beq.n	e09e <udi_cdc_tx_send.isra.2+0xde>
		if (udd_is_high_speed()) {
    e066:	47b8      	blx	r7
    e068:	2800      	cmp	r0, #0
    e06a:	d043      	beq.n	e0f4 <udi_cdc_tx_send.isra.2+0x134>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    e06c:	4b2b      	ldr	r3, [pc, #172]	; (e11c <udi_cdc_tx_send.isra.2+0x15c>)
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    e06e:	4798      	blx	r3
    e070:	4643      	mov	r3, r8
    e072:	8018      	strh	r0, [r3, #0]
    e074:	464b      	mov	r3, r9
    e076:	5b5b      	ldrh	r3, [r3, r5]
			udi_cdc_tx_buf[port][buf_sel_trans],
    e078:	4a29      	ldr	r2, [pc, #164]	; (e120 <udi_cdc_tx_send.isra.2+0x160>)
    e07a:	01b6      	lsls	r6, r6, #6
    e07c:	1996      	adds	r6, r2, r6
	udd_ep_run( ep,
    e07e:	4a29      	ldr	r2, [pc, #164]	; (e124 <udi_cdc_tx_send.isra.2+0x164>)
    e080:	0021      	movs	r1, r4
    e082:	9200      	str	r2, [sp, #0]
    e084:	4c28      	ldr	r4, [pc, #160]	; (e128 <udi_cdc_tx_send.isra.2+0x168>)
    e086:	0032      	movs	r2, r6
    e088:	2081      	movs	r0, #129	; 0x81
    e08a:	47a0      	blx	r4
    e08c:	e7a3      	b.n	dfd6 <udi_cdc_tx_send.isra.2+0x16>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    e08e:	4b23      	ldr	r3, [pc, #140]	; (e11c <udi_cdc_tx_send.isra.2+0x15c>)
    e090:	4798      	blx	r3
    e092:	4284      	cmp	r4, r0
    e094:	d1b1      	bne.n	dffa <udi_cdc_tx_send.isra.2+0x3a>
    e096:	e79e      	b.n	dfd6 <udi_cdc_tx_send.isra.2+0x16>
    e098:	4266      	negs	r6, r4
    e09a:	4166      	adcs	r6, r4
    e09c:	e7d4      	b.n	e048 <udi_cdc_tx_send.isra.2+0x88>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    e09e:	2200      	movs	r2, #0
    e0a0:	4641      	mov	r1, r8
    e0a2:	800a      	strh	r2, [r1, #0]
    e0a4:	e7e8      	b.n	e078 <udi_cdc_tx_send.isra.2+0xb8>
		sof_zlp_counter++;
    e0a6:	4b1b      	ldr	r3, [pc, #108]	; (e114 <udi_cdc_tx_send.isra.2+0x154>)
    e0a8:	469a      	mov	sl, r3
    e0aa:	4652      	mov	r2, sl
    e0ac:	881b      	ldrh	r3, [r3, #0]
    e0ae:	3301      	adds	r3, #1
    e0b0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    e0b2:	47b8      	blx	r7
    e0b4:	2800      	cmp	r0, #0
    e0b6:	d10e      	bne.n	e0d6 <udi_cdc_tx_send.isra.2+0x116>
    e0b8:	4653      	mov	r3, sl
    e0ba:	881b      	ldrh	r3, [r3, #0]
    e0bc:	2b63      	cmp	r3, #99	; 0x63
    e0be:	d80a      	bhi.n	e0d6 <udi_cdc_tx_send.isra.2+0x116>
    e0c0:	9b03      	ldr	r3, [sp, #12]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d100      	bne.n	e0c8 <udi_cdc_tx_send.isra.2+0x108>
    e0c6:	e786      	b.n	dfd6 <udi_cdc_tx_send.isra.2+0x16>
		cpu_irq_enable();
    e0c8:	2301      	movs	r3, #1
    e0ca:	4a0f      	ldr	r2, [pc, #60]	; (e108 <udi_cdc_tx_send.isra.2+0x148>)
    e0cc:	7013      	strb	r3, [r2, #0]
    e0ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e0d2:	b662      	cpsie	i
    e0d4:	e77f      	b.n	dfd6 <udi_cdc_tx_send.isra.2+0x16>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    e0d6:	47b8      	blx	r7
    e0d8:	2800      	cmp	r0, #0
    e0da:	d0a9      	beq.n	e030 <udi_cdc_tx_send.isra.2+0x70>
    e0dc:	4652      	mov	r2, sl
    e0de:	4b13      	ldr	r3, [pc, #76]	; (e12c <udi_cdc_tx_send.isra.2+0x16c>)
    e0e0:	8812      	ldrh	r2, [r2, #0]
    e0e2:	429a      	cmp	r2, r3
    e0e4:	d9ec      	bls.n	e0c0 <udi_cdc_tx_send.isra.2+0x100>
    e0e6:	e7a3      	b.n	e030 <udi_cdc_tx_send.isra.2+0x70>
    e0e8:	4a07      	ldr	r2, [pc, #28]	; (e108 <udi_cdc_tx_send.isra.2+0x148>)
    e0ea:	7013      	strb	r3, [r2, #0]
    e0ec:	f3bf 8f5f 	dmb	sy
    e0f0:	b662      	cpsie	i
    e0f2:	e7ae      	b.n	e052 <udi_cdc_tx_send.isra.2+0x92>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    e0f4:	4b03      	ldr	r3, [pc, #12]	; (e104 <udi_cdc_tx_send.isra.2+0x144>)
    e0f6:	e7ba      	b.n	e06e <udi_cdc_tx_send.isra.2+0xae>
    e0f8:	20000838 	.word	0x20000838
    e0fc:	00010aa1 	.word	0x00010aa1
    e100:	20000834 	.word	0x20000834
    e104:	00010aa5 	.word	0x00010aa5
    e108:	200001f9 	.word	0x200001f9
    e10c:	20000830 	.word	0x20000830
    e110:	2000082c 	.word	0x2000082c
    e114:	20000702 	.word	0x20000702
    e118:	200007a8 	.word	0x200007a8
    e11c:	00010ab5 	.word	0x00010ab5
    e120:	200007ac 	.word	0x200007ac
    e124:	0000e131 	.word	0x0000e131
    e128:	00010cb5 	.word	0x00010cb5
    e12c:	0000031f 	.word	0x0000031f

0000e130 <udi_cdc_data_sent>:
{
    e130:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    e132:	2800      	cmp	r0, #0
    e134:	d10d      	bne.n	e152 <udi_cdc_data_sent+0x22>
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    e136:	4b07      	ldr	r3, [pc, #28]	; (e154 <udi_cdc_data_sent+0x24>)
    e138:	4907      	ldr	r1, [pc, #28]	; (e158 <udi_cdc_data_sent+0x28>)
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	425a      	negs	r2, r3
    e13e:	4153      	adcs	r3, r2
    e140:	2200      	movs	r2, #0
    e142:	005b      	lsls	r3, r3, #1
    e144:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
    e146:	4b05      	ldr	r3, [pc, #20]	; (e15c <udi_cdc_data_sent+0x2c>)
    e148:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    e14a:	4b05      	ldr	r3, [pc, #20]	; (e160 <udi_cdc_data_sent+0x30>)
    e14c:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
    e14e:	4b05      	ldr	r3, [pc, #20]	; (e164 <udi_cdc_data_sent+0x34>)
    e150:	4798      	blx	r3
}
    e152:	bd10      	pop	{r4, pc}
    e154:	20000830 	.word	0x20000830
    e158:	2000082c 	.word	0x2000082c
    e15c:	200007a8 	.word	0x200007a8
    e160:	20000838 	.word	0x20000838
    e164:	0000dfc1 	.word	0x0000dfc1

0000e168 <udi_cdc_data_sof_notify>:
{
    e168:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    e16a:	4b01      	ldr	r3, [pc, #4]	; (e170 <udi_cdc_data_sof_notify+0x8>)
    e16c:	4798      	blx	r3
}
    e16e:	bd10      	pop	{r4, pc}
    e170:	0000dfc1 	.word	0x0000dfc1

0000e174 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    e174:	b510      	push	{r4, lr}
    e176:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e178:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e17c:	425a      	negs	r2, r3
    e17e:	4153      	adcs	r3, r2
    e180:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e182:	b672      	cpsid	i
    e184:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e188:	2300      	movs	r3, #0
    e18a:	4a0a      	ldr	r2, [pc, #40]	; (e1b4 <udi_cdc_multi_get_nb_received_data+0x40>)
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    e18c:	480a      	ldr	r0, [pc, #40]	; (e1b8 <udi_cdc_multi_get_nb_received_data+0x44>)
    e18e:	7013      	strb	r3, [r2, #0]
	pos = udi_cdc_rx_pos[port];
    e190:	4b0a      	ldr	r3, [pc, #40]	; (e1bc <udi_cdc_multi_get_nb_received_data+0x48>)
	return flags;
    e192:	9901      	ldr	r1, [sp, #4]
    e194:	881c      	ldrh	r4, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    e196:	4b0a      	ldr	r3, [pc, #40]	; (e1c0 <udi_cdc_multi_get_nb_received_data+0x4c>)
    e198:	781b      	ldrb	r3, [r3, #0]
    e19a:	005b      	lsls	r3, r3, #1
    e19c:	5a18      	ldrh	r0, [r3, r0]
    e19e:	1b00      	subs	r0, r0, r4
	if (cpu_irq_is_enabled_flags(flags))
    e1a0:	2900      	cmp	r1, #0
    e1a2:	d004      	beq.n	e1ae <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
    e1a4:	2301      	movs	r3, #1
    e1a6:	7013      	strb	r3, [r2, #0]
    e1a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e1ac:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
    e1ae:	b002      	add	sp, #8
    e1b0:	bd10      	pop	{r4, pc}
    e1b2:	46c0      	nop			; (mov r8, r8)
    e1b4:	200001f9 	.word	0x200001f9
    e1b8:	20000794 	.word	0x20000794
    e1bc:	2000079c 	.word	0x2000079c
    e1c0:	20000798 	.word	0x20000798

0000e1c4 <udi_cdc_rx_start.isra.9>:
static bool udi_cdc_rx_start(uint8_t port)
    e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1c6:	46ce      	mov	lr, r9
    e1c8:	4647      	mov	r7, r8
    e1ca:	b580      	push	{r7, lr}
    e1cc:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e1ce:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e1d2:	425a      	negs	r2, r3
    e1d4:	4153      	adcs	r3, r2
    e1d6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    e1d8:	b672      	cpsid	i
    e1da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e1de:	2300      	movs	r3, #0
    e1e0:	491f      	ldr	r1, [pc, #124]	; (e260 <udi_cdc_rx_start.isra.9+0x9c>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e1e2:	4820      	ldr	r0, [pc, #128]	; (e264 <udi_cdc_rx_start.isra.9+0xa0>)
	if (udi_cdc_rx_trans_ongoing[port] ||
    e1e4:	4a20      	ldr	r2, [pc, #128]	; (e268 <udi_cdc_rx_start.isra.9+0xa4>)
    e1e6:	700b      	strb	r3, [r1, #0]
	return flags;
    e1e8:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e1ea:	7804      	ldrb	r4, [r0, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    e1ec:	7813      	ldrb	r3, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e1ee:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    e1f0:	b2db      	uxtb	r3, r3
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	d108      	bne.n	e208 <udi_cdc_rx_start.isra.9+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    e1f6:	4e1d      	ldr	r6, [pc, #116]	; (e26c <udi_cdc_rx_start.isra.9+0xa8>)
    e1f8:	4f1d      	ldr	r7, [pc, #116]	; (e270 <udi_cdc_rx_start.isra.9+0xac>)
    e1fa:	46b1      	mov	r9, r6
    e1fc:	8836      	ldrh	r6, [r6, #0]
    e1fe:	46b4      	mov	ip, r6
    e200:	0066      	lsls	r6, r4, #1
    e202:	5bf6      	ldrh	r6, [r6, r7]
	if (udi_cdc_rx_trans_ongoing[port] ||
    e204:	45b4      	cmp	ip, r6
    e206:	d207      	bcs.n	e218 <udi_cdc_rx_start.isra.9+0x54>
		return false;
    e208:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
    e20a:	2d00      	cmp	r5, #0
    e20c:	d11c      	bne.n	e248 <udi_cdc_rx_start.isra.9+0x84>
}
    e20e:	b005      	add	sp, #20
    e210:	bc0c      	pop	{r2, r3}
    e212:	4690      	mov	r8, r2
    e214:	4699      	mov	r9, r3
    e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_cdc_rx_pos[port] = 0;
    e218:	464e      	mov	r6, r9
    e21a:	8033      	strh	r3, [r6, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    e21c:	4263      	negs	r3, r4
    e21e:	4163      	adcs	r3, r4
    e220:	b2db      	uxtb	r3, r3
    e222:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    e224:	2301      	movs	r3, #1
    e226:	7013      	strb	r3, [r2, #0]
    e228:	2d00      	cmp	r5, #0
    e22a:	d113      	bne.n	e254 <udi_cdc_rx_start.isra.9+0x90>
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    e22c:	4b11      	ldr	r3, [pc, #68]	; (e274 <udi_cdc_rx_start.isra.9+0xb0>)
    e22e:	2000      	movs	r0, #0
    e230:	4798      	blx	r3
	return udd_ep_run(ep,
    e232:	4b11      	ldr	r3, [pc, #68]	; (e278 <udi_cdc_rx_start.isra.9+0xb4>)
			udi_cdc_rx_buf[port][buf_sel_trans],
    e234:	4a11      	ldr	r2, [pc, #68]	; (e27c <udi_cdc_rx_start.isra.9+0xb8>)
    e236:	01a4      	lsls	r4, r4, #6
    e238:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
    e23a:	9300      	str	r3, [sp, #0]
    e23c:	2101      	movs	r1, #1
    e23e:	2340      	movs	r3, #64	; 0x40
    e240:	4c0f      	ldr	r4, [pc, #60]	; (e280 <udi_cdc_rx_start.isra.9+0xbc>)
    e242:	2002      	movs	r0, #2
    e244:	47a0      	blx	r4
    e246:	e7e2      	b.n	e20e <udi_cdc_rx_start.isra.9+0x4a>
		cpu_irq_enable();
    e248:	2301      	movs	r3, #1
    e24a:	700b      	strb	r3, [r1, #0]
    e24c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e250:	b662      	cpsie	i
    e252:	e7dc      	b.n	e20e <udi_cdc_rx_start.isra.9+0x4a>
    e254:	700b      	strb	r3, [r1, #0]
    e256:	f3bf 8f5f 	dmb	sy
    e25a:	b662      	cpsie	i
    e25c:	e7e6      	b.n	e22c <udi_cdc_rx_start.isra.9+0x68>
    e25e:	46c0      	nop			; (mov r8, r8)
    e260:	200001f9 	.word	0x200001f9
    e264:	20000798 	.word	0x20000798
    e268:	200007a0 	.word	0x200007a0
    e26c:	2000079c 	.word	0x2000079c
    e270:	20000794 	.word	0x20000794
    e274:	0000e175 	.word	0x0000e175
    e278:	0000e311 	.word	0x0000e311
    e27c:	20000714 	.word	0x20000714
    e280:	00010cb5 	.word	0x00010cb5

0000e284 <udi_cdc_data_enable>:
{
    e284:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    e286:	2400      	movs	r4, #0
	udi_cdc_tx_buf_nb[port][0] = 0;
    e288:	2600      	movs	r6, #0
	udi_cdc_tx_trans_ongoing[port] = false;
    e28a:	4b14      	ldr	r3, [pc, #80]	; (e2dc <udi_cdc_data_enable+0x58>)
	udi_cdc_nb_data_enabled = 0;
    e28c:	4d14      	ldr	r5, [pc, #80]	; (e2e0 <udi_cdc_data_enable+0x5c>)
    e28e:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    e290:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    e292:	4b14      	ldr	r3, [pc, #80]	; (e2e4 <udi_cdc_data_enable+0x60>)
    e294:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    e296:	4b14      	ldr	r3, [pc, #80]	; (e2e8 <udi_cdc_data_enable+0x64>)
    e298:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    e29a:	4b14      	ldr	r3, [pc, #80]	; (e2ec <udi_cdc_data_enable+0x68>)
    e29c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    e29e:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    e2a0:	4b13      	ldr	r3, [pc, #76]	; (e2f0 <udi_cdc_data_enable+0x6c>)
    e2a2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    e2a4:	4b13      	ldr	r3, [pc, #76]	; (e2f4 <udi_cdc_data_enable+0x70>)
    e2a6:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    e2a8:	4b13      	ldr	r3, [pc, #76]	; (e2f8 <udi_cdc_data_enable+0x74>)
    e2aa:	701e      	strb	r6, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    e2ac:	4b13      	ldr	r3, [pc, #76]	; (e2fc <udi_cdc_data_enable+0x78>)
    e2ae:	701e      	strb	r6, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    e2b0:	4b13      	ldr	r3, [pc, #76]	; (e300 <udi_cdc_data_enable+0x7c>)
    e2b2:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    e2b4:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    e2b6:	4b13      	ldr	r3, [pc, #76]	; (e304 <udi_cdc_data_enable+0x80>)
    e2b8:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    e2ba:	4b13      	ldr	r3, [pc, #76]	; (e308 <udi_cdc_data_enable+0x84>)
    e2bc:	4798      	blx	r3
    e2be:	2800      	cmp	r0, #0
    e2c0:	d007      	beq.n	e2d2 <udi_cdc_data_enable+0x4e>
	udi_cdc_nb_data_enabled++;
    e2c2:	782b      	ldrb	r3, [r5, #0]
    e2c4:	3301      	adds	r3, #1
    e2c6:	b2db      	uxtb	r3, r3
    e2c8:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    e2ca:	782b      	ldrb	r3, [r5, #0]
    e2cc:	b2db      	uxtb	r3, r3
    e2ce:	2b01      	cmp	r3, #1
    e2d0:	d000      	beq.n	e2d4 <udi_cdc_data_enable+0x50>
}
    e2d2:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
    e2d4:	4a0d      	ldr	r2, [pc, #52]	; (e30c <udi_cdc_data_enable+0x88>)
    e2d6:	7013      	strb	r3, [r2, #0]
    e2d8:	e7fb      	b.n	e2d2 <udi_cdc_data_enable+0x4e>
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	20000838 	.word	0x20000838
    e2e0:	20000710 	.word	0x20000710
    e2e4:	200007a8 	.word	0x200007a8
    e2e8:	20000830 	.word	0x20000830
    e2ec:	2000082c 	.word	0x2000082c
    e2f0:	20000834 	.word	0x20000834
    e2f4:	0000dfc1 	.word	0x0000dfc1
    e2f8:	200007a0 	.word	0x200007a0
    e2fc:	20000798 	.word	0x20000798
    e300:	20000794 	.word	0x20000794
    e304:	2000079c 	.word	0x2000079c
    e308:	0000e1c5 	.word	0x0000e1c5
    e30c:	20000704 	.word	0x20000704

0000e310 <udi_cdc_data_received>:
{
    e310:	b510      	push	{r4, lr}
    e312:	0014      	movs	r4, r2
    e314:	b082      	sub	sp, #8
	if (UDD_EP_TRANSFER_OK != status) {
    e316:	2800      	cmp	r0, #0
    e318:	d10e      	bne.n	e338 <udi_cdc_data_received+0x28>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    e31a:	4b0e      	ldr	r3, [pc, #56]	; (e354 <udi_cdc_data_received+0x44>)
    e31c:	781a      	ldrb	r2, [r3, #0]
    e31e:	4253      	negs	r3, r2
    e320:	415a      	adcs	r2, r3
    e322:	b2d2      	uxtb	r2, r2
	if (!n) {
    e324:	2900      	cmp	r1, #0
    e326:	d009      	beq.n	e33c <udi_cdc_data_received+0x2c>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    e328:	4b0b      	ldr	r3, [pc, #44]	; (e358 <udi_cdc_data_received+0x48>)
    e32a:	b289      	uxth	r1, r1
    e32c:	0052      	lsls	r2, r2, #1
    e32e:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    e330:	4b0a      	ldr	r3, [pc, #40]	; (e35c <udi_cdc_data_received+0x4c>)
    e332:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
    e334:	4b0a      	ldr	r3, [pc, #40]	; (e360 <udi_cdc_data_received+0x50>)
    e336:	4798      	blx	r3
}
    e338:	b002      	add	sp, #8
    e33a:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
    e33c:	4b09      	ldr	r3, [pc, #36]	; (e364 <udi_cdc_data_received+0x54>)
    e33e:	0192      	lsls	r2, r2, #6
    e340:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    e342:	4b09      	ldr	r3, [pc, #36]	; (e368 <udi_cdc_data_received+0x58>)
    e344:	3101      	adds	r1, #1
    e346:	9300      	str	r3, [sp, #0]
    e348:	0020      	movs	r0, r4
    e34a:	2340      	movs	r3, #64	; 0x40
    e34c:	4c07      	ldr	r4, [pc, #28]	; (e36c <udi_cdc_data_received+0x5c>)
    e34e:	47a0      	blx	r4
    e350:	e7f2      	b.n	e338 <udi_cdc_data_received+0x28>
    e352:	46c0      	nop			; (mov r8, r8)
    e354:	20000798 	.word	0x20000798
    e358:	20000794 	.word	0x20000794
    e35c:	200007a0 	.word	0x200007a0
    e360:	0000e1c5 	.word	0x0000e1c5
    e364:	20000714 	.word	0x20000714
    e368:	0000e311 	.word	0x0000e311
    e36c:	00010cb5 	.word	0x00010cb5

0000e370 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    e370:	b5f0      	push	{r4, r5, r6, r7, lr}
    e372:	4657      	mov	r7, sl
    e374:	464e      	mov	r6, r9
    e376:	4645      	mov	r5, r8
    e378:	46de      	mov	lr, fp
    e37a:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e37c:	4b25      	ldr	r3, [pc, #148]	; (e414 <udi_cdc_multi_getc+0xa4>)
	int rx_data = 0;
    e37e:	2600      	movs	r6, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e380:	799b      	ldrb	r3, [r3, #6]
    e382:	4d25      	ldr	r5, [pc, #148]	; (e418 <udi_cdc_multi_getc+0xa8>)
    e384:	3b09      	subs	r3, #9
    e386:	425a      	negs	r2, r3
    e388:	4153      	adcs	r3, r2
    e38a:	b2db      	uxtb	r3, r3
    e38c:	4699      	mov	r9, r3
    e38e:	4b23      	ldr	r3, [pc, #140]	; (e41c <udi_cdc_multi_getc+0xac>)
    e390:	4c23      	ldr	r4, [pc, #140]	; (e420 <udi_cdc_multi_getc+0xb0>)
    e392:	4698      	mov	r8, r3
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e394:	4b23      	ldr	r3, [pc, #140]	; (e424 <udi_cdc_multi_getc+0xb4>)
    e396:	4f24      	ldr	r7, [pc, #144]	; (e428 <udi_cdc_multi_getc+0xb8>)
    e398:	469b      	mov	fp, r3
		if (!udi_cdc_data_running) {
    e39a:	4b24      	ldr	r3, [pc, #144]	; (e42c <udi_cdc_multi_getc+0xbc>)
{
    e39c:	b083      	sub	sp, #12
		if (!udi_cdc_data_running) {
    e39e:	469a      	mov	sl, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e3a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e3a4:	425a      	negs	r2, r3
    e3a6:	4153      	adcs	r3, r2
    e3a8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e3aa:	b672      	cpsid	i
    e3ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e3b0:	2300      	movs	r3, #0
	buf_sel = udi_cdc_rx_buf_sel[port];
    e3b2:	4642      	mov	r2, r8
    e3b4:	702b      	strb	r3, [r5, #0]
	return flags;
    e3b6:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
    e3b8:	8823      	ldrh	r3, [r4, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    e3ba:	7812      	ldrb	r2, [r2, #0]
	pos = udi_cdc_rx_pos[port];
    e3bc:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
    e3be:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    e3c0:	0051      	lsls	r1, r2, #1
    e3c2:	5a79      	ldrh	r1, [r7, r1]
    e3c4:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
    e3c6:	2800      	cmp	r0, #0
    e3c8:	d11e      	bne.n	e408 <udi_cdc_multi_getc+0x98>
	while (again) {
    e3ca:	428b      	cmp	r3, r1
    e3cc:	d30c      	bcc.n	e3e8 <udi_cdc_multi_getc+0x78>
		if (!udi_cdc_data_running) {
    e3ce:	4653      	mov	r3, sl
    e3d0:	781b      	ldrb	r3, [r3, #0]
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d1e4      	bne.n	e3a0 <udi_cdc_multi_getc+0x30>
			return 0;
    e3d6:	2600      	movs	r6, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    e3d8:	0030      	movs	r0, r6
    e3da:	b003      	add	sp, #12
    e3dc:	bc3c      	pop	{r2, r3, r4, r5}
    e3de:	4690      	mov	r8, r2
    e3e0:	4699      	mov	r9, r3
    e3e2:	46a2      	mov	sl, r4
    e3e4:	46ab      	mov	fp, r5
    e3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e3e8:	0192      	lsls	r2, r2, #6
    e3ea:	445a      	add	r2, fp
    e3ec:	5cd2      	ldrb	r2, [r2, r3]
	udi_cdc_rx_pos[port] = pos+1;
    e3ee:	3301      	adds	r3, #1
    e3f0:	b29b      	uxth	r3, r3
    e3f2:	8023      	strh	r3, [r4, #0]
	udi_cdc_rx_start(port);
    e3f4:	4b0e      	ldr	r3, [pc, #56]	; (e430 <udi_cdc_multi_getc+0xc0>)
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e3f6:	4316      	orrs	r6, r2
	udi_cdc_rx_start(port);
    e3f8:	4798      	blx	r3
	if (b_databit_9) {
    e3fa:	464b      	mov	r3, r9
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d0eb      	beq.n	e3d8 <udi_cdc_multi_getc+0x68>
		b_databit_9 = false;
    e400:	2300      	movs	r3, #0
		rx_data = rx_data << 8;
    e402:	0236      	lsls	r6, r6, #8
		b_databit_9 = false;
    e404:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
    e406:	e7cb      	b.n	e3a0 <udi_cdc_multi_getc+0x30>
		cpu_irq_enable();
    e408:	2001      	movs	r0, #1
    e40a:	7028      	strb	r0, [r5, #0]
    e40c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e410:	b662      	cpsie	i
    e412:	e7da      	b.n	e3ca <udi_cdc_multi_getc+0x5a>
    e414:	20000708 	.word	0x20000708
    e418:	200001f9 	.word	0x200001f9
    e41c:	20000798 	.word	0x20000798
    e420:	2000079c 	.word	0x2000079c
    e424:	20000714 	.word	0x20000714
    e428:	20000794 	.word	0x20000794
    e42c:	20000704 	.word	0x20000704
    e430:	0000e1c5 	.word	0x0000e1c5

0000e434 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    e434:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
    e436:	2000      	movs	r0, #0
    e438:	4b01      	ldr	r3, [pc, #4]	; (e440 <udi_cdc_getc+0xc>)
    e43a:	4798      	blx	r3
}
    e43c:	bd10      	pop	{r4, pc}
    e43e:	46c0      	nop			; (mov r8, r8)
    e440:	0000e371 	.word	0x0000e371

0000e444 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    e444:	b570      	push	{r4, r5, r6, lr}
    e446:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e448:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e44c:	425a      	negs	r2, r3
    e44e:	4153      	adcs	r3, r2
    e450:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e452:	b672      	cpsid	i
    e454:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e458:	2300      	movs	r3, #0
    e45a:	4a13      	ldr	r2, [pc, #76]	; (e4a8 <udi_cdc_multi_get_free_tx_buffer+0x64>)
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    e45c:	4913      	ldr	r1, [pc, #76]	; (e4ac <udi_cdc_multi_get_free_tx_buffer+0x68>)
    e45e:	7013      	strb	r3, [r2, #0]
	return flags;
    e460:	9c01      	ldr	r4, [sp, #4]
    e462:	780b      	ldrb	r3, [r1, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    e464:	4812      	ldr	r0, [pc, #72]	; (e4b0 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    e466:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    e468:	005d      	lsls	r5, r3, #1
    e46a:	5a28      	ldrh	r0, [r5, r0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    e46c:	2840      	cmp	r0, #64	; 0x40
    e46e:	d00a      	beq.n	e486 <udi_cdc_multi_get_free_tx_buffer+0x42>
    e470:	2340      	movs	r3, #64	; 0x40
    e472:	1a18      	subs	r0, r3, r0
	if (cpu_irq_is_enabled_flags(flags))
    e474:	2c00      	cmp	r4, #0
    e476:	d004      	beq.n	e482 <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
    e478:	2301      	movs	r3, #1
    e47a:	7013      	strb	r3, [r2, #0]
    e47c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e480:	b662      	cpsie	i
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
    e482:	b002      	add	sp, #8
    e484:	bd70      	pop	{r4, r5, r6, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
    e486:	4d0b      	ldr	r5, [pc, #44]	; (e4b4 <udi_cdc_multi_get_free_tx_buffer+0x70>)
    e488:	782d      	ldrb	r5, [r5, #0]
    e48a:	2d00      	cmp	r5, #0
    e48c:	d10a      	bne.n	e4a4 <udi_cdc_multi_get_free_tx_buffer+0x60>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    e48e:	4d0a      	ldr	r5, [pc, #40]	; (e4b8 <udi_cdc_multi_get_free_tx_buffer+0x74>)
    e490:	782e      	ldrb	r6, [r5, #0]
    e492:	2e00      	cmp	r6, #0
    e494:	d106      	bne.n	e4a4 <udi_cdc_multi_get_free_tx_buffer+0x60>
			udi_cdc_tx_both_buf_to_send[port] = true;
    e496:	3601      	adds	r6, #1
    e498:	702e      	strb	r6, [r5, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    e49a:	425d      	negs	r5, r3
    e49c:	416b      	adcs	r3, r5
    e49e:	b2db      	uxtb	r3, r3
    e4a0:	700b      	strb	r3, [r1, #0]
    e4a2:	e7e7      	b.n	e474 <udi_cdc_multi_get_free_tx_buffer+0x30>
    e4a4:	2000      	movs	r0, #0
    e4a6:	e7e5      	b.n	e474 <udi_cdc_multi_get_free_tx_buffer+0x30>
    e4a8:	200001f9 	.word	0x200001f9
    e4ac:	20000830 	.word	0x20000830
    e4b0:	2000082c 	.word	0x2000082c
    e4b4:	20000838 	.word	0x20000838
    e4b8:	200007a8 	.word	0x200007a8

0000e4bc <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    e4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4be:	464f      	mov	r7, r9
    e4c0:	4646      	mov	r6, r8
    e4c2:	46d6      	mov	lr, sl
    e4c4:	b5c0      	push	{r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e4c6:	4b23      	ldr	r3, [pc, #140]	; (e554 <udi_cdc_multi_putc+0x98>)
{
    e4c8:	000c      	movs	r4, r1
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e4ca:	799d      	ldrb	r5, [r3, #6]
    e4cc:	4f22      	ldr	r7, [pc, #136]	; (e558 <udi_cdc_multi_putc+0x9c>)
    e4ce:	3d09      	subs	r5, #9
    e4d0:	426b      	negs	r3, r5
    e4d2:	415d      	adcs	r5, r3
	cpu_irq_disable();
    e4d4:	4b21      	ldr	r3, [pc, #132]	; (e55c <udi_cdc_multi_putc+0xa0>)
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    e4d6:	4e22      	ldr	r6, [pc, #136]	; (e560 <udi_cdc_multi_putc+0xa4>)
    e4d8:	4698      	mov	r8, r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    e4da:	4b22      	ldr	r3, [pc, #136]	; (e564 <udi_cdc_multi_putc+0xa8>)
{
    e4dc:	b082      	sub	sp, #8
	buf_sel = udi_cdc_tx_buf_sel[port];
    e4de:	4699      	mov	r9, r3
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e4e0:	b2ed      	uxtb	r5, r5
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    e4e2:	2000      	movs	r0, #0
    e4e4:	47b8      	blx	r7
	if (!udi_cdc_multi_is_tx_ready(port)) {
    e4e6:	2800      	cmp	r0, #0
    e4e8:	d109      	bne.n	e4fe <udi_cdc_multi_putc+0x42>
		if (!udi_cdc_data_running) {
    e4ea:	4b1f      	ldr	r3, [pc, #124]	; (e568 <udi_cdc_multi_putc+0xac>)
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	2b00      	cmp	r3, #0
    e4f0:	d1f7      	bne.n	e4e2 <udi_cdc_multi_putc+0x26>
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    e4f2:	b002      	add	sp, #8
    e4f4:	bc1c      	pop	{r2, r3, r4}
    e4f6:	4690      	mov	r8, r2
    e4f8:	4699      	mov	r9, r3
    e4fa:	46a2      	mov	sl, r4
    e4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e4fe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e502:	425a      	negs	r2, r3
    e504:	4153      	adcs	r3, r2
    e506:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e508:	b672      	cpsid	i
    e50a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e50e:	2300      	movs	r3, #0
    e510:	4642      	mov	r2, r8
    e512:	7013      	strb	r3, [r2, #0]
	return flags;
    e514:	9b01      	ldr	r3, [sp, #4]
    e516:	469a      	mov	sl, r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    e518:	464b      	mov	r3, r9
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    e51e:	005a      	lsls	r2, r3, #1
    e520:	5b91      	ldrh	r1, [r2, r6]
    e522:	019b      	lsls	r3, r3, #6
    e524:	1c48      	adds	r0, r1, #1
    e526:	5390      	strh	r0, [r2, r6]
    e528:	4a10      	ldr	r2, [pc, #64]	; (e56c <udi_cdc_multi_putc+0xb0>)
    e52a:	18d3      	adds	r3, r2, r3
    e52c:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
    e52e:	4653      	mov	r3, sl
    e530:	2b00      	cmp	r3, #0
    e532:	d104      	bne.n	e53e <udi_cdc_multi_putc+0x82>
	if (b_databit_9) {
    e534:	2d00      	cmp	r5, #0
    e536:	d00a      	beq.n	e54e <udi_cdc_multi_putc+0x92>
		value = value >> 8;
    e538:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
    e53a:	2500      	movs	r5, #0
		goto udi_cdc_putc_process_one_byte;
    e53c:	e7d1      	b.n	e4e2 <udi_cdc_multi_putc+0x26>
		cpu_irq_enable();
    e53e:	2301      	movs	r3, #1
    e540:	4642      	mov	r2, r8
    e542:	7013      	strb	r3, [r2, #0]
    e544:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e548:	b662      	cpsie	i
	if (b_databit_9) {
    e54a:	2d00      	cmp	r5, #0
    e54c:	d1f4      	bne.n	e538 <udi_cdc_multi_putc+0x7c>
	return true;
    e54e:	2001      	movs	r0, #1
    e550:	e7cf      	b.n	e4f2 <udi_cdc_multi_putc+0x36>
    e552:	46c0      	nop			; (mov r8, r8)
    e554:	20000708 	.word	0x20000708
    e558:	0000e445 	.word	0x0000e445
    e55c:	200001f9 	.word	0x200001f9
    e560:	2000082c 	.word	0x2000082c
    e564:	20000830 	.word	0x20000830
    e568:	20000704 	.word	0x20000704
    e56c:	200007ac 	.word	0x200007ac

0000e570 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    e570:	b510      	push	{r4, lr}
    e572:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
    e574:	4b01      	ldr	r3, [pc, #4]	; (e57c <udi_cdc_putc+0xc>)
    e576:	2000      	movs	r0, #0
    e578:	4798      	blx	r3
}
    e57a:	bd10      	pop	{r4, pc}
    e57c:	0000e4bd 	.word	0x0000e4bd

0000e580 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    e580:	207f      	movs	r0, #127	; 0x7f
{
    e582:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    e584:	4b02      	ldr	r3, [pc, #8]	; (e590 <udc_valid_address+0x10>)
    e586:	885b      	ldrh	r3, [r3, #2]
    e588:	4018      	ands	r0, r3
    e58a:	4b02      	ldr	r3, [pc, #8]	; (e594 <udc_valid_address+0x14>)
    e58c:	4798      	blx	r3
}
    e58e:	bd10      	pop	{r4, pc}
    e590:	20000f3c 	.word	0x20000f3c
    e594:	00010ee5 	.word	0x00010ee5

0000e598 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
    e598:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e59a:	4b14      	ldr	r3, [pc, #80]	; (e5ec <udc_update_iface_desc.part.0+0x54>)
    e59c:	681b      	ldr	r3, [r3, #0]
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	791a      	ldrb	r2, [r3, #4]
    e5a2:	4282      	cmp	r2, r0
    e5a4:	d91d      	bls.n	e5e2 <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    e5a6:	4e12      	ldr	r6, [pc, #72]	; (e5f0 <udc_update_iface_desc.part.0+0x58>)
    e5a8:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    e5aa:	78dc      	ldrb	r4, [r3, #3]
    e5ac:	789a      	ldrb	r2, [r3, #2]
    e5ae:	0224      	lsls	r4, r4, #8
    e5b0:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    e5b2:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    e5b4:	42a3      	cmp	r3, r4
    e5b6:	d214      	bcs.n	e5e2 <udc_update_iface_desc.part.0+0x4a>
    e5b8:	2500      	movs	r5, #0
    e5ba:	e004      	b.n	e5c6 <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
    e5bc:	781a      	ldrb	r2, [r3, #0]
    e5be:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    e5c0:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    e5c2:	429c      	cmp	r4, r3
    e5c4:	d90c      	bls.n	e5e0 <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    e5c6:	785a      	ldrb	r2, [r3, #1]
    e5c8:	2a04      	cmp	r2, #4
    e5ca:	d1f7      	bne.n	e5bc <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    e5cc:	789a      	ldrb	r2, [r3, #2]
    e5ce:	4282      	cmp	r2, r0
    e5d0:	d1f4      	bne.n	e5bc <udc_update_iface_desc.part.0+0x24>
    e5d2:	78da      	ldrb	r2, [r3, #3]
    e5d4:	428a      	cmp	r2, r1
    e5d6:	d1f1      	bne.n	e5bc <udc_update_iface_desc.part.0+0x24>
    e5d8:	2d00      	cmp	r5, #0
    e5da:	d104      	bne.n	e5e6 <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
    e5dc:	2001      	movs	r0, #1
    e5de:	e001      	b.n	e5e4 <udc_update_iface_desc.part.0+0x4c>
    e5e0:	6033      	str	r3, [r6, #0]
		return false;
    e5e2:	2000      	movs	r0, #0
}
    e5e4:	bd70      	pop	{r4, r5, r6, pc}
    e5e6:	6033      	str	r3, [r6, #0]
				return true; // Interface found
    e5e8:	2001      	movs	r0, #1
    e5ea:	e7fb      	b.n	e5e4 <udc_update_iface_desc.part.0+0x4c>
    e5ec:	20000854 	.word	0x20000854
    e5f0:	20000858 	.word	0x20000858

0000e5f4 <udc_iface_disable>:
{
    e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5f6:	46c6      	mov	lr, r8
    e5f8:	b500      	push	{lr}
	if (0 == udc_num_configuration) {
    e5fa:	4c1d      	ldr	r4, [pc, #116]	; (e670 <udc_iface_disable+0x7c>)
{
    e5fc:	0006      	movs	r6, r0
	if (0 == udc_num_configuration) {
    e5fe:	7823      	ldrb	r3, [r4, #0]
    e600:	2b00      	cmp	r3, #0
    e602:	d105      	bne.n	e610 <udc_iface_disable+0x1c>
		return false;
    e604:	2300      	movs	r3, #0
    e606:	4698      	mov	r8, r3
}
    e608:	4640      	mov	r0, r8
    e60a:	bc04      	pop	{r2}
    e60c:	4690      	mov	r8, r2
    e60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e610:	4b18      	ldr	r3, [pc, #96]	; (e674 <udc_iface_disable+0x80>)
    e612:	2100      	movs	r1, #0
    e614:	4698      	mov	r8, r3
    e616:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    e618:	2800      	cmp	r0, #0
    e61a:	d0f3      	beq.n	e604 <udc_iface_disable+0x10>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e61c:	4d16      	ldr	r5, [pc, #88]	; (e678 <udc_iface_disable+0x84>)
    e61e:	00b2      	lsls	r2, r6, #2
    e620:	682b      	ldr	r3, [r5, #0]
    e622:	685b      	ldr	r3, [r3, #4]
    e624:	58d7      	ldr	r7, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e626:	68fb      	ldr	r3, [r7, #12]
    e628:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    e62a:	7823      	ldrb	r3, [r4, #0]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d0e9      	beq.n	e604 <udc_iface_disable+0x10>
    e630:	0001      	movs	r1, r0
    e632:	0030      	movs	r0, r6
    e634:	47c0      	blx	r8
    e636:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e638:	2800      	cmp	r0, #0
    e63a:	d0e3      	beq.n	e604 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    e63c:	4b0f      	ldr	r3, [pc, #60]	; (e67c <udc_iface_disable+0x88>)
			udd_ep_free(ep_desc->bEndpointAddress);
    e63e:	4e10      	ldr	r6, [pc, #64]	; (e680 <udc_iface_disable+0x8c>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    e640:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
    e642:	682b      	ldr	r3, [r5, #0]
    e644:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    e646:	78d3      	ldrb	r3, [r2, #3]
    e648:	7891      	ldrb	r1, [r2, #2]
    e64a:	021b      	lsls	r3, r3, #8
    e64c:	430b      	orrs	r3, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    e64e:	18d2      	adds	r2, r2, r3
    e650:	e004      	b.n	e65c <udc_iface_disable+0x68>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    e652:	7863      	ldrb	r3, [r4, #1]
    e654:	2b04      	cmp	r3, #4
    e656:	d005      	beq.n	e664 <udc_iface_disable+0x70>
		if (desc_id == desc->bDescriptorType) {
    e658:	2b05      	cmp	r3, #5
    e65a:	d006      	beq.n	e66a <udc_iface_disable+0x76>
			desc->bLength);
    e65c:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    e65e:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    e660:	42a2      	cmp	r2, r4
    e662:	d8f6      	bhi.n	e652 <udc_iface_disable+0x5e>
	udi_api->disable();
    e664:	687b      	ldr	r3, [r7, #4]
    e666:	4798      	blx	r3
    e668:	e7ce      	b.n	e608 <udc_iface_disable+0x14>
			udd_ep_free(ep_desc->bEndpointAddress);
    e66a:	78a0      	ldrb	r0, [r4, #2]
    e66c:	47b0      	blx	r6
    e66e:	e7e8      	b.n	e642 <udc_iface_disable+0x4e>
    e670:	20000850 	.word	0x20000850
    e674:	0000e599 	.word	0x0000e599
    e678:	20000854 	.word	0x20000854
    e67c:	20000858 	.word	0x20000858
    e680:	00010ac5 	.word	0x00010ac5

0000e684 <udc_iface_enable>:
{
    e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (0 == udc_num_configuration) {
    e686:	4b18      	ldr	r3, [pc, #96]	; (e6e8 <udc_iface_enable+0x64>)
{
    e688:	0005      	movs	r5, r0
	if (0 == udc_num_configuration) {
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	2b00      	cmp	r3, #0
    e68e:	d101      	bne.n	e694 <udc_iface_enable+0x10>
		return false;
    e690:	2000      	movs	r0, #0
}
    e692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e694:	4b15      	ldr	r3, [pc, #84]	; (e6ec <udc_iface_enable+0x68>)
    e696:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    e698:	2800      	cmp	r0, #0
    e69a:	d0f9      	beq.n	e690 <udc_iface_enable+0xc>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    e69c:	4b14      	ldr	r3, [pc, #80]	; (e6f0 <udc_iface_enable+0x6c>)
    e69e:	4e15      	ldr	r6, [pc, #84]	; (e6f4 <udc_iface_enable+0x70>)
    e6a0:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    e6a2:	4f15      	ldr	r7, [pc, #84]	; (e6f8 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
    e6a4:	6831      	ldr	r1, [r6, #0]
    e6a6:	680b      	ldr	r3, [r1, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    e6a8:	78da      	ldrb	r2, [r3, #3]
    e6aa:	7898      	ldrb	r0, [r3, #2]
    e6ac:	0212      	lsls	r2, r2, #8
    e6ae:	4302      	orrs	r2, r0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    e6b0:	189a      	adds	r2, r3, r2
    e6b2:	e004      	b.n	e6be <udc_iface_enable+0x3a>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    e6b4:	7863      	ldrb	r3, [r4, #1]
    e6b6:	2b04      	cmp	r3, #4
    e6b8:	d005      	beq.n	e6c6 <udc_iface_enable+0x42>
		if (desc_id == desc->bDescriptorType) {
    e6ba:	2b05      	cmp	r3, #5
    e6bc:	d009      	beq.n	e6d2 <udc_iface_enable+0x4e>
			desc->bLength);
    e6be:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    e6c0:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    e6c2:	42a2      	cmp	r2, r4
    e6c4:	d8f6      	bhi.n	e6b4 <udc_iface_enable+0x30>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    e6c6:	684b      	ldr	r3, [r1, #4]
    e6c8:	00ad      	lsls	r5, r5, #2
    e6ca:	58eb      	ldr	r3, [r5, r3]
    e6cc:	681b      	ldr	r3, [r3, #0]
    e6ce:	4798      	blx	r3
    e6d0:	e7df      	b.n	e692 <udc_iface_enable+0xe>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    e6d2:	7962      	ldrb	r2, [r4, #5]
    e6d4:	7923      	ldrb	r3, [r4, #4]
    e6d6:	0212      	lsls	r2, r2, #8
    e6d8:	431a      	orrs	r2, r3
    e6da:	78e1      	ldrb	r1, [r4, #3]
    e6dc:	78a0      	ldrb	r0, [r4, #2]
    e6de:	47b8      	blx	r7
    e6e0:	2800      	cmp	r0, #0
    e6e2:	d1df      	bne.n	e6a4 <udc_iface_enable+0x20>
    e6e4:	e7d4      	b.n	e690 <udc_iface_enable+0xc>
    e6e6:	46c0      	nop			; (mov r8, r8)
    e6e8:	20000850 	.word	0x20000850
    e6ec:	0000e599 	.word	0x0000e599
    e6f0:	20000858 	.word	0x20000858
    e6f4:	20000854 	.word	0x20000854
    e6f8:	00010b1d 	.word	0x00010b1d

0000e6fc <udc_start>:
{
    e6fc:	b510      	push	{r4, lr}
	udd_enable();
    e6fe:	4b01      	ldr	r3, [pc, #4]	; (e704 <udc_start+0x8>)
    e700:	4798      	blx	r3
}
    e702:	bd10      	pop	{r4, pc}
    e704:	00010f95 	.word	0x00010f95

0000e708 <udc_reset>:
{
    e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
    e70a:	4f0d      	ldr	r7, [pc, #52]	; (e740 <udc_reset+0x38>)
    e70c:	783b      	ldrb	r3, [r7, #0]
    e70e:	2b00      	cmp	r3, #0
    e710:	d010      	beq.n	e734 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e712:	4d0c      	ldr	r5, [pc, #48]	; (e744 <udc_reset+0x3c>)
    e714:	682b      	ldr	r3, [r5, #0]
    e716:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    e718:	791b      	ldrb	r3, [r3, #4]
    e71a:	2b00      	cmp	r3, #0
    e71c:	d00a      	beq.n	e734 <udc_reset+0x2c>
    e71e:	2400      	movs	r4, #0
    e720:	4e09      	ldr	r6, [pc, #36]	; (e748 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    e722:	0020      	movs	r0, r4
    e724:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e726:	682b      	ldr	r3, [r5, #0]
				iface_num++) {
    e728:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e72a:	681b      	ldr	r3, [r3, #0]
				iface_num++) {
    e72c:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    e72e:	791b      	ldrb	r3, [r3, #4]
    e730:	42a3      	cmp	r3, r4
    e732:	d8f6      	bhi.n	e722 <udc_reset+0x1a>
	udc_num_configuration = 0;
    e734:	2300      	movs	r3, #0
	udc_device_status =
    e736:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    e738:	703b      	strb	r3, [r7, #0]
	udc_device_status =
    e73a:	4b04      	ldr	r3, [pc, #16]	; (e74c <udc_reset+0x44>)
    e73c:	801a      	strh	r2, [r3, #0]
}
    e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e740:	20000850 	.word	0x20000850
    e744:	20000854 	.word	0x20000854
    e748:	0000e5f5 	.word	0x0000e5f5
    e74c:	20000846 	.word	0x20000846

0000e750 <udc_sof_notify>:
{
    e750:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    e752:	4b0d      	ldr	r3, [pc, #52]	; (e788 <udc_sof_notify+0x38>)
    e754:	781b      	ldrb	r3, [r3, #0]
    e756:	2b00      	cmp	r3, #0
    e758:	d014      	beq.n	e784 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e75a:	4d0c      	ldr	r5, [pc, #48]	; (e78c <udc_sof_notify+0x3c>)
    e75c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    e75e:	681a      	ldr	r2, [r3, #0]
    e760:	7912      	ldrb	r2, [r2, #4]
    e762:	2a00      	cmp	r2, #0
    e764:	d00e      	beq.n	e784 <udc_sof_notify+0x34>
    e766:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    e768:	685b      	ldr	r3, [r3, #4]
    e76a:	00a2      	lsls	r2, r4, #2
    e76c:	58d3      	ldr	r3, [r2, r3]
    e76e:	691b      	ldr	r3, [r3, #16]
    e770:	2b00      	cmp	r3, #0
    e772:	d000      	beq.n	e776 <udc_sof_notify+0x26>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    e774:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e776:	682b      	ldr	r3, [r5, #0]
				iface_num++) {
    e778:	3401      	adds	r4, #1
		for (iface_num = 0;
    e77a:	681a      	ldr	r2, [r3, #0]
				iface_num++) {
    e77c:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    e77e:	7912      	ldrb	r2, [r2, #4]
    e780:	42a2      	cmp	r2, r4
    e782:	d8f1      	bhi.n	e768 <udc_sof_notify+0x18>
}
    e784:	bd70      	pop	{r4, r5, r6, pc}
    e786:	46c0      	nop			; (mov r8, r8)
    e788:	20000850 	.word	0x20000850
    e78c:	20000854 	.word	0x20000854

0000e790 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e792:	46ce      	mov	lr, r9
    e794:	4647      	mov	r7, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    e796:	2300      	movs	r3, #0
{
    e798:	b580      	push	{r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    e79a:	4ca3      	ldr	r4, [pc, #652]	; (ea28 <udc_process_setup+0x298>)
    e79c:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    e79e:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    e7a0:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    e7a2:	7823      	ldrb	r3, [r4, #0]
    e7a4:	b25a      	sxtb	r2, r3
    e7a6:	2a00      	cmp	r2, #0
    e7a8:	db0e      	blt.n	e7c8 <udc_process_setup+0x38>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    e7aa:	2260      	movs	r2, #96	; 0x60
    e7ac:	421a      	tst	r2, r3
    e7ae:	d04d      	beq.n	e84c <udc_process_setup+0xbc>
    e7b0:	221f      	movs	r2, #31
    e7b2:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    e7b4:	2b01      	cmp	r3, #1
    e7b6:	d067      	beq.n	e888 <udc_process_setup+0xf8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    e7b8:	2b02      	cmp	r3, #2
    e7ba:	d020      	beq.n	e7fe <udc_process_setup+0x6e>
			return false; // Error from USB host
    e7bc:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    e7be:	0028      	movs	r0, r5
    e7c0:	bc0c      	pop	{r2, r3}
    e7c2:	4690      	mov	r8, r2
    e7c4:	4699      	mov	r9, r3
    e7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    e7c8:	88e2      	ldrh	r2, [r4, #6]
    e7ca:	2a00      	cmp	r2, #0
    e7cc:	d0f6      	beq.n	e7bc <udc_process_setup+0x2c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    e7ce:	2160      	movs	r1, #96	; 0x60
    e7d0:	4219      	tst	r1, r3
    e7d2:	d1ed      	bne.n	e7b0 <udc_process_setup+0x20>
    e7d4:	211f      	movs	r1, #31
    e7d6:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    e7d8:	d000      	beq.n	e7dc <udc_process_setup+0x4c>
    e7da:	e099      	b.n	e910 <udc_process_setup+0x180>
			switch (udd_g_ctrlreq.req.bRequest) {
    e7dc:	7863      	ldrb	r3, [r4, #1]
    e7de:	2b06      	cmp	r3, #6
    e7e0:	d100      	bne.n	e7e4 <udc_process_setup+0x54>
    e7e2:	e141      	b.n	ea68 <udc_process_setup+0x2d8>
    e7e4:	2b08      	cmp	r3, #8
    e7e6:	d100      	bne.n	e7ea <udc_process_setup+0x5a>
    e7e8:	e114      	b.n	ea14 <udc_process_setup+0x284>
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	d1e6      	bne.n	e7bc <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    e7ee:	2a02      	cmp	r2, #2
    e7f0:	d1e4      	bne.n	e7bc <udc_process_setup+0x2c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    e7f2:	391d      	subs	r1, #29
    e7f4:	488d      	ldr	r0, [pc, #564]	; (ea2c <udc_process_setup+0x29c>)
    e7f6:	4b8e      	ldr	r3, [pc, #568]	; (ea30 <udc_process_setup+0x2a0>)
    e7f8:	4798      	blx	r3
			return true;
    e7fa:	2501      	movs	r5, #1
    e7fc:	e7df      	b.n	e7be <udc_process_setup+0x2e>
	if (0 == udc_num_configuration) {
    e7fe:	4e8d      	ldr	r6, [pc, #564]	; (ea34 <udc_process_setup+0x2a4>)
    e800:	7833      	ldrb	r3, [r6, #0]
    e802:	2b00      	cmp	r3, #0
    e804:	d0da      	beq.n	e7bc <udc_process_setup+0x2c>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e806:	4f8c      	ldr	r7, [pc, #560]	; (ea38 <udc_process_setup+0x2a8>)
    e808:	683b      	ldr	r3, [r7, #0]
    e80a:	681a      	ldr	r2, [r3, #0]
    e80c:	7912      	ldrb	r2, [r2, #4]
    e80e:	2a00      	cmp	r2, #0
    e810:	d0d4      	beq.n	e7bc <udc_process_setup+0x2c>
    e812:	4a8a      	ldr	r2, [pc, #552]	; (ea3c <udc_process_setup+0x2ac>)
    e814:	2400      	movs	r4, #0
    e816:	4690      	mov	r8, r2
    e818:	e00f      	b.n	e83a <udc_process_setup+0xaa>
    e81a:	0001      	movs	r1, r0
    e81c:	0020      	movs	r0, r4
    e81e:	47c0      	blx	r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e820:	2800      	cmp	r0, #0
    e822:	d0cb      	beq.n	e7bc <udc_process_setup+0x2c>
		if (udi_api->setup()) {
    e824:	68ab      	ldr	r3, [r5, #8]
    e826:	4798      	blx	r3
    e828:	2800      	cmp	r0, #0
    e82a:	d15d      	bne.n	e8e8 <udc_process_setup+0x158>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e82c:	683b      	ldr	r3, [r7, #0]
			iface_num++) {
    e82e:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e830:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    e832:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    e834:	7912      	ldrb	r2, [r2, #4]
    e836:	42a2      	cmp	r2, r4
    e838:	d9c0      	bls.n	e7bc <udc_process_setup+0x2c>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    e83a:	685b      	ldr	r3, [r3, #4]
    e83c:	00a2      	lsls	r2, r4, #2
    e83e:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e840:	68eb      	ldr	r3, [r5, #12]
    e842:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    e844:	7833      	ldrb	r3, [r6, #0]
    e846:	2b00      	cmp	r3, #0
    e848:	d1e7      	bne.n	e81a <udc_process_setup+0x8a>
    e84a:	e7b7      	b.n	e7bc <udc_process_setup+0x2c>
    e84c:	251f      	movs	r5, #31
    e84e:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    e850:	d132      	bne.n	e8b8 <udc_process_setup+0x128>
			switch (udd_g_ctrlreq.req.bRequest) {
    e852:	7863      	ldrb	r3, [r4, #1]
    e854:	2b03      	cmp	r3, #3
    e856:	d0b1      	beq.n	e7bc <udc_process_setup+0x2c>
    e858:	d948      	bls.n	e8ec <udc_process_setup+0x15c>
    e85a:	2b05      	cmp	r3, #5
    e85c:	d100      	bne.n	e860 <udc_process_setup+0xd0>
    e85e:	e086      	b.n	e96e <udc_process_setup+0x1de>
    e860:	2b09      	cmp	r3, #9
    e862:	d1ab      	bne.n	e7bc <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength) {
    e864:	88e3      	ldrh	r3, [r4, #6]
    e866:	2b00      	cmp	r3, #0
    e868:	d1a8      	bne.n	e7bc <udc_process_setup+0x2c>
	if (!udd_getaddress()) {
    e86a:	4b75      	ldr	r3, [pc, #468]	; (ea40 <udc_process_setup+0x2b0>)
    e86c:	4798      	blx	r3
    e86e:	2800      	cmp	r0, #0
    e870:	d006      	beq.n	e880 <udc_process_setup+0xf0>
				udc_config.confdev_lsfs->bNumConfigurations) {
    e872:	4d74      	ldr	r5, [pc, #464]	; (ea44 <udc_process_setup+0x2b4>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e874:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    e876:	682b      	ldr	r3, [r5, #0]
    e878:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    e87a:	429a      	cmp	r2, r3
    e87c:	dc00      	bgt.n	e880 <udc_process_setup+0xf0>
    e87e:	e110      	b.n	eaa2 <udc_process_setup+0x312>
    e880:	231f      	movs	r3, #31
    e882:	7822      	ldrb	r2, [r4, #0]
    e884:	4013      	ands	r3, r2
    e886:	e795      	b.n	e7b4 <udc_process_setup+0x24>
    e888:	4e6a      	ldr	r6, [pc, #424]	; (ea34 <udc_process_setup+0x2a4>)
    e88a:	7833      	ldrb	r3, [r6, #0]
	if (0 == udc_num_configuration) {
    e88c:	2b00      	cmp	r3, #0
    e88e:	d100      	bne.n	e892 <udc_process_setup+0x102>
    e890:	e794      	b.n	e7bc <udc_process_setup+0x2c>
    e892:	4f69      	ldr	r7, [pc, #420]	; (ea38 <udc_process_setup+0x2a8>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e894:	683f      	ldr	r7, [r7, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e896:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e898:	683b      	ldr	r3, [r7, #0]
    e89a:	791b      	ldrb	r3, [r3, #4]
    e89c:	42ab      	cmp	r3, r5
    e89e:	d800      	bhi.n	e8a2 <udc_process_setup+0x112>
    e8a0:	e78c      	b.n	e7bc <udc_process_setup+0x2c>
    e8a2:	4b66      	ldr	r3, [pc, #408]	; (ea3c <udc_process_setup+0x2ac>)
    e8a4:	2100      	movs	r1, #0
    e8a6:	0028      	movs	r0, r5
    e8a8:	4698      	mov	r8, r3
    e8aa:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    e8ac:	2800      	cmp	r0, #0
    e8ae:	d172      	bne.n	e996 <udc_process_setup+0x206>
    e8b0:	231f      	movs	r3, #31
    e8b2:	7822      	ldrb	r2, [r4, #0]
    e8b4:	4013      	ands	r3, r2
    e8b6:	e77f      	b.n	e7b8 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e8b8:	2b01      	cmp	r3, #1
    e8ba:	d040      	beq.n	e93e <udc_process_setup+0x1ae>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    e8bc:	2b02      	cmp	r3, #2
    e8be:	d000      	beq.n	e8c2 <udc_process_setup+0x132>
    e8c0:	e77c      	b.n	e7bc <udc_process_setup+0x2c>
			switch (udd_g_ctrlreq.req.bRequest) {
    e8c2:	7863      	ldrb	r3, [r4, #1]
    e8c4:	2b01      	cmp	r3, #1
    e8c6:	d05a      	beq.n	e97e <udc_process_setup+0x1ee>
    e8c8:	2b03      	cmp	r3, #3
    e8ca:	d198      	bne.n	e7fe <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wLength) {
    e8cc:	88e3      	ldrh	r3, [r4, #6]
    e8ce:	2b00      	cmp	r3, #0
    e8d0:	d195      	bne.n	e7fe <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e8d2:	8863      	ldrh	r3, [r4, #2]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d192      	bne.n	e7fe <udc_process_setup+0x6e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    e8d8:	7920      	ldrb	r0, [r4, #4]
    e8da:	4b5b      	ldr	r3, [pc, #364]	; (ea48 <udc_process_setup+0x2b8>)
    e8dc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e8de:	7920      	ldrb	r0, [r4, #4]
    e8e0:	4b5a      	ldr	r3, [pc, #360]	; (ea4c <udc_process_setup+0x2bc>)
    e8e2:	4798      	blx	r3
		if (udc_reqstd()) {
    e8e4:	2800      	cmp	r0, #0
    e8e6:	d02d      	beq.n	e944 <udc_process_setup+0x1b4>
			return true;
    e8e8:	2501      	movs	r5, #1
    e8ea:	e768      	b.n	e7be <udc_process_setup+0x2e>
			switch (udd_g_ctrlreq.req.bRequest) {
    e8ec:	2b01      	cmp	r3, #1
    e8ee:	d000      	beq.n	e8f2 <udc_process_setup+0x162>
    e8f0:	e764      	b.n	e7bc <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength) {
    e8f2:	88e3      	ldrh	r3, [r4, #6]
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d000      	beq.n	e8fa <udc_process_setup+0x16a>
    e8f8:	e760      	b.n	e7bc <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    e8fa:	8863      	ldrh	r3, [r4, #2]
    e8fc:	2b01      	cmp	r3, #1
    e8fe:	d000      	beq.n	e902 <udc_process_setup+0x172>
    e900:	e75c      	b.n	e7bc <udc_process_setup+0x2c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    e902:	2102      	movs	r1, #2
    e904:	4a49      	ldr	r2, [pc, #292]	; (ea2c <udc_process_setup+0x29c>)
			return true;
    e906:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    e908:	8813      	ldrh	r3, [r2, #0]
    e90a:	438b      	bics	r3, r1
    e90c:	8013      	strh	r3, [r2, #0]
    e90e:	e756      	b.n	e7be <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    e910:	2b01      	cmp	r3, #1
    e912:	d056      	beq.n	e9c2 <udc_process_setup+0x232>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    e914:	2b02      	cmp	r3, #2
    e916:	d000      	beq.n	e91a <udc_process_setup+0x18a>
    e918:	e750      	b.n	e7bc <udc_process_setup+0x2c>
			switch (udd_g_ctrlreq.req.bRequest) {
    e91a:	7863      	ldrb	r3, [r4, #1]
    e91c:	2b00      	cmp	r3, #0
    e91e:	d000      	beq.n	e922 <udc_process_setup+0x192>
    e920:	e76d      	b.n	e7fe <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    e922:	2a02      	cmp	r2, #2
    e924:	d000      	beq.n	e928 <udc_process_setup+0x198>
    e926:	e76a      	b.n	e7fe <udc_process_setup+0x6e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    e928:	4b49      	ldr	r3, [pc, #292]	; (ea50 <udc_process_setup+0x2c0>)
    e92a:	7920      	ldrb	r0, [r4, #4]
    e92c:	4798      	blx	r3
    e92e:	4b49      	ldr	r3, [pc, #292]	; (ea54 <udc_process_setup+0x2c4>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    e930:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    e932:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    e934:	0018      	movs	r0, r3
    e936:	4b3e      	ldr	r3, [pc, #248]	; (ea30 <udc_process_setup+0x2a0>)
    e938:	4798      	blx	r3
			return true;
    e93a:	2501      	movs	r5, #1
    e93c:	e73f      	b.n	e7be <udc_process_setup+0x2e>
			switch (udd_g_ctrlreq.req.bRequest) {
    e93e:	7863      	ldrb	r3, [r4, #1]
    e940:	2b0b      	cmp	r3, #11
    e942:	d001      	beq.n	e948 <udc_process_setup+0x1b8>
    e944:	7823      	ldrb	r3, [r4, #0]
    e946:	e733      	b.n	e7b0 <udc_process_setup+0x20>
	if (udd_g_ctrlreq.req.wLength) {
    e948:	88e3      	ldrh	r3, [r4, #6]
    e94a:	2b00      	cmp	r3, #0
    e94c:	d19c      	bne.n	e888 <udc_process_setup+0xf8>
	if (!udc_num_configuration) {
    e94e:	4b39      	ldr	r3, [pc, #228]	; (ea34 <udc_process_setup+0x2a4>)
    e950:	781b      	ldrb	r3, [r3, #0]
    e952:	2b00      	cmp	r3, #0
    e954:	d100      	bne.n	e958 <udc_process_setup+0x1c8>
    e956:	e731      	b.n	e7bc <udc_process_setup+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e958:	7927      	ldrb	r7, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
    e95a:	4b3f      	ldr	r3, [pc, #252]	; (ea58 <udc_process_setup+0x2c8>)
    e95c:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    e95e:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
    e960:	4798      	blx	r3
    e962:	2800      	cmp	r0, #0
    e964:	d000      	beq.n	e968 <udc_process_setup+0x1d8>
    e966:	e0fd      	b.n	eb64 <udc_process_setup+0x3d4>
    e968:	7823      	ldrb	r3, [r4, #0]
    e96a:	402b      	ands	r3, r5
    e96c:	e722      	b.n	e7b4 <udc_process_setup+0x24>
	if (udd_g_ctrlreq.req.wLength) {
    e96e:	88e3      	ldrh	r3, [r4, #6]
    e970:	2b00      	cmp	r3, #0
    e972:	d000      	beq.n	e976 <udc_process_setup+0x1e6>
    e974:	e722      	b.n	e7bc <udc_process_setup+0x2c>
	udd_g_ctrlreq.callback = udc_valid_address;
    e976:	4b39      	ldr	r3, [pc, #228]	; (ea5c <udc_process_setup+0x2cc>)
			return true;
    e978:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    e97a:	6123      	str	r3, [r4, #16]
    e97c:	e71f      	b.n	e7be <udc_process_setup+0x2e>
	if (udd_g_ctrlreq.req.wLength) {
    e97e:	88e3      	ldrh	r3, [r4, #6]
    e980:	2b00      	cmp	r3, #0
    e982:	d000      	beq.n	e986 <udc_process_setup+0x1f6>
    e984:	e73b      	b.n	e7fe <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    e986:	8863      	ldrh	r3, [r4, #2]
    e988:	2b00      	cmp	r3, #0
    e98a:	d000      	beq.n	e98e <udc_process_setup+0x1fe>
    e98c:	e737      	b.n	e7fe <udc_process_setup+0x6e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    e98e:	7920      	ldrb	r0, [r4, #4]
    e990:	4b33      	ldr	r3, [pc, #204]	; (ea60 <udc_process_setup+0x2d0>)
    e992:	4798      	blx	r3
    e994:	e7a6      	b.n	e8e4 <udc_process_setup+0x154>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e996:	687b      	ldr	r3, [r7, #4]
    e998:	00aa      	lsls	r2, r5, #2
    e99a:	58d7      	ldr	r7, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e99c:	68fb      	ldr	r3, [r7, #12]
    e99e:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    e9a0:	7833      	ldrb	r3, [r6, #0]
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d100      	bne.n	e9a8 <udc_process_setup+0x218>
    e9a6:	e709      	b.n	e7bc <udc_process_setup+0x2c>
    e9a8:	0001      	movs	r1, r0
    e9aa:	0028      	movs	r0, r5
    e9ac:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d003      	beq.n	e9ba <udc_process_setup+0x22a>
	return udi_api->setup();
    e9b2:	68bb      	ldr	r3, [r7, #8]
    e9b4:	4798      	blx	r3
		if (udc_req_iface()) {
    e9b6:	2800      	cmp	r0, #0
    e9b8:	d196      	bne.n	e8e8 <udc_process_setup+0x158>
    e9ba:	221f      	movs	r2, #31
    e9bc:	7823      	ldrb	r3, [r4, #0]
    e9be:	4013      	ands	r3, r2
    e9c0:	e6fa      	b.n	e7b8 <udc_process_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
    e9c2:	7863      	ldrb	r3, [r4, #1]
    e9c4:	2b0a      	cmp	r3, #10
    e9c6:	d1bd      	bne.n	e944 <udc_process_setup+0x1b4>
	if (udd_g_ctrlreq.req.wLength != 1) {
    e9c8:	2a01      	cmp	r2, #1
    e9ca:	d000      	beq.n	e9ce <udc_process_setup+0x23e>
    e9cc:	e75c      	b.n	e888 <udc_process_setup+0xf8>
	if (!udc_num_configuration) {
    e9ce:	4e19      	ldr	r6, [pc, #100]	; (ea34 <udc_process_setup+0x2a4>)
    e9d0:	7833      	ldrb	r3, [r6, #0]
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d100      	bne.n	e9d8 <udc_process_setup+0x248>
    e9d6:	e6f1      	b.n	e7bc <udc_process_setup+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e9d8:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e9da:	4f17      	ldr	r7, [pc, #92]	; (ea38 <udc_process_setup+0x2a8>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    e9dc:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    e9de:	683b      	ldr	r3, [r7, #0]
    e9e0:	4699      	mov	r9, r3
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	791b      	ldrb	r3, [r3, #4]
    e9e6:	4543      	cmp	r3, r8
    e9e8:	d800      	bhi.n	e9ec <udc_process_setup+0x25c>
    e9ea:	e753      	b.n	e894 <udc_process_setup+0x104>
    e9ec:	2100      	movs	r1, #0
    e9ee:	4640      	mov	r0, r8
    e9f0:	4b12      	ldr	r3, [pc, #72]	; (ea3c <udc_process_setup+0x2ac>)
    e9f2:	4798      	blx	r3
    e9f4:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    e9f6:	d0a5      	beq.n	e944 <udc_process_setup+0x1b4>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    e9f8:	464b      	mov	r3, r9
    e9fa:	685a      	ldr	r2, [r3, #4]
    e9fc:	4643      	mov	r3, r8
    e9fe:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    ea00:	589b      	ldr	r3, [r3, r2]
    ea02:	68db      	ldr	r3, [r3, #12]
    ea04:	4798      	blx	r3
    ea06:	4b17      	ldr	r3, [pc, #92]	; (ea64 <udc_process_setup+0x2d4>)
	udd_set_setup_payload(&udc_iface_setting,1);
    ea08:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    ea0a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    ea0c:	0018      	movs	r0, r3
    ea0e:	4b08      	ldr	r3, [pc, #32]	; (ea30 <udc_process_setup+0x2a0>)
    ea10:	4798      	blx	r3
    ea12:	e6d4      	b.n	e7be <udc_process_setup+0x2e>
	if (udd_g_ctrlreq.req.wLength != 1) {
    ea14:	2a01      	cmp	r2, #1
    ea16:	d000      	beq.n	ea1a <udc_process_setup+0x28a>
    ea18:	e6d0      	b.n	e7bc <udc_process_setup+0x2c>
	udd_set_setup_payload(&udc_num_configuration,1);
    ea1a:	2101      	movs	r1, #1
    ea1c:	4805      	ldr	r0, [pc, #20]	; (ea34 <udc_process_setup+0x2a4>)
    ea1e:	4b04      	ldr	r3, [pc, #16]	; (ea30 <udc_process_setup+0x2a0>)
    ea20:	4798      	blx	r3
			return true;
    ea22:	2501      	movs	r5, #1
    ea24:	e6cb      	b.n	e7be <udc_process_setup+0x2e>
    ea26:	46c0      	nop			; (mov r8, r8)
    ea28:	20000f3c 	.word	0x20000f3c
    ea2c:	20000846 	.word	0x20000846
    ea30:	00010f05 	.word	0x00010f05
    ea34:	20000850 	.word	0x20000850
    ea38:	20000854 	.word	0x20000854
    ea3c:	0000e599 	.word	0x0000e599
    ea40:	00010ef5 	.word	0x00010ef5
    ea44:	20000134 	.word	0x20000134
    ea48:	00010939 	.word	0x00010939
    ea4c:	00010c3d 	.word	0x00010c3d
    ea50:	00010c29 	.word	0x00010c29
    ea54:	20000848 	.word	0x20000848
    ea58:	0000e5f5 	.word	0x0000e5f5
    ea5c:	0000e581 	.word	0x0000e581
    ea60:	00010c59 	.word	0x00010c59
    ea64:	2000084c 	.word	0x2000084c
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    ea68:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    ea6a:	0a1d      	lsrs	r5, r3, #8
    ea6c:	2d02      	cmp	r5, #2
    ea6e:	d048      	beq.n	eb02 <udc_process_setup+0x372>
    ea70:	d93e      	bls.n	eaf0 <udc_process_setup+0x360>
    ea72:	2d03      	cmp	r5, #3
    ea74:	d058      	beq.n	eb28 <udc_process_setup+0x398>
    ea76:	2d0f      	cmp	r5, #15
    ea78:	d000      	beq.n	ea7c <udc_process_setup+0x2ec>
    ea7a:	e69f      	b.n	e7bc <udc_process_setup+0x2c>
		if (udc_config.conf_bos == NULL) {
    ea7c:	4b41      	ldr	r3, [pc, #260]	; (eb84 <udc_process_setup+0x3f4>)
    ea7e:	6898      	ldr	r0, [r3, #8]
    ea80:	2800      	cmp	r0, #0
    ea82:	d100      	bne.n	ea86 <udc_process_setup+0x2f6>
    ea84:	e69a      	b.n	e7bc <udc_process_setup+0x2c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    ea86:	78c1      	ldrb	r1, [r0, #3]
    ea88:	7883      	ldrb	r3, [r0, #2]
    ea8a:	0209      	lsls	r1, r1, #8
    ea8c:	4319      	orrs	r1, r3
    ea8e:	4b3e      	ldr	r3, [pc, #248]	; (eb88 <udc_process_setup+0x3f8>)
    ea90:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    ea92:	88e3      	ldrh	r3, [r4, #6]
    ea94:	89a2      	ldrh	r2, [r4, #12]
    ea96:	429a      	cmp	r2, r3
    ea98:	d800      	bhi.n	ea9c <udc_process_setup+0x30c>
    ea9a:	e725      	b.n	e8e8 <udc_process_setup+0x158>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    ea9c:	81a3      	strh	r3, [r4, #12]
			return true;
    ea9e:	2501      	movs	r5, #1
    eaa0:	e68d      	b.n	e7be <udc_process_setup+0x2e>
	udc_reset();
    eaa2:	4b3a      	ldr	r3, [pc, #232]	; (eb8c <udc_process_setup+0x3fc>)
    eaa4:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    eaa6:	78a3      	ldrb	r3, [r4, #2]
    eaa8:	4a39      	ldr	r2, [pc, #228]	; (eb90 <udc_process_setup+0x400>)
    eaaa:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    eaac:	2b00      	cmp	r3, #0
    eaae:	d100      	bne.n	eab2 <udc_process_setup+0x322>
    eab0:	e71a      	b.n	e8e8 <udc_process_setup+0x158>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    eab2:	4a38      	ldr	r2, [pc, #224]	; (eb94 <udc_process_setup+0x404>)
    eab4:	4f38      	ldr	r7, [pc, #224]	; (eb98 <udc_process_setup+0x408>)
    eab6:	4694      	mov	ip, r2
    eab8:	686a      	ldr	r2, [r5, #4]
    eaba:	4463      	add	r3, ip
    eabc:	00db      	lsls	r3, r3, #3
    eabe:	18d3      	adds	r3, r2, r3
    eac0:	603b      	str	r3, [r7, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    eac2:	681b      	ldr	r3, [r3, #0]
    eac4:	791b      	ldrb	r3, [r3, #4]
    eac6:	2b00      	cmp	r3, #0
    eac8:	d100      	bne.n	eacc <udc_process_setup+0x33c>
    eaca:	e70d      	b.n	e8e8 <udc_process_setup+0x158>
    eacc:	2500      	movs	r5, #0
    eace:	4e33      	ldr	r6, [pc, #204]	; (eb9c <udc_process_setup+0x40c>)
    ead0:	e007      	b.n	eae2 <udc_process_setup+0x352>
    ead2:	683b      	ldr	r3, [r7, #0]
			iface_num++) {
    ead4:	3501      	adds	r5, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ead6:	681b      	ldr	r3, [r3, #0]
			iface_num++) {
    ead8:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    eada:	791b      	ldrb	r3, [r3, #4]
    eadc:	42ab      	cmp	r3, r5
    eade:	d800      	bhi.n	eae2 <udc_process_setup+0x352>
    eae0:	e702      	b.n	e8e8 <udc_process_setup+0x158>
		if (!udc_iface_enable(iface_num, 0)) {
    eae2:	2100      	movs	r1, #0
    eae4:	0028      	movs	r0, r5
    eae6:	47b0      	blx	r6
    eae8:	2800      	cmp	r0, #0
    eaea:	d1f2      	bne.n	ead2 <udc_process_setup+0x342>
    eaec:	7823      	ldrb	r3, [r4, #0]
    eaee:	e65f      	b.n	e7b0 <udc_process_setup+0x20>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    eaf0:	2d01      	cmp	r5, #1
    eaf2:	d000      	beq.n	eaf6 <udc_process_setup+0x366>
    eaf4:	e662      	b.n	e7bc <udc_process_setup+0x2c>
				(uint8_t *) udc_config.confdev_lsfs,
    eaf6:	4b23      	ldr	r3, [pc, #140]	; (eb84 <udc_process_setup+0x3f4>)
    eaf8:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    eafa:	4b23      	ldr	r3, [pc, #140]	; (eb88 <udc_process_setup+0x3f8>)
    eafc:	7801      	ldrb	r1, [r0, #0]
    eafe:	4798      	blx	r3
    eb00:	e7c7      	b.n	ea92 <udc_process_setup+0x302>
			if (conf_num >= udc_config.confdev_lsfs->
    eb02:	4a20      	ldr	r2, [pc, #128]	; (eb84 <udc_process_setup+0x3f4>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    eb04:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    eb06:	6811      	ldr	r1, [r2, #0]
    eb08:	7c49      	ldrb	r1, [r1, #17]
    eb0a:	4299      	cmp	r1, r3
    eb0c:	d800      	bhi.n	eb10 <udc_process_setup+0x380>
    eb0e:	e655      	b.n	e7bc <udc_process_setup+0x2c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    eb10:	6852      	ldr	r2, [r2, #4]
    eb12:	00db      	lsls	r3, r3, #3
    eb14:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    eb16:	78c1      	ldrb	r1, [r0, #3]
    eb18:	7883      	ldrb	r3, [r0, #2]
    eb1a:	0209      	lsls	r1, r1, #8
    eb1c:	4319      	orrs	r1, r3
    eb1e:	4b1a      	ldr	r3, [pc, #104]	; (eb88 <udc_process_setup+0x3f8>)
    eb20:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    eb22:	68a3      	ldr	r3, [r4, #8]
    eb24:	705d      	strb	r5, [r3, #1]
    eb26:	e7b4      	b.n	ea92 <udc_process_setup+0x302>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    eb28:	22ff      	movs	r2, #255	; 0xff
    eb2a:	4013      	ands	r3, r2
    eb2c:	2b01      	cmp	r3, #1
    eb2e:	d023      	beq.n	eb78 <udc_process_setup+0x3e8>
    eb30:	2b00      	cmp	r3, #0
    eb32:	d01c      	beq.n	eb6e <udc_process_setup+0x3de>
    eb34:	2b02      	cmp	r3, #2
    eb36:	d022      	beq.n	eb7e <udc_process_setup+0x3ee>
    eb38:	2b03      	cmp	r3, #3
    eb3a:	d000      	beq.n	eb3e <udc_process_setup+0x3ae>
    eb3c:	e702      	b.n	e944 <udc_process_setup+0x1b4>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    eb3e:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
    eb40:	4e17      	ldr	r6, [pc, #92]	; (eba0 <udc_process_setup+0x410>)
    eb42:	4818      	ldr	r0, [pc, #96]	; (eba4 <udc_process_setup+0x414>)
{
    eb44:	2300      	movs	r3, #0
    eb46:	0002      	movs	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    eb48:	5cf5      	ldrb	r5, [r6, r3]
    eb4a:	3301      	adds	r3, #1
    eb4c:	8055      	strh	r5, [r2, #2]
		for(i = 0; i < str_length; i++) {
    eb4e:	b2dd      	uxtb	r5, r3
    eb50:	3202      	adds	r2, #2
    eb52:	42a9      	cmp	r1, r5
    eb54:	d8f8      	bhi.n	eb48 <udc_process_setup+0x3b8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    eb56:	0049      	lsls	r1, r1, #1
    eb58:	3102      	adds	r1, #2
    eb5a:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    eb5c:	4b0a      	ldr	r3, [pc, #40]	; (eb88 <udc_process_setup+0x3f8>)
    eb5e:	b289      	uxth	r1, r1
    eb60:	4798      	blx	r3
    eb62:	e796      	b.n	ea92 <udc_process_setup+0x302>
	return udc_iface_enable(iface_num, setting_num);
    eb64:	b2f1      	uxtb	r1, r6
    eb66:	0038      	movs	r0, r7
    eb68:	4b0c      	ldr	r3, [pc, #48]	; (eb9c <udc_process_setup+0x40c>)
    eb6a:	4798      	blx	r3
    eb6c:	e6ba      	b.n	e8e4 <udc_process_setup+0x154>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    eb6e:	2104      	movs	r1, #4
    eb70:	480d      	ldr	r0, [pc, #52]	; (eba8 <udc_process_setup+0x418>)
    eb72:	4b05      	ldr	r3, [pc, #20]	; (eb88 <udc_process_setup+0x3f8>)
    eb74:	4798      	blx	r3
    eb76:	e78c      	b.n	ea92 <udc_process_setup+0x302>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    eb78:	210b      	movs	r1, #11
		str = udc_string_manufacturer_name;
    eb7a:	4e0c      	ldr	r6, [pc, #48]	; (ebac <udc_process_setup+0x41c>)
    eb7c:	e7e1      	b.n	eb42 <udc_process_setup+0x3b2>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    eb7e:	2110      	movs	r1, #16
		str = udc_string_product_name;
    eb80:	4e0b      	ldr	r6, [pc, #44]	; (ebb0 <udc_process_setup+0x420>)
    eb82:	e7de      	b.n	eb42 <udc_process_setup+0x3b2>
    eb84:	20000134 	.word	0x20000134
    eb88:	00010f05 	.word	0x00010f05
    eb8c:	0000e709 	.word	0x0000e709
    eb90:	20000850 	.word	0x20000850
    eb94:	1fffffff 	.word	0x1fffffff
    eb98:	20000854 	.word	0x20000854
    eb9c:	0000e685 	.word	0x0000e685
    eba0:	00016380 	.word	0x00016380
    eba4:	200001b4 	.word	0x200001b4
    eba8:	200001d8 	.word	0x200001d8
    ebac:	200001dc 	.word	0x200001dc
    ebb0:	200001e8 	.word	0x200001e8

0000ebb4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    ebb4:	4b0b      	ldr	r3, [pc, #44]	; (ebe4 <cpu_irq_enter_critical+0x30>)
    ebb6:	681a      	ldr	r2, [r3, #0]
    ebb8:	2a00      	cmp	r2, #0
    ebba:	d105      	bne.n	ebc8 <cpu_irq_enter_critical+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ebbc:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    ebc0:	2900      	cmp	r1, #0
    ebc2:	d005      	beq.n	ebd0 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    ebc4:	4908      	ldr	r1, [pc, #32]	; (ebe8 <cpu_irq_enter_critical+0x34>)
    ebc6:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    ebc8:	681a      	ldr	r2, [r3, #0]
    ebca:	3201      	adds	r2, #1
    ebcc:	601a      	str	r2, [r3, #0]
}
    ebce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    ebd0:	b672      	cpsid	i
    ebd2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    ebd6:	4a05      	ldr	r2, [pc, #20]	; (ebec <cpu_irq_enter_critical+0x38>)
    ebd8:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    ebda:	4a03      	ldr	r2, [pc, #12]	; (ebe8 <cpu_irq_enter_critical+0x34>)
    ebdc:	3101      	adds	r1, #1
    ebde:	7011      	strb	r1, [r2, #0]
    ebe0:	e7f2      	b.n	ebc8 <cpu_irq_enter_critical+0x14>
    ebe2:	46c0      	nop			; (mov r8, r8)
    ebe4:	2000085c 	.word	0x2000085c
    ebe8:	20000860 	.word	0x20000860
    ebec:	200001f9 	.word	0x200001f9

0000ebf0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    ebf0:	4b08      	ldr	r3, [pc, #32]	; (ec14 <cpu_irq_leave_critical+0x24>)
    ebf2:	681a      	ldr	r2, [r3, #0]
    ebf4:	3a01      	subs	r2, #1
    ebf6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    ebf8:	681b      	ldr	r3, [r3, #0]
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	d109      	bne.n	ec12 <cpu_irq_leave_critical+0x22>
    ebfe:	4b06      	ldr	r3, [pc, #24]	; (ec18 <cpu_irq_leave_critical+0x28>)
    ec00:	781b      	ldrb	r3, [r3, #0]
    ec02:	2b00      	cmp	r3, #0
    ec04:	d005      	beq.n	ec12 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    ec06:	2201      	movs	r2, #1
    ec08:	4b04      	ldr	r3, [pc, #16]	; (ec1c <cpu_irq_leave_critical+0x2c>)
    ec0a:	701a      	strb	r2, [r3, #0]
    ec0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ec10:	b662      	cpsie	i
	}
}
    ec12:	4770      	bx	lr
    ec14:	2000085c 	.word	0x2000085c
    ec18:	20000860 	.word	0x20000860
    ec1c:	200001f9 	.word	0x200001f9

0000ec20 <stdio_usb_getchar>:

	return udi_cdc_putc(data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * unused, char *data)
{
    ec20:	b510      	push	{r4, lr}
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    ec22:	4b05      	ldr	r3, [pc, #20]	; (ec38 <stdio_usb_getchar+0x18>)
{
    ec24:	000c      	movs	r4, r1
	if (!stdio_usb_interface_enable) {
    ec26:	781b      	ldrb	r3, [r3, #0]
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d101      	bne.n	ec30 <stdio_usb_getchar+0x10>
		*data = 0;  // -1
    ec2c:	700b      	strb	r3, [r1, #0]
		return;
	}

	*data = (char)udi_cdc_getc();
}
    ec2e:	bd10      	pop	{r4, pc}
	*data = (char)udi_cdc_getc();
    ec30:	4b02      	ldr	r3, [pc, #8]	; (ec3c <stdio_usb_getchar+0x1c>)
    ec32:	4798      	blx	r3
    ec34:	7020      	strb	r0, [r4, #0]
    ec36:	e7fa      	b.n	ec2e <stdio_usb_getchar+0xe>
    ec38:	20000861 	.word	0x20000861
    ec3c:	0000e435 	.word	0x0000e435

0000ec40 <stdio_usb_putchar>:
{
    ec40:	b510      	push	{r4, lr}
	if (!stdio_usb_interface_enable) {
    ec42:	4b06      	ldr	r3, [pc, #24]	; (ec5c <stdio_usb_putchar+0x1c>)
		return 0;  // -1
    ec44:	2000      	movs	r0, #0
	if (!stdio_usb_interface_enable) {
    ec46:	781b      	ldrb	r3, [r3, #0]
    ec48:	2b00      	cmp	r3, #0
    ec4a:	d005      	beq.n	ec58 <stdio_usb_putchar+0x18>
	return udi_cdc_putc(data) ? 0 : -1;
    ec4c:	4b04      	ldr	r3, [pc, #16]	; (ec60 <stdio_usb_putchar+0x20>)
    ec4e:	0008      	movs	r0, r1
    ec50:	4798      	blx	r3
    ec52:	4243      	negs	r3, r0
    ec54:	4158      	adcs	r0, r3
    ec56:	4240      	negs	r0, r0
}
    ec58:	bd10      	pop	{r4, pc}
    ec5a:	46c0      	nop			; (mov r8, r8)
    ec5c:	20000861 	.word	0x20000861
    ec60:	0000e571 	.word	0x0000e571

0000ec64 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    ec64:	2201      	movs	r2, #1
    ec66:	4b02      	ldr	r3, [pc, #8]	; (ec70 <stdio_usb_enable+0xc>)
	return true;
}
    ec68:	2001      	movs	r0, #1
	stdio_usb_interface_enable = true;
    ec6a:	701a      	strb	r2, [r3, #0]
}
    ec6c:	4770      	bx	lr
    ec6e:	46c0      	nop			; (mov r8, r8)
    ec70:	20000861 	.word	0x20000861

0000ec74 <stdio_usb_init>:
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    ec74:	2200      	movs	r2, #0
    ec76:	4b0b      	ldr	r3, [pc, #44]	; (eca4 <stdio_usb_init+0x30>)
{
    ec78:	b570      	push	{r4, r5, r6, lr}
	stdio_base = NULL;
    ec7a:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    ec7c:	4a0a      	ldr	r2, [pc, #40]	; (eca8 <stdio_usb_init+0x34>)
    ec7e:	4b0b      	ldr	r3, [pc, #44]	; (ecac <stdio_usb_init+0x38>)
    ec80:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    ec82:	4a0b      	ldr	r2, [pc, #44]	; (ecb0 <stdio_usb_init+0x3c>)
    ec84:	4b0b      	ldr	r3, [pc, #44]	; (ecb4 <stdio_usb_init+0x40>)
    ec86:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    ec88:	4b0b      	ldr	r3, [pc, #44]	; (ecb8 <stdio_usb_init+0x44>)
    ec8a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    ec8c:	4d0b      	ldr	r5, [pc, #44]	; (ecbc <stdio_usb_init+0x48>)
    ec8e:	4c0c      	ldr	r4, [pc, #48]	; (ecc0 <stdio_usb_init+0x4c>)
    ec90:	682b      	ldr	r3, [r5, #0]
    ec92:	2100      	movs	r1, #0
    ec94:	6898      	ldr	r0, [r3, #8]
    ec96:	47a0      	blx	r4
	setbuf(stdin, NULL);
    ec98:	682b      	ldr	r3, [r5, #0]
    ec9a:	2100      	movs	r1, #0
    ec9c:	6858      	ldr	r0, [r3, #4]
    ec9e:	47a0      	blx	r4
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    eca0:	bd70      	pop	{r4, r5, r6, pc}
    eca2:	46c0      	nop			; (mov r8, r8)
    eca4:	2000109c 	.word	0x2000109c
    eca8:	0000ec41 	.word	0x0000ec41
    ecac:	20001098 	.word	0x20001098
    ecb0:	0000ec21 	.word	0x0000ec21
    ecb4:	20001094 	.word	0x20001094
    ecb8:	0000e6fd 	.word	0x0000e6fd
    ecbc:	200001fc 	.word	0x200001fc
    ecc0:	00013881 	.word	0x00013881

0000ecc4 <bod_set_config>:
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    ecc4:	2202      	movs	r2, #2
{
    ecc6:	b510      	push	{r4, lr}
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    ecc8:	4b19      	ldr	r3, [pc, #100]	; (ed30 <bod_set_config+0x6c>)
    ecca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    eccc:	4222      	tst	r2, r4
    ecce:	d002      	beq.n	ecd6 <bod_set_config+0x12>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    ecd0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    ecd2:	4394      	bics	r4, r2
    ecd4:	635c      	str	r4, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    ecd6:	790c      	ldrb	r4, [r1, #4]
    ecd8:	880b      	ldrh	r3, [r1, #0]
			(uint32_t)conf->mode;
    ecda:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    ecdc:	4323      	orrs	r3, r4

	if (conf->mode == BOD_MODE_SAMPLED) {
    ecde:	2480      	movs	r4, #128	; 0x80
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    ece0:	4313      	orrs	r3, r2
	if (conf->mode == BOD_MODE_SAMPLED) {
    ece2:	0064      	lsls	r4, r4, #1
    ece4:	42a2      	cmp	r2, r4
    ece6:	d01f      	beq.n	ed28 <bod_set_config+0x64>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
    ece8:	798a      	ldrb	r2, [r1, #6]
    ecea:	2a00      	cmp	r2, #0
    ecec:	d001      	beq.n	ecf2 <bod_set_config+0x2e>
		temp |= SYSCTRL_BOD33_HYST;
    ecee:	2204      	movs	r2, #4
    ecf0:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
    ecf2:	79ca      	ldrb	r2, [r1, #7]
    ecf4:	2a00      	cmp	r2, #0
    ecf6:	d001      	beq.n	ecfc <bod_set_config+0x38>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    ecf8:	2240      	movs	r2, #64	; 0x40
    ecfa:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d001      	beq.n	ed04 <bod_set_config+0x40>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    ed00:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    ed02:	bd10      	pop	{r4, pc}
			if (conf->level > 0x3F) {
    ed04:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
    ed06:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
    ed08:	2a3f      	cmp	r2, #63	; 0x3f
    ed0a:	d8fa      	bhi.n	ed02 <bod_set_config+0x3e>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    ed0c:	21fc      	movs	r1, #252	; 0xfc
    ed0e:	0412      	lsls	r2, r2, #16
    ed10:	0389      	lsls	r1, r1, #14
    ed12:	400a      	ands	r2, r1
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    ed14:	2180      	movs	r1, #128	; 0x80
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    ed16:	4313      	orrs	r3, r2
    ed18:	4a05      	ldr	r2, [pc, #20]	; (ed30 <bod_set_config+0x6c>)
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    ed1a:	0109      	lsls	r1, r1, #4
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    ed1c:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    ed1e:	68d3      	ldr	r3, [r2, #12]
    ed20:	420b      	tst	r3, r1
    ed22:	d0fc      	beq.n	ed1e <bod_set_config+0x5a>
	return STATUS_OK;
    ed24:	2000      	movs	r0, #0
    ed26:	e7ec      	b.n	ed02 <bod_set_config+0x3e>
		temp |= SYSCTRL_BOD33_CEN;
    ed28:	2280      	movs	r2, #128	; 0x80
    ed2a:	0092      	lsls	r2, r2, #2
    ed2c:	4313      	orrs	r3, r2
    ed2e:	e7db      	b.n	ece8 <bod_set_config+0x24>
    ed30:	40000800 	.word	0x40000800

0000ed34 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    ed34:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
    ed36:	4b23      	ldr	r3, [pc, #140]	; (edc4 <DMAC_Handler+0x90>)
    ed38:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    ed3a:	220f      	movs	r2, #15
    ed3c:	4922      	ldr	r1, [pc, #136]	; (edc8 <DMAC_Handler+0x94>)

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    ed3e:	4823      	ldr	r0, [pc, #140]	; (edcc <DMAC_Handler+0x98>)
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    ed40:	8c0b      	ldrh	r3, [r1, #32]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
	isr = DMAC->CHINTFLAG.reg;
    ed42:	264e      	movs	r6, #78	; 0x4e
	resource = _dma_active_resource[active_channel];
    ed44:	4013      	ands	r3, r2
    ed46:	009b      	lsls	r3, r3, #2
    ed48:	5818      	ldr	r0, [r3, r0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    ed4a:	4c21      	ldr	r4, [pc, #132]	; (edd0 <DMAC_Handler+0x9c>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    ed4c:	7803      	ldrb	r3, [r0, #0]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    ed4e:	4d21      	ldr	r5, [pc, #132]	; (edd4 <DMAC_Handler+0xa0>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    ed50:	401a      	ands	r2, r3
    ed52:	233f      	movs	r3, #63	; 0x3f
    ed54:	54ca      	strb	r2, [r1, r3]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    ed56:	7803      	ldrb	r3, [r0, #0]
	isr = DMAC->CHINTFLAG.reg;
    ed58:	5d8a      	ldrb	r2, [r1, r6]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    ed5a:	011b      	lsls	r3, r3, #4
    ed5c:	18e4      	adds	r4, r4, r3
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    ed5e:	18eb      	adds	r3, r5, r3
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    ed60:	8864      	ldrh	r4, [r4, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    ed62:	885b      	ldrh	r3, [r3, #2]
	isr = DMAC->CHINTFLAG.reg;
    ed64:	b2d2      	uxtb	r2, r2
	resource->transfered_size = total_size - write_size;
    ed66:	1ae3      	subs	r3, r4, r3
    ed68:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    ed6a:	2301      	movs	r3, #1
    ed6c:	001c      	movs	r4, r3
    ed6e:	4014      	ands	r4, r2
    ed70:	d00c      	beq.n	ed8c <DMAC_Handler+0x58>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    ed72:	2210      	movs	r2, #16
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    ed74:	558b      	strb	r3, [r1, r6]
		resource->job_status = STATUS_ERR_IO;
    ed76:	7442      	strb	r2, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    ed78:	7c02      	ldrb	r2, [r0, #16]
    ed7a:	4213      	tst	r3, r2
    ed7c:	d003      	beq.n	ed86 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    ed7e:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    ed80:	2b00      	cmp	r3, #0
    ed82:	d000      	beq.n	ed86 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    ed84:	4798      	blx	r3
	cpu_irq_leave_critical();
    ed86:	4b14      	ldr	r3, [pc, #80]	; (edd8 <DMAC_Handler+0xa4>)
    ed88:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
    ed8a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    ed8c:	2302      	movs	r3, #2
    ed8e:	4213      	tst	r3, r2
    ed90:	d009      	beq.n	eda6 <DMAC_Handler+0x72>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    ed92:	558b      	strb	r3, [r1, r6]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    ed94:	7c02      	ldrb	r2, [r0, #16]
		resource->job_status = STATUS_OK;
    ed96:	7444      	strb	r4, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    ed98:	4213      	tst	r3, r2
    ed9a:	d0f4      	beq.n	ed86 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    ed9c:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d0f1      	beq.n	ed86 <DMAC_Handler+0x52>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    eda2:	4798      	blx	r3
    eda4:	e7ef      	b.n	ed86 <DMAC_Handler+0x52>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    eda6:	2304      	movs	r3, #4
    eda8:	4213      	tst	r3, r2
    edaa:	d0ec      	beq.n	ed86 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;
    edac:	2206      	movs	r2, #6
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    edae:	558b      	strb	r3, [r1, r6]
		resource->job_status = STATUS_SUSPEND;
    edb0:	7442      	strb	r2, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    edb2:	7c02      	ldrb	r2, [r0, #16]
    edb4:	4213      	tst	r3, r2
    edb6:	d0e6      	beq.n	ed86 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    edb8:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    edba:	2b00      	cmp	r3, #0
    edbc:	d0e3      	beq.n	ed86 <DMAC_Handler+0x52>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    edbe:	4798      	blx	r3
    edc0:	e7e1      	b.n	ed86 <DMAC_Handler+0x52>
    edc2:	46c0      	nop			; (mov r8, r8)
    edc4:	0000ebb5 	.word	0x0000ebb5
    edc8:	41004800 	.word	0x41004800
    edcc:	20000864 	.word	0x20000864
    edd0:	20000c60 	.word	0x20000c60
    edd4:	20000880 	.word	0x20000880
    edd8:	0000ebf1 	.word	0x0000ebf1

0000eddc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    eddc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    edde:	2a00      	cmp	r2, #0
    ede0:	d001      	beq.n	ede6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    ede2:	0018      	movs	r0, r3
    ede4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    ede6:	4a06      	ldr	r2, [pc, #24]	; (ee00 <extint_register_callback+0x24>)
    ede8:	0089      	lsls	r1, r1, #2
    edea:	588b      	ldr	r3, [r1, r2]
    edec:	2b00      	cmp	r3, #0
    edee:	d003      	beq.n	edf8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    edf0:	4283      	cmp	r3, r0
    edf2:	d003      	beq.n	edfc <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
    edf4:	231d      	movs	r3, #29
    edf6:	e7f4      	b.n	ede2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    edf8:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    edfa:	e7f2      	b.n	ede2 <extint_register_callback+0x6>
		return STATUS_OK;
    edfc:	2300      	movs	r3, #0
    edfe:	e7f0      	b.n	ede2 <extint_register_callback+0x6>
    ee00:	20000cb4 	.word	0x20000cb4

0000ee04 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ee04:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ee06:	2900      	cmp	r1, #0
    ee08:	d001      	beq.n	ee0e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    ee0a:	0018      	movs	r0, r3
    ee0c:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    ee0e:	281f      	cmp	r0, #31
    ee10:	d805      	bhi.n	ee1e <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
    ee12:	3b16      	subs	r3, #22
    ee14:	4083      	lsls	r3, r0
    ee16:	4a03      	ldr	r2, [pc, #12]	; (ee24 <extint_chan_enable_callback+0x20>)
    ee18:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    ee1a:	2300      	movs	r3, #0
    ee1c:	e7f5      	b.n	ee0a <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
    ee1e:	60c9      	str	r1, [r1, #12]
    ee20:	deff      	udf	#255	; 0xff
    ee22:	46c0      	nop			; (mov r8, r8)
    ee24:	40001800 	.word	0x40001800

0000ee28 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ee28:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ee2a:	2900      	cmp	r1, #0
    ee2c:	d001      	beq.n	ee32 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    ee2e:	0018      	movs	r0, r3
    ee30:	4770      	bx	lr
    ee32:	281f      	cmp	r0, #31
    ee34:	d805      	bhi.n	ee42 <extint_chan_disable_callback+0x1a>
		eic->INTENCLR.reg = (1UL << channel);
    ee36:	3b16      	subs	r3, #22
    ee38:	4083      	lsls	r3, r0
    ee3a:	4a03      	ldr	r2, [pc, #12]	; (ee48 <extint_chan_disable_callback+0x20>)
    ee3c:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    ee3e:	2300      	movs	r3, #0
    ee40:	e7f5      	b.n	ee2e <extint_chan_disable_callback+0x6>
		eic->INTENCLR.reg = (1UL << channel);
    ee42:	6089      	str	r1, [r1, #8]
    ee44:	deff      	udf	#255	; 0xff
    ee46:	46c0      	nop			; (mov r8, r8)
    ee48:	40001800 	.word	0x40001800

0000ee4c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ee4e:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    ee50:	2601      	movs	r6, #1
    ee52:	4c0b      	ldr	r4, [pc, #44]	; (ee80 <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    ee54:	4d0b      	ldr	r5, [pc, #44]	; (ee84 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    ee56:	4f0c      	ldr	r7, [pc, #48]	; (ee88 <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ee58:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    ee5a:	0032      	movs	r2, r6
    ee5c:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    ee5e:	6929      	ldr	r1, [r5, #16]
		if (extint_chan_is_detected(_current_channel)) {
    ee60:	4211      	tst	r1, r2
    ee62:	d005      	beq.n	ee70 <EIC_Handler+0x24>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    ee64:	612a      	str	r2, [r5, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    ee66:	009b      	lsls	r3, r3, #2
    ee68:	59db      	ldr	r3, [r3, r7]
    ee6a:	2b00      	cmp	r3, #0
    ee6c:	d000      	beq.n	ee70 <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    ee6e:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ee70:	7823      	ldrb	r3, [r4, #0]
    ee72:	3301      	adds	r3, #1
    ee74:	b2db      	uxtb	r3, r3
    ee76:	7023      	strb	r3, [r4, #0]
    ee78:	2b0f      	cmp	r3, #15
    ee7a:	d9ee      	bls.n	ee5a <EIC_Handler+0xe>
			}
		}
	}
}
    ee7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee7e:	46c0      	nop			; (mov r8, r8)
    ee80:	20000cb0 	.word	0x20000cb0
    ee84:	40001800 	.word	0x40001800
    ee88:	20000cb4 	.word	0x20000cb4

0000ee8c <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
    ee8c:	2140      	movs	r1, #64	; 0x40
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    ee8e:	b500      	push	{lr}
    ee90:	4a15      	ldr	r2, [pc, #84]	; (eee8 <_system_extint_init+0x5c>)
    ee92:	b083      	sub	sp, #12
    ee94:	6993      	ldr	r3, [r2, #24]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    ee96:	2005      	movs	r0, #5
    ee98:	430b      	orrs	r3, r1
    ee9a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    ee9c:	2302      	movs	r3, #2
    ee9e:	a901      	add	r1, sp, #4
    eea0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    eea2:	4b12      	ldr	r3, [pc, #72]	; (eeec <_system_extint_init+0x60>)
    eea4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    eea6:	4b12      	ldr	r3, [pc, #72]	; (eef0 <_system_extint_init+0x64>)
    eea8:	2005      	movs	r0, #5
    eeaa:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    eeac:	2101      	movs	r1, #1
    eeae:	4a11      	ldr	r2, [pc, #68]	; (eef4 <_system_extint_init+0x68>)
    eeb0:	7813      	ldrb	r3, [r2, #0]
    eeb2:	430b      	orrs	r3, r1
    eeb4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    eeb6:	7853      	ldrb	r3, [r2, #1]
    eeb8:	b25b      	sxtb	r3, r3
    eeba:	2b00      	cmp	r3, #0
    eebc:	dbfb      	blt.n	eeb6 <_system_extint_init+0x2a>
    eebe:	4b0e      	ldr	r3, [pc, #56]	; (eef8 <_system_extint_init+0x6c>)

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    eec0:	2200      	movs	r2, #0
    eec2:	0019      	movs	r1, r3
    eec4:	3140      	adds	r1, #64	; 0x40
    eec6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    eec8:	4299      	cmp	r1, r3
    eeca:	d1fc      	bne.n	eec6 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    eecc:	2210      	movs	r2, #16
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    eece:	2102      	movs	r1, #2
    eed0:	4b0a      	ldr	r3, [pc, #40]	; (eefc <_system_extint_init+0x70>)
    eed2:	601a      	str	r2, [r3, #0]
    eed4:	4a07      	ldr	r2, [pc, #28]	; (eef4 <_system_extint_init+0x68>)
    eed6:	7813      	ldrb	r3, [r2, #0]
    eed8:	430b      	orrs	r3, r1
    eeda:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    eedc:	7853      	ldrb	r3, [r2, #1]
    eede:	b25b      	sxtb	r3, r3
    eee0:	2b00      	cmp	r3, #0
    eee2:	dbfb      	blt.n	eedc <_system_extint_init+0x50>
}
    eee4:	b003      	add	sp, #12
    eee6:	bd00      	pop	{pc}
    eee8:	40000400 	.word	0x40000400
    eeec:	00010169 	.word	0x00010169
    eef0:	000100e1 	.word	0x000100e1
    eef4:	40001800 	.word	0x40001800
    eef8:	20000cb4 	.word	0x20000cb4
    eefc:	e000e100 	.word	0xe000e100

0000ef00 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    ef00:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    ef02:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    ef04:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    ef06:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    ef08:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    ef0a:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    ef0c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    ef0e:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    ef10:	72c3      	strb	r3, [r0, #11]
}
    ef12:	4770      	bx	lr

0000ef14 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    ef14:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ef16:	2300      	movs	r3, #0
    ef18:	000c      	movs	r4, r1
    ef1a:	b083      	sub	sp, #12
    ef1c:	a901      	add	r1, sp, #4
    ef1e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    ef20:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    ef22:	7923      	ldrb	r3, [r4, #4]
{
    ef24:	0005      	movs	r5, r0
	pinmux_config.mux_position = config->gpio_pin_mux;
    ef26:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    ef28:	7a23      	ldrb	r3, [r4, #8]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    ef2a:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    ef2c:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    ef2e:	4b15      	ldr	r3, [pc, #84]	; (ef84 <extint_chan_set_config+0x70>)
    ef30:	4798      	blx	r3
		return NULL;
    ef32:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    ef34:	2d1f      	cmp	r5, #31
    ef36:	d800      	bhi.n	ef3a <extint_chan_set_config+0x26>
		return eics[eic_index];
    ef38:	4813      	ldr	r0, [pc, #76]	; (ef88 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    ef3a:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    ef3c:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    ef3e:	402a      	ands	r2, r5
    ef40:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    ef42:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
    ef44:	2b00      	cmp	r3, #0
    ef46:	d001      	beq.n	ef4c <extint_chan_set_config+0x38>
    ef48:	2308      	movs	r3, #8
    ef4a:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ef4c:	260f      	movs	r6, #15
			(new_config << config_pos);
    ef4e:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ef50:	4096      	lsls	r6, r2
			(new_config << config_pos);
    ef52:	003a      	movs	r2, r7
    ef54:	08eb      	lsrs	r3, r5, #3
    ef56:	009b      	lsls	r3, r3, #2
    ef58:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    ef5a:	6999      	ldr	r1, [r3, #24]
    ef5c:	43b1      	bics	r1, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ef5e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    ef60:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    ef62:	7a63      	ldrb	r3, [r4, #9]
    ef64:	2b00      	cmp	r3, #0
    ef66:	d106      	bne.n	ef76 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    ef68:	2201      	movs	r2, #1
    ef6a:	40aa      	lsls	r2, r5
    ef6c:	6943      	ldr	r3, [r0, #20]
    ef6e:	4393      	bics	r3, r2
    ef70:	6143      	str	r3, [r0, #20]
	}
}
    ef72:	b003      	add	sp, #12
    ef74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    ef76:	2301      	movs	r3, #1
    ef78:	40ab      	lsls	r3, r5
    ef7a:	6942      	ldr	r2, [r0, #20]
    ef7c:	4313      	orrs	r3, r2
    ef7e:	6143      	str	r3, [r0, #20]
    ef80:	e7f7      	b.n	ef72 <extint_chan_set_config+0x5e>
    ef82:	46c0      	nop			; (mov r8, r8)
    ef84:	00010269 	.word	0x00010269
    ef88:	40001800 	.word	0x40001800

0000ef8c <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ef8c:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    ef8e:	b500      	push	{lr}
    ef90:	b083      	sub	sp, #12
    ef92:	ab01      	add	r3, sp, #4
    ef94:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    ef96:	780a      	ldrb	r2, [r1, #0]
    ef98:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    ef9a:	784a      	ldrb	r2, [r1, #1]
    ef9c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    ef9e:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    efa0:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    efa2:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    efa4:	4b01      	ldr	r3, [pc, #4]	; (efac <port_pin_set_config+0x20>)
    efa6:	4798      	blx	r3
}
    efa8:	b003      	add	sp, #12
    efaa:	bd00      	pop	{pc}
    efac:	00010269 	.word	0x00010269

0000efb0 <rtc_calendar_enable>:
    efb0:	2108      	movs	r1, #8
    efb2:	4b06      	ldr	r3, [pc, #24]	; (efcc <rtc_calendar_enable+0x1c>)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    efb4:	6802      	ldr	r2, [r0, #0]
    efb6:	6019      	str	r1, [r3, #0]
    efb8:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    efba:	7a8b      	ldrb	r3, [r1, #10]
    efbc:	b25b      	sxtb	r3, r3
    efbe:	2b00      	cmp	r3, #0
    efc0:	dbfb      	blt.n	efba <rtc_calendar_enable+0xa>
	while (rtc_calendar_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    efc2:	2102      	movs	r1, #2
    efc4:	8813      	ldrh	r3, [r2, #0]
    efc6:	430b      	orrs	r3, r1
    efc8:	8013      	strh	r3, [r2, #0]
}
    efca:	4770      	bx	lr
    efcc:	e000e100 	.word	0xe000e100

0000efd0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    efd0:	b510      	push	{r4, lr}
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    efd2:	2280      	movs	r2, #128	; 0x80
    efd4:	2408      	movs	r4, #8
    efd6:	490e      	ldr	r1, [pc, #56]	; (f010 <rtc_calendar_reset+0x40>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    efd8:	6803      	ldr	r3, [r0, #0]
    efda:	508c      	str	r4, [r1, r2]
    efdc:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    efde:	7a8a      	ldrb	r2, [r1, #10]
    efe0:	b252      	sxtb	r2, r2
    efe2:	2a00      	cmp	r2, #0
    efe4:	dbfb      	blt.n	efde <rtc_calendar_reset+0xe>
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    efe6:	22c1      	movs	r2, #193	; 0xc1
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    efe8:	2102      	movs	r1, #2
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    efea:	719a      	strb	r2, [r3, #6]
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    efec:	721a      	strb	r2, [r3, #8]
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    efee:	881a      	ldrh	r2, [r3, #0]
    eff0:	438a      	bics	r2, r1
    eff2:	801a      	strh	r2, [r3, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    eff4:	2200      	movs	r2, #0
    eff6:	6801      	ldr	r1, [r0, #0]
    eff8:	8202      	strh	r2, [r0, #16]
	module->enabled_callback    = 0;
    effa:	8242      	strh	r2, [r0, #18]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    effc:	7a8a      	ldrb	r2, [r1, #10]
    effe:	b252      	sxtb	r2, r2
    f000:	2a00      	cmp	r2, #0
    f002:	dbfb      	blt.n	effc <rtc_calendar_reset+0x2c>
	while (rtc_calendar_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    f004:	2101      	movs	r1, #1
    f006:	881a      	ldrh	r2, [r3, #0]
    f008:	430a      	orrs	r2, r1
    f00a:	801a      	strh	r2, [r3, #0]
}
    f00c:	bd10      	pop	{r4, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	e000e100 	.word	0xe000e100

0000f014 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    f014:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    f016:	88cb      	ldrh	r3, [r1, #6]
    f018:	88c2      	ldrh	r2, [r0, #6]

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    f01a:	790c      	ldrb	r4, [r1, #4]
	register_value = (time->year - module->year_init_value) <<
    f01c:	1a9a      	subs	r2, r3, r2
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    f01e:	794b      	ldrb	r3, [r1, #5]
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    f020:	0464      	lsls	r4, r4, #17
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    f022:	059b      	lsls	r3, r3, #22

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    f024:	4323      	orrs	r3, r4
    f026:	788c      	ldrb	r4, [r1, #2]
	register_value = (time->year - module->year_init_value) <<
    f028:	0692      	lsls	r2, r2, #26
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    f02a:	0324      	lsls	r4, r4, #12
    f02c:	4323      	orrs	r3, r4
    f02e:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    f030:	7902      	ldrb	r2, [r0, #4]
    f032:	2a00      	cmp	r2, #0
    f034:	d105      	bne.n	f042 <rtc_calendar_time_to_register_value+0x2e>
    f036:	78ca      	ldrb	r2, [r1, #3]
    f038:	2a00      	cmp	r2, #0
    f03a:	d002      	beq.n	f042 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    f03c:	2280      	movs	r2, #128	; 0x80
    f03e:	0252      	lsls	r2, r2, #9
    f040:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    f042:	7848      	ldrb	r0, [r1, #1]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    f044:	780a      	ldrb	r2, [r1, #0]
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    f046:	0180      	lsls	r0, r0, #6
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    f048:	4310      	orrs	r0, r2
    f04a:	4318      	orrs	r0, r3

	return register_value;
}
    f04c:	bd10      	pop	{r4, pc}
    f04e:	46c0      	nop			; (mov r8, r8)

0000f050 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    f050:	b530      	push	{r4, r5, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    f052:	88c4      	ldrh	r4, [r0, #6]
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f054:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    f056:	191b      	adds	r3, r3, r4

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    f058:	240f      	movs	r4, #15
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    f05a:	251f      	movs	r5, #31
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f05c:	80d3      	strh	r3, [r2, #6]
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    f05e:	0d8b      	lsrs	r3, r1, #22
    f060:	4023      	ands	r3, r4
    f062:	7153      	strb	r3, [r2, #5]
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    f064:	0c4b      	lsrs	r3, r1, #17
    f066:	402b      	ands	r3, r5
    f068:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    f06a:	7903      	ldrb	r3, [r0, #4]
    f06c:	2b00      	cmp	r3, #0
    f06e:	d10c      	bne.n	f08a <rtc_calendar_register_value_to_time+0x3a>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    f070:	0b0b      	lsrs	r3, r1, #12
    f072:	401c      	ands	r4, r3
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    f074:	03cb      	lsls	r3, r1, #15
    f076:	0fdb      	lsrs	r3, r3, #31
		time->hour = ((register_value &
    f078:	7094      	strb	r4, [r2, #2]
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    f07a:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    f07c:	233f      	movs	r3, #63	; 0x3f
    f07e:	0988      	lsrs	r0, r1, #6
    f080:	4018      	ands	r0, r3
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    f082:	4019      	ands	r1, r3
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    f084:	7050      	strb	r0, [r2, #1]
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    f086:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    f088:	bd30      	pop	{r4, r5, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    f08a:	0b0b      	lsrs	r3, r1, #12
    f08c:	401d      	ands	r5, r3
    f08e:	7095      	strb	r5, [r2, #2]
    f090:	e7f4      	b.n	f07c <rtc_calendar_register_value_to_time+0x2c>
    f092:	46c0      	nop			; (mov r8, r8)

0000f094 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    f094:	000a      	movs	r2, r1

	Rtc *const rtc_module = module->hw;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    f096:	7941      	ldrb	r1, [r0, #5]
{
    f098:	b510      	push	{r4, lr}
	Rtc *const rtc_module = module->hw;
    f09a:	6803      	ldr	r3, [r0, #0]
	if (!(module->continuously_update)) {
    f09c:	2900      	cmp	r1, #0
    f09e:	d006      	beq.n	f0ae <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    f0a0:	8859      	ldrh	r1, [r3, #2]
    f0a2:	0449      	lsls	r1, r1, #17
    f0a4:	d50b      	bpl.n	f0be <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    f0a6:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    f0a8:	4b0a      	ldr	r3, [pc, #40]	; (f0d4 <rtc_calendar_get_time+0x40>)
    f0aa:	4798      	blx	r3
}
    f0ac:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    f0ae:	490a      	ldr	r1, [pc, #40]	; (f0d8 <rtc_calendar_get_time+0x44>)
    f0b0:	8059      	strh	r1, [r3, #2]
    f0b2:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f0b4:	7aa1      	ldrb	r1, [r4, #10]
    f0b6:	b249      	sxtb	r1, r1
    f0b8:	2900      	cmp	r1, #0
    f0ba:	daf4      	bge.n	f0a6 <rtc_calendar_get_time+0x12>
    f0bc:	e7fa      	b.n	f0b4 <rtc_calendar_get_time+0x20>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    f0be:	24c0      	movs	r4, #192	; 0xc0
    f0c0:	8859      	ldrh	r1, [r3, #2]
    f0c2:	0224      	lsls	r4, r4, #8
    f0c4:	4321      	orrs	r1, r4
    f0c6:	8059      	strh	r1, [r3, #2]
    f0c8:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f0ca:	7aa1      	ldrb	r1, [r4, #10]
    f0cc:	b249      	sxtb	r1, r1
    f0ce:	2900      	cmp	r1, #0
    f0d0:	dae9      	bge.n	f0a6 <rtc_calendar_get_time+0x12>
    f0d2:	e7fa      	b.n	f0ca <rtc_calendar_get_time+0x36>
    f0d4:	0000f051 	.word	0x0000f051
    f0d8:	ffff8000 	.word	0xffff8000

0000f0dc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    f0dc:	b570      	push	{r4, r5, r6, lr}

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    f0de:	2317      	movs	r3, #23
{
    f0e0:	000d      	movs	r5, r1
    f0e2:	0014      	movs	r4, r2
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    f0e4:	2a01      	cmp	r2, #1
    f0e6:	d901      	bls.n	f0ec <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    f0e8:	0018      	movs	r0, r3
    f0ea:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    f0ec:	4b06      	ldr	r3, [pc, #24]	; (f108 <rtc_calendar_set_alarm+0x2c>)
	Rtc *const rtc_module = module->hw;
    f0ee:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    f0f0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f0f2:	7ab3      	ldrb	r3, [r6, #10]
    f0f4:	b25b      	sxtb	r3, r3
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	dbfb      	blt.n	f0f2 <rtc_calendar_set_alarm+0x16>
    f0fa:	00e4      	lsls	r4, r4, #3
    f0fc:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    f0fe:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    f100:	7a2b      	ldrb	r3, [r5, #8]
    f102:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    f104:	2300      	movs	r3, #0
    f106:	e7ef      	b.n	f0e8 <rtc_calendar_set_alarm+0xc>
    f108:	0000f015 	.word	0x0000f015

0000f10c <rtc_calendar_init>:
{
    f10c:	b530      	push	{r4, r5, lr}
	module->hw = hw;
    f10e:	6001      	str	r1, [r0, #0]
    f110:	2120      	movs	r1, #32
{
    f112:	0014      	movs	r4, r2
    f114:	4a1c      	ldr	r2, [pc, #112]	; (f188 <rtc_calendar_init+0x7c>)
    f116:	0005      	movs	r5, r0
    f118:	6993      	ldr	r3, [r2, #24]
    f11a:	b083      	sub	sp, #12
    f11c:	430b      	orrs	r3, r1
    f11e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    f120:	2302      	movs	r3, #2
    f122:	a901      	add	r1, sp, #4
    f124:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    f126:	2004      	movs	r0, #4
    f128:	4b18      	ldr	r3, [pc, #96]	; (f18c <rtc_calendar_init+0x80>)
    f12a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    f12c:	2004      	movs	r0, #4
    f12e:	4b18      	ldr	r3, [pc, #96]	; (f190 <rtc_calendar_init+0x84>)
    f130:	4798      	blx	r3
	rtc_calendar_reset(module);
    f132:	4b18      	ldr	r3, [pc, #96]	; (f194 <rtc_calendar_init+0x88>)
    f134:	0028      	movs	r0, r5
    f136:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    f138:	7923      	ldrb	r3, [r4, #4]
    f13a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    f13c:	78e3      	ldrb	r3, [r4, #3]
    f13e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    f140:	88e3      	ldrh	r3, [r4, #6]
    f142:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    f144:	4b14      	ldr	r3, [pc, #80]	; (f198 <rtc_calendar_init+0x8c>)
    f146:	601d      	str	r5, [r3, #0]
	if (!(config->clock_24h)) {
    f148:	7921      	ldrb	r1, [r4, #4]
	Rtc *const rtc_module = module->hw;
    f14a:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f14c:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    f14e:	2900      	cmp	r1, #0
    f150:	d017      	beq.n	f182 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f152:	2108      	movs	r1, #8
    f154:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    f156:	78a1      	ldrb	r1, [r4, #2]
    f158:	2900      	cmp	r1, #0
    f15a:	d001      	beq.n	f160 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    f15c:	2180      	movs	r1, #128	; 0x80
    f15e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    f160:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    f162:	78e3      	ldrb	r3, [r4, #3]
    f164:	2b00      	cmp	r3, #0
    f166:	d004      	beq.n	f172 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    f168:	2380      	movs	r3, #128	; 0x80
    f16a:	8851      	ldrh	r1, [r2, #2]
    f16c:	01db      	lsls	r3, r3, #7
    f16e:	430b      	orrs	r3, r1
    f170:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    f172:	0021      	movs	r1, r4
    f174:	2200      	movs	r2, #0
    f176:	3108      	adds	r1, #8
    f178:	0028      	movs	r0, r5
    f17a:	4b08      	ldr	r3, [pc, #32]	; (f19c <rtc_calendar_init+0x90>)
    f17c:	4798      	blx	r3
}
    f17e:	b003      	add	sp, #12
    f180:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    f182:	2148      	movs	r1, #72	; 0x48
    f184:	430b      	orrs	r3, r1
    f186:	e7e6      	b.n	f156 <rtc_calendar_init+0x4a>
    f188:	40000400 	.word	0x40000400
    f18c:	00010169 	.word	0x00010169
    f190:	000100e1 	.word	0x000100e1
    f194:	0000efd1 	.word	0x0000efd1
    f198:	20000cf4 	.word	0x20000cf4
    f19c:	0000f0dd 	.word	0x0000f0dd

0000f1a0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    f1a0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    f1a2:	4b10      	ldr	r3, [pc, #64]	; (f1e4 <RTC_Handler+0x44>)
    f1a4:	681a      	ldr	r2, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    f1a6:	8a51      	ldrh	r1, [r2, #18]
	Rtc *const rtc_module = module->hw;
    f1a8:	6814      	ldr	r4, [r2, #0]
	callback_mask &= module->registered_callback;
    f1aa:	8a13      	ldrh	r3, [r2, #16]
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    f1ac:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
    f1ae:	4019      	ands	r1, r3
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    f1b0:	79e3      	ldrb	r3, [r4, #7]
    f1b2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    f1b4:	b258      	sxtb	r0, r3
    f1b6:	2800      	cmp	r0, #0
    f1b8:	db07      	blt.n	f1ca <RTC_Handler+0x2a>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    f1ba:	2001      	movs	r0, #1
    f1bc:	4218      	tst	r0, r3
    f1be:	d003      	beq.n	f1c8 <RTC_Handler+0x28>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    f1c0:	4208      	tst	r0, r1
    f1c2:	d10c      	bne.n	f1de <RTC_Handler+0x3e>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    f1c4:	2301      	movs	r3, #1
    f1c6:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    f1c8:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    f1ca:	078b      	lsls	r3, r1, #30
    f1cc:	d402      	bmi.n	f1d4 <RTC_Handler+0x34>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    f1ce:	2380      	movs	r3, #128	; 0x80
    f1d0:	7223      	strb	r3, [r4, #8]
    f1d2:	e7f9      	b.n	f1c8 <RTC_Handler+0x28>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    f1d4:	68d3      	ldr	r3, [r2, #12]
    f1d6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    f1d8:	2380      	movs	r3, #128	; 0x80
    f1da:	7223      	strb	r3, [r4, #8]
    f1dc:	e7f4      	b.n	f1c8 <RTC_Handler+0x28>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    f1de:	6893      	ldr	r3, [r2, #8]
    f1e0:	4798      	blx	r3
    f1e2:	e7ef      	b.n	f1c4 <RTC_Handler+0x24>
    f1e4:	20000cf4 	.word	0x20000cf4

0000f1e8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    f1e8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    f1ea:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f1ec:	2340      	movs	r3, #64	; 0x40
    f1ee:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    f1f0:	4281      	cmp	r1, r0
    f1f2:	d202      	bcs.n	f1fa <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    f1f4:	0018      	movs	r0, r3
    f1f6:	bd10      	pop	{r4, pc}
		baud_calculated++;
    f1f8:	001c      	movs	r4, r3
    f1fa:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
    f1fc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    f1fe:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    f200:	4288      	cmp	r0, r1
    f202:	d9f9      	bls.n	f1f8 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f204:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    f206:	2cff      	cmp	r4, #255	; 0xff
    f208:	d8f4      	bhi.n	f1f4 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    f20a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    f20c:	2300      	movs	r3, #0
    f20e:	e7f1      	b.n	f1f4 <_sercom_get_sync_baud_val+0xc>

0000f210 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    f210:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    f212:	4c0e      	ldr	r4, [pc, #56]	; (f24c <sercom_set_gclk_generator+0x3c>)
{
    f214:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
    f216:	7823      	ldrb	r3, [r4, #0]
{
    f218:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    f21a:	2b00      	cmp	r3, #0
    f21c:	d006      	beq.n	f22c <sercom_set_gclk_generator+0x1c>
    f21e:	2900      	cmp	r1, #0
    f220:	d104      	bne.n	f22c <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    f222:	7863      	ldrb	r3, [r4, #1]
    f224:	4283      	cmp	r3, r0
    f226:	d00f      	beq.n	f248 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    f228:	201d      	movs	r0, #29
    f22a:	e00b      	b.n	f244 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
    f22c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f22e:	2013      	movs	r0, #19
    f230:	4b07      	ldr	r3, [pc, #28]	; (f250 <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
    f232:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f234:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    f236:	2013      	movs	r0, #19
    f238:	4b06      	ldr	r3, [pc, #24]	; (f254 <sercom_set_gclk_generator+0x44>)
    f23a:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
    f23c:	2301      	movs	r3, #1
		return STATUS_OK;
    f23e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    f240:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    f242:	7023      	strb	r3, [r4, #0]
}
    f244:	b003      	add	sp, #12
    f246:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    f248:	2000      	movs	r0, #0
    f24a:	e7fb      	b.n	f244 <sercom_set_gclk_generator+0x34>
    f24c:	200008d0 	.word	0x200008d0
    f250:	00010169 	.word	0x00010169
    f254:	000100e1 	.word	0x000100e1

0000f258 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    f258:	4b3a      	ldr	r3, [pc, #232]	; (f344 <_sercom_get_default_pad+0xec>)
    f25a:	4298      	cmp	r0, r3
    f25c:	d043      	beq.n	f2e6 <_sercom_get_default_pad+0x8e>
    f25e:	d90a      	bls.n	f276 <_sercom_get_default_pad+0x1e>
    f260:	4b39      	ldr	r3, [pc, #228]	; (f348 <_sercom_get_default_pad+0xf0>)
    f262:	4298      	cmp	r0, r3
    f264:	d017      	beq.n	f296 <_sercom_get_default_pad+0x3e>
    f266:	4b39      	ldr	r3, [pc, #228]	; (f34c <_sercom_get_default_pad+0xf4>)
    f268:	4298      	cmp	r0, r3
    f26a:	d032      	beq.n	f2d2 <_sercom_get_default_pad+0x7a>
    f26c:	4b38      	ldr	r3, [pc, #224]	; (f350 <_sercom_get_default_pad+0xf8>)
    f26e:	4298      	cmp	r0, r3
    f270:	d01b      	beq.n	f2aa <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    f272:	2000      	movs	r0, #0
}
    f274:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    f276:	4b37      	ldr	r3, [pc, #220]	; (f354 <_sercom_get_default_pad+0xfc>)
    f278:	4298      	cmp	r0, r3
    f27a:	d020      	beq.n	f2be <_sercom_get_default_pad+0x66>
    f27c:	4b36      	ldr	r3, [pc, #216]	; (f358 <_sercom_get_default_pad+0x100>)
    f27e:	4298      	cmp	r0, r3
    f280:	d1f7      	bne.n	f272 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f282:	2901      	cmp	r1, #1
    f284:	d043      	beq.n	f30e <_sercom_get_default_pad+0xb6>
    f286:	2900      	cmp	r1, #0
    f288:	d03f      	beq.n	f30a <_sercom_get_default_pad+0xb2>
    f28a:	2902      	cmp	r1, #2
    f28c:	d03b      	beq.n	f306 <_sercom_get_default_pad+0xae>
    f28e:	2903      	cmp	r1, #3
    f290:	d1ef      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f292:	4832      	ldr	r0, [pc, #200]	; (f35c <_sercom_get_default_pad+0x104>)
    f294:	e7ee      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f296:	2901      	cmp	r1, #1
    f298:	d031      	beq.n	f2fe <_sercom_get_default_pad+0xa6>
    f29a:	2900      	cmp	r1, #0
    f29c:	d02d      	beq.n	f2fa <_sercom_get_default_pad+0xa2>
    f29e:	2902      	cmp	r1, #2
    f2a0:	d02f      	beq.n	f302 <_sercom_get_default_pad+0xaa>
    f2a2:	2903      	cmp	r1, #3
    f2a4:	d1e5      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f2a6:	482e      	ldr	r0, [pc, #184]	; (f360 <_sercom_get_default_pad+0x108>)
    f2a8:	e7e4      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2aa:	2901      	cmp	r1, #1
    f2ac:	d03f      	beq.n	f32e <_sercom_get_default_pad+0xd6>
    f2ae:	2900      	cmp	r1, #0
    f2b0:	d03b      	beq.n	f32a <_sercom_get_default_pad+0xd2>
    f2b2:	2902      	cmp	r1, #2
    f2b4:	d037      	beq.n	f326 <_sercom_get_default_pad+0xce>
    f2b6:	2903      	cmp	r1, #3
    f2b8:	d1db      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f2ba:	482a      	ldr	r0, [pc, #168]	; (f364 <_sercom_get_default_pad+0x10c>)
    f2bc:	e7da      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2be:	2901      	cmp	r1, #1
    f2c0:	d03d      	beq.n	f33e <_sercom_get_default_pad+0xe6>
    f2c2:	2900      	cmp	r1, #0
    f2c4:	d039      	beq.n	f33a <_sercom_get_default_pad+0xe2>
    f2c6:	2902      	cmp	r1, #2
    f2c8:	d02b      	beq.n	f322 <_sercom_get_default_pad+0xca>
    f2ca:	2903      	cmp	r1, #3
    f2cc:	d1d1      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f2ce:	4826      	ldr	r0, [pc, #152]	; (f368 <_sercom_get_default_pad+0x110>)
    f2d0:	e7d0      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2d2:	2901      	cmp	r1, #1
    f2d4:	d023      	beq.n	f31e <_sercom_get_default_pad+0xc6>
    f2d6:	2900      	cmp	r1, #0
    f2d8:	d01f      	beq.n	f31a <_sercom_get_default_pad+0xc2>
    f2da:	2902      	cmp	r1, #2
    f2dc:	d01b      	beq.n	f316 <_sercom_get_default_pad+0xbe>
    f2de:	2903      	cmp	r1, #3
    f2e0:	d1c7      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f2e2:	4822      	ldr	r0, [pc, #136]	; (f36c <_sercom_get_default_pad+0x114>)
    f2e4:	e7c6      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2e6:	2901      	cmp	r1, #1
    f2e8:	d025      	beq.n	f336 <_sercom_get_default_pad+0xde>
    f2ea:	2900      	cmp	r1, #0
    f2ec:	d021      	beq.n	f332 <_sercom_get_default_pad+0xda>
    f2ee:	2902      	cmp	r1, #2
    f2f0:	d00f      	beq.n	f312 <_sercom_get_default_pad+0xba>
    f2f2:	2903      	cmp	r1, #3
    f2f4:	d1bd      	bne.n	f272 <_sercom_get_default_pad+0x1a>
    f2f6:	481e      	ldr	r0, [pc, #120]	; (f370 <_sercom_get_default_pad+0x118>)
    f2f8:	e7bc      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2fa:	481e      	ldr	r0, [pc, #120]	; (f374 <_sercom_get_default_pad+0x11c>)
    f2fc:	e7ba      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f2fe:	481e      	ldr	r0, [pc, #120]	; (f378 <_sercom_get_default_pad+0x120>)
    f300:	e7b8      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f302:	481e      	ldr	r0, [pc, #120]	; (f37c <_sercom_get_default_pad+0x124>)
    f304:	e7b6      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f306:	481e      	ldr	r0, [pc, #120]	; (f380 <_sercom_get_default_pad+0x128>)
    f308:	e7b4      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f30a:	2003      	movs	r0, #3
    f30c:	e7b2      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f30e:	481d      	ldr	r0, [pc, #116]	; (f384 <_sercom_get_default_pad+0x12c>)
    f310:	e7b0      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f312:	481d      	ldr	r0, [pc, #116]	; (f388 <_sercom_get_default_pad+0x130>)
    f314:	e7ae      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f316:	481d      	ldr	r0, [pc, #116]	; (f38c <_sercom_get_default_pad+0x134>)
    f318:	e7ac      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f31a:	481d      	ldr	r0, [pc, #116]	; (f390 <_sercom_get_default_pad+0x138>)
    f31c:	e7aa      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f31e:	481d      	ldr	r0, [pc, #116]	; (f394 <_sercom_get_default_pad+0x13c>)
    f320:	e7a8      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f322:	481d      	ldr	r0, [pc, #116]	; (f398 <_sercom_get_default_pad+0x140>)
    f324:	e7a6      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f326:	481d      	ldr	r0, [pc, #116]	; (f39c <_sercom_get_default_pad+0x144>)
    f328:	e7a4      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f32a:	481d      	ldr	r0, [pc, #116]	; (f3a0 <_sercom_get_default_pad+0x148>)
    f32c:	e7a2      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f32e:	481d      	ldr	r0, [pc, #116]	; (f3a4 <_sercom_get_default_pad+0x14c>)
    f330:	e7a0      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f332:	481d      	ldr	r0, [pc, #116]	; (f3a8 <_sercom_get_default_pad+0x150>)
    f334:	e79e      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f336:	481d      	ldr	r0, [pc, #116]	; (f3ac <_sercom_get_default_pad+0x154>)
    f338:	e79c      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f33a:	481d      	ldr	r0, [pc, #116]	; (f3b0 <_sercom_get_default_pad+0x158>)
    f33c:	e79a      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f33e:	481d      	ldr	r0, [pc, #116]	; (f3b4 <_sercom_get_default_pad+0x15c>)
    f340:	e798      	b.n	f274 <_sercom_get_default_pad+0x1c>
    f342:	46c0      	nop			; (mov r8, r8)
    f344:	42001000 	.word	0x42001000
    f348:	42001800 	.word	0x42001800
    f34c:	42001c00 	.word	0x42001c00
    f350:	42001400 	.word	0x42001400
    f354:	42000800 	.word	0x42000800
    f358:	42000c00 	.word	0x42000c00
    f35c:	001f0003 	.word	0x001f0003
    f360:	000f0003 	.word	0x000f0003
    f364:	00130003 	.word	0x00130003
    f368:	00070003 	.word	0x00070003
    f36c:	00190003 	.word	0x00190003
    f370:	000b0003 	.word	0x000b0003
    f374:	000c0003 	.word	0x000c0003
    f378:	000d0003 	.word	0x000d0003
    f37c:	000e0003 	.word	0x000e0003
    f380:	001e0003 	.word	0x001e0003
    f384:	00010003 	.word	0x00010003
    f388:	000a0003 	.word	0x000a0003
    f38c:	00180003 	.word	0x00180003
    f390:	00160003 	.word	0x00160003
    f394:	00170003 	.word	0x00170003
    f398:	00060003 	.word	0x00060003
    f39c:	00120003 	.word	0x00120003
    f3a0:	00100003 	.word	0x00100003
    f3a4:	00110003 	.word	0x00110003
    f3a8:	00080003 	.word	0x00080003
    f3ac:	00090003 	.word	0x00090003
    f3b0:	00040003 	.word	0x00040003
    f3b4:	00050003 	.word	0x00050003

0000f3b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    f3b8:	b570      	push	{r4, r5, r6, lr}
    f3ba:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    f3bc:	4669      	mov	r1, sp
    f3be:	4b09      	ldr	r3, [pc, #36]	; (f3e4 <_sercom_get_sercom_inst_index+0x2c>)
    f3c0:	466a      	mov	r2, sp
    f3c2:	cb70      	ldmia	r3!, {r4, r5, r6}
    f3c4:	c170      	stmia	r1!, {r4, r5, r6}
    f3c6:	cb70      	ldmia	r3!, {r4, r5, r6}
    f3c8:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f3ca:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    f3cc:	0099      	lsls	r1, r3, #2
    f3ce:	5851      	ldr	r1, [r2, r1]
    f3d0:	4281      	cmp	r1, r0
    f3d2:	d005      	beq.n	f3e0 <_sercom_get_sercom_inst_index+0x28>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f3d4:	3301      	adds	r3, #1
    f3d6:	2b06      	cmp	r3, #6
    f3d8:	d1f8      	bne.n	f3cc <_sercom_get_sercom_inst_index+0x14>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    f3da:	2000      	movs	r0, #0
}
    f3dc:	b006      	add	sp, #24
    f3de:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    f3e0:	b2d8      	uxtb	r0, r3
    f3e2:	e7fb      	b.n	f3dc <_sercom_get_sercom_inst_index+0x24>
    f3e4:	00016388 	.word	0x00016388

0000f3e8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    f3e8:	4770      	bx	lr
    f3ea:	46c0      	nop			; (mov r8, r8)

0000f3ec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3ee:	468c      	mov	ip, r1
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    f3f0:	490b      	ldr	r1, [pc, #44]	; (f420 <_sercom_set_handler+0x34>)
    f3f2:	780b      	ldrb	r3, [r1, #0]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d110      	bne.n	f41a <_sercom_set_handler+0x2e>
    f3f8:	2300      	movs	r3, #0
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    f3fa:	2500      	movs	r5, #0
    f3fc:	4c09      	ldr	r4, [pc, #36]	; (f424 <_sercom_set_handler+0x38>)
    f3fe:	4f0a      	ldr	r7, [pc, #40]	; (f428 <_sercom_set_handler+0x3c>)
    f400:	4e0a      	ldr	r6, [pc, #40]	; (f42c <_sercom_set_handler+0x40>)
    f402:	18f2      	adds	r2, r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    f404:	50e7      	str	r7, [r4, r3]
    f406:	3304      	adds	r3, #4
			_sercom_instances[i] = NULL;
    f408:	6015      	str	r5, [r2, #0]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f40a:	2b18      	cmp	r3, #24
    f40c:	d1f9      	bne.n	f402 <_sercom_set_handler+0x16>
		}

		_handler_table_initialized = true;
    f40e:	3b17      	subs	r3, #23
    f410:	700b      	strb	r3, [r1, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    f412:	4663      	mov	r3, ip
    f414:	0080      	lsls	r0, r0, #2
    f416:	5023      	str	r3, [r4, r0]
}
    f418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f41a:	4c02      	ldr	r4, [pc, #8]	; (f424 <_sercom_set_handler+0x38>)
    f41c:	e7f9      	b.n	f412 <_sercom_set_handler+0x26>
    f41e:	46c0      	nop			; (mov r8, r8)
    f420:	200008d2 	.word	0x200008d2
    f424:	200008d4 	.word	0x200008d4
    f428:	0000f3e9 	.word	0x0000f3e9
    f42c:	20000cf8 	.word	0x20000cf8

0000f430 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    f430:	b500      	push	{lr}
    f432:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    f434:	466a      	mov	r2, sp
    f436:	2309      	movs	r3, #9
    f438:	7013      	strb	r3, [r2, #0]
    f43a:	3301      	adds	r3, #1
    f43c:	7053      	strb	r3, [r2, #1]
    f43e:	3301      	adds	r3, #1
    f440:	7093      	strb	r3, [r2, #2]
    f442:	3301      	adds	r3, #1
    f444:	70d3      	strb	r3, [r2, #3]
    f446:	3301      	adds	r3, #1
    f448:	7113      	strb	r3, [r2, #4]
    f44a:	3301      	adds	r3, #1
    f44c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    f44e:	4b03      	ldr	r3, [pc, #12]	; (f45c <_sercom_get_interrupt_vector+0x2c>)
    f450:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    f452:	466b      	mov	r3, sp
    f454:	5618      	ldrsb	r0, [r3, r0]
}
    f456:	b003      	add	sp, #12
    f458:	bd00      	pop	{pc}
    f45a:	46c0      	nop			; (mov r8, r8)
    f45c:	0000f3b9 	.word	0x0000f3b9

0000f460 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    f460:	b510      	push	{r4, lr}
    f462:	4b02      	ldr	r3, [pc, #8]	; (f46c <SERCOM0_Handler+0xc>)
    f464:	2000      	movs	r0, #0
    f466:	681b      	ldr	r3, [r3, #0]
    f468:	4798      	blx	r3
    f46a:	bd10      	pop	{r4, pc}
    f46c:	200008d4 	.word	0x200008d4

0000f470 <SERCOM1_Handler>:
    f470:	b510      	push	{r4, lr}
    f472:	4b02      	ldr	r3, [pc, #8]	; (f47c <SERCOM1_Handler+0xc>)
    f474:	2001      	movs	r0, #1
    f476:	685b      	ldr	r3, [r3, #4]
    f478:	4798      	blx	r3
    f47a:	bd10      	pop	{r4, pc}
    f47c:	200008d4 	.word	0x200008d4

0000f480 <SERCOM2_Handler>:
    f480:	b510      	push	{r4, lr}
    f482:	4b02      	ldr	r3, [pc, #8]	; (f48c <SERCOM2_Handler+0xc>)
    f484:	2002      	movs	r0, #2
    f486:	689b      	ldr	r3, [r3, #8]
    f488:	4798      	blx	r3
    f48a:	bd10      	pop	{r4, pc}
    f48c:	200008d4 	.word	0x200008d4

0000f490 <SERCOM3_Handler>:
    f490:	b510      	push	{r4, lr}
    f492:	4b02      	ldr	r3, [pc, #8]	; (f49c <SERCOM3_Handler+0xc>)
    f494:	2003      	movs	r0, #3
    f496:	68db      	ldr	r3, [r3, #12]
    f498:	4798      	blx	r3
    f49a:	bd10      	pop	{r4, pc}
    f49c:	200008d4 	.word	0x200008d4

0000f4a0 <SERCOM4_Handler>:
    f4a0:	b510      	push	{r4, lr}
    f4a2:	4b02      	ldr	r3, [pc, #8]	; (f4ac <SERCOM4_Handler+0xc>)
    f4a4:	2004      	movs	r0, #4
    f4a6:	691b      	ldr	r3, [r3, #16]
    f4a8:	4798      	blx	r3
    f4aa:	bd10      	pop	{r4, pc}
    f4ac:	200008d4 	.word	0x200008d4

0000f4b0 <SERCOM5_Handler>:
    f4b0:	b510      	push	{r4, lr}
    f4b2:	4b02      	ldr	r3, [pc, #8]	; (f4bc <SERCOM5_Handler+0xc>)
    f4b4:	2005      	movs	r0, #5
    f4b6:	695b      	ldr	r3, [r3, #20]
    f4b8:	4798      	blx	r3
    f4ba:	bd10      	pop	{r4, pc}
    f4bc:	200008d4 	.word	0x200008d4

0000f4c0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    f4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4c2:	b083      	sub	sp, #12
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    f4c4:	2300      	movs	r3, #0
    f4c6:	466a      	mov	r2, sp

	SercomSpi *const spi_module = &(module->hw->SPI);
    f4c8:	6804      	ldr	r4, [r0, #0]
{
    f4ca:	0005      	movs	r5, r0
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    f4cc:	4e24      	ldr	r6, [pc, #144]	; (f560 <spi_set_baudrate+0xa0>)
    f4ce:	0020      	movs	r0, r4
	uint16_t baud = 0;
    f4d0:	80d3      	strh	r3, [r2, #6]
{
    f4d2:	000f      	movs	r7, r1
    f4d4:	47b0      	blx	r6
    f4d6:	231f      	movs	r3, #31
    f4d8:	4018      	ands	r0, r3
    f4da:	3b1e      	subs	r3, #30
    f4dc:	2280      	movs	r2, #128	; 0x80
    f4de:	4083      	lsls	r3, r0
    f4e0:	4920      	ldr	r1, [pc, #128]	; (f564 <spi_set_baudrate+0xa4>)
    f4e2:	508b      	str	r3, [r1, r2]
    f4e4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f4e6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d1fc      	bne.n	f4e6 <spi_set_baudrate+0x26>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    f4ec:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    f4ee:	338f      	adds	r3, #143	; 0x8f
    f4f0:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    f4f2:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    f4f4:	6823      	ldr	r3, [r4, #0]
    f4f6:	4393      	bics	r3, r2
    f4f8:	6023      	str	r3, [r4, #0]
    f4fa:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f4fc:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    f4fe:	2b00      	cmp	r3, #0
    f500:	d1fc      	bne.n	f4fc <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f502:	4b19      	ldr	r3, [pc, #100]	; (f568 <spi_set_baudrate+0xa8>)
    f504:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f506:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f508:	4b18      	ldr	r3, [pc, #96]	; (f56c <spi_set_baudrate+0xac>)
    f50a:	b2c0      	uxtb	r0, r0
    f50c:	4798      	blx	r3

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    f50e:	466b      	mov	r3, sp
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f510:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
    f512:	1d9a      	adds	r2, r3, #6
    f514:	0038      	movs	r0, r7
    f516:	4b16      	ldr	r3, [pc, #88]	; (f570 <spi_set_baudrate+0xb0>)
    f518:	4798      	blx	r3
    f51a:	1e07      	subs	r7, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    f51c:	d003      	beq.n	f526 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    f51e:	2717      	movs	r7, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    f520:	0038      	movs	r0, r7
    f522:	b003      	add	sp, #12
    f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    f526:	466b      	mov	r3, sp
    f528:	799b      	ldrb	r3, [r3, #6]
    f52a:	7323      	strb	r3, [r4, #12]
    f52c:	682c      	ldr	r4, [r5, #0]
    f52e:	69e3      	ldr	r3, [r4, #28]
	while (spi_is_syncing(module)) {
    f530:	2b00      	cmp	r3, #0
    f532:	d1fc      	bne.n	f52e <spi_set_baudrate+0x6e>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f534:	0020      	movs	r0, r4
    f536:	47b0      	blx	r6
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f538:	231f      	movs	r3, #31
    f53a:	4018      	ands	r0, r3
    f53c:	3b1e      	subs	r3, #30
    f53e:	4083      	lsls	r3, r0
    f540:	4a08      	ldr	r2, [pc, #32]	; (f564 <spi_set_baudrate+0xa4>)
    f542:	6013      	str	r3, [r2, #0]
    f544:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f546:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f548:	2b00      	cmp	r3, #0
    f54a:	d1fc      	bne.n	f546 <spi_set_baudrate+0x86>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    f54c:	2202      	movs	r2, #2
    f54e:	6823      	ldr	r3, [r4, #0]
    f550:	4313      	orrs	r3, r2
    f552:	6023      	str	r3, [r4, #0]
    f554:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f556:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f558:	2b00      	cmp	r3, #0
    f55a:	d1fc      	bne.n	f556 <spi_set_baudrate+0x96>
    f55c:	e7e0      	b.n	f520 <spi_set_baudrate+0x60>
    f55e:	46c0      	nop			; (mov r8, r8)
    f560:	0000f431 	.word	0x0000f431
    f564:	e000e100 	.word	0xe000e100
    f568:	0000f3b9 	.word	0x0000f3b9
    f56c:	00010185 	.word	0x00010185
    f570:	0000f1e9 	.word	0x0000f1e9

0000f574 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    f574:	b5f0      	push	{r4, r5, r6, r7, lr}
    f576:	464e      	mov	r6, r9
    f578:	4645      	mov	r5, r8
    f57a:	46de      	mov	lr, fp
    f57c:	4657      	mov	r7, sl
    f57e:	0004      	movs	r4, r0
    f580:	b5e0      	push	{r5, r6, r7, lr}
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    f582:	6021      	str	r1, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    f584:	680b      	ldr	r3, [r1, #0]
{
    f586:	b087      	sub	sp, #28
    f588:	000e      	movs	r6, r1
    f58a:	0015      	movs	r5, r2
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    f58c:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    f58e:	079b      	lsls	r3, r3, #30
    f590:	d506      	bpl.n	f5a0 <spi_init+0x2c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    f592:	b007      	add	sp, #28
    f594:	bc3c      	pop	{r2, r3, r4, r5}
    f596:	4690      	mov	r8, r2
    f598:	4699      	mov	r9, r3
    f59a:	46a2      	mov	sl, r4
    f59c:	46ab      	mov	fp, r5
    f59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    f5a0:	2701      	movs	r7, #1
    f5a2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    f5a4:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    f5a6:	421f      	tst	r7, r3
    f5a8:	d1f3      	bne.n	f592 <spi_init+0x1e>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f5aa:	4b63      	ldr	r3, [pc, #396]	; (f738 <spi_init+0x1c4>)
    f5ac:	0008      	movs	r0, r1
    f5ae:	469a      	mov	sl, r3
    f5b0:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    f5b2:	1c81      	adds	r1, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f5b4:	408f      	lsls	r7, r1
			PM->APBCMASK.reg |= mask;
    f5b6:	4b61      	ldr	r3, [pc, #388]	; (f73c <spi_init+0x1c8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f5b8:	3014      	adds	r0, #20
    f5ba:	6a1a      	ldr	r2, [r3, #32]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f5bc:	4669      	mov	r1, sp
    f5be:	4317      	orrs	r7, r2
    f5c0:	621f      	str	r7, [r3, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    f5c2:	2324      	movs	r3, #36	; 0x24
    f5c4:	466a      	mov	r2, sp
    f5c6:	4698      	mov	r8, r3
    f5c8:	5ceb      	ldrb	r3, [r5, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f5ca:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    f5cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f5ce:	0038      	movs	r0, r7
    f5d0:	4b5b      	ldr	r3, [pc, #364]	; (f740 <spi_init+0x1cc>)
    f5d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f5d4:	0038      	movs	r0, r7
    f5d6:	4b5b      	ldr	r3, [pc, #364]	; (f744 <spi_init+0x1d0>)
    f5d8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f5da:	4643      	mov	r3, r8
    f5dc:	2100      	movs	r1, #0
    f5de:	5ce8      	ldrb	r0, [r5, r3]
    f5e0:	4b59      	ldr	r3, [pc, #356]	; (f748 <spi_init+0x1d4>)
    f5e2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    f5e4:	782b      	ldrb	r3, [r5, #0]
    f5e6:	2b01      	cmp	r3, #1
    f5e8:	d100      	bne.n	f5ec <spi_init+0x78>
    f5ea:	e08a      	b.n	f702 <spi_init+0x18e>
    f5ec:	0023      	movs	r3, r4
    f5ee:	0021      	movs	r1, r4
		module->callback[i]        = NULL;
    f5f0:	2200      	movs	r2, #0
    f5f2:	330c      	adds	r3, #12
    f5f4:	3128      	adds	r1, #40	; 0x28
    f5f6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    f5f8:	428b      	cmp	r3, r1
    f5fa:	d1fc      	bne.n	f5f6 <spi_init+0x82>
	module->remaining_tx_buffer_length = 0x0000;
    f5fc:	2700      	movs	r7, #0
	module->registered_callback        = 0x00;
    f5fe:	2336      	movs	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    f600:	86a2      	strh	r2, [r4, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    f602:	62e2      	str	r2, [r4, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    f604:	8622      	strh	r2, [r4, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    f606:	62a2      	str	r2, [r4, #40]	; 0x28
	module->registered_callback        = 0x00;
    f608:	54e7      	strb	r7, [r4, r3]
	module->enabled_callback           = 0x00;
    f60a:	3301      	adds	r3, #1
    f60c:	54e7      	strb	r7, [r4, r3]
	module->status                     = STATUS_OK;
    f60e:	3301      	adds	r3, #1
    f610:	54e7      	strb	r7, [r4, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    f612:	3b35      	subs	r3, #53	; 0x35
    f614:	7263      	strb	r3, [r4, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    f616:	6820      	ldr	r0, [r4, #0]
	module->locked                     = false;
    f618:	7127      	strb	r7, [r4, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    f61a:	47d0      	blx	sl
    f61c:	0006      	movs	r6, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    f61e:	4b4b      	ldr	r3, [pc, #300]	; (f74c <spi_init+0x1d8>)
    f620:	494b      	ldr	r1, [pc, #300]	; (f750 <spi_init+0x1dc>)
    f622:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f624:	4b4b      	ldr	r3, [pc, #300]	; (f754 <spi_init+0x1e0>)
    f626:	00b6      	lsls	r6, r6, #2
    f628:	50f4      	str	r4, [r6, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f62a:	6823      	ldr	r3, [r4, #0]
    f62c:	ae01      	add	r6, sp, #4
    f62e:	4699      	mov	r9, r3
    f630:	2380      	movs	r3, #128	; 0x80
    f632:	7033      	strb	r3, [r6, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f634:	3b7f      	subs	r3, #127	; 0x7f
    f636:	70b3      	strb	r3, [r6, #2]
	if(config->mode == SPI_MODE_SLAVE) {
    f638:	782b      	ldrb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f63a:	7077      	strb	r7, [r6, #1]
	config->powersave    = false;
    f63c:	70f7      	strb	r7, [r6, #3]
    f63e:	2b00      	cmp	r3, #0
    f640:	d058      	beq.n	f6f4 <spi_init+0x180>
	uint32_t pad_pinmuxes[] = {
    f642:	2700      	movs	r7, #0
    f644:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			config->pinmux_pad0, config->pinmux_pad1,
    f646:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    f648:	9303      	str	r3, [sp, #12]
    f64a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    f64c:	9002      	str	r0, [sp, #8]
    f64e:	9304      	str	r3, [sp, #16]
    f650:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f652:	b2f9      	uxtb	r1, r7
    f654:	9305      	str	r3, [sp, #20]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f656:	4b40      	ldr	r3, [pc, #256]	; (f758 <spi_init+0x1e4>)
    f658:	469b      	mov	fp, r3
		if (current_pinmux == PINMUX_DEFAULT) {
    f65a:	2800      	cmp	r0, #0
    f65c:	d011      	beq.n	f682 <spi_init+0x10e>
		if (current_pinmux != PINMUX_UNUSED) {
    f65e:	1c43      	adds	r3, r0, #1
    f660:	d004      	beq.n	f66c <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    f662:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f664:	0c00      	lsrs	r0, r0, #16
    f666:	b2c0      	uxtb	r0, r0
    f668:	0031      	movs	r1, r6
    f66a:	47d8      	blx	fp
    f66c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    f66e:	2f04      	cmp	r7, #4
    f670:	d00b      	beq.n	f68a <spi_init+0x116>
    f672:	2108      	movs	r1, #8
    f674:	466a      	mov	r2, sp
    f676:	00bb      	lsls	r3, r7, #2
    f678:	1852      	adds	r2, r2, r1
    f67a:	58d0      	ldr	r0, [r2, r3]
    f67c:	b2f9      	uxtb	r1, r7
		if (current_pinmux == PINMUX_DEFAULT) {
    f67e:	2800      	cmp	r0, #0
    f680:	d1ed      	bne.n	f65e <spi_init+0xea>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    f682:	4648      	mov	r0, r9
    f684:	4b35      	ldr	r3, [pc, #212]	; (f75c <spi_init+0x1e8>)
    f686:	4798      	blx	r3
    f688:	e7e9      	b.n	f65e <spi_init+0xea>
	module->mode             = config->mode;
    f68a:	782b      	ldrb	r3, [r5, #0]
	uint16_t baud = 0;
    f68c:	466a      	mov	r2, sp
	module->mode             = config->mode;
    f68e:	7163      	strb	r3, [r4, #5]
	module->character_size   = config->character_size;
    f690:	7c2b      	ldrb	r3, [r5, #16]
    f692:	71a3      	strb	r3, [r4, #6]
	module->receiver_enabled = config->receiver_enable;
    f694:	7cab      	ldrb	r3, [r5, #18]
    f696:	71e3      	strb	r3, [r4, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    f698:	7d2b      	ldrb	r3, [r5, #20]
    f69a:	7223      	strb	r3, [r4, #8]
	uint16_t baud = 0;
    f69c:	2300      	movs	r3, #0
    f69e:	8053      	strh	r3, [r2, #2]
	if (config->mode == SPI_MODE_MASTER) {
    f6a0:	782b      	ldrb	r3, [r5, #0]
    f6a2:	2b01      	cmp	r3, #1
    f6a4:	d032      	beq.n	f70c <spi_init+0x198>
	ctrla |= config->transfer_mode;
    f6a6:	68aa      	ldr	r2, [r5, #8]
    f6a8:	686b      	ldr	r3, [r5, #4]
	ctrlb |= config->character_size;
    f6aa:	7c29      	ldrb	r1, [r5, #16]
	ctrla |= config->transfer_mode;
    f6ac:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    f6ae:	68ea      	ldr	r2, [r5, #12]
    f6b0:	4313      	orrs	r3, r2
	if (config->run_in_standby || system_is_debugger_present()) {
    f6b2:	7c6a      	ldrb	r2, [r5, #17]
    f6b4:	2a00      	cmp	r2, #0
    f6b6:	d01f      	beq.n	f6f8 <spi_init+0x184>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    f6b8:	2280      	movs	r2, #128	; 0x80
    f6ba:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    f6bc:	7caa      	ldrb	r2, [r5, #18]
    f6be:	2a00      	cmp	r2, #0
    f6c0:	d002      	beq.n	f6c8 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    f6c2:	2280      	movs	r2, #128	; 0x80
    f6c4:	0292      	lsls	r2, r2, #10
    f6c6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    f6c8:	7cea      	ldrb	r2, [r5, #19]
    f6ca:	2a00      	cmp	r2, #0
    f6cc:	d002      	beq.n	f6d4 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    f6ce:	2280      	movs	r2, #128	; 0x80
    f6d0:	0092      	lsls	r2, r2, #2
    f6d2:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    f6d4:	7d2a      	ldrb	r2, [r5, #20]
    f6d6:	2a00      	cmp	r2, #0
    f6d8:	d002      	beq.n	f6e0 <spi_init+0x16c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    f6da:	2280      	movs	r2, #128	; 0x80
    f6dc:	0192      	lsls	r2, r2, #6
    f6de:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    f6e0:	464a      	mov	r2, r9
    f6e2:	6812      	ldr	r2, [r2, #0]
	return STATUS_OK;
    f6e4:	2000      	movs	r0, #0
	spi_module->CTRLA.reg |= ctrla;
    f6e6:	4313      	orrs	r3, r2
    f6e8:	464a      	mov	r2, r9
    f6ea:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    f6ec:	6853      	ldr	r3, [r2, #4]
    f6ee:	430b      	orrs	r3, r1
    f6f0:	6053      	str	r3, [r2, #4]
    f6f2:	e74e      	b.n	f592 <spi_init+0x1e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    f6f4:	70b7      	strb	r7, [r6, #2]
    f6f6:	e7a4      	b.n	f642 <spi_init+0xce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    f6f8:	4a19      	ldr	r2, [pc, #100]	; (f760 <spi_init+0x1ec>)
    f6fa:	7892      	ldrb	r2, [r2, #2]
	if (config->run_in_standby || system_is_debugger_present()) {
    f6fc:	0792      	lsls	r2, r2, #30
    f6fe:	d5dd      	bpl.n	f6bc <spi_init+0x148>
    f700:	e7da      	b.n	f6b8 <spi_init+0x144>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    f702:	220c      	movs	r2, #12
    f704:	6833      	ldr	r3, [r6, #0]
    f706:	4313      	orrs	r3, r2
    f708:	6033      	str	r3, [r6, #0]
    f70a:	e76f      	b.n	f5ec <spi_init+0x78>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f70c:	6820      	ldr	r0, [r4, #0]
    f70e:	47d0      	blx	sl
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f710:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f712:	4b14      	ldr	r3, [pc, #80]	; (f764 <spi_init+0x1f0>)
    f714:	b2c0      	uxtb	r0, r0
    f716:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    f718:	466b      	mov	r3, sp
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f71a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    f71c:	1c9a      	adds	r2, r3, #2
    f71e:	69a8      	ldr	r0, [r5, #24]
    f720:	4b11      	ldr	r3, [pc, #68]	; (f768 <spi_init+0x1f4>)
    f722:	4798      	blx	r3
    f724:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    f726:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    f728:	2b00      	cmp	r3, #0
    f72a:	d000      	beq.n	f72e <spi_init+0x1ba>
    f72c:	e731      	b.n	f592 <spi_init+0x1e>
		spi_module->BAUD.reg = (uint8_t)baud;
    f72e:	466b      	mov	r3, sp
    f730:	464a      	mov	r2, r9
    f732:	789b      	ldrb	r3, [r3, #2]
    f734:	7313      	strb	r3, [r2, #12]
    f736:	e7b6      	b.n	f6a6 <spi_init+0x132>
    f738:	0000f3b9 	.word	0x0000f3b9
    f73c:	40000400 	.word	0x40000400
    f740:	00010169 	.word	0x00010169
    f744:	000100e1 	.word	0x000100e1
    f748:	0000f211 	.word	0x0000f211
    f74c:	0000f3ed 	.word	0x0000f3ed
    f750:	0000f9d5 	.word	0x0000f9d5
    f754:	20000cf8 	.word	0x20000cf8
    f758:	00010269 	.word	0x00010269
    f75c:	0000f259 	.word	0x0000f259
    f760:	41002000 	.word	0x41002000
    f764:	00010185 	.word	0x00010185
    f768:	0000f1e9 	.word	0x0000f1e9

0000f76c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    f76c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f76e:	46de      	mov	lr, fp
    f770:	464e      	mov	r6, r9
    f772:	4657      	mov	r7, sl
    f774:	4645      	mov	r5, r8
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    f776:	2438      	movs	r4, #56	; 0x38
{
    f778:	b5e0      	push	{r5, r6, r7, lr}
	if (module->status == STATUS_BUSY) {
    f77a:	5d06      	ldrb	r6, [r0, r4]
{
    f77c:	468b      	mov	fp, r1
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    f77e:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    f780:	2e05      	cmp	r6, #5
    f782:	d002      	beq.n	f78a <spi_read_buffer_wait+0x1e>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    f784:	3412      	adds	r4, #18
	if (length == 0) {
    f786:	2a00      	cmp	r2, #0
    f788:	d106      	bne.n	f798 <spi_read_buffer_wait+0x2c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    f78a:	0020      	movs	r0, r4
    f78c:	bc3c      	pop	{r2, r3, r4, r5}
    f78e:	4690      	mov	r8, r2
    f790:	4699      	mov	r9, r3
    f792:	46a2      	mov	sl, r4
    f794:	46ab      	mov	fp, r5
    f796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    f798:	79c4      	ldrb	r4, [r0, #7]
    f79a:	2c00      	cmp	r4, #0
    f79c:	d101      	bne.n	f7a2 <spi_read_buffer_wait+0x36>
		return STATUS_ERR_DENIED;
    f79e:	341c      	adds	r4, #28
    f7a0:	e7f3      	b.n	f78a <spi_read_buffer_wait+0x1e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f7a2:	05db      	lsls	r3, r3, #23
    f7a4:	0ddb      	lsrs	r3, r3, #23
    f7a6:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
    f7a8:	2304      	movs	r3, #4
    f7aa:	4698      	mov	r8, r3
	while (length--) {
    f7ac:	4b22      	ldr	r3, [pc, #136]	; (f838 <spi_read_buffer_wait+0xcc>)
    f7ae:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    f7b0:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(module)) {
    f7b2:	2404      	movs	r4, #4
	while (length--) {
    f7b4:	4699      	mov	r9, r3
    f7b6:	3a01      	subs	r2, #1
    f7b8:	b295      	uxth	r5, r2
		if (module->mode == SPI_MODE_MASTER) {
    f7ba:	7943      	ldrb	r3, [r0, #5]
    f7bc:	6802      	ldr	r2, [r0, #0]
    f7be:	2b01      	cmp	r3, #1
    f7c0:	d01e      	beq.n	f800 <spi_read_buffer_wait+0x94>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f7c2:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
    f7c4:	421c      	tst	r4, r3
    f7c6:	d0fc      	beq.n	f7c2 <spi_read_buffer_wait+0x56>
	if (!spi_is_ready_to_read(module)) {
    f7c8:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f7ca:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    f7cc:	4219      	tst	r1, r3
    f7ce:	d021      	beq.n	f814 <spi_read_buffer_wait+0xa8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f7d0:	8b53      	ldrh	r3, [r2, #26]
    f7d2:	421c      	tst	r4, r3
    f7d4:	d126      	bne.n	f824 <spi_read_buffer_wait+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f7d6:	7983      	ldrb	r3, [r0, #6]
    f7d8:	2b01      	cmp	r3, #1
    f7da:	d027      	beq.n	f82c <spi_read_buffer_wait+0xc0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f7dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f7de:	b2db      	uxtb	r3, r3
    f7e0:	469a      	mov	sl, r3
		rx_data[rx_pos++] = received_data;
    f7e2:	4652      	mov	r2, sl
    f7e4:	4659      	mov	r1, fp
    f7e6:	558a      	strb	r2, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f7e8:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
    f7ea:	1c73      	adds	r3, r6, #1
    f7ec:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f7ee:	2a01      	cmp	r2, #1
    f7f0:	d012      	beq.n	f818 <spi_read_buffer_wait+0xac>
		rx_data[rx_pos++] = received_data;
    f7f2:	001e      	movs	r6, r3
	while (length--) {
    f7f4:	3d01      	subs	r5, #1
    f7f6:	b2ad      	uxth	r5, r5
    f7f8:	454d      	cmp	r5, r9
    f7fa:	d1de      	bne.n	f7ba <spi_read_buffer_wait+0x4e>
	return STATUS_OK;
    f7fc:	2400      	movs	r4, #0
    f7fe:	e7c4      	b.n	f78a <spi_read_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f800:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_write(module)) {
    f802:	421f      	tst	r7, r3
    f804:	d0fc      	beq.n	f800 <spi_read_buffer_wait+0x94>
    f806:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    f808:	421f      	tst	r7, r3
    f80a:	d0da      	beq.n	f7c2 <spi_read_buffer_wait+0x56>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f80c:	4663      	mov	r3, ip
    f80e:	6293      	str	r3, [r2, #40]	; 0x28
    f810:	6802      	ldr	r2, [r0, #0]
    f812:	e7d6      	b.n	f7c2 <spi_read_buffer_wait+0x56>
		return STATUS_ERR_IO;
    f814:	2410      	movs	r4, #16
    f816:	e7b8      	b.n	f78a <spi_read_buffer_wait+0x1e>
			rx_data[rx_pos++] = (received_data >> 8);
    f818:	4652      	mov	r2, sl
    f81a:	3602      	adds	r6, #2
    f81c:	0a12      	lsrs	r2, r2, #8
    f81e:	b2b6      	uxth	r6, r6
    f820:	54ca      	strb	r2, [r1, r3]
    f822:	e7e7      	b.n	f7f4 <spi_read_buffer_wait+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f824:	8354      	strh	r4, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f826:	6a93      	ldr	r3, [r2, #40]	; 0x28
		retval = STATUS_ERR_OVERFLOW;
    f828:	241e      	movs	r4, #30
    f82a:	e7ae      	b.n	f78a <spi_read_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f82c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f82e:	05db      	lsls	r3, r3, #23
    f830:	0ddb      	lsrs	r3, r3, #23
    f832:	469a      	mov	sl, r3
    f834:	e7d5      	b.n	f7e2 <spi_read_buffer_wait+0x76>
    f836:	46c0      	nop			; (mov r8, r8)
    f838:	0000ffff 	.word	0x0000ffff

0000f83c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    f83c:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    f83e:	7943      	ldrb	r3, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    f840:	2415      	movs	r4, #21
	if (module->mode != SPI_MODE_MASTER) {
    f842:	2b01      	cmp	r3, #1
    f844:	d001      	beq.n	f84a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    f846:	0020      	movs	r0, r4
    f848:	bd70      	pop	{r4, r5, r6, pc}
	if(!(module->master_slave_select_enable))
    f84a:	7a04      	ldrb	r4, [r0, #8]
    f84c:	2c00      	cmp	r4, #0
    f84e:	d13a      	bne.n	f8c6 <spi_select_slave+0x8a>
		if (select) {
    f850:	2a00      	cmp	r2, #0
    f852:	d03a      	beq.n	f8ca <spi_select_slave+0x8e>
			if (slave->address_enabled) {
    f854:	784a      	ldrb	r2, [r1, #1]
    f856:	2a00      	cmp	r2, #0
    f858:	d046      	beq.n	f8e8 <spi_select_slave+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f85a:	6802      	ldr	r2, [r0, #0]
    f85c:	7e12      	ldrb	r2, [r2, #24]
				if (!spi_is_ready_to_write(module)) {
    f85e:	401a      	ands	r2, r3
    f860:	d10d      	bne.n	f87e <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
    f862:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    f864:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    f866:	09c4      	lsrs	r4, r0, #7
    f868:	d13c      	bne.n	f8e4 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f86a:	321f      	adds	r2, #31
    f86c:	4002      	ands	r2, r0
    f86e:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    f870:	01ca      	lsls	r2, r1, #7
    f872:	4926      	ldr	r1, [pc, #152]	; (f90c <spi_select_slave+0xd0>)
					return STATUS_BUSY;
    f874:	3405      	adds	r4, #5
    f876:	468c      	mov	ip, r1
    f878:	4462      	add	r2, ip
    f87a:	6193      	str	r3, [r2, #24]
    f87c:	e7e3      	b.n	f846 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    f87e:	780d      	ldrb	r5, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    f880:	096a      	lsrs	r2, r5, #5
	if (port_index < PORT_INST_NUM) {
    f882:	09ee      	lsrs	r6, r5, #7
    f884:	d13f      	bne.n	f906 <spi_select_slave+0xca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f886:	241f      	movs	r4, #31
    f888:	402c      	ands	r4, r5
    f88a:	001d      	movs	r5, r3
    f88c:	40a5      	lsls	r5, r4
    f88e:	002c      	movs	r4, r5
		port_base->OUTCLR.reg = pin_mask;
    f890:	4d1e      	ldr	r5, [pc, #120]	; (f90c <spi_select_slave+0xd0>)
    f892:	01d2      	lsls	r2, r2, #7
    f894:	46ac      	mov	ip, r5
    f896:	4462      	add	r2, ip
    f898:	6154      	str	r4, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f89a:	6802      	ldr	r2, [r0, #0]
				spi_write(module, slave->address);
    f89c:	788c      	ldrb	r4, [r1, #2]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f89e:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    f8a0:	420b      	tst	r3, r1
    f8a2:	d000      	beq.n	f8a6 <spi_select_slave+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f8a4:	6294      	str	r4, [r2, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    f8a6:	79c3      	ldrb	r3, [r0, #7]
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	d10c      	bne.n	f8c6 <spi_select_slave+0x8a>
					while (!spi_is_ready_to_read(module)) {
    f8ac:	2104      	movs	r1, #4
    f8ae:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f8b0:	7e13      	ldrb	r3, [r2, #24]
    f8b2:	4219      	tst	r1, r3
    f8b4:	d0fc      	beq.n	f8b0 <spi_select_slave+0x74>
    f8b6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    f8b8:	4219      	tst	r1, r3
    f8ba:	d004      	beq.n	f8c6 <spi_select_slave+0x8a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f8bc:	8b53      	ldrh	r3, [r2, #26]
    f8be:	075b      	lsls	r3, r3, #29
    f8c0:	d500      	bpl.n	f8c4 <spi_select_slave+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f8c2:	8351      	strh	r1, [r2, #26]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f8c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    f8c6:	2400      	movs	r4, #0
    f8c8:	e7bd      	b.n	f846 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    f8ca:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    f8cc:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    f8ce:	09c4      	lsrs	r4, r0, #7
    f8d0:	d108      	bne.n	f8e4 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f8d2:	221f      	movs	r2, #31
    f8d4:	4002      	ands	r2, r0
    f8d6:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    f8d8:	01ca      	lsls	r2, r1, #7
    f8da:	490c      	ldr	r1, [pc, #48]	; (f90c <spi_select_slave+0xd0>)
    f8dc:	468c      	mov	ip, r1
    f8de:	4462      	add	r2, ip
    f8e0:	6193      	str	r3, [r2, #24]
    f8e2:	e7b0      	b.n	f846 <spi_select_slave+0xa>
    f8e4:	6192      	str	r2, [r2, #24]
    f8e6:	deff      	udf	#255	; 0xff
				port_pin_set_output_level(slave->ss_pin, false);
    f8e8:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    f8ea:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    f8ec:	09c4      	lsrs	r4, r0, #7
    f8ee:	d108      	bne.n	f902 <spi_select_slave+0xc6>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f8f0:	221f      	movs	r2, #31
    f8f2:	4002      	ands	r2, r0
    f8f4:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    f8f6:	01ca      	lsls	r2, r1, #7
    f8f8:	4904      	ldr	r1, [pc, #16]	; (f90c <spi_select_slave+0xd0>)
    f8fa:	468c      	mov	ip, r1
    f8fc:	4462      	add	r2, ip
    f8fe:	6153      	str	r3, [r2, #20]
    f900:	e7a1      	b.n	f846 <spi_select_slave+0xa>
    f902:	6152      	str	r2, [r2, #20]
    f904:	deff      	udf	#255	; 0xff
    f906:	6164      	str	r4, [r4, #20]
    f908:	deff      	udf	#255	; 0xff
    f90a:	46c0      	nop			; (mov r8, r8)
    f90c:	41004400 	.word	0x41004400

0000f910 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    f910:	b5f0      	push	{r4, r5, r6, r7, lr}
    f912:	46de      	mov	lr, fp
    f914:	4657      	mov	r7, sl
    f916:	464e      	mov	r6, r9
    f918:	4645      	mov	r5, r8
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    f91a:	2338      	movs	r3, #56	; 0x38
{
    f91c:	b5e0      	push	{r5, r6, r7, lr}
	if (module->status == STATUS_BUSY) {
    f91e:	5cc4      	ldrb	r4, [r0, r3]
{
    f920:	b083      	sub	sp, #12
    f922:	468b      	mov	fp, r1
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    f924:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    f926:	2c05      	cmp	r4, #5
    f928:	d002      	beq.n	f930 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    f92a:	3312      	adds	r3, #18
	if (length == 0) {
    f92c:	2a00      	cmp	r2, #0
    f92e:	d107      	bne.n	f940 <spi_write_buffer_wait+0x30>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    f930:	0018      	movs	r0, r3
    f932:	b003      	add	sp, #12
    f934:	bc3c      	pop	{r2, r3, r4, r5}
    f936:	4690      	mov	r8, r2
    f938:	4699      	mov	r9, r3
    f93a:	46a2      	mov	sl, r4
    f93c:	46ab      	mov	fp, r5
    f93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (!spi_is_ready_to_read(module)) {
    f940:	2304      	movs	r3, #4
    f942:	4698      	mov	r8, r3
	while (length--) {
    f944:	4b22      	ldr	r3, [pc, #136]	; (f9d0 <spi_write_buffer_wait+0xc0>)
    f946:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    f948:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    f94a:	2604      	movs	r6, #4
	while (length--) {
    f94c:	469c      	mov	ip, r3
    f94e:	3a01      	subs	r2, #1
    f950:	b295      	uxth	r5, r2
    f952:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f954:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    f956:	421c      	tst	r4, r3
    f958:	d0fc      	beq.n	f954 <spi_write_buffer_wait+0x44>
		uint16_t data_to_send = tx_data[tx_pos++];
    f95a:	1c7b      	adds	r3, r7, #1
    f95c:	b29b      	uxth	r3, r3
    f95e:	469a      	mov	sl, r3
    f960:	465b      	mov	r3, fp
    f962:	5ddb      	ldrb	r3, [r3, r7]
    f964:	9301      	str	r3, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f966:	7981      	ldrb	r1, [r0, #6]
    f968:	2901      	cmp	r1, #1
    f96a:	d027      	beq.n	f9bc <spi_write_buffer_wait+0xac>
		uint16_t data_to_send = tx_data[tx_pos++];
    f96c:	466b      	mov	r3, sp
    f96e:	4657      	mov	r7, sl
    f970:	889b      	ldrh	r3, [r3, #4]
    f972:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    f974:	420c      	tst	r4, r1
    f976:	d002      	beq.n	f97e <spi_write_buffer_wait+0x6e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f978:	05db      	lsls	r3, r3, #23
    f97a:	0ddb      	lsrs	r3, r3, #23
    f97c:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    f97e:	79c3      	ldrb	r3, [r0, #7]
    f980:	2b00      	cmp	r3, #0
    f982:	d00c      	beq.n	f99e <spi_write_buffer_wait+0x8e>
    f984:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f986:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    f988:	421e      	tst	r6, r3
    f98a:	d0fc      	beq.n	f986 <spi_write_buffer_wait+0x76>
	if (!spi_is_ready_to_read(module)) {
    f98c:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f98e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    f990:	4219      	tst	r1, r3
    f992:	d004      	beq.n	f99e <spi_write_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f994:	8b53      	ldrh	r3, [r2, #26]
    f996:	421e      	tst	r6, r3
    f998:	d000      	beq.n	f99c <spi_write_buffer_wait+0x8c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f99a:	8356      	strh	r6, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f99c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    f99e:	3d01      	subs	r5, #1
    f9a0:	b2ad      	uxth	r5, r5
    f9a2:	4565      	cmp	r5, ip
    f9a4:	d1d5      	bne.n	f952 <spi_write_buffer_wait+0x42>
	if (module->mode == SPI_MODE_MASTER) {
    f9a6:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    f9a8:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    f9aa:	2a01      	cmp	r2, #1
    f9ac:	d1c0      	bne.n	f930 <spi_write_buffer_wait+0x20>
    f9ae:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    f9b0:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    f9b2:	7e0b      	ldrb	r3, [r1, #24]
    f9b4:	421a      	tst	r2, r3
    f9b6:	d0fc      	beq.n	f9b2 <spi_write_buffer_wait+0xa2>
	return STATUS_OK;
    f9b8:	2300      	movs	r3, #0
    f9ba:	e7b9      	b.n	f930 <spi_write_buffer_wait+0x20>
			data_to_send |= (tx_data[tx_pos++] << 8);
    f9bc:	465b      	mov	r3, fp
    f9be:	4651      	mov	r1, sl
    f9c0:	5c59      	ldrb	r1, [r3, r1]
    f9c2:	9b01      	ldr	r3, [sp, #4]
    f9c4:	3702      	adds	r7, #2
    f9c6:	0209      	lsls	r1, r1, #8
    f9c8:	b2bf      	uxth	r7, r7
    f9ca:	430b      	orrs	r3, r1
    f9cc:	e7d1      	b.n	f972 <spi_write_buffer_wait+0x62>
    f9ce:	46c0      	nop			; (mov r8, r8)
    f9d0:	0000ffff 	.word	0x0000ffff

0000f9d4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    f9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    f9d6:	4b6e      	ldr	r3, [pc, #440]	; (fb90 <_spi_interrupt_handler+0x1bc>)
    f9d8:	0080      	lsls	r0, r0, #2
    f9da:	58c4      	ldr	r4, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    f9dc:	2236      	movs	r2, #54	; 0x36
			module->enabled_callback & module->registered_callback;
    f9de:	2337      	movs	r3, #55	; 0x37
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f9e0:	6826      	ldr	r6, [r4, #0]
	uint8_t callback_mask =
    f9e2:	5ce3      	ldrb	r3, [r4, r3]
    f9e4:	5ca7      	ldrb	r7, [r4, r2]
    f9e6:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    f9e8:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    f9ea:	7db5      	ldrb	r5, [r6, #22]
    f9ec:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    f9ee:	07eb      	lsls	r3, r5, #31
    f9f0:	d502      	bpl.n	f9f8 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    f9f2:	7963      	ldrb	r3, [r4, #5]
    f9f4:	2b01      	cmp	r3, #1
    f9f6:	d067      	beq.n	fac8 <_spi_interrupt_handler+0xf4>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    f9f8:	2304      	movs	r3, #4
    f9fa:	422b      	tst	r3, r5
    f9fc:	d014      	beq.n	fa28 <_spi_interrupt_handler+0x54>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f9fe:	8b72      	ldrh	r2, [r6, #26]
    fa00:	4213      	tst	r3, r2
    fa02:	d01b      	beq.n	fa3c <_spi_interrupt_handler+0x68>
			if (module->dir != SPI_DIRECTION_WRITE) {
    fa04:	7a63      	ldrb	r3, [r4, #9]
    fa06:	2b01      	cmp	r3, #1
    fa08:	d00b      	beq.n	fa22 <_spi_interrupt_handler+0x4e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    fa0a:	2338      	movs	r3, #56	; 0x38
    fa0c:	221e      	movs	r2, #30
    fa0e:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    fa10:	3b35      	subs	r3, #53	; 0x35
    fa12:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    fa14:	3302      	adds	r3, #2
    fa16:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    fa18:	073b      	lsls	r3, r7, #28
    fa1a:	d502      	bpl.n	fa22 <_spi_interrupt_handler+0x4e>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    fa1c:	0020      	movs	r0, r4
    fa1e:	69a3      	ldr	r3, [r4, #24]
    fa20:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    fa22:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fa24:	2304      	movs	r3, #4
    fa26:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    fa28:	2302      	movs	r3, #2
    fa2a:	422b      	tst	r3, r5
    fa2c:	d002      	beq.n	fa34 <_spi_interrupt_handler+0x60>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    fa2e:	7962      	ldrb	r2, [r4, #5]
    fa30:	2a01      	cmp	r2, #1
    fa32:	d037      	beq.n	faa4 <_spi_interrupt_handler+0xd0>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    fa34:	b26d      	sxtb	r5, r5
    fa36:	2d00      	cmp	r5, #0
    fa38:	db2b      	blt.n	fa92 <_spi_interrupt_handler+0xbe>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    fa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (module->dir == SPI_DIRECTION_WRITE) {
    fa3c:	7a63      	ldrb	r3, [r4, #9]
    fa3e:	b2db      	uxtb	r3, r3
    fa40:	2b01      	cmp	r3, #1
    fa42:	d078      	beq.n	fb36 <_spi_interrupt_handler+0x162>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fa44:	6823      	ldr	r3, [r4, #0]
	*(module->rx_buffer_ptr) = received_data;
    fa46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    fa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fa4a:	05db      	lsls	r3, r3, #23
    fa4c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    fa4e:	b2da      	uxtb	r2, r3
    fa50:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    fa52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    fa54:	1c51      	adds	r1, r2, #1
    fa56:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fa58:	79a1      	ldrb	r1, [r4, #6]
    fa5a:	2901      	cmp	r1, #1
    fa5c:	d100      	bne.n	fa60 <_spi_interrupt_handler+0x8c>
    fa5e:	e082      	b.n	fb66 <_spi_interrupt_handler+0x192>
	module->remaining_rx_buffer_length--;
    fa60:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fa62:	3b01      	subs	r3, #1
    fa64:	b29b      	uxth	r3, r3
    fa66:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    fa68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fa6a:	b29b      	uxth	r3, r3
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d1db      	bne.n	fa28 <_spi_interrupt_handler+0x54>
					module->status = STATUS_OK;
    fa70:	2238      	movs	r2, #56	; 0x38
    fa72:	54a3      	strb	r3, [r4, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    fa74:	3304      	adds	r3, #4
    fa76:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    fa78:	7a62      	ldrb	r2, [r4, #9]
    fa7a:	2a02      	cmp	r2, #2
    fa7c:	d100      	bne.n	fa80 <_spi_interrupt_handler+0xac>
    fa7e:	e07a      	b.n	fb76 <_spi_interrupt_handler+0x1a2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    fa80:	7a63      	ldrb	r3, [r4, #9]
    fa82:	2b00      	cmp	r3, #0
    fa84:	d1d0      	bne.n	fa28 <_spi_interrupt_handler+0x54>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    fa86:	07bb      	lsls	r3, r7, #30
    fa88:	d5ce      	bpl.n	fa28 <_spi_interrupt_handler+0x54>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    fa8a:	0020      	movs	r0, r4
    fa8c:	6923      	ldr	r3, [r4, #16]
    fa8e:	4798      	blx	r3
    fa90:	e7ca      	b.n	fa28 <_spi_interrupt_handler+0x54>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    fa92:	2380      	movs	r3, #128	; 0x80
    fa94:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    fa96:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    fa98:	067b      	lsls	r3, r7, #25
    fa9a:	d5ce      	bpl.n	fa3a <_spi_interrupt_handler+0x66>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    fa9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa9e:	0020      	movs	r0, r4
    faa0:	4798      	blx	r3
}
    faa2:	e7ca      	b.n	fa3a <_spi_interrupt_handler+0x66>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    faa4:	7a62      	ldrb	r2, [r4, #9]
    faa6:	b2d2      	uxtb	r2, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    faa8:	2a01      	cmp	r2, #1
    faaa:	d1c3      	bne.n	fa34 <_spi_interrupt_handler+0x60>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    faac:	79e1      	ldrb	r1, [r4, #7]
    faae:	2900      	cmp	r1, #0
    fab0:	d1c0      	bne.n	fa34 <_spi_interrupt_handler+0x60>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    fab2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    fab4:	3301      	adds	r3, #1
    fab6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    fab8:	3335      	adds	r3, #53	; 0x35
    faba:	54e1      	strb	r1, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    fabc:	423a      	tst	r2, r7
    fabe:	d0b9      	beq.n	fa34 <_spi_interrupt_handler+0x60>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    fac0:	0020      	movs	r0, r4
    fac2:	68e3      	ldr	r3, [r4, #12]
    fac4:	4798      	blx	r3
    fac6:	e7b5      	b.n	fa34 <_spi_interrupt_handler+0x60>
			(module->dir == SPI_DIRECTION_READ)) {
    fac8:	7a62      	ldrb	r2, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    faca:	2a00      	cmp	r2, #0
    facc:	d10d      	bne.n	faea <_spi_interrupt_handler+0x116>
	spi_hw->DATA.reg = dummy_write;
    face:	4a31      	ldr	r2, [pc, #196]	; (fb94 <_spi_interrupt_handler+0x1c0>)
    fad0:	8812      	ldrh	r2, [r2, #0]
    fad2:	62b2      	str	r2, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    fad4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    fad6:	3a01      	subs	r2, #1
    fad8:	b292      	uxth	r2, r2
    fada:	8662      	strh	r2, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    fadc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    fade:	2a00      	cmp	r2, #0
    fae0:	d047      	beq.n	fb72 <_spi_interrupt_handler+0x19e>
		if (0
    fae2:	7963      	ldrb	r3, [r4, #5]
    fae4:	2b01      	cmp	r3, #1
    fae6:	d000      	beq.n	faea <_spi_interrupt_handler+0x116>
    fae8:	e786      	b.n	f9f8 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
    faea:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    faec:	2b00      	cmp	r3, #0
    faee:	d100      	bne.n	faf2 <_spi_interrupt_handler+0x11e>
    faf0:	e782      	b.n	f9f8 <_spi_interrupt_handler+0x24>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    faf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    faf4:	6821      	ldr	r1, [r4, #0]
	(module->tx_buffer_ptr)++;
    faf6:	1c50      	adds	r0, r2, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    faf8:	7813      	ldrb	r3, [r2, #0]
	(module->tx_buffer_ptr)++;
    fafa:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fafc:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    fafe:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fb00:	2801      	cmp	r0, #1
    fb02:	d03f      	beq.n	fb84 <_spi_interrupt_handler+0x1b0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    fb04:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    fb06:	05db      	lsls	r3, r3, #23
    fb08:	0ddb      	lsrs	r3, r3, #23
    fb0a:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    fb0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    fb0e:	3b01      	subs	r3, #1
    fb10:	b29b      	uxth	r3, r3
    fb12:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    fb14:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    fb16:	2b00      	cmp	r3, #0
    fb18:	d000      	beq.n	fb1c <_spi_interrupt_handler+0x148>
    fb1a:	e76d      	b.n	f9f8 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    fb1c:	3301      	adds	r3, #1
    fb1e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    fb20:	7a63      	ldrb	r3, [r4, #9]
    fb22:	2b01      	cmp	r3, #1
    fb24:	d000      	beq.n	fb28 <_spi_interrupt_handler+0x154>
    fb26:	e767      	b.n	f9f8 <_spi_interrupt_handler+0x24>
    fb28:	79e3      	ldrb	r3, [r4, #7]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d000      	beq.n	fb30 <_spi_interrupt_handler+0x15c>
    fb2e:	e763      	b.n	f9f8 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    fb30:	3302      	adds	r3, #2
    fb32:	75b3      	strb	r3, [r6, #22]
    fb34:	e760      	b.n	f9f8 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fb36:	6822      	ldr	r2, [r4, #0]
	flush = spi_hw->DATA.reg;
    fb38:	6a92      	ldr	r2, [r2, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    fb3a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    fb3c:	3a01      	subs	r2, #1
    fb3e:	b292      	uxth	r2, r2
    fb40:	8662      	strh	r2, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    fb42:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    fb44:	b292      	uxth	r2, r2
    fb46:	2a00      	cmp	r2, #0
    fb48:	d000      	beq.n	fb4c <_spi_interrupt_handler+0x178>
    fb4a:	e76d      	b.n	fa28 <_spi_interrupt_handler+0x54>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    fb4c:	2104      	movs	r1, #4
    fb4e:	7531      	strb	r1, [r6, #20]
					module->status = STATUS_OK;
    fb50:	2138      	movs	r1, #56	; 0x38
    fb52:	5462      	strb	r2, [r4, r1]
					module->dir = SPI_DIRECTION_IDLE;
    fb54:	3203      	adds	r2, #3
    fb56:	7262      	strb	r2, [r4, #9]
					if (callback_mask &
    fb58:	423b      	tst	r3, r7
    fb5a:	d100      	bne.n	fb5e <_spi_interrupt_handler+0x18a>
    fb5c:	e764      	b.n	fa28 <_spi_interrupt_handler+0x54>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    fb5e:	0020      	movs	r0, r4
    fb60:	68e3      	ldr	r3, [r4, #12]
    fb62:	4798      	blx	r3
    fb64:	e760      	b.n	fa28 <_spi_interrupt_handler+0x54>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    fb66:	0a1b      	lsrs	r3, r3, #8
    fb68:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    fb6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fb6c:	3301      	adds	r3, #1
    fb6e:	62a3      	str	r3, [r4, #40]	; 0x28
    fb70:	e776      	b.n	fa60 <_spi_interrupt_handler+0x8c>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    fb72:	7533      	strb	r3, [r6, #20]
    fb74:	e7b5      	b.n	fae2 <_spi_interrupt_handler+0x10e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    fb76:	423b      	tst	r3, r7
    fb78:	d100      	bne.n	fb7c <_spi_interrupt_handler+0x1a8>
    fb7a:	e755      	b.n	fa28 <_spi_interrupt_handler+0x54>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    fb7c:	0020      	movs	r0, r4
    fb7e:	6963      	ldr	r3, [r4, #20]
    fb80:	4798      	blx	r3
    fb82:	e751      	b.n	fa28 <_spi_interrupt_handler+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    fb84:	7850      	ldrb	r0, [r2, #1]
		(module->tx_buffer_ptr)++;
    fb86:	3202      	adds	r2, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    fb88:	0200      	lsls	r0, r0, #8
    fb8a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    fb8c:	62e2      	str	r2, [r4, #44]	; 0x2c
    fb8e:	e7ba      	b.n	fb06 <_spi_interrupt_handler+0x132>
    fb90:	20000cf8 	.word	0x20000cf8
    fb94:	20000d10 	.word	0x20000d10

0000fb98 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    fb98:	2102      	movs	r1, #2
    fb9a:	480d      	ldr	r0, [pc, #52]	; (fbd0 <system_clock_source_enable.part.0+0x38>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    fb9c:	4a0d      	ldr	r2, [pc, #52]	; (fbd4 <system_clock_source_enable.part.0+0x3c>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    fb9e:	6803      	ldr	r3, [r0, #0]
    fba0:	430b      	orrs	r3, r1
    fba2:	6003      	str	r3, [r0, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    fba4:	8491      	strh	r1, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fba6:	310e      	adds	r1, #14
    fba8:	68d3      	ldr	r3, [r2, #12]
    fbaa:	4219      	tst	r1, r3
    fbac:	d0fc      	beq.n	fba8 <system_clock_source_enable.part.0+0x10>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    fbae:	6883      	ldr	r3, [r0, #8]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fbb0:	2110      	movs	r1, #16
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    fbb2:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    fbb4:	6843      	ldr	r3, [r0, #4]
    fbb6:	6293      	str	r3, [r2, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    fbb8:	2300      	movs	r3, #0
    fbba:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fbbc:	4a05      	ldr	r2, [pc, #20]	; (fbd4 <system_clock_source_enable.part.0+0x3c>)
    fbbe:	68d3      	ldr	r3, [r2, #12]
    fbc0:	4219      	tst	r1, r3
    fbc2:	d0fc      	beq.n	fbbe <system_clock_source_enable.part.0+0x26>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    fbc4:	6803      	ldr	r3, [r0, #0]
    fbc6:	b29b      	uxth	r3, r3
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    fbc8:	2000      	movs	r0, #0
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    fbca:	8493      	strh	r3, [r2, #36]	; 0x24
}
    fbcc:	4770      	bx	lr
    fbce:	46c0      	nop			; (mov r8, r8)
    fbd0:	200008ec 	.word	0x200008ec
    fbd4:	40000800 	.word	0x40000800

0000fbd8 <system_clock_source_get_hz>:
{
    fbd8:	b510      	push	{r4, lr}
	switch (clock_source) {
    fbda:	2808      	cmp	r0, #8
    fbdc:	d82b      	bhi.n	fc36 <system_clock_source_get_hz+0x5e>
    fbde:	4b1b      	ldr	r3, [pc, #108]	; (fc4c <system_clock_source_get_hz+0x74>)
    fbe0:	0080      	lsls	r0, r0, #2
    fbe2:	581b      	ldr	r3, [r3, r0]
    fbe4:	469f      	mov	pc, r3
		return 32768UL;
    fbe6:	2080      	movs	r0, #128	; 0x80
    fbe8:	0200      	lsls	r0, r0, #8
}
    fbea:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
    fbec:	4b18      	ldr	r3, [pc, #96]	; (fc50 <system_clock_source_get_hz+0x78>)
    fbee:	6958      	ldr	r0, [r3, #20]
    fbf0:	e7fb      	b.n	fbea <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    fbf2:	4b18      	ldr	r3, [pc, #96]	; (fc54 <system_clock_source_get_hz+0x7c>)
    fbf4:	4818      	ldr	r0, [pc, #96]	; (fc58 <system_clock_source_get_hz+0x80>)
    fbf6:	6a1b      	ldr	r3, [r3, #32]
    fbf8:	059b      	lsls	r3, r3, #22
    fbfa:	0f9b      	lsrs	r3, r3, #30
    fbfc:	40d8      	lsrs	r0, r3
    fbfe:	e7f4      	b.n	fbea <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    fc00:	4c13      	ldr	r4, [pc, #76]	; (fc50 <system_clock_source_get_hz+0x78>)
			return 0;
    fc02:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    fc04:	6823      	ldr	r3, [r4, #0]
    fc06:	079b      	lsls	r3, r3, #30
    fc08:	d5ef      	bpl.n	fbea <system_clock_source_get_hz+0x12>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fc0a:	2210      	movs	r2, #16
    fc0c:	4911      	ldr	r1, [pc, #68]	; (fc54 <system_clock_source_get_hz+0x7c>)
    fc0e:	68cb      	ldr	r3, [r1, #12]
    fc10:	421a      	tst	r2, r3
    fc12:	d0fc      	beq.n	fc0e <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    fc14:	6823      	ldr	r3, [r4, #0]
    fc16:	075b      	lsls	r3, r3, #29
    fc18:	d40f      	bmi.n	fc3a <system_clock_source_get_hz+0x62>
		return 48000000UL;
    fc1a:	4810      	ldr	r0, [pc, #64]	; (fc5c <system_clock_source_get_hz+0x84>)
    fc1c:	e7e5      	b.n	fbea <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
    fc1e:	4b0c      	ldr	r3, [pc, #48]	; (fc50 <system_clock_source_get_hz+0x78>)
    fc20:	6918      	ldr	r0, [r3, #16]
    fc22:	e7e2      	b.n	fbea <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    fc24:	2350      	movs	r3, #80	; 0x50
    fc26:	4a0b      	ldr	r2, [pc, #44]	; (fc54 <system_clock_source_get_hz+0x7c>)
			return 0;
    fc28:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    fc2a:	5cd3      	ldrb	r3, [r2, r3]
    fc2c:	075b      	lsls	r3, r3, #29
    fc2e:	d5dc      	bpl.n	fbea <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
    fc30:	4b07      	ldr	r3, [pc, #28]	; (fc50 <system_clock_source_get_hz+0x78>)
    fc32:	68d8      	ldr	r0, [r3, #12]
    fc34:	e7d9      	b.n	fbea <system_clock_source_get_hz+0x12>
		return 0;
    fc36:	2000      	movs	r0, #0
    fc38:	e7d7      	b.n	fbea <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    fc3a:	4b09      	ldr	r3, [pc, #36]	; (fc60 <system_clock_source_get_hz+0x88>)
    fc3c:	2000      	movs	r0, #0
    fc3e:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    fc40:	68a3      	ldr	r3, [r4, #8]
    fc42:	041b      	lsls	r3, r3, #16
    fc44:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    fc46:	4358      	muls	r0, r3
    fc48:	e7cf      	b.n	fbea <system_clock_source_get_hz+0x12>
    fc4a:	46c0      	nop			; (mov r8, r8)
    fc4c:	000163a0 	.word	0x000163a0
    fc50:	200008ec 	.word	0x200008ec
    fc54:	40000800 	.word	0x40000800
    fc58:	007a1200 	.word	0x007a1200
    fc5c:	02dc6c00 	.word	0x02dc6c00
    fc60:	00010185 	.word	0x00010185

0000fc64 <system_clock_source_xosc32k_set_config>:
{
    fc64:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc66:	46de      	mov	lr, fp
    fc68:	4657      	mov	r7, sl
    fc6a:	464e      	mov	r6, r9
    fc6c:	4645      	mov	r5, r8
    fc6e:	b5e0      	push	{r5, r6, r7, lr}
    fc70:	0001      	movs	r1, r0
	temp.bit.STARTUP = config->startup_time;
    fc72:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    fc74:	7800      	ldrb	r0, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    fc76:	7b4e      	ldrb	r6, [r1, #13]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    fc78:	4242      	negs	r2, r0
    fc7a:	4142      	adcs	r2, r0
    fc7c:	4691      	mov	r9, r2
	temp.bit.EN1K = config->enable_1khz_output;
    fc7e:	78ca      	ldrb	r2, [r1, #3]
	temp.bit.AAMPEN = config->auto_gain_control;
    fc80:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    fc82:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    fc84:	790a      	ldrb	r2, [r1, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    fc86:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    fc88:	7b8c      	ldrb	r4, [r1, #14]
	temp.bit.EN32K = config->enable_32khz_output;
    fc8a:	4690      	mov	r8, r2
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    fc8c:	4b1f      	ldr	r3, [pc, #124]	; (fd0c <system_clock_source_xosc32k_set_config+0xa8>)
	_system_clock_inst.xosc32k.frequency = config->frequency;
    fc8e:	688a      	ldr	r2, [r1, #8]
    fc90:	491f      	ldr	r1, [pc, #124]	; (fd10 <system_clock_source_xosc32k_set_config+0xac>)
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    fc92:	469b      	mov	fp, r3
    fc94:	8a9b      	ldrh	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    fc96:	614a      	str	r2, [r1, #20]
	SYSCTRL->XOSC32K = temp;
    fc98:	464a      	mov	r2, r9
    fc9a:	0092      	lsls	r2, r2, #2
    fc9c:	4691      	mov	r9, r2
    fc9e:	2204      	movs	r2, #4
    fca0:	4393      	bics	r3, r2
    fca2:	464a      	mov	r2, r9
    fca4:	2101      	movs	r1, #1
    fca6:	4313      	orrs	r3, r2
    fca8:	4642      	mov	r2, r8
    fcaa:	400a      	ands	r2, r1
    fcac:	00d2      	lsls	r2, r2, #3
    fcae:	4690      	mov	r8, r2
    fcb0:	2208      	movs	r2, #8
    fcb2:	4393      	bics	r3, r2
    fcb4:	4642      	mov	r2, r8
    fcb6:	4313      	orrs	r3, r2
    fcb8:	4662      	mov	r2, ip
    fcba:	400a      	ands	r2, r1
    fcbc:	0112      	lsls	r2, r2, #4
    fcbe:	4694      	mov	ip, r2
    fcc0:	2210      	movs	r2, #16
    fcc2:	4393      	bics	r3, r2
    fcc4:	4662      	mov	r2, ip
    fcc6:	4313      	orrs	r3, r2
    fcc8:	2220      	movs	r2, #32
    fcca:	4008      	ands	r0, r1
    fccc:	0140      	lsls	r0, r0, #5
    fcce:	4393      	bics	r3, r2
    fcd0:	4303      	orrs	r3, r0
    fcd2:	2040      	movs	r0, #64	; 0x40
    fcd4:	465a      	mov	r2, fp
    fcd6:	400f      	ands	r7, r1
    fcd8:	01bf      	lsls	r7, r7, #6
    fcda:	4383      	bics	r3, r0
    fcdc:	433b      	orrs	r3, r7
    fcde:	3040      	adds	r0, #64	; 0x40
    fce0:	400e      	ands	r6, r1
    fce2:	4383      	bics	r3, r0
    fce4:	3879      	subs	r0, #121	; 0x79
    fce6:	01f6      	lsls	r6, r6, #7
    fce8:	4005      	ands	r5, r0
    fcea:	480a      	ldr	r0, [pc, #40]	; (fd14 <system_clock_source_xosc32k_set_config+0xb0>)
    fcec:	4333      	orrs	r3, r6
    fcee:	022d      	lsls	r5, r5, #8
    fcf0:	4003      	ands	r3, r0
    fcf2:	4809      	ldr	r0, [pc, #36]	; (fd18 <system_clock_source_xosc32k_set_config+0xb4>)
    fcf4:	432b      	orrs	r3, r5
    fcf6:	4021      	ands	r1, r4
    fcf8:	0309      	lsls	r1, r1, #12
    fcfa:	4003      	ands	r3, r0
    fcfc:	430b      	orrs	r3, r1
    fcfe:	8293      	strh	r3, [r2, #20]
}
    fd00:	bc3c      	pop	{r2, r3, r4, r5}
    fd02:	4690      	mov	r8, r2
    fd04:	4699      	mov	r9, r3
    fd06:	46a2      	mov	sl, r4
    fd08:	46ab      	mov	fp, r5
    fd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd0c:	40000800 	.word	0x40000800
    fd10:	200008ec 	.word	0x200008ec
    fd14:	fffff8ff 	.word	0xfffff8ff
    fd18:	ffffefff 	.word	0xffffefff

0000fd1c <system_clock_source_dfll_set_config>:
{
    fd1c:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fd1e:	7a03      	ldrb	r3, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    fd20:	8942      	ldrh	r2, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fd22:	069b      	lsls	r3, r3, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    fd24:	0592      	lsls	r2, r2, #22
    fd26:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fd28:	0c1b      	lsrs	r3, r3, #16
    fd2a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    fd2c:	4a17      	ldr	r2, [pc, #92]	; (fd8c <system_clock_source_dfll_set_config+0x70>)
    fd2e:	6053      	str	r3, [r2, #4]
			(uint32_t)config->wakeup_lock     |
    fd30:	79c1      	ldrb	r1, [r0, #7]
    fd32:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->quick_lock      |
    fd34:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    fd36:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
    fd38:	8841      	ldrh	r1, [r0, #2]
    fd3a:	4321      	orrs	r1, r4
    fd3c:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    fd3e:	7841      	ldrb	r1, [r0, #1]
    fd40:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    fd42:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
    fd44:	6013      	str	r3, [r2, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    fd46:	7803      	ldrb	r3, [r0, #0]
    fd48:	2b04      	cmp	r3, #4
    fd4a:	d010      	beq.n	fd6e <system_clock_source_dfll_set_config+0x52>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    fd4c:	2b20      	cmp	r3, #32
    fd4e:	d10d      	bne.n	fd6c <system_clock_source_dfll_set_config+0x50>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fd50:	7b03      	ldrb	r3, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    fd52:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fd54:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    fd56:	430b      	orrs	r3, r1
    fd58:	89c1      	ldrh	r1, [r0, #14]
    fd5a:	480d      	ldr	r0, [pc, #52]	; (fd90 <system_clock_source_dfll_set_config+0x74>)
    fd5c:	0409      	lsls	r1, r1, #16
    fd5e:	4001      	ands	r1, r0
    fd60:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
    fd62:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    fd64:	6811      	ldr	r1, [r2, #0]
    fd66:	4b0b      	ldr	r3, [pc, #44]	; (fd94 <system_clock_source_dfll_set_config+0x78>)
    fd68:	430b      	orrs	r3, r1
    fd6a:	6013      	str	r3, [r2, #0]
}
    fd6c:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fd6e:	7b01      	ldrb	r1, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    fd70:	8a04      	ldrh	r4, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fd72:	0689      	lsls	r1, r1, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    fd74:	89c0      	ldrh	r0, [r0, #14]
    fd76:	4321      	orrs	r1, r4
    fd78:	4c05      	ldr	r4, [pc, #20]	; (fd90 <system_clock_source_dfll_set_config+0x74>)
    fd7a:	0400      	lsls	r0, r0, #16
    fd7c:	4020      	ands	r0, r4
    fd7e:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
    fd80:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    fd82:	6811      	ldr	r1, [r2, #0]
    fd84:	430b      	orrs	r3, r1
    fd86:	6013      	str	r3, [r2, #0]
    fd88:	e7f0      	b.n	fd6c <system_clock_source_dfll_set_config+0x50>
    fd8a:	46c0      	nop			; (mov r8, r8)
    fd8c:	200008ec 	.word	0x200008ec
    fd90:	03ff0000 	.word	0x03ff0000
    fd94:	00000424 	.word	0x00000424

0000fd98 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    fd98:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd9a:	4646      	mov	r6, r8
    fd9c:	46d6      	mov	lr, sl
    fd9e:	464f      	mov	r7, r9
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    fda0:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    fda2:	211e      	movs	r1, #30
{
    fda4:	b5c0      	push	{r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    fda6:	4b58      	ldr	r3, [pc, #352]	; (ff08 <system_clock_init+0x170>)
    fda8:	00d2      	lsls	r2, r2, #3
    fdaa:	609a      	str	r2, [r3, #8]
    fdac:	4a57      	ldr	r2, [pc, #348]	; (ff0c <system_clock_init+0x174>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fdae:	2400      	movs	r4, #0
    fdb0:	6853      	ldr	r3, [r2, #4]
{
    fdb2:	b08c      	sub	sp, #48	; 0x30
    fdb4:	438b      	bics	r3, r1
    fdb6:	391c      	subs	r1, #28
    fdb8:	430b      	orrs	r3, r1
    fdba:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    fdbc:	2303      	movs	r3, #3
    fdbe:	ad07      	add	r5, sp, #28
    fdc0:	4e53      	ldr	r6, [pc, #332]	; (ff10 <system_clock_init+0x178>)
    fdc2:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    fdc4:	b2e0      	uxtb	r0, r4
    fdc6:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fdc8:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    fdca:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fdcc:	2c25      	cmp	r4, #37	; 0x25
    fdce:	d1f9      	bne.n	fdc4 <system_clock_init+0x2c>
	config->frequency           = 32768UL;
    fdd0:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    fdd2:	a803      	add	r0, sp, #12
    fdd4:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    fdd6:	0212      	lsls	r2, r2, #8
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fdd8:	2102      	movs	r1, #2
    fdda:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
    fddc:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    fdde:	7003      	strb	r3, [r0, #0]
	config->enable_1khz_output  = false;
    fde0:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    fde2:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    fde4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fde6:	4b4b      	ldr	r3, [pc, #300]	; (ff14 <system_clock_init+0x17c>)
	config->enable_32khz_output = true;
    fde8:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fdea:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    fdec:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    fdee:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fdf0:	4798      	blx	r3
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    fdf2:	2102      	movs	r1, #2
    fdf4:	4a44      	ldr	r2, [pc, #272]	; (ff08 <system_clock_init+0x170>)
    fdf6:	8a93      	ldrh	r3, [r2, #20]
    fdf8:	430b      	orrs	r3, r1
    fdfa:	8293      	strh	r3, [r2, #20]
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    fdfc:	68d3      	ldr	r3, [r2, #12]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fdfe:	4219      	tst	r1, r3
    fe00:	d0fc      	beq.n	fdfc <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    fe02:	2180      	movs	r1, #128	; 0x80
    fe04:	8a93      	ldrh	r3, [r2, #20]
    fe06:	430b      	orrs	r3, r1
    fe08:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    fe0a:	2200      	movs	r2, #0
    fe0c:	2300      	movs	r3, #0
    fe0e:	806a      	strh	r2, [r5, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    fe10:	80aa      	strh	r2, [r5, #4]
	config->fine_value      = 0xff / 4; /* Midpoint */
    fe12:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    fe14:	71ab      	strb	r3, [r5, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    fe16:	71eb      	strb	r3, [r5, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    fe18:	816a      	strh	r2, [r5, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    fe1a:	706b      	strb	r3, [r5, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fe1c:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fe1e:	4b3e      	ldr	r3, [pc, #248]	; (ff18 <system_clock_init+0x180>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fe20:	702a      	strb	r2, [r5, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fe22:	681b      	ldr	r3, [r3, #0]
    fe24:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    fe26:	2b3f      	cmp	r3, #63	; 0x3f
    fe28:	d06b      	beq.n	ff02 <system_clock_init+0x16a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    fe2a:	722b      	strb	r3, [r5, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fe2c:	4b3b      	ldr	r3, [pc, #236]	; (ff1c <system_clock_init+0x184>)
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    fe2e:	0028      	movs	r0, r5
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fe30:	822b      	strh	r3, [r5, #16]
	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    fe32:	2307      	movs	r3, #7
    fe34:	732b      	strb	r3, [r5, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    fe36:	3338      	adds	r3, #56	; 0x38
    fe38:	81eb      	strh	r3, [r5, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    fe3a:	4b39      	ldr	r3, [pc, #228]	; (ff20 <system_clock_init+0x188>)
    fe3c:	4798      	blx	r3
	SYSCTRL->OSC8M = temp;
    fe3e:	2240      	movs	r2, #64	; 0x40
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    fe40:	4c31      	ldr	r4, [pc, #196]	; (ff08 <system_clock_init+0x170>)
    fe42:	6a23      	ldr	r3, [r4, #32]
	SYSCTRL->OSC8M = temp;
    fe44:	4393      	bics	r3, r2
    fe46:	3240      	adds	r2, #64	; 0x40
    fe48:	4313      	orrs	r3, r2
    fe4a:	4a36      	ldr	r2, [pc, #216]	; (ff24 <system_clock_init+0x18c>)
    fe4c:	4013      	ands	r3, r2
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    fe4e:	2202      	movs	r2, #2
	SYSCTRL->OSC8M = temp;
    fe50:	6223      	str	r3, [r4, #32]
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    fe52:	6a23      	ldr	r3, [r4, #32]
    fe54:	4313      	orrs	r3, r2
    fe56:	6223      	str	r3, [r4, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    fe58:	4b33      	ldr	r3, [pc, #204]	; (ff28 <system_clock_init+0x190>)
    fe5a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    fe5c:	2301      	movs	r3, #1
    fe5e:	4699      	mov	r9, r3
    fe60:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    fe62:	2300      	movs	r3, #0
    fe64:	4698      	mov	r8, r3
    fe66:	466b      	mov	r3, sp
    fe68:	4642      	mov	r2, r8
    fe6a:	705a      	strb	r2, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    fe6c:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    fe6e:	725a      	strb	r2, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    fe70:	2305      	movs	r3, #5
    fe72:	469a      	mov	sl, r3
    fe74:	466b      	mov	r3, sp
    fe76:	4652      	mov	r2, sl
    fe78:	4669      	mov	r1, sp
    fe7a:	2001      	movs	r0, #1
    fe7c:	4f2b      	ldr	r7, [pc, #172]	; (ff2c <system_clock_init+0x194>)
    fe7e:	701a      	strb	r2, [r3, #0]
    fe80:	47b8      	blx	r7
    fe82:	2001      	movs	r0, #1
    fe84:	4d2a      	ldr	r5, [pc, #168]	; (ff30 <system_clock_init+0x198>)
    fe86:	47a8      	blx	r5
	config->high_when_disabled = false;
    fe88:	466b      	mov	r3, sp
    fe8a:	4642      	mov	r2, r8
    fe8c:	705a      	strb	r2, [r3, #1]
	config->output_enable      = false;
    fe8e:	725a      	strb	r2, [r3, #9]
    fe90:	4652      	mov	r2, sl
    fe92:	701a      	strb	r2, [r3, #0]
    fe94:	2320      	movs	r3, #32
    fe96:	464a      	mov	r2, r9
    fe98:	9301      	str	r3, [sp, #4]
    fe9a:	466b      	mov	r3, sp
    fe9c:	4669      	mov	r1, sp
    fe9e:	2002      	movs	r0, #2
    fea0:	721a      	strb	r2, [r3, #8]
    fea2:	47b8      	blx	r7
    fea4:	2002      	movs	r0, #2
    fea6:	47a8      	blx	r5
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    fea8:	464a      	mov	r2, r9
    feaa:	466b      	mov	r3, sp
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    feac:	4669      	mov	r1, sp
    feae:	2000      	movs	r0, #0
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    feb0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    feb2:	47b0      	blx	r6
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    feb4:	2000      	movs	r0, #0
    feb6:	4b1f      	ldr	r3, [pc, #124]	; (ff34 <system_clock_init+0x19c>)
    feb8:	4798      	blx	r3
    feba:	4b1f      	ldr	r3, [pc, #124]	; (ff38 <system_clock_init+0x1a0>)
    febc:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    febe:	21d0      	movs	r1, #208	; 0xd0
    fec0:	68e3      	ldr	r3, [r4, #12]
    fec2:	400b      	ands	r3, r1


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    fec4:	2bd0      	cmp	r3, #208	; 0xd0
    fec6:	d1fb      	bne.n	fec0 <system_clock_init+0x128>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    fec8:	2180      	movs	r1, #128	; 0x80
    feca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    fecc:	4a1b      	ldr	r2, [pc, #108]	; (ff3c <system_clock_init+0x1a4>)
    fece:	430b      	orrs	r3, r1
    fed0:	84a3      	strh	r3, [r4, #36]	; 0x24
    fed2:	2300      	movs	r3, #0
    fed4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    fed6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    fed8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    feda:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    fedc:	2201      	movs	r2, #1
    fede:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    fee0:	466a      	mov	r2, sp
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    fee2:	4669      	mov	r1, sp
    fee4:	7053      	strb	r3, [r2, #1]
	config->run_in_standby     = false;
    fee6:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    fee8:	7253      	strb	r3, [r2, #9]
    feea:	2000      	movs	r0, #0
    feec:	3307      	adds	r3, #7
    feee:	7013      	strb	r3, [r2, #0]
    fef0:	47b8      	blx	r7
    fef2:	2000      	movs	r0, #0
    fef4:	47a8      	blx	r5
#endif
}
    fef6:	b00c      	add	sp, #48	; 0x30
    fef8:	bc1c      	pop	{r2, r3, r4}
    fefa:	4690      	mov	r8, r2
    fefc:	4699      	mov	r9, r3
    fefe:	46a2      	mov	sl, r4
    ff00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
    ff02:	3b20      	subs	r3, #32
    ff04:	e791      	b.n	fe2a <system_clock_init+0x92>
    ff06:	46c0      	nop			; (mov r8, r8)
    ff08:	40000800 	.word	0x40000800
    ff0c:	41004000 	.word	0x41004000
    ff10:	00010169 	.word	0x00010169
    ff14:	0000fc65 	.word	0x0000fc65
    ff18:	00806024 	.word	0x00806024
    ff1c:	000005dc 	.word	0x000005dc
    ff20:	0000fd1d 	.word	0x0000fd1d
    ff24:	fffffcff 	.word	0xfffffcff
    ff28:	0000ff41 	.word	0x0000ff41
    ff2c:	0000ff65 	.word	0x0000ff65
    ff30:	00010019 	.word	0x00010019
    ff34:	000100e1 	.word	0x000100e1
    ff38:	0000fb99 	.word	0x0000fb99
    ff3c:	40000400 	.word	0x40000400

0000ff40 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    ff40:	2108      	movs	r1, #8
    ff42:	4a06      	ldr	r2, [pc, #24]	; (ff5c <system_gclk_init+0x1c>)
    ff44:	6993      	ldr	r3, [r2, #24]
    ff46:	430b      	orrs	r3, r1
    ff48:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    ff4a:	2301      	movs	r3, #1
    ff4c:	4a04      	ldr	r2, [pc, #16]	; (ff60 <system_gclk_init+0x20>)
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    ff4e:	3907      	subs	r1, #7
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    ff50:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    ff52:	7813      	ldrb	r3, [r2, #0]
    ff54:	4219      	tst	r1, r3
    ff56:	d1fc      	bne.n	ff52 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    ff58:	4770      	bx	lr
    ff5a:	46c0      	nop			; (mov r8, r8)
    ff5c:	40000400 	.word	0x40000400
    ff60:	40000c00 	.word	0x40000c00

0000ff64 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    ff64:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    ff66:	780b      	ldrb	r3, [r1, #0]
{
    ff68:	0006      	movs	r6, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    ff6a:	021b      	lsls	r3, r3, #8
    ff6c:	4303      	orrs	r3, r0
    ff6e:	001d      	movs	r5, r3

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    ff70:	784b      	ldrb	r3, [r1, #1]
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    ff72:	0004      	movs	r4, r0
	if (config->high_when_disabled) {
    ff74:	2b00      	cmp	r3, #0
    ff76:	d002      	beq.n	ff7e <system_gclk_gen_set_config+0x1a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    ff78:	2380      	movs	r3, #128	; 0x80
    ff7a:	02db      	lsls	r3, r3, #11
    ff7c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    ff7e:	7a4b      	ldrb	r3, [r1, #9]
    ff80:	2b00      	cmp	r3, #0
    ff82:	d002      	beq.n	ff8a <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    ff84:	2380      	movs	r3, #128	; 0x80
    ff86:	031b      	lsls	r3, r3, #12
    ff88:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    ff8a:	6848      	ldr	r0, [r1, #4]
    ff8c:	2801      	cmp	r0, #1
    ff8e:	d90f      	bls.n	ffb0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    ff90:	1e43      	subs	r3, r0, #1
    ff92:	4218      	tst	r0, r3
    ff94:	d12f      	bne.n	fff6 <system_gclk_gen_set_config+0x92>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    ff96:	2802      	cmp	r0, #2
    ff98:	d033      	beq.n	10002 <system_gclk_gen_set_config+0x9e>
    ff9a:	2302      	movs	r3, #2
    ff9c:	2400      	movs	r4, #0
						mask <<= 1) {
				div2_count++;
    ff9e:	3401      	adds	r4, #1
						mask <<= 1) {
    ffa0:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    ffa2:	4298      	cmp	r0, r3
    ffa4:	d8fb      	bhi.n	ff9e <system_gclk_gen_set_config+0x3a>
    ffa6:	0224      	lsls	r4, r4, #8
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    ffa8:	2380      	movs	r3, #128	; 0x80
    ffaa:	035b      	lsls	r3, r3, #13
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    ffac:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    ffae:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    ffb0:	7a0b      	ldrb	r3, [r1, #8]
    ffb2:	2b00      	cmp	r3, #0
    ffb4:	d002      	beq.n	ffbc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    ffb6:	2380      	movs	r3, #128	; 0x80
    ffb8:	039b      	lsls	r3, r3, #14
    ffba:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffbc:	4a12      	ldr	r2, [pc, #72]	; (10008 <system_gclk_gen_set_config+0xa4>)
    ffbe:	7853      	ldrb	r3, [r2, #1]
    ffc0:	b25b      	sxtb	r3, r3
    ffc2:	2b00      	cmp	r3, #0
    ffc4:	dbfb      	blt.n	ffbe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    ffc6:	4b11      	ldr	r3, [pc, #68]	; (1000c <system_gclk_gen_set_config+0xa8>)
    ffc8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ffca:	4b11      	ldr	r3, [pc, #68]	; (10010 <system_gclk_gen_set_config+0xac>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffcc:	4a0e      	ldr	r2, [pc, #56]	; (10008 <system_gclk_gen_set_config+0xa4>)
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ffce:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffd0:	7853      	ldrb	r3, [r2, #1]
    ffd2:	b25b      	sxtb	r3, r3
    ffd4:	2b00      	cmp	r3, #0
    ffd6:	dbfb      	blt.n	ffd0 <system_gclk_gen_set_config+0x6c>
    ffd8:	490b      	ldr	r1, [pc, #44]	; (10008 <system_gclk_gen_set_config+0xa4>)

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    ffda:	6094      	str	r4, [r2, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffdc:	784a      	ldrb	r2, [r1, #1]
    ffde:	b252      	sxtb	r2, r2
    ffe0:	2a00      	cmp	r2, #0
    ffe2:	dbfb      	blt.n	ffdc <system_gclk_gen_set_config+0x78>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ffe4:	2280      	movs	r2, #128	; 0x80
    ffe6:	684b      	ldr	r3, [r1, #4]
    ffe8:	0252      	lsls	r2, r2, #9
    ffea:	4013      	ands	r3, r2
    ffec:	432b      	orrs	r3, r5
    ffee:	604b      	str	r3, [r1, #4]
	cpu_irq_leave_critical();
    fff0:	4b08      	ldr	r3, [pc, #32]	; (10014 <system_gclk_gen_set_config+0xb0>)
    fff2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    fff4:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    fff6:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    fff8:	0204      	lsls	r4, r0, #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    fffa:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |=
    fffc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    fffe:	431d      	orrs	r5, r3
   10000:	e7d6      	b.n	ffb0 <system_gclk_gen_set_config+0x4c>
			for (mask = (1UL << 1); mask < config->division_factor;
   10002:	2400      	movs	r4, #0
   10004:	e7d0      	b.n	ffa8 <system_gclk_gen_set_config+0x44>
   10006:	46c0      	nop			; (mov r8, r8)
   10008:	40000c00 	.word	0x40000c00
   1000c:	0000ebb5 	.word	0x0000ebb5
   10010:	40000c08 	.word	0x40000c08
   10014:	0000ebf1 	.word	0x0000ebf1

00010018 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   10018:	b510      	push	{r4, lr}
   1001a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1001c:	4a0a      	ldr	r2, [pc, #40]	; (10048 <system_gclk_gen_enable+0x30>)
   1001e:	7853      	ldrb	r3, [r2, #1]
   10020:	b25b      	sxtb	r3, r3
   10022:	2b00      	cmp	r3, #0
   10024:	dbfb      	blt.n	1001e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   10026:	4b09      	ldr	r3, [pc, #36]	; (1004c <system_gclk_gen_enable+0x34>)
   10028:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1002a:	4b09      	ldr	r3, [pc, #36]	; (10050 <system_gclk_gen_enable+0x38>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1002c:	4a06      	ldr	r2, [pc, #24]	; (10048 <system_gclk_gen_enable+0x30>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1002e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10030:	7853      	ldrb	r3, [r2, #1]
   10032:	b25b      	sxtb	r3, r3
   10034:	2b00      	cmp	r3, #0
   10036:	dbfb      	blt.n	10030 <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   10038:	2380      	movs	r3, #128	; 0x80
   1003a:	6851      	ldr	r1, [r2, #4]
   1003c:	025b      	lsls	r3, r3, #9
   1003e:	430b      	orrs	r3, r1
   10040:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   10042:	4b04      	ldr	r3, [pc, #16]	; (10054 <system_gclk_gen_enable+0x3c>)
   10044:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10046:	bd10      	pop	{r4, pc}
   10048:	40000c00 	.word	0x40000c00
   1004c:	0000ebb5 	.word	0x0000ebb5
   10050:	40000c04 	.word	0x40000c04
   10054:	0000ebf1 	.word	0x0000ebf1

00010058 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   10058:	b570      	push	{r4, r5, r6, lr}
   1005a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1005c:	4a19      	ldr	r2, [pc, #100]	; (100c4 <system_gclk_gen_get_hz+0x6c>)
   1005e:	7853      	ldrb	r3, [r2, #1]
   10060:	b25b      	sxtb	r3, r3
   10062:	2b00      	cmp	r3, #0
   10064:	dbfb      	blt.n	1005e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   10066:	4b18      	ldr	r3, [pc, #96]	; (100c8 <system_gclk_gen_get_hz+0x70>)
   10068:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1006a:	4b18      	ldr	r3, [pc, #96]	; (100cc <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1006c:	4d15      	ldr	r5, [pc, #84]	; (100c4 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1006e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10070:	786b      	ldrb	r3, [r5, #1]
   10072:	b25b      	sxtb	r3, r3
   10074:	2b00      	cmp	r3, #0
   10076:	dbfb      	blt.n	10070 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   10078:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1007a:	4b15      	ldr	r3, [pc, #84]	; (100d0 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1007c:	04c0      	lsls	r0, r0, #19
   1007e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   10080:	4798      	blx	r3
   10082:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10084:	4b11      	ldr	r3, [pc, #68]	; (100cc <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10086:	4a0f      	ldr	r2, [pc, #60]	; (100c4 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10088:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1008a:	686d      	ldr	r5, [r5, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1008c:	4b11      	ldr	r3, [pc, #68]	; (100d4 <system_gclk_gen_get_hz+0x7c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1008e:	02ed      	lsls	r5, r5, #11
   10090:	0fed      	lsrs	r5, r5, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10092:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10094:	7853      	ldrb	r3, [r2, #1]
   10096:	b25b      	sxtb	r3, r3
   10098:	2b00      	cmp	r3, #0
   1009a:	dbfb      	blt.n	10094 <system_gclk_gen_get_hz+0x3c>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1009c:	6891      	ldr	r1, [r2, #8]
	cpu_irq_leave_critical();
   1009e:	4b0e      	ldr	r3, [pc, #56]	; (100d8 <system_gclk_gen_get_hz+0x80>)
   100a0:	0209      	lsls	r1, r1, #8
   100a2:	0c0c      	lsrs	r4, r1, #16
   100a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   100a6:	2d00      	cmp	r5, #0
   100a8:	d003      	beq.n	100b2 <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   100aa:	3401      	adds	r4, #1
   100ac:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
   100ae:	0030      	movs	r0, r6
   100b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!divsel && divider > 1) {
   100b2:	2c01      	cmp	r4, #1
   100b4:	d9fb      	bls.n	100ae <system_gclk_gen_get_hz+0x56>
		gen_input_hz /= divider;
   100b6:	0030      	movs	r0, r6
   100b8:	0021      	movs	r1, r4
   100ba:	4b08      	ldr	r3, [pc, #32]	; (100dc <system_gclk_gen_get_hz+0x84>)
   100bc:	4798      	blx	r3
   100be:	0006      	movs	r6, r0
   100c0:	e7f5      	b.n	100ae <system_gclk_gen_get_hz+0x56>
   100c2:	46c0      	nop			; (mov r8, r8)
   100c4:	40000c00 	.word	0x40000c00
   100c8:	0000ebb5 	.word	0x0000ebb5
   100cc:	40000c04 	.word	0x40000c04
   100d0:	0000fbd9 	.word	0x0000fbd9
   100d4:	40000c08 	.word	0x40000c08
   100d8:	0000ebf1 	.word	0x0000ebf1
   100dc:	000131ed 	.word	0x000131ed

000100e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   100e0:	b510      	push	{r4, lr}
   100e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   100e4:	4b06      	ldr	r3, [pc, #24]	; (10100 <system_gclk_chan_enable+0x20>)
   100e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   100e8:	4b06      	ldr	r3, [pc, #24]	; (10104 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   100ea:	4a07      	ldr	r2, [pc, #28]	; (10108 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   100ec:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   100ee:	2380      	movs	r3, #128	; 0x80
   100f0:	8851      	ldrh	r1, [r2, #2]
   100f2:	01db      	lsls	r3, r3, #7
   100f4:	430b      	orrs	r3, r1
   100f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   100f8:	4b04      	ldr	r3, [pc, #16]	; (1010c <system_gclk_chan_enable+0x2c>)
   100fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   100fc:	bd10      	pop	{r4, pc}
   100fe:	46c0      	nop			; (mov r8, r8)
   10100:	0000ebb5 	.word	0x0000ebb5
   10104:	40000c02 	.word	0x40000c02
   10108:	40000c00 	.word	0x40000c00
   1010c:	0000ebf1 	.word	0x0000ebf1

00010110 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   10110:	b510      	push	{r4, lr}
   10112:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10114:	4b0e      	ldr	r3, [pc, #56]	; (10150 <system_gclk_chan_disable+0x40>)
   10116:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10118:	4b0e      	ldr	r3, [pc, #56]	; (10154 <system_gclk_chan_disable+0x44>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1011a:	4a0f      	ldr	r2, [pc, #60]	; (10158 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1011c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1011e:	8853      	ldrh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
   10120:	490e      	ldr	r1, [pc, #56]	; (1015c <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   10122:	051b      	lsls	r3, r3, #20
   10124:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   10126:	8853      	ldrh	r3, [r2, #2]
   10128:	400b      	ands	r3, r1
   1012a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1012c:	8853      	ldrh	r3, [r2, #2]
   1012e:	490c      	ldr	r1, [pc, #48]	; (10160 <system_gclk_chan_disable+0x50>)
   10130:	400b      	ands	r3, r1
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10132:	2180      	movs	r1, #128	; 0x80
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10134:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10136:	01c9      	lsls	r1, r1, #7
   10138:	8853      	ldrh	r3, [r2, #2]
   1013a:	420b      	tst	r3, r1
   1013c:	d1fc      	bne.n	10138 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1013e:	8851      	ldrh	r1, [r2, #2]
   10140:	0203      	lsls	r3, r0, #8
   10142:	4806      	ldr	r0, [pc, #24]	; (1015c <system_gclk_chan_disable+0x4c>)
   10144:	4001      	ands	r1, r0
   10146:	430b      	orrs	r3, r1
   10148:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1014a:	4b06      	ldr	r3, [pc, #24]	; (10164 <system_gclk_chan_disable+0x54>)
   1014c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1014e:	bd10      	pop	{r4, pc}
   10150:	0000ebb5 	.word	0x0000ebb5
   10154:	40000c02 	.word	0x40000c02
   10158:	40000c00 	.word	0x40000c00
   1015c:	fffff0ff 	.word	0xfffff0ff
   10160:	ffffbfff 	.word	0xffffbfff
   10164:	0000ebf1 	.word	0x0000ebf1

00010168 <system_gclk_chan_set_config>:
{
   10168:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1016a:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
   1016c:	4b03      	ldr	r3, [pc, #12]	; (1017c <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1016e:	0224      	lsls	r4, r4, #8
   10170:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   10172:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   10174:	4b02      	ldr	r3, [pc, #8]	; (10180 <system_gclk_chan_set_config+0x18>)
   10176:	b2a4      	uxth	r4, r4
   10178:	805c      	strh	r4, [r3, #2]
}
   1017a:	bd10      	pop	{r4, pc}
   1017c:	00010111 	.word	0x00010111
   10180:	40000c00 	.word	0x40000c00

00010184 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   10184:	b510      	push	{r4, lr}
   10186:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10188:	4b06      	ldr	r3, [pc, #24]	; (101a4 <system_gclk_chan_get_hz+0x20>)
   1018a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1018c:	4b06      	ldr	r3, [pc, #24]	; (101a8 <system_gclk_chan_get_hz+0x24>)
   1018e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   10190:	4b06      	ldr	r3, [pc, #24]	; (101ac <system_gclk_chan_get_hz+0x28>)
   10192:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
   10194:	4b06      	ldr	r3, [pc, #24]	; (101b0 <system_gclk_chan_get_hz+0x2c>)
   10196:	0524      	lsls	r4, r4, #20
   10198:	0f24      	lsrs	r4, r4, #28
   1019a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1019c:	0020      	movs	r0, r4
   1019e:	4b05      	ldr	r3, [pc, #20]	; (101b4 <system_gclk_chan_get_hz+0x30>)
   101a0:	4798      	blx	r3
}
   101a2:	bd10      	pop	{r4, pc}
   101a4:	0000ebb5 	.word	0x0000ebb5
   101a8:	40000c02 	.word	0x40000c02
   101ac:	40000c00 	.word	0x40000c00
   101b0:	0000ebf1 	.word	0x0000ebf1
   101b4:	00010059 	.word	0x00010059

000101b8 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   101b8:	78d3      	ldrb	r3, [r2, #3]
{
   101ba:	b570      	push	{r4, r5, r6, lr}
	if (!config->powersave) {
   101bc:	2b00      	cmp	r3, #0
   101be:	d131      	bne.n	10224 <_system_pinmux_config+0x6c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   101c0:	7813      	ldrb	r3, [r2, #0]
   101c2:	2b80      	cmp	r3, #128	; 0x80
   101c4:	d047      	beq.n	10256 <_system_pinmux_config+0x9e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   101c6:	2480      	movs	r4, #128	; 0x80
   101c8:	061b      	lsls	r3, r3, #24
   101ca:	0264      	lsls	r4, r4, #9
   101cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   101ce:	7854      	ldrb	r4, [r2, #1]
   101d0:	2502      	movs	r5, #2
   101d2:	0026      	movs	r6, r4
   101d4:	43ae      	bics	r6, r5
   101d6:	d107      	bne.n	101e8 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   101d8:	7894      	ldrb	r4, [r2, #2]
   101da:	2c00      	cmp	r4, #0
   101dc:	d137      	bne.n	1024e <_system_pinmux_config+0x96>
			pin_cfg |= PORT_WRCONFIG_INEN;
   101de:	2480      	movs	r4, #128	; 0x80
   101e0:	02a4      	lsls	r4, r4, #10
   101e2:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   101e4:	6041      	str	r1, [r0, #4]
   101e6:	7854      	ldrb	r4, [r2, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   101e8:	3c01      	subs	r4, #1
   101ea:	2c01      	cmp	r4, #1
   101ec:	d935      	bls.n	1025a <_system_pinmux_config+0xa2>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   101ee:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   101f0:	040d      	lsls	r5, r1, #16
   101f2:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   101f4:	05e4      	lsls	r4, r4, #23
   101f6:	432c      	orrs	r4, r5
   101f8:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   101fa:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   101fc:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   101fe:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10200:	0624      	lsls	r4, r4, #24
   10202:	432c      	orrs	r4, r5
   10204:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10206:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   10208:	78d4      	ldrb	r4, [r2, #3]
   1020a:	2c00      	cmp	r4, #0
   1020c:	d109      	bne.n	10222 <_system_pinmux_config+0x6a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1020e:	035b      	lsls	r3, r3, #13
   10210:	d503      	bpl.n	1021a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   10212:	7893      	ldrb	r3, [r2, #2]
   10214:	2b01      	cmp	r3, #1
   10216:	d023      	beq.n	10260 <_system_pinmux_config+0xa8>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   10218:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1021a:	7853      	ldrb	r3, [r2, #1]
   1021c:	3b01      	subs	r3, #1
   1021e:	2b01      	cmp	r3, #1
   10220:	d913      	bls.n	1024a <_system_pinmux_config+0x92>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   10222:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10224:	23a0      	movs	r3, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   10226:	040c      	lsls	r4, r1, #16
   10228:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1022a:	05db      	lsls	r3, r3, #23
   1022c:	4323      	orrs	r3, r4
		port->DIRCLR.reg = pin_mask;
   1022e:	6041      	str	r1, [r0, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10230:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10232:	23d0      	movs	r3, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10234:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10236:	061b      	lsls	r3, r3, #24
   10238:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1023a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1023c:	78d3      	ldrb	r3, [r2, #3]
   1023e:	2b00      	cmp	r3, #0
   10240:	d1ef      	bne.n	10222 <_system_pinmux_config+0x6a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10242:	7853      	ldrb	r3, [r2, #1]
   10244:	3b01      	subs	r3, #1
   10246:	2b01      	cmp	r3, #1
   10248:	d8eb      	bhi.n	10222 <_system_pinmux_config+0x6a>
			port->DIRSET.reg = pin_mask;
   1024a:	6081      	str	r1, [r0, #8]
}
   1024c:	e7e9      	b.n	10222 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1024e:	24c0      	movs	r4, #192	; 0xc0
   10250:	02e4      	lsls	r4, r4, #11
   10252:	4323      	orrs	r3, r4
   10254:	e7c6      	b.n	101e4 <_system_pinmux_config+0x2c>
	uint32_t pin_cfg = 0;
   10256:	2300      	movs	r3, #0
   10258:	e7b9      	b.n	101ce <_system_pinmux_config+0x16>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1025a:	4c02      	ldr	r4, [pc, #8]	; (10264 <_system_pinmux_config+0xac>)
   1025c:	4023      	ands	r3, r4
   1025e:	e7c6      	b.n	101ee <_system_pinmux_config+0x36>
				port->OUTSET.reg = pin_mask;
   10260:	6181      	str	r1, [r0, #24]
   10262:	e7da      	b.n	1021a <_system_pinmux_config+0x62>
   10264:	fffbffff 	.word	0xfffbffff

00010268 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   10268:	000a      	movs	r2, r1
   1026a:	b510      	push	{r4, lr}
   1026c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   1026e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10270:	2900      	cmp	r1, #0
   10272:	d104      	bne.n	1027e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   10274:	4906      	ldr	r1, [pc, #24]	; (10290 <system_pinmux_pin_set_config+0x28>)
   10276:	0943      	lsrs	r3, r0, #5
   10278:	468c      	mov	ip, r1
   1027a:	01db      	lsls	r3, r3, #7
   1027c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1027e:	241f      	movs	r4, #31
   10280:	2101      	movs	r1, #1
   10282:	4020      	ands	r0, r4
   10284:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   10286:	0018      	movs	r0, r3
   10288:	4b02      	ldr	r3, [pc, #8]	; (10294 <system_pinmux_pin_set_config+0x2c>)
   1028a:	4798      	blx	r3
}
   1028c:	bd10      	pop	{r4, pc}
   1028e:	46c0      	nop			; (mov r8, r8)
   10290:	41004400 	.word	0x41004400
   10294:	000101b9 	.word	0x000101b9

00010298 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   10298:	4770      	bx	lr
   1029a:	46c0      	nop			; (mov r8, r8)

0001029c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1029c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1029e:	4b05      	ldr	r3, [pc, #20]	; (102b4 <system_init+0x18>)
   102a0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   102a2:	4b05      	ldr	r3, [pc, #20]	; (102b8 <system_init+0x1c>)
   102a4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   102a6:	4b05      	ldr	r3, [pc, #20]	; (102bc <system_init+0x20>)
   102a8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   102aa:	4b05      	ldr	r3, [pc, #20]	; (102c0 <system_init+0x24>)
   102ac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   102ae:	4b05      	ldr	r3, [pc, #20]	; (102c4 <system_init+0x28>)
   102b0:	4798      	blx	r3
}
   102b2:	bd10      	pop	{r4, pc}
   102b4:	0000fd99 	.word	0x0000fd99
   102b8:	0000a229 	.word	0x0000a229
   102bc:	00010299 	.word	0x00010299
   102c0:	0000ee8d 	.word	0x0000ee8d
   102c4:	00010299 	.word	0x00010299

000102c8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
   102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102ca:	4657      	mov	r7, sl
   102cc:	464e      	mov	r6, r9
   102ce:	46de      	mov	lr, fp
   102d0:	4645      	mov	r5, r8
   102d2:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
   102d4:	798e      	ldrb	r6, [r1, #6]
{
   102d6:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
   102d8:	b273      	sxtb	r3, r6
{
   102da:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
   102dc:	2b00      	cmp	r3, #0
   102de:	da00      	bge.n	102e2 <udd_ep_transfer_process+0x1a>
   102e0:	e071      	b.n	103c6 <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
   102e2:	2e00      	cmp	r6, #0
   102e4:	d033      	beq.n	1034e <udd_ep_transfer_process+0x86>
   102e6:	230f      	movs	r3, #15
   102e8:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   102ea:	005c      	lsls	r4, r3, #1
   102ec:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
   102ee:	00a5      	lsls	r5, r4, #2
   102f0:	4699      	mov	r9, r3
   102f2:	4f6f      	ldr	r7, [pc, #444]	; (104b0 <udd_ep_transfer_process+0x1e8>)
   102f4:	192b      	adds	r3, r5, r4
   102f6:	009b      	lsls	r3, r3, #2
   102f8:	18fb      	adds	r3, r7, r3
   102fa:	8a1a      	ldrh	r2, [r3, #16]
   102fc:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
   102fe:	880a      	ldrh	r2, [r1, #0]
   10300:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
   10302:	7c9a      	ldrb	r2, [r3, #18]
   10304:	0752      	lsls	r2, r2, #29
   10306:	d426      	bmi.n	10356 <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
   10308:	192b      	adds	r3, r5, r4
   1030a:	009b      	lsls	r3, r3, #2
   1030c:	18fb      	adds	r3, r7, r3
   1030e:	68da      	ldr	r2, [r3, #12]
   10310:	445a      	add	r2, fp
   10312:	4690      	mov	r8, r2
   10314:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
   10316:	689a      	ldr	r2, [r3, #8]
   10318:	4590      	cmp	r8, r2
   1031a:	d81a      	bhi.n	10352 <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
   1031c:	4653      	mov	r3, sl
   1031e:	889b      	ldrh	r3, [r3, #4]
   10320:	455b      	cmp	r3, fp
   10322:	d02b      	beq.n	1037c <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
   10324:	2001      	movs	r0, #1
   10326:	192c      	adds	r4, r5, r4
   10328:	00a4      	lsls	r4, r4, #2
   1032a:	1939      	adds	r1, r7, r4
   1032c:	7c8b      	ldrb	r3, [r1, #18]
   1032e:	4383      	bics	r3, r0
   10330:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
   10332:	593b      	ldr	r3, [r7, r4]
   10334:	2b00      	cmp	r3, #0
   10336:	d003      	beq.n	10340 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
   10338:	68c9      	ldr	r1, [r1, #12]
   1033a:	0032      	movs	r2, r6
   1033c:	2000      	movs	r0, #0
   1033e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
   10340:	b003      	add	sp, #12
   10342:	bc3c      	pop	{r2, r3, r4, r5}
   10344:	4690      	mov	r8, r2
   10346:	4699      	mov	r9, r3
   10348:	46a2      	mov	sl, r4
   1034a:	46ab      	mov	fp, r5
   1034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
   1034e:	8a33      	ldrh	r3, [r6, #16]
   10350:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
   10352:	60da      	str	r2, [r3, #12]
   10354:	e7e6      	b.n	10324 <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
   10356:	68d9      	ldr	r1, [r3, #12]
   10358:	685a      	ldr	r2, [r3, #4]
   1035a:	468c      	mov	ip, r1
   1035c:	6898      	ldr	r0, [r3, #8]
   1035e:	4462      	add	r2, ip
   10360:	9901      	ldr	r1, [sp, #4]
   10362:	4b54      	ldr	r3, [pc, #336]	; (104b4 <udd_ep_transfer_process+0x1ec>)
   10364:	4690      	mov	r8, r2
   10366:	4798      	blx	r3
   10368:	464b      	mov	r3, r9
   1036a:	000a      	movs	r2, r1
   1036c:	3b01      	subs	r3, #1
   1036e:	4952      	ldr	r1, [pc, #328]	; (104b8 <udd_ep_transfer_process+0x1f0>)
   10370:	019b      	lsls	r3, r3, #6
   10372:	1859      	adds	r1, r3, r1
   10374:	4640      	mov	r0, r8
   10376:	4b51      	ldr	r3, [pc, #324]	; (104bc <udd_ep_transfer_process+0x1f4>)
   10378:	4798      	blx	r3
   1037a:	e7c5      	b.n	10308 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
   1037c:	4590      	cmp	r8, r2
   1037e:	d0d1      	beq.n	10324 <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   10380:	4643      	mov	r3, r8
   10382:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10384:	4b4e      	ldr	r3, [pc, #312]	; (104c0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   10386:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10388:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
   1038a:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   1038c:	429e      	cmp	r6, r3
   1038e:	d96c      	bls.n	1046a <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
   10390:	0018      	movs	r0, r3
   10392:	4b4c      	ldr	r3, [pc, #304]	; (104c4 <udd_ep_transfer_process+0x1fc>)
   10394:	4798      	blx	r3
   10396:	4653      	mov	r3, sl
   10398:	1a5b      	subs	r3, r3, r1
   1039a:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
   1039c:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
   1039e:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
   103a0:	00a4      	lsls	r4, r4, #2
   103a2:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
   103a4:	4299      	cmp	r1, r3
   103a6:	d959      	bls.n	1045c <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
   103a8:	2204      	movs	r2, #4
   103aa:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
   103ac:	4c46      	ldr	r4, [pc, #280]	; (104c8 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
   103ae:	4313      	orrs	r3, r2
   103b0:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
   103b2:	464b      	mov	r3, r9
   103b4:	1e5a      	subs	r2, r3, #1
   103b6:	4b40      	ldr	r3, [pc, #256]	; (104b8 <udd_ep_transfer_process+0x1f0>)
   103b8:	0192      	lsls	r2, r2, #6
   103ba:	18d2      	adds	r2, r2, r3
   103bc:	4843      	ldr	r0, [pc, #268]	; (104cc <udd_ep_transfer_process+0x204>)
   103be:	000b      	movs	r3, r1
   103c0:	4649      	mov	r1, r9
   103c2:	47a0      	blx	r4
   103c4:	e7bc      	b.n	10340 <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
   103c6:	2e80      	cmp	r6, #128	; 0x80
   103c8:	d045      	beq.n	10456 <udd_ep_transfer_process+0x18e>
   103ca:	230f      	movs	r3, #15
   103cc:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   103ce:	005c      	lsls	r4, r3, #1
   103d0:	4699      	mov	r9, r3
   103d2:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
   103d4:	009c      	lsls	r4, r3, #2
   103d6:	18e0      	adds	r0, r4, r3
   103d8:	4f35      	ldr	r7, [pc, #212]	; (104b0 <udd_ep_transfer_process+0x1e8>)
   103da:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   103dc:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
   103de:	183b      	adds	r3, r7, r0
   103e0:	8a19      	ldrh	r1, [r3, #16]
   103e2:	001a      	movs	r2, r3
   103e4:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
   103e6:	4651      	mov	r1, sl
   103e8:	884d      	ldrh	r5, [r1, #2]
   103ea:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
   103ec:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
   103ee:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
   103f0:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
   103f2:	4465      	add	r5, ip
   103f4:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
   103f6:	428d      	cmp	r5, r1
   103f8:	d03d      	beq.n	10476 <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   103fa:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   103fc:	4b30      	ldr	r3, [pc, #192]	; (104c0 <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   103fe:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10400:	469a      	mov	sl, r3
   10402:	429e      	cmp	r6, r3
   10404:	d906      	bls.n	10414 <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
   10406:	0018      	movs	r0, r3
   10408:	4659      	mov	r1, fp
   1040a:	4b2e      	ldr	r3, [pc, #184]	; (104c4 <udd_ep_transfer_process+0x1fc>)
   1040c:	4798      	blx	r3
   1040e:	4653      	mov	r3, sl
   10410:	1a5e      	subs	r6, r3, r1
   10412:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
   10414:	4643      	mov	r3, r8
   10416:	18e3      	adds	r3, r4, r3
   10418:	009b      	lsls	r3, r3, #2
   1041a:	18fb      	adds	r3, r7, r3
   1041c:	7c9a      	ldrb	r2, [r3, #18]
   1041e:	2300      	movs	r3, #0
   10420:	0792      	lsls	r2, r2, #30
   10422:	d507      	bpl.n	10434 <udd_ep_transfer_process+0x16c>
   10424:	4b23      	ldr	r3, [pc, #140]	; (104b4 <udd_ep_transfer_process+0x1ec>)
   10426:	4659      	mov	r1, fp
   10428:	0030      	movs	r0, r6
   1042a:	4798      	blx	r3
   1042c:	b289      	uxth	r1, r1
   1042e:	424b      	negs	r3, r1
   10430:	414b      	adcs	r3, r1
   10432:	b2db      	uxtb	r3, r3
   10434:	2002      	movs	r0, #2
   10436:	4444      	add	r4, r8
   10438:	00a4      	lsls	r4, r4, #2
   1043a:	193f      	adds	r7, r7, r4
   1043c:	7cba      	ldrb	r2, [r7, #18]
   1043e:	005b      	lsls	r3, r3, #1
   10440:	4382      	bics	r2, r0
   10442:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   10444:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
   10446:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   10448:	1952      	adds	r2, r2, r5
   1044a:	0033      	movs	r3, r6
   1044c:	4649      	mov	r1, r9
   1044e:	4c20      	ldr	r4, [pc, #128]	; (104d0 <udd_ep_transfer_process+0x208>)
   10450:	481e      	ldr	r0, [pc, #120]	; (104cc <udd_ep_transfer_process+0x204>)
   10452:	47a0      	blx	r4
   10454:	e774      	b.n	10340 <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
   10456:	2300      	movs	r3, #0
   10458:	8a1b      	ldrh	r3, [r3, #16]
   1045a:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   1045c:	687a      	ldr	r2, [r7, #4]
   1045e:	4649      	mov	r1, r9
   10460:	4442      	add	r2, r8
   10462:	4c19      	ldr	r4, [pc, #100]	; (104c8 <udd_ep_transfer_process+0x200>)
   10464:	4819      	ldr	r0, [pc, #100]	; (104cc <udd_ep_transfer_process+0x204>)
   10466:	47a0      	blx	r4
   10468:	e76a      	b.n	10340 <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
   1046a:	4b12      	ldr	r3, [pc, #72]	; (104b4 <udd_ep_transfer_process+0x1ec>)
   1046c:	0030      	movs	r0, r6
   1046e:	4798      	blx	r3
   10470:	1a73      	subs	r3, r6, r1
   10472:	b29b      	uxth	r3, r3
   10474:	e792      	b.n	1039c <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
   10476:	2102      	movs	r1, #2
   10478:	7c9c      	ldrb	r4, [r3, #18]
   1047a:	4221      	tst	r1, r4
   1047c:	d10c      	bne.n	10498 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
   1047e:	2101      	movs	r1, #1
   10480:	7893      	ldrb	r3, [r2, #2]
   10482:	438b      	bics	r3, r1
   10484:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
   10486:	583b      	ldr	r3, [r7, r0]
   10488:	2b00      	cmp	r3, #0
   1048a:	d100      	bne.n	1048e <udd_ep_transfer_process+0x1c6>
   1048c:	e758      	b.n	10340 <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
   1048e:	0032      	movs	r2, r6
   10490:	0029      	movs	r1, r5
   10492:	2000      	movs	r0, #0
   10494:	4798      	blx	r3
   10496:	e753      	b.n	10340 <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
   10498:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
   1049a:	4c0d      	ldr	r4, [pc, #52]	; (104d0 <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
   1049c:	4388      	bics	r0, r1
   1049e:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
   104a0:	685a      	ldr	r2, [r3, #4]
   104a2:	4649      	mov	r1, r9
   104a4:	1952      	adds	r2, r2, r5
   104a6:	2300      	movs	r3, #0
   104a8:	4808      	ldr	r0, [pc, #32]	; (104cc <udd_ep_transfer_process+0x204>)
   104aa:	47a0      	blx	r4
   104ac:	e748      	b.n	10340 <udd_ep_transfer_process+0x78>
   104ae:	46c0      	nop			; (mov r8, r8)
   104b0:	2000090c 	.word	0x2000090c
   104b4:	000132f9 	.word	0x000132f9
   104b8:	20000d14 	.word	0x20000d14
   104bc:	00013595 	.word	0x00013595
   104c0:	00001fff 	.word	0x00001fff
   104c4:	000134cd 	.word	0x000134cd
   104c8:	00011571 	.word	0x00011571
   104cc:	20000dd4 	.word	0x20000dd4
   104d0:	00011525 	.word	0x00011525

000104d4 <udd_ctrl_stall_data>:
/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   104d4:	2205      	movs	r2, #5
{
   104d6:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   104d8:	4b05      	ldr	r3, [pc, #20]	; (104f0 <udd_ctrl_stall_data+0x1c>)

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
   104da:	4c06      	ldr	r4, [pc, #24]	; (104f4 <udd_ctrl_stall_data+0x20>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   104dc:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
   104de:	0020      	movs	r0, r4
   104e0:	2180      	movs	r1, #128	; 0x80
   104e2:	4b05      	ldr	r3, [pc, #20]	; (104f8 <udd_ctrl_stall_data+0x24>)
   104e4:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
   104e6:	2100      	movs	r1, #0
   104e8:	0020      	movs	r0, r4
   104ea:	4b04      	ldr	r3, [pc, #16]	; (104fc <udd_ctrl_stall_data+0x28>)
   104ec:	4798      	blx	r3
}
   104ee:	bd10      	pop	{r4, pc}
   104f0:	2000090a 	.word	0x2000090a
   104f4:	20000dd4 	.word	0x20000dd4
   104f8:	00011489 	.word	0x00011489
   104fc:	000114a9 	.word	0x000114a9

00010500 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
   10500:	b530      	push	{r4, r5, lr}
   10502:	0004      	movs	r4, r0
   10504:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
   10506:	4b1e      	ldr	r3, [pc, #120]	; (10580 <_usb_on_bus_reset+0x80>)
   10508:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
   1050a:	2380      	movs	r3, #128	; 0x80
   1050c:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
   1050e:	ad01      	add	r5, sp, #4
   10510:	7293      	strb	r3, [r2, #10]
   10512:	0028      	movs	r0, r5
   10514:	4b1b      	ldr	r3, [pc, #108]	; (10584 <_usb_on_bus_reset+0x84>)
   10516:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
   10518:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
   1051a:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
   1051c:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
   1051e:	0020      	movs	r0, r4
   10520:	4b19      	ldr	r3, [pc, #100]	; (10588 <_usb_on_bus_reset+0x88>)
   10522:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
   10524:	4919      	ldr	r1, [pc, #100]	; (1058c <_usb_on_bus_reset+0x8c>)
   10526:	0020      	movs	r0, r4
   10528:	4b19      	ldr	r3, [pc, #100]	; (10590 <_usb_on_bus_reset+0x90>)
   1052a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
   1052c:	4d19      	ldr	r5, [pc, #100]	; (10594 <_usb_on_bus_reset+0x94>)
   1052e:	4b1a      	ldr	r3, [pc, #104]	; (10598 <_usb_on_bus_reset+0x98>)
   10530:	2202      	movs	r2, #2
   10532:	2100      	movs	r1, #0
   10534:	0020      	movs	r0, r4
   10536:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
   10538:	4b18      	ldr	r3, [pc, #96]	; (1059c <_usb_on_bus_reset+0x9c>)
   1053a:	2200      	movs	r2, #0
   1053c:	2100      	movs	r1, #0
   1053e:	0020      	movs	r0, r4
   10540:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
   10542:	4b17      	ldr	r3, [pc, #92]	; (105a0 <_usb_on_bus_reset+0xa0>)
   10544:	2201      	movs	r2, #1
   10546:	2100      	movs	r1, #0
   10548:	0020      	movs	r0, r4
   1054a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
   1054c:	4d15      	ldr	r5, [pc, #84]	; (105a4 <_usb_on_bus_reset+0xa4>)
   1054e:	2202      	movs	r2, #2
   10550:	2100      	movs	r1, #0
   10552:	0020      	movs	r0, r4
   10554:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   10556:	2200      	movs	r2, #0
   10558:	2100      	movs	r1, #0
   1055a:	0020      	movs	r0, r4
   1055c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
   1055e:	2201      	movs	r2, #1
   10560:	2100      	movs	r1, #0
   10562:	0020      	movs	r0, r4
   10564:	47a8      	blx	r5
   10566:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
   10568:	4a0f      	ldr	r2, [pc, #60]	; (105a8 <_usb_on_bus_reset+0xa8>)
   1056a:	890b      	ldrh	r3, [r1, #8]
   1056c:	401a      	ands	r2, r3
   1056e:	2380      	movs	r3, #128	; 0x80
   10570:	00db      	lsls	r3, r3, #3
   10572:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
   10574:	2200      	movs	r2, #0
   10576:	810b      	strh	r3, [r1, #8]
   10578:	4b0c      	ldr	r3, [pc, #48]	; (105ac <_usb_on_bus_reset+0xac>)
   1057a:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
   1057c:	b003      	add	sp, #12
   1057e:	bd30      	pop	{r4, r5, pc}
   10580:	0000e709 	.word	0x0000e709
   10584:	0001123d 	.word	0x0001123d
   10588:	0001124d 	.word	0x0001124d
   1058c:	20000f54 	.word	0x20000f54
   10590:	000115b9 	.word	0x000115b9
   10594:	0001108d 	.word	0x0001108d
   10598:	000106e5 	.word	0x000106e5
   1059c:	000109b1 	.word	0x000109b1
   105a0:	000105ed 	.word	0x000105ed
   105a4:	000110dd 	.word	0x000110dd
   105a8:	fffff3ff 	.word	0xfffff3ff
   105ac:	2000090a 	.word	0x2000090a

000105b0 <udd_ctrl_send_zlp_in>:
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   105b0:	2203      	movs	r2, #3
{
   105b2:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   105b4:	4b07      	ldr	r3, [pc, #28]	; (105d4 <udd_ctrl_send_zlp_in+0x24>)
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   105b6:	4c08      	ldr	r4, [pc, #32]	; (105d8 <udd_ctrl_send_zlp_in+0x28>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   105b8:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   105ba:	4908      	ldr	r1, [pc, #32]	; (105dc <udd_ctrl_send_zlp_in+0x2c>)
   105bc:	0020      	movs	r0, r4
   105be:	4b08      	ldr	r3, [pc, #32]	; (105e0 <udd_ctrl_send_zlp_in+0x30>)
   105c0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
   105c2:	4b08      	ldr	r3, [pc, #32]	; (105e4 <udd_ctrl_send_zlp_in+0x34>)
   105c4:	2100      	movs	r1, #0
   105c6:	689a      	ldr	r2, [r3, #8]
   105c8:	0020      	movs	r0, r4
   105ca:	2300      	movs	r3, #0
   105cc:	4c06      	ldr	r4, [pc, #24]	; (105e8 <udd_ctrl_send_zlp_in+0x38>)
   105ce:	47a0      	blx	r4
}
   105d0:	bd10      	pop	{r4, pc}
   105d2:	46c0      	nop			; (mov r8, r8)
   105d4:	2000090a 	.word	0x2000090a
   105d8:	20000dd4 	.word	0x20000dd4
   105dc:	20000f54 	.word	0x20000f54
   105e0:	000115b9 	.word	0x000115b9
   105e4:	20000f3c 	.word	0x20000f3c
   105e8:	00011525 	.word	0x00011525

000105ec <_usb_ep0_on_tansfer_fail>:
{
   105ec:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
   105ee:	7989      	ldrb	r1, [r1, #6]
   105f0:	b24b      	sxtb	r3, r1
   105f2:	2b00      	cmp	r3, #0
   105f4:	db06      	blt.n	10604 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
   105f6:	4a0b      	ldr	r2, [pc, #44]	; (10624 <_usb_ep0_on_tansfer_fail+0x38>)
   105f8:	7813      	ldrb	r3, [r2, #0]
   105fa:	2b02      	cmp	r3, #2
   105fc:	d00c      	beq.n	10618 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   105fe:	2b03      	cmp	r3, #3
   10600:	d006      	beq.n	10610 <_usb_ep0_on_tansfer_fail+0x24>
}
   10602:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   10604:	4b07      	ldr	r3, [pc, #28]	; (10624 <_usb_ep0_on_tansfer_fail+0x38>)
   10606:	781b      	ldrb	r3, [r3, #0]
   10608:	2b01      	cmp	r3, #1
   1060a:	d008      	beq.n	1061e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   1060c:	2b04      	cmp	r3, #4
   1060e:	d1f8      	bne.n	10602 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
   10610:	4805      	ldr	r0, [pc, #20]	; (10628 <_usb_ep0_on_tansfer_fail+0x3c>)
   10612:	4b06      	ldr	r3, [pc, #24]	; (1062c <_usb_ep0_on_tansfer_fail+0x40>)
   10614:	4798      	blx	r3
}
   10616:	e7f4      	b.n	10602 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   10618:	3302      	adds	r3, #2
   1061a:	7013      	strb	r3, [r2, #0]
   1061c:	e7f1      	b.n	10602 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
   1061e:	4b04      	ldr	r3, [pc, #16]	; (10630 <_usb_ep0_on_tansfer_fail+0x44>)
   10620:	4798      	blx	r3
   10622:	e7ee      	b.n	10602 <_usb_ep0_on_tansfer_fail+0x16>
   10624:	2000090a 	.word	0x2000090a
   10628:	20000dd4 	.word	0x20000dd4
   1062c:	00011489 	.word	0x00011489
   10630:	000105b1 	.word	0x000105b1

00010634 <udd_ctrl_in_sent>:
{
   10634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
   10636:	4d1f      	ldr	r5, [pc, #124]	; (106b4 <udd_ctrl_in_sent+0x80>)
   10638:	4e1f      	ldr	r6, [pc, #124]	; (106b8 <udd_ctrl_in_sent+0x84>)
   1063a:	882a      	ldrh	r2, [r5, #0]
   1063c:	89b4      	ldrh	r4, [r6, #12]
   1063e:	1aa4      	subs	r4, r4, r2
   10640:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   10642:	2c00      	cmp	r4, #0
   10644:	d011      	beq.n	1066a <udd_ctrl_in_sent+0x36>
   10646:	4f1d      	ldr	r7, [pc, #116]	; (106bc <udd_ctrl_in_sent+0x88>)
   10648:	0023      	movs	r3, r4
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   1064a:	2c3f      	cmp	r4, #63	; 0x3f
   1064c:	d921      	bls.n	10692 <udd_ctrl_in_sent+0x5e>
		b_shortpacket = false;
   1064e:	2300      	movs	r3, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   10650:	2440      	movs	r4, #64	; 0x40
		b_shortpacket = false;
   10652:	703b      	strb	r3, [r7, #0]
   10654:	3340      	adds	r3, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
   10656:	68b1      	ldr	r1, [r6, #8]
   10658:	4819      	ldr	r0, [pc, #100]	; (106c0 <udd_ctrl_in_sent+0x8c>)
   1065a:	188a      	adds	r2, r1, r2
   1065c:	4e19      	ldr	r6, [pc, #100]	; (106c4 <udd_ctrl_in_sent+0x90>)
   1065e:	2100      	movs	r1, #0
   10660:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
   10662:	882b      	ldrh	r3, [r5, #0]
   10664:	18e4      	adds	r4, r4, r3
   10666:	802c      	strh	r4, [r5, #0]
}
   10668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
   1066a:	4917      	ldr	r1, [pc, #92]	; (106c8 <udd_ctrl_in_sent+0x94>)
   1066c:	880b      	ldrh	r3, [r1, #0]
   1066e:	18d3      	adds	r3, r2, r3
   10670:	b29b      	uxth	r3, r3
   10672:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
   10674:	88f1      	ldrh	r1, [r6, #6]
   10676:	4299      	cmp	r1, r3
   10678:	d00e      	beq.n	10698 <udd_ctrl_in_sent+0x64>
   1067a:	4f10      	ldr	r7, [pc, #64]	; (106bc <udd_ctrl_in_sent+0x88>)
   1067c:	783b      	ldrb	r3, [r7, #0]
   1067e:	2b00      	cmp	r3, #0
   10680:	d10a      	bne.n	10698 <udd_ctrl_in_sent+0x64>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
   10682:	6973      	ldr	r3, [r6, #20]
   10684:	2b00      	cmp	r3, #0
   10686:	d00f      	beq.n	106a8 <udd_ctrl_in_sent+0x74>
   10688:	4798      	blx	r3
   1068a:	2800      	cmp	r0, #0
   1068c:	d10e      	bne.n	106ac <udd_ctrl_in_sent+0x78>
   1068e:	2300      	movs	r3, #0
   10690:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
   10692:	2101      	movs	r1, #1
   10694:	7039      	strb	r1, [r7, #0]
   10696:	e7de      	b.n	10656 <udd_ctrl_in_sent+0x22>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   10698:	2204      	movs	r2, #4
   1069a:	4b0c      	ldr	r3, [pc, #48]	; (106cc <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   1069c:	490c      	ldr	r1, [pc, #48]	; (106d0 <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   1069e:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   106a0:	4807      	ldr	r0, [pc, #28]	; (106c0 <udd_ctrl_in_sent+0x8c>)
   106a2:	4b0c      	ldr	r3, [pc, #48]	; (106d4 <udd_ctrl_in_sent+0xa0>)
   106a4:	4798      	blx	r3
			return;
   106a6:	e7df      	b.n	10668 <udd_ctrl_in_sent+0x34>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
   106a8:	2300      	movs	r3, #0
   106aa:	e7f2      	b.n	10692 <udd_ctrl_in_sent+0x5e>
			udd_ctrl_payload_nb_trans = 0;
   106ac:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   106ae:	89b4      	ldrh	r4, [r6, #12]
   106b0:	2200      	movs	r2, #0
   106b2:	e7c9      	b.n	10648 <udd_ctrl_in_sent+0x14>
   106b4:	20000906 	.word	0x20000906
   106b8:	20000f3c 	.word	0x20000f3c
   106bc:	20000904 	.word	0x20000904
   106c0:	20000dd4 	.word	0x20000dd4
   106c4:	00011525 	.word	0x00011525
   106c8:	20000908 	.word	0x20000908
   106cc:	2000090a 	.word	0x2000090a
   106d0:	20000f54 	.word	0x20000f54
   106d4:	000115b9 	.word	0x000115b9

000106d8 <_usb_on_sof_notify>:
{
   106d8:	b510      	push	{r4, lr}
	udc_sof_notify();
   106da:	4b01      	ldr	r3, [pc, #4]	; (106e0 <_usb_on_sof_notify+0x8>)
   106dc:	4798      	blx	r3
}
   106de:	bd10      	pop	{r4, pc}
   106e0:	0000e751 	.word	0x0000e751

000106e4 <_usb_ep0_on_setup>:
{
   106e4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   106e6:	4e29      	ldr	r6, [pc, #164]	; (1078c <_usb_ep0_on_setup+0xa8>)
{
   106e8:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   106ea:	7833      	ldrb	r3, [r6, #0]
   106ec:	2b00      	cmp	r3, #0
   106ee:	d006      	beq.n	106fe <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
   106f0:	4b27      	ldr	r3, [pc, #156]	; (10790 <_usb_ep0_on_setup+0xac>)
   106f2:	691b      	ldr	r3, [r3, #16]
   106f4:	2b00      	cmp	r3, #0
   106f6:	d000      	beq.n	106fa <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
   106f8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
   106fa:	2300      	movs	r3, #0
   106fc:	7033      	strb	r3, [r6, #0]
	if ( 8 != ep_callback_para->received_bytes) {
   106fe:	8823      	ldrh	r3, [r4, #0]
   10700:	2b08      	cmp	r3, #8
   10702:	d002      	beq.n	1070a <_usb_ep0_on_setup+0x26>
		udd_ctrl_stall_data();
   10704:	4b23      	ldr	r3, [pc, #140]	; (10794 <_usb_ep0_on_setup+0xb0>)
   10706:	4798      	blx	r3
}
   10708:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
   1070a:	4c23      	ldr	r4, [pc, #140]	; (10798 <_usb_ep0_on_setup+0xb4>)
   1070c:	4d20      	ldr	r5, [pc, #128]	; (10790 <_usb_ep0_on_setup+0xac>)
   1070e:	7823      	ldrb	r3, [r4, #0]
   10710:	702b      	strb	r3, [r5, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
   10712:	7863      	ldrb	r3, [r4, #1]
   10714:	706b      	strb	r3, [r5, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
   10716:	78e2      	ldrb	r2, [r4, #3]
   10718:	78a3      	ldrb	r3, [r4, #2]
   1071a:	0212      	lsls	r2, r2, #8
   1071c:	189b      	adds	r3, r3, r2
   1071e:	806b      	strh	r3, [r5, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
   10720:	7962      	ldrb	r2, [r4, #5]
   10722:	7923      	ldrb	r3, [r4, #4]
   10724:	0212      	lsls	r2, r2, #8
   10726:	189b      	adds	r3, r3, r2
   10728:	80ab      	strh	r3, [r5, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
   1072a:	79e2      	ldrb	r2, [r4, #7]
   1072c:	79a3      	ldrb	r3, [r4, #6]
   1072e:	0212      	lsls	r2, r2, #8
   10730:	189b      	adds	r3, r3, r2
   10732:	80eb      	strh	r3, [r5, #6]
		if (false == udc_process_setup()) {
   10734:	4b19      	ldr	r3, [pc, #100]	; (1079c <_usb_ep0_on_setup+0xb8>)
   10736:	4798      	blx	r3
   10738:	2800      	cmp	r0, #0
   1073a:	d0e3      	beq.n	10704 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
   1073c:	782b      	ldrb	r3, [r5, #0]
   1073e:	2b7f      	cmp	r3, #127	; 0x7f
   10740:	d813      	bhi.n	1076a <_usb_ep0_on_setup+0x86>
			if(0 == udd_g_ctrlreq.req.wLength) {
   10742:	88eb      	ldrh	r3, [r5, #6]
   10744:	2b00      	cmp	r3, #0
   10746:	d00d      	beq.n	10764 <_usb_ep0_on_setup+0x80>
				udd_ctrl_prev_payload_nb_trans = 0;
   10748:	2300      	movs	r3, #0
   1074a:	4a15      	ldr	r2, [pc, #84]	; (107a0 <_usb_ep0_on_setup+0xbc>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   1074c:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
   1074e:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
   10750:	4a14      	ldr	r2, [pc, #80]	; (107a4 <_usb_ep0_on_setup+0xc0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10752:	4815      	ldr	r0, [pc, #84]	; (107a8 <_usb_ep0_on_setup+0xc4>)
				udd_ctrl_payload_nb_trans = 0;
   10754:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   10756:	3301      	adds	r3, #1
   10758:	7033      	strb	r3, [r6, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   1075a:	0022      	movs	r2, r4
   1075c:	333f      	adds	r3, #63	; 0x3f
   1075e:	4c13      	ldr	r4, [pc, #76]	; (107ac <_usb_ep0_on_setup+0xc8>)
   10760:	47a0      	blx	r4
   10762:	e7d1      	b.n	10708 <_usb_ep0_on_setup+0x24>
				udd_ctrl_send_zlp_in();
   10764:	4b12      	ldr	r3, [pc, #72]	; (107b0 <_usb_ep0_on_setup+0xcc>)
   10766:	4798      	blx	r3
				return;
   10768:	e7ce      	b.n	10708 <_usb_ep0_on_setup+0x24>
			udd_ctrl_prev_payload_nb_trans = 0;
   1076a:	2300      	movs	r3, #0
   1076c:	4a0c      	ldr	r2, [pc, #48]	; (107a0 <_usb_ep0_on_setup+0xbc>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   1076e:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
   10770:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
   10772:	4a0c      	ldr	r2, [pc, #48]	; (107a4 <_usb_ep0_on_setup+0xc0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10774:	480c      	ldr	r0, [pc, #48]	; (107a8 <_usb_ep0_on_setup+0xc4>)
			udd_ctrl_payload_nb_trans = 0;
   10776:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   10778:	3302      	adds	r3, #2
   1077a:	7033      	strb	r3, [r6, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   1077c:	0022      	movs	r2, r4
   1077e:	333e      	adds	r3, #62	; 0x3e
   10780:	4c0a      	ldr	r4, [pc, #40]	; (107ac <_usb_ep0_on_setup+0xc8>)
   10782:	47a0      	blx	r4
			udd_ctrl_in_sent();
   10784:	4b0b      	ldr	r3, [pc, #44]	; (107b4 <_usb_ep0_on_setup+0xd0>)
   10786:	4798      	blx	r3
   10788:	e7be      	b.n	10708 <_usb_ep0_on_setup+0x24>
   1078a:	46c0      	nop			; (mov r8, r8)
   1078c:	2000090a 	.word	0x2000090a
   10790:	20000f3c 	.word	0x20000f3c
   10794:	000104d5 	.word	0x000104d5
   10798:	20000f54 	.word	0x20000f54
   1079c:	0000e791 	.word	0x0000e791
   107a0:	20000908 	.word	0x20000908
   107a4:	20000906 	.word	0x20000906
   107a8:	20000dd4 	.word	0x20000dd4
   107ac:	00011571 	.word	0x00011571
   107b0:	000105b1 	.word	0x000105b1
   107b4:	00010635 	.word	0x00010635

000107b8 <udd_sleep_mode>:
	enum sleepmgr_mode sleep_mode[] = {
   107b8:	2200      	movs	r2, #0
{
   107ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   107bc:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
   107be:	ab01      	add	r3, sp, #4
   107c0:	4694      	mov	ip, r2
   107c2:	701a      	strb	r2, [r3, #0]
   107c4:	2203      	movs	r2, #3
   107c6:	2701      	movs	r7, #1
	if (udd_state == new_state) {
   107c8:	4926      	ldr	r1, [pc, #152]	; (10864 <udd_sleep_mode+0xac>)
	enum sleepmgr_mode sleep_mode[] = {
   107ca:	705a      	strb	r2, [r3, #1]
   107cc:	3a01      	subs	r2, #1
   107ce:	709a      	strb	r2, [r3, #2]
	if (udd_state == new_state) {
   107d0:	780a      	ldrb	r2, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   107d2:	70df      	strb	r7, [r3, #3]
	if (udd_state == new_state) {
   107d4:	4282      	cmp	r2, r0
   107d6:	d004      	beq.n	107e2 <udd_sleep_mode+0x2a>
	if (new_state != UDD_STATE_OFF) {
   107d8:	2800      	cmp	r0, #0
   107da:	d121      	bne.n	10820 <udd_sleep_mode+0x68>
	if (udd_state != UDD_STATE_OFF) {
   107dc:	2a00      	cmp	r2, #0
   107de:	d102      	bne.n	107e6 <udd_sleep_mode+0x2e>
	udd_state = new_state;
   107e0:	7008      	strb	r0, [r1, #0]
}
   107e2:	b005      	add	sp, #20
   107e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   107e6:	5c9b      	ldrb	r3, [r3, r2]
   107e8:	4a1f      	ldr	r2, [pc, #124]	; (10868 <udd_sleep_mode+0xb0>)
   107ea:	5cd4      	ldrb	r4, [r2, r3]
   107ec:	2c00      	cmp	r4, #0
   107ee:	d016      	beq.n	1081e <udd_sleep_mode+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   107f0:	f3ef 8410 	mrs	r4, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   107f4:	4265      	negs	r5, r4
   107f6:	416c      	adcs	r4, r5
   107f8:	9403      	str	r4, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   107fa:	b672      	cpsid	i
   107fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10800:	2400      	movs	r4, #0
   10802:	4d1a      	ldr	r5, [pc, #104]	; (1086c <udd_sleep_mode+0xb4>)
   10804:	702c      	strb	r4, [r5, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   10806:	5cd4      	ldrb	r4, [r2, r3]
	return flags;
   10808:	9e03      	ldr	r6, [sp, #12]
   1080a:	3c01      	subs	r4, #1
   1080c:	54d4      	strb	r4, [r2, r3]
	if (cpu_irq_is_enabled_flags(flags))
   1080e:	2e00      	cmp	r6, #0
   10810:	d0e6      	beq.n	107e0 <udd_sleep_mode+0x28>
		cpu_irq_enable();
   10812:	2301      	movs	r3, #1
   10814:	702b      	strb	r3, [r5, #0]
   10816:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1081a:	b662      	cpsie	i
   1081c:	e7e0      	b.n	107e0 <udd_sleep_mode+0x28>
   1081e:	e7fe      	b.n	1081e <udd_sleep_mode+0x66>
	if(sleepmgr_locks[mode] >= 0xff) {
   10820:	5c1a      	ldrb	r2, [r3, r0]
   10822:	4c11      	ldr	r4, [pc, #68]	; (10868 <udd_sleep_mode+0xb0>)
   10824:	5ca5      	ldrb	r5, [r4, r2]
   10826:	2dff      	cmp	r5, #255	; 0xff
   10828:	d014      	beq.n	10854 <udd_sleep_mode+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1082a:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   1082e:	426e      	negs	r6, r5
   10830:	4175      	adcs	r5, r6
   10832:	9502      	str	r5, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   10834:	b672      	cpsid	i
   10836:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   1083a:	4665      	mov	r5, ip
   1083c:	4e0b      	ldr	r6, [pc, #44]	; (1086c <udd_sleep_mode+0xb4>)
   1083e:	7035      	strb	r5, [r6, #0]
	return flags;
   10840:	9d02      	ldr	r5, [sp, #8]
   10842:	46ac      	mov	ip, r5
	++sleepmgr_locks[mode];
   10844:	5ca5      	ldrb	r5, [r4, r2]
   10846:	3501      	adds	r5, #1
   10848:	54a5      	strb	r5, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
   1084a:	4662      	mov	r2, ip
   1084c:	2a00      	cmp	r2, #0
   1084e:	d102      	bne.n	10856 <udd_sleep_mode+0x9e>
   10850:	780a      	ldrb	r2, [r1, #0]
   10852:	e7c3      	b.n	107dc <udd_sleep_mode+0x24>
   10854:	e7fe      	b.n	10854 <udd_sleep_mode+0x9c>
		cpu_irq_enable();
   10856:	7037      	strb	r7, [r6, #0]
   10858:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1085c:	b662      	cpsie	i
   1085e:	780a      	ldrb	r2, [r1, #0]
   10860:	e7bc      	b.n	107dc <udd_sleep_mode+0x24>
   10862:	46c0      	nop			; (mov r8, r8)
   10864:	20000984 	.word	0x20000984
   10868:	20000c54 	.word	0x20000c54
   1086c:	200001f9 	.word	0x200001f9

00010870 <_usb_device_lpm_suspend>:
{
   10870:	b570      	push	{r4, r5, r6, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   10872:	4c08      	ldr	r4, [pc, #32]	; (10894 <_usb_device_lpm_suspend+0x24>)
   10874:	4d08      	ldr	r5, [pc, #32]	; (10898 <_usb_device_lpm_suspend+0x28>)
   10876:	2106      	movs	r1, #6
   10878:	0020      	movs	r0, r4
   1087a:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   1087c:	2104      	movs	r1, #4
   1087e:	0020      	movs	r0, r4
   10880:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   10882:	2102      	movs	r1, #2
   10884:	0020      	movs	r0, r4
   10886:	4b05      	ldr	r3, [pc, #20]	; (1089c <_usb_device_lpm_suspend+0x2c>)
   10888:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
   1088a:	2002      	movs	r0, #2
   1088c:	4b04      	ldr	r3, [pc, #16]	; (108a0 <_usb_device_lpm_suspend+0x30>)
   1088e:	4798      	blx	r3
}
   10890:	bd70      	pop	{r4, r5, r6, pc}
   10892:	46c0      	nop			; (mov r8, r8)
   10894:	20000dd4 	.word	0x20000dd4
   10898:	00011071 	.word	0x00011071
   1089c:	00011051 	.word	0x00011051
   108a0:	000107b9 	.word	0x000107b9

000108a4 <_usb_on_suspend>:
{
   108a4:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   108a6:	4c06      	ldr	r4, [pc, #24]	; (108c0 <_usb_on_suspend+0x1c>)
   108a8:	2104      	movs	r1, #4
   108aa:	0020      	movs	r0, r4
   108ac:	4b05      	ldr	r3, [pc, #20]	; (108c4 <_usb_on_suspend+0x20>)
   108ae:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   108b0:	2102      	movs	r1, #2
   108b2:	0020      	movs	r0, r4
   108b4:	4b04      	ldr	r3, [pc, #16]	; (108c8 <_usb_on_suspend+0x24>)
   108b6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
   108b8:	2001      	movs	r0, #1
   108ba:	4b04      	ldr	r3, [pc, #16]	; (108cc <_usb_on_suspend+0x28>)
   108bc:	4798      	blx	r3
}
   108be:	bd10      	pop	{r4, pc}
   108c0:	20000dd4 	.word	0x20000dd4
   108c4:	00011071 	.word	0x00011071
   108c8:	00011051 	.word	0x00011051
   108cc:	000107b9 	.word	0x000107b9

000108d0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
   108d0:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
   108d2:	4b12      	ldr	r3, [pc, #72]	; (1091c <_usb_on_wakeup+0x4c>)
   108d4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   108d6:	0692      	lsls	r2, r2, #26
   108d8:	d41a      	bmi.n	10910 <_usb_on_wakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
   108da:	001a      	movs	r2, r3
   108dc:	21d0      	movs	r1, #208	; 0xd0
   108de:	68d3      	ldr	r3, [r2, #12]
   108e0:	400b      	ands	r3, r1
   108e2:	2bd0      	cmp	r3, #208	; 0xd0
   108e4:	d1fb      	bne.n	108de <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   108e6:	4c0e      	ldr	r4, [pc, #56]	; (10920 <_usb_on_wakeup+0x50>)
   108e8:	4b0e      	ldr	r3, [pc, #56]	; (10924 <_usb_on_wakeup+0x54>)
   108ea:	2102      	movs	r1, #2
   108ec:	0020      	movs	r0, r4
   108ee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   108f0:	4d0d      	ldr	r5, [pc, #52]	; (10928 <_usb_on_wakeup+0x58>)
   108f2:	2104      	movs	r1, #4
   108f4:	0020      	movs	r0, r4
   108f6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
   108f8:	4a0c      	ldr	r2, [pc, #48]	; (1092c <_usb_on_wakeup+0x5c>)
   108fa:	4b0d      	ldr	r3, [pc, #52]	; (10930 <_usb_on_wakeup+0x60>)
   108fc:	2106      	movs	r1, #6
   108fe:	0020      	movs	r0, r4
   10900:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   10902:	2106      	movs	r1, #6
   10904:	0020      	movs	r0, r4
   10906:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
   10908:	2003      	movs	r0, #3
   1090a:	4b0a      	ldr	r3, [pc, #40]	; (10934 <_usb_on_wakeup+0x64>)
   1090c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
   1090e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
   10910:	2110      	movs	r1, #16
   10912:	68da      	ldr	r2, [r3, #12]
   10914:	4211      	tst	r1, r2
   10916:	d0fc      	beq.n	10912 <_usb_on_wakeup+0x42>
   10918:	e7e5      	b.n	108e6 <_usb_on_wakeup+0x16>
   1091a:	46c0      	nop			; (mov r8, r8)
   1091c:	40000800 	.word	0x40000800
   10920:	20000dd4 	.word	0x20000dd4
   10924:	00011071 	.word	0x00011071
   10928:	00011051 	.word	0x00011051
   1092c:	00010871 	.word	0x00010871
   10930:	0001102d 	.word	0x0001102d
   10934:	000107b9 	.word	0x000107b9

00010938 <udd_ep_abort>:
{
   10938:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
   1093a:	0001      	movs	r1, r0
{
   1093c:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
   1093e:	4b10      	ldr	r3, [pc, #64]	; (10980 <udd_ep_abort+0x48>)
   10940:	4810      	ldr	r0, [pc, #64]	; (10984 <udd_ep_abort+0x4c>)
   10942:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
   10944:	237f      	movs	r3, #127	; 0x7f
   10946:	4023      	ands	r3, r4
   10948:	d017      	beq.n	1097a <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   1094a:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
   1094c:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   1094e:	4023      	ands	r3, r4
   10950:	09e2      	lsrs	r2, r4, #7
   10952:	005b      	lsls	r3, r3, #1
   10954:	189b      	adds	r3, r3, r2
   10956:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
   10958:	009a      	lsls	r2, r3, #2
   1095a:	18d3      	adds	r3, r2, r3
   1095c:	490a      	ldr	r1, [pc, #40]	; (10988 <udd_ep_abort+0x50>)
   1095e:	009b      	lsls	r3, r3, #2
   10960:	18ca      	adds	r2, r1, r3
   10962:	7c95      	ldrb	r5, [r2, #18]
   10964:	4228      	tst	r0, r5
   10966:	d007      	beq.n	10978 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
   10968:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
   1096a:	4385      	bics	r5, r0
   1096c:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
   1096e:	2b00      	cmp	r3, #0
   10970:	d002      	beq.n	10978 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
   10972:	68d1      	ldr	r1, [r2, #12]
   10974:	0022      	movs	r2, r4
   10976:	4798      	blx	r3
}
   10978:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
   1097a:	7c9b      	ldrb	r3, [r3, #18]
   1097c:	deff      	udf	#255	; 0xff
   1097e:	46c0      	nop			; (mov r8, r8)
   10980:	00011439 	.word	0x00011439
   10984:	20000dd4 	.word	0x20000dd4
   10988:	2000090c 	.word	0x2000090c

0001098c <udd_ep_set_halt.part.12>:
bool udd_ep_set_halt(udd_ep_id_t ep)
   1098c:	b510      	push	{r4, lr}
   1098e:	0004      	movs	r4, r0
	usb_device_endpoint_set_halt(&usb_device, ep);
   10990:	0001      	movs	r1, r0
   10992:	4b04      	ldr	r3, [pc, #16]	; (109a4 <udd_ep_set_halt.part.12+0x18>)
   10994:	4804      	ldr	r0, [pc, #16]	; (109a8 <udd_ep_set_halt.part.12+0x1c>)
   10996:	4798      	blx	r3
	udd_ep_abort(ep);
   10998:	0020      	movs	r0, r4
   1099a:	4b04      	ldr	r3, [pc, #16]	; (109ac <udd_ep_set_halt.part.12+0x20>)
   1099c:	4798      	blx	r3
}
   1099e:	2001      	movs	r0, #1
   109a0:	bd10      	pop	{r4, pc}
   109a2:	46c0      	nop			; (mov r8, r8)
   109a4:	00011489 	.word	0x00011489
   109a8:	20000dd4 	.word	0x20000dd4
   109ac:	00010939 	.word	0x00010939

000109b0 <_usb_ep0_on_tansfer_ok>:
{
   109b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109b2:	46ce      	mov	lr, r9
   109b4:	4647      	mov	r7, r8
   109b6:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
   109b8:	4c2e      	ldr	r4, [pc, #184]	; (10a74 <_usb_ep0_on_tansfer_ok+0xc4>)
   109ba:	7823      	ldrb	r3, [r4, #0]
   109bc:	2b01      	cmp	r3, #1
   109be:	d00c      	beq.n	109da <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
   109c0:	2b02      	cmp	r3, #2
   109c2:	d02b      	beq.n	10a1c <_usb_ep0_on_tansfer_ok+0x6c>
			if (NULL != udd_g_ctrlreq.callback) {
   109c4:	4b2c      	ldr	r3, [pc, #176]	; (10a78 <_usb_ep0_on_tansfer_ok+0xc8>)
   109c6:	691b      	ldr	r3, [r3, #16]
   109c8:	2b00      	cmp	r3, #0
   109ca:	d000      	beq.n	109ce <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
   109cc:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
   109ce:	2300      	movs	r3, #0
   109d0:	7023      	strb	r3, [r4, #0]
}
   109d2:	bc0c      	pop	{r2, r3}
   109d4:	4690      	mov	r8, r2
   109d6:	4699      	mov	r9, r3
   109d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
   109da:	4a28      	ldr	r2, [pc, #160]	; (10a7c <_usb_ep0_on_tansfer_ok+0xcc>)
   109dc:	4e26      	ldr	r6, [pc, #152]	; (10a78 <_usb_ep0_on_tansfer_ok+0xc8>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
   109de:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
   109e0:	8810      	ldrh	r0, [r2, #0]
   109e2:	89b3      	ldrh	r3, [r6, #12]
   109e4:	19c5      	adds	r5, r0, r7
   109e6:	4690      	mov	r8, r2
   109e8:	42ab      	cmp	r3, r5
   109ea:	db1a      	blt.n	10a22 <_usb_ep0_on_tansfer_ok+0x72>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
   109ec:	68b3      	ldr	r3, [r6, #8]
   109ee:	003a      	movs	r2, r7
   109f0:	469c      	mov	ip, r3
   109f2:	4b23      	ldr	r3, [pc, #140]	; (10a80 <_usb_ep0_on_tansfer_ok+0xd0>)
   109f4:	4460      	add	r0, ip
   109f6:	0019      	movs	r1, r3
   109f8:	4699      	mov	r9, r3
   109fa:	4b22      	ldr	r3, [pc, #136]	; (10a84 <_usb_ep0_on_tansfer_ok+0xd4>)
   109fc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
   109fe:	4643      	mov	r3, r8
   10a00:	b2ad      	uxth	r5, r5
   10a02:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
   10a04:	2f40      	cmp	r7, #64	; 0x40
   10a06:	d010      	beq.n	10a2a <_usb_ep0_on_tansfer_ok+0x7a>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   10a08:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
   10a0a:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d002      	beq.n	10a16 <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
   10a10:	4798      	blx	r3
   10a12:	2800      	cmp	r0, #0
   10a14:	d027      	beq.n	10a66 <_usb_ep0_on_tansfer_ok+0xb6>
		udd_ctrl_send_zlp_in();
   10a16:	4b1c      	ldr	r3, [pc, #112]	; (10a88 <_usb_ep0_on_tansfer_ok+0xd8>)
   10a18:	4798      	blx	r3
   10a1a:	e7da      	b.n	109d2 <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
   10a1c:	4b1b      	ldr	r3, [pc, #108]	; (10a8c <_usb_ep0_on_tansfer_ok+0xdc>)
   10a1e:	4798      	blx	r3
   10a20:	e7d7      	b.n	109d2 <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
   10a22:	1a1f      	subs	r7, r3, r0
   10a24:	b2bf      	uxth	r7, r7
   10a26:	19c5      	adds	r5, r0, r7
   10a28:	e7e0      	b.n	109ec <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
   10a2a:	4f19      	ldr	r7, [pc, #100]	; (10a90 <_usb_ep0_on_tansfer_ok+0xe0>)
   10a2c:	88f2      	ldrh	r2, [r6, #6]
   10a2e:	883b      	ldrh	r3, [r7, #0]
   10a30:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
   10a32:	429a      	cmp	r2, r3
   10a34:	dde8      	ble.n	10a08 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
   10a36:	89b3      	ldrh	r3, [r6, #12]
   10a38:	42ab      	cmp	r3, r5
   10a3a:	d10d      	bne.n	10a58 <_usb_ep0_on_tansfer_ok+0xa8>
		if (!udd_g_ctrlreq.over_under_run) {
   10a3c:	6973      	ldr	r3, [r6, #20]
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d011      	beq.n	10a66 <_usb_ep0_on_tansfer_ok+0xb6>
		if (!udd_g_ctrlreq.over_under_run()) {
   10a42:	4798      	blx	r3
   10a44:	2800      	cmp	r0, #0
   10a46:	d00e      	beq.n	10a66 <_usb_ep0_on_tansfer_ok+0xb6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
   10a48:	4642      	mov	r2, r8
   10a4a:	883b      	ldrh	r3, [r7, #0]
   10a4c:	8812      	ldrh	r2, [r2, #0]
   10a4e:	189b      	adds	r3, r3, r2
   10a50:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
   10a52:	4642      	mov	r2, r8
   10a54:	2300      	movs	r3, #0
   10a56:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10a58:	2340      	movs	r3, #64	; 0x40
   10a5a:	464a      	mov	r2, r9
   10a5c:	2100      	movs	r1, #0
   10a5e:	4c0d      	ldr	r4, [pc, #52]	; (10a94 <_usb_ep0_on_tansfer_ok+0xe4>)
   10a60:	480d      	ldr	r0, [pc, #52]	; (10a98 <_usb_ep0_on_tansfer_ok+0xe8>)
   10a62:	47a0      	blx	r4
   10a64:	e7b5      	b.n	109d2 <_usb_ep0_on_tansfer_ok+0x22>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   10a66:	2305      	movs	r3, #5
   10a68:	2000      	movs	r0, #0
   10a6a:	7023      	strb	r3, [r4, #0]
   10a6c:	4b0b      	ldr	r3, [pc, #44]	; (10a9c <_usb_ep0_on_tansfer_ok+0xec>)
   10a6e:	4798      	blx	r3
   10a70:	e7af      	b.n	109d2 <_usb_ep0_on_tansfer_ok+0x22>
   10a72:	46c0      	nop			; (mov r8, r8)
   10a74:	2000090a 	.word	0x2000090a
   10a78:	20000f3c 	.word	0x20000f3c
   10a7c:	20000906 	.word	0x20000906
   10a80:	20000f54 	.word	0x20000f54
   10a84:	00013595 	.word	0x00013595
   10a88:	000105b1 	.word	0x000105b1
   10a8c:	00010635 	.word	0x00010635
   10a90:	20000908 	.word	0x20000908
   10a94:	00011571 	.word	0x00011571
   10a98:	20000dd4 	.word	0x20000dd4
   10a9c:	0001098d 	.word	0x0001098d

00010aa0 <udd_is_high_speed>:
   10aa0:	2000      	movs	r0, #0
   10aa2:	4770      	bx	lr

00010aa4 <udd_get_frame_number>:
{
   10aa4:	4b02      	ldr	r3, [pc, #8]	; (10ab0 <udd_get_frame_number+0xc>)
}
   10aa6:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
   10aa8:	8a18      	ldrh	r0, [r3, #16]
   10aaa:	0480      	lsls	r0, r0, #18
   10aac:	0d40      	lsrs	r0, r0, #21
   10aae:	4770      	bx	lr
   10ab0:	20000dd4 	.word	0x20000dd4

00010ab4 <udd_get_micro_frame_number>:
{
   10ab4:	4b02      	ldr	r3, [pc, #8]	; (10ac0 <udd_get_micro_frame_number+0xc>)
}
   10ab6:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
   10ab8:	8a18      	ldrh	r0, [r3, #16]
   10aba:	b280      	uxth	r0, r0
   10abc:	4770      	bx	lr
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	20000dd4 	.word	0x20000dd4

00010ac4 <udd_ep_free>:
{
   10ac4:	b570      	push	{r4, r5, r6, lr}
   10ac6:	0004      	movs	r4, r0
   10ac8:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
   10aca:	ad01      	add	r5, sp, #4
   10acc:	0028      	movs	r0, r5
   10ace:	4b0d      	ldr	r3, [pc, #52]	; (10b04 <udd_ep_free+0x40>)
   10ad0:	4798      	blx	r3
	udd_ep_abort(ep);
   10ad2:	0020      	movs	r0, r4
   10ad4:	4b0c      	ldr	r3, [pc, #48]	; (10b08 <udd_ep_free+0x44>)
   10ad6:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
   10ad8:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   10ada:	4e0c      	ldr	r6, [pc, #48]	; (10b0c <udd_ep_free+0x48>)
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
   10adc:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   10ade:	0029      	movs	r1, r5
   10ae0:	0030      	movs	r0, r6
   10ae2:	4b0b      	ldr	r3, [pc, #44]	; (10b10 <udd_ep_free+0x4c>)
	config_ep.ep_address = ep;
   10ae4:	702c      	strb	r4, [r5, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   10ae6:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   10ae8:	210f      	movs	r1, #15
   10aea:	2200      	movs	r2, #0
   10aec:	4021      	ands	r1, r4
   10aee:	0030      	movs	r0, r6
   10af0:	4b08      	ldr	r3, [pc, #32]	; (10b14 <udd_ep_free+0x50>)
   10af2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   10af4:	2200      	movs	r2, #0
   10af6:	0021      	movs	r1, r4
   10af8:	0030      	movs	r0, r6
   10afa:	4b07      	ldr	r3, [pc, #28]	; (10b18 <udd_ep_free+0x54>)
   10afc:	4798      	blx	r3
}
   10afe:	b002      	add	sp, #8
   10b00:	bd70      	pop	{r4, r5, r6, pc}
   10b02:	46c0      	nop			; (mov r8, r8)
   10b04:	0001123d 	.word	0x0001123d
   10b08:	00010939 	.word	0x00010939
   10b0c:	20000dd4 	.word	0x20000dd4
   10b10:	0001124d 	.word	0x0001124d
   10b14:	000110b5 	.word	0x000110b5
   10b18:	0001118d 	.word	0x0001118d

00010b1c <udd_ep_alloc>:
{
   10b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b1e:	46c6      	mov	lr, r8
   10b20:	0005      	movs	r5, r0
   10b22:	b500      	push	{lr}
   10b24:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
   10b26:	ac01      	add	r4, sp, #4
   10b28:	0020      	movs	r0, r4
   10b2a:	4b37      	ldr	r3, [pc, #220]	; (10c08 <udd_ep_alloc+0xec>)
{
   10b2c:	000e      	movs	r6, r1
   10b2e:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
   10b30:	4798      	blx	r3
	config_ep.ep_address = ep;
   10b32:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
   10b34:	2f08      	cmp	r7, #8
   10b36:	d820      	bhi.n	10b7a <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
   10b38:	2300      	movs	r3, #0
   10b3a:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
   10b3c:	237f      	movs	r3, #127	; 0x7f
   10b3e:	402b      	ands	r3, r5
   10b40:	d019      	beq.n	10b76 <udd_ep_alloc+0x5a>
   10b42:	230f      	movs	r3, #15
   10b44:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10b46:	09ea      	lsrs	r2, r5, #7
   10b48:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
   10b4a:	005b      	lsls	r3, r3, #1
   10b4c:	189b      	adds	r3, r3, r2
   10b4e:	3b02      	subs	r3, #2
   10b50:	009a      	lsls	r2, r3, #2
   10b52:	18d3      	adds	r3, r2, r3
   10b54:	4a2d      	ldr	r2, [pc, #180]	; (10c0c <udd_ep_alloc+0xf0>)
   10b56:	009b      	lsls	r3, r3, #2
   10b58:	18d3      	adds	r3, r2, r3
   10b5a:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
   10b5c:	2303      	movs	r3, #3
   10b5e:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
   10b60:	2e01      	cmp	r6, #1
   10b62:	d030      	beq.n	10bc6 <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
   10b64:	2e02      	cmp	r6, #2
   10b66:	d015      	beq.n	10b94 <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
   10b68:	2e03      	cmp	r6, #3
   10b6a:	d012      	beq.n	10b92 <udd_ep_alloc+0x76>
		return false;
   10b6c:	2000      	movs	r0, #0
}
   10b6e:	b002      	add	sp, #8
   10b70:	bc04      	pop	{r2}
   10b72:	4690      	mov	r8, r2
   10b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
   10b76:	821b      	strh	r3, [r3, #16]
   10b78:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
   10b7a:	2f10      	cmp	r7, #16
   10b7c:	d802      	bhi.n	10b84 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
   10b7e:	2301      	movs	r3, #1
   10b80:	7063      	strb	r3, [r4, #1]
   10b82:	e7db      	b.n	10b3c <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
   10b84:	2f20      	cmp	r7, #32
   10b86:	d921      	bls.n	10bcc <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
   10b88:	2f40      	cmp	r7, #64	; 0x40
   10b8a:	d822      	bhi.n	10bd2 <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
   10b8c:	2303      	movs	r3, #3
   10b8e:	7063      	strb	r3, [r4, #1]
   10b90:	e7d4      	b.n	10b3c <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
   10b92:	2304      	movs	r3, #4
   10b94:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
   10b96:	4e1e      	ldr	r6, [pc, #120]	; (10c10 <udd_ep_alloc+0xf4>)
   10b98:	0021      	movs	r1, r4
   10b9a:	0030      	movs	r0, r6
   10b9c:	4b1d      	ldr	r3, [pc, #116]	; (10c14 <udd_ep_alloc+0xf8>)
   10b9e:	4798      	blx	r3
   10ba0:	2800      	cmp	r0, #0
   10ba2:	d1e3      	bne.n	10b6c <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
   10ba4:	4b1c      	ldr	r3, [pc, #112]	; (10c18 <udd_ep_alloc+0xfc>)
   10ba6:	2200      	movs	r2, #0
   10ba8:	4641      	mov	r1, r8
   10baa:	4c1c      	ldr	r4, [pc, #112]	; (10c1c <udd_ep_alloc+0x100>)
   10bac:	0030      	movs	r0, r6
   10bae:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   10bb0:	2200      	movs	r2, #0
   10bb2:	0029      	movs	r1, r5
   10bb4:	4c1a      	ldr	r4, [pc, #104]	; (10c20 <udd_ep_alloc+0x104>)
   10bb6:	0030      	movs	r0, r6
   10bb8:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
   10bba:	2201      	movs	r2, #1
   10bbc:	0029      	movs	r1, r5
   10bbe:	0030      	movs	r0, r6
   10bc0:	47a0      	blx	r4
	return true;
   10bc2:	2001      	movs	r0, #1
   10bc4:	e7d3      	b.n	10b6e <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
   10bc6:	3b01      	subs	r3, #1
   10bc8:	70e3      	strb	r3, [r4, #3]
   10bca:	e7e4      	b.n	10b96 <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
   10bcc:	2302      	movs	r3, #2
   10bce:	7063      	strb	r3, [r4, #1]
   10bd0:	e7b4      	b.n	10b3c <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
   10bd2:	2f80      	cmp	r7, #128	; 0x80
   10bd4:	d906      	bls.n	10be4 <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
   10bd6:	2380      	movs	r3, #128	; 0x80
   10bd8:	005b      	lsls	r3, r3, #1
   10bda:	429f      	cmp	r7, r3
   10bdc:	d805      	bhi.n	10bea <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
   10bde:	3bfb      	subs	r3, #251	; 0xfb
   10be0:	7063      	strb	r3, [r4, #1]
   10be2:	e7ab      	b.n	10b3c <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
   10be4:	2304      	movs	r3, #4
   10be6:	7063      	strb	r3, [r4, #1]
   10be8:	e7a8      	b.n	10b3c <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
   10bea:	2380      	movs	r3, #128	; 0x80
   10bec:	009b      	lsls	r3, r3, #2
   10bee:	429f      	cmp	r7, r3
   10bf0:	d803      	bhi.n	10bfa <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
   10bf2:	3bfb      	subs	r3, #251	; 0xfb
   10bf4:	3bff      	subs	r3, #255	; 0xff
   10bf6:	7063      	strb	r3, [r4, #1]
   10bf8:	e7a0      	b.n	10b3c <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
   10bfa:	4b0a      	ldr	r3, [pc, #40]	; (10c24 <udd_ep_alloc+0x108>)
   10bfc:	429f      	cmp	r7, r3
   10bfe:	d8b5      	bhi.n	10b6c <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
   10c00:	2307      	movs	r3, #7
   10c02:	7063      	strb	r3, [r4, #1]
   10c04:	e79a      	b.n	10b3c <udd_ep_alloc+0x20>
   10c06:	46c0      	nop			; (mov r8, r8)
   10c08:	0001123d 	.word	0x0001123d
   10c0c:	2000090c 	.word	0x2000090c
   10c10:	20000dd4 	.word	0x20000dd4
   10c14:	0001124d 	.word	0x0001124d
   10c18:	000102c9 	.word	0x000102c9
   10c1c:	0001108d 	.word	0x0001108d
   10c20:	000110dd 	.word	0x000110dd
   10c24:	000003ff 	.word	0x000003ff

00010c28 <udd_ep_is_halted>:
{
   10c28:	b510      	push	{r4, lr}
   10c2a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
   10c2c:	4b01      	ldr	r3, [pc, #4]	; (10c34 <udd_ep_is_halted+0xc>)
   10c2e:	4802      	ldr	r0, [pc, #8]	; (10c38 <udd_ep_is_halted+0x10>)
   10c30:	4798      	blx	r3
}
   10c32:	bd10      	pop	{r4, pc}
   10c34:	00011469 	.word	0x00011469
   10c38:	20000dd4 	.word	0x20000dd4

00010c3c <udd_ep_set_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
   10c3c:	230f      	movs	r3, #15
{
   10c3e:	b510      	push	{r4, lr}
	if (USB_DEVICE_MAX_EP < ep_num) {
   10c40:	4003      	ands	r3, r0
		return false;
   10c42:	2200      	movs	r2, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
   10c44:	2b03      	cmp	r3, #3
   10c46:	d802      	bhi.n	10c4e <udd_ep_set_halt+0x12>
   10c48:	4b02      	ldr	r3, [pc, #8]	; (10c54 <udd_ep_set_halt+0x18>)
   10c4a:	4798      	blx	r3
   10c4c:	0002      	movs	r2, r0
}
   10c4e:	0010      	movs	r0, r2
   10c50:	bd10      	pop	{r4, pc}
   10c52:	46c0      	nop			; (mov r8, r8)
   10c54:	0001098d 	.word	0x0001098d

00010c58 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   10c58:	230f      	movs	r3, #15
{
   10c5a:	b570      	push	{r4, r5, r6, lr}
   10c5c:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   10c5e:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
   10c60:	2b03      	cmp	r3, #3
   10c62:	d81f      	bhi.n	10ca4 <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
   10c64:	247f      	movs	r4, #127	; 0x7f
   10c66:	4004      	ands	r4, r0
   10c68:	d104      	bne.n	10c74 <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
   10c6a:	480f      	ldr	r0, [pc, #60]	; (10ca8 <udd_ep_clear_halt+0x50>)
   10c6c:	4b0f      	ldr	r3, [pc, #60]	; (10cac <udd_ep_clear_halt+0x54>)
   10c6e:	4798      	blx	r3
	if (ptr_job->busy == true) {
   10c70:	7ca3      	ldrb	r3, [r4, #18]
   10c72:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10c74:	005c      	lsls	r4, r3, #1
   10c76:	09c3      	lsrs	r3, r0, #7
   10c78:	18e4      	adds	r4, r4, r3
   10c7a:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
   10c7c:	4b0b      	ldr	r3, [pc, #44]	; (10cac <udd_ep_clear_halt+0x54>)
   10c7e:	480a      	ldr	r0, [pc, #40]	; (10ca8 <udd_ep_clear_halt+0x50>)
   10c80:	4798      	blx	r3
	if (ptr_job->busy == true) {
   10c82:	00a3      	lsls	r3, r4, #2
   10c84:	191c      	adds	r4, r3, r4
   10c86:	4a0a      	ldr	r2, [pc, #40]	; (10cb0 <udd_ep_clear_halt+0x58>)
   10c88:	00a4      	lsls	r4, r4, #2
   10c8a:	1913      	adds	r3, r2, r4
   10c8c:	7c99      	ldrb	r1, [r3, #18]
	return true;
   10c8e:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
   10c90:	07c9      	lsls	r1, r1, #31
   10c92:	d401      	bmi.n	10c98 <udd_ep_clear_halt+0x40>
}
   10c94:	0028      	movs	r0, r5
   10c96:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
   10c98:	7c99      	ldrb	r1, [r3, #18]
   10c9a:	43a9      	bics	r1, r5
   10c9c:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
   10c9e:	58a3      	ldr	r3, [r4, r2]
   10ca0:	4798      	blx	r3
   10ca2:	e7f7      	b.n	10c94 <udd_ep_clear_halt+0x3c>
		return false;
   10ca4:	2500      	movs	r5, #0
   10ca6:	e7f5      	b.n	10c94 <udd_ep_clear_halt+0x3c>
   10ca8:	20000dd4 	.word	0x20000dd4
   10cac:	000114a9 	.word	0x000114a9
   10cb0:	2000090c 	.word	0x2000090c

00010cb4 <udd_ep_run>:
{
   10cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cb6:	4645      	mov	r5, r8
   10cb8:	4657      	mov	r7, sl
   10cba:	464e      	mov	r6, r9
   10cbc:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
   10cbe:	240f      	movs	r4, #15
{
   10cc0:	b5e0      	push	{r5, r6, r7, lr}
   10cc2:	4688      	mov	r8, r1
   10cc4:	b087      	sub	sp, #28
   10cc6:	0005      	movs	r5, r0
   10cc8:	4691      	mov	r9, r2
   10cca:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
   10ccc:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
   10cce:	2c03      	cmp	r4, #3
   10cd0:	d907      	bls.n	10ce2 <udd_ep_run+0x2e>
		return false;
   10cd2:	2000      	movs	r0, #0
}
   10cd4:	b007      	add	sp, #28
   10cd6:	bc3c      	pop	{r2, r3, r4, r5}
   10cd8:	4690      	mov	r8, r2
   10cda:	4699      	mov	r9, r3
   10cdc:	46a2      	mov	sl, r4
   10cde:	46ab      	mov	fp, r5
   10ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
   10ce2:	4b76      	ldr	r3, [pc, #472]	; (10ebc <udd_ep_run+0x208>)
   10ce4:	0001      	movs	r1, r0
   10ce6:	469b      	mov	fp, r3
   10ce8:	0018      	movs	r0, r3
   10cea:	4b75      	ldr	r3, [pc, #468]	; (10ec0 <udd_ep_run+0x20c>)
   10cec:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
   10cee:	2800      	cmp	r0, #0
   10cf0:	d1ef      	bne.n	10cd2 <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
   10cf2:	237f      	movs	r3, #127	; 0x7f
   10cf4:	402b      	ands	r3, r5
   10cf6:	d10c      	bne.n	10d12 <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10cf8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10cfc:	4251      	negs	r1, r2
   10cfe:	414a      	adcs	r2, r1
   10d00:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   10d02:	b672      	cpsid	i
   10d04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10d08:	4a6e      	ldr	r2, [pc, #440]	; (10ec4 <udd_ep_run+0x210>)
   10d0a:	7013      	strb	r3, [r2, #0]
	return flags;
   10d0c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
   10d0e:	7c9b      	ldrb	r3, [r3, #18]
   10d10:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10d12:	b26b      	sxtb	r3, r5
   10d14:	001a      	movs	r2, r3
   10d16:	9303      	str	r3, [sp, #12]
   10d18:	0fd2      	lsrs	r2, r2, #31
   10d1a:	0063      	lsls	r3, r4, #1
   10d1c:	189e      	adds	r6, r3, r2
   10d1e:	1eb1      	subs	r1, r6, #2
   10d20:	000e      	movs	r6, r1
   10d22:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10d24:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10d28:	425a      	negs	r2, r3
   10d2a:	4153      	adcs	r3, r2
   10d2c:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   10d2e:	b672      	cpsid	i
   10d30:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
   10d34:	4964      	ldr	r1, [pc, #400]	; (10ec8 <udd_ep_run+0x214>)
   10d36:	46b4      	mov	ip, r6
   10d38:	468a      	mov	sl, r1
   10d3a:	2101      	movs	r1, #1
	cpu_irq_disable();
   10d3c:	4a61      	ldr	r2, [pc, #388]	; (10ec4 <udd_ep_run+0x210>)
   10d3e:	7010      	strb	r0, [r2, #0]
	return flags;
   10d40:	9b05      	ldr	r3, [sp, #20]
   10d42:	9300      	str	r3, [sp, #0]
   10d44:	00b3      	lsls	r3, r6, #2
   10d46:	9302      	str	r3, [sp, #8]
   10d48:	4463      	add	r3, ip
   10d4a:	009b      	lsls	r3, r3, #2
   10d4c:	4453      	add	r3, sl
   10d4e:	7c9e      	ldrb	r6, [r3, #18]
   10d50:	4231      	tst	r1, r6
   10d52:	d153      	bne.n	10dfc <udd_ep_run+0x148>
	ptr_job->busy = true;
   10d54:	2601      	movs	r6, #1
   10d56:	46b4      	mov	ip, r6
   10d58:	4666      	mov	r6, ip
   10d5a:	7c98      	ldrb	r0, [r3, #18]
   10d5c:	4330      	orrs	r0, r6
   10d5e:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
   10d60:	9b00      	ldr	r3, [sp, #0]
   10d62:	2b00      	cmp	r3, #0
   10d64:	d161      	bne.n	10e2a <udd_ep_run+0x176>
	ptr_job->buf = buf;
   10d66:	9a01      	ldr	r2, [sp, #4]
   10d68:	4649      	mov	r1, r9
   10d6a:	4694      	mov	ip, r2
   10d6c:	4652      	mov	r2, sl
   10d6e:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
   10d70:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
   10d72:	4463      	add	r3, ip
   10d74:	009b      	lsls	r3, r3, #2
   10d76:	18d2      	adds	r2, r2, r3
   10d78:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
   10d7a:	2100      	movs	r1, #0
   10d7c:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
   10d7e:	4651      	mov	r1, sl
   10d80:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
   10d82:	0011      	movs	r1, r2
   10d84:	3110      	adds	r1, #16
   10d86:	788e      	ldrb	r6, [r1, #2]
   10d88:	4643      	mov	r3, r8
   10d8a:	46b0      	mov	r8, r6
   10d8c:	2602      	movs	r6, #2
   10d8e:	2001      	movs	r0, #1
   10d90:	46b4      	mov	ip, r6
   10d92:	4003      	ands	r3, r0
   10d94:	4646      	mov	r6, r8
   10d96:	4660      	mov	r0, ip
   10d98:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
   10d9a:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
   10d9c:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
   10d9e:	4333      	orrs	r3, r6
   10da0:	4383      	bics	r3, r0
   10da2:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
   10da4:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
   10da6:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
   10da8:	2b00      	cmp	r3, #0
   10daa:	db43      	blt.n	10e34 <udd_ep_run+0x180>
		if (0 != ptr_job->buf_size) {
   10dac:	2f00      	cmp	r7, #0
   10dae:	d02e      	beq.n	10e0e <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   10db0:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10db2:	4d46      	ldr	r5, [pc, #280]	; (10ecc <udd_ep_run+0x218>)
			next_trans = ptr_job->buf_size;
   10db4:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   10db6:	4698      	mov	r8, r3
   10db8:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10dba:	42af      	cmp	r7, r5
   10dbc:	d96e      	bls.n	10e9c <udd_ep_run+0x1e8>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   10dbe:	4b44      	ldr	r3, [pc, #272]	; (10ed0 <udd_ep_run+0x21c>)
   10dc0:	0028      	movs	r0, r5
   10dc2:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
   10dc4:	1a6b      	subs	r3, r5, r1
   10dc6:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   10dc8:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
   10dca:	4543      	cmp	r3, r8
   10dcc:	d20e      	bcs.n	10dec <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
   10dce:	9b02      	ldr	r3, [sp, #8]
   10dd0:	2104      	movs	r1, #4
   10dd2:	469c      	mov	ip, r3
   10dd4:	9b01      	ldr	r3, [sp, #4]
   10dd6:	4463      	add	r3, ip
   10dd8:	009e      	lsls	r6, r3, #2
   10dda:	4456      	add	r6, sl
   10ddc:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
   10dde:	4b3d      	ldr	r3, [pc, #244]	; (10ed4 <udd_ep_run+0x220>)
				ptr_job->b_use_out_cache_buffer = true;
   10de0:	430a      	orrs	r2, r1
   10de2:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
   10de4:	1e62      	subs	r2, r4, #1
   10de6:	0192      	lsls	r2, r2, #6
   10de8:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   10dea:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   10dec:	0021      	movs	r1, r4
   10dee:	4658      	mov	r0, fp
   10df0:	4c39      	ldr	r4, [pc, #228]	; (10ed8 <udd_ep_run+0x224>)
   10df2:	47a0      	blx	r4
				return (STATUS_OK ==
   10df4:	4243      	negs	r3, r0
   10df6:	4158      	adcs	r0, r3
   10df8:	b2c0      	uxtb	r0, r0
   10dfa:	e76b      	b.n	10cd4 <udd_ep_run+0x20>
   10dfc:	9b00      	ldr	r3, [sp, #0]
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d100      	bne.n	10e04 <udd_ep_run+0x150>
   10e02:	e766      	b.n	10cd2 <udd_ep_run+0x1e>
		cpu_irq_enable();
   10e04:	7011      	strb	r1, [r2, #0]
   10e06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10e0a:	b662      	cpsie	i
   10e0c:	e762      	b.n	10cd4 <udd_ep_run+0x20>
			ptr_job->busy = false;
   10e0e:	2201      	movs	r2, #1
   10e10:	788b      	ldrb	r3, [r1, #2]
   10e12:	4393      	bics	r3, r2
   10e14:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
   10e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d004      	beq.n	10e26 <udd_ep_run+0x172>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
   10e1c:	002a      	movs	r2, r5
   10e1e:	2100      	movs	r1, #0
   10e20:	2000      	movs	r0, #0
   10e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e24:	4798      	blx	r3
			return true;
   10e26:	2001      	movs	r0, #1
   10e28:	e754      	b.n	10cd4 <udd_ep_run+0x20>
   10e2a:	7011      	strb	r1, [r2, #0]
   10e2c:	f3bf 8f5f 	dmb	sy
   10e30:	b662      	cpsie	i
   10e32:	e798      	b.n	10d66 <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
   10e34:	2f00      	cmp	r7, #0
   10e36:	d037      	beq.n	10ea8 <udd_ep_run+0x1f4>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10e38:	4d24      	ldr	r5, [pc, #144]	; (10ecc <udd_ep_run+0x218>)
			next_trans = ptr_job->buf_size;
   10e3a:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10e3c:	42af      	cmp	r7, r5
   10e3e:	d905      	bls.n	10e4c <udd_ep_run+0x198>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   10e40:	8a11      	ldrh	r1, [r2, #16]
   10e42:	0028      	movs	r0, r5
   10e44:	4b22      	ldr	r3, [pc, #136]	; (10ed0 <udd_ep_run+0x21c>)
   10e46:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
   10e48:	1a6f      	subs	r7, r5, r1
   10e4a:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
   10e4c:	9a01      	ldr	r2, [sp, #4]
   10e4e:	9b02      	ldr	r3, [sp, #8]
   10e50:	4694      	mov	ip, r2
   10e52:	4463      	add	r3, ip
   10e54:	009b      	lsls	r3, r3, #2
   10e56:	4453      	add	r3, sl
   10e58:	7c99      	ldrb	r1, [r3, #18]
   10e5a:	2200      	movs	r2, #0
   10e5c:	0789      	lsls	r1, r1, #30
   10e5e:	d507      	bpl.n	10e70 <udd_ep_run+0x1bc>
					(0 == (next_trans % ptr_job->ep_size));
   10e60:	8a19      	ldrh	r1, [r3, #16]
   10e62:	0038      	movs	r0, r7
   10e64:	4b1d      	ldr	r3, [pc, #116]	; (10edc <udd_ep_run+0x228>)
   10e66:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
   10e68:	b289      	uxth	r1, r1
   10e6a:	424a      	negs	r2, r1
   10e6c:	414a      	adcs	r2, r1
   10e6e:	b2d2      	uxtb	r2, r2
   10e70:	9901      	ldr	r1, [sp, #4]
   10e72:	2002      	movs	r0, #2
   10e74:	468c      	mov	ip, r1
   10e76:	9b02      	ldr	r3, [sp, #8]
   10e78:	0051      	lsls	r1, r2, #1
   10e7a:	4463      	add	r3, ip
   10e7c:	009b      	lsls	r3, r3, #2
   10e7e:	4453      	add	r3, sl
   10e80:	7c9a      	ldrb	r2, [r3, #18]
   10e82:	4382      	bics	r2, r0
   10e84:	430a      	orrs	r2, r1
   10e86:	749a      	strb	r2, [r3, #18]
   10e88:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
   10e8a:	0021      	movs	r1, r4
   10e8c:	464a      	mov	r2, r9
   10e8e:	4658      	mov	r0, fp
   10e90:	4c13      	ldr	r4, [pc, #76]	; (10ee0 <udd_ep_run+0x22c>)
   10e92:	47a0      	blx	r4
		return (STATUS_OK ==
   10e94:	4243      	negs	r3, r0
   10e96:	4158      	adcs	r0, r3
   10e98:	b2c0      	uxtb	r0, r0
   10e9a:	e71b      	b.n	10cd4 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
   10e9c:	0038      	movs	r0, r7
   10e9e:	4b0f      	ldr	r3, [pc, #60]	; (10edc <udd_ep_run+0x228>)
   10ea0:	4798      	blx	r3
   10ea2:	1a7f      	subs	r7, r7, r1
   10ea4:	b2bb      	uxth	r3, r7
   10ea6:	e78f      	b.n	10dc8 <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
   10ea8:	7c93      	ldrb	r3, [r2, #18]
   10eaa:	4662      	mov	r2, ip
   10eac:	421a      	tst	r2, r3
   10eae:	d0ae      	beq.n	10e0e <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
   10eb0:	788b      	ldrb	r3, [r1, #2]
   10eb2:	4393      	bics	r3, r2
   10eb4:	708b      	strb	r3, [r1, #2]
   10eb6:	2300      	movs	r3, #0
   10eb8:	e7e7      	b.n	10e8a <udd_ep_run+0x1d6>
   10eba:	46c0      	nop			; (mov r8, r8)
   10ebc:	20000dd4 	.word	0x20000dd4
   10ec0:	00011469 	.word	0x00011469
   10ec4:	200001f9 	.word	0x200001f9
   10ec8:	2000090c 	.word	0x2000090c
   10ecc:	00001fff 	.word	0x00001fff
   10ed0:	000134cd 	.word	0x000134cd
   10ed4:	20000d14 	.word	0x20000d14
   10ed8:	00011571 	.word	0x00011571
   10edc:	000132f9 	.word	0x000132f9
   10ee0:	00011525 	.word	0x00011525

00010ee4 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
   10ee4:	2280      	movs	r2, #128	; 0x80
   10ee6:	4b02      	ldr	r3, [pc, #8]	; (10ef0 <udd_set_address+0xc>)
   10ee8:	4310      	orrs	r0, r2
   10eea:	681b      	ldr	r3, [r3, #0]
   10eec:	7298      	strb	r0, [r3, #10]
}
   10eee:	4770      	bx	lr
   10ef0:	20000dd4 	.word	0x20000dd4

00010ef4 <udd_getaddress>:
{
   10ef4:	4b02      	ldr	r3, [pc, #8]	; (10f00 <udd_getaddress+0xc>)
}
   10ef6:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
   10ef8:	7a98      	ldrb	r0, [r3, #10]
   10efa:	0640      	lsls	r0, r0, #25
   10efc:	0e40      	lsrs	r0, r0, #25
   10efe:	4770      	bx	lr
   10f00:	20000dd4 	.word	0x20000dd4

00010f04 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   10f04:	4b01      	ldr	r3, [pc, #4]	; (10f0c <udd_set_setup_payload+0x8>)
   10f06:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   10f08:	8199      	strh	r1, [r3, #12]
}
   10f0a:	4770      	bx	lr
   10f0c:	20000f3c 	.word	0x20000f3c

00010f10 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
   10f10:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
   10f12:	2003      	movs	r0, #3
   10f14:	4b16      	ldr	r3, [pc, #88]	; (10f70 <udd_attach+0x60>)
   10f16:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   10f18:	2101      	movs	r1, #1
   10f1a:	4c16      	ldr	r4, [pc, #88]	; (10f74 <udd_attach+0x64>)
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
   10f1c:	4e16      	ldr	r6, [pc, #88]	; (10f78 <udd_attach+0x68>)
   10f1e:	6822      	ldr	r2, [r4, #0]
   10f20:	0020      	movs	r0, r4
   10f22:	8913      	ldrh	r3, [r2, #8]
   10f24:	438b      	bics	r3, r1
   10f26:	8113      	strh	r3, [r2, #8]
   10f28:	3103      	adds	r1, #3
   10f2a:	4a14      	ldr	r2, [pc, #80]	; (10f7c <udd_attach+0x6c>)
   10f2c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
   10f2e:	4a14      	ldr	r2, [pc, #80]	; (10f80 <udd_attach+0x70>)
   10f30:	2100      	movs	r1, #0
   10f32:	0020      	movs	r0, r4
   10f34:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
   10f36:	4a13      	ldr	r2, [pc, #76]	; (10f84 <udd_attach+0x74>)
   10f38:	2101      	movs	r1, #1
   10f3a:	0020      	movs	r0, r4
   10f3c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
   10f3e:	4a12      	ldr	r2, [pc, #72]	; (10f88 <udd_attach+0x78>)
   10f40:	2102      	movs	r1, #2
   10f42:	0020      	movs	r0, r4
   10f44:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   10f46:	4d11      	ldr	r5, [pc, #68]	; (10f8c <udd_attach+0x7c>)
   10f48:	2104      	movs	r1, #4
   10f4a:	0020      	movs	r0, r4
   10f4c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
   10f4e:	2100      	movs	r1, #0
   10f50:	0020      	movs	r0, r4
   10f52:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
   10f54:	2101      	movs	r1, #1
   10f56:	0020      	movs	r0, r4
   10f58:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   10f5a:	2102      	movs	r1, #2
   10f5c:	0020      	movs	r0, r4
   10f5e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
   10f60:	4a0b      	ldr	r2, [pc, #44]	; (10f90 <udd_attach+0x80>)
   10f62:	2106      	movs	r1, #6
   10f64:	0020      	movs	r0, r4
   10f66:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   10f68:	2106      	movs	r1, #6
   10f6a:	0020      	movs	r0, r4
   10f6c:	47a8      	blx	r5
#endif
}
   10f6e:	bd70      	pop	{r4, r5, r6, pc}
   10f70:	000107b9 	.word	0x000107b9
   10f74:	20000dd4 	.word	0x20000dd4
   10f78:	0001102d 	.word	0x0001102d
   10f7c:	000108a5 	.word	0x000108a5
   10f80:	000106d9 	.word	0x000106d9
   10f84:	00010501 	.word	0x00010501
   10f88:	000108d1 	.word	0x000108d1
   10f8c:	00011051 	.word	0x00011051
   10f90:	00010871 	.word	0x00010871

00010f94 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
   10f94:	b570      	push	{r4, r5, r6, lr}
   10f96:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10f98:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10f9c:	425a      	negs	r2, r3
   10f9e:	4153      	adcs	r3, r2
   10fa0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   10fa2:	b672      	cpsid	i
   10fa4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10fa8:	2600      	movs	r6, #0
   10faa:	4c17      	ldr	r4, [pc, #92]	; (11008 <udd_enable+0x74>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
   10fac:	4668      	mov	r0, sp
   10fae:	7026      	strb	r6, [r4, #0]
   10fb0:	4b16      	ldr	r3, [pc, #88]	; (1100c <udd_enable+0x78>)
	return flags;
   10fb2:	9d01      	ldr	r5, [sp, #4]
   10fb4:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
   10fb6:	466b      	mov	r3, sp
   10fb8:	709e      	strb	r6, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
   10fba:	4e15      	ldr	r6, [pc, #84]	; (11010 <udd_enable+0x7c>)
   10fbc:	466a      	mov	r2, sp
   10fbe:	4915      	ldr	r1, [pc, #84]	; (11014 <udd_enable+0x80>)
   10fc0:	4b15      	ldr	r3, [pc, #84]	; (11018 <udd_enable+0x84>)
   10fc2:	0030      	movs	r0, r6
   10fc4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
   10fc6:	4b15      	ldr	r3, [pc, #84]	; (1101c <udd_enable+0x88>)
   10fc8:	0030      	movs	r0, r6
   10fca:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
   10fcc:	4b14      	ldr	r3, [pc, #80]	; (11020 <udd_enable+0x8c>)
   10fce:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   10fd0:	0692      	lsls	r2, r2, #26
   10fd2:	d413      	bmi.n	10ffc <udd_enable+0x68>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
   10fd4:	001a      	movs	r2, r3
   10fd6:	21d0      	movs	r1, #208	; 0xd0
   10fd8:	68d3      	ldr	r3, [r2, #12]
   10fda:	400b      	ands	r3, r1
   10fdc:	2bd0      	cmp	r3, #208	; 0xd0
   10fde:	d1fb      	bne.n	10fd8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
   10fe0:	4b10      	ldr	r3, [pc, #64]	; (11024 <udd_enable+0x90>)
   10fe2:	2001      	movs	r0, #1
   10fe4:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   10fe6:	4b10      	ldr	r3, [pc, #64]	; (11028 <udd_enable+0x94>)
   10fe8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   10fea:	2d00      	cmp	r5, #0
   10fec:	d004      	beq.n	10ff8 <udd_enable+0x64>
		cpu_irq_enable();
   10fee:	2301      	movs	r3, #1
   10ff0:	7023      	strb	r3, [r4, #0]
   10ff2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10ff6:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
   10ff8:	b002      	add	sp, #8
   10ffa:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
   10ffc:	2110      	movs	r1, #16
   10ffe:	68da      	ldr	r2, [r3, #12]
   11000:	4211      	tst	r1, r2
   11002:	d0fc      	beq.n	10ffe <udd_enable+0x6a>
   11004:	e7ec      	b.n	10fe0 <udd_enable+0x4c>
   11006:	46c0      	nop			; (mov r8, r8)
   11008:	200001f9 	.word	0x200001f9
   1100c:	00011b75 	.word	0x00011b75
   11010:	20000dd4 	.word	0x20000dd4
   11014:	41005000 	.word	0x41005000
   11018:	00011b85 	.word	0x00011b85
   1101c:	000115e9 	.word	0x000115e9
   11020:	40000800 	.word	0x40000800
   11024:	000107b9 	.word	0x000107b9
   11028:	00010f11 	.word	0x00010f11

0001102c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
   1102c:	000b      	movs	r3, r1
   1102e:	332e      	adds	r3, #46	; 0x2e
   11030:	009b      	lsls	r3, r3, #2
{
   11032:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
   11034:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
   11036:	22aa      	movs	r2, #170	; 0xaa
   11038:	4c04      	ldr	r4, [pc, #16]	; (1104c <usb_device_register_callback+0x20>)
   1103a:	0052      	lsls	r2, r2, #1
   1103c:	0049      	lsls	r1, r1, #1
   1103e:	5a83      	ldrh	r3, [r0, r2]
   11040:	5b09      	ldrh	r1, [r1, r4]
   11042:	430b      	orrs	r3, r1
   11044:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
   11046:	2000      	movs	r0, #0
   11048:	bd10      	pop	{r4, pc}
   1104a:	46c0      	nop			; (mov r8, r8)
   1104c:	000163d8 	.word	0x000163d8

00011050 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   11050:	4b06      	ldr	r3, [pc, #24]	; (1106c <usb_device_enable_callback+0x1c>)
   11052:	0049      	lsls	r1, r1, #1
   11054:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   11056:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   11058:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   1105a:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   1105c:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   1105e:	5a42      	ldrh	r2, [r0, r1]
   11060:	431a      	orrs	r2, r3
   11062:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
   11064:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
   11066:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
   11068:	8313      	strh	r3, [r2, #24]
}
   1106a:	4770      	bx	lr
   1106c:	000163d8 	.word	0x000163d8

00011070 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
   11070:	4b05      	ldr	r3, [pc, #20]	; (11088 <usb_device_disable_callback+0x18>)
   11072:	0049      	lsls	r1, r1, #1
   11074:	5aca      	ldrh	r2, [r1, r3]
   11076:	21ab      	movs	r1, #171	; 0xab
   11078:	0049      	lsls	r1, r1, #1
   1107a:	5a43      	ldrh	r3, [r0, r1]
   1107c:	4393      	bics	r3, r2
   1107e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
   11080:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
   11082:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
   11084:	829a      	strh	r2, [r3, #20]
}
   11086:	4770      	bx	lr
   11088:	000163d8 	.word	0x000163d8

0001108c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
   1108c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
   1108e:	008c      	lsls	r4, r1, #2
   11090:	18a4      	adds	r4, r4, r2
   11092:	3434      	adds	r4, #52	; 0x34
   11094:	00a4      	lsls	r4, r4, #2
   11096:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   11098:	1840      	adds	r0, r0, r1
   1109a:	3059      	adds	r0, #89	; 0x59
   1109c:	4904      	ldr	r1, [pc, #16]	; (110b0 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
   1109e:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   110a0:	30ff      	adds	r0, #255	; 0xff
   110a2:	7803      	ldrb	r3, [r0, #0]
   110a4:	5c8a      	ldrb	r2, [r1, r2]
   110a6:	4313      	orrs	r3, r2
   110a8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
   110aa:	2000      	movs	r0, #0
   110ac:	bd10      	pop	{r4, pc}
   110ae:	46c0      	nop			; (mov r8, r8)
   110b0:	000163e8 	.word	0x000163e8

000110b4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
   110b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
   110b6:	2400      	movs	r4, #0
   110b8:	008b      	lsls	r3, r1, #2
   110ba:	189b      	adds	r3, r3, r2
   110bc:	3334      	adds	r3, #52	; 0x34
   110be:	009b      	lsls	r3, r3, #2
   110c0:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   110c2:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
   110c4:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   110c6:	3059      	adds	r0, #89	; 0x59
   110c8:	4b03      	ldr	r3, [pc, #12]	; (110d8 <usb_device_endpoint_unregister_callback+0x24>)
   110ca:	30ff      	adds	r0, #255	; 0xff
   110cc:	5c9a      	ldrb	r2, [r3, r2]
   110ce:	7803      	ldrb	r3, [r0, #0]
   110d0:	4393      	bics	r3, r2
   110d2:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
   110d4:	2000      	movs	r0, #0
   110d6:	bd10      	pop	{r4, pc}
   110d8:	000163e8 	.word	0x000163e8

000110dc <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   110dc:	230f      	movs	r3, #15
{
   110de:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   110e0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   110e2:	18c4      	adds	r4, r0, r3
   110e4:	3461      	adds	r4, #97	; 0x61
   110e6:	4e28      	ldr	r6, [pc, #160]	; (11188 <usb_device_endpoint_enable_callback+0xac>)
   110e8:	34ff      	adds	r4, #255	; 0xff
   110ea:	7825      	ldrb	r5, [r4, #0]
   110ec:	5cb6      	ldrb	r6, [r6, r2]
   110ee:	4335      	orrs	r5, r6
   110f0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
   110f2:	2a00      	cmp	r2, #0
   110f4:	d108      	bne.n	11108 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
   110f6:	2b00      	cmp	r3, #0
   110f8:	d115      	bne.n	11126 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
   110fa:	230a      	movs	r3, #10
   110fc:	2103      	movs	r1, #3
   110fe:	6802      	ldr	r2, [r0, #0]
   11100:	33ff      	adds	r3, #255	; 0xff
   11102:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
   11104:	2000      	movs	r0, #0
   11106:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
   11108:	2a01      	cmp	r2, #1
   1110a:	d117      	bne.n	1113c <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
   1110c:	2b00      	cmp	r3, #0
   1110e:	d01f      	beq.n	11150 <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   11110:	6802      	ldr	r2, [r0, #0]
   11112:	015b      	lsls	r3, r3, #5
   11114:	18d3      	adds	r3, r2, r3
   11116:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
   11118:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   1111a:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   1111c:	2900      	cmp	r1, #0
   1111e:	db20      	blt.n	11162 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
   11120:	2204      	movs	r2, #4
   11122:	701a      	strb	r2, [r3, #0]
   11124:	e7ee      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   11126:	6802      	ldr	r2, [r0, #0]
   11128:	015b      	lsls	r3, r3, #5
   1112a:	18d3      	adds	r3, r2, r3
   1112c:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
   1112e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   11130:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   11132:	2900      	cmp	r1, #0
   11134:	db12      	blt.n	1115c <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
   11136:	2201      	movs	r2, #1
   11138:	701a      	strb	r2, [r3, #0]
   1113a:	e7e3      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
   1113c:	2a02      	cmp	r2, #2
   1113e:	d113      	bne.n	11168 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
   11140:	6802      	ldr	r2, [r0, #0]
   11142:	015b      	lsls	r3, r3, #5
   11144:	18d3      	adds	r3, r2, r3
   11146:	2210      	movs	r2, #16
   11148:	330a      	adds	r3, #10
   1114a:	33ff      	adds	r3, #255	; 0xff
   1114c:	701a      	strb	r2, [r3, #0]
   1114e:	e7d9      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
   11150:	230a      	movs	r3, #10
   11152:	210c      	movs	r1, #12
   11154:	6802      	ldr	r2, [r0, #0]
   11156:	33ff      	adds	r3, #255	; 0xff
   11158:	54d1      	strb	r1, [r2, r3]
   1115a:	e7d3      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   1115c:	2202      	movs	r2, #2
   1115e:	701a      	strb	r2, [r3, #0]
   11160:	e7d0      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   11162:	2208      	movs	r2, #8
   11164:	701a      	strb	r2, [r3, #0]
   11166:	e7cd      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
   11168:	2a03      	cmp	r2, #3
   1116a:	d1cb      	bne.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   1116c:	6802      	ldr	r2, [r0, #0]
   1116e:	015b      	lsls	r3, r3, #5
   11170:	18d3      	adds	r3, r2, r3
   11172:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
   11174:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   11176:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
   11178:	2900      	cmp	r1, #0
   1117a:	db02      	blt.n	11182 <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
   1117c:	2220      	movs	r2, #32
   1117e:	701a      	strb	r2, [r3, #0]
   11180:	e7c0      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   11182:	2240      	movs	r2, #64	; 0x40
   11184:	701a      	strb	r2, [r3, #0]
   11186:	e7bd      	b.n	11104 <usb_device_endpoint_enable_callback+0x28>
   11188:	000163e8 	.word	0x000163e8

0001118c <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   1118c:	230f      	movs	r3, #15
{
   1118e:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   11190:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   11192:	18c4      	adds	r4, r0, r3
   11194:	4d28      	ldr	r5, [pc, #160]	; (11238 <usb_device_endpoint_disable_callback+0xac>)
   11196:	3461      	adds	r4, #97	; 0x61
   11198:	34ff      	adds	r4, #255	; 0xff
   1119a:	5cae      	ldrb	r6, [r5, r2]
   1119c:	7825      	ldrb	r5, [r4, #0]
   1119e:	43b5      	bics	r5, r6
   111a0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
   111a2:	2a00      	cmp	r2, #0
   111a4:	d108      	bne.n	111b8 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
   111a6:	2b00      	cmp	r3, #0
   111a8:	d115      	bne.n	111d6 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
   111aa:	2103      	movs	r1, #3
   111ac:	6802      	ldr	r2, [r0, #0]
   111ae:	3309      	adds	r3, #9
   111b0:	33ff      	adds	r3, #255	; 0xff
   111b2:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
   111b4:	2000      	movs	r0, #0
   111b6:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
   111b8:	2a01      	cmp	r2, #1
   111ba:	d117      	bne.n	111ec <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
   111bc:	2b00      	cmp	r3, #0
   111be:	d01f      	beq.n	11200 <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   111c0:	6802      	ldr	r2, [r0, #0]
   111c2:	015b      	lsls	r3, r3, #5
   111c4:	18d3      	adds	r3, r2, r3
   111c6:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
   111c8:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   111ca:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   111cc:	2900      	cmp	r1, #0
   111ce:	db20      	blt.n	11212 <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
   111d0:	2204      	movs	r2, #4
   111d2:	701a      	strb	r2, [r3, #0]
   111d4:	e7ee      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   111d6:	6802      	ldr	r2, [r0, #0]
   111d8:	015b      	lsls	r3, r3, #5
   111da:	18d3      	adds	r3, r2, r3
   111dc:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
   111de:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   111e0:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   111e2:	2900      	cmp	r1, #0
   111e4:	db12      	blt.n	1120c <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
   111e6:	2201      	movs	r2, #1
   111e8:	701a      	strb	r2, [r3, #0]
   111ea:	e7e3      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
   111ec:	2a02      	cmp	r2, #2
   111ee:	d113      	bne.n	11218 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
   111f0:	6802      	ldr	r2, [r0, #0]
   111f2:	015b      	lsls	r3, r3, #5
   111f4:	18d3      	adds	r3, r2, r3
   111f6:	2210      	movs	r2, #16
   111f8:	3309      	adds	r3, #9
   111fa:	33ff      	adds	r3, #255	; 0xff
   111fc:	701a      	strb	r2, [r3, #0]
   111fe:	e7d9      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
   11200:	210c      	movs	r1, #12
   11202:	6802      	ldr	r2, [r0, #0]
   11204:	3309      	adds	r3, #9
   11206:	33ff      	adds	r3, #255	; 0xff
   11208:	54d1      	strb	r1, [r2, r3]
   1120a:	e7d3      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   1120c:	2202      	movs	r2, #2
   1120e:	701a      	strb	r2, [r3, #0]
   11210:	e7d0      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   11212:	2208      	movs	r2, #8
   11214:	701a      	strb	r2, [r3, #0]
   11216:	e7cd      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
   11218:	2a03      	cmp	r2, #3
   1121a:	d1cb      	bne.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   1121c:	6802      	ldr	r2, [r0, #0]
   1121e:	015b      	lsls	r3, r3, #5
   11220:	18d3      	adds	r3, r2, r3
   11222:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
   11224:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   11226:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
   11228:	2900      	cmp	r1, #0
   1122a:	db02      	blt.n	11232 <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
   1122c:	2220      	movs	r2, #32
   1122e:	701a      	strb	r2, [r3, #0]
   11230:	e7c0      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   11232:	2240      	movs	r2, #64	; 0x40
   11234:	701a      	strb	r2, [r3, #0]
   11236:	e7bd      	b.n	111b4 <usb_device_endpoint_disable_callback+0x28>
   11238:	000163e8 	.word	0x000163e8

0001123c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
   1123c:	2300      	movs	r3, #0
   1123e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
   11240:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
   11242:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
   11244:	3301      	adds	r3, #1
   11246:	70c3      	strb	r3, [r0, #3]
}
   11248:	4770      	bx	lr
   1124a:	46c0      	nop			; (mov r8, r8)

0001124c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
   1124c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1124e:	46ce      	mov	lr, r9
   11250:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   11252:	230f      	movs	r3, #15
{
   11254:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   11256:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
   11258:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   1125a:	4023      	ands	r3, r4
{
   1125c:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
   1125e:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
   11260:	2a04      	cmp	r2, #4
   11262:	d81a      	bhi.n	1129a <usb_device_endpoint_set_config+0x4e>
   11264:	4d71      	ldr	r5, [pc, #452]	; (1142c <usb_device_endpoint_set_config+0x1e0>)
   11266:	0092      	lsls	r2, r2, #2
   11268:	58aa      	ldr	r2, [r5, r2]
   1126a:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   1126c:	2080      	movs	r0, #128	; 0x80
   1126e:	0040      	lsls	r0, r0, #1
   11270:	4680      	mov	r8, r0
   11272:	5c17      	ldrb	r7, [r2, r0]
   11274:	3890      	subs	r0, #144	; 0x90
   11276:	4684      	mov	ip, r0
   11278:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   1127a:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   1127c:	423d      	tst	r5, r7
   1127e:	d124      	bne.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
   11280:	4640      	mov	r0, r8
   11282:	2720      	movs	r7, #32
   11284:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
   11286:	4645      	mov	r5, r8
   11288:	4338      	orrs	r0, r7
   1128a:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   1128c:	0018      	movs	r0, r3
   1128e:	6832      	ldr	r2, [r6, #0]
   11290:	3008      	adds	r0, #8
   11292:	0140      	lsls	r0, r0, #5
   11294:	1812      	adds	r2, r2, r0
   11296:	2080      	movs	r0, #128	; 0x80
   11298:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
   1129a:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
   1129c:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
   1129e:	005b      	lsls	r3, r3, #1
   112a0:	189b      	adds	r3, r3, r2
   112a2:	4a63      	ldr	r2, [pc, #396]	; (11430 <usb_device_endpoint_set_config+0x1e4>)
   112a4:	784c      	ldrb	r4, [r1, #1]
   112a6:	011b      	lsls	r3, r3, #4
   112a8:	18d3      	adds	r3, r2, r3
   112aa:	685a      	ldr	r2, [r3, #4]
   112ac:	4020      	ands	r0, r4
   112ae:	4c61      	ldr	r4, [pc, #388]	; (11434 <usb_device_endpoint_set_config+0x1e8>)
   112b0:	0700      	lsls	r0, r0, #28
   112b2:	4022      	ands	r2, r4
   112b4:	4302      	orrs	r2, r0
   112b6:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
   112b8:	788a      	ldrb	r2, [r1, #2]
   112ba:	2a00      	cmp	r2, #0
   112bc:	d000      	beq.n	112c0 <usb_device_endpoint_set_config+0x74>
   112be:	e084      	b.n	113ca <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
   112c0:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   112c2:	685a      	ldr	r2, [r3, #4]
   112c4:	0052      	lsls	r2, r2, #1
   112c6:	0852      	lsrs	r2, r2, #1
   112c8:	605a      	str	r2, [r3, #4]
}
   112ca:	bc0c      	pop	{r2, r3}
   112cc:	4690      	mov	r8, r2
   112ce:	4699      	mov	r9, r3
   112d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112d2:	6800      	ldr	r0, [r0, #0]
   112d4:	015a      	lsls	r2, r3, #5
   112d6:	4684      	mov	ip, r0
   112d8:	4462      	add	r2, ip
			if (ep_bank) {
   112da:	2c00      	cmp	r4, #0
   112dc:	da00      	bge.n	112e0 <usb_device_endpoint_set_config+0x94>
   112de:	e08a      	b.n	113f6 <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   112e0:	2580      	movs	r5, #128	; 0x80
   112e2:	006d      	lsls	r5, r5, #1
   112e4:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   112e6:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   112e8:	077f      	lsls	r7, r7, #29
   112ea:	d1ee      	bne.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
   112ec:	5d50      	ldrb	r0, [r2, r5]
   112ee:	2703      	movs	r7, #3
   112f0:	e061      	b.n	113b6 <usb_device_endpoint_set_config+0x16a>
   112f2:	6800      	ldr	r0, [r0, #0]
   112f4:	015a      	lsls	r2, r3, #5
   112f6:	4684      	mov	ip, r0
   112f8:	4462      	add	r2, ip
			if (ep_bank) {
   112fa:	2c00      	cmp	r4, #0
   112fc:	db6c      	blt.n	113d8 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   112fe:	2580      	movs	r5, #128	; 0x80
   11300:	006d      	lsls	r5, r5, #1
   11302:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   11304:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   11306:	077f      	lsls	r7, r7, #29
   11308:	d1df      	bne.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
   1130a:	5d50      	ldrb	r0, [r2, r5]
   1130c:	2704      	movs	r7, #4
   1130e:	e052      	b.n	113b6 <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
   11310:	2100      	movs	r1, #0
   11312:	6802      	ldr	r2, [r0, #0]
   11314:	3308      	adds	r3, #8
   11316:	015b      	lsls	r3, r3, #5
   11318:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
   1131a:	2000      	movs	r0, #0
   1131c:	e7d5      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
   1131e:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   11320:	2080      	movs	r0, #128	; 0x80
   11322:	015d      	lsls	r5, r3, #5
   11324:	0040      	lsls	r0, r0, #1
   11326:	1952      	adds	r2, r2, r5
   11328:	5c17      	ldrb	r7, [r2, r0]
   1132a:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
   1132c:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   1132e:	077f      	lsls	r7, r7, #29
   11330:	d1cb      	bne.n	112ca <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
   11332:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   11334:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
   11336:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   11338:	4227      	tst	r7, r4
   1133a:	d1c6      	bne.n	112ca <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
   1133c:	464c      	mov	r4, r9
   1133e:	380b      	subs	r0, #11
   11340:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   11342:	6832      	ldr	r2, [r6, #0]
   11344:	3308      	adds	r3, #8
   11346:	015b      	lsls	r3, r3, #5
   11348:	18d2      	adds	r2, r2, r3
   1134a:	302f      	adds	r0, #47	; 0x2f
   1134c:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   1134e:	6832      	ldr	r2, [r6, #0]
   11350:	18d3      	adds	r3, r2, r3
   11352:	2280      	movs	r2, #128	; 0x80
   11354:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
   11356:	788b      	ldrb	r3, [r1, #2]
   11358:	2b00      	cmp	r3, #0
   1135a:	d05b      	beq.n	11414 <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   1135c:	2080      	movs	r0, #128	; 0x80
   1135e:	4b34      	ldr	r3, [pc, #208]	; (11430 <usb_device_endpoint_set_config+0x1e4>)
   11360:	0600      	lsls	r0, r0, #24
   11362:	195a      	adds	r2, r3, r5
   11364:	6854      	ldr	r4, [r2, #4]
   11366:	4304      	orrs	r4, r0
   11368:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   1136a:	6954      	ldr	r4, [r2, #20]
   1136c:	4320      	orrs	r0, r4
   1136e:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
   11370:	2207      	movs	r2, #7
   11372:	784c      	ldrb	r4, [r1, #1]
   11374:	195d      	adds	r5, r3, r5
   11376:	6868      	ldr	r0, [r5, #4]
   11378:	4e2e      	ldr	r6, [pc, #184]	; (11434 <usb_device_endpoint_set_config+0x1e8>)
   1137a:	4014      	ands	r4, r2
   1137c:	0724      	lsls	r4, r4, #28
   1137e:	4030      	ands	r0, r6
   11380:	4320      	orrs	r0, r4
   11382:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
   11384:	7849      	ldrb	r1, [r1, #1]
   11386:	696b      	ldr	r3, [r5, #20]
   11388:	400a      	ands	r2, r1
   1138a:	0712      	lsls	r2, r2, #28
   1138c:	4033      	ands	r3, r6
   1138e:	431a      	orrs	r2, r3
   11390:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
   11392:	2000      	movs	r0, #0
   11394:	e799      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
   11396:	6800      	ldr	r0, [r0, #0]
   11398:	015a      	lsls	r2, r3, #5
   1139a:	4684      	mov	ip, r0
   1139c:	4462      	add	r2, ip
			if (ep_bank) {
   1139e:	2c00      	cmp	r4, #0
   113a0:	da00      	bge.n	113a4 <usb_device_endpoint_set_config+0x158>
   113a2:	e763      	b.n	1126c <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   113a4:	2580      	movs	r5, #128	; 0x80
   113a6:	006d      	lsls	r5, r5, #1
   113a8:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   113aa:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   113ac:	077f      	lsls	r7, r7, #29
   113ae:	d000      	beq.n	113b2 <usb_device_endpoint_set_config+0x166>
   113b0:	e78b      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
   113b2:	2702      	movs	r7, #2
   113b4:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
   113b6:	4338      	orrs	r0, r7
   113b8:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   113ba:	0018      	movs	r0, r3
   113bc:	6832      	ldr	r2, [r6, #0]
   113be:	3008      	adds	r0, #8
   113c0:	0140      	lsls	r0, r0, #5
   113c2:	1812      	adds	r2, r2, r0
   113c4:	2040      	movs	r0, #64	; 0x40
   113c6:	7150      	strb	r0, [r2, #5]
   113c8:	e767      	b.n	1129a <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   113ca:	2280      	movs	r2, #128	; 0x80
   113cc:	6859      	ldr	r1, [r3, #4]
   113ce:	0612      	lsls	r2, r2, #24
   113d0:	430a      	orrs	r2, r1
   113d2:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
   113d4:	2000      	movs	r0, #0
   113d6:	e778      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   113d8:	2080      	movs	r0, #128	; 0x80
   113da:	0040      	lsls	r0, r0, #1
   113dc:	4680      	mov	r8, r0
   113de:	5c17      	ldrb	r7, [r2, r0]
   113e0:	3890      	subs	r0, #144	; 0x90
   113e2:	4684      	mov	ip, r0
   113e4:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   113e6:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   113e8:	423d      	tst	r5, r7
   113ea:	d000      	beq.n	113ee <usb_device_endpoint_set_config+0x1a2>
   113ec:	e76d      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
   113ee:	4640      	mov	r0, r8
   113f0:	2740      	movs	r7, #64	; 0x40
   113f2:	5c10      	ldrb	r0, [r2, r0]
   113f4:	e747      	b.n	11286 <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   113f6:	2080      	movs	r0, #128	; 0x80
   113f8:	0040      	lsls	r0, r0, #1
   113fa:	4680      	mov	r8, r0
   113fc:	5c17      	ldrb	r7, [r2, r0]
   113fe:	3890      	subs	r0, #144	; 0x90
   11400:	4684      	mov	ip, r0
   11402:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   11404:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   11406:	423d      	tst	r5, r7
   11408:	d000      	beq.n	1140c <usb_device_endpoint_set_config+0x1c0>
   1140a:	e75e      	b.n	112ca <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
   1140c:	4640      	mov	r0, r8
   1140e:	2730      	movs	r7, #48	; 0x30
   11410:	5c10      	ldrb	r0, [r2, r0]
   11412:	e738      	b.n	11286 <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   11414:	4b06      	ldr	r3, [pc, #24]	; (11430 <usb_device_endpoint_set_config+0x1e4>)
   11416:	1958      	adds	r0, r3, r5
   11418:	6842      	ldr	r2, [r0, #4]
   1141a:	0052      	lsls	r2, r2, #1
   1141c:	0852      	lsrs	r2, r2, #1
   1141e:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   11420:	6942      	ldr	r2, [r0, #20]
   11422:	0052      	lsls	r2, r2, #1
   11424:	0852      	lsrs	r2, r2, #1
   11426:	6142      	str	r2, [r0, #20]
   11428:	e7a2      	b.n	11370 <usb_device_endpoint_set_config+0x124>
   1142a:	46c0      	nop			; (mov r8, r8)
   1142c:	000163c4 	.word	0x000163c4
   11430:	20000f94 	.word	0x20000f94
   11434:	8fffffff 	.word	0x8fffffff

00011438 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
   11438:	230f      	movs	r3, #15
   1143a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   1143c:	3308      	adds	r3, #8
   1143e:	6802      	ldr	r2, [r0, #0]
   11440:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
   11442:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   11444:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
   11446:	2900      	cmp	r1, #0
   11448:	db06      	blt.n	11458 <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   1144a:	2140      	movs	r1, #64	; 0x40
   1144c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
   1144e:	6802      	ldr	r2, [r0, #0]
   11450:	18d3      	adds	r3, r2, r3
   11452:	2201      	movs	r2, #1
   11454:	71da      	strb	r2, [r3, #7]
	}
}
   11456:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   11458:	2180      	movs	r1, #128	; 0x80
   1145a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
   1145c:	6802      	ldr	r2, [r0, #0]
   1145e:	18d3      	adds	r3, r2, r3
   11460:	2202      	movs	r2, #2
   11462:	71da      	strb	r2, [r3, #7]
   11464:	e7f7      	b.n	11456 <usb_device_endpoint_abort_job+0x1e>
   11466:	46c0      	nop			; (mov r8, r8)

00011468 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   11468:	230f      	movs	r3, #15
   1146a:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   1146c:	6802      	ldr	r2, [r0, #0]
   1146e:	3308      	adds	r3, #8
   11470:	015b      	lsls	r3, r3, #5
   11472:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
   11474:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   11476:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
   11478:	2900      	cmp	r1, #0
   1147a:	db02      	blt.n	11482 <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
   1147c:	06c0      	lsls	r0, r0, #27
   1147e:	0fc0      	lsrs	r0, r0, #31
	}
}
   11480:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   11482:	0680      	lsls	r0, r0, #26
   11484:	0fc0      	lsrs	r0, r0, #31
   11486:	e7fb      	b.n	11480 <usb_device_endpoint_is_halted+0x18>

00011488 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   11488:	230f      	movs	r3, #15
   1148a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   1148c:	6802      	ldr	r2, [r0, #0]
   1148e:	3308      	adds	r3, #8
   11490:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
   11492:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   11494:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
   11496:	2900      	cmp	r1, #0
   11498:	db02      	blt.n	114a0 <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
   1149a:	2210      	movs	r2, #16
   1149c:	715a      	strb	r2, [r3, #5]
	}
}
   1149e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   114a0:	2220      	movs	r2, #32
   114a2:	715a      	strb	r2, [r3, #5]
   114a4:	e7fb      	b.n	1149e <usb_device_endpoint_set_halt+0x16>
   114a6:	46c0      	nop			; (mov r8, r8)

000114a8 <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   114a8:	230f      	movs	r3, #15
   114aa:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
   114ac:	b249      	sxtb	r1, r1
{
   114ae:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
   114b0:	2900      	cmp	r1, #0
   114b2:	db1b      	blt.n	114ec <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
   114b4:	2483      	movs	r4, #131	; 0x83
   114b6:	6802      	ldr	r2, [r0, #0]
   114b8:	0159      	lsls	r1, r3, #5
   114ba:	0064      	lsls	r4, r4, #1
   114bc:	1852      	adds	r2, r2, r1
   114be:	5d15      	ldrb	r5, [r2, r4]
   114c0:	3cf6      	subs	r4, #246	; 0xf6
   114c2:	422c      	tst	r4, r5
   114c4:	d011      	beq.n	114ea <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
   114c6:	2582      	movs	r5, #130	; 0x82
   114c8:	006d      	lsls	r5, r5, #1
   114ca:	5554      	strb	r4, [r2, r5]
   114cc:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
   114ce:	3410      	adds	r4, #16
   114d0:	1852      	adds	r2, r2, r1
   114d2:	2108      	movs	r1, #8
   114d4:	31ff      	adds	r1, #255	; 0xff
   114d6:	5c55      	ldrb	r5, [r2, r1]
   114d8:	422c      	tst	r4, r5
   114da:	d006      	beq.n	114ea <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
   114dc:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
   114de:	6802      	ldr	r2, [r0, #0]
   114e0:	3308      	adds	r3, #8
   114e2:	015b      	lsls	r3, r3, #5
   114e4:	18d3      	adds	r3, r2, r3
   114e6:	2201      	movs	r2, #1
   114e8:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
   114ea:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
   114ec:	2483      	movs	r4, #131	; 0x83
   114ee:	6802      	ldr	r2, [r0, #0]
   114f0:	0159      	lsls	r1, r3, #5
   114f2:	0064      	lsls	r4, r4, #1
   114f4:	1852      	adds	r2, r2, r1
   114f6:	5d15      	ldrb	r5, [r2, r4]
   114f8:	3ce6      	subs	r4, #230	; 0xe6
   114fa:	422c      	tst	r4, r5
   114fc:	d0f5      	beq.n	114ea <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
   114fe:	2582      	movs	r5, #130	; 0x82
   11500:	006d      	lsls	r5, r5, #1
   11502:	5554      	strb	r4, [r2, r5]
   11504:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
   11506:	3420      	adds	r4, #32
   11508:	1852      	adds	r2, r2, r1
   1150a:	2108      	movs	r1, #8
   1150c:	31ff      	adds	r1, #255	; 0xff
   1150e:	5c55      	ldrb	r5, [r2, r1]
   11510:	422c      	tst	r4, r5
   11512:	d0ea      	beq.n	114ea <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
   11514:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
   11516:	6802      	ldr	r2, [r0, #0]
   11518:	3308      	adds	r3, #8
   1151a:	015b      	lsls	r3, r3, #5
   1151c:	18d3      	adds	r3, r2, r3
   1151e:	2202      	movs	r2, #2
   11520:	711a      	strb	r2, [r3, #4]
   11522:	e7e2      	b.n	114ea <usb_device_endpoint_clear_halt+0x42>

00011524 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
   11524:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
   11526:	000d      	movs	r5, r1
   11528:	6804      	ldr	r4, [r0, #0]
   1152a:	3508      	adds	r5, #8
   1152c:	016d      	lsls	r5, r5, #5
   1152e:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
   11530:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
   11532:	0664      	lsls	r4, r4, #25
   11534:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
   11536:	d101      	bne.n	1153c <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
   11538:	0030      	movs	r0, r6
   1153a:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
   1153c:	4c0a      	ldr	r4, [pc, #40]	; (11568 <usb_device_endpoint_write_buffer_job+0x44>)
   1153e:	0149      	lsls	r1, r1, #5
   11540:	1861      	adds	r1, r4, r1
   11542:	000c      	movs	r4, r1
   11544:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11546:	694a      	ldr	r2, [r1, #20]
   11548:	4908      	ldr	r1, [pc, #32]	; (1156c <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
   1154a:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   1154c:	400a      	ands	r2, r1
   1154e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
   11550:	6962      	ldr	r2, [r4, #20]
   11552:	0c9b      	lsrs	r3, r3, #18
   11554:	0b92      	lsrs	r2, r2, #14
   11556:	0392      	lsls	r2, r2, #14
   11558:	4313      	orrs	r3, r2
   1155a:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
   1155c:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
   1155e:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
   11560:	195d      	adds	r5, r3, r5
   11562:	2380      	movs	r3, #128	; 0x80
   11564:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
   11566:	e7e7      	b.n	11538 <usb_device_endpoint_write_buffer_job+0x14>
   11568:	20000f94 	.word	0x20000f94
   1156c:	f0003fff 	.word	0xf0003fff

00011570 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
   11570:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
   11572:	000c      	movs	r4, r1
   11574:	6805      	ldr	r5, [r0, #0]
   11576:	3408      	adds	r4, #8
   11578:	0164      	lsls	r4, r4, #5
   1157a:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
   1157c:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
   1157e:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
   11580:	d101      	bne.n	11586 <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
   11582:	0030      	movs	r0, r6
   11584:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
   11586:	4d0a      	ldr	r5, [pc, #40]	; (115b0 <usb_device_endpoint_read_buffer_job+0x40>)
   11588:	0149      	lsls	r1, r1, #5
   1158a:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
   1158c:	1869      	adds	r1, r5, r1
   1158e:	684a      	ldr	r2, [r1, #4]
   11590:	4d08      	ldr	r5, [pc, #32]	; (115b4 <usb_device_endpoint_read_buffer_job+0x44>)
   11592:	049b      	lsls	r3, r3, #18
   11594:	091b      	lsrs	r3, r3, #4
   11596:	402a      	ands	r2, r5
   11598:	4313      	orrs	r3, r2
   1159a:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   1159c:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
   1159e:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   115a0:	0b9b      	lsrs	r3, r3, #14
   115a2:	039b      	lsls	r3, r3, #14
   115a4:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   115a6:	6803      	ldr	r3, [r0, #0]
   115a8:	191c      	adds	r4, r3, r4
   115aa:	2340      	movs	r3, #64	; 0x40
   115ac:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
   115ae:	e7e8      	b.n	11582 <usb_device_endpoint_read_buffer_job+0x12>
   115b0:	20000f94 	.word	0x20000f94
   115b4:	f0003fff 	.word	0xf0003fff

000115b8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
   115b8:	4b09      	ldr	r3, [pc, #36]	; (115e0 <usb_device_endpoint_setup_buffer_job+0x28>)
   115ba:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
   115bc:	685a      	ldr	r2, [r3, #4]
   115be:	4909      	ldr	r1, [pc, #36]	; (115e4 <usb_device_endpoint_setup_buffer_job+0x2c>)
   115c0:	4011      	ands	r1, r2
   115c2:	2280      	movs	r2, #128	; 0x80
   115c4:	0292      	lsls	r2, r2, #10
   115c6:	430a      	orrs	r2, r1
   115c8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   115ca:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   115cc:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   115ce:	0b92      	lsrs	r2, r2, #14
   115d0:	0392      	lsls	r2, r2, #14
   115d2:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   115d4:	2382      	movs	r3, #130	; 0x82
   115d6:	6802      	ldr	r2, [r0, #0]
   115d8:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
   115da:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   115dc:	54d1      	strb	r1, [r2, r3]
}
   115de:	4770      	bx	lr
   115e0:	20000f94 	.word	0x20000f94
   115e4:	f0003fff 	.word	0xf0003fff

000115e8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
   115e8:	2102      	movs	r1, #2
   115ea:	6802      	ldr	r2, [r0, #0]
   115ec:	7813      	ldrb	r3, [r2, #0]
   115ee:	430b      	orrs	r3, r1
   115f0:	7013      	strb	r3, [r2, #0]
   115f2:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
   115f4:	7893      	ldrb	r3, [r2, #2]
   115f6:	2b02      	cmp	r3, #2
   115f8:	d0fc      	beq.n	115f4 <usb_enable+0xc>
}
   115fa:	4770      	bx	lr

000115fc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
   115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   115fe:	4645      	mov	r5, r8
   11600:	4657      	mov	r7, sl
   11602:	46de      	mov	lr, fp
   11604:	464e      	mov	r6, r9
   11606:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
   11608:	4bcc      	ldr	r3, [pc, #816]	; (1193c <USB_Handler+0x340>)
{
   1160a:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
   1160c:	681f      	ldr	r7, [r3, #0]
   1160e:	4698      	mov	r8, r3
   11610:	683d      	ldr	r5, [r7, #0]
   11612:	782b      	ldrb	r3, [r5, #0]
   11614:	09db      	lsrs	r3, r3, #7
   11616:	d169      	bne.n	116ec <USB_Handler+0xf0>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
   11618:	8c2e      	ldrh	r6, [r5, #32]
   1161a:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
   1161c:	2e00      	cmp	r6, #0
   1161e:	d132      	bne.n	11686 <USB_Handler+0x8a>
				_usb_instances->device_enabled_callback_mask &
   11620:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
   11622:	22aa      	movs	r2, #170	; 0xaa
				_usb_instances->device_enabled_callback_mask &
   11624:	005b      	lsls	r3, r3, #1
		flags_run = flags &
   11626:	0052      	lsls	r2, r2, #1
   11628:	5afb      	ldrh	r3, [r7, r3]
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
   1162a:	8bae      	ldrh	r6, [r5, #28]
		flags_run = flags &
   1162c:	5abd      	ldrh	r5, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   1162e:	3a54      	subs	r2, #84	; 0x54
   11630:	4692      	mov	sl, r2
   11632:	4ac3      	ldr	r2, [pc, #780]	; (11940 <USB_Handler+0x344>)
		flags_run = flags &
   11634:	401d      	ands	r5, r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
   11636:	b2b6      	uxth	r6, r6
		flags_run = flags &
   11638:	4035      	ands	r5, r6
   1163a:	2304      	movs	r3, #4
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
   1163c:	2400      	movs	r4, #0
   1163e:	4691      	mov	r9, r2
   11640:	4fc0      	ldr	r7, [pc, #768]	; (11944 <USB_Handler+0x348>)
   11642:	e001      	b.n	11648 <USB_Handler+0x4c>
   11644:	0063      	lsls	r3, r4, #1
   11646:	5bdb      	ldrh	r3, [r3, r7]
			if (flags & _usb_device_irq_bits[i]) {
   11648:	421e      	tst	r6, r3
   1164a:	d003      	beq.n	11654 <USB_Handler+0x58>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
   1164c:	4642      	mov	r2, r8
   1164e:	6812      	ldr	r2, [r2, #0]
   11650:	6812      	ldr	r2, [r2, #0]
   11652:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
   11654:	421d      	tst	r5, r3
   11656:	d00c      	beq.n	11672 <USB_Handler+0x76>
   11658:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
   1165a:	2c06      	cmp	r4, #6
   1165c:	d100      	bne.n	11660 <USB_Handler+0x64>
   1165e:	e278      	b.n	11b52 <USB_Handler+0x556>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
   11660:	0023      	movs	r3, r4
   11662:	4642      	mov	r2, r8
   11664:	332e      	adds	r3, #46	; 0x2e
   11666:	6812      	ldr	r2, [r2, #0]
   11668:	009b      	lsls	r3, r3, #2
   1166a:	589b      	ldr	r3, [r3, r2]
   1166c:	4642      	mov	r2, r8
   1166e:	6810      	ldr	r0, [r2, #0]
   11670:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
   11672:	3401      	adds	r4, #1
   11674:	2c07      	cmp	r4, #7
   11676:	d1e5      	bne.n	11644 <USB_Handler+0x48>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
   11678:	b003      	add	sp, #12
   1167a:	bc3c      	pop	{r2, r3, r4, r5}
   1167c:	4690      	mov	r8, r2
   1167e:	4699      	mov	r9, r3
   11680:	46a2      	mov	sl, r4
   11682:	46ab      	mov	fp, r5
   11684:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
   11686:	2201      	movs	r2, #1
   11688:	003c      	movs	r4, r7
   1168a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   1168c:	325f      	adds	r2, #95	; 0x5f
   1168e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11690:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
   11692:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11694:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   11696:	46b9      	mov	r9, r7
   11698:	46a8      	mov	r8, r5
   1169a:	3459      	adds	r4, #89	; 0x59
   1169c:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
   1169e:	0032      	movs	r2, r6
   116a0:	4661      	mov	r1, ip
   116a2:	411a      	asrs	r2, r3
   116a4:	b2dd      	uxtb	r5, r3
   116a6:	4211      	tst	r1, r2
   116a8:	d01b      	beq.n	116e2 <USB_Handler+0xe6>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
   116aa:	001f      	movs	r7, r3
   116ac:	3708      	adds	r7, #8
   116ae:	017a      	lsls	r2, r7, #5
   116b0:	4442      	add	r2, r8
   116b2:	1dd1      	adds	r1, r2, #7
   116b4:	79d2      	ldrb	r2, [r2, #7]
   116b6:	9101      	str	r1, [sp, #4]
   116b8:	7a21      	ldrb	r1, [r4, #8]
   116ba:	7820      	ldrb	r0, [r4, #0]
   116bc:	b2d2      	uxtb	r2, r2
   116be:	4011      	ands	r1, r2
   116c0:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   116c2:	4658      	mov	r0, fp
   116c4:	4210      	tst	r0, r2
   116c6:	d000      	beq.n	116ca <USB_Handler+0xce>
   116c8:	e16c      	b.n	119a4 <USB_Handler+0x3a8>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   116ca:	4650      	mov	r0, sl
   116cc:	4210      	tst	r0, r2
   116ce:	d000      	beq.n	116d2 <USB_Handler+0xd6>
   116d0:	e188      	b.n	119e4 <USB_Handler+0x3e8>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
   116d2:	2003      	movs	r0, #3
   116d4:	4210      	tst	r0, r2
   116d6:	d000      	beq.n	116da <USB_Handler+0xde>
   116d8:	e19d      	b.n	11a16 <USB_Handler+0x41a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   116da:	200c      	movs	r0, #12
   116dc:	4210      	tst	r0, r2
   116de:	d000      	beq.n	116e2 <USB_Handler+0xe6>
   116e0:	e1bd      	b.n	11a5e <USB_Handler+0x462>
   116e2:	3301      	adds	r3, #1
   116e4:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
   116e6:	2b08      	cmp	r3, #8
   116e8:	d1d9      	bne.n	1169e <USB_Handler+0xa2>
   116ea:	e7c5      	b.n	11678 <USB_Handler+0x7c>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   116ec:	8c2b      	ldrh	r3, [r5, #32]
   116ee:	2b00      	cmp	r3, #0
   116f0:	d171      	bne.n	117d6 <USB_Handler+0x1da>
		if (flags & USB_HOST_INTFLAG_HSOF) {
   116f2:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
   116f4:	8bac      	ldrh	r4, [r5, #28]
   116f6:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
   116f8:	4223      	tst	r3, r4
   116fa:	d005      	beq.n	11708 <USB_Handler+0x10c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
   116fc:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
   116fe:	23a5      	movs	r3, #165	; 0xa5
   11700:	5cfb      	ldrb	r3, [r7, r3]
   11702:	07db      	lsls	r3, r3, #31
   11704:	d500      	bpl.n	11708 <USB_Handler+0x10c>
   11706:	e12c      	b.n	11962 <USB_Handler+0x366>
		if (flags & USB_HOST_INTFLAG_RST) {
   11708:	2308      	movs	r3, #8
   1170a:	4223      	tst	r3, r4
   1170c:	d00b      	beq.n	11726 <USB_Handler+0x12a>
			host_pipe_job_busy_status = 0;
   1170e:	2100      	movs	r1, #0
   11710:	4a8d      	ldr	r2, [pc, #564]	; (11948 <USB_Handler+0x34c>)
   11712:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
   11714:	4642      	mov	r2, r8
   11716:	6810      	ldr	r0, [r2, #0]
   11718:	6802      	ldr	r2, [r0, #0]
   1171a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
   1171c:	339d      	adds	r3, #157	; 0x9d
   1171e:	5cc3      	ldrb	r3, [r0, r3]
   11720:	079b      	lsls	r3, r3, #30
   11722:	d500      	bpl.n	11726 <USB_Handler+0x12a>
   11724:	e11a      	b.n	1195c <USB_Handler+0x360>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
   11726:	2340      	movs	r3, #64	; 0x40
   11728:	4223      	tst	r3, r4
   1172a:	d008      	beq.n	1173e <USB_Handler+0x142>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
   1172c:	4642      	mov	r2, r8
   1172e:	6810      	ldr	r0, [r2, #0]
   11730:	6802      	ldr	r2, [r0, #0]
   11732:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
   11734:	3365      	adds	r3, #101	; 0x65
   11736:	5cc3      	ldrb	r3, [r0, r3]
   11738:	06db      	lsls	r3, r3, #27
   1173a:	d500      	bpl.n	1173e <USB_Handler+0x142>
   1173c:	e0fb      	b.n	11936 <USB_Handler+0x33a>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
   1173e:	2320      	movs	r3, #32
   11740:	4223      	tst	r3, r4
   11742:	d008      	beq.n	11756 <USB_Handler+0x15a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
   11744:	4642      	mov	r2, r8
   11746:	6810      	ldr	r0, [r2, #0]
   11748:	6802      	ldr	r2, [r0, #0]
   1174a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
   1174c:	3385      	adds	r3, #133	; 0x85
   1174e:	5cc3      	ldrb	r3, [r0, r3]
   11750:	071b      	lsls	r3, r3, #28
   11752:	d500      	bpl.n	11756 <USB_Handler+0x15a>
   11754:	e0ec      	b.n	11930 <USB_Handler+0x334>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
   11756:	2310      	movs	r3, #16
   11758:	4223      	tst	r3, r4
   1175a:	d008      	beq.n	1176e <USB_Handler+0x172>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
   1175c:	4642      	mov	r2, r8
   1175e:	6810      	ldr	r0, [r2, #0]
   11760:	6802      	ldr	r2, [r0, #0]
   11762:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
   11764:	3395      	adds	r3, #149	; 0x95
   11766:	5cc3      	ldrb	r3, [r0, r3]
   11768:	075b      	lsls	r3, r3, #29
   1176a:	d500      	bpl.n	1176e <USB_Handler+0x172>
   1176c:	e0dd      	b.n	1192a <USB_Handler+0x32e>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
   1176e:	2380      	movs	r3, #128	; 0x80
   11770:	4223      	tst	r3, r4
   11772:	d00b      	beq.n	1178c <USB_Handler+0x190>
			host_pipe_job_busy_status = 0;
   11774:	2100      	movs	r1, #0
   11776:	4a74      	ldr	r2, [pc, #464]	; (11948 <USB_Handler+0x34c>)
   11778:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
   1177a:	4642      	mov	r2, r8
   1177c:	6810      	ldr	r0, [r2, #0]
   1177e:	6802      	ldr	r2, [r0, #0]
   11780:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
   11782:	3325      	adds	r3, #37	; 0x25
   11784:	5cc3      	ldrb	r3, [r0, r3]
   11786:	069b      	lsls	r3, r3, #26
   11788:	d500      	bpl.n	1178c <USB_Handler+0x190>
   1178a:	e0cb      	b.n	11924 <USB_Handler+0x328>
		if (flags & USB_HOST_INTFLAG_DCONN) {
   1178c:	2380      	movs	r3, #128	; 0x80
   1178e:	005b      	lsls	r3, r3, #1
   11790:	421c      	tst	r4, r3
   11792:	d00b      	beq.n	117ac <USB_Handler+0x1b0>
			host_pipe_job_busy_status = 0;
   11794:	2100      	movs	r1, #0
   11796:	4a6c      	ldr	r2, [pc, #432]	; (11948 <USB_Handler+0x34c>)
   11798:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
   1179a:	4642      	mov	r2, r8
   1179c:	6810      	ldr	r0, [r2, #0]
   1179e:	6802      	ldr	r2, [r0, #0]
   117a0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
   117a2:	3b5b      	subs	r3, #91	; 0x5b
   117a4:	5cc3      	ldrb	r3, [r0, r3]
   117a6:	065b      	lsls	r3, r3, #25
   117a8:	d500      	bpl.n	117ac <USB_Handler+0x1b0>
   117aa:	e0b8      	b.n	1191e <USB_Handler+0x322>
		if (flags & USB_HOST_INTFLAG_DDISC) {
   117ac:	2380      	movs	r3, #128	; 0x80
   117ae:	009b      	lsls	r3, r3, #2
   117b0:	421c      	tst	r4, r3
   117b2:	d100      	bne.n	117b6 <USB_Handler+0x1ba>
   117b4:	e760      	b.n	11678 <USB_Handler+0x7c>
			host_pipe_job_busy_status = 0;
   117b6:	2100      	movs	r1, #0
   117b8:	4a63      	ldr	r2, [pc, #396]	; (11948 <USB_Handler+0x34c>)
   117ba:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
   117bc:	4642      	mov	r2, r8
   117be:	6810      	ldr	r0, [r2, #0]
   117c0:	6802      	ldr	r2, [r0, #0]
   117c2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
   117c4:	3b5c      	subs	r3, #92	; 0x5c
   117c6:	3bff      	subs	r3, #255	; 0xff
   117c8:	5cc3      	ldrb	r3, [r0, r3]
   117ca:	2b7f      	cmp	r3, #127	; 0x7f
   117cc:	d800      	bhi.n	117d0 <USB_Handler+0x1d4>
   117ce:	e753      	b.n	11678 <USB_Handler+0x7c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
   117d0:	6a03      	ldr	r3, [r0, #32]
   117d2:	4798      	blx	r3
   117d4:	e750      	b.n	11678 <USB_Handler+0x7c>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   117d6:	8c28      	ldrh	r0, [r5, #32]
   117d8:	4b5c      	ldr	r3, [pc, #368]	; (1194c <USB_Handler+0x350>)
   117da:	b280      	uxth	r0, r0
   117dc:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   117de:	0006      	movs	r6, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
   117e0:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   117e2:	3608      	adds	r6, #8
   117e4:	0173      	lsls	r3, r6, #5
   117e6:	18ed      	adds	r5, r5, r3
   117e8:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   117ea:	0004      	movs	r4, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   117ec:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
   117ee:	422a      	tst	r2, r5
   117f0:	d013      	beq.n	1181a <USB_Handler+0x21e>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   117f2:	4955      	ldr	r1, [pc, #340]	; (11948 <USB_Handler+0x34c>)
   117f4:	468c      	mov	ip, r1
   117f6:	2101      	movs	r1, #1
   117f8:	4689      	mov	r9, r1
   117fa:	4081      	lsls	r1, r0
   117fc:	4660      	mov	r0, ip
   117fe:	6800      	ldr	r0, [r0, #0]
   11800:	4388      	bics	r0, r1
   11802:	0001      	movs	r1, r0
   11804:	4660      	mov	r0, ip
   11806:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11808:	6839      	ldr	r1, [r7, #0]
   1180a:	18c9      	adds	r1, r1, r3
   1180c:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   1180e:	4649      	mov	r1, r9
   11810:	193a      	adds	r2, r7, r4
   11812:	32ae      	adds	r2, #174	; 0xae
   11814:	7812      	ldrb	r2, [r2, #0]
   11816:	4211      	tst	r1, r2
   11818:	d157      	bne.n	118ca <USB_Handler+0x2ce>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
   1181a:	2304      	movs	r3, #4
   1181c:	422b      	tst	r3, r5
   1181e:	d00b      	beq.n	11838 <USB_Handler+0x23c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11820:	2201      	movs	r2, #1
   11822:	40a2      	lsls	r2, r4
   11824:	4948      	ldr	r1, [pc, #288]	; (11948 <USB_Handler+0x34c>)
   11826:	6808      	ldr	r0, [r1, #0]
   11828:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   1182a:	4642      	mov	r2, r8
   1182c:	6812      	ldr	r2, [r2, #0]
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   1182e:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11830:	6812      	ldr	r2, [r2, #0]
   11832:	0171      	lsls	r1, r6, #5
   11834:	1852      	adds	r2, r2, r1
   11836:	71d3      	strb	r3, [r2, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
   11838:	2308      	movs	r3, #8
   1183a:	422b      	tst	r3, r5
   1183c:	d012      	beq.n	11864 <USB_Handler+0x268>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   1183e:	2201      	movs	r2, #1
   11840:	40a2      	lsls	r2, r4
   11842:	4941      	ldr	r1, [pc, #260]	; (11948 <USB_Handler+0x34c>)
   11844:	6808      	ldr	r0, [r1, #0]
   11846:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11848:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   1184a:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   1184c:	6810      	ldr	r0, [r2, #0]
   1184e:	0172      	lsls	r2, r6, #5
   11850:	6801      	ldr	r1, [r0, #0]
   11852:	468c      	mov	ip, r1
   11854:	4462      	add	r2, ip
   11856:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11858:	1903      	adds	r3, r0, r4
   1185a:	33ae      	adds	r3, #174	; 0xae
   1185c:	781b      	ldrb	r3, [r3, #0]
   1185e:	079b      	lsls	r3, r3, #30
   11860:	d500      	bpl.n	11864 <USB_Handler+0x268>
   11862:	e091      	b.n	11988 <USB_Handler+0x38c>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
   11864:	2310      	movs	r3, #16
   11866:	422b      	tst	r3, r5
   11868:	d011      	beq.n	1188e <USB_Handler+0x292>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   1186a:	2201      	movs	r2, #1
   1186c:	40a2      	lsls	r2, r4
   1186e:	4936      	ldr	r1, [pc, #216]	; (11948 <USB_Handler+0x34c>)
   11870:	6808      	ldr	r0, [r1, #0]
   11872:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11874:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11876:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11878:	6810      	ldr	r0, [r2, #0]
   1187a:	0172      	lsls	r2, r6, #5
   1187c:	6801      	ldr	r1, [r0, #0]
   1187e:	468c      	mov	ip, r1
   11880:	4462      	add	r2, ip
   11882:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11884:	1903      	adds	r3, r0, r4
   11886:	33ae      	adds	r3, #174	; 0xae
   11888:	781b      	ldrb	r3, [r3, #0]
   1188a:	075b      	lsls	r3, r3, #29
   1188c:	d46d      	bmi.n	1196a <USB_Handler+0x36e>
		if (flags & USB_HOST_PINTFLAG_STALL) {
   1188e:	2320      	movs	r3, #32
   11890:	422b      	tst	r3, r5
   11892:	d100      	bne.n	11896 <USB_Handler+0x29a>
   11894:	e6f0      	b.n	11678 <USB_Handler+0x7c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11896:	2201      	movs	r2, #1
   11898:	40a2      	lsls	r2, r4
   1189a:	492b      	ldr	r1, [pc, #172]	; (11948 <USB_Handler+0x34c>)
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   1189c:	0176      	lsls	r6, r6, #5
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   1189e:	6808      	ldr	r0, [r1, #0]
   118a0:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   118a2:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   118a4:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   118a6:	6810      	ldr	r0, [r2, #0]
   118a8:	6802      	ldr	r2, [r0, #0]
   118aa:	4694      	mov	ip, r2
   118ac:	4466      	add	r6, ip
   118ae:	71f3      	strb	r3, [r6, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   118b0:	1903      	adds	r3, r0, r4
   118b2:	33ae      	adds	r3, #174	; 0xae
   118b4:	781b      	ldrb	r3, [r3, #0]
   118b6:	071b      	lsls	r3, r3, #28
   118b8:	d400      	bmi.n	118bc <USB_Handler+0x2c0>
   118ba:	e6dd      	b.n	11678 <USB_Handler+0x7c>
				pipe_callback_para.pipe_num = pipe_int;
   118bc:	4924      	ldr	r1, [pc, #144]	; (11950 <USB_Handler+0x354>)
   118be:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
   118c0:	0124      	lsls	r4, r4, #4
   118c2:	1904      	adds	r4, r0, r4
   118c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   118c6:	4798      	blx	r3
   118c8:	e6d6      	b.n	11678 <USB_Handler+0x7c>
				pipe_callback_para.pipe_num = pipe_int;
   118ca:	4921      	ldr	r1, [pc, #132]	; (11950 <USB_Handler+0x354>)
   118cc:	700c      	strb	r4, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
   118ce:	683a      	ldr	r2, [r7, #0]
   118d0:	5c9b      	ldrb	r3, [r3, r2]
   118d2:	079b      	lsls	r3, r3, #30
   118d4:	0f9b      	lsrs	r3, r3, #30
   118d6:	2b01      	cmp	r3, #1
   118d8:	d100      	bne.n	118dc <USB_Handler+0x2e0>
   118da:	e0f3      	b.n	11ac4 <USB_Handler+0x4c8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   118dc:	4a1d      	ldr	r2, [pc, #116]	; (11954 <USB_Handler+0x358>)
   118de:	0163      	lsls	r3, r4, #5
   118e0:	18d3      	adds	r3, r2, r3
   118e2:	685a      	ldr	r2, [r3, #4]
   118e4:	0112      	lsls	r2, r2, #4
   118e6:	0c92      	lsrs	r2, r2, #18
   118e8:	804a      	strh	r2, [r1, #2]
   118ea:	b290      	uxth	r0, r2
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   118ec:	685a      	ldr	r2, [r3, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   118ee:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   118f0:	0492      	lsls	r2, r2, #18
   118f2:	0c92      	lsrs	r2, r2, #18
   118f4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   118f6:	685a      	ldr	r2, [r3, #4]
   118f8:	4691      	mov	r9, r2
   118fa:	4648      	mov	r0, r9
   118fc:	4a16      	ldr	r2, [pc, #88]	; (11958 <USB_Handler+0x35c>)
   118fe:	4010      	ands	r0, r2
					if (0 == pipe_callback_para.transfered_size) {
   11900:	4652      	mov	r2, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11902:	6058      	str	r0, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
   11904:	2a00      	cmp	r2, #0
   11906:	d103      	bne.n	11910 <USB_Handler+0x314>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   11908:	685b      	ldr	r3, [r3, #4]
   1190a:	049b      	lsls	r3, r3, #18
   1190c:	0c9b      	lsrs	r3, r3, #18
   1190e:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
   11910:	1ca3      	adds	r3, r4, #2
   11912:	011b      	lsls	r3, r3, #4
   11914:	18fb      	adds	r3, r7, r3
   11916:	685b      	ldr	r3, [r3, #4]
   11918:	0038      	movs	r0, r7
   1191a:	4798      	blx	r3
   1191c:	e77d      	b.n	1181a <USB_Handler+0x21e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
   1191e:	69c3      	ldr	r3, [r0, #28]
   11920:	4798      	blx	r3
   11922:	e743      	b.n	117ac <USB_Handler+0x1b0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
   11924:	6983      	ldr	r3, [r0, #24]
   11926:	4798      	blx	r3
   11928:	e730      	b.n	1178c <USB_Handler+0x190>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
   1192a:	68c3      	ldr	r3, [r0, #12]
   1192c:	4798      	blx	r3
   1192e:	e71e      	b.n	1176e <USB_Handler+0x172>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
   11930:	6903      	ldr	r3, [r0, #16]
   11932:	4798      	blx	r3
   11934:	e70f      	b.n	11756 <USB_Handler+0x15a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
   11936:	6943      	ldr	r3, [r0, #20]
   11938:	4798      	blx	r3
   1193a:	e700      	b.n	1173e <USB_Handler+0x142>
   1193c:	20000988 	.word	0x20000988
   11940:	2000098c 	.word	0x2000098c
   11944:	000163d8 	.word	0x000163d8
   11948:	20000998 	.word	0x20000998
   1194c:	000134d9 	.word	0x000134d9
   11950:	2000099c 	.word	0x2000099c
   11954:	20000f94 	.word	0x20000f94
   11958:	f0003fff 	.word	0xf0003fff
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
   1195c:	6883      	ldr	r3, [r0, #8]
   1195e:	4798      	blx	r3
   11960:	e6e1      	b.n	11726 <USB_Handler+0x12a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
   11962:	687b      	ldr	r3, [r7, #4]
   11964:	0038      	movs	r0, r7
   11966:	4798      	blx	r3
   11968:	e6ce      	b.n	11708 <USB_Handler+0x10c>
				pipe_callback_para.pipe_num = pipe_int;
   1196a:	4a7e      	ldr	r2, [pc, #504]	; (11b64 <USB_Handler+0x568>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   1196c:	4b7e      	ldr	r3, [pc, #504]	; (11b68 <USB_Handler+0x56c>)
   1196e:	0161      	lsls	r1, r4, #5
				pipe_callback_para.pipe_num = pipe_int;
   11970:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11972:	185b      	adds	r3, r3, r1
   11974:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
   11976:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11978:	011b      	lsls	r3, r3, #4
   1197a:	0c9b      	lsrs	r3, r3, #18
   1197c:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
   1197e:	0123      	lsls	r3, r4, #4
   11980:	18c3      	adds	r3, r0, r3
   11982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11984:	4798      	blx	r3
   11986:	e782      	b.n	1188e <USB_Handler+0x292>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
   11988:	4b77      	ldr	r3, [pc, #476]	; (11b68 <USB_Handler+0x56c>)
   1198a:	0162      	lsls	r2, r4, #5
   1198c:	189b      	adds	r3, r3, r2
   1198e:	89da      	ldrh	r2, [r3, #14]
   11990:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
   11992:	4974      	ldr	r1, [pc, #464]	; (11b64 <USB_Handler+0x568>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
   11994:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
   11996:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
   11998:	0123      	lsls	r3, r4, #4
   1199a:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
   1199c:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
   1199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119a0:	4798      	blx	r3
   119a2:	e75f      	b.n	11864 <USB_Handler+0x268>
   119a4:	002a      	movs	r2, r5
   119a6:	4645      	mov	r5, r8
   119a8:	4690      	mov	r8, r2
   119aa:	015a      	lsls	r2, r3, #5
   119ac:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
   119ae:	2208      	movs	r2, #8
   119b0:	2040      	movs	r0, #64	; 0x40
   119b2:	32ff      	adds	r2, #255	; 0xff
   119b4:	5cac      	ldrb	r4, [r5, r2]
   119b6:	464f      	mov	r7, r9
   119b8:	4220      	tst	r0, r4
   119ba:	d100      	bne.n	119be <USB_Handler+0x3c2>
   119bc:	e092      	b.n	11ae4 <USB_Handler+0x4e8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
   119be:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   119c0:	4640      	mov	r0, r8
   119c2:	3a88      	subs	r2, #136	; 0x88
   119c4:	3aff      	subs	r2, #255	; 0xff
   119c6:	4302      	orrs	r2, r0
   119c8:	4868      	ldr	r0, [pc, #416]	; (11b6c <USB_Handler+0x570>)
   119ca:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   119cc:	2260      	movs	r2, #96	; 0x60
   119ce:	420a      	tst	r2, r1
   119d0:	d100      	bne.n	119d4 <USB_Handler+0x3d8>
   119d2:	e651      	b.n	11678 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
   119d4:	011b      	lsls	r3, r3, #4
   119d6:	18fb      	adds	r3, r7, r3
   119d8:	33e0      	adds	r3, #224	; 0xe0
   119da:	681b      	ldr	r3, [r3, #0]
   119dc:	4963      	ldr	r1, [pc, #396]	; (11b6c <USB_Handler+0x570>)
   119de:	0038      	movs	r0, r7
   119e0:	4798      	blx	r3
   119e2:	e649      	b.n	11678 <USB_Handler+0x7c>
   119e4:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
   119e6:	9a01      	ldr	r2, [sp, #4]
   119e8:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
   119ea:	18fa      	adds	r2, r7, r3
   119ec:	3261      	adds	r2, #97	; 0x61
   119ee:	32ff      	adds	r2, #255	; 0xff
   119f0:	7812      	ldrb	r2, [r2, #0]
   119f2:	4210      	tst	r0, r2
   119f4:	d100      	bne.n	119f8 <USB_Handler+0x3fc>
   119f6:	e63f      	b.n	11678 <USB_Handler+0x7c>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   119f8:	4a5b      	ldr	r2, [pc, #364]	; (11b68 <USB_Handler+0x56c>)
   119fa:	0159      	lsls	r1, r3, #5
   119fc:	1852      	adds	r2, r2, r1
   119fe:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11a00:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11a02:	495a      	ldr	r1, [pc, #360]	; (11b6c <USB_Handler+0x570>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11a04:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11a06:	0492      	lsls	r2, r2, #18
   11a08:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11a0a:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11a0c:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11a0e:	681b      	ldr	r3, [r3, #0]
   11a10:	4648      	mov	r0, r9
   11a12:	4798      	blx	r3
   11a14:	e630      	b.n	11678 <USB_Handler+0x7c>
   11a16:	002a      	movs	r2, r5
   11a18:	4645      	mov	r5, r8
   11a1a:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11a1c:	2208      	movs	r2, #8
   11a1e:	2402      	movs	r4, #2
   11a20:	0158      	lsls	r0, r3, #5
   11a22:	182d      	adds	r5, r5, r0
   11a24:	32ff      	adds	r2, #255	; 0xff
   11a26:	5cae      	ldrb	r6, [r5, r2]
   11a28:	464f      	mov	r7, r9
   11a2a:	4234      	tst	r4, r6
   11a2c:	d064      	beq.n	11af8 <USB_Handler+0x4fc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
   11a2e:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   11a30:	4645      	mov	r5, r8
   11a32:	3a88      	subs	r2, #136	; 0x88
   11a34:	4c4d      	ldr	r4, [pc, #308]	; (11b6c <USB_Handler+0x570>)
   11a36:	3aff      	subs	r2, #255	; 0xff
   11a38:	432a      	orrs	r2, r5
   11a3a:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
   11a3c:	4a4a      	ldr	r2, [pc, #296]	; (11b68 <USB_Handler+0x56c>)
   11a3e:	1810      	adds	r0, r2, r0
   11a40:	6942      	ldr	r2, [r0, #20]
   11a42:	0492      	lsls	r2, r2, #18
   11a44:	0c92      	lsrs	r2, r2, #18
   11a46:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
   11a48:	078a      	lsls	r2, r1, #30
   11a4a:	d100      	bne.n	11a4e <USB_Handler+0x452>
   11a4c:	e614      	b.n	11678 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
   11a4e:	330d      	adds	r3, #13
   11a50:	011b      	lsls	r3, r3, #4
   11a52:	18fb      	adds	r3, r7, r3
   11a54:	685b      	ldr	r3, [r3, #4]
   11a56:	4945      	ldr	r1, [pc, #276]	; (11b6c <USB_Handler+0x570>)
   11a58:	0038      	movs	r0, r7
   11a5a:	4798      	blx	r3
   11a5c:	e60c      	b.n	11678 <USB_Handler+0x7c>
   11a5e:	003a      	movs	r2, r7
   11a60:	0028      	movs	r0, r5
   11a62:	464f      	mov	r7, r9
   11a64:	4645      	mov	r5, r8
   11a66:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11a68:	2208      	movs	r2, #8
   11a6a:	2408      	movs	r4, #8
   11a6c:	4680      	mov	r8, r0
   11a6e:	0158      	lsls	r0, r3, #5
   11a70:	182d      	adds	r5, r5, r0
   11a72:	32ff      	adds	r2, #255	; 0xff
   11a74:	5cae      	ldrb	r6, [r5, r2]
   11a76:	4234      	tst	r4, r6
   11a78:	d051      	beq.n	11b1e <USB_Handler+0x522>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
   11a7a:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
   11a7c:	4a3a      	ldr	r2, [pc, #232]	; (11b68 <USB_Handler+0x56c>)
   11a7e:	1810      	adds	r0, r2, r0
   11a80:	2202      	movs	r2, #2
   11a82:	7e84      	ldrb	r4, [r0, #26]
   11a84:	4222      	tst	r2, r4
   11a86:	d002      	beq.n	11a8e <USB_Handler+0x492>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
   11a88:	7e84      	ldrb	r4, [r0, #26]
   11a8a:	4394      	bics	r4, r2
   11a8c:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   11a8e:	2280      	movs	r2, #128	; 0x80
   11a90:	4640      	mov	r0, r8
   11a92:	4252      	negs	r2, r2
   11a94:	4302      	orrs	r2, r0
   11a96:	4835      	ldr	r0, [pc, #212]	; (11b6c <USB_Handler+0x570>)
   11a98:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11a9a:	6838      	ldr	r0, [r7, #0]
   11a9c:	464a      	mov	r2, r9
   11a9e:	4684      	mov	ip, r0
   11aa0:	0152      	lsls	r2, r2, #5
   11aa2:	4462      	add	r2, ip
   11aa4:	79d2      	ldrb	r2, [r2, #7]
   11aa6:	0792      	lsls	r2, r2, #30
   11aa8:	d500      	bpl.n	11aac <USB_Handler+0x4b0>
   11aaa:	e5e5      	b.n	11678 <USB_Handler+0x7c>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   11aac:	220c      	movs	r2, #12
   11aae:	420a      	tst	r2, r1
   11ab0:	d100      	bne.n	11ab4 <USB_Handler+0x4b8>
   11ab2:	e5e1      	b.n	11678 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
   11ab4:	011b      	lsls	r3, r3, #4
   11ab6:	18fb      	adds	r3, r7, r3
   11ab8:	33d8      	adds	r3, #216	; 0xd8
   11aba:	681b      	ldr	r3, [r3, #0]
   11abc:	492b      	ldr	r1, [pc, #172]	; (11b6c <USB_Handler+0x570>)
   11abe:	0038      	movs	r0, r7
   11ac0:	4798      	blx	r3
   11ac2:	e5d9      	b.n	11678 <USB_Handler+0x7c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   11ac4:	4a28      	ldr	r2, [pc, #160]	; (11b68 <USB_Handler+0x56c>)
   11ac6:	0163      	lsls	r3, r4, #5
   11ac8:	18d3      	adds	r3, r2, r3
   11aca:	685a      	ldr	r2, [r3, #4]
   11acc:	0492      	lsls	r2, r2, #18
   11ace:	0c92      	lsrs	r2, r2, #18
   11ad0:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11ad2:	685a      	ldr	r2, [r3, #4]
   11ad4:	0112      	lsls	r2, r2, #4
   11ad6:	0c92      	lsrs	r2, r2, #18
   11ad8:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   11ada:	685a      	ldr	r2, [r3, #4]
   11adc:	0b92      	lsrs	r2, r2, #14
   11ade:	0392      	lsls	r2, r2, #14
   11ae0:	605a      	str	r2, [r3, #4]
   11ae2:	e715      	b.n	11910 <USB_Handler+0x314>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
   11ae4:	2020      	movs	r0, #32
   11ae6:	5cac      	ldrb	r4, [r5, r2]
   11ae8:	4220      	tst	r0, r4
   11aea:	d100      	bne.n	11aee <USB_Handler+0x4f2>
   11aec:	e76e      	b.n	119cc <USB_Handler+0x3d0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
   11aee:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   11af0:	4640      	mov	r0, r8
   11af2:	4a1e      	ldr	r2, [pc, #120]	; (11b6c <USB_Handler+0x570>)
   11af4:	7190      	strb	r0, [r2, #6]
   11af6:	e769      	b.n	119cc <USB_Handler+0x3d0>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11af8:	5cac      	ldrb	r4, [r5, r2]
   11afa:	07e4      	lsls	r4, r4, #31
   11afc:	d5a4      	bpl.n	11a48 <USB_Handler+0x44c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
   11afe:	4664      	mov	r4, ip
   11b00:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   11b02:	4642      	mov	r2, r8
   11b04:	4c19      	ldr	r4, [pc, #100]	; (11b6c <USB_Handler+0x570>)
   11b06:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11b08:	4a17      	ldr	r2, [pc, #92]	; (11b68 <USB_Handler+0x56c>)
   11b0a:	1810      	adds	r0, r2, r0
   11b0c:	6842      	ldr	r2, [r0, #4]
   11b0e:	0492      	lsls	r2, r2, #18
   11b10:	0c92      	lsrs	r2, r2, #18
   11b12:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
   11b14:	6842      	ldr	r2, [r0, #4]
   11b16:	0112      	lsls	r2, r2, #4
   11b18:	0c92      	lsrs	r2, r2, #18
   11b1a:	80a2      	strh	r2, [r4, #4]
   11b1c:	e794      	b.n	11a48 <USB_Handler+0x44c>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   11b1e:	2404      	movs	r4, #4
   11b20:	5cae      	ldrb	r6, [r5, r2]
   11b22:	4234      	tst	r4, r6
   11b24:	d0c2      	beq.n	11aac <USB_Handler+0x4b0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
   11b26:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
   11b28:	4a0f      	ldr	r2, [pc, #60]	; (11b68 <USB_Handler+0x56c>)
   11b2a:	3c02      	subs	r4, #2
   11b2c:	1810      	adds	r0, r2, r0
   11b2e:	7a82      	ldrb	r2, [r0, #10]
   11b30:	4214      	tst	r4, r2
   11b32:	d002      	beq.n	11b3a <USB_Handler+0x53e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
   11b34:	7a82      	ldrb	r2, [r0, #10]
   11b36:	43a2      	bics	r2, r4
   11b38:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   11b3a:	4640      	mov	r0, r8
   11b3c:	4a0b      	ldr	r2, [pc, #44]	; (11b6c <USB_Handler+0x570>)
   11b3e:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
   11b40:	6838      	ldr	r0, [r7, #0]
   11b42:	464a      	mov	r2, r9
   11b44:	4684      	mov	ip, r0
   11b46:	0152      	lsls	r2, r2, #5
   11b48:	4462      	add	r2, ip
   11b4a:	79d2      	ldrb	r2, [r2, #7]
   11b4c:	07d2      	lsls	r2, r2, #31
   11b4e:	d5ad      	bpl.n	11aac <USB_Handler+0x4b0>
   11b50:	e592      	b.n	11678 <USB_Handler+0x7c>
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   11b52:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
   11b54:	4b04      	ldr	r3, [pc, #16]	; (11b68 <USB_Handler+0x56c>)
					device_callback_lpm_wakeup_enable =
   11b56:	4906      	ldr	r1, [pc, #24]	; (11b70 <USB_Handler+0x574>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
   11b58:	891b      	ldrh	r3, [r3, #8]
   11b5a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   11b5c:	4013      	ands	r3, r2
   11b5e:	600b      	str	r3, [r1, #0]
   11b60:	e57e      	b.n	11660 <USB_Handler+0x64>
   11b62:	46c0      	nop			; (mov r8, r8)
   11b64:	2000099c 	.word	0x2000099c
   11b68:	20000f94 	.word	0x20000f94
   11b6c:	20000990 	.word	0x20000990
   11b70:	2000098c 	.word	0x2000098c

00011b74 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
   11b74:	2200      	movs	r2, #0
	module_config->run_in_standby = 1;
   11b76:	2301      	movs	r3, #1
	module_config->select_host_mode = 0;
   11b78:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
   11b7a:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
   11b7c:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
   11b7e:	70c3      	strb	r3, [r0, #3]
}
   11b80:	4770      	bx	lr
   11b82:	46c0      	nop			; (mov r8, r8)

00011b84 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
   11b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
   11b86:	2300      	movs	r3, #0
{
   11b88:	46ce      	mov	lr, r9
   11b8a:	4647      	mov	r7, r8
   11b8c:	0004      	movs	r4, r0
   11b8e:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
   11b90:	4a71      	ldr	r2, [pc, #452]	; (11d58 <usb_init+0x1d4>)
{
   11b92:	b580      	push	{r7, lr}
	host_pipe_job_busy_status = 0;
   11b94:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
   11b96:	4a71      	ldr	r2, [pc, #452]	; (11d5c <usb_init+0x1d8>)

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   11b98:	6021      	str	r1, [r4, #0]
	_usb_instances = module_inst;
   11b9a:	6010      	str	r0, [r2, #0]
			PM->APBBMASK.reg |= mask;
   11b9c:	2020      	movs	r0, #32
{
   11b9e:	000d      	movs	r5, r1
   11ba0:	496f      	ldr	r1, [pc, #444]	; (11d60 <usb_init+0x1dc>)
   11ba2:	b083      	sub	sp, #12
   11ba4:	69ca      	ldr	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11ba6:	af01      	add	r7, sp, #4
   11ba8:	4302      	orrs	r2, r0
   11baa:	61ca      	str	r2, [r1, #28]
   11bac:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
   11bae:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
   11bb0:	3306      	adds	r3, #6
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11bb2:	2201      	movs	r2, #1
   11bb4:	4699      	mov	r9, r3
   11bb6:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
   11bb8:	4b6a      	ldr	r3, [pc, #424]	; (11d64 <usb_init+0x1e0>)
   11bba:	0039      	movs	r1, r7
   11bbc:	3808      	subs	r0, #8
   11bbe:	70ba      	strb	r2, [r7, #2]
   11bc0:	4698      	mov	r8, r3
   11bc2:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
   11bc4:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
   11bc6:	0039      	movs	r1, r7
   11bc8:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
   11bca:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
   11bcc:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
   11bce:	466a      	mov	r2, sp
   11bd0:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
   11bd2:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
   11bd4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
   11bd6:	2006      	movs	r0, #6
   11bd8:	4b63      	ldr	r3, [pc, #396]	; (11d68 <usb_init+0x1e4>)
   11bda:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
   11bdc:	4b63      	ldr	r3, [pc, #396]	; (11d6c <usb_init+0x1e8>)
   11bde:	2006      	movs	r0, #6
   11be0:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
   11be2:	2201      	movs	r2, #1
   11be4:	782b      	ldrb	r3, [r5, #0]
   11be6:	4313      	orrs	r3, r2
   11be8:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
   11bea:	78ab      	ldrb	r3, [r5, #2]
   11bec:	07db      	lsls	r3, r3, #31
   11bee:	d4fc      	bmi.n	11bea <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11bf0:	2103      	movs	r1, #3
   11bf2:	4a5f      	ldr	r2, [pc, #380]	; (11d70 <usb_init+0x1ec>)
   11bf4:	78d3      	ldrb	r3, [r2, #3]
   11bf6:	438b      	bics	r3, r1
   11bf8:	2102      	movs	r1, #2
   11bfa:	430b      	orrs	r3, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11bfc:	210c      	movs	r1, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11bfe:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11c00:	78d3      	ldrb	r3, [r2, #3]
   11c02:	438b      	bics	r3, r1
   11c04:	2108      	movs	r1, #8
   11c06:	430b      	orrs	r3, r1
   11c08:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
   11c0a:	4b5a      	ldr	r3, [pc, #360]	; (11d74 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
   11c0c:	681b      	ldr	r3, [r3, #0]
   11c0e:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
   11c10:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
   11c12:	06d2      	lsls	r2, r2, #27
   11c14:	d100      	bne.n	11c18 <usb_init+0x94>
   11c16:	e09c      	b.n	11d52 <usb_init+0x1ce>
   11c18:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
   11c1a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
   11c1c:	4856      	ldr	r0, [pc, #344]	; (11d78 <usb_init+0x1f4>)
   11c1e:	400b      	ands	r3, r1
   11c20:	019b      	lsls	r3, r3, #6
   11c22:	4002      	ands	r2, r0
   11c24:	4313      	orrs	r3, r2
   11c26:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
   11c28:	4b52      	ldr	r3, [pc, #328]	; (11d74 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
   11c2a:	681b      	ldr	r3, [r3, #0]
   11c2c:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
   11c2e:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
   11c30:	291f      	cmp	r1, #31
   11c32:	d100      	bne.n	11c36 <usb_init+0xb2>
   11c34:	e08b      	b.n	11d4e <usb_init+0x1ca>
   11c36:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
   11c38:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
   11c3a:	400b      	ands	r3, r1
   11c3c:	438a      	bics	r2, r1
   11c3e:	4313      	orrs	r3, r2
   11c40:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
   11c42:	4b4c      	ldr	r3, [pc, #304]	; (11d74 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
   11c44:	6819      	ldr	r1, [r3, #0]
   11c46:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
   11c48:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
   11c4a:	075b      	lsls	r3, r3, #29
   11c4c:	d100      	bne.n	11c50 <usb_init+0xcc>
   11c4e:	e07c      	b.n	11d4a <usb_init+0x1c6>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
   11c50:	2207      	movs	r2, #7
   11c52:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   11c54:	400a      	ands	r2, r1
   11c56:	4949      	ldr	r1, [pc, #292]	; (11d7c <usb_init+0x1f8>)
   11c58:	0312      	lsls	r2, r2, #12
   11c5a:	400b      	ands	r3, r1
   11c5c:	4313      	orrs	r3, r2
   11c5e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
   11c60:	237f      	movs	r3, #127	; 0x7f
   11c62:	7829      	ldrb	r1, [r5, #0]
   11c64:	7832      	ldrb	r2, [r6, #0]
   11c66:	400b      	ands	r3, r1
   11c68:	01d2      	lsls	r2, r2, #7
   11c6a:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   11c6c:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
   11c6e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   11c70:	7871      	ldrb	r1, [r6, #1]
   11c72:	782b      	ldrb	r3, [r5, #0]
   11c74:	400a      	ands	r2, r1
   11c76:	2104      	movs	r1, #4
   11c78:	0092      	lsls	r2, r2, #2
   11c7a:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
   11c7c:	4840      	ldr	r0, [pc, #256]	; (11d80 <usb_init+0x1fc>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   11c7e:	4313      	orrs	r3, r2
   11c80:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
   11c82:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
   11c84:	78f3      	ldrb	r3, [r6, #3]
   11c86:	2b01      	cmp	r3, #1
   11c88:	d059      	beq.n	11d3e <usb_init+0x1ba>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	d04f      	beq.n	11d2e <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
   11c8e:	2280      	movs	r2, #128	; 0x80
   11c90:	2100      	movs	r1, #0
   11c92:	0052      	lsls	r2, r2, #1
   11c94:	4b3b      	ldr	r3, [pc, #236]	; (11d84 <usb_init+0x200>)
   11c96:	4798      	blx	r3
   11c98:	0021      	movs	r1, r4
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
   11c9a:	2200      	movs	r2, #0
   11c9c:	1d23      	adds	r3, r4, #4
   11c9e:	3124      	adds	r1, #36	; 0x24
   11ca0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
   11ca2:	428b      	cmp	r3, r1
   11ca4:	d1fc      	bne.n	11ca0 <usb_init+0x11c>
   11ca6:	0021      	movs	r1, r4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
   11ca8:	2200      	movs	r2, #0
   11caa:	31a4      	adds	r1, #164	; 0xa4
   11cac:	601a      	str	r2, [r3, #0]
   11cae:	605a      	str	r2, [r3, #4]
   11cb0:	609a      	str	r2, [r3, #8]
   11cb2:	60da      	str	r2, [r3, #12]
   11cb4:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
   11cb6:	428b      	cmp	r3, r1
   11cb8:	d1f8      	bne.n	11cac <usb_init+0x128>
		}
	};
	module_inst->host_registered_callback_mask = 0;
   11cba:	23a4      	movs	r3, #164	; 0xa4
   11cbc:	54e2      	strb	r2, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
   11cbe:	3301      	adds	r3, #1
   11cc0:	54e2      	strb	r2, [r4, r3]
   11cc2:	0021      	movs	r1, r4
   11cc4:	0023      	movs	r3, r4
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
   11cc6:	2200      	movs	r2, #0
   11cc8:	33a6      	adds	r3, #166	; 0xa6
   11cca:	31ae      	adds	r1, #174	; 0xae
   11ccc:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
   11cce:	721a      	strb	r2, [r3, #8]
   11cd0:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
   11cd2:	428b      	cmp	r3, r1
   11cd4:	d1fa      	bne.n	11ccc <usb_init+0x148>
   11cd6:	0023      	movs	r3, r4
   11cd8:	0021      	movs	r1, r4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
   11cda:	2200      	movs	r2, #0
   11cdc:	33b8      	adds	r3, #184	; 0xb8
   11cde:	31d4      	adds	r1, #212	; 0xd4
   11ce0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
   11ce2:	428b      	cmp	r3, r1
   11ce4:	d1fc      	bne.n	11ce0 <usb_init+0x15c>
   11ce6:	0021      	movs	r1, r4
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
   11ce8:	2200      	movs	r2, #0
   11cea:	3155      	adds	r1, #85	; 0x55
   11cec:	31ff      	adds	r1, #255	; 0xff
   11cee:	601a      	str	r2, [r3, #0]
   11cf0:	605a      	str	r2, [r3, #4]
   11cf2:	609a      	str	r2, [r3, #8]
   11cf4:	60da      	str	r2, [r3, #12]
   11cf6:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
   11cf8:	4299      	cmp	r1, r3
   11cfa:	d1f8      	bne.n	11cee <usb_init+0x16a>
		}
	}
	module_inst->device_registered_callback_mask = 0;
   11cfc:	23aa      	movs	r3, #170	; 0xaa
   11cfe:	005b      	lsls	r3, r3, #1
   11d00:	52e2      	strh	r2, [r4, r3]
	module_inst->device_enabled_callback_mask = 0;
   11d02:	3302      	adds	r3, #2
   11d04:	52e2      	strh	r2, [r4, r3]
   11d06:	0023      	movs	r3, r4
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
   11d08:	2200      	movs	r2, #0
   11d0a:	3359      	adds	r3, #89	; 0x59
   11d0c:	3461      	adds	r4, #97	; 0x61
   11d0e:	33ff      	adds	r3, #255	; 0xff
   11d10:	34ff      	adds	r4, #255	; 0xff
   11d12:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
   11d14:	721a      	strb	r2, [r3, #8]
   11d16:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
   11d18:	429c      	cmp	r4, r3
   11d1a:	d1fa      	bne.n	11d12 <usb_init+0x18e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d1c:	2280      	movs	r2, #128	; 0x80

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
   11d1e:	2000      	movs	r0, #0
   11d20:	4b19      	ldr	r3, [pc, #100]	; (11d88 <usb_init+0x204>)
   11d22:	601a      	str	r2, [r3, #0]
   11d24:	b003      	add	sp, #12
   11d26:	bc0c      	pop	{r2, r3}
   11d28:	4690      	mov	r8, r2
   11d2a:	4699      	mov	r9, r3
   11d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
   11d2e:	210c      	movs	r1, #12
   11d30:	6822      	ldr	r2, [r4, #0]
   11d32:	8913      	ldrh	r3, [r2, #8]
   11d34:	438b      	bics	r3, r1
   11d36:	2104      	movs	r1, #4
   11d38:	430b      	orrs	r3, r1
   11d3a:	8113      	strh	r3, [r2, #8]
   11d3c:	e7a7      	b.n	11c8e <usb_init+0x10a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
   11d3e:	6822      	ldr	r2, [r4, #0]
   11d40:	3108      	adds	r1, #8
   11d42:	8913      	ldrh	r3, [r2, #8]
   11d44:	438b      	bics	r3, r1
   11d46:	8113      	strh	r3, [r2, #8]
   11d48:	e7a1      	b.n	11c8e <usb_init+0x10a>
	if (pad_trim == 0x7) {
   11d4a:	2103      	movs	r1, #3
   11d4c:	e780      	b.n	11c50 <usb_init+0xcc>
	if (pad_transp == 0x1F) {
   11d4e:	231d      	movs	r3, #29
   11d50:	e771      	b.n	11c36 <usb_init+0xb2>
	if (pad_transn == 0x1F) {
   11d52:	2305      	movs	r3, #5
   11d54:	e760      	b.n	11c18 <usb_init+0x94>
   11d56:	46c0      	nop			; (mov r8, r8)
   11d58:	20000998 	.word	0x20000998
   11d5c:	20000988 	.word	0x20000988
   11d60:	40000400 	.word	0x40000400
   11d64:	00010269 	.word	0x00010269
   11d68:	00010169 	.word	0x00010169
   11d6c:	000100e1 	.word	0x000100e1
   11d70:	41005000 	.word	0x41005000
   11d74:	00806024 	.word	0x00806024
   11d78:	fffff83f 	.word	0xfffff83f
   11d7c:	ffff8fff 	.word	0xffff8fff
   11d80:	20000f94 	.word	0x20000f94
   11d84:	000135cb 	.word	0x000135cb
   11d88:	e000e100 	.word	0xe000e100

00011d8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11d8c:	e7fe      	b.n	11d8c <Dummy_Handler>
   11d8e:	46c0      	nop			; (mov r8, r8)

00011d90 <Reset_Handler>:
        if (pSrc != pDest) {
   11d90:	4828      	ldr	r0, [pc, #160]	; (11e34 <Reset_Handler+0xa4>)
   11d92:	4929      	ldr	r1, [pc, #164]	; (11e38 <Reset_Handler+0xa8>)
{
   11d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11d96:	4288      	cmp	r0, r1
   11d98:	d00d      	beq.n	11db6 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
   11d9a:	4a28      	ldr	r2, [pc, #160]	; (11e3c <Reset_Handler+0xac>)
   11d9c:	4291      	cmp	r1, r2
   11d9e:	d20a      	bcs.n	11db6 <Reset_Handler+0x26>
   11da0:	43cb      	mvns	r3, r1
   11da2:	189b      	adds	r3, r3, r2
   11da4:	2200      	movs	r2, #0
   11da6:	089b      	lsrs	r3, r3, #2
   11da8:	3301      	adds	r3, #1
   11daa:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
   11dac:	5884      	ldr	r4, [r0, r2]
   11dae:	508c      	str	r4, [r1, r2]
   11db0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   11db2:	429a      	cmp	r2, r3
   11db4:	d1fa      	bne.n	11dac <Reset_Handler+0x1c>
        for (pDest = &_szero; pDest < &_ezero;) {
   11db6:	4a22      	ldr	r2, [pc, #136]	; (11e40 <Reset_Handler+0xb0>)
   11db8:	4922      	ldr	r1, [pc, #136]	; (11e44 <Reset_Handler+0xb4>)
   11dba:	428a      	cmp	r2, r1
   11dbc:	d209      	bcs.n	11dd2 <Reset_Handler+0x42>
   11dbe:	43d3      	mvns	r3, r2
   11dc0:	185b      	adds	r3, r3, r1
   11dc2:	2103      	movs	r1, #3
   11dc4:	438b      	bics	r3, r1
                *pDest++ = 0;
   11dc6:	2100      	movs	r1, #0
   11dc8:	3304      	adds	r3, #4
   11dca:	18d3      	adds	r3, r2, r3
   11dcc:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   11dce:	429a      	cmp	r2, r3
   11dd0:	d1fc      	bne.n	11dcc <Reset_Handler+0x3c>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   11dd2:	21ff      	movs	r1, #255	; 0xff
   11dd4:	4b1c      	ldr	r3, [pc, #112]	; (11e48 <Reset_Handler+0xb8>)
   11dd6:	4a1d      	ldr	r2, [pc, #116]	; (11e4c <Reset_Handler+0xbc>)
   11dd8:	438b      	bics	r3, r1
   11dda:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11ddc:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11dde:	2503      	movs	r5, #3
   11de0:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11de2:	270c      	movs	r7, #12
   11de4:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   11de6:	4a1a      	ldr	r2, [pc, #104]	; (11e50 <Reset_Handler+0xc0>)
   11de8:	39fd      	subs	r1, #253	; 0xfd
   11dea:	005b      	lsls	r3, r3, #1
   11dec:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   11dee:	4a19      	ldr	r2, [pc, #100]	; (11e54 <Reset_Handler+0xc4>)
   11df0:	78d3      	ldrb	r3, [r2, #3]
   11df2:	43ab      	bics	r3, r5
   11df4:	4323      	orrs	r3, r4
   11df6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   11df8:	78d3      	ldrb	r3, [r2, #3]
   11dfa:	43bb      	bics	r3, r7
   11dfc:	4333      	orrs	r3, r6
   11dfe:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   11e00:	2230      	movs	r2, #48	; 0x30
   11e02:	4b15      	ldr	r3, [pc, #84]	; (11e58 <Reset_Handler+0xc8>)
   11e04:	7b98      	ldrb	r0, [r3, #14]
   11e06:	4390      	bics	r0, r2
   11e08:	2220      	movs	r2, #32
   11e0a:	4310      	orrs	r0, r2
   11e0c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   11e0e:	7b99      	ldrb	r1, [r3, #14]
   11e10:	43b9      	bics	r1, r7
   11e12:	4331      	orrs	r1, r6
   11e14:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11e16:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11e18:	7b9a      	ldrb	r2, [r3, #14]
   11e1a:	43aa      	bics	r2, r5
   11e1c:	4322      	orrs	r2, r4
   11e1e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   11e20:	4a0e      	ldr	r2, [pc, #56]	; (11e5c <Reset_Handler+0xcc>)
   11e22:	6853      	ldr	r3, [r2, #4]
   11e24:	430b      	orrs	r3, r1
   11e26:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11e28:	4b0d      	ldr	r3, [pc, #52]	; (11e60 <Reset_Handler+0xd0>)
   11e2a:	4798      	blx	r3
        main();
   11e2c:	4b0d      	ldr	r3, [pc, #52]	; (11e64 <Reset_Handler+0xd4>)
   11e2e:	4798      	blx	r3
   11e30:	e7fe      	b.n	11e30 <Reset_Handler+0xa0>
   11e32:	46c0      	nop			; (mov r8, r8)
   11e34:	000165c0 	.word	0x000165c0
   11e38:	20000000 	.word	0x20000000
   11e3c:	200003cc 	.word	0x200003cc
   11e40:	200003d0 	.word	0x200003d0
   11e44:	200010a4 	.word	0x200010a4
   11e48:	00008000 	.word	0x00008000
   11e4c:	e000ed00 	.word	0xe000ed00
   11e50:	41007000 	.word	0x41007000
   11e54:	41005000 	.word	0x41005000
   11e58:	41004800 	.word	0x41004800
   11e5c:	41004000 	.word	0x41004000
   11e60:	00013525 	.word	0x00013525
   11e64:	00009f39 	.word	0x00009f39

00011e68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e6a:	46c6      	mov	lr, r8
   11e6c:	000c      	movs	r4, r1
   11e6e:	b500      	push	{lr}
   11e70:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   11e72:	2800      	cmp	r0, #0
   11e74:	d112      	bne.n	11e9c <_read+0x34>
		return -1;
	}

	for (; len > 0; --len) {
   11e76:	2a00      	cmp	r2, #0
   11e78:	dd0d      	ble.n	11e96 <_read+0x2e>
   11e7a:	4e0a      	ldr	r6, [pc, #40]	; (11ea4 <_read+0x3c>)
   11e7c:	4d0a      	ldr	r5, [pc, #40]	; (11ea8 <_read+0x40>)
   11e7e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   11e80:	0021      	movs	r1, r4
   11e82:	6830      	ldr	r0, [r6, #0]
   11e84:	682b      	ldr	r3, [r5, #0]
		ptr++;
   11e86:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   11e88:	4798      	blx	r3
	for (; len > 0; --len) {
   11e8a:	42bc      	cmp	r4, r7
   11e8c:	d1f8      	bne.n	11e80 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   11e8e:	4640      	mov	r0, r8
   11e90:	bc04      	pop	{r2}
   11e92:	4690      	mov	r8, r2
   11e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; len > 0; --len) {
   11e96:	2300      	movs	r3, #0
   11e98:	4698      	mov	r8, r3
   11e9a:	e7f8      	b.n	11e8e <_read+0x26>
		return -1;
   11e9c:	2301      	movs	r3, #1
   11e9e:	425b      	negs	r3, r3
   11ea0:	4698      	mov	r8, r3
   11ea2:	e7f4      	b.n	11e8e <_read+0x26>
   11ea4:	2000109c 	.word	0x2000109c
   11ea8:	20001094 	.word	0x20001094

00011eac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   11eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   11eae:	46c6      	mov	lr, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   11eb0:	3801      	subs	r0, #1
{
   11eb2:	b500      	push	{lr}
   11eb4:	000e      	movs	r6, r1
   11eb6:	0015      	movs	r5, r2
	if ((file != 1) && (file != 2) && (file!=3)) {
   11eb8:	2802      	cmp	r0, #2
   11eba:	d810      	bhi.n	11ede <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   11ebc:	2400      	movs	r4, #0
   11ebe:	2a00      	cmp	r2, #0
   11ec0:	d00f      	beq.n	11ee2 <_write+0x36>
   11ec2:	4b0a      	ldr	r3, [pc, #40]	; (11eec <_write+0x40>)
   11ec4:	4f0a      	ldr	r7, [pc, #40]	; (11ef0 <_write+0x44>)
   11ec6:	4698      	mov	r8, r3
   11ec8:	e002      	b.n	11ed0 <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   11eca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   11ecc:	42a5      	cmp	r5, r4
   11ece:	d008      	beq.n	11ee2 <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   11ed0:	4643      	mov	r3, r8
   11ed2:	5d31      	ldrb	r1, [r6, r4]
   11ed4:	6818      	ldr	r0, [r3, #0]
   11ed6:	683b      	ldr	r3, [r7, #0]
   11ed8:	4798      	blx	r3
   11eda:	2800      	cmp	r0, #0
   11edc:	daf5      	bge.n	11eca <_write+0x1e>
		return -1;
   11ede:	2401      	movs	r4, #1
   11ee0:	4264      	negs	r4, r4
	}
	return nChars;
}
   11ee2:	0020      	movs	r0, r4
   11ee4:	bc04      	pop	{r2}
   11ee6:	4690      	mov	r8, r2
   11ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eea:	46c0      	nop			; (mov r8, r8)
   11eec:	2000109c 	.word	0x2000109c
   11ef0:	20001098 	.word	0x20001098

00011ef4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   11ef4:	4a04      	ldr	r2, [pc, #16]	; (11f08 <_sbrk+0x14>)
   11ef6:	6813      	ldr	r3, [r2, #0]
   11ef8:	2b00      	cmp	r3, #0
   11efa:	d003      	beq.n	11f04 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
   11efc:	1818      	adds	r0, r3, r0
   11efe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
   11f00:	0018      	movs	r0, r3
   11f02:	4770      	bx	lr
   11f04:	4b01      	ldr	r3, [pc, #4]	; (11f0c <_sbrk+0x18>)
   11f06:	e7f9      	b.n	11efc <_sbrk+0x8>
   11f08:	200009a4 	.word	0x200009a4
   11f0c:	200030a8 	.word	0x200030a8

00011f10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   11f10:	2001      	movs	r0, #1
   11f12:	4240      	negs	r0, r0
   11f14:	4770      	bx	lr
   11f16:	46c0      	nop			; (mov r8, r8)

00011f18 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   11f18:	2380      	movs	r3, #128	; 0x80
   11f1a:	019b      	lsls	r3, r3, #6

	return 0;
}
   11f1c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   11f1e:	604b      	str	r3, [r1, #4]
}
   11f20:	4770      	bx	lr
   11f22:	46c0      	nop			; (mov r8, r8)

00011f24 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   11f24:	2001      	movs	r0, #1
   11f26:	4770      	bx	lr

00011f28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   11f28:	2000      	movs	r0, #0
   11f2a:	4770      	bx	lr

00011f2c <disk_initialize>:
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   11f2c:	23a0      	movs	r3, #160	; 0xa0
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11f2e:	b530      	push	{r4, r5, lr}
   11f30:	b087      	sub	sp, #28
   11f32:	aa01      	add	r2, sp, #4
   11f34:	011b      	lsls	r3, r3, #4
   11f36:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   11f38:	2300      	movs	r3, #0
	config->year_init_value     = 2000;
   11f3a:	21fa      	movs	r1, #250	; 0xfa
	config->clear_on_match      = false;
   11f3c:	7093      	strb	r3, [r2, #2]
	config->continuously_update = false;
   11f3e:	70d3      	strb	r3, [r2, #3]
	config_rtc_calendar.alarm[0].time = init_time;
   11f40:	7253      	strb	r3, [r2, #9]
   11f42:	7293      	strb	r3, [r2, #10]
   11f44:	72d3      	strb	r3, [r2, #11]
   11f46:	4b15      	ldr	r3, [pc, #84]	; (11f9c <disk_initialize+0x70>)
	config->year_init_value     = 2000;
   11f48:	00c9      	lsls	r1, r1, #3
{
   11f4a:	0005      	movs	r5, r0
   11f4c:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.alarm[0].time = init_time;
   11f4e:	2004      	movs	r0, #4
	config_rtc_calendar.clock_24h     = true;
   11f50:	2101      	movs	r1, #1
	config_rtc_calendar.alarm[0].time = init_time;
   11f52:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11f54:	2306      	movs	r3, #6
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   11f56:	4c12      	ldr	r4, [pc, #72]	; (11fa0 <disk_initialize+0x74>)
	config_rtc_calendar.clock_24h     = true;
   11f58:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   11f5a:	7210      	strb	r0, [r2, #8]
   11f5c:	7311      	strb	r1, [r2, #12]
   11f5e:	7351      	strb	r1, [r2, #13]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11f60:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   11f62:	0020      	movs	r0, r4
   11f64:	4b0f      	ldr	r3, [pc, #60]	; (11fa4 <disk_initialize+0x78>)
   11f66:	4910      	ldr	r1, [pc, #64]	; (11fa8 <disk_initialize+0x7c>)
   11f68:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   11f6a:	0020      	movs	r0, r4
   11f6c:	4b0f      	ldr	r3, [pc, #60]	; (11fac <disk_initialize+0x80>)
   11f6e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   11f70:	2d01      	cmp	r5, #1
   11f72:	d902      	bls.n	11f7a <disk_initialize+0x4e>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   11f74:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   11f76:	b007      	add	sp, #28
   11f78:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   11f7a:	0028      	movs	r0, r5
   11f7c:	4c0c      	ldr	r4, [pc, #48]	; (11fb0 <disk_initialize+0x84>)
   11f7e:	47a0      	blx	r4
		if (CTRL_BUSY != mem_status) {
   11f80:	2803      	cmp	r0, #3
   11f82:	d101      	bne.n	11f88 <disk_initialize+0x5c>
		mem_status = mem_test_unit_ready(drv);
   11f84:	0028      	movs	r0, r5
   11f86:	47a0      	blx	r4
	if (mem_status != CTRL_GOOD) {
   11f88:	2800      	cmp	r0, #0
   11f8a:	d1f3      	bne.n	11f74 <disk_initialize+0x48>
	if (mem_wr_protect(drv)) {
   11f8c:	4b09      	ldr	r3, [pc, #36]	; (11fb4 <disk_initialize+0x88>)
   11f8e:	0028      	movs	r0, r5
   11f90:	4798      	blx	r3
	return 0;
   11f92:	1e43      	subs	r3, r0, #1
   11f94:	4198      	sbcs	r0, r3
   11f96:	0080      	lsls	r0, r0, #2
   11f98:	e7ed      	b.n	11f76 <disk_initialize+0x4a>
   11f9a:	46c0      	nop			; (mov r8, r8)
   11f9c:	000007de 	.word	0x000007de
   11fa0:	200009c4 	.word	0x200009c4
   11fa4:	0000f10d 	.word	0x0000f10d
   11fa8:	40001400 	.word	0x40001400
   11fac:	0000efb1 	.word	0x0000efb1
   11fb0:	0000de95 	.word	0x0000de95
   11fb4:	0000dec9 	.word	0x0000dec9

00011fb8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   11fb8:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   11fba:	4b06      	ldr	r3, [pc, #24]	; (11fd4 <disk_status+0x1c>)
   11fbc:	4798      	blx	r3
   11fbe:	2800      	cmp	r0, #0
   11fc0:	d006      	beq.n	11fd0 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   11fc2:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
   11fc4:	2802      	cmp	r0, #2
   11fc6:	d101      	bne.n	11fcc <disk_status+0x14>
	default:
		return STA_NOINIT;
	}
}
   11fc8:	0018      	movs	r0, r3
   11fca:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
   11fcc:	3b02      	subs	r3, #2
   11fce:	e7fb      	b.n	11fc8 <disk_status+0x10>
		return 0;
   11fd0:	2300      	movs	r3, #0
   11fd2:	e7f9      	b.n	11fc8 <disk_status+0x10>
   11fd4:	0000de95 	.word	0x0000de95

00011fd8 <disk_read>:
   11fd8:	2001      	movs	r0, #1
   11fda:	4770      	bx	lr

00011fdc <disk_write>:
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11fdc:	2001      	movs	r0, #1
   11fde:	4770      	bx	lr

00011fe0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   11fe0:	b510      	push	{r4, lr}
   11fe2:	0014      	movs	r4, r2
   11fe4:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   11fe6:	2901      	cmp	r1, #1
   11fe8:	d020      	beq.n	1202c <disk_ioctl+0x4c>
   11fea:	2900      	cmp	r1, #0
   11fec:	d018      	beq.n	12020 <disk_ioctl+0x40>
   11fee:	2902      	cmp	r1, #2
   11ff0:	d007      	beq.n	12002 <disk_ioctl+0x22>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   11ff2:	2004      	movs	r0, #4
	switch (ctrl) {
   11ff4:	2903      	cmp	r1, #3
   11ff6:	d102      	bne.n	11ffe <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   11ff8:	2301      	movs	r3, #1
		res = RES_OK;
   11ffa:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
   11ffc:	6013      	str	r3, [r2, #0]
	}

	return res;
}
   11ffe:	b002      	add	sp, #8
   12000:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
   12002:	4b0f      	ldr	r3, [pc, #60]	; (12040 <disk_ioctl+0x60>)
   12004:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   12006:	1e43      	subs	r3, r0, #1
   12008:	b2db      	uxtb	r3, r3
   1200a:	2b01      	cmp	r3, #1
   1200c:	d904      	bls.n	12018 <disk_ioctl+0x38>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1200e:	22fb      	movs	r2, #251	; 0xfb
   12010:	1f03      	subs	r3, r0, #4
			return RES_ERROR;
   12012:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   12014:	4213      	tst	r3, r2
   12016:	d1f2      	bne.n	11ffe <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   12018:	2300      	movs	r3, #0
		res = RES_OK;
   1201a:	2000      	movs	r0, #0
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1201c:	7023      	strb	r3, [r4, #0]
	break;
   1201e:	e7ee      	b.n	11ffe <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   12020:	4b08      	ldr	r3, [pc, #32]	; (12044 <disk_ioctl+0x64>)
   12022:	4798      	blx	r3
   12024:	2800      	cmp	r0, #0
   12026:	d009      	beq.n	1203c <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   12028:	2003      	movs	r0, #3
   1202a:	e7e8      	b.n	11ffe <disk_ioctl+0x1e>
		mem_read_capacity(drv, &ul_last_sector_num);
   1202c:	4b06      	ldr	r3, [pc, #24]	; (12048 <disk_ioctl+0x68>)
   1202e:	a901      	add	r1, sp, #4
   12030:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   12032:	9b01      	ldr	r3, [sp, #4]
		res = RES_OK;
   12034:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
   12036:	3301      	adds	r3, #1
   12038:	6023      	str	r3, [r4, #0]
	break;
   1203a:	e7e0      	b.n	11ffe <disk_ioctl+0x1e>
			res = RES_OK;
   1203c:	2000      	movs	r0, #0
   1203e:	e7de      	b.n	11ffe <disk_ioctl+0x1e>
   12040:	0000dec1 	.word	0x0000dec1
   12044:	0000de95 	.word	0x0000de95
   12048:	0000dea9 	.word	0x0000dea9

0001204c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1204c:	b500      	push	{lr}
   1204e:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   12050:	4669      	mov	r1, sp
   12052:	480f      	ldr	r0, [pc, #60]	; (12090 <get_fattime+0x44>)
   12054:	4b0f      	ldr	r3, [pc, #60]	; (12094 <get_fattime+0x48>)
   12056:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   12058:	466b      	mov	r3, sp
   1205a:	7958      	ldrb	r0, [r3, #5]
			| (current_time.day << 16)
   1205c:	791b      	ldrb	r3, [r3, #4]
			| (current_time.month << 21)
   1205e:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   12060:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   12062:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   12064:	466b      	mov	r3, sp
   12066:	789b      	ldrb	r3, [r3, #2]
	ul_time = ((current_time.year - 1980) << 25)
   12068:	4a0b      	ldr	r2, [pc, #44]	; (12098 <get_fattime+0x4c>)
			| (current_time.hour << 11)
   1206a:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1206c:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1206e:	466b      	mov	r3, sp
   12070:	785b      	ldrb	r3, [r3, #1]
	ul_time = ((current_time.year - 1980) << 25)
   12072:	4694      	mov	ip, r2
			| (current_time.minute << 5)
   12074:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   12076:	4318      	orrs	r0, r3
   12078:	466b      	mov	r3, sp
   1207a:	781b      	ldrb	r3, [r3, #0]
   1207c:	085b      	lsrs	r3, r3, #1
   1207e:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   12080:	466b      	mov	r3, sp
   12082:	88db      	ldrh	r3, [r3, #6]
   12084:	4463      	add	r3, ip
   12086:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   12088:	4318      	orrs	r0, r3

	return ul_time;
}
   1208a:	b003      	add	sp, #12
   1208c:	bd00      	pop	{pc}
   1208e:	46c0      	nop			; (mov r8, r8)
   12090:	200009c4 	.word	0x200009c4
   12094:	0000f095 	.word	0x0000f095
   12098:	fffff844 	.word	0xfffff844

0001209c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   1209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1209e:	4647      	mov	r7, r8
   120a0:	46ce      	mov	lr, r9
   120a2:	b580      	push	{r7, lr}
	DWORD wsect;


	wsect = fs->winsect;
   120a4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   120a6:	0004      	movs	r4, r0
   120a8:	000f      	movs	r7, r1
	if (wsect != sector) {	/* Changed current window */
   120aa:	428d      	cmp	r5, r1
   120ac:	d004      	beq.n	120b8 <move_window+0x1c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   120ae:	7903      	ldrb	r3, [r0, #4]
   120b0:	2b00      	cmp	r3, #0
   120b2:	d111      	bne.n	120d8 <move_window+0x3c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
   120b4:	2f00      	cmp	r7, #0
   120b6:	d104      	bne.n	120c2 <move_window+0x26>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
   120b8:	2000      	movs	r0, #0
}
   120ba:	bc0c      	pop	{r2, r3}
   120bc:	4690      	mov	r8, r2
   120be:	4699      	mov	r9, r3
   120c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   120c2:	0021      	movs	r1, r4
   120c4:	7860      	ldrb	r0, [r4, #1]
   120c6:	2301      	movs	r3, #1
   120c8:	003a      	movs	r2, r7
   120ca:	3130      	adds	r1, #48	; 0x30
   120cc:	4d14      	ldr	r5, [pc, #80]	; (12120 <move_window+0x84>)
   120ce:	47a8      	blx	r5
   120d0:	2800      	cmp	r0, #0
   120d2:	d123      	bne.n	1211c <move_window+0x80>
			fs->winsect = sector;
   120d4:	62e7      	str	r7, [r4, #44]	; 0x2c
   120d6:	e7f0      	b.n	120ba <move_window+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   120d8:	2330      	movs	r3, #48	; 0x30
   120da:	4698      	mov	r8, r3
   120dc:	4e11      	ldr	r6, [pc, #68]	; (12124 <move_window+0x88>)
   120de:	4480      	add	r8, r0
   120e0:	3b2f      	subs	r3, #47	; 0x2f
   120e2:	7840      	ldrb	r0, [r0, #1]
   120e4:	002a      	movs	r2, r5
   120e6:	4641      	mov	r1, r8
   120e8:	46b1      	mov	r9, r6
   120ea:	47b0      	blx	r6
   120ec:	2800      	cmp	r0, #0
   120ee:	d115      	bne.n	1211c <move_window+0x80>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   120f0:	69e3      	ldr	r3, [r4, #28]
   120f2:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   120f4:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   120f6:	189a      	adds	r2, r3, r2
   120f8:	4295      	cmp	r5, r2
   120fa:	d2db      	bcs.n	120b4 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   120fc:	78e6      	ldrb	r6, [r4, #3]
   120fe:	2e01      	cmp	r6, #1
   12100:	d801      	bhi.n	12106 <move_window+0x6a>
   12102:	e7d7      	b.n	120b4 <move_window+0x18>
   12104:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   12106:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12108:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   1210a:	7860      	ldrb	r0, [r4, #1]
   1210c:	2301      	movs	r3, #1
   1210e:	002a      	movs	r2, r5
   12110:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12112:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
   12114:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12116:	2e01      	cmp	r6, #1
   12118:	d1f4      	bne.n	12104 <move_window+0x68>
   1211a:	e7cb      	b.n	120b4 <move_window+0x18>
				return FR_DISK_ERR;
   1211c:	2001      	movs	r0, #1
   1211e:	e7cc      	b.n	120ba <move_window+0x1e>
   12120:	00011fd9 	.word	0x00011fd9
   12124:	00011fdd 	.word	0x00011fdd

00012128 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   12128:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;


	res = move_window(fs, 0);
   1212a:	2100      	movs	r1, #0
   1212c:	4b2d      	ldr	r3, [pc, #180]	; (121e4 <sync+0xbc>)
{
   1212e:	0005      	movs	r5, r0
	res = move_window(fs, 0);
   12130:	4798      	blx	r3
	if (res == FR_OK) {
   12132:	2800      	cmp	r0, #0
   12134:	d10a      	bne.n	1214c <sync+0x24>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   12136:	782a      	ldrb	r2, [r5, #0]
   12138:	2a03      	cmp	r2, #3
   1213a:	d008      	beq.n	1214e <sync+0x26>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   1213c:	4b2a      	ldr	r3, [pc, #168]	; (121e8 <sync+0xc0>)
   1213e:	7868      	ldrb	r0, [r5, #1]
   12140:	2200      	movs	r2, #0
   12142:	2100      	movs	r1, #0
   12144:	4798      	blx	r3
   12146:	1e43      	subs	r3, r0, #1
   12148:	4198      	sbcs	r0, r3
   1214a:	b2c0      	uxtb	r0, r0
			res = FR_DISK_ERR;
	}

	return res;
}
   1214c:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   1214e:	796a      	ldrb	r2, [r5, #5]
   12150:	2a00      	cmp	r2, #0
   12152:	d0f3      	beq.n	1213c <sync+0x14>
			mem_set(fs->win, 0, 512);
   12154:	0029      	movs	r1, r5
   12156:	228c      	movs	r2, #140	; 0x8c
   12158:	3130      	adds	r1, #48	; 0x30
   1215a:	000b      	movs	r3, r1
		*d++ = (BYTE)val;
   1215c:	2400      	movs	r4, #0
   1215e:	0092      	lsls	r2, r2, #2
			fs->winsect = 0;
   12160:	62e8      	str	r0, [r5, #44]	; 0x2c
   12162:	18aa      	adds	r2, r5, r2
		*d++ = (BYTE)val;
   12164:	701c      	strb	r4, [r3, #0]
   12166:	3301      	adds	r3, #1
	while (cnt--)
   12168:	4293      	cmp	r3, r2
   1216a:	d1fb      	bne.n	12164 <sync+0x3c>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   1216c:	2255      	movs	r2, #85	; 0x55
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   1216e:	2033      	movs	r0, #51	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   12170:	2685      	movs	r6, #133	; 0x85
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   12172:	4b1e      	ldr	r3, [pc, #120]	; (121ec <sync+0xc4>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   12174:	00b6      	lsls	r6, r6, #2
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   12176:	54ea      	strb	r2, [r5, r3]
   12178:	4b1d      	ldr	r3, [pc, #116]	; (121f0 <sync+0xc8>)
   1217a:	3255      	adds	r2, #85	; 0x55
   1217c:	54ea      	strb	r2, [r5, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   1217e:	3bde      	subs	r3, #222	; 0xde
   12180:	3bff      	subs	r3, #255	; 0xff
   12182:	3a7a      	subs	r2, #122	; 0x7a
   12184:	54ab      	strb	r3, [r5, r2]
   12186:	3201      	adds	r2, #1
   12188:	54ab      	strb	r3, [r5, r2]
   1218a:	330f      	adds	r3, #15
   1218c:	3201      	adds	r2, #1
   1218e:	54ab      	strb	r3, [r5, r2]
   12190:	320f      	adds	r2, #15
   12192:	542a      	strb	r2, [r5, r0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   12194:	303f      	adds	r0, #63	; 0x3f
   12196:	55a8      	strb	r0, [r5, r6]
   12198:	4e16      	ldr	r6, [pc, #88]	; (121f4 <sync+0xcc>)
   1219a:	55a8      	strb	r0, [r5, r6]
   1219c:	4816      	ldr	r0, [pc, #88]	; (121f8 <sync+0xd0>)
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1219e:	4e17      	ldr	r6, [pc, #92]	; (121fc <sync+0xd4>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   121a0:	542a      	strb	r2, [r5, r0]
   121a2:	4a17      	ldr	r2, [pc, #92]	; (12200 <sync+0xd8>)
   121a4:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   121a6:	692b      	ldr	r3, [r5, #16]
   121a8:	3201      	adds	r2, #1
   121aa:	54ab      	strb	r3, [r5, r2]
   121ac:	4a15      	ldr	r2, [pc, #84]	; (12204 <sync+0xdc>)
   121ae:	0a18      	lsrs	r0, r3, #8
   121b0:	54a8      	strb	r0, [r5, r2]
   121b2:	4a15      	ldr	r2, [pc, #84]	; (12208 <sync+0xe0>)
   121b4:	0c18      	lsrs	r0, r3, #16
   121b6:	54a8      	strb	r0, [r5, r2]
   121b8:	4a14      	ldr	r2, [pc, #80]	; (1220c <sync+0xe4>)
   121ba:	0e1b      	lsrs	r3, r3, #24
   121bc:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   121be:	68eb      	ldr	r3, [r5, #12]
   121c0:	3201      	adds	r2, #1
   121c2:	54ab      	strb	r3, [r5, r2]
   121c4:	4a12      	ldr	r2, [pc, #72]	; (12210 <sync+0xe8>)
   121c6:	0a18      	lsrs	r0, r3, #8
   121c8:	54a8      	strb	r0, [r5, r2]
   121ca:	4a12      	ldr	r2, [pc, #72]	; (12214 <sync+0xec>)
   121cc:	0c18      	lsrs	r0, r3, #16
   121ce:	54a8      	strb	r0, [r5, r2]
   121d0:	4a11      	ldr	r2, [pc, #68]	; (12218 <sync+0xf0>)
   121d2:	0e1b      	lsrs	r3, r3, #24
   121d4:	54ab      	strb	r3, [r5, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   121d6:	7868      	ldrb	r0, [r5, #1]
   121d8:	2301      	movs	r3, #1
   121da:	696a      	ldr	r2, [r5, #20]
   121dc:	47b0      	blx	r6
			fs->fsi_flag = 0;
   121de:	716c      	strb	r4, [r5, #5]
   121e0:	e7ac      	b.n	1213c <sync+0x14>
   121e2:	46c0      	nop			; (mov r8, r8)
   121e4:	0001209d 	.word	0x0001209d
   121e8:	00011fe1 	.word	0x00011fe1
   121ec:	0000022e 	.word	0x0000022e
   121f0:	0000022f 	.word	0x0000022f
   121f4:	00000215 	.word	0x00000215
   121f8:	00000216 	.word	0x00000216
   121fc:	00011fdd 	.word	0x00011fdd
   12200:	00000217 	.word	0x00000217
   12204:	00000219 	.word	0x00000219
   12208:	0000021a 	.word	0x0000021a
   1220c:	0000021b 	.word	0x0000021b
   12210:	0000021d 	.word	0x0000021d
   12214:	0000021e 	.word	0x0000021e
   12218:	0000021f 	.word	0x0000021f

0001221c <validate.part.2>:
/*-----------------------------------------------------------------------*/
/* Check if the file/dir object is valid or not                          */
/*-----------------------------------------------------------------------*/

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   1221c:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   1221e:	4b04      	ldr	r3, [pc, #16]	; (12230 <validate.part.2+0x14>)
   12220:	7840      	ldrb	r0, [r0, #1]
   12222:	4798      	blx	r3
   12224:	0003      	movs	r3, r0
		return FR_NOT_READY;
   12226:	2003      	movs	r0, #3

	return FR_OK;
   12228:	07db      	lsls	r3, r3, #31
   1222a:	17db      	asrs	r3, r3, #31
   1222c:	4018      	ands	r0, r3
}
   1222e:	bd10      	pop	{r4, pc}
   12230:	00011fb9 	.word	0x00011fb9

00012234 <check_fs>:
{
   12234:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12236:	0001      	movs	r1, r0
{
   12238:	b570      	push	{r4, r5, r6, lr}
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1223a:	2301      	movs	r3, #1
{
   1223c:	0004      	movs	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1223e:	3130      	adds	r1, #48	; 0x30
   12240:	7840      	ldrb	r0, [r0, #1]
   12242:	4d17      	ldr	r5, [pc, #92]	; (122a0 <check_fs+0x6c>)
   12244:	47a8      	blx	r5
		return 3;
   12246:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12248:	2800      	cmp	r0, #0
   1224a:	d001      	beq.n	12250 <check_fs+0x1c>
}
   1224c:	0018      	movs	r0, r3
   1224e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   12250:	4b14      	ldr	r3, [pc, #80]	; (122a4 <check_fs+0x70>)
   12252:	4a15      	ldr	r2, [pc, #84]	; (122a8 <check_fs+0x74>)
   12254:	5ce3      	ldrb	r3, [r4, r3]
   12256:	5ca2      	ldrb	r2, [r4, r2]
   12258:	021b      	lsls	r3, r3, #8
   1225a:	431a      	orrs	r2, r3
   1225c:	4913      	ldr	r1, [pc, #76]	; (122ac <check_fs+0x78>)
   1225e:	b212      	sxth	r2, r2
		return 2;
   12260:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   12262:	428a      	cmp	r2, r1
   12264:	d1f2      	bne.n	1224c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   12266:	0022      	movs	r2, r4
   12268:	3266      	adds	r2, #102	; 0x66
   1226a:	8853      	ldrh	r3, [r2, #2]
   1226c:	8811      	ldrh	r1, [r2, #0]
   1226e:	041b      	lsls	r3, r3, #16
   12270:	430b      	orrs	r3, r1
   12272:	4a0f      	ldr	r2, [pc, #60]	; (122b0 <check_fs+0x7c>)
   12274:	021b      	lsls	r3, r3, #8
   12276:	0a1b      	lsrs	r3, r3, #8
   12278:	4293      	cmp	r3, r2
   1227a:	d00e      	beq.n	1229a <check_fs+0x66>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1227c:	2382      	movs	r3, #130	; 0x82
   1227e:	5ae2      	ldrh	r2, [r4, r3]
   12280:	3482      	adds	r4, #130	; 0x82
   12282:	8863      	ldrh	r3, [r4, #2]
   12284:	041b      	lsls	r3, r3, #16
   12286:	4313      	orrs	r3, r2
   12288:	4a0a      	ldr	r2, [pc, #40]	; (122b4 <check_fs+0x80>)
   1228a:	021b      	lsls	r3, r3, #8
   1228c:	4694      	mov	ip, r2
   1228e:	0a1b      	lsrs	r3, r3, #8
   12290:	4463      	add	r3, ip
   12292:	1e58      	subs	r0, r3, #1
   12294:	4183      	sbcs	r3, r0
		return 3;
   12296:	b2db      	uxtb	r3, r3
   12298:	e7d8      	b.n	1224c <check_fs+0x18>
		return 0;
   1229a:	2300      	movs	r3, #0
   1229c:	e7d6      	b.n	1224c <check_fs+0x18>
   1229e:	46c0      	nop			; (mov r8, r8)
   122a0:	00011fd9 	.word	0x00011fd9
   122a4:	0000022f 	.word	0x0000022f
   122a8:	0000022e 	.word	0x0000022e
   122ac:	ffffaa55 	.word	0xffffaa55
   122b0:	00544146 	.word	0x00544146
   122b4:	ffabbeba 	.word	0xffabbeba

000122b8 <chk_mounted>:
{
   122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ba:	46d6      	mov	lr, sl
   122bc:	464f      	mov	r7, r9
   122be:	4646      	mov	r6, r8
   122c0:	b5c0      	push	{r6, r7, lr}
   122c2:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   122c4:	6802      	ldr	r2, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   122c6:	7813      	ldrb	r3, [r2, #0]
   122c8:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   122ca:	2b09      	cmp	r3, #9
   122cc:	d802      	bhi.n	122d4 <chk_mounted+0x1c>
   122ce:	7854      	ldrb	r4, [r2, #1]
   122d0:	2c3a      	cmp	r4, #58	; 0x3a
   122d2:	d01a      	beq.n	1230a <chk_mounted+0x52>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   122d4:	4b9b      	ldr	r3, [pc, #620]	; (12544 <chk_mounted+0x28c>)
   122d6:	681c      	ldr	r4, [r3, #0]
   122d8:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   122da:	2c00      	cmp	r4, #0
   122dc:	d00f      	beq.n	122fe <chk_mounted+0x46>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   122de:	7823      	ldrb	r3, [r4, #0]
   122e0:	2b00      	cmp	r3, #0
   122e2:	d018      	beq.n	12316 <chk_mounted+0x5e>
		stat = disk_status(fs->drv);
   122e4:	4b98      	ldr	r3, [pc, #608]	; (12548 <chk_mounted+0x290>)
   122e6:	7860      	ldrb	r0, [r4, #1]
   122e8:	4798      	blx	r3
   122ea:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   122ec:	07c2      	lsls	r2, r0, #31
   122ee:	d412      	bmi.n	12316 <chk_mounted+0x5e>
			return FR_OK;				/* The file system object is valid */
   122f0:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   122f2:	2d00      	cmp	r5, #0
   122f4:	d004      	beq.n	12300 <chk_mounted+0x48>
   122f6:	075b      	lsls	r3, r3, #29
   122f8:	d502      	bpl.n	12300 <chk_mounted+0x48>
				return FR_WRITE_PROTECTED;
   122fa:	200a      	movs	r0, #10
   122fc:	e000      	b.n	12300 <chk_mounted+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   122fe:	200c      	movs	r0, #12
}
   12300:	bc1c      	pop	{r2, r3, r4}
   12302:	4690      	mov	r8, r2
   12304:	4699      	mov	r9, r3
   12306:	46a2      	mov	sl, r4
   12308:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
   1230a:	3202      	adds	r2, #2
   1230c:	6002      	str	r2, [r0, #0]
		return FR_INVALID_DRIVE;
   1230e:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   12310:	2b00      	cmp	r3, #0
   12312:	d1f5      	bne.n	12300 <chk_mounted+0x48>
   12314:	e7de      	b.n	122d4 <chk_mounted+0x1c>
	fs->fs_type = 0;					/* Clear the file system object */
   12316:	2300      	movs	r3, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   12318:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
   1231a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1231c:	7063      	strb	r3, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1231e:	4b8b      	ldr	r3, [pc, #556]	; (1254c <chk_mounted+0x294>)
   12320:	4798      	blx	r3
   12322:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   12324:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   12326:	07da      	lsls	r2, r3, #31
   12328:	d4ea      	bmi.n	12300 <chk_mounted+0x48>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1232a:	2d00      	cmp	r5, #0
   1232c:	d001      	beq.n	12332 <chk_mounted+0x7a>
   1232e:	075b      	lsls	r3, r3, #29
   12330:	d4e3      	bmi.n	122fa <chk_mounted+0x42>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   12332:	2100      	movs	r1, #0
   12334:	0020      	movs	r0, r4
   12336:	4d86      	ldr	r5, [pc, #536]	; (12550 <chk_mounted+0x298>)
   12338:	47a8      	blx	r5
   1233a:	2600      	movs	r6, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1233c:	2801      	cmp	r0, #1
   1233e:	d100      	bne.n	12342 <chk_mounted+0x8a>
   12340:	e08d      	b.n	1245e <chk_mounted+0x1a6>
	if (fmt == 3) return FR_DISK_ERR;
   12342:	2803      	cmp	r0, #3
   12344:	d100      	bne.n	12348 <chk_mounted+0x90>
   12346:	e0a1      	b.n	1248c <chk_mounted+0x1d4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   12348:	2800      	cmp	r0, #0
   1234a:	d001      	beq.n	12350 <chk_mounted+0x98>
   1234c:	200d      	movs	r0, #13
   1234e:	e7d7      	b.n	12300 <chk_mounted+0x48>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   12350:	233c      	movs	r3, #60	; 0x3c
   12352:	5ce2      	ldrb	r2, [r4, r3]
   12354:	3b01      	subs	r3, #1
   12356:	5ce3      	ldrb	r3, [r4, r3]
   12358:	0212      	lsls	r2, r2, #8
   1235a:	4313      	orrs	r3, r2
   1235c:	2280      	movs	r2, #128	; 0x80
   1235e:	b21b      	sxth	r3, r3
   12360:	0092      	lsls	r2, r2, #2
   12362:	4293      	cmp	r3, r2
   12364:	d1f2      	bne.n	1234c <chk_mounted+0x94>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   12366:	2347      	movs	r3, #71	; 0x47
   12368:	3abb      	subs	r2, #187	; 0xbb
   1236a:	5ce3      	ldrb	r3, [r4, r3]
   1236c:	3aff      	subs	r2, #255	; 0xff
   1236e:	5ca7      	ldrb	r7, [r4, r2]
   12370:	021b      	lsls	r3, r3, #8
   12372:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   12374:	d100      	bne.n	12378 <chk_mounted+0xc0>
   12376:	6d67      	ldr	r7, [r4, #84]	; 0x54
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   12378:	2340      	movs	r3, #64	; 0x40
	fs->fsize = fasize;
   1237a:	61e7      	str	r7, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1237c:	5ce3      	ldrb	r3, [r4, r3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1237e:	1e5a      	subs	r2, r3, #1
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   12380:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   12382:	2a01      	cmp	r2, #1
   12384:	d8e2      	bhi.n	1234c <chk_mounted+0x94>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   12386:	223d      	movs	r2, #61	; 0x3d
   12388:	5ca1      	ldrb	r1, [r4, r2]
   1238a:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1238c:	2900      	cmp	r1, #0
   1238e:	d0dd      	beq.n	1234c <chk_mounted+0x94>
   12390:	1e4a      	subs	r2, r1, #1
   12392:	4211      	tst	r1, r2
   12394:	d1da      	bne.n	1234c <chk_mounted+0x94>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12396:	2242      	movs	r2, #66	; 0x42
   12398:	2041      	movs	r0, #65	; 0x41
   1239a:	5ca2      	ldrb	r2, [r4, r2]
   1239c:	5c20      	ldrb	r0, [r4, r0]
   1239e:	0212      	lsls	r2, r2, #8
   123a0:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   123a2:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   123a4:	4680      	mov	r8, r0
   123a6:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   123a8:	0712      	lsls	r2, r2, #28
   123aa:	d1cf      	bne.n	1234c <chk_mounted+0x94>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   123ac:	2244      	movs	r2, #68	; 0x44
   123ae:	2043      	movs	r0, #67	; 0x43
   123b0:	5ca2      	ldrb	r2, [r4, r2]
   123b2:	5c20      	ldrb	r0, [r4, r0]
   123b4:	0212      	lsls	r2, r2, #8
   123b6:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   123b8:	d100      	bne.n	123bc <chk_mounted+0x104>
   123ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   123bc:	223f      	movs	r2, #63	; 0x3f
   123be:	253e      	movs	r5, #62	; 0x3e
   123c0:	5ca2      	ldrb	r2, [r4, r2]
   123c2:	5d65      	ldrb	r5, [r4, r5]
   123c4:	0212      	lsls	r2, r2, #8
   123c6:	4315      	orrs	r5, r2
   123c8:	46aa      	mov	sl, r5
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   123ca:	d0bf      	beq.n	1234c <chk_mounted+0x94>
	fasize *= b;										/* Number of sectors for FAT area */
   123cc:	437b      	muls	r3, r7
   123ce:	4699      	mov	r9, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   123d0:	4643      	mov	r3, r8
   123d2:	091d      	lsrs	r5, r3, #4
   123d4:	4455      	add	r5, sl
   123d6:	444d      	add	r5, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   123d8:	42a8      	cmp	r0, r5
   123da:	d3b7      	bcc.n	1234c <chk_mounted+0x94>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   123dc:	1b40      	subs	r0, r0, r5
   123de:	4b5d      	ldr	r3, [pc, #372]	; (12554 <chk_mounted+0x29c>)
   123e0:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   123e2:	2800      	cmp	r0, #0
   123e4:	d0b2      	beq.n	1234c <chk_mounted+0x94>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   123e6:	4b5c      	ldr	r3, [pc, #368]	; (12558 <chk_mounted+0x2a0>)
   123e8:	4298      	cmp	r0, r3
   123ea:	d800      	bhi.n	123ee <chk_mounted+0x136>
   123ec:	e089      	b.n	12502 <chk_mounted+0x24a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   123ee:	4b5b      	ldr	r3, [pc, #364]	; (1255c <chk_mounted+0x2a4>)
   123f0:	4298      	cmp	r0, r3
   123f2:	d96c      	bls.n	124ce <chk_mounted+0x216>
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   123f4:	4653      	mov	r3, sl
   123f6:	18f3      	adds	r3, r6, r3
   123f8:	6223      	str	r3, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   123fa:	4643      	mov	r3, r8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   123fc:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
   123fe:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12400:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12402:	62a5      	str	r5, [r4, #40]	; 0x28
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12404:	2b00      	cmp	r3, #0
   12406:	d1a1      	bne.n	1234c <chk_mounted+0x94>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   12408:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1240a:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1240c:	6263      	str	r3, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1240e:	4b54      	ldr	r3, [pc, #336]	; (12560 <chk_mounted+0x2a8>)
   12410:	18c3      	adds	r3, r0, r3
   12412:	0a5b      	lsrs	r3, r3, #9
   12414:	429f      	cmp	r7, r3
   12416:	d399      	bcc.n	1234c <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   12418:	2301      	movs	r3, #1
   1241a:	425b      	negs	r3, r3
   1241c:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
   1241e:	4643      	mov	r3, r8
   12420:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
   12422:	4643      	mov	r3, r8
   12424:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   12426:	2361      	movs	r3, #97	; 0x61
   12428:	2260      	movs	r2, #96	; 0x60
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1242a:	0021      	movs	r1, r4
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1242c:	5ce3      	ldrb	r3, [r4, r3]
   1242e:	5ca2      	ldrb	r2, [r4, r2]
   12430:	021b      	lsls	r3, r3, #8
   12432:	431a      	orrs	r2, r3
   12434:	1992      	adds	r2, r2, r6
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12436:	2301      	movs	r3, #1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   12438:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1243a:	7860      	ldrb	r0, [r4, #1]
   1243c:	3130      	adds	r1, #48	; 0x30
   1243e:	4d49      	ldr	r5, [pc, #292]	; (12564 <chk_mounted+0x2ac>)
   12440:	47a8      	blx	r5
   12442:	2303      	movs	r3, #3
   12444:	2800      	cmp	r0, #0
   12446:	d023      	beq.n	12490 <chk_mounted+0x1d8>
	fs->winsect = 0;		/* Invalidate sector cache */
   12448:	2000      	movs	r0, #0
	fs->id = ++Fsid;		/* File system mount ID */
   1244a:	4a47      	ldr	r2, [pc, #284]	; (12568 <chk_mounted+0x2b0>)
	fs->fs_type = fmt;		/* FAT sub-type */
   1244c:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1244e:	8813      	ldrh	r3, [r2, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
   12450:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->id = ++Fsid;		/* File system mount ID */
   12452:	3301      	adds	r3, #1
   12454:	b29b      	uxth	r3, r3
   12456:	8013      	strh	r3, [r2, #0]
   12458:	80e3      	strh	r3, [r4, #6]
	fs->wflag = 0;
   1245a:	7120      	strb	r0, [r4, #4]
	return FR_OK;
   1245c:	e750      	b.n	12300 <chk_mounted+0x48>
		if (tbl[4]) {						/* Is the partition existing? */
   1245e:	23f9      	movs	r3, #249	; 0xf9
   12460:	005b      	lsls	r3, r3, #1
   12462:	5ce3      	ldrb	r3, [r4, r3]
   12464:	2b00      	cmp	r3, #0
   12466:	d100      	bne.n	1246a <chk_mounted+0x1b2>
   12468:	e770      	b.n	1234c <chk_mounted+0x94>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1246a:	23fb      	movs	r3, #251	; 0xfb
   1246c:	005b      	lsls	r3, r3, #1
   1246e:	18e2      	adds	r2, r4, r3
   12470:	5ce6      	ldrb	r6, [r4, r3]
   12472:	7853      	ldrb	r3, [r2, #1]
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12474:	0020      	movs	r0, r4
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   12476:	021b      	lsls	r3, r3, #8
   12478:	4333      	orrs	r3, r6
   1247a:	7896      	ldrb	r6, [r2, #2]
   1247c:	0436      	lsls	r6, r6, #16
   1247e:	4333      	orrs	r3, r6
   12480:	78d6      	ldrb	r6, [r2, #3]
   12482:	0636      	lsls	r6, r6, #24
   12484:	431e      	orrs	r6, r3
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12486:	0031      	movs	r1, r6
   12488:	47a8      	blx	r5
   1248a:	e75a      	b.n	12342 <chk_mounted+0x8a>
	if (fmt == 3) return FR_DISK_ERR;
   1248c:	2001      	movs	r0, #1
   1248e:	e737      	b.n	12300 <chk_mounted+0x48>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   12490:	4b36      	ldr	r3, [pc, #216]	; (1256c <chk_mounted+0x2b4>)
   12492:	4a37      	ldr	r2, [pc, #220]	; (12570 <chk_mounted+0x2b8>)
   12494:	5ce3      	ldrb	r3, [r4, r3]
   12496:	5ca2      	ldrb	r2, [r4, r2]
   12498:	021b      	lsls	r3, r3, #8
   1249a:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1249c:	4935      	ldr	r1, [pc, #212]	; (12574 <chk_mounted+0x2bc>)
   1249e:	b212      	sxth	r2, r2
   124a0:	2303      	movs	r3, #3
   124a2:	428a      	cmp	r2, r1
   124a4:	d1d0      	bne.n	12448 <chk_mounted+0x190>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   124a6:	4a34      	ldr	r2, [pc, #208]	; (12578 <chk_mounted+0x2c0>)
   124a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   124aa:	4291      	cmp	r1, r2
   124ac:	d1cc      	bne.n	12448 <chk_mounted+0x190>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   124ae:	2385      	movs	r3, #133	; 0x85
   124b0:	009b      	lsls	r3, r3, #2
   124b2:	58e1      	ldr	r1, [r4, r3]
   124b4:	4a31      	ldr	r2, [pc, #196]	; (1257c <chk_mounted+0x2c4>)
   124b6:	2303      	movs	r3, #3
   124b8:	4291      	cmp	r1, r2
   124ba:	d1c5      	bne.n	12448 <chk_mounted+0x190>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   124bc:	2287      	movs	r2, #135	; 0x87
   124be:	0092      	lsls	r2, r2, #2
   124c0:	58a2      	ldr	r2, [r4, r2]
   124c2:	60e2      	str	r2, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   124c4:	2286      	movs	r2, #134	; 0x86
   124c6:	0092      	lsls	r2, r2, #2
   124c8:	58a2      	ldr	r2, [r4, r2]
   124ca:	6122      	str	r2, [r4, #16]
   124cc:	e7bc      	b.n	12448 <chk_mounted+0x190>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   124ce:	4643      	mov	r3, r8
	fs->database = bsect + sysect;						/* Data start sector */
   124d0:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   124d2:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   124d4:	4456      	add	r6, sl
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   124d6:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   124d8:	62a5      	str	r5, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   124da:	6226      	str	r6, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   124dc:	2b00      	cmp	r3, #0
   124de:	d100      	bne.n	124e2 <chk_mounted+0x22a>
   124e0:	e734      	b.n	1234c <chk_mounted+0x94>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   124e2:	4b1f      	ldr	r3, [pc, #124]	; (12560 <chk_mounted+0x2a8>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   124e4:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   124e6:	444e      	add	r6, r9
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   124e8:	18c3      	adds	r3, r0, r3
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   124ea:	6266      	str	r6, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   124ec:	0a5b      	lsrs	r3, r3, #9
   124ee:	429f      	cmp	r7, r3
   124f0:	d200      	bcs.n	124f4 <chk_mounted+0x23c>
   124f2:	e72b      	b.n	1234c <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   124f4:	2301      	movs	r3, #1
   124f6:	425b      	negs	r3, r3
   124f8:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
   124fa:	2300      	movs	r3, #0
   124fc:	60e3      	str	r3, [r4, #12]
   124fe:	3302      	adds	r3, #2
   12500:	e7a2      	b.n	12448 <chk_mounted+0x190>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12502:	4643      	mov	r3, r8
	fs->database = bsect + sysect;						/* Data start sector */
   12504:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12506:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12508:	4456      	add	r6, sl
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1250a:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1250c:	62a5      	str	r5, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1250e:	6226      	str	r6, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12510:	2b00      	cmp	r3, #0
   12512:	d100      	bne.n	12516 <chk_mounted+0x25e>
   12514:	e71a      	b.n	1234c <chk_mounted+0x94>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12516:	2301      	movs	r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12518:	4911      	ldr	r1, [pc, #68]	; (12560 <chk_mounted+0x2a8>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1251a:	0002      	movs	r2, r0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1251c:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1251e:	39fd      	subs	r1, #253	; 0xfd
   12520:	39ff      	subs	r1, #255	; 0xff
   12522:	4348      	muls	r0, r1
   12524:	40d8      	lsrs	r0, r3
   12526:	401a      	ands	r2, r3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12528:	4462      	add	r2, ip
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1252a:	444e      	add	r6, r9
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1252c:	1812      	adds	r2, r2, r0
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1252e:	6266      	str	r6, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12530:	0a52      	lsrs	r2, r2, #9
   12532:	4297      	cmp	r7, r2
   12534:	d200      	bcs.n	12538 <chk_mounted+0x280>
   12536:	e709      	b.n	1234c <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   12538:	2201      	movs	r2, #1
   1253a:	4252      	negs	r2, r2
   1253c:	6122      	str	r2, [r4, #16]
	fs->last_clust = 0;
   1253e:	2200      	movs	r2, #0
   12540:	60e2      	str	r2, [r4, #12]
   12542:	e781      	b.n	12448 <chk_mounted+0x190>
   12544:	200009a8 	.word	0x200009a8
   12548:	00011fb9 	.word	0x00011fb9
   1254c:	00011f2d 	.word	0x00011f2d
   12550:	00012235 	.word	0x00012235
   12554:	000131ed 	.word	0x000131ed
   12558:	00000ff5 	.word	0x00000ff5
   1255c:	0000fff5 	.word	0x0000fff5
   12560:	000001ff 	.word	0x000001ff
   12564:	00011fd9 	.word	0x00011fd9
   12568:	200009ac 	.word	0x200009ac
   1256c:	0000022f 	.word	0x0000022f
   12570:	0000022e 	.word	0x0000022e
   12574:	ffffaa55 	.word	0xffffaa55
   12578:	41615252 	.word	0x41615252
   1257c:	61417272 	.word	0x61417272

00012580 <get_fat.part.4>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   12580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12582:	46ce      	mov	lr, r9
   12584:	4647      	mov	r7, r8
   12586:	b580      	push	{r7, lr}
	switch (fs->fs_type) {
   12588:	7806      	ldrb	r6, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   1258a:	0004      	movs	r4, r0
   1258c:	000d      	movs	r5, r1
	switch (fs->fs_type) {
   1258e:	2e02      	cmp	r6, #2
   12590:	d04e      	beq.n	12630 <get_fat.part.4+0xb0>
   12592:	2e03      	cmp	r6, #3
   12594:	d02e      	beq.n	125f4 <get_fat.part.4+0x74>
   12596:	2e01      	cmp	r6, #1
   12598:	d005      	beq.n	125a6 <get_fat.part.4+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1259a:	2001      	movs	r0, #1
   1259c:	4240      	negs	r0, r0
}
   1259e:	bc0c      	pop	{r2, r3}
   125a0:	4690      	mov	r8, r2
   125a2:	4699      	mov	r9, r3
   125a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125a6:	6a03      	ldr	r3, [r0, #32]
		bc = (UINT)clst; bc += bc / 2;
   125a8:	084f      	lsrs	r7, r1, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125aa:	469c      	mov	ip, r3
		bc = (UINT)clst; bc += bc / 2;
   125ac:	187f      	adds	r7, r7, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125ae:	0a79      	lsrs	r1, r7, #9
   125b0:	4b29      	ldr	r3, [pc, #164]	; (12658 <get_fat.part.4+0xd8>)
   125b2:	4461      	add	r1, ip
   125b4:	4698      	mov	r8, r3
   125b6:	4798      	blx	r3
   125b8:	2800      	cmp	r0, #0
   125ba:	d1ee      	bne.n	1259a <get_fat.part.4+0x1a>
		wc = fs->win[bc % SS(fs)]; bc++;
   125bc:	05fb      	lsls	r3, r7, #23
   125be:	0ddb      	lsrs	r3, r3, #23
   125c0:	18e3      	adds	r3, r4, r3
   125c2:	3330      	adds	r3, #48	; 0x30
   125c4:	781b      	ldrb	r3, [r3, #0]
   125c6:	3701      	adds	r7, #1
   125c8:	4699      	mov	r9, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   125ca:	6a23      	ldr	r3, [r4, #32]
   125cc:	0a79      	lsrs	r1, r7, #9
   125ce:	469c      	mov	ip, r3
   125d0:	0020      	movs	r0, r4
   125d2:	4461      	add	r1, ip
   125d4:	47c0      	blx	r8
   125d6:	2800      	cmp	r0, #0
   125d8:	d1df      	bne.n	1259a <get_fat.part.4+0x1a>
		wc |= fs->win[bc % SS(fs)] << 8;
   125da:	464b      	mov	r3, r9
   125dc:	05ff      	lsls	r7, r7, #23
   125de:	0dff      	lsrs	r7, r7, #23
   125e0:	19e4      	adds	r4, r4, r7
   125e2:	3430      	adds	r4, #48	; 0x30
   125e4:	7820      	ldrb	r0, [r4, #0]
   125e6:	0200      	lsls	r0, r0, #8
   125e8:	4318      	orrs	r0, r3
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   125ea:	422e      	tst	r6, r5
   125ec:	d11e      	bne.n	1262c <get_fat.part.4+0xac>
   125ee:	0500      	lsls	r0, r0, #20
   125f0:	0d00      	lsrs	r0, r0, #20
   125f2:	e7d4      	b.n	1259e <get_fat.part.4+0x1e>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   125f4:	6a03      	ldr	r3, [r0, #32]
   125f6:	09c9      	lsrs	r1, r1, #7
   125f8:	469c      	mov	ip, r3
   125fa:	4b17      	ldr	r3, [pc, #92]	; (12658 <get_fat.part.4+0xd8>)
   125fc:	4461      	add	r1, ip
   125fe:	4798      	blx	r3
   12600:	2800      	cmp	r0, #0
   12602:	d1ca      	bne.n	1259a <get_fat.part.4+0x1a>
		p = &fs->win[clst * 4 % SS(fs)];
   12604:	23fe      	movs	r3, #254	; 0xfe
   12606:	00ad      	lsls	r5, r5, #2
   12608:	005b      	lsls	r3, r3, #1
   1260a:	401d      	ands	r5, r3
   1260c:	002b      	movs	r3, r5
   1260e:	3330      	adds	r3, #48	; 0x30
   12610:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   12612:	78d8      	ldrb	r0, [r3, #3]
   12614:	789a      	ldrb	r2, [r3, #2]
   12616:	1964      	adds	r4, r4, r5
   12618:	0412      	lsls	r2, r2, #16
   1261a:	0600      	lsls	r0, r0, #24
   1261c:	3430      	adds	r4, #48	; 0x30
   1261e:	4310      	orrs	r0, r2
   12620:	785b      	ldrb	r3, [r3, #1]
   12622:	7822      	ldrb	r2, [r4, #0]
   12624:	021b      	lsls	r3, r3, #8
   12626:	4310      	orrs	r0, r2
   12628:	4318      	orrs	r0, r3
   1262a:	0100      	lsls	r0, r0, #4
   1262c:	0900      	lsrs	r0, r0, #4
   1262e:	e7b6      	b.n	1259e <get_fat.part.4+0x1e>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   12630:	6a03      	ldr	r3, [r0, #32]
   12632:	0a09      	lsrs	r1, r1, #8
   12634:	469c      	mov	ip, r3
   12636:	4b08      	ldr	r3, [pc, #32]	; (12658 <get_fat.part.4+0xd8>)
   12638:	4461      	add	r1, ip
   1263a:	4798      	blx	r3
   1263c:	2800      	cmp	r0, #0
   1263e:	d1ac      	bne.n	1259a <get_fat.part.4+0x1a>
		p = &fs->win[clst * 2 % SS(fs)];
   12640:	23ff      	movs	r3, #255	; 0xff
   12642:	006d      	lsls	r5, r5, #1
   12644:	005b      	lsls	r3, r3, #1
   12646:	401d      	ands	r5, r3
		return LD_WORD(p);
   12648:	1964      	adds	r4, r4, r5
   1264a:	3430      	adds	r4, #48	; 0x30
   1264c:	7863      	ldrb	r3, [r4, #1]
   1264e:	7820      	ldrb	r0, [r4, #0]
   12650:	021b      	lsls	r3, r3, #8
   12652:	4318      	orrs	r0, r3
   12654:	e7a3      	b.n	1259e <get_fat.part.4+0x1e>
   12656:	46c0      	nop			; (mov r8, r8)
   12658:	0001209d 	.word	0x0001209d

0001265c <dir_sdi>:
{
   1265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1265e:	0005      	movs	r5, r0
	dj->index = idx;
   12660:	80e9      	strh	r1, [r5, #6]
{
   12662:	000c      	movs	r4, r1
	clst = dj->sclust;
   12664:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   12666:	2901      	cmp	r1, #1
   12668:	d003      	beq.n	12672 <dir_sdi+0x16>
   1266a:	6800      	ldr	r0, [r0, #0]
   1266c:	6983      	ldr	r3, [r0, #24]
   1266e:	4299      	cmp	r1, r3
   12670:	d301      	bcc.n	12676 <dir_sdi+0x1a>
		return FR_INT_ERR;
   12672:	2002      	movs	r0, #2
}
   12674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   12676:	2900      	cmp	r1, #0
   12678:	d117      	bne.n	126aa <dir_sdi+0x4e>
   1267a:	7803      	ldrb	r3, [r0, #0]
   1267c:	2b03      	cmp	r3, #3
   1267e:	d011      	beq.n	126a4 <dir_sdi+0x48>
		dj->clust = clst;
   12680:	2300      	movs	r3, #0
   12682:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12684:	8903      	ldrh	r3, [r0, #8]
   12686:	42a3      	cmp	r3, r4
   12688:	d9f3      	bls.n	12672 <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   1268a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1268c:	0923      	lsrs	r3, r4, #4
   1268e:	4694      	mov	ip, r2
   12690:	4463      	add	r3, ip
   12692:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   12694:	230f      	movs	r3, #15
   12696:	401c      	ands	r4, r3
   12698:	3030      	adds	r0, #48	; 0x30
   1269a:	0164      	lsls	r4, r4, #5
   1269c:	1900      	adds	r0, r0, r4
   1269e:	6168      	str	r0, [r5, #20]
	return FR_OK;	/* Seek succeeded */
   126a0:	2000      	movs	r0, #0
   126a2:	e7e7      	b.n	12674 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   126a4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   126a6:	2900      	cmp	r1, #0
   126a8:	d0ea      	beq.n	12680 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   126aa:	7886      	ldrb	r6, [r0, #2]
   126ac:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   126ae:	42b4      	cmp	r4, r6
   126b0:	d315      	bcc.n	126de <dir_sdi+0x82>
   126b2:	4f13      	ldr	r7, [pc, #76]	; (12700 <dir_sdi+0xa4>)
   126b4:	e00d      	b.n	126d2 <dir_sdi+0x76>
   126b6:	47b8      	blx	r7
   126b8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   126ba:	1c43      	adds	r3, r0, #1
   126bc:	d01e      	beq.n	126fc <dir_sdi+0xa0>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   126be:	2801      	cmp	r0, #1
   126c0:	d9d7      	bls.n	12672 <dir_sdi+0x16>
   126c2:	6828      	ldr	r0, [r5, #0]
   126c4:	6983      	ldr	r3, [r0, #24]
   126c6:	428b      	cmp	r3, r1
   126c8:	d9d3      	bls.n	12672 <dir_sdi+0x16>
			idx -= ic;
   126ca:	1ba4      	subs	r4, r4, r6
   126cc:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
   126ce:	42a6      	cmp	r6, r4
   126d0:	d805      	bhi.n	126de <dir_sdi+0x82>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   126d2:	2901      	cmp	r1, #1
   126d4:	d9cd      	bls.n	12672 <dir_sdi+0x16>
   126d6:	6983      	ldr	r3, [r0, #24]
   126d8:	428b      	cmp	r3, r1
   126da:	d9ca      	bls.n	12672 <dir_sdi+0x16>
   126dc:	e7eb      	b.n	126b6 <dir_sdi+0x5a>
		dj->clust = clst;
   126de:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   126e0:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
   126e2:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   126e4:	3b02      	subs	r3, #2
   126e6:	2200      	movs	r2, #0
   126e8:	4299      	cmp	r1, r3
   126ea:	d203      	bcs.n	126f4 <dir_sdi+0x98>
	return clst * fs->csize + fs->database;
   126ec:	7883      	ldrb	r3, [r0, #2]
   126ee:	4359      	muls	r1, r3
   126f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   126f2:	18ca      	adds	r2, r1, r3
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   126f4:	0921      	lsrs	r1, r4, #4
   126f6:	1889      	adds	r1, r1, r2
   126f8:	6129      	str	r1, [r5, #16]
   126fa:	e7cb      	b.n	12694 <dir_sdi+0x38>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   126fc:	2001      	movs	r0, #1
   126fe:	e7b9      	b.n	12674 <dir_sdi+0x18>
   12700:	00012581 	.word	0x00012581

00012704 <put_fat.part.5>:
static FRESULT put_fat (
   12704:	b5f0      	push	{r4, r5, r6, r7, lr}
   12706:	464f      	mov	r7, r9
   12708:	4646      	mov	r6, r8
   1270a:	46d6      	mov	lr, sl
   1270c:	b5c0      	push	{r6, r7, lr}
		switch (fs->fs_type) {
   1270e:	7807      	ldrb	r7, [r0, #0]
static FRESULT put_fat (
   12710:	0004      	movs	r4, r0
   12712:	000d      	movs	r5, r1
   12714:	4690      	mov	r8, r2
		switch (fs->fs_type) {
   12716:	2f02      	cmp	r7, #2
   12718:	d052      	beq.n	127c0 <put_fat.part.5+0xbc>
   1271a:	2f03      	cmp	r7, #3
   1271c:	d032      	beq.n	12784 <put_fat.part.5+0x80>
			res = FR_INT_ERR;
   1271e:	2602      	movs	r6, #2
		switch (fs->fs_type) {
   12720:	2f01      	cmp	r7, #1
   12722:	d007      	beq.n	12734 <put_fat.part.5+0x30>
		fs->wflag = 1;
   12724:	2301      	movs	r3, #1
}
   12726:	0030      	movs	r0, r6
		fs->wflag = 1;
   12728:	7123      	strb	r3, [r4, #4]
}
   1272a:	bc1c      	pop	{r2, r3, r4}
   1272c:	4690      	mov	r8, r2
   1272e:	4699      	mov	r9, r3
   12730:	46a2      	mov	sl, r4
   12732:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = clst; bc += bc / 2;
   12734:	084b      	lsrs	r3, r1, #1
   12736:	4699      	mov	r9, r3
   12738:	4489      	add	r9, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1273a:	464b      	mov	r3, r9
   1273c:	0a59      	lsrs	r1, r3, #9
   1273e:	6a03      	ldr	r3, [r0, #32]
   12740:	469c      	mov	ip, r3
   12742:	4b3b      	ldr	r3, [pc, #236]	; (12830 <put_fat.part.5+0x12c>)
   12744:	4461      	add	r1, ip
   12746:	469a      	mov	sl, r3
   12748:	4798      	blx	r3
   1274a:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   1274c:	d1ea      	bne.n	12724 <put_fat.part.5+0x20>
			p = &fs->win[bc % SS(fs)];
   1274e:	464b      	mov	r3, r9
   12750:	05db      	lsls	r3, r3, #23
   12752:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12754:	18e3      	adds	r3, r4, r3
   12756:	3330      	adds	r3, #48	; 0x30
   12758:	422f      	tst	r7, r5
   1275a:	d045      	beq.n	127e8 <put_fat.part.5+0xe4>
   1275c:	220f      	movs	r2, #15
   1275e:	7819      	ldrb	r1, [r3, #0]
			bc++;
   12760:	464d      	mov	r5, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12762:	4011      	ands	r1, r2
   12764:	4642      	mov	r2, r8
   12766:	0112      	lsls	r2, r2, #4
   12768:	430a      	orrs	r2, r1
   1276a:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1276c:	6a23      	ldr	r3, [r4, #32]
			bc++;
   1276e:	3501      	adds	r5, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12770:	469c      	mov	ip, r3
   12772:	0a69      	lsrs	r1, r5, #9
			fs->wflag = 1;
   12774:	7127      	strb	r7, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12776:	4461      	add	r1, ip
   12778:	0020      	movs	r0, r4
   1277a:	47d0      	blx	sl
			if (res != FR_OK) break;
   1277c:	2800      	cmp	r0, #0
   1277e:	d04f      	beq.n	12820 <put_fat.part.5+0x11c>
   12780:	0006      	movs	r6, r0
   12782:	e7cf      	b.n	12724 <put_fat.part.5+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12784:	6a03      	ldr	r3, [r0, #32]
   12786:	09c9      	lsrs	r1, r1, #7
   12788:	469c      	mov	ip, r3
   1278a:	4b29      	ldr	r3, [pc, #164]	; (12830 <put_fat.part.5+0x12c>)
   1278c:	4461      	add	r1, ip
   1278e:	4798      	blx	r3
   12790:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   12792:	d1c7      	bne.n	12724 <put_fat.part.5+0x20>
			p = &fs->win[clst * 4 % SS(fs)];
   12794:	23fe      	movs	r3, #254	; 0xfe
   12796:	00ad      	lsls	r5, r5, #2
   12798:	005b      	lsls	r3, r3, #1
   1279a:	401d      	ands	r5, r3
   1279c:	002a      	movs	r2, r5
			val |= LD_DWORD(p) & 0xF0000000;
   1279e:	4647      	mov	r7, r8
			p = &fs->win[clst * 4 % SS(fs)];
   127a0:	3230      	adds	r2, #48	; 0x30
   127a2:	18a2      	adds	r2, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
   127a4:	78d3      	ldrb	r3, [r2, #3]
   127a6:	1965      	adds	r5, r4, r5
   127a8:	091b      	lsrs	r3, r3, #4
   127aa:	071b      	lsls	r3, r3, #28
   127ac:	431f      	orrs	r7, r3
			ST_DWORD(p, val);
   127ae:	0a3b      	lsrs	r3, r7, #8
			val |= LD_DWORD(p) & 0xF0000000;
   127b0:	3530      	adds	r5, #48	; 0x30
			ST_DWORD(p, val);
   127b2:	702f      	strb	r7, [r5, #0]
   127b4:	7053      	strb	r3, [r2, #1]
   127b6:	0c3b      	lsrs	r3, r7, #16
   127b8:	0e3f      	lsrs	r7, r7, #24
   127ba:	7093      	strb	r3, [r2, #2]
   127bc:	70d7      	strb	r7, [r2, #3]
   127be:	e7b1      	b.n	12724 <put_fat.part.5+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   127c0:	6a03      	ldr	r3, [r0, #32]
   127c2:	0a09      	lsrs	r1, r1, #8
   127c4:	469c      	mov	ip, r3
   127c6:	4b1a      	ldr	r3, [pc, #104]	; (12830 <put_fat.part.5+0x12c>)
   127c8:	4461      	add	r1, ip
   127ca:	4798      	blx	r3
   127cc:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   127ce:	d1a9      	bne.n	12724 <put_fat.part.5+0x20>
			p = &fs->win[clst * 2 % SS(fs)];
   127d0:	006b      	lsls	r3, r5, #1
   127d2:	25ff      	movs	r5, #255	; 0xff
			ST_WORD(p, (WORD)val);
   127d4:	4642      	mov	r2, r8
			p = &fs->win[clst * 2 % SS(fs)];
   127d6:	006d      	lsls	r5, r5, #1
   127d8:	402b      	ands	r3, r5
			ST_WORD(p, (WORD)val);
   127da:	18e3      	adds	r3, r4, r3
   127dc:	3330      	adds	r3, #48	; 0x30
   127de:	701a      	strb	r2, [r3, #0]
   127e0:	4642      	mov	r2, r8
   127e2:	0a17      	lsrs	r7, r2, #8
   127e4:	705f      	strb	r7, [r3, #1]
   127e6:	e79d      	b.n	12724 <put_fat.part.5+0x20>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   127e8:	4642      	mov	r2, r8
   127ea:	701a      	strb	r2, [r3, #0]
			bc++;
   127ec:	464d      	mov	r5, r9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   127ee:	6a23      	ldr	r3, [r4, #32]
			bc++;
   127f0:	3501      	adds	r5, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   127f2:	469c      	mov	ip, r3
   127f4:	0a69      	lsrs	r1, r5, #9
			fs->wflag = 1;
   127f6:	7127      	strb	r7, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   127f8:	4461      	add	r1, ip
   127fa:	0020      	movs	r0, r4
   127fc:	47d0      	blx	sl
			if (res != FR_OK) break;
   127fe:	2800      	cmp	r0, #0
   12800:	d1be      	bne.n	12780 <put_fat.part.5+0x7c>
			p = &fs->win[bc % SS(fs)];
   12802:	05ed      	lsls	r5, r5, #23
   12804:	0ded      	lsrs	r5, r5, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12806:	1965      	adds	r5, r4, r5
   12808:	002b      	movs	r3, r5
   1280a:	4641      	mov	r1, r8
   1280c:	220f      	movs	r2, #15
   1280e:	3330      	adds	r3, #48	; 0x30
   12810:	781b      	ldrb	r3, [r3, #0]
   12812:	0a0f      	lsrs	r7, r1, #8
   12814:	4393      	bics	r3, r2
   12816:	4017      	ands	r7, r2
   12818:	431f      	orrs	r7, r3
   1281a:	3530      	adds	r5, #48	; 0x30
   1281c:	702f      	strb	r7, [r5, #0]
   1281e:	e781      	b.n	12724 <put_fat.part.5+0x20>
   12820:	4643      	mov	r3, r8
			p = &fs->win[bc % SS(fs)];
   12822:	05ed      	lsls	r5, r5, #23
   12824:	0ded      	lsrs	r5, r5, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12826:	091f      	lsrs	r7, r3, #4
   12828:	b2ff      	uxtb	r7, r7
   1282a:	1965      	adds	r5, r4, r5
   1282c:	e7f5      	b.n	1281a <put_fat.part.5+0x116>
   1282e:	46c0      	nop			; (mov r8, r8)
   12830:	0001209d 	.word	0x0001209d

00012834 <create_chain>:
{
   12834:	b5f0      	push	{r4, r5, r6, r7, lr}
   12836:	46c6      	mov	lr, r8
   12838:	0005      	movs	r5, r0
   1283a:	b500      	push	{lr}
   1283c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   1283e:	2900      	cmp	r1, #0
   12840:	d122      	bne.n	12888 <create_chain+0x54>
		scl = fs->last_clust;			/* Get suggested start point */
   12842:	68c6      	ldr	r6, [r0, #12]
   12844:	6983      	ldr	r3, [r0, #24]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12846:	2e00      	cmp	r6, #0
   12848:	d12d      	bne.n	128a6 <create_chain+0x72>
   1284a:	3601      	adds	r6, #1
   1284c:	0034      	movs	r4, r6
   1284e:	4f2c      	ldr	r7, [pc, #176]	; (12900 <create_chain+0xcc>)
   12850:	e010      	b.n	12874 <create_chain+0x40>
			if (ncl > scl) return 0;	/* No free cluster */
   12852:	2e01      	cmp	r6, #1
   12854:	d92b      	bls.n	128ae <create_chain+0x7a>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12856:	2b02      	cmp	r3, #2
   12858:	d911      	bls.n	1287e <create_chain+0x4a>
			ncl = 2;
   1285a:	2402      	movs	r4, #2
   1285c:	0021      	movs	r1, r4
   1285e:	0028      	movs	r0, r5
   12860:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   12862:	2800      	cmp	r0, #0
   12864:	d025      	beq.n	128b2 <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12866:	1c43      	adds	r3, r0, #1
   12868:	d047      	beq.n	128fa <create_chain+0xc6>
   1286a:	2801      	cmp	r0, #1
   1286c:	d007      	beq.n	1287e <create_chain+0x4a>
		if (ncl == scl) return 0;		/* No free cluster */
   1286e:	42a6      	cmp	r6, r4
   12870:	d01d      	beq.n	128ae <create_chain+0x7a>
   12872:	69ab      	ldr	r3, [r5, #24]
		ncl++;							/* Next cluster */
   12874:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12876:	429c      	cmp	r4, r3
   12878:	d2eb      	bcs.n	12852 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1287a:	2c01      	cmp	r4, #1
   1287c:	d8ee      	bhi.n	1285c <create_chain+0x28>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   1287e:	2401      	movs	r4, #1
}
   12880:	0020      	movs	r0, r4
   12882:	bc04      	pop	{r2}
   12884:	4690      	mov	r8, r2
   12886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12888:	2901      	cmp	r1, #1
   1288a:	d9f8      	bls.n	1287e <create_chain+0x4a>
   1288c:	6983      	ldr	r3, [r0, #24]
   1288e:	4299      	cmp	r1, r3
   12890:	d2f5      	bcs.n	1287e <create_chain+0x4a>
   12892:	4b1b      	ldr	r3, [pc, #108]	; (12900 <create_chain+0xcc>)
   12894:	4798      	blx	r3
   12896:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12898:	2801      	cmp	r0, #1
   1289a:	d9f0      	bls.n	1287e <create_chain+0x4a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   1289c:	69ab      	ldr	r3, [r5, #24]
   1289e:	4283      	cmp	r3, r0
   128a0:	d8ee      	bhi.n	12880 <create_chain+0x4c>
   128a2:	4646      	mov	r6, r8
   128a4:	e7d2      	b.n	1284c <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   128a6:	429e      	cmp	r6, r3
   128a8:	d3d0      	bcc.n	1284c <create_chain+0x18>
   128aa:	2601      	movs	r6, #1
   128ac:	e7ce      	b.n	1284c <create_chain+0x18>
			if (ncl > scl) return 0;	/* No free cluster */
   128ae:	2400      	movs	r4, #0
   128b0:	e7e6      	b.n	12880 <create_chain+0x4c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   128b2:	69ab      	ldr	r3, [r5, #24]
   128b4:	42a3      	cmp	r3, r4
   128b6:	d9e2      	bls.n	1287e <create_chain+0x4a>
   128b8:	4a12      	ldr	r2, [pc, #72]	; (12904 <create_chain+0xd0>)
   128ba:	0021      	movs	r1, r4
   128bc:	0028      	movs	r0, r5
   128be:	4e12      	ldr	r6, [pc, #72]	; (12908 <create_chain+0xd4>)
   128c0:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
   128c2:	2800      	cmp	r0, #0
   128c4:	d117      	bne.n	128f6 <create_chain+0xc2>
   128c6:	4643      	mov	r3, r8
   128c8:	2b00      	cmp	r3, #0
   128ca:	d00b      	beq.n	128e4 <create_chain+0xb0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   128cc:	4643      	mov	r3, r8
   128ce:	2b01      	cmp	r3, #1
   128d0:	d9d5      	bls.n	1287e <create_chain+0x4a>
   128d2:	69ab      	ldr	r3, [r5, #24]
   128d4:	4598      	cmp	r8, r3
   128d6:	d2d2      	bcs.n	1287e <create_chain+0x4a>
   128d8:	0022      	movs	r2, r4
   128da:	4641      	mov	r1, r8
   128dc:	0028      	movs	r0, r5
   128de:	47b0      	blx	r6
	if (res == FR_OK) {
   128e0:	2800      	cmp	r0, #0
   128e2:	d108      	bne.n	128f6 <create_chain+0xc2>
		if (fs->free_clust != 0xFFFFFFFF) {
   128e4:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
   128e6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   128e8:	1c5a      	adds	r2, r3, #1
   128ea:	d0c9      	beq.n	12880 <create_chain+0x4c>
			fs->free_clust--;
   128ec:	3b01      	subs	r3, #1
   128ee:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   128f0:	2301      	movs	r3, #1
   128f2:	716b      	strb	r3, [r5, #5]
   128f4:	e7c4      	b.n	12880 <create_chain+0x4c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   128f6:	2801      	cmp	r0, #1
   128f8:	d1c1      	bne.n	1287e <create_chain+0x4a>
			if (ncl > scl) return 0;	/* No free cluster */
   128fa:	2401      	movs	r4, #1
   128fc:	4264      	negs	r4, r4
   128fe:	e7bf      	b.n	12880 <create_chain+0x4c>
   12900:	00012581 	.word	0x00012581
   12904:	0fffffff 	.word	0x0fffffff
   12908:	00012705 	.word	0x00012705

0001290c <dir_next>:
{
   1290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1290e:	464e      	mov	r6, r9
   12910:	4645      	mov	r5, r8
   12912:	46de      	mov	lr, fp
   12914:	4657      	mov	r7, sl
   12916:	b5e0      	push	{r5, r6, r7, lr}
	i = dj->index + 1;
   12918:	88c4      	ldrh	r4, [r0, #6]
{
   1291a:	0005      	movs	r5, r0
	i = dj->index + 1;
   1291c:	3401      	adds	r4, #1
   1291e:	b2a4      	uxth	r4, r4
{
   12920:	000e      	movs	r6, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12922:	2c00      	cmp	r4, #0
   12924:	d106      	bne.n	12934 <dir_next+0x28>
		return FR_NO_FILE;
   12926:	2004      	movs	r0, #4
}
   12928:	bc3c      	pop	{r2, r3, r4, r5}
   1292a:	4690      	mov	r8, r2
   1292c:	4699      	mov	r9, r3
   1292e:	46a2      	mov	sl, r4
   12930:	46ab      	mov	fp, r5
   12932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12934:	6903      	ldr	r3, [r0, #16]
   12936:	2b00      	cmp	r3, #0
   12938:	d0f5      	beq.n	12926 <dir_next+0x1a>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   1293a:	270f      	movs	r7, #15
   1293c:	4027      	ands	r7, r4
   1293e:	d007      	beq.n	12950 <dir_next+0x44>
   12940:	6800      	ldr	r0, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12942:	3030      	adds	r0, #48	; 0x30
   12944:	017f      	lsls	r7, r7, #5
   12946:	19c7      	adds	r7, r0, r7
	dj->index = i;
   12948:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1294a:	616f      	str	r7, [r5, #20]
	return FR_OK;
   1294c:	2000      	movs	r0, #0
   1294e:	e7eb      	b.n	12928 <dir_next+0x1c>
		if (dj->clust == 0) {	/* Static table */
   12950:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
   12952:	3301      	adds	r3, #1
   12954:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12956:	6800      	ldr	r0, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
   12958:	2900      	cmp	r1, #0
   1295a:	d00b      	beq.n	12974 <dir_next+0x68>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1295c:	7883      	ldrb	r3, [r0, #2]
   1295e:	0922      	lsrs	r2, r4, #4
   12960:	3b01      	subs	r3, #1
   12962:	421a      	tst	r2, r3
   12964:	d1ed      	bne.n	12942 <dir_next+0x36>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12966:	2901      	cmp	r1, #1
   12968:	d902      	bls.n	12970 <dir_next+0x64>
   1296a:	6983      	ldr	r3, [r0, #24]
   1296c:	4299      	cmp	r1, r3
   1296e:	d305      	bcc.n	1297c <dir_next+0x70>
				if (clst <= 1) return FR_INT_ERR;
   12970:	2002      	movs	r0, #2
   12972:	e7d9      	b.n	12928 <dir_next+0x1c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12974:	8903      	ldrh	r3, [r0, #8]
   12976:	42a3      	cmp	r3, r4
   12978:	d9d5      	bls.n	12926 <dir_next+0x1a>
   1297a:	e7e2      	b.n	12942 <dir_next+0x36>
   1297c:	4b34      	ldr	r3, [pc, #208]	; (12a50 <dir_next+0x144>)
   1297e:	4798      	blx	r3
   12980:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12982:	0003      	movs	r3, r0
   12984:	2801      	cmp	r0, #1
   12986:	d9f3      	bls.n	12970 <dir_next+0x64>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12988:	3301      	adds	r3, #1
   1298a:	d05e      	beq.n	12a4a <dir_next+0x13e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1298c:	6828      	ldr	r0, [r5, #0]
   1298e:	6983      	ldr	r3, [r0, #24]
   12990:	4543      	cmp	r3, r8
   12992:	d90e      	bls.n	129b2 <dir_next+0xa6>
   12994:	4643      	mov	r3, r8
   12996:	1e9e      	subs	r6, r3, #2
				dj->clust = clst;				/* Initialize data for new cluster */
   12998:	4643      	mov	r3, r8
   1299a:	60eb      	str	r3, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1299c:	6983      	ldr	r3, [r0, #24]
   1299e:	2200      	movs	r2, #0
   129a0:	3b02      	subs	r3, #2
   129a2:	429e      	cmp	r6, r3
   129a4:	d203      	bcs.n	129ae <dir_next+0xa2>
	return clst * fs->csize + fs->database;
   129a6:	7883      	ldrb	r3, [r0, #2]
   129a8:	435e      	muls	r6, r3
   129aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
   129ac:	18f2      	adds	r2, r6, r3
				dj->sect = clust2sect(dj->fs, clst);
   129ae:	612a      	str	r2, [r5, #16]
   129b0:	e7c7      	b.n	12942 <dir_next+0x36>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   129b2:	2e00      	cmp	r6, #0
   129b4:	d0b7      	beq.n	12926 <dir_next+0x1a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   129b6:	4b27      	ldr	r3, [pc, #156]	; (12a54 <dir_next+0x148>)
   129b8:	68e9      	ldr	r1, [r5, #12]
   129ba:	4798      	blx	r3
   129bc:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   129be:	4643      	mov	r3, r8
   129c0:	2007      	movs	r0, #7
   129c2:	2b00      	cmp	r3, #0
   129c4:	d0b0      	beq.n	12928 <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
   129c6:	2b01      	cmp	r3, #1
   129c8:	d0d2      	beq.n	12970 <dir_next+0x64>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   129ca:	3301      	adds	r3, #1
   129cc:	d03d      	beq.n	12a4a <dir_next+0x13e>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   129ce:	4b22      	ldr	r3, [pc, #136]	; (12a58 <dir_next+0x14c>)
   129d0:	2100      	movs	r1, #0
   129d2:	6828      	ldr	r0, [r5, #0]
   129d4:	469a      	mov	sl, r3
   129d6:	4798      	blx	r3
   129d8:	2800      	cmp	r0, #0
   129da:	d136      	bne.n	12a4a <dir_next+0x13e>
   129dc:	218c      	movs	r1, #140	; 0x8c
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   129de:	682a      	ldr	r2, [r5, #0]
   129e0:	0089      	lsls	r1, r1, #2
   129e2:	0013      	movs	r3, r2
   129e4:	468c      	mov	ip, r1
   129e6:	3330      	adds	r3, #48	; 0x30
   129e8:	4462      	add	r2, ip
		*d++ = (BYTE)val;
   129ea:	7018      	strb	r0, [r3, #0]
   129ec:	3301      	adds	r3, #1
	while (cnt--)
   129ee:	4293      	cmp	r3, r2
   129f0:	d1fb      	bne.n	129ea <dir_next+0xde>
	clst -= 2;
   129f2:	4643      	mov	r3, r8
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   129f4:	682a      	ldr	r2, [r5, #0]
	clst -= 2;
   129f6:	1e9e      	subs	r6, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   129f8:	6993      	ldr	r3, [r2, #24]
   129fa:	1e99      	subs	r1, r3, #2
   129fc:	2300      	movs	r3, #0
   129fe:	428e      	cmp	r6, r1
   12a00:	d204      	bcs.n	12a0c <dir_next+0x100>
	return clst * fs->csize + fs->database;
   12a02:	6a91      	ldr	r1, [r2, #40]	; 0x28
   12a04:	7893      	ldrb	r3, [r2, #2]
   12a06:	468c      	mov	ip, r1
   12a08:	4373      	muls	r3, r6
   12a0a:	4463      	add	r3, ip
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   12a0c:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a0e:	2300      	movs	r3, #0
   12a10:	4699      	mov	r9, r3
						dj->fs->wflag = 1;
   12a12:	3301      	adds	r3, #1
   12a14:	469b      	mov	fp, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a16:	e00e      	b.n	12a36 <dir_next+0x12a>
						dj->fs->wflag = 1;
   12a18:	465a      	mov	r2, fp
   12a1a:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12a1c:	2100      	movs	r1, #0
   12a1e:	6828      	ldr	r0, [r5, #0]
   12a20:	47d0      	blx	sl
   12a22:	2800      	cmp	r0, #0
   12a24:	d111      	bne.n	12a4a <dir_next+0x13e>
						dj->fs->winsect++;
   12a26:	682a      	ldr	r2, [r5, #0]
   12a28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12a2a:	3301      	adds	r3, #1
   12a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12a2e:	464b      	mov	r3, r9
   12a30:	3301      	adds	r3, #1
   12a32:	b2db      	uxtb	r3, r3
   12a34:	4699      	mov	r9, r3
   12a36:	682b      	ldr	r3, [r5, #0]
   12a38:	789a      	ldrb	r2, [r3, #2]
   12a3a:	454a      	cmp	r2, r9
   12a3c:	d8ec      	bhi.n	12a18 <dir_next+0x10c>
					dj->fs->winsect -= c;						/* Rewind window address */
   12a3e:	4649      	mov	r1, r9
   12a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12a42:	1a52      	subs	r2, r2, r1
   12a44:	62da      	str	r2, [r3, #44]	; 0x2c
   12a46:	6828      	ldr	r0, [r5, #0]
   12a48:	e7a6      	b.n	12998 <dir_next+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12a4a:	2001      	movs	r0, #1
   12a4c:	e76c      	b.n	12928 <dir_next+0x1c>
   12a4e:	46c0      	nop			; (mov r8, r8)
   12a50:	00012581 	.word	0x00012581
   12a54:	00012835 	.word	0x00012835
   12a58:	0001209d 	.word	0x0001209d

00012a5c <follow_path>:
{
   12a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a5e:	4645      	mov	r5, r8
   12a60:	46de      	mov	lr, fp
   12a62:	4657      	mov	r7, sl
   12a64:	464e      	mov	r6, r9
   12a66:	b5e0      	push	{r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   12a68:	780b      	ldrb	r3, [r1, #0]
{
   12a6a:	0005      	movs	r5, r0
   12a6c:	000c      	movs	r4, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   12a6e:	2b2f      	cmp	r3, #47	; 0x2f
   12a70:	d100      	bne.n	12a74 <follow_path+0x18>
   12a72:	e0ca      	b.n	12c0a <follow_path+0x1ae>
   12a74:	2b5c      	cmp	r3, #92	; 0x5c
   12a76:	d100      	bne.n	12a7a <follow_path+0x1e>
   12a78:	e0c7      	b.n	12c0a <follow_path+0x1ae>
	dj->sclust = 0;						/* Start from the root dir */
   12a7a:	2700      	movs	r7, #0
   12a7c:	60af      	str	r7, [r5, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   12a7e:	7822      	ldrb	r2, [r4, #0]
   12a80:	2a1f      	cmp	r2, #31
   12a82:	d800      	bhi.n	12a86 <follow_path+0x2a>
   12a84:	e0c8      	b.n	12c18 <follow_path+0x1bc>
	while (cnt--)
   12a86:	2108      	movs	r1, #8
   12a88:	468a      	mov	sl, r1
		res = dir_next(dj, 0);		/* Next entry */
   12a8a:	4978      	ldr	r1, [pc, #480]	; (12c6c <follow_path+0x210>)
   12a8c:	69ab      	ldr	r3, [r5, #24]
   12a8e:	468b      	mov	fp, r1
   12a90:	e001      	b.n	12a96 <follow_path+0x3a>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   12a92:	3401      	adds	r4, #1
   12a94:	7822      	ldrb	r2, [r4, #0]
   12a96:	2a2f      	cmp	r2, #47	; 0x2f
   12a98:	d0fb      	beq.n	12a92 <follow_path+0x36>
   12a9a:	2a5c      	cmp	r2, #92	; 0x5c
   12a9c:	d0f9      	beq.n	12a92 <follow_path+0x36>
   12a9e:	0018      	movs	r0, r3
   12aa0:	001a      	movs	r2, r3
		*d++ = (BYTE)val;
   12aa2:	2120      	movs	r1, #32
   12aa4:	300b      	adds	r0, #11
   12aa6:	7011      	strb	r1, [r2, #0]
   12aa8:	3201      	adds	r2, #1
	while (cnt--)
   12aaa:	4290      	cmp	r0, r2
   12aac:	d1fb      	bne.n	12aa6 <follow_path+0x4a>
   12aae:	2200      	movs	r2, #0
   12ab0:	2701      	movs	r7, #1
   12ab2:	4694      	mov	ip, r2
   12ab4:	3208      	adds	r2, #8
   12ab6:	4691      	mov	r9, r2
   12ab8:	2200      	movs	r2, #0
   12aba:	1b3f      	subs	r7, r7, r4
   12abc:	4690      	mov	r8, r2
   12abe:	003a      	movs	r2, r7
   12ac0:	0026      	movs	r6, r4
   12ac2:	4667      	mov	r7, ip
   12ac4:	469c      	mov	ip, r3
   12ac6:	0013      	movs	r3, r2
		c = (BYTE)p[si++];
   12ac8:	7832      	ldrb	r2, [r6, #0]
   12aca:	1999      	adds	r1, r3, r6
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   12acc:	2a20      	cmp	r2, #32
   12ace:	d925      	bls.n	12b1c <follow_path+0xc0>
   12ad0:	2a2f      	cmp	r2, #47	; 0x2f
   12ad2:	d04a      	beq.n	12b6a <follow_path+0x10e>
   12ad4:	2a5c      	cmp	r2, #92	; 0x5c
   12ad6:	d048      	beq.n	12b6a <follow_path+0x10e>
		if (c == '.' || i >= ni) {
   12ad8:	2a2e      	cmp	r2, #46	; 0x2e
   12ada:	d02e      	beq.n	12b3a <follow_path+0xde>
   12adc:	45b9      	cmp	r9, r7
   12ade:	d924      	bls.n	12b2a <follow_path+0xce>
		if (c >= 0x80) {				/* Extended char? */
   12ae0:	b251      	sxtb	r1, r2
   12ae2:	2900      	cmp	r1, #0
   12ae4:	db21      	blt.n	12b2a <follow_path+0xce>
	while (*str && *str != chr) str++;
   12ae6:	2a22      	cmp	r2, #34	; 0x22
   12ae8:	d01f      	beq.n	12b2a <follow_path+0xce>
   12aea:	212a      	movs	r1, #42	; 0x2a
   12aec:	4860      	ldr	r0, [pc, #384]	; (12c70 <follow_path+0x214>)
   12aee:	428a      	cmp	r2, r1
   12af0:	d01b      	beq.n	12b2a <follow_path+0xce>
   12af2:	3001      	adds	r0, #1
   12af4:	7801      	ldrb	r1, [r0, #0]
   12af6:	2900      	cmp	r1, #0
   12af8:	d1f9      	bne.n	12aee <follow_path+0x92>
			if (IsUpper(c)) {			/* ASCII large capital? */
   12afa:	0011      	movs	r1, r2
   12afc:	3941      	subs	r1, #65	; 0x41
   12afe:	2919      	cmp	r1, #25
   12b00:	d827      	bhi.n	12b52 <follow_path+0xf6>
				b |= 2;
   12b02:	4641      	mov	r1, r8
   12b04:	2002      	movs	r0, #2
   12b06:	4301      	orrs	r1, r0
   12b08:	b2c9      	uxtb	r1, r1
   12b0a:	4688      	mov	r8, r1
			sfn[i++] = c;
   12b0c:	4661      	mov	r1, ip
   12b0e:	3601      	adds	r6, #1
   12b10:	55ca      	strb	r2, [r1, r7]
   12b12:	3701      	adds	r7, #1
		c = (BYTE)p[si++];
   12b14:	7832      	ldrb	r2, [r6, #0]
   12b16:	1999      	adds	r1, r3, r6
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   12b18:	2a20      	cmp	r2, #32
   12b1a:	d8d9      	bhi.n	12ad0 <follow_path+0x74>
   12b1c:	4663      	mov	r3, ip
   12b1e:	46bc      	mov	ip, r7
	*path = &p[si];						/* Return pointer to the next segment */
   12b20:	1864      	adds	r4, r4, r1
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   12b22:	4661      	mov	r1, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   12b24:	2204      	movs	r2, #4
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   12b26:	2900      	cmp	r1, #0
   12b28:	d126      	bne.n	12b78 <follow_path+0x11c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   12b2a:	2606      	movs	r6, #6
}
   12b2c:	0030      	movs	r0, r6
   12b2e:	bc3c      	pop	{r2, r3, r4, r5}
   12b30:	4690      	mov	r8, r2
   12b32:	4699      	mov	r9, r3
   12b34:	46a2      	mov	sl, r4
   12b36:	46ab      	mov	fp, r5
   12b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   12b3a:	464a      	mov	r2, r9
   12b3c:	2a08      	cmp	r2, #8
   12b3e:	d1f4      	bne.n	12b2a <follow_path+0xce>
			b <<= 2; continue;
   12b40:	4642      	mov	r2, r8
   12b42:	0092      	lsls	r2, r2, #2
   12b44:	b2d2      	uxtb	r2, r2
   12b46:	4690      	mov	r8, r2
			i = 8; ni = 11;
   12b48:	220b      	movs	r2, #11
   12b4a:	2708      	movs	r7, #8
   12b4c:	4691      	mov	r9, r2
   12b4e:	3601      	adds	r6, #1
   12b50:	e7e0      	b.n	12b14 <follow_path+0xb8>
				if (IsLower(c)) {		/* ASCII small capital? */
   12b52:	0011      	movs	r1, r2
   12b54:	3961      	subs	r1, #97	; 0x61
   12b56:	2919      	cmp	r1, #25
   12b58:	d8d8      	bhi.n	12b0c <follow_path+0xb0>
					b |= 1; c -= 0x20;
   12b5a:	4641      	mov	r1, r8
   12b5c:	2001      	movs	r0, #1
   12b5e:	4301      	orrs	r1, r0
   12b60:	b2c9      	uxtb	r1, r1
   12b62:	3a20      	subs	r2, #32
   12b64:	4688      	mov	r8, r1
   12b66:	b2d2      	uxtb	r2, r2
   12b68:	e7d0      	b.n	12b0c <follow_path+0xb0>
   12b6a:	4663      	mov	r3, ip
   12b6c:	46bc      	mov	ip, r7
	*path = &p[si];						/* Return pointer to the next segment */
   12b6e:	1864      	adds	r4, r4, r1
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   12b70:	4661      	mov	r1, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   12b72:	2200      	movs	r2, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   12b74:	2900      	cmp	r1, #0
   12b76:	d0d8      	beq.n	12b2a <follow_path+0xce>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   12b78:	7819      	ldrb	r1, [r3, #0]
   12b7a:	29e5      	cmp	r1, #229	; 0xe5
   12b7c:	d073      	beq.n	12c66 <follow_path+0x20a>
	if (ni == 8) b <<= 2;
   12b7e:	4649      	mov	r1, r9
   12b80:	2908      	cmp	r1, #8
   12b82:	d06b      	beq.n	12c5c <follow_path+0x200>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   12b84:	2103      	movs	r1, #3
   12b86:	4640      	mov	r0, r8
   12b88:	4001      	ands	r1, r0
   12b8a:	2901      	cmp	r1, #1
   12b8c:	d063      	beq.n	12c56 <follow_path+0x1fa>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   12b8e:	210c      	movs	r1, #12
   12b90:	4640      	mov	r0, r8
   12b92:	4001      	ands	r1, r0
   12b94:	2904      	cmp	r1, #4
   12b96:	d05b      	beq.n	12c50 <follow_path+0x1f4>
	sfn[NS] = c;		/* Store NT flag, File name is created */
   12b98:	72da      	strb	r2, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12b9a:	2100      	movs	r1, #0
   12b9c:	0028      	movs	r0, r5
   12b9e:	4b35      	ldr	r3, [pc, #212]	; (12c74 <follow_path+0x218>)
   12ba0:	4798      	blx	r3
	if (res != FR_OK) return res;
   12ba2:	2800      	cmp	r0, #0
   12ba4:	d14e      	bne.n	12c44 <follow_path+0x1e8>
   12ba6:	4b34      	ldr	r3, [pc, #208]	; (12c78 <follow_path+0x21c>)
   12ba8:	4699      	mov	r9, r3
		res = move_window(dj->fs, dj->sect);
   12baa:	6929      	ldr	r1, [r5, #16]
   12bac:	6828      	ldr	r0, [r5, #0]
   12bae:	47c8      	blx	r9
		if (res != FR_OK) break;
   12bb0:	2800      	cmp	r0, #0
   12bb2:	d13d      	bne.n	12c30 <follow_path+0x1d4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   12bb4:	696b      	ldr	r3, [r5, #20]
		c = dir[DIR_Name];
   12bb6:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   12bb8:	2900      	cmp	r1, #0
   12bba:	d03d      	beq.n	12c38 <follow_path+0x1dc>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   12bbc:	7ada      	ldrb	r2, [r3, #11]
   12bbe:	4690      	mov	r8, r2
   12bc0:	4652      	mov	r2, sl
   12bc2:	4646      	mov	r6, r8
   12bc4:	4232      	tst	r2, r6
   12bc6:	d12e      	bne.n	12c26 <follow_path+0x1ca>
   12bc8:	69af      	ldr	r7, [r5, #24]
   12bca:	2200      	movs	r2, #0
   12bcc:	e000      	b.n	12bd0 <follow_path+0x174>
   12bce:	5c99      	ldrb	r1, [r3, r2]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   12bd0:	5cbe      	ldrb	r6, [r7, r2]
   12bd2:	428e      	cmp	r6, r1
   12bd4:	d127      	bne.n	12c26 <follow_path+0x1ca>
   12bd6:	3201      	adds	r2, #1
   12bd8:	2a0b      	cmp	r2, #11
   12bda:	d1f8      	bne.n	12bce <follow_path+0x172>
   12bdc:	0002      	movs	r2, r0
   12bde:	0018      	movs	r0, r3
   12be0:	003b      	movs	r3, r7
   12be2:	0017      	movs	r7, r2
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   12be4:	7ada      	ldrb	r2, [r3, #11]
   12be6:	0752      	lsls	r2, r2, #29
   12be8:	d42e      	bmi.n	12c48 <follow_path+0x1ec>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   12bea:	4642      	mov	r2, r8
   12bec:	06d2      	lsls	r2, r2, #27
   12bee:	d527      	bpl.n	12c40 <follow_path+0x1e4>
			dj->sclust = LD_CLUST(dir);
   12bf0:	7d41      	ldrb	r1, [r0, #21]
   12bf2:	7d02      	ldrb	r2, [r0, #20]
   12bf4:	0209      	lsls	r1, r1, #8
   12bf6:	7ec6      	ldrb	r6, [r0, #27]
   12bf8:	430a      	orrs	r2, r1
   12bfa:	7e81      	ldrb	r1, [r0, #26]
   12bfc:	0236      	lsls	r6, r6, #8
   12bfe:	0412      	lsls	r2, r2, #16
   12c00:	4331      	orrs	r1, r6
   12c02:	430a      	orrs	r2, r1
   12c04:	60aa      	str	r2, [r5, #8]
   12c06:	7822      	ldrb	r2, [r4, #0]
			res = create_name(dj, &path);	/* Get a segment */
   12c08:	e745      	b.n	12a96 <follow_path+0x3a>
	dj->sclust = 0;						/* Start from the root dir */
   12c0a:	2700      	movs	r7, #0
		path++;
   12c0c:	3401      	adds	r4, #1
	dj->sclust = 0;						/* Start from the root dir */
   12c0e:	60af      	str	r7, [r5, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   12c10:	7822      	ldrb	r2, [r4, #0]
   12c12:	2a1f      	cmp	r2, #31
   12c14:	d900      	bls.n	12c18 <follow_path+0x1bc>
   12c16:	e736      	b.n	12a86 <follow_path+0x2a>
		res = dir_sdi(dj, 0);
   12c18:	2100      	movs	r1, #0
   12c1a:	0028      	movs	r0, r5
   12c1c:	4b15      	ldr	r3, [pc, #84]	; (12c74 <follow_path+0x218>)
   12c1e:	4798      	blx	r3
		dj->dir = 0;
   12c20:	616f      	str	r7, [r5, #20]
		res = dir_sdi(dj, 0);
   12c22:	0006      	movs	r6, r0
   12c24:	e782      	b.n	12b2c <follow_path+0xd0>
		res = dir_next(dj, 0);		/* Next entry */
   12c26:	2100      	movs	r1, #0
   12c28:	0028      	movs	r0, r5
   12c2a:	47d8      	blx	fp
	} while (res == FR_OK);
   12c2c:	2800      	cmp	r0, #0
   12c2e:	d0bc      	beq.n	12baa <follow_path+0x14e>
   12c30:	0006      	movs	r6, r0
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   12c32:	2e04      	cmp	r6, #4
   12c34:	d000      	beq.n	12c38 <follow_path+0x1dc>
   12c36:	e779      	b.n	12b2c <follow_path+0xd0>
			ns = *(dj->fn+NS);
   12c38:	69ab      	ldr	r3, [r5, #24]
   12c3a:	7adb      	ldrb	r3, [r3, #11]
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   12c3c:	075b      	lsls	r3, r3, #29
   12c3e:	d405      	bmi.n	12c4c <follow_path+0x1f0>
   12c40:	2605      	movs	r6, #5
   12c42:	e773      	b.n	12b2c <follow_path+0xd0>
   12c44:	0006      	movs	r6, r0
   12c46:	e7f4      	b.n	12c32 <follow_path+0x1d6>
   12c48:	003e      	movs	r6, r7
   12c4a:	e76f      	b.n	12b2c <follow_path+0xd0>
   12c4c:	2604      	movs	r6, #4
   12c4e:	e76d      	b.n	12b2c <follow_path+0xd0>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   12c50:	3104      	adds	r1, #4
   12c52:	430a      	orrs	r2, r1
   12c54:	e7a0      	b.n	12b98 <follow_path+0x13c>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   12c56:	310f      	adds	r1, #15
   12c58:	430a      	orrs	r2, r1
   12c5a:	e798      	b.n	12b8e <follow_path+0x132>
	if (ni == 8) b <<= 2;
   12c5c:	4641      	mov	r1, r8
   12c5e:	0089      	lsls	r1, r1, #2
   12c60:	b2c9      	uxtb	r1, r1
   12c62:	4688      	mov	r8, r1
   12c64:	e78e      	b.n	12b84 <follow_path+0x128>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   12c66:	39e0      	subs	r1, #224	; 0xe0
   12c68:	7019      	strb	r1, [r3, #0]
   12c6a:	e788      	b.n	12b7e <follow_path+0x122>
   12c6c:	0001290d 	.word	0x0001290d
   12c70:	000163ed 	.word	0x000163ed
   12c74:	0001265d 	.word	0x0001265d
   12c78:	0001209d 	.word	0x0001209d

00012c7c <remove_chain.part.6>:
FRESULT remove_chain (
   12c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c7e:	4b1a      	ldr	r3, [pc, #104]	; (12ce8 <remove_chain.part.6+0x6c>)
   12c80:	46ce      	mov	lr, r9
   12c82:	0004      	movs	r4, r0
   12c84:	4699      	mov	r9, r3
				fs->fsi_flag = 1;
   12c86:	2301      	movs	r3, #1
FRESULT remove_chain (
   12c88:	4647      	mov	r7, r8
				fs->fsi_flag = 1;
   12c8a:	4698      	mov	r8, r3
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12c8c:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
   12c8e:	b580      	push	{r7, lr}
   12c90:	000d      	movs	r5, r1
   12c92:	4f16      	ldr	r7, [pc, #88]	; (12cec <remove_chain.part.6+0x70>)
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12c94:	429d      	cmp	r5, r3
   12c96:	d223      	bcs.n	12ce0 <remove_chain.part.6+0x64>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12c98:	2d01      	cmp	r5, #1
   12c9a:	d90b      	bls.n	12cb4 <remove_chain.part.6+0x38>
   12c9c:	0029      	movs	r1, r5
   12c9e:	0020      	movs	r0, r4
   12ca0:	47b8      	blx	r7
   12ca2:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   12ca4:	d01c      	beq.n	12ce0 <remove_chain.part.6+0x64>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12ca6:	2801      	cmp	r0, #1
   12ca8:	d004      	beq.n	12cb4 <remove_chain.part.6+0x38>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12caa:	1c43      	adds	r3, r0, #1
   12cac:	d01a      	beq.n	12ce4 <remove_chain.part.6+0x68>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12cae:	69a3      	ldr	r3, [r4, #24]
   12cb0:	429d      	cmp	r5, r3
   12cb2:	d304      	bcc.n	12cbe <remove_chain.part.6+0x42>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   12cb4:	2002      	movs	r0, #2
}
   12cb6:	bc0c      	pop	{r2, r3}
   12cb8:	4690      	mov	r8, r2
   12cba:	4699      	mov	r9, r3
   12cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cbe:	2200      	movs	r2, #0
   12cc0:	0029      	movs	r1, r5
   12cc2:	0020      	movs	r0, r4
   12cc4:	47c8      	blx	r9
			if (res != FR_OK) break;
   12cc6:	2800      	cmp	r0, #0
   12cc8:	d1f5      	bne.n	12cb6 <remove_chain.part.6+0x3a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   12cca:	6923      	ldr	r3, [r4, #16]
   12ccc:	1c5a      	adds	r2, r3, #1
   12cce:	d003      	beq.n	12cd8 <remove_chain.part.6+0x5c>
				fs->free_clust++;
   12cd0:	3301      	adds	r3, #1
   12cd2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   12cd4:	4643      	mov	r3, r8
   12cd6:	7163      	strb	r3, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12cd8:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
   12cda:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   12cdc:	429d      	cmp	r5, r3
   12cde:	d3db      	bcc.n	12c98 <remove_chain.part.6+0x1c>
FRESULT remove_chain (
   12ce0:	2000      	movs	r0, #0
   12ce2:	e7e8      	b.n	12cb6 <remove_chain.part.6+0x3a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   12ce4:	2001      	movs	r0, #1
   12ce6:	e7e6      	b.n	12cb6 <remove_chain.part.6+0x3a>
   12ce8:	00012705 	.word	0x00012705
   12cec:	00012581 	.word	0x00012581

00012cf0 <dir_register>:
{
   12cf0:	b570      	push	{r4, r5, r6, lr}
	res = dir_sdi(dj, 0);
   12cf2:	2100      	movs	r1, #0
   12cf4:	4b18      	ldr	r3, [pc, #96]	; (12d58 <dir_register+0x68>)
{
   12cf6:	0004      	movs	r4, r0
	res = dir_sdi(dj, 0);
   12cf8:	4798      	blx	r3
	if (res == FR_OK) {
   12cfa:	2800      	cmp	r0, #0
   12cfc:	d112      	bne.n	12d24 <dir_register+0x34>
   12cfe:	4d17      	ldr	r5, [pc, #92]	; (12d5c <dir_register+0x6c>)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
   12d00:	4e17      	ldr	r6, [pc, #92]	; (12d60 <dir_register+0x70>)
   12d02:	e00a      	b.n	12d1a <dir_register+0x2a>
			c = *dj->dir;
   12d04:	6963      	ldr	r3, [r4, #20]
   12d06:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
   12d08:	2be5      	cmp	r3, #229	; 0xe5
   12d0a:	d00c      	beq.n	12d26 <dir_register+0x36>
   12d0c:	2b00      	cmp	r3, #0
   12d0e:	d00a      	beq.n	12d26 <dir_register+0x36>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
   12d10:	2101      	movs	r1, #1
   12d12:	0020      	movs	r0, r4
   12d14:	47b0      	blx	r6
		} while (res == FR_OK);
   12d16:	2800      	cmp	r0, #0
   12d18:	d104      	bne.n	12d24 <dir_register+0x34>
			res = move_window(dj->fs, dj->sect);
   12d1a:	6921      	ldr	r1, [r4, #16]
   12d1c:	6820      	ldr	r0, [r4, #0]
   12d1e:	47a8      	blx	r5
			if (res != FR_OK) break;
   12d20:	2800      	cmp	r0, #0
   12d22:	d0ef      	beq.n	12d04 <dir_register+0x14>
}
   12d24:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(dj->fs, dj->sect);
   12d26:	6921      	ldr	r1, [r4, #16]
   12d28:	6820      	ldr	r0, [r4, #0]
   12d2a:	47a8      	blx	r5
		if (res == FR_OK) {
   12d2c:	2800      	cmp	r0, #0
   12d2e:	d1f9      	bne.n	12d24 <dir_register+0x34>
			dir = dj->dir;
   12d30:	6965      	ldr	r5, [r4, #20]
		*d++ = (BYTE)val;
   12d32:	2200      	movs	r2, #0
   12d34:	0029      	movs	r1, r5
   12d36:	002b      	movs	r3, r5
   12d38:	3120      	adds	r1, #32
   12d3a:	701a      	strb	r2, [r3, #0]
   12d3c:	3301      	adds	r3, #1
	while (cnt--)
   12d3e:	428b      	cmp	r3, r1
   12d40:	d1fb      	bne.n	12d3a <dir_register+0x4a>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   12d42:	2300      	movs	r3, #0
   12d44:	69a1      	ldr	r1, [r4, #24]
		*d++ = *s++;
   12d46:	5cca      	ldrb	r2, [r1, r3]
   12d48:	54ea      	strb	r2, [r5, r3]
   12d4a:	3301      	adds	r3, #1
	while (cnt--)
   12d4c:	2b0b      	cmp	r3, #11
   12d4e:	d1fa      	bne.n	12d46 <dir_register+0x56>
			dj->fs->wflag = 1;
   12d50:	2201      	movs	r2, #1
   12d52:	6823      	ldr	r3, [r4, #0]
   12d54:	711a      	strb	r2, [r3, #4]
   12d56:	e7e5      	b.n	12d24 <dir_register+0x34>
   12d58:	0001265d 	.word	0x0001265d
   12d5c:	0001209d 	.word	0x0001209d
   12d60:	0001290d 	.word	0x0001290d

00012d64 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   12d64:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   12d66:	2800      	cmp	r0, #0
   12d68:	d001      	beq.n	12d6e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   12d6a:	0018      	movs	r0, r3
   12d6c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   12d6e:	4b06      	ldr	r3, [pc, #24]	; (12d88 <f_mount+0x24>)
   12d70:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
   12d72:	2a00      	cmp	r2, #0
   12d74:	d000      	beq.n	12d78 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
   12d76:	7010      	strb	r0, [r2, #0]
	if (fs) {
   12d78:	2900      	cmp	r1, #0
   12d7a:	d001      	beq.n	12d80 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
   12d7c:	2200      	movs	r2, #0
   12d7e:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   12d80:	6019      	str	r1, [r3, #0]
	return FR_OK;
   12d82:	2300      	movs	r3, #0
   12d84:	e7f1      	b.n	12d6a <f_mount+0x6>
   12d86:	46c0      	nop			; (mov r8, r8)
   12d88:	200009a8 	.word	0x200009a8

00012d8c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   12d8c:	b5f0      	push	{r4, r5, r6, r7, lr}


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   12d8e:	271f      	movs	r7, #31
{
   12d90:	46c6      	mov	lr, r8
   12d92:	0016      	movs	r6, r2
	fp->fs = 0;			/* Clear file object */
   12d94:	2300      	movs	r3, #0
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   12d96:	4017      	ands	r7, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   12d98:	221e      	movs	r2, #30
{
   12d9a:	b500      	push	{lr}
   12d9c:	b08c      	sub	sp, #48	; 0x30
	fp->fs = 0;			/* Clear file object */
   12d9e:	6003      	str	r3, [r0, #0]
{
   12da0:	9101      	str	r1, [sp, #4]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   12da2:	4b53      	ldr	r3, [pc, #332]	; (12ef0 <f_open+0x164>)
{
   12da4:	0005      	movs	r5, r0
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   12da6:	4032      	ands	r2, r6
   12da8:	a905      	add	r1, sp, #20
   12daa:	a801      	add	r0, sp, #4
   12dac:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   12dae:	ab02      	add	r3, sp, #8
   12db0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK)
   12db2:	2800      	cmp	r0, #0
   12db4:	d009      	beq.n	12dca <f_open+0x3e>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12db6:	231c      	movs	r3, #28
   12db8:	4233      	tst	r3, r6
   12dba:	d002      	beq.n	12dc2 <f_open+0x36>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   12dbc:	2804      	cmp	r0, #4
   12dbe:	d100      	bne.n	12dc2 <f_open+0x36>
   12dc0:	e08d      	b.n	12ede <f_open+0x152>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
   12dc2:	b00c      	add	sp, #48	; 0x30
   12dc4:	bc04      	pop	{r2}
   12dc6:	4690      	mov	r8, r2
   12dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
   12dca:	9901      	ldr	r1, [sp, #4]
   12dcc:	a805      	add	r0, sp, #20
   12dce:	4b49      	ldr	r3, [pc, #292]	; (12ef4 <f_open+0x168>)
   12dd0:	4798      	blx	r3
	dir = dj.dir;
   12dd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	if (res == FR_OK) {
   12dd4:	2800      	cmp	r0, #0
   12dd6:	d1ee      	bne.n	12db6 <f_open+0x2a>
		if (!dir)	/* Current dir itself */
   12dd8:	2c00      	cmp	r4, #0
   12dda:	d03b      	beq.n	12e54 <f_open+0xc8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12ddc:	231c      	movs	r3, #28
   12dde:	4233      	tst	r3, r6
   12de0:	d02c      	beq.n	12e3c <f_open+0xb0>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12de2:	2211      	movs	r2, #17
   12de4:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_DENIED;
   12de6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12de8:	421a      	tst	r2, r3
   12dea:	d1ea      	bne.n	12dc2 <f_open+0x36>
					res = FR_EXIST;
   12dec:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   12dee:	0773      	lsls	r3, r6, #29
   12df0:	d4e7      	bmi.n	12dc2 <f_open+0x36>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   12df2:	073b      	lsls	r3, r7, #28
   12df4:	d430      	bmi.n	12e58 <f_open+0xcc>
   12df6:	9a05      	ldr	r2, [sp, #20]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   12df8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		fp->dir_ptr = dir;
   12dfa:	622c      	str	r4, [r5, #32]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   12dfc:	61eb      	str	r3, [r5, #28]
		fp->flag = mode;					/* File access mode */
   12dfe:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   12e00:	7d61      	ldrb	r1, [r4, #21]
   12e02:	7d23      	ldrb	r3, [r4, #20]
   12e04:	7ee0      	ldrb	r0, [r4, #27]
   12e06:	0209      	lsls	r1, r1, #8
   12e08:	430b      	orrs	r3, r1
   12e0a:	7ea1      	ldrb	r1, [r4, #26]
   12e0c:	0200      	lsls	r0, r0, #8
   12e0e:	4301      	orrs	r1, r0
   12e10:	041b      	lsls	r3, r3, #16
   12e12:	430b      	orrs	r3, r1
   12e14:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   12e16:	7f61      	ldrb	r1, [r4, #29]
   12e18:	7f23      	ldrb	r3, [r4, #28]
   12e1a:	0209      	lsls	r1, r1, #8
   12e1c:	4319      	orrs	r1, r3
   12e1e:	7fa3      	ldrb	r3, [r4, #30]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   12e20:	2000      	movs	r0, #0
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   12e22:	041b      	lsls	r3, r3, #16
   12e24:	4319      	orrs	r1, r3
   12e26:	7fe3      	ldrb	r3, [r4, #31]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   12e28:	602a      	str	r2, [r5, #0]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   12e2a:	061b      	lsls	r3, r3, #24
   12e2c:	430b      	orrs	r3, r1
   12e2e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   12e30:	2300      	movs	r3, #0
   12e32:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   12e34:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   12e36:	88d3      	ldrh	r3, [r2, #6]
   12e38:	80ab      	strh	r3, [r5, #4]
   12e3a:	e7c2      	b.n	12dc2 <f_open+0x36>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   12e3c:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   12e3e:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   12e40:	06da      	lsls	r2, r3, #27
   12e42:	d4be      	bmi.n	12dc2 <f_open+0x36>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   12e44:	07b2      	lsls	r2, r6, #30
   12e46:	d445      	bmi.n	12ed4 <f_open+0x148>
   12e48:	9a05      	ldr	r2, [sp, #20]
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   12e4a:	0733      	lsls	r3, r6, #28
   12e4c:	d5d4      	bpl.n	12df8 <f_open+0x6c>
			mode |= FA__WRITTEN;
   12e4e:	2320      	movs	r3, #32
   12e50:	431f      	orrs	r7, r3
   12e52:	e7d1      	b.n	12df8 <f_open+0x6c>
			res = FR_INVALID_NAME;
   12e54:	2006      	movs	r0, #6
   12e56:	e7b4      	b.n	12dc2 <f_open+0x36>
			dw = get_fattime();					/* Created time */
   12e58:	4b27      	ldr	r3, [pc, #156]	; (12ef8 <f_open+0x16c>)
   12e5a:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   12e5c:	0a03      	lsrs	r3, r0, #8
   12e5e:	73e3      	strb	r3, [r4, #15]
   12e60:	0c03      	lsrs	r3, r0, #16
   12e62:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   12e64:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
   12e66:	7d62      	ldrb	r2, [r4, #21]
   12e68:	7d26      	ldrb	r6, [r4, #20]
   12e6a:	7ee1      	ldrb	r1, [r4, #27]
   12e6c:	0212      	lsls	r2, r2, #8
   12e6e:	4316      	orrs	r6, r2
   12e70:	7ea2      	ldrb	r2, [r4, #26]
   12e72:	0209      	lsls	r1, r1, #8
   12e74:	430a      	orrs	r2, r1
   12e76:	0436      	lsls	r6, r6, #16
   12e78:	4316      	orrs	r6, r2
			dj.fs->wflag = 1;
   12e7a:	9a05      	ldr	r2, [sp, #20]
			ST_DWORD(dir+DIR_CrtTime, dw);
   12e7c:	73a0      	strb	r0, [r4, #14]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   12e7e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   12e80:	7723      	strb	r3, [r4, #28]
   12e82:	7763      	strb	r3, [r4, #29]
   12e84:	77a3      	strb	r3, [r4, #30]
   12e86:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   12e88:	76a3      	strb	r3, [r4, #26]
   12e8a:	76e3      	strb	r3, [r4, #27]
   12e8c:	7523      	strb	r3, [r4, #20]
   12e8e:	7563      	strb	r3, [r4, #21]
			ST_DWORD(dir+DIR_CrtTime, dw);
   12e90:	0e00      	lsrs	r0, r0, #24
			dj.fs->wflag = 1;
   12e92:	3301      	adds	r3, #1
			ST_DWORD(dir+DIR_CrtTime, dw);
   12e94:	7460      	strb	r0, [r4, #17]
			dj.fs->wflag = 1;
   12e96:	7113      	strb	r3, [r2, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   12e98:	2e00      	cmp	r6, #0
   12e9a:	d0d8      	beq.n	12e4e <f_open+0xc2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12e9c:	2002      	movs	r0, #2
   12e9e:	2e01      	cmp	r6, #1
   12ea0:	d100      	bne.n	12ea4 <f_open+0x118>
   12ea2:	e78e      	b.n	12dc2 <f_open+0x36>
   12ea4:	6993      	ldr	r3, [r2, #24]
   12ea6:	429e      	cmp	r6, r3
   12ea8:	d300      	bcc.n	12eac <f_open+0x120>
   12eaa:	e78a      	b.n	12dc2 <f_open+0x36>
				dw = dj.fs->winsect;
   12eac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12eae:	0031      	movs	r1, r6
   12eb0:	4698      	mov	r8, r3
   12eb2:	0010      	movs	r0, r2
   12eb4:	4b11      	ldr	r3, [pc, #68]	; (12efc <f_open+0x170>)
   12eb6:	4798      	blx	r3
				if (res == FR_OK) {
   12eb8:	2800      	cmp	r0, #0
   12eba:	d000      	beq.n	12ebe <f_open+0x132>
   12ebc:	e781      	b.n	12dc2 <f_open+0x36>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   12ebe:	9805      	ldr	r0, [sp, #20]
   12ec0:	3e01      	subs	r6, #1
   12ec2:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
   12ec4:	4641      	mov	r1, r8
   12ec6:	4b0e      	ldr	r3, [pc, #56]	; (12f00 <f_open+0x174>)
   12ec8:	4798      	blx	r3
	if (res == FR_OK) {
   12eca:	2800      	cmp	r0, #0
   12ecc:	d000      	beq.n	12ed0 <f_open+0x144>
   12ece:	e778      	b.n	12dc2 <f_open+0x36>
   12ed0:	9a05      	ldr	r2, [sp, #20]
   12ed2:	e7bc      	b.n	12e4e <f_open+0xc2>
				res = FR_DENIED;
   12ed4:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   12ed6:	07db      	lsls	r3, r3, #31
   12ed8:	d500      	bpl.n	12edc <f_open+0x150>
   12eda:	e772      	b.n	12dc2 <f_open+0x36>
   12edc:	e7b4      	b.n	12e48 <f_open+0xbc>
				res = dir_register(&dj);
   12ede:	4b09      	ldr	r3, [pc, #36]	; (12f04 <f_open+0x178>)
   12ee0:	a805      	add	r0, sp, #20
   12ee2:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   12ee4:	2308      	movs	r3, #8
   12ee6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12ee8:	431f      	orrs	r7, r3
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   12eea:	2800      	cmp	r0, #0
   12eec:	d081      	beq.n	12df2 <f_open+0x66>
   12eee:	e768      	b.n	12dc2 <f_open+0x36>
   12ef0:	000122b9 	.word	0x000122b9
   12ef4:	00012a5d 	.word	0x00012a5d
   12ef8:	0001204d 	.word	0x0001204d
   12efc:	00012c7d 	.word	0x00012c7d
   12f00:	0001209d 	.word	0x0001209d
   12f04:	00012cf1 	.word	0x00012cf1

00012f08 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   12f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f0a:	464e      	mov	r6, r9
   12f0c:	4699      	mov	r9, r3
   12f0e:	4657      	mov	r7, sl
   12f10:	4645      	mov	r5, r8
   12f12:	46de      	mov	lr, fp
   12f14:	4690      	mov	r8, r2
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   12f16:	2300      	movs	r3, #0
   12f18:	464a      	mov	r2, r9
{
   12f1a:	b5e0      	push	{r5, r6, r7, lr}
	*bw = 0;	/* Initialize byte counter */
   12f1c:	6013      	str	r3, [r2, #0]
{
   12f1e:	0006      	movs	r6, r0

	res = validate(fp->fs, fp->id);			/* Check validity */
   12f20:	6800      	ldr	r0, [r0, #0]
{
   12f22:	b083      	sub	sp, #12
   12f24:	000f      	movs	r7, r1
	if (!fs || !fs->fs_type || fs->id != id)
   12f26:	2800      	cmp	r0, #0
   12f28:	d021      	beq.n	12f6e <f_write+0x66>
   12f2a:	2209      	movs	r2, #9
   12f2c:	7803      	ldrb	r3, [r0, #0]
   12f2e:	4692      	mov	sl, r2
   12f30:	2b00      	cmp	r3, #0
   12f32:	d107      	bne.n	12f44 <f_write+0x3c>

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
   12f34:	4650      	mov	r0, sl
   12f36:	b003      	add	sp, #12
   12f38:	bc3c      	pop	{r2, r3, r4, r5}
   12f3a:	4690      	mov	r8, r2
   12f3c:	4699      	mov	r9, r3
   12f3e:	46a2      	mov	sl, r4
   12f40:	46ab      	mov	fp, r5
   12f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   12f44:	88b2      	ldrh	r2, [r6, #4]
   12f46:	88c3      	ldrh	r3, [r0, #6]
   12f48:	429a      	cmp	r2, r3
   12f4a:	d1f3      	bne.n	12f34 <f_write+0x2c>
   12f4c:	4b75      	ldr	r3, [pc, #468]	; (13124 <f_write+0x21c>)
   12f4e:	4798      	blx	r3
   12f50:	4682      	mov	sl, r0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   12f52:	2800      	cmp	r0, #0
   12f54:	d1ee      	bne.n	12f34 <f_write+0x2c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   12f56:	79b3      	ldrb	r3, [r6, #6]
   12f58:	b25a      	sxtb	r2, r3
   12f5a:	2a00      	cmp	r2, #0
   12f5c:	db04      	blt.n	12f68 <f_write+0x60>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   12f5e:	079a      	lsls	r2, r3, #30
   12f60:	d408      	bmi.n	12f74 <f_write+0x6c>
		LEAVE_FF(fp->fs, FR_DENIED);
   12f62:	2307      	movs	r3, #7
   12f64:	469a      	mov	sl, r3
   12f66:	e7e5      	b.n	12f34 <f_write+0x2c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   12f68:	2302      	movs	r3, #2
   12f6a:	469a      	mov	sl, r3
   12f6c:	e7e2      	b.n	12f34 <f_write+0x2c>
	if (!fs || !fs->fs_type || fs->id != id)
   12f6e:	2309      	movs	r3, #9
   12f70:	469a      	mov	sl, r3
   12f72:	e7df      	b.n	12f34 <f_write+0x2c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   12f74:	4641      	mov	r1, r8
   12f76:	68f2      	ldr	r2, [r6, #12]
   12f78:	1851      	adds	r1, r2, r1
   12f7a:	428a      	cmp	r2, r1
   12f7c:	d907      	bls.n	12f8e <f_write+0x86>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   12f7e:	68b1      	ldr	r1, [r6, #8]
   12f80:	4291      	cmp	r1, r2
   12f82:	d900      	bls.n	12f86 <f_write+0x7e>
   12f84:	60f1      	str	r1, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   12f86:	2220      	movs	r2, #32
   12f88:	4313      	orrs	r3, r2
   12f8a:	71b3      	strb	r3, [r6, #6]
	LEAVE_FF(fp->fs, FR_OK);
   12f8c:	e7d2      	b.n	12f34 <f_write+0x2c>
	for ( ;  btw;							/* Repeat until all data written */
   12f8e:	4641      	mov	r1, r8
   12f90:	2900      	cmp	r1, #0
   12f92:	d0f4      	beq.n	12f7e <f_write+0x76>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   12f94:	68b3      	ldr	r3, [r6, #8]
   12f96:	05dc      	lsls	r4, r3, #23
   12f98:	0de4      	lsrs	r4, r4, #23
   12f9a:	d02d      	beq.n	12ff8 <f_write+0xf0>
   12f9c:	4b62      	ldr	r3, [pc, #392]	; (13128 <f_write+0x220>)
   12f9e:	69b5      	ldr	r5, [r6, #24]
   12fa0:	469b      	mov	fp, r3
   12fa2:	6830      	ldr	r0, [r6, #0]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   12fa4:	2380      	movs	r3, #128	; 0x80
   12fa6:	009b      	lsls	r3, r3, #2
   12fa8:	1b1c      	subs	r4, r3, r4
   12faa:	4544      	cmp	r4, r8
   12fac:	d900      	bls.n	12fb0 <f_write+0xa8>
   12fae:	4644      	mov	r4, r8
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   12fb0:	0029      	movs	r1, r5
   12fb2:	47d8      	blx	fp
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d179      	bne.n	130ac <f_write+0x1a4>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   12fb8:	68b3      	ldr	r3, [r6, #8]
   12fba:	05d9      	lsls	r1, r3, #23
   12fbc:	6833      	ldr	r3, [r6, #0]
   12fbe:	0dc9      	lsrs	r1, r1, #23
   12fc0:	469c      	mov	ip, r3
   12fc2:	2300      	movs	r3, #0
   12fc4:	3130      	adds	r1, #48	; 0x30
   12fc6:	4461      	add	r1, ip
		*d++ = *s++;
   12fc8:	5cfa      	ldrb	r2, [r7, r3]
   12fca:	54ca      	strb	r2, [r1, r3]
   12fcc:	3301      	adds	r3, #1
	while (cnt--)
   12fce:	429c      	cmp	r4, r3
   12fd0:	d1fa      	bne.n	12fc8 <f_write+0xc0>
		fp->fs->wflag = 1;
   12fd2:	2301      	movs	r3, #1
   12fd4:	6832      	ldr	r2, [r6, #0]
   12fd6:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   12fd8:	68b3      	ldr	r3, [r6, #8]
   12fda:	464a      	mov	r2, r9
   12fdc:	191b      	adds	r3, r3, r4
   12fde:	60b3      	str	r3, [r6, #8]
   12fe0:	464b      	mov	r3, r9
   12fe2:	681b      	ldr	r3, [r3, #0]
   12fe4:	193f      	adds	r7, r7, r4
   12fe6:	191b      	adds	r3, r3, r4
   12fe8:	6013      	str	r3, [r2, #0]
   12fea:	4643      	mov	r3, r8
   12fec:	1b1b      	subs	r3, r3, r4
   12fee:	4698      	mov	r8, r3
	for ( ;  btw;							/* Repeat until all data written */
   12ff0:	d1d0      	bne.n	12f94 <f_write+0x8c>
   12ff2:	68f2      	ldr	r2, [r6, #12]
   12ff4:	79b3      	ldrb	r3, [r6, #6]
   12ff6:	e7c2      	b.n	12f7e <f_write+0x76>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   12ff8:	6830      	ldr	r0, [r6, #0]
   12ffa:	0a5c      	lsrs	r4, r3, #9
   12ffc:	7882      	ldrb	r2, [r0, #2]
   12ffe:	3a01      	subs	r2, #1
   13000:	4014      	ands	r4, r2
   13002:	b2e4      	uxtb	r4, r4
			if (!csect) {					/* On the cluster boundary? */
   13004:	2c00      	cmp	r4, #0
   13006:	d10a      	bne.n	1301e <f_write+0x116>
				if (fp->fptr == 0) {		/* On the top of the file? */
   13008:	2b00      	cmp	r3, #0
   1300a:	d157      	bne.n	130bc <f_write+0x1b4>
					clst = fp->sclust;		/* Follow from the origin */
   1300c:	6933      	ldr	r3, [r6, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   1300e:	2b00      	cmp	r3, #0
   13010:	d06b      	beq.n	130ea <f_write+0x1e2>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13012:	2b01      	cmp	r3, #1
   13014:	d07e      	beq.n	13114 <f_write+0x20c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13016:	1c5a      	adds	r2, r3, #1
   13018:	d075      	beq.n	13106 <f_write+0x1fe>
   1301a:	6830      	ldr	r0, [r6, #0]
				fp->clust = clst;			/* Update current cluster */
   1301c:	6173      	str	r3, [r6, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1301e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13020:	69b2      	ldr	r2, [r6, #24]
   13022:	4293      	cmp	r3, r2
   13024:	d05a      	beq.n	130dc <f_write+0x1d4>
	clst -= 2;
   13026:	6973      	ldr	r3, [r6, #20]
   13028:	1e9d      	subs	r5, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1302a:	6983      	ldr	r3, [r0, #24]
   1302c:	3b02      	subs	r3, #2
   1302e:	429d      	cmp	r5, r3
   13030:	d261      	bcs.n	130f6 <f_write+0x1ee>
	return clst * fs->csize + fs->database;
   13032:	6a82      	ldr	r2, [r0, #40]	; 0x28
   13034:	7883      	ldrb	r3, [r0, #2]
   13036:	4694      	mov	ip, r2
   13038:	435d      	muls	r5, r3
   1303a:	4465      	add	r5, ip
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1303c:	2d00      	cmp	r5, #0
   1303e:	d05a      	beq.n	130f6 <f_write+0x1ee>
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13040:	4642      	mov	r2, r8
   13042:	0a52      	lsrs	r2, r2, #9
			sect += csect;
   13044:	1965      	adds	r5, r4, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13046:	4693      	mov	fp, r2
			if (cc) {						/* Write maximum contiguous sectors directly */
   13048:	2a00      	cmp	r2, #0
   1304a:	d025      	beq.n	13098 <f_write+0x190>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1304c:	18a2      	adds	r2, r4, r2
   1304e:	429a      	cmp	r2, r3
   13050:	d901      	bls.n	13056 <f_write+0x14e>
					cc = fp->fs->csize - csect;
   13052:	1b1b      	subs	r3, r3, r4
   13054:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   13056:	466a      	mov	r2, sp
   13058:	465b      	mov	r3, fp
   1305a:	71d3      	strb	r3, [r2, #7]
   1305c:	79d3      	ldrb	r3, [r2, #7]
   1305e:	7840      	ldrb	r0, [r0, #1]
   13060:	002a      	movs	r2, r5
   13062:	0039      	movs	r1, r7
   13064:	4c31      	ldr	r4, [pc, #196]	; (1312c <f_write+0x224>)
   13066:	47a0      	blx	r4
   13068:	2800      	cmp	r0, #0
   1306a:	d11f      	bne.n	130ac <f_write+0x1a4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1306c:	6831      	ldr	r1, [r6, #0]
   1306e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13070:	1b5d      	subs	r5, r3, r5
   13072:	45ab      	cmp	fp, r5
   13074:	d90d      	bls.n	13092 <f_write+0x18a>
	while (cnt--)
   13076:	2080      	movs	r0, #128	; 0x80
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   13078:	2300      	movs	r3, #0
   1307a:	026d      	lsls	r5, r5, #9
   1307c:	3130      	adds	r1, #48	; 0x30
   1307e:	197d      	adds	r5, r7, r5
	while (cnt--)
   13080:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
   13082:	5cea      	ldrb	r2, [r5, r3]
   13084:	54ca      	strb	r2, [r1, r3]
   13086:	3301      	adds	r3, #1
	while (cnt--)
   13088:	4283      	cmp	r3, r0
   1308a:	d1fa      	bne.n	13082 <f_write+0x17a>
					fp->fs->wflag = 0;
   1308c:	2300      	movs	r3, #0
   1308e:	6832      	ldr	r2, [r6, #0]
   13090:	7113      	strb	r3, [r2, #4]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   13092:	465b      	mov	r3, fp
   13094:	025c      	lsls	r4, r3, #9
				continue;
   13096:	e79f      	b.n	12fd8 <f_write+0xd0>
   13098:	4b23      	ldr	r3, [pc, #140]	; (13128 <f_write+0x220>)
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1309a:	68b4      	ldr	r4, [r6, #8]
   1309c:	469b      	mov	fp, r3
   1309e:	68f3      	ldr	r3, [r6, #12]
   130a0:	429c      	cmp	r4, r3
   130a2:	d212      	bcs.n	130ca <f_write+0x1c2>
   130a4:	05e4      	lsls	r4, r4, #23
			fp->dsect = sect;
   130a6:	61b5      	str	r5, [r6, #24]
   130a8:	0de4      	lsrs	r4, r4, #23
   130aa:	e77b      	b.n	12fa4 <f_write+0x9c>
			ABORT(fp->fs, FR_DISK_ERR);
   130ac:	2380      	movs	r3, #128	; 0x80
   130ae:	79b2      	ldrb	r2, [r6, #6]
   130b0:	425b      	negs	r3, r3
   130b2:	4313      	orrs	r3, r2
   130b4:	71b3      	strb	r3, [r6, #6]
   130b6:	2301      	movs	r3, #1
   130b8:	469a      	mov	sl, r3
   130ba:	e73b      	b.n	12f34 <f_write+0x2c>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   130bc:	4b1c      	ldr	r3, [pc, #112]	; (13130 <f_write+0x228>)
   130be:	6971      	ldr	r1, [r6, #20]
   130c0:	4798      	blx	r3
   130c2:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   130c4:	2b00      	cmp	r3, #0
   130c6:	d1a4      	bne.n	13012 <f_write+0x10a>
   130c8:	e793      	b.n	12ff2 <f_write+0xea>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   130ca:	2100      	movs	r1, #0
   130cc:	47d8      	blx	fp
   130ce:	2800      	cmp	r0, #0
   130d0:	d1ec      	bne.n	130ac <f_write+0x1a4>
				fp->fs->winsect = sect;
   130d2:	6833      	ldr	r3, [r6, #0]
   130d4:	62dd      	str	r5, [r3, #44]	; 0x2c
   130d6:	68b4      	ldr	r4, [r6, #8]
   130d8:	6830      	ldr	r0, [r6, #0]
   130da:	e7e3      	b.n	130a4 <f_write+0x19c>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   130dc:	2100      	movs	r1, #0
   130de:	4b12      	ldr	r3, [pc, #72]	; (13128 <f_write+0x220>)
   130e0:	4798      	blx	r3
   130e2:	2800      	cmp	r0, #0
   130e4:	d1e2      	bne.n	130ac <f_write+0x1a4>
   130e6:	6830      	ldr	r0, [r6, #0]
   130e8:	e79d      	b.n	13026 <f_write+0x11e>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   130ea:	4b11      	ldr	r3, [pc, #68]	; (13130 <f_write+0x228>)
   130ec:	2100      	movs	r1, #0
   130ee:	4798      	blx	r3
   130f0:	0003      	movs	r3, r0
   130f2:	6130      	str	r0, [r6, #16]
   130f4:	e7e6      	b.n	130c4 <f_write+0x1bc>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   130f6:	2380      	movs	r3, #128	; 0x80
   130f8:	79b2      	ldrb	r2, [r6, #6]
   130fa:	425b      	negs	r3, r3
   130fc:	4313      	orrs	r3, r2
   130fe:	71b3      	strb	r3, [r6, #6]
   13100:	2302      	movs	r3, #2
   13102:	469a      	mov	sl, r3
   13104:	e716      	b.n	12f34 <f_write+0x2c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13106:	79b2      	ldrb	r2, [r6, #6]
   13108:	3b7f      	subs	r3, #127	; 0x7f
   1310a:	4313      	orrs	r3, r2
   1310c:	71b3      	strb	r3, [r6, #6]
   1310e:	2301      	movs	r3, #1
   13110:	469a      	mov	sl, r3
   13112:	e70f      	b.n	12f34 <f_write+0x2c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13114:	79b2      	ldrb	r2, [r6, #6]
   13116:	3b81      	subs	r3, #129	; 0x81
   13118:	4313      	orrs	r3, r2
   1311a:	71b3      	strb	r3, [r6, #6]
   1311c:	2302      	movs	r3, #2
   1311e:	469a      	mov	sl, r3
   13120:	e708      	b.n	12f34 <f_write+0x2c>
   13122:	46c0      	nop			; (mov r8, r8)
   13124:	0001221d 	.word	0x0001221d
   13128:	0001209d 	.word	0x0001209d
   1312c:	00011fdd 	.word	0x00011fdd
   13130:	00012835 	.word	0x00012835

00013134 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13134:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13136:	6803      	ldr	r3, [r0, #0]
{
   13138:	0004      	movs	r4, r0
	if (!fs || !fs->fs_type || fs->id != id)
   1313a:	2b00      	cmp	r3, #0
   1313c:	d042      	beq.n	131c4 <f_sync+0x90>
   1313e:	781a      	ldrb	r2, [r3, #0]
   13140:	2009      	movs	r0, #9
   13142:	2a00      	cmp	r2, #0
   13144:	d100      	bne.n	13148 <f_sync+0x14>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13146:	bd70      	pop	{r4, r5, r6, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   13148:	88a1      	ldrh	r1, [r4, #4]
   1314a:	88da      	ldrh	r2, [r3, #6]
   1314c:	4291      	cmp	r1, r2
   1314e:	d1fa      	bne.n	13146 <f_sync+0x12>
   13150:	0018      	movs	r0, r3
   13152:	4b1d      	ldr	r3, [pc, #116]	; (131c8 <f_sync+0x94>)
   13154:	4798      	blx	r3
	if (res == FR_OK) {
   13156:	2800      	cmp	r0, #0
   13158:	d1f5      	bne.n	13146 <f_sync+0x12>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1315a:	2620      	movs	r6, #32
   1315c:	79a3      	ldrb	r3, [r4, #6]
   1315e:	421e      	tst	r6, r3
   13160:	d0f1      	beq.n	13146 <f_sync+0x12>
			res = move_window(fp->fs, fp->dir_sect);
   13162:	69e1      	ldr	r1, [r4, #28]
   13164:	6820      	ldr	r0, [r4, #0]
   13166:	4b19      	ldr	r3, [pc, #100]	; (131cc <f_sync+0x98>)
   13168:	4798      	blx	r3
			if (res == FR_OK) {
   1316a:	2800      	cmp	r0, #0
   1316c:	d1eb      	bne.n	13146 <f_sync+0x12>
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1316e:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
   13170:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13172:	7aeb      	ldrb	r3, [r5, #11]
   13174:	4313      	orrs	r3, r2
   13176:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   13178:	7b23      	ldrb	r3, [r4, #12]
   1317a:	772b      	strb	r3, [r5, #28]
   1317c:	89a3      	ldrh	r3, [r4, #12]
   1317e:	0a1b      	lsrs	r3, r3, #8
   13180:	776b      	strb	r3, [r5, #29]
   13182:	89e3      	ldrh	r3, [r4, #14]
   13184:	77ab      	strb	r3, [r5, #30]
   13186:	7be3      	ldrb	r3, [r4, #15]
   13188:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1318a:	7c23      	ldrb	r3, [r4, #16]
   1318c:	76ab      	strb	r3, [r5, #26]
   1318e:	8a23      	ldrh	r3, [r4, #16]
   13190:	0a1b      	lsrs	r3, r3, #8
   13192:	76eb      	strb	r3, [r5, #27]
   13194:	8a63      	ldrh	r3, [r4, #18]
   13196:	752b      	strb	r3, [r5, #20]
   13198:	8a63      	ldrh	r3, [r4, #18]
   1319a:	0a1b      	lsrs	r3, r3, #8
   1319c:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   1319e:	4b0c      	ldr	r3, [pc, #48]	; (131d0 <f_sync+0x9c>)
   131a0:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   131a2:	0a03      	lsrs	r3, r0, #8
   131a4:	75a8      	strb	r0, [r5, #22]
   131a6:	75eb      	strb	r3, [r5, #23]
   131a8:	0c03      	lsrs	r3, r0, #16
   131aa:	0e00      	lsrs	r0, r0, #24
   131ac:	762b      	strb	r3, [r5, #24]
   131ae:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   131b0:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
   131b2:	6822      	ldr	r2, [r4, #0]
				fp->flag &= ~FA__WRITTEN;
   131b4:	43b3      	bics	r3, r6
   131b6:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   131b8:	2301      	movs	r3, #1
   131ba:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   131bc:	6820      	ldr	r0, [r4, #0]
   131be:	4b05      	ldr	r3, [pc, #20]	; (131d4 <f_sync+0xa0>)
   131c0:	4798      	blx	r3
   131c2:	e7c0      	b.n	13146 <f_sync+0x12>
	if (!fs || !fs->fs_type || fs->id != id)
   131c4:	2009      	movs	r0, #9
   131c6:	e7be      	b.n	13146 <f_sync+0x12>
   131c8:	0001221d 	.word	0x0001221d
   131cc:	0001209d 	.word	0x0001209d
   131d0:	0001204d 	.word	0x0001204d
   131d4:	00012129 	.word	0x00012129

000131d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   131d8:	b510      	push	{r4, lr}
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   131da:	4b03      	ldr	r3, [pc, #12]	; (131e8 <f_close+0x10>)
{
   131dc:	0004      	movs	r4, r0
	res = f_sync(fp);		/* Flush cached data */
   131de:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   131e0:	2800      	cmp	r0, #0
   131e2:	d100      	bne.n	131e6 <f_close+0xe>
   131e4:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
   131e6:	bd10      	pop	{r4, pc}
   131e8:	00013135 	.word	0x00013135

000131ec <__udivsi3>:
   131ec:	2200      	movs	r2, #0
   131ee:	0843      	lsrs	r3, r0, #1
   131f0:	428b      	cmp	r3, r1
   131f2:	d374      	bcc.n	132de <__udivsi3+0xf2>
   131f4:	0903      	lsrs	r3, r0, #4
   131f6:	428b      	cmp	r3, r1
   131f8:	d35f      	bcc.n	132ba <__udivsi3+0xce>
   131fa:	0a03      	lsrs	r3, r0, #8
   131fc:	428b      	cmp	r3, r1
   131fe:	d344      	bcc.n	1328a <__udivsi3+0x9e>
   13200:	0b03      	lsrs	r3, r0, #12
   13202:	428b      	cmp	r3, r1
   13204:	d328      	bcc.n	13258 <__udivsi3+0x6c>
   13206:	0c03      	lsrs	r3, r0, #16
   13208:	428b      	cmp	r3, r1
   1320a:	d30d      	bcc.n	13228 <__udivsi3+0x3c>
   1320c:	22ff      	movs	r2, #255	; 0xff
   1320e:	0209      	lsls	r1, r1, #8
   13210:	ba12      	rev	r2, r2
   13212:	0c03      	lsrs	r3, r0, #16
   13214:	428b      	cmp	r3, r1
   13216:	d302      	bcc.n	1321e <__udivsi3+0x32>
   13218:	1212      	asrs	r2, r2, #8
   1321a:	0209      	lsls	r1, r1, #8
   1321c:	d065      	beq.n	132ea <__udivsi3+0xfe>
   1321e:	0b03      	lsrs	r3, r0, #12
   13220:	428b      	cmp	r3, r1
   13222:	d319      	bcc.n	13258 <__udivsi3+0x6c>
   13224:	e000      	b.n	13228 <__udivsi3+0x3c>
   13226:	0a09      	lsrs	r1, r1, #8
   13228:	0bc3      	lsrs	r3, r0, #15
   1322a:	428b      	cmp	r3, r1
   1322c:	d301      	bcc.n	13232 <__udivsi3+0x46>
   1322e:	03cb      	lsls	r3, r1, #15
   13230:	1ac0      	subs	r0, r0, r3
   13232:	4152      	adcs	r2, r2
   13234:	0b83      	lsrs	r3, r0, #14
   13236:	428b      	cmp	r3, r1
   13238:	d301      	bcc.n	1323e <__udivsi3+0x52>
   1323a:	038b      	lsls	r3, r1, #14
   1323c:	1ac0      	subs	r0, r0, r3
   1323e:	4152      	adcs	r2, r2
   13240:	0b43      	lsrs	r3, r0, #13
   13242:	428b      	cmp	r3, r1
   13244:	d301      	bcc.n	1324a <__udivsi3+0x5e>
   13246:	034b      	lsls	r3, r1, #13
   13248:	1ac0      	subs	r0, r0, r3
   1324a:	4152      	adcs	r2, r2
   1324c:	0b03      	lsrs	r3, r0, #12
   1324e:	428b      	cmp	r3, r1
   13250:	d301      	bcc.n	13256 <__udivsi3+0x6a>
   13252:	030b      	lsls	r3, r1, #12
   13254:	1ac0      	subs	r0, r0, r3
   13256:	4152      	adcs	r2, r2
   13258:	0ac3      	lsrs	r3, r0, #11
   1325a:	428b      	cmp	r3, r1
   1325c:	d301      	bcc.n	13262 <__udivsi3+0x76>
   1325e:	02cb      	lsls	r3, r1, #11
   13260:	1ac0      	subs	r0, r0, r3
   13262:	4152      	adcs	r2, r2
   13264:	0a83      	lsrs	r3, r0, #10
   13266:	428b      	cmp	r3, r1
   13268:	d301      	bcc.n	1326e <__udivsi3+0x82>
   1326a:	028b      	lsls	r3, r1, #10
   1326c:	1ac0      	subs	r0, r0, r3
   1326e:	4152      	adcs	r2, r2
   13270:	0a43      	lsrs	r3, r0, #9
   13272:	428b      	cmp	r3, r1
   13274:	d301      	bcc.n	1327a <__udivsi3+0x8e>
   13276:	024b      	lsls	r3, r1, #9
   13278:	1ac0      	subs	r0, r0, r3
   1327a:	4152      	adcs	r2, r2
   1327c:	0a03      	lsrs	r3, r0, #8
   1327e:	428b      	cmp	r3, r1
   13280:	d301      	bcc.n	13286 <__udivsi3+0x9a>
   13282:	020b      	lsls	r3, r1, #8
   13284:	1ac0      	subs	r0, r0, r3
   13286:	4152      	adcs	r2, r2
   13288:	d2cd      	bcs.n	13226 <__udivsi3+0x3a>
   1328a:	09c3      	lsrs	r3, r0, #7
   1328c:	428b      	cmp	r3, r1
   1328e:	d301      	bcc.n	13294 <__udivsi3+0xa8>
   13290:	01cb      	lsls	r3, r1, #7
   13292:	1ac0      	subs	r0, r0, r3
   13294:	4152      	adcs	r2, r2
   13296:	0983      	lsrs	r3, r0, #6
   13298:	428b      	cmp	r3, r1
   1329a:	d301      	bcc.n	132a0 <__udivsi3+0xb4>
   1329c:	018b      	lsls	r3, r1, #6
   1329e:	1ac0      	subs	r0, r0, r3
   132a0:	4152      	adcs	r2, r2
   132a2:	0943      	lsrs	r3, r0, #5
   132a4:	428b      	cmp	r3, r1
   132a6:	d301      	bcc.n	132ac <__udivsi3+0xc0>
   132a8:	014b      	lsls	r3, r1, #5
   132aa:	1ac0      	subs	r0, r0, r3
   132ac:	4152      	adcs	r2, r2
   132ae:	0903      	lsrs	r3, r0, #4
   132b0:	428b      	cmp	r3, r1
   132b2:	d301      	bcc.n	132b8 <__udivsi3+0xcc>
   132b4:	010b      	lsls	r3, r1, #4
   132b6:	1ac0      	subs	r0, r0, r3
   132b8:	4152      	adcs	r2, r2
   132ba:	08c3      	lsrs	r3, r0, #3
   132bc:	428b      	cmp	r3, r1
   132be:	d301      	bcc.n	132c4 <__udivsi3+0xd8>
   132c0:	00cb      	lsls	r3, r1, #3
   132c2:	1ac0      	subs	r0, r0, r3
   132c4:	4152      	adcs	r2, r2
   132c6:	0883      	lsrs	r3, r0, #2
   132c8:	428b      	cmp	r3, r1
   132ca:	d301      	bcc.n	132d0 <__udivsi3+0xe4>
   132cc:	008b      	lsls	r3, r1, #2
   132ce:	1ac0      	subs	r0, r0, r3
   132d0:	4152      	adcs	r2, r2
   132d2:	0843      	lsrs	r3, r0, #1
   132d4:	428b      	cmp	r3, r1
   132d6:	d301      	bcc.n	132dc <__udivsi3+0xf0>
   132d8:	004b      	lsls	r3, r1, #1
   132da:	1ac0      	subs	r0, r0, r3
   132dc:	4152      	adcs	r2, r2
   132de:	1a41      	subs	r1, r0, r1
   132e0:	d200      	bcs.n	132e4 <__udivsi3+0xf8>
   132e2:	4601      	mov	r1, r0
   132e4:	4152      	adcs	r2, r2
   132e6:	4610      	mov	r0, r2
   132e8:	4770      	bx	lr
   132ea:	e7ff      	b.n	132ec <__udivsi3+0x100>
   132ec:	b501      	push	{r0, lr}
   132ee:	2000      	movs	r0, #0
   132f0:	f000 f8f0 	bl	134d4 <__aeabi_idiv0>
   132f4:	bd02      	pop	{r1, pc}
   132f6:	46c0      	nop			; (mov r8, r8)

000132f8 <__aeabi_uidivmod>:
   132f8:	2900      	cmp	r1, #0
   132fa:	d0f7      	beq.n	132ec <__udivsi3+0x100>
   132fc:	e776      	b.n	131ec <__udivsi3>
   132fe:	4770      	bx	lr

00013300 <__divsi3>:
   13300:	4603      	mov	r3, r0
   13302:	430b      	orrs	r3, r1
   13304:	d47f      	bmi.n	13406 <__divsi3+0x106>
   13306:	2200      	movs	r2, #0
   13308:	0843      	lsrs	r3, r0, #1
   1330a:	428b      	cmp	r3, r1
   1330c:	d374      	bcc.n	133f8 <__divsi3+0xf8>
   1330e:	0903      	lsrs	r3, r0, #4
   13310:	428b      	cmp	r3, r1
   13312:	d35f      	bcc.n	133d4 <__divsi3+0xd4>
   13314:	0a03      	lsrs	r3, r0, #8
   13316:	428b      	cmp	r3, r1
   13318:	d344      	bcc.n	133a4 <__divsi3+0xa4>
   1331a:	0b03      	lsrs	r3, r0, #12
   1331c:	428b      	cmp	r3, r1
   1331e:	d328      	bcc.n	13372 <__divsi3+0x72>
   13320:	0c03      	lsrs	r3, r0, #16
   13322:	428b      	cmp	r3, r1
   13324:	d30d      	bcc.n	13342 <__divsi3+0x42>
   13326:	22ff      	movs	r2, #255	; 0xff
   13328:	0209      	lsls	r1, r1, #8
   1332a:	ba12      	rev	r2, r2
   1332c:	0c03      	lsrs	r3, r0, #16
   1332e:	428b      	cmp	r3, r1
   13330:	d302      	bcc.n	13338 <__divsi3+0x38>
   13332:	1212      	asrs	r2, r2, #8
   13334:	0209      	lsls	r1, r1, #8
   13336:	d065      	beq.n	13404 <__divsi3+0x104>
   13338:	0b03      	lsrs	r3, r0, #12
   1333a:	428b      	cmp	r3, r1
   1333c:	d319      	bcc.n	13372 <__divsi3+0x72>
   1333e:	e000      	b.n	13342 <__divsi3+0x42>
   13340:	0a09      	lsrs	r1, r1, #8
   13342:	0bc3      	lsrs	r3, r0, #15
   13344:	428b      	cmp	r3, r1
   13346:	d301      	bcc.n	1334c <__divsi3+0x4c>
   13348:	03cb      	lsls	r3, r1, #15
   1334a:	1ac0      	subs	r0, r0, r3
   1334c:	4152      	adcs	r2, r2
   1334e:	0b83      	lsrs	r3, r0, #14
   13350:	428b      	cmp	r3, r1
   13352:	d301      	bcc.n	13358 <__divsi3+0x58>
   13354:	038b      	lsls	r3, r1, #14
   13356:	1ac0      	subs	r0, r0, r3
   13358:	4152      	adcs	r2, r2
   1335a:	0b43      	lsrs	r3, r0, #13
   1335c:	428b      	cmp	r3, r1
   1335e:	d301      	bcc.n	13364 <__divsi3+0x64>
   13360:	034b      	lsls	r3, r1, #13
   13362:	1ac0      	subs	r0, r0, r3
   13364:	4152      	adcs	r2, r2
   13366:	0b03      	lsrs	r3, r0, #12
   13368:	428b      	cmp	r3, r1
   1336a:	d301      	bcc.n	13370 <__divsi3+0x70>
   1336c:	030b      	lsls	r3, r1, #12
   1336e:	1ac0      	subs	r0, r0, r3
   13370:	4152      	adcs	r2, r2
   13372:	0ac3      	lsrs	r3, r0, #11
   13374:	428b      	cmp	r3, r1
   13376:	d301      	bcc.n	1337c <__divsi3+0x7c>
   13378:	02cb      	lsls	r3, r1, #11
   1337a:	1ac0      	subs	r0, r0, r3
   1337c:	4152      	adcs	r2, r2
   1337e:	0a83      	lsrs	r3, r0, #10
   13380:	428b      	cmp	r3, r1
   13382:	d301      	bcc.n	13388 <__divsi3+0x88>
   13384:	028b      	lsls	r3, r1, #10
   13386:	1ac0      	subs	r0, r0, r3
   13388:	4152      	adcs	r2, r2
   1338a:	0a43      	lsrs	r3, r0, #9
   1338c:	428b      	cmp	r3, r1
   1338e:	d301      	bcc.n	13394 <__divsi3+0x94>
   13390:	024b      	lsls	r3, r1, #9
   13392:	1ac0      	subs	r0, r0, r3
   13394:	4152      	adcs	r2, r2
   13396:	0a03      	lsrs	r3, r0, #8
   13398:	428b      	cmp	r3, r1
   1339a:	d301      	bcc.n	133a0 <__divsi3+0xa0>
   1339c:	020b      	lsls	r3, r1, #8
   1339e:	1ac0      	subs	r0, r0, r3
   133a0:	4152      	adcs	r2, r2
   133a2:	d2cd      	bcs.n	13340 <__divsi3+0x40>
   133a4:	09c3      	lsrs	r3, r0, #7
   133a6:	428b      	cmp	r3, r1
   133a8:	d301      	bcc.n	133ae <__divsi3+0xae>
   133aa:	01cb      	lsls	r3, r1, #7
   133ac:	1ac0      	subs	r0, r0, r3
   133ae:	4152      	adcs	r2, r2
   133b0:	0983      	lsrs	r3, r0, #6
   133b2:	428b      	cmp	r3, r1
   133b4:	d301      	bcc.n	133ba <__divsi3+0xba>
   133b6:	018b      	lsls	r3, r1, #6
   133b8:	1ac0      	subs	r0, r0, r3
   133ba:	4152      	adcs	r2, r2
   133bc:	0943      	lsrs	r3, r0, #5
   133be:	428b      	cmp	r3, r1
   133c0:	d301      	bcc.n	133c6 <__divsi3+0xc6>
   133c2:	014b      	lsls	r3, r1, #5
   133c4:	1ac0      	subs	r0, r0, r3
   133c6:	4152      	adcs	r2, r2
   133c8:	0903      	lsrs	r3, r0, #4
   133ca:	428b      	cmp	r3, r1
   133cc:	d301      	bcc.n	133d2 <__divsi3+0xd2>
   133ce:	010b      	lsls	r3, r1, #4
   133d0:	1ac0      	subs	r0, r0, r3
   133d2:	4152      	adcs	r2, r2
   133d4:	08c3      	lsrs	r3, r0, #3
   133d6:	428b      	cmp	r3, r1
   133d8:	d301      	bcc.n	133de <__divsi3+0xde>
   133da:	00cb      	lsls	r3, r1, #3
   133dc:	1ac0      	subs	r0, r0, r3
   133de:	4152      	adcs	r2, r2
   133e0:	0883      	lsrs	r3, r0, #2
   133e2:	428b      	cmp	r3, r1
   133e4:	d301      	bcc.n	133ea <__divsi3+0xea>
   133e6:	008b      	lsls	r3, r1, #2
   133e8:	1ac0      	subs	r0, r0, r3
   133ea:	4152      	adcs	r2, r2
   133ec:	0843      	lsrs	r3, r0, #1
   133ee:	428b      	cmp	r3, r1
   133f0:	d301      	bcc.n	133f6 <__divsi3+0xf6>
   133f2:	004b      	lsls	r3, r1, #1
   133f4:	1ac0      	subs	r0, r0, r3
   133f6:	4152      	adcs	r2, r2
   133f8:	1a41      	subs	r1, r0, r1
   133fa:	d200      	bcs.n	133fe <__divsi3+0xfe>
   133fc:	4601      	mov	r1, r0
   133fe:	4152      	adcs	r2, r2
   13400:	4610      	mov	r0, r2
   13402:	4770      	bx	lr
   13404:	e05d      	b.n	134c2 <__divsi3+0x1c2>
   13406:	0fca      	lsrs	r2, r1, #31
   13408:	d000      	beq.n	1340c <__divsi3+0x10c>
   1340a:	4249      	negs	r1, r1
   1340c:	1003      	asrs	r3, r0, #32
   1340e:	d300      	bcc.n	13412 <__divsi3+0x112>
   13410:	4240      	negs	r0, r0
   13412:	4053      	eors	r3, r2
   13414:	2200      	movs	r2, #0
   13416:	469c      	mov	ip, r3
   13418:	0903      	lsrs	r3, r0, #4
   1341a:	428b      	cmp	r3, r1
   1341c:	d32d      	bcc.n	1347a <__divsi3+0x17a>
   1341e:	0a03      	lsrs	r3, r0, #8
   13420:	428b      	cmp	r3, r1
   13422:	d312      	bcc.n	1344a <__divsi3+0x14a>
   13424:	22fc      	movs	r2, #252	; 0xfc
   13426:	0189      	lsls	r1, r1, #6
   13428:	ba12      	rev	r2, r2
   1342a:	0a03      	lsrs	r3, r0, #8
   1342c:	428b      	cmp	r3, r1
   1342e:	d30c      	bcc.n	1344a <__divsi3+0x14a>
   13430:	0189      	lsls	r1, r1, #6
   13432:	1192      	asrs	r2, r2, #6
   13434:	428b      	cmp	r3, r1
   13436:	d308      	bcc.n	1344a <__divsi3+0x14a>
   13438:	0189      	lsls	r1, r1, #6
   1343a:	1192      	asrs	r2, r2, #6
   1343c:	428b      	cmp	r3, r1
   1343e:	d304      	bcc.n	1344a <__divsi3+0x14a>
   13440:	0189      	lsls	r1, r1, #6
   13442:	d03a      	beq.n	134ba <__divsi3+0x1ba>
   13444:	1192      	asrs	r2, r2, #6
   13446:	e000      	b.n	1344a <__divsi3+0x14a>
   13448:	0989      	lsrs	r1, r1, #6
   1344a:	09c3      	lsrs	r3, r0, #7
   1344c:	428b      	cmp	r3, r1
   1344e:	d301      	bcc.n	13454 <__divsi3+0x154>
   13450:	01cb      	lsls	r3, r1, #7
   13452:	1ac0      	subs	r0, r0, r3
   13454:	4152      	adcs	r2, r2
   13456:	0983      	lsrs	r3, r0, #6
   13458:	428b      	cmp	r3, r1
   1345a:	d301      	bcc.n	13460 <__divsi3+0x160>
   1345c:	018b      	lsls	r3, r1, #6
   1345e:	1ac0      	subs	r0, r0, r3
   13460:	4152      	adcs	r2, r2
   13462:	0943      	lsrs	r3, r0, #5
   13464:	428b      	cmp	r3, r1
   13466:	d301      	bcc.n	1346c <__divsi3+0x16c>
   13468:	014b      	lsls	r3, r1, #5
   1346a:	1ac0      	subs	r0, r0, r3
   1346c:	4152      	adcs	r2, r2
   1346e:	0903      	lsrs	r3, r0, #4
   13470:	428b      	cmp	r3, r1
   13472:	d301      	bcc.n	13478 <__divsi3+0x178>
   13474:	010b      	lsls	r3, r1, #4
   13476:	1ac0      	subs	r0, r0, r3
   13478:	4152      	adcs	r2, r2
   1347a:	08c3      	lsrs	r3, r0, #3
   1347c:	428b      	cmp	r3, r1
   1347e:	d301      	bcc.n	13484 <__divsi3+0x184>
   13480:	00cb      	lsls	r3, r1, #3
   13482:	1ac0      	subs	r0, r0, r3
   13484:	4152      	adcs	r2, r2
   13486:	0883      	lsrs	r3, r0, #2
   13488:	428b      	cmp	r3, r1
   1348a:	d301      	bcc.n	13490 <__divsi3+0x190>
   1348c:	008b      	lsls	r3, r1, #2
   1348e:	1ac0      	subs	r0, r0, r3
   13490:	4152      	adcs	r2, r2
   13492:	d2d9      	bcs.n	13448 <__divsi3+0x148>
   13494:	0843      	lsrs	r3, r0, #1
   13496:	428b      	cmp	r3, r1
   13498:	d301      	bcc.n	1349e <__divsi3+0x19e>
   1349a:	004b      	lsls	r3, r1, #1
   1349c:	1ac0      	subs	r0, r0, r3
   1349e:	4152      	adcs	r2, r2
   134a0:	1a41      	subs	r1, r0, r1
   134a2:	d200      	bcs.n	134a6 <__divsi3+0x1a6>
   134a4:	4601      	mov	r1, r0
   134a6:	4663      	mov	r3, ip
   134a8:	4152      	adcs	r2, r2
   134aa:	105b      	asrs	r3, r3, #1
   134ac:	4610      	mov	r0, r2
   134ae:	d301      	bcc.n	134b4 <__divsi3+0x1b4>
   134b0:	4240      	negs	r0, r0
   134b2:	2b00      	cmp	r3, #0
   134b4:	d500      	bpl.n	134b8 <__divsi3+0x1b8>
   134b6:	4249      	negs	r1, r1
   134b8:	4770      	bx	lr
   134ba:	4663      	mov	r3, ip
   134bc:	105b      	asrs	r3, r3, #1
   134be:	d300      	bcc.n	134c2 <__divsi3+0x1c2>
   134c0:	4240      	negs	r0, r0
   134c2:	b501      	push	{r0, lr}
   134c4:	2000      	movs	r0, #0
   134c6:	f000 f805 	bl	134d4 <__aeabi_idiv0>
   134ca:	bd02      	pop	{r1, pc}

000134cc <__aeabi_idivmod>:
   134cc:	2900      	cmp	r1, #0
   134ce:	d0f8      	beq.n	134c2 <__divsi3+0x1c2>
   134d0:	e716      	b.n	13300 <__divsi3>
   134d2:	4770      	bx	lr

000134d4 <__aeabi_idiv0>:
   134d4:	4770      	bx	lr
   134d6:	46c0      	nop			; (mov r8, r8)

000134d8 <__ctzsi2>:
   134d8:	4241      	negs	r1, r0
   134da:	4008      	ands	r0, r1
   134dc:	211c      	movs	r1, #28
   134de:	2301      	movs	r3, #1
   134e0:	041b      	lsls	r3, r3, #16
   134e2:	4298      	cmp	r0, r3
   134e4:	d301      	bcc.n	134ea <__ctzsi2+0x12>
   134e6:	0c00      	lsrs	r0, r0, #16
   134e8:	3910      	subs	r1, #16
   134ea:	0a1b      	lsrs	r3, r3, #8
   134ec:	4298      	cmp	r0, r3
   134ee:	d301      	bcc.n	134f4 <__ctzsi2+0x1c>
   134f0:	0a00      	lsrs	r0, r0, #8
   134f2:	3908      	subs	r1, #8
   134f4:	091b      	lsrs	r3, r3, #4
   134f6:	4298      	cmp	r0, r3
   134f8:	d301      	bcc.n	134fe <__ctzsi2+0x26>
   134fa:	0900      	lsrs	r0, r0, #4
   134fc:	3904      	subs	r1, #4
   134fe:	a202      	add	r2, pc, #8	; (adr r2, 13508 <__ctzsi2+0x30>)
   13500:	5c10      	ldrb	r0, [r2, r0]
   13502:	1a40      	subs	r0, r0, r1
   13504:	4770      	bx	lr
   13506:	46c0      	nop			; (mov r8, r8)
   13508:	1d1d1c1b 	.word	0x1d1d1c1b
   1350c:	1e1e1e1e 	.word	0x1e1e1e1e
   13510:	1f1f1f1f 	.word	0x1f1f1f1f
   13514:	1f1f1f1f 	.word	0x1f1f1f1f

00013518 <atoi>:
   13518:	b510      	push	{r4, lr}
   1351a:	220a      	movs	r2, #10
   1351c:	2100      	movs	r1, #0
   1351e:	f000 fb93 	bl	13c48 <strtol>
   13522:	bd10      	pop	{r4, pc}

00013524 <__libc_init_array>:
   13524:	b570      	push	{r4, r5, r6, lr}
   13526:	2600      	movs	r6, #0
   13528:	4d0c      	ldr	r5, [pc, #48]	; (1355c <__libc_init_array+0x38>)
   1352a:	4c0d      	ldr	r4, [pc, #52]	; (13560 <__libc_init_array+0x3c>)
   1352c:	1b64      	subs	r4, r4, r5
   1352e:	10a4      	asrs	r4, r4, #2
   13530:	42a6      	cmp	r6, r4
   13532:	d109      	bne.n	13548 <__libc_init_array+0x24>
   13534:	2600      	movs	r6, #0
   13536:	f003 f833 	bl	165a0 <_init>
   1353a:	4d0a      	ldr	r5, [pc, #40]	; (13564 <__libc_init_array+0x40>)
   1353c:	4c0a      	ldr	r4, [pc, #40]	; (13568 <__libc_init_array+0x44>)
   1353e:	1b64      	subs	r4, r4, r5
   13540:	10a4      	asrs	r4, r4, #2
   13542:	42a6      	cmp	r6, r4
   13544:	d105      	bne.n	13552 <__libc_init_array+0x2e>
   13546:	bd70      	pop	{r4, r5, r6, pc}
   13548:	00b3      	lsls	r3, r6, #2
   1354a:	58eb      	ldr	r3, [r5, r3]
   1354c:	4798      	blx	r3
   1354e:	3601      	adds	r6, #1
   13550:	e7ee      	b.n	13530 <__libc_init_array+0xc>
   13552:	00b3      	lsls	r3, r6, #2
   13554:	58eb      	ldr	r3, [r5, r3]
   13556:	4798      	blx	r3
   13558:	3601      	adds	r6, #1
   1355a:	e7f2      	b.n	13542 <__libc_init_array+0x1e>
   1355c:	000165ac 	.word	0x000165ac
   13560:	000165ac 	.word	0x000165ac
   13564:	000165ac 	.word	0x000165ac
   13568:	000165b0 	.word	0x000165b0

0001356c <malloc>:
   1356c:	b510      	push	{r4, lr}
   1356e:	4b03      	ldr	r3, [pc, #12]	; (1357c <malloc+0x10>)
   13570:	0001      	movs	r1, r0
   13572:	6818      	ldr	r0, [r3, #0]
   13574:	f000 f87c 	bl	13670 <_malloc_r>
   13578:	bd10      	pop	{r4, pc}
   1357a:	46c0      	nop			; (mov r8, r8)
   1357c:	200001fc 	.word	0x200001fc

00013580 <free>:
   13580:	b510      	push	{r4, lr}
   13582:	4b03      	ldr	r3, [pc, #12]	; (13590 <free+0x10>)
   13584:	0001      	movs	r1, r0
   13586:	6818      	ldr	r0, [r3, #0]
   13588:	f000 f828 	bl	135dc <_free_r>
   1358c:	bd10      	pop	{r4, pc}
   1358e:	46c0      	nop			; (mov r8, r8)
   13590:	200001fc 	.word	0x200001fc

00013594 <memcpy>:
   13594:	2300      	movs	r3, #0
   13596:	b510      	push	{r4, lr}
   13598:	429a      	cmp	r2, r3
   1359a:	d100      	bne.n	1359e <memcpy+0xa>
   1359c:	bd10      	pop	{r4, pc}
   1359e:	5ccc      	ldrb	r4, [r1, r3]
   135a0:	54c4      	strb	r4, [r0, r3]
   135a2:	3301      	adds	r3, #1
   135a4:	e7f8      	b.n	13598 <memcpy+0x4>

000135a6 <memmove>:
   135a6:	b510      	push	{r4, lr}
   135a8:	4288      	cmp	r0, r1
   135aa:	d902      	bls.n	135b2 <memmove+0xc>
   135ac:	188b      	adds	r3, r1, r2
   135ae:	4298      	cmp	r0, r3
   135b0:	d308      	bcc.n	135c4 <memmove+0x1e>
   135b2:	2300      	movs	r3, #0
   135b4:	429a      	cmp	r2, r3
   135b6:	d007      	beq.n	135c8 <memmove+0x22>
   135b8:	5ccc      	ldrb	r4, [r1, r3]
   135ba:	54c4      	strb	r4, [r0, r3]
   135bc:	3301      	adds	r3, #1
   135be:	e7f9      	b.n	135b4 <memmove+0xe>
   135c0:	5c8b      	ldrb	r3, [r1, r2]
   135c2:	5483      	strb	r3, [r0, r2]
   135c4:	3a01      	subs	r2, #1
   135c6:	d2fb      	bcs.n	135c0 <memmove+0x1a>
   135c8:	bd10      	pop	{r4, pc}

000135ca <memset>:
   135ca:	0003      	movs	r3, r0
   135cc:	1882      	adds	r2, r0, r2
   135ce:	4293      	cmp	r3, r2
   135d0:	d100      	bne.n	135d4 <memset+0xa>
   135d2:	4770      	bx	lr
   135d4:	7019      	strb	r1, [r3, #0]
   135d6:	3301      	adds	r3, #1
   135d8:	e7f9      	b.n	135ce <memset+0x4>
	...

000135dc <_free_r>:
   135dc:	b570      	push	{r4, r5, r6, lr}
   135de:	0005      	movs	r5, r0
   135e0:	2900      	cmp	r1, #0
   135e2:	d010      	beq.n	13606 <_free_r+0x2a>
   135e4:	1f0c      	subs	r4, r1, #4
   135e6:	6823      	ldr	r3, [r4, #0]
   135e8:	2b00      	cmp	r3, #0
   135ea:	da00      	bge.n	135ee <_free_r+0x12>
   135ec:	18e4      	adds	r4, r4, r3
   135ee:	0028      	movs	r0, r5
   135f0:	f000 fe12 	bl	14218 <__malloc_lock>
   135f4:	4a1d      	ldr	r2, [pc, #116]	; (1366c <_free_r+0x90>)
   135f6:	6813      	ldr	r3, [r2, #0]
   135f8:	2b00      	cmp	r3, #0
   135fa:	d105      	bne.n	13608 <_free_r+0x2c>
   135fc:	6063      	str	r3, [r4, #4]
   135fe:	6014      	str	r4, [r2, #0]
   13600:	0028      	movs	r0, r5
   13602:	f000 fe0a 	bl	1421a <__malloc_unlock>
   13606:	bd70      	pop	{r4, r5, r6, pc}
   13608:	42a3      	cmp	r3, r4
   1360a:	d909      	bls.n	13620 <_free_r+0x44>
   1360c:	6821      	ldr	r1, [r4, #0]
   1360e:	1860      	adds	r0, r4, r1
   13610:	4283      	cmp	r3, r0
   13612:	d1f3      	bne.n	135fc <_free_r+0x20>
   13614:	6818      	ldr	r0, [r3, #0]
   13616:	685b      	ldr	r3, [r3, #4]
   13618:	1841      	adds	r1, r0, r1
   1361a:	6021      	str	r1, [r4, #0]
   1361c:	e7ee      	b.n	135fc <_free_r+0x20>
   1361e:	0013      	movs	r3, r2
   13620:	685a      	ldr	r2, [r3, #4]
   13622:	2a00      	cmp	r2, #0
   13624:	d001      	beq.n	1362a <_free_r+0x4e>
   13626:	42a2      	cmp	r2, r4
   13628:	d9f9      	bls.n	1361e <_free_r+0x42>
   1362a:	6819      	ldr	r1, [r3, #0]
   1362c:	1858      	adds	r0, r3, r1
   1362e:	42a0      	cmp	r0, r4
   13630:	d10b      	bne.n	1364a <_free_r+0x6e>
   13632:	6820      	ldr	r0, [r4, #0]
   13634:	1809      	adds	r1, r1, r0
   13636:	1858      	adds	r0, r3, r1
   13638:	6019      	str	r1, [r3, #0]
   1363a:	4282      	cmp	r2, r0
   1363c:	d1e0      	bne.n	13600 <_free_r+0x24>
   1363e:	6810      	ldr	r0, [r2, #0]
   13640:	6852      	ldr	r2, [r2, #4]
   13642:	1841      	adds	r1, r0, r1
   13644:	6019      	str	r1, [r3, #0]
   13646:	605a      	str	r2, [r3, #4]
   13648:	e7da      	b.n	13600 <_free_r+0x24>
   1364a:	42a0      	cmp	r0, r4
   1364c:	d902      	bls.n	13654 <_free_r+0x78>
   1364e:	230c      	movs	r3, #12
   13650:	602b      	str	r3, [r5, #0]
   13652:	e7d5      	b.n	13600 <_free_r+0x24>
   13654:	6821      	ldr	r1, [r4, #0]
   13656:	1860      	adds	r0, r4, r1
   13658:	4282      	cmp	r2, r0
   1365a:	d103      	bne.n	13664 <_free_r+0x88>
   1365c:	6810      	ldr	r0, [r2, #0]
   1365e:	6852      	ldr	r2, [r2, #4]
   13660:	1841      	adds	r1, r0, r1
   13662:	6021      	str	r1, [r4, #0]
   13664:	6062      	str	r2, [r4, #4]
   13666:	605c      	str	r4, [r3, #4]
   13668:	e7ca      	b.n	13600 <_free_r+0x24>
   1366a:	46c0      	nop			; (mov r8, r8)
   1366c:	200009b0 	.word	0x200009b0

00013670 <_malloc_r>:
   13670:	2303      	movs	r3, #3
   13672:	b570      	push	{r4, r5, r6, lr}
   13674:	1ccd      	adds	r5, r1, #3
   13676:	439d      	bics	r5, r3
   13678:	3508      	adds	r5, #8
   1367a:	0006      	movs	r6, r0
   1367c:	2d0c      	cmp	r5, #12
   1367e:	d21e      	bcs.n	136be <_malloc_r+0x4e>
   13680:	250c      	movs	r5, #12
   13682:	42a9      	cmp	r1, r5
   13684:	d81d      	bhi.n	136c2 <_malloc_r+0x52>
   13686:	0030      	movs	r0, r6
   13688:	f000 fdc6 	bl	14218 <__malloc_lock>
   1368c:	4a25      	ldr	r2, [pc, #148]	; (13724 <_malloc_r+0xb4>)
   1368e:	6814      	ldr	r4, [r2, #0]
   13690:	0021      	movs	r1, r4
   13692:	2900      	cmp	r1, #0
   13694:	d119      	bne.n	136ca <_malloc_r+0x5a>
   13696:	4c24      	ldr	r4, [pc, #144]	; (13728 <_malloc_r+0xb8>)
   13698:	6823      	ldr	r3, [r4, #0]
   1369a:	2b00      	cmp	r3, #0
   1369c:	d103      	bne.n	136a6 <_malloc_r+0x36>
   1369e:	0030      	movs	r0, r6
   136a0:	f000 f8dc 	bl	1385c <_sbrk_r>
   136a4:	6020      	str	r0, [r4, #0]
   136a6:	0029      	movs	r1, r5
   136a8:	0030      	movs	r0, r6
   136aa:	f000 f8d7 	bl	1385c <_sbrk_r>
   136ae:	1c43      	adds	r3, r0, #1
   136b0:	d12c      	bne.n	1370c <_malloc_r+0x9c>
   136b2:	230c      	movs	r3, #12
   136b4:	0030      	movs	r0, r6
   136b6:	6033      	str	r3, [r6, #0]
   136b8:	f000 fdaf 	bl	1421a <__malloc_unlock>
   136bc:	e003      	b.n	136c6 <_malloc_r+0x56>
   136be:	2d00      	cmp	r5, #0
   136c0:	dadf      	bge.n	13682 <_malloc_r+0x12>
   136c2:	230c      	movs	r3, #12
   136c4:	6033      	str	r3, [r6, #0]
   136c6:	2000      	movs	r0, #0
   136c8:	bd70      	pop	{r4, r5, r6, pc}
   136ca:	680b      	ldr	r3, [r1, #0]
   136cc:	1b5b      	subs	r3, r3, r5
   136ce:	d41a      	bmi.n	13706 <_malloc_r+0x96>
   136d0:	2b0b      	cmp	r3, #11
   136d2:	d903      	bls.n	136dc <_malloc_r+0x6c>
   136d4:	600b      	str	r3, [r1, #0]
   136d6:	18cc      	adds	r4, r1, r3
   136d8:	6025      	str	r5, [r4, #0]
   136da:	e003      	b.n	136e4 <_malloc_r+0x74>
   136dc:	428c      	cmp	r4, r1
   136de:	d10e      	bne.n	136fe <_malloc_r+0x8e>
   136e0:	6863      	ldr	r3, [r4, #4]
   136e2:	6013      	str	r3, [r2, #0]
   136e4:	0030      	movs	r0, r6
   136e6:	f000 fd98 	bl	1421a <__malloc_unlock>
   136ea:	0020      	movs	r0, r4
   136ec:	2207      	movs	r2, #7
   136ee:	300b      	adds	r0, #11
   136f0:	1d23      	adds	r3, r4, #4
   136f2:	4390      	bics	r0, r2
   136f4:	1ac3      	subs	r3, r0, r3
   136f6:	d0e7      	beq.n	136c8 <_malloc_r+0x58>
   136f8:	425a      	negs	r2, r3
   136fa:	50e2      	str	r2, [r4, r3]
   136fc:	e7e4      	b.n	136c8 <_malloc_r+0x58>
   136fe:	684b      	ldr	r3, [r1, #4]
   13700:	6063      	str	r3, [r4, #4]
   13702:	000c      	movs	r4, r1
   13704:	e7ee      	b.n	136e4 <_malloc_r+0x74>
   13706:	000c      	movs	r4, r1
   13708:	6849      	ldr	r1, [r1, #4]
   1370a:	e7c2      	b.n	13692 <_malloc_r+0x22>
   1370c:	2303      	movs	r3, #3
   1370e:	1cc4      	adds	r4, r0, #3
   13710:	439c      	bics	r4, r3
   13712:	42a0      	cmp	r0, r4
   13714:	d0e0      	beq.n	136d8 <_malloc_r+0x68>
   13716:	1a21      	subs	r1, r4, r0
   13718:	0030      	movs	r0, r6
   1371a:	f000 f89f 	bl	1385c <_sbrk_r>
   1371e:	1c43      	adds	r3, r0, #1
   13720:	d1da      	bne.n	136d8 <_malloc_r+0x68>
   13722:	e7c6      	b.n	136b2 <_malloc_r+0x42>
   13724:	200009b0 	.word	0x200009b0
   13728:	200009b4 	.word	0x200009b4

0001372c <iprintf>:
   1372c:	b40f      	push	{r0, r1, r2, r3}
   1372e:	4b0b      	ldr	r3, [pc, #44]	; (1375c <iprintf+0x30>)
   13730:	b513      	push	{r0, r1, r4, lr}
   13732:	681c      	ldr	r4, [r3, #0]
   13734:	2c00      	cmp	r4, #0
   13736:	d005      	beq.n	13744 <iprintf+0x18>
   13738:	69a3      	ldr	r3, [r4, #24]
   1373a:	2b00      	cmp	r3, #0
   1373c:	d102      	bne.n	13744 <iprintf+0x18>
   1373e:	0020      	movs	r0, r4
   13740:	f000 fc5a 	bl	13ff8 <__sinit>
   13744:	ab05      	add	r3, sp, #20
   13746:	9a04      	ldr	r2, [sp, #16]
   13748:	68a1      	ldr	r1, [r4, #8]
   1374a:	0020      	movs	r0, r4
   1374c:	9301      	str	r3, [sp, #4]
   1374e:	f000 fef3 	bl	14538 <_vfiprintf_r>
   13752:	bc16      	pop	{r1, r2, r4}
   13754:	bc08      	pop	{r3}
   13756:	b004      	add	sp, #16
   13758:	4718      	bx	r3
   1375a:	46c0      	nop			; (mov r8, r8)
   1375c:	200001fc 	.word	0x200001fc

00013760 <putchar>:
   13760:	4b08      	ldr	r3, [pc, #32]	; (13784 <putchar+0x24>)
   13762:	b570      	push	{r4, r5, r6, lr}
   13764:	681c      	ldr	r4, [r3, #0]
   13766:	0005      	movs	r5, r0
   13768:	2c00      	cmp	r4, #0
   1376a:	d005      	beq.n	13778 <putchar+0x18>
   1376c:	69a3      	ldr	r3, [r4, #24]
   1376e:	2b00      	cmp	r3, #0
   13770:	d102      	bne.n	13778 <putchar+0x18>
   13772:	0020      	movs	r0, r4
   13774:	f000 fc40 	bl	13ff8 <__sinit>
   13778:	0029      	movs	r1, r5
   1377a:	68a2      	ldr	r2, [r4, #8]
   1377c:	0020      	movs	r0, r4
   1377e:	f001 f97f 	bl	14a80 <_putc_r>
   13782:	bd70      	pop	{r4, r5, r6, pc}
   13784:	200001fc 	.word	0x200001fc

00013788 <_puts_r>:
   13788:	b570      	push	{r4, r5, r6, lr}
   1378a:	0005      	movs	r5, r0
   1378c:	000e      	movs	r6, r1
   1378e:	2800      	cmp	r0, #0
   13790:	d004      	beq.n	1379c <_puts_r+0x14>
   13792:	6983      	ldr	r3, [r0, #24]
   13794:	2b00      	cmp	r3, #0
   13796:	d101      	bne.n	1379c <_puts_r+0x14>
   13798:	f000 fc2e 	bl	13ff8 <__sinit>
   1379c:	69ab      	ldr	r3, [r5, #24]
   1379e:	68ac      	ldr	r4, [r5, #8]
   137a0:	2b00      	cmp	r3, #0
   137a2:	d102      	bne.n	137aa <_puts_r+0x22>
   137a4:	0028      	movs	r0, r5
   137a6:	f000 fc27 	bl	13ff8 <__sinit>
   137aa:	4b24      	ldr	r3, [pc, #144]	; (1383c <_puts_r+0xb4>)
   137ac:	429c      	cmp	r4, r3
   137ae:	d10f      	bne.n	137d0 <_puts_r+0x48>
   137b0:	686c      	ldr	r4, [r5, #4]
   137b2:	89a3      	ldrh	r3, [r4, #12]
   137b4:	071b      	lsls	r3, r3, #28
   137b6:	d502      	bpl.n	137be <_puts_r+0x36>
   137b8:	6923      	ldr	r3, [r4, #16]
   137ba:	2b00      	cmp	r3, #0
   137bc:	d120      	bne.n	13800 <_puts_r+0x78>
   137be:	0021      	movs	r1, r4
   137c0:	0028      	movs	r0, r5
   137c2:	f000 faab 	bl	13d1c <__swsetup_r>
   137c6:	2800      	cmp	r0, #0
   137c8:	d01a      	beq.n	13800 <_puts_r+0x78>
   137ca:	2001      	movs	r0, #1
   137cc:	4240      	negs	r0, r0
   137ce:	bd70      	pop	{r4, r5, r6, pc}
   137d0:	4b1b      	ldr	r3, [pc, #108]	; (13840 <_puts_r+0xb8>)
   137d2:	429c      	cmp	r4, r3
   137d4:	d101      	bne.n	137da <_puts_r+0x52>
   137d6:	68ac      	ldr	r4, [r5, #8]
   137d8:	e7eb      	b.n	137b2 <_puts_r+0x2a>
   137da:	4b1a      	ldr	r3, [pc, #104]	; (13844 <_puts_r+0xbc>)
   137dc:	429c      	cmp	r4, r3
   137de:	d1e8      	bne.n	137b2 <_puts_r+0x2a>
   137e0:	68ec      	ldr	r4, [r5, #12]
   137e2:	e7e6      	b.n	137b2 <_puts_r+0x2a>
   137e4:	3b01      	subs	r3, #1
   137e6:	3601      	adds	r6, #1
   137e8:	60a3      	str	r3, [r4, #8]
   137ea:	2b00      	cmp	r3, #0
   137ec:	da04      	bge.n	137f8 <_puts_r+0x70>
   137ee:	69a2      	ldr	r2, [r4, #24]
   137f0:	4293      	cmp	r3, r2
   137f2:	db16      	blt.n	13822 <_puts_r+0x9a>
   137f4:	290a      	cmp	r1, #10
   137f6:	d014      	beq.n	13822 <_puts_r+0x9a>
   137f8:	6823      	ldr	r3, [r4, #0]
   137fa:	1c5a      	adds	r2, r3, #1
   137fc:	6022      	str	r2, [r4, #0]
   137fe:	7019      	strb	r1, [r3, #0]
   13800:	7831      	ldrb	r1, [r6, #0]
   13802:	68a3      	ldr	r3, [r4, #8]
   13804:	2900      	cmp	r1, #0
   13806:	d1ed      	bne.n	137e4 <_puts_r+0x5c>
   13808:	3b01      	subs	r3, #1
   1380a:	60a3      	str	r3, [r4, #8]
   1380c:	2b00      	cmp	r3, #0
   1380e:	da0f      	bge.n	13830 <_puts_r+0xa8>
   13810:	0022      	movs	r2, r4
   13812:	310a      	adds	r1, #10
   13814:	0028      	movs	r0, r5
   13816:	f000 fa2b 	bl	13c70 <__swbuf_r>
   1381a:	1c43      	adds	r3, r0, #1
   1381c:	d0d5      	beq.n	137ca <_puts_r+0x42>
   1381e:	200a      	movs	r0, #10
   13820:	e7d5      	b.n	137ce <_puts_r+0x46>
   13822:	0022      	movs	r2, r4
   13824:	0028      	movs	r0, r5
   13826:	f000 fa23 	bl	13c70 <__swbuf_r>
   1382a:	1c43      	adds	r3, r0, #1
   1382c:	d1e8      	bne.n	13800 <_puts_r+0x78>
   1382e:	e7cc      	b.n	137ca <_puts_r+0x42>
   13830:	200a      	movs	r0, #10
   13832:	6823      	ldr	r3, [r4, #0]
   13834:	1c5a      	adds	r2, r3, #1
   13836:	6022      	str	r2, [r4, #0]
   13838:	7018      	strb	r0, [r3, #0]
   1383a:	e7c8      	b.n	137ce <_puts_r+0x46>
   1383c:	00016420 	.word	0x00016420
   13840:	00016440 	.word	0x00016440
   13844:	00016400 	.word	0x00016400

00013848 <puts>:
   13848:	b510      	push	{r4, lr}
   1384a:	4b03      	ldr	r3, [pc, #12]	; (13858 <puts+0x10>)
   1384c:	0001      	movs	r1, r0
   1384e:	6818      	ldr	r0, [r3, #0]
   13850:	f7ff ff9a 	bl	13788 <_puts_r>
   13854:	bd10      	pop	{r4, pc}
   13856:	46c0      	nop			; (mov r8, r8)
   13858:	200001fc 	.word	0x200001fc

0001385c <_sbrk_r>:
   1385c:	2300      	movs	r3, #0
   1385e:	b570      	push	{r4, r5, r6, lr}
   13860:	4c06      	ldr	r4, [pc, #24]	; (1387c <_sbrk_r+0x20>)
   13862:	0005      	movs	r5, r0
   13864:	0008      	movs	r0, r1
   13866:	6023      	str	r3, [r4, #0]
   13868:	f7fe fb44 	bl	11ef4 <_sbrk>
   1386c:	1c43      	adds	r3, r0, #1
   1386e:	d103      	bne.n	13878 <_sbrk_r+0x1c>
   13870:	6823      	ldr	r3, [r4, #0]
   13872:	2b00      	cmp	r3, #0
   13874:	d000      	beq.n	13878 <_sbrk_r+0x1c>
   13876:	602b      	str	r3, [r5, #0]
   13878:	bd70      	pop	{r4, r5, r6, pc}
   1387a:	46c0      	nop			; (mov r8, r8)
   1387c:	200010a0 	.word	0x200010a0

00013880 <setbuf>:
   13880:	424a      	negs	r2, r1
   13882:	414a      	adcs	r2, r1
   13884:	2380      	movs	r3, #128	; 0x80
   13886:	b510      	push	{r4, lr}
   13888:	0052      	lsls	r2, r2, #1
   1388a:	00db      	lsls	r3, r3, #3
   1388c:	f000 f802 	bl	13894 <setvbuf>
   13890:	bd10      	pop	{r4, pc}
	...

00013894 <setvbuf>:
   13894:	b5f0      	push	{r4, r5, r6, r7, lr}
   13896:	001d      	movs	r5, r3
   13898:	4b4f      	ldr	r3, [pc, #316]	; (139d8 <setvbuf+0x144>)
   1389a:	b085      	sub	sp, #20
   1389c:	681e      	ldr	r6, [r3, #0]
   1389e:	0004      	movs	r4, r0
   138a0:	000f      	movs	r7, r1
   138a2:	9200      	str	r2, [sp, #0]
   138a4:	2e00      	cmp	r6, #0
   138a6:	d005      	beq.n	138b4 <setvbuf+0x20>
   138a8:	69b3      	ldr	r3, [r6, #24]
   138aa:	2b00      	cmp	r3, #0
   138ac:	d102      	bne.n	138b4 <setvbuf+0x20>
   138ae:	0030      	movs	r0, r6
   138b0:	f000 fba2 	bl	13ff8 <__sinit>
   138b4:	4b49      	ldr	r3, [pc, #292]	; (139dc <setvbuf+0x148>)
   138b6:	429c      	cmp	r4, r3
   138b8:	d150      	bne.n	1395c <setvbuf+0xc8>
   138ba:	6874      	ldr	r4, [r6, #4]
   138bc:	9b00      	ldr	r3, [sp, #0]
   138be:	2b02      	cmp	r3, #2
   138c0:	d005      	beq.n	138ce <setvbuf+0x3a>
   138c2:	2b01      	cmp	r3, #1
   138c4:	d900      	bls.n	138c8 <setvbuf+0x34>
   138c6:	e084      	b.n	139d2 <setvbuf+0x13e>
   138c8:	2d00      	cmp	r5, #0
   138ca:	da00      	bge.n	138ce <setvbuf+0x3a>
   138cc:	e081      	b.n	139d2 <setvbuf+0x13e>
   138ce:	0021      	movs	r1, r4
   138d0:	0030      	movs	r0, r6
   138d2:	f000 fb23 	bl	13f1c <_fflush_r>
   138d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   138d8:	2900      	cmp	r1, #0
   138da:	d008      	beq.n	138ee <setvbuf+0x5a>
   138dc:	0023      	movs	r3, r4
   138de:	3344      	adds	r3, #68	; 0x44
   138e0:	4299      	cmp	r1, r3
   138e2:	d002      	beq.n	138ea <setvbuf+0x56>
   138e4:	0030      	movs	r0, r6
   138e6:	f7ff fe79 	bl	135dc <_free_r>
   138ea:	2300      	movs	r3, #0
   138ec:	6363      	str	r3, [r4, #52]	; 0x34
   138ee:	2300      	movs	r3, #0
   138f0:	61a3      	str	r3, [r4, #24]
   138f2:	6063      	str	r3, [r4, #4]
   138f4:	89a3      	ldrh	r3, [r4, #12]
   138f6:	061b      	lsls	r3, r3, #24
   138f8:	d503      	bpl.n	13902 <setvbuf+0x6e>
   138fa:	6921      	ldr	r1, [r4, #16]
   138fc:	0030      	movs	r0, r6
   138fe:	f7ff fe6d 	bl	135dc <_free_r>
   13902:	89a3      	ldrh	r3, [r4, #12]
   13904:	4a36      	ldr	r2, [pc, #216]	; (139e0 <setvbuf+0x14c>)
   13906:	4013      	ands	r3, r2
   13908:	81a3      	strh	r3, [r4, #12]
   1390a:	9b00      	ldr	r3, [sp, #0]
   1390c:	2b02      	cmp	r3, #2
   1390e:	d05a      	beq.n	139c6 <setvbuf+0x132>
   13910:	ab03      	add	r3, sp, #12
   13912:	aa02      	add	r2, sp, #8
   13914:	0021      	movs	r1, r4
   13916:	0030      	movs	r0, r6
   13918:	f000 fc06 	bl	14128 <__swhatbuf_r>
   1391c:	89a3      	ldrh	r3, [r4, #12]
   1391e:	4318      	orrs	r0, r3
   13920:	81a0      	strh	r0, [r4, #12]
   13922:	2d00      	cmp	r5, #0
   13924:	d124      	bne.n	13970 <setvbuf+0xdc>
   13926:	9d02      	ldr	r5, [sp, #8]
   13928:	0028      	movs	r0, r5
   1392a:	f7ff fe1f 	bl	1356c <malloc>
   1392e:	9501      	str	r5, [sp, #4]
   13930:	1e07      	subs	r7, r0, #0
   13932:	d142      	bne.n	139ba <setvbuf+0x126>
   13934:	9b02      	ldr	r3, [sp, #8]
   13936:	9301      	str	r3, [sp, #4]
   13938:	42ab      	cmp	r3, r5
   1393a:	d139      	bne.n	139b0 <setvbuf+0x11c>
   1393c:	2001      	movs	r0, #1
   1393e:	4240      	negs	r0, r0
   13940:	2302      	movs	r3, #2
   13942:	89a2      	ldrh	r2, [r4, #12]
   13944:	4313      	orrs	r3, r2
   13946:	81a3      	strh	r3, [r4, #12]
   13948:	2300      	movs	r3, #0
   1394a:	60a3      	str	r3, [r4, #8]
   1394c:	0023      	movs	r3, r4
   1394e:	3347      	adds	r3, #71	; 0x47
   13950:	6023      	str	r3, [r4, #0]
   13952:	6123      	str	r3, [r4, #16]
   13954:	2301      	movs	r3, #1
   13956:	6163      	str	r3, [r4, #20]
   13958:	b005      	add	sp, #20
   1395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1395c:	4b21      	ldr	r3, [pc, #132]	; (139e4 <setvbuf+0x150>)
   1395e:	429c      	cmp	r4, r3
   13960:	d101      	bne.n	13966 <setvbuf+0xd2>
   13962:	68b4      	ldr	r4, [r6, #8]
   13964:	e7aa      	b.n	138bc <setvbuf+0x28>
   13966:	4b20      	ldr	r3, [pc, #128]	; (139e8 <setvbuf+0x154>)
   13968:	429c      	cmp	r4, r3
   1396a:	d1a7      	bne.n	138bc <setvbuf+0x28>
   1396c:	68f4      	ldr	r4, [r6, #12]
   1396e:	e7a5      	b.n	138bc <setvbuf+0x28>
   13970:	2f00      	cmp	r7, #0
   13972:	d0d9      	beq.n	13928 <setvbuf+0x94>
   13974:	69b3      	ldr	r3, [r6, #24]
   13976:	2b00      	cmp	r3, #0
   13978:	d102      	bne.n	13980 <setvbuf+0xec>
   1397a:	0030      	movs	r0, r6
   1397c:	f000 fb3c 	bl	13ff8 <__sinit>
   13980:	9b00      	ldr	r3, [sp, #0]
   13982:	2b01      	cmp	r3, #1
   13984:	d103      	bne.n	1398e <setvbuf+0xfa>
   13986:	89a3      	ldrh	r3, [r4, #12]
   13988:	9a00      	ldr	r2, [sp, #0]
   1398a:	431a      	orrs	r2, r3
   1398c:	81a2      	strh	r2, [r4, #12]
   1398e:	2008      	movs	r0, #8
   13990:	89a3      	ldrh	r3, [r4, #12]
   13992:	6027      	str	r7, [r4, #0]
   13994:	6127      	str	r7, [r4, #16]
   13996:	6165      	str	r5, [r4, #20]
   13998:	4018      	ands	r0, r3
   1399a:	d018      	beq.n	139ce <setvbuf+0x13a>
   1399c:	2001      	movs	r0, #1
   1399e:	4018      	ands	r0, r3
   139a0:	2300      	movs	r3, #0
   139a2:	4298      	cmp	r0, r3
   139a4:	d011      	beq.n	139ca <setvbuf+0x136>
   139a6:	426d      	negs	r5, r5
   139a8:	60a3      	str	r3, [r4, #8]
   139aa:	61a5      	str	r5, [r4, #24]
   139ac:	0018      	movs	r0, r3
   139ae:	e7d3      	b.n	13958 <setvbuf+0xc4>
   139b0:	9801      	ldr	r0, [sp, #4]
   139b2:	f7ff fddb 	bl	1356c <malloc>
   139b6:	1e07      	subs	r7, r0, #0
   139b8:	d0c0      	beq.n	1393c <setvbuf+0xa8>
   139ba:	2380      	movs	r3, #128	; 0x80
   139bc:	89a2      	ldrh	r2, [r4, #12]
   139be:	9d01      	ldr	r5, [sp, #4]
   139c0:	4313      	orrs	r3, r2
   139c2:	81a3      	strh	r3, [r4, #12]
   139c4:	e7d6      	b.n	13974 <setvbuf+0xe0>
   139c6:	2000      	movs	r0, #0
   139c8:	e7ba      	b.n	13940 <setvbuf+0xac>
   139ca:	60a5      	str	r5, [r4, #8]
   139cc:	e7c4      	b.n	13958 <setvbuf+0xc4>
   139ce:	60a0      	str	r0, [r4, #8]
   139d0:	e7c2      	b.n	13958 <setvbuf+0xc4>
   139d2:	2001      	movs	r0, #1
   139d4:	4240      	negs	r0, r0
   139d6:	e7bf      	b.n	13958 <setvbuf+0xc4>
   139d8:	200001fc 	.word	0x200001fc
   139dc:	00016420 	.word	0x00016420
   139e0:	fffff35c 	.word	0xfffff35c
   139e4:	00016440 	.word	0x00016440
   139e8:	00016400 	.word	0x00016400

000139ec <siprintf>:
   139ec:	b40e      	push	{r1, r2, r3}
   139ee:	b510      	push	{r4, lr}
   139f0:	b09d      	sub	sp, #116	; 0x74
   139f2:	a902      	add	r1, sp, #8
   139f4:	9002      	str	r0, [sp, #8]
   139f6:	6108      	str	r0, [r1, #16]
   139f8:	480b      	ldr	r0, [pc, #44]	; (13a28 <siprintf+0x3c>)
   139fa:	2482      	movs	r4, #130	; 0x82
   139fc:	6088      	str	r0, [r1, #8]
   139fe:	6148      	str	r0, [r1, #20]
   13a00:	2001      	movs	r0, #1
   13a02:	4240      	negs	r0, r0
   13a04:	ab1f      	add	r3, sp, #124	; 0x7c
   13a06:	81c8      	strh	r0, [r1, #14]
   13a08:	4808      	ldr	r0, [pc, #32]	; (13a2c <siprintf+0x40>)
   13a0a:	cb04      	ldmia	r3!, {r2}
   13a0c:	00a4      	lsls	r4, r4, #2
   13a0e:	6800      	ldr	r0, [r0, #0]
   13a10:	9301      	str	r3, [sp, #4]
   13a12:	818c      	strh	r4, [r1, #12]
   13a14:	f000 fc64 	bl	142e0 <_svfiprintf_r>
   13a18:	2300      	movs	r3, #0
   13a1a:	9a02      	ldr	r2, [sp, #8]
   13a1c:	7013      	strb	r3, [r2, #0]
   13a1e:	b01d      	add	sp, #116	; 0x74
   13a20:	bc10      	pop	{r4}
   13a22:	bc08      	pop	{r3}
   13a24:	b003      	add	sp, #12
   13a26:	4718      	bx	r3
   13a28:	7fffffff 	.word	0x7fffffff
   13a2c:	200001fc 	.word	0x200001fc

00013a30 <strcmp>:
   13a30:	7802      	ldrb	r2, [r0, #0]
   13a32:	780b      	ldrb	r3, [r1, #0]
   13a34:	2a00      	cmp	r2, #0
   13a36:	d003      	beq.n	13a40 <strcmp+0x10>
   13a38:	3001      	adds	r0, #1
   13a3a:	3101      	adds	r1, #1
   13a3c:	429a      	cmp	r2, r3
   13a3e:	d0f7      	beq.n	13a30 <strcmp>
   13a40:	1ad0      	subs	r0, r2, r3
   13a42:	4770      	bx	lr

00013a44 <strcpy>:
   13a44:	1c03      	adds	r3, r0, #0
   13a46:	780a      	ldrb	r2, [r1, #0]
   13a48:	3101      	adds	r1, #1
   13a4a:	701a      	strb	r2, [r3, #0]
   13a4c:	3301      	adds	r3, #1
   13a4e:	2a00      	cmp	r2, #0
   13a50:	d1f9      	bne.n	13a46 <strcpy+0x2>
   13a52:	4770      	bx	lr

00013a54 <strdup>:
   13a54:	b510      	push	{r4, lr}
   13a56:	4b03      	ldr	r3, [pc, #12]	; (13a64 <strdup+0x10>)
   13a58:	0001      	movs	r1, r0
   13a5a:	6818      	ldr	r0, [r3, #0]
   13a5c:	f000 f804 	bl	13a68 <_strdup_r>
   13a60:	bd10      	pop	{r4, pc}
   13a62:	46c0      	nop			; (mov r8, r8)
   13a64:	200001fc 	.word	0x200001fc

00013a68 <_strdup_r>:
   13a68:	b570      	push	{r4, r5, r6, lr}
   13a6a:	0005      	movs	r5, r0
   13a6c:	0008      	movs	r0, r1
   13a6e:	000e      	movs	r6, r1
   13a70:	f000 f80d 	bl	13a8e <strlen>
   13a74:	1c44      	adds	r4, r0, #1
   13a76:	0021      	movs	r1, r4
   13a78:	0028      	movs	r0, r5
   13a7a:	f7ff fdf9 	bl	13670 <_malloc_r>
   13a7e:	1e05      	subs	r5, r0, #0
   13a80:	d003      	beq.n	13a8a <_strdup_r+0x22>
   13a82:	0022      	movs	r2, r4
   13a84:	0031      	movs	r1, r6
   13a86:	f7ff fd85 	bl	13594 <memcpy>
   13a8a:	0028      	movs	r0, r5
   13a8c:	bd70      	pop	{r4, r5, r6, pc}

00013a8e <strlen>:
   13a8e:	2300      	movs	r3, #0
   13a90:	5cc2      	ldrb	r2, [r0, r3]
   13a92:	3301      	adds	r3, #1
   13a94:	2a00      	cmp	r2, #0
   13a96:	d1fb      	bne.n	13a90 <strlen+0x2>
   13a98:	1e58      	subs	r0, r3, #1
   13a9a:	4770      	bx	lr

00013a9c <strncmp>:
   13a9c:	2300      	movs	r3, #0
   13a9e:	b530      	push	{r4, r5, lr}
   13aa0:	429a      	cmp	r2, r3
   13aa2:	d00a      	beq.n	13aba <strncmp+0x1e>
   13aa4:	3a01      	subs	r2, #1
   13aa6:	5cc4      	ldrb	r4, [r0, r3]
   13aa8:	5ccd      	ldrb	r5, [r1, r3]
   13aaa:	42ac      	cmp	r4, r5
   13aac:	d104      	bne.n	13ab8 <strncmp+0x1c>
   13aae:	429a      	cmp	r2, r3
   13ab0:	d002      	beq.n	13ab8 <strncmp+0x1c>
   13ab2:	3301      	adds	r3, #1
   13ab4:	2c00      	cmp	r4, #0
   13ab6:	d1f6      	bne.n	13aa6 <strncmp+0xa>
   13ab8:	1b63      	subs	r3, r4, r5
   13aba:	0018      	movs	r0, r3
   13abc:	bd30      	pop	{r4, r5, pc}

00013abe <strncpy>:
   13abe:	b570      	push	{r4, r5, r6, lr}
   13ac0:	0004      	movs	r4, r0
   13ac2:	2a00      	cmp	r2, #0
   13ac4:	d100      	bne.n	13ac8 <strncpy+0xa>
   13ac6:	bd70      	pop	{r4, r5, r6, pc}
   13ac8:	780d      	ldrb	r5, [r1, #0]
   13aca:	1e56      	subs	r6, r2, #1
   13acc:	1c63      	adds	r3, r4, #1
   13ace:	7025      	strb	r5, [r4, #0]
   13ad0:	3101      	adds	r1, #1
   13ad2:	2d00      	cmp	r5, #0
   13ad4:	d105      	bne.n	13ae2 <strncpy+0x24>
   13ad6:	18a4      	adds	r4, r4, r2
   13ad8:	429c      	cmp	r4, r3
   13ada:	d0f4      	beq.n	13ac6 <strncpy+0x8>
   13adc:	701d      	strb	r5, [r3, #0]
   13ade:	3301      	adds	r3, #1
   13ae0:	e7fa      	b.n	13ad8 <strncpy+0x1a>
   13ae2:	001c      	movs	r4, r3
   13ae4:	0032      	movs	r2, r6
   13ae6:	e7ec      	b.n	13ac2 <strncpy+0x4>

00013ae8 <strrchr>:
   13ae8:	b570      	push	{r4, r5, r6, lr}
   13aea:	000d      	movs	r5, r1
   13aec:	2400      	movs	r4, #0
   13aee:	2900      	cmp	r1, #0
   13af0:	d105      	bne.n	13afe <strrchr+0x16>
   13af2:	f001 f847 	bl	14b84 <strchr>
   13af6:	0004      	movs	r4, r0
   13af8:	e006      	b.n	13b08 <strrchr+0x20>
   13afa:	001c      	movs	r4, r3
   13afc:	1c58      	adds	r0, r3, #1
   13afe:	0029      	movs	r1, r5
   13b00:	f001 f840 	bl	14b84 <strchr>
   13b04:	1e03      	subs	r3, r0, #0
   13b06:	d1f8      	bne.n	13afa <strrchr+0x12>
   13b08:	0020      	movs	r0, r4
   13b0a:	bd70      	pop	{r4, r5, r6, pc}

00013b0c <strstr>:
   13b0c:	b510      	push	{r4, lr}
   13b0e:	0002      	movs	r2, r0
   13b10:	7800      	ldrb	r0, [r0, #0]
   13b12:	2800      	cmp	r0, #0
   13b14:	d104      	bne.n	13b20 <strstr+0x14>
   13b16:	7809      	ldrb	r1, [r1, #0]
   13b18:	2900      	cmp	r1, #0
   13b1a:	d00d      	beq.n	13b38 <strstr+0x2c>
   13b1c:	bd10      	pop	{r4, pc}
   13b1e:	3201      	adds	r2, #1
   13b20:	7810      	ldrb	r0, [r2, #0]
   13b22:	2800      	cmp	r0, #0
   13b24:	d0fa      	beq.n	13b1c <strstr+0x10>
   13b26:	2300      	movs	r3, #0
   13b28:	5cc8      	ldrb	r0, [r1, r3]
   13b2a:	2800      	cmp	r0, #0
   13b2c:	d004      	beq.n	13b38 <strstr+0x2c>
   13b2e:	5cd4      	ldrb	r4, [r2, r3]
   13b30:	4284      	cmp	r4, r0
   13b32:	d1f4      	bne.n	13b1e <strstr+0x12>
   13b34:	3301      	adds	r3, #1
   13b36:	e7f7      	b.n	13b28 <strstr+0x1c>
   13b38:	0010      	movs	r0, r2
   13b3a:	e7ef      	b.n	13b1c <strstr+0x10>

00013b3c <_strtol_l.isra.0>:
   13b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b3e:	001f      	movs	r7, r3
   13b40:	000e      	movs	r6, r1
   13b42:	b087      	sub	sp, #28
   13b44:	9005      	str	r0, [sp, #20]
   13b46:	9103      	str	r1, [sp, #12]
   13b48:	9202      	str	r2, [sp, #8]
   13b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   13b4c:	7834      	ldrb	r4, [r6, #0]
   13b4e:	f000 fae8 	bl	14122 <__locale_ctype_ptr_l>
   13b52:	2208      	movs	r2, #8
   13b54:	1900      	adds	r0, r0, r4
   13b56:	7843      	ldrb	r3, [r0, #1]
   13b58:	1c75      	adds	r5, r6, #1
   13b5a:	4013      	ands	r3, r2
   13b5c:	d10c      	bne.n	13b78 <_strtol_l.isra.0+0x3c>
   13b5e:	2c2d      	cmp	r4, #45	; 0x2d
   13b60:	d10c      	bne.n	13b7c <_strtol_l.isra.0+0x40>
   13b62:	3301      	adds	r3, #1
   13b64:	782c      	ldrb	r4, [r5, #0]
   13b66:	9301      	str	r3, [sp, #4]
   13b68:	1cb5      	adds	r5, r6, #2
   13b6a:	2f00      	cmp	r7, #0
   13b6c:	d00c      	beq.n	13b88 <_strtol_l.isra.0+0x4c>
   13b6e:	2f10      	cmp	r7, #16
   13b70:	d114      	bne.n	13b9c <_strtol_l.isra.0+0x60>
   13b72:	2c30      	cmp	r4, #48	; 0x30
   13b74:	d00a      	beq.n	13b8c <_strtol_l.isra.0+0x50>
   13b76:	e011      	b.n	13b9c <_strtol_l.isra.0+0x60>
   13b78:	002e      	movs	r6, r5
   13b7a:	e7e6      	b.n	13b4a <_strtol_l.isra.0+0xe>
   13b7c:	9301      	str	r3, [sp, #4]
   13b7e:	2c2b      	cmp	r4, #43	; 0x2b
   13b80:	d1f3      	bne.n	13b6a <_strtol_l.isra.0+0x2e>
   13b82:	782c      	ldrb	r4, [r5, #0]
   13b84:	1cb5      	adds	r5, r6, #2
   13b86:	e7f0      	b.n	13b6a <_strtol_l.isra.0+0x2e>
   13b88:	2c30      	cmp	r4, #48	; 0x30
   13b8a:	d12f      	bne.n	13bec <_strtol_l.isra.0+0xb0>
   13b8c:	2220      	movs	r2, #32
   13b8e:	782b      	ldrb	r3, [r5, #0]
   13b90:	4393      	bics	r3, r2
   13b92:	2b58      	cmp	r3, #88	; 0x58
   13b94:	d151      	bne.n	13c3a <_strtol_l.isra.0+0xfe>
   13b96:	2710      	movs	r7, #16
   13b98:	786c      	ldrb	r4, [r5, #1]
   13b9a:	3502      	adds	r5, #2
   13b9c:	9b01      	ldr	r3, [sp, #4]
   13b9e:	4a29      	ldr	r2, [pc, #164]	; (13c44 <_strtol_l.isra.0+0x108>)
   13ba0:	0039      	movs	r1, r7
   13ba2:	189e      	adds	r6, r3, r2
   13ba4:	0030      	movs	r0, r6
   13ba6:	f7ff fba7 	bl	132f8 <__aeabi_uidivmod>
   13baa:	0030      	movs	r0, r6
   13bac:	9104      	str	r1, [sp, #16]
   13bae:	0039      	movs	r1, r7
   13bb0:	f7ff fb1c 	bl	131ec <__udivsi3>
   13bb4:	2101      	movs	r1, #1
   13bb6:	2300      	movs	r3, #0
   13bb8:	4249      	negs	r1, r1
   13bba:	0002      	movs	r2, r0
   13bbc:	468c      	mov	ip, r1
   13bbe:	0018      	movs	r0, r3
   13bc0:	0021      	movs	r1, r4
   13bc2:	3930      	subs	r1, #48	; 0x30
   13bc4:	2909      	cmp	r1, #9
   13bc6:	d813      	bhi.n	13bf0 <_strtol_l.isra.0+0xb4>
   13bc8:	000c      	movs	r4, r1
   13bca:	42a7      	cmp	r7, r4
   13bcc:	dd1c      	ble.n	13c08 <_strtol_l.isra.0+0xcc>
   13bce:	1c59      	adds	r1, r3, #1
   13bd0:	d009      	beq.n	13be6 <_strtol_l.isra.0+0xaa>
   13bd2:	4663      	mov	r3, ip
   13bd4:	4282      	cmp	r2, r0
   13bd6:	d306      	bcc.n	13be6 <_strtol_l.isra.0+0xaa>
   13bd8:	d102      	bne.n	13be0 <_strtol_l.isra.0+0xa4>
   13bda:	9904      	ldr	r1, [sp, #16]
   13bdc:	42a1      	cmp	r1, r4
   13bde:	db02      	blt.n	13be6 <_strtol_l.isra.0+0xaa>
   13be0:	2301      	movs	r3, #1
   13be2:	4378      	muls	r0, r7
   13be4:	1820      	adds	r0, r4, r0
   13be6:	782c      	ldrb	r4, [r5, #0]
   13be8:	3501      	adds	r5, #1
   13bea:	e7e9      	b.n	13bc0 <_strtol_l.isra.0+0x84>
   13bec:	270a      	movs	r7, #10
   13bee:	e7d5      	b.n	13b9c <_strtol_l.isra.0+0x60>
   13bf0:	0021      	movs	r1, r4
   13bf2:	3941      	subs	r1, #65	; 0x41
   13bf4:	2919      	cmp	r1, #25
   13bf6:	d801      	bhi.n	13bfc <_strtol_l.isra.0+0xc0>
   13bf8:	3c37      	subs	r4, #55	; 0x37
   13bfa:	e7e6      	b.n	13bca <_strtol_l.isra.0+0x8e>
   13bfc:	0021      	movs	r1, r4
   13bfe:	3961      	subs	r1, #97	; 0x61
   13c00:	2919      	cmp	r1, #25
   13c02:	d801      	bhi.n	13c08 <_strtol_l.isra.0+0xcc>
   13c04:	3c57      	subs	r4, #87	; 0x57
   13c06:	e7e0      	b.n	13bca <_strtol_l.isra.0+0x8e>
   13c08:	1c5a      	adds	r2, r3, #1
   13c0a:	d108      	bne.n	13c1e <_strtol_l.isra.0+0xe2>
   13c0c:	9a05      	ldr	r2, [sp, #20]
   13c0e:	3323      	adds	r3, #35	; 0x23
   13c10:	6013      	str	r3, [r2, #0]
   13c12:	9b02      	ldr	r3, [sp, #8]
   13c14:	0030      	movs	r0, r6
   13c16:	2b00      	cmp	r3, #0
   13c18:	d10b      	bne.n	13c32 <_strtol_l.isra.0+0xf6>
   13c1a:	b007      	add	sp, #28
   13c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c1e:	9a01      	ldr	r2, [sp, #4]
   13c20:	2a00      	cmp	r2, #0
   13c22:	d000      	beq.n	13c26 <_strtol_l.isra.0+0xea>
   13c24:	4240      	negs	r0, r0
   13c26:	9a02      	ldr	r2, [sp, #8]
   13c28:	2a00      	cmp	r2, #0
   13c2a:	d0f6      	beq.n	13c1a <_strtol_l.isra.0+0xde>
   13c2c:	9a03      	ldr	r2, [sp, #12]
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d000      	beq.n	13c34 <_strtol_l.isra.0+0xf8>
   13c32:	1e6a      	subs	r2, r5, #1
   13c34:	9b02      	ldr	r3, [sp, #8]
   13c36:	601a      	str	r2, [r3, #0]
   13c38:	e7ef      	b.n	13c1a <_strtol_l.isra.0+0xde>
   13c3a:	2430      	movs	r4, #48	; 0x30
   13c3c:	2f00      	cmp	r7, #0
   13c3e:	d1ad      	bne.n	13b9c <_strtol_l.isra.0+0x60>
   13c40:	3708      	adds	r7, #8
   13c42:	e7ab      	b.n	13b9c <_strtol_l.isra.0+0x60>
   13c44:	7fffffff 	.word	0x7fffffff

00013c48 <strtol>:
   13c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13c4a:	0013      	movs	r3, r2
   13c4c:	4a06      	ldr	r2, [pc, #24]	; (13c68 <strtol+0x20>)
   13c4e:	0005      	movs	r5, r0
   13c50:	6810      	ldr	r0, [r2, #0]
   13c52:	6a04      	ldr	r4, [r0, #32]
   13c54:	2c00      	cmp	r4, #0
   13c56:	d100      	bne.n	13c5a <strtol+0x12>
   13c58:	4c04      	ldr	r4, [pc, #16]	; (13c6c <strtol+0x24>)
   13c5a:	000a      	movs	r2, r1
   13c5c:	9400      	str	r4, [sp, #0]
   13c5e:	0029      	movs	r1, r5
   13c60:	f7ff ff6c 	bl	13b3c <_strtol_l.isra.0>
   13c64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13c66:	46c0      	nop			; (mov r8, r8)
   13c68:	200001fc 	.word	0x200001fc
   13c6c:	20000260 	.word	0x20000260

00013c70 <__swbuf_r>:
   13c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c72:	0005      	movs	r5, r0
   13c74:	000e      	movs	r6, r1
   13c76:	0014      	movs	r4, r2
   13c78:	2800      	cmp	r0, #0
   13c7a:	d004      	beq.n	13c86 <__swbuf_r+0x16>
   13c7c:	6983      	ldr	r3, [r0, #24]
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d101      	bne.n	13c86 <__swbuf_r+0x16>
   13c82:	f000 f9b9 	bl	13ff8 <__sinit>
   13c86:	4b22      	ldr	r3, [pc, #136]	; (13d10 <__swbuf_r+0xa0>)
   13c88:	429c      	cmp	r4, r3
   13c8a:	d12d      	bne.n	13ce8 <__swbuf_r+0x78>
   13c8c:	686c      	ldr	r4, [r5, #4]
   13c8e:	69a3      	ldr	r3, [r4, #24]
   13c90:	60a3      	str	r3, [r4, #8]
   13c92:	89a3      	ldrh	r3, [r4, #12]
   13c94:	071b      	lsls	r3, r3, #28
   13c96:	d531      	bpl.n	13cfc <__swbuf_r+0x8c>
   13c98:	6923      	ldr	r3, [r4, #16]
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	d02e      	beq.n	13cfc <__swbuf_r+0x8c>
   13c9e:	6823      	ldr	r3, [r4, #0]
   13ca0:	6922      	ldr	r2, [r4, #16]
   13ca2:	b2f7      	uxtb	r7, r6
   13ca4:	1a98      	subs	r0, r3, r2
   13ca6:	6963      	ldr	r3, [r4, #20]
   13ca8:	b2f6      	uxtb	r6, r6
   13caa:	4298      	cmp	r0, r3
   13cac:	db05      	blt.n	13cba <__swbuf_r+0x4a>
   13cae:	0021      	movs	r1, r4
   13cb0:	0028      	movs	r0, r5
   13cb2:	f000 f933 	bl	13f1c <_fflush_r>
   13cb6:	2800      	cmp	r0, #0
   13cb8:	d126      	bne.n	13d08 <__swbuf_r+0x98>
   13cba:	68a3      	ldr	r3, [r4, #8]
   13cbc:	3001      	adds	r0, #1
   13cbe:	3b01      	subs	r3, #1
   13cc0:	60a3      	str	r3, [r4, #8]
   13cc2:	6823      	ldr	r3, [r4, #0]
   13cc4:	1c5a      	adds	r2, r3, #1
   13cc6:	6022      	str	r2, [r4, #0]
   13cc8:	701f      	strb	r7, [r3, #0]
   13cca:	6963      	ldr	r3, [r4, #20]
   13ccc:	4298      	cmp	r0, r3
   13cce:	d004      	beq.n	13cda <__swbuf_r+0x6a>
   13cd0:	89a3      	ldrh	r3, [r4, #12]
   13cd2:	07db      	lsls	r3, r3, #31
   13cd4:	d51a      	bpl.n	13d0c <__swbuf_r+0x9c>
   13cd6:	2e0a      	cmp	r6, #10
   13cd8:	d118      	bne.n	13d0c <__swbuf_r+0x9c>
   13cda:	0021      	movs	r1, r4
   13cdc:	0028      	movs	r0, r5
   13cde:	f000 f91d 	bl	13f1c <_fflush_r>
   13ce2:	2800      	cmp	r0, #0
   13ce4:	d012      	beq.n	13d0c <__swbuf_r+0x9c>
   13ce6:	e00f      	b.n	13d08 <__swbuf_r+0x98>
   13ce8:	4b0a      	ldr	r3, [pc, #40]	; (13d14 <__swbuf_r+0xa4>)
   13cea:	429c      	cmp	r4, r3
   13cec:	d101      	bne.n	13cf2 <__swbuf_r+0x82>
   13cee:	68ac      	ldr	r4, [r5, #8]
   13cf0:	e7cd      	b.n	13c8e <__swbuf_r+0x1e>
   13cf2:	4b09      	ldr	r3, [pc, #36]	; (13d18 <__swbuf_r+0xa8>)
   13cf4:	429c      	cmp	r4, r3
   13cf6:	d1ca      	bne.n	13c8e <__swbuf_r+0x1e>
   13cf8:	68ec      	ldr	r4, [r5, #12]
   13cfa:	e7c8      	b.n	13c8e <__swbuf_r+0x1e>
   13cfc:	0021      	movs	r1, r4
   13cfe:	0028      	movs	r0, r5
   13d00:	f000 f80c 	bl	13d1c <__swsetup_r>
   13d04:	2800      	cmp	r0, #0
   13d06:	d0ca      	beq.n	13c9e <__swbuf_r+0x2e>
   13d08:	2601      	movs	r6, #1
   13d0a:	4276      	negs	r6, r6
   13d0c:	0030      	movs	r0, r6
   13d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13d10:	00016420 	.word	0x00016420
   13d14:	00016440 	.word	0x00016440
   13d18:	00016400 	.word	0x00016400

00013d1c <__swsetup_r>:
   13d1c:	4b36      	ldr	r3, [pc, #216]	; (13df8 <__swsetup_r+0xdc>)
   13d1e:	b570      	push	{r4, r5, r6, lr}
   13d20:	681d      	ldr	r5, [r3, #0]
   13d22:	0006      	movs	r6, r0
   13d24:	000c      	movs	r4, r1
   13d26:	2d00      	cmp	r5, #0
   13d28:	d005      	beq.n	13d36 <__swsetup_r+0x1a>
   13d2a:	69ab      	ldr	r3, [r5, #24]
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d102      	bne.n	13d36 <__swsetup_r+0x1a>
   13d30:	0028      	movs	r0, r5
   13d32:	f000 f961 	bl	13ff8 <__sinit>
   13d36:	4b31      	ldr	r3, [pc, #196]	; (13dfc <__swsetup_r+0xe0>)
   13d38:	429c      	cmp	r4, r3
   13d3a:	d10f      	bne.n	13d5c <__swsetup_r+0x40>
   13d3c:	686c      	ldr	r4, [r5, #4]
   13d3e:	230c      	movs	r3, #12
   13d40:	5ee2      	ldrsh	r2, [r4, r3]
   13d42:	b293      	uxth	r3, r2
   13d44:	0719      	lsls	r1, r3, #28
   13d46:	d42d      	bmi.n	13da4 <__swsetup_r+0x88>
   13d48:	06d9      	lsls	r1, r3, #27
   13d4a:	d411      	bmi.n	13d70 <__swsetup_r+0x54>
   13d4c:	2309      	movs	r3, #9
   13d4e:	2001      	movs	r0, #1
   13d50:	6033      	str	r3, [r6, #0]
   13d52:	3337      	adds	r3, #55	; 0x37
   13d54:	4313      	orrs	r3, r2
   13d56:	81a3      	strh	r3, [r4, #12]
   13d58:	4240      	negs	r0, r0
   13d5a:	bd70      	pop	{r4, r5, r6, pc}
   13d5c:	4b28      	ldr	r3, [pc, #160]	; (13e00 <__swsetup_r+0xe4>)
   13d5e:	429c      	cmp	r4, r3
   13d60:	d101      	bne.n	13d66 <__swsetup_r+0x4a>
   13d62:	68ac      	ldr	r4, [r5, #8]
   13d64:	e7eb      	b.n	13d3e <__swsetup_r+0x22>
   13d66:	4b27      	ldr	r3, [pc, #156]	; (13e04 <__swsetup_r+0xe8>)
   13d68:	429c      	cmp	r4, r3
   13d6a:	d1e8      	bne.n	13d3e <__swsetup_r+0x22>
   13d6c:	68ec      	ldr	r4, [r5, #12]
   13d6e:	e7e6      	b.n	13d3e <__swsetup_r+0x22>
   13d70:	075b      	lsls	r3, r3, #29
   13d72:	d513      	bpl.n	13d9c <__swsetup_r+0x80>
   13d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13d76:	2900      	cmp	r1, #0
   13d78:	d008      	beq.n	13d8c <__swsetup_r+0x70>
   13d7a:	0023      	movs	r3, r4
   13d7c:	3344      	adds	r3, #68	; 0x44
   13d7e:	4299      	cmp	r1, r3
   13d80:	d002      	beq.n	13d88 <__swsetup_r+0x6c>
   13d82:	0030      	movs	r0, r6
   13d84:	f7ff fc2a 	bl	135dc <_free_r>
   13d88:	2300      	movs	r3, #0
   13d8a:	6363      	str	r3, [r4, #52]	; 0x34
   13d8c:	2224      	movs	r2, #36	; 0x24
   13d8e:	89a3      	ldrh	r3, [r4, #12]
   13d90:	4393      	bics	r3, r2
   13d92:	81a3      	strh	r3, [r4, #12]
   13d94:	2300      	movs	r3, #0
   13d96:	6063      	str	r3, [r4, #4]
   13d98:	6923      	ldr	r3, [r4, #16]
   13d9a:	6023      	str	r3, [r4, #0]
   13d9c:	2308      	movs	r3, #8
   13d9e:	89a2      	ldrh	r2, [r4, #12]
   13da0:	4313      	orrs	r3, r2
   13da2:	81a3      	strh	r3, [r4, #12]
   13da4:	6923      	ldr	r3, [r4, #16]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d10b      	bne.n	13dc2 <__swsetup_r+0xa6>
   13daa:	21a0      	movs	r1, #160	; 0xa0
   13dac:	2280      	movs	r2, #128	; 0x80
   13dae:	89a3      	ldrh	r3, [r4, #12]
   13db0:	0089      	lsls	r1, r1, #2
   13db2:	0092      	lsls	r2, r2, #2
   13db4:	400b      	ands	r3, r1
   13db6:	4293      	cmp	r3, r2
   13db8:	d003      	beq.n	13dc2 <__swsetup_r+0xa6>
   13dba:	0021      	movs	r1, r4
   13dbc:	0030      	movs	r0, r6
   13dbe:	f000 f9db 	bl	14178 <__smakebuf_r>
   13dc2:	2301      	movs	r3, #1
   13dc4:	89a2      	ldrh	r2, [r4, #12]
   13dc6:	4013      	ands	r3, r2
   13dc8:	d011      	beq.n	13dee <__swsetup_r+0xd2>
   13dca:	2300      	movs	r3, #0
   13dcc:	60a3      	str	r3, [r4, #8]
   13dce:	6963      	ldr	r3, [r4, #20]
   13dd0:	425b      	negs	r3, r3
   13dd2:	61a3      	str	r3, [r4, #24]
   13dd4:	2000      	movs	r0, #0
   13dd6:	6923      	ldr	r3, [r4, #16]
   13dd8:	4283      	cmp	r3, r0
   13dda:	d1be      	bne.n	13d5a <__swsetup_r+0x3e>
   13ddc:	230c      	movs	r3, #12
   13dde:	5ee2      	ldrsh	r2, [r4, r3]
   13de0:	0613      	lsls	r3, r2, #24
   13de2:	d5ba      	bpl.n	13d5a <__swsetup_r+0x3e>
   13de4:	2340      	movs	r3, #64	; 0x40
   13de6:	4313      	orrs	r3, r2
   13de8:	81a3      	strh	r3, [r4, #12]
   13dea:	3801      	subs	r0, #1
   13dec:	e7b5      	b.n	13d5a <__swsetup_r+0x3e>
   13dee:	0792      	lsls	r2, r2, #30
   13df0:	d400      	bmi.n	13df4 <__swsetup_r+0xd8>
   13df2:	6963      	ldr	r3, [r4, #20]
   13df4:	60a3      	str	r3, [r4, #8]
   13df6:	e7ed      	b.n	13dd4 <__swsetup_r+0xb8>
   13df8:	200001fc 	.word	0x200001fc
   13dfc:	00016420 	.word	0x00016420
   13e00:	00016440 	.word	0x00016440
   13e04:	00016400 	.word	0x00016400

00013e08 <__sflush_r>:
   13e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13e0a:	898a      	ldrh	r2, [r1, #12]
   13e0c:	0005      	movs	r5, r0
   13e0e:	000c      	movs	r4, r1
   13e10:	0713      	lsls	r3, r2, #28
   13e12:	d460      	bmi.n	13ed6 <__sflush_r+0xce>
   13e14:	684b      	ldr	r3, [r1, #4]
   13e16:	2b00      	cmp	r3, #0
   13e18:	dc04      	bgt.n	13e24 <__sflush_r+0x1c>
   13e1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	dc01      	bgt.n	13e24 <__sflush_r+0x1c>
   13e20:	2000      	movs	r0, #0
   13e22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13e24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   13e26:	2f00      	cmp	r7, #0
   13e28:	d0fa      	beq.n	13e20 <__sflush_r+0x18>
   13e2a:	2300      	movs	r3, #0
   13e2c:	682e      	ldr	r6, [r5, #0]
   13e2e:	602b      	str	r3, [r5, #0]
   13e30:	2380      	movs	r3, #128	; 0x80
   13e32:	015b      	lsls	r3, r3, #5
   13e34:	401a      	ands	r2, r3
   13e36:	d034      	beq.n	13ea2 <__sflush_r+0x9a>
   13e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13e3a:	89a3      	ldrh	r3, [r4, #12]
   13e3c:	075b      	lsls	r3, r3, #29
   13e3e:	d506      	bpl.n	13e4e <__sflush_r+0x46>
   13e40:	6863      	ldr	r3, [r4, #4]
   13e42:	1ac0      	subs	r0, r0, r3
   13e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13e46:	2b00      	cmp	r3, #0
   13e48:	d001      	beq.n	13e4e <__sflush_r+0x46>
   13e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13e4c:	1ac0      	subs	r0, r0, r3
   13e4e:	0002      	movs	r2, r0
   13e50:	6a21      	ldr	r1, [r4, #32]
   13e52:	2300      	movs	r3, #0
   13e54:	0028      	movs	r0, r5
   13e56:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   13e58:	47b8      	blx	r7
   13e5a:	89a1      	ldrh	r1, [r4, #12]
   13e5c:	1c43      	adds	r3, r0, #1
   13e5e:	d106      	bne.n	13e6e <__sflush_r+0x66>
   13e60:	682b      	ldr	r3, [r5, #0]
   13e62:	2b1d      	cmp	r3, #29
   13e64:	d831      	bhi.n	13eca <__sflush_r+0xc2>
   13e66:	4a2c      	ldr	r2, [pc, #176]	; (13f18 <__sflush_r+0x110>)
   13e68:	40da      	lsrs	r2, r3
   13e6a:	07d3      	lsls	r3, r2, #31
   13e6c:	d52d      	bpl.n	13eca <__sflush_r+0xc2>
   13e6e:	2300      	movs	r3, #0
   13e70:	6063      	str	r3, [r4, #4]
   13e72:	6923      	ldr	r3, [r4, #16]
   13e74:	6023      	str	r3, [r4, #0]
   13e76:	04cb      	lsls	r3, r1, #19
   13e78:	d505      	bpl.n	13e86 <__sflush_r+0x7e>
   13e7a:	1c43      	adds	r3, r0, #1
   13e7c:	d102      	bne.n	13e84 <__sflush_r+0x7c>
   13e7e:	682b      	ldr	r3, [r5, #0]
   13e80:	2b00      	cmp	r3, #0
   13e82:	d100      	bne.n	13e86 <__sflush_r+0x7e>
   13e84:	6560      	str	r0, [r4, #84]	; 0x54
   13e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13e88:	602e      	str	r6, [r5, #0]
   13e8a:	2900      	cmp	r1, #0
   13e8c:	d0c8      	beq.n	13e20 <__sflush_r+0x18>
   13e8e:	0023      	movs	r3, r4
   13e90:	3344      	adds	r3, #68	; 0x44
   13e92:	4299      	cmp	r1, r3
   13e94:	d002      	beq.n	13e9c <__sflush_r+0x94>
   13e96:	0028      	movs	r0, r5
   13e98:	f7ff fba0 	bl	135dc <_free_r>
   13e9c:	2000      	movs	r0, #0
   13e9e:	6360      	str	r0, [r4, #52]	; 0x34
   13ea0:	e7bf      	b.n	13e22 <__sflush_r+0x1a>
   13ea2:	2301      	movs	r3, #1
   13ea4:	6a21      	ldr	r1, [r4, #32]
   13ea6:	0028      	movs	r0, r5
   13ea8:	47b8      	blx	r7
   13eaa:	1c43      	adds	r3, r0, #1
   13eac:	d1c5      	bne.n	13e3a <__sflush_r+0x32>
   13eae:	682b      	ldr	r3, [r5, #0]
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d0c2      	beq.n	13e3a <__sflush_r+0x32>
   13eb4:	2b1d      	cmp	r3, #29
   13eb6:	d001      	beq.n	13ebc <__sflush_r+0xb4>
   13eb8:	2b16      	cmp	r3, #22
   13eba:	d101      	bne.n	13ec0 <__sflush_r+0xb8>
   13ebc:	602e      	str	r6, [r5, #0]
   13ebe:	e7af      	b.n	13e20 <__sflush_r+0x18>
   13ec0:	2340      	movs	r3, #64	; 0x40
   13ec2:	89a2      	ldrh	r2, [r4, #12]
   13ec4:	4313      	orrs	r3, r2
   13ec6:	81a3      	strh	r3, [r4, #12]
   13ec8:	e7ab      	b.n	13e22 <__sflush_r+0x1a>
   13eca:	2340      	movs	r3, #64	; 0x40
   13ecc:	430b      	orrs	r3, r1
   13ece:	2001      	movs	r0, #1
   13ed0:	81a3      	strh	r3, [r4, #12]
   13ed2:	4240      	negs	r0, r0
   13ed4:	e7a5      	b.n	13e22 <__sflush_r+0x1a>
   13ed6:	690f      	ldr	r7, [r1, #16]
   13ed8:	2f00      	cmp	r7, #0
   13eda:	d0a1      	beq.n	13e20 <__sflush_r+0x18>
   13edc:	680b      	ldr	r3, [r1, #0]
   13ede:	600f      	str	r7, [r1, #0]
   13ee0:	1bdb      	subs	r3, r3, r7
   13ee2:	9301      	str	r3, [sp, #4]
   13ee4:	2300      	movs	r3, #0
   13ee6:	0792      	lsls	r2, r2, #30
   13ee8:	d100      	bne.n	13eec <__sflush_r+0xe4>
   13eea:	694b      	ldr	r3, [r1, #20]
   13eec:	60a3      	str	r3, [r4, #8]
   13eee:	9b01      	ldr	r3, [sp, #4]
   13ef0:	2b00      	cmp	r3, #0
   13ef2:	dc00      	bgt.n	13ef6 <__sflush_r+0xee>
   13ef4:	e794      	b.n	13e20 <__sflush_r+0x18>
   13ef6:	9b01      	ldr	r3, [sp, #4]
   13ef8:	003a      	movs	r2, r7
   13efa:	6a21      	ldr	r1, [r4, #32]
   13efc:	0028      	movs	r0, r5
   13efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   13f00:	47b0      	blx	r6
   13f02:	2800      	cmp	r0, #0
   13f04:	dc03      	bgt.n	13f0e <__sflush_r+0x106>
   13f06:	2340      	movs	r3, #64	; 0x40
   13f08:	89a2      	ldrh	r2, [r4, #12]
   13f0a:	4313      	orrs	r3, r2
   13f0c:	e7df      	b.n	13ece <__sflush_r+0xc6>
   13f0e:	9b01      	ldr	r3, [sp, #4]
   13f10:	183f      	adds	r7, r7, r0
   13f12:	1a1b      	subs	r3, r3, r0
   13f14:	9301      	str	r3, [sp, #4]
   13f16:	e7ea      	b.n	13eee <__sflush_r+0xe6>
   13f18:	20400001 	.word	0x20400001

00013f1c <_fflush_r>:
   13f1c:	690b      	ldr	r3, [r1, #16]
   13f1e:	b570      	push	{r4, r5, r6, lr}
   13f20:	0005      	movs	r5, r0
   13f22:	000c      	movs	r4, r1
   13f24:	2b00      	cmp	r3, #0
   13f26:	d101      	bne.n	13f2c <_fflush_r+0x10>
   13f28:	2000      	movs	r0, #0
   13f2a:	bd70      	pop	{r4, r5, r6, pc}
   13f2c:	2800      	cmp	r0, #0
   13f2e:	d004      	beq.n	13f3a <_fflush_r+0x1e>
   13f30:	6983      	ldr	r3, [r0, #24]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d101      	bne.n	13f3a <_fflush_r+0x1e>
   13f36:	f000 f85f 	bl	13ff8 <__sinit>
   13f3a:	4b0b      	ldr	r3, [pc, #44]	; (13f68 <_fflush_r+0x4c>)
   13f3c:	429c      	cmp	r4, r3
   13f3e:	d109      	bne.n	13f54 <_fflush_r+0x38>
   13f40:	686c      	ldr	r4, [r5, #4]
   13f42:	220c      	movs	r2, #12
   13f44:	5ea3      	ldrsh	r3, [r4, r2]
   13f46:	2b00      	cmp	r3, #0
   13f48:	d0ee      	beq.n	13f28 <_fflush_r+0xc>
   13f4a:	0021      	movs	r1, r4
   13f4c:	0028      	movs	r0, r5
   13f4e:	f7ff ff5b 	bl	13e08 <__sflush_r>
   13f52:	e7ea      	b.n	13f2a <_fflush_r+0xe>
   13f54:	4b05      	ldr	r3, [pc, #20]	; (13f6c <_fflush_r+0x50>)
   13f56:	429c      	cmp	r4, r3
   13f58:	d101      	bne.n	13f5e <_fflush_r+0x42>
   13f5a:	68ac      	ldr	r4, [r5, #8]
   13f5c:	e7f1      	b.n	13f42 <_fflush_r+0x26>
   13f5e:	4b04      	ldr	r3, [pc, #16]	; (13f70 <_fflush_r+0x54>)
   13f60:	429c      	cmp	r4, r3
   13f62:	d1ee      	bne.n	13f42 <_fflush_r+0x26>
   13f64:	68ec      	ldr	r4, [r5, #12]
   13f66:	e7ec      	b.n	13f42 <_fflush_r+0x26>
   13f68:	00016420 	.word	0x00016420
   13f6c:	00016440 	.word	0x00016440
   13f70:	00016400 	.word	0x00016400

00013f74 <_cleanup_r>:
   13f74:	b510      	push	{r4, lr}
   13f76:	4902      	ldr	r1, [pc, #8]	; (13f80 <_cleanup_r+0xc>)
   13f78:	f000 f8b2 	bl	140e0 <_fwalk_reent>
   13f7c:	bd10      	pop	{r4, pc}
   13f7e:	46c0      	nop			; (mov r8, r8)
   13f80:	00013f1d 	.word	0x00013f1d

00013f84 <std.isra.0>:
   13f84:	2300      	movs	r3, #0
   13f86:	b510      	push	{r4, lr}
   13f88:	0004      	movs	r4, r0
   13f8a:	6003      	str	r3, [r0, #0]
   13f8c:	6043      	str	r3, [r0, #4]
   13f8e:	6083      	str	r3, [r0, #8]
   13f90:	8181      	strh	r1, [r0, #12]
   13f92:	6643      	str	r3, [r0, #100]	; 0x64
   13f94:	81c2      	strh	r2, [r0, #14]
   13f96:	6103      	str	r3, [r0, #16]
   13f98:	6143      	str	r3, [r0, #20]
   13f9a:	6183      	str	r3, [r0, #24]
   13f9c:	0019      	movs	r1, r3
   13f9e:	2208      	movs	r2, #8
   13fa0:	305c      	adds	r0, #92	; 0x5c
   13fa2:	f7ff fb12 	bl	135ca <memset>
   13fa6:	4b05      	ldr	r3, [pc, #20]	; (13fbc <std.isra.0+0x38>)
   13fa8:	6224      	str	r4, [r4, #32]
   13faa:	6263      	str	r3, [r4, #36]	; 0x24
   13fac:	4b04      	ldr	r3, [pc, #16]	; (13fc0 <std.isra.0+0x3c>)
   13fae:	62a3      	str	r3, [r4, #40]	; 0x28
   13fb0:	4b04      	ldr	r3, [pc, #16]	; (13fc4 <std.isra.0+0x40>)
   13fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
   13fb4:	4b04      	ldr	r3, [pc, #16]	; (13fc8 <std.isra.0+0x44>)
   13fb6:	6323      	str	r3, [r4, #48]	; 0x30
   13fb8:	bd10      	pop	{r4, pc}
   13fba:	46c0      	nop			; (mov r8, r8)
   13fbc:	00014aed 	.word	0x00014aed
   13fc0:	00014b15 	.word	0x00014b15
   13fc4:	00014b4d 	.word	0x00014b4d
   13fc8:	00014b79 	.word	0x00014b79

00013fcc <__sfmoreglue>:
   13fcc:	b570      	push	{r4, r5, r6, lr}
   13fce:	2568      	movs	r5, #104	; 0x68
   13fd0:	1e4a      	subs	r2, r1, #1
   13fd2:	4355      	muls	r5, r2
   13fd4:	000e      	movs	r6, r1
   13fd6:	0029      	movs	r1, r5
   13fd8:	3174      	adds	r1, #116	; 0x74
   13fda:	f7ff fb49 	bl	13670 <_malloc_r>
   13fde:	1e04      	subs	r4, r0, #0
   13fe0:	d008      	beq.n	13ff4 <__sfmoreglue+0x28>
   13fe2:	2100      	movs	r1, #0
   13fe4:	002a      	movs	r2, r5
   13fe6:	6001      	str	r1, [r0, #0]
   13fe8:	6046      	str	r6, [r0, #4]
   13fea:	300c      	adds	r0, #12
   13fec:	60a0      	str	r0, [r4, #8]
   13fee:	3268      	adds	r2, #104	; 0x68
   13ff0:	f7ff faeb 	bl	135ca <memset>
   13ff4:	0020      	movs	r0, r4
   13ff6:	bd70      	pop	{r4, r5, r6, pc}

00013ff8 <__sinit>:
   13ff8:	6983      	ldr	r3, [r0, #24]
   13ffa:	b513      	push	{r0, r1, r4, lr}
   13ffc:	0004      	movs	r4, r0
   13ffe:	2b00      	cmp	r3, #0
   14000:	d128      	bne.n	14054 <__sinit+0x5c>
   14002:	6483      	str	r3, [r0, #72]	; 0x48
   14004:	64c3      	str	r3, [r0, #76]	; 0x4c
   14006:	6503      	str	r3, [r0, #80]	; 0x50
   14008:	4b13      	ldr	r3, [pc, #76]	; (14058 <__sinit+0x60>)
   1400a:	4a14      	ldr	r2, [pc, #80]	; (1405c <__sinit+0x64>)
   1400c:	681b      	ldr	r3, [r3, #0]
   1400e:	6282      	str	r2, [r0, #40]	; 0x28
   14010:	9301      	str	r3, [sp, #4]
   14012:	4298      	cmp	r0, r3
   14014:	d101      	bne.n	1401a <__sinit+0x22>
   14016:	2301      	movs	r3, #1
   14018:	6183      	str	r3, [r0, #24]
   1401a:	0020      	movs	r0, r4
   1401c:	f000 f820 	bl	14060 <__sfp>
   14020:	6060      	str	r0, [r4, #4]
   14022:	0020      	movs	r0, r4
   14024:	f000 f81c 	bl	14060 <__sfp>
   14028:	60a0      	str	r0, [r4, #8]
   1402a:	0020      	movs	r0, r4
   1402c:	f000 f818 	bl	14060 <__sfp>
   14030:	2200      	movs	r2, #0
   14032:	60e0      	str	r0, [r4, #12]
   14034:	2104      	movs	r1, #4
   14036:	6860      	ldr	r0, [r4, #4]
   14038:	f7ff ffa4 	bl	13f84 <std.isra.0>
   1403c:	2201      	movs	r2, #1
   1403e:	2109      	movs	r1, #9
   14040:	68a0      	ldr	r0, [r4, #8]
   14042:	f7ff ff9f 	bl	13f84 <std.isra.0>
   14046:	2202      	movs	r2, #2
   14048:	2112      	movs	r1, #18
   1404a:	68e0      	ldr	r0, [r4, #12]
   1404c:	f7ff ff9a 	bl	13f84 <std.isra.0>
   14050:	2301      	movs	r3, #1
   14052:	61a3      	str	r3, [r4, #24]
   14054:	bd13      	pop	{r0, r1, r4, pc}
   14056:	46c0      	nop			; (mov r8, r8)
   14058:	000163fc 	.word	0x000163fc
   1405c:	00013f75 	.word	0x00013f75

00014060 <__sfp>:
   14060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14062:	4b1e      	ldr	r3, [pc, #120]	; (140dc <__sfp+0x7c>)
   14064:	0007      	movs	r7, r0
   14066:	681e      	ldr	r6, [r3, #0]
   14068:	69b3      	ldr	r3, [r6, #24]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d102      	bne.n	14074 <__sfp+0x14>
   1406e:	0030      	movs	r0, r6
   14070:	f7ff ffc2 	bl	13ff8 <__sinit>
   14074:	3648      	adds	r6, #72	; 0x48
   14076:	68b4      	ldr	r4, [r6, #8]
   14078:	6873      	ldr	r3, [r6, #4]
   1407a:	3b01      	subs	r3, #1
   1407c:	d504      	bpl.n	14088 <__sfp+0x28>
   1407e:	6833      	ldr	r3, [r6, #0]
   14080:	2b00      	cmp	r3, #0
   14082:	d007      	beq.n	14094 <__sfp+0x34>
   14084:	6836      	ldr	r6, [r6, #0]
   14086:	e7f6      	b.n	14076 <__sfp+0x16>
   14088:	220c      	movs	r2, #12
   1408a:	5ea5      	ldrsh	r5, [r4, r2]
   1408c:	2d00      	cmp	r5, #0
   1408e:	d00d      	beq.n	140ac <__sfp+0x4c>
   14090:	3468      	adds	r4, #104	; 0x68
   14092:	e7f2      	b.n	1407a <__sfp+0x1a>
   14094:	2104      	movs	r1, #4
   14096:	0038      	movs	r0, r7
   14098:	f7ff ff98 	bl	13fcc <__sfmoreglue>
   1409c:	6030      	str	r0, [r6, #0]
   1409e:	2800      	cmp	r0, #0
   140a0:	d1f0      	bne.n	14084 <__sfp+0x24>
   140a2:	230c      	movs	r3, #12
   140a4:	0004      	movs	r4, r0
   140a6:	603b      	str	r3, [r7, #0]
   140a8:	0020      	movs	r0, r4
   140aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140ac:	2301      	movs	r3, #1
   140ae:	0020      	movs	r0, r4
   140b0:	425b      	negs	r3, r3
   140b2:	81e3      	strh	r3, [r4, #14]
   140b4:	3302      	adds	r3, #2
   140b6:	81a3      	strh	r3, [r4, #12]
   140b8:	6665      	str	r5, [r4, #100]	; 0x64
   140ba:	6025      	str	r5, [r4, #0]
   140bc:	60a5      	str	r5, [r4, #8]
   140be:	6065      	str	r5, [r4, #4]
   140c0:	6125      	str	r5, [r4, #16]
   140c2:	6165      	str	r5, [r4, #20]
   140c4:	61a5      	str	r5, [r4, #24]
   140c6:	2208      	movs	r2, #8
   140c8:	0029      	movs	r1, r5
   140ca:	305c      	adds	r0, #92	; 0x5c
   140cc:	f7ff fa7d 	bl	135ca <memset>
   140d0:	6365      	str	r5, [r4, #52]	; 0x34
   140d2:	63a5      	str	r5, [r4, #56]	; 0x38
   140d4:	64a5      	str	r5, [r4, #72]	; 0x48
   140d6:	64e5      	str	r5, [r4, #76]	; 0x4c
   140d8:	e7e6      	b.n	140a8 <__sfp+0x48>
   140da:	46c0      	nop			; (mov r8, r8)
   140dc:	000163fc 	.word	0x000163fc

000140e0 <_fwalk_reent>:
   140e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   140e2:	0004      	movs	r4, r0
   140e4:	0007      	movs	r7, r0
   140e6:	2600      	movs	r6, #0
   140e8:	9101      	str	r1, [sp, #4]
   140ea:	3448      	adds	r4, #72	; 0x48
   140ec:	2c00      	cmp	r4, #0
   140ee:	d101      	bne.n	140f4 <_fwalk_reent+0x14>
   140f0:	0030      	movs	r0, r6
   140f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   140f4:	6863      	ldr	r3, [r4, #4]
   140f6:	68a5      	ldr	r5, [r4, #8]
   140f8:	9300      	str	r3, [sp, #0]
   140fa:	9b00      	ldr	r3, [sp, #0]
   140fc:	3b01      	subs	r3, #1
   140fe:	9300      	str	r3, [sp, #0]
   14100:	d501      	bpl.n	14106 <_fwalk_reent+0x26>
   14102:	6824      	ldr	r4, [r4, #0]
   14104:	e7f2      	b.n	140ec <_fwalk_reent+0xc>
   14106:	89ab      	ldrh	r3, [r5, #12]
   14108:	2b01      	cmp	r3, #1
   1410a:	d908      	bls.n	1411e <_fwalk_reent+0x3e>
   1410c:	220e      	movs	r2, #14
   1410e:	5eab      	ldrsh	r3, [r5, r2]
   14110:	3301      	adds	r3, #1
   14112:	d004      	beq.n	1411e <_fwalk_reent+0x3e>
   14114:	0029      	movs	r1, r5
   14116:	0038      	movs	r0, r7
   14118:	9b01      	ldr	r3, [sp, #4]
   1411a:	4798      	blx	r3
   1411c:	4306      	orrs	r6, r0
   1411e:	3568      	adds	r5, #104	; 0x68
   14120:	e7eb      	b.n	140fa <_fwalk_reent+0x1a>

00014122 <__locale_ctype_ptr_l>:
   14122:	30ec      	adds	r0, #236	; 0xec
   14124:	6800      	ldr	r0, [r0, #0]
   14126:	4770      	bx	lr

00014128 <__swhatbuf_r>:
   14128:	b570      	push	{r4, r5, r6, lr}
   1412a:	000e      	movs	r6, r1
   1412c:	001d      	movs	r5, r3
   1412e:	230e      	movs	r3, #14
   14130:	5ec9      	ldrsh	r1, [r1, r3]
   14132:	b090      	sub	sp, #64	; 0x40
   14134:	0014      	movs	r4, r2
   14136:	2900      	cmp	r1, #0
   14138:	da07      	bge.n	1414a <__swhatbuf_r+0x22>
   1413a:	2300      	movs	r3, #0
   1413c:	602b      	str	r3, [r5, #0]
   1413e:	89b3      	ldrh	r3, [r6, #12]
   14140:	061b      	lsls	r3, r3, #24
   14142:	d411      	bmi.n	14168 <__swhatbuf_r+0x40>
   14144:	2380      	movs	r3, #128	; 0x80
   14146:	00db      	lsls	r3, r3, #3
   14148:	e00f      	b.n	1416a <__swhatbuf_r+0x42>
   1414a:	aa01      	add	r2, sp, #4
   1414c:	f000 fd5a 	bl	14c04 <_fstat_r>
   14150:	2800      	cmp	r0, #0
   14152:	dbf2      	blt.n	1413a <__swhatbuf_r+0x12>
   14154:	22f0      	movs	r2, #240	; 0xf0
   14156:	9b02      	ldr	r3, [sp, #8]
   14158:	0212      	lsls	r2, r2, #8
   1415a:	4013      	ands	r3, r2
   1415c:	4a05      	ldr	r2, [pc, #20]	; (14174 <__swhatbuf_r+0x4c>)
   1415e:	189b      	adds	r3, r3, r2
   14160:	425a      	negs	r2, r3
   14162:	4153      	adcs	r3, r2
   14164:	602b      	str	r3, [r5, #0]
   14166:	e7ed      	b.n	14144 <__swhatbuf_r+0x1c>
   14168:	2340      	movs	r3, #64	; 0x40
   1416a:	2000      	movs	r0, #0
   1416c:	6023      	str	r3, [r4, #0]
   1416e:	b010      	add	sp, #64	; 0x40
   14170:	bd70      	pop	{r4, r5, r6, pc}
   14172:	46c0      	nop			; (mov r8, r8)
   14174:	ffffe000 	.word	0xffffe000

00014178 <__smakebuf_r>:
   14178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1417a:	2602      	movs	r6, #2
   1417c:	898b      	ldrh	r3, [r1, #12]
   1417e:	0005      	movs	r5, r0
   14180:	000c      	movs	r4, r1
   14182:	4233      	tst	r3, r6
   14184:	d006      	beq.n	14194 <__smakebuf_r+0x1c>
   14186:	0023      	movs	r3, r4
   14188:	3347      	adds	r3, #71	; 0x47
   1418a:	6023      	str	r3, [r4, #0]
   1418c:	6123      	str	r3, [r4, #16]
   1418e:	2301      	movs	r3, #1
   14190:	6163      	str	r3, [r4, #20]
   14192:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14194:	ab01      	add	r3, sp, #4
   14196:	466a      	mov	r2, sp
   14198:	f7ff ffc6 	bl	14128 <__swhatbuf_r>
   1419c:	9900      	ldr	r1, [sp, #0]
   1419e:	0007      	movs	r7, r0
   141a0:	0028      	movs	r0, r5
   141a2:	f7ff fa65 	bl	13670 <_malloc_r>
   141a6:	2800      	cmp	r0, #0
   141a8:	d106      	bne.n	141b8 <__smakebuf_r+0x40>
   141aa:	220c      	movs	r2, #12
   141ac:	5ea3      	ldrsh	r3, [r4, r2]
   141ae:	059a      	lsls	r2, r3, #22
   141b0:	d4ef      	bmi.n	14192 <__smakebuf_r+0x1a>
   141b2:	431e      	orrs	r6, r3
   141b4:	81a6      	strh	r6, [r4, #12]
   141b6:	e7e6      	b.n	14186 <__smakebuf_r+0xe>
   141b8:	4b0d      	ldr	r3, [pc, #52]	; (141f0 <__smakebuf_r+0x78>)
   141ba:	62ab      	str	r3, [r5, #40]	; 0x28
   141bc:	2380      	movs	r3, #128	; 0x80
   141be:	89a2      	ldrh	r2, [r4, #12]
   141c0:	6020      	str	r0, [r4, #0]
   141c2:	4313      	orrs	r3, r2
   141c4:	81a3      	strh	r3, [r4, #12]
   141c6:	9b00      	ldr	r3, [sp, #0]
   141c8:	6120      	str	r0, [r4, #16]
   141ca:	6163      	str	r3, [r4, #20]
   141cc:	9b01      	ldr	r3, [sp, #4]
   141ce:	2b00      	cmp	r3, #0
   141d0:	d00a      	beq.n	141e8 <__smakebuf_r+0x70>
   141d2:	230e      	movs	r3, #14
   141d4:	5ee1      	ldrsh	r1, [r4, r3]
   141d6:	0028      	movs	r0, r5
   141d8:	f000 fd26 	bl	14c28 <_isatty_r>
   141dc:	2800      	cmp	r0, #0
   141de:	d003      	beq.n	141e8 <__smakebuf_r+0x70>
   141e0:	2301      	movs	r3, #1
   141e2:	89a2      	ldrh	r2, [r4, #12]
   141e4:	4313      	orrs	r3, r2
   141e6:	81a3      	strh	r3, [r4, #12]
   141e8:	89a0      	ldrh	r0, [r4, #12]
   141ea:	4338      	orrs	r0, r7
   141ec:	81a0      	strh	r0, [r4, #12]
   141ee:	e7d0      	b.n	14192 <__smakebuf_r+0x1a>
   141f0:	00013f75 	.word	0x00013f75

000141f4 <__ascii_mbtowc>:
   141f4:	b082      	sub	sp, #8
   141f6:	2900      	cmp	r1, #0
   141f8:	d100      	bne.n	141fc <__ascii_mbtowc+0x8>
   141fa:	a901      	add	r1, sp, #4
   141fc:	1e10      	subs	r0, r2, #0
   141fe:	d006      	beq.n	1420e <__ascii_mbtowc+0x1a>
   14200:	2b00      	cmp	r3, #0
   14202:	d006      	beq.n	14212 <__ascii_mbtowc+0x1e>
   14204:	7813      	ldrb	r3, [r2, #0]
   14206:	600b      	str	r3, [r1, #0]
   14208:	7810      	ldrb	r0, [r2, #0]
   1420a:	1e43      	subs	r3, r0, #1
   1420c:	4198      	sbcs	r0, r3
   1420e:	b002      	add	sp, #8
   14210:	4770      	bx	lr
   14212:	2002      	movs	r0, #2
   14214:	4240      	negs	r0, r0
   14216:	e7fa      	b.n	1420e <__ascii_mbtowc+0x1a>

00014218 <__malloc_lock>:
   14218:	4770      	bx	lr

0001421a <__malloc_unlock>:
   1421a:	4770      	bx	lr

0001421c <__ssputs_r>:
   1421c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1421e:	688e      	ldr	r6, [r1, #8]
   14220:	b085      	sub	sp, #20
   14222:	0007      	movs	r7, r0
   14224:	000c      	movs	r4, r1
   14226:	9203      	str	r2, [sp, #12]
   14228:	9301      	str	r3, [sp, #4]
   1422a:	429e      	cmp	r6, r3
   1422c:	d839      	bhi.n	142a2 <__ssputs_r+0x86>
   1422e:	2390      	movs	r3, #144	; 0x90
   14230:	898a      	ldrh	r2, [r1, #12]
   14232:	00db      	lsls	r3, r3, #3
   14234:	421a      	tst	r2, r3
   14236:	d034      	beq.n	142a2 <__ssputs_r+0x86>
   14238:	2503      	movs	r5, #3
   1423a:	6909      	ldr	r1, [r1, #16]
   1423c:	6823      	ldr	r3, [r4, #0]
   1423e:	1a5b      	subs	r3, r3, r1
   14240:	9302      	str	r3, [sp, #8]
   14242:	6963      	ldr	r3, [r4, #20]
   14244:	9802      	ldr	r0, [sp, #8]
   14246:	435d      	muls	r5, r3
   14248:	0feb      	lsrs	r3, r5, #31
   1424a:	195d      	adds	r5, r3, r5
   1424c:	9b01      	ldr	r3, [sp, #4]
   1424e:	106d      	asrs	r5, r5, #1
   14250:	3301      	adds	r3, #1
   14252:	181b      	adds	r3, r3, r0
   14254:	42ab      	cmp	r3, r5
   14256:	d900      	bls.n	1425a <__ssputs_r+0x3e>
   14258:	001d      	movs	r5, r3
   1425a:	0553      	lsls	r3, r2, #21
   1425c:	d532      	bpl.n	142c4 <__ssputs_r+0xa8>
   1425e:	0029      	movs	r1, r5
   14260:	0038      	movs	r0, r7
   14262:	f7ff fa05 	bl	13670 <_malloc_r>
   14266:	1e06      	subs	r6, r0, #0
   14268:	d109      	bne.n	1427e <__ssputs_r+0x62>
   1426a:	230c      	movs	r3, #12
   1426c:	603b      	str	r3, [r7, #0]
   1426e:	2340      	movs	r3, #64	; 0x40
   14270:	2001      	movs	r0, #1
   14272:	89a2      	ldrh	r2, [r4, #12]
   14274:	4240      	negs	r0, r0
   14276:	4313      	orrs	r3, r2
   14278:	81a3      	strh	r3, [r4, #12]
   1427a:	b005      	add	sp, #20
   1427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1427e:	9a02      	ldr	r2, [sp, #8]
   14280:	6921      	ldr	r1, [r4, #16]
   14282:	f7ff f987 	bl	13594 <memcpy>
   14286:	89a3      	ldrh	r3, [r4, #12]
   14288:	4a14      	ldr	r2, [pc, #80]	; (142dc <__ssputs_r+0xc0>)
   1428a:	401a      	ands	r2, r3
   1428c:	2380      	movs	r3, #128	; 0x80
   1428e:	4313      	orrs	r3, r2
   14290:	81a3      	strh	r3, [r4, #12]
   14292:	9b02      	ldr	r3, [sp, #8]
   14294:	6126      	str	r6, [r4, #16]
   14296:	18f6      	adds	r6, r6, r3
   14298:	6026      	str	r6, [r4, #0]
   1429a:	6165      	str	r5, [r4, #20]
   1429c:	9e01      	ldr	r6, [sp, #4]
   1429e:	1aed      	subs	r5, r5, r3
   142a0:	60a5      	str	r5, [r4, #8]
   142a2:	9b01      	ldr	r3, [sp, #4]
   142a4:	42b3      	cmp	r3, r6
   142a6:	d200      	bcs.n	142aa <__ssputs_r+0x8e>
   142a8:	001e      	movs	r6, r3
   142aa:	0032      	movs	r2, r6
   142ac:	9903      	ldr	r1, [sp, #12]
   142ae:	6820      	ldr	r0, [r4, #0]
   142b0:	f7ff f979 	bl	135a6 <memmove>
   142b4:	68a3      	ldr	r3, [r4, #8]
   142b6:	2000      	movs	r0, #0
   142b8:	1b9b      	subs	r3, r3, r6
   142ba:	60a3      	str	r3, [r4, #8]
   142bc:	6823      	ldr	r3, [r4, #0]
   142be:	199e      	adds	r6, r3, r6
   142c0:	6026      	str	r6, [r4, #0]
   142c2:	e7da      	b.n	1427a <__ssputs_r+0x5e>
   142c4:	002a      	movs	r2, r5
   142c6:	0038      	movs	r0, r7
   142c8:	f000 fcdf 	bl	14c8a <_realloc_r>
   142cc:	1e06      	subs	r6, r0, #0
   142ce:	d1e0      	bne.n	14292 <__ssputs_r+0x76>
   142d0:	6921      	ldr	r1, [r4, #16]
   142d2:	0038      	movs	r0, r7
   142d4:	f7ff f982 	bl	135dc <_free_r>
   142d8:	e7c7      	b.n	1426a <__ssputs_r+0x4e>
   142da:	46c0      	nop			; (mov r8, r8)
   142dc:	fffffb7f 	.word	0xfffffb7f

000142e0 <_svfiprintf_r>:
   142e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   142e2:	b09f      	sub	sp, #124	; 0x7c
   142e4:	9002      	str	r0, [sp, #8]
   142e6:	9305      	str	r3, [sp, #20]
   142e8:	898b      	ldrh	r3, [r1, #12]
   142ea:	000f      	movs	r7, r1
   142ec:	0016      	movs	r6, r2
   142ee:	061b      	lsls	r3, r3, #24
   142f0:	d511      	bpl.n	14316 <_svfiprintf_r+0x36>
   142f2:	690b      	ldr	r3, [r1, #16]
   142f4:	2b00      	cmp	r3, #0
   142f6:	d10e      	bne.n	14316 <_svfiprintf_r+0x36>
   142f8:	2140      	movs	r1, #64	; 0x40
   142fa:	f7ff f9b9 	bl	13670 <_malloc_r>
   142fe:	6038      	str	r0, [r7, #0]
   14300:	6138      	str	r0, [r7, #16]
   14302:	2800      	cmp	r0, #0
   14304:	d105      	bne.n	14312 <_svfiprintf_r+0x32>
   14306:	230c      	movs	r3, #12
   14308:	9a02      	ldr	r2, [sp, #8]
   1430a:	3801      	subs	r0, #1
   1430c:	6013      	str	r3, [r2, #0]
   1430e:	b01f      	add	sp, #124	; 0x7c
   14310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14312:	2340      	movs	r3, #64	; 0x40
   14314:	617b      	str	r3, [r7, #20]
   14316:	2300      	movs	r3, #0
   14318:	ad06      	add	r5, sp, #24
   1431a:	616b      	str	r3, [r5, #20]
   1431c:	3320      	adds	r3, #32
   1431e:	766b      	strb	r3, [r5, #25]
   14320:	3310      	adds	r3, #16
   14322:	76ab      	strb	r3, [r5, #26]
   14324:	0034      	movs	r4, r6
   14326:	7823      	ldrb	r3, [r4, #0]
   14328:	2b00      	cmp	r3, #0
   1432a:	d147      	bne.n	143bc <_svfiprintf_r+0xdc>
   1432c:	1ba3      	subs	r3, r4, r6
   1432e:	9304      	str	r3, [sp, #16]
   14330:	d00d      	beq.n	1434e <_svfiprintf_r+0x6e>
   14332:	1ba3      	subs	r3, r4, r6
   14334:	0032      	movs	r2, r6
   14336:	0039      	movs	r1, r7
   14338:	9802      	ldr	r0, [sp, #8]
   1433a:	f7ff ff6f 	bl	1421c <__ssputs_r>
   1433e:	1c43      	adds	r3, r0, #1
   14340:	d100      	bne.n	14344 <_svfiprintf_r+0x64>
   14342:	e0b5      	b.n	144b0 <_svfiprintf_r+0x1d0>
   14344:	696a      	ldr	r2, [r5, #20]
   14346:	9b04      	ldr	r3, [sp, #16]
   14348:	4694      	mov	ip, r2
   1434a:	4463      	add	r3, ip
   1434c:	616b      	str	r3, [r5, #20]
   1434e:	7823      	ldrb	r3, [r4, #0]
   14350:	2b00      	cmp	r3, #0
   14352:	d100      	bne.n	14356 <_svfiprintf_r+0x76>
   14354:	e0ac      	b.n	144b0 <_svfiprintf_r+0x1d0>
   14356:	2201      	movs	r2, #1
   14358:	2300      	movs	r3, #0
   1435a:	4252      	negs	r2, r2
   1435c:	606a      	str	r2, [r5, #4]
   1435e:	a902      	add	r1, sp, #8
   14360:	3254      	adds	r2, #84	; 0x54
   14362:	1852      	adds	r2, r2, r1
   14364:	3401      	adds	r4, #1
   14366:	602b      	str	r3, [r5, #0]
   14368:	60eb      	str	r3, [r5, #12]
   1436a:	60ab      	str	r3, [r5, #8]
   1436c:	7013      	strb	r3, [r2, #0]
   1436e:	65ab      	str	r3, [r5, #88]	; 0x58
   14370:	4e58      	ldr	r6, [pc, #352]	; (144d4 <_svfiprintf_r+0x1f4>)
   14372:	2205      	movs	r2, #5
   14374:	7821      	ldrb	r1, [r4, #0]
   14376:	0030      	movs	r0, r6
   14378:	f000 fc7c 	bl	14c74 <memchr>
   1437c:	1c62      	adds	r2, r4, #1
   1437e:	2800      	cmp	r0, #0
   14380:	d120      	bne.n	143c4 <_svfiprintf_r+0xe4>
   14382:	6829      	ldr	r1, [r5, #0]
   14384:	06cb      	lsls	r3, r1, #27
   14386:	d504      	bpl.n	14392 <_svfiprintf_r+0xb2>
   14388:	2353      	movs	r3, #83	; 0x53
   1438a:	ae02      	add	r6, sp, #8
   1438c:	3020      	adds	r0, #32
   1438e:	199b      	adds	r3, r3, r6
   14390:	7018      	strb	r0, [r3, #0]
   14392:	070b      	lsls	r3, r1, #28
   14394:	d504      	bpl.n	143a0 <_svfiprintf_r+0xc0>
   14396:	2353      	movs	r3, #83	; 0x53
   14398:	202b      	movs	r0, #43	; 0x2b
   1439a:	ae02      	add	r6, sp, #8
   1439c:	199b      	adds	r3, r3, r6
   1439e:	7018      	strb	r0, [r3, #0]
   143a0:	7823      	ldrb	r3, [r4, #0]
   143a2:	2b2a      	cmp	r3, #42	; 0x2a
   143a4:	d016      	beq.n	143d4 <_svfiprintf_r+0xf4>
   143a6:	2000      	movs	r0, #0
   143a8:	210a      	movs	r1, #10
   143aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   143ac:	7822      	ldrb	r2, [r4, #0]
   143ae:	3a30      	subs	r2, #48	; 0x30
   143b0:	2a09      	cmp	r2, #9
   143b2:	d955      	bls.n	14460 <_svfiprintf_r+0x180>
   143b4:	2800      	cmp	r0, #0
   143b6:	d015      	beq.n	143e4 <_svfiprintf_r+0x104>
   143b8:	9309      	str	r3, [sp, #36]	; 0x24
   143ba:	e013      	b.n	143e4 <_svfiprintf_r+0x104>
   143bc:	2b25      	cmp	r3, #37	; 0x25
   143be:	d0b5      	beq.n	1432c <_svfiprintf_r+0x4c>
   143c0:	3401      	adds	r4, #1
   143c2:	e7b0      	b.n	14326 <_svfiprintf_r+0x46>
   143c4:	2301      	movs	r3, #1
   143c6:	1b80      	subs	r0, r0, r6
   143c8:	4083      	lsls	r3, r0
   143ca:	6829      	ldr	r1, [r5, #0]
   143cc:	0014      	movs	r4, r2
   143ce:	430b      	orrs	r3, r1
   143d0:	602b      	str	r3, [r5, #0]
   143d2:	e7cd      	b.n	14370 <_svfiprintf_r+0x90>
   143d4:	9b05      	ldr	r3, [sp, #20]
   143d6:	1d18      	adds	r0, r3, #4
   143d8:	681b      	ldr	r3, [r3, #0]
   143da:	9005      	str	r0, [sp, #20]
   143dc:	2b00      	cmp	r3, #0
   143de:	db39      	blt.n	14454 <_svfiprintf_r+0x174>
   143e0:	9309      	str	r3, [sp, #36]	; 0x24
   143e2:	0014      	movs	r4, r2
   143e4:	7823      	ldrb	r3, [r4, #0]
   143e6:	2b2e      	cmp	r3, #46	; 0x2e
   143e8:	d10b      	bne.n	14402 <_svfiprintf_r+0x122>
   143ea:	7863      	ldrb	r3, [r4, #1]
   143ec:	1c62      	adds	r2, r4, #1
   143ee:	2b2a      	cmp	r3, #42	; 0x2a
   143f0:	d13e      	bne.n	14470 <_svfiprintf_r+0x190>
   143f2:	9b05      	ldr	r3, [sp, #20]
   143f4:	3402      	adds	r4, #2
   143f6:	1d1a      	adds	r2, r3, #4
   143f8:	681b      	ldr	r3, [r3, #0]
   143fa:	9205      	str	r2, [sp, #20]
   143fc:	2b00      	cmp	r3, #0
   143fe:	db34      	blt.n	1446a <_svfiprintf_r+0x18a>
   14400:	9307      	str	r3, [sp, #28]
   14402:	4e35      	ldr	r6, [pc, #212]	; (144d8 <_svfiprintf_r+0x1f8>)
   14404:	7821      	ldrb	r1, [r4, #0]
   14406:	2203      	movs	r2, #3
   14408:	0030      	movs	r0, r6
   1440a:	f000 fc33 	bl	14c74 <memchr>
   1440e:	2800      	cmp	r0, #0
   14410:	d006      	beq.n	14420 <_svfiprintf_r+0x140>
   14412:	2340      	movs	r3, #64	; 0x40
   14414:	1b80      	subs	r0, r0, r6
   14416:	4083      	lsls	r3, r0
   14418:	682a      	ldr	r2, [r5, #0]
   1441a:	3401      	adds	r4, #1
   1441c:	4313      	orrs	r3, r2
   1441e:	602b      	str	r3, [r5, #0]
   14420:	7821      	ldrb	r1, [r4, #0]
   14422:	2206      	movs	r2, #6
   14424:	482d      	ldr	r0, [pc, #180]	; (144dc <_svfiprintf_r+0x1fc>)
   14426:	1c66      	adds	r6, r4, #1
   14428:	7629      	strb	r1, [r5, #24]
   1442a:	f000 fc23 	bl	14c74 <memchr>
   1442e:	2800      	cmp	r0, #0
   14430:	d046      	beq.n	144c0 <_svfiprintf_r+0x1e0>
   14432:	4b2b      	ldr	r3, [pc, #172]	; (144e0 <_svfiprintf_r+0x200>)
   14434:	2b00      	cmp	r3, #0
   14436:	d12f      	bne.n	14498 <_svfiprintf_r+0x1b8>
   14438:	6829      	ldr	r1, [r5, #0]
   1443a:	9b05      	ldr	r3, [sp, #20]
   1443c:	2207      	movs	r2, #7
   1443e:	05c9      	lsls	r1, r1, #23
   14440:	d528      	bpl.n	14494 <_svfiprintf_r+0x1b4>
   14442:	189b      	adds	r3, r3, r2
   14444:	4393      	bics	r3, r2
   14446:	3308      	adds	r3, #8
   14448:	9305      	str	r3, [sp, #20]
   1444a:	696b      	ldr	r3, [r5, #20]
   1444c:	9a03      	ldr	r2, [sp, #12]
   1444e:	189b      	adds	r3, r3, r2
   14450:	616b      	str	r3, [r5, #20]
   14452:	e767      	b.n	14324 <_svfiprintf_r+0x44>
   14454:	425b      	negs	r3, r3
   14456:	60eb      	str	r3, [r5, #12]
   14458:	2302      	movs	r3, #2
   1445a:	430b      	orrs	r3, r1
   1445c:	602b      	str	r3, [r5, #0]
   1445e:	e7c0      	b.n	143e2 <_svfiprintf_r+0x102>
   14460:	434b      	muls	r3, r1
   14462:	3401      	adds	r4, #1
   14464:	189b      	adds	r3, r3, r2
   14466:	2001      	movs	r0, #1
   14468:	e7a0      	b.n	143ac <_svfiprintf_r+0xcc>
   1446a:	2301      	movs	r3, #1
   1446c:	425b      	negs	r3, r3
   1446e:	e7c7      	b.n	14400 <_svfiprintf_r+0x120>
   14470:	2300      	movs	r3, #0
   14472:	0014      	movs	r4, r2
   14474:	200a      	movs	r0, #10
   14476:	001a      	movs	r2, r3
   14478:	606b      	str	r3, [r5, #4]
   1447a:	7821      	ldrb	r1, [r4, #0]
   1447c:	3930      	subs	r1, #48	; 0x30
   1447e:	2909      	cmp	r1, #9
   14480:	d903      	bls.n	1448a <_svfiprintf_r+0x1aa>
   14482:	2b00      	cmp	r3, #0
   14484:	d0bd      	beq.n	14402 <_svfiprintf_r+0x122>
   14486:	9207      	str	r2, [sp, #28]
   14488:	e7bb      	b.n	14402 <_svfiprintf_r+0x122>
   1448a:	4342      	muls	r2, r0
   1448c:	3401      	adds	r4, #1
   1448e:	1852      	adds	r2, r2, r1
   14490:	2301      	movs	r3, #1
   14492:	e7f2      	b.n	1447a <_svfiprintf_r+0x19a>
   14494:	3307      	adds	r3, #7
   14496:	e7d5      	b.n	14444 <_svfiprintf_r+0x164>
   14498:	ab05      	add	r3, sp, #20
   1449a:	9300      	str	r3, [sp, #0]
   1449c:	003a      	movs	r2, r7
   1449e:	4b11      	ldr	r3, [pc, #68]	; (144e4 <_svfiprintf_r+0x204>)
   144a0:	0029      	movs	r1, r5
   144a2:	9802      	ldr	r0, [sp, #8]
   144a4:	e000      	b.n	144a8 <_svfiprintf_r+0x1c8>
   144a6:	bf00      	nop
   144a8:	9003      	str	r0, [sp, #12]
   144aa:	9b03      	ldr	r3, [sp, #12]
   144ac:	3301      	adds	r3, #1
   144ae:	d1cc      	bne.n	1444a <_svfiprintf_r+0x16a>
   144b0:	89bb      	ldrh	r3, [r7, #12]
   144b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   144b4:	065b      	lsls	r3, r3, #25
   144b6:	d400      	bmi.n	144ba <_svfiprintf_r+0x1da>
   144b8:	e729      	b.n	1430e <_svfiprintf_r+0x2e>
   144ba:	2001      	movs	r0, #1
   144bc:	4240      	negs	r0, r0
   144be:	e726      	b.n	1430e <_svfiprintf_r+0x2e>
   144c0:	ab05      	add	r3, sp, #20
   144c2:	9300      	str	r3, [sp, #0]
   144c4:	003a      	movs	r2, r7
   144c6:	4b07      	ldr	r3, [pc, #28]	; (144e4 <_svfiprintf_r+0x204>)
   144c8:	0029      	movs	r1, r5
   144ca:	9802      	ldr	r0, [sp, #8]
   144cc:	f000 f9be 	bl	1484c <_printf_i>
   144d0:	e7ea      	b.n	144a8 <_svfiprintf_r+0x1c8>
   144d2:	46c0      	nop			; (mov r8, r8)
   144d4:	0001646a 	.word	0x0001646a
   144d8:	00016470 	.word	0x00016470
   144dc:	00016474 	.word	0x00016474
   144e0:	00000000 	.word	0x00000000
   144e4:	0001421d 	.word	0x0001421d

000144e8 <__sfputc_r>:
   144e8:	6893      	ldr	r3, [r2, #8]
   144ea:	b510      	push	{r4, lr}
   144ec:	3b01      	subs	r3, #1
   144ee:	6093      	str	r3, [r2, #8]
   144f0:	2b00      	cmp	r3, #0
   144f2:	da05      	bge.n	14500 <__sfputc_r+0x18>
   144f4:	6994      	ldr	r4, [r2, #24]
   144f6:	42a3      	cmp	r3, r4
   144f8:	db08      	blt.n	1450c <__sfputc_r+0x24>
   144fa:	b2cb      	uxtb	r3, r1
   144fc:	2b0a      	cmp	r3, #10
   144fe:	d005      	beq.n	1450c <__sfputc_r+0x24>
   14500:	6813      	ldr	r3, [r2, #0]
   14502:	1c58      	adds	r0, r3, #1
   14504:	6010      	str	r0, [r2, #0]
   14506:	7019      	strb	r1, [r3, #0]
   14508:	b2c8      	uxtb	r0, r1
   1450a:	bd10      	pop	{r4, pc}
   1450c:	f7ff fbb0 	bl	13c70 <__swbuf_r>
   14510:	e7fb      	b.n	1450a <__sfputc_r+0x22>

00014512 <__sfputs_r>:
   14512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14514:	0006      	movs	r6, r0
   14516:	000f      	movs	r7, r1
   14518:	0014      	movs	r4, r2
   1451a:	18d5      	adds	r5, r2, r3
   1451c:	42ac      	cmp	r4, r5
   1451e:	d101      	bne.n	14524 <__sfputs_r+0x12>
   14520:	2000      	movs	r0, #0
   14522:	e007      	b.n	14534 <__sfputs_r+0x22>
   14524:	7821      	ldrb	r1, [r4, #0]
   14526:	003a      	movs	r2, r7
   14528:	0030      	movs	r0, r6
   1452a:	f7ff ffdd 	bl	144e8 <__sfputc_r>
   1452e:	3401      	adds	r4, #1
   14530:	1c43      	adds	r3, r0, #1
   14532:	d1f3      	bne.n	1451c <__sfputs_r+0xa>
   14534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014538 <_vfiprintf_r>:
   14538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1453a:	b09f      	sub	sp, #124	; 0x7c
   1453c:	0006      	movs	r6, r0
   1453e:	000f      	movs	r7, r1
   14540:	0014      	movs	r4, r2
   14542:	9305      	str	r3, [sp, #20]
   14544:	2800      	cmp	r0, #0
   14546:	d004      	beq.n	14552 <_vfiprintf_r+0x1a>
   14548:	6983      	ldr	r3, [r0, #24]
   1454a:	2b00      	cmp	r3, #0
   1454c:	d101      	bne.n	14552 <_vfiprintf_r+0x1a>
   1454e:	f7ff fd53 	bl	13ff8 <__sinit>
   14552:	4b7f      	ldr	r3, [pc, #508]	; (14750 <_vfiprintf_r+0x218>)
   14554:	429f      	cmp	r7, r3
   14556:	d15c      	bne.n	14612 <_vfiprintf_r+0xda>
   14558:	6877      	ldr	r7, [r6, #4]
   1455a:	89bb      	ldrh	r3, [r7, #12]
   1455c:	071b      	lsls	r3, r3, #28
   1455e:	d562      	bpl.n	14626 <_vfiprintf_r+0xee>
   14560:	693b      	ldr	r3, [r7, #16]
   14562:	2b00      	cmp	r3, #0
   14564:	d05f      	beq.n	14626 <_vfiprintf_r+0xee>
   14566:	2300      	movs	r3, #0
   14568:	ad06      	add	r5, sp, #24
   1456a:	616b      	str	r3, [r5, #20]
   1456c:	3320      	adds	r3, #32
   1456e:	766b      	strb	r3, [r5, #25]
   14570:	3310      	adds	r3, #16
   14572:	76ab      	strb	r3, [r5, #26]
   14574:	9402      	str	r4, [sp, #8]
   14576:	9c02      	ldr	r4, [sp, #8]
   14578:	7823      	ldrb	r3, [r4, #0]
   1457a:	2b00      	cmp	r3, #0
   1457c:	d15d      	bne.n	1463a <_vfiprintf_r+0x102>
   1457e:	9b02      	ldr	r3, [sp, #8]
   14580:	1ae3      	subs	r3, r4, r3
   14582:	9304      	str	r3, [sp, #16]
   14584:	d00d      	beq.n	145a2 <_vfiprintf_r+0x6a>
   14586:	9b04      	ldr	r3, [sp, #16]
   14588:	9a02      	ldr	r2, [sp, #8]
   1458a:	0039      	movs	r1, r7
   1458c:	0030      	movs	r0, r6
   1458e:	f7ff ffc0 	bl	14512 <__sfputs_r>
   14592:	1c43      	adds	r3, r0, #1
   14594:	d100      	bne.n	14598 <_vfiprintf_r+0x60>
   14596:	e0cc      	b.n	14732 <_vfiprintf_r+0x1fa>
   14598:	696a      	ldr	r2, [r5, #20]
   1459a:	9b04      	ldr	r3, [sp, #16]
   1459c:	4694      	mov	ip, r2
   1459e:	4463      	add	r3, ip
   145a0:	616b      	str	r3, [r5, #20]
   145a2:	7823      	ldrb	r3, [r4, #0]
   145a4:	2b00      	cmp	r3, #0
   145a6:	d100      	bne.n	145aa <_vfiprintf_r+0x72>
   145a8:	e0c3      	b.n	14732 <_vfiprintf_r+0x1fa>
   145aa:	2201      	movs	r2, #1
   145ac:	2300      	movs	r3, #0
   145ae:	4252      	negs	r2, r2
   145b0:	606a      	str	r2, [r5, #4]
   145b2:	a902      	add	r1, sp, #8
   145b4:	3254      	adds	r2, #84	; 0x54
   145b6:	1852      	adds	r2, r2, r1
   145b8:	3401      	adds	r4, #1
   145ba:	602b      	str	r3, [r5, #0]
   145bc:	60eb      	str	r3, [r5, #12]
   145be:	60ab      	str	r3, [r5, #8]
   145c0:	7013      	strb	r3, [r2, #0]
   145c2:	65ab      	str	r3, [r5, #88]	; 0x58
   145c4:	7821      	ldrb	r1, [r4, #0]
   145c6:	2205      	movs	r2, #5
   145c8:	4862      	ldr	r0, [pc, #392]	; (14754 <_vfiprintf_r+0x21c>)
   145ca:	f000 fb53 	bl	14c74 <memchr>
   145ce:	1c63      	adds	r3, r4, #1
   145d0:	469c      	mov	ip, r3
   145d2:	2800      	cmp	r0, #0
   145d4:	d135      	bne.n	14642 <_vfiprintf_r+0x10a>
   145d6:	6829      	ldr	r1, [r5, #0]
   145d8:	06cb      	lsls	r3, r1, #27
   145da:	d504      	bpl.n	145e6 <_vfiprintf_r+0xae>
   145dc:	2353      	movs	r3, #83	; 0x53
   145de:	aa02      	add	r2, sp, #8
   145e0:	3020      	adds	r0, #32
   145e2:	189b      	adds	r3, r3, r2
   145e4:	7018      	strb	r0, [r3, #0]
   145e6:	070b      	lsls	r3, r1, #28
   145e8:	d504      	bpl.n	145f4 <_vfiprintf_r+0xbc>
   145ea:	2353      	movs	r3, #83	; 0x53
   145ec:	202b      	movs	r0, #43	; 0x2b
   145ee:	aa02      	add	r2, sp, #8
   145f0:	189b      	adds	r3, r3, r2
   145f2:	7018      	strb	r0, [r3, #0]
   145f4:	7823      	ldrb	r3, [r4, #0]
   145f6:	2b2a      	cmp	r3, #42	; 0x2a
   145f8:	d02c      	beq.n	14654 <_vfiprintf_r+0x11c>
   145fa:	2000      	movs	r0, #0
   145fc:	210a      	movs	r1, #10
   145fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14600:	7822      	ldrb	r2, [r4, #0]
   14602:	3a30      	subs	r2, #48	; 0x30
   14604:	2a09      	cmp	r2, #9
   14606:	d800      	bhi.n	1460a <_vfiprintf_r+0xd2>
   14608:	e06b      	b.n	146e2 <_vfiprintf_r+0x1aa>
   1460a:	2800      	cmp	r0, #0
   1460c:	d02a      	beq.n	14664 <_vfiprintf_r+0x12c>
   1460e:	9309      	str	r3, [sp, #36]	; 0x24
   14610:	e028      	b.n	14664 <_vfiprintf_r+0x12c>
   14612:	4b51      	ldr	r3, [pc, #324]	; (14758 <_vfiprintf_r+0x220>)
   14614:	429f      	cmp	r7, r3
   14616:	d101      	bne.n	1461c <_vfiprintf_r+0xe4>
   14618:	68b7      	ldr	r7, [r6, #8]
   1461a:	e79e      	b.n	1455a <_vfiprintf_r+0x22>
   1461c:	4b4f      	ldr	r3, [pc, #316]	; (1475c <_vfiprintf_r+0x224>)
   1461e:	429f      	cmp	r7, r3
   14620:	d19b      	bne.n	1455a <_vfiprintf_r+0x22>
   14622:	68f7      	ldr	r7, [r6, #12]
   14624:	e799      	b.n	1455a <_vfiprintf_r+0x22>
   14626:	0039      	movs	r1, r7
   14628:	0030      	movs	r0, r6
   1462a:	f7ff fb77 	bl	13d1c <__swsetup_r>
   1462e:	2800      	cmp	r0, #0
   14630:	d099      	beq.n	14566 <_vfiprintf_r+0x2e>
   14632:	2001      	movs	r0, #1
   14634:	4240      	negs	r0, r0
   14636:	b01f      	add	sp, #124	; 0x7c
   14638:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1463a:	2b25      	cmp	r3, #37	; 0x25
   1463c:	d09f      	beq.n	1457e <_vfiprintf_r+0x46>
   1463e:	3401      	adds	r4, #1
   14640:	e79a      	b.n	14578 <_vfiprintf_r+0x40>
   14642:	4b44      	ldr	r3, [pc, #272]	; (14754 <_vfiprintf_r+0x21c>)
   14644:	6829      	ldr	r1, [r5, #0]
   14646:	1ac0      	subs	r0, r0, r3
   14648:	2301      	movs	r3, #1
   1464a:	4083      	lsls	r3, r0
   1464c:	430b      	orrs	r3, r1
   1464e:	602b      	str	r3, [r5, #0]
   14650:	4664      	mov	r4, ip
   14652:	e7b7      	b.n	145c4 <_vfiprintf_r+0x8c>
   14654:	9b05      	ldr	r3, [sp, #20]
   14656:	1d18      	adds	r0, r3, #4
   14658:	681b      	ldr	r3, [r3, #0]
   1465a:	9005      	str	r0, [sp, #20]
   1465c:	2b00      	cmp	r3, #0
   1465e:	db3a      	blt.n	146d6 <_vfiprintf_r+0x19e>
   14660:	9309      	str	r3, [sp, #36]	; 0x24
   14662:	4664      	mov	r4, ip
   14664:	7823      	ldrb	r3, [r4, #0]
   14666:	2b2e      	cmp	r3, #46	; 0x2e
   14668:	d10b      	bne.n	14682 <_vfiprintf_r+0x14a>
   1466a:	7863      	ldrb	r3, [r4, #1]
   1466c:	1c62      	adds	r2, r4, #1
   1466e:	2b2a      	cmp	r3, #42	; 0x2a
   14670:	d13f      	bne.n	146f2 <_vfiprintf_r+0x1ba>
   14672:	9b05      	ldr	r3, [sp, #20]
   14674:	3402      	adds	r4, #2
   14676:	1d1a      	adds	r2, r3, #4
   14678:	681b      	ldr	r3, [r3, #0]
   1467a:	9205      	str	r2, [sp, #20]
   1467c:	2b00      	cmp	r3, #0
   1467e:	db35      	blt.n	146ec <_vfiprintf_r+0x1b4>
   14680:	9307      	str	r3, [sp, #28]
   14682:	7821      	ldrb	r1, [r4, #0]
   14684:	2203      	movs	r2, #3
   14686:	4836      	ldr	r0, [pc, #216]	; (14760 <_vfiprintf_r+0x228>)
   14688:	f000 faf4 	bl	14c74 <memchr>
   1468c:	2800      	cmp	r0, #0
   1468e:	d007      	beq.n	146a0 <_vfiprintf_r+0x168>
   14690:	4b33      	ldr	r3, [pc, #204]	; (14760 <_vfiprintf_r+0x228>)
   14692:	682a      	ldr	r2, [r5, #0]
   14694:	1ac0      	subs	r0, r0, r3
   14696:	2340      	movs	r3, #64	; 0x40
   14698:	4083      	lsls	r3, r0
   1469a:	4313      	orrs	r3, r2
   1469c:	602b      	str	r3, [r5, #0]
   1469e:	3401      	adds	r4, #1
   146a0:	7821      	ldrb	r1, [r4, #0]
   146a2:	1c63      	adds	r3, r4, #1
   146a4:	2206      	movs	r2, #6
   146a6:	482f      	ldr	r0, [pc, #188]	; (14764 <_vfiprintf_r+0x22c>)
   146a8:	9302      	str	r3, [sp, #8]
   146aa:	7629      	strb	r1, [r5, #24]
   146ac:	f000 fae2 	bl	14c74 <memchr>
   146b0:	2800      	cmp	r0, #0
   146b2:	d044      	beq.n	1473e <_vfiprintf_r+0x206>
   146b4:	4b2c      	ldr	r3, [pc, #176]	; (14768 <_vfiprintf_r+0x230>)
   146b6:	2b00      	cmp	r3, #0
   146b8:	d12f      	bne.n	1471a <_vfiprintf_r+0x1e2>
   146ba:	6829      	ldr	r1, [r5, #0]
   146bc:	9b05      	ldr	r3, [sp, #20]
   146be:	2207      	movs	r2, #7
   146c0:	05c9      	lsls	r1, r1, #23
   146c2:	d528      	bpl.n	14716 <_vfiprintf_r+0x1de>
   146c4:	189b      	adds	r3, r3, r2
   146c6:	4393      	bics	r3, r2
   146c8:	3308      	adds	r3, #8
   146ca:	9305      	str	r3, [sp, #20]
   146cc:	696b      	ldr	r3, [r5, #20]
   146ce:	9a03      	ldr	r2, [sp, #12]
   146d0:	189b      	adds	r3, r3, r2
   146d2:	616b      	str	r3, [r5, #20]
   146d4:	e74f      	b.n	14576 <_vfiprintf_r+0x3e>
   146d6:	425b      	negs	r3, r3
   146d8:	60eb      	str	r3, [r5, #12]
   146da:	2302      	movs	r3, #2
   146dc:	430b      	orrs	r3, r1
   146de:	602b      	str	r3, [r5, #0]
   146e0:	e7bf      	b.n	14662 <_vfiprintf_r+0x12a>
   146e2:	434b      	muls	r3, r1
   146e4:	3401      	adds	r4, #1
   146e6:	189b      	adds	r3, r3, r2
   146e8:	2001      	movs	r0, #1
   146ea:	e789      	b.n	14600 <_vfiprintf_r+0xc8>
   146ec:	2301      	movs	r3, #1
   146ee:	425b      	negs	r3, r3
   146f0:	e7c6      	b.n	14680 <_vfiprintf_r+0x148>
   146f2:	2300      	movs	r3, #0
   146f4:	0014      	movs	r4, r2
   146f6:	200a      	movs	r0, #10
   146f8:	001a      	movs	r2, r3
   146fa:	606b      	str	r3, [r5, #4]
   146fc:	7821      	ldrb	r1, [r4, #0]
   146fe:	3930      	subs	r1, #48	; 0x30
   14700:	2909      	cmp	r1, #9
   14702:	d903      	bls.n	1470c <_vfiprintf_r+0x1d4>
   14704:	2b00      	cmp	r3, #0
   14706:	d0bc      	beq.n	14682 <_vfiprintf_r+0x14a>
   14708:	9207      	str	r2, [sp, #28]
   1470a:	e7ba      	b.n	14682 <_vfiprintf_r+0x14a>
   1470c:	4342      	muls	r2, r0
   1470e:	3401      	adds	r4, #1
   14710:	1852      	adds	r2, r2, r1
   14712:	2301      	movs	r3, #1
   14714:	e7f2      	b.n	146fc <_vfiprintf_r+0x1c4>
   14716:	3307      	adds	r3, #7
   14718:	e7d5      	b.n	146c6 <_vfiprintf_r+0x18e>
   1471a:	ab05      	add	r3, sp, #20
   1471c:	9300      	str	r3, [sp, #0]
   1471e:	003a      	movs	r2, r7
   14720:	4b12      	ldr	r3, [pc, #72]	; (1476c <_vfiprintf_r+0x234>)
   14722:	0029      	movs	r1, r5
   14724:	0030      	movs	r0, r6
   14726:	e000      	b.n	1472a <_vfiprintf_r+0x1f2>
   14728:	bf00      	nop
   1472a:	9003      	str	r0, [sp, #12]
   1472c:	9b03      	ldr	r3, [sp, #12]
   1472e:	3301      	adds	r3, #1
   14730:	d1cc      	bne.n	146cc <_vfiprintf_r+0x194>
   14732:	89bb      	ldrh	r3, [r7, #12]
   14734:	065b      	lsls	r3, r3, #25
   14736:	d500      	bpl.n	1473a <_vfiprintf_r+0x202>
   14738:	e77b      	b.n	14632 <_vfiprintf_r+0xfa>
   1473a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1473c:	e77b      	b.n	14636 <_vfiprintf_r+0xfe>
   1473e:	ab05      	add	r3, sp, #20
   14740:	9300      	str	r3, [sp, #0]
   14742:	003a      	movs	r2, r7
   14744:	4b09      	ldr	r3, [pc, #36]	; (1476c <_vfiprintf_r+0x234>)
   14746:	0029      	movs	r1, r5
   14748:	0030      	movs	r0, r6
   1474a:	f000 f87f 	bl	1484c <_printf_i>
   1474e:	e7ec      	b.n	1472a <_vfiprintf_r+0x1f2>
   14750:	00016420 	.word	0x00016420
   14754:	0001646a 	.word	0x0001646a
   14758:	00016440 	.word	0x00016440
   1475c:	00016400 	.word	0x00016400
   14760:	00016470 	.word	0x00016470
   14764:	00016474 	.word	0x00016474
   14768:	00000000 	.word	0x00000000
   1476c:	00014513 	.word	0x00014513

00014770 <_printf_common>:
   14770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14772:	0015      	movs	r5, r2
   14774:	9301      	str	r3, [sp, #4]
   14776:	688a      	ldr	r2, [r1, #8]
   14778:	690b      	ldr	r3, [r1, #16]
   1477a:	9000      	str	r0, [sp, #0]
   1477c:	000c      	movs	r4, r1
   1477e:	4293      	cmp	r3, r2
   14780:	da00      	bge.n	14784 <_printf_common+0x14>
   14782:	0013      	movs	r3, r2
   14784:	0022      	movs	r2, r4
   14786:	602b      	str	r3, [r5, #0]
   14788:	3243      	adds	r2, #67	; 0x43
   1478a:	7812      	ldrb	r2, [r2, #0]
   1478c:	2a00      	cmp	r2, #0
   1478e:	d001      	beq.n	14794 <_printf_common+0x24>
   14790:	3301      	adds	r3, #1
   14792:	602b      	str	r3, [r5, #0]
   14794:	6823      	ldr	r3, [r4, #0]
   14796:	069b      	lsls	r3, r3, #26
   14798:	d502      	bpl.n	147a0 <_printf_common+0x30>
   1479a:	682b      	ldr	r3, [r5, #0]
   1479c:	3302      	adds	r3, #2
   1479e:	602b      	str	r3, [r5, #0]
   147a0:	2706      	movs	r7, #6
   147a2:	6823      	ldr	r3, [r4, #0]
   147a4:	401f      	ands	r7, r3
   147a6:	d027      	beq.n	147f8 <_printf_common+0x88>
   147a8:	0023      	movs	r3, r4
   147aa:	3343      	adds	r3, #67	; 0x43
   147ac:	781b      	ldrb	r3, [r3, #0]
   147ae:	1e5a      	subs	r2, r3, #1
   147b0:	4193      	sbcs	r3, r2
   147b2:	6822      	ldr	r2, [r4, #0]
   147b4:	0692      	lsls	r2, r2, #26
   147b6:	d430      	bmi.n	1481a <_printf_common+0xaa>
   147b8:	0022      	movs	r2, r4
   147ba:	9901      	ldr	r1, [sp, #4]
   147bc:	3243      	adds	r2, #67	; 0x43
   147be:	9800      	ldr	r0, [sp, #0]
   147c0:	9e08      	ldr	r6, [sp, #32]
   147c2:	47b0      	blx	r6
   147c4:	1c43      	adds	r3, r0, #1
   147c6:	d025      	beq.n	14814 <_printf_common+0xa4>
   147c8:	2306      	movs	r3, #6
   147ca:	6820      	ldr	r0, [r4, #0]
   147cc:	682a      	ldr	r2, [r5, #0]
   147ce:	68e1      	ldr	r1, [r4, #12]
   147d0:	4003      	ands	r3, r0
   147d2:	2500      	movs	r5, #0
   147d4:	2b04      	cmp	r3, #4
   147d6:	d103      	bne.n	147e0 <_printf_common+0x70>
   147d8:	1a8d      	subs	r5, r1, r2
   147da:	43eb      	mvns	r3, r5
   147dc:	17db      	asrs	r3, r3, #31
   147de:	401d      	ands	r5, r3
   147e0:	68a3      	ldr	r3, [r4, #8]
   147e2:	6922      	ldr	r2, [r4, #16]
   147e4:	4293      	cmp	r3, r2
   147e6:	dd01      	ble.n	147ec <_printf_common+0x7c>
   147e8:	1a9b      	subs	r3, r3, r2
   147ea:	18ed      	adds	r5, r5, r3
   147ec:	2700      	movs	r7, #0
   147ee:	42bd      	cmp	r5, r7
   147f0:	d120      	bne.n	14834 <_printf_common+0xc4>
   147f2:	2000      	movs	r0, #0
   147f4:	e010      	b.n	14818 <_printf_common+0xa8>
   147f6:	3701      	adds	r7, #1
   147f8:	68e3      	ldr	r3, [r4, #12]
   147fa:	682a      	ldr	r2, [r5, #0]
   147fc:	1a9b      	subs	r3, r3, r2
   147fe:	429f      	cmp	r7, r3
   14800:	dad2      	bge.n	147a8 <_printf_common+0x38>
   14802:	0022      	movs	r2, r4
   14804:	2301      	movs	r3, #1
   14806:	3219      	adds	r2, #25
   14808:	9901      	ldr	r1, [sp, #4]
   1480a:	9800      	ldr	r0, [sp, #0]
   1480c:	9e08      	ldr	r6, [sp, #32]
   1480e:	47b0      	blx	r6
   14810:	1c43      	adds	r3, r0, #1
   14812:	d1f0      	bne.n	147f6 <_printf_common+0x86>
   14814:	2001      	movs	r0, #1
   14816:	4240      	negs	r0, r0
   14818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1481a:	2030      	movs	r0, #48	; 0x30
   1481c:	18e1      	adds	r1, r4, r3
   1481e:	3143      	adds	r1, #67	; 0x43
   14820:	7008      	strb	r0, [r1, #0]
   14822:	0021      	movs	r1, r4
   14824:	1c5a      	adds	r2, r3, #1
   14826:	3145      	adds	r1, #69	; 0x45
   14828:	7809      	ldrb	r1, [r1, #0]
   1482a:	18a2      	adds	r2, r4, r2
   1482c:	3243      	adds	r2, #67	; 0x43
   1482e:	3302      	adds	r3, #2
   14830:	7011      	strb	r1, [r2, #0]
   14832:	e7c1      	b.n	147b8 <_printf_common+0x48>
   14834:	0022      	movs	r2, r4
   14836:	2301      	movs	r3, #1
   14838:	321a      	adds	r2, #26
   1483a:	9901      	ldr	r1, [sp, #4]
   1483c:	9800      	ldr	r0, [sp, #0]
   1483e:	9e08      	ldr	r6, [sp, #32]
   14840:	47b0      	blx	r6
   14842:	1c43      	adds	r3, r0, #1
   14844:	d0e6      	beq.n	14814 <_printf_common+0xa4>
   14846:	3701      	adds	r7, #1
   14848:	e7d1      	b.n	147ee <_printf_common+0x7e>
	...

0001484c <_printf_i>:
   1484c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1484e:	b08b      	sub	sp, #44	; 0x2c
   14850:	9206      	str	r2, [sp, #24]
   14852:	000a      	movs	r2, r1
   14854:	3243      	adds	r2, #67	; 0x43
   14856:	9307      	str	r3, [sp, #28]
   14858:	9005      	str	r0, [sp, #20]
   1485a:	9204      	str	r2, [sp, #16]
   1485c:	7e0a      	ldrb	r2, [r1, #24]
   1485e:	000c      	movs	r4, r1
   14860:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14862:	2a6e      	cmp	r2, #110	; 0x6e
   14864:	d100      	bne.n	14868 <_printf_i+0x1c>
   14866:	e08f      	b.n	14988 <_printf_i+0x13c>
   14868:	d817      	bhi.n	1489a <_printf_i+0x4e>
   1486a:	2a63      	cmp	r2, #99	; 0x63
   1486c:	d02c      	beq.n	148c8 <_printf_i+0x7c>
   1486e:	d808      	bhi.n	14882 <_printf_i+0x36>
   14870:	2a00      	cmp	r2, #0
   14872:	d100      	bne.n	14876 <_printf_i+0x2a>
   14874:	e099      	b.n	149aa <_printf_i+0x15e>
   14876:	2a58      	cmp	r2, #88	; 0x58
   14878:	d054      	beq.n	14924 <_printf_i+0xd8>
   1487a:	0026      	movs	r6, r4
   1487c:	3642      	adds	r6, #66	; 0x42
   1487e:	7032      	strb	r2, [r6, #0]
   14880:	e029      	b.n	148d6 <_printf_i+0x8a>
   14882:	2a64      	cmp	r2, #100	; 0x64
   14884:	d001      	beq.n	1488a <_printf_i+0x3e>
   14886:	2a69      	cmp	r2, #105	; 0x69
   14888:	d1f7      	bne.n	1487a <_printf_i+0x2e>
   1488a:	6821      	ldr	r1, [r4, #0]
   1488c:	681a      	ldr	r2, [r3, #0]
   1488e:	0608      	lsls	r0, r1, #24
   14890:	d523      	bpl.n	148da <_printf_i+0x8e>
   14892:	1d11      	adds	r1, r2, #4
   14894:	6019      	str	r1, [r3, #0]
   14896:	6815      	ldr	r5, [r2, #0]
   14898:	e025      	b.n	148e6 <_printf_i+0x9a>
   1489a:	2a73      	cmp	r2, #115	; 0x73
   1489c:	d100      	bne.n	148a0 <_printf_i+0x54>
   1489e:	e088      	b.n	149b2 <_printf_i+0x166>
   148a0:	d808      	bhi.n	148b4 <_printf_i+0x68>
   148a2:	2a6f      	cmp	r2, #111	; 0x6f
   148a4:	d029      	beq.n	148fa <_printf_i+0xae>
   148a6:	2a70      	cmp	r2, #112	; 0x70
   148a8:	d1e7      	bne.n	1487a <_printf_i+0x2e>
   148aa:	2220      	movs	r2, #32
   148ac:	6809      	ldr	r1, [r1, #0]
   148ae:	430a      	orrs	r2, r1
   148b0:	6022      	str	r2, [r4, #0]
   148b2:	e003      	b.n	148bc <_printf_i+0x70>
   148b4:	2a75      	cmp	r2, #117	; 0x75
   148b6:	d020      	beq.n	148fa <_printf_i+0xae>
   148b8:	2a78      	cmp	r2, #120	; 0x78
   148ba:	d1de      	bne.n	1487a <_printf_i+0x2e>
   148bc:	0022      	movs	r2, r4
   148be:	2178      	movs	r1, #120	; 0x78
   148c0:	3245      	adds	r2, #69	; 0x45
   148c2:	7011      	strb	r1, [r2, #0]
   148c4:	4a6c      	ldr	r2, [pc, #432]	; (14a78 <_printf_i+0x22c>)
   148c6:	e030      	b.n	1492a <_printf_i+0xde>
   148c8:	000e      	movs	r6, r1
   148ca:	681a      	ldr	r2, [r3, #0]
   148cc:	3642      	adds	r6, #66	; 0x42
   148ce:	1d11      	adds	r1, r2, #4
   148d0:	6019      	str	r1, [r3, #0]
   148d2:	6813      	ldr	r3, [r2, #0]
   148d4:	7033      	strb	r3, [r6, #0]
   148d6:	2301      	movs	r3, #1
   148d8:	e079      	b.n	149ce <_printf_i+0x182>
   148da:	0649      	lsls	r1, r1, #25
   148dc:	d5d9      	bpl.n	14892 <_printf_i+0x46>
   148de:	1d11      	adds	r1, r2, #4
   148e0:	6019      	str	r1, [r3, #0]
   148e2:	2300      	movs	r3, #0
   148e4:	5ed5      	ldrsh	r5, [r2, r3]
   148e6:	2d00      	cmp	r5, #0
   148e8:	da03      	bge.n	148f2 <_printf_i+0xa6>
   148ea:	232d      	movs	r3, #45	; 0x2d
   148ec:	9a04      	ldr	r2, [sp, #16]
   148ee:	426d      	negs	r5, r5
   148f0:	7013      	strb	r3, [r2, #0]
   148f2:	4b62      	ldr	r3, [pc, #392]	; (14a7c <_printf_i+0x230>)
   148f4:	270a      	movs	r7, #10
   148f6:	9303      	str	r3, [sp, #12]
   148f8:	e02f      	b.n	1495a <_printf_i+0x10e>
   148fa:	6820      	ldr	r0, [r4, #0]
   148fc:	6819      	ldr	r1, [r3, #0]
   148fe:	0605      	lsls	r5, r0, #24
   14900:	d503      	bpl.n	1490a <_printf_i+0xbe>
   14902:	1d08      	adds	r0, r1, #4
   14904:	6018      	str	r0, [r3, #0]
   14906:	680d      	ldr	r5, [r1, #0]
   14908:	e005      	b.n	14916 <_printf_i+0xca>
   1490a:	0640      	lsls	r0, r0, #25
   1490c:	d5f9      	bpl.n	14902 <_printf_i+0xb6>
   1490e:	680d      	ldr	r5, [r1, #0]
   14910:	1d08      	adds	r0, r1, #4
   14912:	6018      	str	r0, [r3, #0]
   14914:	b2ad      	uxth	r5, r5
   14916:	4b59      	ldr	r3, [pc, #356]	; (14a7c <_printf_i+0x230>)
   14918:	2708      	movs	r7, #8
   1491a:	9303      	str	r3, [sp, #12]
   1491c:	2a6f      	cmp	r2, #111	; 0x6f
   1491e:	d018      	beq.n	14952 <_printf_i+0x106>
   14920:	270a      	movs	r7, #10
   14922:	e016      	b.n	14952 <_printf_i+0x106>
   14924:	3145      	adds	r1, #69	; 0x45
   14926:	700a      	strb	r2, [r1, #0]
   14928:	4a54      	ldr	r2, [pc, #336]	; (14a7c <_printf_i+0x230>)
   1492a:	9203      	str	r2, [sp, #12]
   1492c:	681a      	ldr	r2, [r3, #0]
   1492e:	6821      	ldr	r1, [r4, #0]
   14930:	1d10      	adds	r0, r2, #4
   14932:	6018      	str	r0, [r3, #0]
   14934:	6815      	ldr	r5, [r2, #0]
   14936:	0608      	lsls	r0, r1, #24
   14938:	d522      	bpl.n	14980 <_printf_i+0x134>
   1493a:	07cb      	lsls	r3, r1, #31
   1493c:	d502      	bpl.n	14944 <_printf_i+0xf8>
   1493e:	2320      	movs	r3, #32
   14940:	4319      	orrs	r1, r3
   14942:	6021      	str	r1, [r4, #0]
   14944:	2710      	movs	r7, #16
   14946:	2d00      	cmp	r5, #0
   14948:	d103      	bne.n	14952 <_printf_i+0x106>
   1494a:	2320      	movs	r3, #32
   1494c:	6822      	ldr	r2, [r4, #0]
   1494e:	439a      	bics	r2, r3
   14950:	6022      	str	r2, [r4, #0]
   14952:	0023      	movs	r3, r4
   14954:	2200      	movs	r2, #0
   14956:	3343      	adds	r3, #67	; 0x43
   14958:	701a      	strb	r2, [r3, #0]
   1495a:	6863      	ldr	r3, [r4, #4]
   1495c:	60a3      	str	r3, [r4, #8]
   1495e:	2b00      	cmp	r3, #0
   14960:	db5c      	blt.n	14a1c <_printf_i+0x1d0>
   14962:	2204      	movs	r2, #4
   14964:	6821      	ldr	r1, [r4, #0]
   14966:	4391      	bics	r1, r2
   14968:	6021      	str	r1, [r4, #0]
   1496a:	2d00      	cmp	r5, #0
   1496c:	d158      	bne.n	14a20 <_printf_i+0x1d4>
   1496e:	9e04      	ldr	r6, [sp, #16]
   14970:	2b00      	cmp	r3, #0
   14972:	d064      	beq.n	14a3e <_printf_i+0x1f2>
   14974:	0026      	movs	r6, r4
   14976:	9b03      	ldr	r3, [sp, #12]
   14978:	3642      	adds	r6, #66	; 0x42
   1497a:	781b      	ldrb	r3, [r3, #0]
   1497c:	7033      	strb	r3, [r6, #0]
   1497e:	e05e      	b.n	14a3e <_printf_i+0x1f2>
   14980:	0648      	lsls	r0, r1, #25
   14982:	d5da      	bpl.n	1493a <_printf_i+0xee>
   14984:	b2ad      	uxth	r5, r5
   14986:	e7d8      	b.n	1493a <_printf_i+0xee>
   14988:	6809      	ldr	r1, [r1, #0]
   1498a:	681a      	ldr	r2, [r3, #0]
   1498c:	0608      	lsls	r0, r1, #24
   1498e:	d505      	bpl.n	1499c <_printf_i+0x150>
   14990:	1d11      	adds	r1, r2, #4
   14992:	6019      	str	r1, [r3, #0]
   14994:	6813      	ldr	r3, [r2, #0]
   14996:	6962      	ldr	r2, [r4, #20]
   14998:	601a      	str	r2, [r3, #0]
   1499a:	e006      	b.n	149aa <_printf_i+0x15e>
   1499c:	0649      	lsls	r1, r1, #25
   1499e:	d5f7      	bpl.n	14990 <_printf_i+0x144>
   149a0:	1d11      	adds	r1, r2, #4
   149a2:	6019      	str	r1, [r3, #0]
   149a4:	6813      	ldr	r3, [r2, #0]
   149a6:	8aa2      	ldrh	r2, [r4, #20]
   149a8:	801a      	strh	r2, [r3, #0]
   149aa:	2300      	movs	r3, #0
   149ac:	9e04      	ldr	r6, [sp, #16]
   149ae:	6123      	str	r3, [r4, #16]
   149b0:	e054      	b.n	14a5c <_printf_i+0x210>
   149b2:	681a      	ldr	r2, [r3, #0]
   149b4:	1d11      	adds	r1, r2, #4
   149b6:	6019      	str	r1, [r3, #0]
   149b8:	6816      	ldr	r6, [r2, #0]
   149ba:	2100      	movs	r1, #0
   149bc:	6862      	ldr	r2, [r4, #4]
   149be:	0030      	movs	r0, r6
   149c0:	f000 f958 	bl	14c74 <memchr>
   149c4:	2800      	cmp	r0, #0
   149c6:	d001      	beq.n	149cc <_printf_i+0x180>
   149c8:	1b80      	subs	r0, r0, r6
   149ca:	6060      	str	r0, [r4, #4]
   149cc:	6863      	ldr	r3, [r4, #4]
   149ce:	6123      	str	r3, [r4, #16]
   149d0:	2300      	movs	r3, #0
   149d2:	9a04      	ldr	r2, [sp, #16]
   149d4:	7013      	strb	r3, [r2, #0]
   149d6:	e041      	b.n	14a5c <_printf_i+0x210>
   149d8:	6923      	ldr	r3, [r4, #16]
   149da:	0032      	movs	r2, r6
   149dc:	9906      	ldr	r1, [sp, #24]
   149de:	9805      	ldr	r0, [sp, #20]
   149e0:	9d07      	ldr	r5, [sp, #28]
   149e2:	47a8      	blx	r5
   149e4:	1c43      	adds	r3, r0, #1
   149e6:	d043      	beq.n	14a70 <_printf_i+0x224>
   149e8:	6823      	ldr	r3, [r4, #0]
   149ea:	2500      	movs	r5, #0
   149ec:	079b      	lsls	r3, r3, #30
   149ee:	d40f      	bmi.n	14a10 <_printf_i+0x1c4>
   149f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   149f2:	68e0      	ldr	r0, [r4, #12]
   149f4:	4298      	cmp	r0, r3
   149f6:	da3d      	bge.n	14a74 <_printf_i+0x228>
   149f8:	0018      	movs	r0, r3
   149fa:	e03b      	b.n	14a74 <_printf_i+0x228>
   149fc:	0022      	movs	r2, r4
   149fe:	2301      	movs	r3, #1
   14a00:	3219      	adds	r2, #25
   14a02:	9906      	ldr	r1, [sp, #24]
   14a04:	9805      	ldr	r0, [sp, #20]
   14a06:	9e07      	ldr	r6, [sp, #28]
   14a08:	47b0      	blx	r6
   14a0a:	1c43      	adds	r3, r0, #1
   14a0c:	d030      	beq.n	14a70 <_printf_i+0x224>
   14a0e:	3501      	adds	r5, #1
   14a10:	68e3      	ldr	r3, [r4, #12]
   14a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14a14:	1a9b      	subs	r3, r3, r2
   14a16:	429d      	cmp	r5, r3
   14a18:	dbf0      	blt.n	149fc <_printf_i+0x1b0>
   14a1a:	e7e9      	b.n	149f0 <_printf_i+0x1a4>
   14a1c:	2d00      	cmp	r5, #0
   14a1e:	d0a9      	beq.n	14974 <_printf_i+0x128>
   14a20:	9e04      	ldr	r6, [sp, #16]
   14a22:	0028      	movs	r0, r5
   14a24:	0039      	movs	r1, r7
   14a26:	f7fe fc67 	bl	132f8 <__aeabi_uidivmod>
   14a2a:	9b03      	ldr	r3, [sp, #12]
   14a2c:	3e01      	subs	r6, #1
   14a2e:	5c5b      	ldrb	r3, [r3, r1]
   14a30:	0028      	movs	r0, r5
   14a32:	7033      	strb	r3, [r6, #0]
   14a34:	0039      	movs	r1, r7
   14a36:	f7fe fbd9 	bl	131ec <__udivsi3>
   14a3a:	1e05      	subs	r5, r0, #0
   14a3c:	d1f1      	bne.n	14a22 <_printf_i+0x1d6>
   14a3e:	2f08      	cmp	r7, #8
   14a40:	d109      	bne.n	14a56 <_printf_i+0x20a>
   14a42:	6823      	ldr	r3, [r4, #0]
   14a44:	07db      	lsls	r3, r3, #31
   14a46:	d506      	bpl.n	14a56 <_printf_i+0x20a>
   14a48:	6863      	ldr	r3, [r4, #4]
   14a4a:	6922      	ldr	r2, [r4, #16]
   14a4c:	4293      	cmp	r3, r2
   14a4e:	dc02      	bgt.n	14a56 <_printf_i+0x20a>
   14a50:	2330      	movs	r3, #48	; 0x30
   14a52:	3e01      	subs	r6, #1
   14a54:	7033      	strb	r3, [r6, #0]
   14a56:	9b04      	ldr	r3, [sp, #16]
   14a58:	1b9b      	subs	r3, r3, r6
   14a5a:	6123      	str	r3, [r4, #16]
   14a5c:	9b07      	ldr	r3, [sp, #28]
   14a5e:	aa09      	add	r2, sp, #36	; 0x24
   14a60:	9300      	str	r3, [sp, #0]
   14a62:	0021      	movs	r1, r4
   14a64:	9b06      	ldr	r3, [sp, #24]
   14a66:	9805      	ldr	r0, [sp, #20]
   14a68:	f7ff fe82 	bl	14770 <_printf_common>
   14a6c:	1c43      	adds	r3, r0, #1
   14a6e:	d1b3      	bne.n	149d8 <_printf_i+0x18c>
   14a70:	2001      	movs	r0, #1
   14a72:	4240      	negs	r0, r0
   14a74:	b00b      	add	sp, #44	; 0x2c
   14a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a78:	0001648c 	.word	0x0001648c
   14a7c:	0001647b 	.word	0x0001647b

00014a80 <_putc_r>:
   14a80:	b570      	push	{r4, r5, r6, lr}
   14a82:	0006      	movs	r6, r0
   14a84:	000d      	movs	r5, r1
   14a86:	0014      	movs	r4, r2
   14a88:	2800      	cmp	r0, #0
   14a8a:	d004      	beq.n	14a96 <_putc_r+0x16>
   14a8c:	6983      	ldr	r3, [r0, #24]
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d101      	bne.n	14a96 <_putc_r+0x16>
   14a92:	f7ff fab1 	bl	13ff8 <__sinit>
   14a96:	4b12      	ldr	r3, [pc, #72]	; (14ae0 <_putc_r+0x60>)
   14a98:	429c      	cmp	r4, r3
   14a9a:	d111      	bne.n	14ac0 <_putc_r+0x40>
   14a9c:	6874      	ldr	r4, [r6, #4]
   14a9e:	68a3      	ldr	r3, [r4, #8]
   14aa0:	3b01      	subs	r3, #1
   14aa2:	60a3      	str	r3, [r4, #8]
   14aa4:	2b00      	cmp	r3, #0
   14aa6:	da05      	bge.n	14ab4 <_putc_r+0x34>
   14aa8:	69a2      	ldr	r2, [r4, #24]
   14aaa:	4293      	cmp	r3, r2
   14aac:	db12      	blt.n	14ad4 <_putc_r+0x54>
   14aae:	b2eb      	uxtb	r3, r5
   14ab0:	2b0a      	cmp	r3, #10
   14ab2:	d00f      	beq.n	14ad4 <_putc_r+0x54>
   14ab4:	6823      	ldr	r3, [r4, #0]
   14ab6:	b2e8      	uxtb	r0, r5
   14ab8:	1c5a      	adds	r2, r3, #1
   14aba:	6022      	str	r2, [r4, #0]
   14abc:	701d      	strb	r5, [r3, #0]
   14abe:	bd70      	pop	{r4, r5, r6, pc}
   14ac0:	4b08      	ldr	r3, [pc, #32]	; (14ae4 <_putc_r+0x64>)
   14ac2:	429c      	cmp	r4, r3
   14ac4:	d101      	bne.n	14aca <_putc_r+0x4a>
   14ac6:	68b4      	ldr	r4, [r6, #8]
   14ac8:	e7e9      	b.n	14a9e <_putc_r+0x1e>
   14aca:	4b07      	ldr	r3, [pc, #28]	; (14ae8 <_putc_r+0x68>)
   14acc:	429c      	cmp	r4, r3
   14ace:	d1e6      	bne.n	14a9e <_putc_r+0x1e>
   14ad0:	68f4      	ldr	r4, [r6, #12]
   14ad2:	e7e4      	b.n	14a9e <_putc_r+0x1e>
   14ad4:	0022      	movs	r2, r4
   14ad6:	0029      	movs	r1, r5
   14ad8:	0030      	movs	r0, r6
   14ada:	f7ff f8c9 	bl	13c70 <__swbuf_r>
   14ade:	e7ee      	b.n	14abe <_putc_r+0x3e>
   14ae0:	00016420 	.word	0x00016420
   14ae4:	00016440 	.word	0x00016440
   14ae8:	00016400 	.word	0x00016400

00014aec <__sread>:
   14aec:	b570      	push	{r4, r5, r6, lr}
   14aee:	000c      	movs	r4, r1
   14af0:	250e      	movs	r5, #14
   14af2:	5f49      	ldrsh	r1, [r1, r5]
   14af4:	f000 f8f0 	bl	14cd8 <_read_r>
   14af8:	2800      	cmp	r0, #0
   14afa:	db03      	blt.n	14b04 <__sread+0x18>
   14afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14afe:	181b      	adds	r3, r3, r0
   14b00:	6563      	str	r3, [r4, #84]	; 0x54
   14b02:	bd70      	pop	{r4, r5, r6, pc}
   14b04:	89a3      	ldrh	r3, [r4, #12]
   14b06:	4a02      	ldr	r2, [pc, #8]	; (14b10 <__sread+0x24>)
   14b08:	4013      	ands	r3, r2
   14b0a:	81a3      	strh	r3, [r4, #12]
   14b0c:	e7f9      	b.n	14b02 <__sread+0x16>
   14b0e:	46c0      	nop			; (mov r8, r8)
   14b10:	ffffefff 	.word	0xffffefff

00014b14 <__swrite>:
   14b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b16:	001f      	movs	r7, r3
   14b18:	898b      	ldrh	r3, [r1, #12]
   14b1a:	0005      	movs	r5, r0
   14b1c:	000c      	movs	r4, r1
   14b1e:	0016      	movs	r6, r2
   14b20:	05db      	lsls	r3, r3, #23
   14b22:	d505      	bpl.n	14b30 <__swrite+0x1c>
   14b24:	230e      	movs	r3, #14
   14b26:	5ec9      	ldrsh	r1, [r1, r3]
   14b28:	2200      	movs	r2, #0
   14b2a:	2302      	movs	r3, #2
   14b2c:	f000 f88e 	bl	14c4c <_lseek_r>
   14b30:	89a3      	ldrh	r3, [r4, #12]
   14b32:	4a05      	ldr	r2, [pc, #20]	; (14b48 <__swrite+0x34>)
   14b34:	0028      	movs	r0, r5
   14b36:	4013      	ands	r3, r2
   14b38:	81a3      	strh	r3, [r4, #12]
   14b3a:	0032      	movs	r2, r6
   14b3c:	230e      	movs	r3, #14
   14b3e:	5ee1      	ldrsh	r1, [r4, r3]
   14b40:	003b      	movs	r3, r7
   14b42:	f000 f839 	bl	14bb8 <_write_r>
   14b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b48:	ffffefff 	.word	0xffffefff

00014b4c <__sseek>:
   14b4c:	b570      	push	{r4, r5, r6, lr}
   14b4e:	000c      	movs	r4, r1
   14b50:	250e      	movs	r5, #14
   14b52:	5f49      	ldrsh	r1, [r1, r5]
   14b54:	f000 f87a 	bl	14c4c <_lseek_r>
   14b58:	89a3      	ldrh	r3, [r4, #12]
   14b5a:	1c42      	adds	r2, r0, #1
   14b5c:	d103      	bne.n	14b66 <__sseek+0x1a>
   14b5e:	4a05      	ldr	r2, [pc, #20]	; (14b74 <__sseek+0x28>)
   14b60:	4013      	ands	r3, r2
   14b62:	81a3      	strh	r3, [r4, #12]
   14b64:	bd70      	pop	{r4, r5, r6, pc}
   14b66:	2280      	movs	r2, #128	; 0x80
   14b68:	0152      	lsls	r2, r2, #5
   14b6a:	4313      	orrs	r3, r2
   14b6c:	81a3      	strh	r3, [r4, #12]
   14b6e:	6560      	str	r0, [r4, #84]	; 0x54
   14b70:	e7f8      	b.n	14b64 <__sseek+0x18>
   14b72:	46c0      	nop			; (mov r8, r8)
   14b74:	ffffefff 	.word	0xffffefff

00014b78 <__sclose>:
   14b78:	b510      	push	{r4, lr}
   14b7a:	230e      	movs	r3, #14
   14b7c:	5ec9      	ldrsh	r1, [r1, r3]
   14b7e:	f000 f82f 	bl	14be0 <_close_r>
   14b82:	bd10      	pop	{r4, pc}

00014b84 <strchr>:
   14b84:	b2c9      	uxtb	r1, r1
   14b86:	7803      	ldrb	r3, [r0, #0]
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d004      	beq.n	14b96 <strchr+0x12>
   14b8c:	4299      	cmp	r1, r3
   14b8e:	d100      	bne.n	14b92 <strchr+0xe>
   14b90:	4770      	bx	lr
   14b92:	3001      	adds	r0, #1
   14b94:	e7f7      	b.n	14b86 <strchr+0x2>
   14b96:	424b      	negs	r3, r1
   14b98:	4159      	adcs	r1, r3
   14b9a:	4249      	negs	r1, r1
   14b9c:	4008      	ands	r0, r1
   14b9e:	e7f7      	b.n	14b90 <strchr+0xc>

00014ba0 <__ascii_wctomb>:
   14ba0:	1e0b      	subs	r3, r1, #0
   14ba2:	d004      	beq.n	14bae <__ascii_wctomb+0xe>
   14ba4:	2aff      	cmp	r2, #255	; 0xff
   14ba6:	d904      	bls.n	14bb2 <__ascii_wctomb+0x12>
   14ba8:	238a      	movs	r3, #138	; 0x8a
   14baa:	6003      	str	r3, [r0, #0]
   14bac:	3b8b      	subs	r3, #139	; 0x8b
   14bae:	0018      	movs	r0, r3
   14bb0:	4770      	bx	lr
   14bb2:	700a      	strb	r2, [r1, #0]
   14bb4:	2301      	movs	r3, #1
   14bb6:	e7fa      	b.n	14bae <__ascii_wctomb+0xe>

00014bb8 <_write_r>:
   14bb8:	b570      	push	{r4, r5, r6, lr}
   14bba:	0005      	movs	r5, r0
   14bbc:	0008      	movs	r0, r1
   14bbe:	0011      	movs	r1, r2
   14bc0:	2200      	movs	r2, #0
   14bc2:	4c06      	ldr	r4, [pc, #24]	; (14bdc <_write_r+0x24>)
   14bc4:	6022      	str	r2, [r4, #0]
   14bc6:	001a      	movs	r2, r3
   14bc8:	f7fd f970 	bl	11eac <_write>
   14bcc:	1c43      	adds	r3, r0, #1
   14bce:	d103      	bne.n	14bd8 <_write_r+0x20>
   14bd0:	6823      	ldr	r3, [r4, #0]
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d000      	beq.n	14bd8 <_write_r+0x20>
   14bd6:	602b      	str	r3, [r5, #0]
   14bd8:	bd70      	pop	{r4, r5, r6, pc}
   14bda:	46c0      	nop			; (mov r8, r8)
   14bdc:	200010a0 	.word	0x200010a0

00014be0 <_close_r>:
   14be0:	2300      	movs	r3, #0
   14be2:	b570      	push	{r4, r5, r6, lr}
   14be4:	4c06      	ldr	r4, [pc, #24]	; (14c00 <_close_r+0x20>)
   14be6:	0005      	movs	r5, r0
   14be8:	0008      	movs	r0, r1
   14bea:	6023      	str	r3, [r4, #0]
   14bec:	f7fd f990 	bl	11f10 <_close>
   14bf0:	1c43      	adds	r3, r0, #1
   14bf2:	d103      	bne.n	14bfc <_close_r+0x1c>
   14bf4:	6823      	ldr	r3, [r4, #0]
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d000      	beq.n	14bfc <_close_r+0x1c>
   14bfa:	602b      	str	r3, [r5, #0]
   14bfc:	bd70      	pop	{r4, r5, r6, pc}
   14bfe:	46c0      	nop			; (mov r8, r8)
   14c00:	200010a0 	.word	0x200010a0

00014c04 <_fstat_r>:
   14c04:	2300      	movs	r3, #0
   14c06:	b570      	push	{r4, r5, r6, lr}
   14c08:	4c06      	ldr	r4, [pc, #24]	; (14c24 <_fstat_r+0x20>)
   14c0a:	0005      	movs	r5, r0
   14c0c:	0008      	movs	r0, r1
   14c0e:	0011      	movs	r1, r2
   14c10:	6023      	str	r3, [r4, #0]
   14c12:	f7fd f981 	bl	11f18 <_fstat>
   14c16:	1c43      	adds	r3, r0, #1
   14c18:	d103      	bne.n	14c22 <_fstat_r+0x1e>
   14c1a:	6823      	ldr	r3, [r4, #0]
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d000      	beq.n	14c22 <_fstat_r+0x1e>
   14c20:	602b      	str	r3, [r5, #0]
   14c22:	bd70      	pop	{r4, r5, r6, pc}
   14c24:	200010a0 	.word	0x200010a0

00014c28 <_isatty_r>:
   14c28:	2300      	movs	r3, #0
   14c2a:	b570      	push	{r4, r5, r6, lr}
   14c2c:	4c06      	ldr	r4, [pc, #24]	; (14c48 <_isatty_r+0x20>)
   14c2e:	0005      	movs	r5, r0
   14c30:	0008      	movs	r0, r1
   14c32:	6023      	str	r3, [r4, #0]
   14c34:	f7fd f976 	bl	11f24 <_isatty>
   14c38:	1c43      	adds	r3, r0, #1
   14c3a:	d103      	bne.n	14c44 <_isatty_r+0x1c>
   14c3c:	6823      	ldr	r3, [r4, #0]
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d000      	beq.n	14c44 <_isatty_r+0x1c>
   14c42:	602b      	str	r3, [r5, #0]
   14c44:	bd70      	pop	{r4, r5, r6, pc}
   14c46:	46c0      	nop			; (mov r8, r8)
   14c48:	200010a0 	.word	0x200010a0

00014c4c <_lseek_r>:
   14c4c:	b570      	push	{r4, r5, r6, lr}
   14c4e:	0005      	movs	r5, r0
   14c50:	0008      	movs	r0, r1
   14c52:	0011      	movs	r1, r2
   14c54:	2200      	movs	r2, #0
   14c56:	4c06      	ldr	r4, [pc, #24]	; (14c70 <_lseek_r+0x24>)
   14c58:	6022      	str	r2, [r4, #0]
   14c5a:	001a      	movs	r2, r3
   14c5c:	f7fd f964 	bl	11f28 <_lseek>
   14c60:	1c43      	adds	r3, r0, #1
   14c62:	d103      	bne.n	14c6c <_lseek_r+0x20>
   14c64:	6823      	ldr	r3, [r4, #0]
   14c66:	2b00      	cmp	r3, #0
   14c68:	d000      	beq.n	14c6c <_lseek_r+0x20>
   14c6a:	602b      	str	r3, [r5, #0]
   14c6c:	bd70      	pop	{r4, r5, r6, pc}
   14c6e:	46c0      	nop			; (mov r8, r8)
   14c70:	200010a0 	.word	0x200010a0

00014c74 <memchr>:
   14c74:	b2c9      	uxtb	r1, r1
   14c76:	1882      	adds	r2, r0, r2
   14c78:	4290      	cmp	r0, r2
   14c7a:	d101      	bne.n	14c80 <memchr+0xc>
   14c7c:	2000      	movs	r0, #0
   14c7e:	4770      	bx	lr
   14c80:	7803      	ldrb	r3, [r0, #0]
   14c82:	428b      	cmp	r3, r1
   14c84:	d0fb      	beq.n	14c7e <memchr+0xa>
   14c86:	3001      	adds	r0, #1
   14c88:	e7f6      	b.n	14c78 <memchr+0x4>

00014c8a <_realloc_r>:
   14c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c8c:	0007      	movs	r7, r0
   14c8e:	000d      	movs	r5, r1
   14c90:	0016      	movs	r6, r2
   14c92:	2900      	cmp	r1, #0
   14c94:	d105      	bne.n	14ca2 <_realloc_r+0x18>
   14c96:	0011      	movs	r1, r2
   14c98:	f7fe fcea 	bl	13670 <_malloc_r>
   14c9c:	0004      	movs	r4, r0
   14c9e:	0020      	movs	r0, r4
   14ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ca2:	2a00      	cmp	r2, #0
   14ca4:	d103      	bne.n	14cae <_realloc_r+0x24>
   14ca6:	f7fe fc99 	bl	135dc <_free_r>
   14caa:	0034      	movs	r4, r6
   14cac:	e7f7      	b.n	14c9e <_realloc_r+0x14>
   14cae:	f000 f827 	bl	14d00 <_malloc_usable_size_r>
   14cb2:	002c      	movs	r4, r5
   14cb4:	4286      	cmp	r6, r0
   14cb6:	d9f2      	bls.n	14c9e <_realloc_r+0x14>
   14cb8:	0031      	movs	r1, r6
   14cba:	0038      	movs	r0, r7
   14cbc:	f7fe fcd8 	bl	13670 <_malloc_r>
   14cc0:	1e04      	subs	r4, r0, #0
   14cc2:	d0ec      	beq.n	14c9e <_realloc_r+0x14>
   14cc4:	0029      	movs	r1, r5
   14cc6:	0032      	movs	r2, r6
   14cc8:	f7fe fc64 	bl	13594 <memcpy>
   14ccc:	0029      	movs	r1, r5
   14cce:	0038      	movs	r0, r7
   14cd0:	f7fe fc84 	bl	135dc <_free_r>
   14cd4:	e7e3      	b.n	14c9e <_realloc_r+0x14>
	...

00014cd8 <_read_r>:
   14cd8:	b570      	push	{r4, r5, r6, lr}
   14cda:	0005      	movs	r5, r0
   14cdc:	0008      	movs	r0, r1
   14cde:	0011      	movs	r1, r2
   14ce0:	2200      	movs	r2, #0
   14ce2:	4c06      	ldr	r4, [pc, #24]	; (14cfc <_read_r+0x24>)
   14ce4:	6022      	str	r2, [r4, #0]
   14ce6:	001a      	movs	r2, r3
   14ce8:	f7fd f8be 	bl	11e68 <_read>
   14cec:	1c43      	adds	r3, r0, #1
   14cee:	d103      	bne.n	14cf8 <_read_r+0x20>
   14cf0:	6823      	ldr	r3, [r4, #0]
   14cf2:	2b00      	cmp	r3, #0
   14cf4:	d000      	beq.n	14cf8 <_read_r+0x20>
   14cf6:	602b      	str	r3, [r5, #0]
   14cf8:	bd70      	pop	{r4, r5, r6, pc}
   14cfa:	46c0      	nop			; (mov r8, r8)
   14cfc:	200010a0 	.word	0x200010a0

00014d00 <_malloc_usable_size_r>:
   14d00:	1f0b      	subs	r3, r1, #4
   14d02:	681b      	ldr	r3, [r3, #0]
   14d04:	1f18      	subs	r0, r3, #4
   14d06:	2b00      	cmp	r3, #0
   14d08:	da01      	bge.n	14d0e <_malloc_usable_size_r+0xe>
   14d0a:	580b      	ldr	r3, [r1, r0]
   14d0c:	18c0      	adds	r0, r0, r3
   14d0e:	4770      	bx	lr

00014d10 <_tcc_cc_nums>:
   14d10:	0204 0002                                   ....

00014d14 <_tcc_gclk_ids>:
   14d14:	1a1a 001b                                   ....

00014d18 <_tcc_maxs>:
   14d18:	ffff 00ff ffff 00ff ffff 0000               ............

00014d24 <_tcc_ow_nums>:
   14d24:	0408 0002                                   ....

00014d28 <_tcc_intflag>:
   14d28:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   14d38:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   14d48:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00014d58 <tcc_interrupt_vectors.12434>:
   14d58:	100f 0011 96c0 0000 96ba 0000 96b4 0000     ................
   14d68:	969c 0000 9692 0000 9696 0000 9692 0000     ................
   14d78:	9686 0000 96ae 0000 9692 0000 9686 0000     ................
   14d88:	9686 0000 96de 0000 96e4 0000 9696 0000     ................
   14d98:	96d8 0000 96d2 0000 96cc 0000 96c6 0000     ................
   14da8:	9674 0000 9674 0000 9674 0000 9680 0000     t...t...t.......
   14db8:	96a8 0000 9674 0000 9680 0000 9680 0000     ....t...........
   14dc8:	96a2 0000 96f6 0000 9726 0000 9720 0000     ........&... ...
   14dd8:	971a 0000 9708 0000 972c 0000 96fc 0000     ........,.......
   14de8:	972c 0000 96ea 0000 9702 0000 972c 0000     ,...........,...
   14df8:	96ea 0000 96ea 0000 970e 0000 9714 0000     ................
   14e08:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   14e18:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
   14e28:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
   14e38:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
   14e48:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   14e58:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   14e68:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   14e78:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   14e88:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   14e98:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
   14ea8:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
   14eb8:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
   14ec8:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
   14ed8:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
   14ee8:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
   14ef8:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
   14f08:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
   14f18:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
   14f28:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
   14f38:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
   14f48:	2800 4200 9e78 0000 9e66 0000 9e80 0000     .(.Bx...f.......
   14f58:	9e1c 0000 9e3e 0000 7468 7074 635f 696c     ....>...http_cli
   14f68:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   14f78:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   14f88:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
   14f98:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   14fa8:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   14fb8:	706d 656c 6574 2e64 000d 0000 7468 7074     mpleted.....http
   14fc8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   14fd8:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   14fe8:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   14ff8:	2520 0d75 000a 0000 7473 726f 5f65 6966      %u.....store_fi
   15008:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   15018:	6420 7461 2e61 000d 7468 7074 635f 696c      data...http_cli
   15028:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   15038:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   15048:	6e6f 253a 0d64 000a 6f63 666e 6769 7275     on:%d...configur
   15058:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   15068:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   15078:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   15088:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   15098:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   150a8:	4320 7261 2064 6e69 7473 6c61 206c 6166      Card install fa
   150b8:	6c69 6465 0d2e 0000 6e69 7469 735f 6f74     iled....init_sto
   150c8:	6172 6567 203a 7274 2079 6e75 6c70 6775     rage: try unplug
   150d8:	6120 646e 7220 2d65 6c70 6775 7420 6568      and re-plug the
   150e8:	6320 7261 2e64 000d 6e69 7469 735f 6f74      card...init_sto
   150f8:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   15108:	2044 6163 6472 2e2e 0d2e 0000 6e69 7469     D card......init
   15118:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   15128:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   15138:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   15148:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   15158:	2064 6f6d 6e75 2074 4b4f 0d2e 0000 0000     d mount OK......
   15168:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   15178:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   15188:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   15198:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   151a8:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   151b8:	616d 6e69 203a 6c70 6165 6573 7520 706e     main: please unp
   151c8:	756c 2067 6874 2065 4453 4d2f 434d 6320     lug the SD/MMC c
   151d8:	7261 2e64 000d 0000 616d 6e69 203a 6f64     ard.....main: do
   151e8:	656e 0d2e 0000 0000 3025 6433 0000 0000     ne......%03d....
   151f8:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   15208:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   15218:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   15228:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   15238:	4d4d 2043 7473 726f 6761 2065 6f6e 2074     MMC storage not 
   15248:	6572 6461 2e79 000d 7473 7261 5f74 6f64     ready...start_do
   15258:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   15268:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   15278:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   15288:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   15298:	6e65 2074 6c61 6572 6461 2e79 000d 0000     ent already.....
   152a8:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   152b8:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   152c8:	6120 726c 6165 7964 0d2e 0000 7473 7261      already....star
   152d8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   152e8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   152f8:	2e2e 0d2e 0000 0000 7468 7074 2f3a 772f     ........http://w
   15308:	7777 732e 6165 2e73 7075 6e65 2e6e 6465     ww.seas.upenn.ed
   15318:	2f75 707e 7261 6170 6574 2f6c 6473 695f     u/~parpatel/sd_i
   15328:	616d 6567 622e 6e69 0000 0000 7473 726f     mage.bin....stor
   15338:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   15348:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   15358:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   15368:	6361 656b 3a74 6620 6c69 2065 616e 656d     acket: file name
   15378:	6920 2073 6e69 6176 696c 2e64 4420 776f      is invalid. Dow
   15388:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   15398:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   153a8:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   153b8:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   153c8:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   153d8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   153e8:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   153f8:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   15408:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   15418:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   15428:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   15438:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   15448:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   15458:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   15468:	7373 7566 6c6c 2e79 000d 0000 6977 6966     ssfully.....wifi
   15478:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   15488:	4e4e 4345 4554 0d44 0000 0000 6977 6966     NNECTED.....wifi
   15498:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   154a8:	4353 4e4f 454e 5443 4445 000d 6557 636c     SCONNECTED..Welc
   154b8:	6d6f 4865 6c61 0000 7068 732d 7465 7075     omeHal..hp-setup
   154c8:	312d 0000 6977 6966 635f 3a62 4920 2050     -1..wifi_cb: IP 
   154d8:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   154e8:	252e 2e75 7525 0a0d 0000 0000               .%u.%u......

000154f4 <mmc_trans_multipliers>:
   154f4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   15504:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   15514:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   15524:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00015534 <sd_mmc_trans_units>:
   15534:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00015550 <sd_trans_multipliers>:
   15550:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   15560:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   15570:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   15580:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00015590 <__FUNCTION__.15277>:
   15590:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   155a0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   155b0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   155c0:	746c 6320 646d 0000 bb2c 0000 bafc 0000     lt cmd..,.......
   155d0:	bb04 0000 bb0c 0000 bb14 0000 bb1c 0000     ................
   155e0:	bb24 0000 baf4 0000                         $.......

000155e8 <__FUNCTION__.13058>:
   155e8:	6968 5f66 6573 646e 0000 0000               hif_send....

000155f4 <__FUNCTION__.13068>:
   155f4:	6968 5f66 7369 0072                         hif_isr.

000155fc <__FUNCTION__.13074>:
   155fc:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0001560c <__FUNCTION__.13086>:
   1560c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00015618 <__FUNCTION__.13102>:
   15618:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   15628:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   15638:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   15648:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   15658:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   15668:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   15678:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   15688:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   15698:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   156a8:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   156b8:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   156c8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   156d8:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   156e8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   156f8:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   15708:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   15718:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   15728:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   15738:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   15748:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   15758:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   15768:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   15778:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   15788:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   15798:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   157a8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   157b8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   157c8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   157d8:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   157e8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   157f8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   15808:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   15818:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   15828:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   15838:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   15848:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   15858:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   15868:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   15878:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   15888:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   15898:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   158a8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   158b8:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   158c8:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   158d8:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   158e8:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   158f8:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00015908 <__FUNCTION__.13037>:
   15908:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00015914 <__FUNCTION__.13066>:
   15914:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00015924 <__FUNCTION__.13094>:
   15924:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   15934:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   15944:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   15954:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   15964:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   15974:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   15984:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   15994:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   159a4:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   159b4:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   159c4:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   159d4:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   159e4:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   159f4:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   15a04:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   15a14:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   15a24:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   15a34:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   15a44:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   15a54:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   15a64:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   15a74:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   15a84:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   15a94:	3230 313a 3a39 3033 0000 0000 7041 2072     02:19:30....Apr 
   15aa4:	3831 3220 3130 0037 7244 7669 7265 6220     18 2017.Driver b
   15ab4:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   15ac4:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   15ad4:	2065 6556 7372 6f69 006e 0000               e Version...

00015ae0 <__FUNCTION__.12900>:
   15ae0:	6863 7069 775f 6b61 0065 0000               chip_wake...

00015aec <__FUNCTION__.12949>:
   15aec:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   15afc:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   15b0c:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   15b1c:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   15b2c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   15b3c:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   15b4c:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00015b5c <__FUNCTION__.12947>:
   15b5c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00015b68 <__FUNCTION__.12954>:
   15b68:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   15b78:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   15b88:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   15b98:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   15ba8:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   15bb8:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   15bc8:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   15bd8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   15be8:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   15bf8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   15c08:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   15c18:	4920 2044 6c25 0a78 0000 0000 ca6c 0000      ID %lx.....l...
   15c28:	ca6c 0000 ca82 0000 caa8 0000 c9ae 0000     l...............
   15c38:	c9ae 0000 ca24 0000 ca24 0000 ca3e 0000     ....$...$...>...
   15c48:	ca5c 0000 cac6 0000 cac6 0000 cac6 0000     \...............
   15c58:	cac6 0000 ca20 0000 2000 c9c3 cac4 0000     .... .... ......

00015c68 <__FUNCTION__.12253>:
   15c68:	7073 5f69 6d63 0064                         spi_cmd.

00015c70 <__FUNCTION__.12260>:
   15c70:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00015c80 <__FUNCTION__.12269>:
   15c80:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00015c8c <__FUNCTION__.12285>:
   15c8c:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00015c9c <__FUNCTION__.12300>:
   15c9c:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00015cac <__FUNCTION__.12312>:
   15cac:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00015cbc <__FUNCTION__.12323>:
   15cbc:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00015ccc <__FUNCTION__.12335>:
   15ccc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00015cdc <__FUNCTION__.12348>:
   15cdc:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00015ce8 <__FUNCTION__.12369>:
   15ce8:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00015cf4 <crc7_syndrome_table>:
   15cf4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   15d04:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   15d14:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   15d24:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   15d34:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   15d44:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   15d54:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   15d64:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   15d74:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   15d84:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   15d94:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   15da4:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   15db4:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   15dc4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   15dd4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   15de4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   15df4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   15e04:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   15e14:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   15e24:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   15e34:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   15e44:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   15e54:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   15e64:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   15e74:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   15e84:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   15e94:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   15ea4:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   15eb4:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   15ec4:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   15ed4:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   15ee4:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   15ef4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   15f04:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   15f14:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   15f24:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   15f34:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   15f44:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   15f54:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   15f64:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   15f74:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   15f84:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   15f94:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   15fa4:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   15fb4:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   15fc4:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   15fd4:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   15fe4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   15ff4:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   16004:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   16014:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16024:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   16034:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   16044:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16054:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   16064:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   16074:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   16084:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   16094:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   160a4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   160b4:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   160c4:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   160d4:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   160e4:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   160f4:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16104:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   16114:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   16124:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16134:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   16144:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   16154:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16164:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   16174:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   16184:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   16194:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   161a4:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   161b4:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   161c4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   161d4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   161e4:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   161f4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   16204:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   16214:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   16224:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   16234:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   16244:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   16254:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   16264:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   16274:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   16284:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   16294:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   162a4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   162b4:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   162c4:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   162d4:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   162e4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   162f4:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   16304:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   16314:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   16324:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   16334:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   16344:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   16354:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   16364:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   16374:	206e 4449 3d20 2520 0d64 000a 3231 2e2e     n ID = %d...12..
   16384:	452e 0046 0800 4200 0c00 4200 1000 4200     .EF....B...B...B
   16394:	1400 4200 1800 4200 1c00 4200 fc1e 0000     ...B...B...B....
   163a4:	fc36 0000 fc36 0000 fbe6 0000 fbe6 0000     6...6...........
   163b4:	fbec 0000 fbf2 0000 fc00 0000 fc24 0000     ............$...
   163c4:	1310 0001 131e 0001 1396 0001 12d2 0001     ................
   163d4:	12f2 0001                                   ....

000163d8 <_usb_device_irq_bits>:
   163d8:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

000163e8 <_usb_endpoint_irq_bits>:
   163e8:	0c03 6010 2a22 2c2b 3b3a 3d3c 3f3e 5d5b     ...`"*+,:;<=>?[]
   163f8:	7f7c 0000                                   |...

000163fc <_global_impure_ptr>:
   163fc:	0200 2000                                   ... 

00016400 <__sf_fake_stderr>:
	...

00016420 <__sf_fake_stdin>:
	...

00016440 <__sf_fake_stdout>:
	...
   16460:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   16470:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   16480:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   16490:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0001649d <_ctype_>:
   1649d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   164ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   164bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   164cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   164dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   164ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   164fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1650d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1651d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000165a0 <_init>:
   165a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165a2:	46c0      	nop			; (mov r8, r8)
   165a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   165a6:	bc08      	pop	{r3}
   165a8:	469e      	mov	lr, r3
   165aa:	4770      	bx	lr

000165ac <__init_array_start>:
   165ac:	000080dd 	.word	0x000080dd

000165b0 <_fini>:
   165b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165b2:	46c0      	nop			; (mov r8, r8)
   165b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   165b6:	bc08      	pop	{r3}
   165b8:	469e      	mov	lr, r3
   165ba:	4770      	bx	lr

000165bc <__fini_array_start>:
   165bc:	000080b5 	.word	0x000080b5
