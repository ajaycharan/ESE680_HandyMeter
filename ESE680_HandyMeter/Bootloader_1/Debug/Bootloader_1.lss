
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011de4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000304  00011de4  00011de4  00021de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  000120e8  000120e8  000220e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000184  20000000  000120f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000008f8  20000184  00012278  00030184  2**2
                  ALLOC
  5 .stack        00002004  20000a7c  00012b70  00030184  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000301ae  2**0
                  CONTENTS, READONLY
  8 .debug_info   00055477  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006a42  00000000  00000000  0008567e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000077fe  00000000  00000000  0008c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001538  00000000  00000000  000938be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012d8  00000000  00000000  00094df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000df79  00000000  00000000  000960ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000bbdf  00000000  00000000  000a4047  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000050d8  00000000  00000000  000afc28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 2a 00 20 e9 03 01 00 f9 04 01 00 f9 04 01 00     .*. ............
	...
      2c:	f9 04 01 00 00 00 00 00 00 00 00 00 f9 04 01 00     ................
      3c:	f9 04 01 00 f9 04 01 00 39 51 00 00 f9 04 01 00     ........9Q......
      4c:	39 1f 00 00 4d 98 00 00 f9 04 01 00 f9 04 01 00     9...M...........
      5c:	dd e9 00 00 f9 04 01 00 a1 96 00 00 b9 96 00 00     ................
      6c:	d1 96 00 00 e9 96 00 00 01 97 00 00 19 97 00 00     ................
      7c:	f9 04 01 00 f9 04 01 00 f9 04 01 00 f9 04 01 00     ................
      8c:	f9 04 01 00 f9 04 01 00 00 00 00 00 00 00 00 00     ................
      9c:	f9 04 01 00 f9 04 01 00 f9 04 01 00 f9 04 01 00     ................
      ac:	f9 04 01 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000184 	.word	0x20000184
      d4:	00000000 	.word	0x00000000
      d8:	00011de4 	.word	0x00011de4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000188 	.word	0x20000188
     108:	00011de4 	.word	0x00011de4
     10c:	00011de4 	.word	0x00011de4
     110:	00000000 	.word	0x00000000

00000114 <SDMMC_UNSTUFF_BITS>:
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
     114:	b590      	push	{r4, r7, lr}
     116:	b087      	sub	sp, #28
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	000c      	movs	r4, r1
     11e:	0010      	movs	r0, r2
     120:	0019      	movs	r1, r3
     122:	230a      	movs	r3, #10
     124:	18fb      	adds	r3, r7, r3

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     126:	1c22      	adds	r2, r4, #0
     128:	801a      	strh	r2, [r3, #0]
     12a:	2308      	movs	r3, #8
     12c:	18fb      	adds	r3, r7, r3
     12e:	1c02      	adds	r2, r0, #0
     130:	801a      	strh	r2, [r3, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	1c0a      	adds	r2, r1, #0
		if (!sd_mmc_cmd9_mci()) {
     136:	701a      	strb	r2, [r3, #0]
     138:	230a      	movs	r3, #10
     13a:	18fb      	adds	r3, r7, r3
     13c:	881a      	ldrh	r2, [r3, #0]
     13e:	2308      	movs	r3, #8
     140:	18fb      	adds	r3, r7, r3
     142:	881b      	ldrh	r3, [r3, #0]
     144:	1ad3      	subs	r3, r2, r3
     146:	3307      	adds	r3, #7
     148:	2b00      	cmp	r3, #0
			return false;
     14a:	da00      	bge.n	14e <SDMMC_UNSTUFF_BITS+0x3a>
     14c:	3307      	adds	r3, #7
		}
		sd_decode_csd();
     14e:	10db      	asrs	r3, r3, #3
     150:	3b01      	subs	r3, #1
     152:	68fa      	ldr	r2, [r7, #12]
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
     154:	18d3      	adds	r3, r2, r3
     156:	781b      	ldrb	r3, [r3, #0]
     158:	0019      	movs	r1, r3
     15a:	2308      	movs	r3, #8
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
     15c:	18fb      	adds	r3, r7, r3
     15e:	881b      	ldrh	r3, [r3, #0]
     160:	2207      	movs	r2, #7
     162:	4013      	ands	r3, r2
     164:	4119      	asrs	r1, r3
     166:	000b      	movs	r3, r1
     168:	617b      	str	r3, [r7, #20]
     16a:	2308      	movs	r3, #8
     16c:	18fb      	adds	r3, r7, r3
     16e:	881b      	ldrh	r3, [r3, #0]
     170:	2207      	movs	r2, #7
     172:	401a      	ands	r2, r3
     174:	1dfb      	adds	r3, r7, #7
     176:	781b      	ldrb	r3, [r3, #0]
		return false;
     178:	18d3      	adds	r3, r2, r3
     17a:	2b08      	cmp	r3, #8
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     17c:	dd1c      	ble.n	1b8 <SDMMC_UNSTUFF_BITS+0xa4>
     17e:	230a      	movs	r3, #10
     180:	18fb      	adds	r3, r7, r3
     182:	881a      	ldrh	r2, [r3, #0]
     184:	2308      	movs	r3, #8
     186:	18fb      	adds	r3, r7, r3
     188:	881b      	ldrh	r3, [r3, #0]
     18a:	1ad3      	subs	r3, r2, r3
		if (!sd_acmd51()) {
     18c:	3307      	adds	r3, #7
     18e:	2b00      	cmp	r3, #0
     190:	da00      	bge.n	194 <SDMMC_UNSTUFF_BITS+0x80>
     192:	3307      	adds	r3, #7
     194:	10db      	asrs	r3, r3, #3
     196:	3b02      	subs	r3, #2
     198:	68fa      	ldr	r2, [r7, #12]
     19a:	18d3      	adds	r3, r2, r3
     19c:	781b      	ldrb	r3, [r3, #0]
     19e:	0019      	movs	r1, r3
			return false;
     1a0:	2308      	movs	r3, #8
     1a2:	18fb      	adds	r3, r7, r3
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
     1a4:	881b      	ldrh	r3, [r3, #0]
     1a6:	2207      	movs	r2, #7
     1a8:	4013      	ands	r3, r2
     1aa:	2208      	movs	r2, #8
     1ac:	1ad3      	subs	r3, r2, r3
     1ae:	4099      	lsls	r1, r3
     1b0:	000b      	movs	r3, r1
     1b2:	697a      	ldr	r2, [r7, #20]
     1b4:	4313      	orrs	r3, r2
     1b6:	617b      	str	r3, [r7, #20]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1b8:	2308      	movs	r3, #8
     1ba:	18fb      	adds	r3, r7, r3
     1bc:	881b      	ldrh	r3, [r3, #0]
     1be:	2207      	movs	r2, #7
     1c0:	401a      	ands	r2, r3
     1c2:	1dfb      	adds	r3, r7, #7
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	18d3      	adds	r3, r2, r3
			if (!sd_acmd6()) {
     1c8:	2b10      	cmp	r3, #16
     1ca:	dd1c      	ble.n	206 <SDMMC_UNSTUFF_BITS+0xf2>
     1cc:	230a      	movs	r3, #10
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	881a      	ldrh	r2, [r3, #0]
     1d2:	2308      	movs	r3, #8
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	881b      	ldrh	r3, [r3, #0]
     1d8:	1ad3      	subs	r3, r2, r3
     1da:	3307      	adds	r3, #7
				return false;
     1dc:	2b00      	cmp	r3, #0
     1de:	da00      	bge.n	1e2 <SDMMC_UNSTUFF_BITS+0xce>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
     1e0:	3307      	adds	r3, #7
     1e2:	10db      	asrs	r3, r3, #3
     1e4:	3b03      	subs	r3, #3
	}
	if (driver_is_high_speed_capable()) {
     1e6:	68fa      	ldr	r2, [r7, #12]
     1e8:	18d3      	adds	r3, r2, r3
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	0019      	movs	r1, r3
     1ee:	2308      	movs	r3, #8
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	881b      	ldrh	r3, [r3, #0]
     1f4:	2207      	movs	r2, #7
     1f6:	4013      	ands	r3, r2
     1f8:	2210      	movs	r2, #16
     1fa:	1ad3      	subs	r3, r2, r3
     1fc:	4099      	lsls	r1, r3
     1fe:	000b      	movs	r3, r1
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
     200:	697a      	ldr	r2, [r7, #20]
     202:	4313      	orrs	r3, r2
     204:	617b      	str	r3, [r7, #20]
     206:	2308      	movs	r3, #8
     208:	18fb      	adds	r3, r7, r3
     20a:	881b      	ldrh	r3, [r3, #0]
				if (!sd_cm6_set_high_speed()) {
     20c:	2207      	movs	r2, #7
     20e:	401a      	ands	r2, r3
     210:	1dfb      	adds	r3, r7, #7
     212:	781b      	ldrb	r3, [r3, #0]
     214:	18d3      	adds	r3, r2, r3
     216:	2b10      	cmp	r3, #16
     218:	dd1c      	ble.n	254 <SDMMC_UNSTUFF_BITS+0x140>
     21a:	230a      	movs	r3, #10
     21c:	18fb      	adds	r3, r7, r3
     21e:	881a      	ldrh	r2, [r3, #0]
					return false;
     220:	2308      	movs	r3, #8
     222:	18fb      	adds	r3, r7, r3
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
     224:	881b      	ldrh	r3, [r3, #0]
     226:	1ad3      	subs	r3, r2, r3
     228:	3307      	adds	r3, #7
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     22a:	2b00      	cmp	r3, #0
     22c:	da00      	bge.n	230 <SDMMC_UNSTUFF_BITS+0x11c>
     22e:	3307      	adds	r3, #7
     230:	10db      	asrs	r3, r3, #3
     232:	3b03      	subs	r3, #3
     234:	68fa      	ldr	r2, [r7, #12]
     236:	18d3      	adds	r3, r2, r3
     238:	781b      	ldrb	r3, [r3, #0]
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     23a:	0019      	movs	r1, r3
     23c:	2308      	movs	r3, #8
     23e:	18fb      	adds	r3, r7, r3
     240:	881b      	ldrh	r3, [r3, #0]
     242:	2207      	movs	r2, #7
     244:	4013      	ands	r3, r2
     246:	2210      	movs	r2, #16
     248:	1ad3      	subs	r3, r2, r3
     24a:	4099      	lsls	r1, r3
     24c:	000b      	movs	r3, r1
     24e:	697a      	ldr	r2, [r7, #20]
     250:	4313      	orrs	r3, r2
     252:	617b      	str	r3, [r7, #20]
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
			return false;
     258:	2201      	movs	r2, #1
     25a:	409a      	lsls	r2, r3
		}
	}
	return true;
     25c:	0013      	movs	r3, r2
}
     25e:	1e5a      	subs	r2, r3, #1
     260:	697b      	ldr	r3, [r7, #20]
     262:	4013      	ands	r3, r2
     264:	617b      	str	r3, [r7, #20]
     266:	697b      	ldr	r3, [r7, #20]
     268:	0018      	movs	r0, r3
     26a:	46bd      	mov	sp, r7
     26c:	b007      	add	sp, #28
     26e:	bd90      	pop	{r4, r7, pc}

00000270 <mmc_spi_op_cond>:
     270:	b590      	push	{r4, r7, lr}
     272:	b083      	sub	sp, #12
     274:	af00      	add	r7, sp, #0
     276:	4c27      	ldr	r4, [pc, #156]	; (314 <mmc_spi_op_cond+0xa4>)
     278:	447c      	add	r4, pc
     27a:	4b27      	ldr	r3, [pc, #156]	; (318 <mmc_spi_op_cond+0xa8>)
     27c:	607b      	str	r3, [r7, #4]
     27e:	4b27      	ldr	r3, [pc, #156]	; (31c <mmc_spi_op_cond+0xac>)
     280:	2100      	movs	r1, #0
     282:	0018      	movs	r0, r3
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <mmc_spi_op_cond+0xb0>)
     286:	58e3      	ldr	r3, [r4, r3]
     288:	4798      	blx	r3
     28a:	0003      	movs	r3, r0
     28c:	001a      	movs	r2, r3
     28e:	2301      	movs	r3, #1
     290:	4053      	eors	r3, r2
     292:	b2db      	uxtb	r3, r3
     294:	2b00      	cmp	r3, #0
     296:	d001      	beq.n	29c <mmc_spi_op_cond+0x2c>
     298:	2300      	movs	r3, #0
     29a:	e036      	b.n	30a <mmc_spi_op_cond+0x9a>
     29c:	4b21      	ldr	r3, [pc, #132]	; (324 <mmc_spi_op_cond+0xb4>)
     29e:	58e3      	ldr	r3, [r4, r3]
     2a0:	4798      	blx	r3
     2a2:	0003      	movs	r3, r0
     2a4:	603b      	str	r3, [r7, #0]
     2a6:	683b      	ldr	r3, [r7, #0]
     2a8:	2201      	movs	r2, #1
     2aa:	4013      	ands	r3, r2
     2ac:	d006      	beq.n	2bc <mmc_spi_op_cond+0x4c>
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	1e5a      	subs	r2, r3, #1
     2b2:	607a      	str	r2, [r7, #4]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d1e2      	bne.n	27e <mmc_spi_op_cond+0xe>
     2b8:	2300      	movs	r3, #0
     2ba:	e026      	b.n	30a <mmc_spi_op_cond+0x9a>
     2bc:	46c0      	nop			; (mov r8, r8)
     2be:	4b1a      	ldr	r3, [pc, #104]	; (328 <mmc_spi_op_cond+0xb8>)
     2c0:	2100      	movs	r1, #0
     2c2:	0018      	movs	r0, r3
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <mmc_spi_op_cond+0xb0>)
     2c6:	58e3      	ldr	r3, [r4, r3]
     2c8:	4798      	blx	r3
     2ca:	0003      	movs	r3, r0
     2cc:	001a      	movs	r2, r3
     2ce:	2301      	movs	r3, #1
     2d0:	4053      	eors	r3, r2
     2d2:	b2db      	uxtb	r3, r3
     2d4:	2b00      	cmp	r3, #0
     2d6:	d001      	beq.n	2dc <mmc_spi_op_cond+0x6c>
     2d8:	2300      	movs	r3, #0
     2da:	e016      	b.n	30a <mmc_spi_op_cond+0x9a>
     2dc:	4b11      	ldr	r3, [pc, #68]	; (324 <mmc_spi_op_cond+0xb4>)
     2de:	58e3      	ldr	r3, [r4, r3]
     2e0:	4798      	blx	r3
     2e2:	0002      	movs	r2, r0
     2e4:	23c0      	movs	r3, #192	; 0xc0
     2e6:	05db      	lsls	r3, r3, #23
     2e8:	401a      	ands	r2, r3
     2ea:	2380      	movs	r3, #128	; 0x80
     2ec:	05db      	lsls	r3, r3, #23
     2ee:	429a      	cmp	r2, r3
     2f0:	d10a      	bne.n	308 <mmc_spi_op_cond+0x98>
     2f2:	4b0e      	ldr	r3, [pc, #56]	; (32c <mmc_spi_op_cond+0xbc>)
     2f4:	447b      	add	r3, pc
     2f6:	681a      	ldr	r2, [r3, #0]
		sd_mmc_card->type |= CARD_TYPE_HC;
     2f8:	4b0d      	ldr	r3, [pc, #52]	; (330 <mmc_spi_op_cond+0xc0>)
     2fa:	447b      	add	r3, pc
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	7adb      	ldrb	r3, [r3, #11]
     300:	2108      	movs	r1, #8
     302:	430b      	orrs	r3, r1
     304:	b2db      	uxtb	r3, r3
     306:	72d3      	strb	r3, [r2, #11]
	return true;
     308:	2301      	movs	r3, #1
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b003      	add	sp, #12
     310:	bd90      	pop	{r4, r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00011b68 	.word	0x00011b68
     318:	00001bee 	.word	0x00001bee
     31c:	00001101 	.word	0x00001101
     320:	00000264 	.word	0x00000264
     324:	00000298 	.word	0x00000298
     328:	0000053a 	.word	0x0000053a
     32c:	1ffffecc 	.word	0x1ffffecc
     330:	1ffffec6 	.word	0x1ffffec6

00000334 <sd_spi_op_cond>:
{
     334:	b590      	push	{r4, r7, lr}
     336:	b087      	sub	sp, #28
     338:	af00      	add	r7, sp, #0
     33a:	0002      	movs	r2, r0
     33c:	1dfb      	adds	r3, r7, #7
     33e:	701a      	strb	r2, [r3, #0]
     340:	4c32      	ldr	r4, [pc, #200]	; (40c <sd_spi_op_cond+0xd8>)
     342:	447c      	add	r4, pc
	retry = 7150;
     344:	4b32      	ldr	r3, [pc, #200]	; (410 <sd_spi_op_cond+0xdc>)
     346:	613b      	str	r3, [r7, #16]
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     348:	4b32      	ldr	r3, [pc, #200]	; (414 <sd_spi_op_cond+0xe0>)
     34a:	2100      	movs	r1, #0
     34c:	0018      	movs	r0, r3
     34e:	4b32      	ldr	r3, [pc, #200]	; (418 <sd_spi_op_cond+0xe4>)
     350:	58e3      	ldr	r3, [r4, r3]
     352:	4798      	blx	r3
     354:	0003      	movs	r3, r0
     356:	001a      	movs	r2, r3
     358:	2301      	movs	r3, #1
     35a:	4053      	eors	r3, r2
     35c:	b2db      	uxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	d001      	beq.n	366 <sd_spi_op_cond+0x32>
			return false;
     362:	2300      	movs	r3, #0
     364:	e04e      	b.n	404 <sd_spi_op_cond+0xd0>
		arg = 0;
     366:	2300      	movs	r3, #0
     368:	617b      	str	r3, [r7, #20]
		if (v2) {
     36a:	1dfb      	adds	r3, r7, #7
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b00      	cmp	r3, #0
     370:	d004      	beq.n	37c <sd_spi_op_cond+0x48>
			arg |= SD_ACMD41_HCS;
     372:	697b      	ldr	r3, [r7, #20]
     374:	2280      	movs	r2, #128	; 0x80
     376:	05d2      	lsls	r2, r2, #23
     378:	4313      	orrs	r3, r2
     37a:	617b      	str	r3, [r7, #20]
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     37c:	697b      	ldr	r3, [r7, #20]
     37e:	4a27      	ldr	r2, [pc, #156]	; (41c <sd_spi_op_cond+0xe8>)
     380:	0019      	movs	r1, r3
     382:	0010      	movs	r0, r2
     384:	4b24      	ldr	r3, [pc, #144]	; (418 <sd_spi_op_cond+0xe4>)
     386:	58e3      	ldr	r3, [r4, r3]
     388:	4798      	blx	r3
     38a:	0003      	movs	r3, r0
     38c:	001a      	movs	r2, r3
     38e:	2301      	movs	r3, #1
     390:	4053      	eors	r3, r2
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d001      	beq.n	39c <sd_spi_op_cond+0x68>
			return false;
     398:	2300      	movs	r3, #0
     39a:	e033      	b.n	404 <sd_spi_op_cond+0xd0>
		resp = driver_get_response();
     39c:	4b20      	ldr	r3, [pc, #128]	; (420 <sd_spi_op_cond+0xec>)
     39e:	58e3      	ldr	r3, [r4, r3]
     3a0:	4798      	blx	r3
     3a2:	0003      	movs	r3, r0
     3a4:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	2201      	movs	r2, #1
     3aa:	4013      	ands	r3, r2
     3ac:	d006      	beq.n	3bc <sd_spi_op_cond+0x88>
		if (retry-- == 0) {
     3ae:	693b      	ldr	r3, [r7, #16]
     3b0:	1e5a      	subs	r2, r3, #1
     3b2:	613a      	str	r2, [r7, #16]
     3b4:	2b00      	cmp	r3, #0
     3b6:	d1c7      	bne.n	348 <sd_spi_op_cond+0x14>
			return false;
     3b8:	2300      	movs	r3, #0
     3ba:	e023      	b.n	404 <sd_spi_op_cond+0xd0>
			break;
     3bc:	46c0      	nop			; (mov r8, r8)
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3be:	4b19      	ldr	r3, [pc, #100]	; (424 <sd_spi_op_cond+0xf0>)
     3c0:	2100      	movs	r1, #0
     3c2:	0018      	movs	r0, r3
     3c4:	4b14      	ldr	r3, [pc, #80]	; (418 <sd_spi_op_cond+0xe4>)
     3c6:	58e3      	ldr	r3, [r4, r3]
     3c8:	4798      	blx	r3
     3ca:	0003      	movs	r3, r0
     3cc:	001a      	movs	r2, r3
     3ce:	2301      	movs	r3, #1
     3d0:	4053      	eors	r3, r2
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d001      	beq.n	3dc <sd_spi_op_cond+0xa8>
		return false;
     3d8:	2300      	movs	r3, #0
     3da:	e013      	b.n	404 <sd_spi_op_cond+0xd0>
	if ((driver_get_response() & OCR_CCS) != 0) {
     3dc:	4b10      	ldr	r3, [pc, #64]	; (420 <sd_spi_op_cond+0xec>)
     3de:	58e3      	ldr	r3, [r4, r3]
     3e0:	4798      	blx	r3
     3e2:	0002      	movs	r2, r0
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	05db      	lsls	r3, r3, #23
     3e8:	4013      	ands	r3, r2
     3ea:	d00a      	beq.n	402 <sd_spi_op_cond+0xce>
		sd_mmc_card->type |= CARD_TYPE_HC;
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <sd_spi_op_cond+0xf4>)
     3ee:	447b      	add	r3, pc
     3f0:	681a      	ldr	r2, [r3, #0]
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <sd_spi_op_cond+0xf8>)
     3f4:	447b      	add	r3, pc
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	7adb      	ldrb	r3, [r3, #11]
     3fa:	2108      	movs	r1, #8
     3fc:	430b      	orrs	r3, r1
     3fe:	b2db      	uxtb	r3, r3
     400:	72d3      	strb	r3, [r2, #11]
	return true;
     402:	2301      	movs	r3, #1
}
     404:	0018      	movs	r0, r3
     406:	46bd      	mov	sp, r7
     408:	b007      	add	sp, #28
     40a:	bd90      	pop	{r4, r7, pc}
     40c:	00011a9e 	.word	0x00011a9e
     410:	00001bee 	.word	0x00001bee
     414:	00001137 	.word	0x00001137
     418:	00000264 	.word	0x00000264
     41c:	00001129 	.word	0x00001129
     420:	00000298 	.word	0x00000298
     424:	0000053a 	.word	0x0000053a
     428:	1ffffdd2 	.word	0x1ffffdd2
     42c:	1ffffdcc 	.word	0x1ffffdcc

00000430 <sdio_op_cond>:
{
     430:	b580      	push	{r7, lr}
     432:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     434:	2301      	movs	r3, #1
}
     436:	0018      	movs	r0, r3
     438:	46bd      	mov	sp, r7
     43a:	bd80      	pop	{r7, pc}

0000043c <sd_cmd8>:
{
     43c:	b590      	push	{r4, r7, lr}
     43e:	b085      	sub	sp, #20
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
     444:	4c18      	ldr	r4, [pc, #96]	; (4a8 <sd_cmd8+0x6c>)
     446:	447c      	add	r4, pc
	*v2 = 0;
     448:	687b      	ldr	r3, [r7, #4]
     44a:	2200      	movs	r2, #0
     44c:	701a      	strb	r2, [r3, #0]
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     44e:	23d5      	movs	r3, #213	; 0xd5
     450:	005b      	lsls	r3, r3, #1
     452:	4a16      	ldr	r2, [pc, #88]	; (4ac <sd_cmd8+0x70>)
     454:	0019      	movs	r1, r3
     456:	0010      	movs	r0, r2
     458:	4b15      	ldr	r3, [pc, #84]	; (4b0 <sd_cmd8+0x74>)
     45a:	58e3      	ldr	r3, [r4, r3]
     45c:	4798      	blx	r3
     45e:	0003      	movs	r3, r0
     460:	001a      	movs	r2, r3
     462:	2301      	movs	r3, #1
     464:	4053      	eors	r3, r2
     466:	b2db      	uxtb	r3, r3
     468:	2b00      	cmp	r3, #0
     46a:	d001      	beq.n	470 <sd_cmd8+0x34>
		return true; // It is not a V2
     46c:	2301      	movs	r3, #1
     46e:	e016      	b.n	49e <sd_cmd8+0x62>
	resp = driver_get_response();
     470:	4b10      	ldr	r3, [pc, #64]	; (4b4 <sd_cmd8+0x78>)
     472:	58e3      	ldr	r3, [r4, r3]
     474:	4798      	blx	r3
     476:	0003      	movs	r3, r0
     478:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	3301      	adds	r3, #1
     47e:	d101      	bne.n	484 <sd_cmd8+0x48>
		return true; // It is not a V2
     480:	2301      	movs	r3, #1
     482:	e00c      	b.n	49e <sd_cmd8+0x62>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     484:	68fb      	ldr	r3, [r7, #12]
     486:	051b      	lsls	r3, r3, #20
     488:	0d1a      	lsrs	r2, r3, #20
     48a:	23d5      	movs	r3, #213	; 0xd5
     48c:	005b      	lsls	r3, r3, #1
     48e:	429a      	cmp	r2, r3
     490:	d001      	beq.n	496 <sd_cmd8+0x5a>
		return false;
     492:	2300      	movs	r3, #0
     494:	e003      	b.n	49e <sd_cmd8+0x62>
	*v2 = 1;
     496:	687b      	ldr	r3, [r7, #4]
     498:	2201      	movs	r2, #1
     49a:	701a      	strb	r2, [r3, #0]
	return true;
     49c:	2301      	movs	r3, #1
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b005      	add	sp, #20
     4a4:	bd90      	pop	{r4, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	0001199a 	.word	0x0001199a
     4ac:	00005508 	.word	0x00005508
     4b0:	00000264 	.word	0x00000264
     4b4:	00000298 	.word	0x00000298

000004b8 <mmc_cmd8>:
{
     4b8:	b5b0      	push	{r4, r5, r7, lr}
     4ba:	b088      	sub	sp, #32
     4bc:	af02      	add	r7, sp, #8
     4be:	6078      	str	r0, [r7, #4]
     4c0:	4c46      	ldr	r4, [pc, #280]	; (5dc <mmc_cmd8+0x124>)
     4c2:	447c      	add	r4, pc
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     4c4:	2380      	movs	r3, #128	; 0x80
     4c6:	009a      	lsls	r2, r3, #2
     4c8:	4845      	ldr	r0, [pc, #276]	; (5e0 <mmc_cmd8+0x128>)
     4ca:	2300      	movs	r3, #0
     4cc:	9300      	str	r3, [sp, #0]
     4ce:	2301      	movs	r3, #1
     4d0:	2100      	movs	r1, #0
     4d2:	4d44      	ldr	r5, [pc, #272]	; (5e4 <mmc_cmd8+0x12c>)
     4d4:	5965      	ldr	r5, [r4, r5]
     4d6:	47a8      	blx	r5
     4d8:	0003      	movs	r3, r0
     4da:	001a      	movs	r2, r3
     4dc:	2301      	movs	r3, #1
     4de:	4053      	eors	r3, r2
     4e0:	b2db      	uxtb	r3, r3
     4e2:	2b00      	cmp	r3, #0
     4e4:	d001      	beq.n	4ea <mmc_cmd8+0x32>
		return false;
     4e6:	2300      	movs	r3, #0
     4e8:	e074      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     4ea:	2316      	movs	r3, #22
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	2200      	movs	r2, #0
     4f0:	801a      	strh	r2, [r3, #0]
     4f2:	e015      	b.n	520 <mmc_cmd8+0x68>
		if (!driver_read_word(&ext_csd)) {
     4f4:	2310      	movs	r3, #16
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	0018      	movs	r0, r3
     4fa:	4b3b      	ldr	r3, [pc, #236]	; (5e8 <mmc_cmd8+0x130>)
     4fc:	58e3      	ldr	r3, [r4, r3]
     4fe:	4798      	blx	r3
     500:	0003      	movs	r3, r0
     502:	001a      	movs	r2, r3
     504:	2301      	movs	r3, #1
     506:	4053      	eors	r3, r2
     508:	b2db      	uxtb	r3, r3
     50a:	2b00      	cmp	r3, #0
     50c:	d001      	beq.n	512 <mmc_cmd8+0x5a>
			return false;
     50e:	2300      	movs	r3, #0
     510:	e060      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     512:	2316      	movs	r3, #22
     514:	18fb      	adds	r3, r7, r3
     516:	881a      	ldrh	r2, [r3, #0]
     518:	2316      	movs	r3, #22
     51a:	18fb      	adds	r3, r7, r3
     51c:	3201      	adds	r2, #1
     51e:	801a      	strh	r2, [r3, #0]
     520:	2316      	movs	r3, #22
     522:	18fb      	adds	r3, r7, r3
     524:	881b      	ldrh	r3, [r3, #0]
     526:	2b31      	cmp	r3, #49	; 0x31
     528:	d9e4      	bls.n	4f4 <mmc_cmd8+0x3c>
			& MMC_CTYPE_52MHZ;
     52a:	693b      	ldr	r3, [r7, #16]
     52c:	b2db      	uxtb	r3, r3
     52e:	2202      	movs	r2, #2
     530:	4013      	ands	r3, r2
     532:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
     534:	687b      	ldr	r3, [r7, #4]
     536:	701a      	strb	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     538:	4b2c      	ldr	r3, [pc, #176]	; (5ec <mmc_cmd8+0x134>)
     53a:	447b      	add	r3, pc
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	330e      	adds	r3, #14
     540:	0018      	movs	r0, r3
     542:	230c      	movs	r3, #12
     544:	223e      	movs	r2, #62	; 0x3e
     546:	2180      	movs	r1, #128	; 0x80
     548:	4d29      	ldr	r5, [pc, #164]	; (5f0 <mmc_cmd8+0x138>)
     54a:	447d      	add	r5, pc
     54c:	47a8      	blx	r5
     54e:	0002      	movs	r2, r0
     550:	4b28      	ldr	r3, [pc, #160]	; (5f4 <mmc_cmd8+0x13c>)
     552:	429a      	cmp	r2, r3
     554:	d138      	bne.n	5c8 <mmc_cmd8+0x110>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     556:	e015      	b.n	584 <mmc_cmd8+0xcc>
			if (!driver_read_word(&sec_count)) {
     558:	230c      	movs	r3, #12
     55a:	18fb      	adds	r3, r7, r3
     55c:	0018      	movs	r0, r3
     55e:	4b22      	ldr	r3, [pc, #136]	; (5e8 <mmc_cmd8+0x130>)
     560:	58e3      	ldr	r3, [r4, r3]
     562:	4798      	blx	r3
     564:	0003      	movs	r3, r0
     566:	001a      	movs	r2, r3
     568:	2301      	movs	r3, #1
     56a:	4053      	eors	r3, r2
     56c:	b2db      	uxtb	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d001      	beq.n	576 <mmc_cmd8+0xbe>
				return false;
     572:	2300      	movs	r3, #0
     574:	e02e      	b.n	5d4 <mmc_cmd8+0x11c>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	2316      	movs	r3, #22
     578:	18fb      	adds	r3, r7, r3
     57a:	881a      	ldrh	r2, [r3, #0]
     57c:	2316      	movs	r3, #22
     57e:	18fb      	adds	r3, r7, r3
     580:	3201      	adds	r2, #1
     582:	801a      	strh	r2, [r3, #0]
     584:	2316      	movs	r3, #22
     586:	18fb      	adds	r3, r7, r3
     588:	881b      	ldrh	r3, [r3, #0]
     58a:	2b35      	cmp	r3, #53	; 0x35
     58c:	d9e4      	bls.n	558 <mmc_cmd8+0xa0>
		sd_mmc_card->capacity = sec_count / 2;
     58e:	4b1a      	ldr	r3, [pc, #104]	; (5f8 <mmc_cmd8+0x140>)
     590:	447b      	add	r3, pc
     592:	681b      	ldr	r3, [r3, #0]
     594:	68fa      	ldr	r2, [r7, #12]
     596:	0852      	lsrs	r2, r2, #1
     598:	605a      	str	r2, [r3, #4]
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     59a:	e015      	b.n	5c8 <mmc_cmd8+0x110>
		if (!driver_read_word(&sec_count)) {
     59c:	230c      	movs	r3, #12
     59e:	18fb      	adds	r3, r7, r3
     5a0:	0018      	movs	r0, r3
     5a2:	4b11      	ldr	r3, [pc, #68]	; (5e8 <mmc_cmd8+0x130>)
     5a4:	58e3      	ldr	r3, [r4, r3]
     5a6:	4798      	blx	r3
     5a8:	0003      	movs	r3, r0
     5aa:	001a      	movs	r2, r3
     5ac:	2301      	movs	r3, #1
     5ae:	4053      	eors	r3, r2
     5b0:	b2db      	uxtb	r3, r3
     5b2:	2b00      	cmp	r3, #0
     5b4:	d001      	beq.n	5ba <mmc_cmd8+0x102>
			return false;
     5b6:	2300      	movs	r3, #0
     5b8:	e00c      	b.n	5d4 <mmc_cmd8+0x11c>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     5ba:	2316      	movs	r3, #22
     5bc:	18fb      	adds	r3, r7, r3
     5be:	881a      	ldrh	r2, [r3, #0]
     5c0:	2316      	movs	r3, #22
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	3201      	adds	r2, #1
     5c6:	801a      	strh	r2, [r3, #0]
     5c8:	2316      	movs	r3, #22
     5ca:	18fb      	adds	r3, r7, r3
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	2b7f      	cmp	r3, #127	; 0x7f
     5d0:	d9e4      	bls.n	59c <mmc_cmd8+0xe4>
	return true;
     5d2:	2301      	movs	r3, #1
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b006      	add	sp, #24
     5da:	bdb0      	pop	{r4, r5, r7, pc}
     5dc:	0001191e 	.word	0x0001191e
     5e0:	00081108 	.word	0x00081108
     5e4:	00000130 	.word	0x00000130
     5e8:	00000100 	.word	0x00000100
     5ec:	1ffffc86 	.word	0x1ffffc86
     5f0:	fffffbc7 	.word	0xfffffbc7
     5f4:	00000fff 	.word	0x00000fff
     5f8:	1ffffc30 	.word	0x1ffffc30

000005fc <sd_mmc_cmd9_spi>:
{
     5fc:	b5b0      	push	{r4, r5, r7, lr}
     5fe:	b082      	sub	sp, #8
     600:	af02      	add	r7, sp, #8
     602:	4c18      	ldr	r4, [pc, #96]	; (664 <sd_mmc_cmd9_spi+0x68>)
     604:	447c      	add	r4, pc
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     606:	4b18      	ldr	r3, [pc, #96]	; (668 <sd_mmc_cmd9_spi+0x6c>)
     608:	447b      	add	r3, pc
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	891b      	ldrh	r3, [r3, #8]
     60e:	0419      	lsls	r1, r3, #16
     610:	4816      	ldr	r0, [pc, #88]	; (66c <sd_mmc_cmd9_spi+0x70>)
     612:	2301      	movs	r3, #1
     614:	9300      	str	r3, [sp, #0]
     616:	2301      	movs	r3, #1
     618:	2210      	movs	r2, #16
     61a:	4d15      	ldr	r5, [pc, #84]	; (670 <sd_mmc_cmd9_spi+0x74>)
     61c:	5965      	ldr	r5, [r4, r5]
     61e:	47a8      	blx	r5
     620:	0003      	movs	r3, r0
     622:	001a      	movs	r2, r3
     624:	2301      	movs	r3, #1
     626:	4053      	eors	r3, r2
     628:	b2db      	uxtb	r3, r3
     62a:	2b00      	cmp	r3, #0
     62c:	d001      	beq.n	632 <sd_mmc_cmd9_spi+0x36>
		return false;
     62e:	2300      	movs	r3, #0
     630:	e015      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     632:	4b10      	ldr	r3, [pc, #64]	; (674 <sd_mmc_cmd9_spi+0x78>)
     634:	447b      	add	r3, pc
     636:	681b      	ldr	r3, [r3, #0]
     638:	330e      	adds	r3, #14
     63a:	2101      	movs	r1, #1
     63c:	0018      	movs	r0, r3
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <sd_mmc_cmd9_spi+0x7c>)
     640:	58e3      	ldr	r3, [r4, r3]
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	001a      	movs	r2, r3
     648:	2301      	movs	r3, #1
     64a:	4053      	eors	r3, r2
     64c:	b2db      	uxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	d001      	beq.n	656 <sd_mmc_cmd9_spi+0x5a>
		return false;
     652:	2300      	movs	r3, #0
     654:	e003      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	return driver_wait_end_of_read_blocks();
     656:	4b09      	ldr	r3, [pc, #36]	; (67c <sd_mmc_cmd9_spi+0x80>)
     658:	58e3      	ldr	r3, [r4, r3]
     65a:	4798      	blx	r3
     65c:	0003      	movs	r3, r0
}
     65e:	0018      	movs	r0, r3
     660:	46bd      	mov	sp, r7
     662:	bdb0      	pop	{r4, r5, r7, pc}
     664:	000117dc 	.word	0x000117dc
     668:	1ffffbb8 	.word	0x1ffffbb8
     66c:	00081109 	.word	0x00081109
     670:	00000130 	.word	0x00000130
     674:	1ffffb8c 	.word	0x1ffffb8c
     678:	00000210 	.word	0x00000210
     67c:	00000188 	.word	0x00000188

00000680 <mmc_decode_csd>:
{
     680:	b5b0      	push	{r4, r5, r7, lr}
     682:	b084      	sub	sp, #16
     684:	af00      	add	r7, sp, #0
     686:	4c53      	ldr	r4, [pc, #332]	; (7d4 <mmc_decode_csd+0x154>)
     688:	447c      	add	r4, pc
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     68a:	4b53      	ldr	r3, [pc, #332]	; (7d8 <mmc_decode_csd+0x158>)
     68c:	447b      	add	r3, pc
     68e:	681b      	ldr	r3, [r3, #0]
     690:	330e      	adds	r3, #14
     692:	0018      	movs	r0, r3
     694:	2304      	movs	r3, #4
     696:	227a      	movs	r2, #122	; 0x7a
     698:	2180      	movs	r1, #128	; 0x80
     69a:	4d50      	ldr	r5, [pc, #320]	; (7dc <mmc_decode_csd+0x15c>)
     69c:	447d      	add	r5, pc
     69e:	47a8      	blx	r5
     6a0:	0003      	movs	r3, r0
     6a2:	3b01      	subs	r3, #1
     6a4:	2b03      	cmp	r3, #3
     6a6:	d80b      	bhi.n	6c0 <mmc_decode_csd+0x40>
     6a8:	0018      	movs	r0, r3
     6aa:	f00f fff1 	bl	10690 <__gnu_thumb1_case_si>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	0000001c 	.word	0x0000001c
     6b4:	00000028 	.word	0x00000028
     6b8:	00000034 	.word	0x00000034
     6bc:	00000040 	.word	0x00000040
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     6c0:	4b47      	ldr	r3, [pc, #284]	; (7e0 <mmc_decode_csd+0x160>)
     6c2:	447b      	add	r3, pc
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	2212      	movs	r2, #18
     6c8:	731a      	strb	r2, [r3, #12]
		break;
     6ca:	e017      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     6cc:	4b45      	ldr	r3, [pc, #276]	; (7e4 <mmc_decode_csd+0x164>)
     6ce:	447b      	add	r3, pc
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2214      	movs	r2, #20
     6d4:	731a      	strb	r2, [r3, #12]
		break;
     6d6:	e011      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6d8:	4b43      	ldr	r3, [pc, #268]	; (7e8 <mmc_decode_csd+0x168>)
     6da:	447b      	add	r3, pc
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	2222      	movs	r2, #34	; 0x22
     6e0:	731a      	strb	r2, [r3, #12]
		break;
     6e2:	e00b      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6e4:	4b41      	ldr	r3, [pc, #260]	; (7ec <mmc_decode_csd+0x16c>)
     6e6:	447b      	add	r3, pc
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	2230      	movs	r2, #48	; 0x30
     6ec:	731a      	strb	r2, [r3, #12]
		break;
     6ee:	e005      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_4;
     6f0:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <mmc_decode_csd+0x170>)
     6f2:	447b      	add	r3, pc
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	2240      	movs	r2, #64	; 0x40
     6f8:	731a      	strb	r2, [r3, #12]
		break;
     6fa:	46c0      	nop			; (mov r8, r8)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     6fc:	4b3d      	ldr	r3, [pc, #244]	; (7f4 <mmc_decode_csd+0x174>)
     6fe:	447b      	add	r3, pc
     700:	681b      	ldr	r3, [r3, #0]
     702:	330e      	adds	r3, #14
     704:	0018      	movs	r0, r3
     706:	2308      	movs	r3, #8
     708:	2260      	movs	r2, #96	; 0x60
     70a:	2180      	movs	r1, #128	; 0x80
     70c:	4d3a      	ldr	r5, [pc, #232]	; (7f8 <mmc_decode_csd+0x178>)
     70e:	447d      	add	r5, pc
     710:	47a8      	blx	r5
     712:	0003      	movs	r3, r0
     714:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     716:	68fb      	ldr	r3, [r7, #12]
     718:	2207      	movs	r2, #7
     71a:	401a      	ands	r2, r3
     71c:	4b37      	ldr	r3, [pc, #220]	; (7fc <mmc_decode_csd+0x17c>)
     71e:	58e3      	ldr	r3, [r4, r3]
     720:	0092      	lsls	r2, r2, #2
     722:	58d3      	ldr	r3, [r2, r3]
     724:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     726:	68fb      	ldr	r3, [r7, #12]
     728:	08db      	lsrs	r3, r3, #3
     72a:	220f      	movs	r2, #15
     72c:	401a      	ands	r2, r3
     72e:	4b34      	ldr	r3, [pc, #208]	; (800 <mmc_decode_csd+0x180>)
     730:	58e3      	ldr	r3, [r4, r3]
     732:	0092      	lsls	r2, r2, #2
     734:	58d3      	ldr	r3, [r2, r3]
     736:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     738:	4b32      	ldr	r3, [pc, #200]	; (804 <mmc_decode_csd+0x184>)
     73a:	447b      	add	r3, pc
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	68ba      	ldr	r2, [r7, #8]
     740:	6879      	ldr	r1, [r7, #4]
     742:	434a      	muls	r2, r1
     744:	21fa      	movs	r1, #250	; 0xfa
     746:	0089      	lsls	r1, r1, #2
     748:	434a      	muls	r2, r1
     74a:	601a      	str	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     74c:	4b2e      	ldr	r3, [pc, #184]	; (808 <mmc_decode_csd+0x188>)
     74e:	447b      	add	r3, pc
     750:	681b      	ldr	r3, [r3, #0]
     752:	330e      	adds	r3, #14
     754:	0018      	movs	r0, r3
     756:	230c      	movs	r3, #12
     758:	223e      	movs	r2, #62	; 0x3e
     75a:	2180      	movs	r1, #128	; 0x80
     75c:	4c2b      	ldr	r4, [pc, #172]	; (80c <mmc_decode_csd+0x18c>)
     75e:	447c      	add	r4, pc
     760:	47a0      	blx	r4
     762:	0002      	movs	r2, r0
     764:	4b2a      	ldr	r3, [pc, #168]	; (810 <mmc_decode_csd+0x190>)
     766:	429a      	cmp	r2, r3
     768:	d02f      	beq.n	7ca <mmc_decode_csd+0x14a>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     76a:	4b2a      	ldr	r3, [pc, #168]	; (814 <mmc_decode_csd+0x194>)
     76c:	447b      	add	r3, pc
     76e:	681b      	ldr	r3, [r3, #0]
     770:	330e      	adds	r3, #14
     772:	0018      	movs	r0, r3
     774:	230c      	movs	r3, #12
     776:	223e      	movs	r2, #62	; 0x3e
     778:	2180      	movs	r1, #128	; 0x80
     77a:	4c27      	ldr	r4, [pc, #156]	; (818 <mmc_decode_csd+0x198>)
     77c:	447c      	add	r4, pc
     77e:	47a0      	blx	r4
     780:	0003      	movs	r3, r0
     782:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     784:	4b25      	ldr	r3, [pc, #148]	; (81c <mmc_decode_csd+0x19c>)
     786:	447b      	add	r3, pc
     788:	681b      	ldr	r3, [r3, #0]
     78a:	330e      	adds	r3, #14
     78c:	0018      	movs	r0, r3
     78e:	2303      	movs	r3, #3
     790:	222f      	movs	r2, #47	; 0x2f
     792:	2180      	movs	r1, #128	; 0x80
     794:	4d22      	ldr	r5, [pc, #136]	; (820 <mmc_decode_csd+0x1a0>)
     796:	447d      	add	r5, pc
     798:	47a8      	blx	r5
     79a:	0003      	movs	r3, r0
     79c:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     79e:	409c      	lsls	r4, r3
     7a0:	0023      	movs	r3, r4
     7a2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <mmc_decode_csd+0x1a4>)
     7a6:	447b      	add	r3, pc
     7a8:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7aa:	4b1f      	ldr	r3, [pc, #124]	; (828 <mmc_decode_csd+0x1a8>)
     7ac:	447b      	add	r3, pc
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	330e      	adds	r3, #14
     7b2:	0018      	movs	r0, r3
     7b4:	2304      	movs	r3, #4
     7b6:	2250      	movs	r2, #80	; 0x50
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	4d1c      	ldr	r5, [pc, #112]	; (82c <mmc_decode_csd+0x1ac>)
     7bc:	447d      	add	r5, pc
     7be:	47a8      	blx	r5
     7c0:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     7c8:	6063      	str	r3, [r4, #4]
}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	46bd      	mov	sp, r7
     7ce:	b004      	add	sp, #16
     7d0:	bdb0      	pop	{r4, r5, r7, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00011758 	.word	0x00011758
     7d8:	1ffffb34 	.word	0x1ffffb34
     7dc:	fffffa75 	.word	0xfffffa75
     7e0:	1ffffafe 	.word	0x1ffffafe
     7e4:	1ffffaf2 	.word	0x1ffffaf2
     7e8:	1ffffae6 	.word	0x1ffffae6
     7ec:	1ffffada 	.word	0x1ffffada
     7f0:	1fffface 	.word	0x1fffface
     7f4:	1ffffac2 	.word	0x1ffffac2
     7f8:	fffffa03 	.word	0xfffffa03
     7fc:	000001cc 	.word	0x000001cc
     800:	00000094 	.word	0x00000094
     804:	1ffffa86 	.word	0x1ffffa86
     808:	1ffffa72 	.word	0x1ffffa72
     80c:	fffff9b3 	.word	0xfffff9b3
     810:	00000fff 	.word	0x00000fff
     814:	1ffffa54 	.word	0x1ffffa54
     818:	fffff995 	.word	0xfffff995
     81c:	1ffffa3a 	.word	0x1ffffa3a
     820:	fffff97b 	.word	0xfffff97b
     824:	1ffffa1a 	.word	0x1ffffa1a
     828:	1ffffa14 	.word	0x1ffffa14
     82c:	fffff955 	.word	0xfffff955

00000830 <sd_decode_csd>:
{
     830:	b5b0      	push	{r4, r5, r7, lr}
     832:	b084      	sub	sp, #16
     834:	af00      	add	r7, sp, #0
     836:	4c3f      	ldr	r4, [pc, #252]	; (934 <sd_decode_csd+0x104>)
     838:	447c      	add	r4, pc
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     83a:	4b3f      	ldr	r3, [pc, #252]	; (938 <sd_decode_csd+0x108>)
     83c:	447b      	add	r3, pc
     83e:	681b      	ldr	r3, [r3, #0]
     840:	330e      	adds	r3, #14
     842:	0018      	movs	r0, r3
     844:	2308      	movs	r3, #8
     846:	2260      	movs	r2, #96	; 0x60
     848:	2180      	movs	r1, #128	; 0x80
     84a:	4d3c      	ldr	r5, [pc, #240]	; (93c <sd_decode_csd+0x10c>)
     84c:	447d      	add	r5, pc
     84e:	47a8      	blx	r5
     850:	0003      	movs	r3, r0
     852:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     854:	68fb      	ldr	r3, [r7, #12]
     856:	2207      	movs	r2, #7
     858:	401a      	ands	r2, r3
     85a:	4b39      	ldr	r3, [pc, #228]	; (940 <sd_decode_csd+0x110>)
     85c:	58e3      	ldr	r3, [r4, r3]
     85e:	0092      	lsls	r2, r2, #2
     860:	58d3      	ldr	r3, [r2, r3]
     862:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     864:	68fb      	ldr	r3, [r7, #12]
     866:	08db      	lsrs	r3, r3, #3
     868:	220f      	movs	r2, #15
     86a:	401a      	ands	r2, r3
     86c:	4b35      	ldr	r3, [pc, #212]	; (944 <sd_decode_csd+0x114>)
     86e:	58e3      	ldr	r3, [r4, r3]
     870:	0092      	lsls	r2, r2, #2
     872:	58d3      	ldr	r3, [r2, r3]
     874:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     876:	4b34      	ldr	r3, [pc, #208]	; (948 <sd_decode_csd+0x118>)
     878:	447b      	add	r3, pc
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	68ba      	ldr	r2, [r7, #8]
     87e:	6879      	ldr	r1, [r7, #4]
     880:	434a      	muls	r2, r1
     882:	21fa      	movs	r1, #250	; 0xfa
     884:	0089      	lsls	r1, r1, #2
     886:	434a      	muls	r2, r1
     888:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     88a:	4b30      	ldr	r3, [pc, #192]	; (94c <sd_decode_csd+0x11c>)
     88c:	447b      	add	r3, pc
     88e:	681b      	ldr	r3, [r3, #0]
     890:	330e      	adds	r3, #14
     892:	0018      	movs	r0, r3
     894:	2302      	movs	r3, #2
     896:	227e      	movs	r2, #126	; 0x7e
     898:	2180      	movs	r1, #128	; 0x80
     89a:	4c2d      	ldr	r4, [pc, #180]	; (950 <sd_decode_csd+0x120>)
     89c:	447c      	add	r4, pc
     89e:	47a0      	blx	r4
     8a0:	1e03      	subs	r3, r0, #0
     8a2:	d012      	beq.n	8ca <sd_decode_csd+0x9a>
		sd_mmc_card->capacity =
     8a4:	4b2b      	ldr	r3, [pc, #172]	; (954 <sd_decode_csd+0x124>)
     8a6:	447b      	add	r3, pc
     8a8:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
     8aa:	4b2b      	ldr	r3, [pc, #172]	; (958 <sd_decode_csd+0x128>)
     8ac:	447b      	add	r3, pc
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	330e      	adds	r3, #14
     8b2:	0018      	movs	r0, r3
     8b4:	2316      	movs	r3, #22
     8b6:	2230      	movs	r2, #48	; 0x30
     8b8:	2180      	movs	r1, #128	; 0x80
     8ba:	4d28      	ldr	r5, [pc, #160]	; (95c <sd_decode_csd+0x12c>)
     8bc:	447d      	add	r5, pc
     8be:	47a8      	blx	r5
     8c0:	0003      	movs	r3, r0
				* 512;
     8c2:	3301      	adds	r3, #1
     8c4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
     8c6:	6063      	str	r3, [r4, #4]
}
     8c8:	e02f      	b.n	92a <sd_decode_csd+0xfa>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8ca:	4b25      	ldr	r3, [pc, #148]	; (960 <sd_decode_csd+0x130>)
     8cc:	447b      	add	r3, pc
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	330e      	adds	r3, #14
     8d2:	0018      	movs	r0, r3
     8d4:	230c      	movs	r3, #12
     8d6:	223e      	movs	r2, #62	; 0x3e
     8d8:	2180      	movs	r1, #128	; 0x80
     8da:	4c22      	ldr	r4, [pc, #136]	; (964 <sd_decode_csd+0x134>)
     8dc:	447c      	add	r4, pc
     8de:	47a0      	blx	r4
     8e0:	0003      	movs	r3, r0
     8e2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     8e4:	4b20      	ldr	r3, [pc, #128]	; (968 <sd_decode_csd+0x138>)
     8e6:	447b      	add	r3, pc
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	330e      	adds	r3, #14
     8ec:	0018      	movs	r0, r3
     8ee:	2303      	movs	r3, #3
     8f0:	222f      	movs	r2, #47	; 0x2f
     8f2:	2180      	movs	r1, #128	; 0x80
     8f4:	4d1d      	ldr	r5, [pc, #116]	; (96c <sd_decode_csd+0x13c>)
     8f6:	447d      	add	r5, pc
     8f8:	47a8      	blx	r5
     8fa:	0003      	movs	r3, r0
     8fc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8fe:	409c      	lsls	r4, r3
     900:	0023      	movs	r3, r4
     902:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     904:	4b1a      	ldr	r3, [pc, #104]	; (970 <sd_decode_csd+0x140>)
     906:	447b      	add	r3, pc
     908:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
     90a:	4b1a      	ldr	r3, [pc, #104]	; (974 <sd_decode_csd+0x144>)
     90c:	447b      	add	r3, pc
     90e:	681b      	ldr	r3, [r3, #0]
     910:	330e      	adds	r3, #14
     912:	0018      	movs	r0, r3
     914:	2304      	movs	r3, #4
     916:	2250      	movs	r2, #80	; 0x50
     918:	2180      	movs	r1, #128	; 0x80
     91a:	4d17      	ldr	r5, [pc, #92]	; (978 <sd_decode_csd+0x148>)
     91c:	447d      	add	r5, pc
     91e:	47a8      	blx	r5
     920:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     922:	683b      	ldr	r3, [r7, #0]
     924:	4093      	lsls	r3, r2
				/ 1024;
     926:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     928:	6063      	str	r3, [r4, #4]
}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bdb0      	pop	{r4, r5, r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	000115a8 	.word	0x000115a8
     938:	1ffff984 	.word	0x1ffff984
     93c:	fffff8c5 	.word	0xfffff8c5
     940:	000001cc 	.word	0x000001cc
     944:	000001b0 	.word	0x000001b0
     948:	1ffff948 	.word	0x1ffff948
     94c:	1ffff934 	.word	0x1ffff934
     950:	fffff875 	.word	0xfffff875
     954:	1ffff91a 	.word	0x1ffff91a
     958:	1ffff914 	.word	0x1ffff914
     95c:	fffff855 	.word	0xfffff855
     960:	1ffff8f4 	.word	0x1ffff8f4
     964:	fffff835 	.word	0xfffff835
     968:	1ffff8da 	.word	0x1ffff8da
     96c:	fffff81b 	.word	0xfffff81b
     970:	1ffff8ba 	.word	0x1ffff8ba
     974:	1ffff8b4 	.word	0x1ffff8b4
     978:	fffff7f5 	.word	0xfffff7f5

0000097c <sd_mmc_cmd13>:
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b083      	sub	sp, #12
     980:	af00      	add	r7, sp, #0
     982:	4c13      	ldr	r4, [pc, #76]	; (9d0 <sd_mmc_cmd13+0x54>)
     984:	447c      	add	r4, pc
	nec_timeout = 200000;
     986:	4b13      	ldr	r3, [pc, #76]	; (9d4 <sd_mmc_cmd13+0x58>)
     988:	607b      	str	r3, [r7, #4]
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     98a:	4b13      	ldr	r3, [pc, #76]	; (9d8 <sd_mmc_cmd13+0x5c>)
     98c:	2100      	movs	r1, #0
     98e:	0018      	movs	r0, r3
     990:	4b12      	ldr	r3, [pc, #72]	; (9dc <sd_mmc_cmd13+0x60>)
     992:	58e3      	ldr	r3, [r4, r3]
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	001a      	movs	r2, r3
     99a:	2301      	movs	r3, #1
     99c:	4053      	eors	r3, r2
     99e:	b2db      	uxtb	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	d001      	beq.n	9a8 <sd_mmc_cmd13+0x2c>
				return false;
     9a4:	2300      	movs	r3, #0
     9a6:	e00f      	b.n	9c8 <sd_mmc_cmd13+0x4c>
			if (!(driver_get_response() & 0xFF)) {
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <sd_mmc_cmd13+0x64>)
     9aa:	58e3      	ldr	r3, [r4, r3]
     9ac:	4798      	blx	r3
     9ae:	0002      	movs	r2, r0
     9b0:	23ff      	movs	r3, #255	; 0xff
     9b2:	4013      	ands	r3, r2
     9b4:	d006      	beq.n	9c4 <sd_mmc_cmd13+0x48>
		if (nec_timeout-- == 0) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	1e5a      	subs	r2, r3, #1
     9ba:	607a      	str	r2, [r7, #4]
     9bc:	2b00      	cmp	r3, #0
     9be:	d1e4      	bne.n	98a <sd_mmc_cmd13+0xe>
			return false;
     9c0:	2300      	movs	r3, #0
     9c2:	e001      	b.n	9c8 <sd_mmc_cmd13+0x4c>
				break;
     9c4:	46c0      	nop			; (mov r8, r8)
	return true;
     9c6:	2301      	movs	r3, #1
}
     9c8:	0018      	movs	r0, r3
     9ca:	46bd      	mov	sp, r7
     9cc:	b003      	add	sp, #12
     9ce:	bd90      	pop	{r4, r7, pc}
     9d0:	0001145c 	.word	0x0001145c
     9d4:	00030d40 	.word	0x00030d40
     9d8:	00001b0d 	.word	0x00001b0d
     9dc:	00000264 	.word	0x00000264
     9e0:	00000298 	.word	0x00000298

000009e4 <sd_acmd51>:
{
     9e4:	b5b0      	push	{r4, r5, r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af02      	add	r7, sp, #8
     9ea:	4c3f      	ldr	r4, [pc, #252]	; (ae8 <sd_acmd51+0x104>)
     9ec:	447c      	add	r4, pc
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     9ee:	4b3f      	ldr	r3, [pc, #252]	; (aec <sd_acmd51+0x108>)
     9f0:	447b      	add	r3, pc
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	891b      	ldrh	r3, [r3, #8]
     9f6:	041b      	lsls	r3, r3, #16
     9f8:	4a3d      	ldr	r2, [pc, #244]	; (af0 <sd_acmd51+0x10c>)
     9fa:	0019      	movs	r1, r3
     9fc:	0010      	movs	r0, r2
     9fe:	4b3d      	ldr	r3, [pc, #244]	; (af4 <sd_acmd51+0x110>)
     a00:	58e3      	ldr	r3, [r4, r3]
     a02:	4798      	blx	r3
     a04:	0003      	movs	r3, r0
     a06:	001a      	movs	r2, r3
     a08:	2301      	movs	r3, #1
     a0a:	4053      	eors	r3, r2
     a0c:	b2db      	uxtb	r3, r3
     a0e:	2b00      	cmp	r3, #0
     a10:	d001      	beq.n	a16 <sd_acmd51+0x32>
		return false;
     a12:	2300      	movs	r3, #0
     a14:	e063      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     a16:	4838      	ldr	r0, [pc, #224]	; (af8 <sd_acmd51+0x114>)
     a18:	2301      	movs	r3, #1
     a1a:	9300      	str	r3, [sp, #0]
     a1c:	2301      	movs	r3, #1
     a1e:	2208      	movs	r2, #8
     a20:	2100      	movs	r1, #0
     a22:	4d36      	ldr	r5, [pc, #216]	; (afc <sd_acmd51+0x118>)
     a24:	5965      	ldr	r5, [r4, r5]
     a26:	47a8      	blx	r5
     a28:	0003      	movs	r3, r0
     a2a:	001a      	movs	r2, r3
     a2c:	2301      	movs	r3, #1
     a2e:	4053      	eors	r3, r2
     a30:	b2db      	uxtb	r3, r3
     a32:	2b00      	cmp	r3, #0
     a34:	d001      	beq.n	a3a <sd_acmd51+0x56>
		return false;
     a36:	2300      	movs	r3, #0
     a38:	e051      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_start_read_blocks(scr, 1)) {
     a3a:	003b      	movs	r3, r7
     a3c:	2101      	movs	r1, #1
     a3e:	0018      	movs	r0, r3
     a40:	4b2f      	ldr	r3, [pc, #188]	; (b00 <sd_acmd51+0x11c>)
     a42:	58e3      	ldr	r3, [r4, r3]
     a44:	4798      	blx	r3
     a46:	0003      	movs	r3, r0
     a48:	001a      	movs	r2, r3
     a4a:	2301      	movs	r3, #1
     a4c:	4053      	eors	r3, r2
     a4e:	b2db      	uxtb	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d001      	beq.n	a58 <sd_acmd51+0x74>
		return false;
     a54:	2300      	movs	r3, #0
     a56:	e042      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_wait_end_of_read_blocks()) {
     a58:	4b2a      	ldr	r3, [pc, #168]	; (b04 <sd_acmd51+0x120>)
     a5a:	58e3      	ldr	r3, [r4, r3]
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	001a      	movs	r2, r3
     a62:	2301      	movs	r3, #1
     a64:	4053      	eors	r3, r2
     a66:	b2db      	uxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	d001      	beq.n	a70 <sd_acmd51+0x8c>
		return false;
     a6c:	2300      	movs	r3, #0
     a6e:	e036      	b.n	ade <sd_acmd51+0xfa>
	switch (SD_SCR_SD_SPEC(scr)) {
     a70:	0038      	movs	r0, r7
     a72:	2304      	movs	r3, #4
     a74:	2238      	movs	r2, #56	; 0x38
     a76:	2140      	movs	r1, #64	; 0x40
     a78:	4c23      	ldr	r4, [pc, #140]	; (b08 <sd_acmd51+0x124>)
     a7a:	447c      	add	r4, pc
     a7c:	47a0      	blx	r4
     a7e:	0003      	movs	r3, r0
     a80:	2b01      	cmp	r3, #1
     a82:	d009      	beq.n	a98 <sd_acmd51+0xb4>
     a84:	d302      	bcc.n	a8c <sd_acmd51+0xa8>
     a86:	2b02      	cmp	r3, #2
     a88:	d00c      	beq.n	aa4 <sd_acmd51+0xc0>
     a8a:	e021      	b.n	ad0 <sd_acmd51+0xec>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     a8c:	4b1f      	ldr	r3, [pc, #124]	; (b0c <sd_acmd51+0x128>)
     a8e:	447b      	add	r3, pc
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	2210      	movs	r2, #16
     a94:	731a      	strb	r2, [r3, #12]
		break;
     a96:	e021      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     a98:	4b1d      	ldr	r3, [pc, #116]	; (b10 <sd_acmd51+0x12c>)
     a9a:	447b      	add	r3, pc
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	221a      	movs	r2, #26
     aa0:	731a      	strb	r2, [r3, #12]
		break;
     aa2:	e01b      	b.n	adc <sd_acmd51+0xf8>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     aa4:	0038      	movs	r0, r7
     aa6:	2301      	movs	r3, #1
     aa8:	222f      	movs	r2, #47	; 0x2f
     aaa:	2140      	movs	r1, #64	; 0x40
     aac:	4c19      	ldr	r4, [pc, #100]	; (b14 <sd_acmd51+0x130>)
     aae:	447c      	add	r4, pc
     ab0:	47a0      	blx	r4
     ab2:	0003      	movs	r3, r0
     ab4:	2b01      	cmp	r3, #1
     ab6:	d105      	bne.n	ac4 <sd_acmd51+0xe0>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     ab8:	4b17      	ldr	r3, [pc, #92]	; (b18 <sd_acmd51+0x134>)
     aba:	447b      	add	r3, pc
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	2230      	movs	r2, #48	; 0x30
     ac0:	731a      	strb	r2, [r3, #12]
		break;
     ac2:	e00b      	b.n	adc <sd_acmd51+0xf8>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     ac4:	4b15      	ldr	r3, [pc, #84]	; (b1c <sd_acmd51+0x138>)
     ac6:	447b      	add	r3, pc
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	2220      	movs	r2, #32
     acc:	731a      	strb	r2, [r3, #12]
		break;
     ace:	e005      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     ad0:	4b13      	ldr	r3, [pc, #76]	; (b20 <sd_acmd51+0x13c>)
     ad2:	447b      	add	r3, pc
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	2210      	movs	r2, #16
     ad8:	731a      	strb	r2, [r3, #12]
		break;
     ada:	46c0      	nop			; (mov r8, r8)
	return true;
     adc:	2301      	movs	r3, #1
}
     ade:	0018      	movs	r0, r3
     ae0:	46bd      	mov	sp, r7
     ae2:	b002      	add	sp, #8
     ae4:	bdb0      	pop	{r4, r5, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	000113f4 	.word	0x000113f4
     aec:	1ffff7d0 	.word	0x1ffff7d0
     af0:	00001137 	.word	0x00001137
     af4:	00000264 	.word	0x00000264
     af8:	00081133 	.word	0x00081133
     afc:	00000130 	.word	0x00000130
     b00:	00000210 	.word	0x00000210
     b04:	00000188 	.word	0x00000188
     b08:	fffff697 	.word	0xfffff697
     b0c:	1ffff732 	.word	0x1ffff732
     b10:	1ffff726 	.word	0x1ffff726
     b14:	fffff663 	.word	0xfffff663
     b18:	1ffff706 	.word	0x1ffff706
     b1c:	1ffff6fa 	.word	0x1ffff6fa
     b20:	1ffff6ee 	.word	0x1ffff6ee

00000b24 <sd_mmc_select_slot>:
{
     b24:	b580      	push	{r7, lr}
     b26:	b082      	sub	sp, #8
     b28:	af00      	add	r7, sp, #0
     b2a:	0002      	movs	r2, r0
     b2c:	1dfb      	adds	r3, r7, #7
     b2e:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
     b30:	1dfb      	adds	r3, r7, #7
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d001      	beq.n	b3c <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
     b38:	2304      	movs	r3, #4
     b3a:	e052      	b.n	be2 <sd_mmc_select_slot+0xbe>
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     b3c:	1dfb      	adds	r3, r7, #7
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	4a2a      	ldr	r2, [pc, #168]	; (bec <sd_mmc_select_slot+0xc8>)
     b42:	447a      	add	r2, pc
     b44:	015b      	lsls	r3, r3, #5
     b46:	18d3      	adds	r3, r2, r3
     b48:	330a      	adds	r3, #10
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	2b04      	cmp	r3, #4
     b4e:	d009      	beq.n	b64 <sd_mmc_select_slot+0x40>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	4a26      	ldr	r2, [pc, #152]	; (bf0 <sd_mmc_select_slot+0xcc>)
     b56:	447a      	add	r2, pc
     b58:	015b      	lsls	r3, r3, #5
     b5a:	18d3      	adds	r3, r2, r3
     b5c:	330a      	adds	r3, #10
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b03      	cmp	r3, #3
     b62:	d121      	bne.n	ba8 <sd_mmc_select_slot+0x84>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b64:	1dfb      	adds	r3, r7, #7
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	4a22      	ldr	r2, [pc, #136]	; (bf4 <sd_mmc_select_slot+0xd0>)
     b6a:	447a      	add	r2, pc
     b6c:	015b      	lsls	r3, r3, #5
     b6e:	18d3      	adds	r3, r2, r3
     b70:	330a      	adds	r3, #10
     b72:	2202      	movs	r2, #2
     b74:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b76:	1dfb      	adds	r3, r7, #7
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	4b1f      	ldr	r3, [pc, #124]	; (bf8 <sd_mmc_select_slot+0xd4>)
     b7c:	447b      	add	r3, pc
     b7e:	0152      	lsls	r2, r2, #5
     b80:	491e      	ldr	r1, [pc, #120]	; (bfc <sd_mmc_select_slot+0xd8>)
     b82:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	4a1d      	ldr	r2, [pc, #116]	; (c00 <sd_mmc_select_slot+0xdc>)
     b8a:	447a      	add	r2, pc
     b8c:	015b      	lsls	r3, r3, #5
     b8e:	18d3      	adds	r3, r2, r3
     b90:	330d      	adds	r3, #13
     b92:	2201      	movs	r2, #1
     b94:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	4a1a      	ldr	r2, [pc, #104]	; (c04 <sd_mmc_select_slot+0xe0>)
     b9c:	447a      	add	r2, pc
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18d3      	adds	r3, r2, r3
     ba2:	331e      	adds	r3, #30
     ba4:	2200      	movs	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
	sd_mmc_slot_sel = slot;
     ba8:	4b17      	ldr	r3, [pc, #92]	; (c08 <sd_mmc_select_slot+0xe4>)
     baa:	447b      	add	r3, pc
     bac:	1dfa      	adds	r2, r7, #7
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     bb2:	1dfb      	adds	r3, r7, #7
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	015b      	lsls	r3, r3, #5
     bb8:	4a14      	ldr	r2, [pc, #80]	; (c0c <sd_mmc_select_slot+0xe8>)
     bba:	447a      	add	r2, pc
     bbc:	189a      	adds	r2, r3, r2
     bbe:	4b14      	ldr	r3, [pc, #80]	; (c10 <sd_mmc_select_slot+0xec>)
     bc0:	447b      	add	r3, pc
     bc2:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
     bc4:	4b13      	ldr	r3, [pc, #76]	; (c14 <sd_mmc_select_slot+0xf0>)
     bc6:	447b      	add	r3, pc
     bc8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	4a12      	ldr	r2, [pc, #72]	; (c18 <sd_mmc_select_slot+0xf4>)
     bd0:	447a      	add	r2, pc
     bd2:	015b      	lsls	r3, r3, #5
     bd4:	18d3      	adds	r3, r2, r3
     bd6:	330a      	adds	r3, #10
     bd8:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     bda:	3b02      	subs	r3, #2
     bdc:	425a      	negs	r2, r3
     bde:	4153      	adcs	r3, r2
     be0:	b2db      	uxtb	r3, r3
}
     be2:	0018      	movs	r0, r3
     be4:	46bd      	mov	sp, r7
     be6:	b002      	add	sp, #8
     be8:	bd80      	pop	{r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	1ffff65a 	.word	0x1ffff65a
     bf0:	1ffff646 	.word	0x1ffff646
     bf4:	1ffff632 	.word	0x1ffff632
     bf8:	1ffff620 	.word	0x1ffff620
     bfc:	00061a80 	.word	0x00061a80
     c00:	1ffff612 	.word	0x1ffff612
     c04:	1ffff600 	.word	0x1ffff600
     c08:	1ffff612 	.word	0x1ffff612
     c0c:	1ffff5e2 	.word	0x1ffff5e2
     c10:	1ffff600 	.word	0x1ffff600
     c14:	00000053 	.word	0x00000053
     c18:	1ffff5cc 	.word	0x1ffff5cc

00000c1c <sd_mmc_configure_slot>:
{
     c1c:	b5b0      	push	{r4, r5, r7, lr}
     c1e:	af00      	add	r7, sp, #0
     c20:	4d0c      	ldr	r5, [pc, #48]	; (c54 <sd_mmc_configure_slot+0x38>)
     c22:	447d      	add	r5, pc
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c24:	4b0c      	ldr	r3, [pc, #48]	; (c58 <sd_mmc_configure_slot+0x3c>)
     c26:	447b      	add	r3, pc
     c28:	7818      	ldrb	r0, [r3, #0]
     c2a:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sd_mmc_configure_slot+0x40>)
     c2c:	447b      	add	r3, pc
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <sd_mmc_configure_slot+0x44>)
     c34:	447b      	add	r3, pc
     c36:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c38:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <sd_mmc_configure_slot+0x48>)
     c3c:	447b      	add	r3, pc
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c42:	1e5c      	subs	r4, r3, #1
     c44:	41a3      	sbcs	r3, r4
     c46:	b2db      	uxtb	r3, r3
     c48:	4c07      	ldr	r4, [pc, #28]	; (c68 <sd_mmc_configure_slot+0x4c>)
     c4a:	592c      	ldr	r4, [r5, r4]
     c4c:	47a0      	blx	r4
}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	bdb0      	pop	{r4, r5, r7, pc}
     c54:	000111be 	.word	0x000111be
     c58:	1ffff596 	.word	0x1ffff596
     c5c:	1ffff594 	.word	0x1ffff594
     c60:	1ffff58c 	.word	0x1ffff58c
     c64:	1ffff584 	.word	0x1ffff584
     c68:	0000002c 	.word	0x0000002c

00000c6c <sd_mmc_deselect_slot>:
{
     c6c:	b580      	push	{r7, lr}
     c6e:	af00      	add	r7, sp, #0
     c70:	4a08      	ldr	r2, [pc, #32]	; (c94 <sd_mmc_deselect_slot+0x28>)
     c72:	447a      	add	r2, pc
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c74:	4b08      	ldr	r3, [pc, #32]	; (c98 <sd_mmc_deselect_slot+0x2c>)
     c76:	447b      	add	r3, pc
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d106      	bne.n	c8c <sd_mmc_deselect_slot+0x20>
		driver_deselect_device(sd_mmc_slot_sel);
     c7e:	4b07      	ldr	r3, [pc, #28]	; (c9c <sd_mmc_deselect_slot+0x30>)
     c80:	447b      	add	r3, pc
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	0018      	movs	r0, r3
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <sd_mmc_deselect_slot+0x34>)
     c88:	58d3      	ldr	r3, [r2, r3]
     c8a:	4798      	blx	r3
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0001116e 	.word	0x0001116e
     c98:	1ffff546 	.word	0x1ffff546
     c9c:	1ffff53c 	.word	0x1ffff53c
     ca0:	000002e0 	.word	0x000002e0

00000ca4 <sd_mmc_spi_card_init>:
{
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	af00      	add	r7, sp, #0
     caa:	4c67      	ldr	r4, [pc, #412]	; (e48 <sd_mmc_spi_card_init+0x1a4>)
     cac:	447c      	add	r4, pc
	uint8_t v2 = 0;
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	2200      	movs	r2, #0
     cb2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card->type = CARD_TYPE_SD;
     cb4:	4b65      	ldr	r3, [pc, #404]	; (e4c <sd_mmc_spi_card_init+0x1a8>)
     cb6:	447b      	add	r3, pc
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	2201      	movs	r2, #1
     cbc:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     cbe:	4b64      	ldr	r3, [pc, #400]	; (e50 <sd_mmc_spi_card_init+0x1ac>)
     cc0:	447b      	add	r3, pc
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	2200      	movs	r2, #0
     cc6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     cc8:	4b62      	ldr	r3, [pc, #392]	; (e54 <sd_mmc_spi_card_init+0x1b0>)
     cca:	447b      	add	r3, pc
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	2200      	movs	r2, #0
     cd0:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     cd2:	4b61      	ldr	r3, [pc, #388]	; (e58 <sd_mmc_spi_card_init+0x1b4>)
     cd4:	58e3      	ldr	r3, [r4, r3]
     cd6:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     cd8:	2388      	movs	r3, #136	; 0x88
     cda:	015b      	lsls	r3, r3, #5
     cdc:	2100      	movs	r1, #0
     cde:	0018      	movs	r0, r3
     ce0:	4b5e      	ldr	r3, [pc, #376]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     ce2:	58e3      	ldr	r3, [r4, r3]
     ce4:	4798      	blx	r3
     ce6:	0003      	movs	r3, r0
     ce8:	001a      	movs	r2, r3
     cea:	2301      	movs	r3, #1
     cec:	4053      	eors	r3, r2
     cee:	b2db      	uxtb	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	d001      	beq.n	cf8 <sd_mmc_spi_card_init+0x54>
		return false;
     cf4:	2300      	movs	r3, #0
     cf6:	e0a3      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sd_cmd8(&v2)) {
     cf8:	1dfb      	adds	r3, r7, #7
     cfa:	0018      	movs	r0, r3
     cfc:	4b58      	ldr	r3, [pc, #352]	; (e60 <sd_mmc_spi_card_init+0x1bc>)
     cfe:	447b      	add	r3, pc
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	001a      	movs	r2, r3
     d06:	2301      	movs	r3, #1
     d08:	4053      	eors	r3, r2
     d0a:	b2db      	uxtb	r3, r3
     d0c:	2b00      	cmp	r3, #0
     d0e:	d001      	beq.n	d14 <sd_mmc_spi_card_init+0x70>
		return false;
     d10:	2300      	movs	r3, #0
     d12:	e095      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sdio_op_cond()) {
     d14:	4b53      	ldr	r3, [pc, #332]	; (e64 <sd_mmc_spi_card_init+0x1c0>)
     d16:	447b      	add	r3, pc
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	001a      	movs	r2, r3
     d1e:	2301      	movs	r3, #1
     d20:	4053      	eors	r3, r2
     d22:	b2db      	uxtb	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d001      	beq.n	d2c <sd_mmc_spi_card_init+0x88>
		return false;
     d28:	2300      	movs	r3, #0
     d2a:	e089      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d2c:	4b4e      	ldr	r3, [pc, #312]	; (e68 <sd_mmc_spi_card_init+0x1c4>)
     d2e:	447b      	add	r3, pc
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	7adb      	ldrb	r3, [r3, #11]
     d34:	001a      	movs	r2, r3
     d36:	2301      	movs	r3, #1
     d38:	4013      	ands	r3, r2
     d3a:	d025      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
		if (!sd_spi_op_cond(v2)) {
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	0018      	movs	r0, r3
     d42:	4b4a      	ldr	r3, [pc, #296]	; (e6c <sd_mmc_spi_card_init+0x1c8>)
     d44:	447b      	add	r3, pc
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2301      	movs	r3, #1
     d4e:	4053      	eors	r3, r2
     d50:	b2db      	uxtb	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d009      	beq.n	d6a <sd_mmc_spi_card_init+0xc6>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d56:	4b46      	ldr	r3, [pc, #280]	; (e70 <sd_mmc_spi_card_init+0x1cc>)
     d58:	447b      	add	r3, pc
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	2202      	movs	r2, #2
     d5e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
     d60:	4b44      	ldr	r3, [pc, #272]	; (e74 <sd_mmc_spi_card_init+0x1d0>)
     d62:	447b      	add	r3, pc
     d64:	4798      	blx	r3
     d66:	0003      	movs	r3, r0
     d68:	e06a      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d6a:	4b43      	ldr	r3, [pc, #268]	; (e78 <sd_mmc_spi_card_init+0x1d4>)
     d6c:	2100      	movs	r1, #0
     d6e:	0018      	movs	r0, r3
     d70:	4b3a      	ldr	r3, [pc, #232]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     d72:	58e3      	ldr	r3, [r4, r3]
     d74:	4798      	blx	r3
     d76:	0003      	movs	r3, r0
     d78:	001a      	movs	r2, r3
     d7a:	2301      	movs	r3, #1
     d7c:	4053      	eors	r3, r2
     d7e:	b2db      	uxtb	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d001      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
			return false;
     d84:	2300      	movs	r3, #0
     d86:	e05b      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d88:	4b3c      	ldr	r3, [pc, #240]	; (e7c <sd_mmc_spi_card_init+0x1d8>)
     d8a:	447b      	add	r3, pc
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	7adb      	ldrb	r3, [r3, #11]
     d90:	001a      	movs	r2, r3
     d92:	2301      	movs	r3, #1
     d94:	4013      	ands	r3, r2
     d96:	d01a      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
		if (!sd_mmc_cmd9_spi()) {
     d98:	4b39      	ldr	r3, [pc, #228]	; (e80 <sd_mmc_spi_card_init+0x1dc>)
     d9a:	447b      	add	r3, pc
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	001a      	movs	r2, r3
     da2:	2301      	movs	r3, #1
     da4:	4053      	eors	r3, r2
     da6:	b2db      	uxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	d001      	beq.n	db0 <sd_mmc_spi_card_init+0x10c>
			return false;
     dac:	2300      	movs	r3, #0
     dae:	e047      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		sd_decode_csd();
     db0:	4b34      	ldr	r3, [pc, #208]	; (e84 <sd_mmc_spi_card_init+0x1e0>)
     db2:	447b      	add	r3, pc
     db4:	4798      	blx	r3
		if (!sd_acmd51()) {
     db6:	4b34      	ldr	r3, [pc, #208]	; (e88 <sd_mmc_spi_card_init+0x1e4>)
     db8:	447b      	add	r3, pc
     dba:	4798      	blx	r3
     dbc:	0003      	movs	r3, r0
     dbe:	001a      	movs	r2, r3
     dc0:	2301      	movs	r3, #1
     dc2:	4053      	eors	r3, r2
     dc4:	b2db      	uxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d001      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
			return false;
     dca:	2300      	movs	r3, #0
     dcc:	e038      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dce:	4b2f      	ldr	r3, [pc, #188]	; (e8c <sd_mmc_spi_card_init+0x1e8>)
     dd0:	447b      	add	r3, pc
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	7adb      	ldrb	r3, [r3, #11]
     dd6:	001a      	movs	r2, r3
     dd8:	2301      	movs	r3, #1
     dda:	4013      	ands	r3, r2
     ddc:	d018      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
     dde:	4b2c      	ldr	r3, [pc, #176]	; (e90 <sd_mmc_spi_card_init+0x1ec>)
     de0:	447b      	add	r3, pc
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	7adb      	ldrb	r3, [r3, #11]
     de6:	001a      	movs	r2, r3
     de8:	2308      	movs	r3, #8
     dea:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dec:	d110      	bne.n	e10 <sd_mmc_spi_card_init+0x16c>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	009b      	lsls	r3, r3, #2
     df2:	4a28      	ldr	r2, [pc, #160]	; (e94 <sd_mmc_spi_card_init+0x1f0>)
     df4:	0019      	movs	r1, r3
     df6:	0010      	movs	r0, r2
     df8:	4b18      	ldr	r3, [pc, #96]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     dfa:	58e3      	ldr	r3, [r4, r3]
     dfc:	4798      	blx	r3
     dfe:	0003      	movs	r3, r0
     e00:	001a      	movs	r2, r3
     e02:	2301      	movs	r3, #1
     e04:	4053      	eors	r3, r2
     e06:	b2db      	uxtb	r3, r3
     e08:	2b00      	cmp	r3, #0
     e0a:	d001      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			return false;
     e0c:	2300      	movs	r3, #0
     e0e:	e017      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e10:	4b21      	ldr	r3, [pc, #132]	; (e98 <sd_mmc_spi_card_init+0x1f4>)
     e12:	447b      	add	r3, pc
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	7adb      	ldrb	r3, [r3, #11]
     e18:	001a      	movs	r2, r3
     e1a:	2301      	movs	r3, #1
     e1c:	4013      	ands	r3, r2
     e1e:	d00b      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
		if (!sd_mmc_cmd13()) {
     e20:	4b1e      	ldr	r3, [pc, #120]	; (e9c <sd_mmc_spi_card_init+0x1f8>)
     e22:	447b      	add	r3, pc
     e24:	4798      	blx	r3
     e26:	0003      	movs	r3, r0
     e28:	001a      	movs	r2, r3
     e2a:	2301      	movs	r3, #1
     e2c:	4053      	eors	r3, r2
     e2e:	b2db      	uxtb	r3, r3
     e30:	2b00      	cmp	r3, #0
     e32:	d001      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
			return false;
     e34:	2300      	movs	r3, #0
     e36:	e003      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	sd_mmc_configure_slot();
     e38:	4b19      	ldr	r3, [pc, #100]	; (ea0 <sd_mmc_spi_card_init+0x1fc>)
     e3a:	447b      	add	r3, pc
     e3c:	4798      	blx	r3
	return true;
     e3e:	2301      	movs	r3, #1
}
     e40:	0018      	movs	r0, r3
     e42:	46bd      	mov	sp, r7
     e44:	b003      	add	sp, #12
     e46:	bd90      	pop	{r4, r7, pc}
     e48:	00011134 	.word	0x00011134
     e4c:	1ffff50a 	.word	0x1ffff50a
     e50:	1ffff500 	.word	0x1ffff500
     e54:	1ffff4f6 	.word	0x1ffff4f6
     e58:	000002f4 	.word	0x000002f4
     e5c:	00000264 	.word	0x00000264
     e60:	fffff73b 	.word	0xfffff73b
     e64:	fffff717 	.word	0xfffff717
     e68:	1ffff492 	.word	0x1ffff492
     e6c:	fffff5ed 	.word	0xfffff5ed
     e70:	1ffff468 	.word	0x1ffff468
     e74:	0000013f 	.word	0x0000013f
     e78:	0000113b 	.word	0x0000113b
     e7c:	1ffff436 	.word	0x1ffff436
     e80:	fffff85f 	.word	0xfffff85f
     e84:	fffffa7b 	.word	0xfffffa7b
     e88:	fffffc29 	.word	0xfffffc29
     e8c:	1ffff3f0 	.word	0x1ffff3f0
     e90:	1ffff3e0 	.word	0x1ffff3e0
     e94:	00001110 	.word	0x00001110
     e98:	1ffff3ae 	.word	0x1ffff3ae
     e9c:	fffffb57 	.word	0xfffffb57
     ea0:	fffffddf 	.word	0xfffffddf

00000ea4 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
     ea4:	b590      	push	{r4, r7, lr}
     ea6:	b083      	sub	sp, #12
     ea8:	af00      	add	r7, sp, #0
     eaa:	4c3a      	ldr	r4, [pc, #232]	; (f94 <sd_mmc_spi_install_mmc+0xf0>)
     eac:	447c      	add	r4, pc
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     eae:	2388      	movs	r3, #136	; 0x88
     eb0:	015b      	lsls	r3, r3, #5
     eb2:	2100      	movs	r1, #0
     eb4:	0018      	movs	r0, r3
     eb6:	4b38      	ldr	r3, [pc, #224]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eb8:	58e3      	ldr	r3, [r4, r3]
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	001a      	movs	r2, r3
     ec0:	2301      	movs	r3, #1
     ec2:	4053      	eors	r3, r2
     ec4:	b2db      	uxtb	r3, r3
     ec6:	2b00      	cmp	r3, #0
     ec8:	d001      	beq.n	ece <sd_mmc_spi_install_mmc+0x2a>
		return false;
     eca:	2300      	movs	r3, #0
     ecc:	e05e      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	if (!mmc_spi_op_cond()) {
     ece:	4b33      	ldr	r3, [pc, #204]	; (f9c <sd_mmc_spi_install_mmc+0xf8>)
     ed0:	447b      	add	r3, pc
     ed2:	4798      	blx	r3
     ed4:	0003      	movs	r3, r0
     ed6:	001a      	movs	r2, r3
     ed8:	2301      	movs	r3, #1
     eda:	4053      	eors	r3, r2
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d001      	beq.n	ee6 <sd_mmc_spi_install_mmc+0x42>
		return false;
     ee2:	2300      	movs	r3, #0
     ee4:	e052      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ee6:	4b2e      	ldr	r3, [pc, #184]	; (fa0 <sd_mmc_spi_install_mmc+0xfc>)
     ee8:	2100      	movs	r1, #0
     eea:	0018      	movs	r0, r3
     eec:	4b2a      	ldr	r3, [pc, #168]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eee:	58e3      	ldr	r3, [r4, r3]
     ef0:	4798      	blx	r3
     ef2:	0003      	movs	r3, r0
     ef4:	001a      	movs	r2, r3
     ef6:	2301      	movs	r3, #1
     ef8:	4053      	eors	r3, r2
     efa:	b2db      	uxtb	r3, r3
     efc:	2b00      	cmp	r3, #0
     efe:	d001      	beq.n	f04 <sd_mmc_spi_install_mmc+0x60>
		return false;
     f00:	2300      	movs	r3, #0
     f02:	e043      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
     f04:	4b27      	ldr	r3, [pc, #156]	; (fa4 <sd_mmc_spi_install_mmc+0x100>)
     f06:	447b      	add	r3, pc
     f08:	4798      	blx	r3
     f0a:	0003      	movs	r3, r0
     f0c:	001a      	movs	r2, r3
     f0e:	2301      	movs	r3, #1
     f10:	4053      	eors	r3, r2
     f12:	b2db      	uxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <sd_mmc_spi_install_mmc+0x78>
		return false;
     f18:	2300      	movs	r3, #0
     f1a:	e037      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	mmc_decode_csd();
     f1c:	4b22      	ldr	r3, [pc, #136]	; (fa8 <sd_mmc_spi_install_mmc+0x104>)
     f1e:	447b      	add	r3, pc
     f20:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f22:	4b22      	ldr	r3, [pc, #136]	; (fac <sd_mmc_spi_install_mmc+0x108>)
     f24:	447b      	add	r3, pc
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	7b1b      	ldrb	r3, [r3, #12]
     f2a:	2b3f      	cmp	r3, #63	; 0x3f
     f2c:	d90d      	bls.n	f4a <sd_mmc_spi_install_mmc+0xa6>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
     f2e:	1dfb      	adds	r3, r7, #7
     f30:	0018      	movs	r0, r3
     f32:	4b1f      	ldr	r3, [pc, #124]	; (fb0 <sd_mmc_spi_install_mmc+0x10c>)
     f34:	447b      	add	r3, pc
     f36:	4798      	blx	r3
     f38:	0003      	movs	r3, r0
     f3a:	001a      	movs	r2, r3
     f3c:	2301      	movs	r3, #1
     f3e:	4053      	eors	r3, r2
     f40:	b2db      	uxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	d001      	beq.n	f4a <sd_mmc_spi_install_mmc+0xa6>
			return false;
     f46:	2300      	movs	r3, #0
     f48:	e020      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	009b      	lsls	r3, r3, #2
     f4e:	4a19      	ldr	r2, [pc, #100]	; (fb4 <sd_mmc_spi_install_mmc+0x110>)
     f50:	0019      	movs	r1, r3
     f52:	0010      	movs	r0, r2
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     f56:	58e3      	ldr	r3, [r4, r3]
     f58:	4798      	blx	r3
     f5a:	0003      	movs	r3, r0
     f5c:	001a      	movs	r2, r3
     f5e:	2301      	movs	r3, #1
     f60:	4053      	eors	r3, r2
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d001      	beq.n	f6c <sd_mmc_spi_install_mmc+0xc8>
		return false;
     f68:	2300      	movs	r3, #0
     f6a:	e00f      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
     f6c:	4b12      	ldr	r3, [pc, #72]	; (fb8 <sd_mmc_spi_install_mmc+0x114>)
     f6e:	447b      	add	r3, pc
     f70:	4798      	blx	r3
     f72:	0003      	movs	r3, r0
     f74:	001a      	movs	r2, r3
     f76:	2301      	movs	r3, #1
     f78:	4053      	eors	r3, r2
     f7a:	b2db      	uxtb	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d001      	beq.n	f84 <sd_mmc_spi_install_mmc+0xe0>
		return false;
     f80:	2300      	movs	r3, #0
     f82:	e003      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
     f84:	4b0d      	ldr	r3, [pc, #52]	; (fbc <sd_mmc_spi_install_mmc+0x118>)
     f86:	447b      	add	r3, pc
     f88:	4798      	blx	r3
	return true;
     f8a:	2301      	movs	r3, #1
}
     f8c:	0018      	movs	r0, r3
     f8e:	46bd      	mov	sp, r7
     f90:	b003      	add	sp, #12
     f92:	bd90      	pop	{r4, r7, pc}
     f94:	00010f34 	.word	0x00010f34
     f98:	00000264 	.word	0x00000264
     f9c:	fffff39d 	.word	0xfffff39d
     fa0:	0000113b 	.word	0x0000113b
     fa4:	fffff6f3 	.word	0xfffff6f3
     fa8:	fffff75f 	.word	0xfffff75f
     fac:	1ffff29c 	.word	0x1ffff29c
     fb0:	fffff581 	.word	0xfffff581
     fb4:	00001110 	.word	0x00001110
     fb8:	fffffa0b 	.word	0xfffffa0b
     fbc:	fffffc93 	.word	0xfffffc93

00000fc0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	4a11      	ldr	r2, [pc, #68]	; (100c <sd_mmc_init+0x4c>)
     fc8:	447a      	add	r2, pc
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fca:	1dfb      	adds	r3, r7, #7
     fcc:	2100      	movs	r1, #0
     fce:	7019      	strb	r1, [r3, #0]
     fd0:	e00d      	b.n	fee <sd_mmc_init+0x2e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     fd2:	1dfb      	adds	r3, r7, #7
     fd4:	781b      	ldrb	r3, [r3, #0]
     fd6:	490e      	ldr	r1, [pc, #56]	; (1010 <sd_mmc_init+0x50>)
     fd8:	4479      	add	r1, pc
     fda:	015b      	lsls	r3, r3, #5
     fdc:	18cb      	adds	r3, r1, r3
     fde:	330a      	adds	r3, #10
     fe0:	2104      	movs	r1, #4
     fe2:	7019      	strb	r1, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fe4:	1dfb      	adds	r3, r7, #7
     fe6:	7819      	ldrb	r1, [r3, #0]
     fe8:	1dfb      	adds	r3, r7, #7
     fea:	3101      	adds	r1, #1
     fec:	7019      	strb	r1, [r3, #0]
     fee:	1dfb      	adds	r3, r7, #7
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d0ed      	beq.n	fd2 <sd_mmc_init+0x12>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     ff6:	4b07      	ldr	r3, [pc, #28]	; (1014 <sd_mmc_init+0x54>)
     ff8:	447b      	add	r3, pc
     ffa:	21ff      	movs	r1, #255	; 0xff
     ffc:	7019      	strb	r1, [r3, #0]
	driver_init();
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <sd_mmc_init+0x58>)
    1000:	58d3      	ldr	r3, [r2, r3]
    1002:	4798      	blx	r3
}
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	46bd      	mov	sp, r7
    1008:	b002      	add	sp, #8
    100a:	bd80      	pop	{r7, pc}
    100c:	00010e18 	.word	0x00010e18
    1010:	1ffff1c4 	.word	0x1ffff1c4
    1014:	1ffff1c4 	.word	0x1ffff1c4
    1018:	0000017c 	.word	0x0000017c

0000101c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    101c:	b590      	push	{r4, r7, lr}
    101e:	b085      	sub	sp, #20
    1020:	af00      	add	r7, sp, #0
    1022:	0002      	movs	r2, r0
    1024:	1dfb      	adds	r3, r7, #7
    1026:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1028:	230f      	movs	r3, #15
    102a:	18fc      	adds	r4, r7, r3
    102c:	1dfb      	adds	r3, r7, #7
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	0018      	movs	r0, r3
    1032:	4b16      	ldr	r3, [pc, #88]	; (108c <sd_mmc_check+0x70>)
    1034:	447b      	add	r3, pc
    1036:	4798      	blx	r3
    1038:	0003      	movs	r3, r0
    103a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	2b01      	cmp	r3, #1
    1044:	d006      	beq.n	1054 <sd_mmc_check+0x38>
		sd_mmc_deselect_slot();
    1046:	4b12      	ldr	r3, [pc, #72]	; (1090 <sd_mmc_check+0x74>)
    1048:	447b      	add	r3, pc
    104a:	4798      	blx	r3
		return sd_mmc_err;
    104c:	230f      	movs	r3, #15
    104e:	18fb      	adds	r3, r7, r3
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	e017      	b.n	1084 <sd_mmc_check+0x68>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1054:	4b0f      	ldr	r3, [pc, #60]	; (1094 <sd_mmc_check+0x78>)
    1056:	447b      	add	r3, pc
    1058:	4798      	blx	r3
    105a:	1e03      	subs	r3, r0, #0
    105c:	d009      	beq.n	1072 <sd_mmc_check+0x56>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    105e:	4b0e      	ldr	r3, [pc, #56]	; (1098 <sd_mmc_check+0x7c>)
    1060:	447b      	add	r3, pc
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2200      	movs	r2, #0
    1066:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <sd_mmc_check+0x80>)
    106a:	447b      	add	r3, pc
    106c:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    106e:	2301      	movs	r3, #1
    1070:	e008      	b.n	1084 <sd_mmc_check+0x68>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1072:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <sd_mmc_check+0x84>)
    1074:	447b      	add	r3, pc
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2203      	movs	r2, #3
    107a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    107c:	4b09      	ldr	r3, [pc, #36]	; (10a4 <sd_mmc_check+0x88>)
    107e:	447b      	add	r3, pc
    1080:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1082:	2303      	movs	r3, #3
}
    1084:	0018      	movs	r0, r3
    1086:	46bd      	mov	sp, r7
    1088:	b005      	add	sp, #20
    108a:	bd90      	pop	{r4, r7, pc}
    108c:	fffffaed 	.word	0xfffffaed
    1090:	fffffc21 	.word	0xfffffc21
    1094:	fffffc4b 	.word	0xfffffc4b
    1098:	1ffff160 	.word	0x1ffff160
    109c:	fffffbff 	.word	0xfffffbff
    10a0:	1ffff14c 	.word	0x1ffff14c
    10a4:	fffffbeb 	.word	0xfffffbeb

000010a8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	0002      	movs	r2, r0
    10b0:	1dfb      	adds	r3, r7, #7
    10b2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10b4:	1dfb      	adds	r3, r7, #7
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	0018      	movs	r0, r3
    10ba:	4b09      	ldr	r3, [pc, #36]	; (10e0 <sd_mmc_get_type+0x38>)
    10bc:	447b      	add	r3, pc
    10be:	4798      	blx	r3
    10c0:	1e03      	subs	r3, r0, #0
    10c2:	d001      	beq.n	10c8 <sd_mmc_get_type+0x20>
		return CARD_TYPE_UNKNOWN;
    10c4:	2300      	movs	r3, #0
    10c6:	e006      	b.n	10d6 <sd_mmc_get_type+0x2e>
	}
	sd_mmc_deselect_slot();
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <sd_mmc_get_type+0x3c>)
    10ca:	447b      	add	r3, pc
    10cc:	4798      	blx	r3
	return sd_mmc_card->type;
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <sd_mmc_get_type+0x40>)
    10d0:	447b      	add	r3, pc
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	7adb      	ldrb	r3, [r3, #11]
}
    10d6:	0018      	movs	r0, r3
    10d8:	46bd      	mov	sp, r7
    10da:	b002      	add	sp, #8
    10dc:	bd80      	pop	{r7, pc}
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	fffffa65 	.word	0xfffffa65
    10e4:	fffffb9f 	.word	0xfffffb9f
    10e8:	1ffff0f0 	.word	0x1ffff0f0

000010ec <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
    10f0:	af00      	add	r7, sp, #0
    10f2:	0002      	movs	r2, r0
    10f4:	1dfb      	adds	r3, r7, #7
    10f6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10f8:	1dfb      	adds	r3, r7, #7
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	0018      	movs	r0, r3
    10fe:	4b09      	ldr	r3, [pc, #36]	; (1124 <sd_mmc_get_capacity+0x38>)
    1100:	447b      	add	r3, pc
    1102:	4798      	blx	r3
    1104:	1e03      	subs	r3, r0, #0
    1106:	d001      	beq.n	110c <sd_mmc_get_capacity+0x20>
		return 0;
    1108:	2300      	movs	r3, #0
    110a:	e006      	b.n	111a <sd_mmc_get_capacity+0x2e>
	}
	sd_mmc_deselect_slot();
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <sd_mmc_get_capacity+0x3c>)
    110e:	447b      	add	r3, pc
    1110:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1112:	4b06      	ldr	r3, [pc, #24]	; (112c <sd_mmc_get_capacity+0x40>)
    1114:	447b      	add	r3, pc
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	685b      	ldr	r3, [r3, #4]
}
    111a:	0018      	movs	r0, r3
    111c:	46bd      	mov	sp, r7
    111e:	b002      	add	sp, #8
    1120:	bd80      	pop	{r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	fffffa21 	.word	0xfffffa21
    1128:	fffffb5b 	.word	0xfffffb5b
    112c:	1ffff0ac 	.word	0x1ffff0ac

00001130 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1130:	b580      	push	{r7, lr}
    1132:	b082      	sub	sp, #8
    1134:	af00      	add	r7, sp, #0
    1136:	0002      	movs	r2, r0
    1138:	1dfb      	adds	r3, r7, #7
    113a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    113c:	2300      	movs	r3, #0
}
    113e:	0018      	movs	r0, r3
    1140:	46bd      	mov	sp, r7
    1142:	b002      	add	sp, #8
    1144:	bd80      	pop	{r7, pc}
	...

00001148 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1148:	b5b0      	push	{r4, r5, r7, lr}
    114a:	b088      	sub	sp, #32
    114c:	af02      	add	r7, sp, #8
    114e:	6039      	str	r1, [r7, #0]
    1150:	0011      	movs	r1, r2
    1152:	1dfb      	adds	r3, r7, #7
    1154:	1c02      	adds	r2, r0, #0
    1156:	701a      	strb	r2, [r3, #0]
    1158:	1d3b      	adds	r3, r7, #4
    115a:	1c0a      	adds	r2, r1, #0
    115c:	801a      	strh	r2, [r3, #0]
    115e:	4d31      	ldr	r5, [pc, #196]	; (1224 <sd_mmc_init_read_blocks+0xdc>)
    1160:	447d      	add	r5, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1162:	230f      	movs	r3, #15
    1164:	18fc      	adds	r4, r7, r3
    1166:	1dfb      	adds	r3, r7, #7
    1168:	781b      	ldrb	r3, [r3, #0]
    116a:	0018      	movs	r0, r3
    116c:	4b2e      	ldr	r3, [pc, #184]	; (1228 <sd_mmc_init_read_blocks+0xe0>)
    116e:	447b      	add	r3, pc
    1170:	4798      	blx	r3
    1172:	0003      	movs	r3, r0
    1174:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1176:	230f      	movs	r3, #15
    1178:	18fb      	adds	r3, r7, r3
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	2b00      	cmp	r3, #0
    117e:	d003      	beq.n	1188 <sd_mmc_init_read_blocks+0x40>
		return sd_mmc_err;
    1180:	230f      	movs	r3, #15
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	e048      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1188:	4b28      	ldr	r3, [pc, #160]	; (122c <sd_mmc_init_read_blocks+0xe4>)
    118a:	447b      	add	r3, pc
    118c:	4798      	blx	r3
    118e:	0003      	movs	r3, r0
    1190:	001a      	movs	r2, r3
    1192:	2301      	movs	r3, #1
    1194:	4053      	eors	r3, r2
    1196:	b2db      	uxtb	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	d004      	beq.n	11a6 <sd_mmc_init_read_blocks+0x5e>
		sd_mmc_deselect_slot();
    119c:	4b24      	ldr	r3, [pc, #144]	; (1230 <sd_mmc_init_read_blocks+0xe8>)
    119e:	447b      	add	r3, pc
    11a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11a2:	2305      	movs	r3, #5
    11a4:	e039      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	if (nb_block > 1) {
    11a6:	1d3b      	adds	r3, r7, #4
    11a8:	881b      	ldrh	r3, [r3, #0]
    11aa:	2b01      	cmp	r3, #1
    11ac:	d902      	bls.n	11b4 <sd_mmc_init_read_blocks+0x6c>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    11ae:	4b21      	ldr	r3, [pc, #132]	; (1234 <sd_mmc_init_read_blocks+0xec>)
    11b0:	617b      	str	r3, [r7, #20]
    11b2:	e001      	b.n	11b8 <sd_mmc_init_read_blocks+0x70>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11b4:	4b20      	ldr	r3, [pc, #128]	; (1238 <sd_mmc_init_read_blocks+0xf0>)
    11b6:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11b8:	4b20      	ldr	r3, [pc, #128]	; (123c <sd_mmc_init_read_blocks+0xf4>)
    11ba:	447b      	add	r3, pc
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	7adb      	ldrb	r3, [r3, #11]
    11c0:	001a      	movs	r2, r3
    11c2:	2308      	movs	r3, #8
    11c4:	4013      	ands	r3, r2
    11c6:	d002      	beq.n	11ce <sd_mmc_init_read_blocks+0x86>
		arg = start;
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	613b      	str	r3, [r7, #16]
    11cc:	e002      	b.n	11d4 <sd_mmc_init_read_blocks+0x8c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    11ce:	683b      	ldr	r3, [r7, #0]
    11d0:	025b      	lsls	r3, r3, #9
    11d2:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11d4:	1d3b      	adds	r3, r7, #4
    11d6:	881c      	ldrh	r4, [r3, #0]
    11d8:	2380      	movs	r3, #128	; 0x80
    11da:	009a      	lsls	r2, r3, #2
    11dc:	6939      	ldr	r1, [r7, #16]
    11de:	6978      	ldr	r0, [r7, #20]
    11e0:	2301      	movs	r3, #1
    11e2:	9300      	str	r3, [sp, #0]
    11e4:	0023      	movs	r3, r4
    11e6:	4c16      	ldr	r4, [pc, #88]	; (1240 <sd_mmc_init_read_blocks+0xf8>)
    11e8:	592c      	ldr	r4, [r5, r4]
    11ea:	47a0      	blx	r4
    11ec:	0003      	movs	r3, r0
    11ee:	001a      	movs	r2, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4053      	eors	r3, r2
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d004      	beq.n	1204 <sd_mmc_init_read_blocks+0xbc>
		sd_mmc_deselect_slot();
    11fa:	4b12      	ldr	r3, [pc, #72]	; (1244 <sd_mmc_init_read_blocks+0xfc>)
    11fc:	447b      	add	r3, pc
    11fe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1200:	2305      	movs	r3, #5
    1202:	e00a      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1204:	4b10      	ldr	r3, [pc, #64]	; (1248 <sd_mmc_init_read_blocks+0x100>)
    1206:	447b      	add	r3, pc
    1208:	1d3a      	adds	r2, r7, #4
    120a:	8812      	ldrh	r2, [r2, #0]
    120c:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    120e:	4b0f      	ldr	r3, [pc, #60]	; (124c <sd_mmc_init_read_blocks+0x104>)
    1210:	447b      	add	r3, pc
    1212:	1d3a      	adds	r2, r7, #4
    1214:	8812      	ldrh	r2, [r2, #0]
    1216:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1218:	2300      	movs	r3, #0
}
    121a:	0018      	movs	r0, r3
    121c:	46bd      	mov	sp, r7
    121e:	b006      	add	sp, #24
    1220:	bdb0      	pop	{r4, r5, r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	00010c80 	.word	0x00010c80
    1228:	fffff9b3 	.word	0xfffff9b3
    122c:	fffff7ef 	.word	0xfffff7ef
    1230:	fffffacb 	.word	0xfffffacb
    1234:	00101112 	.word	0x00101112
    1238:	00081111 	.word	0x00081111
    123c:	1ffff006 	.word	0x1ffff006
    1240:	00000130 	.word	0x00000130
    1244:	fffffa6d 	.word	0xfffffa6d
    1248:	1fffefc0 	.word	0x1fffefc0
    124c:	1fffefb4 	.word	0x1fffefb4

00001250 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
    1258:	000a      	movs	r2, r1
    125a:	1cbb      	adds	r3, r7, #2
    125c:	801a      	strh	r2, [r3, #0]
    125e:	4a12      	ldr	r2, [pc, #72]	; (12a8 <sd_mmc_start_read_blocks+0x58>)
    1260:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1262:	1cbb      	adds	r3, r7, #2
    1264:	8819      	ldrh	r1, [r3, #0]
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	0018      	movs	r0, r3
    126a:	4b10      	ldr	r3, [pc, #64]	; (12ac <sd_mmc_start_read_blocks+0x5c>)
    126c:	58d3      	ldr	r3, [r2, r3]
    126e:	4798      	blx	r3
    1270:	0003      	movs	r3, r0
    1272:	001a      	movs	r2, r3
    1274:	2301      	movs	r3, #1
    1276:	4053      	eors	r3, r2
    1278:	b2db      	uxtb	r3, r3
    127a:	2b00      	cmp	r3, #0
    127c:	d005      	beq.n	128a <sd_mmc_start_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    127e:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <sd_mmc_start_read_blocks+0x60>)
    1280:	447b      	add	r3, pc
    1282:	2200      	movs	r2, #0
    1284:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1286:	2305      	movs	r3, #5
    1288:	e00a      	b.n	12a0 <sd_mmc_start_read_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <sd_mmc_start_read_blocks+0x64>)
    128c:	447b      	add	r3, pc
    128e:	881a      	ldrh	r2, [r3, #0]
    1290:	1cbb      	adds	r3, r7, #2
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	1ad3      	subs	r3, r2, r3
    1296:	b29a      	uxth	r2, r3
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <sd_mmc_start_read_blocks+0x68>)
    129a:	447b      	add	r3, pc
    129c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    129e:	2300      	movs	r3, #0
}
    12a0:	0018      	movs	r0, r3
    12a2:	46bd      	mov	sp, r7
    12a4:	b002      	add	sp, #8
    12a6:	bd80      	pop	{r7, pc}
    12a8:	00010b80 	.word	0x00010b80
    12ac:	00000210 	.word	0x00000210
    12b0:	1fffef46 	.word	0x1fffef46
    12b4:	1fffef3a 	.word	0x1fffef3a
    12b8:	1fffef2c 	.word	0x1fffef2c

000012bc <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    12bc:	b590      	push	{r4, r7, lr}
    12be:	b083      	sub	sp, #12
    12c0:	af00      	add	r7, sp, #0
    12c2:	0002      	movs	r2, r0
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	701a      	strb	r2, [r3, #0]
    12c8:	4c21      	ldr	r4, [pc, #132]	; (1350 <sd_mmc_wait_end_of_read_blocks+0x94>)
    12ca:	447c      	add	r4, pc
	if (!driver_wait_end_of_read_blocks()) {
    12cc:	4b21      	ldr	r3, [pc, #132]	; (1354 <sd_mmc_wait_end_of_read_blocks+0x98>)
    12ce:	58e3      	ldr	r3, [r4, r3]
    12d0:	4798      	blx	r3
    12d2:	0003      	movs	r3, r0
    12d4:	001a      	movs	r2, r3
    12d6:	2301      	movs	r3, #1
    12d8:	4053      	eors	r3, r2
    12da:	b2db      	uxtb	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	d001      	beq.n	12e4 <sd_mmc_wait_end_of_read_blocks+0x28>
		return SD_MMC_ERR_COMM;
    12e0:	2305      	movs	r3, #5
    12e2:	e030      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	if (abort) {
    12e4:	1dfb      	adds	r3, r7, #7
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d004      	beq.n	12f6 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    12ec:	4b1a      	ldr	r3, [pc, #104]	; (1358 <sd_mmc_wait_end_of_read_blocks+0x9c>)
    12ee:	447b      	add	r3, pc
    12f0:	2200      	movs	r2, #0
    12f2:	801a      	strh	r2, [r3, #0]
    12f4:	e006      	b.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    12f6:	4b19      	ldr	r3, [pc, #100]	; (135c <sd_mmc_wait_end_of_read_blocks+0xa0>)
    12f8:	447b      	add	r3, pc
    12fa:	881b      	ldrh	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d001      	beq.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_OK;
    1300:	2300      	movs	r3, #0
    1302:	e020      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1304:	4b16      	ldr	r3, [pc, #88]	; (1360 <sd_mmc_wait_end_of_read_blocks+0xa4>)
    1306:	447b      	add	r3, pc
    1308:	881b      	ldrh	r3, [r3, #0]
    130a:	2b01      	cmp	r3, #1
    130c:	d104      	bne.n	1318 <sd_mmc_wait_end_of_read_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <sd_mmc_wait_end_of_read_blocks+0xa8>)
    1310:	447b      	add	r3, pc
    1312:	4798      	blx	r3
		return SD_MMC_OK;
    1314:	2300      	movs	r3, #0
    1316:	e016      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1318:	4b13      	ldr	r3, [pc, #76]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    131a:	2100      	movs	r1, #0
    131c:	0018      	movs	r0, r3
    131e:	4b13      	ldr	r3, [pc, #76]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    1320:	58e3      	ldr	r3, [r4, r3]
    1322:	4798      	blx	r3
    1324:	0003      	movs	r3, r0
    1326:	001a      	movs	r2, r3
    1328:	2301      	movs	r3, #1
    132a:	4053      	eors	r3, r2
    132c:	b2db      	uxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d005      	beq.n	133e <sd_mmc_wait_end_of_read_blocks+0x82>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1332:	4b0d      	ldr	r3, [pc, #52]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    1334:	2100      	movs	r1, #0
    1336:	0018      	movs	r0, r3
    1338:	4b0c      	ldr	r3, [pc, #48]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    133a:	58e3      	ldr	r3, [r4, r3]
    133c:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    133e:	4b0c      	ldr	r3, [pc, #48]	; (1370 <sd_mmc_wait_end_of_read_blocks+0xb4>)
    1340:	447b      	add	r3, pc
    1342:	4798      	blx	r3
	return SD_MMC_OK;
    1344:	2300      	movs	r3, #0
}
    1346:	0018      	movs	r0, r3
    1348:	46bd      	mov	sp, r7
    134a:	b003      	add	sp, #12
    134c:	bd90      	pop	{r4, r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	00010b16 	.word	0x00010b16
    1354:	00000188 	.word	0x00000188
    1358:	1fffeed8 	.word	0x1fffeed8
    135c:	1fffeece 	.word	0x1fffeece
    1360:	1fffeebe 	.word	0x1fffeebe
    1364:	fffff959 	.word	0xfffff959
    1368:	0000310c 	.word	0x0000310c
    136c:	00000264 	.word	0x00000264
    1370:	fffff929 	.word	0xfffff929

00001374 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1374:	b5b0      	push	{r4, r5, r7, lr}
    1376:	b088      	sub	sp, #32
    1378:	af02      	add	r7, sp, #8
    137a:	6039      	str	r1, [r7, #0]
    137c:	0011      	movs	r1, r2
    137e:	1dfb      	adds	r3, r7, #7
    1380:	1c02      	adds	r2, r0, #0
    1382:	701a      	strb	r2, [r3, #0]
    1384:	1d3b      	adds	r3, r7, #4
    1386:	1c0a      	adds	r2, r1, #0
    1388:	801a      	strh	r2, [r3, #0]
    138a:	4c30      	ldr	r4, [pc, #192]	; (144c <sd_mmc_init_write_blocks+0xd8>)
    138c:	447c      	add	r4, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    138e:	230f      	movs	r3, #15
    1390:	18fd      	adds	r5, r7, r3
    1392:	1dfb      	adds	r3, r7, #7
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	0018      	movs	r0, r3
    1398:	4b2d      	ldr	r3, [pc, #180]	; (1450 <sd_mmc_init_write_blocks+0xdc>)
    139a:	447b      	add	r3, pc
    139c:	4798      	blx	r3
    139e:	0003      	movs	r3, r0
    13a0:	702b      	strb	r3, [r5, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    13a2:	230f      	movs	r3, #15
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781b      	ldrb	r3, [r3, #0]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d003      	beq.n	13b4 <sd_mmc_init_write_blocks+0x40>
		return sd_mmc_err;
    13ac:	230f      	movs	r3, #15
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	e046      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}
	if (sd_mmc_is_write_protected(slot)) {
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	0018      	movs	r0, r3
    13ba:	4b26      	ldr	r3, [pc, #152]	; (1454 <sd_mmc_init_write_blocks+0xe0>)
    13bc:	58e3      	ldr	r3, [r4, r3]
    13be:	4798      	blx	r3
    13c0:	1e03      	subs	r3, r0, #0
    13c2:	d004      	beq.n	13ce <sd_mmc_init_write_blocks+0x5a>
		sd_mmc_deselect_slot();
    13c4:	4b24      	ldr	r3, [pc, #144]	; (1458 <sd_mmc_init_write_blocks+0xe4>)
    13c6:	447b      	add	r3, pc
    13c8:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    13ca:	2307      	movs	r3, #7
    13cc:	e039      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}

	if (nb_block > 1) {
    13ce:	1d3b      	adds	r3, r7, #4
    13d0:	881b      	ldrh	r3, [r3, #0]
    13d2:	2b01      	cmp	r3, #1
    13d4:	d902      	bls.n	13dc <sd_mmc_init_write_blocks+0x68>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    13d6:	4b21      	ldr	r3, [pc, #132]	; (145c <sd_mmc_init_write_blocks+0xe8>)
    13d8:	617b      	str	r3, [r7, #20]
    13da:	e001      	b.n	13e0 <sd_mmc_init_write_blocks+0x6c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    13dc:	4b20      	ldr	r3, [pc, #128]	; (1460 <sd_mmc_init_write_blocks+0xec>)
    13de:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    13e0:	4b20      	ldr	r3, [pc, #128]	; (1464 <sd_mmc_init_write_blocks+0xf0>)
    13e2:	447b      	add	r3, pc
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	7adb      	ldrb	r3, [r3, #11]
    13e8:	001a      	movs	r2, r3
    13ea:	2308      	movs	r3, #8
    13ec:	4013      	ands	r3, r2
    13ee:	d002      	beq.n	13f6 <sd_mmc_init_write_blocks+0x82>
		arg = start;
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	613b      	str	r3, [r7, #16]
    13f4:	e002      	b.n	13fc <sd_mmc_init_write_blocks+0x88>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    13f6:	683b      	ldr	r3, [r7, #0]
    13f8:	025b      	lsls	r3, r3, #9
    13fa:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    13fc:	1d3b      	adds	r3, r7, #4
    13fe:	881d      	ldrh	r5, [r3, #0]
    1400:	2380      	movs	r3, #128	; 0x80
    1402:	009a      	lsls	r2, r3, #2
    1404:	6939      	ldr	r1, [r7, #16]
    1406:	6978      	ldr	r0, [r7, #20]
    1408:	2301      	movs	r3, #1
    140a:	9300      	str	r3, [sp, #0]
    140c:	002b      	movs	r3, r5
    140e:	4d16      	ldr	r5, [pc, #88]	; (1468 <sd_mmc_init_write_blocks+0xf4>)
    1410:	5964      	ldr	r4, [r4, r5]
    1412:	47a0      	blx	r4
    1414:	0003      	movs	r3, r0
    1416:	001a      	movs	r2, r3
    1418:	2301      	movs	r3, #1
    141a:	4053      	eors	r3, r2
    141c:	b2db      	uxtb	r3, r3
    141e:	2b00      	cmp	r3, #0
    1420:	d004      	beq.n	142c <sd_mmc_init_write_blocks+0xb8>
		sd_mmc_deselect_slot();
    1422:	4b12      	ldr	r3, [pc, #72]	; (146c <sd_mmc_init_write_blocks+0xf8>)
    1424:	447b      	add	r3, pc
    1426:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1428:	2305      	movs	r3, #5
    142a:	e00a      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    142c:	4b10      	ldr	r3, [pc, #64]	; (1470 <sd_mmc_init_write_blocks+0xfc>)
    142e:	447b      	add	r3, pc
    1430:	1d3a      	adds	r2, r7, #4
    1432:	8812      	ldrh	r2, [r2, #0]
    1434:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <sd_mmc_init_write_blocks+0x100>)
    1438:	447b      	add	r3, pc
    143a:	1d3a      	adds	r2, r7, #4
    143c:	8812      	ldrh	r2, [r2, #0]
    143e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1440:	2300      	movs	r3, #0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	b006      	add	sp, #24
    1448:	bdb0      	pop	{r4, r5, r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	00010a54 	.word	0x00010a54
    1450:	fffff787 	.word	0xfffff787
    1454:	00000148 	.word	0x00000148
    1458:	fffff8a3 	.word	0xfffff8a3
    145c:	00109119 	.word	0x00109119
    1460:	00089118 	.word	0x00089118
    1464:	1fffedde 	.word	0x1fffedde
    1468:	00000130 	.word	0x00000130
    146c:	fffff845 	.word	0xfffff845
    1470:	1fffed98 	.word	0x1fffed98
    1474:	1fffed8c 	.word	0x1fffed8c

00001478 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	000a      	movs	r2, r1
    1482:	1cbb      	adds	r3, r7, #2
    1484:	801a      	strh	r2, [r3, #0]
    1486:	4a12      	ldr	r2, [pc, #72]	; (14d0 <sd_mmc_start_write_blocks+0x58>)
    1488:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    148a:	1cbb      	adds	r3, r7, #2
    148c:	8819      	ldrh	r1, [r3, #0]
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	0018      	movs	r0, r3
    1492:	4b10      	ldr	r3, [pc, #64]	; (14d4 <sd_mmc_start_write_blocks+0x5c>)
    1494:	58d3      	ldr	r3, [r2, r3]
    1496:	4798      	blx	r3
    1498:	0003      	movs	r3, r0
    149a:	001a      	movs	r2, r3
    149c:	2301      	movs	r3, #1
    149e:	4053      	eors	r3, r2
    14a0:	b2db      	uxtb	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <sd_mmc_start_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    14a6:	4b0c      	ldr	r3, [pc, #48]	; (14d8 <sd_mmc_start_write_blocks+0x60>)
    14a8:	447b      	add	r3, pc
    14aa:	2200      	movs	r2, #0
    14ac:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    14ae:	2305      	movs	r3, #5
    14b0:	e00a      	b.n	14c8 <sd_mmc_start_write_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    14b2:	4b0a      	ldr	r3, [pc, #40]	; (14dc <sd_mmc_start_write_blocks+0x64>)
    14b4:	447b      	add	r3, pc
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	1cbb      	adds	r3, r7, #2
    14ba:	881b      	ldrh	r3, [r3, #0]
    14bc:	1ad3      	subs	r3, r2, r3
    14be:	b29a      	uxth	r2, r3
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <sd_mmc_start_write_blocks+0x68>)
    14c2:	447b      	add	r3, pc
    14c4:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    14c6:	2300      	movs	r3, #0
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b002      	add	sp, #8
    14ce:	bd80      	pop	{r7, pc}
    14d0:	00010958 	.word	0x00010958
    14d4:	000001dc 	.word	0x000001dc
    14d8:	1fffed1e 	.word	0x1fffed1e
    14dc:	1fffed12 	.word	0x1fffed12
    14e0:	1fffed04 	.word	0x1fffed04

000014e4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b082      	sub	sp, #8
    14e8:	af00      	add	r7, sp, #0
    14ea:	0002      	movs	r2, r0
    14ec:	1dfb      	adds	r3, r7, #7
    14ee:	701a      	strb	r2, [r3, #0]
    14f0:	4a17      	ldr	r2, [pc, #92]	; (1550 <sd_mmc_wait_end_of_write_blocks+0x6c>)
    14f2:	447a      	add	r2, pc
	if (!driver_wait_end_of_write_blocks()) {
    14f4:	4b17      	ldr	r3, [pc, #92]	; (1554 <sd_mmc_wait_end_of_write_blocks+0x70>)
    14f6:	58d3      	ldr	r3, [r2, r3]
    14f8:	4798      	blx	r3
    14fa:	0003      	movs	r3, r0
    14fc:	001a      	movs	r2, r3
    14fe:	2301      	movs	r3, #1
    1500:	4053      	eors	r3, r2
    1502:	b2db      	uxtb	r3, r3
    1504:	2b00      	cmp	r3, #0
    1506:	d001      	beq.n	150c <sd_mmc_wait_end_of_write_blocks+0x28>
		return SD_MMC_ERR_COMM;
    1508:	2305      	movs	r3, #5
    150a:	e01d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}
	if (abort) {
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d004      	beq.n	151e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    1514:	4b10      	ldr	r3, [pc, #64]	; (1558 <sd_mmc_wait_end_of_write_blocks+0x74>)
    1516:	447b      	add	r3, pc
    1518:	2200      	movs	r2, #0
    151a:	801a      	strh	r2, [r3, #0]
    151c:	e006      	b.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    151e:	4b0f      	ldr	r3, [pc, #60]	; (155c <sd_mmc_wait_end_of_write_blocks+0x78>)
    1520:	447b      	add	r3, pc
    1522:	881b      	ldrh	r3, [r3, #0]
    1524:	2b00      	cmp	r3, #0
    1526:	d001      	beq.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
		return SD_MMC_OK;
    1528:	2300      	movs	r3, #0
    152a:	e00d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    152c:	4b0c      	ldr	r3, [pc, #48]	; (1560 <sd_mmc_wait_end_of_write_blocks+0x7c>)
    152e:	447b      	add	r3, pc
    1530:	881b      	ldrh	r3, [r3, #0]
    1532:	2b01      	cmp	r3, #1
    1534:	d104      	bne.n	1540 <sd_mmc_wait_end_of_write_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1536:	4b0b      	ldr	r3, [pc, #44]	; (1564 <sd_mmc_wait_end_of_write_blocks+0x80>)
    1538:	447b      	add	r3, pc
    153a:	4798      	blx	r3
		return SD_MMC_OK;
    153c:	2300      	movs	r3, #0
    153e:	e003      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1540:	4b09      	ldr	r3, [pc, #36]	; (1568 <sd_mmc_wait_end_of_write_blocks+0x84>)
    1542:	447b      	add	r3, pc
    1544:	4798      	blx	r3
	return SD_MMC_OK;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	000108ee 	.word	0x000108ee
    1554:	0000023c 	.word	0x0000023c
    1558:	1fffecb0 	.word	0x1fffecb0
    155c:	1fffeca6 	.word	0x1fffeca6
    1560:	1fffec96 	.word	0x1fffec96
    1564:	fffff731 	.word	0xfffff731
    1568:	fffff727 	.word	0xfffff727

0000156c <sd_mmc_test_unit_ready>:
    156c:	b590      	push	{r4, r7, lr}
    156e:	b083      	sub	sp, #12
    1570:	af00      	add	r7, sp, #0
    1572:	0002      	movs	r2, r0
    1574:	1dfb      	adds	r3, r7, #7
    1576:	701a      	strb	r2, [r3, #0]
    1578:	4c1a      	ldr	r4, [pc, #104]	; (15e4 <sd_mmc_test_unit_ready+0x78>)
    157a:	447c      	add	r4, pc
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	0018      	movs	r0, r3
    1582:	4b19      	ldr	r3, [pc, #100]	; (15e8 <sd_mmc_test_unit_ready+0x7c>)
    1584:	58e3      	ldr	r3, [r4, r3]
    1586:	4798      	blx	r3
    1588:	0003      	movs	r3, r0
    158a:	2b01      	cmp	r3, #1
    158c:	d01b      	beq.n	15c6 <sd_mmc_test_unit_ready+0x5a>
    158e:	2b02      	cmp	r3, #2
    1590:	d01b      	beq.n	15ca <sd_mmc_test_unit_ready+0x5e>
    1592:	2b00      	cmp	r3, #0
    1594:	d121      	bne.n	15da <sd_mmc_test_unit_ready+0x6e>
    1596:	1dfb      	adds	r3, r7, #7
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	4a14      	ldr	r2, [pc, #80]	; (15ec <sd_mmc_test_unit_ready+0x80>)
    159c:	447a      	add	r2, pc
    159e:	5cd3      	ldrb	r3, [r2, r3]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d001      	beq.n	15a8 <sd_mmc_test_unit_ready+0x3c>
    15a4:	2302      	movs	r3, #2
    15a6:	e019      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	0018      	movs	r0, r3
    15ae:	4b10      	ldr	r3, [pc, #64]	; (15f0 <sd_mmc_test_unit_ready+0x84>)
    15b0:	58e3      	ldr	r3, [r4, r3]
    15b2:	4798      	blx	r3
    15b4:	0003      	movs	r3, r0
    15b6:	001a      	movs	r2, r3
    15b8:	2303      	movs	r3, #3
    15ba:	4013      	ands	r3, r2
    15bc:	d001      	beq.n	15c2 <sd_mmc_test_unit_ready+0x56>
    15be:	2300      	movs	r3, #0
    15c0:	e00c      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
    15c2:	2302      	movs	r3, #2
    15c4:	e00a      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
    15c6:	2303      	movs	r3, #3
    15c8:	e008      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
    15ca:	1dfb      	adds	r3, r7, #7
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	4a09      	ldr	r2, [pc, #36]	; (15f4 <sd_mmc_test_unit_ready+0x88>)
    15d0:	447a      	add	r2, pc
    15d2:	2100      	movs	r1, #0
    15d4:	54d1      	strb	r1, [r2, r3]
    15d6:	2302      	movs	r3, #2
    15d8:	e000      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
    15da:	2301      	movs	r3, #1
    15dc:	0018      	movs	r0, r3
    15de:	46bd      	mov	sp, r7
    15e0:	b003      	add	sp, #12
    15e2:	bd90      	pop	{r4, r7, pc}
    15e4:	00010866 	.word	0x00010866
    15e8:	00000068 	.word	0x00000068
    15ec:	1fffec2c 	.word	0x1fffec2c
    15f0:	000000e8 	.word	0x000000e8
    15f4:	1fffebf8 	.word	0x1fffebf8

000015f8 <sd_mmc_test_unit_ready_0>:
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
    15fc:	4a04      	ldr	r2, [pc, #16]	; (1610 <sd_mmc_test_unit_ready_0+0x18>)
    15fe:	447a      	add	r2, pc
    1600:	2000      	movs	r0, #0
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <sd_mmc_test_unit_ready_0+0x1c>)
    1604:	58d3      	ldr	r3, [r2, r3]
    1606:	4798      	blx	r3
    1608:	0003      	movs	r3, r0
    160a:	0018      	movs	r0, r3
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}
    1610:	000107e2 	.word	0x000107e2
    1614:	00000048 	.word	0x00000048

00001618 <sd_mmc_read_capacity>:
    1618:	b590      	push	{r4, r7, lr}
    161a:	b083      	sub	sp, #12
    161c:	af00      	add	r7, sp, #0
    161e:	0002      	movs	r2, r0
    1620:	6039      	str	r1, [r7, #0]
    1622:	1dfb      	adds	r3, r7, #7
    1624:	701a      	strb	r2, [r3, #0]
    1626:	4c0c      	ldr	r4, [pc, #48]	; (1658 <sd_mmc_read_capacity+0x40>)
    1628:	447c      	add	r4, pc
    162a:	1dfb      	adds	r3, r7, #7
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	0018      	movs	r0, r3
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <sd_mmc_read_capacity+0x44>)
    1632:	58e3      	ldr	r3, [r4, r3]
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	005b      	lsls	r3, r3, #1
    163a:	1e5a      	subs	r2, r3, #1
    163c:	683b      	ldr	r3, [r7, #0]
    163e:	601a      	str	r2, [r3, #0]
    1640:	1dfb      	adds	r3, r7, #7
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	0018      	movs	r0, r3
    1646:	4b06      	ldr	r3, [pc, #24]	; (1660 <sd_mmc_read_capacity+0x48>)
    1648:	58e3      	ldr	r3, [r4, r3]
    164a:	4798      	blx	r3
    164c:	0003      	movs	r3, r0
    164e:	0018      	movs	r0, r3
    1650:	46bd      	mov	sp, r7
    1652:	b003      	add	sp, #12
    1654:	bd90      	pop	{r4, r7, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	000107b8 	.word	0x000107b8
    165c:	000002fc 	.word	0x000002fc
    1660:	00000048 	.word	0x00000048

00001664 <sd_mmc_read_capacity_0>:
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	4a06      	ldr	r2, [pc, #24]	; (1688 <sd_mmc_read_capacity_0+0x24>)
    166e:	447a      	add	r2, pc
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	0019      	movs	r1, r3
    1674:	2000      	movs	r0, #0
    1676:	4b05      	ldr	r3, [pc, #20]	; (168c <sd_mmc_read_capacity_0+0x28>)
    1678:	58d3      	ldr	r3, [r2, r3]
    167a:	4798      	blx	r3
    167c:	0003      	movs	r3, r0
    167e:	0018      	movs	r0, r3
    1680:	46bd      	mov	sp, r7
    1682:	b002      	add	sp, #8
    1684:	bd80      	pop	{r7, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	00010772 	.word	0x00010772
    168c:	00000150 	.word	0x00000150

00001690 <sd_mmc_unload>:
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	0002      	movs	r2, r0
    1698:	1dfb      	adds	r3, r7, #7
    169a:	701a      	strb	r2, [r3, #0]
    169c:	1dbb      	adds	r3, r7, #6
    169e:	1c0a      	adds	r2, r1, #0
    16a0:	701a      	strb	r2, [r3, #0]
    16a2:	1dfb      	adds	r3, r7, #7
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	4a05      	ldr	r2, [pc, #20]	; (16bc <sd_mmc_unload+0x2c>)
    16a8:	447a      	add	r2, pc
    16aa:	1db9      	adds	r1, r7, #6
    16ac:	7809      	ldrb	r1, [r1, #0]
    16ae:	54d1      	strb	r1, [r2, r3]
    16b0:	2301      	movs	r3, #1
    16b2:	0018      	movs	r0, r3
    16b4:	46bd      	mov	sp, r7
    16b6:	b002      	add	sp, #8
    16b8:	bd80      	pop	{r7, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	1fffeb20 	.word	0x1fffeb20

000016c0 <sd_mmc_unload_0>:
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	0002      	movs	r2, r0
    16c8:	1dfb      	adds	r3, r7, #7
    16ca:	701a      	strb	r2, [r3, #0]
    16cc:	4a06      	ldr	r2, [pc, #24]	; (16e8 <sd_mmc_unload_0+0x28>)
    16ce:	447a      	add	r2, pc
    16d0:	1dfb      	adds	r3, r7, #7
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	0019      	movs	r1, r3
    16d6:	2000      	movs	r0, #0
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <sd_mmc_unload_0+0x2c>)
    16da:	58d3      	ldr	r3, [r2, r3]
    16dc:	4798      	blx	r3
    16de:	0003      	movs	r3, r0
    16e0:	0018      	movs	r0, r3
    16e2:	46bd      	mov	sp, r7
    16e4:	b002      	add	sp, #8
    16e6:	bd80      	pop	{r7, pc}
    16e8:	00010712 	.word	0x00010712
    16ec:	000001c0 	.word	0x000001c0

000016f0 <sd_mmc_wr_protect>:
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	0002      	movs	r2, r0
    16f8:	1dfb      	adds	r3, r7, #7
    16fa:	701a      	strb	r2, [r3, #0]
    16fc:	4a06      	ldr	r2, [pc, #24]	; (1718 <sd_mmc_wr_protect+0x28>)
    16fe:	447a      	add	r2, pc
    1700:	1dfb      	adds	r3, r7, #7
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	0018      	movs	r0, r3
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <sd_mmc_wr_protect+0x2c>)
    1708:	58d3      	ldr	r3, [r2, r3]
    170a:	4798      	blx	r3
    170c:	0003      	movs	r3, r0
    170e:	0018      	movs	r0, r3
    1710:	46bd      	mov	sp, r7
    1712:	b002      	add	sp, #8
    1714:	bd80      	pop	{r7, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	000106e2 	.word	0x000106e2
    171c:	00000148 	.word	0x00000148

00001720 <sd_mmc_wr_protect_0>:
    1720:	b580      	push	{r7, lr}
    1722:	af00      	add	r7, sp, #0
    1724:	4a04      	ldr	r2, [pc, #16]	; (1738 <sd_mmc_wr_protect_0+0x18>)
    1726:	447a      	add	r2, pc
    1728:	2000      	movs	r0, #0
    172a:	4b04      	ldr	r3, [pc, #16]	; (173c <sd_mmc_wr_protect_0+0x1c>)
    172c:	58d3      	ldr	r3, [r2, r3]
    172e:	4798      	blx	r3
    1730:	0003      	movs	r3, r0
    1732:	0018      	movs	r0, r3
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}
    1738:	000106ba 	.word	0x000106ba
    173c:	000001d0 	.word	0x000001d0

00001740 <sd_mmc_removal>:
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
    1746:	0002      	movs	r2, r0
    1748:	1dfb      	adds	r3, r7, #7
    174a:	701a      	strb	r2, [r3, #0]
    174c:	2301      	movs	r3, #1
    174e:	0018      	movs	r0, r3
    1750:	46bd      	mov	sp, r7
    1752:	b002      	add	sp, #8
    1754:	bd80      	pop	{r7, pc}
	...

00001758 <sd_mmc_removal_0>:
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
    175c:	4a04      	ldr	r2, [pc, #16]	; (1770 <sd_mmc_removal_0+0x18>)
    175e:	447a      	add	r2, pc
    1760:	2000      	movs	r0, #0
    1762:	4b04      	ldr	r3, [pc, #16]	; (1774 <sd_mmc_removal_0+0x1c>)
    1764:	58d3      	ldr	r3, [r2, r3]
    1766:	4798      	blx	r3
    1768:	0003      	movs	r3, r0
    176a:	0018      	movs	r0, r3
    176c:	46bd      	mov	sp, r7
    176e:	bd80      	pop	{r7, pc}
    1770:	00010682 	.word	0x00010682
    1774:	00000208 	.word	0x00000208

00001778 <sd_mmc_mem_2_ram>:
    1778:	b590      	push	{r4, r7, lr}
    177a:	b085      	sub	sp, #20
    177c:	af00      	add	r7, sp, #0
    177e:	60b9      	str	r1, [r7, #8]
    1780:	607a      	str	r2, [r7, #4]
    1782:	230f      	movs	r3, #15
    1784:	18fb      	adds	r3, r7, r3
    1786:	1c02      	adds	r2, r0, #0
    1788:	701a      	strb	r2, [r3, #0]
    178a:	4c15      	ldr	r4, [pc, #84]	; (17e0 <sd_mmc_mem_2_ram+0x68>)
    178c:	447c      	add	r4, pc
    178e:	68b9      	ldr	r1, [r7, #8]
    1790:	230f      	movs	r3, #15
    1792:	18fb      	adds	r3, r7, r3
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	2201      	movs	r2, #1
    1798:	0018      	movs	r0, r3
    179a:	4b12      	ldr	r3, [pc, #72]	; (17e4 <sd_mmc_mem_2_ram+0x6c>)
    179c:	58e3      	ldr	r3, [r4, r3]
    179e:	4798      	blx	r3
    17a0:	1e03      	subs	r3, r0, #0
    17a2:	d005      	beq.n	17b0 <sd_mmc_mem_2_ram+0x38>
    17a4:	2b02      	cmp	r3, #2
    17a6:	d101      	bne.n	17ac <sd_mmc_mem_2_ram+0x34>
    17a8:	2302      	movs	r3, #2
    17aa:	e015      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
    17ac:	2301      	movs	r3, #1
    17ae:	e013      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
    17b0:	46c0      	nop			; (mov r8, r8)
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2101      	movs	r1, #1
    17b6:	0018      	movs	r0, r3
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <sd_mmc_mem_2_ram+0x70>)
    17ba:	58e3      	ldr	r3, [r4, r3]
    17bc:	4798      	blx	r3
    17be:	1e03      	subs	r3, r0, #0
    17c0:	d001      	beq.n	17c6 <sd_mmc_mem_2_ram+0x4e>
    17c2:	2301      	movs	r3, #1
    17c4:	e008      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
    17c6:	2000      	movs	r0, #0
    17c8:	4b08      	ldr	r3, [pc, #32]	; (17ec <sd_mmc_mem_2_ram+0x74>)
    17ca:	58e3      	ldr	r3, [r4, r3]
    17cc:	4798      	blx	r3
    17ce:	1e03      	subs	r3, r0, #0
    17d0:	d001      	beq.n	17d6 <sd_mmc_mem_2_ram+0x5e>
    17d2:	2301      	movs	r3, #1
    17d4:	e000      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
    17d6:	2300      	movs	r3, #0
    17d8:	0018      	movs	r0, r3
    17da:	46bd      	mov	sp, r7
    17dc:	b005      	add	sp, #20
    17de:	bd90      	pop	{r4, r7, pc}
    17e0:	00010654 	.word	0x00010654
    17e4:	00000174 	.word	0x00000174
    17e8:	0000010c 	.word	0x0000010c
    17ec:	0000012c 	.word	0x0000012c

000017f0 <sd_mmc_mem_2_ram_0>:
    17f0:	b590      	push	{r4, r7, lr}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    17f8:	6039      	str	r1, [r7, #0]
    17fa:	4c07      	ldr	r4, [pc, #28]	; (1818 <sd_mmc_mem_2_ram_0+0x28>)
    17fc:	447c      	add	r4, pc
    17fe:	683a      	ldr	r2, [r7, #0]
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	0019      	movs	r1, r3
    1804:	2000      	movs	r0, #0
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <sd_mmc_mem_2_ram_0+0x2c>)
    1808:	58e3      	ldr	r3, [r4, r3]
    180a:	4798      	blx	r3
    180c:	0003      	movs	r3, r0
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b003      	add	sp, #12
    1814:	bd90      	pop	{r4, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	000105e4 	.word	0x000105e4
    181c:	0000028c 	.word	0x0000028c

00001820 <sd_mmc_ram_2_mem>:
    1820:	b590      	push	{r4, r7, lr}
    1822:	b085      	sub	sp, #20
    1824:	af00      	add	r7, sp, #0
    1826:	60b9      	str	r1, [r7, #8]
    1828:	607a      	str	r2, [r7, #4]
    182a:	230f      	movs	r3, #15
    182c:	18fb      	adds	r3, r7, r3
    182e:	1c02      	adds	r2, r0, #0
    1830:	701a      	strb	r2, [r3, #0]
    1832:	4c15      	ldr	r4, [pc, #84]	; (1888 <sd_mmc_ram_2_mem+0x68>)
    1834:	447c      	add	r4, pc
    1836:	68b9      	ldr	r1, [r7, #8]
    1838:	230f      	movs	r3, #15
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2201      	movs	r2, #1
    1840:	0018      	movs	r0, r3
    1842:	4b12      	ldr	r3, [pc, #72]	; (188c <sd_mmc_ram_2_mem+0x6c>)
    1844:	58e3      	ldr	r3, [r4, r3]
    1846:	4798      	blx	r3
    1848:	1e03      	subs	r3, r0, #0
    184a:	d005      	beq.n	1858 <sd_mmc_ram_2_mem+0x38>
    184c:	2b02      	cmp	r3, #2
    184e:	d101      	bne.n	1854 <sd_mmc_ram_2_mem+0x34>
    1850:	2302      	movs	r3, #2
    1852:	e015      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
    1854:	2301      	movs	r3, #1
    1856:	e013      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
    1858:	46c0      	nop			; (mov r8, r8)
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	2101      	movs	r1, #1
    185e:	0018      	movs	r0, r3
    1860:	4b0b      	ldr	r3, [pc, #44]	; (1890 <sd_mmc_ram_2_mem+0x70>)
    1862:	58e3      	ldr	r3, [r4, r3]
    1864:	4798      	blx	r3
    1866:	1e03      	subs	r3, r0, #0
    1868:	d001      	beq.n	186e <sd_mmc_ram_2_mem+0x4e>
    186a:	2301      	movs	r3, #1
    186c:	e008      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
    186e:	2000      	movs	r0, #0
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <sd_mmc_ram_2_mem+0x74>)
    1872:	58e3      	ldr	r3, [r4, r3]
    1874:	4798      	blx	r3
    1876:	1e03      	subs	r3, r0, #0
    1878:	d001      	beq.n	187e <sd_mmc_ram_2_mem+0x5e>
    187a:	2301      	movs	r3, #1
    187c:	e000      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
    187e:	2300      	movs	r3, #0
    1880:	0018      	movs	r0, r3
    1882:	46bd      	mov	sp, r7
    1884:	b005      	add	sp, #20
    1886:	bd90      	pop	{r4, r7, pc}
    1888:	000105ac 	.word	0x000105ac
    188c:	000002f0 	.word	0x000002f0
    1890:	00000000 	.word	0x00000000
    1894:	00000060 	.word	0x00000060

00001898 <sd_mmc_ram_2_mem_0>:
    1898:	b590      	push	{r4, r7, lr}
    189a:	b083      	sub	sp, #12
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
    18a0:	6039      	str	r1, [r7, #0]
    18a2:	4c07      	ldr	r4, [pc, #28]	; (18c0 <sd_mmc_ram_2_mem_0+0x28>)
    18a4:	447c      	add	r4, pc
    18a6:	683a      	ldr	r2, [r7, #0]
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	0019      	movs	r1, r3
    18ac:	2000      	movs	r0, #0
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <sd_mmc_ram_2_mem_0+0x2c>)
    18b0:	58e3      	ldr	r3, [r4, r3]
    18b2:	4798      	blx	r3
    18b4:	0003      	movs	r3, r0
    18b6:	0018      	movs	r0, r3
    18b8:	46bd      	mov	sp, r7
    18ba:	b003      	add	sp, #12
    18bc:	bd90      	pop	{r4, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	0001053c 	.word	0x0001053c
    18c4:	00000184 	.word	0x00000184

000018c8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
    18ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	2200      	movs	r2, #0
    18d4:	701a      	strb	r2, [r3, #0]
}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	46bd      	mov	sp, r7
    18da:	b002      	add	sp, #8
    18dc:	bd80      	pop	{r7, pc}
	...

000018e0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	0002      	movs	r2, r0
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	1dfb      	adds	r3, r7, #7
    18ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    18ee:	1dfb      	adds	r3, r7, #7
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b01      	cmp	r3, #1
    18f4:	d00a      	beq.n	190c <system_apb_clock_set_mask+0x2c>
    18f6:	2b02      	cmp	r3, #2
    18f8:	d00f      	beq.n	191a <system_apb_clock_set_mask+0x3a>
    18fa:	2b00      	cmp	r3, #0
    18fc:	d114      	bne.n	1928 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    18fe:	4b0e      	ldr	r3, [pc, #56]	; (1938 <system_apb_clock_set_mask+0x58>)
    1900:	4a0d      	ldr	r2, [pc, #52]	; (1938 <system_apb_clock_set_mask+0x58>)
    1902:	6991      	ldr	r1, [r2, #24]
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	430a      	orrs	r2, r1
    1908:	619a      	str	r2, [r3, #24]
			break;
    190a:	e00f      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    190c:	4b0a      	ldr	r3, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    190e:	4a0a      	ldr	r2, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    1910:	69d1      	ldr	r1, [r2, #28]
    1912:	683a      	ldr	r2, [r7, #0]
    1914:	430a      	orrs	r2, r1
    1916:	61da      	str	r2, [r3, #28]
			break;
    1918:	e008      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <system_apb_clock_set_mask+0x58>)
    191c:	4a06      	ldr	r2, [pc, #24]	; (1938 <system_apb_clock_set_mask+0x58>)
    191e:	6a11      	ldr	r1, [r2, #32]
    1920:	683a      	ldr	r2, [r7, #0]
    1922:	430a      	orrs	r2, r1
    1924:	621a      	str	r2, [r3, #32]
			break;
    1926:	e001      	b.n	192c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1928:	2317      	movs	r3, #23
    192a:	e000      	b.n	192e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    192c:	2300      	movs	r3, #0
}
    192e:	0018      	movs	r0, r3
    1930:	46bd      	mov	sp, r7
    1932:	b002      	add	sp, #8
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	40000400 	.word	0x40000400

0000193c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    193c:	b580      	push	{r7, lr}
    193e:	b082      	sub	sp, #8
    1940:	af00      	add	r7, sp, #0
    1942:	0002      	movs	r2, r0
    1944:	1dfb      	adds	r3, r7, #7
    1946:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1948:	4b06      	ldr	r3, [pc, #24]	; (1964 <system_interrupt_enable+0x28>)
    194a:	1dfa      	adds	r2, r7, #7
    194c:	7812      	ldrb	r2, [r2, #0]
    194e:	0011      	movs	r1, r2
    1950:	221f      	movs	r2, #31
    1952:	400a      	ands	r2, r1
    1954:	2101      	movs	r1, #1
    1956:	4091      	lsls	r1, r2
    1958:	000a      	movs	r2, r1
    195a:	601a      	str	r2, [r3, #0]
}
    195c:	46c0      	nop			; (mov r8, r8)
    195e:	46bd      	mov	sp, r7
    1960:	b002      	add	sp, #8
    1962:	bd80      	pop	{r7, pc}
    1964:	e000e100 	.word	0xe000e100

00001968 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1968:	b580      	push	{r7, lr}
    196a:	b082      	sub	sp, #8
    196c:	af00      	add	r7, sp, #0
    196e:	0002      	movs	r2, r0
    1970:	1dfb      	adds	r3, r7, #7
    1972:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1974:	4a07      	ldr	r2, [pc, #28]	; (1994 <system_interrupt_disable+0x2c>)
    1976:	1dfb      	adds	r3, r7, #7
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	0019      	movs	r1, r3
    197c:	231f      	movs	r3, #31
    197e:	400b      	ands	r3, r1
    1980:	2101      	movs	r1, #1
    1982:	4099      	lsls	r1, r3
    1984:	000b      	movs	r3, r1
    1986:	0019      	movs	r1, r3
    1988:	2380      	movs	r3, #128	; 0x80
    198a:	50d1      	str	r1, [r2, r3]
}
    198c:	46c0      	nop			; (mov r8, r8)
    198e:	46bd      	mov	sp, r7
    1990:	b002      	add	sp, #8
    1992:	bd80      	pop	{r7, pc}
    1994:	e000e100 	.word	0xe000e100

00001998 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    1998:	b580      	push	{r7, lr}
    199a:	b084      	sub	sp, #16
    199c:	af00      	add	r7, sp, #0
    199e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19a6:	68fb      	ldr	r3, [r7, #12]
    19a8:	7a9b      	ldrb	r3, [r3, #10]
    19aa:	b2db      	uxtb	r3, r3
    19ac:	b25b      	sxtb	r3, r3
    19ae:	2b00      	cmp	r3, #0
    19b0:	da01      	bge.n	19b6 <rtc_calendar_is_syncing+0x1e>
                return true;
    19b2:	2301      	movs	r3, #1
    19b4:	e000      	b.n	19b8 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    19b6:	2300      	movs	r3, #0
}
    19b8:	0018      	movs	r0, r3
    19ba:	46bd      	mov	sp, r7
    19bc:	b004      	add	sp, #16
    19be:	bd80      	pop	{r7, pc}

000019c0 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	b084      	sub	sp, #16
    19c4:	af00      	add	r7, sp, #0
    19c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19c8:	687b      	ldr	r3, [r7, #4]
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    19ce:	2003      	movs	r0, #3
    19d0:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <rtc_calendar_enable+0x40>)
    19d2:	447b      	add	r3, pc
    19d4:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	0018      	movs	r0, r3
    19dc:	4b09      	ldr	r3, [pc, #36]	; (1a04 <rtc_calendar_enable+0x44>)
    19de:	447b      	add	r3, pc
    19e0:	4798      	blx	r3
    19e2:	1e03      	subs	r3, r0, #0
    19e4:	d1f8      	bne.n	19d8 <rtc_calendar_enable+0x18>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    19e6:	68fb      	ldr	r3, [r7, #12]
    19e8:	881b      	ldrh	r3, [r3, #0]
    19ea:	b29b      	uxth	r3, r3
    19ec:	2202      	movs	r2, #2
    19ee:	4313      	orrs	r3, r2
    19f0:	b29a      	uxth	r2, r3
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	801a      	strh	r2, [r3, #0]
}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	46bd      	mov	sp, r7
    19fa:	b004      	add	sp, #16
    19fc:	bd80      	pop	{r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	ffffff67 	.word	0xffffff67
    1a04:	ffffffb7 	.word	0xffffffb7

00001a08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	b084      	sub	sp, #16
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    1a16:	2003      	movs	r0, #3
    1a18:	4b0e      	ldr	r3, [pc, #56]	; (1a54 <rtc_calendar_disable+0x4c>)
    1a1a:	447b      	add	r3, pc
    1a1c:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	0018      	movs	r0, r3
    1a24:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <rtc_calendar_disable+0x50>)
    1a26:	447b      	add	r3, pc
    1a28:	4798      	blx	r3
    1a2a:	1e03      	subs	r3, r0, #0
    1a2c:	d1f8      	bne.n	1a20 <rtc_calendar_disable+0x18>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1a2e:	68fb      	ldr	r3, [r7, #12]
    1a30:	22c1      	movs	r2, #193	; 0xc1
    1a32:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	22c1      	movs	r2, #193	; 0xc1
    1a38:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	881b      	ldrh	r3, [r3, #0]
    1a3e:	b29b      	uxth	r3, r3
    1a40:	2202      	movs	r2, #2
    1a42:	4393      	bics	r3, r2
    1a44:	b29a      	uxth	r2, r3
    1a46:	68fb      	ldr	r3, [r7, #12]
    1a48:	801a      	strh	r2, [r3, #0]
}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46bd      	mov	sp, r7
    1a4e:	b004      	add	sp, #16
    1a50:	bd80      	pop	{r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	ffffff4b 	.word	0xffffff4b
    1a58:	ffffff6f 	.word	0xffffff6f

00001a5c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b084      	sub	sp, #16
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
    1a64:	4a11      	ldr	r2, [pc, #68]	; (1aac <rtc_calendar_reset+0x50>)
    1a66:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a6e:	687b      	ldr	r3, [r7, #4]
    1a70:	0018      	movs	r0, r3
    1a72:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <rtc_calendar_reset+0x54>)
    1a74:	58d3      	ldr	r3, [r2, r3]
    1a76:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	2200      	movs	r2, #0
    1a7c:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	2200      	movs	r2, #0
    1a82:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a84:	46c0      	nop			; (mov r8, r8)
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	0018      	movs	r0, r3
    1a8a:	4b0a      	ldr	r3, [pc, #40]	; (1ab4 <rtc_calendar_reset+0x58>)
    1a8c:	447b      	add	r3, pc
    1a8e:	4798      	blx	r3
    1a90:	1e03      	subs	r3, r0, #0
    1a92:	d1f8      	bne.n	1a86 <rtc_calendar_reset+0x2a>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a94:	68fb      	ldr	r3, [r7, #12]
    1a96:	881b      	ldrh	r3, [r3, #0]
    1a98:	b29b      	uxth	r3, r3
    1a9a:	2201      	movs	r2, #1
    1a9c:	4313      	orrs	r3, r2
    1a9e:	b29a      	uxth	r2, r3
    1aa0:	68fb      	ldr	r3, [r7, #12]
    1aa2:	801a      	strh	r2, [r3, #0]
}
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b004      	add	sp, #16
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	0001037a 	.word	0x0001037a
    1ab0:	00000164 	.word	0x00000164
    1ab4:	ffffff09 	.word	0xffffff09

00001ab8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b084      	sub	sp, #16
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    1ac0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1ac2:	683b      	ldr	r3, [r7, #0]
    1ac4:	88db      	ldrh	r3, [r3, #6]
    1ac6:	001a      	movs	r2, r3
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	88db      	ldrh	r3, [r3, #6]
    1acc:	1ad3      	subs	r3, r2, r3
    1ace:	069b      	lsls	r3, r3, #26
    1ad0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1ad2:	683b      	ldr	r3, [r7, #0]
    1ad4:	795b      	ldrb	r3, [r3, #5]
    1ad6:	059b      	lsls	r3, r3, #22
    1ad8:	001a      	movs	r2, r3
    1ada:	68fb      	ldr	r3, [r7, #12]
    1adc:	4313      	orrs	r3, r2
    1ade:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1ae0:	683b      	ldr	r3, [r7, #0]
    1ae2:	791b      	ldrb	r3, [r3, #4]
    1ae4:	045b      	lsls	r3, r3, #17
    1ae6:	001a      	movs	r2, r3
    1ae8:	68fb      	ldr	r3, [r7, #12]
    1aea:	4313      	orrs	r3, r2
    1aec:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1aee:	683b      	ldr	r3, [r7, #0]
    1af0:	789b      	ldrb	r3, [r3, #2]
    1af2:	031b      	lsls	r3, r3, #12
    1af4:	001a      	movs	r2, r3
    1af6:	68fb      	ldr	r3, [r7, #12]
    1af8:	4313      	orrs	r3, r2
    1afa:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	791b      	ldrb	r3, [r3, #4]
    1b00:	2201      	movs	r2, #1
    1b02:	4053      	eors	r3, r2
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d008      	beq.n	1b1c <rtc_calendar_time_to_register_value+0x64>
    1b0a:	683b      	ldr	r3, [r7, #0]
    1b0c:	78db      	ldrb	r3, [r3, #3]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d004      	beq.n	1b1c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1b12:	68fb      	ldr	r3, [r7, #12]
    1b14:	2280      	movs	r2, #128	; 0x80
    1b16:	0252      	lsls	r2, r2, #9
    1b18:	4313      	orrs	r3, r2
    1b1a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	785b      	ldrb	r3, [r3, #1]
    1b20:	019b      	lsls	r3, r3, #6
    1b22:	001a      	movs	r2, r3
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	4313      	orrs	r3, r2
    1b28:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1b2a:	683b      	ldr	r3, [r7, #0]
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	001a      	movs	r2, r3
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	4313      	orrs	r3, r2
    1b34:	60fb      	str	r3, [r7, #12]

	return register_value;
    1b36:	68fb      	ldr	r3, [r7, #12]
}
    1b38:	0018      	movs	r0, r3
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b004      	add	sp, #16
    1b3e:	bd80      	pop	{r7, pc}

00001b40 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b084      	sub	sp, #16
    1b44:	af00      	add	r7, sp, #0
    1b46:	60f8      	str	r0, [r7, #12]
    1b48:	60b9      	str	r1, [r7, #8]
    1b4a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b4c:	68bb      	ldr	r3, [r7, #8]
    1b4e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1b50:	b29a      	uxth	r2, r3
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	88db      	ldrh	r3, [r3, #6]
    1b56:	18d3      	adds	r3, r2, r3
    1b58:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1b5e:	68bb      	ldr	r3, [r7, #8]
    1b60:	0d9b      	lsrs	r3, r3, #22
    1b62:	b2db      	uxtb	r3, r3
    1b64:	220f      	movs	r2, #15
    1b66:	4013      	ands	r3, r2
    1b68:	b2da      	uxtb	r2, r3
    1b6a:	687b      	ldr	r3, [r7, #4]
    1b6c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1b6e:	68bb      	ldr	r3, [r7, #8]
    1b70:	0c5b      	lsrs	r3, r3, #17
    1b72:	b2db      	uxtb	r3, r3
    1b74:	221f      	movs	r2, #31
    1b76:	4013      	ands	r3, r2
    1b78:	b2da      	uxtb	r2, r3
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1b7e:	68fb      	ldr	r3, [r7, #12]
    1b80:	791b      	ldrb	r3, [r3, #4]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1b86:	68bb      	ldr	r3, [r7, #8]
    1b88:	0b1b      	lsrs	r3, r3, #12
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	221f      	movs	r2, #31
    1b8e:	4013      	ands	r3, r2
    1b90:	b2da      	uxtb	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	709a      	strb	r2, [r3, #2]
    1b96:	e010      	b.n	1bba <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1b98:	68bb      	ldr	r3, [r7, #8]
    1b9a:	0b1b      	lsrs	r3, r3, #12
    1b9c:	b2db      	uxtb	r3, r3
    1b9e:	220f      	movs	r2, #15
    1ba0:	4013      	ands	r3, r2
    1ba2:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1ba8:	68ba      	ldr	r2, [r7, #8]
    1baa:	2380      	movs	r3, #128	; 0x80
    1bac:	025b      	lsls	r3, r3, #9
    1bae:	4013      	ands	r3, r2
    1bb0:	1e5a      	subs	r2, r3, #1
    1bb2:	4193      	sbcs	r3, r2
    1bb4:	b2da      	uxtb	r2, r3
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1bba:	68bb      	ldr	r3, [r7, #8]
    1bbc:	099b      	lsrs	r3, r3, #6
    1bbe:	b2db      	uxtb	r3, r3
    1bc0:	223f      	movs	r2, #63	; 0x3f
    1bc2:	4013      	ands	r3, r2
    1bc4:	b2da      	uxtb	r2, r3
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1bca:	68bb      	ldr	r3, [r7, #8]
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	223f      	movs	r2, #63	; 0x3f
    1bd0:	4013      	ands	r3, r2
    1bd2:	b2da      	uxtb	r2, r3
    1bd4:	687b      	ldr	r3, [r7, #4]
    1bd6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1bd8:	46c0      	nop			; (mov r8, r8)
    1bda:	46bd      	mov	sp, r7
    1bdc:	b004      	add	sp, #16
    1bde:	bd80      	pop	{r7, pc}

00001be0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    1be0:	b590      	push	{r4, r7, lr}
    1be2:	b085      	sub	sp, #20
    1be4:	af00      	add	r7, sp, #0
    1be6:	6078      	str	r0, [r7, #4]
    1be8:	6039      	str	r1, [r7, #0]
    1bea:	4c30      	ldr	r4, [pc, #192]	; (1cac <_rtc_calendar_set_config+0xcc>)
    1bec:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	681b      	ldr	r3, [r3, #0]
    1bf2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bf4:	683b      	ldr	r3, [r7, #0]
    1bf6:	881a      	ldrh	r2, [r3, #0]
    1bf8:	230e      	movs	r3, #14
    1bfa:	18fb      	adds	r3, r7, r3
    1bfc:	2108      	movs	r1, #8
    1bfe:	430a      	orrs	r2, r1
    1c00:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    1c02:	683b      	ldr	r3, [r7, #0]
    1c04:	791b      	ldrb	r3, [r3, #4]
    1c06:	2201      	movs	r2, #1
    1c08:	4053      	eors	r3, r2
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d007      	beq.n	1c20 <_rtc_calendar_set_config+0x40>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c10:	230e      	movs	r3, #14
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	220e      	movs	r2, #14
    1c16:	18ba      	adds	r2, r7, r2
    1c18:	8812      	ldrh	r2, [r2, #0]
    1c1a:	2140      	movs	r1, #64	; 0x40
    1c1c:	430a      	orrs	r2, r1
    1c1e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    1c20:	683b      	ldr	r3, [r7, #0]
    1c22:	789b      	ldrb	r3, [r3, #2]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d007      	beq.n	1c38 <_rtc_calendar_set_config+0x58>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1c28:	230e      	movs	r3, #14
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	220e      	movs	r2, #14
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	8812      	ldrh	r2, [r2, #0]
    1c32:	2180      	movs	r1, #128	; 0x80
    1c34:	430a      	orrs	r2, r1
    1c36:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1c38:	68bb      	ldr	r3, [r7, #8]
    1c3a:	220e      	movs	r2, #14
    1c3c:	18ba      	adds	r2, r7, r2
    1c3e:	8812      	ldrh	r2, [r2, #0]
    1c40:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    1c42:	683b      	ldr	r3, [r7, #0]
    1c44:	78db      	ldrb	r3, [r3, #3]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d008      	beq.n	1c5c <_rtc_calendar_set_config+0x7c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1c4a:	68bb      	ldr	r3, [r7, #8]
    1c4c:	885b      	ldrh	r3, [r3, #2]
    1c4e:	b29b      	uxth	r3, r3
    1c50:	2280      	movs	r2, #128	; 0x80
    1c52:	01d2      	lsls	r2, r2, #7
    1c54:	4313      	orrs	r3, r2
    1c56:	b29a      	uxth	r2, r3
    1c58:	68bb      	ldr	r3, [r7, #8]
    1c5a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c5c:	230d      	movs	r3, #13
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	2200      	movs	r2, #0
    1c62:	701a      	strb	r2, [r3, #0]
    1c64:	e018      	b.n	1c98 <_rtc_calendar_set_config+0xb8>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1c66:	230d      	movs	r3, #13
    1c68:	18fb      	adds	r3, r7, r3
    1c6a:	781a      	ldrb	r2, [r3, #0]
    1c6c:	0013      	movs	r3, r2
    1c6e:	009b      	lsls	r3, r3, #2
    1c70:	189b      	adds	r3, r3, r2
    1c72:	005b      	lsls	r3, r3, #1
    1c74:	3308      	adds	r3, #8
    1c76:	683a      	ldr	r2, [r7, #0]
    1c78:	18d1      	adds	r1, r2, r3
    1c7a:	230d      	movs	r3, #13
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	781a      	ldrb	r2, [r3, #0]
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	0018      	movs	r0, r3
    1c84:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <_rtc_calendar_set_config+0xd0>)
    1c86:	58e3      	ldr	r3, [r4, r3]
    1c88:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c8a:	230d      	movs	r3, #13
    1c8c:	18fb      	adds	r3, r7, r3
    1c8e:	781a      	ldrb	r2, [r3, #0]
    1c90:	230d      	movs	r3, #13
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	3201      	adds	r2, #1
    1c96:	701a      	strb	r2, [r3, #0]
    1c98:	230d      	movs	r3, #13
    1c9a:	18fb      	adds	r3, r7, r3
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d0e1      	beq.n	1c66 <_rtc_calendar_set_config+0x86>
	}
}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	46bd      	mov	sp, r7
    1ca6:	b005      	add	sp, #20
    1ca8:	bd90      	pop	{r4, r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	000101f4 	.word	0x000101f4
    1cb0:	000002ac 	.word	0x000002ac

00001cb4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    1cb4:	b590      	push	{r4, r7, lr}
    1cb6:	b087      	sub	sp, #28
    1cb8:	af00      	add	r7, sp, #0
    1cba:	60f8      	str	r0, [r7, #12]
    1cbc:	60b9      	str	r1, [r7, #8]
    1cbe:	607a      	str	r2, [r7, #4]
    1cc0:	4c1f      	ldr	r4, [pc, #124]	; (1d40 <rtc_calendar_init+0x8c>)
    1cc2:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1cc4:	68fb      	ldr	r3, [r7, #12]
    1cc6:	68ba      	ldr	r2, [r7, #8]
    1cc8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    1cca:	2120      	movs	r1, #32
    1ccc:	2000      	movs	r0, #0
    1cce:	4b1d      	ldr	r3, [pc, #116]	; (1d44 <rtc_calendar_init+0x90>)
    1cd0:	447b      	add	r3, pc
    1cd2:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1cd4:	2314      	movs	r3, #20
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	0018      	movs	r0, r3
    1cda:	4b1b      	ldr	r3, [pc, #108]	; (1d48 <rtc_calendar_init+0x94>)
    1cdc:	447b      	add	r3, pc
    1cde:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1ce0:	2314      	movs	r3, #20
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	2202      	movs	r2, #2
    1ce6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1ce8:	2314      	movs	r3, #20
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	0019      	movs	r1, r3
    1cee:	2004      	movs	r0, #4
    1cf0:	4b16      	ldr	r3, [pc, #88]	; (1d4c <rtc_calendar_init+0x98>)
    1cf2:	58e3      	ldr	r3, [r4, r3]
    1cf4:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1cf6:	2004      	movs	r0, #4
    1cf8:	4b15      	ldr	r3, [pc, #84]	; (1d50 <rtc_calendar_init+0x9c>)
    1cfa:	58e3      	ldr	r3, [r4, r3]
    1cfc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	0018      	movs	r0, r3
    1d02:	4b14      	ldr	r3, [pc, #80]	; (1d54 <rtc_calendar_init+0xa0>)
    1d04:	58e3      	ldr	r3, [r4, r3]
    1d06:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	791a      	ldrb	r2, [r3, #4]
    1d0c:	68fb      	ldr	r3, [r7, #12]
    1d0e:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    1d10:	687b      	ldr	r3, [r7, #4]
    1d12:	78da      	ldrb	r2, [r3, #3]
    1d14:	68fb      	ldr	r3, [r7, #12]
    1d16:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	88da      	ldrh	r2, [r3, #6]
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    1d20:	4b0d      	ldr	r3, [pc, #52]	; (1d58 <rtc_calendar_init+0xa4>)
    1d22:	58e3      	ldr	r3, [r4, r3]
    1d24:	68fa      	ldr	r2, [r7, #12]
    1d26:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    1d28:	687a      	ldr	r2, [r7, #4]
    1d2a:	68fb      	ldr	r3, [r7, #12]
    1d2c:	0011      	movs	r1, r2
    1d2e:	0018      	movs	r0, r3
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <rtc_calendar_init+0xa8>)
    1d32:	447b      	add	r3, pc
    1d34:	4798      	blx	r3
}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	46bd      	mov	sp, r7
    1d3a:	b007      	add	sp, #28
    1d3c:	bd90      	pop	{r4, r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	0001011e 	.word	0x0001011e
    1d44:	fffffc0d 	.word	0xfffffc0d
    1d48:	fffffbe9 	.word	0xfffffbe9
    1d4c:	000000b0 	.word	0x000000b0
    1d50:	00000238 	.word	0x00000238
    1d54:	00000194 	.word	0x00000194
    1d58:	00000018 	.word	0x00000018
    1d5c:	fffffeab 	.word	0xfffffeab

00001d60 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1d60:	b590      	push	{r4, r7, lr}
    1d62:	b085      	sub	sp, #20
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	6039      	str	r1, [r7, #0]
    1d6a:	4c1f      	ldr	r4, [pc, #124]	; (1de8 <rtc_calendar_get_time+0x88>)
    1d6c:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	795b      	ldrb	r3, [r3, #5]
    1d78:	2201      	movs	r2, #1
    1d7a:	4053      	eors	r3, r2
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d00b      	beq.n	1d9a <rtc_calendar_get_time+0x3a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	4a19      	ldr	r2, [pc, #100]	; (1dec <rtc_calendar_get_time+0x8c>)
    1d86:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    1d88:	46c0      	nop			; (mov r8, r8)
    1d8a:	687b      	ldr	r3, [r7, #4]
    1d8c:	0018      	movs	r0, r3
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <rtc_calendar_get_time+0x90>)
    1d90:	447b      	add	r3, pc
    1d92:	4798      	blx	r3
    1d94:	1e03      	subs	r3, r0, #0
    1d96:	d1f8      	bne.n	1d8a <rtc_calendar_get_time+0x2a>
    1d98:	e017      	b.n	1dca <rtc_calendar_get_time+0x6a>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1d9a:	68fb      	ldr	r3, [r7, #12]
    1d9c:	885b      	ldrh	r3, [r3, #2]
    1d9e:	b29b      	uxth	r3, r3
    1da0:	001a      	movs	r2, r3
    1da2:	2380      	movs	r3, #128	; 0x80
    1da4:	01db      	lsls	r3, r3, #7
    1da6:	4013      	ands	r3, r2
    1da8:	d10f      	bne.n	1dca <rtc_calendar_get_time+0x6a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	885b      	ldrh	r3, [r3, #2]
    1dae:	b29b      	uxth	r3, r3
    1db0:	4a10      	ldr	r2, [pc, #64]	; (1df4 <rtc_calendar_get_time+0x94>)
    1db2:	4313      	orrs	r3, r2
    1db4:	b29a      	uxth	r2, r3
    1db6:	68fb      	ldr	r3, [r7, #12]
    1db8:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	0018      	movs	r0, r3
    1dc0:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <rtc_calendar_get_time+0x98>)
    1dc2:	447b      	add	r3, pc
    1dc4:	4798      	blx	r3
    1dc6:	1e03      	subs	r3, r0, #0
    1dc8:	d1f8      	bne.n	1dbc <rtc_calendar_get_time+0x5c>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	691b      	ldr	r3, [r3, #16]
    1dce:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1dd0:	683a      	ldr	r2, [r7, #0]
    1dd2:	68b9      	ldr	r1, [r7, #8]
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	0018      	movs	r0, r3
    1dd8:	4b08      	ldr	r3, [pc, #32]	; (1dfc <rtc_calendar_get_time+0x9c>)
    1dda:	58e3      	ldr	r3, [r4, r3]
    1ddc:	4798      	blx	r3
}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	46bd      	mov	sp, r7
    1de2:	b005      	add	sp, #20
    1de4:	bd90      	pop	{r4, r7, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	00010074 	.word	0x00010074
    1dec:	ffff8000 	.word	0xffff8000
    1df0:	fffffc05 	.word	0xfffffc05
    1df4:	ffffc000 	.word	0xffffc000
    1df8:	fffffbd3 	.word	0xfffffbd3
    1dfc:	00000034 	.word	0x00000034

00001e00 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	b086      	sub	sp, #24
    1e04:	af00      	add	r7, sp, #0
    1e06:	60f8      	str	r0, [r7, #12]
    1e08:	60b9      	str	r1, [r7, #8]
    1e0a:	1dfb      	adds	r3, r7, #7
    1e0c:	701a      	strb	r2, [r3, #0]
    1e0e:	4a19      	ldr	r2, [pc, #100]	; (1e74 <rtc_calendar_set_alarm+0x74>)
    1e10:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1e18:	1dfb      	adds	r3, r7, #7
    1e1a:	781b      	ldrb	r3, [r3, #0]
    1e1c:	2b01      	cmp	r3, #1
    1e1e:	d901      	bls.n	1e24 <rtc_calendar_set_alarm+0x24>
		return STATUS_ERR_INVALID_ARG;
    1e20:	2317      	movs	r3, #23
    1e22:	e022      	b.n	1e6a <rtc_calendar_set_alarm+0x6a>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1e24:	68b9      	ldr	r1, [r7, #8]
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	0018      	movs	r0, r3
    1e2a:	4b13      	ldr	r3, [pc, #76]	; (1e78 <rtc_calendar_set_alarm+0x78>)
    1e2c:	58d3      	ldr	r3, [r2, r3]
    1e2e:	4798      	blx	r3
    1e30:	0003      	movs	r3, r0
    1e32:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	0018      	movs	r0, r3
    1e3a:	4b10      	ldr	r3, [pc, #64]	; (1e7c <rtc_calendar_set_alarm+0x7c>)
    1e3c:	447b      	add	r3, pc
    1e3e:	4798      	blx	r3
    1e40:	1e03      	subs	r3, r0, #0
    1e42:	d1f8      	bne.n	1e36 <rtc_calendar_set_alarm+0x36>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1e44:	1dfb      	adds	r3, r7, #7
    1e46:	781a      	ldrb	r2, [r3, #0]
    1e48:	697b      	ldr	r3, [r7, #20]
    1e4a:	3203      	adds	r2, #3
    1e4c:	00d2      	lsls	r2, r2, #3
    1e4e:	6939      	ldr	r1, [r7, #16]
    1e50:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1e52:	1dfb      	adds	r3, r7, #7
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	68ba      	ldr	r2, [r7, #8]
    1e58:	7a11      	ldrb	r1, [r2, #8]
    1e5a:	697a      	ldr	r2, [r7, #20]
    1e5c:	3303      	adds	r3, #3
    1e5e:	00db      	lsls	r3, r3, #3
    1e60:	18d3      	adds	r3, r2, r3
    1e62:	3304      	adds	r3, #4
    1e64:	1c0a      	adds	r2, r1, #0
    1e66:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    1e68:	2300      	movs	r3, #0
}
    1e6a:	0018      	movs	r0, r3
    1e6c:	46bd      	mov	sp, r7
    1e6e:	b006      	add	sp, #24
    1e70:	bd80      	pop	{r7, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	0000ffd0 	.word	0x0000ffd0
    1e78:	00000294 	.word	0x00000294
    1e7c:	fffffb59 	.word	0xfffffb59

00001e80 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b086      	sub	sp, #24
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	4a29      	ldr	r2, [pc, #164]	; (1f30 <_rtc_interrupt_handler+0xb0>)
    1e8a:	447a      	add	r2, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    1e8c:	4b29      	ldr	r3, [pc, #164]	; (1f34 <_rtc_interrupt_handler+0xb4>)
    1e8e:	58d3      	ldr	r3, [r2, r3]
    1e90:	687a      	ldr	r2, [r7, #4]
    1e92:	0092      	lsls	r2, r2, #2
    1e94:	58d3      	ldr	r3, [r2, r3]
    1e96:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    1e98:	697b      	ldr	r3, [r7, #20]
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1e9e:	230e      	movs	r3, #14
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	697a      	ldr	r2, [r7, #20]
    1ea4:	8a52      	ldrh	r2, [r2, #18]
    1ea6:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1ea8:	697b      	ldr	r3, [r7, #20]
    1eaa:	8a1b      	ldrh	r3, [r3, #16]
    1eac:	b29a      	uxth	r2, r3
    1eae:	230e      	movs	r3, #14
    1eb0:	18fb      	adds	r3, r7, r3
    1eb2:	210e      	movs	r1, #14
    1eb4:	1879      	adds	r1, r7, r1
    1eb6:	8809      	ldrh	r1, [r1, #0]
    1eb8:	400a      	ands	r2, r1
    1eba:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    1ebc:	693b      	ldr	r3, [r7, #16]
    1ebe:	7a1b      	ldrb	r3, [r3, #8]
    1ec0:	b2da      	uxtb	r2, r3
    1ec2:	230c      	movs	r3, #12
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1ec8:	693b      	ldr	r3, [r7, #16]
    1eca:	79db      	ldrb	r3, [r3, #7]
    1ecc:	b2db      	uxtb	r3, r3
    1ece:	b29a      	uxth	r2, r3
    1ed0:	230c      	movs	r3, #12
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	210c      	movs	r1, #12
    1ed6:	1879      	adds	r1, r7, r1
    1ed8:	8809      	ldrh	r1, [r1, #0]
    1eda:	400a      	ands	r2, r1
    1edc:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    1ede:	230c      	movs	r3, #12
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	881b      	ldrh	r3, [r3, #0]
    1ee4:	2280      	movs	r2, #128	; 0x80
    1ee6:	4013      	ands	r3, r2
    1ee8:	d00c      	beq.n	1f04 <_rtc_interrupt_handler+0x84>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    1eea:	230e      	movs	r3, #14
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	881b      	ldrh	r3, [r3, #0]
    1ef0:	2202      	movs	r2, #2
    1ef2:	4013      	ands	r3, r2
    1ef4:	d002      	beq.n	1efc <_rtc_interrupt_handler+0x7c>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1ef6:	697b      	ldr	r3, [r7, #20]
    1ef8:	68db      	ldr	r3, [r3, #12]
    1efa:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    1efc:	693b      	ldr	r3, [r7, #16]
    1efe:	2280      	movs	r2, #128	; 0x80
    1f00:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    1f02:	e011      	b.n	1f28 <_rtc_interrupt_handler+0xa8>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    1f04:	230c      	movs	r3, #12
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	881b      	ldrh	r3, [r3, #0]
    1f0a:	2201      	movs	r2, #1
    1f0c:	4013      	ands	r3, r2
    1f0e:	d00b      	beq.n	1f28 <_rtc_interrupt_handler+0xa8>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    1f10:	230e      	movs	r3, #14
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	881b      	ldrh	r3, [r3, #0]
    1f16:	2201      	movs	r2, #1
    1f18:	4013      	ands	r3, r2
    1f1a:	d002      	beq.n	1f22 <_rtc_interrupt_handler+0xa2>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    1f1c:	697b      	ldr	r3, [r7, #20]
    1f1e:	689b      	ldr	r3, [r3, #8]
    1f20:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    1f22:	693b      	ldr	r3, [r7, #16]
    1f24:	2201      	movs	r2, #1
    1f26:	721a      	strb	r2, [r3, #8]
}
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b006      	add	sp, #24
    1f2e:	bd80      	pop	{r7, pc}
    1f30:	0000ff56 	.word	0x0000ff56
    1f34:	00000018 	.word	0x00000018

00001f38 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    1f3c:	2000      	movs	r0, #0
    1f3e:	4b03      	ldr	r3, [pc, #12]	; (1f4c <RTC_Handler+0x14>)
    1f40:	447b      	add	r3, pc
    1f42:	4798      	blx	r3
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	bd80      	pop	{r7, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	ffffff3d 	.word	0xffffff3d

00001f50 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b082      	sub	sp, #8
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
	time->second = 0;
    1f58:	687b      	ldr	r3, [r7, #4]
    1f5a:	2200      	movs	r2, #0
    1f5c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	2200      	movs	r2, #0
    1f62:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    1f64:	687b      	ldr	r3, [r7, #4]
    1f66:	2200      	movs	r2, #0
    1f68:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	2200      	movs	r2, #0
    1f6e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	2201      	movs	r2, #1
    1f74:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    1f76:	687b      	ldr	r3, [r7, #4]
    1f78:	2201      	movs	r2, #1
    1f7a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	22fa      	movs	r2, #250	; 0xfa
    1f80:	00d2      	lsls	r2, r2, #3
    1f82:	80da      	strh	r2, [r3, #6]
}
    1f84:	46c0      	nop			; (mov r8, r8)
    1f86:	46bd      	mov	sp, r7
    1f88:	b002      	add	sp, #8
    1f8a:	bd80      	pop	{r7, pc}

00001f8c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    1f8c:	b590      	push	{r4, r7, lr}
    1f8e:	b087      	sub	sp, #28
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
    1f94:	4c26      	ldr	r4, [pc, #152]	; (2030 <STACK_SIZE+0x30>)
    1f96:	447c      	add	r4, pc
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    1f98:	230c      	movs	r3, #12
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	0018      	movs	r0, r3
    1f9e:	4b25      	ldr	r3, [pc, #148]	; (2034 <STACK_SIZE+0x34>)
    1fa0:	447b      	add	r3, pc
    1fa2:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	22a0      	movs	r2, #160	; 0xa0
    1fa8:	0112      	lsls	r2, r2, #4
    1faa:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	2200      	movs	r2, #0
    1fb0:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	2200      	movs	r2, #0
    1fb6:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2200      	movs	r2, #0
    1fbc:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	22fa      	movs	r2, #250	; 0xfa
    1fc2:	00d2      	lsls	r2, r2, #3
    1fc4:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1fc6:	2317      	movs	r3, #23
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	2200      	movs	r2, #0
    1fcc:	701a      	strb	r2, [r3, #0]
    1fce:	e026      	b.n	201e <STACK_SIZE+0x1e>
		config->alarm[i].time = time;
    1fd0:	2317      	movs	r3, #23
    1fd2:	18fb      	adds	r3, r7, r3
    1fd4:	781a      	ldrb	r2, [r3, #0]
    1fd6:	6879      	ldr	r1, [r7, #4]
    1fd8:	2008      	movs	r0, #8
    1fda:	0013      	movs	r3, r2
    1fdc:	009b      	lsls	r3, r3, #2
    1fde:	189b      	adds	r3, r3, r2
    1fe0:	005b      	lsls	r3, r3, #1
    1fe2:	18cb      	adds	r3, r1, r3
    1fe4:	181a      	adds	r2, r3, r0
    1fe6:	230c      	movs	r3, #12
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	0010      	movs	r0, r2
    1fec:	0019      	movs	r1, r3
    1fee:	2308      	movs	r3, #8
    1ff0:	001a      	movs	r2, r3
    1ff2:	4b11      	ldr	r3, [pc, #68]	; (2038 <STACK_SIZE+0x38>)
    1ff4:	58e3      	ldr	r3, [r4, r3]
    1ff6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1ff8:	2317      	movs	r3, #23
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	781a      	ldrb	r2, [r3, #0]
    1ffe:	6879      	ldr	r1, [r7, #4]
    2000:	0013      	movs	r3, r2
    2002:	009b      	lsls	r3, r3, #2
    2004:	189b      	adds	r3, r3, r2
    2006:	005b      	lsls	r3, r3, #1
    2008:	18cb      	adds	r3, r1, r3
    200a:	3310      	adds	r3, #16
    200c:	2206      	movs	r2, #6
    200e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2010:	2317      	movs	r3, #23
    2012:	18fb      	adds	r3, r7, r3
    2014:	781a      	ldrb	r2, [r3, #0]
    2016:	2317      	movs	r3, #23
    2018:	18fb      	adds	r3, r7, r3
    201a:	3201      	adds	r2, #1
    201c:	701a      	strb	r2, [r3, #0]
    201e:	2317      	movs	r3, #23
    2020:	18fb      	adds	r3, r7, r3
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d0d3      	beq.n	1fd0 <rtc_calendar_get_config_defaults+0x44>
	}
}
    2028:	46c0      	nop			; (mov r8, r8)
    202a:	46bd      	mov	sp, r7
    202c:	b007      	add	sp, #28
    202e:	bd90      	pop	{r4, r7, pc}
    2030:	0000fe4a 	.word	0x0000fe4a
    2034:	ffffffad 	.word	0xffffffad
    2038:	0000008c 	.word	0x0000008c

0000203c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    203c:	b590      	push	{r4, r7, lr}
    203e:	b089      	sub	sp, #36	; 0x24
    2040:	af00      	add	r7, sp, #0
    2042:	4c20      	ldr	r4, [pc, #128]	; (20c4 <configure_rtc_calendar+0x88>)
    2044:	447c      	add	r4, pc
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    2046:	230c      	movs	r3, #12
    2048:	18fb      	adds	r3, r7, r3
    204a:	0018      	movs	r0, r3
    204c:	4b1e      	ldr	r3, [pc, #120]	; (20c8 <configure_rtc_calendar+0x8c>)
    204e:	447b      	add	r3, pc
    2050:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    2052:	1d3b      	adds	r3, r7, #4
    2054:	0018      	movs	r0, r3
    2056:	4b1d      	ldr	r3, [pc, #116]	; (20cc <configure_rtc_calendar+0x90>)
    2058:	447b      	add	r3, pc
    205a:	4798      	blx	r3
	init_time.year   = 2014;
    205c:	1d3b      	adds	r3, r7, #4
    205e:	4a1c      	ldr	r2, [pc, #112]	; (20d0 <configure_rtc_calendar+0x94>)
    2060:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    2062:	1d3b      	adds	r3, r7, #4
    2064:	2201      	movs	r2, #1
    2066:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    2068:	1d3b      	adds	r3, r7, #4
    206a:	2201      	movs	r2, #1
    206c:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    206e:	1d3b      	adds	r3, r7, #4
    2070:	2200      	movs	r2, #0
    2072:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    2074:	1d3b      	adds	r3, r7, #4
    2076:	2200      	movs	r2, #0
    2078:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    207a:	1d3b      	adds	r3, r7, #4
    207c:	2204      	movs	r2, #4
    207e:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    2080:	230c      	movs	r3, #12
    2082:	18fb      	adds	r3, r7, r3
    2084:	2201      	movs	r2, #1
    2086:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    2088:	230c      	movs	r3, #12
    208a:	18fb      	adds	r3, r7, r3
    208c:	1d3a      	adds	r2, r7, #4
    208e:	3308      	adds	r3, #8
    2090:	ca03      	ldmia	r2!, {r0, r1}
    2092:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2094:	230c      	movs	r3, #12
    2096:	18fb      	adds	r3, r7, r3
    2098:	2206      	movs	r2, #6
    209a:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    209c:	230c      	movs	r3, #12
    209e:	18fa      	adds	r2, r7, r3
    20a0:	490c      	ldr	r1, [pc, #48]	; (20d4 <configure_rtc_calendar+0x98>)
    20a2:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <configure_rtc_calendar+0x9c>)
    20a4:	58e3      	ldr	r3, [r4, r3]
    20a6:	0018      	movs	r0, r3
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <configure_rtc_calendar+0xa0>)
    20aa:	58e3      	ldr	r3, [r4, r3]
    20ac:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    20ae:	4b0a      	ldr	r3, [pc, #40]	; (20d8 <configure_rtc_calendar+0x9c>)
    20b0:	58e3      	ldr	r3, [r4, r3]
    20b2:	0018      	movs	r0, r3
    20b4:	4b0a      	ldr	r3, [pc, #40]	; (20e0 <configure_rtc_calendar+0xa4>)
    20b6:	58e3      	ldr	r3, [r4, r3]
    20b8:	4798      	blx	r3
}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	46bd      	mov	sp, r7
    20be:	b009      	add	sp, #36	; 0x24
    20c0:	bd90      	pop	{r4, r7, pc}
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	0000fd9c 	.word	0x0000fd9c
    20c8:	ffffff3b 	.word	0xffffff3b
    20cc:	fffffef5 	.word	0xfffffef5
    20d0:	000007de 	.word	0x000007de
    20d4:	40001400 	.word	0x40001400
    20d8:	00000030 	.word	0x00000030
    20dc:	000000d0 	.word	0x000000d0
    20e0:	00000058 	.word	0x00000058

000020e4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    20e4:	b5b0      	push	{r4, r5, r7, lr}
    20e6:	b084      	sub	sp, #16
    20e8:	af00      	add	r7, sp, #0
    20ea:	0002      	movs	r2, r0
    20ec:	1dfb      	adds	r3, r7, #7
    20ee:	701a      	strb	r2, [r3, #0]
    20f0:	4c1d      	ldr	r4, [pc, #116]	; (2168 <disk_initialize+0x84>)
    20f2:	447c      	add	r4, pc
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    20f4:	4b1d      	ldr	r3, [pc, #116]	; (216c <disk_initialize+0x88>)
    20f6:	447b      	add	r3, pc
    20f8:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    20fa:	1dfb      	adds	r3, r7, #7
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	2b01      	cmp	r3, #1
    2100:	d901      	bls.n	2106 <disk_initialize+0x22>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    2102:	2301      	movs	r3, #1
    2104:	e02b      	b.n	215e <disk_initialize+0x7a>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    2106:	2300      	movs	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	e011      	b.n	2130 <disk_initialize+0x4c>
		mem_status = mem_test_unit_ready(drv);
    210c:	230b      	movs	r3, #11
    210e:	18fd      	adds	r5, r7, r3
    2110:	1dfb      	adds	r3, r7, #7
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	0018      	movs	r0, r3
    2116:	4b16      	ldr	r3, [pc, #88]	; (2170 <disk_initialize+0x8c>)
    2118:	58e3      	ldr	r3, [r4, r3]
    211a:	4798      	blx	r3
    211c:	0003      	movs	r3, r0
    211e:	702b      	strb	r3, [r5, #0]
		if (CTRL_BUSY != mem_status) {
    2120:	230b      	movs	r3, #11
    2122:	18fb      	adds	r3, r7, r3
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b03      	cmp	r3, #3
    2128:	d106      	bne.n	2138 <disk_initialize+0x54>
	for (i = 0; i < 2; i ++) {
    212a:	68fb      	ldr	r3, [r7, #12]
    212c:	3301      	adds	r3, #1
    212e:	60fb      	str	r3, [r7, #12]
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	2b01      	cmp	r3, #1
    2134:	ddea      	ble.n	210c <disk_initialize+0x28>
    2136:	e000      	b.n	213a <disk_initialize+0x56>
			break;
    2138:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    213a:	230b      	movs	r3, #11
    213c:	18fb      	adds	r3, r7, r3
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	2b00      	cmp	r3, #0
    2142:	d001      	beq.n	2148 <disk_initialize+0x64>
		return STA_NOINIT;
    2144:	2301      	movs	r3, #1
    2146:	e00a      	b.n	215e <disk_initialize+0x7a>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    2148:	1dfb      	adds	r3, r7, #7
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	0018      	movs	r0, r3
    214e:	4b09      	ldr	r3, [pc, #36]	; (2174 <disk_initialize+0x90>)
    2150:	58e3      	ldr	r3, [r4, r3]
    2152:	4798      	blx	r3
    2154:	1e03      	subs	r3, r0, #0
    2156:	d001      	beq.n	215c <disk_initialize+0x78>
		return STA_PROTECT;
    2158:	2304      	movs	r3, #4
    215a:	e000      	b.n	215e <disk_initialize+0x7a>
	}

	/* The memory should already be initialized */
	return 0;
    215c:	2300      	movs	r3, #0
}
    215e:	0018      	movs	r0, r3
    2160:	46bd      	mov	sp, r7
    2162:	b004      	add	sp, #16
    2164:	bdb0      	pop	{r4, r5, r7, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	0000fcee 	.word	0x0000fcee
    216c:	ffffff43 	.word	0xffffff43
    2170:	000000f8 	.word	0x000000f8
    2174:	00000084 	.word	0x00000084

00002178 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	0002      	movs	r2, r0
    2180:	1dfb      	adds	r3, r7, #7
    2182:	701a      	strb	r2, [r3, #0]
    2184:	4a0a      	ldr	r2, [pc, #40]	; (21b0 <disk_status+0x38>)
    2186:	447a      	add	r2, pc
	switch (mem_test_unit_ready(drv)) {
    2188:	1dfb      	adds	r3, r7, #7
    218a:	781b      	ldrb	r3, [r3, #0]
    218c:	0018      	movs	r0, r3
    218e:	4b09      	ldr	r3, [pc, #36]	; (21b4 <disk_status+0x3c>)
    2190:	58d3      	ldr	r3, [r2, r3]
    2192:	4798      	blx	r3
    2194:	1e03      	subs	r3, r0, #0
    2196:	d002      	beq.n	219e <disk_status+0x26>
    2198:	2b02      	cmp	r3, #2
    219a:	d002      	beq.n	21a2 <disk_status+0x2a>
    219c:	e003      	b.n	21a6 <disk_status+0x2e>
	case CTRL_GOOD:
		return 0;
    219e:	2300      	movs	r3, #0
    21a0:	e002      	b.n	21a8 <disk_status+0x30>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    21a2:	2303      	movs	r3, #3
    21a4:	e000      	b.n	21a8 <disk_status+0x30>
	default:
		return STA_NOINIT;
    21a6:	2301      	movs	r3, #1
	}
}
    21a8:	0018      	movs	r0, r3
    21aa:	46bd      	mov	sp, r7
    21ac:	b002      	add	sp, #8
    21ae:	bd80      	pop	{r7, pc}
    21b0:	0000fc5a 	.word	0x0000fc5a
    21b4:	000000f8 	.word	0x000000f8

000021b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    21b8:	b5b0      	push	{r4, r5, r7, lr}
    21ba:	b088      	sub	sp, #32
    21bc:	af00      	add	r7, sp, #0
    21be:	60b9      	str	r1, [r7, #8]
    21c0:	607a      	str	r2, [r7, #4]
    21c2:	0019      	movs	r1, r3
    21c4:	230f      	movs	r3, #15
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	1c02      	adds	r2, r0, #0
    21ca:	701a      	strb	r2, [r3, #0]
    21cc:	230e      	movs	r3, #14
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	1c0a      	adds	r2, r1, #0
    21d2:	701a      	strb	r2, [r3, #0]
    21d4:	4c2e      	ldr	r4, [pc, #184]	; (2290 <disk_read+0xd8>)
    21d6:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    21d8:	231b      	movs	r3, #27
    21da:	18fd      	adds	r5, r7, r3
    21dc:	230f      	movs	r3, #15
    21de:	18fb      	adds	r3, r7, r3
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	0018      	movs	r0, r3
    21e4:	4b2b      	ldr	r3, [pc, #172]	; (2294 <disk_read+0xdc>)
    21e6:	58e3      	ldr	r3, [r4, r3]
    21e8:	4798      	blx	r3
    21ea:	0003      	movs	r3, r0
    21ec:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    21ee:	231b      	movs	r3, #27
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	2b00      	cmp	r3, #0
    21f6:	d101      	bne.n	21fc <disk_read+0x44>
		return RES_ERROR;
    21f8:	2301      	movs	r3, #1
    21fa:	e044      	b.n	2286 <disk_read+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    21fc:	2314      	movs	r3, #20
    21fe:	18fa      	adds	r2, r7, r3
    2200:	230f      	movs	r3, #15
    2202:	18fb      	adds	r3, r7, r3
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	0011      	movs	r1, r2
    2208:	0018      	movs	r0, r3
    220a:	4b23      	ldr	r3, [pc, #140]	; (2298 <disk_read+0xe0>)
    220c:	58e3      	ldr	r3, [r4, r3]
    220e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    2210:	230e      	movs	r3, #14
    2212:	18fb      	adds	r3, r7, r3
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	221b      	movs	r2, #27
    2218:	18ba      	adds	r2, r7, r2
    221a:	7812      	ldrb	r2, [r2, #0]
    221c:	4353      	muls	r3, r2
    221e:	001a      	movs	r2, r3
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    2224:	697b      	ldr	r3, [r7, #20]
    2226:	3301      	adds	r3, #1
    2228:	211b      	movs	r1, #27
    222a:	1879      	adds	r1, r7, r1
    222c:	7809      	ldrb	r1, [r1, #0]
    222e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    2230:	429a      	cmp	r2, r3
    2232:	d901      	bls.n	2238 <disk_read+0x80>
		return RES_PARERR;
    2234:	2304      	movs	r3, #4
    2236:	e026      	b.n	2286 <disk_read+0xce>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    2238:	2300      	movs	r3, #0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	e01c      	b.n	2278 <disk_read+0xc0>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    223e:	231b      	movs	r3, #27
    2240:	18fb      	adds	r3, r7, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	69fa      	ldr	r2, [r7, #28]
    2246:	435a      	muls	r2, r3
    2248:	687b      	ldr	r3, [r7, #4]
    224a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    224c:	231b      	movs	r3, #27
    224e:	18fb      	adds	r3, r7, r3
    2250:	781b      	ldrb	r3, [r3, #0]
    2252:	69fa      	ldr	r2, [r7, #28]
    2254:	4353      	muls	r3, r2
    2256:	025b      	lsls	r3, r3, #9
    2258:	68ba      	ldr	r2, [r7, #8]
    225a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    225c:	230f      	movs	r3, #15
    225e:	18fb      	adds	r3, r7, r3
    2260:	781b      	ldrb	r3, [r3, #0]
    2262:	0018      	movs	r0, r3
    2264:	4b0d      	ldr	r3, [pc, #52]	; (229c <disk_read+0xe4>)
    2266:	58e3      	ldr	r3, [r4, r3]
    2268:	4798      	blx	r3
    226a:	1e03      	subs	r3, r0, #0
    226c:	d001      	beq.n	2272 <disk_read+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    226e:	2301      	movs	r3, #1
    2270:	e009      	b.n	2286 <disk_read+0xce>
	for (i = 0; i < count; i++) {
    2272:	69fb      	ldr	r3, [r7, #28]
    2274:	3301      	adds	r3, #1
    2276:	61fb      	str	r3, [r7, #28]
    2278:	230e      	movs	r3, #14
    227a:	18fb      	adds	r3, r7, r3
    227c:	781a      	ldrb	r2, [r3, #0]
    227e:	69fb      	ldr	r3, [r7, #28]
    2280:	429a      	cmp	r2, r3
    2282:	d8dc      	bhi.n	223e <disk_read+0x86>
		}
	}

	return RES_OK;
    2284:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    2286:	0018      	movs	r0, r3
    2288:	46bd      	mov	sp, r7
    228a:	b008      	add	sp, #32
    228c:	bdb0      	pop	{r4, r5, r7, pc}
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	0000fc0a 	.word	0x0000fc0a
    2294:	000002f8 	.word	0x000002f8
    2298:	00000088 	.word	0x00000088
    229c:	0000007c 	.word	0x0000007c

000022a0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    22a0:	b5b0      	push	{r4, r5, r7, lr}
    22a2:	b088      	sub	sp, #32
    22a4:	af00      	add	r7, sp, #0
    22a6:	60b9      	str	r1, [r7, #8]
    22a8:	607a      	str	r2, [r7, #4]
    22aa:	0019      	movs	r1, r3
    22ac:	230f      	movs	r3, #15
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	1c02      	adds	r2, r0, #0
    22b2:	701a      	strb	r2, [r3, #0]
    22b4:	230e      	movs	r3, #14
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	1c0a      	adds	r2, r1, #0
    22ba:	701a      	strb	r2, [r3, #0]
    22bc:	4c2e      	ldr	r4, [pc, #184]	; (2378 <disk_write+0xd8>)
    22be:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    22c0:	231b      	movs	r3, #27
    22c2:	18fd      	adds	r5, r7, r3
    22c4:	230f      	movs	r3, #15
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	781b      	ldrb	r3, [r3, #0]
    22ca:	0018      	movs	r0, r3
    22cc:	4b2b      	ldr	r3, [pc, #172]	; (237c <disk_write+0xdc>)
    22ce:	58e3      	ldr	r3, [r4, r3]
    22d0:	4798      	blx	r3
    22d2:	0003      	movs	r3, r0
    22d4:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    22d6:	231b      	movs	r3, #27
    22d8:	18fb      	adds	r3, r7, r3
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	2b00      	cmp	r3, #0
    22de:	d101      	bne.n	22e4 <disk_write+0x44>
		return RES_ERROR;
    22e0:	2301      	movs	r3, #1
    22e2:	e044      	b.n	236e <disk_write+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    22e4:	2314      	movs	r3, #20
    22e6:	18fa      	adds	r2, r7, r3
    22e8:	230f      	movs	r3, #15
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	0011      	movs	r1, r2
    22f0:	0018      	movs	r0, r3
    22f2:	4b23      	ldr	r3, [pc, #140]	; (2380 <disk_write+0xe0>)
    22f4:	58e3      	ldr	r3, [r4, r3]
    22f6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    22f8:	230e      	movs	r3, #14
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	781b      	ldrb	r3, [r3, #0]
    22fe:	221b      	movs	r2, #27
    2300:	18ba      	adds	r2, r7, r2
    2302:	7812      	ldrb	r2, [r2, #0]
    2304:	4353      	muls	r3, r2
    2306:	001a      	movs	r2, r3
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    230c:	697b      	ldr	r3, [r7, #20]
    230e:	3301      	adds	r3, #1
    2310:	211b      	movs	r1, #27
    2312:	1879      	adds	r1, r7, r1
    2314:	7809      	ldrb	r1, [r1, #0]
    2316:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    2318:	429a      	cmp	r2, r3
    231a:	d901      	bls.n	2320 <disk_write+0x80>
		return RES_PARERR;
    231c:	2304      	movs	r3, #4
    231e:	e026      	b.n	236e <disk_write+0xce>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    2320:	2300      	movs	r3, #0
    2322:	61fb      	str	r3, [r7, #28]
    2324:	e01c      	b.n	2360 <disk_write+0xc0>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    2326:	231b      	movs	r3, #27
    2328:	18fb      	adds	r3, r7, r3
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	69fa      	ldr	r2, [r7, #28]
    232e:	435a      	muls	r2, r3
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    2334:	231b      	movs	r3, #27
    2336:	18fb      	adds	r3, r7, r3
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	69fa      	ldr	r2, [r7, #28]
    233c:	4353      	muls	r3, r2
    233e:	025b      	lsls	r3, r3, #9
    2340:	68ba      	ldr	r2, [r7, #8]
    2342:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    2344:	230f      	movs	r3, #15
    2346:	18fb      	adds	r3, r7, r3
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	0018      	movs	r0, r3
    234c:	4b0d      	ldr	r3, [pc, #52]	; (2384 <disk_write+0xe4>)
    234e:	58e3      	ldr	r3, [r4, r3]
    2350:	4798      	blx	r3
    2352:	1e03      	subs	r3, r0, #0
    2354:	d001      	beq.n	235a <disk_write+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    2356:	2301      	movs	r3, #1
    2358:	e009      	b.n	236e <disk_write+0xce>
	for (i = 0; i < count; i++) {
    235a:	69fb      	ldr	r3, [r7, #28]
    235c:	3301      	adds	r3, #1
    235e:	61fb      	str	r3, [r7, #28]
    2360:	230e      	movs	r3, #14
    2362:	18fb      	adds	r3, r7, r3
    2364:	781a      	ldrb	r2, [r3, #0]
    2366:	69fb      	ldr	r3, [r7, #28]
    2368:	429a      	cmp	r2, r3
    236a:	d8dc      	bhi.n	2326 <disk_write+0x86>
		}
	}

	return RES_OK;
    236c:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    236e:	0018      	movs	r0, r3
    2370:	46bd      	mov	sp, r7
    2372:	b008      	add	sp, #32
    2374:	bdb0      	pop	{r4, r5, r7, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	0000fb22 	.word	0x0000fb22
    237c:	000002f8 	.word	0x000002f8
    2380:	00000088 	.word	0x00000088
    2384:	0000000c 	.word	0x0000000c

00002388 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    2388:	b590      	push	{r4, r7, lr}
    238a:	b085      	sub	sp, #20
    238c:	af00      	add	r7, sp, #0
    238e:	603a      	str	r2, [r7, #0]
    2390:	1dfb      	adds	r3, r7, #7
    2392:	1c02      	adds	r2, r0, #0
    2394:	701a      	strb	r2, [r3, #0]
    2396:	1dbb      	adds	r3, r7, #6
    2398:	1c0a      	adds	r2, r1, #0
    239a:	701a      	strb	r2, [r3, #0]
    239c:	4b39      	ldr	r3, [pc, #228]	; (2484 <disk_ioctl+0xfc>)
    239e:	447b      	add	r3, pc
	DRESULT res = RES_PARERR;
    23a0:	220f      	movs	r2, #15
    23a2:	18ba      	adds	r2, r7, r2
    23a4:	2104      	movs	r1, #4
    23a6:	7011      	strb	r1, [r2, #0]

	switch (ctrl) {
    23a8:	1dba      	adds	r2, r7, #6
    23aa:	7812      	ldrb	r2, [r2, #0]
    23ac:	2a03      	cmp	r2, #3
    23ae:	d85e      	bhi.n	246e <disk_ioctl+0xe6>
    23b0:	0010      	movs	r0, r2
    23b2:	f00e f96d 	bl	10690 <__gnu_thumb1_case_si>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	00000092 	.word	0x00000092
    23bc:	00000020 	.word	0x00000020
    23c0:	00000042 	.word	0x00000042
    23c4:	00000010 	.word	0x00000010
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	2201      	movs	r2, #1
    23cc:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    23ce:	230f      	movs	r3, #15
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	2200      	movs	r2, #0
    23d4:	701a      	strb	r2, [r3, #0]
		break;
    23d6:	e04e      	b.n	2476 <disk_ioctl+0xee>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    23d8:	2208      	movs	r2, #8
    23da:	18b9      	adds	r1, r7, r2
    23dc:	1dfa      	adds	r2, r7, #7
    23de:	7812      	ldrb	r2, [r2, #0]
    23e0:	0010      	movs	r0, r2
    23e2:	4a29      	ldr	r2, [pc, #164]	; (2488 <disk_ioctl+0x100>)
    23e4:	589b      	ldr	r3, [r3, r2]
    23e6:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    23e8:	68bb      	ldr	r3, [r7, #8]
    23ea:	1c5a      	adds	r2, r3, #1
    23ec:	683b      	ldr	r3, [r7, #0]
    23ee:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    23f0:	230f      	movs	r3, #15
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	2200      	movs	r2, #0
    23f6:	701a      	strb	r2, [r3, #0]
	}
	break;
    23f8:	e03d      	b.n	2476 <disk_ioctl+0xee>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    23fa:	220e      	movs	r2, #14
    23fc:	18bc      	adds	r4, r7, r2
    23fe:	1dfa      	adds	r2, r7, #7
    2400:	7812      	ldrb	r2, [r2, #0]
    2402:	0010      	movs	r0, r2
    2404:	4a21      	ldr	r2, [pc, #132]	; (248c <disk_ioctl+0x104>)
    2406:	589b      	ldr	r3, [r3, r2]
    2408:	4798      	blx	r3
    240a:	0003      	movs	r3, r0
    240c:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    240e:	230e      	movs	r3, #14
    2410:	18fb      	adds	r3, r7, r3
    2412:	781b      	ldrb	r3, [r3, #0]
    2414:	2b01      	cmp	r3, #1
    2416:	d010      	beq.n	243a <disk_ioctl+0xb2>
    2418:	230e      	movs	r3, #14
    241a:	18fb      	adds	r3, r7, r3
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	2b02      	cmp	r3, #2
    2420:	d00b      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    2422:	230e      	movs	r3, #14
    2424:	18fb      	adds	r3, r7, r3
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	2b04      	cmp	r3, #4
    242a:	d006      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    242c:	230e      	movs	r3, #14
    242e:	18fb      	adds	r3, r7, r3
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	2b08      	cmp	r3, #8
    2434:	d001      	beq.n	243a <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    2436:	2301      	movs	r3, #1
    2438:	e020      	b.n	247c <disk_ioctl+0xf4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	2200      	movs	r2, #0
    243e:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    2440:	230f      	movs	r3, #15
    2442:	18fb      	adds	r3, r7, r3
    2444:	2200      	movs	r2, #0
    2446:	701a      	strb	r2, [r3, #0]
	}
	break;
    2448:	e015      	b.n	2476 <disk_ioctl+0xee>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    244a:	1dfa      	adds	r2, r7, #7
    244c:	7812      	ldrb	r2, [r2, #0]
    244e:	0010      	movs	r0, r2
    2450:	4a0f      	ldr	r2, [pc, #60]	; (2490 <disk_ioctl+0x108>)
    2452:	589b      	ldr	r3, [r3, r2]
    2454:	4798      	blx	r3
    2456:	1e03      	subs	r3, r0, #0
    2458:	d104      	bne.n	2464 <disk_ioctl+0xdc>
			res = RES_OK;
    245a:	230f      	movs	r3, #15
    245c:	18fb      	adds	r3, r7, r3
    245e:	2200      	movs	r2, #0
    2460:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    2462:	e008      	b.n	2476 <disk_ioctl+0xee>
			res = RES_NOTRDY;
    2464:	230f      	movs	r3, #15
    2466:	18fb      	adds	r3, r7, r3
    2468:	2203      	movs	r2, #3
    246a:	701a      	strb	r2, [r3, #0]
		break;
    246c:	e003      	b.n	2476 <disk_ioctl+0xee>

	default:
		res = RES_PARERR;
    246e:	230f      	movs	r3, #15
    2470:	18fb      	adds	r3, r7, r3
    2472:	2204      	movs	r2, #4
    2474:	701a      	strb	r2, [r3, #0]
	}

	return res;
    2476:	230f      	movs	r3, #15
    2478:	18fb      	adds	r3, r7, r3
    247a:	781b      	ldrb	r3, [r3, #0]
}
    247c:	0018      	movs	r0, r3
    247e:	46bd      	mov	sp, r7
    2480:	b005      	add	sp, #20
    2482:	bd90      	pop	{r4, r7, pc}
    2484:	0000fa42 	.word	0x0000fa42
    2488:	00000088 	.word	0x00000088
    248c:	000002f8 	.word	0x000002f8
    2490:	000000f8 	.word	0x000000f8

00002494 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	4b15      	ldr	r3, [pc, #84]	; (24f0 <get_fattime+0x5c>)
    249c:	447b      	add	r3, pc
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    249e:	1d39      	adds	r1, r7, #4
    24a0:	4a14      	ldr	r2, [pc, #80]	; (24f4 <get_fattime+0x60>)
    24a2:	589a      	ldr	r2, [r3, r2]
    24a4:	0010      	movs	r0, r2
    24a6:	4a14      	ldr	r2, [pc, #80]	; (24f8 <get_fattime+0x64>)
    24a8:	589b      	ldr	r3, [r3, r2]
    24aa:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    24ac:	1d3b      	adds	r3, r7, #4
    24ae:	88db      	ldrh	r3, [r3, #6]
    24b0:	4a12      	ldr	r2, [pc, #72]	; (24fc <get_fattime+0x68>)
    24b2:	4694      	mov	ip, r2
    24b4:	4463      	add	r3, ip
    24b6:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    24b8:	1d3b      	adds	r3, r7, #4
    24ba:	795b      	ldrb	r3, [r3, #5]
    24bc:	055b      	lsls	r3, r3, #21
    24be:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    24c0:	1d3b      	adds	r3, r7, #4
    24c2:	791b      	ldrb	r3, [r3, #4]
    24c4:	041b      	lsls	r3, r3, #16
    24c6:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    24c8:	1d3b      	adds	r3, r7, #4
    24ca:	789b      	ldrb	r3, [r3, #2]
    24cc:	02db      	lsls	r3, r3, #11
    24ce:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    24d0:	1d3b      	adds	r3, r7, #4
    24d2:	785b      	ldrb	r3, [r3, #1]
    24d4:	015b      	lsls	r3, r3, #5
    24d6:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    24d8:	1d3a      	adds	r2, r7, #4
    24da:	7812      	ldrb	r2, [r2, #0]
    24dc:	0852      	lsrs	r2, r2, #1
    24de:	b2d2      	uxtb	r2, r2
    24e0:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    24e2:	60fb      	str	r3, [r7, #12]

	return ul_time;
    24e4:	68fb      	ldr	r3, [r7, #12]
}
    24e6:	0018      	movs	r0, r3
    24e8:	46bd      	mov	sp, r7
    24ea:	b004      	add	sp, #16
    24ec:	bd80      	pop	{r7, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	0000f944 	.word	0x0000f944
    24f4:	00000030 	.word	0x00000030
    24f8:	00000134 	.word	0x00000134
    24fc:	fffff844 	.word	0xfffff844

00002500 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2500:	b580      	push	{r7, lr}
    2502:	b086      	sub	sp, #24
    2504:	af00      	add	r7, sp, #0
    2506:	60f8      	str	r0, [r7, #12]
    2508:	60b9      	str	r1, [r7, #8]
    250a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    250c:	68fb      	ldr	r3, [r7, #12]
    250e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    2510:	68bb      	ldr	r3, [r7, #8]
    2512:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2514:	e007      	b.n	2526 <mem_cpy+0x26>
		*d++ = *s++;
    2516:	697b      	ldr	r3, [r7, #20]
    2518:	1c5a      	adds	r2, r3, #1
    251a:	617a      	str	r2, [r7, #20]
    251c:	693a      	ldr	r2, [r7, #16]
    251e:	1c51      	adds	r1, r2, #1
    2520:	6139      	str	r1, [r7, #16]
    2522:	7812      	ldrb	r2, [r2, #0]
    2524:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    2526:	687b      	ldr	r3, [r7, #4]
    2528:	1e5a      	subs	r2, r3, #1
    252a:	607a      	str	r2, [r7, #4]
    252c:	2b00      	cmp	r3, #0
    252e:	d1f2      	bne.n	2516 <mem_cpy+0x16>
}
    2530:	46c0      	nop			; (mov r8, r8)
    2532:	46bd      	mov	sp, r7
    2534:	b006      	add	sp, #24
    2536:	bd80      	pop	{r7, pc}

00002538 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    2538:	b580      	push	{r7, lr}
    253a:	b086      	sub	sp, #24
    253c:	af00      	add	r7, sp, #0
    253e:	60f8      	str	r0, [r7, #12]
    2540:	60b9      	str	r1, [r7, #8]
    2542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	617b      	str	r3, [r7, #20]

	while (cnt--)
    2548:	e005      	b.n	2556 <mem_set+0x1e>
		*d++ = (BYTE)val;
    254a:	697b      	ldr	r3, [r7, #20]
    254c:	1c5a      	adds	r2, r3, #1
    254e:	617a      	str	r2, [r7, #20]
    2550:	68ba      	ldr	r2, [r7, #8]
    2552:	b2d2      	uxtb	r2, r2
    2554:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    2556:	687b      	ldr	r3, [r7, #4]
    2558:	1e5a      	subs	r2, r3, #1
    255a:	607a      	str	r2, [r7, #4]
    255c:	2b00      	cmp	r3, #0
    255e:	d1f4      	bne.n	254a <mem_set+0x12>
}
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46bd      	mov	sp, r7
    2564:	b006      	add	sp, #24
    2566:	bd80      	pop	{r7, pc}

00002568 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    2568:	b580      	push	{r7, lr}
    256a:	b088      	sub	sp, #32
    256c:	af00      	add	r7, sp, #0
    256e:	60f8      	str	r0, [r7, #12]
    2570:	60b9      	str	r1, [r7, #8]
    2572:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	61fb      	str	r3, [r7, #28]
    2578:	68bb      	ldr	r3, [r7, #8]
    257a:	61bb      	str	r3, [r7, #24]
	int r = 0;
    257c:	2300      	movs	r3, #0
    257e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2580:	46c0      	nop			; (mov r8, r8)
    2582:	687b      	ldr	r3, [r7, #4]
    2584:	1e5a      	subs	r2, r3, #1
    2586:	607a      	str	r2, [r7, #4]
    2588:	2b00      	cmp	r3, #0
    258a:	d00d      	beq.n	25a8 <mem_cmp+0x40>
    258c:	69fb      	ldr	r3, [r7, #28]
    258e:	1c5a      	adds	r2, r3, #1
    2590:	61fa      	str	r2, [r7, #28]
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	0019      	movs	r1, r3
    2596:	69bb      	ldr	r3, [r7, #24]
    2598:	1c5a      	adds	r2, r3, #1
    259a:	61ba      	str	r2, [r7, #24]
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	1acb      	subs	r3, r1, r3
    25a0:	617b      	str	r3, [r7, #20]
    25a2:	697b      	ldr	r3, [r7, #20]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d0ec      	beq.n	2582 <mem_cmp+0x1a>
	return r;
    25a8:	697b      	ldr	r3, [r7, #20]
}
    25aa:	0018      	movs	r0, r3
    25ac:	46bd      	mov	sp, r7
    25ae:	b008      	add	sp, #32
    25b0:	bd80      	pop	{r7, pc}

000025b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    25b2:	b580      	push	{r7, lr}
    25b4:	b082      	sub	sp, #8
    25b6:	af00      	add	r7, sp, #0
    25b8:	6078      	str	r0, [r7, #4]
    25ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    25bc:	e002      	b.n	25c4 <chk_chr+0x12>
    25be:	687b      	ldr	r3, [r7, #4]
    25c0:	3301      	adds	r3, #1
    25c2:	607b      	str	r3, [r7, #4]
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d005      	beq.n	25d8 <chk_chr+0x26>
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	001a      	movs	r2, r3
    25d2:	683b      	ldr	r3, [r7, #0]
    25d4:	429a      	cmp	r2, r3
    25d6:	d1f2      	bne.n	25be <chk_chr+0xc>
	return *str;
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	781b      	ldrb	r3, [r3, #0]
}
    25dc:	0018      	movs	r0, r3
    25de:	46bd      	mov	sp, r7
    25e0:	b002      	add	sp, #8
    25e2:	bd80      	pop	{r7, pc}

000025e4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    25e4:	b5b0      	push	{r4, r5, r7, lr}
    25e6:	b084      	sub	sp, #16
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
    25ec:	6039      	str	r1, [r7, #0]
    25ee:	4c30      	ldr	r4, [pc, #192]	; (26b0 <move_window+0xcc>)
    25f0:	447c      	add	r4, pc
	DWORD wsect;


	wsect = fs->winsect;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25f6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    25f8:	68fa      	ldr	r2, [r7, #12]
    25fa:	683b      	ldr	r3, [r7, #0]
    25fc:	429a      	cmp	r2, r3
    25fe:	d051      	beq.n	26a4 <move_window+0xc0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	791b      	ldrb	r3, [r3, #4]
    2604:	2b00      	cmp	r3, #0
    2606:	d039      	beq.n	267c <move_window+0x98>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	7858      	ldrb	r0, [r3, #1]
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	3330      	adds	r3, #48	; 0x30
    2610:	0019      	movs	r1, r3
    2612:	68fa      	ldr	r2, [r7, #12]
    2614:	2301      	movs	r3, #1
    2616:	4d27      	ldr	r5, [pc, #156]	; (26b4 <move_window+0xd0>)
    2618:	5965      	ldr	r5, [r4, r5]
    261a:	47a8      	blx	r5
    261c:	1e03      	subs	r3, r0, #0
    261e:	d001      	beq.n	2624 <move_window+0x40>
				return FR_DISK_ERR;
    2620:	2301      	movs	r3, #1
    2622:	e040      	b.n	26a6 <move_window+0xc2>
			fs->wflag = 0;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2200      	movs	r2, #0
    2628:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	6a1a      	ldr	r2, [r3, #32]
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	69db      	ldr	r3, [r3, #28]
    2632:	18d2      	adds	r2, r2, r3
    2634:	68fb      	ldr	r3, [r7, #12]
    2636:	429a      	cmp	r2, r3
    2638:	d920      	bls.n	267c <move_window+0x98>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    263a:	230b      	movs	r3, #11
    263c:	18fb      	adds	r3, r7, r3
    263e:	687a      	ldr	r2, [r7, #4]
    2640:	78d2      	ldrb	r2, [r2, #3]
    2642:	701a      	strb	r2, [r3, #0]
    2644:	e015      	b.n	2672 <move_window+0x8e>
					wsect += fs->fsize;
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	69db      	ldr	r3, [r3, #28]
    264a:	68fa      	ldr	r2, [r7, #12]
    264c:	18d3      	adds	r3, r2, r3
    264e:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    2650:	687b      	ldr	r3, [r7, #4]
    2652:	7858      	ldrb	r0, [r3, #1]
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	3330      	adds	r3, #48	; 0x30
    2658:	0019      	movs	r1, r3
    265a:	68fa      	ldr	r2, [r7, #12]
    265c:	2301      	movs	r3, #1
    265e:	4d15      	ldr	r5, [pc, #84]	; (26b4 <move_window+0xd0>)
    2660:	5965      	ldr	r5, [r4, r5]
    2662:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2664:	230b      	movs	r3, #11
    2666:	18fb      	adds	r3, r7, r3
    2668:	781a      	ldrb	r2, [r3, #0]
    266a:	230b      	movs	r3, #11
    266c:	18fb      	adds	r3, r7, r3
    266e:	3a01      	subs	r2, #1
    2670:	701a      	strb	r2, [r3, #0]
    2672:	230b      	movs	r3, #11
    2674:	18fb      	adds	r3, r7, r3
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b01      	cmp	r3, #1
    267a:	d8e4      	bhi.n	2646 <move_window+0x62>
				}
			}
		}
#endif
		if (sector) {
    267c:	683b      	ldr	r3, [r7, #0]
    267e:	2b00      	cmp	r3, #0
    2680:	d010      	beq.n	26a4 <move_window+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	7858      	ldrb	r0, [r3, #1]
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	3330      	adds	r3, #48	; 0x30
    268a:	0019      	movs	r1, r3
    268c:	683a      	ldr	r2, [r7, #0]
    268e:	2301      	movs	r3, #1
    2690:	4d09      	ldr	r5, [pc, #36]	; (26b8 <move_window+0xd4>)
    2692:	5964      	ldr	r4, [r4, r5]
    2694:	47a0      	blx	r4
    2696:	1e03      	subs	r3, r0, #0
    2698:	d001      	beq.n	269e <move_window+0xba>
				return FR_DISK_ERR;
    269a:	2301      	movs	r3, #1
    269c:	e003      	b.n	26a6 <move_window+0xc2>
			fs->winsect = sector;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	683a      	ldr	r2, [r7, #0]
    26a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    26a4:	2300      	movs	r3, #0
}
    26a6:	0018      	movs	r0, r3
    26a8:	46bd      	mov	sp, r7
    26aa:	b004      	add	sp, #16
    26ac:	bdb0      	pop	{r4, r5, r7, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	0000f7f0 	.word	0x0000f7f0
    26b4:	000002a0 	.word	0x000002a0
    26b8:	000002c0 	.word	0x000002c0

000026bc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    26bc:	b5b0      	push	{r4, r5, r7, lr}
    26be:	b084      	sub	sp, #16
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	4c58      	ldr	r4, [pc, #352]	; (2828 <sync+0x16c>)
    26c6:	447c      	add	r4, pc
	FRESULT res;


	res = move_window(fs, 0);
    26c8:	230f      	movs	r3, #15
    26ca:	18fd      	adds	r5, r7, r3
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2100      	movs	r1, #0
    26d0:	0018      	movs	r0, r3
    26d2:	4b56      	ldr	r3, [pc, #344]	; (282c <sync+0x170>)
    26d4:	447b      	add	r3, pc
    26d6:	4798      	blx	r3
    26d8:	0003      	movs	r3, r0
    26da:	702b      	strb	r3, [r5, #0]
	if (res == FR_OK) {
    26dc:	230f      	movs	r3, #15
    26de:	18fb      	adds	r3, r7, r3
    26e0:	781b      	ldrb	r3, [r3, #0]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d000      	beq.n	26e8 <sync+0x2c>
    26e6:	e097      	b.n	2818 <sync+0x15c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	2b03      	cmp	r3, #3
    26ee:	d000      	beq.n	26f2 <sync+0x36>
    26f0:	e084      	b.n	27fc <sync+0x140>
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	795b      	ldrb	r3, [r3, #5]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d100      	bne.n	26fc <sync+0x40>
    26fa:	e07f      	b.n	27fc <sync+0x140>
			fs->winsect = 0;
    26fc:	687b      	ldr	r3, [r7, #4]
    26fe:	2200      	movs	r2, #0
    2700:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	3330      	adds	r3, #48	; 0x30
    2706:	0018      	movs	r0, r3
    2708:	2380      	movs	r3, #128	; 0x80
    270a:	009b      	lsls	r3, r3, #2
    270c:	001a      	movs	r2, r3
    270e:	2100      	movs	r1, #0
    2710:	4b47      	ldr	r3, [pc, #284]	; (2830 <sync+0x174>)
    2712:	447b      	add	r3, pc
    2714:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	4a46      	ldr	r2, [pc, #280]	; (2834 <sync+0x178>)
    271a:	2155      	movs	r1, #85	; 0x55
    271c:	5499      	strb	r1, [r3, r2]
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	4a45      	ldr	r2, [pc, #276]	; (2838 <sync+0x17c>)
    2722:	21aa      	movs	r1, #170	; 0xaa
    2724:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2230      	movs	r2, #48	; 0x30
    272a:	2152      	movs	r1, #82	; 0x52
    272c:	5499      	strb	r1, [r3, r2]
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	2231      	movs	r2, #49	; 0x31
    2732:	2152      	movs	r1, #82	; 0x52
    2734:	5499      	strb	r1, [r3, r2]
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2232      	movs	r2, #50	; 0x32
    273a:	2161      	movs	r1, #97	; 0x61
    273c:	5499      	strb	r1, [r3, r2]
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	2233      	movs	r2, #51	; 0x33
    2742:	2141      	movs	r1, #65	; 0x41
    2744:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    2746:	687a      	ldr	r2, [r7, #4]
    2748:	2385      	movs	r3, #133	; 0x85
    274a:	009b      	lsls	r3, r3, #2
    274c:	2172      	movs	r1, #114	; 0x72
    274e:	54d1      	strb	r1, [r2, r3]
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	4a3a      	ldr	r2, [pc, #232]	; (283c <sync+0x180>)
    2754:	2172      	movs	r1, #114	; 0x72
    2756:	5499      	strb	r1, [r3, r2]
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	4a39      	ldr	r2, [pc, #228]	; (2840 <sync+0x184>)
    275c:	2141      	movs	r1, #65	; 0x41
    275e:	5499      	strb	r1, [r3, r2]
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	4a38      	ldr	r2, [pc, #224]	; (2844 <sync+0x188>)
    2764:	2161      	movs	r1, #97	; 0x61
    2766:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	691b      	ldr	r3, [r3, #16]
    276c:	b2d9      	uxtb	r1, r3
    276e:	687a      	ldr	r2, [r7, #4]
    2770:	2386      	movs	r3, #134	; 0x86
    2772:	009b      	lsls	r3, r3, #2
    2774:	54d1      	strb	r1, [r2, r3]
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	691b      	ldr	r3, [r3, #16]
    277a:	b29b      	uxth	r3, r3
    277c:	0a1b      	lsrs	r3, r3, #8
    277e:	b29b      	uxth	r3, r3
    2780:	b2d9      	uxtb	r1, r3
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	4a30      	ldr	r2, [pc, #192]	; (2848 <sync+0x18c>)
    2786:	5499      	strb	r1, [r3, r2]
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	691b      	ldr	r3, [r3, #16]
    278c:	0c1b      	lsrs	r3, r3, #16
    278e:	b2d9      	uxtb	r1, r3
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	4a2e      	ldr	r2, [pc, #184]	; (284c <sync+0x190>)
    2794:	5499      	strb	r1, [r3, r2]
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	691b      	ldr	r3, [r3, #16]
    279a:	0e1b      	lsrs	r3, r3, #24
    279c:	b2d9      	uxtb	r1, r3
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	4a2b      	ldr	r2, [pc, #172]	; (2850 <sync+0x194>)
    27a2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	68db      	ldr	r3, [r3, #12]
    27a8:	b2d9      	uxtb	r1, r3
    27aa:	687a      	ldr	r2, [r7, #4]
    27ac:	2387      	movs	r3, #135	; 0x87
    27ae:	009b      	lsls	r3, r3, #2
    27b0:	54d1      	strb	r1, [r2, r3]
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	68db      	ldr	r3, [r3, #12]
    27b6:	b29b      	uxth	r3, r3
    27b8:	0a1b      	lsrs	r3, r3, #8
    27ba:	b29b      	uxth	r3, r3
    27bc:	b2d9      	uxtb	r1, r3
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	4a24      	ldr	r2, [pc, #144]	; (2854 <sync+0x198>)
    27c2:	5499      	strb	r1, [r3, r2]
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	68db      	ldr	r3, [r3, #12]
    27c8:	0c1b      	lsrs	r3, r3, #16
    27ca:	b2d9      	uxtb	r1, r3
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	4a22      	ldr	r2, [pc, #136]	; (2858 <sync+0x19c>)
    27d0:	5499      	strb	r1, [r3, r2]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	68db      	ldr	r3, [r3, #12]
    27d6:	0e1b      	lsrs	r3, r3, #24
    27d8:	b2d9      	uxtb	r1, r3
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	4a1f      	ldr	r2, [pc, #124]	; (285c <sync+0x1a0>)
    27de:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	7858      	ldrb	r0, [r3, #1]
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	3330      	adds	r3, #48	; 0x30
    27e8:	0019      	movs	r1, r3
    27ea:	687b      	ldr	r3, [r7, #4]
    27ec:	695a      	ldr	r2, [r3, #20]
    27ee:	2301      	movs	r3, #1
    27f0:	4d1b      	ldr	r5, [pc, #108]	; (2860 <sync+0x1a4>)
    27f2:	5965      	ldr	r5, [r4, r5]
    27f4:	47a8      	blx	r5
			fs->fsi_flag = 0;
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	2200      	movs	r2, #0
    27fa:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    27fc:	687b      	ldr	r3, [r7, #4]
    27fe:	785b      	ldrb	r3, [r3, #1]
    2800:	2200      	movs	r2, #0
    2802:	2100      	movs	r1, #0
    2804:	0018      	movs	r0, r3
    2806:	4b17      	ldr	r3, [pc, #92]	; (2864 <sync+0x1a8>)
    2808:	58e3      	ldr	r3, [r4, r3]
    280a:	4798      	blx	r3
    280c:	1e03      	subs	r3, r0, #0
    280e:	d003      	beq.n	2818 <sync+0x15c>
			res = FR_DISK_ERR;
    2810:	230f      	movs	r3, #15
    2812:	18fb      	adds	r3, r7, r3
    2814:	2201      	movs	r2, #1
    2816:	701a      	strb	r2, [r3, #0]
	}

	return res;
    2818:	230f      	movs	r3, #15
    281a:	18fb      	adds	r3, r7, r3
    281c:	781b      	ldrb	r3, [r3, #0]
}
    281e:	0018      	movs	r0, r3
    2820:	46bd      	mov	sp, r7
    2822:	b004      	add	sp, #16
    2824:	bdb0      	pop	{r4, r5, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	0000f71a 	.word	0x0000f71a
    282c:	ffffff0d 	.word	0xffffff0d
    2830:	fffffe23 	.word	0xfffffe23
    2834:	0000022e 	.word	0x0000022e
    2838:	0000022f 	.word	0x0000022f
    283c:	00000215 	.word	0x00000215
    2840:	00000216 	.word	0x00000216
    2844:	00000217 	.word	0x00000217
    2848:	00000219 	.word	0x00000219
    284c:	0000021a 	.word	0x0000021a
    2850:	0000021b 	.word	0x0000021b
    2854:	0000021d 	.word	0x0000021d
    2858:	0000021e 	.word	0x0000021e
    285c:	0000021f 	.word	0x0000021f
    2860:	000002a0 	.word	0x000002a0
    2864:	000000e4 	.word	0x000000e4

00002868 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    2870:	6039      	str	r1, [r7, #0]
	clst -= 2;
    2872:	683b      	ldr	r3, [r7, #0]
    2874:	3b02      	subs	r3, #2
    2876:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	699b      	ldr	r3, [r3, #24]
    287c:	1e9a      	subs	r2, r3, #2
    287e:	683b      	ldr	r3, [r7, #0]
    2880:	429a      	cmp	r2, r3
    2882:	d801      	bhi.n	2888 <clust2sect+0x20>
    2884:	2300      	movs	r3, #0
    2886:	e007      	b.n	2898 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    2888:	687b      	ldr	r3, [r7, #4]
    288a:	789b      	ldrb	r3, [r3, #2]
    288c:	001a      	movs	r2, r3
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	435a      	muls	r2, r3
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2896:	18d3      	adds	r3, r2, r3
}
    2898:	0018      	movs	r0, r3
    289a:	46bd      	mov	sp, r7
    289c:	b002      	add	sp, #8
    289e:	bd80      	pop	{r7, pc}

000028a0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b086      	sub	sp, #24
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    28a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    28aa:	683b      	ldr	r3, [r7, #0]
    28ac:	2b01      	cmp	r3, #1
    28ae:	d904      	bls.n	28ba <get_fat+0x1a>
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	699a      	ldr	r2, [r3, #24]
    28b4:	683b      	ldr	r3, [r7, #0]
    28b6:	429a      	cmp	r2, r3
    28b8:	d801      	bhi.n	28be <get_fat+0x1e>
		return 1;
    28ba:	2301      	movs	r3, #1
    28bc:	e0a3      	b.n	2a06 <get_fat+0x166>

	switch (fs->fs_type) {
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	781b      	ldrb	r3, [r3, #0]
    28c2:	2b02      	cmp	r3, #2
    28c4:	d04a      	beq.n	295c <get_fat+0xbc>
    28c6:	2b03      	cmp	r3, #3
    28c8:	d06a      	beq.n	29a0 <get_fat+0x100>
    28ca:	2b01      	cmp	r3, #1
    28cc:	d000      	beq.n	28d0 <get_fat+0x30>
    28ce:	e098      	b.n	2a02 <get_fat+0x162>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	617b      	str	r3, [r7, #20]
    28d4:	697b      	ldr	r3, [r7, #20]
    28d6:	085b      	lsrs	r3, r3, #1
    28d8:	697a      	ldr	r2, [r7, #20]
    28da:	18d3      	adds	r3, r2, r3
    28dc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	6a1a      	ldr	r2, [r3, #32]
    28e2:	697b      	ldr	r3, [r7, #20]
    28e4:	0a5b      	lsrs	r3, r3, #9
    28e6:	18d2      	adds	r2, r2, r3
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	0011      	movs	r1, r2
    28ec:	0018      	movs	r0, r3
    28ee:	4b48      	ldr	r3, [pc, #288]	; (2a10 <get_fat+0x170>)
    28f0:	447b      	add	r3, pc
    28f2:	4798      	blx	r3
    28f4:	1e03      	subs	r3, r0, #0
    28f6:	d000      	beq.n	28fa <get_fat+0x5a>
    28f8:	e07c      	b.n	29f4 <get_fat+0x154>
		wc = fs->win[bc % SS(fs)]; bc++;
    28fa:	697b      	ldr	r3, [r7, #20]
    28fc:	05db      	lsls	r3, r3, #23
    28fe:	0ddb      	lsrs	r3, r3, #23
    2900:	687a      	ldr	r2, [r7, #4]
    2902:	2130      	movs	r1, #48	; 0x30
    2904:	18d3      	adds	r3, r2, r3
    2906:	185b      	adds	r3, r3, r1
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	613b      	str	r3, [r7, #16]
    290c:	697b      	ldr	r3, [r7, #20]
    290e:	3301      	adds	r3, #1
    2910:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2912:	687b      	ldr	r3, [r7, #4]
    2914:	6a1a      	ldr	r2, [r3, #32]
    2916:	697b      	ldr	r3, [r7, #20]
    2918:	0a5b      	lsrs	r3, r3, #9
    291a:	18d2      	adds	r2, r2, r3
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	0011      	movs	r1, r2
    2920:	0018      	movs	r0, r3
    2922:	4b3c      	ldr	r3, [pc, #240]	; (2a14 <get_fat+0x174>)
    2924:	447b      	add	r3, pc
    2926:	4798      	blx	r3
    2928:	1e03      	subs	r3, r0, #0
    292a:	d165      	bne.n	29f8 <get_fat+0x158>
		wc |= fs->win[bc % SS(fs)] << 8;
    292c:	697b      	ldr	r3, [r7, #20]
    292e:	05db      	lsls	r3, r3, #23
    2930:	0ddb      	lsrs	r3, r3, #23
    2932:	687a      	ldr	r2, [r7, #4]
    2934:	2130      	movs	r1, #48	; 0x30
    2936:	18d3      	adds	r3, r2, r3
    2938:	185b      	adds	r3, r3, r1
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	021b      	lsls	r3, r3, #8
    293e:	001a      	movs	r2, r3
    2940:	693b      	ldr	r3, [r7, #16]
    2942:	4313      	orrs	r3, r2
    2944:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	2201      	movs	r2, #1
    294a:	4013      	ands	r3, r2
    294c:	d002      	beq.n	2954 <get_fat+0xb4>
    294e:	693b      	ldr	r3, [r7, #16]
    2950:	091b      	lsrs	r3, r3, #4
    2952:	e058      	b.n	2a06 <get_fat+0x166>
    2954:	693b      	ldr	r3, [r7, #16]
    2956:	051b      	lsls	r3, r3, #20
    2958:	0d1b      	lsrs	r3, r3, #20
    295a:	e054      	b.n	2a06 <get_fat+0x166>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	6a1a      	ldr	r2, [r3, #32]
    2960:	683b      	ldr	r3, [r7, #0]
    2962:	0a1b      	lsrs	r3, r3, #8
    2964:	18d2      	adds	r2, r2, r3
    2966:	687b      	ldr	r3, [r7, #4]
    2968:	0011      	movs	r1, r2
    296a:	0018      	movs	r0, r3
    296c:	4b2a      	ldr	r3, [pc, #168]	; (2a18 <get_fat+0x178>)
    296e:	447b      	add	r3, pc
    2970:	4798      	blx	r3
    2972:	1e03      	subs	r3, r0, #0
    2974:	d142      	bne.n	29fc <get_fat+0x15c>
		p = &fs->win[clst * 2 % SS(fs)];
    2976:	683b      	ldr	r3, [r7, #0]
    2978:	005a      	lsls	r2, r3, #1
    297a:	23ff      	movs	r3, #255	; 0xff
    297c:	005b      	lsls	r3, r3, #1
    297e:	4013      	ands	r3, r2
    2980:	3330      	adds	r3, #48	; 0x30
    2982:	687a      	ldr	r2, [r7, #4]
    2984:	18d3      	adds	r3, r2, r3
    2986:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	3301      	adds	r3, #1
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	021b      	lsls	r3, r3, #8
    2990:	b21a      	sxth	r2, r3
    2992:	68fb      	ldr	r3, [r7, #12]
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	b21b      	sxth	r3, r3
    2998:	4313      	orrs	r3, r2
    299a:	b21b      	sxth	r3, r3
    299c:	b29b      	uxth	r3, r3
    299e:	e032      	b.n	2a06 <get_fat+0x166>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	6a1a      	ldr	r2, [r3, #32]
    29a4:	683b      	ldr	r3, [r7, #0]
    29a6:	09db      	lsrs	r3, r3, #7
    29a8:	18d2      	adds	r2, r2, r3
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	0011      	movs	r1, r2
    29ae:	0018      	movs	r0, r3
    29b0:	4b1a      	ldr	r3, [pc, #104]	; (2a1c <get_fat+0x17c>)
    29b2:	447b      	add	r3, pc
    29b4:	4798      	blx	r3
    29b6:	1e03      	subs	r3, r0, #0
    29b8:	d122      	bne.n	2a00 <get_fat+0x160>
		p = &fs->win[clst * 4 % SS(fs)];
    29ba:	683b      	ldr	r3, [r7, #0]
    29bc:	009a      	lsls	r2, r3, #2
    29be:	23fe      	movs	r3, #254	; 0xfe
    29c0:	005b      	lsls	r3, r3, #1
    29c2:	4013      	ands	r3, r2
    29c4:	3330      	adds	r3, #48	; 0x30
    29c6:	687a      	ldr	r2, [r7, #4]
    29c8:	18d3      	adds	r3, r2, r3
    29ca:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    29cc:	68fb      	ldr	r3, [r7, #12]
    29ce:	3303      	adds	r3, #3
    29d0:	781b      	ldrb	r3, [r3, #0]
    29d2:	061a      	lsls	r2, r3, #24
    29d4:	68fb      	ldr	r3, [r7, #12]
    29d6:	3302      	adds	r3, #2
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	041b      	lsls	r3, r3, #16
    29dc:	4313      	orrs	r3, r2
    29de:	68fa      	ldr	r2, [r7, #12]
    29e0:	3201      	adds	r2, #1
    29e2:	7812      	ldrb	r2, [r2, #0]
    29e4:	0212      	lsls	r2, r2, #8
    29e6:	4313      	orrs	r3, r2
    29e8:	68fa      	ldr	r2, [r7, #12]
    29ea:	7812      	ldrb	r2, [r2, #0]
    29ec:	4313      	orrs	r3, r2
    29ee:	011b      	lsls	r3, r3, #4
    29f0:	091b      	lsrs	r3, r3, #4
    29f2:	e008      	b.n	2a06 <get_fat+0x166>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    29f4:	46c0      	nop			; (mov r8, r8)
    29f6:	e004      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    29f8:	46c0      	nop			; (mov r8, r8)
    29fa:	e002      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	e000      	b.n	2a02 <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    2a00:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2a02:	2301      	movs	r3, #1
    2a04:	425b      	negs	r3, r3
}
    2a06:	0018      	movs	r0, r3
    2a08:	46bd      	mov	sp, r7
    2a0a:	b006      	add	sp, #24
    2a0c:	bd80      	pop	{r7, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	fffffcf1 	.word	0xfffffcf1
    2a14:	fffffcbd 	.word	0xfffffcbd
    2a18:	fffffc73 	.word	0xfffffc73
    2a1c:	fffffc2f 	.word	0xfffffc2f

00002a20 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    2a20:	b590      	push	{r4, r7, lr}
    2a22:	b089      	sub	sp, #36	; 0x24
    2a24:	af00      	add	r7, sp, #0
    2a26:	60f8      	str	r0, [r7, #12]
    2a28:	60b9      	str	r1, [r7, #8]
    2a2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2a2c:	68bb      	ldr	r3, [r7, #8]
    2a2e:	2b01      	cmp	r3, #1
    2a30:	d904      	bls.n	2a3c <put_fat+0x1c>
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	699a      	ldr	r2, [r3, #24]
    2a36:	68bb      	ldr	r3, [r7, #8]
    2a38:	429a      	cmp	r2, r3
    2a3a:	d804      	bhi.n	2a46 <put_fat+0x26>
		res = FR_INT_ERR;
    2a3c:	231f      	movs	r3, #31
    2a3e:	18fb      	adds	r3, r7, r3
    2a40:	2202      	movs	r2, #2
    2a42:	701a      	strb	r2, [r3, #0]
    2a44:	e104      	b.n	2c50 <put_fat+0x230>

	} else {
		switch (fs->fs_type) {
    2a46:	68fb      	ldr	r3, [r7, #12]
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	2b02      	cmp	r3, #2
    2a4c:	d100      	bne.n	2a50 <put_fat+0x30>
    2a4e:	e07a      	b.n	2b46 <put_fat+0x126>
    2a50:	2b03      	cmp	r3, #3
    2a52:	d100      	bne.n	2a56 <put_fat+0x36>
    2a54:	e0a1      	b.n	2b9a <put_fat+0x17a>
    2a56:	2b01      	cmp	r3, #1
    2a58:	d000      	beq.n	2a5c <put_fat+0x3c>
    2a5a:	e0ea      	b.n	2c32 <put_fat+0x212>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    2a5c:	68bb      	ldr	r3, [r7, #8]
    2a5e:	61bb      	str	r3, [r7, #24]
    2a60:	69bb      	ldr	r3, [r7, #24]
    2a62:	085b      	lsrs	r3, r3, #1
    2a64:	69ba      	ldr	r2, [r7, #24]
    2a66:	18d3      	adds	r3, r2, r3
    2a68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2a6a:	68fb      	ldr	r3, [r7, #12]
    2a6c:	6a1a      	ldr	r2, [r3, #32]
    2a6e:	69bb      	ldr	r3, [r7, #24]
    2a70:	0a5b      	lsrs	r3, r3, #9
    2a72:	18d2      	adds	r2, r2, r3
    2a74:	231f      	movs	r3, #31
    2a76:	18fc      	adds	r4, r7, r3
    2a78:	68fb      	ldr	r3, [r7, #12]
    2a7a:	0011      	movs	r1, r2
    2a7c:	0018      	movs	r0, r3
    2a7e:	4b78      	ldr	r3, [pc, #480]	; (2c60 <put_fat+0x240>)
    2a80:	447b      	add	r3, pc
    2a82:	4798      	blx	r3
    2a84:	0003      	movs	r3, r0
    2a86:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2a88:	231f      	movs	r3, #31
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d000      	beq.n	2a94 <put_fat+0x74>
    2a92:	e0d3      	b.n	2c3c <put_fat+0x21c>
			p = &fs->win[bc % SS(fs)];
    2a94:	69bb      	ldr	r3, [r7, #24]
    2a96:	05db      	lsls	r3, r3, #23
    2a98:	0ddb      	lsrs	r3, r3, #23
    2a9a:	3330      	adds	r3, #48	; 0x30
    2a9c:	68fa      	ldr	r2, [r7, #12]
    2a9e:	18d3      	adds	r3, r2, r3
    2aa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2aa2:	68bb      	ldr	r3, [r7, #8]
    2aa4:	2201      	movs	r2, #1
    2aa6:	4013      	ands	r3, r2
    2aa8:	d00d      	beq.n	2ac6 <put_fat+0xa6>
    2aaa:	697b      	ldr	r3, [r7, #20]
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	b25b      	sxtb	r3, r3
    2ab0:	220f      	movs	r2, #15
    2ab2:	4013      	ands	r3, r2
    2ab4:	b25a      	sxtb	r2, r3
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	011b      	lsls	r3, r3, #4
    2abc:	b25b      	sxtb	r3, r3
    2abe:	4313      	orrs	r3, r2
    2ac0:	b25b      	sxtb	r3, r3
    2ac2:	b2db      	uxtb	r3, r3
    2ac4:	e001      	b.n	2aca <put_fat+0xaa>
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	b2db      	uxtb	r3, r3
    2aca:	697a      	ldr	r2, [r7, #20]
    2acc:	7013      	strb	r3, [r2, #0]
			bc++;
    2ace:	69bb      	ldr	r3, [r7, #24]
    2ad0:	3301      	adds	r3, #1
    2ad2:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	2201      	movs	r2, #1
    2ad8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2ada:	68fb      	ldr	r3, [r7, #12]
    2adc:	6a1a      	ldr	r2, [r3, #32]
    2ade:	69bb      	ldr	r3, [r7, #24]
    2ae0:	0a5b      	lsrs	r3, r3, #9
    2ae2:	18d2      	adds	r2, r2, r3
    2ae4:	231f      	movs	r3, #31
    2ae6:	18fc      	adds	r4, r7, r3
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	0011      	movs	r1, r2
    2aec:	0018      	movs	r0, r3
    2aee:	4b5d      	ldr	r3, [pc, #372]	; (2c64 <put_fat+0x244>)
    2af0:	447b      	add	r3, pc
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2af8:	231f      	movs	r3, #31
    2afa:	18fb      	adds	r3, r7, r3
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d000      	beq.n	2b04 <put_fat+0xe4>
    2b02:	e09d      	b.n	2c40 <put_fat+0x220>
			p = &fs->win[bc % SS(fs)];
    2b04:	69bb      	ldr	r3, [r7, #24]
    2b06:	05db      	lsls	r3, r3, #23
    2b08:	0ddb      	lsrs	r3, r3, #23
    2b0a:	3330      	adds	r3, #48	; 0x30
    2b0c:	68fa      	ldr	r2, [r7, #12]
    2b0e:	18d3      	adds	r3, r2, r3
    2b10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2b12:	68bb      	ldr	r3, [r7, #8]
    2b14:	2201      	movs	r2, #1
    2b16:	4013      	ands	r3, r2
    2b18:	d003      	beq.n	2b22 <put_fat+0x102>
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	091b      	lsrs	r3, r3, #4
    2b1e:	b2db      	uxtb	r3, r3
    2b20:	e00e      	b.n	2b40 <put_fat+0x120>
    2b22:	697b      	ldr	r3, [r7, #20]
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	b25b      	sxtb	r3, r3
    2b28:	220f      	movs	r2, #15
    2b2a:	4393      	bics	r3, r2
    2b2c:	b25a      	sxtb	r2, r3
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	0a1b      	lsrs	r3, r3, #8
    2b32:	b25b      	sxtb	r3, r3
    2b34:	210f      	movs	r1, #15
    2b36:	400b      	ands	r3, r1
    2b38:	b25b      	sxtb	r3, r3
    2b3a:	4313      	orrs	r3, r2
    2b3c:	b25b      	sxtb	r3, r3
    2b3e:	b2db      	uxtb	r3, r3
    2b40:	697a      	ldr	r2, [r7, #20]
    2b42:	7013      	strb	r3, [r2, #0]
			break;
    2b44:	e081      	b.n	2c4a <put_fat+0x22a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2b46:	68fb      	ldr	r3, [r7, #12]
    2b48:	6a1a      	ldr	r2, [r3, #32]
    2b4a:	68bb      	ldr	r3, [r7, #8]
    2b4c:	0a1b      	lsrs	r3, r3, #8
    2b4e:	18d2      	adds	r2, r2, r3
    2b50:	231f      	movs	r3, #31
    2b52:	18fc      	adds	r4, r7, r3
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	0011      	movs	r1, r2
    2b58:	0018      	movs	r0, r3
    2b5a:	4b43      	ldr	r3, [pc, #268]	; (2c68 <put_fat+0x248>)
    2b5c:	447b      	add	r3, pc
    2b5e:	4798      	blx	r3
    2b60:	0003      	movs	r3, r0
    2b62:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2b64:	231f      	movs	r3, #31
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d16a      	bne.n	2c44 <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    2b6e:	68bb      	ldr	r3, [r7, #8]
    2b70:	005a      	lsls	r2, r3, #1
    2b72:	23ff      	movs	r3, #255	; 0xff
    2b74:	005b      	lsls	r3, r3, #1
    2b76:	4013      	ands	r3, r2
    2b78:	3330      	adds	r3, #48	; 0x30
    2b7a:	68fa      	ldr	r2, [r7, #12]
    2b7c:	18d3      	adds	r3, r2, r3
    2b7e:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	b2da      	uxtb	r2, r3
    2b84:	697b      	ldr	r3, [r7, #20]
    2b86:	701a      	strb	r2, [r3, #0]
    2b88:	697b      	ldr	r3, [r7, #20]
    2b8a:	3301      	adds	r3, #1
    2b8c:	687a      	ldr	r2, [r7, #4]
    2b8e:	b292      	uxth	r2, r2
    2b90:	0a12      	lsrs	r2, r2, #8
    2b92:	b292      	uxth	r2, r2
    2b94:	b2d2      	uxtb	r2, r2
    2b96:	701a      	strb	r2, [r3, #0]
			break;
    2b98:	e057      	b.n	2c4a <put_fat+0x22a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	6a1a      	ldr	r2, [r3, #32]
    2b9e:	68bb      	ldr	r3, [r7, #8]
    2ba0:	09db      	lsrs	r3, r3, #7
    2ba2:	18d2      	adds	r2, r2, r3
    2ba4:	231f      	movs	r3, #31
    2ba6:	18fc      	adds	r4, r7, r3
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	0011      	movs	r1, r2
    2bac:	0018      	movs	r0, r3
    2bae:	4b2f      	ldr	r3, [pc, #188]	; (2c6c <put_fat+0x24c>)
    2bb0:	447b      	add	r3, pc
    2bb2:	4798      	blx	r3
    2bb4:	0003      	movs	r3, r0
    2bb6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2bb8:	231f      	movs	r3, #31
    2bba:	18fb      	adds	r3, r7, r3
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d142      	bne.n	2c48 <put_fat+0x228>
			p = &fs->win[clst * 4 % SS(fs)];
    2bc2:	68bb      	ldr	r3, [r7, #8]
    2bc4:	009a      	lsls	r2, r3, #2
    2bc6:	23fe      	movs	r3, #254	; 0xfe
    2bc8:	005b      	lsls	r3, r3, #1
    2bca:	4013      	ands	r3, r2
    2bcc:	3330      	adds	r3, #48	; 0x30
    2bce:	68fa      	ldr	r2, [r7, #12]
    2bd0:	18d3      	adds	r3, r2, r3
    2bd2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    2bd4:	697b      	ldr	r3, [r7, #20]
    2bd6:	3303      	adds	r3, #3
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	061a      	lsls	r2, r3, #24
    2bdc:	697b      	ldr	r3, [r7, #20]
    2bde:	3302      	adds	r3, #2
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	041b      	lsls	r3, r3, #16
    2be4:	4313      	orrs	r3, r2
    2be6:	697a      	ldr	r2, [r7, #20]
    2be8:	3201      	adds	r2, #1
    2bea:	7812      	ldrb	r2, [r2, #0]
    2bec:	0212      	lsls	r2, r2, #8
    2bee:	4313      	orrs	r3, r2
    2bf0:	697a      	ldr	r2, [r7, #20]
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	4313      	orrs	r3, r2
    2bf6:	0f1b      	lsrs	r3, r3, #28
    2bf8:	071b      	lsls	r3, r3, #28
    2bfa:	687a      	ldr	r2, [r7, #4]
    2bfc:	4313      	orrs	r3, r2
    2bfe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	b2da      	uxtb	r2, r3
    2c04:	697b      	ldr	r3, [r7, #20]
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	697b      	ldr	r3, [r7, #20]
    2c0a:	3301      	adds	r3, #1
    2c0c:	687a      	ldr	r2, [r7, #4]
    2c0e:	b292      	uxth	r2, r2
    2c10:	0a12      	lsrs	r2, r2, #8
    2c12:	b292      	uxth	r2, r2
    2c14:	b2d2      	uxtb	r2, r2
    2c16:	701a      	strb	r2, [r3, #0]
    2c18:	697b      	ldr	r3, [r7, #20]
    2c1a:	3302      	adds	r3, #2
    2c1c:	687a      	ldr	r2, [r7, #4]
    2c1e:	0c12      	lsrs	r2, r2, #16
    2c20:	b2d2      	uxtb	r2, r2
    2c22:	701a      	strb	r2, [r3, #0]
    2c24:	697b      	ldr	r3, [r7, #20]
    2c26:	3303      	adds	r3, #3
    2c28:	687a      	ldr	r2, [r7, #4]
    2c2a:	0e12      	lsrs	r2, r2, #24
    2c2c:	b2d2      	uxtb	r2, r2
    2c2e:	701a      	strb	r2, [r3, #0]
			break;
    2c30:	e00b      	b.n	2c4a <put_fat+0x22a>

		default :
			res = FR_INT_ERR;
    2c32:	231f      	movs	r3, #31
    2c34:	18fb      	adds	r3, r7, r3
    2c36:	2202      	movs	r2, #2
    2c38:	701a      	strb	r2, [r3, #0]
    2c3a:	e006      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	e004      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c40:	46c0      	nop			; (mov r8, r8)
    2c42:	e002      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c44:	46c0      	nop			; (mov r8, r8)
    2c46:	e000      	b.n	2c4a <put_fat+0x22a>
			if (res != FR_OK) break;
    2c48:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    2c4a:	68fb      	ldr	r3, [r7, #12]
    2c4c:	2201      	movs	r2, #1
    2c4e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    2c50:	231f      	movs	r3, #31
    2c52:	18fb      	adds	r3, r7, r3
    2c54:	781b      	ldrb	r3, [r3, #0]
}
    2c56:	0018      	movs	r0, r3
    2c58:	46bd      	mov	sp, r7
    2c5a:	b009      	add	sp, #36	; 0x24
    2c5c:	bd90      	pop	{r4, r7, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	fffffb61 	.word	0xfffffb61
    2c64:	fffffaf1 	.word	0xfffffaf1
    2c68:	fffffa85 	.word	0xfffffa85
    2c6c:	fffffa31 	.word	0xfffffa31

00002c70 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    2c70:	b590      	push	{r4, r7, lr}
    2c72:	b085      	sub	sp, #20
    2c74:	af00      	add	r7, sp, #0
    2c76:	6078      	str	r0, [r7, #4]
    2c78:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2c7a:	683b      	ldr	r3, [r7, #0]
    2c7c:	2b01      	cmp	r3, #1
    2c7e:	d904      	bls.n	2c8a <remove_chain+0x1a>
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	699a      	ldr	r2, [r3, #24]
    2c84:	683b      	ldr	r3, [r7, #0]
    2c86:	429a      	cmp	r2, r3
    2c88:	d804      	bhi.n	2c94 <remove_chain+0x24>
		res = FR_INT_ERR;
    2c8a:	230f      	movs	r3, #15
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	2202      	movs	r2, #2
    2c90:	701a      	strb	r2, [r3, #0]
    2c92:	e047      	b.n	2d24 <remove_chain+0xb4>

	} else {
		res = FR_OK;
    2c94:	230f      	movs	r3, #15
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	2200      	movs	r2, #0
    2c9a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2c9c:	e039      	b.n	2d12 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2c9e:	683a      	ldr	r2, [r7, #0]
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	0011      	movs	r1, r2
    2ca4:	0018      	movs	r0, r3
    2ca6:	4b23      	ldr	r3, [pc, #140]	; (2d34 <remove_chain+0xc4>)
    2ca8:	447b      	add	r3, pc
    2caa:	4798      	blx	r3
    2cac:	0003      	movs	r3, r0
    2cae:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    2cb0:	68bb      	ldr	r3, [r7, #8]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d033      	beq.n	2d1e <remove_chain+0xae>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2cb6:	68bb      	ldr	r3, [r7, #8]
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d104      	bne.n	2cc6 <remove_chain+0x56>
    2cbc:	230f      	movs	r3, #15
    2cbe:	18fb      	adds	r3, r7, r3
    2cc0:	2202      	movs	r2, #2
    2cc2:	701a      	strb	r2, [r3, #0]
    2cc4:	e02e      	b.n	2d24 <remove_chain+0xb4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2cc6:	68bb      	ldr	r3, [r7, #8]
    2cc8:	3301      	adds	r3, #1
    2cca:	d104      	bne.n	2cd6 <remove_chain+0x66>
    2ccc:	230f      	movs	r3, #15
    2cce:	18fb      	adds	r3, r7, r3
    2cd0:	2201      	movs	r2, #1
    2cd2:	701a      	strb	r2, [r3, #0]
    2cd4:	e026      	b.n	2d24 <remove_chain+0xb4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2cd6:	230f      	movs	r3, #15
    2cd8:	18fc      	adds	r4, r7, r3
    2cda:	6839      	ldr	r1, [r7, #0]
    2cdc:	687b      	ldr	r3, [r7, #4]
    2cde:	2200      	movs	r2, #0
    2ce0:	0018      	movs	r0, r3
    2ce2:	4b15      	ldr	r3, [pc, #84]	; (2d38 <remove_chain+0xc8>)
    2ce4:	447b      	add	r3, pc
    2ce6:	4798      	blx	r3
    2ce8:	0003      	movs	r3, r0
    2cea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    2cec:	230f      	movs	r3, #15
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d115      	bne.n	2d22 <remove_chain+0xb2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	691b      	ldr	r3, [r3, #16]
    2cfa:	3301      	adds	r3, #1
    2cfc:	d007      	beq.n	2d0e <remove_chain+0x9e>
				fs->free_clust++;
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	691b      	ldr	r3, [r3, #16]
    2d02:	1c5a      	adds	r2, r3, #1
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    2d08:	687b      	ldr	r3, [r7, #4]
    2d0a:	2201      	movs	r2, #1
    2d0c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2d12:	687b      	ldr	r3, [r7, #4]
    2d14:	699a      	ldr	r2, [r3, #24]
    2d16:	683b      	ldr	r3, [r7, #0]
    2d18:	429a      	cmp	r2, r3
    2d1a:	d8c0      	bhi.n	2c9e <remove_chain+0x2e>
    2d1c:	e002      	b.n	2d24 <remove_chain+0xb4>
			if (nxt == 0) break;				/* Empty cluster? */
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	e000      	b.n	2d24 <remove_chain+0xb4>
			if (res != FR_OK) break;
    2d22:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    2d24:	230f      	movs	r3, #15
    2d26:	18fb      	adds	r3, r7, r3
    2d28:	781b      	ldrb	r3, [r3, #0]
}
    2d2a:	0018      	movs	r0, r3
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b005      	add	sp, #20
    2d30:	bd90      	pop	{r4, r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	fffffbf5 	.word	0xfffffbf5
    2d38:	fffffd39 	.word	0xfffffd39

00002d3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    2d3c:	b590      	push	{r4, r7, lr}
    2d3e:	b087      	sub	sp, #28
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d10d      	bne.n	2d68 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	68db      	ldr	r3, [r3, #12]
    2d50:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2d52:	693b      	ldr	r3, [r7, #16]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d004      	beq.n	2d62 <create_chain+0x26>
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	699a      	ldr	r2, [r3, #24]
    2d5c:	693b      	ldr	r3, [r7, #16]
    2d5e:	429a      	cmp	r2, r3
    2d60:	d819      	bhi.n	2d96 <create_chain+0x5a>
    2d62:	2301      	movs	r3, #1
    2d64:	613b      	str	r3, [r7, #16]
    2d66:	e016      	b.n	2d96 <create_chain+0x5a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2d68:	683a      	ldr	r2, [r7, #0]
    2d6a:	687b      	ldr	r3, [r7, #4]
    2d6c:	0011      	movs	r1, r2
    2d6e:	0018      	movs	r0, r3
    2d70:	4b40      	ldr	r3, [pc, #256]	; (2e74 <create_chain+0x138>)
    2d72:	447b      	add	r3, pc
    2d74:	4798      	blx	r3
    2d76:	0003      	movs	r3, r0
    2d78:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2d7a:	68bb      	ldr	r3, [r7, #8]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d801      	bhi.n	2d84 <create_chain+0x48>
    2d80:	2301      	movs	r3, #1
    2d82:	e073      	b.n	2e6c <create_chain+0x130>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	699a      	ldr	r2, [r3, #24]
    2d88:	68bb      	ldr	r3, [r7, #8]
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d901      	bls.n	2d92 <create_chain+0x56>
    2d8e:	68bb      	ldr	r3, [r7, #8]
    2d90:	e06c      	b.n	2e6c <create_chain+0x130>
		scl = clst;
    2d92:	683b      	ldr	r3, [r7, #0]
    2d94:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    2d96:	693b      	ldr	r3, [r7, #16]
    2d98:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    2d9a:	697b      	ldr	r3, [r7, #20]
    2d9c:	3301      	adds	r3, #1
    2d9e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	699a      	ldr	r2, [r3, #24]
    2da4:	697b      	ldr	r3, [r7, #20]
    2da6:	429a      	cmp	r2, r3
    2da8:	d807      	bhi.n	2dba <create_chain+0x7e>
			ncl = 2;
    2daa:	2302      	movs	r3, #2
    2dac:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    2dae:	697a      	ldr	r2, [r7, #20]
    2db0:	693b      	ldr	r3, [r7, #16]
    2db2:	429a      	cmp	r2, r3
    2db4:	d901      	bls.n	2dba <create_chain+0x7e>
    2db6:	2300      	movs	r3, #0
    2db8:	e058      	b.n	2e6c <create_chain+0x130>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2dba:	697a      	ldr	r2, [r7, #20]
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	0011      	movs	r1, r2
    2dc0:	0018      	movs	r0, r3
    2dc2:	4b2d      	ldr	r3, [pc, #180]	; (2e78 <create_chain+0x13c>)
    2dc4:	447b      	add	r3, pc
    2dc6:	4798      	blx	r3
    2dc8:	0003      	movs	r3, r0
    2dca:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    2dcc:	68bb      	ldr	r3, [r7, #8]
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d00d      	beq.n	2dee <create_chain+0xb2>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2dd2:	68bb      	ldr	r3, [r7, #8]
    2dd4:	3301      	adds	r3, #1
    2dd6:	d002      	beq.n	2dde <create_chain+0xa2>
    2dd8:	68bb      	ldr	r3, [r7, #8]
    2dda:	2b01      	cmp	r3, #1
    2ddc:	d101      	bne.n	2de2 <create_chain+0xa6>
			return cs;
    2dde:	68bb      	ldr	r3, [r7, #8]
    2de0:	e044      	b.n	2e6c <create_chain+0x130>
		if (ncl == scl) return 0;		/* No free cluster */
    2de2:	697a      	ldr	r2, [r7, #20]
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	429a      	cmp	r2, r3
    2de8:	d1d7      	bne.n	2d9a <create_chain+0x5e>
    2dea:	2300      	movs	r3, #0
    2dec:	e03e      	b.n	2e6c <create_chain+0x130>
		if (cs == 0) break;				/* Found a free cluster */
    2dee:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2df0:	230f      	movs	r3, #15
    2df2:	18fc      	adds	r4, r7, r3
    2df4:	4a21      	ldr	r2, [pc, #132]	; (2e7c <create_chain+0x140>)
    2df6:	6979      	ldr	r1, [r7, #20]
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b20      	ldr	r3, [pc, #128]	; (2e80 <create_chain+0x144>)
    2dfe:	447b      	add	r3, pc
    2e00:	4798      	blx	r3
    2e02:	0003      	movs	r3, r0
    2e04:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    2e06:	230f      	movs	r3, #15
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d10d      	bne.n	2e2c <create_chain+0xf0>
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d00a      	beq.n	2e2c <create_chain+0xf0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    2e16:	230f      	movs	r3, #15
    2e18:	18fc      	adds	r4, r7, r3
    2e1a:	697a      	ldr	r2, [r7, #20]
    2e1c:	6839      	ldr	r1, [r7, #0]
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	0018      	movs	r0, r3
    2e22:	4b18      	ldr	r3, [pc, #96]	; (2e84 <create_chain+0x148>)
    2e24:	447b      	add	r3, pc
    2e26:	4798      	blx	r3
    2e28:	0003      	movs	r3, r0
    2e2a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    2e2c:	230f      	movs	r3, #15
    2e2e:	18fb      	adds	r3, r7, r3
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d10f      	bne.n	2e56 <create_chain+0x11a>
		fs->last_clust = ncl;			/* Update FSINFO */
    2e36:	687b      	ldr	r3, [r7, #4]
    2e38:	697a      	ldr	r2, [r7, #20]
    2e3a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	691b      	ldr	r3, [r3, #16]
    2e40:	3301      	adds	r3, #1
    2e42:	d012      	beq.n	2e6a <create_chain+0x12e>
			fs->free_clust--;
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	691b      	ldr	r3, [r3, #16]
    2e48:	1e5a      	subs	r2, r3, #1
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    2e4e:	687b      	ldr	r3, [r7, #4]
    2e50:	2201      	movs	r2, #1
    2e52:	715a      	strb	r2, [r3, #5]
    2e54:	e009      	b.n	2e6a <create_chain+0x12e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2e56:	230f      	movs	r3, #15
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	2b01      	cmp	r3, #1
    2e5e:	d102      	bne.n	2e66 <create_chain+0x12a>
    2e60:	2301      	movs	r3, #1
    2e62:	425b      	negs	r3, r3
    2e64:	e000      	b.n	2e68 <create_chain+0x12c>
    2e66:	2301      	movs	r3, #1
    2e68:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    2e6a:	697b      	ldr	r3, [r7, #20]
}
    2e6c:	0018      	movs	r0, r3
    2e6e:	46bd      	mov	sp, r7
    2e70:	b007      	add	sp, #28
    2e72:	bd90      	pop	{r4, r7, pc}
    2e74:	fffffb2b 	.word	0xfffffb2b
    2e78:	fffffad9 	.word	0xfffffad9
    2e7c:	0fffffff 	.word	0x0fffffff
    2e80:	fffffc1f 	.word	0xfffffc1f
    2e84:	fffffbf9 	.word	0xfffffbf9

00002e88 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b084      	sub	sp, #16
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	6078      	str	r0, [r7, #4]
    2e90:	000a      	movs	r2, r1
    2e92:	1cbb      	adds	r3, r7, #2
    2e94:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	1cba      	adds	r2, r7, #2
    2e9a:	8812      	ldrh	r2, [r2, #0]
    2e9c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	689b      	ldr	r3, [r3, #8]
    2ea2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2ea4:	68fb      	ldr	r3, [r7, #12]
    2ea6:	2b01      	cmp	r3, #1
    2ea8:	d005      	beq.n	2eb6 <dir_sdi+0x2e>
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	699a      	ldr	r2, [r3, #24]
    2eb0:	68fb      	ldr	r3, [r7, #12]
    2eb2:	429a      	cmp	r2, r3
    2eb4:	d801      	bhi.n	2eba <dir_sdi+0x32>
		return FR_INT_ERR;
    2eb6:	2302      	movs	r3, #2
    2eb8:	e077      	b.n	2faa <dir_sdi+0x122>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2eba:	68fb      	ldr	r3, [r7, #12]
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d108      	bne.n	2ed2 <dir_sdi+0x4a>
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	2b03      	cmp	r3, #3
    2ec8:	d103      	bne.n	2ed2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	681b      	ldr	r3, [r3, #0]
    2ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ed0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    2ed2:	68fb      	ldr	r3, [r7, #12]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d116      	bne.n	2f06 <dir_sdi+0x7e>
		dj->clust = clst;
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	68fa      	ldr	r2, [r7, #12]
    2edc:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	1cba      	adds	r2, r7, #2
    2ee6:	8812      	ldrh	r2, [r2, #0]
    2ee8:	429a      	cmp	r2, r3
    2eea:	d301      	bcc.n	2ef0 <dir_sdi+0x68>
			return FR_INT_ERR;
    2eec:	2302      	movs	r3, #2
    2eee:	e05c      	b.n	2faa <dir_sdi+0x122>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2ef6:	1cba      	adds	r2, r7, #2
    2ef8:	8812      	ldrh	r2, [r2, #0]
    2efa:	0912      	lsrs	r2, r2, #4
    2efc:	b292      	uxth	r2, r2
    2efe:	189a      	adds	r2, r3, r2
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	611a      	str	r2, [r3, #16]
    2f04:	e044      	b.n	2f90 <dir_sdi+0x108>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	789b      	ldrb	r3, [r3, #2]
    2f0c:	b29a      	uxth	r2, r3
    2f0e:	230a      	movs	r3, #10
    2f10:	18fb      	adds	r3, r7, r3
    2f12:	0112      	lsls	r2, r2, #4
    2f14:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    2f16:	e021      	b.n	2f5c <dir_sdi+0xd4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	681b      	ldr	r3, [r3, #0]
    2f1c:	68fa      	ldr	r2, [r7, #12]
    2f1e:	0011      	movs	r1, r2
    2f20:	0018      	movs	r0, r3
    2f22:	4b24      	ldr	r3, [pc, #144]	; (2fb4 <dir_sdi+0x12c>)
    2f24:	447b      	add	r3, pc
    2f26:	4798      	blx	r3
    2f28:	0003      	movs	r3, r0
    2f2a:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2f2c:	68fb      	ldr	r3, [r7, #12]
    2f2e:	3301      	adds	r3, #1
    2f30:	d101      	bne.n	2f36 <dir_sdi+0xae>
    2f32:	2301      	movs	r3, #1
    2f34:	e039      	b.n	2faa <dir_sdi+0x122>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d905      	bls.n	2f48 <dir_sdi+0xc0>
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	699a      	ldr	r2, [r3, #24]
    2f42:	68fb      	ldr	r3, [r7, #12]
    2f44:	429a      	cmp	r2, r3
    2f46:	d801      	bhi.n	2f4c <dir_sdi+0xc4>
				return FR_INT_ERR;
    2f48:	2302      	movs	r3, #2
    2f4a:	e02e      	b.n	2faa <dir_sdi+0x122>
			idx -= ic;
    2f4c:	1cbb      	adds	r3, r7, #2
    2f4e:	1cb9      	adds	r1, r7, #2
    2f50:	220a      	movs	r2, #10
    2f52:	18ba      	adds	r2, r7, r2
    2f54:	8809      	ldrh	r1, [r1, #0]
    2f56:	8812      	ldrh	r2, [r2, #0]
    2f58:	1a8a      	subs	r2, r1, r2
    2f5a:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    2f5c:	1cba      	adds	r2, r7, #2
    2f5e:	230a      	movs	r3, #10
    2f60:	18fb      	adds	r3, r7, r3
    2f62:	8812      	ldrh	r2, [r2, #0]
    2f64:	881b      	ldrh	r3, [r3, #0]
    2f66:	429a      	cmp	r2, r3
    2f68:	d2d6      	bcs.n	2f18 <dir_sdi+0x90>
		}
		dj->clust = clst;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	68fa      	ldr	r2, [r7, #12]
    2f6e:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	681b      	ldr	r3, [r3, #0]
    2f74:	68fa      	ldr	r2, [r7, #12]
    2f76:	0011      	movs	r1, r2
    2f78:	0018      	movs	r0, r3
    2f7a:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <dir_sdi+0x130>)
    2f7c:	447b      	add	r3, pc
    2f7e:	4798      	blx	r3
    2f80:	0002      	movs	r2, r0
    2f82:	1cbb      	adds	r3, r7, #2
    2f84:	881b      	ldrh	r3, [r3, #0]
    2f86:	091b      	lsrs	r3, r3, #4
    2f88:	b29b      	uxth	r3, r3
    2f8a:	18d2      	adds	r2, r2, r3
    2f8c:	687b      	ldr	r3, [r7, #4]
    2f8e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	3330      	adds	r3, #48	; 0x30
    2f96:	001a      	movs	r2, r3
    2f98:	1cbb      	adds	r3, r7, #2
    2f9a:	881b      	ldrh	r3, [r3, #0]
    2f9c:	210f      	movs	r1, #15
    2f9e:	400b      	ands	r3, r1
    2fa0:	015b      	lsls	r3, r3, #5
    2fa2:	18d2      	adds	r2, r2, r3
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    2fa8:	2300      	movs	r3, #0
}
    2faa:	0018      	movs	r0, r3
    2fac:	46bd      	mov	sp, r7
    2fae:	b004      	add	sp, #16
    2fb0:	bd80      	pop	{r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	fffff979 	.word	0xfffff979
    2fb8:	fffff8e9 	.word	0xfffff8e9

00002fbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2fbc:	b590      	push	{r4, r7, lr}
    2fbe:	b085      	sub	sp, #20
    2fc0:	af00      	add	r7, sp, #0
    2fc2:	6078      	str	r0, [r7, #4]
    2fc4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	88da      	ldrh	r2, [r3, #6]
    2fca:	2308      	movs	r3, #8
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	3201      	adds	r2, #1
    2fd0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2fd2:	2308      	movs	r3, #8
    2fd4:	18fb      	adds	r3, r7, r3
    2fd6:	881b      	ldrh	r3, [r3, #0]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d003      	beq.n	2fe4 <dir_next+0x28>
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	691b      	ldr	r3, [r3, #16]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d101      	bne.n	2fe8 <dir_next+0x2c>
		return FR_NO_FILE;
    2fe4:	2304      	movs	r3, #4
    2fe6:	e0d9      	b.n	319c <dir_next+0x1e0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2fe8:	2308      	movs	r3, #8
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	881b      	ldrh	r3, [r3, #0]
    2fee:	220f      	movs	r2, #15
    2ff0:	4013      	ands	r3, r2
    2ff2:	b29b      	uxth	r3, r3
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d000      	beq.n	2ffa <dir_next+0x3e>
    2ff8:	e0bd      	b.n	3176 <dir_next+0x1ba>
		dj->sect++;					/* Next sector */
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	691b      	ldr	r3, [r3, #16]
    2ffe:	1c5a      	adds	r2, r3, #1
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    3004:	687b      	ldr	r3, [r7, #4]
    3006:	68db      	ldr	r3, [r3, #12]
    3008:	2b00      	cmp	r3, #0
    300a:	d10a      	bne.n	3022 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	891b      	ldrh	r3, [r3, #8]
    3012:	2208      	movs	r2, #8
    3014:	18ba      	adds	r2, r7, r2
    3016:	8812      	ldrh	r2, [r2, #0]
    3018:	429a      	cmp	r2, r3
    301a:	d200      	bcs.n	301e <dir_next+0x62>
    301c:	e0ab      	b.n	3176 <dir_next+0x1ba>
				return FR_NO_FILE;
    301e:	2304      	movs	r3, #4
    3020:	e0bc      	b.n	319c <dir_next+0x1e0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    3022:	2308      	movs	r3, #8
    3024:	18fb      	adds	r3, r7, r3
    3026:	881b      	ldrh	r3, [r3, #0]
    3028:	091b      	lsrs	r3, r3, #4
    302a:	b29b      	uxth	r3, r3
    302c:	001a      	movs	r2, r3
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	789b      	ldrb	r3, [r3, #2]
    3034:	3b01      	subs	r3, #1
    3036:	4013      	ands	r3, r2
    3038:	d000      	beq.n	303c <dir_next+0x80>
    303a:	e09c      	b.n	3176 <dir_next+0x1ba>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    303c:	687b      	ldr	r3, [r7, #4]
    303e:	681a      	ldr	r2, [r3, #0]
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	68db      	ldr	r3, [r3, #12]
    3044:	0019      	movs	r1, r3
    3046:	0010      	movs	r0, r2
    3048:	4b56      	ldr	r3, [pc, #344]	; (31a4 <dir_next+0x1e8>)
    304a:	447b      	add	r3, pc
    304c:	4798      	blx	r3
    304e:	0003      	movs	r3, r0
    3050:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	2b01      	cmp	r3, #1
    3056:	d801      	bhi.n	305c <dir_next+0xa0>
    3058:	2302      	movs	r3, #2
    305a:	e09f      	b.n	319c <dir_next+0x1e0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    305c:	68fb      	ldr	r3, [r7, #12]
    305e:	3301      	adds	r3, #1
    3060:	d101      	bne.n	3066 <dir_next+0xaa>
    3062:	2301      	movs	r3, #1
    3064:	e09a      	b.n	319c <dir_next+0x1e0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	699a      	ldr	r2, [r3, #24]
    306c:	68fb      	ldr	r3, [r7, #12]
    306e:	429a      	cmp	r2, r3
    3070:	d900      	bls.n	3074 <dir_next+0xb8>
    3072:	e072      	b.n	315a <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    3074:	683b      	ldr	r3, [r7, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d101      	bne.n	307e <dir_next+0xc2>
    307a:	2304      	movs	r3, #4
    307c:	e08e      	b.n	319c <dir_next+0x1e0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	681a      	ldr	r2, [r3, #0]
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	68db      	ldr	r3, [r3, #12]
    3086:	0019      	movs	r1, r3
    3088:	0010      	movs	r0, r2
    308a:	4b47      	ldr	r3, [pc, #284]	; (31a8 <dir_next+0x1ec>)
    308c:	447b      	add	r3, pc
    308e:	4798      	blx	r3
    3090:	0003      	movs	r3, r0
    3092:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    3094:	68fb      	ldr	r3, [r7, #12]
    3096:	2b00      	cmp	r3, #0
    3098:	d101      	bne.n	309e <dir_next+0xe2>
    309a:	2307      	movs	r3, #7
    309c:	e07e      	b.n	319c <dir_next+0x1e0>
					if (clst == 1) return FR_INT_ERR;
    309e:	68fb      	ldr	r3, [r7, #12]
    30a0:	2b01      	cmp	r3, #1
    30a2:	d101      	bne.n	30a8 <dir_next+0xec>
    30a4:	2302      	movs	r3, #2
    30a6:	e079      	b.n	319c <dir_next+0x1e0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	3301      	adds	r3, #1
    30ac:	d101      	bne.n	30b2 <dir_next+0xf6>
    30ae:	2301      	movs	r3, #1
    30b0:	e074      	b.n	319c <dir_next+0x1e0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	2100      	movs	r1, #0
    30b8:	0018      	movs	r0, r3
    30ba:	4b3c      	ldr	r3, [pc, #240]	; (31ac <dir_next+0x1f0>)
    30bc:	447b      	add	r3, pc
    30be:	4798      	blx	r3
    30c0:	1e03      	subs	r3, r0, #0
    30c2:	d001      	beq.n	30c8 <dir_next+0x10c>
    30c4:	2301      	movs	r3, #1
    30c6:	e069      	b.n	319c <dir_next+0x1e0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	3330      	adds	r3, #48	; 0x30
    30ce:	0018      	movs	r0, r3
    30d0:	2380      	movs	r3, #128	; 0x80
    30d2:	009b      	lsls	r3, r3, #2
    30d4:	001a      	movs	r2, r3
    30d6:	2100      	movs	r1, #0
    30d8:	4b35      	ldr	r3, [pc, #212]	; (31b0 <dir_next+0x1f4>)
    30da:	447b      	add	r3, pc
    30dc:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	681c      	ldr	r4, [r3, #0]
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	681b      	ldr	r3, [r3, #0]
    30e6:	68fa      	ldr	r2, [r7, #12]
    30e8:	0011      	movs	r1, r2
    30ea:	0018      	movs	r0, r3
    30ec:	4b31      	ldr	r3, [pc, #196]	; (31b4 <dir_next+0x1f8>)
    30ee:	447b      	add	r3, pc
    30f0:	4798      	blx	r3
    30f2:	0003      	movs	r3, r0
    30f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    30f6:	230b      	movs	r3, #11
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	2200      	movs	r2, #0
    30fc:	701a      	strb	r2, [r3, #0]
    30fe:	e01a      	b.n	3136 <dir_next+0x17a>
						dj->fs->wflag = 1;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	681b      	ldr	r3, [r3, #0]
    3104:	2201      	movs	r2, #1
    3106:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	681b      	ldr	r3, [r3, #0]
    310c:	2100      	movs	r1, #0
    310e:	0018      	movs	r0, r3
    3110:	4b29      	ldr	r3, [pc, #164]	; (31b8 <dir_next+0x1fc>)
    3112:	447b      	add	r3, pc
    3114:	4798      	blx	r3
    3116:	1e03      	subs	r3, r0, #0
    3118:	d001      	beq.n	311e <dir_next+0x162>
    311a:	2301      	movs	r3, #1
    311c:	e03e      	b.n	319c <dir_next+0x1e0>
						dj->fs->winsect++;
    311e:	687b      	ldr	r3, [r7, #4]
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3124:	3201      	adds	r2, #1
    3126:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3128:	230b      	movs	r3, #11
    312a:	18fb      	adds	r3, r7, r3
    312c:	781a      	ldrb	r2, [r3, #0]
    312e:	230b      	movs	r3, #11
    3130:	18fb      	adds	r3, r7, r3
    3132:	3201      	adds	r2, #1
    3134:	701a      	strb	r2, [r3, #0]
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	681b      	ldr	r3, [r3, #0]
    313a:	789b      	ldrb	r3, [r3, #2]
    313c:	220b      	movs	r2, #11
    313e:	18ba      	adds	r2, r7, r2
    3140:	7812      	ldrb	r2, [r2, #0]
    3142:	429a      	cmp	r2, r3
    3144:	d3dc      	bcc.n	3100 <dir_next+0x144>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	687a      	ldr	r2, [r7, #4]
    314c:	6812      	ldr	r2, [r2, #0]
    314e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3150:	220b      	movs	r2, #11
    3152:	18ba      	adds	r2, r7, r2
    3154:	7812      	ldrb	r2, [r2, #0]
    3156:	1a8a      	subs	r2, r1, r2
    3158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	68fa      	ldr	r2, [r7, #12]
    315e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	68fa      	ldr	r2, [r7, #12]
    3166:	0011      	movs	r1, r2
    3168:	0018      	movs	r0, r3
    316a:	4b14      	ldr	r3, [pc, #80]	; (31bc <dir_next+0x200>)
    316c:	447b      	add	r3, pc
    316e:	4798      	blx	r3
    3170:	0002      	movs	r2, r0
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	2208      	movs	r2, #8
    317a:	18ba      	adds	r2, r7, r2
    317c:	8812      	ldrh	r2, [r2, #0]
    317e:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	681b      	ldr	r3, [r3, #0]
    3184:	3330      	adds	r3, #48	; 0x30
    3186:	001a      	movs	r2, r3
    3188:	2308      	movs	r3, #8
    318a:	18fb      	adds	r3, r7, r3
    318c:	881b      	ldrh	r3, [r3, #0]
    318e:	210f      	movs	r1, #15
    3190:	400b      	ands	r3, r1
    3192:	015b      	lsls	r3, r3, #5
    3194:	18d2      	adds	r2, r2, r3
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	615a      	str	r2, [r3, #20]

	return FR_OK;
    319a:	2300      	movs	r3, #0
}
    319c:	0018      	movs	r0, r3
    319e:	46bd      	mov	sp, r7
    31a0:	b005      	add	sp, #20
    31a2:	bd90      	pop	{r4, r7, pc}
    31a4:	fffff853 	.word	0xfffff853
    31a8:	fffffcad 	.word	0xfffffcad
    31ac:	fffff525 	.word	0xfffff525
    31b0:	fffff45b 	.word	0xfffff45b
    31b4:	fffff777 	.word	0xfffff777
    31b8:	fffff4cf 	.word	0xfffff4cf
    31bc:	fffff6f9 	.word	0xfffff6f9

000031c0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    31c0:	b590      	push	{r4, r7, lr}
    31c2:	b087      	sub	sp, #28
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    31c8:	2317      	movs	r3, #23
    31ca:	18fc      	adds	r4, r7, r3
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	2100      	movs	r1, #0
    31d0:	0018      	movs	r0, r3
    31d2:	4b2e      	ldr	r3, [pc, #184]	; (328c <dir_find+0xcc>)
    31d4:	447b      	add	r3, pc
    31d6:	4798      	blx	r3
    31d8:	0003      	movs	r3, r0
    31da:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    31dc:	2317      	movs	r3, #23
    31de:	18fb      	adds	r3, r7, r3
    31e0:	781b      	ldrb	r3, [r3, #0]
    31e2:	2b00      	cmp	r3, #0
    31e4:	d003      	beq.n	31ee <dir_find+0x2e>
    31e6:	2317      	movs	r3, #23
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781b      	ldrb	r3, [r3, #0]
    31ec:	e04a      	b.n	3284 <dir_find+0xc4>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	691b      	ldr	r3, [r3, #16]
    31f6:	2117      	movs	r1, #23
    31f8:	187c      	adds	r4, r7, r1
    31fa:	0019      	movs	r1, r3
    31fc:	0010      	movs	r0, r2
    31fe:	4b24      	ldr	r3, [pc, #144]	; (3290 <dir_find+0xd0>)
    3200:	447b      	add	r3, pc
    3202:	4798      	blx	r3
    3204:	0003      	movs	r3, r0
    3206:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    3208:	2317      	movs	r3, #23
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	2b00      	cmp	r3, #0
    3210:	d132      	bne.n	3278 <dir_find+0xb8>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	695b      	ldr	r3, [r3, #20]
    3216:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    3218:	230f      	movs	r3, #15
    321a:	18fb      	adds	r3, r7, r3
    321c:	693a      	ldr	r2, [r7, #16]
    321e:	7812      	ldrb	r2, [r2, #0]
    3220:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3222:	230f      	movs	r3, #15
    3224:	18fb      	adds	r3, r7, r3
    3226:	781b      	ldrb	r3, [r3, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	d104      	bne.n	3236 <dir_find+0x76>
    322c:	2317      	movs	r3, #23
    322e:	18fb      	adds	r3, r7, r3
    3230:	2204      	movs	r2, #4
    3232:	701a      	strb	r2, [r3, #0]
    3234:	e023      	b.n	327e <dir_find+0xbe>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3236:	693b      	ldr	r3, [r7, #16]
    3238:	330b      	adds	r3, #11
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	001a      	movs	r2, r3
    323e:	2308      	movs	r3, #8
    3240:	4013      	ands	r3, r2
    3242:	d109      	bne.n	3258 <dir_find+0x98>
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	6999      	ldr	r1, [r3, #24]
    3248:	693b      	ldr	r3, [r7, #16]
    324a:	220b      	movs	r2, #11
    324c:	0018      	movs	r0, r3
    324e:	4b11      	ldr	r3, [pc, #68]	; (3294 <dir_find+0xd4>)
    3250:	447b      	add	r3, pc
    3252:	4798      	blx	r3
    3254:	1e03      	subs	r3, r0, #0
    3256:	d011      	beq.n	327c <dir_find+0xbc>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    3258:	2317      	movs	r3, #23
    325a:	18fc      	adds	r4, r7, r3
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	2100      	movs	r1, #0
    3260:	0018      	movs	r0, r3
    3262:	4b0d      	ldr	r3, [pc, #52]	; (3298 <dir_find+0xd8>)
    3264:	447b      	add	r3, pc
    3266:	4798      	blx	r3
    3268:	0003      	movs	r3, r0
    326a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    326c:	2317      	movs	r3, #23
    326e:	18fb      	adds	r3, r7, r3
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d0bb      	beq.n	31ee <dir_find+0x2e>
    3276:	e002      	b.n	327e <dir_find+0xbe>
		if (res != FR_OK) break;
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	e000      	b.n	327e <dir_find+0xbe>
			break;
    327c:	46c0      	nop			; (mov r8, r8)

	return res;
    327e:	2317      	movs	r3, #23
    3280:	18fb      	adds	r3, r7, r3
    3282:	781b      	ldrb	r3, [r3, #0]
}
    3284:	0018      	movs	r0, r3
    3286:	46bd      	mov	sp, r7
    3288:	b007      	add	sp, #28
    328a:	bd90      	pop	{r4, r7, pc}
    328c:	fffffcb1 	.word	0xfffffcb1
    3290:	fffff3e1 	.word	0xfffff3e1
    3294:	fffff315 	.word	0xfffff315
    3298:	fffffd55 	.word	0xfffffd55

0000329c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    329c:	b590      	push	{r4, r7, lr}
    329e:	b087      	sub	sp, #28
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    32a4:	2317      	movs	r3, #23
    32a6:	18fb      	adds	r3, r7, r3
    32a8:	2204      	movs	r2, #4
    32aa:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    32ac:	e043      	b.n	3336 <dir_read+0x9a>
		res = move_window(dj->fs, dj->sect);
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	681a      	ldr	r2, [r3, #0]
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	691b      	ldr	r3, [r3, #16]
    32b6:	2117      	movs	r1, #23
    32b8:	187c      	adds	r4, r7, r1
    32ba:	0019      	movs	r1, r3
    32bc:	0010      	movs	r0, r2
    32be:	4b2a      	ldr	r3, [pc, #168]	; (3368 <dir_read+0xcc>)
    32c0:	447b      	add	r3, pc
    32c2:	4798      	blx	r3
    32c4:	0003      	movs	r3, r0
    32c6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    32c8:	2317      	movs	r3, #23
    32ca:	18fb      	adds	r3, r7, r3
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d136      	bne.n	3340 <dir_read+0xa4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	695b      	ldr	r3, [r3, #20]
    32d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    32d8:	230f      	movs	r3, #15
    32da:	18fb      	adds	r3, r7, r3
    32dc:	693a      	ldr	r2, [r7, #16]
    32de:	7812      	ldrb	r2, [r2, #0]
    32e0:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    32e2:	230f      	movs	r3, #15
    32e4:	18fb      	adds	r3, r7, r3
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d104      	bne.n	32f6 <dir_read+0x5a>
    32ec:	2317      	movs	r3, #23
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	2204      	movs	r2, #4
    32f2:	701a      	strb	r2, [r3, #0]
    32f4:	e029      	b.n	334a <dir_read+0xae>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    32f6:	230f      	movs	r3, #15
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	2be5      	cmp	r3, #229	; 0xe5
    32fe:	d00b      	beq.n	3318 <dir_read+0x7c>
    3300:	230f      	movs	r3, #15
    3302:	18fb      	adds	r3, r7, r3
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	2b2e      	cmp	r3, #46	; 0x2e
    3308:	d006      	beq.n	3318 <dir_read+0x7c>
    330a:	693b      	ldr	r3, [r7, #16]
    330c:	330b      	adds	r3, #11
    330e:	781b      	ldrb	r3, [r3, #0]
    3310:	001a      	movs	r2, r3
    3312:	2308      	movs	r3, #8
    3314:	4013      	ands	r3, r2
    3316:	d015      	beq.n	3344 <dir_read+0xa8>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    3318:	2317      	movs	r3, #23
    331a:	18fc      	adds	r4, r7, r3
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2100      	movs	r1, #0
    3320:	0018      	movs	r0, r3
    3322:	4b12      	ldr	r3, [pc, #72]	; (336c <dir_read+0xd0>)
    3324:	447b      	add	r3, pc
    3326:	4798      	blx	r3
    3328:	0003      	movs	r3, r0
    332a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    332c:	2317      	movs	r3, #23
    332e:	18fb      	adds	r3, r7, r3
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b00      	cmp	r3, #0
    3334:	d108      	bne.n	3348 <dir_read+0xac>
	while (dj->sect) {
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	691b      	ldr	r3, [r3, #16]
    333a:	2b00      	cmp	r3, #0
    333c:	d1b7      	bne.n	32ae <dir_read+0x12>
    333e:	e004      	b.n	334a <dir_read+0xae>
		if (res != FR_OK) break;
    3340:	46c0      	nop			; (mov r8, r8)
    3342:	e002      	b.n	334a <dir_read+0xae>
			break;
    3344:	46c0      	nop			; (mov r8, r8)
    3346:	e000      	b.n	334a <dir_read+0xae>
		if (res != FR_OK) break;
    3348:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    334a:	2317      	movs	r3, #23
    334c:	18fb      	adds	r3, r7, r3
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d002      	beq.n	335a <dir_read+0xbe>
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	2200      	movs	r2, #0
    3358:	611a      	str	r2, [r3, #16]

	return res;
    335a:	2317      	movs	r3, #23
    335c:	18fb      	adds	r3, r7, r3
    335e:	781b      	ldrb	r3, [r3, #0]
}
    3360:	0018      	movs	r0, r3
    3362:	46bd      	mov	sp, r7
    3364:	b007      	add	sp, #28
    3366:	bd90      	pop	{r4, r7, pc}
    3368:	fffff321 	.word	0xfffff321
    336c:	fffffc95 	.word	0xfffffc95

00003370 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    3370:	b590      	push	{r4, r7, lr}
    3372:	b085      	sub	sp, #20
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    3378:	230f      	movs	r3, #15
    337a:	18fc      	adds	r4, r7, r3
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	2100      	movs	r1, #0
    3380:	0018      	movs	r0, r3
    3382:	4b38      	ldr	r3, [pc, #224]	; (3464 <dir_register+0xf4>)
    3384:	447b      	add	r3, pc
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    338c:	230f      	movs	r3, #15
    338e:	18fb      	adds	r3, r7, r3
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d132      	bne.n	33fc <dir_register+0x8c>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    3396:	687b      	ldr	r3, [r7, #4]
    3398:	681a      	ldr	r2, [r3, #0]
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	691b      	ldr	r3, [r3, #16]
    339e:	210f      	movs	r1, #15
    33a0:	187c      	adds	r4, r7, r1
    33a2:	0019      	movs	r1, r3
    33a4:	0010      	movs	r0, r2
    33a6:	4b30      	ldr	r3, [pc, #192]	; (3468 <dir_register+0xf8>)
    33a8:	447b      	add	r3, pc
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    33b0:	230f      	movs	r3, #15
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	781b      	ldrb	r3, [r3, #0]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d11f      	bne.n	33fa <dir_register+0x8a>
			c = *dj->dir;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	695a      	ldr	r2, [r3, #20]
    33be:	230e      	movs	r3, #14
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	7812      	ldrb	r2, [r2, #0]
    33c4:	701a      	strb	r2, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    33c6:	230e      	movs	r3, #14
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	781b      	ldrb	r3, [r3, #0]
    33cc:	2be5      	cmp	r3, #229	; 0xe5
    33ce:	d015      	beq.n	33fc <dir_register+0x8c>
    33d0:	230e      	movs	r3, #14
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d010      	beq.n	33fc <dir_register+0x8c>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    33da:	230f      	movs	r3, #15
    33dc:	18fc      	adds	r4, r7, r3
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	2101      	movs	r1, #1
    33e2:	0018      	movs	r0, r3
    33e4:	4b21      	ldr	r3, [pc, #132]	; (346c <dir_register+0xfc>)
    33e6:	447b      	add	r3, pc
    33e8:	4798      	blx	r3
    33ea:	0003      	movs	r3, r0
    33ec:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    33ee:	230f      	movs	r3, #15
    33f0:	18fb      	adds	r3, r7, r3
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d0ce      	beq.n	3396 <dir_register+0x26>
    33f8:	e000      	b.n	33fc <dir_register+0x8c>
			if (res != FR_OK) break;
    33fa:	46c0      	nop			; (mov r8, r8)
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    33fc:	230f      	movs	r3, #15
    33fe:	18fb      	adds	r3, r7, r3
    3400:	781b      	ldrb	r3, [r3, #0]
    3402:	2b00      	cmp	r3, #0
    3404:	d127      	bne.n	3456 <dir_register+0xe6>
		res = move_window(dj->fs, dj->sect);
    3406:	687b      	ldr	r3, [r7, #4]
    3408:	681a      	ldr	r2, [r3, #0]
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	691b      	ldr	r3, [r3, #16]
    340e:	210f      	movs	r1, #15
    3410:	187c      	adds	r4, r7, r1
    3412:	0019      	movs	r1, r3
    3414:	0010      	movs	r0, r2
    3416:	4b16      	ldr	r3, [pc, #88]	; (3470 <dir_register+0x100>)
    3418:	447b      	add	r3, pc
    341a:	4798      	blx	r3
    341c:	0003      	movs	r3, r0
    341e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    3420:	230f      	movs	r3, #15
    3422:	18fb      	adds	r3, r7, r3
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	2b00      	cmp	r3, #0
    3428:	d115      	bne.n	3456 <dir_register+0xe6>
			dir = dj->dir;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	695b      	ldr	r3, [r3, #20]
    342e:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    3430:	68bb      	ldr	r3, [r7, #8]
    3432:	2220      	movs	r2, #32
    3434:	2100      	movs	r1, #0
    3436:	0018      	movs	r0, r3
    3438:	4b0e      	ldr	r3, [pc, #56]	; (3474 <dir_register+0x104>)
    343a:	447b      	add	r3, pc
    343c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	6999      	ldr	r1, [r3, #24]
    3442:	68bb      	ldr	r3, [r7, #8]
    3444:	220b      	movs	r2, #11
    3446:	0018      	movs	r0, r3
    3448:	4b0b      	ldr	r3, [pc, #44]	; (3478 <dir_register+0x108>)
    344a:	447b      	add	r3, pc
    344c:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	2201      	movs	r2, #1
    3454:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    3456:	230f      	movs	r3, #15
    3458:	18fb      	adds	r3, r7, r3
    345a:	781b      	ldrb	r3, [r3, #0]
}
    345c:	0018      	movs	r0, r3
    345e:	46bd      	mov	sp, r7
    3460:	b005      	add	sp, #20
    3462:	bd90      	pop	{r4, r7, pc}
    3464:	fffffb01 	.word	0xfffffb01
    3468:	fffff239 	.word	0xfffff239
    346c:	fffffbd3 	.word	0xfffffbd3
    3470:	fffff1c9 	.word	0xfffff1c9
    3474:	fffff0fb 	.word	0xfffff0fb
    3478:	fffff0b3 	.word	0xfffff0b3

0000347c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    347c:	b590      	push	{r4, r7, lr}
    347e:	b085      	sub	sp, #20
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	88da      	ldrh	r2, [r3, #6]
    3488:	230f      	movs	r3, #15
    348a:	18fc      	adds	r4, r7, r3
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	0011      	movs	r1, r2
    3490:	0018      	movs	r0, r3
    3492:	4b15      	ldr	r3, [pc, #84]	; (34e8 <dir_remove+0x6c>)
    3494:	447b      	add	r3, pc
    3496:	4798      	blx	r3
    3498:	0003      	movs	r3, r0
    349a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    349c:	230f      	movs	r3, #15
    349e:	18fb      	adds	r3, r7, r3
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d119      	bne.n	34da <dir_remove+0x5e>
		res = move_window(dj->fs, dj->sect);
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	681a      	ldr	r2, [r3, #0]
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	691b      	ldr	r3, [r3, #16]
    34ae:	210f      	movs	r1, #15
    34b0:	187c      	adds	r4, r7, r1
    34b2:	0019      	movs	r1, r3
    34b4:	0010      	movs	r0, r2
    34b6:	4b0d      	ldr	r3, [pc, #52]	; (34ec <dir_remove+0x70>)
    34b8:	447b      	add	r3, pc
    34ba:	4798      	blx	r3
    34bc:	0003      	movs	r3, r0
    34be:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    34c0:	230f      	movs	r3, #15
    34c2:	18fb      	adds	r3, r7, r3
    34c4:	781b      	ldrb	r3, [r3, #0]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d107      	bne.n	34da <dir_remove+0x5e>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	695b      	ldr	r3, [r3, #20]
    34ce:	22e5      	movs	r2, #229	; 0xe5
    34d0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	2201      	movs	r2, #1
    34d8:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
    34da:	230f      	movs	r3, #15
    34dc:	18fb      	adds	r3, r7, r3
    34de:	781b      	ldrb	r3, [r3, #0]
}
    34e0:	0018      	movs	r0, r3
    34e2:	46bd      	mov	sp, r7
    34e4:	b005      	add	sp, #20
    34e6:	bd90      	pop	{r4, r7, pc}
    34e8:	fffff9f1 	.word	0xfffff9f1
    34ec:	fffff129 	.word	0xfffff129

000034f0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b088      	sub	sp, #32
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
    34f8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    34fa:	683b      	ldr	r3, [r7, #0]
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	60fb      	str	r3, [r7, #12]
    3500:	e002      	b.n	3508 <create_name+0x18>
    3502:	68fb      	ldr	r3, [r7, #12]
    3504:	3301      	adds	r3, #1
    3506:	60fb      	str	r3, [r7, #12]
    3508:	68fb      	ldr	r3, [r7, #12]
    350a:	781b      	ldrb	r3, [r3, #0]
    350c:	2b2f      	cmp	r3, #47	; 0x2f
    350e:	d0f8      	beq.n	3502 <create_name+0x12>
    3510:	68fb      	ldr	r3, [r7, #12]
    3512:	781b      	ldrb	r3, [r3, #0]
    3514:	2b5c      	cmp	r3, #92	; 0x5c
    3516:	d0f4      	beq.n	3502 <create_name+0x12>
	sfn = dj->fn;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	699b      	ldr	r3, [r3, #24]
    351c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
    351e:	68bb      	ldr	r3, [r7, #8]
    3520:	220b      	movs	r2, #11
    3522:	2120      	movs	r1, #32
    3524:	0018      	movs	r0, r3
    3526:	4b75      	ldr	r3, [pc, #468]	; (36fc <create_name+0x20c>)
    3528:	447b      	add	r3, pc
    352a:	4798      	blx	r3
	si = i = b = 0; ni = 8;
    352c:	231f      	movs	r3, #31
    352e:	18fb      	adds	r3, r7, r3
    3530:	2200      	movs	r2, #0
    3532:	701a      	strb	r2, [r3, #0]
    3534:	2300      	movs	r3, #0
    3536:	613b      	str	r3, [r7, #16]
    3538:	693b      	ldr	r3, [r7, #16]
    353a:	617b      	str	r3, [r7, #20]
    353c:	2308      	movs	r3, #8
    353e:	61bb      	str	r3, [r7, #24]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3540:	697b      	ldr	r3, [r7, #20]
    3542:	1c5a      	adds	r2, r3, #1
    3544:	617a      	str	r2, [r7, #20]
    3546:	68fa      	ldr	r2, [r7, #12]
    3548:	18d2      	adds	r2, r2, r3
    354a:	231e      	movs	r3, #30
    354c:	18fb      	adds	r3, r7, r3
    354e:	7812      	ldrb	r2, [r2, #0]
    3550:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3552:	231e      	movs	r3, #30
    3554:	18fb      	adds	r3, r7, r3
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	2b20      	cmp	r3, #32
    355a:	d800      	bhi.n	355e <create_name+0x6e>
    355c:	e07e      	b.n	365c <create_name+0x16c>
    355e:	231e      	movs	r3, #30
    3560:	18fb      	adds	r3, r7, r3
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b2f      	cmp	r3, #47	; 0x2f
    3566:	d100      	bne.n	356a <create_name+0x7a>
    3568:	e078      	b.n	365c <create_name+0x16c>
    356a:	231e      	movs	r3, #30
    356c:	18fb      	adds	r3, r7, r3
    356e:	781b      	ldrb	r3, [r3, #0]
    3570:	2b5c      	cmp	r3, #92	; 0x5c
    3572:	d100      	bne.n	3576 <create_name+0x86>
    3574:	e072      	b.n	365c <create_name+0x16c>
		if (c == '.' || i >= ni) {
    3576:	231e      	movs	r3, #30
    3578:	18fb      	adds	r3, r7, r3
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b2e      	cmp	r3, #46	; 0x2e
    357e:	d003      	beq.n	3588 <create_name+0x98>
    3580:	693a      	ldr	r2, [r7, #16]
    3582:	69bb      	ldr	r3, [r7, #24]
    3584:	429a      	cmp	r2, r3
    3586:	d315      	bcc.n	35b4 <create_name+0xc4>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    3588:	69bb      	ldr	r3, [r7, #24]
    358a:	2b08      	cmp	r3, #8
    358c:	d104      	bne.n	3598 <create_name+0xa8>
    358e:	231e      	movs	r3, #30
    3590:	18fb      	adds	r3, r7, r3
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b2e      	cmp	r3, #46	; 0x2e
    3596:	d001      	beq.n	359c <create_name+0xac>
    3598:	2306      	movs	r3, #6
    359a:	e0aa      	b.n	36f2 <create_name+0x202>
			i = 8; ni = 11;
    359c:	2308      	movs	r3, #8
    359e:	613b      	str	r3, [r7, #16]
    35a0:	230b      	movs	r3, #11
    35a2:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
    35a4:	231f      	movs	r3, #31
    35a6:	18fb      	adds	r3, r7, r3
    35a8:	221f      	movs	r2, #31
    35aa:	18ba      	adds	r2, r7, r2
    35ac:	7812      	ldrb	r2, [r2, #0]
    35ae:	0092      	lsls	r2, r2, #2
    35b0:	701a      	strb	r2, [r3, #0]
    35b2:	e052      	b.n	365a <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended char? */
    35b4:	231e      	movs	r3, #30
    35b6:	18fb      	adds	r3, r7, r3
    35b8:	781b      	ldrb	r3, [r3, #0]
    35ba:	b25b      	sxtb	r3, r3
    35bc:	2b00      	cmp	r3, #0
    35be:	da09      	bge.n	35d4 <create_name+0xe4>
			b |= 3;						/* Eliminate NT flag */
    35c0:	231f      	movs	r3, #31
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	221f      	movs	r2, #31
    35c6:	18ba      	adds	r2, r7, r2
    35c8:	7812      	ldrb	r2, [r2, #0]
    35ca:	2103      	movs	r1, #3
    35cc:	430a      	orrs	r2, r1
    35ce:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
#else
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
    35d0:	2306      	movs	r3, #6
    35d2:	e08e      	b.n	36f2 <create_name+0x202>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    35d4:	231e      	movs	r3, #30
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	4a49      	ldr	r2, [pc, #292]	; (3700 <create_name+0x210>)
    35dc:	447a      	add	r2, pc
    35de:	0019      	movs	r1, r3
    35e0:	0010      	movs	r0, r2
    35e2:	4b48      	ldr	r3, [pc, #288]	; (3704 <create_name+0x214>)
    35e4:	447b      	add	r3, pc
    35e6:	4798      	blx	r3
    35e8:	1e03      	subs	r3, r0, #0
    35ea:	d001      	beq.n	35f0 <create_name+0x100>
				return FR_INVALID_NAME;
    35ec:	2306      	movs	r3, #6
    35ee:	e080      	b.n	36f2 <create_name+0x202>
			if (IsUpper(c)) {			/* ASCII large capital? */
    35f0:	231e      	movs	r3, #30
    35f2:	18fb      	adds	r3, r7, r3
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	2b40      	cmp	r3, #64	; 0x40
    35f8:	d90d      	bls.n	3616 <create_name+0x126>
    35fa:	231e      	movs	r3, #30
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	2b5a      	cmp	r3, #90	; 0x5a
    3602:	d808      	bhi.n	3616 <create_name+0x126>
				b |= 2;
    3604:	231f      	movs	r3, #31
    3606:	18fb      	adds	r3, r7, r3
    3608:	221f      	movs	r2, #31
    360a:	18ba      	adds	r2, r7, r2
    360c:	7812      	ldrb	r2, [r2, #0]
    360e:	2102      	movs	r1, #2
    3610:	430a      	orrs	r2, r1
    3612:	701a      	strb	r2, [r3, #0]
    3614:	e018      	b.n	3648 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3616:	231e      	movs	r3, #30
    3618:	18fb      	adds	r3, r7, r3
    361a:	781b      	ldrb	r3, [r3, #0]
    361c:	2b60      	cmp	r3, #96	; 0x60
    361e:	d913      	bls.n	3648 <create_name+0x158>
    3620:	231e      	movs	r3, #30
    3622:	18fb      	adds	r3, r7, r3
    3624:	781b      	ldrb	r3, [r3, #0]
    3626:	2b7a      	cmp	r3, #122	; 0x7a
    3628:	d80e      	bhi.n	3648 <create_name+0x158>
					b |= 1; c -= 0x20;
    362a:	231f      	movs	r3, #31
    362c:	18fb      	adds	r3, r7, r3
    362e:	221f      	movs	r2, #31
    3630:	18ba      	adds	r2, r7, r2
    3632:	7812      	ldrb	r2, [r2, #0]
    3634:	2101      	movs	r1, #1
    3636:	430a      	orrs	r2, r1
    3638:	701a      	strb	r2, [r3, #0]
    363a:	231e      	movs	r3, #30
    363c:	18fb      	adds	r3, r7, r3
    363e:	221e      	movs	r2, #30
    3640:	18ba      	adds	r2, r7, r2
    3642:	7812      	ldrb	r2, [r2, #0]
    3644:	3a20      	subs	r2, #32
    3646:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
    3648:	693b      	ldr	r3, [r7, #16]
    364a:	1c5a      	adds	r2, r3, #1
    364c:	613a      	str	r2, [r7, #16]
    364e:	68ba      	ldr	r2, [r7, #8]
    3650:	18d3      	adds	r3, r2, r3
    3652:	221e      	movs	r2, #30
    3654:	18ba      	adds	r2, r7, r2
    3656:	7812      	ldrb	r2, [r2, #0]
    3658:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
    365a:	e771      	b.n	3540 <create_name+0x50>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    365c:	68fa      	ldr	r2, [r7, #12]
    365e:	697b      	ldr	r3, [r7, #20]
    3660:	18d2      	adds	r2, r2, r3
    3662:	683b      	ldr	r3, [r7, #0]
    3664:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3666:	231e      	movs	r3, #30
    3668:	18fb      	adds	r3, r7, r3
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	2b20      	cmp	r3, #32
    366e:	d801      	bhi.n	3674 <create_name+0x184>
    3670:	2204      	movs	r2, #4
    3672:	e000      	b.n	3676 <create_name+0x186>
    3674:	2200      	movs	r2, #0
    3676:	231e      	movs	r3, #30
    3678:	18fb      	adds	r3, r7, r3
    367a:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    367c:	693b      	ldr	r3, [r7, #16]
    367e:	2b00      	cmp	r3, #0
    3680:	d101      	bne.n	3686 <create_name+0x196>
    3682:	2306      	movs	r3, #6
    3684:	e035      	b.n	36f2 <create_name+0x202>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    3686:	68bb      	ldr	r3, [r7, #8]
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	2be5      	cmp	r3, #229	; 0xe5
    368c:	d102      	bne.n	3694 <create_name+0x1a4>
    368e:	68bb      	ldr	r3, [r7, #8]
    3690:	2205      	movs	r2, #5
    3692:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    3694:	69bb      	ldr	r3, [r7, #24]
    3696:	2b08      	cmp	r3, #8
    3698:	d106      	bne.n	36a8 <create_name+0x1b8>
    369a:	231f      	movs	r3, #31
    369c:	18fb      	adds	r3, r7, r3
    369e:	221f      	movs	r2, #31
    36a0:	18ba      	adds	r2, r7, r2
    36a2:	7812      	ldrb	r2, [r2, #0]
    36a4:	0092      	lsls	r2, r2, #2
    36a6:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    36a8:	231f      	movs	r3, #31
    36aa:	18fb      	adds	r3, r7, r3
    36ac:	781b      	ldrb	r3, [r3, #0]
    36ae:	2203      	movs	r2, #3
    36b0:	4013      	ands	r3, r2
    36b2:	2b01      	cmp	r3, #1
    36b4:	d107      	bne.n	36c6 <create_name+0x1d6>
    36b6:	231e      	movs	r3, #30
    36b8:	18fb      	adds	r3, r7, r3
    36ba:	221e      	movs	r2, #30
    36bc:	18ba      	adds	r2, r7, r2
    36be:	7812      	ldrb	r2, [r2, #0]
    36c0:	2110      	movs	r1, #16
    36c2:	430a      	orrs	r2, r1
    36c4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    36c6:	231f      	movs	r3, #31
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	220c      	movs	r2, #12
    36ce:	4013      	ands	r3, r2
    36d0:	2b04      	cmp	r3, #4
    36d2:	d107      	bne.n	36e4 <create_name+0x1f4>
    36d4:	231e      	movs	r3, #30
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	221e      	movs	r2, #30
    36da:	18ba      	adds	r2, r7, r2
    36dc:	7812      	ldrb	r2, [r2, #0]
    36de:	2108      	movs	r1, #8
    36e0:	430a      	orrs	r2, r1
    36e2:	701a      	strb	r2, [r3, #0]

	sfn[NS] = c;		/* Store NT flag, File name is created */
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	330b      	adds	r3, #11
    36e8:	221e      	movs	r2, #30
    36ea:	18ba      	adds	r2, r7, r2
    36ec:	7812      	ldrb	r2, [r2, #0]
    36ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    36f0:	2300      	movs	r3, #0
#endif
}
    36f2:	0018      	movs	r0, r3
    36f4:	46bd      	mov	sp, r7
    36f6:	b008      	add	sp, #32
    36f8:	bd80      	pop	{r7, pc}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	fffff00d 	.word	0xfffff00d
    3700:	0000e4c8 	.word	0x0000e4c8
    3704:	ffffefcb 	.word	0xffffefcb

00003708 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    3708:	b580      	push	{r7, lr}
    370a:	b088      	sub	sp, #32
    370c:	af00      	add	r7, sp, #0
    370e:	6078      	str	r0, [r7, #4]
    3710:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    3712:	683b      	ldr	r3, [r7, #0]
    3714:	3309      	adds	r3, #9
    3716:	61bb      	str	r3, [r7, #24]
	if (dj->sect) {
    3718:	687b      	ldr	r3, [r7, #4]
    371a:	691b      	ldr	r3, [r3, #16]
    371c:	2b00      	cmp	r3, #0
    371e:	d100      	bne.n	3722 <get_fileinfo+0x1a>
    3720:	e08a      	b.n	3838 <get_fileinfo+0x130>
		dir = dj->dir;
    3722:	687b      	ldr	r3, [r7, #4]
    3724:	695b      	ldr	r3, [r3, #20]
    3726:	613b      	str	r3, [r7, #16]
		nt = dir[DIR_NTres];		/* NT flag */
    3728:	230f      	movs	r3, #15
    372a:	18fb      	adds	r3, r7, r3
    372c:	693a      	ldr	r2, [r7, #16]
    372e:	7b12      	ldrb	r2, [r2, #12]
    3730:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    3732:	2300      	movs	r3, #0
    3734:	61fb      	str	r3, [r7, #28]
    3736:	e01e      	b.n	3776 <get_fileinfo+0x6e>
			c = dir[i];
    3738:	693a      	ldr	r2, [r7, #16]
    373a:	69fb      	ldr	r3, [r7, #28]
    373c:	18d2      	adds	r2, r2, r3
    373e:	2317      	movs	r3, #23
    3740:	18fb      	adds	r3, r7, r3
    3742:	7812      	ldrb	r2, [r2, #0]
    3744:	701a      	strb	r2, [r3, #0]
			if (c == ' ') break;
    3746:	2317      	movs	r3, #23
    3748:	18fb      	adds	r3, r7, r3
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b20      	cmp	r3, #32
    374e:	d016      	beq.n	377e <get_fileinfo+0x76>
			if (c == NDDE) c = (TCHAR)DDE;
    3750:	2317      	movs	r3, #23
    3752:	18fb      	adds	r3, r7, r3
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	2b05      	cmp	r3, #5
    3758:	d103      	bne.n	3762 <get_fileinfo+0x5a>
    375a:	2317      	movs	r3, #23
    375c:	18fb      	adds	r3, r7, r3
    375e:	22e5      	movs	r2, #229	; 0xe5
    3760:	701a      	strb	r2, [r3, #0]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    3762:	69bb      	ldr	r3, [r7, #24]
    3764:	1c5a      	adds	r2, r3, #1
    3766:	61ba      	str	r2, [r7, #24]
    3768:	2217      	movs	r2, #23
    376a:	18ba      	adds	r2, r7, r2
    376c:	7812      	ldrb	r2, [r2, #0]
    376e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    3770:	69fb      	ldr	r3, [r7, #28]
    3772:	3301      	adds	r3, #1
    3774:	61fb      	str	r3, [r7, #28]
    3776:	69fb      	ldr	r3, [r7, #28]
    3778:	2b07      	cmp	r3, #7
    377a:	d9dd      	bls.n	3738 <get_fileinfo+0x30>
    377c:	e000      	b.n	3780 <get_fileinfo+0x78>
			if (c == ' ') break;
    377e:	46c0      	nop			; (mov r8, r8)
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    3780:	693b      	ldr	r3, [r7, #16]
    3782:	3308      	adds	r3, #8
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	2b20      	cmp	r3, #32
    3788:	d022      	beq.n	37d0 <get_fileinfo+0xc8>
			*p++ = '.';
    378a:	69bb      	ldr	r3, [r7, #24]
    378c:	1c5a      	adds	r2, r3, #1
    378e:	61ba      	str	r2, [r7, #24]
    3790:	222e      	movs	r2, #46	; 0x2e
    3792:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    3794:	2308      	movs	r3, #8
    3796:	61fb      	str	r3, [r7, #28]
    3798:	e015      	b.n	37c6 <get_fileinfo+0xbe>
				c = dir[i];
    379a:	693a      	ldr	r2, [r7, #16]
    379c:	69fb      	ldr	r3, [r7, #28]
    379e:	18d2      	adds	r2, r2, r3
    37a0:	2317      	movs	r3, #23
    37a2:	18fb      	adds	r3, r7, r3
    37a4:	7812      	ldrb	r2, [r2, #0]
    37a6:	701a      	strb	r2, [r3, #0]
				if (c == ' ') break;
    37a8:	2317      	movs	r3, #23
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b20      	cmp	r3, #32
    37b0:	d00d      	beq.n	37ce <get_fileinfo+0xc6>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    37b2:	69bb      	ldr	r3, [r7, #24]
    37b4:	1c5a      	adds	r2, r3, #1
    37b6:	61ba      	str	r2, [r7, #24]
    37b8:	2217      	movs	r2, #23
    37ba:	18ba      	adds	r2, r7, r2
    37bc:	7812      	ldrb	r2, [r2, #0]
    37be:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    37c0:	69fb      	ldr	r3, [r7, #28]
    37c2:	3301      	adds	r3, #1
    37c4:	61fb      	str	r3, [r7, #28]
    37c6:	69fb      	ldr	r3, [r7, #28]
    37c8:	2b0a      	cmp	r3, #10
    37ca:	d9e6      	bls.n	379a <get_fileinfo+0x92>
    37cc:	e000      	b.n	37d0 <get_fileinfo+0xc8>
				if (c == ' ') break;
    37ce:	46c0      	nop			; (mov r8, r8)
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    37d0:	693b      	ldr	r3, [r7, #16]
    37d2:	7ada      	ldrb	r2, [r3, #11]
    37d4:	683b      	ldr	r3, [r7, #0]
    37d6:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    37d8:	693b      	ldr	r3, [r7, #16]
    37da:	331f      	adds	r3, #31
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	061a      	lsls	r2, r3, #24
    37e0:	693b      	ldr	r3, [r7, #16]
    37e2:	331e      	adds	r3, #30
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	041b      	lsls	r3, r3, #16
    37e8:	4313      	orrs	r3, r2
    37ea:	693a      	ldr	r2, [r7, #16]
    37ec:	321d      	adds	r2, #29
    37ee:	7812      	ldrb	r2, [r2, #0]
    37f0:	0212      	lsls	r2, r2, #8
    37f2:	4313      	orrs	r3, r2
    37f4:	693a      	ldr	r2, [r7, #16]
    37f6:	321c      	adds	r2, #28
    37f8:	7812      	ldrb	r2, [r2, #0]
    37fa:	431a      	orrs	r2, r3
    37fc:	683b      	ldr	r3, [r7, #0]
    37fe:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    3800:	693b      	ldr	r3, [r7, #16]
    3802:	3319      	adds	r3, #25
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	021b      	lsls	r3, r3, #8
    3808:	b21a      	sxth	r2, r3
    380a:	693b      	ldr	r3, [r7, #16]
    380c:	3318      	adds	r3, #24
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	b21b      	sxth	r3, r3
    3812:	4313      	orrs	r3, r2
    3814:	b21b      	sxth	r3, r3
    3816:	b29a      	uxth	r2, r3
    3818:	683b      	ldr	r3, [r7, #0]
    381a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    381c:	693b      	ldr	r3, [r7, #16]
    381e:	3317      	adds	r3, #23
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	021b      	lsls	r3, r3, #8
    3824:	b21a      	sxth	r2, r3
    3826:	693b      	ldr	r3, [r7, #16]
    3828:	3316      	adds	r3, #22
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	b21b      	sxth	r3, r3
    382e:	4313      	orrs	r3, r2
    3830:	b21b      	sxth	r3, r3
    3832:	b29a      	uxth	r2, r3
    3834:	683b      	ldr	r3, [r7, #0]
    3836:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    3838:	69bb      	ldr	r3, [r7, #24]
    383a:	2200      	movs	r2, #0
    383c:	701a      	strb	r2, [r3, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	46bd      	mov	sp, r7
    3842:	b008      	add	sp, #32
    3844:	bd80      	pop	{r7, pc}
	...

00003848 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    3848:	b590      	push	{r4, r7, lr}
    384a:	b085      	sub	sp, #20
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
    3850:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    3852:	683b      	ldr	r3, [r7, #0]
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	2b2f      	cmp	r3, #47	; 0x2f
    3858:	d003      	beq.n	3862 <follow_path+0x1a>
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	781b      	ldrb	r3, [r3, #0]
    385e:	2b5c      	cmp	r3, #92	; 0x5c
    3860:	d102      	bne.n	3868 <follow_path+0x20>
		path++;
    3862:	683b      	ldr	r3, [r7, #0]
    3864:	3301      	adds	r3, #1
    3866:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    3868:	687b      	ldr	r3, [r7, #4]
    386a:	2200      	movs	r2, #0
    386c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b1f      	cmp	r3, #31
    3874:	d80d      	bhi.n	3892 <follow_path+0x4a>
		res = dir_sdi(dj, 0);
    3876:	230f      	movs	r3, #15
    3878:	18fc      	adds	r4, r7, r3
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	2100      	movs	r1, #0
    387e:	0018      	movs	r0, r3
    3880:	4b3e      	ldr	r3, [pc, #248]	; (397c <follow_path+0x134>)
    3882:	447b      	add	r3, pc
    3884:	4798      	blx	r3
    3886:	0003      	movs	r3, r0
    3888:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	2200      	movs	r2, #0
    388e:	615a      	str	r2, [r3, #20]
    3890:	e06c      	b.n	396c <follow_path+0x124>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    3892:	230f      	movs	r3, #15
    3894:	18fc      	adds	r4, r7, r3
    3896:	003a      	movs	r2, r7
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	0011      	movs	r1, r2
    389c:	0018      	movs	r0, r3
    389e:	4b38      	ldr	r3, [pc, #224]	; (3980 <follow_path+0x138>)
    38a0:	447b      	add	r3, pc
    38a2:	4798      	blx	r3
    38a4:	0003      	movs	r3, r0
    38a6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    38a8:	230f      	movs	r3, #15
    38aa:	18fb      	adds	r3, r7, r3
    38ac:	781b      	ldrb	r3, [r3, #0]
    38ae:	2b00      	cmp	r3, #0
    38b0:	d155      	bne.n	395e <follow_path+0x116>
			res = dir_find(dj);				/* Find it */
    38b2:	230f      	movs	r3, #15
    38b4:	18fc      	adds	r4, r7, r3
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	0018      	movs	r0, r3
    38ba:	4b32      	ldr	r3, [pc, #200]	; (3984 <follow_path+0x13c>)
    38bc:	447b      	add	r3, pc
    38be:	4798      	blx	r3
    38c0:	0003      	movs	r3, r0
    38c2:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	699a      	ldr	r2, [r3, #24]
    38c8:	230e      	movs	r3, #14
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	7ad2      	ldrb	r2, [r2, #11]
    38ce:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    38d0:	230f      	movs	r3, #15
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d00f      	beq.n	38fa <follow_path+0xb2>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    38da:	230f      	movs	r3, #15
    38dc:	18fb      	adds	r3, r7, r3
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	2b04      	cmp	r3, #4
    38e2:	d13e      	bne.n	3962 <follow_path+0x11a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    38e4:	230e      	movs	r3, #14
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	781b      	ldrb	r3, [r3, #0]
    38ea:	2204      	movs	r2, #4
    38ec:	4013      	ands	r3, r2
    38ee:	d13a      	bne.n	3966 <follow_path+0x11e>
    38f0:	230f      	movs	r3, #15
    38f2:	18fb      	adds	r3, r7, r3
    38f4:	2205      	movs	r2, #5
    38f6:	701a      	strb	r2, [r3, #0]
				}
				break;
    38f8:	e035      	b.n	3966 <follow_path+0x11e>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    38fa:	230e      	movs	r3, #14
    38fc:	18fb      	adds	r3, r7, r3
    38fe:	781b      	ldrb	r3, [r3, #0]
    3900:	2204      	movs	r2, #4
    3902:	4013      	ands	r3, r2
    3904:	d131      	bne.n	396a <follow_path+0x122>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	695b      	ldr	r3, [r3, #20]
    390a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    390c:	68bb      	ldr	r3, [r7, #8]
    390e:	330b      	adds	r3, #11
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	001a      	movs	r2, r3
    3914:	2310      	movs	r3, #16
    3916:	4013      	ands	r3, r2
    3918:	d104      	bne.n	3924 <follow_path+0xdc>
				res = FR_NO_PATH; break;
    391a:	230f      	movs	r3, #15
    391c:	18fb      	adds	r3, r7, r3
    391e:	2205      	movs	r2, #5
    3920:	701a      	strb	r2, [r3, #0]
    3922:	e023      	b.n	396c <follow_path+0x124>
			}
			dj->sclust = LD_CLUST(dir);
    3924:	68bb      	ldr	r3, [r7, #8]
    3926:	3315      	adds	r3, #21
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	021b      	lsls	r3, r3, #8
    392c:	b21a      	sxth	r2, r3
    392e:	68bb      	ldr	r3, [r7, #8]
    3930:	3314      	adds	r3, #20
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	b21b      	sxth	r3, r3
    3936:	4313      	orrs	r3, r2
    3938:	b21b      	sxth	r3, r3
    393a:	b29b      	uxth	r3, r3
    393c:	041b      	lsls	r3, r3, #16
    393e:	68ba      	ldr	r2, [r7, #8]
    3940:	321b      	adds	r2, #27
    3942:	7812      	ldrb	r2, [r2, #0]
    3944:	0212      	lsls	r2, r2, #8
    3946:	b211      	sxth	r1, r2
    3948:	68ba      	ldr	r2, [r7, #8]
    394a:	321a      	adds	r2, #26
    394c:	7812      	ldrb	r2, [r2, #0]
    394e:	b212      	sxth	r2, r2
    3950:	430a      	orrs	r2, r1
    3952:	b212      	sxth	r2, r2
    3954:	b292      	uxth	r2, r2
    3956:	431a      	orrs	r2, r3
    3958:	687b      	ldr	r3, [r7, #4]
    395a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    395c:	e799      	b.n	3892 <follow_path+0x4a>
			if (res != FR_OK) break;
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	e004      	b.n	396c <follow_path+0x124>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	e002      	b.n	396c <follow_path+0x124>
				break;
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	e000      	b.n	396c <follow_path+0x124>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    396a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    396c:	230f      	movs	r3, #15
    396e:	18fb      	adds	r3, r7, r3
    3970:	781b      	ldrb	r3, [r3, #0]
}
    3972:	0018      	movs	r0, r3
    3974:	46bd      	mov	sp, r7
    3976:	b005      	add	sp, #20
    3978:	bd90      	pop	{r4, r7, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	fffff603 	.word	0xfffff603
    3980:	fffffc4d 	.word	0xfffffc4d
    3984:	fffff901 	.word	0xfffff901

00003988 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3988:	b5b0      	push	{r4, r5, r7, lr}
    398a:	b082      	sub	sp, #8
    398c:	af00      	add	r7, sp, #0
    398e:	6078      	str	r0, [r7, #4]
    3990:	6039      	str	r1, [r7, #0]
    3992:	4d30      	ldr	r5, [pc, #192]	; (3a54 <check_fs+0xcc>)
    3994:	447d      	add	r5, pc
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	7858      	ldrb	r0, [r3, #1]
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	3330      	adds	r3, #48	; 0x30
    399e:	0019      	movs	r1, r3
    39a0:	683a      	ldr	r2, [r7, #0]
    39a2:	2301      	movs	r3, #1
    39a4:	4c2c      	ldr	r4, [pc, #176]	; (3a58 <check_fs+0xd0>)
    39a6:	592c      	ldr	r4, [r5, r4]
    39a8:	47a0      	blx	r4
    39aa:	1e03      	subs	r3, r0, #0
    39ac:	d001      	beq.n	39b2 <check_fs+0x2a>
		return 3;
    39ae:	2303      	movs	r3, #3
    39b0:	e04b      	b.n	3a4a <check_fs+0xc2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	4a29      	ldr	r2, [pc, #164]	; (3a5c <check_fs+0xd4>)
    39b6:	4694      	mov	ip, r2
    39b8:	4463      	add	r3, ip
    39ba:	3301      	adds	r3, #1
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	021b      	lsls	r3, r3, #8
    39c0:	b21a      	sxth	r2, r3
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	4925      	ldr	r1, [pc, #148]	; (3a5c <check_fs+0xd4>)
    39c6:	5c5b      	ldrb	r3, [r3, r1]
    39c8:	b21b      	sxth	r3, r3
    39ca:	4313      	orrs	r3, r2
    39cc:	b21b      	sxth	r3, r3
    39ce:	4a24      	ldr	r2, [pc, #144]	; (3a60 <check_fs+0xd8>)
    39d0:	4293      	cmp	r3, r2
    39d2:	d001      	beq.n	39d8 <check_fs+0x50>
		return 2;
    39d4:	2302      	movs	r3, #2
    39d6:	e038      	b.n	3a4a <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	3366      	adds	r3, #102	; 0x66
    39dc:	3303      	adds	r3, #3
    39de:	781b      	ldrb	r3, [r3, #0]
    39e0:	061a      	lsls	r2, r3, #24
    39e2:	687b      	ldr	r3, [r7, #4]
    39e4:	3366      	adds	r3, #102	; 0x66
    39e6:	3302      	adds	r3, #2
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	041b      	lsls	r3, r3, #16
    39ec:	4313      	orrs	r3, r2
    39ee:	687a      	ldr	r2, [r7, #4]
    39f0:	3266      	adds	r2, #102	; 0x66
    39f2:	3201      	adds	r2, #1
    39f4:	7812      	ldrb	r2, [r2, #0]
    39f6:	0212      	lsls	r2, r2, #8
    39f8:	4313      	orrs	r3, r2
    39fa:	687a      	ldr	r2, [r7, #4]
    39fc:	2166      	movs	r1, #102	; 0x66
    39fe:	5c52      	ldrb	r2, [r2, r1]
    3a00:	4313      	orrs	r3, r2
    3a02:	021b      	lsls	r3, r3, #8
    3a04:	0a1b      	lsrs	r3, r3, #8
    3a06:	4a17      	ldr	r2, [pc, #92]	; (3a64 <check_fs+0xdc>)
    3a08:	4293      	cmp	r3, r2
    3a0a:	d101      	bne.n	3a10 <check_fs+0x88>
		return 0;
    3a0c:	2300      	movs	r3, #0
    3a0e:	e01c      	b.n	3a4a <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	3382      	adds	r3, #130	; 0x82
    3a14:	3303      	adds	r3, #3
    3a16:	781b      	ldrb	r3, [r3, #0]
    3a18:	061a      	lsls	r2, r3, #24
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	3382      	adds	r3, #130	; 0x82
    3a1e:	3302      	adds	r3, #2
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	041b      	lsls	r3, r3, #16
    3a24:	4313      	orrs	r3, r2
    3a26:	687a      	ldr	r2, [r7, #4]
    3a28:	3282      	adds	r2, #130	; 0x82
    3a2a:	3201      	adds	r2, #1
    3a2c:	7812      	ldrb	r2, [r2, #0]
    3a2e:	0212      	lsls	r2, r2, #8
    3a30:	4313      	orrs	r3, r2
    3a32:	687a      	ldr	r2, [r7, #4]
    3a34:	2182      	movs	r1, #130	; 0x82
    3a36:	5c52      	ldrb	r2, [r2, r1]
    3a38:	4313      	orrs	r3, r2
    3a3a:	021b      	lsls	r3, r3, #8
    3a3c:	0a1b      	lsrs	r3, r3, #8
    3a3e:	4a09      	ldr	r2, [pc, #36]	; (3a64 <check_fs+0xdc>)
    3a40:	4293      	cmp	r3, r2
    3a42:	d101      	bne.n	3a48 <check_fs+0xc0>
		return 0;
    3a44:	2300      	movs	r3, #0
    3a46:	e000      	b.n	3a4a <check_fs+0xc2>

	return 1;
    3a48:	2301      	movs	r3, #1
}
    3a4a:	0018      	movs	r0, r3
    3a4c:	46bd      	mov	sp, r7
    3a4e:	b002      	add	sp, #8
    3a50:	bdb0      	pop	{r4, r5, r7, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	0000e44c 	.word	0x0000e44c
    3a58:	000002c0 	.word	0x000002c0
    3a5c:	0000022e 	.word	0x0000022e
    3a60:	ffffaa55 	.word	0xffffaa55
    3a64:	00544146 	.word	0x00544146

00003a68 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    3a68:	b5b0      	push	{r4, r5, r7, lr}
    3a6a:	b092      	sub	sp, #72	; 0x48
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	60b9      	str	r1, [r7, #8]
    3a72:	1dfb      	adds	r3, r7, #7
    3a74:	701a      	strb	r2, [r3, #0]
    3a76:	4cd0      	ldr	r4, [pc, #832]	; (3db8 <chk_mounted+0x350>)
    3a78:	447c      	add	r4, pc
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    3a7a:	68fb      	ldr	r3, [r7, #12]
    3a7c:	681b      	ldr	r3, [r3, #0]
    3a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    3a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a82:	781b      	ldrb	r3, [r3, #0]
    3a84:	3b30      	subs	r3, #48	; 0x30
    3a86:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a8a:	2b09      	cmp	r3, #9
    3a8c:	d80b      	bhi.n	3aa6 <chk_mounted+0x3e>
    3a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a90:	3301      	adds	r3, #1
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	2b3a      	cmp	r3, #58	; 0x3a
    3a96:	d106      	bne.n	3aa6 <chk_mounted+0x3e>
		p += 2; *path = p;				/* Return pointer to the path name */
    3a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a9a:	3302      	adds	r3, #2
    3a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    3a9e:	68fb      	ldr	r3, [r7, #12]
    3aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3aa2:	601a      	str	r2, [r3, #0]
    3aa4:	e001      	b.n	3aaa <chk_mounted+0x42>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    3aa6:	2300      	movs	r3, #0
    3aa8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3aac:	2b00      	cmp	r3, #0
    3aae:	d001      	beq.n	3ab4 <chk_mounted+0x4c>
		return FR_INVALID_DRIVE;
    3ab0:	230b      	movs	r3, #11
    3ab2:	e2bc      	b.n	402e <chk_mounted+0x5c6>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3ab4:	4bc1      	ldr	r3, [pc, #772]	; (3dbc <chk_mounted+0x354>)
    3ab6:	447b      	add	r3, pc
    3ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3aba:	0092      	lsls	r2, r2, #2
    3abc:	58d3      	ldr	r3, [r2, r3]
    3abe:	62bb      	str	r3, [r7, #40]	; 0x28
    3ac0:	68bb      	ldr	r3, [r7, #8]
    3ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3ac4:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d101      	bne.n	3ad0 <chk_mounted+0x68>
    3acc:	230c      	movs	r3, #12
    3ace:	e2ae      	b.n	402e <chk_mounted+0x5c6>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d01d      	beq.n	3b14 <chk_mounted+0xac>
		stat = disk_status(fs->drv);
    3ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ada:	785b      	ldrb	r3, [r3, #1]
    3adc:	2227      	movs	r2, #39	; 0x27
    3ade:	18bd      	adds	r5, r7, r2
    3ae0:	0018      	movs	r0, r3
    3ae2:	4bb7      	ldr	r3, [pc, #732]	; (3dc0 <chk_mounted+0x358>)
    3ae4:	58e3      	ldr	r3, [r4, r3]
    3ae6:	4798      	blx	r3
    3ae8:	0003      	movs	r3, r0
    3aea:	702b      	strb	r3, [r5, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3aec:	2327      	movs	r3, #39	; 0x27
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	2201      	movs	r2, #1
    3af4:	4013      	ands	r3, r2
    3af6:	d10d      	bne.n	3b14 <chk_mounted+0xac>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3af8:	1dfb      	adds	r3, r7, #7
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	2b00      	cmp	r3, #0
    3afe:	d007      	beq.n	3b10 <chk_mounted+0xa8>
    3b00:	2327      	movs	r3, #39	; 0x27
    3b02:	18fb      	adds	r3, r7, r3
    3b04:	781b      	ldrb	r3, [r3, #0]
    3b06:	2204      	movs	r2, #4
    3b08:	4013      	ands	r3, r2
    3b0a:	d001      	beq.n	3b10 <chk_mounted+0xa8>
				return FR_WRITE_PROTECTED;
    3b0c:	230a      	movs	r3, #10
    3b0e:	e28e      	b.n	402e <chk_mounted+0x5c6>
			return FR_OK;				/* The file system object is valid */
    3b10:	2300      	movs	r3, #0
    3b12:	e28c      	b.n	402e <chk_mounted+0x5c6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    3b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b16:	2200      	movs	r2, #0
    3b18:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3b1c:	b2da      	uxtb	r2, r3
    3b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b20:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b24:	785b      	ldrb	r3, [r3, #1]
    3b26:	2227      	movs	r2, #39	; 0x27
    3b28:	18bd      	adds	r5, r7, r2
    3b2a:	0018      	movs	r0, r3
    3b2c:	4ba5      	ldr	r3, [pc, #660]	; (3dc4 <chk_mounted+0x35c>)
    3b2e:	58e3      	ldr	r3, [r4, r3]
    3b30:	4798      	blx	r3
    3b32:	0003      	movs	r3, r0
    3b34:	702b      	strb	r3, [r5, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3b36:	2327      	movs	r3, #39	; 0x27
    3b38:	18fb      	adds	r3, r7, r3
    3b3a:	781b      	ldrb	r3, [r3, #0]
    3b3c:	2201      	movs	r2, #1
    3b3e:	4013      	ands	r3, r2
    3b40:	d001      	beq.n	3b46 <chk_mounted+0xde>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3b42:	2303      	movs	r3, #3
    3b44:	e273      	b.n	402e <chk_mounted+0x5c6>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3b46:	1dfb      	adds	r3, r7, #7
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d007      	beq.n	3b5e <chk_mounted+0xf6>
    3b4e:	2327      	movs	r3, #39	; 0x27
    3b50:	18fb      	adds	r3, r7, r3
    3b52:	781b      	ldrb	r3, [r3, #0]
    3b54:	2204      	movs	r2, #4
    3b56:	4013      	ands	r3, r2
    3b58:	d001      	beq.n	3b5e <chk_mounted+0xf6>
		return FR_WRITE_PROTECTED;
    3b5a:	230a      	movs	r3, #10
    3b5c:	e267      	b.n	402e <chk_mounted+0x5c6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3b5e:	2300      	movs	r3, #0
    3b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b62:	2347      	movs	r3, #71	; 0x47
    3b64:	18fd      	adds	r5, r7, r3
    3b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b6a:	0011      	movs	r1, r2
    3b6c:	0018      	movs	r0, r3
    3b6e:	4b96      	ldr	r3, [pc, #600]	; (3dc8 <chk_mounted+0x360>)
    3b70:	447b      	add	r3, pc
    3b72:	4798      	blx	r3
    3b74:	0003      	movs	r3, r0
    3b76:	702b      	strb	r3, [r5, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3b78:	2347      	movs	r3, #71	; 0x47
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	2b01      	cmp	r3, #1
    3b80:	d13c      	bne.n	3bfc <chk_mounted+0x194>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    3b82:	2346      	movs	r3, #70	; 0x46
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	2200      	movs	r2, #0
    3b88:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    3b8a:	2346      	movs	r3, #70	; 0x46
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	2b00      	cmp	r3, #0
    3b92:	d006      	beq.n	3ba2 <chk_mounted+0x13a>
    3b94:	2346      	movs	r3, #70	; 0x46
    3b96:	18fb      	adds	r3, r7, r3
    3b98:	781a      	ldrb	r2, [r3, #0]
    3b9a:	2346      	movs	r3, #70	; 0x46
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	3a01      	subs	r2, #1
    3ba0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    3ba2:	2346      	movs	r3, #70	; 0x46
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	781b      	ldrb	r3, [r3, #0]
    3ba8:	011b      	lsls	r3, r3, #4
    3baa:	33bf      	adds	r3, #191	; 0xbf
    3bac:	33ff      	adds	r3, #255	; 0xff
    3bae:	3330      	adds	r3, #48	; 0x30
    3bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bb2:	18d3      	adds	r3, r2, r3
    3bb4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    3bb6:	6a3b      	ldr	r3, [r7, #32]
    3bb8:	3304      	adds	r3, #4
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d01d      	beq.n	3bfc <chk_mounted+0x194>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3bc0:	6a3b      	ldr	r3, [r7, #32]
    3bc2:	330b      	adds	r3, #11
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	061a      	lsls	r2, r3, #24
    3bc8:	6a3b      	ldr	r3, [r7, #32]
    3bca:	330a      	adds	r3, #10
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	041b      	lsls	r3, r3, #16
    3bd0:	4313      	orrs	r3, r2
    3bd2:	6a3a      	ldr	r2, [r7, #32]
    3bd4:	3209      	adds	r2, #9
    3bd6:	7812      	ldrb	r2, [r2, #0]
    3bd8:	0212      	lsls	r2, r2, #8
    3bda:	4313      	orrs	r3, r2
    3bdc:	6a3a      	ldr	r2, [r7, #32]
    3bde:	3208      	adds	r2, #8
    3be0:	7812      	ldrb	r2, [r2, #0]
    3be2:	4313      	orrs	r3, r2
    3be4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3be6:	2347      	movs	r3, #71	; 0x47
    3be8:	18fd      	adds	r5, r7, r3
    3bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bee:	0011      	movs	r1, r2
    3bf0:	0018      	movs	r0, r3
    3bf2:	4b76      	ldr	r3, [pc, #472]	; (3dcc <chk_mounted+0x364>)
    3bf4:	447b      	add	r3, pc
    3bf6:	4798      	blx	r3
    3bf8:	0003      	movs	r3, r0
    3bfa:	702b      	strb	r3, [r5, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    3bfc:	2347      	movs	r3, #71	; 0x47
    3bfe:	18fb      	adds	r3, r7, r3
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	2b03      	cmp	r3, #3
    3c04:	d101      	bne.n	3c0a <chk_mounted+0x1a2>
    3c06:	2301      	movs	r3, #1
    3c08:	e211      	b.n	402e <chk_mounted+0x5c6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3c0a:	2347      	movs	r3, #71	; 0x47
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	781b      	ldrb	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d001      	beq.n	3c18 <chk_mounted+0x1b0>
    3c14:	230d      	movs	r3, #13
    3c16:	e20a      	b.n	402e <chk_mounted+0x5c6>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c1a:	223c      	movs	r2, #60	; 0x3c
    3c1c:	5c9b      	ldrb	r3, [r3, r2]
    3c1e:	021b      	lsls	r3, r3, #8
    3c20:	b21a      	sxth	r2, r3
    3c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c24:	213b      	movs	r1, #59	; 0x3b
    3c26:	5c5b      	ldrb	r3, [r3, r1]
    3c28:	b21b      	sxth	r3, r3
    3c2a:	4313      	orrs	r3, r2
    3c2c:	b21a      	sxth	r2, r3
    3c2e:	2380      	movs	r3, #128	; 0x80
    3c30:	009b      	lsls	r3, r3, #2
    3c32:	429a      	cmp	r2, r3
    3c34:	d001      	beq.n	3c3a <chk_mounted+0x1d2>
		return FR_NO_FILESYSTEM;
    3c36:	230d      	movs	r3, #13
    3c38:	e1f9      	b.n	402e <chk_mounted+0x5c6>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c3c:	2247      	movs	r2, #71	; 0x47
    3c3e:	5c9b      	ldrb	r3, [r3, r2]
    3c40:	021b      	lsls	r3, r3, #8
    3c42:	b21a      	sxth	r2, r3
    3c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c46:	2146      	movs	r1, #70	; 0x46
    3c48:	5c5b      	ldrb	r3, [r3, r1]
    3c4a:	b21b      	sxth	r3, r3
    3c4c:	4313      	orrs	r3, r2
    3c4e:	b21b      	sxth	r3, r3
    3c50:	b29b      	uxth	r3, r3
    3c52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3c56:	2b00      	cmp	r3, #0
    3c58:	d112      	bne.n	3c80 <chk_mounted+0x218>
    3c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c5c:	2257      	movs	r2, #87	; 0x57
    3c5e:	5c9b      	ldrb	r3, [r3, r2]
    3c60:	061a      	lsls	r2, r3, #24
    3c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c64:	2156      	movs	r1, #86	; 0x56
    3c66:	5c5b      	ldrb	r3, [r3, r1]
    3c68:	041b      	lsls	r3, r3, #16
    3c6a:	4313      	orrs	r3, r2
    3c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c6e:	2155      	movs	r1, #85	; 0x55
    3c70:	5c52      	ldrb	r2, [r2, r1]
    3c72:	0212      	lsls	r2, r2, #8
    3c74:	4313      	orrs	r3, r2
    3c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c78:	2154      	movs	r1, #84	; 0x54
    3c7a:	5c52      	ldrb	r2, [r2, r1]
    3c7c:	4313      	orrs	r3, r2
    3c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    3c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3c84:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3c86:	231f      	movs	r3, #31
    3c88:	18fb      	adds	r3, r7, r3
    3c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c8c:	2140      	movs	r1, #64	; 0x40
    3c8e:	5c52      	ldrb	r2, [r2, r1]
    3c90:	701a      	strb	r2, [r3, #0]
    3c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c94:	221f      	movs	r2, #31
    3c96:	18ba      	adds	r2, r7, r2
    3c98:	7812      	ldrb	r2, [r2, #0]
    3c9a:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3c9c:	231f      	movs	r3, #31
    3c9e:	18fb      	adds	r3, r7, r3
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b01      	cmp	r3, #1
    3ca4:	d006      	beq.n	3cb4 <chk_mounted+0x24c>
    3ca6:	231f      	movs	r3, #31
    3ca8:	18fb      	adds	r3, r7, r3
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	2b02      	cmp	r3, #2
    3cae:	d001      	beq.n	3cb4 <chk_mounted+0x24c>
    3cb0:	230d      	movs	r3, #13
    3cb2:	e1bc      	b.n	402e <chk_mounted+0x5c6>
	fasize *= b;										/* Number of sectors for FAT area */
    3cb4:	231f      	movs	r3, #31
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	781a      	ldrb	r2, [r3, #0]
    3cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3cbc:	4353      	muls	r3, r2
    3cbe:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3cc0:	231f      	movs	r3, #31
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3cc6:	213d      	movs	r1, #61	; 0x3d
    3cc8:	5c52      	ldrb	r2, [r2, r1]
    3cca:	701a      	strb	r2, [r3, #0]
    3ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cce:	221f      	movs	r2, #31
    3cd0:	18ba      	adds	r2, r7, r2
    3cd2:	7812      	ldrb	r2, [r2, #0]
    3cd4:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3cd6:	231f      	movs	r3, #31
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d008      	beq.n	3cf2 <chk_mounted+0x28a>
    3ce0:	231f      	movs	r3, #31
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	221f      	movs	r2, #31
    3ce8:	18ba      	adds	r2, r7, r2
    3cea:	7812      	ldrb	r2, [r2, #0]
    3cec:	3a01      	subs	r2, #1
    3cee:	4013      	ands	r3, r2
    3cf0:	d001      	beq.n	3cf6 <chk_mounted+0x28e>
    3cf2:	230d      	movs	r3, #13
    3cf4:	e19b      	b.n	402e <chk_mounted+0x5c6>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cf8:	2242      	movs	r2, #66	; 0x42
    3cfa:	5c9b      	ldrb	r3, [r3, r2]
    3cfc:	021b      	lsls	r3, r3, #8
    3cfe:	b21a      	sxth	r2, r3
    3d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d02:	2141      	movs	r1, #65	; 0x41
    3d04:	5c5b      	ldrb	r3, [r3, r1]
    3d06:	b21b      	sxth	r3, r3
    3d08:	4313      	orrs	r3, r2
    3d0a:	b21b      	sxth	r3, r3
    3d0c:	b29a      	uxth	r2, r3
    3d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d10:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d14:	891b      	ldrh	r3, [r3, #8]
    3d16:	220f      	movs	r2, #15
    3d18:	4013      	ands	r3, r2
    3d1a:	b29b      	uxth	r3, r3
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d001      	beq.n	3d24 <chk_mounted+0x2bc>
    3d20:	230d      	movs	r3, #13
    3d22:	e184      	b.n	402e <chk_mounted+0x5c6>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d26:	2244      	movs	r2, #68	; 0x44
    3d28:	5c9b      	ldrb	r3, [r3, r2]
    3d2a:	021b      	lsls	r3, r3, #8
    3d2c:	b21a      	sxth	r2, r3
    3d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d30:	2143      	movs	r1, #67	; 0x43
    3d32:	5c5b      	ldrb	r3, [r3, r1]
    3d34:	b21b      	sxth	r3, r3
    3d36:	4313      	orrs	r3, r2
    3d38:	b21b      	sxth	r3, r3
    3d3a:	b29b      	uxth	r3, r3
    3d3c:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d40:	2b00      	cmp	r3, #0
    3d42:	d112      	bne.n	3d6a <chk_mounted+0x302>
    3d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d46:	2253      	movs	r2, #83	; 0x53
    3d48:	5c9b      	ldrb	r3, [r3, r2]
    3d4a:	061a      	lsls	r2, r3, #24
    3d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d4e:	2152      	movs	r1, #82	; 0x52
    3d50:	5c5b      	ldrb	r3, [r3, r1]
    3d52:	041b      	lsls	r3, r3, #16
    3d54:	4313      	orrs	r3, r2
    3d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d58:	2151      	movs	r1, #81	; 0x51
    3d5a:	5c52      	ldrb	r2, [r2, r1]
    3d5c:	0212      	lsls	r2, r2, #8
    3d5e:	4313      	orrs	r3, r2
    3d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d62:	2150      	movs	r1, #80	; 0x50
    3d64:	5c52      	ldrb	r2, [r2, r1]
    3d66:	4313      	orrs	r3, r2
    3d68:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d6c:	223f      	movs	r2, #63	; 0x3f
    3d6e:	5c9b      	ldrb	r3, [r3, r2]
    3d70:	021b      	lsls	r3, r3, #8
    3d72:	b21a      	sxth	r2, r3
    3d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d76:	213e      	movs	r1, #62	; 0x3e
    3d78:	5c5b      	ldrb	r3, [r3, r1]
    3d7a:	b21b      	sxth	r3, r3
    3d7c:	4313      	orrs	r3, r2
    3d7e:	b21a      	sxth	r2, r3
    3d80:	231c      	movs	r3, #28
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3d86:	231c      	movs	r3, #28
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d101      	bne.n	3d94 <chk_mounted+0x32c>
    3d90:	230d      	movs	r3, #13
    3d92:	e14c      	b.n	402e <chk_mounted+0x5c6>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3d94:	231c      	movs	r3, #28
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	881a      	ldrh	r2, [r3, #0]
    3d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3da0:	8912      	ldrh	r2, [r2, #8]
    3da2:	0912      	lsrs	r2, r2, #4
    3da4:	b292      	uxth	r2, r2
    3da6:	189b      	adds	r3, r3, r2
    3da8:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3dac:	69bb      	ldr	r3, [r7, #24]
    3dae:	429a      	cmp	r2, r3
    3db0:	d20e      	bcs.n	3dd0 <chk_mounted+0x368>
    3db2:	230d      	movs	r3, #13
    3db4:	e13b      	b.n	402e <chk_mounted+0x5c6>
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	0000e368 	.word	0x0000e368
    3dbc:	1fffc716 	.word	0x1fffc716
    3dc0:	000000cc 	.word	0x000000cc
    3dc4:	000000a4 	.word	0x000000a4
    3dc8:	fffffe15 	.word	0xfffffe15
    3dcc:	fffffd91 	.word	0xfffffd91
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3dd2:	69bb      	ldr	r3, [r7, #24]
    3dd4:	1ad2      	subs	r2, r2, r3
    3dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3dd8:	789b      	ldrb	r3, [r3, #2]
    3dda:	0019      	movs	r1, r3
    3ddc:	4b96      	ldr	r3, [pc, #600]	; (4038 <chk_mounted+0x5d0>)
    3dde:	58e3      	ldr	r3, [r4, r3]
    3de0:	0010      	movs	r0, r2
    3de2:	4798      	blx	r3
    3de4:	0003      	movs	r3, r0
    3de6:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3de8:	697b      	ldr	r3, [r7, #20]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d101      	bne.n	3df2 <chk_mounted+0x38a>
    3dee:	230d      	movs	r3, #13
    3df0:	e11d      	b.n	402e <chk_mounted+0x5c6>
	fmt = FS_FAT12;
    3df2:	2347      	movs	r3, #71	; 0x47
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	2201      	movs	r2, #1
    3df8:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3dfa:	697b      	ldr	r3, [r7, #20]
    3dfc:	4a8f      	ldr	r2, [pc, #572]	; (403c <chk_mounted+0x5d4>)
    3dfe:	4293      	cmp	r3, r2
    3e00:	d903      	bls.n	3e0a <chk_mounted+0x3a2>
    3e02:	2347      	movs	r3, #71	; 0x47
    3e04:	18fb      	adds	r3, r7, r3
    3e06:	2202      	movs	r2, #2
    3e08:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3e0a:	697b      	ldr	r3, [r7, #20]
    3e0c:	4a8c      	ldr	r2, [pc, #560]	; (4040 <chk_mounted+0x5d8>)
    3e0e:	4293      	cmp	r3, r2
    3e10:	d903      	bls.n	3e1a <chk_mounted+0x3b2>
    3e12:	2347      	movs	r3, #71	; 0x47
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	2203      	movs	r2, #3
    3e18:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3e1a:	697b      	ldr	r3, [r7, #20]
    3e1c:	1c9a      	adds	r2, r3, #2
    3e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e20:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3e24:	69bb      	ldr	r3, [r7, #24]
    3e26:	18d2      	adds	r2, r2, r3
    3e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e2a:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3e2c:	231c      	movs	r3, #28
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	881a      	ldrh	r2, [r3, #0]
    3e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3e34:	18d2      	adds	r2, r2, r3
    3e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e38:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    3e3a:	2347      	movs	r3, #71	; 0x47
    3e3c:	18fb      	adds	r3, r7, r3
    3e3e:	781b      	ldrb	r3, [r3, #0]
    3e40:	2b03      	cmp	r3, #3
    3e42:	d11e      	bne.n	3e82 <chk_mounted+0x41a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e46:	891b      	ldrh	r3, [r3, #8]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d001      	beq.n	3e50 <chk_mounted+0x3e8>
    3e4c:	230d      	movs	r3, #13
    3e4e:	e0ee      	b.n	402e <chk_mounted+0x5c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e52:	225f      	movs	r2, #95	; 0x5f
    3e54:	5c9b      	ldrb	r3, [r3, r2]
    3e56:	061a      	lsls	r2, r3, #24
    3e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e5a:	215e      	movs	r1, #94	; 0x5e
    3e5c:	5c5b      	ldrb	r3, [r3, r1]
    3e5e:	041b      	lsls	r3, r3, #16
    3e60:	4313      	orrs	r3, r2
    3e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e64:	215d      	movs	r1, #93	; 0x5d
    3e66:	5c52      	ldrb	r2, [r2, r1]
    3e68:	0212      	lsls	r2, r2, #8
    3e6a:	4313      	orrs	r3, r2
    3e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3e6e:	215c      	movs	r1, #92	; 0x5c
    3e70:	5c52      	ldrb	r2, [r2, r1]
    3e72:	431a      	orrs	r2, r3
    3e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e76:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e7a:	699b      	ldr	r3, [r3, #24]
    3e7c:	009b      	lsls	r3, r3, #2
    3e7e:	633b      	str	r3, [r7, #48]	; 0x30
    3e80:	e020      	b.n	3ec4 <chk_mounted+0x45c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e84:	891b      	ldrh	r3, [r3, #8]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d101      	bne.n	3e8e <chk_mounted+0x426>
    3e8a:	230d      	movs	r3, #13
    3e8c:	e0cf      	b.n	402e <chk_mounted+0x5c6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e90:	6a1a      	ldr	r2, [r3, #32]
    3e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3e94:	18d2      	adds	r2, r2, r3
    3e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e98:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3e9a:	2347      	movs	r3, #71	; 0x47
    3e9c:	18fb      	adds	r3, r7, r3
    3e9e:	781b      	ldrb	r3, [r3, #0]
    3ea0:	2b02      	cmp	r3, #2
    3ea2:	d103      	bne.n	3eac <chk_mounted+0x444>
    3ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ea6:	699b      	ldr	r3, [r3, #24]
    3ea8:	005b      	lsls	r3, r3, #1
    3eaa:	e00a      	b.n	3ec2 <chk_mounted+0x45a>
    3eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eae:	699a      	ldr	r2, [r3, #24]
    3eb0:	0013      	movs	r3, r2
    3eb2:	005b      	lsls	r3, r3, #1
    3eb4:	189b      	adds	r3, r3, r2
    3eb6:	085a      	lsrs	r2, r3, #1
    3eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eba:	699b      	ldr	r3, [r3, #24]
    3ebc:	2101      	movs	r1, #1
    3ebe:	400b      	ands	r3, r1
    3ec0:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    3ec2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ec6:	69da      	ldr	r2, [r3, #28]
    3ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3eca:	495e      	ldr	r1, [pc, #376]	; (4044 <chk_mounted+0x5dc>)
    3ecc:	468c      	mov	ip, r1
    3ece:	4463      	add	r3, ip
    3ed0:	0a5b      	lsrs	r3, r3, #9
    3ed2:	429a      	cmp	r2, r3
    3ed4:	d201      	bcs.n	3eda <chk_mounted+0x472>
		return FR_NO_FILESYSTEM;
    3ed6:	230d      	movs	r3, #13
    3ed8:	e0a9      	b.n	402e <chk_mounted+0x5c6>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    3eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3edc:	2201      	movs	r2, #1
    3ede:	4252      	negs	r2, r2
    3ee0:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    3ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ee4:	2200      	movs	r2, #0
    3ee6:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    3ee8:	2347      	movs	r3, #71	; 0x47
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b03      	cmp	r3, #3
    3ef0:	d000      	beq.n	3ef4 <chk_mounted+0x48c>
    3ef2:	e083      	b.n	3ffc <chk_mounted+0x594>
	 	fs->fsi_flag = 0;
    3ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ef6:	2200      	movs	r2, #0
    3ef8:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3efc:	2261      	movs	r2, #97	; 0x61
    3efe:	5c9b      	ldrb	r3, [r3, r2]
    3f00:	021b      	lsls	r3, r3, #8
    3f02:	b21a      	sxth	r2, r3
    3f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f06:	2160      	movs	r1, #96	; 0x60
    3f08:	5c5b      	ldrb	r3, [r3, r1]
    3f0a:	b21b      	sxth	r3, r3
    3f0c:	4313      	orrs	r3, r2
    3f0e:	b21b      	sxth	r3, r3
    3f10:	b29b      	uxth	r3, r3
    3f12:	001a      	movs	r2, r3
    3f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f16:	18d2      	adds	r2, r2, r3
    3f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f1a:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f1e:	7858      	ldrb	r0, [r3, #1]
    3f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f22:	3330      	adds	r3, #48	; 0x30
    3f24:	0019      	movs	r1, r3
    3f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f28:	695a      	ldr	r2, [r3, #20]
    3f2a:	2301      	movs	r3, #1
    3f2c:	4d46      	ldr	r5, [pc, #280]	; (4048 <chk_mounted+0x5e0>)
    3f2e:	5964      	ldr	r4, [r4, r5]
    3f30:	47a0      	blx	r4
    3f32:	1e03      	subs	r3, r0, #0
    3f34:	d162      	bne.n	3ffc <chk_mounted+0x594>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f38:	4a44      	ldr	r2, [pc, #272]	; (404c <chk_mounted+0x5e4>)
    3f3a:	5c9b      	ldrb	r3, [r3, r2]
    3f3c:	021b      	lsls	r3, r3, #8
    3f3e:	b21a      	sxth	r2, r3
    3f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f42:	4943      	ldr	r1, [pc, #268]	; (4050 <chk_mounted+0x5e8>)
    3f44:	5c5b      	ldrb	r3, [r3, r1]
    3f46:	b21b      	sxth	r3, r3
    3f48:	4313      	orrs	r3, r2
    3f4a:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3f4c:	4a41      	ldr	r2, [pc, #260]	; (4054 <chk_mounted+0x5ec>)
    3f4e:	4293      	cmp	r3, r2
    3f50:	d154      	bne.n	3ffc <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f54:	2233      	movs	r2, #51	; 0x33
    3f56:	5c9b      	ldrb	r3, [r3, r2]
    3f58:	061a      	lsls	r2, r3, #24
    3f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f5c:	2132      	movs	r1, #50	; 0x32
    3f5e:	5c5b      	ldrb	r3, [r3, r1]
    3f60:	041b      	lsls	r3, r3, #16
    3f62:	4313      	orrs	r3, r2
    3f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f66:	2131      	movs	r1, #49	; 0x31
    3f68:	5c52      	ldrb	r2, [r2, r1]
    3f6a:	0212      	lsls	r2, r2, #8
    3f6c:	4313      	orrs	r3, r2
    3f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f70:	2130      	movs	r1, #48	; 0x30
    3f72:	5c52      	ldrb	r2, [r2, r1]
    3f74:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3f76:	4a38      	ldr	r2, [pc, #224]	; (4058 <chk_mounted+0x5f0>)
    3f78:	4293      	cmp	r3, r2
    3f7a:	d13f      	bne.n	3ffc <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f7e:	4a37      	ldr	r2, [pc, #220]	; (405c <chk_mounted+0x5f4>)
    3f80:	5c9b      	ldrb	r3, [r3, r2]
    3f82:	061a      	lsls	r2, r3, #24
    3f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f86:	4936      	ldr	r1, [pc, #216]	; (4060 <chk_mounted+0x5f8>)
    3f88:	5c5b      	ldrb	r3, [r3, r1]
    3f8a:	041b      	lsls	r3, r3, #16
    3f8c:	4313      	orrs	r3, r2
    3f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f90:	4934      	ldr	r1, [pc, #208]	; (4064 <chk_mounted+0x5fc>)
    3f92:	5c52      	ldrb	r2, [r2, r1]
    3f94:	0212      	lsls	r2, r2, #8
    3f96:	4313      	orrs	r3, r2
    3f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3f9a:	2285      	movs	r2, #133	; 0x85
    3f9c:	0092      	lsls	r2, r2, #2
    3f9e:	5c8a      	ldrb	r2, [r1, r2]
    3fa0:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3fa2:	4a31      	ldr	r2, [pc, #196]	; (4068 <chk_mounted+0x600>)
    3fa4:	4293      	cmp	r3, r2
    3fa6:	d129      	bne.n	3ffc <chk_mounted+0x594>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3faa:	4a30      	ldr	r2, [pc, #192]	; (406c <chk_mounted+0x604>)
    3fac:	5c9b      	ldrb	r3, [r3, r2]
    3fae:	061a      	lsls	r2, r3, #24
    3fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fb2:	492f      	ldr	r1, [pc, #188]	; (4070 <chk_mounted+0x608>)
    3fb4:	5c5b      	ldrb	r3, [r3, r1]
    3fb6:	041b      	lsls	r3, r3, #16
    3fb8:	4313      	orrs	r3, r2
    3fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3fbc:	492d      	ldr	r1, [pc, #180]	; (4074 <chk_mounted+0x60c>)
    3fbe:	5c52      	ldrb	r2, [r2, r1]
    3fc0:	0212      	lsls	r2, r2, #8
    3fc2:	4313      	orrs	r3, r2
    3fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3fc6:	2287      	movs	r2, #135	; 0x87
    3fc8:	0092      	lsls	r2, r2, #2
    3fca:	5c8a      	ldrb	r2, [r1, r2]
    3fcc:	431a      	orrs	r2, r3
    3fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fd0:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fd4:	4a28      	ldr	r2, [pc, #160]	; (4078 <chk_mounted+0x610>)
    3fd6:	5c9b      	ldrb	r3, [r3, r2]
    3fd8:	061a      	lsls	r2, r3, #24
    3fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3fdc:	4927      	ldr	r1, [pc, #156]	; (407c <chk_mounted+0x614>)
    3fde:	5c5b      	ldrb	r3, [r3, r1]
    3fe0:	041b      	lsls	r3, r3, #16
    3fe2:	4313      	orrs	r3, r2
    3fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3fe6:	4926      	ldr	r1, [pc, #152]	; (4080 <chk_mounted+0x618>)
    3fe8:	5c52      	ldrb	r2, [r2, r1]
    3fea:	0212      	lsls	r2, r2, #8
    3fec:	4313      	orrs	r3, r2
    3fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3ff0:	2286      	movs	r2, #134	; 0x86
    3ff2:	0092      	lsls	r2, r2, #2
    3ff4:	5c8a      	ldrb	r2, [r1, r2]
    3ff6:	431a      	orrs	r2, r3
    3ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ffa:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    3ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ffe:	2247      	movs	r2, #71	; 0x47
    4000:	18ba      	adds	r2, r7, r2
    4002:	7812      	ldrb	r2, [r2, #0]
    4004:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    4006:	4b1f      	ldr	r3, [pc, #124]	; (4084 <chk_mounted+0x61c>)
    4008:	447b      	add	r3, pc
    400a:	881b      	ldrh	r3, [r3, #0]
    400c:	3301      	adds	r3, #1
    400e:	b29a      	uxth	r2, r3
    4010:	4b1d      	ldr	r3, [pc, #116]	; (4088 <chk_mounted+0x620>)
    4012:	447b      	add	r3, pc
    4014:	801a      	strh	r2, [r3, #0]
    4016:	4b1d      	ldr	r3, [pc, #116]	; (408c <chk_mounted+0x624>)
    4018:	447b      	add	r3, pc
    401a:	881a      	ldrh	r2, [r3, #0]
    401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    401e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    4020:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4022:	2200      	movs	r2, #0
    4024:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    4026:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4028:	2200      	movs	r2, #0
    402a:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    402c:	2300      	movs	r3, #0
}
    402e:	0018      	movs	r0, r3
    4030:	46bd      	mov	sp, r7
    4032:	b012      	add	sp, #72	; 0x48
    4034:	bdb0      	pop	{r4, r5, r7, pc}
    4036:	46c0      	nop			; (mov r8, r8)
    4038:	0000020c 	.word	0x0000020c
    403c:	00000ff5 	.word	0x00000ff5
    4040:	0000fff5 	.word	0x0000fff5
    4044:	000001ff 	.word	0x000001ff
    4048:	000002c0 	.word	0x000002c0
    404c:	0000022f 	.word	0x0000022f
    4050:	0000022e 	.word	0x0000022e
    4054:	ffffaa55 	.word	0xffffaa55
    4058:	41615252 	.word	0x41615252
    405c:	00000217 	.word	0x00000217
    4060:	00000216 	.word	0x00000216
    4064:	00000215 	.word	0x00000215
    4068:	61417272 	.word	0x61417272
    406c:	0000021f 	.word	0x0000021f
    4070:	0000021e 	.word	0x0000021e
    4074:	0000021d 	.word	0x0000021d
    4078:	0000021b 	.word	0x0000021b
    407c:	0000021a 	.word	0x0000021a
    4080:	00000219 	.word	0x00000219
    4084:	1fffc1c8 	.word	0x1fffc1c8
    4088:	1fffc1be 	.word	0x1fffc1be
    408c:	1fffc1b8 	.word	0x1fffc1b8

00004090 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    4090:	b580      	push	{r7, lr}
    4092:	b082      	sub	sp, #8
    4094:	af00      	add	r7, sp, #0
    4096:	6078      	str	r0, [r7, #4]
    4098:	000a      	movs	r2, r1
    409a:	1cbb      	adds	r3, r7, #2
    409c:	801a      	strh	r2, [r3, #0]
    409e:	4a11      	ldr	r2, [pc, #68]	; (40e4 <validate+0x54>)
    40a0:	447a      	add	r2, pc
	if (!fs || !fs->fs_type || fs->id != id)
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d009      	beq.n	40bc <validate+0x2c>
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	781b      	ldrb	r3, [r3, #0]
    40ac:	2b00      	cmp	r3, #0
    40ae:	d005      	beq.n	40bc <validate+0x2c>
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	88db      	ldrh	r3, [r3, #6]
    40b4:	1cb9      	adds	r1, r7, #2
    40b6:	8809      	ldrh	r1, [r1, #0]
    40b8:	4299      	cmp	r1, r3
    40ba:	d001      	beq.n	40c0 <validate+0x30>
		return FR_INVALID_OBJECT;
    40bc:	2309      	movs	r3, #9
    40be:	e00d      	b.n	40dc <validate+0x4c>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	785b      	ldrb	r3, [r3, #1]
    40c4:	0018      	movs	r0, r3
    40c6:	4b08      	ldr	r3, [pc, #32]	; (40e8 <validate+0x58>)
    40c8:	58d3      	ldr	r3, [r2, r3]
    40ca:	4798      	blx	r3
    40cc:	0003      	movs	r3, r0
    40ce:	001a      	movs	r2, r3
    40d0:	2301      	movs	r3, #1
    40d2:	4013      	ands	r3, r2
    40d4:	d001      	beq.n	40da <validate+0x4a>
		return FR_NOT_READY;
    40d6:	2303      	movs	r3, #3
    40d8:	e000      	b.n	40dc <validate+0x4c>

	return FR_OK;
    40da:	2300      	movs	r3, #0
}
    40dc:	0018      	movs	r0, r3
    40de:	46bd      	mov	sp, r7
    40e0:	b002      	add	sp, #8
    40e2:	bd80      	pop	{r7, pc}
    40e4:	0000dd40 	.word	0x0000dd40
    40e8:	000000cc 	.word	0x000000cc

000040ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b084      	sub	sp, #16
    40f0:	af00      	add	r7, sp, #0
    40f2:	0002      	movs	r2, r0
    40f4:	6039      	str	r1, [r7, #0]
    40f6:	1dfb      	adds	r3, r7, #7
    40f8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    40fa:	1dfb      	adds	r3, r7, #7
    40fc:	781b      	ldrb	r3, [r3, #0]
    40fe:	2b00      	cmp	r3, #0
    4100:	d001      	beq.n	4106 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    4102:	230b      	movs	r3, #11
    4104:	e01a      	b.n	413c <f_mount+0x50>
	rfs = FatFs[vol];			/* Get current fs object */
    4106:	1dfb      	adds	r3, r7, #7
    4108:	781a      	ldrb	r2, [r3, #0]
    410a:	4b0e      	ldr	r3, [pc, #56]	; (4144 <f_mount+0x58>)
    410c:	447b      	add	r3, pc
    410e:	0092      	lsls	r2, r2, #2
    4110:	58d3      	ldr	r3, [r2, r3]
    4112:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    4114:	68fb      	ldr	r3, [r7, #12]
    4116:	2b00      	cmp	r3, #0
    4118:	d002      	beq.n	4120 <f_mount+0x34>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    411a:	68fb      	ldr	r3, [r7, #12]
    411c:	2200      	movs	r2, #0
    411e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    4120:	683b      	ldr	r3, [r7, #0]
    4122:	2b00      	cmp	r3, #0
    4124:	d002      	beq.n	412c <f_mount+0x40>
		fs->fs_type = 0;		/* Clear new fs object */
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	2200      	movs	r2, #0
    412a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    412c:	1dfb      	adds	r3, r7, #7
    412e:	781a      	ldrb	r2, [r3, #0]
    4130:	4b05      	ldr	r3, [pc, #20]	; (4148 <f_mount+0x5c>)
    4132:	447b      	add	r3, pc
    4134:	0092      	lsls	r2, r2, #2
    4136:	6839      	ldr	r1, [r7, #0]
    4138:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    413a:	2300      	movs	r3, #0
}
    413c:	0018      	movs	r0, r3
    413e:	46bd      	mov	sp, r7
    4140:	b004      	add	sp, #16
    4142:	bd80      	pop	{r7, pc}
    4144:	1fffc0c0 	.word	0x1fffc0c0
    4148:	1fffc09a 	.word	0x1fffc09a

0000414c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    414c:	b5b0      	push	{r4, r5, r7, lr}
    414e:	b092      	sub	sp, #72	; 0x48
    4150:	af00      	add	r7, sp, #0
    4152:	60f8      	str	r0, [r7, #12]
    4154:	60b9      	str	r1, [r7, #8]
    4156:	1dfb      	adds	r3, r7, #7
    4158:	701a      	strb	r2, [r3, #0]
    415a:	4cd1      	ldr	r4, [pc, #836]	; (44a0 <f_open+0x354>)
    415c:	447c      	add	r4, pc
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	2200      	movs	r2, #0
    4162:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4164:	1dfb      	adds	r3, r7, #7
    4166:	1dfa      	adds	r2, r7, #7
    4168:	7812      	ldrb	r2, [r2, #0]
    416a:	211f      	movs	r1, #31
    416c:	400a      	ands	r2, r1
    416e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4170:	1dfb      	adds	r3, r7, #7
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	2201      	movs	r2, #1
    4176:	4393      	bics	r3, r2
    4178:	b2da      	uxtb	r2, r3
    417a:	2347      	movs	r3, #71	; 0x47
    417c:	18fd      	adds	r5, r7, r3
    417e:	231c      	movs	r3, #28
    4180:	18f9      	adds	r1, r7, r3
    4182:	2308      	movs	r3, #8
    4184:	18fb      	adds	r3, r7, r3
    4186:	0018      	movs	r0, r3
    4188:	4bc6      	ldr	r3, [pc, #792]	; (44a4 <f_open+0x358>)
    418a:	447b      	add	r3, pc
    418c:	4798      	blx	r3
    418e:	0003      	movs	r3, r0
    4190:	702b      	strb	r3, [r5, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4192:	231c      	movs	r3, #28
    4194:	18fb      	adds	r3, r7, r3
    4196:	2210      	movs	r2, #16
    4198:	18ba      	adds	r2, r7, r2
    419a:	619a      	str	r2, [r3, #24]
	if (res == FR_OK)
    419c:	2347      	movs	r3, #71	; 0x47
    419e:	18fb      	adds	r3, r7, r3
    41a0:	781b      	ldrb	r3, [r3, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d10b      	bne.n	41be <f_open+0x72>
		res = follow_path(&dj, path);	/* Follow the file path */
    41a6:	68ba      	ldr	r2, [r7, #8]
    41a8:	2347      	movs	r3, #71	; 0x47
    41aa:	18fd      	adds	r5, r7, r3
    41ac:	231c      	movs	r3, #28
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	0011      	movs	r1, r2
    41b2:	0018      	movs	r0, r3
    41b4:	4bbc      	ldr	r3, [pc, #752]	; (44a8 <f_open+0x35c>)
    41b6:	447b      	add	r3, pc
    41b8:	4798      	blx	r3
    41ba:	0003      	movs	r3, r0
    41bc:	702b      	strb	r3, [r5, #0]
	dir = dj.dir;
    41be:	231c      	movs	r3, #28
    41c0:	18fb      	adds	r3, r7, r3
    41c2:	695b      	ldr	r3, [r3, #20]
    41c4:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    41c6:	2347      	movs	r3, #71	; 0x47
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	781b      	ldrb	r3, [r3, #0]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d106      	bne.n	41de <f_open+0x92>
		if (!dir)	/* Current dir itself */
    41d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41d2:	2b00      	cmp	r3, #0
    41d4:	d103      	bne.n	41de <f_open+0x92>
			res = FR_INVALID_NAME;
    41d6:	2347      	movs	r3, #71	; 0x47
    41d8:	18fb      	adds	r3, r7, r3
    41da:	2206      	movs	r2, #6
    41dc:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    41de:	1dfb      	adds	r3, r7, #7
    41e0:	781b      	ldrb	r3, [r3, #0]
    41e2:	221c      	movs	r2, #28
    41e4:	4013      	ands	r3, r2
    41e6:	d100      	bne.n	41ea <f_open+0x9e>
    41e8:	e0cf      	b.n	438a <f_open+0x23e>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    41ea:	2347      	movs	r3, #71	; 0x47
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d019      	beq.n	4228 <f_open+0xdc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    41f4:	2347      	movs	r3, #71	; 0x47
    41f6:	18fb      	adds	r3, r7, r3
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	2b04      	cmp	r3, #4
    41fc:	d109      	bne.n	4212 <f_open+0xc6>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    41fe:	2347      	movs	r3, #71	; 0x47
    4200:	18fd      	adds	r5, r7, r3
    4202:	231c      	movs	r3, #28
    4204:	18fb      	adds	r3, r7, r3
    4206:	0018      	movs	r0, r3
    4208:	4ba8      	ldr	r3, [pc, #672]	; (44ac <f_open+0x360>)
    420a:	447b      	add	r3, pc
    420c:	4798      	blx	r3
    420e:	0003      	movs	r3, r0
    4210:	702b      	strb	r3, [r5, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4212:	1dfb      	adds	r3, r7, #7
    4214:	1dfa      	adds	r2, r7, #7
    4216:	7812      	ldrb	r2, [r2, #0]
    4218:	2108      	movs	r1, #8
    421a:	430a      	orrs	r2, r1
    421c:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    421e:	231c      	movs	r3, #28
    4220:	18fb      	adds	r3, r7, r3
    4222:	695b      	ldr	r3, [r3, #20]
    4224:	643b      	str	r3, [r7, #64]	; 0x40
    4226:	e014      	b.n	4252 <f_open+0x106>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    422a:	330b      	adds	r3, #11
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	001a      	movs	r2, r3
    4230:	2311      	movs	r3, #17
    4232:	4013      	ands	r3, r2
    4234:	d004      	beq.n	4240 <f_open+0xf4>
				res = FR_DENIED;
    4236:	2347      	movs	r3, #71	; 0x47
    4238:	18fb      	adds	r3, r7, r3
    423a:	2207      	movs	r2, #7
    423c:	701a      	strb	r2, [r3, #0]
    423e:	e008      	b.n	4252 <f_open+0x106>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4240:	1dfb      	adds	r3, r7, #7
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2204      	movs	r2, #4
    4246:	4013      	ands	r3, r2
    4248:	d003      	beq.n	4252 <f_open+0x106>
					res = FR_EXIST;
    424a:	2347      	movs	r3, #71	; 0x47
    424c:	18fb      	adds	r3, r7, r3
    424e:	2208      	movs	r2, #8
    4250:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4252:	2347      	movs	r3, #71	; 0x47
    4254:	18fb      	adds	r3, r7, r3
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	2b00      	cmp	r3, #0
    425a:	d000      	beq.n	425e <f_open+0x112>
    425c:	e0b6      	b.n	43cc <f_open+0x280>
    425e:	1dfb      	adds	r3, r7, #7
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	2208      	movs	r2, #8
    4264:	4013      	ands	r3, r2
    4266:	d100      	bne.n	426a <f_open+0x11e>
    4268:	e0b0      	b.n	43cc <f_open+0x280>
			dw = get_fattime();					/* Created time */
    426a:	4b91      	ldr	r3, [pc, #580]	; (44b0 <f_open+0x364>)
    426c:	58e3      	ldr	r3, [r4, r3]
    426e:	4798      	blx	r3
    4270:	0003      	movs	r3, r0
    4272:	63fb      	str	r3, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
    4274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4276:	330e      	adds	r3, #14
    4278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    427a:	b2d2      	uxtb	r2, r2
    427c:	701a      	strb	r2, [r3, #0]
    427e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4280:	330f      	adds	r3, #15
    4282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4284:	b292      	uxth	r2, r2
    4286:	0a12      	lsrs	r2, r2, #8
    4288:	b292      	uxth	r2, r2
    428a:	b2d2      	uxtb	r2, r2
    428c:	701a      	strb	r2, [r3, #0]
    428e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4290:	3310      	adds	r3, #16
    4292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4294:	0c12      	lsrs	r2, r2, #16
    4296:	b2d2      	uxtb	r2, r2
    4298:	701a      	strb	r2, [r3, #0]
    429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    429c:	3311      	adds	r3, #17
    429e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42a0:	0e12      	lsrs	r2, r2, #24
    42a2:	b2d2      	uxtb	r2, r2
    42a4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    42a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42a8:	330b      	adds	r3, #11
    42aa:	2200      	movs	r2, #0
    42ac:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    42ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42b0:	331c      	adds	r3, #28
    42b2:	2200      	movs	r2, #0
    42b4:	701a      	strb	r2, [r3, #0]
    42b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42b8:	331d      	adds	r3, #29
    42ba:	2200      	movs	r2, #0
    42bc:	701a      	strb	r2, [r3, #0]
    42be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42c0:	331e      	adds	r3, #30
    42c2:	2200      	movs	r2, #0
    42c4:	701a      	strb	r2, [r3, #0]
    42c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42c8:	331f      	adds	r3, #31
    42ca:	2200      	movs	r2, #0
    42cc:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    42ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42d0:	3315      	adds	r3, #21
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	021b      	lsls	r3, r3, #8
    42d6:	b21a      	sxth	r2, r3
    42d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    42da:	3314      	adds	r3, #20
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	b21b      	sxth	r3, r3
    42e0:	4313      	orrs	r3, r2
    42e2:	b21b      	sxth	r3, r3
    42e4:	b29b      	uxth	r3, r3
    42e6:	041b      	lsls	r3, r3, #16
    42e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    42ea:	321b      	adds	r2, #27
    42ec:	7812      	ldrb	r2, [r2, #0]
    42ee:	0212      	lsls	r2, r2, #8
    42f0:	b211      	sxth	r1, r2
    42f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    42f4:	321a      	adds	r2, #26
    42f6:	7812      	ldrb	r2, [r2, #0]
    42f8:	b212      	sxth	r2, r2
    42fa:	430a      	orrs	r2, r1
    42fc:	b212      	sxth	r2, r2
    42fe:	b292      	uxth	r2, r2
    4300:	4313      	orrs	r3, r2
    4302:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4306:	331a      	adds	r3, #26
    4308:	2200      	movs	r2, #0
    430a:	701a      	strb	r2, [r3, #0]
    430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    430e:	331b      	adds	r3, #27
    4310:	2200      	movs	r2, #0
    4312:	701a      	strb	r2, [r3, #0]
    4314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4316:	3314      	adds	r3, #20
    4318:	2200      	movs	r2, #0
    431a:	701a      	strb	r2, [r3, #0]
    431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    431e:	3315      	adds	r3, #21
    4320:	2200      	movs	r2, #0
    4322:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    4324:	231c      	movs	r3, #28
    4326:	18fb      	adds	r3, r7, r3
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	2201      	movs	r2, #1
    432c:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4330:	2b00      	cmp	r3, #0
    4332:	d04b      	beq.n	43cc <f_open+0x280>
				dw = dj.fs->winsect;
    4334:	231c      	movs	r3, #28
    4336:	18fb      	adds	r3, r7, r3
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    433c:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
    433e:	231c      	movs	r3, #28
    4340:	18fb      	adds	r3, r7, r3
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	2247      	movs	r2, #71	; 0x47
    4346:	18bc      	adds	r4, r7, r2
    4348:	6bba      	ldr	r2, [r7, #56]	; 0x38
    434a:	0011      	movs	r1, r2
    434c:	0018      	movs	r0, r3
    434e:	4b59      	ldr	r3, [pc, #356]	; (44b4 <f_open+0x368>)
    4350:	447b      	add	r3, pc
    4352:	4798      	blx	r3
    4354:	0003      	movs	r3, r0
    4356:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    4358:	2347      	movs	r3, #71	; 0x47
    435a:	18fb      	adds	r3, r7, r3
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	2b00      	cmp	r3, #0
    4360:	d134      	bne.n	43cc <f_open+0x280>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4362:	231c      	movs	r3, #28
    4364:	18fb      	adds	r3, r7, r3
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	6bba      	ldr	r2, [r7, #56]	; 0x38
    436a:	3a01      	subs	r2, #1
    436c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    436e:	231c      	movs	r3, #28
    4370:	18fb      	adds	r3, r7, r3
    4372:	681b      	ldr	r3, [r3, #0]
    4374:	2247      	movs	r2, #71	; 0x47
    4376:	18bc      	adds	r4, r7, r2
    4378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    437a:	0011      	movs	r1, r2
    437c:	0018      	movs	r0, r3
    437e:	4b4e      	ldr	r3, [pc, #312]	; (44b8 <f_open+0x36c>)
    4380:	447b      	add	r3, pc
    4382:	4798      	blx	r3
    4384:	0003      	movs	r3, r0
    4386:	7023      	strb	r3, [r4, #0]
    4388:	e020      	b.n	43cc <f_open+0x280>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    438a:	2347      	movs	r3, #71	; 0x47
    438c:	18fb      	adds	r3, r7, r3
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	2b00      	cmp	r3, #0
    4392:	d11b      	bne.n	43cc <f_open+0x280>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4396:	330b      	adds	r3, #11
    4398:	781b      	ldrb	r3, [r3, #0]
    439a:	001a      	movs	r2, r3
    439c:	2310      	movs	r3, #16
    439e:	4013      	ands	r3, r2
    43a0:	d004      	beq.n	43ac <f_open+0x260>
				res = FR_NO_FILE;
    43a2:	2347      	movs	r3, #71	; 0x47
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	2204      	movs	r2, #4
    43a8:	701a      	strb	r2, [r3, #0]
    43aa:	e00f      	b.n	43cc <f_open+0x280>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    43ac:	1dfb      	adds	r3, r7, #7
    43ae:	781b      	ldrb	r3, [r3, #0]
    43b0:	2202      	movs	r2, #2
    43b2:	4013      	ands	r3, r2
    43b4:	d00a      	beq.n	43cc <f_open+0x280>
    43b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43b8:	330b      	adds	r3, #11
    43ba:	781b      	ldrb	r3, [r3, #0]
    43bc:	001a      	movs	r2, r3
    43be:	2301      	movs	r3, #1
    43c0:	4013      	ands	r3, r2
    43c2:	d003      	beq.n	43cc <f_open+0x280>
					res = FR_DENIED;
    43c4:	2347      	movs	r3, #71	; 0x47
    43c6:	18fb      	adds	r3, r7, r3
    43c8:	2207      	movs	r2, #7
    43ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    43cc:	2347      	movs	r3, #71	; 0x47
    43ce:	18fb      	adds	r3, r7, r3
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d113      	bne.n	43fe <f_open+0x2b2>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    43d6:	1dfb      	adds	r3, r7, #7
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	2208      	movs	r2, #8
    43dc:	4013      	ands	r3, r2
    43de:	d005      	beq.n	43ec <f_open+0x2a0>
			mode |= FA__WRITTEN;
    43e0:	1dfb      	adds	r3, r7, #7
    43e2:	1dfa      	adds	r2, r7, #7
    43e4:	7812      	ldrb	r2, [r2, #0]
    43e6:	2120      	movs	r1, #32
    43e8:	430a      	orrs	r2, r1
    43ea:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    43ec:	231c      	movs	r3, #28
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    43f8:	68fb      	ldr	r3, [r7, #12]
    43fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    43fc:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    43fe:	2347      	movs	r3, #71	; 0x47
    4400:	18fb      	adds	r3, r7, r3
    4402:	781b      	ldrb	r3, [r3, #0]
    4404:	2b00      	cmp	r3, #0
    4406:	d144      	bne.n	4492 <f_open+0x346>
		fp->flag = mode;					/* File access mode */
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	1dfa      	adds	r2, r7, #7
    440c:	7812      	ldrb	r2, [r2, #0]
    440e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4412:	3315      	adds	r3, #21
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	021b      	lsls	r3, r3, #8
    4418:	b21a      	sxth	r2, r3
    441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    441c:	3314      	adds	r3, #20
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	b21b      	sxth	r3, r3
    4422:	4313      	orrs	r3, r2
    4424:	b21b      	sxth	r3, r3
    4426:	b29b      	uxth	r3, r3
    4428:	041b      	lsls	r3, r3, #16
    442a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    442c:	321b      	adds	r2, #27
    442e:	7812      	ldrb	r2, [r2, #0]
    4430:	0212      	lsls	r2, r2, #8
    4432:	b211      	sxth	r1, r2
    4434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4436:	321a      	adds	r2, #26
    4438:	7812      	ldrb	r2, [r2, #0]
    443a:	b212      	sxth	r2, r2
    443c:	430a      	orrs	r2, r1
    443e:	b212      	sxth	r2, r2
    4440:	b292      	uxth	r2, r2
    4442:	431a      	orrs	r2, r3
    4444:	68fb      	ldr	r3, [r7, #12]
    4446:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    444a:	331f      	adds	r3, #31
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	061a      	lsls	r2, r3, #24
    4450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4452:	331e      	adds	r3, #30
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	041b      	lsls	r3, r3, #16
    4458:	4313      	orrs	r3, r2
    445a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    445c:	321d      	adds	r2, #29
    445e:	7812      	ldrb	r2, [r2, #0]
    4460:	0212      	lsls	r2, r2, #8
    4462:	4313      	orrs	r3, r2
    4464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4466:	321c      	adds	r2, #28
    4468:	7812      	ldrb	r2, [r2, #0]
    446a:	431a      	orrs	r2, r3
    446c:	68fb      	ldr	r3, [r7, #12]
    446e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	2200      	movs	r2, #0
    4474:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	2200      	movs	r2, #0
    447a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    447c:	231c      	movs	r3, #28
    447e:	18fb      	adds	r3, r7, r3
    4480:	681a      	ldr	r2, [r3, #0]
    4482:	68fb      	ldr	r3, [r7, #12]
    4484:	601a      	str	r2, [r3, #0]
    4486:	231c      	movs	r3, #28
    4488:	18fb      	adds	r3, r7, r3
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	88da      	ldrh	r2, [r3, #6]
    448e:	68fb      	ldr	r3, [r7, #12]
    4490:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    4492:	2347      	movs	r3, #71	; 0x47
    4494:	18fb      	adds	r3, r7, r3
    4496:	781b      	ldrb	r3, [r3, #0]
}
    4498:	0018      	movs	r0, r3
    449a:	46bd      	mov	sp, r7
    449c:	b012      	add	sp, #72	; 0x48
    449e:	bdb0      	pop	{r4, r5, r7, pc}
    44a0:	0000dc84 	.word	0x0000dc84
    44a4:	fffff8db 	.word	0xfffff8db
    44a8:	fffff68f 	.word	0xfffff68f
    44ac:	fffff163 	.word	0xfffff163
    44b0:	000001e0 	.word	0x000001e0
    44b4:	ffffe91d 	.word	0xffffe91d
    44b8:	ffffe261 	.word	0xffffe261

000044bc <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    44bc:	b5b0      	push	{r4, r5, r7, lr}
    44be:	b08c      	sub	sp, #48	; 0x30
    44c0:	af00      	add	r7, sp, #0
    44c2:	60f8      	str	r0, [r7, #12]
    44c4:	60b9      	str	r1, [r7, #8]
    44c6:	607a      	str	r2, [r7, #4]
    44c8:	603b      	str	r3, [r7, #0]
    44ca:	4ca1      	ldr	r4, [pc, #644]	; (4750 <f_read+0x294>)
    44cc:	447c      	add	r4, pc
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    44ce:	68bb      	ldr	r3, [r7, #8]
    44d0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    44d2:	683b      	ldr	r3, [r7, #0]
    44d4:	2200      	movs	r2, #0
    44d6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    44d8:	68fb      	ldr	r3, [r7, #12]
    44da:	681a      	ldr	r2, [r3, #0]
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	889b      	ldrh	r3, [r3, #4]
    44e0:	211f      	movs	r1, #31
    44e2:	187d      	adds	r5, r7, r1
    44e4:	0019      	movs	r1, r3
    44e6:	0010      	movs	r0, r2
    44e8:	4b9a      	ldr	r3, [pc, #616]	; (4754 <f_read+0x298>)
    44ea:	447b      	add	r3, pc
    44ec:	4798      	blx	r3
    44ee:	0003      	movs	r3, r0
    44f0:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    44f2:	231f      	movs	r3, #31
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	781b      	ldrb	r3, [r3, #0]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d003      	beq.n	4504 <f_read+0x48>
    44fc:	231f      	movs	r3, #31
    44fe:	18fb      	adds	r3, r7, r3
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	e121      	b.n	4748 <f_read+0x28c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4504:	68fb      	ldr	r3, [r7, #12]
    4506:	799b      	ldrb	r3, [r3, #6]
    4508:	b25b      	sxtb	r3, r3
    450a:	2b00      	cmp	r3, #0
    450c:	da01      	bge.n	4512 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    450e:	2302      	movs	r3, #2
    4510:	e11a      	b.n	4748 <f_read+0x28c>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4512:	68fb      	ldr	r3, [r7, #12]
    4514:	799b      	ldrb	r3, [r3, #6]
    4516:	001a      	movs	r2, r3
    4518:	2301      	movs	r3, #1
    451a:	4013      	ands	r3, r2
    451c:	d101      	bne.n	4522 <f_read+0x66>
		LEAVE_FF(fp->fs, FR_DENIED);
    451e:	2307      	movs	r3, #7
    4520:	e112      	b.n	4748 <f_read+0x28c>
	remain = fp->fsize - fp->fptr;
    4522:	68fb      	ldr	r3, [r7, #12]
    4524:	68da      	ldr	r2, [r3, #12]
    4526:	68fb      	ldr	r3, [r7, #12]
    4528:	689b      	ldr	r3, [r3, #8]
    452a:	1ad3      	subs	r3, r2, r3
    452c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    452e:	687a      	ldr	r2, [r7, #4]
    4530:	69bb      	ldr	r3, [r7, #24]
    4532:	429a      	cmp	r2, r3
    4534:	d800      	bhi.n	4538 <f_read+0x7c>
    4536:	e102      	b.n	473e <f_read+0x282>
    4538:	69bb      	ldr	r3, [r7, #24]
    453a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    453c:	e0ff      	b.n	473e <f_read+0x282>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	689b      	ldr	r3, [r3, #8]
    4542:	05db      	lsls	r3, r3, #23
    4544:	0ddb      	lsrs	r3, r3, #23
    4546:	d000      	beq.n	454a <f_read+0x8e>
    4548:	e0b4      	b.n	46b4 <f_read+0x1f8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    454a:	68fb      	ldr	r3, [r7, #12]
    454c:	689b      	ldr	r3, [r3, #8]
    454e:	0a5b      	lsrs	r3, r3, #9
    4550:	b2da      	uxtb	r2, r3
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	789b      	ldrb	r3, [r3, #2]
    4558:	3b01      	subs	r3, #1
    455a:	b2d9      	uxtb	r1, r3
    455c:	2317      	movs	r3, #23
    455e:	18fb      	adds	r3, r7, r3
    4560:	400a      	ands	r2, r1
    4562:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    4564:	2317      	movs	r3, #23
    4566:	18fb      	adds	r3, r7, r3
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	2b00      	cmp	r3, #0
    456c:	d12f      	bne.n	45ce <f_read+0x112>
				if (fp->fptr == 0) {			/* On the top of the file? */
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	689b      	ldr	r3, [r3, #8]
    4572:	2b00      	cmp	r3, #0
    4574:	d103      	bne.n	457e <f_read+0xc2>
					clst = fp->sclust;			/* Follow from the origin */
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	691b      	ldr	r3, [r3, #16]
    457a:	62fb      	str	r3, [r7, #44]	; 0x2c
    457c:	e00a      	b.n	4594 <f_read+0xd8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	681a      	ldr	r2, [r3, #0]
    4582:	68fb      	ldr	r3, [r7, #12]
    4584:	695b      	ldr	r3, [r3, #20]
    4586:	0019      	movs	r1, r3
    4588:	0010      	movs	r0, r2
    458a:	4b73      	ldr	r3, [pc, #460]	; (4758 <f_read+0x29c>)
    458c:	447b      	add	r3, pc
    458e:	4798      	blx	r3
    4590:	0003      	movs	r3, r0
    4592:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4596:	2b01      	cmp	r3, #1
    4598:	d809      	bhi.n	45ae <f_read+0xf2>
    459a:	68fb      	ldr	r3, [r7, #12]
    459c:	799b      	ldrb	r3, [r3, #6]
    459e:	2280      	movs	r2, #128	; 0x80
    45a0:	4252      	negs	r2, r2
    45a2:	4313      	orrs	r3, r2
    45a4:	b2da      	uxtb	r2, r3
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	719a      	strb	r2, [r3, #6]
    45aa:	2302      	movs	r3, #2
    45ac:	e0cc      	b.n	4748 <f_read+0x28c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    45ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45b0:	3301      	adds	r3, #1
    45b2:	d109      	bne.n	45c8 <f_read+0x10c>
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	799b      	ldrb	r3, [r3, #6]
    45b8:	2280      	movs	r2, #128	; 0x80
    45ba:	4252      	negs	r2, r2
    45bc:	4313      	orrs	r3, r2
    45be:	b2da      	uxtb	r2, r3
    45c0:	68fb      	ldr	r3, [r7, #12]
    45c2:	719a      	strb	r2, [r3, #6]
    45c4:	2301      	movs	r3, #1
    45c6:	e0bf      	b.n	4748 <f_read+0x28c>
				fp->clust = clst;				/* Update current cluster */
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    45cc:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	681a      	ldr	r2, [r3, #0]
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	695b      	ldr	r3, [r3, #20]
    45d6:	0019      	movs	r1, r3
    45d8:	0010      	movs	r0, r2
    45da:	4b60      	ldr	r3, [pc, #384]	; (475c <f_read+0x2a0>)
    45dc:	447b      	add	r3, pc
    45de:	4798      	blx	r3
    45e0:	0003      	movs	r3, r0
    45e2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    45e4:	693b      	ldr	r3, [r7, #16]
    45e6:	2b00      	cmp	r3, #0
    45e8:	d109      	bne.n	45fe <f_read+0x142>
    45ea:	68fb      	ldr	r3, [r7, #12]
    45ec:	799b      	ldrb	r3, [r3, #6]
    45ee:	2280      	movs	r2, #128	; 0x80
    45f0:	4252      	negs	r2, r2
    45f2:	4313      	orrs	r3, r2
    45f4:	b2da      	uxtb	r2, r3
    45f6:	68fb      	ldr	r3, [r7, #12]
    45f8:	719a      	strb	r2, [r3, #6]
    45fa:	2302      	movs	r3, #2
    45fc:	e0a4      	b.n	4748 <f_read+0x28c>
			sect += csect;
    45fe:	2317      	movs	r3, #23
    4600:	18fb      	adds	r3, r7, r3
    4602:	781b      	ldrb	r3, [r3, #0]
    4604:	693a      	ldr	r2, [r7, #16]
    4606:	18d3      	adds	r3, r2, r3
    4608:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	0a5b      	lsrs	r3, r3, #9
    460e:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    4610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4612:	2b00      	cmp	r3, #0
    4614:	d04b      	beq.n	46ae <f_read+0x1f2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4616:	2317      	movs	r3, #23
    4618:	18fb      	adds	r3, r7, r3
    461a:	781a      	ldrb	r2, [r3, #0]
    461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    461e:	18d2      	adds	r2, r2, r3
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	789b      	ldrb	r3, [r3, #2]
    4626:	429a      	cmp	r2, r3
    4628:	d908      	bls.n	463c <f_read+0x180>
					cc = fp->fs->csize - csect;
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	789b      	ldrb	r3, [r3, #2]
    4630:	001a      	movs	r2, r3
    4632:	2317      	movs	r3, #23
    4634:	18fb      	adds	r3, r7, r3
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	1ad3      	subs	r3, r2, r3
    463a:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	7858      	ldrb	r0, [r3, #1]
    4642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4644:	b2db      	uxtb	r3, r3
    4646:	693a      	ldr	r2, [r7, #16]
    4648:	6a39      	ldr	r1, [r7, #32]
    464a:	4d45      	ldr	r5, [pc, #276]	; (4760 <f_read+0x2a4>)
    464c:	5965      	ldr	r5, [r4, r5]
    464e:	47a8      	blx	r5
    4650:	1e03      	subs	r3, r0, #0
    4652:	d009      	beq.n	4668 <f_read+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
    4654:	68fb      	ldr	r3, [r7, #12]
    4656:	799b      	ldrb	r3, [r3, #6]
    4658:	2280      	movs	r2, #128	; 0x80
    465a:	4252      	negs	r2, r2
    465c:	4313      	orrs	r3, r2
    465e:	b2da      	uxtb	r2, r3
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	719a      	strb	r2, [r3, #6]
    4664:	2301      	movs	r3, #1
    4666:	e06f      	b.n	4748 <f_read+0x28c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	791b      	ldrb	r3, [r3, #4]
    466e:	2b00      	cmp	r3, #0
    4670:	d019      	beq.n	46a6 <f_read+0x1ea>
    4672:	68fb      	ldr	r3, [r7, #12]
    4674:	681b      	ldr	r3, [r3, #0]
    4676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4678:	693b      	ldr	r3, [r7, #16]
    467a:	1ad2      	subs	r2, r2, r3
    467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    467e:	429a      	cmp	r2, r3
    4680:	d211      	bcs.n	46a6 <f_read+0x1ea>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	1ad3      	subs	r3, r2, r3
    468c:	025b      	lsls	r3, r3, #9
    468e:	6a3a      	ldr	r2, [r7, #32]
    4690:	18d0      	adds	r0, r2, r3
    4692:	68fb      	ldr	r3, [r7, #12]
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	3330      	adds	r3, #48	; 0x30
    4698:	0019      	movs	r1, r3
    469a:	2380      	movs	r3, #128	; 0x80
    469c:	009b      	lsls	r3, r3, #2
    469e:	001a      	movs	r2, r3
    46a0:	4b30      	ldr	r3, [pc, #192]	; (4764 <f_read+0x2a8>)
    46a2:	447b      	add	r3, pc
    46a4:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	025b      	lsls	r3, r3, #9
    46aa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    46ac:	e033      	b.n	4716 <f_read+0x25a>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    46ae:	68fb      	ldr	r3, [r7, #12]
    46b0:	693a      	ldr	r2, [r7, #16]
    46b2:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    46b4:	68fb      	ldr	r3, [r7, #12]
    46b6:	689b      	ldr	r3, [r3, #8]
    46b8:	05db      	lsls	r3, r3, #23
    46ba:	0ddb      	lsrs	r3, r3, #23
    46bc:	2280      	movs	r2, #128	; 0x80
    46be:	0092      	lsls	r2, r2, #2
    46c0:	1ad3      	subs	r3, r2, r3
    46c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    46c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	429a      	cmp	r2, r3
    46ca:	d901      	bls.n	46d0 <f_read+0x214>
    46cc:	687b      	ldr	r3, [r7, #4]
    46ce:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	681a      	ldr	r2, [r3, #0]
    46d4:	68fb      	ldr	r3, [r7, #12]
    46d6:	699b      	ldr	r3, [r3, #24]
    46d8:	0019      	movs	r1, r3
    46da:	0010      	movs	r0, r2
    46dc:	4b22      	ldr	r3, [pc, #136]	; (4768 <f_read+0x2ac>)
    46de:	447b      	add	r3, pc
    46e0:	4798      	blx	r3
    46e2:	1e03      	subs	r3, r0, #0
    46e4:	d009      	beq.n	46fa <f_read+0x23e>
			ABORT(fp->fs, FR_DISK_ERR);
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	799b      	ldrb	r3, [r3, #6]
    46ea:	2280      	movs	r2, #128	; 0x80
    46ec:	4252      	negs	r2, r2
    46ee:	4313      	orrs	r3, r2
    46f0:	b2da      	uxtb	r2, r3
    46f2:	68fb      	ldr	r3, [r7, #12]
    46f4:	719a      	strb	r2, [r3, #6]
    46f6:	2301      	movs	r3, #1
    46f8:	e026      	b.n	4748 <f_read+0x28c>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	681a      	ldr	r2, [r3, #0]
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	689b      	ldr	r3, [r3, #8]
    4702:	05db      	lsls	r3, r3, #23
    4704:	0ddb      	lsrs	r3, r3, #23
    4706:	3330      	adds	r3, #48	; 0x30
    4708:	18d1      	adds	r1, r2, r3
    470a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    470c:	6a3b      	ldr	r3, [r7, #32]
    470e:	0018      	movs	r0, r3
    4710:	4b16      	ldr	r3, [pc, #88]	; (476c <f_read+0x2b0>)
    4712:	447b      	add	r3, pc
    4714:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    4716:	6a3a      	ldr	r2, [r7, #32]
    4718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    471a:	18d3      	adds	r3, r2, r3
    471c:	623b      	str	r3, [r7, #32]
    471e:	68fb      	ldr	r3, [r7, #12]
    4720:	689a      	ldr	r2, [r3, #8]
    4722:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4724:	18d2      	adds	r2, r2, r3
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	609a      	str	r2, [r3, #8]
    472a:	683b      	ldr	r3, [r7, #0]
    472c:	681a      	ldr	r2, [r3, #0]
    472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4730:	18d2      	adds	r2, r2, r3
    4732:	683b      	ldr	r3, [r7, #0]
    4734:	601a      	str	r2, [r3, #0]
    4736:	687a      	ldr	r2, [r7, #4]
    4738:	6abb      	ldr	r3, [r7, #40]	; 0x28
    473a:	1ad3      	subs	r3, r2, r3
    473c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	2b00      	cmp	r3, #0
    4742:	d000      	beq.n	4746 <f_read+0x28a>
    4744:	e6fb      	b.n	453e <f_read+0x82>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    4746:	2300      	movs	r3, #0
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	b00c      	add	sp, #48	; 0x30
    474e:	bdb0      	pop	{r4, r5, r7, pc}
    4750:	0000d914 	.word	0x0000d914
    4754:	fffffba3 	.word	0xfffffba3
    4758:	ffffe311 	.word	0xffffe311
    475c:	ffffe289 	.word	0xffffe289
    4760:	000002c0 	.word	0x000002c0
    4764:	ffffde5b 	.word	0xffffde5b
    4768:	ffffdf03 	.word	0xffffdf03
    476c:	ffffddeb 	.word	0xffffddeb

00004770 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    4770:	b590      	push	{r4, r7, lr}
    4772:	b08f      	sub	sp, #60	; 0x3c
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
    4778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    477a:	2337      	movs	r3, #55	; 0x37
    477c:	18fc      	adds	r4, r7, r3
    477e:	2318      	movs	r3, #24
    4780:	18f9      	adds	r1, r7, r3
    4782:	1d3b      	adds	r3, r7, #4
    4784:	2200      	movs	r2, #0
    4786:	0018      	movs	r0, r3
    4788:	4b1c      	ldr	r3, [pc, #112]	; (47fc <f_stat+0x8c>)
    478a:	447b      	add	r3, pc
    478c:	4798      	blx	r3
    478e:	0003      	movs	r3, r0
    4790:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    4792:	2337      	movs	r3, #55	; 0x37
    4794:	18fb      	adds	r3, r7, r3
    4796:	781b      	ldrb	r3, [r3, #0]
    4798:	2b00      	cmp	r3, #0
    479a:	d127      	bne.n	47ec <f_stat+0x7c>
		INIT_BUF(dj);
    479c:	2318      	movs	r3, #24
    479e:	18fb      	adds	r3, r7, r3
    47a0:	220c      	movs	r2, #12
    47a2:	18ba      	adds	r2, r7, r2
    47a4:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
    47a6:	687a      	ldr	r2, [r7, #4]
    47a8:	2337      	movs	r3, #55	; 0x37
    47aa:	18fc      	adds	r4, r7, r3
    47ac:	2318      	movs	r3, #24
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	0011      	movs	r1, r2
    47b2:	0018      	movs	r0, r3
    47b4:	4b12      	ldr	r3, [pc, #72]	; (4800 <f_stat+0x90>)
    47b6:	447b      	add	r3, pc
    47b8:	4798      	blx	r3
    47ba:	0003      	movs	r3, r0
    47bc:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {				/* Follow completed */
    47be:	2337      	movs	r3, #55	; 0x37
    47c0:	18fb      	adds	r3, r7, r3
    47c2:	781b      	ldrb	r3, [r3, #0]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d111      	bne.n	47ec <f_stat+0x7c>
			if (dj.dir)		/* Found an object */
    47c8:	2318      	movs	r3, #24
    47ca:	18fb      	adds	r3, r7, r3
    47cc:	695b      	ldr	r3, [r3, #20]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d008      	beq.n	47e4 <f_stat+0x74>
				get_fileinfo(&dj, fno);
    47d2:	683a      	ldr	r2, [r7, #0]
    47d4:	2318      	movs	r3, #24
    47d6:	18fb      	adds	r3, r7, r3
    47d8:	0011      	movs	r1, r2
    47da:	0018      	movs	r0, r3
    47dc:	4b09      	ldr	r3, [pc, #36]	; (4804 <f_stat+0x94>)
    47de:	447b      	add	r3, pc
    47e0:	4798      	blx	r3
    47e2:	e003      	b.n	47ec <f_stat+0x7c>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    47e4:	2337      	movs	r3, #55	; 0x37
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	2206      	movs	r2, #6
    47ea:	701a      	strb	r2, [r3, #0]
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    47ec:	2337      	movs	r3, #55	; 0x37
    47ee:	18fb      	adds	r3, r7, r3
    47f0:	781b      	ldrb	r3, [r3, #0]
}
    47f2:	0018      	movs	r0, r3
    47f4:	46bd      	mov	sp, r7
    47f6:	b00f      	add	sp, #60	; 0x3c
    47f8:	bd90      	pop	{r4, r7, pc}
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	fffff2db 	.word	0xfffff2db
    4800:	fffff08f 	.word	0xfffff08f
    4804:	ffffef27 	.word	0xffffef27

00004808 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    4808:	b590      	push	{r4, r7, lr}
    480a:	b097      	sub	sp, #92	; 0x5c
    480c:	af00      	add	r7, sp, #0
    480e:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4810:	2357      	movs	r3, #87	; 0x57
    4812:	18fc      	adds	r4, r7, r3
    4814:	2330      	movs	r3, #48	; 0x30
    4816:	18f9      	adds	r1, r7, r3
    4818:	1d3b      	adds	r3, r7, #4
    481a:	2201      	movs	r2, #1
    481c:	0018      	movs	r0, r3
    481e:	4b6e      	ldr	r3, [pc, #440]	; (49d8 <f_unlink+0x1d0>)
    4820:	447b      	add	r3, pc
    4822:	4798      	blx	r3
    4824:	0003      	movs	r3, r0
    4826:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    4828:	2357      	movs	r3, #87	; 0x57
    482a:	18fb      	adds	r3, r7, r3
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d000      	beq.n	4834 <f_unlink+0x2c>
    4832:	e0c9      	b.n	49c8 <f_unlink+0x1c0>
		INIT_BUF(dj);
    4834:	2330      	movs	r3, #48	; 0x30
    4836:	18fb      	adds	r3, r7, r3
    4838:	2208      	movs	r2, #8
    483a:	18ba      	adds	r2, r7, r2
    483c:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);		/* Follow the file path */
    483e:	687a      	ldr	r2, [r7, #4]
    4840:	2357      	movs	r3, #87	; 0x57
    4842:	18fc      	adds	r4, r7, r3
    4844:	2330      	movs	r3, #48	; 0x30
    4846:	18fb      	adds	r3, r7, r3
    4848:	0011      	movs	r1, r2
    484a:	0018      	movs	r0, r3
    484c:	4b63      	ldr	r3, [pc, #396]	; (49dc <f_unlink+0x1d4>)
    484e:	447b      	add	r3, pc
    4850:	4798      	blx	r3
    4852:	0003      	movs	r3, r0
    4854:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    4856:	2357      	movs	r3, #87	; 0x57
    4858:	18fb      	adds	r3, r7, r3
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	2b00      	cmp	r3, #0
    485e:	d000      	beq.n	4862 <f_unlink+0x5a>
    4860:	e0b2      	b.n	49c8 <f_unlink+0x1c0>
			dir = dj.dir;
    4862:	2330      	movs	r3, #48	; 0x30
    4864:	18fb      	adds	r3, r7, r3
    4866:	695b      	ldr	r3, [r3, #20]
    4868:	653b      	str	r3, [r7, #80]	; 0x50
			if (!dir) {
    486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    486c:	2b00      	cmp	r3, #0
    486e:	d104      	bne.n	487a <f_unlink+0x72>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    4870:	2357      	movs	r3, #87	; 0x57
    4872:	18fb      	adds	r3, r7, r3
    4874:	2206      	movs	r2, #6
    4876:	701a      	strb	r2, [r3, #0]
    4878:	e00a      	b.n	4890 <f_unlink+0x88>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    487a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    487c:	330b      	adds	r3, #11
    487e:	781b      	ldrb	r3, [r3, #0]
    4880:	001a      	movs	r2, r3
    4882:	2301      	movs	r3, #1
    4884:	4013      	ands	r3, r2
    4886:	d003      	beq.n	4890 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
    4888:	2357      	movs	r3, #87	; 0x57
    488a:	18fb      	adds	r3, r7, r3
    488c:	2207      	movs	r2, #7
    488e:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    4890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4892:	3315      	adds	r3, #21
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	021b      	lsls	r3, r3, #8
    4898:	b21a      	sxth	r2, r3
    489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    489c:	3314      	adds	r3, #20
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	b21b      	sxth	r3, r3
    48a2:	4313      	orrs	r3, r2
    48a4:	b21b      	sxth	r3, r3
    48a6:	b29b      	uxth	r3, r3
    48a8:	041b      	lsls	r3, r3, #16
    48aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48ac:	321b      	adds	r2, #27
    48ae:	7812      	ldrb	r2, [r2, #0]
    48b0:	0212      	lsls	r2, r2, #8
    48b2:	b211      	sxth	r1, r2
    48b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    48b6:	321a      	adds	r2, #26
    48b8:	7812      	ldrb	r2, [r2, #0]
    48ba:	b212      	sxth	r2, r2
    48bc:	430a      	orrs	r2, r1
    48be:	b212      	sxth	r2, r2
    48c0:	b292      	uxth	r2, r2
    48c2:	4313      	orrs	r3, r2
    48c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    48c6:	2357      	movs	r3, #87	; 0x57
    48c8:	18fb      	adds	r3, r7, r3
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d147      	bne.n	4960 <f_unlink+0x158>
    48d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    48d2:	330b      	adds	r3, #11
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	001a      	movs	r2, r3
    48d8:	2310      	movs	r3, #16
    48da:	4013      	ands	r3, r2
    48dc:	d040      	beq.n	4960 <f_unlink+0x158>
				if (dclst < 2) {
    48de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48e0:	2b01      	cmp	r3, #1
    48e2:	d804      	bhi.n	48ee <f_unlink+0xe6>
					res = FR_INT_ERR;
    48e4:	2357      	movs	r3, #87	; 0x57
    48e6:	18fb      	adds	r3, r7, r3
    48e8:	2202      	movs	r2, #2
    48ea:	701a      	strb	r2, [r3, #0]
    48ec:	e038      	b.n	4960 <f_unlink+0x158>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    48ee:	2330      	movs	r3, #48	; 0x30
    48f0:	18f9      	adds	r1, r7, r3
    48f2:	2314      	movs	r3, #20
    48f4:	18fb      	adds	r3, r7, r3
    48f6:	221c      	movs	r2, #28
    48f8:	0018      	movs	r0, r3
    48fa:	4b39      	ldr	r3, [pc, #228]	; (49e0 <f_unlink+0x1d8>)
    48fc:	447b      	add	r3, pc
    48fe:	4798      	blx	r3
					sdj.sclust = dclst;
    4900:	2314      	movs	r3, #20
    4902:	18fb      	adds	r3, r7, r3
    4904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4906:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    4908:	2357      	movs	r3, #87	; 0x57
    490a:	18fc      	adds	r4, r7, r3
    490c:	2314      	movs	r3, #20
    490e:	18fb      	adds	r3, r7, r3
    4910:	2102      	movs	r1, #2
    4912:	0018      	movs	r0, r3
    4914:	4b33      	ldr	r3, [pc, #204]	; (49e4 <f_unlink+0x1dc>)
    4916:	447b      	add	r3, pc
    4918:	4798      	blx	r3
    491a:	0003      	movs	r3, r0
    491c:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    491e:	2357      	movs	r3, #87	; 0x57
    4920:	18fb      	adds	r3, r7, r3
    4922:	781b      	ldrb	r3, [r3, #0]
    4924:	2b00      	cmp	r3, #0
    4926:	d11b      	bne.n	4960 <f_unlink+0x158>
						res = dir_read(&sdj);
    4928:	2357      	movs	r3, #87	; 0x57
    492a:	18fc      	adds	r4, r7, r3
    492c:	2314      	movs	r3, #20
    492e:	18fb      	adds	r3, r7, r3
    4930:	0018      	movs	r0, r3
    4932:	4b2d      	ldr	r3, [pc, #180]	; (49e8 <f_unlink+0x1e0>)
    4934:	447b      	add	r3, pc
    4936:	4798      	blx	r3
    4938:	0003      	movs	r3, r0
    493a:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    493c:	2357      	movs	r3, #87	; 0x57
    493e:	18fb      	adds	r3, r7, r3
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	2b00      	cmp	r3, #0
    4944:	d103      	bne.n	494e <f_unlink+0x146>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    4946:	2357      	movs	r3, #87	; 0x57
    4948:	18fb      	adds	r3, r7, r3
    494a:	2207      	movs	r2, #7
    494c:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    494e:	2357      	movs	r3, #87	; 0x57
    4950:	18fb      	adds	r3, r7, r3
    4952:	781b      	ldrb	r3, [r3, #0]
    4954:	2b04      	cmp	r3, #4
    4956:	d103      	bne.n	4960 <f_unlink+0x158>
    4958:	2357      	movs	r3, #87	; 0x57
    495a:	18fb      	adds	r3, r7, r3
    495c:	2200      	movs	r2, #0
    495e:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    4960:	2357      	movs	r3, #87	; 0x57
    4962:	18fb      	adds	r3, r7, r3
    4964:	781b      	ldrb	r3, [r3, #0]
    4966:	2b00      	cmp	r3, #0
    4968:	d12e      	bne.n	49c8 <f_unlink+0x1c0>
				res = dir_remove(&dj);		/* Remove the directory entry */
    496a:	2357      	movs	r3, #87	; 0x57
    496c:	18fc      	adds	r4, r7, r3
    496e:	2330      	movs	r3, #48	; 0x30
    4970:	18fb      	adds	r3, r7, r3
    4972:	0018      	movs	r0, r3
    4974:	4b1d      	ldr	r3, [pc, #116]	; (49ec <f_unlink+0x1e4>)
    4976:	447b      	add	r3, pc
    4978:	4798      	blx	r3
    497a:	0003      	movs	r3, r0
    497c:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    497e:	2357      	movs	r3, #87	; 0x57
    4980:	18fb      	adds	r3, r7, r3
    4982:	781b      	ldrb	r3, [r3, #0]
    4984:	2b00      	cmp	r3, #0
    4986:	d11f      	bne.n	49c8 <f_unlink+0x1c0>
					if (dclst)				/* Remove the cluster chain if exist */
    4988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    498a:	2b00      	cmp	r3, #0
    498c:	d00c      	beq.n	49a8 <f_unlink+0x1a0>
						res = remove_chain(dj.fs, dclst);
    498e:	2330      	movs	r3, #48	; 0x30
    4990:	18fb      	adds	r3, r7, r3
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	2257      	movs	r2, #87	; 0x57
    4996:	18bc      	adds	r4, r7, r2
    4998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    499a:	0011      	movs	r1, r2
    499c:	0018      	movs	r0, r3
    499e:	4b14      	ldr	r3, [pc, #80]	; (49f0 <f_unlink+0x1e8>)
    49a0:	447b      	add	r3, pc
    49a2:	4798      	blx	r3
    49a4:	0003      	movs	r3, r0
    49a6:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    49a8:	2357      	movs	r3, #87	; 0x57
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b00      	cmp	r3, #0
    49b0:	d10a      	bne.n	49c8 <f_unlink+0x1c0>
    49b2:	2330      	movs	r3, #48	; 0x30
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	2257      	movs	r2, #87	; 0x57
    49ba:	18bc      	adds	r4, r7, r2
    49bc:	0018      	movs	r0, r3
    49be:	4b0d      	ldr	r3, [pc, #52]	; (49f4 <f_unlink+0x1ec>)
    49c0:	447b      	add	r3, pc
    49c2:	4798      	blx	r3
    49c4:	0003      	movs	r3, r0
    49c6:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    49c8:	2357      	movs	r3, #87	; 0x57
    49ca:	18fb      	adds	r3, r7, r3
    49cc:	781b      	ldrb	r3, [r3, #0]
}
    49ce:	0018      	movs	r0, r3
    49d0:	46bd      	mov	sp, r7
    49d2:	b017      	add	sp, #92	; 0x5c
    49d4:	bd90      	pop	{r4, r7, pc}
    49d6:	46c0      	nop			; (mov r8, r8)
    49d8:	fffff245 	.word	0xfffff245
    49dc:	ffffeff7 	.word	0xffffeff7
    49e0:	ffffdc01 	.word	0xffffdc01
    49e4:	ffffe56f 	.word	0xffffe56f
    49e8:	ffffe965 	.word	0xffffe965
    49ec:	ffffeb03 	.word	0xffffeb03
    49f0:	ffffe2cd 	.word	0xffffe2cd
    49f4:	ffffdcf9 	.word	0xffffdcf9

000049f8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    49f8:	b580      	push	{r7, lr}
    49fa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    49fc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    4a00:	4b02      	ldr	r3, [pc, #8]	; (4a0c <NVIC_SystemReset+0x14>)
    4a02:	4a03      	ldr	r2, [pc, #12]	; (4a10 <NVIC_SystemReset+0x18>)
    4a04:	60da      	str	r2, [r3, #12]
    4a06:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    4a0a:	e7fe      	b.n	4a0a <NVIC_SystemReset+0x12>
    4a0c:	e000ed00 	.word	0xe000ed00
    4a10:	05fa0004 	.word	0x05fa0004

00004a14 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	b082      	sub	sp, #8
    4a18:	af00      	add	r7, sp, #0
    4a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	2200      	movs	r2, #0
    4a20:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	2200      	movs	r2, #0
    4a26:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    4a28:	687b      	ldr	r3, [r7, #4]
    4a2a:	2208      	movs	r2, #8
    4a2c:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	2227      	movs	r2, #39	; 0x27
    4a32:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    4a34:	687b      	ldr	r3, [r7, #4]
    4a36:	2201      	movs	r2, #1
    4a38:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	2201      	movs	r2, #1
    4a3e:	71da      	strb	r2, [r3, #7]
}
    4a40:	46c0      	nop			; (mov r8, r8)
    4a42:	46bd      	mov	sp, r7
    4a44:	b002      	add	sp, #8
    4a46:	bd80      	pop	{r7, pc}

00004a48 <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    4a48:	b580      	push	{r7, lr}
    4a4a:	b082      	sub	sp, #8
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	0002      	movs	r2, r0
    4a50:	1dfb      	adds	r3, r7, #7
    4a52:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    4a54:	1dfb      	adds	r3, r7, #7
    4a56:	781b      	ldrb	r3, [r3, #0]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d108      	bne.n	4a6e <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    4a5c:	4b06      	ldr	r3, [pc, #24]	; (4a78 <bod_enable+0x30>)
    4a5e:	4a06      	ldr	r2, [pc, #24]	; (4a78 <bod_enable+0x30>)
    4a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
    4a62:	2102      	movs	r1, #2
    4a64:	430a      	orrs	r2, r1
    4a66:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    4a68:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4a6a:	2300      	movs	r3, #0
    4a6c:	e000      	b.n	4a70 <bod_enable+0x28>
			return STATUS_ERR_INVALID_ARG;
    4a6e:	2317      	movs	r3, #23
}
    4a70:	0018      	movs	r0, r3
    4a72:	46bd      	mov	sp, r7
    4a74:	b002      	add	sp, #8
    4a76:	bd80      	pop	{r7, pc}
    4a78:	40000800 	.word	0x40000800

00004a7c <system_gclk_chan_get_config_defaults>:
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b082      	sub	sp, #8
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	2200      	movs	r2, #0
    4a88:	701a      	strb	r2, [r3, #0]
}
    4a8a:	46c0      	nop			; (mov r8, r8)
    4a8c:	46bd      	mov	sp, r7
    4a8e:	b002      	add	sp, #8
    4a90:	bd80      	pop	{r7, pc}
	...

00004a94 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a94:	b580      	push	{r7, lr}
    4a96:	b084      	sub	sp, #16
    4a98:	af00      	add	r7, sp, #0
    4a9a:	0002      	movs	r2, r0
    4a9c:	1dfb      	adds	r3, r7, #7
    4a9e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4aa0:	230f      	movs	r3, #15
    4aa2:	18fb      	adds	r3, r7, r3
    4aa4:	1dfa      	adds	r2, r7, #7
    4aa6:	7812      	ldrb	r2, [r2, #0]
    4aa8:	09d2      	lsrs	r2, r2, #7
    4aaa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4aac:	230e      	movs	r3, #14
    4aae:	18fb      	adds	r3, r7, r3
    4ab0:	1dfa      	adds	r2, r7, #7
    4ab2:	7812      	ldrb	r2, [r2, #0]
    4ab4:	0952      	lsrs	r2, r2, #5
    4ab6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4ab8:	4b0d      	ldr	r3, [pc, #52]	; (4af0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4aba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4abc:	230f      	movs	r3, #15
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	781b      	ldrb	r3, [r3, #0]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d10f      	bne.n	4ae6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4ac6:	230f      	movs	r3, #15
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	781b      	ldrb	r3, [r3, #0]
    4acc:	009b      	lsls	r3, r3, #2
    4ace:	2210      	movs	r2, #16
    4ad0:	4694      	mov	ip, r2
    4ad2:	44bc      	add	ip, r7
    4ad4:	4463      	add	r3, ip
    4ad6:	3b08      	subs	r3, #8
    4ad8:	681a      	ldr	r2, [r3, #0]
    4ada:	230e      	movs	r3, #14
    4adc:	18fb      	adds	r3, r7, r3
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	01db      	lsls	r3, r3, #7
    4ae2:	18d3      	adds	r3, r2, r3
    4ae4:	e000      	b.n	4ae8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4ae6:	2300      	movs	r3, #0
	}
}
    4ae8:	0018      	movs	r0, r3
    4aea:	46bd      	mov	sp, r7
    4aec:	b004      	add	sp, #16
    4aee:	bd80      	pop	{r7, pc}
    4af0:	41004400 	.word	0x41004400

00004af4 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    4af4:	b580      	push	{r7, lr}
    4af6:	b082      	sub	sp, #8
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    4afc:	687b      	ldr	r3, [r7, #4]
    4afe:	2200      	movs	r2, #0
    4b00:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	2201      	movs	r2, #1
    4b06:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4b08:	4b08      	ldr	r3, [pc, #32]	; (4b2c <nvm_get_config_defaults+0x38>)
    4b0a:	685b      	ldr	r3, [r3, #4]
    4b0c:	06db      	lsls	r3, r3, #27
    4b0e:	0f1b      	lsrs	r3, r3, #28
    4b10:	b2db      	uxtb	r3, r3
    4b12:	001a      	movs	r2, r3
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	2200      	movs	r2, #0
    4b1c:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	2200      	movs	r2, #0
    4b22:	711a      	strb	r2, [r3, #4]
}
    4b24:	46c0      	nop			; (mov r8, r8)
    4b26:	46bd      	mov	sp, r7
    4b28:	b002      	add	sp, #8
    4b2a:	bd80      	pop	{r7, pc}
    4b2c:	41004000 	.word	0x41004000

00004b30 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b082      	sub	sp, #8
    4b34:	af00      	add	r7, sp, #0
    4b36:	0002      	movs	r2, r0
    4b38:	1dfb      	adds	r3, r7, #7
    4b3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4b3c:	1dfb      	adds	r3, r7, #7
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	0018      	movs	r0, r3
    4b42:	4b04      	ldr	r3, [pc, #16]	; (4b54 <port_get_group_from_gpio_pin+0x24>)
    4b44:	447b      	add	r3, pc
    4b46:	4798      	blx	r3
    4b48:	0003      	movs	r3, r0
}
    4b4a:	0018      	movs	r0, r3
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b002      	add	sp, #8
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	ffffff4d 	.word	0xffffff4d

00004b58 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4b58:	b580      	push	{r7, lr}
    4b5a:	b082      	sub	sp, #8
    4b5c:	af00      	add	r7, sp, #0
    4b5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4b60:	687b      	ldr	r3, [r7, #4]
    4b62:	2200      	movs	r2, #0
    4b64:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4b66:	687b      	ldr	r3, [r7, #4]
    4b68:	2201      	movs	r2, #1
    4b6a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	2200      	movs	r2, #0
    4b70:	709a      	strb	r2, [r3, #2]
}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	46bd      	mov	sp, r7
    4b76:	b002      	add	sp, #8
    4b78:	bd80      	pop	{r7, pc}
	...

00004b7c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b084      	sub	sp, #16
    4b80:	af00      	add	r7, sp, #0
    4b82:	0002      	movs	r2, r0
    4b84:	1dfb      	adds	r3, r7, #7
    4b86:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4b88:	1dfb      	adds	r3, r7, #7
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	0018      	movs	r0, r3
    4b8e:	4b0c      	ldr	r3, [pc, #48]	; (4bc0 <port_pin_get_input_level+0x44>)
    4b90:	447b      	add	r3, pc
    4b92:	4798      	blx	r3
    4b94:	0003      	movs	r3, r0
    4b96:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b98:	1dfb      	adds	r3, r7, #7
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	221f      	movs	r2, #31
    4b9e:	4013      	ands	r3, r2
    4ba0:	2201      	movs	r2, #1
    4ba2:	409a      	lsls	r2, r3
    4ba4:	0013      	movs	r3, r2
    4ba6:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	6a1b      	ldr	r3, [r3, #32]
    4bac:	68ba      	ldr	r2, [r7, #8]
    4bae:	4013      	ands	r3, r2
    4bb0:	1e5a      	subs	r2, r3, #1
    4bb2:	4193      	sbcs	r3, r2
    4bb4:	b2db      	uxtb	r3, r3
}
    4bb6:	0018      	movs	r0, r3
    4bb8:	46bd      	mov	sp, r7
    4bba:	b004      	add	sp, #16
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	ffffff9d 	.word	0xffffff9d

00004bc4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b084      	sub	sp, #16
    4bc8:	af00      	add	r7, sp, #0
    4bca:	0002      	movs	r2, r0
    4bcc:	1dfb      	adds	r3, r7, #7
    4bce:	701a      	strb	r2, [r3, #0]
    4bd0:	1dbb      	adds	r3, r7, #6
    4bd2:	1c0a      	adds	r2, r1, #0
    4bd4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4bd6:	1dfb      	adds	r3, r7, #7
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	0018      	movs	r0, r3
    4bdc:	4b0d      	ldr	r3, [pc, #52]	; (4c14 <port_pin_set_output_level+0x50>)
    4bde:	447b      	add	r3, pc
    4be0:	4798      	blx	r3
    4be2:	0003      	movs	r3, r0
    4be4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4be6:	1dfb      	adds	r3, r7, #7
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	221f      	movs	r2, #31
    4bec:	4013      	ands	r3, r2
    4bee:	2201      	movs	r2, #1
    4bf0:	409a      	lsls	r2, r3
    4bf2:	0013      	movs	r3, r2
    4bf4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4bf6:	1dbb      	adds	r3, r7, #6
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d003      	beq.n	4c06 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    4bfe:	68fb      	ldr	r3, [r7, #12]
    4c00:	68ba      	ldr	r2, [r7, #8]
    4c02:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4c04:	e002      	b.n	4c0c <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	68ba      	ldr	r2, [r7, #8]
    4c0a:	615a      	str	r2, [r3, #20]
}
    4c0c:	46c0      	nop			; (mov r8, r8)
    4c0e:	46bd      	mov	sp, r7
    4c10:	b004      	add	sp, #16
    4c12:	bd80      	pop	{r7, pc}
    4c14:	ffffff4f 	.word	0xffffff4f

00004c18 <system_interrupt_enable_global>:
{
    4c18:	b580      	push	{r7, lr}
    4c1a:	af00      	add	r7, sp, #0
    4c1c:	4a05      	ldr	r2, [pc, #20]	; (4c34 <system_interrupt_enable_global+0x1c>)
    4c1e:	447a      	add	r2, pc
	cpu_irq_enable();
    4c20:	4b05      	ldr	r3, [pc, #20]	; (4c38 <system_interrupt_enable_global+0x20>)
    4c22:	58d3      	ldr	r3, [r2, r3]
    4c24:	2201      	movs	r2, #1
    4c26:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4c28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4c2c:	b662      	cpsie	i
}
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	46bd      	mov	sp, r7
    4c32:	bd80      	pop	{r7, pc}
    4c34:	0000d1c2 	.word	0x0000d1c2
    4c38:	000000ec 	.word	0x000000ec

00004c3c <system_interrupt_disable_global>:
{
    4c3c:	b580      	push	{r7, lr}
    4c3e:	af00      	add	r7, sp, #0
    4c40:	4a05      	ldr	r2, [pc, #20]	; (4c58 <system_interrupt_disable_global+0x1c>)
    4c42:	447a      	add	r2, pc
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4c44:	b672      	cpsid	i
    4c46:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4c4a:	4b04      	ldr	r3, [pc, #16]	; (4c5c <system_interrupt_disable_global+0x20>)
    4c4c:	58d3      	ldr	r3, [r2, r3]
    4c4e:	2200      	movs	r2, #0
    4c50:	701a      	strb	r2, [r3, #0]
}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	46bd      	mov	sp, r7
    4c56:	bd80      	pop	{r7, pc}
    4c58:	0000d19e 	.word	0x0000d19e
    4c5c:	000000ec 	.word	0x000000ec

00004c60 <system_interrupt_enable>:
{
    4c60:	b580      	push	{r7, lr}
    4c62:	b082      	sub	sp, #8
    4c64:	af00      	add	r7, sp, #0
    4c66:	0002      	movs	r2, r0
    4c68:	1dfb      	adds	r3, r7, #7
    4c6a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c6c:	4b06      	ldr	r3, [pc, #24]	; (4c88 <system_interrupt_enable+0x28>)
    4c6e:	1dfa      	adds	r2, r7, #7
    4c70:	7812      	ldrb	r2, [r2, #0]
    4c72:	0011      	movs	r1, r2
    4c74:	221f      	movs	r2, #31
    4c76:	400a      	ands	r2, r1
    4c78:	2101      	movs	r1, #1
    4c7a:	4091      	lsls	r1, r2
    4c7c:	000a      	movs	r2, r1
    4c7e:	601a      	str	r2, [r3, #0]
}
    4c80:	46c0      	nop			; (mov r8, r8)
    4c82:	46bd      	mov	sp, r7
    4c84:	b002      	add	sp, #8
    4c86:	bd80      	pop	{r7, pc}
    4c88:	e000e100 	.word	0xe000e100

00004c8c <system_interrupt_disable>:
{
    4c8c:	b580      	push	{r7, lr}
    4c8e:	b082      	sub	sp, #8
    4c90:	af00      	add	r7, sp, #0
    4c92:	0002      	movs	r2, r0
    4c94:	1dfb      	adds	r3, r7, #7
    4c96:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c98:	4a07      	ldr	r2, [pc, #28]	; (4cb8 <system_interrupt_disable+0x2c>)
    4c9a:	1dfb      	adds	r3, r7, #7
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	0019      	movs	r1, r3
    4ca0:	231f      	movs	r3, #31
    4ca2:	400b      	ands	r3, r1
    4ca4:	2101      	movs	r1, #1
    4ca6:	4099      	lsls	r1, r3
    4ca8:	000b      	movs	r3, r1
    4caa:	0019      	movs	r1, r3
    4cac:	2380      	movs	r3, #128	; 0x80
    4cae:	50d1      	str	r1, [r2, r3]
}
    4cb0:	46c0      	nop			; (mov r8, r8)
    4cb2:	46bd      	mov	sp, r7
    4cb4:	b002      	add	sp, #8
    4cb6:	bd80      	pop	{r7, pc}
    4cb8:	e000e100 	.word	0xe000e100

00004cbc <rtc_calendar_get_time_defaults>:
{
    4cbc:	b580      	push	{r7, lr}
    4cbe:	b082      	sub	sp, #8
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	6078      	str	r0, [r7, #4]
	time->second = 0;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2200      	movs	r2, #0
    4cc8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	2200      	movs	r2, #0
    4cce:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	2200      	movs	r2, #0
    4cd4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	2200      	movs	r2, #0
    4cda:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	2201      	movs	r2, #1
    4ce0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    4ce2:	687b      	ldr	r3, [r7, #4]
    4ce4:	2201      	movs	r2, #1
    4ce6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	22fa      	movs	r2, #250	; 0xfa
    4cec:	00d2      	lsls	r2, r2, #3
    4cee:	80da      	strh	r2, [r3, #6]
}
    4cf0:	46c0      	nop			; (mov r8, r8)
    4cf2:	46bd      	mov	sp, r7
    4cf4:	b002      	add	sp, #8
    4cf6:	bd80      	pop	{r7, pc}

00004cf8 <rtc_calendar_get_config_defaults>:
{
    4cf8:	b590      	push	{r4, r7, lr}
    4cfa:	b087      	sub	sp, #28
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    4d00:	4c26      	ldr	r4, [pc, #152]	; (4d9c <rtc_calendar_get_config_defaults+0xa4>)
    4d02:	447c      	add	r4, pc
	rtc_calendar_get_time_defaults(&time);
    4d04:	230c      	movs	r3, #12
    4d06:	18fb      	adds	r3, r7, r3
    4d08:	0018      	movs	r0, r3
    4d0a:	4b25      	ldr	r3, [pc, #148]	; (4da0 <rtc_calendar_get_config_defaults+0xa8>)
    4d0c:	447b      	add	r3, pc
    4d0e:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	22a0      	movs	r2, #160	; 0xa0
    4d14:	0112      	lsls	r2, r2, #4
    4d16:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	2200      	movs	r2, #0
    4d1c:	709a      	strb	r2, [r3, #2]
	config->continuously_update = false;
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	2200      	movs	r2, #0
    4d22:	70da      	strb	r2, [r3, #3]
	config->clock_24h           = false;
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	2200      	movs	r2, #0
    4d28:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	22fa      	movs	r2, #250	; 0xfa
    4d2e:	00d2      	lsls	r2, r2, #3
    4d30:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    4d32:	2317      	movs	r3, #23
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	2200      	movs	r2, #0
    4d38:	701a      	strb	r2, [r3, #0]
    4d3a:	e026      	b.n	4d8a <rtc_calendar_get_config_defaults+0x92>
		config->alarm[i].time = time;
    4d3c:	2317      	movs	r3, #23
    4d3e:	18fb      	adds	r3, r7, r3
    4d40:	781a      	ldrb	r2, [r3, #0]
    4d42:	6879      	ldr	r1, [r7, #4]
    4d44:	2008      	movs	r0, #8
    4d46:	0013      	movs	r3, r2
    4d48:	009b      	lsls	r3, r3, #2
    4d4a:	189b      	adds	r3, r3, r2
    4d4c:	005b      	lsls	r3, r3, #1
    4d4e:	18cb      	adds	r3, r1, r3
    4d50:	181a      	adds	r2, r3, r0
    4d52:	230c      	movs	r3, #12
    4d54:	18fb      	adds	r3, r7, r3
    4d56:	0010      	movs	r0, r2
    4d58:	0019      	movs	r1, r3
    4d5a:	2308      	movs	r3, #8
    4d5c:	001a      	movs	r2, r3
    4d5e:	4b11      	ldr	r3, [pc, #68]	; (4da4 <rtc_calendar_get_config_defaults+0xac>)
    4d60:	58e3      	ldr	r3, [r4, r3]
    4d62:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    4d64:	2317      	movs	r3, #23
    4d66:	18fb      	adds	r3, r7, r3
    4d68:	781a      	ldrb	r2, [r3, #0]
    4d6a:	6879      	ldr	r1, [r7, #4]
    4d6c:	0013      	movs	r3, r2
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	189b      	adds	r3, r3, r2
    4d72:	005b      	lsls	r3, r3, #1
    4d74:	18cb      	adds	r3, r1, r3
    4d76:	3310      	adds	r3, #16
    4d78:	2206      	movs	r2, #6
    4d7a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    4d7c:	2317      	movs	r3, #23
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	781a      	ldrb	r2, [r3, #0]
    4d82:	2317      	movs	r3, #23
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	3201      	adds	r2, #1
    4d88:	701a      	strb	r2, [r3, #0]
    4d8a:	2317      	movs	r3, #23
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d0d3      	beq.n	4d3c <rtc_calendar_get_config_defaults+0x44>
}
    4d94:	46c0      	nop			; (mov r8, r8)
    4d96:	46bd      	mov	sp, r7
    4d98:	b007      	add	sp, #28
    4d9a:	bd90      	pop	{r4, r7, pc}
    4d9c:	0000d0de 	.word	0x0000d0de
    4da0:	ffffffad 	.word	0xffffffad
    4da4:	0000008c 	.word	0x0000008c

00004da8 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	0002      	movs	r2, r0
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    4db4:	4b1a      	ldr	r3, [pc, #104]	; (4e20 <system_set_sleepmode+0x78>)
    4db6:	699b      	ldr	r3, [r3, #24]
    4db8:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    4dba:	68fa      	ldr	r2, [r7, #12]
    4dbc:	23f0      	movs	r3, #240	; 0xf0
    4dbe:	011b      	lsls	r3, r3, #4
    4dc0:	4013      	ands	r3, r2
    4dc2:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    4dc4:	68fb      	ldr	r3, [r7, #12]
    4dc6:	0a1b      	lsrs	r3, r3, #8
    4dc8:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	2b02      	cmp	r3, #2
    4dce:	d805      	bhi.n	4ddc <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4dd0:	4a14      	ldr	r2, [pc, #80]	; (4e24 <system_set_sleepmode+0x7c>)
    4dd2:	6853      	ldr	r3, [r2, #4]
    4dd4:	21c0      	movs	r1, #192	; 0xc0
    4dd6:	0089      	lsls	r1, r1, #2
    4dd8:	430b      	orrs	r3, r1
    4dda:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    4ddc:	1dfb      	adds	r3, r7, #7
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	2b00      	cmp	r3, #0
    4de2:	db16      	blt.n	4e12 <system_set_sleepmode+0x6a>
    4de4:	2b02      	cmp	r3, #2
    4de6:	dd02      	ble.n	4dee <system_set_sleepmode+0x46>
    4de8:	2b03      	cmp	r3, #3
    4dea:	d00b      	beq.n	4e04 <system_set_sleepmode+0x5c>
    4dec:	e011      	b.n	4e12 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4dee:	4b0e      	ldr	r3, [pc, #56]	; (4e28 <system_set_sleepmode+0x80>)
    4df0:	4a0d      	ldr	r2, [pc, #52]	; (4e28 <system_set_sleepmode+0x80>)
    4df2:	6912      	ldr	r2, [r2, #16]
    4df4:	2104      	movs	r1, #4
    4df6:	438a      	bics	r2, r1
    4df8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    4dfa:	4a0c      	ldr	r2, [pc, #48]	; (4e2c <system_set_sleepmode+0x84>)
    4dfc:	1dfb      	adds	r3, r7, #7
    4dfe:	781b      	ldrb	r3, [r3, #0]
    4e00:	7053      	strb	r3, [r2, #1]
			break;
    4e02:	e008      	b.n	4e16 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    4e04:	4b08      	ldr	r3, [pc, #32]	; (4e28 <system_set_sleepmode+0x80>)
    4e06:	4a08      	ldr	r2, [pc, #32]	; (4e28 <system_set_sleepmode+0x80>)
    4e08:	6912      	ldr	r2, [r2, #16]
    4e0a:	2104      	movs	r1, #4
    4e0c:	430a      	orrs	r2, r1
    4e0e:	611a      	str	r2, [r3, #16]
			break;
    4e10:	e001      	b.n	4e16 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    4e12:	2317      	movs	r3, #23
    4e14:	e000      	b.n	4e18 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    4e16:	2300      	movs	r3, #0
}
    4e18:	0018      	movs	r0, r3
    4e1a:	46bd      	mov	sp, r7
    4e1c:	b004      	add	sp, #16
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	41002000 	.word	0x41002000
    4e24:	41004000 	.word	0x41004000
    4e28:	e000ed00 	.word	0xe000ed00
    4e2c:	40000400 	.word	0x40000400

00004e30 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    4e30:	b580      	push	{r7, lr}
    4e32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    4e34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4e38:	bf30      	wfi
	__DSB();
	__WFI();
}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	46bd      	mov	sp, r7
    4e3e:	bd80      	pop	{r7, pc}

00004e40 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    4e40:	b580      	push	{r7, lr}
    4e42:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    4e44:	4b02      	ldr	r3, [pc, #8]	; (4e50 <system_reset+0x10>)
    4e46:	447b      	add	r3, pc
    4e48:	4798      	blx	r3
}
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bd80      	pop	{r7, pc}
    4e50:	fffffbaf 	.word	0xfffffbaf

00004e54 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    4e54:	b580      	push	{r7, lr}
    4e56:	b084      	sub	sp, #16
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	681b      	ldr	r3, [r3, #0]
    4e60:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    4e62:	68fb      	ldr	r3, [r7, #12]
    4e64:	69db      	ldr	r3, [r3, #28]
    4e66:	1e5a      	subs	r2, r3, #1
    4e68:	4193      	sbcs	r3, r2
    4e6a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    4e6c:	0018      	movs	r0, r3
    4e6e:	46bd      	mov	sp, r7
    4e70:	b004      	add	sp, #16
    4e72:	bd80      	pop	{r7, pc}

00004e74 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	b084      	sub	sp, #16
    4e78:	af00      	add	r7, sp, #0
    4e7a:	6078      	str	r0, [r7, #4]
    4e7c:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <spi_disable+0x5c>)
    4e7e:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	681b      	ldr	r3, [r3, #0]
    4e84:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	0018      	movs	r0, r3
    4e8c:	4b11      	ldr	r3, [pc, #68]	; (4ed4 <spi_disable+0x60>)
    4e8e:	58d3      	ldr	r3, [r2, r3]
    4e90:	4798      	blx	r3
    4e92:	0003      	movs	r3, r0
    4e94:	0018      	movs	r0, r3
    4e96:	4b10      	ldr	r3, [pc, #64]	; (4ed8 <spi_disable+0x64>)
    4e98:	447b      	add	r3, pc
    4e9a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4e9c:	46c0      	nop			; (mov r8, r8)
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	0018      	movs	r0, r3
    4ea2:	4b0e      	ldr	r3, [pc, #56]	; (4edc <spi_disable+0x68>)
    4ea4:	447b      	add	r3, pc
    4ea6:	4798      	blx	r3
    4ea8:	1e03      	subs	r3, r0, #0
    4eaa:	d1f8      	bne.n	4e9e <spi_disable+0x2a>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4eac:	68fb      	ldr	r3, [r7, #12]
    4eae:	228f      	movs	r2, #143	; 0x8f
    4eb0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	228f      	movs	r2, #143	; 0x8f
    4eb6:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4eb8:	68fb      	ldr	r3, [r7, #12]
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	2202      	movs	r2, #2
    4ebe:	4393      	bics	r3, r2
    4ec0:	001a      	movs	r2, r3
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	601a      	str	r2, [r3, #0]
}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	46bd      	mov	sp, r7
    4eca:	b004      	add	sp, #16
    4ecc:	bd80      	pop	{r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	0000cf62 	.word	0x0000cf62
    4ed4:	000000a8 	.word	0x000000a8
    4ed8:	fffffdf1 	.word	0xfffffdf1
    4edc:	ffffffad 	.word	0xffffffad

00004ee0 <configure_wakeup>:
static enum status_code configure_rtc(void);
static enum status_code configure_nvm(void);
static uint8_t buff[MAX_BUF_SIZE] = {0};
struct rtc_module rtc_instance;

static enum status_code configure_wakeup(void) {
    4ee0:	b5b0      	push	{r4, r5, r7, lr}
    4ee2:	b084      	sub	sp, #16
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	4c2a      	ldr	r4, [pc, #168]	; (4f90 <configure_wakeup+0xb0>)
    4ee8:	447c      	add	r4, pc
	struct extint_chan_conf ext_conf;
	extint_chan_get_config_defaults(&ext_conf);
    4eea:	003b      	movs	r3, r7
    4eec:	0018      	movs	r0, r3
    4eee:	4b29      	ldr	r3, [pc, #164]	; (4f94 <configure_wakeup+0xb4>)
    4ef0:	58e3      	ldr	r3, [r4, r3]
    4ef2:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    4ef4:	003b      	movs	r3, r7
    4ef6:	2202      	movs	r2, #2
    4ef8:	72da      	strb	r2, [r3, #11]
	ext_conf.filter_input_signal = true;
    4efa:	003b      	movs	r3, r7
    4efc:	2201      	movs	r2, #1
    4efe:	729a      	strb	r2, [r3, #10]
	ext_conf.wake_if_sleeping = true;
    4f00:	003b      	movs	r3, r7
    4f02:	2201      	movs	r2, #1
    4f04:	725a      	strb	r2, [r3, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    4f06:	003b      	movs	r3, r7
    4f08:	2203      	movs	r2, #3
    4f0a:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    4f0c:	003b      	movs	r3, r7
    4f0e:	2200      	movs	r2, #0
    4f10:	605a      	str	r2, [r3, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    4f12:	003b      	movs	r3, r7
    4f14:	2201      	movs	r2, #1
    4f16:	721a      	strb	r2, [r3, #8]
	extint_chan_set_config(3, &ext_conf);
    4f18:	003b      	movs	r3, r7
    4f1a:	0019      	movs	r1, r3
    4f1c:	2003      	movs	r0, #3
    4f1e:	4b1e      	ldr	r3, [pc, #120]	; (4f98 <configure_wakeup+0xb8>)
    4f20:	58e3      	ldr	r3, [r4, r3]
    4f22:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    4f24:	230f      	movs	r3, #15
    4f26:	18fd      	adds	r5, r7, r3
    4f28:	2100      	movs	r1, #0
    4f2a:	2003      	movs	r0, #3
    4f2c:	4b1b      	ldr	r3, [pc, #108]	; (4f9c <configure_wakeup+0xbc>)
    4f2e:	58e3      	ldr	r3, [r4, r3]
    4f30:	4798      	blx	r3
    4f32:	0003      	movs	r3, r0
    4f34:	702b      	strb	r3, [r5, #0]
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    4f36:	003b      	movs	r3, r7
    4f38:	221f      	movs	r2, #31
    4f3a:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    4f3c:	003b      	movs	r3, r7
    4f3e:	2200      	movs	r2, #0
    4f40:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(11, &ext_conf);
    4f42:	003b      	movs	r3, r7
    4f44:	0019      	movs	r1, r3
    4f46:	200b      	movs	r0, #11
    4f48:	4b13      	ldr	r3, [pc, #76]	; (4f98 <configure_wakeup+0xb8>)
    4f4a:	58e3      	ldr	r3, [r4, r3]
    4f4c:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    4f4e:	230e      	movs	r3, #14
    4f50:	18fd      	adds	r5, r7, r3
    4f52:	2100      	movs	r1, #0
    4f54:	200b      	movs	r0, #11
    4f56:	4b11      	ldr	r3, [pc, #68]	; (4f9c <configure_wakeup+0xbc>)
    4f58:	58e3      	ldr	r3, [r4, r3]
    4f5a:	4798      	blx	r3
    4f5c:	0003      	movs	r3, r0
    4f5e:	702b      	strb	r3, [r5, #0]
	if (code1 != STATUS_OK) return code1;
    4f60:	230f      	movs	r3, #15
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d003      	beq.n	4f72 <configure_wakeup+0x92>
    4f6a:	230f      	movs	r3, #15
    4f6c:	18fb      	adds	r3, r7, r3
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	e009      	b.n	4f86 <configure_wakeup+0xa6>
	else if (code2 != STATUS_OK) return code2;
    4f72:	230e      	movs	r3, #14
    4f74:	18fb      	adds	r3, r7, r3
    4f76:	781b      	ldrb	r3, [r3, #0]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d003      	beq.n	4f84 <configure_wakeup+0xa4>
    4f7c:	230e      	movs	r3, #14
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	e000      	b.n	4f86 <configure_wakeup+0xa6>
	else return STATUS_OK;
    4f84:	2300      	movs	r3, #0
}
    4f86:	0018      	movs	r0, r3
    4f88:	46bd      	mov	sp, r7
    4f8a:	b004      	add	sp, #16
    4f8c:	bdb0      	pop	{r4, r5, r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	0000cef8 	.word	0x0000cef8
    4f94:	00000024 	.word	0x00000024
    4f98:	00000124 	.word	0x00000124
    4f9c:	000001ac 	.word	0x000001ac

00004fa0 <configure_rtc>:
static enum status_code configure_rtc(void)
{
    4fa0:	b590      	push	{r4, r7, lr}
    4fa2:	b087      	sub	sp, #28
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	4c1e      	ldr	r4, [pc, #120]	; (5020 <configure_rtc+0x80>)
    4fa8:	447c      	add	r4, pc
	// config base structs
	rtc_instance.hw = RTC;
    4faa:	4b1e      	ldr	r3, [pc, #120]	; (5024 <configure_rtc+0x84>)
    4fac:	58e3      	ldr	r3, [r4, r3]
    4fae:	4a1e      	ldr	r2, [pc, #120]	; (5028 <configure_rtc+0x88>)
    4fb0:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    4fb2:	4b1c      	ldr	r3, [pc, #112]	; (5024 <configure_rtc+0x84>)
    4fb4:	58e3      	ldr	r3, [r4, r3]
    4fb6:	2201      	movs	r2, #1
    4fb8:	711a      	strb	r2, [r3, #4]
	rtc_instance.year_init_value = 2000;
    4fba:	4b1a      	ldr	r3, [pc, #104]	; (5024 <configure_rtc+0x84>)
    4fbc:	58e3      	ldr	r3, [r4, r3]
    4fbe:	22fa      	movs	r2, #250	; 0xfa
    4fc0:	00d2      	lsls	r2, r2, #3
    4fc2:	80da      	strh	r2, [r3, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    4fc4:	1d3b      	adds	r3, r7, #4
    4fc6:	0018      	movs	r0, r3
    4fc8:	4b18      	ldr	r3, [pc, #96]	; (502c <configure_rtc+0x8c>)
    4fca:	447b      	add	r3, pc
    4fcc:	4798      	blx	r3
	config_rtc_calendar.clock_24h = true;
    4fce:	1d3b      	adds	r3, r7, #4
    4fd0:	2201      	movs	r2, #1
    4fd2:	711a      	strb	r2, [r3, #4]
	
	// enable the GCLK to RTC to read out the initial time before enabling
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4fd4:	003b      	movs	r3, r7
    4fd6:	0018      	movs	r0, r3
    4fd8:	4b15      	ldr	r3, [pc, #84]	; (5030 <configure_rtc+0x90>)
    4fda:	447b      	add	r3, pc
    4fdc:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    4fde:	003b      	movs	r3, r7
    4fe0:	2202      	movs	r2, #2
    4fe2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    4fe4:	003b      	movs	r3, r7
    4fe6:	0019      	movs	r1, r3
    4fe8:	2004      	movs	r0, #4
    4fea:	4b12      	ldr	r3, [pc, #72]	; (5034 <configure_rtc+0x94>)
    4fec:	58e3      	ldr	r3, [r4, r3]
    4fee:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    4ff0:	2004      	movs	r0, #4
    4ff2:	4b11      	ldr	r3, [pc, #68]	; (5038 <configure_rtc+0x98>)
    4ff4:	58e3      	ldr	r3, [r4, r3]
    4ff6:	4798      	blx	r3

	// enable the RTC and set the initial time
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    4ff8:	1d3a      	adds	r2, r7, #4
    4ffa:	490b      	ldr	r1, [pc, #44]	; (5028 <configure_rtc+0x88>)
    4ffc:	4b09      	ldr	r3, [pc, #36]	; (5024 <configure_rtc+0x84>)
    4ffe:	58e3      	ldr	r3, [r4, r3]
    5000:	0018      	movs	r0, r3
    5002:	4b0e      	ldr	r3, [pc, #56]	; (503c <configure_rtc+0x9c>)
    5004:	58e3      	ldr	r3, [r4, r3]
    5006:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5008:	4b06      	ldr	r3, [pc, #24]	; (5024 <configure_rtc+0x84>)
    500a:	58e3      	ldr	r3, [r4, r3]
    500c:	0018      	movs	r0, r3
    500e:	4b0c      	ldr	r3, [pc, #48]	; (5040 <configure_rtc+0xa0>)
    5010:	58e3      	ldr	r3, [r4, r3]
    5012:	4798      	blx	r3
	return STATUS_OK;
    5014:	2300      	movs	r3, #0
}
    5016:	0018      	movs	r0, r3
    5018:	46bd      	mov	sp, r7
    501a:	b007      	add	sp, #28
    501c:	bd90      	pop	{r4, r7, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	0000ce38 	.word	0x0000ce38
    5024:	00000030 	.word	0x00000030
    5028:	40001400 	.word	0x40001400
    502c:	fffffd2b 	.word	0xfffffd2b
    5030:	fffffa9f 	.word	0xfffffa9f
    5034:	000000b0 	.word	0x000000b0
    5038:	00000238 	.word	0x00000238
    503c:	000000d0 	.word	0x000000d0
    5040:	00000058 	.word	0x00000058

00005044 <configure_nvm>:
static enum status_code configure_nvm(void) {
    5044:	b5b0      	push	{r4, r5, r7, lr}
    5046:	b082      	sub	sp, #8
    5048:	af00      	add	r7, sp, #0
    504a:	4d0c      	ldr	r5, [pc, #48]	; (507c <configure_nvm+0x38>)
    504c:	447d      	add	r5, pc
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    504e:	003b      	movs	r3, r7
    5050:	0018      	movs	r0, r3
    5052:	4b0b      	ldr	r3, [pc, #44]	; (5080 <configure_nvm+0x3c>)
    5054:	447b      	add	r3, pc
    5056:	4798      	blx	r3
	config.manual_page_write = false;
    5058:	003b      	movs	r3, r7
    505a:	2200      	movs	r2, #0
    505c:	705a      	strb	r2, [r3, #1]
	enum status_code code = nvm_set_config(&config);
    505e:	1dfc      	adds	r4, r7, #7
    5060:	003b      	movs	r3, r7
    5062:	0018      	movs	r0, r3
    5064:	4b07      	ldr	r3, [pc, #28]	; (5084 <configure_nvm+0x40>)
    5066:	58eb      	ldr	r3, [r5, r3]
    5068:	4798      	blx	r3
    506a:	0003      	movs	r3, r0
    506c:	7023      	strb	r3, [r4, #0]
	return code;
    506e:	1dfb      	adds	r3, r7, #7
    5070:	781b      	ldrb	r3, [r3, #0]
}
    5072:	0018      	movs	r0, r3
    5074:	46bd      	mov	sp, r7
    5076:	b002      	add	sp, #8
    5078:	bdb0      	pop	{r4, r5, r7, pc}
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	0000cd94 	.word	0x0000cd94
    5080:	fffffa9d 	.word	0xfffffa9d
    5084:	00000258 	.word	0x00000258

00005088 <configure_bod>:
static enum status_code configure_bod(void)
{
    5088:	b5b0      	push	{r4, r5, r7, lr}
    508a:	b084      	sub	sp, #16
    508c:	af00      	add	r7, sp, #0
    508e:	4d24      	ldr	r5, [pc, #144]	; (5120 <configure_bod+0x98>)
    5090:	447d      	add	r5, pc
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    5092:	1d3b      	adds	r3, r7, #4
    5094:	0018      	movs	r0, r3
    5096:	4b23      	ldr	r3, [pc, #140]	; (5124 <configure_bod+0x9c>)
    5098:	447b      	add	r3, pc
    509a:	4798      	blx	r3
	config_bod33.action = BOD_ACTION_INTERRUPT;
    509c:	1d3b      	adds	r3, r7, #4
    509e:	2210      	movs	r2, #16
    50a0:	711a      	strb	r2, [r3, #4]
	config_bod33.hysteresis = 1;
    50a2:	1d3b      	adds	r3, r7, #4
    50a4:	2201      	movs	r2, #1
    50a6:	719a      	strb	r2, [r3, #6]
	config_bod33.run_in_standby = 0;
    50a8:	1d3b      	adds	r3, r7, #4
    50aa:	2200      	movs	r2, #0
    50ac:	71da      	strb	r2, [r3, #7]
	config_bod33.mode = BOD_MODE_SAMPLED;
    50ae:	1d3b      	adds	r3, r7, #4
    50b0:	2280      	movs	r2, #128	; 0x80
    50b2:	0052      	lsls	r2, r2, #1
    50b4:	805a      	strh	r2, [r3, #2]
	config_bod33.level = 40;						// Set to 2.8V
    50b6:	1d3b      	adds	r3, r7, #4
    50b8:	2228      	movs	r2, #40	; 0x28
    50ba:	715a      	strb	r2, [r3, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    50bc:	230f      	movs	r3, #15
    50be:	18fc      	adds	r4, r7, r3
    50c0:	1d3b      	adds	r3, r7, #4
    50c2:	0019      	movs	r1, r3
    50c4:	2000      	movs	r0, #0
    50c6:	4b18      	ldr	r3, [pc, #96]	; (5128 <configure_bod+0xa0>)
    50c8:	58eb      	ldr	r3, [r5, r3]
    50ca:	4798      	blx	r3
    50cc:	0003      	movs	r3, r0
    50ce:	7023      	strb	r3, [r4, #0]
	enum status_code code2 = bod_enable(BOD_BOD33);
    50d0:	230e      	movs	r3, #14
    50d2:	18fc      	adds	r4, r7, r3
    50d4:	2000      	movs	r0, #0
    50d6:	4b15      	ldr	r3, [pc, #84]	; (512c <configure_bod+0xa4>)
    50d8:	447b      	add	r3, pc
    50da:	4798      	blx	r3
    50dc:	0003      	movs	r3, r0
    50de:	7023      	strb	r3, [r4, #0]
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    50e0:	4b13      	ldr	r3, [pc, #76]	; (5130 <configure_bod+0xa8>)
    50e2:	2280      	movs	r2, #128	; 0x80
    50e4:	00d2      	lsls	r2, r2, #3
    50e6:	605a      	str	r2, [r3, #4]
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SYSCTRL);
    50e8:	2001      	movs	r0, #1
    50ea:	4b12      	ldr	r3, [pc, #72]	; (5134 <configure_bod+0xac>)
    50ec:	447b      	add	r3, pc
    50ee:	4798      	blx	r3
	if (code1 != STATUS_OK) return code1;
    50f0:	230f      	movs	r3, #15
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	2b00      	cmp	r3, #0
    50f8:	d003      	beq.n	5102 <configure_bod+0x7a>
    50fa:	230f      	movs	r3, #15
    50fc:	18fb      	adds	r3, r7, r3
    50fe:	781b      	ldrb	r3, [r3, #0]
    5100:	e009      	b.n	5116 <configure_bod+0x8e>
	else if (code2 != STATUS_OK) return code2;
    5102:	230e      	movs	r3, #14
    5104:	18fb      	adds	r3, r7, r3
    5106:	781b      	ldrb	r3, [r3, #0]
    5108:	2b00      	cmp	r3, #0
    510a:	d003      	beq.n	5114 <configure_bod+0x8c>
    510c:	230e      	movs	r3, #14
    510e:	18fb      	adds	r3, r7, r3
    5110:	781b      	ldrb	r3, [r3, #0]
    5112:	e000      	b.n	5116 <configure_bod+0x8e>
	else return STATUS_OK;
    5114:	2300      	movs	r3, #0
}
    5116:	0018      	movs	r0, r3
    5118:	46bd      	mov	sp, r7
    511a:	b004      	add	sp, #16
    511c:	bdb0      	pop	{r4, r5, r7, pc}
    511e:	46c0      	nop			; (mov r8, r8)
    5120:	0000cd50 	.word	0x0000cd50
    5124:	fffff979 	.word	0xfffff979
    5128:	00000224 	.word	0x00000224
    512c:	fffff96d 	.word	0xfffff96d
    5130:	40000800 	.word	0x40000800
    5134:	fffffb71 	.word	0xfffffb71

00005138 <SYSCTRL_Handler>:

// Brown-out action, when supply-voltage < 2.8V ...
void SYSCTRL_Handler(void) {
    5138:	b580      	push	{r7, lr}
    513a:	af00      	add	r7, sp, #0
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    513c:	4b07      	ldr	r3, [pc, #28]	; (515c <SYSCTRL_Handler+0x24>)
    513e:	689a      	ldr	r2, [r3, #8]
    5140:	2380      	movs	r3, #128	; 0x80
    5142:	00db      	lsls	r3, r3, #3
    5144:	4013      	ands	r3, r2
    5146:	d006      	beq.n	5156 <SYSCTRL_Handler+0x1e>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    5148:	4b04      	ldr	r3, [pc, #16]	; (515c <SYSCTRL_Handler+0x24>)
    514a:	2280      	movs	r2, #128	; 0x80
    514c:	00d2      	lsls	r2, r2, #3
    514e:	609a      	str	r2, [r3, #8]
		system_sleep();
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <SYSCTRL_Handler+0x28>)
    5152:	447b      	add	r3, pc
    5154:	4798      	blx	r3
	}
}
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	46bd      	mov	sp, r7
    515a:	bd80      	pop	{r7, pc}
    515c:	40000800 	.word	0x40000800
    5160:	fffffcdb 	.word	0xfffffcdb

00005164 <main>:

int main(void)
{
    5164:	b5f0      	push	{r4, r5, r6, r7, lr}
    5166:	46c6      	mov	lr, r8
    5168:	b500      	push	{lr}
    516a:	4c8e      	ldr	r4, [pc, #568]	; (53a4 <main+0x240>)
    516c:	44a5      	add	sp, r4
    516e:	af04      	add	r7, sp, #16
    5170:	4c8d      	ldr	r4, [pc, #564]	; (53a8 <main+0x244>)
    5172:	447c      	add	r4, pc
	delay_init();
    5174:	4b8d      	ldr	r3, [pc, #564]	; (53ac <main+0x248>)
    5176:	58e3      	ldr	r3, [r4, r3]
    5178:	4798      	blx	r3
	led_blink(1,100,1);				// Blink once to indicate entry
    517a:	2201      	movs	r2, #1
    517c:	2164      	movs	r1, #100	; 0x64
    517e:	2001      	movs	r0, #1
    5180:	4b8b      	ldr	r3, [pc, #556]	; (53b0 <main+0x24c>)
    5182:	447b      	add	r3, pc
    5184:	4798      	blx	r3

	bool gotoApplication = 1;		// Can we skip to the application?
    5186:	4b8b      	ldr	r3, [pc, #556]	; (53b4 <main+0x250>)
    5188:	2208      	movs	r2, #8
    518a:	4694      	mov	ip, r2
    518c:	44bc      	add	ip, r7
    518e:	4463      	add	r3, ip
    5190:	2201      	movs	r2, #1
    5192:	701a      	strb	r2, [r3, #0]
	bool sdError = 0;				// Any error in SD card process?
    5194:	4b88      	ldr	r3, [pc, #544]	; (53b8 <main+0x254>)
    5196:	2208      	movs	r2, #8
    5198:	4694      	mov	ip, r2
    519a:	44bc      	add	ip, r7
    519c:	4463      	add	r3, ip
    519e:	2200      	movs	r2, #0
    51a0:	701a      	strb	r2, [r3, #0]

	// Check buttons, if both pressed, force bootloader execution
	struct port_config but_cfg;
	port_get_config_defaults(&but_cfg);
    51a2:	23ad      	movs	r3, #173	; 0xad
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	2208      	movs	r2, #8
    51a8:	4694      	mov	ip, r2
    51aa:	44bc      	add	ip, r7
    51ac:	4463      	add	r3, ip
    51ae:	0018      	movs	r0, r3
    51b0:	4b82      	ldr	r3, [pc, #520]	; (53bc <main+0x258>)
    51b2:	447b      	add	r3, pc
    51b4:	4798      	blx	r3
	port_pin_set_config(BUT1_IRQ_IN_PIN, &but_cfg);
    51b6:	23ad      	movs	r3, #173	; 0xad
    51b8:	009b      	lsls	r3, r3, #2
    51ba:	2208      	movs	r2, #8
    51bc:	4694      	mov	ip, r2
    51be:	44bc      	add	ip, r7
    51c0:	4463      	add	r3, ip
    51c2:	0019      	movs	r1, r3
    51c4:	2003      	movs	r0, #3
    51c6:	4b7e      	ldr	r3, [pc, #504]	; (53c0 <main+0x25c>)
    51c8:	58e3      	ldr	r3, [r4, r3]
    51ca:	4798      	blx	r3
	port_pin_set_config(BUT2_IRQ_IN_PIN, &but_cfg);
    51cc:	23ad      	movs	r3, #173	; 0xad
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	2208      	movs	r2, #8
    51d2:	4694      	mov	ip, r2
    51d4:	44bc      	add	ip, r7
    51d6:	4463      	add	r3, ip
    51d8:	0019      	movs	r1, r3
    51da:	201f      	movs	r0, #31
    51dc:	4b78      	ldr	r3, [pc, #480]	; (53c0 <main+0x25c>)
    51de:	58e3      	ldr	r3, [r4, r3]
    51e0:	4798      	blx	r3
	bool b1 = !port_pin_get_input_level(BUT1_IRQ_IN_PIN);
    51e2:	2003      	movs	r0, #3
    51e4:	4b77      	ldr	r3, [pc, #476]	; (53c4 <main+0x260>)
    51e6:	447b      	add	r3, pc
    51e8:	4798      	blx	r3
    51ea:	0003      	movs	r3, r0
    51ec:	1e5a      	subs	r2, r3, #1
    51ee:	4193      	sbcs	r3, r2
    51f0:	b2db      	uxtb	r3, r3
    51f2:	2201      	movs	r2, #1
    51f4:	4053      	eors	r3, r2
    51f6:	b2db      	uxtb	r3, r3
    51f8:	001a      	movs	r2, r3
    51fa:	4b73      	ldr	r3, [pc, #460]	; (53c8 <main+0x264>)
    51fc:	2108      	movs	r1, #8
    51fe:	468c      	mov	ip, r1
    5200:	44bc      	add	ip, r7
    5202:	4463      	add	r3, ip
    5204:	701a      	strb	r2, [r3, #0]
    5206:	781a      	ldrb	r2, [r3, #0]
    5208:	2101      	movs	r1, #1
    520a:	400a      	ands	r2, r1
    520c:	701a      	strb	r2, [r3, #0]
	bool b2 = !port_pin_get_input_level(BUT2_IRQ_IN_PIN);
    520e:	201f      	movs	r0, #31
    5210:	4b6e      	ldr	r3, [pc, #440]	; (53cc <main+0x268>)
    5212:	447b      	add	r3, pc
    5214:	4798      	blx	r3
    5216:	0003      	movs	r3, r0
    5218:	1e5a      	subs	r2, r3, #1
    521a:	4193      	sbcs	r3, r2
    521c:	b2db      	uxtb	r3, r3
    521e:	2201      	movs	r2, #1
    5220:	4053      	eors	r3, r2
    5222:	b2db      	uxtb	r3, r3
    5224:	001a      	movs	r2, r3
    5226:	4b6a      	ldr	r3, [pc, #424]	; (53d0 <main+0x26c>)
    5228:	2108      	movs	r1, #8
    522a:	468c      	mov	ip, r1
    522c:	44bc      	add	ip, r7
    522e:	4463      	add	r3, ip
    5230:	701a      	strb	r2, [r3, #0]
    5232:	781a      	ldrb	r2, [r3, #0]
    5234:	2101      	movs	r1, #1
    5236:	400a      	ands	r2, r1
    5238:	701a      	strb	r2, [r3, #0]
	if (b1 && b2) {
    523a:	4b63      	ldr	r3, [pc, #396]	; (53c8 <main+0x264>)
    523c:	2208      	movs	r2, #8
    523e:	4694      	mov	ip, r2
    5240:	44bc      	add	ip, r7
    5242:	4463      	add	r3, ip
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	2b00      	cmp	r3, #0
    5248:	d00e      	beq.n	5268 <main+0x104>
    524a:	4b61      	ldr	r3, [pc, #388]	; (53d0 <main+0x26c>)
    524c:	2208      	movs	r2, #8
    524e:	4694      	mov	ip, r2
    5250:	44bc      	add	ip, r7
    5252:	4463      	add	r3, ip
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d006      	beq.n	5268 <main+0x104>
		gotoApplication = 0;
    525a:	4b56      	ldr	r3, [pc, #344]	; (53b4 <main+0x250>)
    525c:	2208      	movs	r2, #8
    525e:	4694      	mov	ip, r2
    5260:	44bc      	add	ip, r7
    5262:	4463      	add	r3, ip
    5264:	2200      	movs	r2, #0
    5266:	701a      	strb	r2, [r3, #0]
	}
	
	// Check SD card for new boot file, force bootloader execution if found
	// Initialize SD card driver
	sd_mmc_init();
    5268:	4b5a      	ldr	r3, [pc, #360]	; (53d4 <main+0x270>)
    526a:	58e3      	ldr	r3, [r4, r3]
    526c:	4798      	blx	r3

	// Attempt to initialize SD card
	Ctrl_status status = CTRL_FAIL;
    526e:	4b5a      	ldr	r3, [pc, #360]	; (53d8 <main+0x274>)
    5270:	2208      	movs	r2, #8
    5272:	4694      	mov	ip, r2
    5274:	44bc      	add	ip, r7
    5276:	4463      	add	r3, ip
    5278:	2201      	movs	r2, #1
    527a:	701a      	strb	r2, [r3, #0]
	while (status != CTRL_GOOD) {
    527c:	e02c      	b.n	52d8 <main+0x174>
		status = sd_mmc_test_unit_ready(0);
    527e:	4b56      	ldr	r3, [pc, #344]	; (53d8 <main+0x274>)
    5280:	2208      	movs	r2, #8
    5282:	18ba      	adds	r2, r7, r2
    5284:	18d5      	adds	r5, r2, r3
    5286:	2000      	movs	r0, #0
    5288:	4b54      	ldr	r3, [pc, #336]	; (53dc <main+0x278>)
    528a:	58e3      	ldr	r3, [r4, r3]
    528c:	4798      	blx	r3
    528e:	0003      	movs	r3, r0
    5290:	702b      	strb	r3, [r5, #0]
		if (status == CTRL_FAIL || status == CTRL_NO_PRESENT) {
    5292:	4b51      	ldr	r3, [pc, #324]	; (53d8 <main+0x274>)
    5294:	2208      	movs	r2, #8
    5296:	4694      	mov	ip, r2
    5298:	44bc      	add	ip, r7
    529a:	4463      	add	r3, ip
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	2b01      	cmp	r3, #1
    52a0:	d013      	beq.n	52ca <main+0x166>
    52a2:	4b45      	ldr	r3, [pc, #276]	; (53b8 <main+0x254>)
    52a4:	2208      	movs	r2, #8
    52a6:	4694      	mov	ip, r2
    52a8:	44bc      	add	ip, r7
    52aa:	4463      	add	r3, ip
    52ac:	4a42      	ldr	r2, [pc, #264]	; (53b8 <main+0x254>)
    52ae:	2108      	movs	r1, #8
    52b0:	468c      	mov	ip, r1
    52b2:	44bc      	add	ip, r7
    52b4:	4462      	add	r2, ip
    52b6:	7812      	ldrb	r2, [r2, #0]
    52b8:	701a      	strb	r2, [r3, #0]
    52ba:	4b47      	ldr	r3, [pc, #284]	; (53d8 <main+0x274>)
    52bc:	2208      	movs	r2, #8
    52be:	4694      	mov	ip, r2
    52c0:	44bc      	add	ip, r7
    52c2:	4463      	add	r3, ip
    52c4:	781b      	ldrb	r3, [r3, #0]
    52c6:	2b02      	cmp	r3, #2
    52c8:	d106      	bne.n	52d8 <main+0x174>
			sdError = 1;
    52ca:	4b3b      	ldr	r3, [pc, #236]	; (53b8 <main+0x254>)
    52cc:	2208      	movs	r2, #8
    52ce:	4694      	mov	ip, r2
    52d0:	44bc      	add	ip, r7
    52d2:	4463      	add	r3, ip
    52d4:	2201      	movs	r2, #1
    52d6:	701a      	strb	r2, [r3, #0]
	while (status != CTRL_GOOD) {
    52d8:	4b3f      	ldr	r3, [pc, #252]	; (53d8 <main+0x274>)
    52da:	2208      	movs	r2, #8
    52dc:	4694      	mov	ip, r2
    52de:	44bc      	add	ip, r7
    52e0:	4463      	add	r3, ip
    52e2:	781b      	ldrb	r3, [r3, #0]
    52e4:	2b00      	cmp	r3, #0
    52e6:	d1ca      	bne.n	527e <main+0x11a>
	}

	// Check for new firmware image on SD
	FATFS fs;
	FIL file_object;
	const char* image_name = IMAGE_DEFAULT_NAME;
    52e8:	4b3d      	ldr	r3, [pc, #244]	; (53e0 <main+0x27c>)
    52ea:	447b      	add	r3, pc
    52ec:	22af      	movs	r2, #175	; 0xaf
    52ee:	0092      	lsls	r2, r2, #2
    52f0:	2108      	movs	r1, #8
    52f2:	468c      	mov	ip, r1
    52f4:	44bc      	add	ip, r7
    52f6:	4462      	add	r2, ip
    52f8:	6013      	str	r3, [r2, #0]
	FRESULT res;
	FILINFO fno;
	memset(&fs, 0, sizeof(FATFS));	
    52fa:	238c      	movs	r3, #140	; 0x8c
    52fc:	009a      	lsls	r2, r3, #2
    52fe:	2384      	movs	r3, #132	; 0x84
    5300:	2108      	movs	r1, #8
    5302:	468c      	mov	ip, r1
    5304:	44bc      	add	ip, r7
    5306:	4463      	add	r3, ip
    5308:	2100      	movs	r1, #0
    530a:	0018      	movs	r0, r3
    530c:	4b35      	ldr	r3, [pc, #212]	; (53e4 <main+0x280>)
    530e:	58e3      	ldr	r3, [r4, r3]
    5310:	4798      	blx	r3
	if (sdError == 0) {
    5312:	4b29      	ldr	r3, [pc, #164]	; (53b8 <main+0x254>)
    5314:	2208      	movs	r2, #8
    5316:	4694      	mov	ip, r2
    5318:	44bc      	add	ip, r7
    531a:	4463      	add	r3, ip
    531c:	781b      	ldrb	r3, [r3, #0]
    531e:	2201      	movs	r2, #1
    5320:	4053      	eors	r3, r2
    5322:	b2db      	uxtb	r3, r3
    5324:	2b00      	cmp	r3, #0
    5326:	d06c      	beq.n	5402 <main+0x29e>
		// Mount FAT32 file system on SD card
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5328:	4b2f      	ldr	r3, [pc, #188]	; (53e8 <main+0x284>)
    532a:	2208      	movs	r2, #8
    532c:	18ba      	adds	r2, r7, r2
    532e:	18d5      	adds	r5, r2, r3
    5330:	2384      	movs	r3, #132	; 0x84
    5332:	2208      	movs	r2, #8
    5334:	4694      	mov	ip, r2
    5336:	44bc      	add	ip, r7
    5338:	4463      	add	r3, ip
    533a:	0019      	movs	r1, r3
    533c:	2000      	movs	r0, #0
    533e:	4b2b      	ldr	r3, [pc, #172]	; (53ec <main+0x288>)
    5340:	58e3      	ldr	r3, [r4, r3]
    5342:	4798      	blx	r3
    5344:	0003      	movs	r3, r0
    5346:	702b      	strb	r3, [r5, #0]
	
		// Find the image file
		res = f_stat(image_name, &fno);
    5348:	4b27      	ldr	r3, [pc, #156]	; (53e8 <main+0x284>)
    534a:	2208      	movs	r2, #8
    534c:	18ba      	adds	r2, r7, r2
    534e:	18d5      	adds	r5, r2, r3
    5350:	2348      	movs	r3, #72	; 0x48
    5352:	2208      	movs	r2, #8
    5354:	18ba      	adds	r2, r7, r2
    5356:	18d2      	adds	r2, r2, r3
    5358:	23af      	movs	r3, #175	; 0xaf
    535a:	009b      	lsls	r3, r3, #2
    535c:	2108      	movs	r1, #8
    535e:	468c      	mov	ip, r1
    5360:	44bc      	add	ip, r7
    5362:	4463      	add	r3, ip
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	0011      	movs	r1, r2
    5368:	0018      	movs	r0, r3
    536a:	4b21      	ldr	r3, [pc, #132]	; (53f0 <main+0x28c>)
    536c:	58e3      	ldr	r3, [r4, r3]
    536e:	4798      	blx	r3
    5370:	0003      	movs	r3, r0
    5372:	702b      	strb	r3, [r5, #0]
		if (res == FR_OK) {				// File exists
    5374:	4b1c      	ldr	r3, [pc, #112]	; (53e8 <main+0x284>)
    5376:	2208      	movs	r2, #8
    5378:	4694      	mov	ip, r2
    537a:	44bc      	add	ip, r7
    537c:	4463      	add	r3, ip
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	2b00      	cmp	r3, #0
    5382:	d137      	bne.n	53f4 <main+0x290>
			gotoApplication = 0;
    5384:	4b0b      	ldr	r3, [pc, #44]	; (53b4 <main+0x250>)
    5386:	2208      	movs	r2, #8
    5388:	4694      	mov	ip, r2
    538a:	44bc      	add	ip, r7
    538c:	4463      	add	r3, ip
    538e:	2200      	movs	r2, #0
    5390:	701a      	strb	r2, [r3, #0]
			sdError = 0;
    5392:	4b09      	ldr	r3, [pc, #36]	; (53b8 <main+0x254>)
    5394:	2208      	movs	r2, #8
    5396:	4694      	mov	ip, r2
    5398:	44bc      	add	ip, r7
    539a:	4463      	add	r3, ip
    539c:	2200      	movs	r2, #0
    539e:	701a      	strb	r2, [r3, #0]
    53a0:	e02f      	b.n	5402 <main+0x29e>
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	fffffd18 	.word	0xfffffd18
    53a8:	0000cc6e 	.word	0x0000cc6e
    53ac:	00000178 	.word	0x00000178
    53b0:	00000a1b 	.word	0x00000a1b
    53b4:	000002cf 	.word	0x000002cf
    53b8:	000002ce 	.word	0x000002ce
    53bc:	fffff9a3 	.word	0xfffff9a3
    53c0:	00000240 	.word	0x00000240
    53c4:	fffff993 	.word	0xfffff993
    53c8:	000002c3 	.word	0x000002c3
    53cc:	fffff967 	.word	0xfffff967
    53d0:	000002c2 	.word	0x000002c2
    53d4:	00000044 	.word	0x00000044
    53d8:	000002cd 	.word	0x000002cd
    53dc:	00000048 	.word	0x00000048
    53e0:	0000c7ca 	.word	0x0000c7ca
    53e4:	000001f8 	.word	0x000001f8
    53e8:	000002bb 	.word	0x000002bb
    53ec:	00000218 	.word	0x00000218
    53f0:	00000260 	.word	0x00000260
		} else sdError = 1;
    53f4:	4b91      	ldr	r3, [pc, #580]	; (563c <main+0x4d8>)
    53f6:	2208      	movs	r2, #8
    53f8:	4694      	mov	ip, r2
    53fa:	44bc      	add	ip, r7
    53fc:	4463      	add	r3, ip
    53fe:	2201      	movs	r2, #1
    5400:	701a      	strb	r2, [r3, #0]
	}

	// Disable SD card SPI
	struct spi_module spi;
	spi.hw = SD_MMC_SPI;
    5402:	4b8f      	ldr	r3, [pc, #572]	; (5640 <main+0x4dc>)
    5404:	22b4      	movs	r2, #180	; 0xb4
    5406:	0092      	lsls	r2, r2, #2
    5408:	4694      	mov	ip, r2
    540a:	2208      	movs	r2, #8
    540c:	4690      	mov	r8, r2
    540e:	44b8      	add	r8, r7
    5410:	44c4      	add	ip, r8
    5412:	4463      	add	r3, ip
    5414:	4a8b      	ldr	r2, [pc, #556]	; (5644 <main+0x4e0>)
    5416:	601a      	str	r2, [r3, #0]
	spi_reset(&spi);
    5418:	230c      	movs	r3, #12
    541a:	2208      	movs	r2, #8
    541c:	4694      	mov	ip, r2
    541e:	44bc      	add	ip, r7
    5420:	4463      	add	r3, ip
    5422:	0018      	movs	r0, r3
    5424:	4b88      	ldr	r3, [pc, #544]	; (5648 <main+0x4e4>)
    5426:	58e3      	ldr	r3, [r4, r3]
    5428:	4798      	blx	r3
	spi_disable(&spi);
    542a:	230c      	movs	r3, #12
    542c:	2208      	movs	r2, #8
    542e:	4694      	mov	ip, r2
    5430:	44bc      	add	ip, r7
    5432:	4463      	add	r3, ip
    5434:	0018      	movs	r0, r3
    5436:	4b85      	ldr	r3, [pc, #532]	; (564c <main+0x4e8>)
    5438:	447b      	add	r3, pc
    543a:	4798      	blx	r3

	// Disable interrupts
	system_interrupt_disable_global();
    543c:	4b84      	ldr	r3, [pc, #528]	; (5650 <main+0x4ec>)
    543e:	447b      	add	r3, pc
    5440:	4798      	blx	r3

	// Jump to application if allowed
	if (gotoApplication) {
    5442:	4b84      	ldr	r3, [pc, #528]	; (5654 <main+0x4f0>)
    5444:	2208      	movs	r2, #8
    5446:	4694      	mov	ip, r2
    5448:	44bc      	add	ip, r7
    544a:	4463      	add	r3, ip
    544c:	781b      	ldrb	r3, [r3, #0]
    544e:	2b00      	cmp	r3, #0
    5450:	d002      	beq.n	5458 <main+0x2f4>
		start_application();
    5452:	4b81      	ldr	r3, [pc, #516]	; (5658 <main+0x4f4>)
    5454:	447b      	add	r3, pc
    5456:	4798      	blx	r3
	}

	// START BOOTLOADER MAIN PROGRAM
	system_init();						// clocks and I/O pins
    5458:	4b80      	ldr	r3, [pc, #512]	; (565c <main+0x4f8>)
    545a:	58e3      	ldr	r3, [r4, r3]
    545c:	4798      	blx	r3
	delay_init();						// delay clock update
    545e:	4b80      	ldr	r3, [pc, #512]	; (5660 <main+0x4fc>)
    5460:	58e3      	ldr	r3, [r4, r3]
    5462:	4798      	blx	r3
	system_interrupt_enable_global();	// Enable interrupts
    5464:	4b7f      	ldr	r3, [pc, #508]	; (5664 <main+0x500>)
    5466:	447b      	add	r3, pc
    5468:	4798      	blx	r3
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY); // Allow sleep mode
    546a:	2003      	movs	r0, #3
    546c:	4b7e      	ldr	r3, [pc, #504]	; (5668 <main+0x504>)
    546e:	447b      	add	r3, pc
    5470:	4798      	blx	r3
#ifdef ENABLE_USB_DEBUG
	stdio_usb_init();					// stdio over USB CDC
    5472:	4b7e      	ldr	r3, [pc, #504]	; (566c <main+0x508>)
    5474:	58e3      	ldr	r3, [r4, r3]
    5476:	4798      	blx	r3
	stdio_usb_enable();					// stdio over USB CDC
    5478:	4b7d      	ldr	r3, [pc, #500]	; (5670 <main+0x50c>)
    547a:	58e3      	ldr	r3, [r4, r3]
    547c:	4798      	blx	r3
	delay_ms(500);						// Wait for USB to be ready
    547e:	23fa      	movs	r3, #250	; 0xfa
    5480:	005b      	lsls	r3, r3, #1
    5482:	0018      	movs	r0, r3
    5484:	4b7b      	ldr	r3, [pc, #492]	; (5674 <main+0x510>)
    5486:	58e3      	ldr	r3, [r4, r3]
    5488:	4798      	blx	r3
#endif
	// Print diagnostic information
	debug_print("\n\n\n");
    548a:	4b7b      	ldr	r3, [pc, #492]	; (5678 <main+0x514>)
    548c:	447b      	add	r3, pc
    548e:	0018      	movs	r0, r3
    5490:	4b7a      	ldr	r3, [pc, #488]	; (567c <main+0x518>)
    5492:	447b      	add	r3, pc
    5494:	4798      	blx	r3
	debug_print("..... Bootloader started .....\n");
    5496:	4b7a      	ldr	r3, [pc, #488]	; (5680 <main+0x51c>)
    5498:	447b      	add	r3, pc
    549a:	0018      	movs	r0, r3
    549c:	4b79      	ldr	r3, [pc, #484]	; (5684 <main+0x520>)
    549e:	447b      	add	r3, pc
    54a0:	4798      	blx	r3
	debug_print("Compiled on: %s %s \n\n\n", __DATE__, __TIME__);
    54a2:	4b79      	ldr	r3, [pc, #484]	; (5688 <main+0x524>)
    54a4:	447b      	add	r3, pc
    54a6:	001a      	movs	r2, r3
    54a8:	4b78      	ldr	r3, [pc, #480]	; (568c <main+0x528>)
    54aa:	447b      	add	r3, pc
    54ac:	0019      	movs	r1, r3
    54ae:	4b78      	ldr	r3, [pc, #480]	; (5690 <main+0x52c>)
    54b0:	447b      	add	r3, pc
    54b2:	0018      	movs	r0, r3
    54b4:	4b77      	ldr	r3, [pc, #476]	; (5694 <main+0x530>)
    54b6:	447b      	add	r3, pc
    54b8:	4798      	blx	r3

	// Peripheral init
	enum status_code code;
	code = configure_rtc();				// RTC module
    54ba:	4b77      	ldr	r3, [pc, #476]	; (5698 <main+0x534>)
    54bc:	2208      	movs	r2, #8
    54be:	18ba      	adds	r2, r7, r2
    54c0:	18d5      	adds	r5, r2, r3
    54c2:	4b76      	ldr	r3, [pc, #472]	; (569c <main+0x538>)
    54c4:	447b      	add	r3, pc
    54c6:	4798      	blx	r3
    54c8:	0003      	movs	r3, r0
    54ca:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(1,"RTC module init failed.\n");
    54cc:	4b72      	ldr	r3, [pc, #456]	; (5698 <main+0x534>)
    54ce:	2208      	movs	r2, #8
    54d0:	4694      	mov	ip, r2
    54d2:	44bc      	add	ip, r7
    54d4:	4463      	add	r3, ip
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	2b00      	cmp	r3, #0
    54da:	d006      	beq.n	54ea <main+0x386>
    54dc:	4b70      	ldr	r3, [pc, #448]	; (56a0 <main+0x53c>)
    54de:	447b      	add	r3, pc
    54e0:	0019      	movs	r1, r3
    54e2:	2001      	movs	r0, #1
    54e4:	4b6f      	ldr	r3, [pc, #444]	; (56a4 <main+0x540>)
    54e6:	447b      	add	r3, pc
    54e8:	4798      	blx	r3
	code = configure_bod();				// BOD detector
    54ea:	4b6b      	ldr	r3, [pc, #428]	; (5698 <main+0x534>)
    54ec:	2208      	movs	r2, #8
    54ee:	18ba      	adds	r2, r7, r2
    54f0:	18d5      	adds	r5, r2, r3
    54f2:	4b6d      	ldr	r3, [pc, #436]	; (56a8 <main+0x544>)
    54f4:	447b      	add	r3, pc
    54f6:	4798      	blx	r3
    54f8:	0003      	movs	r3, r0
    54fa:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(2,"BOD module init failed.\n");
    54fc:	4b66      	ldr	r3, [pc, #408]	; (5698 <main+0x534>)
    54fe:	2208      	movs	r2, #8
    5500:	4694      	mov	ip, r2
    5502:	44bc      	add	ip, r7
    5504:	4463      	add	r3, ip
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	2b00      	cmp	r3, #0
    550a:	d006      	beq.n	551a <main+0x3b6>
    550c:	4b67      	ldr	r3, [pc, #412]	; (56ac <main+0x548>)
    550e:	447b      	add	r3, pc
    5510:	0019      	movs	r1, r3
    5512:	2002      	movs	r0, #2
    5514:	4b66      	ldr	r3, [pc, #408]	; (56b0 <main+0x54c>)
    5516:	447b      	add	r3, pc
    5518:	4798      	blx	r3
	code = configure_wakeup();			// Wake-up from sleep using buttons
    551a:	4b5f      	ldr	r3, [pc, #380]	; (5698 <main+0x534>)
    551c:	2208      	movs	r2, #8
    551e:	18ba      	adds	r2, r7, r2
    5520:	18d5      	adds	r5, r2, r3
    5522:	4b64      	ldr	r3, [pc, #400]	; (56b4 <main+0x550>)
    5524:	447b      	add	r3, pc
    5526:	4798      	blx	r3
    5528:	0003      	movs	r3, r0
    552a:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(3,"EXTINT module init failed.\n");
    552c:	4b5a      	ldr	r3, [pc, #360]	; (5698 <main+0x534>)
    552e:	2208      	movs	r2, #8
    5530:	4694      	mov	ip, r2
    5532:	44bc      	add	ip, r7
    5534:	4463      	add	r3, ip
    5536:	781b      	ldrb	r3, [r3, #0]
    5538:	2b00      	cmp	r3, #0
    553a:	d006      	beq.n	554a <main+0x3e6>
    553c:	4b5e      	ldr	r3, [pc, #376]	; (56b8 <main+0x554>)
    553e:	447b      	add	r3, pc
    5540:	0019      	movs	r1, r3
    5542:	2003      	movs	r0, #3
    5544:	4b5d      	ldr	r3, [pc, #372]	; (56bc <main+0x558>)
    5546:	447b      	add	r3, pc
    5548:	4798      	blx	r3
	code = configure_nvm();				// NVM controller
    554a:	4b53      	ldr	r3, [pc, #332]	; (5698 <main+0x534>)
    554c:	2208      	movs	r2, #8
    554e:	18ba      	adds	r2, r7, r2
    5550:	18d5      	adds	r5, r2, r3
    5552:	4b5b      	ldr	r3, [pc, #364]	; (56c0 <main+0x55c>)
    5554:	447b      	add	r3, pc
    5556:	4798      	blx	r3
    5558:	0003      	movs	r3, r0
    555a:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(4,"NVM module init failed.\n");
    555c:	4b4e      	ldr	r3, [pc, #312]	; (5698 <main+0x534>)
    555e:	2208      	movs	r2, #8
    5560:	4694      	mov	ip, r2
    5562:	44bc      	add	ip, r7
    5564:	4463      	add	r3, ip
    5566:	781b      	ldrb	r3, [r3, #0]
    5568:	2b00      	cmp	r3, #0
    556a:	d006      	beq.n	557a <main+0x416>
    556c:	4b55      	ldr	r3, [pc, #340]	; (56c4 <main+0x560>)
    556e:	447b      	add	r3, pc
    5570:	0019      	movs	r1, r3
    5572:	2004      	movs	r0, #4
    5574:	4b54      	ldr	r3, [pc, #336]	; (56c8 <main+0x564>)
    5576:	447b      	add	r3, pc
    5578:	4798      	blx	r3

	// RTC time check
	struct rtc_calendar_time time;
	rtc_calendar_get_time(&rtc_instance, &time);
    557a:	230c      	movs	r3, #12
    557c:	18fa      	adds	r2, r7, r3
    557e:	4b53      	ldr	r3, [pc, #332]	; (56cc <main+0x568>)
    5580:	58e3      	ldr	r3, [r4, r3]
    5582:	0011      	movs	r1, r2
    5584:	0018      	movs	r0, r3
    5586:	4b52      	ldr	r3, [pc, #328]	; (56d0 <main+0x56c>)
    5588:	58e3      	ldr	r3, [r4, r3]
    558a:	4798      	blx	r3
	debug_print("Local Time: %d/%d/%d  %d:%d:%d\n", time.month, time.day, time.year, time.hour, time.minute, time.second);
    558c:	4b51      	ldr	r3, [pc, #324]	; (56d4 <main+0x570>)
    558e:	22b4      	movs	r2, #180	; 0xb4
    5590:	0092      	lsls	r2, r2, #2
    5592:	4694      	mov	ip, r2
    5594:	2208      	movs	r2, #8
    5596:	4690      	mov	r8, r2
    5598:	44b8      	add	r8, r7
    559a:	44c4      	add	ip, r8
    559c:	4463      	add	r3, ip
    559e:	795b      	ldrb	r3, [r3, #5]
    55a0:	001d      	movs	r5, r3
    55a2:	4b4c      	ldr	r3, [pc, #304]	; (56d4 <main+0x570>)
    55a4:	22b4      	movs	r2, #180	; 0xb4
    55a6:	0092      	lsls	r2, r2, #2
    55a8:	4694      	mov	ip, r2
    55aa:	2208      	movs	r2, #8
    55ac:	4690      	mov	r8, r2
    55ae:	44b8      	add	r8, r7
    55b0:	44c4      	add	ip, r8
    55b2:	4463      	add	r3, ip
    55b4:	791b      	ldrb	r3, [r3, #4]
    55b6:	001e      	movs	r6, r3
    55b8:	4b46      	ldr	r3, [pc, #280]	; (56d4 <main+0x570>)
    55ba:	22b4      	movs	r2, #180	; 0xb4
    55bc:	0092      	lsls	r2, r2, #2
    55be:	4694      	mov	ip, r2
    55c0:	2208      	movs	r2, #8
    55c2:	4690      	mov	r8, r2
    55c4:	44b8      	add	r8, r7
    55c6:	44c4      	add	ip, r8
    55c8:	4463      	add	r3, ip
    55ca:	88db      	ldrh	r3, [r3, #6]
    55cc:	607b      	str	r3, [r7, #4]
    55ce:	4b41      	ldr	r3, [pc, #260]	; (56d4 <main+0x570>)
    55d0:	22b4      	movs	r2, #180	; 0xb4
    55d2:	0092      	lsls	r2, r2, #2
    55d4:	4694      	mov	ip, r2
    55d6:	2208      	movs	r2, #8
    55d8:	4690      	mov	r8, r2
    55da:	44b8      	add	r8, r7
    55dc:	44c4      	add	ip, r8
    55de:	4463      	add	r3, ip
    55e0:	789b      	ldrb	r3, [r3, #2]
    55e2:	001a      	movs	r2, r3
    55e4:	4b3b      	ldr	r3, [pc, #236]	; (56d4 <main+0x570>)
    55e6:	21b4      	movs	r1, #180	; 0xb4
    55e8:	0089      	lsls	r1, r1, #2
    55ea:	468c      	mov	ip, r1
    55ec:	2108      	movs	r1, #8
    55ee:	4688      	mov	r8, r1
    55f0:	44b8      	add	r8, r7
    55f2:	44c4      	add	ip, r8
    55f4:	4463      	add	r3, ip
    55f6:	785b      	ldrb	r3, [r3, #1]
    55f8:	0019      	movs	r1, r3
    55fa:	4b36      	ldr	r3, [pc, #216]	; (56d4 <main+0x570>)
    55fc:	20b4      	movs	r0, #180	; 0xb4
    55fe:	0080      	lsls	r0, r0, #2
    5600:	4684      	mov	ip, r0
    5602:	2008      	movs	r0, #8
    5604:	4680      	mov	r8, r0
    5606:	44b8      	add	r8, r7
    5608:	44c4      	add	ip, r8
    560a:	4463      	add	r3, ip
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	4832      	ldr	r0, [pc, #200]	; (56d8 <main+0x574>)
    5610:	4478      	add	r0, pc
    5612:	9302      	str	r3, [sp, #8]
    5614:	9101      	str	r1, [sp, #4]
    5616:	9200      	str	r2, [sp, #0]
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	0032      	movs	r2, r6
    561c:	0029      	movs	r1, r5
    561e:	4d2f      	ldr	r5, [pc, #188]	; (56dc <main+0x578>)
    5620:	447d      	add	r5, pc
    5622:	47a8      	blx	r5
	debug_print("New image file: %s\n", sdError?"NOT FOUND":"FOUND");
    5624:	4b05      	ldr	r3, [pc, #20]	; (563c <main+0x4d8>)
    5626:	2208      	movs	r2, #8
    5628:	4694      	mov	ip, r2
    562a:	44bc      	add	ip, r7
    562c:	4463      	add	r3, ip
    562e:	781b      	ldrb	r3, [r3, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d057      	beq.n	56e4 <main+0x580>
    5634:	4b2a      	ldr	r3, [pc, #168]	; (56e0 <main+0x57c>)
    5636:	447b      	add	r3, pc
    5638:	001a      	movs	r2, r3
    563a:	e056      	b.n	56ea <main+0x586>
    563c:	000002ce 	.word	0x000002ce
    5640:	fffffd3c 	.word	0xfffffd3c
    5644:	42000c00 	.word	0x42000c00
    5648:	0000009c 	.word	0x0000009c
    564c:	fffffa39 	.word	0xfffffa39
    5650:	fffff7fb 	.word	0xfffff7fb
    5654:	000002cf 	.word	0x000002cf
    5658:	0000057d 	.word	0x0000057d
    565c:	0000004c 	.word	0x0000004c
    5660:	00000178 	.word	0x00000178
    5664:	fffff7af 	.word	0xfffff7af
    5668:	fffff937 	.word	0xfffff937
    566c:	000002d0 	.word	0x000002d0
    5670:	0000021c 	.word	0x0000021c
    5674:	000002a4 	.word	0x000002a4
    5678:	0000c638 	.word	0x0000c638
    567c:	000008b7 	.word	0x000008b7
    5680:	0000c630 	.word	0x0000c630
    5684:	000008ab 	.word	0x000008ab
    5688:	0000c644 	.word	0x0000c644
    568c:	0000c64a 	.word	0x0000c64a
    5690:	0000c650 	.word	0x0000c650
    5694:	00000893 	.word	0x00000893
    5698:	000002ba 	.word	0x000002ba
    569c:	fffffad9 	.word	0xfffffad9
    56a0:	0000c63a 	.word	0x0000c63a
    56a4:	000007f7 	.word	0x000007f7
    56a8:	fffffb91 	.word	0xfffffb91
    56ac:	0000c626 	.word	0x0000c626
    56b0:	000007c7 	.word	0x000007c7
    56b4:	fffff9b9 	.word	0xfffff9b9
    56b8:	0000c612 	.word	0x0000c612
    56bc:	00000797 	.word	0x00000797
    56c0:	fffffaed 	.word	0xfffffaed
    56c4:	0000c5fe 	.word	0x0000c5fe
    56c8:	00000767 	.word	0x00000767
    56cc:	00000030 	.word	0x00000030
    56d0:	00000134 	.word	0x00000134
    56d4:	fffffd34 	.word	0xfffffd34
    56d8:	0000c578 	.word	0x0000c578
    56dc:	00000729 	.word	0x00000729
    56e0:	0000c572 	.word	0x0000c572
    56e4:	4b99      	ldr	r3, [pc, #612]	; (594c <main+0x7e8>)
    56e6:	447b      	add	r3, pc
    56e8:	001a      	movs	r2, r3
    56ea:	4b99      	ldr	r3, [pc, #612]	; (5950 <main+0x7ec>)
    56ec:	447b      	add	r3, pc
    56ee:	0011      	movs	r1, r2
    56f0:	0018      	movs	r0, r3
    56f2:	4b98      	ldr	r3, [pc, #608]	; (5954 <main+0x7f0>)
    56f4:	447b      	add	r3, pc
    56f6:	4798      	blx	r3
	if (sdError) {
    56f8:	4b97      	ldr	r3, [pc, #604]	; (5958 <main+0x7f4>)
    56fa:	2208      	movs	r2, #8
    56fc:	4694      	mov	ip, r2
    56fe:	44bc      	add	ip, r7
    5700:	4463      	add	r3, ip
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	2b00      	cmp	r3, #0
    5706:	d015      	beq.n	5734 <main+0x5d0>
		debug_print("Nothing to do. Going to sleep.\n");
    5708:	4b94      	ldr	r3, [pc, #592]	; (595c <main+0x7f8>)
    570a:	447b      	add	r3, pc
    570c:	0018      	movs	r0, r3
    570e:	4b94      	ldr	r3, [pc, #592]	; (5960 <main+0x7fc>)
    5710:	447b      	add	r3, pc
    5712:	4798      	blx	r3
		led_blink(1,100,0);		// Blink once to indicate nothing to do
    5714:	2200      	movs	r2, #0
    5716:	2164      	movs	r1, #100	; 0x64
    5718:	2001      	movs	r0, #1
    571a:	4b92      	ldr	r3, [pc, #584]	; (5964 <main+0x800>)
    571c:	447b      	add	r3, pc
    571e:	4798      	blx	r3
		delay_ms(100);
    5720:	2064      	movs	r0, #100	; 0x64
    5722:	4b91      	ldr	r3, [pc, #580]	; (5968 <main+0x804>)
    5724:	58e3      	ldr	r3, [r4, r3]
    5726:	4798      	blx	r3
		system_sleep();
    5728:	4b90      	ldr	r3, [pc, #576]	; (596c <main+0x808>)
    572a:	447b      	add	r3, pc
    572c:	4798      	blx	r3
		system_reset();
    572e:	4b90      	ldr	r3, [pc, #576]	; (5970 <main+0x80c>)
    5730:	447b      	add	r3, pc
    5732:	4798      	blx	r3
	}

	// Init the SD card driver (spi port)
	sd_mmc_init();
    5734:	4b8f      	ldr	r3, [pc, #572]	; (5974 <main+0x810>)
    5736:	58e3      	ldr	r3, [r4, r3]
    5738:	4798      	blx	r3

	// Open the image file
	res = f_open(&file_object,(const char *)image_name, FA_READ);
    573a:	4b8f      	ldr	r3, [pc, #572]	; (5978 <main+0x814>)
    573c:	2208      	movs	r2, #8
    573e:	18ba      	adds	r2, r7, r2
    5740:	18d5      	adds	r5, r2, r3
    5742:	23af      	movs	r3, #175	; 0xaf
    5744:	009b      	lsls	r3, r3, #2
    5746:	2208      	movs	r2, #8
    5748:	4694      	mov	ip, r2
    574a:	44bc      	add	ip, r7
    574c:	4463      	add	r3, ip
    574e:	6819      	ldr	r1, [r3, #0]
    5750:	2360      	movs	r3, #96	; 0x60
    5752:	2208      	movs	r2, #8
    5754:	4694      	mov	ip, r2
    5756:	44bc      	add	ip, r7
    5758:	4463      	add	r3, ip
    575a:	2201      	movs	r2, #1
    575c:	0018      	movs	r0, r3
    575e:	4b87      	ldr	r3, [pc, #540]	; (597c <main+0x818>)
    5760:	58e3      	ldr	r3, [r4, r3]
    5762:	4798      	blx	r3
    5764:	0003      	movs	r3, r0
    5766:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(4,"File open failed.\n");
    5768:	4b83      	ldr	r3, [pc, #524]	; (5978 <main+0x814>)
    576a:	2208      	movs	r2, #8
    576c:	4694      	mov	ip, r2
    576e:	44bc      	add	ip, r7
    5770:	4463      	add	r3, ip
    5772:	781b      	ldrb	r3, [r3, #0]
    5774:	2b00      	cmp	r3, #0
    5776:	d006      	beq.n	5786 <main+0x622>
    5778:	4b81      	ldr	r3, [pc, #516]	; (5980 <main+0x81c>)
    577a:	447b      	add	r3, pc
    577c:	0019      	movs	r1, r3
    577e:	2004      	movs	r0, #4
    5780:	4b80      	ldr	r3, [pc, #512]	; (5984 <main+0x820>)
    5782:	447b      	add	r3, pc
    5784:	4798      	blx	r3

	// Program memory with image
	UINT iRead = 0;
    5786:	2300      	movs	r3, #0
    5788:	60bb      	str	r3, [r7, #8]
	uint32_t len = 0;
    578a:	2300      	movs	r3, #0
    578c:	22b2      	movs	r2, #178	; 0xb2
    578e:	0092      	lsls	r2, r2, #2
    5790:	2108      	movs	r1, #8
    5792:	468c      	mov	ip, r1
    5794:	44bc      	add	ip, r7
    5796:	4462      	add	r2, ip
    5798:	6013      	str	r3, [r2, #0]
	uint32_t curr_prog_addr = APP_START_ADDRESS;
    579a:	23c0      	movs	r3, #192	; 0xc0
    579c:	025b      	lsls	r3, r3, #9
    579e:	22b1      	movs	r2, #177	; 0xb1
    57a0:	0092      	lsls	r2, r2, #2
    57a2:	2108      	movs	r1, #8
    57a4:	468c      	mov	ip, r1
    57a6:	44bc      	add	ip, r7
    57a8:	4462      	add	r2, ip
    57aa:	6013      	str	r3, [r2, #0]
	do {
		// Read block
		if(file_object.fsize > MAX_CODE_SIZE) fatal_error(6,"File exceeds max size of %d bytes.\n", MAX_CODE_SIZE);
    57ac:	4b76      	ldr	r3, [pc, #472]	; (5988 <main+0x824>)
    57ae:	22b4      	movs	r2, #180	; 0xb4
    57b0:	0092      	lsls	r2, r2, #2
    57b2:	4694      	mov	ip, r2
    57b4:	2208      	movs	r2, #8
    57b6:	4690      	mov	r8, r2
    57b8:	44b8      	add	r8, r7
    57ba:	44c4      	add	ip, r8
    57bc:	4463      	add	r3, ip
    57be:	68da      	ldr	r2, [r3, #12]
    57c0:	2380      	movs	r3, #128	; 0x80
    57c2:	025b      	lsls	r3, r3, #9
    57c4:	429a      	cmp	r2, r3
    57c6:	d909      	bls.n	57dc <main+0x678>
    57c8:	2380      	movs	r3, #128	; 0x80
    57ca:	025b      	lsls	r3, r3, #9
    57cc:	4a6f      	ldr	r2, [pc, #444]	; (598c <main+0x828>)
    57ce:	447a      	add	r2, pc
    57d0:	0011      	movs	r1, r2
    57d2:	001a      	movs	r2, r3
    57d4:	2006      	movs	r0, #6
    57d6:	4b6e      	ldr	r3, [pc, #440]	; (5990 <main+0x82c>)
    57d8:	447b      	add	r3, pc
    57da:	4798      	blx	r3
		res = f_read(&file_object, (void *) buff, MAX_BUF_SIZE, &iRead);
    57dc:	4b66      	ldr	r3, [pc, #408]	; (5978 <main+0x814>)
    57de:	2208      	movs	r2, #8
    57e0:	18ba      	adds	r2, r7, r2
    57e2:	18d5      	adds	r5, r2, r3
    57e4:	2308      	movs	r3, #8
    57e6:	18f9      	adds	r1, r7, r3
    57e8:	2380      	movs	r3, #128	; 0x80
    57ea:	009a      	lsls	r2, r3, #2
    57ec:	4b69      	ldr	r3, [pc, #420]	; (5994 <main+0x830>)
    57ee:	447b      	add	r3, pc
    57f0:	001e      	movs	r6, r3
    57f2:	2360      	movs	r3, #96	; 0x60
    57f4:	2008      	movs	r0, #8
    57f6:	1838      	adds	r0, r7, r0
    57f8:	18c0      	adds	r0, r0, r3
    57fa:	000b      	movs	r3, r1
    57fc:	0031      	movs	r1, r6
    57fe:	4e66      	ldr	r6, [pc, #408]	; (5998 <main+0x834>)
    5800:	59a6      	ldr	r6, [r4, r6]
    5802:	47b0      	blx	r6
    5804:	0003      	movs	r3, r0
    5806:	702b      	strb	r3, [r5, #0]
		if(res != FR_OK) fatal_error(7,"File read error after %d bytes\n", iRead);
    5808:	4b5b      	ldr	r3, [pc, #364]	; (5978 <main+0x814>)
    580a:	2208      	movs	r2, #8
    580c:	4694      	mov	ip, r2
    580e:	44bc      	add	ip, r7
    5810:	4463      	add	r3, ip
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d008      	beq.n	582a <main+0x6c6>
    5818:	68bb      	ldr	r3, [r7, #8]
    581a:	4a60      	ldr	r2, [pc, #384]	; (599c <main+0x838>)
    581c:	447a      	add	r2, pc
    581e:	0011      	movs	r1, r2
    5820:	001a      	movs	r2, r3
    5822:	2007      	movs	r0, #7
    5824:	4b5e      	ldr	r3, [pc, #376]	; (59a0 <main+0x83c>)
    5826:	447b      	add	r3, pc
    5828:	4798      	blx	r3
			
		// Program block
		program_memory(curr_prog_addr, buff, iRead);
    582a:	68ba      	ldr	r2, [r7, #8]
    582c:	4b5d      	ldr	r3, [pc, #372]	; (59a4 <main+0x840>)
    582e:	447b      	add	r3, pc
    5830:	0019      	movs	r1, r3
    5832:	23b1      	movs	r3, #177	; 0xb1
    5834:	009b      	lsls	r3, r3, #2
    5836:	2008      	movs	r0, #8
    5838:	4684      	mov	ip, r0
    583a:	44bc      	add	ip, r7
    583c:	4463      	add	r3, ip
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	0018      	movs	r0, r3
    5842:	4b59      	ldr	r3, [pc, #356]	; (59a8 <main+0x844>)
    5844:	447b      	add	r3, pc
    5846:	4798      	blx	r3
		debug_print("Programed %u of %u bytes\n", (unsigned int)(len), (unsigned int)(file_object.fsize));
    5848:	4b4f      	ldr	r3, [pc, #316]	; (5988 <main+0x824>)
    584a:	22b4      	movs	r2, #180	; 0xb4
    584c:	0092      	lsls	r2, r2, #2
    584e:	4694      	mov	ip, r2
    5850:	2208      	movs	r2, #8
    5852:	4690      	mov	r8, r2
    5854:	44b8      	add	r8, r7
    5856:	44c4      	add	ip, r8
    5858:	4463      	add	r3, ip
    585a:	68da      	ldr	r2, [r3, #12]
    585c:	23b2      	movs	r3, #178	; 0xb2
    585e:	009b      	lsls	r3, r3, #2
    5860:	2108      	movs	r1, #8
    5862:	468c      	mov	ip, r1
    5864:	44bc      	add	ip, r7
    5866:	4463      	add	r3, ip
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	4950      	ldr	r1, [pc, #320]	; (59ac <main+0x848>)
    586c:	4479      	add	r1, pc
    586e:	0008      	movs	r0, r1
    5870:	0019      	movs	r1, r3
    5872:	4b4f      	ldr	r3, [pc, #316]	; (59b0 <main+0x84c>)
    5874:	447b      	add	r3, pc
    5876:	4798      	blx	r3

		// Increment
		curr_prog_addr += iRead;
    5878:	68bb      	ldr	r3, [r7, #8]
    587a:	22b1      	movs	r2, #177	; 0xb1
    587c:	0092      	lsls	r2, r2, #2
    587e:	2108      	movs	r1, #8
    5880:	468c      	mov	ip, r1
    5882:	44bc      	add	ip, r7
    5884:	4462      	add	r2, ip
    5886:	6812      	ldr	r2, [r2, #0]
    5888:	18d3      	adds	r3, r2, r3
    588a:	22b1      	movs	r2, #177	; 0xb1
    588c:	0092      	lsls	r2, r2, #2
    588e:	2108      	movs	r1, #8
    5890:	468c      	mov	ip, r1
    5892:	44bc      	add	ip, r7
    5894:	4462      	add	r2, ip
    5896:	6013      	str	r3, [r2, #0]
		len += iRead;
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	22b2      	movs	r2, #178	; 0xb2
    589c:	0092      	lsls	r2, r2, #2
    589e:	2108      	movs	r1, #8
    58a0:	468c      	mov	ip, r1
    58a2:	44bc      	add	ip, r7
    58a4:	4462      	add	r2, ip
    58a6:	6812      	ldr	r2, [r2, #0]
    58a8:	18d3      	adds	r3, r2, r3
    58aa:	22b2      	movs	r2, #178	; 0xb2
    58ac:	0092      	lsls	r2, r2, #2
    58ae:	2108      	movs	r1, #8
    58b0:	468c      	mov	ip, r1
    58b2:	44bc      	add	ip, r7
    58b4:	4462      	add	r2, ip
    58b6:	6013      	str	r3, [r2, #0]
		
		// Check size
		if(len > MAX_CODE_SIZE)
    58b8:	23b2      	movs	r3, #178	; 0xb2
    58ba:	009b      	lsls	r3, r3, #2
    58bc:	2208      	movs	r2, #8
    58be:	4694      	mov	ip, r2
    58c0:	44bc      	add	ip, r7
    58c2:	4463      	add	r3, ip
    58c4:	681a      	ldr	r2, [r3, #0]
    58c6:	2380      	movs	r3, #128	; 0x80
    58c8:	025b      	lsls	r3, r3, #9
    58ca:	429a      	cmp	r2, r3
    58cc:	d906      	bls.n	58dc <main+0x778>
		fatal_error(8,"Too many bytes\n");
    58ce:	4b39      	ldr	r3, [pc, #228]	; (59b4 <main+0x850>)
    58d0:	447b      	add	r3, pc
    58d2:	0019      	movs	r1, r3
    58d4:	2008      	movs	r0, #8
    58d6:	4b38      	ldr	r3, [pc, #224]	; (59b8 <main+0x854>)
    58d8:	447b      	add	r3, pc
    58da:	4798      	blx	r3
	} while (iRead != 0);
    58dc:	68bb      	ldr	r3, [r7, #8]
    58de:	2b00      	cmp	r3, #0
    58e0:	d000      	beq.n	58e4 <main+0x780>
    58e2:	e763      	b.n	57ac <main+0x648>
	
	// Delete image from SD
	res = f_unlink((const char *)image_name);
    58e4:	4b24      	ldr	r3, [pc, #144]	; (5978 <main+0x814>)
    58e6:	2208      	movs	r2, #8
    58e8:	18ba      	adds	r2, r7, r2
    58ea:	18d5      	adds	r5, r2, r3
    58ec:	23af      	movs	r3, #175	; 0xaf
    58ee:	009b      	lsls	r3, r3, #2
    58f0:	2208      	movs	r2, #8
    58f2:	4694      	mov	ip, r2
    58f4:	44bc      	add	ip, r7
    58f6:	4463      	add	r3, ip
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	0018      	movs	r0, r3
    58fc:	4b2f      	ldr	r3, [pc, #188]	; (59bc <main+0x858>)
    58fe:	58e3      	ldr	r3, [r4, r3]
    5900:	4798      	blx	r3
    5902:	0003      	movs	r3, r0
    5904:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(9,"Unable to delete file.\n");
    5906:	4b1c      	ldr	r3, [pc, #112]	; (5978 <main+0x814>)
    5908:	2208      	movs	r2, #8
    590a:	4694      	mov	ip, r2
    590c:	44bc      	add	ip, r7
    590e:	4463      	add	r3, ip
    5910:	781b      	ldrb	r3, [r3, #0]
    5912:	2b00      	cmp	r3, #0
    5914:	d006      	beq.n	5924 <main+0x7c0>
    5916:	4b2a      	ldr	r3, [pc, #168]	; (59c0 <main+0x85c>)
    5918:	447b      	add	r3, pc
    591a:	0019      	movs	r1, r3
    591c:	2009      	movs	r0, #9
    591e:	4b29      	ldr	r3, [pc, #164]	; (59c4 <main+0x860>)
    5920:	447b      	add	r3, pc
    5922:	4798      	blx	r3
	
	// Trigger re-boot
	system_reset();
    5924:	4b28      	ldr	r3, [pc, #160]	; (59c8 <main+0x864>)
    5926:	447b      	add	r3, pc
    5928:	4798      	blx	r3

	fatal_error(10,"Should not be here\n");
    592a:	4b28      	ldr	r3, [pc, #160]	; (59cc <main+0x868>)
    592c:	447b      	add	r3, pc
    592e:	0019      	movs	r1, r3
    5930:	200a      	movs	r0, #10
    5932:	4b27      	ldr	r3, [pc, #156]	; (59d0 <main+0x86c>)
    5934:	447b      	add	r3, pc
    5936:	4798      	blx	r3
    5938:	2300      	movs	r3, #0
}
    593a:	0018      	movs	r0, r3
    593c:	46bd      	mov	sp, r7
    593e:	23b6      	movs	r3, #182	; 0xb6
    5940:	009b      	lsls	r3, r3, #2
    5942:	449d      	add	sp, r3
    5944:	bc04      	pop	{r2}
    5946:	4690      	mov	r8, r2
    5948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    594a:	46c0      	nop			; (mov r8, r8)
    594c:	0000c4ce 	.word	0x0000c4ce
    5950:	0000c4d0 	.word	0x0000c4d0
    5954:	00000655 	.word	0x00000655
    5958:	000002ce 	.word	0x000002ce
    595c:	0000c4c6 	.word	0x0000c4c6
    5960:	00000639 	.word	0x00000639
    5964:	00000481 	.word	0x00000481
    5968:	000002a4 	.word	0x000002a4
    596c:	fffff703 	.word	0xfffff703
    5970:	fffff70d 	.word	0xfffff70d
    5974:	00000044 	.word	0x00000044
    5978:	000002bb 	.word	0x000002bb
    597c:	0000029c 	.word	0x0000029c
    5980:	0000c476 	.word	0x0000c476
    5984:	0000055b 	.word	0x0000055b
    5988:	fffffd90 	.word	0xfffffd90
    598c:	0000c436 	.word	0x0000c436
    5990:	00000505 	.word	0x00000505
    5994:	1fffa9e6 	.word	0x1fffa9e6
    5998:	000001a0 	.word	0x000001a0
    599c:	0000c40c 	.word	0x0000c40c
    59a0:	000004b7 	.word	0x000004b7
    59a4:	1fffa9a6 	.word	0x1fffa9a6
    59a8:	000001e5 	.word	0x000001e5
    59ac:	0000c3dc 	.word	0x0000c3dc
    59b0:	000004d5 	.word	0x000004d5
    59b4:	0000c394 	.word	0x0000c394
    59b8:	00000405 	.word	0x00000405
    59bc:	00000110 	.word	0x00000110
    59c0:	0000c35c 	.word	0x0000c35c
    59c4:	000003bd 	.word	0x000003bd
    59c8:	fffff517 	.word	0xfffff517
    59cc:	0000c360 	.word	0x0000c360
    59d0:	000003a9 	.word	0x000003a9

000059d4 <start_application>:

// Jump to the application
static void start_application(void) {
    59d4:	b580      	push	{r7, lr}
    59d6:	b084      	sub	sp, #16
    59d8:	af00      	add	r7, sp, #0
	uint32_t *app_check_address_ptr;
	void (*application_code_entry)(void);
	app_check_address_ptr = (uint32_t *) APP_START_ADDRESS;
    59da:	23c0      	movs	r3, #192	; 0xc0
    59dc:	025b      	lsls	r3, r3, #9
    59de:	60fb      	str	r3, [r7, #12]
	
	// Don't jump if the application is blank
	if (*app_check_address_ptr == 0xFFFFFFFF) {
    59e0:	68fb      	ldr	r3, [r7, #12]
    59e2:	681b      	ldr	r3, [r3, #0]
    59e4:	3301      	adds	r3, #1
    59e6:	d016      	beq.n	5a16 <start_application+0x42>
		return;
	}

	// Jump to application
	led_blink(2,200,1);				// Good blink
    59e8:	2201      	movs	r2, #1
    59ea:	21c8      	movs	r1, #200	; 0xc8
    59ec:	2002      	movs	r0, #2
    59ee:	4b0c      	ldr	r3, [pc, #48]	; (5a20 <start_application+0x4c>)
    59f0:	447b      	add	r3, pc
    59f2:	4798      	blx	r3

	// Get the reset vector address
	application_code_entry  = *(uint32_t*)(APP_START_ADDRESS + 4);
    59f4:	4b0b      	ldr	r3, [pc, #44]	; (5a24 <start_application+0x50>)
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	60bb      	str	r3, [r7, #8]

	// Set stack pointer, set vector table offset, jump to application
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    59fa:	23c0      	movs	r3, #192	; 0xc0
    59fc:	025b      	lsls	r3, r3, #9
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	f383 8808 	msr	MSP, r3
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    5a08:	4b07      	ldr	r3, [pc, #28]	; (5a28 <start_application+0x54>)
    5a0a:	22c0      	movs	r2, #192	; 0xc0
    5a0c:	0252      	lsls	r2, r2, #9
    5a0e:	609a      	str	r2, [r3, #8]
	application_code_entry();
    5a10:	68bb      	ldr	r3, [r7, #8]
    5a12:	4798      	blx	r3
    5a14:	e000      	b.n	5a18 <start_application+0x44>
		return;
    5a16:	46c0      	nop			; (mov r8, r8)
}
    5a18:	46bd      	mov	sp, r7
    5a1a:	b004      	add	sp, #16
    5a1c:	bd80      	pop	{r7, pc}
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	000001ad 	.word	0x000001ad
    5a24:	00018004 	.word	0x00018004
    5a28:	e000ed00 	.word	0xe000ed00

00005a2c <program_memory>:

// Write a buffer of length len to address in flash memory
static void program_memory(uint32_t address, uint8_t *buffer, uint32_t len) {
    5a2c:	b590      	push	{r4, r7, lr}
    5a2e:	b087      	sub	sp, #28
    5a30:	af00      	add	r7, sp, #0
    5a32:	60f8      	str	r0, [r7, #12]
    5a34:	60b9      	str	r1, [r7, #8]
    5a36:	607a      	str	r2, [r7, #4]
    5a38:	4c4e      	ldr	r4, [pc, #312]	; (5b74 <program_memory+0x148>)
    5a3a:	447c      	add	r4, pc
	volatile enum status_code code;
	uint32_t offset = 0;
    5a3c:	2300      	movs	r3, #0
    5a3e:	617b      	str	r3, [r7, #20]
	// Multiples of Page Size
	while (len >= NVMCTRL_PAGE_SIZE) {
    5a40:	e04a      	b.n	5ad8 <program_memory+0xac>
		if ((address & 0xFF) == 0) {
    5a42:	68fb      	ldr	r3, [r7, #12]
    5a44:	22ff      	movs	r2, #255	; 0xff
    5a46:	4013      	ands	r3, r2
    5a48:	d11c      	bne.n	5a84 <program_memory+0x58>
			do {
				code = nvm_erase_row(address);
    5a4a:	68fb      	ldr	r3, [r7, #12]
    5a4c:	0018      	movs	r0, r3
    5a4e:	4b4a      	ldr	r3, [pc, #296]	; (5b78 <program_memory+0x14c>)
    5a50:	58e3      	ldr	r3, [r4, r3]
    5a52:	4798      	blx	r3
    5a54:	0003      	movs	r3, r0
    5a56:	001a      	movs	r2, r3
    5a58:	2313      	movs	r3, #19
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    5a5e:	2313      	movs	r3, #19
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	781b      	ldrb	r3, [r3, #0]
    5a64:	b2db      	uxtb	r3, r3
    5a66:	2b05      	cmp	r3, #5
    5a68:	d0ef      	beq.n	5a4a <program_memory+0x1e>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    5a6a:	2313      	movs	r3, #19
    5a6c:	18fb      	adds	r3, r7, r3
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	b2db      	uxtb	r3, r3
    5a72:	2b00      	cmp	r3, #0
    5a74:	d006      	beq.n	5a84 <program_memory+0x58>
    5a76:	4b41      	ldr	r3, [pc, #260]	; (5b7c <program_memory+0x150>)
    5a78:	447b      	add	r3, pc
    5a7a:	0019      	movs	r1, r3
    5a7c:	200b      	movs	r0, #11
    5a7e:	4b40      	ldr	r3, [pc, #256]	; (5b80 <program_memory+0x154>)
    5a80:	447b      	add	r3, pc
    5a82:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    5a84:	68ba      	ldr	r2, [r7, #8]
    5a86:	697b      	ldr	r3, [r7, #20]
    5a88:	18d1      	adds	r1, r2, r3
    5a8a:	68fb      	ldr	r3, [r7, #12]
    5a8c:	2240      	movs	r2, #64	; 0x40
    5a8e:	0018      	movs	r0, r3
    5a90:	4b3c      	ldr	r3, [pc, #240]	; (5b84 <program_memory+0x158>)
    5a92:	58e3      	ldr	r3, [r4, r3]
    5a94:	4798      	blx	r3
    5a96:	0003      	movs	r3, r0
    5a98:	001a      	movs	r2, r3
    5a9a:	2313      	movs	r3, #19
    5a9c:	18fb      	adds	r3, r7, r3
    5a9e:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    5aa0:	2313      	movs	r3, #19
    5aa2:	18fb      	adds	r3, r7, r3
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	b2db      	uxtb	r3, r3
    5aa8:	2b05      	cmp	r3, #5
    5aaa:	d0eb      	beq.n	5a84 <program_memory+0x58>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    5aac:	2313      	movs	r3, #19
    5aae:	18fb      	adds	r3, r7, r3
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	b2db      	uxtb	r3, r3
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	d006      	beq.n	5ac6 <program_memory+0x9a>
    5ab8:	4b33      	ldr	r3, [pc, #204]	; (5b88 <program_memory+0x15c>)
    5aba:	447b      	add	r3, pc
    5abc:	0019      	movs	r1, r3
    5abe:	200c      	movs	r0, #12
    5ac0:	4b32      	ldr	r3, [pc, #200]	; (5b8c <program_memory+0x160>)
    5ac2:	447b      	add	r3, pc
    5ac4:	4798      	blx	r3
		address += NVMCTRL_PAGE_SIZE;
    5ac6:	68fb      	ldr	r3, [r7, #12]
    5ac8:	3340      	adds	r3, #64	; 0x40
    5aca:	60fb      	str	r3, [r7, #12]
		offset += NVMCTRL_PAGE_SIZE;
    5acc:	697b      	ldr	r3, [r7, #20]
    5ace:	3340      	adds	r3, #64	; 0x40
    5ad0:	617b      	str	r3, [r7, #20]
		len -= NVMCTRL_PAGE_SIZE;
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	3b40      	subs	r3, #64	; 0x40
    5ad6:	607b      	str	r3, [r7, #4]
	while (len >= NVMCTRL_PAGE_SIZE) {
    5ad8:	687b      	ldr	r3, [r7, #4]
    5ada:	2b3f      	cmp	r3, #63	; 0x3f
    5adc:	d8b1      	bhi.n	5a42 <program_memory+0x16>
	}
	// Fragment (leftover) bytes
	if (len > 0) {
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d042      	beq.n	5b6a <program_memory+0x13e>
		if ((address & 0xFF) == 0) {
    5ae4:	68fb      	ldr	r3, [r7, #12]
    5ae6:	22ff      	movs	r2, #255	; 0xff
    5ae8:	4013      	ands	r3, r2
    5aea:	d11c      	bne.n	5b26 <program_memory+0xfa>
			do {
				code = nvm_erase_row(address);
    5aec:	68fb      	ldr	r3, [r7, #12]
    5aee:	0018      	movs	r0, r3
    5af0:	4b21      	ldr	r3, [pc, #132]	; (5b78 <program_memory+0x14c>)
    5af2:	58e3      	ldr	r3, [r4, r3]
    5af4:	4798      	blx	r3
    5af6:	0003      	movs	r3, r0
    5af8:	001a      	movs	r2, r3
    5afa:	2313      	movs	r3, #19
    5afc:	18fb      	adds	r3, r7, r3
    5afe:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    5b00:	2313      	movs	r3, #19
    5b02:	18fb      	adds	r3, r7, r3
    5b04:	781b      	ldrb	r3, [r3, #0]
    5b06:	b2db      	uxtb	r3, r3
    5b08:	2b05      	cmp	r3, #5
    5b0a:	d0ef      	beq.n	5aec <program_memory+0xc0>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    5b0c:	2313      	movs	r3, #19
    5b0e:	18fb      	adds	r3, r7, r3
    5b10:	781b      	ldrb	r3, [r3, #0]
    5b12:	b2db      	uxtb	r3, r3
    5b14:	2b00      	cmp	r3, #0
    5b16:	d006      	beq.n	5b26 <program_memory+0xfa>
    5b18:	4b1d      	ldr	r3, [pc, #116]	; (5b90 <program_memory+0x164>)
    5b1a:	447b      	add	r3, pc
    5b1c:	0019      	movs	r1, r3
    5b1e:	200b      	movs	r0, #11
    5b20:	4b1c      	ldr	r3, [pc, #112]	; (5b94 <program_memory+0x168>)
    5b22:	447b      	add	r3, pc
    5b24:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, len);
    5b26:	68ba      	ldr	r2, [r7, #8]
    5b28:	697b      	ldr	r3, [r7, #20]
    5b2a:	18d1      	adds	r1, r2, r3
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	b29a      	uxth	r2, r3
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	0018      	movs	r0, r3
    5b34:	4b13      	ldr	r3, [pc, #76]	; (5b84 <program_memory+0x158>)
    5b36:	58e3      	ldr	r3, [r4, r3]
    5b38:	4798      	blx	r3
    5b3a:	0003      	movs	r3, r0
    5b3c:	001a      	movs	r2, r3
    5b3e:	2313      	movs	r3, #19
    5b40:	18fb      	adds	r3, r7, r3
    5b42:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    5b44:	2313      	movs	r3, #19
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	781b      	ldrb	r3, [r3, #0]
    5b4a:	b2db      	uxtb	r3, r3
    5b4c:	2b05      	cmp	r3, #5
    5b4e:	d0ea      	beq.n	5b26 <program_memory+0xfa>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    5b50:	2313      	movs	r3, #19
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	781b      	ldrb	r3, [r3, #0]
    5b56:	b2db      	uxtb	r3, r3
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d006      	beq.n	5b6a <program_memory+0x13e>
    5b5c:	4b0e      	ldr	r3, [pc, #56]	; (5b98 <program_memory+0x16c>)
    5b5e:	447b      	add	r3, pc
    5b60:	0019      	movs	r1, r3
    5b62:	200c      	movs	r0, #12
    5b64:	4b0d      	ldr	r3, [pc, #52]	; (5b9c <program_memory+0x170>)
    5b66:	447b      	add	r3, pc
    5b68:	4798      	blx	r3
	}

}
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b007      	add	sp, #28
    5b70:	bd90      	pop	{r4, r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	0000c3a6 	.word	0x0000c3a6
    5b78:	000000dc 	.word	0x000000dc
    5b7c:	0000c228 	.word	0x0000c228
    5b80:	0000025d 	.word	0x0000025d
    5b84:	00000008 	.word	0x00000008
    5b88:	0000c1fe 	.word	0x0000c1fe
    5b8c:	0000021b 	.word	0x0000021b
    5b90:	0000c186 	.word	0x0000c186
    5b94:	000001bb 	.word	0x000001bb
    5b98:	0000c15a 	.word	0x0000c15a
    5b9c:	00000177 	.word	0x00000177

00005ba0 <led_blink>:

// Toggle LED for blink codes
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    5ba0:	b590      	push	{r4, r7, lr}
    5ba2:	b087      	sub	sp, #28
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	60f8      	str	r0, [r7, #12]
    5ba8:	60b9      	str	r1, [r7, #8]
    5baa:	1dfb      	adds	r3, r7, #7
    5bac:	701a      	strb	r2, [r3, #0]
    5bae:	4c44      	ldr	r4, [pc, #272]	; (5cc0 <led_blink+0x120>)
    5bb0:	447c      	add	r4, pc
	bool state = 0;
    5bb2:	2317      	movs	r3, #23
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	2200      	movs	r2, #0
    5bb8:	701a      	strb	r2, [r3, #0]
	struct port_config cfg;
	port_get_config_defaults(&cfg);
    5bba:	2314      	movs	r3, #20
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	0018      	movs	r0, r3
    5bc0:	4b40      	ldr	r3, [pc, #256]	; (5cc4 <led_blink+0x124>)
    5bc2:	447b      	add	r3, pc
    5bc4:	4798      	blx	r3
	while(num_blinks*2 > 0) {
    5bc6:	e05f      	b.n	5c88 <led_blink+0xe8>
		state = !state;
    5bc8:	2317      	movs	r3, #23
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	781b      	ldrb	r3, [r3, #0]
    5bce:	1e5a      	subs	r2, r3, #1
    5bd0:	4193      	sbcs	r3, r2
    5bd2:	b2db      	uxtb	r3, r3
    5bd4:	2201      	movs	r2, #1
    5bd6:	4053      	eors	r3, r2
    5bd8:	b2db      	uxtb	r3, r3
    5bda:	001a      	movs	r2, r3
    5bdc:	2317      	movs	r3, #23
    5bde:	18fb      	adds	r3, r7, r3
    5be0:	701a      	strb	r2, [r3, #0]
    5be2:	781a      	ldrb	r2, [r3, #0]
    5be4:	2101      	movs	r1, #1
    5be6:	400a      	ands	r2, r1
    5be8:	701a      	strb	r2, [r3, #0]
		if (state) {
    5bea:	2317      	movs	r3, #23
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	781b      	ldrb	r3, [r3, #0]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	d020      	beq.n	5c36 <led_blink+0x96>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    5bf4:	2314      	movs	r3, #20
    5bf6:	18fb      	adds	r3, r7, r3
    5bf8:	2201      	movs	r2, #1
    5bfa:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    5bfc:	2314      	movs	r3, #20
    5bfe:	18fb      	adds	r3, r7, r3
    5c00:	2200      	movs	r2, #0
    5c02:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, !green);
    5c04:	1dfb      	adds	r3, r7, #7
    5c06:	781b      	ldrb	r3, [r3, #0]
    5c08:	1e5a      	subs	r2, r3, #1
    5c0a:	4193      	sbcs	r3, r2
    5c0c:	b2db      	uxtb	r3, r3
    5c0e:	2201      	movs	r2, #1
    5c10:	4053      	eors	r3, r2
    5c12:	b2db      	uxtb	r3, r3
    5c14:	1c1a      	adds	r2, r3, #0
    5c16:	2301      	movs	r3, #1
    5c18:	4013      	ands	r3, r2
    5c1a:	b2db      	uxtb	r3, r3
    5c1c:	0019      	movs	r1, r3
    5c1e:	202b      	movs	r0, #43	; 0x2b
    5c20:	4b29      	ldr	r3, [pc, #164]	; (5cc8 <led_blink+0x128>)
    5c22:	447b      	add	r3, pc
    5c24:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    5c26:	2314      	movs	r3, #20
    5c28:	18fb      	adds	r3, r7, r3
    5c2a:	0019      	movs	r1, r3
    5c2c:	202b      	movs	r0, #43	; 0x2b
    5c2e:	4b27      	ldr	r3, [pc, #156]	; (5ccc <led_blink+0x12c>)
    5c30:	58e3      	ldr	r3, [r4, r3]
    5c32:	4798      	blx	r3
    5c34:	e013      	b.n	5c5e <led_blink+0xbe>
			} else {
			cfg.direction = PORT_PIN_DIR_INPUT;
    5c36:	2314      	movs	r3, #20
    5c38:	18fb      	adds	r3, r7, r3
    5c3a:	2200      	movs	r2, #0
    5c3c:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    5c3e:	2314      	movs	r3, #20
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	2200      	movs	r2, #0
    5c44:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, 0);
    5c46:	2100      	movs	r1, #0
    5c48:	202b      	movs	r0, #43	; 0x2b
    5c4a:	4b21      	ldr	r3, [pc, #132]	; (5cd0 <led_blink+0x130>)
    5c4c:	447b      	add	r3, pc
    5c4e:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    5c50:	2314      	movs	r3, #20
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	0019      	movs	r1, r3
    5c56:	202b      	movs	r0, #43	; 0x2b
    5c58:	4b1c      	ldr	r3, [pc, #112]	; (5ccc <led_blink+0x12c>)
    5c5a:	58e3      	ldr	r3, [r4, r3]
    5c5c:	4798      	blx	r3
		}
		delay_ms(blink_period_ms/2);
    5c5e:	68bb      	ldr	r3, [r7, #8]
    5c60:	3301      	adds	r3, #1
    5c62:	2b02      	cmp	r3, #2
    5c64:	d909      	bls.n	5c7a <led_blink+0xda>
    5c66:	68bb      	ldr	r3, [r7, #8]
    5c68:	2b00      	cmp	r3, #0
    5c6a:	da00      	bge.n	5c6e <led_blink+0xce>
    5c6c:	3301      	adds	r3, #1
    5c6e:	105b      	asrs	r3, r3, #1
    5c70:	0018      	movs	r0, r3
    5c72:	4b18      	ldr	r3, [pc, #96]	; (5cd4 <led_blink+0x134>)
    5c74:	58e3      	ldr	r3, [r4, r3]
    5c76:	4798      	blx	r3
    5c78:	e003      	b.n	5c82 <led_blink+0xe2>
    5c7a:	2001      	movs	r0, #1
    5c7c:	4b16      	ldr	r3, [pc, #88]	; (5cd8 <led_blink+0x138>)
    5c7e:	58e3      	ldr	r3, [r4, r3]
    5c80:	4798      	blx	r3
		num_blinks--;
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	3b01      	subs	r3, #1
    5c86:	60fb      	str	r3, [r7, #12]
	while(num_blinks*2 > 0) {
    5c88:	68fb      	ldr	r3, [r7, #12]
    5c8a:	005b      	lsls	r3, r3, #1
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	dc9b      	bgt.n	5bc8 <led_blink+0x28>
	}
	cfg.direction = PORT_PIN_DIR_INPUT;
    5c90:	2314      	movs	r3, #20
    5c92:	18fb      	adds	r3, r7, r3
    5c94:	2200      	movs	r2, #0
    5c96:	701a      	strb	r2, [r3, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    5c98:	2314      	movs	r3, #20
    5c9a:	18fb      	adds	r3, r7, r3
    5c9c:	2200      	movs	r2, #0
    5c9e:	705a      	strb	r2, [r3, #1]
	port_pin_set_output_level(LED_OUT_PIN, 0);
    5ca0:	2100      	movs	r1, #0
    5ca2:	202b      	movs	r0, #43	; 0x2b
    5ca4:	4b0d      	ldr	r3, [pc, #52]	; (5cdc <led_blink+0x13c>)
    5ca6:	447b      	add	r3, pc
    5ca8:	4798      	blx	r3
	port_pin_set_config(LED_OUT_PIN, &cfg);
    5caa:	2314      	movs	r3, #20
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	0019      	movs	r1, r3
    5cb0:	202b      	movs	r0, #43	; 0x2b
    5cb2:	4b06      	ldr	r3, [pc, #24]	; (5ccc <led_blink+0x12c>)
    5cb4:	58e3      	ldr	r3, [r4, r3]
    5cb6:	4798      	blx	r3
}
    5cb8:	46c0      	nop			; (mov r8, r8)
    5cba:	46bd      	mov	sp, r7
    5cbc:	b007      	add	sp, #28
    5cbe:	bd90      	pop	{r4, r7, pc}
    5cc0:	0000c230 	.word	0x0000c230
    5cc4:	ffffef93 	.word	0xffffef93
    5cc8:	ffffef9f 	.word	0xffffef9f
    5ccc:	00000240 	.word	0x00000240
    5cd0:	ffffef75 	.word	0xffffef75
    5cd4:	000002a4 	.word	0x000002a4
    5cd8:	000002ec 	.word	0x000002ec
    5cdc:	ffffef1b 	.word	0xffffef1b

00005ce0 <fatal_error>:

// Fatal errors: blink light, print, sleep
static void fatal_error(int numBlinks, const char* fmt, ...) {
    5ce0:	b40e      	push	{r1, r2, r3}
    5ce2:	b590      	push	{r4, r7, lr}
    5ce4:	b084      	sub	sp, #16
    5ce6:	af00      	add	r7, sp, #0
    5ce8:	6078      	str	r0, [r7, #4]
    5cea:	4c12      	ldr	r4, [pc, #72]	; (5d34 <fatal_error+0x54>)
    5cec:	447c      	add	r4, pc
	va_list args;
	va_start(args, fmt);
    5cee:	2320      	movs	r3, #32
    5cf0:	18fb      	adds	r3, r7, r3
    5cf2:	60fb      	str	r3, [r7, #12]
	debug_print(fmt, args);
    5cf4:	68fa      	ldr	r2, [r7, #12]
    5cf6:	69fb      	ldr	r3, [r7, #28]
    5cf8:	0011      	movs	r1, r2
    5cfa:	0018      	movs	r0, r3
    5cfc:	4b0e      	ldr	r3, [pc, #56]	; (5d38 <fatal_error+0x58>)
    5cfe:	447b      	add	r3, pc
    5d00:	4798      	blx	r3
	va_end(args);
	led_blink(numBlinks, 200, 0);
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	2200      	movs	r2, #0
    5d06:	21c8      	movs	r1, #200	; 0xc8
    5d08:	0018      	movs	r0, r3
    5d0a:	4b0c      	ldr	r3, [pc, #48]	; (5d3c <fatal_error+0x5c>)
    5d0c:	447b      	add	r3, pc
    5d0e:	4798      	blx	r3
	delay_ms(100);
    5d10:	2064      	movs	r0, #100	; 0x64
    5d12:	4b0b      	ldr	r3, [pc, #44]	; (5d40 <fatal_error+0x60>)
    5d14:	58e3      	ldr	r3, [r4, r3]
    5d16:	4798      	blx	r3

	// Sleep, wakes on button press and restarts bootloader
	system_sleep();
    5d18:	4b0a      	ldr	r3, [pc, #40]	; (5d44 <fatal_error+0x64>)
    5d1a:	447b      	add	r3, pc
    5d1c:	4798      	blx	r3
	system_reset();
    5d1e:	4b0a      	ldr	r3, [pc, #40]	; (5d48 <fatal_error+0x68>)
    5d20:	447b      	add	r3, pc
    5d22:	4798      	blx	r3
}
    5d24:	46c0      	nop			; (mov r8, r8)
    5d26:	46bd      	mov	sp, r7
    5d28:	b004      	add	sp, #16
    5d2a:	bc90      	pop	{r4, r7}
    5d2c:	bc08      	pop	{r3}
    5d2e:	b003      	add	sp, #12
    5d30:	4718      	bx	r3
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	0000c0f4 	.word	0x0000c0f4
    5d38:	0000004b 	.word	0x0000004b
    5d3c:	fffffe91 	.word	0xfffffe91
    5d40:	000002a4 	.word	0x000002a4
    5d44:	fffff113 	.word	0xfffff113
    5d48:	fffff11d 	.word	0xfffff11d

00005d4c <debug_print>:

static void debug_print(const char* fmt, ...) {
    5d4c:	b40f      	push	{r0, r1, r2, r3}
    5d4e:	b580      	push	{r7, lr}
    5d50:	b082      	sub	sp, #8
    5d52:	af00      	add	r7, sp, #0
    5d54:	4a08      	ldr	r2, [pc, #32]	; (5d78 <debug_print+0x2c>)
    5d56:	447a      	add	r2, pc
#ifdef ENABLE_USB_DEBUG
	va_list args;
	va_start(args, fmt);
    5d58:	2314      	movs	r3, #20
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
    5d5e:	6879      	ldr	r1, [r7, #4]
    5d60:	693b      	ldr	r3, [r7, #16]
    5d62:	0018      	movs	r0, r3
    5d64:	4b05      	ldr	r3, [pc, #20]	; (5d7c <debug_print+0x30>)
    5d66:	58d3      	ldr	r3, [r2, r3]
    5d68:	4798      	blx	r3
	va_end(args);
#endif
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	46bd      	mov	sp, r7
    5d6e:	b002      	add	sp, #8
    5d70:	bc80      	pop	{r7}
    5d72:	bc08      	pop	{r3}
    5d74:	b004      	add	sp, #16
    5d76:	4718      	bx	r3
    5d78:	0000c08a 	.word	0x0000c08a
    5d7c:	0000015c 	.word	0x0000015c

00005d80 <cpu_irq_save>:
    5d80:	b580      	push	{r7, lr}
    5d82:	b082      	sub	sp, #8
    5d84:	af00      	add	r7, sp, #0
    5d86:	4a0b      	ldr	r2, [pc, #44]	; (5db4 <cpu_irq_save+0x34>)
    5d88:	447a      	add	r2, pc
    5d8a:	f3ef 8310 	mrs	r3, PRIMASK
    5d8e:	607b      	str	r3, [r7, #4]
    5d90:	687b      	ldr	r3, [r7, #4]
    5d92:	4259      	negs	r1, r3
    5d94:	414b      	adcs	r3, r1
    5d96:	b2db      	uxtb	r3, r3
    5d98:	603b      	str	r3, [r7, #0]
    5d9a:	b672      	cpsid	i
    5d9c:	f3bf 8f5f 	dmb	sy
    5da0:	4b05      	ldr	r3, [pc, #20]	; (5db8 <cpu_irq_save+0x38>)
    5da2:	58d3      	ldr	r3, [r2, r3]
    5da4:	2200      	movs	r2, #0
    5da6:	701a      	strb	r2, [r3, #0]
    5da8:	683b      	ldr	r3, [r7, #0]
    5daa:	0018      	movs	r0, r3
    5dac:	46bd      	mov	sp, r7
    5dae:	b002      	add	sp, #8
    5db0:	bd80      	pop	{r7, pc}
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	0000c058 	.word	0x0000c058
    5db8:	000000ec 	.word	0x000000ec

00005dbc <cpu_irq_is_enabled_flags>:
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b082      	sub	sp, #8
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	1e5a      	subs	r2, r3, #1
    5dc8:	4193      	sbcs	r3, r2
    5dca:	b2db      	uxtb	r3, r3
    5dcc:	0018      	movs	r0, r3
    5dce:	46bd      	mov	sp, r7
    5dd0:	b002      	add	sp, #8
    5dd2:	bd80      	pop	{r7, pc}

00005dd4 <cpu_irq_restore>:
    5dd4:	b590      	push	{r4, r7, lr}
    5dd6:	b083      	sub	sp, #12
    5dd8:	af00      	add	r7, sp, #0
    5dda:	6078      	str	r0, [r7, #4]
    5ddc:	4c09      	ldr	r4, [pc, #36]	; (5e04 <cpu_irq_restore+0x30>)
    5dde:	447c      	add	r4, pc
    5de0:	687b      	ldr	r3, [r7, #4]
    5de2:	0018      	movs	r0, r3
    5de4:	4b08      	ldr	r3, [pc, #32]	; (5e08 <cpu_irq_restore+0x34>)
    5de6:	447b      	add	r3, pc
    5de8:	4798      	blx	r3
    5dea:	1e03      	subs	r3, r0, #0
    5dec:	d006      	beq.n	5dfc <cpu_irq_restore+0x28>
    5dee:	4b07      	ldr	r3, [pc, #28]	; (5e0c <cpu_irq_restore+0x38>)
    5df0:	58e3      	ldr	r3, [r4, r3]
    5df2:	2201      	movs	r2, #1
    5df4:	701a      	strb	r2, [r3, #0]
    5df6:	f3bf 8f5f 	dmb	sy
    5dfa:	b662      	cpsie	i
    5dfc:	46c0      	nop			; (mov r8, r8)
    5dfe:	46bd      	mov	sp, r7
    5e00:	b003      	add	sp, #12
    5e02:	bd90      	pop	{r4, r7, pc}
    5e04:	0000c002 	.word	0x0000c002
    5e08:	ffffffd3 	.word	0xffffffd3
    5e0c:	000000ec 	.word	0x000000ec

00005e10 <udi_cdc_comm_enable>:
    5e10:	b590      	push	{r4, r7, lr}
    5e12:	b083      	sub	sp, #12
    5e14:	af00      	add	r7, sp, #0
    5e16:	1dbb      	adds	r3, r7, #6
    5e18:	2200      	movs	r2, #0
    5e1a:	701a      	strb	r2, [r3, #0]
    5e1c:	4b57      	ldr	r3, [pc, #348]	; (5f7c <udi_cdc_comm_enable+0x16c>)
    5e1e:	447b      	add	r3, pc
    5e20:	2200      	movs	r2, #0
    5e22:	701a      	strb	r2, [r3, #0]
    5e24:	1dbb      	adds	r3, r7, #6
    5e26:	781a      	ldrb	r2, [r3, #0]
    5e28:	4b55      	ldr	r3, [pc, #340]	; (5f80 <udi_cdc_comm_enable+0x170>)
    5e2a:	447b      	add	r3, pc
    5e2c:	0052      	lsls	r2, r2, #1
    5e2e:	2100      	movs	r1, #0
    5e30:	52d1      	strh	r1, [r2, r3]
    5e32:	1dbb      	adds	r3, r7, #6
    5e34:	781a      	ldrb	r2, [r3, #0]
    5e36:	4953      	ldr	r1, [pc, #332]	; (5f84 <udi_cdc_comm_enable+0x174>)
    5e38:	4479      	add	r1, pc
    5e3a:	0013      	movs	r3, r2
    5e3c:	009b      	lsls	r3, r3, #2
    5e3e:	189b      	adds	r3, r3, r2
    5e40:	005b      	lsls	r3, r3, #1
    5e42:	22a1      	movs	r2, #161	; 0xa1
    5e44:	545a      	strb	r2, [r3, r1]
    5e46:	1dbb      	adds	r3, r7, #6
    5e48:	781a      	ldrb	r2, [r3, #0]
    5e4a:	494f      	ldr	r1, [pc, #316]	; (5f88 <udi_cdc_comm_enable+0x178>)
    5e4c:	4479      	add	r1, pc
    5e4e:	0013      	movs	r3, r2
    5e50:	009b      	lsls	r3, r3, #2
    5e52:	189b      	adds	r3, r3, r2
    5e54:	005b      	lsls	r3, r3, #1
    5e56:	18cb      	adds	r3, r1, r3
    5e58:	3301      	adds	r3, #1
    5e5a:	2220      	movs	r2, #32
    5e5c:	701a      	strb	r2, [r3, #0]
    5e5e:	1dbb      	adds	r3, r7, #6
    5e60:	781a      	ldrb	r2, [r3, #0]
    5e62:	494a      	ldr	r1, [pc, #296]	; (5f8c <udi_cdc_comm_enable+0x17c>)
    5e64:	4479      	add	r1, pc
    5e66:	0013      	movs	r3, r2
    5e68:	009b      	lsls	r3, r3, #2
    5e6a:	189b      	adds	r3, r3, r2
    5e6c:	005b      	lsls	r3, r3, #1
    5e6e:	18cb      	adds	r3, r1, r3
    5e70:	3302      	adds	r3, #2
    5e72:	2200      	movs	r2, #0
    5e74:	801a      	strh	r2, [r3, #0]
    5e76:	1dbb      	adds	r3, r7, #6
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d103      	bne.n	5e86 <udi_cdc_comm_enable+0x76>
    5e7e:	1dfb      	adds	r3, r7, #7
    5e80:	2200      	movs	r2, #0
    5e82:	701a      	strb	r2, [r3, #0]
    5e84:	e003      	b.n	5e8e <udi_cdc_comm_enable+0x7e>
    5e86:	1dfb      	adds	r3, r7, #7
    5e88:	2200      	movs	r2, #0
    5e8a:	701a      	strb	r2, [r3, #0]
    5e8c:	46c0      	nop			; (mov r8, r8)
    5e8e:	1dbb      	adds	r3, r7, #6
    5e90:	781a      	ldrb	r2, [r3, #0]
    5e92:	1dfb      	adds	r3, r7, #7
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	b298      	uxth	r0, r3
    5e98:	493d      	ldr	r1, [pc, #244]	; (5f90 <udi_cdc_comm_enable+0x180>)
    5e9a:	4479      	add	r1, pc
    5e9c:	0013      	movs	r3, r2
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	189b      	adds	r3, r3, r2
    5ea2:	005b      	lsls	r3, r3, #1
    5ea4:	18cb      	adds	r3, r1, r3
    5ea6:	3304      	adds	r3, #4
    5ea8:	1c02      	adds	r2, r0, #0
    5eaa:	801a      	strh	r2, [r3, #0]
    5eac:	1dbb      	adds	r3, r7, #6
    5eae:	781a      	ldrb	r2, [r3, #0]
    5eb0:	4938      	ldr	r1, [pc, #224]	; (5f94 <udi_cdc_comm_enable+0x184>)
    5eb2:	4479      	add	r1, pc
    5eb4:	0013      	movs	r3, r2
    5eb6:	009b      	lsls	r3, r3, #2
    5eb8:	189b      	adds	r3, r3, r2
    5eba:	005b      	lsls	r3, r3, #1
    5ebc:	18cb      	adds	r3, r1, r3
    5ebe:	3306      	adds	r3, #6
    5ec0:	2202      	movs	r2, #2
    5ec2:	801a      	strh	r2, [r3, #0]
    5ec4:	1dbb      	adds	r3, r7, #6
    5ec6:	781a      	ldrb	r2, [r3, #0]
    5ec8:	4933      	ldr	r1, [pc, #204]	; (5f98 <udi_cdc_comm_enable+0x188>)
    5eca:	4479      	add	r1, pc
    5ecc:	0013      	movs	r3, r2
    5ece:	009b      	lsls	r3, r3, #2
    5ed0:	189b      	adds	r3, r3, r2
    5ed2:	005b      	lsls	r3, r3, #1
    5ed4:	18cb      	adds	r3, r1, r3
    5ed6:	3308      	adds	r3, #8
    5ed8:	2200      	movs	r2, #0
    5eda:	801a      	strh	r2, [r3, #0]
    5edc:	1dbb      	adds	r3, r7, #6
    5ede:	7819      	ldrb	r1, [r3, #0]
    5ee0:	4a2e      	ldr	r2, [pc, #184]	; (5f9c <udi_cdc_comm_enable+0x18c>)
    5ee2:	447a      	add	r2, pc
    5ee4:	000b      	movs	r3, r1
    5ee6:	00db      	lsls	r3, r3, #3
    5ee8:	1a5b      	subs	r3, r3, r1
    5eea:	5c99      	ldrb	r1, [r3, r2]
    5eec:	2000      	movs	r0, #0
    5eee:	4001      	ands	r1, r0
    5ef0:	5499      	strb	r1, [r3, r2]
    5ef2:	18d1      	adds	r1, r2, r3
    5ef4:	7848      	ldrb	r0, [r1, #1]
    5ef6:	2400      	movs	r4, #0
    5ef8:	4020      	ands	r0, r4
    5efa:	1c04      	adds	r4, r0, #0
    5efc:	203e      	movs	r0, #62	; 0x3e
    5efe:	4240      	negs	r0, r0
    5f00:	4320      	orrs	r0, r4
    5f02:	7048      	strb	r0, [r1, #1]
    5f04:	18d1      	adds	r1, r2, r3
    5f06:	7888      	ldrb	r0, [r1, #2]
    5f08:	2400      	movs	r4, #0
    5f0a:	4020      	ands	r0, r4
    5f0c:	1c04      	adds	r4, r0, #0
    5f0e:	2001      	movs	r0, #1
    5f10:	4320      	orrs	r0, r4
    5f12:	7088      	strb	r0, [r1, #2]
    5f14:	18d3      	adds	r3, r2, r3
    5f16:	78da      	ldrb	r2, [r3, #3]
    5f18:	2100      	movs	r1, #0
    5f1a:	400a      	ands	r2, r1
    5f1c:	70da      	strb	r2, [r3, #3]
    5f1e:	1dbb      	adds	r3, r7, #6
    5f20:	781a      	ldrb	r2, [r3, #0]
    5f22:	491f      	ldr	r1, [pc, #124]	; (5fa0 <udi_cdc_comm_enable+0x190>)
    5f24:	4479      	add	r1, pc
    5f26:	0013      	movs	r3, r2
    5f28:	00db      	lsls	r3, r3, #3
    5f2a:	1a9b      	subs	r3, r3, r2
    5f2c:	18cb      	adds	r3, r1, r3
    5f2e:	3304      	adds	r3, #4
    5f30:	2200      	movs	r2, #0
    5f32:	701a      	strb	r2, [r3, #0]
    5f34:	1dbb      	adds	r3, r7, #6
    5f36:	781a      	ldrb	r2, [r3, #0]
    5f38:	491a      	ldr	r1, [pc, #104]	; (5fa4 <udi_cdc_comm_enable+0x194>)
    5f3a:	4479      	add	r1, pc
    5f3c:	0013      	movs	r3, r2
    5f3e:	00db      	lsls	r3, r3, #3
    5f40:	1a9b      	subs	r3, r3, r2
    5f42:	18cb      	adds	r3, r1, r3
    5f44:	3305      	adds	r3, #5
    5f46:	2200      	movs	r2, #0
    5f48:	701a      	strb	r2, [r3, #0]
    5f4a:	1dbb      	adds	r3, r7, #6
    5f4c:	781a      	ldrb	r2, [r3, #0]
    5f4e:	4916      	ldr	r1, [pc, #88]	; (5fa8 <udi_cdc_comm_enable+0x198>)
    5f50:	4479      	add	r1, pc
    5f52:	0013      	movs	r3, r2
    5f54:	00db      	lsls	r3, r3, #3
    5f56:	1a9b      	subs	r3, r3, r2
    5f58:	18cb      	adds	r3, r1, r3
    5f5a:	3306      	adds	r3, #6
    5f5c:	2208      	movs	r2, #8
    5f5e:	701a      	strb	r2, [r3, #0]
    5f60:	4b12      	ldr	r3, [pc, #72]	; (5fac <udi_cdc_comm_enable+0x19c>)
    5f62:	447b      	add	r3, pc
    5f64:	781b      	ldrb	r3, [r3, #0]
    5f66:	b2db      	uxtb	r3, r3
    5f68:	3301      	adds	r3, #1
    5f6a:	b2da      	uxtb	r2, r3
    5f6c:	4b10      	ldr	r3, [pc, #64]	; (5fb0 <udi_cdc_comm_enable+0x1a0>)
    5f6e:	447b      	add	r3, pc
    5f70:	701a      	strb	r2, [r3, #0]
    5f72:	2301      	movs	r3, #1
    5f74:	0018      	movs	r0, r3
    5f76:	46bd      	mov	sp, r7
    5f78:	b003      	add	sp, #12
    5f7a:	bd90      	pop	{r4, r7, pc}
    5f7c:	1fffa5cc 	.word	0x1fffa5cc
    5f80:	1fffa5b2 	.word	0x1fffa5b2
    5f84:	1fffa5a8 	.word	0x1fffa5a8
    5f88:	1fffa594 	.word	0x1fffa594
    5f8c:	1fffa57c 	.word	0x1fffa57c
    5f90:	1fffa546 	.word	0x1fffa546
    5f94:	1fffa52e 	.word	0x1fffa52e
    5f98:	1fffa516 	.word	0x1fffa516
    5f9c:	1fffa4f2 	.word	0x1fffa4f2
    5fa0:	1fffa4b0 	.word	0x1fffa4b0
    5fa4:	1fffa49a 	.word	0x1fffa49a
    5fa8:	1fffa484 	.word	0x1fffa484
    5fac:	1fffa488 	.word	0x1fffa488
    5fb0:	1fffa47c 	.word	0x1fffa47c

00005fb4 <udi_cdc_data_enable>:
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b082      	sub	sp, #8
    5fb8:	af00      	add	r7, sp, #0
    5fba:	1dfb      	adds	r3, r7, #7
    5fbc:	2200      	movs	r2, #0
    5fbe:	701a      	strb	r2, [r3, #0]
    5fc0:	4b3e      	ldr	r3, [pc, #248]	; (60bc <udi_cdc_data_enable+0x108>)
    5fc2:	447b      	add	r3, pc
    5fc4:	2200      	movs	r2, #0
    5fc6:	701a      	strb	r2, [r3, #0]
    5fc8:	1dfb      	adds	r3, r7, #7
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	4a3c      	ldr	r2, [pc, #240]	; (60c0 <udi_cdc_data_enable+0x10c>)
    5fce:	447a      	add	r2, pc
    5fd0:	2100      	movs	r1, #0
    5fd2:	54d1      	strb	r1, [r2, r3]
    5fd4:	1dfb      	adds	r3, r7, #7
    5fd6:	781b      	ldrb	r3, [r3, #0]
    5fd8:	4a3a      	ldr	r2, [pc, #232]	; (60c4 <udi_cdc_data_enable+0x110>)
    5fda:	447a      	add	r2, pc
    5fdc:	2100      	movs	r1, #0
    5fde:	54d1      	strb	r1, [r2, r3]
    5fe0:	1dfb      	adds	r3, r7, #7
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	4a38      	ldr	r2, [pc, #224]	; (60c8 <udi_cdc_data_enable+0x114>)
    5fe6:	447a      	add	r2, pc
    5fe8:	2100      	movs	r1, #0
    5fea:	54d1      	strb	r1, [r2, r3]
    5fec:	1dfb      	adds	r3, r7, #7
    5fee:	781a      	ldrb	r2, [r3, #0]
    5ff0:	4b36      	ldr	r3, [pc, #216]	; (60cc <udi_cdc_data_enable+0x118>)
    5ff2:	447b      	add	r3, pc
    5ff4:	0092      	lsls	r2, r2, #2
    5ff6:	2100      	movs	r1, #0
    5ff8:	52d1      	strh	r1, [r2, r3]
    5ffa:	1dfb      	adds	r3, r7, #7
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	4a34      	ldr	r2, [pc, #208]	; (60d0 <udi_cdc_data_enable+0x11c>)
    6000:	447a      	add	r2, pc
    6002:	009b      	lsls	r3, r3, #2
    6004:	18d3      	adds	r3, r2, r3
    6006:	3302      	adds	r3, #2
    6008:	2200      	movs	r2, #0
    600a:	801a      	strh	r2, [r3, #0]
    600c:	1dfb      	adds	r3, r7, #7
    600e:	781a      	ldrb	r2, [r3, #0]
    6010:	4b30      	ldr	r3, [pc, #192]	; (60d4 <udi_cdc_data_enable+0x120>)
    6012:	447b      	add	r3, pc
    6014:	0052      	lsls	r2, r2, #1
    6016:	2100      	movs	r1, #0
    6018:	52d1      	strh	r1, [r2, r3]
    601a:	1dfb      	adds	r3, r7, #7
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	0018      	movs	r0, r3
    6020:	4b2d      	ldr	r3, [pc, #180]	; (60d8 <udi_cdc_data_enable+0x124>)
    6022:	447b      	add	r3, pc
    6024:	4798      	blx	r3
    6026:	1dfb      	adds	r3, r7, #7
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	4a2c      	ldr	r2, [pc, #176]	; (60dc <udi_cdc_data_enable+0x128>)
    602c:	447a      	add	r2, pc
    602e:	2100      	movs	r1, #0
    6030:	54d1      	strb	r1, [r2, r3]
    6032:	1dfb      	adds	r3, r7, #7
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	4a2a      	ldr	r2, [pc, #168]	; (60e0 <udi_cdc_data_enable+0x12c>)
    6038:	447a      	add	r2, pc
    603a:	2100      	movs	r1, #0
    603c:	54d1      	strb	r1, [r2, r3]
    603e:	1dfb      	adds	r3, r7, #7
    6040:	781a      	ldrb	r2, [r3, #0]
    6042:	4b28      	ldr	r3, [pc, #160]	; (60e4 <udi_cdc_data_enable+0x130>)
    6044:	447b      	add	r3, pc
    6046:	0092      	lsls	r2, r2, #2
    6048:	2100      	movs	r1, #0
    604a:	52d1      	strh	r1, [r2, r3]
    604c:	1dfb      	adds	r3, r7, #7
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	4a25      	ldr	r2, [pc, #148]	; (60e8 <udi_cdc_data_enable+0x134>)
    6052:	447a      	add	r2, pc
    6054:	009b      	lsls	r3, r3, #2
    6056:	18d3      	adds	r3, r2, r3
    6058:	3302      	adds	r3, #2
    605a:	2200      	movs	r2, #0
    605c:	801a      	strh	r2, [r3, #0]
    605e:	1dfb      	adds	r3, r7, #7
    6060:	781a      	ldrb	r2, [r3, #0]
    6062:	4b22      	ldr	r3, [pc, #136]	; (60ec <udi_cdc_data_enable+0x138>)
    6064:	447b      	add	r3, pc
    6066:	0052      	lsls	r2, r2, #1
    6068:	2100      	movs	r1, #0
    606a:	52d1      	strh	r1, [r2, r3]
    606c:	1dfb      	adds	r3, r7, #7
    606e:	781b      	ldrb	r3, [r3, #0]
    6070:	0018      	movs	r0, r3
    6072:	4b1f      	ldr	r3, [pc, #124]	; (60f0 <udi_cdc_data_enable+0x13c>)
    6074:	447b      	add	r3, pc
    6076:	4798      	blx	r3
    6078:	0003      	movs	r3, r0
    607a:	001a      	movs	r2, r3
    607c:	2301      	movs	r3, #1
    607e:	4053      	eors	r3, r2
    6080:	b2db      	uxtb	r3, r3
    6082:	2b00      	cmp	r3, #0
    6084:	d001      	beq.n	608a <udi_cdc_data_enable+0xd6>
    6086:	2300      	movs	r3, #0
    6088:	e013      	b.n	60b2 <udi_cdc_data_enable+0xfe>
    608a:	4b1a      	ldr	r3, [pc, #104]	; (60f4 <udi_cdc_data_enable+0x140>)
    608c:	447b      	add	r3, pc
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	b2db      	uxtb	r3, r3
    6092:	3301      	adds	r3, #1
    6094:	b2da      	uxtb	r2, r3
    6096:	4b18      	ldr	r3, [pc, #96]	; (60f8 <udi_cdc_data_enable+0x144>)
    6098:	447b      	add	r3, pc
    609a:	701a      	strb	r2, [r3, #0]
    609c:	4b17      	ldr	r3, [pc, #92]	; (60fc <udi_cdc_data_enable+0x148>)
    609e:	447b      	add	r3, pc
    60a0:	781b      	ldrb	r3, [r3, #0]
    60a2:	b2db      	uxtb	r3, r3
    60a4:	2b01      	cmp	r3, #1
    60a6:	d103      	bne.n	60b0 <udi_cdc_data_enable+0xfc>
    60a8:	4b15      	ldr	r3, [pc, #84]	; (6100 <udi_cdc_data_enable+0x14c>)
    60aa:	447b      	add	r3, pc
    60ac:	2201      	movs	r2, #1
    60ae:	701a      	strb	r2, [r3, #0]
    60b0:	2301      	movs	r3, #1
    60b2:	0018      	movs	r0, r3
    60b4:	46bd      	mov	sp, r7
    60b6:	b002      	add	sp, #8
    60b8:	bd80      	pop	{r7, pc}
    60ba:	46c0      	nop			; (mov r8, r8)
    60bc:	1fffa429 	.word	0x1fffa429
    60c0:	1fffa53e 	.word	0x1fffa53e
    60c4:	1fffa536 	.word	0x1fffa536
    60c8:	1fffa51e 	.word	0x1fffa51e
    60cc:	1fffa50e 	.word	0x1fffa50e
    60d0:	1fffa500 	.word	0x1fffa500
    60d4:	1fffa4f6 	.word	0x1fffa4f6
    60d8:	000005bf 	.word	0x000005bf
    60dc:	1fffa450 	.word	0x1fffa450
    60e0:	1fffa43c 	.word	0x1fffa43c
    60e4:	1fffa42c 	.word	0x1fffa42c
    60e8:	1fffa41e 	.word	0x1fffa41e
    60ec:	1fffa414 	.word	0x1fffa414
    60f0:	00000281 	.word	0x00000281
    60f4:	1fffa35f 	.word	0x1fffa35f
    60f8:	1fffa353 	.word	0x1fffa353
    60fc:	1fffa34d 	.word	0x1fffa34d
    6100:	1fffa342 	.word	0x1fffa342

00006104 <udi_cdc_comm_disable>:
    6104:	b580      	push	{r7, lr}
    6106:	af00      	add	r7, sp, #0
    6108:	4b05      	ldr	r3, [pc, #20]	; (6120 <udi_cdc_comm_disable+0x1c>)
    610a:	447b      	add	r3, pc
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	b2db      	uxtb	r3, r3
    6110:	3b01      	subs	r3, #1
    6112:	b2da      	uxtb	r2, r3
    6114:	4b03      	ldr	r3, [pc, #12]	; (6124 <udi_cdc_comm_disable+0x20>)
    6116:	447b      	add	r3, pc
    6118:	701a      	strb	r2, [r3, #0]
    611a:	46c0      	nop			; (mov r8, r8)
    611c:	46bd      	mov	sp, r7
    611e:	bd80      	pop	{r7, pc}
    6120:	1fffa2e0 	.word	0x1fffa2e0
    6124:	1fffa2d4 	.word	0x1fffa2d4

00006128 <udi_cdc_data_disable>:
    6128:	b580      	push	{r7, lr}
    612a:	b082      	sub	sp, #8
    612c:	af00      	add	r7, sp, #0
    612e:	4b0b      	ldr	r3, [pc, #44]	; (615c <udi_cdc_data_disable+0x34>)
    6130:	447b      	add	r3, pc
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	b2db      	uxtb	r3, r3
    6136:	3b01      	subs	r3, #1
    6138:	b2da      	uxtb	r2, r3
    613a:	4b09      	ldr	r3, [pc, #36]	; (6160 <udi_cdc_data_disable+0x38>)
    613c:	447b      	add	r3, pc
    613e:	701a      	strb	r2, [r3, #0]
    6140:	1dfb      	adds	r3, r7, #7
    6142:	4a08      	ldr	r2, [pc, #32]	; (6164 <udi_cdc_data_disable+0x3c>)
    6144:	447a      	add	r2, pc
    6146:	7812      	ldrb	r2, [r2, #0]
    6148:	701a      	strb	r2, [r3, #0]
    614a:	4b07      	ldr	r3, [pc, #28]	; (6168 <udi_cdc_data_disable+0x40>)
    614c:	447b      	add	r3, pc
    614e:	2200      	movs	r2, #0
    6150:	701a      	strb	r2, [r3, #0]
    6152:	46c0      	nop			; (mov r8, r8)
    6154:	46bd      	mov	sp, r7
    6156:	b002      	add	sp, #8
    6158:	bd80      	pop	{r7, pc}
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	1fffa2bb 	.word	0x1fffa2bb
    6160:	1fffa2af 	.word	0x1fffa2af
    6164:	1fffa2a7 	.word	0x1fffa2a7
    6168:	1fffa2a0 	.word	0x1fffa2a0

0000616c <udi_cdc_comm_setup>:
    616c:	b5b0      	push	{r4, r5, r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	4c36      	ldr	r4, [pc, #216]	; (624c <udi_cdc_comm_setup+0xe0>)
    6174:	447c      	add	r4, pc
    6176:	1dfd      	adds	r5, r7, #7
    6178:	4b35      	ldr	r3, [pc, #212]	; (6250 <udi_cdc_comm_setup+0xe4>)
    617a:	447b      	add	r3, pc
    617c:	4798      	blx	r3
    617e:	0003      	movs	r3, r0
    6180:	702b      	strb	r3, [r5, #0]
    6182:	4b34      	ldr	r3, [pc, #208]	; (6254 <udi_cdc_comm_setup+0xe8>)
    6184:	58e3      	ldr	r3, [r4, r3]
    6186:	781b      	ldrb	r3, [r3, #0]
    6188:	b25b      	sxtb	r3, r3
    618a:	2b00      	cmp	r3, #0
    618c:	da24      	bge.n	61d8 <udi_cdc_comm_setup+0x6c>
    618e:	4b31      	ldr	r3, [pc, #196]	; (6254 <udi_cdc_comm_setup+0xe8>)
    6190:	58e3      	ldr	r3, [r4, r3]
    6192:	781b      	ldrb	r3, [r3, #0]
    6194:	001a      	movs	r2, r3
    6196:	2360      	movs	r3, #96	; 0x60
    6198:	4013      	ands	r3, r2
    619a:	2b20      	cmp	r3, #32
    619c:	d11c      	bne.n	61d8 <udi_cdc_comm_setup+0x6c>
    619e:	4b2d      	ldr	r3, [pc, #180]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61a0:	58e3      	ldr	r3, [r4, r3]
    61a2:	785b      	ldrb	r3, [r3, #1]
    61a4:	2b21      	cmp	r3, #33	; 0x21
    61a6:	d117      	bne.n	61d8 <udi_cdc_comm_setup+0x6c>
    61a8:	4b2a      	ldr	r3, [pc, #168]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61aa:	58e3      	ldr	r3, [r4, r3]
    61ac:	88db      	ldrh	r3, [r3, #6]
    61ae:	2b07      	cmp	r3, #7
    61b0:	d001      	beq.n	61b6 <udi_cdc_comm_setup+0x4a>
    61b2:	2300      	movs	r3, #0
    61b4:	e046      	b.n	6244 <udi_cdc_comm_setup+0xd8>
    61b6:	1dfb      	adds	r3, r7, #7
    61b8:	781a      	ldrb	r2, [r3, #0]
    61ba:	0013      	movs	r3, r2
    61bc:	00db      	lsls	r3, r3, #3
    61be:	1a9b      	subs	r3, r3, r2
    61c0:	4a25      	ldr	r2, [pc, #148]	; (6258 <udi_cdc_comm_setup+0xec>)
    61c2:	447a      	add	r2, pc
    61c4:	189a      	adds	r2, r3, r2
    61c6:	4b23      	ldr	r3, [pc, #140]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61c8:	58e3      	ldr	r3, [r4, r3]
    61ca:	609a      	str	r2, [r3, #8]
    61cc:	4b21      	ldr	r3, [pc, #132]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61ce:	58e3      	ldr	r3, [r4, r3]
    61d0:	2207      	movs	r2, #7
    61d2:	819a      	strh	r2, [r3, #12]
    61d4:	2301      	movs	r3, #1
    61d6:	e035      	b.n	6244 <udi_cdc_comm_setup+0xd8>
    61d8:	4b1e      	ldr	r3, [pc, #120]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61da:	58e3      	ldr	r3, [r4, r3]
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	b25b      	sxtb	r3, r3
    61e0:	2b00      	cmp	r3, #0
    61e2:	db2e      	blt.n	6242 <udi_cdc_comm_setup+0xd6>
    61e4:	4b1b      	ldr	r3, [pc, #108]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61e6:	58e3      	ldr	r3, [r4, r3]
    61e8:	781b      	ldrb	r3, [r3, #0]
    61ea:	001a      	movs	r2, r3
    61ec:	2360      	movs	r3, #96	; 0x60
    61ee:	4013      	ands	r3, r2
    61f0:	2b20      	cmp	r3, #32
    61f2:	d126      	bne.n	6242 <udi_cdc_comm_setup+0xd6>
    61f4:	4b17      	ldr	r3, [pc, #92]	; (6254 <udi_cdc_comm_setup+0xe8>)
    61f6:	58e3      	ldr	r3, [r4, r3]
    61f8:	785b      	ldrb	r3, [r3, #1]
    61fa:	2b20      	cmp	r3, #32
    61fc:	d002      	beq.n	6204 <udi_cdc_comm_setup+0x98>
    61fe:	2b22      	cmp	r3, #34	; 0x22
    6200:	d01d      	beq.n	623e <udi_cdc_comm_setup+0xd2>
    6202:	e01e      	b.n	6242 <udi_cdc_comm_setup+0xd6>
    6204:	4b13      	ldr	r3, [pc, #76]	; (6254 <udi_cdc_comm_setup+0xe8>)
    6206:	58e3      	ldr	r3, [r4, r3]
    6208:	88db      	ldrh	r3, [r3, #6]
    620a:	2b07      	cmp	r3, #7
    620c:	d001      	beq.n	6212 <udi_cdc_comm_setup+0xa6>
    620e:	2300      	movs	r3, #0
    6210:	e018      	b.n	6244 <udi_cdc_comm_setup+0xd8>
    6212:	4b10      	ldr	r3, [pc, #64]	; (6254 <udi_cdc_comm_setup+0xe8>)
    6214:	58e3      	ldr	r3, [r4, r3]
    6216:	4a11      	ldr	r2, [pc, #68]	; (625c <udi_cdc_comm_setup+0xf0>)
    6218:	447a      	add	r2, pc
    621a:	611a      	str	r2, [r3, #16]
    621c:	1dfb      	adds	r3, r7, #7
    621e:	781a      	ldrb	r2, [r3, #0]
    6220:	0013      	movs	r3, r2
    6222:	00db      	lsls	r3, r3, #3
    6224:	1a9b      	subs	r3, r3, r2
    6226:	4a0e      	ldr	r2, [pc, #56]	; (6260 <udi_cdc_comm_setup+0xf4>)
    6228:	447a      	add	r2, pc
    622a:	189a      	adds	r2, r3, r2
    622c:	4b09      	ldr	r3, [pc, #36]	; (6254 <udi_cdc_comm_setup+0xe8>)
    622e:	58e3      	ldr	r3, [r4, r3]
    6230:	609a      	str	r2, [r3, #8]
    6232:	4b08      	ldr	r3, [pc, #32]	; (6254 <udi_cdc_comm_setup+0xe8>)
    6234:	58e3      	ldr	r3, [r4, r3]
    6236:	2207      	movs	r2, #7
    6238:	819a      	strh	r2, [r3, #12]
    623a:	2301      	movs	r3, #1
    623c:	e002      	b.n	6244 <udi_cdc_comm_setup+0xd8>
    623e:	2301      	movs	r3, #1
    6240:	e000      	b.n	6244 <udi_cdc_comm_setup+0xd8>
    6242:	2300      	movs	r3, #0
    6244:	0018      	movs	r0, r3
    6246:	46bd      	mov	sp, r7
    6248:	b002      	add	sp, #8
    624a:	bdb0      	pop	{r4, r5, r7, pc}
    624c:	0000bc6c 	.word	0x0000bc6c
    6250:	0000011f 	.word	0x0000011f
    6254:	000001e8 	.word	0x000001e8
    6258:	1fffa212 	.word	0x1fffa212
    625c:	000000bd 	.word	0x000000bd
    6260:	1fffa1ac 	.word	0x1fffa1ac

00006264 <udi_cdc_data_setup>:
    6264:	b580      	push	{r7, lr}
    6266:	af00      	add	r7, sp, #0
    6268:	2300      	movs	r3, #0
    626a:	0018      	movs	r0, r3
    626c:	46bd      	mov	sp, r7
    626e:	bd80      	pop	{r7, pc}

00006270 <udi_cdc_getsetting>:
    6270:	b580      	push	{r7, lr}
    6272:	af00      	add	r7, sp, #0
    6274:	2300      	movs	r3, #0
    6276:	0018      	movs	r0, r3
    6278:	46bd      	mov	sp, r7
    627a:	bd80      	pop	{r7, pc}

0000627c <udi_cdc_data_sof_notify>:
    627c:	b580      	push	{r7, lr}
    627e:	af00      	add	r7, sp, #0
    6280:	4b04      	ldr	r3, [pc, #16]	; (6294 <udi_cdc_data_sof_notify+0x18>)
    6282:	447b      	add	r3, pc
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	0018      	movs	r0, r3
    6288:	4b03      	ldr	r3, [pc, #12]	; (6298 <udi_cdc_data_sof_notify+0x1c>)
    628a:	447b      	add	r3, pc
    628c:	4798      	blx	r3
    628e:	46c0      	nop			; (mov r8, r8)
    6290:	46bd      	mov	sp, r7
    6292:	bd80      	pop	{r7, pc}
    6294:	1fffa28f 	.word	0x1fffa28f
    6298:	00000357 	.word	0x00000357

0000629c <udi_cdc_setup_to_port>:
    629c:	b580      	push	{r7, lr}
    629e:	b082      	sub	sp, #8
    62a0:	af00      	add	r7, sp, #0
    62a2:	4a0b      	ldr	r2, [pc, #44]	; (62d0 <udi_cdc_setup_to_port+0x34>)
    62a4:	447a      	add	r2, pc
    62a6:	4b0b      	ldr	r3, [pc, #44]	; (62d4 <udi_cdc_setup_to_port+0x38>)
    62a8:	58d3      	ldr	r3, [r2, r3]
    62aa:	889b      	ldrh	r3, [r3, #4]
    62ac:	001a      	movs	r2, r3
    62ae:	23ff      	movs	r3, #255	; 0xff
    62b0:	4013      	ands	r3, r2
    62b2:	d103      	bne.n	62bc <udi_cdc_setup_to_port+0x20>
    62b4:	1dfb      	adds	r3, r7, #7
    62b6:	2200      	movs	r2, #0
    62b8:	701a      	strb	r2, [r3, #0]
    62ba:	e003      	b.n	62c4 <udi_cdc_setup_to_port+0x28>
    62bc:	1dfb      	adds	r3, r7, #7
    62be:	2200      	movs	r2, #0
    62c0:	701a      	strb	r2, [r3, #0]
    62c2:	46c0      	nop			; (mov r8, r8)
    62c4:	1dfb      	adds	r3, r7, #7
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	0018      	movs	r0, r3
    62ca:	46bd      	mov	sp, r7
    62cc:	b002      	add	sp, #8
    62ce:	bd80      	pop	{r7, pc}
    62d0:	0000bb3c 	.word	0x0000bb3c
    62d4:	000001e8 	.word	0x000001e8

000062d8 <udi_cdc_line_coding_received>:
    62d8:	b590      	push	{r4, r7, lr}
    62da:	b083      	sub	sp, #12
    62dc:	af00      	add	r7, sp, #0
    62de:	1dfc      	adds	r4, r7, #7
    62e0:	4b04      	ldr	r3, [pc, #16]	; (62f4 <udi_cdc_line_coding_received+0x1c>)
    62e2:	447b      	add	r3, pc
    62e4:	4798      	blx	r3
    62e6:	0003      	movs	r3, r0
    62e8:	7023      	strb	r3, [r4, #0]
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	46bd      	mov	sp, r7
    62ee:	b003      	add	sp, #12
    62f0:	bd90      	pop	{r4, r7, pc}
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	ffffffb7 	.word	0xffffffb7

000062f8 <udi_cdc_rx_start>:
    62f8:	b5b0      	push	{r4, r5, r7, lr}
    62fa:	b088      	sub	sp, #32
    62fc:	af02      	add	r7, sp, #8
    62fe:	0002      	movs	r2, r0
    6300:	1dfb      	adds	r3, r7, #7
    6302:	701a      	strb	r2, [r3, #0]
    6304:	4c41      	ldr	r4, [pc, #260]	; (640c <udi_cdc_rx_start+0x114>)
    6306:	447c      	add	r4, pc
    6308:	1dfb      	adds	r3, r7, #7
    630a:	2200      	movs	r2, #0
    630c:	701a      	strb	r2, [r3, #0]
    630e:	4b40      	ldr	r3, [pc, #256]	; (6410 <udi_cdc_rx_start+0x118>)
    6310:	447b      	add	r3, pc
    6312:	4798      	blx	r3
    6314:	0003      	movs	r3, r0
    6316:	613b      	str	r3, [r7, #16]
    6318:	1dfb      	adds	r3, r7, #7
    631a:	781a      	ldrb	r2, [r3, #0]
    631c:	230f      	movs	r3, #15
    631e:	18fb      	adds	r3, r7, r3
    6320:	493c      	ldr	r1, [pc, #240]	; (6414 <udi_cdc_rx_start+0x11c>)
    6322:	4479      	add	r1, pc
    6324:	5c8a      	ldrb	r2, [r1, r2]
    6326:	701a      	strb	r2, [r3, #0]
    6328:	1dfb      	adds	r3, r7, #7
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	4a3a      	ldr	r2, [pc, #232]	; (6418 <udi_cdc_rx_start+0x120>)
    632e:	447a      	add	r2, pc
    6330:	5cd3      	ldrb	r3, [r2, r3]
    6332:	b2db      	uxtb	r3, r3
    6334:	2b00      	cmp	r3, #0
    6336:	d114      	bne.n	6362 <udi_cdc_rx_start+0x6a>
    6338:	1dfb      	adds	r3, r7, #7
    633a:	781a      	ldrb	r2, [r3, #0]
    633c:	4b37      	ldr	r3, [pc, #220]	; (641c <udi_cdc_rx_start+0x124>)
    633e:	447b      	add	r3, pc
    6340:	0052      	lsls	r2, r2, #1
    6342:	5ad3      	ldrh	r3, [r2, r3]
    6344:	b29a      	uxth	r2, r3
    6346:	1dfb      	adds	r3, r7, #7
    6348:	7818      	ldrb	r0, [r3, #0]
    634a:	230f      	movs	r3, #15
    634c:	18fb      	adds	r3, r7, r3
    634e:	7819      	ldrb	r1, [r3, #0]
    6350:	4b33      	ldr	r3, [pc, #204]	; (6420 <udi_cdc_rx_start+0x128>)
    6352:	447b      	add	r3, pc
    6354:	0040      	lsls	r0, r0, #1
    6356:	1841      	adds	r1, r0, r1
    6358:	0049      	lsls	r1, r1, #1
    635a:	5acb      	ldrh	r3, [r1, r3]
    635c:	b29b      	uxth	r3, r3
    635e:	429a      	cmp	r2, r3
    6360:	d206      	bcs.n	6370 <udi_cdc_rx_start+0x78>
    6362:	693b      	ldr	r3, [r7, #16]
    6364:	0018      	movs	r0, r3
    6366:	4b2f      	ldr	r3, [pc, #188]	; (6424 <udi_cdc_rx_start+0x12c>)
    6368:	447b      	add	r3, pc
    636a:	4798      	blx	r3
    636c:	2300      	movs	r3, #0
    636e:	e048      	b.n	6402 <udi_cdc_rx_start+0x10a>
    6370:	1dfb      	adds	r3, r7, #7
    6372:	781a      	ldrb	r2, [r3, #0]
    6374:	4b2c      	ldr	r3, [pc, #176]	; (6428 <udi_cdc_rx_start+0x130>)
    6376:	447b      	add	r3, pc
    6378:	0052      	lsls	r2, r2, #1
    637a:	2100      	movs	r1, #0
    637c:	52d1      	strh	r1, [r2, r3]
    637e:	1dfb      	adds	r3, r7, #7
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	220f      	movs	r2, #15
    6384:	18ba      	adds	r2, r7, r2
    6386:	7812      	ldrb	r2, [r2, #0]
    6388:	4251      	negs	r1, r2
    638a:	414a      	adcs	r2, r1
    638c:	b2d2      	uxtb	r2, r2
    638e:	0011      	movs	r1, r2
    6390:	4a26      	ldr	r2, [pc, #152]	; (642c <udi_cdc_rx_start+0x134>)
    6392:	447a      	add	r2, pc
    6394:	54d1      	strb	r1, [r2, r3]
    6396:	1dfb      	adds	r3, r7, #7
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	4a25      	ldr	r2, [pc, #148]	; (6430 <udi_cdc_rx_start+0x138>)
    639c:	447a      	add	r2, pc
    639e:	2101      	movs	r1, #1
    63a0:	54d1      	strb	r1, [r2, r3]
    63a2:	693b      	ldr	r3, [r7, #16]
    63a4:	0018      	movs	r0, r3
    63a6:	4b23      	ldr	r3, [pc, #140]	; (6434 <udi_cdc_rx_start+0x13c>)
    63a8:	447b      	add	r3, pc
    63aa:	4798      	blx	r3
    63ac:	1dfb      	adds	r3, r7, #7
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	0018      	movs	r0, r3
    63b2:	4b21      	ldr	r3, [pc, #132]	; (6438 <udi_cdc_rx_start+0x140>)
    63b4:	58e3      	ldr	r3, [r4, r3]
    63b6:	4798      	blx	r3
    63b8:	1dfb      	adds	r3, r7, #7
    63ba:	781b      	ldrb	r3, [r3, #0]
    63bc:	2b00      	cmp	r3, #0
    63be:	d104      	bne.n	63ca <udi_cdc_rx_start+0xd2>
    63c0:	2317      	movs	r3, #23
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	2202      	movs	r2, #2
    63c6:	701a      	strb	r2, [r3, #0]
    63c8:	e004      	b.n	63d4 <udi_cdc_rx_start+0xdc>
    63ca:	2317      	movs	r3, #23
    63cc:	18fb      	adds	r3, r7, r3
    63ce:	2202      	movs	r2, #2
    63d0:	701a      	strb	r2, [r3, #0]
    63d2:	46c0      	nop			; (mov r8, r8)
    63d4:	1dfb      	adds	r3, r7, #7
    63d6:	781a      	ldrb	r2, [r3, #0]
    63d8:	230f      	movs	r3, #15
    63da:	18fb      	adds	r3, r7, r3
    63dc:	781b      	ldrb	r3, [r3, #0]
    63de:	0052      	lsls	r2, r2, #1
    63e0:	18d3      	adds	r3, r2, r3
    63e2:	019b      	lsls	r3, r3, #6
    63e4:	4a15      	ldr	r2, [pc, #84]	; (643c <udi_cdc_rx_start+0x144>)
    63e6:	447a      	add	r2, pc
    63e8:	189a      	adds	r2, r3, r2
    63ea:	2317      	movs	r3, #23
    63ec:	18fb      	adds	r3, r7, r3
    63ee:	7818      	ldrb	r0, [r3, #0]
    63f0:	4b13      	ldr	r3, [pc, #76]	; (6440 <udi_cdc_rx_start+0x148>)
    63f2:	447b      	add	r3, pc
    63f4:	9300      	str	r3, [sp, #0]
    63f6:	2340      	movs	r3, #64	; 0x40
    63f8:	2101      	movs	r1, #1
    63fa:	4d12      	ldr	r5, [pc, #72]	; (6444 <udi_cdc_rx_start+0x14c>)
    63fc:	5964      	ldr	r4, [r4, r5]
    63fe:	47a0      	blx	r4
    6400:	0003      	movs	r3, r0
    6402:	0018      	movs	r0, r3
    6404:	46bd      	mov	sp, r7
    6406:	b006      	add	sp, #24
    6408:	bdb0      	pop	{r4, r5, r7, pc}
    640a:	46c0      	nop			; (mov r8, r8)
    640c:	0000bada 	.word	0x0000bada
    6410:	fffffa6d 	.word	0xfffffa6d
    6414:	1fffa152 	.word	0x1fffa152
    6418:	1fffa14e 	.word	0x1fffa14e
    641c:	1fffa13a 	.word	0x1fffa13a
    6420:	1fffa11e 	.word	0x1fffa11e
    6424:	fffffa69 	.word	0xfffffa69
    6428:	1fffa102 	.word	0x1fffa102
    642c:	1fffa0e2 	.word	0x1fffa0e2
    6430:	1fffa0e0 	.word	0x1fffa0e0
    6434:	fffffa29 	.word	0xfffffa29
    6438:	000001b4 	.word	0x000001b4
    643c:	1fffa00a 	.word	0x1fffa00a
    6440:	00000053 	.word	0x00000053
    6444:	00000070 	.word	0x00000070

00006448 <udi_cdc_data_received>:
    6448:	b5b0      	push	{r4, r5, r7, lr}
    644a:	b086      	sub	sp, #24
    644c:	af02      	add	r7, sp, #8
    644e:	6039      	str	r1, [r7, #0]
    6450:	0011      	movs	r1, r2
    6452:	1dfb      	adds	r3, r7, #7
    6454:	1c02      	adds	r2, r0, #0
    6456:	701a      	strb	r2, [r3, #0]
    6458:	1dbb      	adds	r3, r7, #6
    645a:	1c0a      	adds	r2, r1, #0
    645c:	701a      	strb	r2, [r3, #0]
    645e:	4d2e      	ldr	r5, [pc, #184]	; (6518 <udi_cdc_data_received+0xd0>)
    6460:	447d      	add	r5, pc
    6462:	1dbb      	adds	r3, r7, #6
    6464:	781b      	ldrb	r3, [r3, #0]
    6466:	2b02      	cmp	r3, #2
    6468:	d104      	bne.n	6474 <udi_cdc_data_received+0x2c>
    646a:	230f      	movs	r3, #15
    646c:	18fb      	adds	r3, r7, r3
    646e:	2200      	movs	r2, #0
    6470:	701a      	strb	r2, [r3, #0]
    6472:	e004      	b.n	647e <udi_cdc_data_received+0x36>
    6474:	230f      	movs	r3, #15
    6476:	18fb      	adds	r3, r7, r3
    6478:	2200      	movs	r2, #0
    647a:	701a      	strb	r2, [r3, #0]
    647c:	46c0      	nop			; (mov r8, r8)
    647e:	1dfb      	adds	r3, r7, #7
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	2b00      	cmp	r3, #0
    6484:	d144      	bne.n	6510 <udi_cdc_data_received+0xc8>
    6486:	230f      	movs	r3, #15
    6488:	18fb      	adds	r3, r7, r3
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	4a23      	ldr	r2, [pc, #140]	; (651c <udi_cdc_data_received+0xd4>)
    648e:	447a      	add	r2, pc
    6490:	5cd3      	ldrb	r3, [r2, r3]
    6492:	b2db      	uxtb	r3, r3
    6494:	425a      	negs	r2, r3
    6496:	4153      	adcs	r3, r2
    6498:	b2da      	uxtb	r2, r3
    649a:	230e      	movs	r3, #14
    649c:	18fb      	adds	r3, r7, r3
    649e:	701a      	strb	r2, [r3, #0]
    64a0:	683b      	ldr	r3, [r7, #0]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d116      	bne.n	64d4 <udi_cdc_data_received+0x8c>
    64a6:	230f      	movs	r3, #15
    64a8:	18fb      	adds	r3, r7, r3
    64aa:	781a      	ldrb	r2, [r3, #0]
    64ac:	230e      	movs	r3, #14
    64ae:	18fb      	adds	r3, r7, r3
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	0052      	lsls	r2, r2, #1
    64b4:	18d3      	adds	r3, r2, r3
    64b6:	019b      	lsls	r3, r3, #6
    64b8:	4a19      	ldr	r2, [pc, #100]	; (6520 <udi_cdc_data_received+0xd8>)
    64ba:	447a      	add	r2, pc
    64bc:	189a      	adds	r2, r3, r2
    64be:	1dbb      	adds	r3, r7, #6
    64c0:	7818      	ldrb	r0, [r3, #0]
    64c2:	4b18      	ldr	r3, [pc, #96]	; (6524 <udi_cdc_data_received+0xdc>)
    64c4:	447b      	add	r3, pc
    64c6:	9300      	str	r3, [sp, #0]
    64c8:	2340      	movs	r3, #64	; 0x40
    64ca:	2101      	movs	r1, #1
    64cc:	4c16      	ldr	r4, [pc, #88]	; (6528 <udi_cdc_data_received+0xe0>)
    64ce:	592c      	ldr	r4, [r5, r4]
    64d0:	47a0      	blx	r4
    64d2:	e01e      	b.n	6512 <udi_cdc_data_received+0xca>
    64d4:	230f      	movs	r3, #15
    64d6:	18fb      	adds	r3, r7, r3
    64d8:	7819      	ldrb	r1, [r3, #0]
    64da:	230e      	movs	r3, #14
    64dc:	18fb      	adds	r3, r7, r3
    64de:	781a      	ldrb	r2, [r3, #0]
    64e0:	683b      	ldr	r3, [r7, #0]
    64e2:	b298      	uxth	r0, r3
    64e4:	4b11      	ldr	r3, [pc, #68]	; (652c <udi_cdc_data_received+0xe4>)
    64e6:	447b      	add	r3, pc
    64e8:	0049      	lsls	r1, r1, #1
    64ea:	188a      	adds	r2, r1, r2
    64ec:	0052      	lsls	r2, r2, #1
    64ee:	1c01      	adds	r1, r0, #0
    64f0:	52d1      	strh	r1, [r2, r3]
    64f2:	230f      	movs	r3, #15
    64f4:	18fb      	adds	r3, r7, r3
    64f6:	781b      	ldrb	r3, [r3, #0]
    64f8:	4a0d      	ldr	r2, [pc, #52]	; (6530 <udi_cdc_data_received+0xe8>)
    64fa:	447a      	add	r2, pc
    64fc:	2100      	movs	r1, #0
    64fe:	54d1      	strb	r1, [r2, r3]
    6500:	230f      	movs	r3, #15
    6502:	18fb      	adds	r3, r7, r3
    6504:	781b      	ldrb	r3, [r3, #0]
    6506:	0018      	movs	r0, r3
    6508:	4b0a      	ldr	r3, [pc, #40]	; (6534 <udi_cdc_data_received+0xec>)
    650a:	447b      	add	r3, pc
    650c:	4798      	blx	r3
    650e:	e000      	b.n	6512 <udi_cdc_data_received+0xca>
    6510:	46c0      	nop			; (mov r8, r8)
    6512:	46bd      	mov	sp, r7
    6514:	b004      	add	sp, #16
    6516:	bdb0      	pop	{r4, r5, r7, pc}
    6518:	0000b980 	.word	0x0000b980
    651c:	1fff9fe6 	.word	0x1fff9fe6
    6520:	1fff9f36 	.word	0x1fff9f36
    6524:	ffffff81 	.word	0xffffff81
    6528:	00000070 	.word	0x00000070
    652c:	1fff9f8a 	.word	0x1fff9f8a
    6530:	1fff9f82 	.word	0x1fff9f82
    6534:	fffffdeb 	.word	0xfffffdeb

00006538 <udi_cdc_data_sent>:
    6538:	b580      	push	{r7, lr}
    653a:	b084      	sub	sp, #16
    653c:	af00      	add	r7, sp, #0
    653e:	6039      	str	r1, [r7, #0]
    6540:	0011      	movs	r1, r2
    6542:	1dfb      	adds	r3, r7, #7
    6544:	1c02      	adds	r2, r0, #0
    6546:	701a      	strb	r2, [r3, #0]
    6548:	1dbb      	adds	r3, r7, #6
    654a:	1c0a      	adds	r2, r1, #0
    654c:	701a      	strb	r2, [r3, #0]
    654e:	1dbb      	adds	r3, r7, #6
    6550:	781b      	ldrb	r3, [r3, #0]
    6552:	2b81      	cmp	r3, #129	; 0x81
    6554:	d104      	bne.n	6560 <udi_cdc_data_sent+0x28>
    6556:	230f      	movs	r3, #15
    6558:	18fb      	adds	r3, r7, r3
    655a:	2200      	movs	r2, #0
    655c:	701a      	strb	r2, [r3, #0]
    655e:	e004      	b.n	656a <udi_cdc_data_sent+0x32>
    6560:	230f      	movs	r3, #15
    6562:	18fb      	adds	r3, r7, r3
    6564:	2200      	movs	r2, #0
    6566:	701a      	strb	r2, [r3, #0]
    6568:	46c0      	nop			; (mov r8, r8)
    656a:	1dfb      	adds	r3, r7, #7
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	2b00      	cmp	r3, #0
    6570:	d12a      	bne.n	65c8 <udi_cdc_data_sent+0x90>
    6572:	230f      	movs	r3, #15
    6574:	18fb      	adds	r3, r7, r3
    6576:	781a      	ldrb	r2, [r3, #0]
    6578:	230f      	movs	r3, #15
    657a:	18fb      	adds	r3, r7, r3
    657c:	781b      	ldrb	r3, [r3, #0]
    657e:	4914      	ldr	r1, [pc, #80]	; (65d0 <udi_cdc_data_sent+0x98>)
    6580:	4479      	add	r1, pc
    6582:	5ccb      	ldrb	r3, [r1, r3]
    6584:	b2db      	uxtb	r3, r3
    6586:	4259      	negs	r1, r3
    6588:	414b      	adcs	r3, r1
    658a:	b2db      	uxtb	r3, r3
    658c:	0019      	movs	r1, r3
    658e:	4b11      	ldr	r3, [pc, #68]	; (65d4 <udi_cdc_data_sent+0x9c>)
    6590:	447b      	add	r3, pc
    6592:	0052      	lsls	r2, r2, #1
    6594:	1852      	adds	r2, r2, r1
    6596:	0052      	lsls	r2, r2, #1
    6598:	2100      	movs	r1, #0
    659a:	52d1      	strh	r1, [r2, r3]
    659c:	230f      	movs	r3, #15
    659e:	18fb      	adds	r3, r7, r3
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	4a0d      	ldr	r2, [pc, #52]	; (65d8 <udi_cdc_data_sent+0xa0>)
    65a4:	447a      	add	r2, pc
    65a6:	2100      	movs	r1, #0
    65a8:	54d1      	strb	r1, [r2, r3]
    65aa:	230f      	movs	r3, #15
    65ac:	18fb      	adds	r3, r7, r3
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	4a0a      	ldr	r2, [pc, #40]	; (65dc <udi_cdc_data_sent+0xa4>)
    65b2:	447a      	add	r2, pc
    65b4:	2100      	movs	r1, #0
    65b6:	54d1      	strb	r1, [r2, r3]
    65b8:	230f      	movs	r3, #15
    65ba:	18fb      	adds	r3, r7, r3
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	0018      	movs	r0, r3
    65c0:	4b07      	ldr	r3, [pc, #28]	; (65e0 <udi_cdc_data_sent+0xa8>)
    65c2:	447b      	add	r3, pc
    65c4:	4798      	blx	r3
    65c6:	e000      	b.n	65ca <udi_cdc_data_sent+0x92>
    65c8:	46c0      	nop			; (mov r8, r8)
    65ca:	46bd      	mov	sp, r7
    65cc:	b004      	add	sp, #16
    65ce:	bd80      	pop	{r7, pc}
    65d0:	1fff9f84 	.word	0x1fff9f84
    65d4:	1fff9f70 	.word	0x1fff9f70
    65d8:	1fff9f6c 	.word	0x1fff9f6c
    65dc:	1fff9f5a 	.word	0x1fff9f5a
    65e0:	0000001f 	.word	0x0000001f

000065e4 <udi_cdc_tx_send>:
    65e4:	b5b0      	push	{r4, r5, r7, lr}
    65e6:	b088      	sub	sp, #32
    65e8:	af02      	add	r7, sp, #8
    65ea:	0002      	movs	r2, r0
    65ec:	1dfb      	adds	r3, r7, #7
    65ee:	701a      	strb	r2, [r3, #0]
    65f0:	4c89      	ldr	r4, [pc, #548]	; (6818 <udi_cdc_tx_send+0x234>)
    65f2:	447c      	add	r4, pc
    65f4:	1dfb      	adds	r3, r7, #7
    65f6:	2200      	movs	r2, #0
    65f8:	701a      	strb	r2, [r3, #0]
    65fa:	1dfb      	adds	r3, r7, #7
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	4a87      	ldr	r2, [pc, #540]	; (681c <udi_cdc_tx_send+0x238>)
    6600:	447a      	add	r2, pc
    6602:	5cd3      	ldrb	r3, [r2, r3]
    6604:	b2db      	uxtb	r3, r3
    6606:	2b00      	cmp	r3, #0
    6608:	d000      	beq.n	660c <udi_cdc_tx_send+0x28>
    660a:	e0fe      	b.n	680a <udi_cdc_tx_send+0x226>
    660c:	4b84      	ldr	r3, [pc, #528]	; (6820 <udi_cdc_tx_send+0x23c>)
    660e:	58e3      	ldr	r3, [r4, r3]
    6610:	4798      	blx	r3
    6612:	1e03      	subs	r3, r0, #0
    6614:	d00c      	beq.n	6630 <udi_cdc_tx_send+0x4c>
    6616:	1dfb      	adds	r3, r7, #7
    6618:	781a      	ldrb	r2, [r3, #0]
    661a:	4b82      	ldr	r3, [pc, #520]	; (6824 <udi_cdc_tx_send+0x240>)
    661c:	447b      	add	r3, pc
    661e:	0052      	lsls	r2, r2, #1
    6620:	5ad5      	ldrh	r5, [r2, r3]
    6622:	4b81      	ldr	r3, [pc, #516]	; (6828 <udi_cdc_tx_send+0x244>)
    6624:	58e3      	ldr	r3, [r4, r3]
    6626:	4798      	blx	r3
    6628:	0003      	movs	r3, r0
    662a:	429d      	cmp	r5, r3
    662c:	d10d      	bne.n	664a <udi_cdc_tx_send+0x66>
    662e:	e0ef      	b.n	6810 <udi_cdc_tx_send+0x22c>
    6630:	1dfb      	adds	r3, r7, #7
    6632:	781a      	ldrb	r2, [r3, #0]
    6634:	4b7d      	ldr	r3, [pc, #500]	; (682c <udi_cdc_tx_send+0x248>)
    6636:	447b      	add	r3, pc
    6638:	0052      	lsls	r2, r2, #1
    663a:	5ad5      	ldrh	r5, [r2, r3]
    663c:	4b7c      	ldr	r3, [pc, #496]	; (6830 <udi_cdc_tx_send+0x24c>)
    663e:	58e3      	ldr	r3, [r4, r3]
    6640:	4798      	blx	r3
    6642:	0003      	movs	r3, r0
    6644:	429d      	cmp	r5, r3
    6646:	d100      	bne.n	664a <udi_cdc_tx_send+0x66>
    6648:	e0e1      	b.n	680e <udi_cdc_tx_send+0x22a>
    664a:	4b7a      	ldr	r3, [pc, #488]	; (6834 <udi_cdc_tx_send+0x250>)
    664c:	447b      	add	r3, pc
    664e:	4798      	blx	r3
    6650:	0003      	movs	r3, r0
    6652:	613b      	str	r3, [r7, #16]
    6654:	1dfb      	adds	r3, r7, #7
    6656:	781a      	ldrb	r2, [r3, #0]
    6658:	2317      	movs	r3, #23
    665a:	18fb      	adds	r3, r7, r3
    665c:	4976      	ldr	r1, [pc, #472]	; (6838 <udi_cdc_tx_send+0x254>)
    665e:	4479      	add	r1, pc
    6660:	5c8a      	ldrb	r2, [r1, r2]
    6662:	701a      	strb	r2, [r3, #0]
    6664:	1dfb      	adds	r3, r7, #7
    6666:	7819      	ldrb	r1, [r3, #0]
    6668:	2317      	movs	r3, #23
    666a:	18fb      	adds	r3, r7, r3
    666c:	781a      	ldrb	r2, [r3, #0]
    666e:	4b73      	ldr	r3, [pc, #460]	; (683c <udi_cdc_tx_send+0x258>)
    6670:	447b      	add	r3, pc
    6672:	0049      	lsls	r1, r1, #1
    6674:	188a      	adds	r2, r1, r2
    6676:	0052      	lsls	r2, r2, #1
    6678:	5ad3      	ldrh	r3, [r2, r3]
    667a:	2b00      	cmp	r3, #0
    667c:	d127      	bne.n	66ce <udi_cdc_tx_send+0xea>
    667e:	4b70      	ldr	r3, [pc, #448]	; (6840 <udi_cdc_tx_send+0x25c>)
    6680:	447b      	add	r3, pc
    6682:	881b      	ldrh	r3, [r3, #0]
    6684:	3301      	adds	r3, #1
    6686:	b29a      	uxth	r2, r3
    6688:	4b6e      	ldr	r3, [pc, #440]	; (6844 <udi_cdc_tx_send+0x260>)
    668a:	447b      	add	r3, pc
    668c:	801a      	strh	r2, [r3, #0]
    668e:	4b64      	ldr	r3, [pc, #400]	; (6820 <udi_cdc_tx_send+0x23c>)
    6690:	58e3      	ldr	r3, [r4, r3]
    6692:	4798      	blx	r3
    6694:	0003      	movs	r3, r0
    6696:	001a      	movs	r2, r3
    6698:	2301      	movs	r3, #1
    669a:	4053      	eors	r3, r2
    669c:	b2db      	uxtb	r3, r3
    669e:	2b00      	cmp	r3, #0
    66a0:	d004      	beq.n	66ac <udi_cdc_tx_send+0xc8>
    66a2:	4b69      	ldr	r3, [pc, #420]	; (6848 <udi_cdc_tx_send+0x264>)
    66a4:	447b      	add	r3, pc
    66a6:	881b      	ldrh	r3, [r3, #0]
    66a8:	2b63      	cmp	r3, #99	; 0x63
    66aa:	d90a      	bls.n	66c2 <udi_cdc_tx_send+0xde>
    66ac:	4b5c      	ldr	r3, [pc, #368]	; (6820 <udi_cdc_tx_send+0x23c>)
    66ae:	58e3      	ldr	r3, [r4, r3]
    66b0:	4798      	blx	r3
    66b2:	1e03      	subs	r3, r0, #0
    66b4:	d00b      	beq.n	66ce <udi_cdc_tx_send+0xea>
    66b6:	4b65      	ldr	r3, [pc, #404]	; (684c <udi_cdc_tx_send+0x268>)
    66b8:	447b      	add	r3, pc
    66ba:	881b      	ldrh	r3, [r3, #0]
    66bc:	4a64      	ldr	r2, [pc, #400]	; (6850 <udi_cdc_tx_send+0x26c>)
    66be:	4293      	cmp	r3, r2
    66c0:	d805      	bhi.n	66ce <udi_cdc_tx_send+0xea>
    66c2:	693b      	ldr	r3, [r7, #16]
    66c4:	0018      	movs	r0, r3
    66c6:	4b63      	ldr	r3, [pc, #396]	; (6854 <udi_cdc_tx_send+0x270>)
    66c8:	447b      	add	r3, pc
    66ca:	4798      	blx	r3
    66cc:	e0a0      	b.n	6810 <udi_cdc_tx_send+0x22c>
    66ce:	4b62      	ldr	r3, [pc, #392]	; (6858 <udi_cdc_tx_send+0x274>)
    66d0:	447b      	add	r3, pc
    66d2:	2200      	movs	r2, #0
    66d4:	801a      	strh	r2, [r3, #0]
    66d6:	1dfb      	adds	r3, r7, #7
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	4a60      	ldr	r2, [pc, #384]	; (685c <udi_cdc_tx_send+0x278>)
    66dc:	447a      	add	r2, pc
    66de:	5cd3      	ldrb	r3, [r2, r3]
    66e0:	b2db      	uxtb	r3, r3
    66e2:	2201      	movs	r2, #1
    66e4:	4053      	eors	r3, r2
    66e6:	b2db      	uxtb	r3, r3
    66e8:	2b00      	cmp	r3, #0
    66ea:	d00c      	beq.n	6706 <udi_cdc_tx_send+0x122>
    66ec:	1dfb      	adds	r3, r7, #7
    66ee:	781b      	ldrb	r3, [r3, #0]
    66f0:	2217      	movs	r2, #23
    66f2:	18ba      	adds	r2, r7, r2
    66f4:	7812      	ldrb	r2, [r2, #0]
    66f6:	4251      	negs	r1, r2
    66f8:	414a      	adcs	r2, r1
    66fa:	b2d2      	uxtb	r2, r2
    66fc:	0011      	movs	r1, r2
    66fe:	4a58      	ldr	r2, [pc, #352]	; (6860 <udi_cdc_tx_send+0x27c>)
    6700:	447a      	add	r2, pc
    6702:	54d1      	strb	r1, [r2, r3]
    6704:	e008      	b.n	6718 <udi_cdc_tx_send+0x134>
    6706:	2317      	movs	r3, #23
    6708:	18fb      	adds	r3, r7, r3
    670a:	781b      	ldrb	r3, [r3, #0]
    670c:	425a      	negs	r2, r3
    670e:	4153      	adcs	r3, r2
    6710:	b2da      	uxtb	r2, r3
    6712:	2317      	movs	r3, #23
    6714:	18fb      	adds	r3, r7, r3
    6716:	701a      	strb	r2, [r3, #0]
    6718:	1dfb      	adds	r3, r7, #7
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	4a51      	ldr	r2, [pc, #324]	; (6864 <udi_cdc_tx_send+0x280>)
    671e:	447a      	add	r2, pc
    6720:	2101      	movs	r1, #1
    6722:	54d1      	strb	r1, [r2, r3]
    6724:	693b      	ldr	r3, [r7, #16]
    6726:	0018      	movs	r0, r3
    6728:	4b4f      	ldr	r3, [pc, #316]	; (6868 <udi_cdc_tx_send+0x284>)
    672a:	447b      	add	r3, pc
    672c:	4798      	blx	r3
    672e:	1dfb      	adds	r3, r7, #7
    6730:	7819      	ldrb	r1, [r3, #0]
    6732:	2317      	movs	r3, #23
    6734:	18fb      	adds	r3, r7, r3
    6736:	781a      	ldrb	r2, [r3, #0]
    6738:	4b4c      	ldr	r3, [pc, #304]	; (686c <udi_cdc_tx_send+0x288>)
    673a:	447b      	add	r3, pc
    673c:	0049      	lsls	r1, r1, #1
    673e:	188a      	adds	r2, r1, r2
    6740:	0052      	lsls	r2, r2, #1
    6742:	5ad2      	ldrh	r2, [r2, r3]
    6744:	230f      	movs	r3, #15
    6746:	18fb      	adds	r3, r7, r3
    6748:	3a40      	subs	r2, #64	; 0x40
    674a:	1e51      	subs	r1, r2, #1
    674c:	418a      	sbcs	r2, r1
    674e:	701a      	strb	r2, [r3, #0]
    6750:	230f      	movs	r3, #15
    6752:	18fb      	adds	r3, r7, r3
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	2b00      	cmp	r3, #0
    6758:	d01c      	beq.n	6794 <udi_cdc_tx_send+0x1b0>
    675a:	4b31      	ldr	r3, [pc, #196]	; (6820 <udi_cdc_tx_send+0x23c>)
    675c:	58e3      	ldr	r3, [r4, r3]
    675e:	4798      	blx	r3
    6760:	1e03      	subs	r3, r0, #0
    6762:	d00b      	beq.n	677c <udi_cdc_tx_send+0x198>
    6764:	1dfb      	adds	r3, r7, #7
    6766:	781d      	ldrb	r5, [r3, #0]
    6768:	4b2f      	ldr	r3, [pc, #188]	; (6828 <udi_cdc_tx_send+0x244>)
    676a:	58e3      	ldr	r3, [r4, r3]
    676c:	4798      	blx	r3
    676e:	0003      	movs	r3, r0
    6770:	0019      	movs	r1, r3
    6772:	4b3f      	ldr	r3, [pc, #252]	; (6870 <udi_cdc_tx_send+0x28c>)
    6774:	447b      	add	r3, pc
    6776:	006a      	lsls	r2, r5, #1
    6778:	52d1      	strh	r1, [r2, r3]
    677a:	e012      	b.n	67a2 <udi_cdc_tx_send+0x1be>
    677c:	1dfb      	adds	r3, r7, #7
    677e:	781d      	ldrb	r5, [r3, #0]
    6780:	4b2b      	ldr	r3, [pc, #172]	; (6830 <udi_cdc_tx_send+0x24c>)
    6782:	58e3      	ldr	r3, [r4, r3]
    6784:	4798      	blx	r3
    6786:	0003      	movs	r3, r0
    6788:	0019      	movs	r1, r3
    678a:	4b3a      	ldr	r3, [pc, #232]	; (6874 <udi_cdc_tx_send+0x290>)
    678c:	447b      	add	r3, pc
    678e:	006a      	lsls	r2, r5, #1
    6790:	52d1      	strh	r1, [r2, r3]
    6792:	e006      	b.n	67a2 <udi_cdc_tx_send+0x1be>
    6794:	1dfb      	adds	r3, r7, #7
    6796:	781a      	ldrb	r2, [r3, #0]
    6798:	4b37      	ldr	r3, [pc, #220]	; (6878 <udi_cdc_tx_send+0x294>)
    679a:	447b      	add	r3, pc
    679c:	0052      	lsls	r2, r2, #1
    679e:	2100      	movs	r1, #0
    67a0:	52d1      	strh	r1, [r2, r3]
    67a2:	1dfb      	adds	r3, r7, #7
    67a4:	781b      	ldrb	r3, [r3, #0]
    67a6:	2b00      	cmp	r3, #0
    67a8:	d104      	bne.n	67b4 <udi_cdc_tx_send+0x1d0>
    67aa:	2316      	movs	r3, #22
    67ac:	18fb      	adds	r3, r7, r3
    67ae:	2281      	movs	r2, #129	; 0x81
    67b0:	701a      	strb	r2, [r3, #0]
    67b2:	e004      	b.n	67be <udi_cdc_tx_send+0x1da>
    67b4:	2316      	movs	r3, #22
    67b6:	18fb      	adds	r3, r7, r3
    67b8:	2281      	movs	r2, #129	; 0x81
    67ba:	701a      	strb	r2, [r3, #0]
    67bc:	46c0      	nop			; (mov r8, r8)
    67be:	1dfb      	adds	r3, r7, #7
    67c0:	781a      	ldrb	r2, [r3, #0]
    67c2:	2317      	movs	r3, #23
    67c4:	18fb      	adds	r3, r7, r3
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	0052      	lsls	r2, r2, #1
    67ca:	18d3      	adds	r3, r2, r3
    67cc:	019b      	lsls	r3, r3, #6
    67ce:	4a2b      	ldr	r2, [pc, #172]	; (687c <udi_cdc_tx_send+0x298>)
    67d0:	447a      	add	r2, pc
    67d2:	189d      	adds	r5, r3, r2
    67d4:	1dfb      	adds	r3, r7, #7
    67d6:	7819      	ldrb	r1, [r3, #0]
    67d8:	2317      	movs	r3, #23
    67da:	18fb      	adds	r3, r7, r3
    67dc:	781a      	ldrb	r2, [r3, #0]
    67de:	4b28      	ldr	r3, [pc, #160]	; (6880 <udi_cdc_tx_send+0x29c>)
    67e0:	447b      	add	r3, pc
    67e2:	0049      	lsls	r1, r1, #1
    67e4:	188a      	adds	r2, r1, r2
    67e6:	0052      	lsls	r2, r2, #1
    67e8:	5ad3      	ldrh	r3, [r2, r3]
    67ea:	001a      	movs	r2, r3
    67ec:	230f      	movs	r3, #15
    67ee:	18fb      	adds	r3, r7, r3
    67f0:	7819      	ldrb	r1, [r3, #0]
    67f2:	2316      	movs	r3, #22
    67f4:	18fb      	adds	r3, r7, r3
    67f6:	7818      	ldrb	r0, [r3, #0]
    67f8:	4b22      	ldr	r3, [pc, #136]	; (6884 <udi_cdc_tx_send+0x2a0>)
    67fa:	447b      	add	r3, pc
    67fc:	9300      	str	r3, [sp, #0]
    67fe:	0013      	movs	r3, r2
    6800:	002a      	movs	r2, r5
    6802:	4d21      	ldr	r5, [pc, #132]	; (6888 <udi_cdc_tx_send+0x2a4>)
    6804:	5964      	ldr	r4, [r4, r5]
    6806:	47a0      	blx	r4
    6808:	e002      	b.n	6810 <udi_cdc_tx_send+0x22c>
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	e000      	b.n	6810 <udi_cdc_tx_send+0x22c>
    680e:	46c0      	nop			; (mov r8, r8)
    6810:	46bd      	mov	sp, r7
    6812:	b006      	add	sp, #24
    6814:	bdb0      	pop	{r4, r5, r7, pc}
    6816:	46c0      	nop			; (mov r8, r8)
    6818:	0000b7ee 	.word	0x0000b7ee
    681c:	1fff9f0c 	.word	0x1fff9f0c
    6820:	00000198 	.word	0x00000198
    6824:	1fff9eec 	.word	0x1fff9eec
    6828:	00000040 	.word	0x00000040
    682c:	1fff9ed2 	.word	0x1fff9ed2
    6830:	000000c8 	.word	0x000000c8
    6834:	fffff731 	.word	0xfffff731
    6838:	1fff9ea6 	.word	0x1fff9ea6
    683c:	1fff9e90 	.word	0x1fff9e90
    6840:	1fff9e92 	.word	0x1fff9e92
    6844:	1fff9e88 	.word	0x1fff9e88
    6848:	1fff9e6e 	.word	0x1fff9e6e
    684c:	1fff9e5a 	.word	0x1fff9e5a
    6850:	0000031f 	.word	0x0000031f
    6854:	fffff709 	.word	0xfffff709
    6858:	1fff9e42 	.word	0x1fff9e42
    685c:	1fff9e34 	.word	0x1fff9e34
    6860:	1fff9e04 	.word	0x1fff9e04
    6864:	1fff9dee 	.word	0x1fff9dee
    6868:	fffff6a7 	.word	0xfffff6a7
    686c:	1fff9dc6 	.word	0x1fff9dc6
    6870:	1fff9d94 	.word	0x1fff9d94
    6874:	1fff9d7c 	.word	0x1fff9d7c
    6878:	1fff9d6e 	.word	0x1fff9d6e
    687c:	1fff9cb0 	.word	0x1fff9cb0
    6880:	1fff9d20 	.word	0x1fff9d20
    6884:	fffffd3b 	.word	0xfffffd3b
    6888:	00000070 	.word	0x00000070

0000688c <udi_cdc_multi_get_nb_received_data>:
    688c:	b580      	push	{r7, lr}
    688e:	b086      	sub	sp, #24
    6890:	af00      	add	r7, sp, #0
    6892:	0002      	movs	r2, r0
    6894:	1dfb      	adds	r3, r7, #7
    6896:	701a      	strb	r2, [r3, #0]
    6898:	1dfb      	adds	r3, r7, #7
    689a:	2200      	movs	r2, #0
    689c:	701a      	strb	r2, [r3, #0]
    689e:	4b17      	ldr	r3, [pc, #92]	; (68fc <udi_cdc_multi_get_nb_received_data+0x70>)
    68a0:	447b      	add	r3, pc
    68a2:	4798      	blx	r3
    68a4:	0003      	movs	r3, r0
    68a6:	617b      	str	r3, [r7, #20]
    68a8:	1dfb      	adds	r3, r7, #7
    68aa:	7819      	ldrb	r1, [r3, #0]
    68ac:	2312      	movs	r3, #18
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	4a13      	ldr	r2, [pc, #76]	; (6900 <udi_cdc_multi_get_nb_received_data+0x74>)
    68b2:	447a      	add	r2, pc
    68b4:	0049      	lsls	r1, r1, #1
    68b6:	5a8a      	ldrh	r2, [r1, r2]
    68b8:	801a      	strh	r2, [r3, #0]
    68ba:	1dfb      	adds	r3, r7, #7
    68bc:	781a      	ldrb	r2, [r3, #0]
    68be:	1dfb      	adds	r3, r7, #7
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	4910      	ldr	r1, [pc, #64]	; (6904 <udi_cdc_multi_get_nb_received_data+0x78>)
    68c4:	4479      	add	r1, pc
    68c6:	5ccb      	ldrb	r3, [r1, r3]
    68c8:	b2db      	uxtb	r3, r3
    68ca:	0019      	movs	r1, r3
    68cc:	4b0e      	ldr	r3, [pc, #56]	; (6908 <udi_cdc_multi_get_nb_received_data+0x7c>)
    68ce:	447b      	add	r3, pc
    68d0:	0052      	lsls	r2, r2, #1
    68d2:	1852      	adds	r2, r2, r1
    68d4:	0052      	lsls	r2, r2, #1
    68d6:	5ad3      	ldrh	r3, [r2, r3]
    68d8:	b29b      	uxth	r3, r3
    68da:	001a      	movs	r2, r3
    68dc:	2312      	movs	r3, #18
    68de:	18fb      	adds	r3, r7, r3
    68e0:	881b      	ldrh	r3, [r3, #0]
    68e2:	1ad3      	subs	r3, r2, r3
    68e4:	60fb      	str	r3, [r7, #12]
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	0018      	movs	r0, r3
    68ea:	4b08      	ldr	r3, [pc, #32]	; (690c <udi_cdc_multi_get_nb_received_data+0x80>)
    68ec:	447b      	add	r3, pc
    68ee:	4798      	blx	r3
    68f0:	68fb      	ldr	r3, [r7, #12]
    68f2:	0018      	movs	r0, r3
    68f4:	46bd      	mov	sp, r7
    68f6:	b006      	add	sp, #24
    68f8:	bd80      	pop	{r7, pc}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	fffff4dd 	.word	0xfffff4dd
    6900:	1fff9bc6 	.word	0x1fff9bc6
    6904:	1fff9bb0 	.word	0x1fff9bb0
    6908:	1fff9ba2 	.word	0x1fff9ba2
    690c:	fffff4e5 	.word	0xfffff4e5

00006910 <udi_cdc_multi_is_rx_ready>:
    6910:	b580      	push	{r7, lr}
    6912:	b082      	sub	sp, #8
    6914:	af00      	add	r7, sp, #0
    6916:	0002      	movs	r2, r0
    6918:	1dfb      	adds	r3, r7, #7
    691a:	701a      	strb	r2, [r3, #0]
    691c:	4a07      	ldr	r2, [pc, #28]	; (693c <udi_cdc_multi_is_rx_ready+0x2c>)
    691e:	447a      	add	r2, pc
    6920:	1dfb      	adds	r3, r7, #7
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	0018      	movs	r0, r3
    6926:	4b06      	ldr	r3, [pc, #24]	; (6940 <udi_cdc_multi_is_rx_ready+0x30>)
    6928:	58d3      	ldr	r3, [r2, r3]
    692a:	4798      	blx	r3
    692c:	0003      	movs	r3, r0
    692e:	1e5a      	subs	r2, r3, #1
    6930:	4193      	sbcs	r3, r2
    6932:	b2db      	uxtb	r3, r3
    6934:	0018      	movs	r0, r3
    6936:	46bd      	mov	sp, r7
    6938:	b002      	add	sp, #8
    693a:	bd80      	pop	{r7, pc}
    693c:	0000b4c2 	.word	0x0000b4c2
    6940:	00000028 	.word	0x00000028

00006944 <udi_cdc_multi_getc>:
    6944:	b580      	push	{r7, lr}
    6946:	b086      	sub	sp, #24
    6948:	af00      	add	r7, sp, #0
    694a:	0002      	movs	r2, r0
    694c:	1dfb      	adds	r3, r7, #7
    694e:	701a      	strb	r2, [r3, #0]
    6950:	2300      	movs	r3, #0
    6952:	617b      	str	r3, [r7, #20]
    6954:	1dfb      	adds	r3, r7, #7
    6956:	2200      	movs	r2, #0
    6958:	701a      	strb	r2, [r3, #0]
    695a:	1dfb      	adds	r3, r7, #7
    695c:	781a      	ldrb	r2, [r3, #0]
    695e:	4945      	ldr	r1, [pc, #276]	; (6a74 <udi_cdc_multi_getc+0x130>)
    6960:	4479      	add	r1, pc
    6962:	0013      	movs	r3, r2
    6964:	00db      	lsls	r3, r3, #3
    6966:	1a9b      	subs	r3, r3, r2
    6968:	18cb      	adds	r3, r1, r3
    696a:	3306      	adds	r3, #6
    696c:	781a      	ldrb	r2, [r3, #0]
    696e:	2313      	movs	r3, #19
    6970:	18fb      	adds	r3, r7, r3
    6972:	3a09      	subs	r2, #9
    6974:	4251      	negs	r1, r2
    6976:	414a      	adcs	r2, r1
    6978:	701a      	strb	r2, [r3, #0]
    697a:	4b3f      	ldr	r3, [pc, #252]	; (6a78 <udi_cdc_multi_getc+0x134>)
    697c:	447b      	add	r3, pc
    697e:	4798      	blx	r3
    6980:	0003      	movs	r3, r0
    6982:	60fb      	str	r3, [r7, #12]
    6984:	1dfb      	adds	r3, r7, #7
    6986:	7819      	ldrb	r1, [r3, #0]
    6988:	230a      	movs	r3, #10
    698a:	18fb      	adds	r3, r7, r3
    698c:	4a3b      	ldr	r2, [pc, #236]	; (6a7c <udi_cdc_multi_getc+0x138>)
    698e:	447a      	add	r2, pc
    6990:	0049      	lsls	r1, r1, #1
    6992:	5a8a      	ldrh	r2, [r1, r2]
    6994:	801a      	strh	r2, [r3, #0]
    6996:	1dfb      	adds	r3, r7, #7
    6998:	781a      	ldrb	r2, [r3, #0]
    699a:	2309      	movs	r3, #9
    699c:	18fb      	adds	r3, r7, r3
    699e:	4938      	ldr	r1, [pc, #224]	; (6a80 <udi_cdc_multi_getc+0x13c>)
    69a0:	4479      	add	r1, pc
    69a2:	5c8a      	ldrb	r2, [r1, r2]
    69a4:	701a      	strb	r2, [r3, #0]
    69a6:	1dfb      	adds	r3, r7, #7
    69a8:	7819      	ldrb	r1, [r3, #0]
    69aa:	2309      	movs	r3, #9
    69ac:	18fb      	adds	r3, r7, r3
    69ae:	781a      	ldrb	r2, [r3, #0]
    69b0:	4b34      	ldr	r3, [pc, #208]	; (6a84 <udi_cdc_multi_getc+0x140>)
    69b2:	447b      	add	r3, pc
    69b4:	0049      	lsls	r1, r1, #1
    69b6:	188a      	adds	r2, r1, r2
    69b8:	0052      	lsls	r2, r2, #1
    69ba:	5ad3      	ldrh	r3, [r2, r3]
    69bc:	b299      	uxth	r1, r3
    69be:	2308      	movs	r3, #8
    69c0:	18fa      	adds	r2, r7, r3
    69c2:	230a      	movs	r3, #10
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	8818      	ldrh	r0, [r3, #0]
    69c8:	2300      	movs	r3, #0
    69ca:	4288      	cmp	r0, r1
    69cc:	415b      	adcs	r3, r3
    69ce:	7013      	strb	r3, [r2, #0]
    69d0:	68fb      	ldr	r3, [r7, #12]
    69d2:	0018      	movs	r0, r3
    69d4:	4b2c      	ldr	r3, [pc, #176]	; (6a88 <udi_cdc_multi_getc+0x144>)
    69d6:	447b      	add	r3, pc
    69d8:	4798      	blx	r3
    69da:	2308      	movs	r3, #8
    69dc:	18fb      	adds	r3, r7, r3
    69de:	781b      	ldrb	r3, [r3, #0]
    69e0:	2b00      	cmp	r3, #0
    69e2:	d011      	beq.n	6a08 <udi_cdc_multi_getc+0xc4>
    69e4:	4b29      	ldr	r3, [pc, #164]	; (6a8c <udi_cdc_multi_getc+0x148>)
    69e6:	447b      	add	r3, pc
    69e8:	781b      	ldrb	r3, [r3, #0]
    69ea:	b2db      	uxtb	r3, r3
    69ec:	2201      	movs	r2, #1
    69ee:	4053      	eors	r3, r2
    69f0:	b2db      	uxtb	r3, r3
    69f2:	2b00      	cmp	r3, #0
    69f4:	d001      	beq.n	69fa <udi_cdc_multi_getc+0xb6>
    69f6:	2300      	movs	r3, #0
    69f8:	e038      	b.n	6a6c <udi_cdc_multi_getc+0x128>
    69fa:	2313      	movs	r3, #19
    69fc:	18fb      	adds	r3, r7, r3
    69fe:	2213      	movs	r2, #19
    6a00:	18ba      	adds	r2, r7, r2
    6a02:	7812      	ldrb	r2, [r2, #0]
    6a04:	701a      	strb	r2, [r3, #0]
    6a06:	e7b8      	b.n	697a <udi_cdc_multi_getc+0x36>
    6a08:	1dfb      	adds	r3, r7, #7
    6a0a:	7818      	ldrb	r0, [r3, #0]
    6a0c:	2309      	movs	r3, #9
    6a0e:	18fb      	adds	r3, r7, r3
    6a10:	781a      	ldrb	r2, [r3, #0]
    6a12:	230a      	movs	r3, #10
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	881b      	ldrh	r3, [r3, #0]
    6a18:	491d      	ldr	r1, [pc, #116]	; (6a90 <udi_cdc_multi_getc+0x14c>)
    6a1a:	4479      	add	r1, pc
    6a1c:	0040      	lsls	r0, r0, #1
    6a1e:	1882      	adds	r2, r0, r2
    6a20:	0192      	lsls	r2, r2, #6
    6a22:	188a      	adds	r2, r1, r2
    6a24:	5cd3      	ldrb	r3, [r2, r3]
    6a26:	001a      	movs	r2, r3
    6a28:	697b      	ldr	r3, [r7, #20]
    6a2a:	4313      	orrs	r3, r2
    6a2c:	617b      	str	r3, [r7, #20]
    6a2e:	1dfb      	adds	r3, r7, #7
    6a30:	781a      	ldrb	r2, [r3, #0]
    6a32:	230a      	movs	r3, #10
    6a34:	18fb      	adds	r3, r7, r3
    6a36:	881b      	ldrh	r3, [r3, #0]
    6a38:	3301      	adds	r3, #1
    6a3a:	b299      	uxth	r1, r3
    6a3c:	4b15      	ldr	r3, [pc, #84]	; (6a94 <udi_cdc_multi_getc+0x150>)
    6a3e:	447b      	add	r3, pc
    6a40:	0052      	lsls	r2, r2, #1
    6a42:	52d1      	strh	r1, [r2, r3]
    6a44:	1dfb      	adds	r3, r7, #7
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	0018      	movs	r0, r3
    6a4a:	4b13      	ldr	r3, [pc, #76]	; (6a98 <udi_cdc_multi_getc+0x154>)
    6a4c:	447b      	add	r3, pc
    6a4e:	4798      	blx	r3
    6a50:	2313      	movs	r3, #19
    6a52:	18fb      	adds	r3, r7, r3
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	2b00      	cmp	r3, #0
    6a58:	d007      	beq.n	6a6a <udi_cdc_multi_getc+0x126>
    6a5a:	2313      	movs	r3, #19
    6a5c:	18fb      	adds	r3, r7, r3
    6a5e:	2200      	movs	r2, #0
    6a60:	701a      	strb	r2, [r3, #0]
    6a62:	697b      	ldr	r3, [r7, #20]
    6a64:	021b      	lsls	r3, r3, #8
    6a66:	617b      	str	r3, [r7, #20]
    6a68:	e787      	b.n	697a <udi_cdc_multi_getc+0x36>
    6a6a:	697b      	ldr	r3, [r7, #20]
    6a6c:	0018      	movs	r0, r3
    6a6e:	46bd      	mov	sp, r7
    6a70:	b006      	add	sp, #24
    6a72:	bd80      	pop	{r7, pc}
    6a74:	1fff9a74 	.word	0x1fff9a74
    6a78:	fffff401 	.word	0xfffff401
    6a7c:	1fff9aea 	.word	0x1fff9aea
    6a80:	1fff9ad4 	.word	0x1fff9ad4
    6a84:	1fff9abe 	.word	0x1fff9abe
    6a88:	fffff3fb 	.word	0xfffff3fb
    6a8c:	1fff9a06 	.word	0x1fff9a06
    6a90:	1fff99d6 	.word	0x1fff99d6
    6a94:	1fff9a3a 	.word	0x1fff9a3a
    6a98:	fffff8a9 	.word	0xfffff8a9

00006a9c <udi_cdc_getc>:
    6a9c:	b580      	push	{r7, lr}
    6a9e:	af00      	add	r7, sp, #0
    6aa0:	4a04      	ldr	r2, [pc, #16]	; (6ab4 <udi_cdc_getc+0x18>)
    6aa2:	447a      	add	r2, pc
    6aa4:	2000      	movs	r0, #0
    6aa6:	4b04      	ldr	r3, [pc, #16]	; (6ab8 <udi_cdc_getc+0x1c>)
    6aa8:	58d3      	ldr	r3, [r2, r3]
    6aaa:	4798      	blx	r3
    6aac:	0003      	movs	r3, r0
    6aae:	0018      	movs	r0, r3
    6ab0:	46bd      	mov	sp, r7
    6ab2:	bd80      	pop	{r7, pc}
    6ab4:	0000b33e 	.word	0x0000b33e
    6ab8:	000001fc 	.word	0x000001fc

00006abc <udi_cdc_multi_get_free_tx_buffer>:
    6abc:	b580      	push	{r7, lr}
    6abe:	b086      	sub	sp, #24
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	0002      	movs	r2, r0
    6ac4:	1dfb      	adds	r3, r7, #7
    6ac6:	701a      	strb	r2, [r3, #0]
    6ac8:	1dfb      	adds	r3, r7, #7
    6aca:	2200      	movs	r2, #0
    6acc:	701a      	strb	r2, [r3, #0]
    6ace:	4b2a      	ldr	r3, [pc, #168]	; (6b78 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
    6ad0:	447b      	add	r3, pc
    6ad2:	4798      	blx	r3
    6ad4:	0003      	movs	r3, r0
    6ad6:	613b      	str	r3, [r7, #16]
    6ad8:	1dfb      	adds	r3, r7, #7
    6ada:	781a      	ldrb	r2, [r3, #0]
    6adc:	230f      	movs	r3, #15
    6ade:	18fb      	adds	r3, r7, r3
    6ae0:	4926      	ldr	r1, [pc, #152]	; (6b7c <udi_cdc_multi_get_free_tx_buffer+0xc0>)
    6ae2:	4479      	add	r1, pc
    6ae4:	5c8a      	ldrb	r2, [r1, r2]
    6ae6:	701a      	strb	r2, [r3, #0]
    6ae8:	1dfb      	adds	r3, r7, #7
    6aea:	7819      	ldrb	r1, [r3, #0]
    6aec:	230f      	movs	r3, #15
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	781a      	ldrb	r2, [r3, #0]
    6af2:	4b23      	ldr	r3, [pc, #140]	; (6b80 <udi_cdc_multi_get_free_tx_buffer+0xc4>)
    6af4:	447b      	add	r3, pc
    6af6:	0049      	lsls	r1, r1, #1
    6af8:	188a      	adds	r2, r1, r2
    6afa:	0052      	lsls	r2, r2, #1
    6afc:	5ad3      	ldrh	r3, [r2, r3]
    6afe:	617b      	str	r3, [r7, #20]
    6b00:	697b      	ldr	r3, [r7, #20]
    6b02:	2b40      	cmp	r3, #64	; 0x40
    6b04:	d129      	bne.n	6b5a <udi_cdc_multi_get_free_tx_buffer+0x9e>
    6b06:	1dfb      	adds	r3, r7, #7
    6b08:	781b      	ldrb	r3, [r3, #0]
    6b0a:	4a1e      	ldr	r2, [pc, #120]	; (6b84 <udi_cdc_multi_get_free_tx_buffer+0xc8>)
    6b0c:	447a      	add	r2, pc
    6b0e:	5cd3      	ldrb	r3, [r2, r3]
    6b10:	b2db      	uxtb	r3, r3
    6b12:	2201      	movs	r2, #1
    6b14:	4053      	eors	r3, r2
    6b16:	b2db      	uxtb	r3, r3
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d01e      	beq.n	6b5a <udi_cdc_multi_get_free_tx_buffer+0x9e>
    6b1c:	1dfb      	adds	r3, r7, #7
    6b1e:	781b      	ldrb	r3, [r3, #0]
    6b20:	4a19      	ldr	r2, [pc, #100]	; (6b88 <udi_cdc_multi_get_free_tx_buffer+0xcc>)
    6b22:	447a      	add	r2, pc
    6b24:	5cd3      	ldrb	r3, [r2, r3]
    6b26:	b2db      	uxtb	r3, r3
    6b28:	2201      	movs	r2, #1
    6b2a:	4053      	eors	r3, r2
    6b2c:	b2db      	uxtb	r3, r3
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d013      	beq.n	6b5a <udi_cdc_multi_get_free_tx_buffer+0x9e>
    6b32:	1dfb      	adds	r3, r7, #7
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	4a15      	ldr	r2, [pc, #84]	; (6b8c <udi_cdc_multi_get_free_tx_buffer+0xd0>)
    6b38:	447a      	add	r2, pc
    6b3a:	2101      	movs	r1, #1
    6b3c:	54d1      	strb	r1, [r2, r3]
    6b3e:	1dfb      	adds	r3, r7, #7
    6b40:	781b      	ldrb	r3, [r3, #0]
    6b42:	220f      	movs	r2, #15
    6b44:	18ba      	adds	r2, r7, r2
    6b46:	7812      	ldrb	r2, [r2, #0]
    6b48:	4251      	negs	r1, r2
    6b4a:	414a      	adcs	r2, r1
    6b4c:	b2d2      	uxtb	r2, r2
    6b4e:	0011      	movs	r1, r2
    6b50:	4a0f      	ldr	r2, [pc, #60]	; (6b90 <udi_cdc_multi_get_free_tx_buffer+0xd4>)
    6b52:	447a      	add	r2, pc
    6b54:	54d1      	strb	r1, [r2, r3]
    6b56:	2300      	movs	r3, #0
    6b58:	617b      	str	r3, [r7, #20]
    6b5a:	697b      	ldr	r3, [r7, #20]
    6b5c:	2240      	movs	r2, #64	; 0x40
    6b5e:	1ad3      	subs	r3, r2, r3
    6b60:	60bb      	str	r3, [r7, #8]
    6b62:	693b      	ldr	r3, [r7, #16]
    6b64:	0018      	movs	r0, r3
    6b66:	4b0b      	ldr	r3, [pc, #44]	; (6b94 <udi_cdc_multi_get_free_tx_buffer+0xd8>)
    6b68:	447b      	add	r3, pc
    6b6a:	4798      	blx	r3
    6b6c:	68bb      	ldr	r3, [r7, #8]
    6b6e:	0018      	movs	r0, r3
    6b70:	46bd      	mov	sp, r7
    6b72:	b006      	add	sp, #24
    6b74:	bd80      	pop	{r7, pc}
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	fffff2ad 	.word	0xfffff2ad
    6b7c:	1fff9a22 	.word	0x1fff9a22
    6b80:	1fff9a0c 	.word	0x1fff9a0c
    6b84:	1fff9a00 	.word	0x1fff9a00
    6b88:	1fff99ee 	.word	0x1fff99ee
    6b8c:	1fff99d8 	.word	0x1fff99d8
    6b90:	1fff99b2 	.word	0x1fff99b2
    6b94:	fffff269 	.word	0xfffff269

00006b98 <udi_cdc_multi_is_tx_ready>:
    6b98:	b580      	push	{r7, lr}
    6b9a:	b082      	sub	sp, #8
    6b9c:	af00      	add	r7, sp, #0
    6b9e:	0002      	movs	r2, r0
    6ba0:	1dfb      	adds	r3, r7, #7
    6ba2:	701a      	strb	r2, [r3, #0]
    6ba4:	4a07      	ldr	r2, [pc, #28]	; (6bc4 <udi_cdc_multi_is_tx_ready+0x2c>)
    6ba6:	447a      	add	r2, pc
    6ba8:	1dfb      	adds	r3, r7, #7
    6baa:	781b      	ldrb	r3, [r3, #0]
    6bac:	0018      	movs	r0, r3
    6bae:	4b06      	ldr	r3, [pc, #24]	; (6bc8 <udi_cdc_multi_is_tx_ready+0x30>)
    6bb0:	58d3      	ldr	r3, [r2, r3]
    6bb2:	4798      	blx	r3
    6bb4:	0003      	movs	r3, r0
    6bb6:	1e5a      	subs	r2, r3, #1
    6bb8:	4193      	sbcs	r3, r2
    6bba:	b2db      	uxtb	r3, r3
    6bbc:	0018      	movs	r0, r3
    6bbe:	46bd      	mov	sp, r7
    6bc0:	b002      	add	sp, #8
    6bc2:	bd80      	pop	{r7, pc}
    6bc4:	0000b23a 	.word	0x0000b23a
    6bc8:	000001c4 	.word	0x000001c4

00006bcc <udi_cdc_multi_putc>:
    6bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bce:	b087      	sub	sp, #28
    6bd0:	af00      	add	r7, sp, #0
    6bd2:	0002      	movs	r2, r0
    6bd4:	6039      	str	r1, [r7, #0]
    6bd6:	1dfb      	adds	r3, r7, #7
    6bd8:	701a      	strb	r2, [r3, #0]
    6bda:	4c3e      	ldr	r4, [pc, #248]	; (6cd4 <udi_cdc_multi_putc+0x108>)
    6bdc:	447c      	add	r4, pc
    6bde:	1dfb      	adds	r3, r7, #7
    6be0:	2200      	movs	r2, #0
    6be2:	701a      	strb	r2, [r3, #0]
    6be4:	1dfb      	adds	r3, r7, #7
    6be6:	781a      	ldrb	r2, [r3, #0]
    6be8:	493b      	ldr	r1, [pc, #236]	; (6cd8 <udi_cdc_multi_putc+0x10c>)
    6bea:	4479      	add	r1, pc
    6bec:	0013      	movs	r3, r2
    6bee:	00db      	lsls	r3, r3, #3
    6bf0:	1a9b      	subs	r3, r3, r2
    6bf2:	18cb      	adds	r3, r1, r3
    6bf4:	3306      	adds	r3, #6
    6bf6:	781a      	ldrb	r2, [r3, #0]
    6bf8:	2317      	movs	r3, #23
    6bfa:	18fb      	adds	r3, r7, r3
    6bfc:	3a09      	subs	r2, #9
    6bfe:	4251      	negs	r1, r2
    6c00:	414a      	adcs	r2, r1
    6c02:	701a      	strb	r2, [r3, #0]
    6c04:	1dfb      	adds	r3, r7, #7
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	0018      	movs	r0, r3
    6c0a:	4b34      	ldr	r3, [pc, #208]	; (6cdc <udi_cdc_multi_putc+0x110>)
    6c0c:	58e3      	ldr	r3, [r4, r3]
    6c0e:	4798      	blx	r3
    6c10:	0003      	movs	r3, r0
    6c12:	001a      	movs	r2, r3
    6c14:	2301      	movs	r3, #1
    6c16:	4053      	eors	r3, r2
    6c18:	b2db      	uxtb	r3, r3
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d011      	beq.n	6c42 <udi_cdc_multi_putc+0x76>
    6c1e:	4b30      	ldr	r3, [pc, #192]	; (6ce0 <udi_cdc_multi_putc+0x114>)
    6c20:	447b      	add	r3, pc
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	b2db      	uxtb	r3, r3
    6c26:	2201      	movs	r2, #1
    6c28:	4053      	eors	r3, r2
    6c2a:	b2db      	uxtb	r3, r3
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d001      	beq.n	6c34 <udi_cdc_multi_putc+0x68>
    6c30:	2300      	movs	r3, #0
    6c32:	e04a      	b.n	6cca <udi_cdc_multi_putc+0xfe>
    6c34:	2317      	movs	r3, #23
    6c36:	18fb      	adds	r3, r7, r3
    6c38:	2217      	movs	r2, #23
    6c3a:	18ba      	adds	r2, r7, r2
    6c3c:	7812      	ldrb	r2, [r2, #0]
    6c3e:	701a      	strb	r2, [r3, #0]
    6c40:	e7e0      	b.n	6c04 <udi_cdc_multi_putc+0x38>
    6c42:	4b28      	ldr	r3, [pc, #160]	; (6ce4 <udi_cdc_multi_putc+0x118>)
    6c44:	447b      	add	r3, pc
    6c46:	4798      	blx	r3
    6c48:	0003      	movs	r3, r0
    6c4a:	613b      	str	r3, [r7, #16]
    6c4c:	1dfb      	adds	r3, r7, #7
    6c4e:	781a      	ldrb	r2, [r3, #0]
    6c50:	230f      	movs	r3, #15
    6c52:	18fb      	adds	r3, r7, r3
    6c54:	4924      	ldr	r1, [pc, #144]	; (6ce8 <udi_cdc_multi_putc+0x11c>)
    6c56:	4479      	add	r1, pc
    6c58:	5c8a      	ldrb	r2, [r1, r2]
    6c5a:	701a      	strb	r2, [r3, #0]
    6c5c:	1dfb      	adds	r3, r7, #7
    6c5e:	781d      	ldrb	r5, [r3, #0]
    6c60:	230f      	movs	r3, #15
    6c62:	18fb      	adds	r3, r7, r3
    6c64:	7818      	ldrb	r0, [r3, #0]
    6c66:	1dfb      	adds	r3, r7, #7
    6c68:	781a      	ldrb	r2, [r3, #0]
    6c6a:	230f      	movs	r3, #15
    6c6c:	18fb      	adds	r3, r7, r3
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	491e      	ldr	r1, [pc, #120]	; (6cec <udi_cdc_multi_putc+0x120>)
    6c72:	4479      	add	r1, pc
    6c74:	0056      	lsls	r6, r2, #1
    6c76:	18f6      	adds	r6, r6, r3
    6c78:	0076      	lsls	r6, r6, #1
    6c7a:	5a71      	ldrh	r1, [r6, r1]
    6c7c:	1c4e      	adds	r6, r1, #1
    6c7e:	b2b6      	uxth	r6, r6
    6c80:	46b4      	mov	ip, r6
    6c82:	4e1b      	ldr	r6, [pc, #108]	; (6cf0 <udi_cdc_multi_putc+0x124>)
    6c84:	447e      	add	r6, pc
    6c86:	0052      	lsls	r2, r2, #1
    6c88:	18d3      	adds	r3, r2, r3
    6c8a:	005b      	lsls	r3, r3, #1
    6c8c:	4662      	mov	r2, ip
    6c8e:	539a      	strh	r2, [r3, r6]
    6c90:	683b      	ldr	r3, [r7, #0]
    6c92:	b2de      	uxtb	r6, r3
    6c94:	4a17      	ldr	r2, [pc, #92]	; (6cf4 <udi_cdc_multi_putc+0x128>)
    6c96:	447a      	add	r2, pc
    6c98:	006b      	lsls	r3, r5, #1
    6c9a:	181b      	adds	r3, r3, r0
    6c9c:	019b      	lsls	r3, r3, #6
    6c9e:	18d3      	adds	r3, r2, r3
    6ca0:	1c32      	adds	r2, r6, #0
    6ca2:	545a      	strb	r2, [r3, r1]
    6ca4:	693b      	ldr	r3, [r7, #16]
    6ca6:	0018      	movs	r0, r3
    6ca8:	4b13      	ldr	r3, [pc, #76]	; (6cf8 <udi_cdc_multi_putc+0x12c>)
    6caa:	447b      	add	r3, pc
    6cac:	4798      	blx	r3
    6cae:	2317      	movs	r3, #23
    6cb0:	18fb      	adds	r3, r7, r3
    6cb2:	781b      	ldrb	r3, [r3, #0]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d007      	beq.n	6cc8 <udi_cdc_multi_putc+0xfc>
    6cb8:	2317      	movs	r3, #23
    6cba:	18fb      	adds	r3, r7, r3
    6cbc:	2200      	movs	r2, #0
    6cbe:	701a      	strb	r2, [r3, #0]
    6cc0:	683b      	ldr	r3, [r7, #0]
    6cc2:	121b      	asrs	r3, r3, #8
    6cc4:	603b      	str	r3, [r7, #0]
    6cc6:	e79d      	b.n	6c04 <udi_cdc_multi_putc+0x38>
    6cc8:	2301      	movs	r3, #1
    6cca:	0018      	movs	r0, r3
    6ccc:	46bd      	mov	sp, r7
    6cce:	b007      	add	sp, #28
    6cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cd2:	46c0      	nop			; (mov r8, r8)
    6cd4:	0000b204 	.word	0x0000b204
    6cd8:	1fff97ea 	.word	0x1fff97ea
    6cdc:	000002dc 	.word	0x000002dc
    6ce0:	1fff97cc 	.word	0x1fff97cc
    6ce4:	fffff139 	.word	0xfffff139
    6ce8:	1fff98ae 	.word	0x1fff98ae
    6cec:	1fff988e 	.word	0x1fff988e
    6cf0:	1fff987c 	.word	0x1fff987c
    6cf4:	1fff97ea 	.word	0x1fff97ea
    6cf8:	fffff127 	.word	0xfffff127

00006cfc <udi_cdc_putc>:
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b082      	sub	sp, #8
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
    6d04:	4a06      	ldr	r2, [pc, #24]	; (6d20 <udi_cdc_putc+0x24>)
    6d06:	447a      	add	r2, pc
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	0019      	movs	r1, r3
    6d0c:	2000      	movs	r0, #0
    6d0e:	4b05      	ldr	r3, [pc, #20]	; (6d24 <udi_cdc_putc+0x28>)
    6d10:	58d3      	ldr	r3, [r2, r3]
    6d12:	4798      	blx	r3
    6d14:	0003      	movs	r3, r0
    6d16:	0018      	movs	r0, r3
    6d18:	46bd      	mov	sp, r7
    6d1a:	b002      	add	sp, #8
    6d1c:	bd80      	pop	{r7, pc}
    6d1e:	46c0      	nop			; (mov r8, r8)
    6d20:	0000b0da 	.word	0x0000b0da
    6d24:	00000234 	.word	0x00000234

00006d28 <udc_get_string_serial_name>:
    6d28:	b580      	push	{r7, lr}
    6d2a:	af00      	add	r7, sp, #0
    6d2c:	4b02      	ldr	r3, [pc, #8]	; (6d38 <udc_get_string_serial_name+0x10>)
    6d2e:	447b      	add	r3, pc
    6d30:	0018      	movs	r0, r3
    6d32:	46bd      	mov	sp, r7
    6d34:	bd80      	pop	{r7, pc}
    6d36:	46c0      	nop			; (mov r8, r8)
    6d38:	0000afa2 	.word	0x0000afa2

00006d3c <udc_get_eof_conf>:
    6d3c:	b580      	push	{r7, lr}
    6d3e:	af00      	add	r7, sp, #0
    6d40:	4b08      	ldr	r3, [pc, #32]	; (6d64 <udc_get_eof_conf+0x28>)
    6d42:	447b      	add	r3, pc
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	681a      	ldr	r2, [r3, #0]
    6d48:	4b07      	ldr	r3, [pc, #28]	; (6d68 <udc_get_eof_conf+0x2c>)
    6d4a:	447b      	add	r3, pc
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	681b      	ldr	r3, [r3, #0]
    6d50:	7899      	ldrb	r1, [r3, #2]
    6d52:	78db      	ldrb	r3, [r3, #3]
    6d54:	021b      	lsls	r3, r3, #8
    6d56:	430b      	orrs	r3, r1
    6d58:	b29b      	uxth	r3, r3
    6d5a:	18d3      	adds	r3, r2, r3
    6d5c:	0018      	movs	r0, r3
    6d5e:	46bd      	mov	sp, r7
    6d60:	bd80      	pop	{r7, pc}
    6d62:	46c0      	nop			; (mov r8, r8)
    6d64:	1fff97de 	.word	0x1fff97de
    6d68:	1fff97d6 	.word	0x1fff97d6

00006d6c <udc_next_desc_in_iface>:
    6d6c:	b580      	push	{r7, lr}
    6d6e:	b084      	sub	sp, #16
    6d70:	af00      	add	r7, sp, #0
    6d72:	6078      	str	r0, [r7, #4]
    6d74:	000a      	movs	r2, r1
    6d76:	1cfb      	adds	r3, r7, #3
    6d78:	701a      	strb	r2, [r3, #0]
    6d7a:	4b14      	ldr	r3, [pc, #80]	; (6dcc <udc_next_desc_in_iface+0x60>)
    6d7c:	447b      	add	r3, pc
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	60fb      	str	r3, [r7, #12]
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	001a      	movs	r2, r3
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	189b      	adds	r3, r3, r2
    6d8e:	607b      	str	r3, [r7, #4]
    6d90:	e011      	b.n	6db6 <udc_next_desc_in_iface+0x4a>
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	785b      	ldrb	r3, [r3, #1]
    6d96:	2b04      	cmp	r3, #4
    6d98:	d012      	beq.n	6dc0 <udc_next_desc_in_iface+0x54>
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	785b      	ldrb	r3, [r3, #1]
    6d9e:	1cfa      	adds	r2, r7, #3
    6da0:	7812      	ldrb	r2, [r2, #0]
    6da2:	429a      	cmp	r2, r3
    6da4:	d101      	bne.n	6daa <udc_next_desc_in_iface+0x3e>
    6da6:	687b      	ldr	r3, [r7, #4]
    6da8:	e00c      	b.n	6dc4 <udc_next_desc_in_iface+0x58>
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	001a      	movs	r2, r3
    6db0:	687b      	ldr	r3, [r7, #4]
    6db2:	189b      	adds	r3, r3, r2
    6db4:	607b      	str	r3, [r7, #4]
    6db6:	68fa      	ldr	r2, [r7, #12]
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	429a      	cmp	r2, r3
    6dbc:	d8e9      	bhi.n	6d92 <udc_next_desc_in_iface+0x26>
    6dbe:	e000      	b.n	6dc2 <udc_next_desc_in_iface+0x56>
    6dc0:	46c0      	nop			; (mov r8, r8)
    6dc2:	2300      	movs	r3, #0
    6dc4:	0018      	movs	r0, r3
    6dc6:	46bd      	mov	sp, r7
    6dc8:	b004      	add	sp, #16
    6dca:	bd80      	pop	{r7, pc}
    6dcc:	ffffffbd 	.word	0xffffffbd

00006dd0 <udc_update_iface_desc>:
    6dd0:	b580      	push	{r7, lr}
    6dd2:	b084      	sub	sp, #16
    6dd4:	af00      	add	r7, sp, #0
    6dd6:	0002      	movs	r2, r0
    6dd8:	1dfb      	adds	r3, r7, #7
    6dda:	701a      	strb	r2, [r3, #0]
    6ddc:	1dbb      	adds	r3, r7, #6
    6dde:	1c0a      	adds	r2, r1, #0
    6de0:	701a      	strb	r2, [r3, #0]
    6de2:	4b26      	ldr	r3, [pc, #152]	; (6e7c <udc_update_iface_desc+0xac>)
    6de4:	447b      	add	r3, pc
    6de6:	781b      	ldrb	r3, [r3, #0]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d101      	bne.n	6df0 <udc_update_iface_desc+0x20>
    6dec:	2300      	movs	r3, #0
    6dee:	e041      	b.n	6e74 <udc_update_iface_desc+0xa4>
    6df0:	4b23      	ldr	r3, [pc, #140]	; (6e80 <udc_update_iface_desc+0xb0>)
    6df2:	447b      	add	r3, pc
    6df4:	681b      	ldr	r3, [r3, #0]
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	791b      	ldrb	r3, [r3, #4]
    6dfa:	1dfa      	adds	r2, r7, #7
    6dfc:	7812      	ldrb	r2, [r2, #0]
    6dfe:	429a      	cmp	r2, r3
    6e00:	d301      	bcc.n	6e06 <udc_update_iface_desc+0x36>
    6e02:	2300      	movs	r3, #0
    6e04:	e036      	b.n	6e74 <udc_update_iface_desc+0xa4>
    6e06:	4b1f      	ldr	r3, [pc, #124]	; (6e84 <udc_update_iface_desc+0xb4>)
    6e08:	447b      	add	r3, pc
    6e0a:	681b      	ldr	r3, [r3, #0]
    6e0c:	681a      	ldr	r2, [r3, #0]
    6e0e:	4b1e      	ldr	r3, [pc, #120]	; (6e88 <udc_update_iface_desc+0xb8>)
    6e10:	447b      	add	r3, pc
    6e12:	601a      	str	r2, [r3, #0]
    6e14:	4b1d      	ldr	r3, [pc, #116]	; (6e8c <udc_update_iface_desc+0xbc>)
    6e16:	447b      	add	r3, pc
    6e18:	4798      	blx	r3
    6e1a:	0003      	movs	r3, r0
    6e1c:	60fb      	str	r3, [r7, #12]
    6e1e:	e022      	b.n	6e66 <udc_update_iface_desc+0x96>
    6e20:	4b1b      	ldr	r3, [pc, #108]	; (6e90 <udc_update_iface_desc+0xc0>)
    6e22:	447b      	add	r3, pc
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	785b      	ldrb	r3, [r3, #1]
    6e28:	2b04      	cmp	r3, #4
    6e2a:	d111      	bne.n	6e50 <udc_update_iface_desc+0x80>
    6e2c:	4b19      	ldr	r3, [pc, #100]	; (6e94 <udc_update_iface_desc+0xc4>)
    6e2e:	447b      	add	r3, pc
    6e30:	681b      	ldr	r3, [r3, #0]
    6e32:	789b      	ldrb	r3, [r3, #2]
    6e34:	1dfa      	adds	r2, r7, #7
    6e36:	7812      	ldrb	r2, [r2, #0]
    6e38:	429a      	cmp	r2, r3
    6e3a:	d109      	bne.n	6e50 <udc_update_iface_desc+0x80>
    6e3c:	4b16      	ldr	r3, [pc, #88]	; (6e98 <udc_update_iface_desc+0xc8>)
    6e3e:	447b      	add	r3, pc
    6e40:	681b      	ldr	r3, [r3, #0]
    6e42:	78db      	ldrb	r3, [r3, #3]
    6e44:	1dba      	adds	r2, r7, #6
    6e46:	7812      	ldrb	r2, [r2, #0]
    6e48:	429a      	cmp	r2, r3
    6e4a:	d101      	bne.n	6e50 <udc_update_iface_desc+0x80>
    6e4c:	2301      	movs	r3, #1
    6e4e:	e011      	b.n	6e74 <udc_update_iface_desc+0xa4>
    6e50:	4b12      	ldr	r3, [pc, #72]	; (6e9c <udc_update_iface_desc+0xcc>)
    6e52:	447b      	add	r3, pc
    6e54:	681a      	ldr	r2, [r3, #0]
    6e56:	4b12      	ldr	r3, [pc, #72]	; (6ea0 <udc_update_iface_desc+0xd0>)
    6e58:	447b      	add	r3, pc
    6e5a:	681b      	ldr	r3, [r3, #0]
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	18d2      	adds	r2, r2, r3
    6e60:	4b10      	ldr	r3, [pc, #64]	; (6ea4 <udc_update_iface_desc+0xd4>)
    6e62:	447b      	add	r3, pc
    6e64:	601a      	str	r2, [r3, #0]
    6e66:	4b10      	ldr	r3, [pc, #64]	; (6ea8 <udc_update_iface_desc+0xd8>)
    6e68:	447b      	add	r3, pc
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	68fa      	ldr	r2, [r7, #12]
    6e6e:	429a      	cmp	r2, r3
    6e70:	d8d6      	bhi.n	6e20 <udc_update_iface_desc+0x50>
    6e72:	2300      	movs	r3, #0
    6e74:	0018      	movs	r0, r3
    6e76:	46bd      	mov	sp, r7
    6e78:	b004      	add	sp, #16
    6e7a:	bd80      	pop	{r7, pc}
    6e7c:	1fff9738 	.word	0x1fff9738
    6e80:	1fff972e 	.word	0x1fff972e
    6e84:	1fff9718 	.word	0x1fff9718
    6e88:	1fff9714 	.word	0x1fff9714
    6e8c:	ffffff23 	.word	0xffffff23
    6e90:	1fff9702 	.word	0x1fff9702
    6e94:	1fff96f6 	.word	0x1fff96f6
    6e98:	1fff96e6 	.word	0x1fff96e6
    6e9c:	1fff96d2 	.word	0x1fff96d2
    6ea0:	1fff96cc 	.word	0x1fff96cc
    6ea4:	1fff96c2 	.word	0x1fff96c2
    6ea8:	1fff96bc 	.word	0x1fff96bc

00006eac <udc_iface_disable>:
    6eac:	b590      	push	{r4, r7, lr}
    6eae:	b085      	sub	sp, #20
    6eb0:	af00      	add	r7, sp, #0
    6eb2:	0002      	movs	r2, r0
    6eb4:	1dfb      	adds	r3, r7, #7
    6eb6:	701a      	strb	r2, [r3, #0]
    6eb8:	4c27      	ldr	r4, [pc, #156]	; (6f58 <udc_iface_disable+0xac>)
    6eba:	447c      	add	r4, pc
    6ebc:	1dfb      	adds	r3, r7, #7
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	2100      	movs	r1, #0
    6ec2:	0018      	movs	r0, r3
    6ec4:	4b25      	ldr	r3, [pc, #148]	; (6f5c <udc_iface_disable+0xb0>)
    6ec6:	447b      	add	r3, pc
    6ec8:	4798      	blx	r3
    6eca:	0003      	movs	r3, r0
    6ecc:	001a      	movs	r2, r3
    6ece:	2301      	movs	r3, #1
    6ed0:	4053      	eors	r3, r2
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d001      	beq.n	6edc <udc_iface_disable+0x30>
    6ed8:	2300      	movs	r3, #0
    6eda:	e039      	b.n	6f50 <udc_iface_disable+0xa4>
    6edc:	4b20      	ldr	r3, [pc, #128]	; (6f60 <udc_iface_disable+0xb4>)
    6ede:	447b      	add	r3, pc
    6ee0:	681b      	ldr	r3, [r3, #0]
    6ee2:	685a      	ldr	r2, [r3, #4]
    6ee4:	1dfb      	adds	r3, r7, #7
    6ee6:	781b      	ldrb	r3, [r3, #0]
    6ee8:	009b      	lsls	r3, r3, #2
    6eea:	18d3      	adds	r3, r2, r3
    6eec:	681b      	ldr	r3, [r3, #0]
    6eee:	60bb      	str	r3, [r7, #8]
    6ef0:	68bb      	ldr	r3, [r7, #8]
    6ef2:	68db      	ldr	r3, [r3, #12]
    6ef4:	4798      	blx	r3
    6ef6:	0003      	movs	r3, r0
    6ef8:	001a      	movs	r2, r3
    6efa:	1dfb      	adds	r3, r7, #7
    6efc:	781b      	ldrb	r3, [r3, #0]
    6efe:	0011      	movs	r1, r2
    6f00:	0018      	movs	r0, r3
    6f02:	4b18      	ldr	r3, [pc, #96]	; (6f64 <udc_iface_disable+0xb8>)
    6f04:	447b      	add	r3, pc
    6f06:	4798      	blx	r3
    6f08:	0003      	movs	r3, r0
    6f0a:	001a      	movs	r2, r3
    6f0c:	2301      	movs	r3, #1
    6f0e:	4053      	eors	r3, r2
    6f10:	b2db      	uxtb	r3, r3
    6f12:	2b00      	cmp	r3, #0
    6f14:	d001      	beq.n	6f1a <udc_iface_disable+0x6e>
    6f16:	2300      	movs	r3, #0
    6f18:	e01a      	b.n	6f50 <udc_iface_disable+0xa4>
    6f1a:	4b13      	ldr	r3, [pc, #76]	; (6f68 <udc_iface_disable+0xbc>)
    6f1c:	447b      	add	r3, pc
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	60fb      	str	r3, [r7, #12]
    6f22:	68fb      	ldr	r3, [r7, #12]
    6f24:	2105      	movs	r1, #5
    6f26:	0018      	movs	r0, r3
    6f28:	4b10      	ldr	r3, [pc, #64]	; (6f6c <udc_iface_disable+0xc0>)
    6f2a:	447b      	add	r3, pc
    6f2c:	4798      	blx	r3
    6f2e:	0003      	movs	r3, r0
    6f30:	60fb      	str	r3, [r7, #12]
    6f32:	68fb      	ldr	r3, [r7, #12]
    6f34:	2b00      	cmp	r3, #0
    6f36:	d006      	beq.n	6f46 <udc_iface_disable+0x9a>
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	789b      	ldrb	r3, [r3, #2]
    6f3c:	0018      	movs	r0, r3
    6f3e:	4b0c      	ldr	r3, [pc, #48]	; (6f70 <udc_iface_disable+0xc4>)
    6f40:	58e3      	ldr	r3, [r4, r3]
    6f42:	4798      	blx	r3
    6f44:	e7ed      	b.n	6f22 <udc_iface_disable+0x76>
    6f46:	46c0      	nop			; (mov r8, r8)
    6f48:	68bb      	ldr	r3, [r7, #8]
    6f4a:	685b      	ldr	r3, [r3, #4]
    6f4c:	4798      	blx	r3
    6f4e:	2301      	movs	r3, #1
    6f50:	0018      	movs	r0, r3
    6f52:	46bd      	mov	sp, r7
    6f54:	b005      	add	sp, #20
    6f56:	bd90      	pop	{r4, r7, pc}
    6f58:	0000af26 	.word	0x0000af26
    6f5c:	ffffff07 	.word	0xffffff07
    6f60:	1fff9642 	.word	0x1fff9642
    6f64:	fffffec9 	.word	0xfffffec9
    6f68:	1fff9608 	.word	0x1fff9608
    6f6c:	fffffe3f 	.word	0xfffffe3f
    6f70:	0000018c 	.word	0x0000018c

00006f74 <udc_iface_enable>:
    6f74:	b590      	push	{r4, r7, lr}
    6f76:	b085      	sub	sp, #20
    6f78:	af00      	add	r7, sp, #0
    6f7a:	0002      	movs	r2, r0
    6f7c:	1dfb      	adds	r3, r7, #7
    6f7e:	701a      	strb	r2, [r3, #0]
    6f80:	1dbb      	adds	r3, r7, #6
    6f82:	1c0a      	adds	r2, r1, #0
    6f84:	701a      	strb	r2, [r3, #0]
    6f86:	4c25      	ldr	r4, [pc, #148]	; (701c <udc_iface_enable+0xa8>)
    6f88:	447c      	add	r4, pc
    6f8a:	1dbb      	adds	r3, r7, #6
    6f8c:	781a      	ldrb	r2, [r3, #0]
    6f8e:	1dfb      	adds	r3, r7, #7
    6f90:	781b      	ldrb	r3, [r3, #0]
    6f92:	0011      	movs	r1, r2
    6f94:	0018      	movs	r0, r3
    6f96:	4b22      	ldr	r3, [pc, #136]	; (7020 <udc_iface_enable+0xac>)
    6f98:	447b      	add	r3, pc
    6f9a:	4798      	blx	r3
    6f9c:	0003      	movs	r3, r0
    6f9e:	001a      	movs	r2, r3
    6fa0:	2301      	movs	r3, #1
    6fa2:	4053      	eors	r3, r2
    6fa4:	b2db      	uxtb	r3, r3
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d001      	beq.n	6fae <udc_iface_enable+0x3a>
    6faa:	2300      	movs	r3, #0
    6fac:	e032      	b.n	7014 <udc_iface_enable+0xa0>
    6fae:	4b1d      	ldr	r3, [pc, #116]	; (7024 <udc_iface_enable+0xb0>)
    6fb0:	447b      	add	r3, pc
    6fb2:	681b      	ldr	r3, [r3, #0]
    6fb4:	60fb      	str	r3, [r7, #12]
    6fb6:	68fb      	ldr	r3, [r7, #12]
    6fb8:	2105      	movs	r1, #5
    6fba:	0018      	movs	r0, r3
    6fbc:	4b1a      	ldr	r3, [pc, #104]	; (7028 <udc_iface_enable+0xb4>)
    6fbe:	447b      	add	r3, pc
    6fc0:	4798      	blx	r3
    6fc2:	0003      	movs	r3, r0
    6fc4:	60fb      	str	r3, [r7, #12]
    6fc6:	68fb      	ldr	r3, [r7, #12]
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d016      	beq.n	6ffa <udc_iface_enable+0x86>
    6fcc:	68fb      	ldr	r3, [r7, #12]
    6fce:	7898      	ldrb	r0, [r3, #2]
    6fd0:	68fb      	ldr	r3, [r7, #12]
    6fd2:	78d9      	ldrb	r1, [r3, #3]
    6fd4:	68fb      	ldr	r3, [r7, #12]
    6fd6:	791a      	ldrb	r2, [r3, #4]
    6fd8:	795b      	ldrb	r3, [r3, #5]
    6fda:	021b      	lsls	r3, r3, #8
    6fdc:	4313      	orrs	r3, r2
    6fde:	b29b      	uxth	r3, r3
    6fe0:	001a      	movs	r2, r3
    6fe2:	4b12      	ldr	r3, [pc, #72]	; (702c <udc_iface_enable+0xb8>)
    6fe4:	58e3      	ldr	r3, [r4, r3]
    6fe6:	4798      	blx	r3
    6fe8:	0003      	movs	r3, r0
    6fea:	001a      	movs	r2, r3
    6fec:	2301      	movs	r3, #1
    6fee:	4053      	eors	r3, r2
    6ff0:	b2db      	uxtb	r3, r3
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d0df      	beq.n	6fb6 <udc_iface_enable+0x42>
    6ff6:	2300      	movs	r3, #0
    6ff8:	e00c      	b.n	7014 <udc_iface_enable+0xa0>
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	4b0c      	ldr	r3, [pc, #48]	; (7030 <udc_iface_enable+0xbc>)
    6ffe:	447b      	add	r3, pc
    7000:	681b      	ldr	r3, [r3, #0]
    7002:	685a      	ldr	r2, [r3, #4]
    7004:	1dfb      	adds	r3, r7, #7
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	009b      	lsls	r3, r3, #2
    700a:	18d3      	adds	r3, r2, r3
    700c:	681b      	ldr	r3, [r3, #0]
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	4798      	blx	r3
    7012:	0003      	movs	r3, r0
    7014:	0018      	movs	r0, r3
    7016:	46bd      	mov	sp, r7
    7018:	b005      	add	sp, #20
    701a:	bd90      	pop	{r4, r7, pc}
    701c:	0000ae58 	.word	0x0000ae58
    7020:	fffffe35 	.word	0xfffffe35
    7024:	1fff9574 	.word	0x1fff9574
    7028:	fffffdab 	.word	0xfffffdab
    702c:	000001ec 	.word	0x000001ec
    7030:	1fff9522 	.word	0x1fff9522

00007034 <udc_start>:
    7034:	b580      	push	{r7, lr}
    7036:	af00      	add	r7, sp, #0
    7038:	4a03      	ldr	r2, [pc, #12]	; (7048 <udc_start+0x14>)
    703a:	447a      	add	r2, pc
    703c:	4b03      	ldr	r3, [pc, #12]	; (704c <udc_start+0x18>)
    703e:	58d3      	ldr	r3, [r2, r3]
    7040:	4798      	blx	r3
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	46bd      	mov	sp, r7
    7046:	bd80      	pop	{r7, pc}
    7048:	0000ada6 	.word	0x0000ada6
    704c:	0000019c 	.word	0x0000019c

00007050 <udc_reset>:
    7050:	b580      	push	{r7, lr}
    7052:	b082      	sub	sp, #8
    7054:	af00      	add	r7, sp, #0
    7056:	4b14      	ldr	r3, [pc, #80]	; (70a8 <udc_reset+0x58>)
    7058:	447b      	add	r3, pc
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	2b00      	cmp	r3, #0
    705e:	d017      	beq.n	7090 <udc_reset+0x40>
    7060:	1dfb      	adds	r3, r7, #7
    7062:	2200      	movs	r2, #0
    7064:	701a      	strb	r2, [r3, #0]
    7066:	e00a      	b.n	707e <udc_reset+0x2e>
    7068:	1dfb      	adds	r3, r7, #7
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	0018      	movs	r0, r3
    706e:	4b0f      	ldr	r3, [pc, #60]	; (70ac <udc_reset+0x5c>)
    7070:	447b      	add	r3, pc
    7072:	4798      	blx	r3
    7074:	1dfb      	adds	r3, r7, #7
    7076:	781a      	ldrb	r2, [r3, #0]
    7078:	1dfb      	adds	r3, r7, #7
    707a:	3201      	adds	r2, #1
    707c:	701a      	strb	r2, [r3, #0]
    707e:	4b0c      	ldr	r3, [pc, #48]	; (70b0 <udc_reset+0x60>)
    7080:	447b      	add	r3, pc
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	681b      	ldr	r3, [r3, #0]
    7086:	791b      	ldrb	r3, [r3, #4]
    7088:	1dfa      	adds	r2, r7, #7
    708a:	7812      	ldrb	r2, [r2, #0]
    708c:	429a      	cmp	r2, r3
    708e:	d3eb      	bcc.n	7068 <udc_reset+0x18>
    7090:	4b08      	ldr	r3, [pc, #32]	; (70b4 <udc_reset+0x64>)
    7092:	447b      	add	r3, pc
    7094:	2200      	movs	r2, #0
    7096:	701a      	strb	r2, [r3, #0]
    7098:	4b07      	ldr	r3, [pc, #28]	; (70b8 <udc_reset+0x68>)
    709a:	447b      	add	r3, pc
    709c:	2201      	movs	r2, #1
    709e:	801a      	strh	r2, [r3, #0]
    70a0:	46c0      	nop			; (mov r8, r8)
    70a2:	46bd      	mov	sp, r7
    70a4:	b002      	add	sp, #8
    70a6:	bd80      	pop	{r7, pc}
    70a8:	1fff94c4 	.word	0x1fff94c4
    70ac:	fffffe39 	.word	0xfffffe39
    70b0:	1fff94a0 	.word	0x1fff94a0
    70b4:	1fff948a 	.word	0x1fff948a
    70b8:	1fff947a 	.word	0x1fff947a

000070bc <udc_sof_notify>:
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
    70c2:	4b19      	ldr	r3, [pc, #100]	; (7128 <udc_sof_notify+0x6c>)
    70c4:	447b      	add	r3, pc
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	2b00      	cmp	r3, #0
    70ca:	d028      	beq.n	711e <udc_sof_notify+0x62>
    70cc:	1dfb      	adds	r3, r7, #7
    70ce:	2200      	movs	r2, #0
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	e01b      	b.n	710c <udc_sof_notify+0x50>
    70d4:	4b15      	ldr	r3, [pc, #84]	; (712c <udc_sof_notify+0x70>)
    70d6:	447b      	add	r3, pc
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	685a      	ldr	r2, [r3, #4]
    70dc:	1dfb      	adds	r3, r7, #7
    70de:	781b      	ldrb	r3, [r3, #0]
    70e0:	009b      	lsls	r3, r3, #2
    70e2:	18d3      	adds	r3, r2, r3
    70e4:	681b      	ldr	r3, [r3, #0]
    70e6:	691b      	ldr	r3, [r3, #16]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d00a      	beq.n	7102 <udc_sof_notify+0x46>
    70ec:	4b10      	ldr	r3, [pc, #64]	; (7130 <udc_sof_notify+0x74>)
    70ee:	447b      	add	r3, pc
    70f0:	681b      	ldr	r3, [r3, #0]
    70f2:	685a      	ldr	r2, [r3, #4]
    70f4:	1dfb      	adds	r3, r7, #7
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	009b      	lsls	r3, r3, #2
    70fa:	18d3      	adds	r3, r2, r3
    70fc:	681b      	ldr	r3, [r3, #0]
    70fe:	691b      	ldr	r3, [r3, #16]
    7100:	4798      	blx	r3
    7102:	1dfb      	adds	r3, r7, #7
    7104:	781a      	ldrb	r2, [r3, #0]
    7106:	1dfb      	adds	r3, r7, #7
    7108:	3201      	adds	r2, #1
    710a:	701a      	strb	r2, [r3, #0]
    710c:	4b09      	ldr	r3, [pc, #36]	; (7134 <udc_sof_notify+0x78>)
    710e:	447b      	add	r3, pc
    7110:	681b      	ldr	r3, [r3, #0]
    7112:	681b      	ldr	r3, [r3, #0]
    7114:	791b      	ldrb	r3, [r3, #4]
    7116:	1dfa      	adds	r2, r7, #7
    7118:	7812      	ldrb	r2, [r2, #0]
    711a:	429a      	cmp	r2, r3
    711c:	d3da      	bcc.n	70d4 <udc_sof_notify+0x18>
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	46bd      	mov	sp, r7
    7122:	b002      	add	sp, #8
    7124:	bd80      	pop	{r7, pc}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	1fff9458 	.word	0x1fff9458
    712c:	1fff944a 	.word	0x1fff944a
    7130:	1fff9432 	.word	0x1fff9432
    7134:	1fff9412 	.word	0x1fff9412

00007138 <udc_req_std_dev_get_status>:
    7138:	b580      	push	{r7, lr}
    713a:	af00      	add	r7, sp, #0
    713c:	4b09      	ldr	r3, [pc, #36]	; (7164 <udc_req_std_dev_get_status+0x2c>)
    713e:	447b      	add	r3, pc
    7140:	4a09      	ldr	r2, [pc, #36]	; (7168 <udc_req_std_dev_get_status+0x30>)
    7142:	589a      	ldr	r2, [r3, r2]
    7144:	88d2      	ldrh	r2, [r2, #6]
    7146:	2a02      	cmp	r2, #2
    7148:	d001      	beq.n	714e <udc_req_std_dev_get_status+0x16>
    714a:	2300      	movs	r3, #0
    714c:	e007      	b.n	715e <udc_req_std_dev_get_status+0x26>
    714e:	4a07      	ldr	r2, [pc, #28]	; (716c <udc_req_std_dev_get_status+0x34>)
    7150:	447a      	add	r2, pc
    7152:	2102      	movs	r1, #2
    7154:	0010      	movs	r0, r2
    7156:	4a06      	ldr	r2, [pc, #24]	; (7170 <udc_req_std_dev_get_status+0x38>)
    7158:	589b      	ldr	r3, [r3, r2]
    715a:	4798      	blx	r3
    715c:	2301      	movs	r3, #1
    715e:	0018      	movs	r0, r3
    7160:	46bd      	mov	sp, r7
    7162:	bd80      	pop	{r7, pc}
    7164:	0000aca2 	.word	0x0000aca2
    7168:	000001e8 	.word	0x000001e8
    716c:	1fff93c4 	.word	0x1fff93c4
    7170:	0000005c 	.word	0x0000005c

00007174 <udc_req_std_ep_get_status>:
    7174:	b5b0      	push	{r4, r5, r7, lr}
    7176:	af00      	add	r7, sp, #0
    7178:	4c10      	ldr	r4, [pc, #64]	; (71bc <udc_req_std_ep_get_status+0x48>)
    717a:	447c      	add	r4, pc
    717c:	4b10      	ldr	r3, [pc, #64]	; (71c0 <udc_req_std_ep_get_status+0x4c>)
    717e:	58e3      	ldr	r3, [r4, r3]
    7180:	88db      	ldrh	r3, [r3, #6]
    7182:	2b02      	cmp	r3, #2
    7184:	d001      	beq.n	718a <udc_req_std_ep_get_status+0x16>
    7186:	2300      	movs	r3, #0
    7188:	e014      	b.n	71b4 <udc_req_std_ep_get_status+0x40>
    718a:	4b0d      	ldr	r3, [pc, #52]	; (71c0 <udc_req_std_ep_get_status+0x4c>)
    718c:	58e3      	ldr	r3, [r4, r3]
    718e:	889b      	ldrh	r3, [r3, #4]
    7190:	b2db      	uxtb	r3, r3
    7192:	0018      	movs	r0, r3
    7194:	4b0b      	ldr	r3, [pc, #44]	; (71c4 <udc_req_std_ep_get_status+0x50>)
    7196:	58e3      	ldr	r3, [r4, r3]
    7198:	4798      	blx	r3
    719a:	0003      	movs	r3, r0
    719c:	b29a      	uxth	r2, r3
    719e:	4b0a      	ldr	r3, [pc, #40]	; (71c8 <udc_req_std_ep_get_status+0x54>)
    71a0:	447b      	add	r3, pc
    71a2:	801a      	strh	r2, [r3, #0]
    71a4:	4b09      	ldr	r3, [pc, #36]	; (71cc <udc_req_std_ep_get_status+0x58>)
    71a6:	447b      	add	r3, pc
    71a8:	2102      	movs	r1, #2
    71aa:	0018      	movs	r0, r3
    71ac:	4b08      	ldr	r3, [pc, #32]	; (71d0 <udc_req_std_ep_get_status+0x5c>)
    71ae:	58e3      	ldr	r3, [r4, r3]
    71b0:	4798      	blx	r3
    71b2:	2301      	movs	r3, #1
    71b4:	0018      	movs	r0, r3
    71b6:	46bd      	mov	sp, r7
    71b8:	bdb0      	pop	{r4, r5, r7, pc}
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	0000ac66 	.word	0x0000ac66
    71c0:	000001e8 	.word	0x000001e8
    71c4:	000001a8 	.word	0x000001a8
    71c8:	1fff9388 	.word	0x1fff9388
    71cc:	1fff9382 	.word	0x1fff9382
    71d0:	0000005c 	.word	0x0000005c

000071d4 <udc_req_std_dev_clear_feature>:
    71d4:	b580      	push	{r7, lr}
    71d6:	af00      	add	r7, sp, #0
    71d8:	4b0e      	ldr	r3, [pc, #56]	; (7214 <udc_req_std_dev_clear_feature+0x40>)
    71da:	447b      	add	r3, pc
    71dc:	4a0e      	ldr	r2, [pc, #56]	; (7218 <udc_req_std_dev_clear_feature+0x44>)
    71de:	589a      	ldr	r2, [r3, r2]
    71e0:	88d2      	ldrh	r2, [r2, #6]
    71e2:	2a00      	cmp	r2, #0
    71e4:	d001      	beq.n	71ea <udc_req_std_dev_clear_feature+0x16>
    71e6:	2300      	movs	r3, #0
    71e8:	e010      	b.n	720c <udc_req_std_dev_clear_feature+0x38>
    71ea:	4a0b      	ldr	r2, [pc, #44]	; (7218 <udc_req_std_dev_clear_feature+0x44>)
    71ec:	589b      	ldr	r3, [r3, r2]
    71ee:	885b      	ldrh	r3, [r3, #2]
    71f0:	2b01      	cmp	r3, #1
    71f2:	d10a      	bne.n	720a <udc_req_std_dev_clear_feature+0x36>
    71f4:	4b09      	ldr	r3, [pc, #36]	; (721c <udc_req_std_dev_clear_feature+0x48>)
    71f6:	447b      	add	r3, pc
    71f8:	881b      	ldrh	r3, [r3, #0]
    71fa:	2202      	movs	r2, #2
    71fc:	4393      	bics	r3, r2
    71fe:	b29a      	uxth	r2, r3
    7200:	4b07      	ldr	r3, [pc, #28]	; (7220 <udc_req_std_dev_clear_feature+0x4c>)
    7202:	447b      	add	r3, pc
    7204:	801a      	strh	r2, [r3, #0]
    7206:	2301      	movs	r3, #1
    7208:	e000      	b.n	720c <udc_req_std_dev_clear_feature+0x38>
    720a:	2300      	movs	r3, #0
    720c:	0018      	movs	r0, r3
    720e:	46bd      	mov	sp, r7
    7210:	bd80      	pop	{r7, pc}
    7212:	46c0      	nop			; (mov r8, r8)
    7214:	0000ac06 	.word	0x0000ac06
    7218:	000001e8 	.word	0x000001e8
    721c:	1fff931e 	.word	0x1fff931e
    7220:	1fff9312 	.word	0x1fff9312

00007224 <udc_req_std_ep_clear_feature>:
    7224:	b580      	push	{r7, lr}
    7226:	af00      	add	r7, sp, #0
    7228:	4b0d      	ldr	r3, [pc, #52]	; (7260 <udc_req_std_ep_clear_feature+0x3c>)
    722a:	447b      	add	r3, pc
    722c:	4a0d      	ldr	r2, [pc, #52]	; (7264 <udc_req_std_ep_clear_feature+0x40>)
    722e:	589a      	ldr	r2, [r3, r2]
    7230:	88d2      	ldrh	r2, [r2, #6]
    7232:	2a00      	cmp	r2, #0
    7234:	d001      	beq.n	723a <udc_req_std_ep_clear_feature+0x16>
    7236:	2300      	movs	r3, #0
    7238:	e00f      	b.n	725a <udc_req_std_ep_clear_feature+0x36>
    723a:	4a0a      	ldr	r2, [pc, #40]	; (7264 <udc_req_std_ep_clear_feature+0x40>)
    723c:	589a      	ldr	r2, [r3, r2]
    723e:	8852      	ldrh	r2, [r2, #2]
    7240:	2a00      	cmp	r2, #0
    7242:	d109      	bne.n	7258 <udc_req_std_ep_clear_feature+0x34>
    7244:	4a07      	ldr	r2, [pc, #28]	; (7264 <udc_req_std_ep_clear_feature+0x40>)
    7246:	589a      	ldr	r2, [r3, r2]
    7248:	8892      	ldrh	r2, [r2, #4]
    724a:	b2d2      	uxtb	r2, r2
    724c:	0010      	movs	r0, r2
    724e:	4a06      	ldr	r2, [pc, #24]	; (7268 <udc_req_std_ep_clear_feature+0x44>)
    7250:	589b      	ldr	r3, [r3, r2]
    7252:	4798      	blx	r3
    7254:	0003      	movs	r3, r0
    7256:	e000      	b.n	725a <udc_req_std_ep_clear_feature+0x36>
    7258:	2300      	movs	r3, #0
    725a:	0018      	movs	r0, r3
    725c:	46bd      	mov	sp, r7
    725e:	bd80      	pop	{r7, pc}
    7260:	0000abb6 	.word	0x0000abb6
    7264:	000001e8 	.word	0x000001e8
    7268:	000001bc 	.word	0x000001bc

0000726c <udc_req_std_dev_set_feature>:
    726c:	b580      	push	{r7, lr}
    726e:	af00      	add	r7, sp, #0
    7270:	4b0a      	ldr	r3, [pc, #40]	; (729c <udc_req_std_dev_set_feature+0x30>)
    7272:	447b      	add	r3, pc
    7274:	4a0a      	ldr	r2, [pc, #40]	; (72a0 <udc_req_std_dev_set_feature+0x34>)
    7276:	589a      	ldr	r2, [r3, r2]
    7278:	88d2      	ldrh	r2, [r2, #6]
    727a:	2a00      	cmp	r2, #0
    727c:	d001      	beq.n	7282 <udc_req_std_dev_set_feature+0x16>
    727e:	2300      	movs	r3, #0
    7280:	e008      	b.n	7294 <udc_req_std_dev_set_feature+0x28>
    7282:	4a07      	ldr	r2, [pc, #28]	; (72a0 <udc_req_std_dev_set_feature+0x34>)
    7284:	589b      	ldr	r3, [r3, r2]
    7286:	885b      	ldrh	r3, [r3, #2]
    7288:	2b01      	cmp	r3, #1
    728a:	d002      	beq.n	7292 <udc_req_std_dev_set_feature+0x26>
    728c:	46c0      	nop			; (mov r8, r8)
    728e:	2300      	movs	r3, #0
    7290:	e000      	b.n	7294 <udc_req_std_dev_set_feature+0x28>
    7292:	2300      	movs	r3, #0
    7294:	0018      	movs	r0, r3
    7296:	46bd      	mov	sp, r7
    7298:	bd80      	pop	{r7, pc}
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	0000ab6e 	.word	0x0000ab6e
    72a0:	000001e8 	.word	0x000001e8

000072a4 <udc_req_std_ep_set_feature>:
    72a4:	b5b0      	push	{r4, r5, r7, lr}
    72a6:	af00      	add	r7, sp, #0
    72a8:	4c11      	ldr	r4, [pc, #68]	; (72f0 <udc_req_std_ep_set_feature+0x4c>)
    72aa:	447c      	add	r4, pc
    72ac:	4b11      	ldr	r3, [pc, #68]	; (72f4 <udc_req_std_ep_set_feature+0x50>)
    72ae:	58e3      	ldr	r3, [r4, r3]
    72b0:	88db      	ldrh	r3, [r3, #6]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d001      	beq.n	72ba <udc_req_std_ep_set_feature+0x16>
    72b6:	2300      	movs	r3, #0
    72b8:	e017      	b.n	72ea <udc_req_std_ep_set_feature+0x46>
    72ba:	4b0e      	ldr	r3, [pc, #56]	; (72f4 <udc_req_std_ep_set_feature+0x50>)
    72bc:	58e3      	ldr	r3, [r4, r3]
    72be:	885b      	ldrh	r3, [r3, #2]
    72c0:	2b00      	cmp	r3, #0
    72c2:	d111      	bne.n	72e8 <udc_req_std_ep_set_feature+0x44>
    72c4:	4b0b      	ldr	r3, [pc, #44]	; (72f4 <udc_req_std_ep_set_feature+0x50>)
    72c6:	58e3      	ldr	r3, [r4, r3]
    72c8:	889b      	ldrh	r3, [r3, #4]
    72ca:	b2db      	uxtb	r3, r3
    72cc:	0018      	movs	r0, r3
    72ce:	4b0a      	ldr	r3, [pc, #40]	; (72f8 <udc_req_std_ep_set_feature+0x54>)
    72d0:	58e3      	ldr	r3, [r4, r3]
    72d2:	4798      	blx	r3
    72d4:	4b07      	ldr	r3, [pc, #28]	; (72f4 <udc_req_std_ep_set_feature+0x50>)
    72d6:	58e3      	ldr	r3, [r4, r3]
    72d8:	889b      	ldrh	r3, [r3, #4]
    72da:	b2db      	uxtb	r3, r3
    72dc:	0018      	movs	r0, r3
    72de:	4b07      	ldr	r3, [pc, #28]	; (72fc <udc_req_std_ep_set_feature+0x58>)
    72e0:	58e3      	ldr	r3, [r4, r3]
    72e2:	4798      	blx	r3
    72e4:	0003      	movs	r3, r0
    72e6:	e000      	b.n	72ea <udc_req_std_ep_set_feature+0x46>
    72e8:	2300      	movs	r3, #0
    72ea:	0018      	movs	r0, r3
    72ec:	46bd      	mov	sp, r7
    72ee:	bdb0      	pop	{r4, r5, r7, pc}
    72f0:	0000ab36 	.word	0x0000ab36
    72f4:	000001e8 	.word	0x000001e8
    72f8:	000001b8 	.word	0x000001b8
    72fc:	00000128 	.word	0x00000128

00007300 <udc_valid_address>:
    7300:	b580      	push	{r7, lr}
    7302:	af00      	add	r7, sp, #0
    7304:	4b07      	ldr	r3, [pc, #28]	; (7324 <udc_valid_address+0x24>)
    7306:	447b      	add	r3, pc
    7308:	4a07      	ldr	r2, [pc, #28]	; (7328 <udc_valid_address+0x28>)
    730a:	589a      	ldr	r2, [r3, r2]
    730c:	8852      	ldrh	r2, [r2, #2]
    730e:	b2d2      	uxtb	r2, r2
    7310:	217f      	movs	r1, #127	; 0x7f
    7312:	400a      	ands	r2, r1
    7314:	b2d2      	uxtb	r2, r2
    7316:	0010      	movs	r0, r2
    7318:	4a04      	ldr	r2, [pc, #16]	; (732c <udc_valid_address+0x2c>)
    731a:	589b      	ldr	r3, [r3, r2]
    731c:	4798      	blx	r3
    731e:	46c0      	nop			; (mov r8, r8)
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}
    7324:	0000aada 	.word	0x0000aada
    7328:	000001e8 	.word	0x000001e8
    732c:	000002d8 	.word	0x000002d8

00007330 <udc_req_std_dev_set_address>:
    7330:	b580      	push	{r7, lr}
    7332:	af00      	add	r7, sp, #0
    7334:	4b08      	ldr	r3, [pc, #32]	; (7358 <udc_req_std_dev_set_address+0x28>)
    7336:	447b      	add	r3, pc
    7338:	4a08      	ldr	r2, [pc, #32]	; (735c <udc_req_std_dev_set_address+0x2c>)
    733a:	589a      	ldr	r2, [r3, r2]
    733c:	88d2      	ldrh	r2, [r2, #6]
    733e:	2a00      	cmp	r2, #0
    7340:	d001      	beq.n	7346 <udc_req_std_dev_set_address+0x16>
    7342:	2300      	movs	r3, #0
    7344:	e005      	b.n	7352 <udc_req_std_dev_set_address+0x22>
    7346:	4a05      	ldr	r2, [pc, #20]	; (735c <udc_req_std_dev_set_address+0x2c>)
    7348:	589b      	ldr	r3, [r3, r2]
    734a:	4a05      	ldr	r2, [pc, #20]	; (7360 <udc_req_std_dev_set_address+0x30>)
    734c:	447a      	add	r2, pc
    734e:	611a      	str	r2, [r3, #16]
    7350:	2301      	movs	r3, #1
    7352:	0018      	movs	r0, r3
    7354:	46bd      	mov	sp, r7
    7356:	bd80      	pop	{r7, pc}
    7358:	0000aaaa 	.word	0x0000aaaa
    735c:	000001e8 	.word	0x000001e8
    7360:	ffffffb1 	.word	0xffffffb1

00007364 <udc_req_std_dev_get_str_desc>:
    7364:	b590      	push	{r4, r7, lr}
    7366:	b085      	sub	sp, #20
    7368:	af00      	add	r7, sp, #0
    736a:	4c3d      	ldr	r4, [pc, #244]	; (7460 <udc_req_std_dev_get_str_desc+0xfc>)
    736c:	447c      	add	r4, pc
    736e:	1dfb      	adds	r3, r7, #7
    7370:	2200      	movs	r2, #0
    7372:	701a      	strb	r2, [r3, #0]
    7374:	4b3b      	ldr	r3, [pc, #236]	; (7464 <udc_req_std_dev_get_str_desc+0x100>)
    7376:	58e3      	ldr	r3, [r4, r3]
    7378:	885b      	ldrh	r3, [r3, #2]
    737a:	001a      	movs	r2, r3
    737c:	23ff      	movs	r3, #255	; 0xff
    737e:	4013      	ands	r3, r2
    7380:	2b03      	cmp	r3, #3
    7382:	d82a      	bhi.n	73da <udc_req_std_dev_get_str_desc+0x76>
    7384:	0018      	movs	r0, r3
    7386:	f009 f983 	bl	10690 <__gnu_thumb1_case_si>
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	00000010 	.word	0x00000010
    7390:	00000020 	.word	0x00000020
    7394:	0000002e 	.word	0x0000002e
    7398:	0000003c 	.word	0x0000003c
    739c:	4b32      	ldr	r3, [pc, #200]	; (7468 <udc_req_std_dev_get_str_desc+0x104>)
    739e:	447b      	add	r3, pc
    73a0:	2104      	movs	r1, #4
    73a2:	0018      	movs	r0, r3
    73a4:	4b31      	ldr	r3, [pc, #196]	; (746c <udc_req_std_dev_get_str_desc+0x108>)
    73a6:	58e3      	ldr	r3, [r4, r3]
    73a8:	4798      	blx	r3
    73aa:	e018      	b.n	73de <udc_req_std_dev_get_str_desc+0x7a>
    73ac:	1dfb      	adds	r3, r7, #7
    73ae:	220b      	movs	r2, #11
    73b0:	701a      	strb	r2, [r3, #0]
    73b2:	4b2f      	ldr	r3, [pc, #188]	; (7470 <udc_req_std_dev_get_str_desc+0x10c>)
    73b4:	447b      	add	r3, pc
    73b6:	60bb      	str	r3, [r7, #8]
    73b8:	e011      	b.n	73de <udc_req_std_dev_get_str_desc+0x7a>
    73ba:	1dfb      	adds	r3, r7, #7
    73bc:	2210      	movs	r2, #16
    73be:	701a      	strb	r2, [r3, #0]
    73c0:	4b2c      	ldr	r3, [pc, #176]	; (7474 <udc_req_std_dev_get_str_desc+0x110>)
    73c2:	447b      	add	r3, pc
    73c4:	60bb      	str	r3, [r7, #8]
    73c6:	e00a      	b.n	73de <udc_req_std_dev_get_str_desc+0x7a>
    73c8:	1dfb      	adds	r3, r7, #7
    73ca:	2207      	movs	r2, #7
    73cc:	701a      	strb	r2, [r3, #0]
    73ce:	4b2a      	ldr	r3, [pc, #168]	; (7478 <udc_req_std_dev_get_str_desc+0x114>)
    73d0:	447b      	add	r3, pc
    73d2:	4798      	blx	r3
    73d4:	0003      	movs	r3, r0
    73d6:	60bb      	str	r3, [r7, #8]
    73d8:	e001      	b.n	73de <udc_req_std_dev_get_str_desc+0x7a>
    73da:	2300      	movs	r3, #0
    73dc:	e03c      	b.n	7458 <udc_req_std_dev_get_str_desc+0xf4>
    73de:	1dfb      	adds	r3, r7, #7
    73e0:	781b      	ldrb	r3, [r3, #0]
    73e2:	2b00      	cmp	r3, #0
    73e4:	d037      	beq.n	7456 <udc_req_std_dev_get_str_desc+0xf2>
    73e6:	230f      	movs	r3, #15
    73e8:	18fb      	adds	r3, r7, r3
    73ea:	2200      	movs	r2, #0
    73ec:	701a      	strb	r2, [r3, #0]
    73ee:	e017      	b.n	7420 <udc_req_std_dev_get_str_desc+0xbc>
    73f0:	230f      	movs	r3, #15
    73f2:	18fb      	adds	r3, r7, r3
    73f4:	781b      	ldrb	r3, [r3, #0]
    73f6:	220f      	movs	r2, #15
    73f8:	18ba      	adds	r2, r7, r2
    73fa:	7812      	ldrb	r2, [r2, #0]
    73fc:	68b9      	ldr	r1, [r7, #8]
    73fe:	188a      	adds	r2, r1, r2
    7400:	7812      	ldrb	r2, [r2, #0]
    7402:	b291      	uxth	r1, r2
    7404:	4a1d      	ldr	r2, [pc, #116]	; (747c <udc_req_std_dev_get_str_desc+0x118>)
    7406:	447a      	add	r2, pc
    7408:	005b      	lsls	r3, r3, #1
    740a:	18d3      	adds	r3, r2, r3
    740c:	3302      	adds	r3, #2
    740e:	1c0a      	adds	r2, r1, #0
    7410:	801a      	strh	r2, [r3, #0]
    7412:	230f      	movs	r3, #15
    7414:	18fb      	adds	r3, r7, r3
    7416:	781a      	ldrb	r2, [r3, #0]
    7418:	230f      	movs	r3, #15
    741a:	18fb      	adds	r3, r7, r3
    741c:	3201      	adds	r2, #1
    741e:	701a      	strb	r2, [r3, #0]
    7420:	230f      	movs	r3, #15
    7422:	18fa      	adds	r2, r7, r3
    7424:	1dfb      	adds	r3, r7, #7
    7426:	7812      	ldrb	r2, [r2, #0]
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	429a      	cmp	r2, r3
    742c:	d3e0      	bcc.n	73f0 <udc_req_std_dev_get_str_desc+0x8c>
    742e:	1dfb      	adds	r3, r7, #7
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	3301      	adds	r3, #1
    7434:	b2db      	uxtb	r3, r3
    7436:	18db      	adds	r3, r3, r3
    7438:	b2da      	uxtb	r2, r3
    743a:	4b11      	ldr	r3, [pc, #68]	; (7480 <udc_req_std_dev_get_str_desc+0x11c>)
    743c:	447b      	add	r3, pc
    743e:	701a      	strb	r2, [r3, #0]
    7440:	4b10      	ldr	r3, [pc, #64]	; (7484 <udc_req_std_dev_get_str_desc+0x120>)
    7442:	447b      	add	r3, pc
    7444:	781b      	ldrb	r3, [r3, #0]
    7446:	b29b      	uxth	r3, r3
    7448:	4a0f      	ldr	r2, [pc, #60]	; (7488 <udc_req_std_dev_get_str_desc+0x124>)
    744a:	447a      	add	r2, pc
    744c:	0019      	movs	r1, r3
    744e:	0010      	movs	r0, r2
    7450:	4b06      	ldr	r3, [pc, #24]	; (746c <udc_req_std_dev_get_str_desc+0x108>)
    7452:	58e3      	ldr	r3, [r4, r3]
    7454:	4798      	blx	r3
    7456:	2301      	movs	r3, #1
    7458:	0018      	movs	r0, r3
    745a:	46bd      	mov	sp, r7
    745c:	b005      	add	sp, #20
    745e:	bd90      	pop	{r4, r7, pc}
    7460:	0000aa74 	.word	0x0000aa74
    7464:	000001e8 	.word	0x000001e8
    7468:	1fff8d06 	.word	0x1fff8d06
    746c:	0000005c 	.word	0x0000005c
    7470:	1fff8cf4 	.word	0x1fff8cf4
    7474:	1fff8cf2 	.word	0x1fff8cf2
    7478:	fffff955 	.word	0xfffff955
    747c:	1fff8cc2 	.word	0x1fff8cc2
    7480:	1fff8c8c 	.word	0x1fff8c8c
    7484:	1fff8c86 	.word	0x1fff8c86
    7488:	1fff8c7e 	.word	0x1fff8c7e

0000748c <udc_req_std_dev_get_descriptor>:
    748c:	b590      	push	{r4, r7, lr}
    748e:	b083      	sub	sp, #12
    7490:	af00      	add	r7, sp, #0
    7492:	4c51      	ldr	r4, [pc, #324]	; (75d8 <udc_req_std_dev_get_descriptor+0x14c>)
    7494:	447c      	add	r4, pc
    7496:	4b51      	ldr	r3, [pc, #324]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    7498:	58e3      	ldr	r3, [r4, r3]
    749a:	885a      	ldrh	r2, [r3, #2]
    749c:	1dfb      	adds	r3, r7, #7
    749e:	701a      	strb	r2, [r3, #0]
    74a0:	4b4e      	ldr	r3, [pc, #312]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    74a2:	58e3      	ldr	r3, [r4, r3]
    74a4:	885b      	ldrh	r3, [r3, #2]
    74a6:	0a1b      	lsrs	r3, r3, #8
    74a8:	b29b      	uxth	r3, r3
    74aa:	b2db      	uxtb	r3, r3
    74ac:	3b01      	subs	r3, #1
    74ae:	2b0e      	cmp	r3, #14
    74b0:	d900      	bls.n	74b4 <udc_req_std_dev_get_descriptor+0x28>
    74b2:	e07b      	b.n	75ac <udc_req_std_dev_get_descriptor+0x120>
    74b4:	0018      	movs	r0, r3
    74b6:	f009 f8eb 	bl	10690 <__gnu_thumb1_case_si>
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	0000003c 	.word	0x0000003c
    74c0:	00000058 	.word	0x00000058
    74c4:	000000d8 	.word	0x000000d8
    74c8:	000000f0 	.word	0x000000f0
    74cc:	000000f0 	.word	0x000000f0
    74d0:	000000f0 	.word	0x000000f0
    74d4:	000000f0 	.word	0x000000f0
    74d8:	000000f0 	.word	0x000000f0
    74dc:	000000f0 	.word	0x000000f0
    74e0:	000000f0 	.word	0x000000f0
    74e4:	000000f0 	.word	0x000000f0
    74e8:	000000f0 	.word	0x000000f0
    74ec:	000000f0 	.word	0x000000f0
    74f0:	000000f0 	.word	0x000000f0
    74f4:	000000aa 	.word	0x000000aa
    74f8:	4b39      	ldr	r3, [pc, #228]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    74fa:	58e3      	ldr	r3, [r4, r3]
    74fc:	681a      	ldr	r2, [r3, #0]
    74fe:	4b38      	ldr	r3, [pc, #224]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    7500:	58e3      	ldr	r3, [r4, r3]
    7502:	681b      	ldr	r3, [r3, #0]
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	b29b      	uxth	r3, r3
    7508:	0019      	movs	r1, r3
    750a:	0010      	movs	r0, r2
    750c:	4b35      	ldr	r3, [pc, #212]	; (75e4 <udc_req_std_dev_get_descriptor+0x158>)
    750e:	58e3      	ldr	r3, [r4, r3]
    7510:	4798      	blx	r3
    7512:	e04e      	b.n	75b2 <udc_req_std_dev_get_descriptor+0x126>
    7514:	4b32      	ldr	r3, [pc, #200]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    7516:	58e3      	ldr	r3, [r4, r3]
    7518:	681b      	ldr	r3, [r3, #0]
    751a:	7c5b      	ldrb	r3, [r3, #17]
    751c:	1dfa      	adds	r2, r7, #7
    751e:	7812      	ldrb	r2, [r2, #0]
    7520:	429a      	cmp	r2, r3
    7522:	d301      	bcc.n	7528 <udc_req_std_dev_get_descriptor+0x9c>
    7524:	2300      	movs	r3, #0
    7526:	e053      	b.n	75d0 <udc_req_std_dev_get_descriptor+0x144>
    7528:	4b2d      	ldr	r3, [pc, #180]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    752a:	58e3      	ldr	r3, [r4, r3]
    752c:	685a      	ldr	r2, [r3, #4]
    752e:	1dfb      	adds	r3, r7, #7
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	00db      	lsls	r3, r3, #3
    7534:	18d3      	adds	r3, r2, r3
    7536:	6818      	ldr	r0, [r3, #0]
    7538:	4b29      	ldr	r3, [pc, #164]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    753a:	58e3      	ldr	r3, [r4, r3]
    753c:	685a      	ldr	r2, [r3, #4]
    753e:	1dfb      	adds	r3, r7, #7
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	00db      	lsls	r3, r3, #3
    7544:	18d3      	adds	r3, r2, r3
    7546:	681b      	ldr	r3, [r3, #0]
    7548:	789a      	ldrb	r2, [r3, #2]
    754a:	78db      	ldrb	r3, [r3, #3]
    754c:	021b      	lsls	r3, r3, #8
    754e:	4313      	orrs	r3, r2
    7550:	b29b      	uxth	r3, r3
    7552:	0019      	movs	r1, r3
    7554:	4b23      	ldr	r3, [pc, #140]	; (75e4 <udc_req_std_dev_get_descriptor+0x158>)
    7556:	58e3      	ldr	r3, [r4, r3]
    7558:	4798      	blx	r3
    755a:	4b20      	ldr	r3, [pc, #128]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    755c:	58e3      	ldr	r3, [r4, r3]
    755e:	689b      	ldr	r3, [r3, #8]
    7560:	2202      	movs	r2, #2
    7562:	705a      	strb	r2, [r3, #1]
    7564:	e025      	b.n	75b2 <udc_req_std_dev_get_descriptor+0x126>
    7566:	4b1e      	ldr	r3, [pc, #120]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    7568:	58e3      	ldr	r3, [r4, r3]
    756a:	689b      	ldr	r3, [r3, #8]
    756c:	2b00      	cmp	r3, #0
    756e:	d101      	bne.n	7574 <udc_req_std_dev_get_descriptor+0xe8>
    7570:	2300      	movs	r3, #0
    7572:	e02d      	b.n	75d0 <udc_req_std_dev_get_descriptor+0x144>
    7574:	4b1a      	ldr	r3, [pc, #104]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    7576:	58e3      	ldr	r3, [r4, r3]
    7578:	6898      	ldr	r0, [r3, #8]
    757a:	4b19      	ldr	r3, [pc, #100]	; (75e0 <udc_req_std_dev_get_descriptor+0x154>)
    757c:	58e3      	ldr	r3, [r4, r3]
    757e:	689b      	ldr	r3, [r3, #8]
    7580:	789a      	ldrb	r2, [r3, #2]
    7582:	78db      	ldrb	r3, [r3, #3]
    7584:	021b      	lsls	r3, r3, #8
    7586:	4313      	orrs	r3, r2
    7588:	b29b      	uxth	r3, r3
    758a:	0019      	movs	r1, r3
    758c:	4b15      	ldr	r3, [pc, #84]	; (75e4 <udc_req_std_dev_get_descriptor+0x158>)
    758e:	58e3      	ldr	r3, [r4, r3]
    7590:	4798      	blx	r3
    7592:	e00e      	b.n	75b2 <udc_req_std_dev_get_descriptor+0x126>
    7594:	4b14      	ldr	r3, [pc, #80]	; (75e8 <udc_req_std_dev_get_descriptor+0x15c>)
    7596:	447b      	add	r3, pc
    7598:	4798      	blx	r3
    759a:	0003      	movs	r3, r0
    759c:	001a      	movs	r2, r3
    759e:	2301      	movs	r3, #1
    75a0:	4053      	eors	r3, r2
    75a2:	b2db      	uxtb	r3, r3
    75a4:	2b00      	cmp	r3, #0
    75a6:	d003      	beq.n	75b0 <udc_req_std_dev_get_descriptor+0x124>
    75a8:	2300      	movs	r3, #0
    75aa:	e011      	b.n	75d0 <udc_req_std_dev_get_descriptor+0x144>
    75ac:	2300      	movs	r3, #0
    75ae:	e00f      	b.n	75d0 <udc_req_std_dev_get_descriptor+0x144>
    75b0:	46c0      	nop			; (mov r8, r8)
    75b2:	4b0a      	ldr	r3, [pc, #40]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    75b4:	58e3      	ldr	r3, [r4, r3]
    75b6:	88da      	ldrh	r2, [r3, #6]
    75b8:	4b08      	ldr	r3, [pc, #32]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    75ba:	58e3      	ldr	r3, [r4, r3]
    75bc:	899b      	ldrh	r3, [r3, #12]
    75be:	429a      	cmp	r2, r3
    75c0:	d205      	bcs.n	75ce <udc_req_std_dev_get_descriptor+0x142>
    75c2:	4b06      	ldr	r3, [pc, #24]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    75c4:	58e3      	ldr	r3, [r4, r3]
    75c6:	88da      	ldrh	r2, [r3, #6]
    75c8:	4b04      	ldr	r3, [pc, #16]	; (75dc <udc_req_std_dev_get_descriptor+0x150>)
    75ca:	58e3      	ldr	r3, [r4, r3]
    75cc:	819a      	strh	r2, [r3, #12]
    75ce:	2301      	movs	r3, #1
    75d0:	0018      	movs	r0, r3
    75d2:	46bd      	mov	sp, r7
    75d4:	b003      	add	sp, #12
    75d6:	bd90      	pop	{r4, r7, pc}
    75d8:	0000a94c 	.word	0x0000a94c
    75dc:	000001e8 	.word	0x000001e8
    75e0:	00000118 	.word	0x00000118
    75e4:	0000005c 	.word	0x0000005c
    75e8:	fffffdcb 	.word	0xfffffdcb

000075ec <udc_req_std_dev_get_configuration>:
    75ec:	b580      	push	{r7, lr}
    75ee:	af00      	add	r7, sp, #0
    75f0:	4b09      	ldr	r3, [pc, #36]	; (7618 <udc_req_std_dev_get_configuration+0x2c>)
    75f2:	447b      	add	r3, pc
    75f4:	4a09      	ldr	r2, [pc, #36]	; (761c <udc_req_std_dev_get_configuration+0x30>)
    75f6:	589a      	ldr	r2, [r3, r2]
    75f8:	88d2      	ldrh	r2, [r2, #6]
    75fa:	2a01      	cmp	r2, #1
    75fc:	d001      	beq.n	7602 <udc_req_std_dev_get_configuration+0x16>
    75fe:	2300      	movs	r3, #0
    7600:	e007      	b.n	7612 <udc_req_std_dev_get_configuration+0x26>
    7602:	4a07      	ldr	r2, [pc, #28]	; (7620 <udc_req_std_dev_get_configuration+0x34>)
    7604:	447a      	add	r2, pc
    7606:	2101      	movs	r1, #1
    7608:	0010      	movs	r0, r2
    760a:	4a06      	ldr	r2, [pc, #24]	; (7624 <udc_req_std_dev_get_configuration+0x38>)
    760c:	589b      	ldr	r3, [r3, r2]
    760e:	4798      	blx	r3
    7610:	2301      	movs	r3, #1
    7612:	0018      	movs	r0, r3
    7614:	46bd      	mov	sp, r7
    7616:	bd80      	pop	{r7, pc}
    7618:	0000a7ee 	.word	0x0000a7ee
    761c:	000001e8 	.word	0x000001e8
    7620:	1fff8f18 	.word	0x1fff8f18
    7624:	0000005c 	.word	0x0000005c

00007628 <udc_req_std_dev_set_configuration>:
    7628:	b590      	push	{r4, r7, lr}
    762a:	b083      	sub	sp, #12
    762c:	af00      	add	r7, sp, #0
    762e:	4c32      	ldr	r4, [pc, #200]	; (76f8 <udc_req_std_dev_set_configuration+0xd0>)
    7630:	447c      	add	r4, pc
    7632:	4b32      	ldr	r3, [pc, #200]	; (76fc <udc_req_std_dev_set_configuration+0xd4>)
    7634:	58e3      	ldr	r3, [r4, r3]
    7636:	88db      	ldrh	r3, [r3, #6]
    7638:	2b00      	cmp	r3, #0
    763a:	d001      	beq.n	7640 <udc_req_std_dev_set_configuration+0x18>
    763c:	2300      	movs	r3, #0
    763e:	e056      	b.n	76ee <udc_req_std_dev_set_configuration+0xc6>
    7640:	4b2f      	ldr	r3, [pc, #188]	; (7700 <udc_req_std_dev_set_configuration+0xd8>)
    7642:	58e3      	ldr	r3, [r4, r3]
    7644:	4798      	blx	r3
    7646:	1e03      	subs	r3, r0, #0
    7648:	d101      	bne.n	764e <udc_req_std_dev_set_configuration+0x26>
    764a:	2300      	movs	r3, #0
    764c:	e04f      	b.n	76ee <udc_req_std_dev_set_configuration+0xc6>
    764e:	4b2b      	ldr	r3, [pc, #172]	; (76fc <udc_req_std_dev_set_configuration+0xd4>)
    7650:	58e3      	ldr	r3, [r4, r3]
    7652:	885b      	ldrh	r3, [r3, #2]
    7654:	001a      	movs	r2, r3
    7656:	23ff      	movs	r3, #255	; 0xff
    7658:	401a      	ands	r2, r3
    765a:	4b2a      	ldr	r3, [pc, #168]	; (7704 <udc_req_std_dev_set_configuration+0xdc>)
    765c:	58e3      	ldr	r3, [r4, r3]
    765e:	681b      	ldr	r3, [r3, #0]
    7660:	7c5b      	ldrb	r3, [r3, #17]
    7662:	429a      	cmp	r2, r3
    7664:	dd01      	ble.n	766a <udc_req_std_dev_set_configuration+0x42>
    7666:	2300      	movs	r3, #0
    7668:	e041      	b.n	76ee <udc_req_std_dev_set_configuration+0xc6>
    766a:	4b27      	ldr	r3, [pc, #156]	; (7708 <udc_req_std_dev_set_configuration+0xe0>)
    766c:	58e3      	ldr	r3, [r4, r3]
    766e:	4798      	blx	r3
    7670:	4b22      	ldr	r3, [pc, #136]	; (76fc <udc_req_std_dev_set_configuration+0xd4>)
    7672:	58e3      	ldr	r3, [r4, r3]
    7674:	885b      	ldrh	r3, [r3, #2]
    7676:	b2da      	uxtb	r2, r3
    7678:	4b24      	ldr	r3, [pc, #144]	; (770c <udc_req_std_dev_set_configuration+0xe4>)
    767a:	447b      	add	r3, pc
    767c:	701a      	strb	r2, [r3, #0]
    767e:	4b24      	ldr	r3, [pc, #144]	; (7710 <udc_req_std_dev_set_configuration+0xe8>)
    7680:	447b      	add	r3, pc
    7682:	781b      	ldrb	r3, [r3, #0]
    7684:	2b00      	cmp	r3, #0
    7686:	d101      	bne.n	768c <udc_req_std_dev_set_configuration+0x64>
    7688:	2301      	movs	r3, #1
    768a:	e030      	b.n	76ee <udc_req_std_dev_set_configuration+0xc6>
    768c:	4b1d      	ldr	r3, [pc, #116]	; (7704 <udc_req_std_dev_set_configuration+0xdc>)
    768e:	58e3      	ldr	r3, [r4, r3]
    7690:	685a      	ldr	r2, [r3, #4]
    7692:	4b20      	ldr	r3, [pc, #128]	; (7714 <udc_req_std_dev_set_configuration+0xec>)
    7694:	447b      	add	r3, pc
    7696:	781b      	ldrb	r3, [r3, #0]
    7698:	491f      	ldr	r1, [pc, #124]	; (7718 <udc_req_std_dev_set_configuration+0xf0>)
    769a:	468c      	mov	ip, r1
    769c:	4463      	add	r3, ip
    769e:	00db      	lsls	r3, r3, #3
    76a0:	18d2      	adds	r2, r2, r3
    76a2:	4b1e      	ldr	r3, [pc, #120]	; (771c <udc_req_std_dev_set_configuration+0xf4>)
    76a4:	447b      	add	r3, pc
    76a6:	601a      	str	r2, [r3, #0]
    76a8:	1dfb      	adds	r3, r7, #7
    76aa:	2200      	movs	r2, #0
    76ac:	701a      	strb	r2, [r3, #0]
    76ae:	e014      	b.n	76da <udc_req_std_dev_set_configuration+0xb2>
    76b0:	1dfb      	adds	r3, r7, #7
    76b2:	781b      	ldrb	r3, [r3, #0]
    76b4:	2100      	movs	r1, #0
    76b6:	0018      	movs	r0, r3
    76b8:	4b19      	ldr	r3, [pc, #100]	; (7720 <udc_req_std_dev_set_configuration+0xf8>)
    76ba:	447b      	add	r3, pc
    76bc:	4798      	blx	r3
    76be:	0003      	movs	r3, r0
    76c0:	001a      	movs	r2, r3
    76c2:	2301      	movs	r3, #1
    76c4:	4053      	eors	r3, r2
    76c6:	b2db      	uxtb	r3, r3
    76c8:	2b00      	cmp	r3, #0
    76ca:	d001      	beq.n	76d0 <udc_req_std_dev_set_configuration+0xa8>
    76cc:	2300      	movs	r3, #0
    76ce:	e00e      	b.n	76ee <udc_req_std_dev_set_configuration+0xc6>
    76d0:	1dfb      	adds	r3, r7, #7
    76d2:	781a      	ldrb	r2, [r3, #0]
    76d4:	1dfb      	adds	r3, r7, #7
    76d6:	3201      	adds	r2, #1
    76d8:	701a      	strb	r2, [r3, #0]
    76da:	4b12      	ldr	r3, [pc, #72]	; (7724 <udc_req_std_dev_set_configuration+0xfc>)
    76dc:	447b      	add	r3, pc
    76de:	681b      	ldr	r3, [r3, #0]
    76e0:	681b      	ldr	r3, [r3, #0]
    76e2:	791b      	ldrb	r3, [r3, #4]
    76e4:	1dfa      	adds	r2, r7, #7
    76e6:	7812      	ldrb	r2, [r2, #0]
    76e8:	429a      	cmp	r2, r3
    76ea:	d3e1      	bcc.n	76b0 <udc_req_std_dev_set_configuration+0x88>
    76ec:	2301      	movs	r3, #1
    76ee:	0018      	movs	r0, r3
    76f0:	46bd      	mov	sp, r7
    76f2:	b003      	add	sp, #12
    76f4:	bd90      	pop	{r4, r7, pc}
    76f6:	46c0      	nop			; (mov r8, r8)
    76f8:	0000a7b0 	.word	0x0000a7b0
    76fc:	000001e8 	.word	0x000001e8
    7700:	00000038 	.word	0x00000038
    7704:	00000118 	.word	0x00000118
    7708:	000000a0 	.word	0x000000a0
    770c:	1fff8ea2 	.word	0x1fff8ea2
    7710:	1fff8e9c 	.word	0x1fff8e9c
    7714:	1fff8e88 	.word	0x1fff8e88
    7718:	1fffffff 	.word	0x1fffffff
    771c:	1fff8e7c 	.word	0x1fff8e7c
    7720:	fffff8b7 	.word	0xfffff8b7
    7724:	1fff8e44 	.word	0x1fff8e44

00007728 <udc_req_std_iface_get_setting>:
    7728:	b590      	push	{r4, r7, lr}
    772a:	b083      	sub	sp, #12
    772c:	af00      	add	r7, sp, #0
    772e:	4c27      	ldr	r4, [pc, #156]	; (77cc <udc_req_std_iface_get_setting+0xa4>)
    7730:	447c      	add	r4, pc
    7732:	4b27      	ldr	r3, [pc, #156]	; (77d0 <udc_req_std_iface_get_setting+0xa8>)
    7734:	58e3      	ldr	r3, [r4, r3]
    7736:	88db      	ldrh	r3, [r3, #6]
    7738:	2b01      	cmp	r3, #1
    773a:	d001      	beq.n	7740 <udc_req_std_iface_get_setting+0x18>
    773c:	2300      	movs	r3, #0
    773e:	e040      	b.n	77c2 <udc_req_std_iface_get_setting+0x9a>
    7740:	4b24      	ldr	r3, [pc, #144]	; (77d4 <udc_req_std_iface_get_setting+0xac>)
    7742:	447b      	add	r3, pc
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	2b00      	cmp	r3, #0
    7748:	d101      	bne.n	774e <udc_req_std_iface_get_setting+0x26>
    774a:	2300      	movs	r3, #0
    774c:	e039      	b.n	77c2 <udc_req_std_iface_get_setting+0x9a>
    774e:	4b20      	ldr	r3, [pc, #128]	; (77d0 <udc_req_std_iface_get_setting+0xa8>)
    7750:	58e3      	ldr	r3, [r4, r3]
    7752:	889a      	ldrh	r2, [r3, #4]
    7754:	1dfb      	adds	r3, r7, #7
    7756:	701a      	strb	r2, [r3, #0]
    7758:	4b1f      	ldr	r3, [pc, #124]	; (77d8 <udc_req_std_iface_get_setting+0xb0>)
    775a:	447b      	add	r3, pc
    775c:	681b      	ldr	r3, [r3, #0]
    775e:	681b      	ldr	r3, [r3, #0]
    7760:	791b      	ldrb	r3, [r3, #4]
    7762:	1dfa      	adds	r2, r7, #7
    7764:	7812      	ldrb	r2, [r2, #0]
    7766:	429a      	cmp	r2, r3
    7768:	d301      	bcc.n	776e <udc_req_std_iface_get_setting+0x46>
    776a:	2300      	movs	r3, #0
    776c:	e029      	b.n	77c2 <udc_req_std_iface_get_setting+0x9a>
    776e:	1dfb      	adds	r3, r7, #7
    7770:	781b      	ldrb	r3, [r3, #0]
    7772:	2100      	movs	r1, #0
    7774:	0018      	movs	r0, r3
    7776:	4b19      	ldr	r3, [pc, #100]	; (77dc <udc_req_std_iface_get_setting+0xb4>)
    7778:	447b      	add	r3, pc
    777a:	4798      	blx	r3
    777c:	0003      	movs	r3, r0
    777e:	001a      	movs	r2, r3
    7780:	2301      	movs	r3, #1
    7782:	4053      	eors	r3, r2
    7784:	b2db      	uxtb	r3, r3
    7786:	2b00      	cmp	r3, #0
    7788:	d001      	beq.n	778e <udc_req_std_iface_get_setting+0x66>
    778a:	2300      	movs	r3, #0
    778c:	e019      	b.n	77c2 <udc_req_std_iface_get_setting+0x9a>
    778e:	4b14      	ldr	r3, [pc, #80]	; (77e0 <udc_req_std_iface_get_setting+0xb8>)
    7790:	447b      	add	r3, pc
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	685a      	ldr	r2, [r3, #4]
    7796:	1dfb      	adds	r3, r7, #7
    7798:	781b      	ldrb	r3, [r3, #0]
    779a:	009b      	lsls	r3, r3, #2
    779c:	18d3      	adds	r3, r2, r3
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	603b      	str	r3, [r7, #0]
    77a2:	683b      	ldr	r3, [r7, #0]
    77a4:	68db      	ldr	r3, [r3, #12]
    77a6:	4798      	blx	r3
    77a8:	0003      	movs	r3, r0
    77aa:	001a      	movs	r2, r3
    77ac:	4b0d      	ldr	r3, [pc, #52]	; (77e4 <udc_req_std_iface_get_setting+0xbc>)
    77ae:	447b      	add	r3, pc
    77b0:	701a      	strb	r2, [r3, #0]
    77b2:	4b0d      	ldr	r3, [pc, #52]	; (77e8 <udc_req_std_iface_get_setting+0xc0>)
    77b4:	447b      	add	r3, pc
    77b6:	2101      	movs	r1, #1
    77b8:	0018      	movs	r0, r3
    77ba:	4b0c      	ldr	r3, [pc, #48]	; (77ec <udc_req_std_iface_get_setting+0xc4>)
    77bc:	58e3      	ldr	r3, [r4, r3]
    77be:	4798      	blx	r3
    77c0:	2301      	movs	r3, #1
    77c2:	0018      	movs	r0, r3
    77c4:	46bd      	mov	sp, r7
    77c6:	b003      	add	sp, #12
    77c8:	bd90      	pop	{r4, r7, pc}
    77ca:	46c0      	nop			; (mov r8, r8)
    77cc:	0000a6b0 	.word	0x0000a6b0
    77d0:	000001e8 	.word	0x000001e8
    77d4:	1fff8dda 	.word	0x1fff8dda
    77d8:	1fff8dc6 	.word	0x1fff8dc6
    77dc:	fffff655 	.word	0xfffff655
    77e0:	1fff8d90 	.word	0x1fff8d90
    77e4:	1fff8d6a 	.word	0x1fff8d6a
    77e8:	1fff8d64 	.word	0x1fff8d64
    77ec:	0000005c 	.word	0x0000005c

000077f0 <udc_req_std_iface_set_setting>:
    77f0:	b580      	push	{r7, lr}
    77f2:	b082      	sub	sp, #8
    77f4:	af00      	add	r7, sp, #0
    77f6:	4b1b      	ldr	r3, [pc, #108]	; (7864 <udc_req_std_iface_set_setting+0x74>)
    77f8:	447b      	add	r3, pc
    77fa:	4a1b      	ldr	r2, [pc, #108]	; (7868 <udc_req_std_iface_set_setting+0x78>)
    77fc:	589a      	ldr	r2, [r3, r2]
    77fe:	88d2      	ldrh	r2, [r2, #6]
    7800:	2a00      	cmp	r2, #0
    7802:	d001      	beq.n	7808 <udc_req_std_iface_set_setting+0x18>
    7804:	2300      	movs	r3, #0
    7806:	e029      	b.n	785c <udc_req_std_iface_set_setting+0x6c>
    7808:	4a18      	ldr	r2, [pc, #96]	; (786c <udc_req_std_iface_set_setting+0x7c>)
    780a:	447a      	add	r2, pc
    780c:	7812      	ldrb	r2, [r2, #0]
    780e:	2a00      	cmp	r2, #0
    7810:	d101      	bne.n	7816 <udc_req_std_iface_set_setting+0x26>
    7812:	2300      	movs	r3, #0
    7814:	e022      	b.n	785c <udc_req_std_iface_set_setting+0x6c>
    7816:	4a14      	ldr	r2, [pc, #80]	; (7868 <udc_req_std_iface_set_setting+0x78>)
    7818:	589a      	ldr	r2, [r3, r2]
    781a:	8891      	ldrh	r1, [r2, #4]
    781c:	1dfa      	adds	r2, r7, #7
    781e:	7011      	strb	r1, [r2, #0]
    7820:	4a11      	ldr	r2, [pc, #68]	; (7868 <udc_req_std_iface_set_setting+0x78>)
    7822:	589b      	ldr	r3, [r3, r2]
    7824:	885a      	ldrh	r2, [r3, #2]
    7826:	1dbb      	adds	r3, r7, #6
    7828:	701a      	strb	r2, [r3, #0]
    782a:	1dfb      	adds	r3, r7, #7
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	0018      	movs	r0, r3
    7830:	4b0f      	ldr	r3, [pc, #60]	; (7870 <udc_req_std_iface_set_setting+0x80>)
    7832:	447b      	add	r3, pc
    7834:	4798      	blx	r3
    7836:	0003      	movs	r3, r0
    7838:	001a      	movs	r2, r3
    783a:	2301      	movs	r3, #1
    783c:	4053      	eors	r3, r2
    783e:	b2db      	uxtb	r3, r3
    7840:	2b00      	cmp	r3, #0
    7842:	d001      	beq.n	7848 <udc_req_std_iface_set_setting+0x58>
    7844:	2300      	movs	r3, #0
    7846:	e009      	b.n	785c <udc_req_std_iface_set_setting+0x6c>
    7848:	1dbb      	adds	r3, r7, #6
    784a:	781a      	ldrb	r2, [r3, #0]
    784c:	1dfb      	adds	r3, r7, #7
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	0011      	movs	r1, r2
    7852:	0018      	movs	r0, r3
    7854:	4b07      	ldr	r3, [pc, #28]	; (7874 <udc_req_std_iface_set_setting+0x84>)
    7856:	447b      	add	r3, pc
    7858:	4798      	blx	r3
    785a:	0003      	movs	r3, r0
    785c:	0018      	movs	r0, r3
    785e:	46bd      	mov	sp, r7
    7860:	b002      	add	sp, #8
    7862:	bd80      	pop	{r7, pc}
    7864:	0000a5e8 	.word	0x0000a5e8
    7868:	000001e8 	.word	0x000001e8
    786c:	1fff8d12 	.word	0x1fff8d12
    7870:	fffff677 	.word	0xfffff677
    7874:	fffff71b 	.word	0xfffff71b

00007878 <udc_reqstd>:
    7878:	b580      	push	{r7, lr}
    787a:	af00      	add	r7, sp, #0
    787c:	4b5e      	ldr	r3, [pc, #376]	; (79f8 <udc_reqstd+0x180>)
    787e:	447b      	add	r3, pc
    7880:	4a5e      	ldr	r2, [pc, #376]	; (79fc <udc_reqstd+0x184>)
    7882:	589a      	ldr	r2, [r3, r2]
    7884:	7812      	ldrb	r2, [r2, #0]
    7886:	b252      	sxtb	r2, r2
    7888:	2a00      	cmp	r2, #0
    788a:	da4d      	bge.n	7928 <udc_reqstd+0xb0>
    788c:	4a5b      	ldr	r2, [pc, #364]	; (79fc <udc_reqstd+0x184>)
    788e:	589a      	ldr	r2, [r3, r2]
    7890:	88d2      	ldrh	r2, [r2, #6]
    7892:	2a00      	cmp	r2, #0
    7894:	d101      	bne.n	789a <udc_reqstd+0x22>
    7896:	2300      	movs	r3, #0
    7898:	e0ab      	b.n	79f2 <udc_reqstd+0x17a>
    789a:	4a58      	ldr	r2, [pc, #352]	; (79fc <udc_reqstd+0x184>)
    789c:	589a      	ldr	r2, [r3, r2]
    789e:	7812      	ldrb	r2, [r2, #0]
    78a0:	0011      	movs	r1, r2
    78a2:	221f      	movs	r2, #31
    78a4:	400a      	ands	r2, r1
    78a6:	d118      	bne.n	78da <udc_reqstd+0x62>
    78a8:	4a54      	ldr	r2, [pc, #336]	; (79fc <udc_reqstd+0x184>)
    78aa:	589a      	ldr	r2, [r3, r2]
    78ac:	7852      	ldrb	r2, [r2, #1]
    78ae:	2a06      	cmp	r2, #6
    78b0:	d009      	beq.n	78c6 <udc_reqstd+0x4e>
    78b2:	2a08      	cmp	r2, #8
    78b4:	d00c      	beq.n	78d0 <udc_reqstd+0x58>
    78b6:	2a00      	cmp	r2, #0
    78b8:	d000      	beq.n	78bc <udc_reqstd+0x44>
    78ba:	e00e      	b.n	78da <udc_reqstd+0x62>
    78bc:	4b50      	ldr	r3, [pc, #320]	; (7a00 <udc_reqstd+0x188>)
    78be:	447b      	add	r3, pc
    78c0:	4798      	blx	r3
    78c2:	0003      	movs	r3, r0
    78c4:	e095      	b.n	79f2 <udc_reqstd+0x17a>
    78c6:	4b4f      	ldr	r3, [pc, #316]	; (7a04 <udc_reqstd+0x18c>)
    78c8:	447b      	add	r3, pc
    78ca:	4798      	blx	r3
    78cc:	0003      	movs	r3, r0
    78ce:	e090      	b.n	79f2 <udc_reqstd+0x17a>
    78d0:	4b4d      	ldr	r3, [pc, #308]	; (7a08 <udc_reqstd+0x190>)
    78d2:	447b      	add	r3, pc
    78d4:	4798      	blx	r3
    78d6:	0003      	movs	r3, r0
    78d8:	e08b      	b.n	79f2 <udc_reqstd+0x17a>
    78da:	4a48      	ldr	r2, [pc, #288]	; (79fc <udc_reqstd+0x184>)
    78dc:	589a      	ldr	r2, [r3, r2]
    78de:	7812      	ldrb	r2, [r2, #0]
    78e0:	0011      	movs	r1, r2
    78e2:	221f      	movs	r2, #31
    78e4:	400a      	ands	r2, r1
    78e6:	2a01      	cmp	r2, #1
    78e8:	d10a      	bne.n	7900 <udc_reqstd+0x88>
    78ea:	4a44      	ldr	r2, [pc, #272]	; (79fc <udc_reqstd+0x184>)
    78ec:	589a      	ldr	r2, [r3, r2]
    78ee:	7852      	ldrb	r2, [r2, #1]
    78f0:	2a0a      	cmp	r2, #10
    78f2:	d000      	beq.n	78f6 <udc_reqstd+0x7e>
    78f4:	e004      	b.n	7900 <udc_reqstd+0x88>
    78f6:	4b45      	ldr	r3, [pc, #276]	; (7a0c <udc_reqstd+0x194>)
    78f8:	447b      	add	r3, pc
    78fa:	4798      	blx	r3
    78fc:	0003      	movs	r3, r0
    78fe:	e078      	b.n	79f2 <udc_reqstd+0x17a>
    7900:	4a3e      	ldr	r2, [pc, #248]	; (79fc <udc_reqstd+0x184>)
    7902:	589a      	ldr	r2, [r3, r2]
    7904:	7812      	ldrb	r2, [r2, #0]
    7906:	0011      	movs	r1, r2
    7908:	221f      	movs	r2, #31
    790a:	400a      	ands	r2, r1
    790c:	2a02      	cmp	r2, #2
    790e:	d000      	beq.n	7912 <udc_reqstd+0x9a>
    7910:	e06e      	b.n	79f0 <udc_reqstd+0x178>
    7912:	4a3a      	ldr	r2, [pc, #232]	; (79fc <udc_reqstd+0x184>)
    7914:	589b      	ldr	r3, [r3, r2]
    7916:	785b      	ldrb	r3, [r3, #1]
    7918:	2b00      	cmp	r3, #0
    791a:	d000      	beq.n	791e <udc_reqstd+0xa6>
    791c:	e068      	b.n	79f0 <udc_reqstd+0x178>
    791e:	4b3c      	ldr	r3, [pc, #240]	; (7a10 <udc_reqstd+0x198>)
    7920:	447b      	add	r3, pc
    7922:	4798      	blx	r3
    7924:	0003      	movs	r3, r0
    7926:	e064      	b.n	79f2 <udc_reqstd+0x17a>
    7928:	4a34      	ldr	r2, [pc, #208]	; (79fc <udc_reqstd+0x184>)
    792a:	589a      	ldr	r2, [r3, r2]
    792c:	7812      	ldrb	r2, [r2, #0]
    792e:	0011      	movs	r1, r2
    7930:	221f      	movs	r2, #31
    7932:	400a      	ands	r2, r1
    7934:	d12f      	bne.n	7996 <udc_reqstd+0x11e>
    7936:	4a31      	ldr	r2, [pc, #196]	; (79fc <udc_reqstd+0x184>)
    7938:	589a      	ldr	r2, [r3, r2]
    793a:	7852      	ldrb	r2, [r2, #1]
    793c:	3a01      	subs	r2, #1
    793e:	2a08      	cmp	r2, #8
    7940:	d828      	bhi.n	7994 <udc_reqstd+0x11c>
    7942:	0010      	movs	r0, r2
    7944:	f008 fea4 	bl	10690 <__gnu_thumb1_case_si>
    7948:	0000002e 	.word	0x0000002e
    794c:	0000004c 	.word	0x0000004c
    7950:	00000038 	.word	0x00000038
    7954:	0000004c 	.word	0x0000004c
    7958:	00000024 	.word	0x00000024
    795c:	0000004c 	.word	0x0000004c
    7960:	0000004c 	.word	0x0000004c
    7964:	0000004c 	.word	0x0000004c
    7968:	00000042 	.word	0x00000042
    796c:	4b29      	ldr	r3, [pc, #164]	; (7a14 <udc_reqstd+0x19c>)
    796e:	447b      	add	r3, pc
    7970:	4798      	blx	r3
    7972:	0003      	movs	r3, r0
    7974:	e03d      	b.n	79f2 <udc_reqstd+0x17a>
    7976:	4b28      	ldr	r3, [pc, #160]	; (7a18 <udc_reqstd+0x1a0>)
    7978:	447b      	add	r3, pc
    797a:	4798      	blx	r3
    797c:	0003      	movs	r3, r0
    797e:	e038      	b.n	79f2 <udc_reqstd+0x17a>
    7980:	4b26      	ldr	r3, [pc, #152]	; (7a1c <udc_reqstd+0x1a4>)
    7982:	447b      	add	r3, pc
    7984:	4798      	blx	r3
    7986:	0003      	movs	r3, r0
    7988:	e033      	b.n	79f2 <udc_reqstd+0x17a>
    798a:	4b25      	ldr	r3, [pc, #148]	; (7a20 <udc_reqstd+0x1a8>)
    798c:	447b      	add	r3, pc
    798e:	4798      	blx	r3
    7990:	0003      	movs	r3, r0
    7992:	e02e      	b.n	79f2 <udc_reqstd+0x17a>
    7994:	46c0      	nop			; (mov r8, r8)
    7996:	4a19      	ldr	r2, [pc, #100]	; (79fc <udc_reqstd+0x184>)
    7998:	589a      	ldr	r2, [r3, r2]
    799a:	7812      	ldrb	r2, [r2, #0]
    799c:	0011      	movs	r1, r2
    799e:	221f      	movs	r2, #31
    79a0:	400a      	ands	r2, r1
    79a2:	2a01      	cmp	r2, #1
    79a4:	d10a      	bne.n	79bc <udc_reqstd+0x144>
    79a6:	4a15      	ldr	r2, [pc, #84]	; (79fc <udc_reqstd+0x184>)
    79a8:	589a      	ldr	r2, [r3, r2]
    79aa:	7852      	ldrb	r2, [r2, #1]
    79ac:	2a0b      	cmp	r2, #11
    79ae:	d000      	beq.n	79b2 <udc_reqstd+0x13a>
    79b0:	e004      	b.n	79bc <udc_reqstd+0x144>
    79b2:	4b1c      	ldr	r3, [pc, #112]	; (7a24 <udc_reqstd+0x1ac>)
    79b4:	447b      	add	r3, pc
    79b6:	4798      	blx	r3
    79b8:	0003      	movs	r3, r0
    79ba:	e01a      	b.n	79f2 <udc_reqstd+0x17a>
    79bc:	4a0f      	ldr	r2, [pc, #60]	; (79fc <udc_reqstd+0x184>)
    79be:	589a      	ldr	r2, [r3, r2]
    79c0:	7812      	ldrb	r2, [r2, #0]
    79c2:	0011      	movs	r1, r2
    79c4:	221f      	movs	r2, #31
    79c6:	400a      	ands	r2, r1
    79c8:	2a02      	cmp	r2, #2
    79ca:	d111      	bne.n	79f0 <udc_reqstd+0x178>
    79cc:	4a0b      	ldr	r2, [pc, #44]	; (79fc <udc_reqstd+0x184>)
    79ce:	589b      	ldr	r3, [r3, r2]
    79d0:	785b      	ldrb	r3, [r3, #1]
    79d2:	2b01      	cmp	r3, #1
    79d4:	d002      	beq.n	79dc <udc_reqstd+0x164>
    79d6:	2b03      	cmp	r3, #3
    79d8:	d005      	beq.n	79e6 <udc_reqstd+0x16e>
    79da:	e009      	b.n	79f0 <udc_reqstd+0x178>
    79dc:	4b12      	ldr	r3, [pc, #72]	; (7a28 <udc_reqstd+0x1b0>)
    79de:	447b      	add	r3, pc
    79e0:	4798      	blx	r3
    79e2:	0003      	movs	r3, r0
    79e4:	e005      	b.n	79f2 <udc_reqstd+0x17a>
    79e6:	4b11      	ldr	r3, [pc, #68]	; (7a2c <udc_reqstd+0x1b4>)
    79e8:	447b      	add	r3, pc
    79ea:	4798      	blx	r3
    79ec:	0003      	movs	r3, r0
    79ee:	e000      	b.n	79f2 <udc_reqstd+0x17a>
    79f0:	2300      	movs	r3, #0
    79f2:	0018      	movs	r0, r3
    79f4:	46bd      	mov	sp, r7
    79f6:	bd80      	pop	{r7, pc}
    79f8:	0000a562 	.word	0x0000a562
    79fc:	000001e8 	.word	0x000001e8
    7a00:	fffff877 	.word	0xfffff877
    7a04:	fffffbc1 	.word	0xfffffbc1
    7a08:	fffffd17 	.word	0xfffffd17
    7a0c:	fffffe2d 	.word	0xfffffe2d
    7a10:	fffff851 	.word	0xfffff851
    7a14:	fffff9bf 	.word	0xfffff9bf
    7a18:	fffff859 	.word	0xfffff859
    7a1c:	fffff8e7 	.word	0xfffff8e7
    7a20:	fffffc99 	.word	0xfffffc99
    7a24:	fffffe39 	.word	0xfffffe39
    7a28:	fffff843 	.word	0xfffff843
    7a2c:	fffff8b9 	.word	0xfffff8b9

00007a30 <udc_req_iface>:
    7a30:	b580      	push	{r7, lr}
    7a32:	b082      	sub	sp, #8
    7a34:	af00      	add	r7, sp, #0
    7a36:	4a28      	ldr	r2, [pc, #160]	; (7ad8 <udc_req_iface+0xa8>)
    7a38:	447a      	add	r2, pc
    7a3a:	4b28      	ldr	r3, [pc, #160]	; (7adc <udc_req_iface+0xac>)
    7a3c:	447b      	add	r3, pc
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	2b00      	cmp	r3, #0
    7a42:	d101      	bne.n	7a48 <udc_req_iface+0x18>
    7a44:	2300      	movs	r3, #0
    7a46:	e042      	b.n	7ace <udc_req_iface+0x9e>
    7a48:	4b25      	ldr	r3, [pc, #148]	; (7ae0 <udc_req_iface+0xb0>)
    7a4a:	58d3      	ldr	r3, [r2, r3]
    7a4c:	889a      	ldrh	r2, [r3, #4]
    7a4e:	1dfb      	adds	r3, r7, #7
    7a50:	701a      	strb	r2, [r3, #0]
    7a52:	4b24      	ldr	r3, [pc, #144]	; (7ae4 <udc_req_iface+0xb4>)
    7a54:	447b      	add	r3, pc
    7a56:	681b      	ldr	r3, [r3, #0]
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	791b      	ldrb	r3, [r3, #4]
    7a5c:	1dfa      	adds	r2, r7, #7
    7a5e:	7812      	ldrb	r2, [r2, #0]
    7a60:	429a      	cmp	r2, r3
    7a62:	d301      	bcc.n	7a68 <udc_req_iface+0x38>
    7a64:	2300      	movs	r3, #0
    7a66:	e032      	b.n	7ace <udc_req_iface+0x9e>
    7a68:	1dfb      	adds	r3, r7, #7
    7a6a:	781b      	ldrb	r3, [r3, #0]
    7a6c:	2100      	movs	r1, #0
    7a6e:	0018      	movs	r0, r3
    7a70:	4b1d      	ldr	r3, [pc, #116]	; (7ae8 <udc_req_iface+0xb8>)
    7a72:	447b      	add	r3, pc
    7a74:	4798      	blx	r3
    7a76:	0003      	movs	r3, r0
    7a78:	001a      	movs	r2, r3
    7a7a:	2301      	movs	r3, #1
    7a7c:	4053      	eors	r3, r2
    7a7e:	b2db      	uxtb	r3, r3
    7a80:	2b00      	cmp	r3, #0
    7a82:	d001      	beq.n	7a88 <udc_req_iface+0x58>
    7a84:	2300      	movs	r3, #0
    7a86:	e022      	b.n	7ace <udc_req_iface+0x9e>
    7a88:	4b18      	ldr	r3, [pc, #96]	; (7aec <udc_req_iface+0xbc>)
    7a8a:	447b      	add	r3, pc
    7a8c:	681b      	ldr	r3, [r3, #0]
    7a8e:	685a      	ldr	r2, [r3, #4]
    7a90:	1dfb      	adds	r3, r7, #7
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	009b      	lsls	r3, r3, #2
    7a96:	18d3      	adds	r3, r2, r3
    7a98:	681b      	ldr	r3, [r3, #0]
    7a9a:	603b      	str	r3, [r7, #0]
    7a9c:	683b      	ldr	r3, [r7, #0]
    7a9e:	68db      	ldr	r3, [r3, #12]
    7aa0:	4798      	blx	r3
    7aa2:	0003      	movs	r3, r0
    7aa4:	001a      	movs	r2, r3
    7aa6:	1dfb      	adds	r3, r7, #7
    7aa8:	781b      	ldrb	r3, [r3, #0]
    7aaa:	0011      	movs	r1, r2
    7aac:	0018      	movs	r0, r3
    7aae:	4b10      	ldr	r3, [pc, #64]	; (7af0 <udc_req_iface+0xc0>)
    7ab0:	447b      	add	r3, pc
    7ab2:	4798      	blx	r3
    7ab4:	0003      	movs	r3, r0
    7ab6:	001a      	movs	r2, r3
    7ab8:	2301      	movs	r3, #1
    7aba:	4053      	eors	r3, r2
    7abc:	b2db      	uxtb	r3, r3
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d001      	beq.n	7ac6 <udc_req_iface+0x96>
    7ac2:	2300      	movs	r3, #0
    7ac4:	e003      	b.n	7ace <udc_req_iface+0x9e>
    7ac6:	683b      	ldr	r3, [r7, #0]
    7ac8:	689b      	ldr	r3, [r3, #8]
    7aca:	4798      	blx	r3
    7acc:	0003      	movs	r3, r0
    7ace:	0018      	movs	r0, r3
    7ad0:	46bd      	mov	sp, r7
    7ad2:	b002      	add	sp, #8
    7ad4:	bd80      	pop	{r7, pc}
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	0000a3a8 	.word	0x0000a3a8
    7adc:	1fff8ae0 	.word	0x1fff8ae0
    7ae0:	000001e8 	.word	0x000001e8
    7ae4:	1fff8acc 	.word	0x1fff8acc
    7ae8:	fffff35b 	.word	0xfffff35b
    7aec:	1fff8a96 	.word	0x1fff8a96
    7af0:	fffff31d 	.word	0xfffff31d

00007af4 <udc_req_ep>:
    7af4:	b580      	push	{r7, lr}
    7af6:	b082      	sub	sp, #8
    7af8:	af00      	add	r7, sp, #0
    7afa:	4a25      	ldr	r2, [pc, #148]	; (7b90 <udc_req_ep+0x9c>)
    7afc:	447a      	add	r2, pc
    7afe:	4b25      	ldr	r3, [pc, #148]	; (7b94 <udc_req_ep+0xa0>)
    7b00:	447b      	add	r3, pc
    7b02:	781b      	ldrb	r3, [r3, #0]
    7b04:	2b00      	cmp	r3, #0
    7b06:	d101      	bne.n	7b0c <udc_req_ep+0x18>
    7b08:	2300      	movs	r3, #0
    7b0a:	e03d      	b.n	7b88 <udc_req_ep+0x94>
    7b0c:	4b22      	ldr	r3, [pc, #136]	; (7b98 <udc_req_ep+0xa4>)
    7b0e:	58d3      	ldr	r3, [r2, r3]
    7b10:	889a      	ldrh	r2, [r3, #4]
    7b12:	1dfb      	adds	r3, r7, #7
    7b14:	701a      	strb	r2, [r3, #0]
    7b16:	1dfb      	adds	r3, r7, #7
    7b18:	2200      	movs	r2, #0
    7b1a:	701a      	strb	r2, [r3, #0]
    7b1c:	e02a      	b.n	7b74 <udc_req_ep+0x80>
    7b1e:	4b1f      	ldr	r3, [pc, #124]	; (7b9c <udc_req_ep+0xa8>)
    7b20:	447b      	add	r3, pc
    7b22:	681b      	ldr	r3, [r3, #0]
    7b24:	685a      	ldr	r2, [r3, #4]
    7b26:	1dfb      	adds	r3, r7, #7
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	009b      	lsls	r3, r3, #2
    7b2c:	18d3      	adds	r3, r2, r3
    7b2e:	681b      	ldr	r3, [r3, #0]
    7b30:	603b      	str	r3, [r7, #0]
    7b32:	683b      	ldr	r3, [r7, #0]
    7b34:	68db      	ldr	r3, [r3, #12]
    7b36:	4798      	blx	r3
    7b38:	0003      	movs	r3, r0
    7b3a:	001a      	movs	r2, r3
    7b3c:	1dfb      	adds	r3, r7, #7
    7b3e:	781b      	ldrb	r3, [r3, #0]
    7b40:	0011      	movs	r1, r2
    7b42:	0018      	movs	r0, r3
    7b44:	4b16      	ldr	r3, [pc, #88]	; (7ba0 <udc_req_ep+0xac>)
    7b46:	447b      	add	r3, pc
    7b48:	4798      	blx	r3
    7b4a:	0003      	movs	r3, r0
    7b4c:	001a      	movs	r2, r3
    7b4e:	2301      	movs	r3, #1
    7b50:	4053      	eors	r3, r2
    7b52:	b2db      	uxtb	r3, r3
    7b54:	2b00      	cmp	r3, #0
    7b56:	d001      	beq.n	7b5c <udc_req_ep+0x68>
    7b58:	2300      	movs	r3, #0
    7b5a:	e015      	b.n	7b88 <udc_req_ep+0x94>
    7b5c:	683b      	ldr	r3, [r7, #0]
    7b5e:	689b      	ldr	r3, [r3, #8]
    7b60:	4798      	blx	r3
    7b62:	1e03      	subs	r3, r0, #0
    7b64:	d001      	beq.n	7b6a <udc_req_ep+0x76>
    7b66:	2301      	movs	r3, #1
    7b68:	e00e      	b.n	7b88 <udc_req_ep+0x94>
    7b6a:	1dfb      	adds	r3, r7, #7
    7b6c:	781a      	ldrb	r2, [r3, #0]
    7b6e:	1dfb      	adds	r3, r7, #7
    7b70:	3201      	adds	r2, #1
    7b72:	701a      	strb	r2, [r3, #0]
    7b74:	4b0b      	ldr	r3, [pc, #44]	; (7ba4 <udc_req_ep+0xb0>)
    7b76:	447b      	add	r3, pc
    7b78:	681b      	ldr	r3, [r3, #0]
    7b7a:	681b      	ldr	r3, [r3, #0]
    7b7c:	791b      	ldrb	r3, [r3, #4]
    7b7e:	1dfa      	adds	r2, r7, #7
    7b80:	7812      	ldrb	r2, [r2, #0]
    7b82:	429a      	cmp	r2, r3
    7b84:	d3cb      	bcc.n	7b1e <udc_req_ep+0x2a>
    7b86:	2300      	movs	r3, #0
    7b88:	0018      	movs	r0, r3
    7b8a:	46bd      	mov	sp, r7
    7b8c:	b002      	add	sp, #8
    7b8e:	bd80      	pop	{r7, pc}
    7b90:	0000a2e4 	.word	0x0000a2e4
    7b94:	1fff8a1c 	.word	0x1fff8a1c
    7b98:	000001e8 	.word	0x000001e8
    7b9c:	1fff8a00 	.word	0x1fff8a00
    7ba0:	fffff287 	.word	0xfffff287
    7ba4:	1fff89aa 	.word	0x1fff89aa

00007ba8 <udc_process_setup>:
    7ba8:	b5b0      	push	{r4, r5, r7, lr}
    7baa:	af00      	add	r7, sp, #0
    7bac:	4c25      	ldr	r4, [pc, #148]	; (7c44 <udc_process_setup+0x9c>)
    7bae:	447c      	add	r4, pc
    7bb0:	4b25      	ldr	r3, [pc, #148]	; (7c48 <udc_process_setup+0xa0>)
    7bb2:	58e3      	ldr	r3, [r4, r3]
    7bb4:	2200      	movs	r2, #0
    7bb6:	819a      	strh	r2, [r3, #12]
    7bb8:	4b23      	ldr	r3, [pc, #140]	; (7c48 <udc_process_setup+0xa0>)
    7bba:	58e3      	ldr	r3, [r4, r3]
    7bbc:	2200      	movs	r2, #0
    7bbe:	611a      	str	r2, [r3, #16]
    7bc0:	4b21      	ldr	r3, [pc, #132]	; (7c48 <udc_process_setup+0xa0>)
    7bc2:	58e3      	ldr	r3, [r4, r3]
    7bc4:	2200      	movs	r2, #0
    7bc6:	615a      	str	r2, [r3, #20]
    7bc8:	4b1f      	ldr	r3, [pc, #124]	; (7c48 <udc_process_setup+0xa0>)
    7bca:	58e3      	ldr	r3, [r4, r3]
    7bcc:	781b      	ldrb	r3, [r3, #0]
    7bce:	b25b      	sxtb	r3, r3
    7bd0:	2b00      	cmp	r3, #0
    7bd2:	da06      	bge.n	7be2 <udc_process_setup+0x3a>
    7bd4:	4b1c      	ldr	r3, [pc, #112]	; (7c48 <udc_process_setup+0xa0>)
    7bd6:	58e3      	ldr	r3, [r4, r3]
    7bd8:	88db      	ldrh	r3, [r3, #6]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d101      	bne.n	7be2 <udc_process_setup+0x3a>
    7bde:	2300      	movs	r3, #0
    7be0:	e02c      	b.n	7c3c <udc_process_setup+0x94>
    7be2:	4b19      	ldr	r3, [pc, #100]	; (7c48 <udc_process_setup+0xa0>)
    7be4:	58e3      	ldr	r3, [r4, r3]
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	001a      	movs	r2, r3
    7bea:	2360      	movs	r3, #96	; 0x60
    7bec:	4013      	ands	r3, r2
    7bee:	d106      	bne.n	7bfe <udc_process_setup+0x56>
    7bf0:	4b16      	ldr	r3, [pc, #88]	; (7c4c <udc_process_setup+0xa4>)
    7bf2:	447b      	add	r3, pc
    7bf4:	4798      	blx	r3
    7bf6:	1e03      	subs	r3, r0, #0
    7bf8:	d001      	beq.n	7bfe <udc_process_setup+0x56>
    7bfa:	2301      	movs	r3, #1
    7bfc:	e01e      	b.n	7c3c <udc_process_setup+0x94>
    7bfe:	4b12      	ldr	r3, [pc, #72]	; (7c48 <udc_process_setup+0xa0>)
    7c00:	58e3      	ldr	r3, [r4, r3]
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	001a      	movs	r2, r3
    7c06:	231f      	movs	r3, #31
    7c08:	4013      	ands	r3, r2
    7c0a:	2b01      	cmp	r3, #1
    7c0c:	d106      	bne.n	7c1c <udc_process_setup+0x74>
    7c0e:	4b10      	ldr	r3, [pc, #64]	; (7c50 <udc_process_setup+0xa8>)
    7c10:	447b      	add	r3, pc
    7c12:	4798      	blx	r3
    7c14:	1e03      	subs	r3, r0, #0
    7c16:	d001      	beq.n	7c1c <udc_process_setup+0x74>
    7c18:	2301      	movs	r3, #1
    7c1a:	e00f      	b.n	7c3c <udc_process_setup+0x94>
    7c1c:	4b0a      	ldr	r3, [pc, #40]	; (7c48 <udc_process_setup+0xa0>)
    7c1e:	58e3      	ldr	r3, [r4, r3]
    7c20:	781b      	ldrb	r3, [r3, #0]
    7c22:	001a      	movs	r2, r3
    7c24:	231f      	movs	r3, #31
    7c26:	4013      	ands	r3, r2
    7c28:	2b02      	cmp	r3, #2
    7c2a:	d106      	bne.n	7c3a <udc_process_setup+0x92>
    7c2c:	4b09      	ldr	r3, [pc, #36]	; (7c54 <udc_process_setup+0xac>)
    7c2e:	447b      	add	r3, pc
    7c30:	4798      	blx	r3
    7c32:	1e03      	subs	r3, r0, #0
    7c34:	d001      	beq.n	7c3a <udc_process_setup+0x92>
    7c36:	2301      	movs	r3, #1
    7c38:	e000      	b.n	7c3c <udc_process_setup+0x94>
    7c3a:	2300      	movs	r3, #0
    7c3c:	0018      	movs	r0, r3
    7c3e:	46bd      	mov	sp, r7
    7c40:	bdb0      	pop	{r4, r5, r7, pc}
    7c42:	46c0      	nop			; (mov r8, r8)
    7c44:	0000a232 	.word	0x0000a232
    7c48:	000001e8 	.word	0x000001e8
    7c4c:	fffffc83 	.word	0xfffffc83
    7c50:	fffffe1d 	.word	0xfffffe1d
    7c54:	fffffec3 	.word	0xfffffec3

00007c58 <stdio_usb_putchar>:
    7c58:	b580      	push	{r7, lr}
    7c5a:	b082      	sub	sp, #8
    7c5c:	af00      	add	r7, sp, #0
    7c5e:	6078      	str	r0, [r7, #4]
    7c60:	000a      	movs	r2, r1
    7c62:	1cfb      	adds	r3, r7, #3
    7c64:	701a      	strb	r2, [r3, #0]
    7c66:	4a0e      	ldr	r2, [pc, #56]	; (7ca0 <stdio_usb_putchar+0x48>)
    7c68:	447a      	add	r2, pc
    7c6a:	4b0e      	ldr	r3, [pc, #56]	; (7ca4 <stdio_usb_putchar+0x4c>)
    7c6c:	447b      	add	r3, pc
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	2101      	movs	r1, #1
    7c72:	404b      	eors	r3, r1
    7c74:	b2db      	uxtb	r3, r3
    7c76:	2b00      	cmp	r3, #0
    7c78:	d001      	beq.n	7c7e <stdio_usb_putchar+0x26>
    7c7a:	2300      	movs	r3, #0
    7c7c:	e00b      	b.n	7c96 <stdio_usb_putchar+0x3e>
    7c7e:	1cfb      	adds	r3, r7, #3
    7c80:	781b      	ldrb	r3, [r3, #0]
    7c82:	0018      	movs	r0, r3
    7c84:	4b08      	ldr	r3, [pc, #32]	; (7ca8 <stdio_usb_putchar+0x50>)
    7c86:	58d3      	ldr	r3, [r2, r3]
    7c88:	4798      	blx	r3
    7c8a:	1e03      	subs	r3, r0, #0
    7c8c:	d001      	beq.n	7c92 <stdio_usb_putchar+0x3a>
    7c8e:	2300      	movs	r3, #0
    7c90:	e001      	b.n	7c96 <stdio_usb_putchar+0x3e>
    7c92:	2301      	movs	r3, #1
    7c94:	425b      	negs	r3, r3
    7c96:	0018      	movs	r0, r3
    7c98:	46bd      	mov	sp, r7
    7c9a:	b002      	add	sp, #8
    7c9c:	bd80      	pop	{r7, pc}
    7c9e:	46c0      	nop			; (mov r8, r8)
    7ca0:	0000a178 	.word	0x0000a178
    7ca4:	1fff88be 	.word	0x1fff88be
    7ca8:	00000098 	.word	0x00000098

00007cac <stdio_usb_getchar>:
    7cac:	b580      	push	{r7, lr}
    7cae:	b082      	sub	sp, #8
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
    7cb4:	6039      	str	r1, [r7, #0]
    7cb6:	4a0c      	ldr	r2, [pc, #48]	; (7ce8 <stdio_usb_getchar+0x3c>)
    7cb8:	447a      	add	r2, pc
    7cba:	4b0c      	ldr	r3, [pc, #48]	; (7cec <stdio_usb_getchar+0x40>)
    7cbc:	447b      	add	r3, pc
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	2101      	movs	r1, #1
    7cc2:	404b      	eors	r3, r1
    7cc4:	b2db      	uxtb	r3, r3
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d003      	beq.n	7cd2 <stdio_usb_getchar+0x26>
    7cca:	683b      	ldr	r3, [r7, #0]
    7ccc:	2200      	movs	r2, #0
    7cce:	701a      	strb	r2, [r3, #0]
    7cd0:	e006      	b.n	7ce0 <stdio_usb_getchar+0x34>
    7cd2:	4b07      	ldr	r3, [pc, #28]	; (7cf0 <stdio_usb_getchar+0x44>)
    7cd4:	58d3      	ldr	r3, [r2, r3]
    7cd6:	4798      	blx	r3
    7cd8:	0003      	movs	r3, r0
    7cda:	b2da      	uxtb	r2, r3
    7cdc:	683b      	ldr	r3, [r7, #0]
    7cde:	701a      	strb	r2, [r3, #0]
    7ce0:	46bd      	mov	sp, r7
    7ce2:	b002      	add	sp, #8
    7ce4:	bd80      	pop	{r7, pc}
    7ce6:	46c0      	nop			; (mov r8, r8)
    7ce8:	0000a128 	.word	0x0000a128
    7cec:	1fff886e 	.word	0x1fff886e
    7cf0:	00000284 	.word	0x00000284

00007cf4 <stdio_usb_enable>:
    7cf4:	b580      	push	{r7, lr}
    7cf6:	af00      	add	r7, sp, #0
    7cf8:	4b03      	ldr	r3, [pc, #12]	; (7d08 <stdio_usb_enable+0x14>)
    7cfa:	447b      	add	r3, pc
    7cfc:	2201      	movs	r2, #1
    7cfe:	701a      	strb	r2, [r3, #0]
    7d00:	2301      	movs	r3, #1
    7d02:	0018      	movs	r0, r3
    7d04:	46bd      	mov	sp, r7
    7d06:	bd80      	pop	{r7, pc}
    7d08:	1fff8830 	.word	0x1fff8830

00007d0c <stdio_usb_init>:
    7d0c:	b5b0      	push	{r4, r5, r7, lr}
    7d0e:	af00      	add	r7, sp, #0
    7d10:	4c13      	ldr	r4, [pc, #76]	; (7d60 <stdio_usb_init+0x54>)
    7d12:	447c      	add	r4, pc
    7d14:	4b13      	ldr	r3, [pc, #76]	; (7d64 <stdio_usb_init+0x58>)
    7d16:	58e3      	ldr	r3, [r4, r3]
    7d18:	2200      	movs	r2, #0
    7d1a:	601a      	str	r2, [r3, #0]
    7d1c:	4b12      	ldr	r3, [pc, #72]	; (7d68 <stdio_usb_init+0x5c>)
    7d1e:	58e3      	ldr	r3, [r4, r3]
    7d20:	4a12      	ldr	r2, [pc, #72]	; (7d6c <stdio_usb_init+0x60>)
    7d22:	58a2      	ldr	r2, [r4, r2]
    7d24:	601a      	str	r2, [r3, #0]
    7d26:	4b12      	ldr	r3, [pc, #72]	; (7d70 <stdio_usb_init+0x64>)
    7d28:	58e3      	ldr	r3, [r4, r3]
    7d2a:	4a12      	ldr	r2, [pc, #72]	; (7d74 <stdio_usb_init+0x68>)
    7d2c:	58a2      	ldr	r2, [r4, r2]
    7d2e:	601a      	str	r2, [r3, #0]
    7d30:	4b11      	ldr	r3, [pc, #68]	; (7d78 <stdio_usb_init+0x6c>)
    7d32:	58e3      	ldr	r3, [r4, r3]
    7d34:	4798      	blx	r3
    7d36:	4b11      	ldr	r3, [pc, #68]	; (7d7c <stdio_usb_init+0x70>)
    7d38:	58e3      	ldr	r3, [r4, r3]
    7d3a:	681b      	ldr	r3, [r3, #0]
    7d3c:	689b      	ldr	r3, [r3, #8]
    7d3e:	2100      	movs	r1, #0
    7d40:	0018      	movs	r0, r3
    7d42:	4b0f      	ldr	r3, [pc, #60]	; (7d80 <stdio_usb_init+0x74>)
    7d44:	58e3      	ldr	r3, [r4, r3]
    7d46:	4798      	blx	r3
    7d48:	4b0c      	ldr	r3, [pc, #48]	; (7d7c <stdio_usb_init+0x70>)
    7d4a:	58e3      	ldr	r3, [r4, r3]
    7d4c:	681b      	ldr	r3, [r3, #0]
    7d4e:	685b      	ldr	r3, [r3, #4]
    7d50:	2100      	movs	r1, #0
    7d52:	0018      	movs	r0, r3
    7d54:	4b0a      	ldr	r3, [pc, #40]	; (7d80 <stdio_usb_init+0x74>)
    7d56:	58e3      	ldr	r3, [r4, r3]
    7d58:	4798      	blx	r3
    7d5a:	46c0      	nop			; (mov r8, r8)
    7d5c:	46bd      	mov	sp, r7
    7d5e:	bdb0      	pop	{r4, r5, r7, pc}
    7d60:	0000a0ce 	.word	0x0000a0ce
    7d64:	00000204 	.word	0x00000204
    7d68:	0000011c 	.word	0x0000011c
    7d6c:	00000160 	.word	0x00000160
    7d70:	000000f0 	.word	0x000000f0
    7d74:	00000120 	.word	0x00000120
    7d78:	000002c8 	.word	0x000002c8
    7d7c:	00000250 	.word	0x00000250
    7d80:	000002a8 	.word	0x000002a8

00007d84 <system_gclk_chan_get_config_defaults>:
    7d84:	b580      	push	{r7, lr}
    7d86:	b082      	sub	sp, #8
    7d88:	af00      	add	r7, sp, #0
    7d8a:	6078      	str	r0, [r7, #4]
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	2200      	movs	r2, #0
    7d90:	701a      	strb	r2, [r3, #0]
    7d92:	46c0      	nop			; (mov r8, r8)
    7d94:	46bd      	mov	sp, r7
    7d96:	b002      	add	sp, #8
    7d98:	bd80      	pop	{r7, pc}
	...

00007d9c <system_apb_clock_set_mask>:
    7d9c:	b580      	push	{r7, lr}
    7d9e:	b082      	sub	sp, #8
    7da0:	af00      	add	r7, sp, #0
    7da2:	0002      	movs	r2, r0
    7da4:	6039      	str	r1, [r7, #0]
    7da6:	1dfb      	adds	r3, r7, #7
    7da8:	701a      	strb	r2, [r3, #0]
    7daa:	1dfb      	adds	r3, r7, #7
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	2b01      	cmp	r3, #1
    7db0:	d00a      	beq.n	7dc8 <system_apb_clock_set_mask+0x2c>
    7db2:	2b02      	cmp	r3, #2
    7db4:	d00f      	beq.n	7dd6 <system_apb_clock_set_mask+0x3a>
    7db6:	2b00      	cmp	r3, #0
    7db8:	d114      	bne.n	7de4 <system_apb_clock_set_mask+0x48>
    7dba:	4b0e      	ldr	r3, [pc, #56]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dbc:	4a0d      	ldr	r2, [pc, #52]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dbe:	6991      	ldr	r1, [r2, #24]
    7dc0:	683a      	ldr	r2, [r7, #0]
    7dc2:	430a      	orrs	r2, r1
    7dc4:	619a      	str	r2, [r3, #24]
    7dc6:	e00f      	b.n	7de8 <system_apb_clock_set_mask+0x4c>
    7dc8:	4b0a      	ldr	r3, [pc, #40]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dca:	4a0a      	ldr	r2, [pc, #40]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dcc:	69d1      	ldr	r1, [r2, #28]
    7dce:	683a      	ldr	r2, [r7, #0]
    7dd0:	430a      	orrs	r2, r1
    7dd2:	61da      	str	r2, [r3, #28]
    7dd4:	e008      	b.n	7de8 <system_apb_clock_set_mask+0x4c>
    7dd6:	4b07      	ldr	r3, [pc, #28]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dd8:	4a06      	ldr	r2, [pc, #24]	; (7df4 <system_apb_clock_set_mask+0x58>)
    7dda:	6a11      	ldr	r1, [r2, #32]
    7ddc:	683a      	ldr	r2, [r7, #0]
    7dde:	430a      	orrs	r2, r1
    7de0:	621a      	str	r2, [r3, #32]
    7de2:	e001      	b.n	7de8 <system_apb_clock_set_mask+0x4c>
    7de4:	2317      	movs	r3, #23
    7de6:	e000      	b.n	7dea <system_apb_clock_set_mask+0x4e>
    7de8:	2300      	movs	r3, #0
    7dea:	0018      	movs	r0, r3
    7dec:	46bd      	mov	sp, r7
    7dee:	b002      	add	sp, #8
    7df0:	bd80      	pop	{r7, pc}
    7df2:	46c0      	nop			; (mov r8, r8)
    7df4:	40000400 	.word	0x40000400

00007df8 <system_pinmux_get_config_defaults>:
    7df8:	b580      	push	{r7, lr}
    7dfa:	b082      	sub	sp, #8
    7dfc:	af00      	add	r7, sp, #0
    7dfe:	6078      	str	r0, [r7, #4]
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	2280      	movs	r2, #128	; 0x80
    7e04:	701a      	strb	r2, [r3, #0]
    7e06:	687b      	ldr	r3, [r7, #4]
    7e08:	2200      	movs	r2, #0
    7e0a:	705a      	strb	r2, [r3, #1]
    7e0c:	687b      	ldr	r3, [r7, #4]
    7e0e:	2201      	movs	r2, #1
    7e10:	709a      	strb	r2, [r3, #2]
    7e12:	687b      	ldr	r3, [r7, #4]
    7e14:	2200      	movs	r2, #0
    7e16:	70da      	strb	r2, [r3, #3]
    7e18:	46c0      	nop			; (mov r8, r8)
    7e1a:	46bd      	mov	sp, r7
    7e1c:	b002      	add	sp, #8
    7e1e:	bd80      	pop	{r7, pc}

00007e20 <system_interrupt_enable>:
    7e20:	b580      	push	{r7, lr}
    7e22:	b082      	sub	sp, #8
    7e24:	af00      	add	r7, sp, #0
    7e26:	0002      	movs	r2, r0
    7e28:	1dfb      	adds	r3, r7, #7
    7e2a:	701a      	strb	r2, [r3, #0]
    7e2c:	4b06      	ldr	r3, [pc, #24]	; (7e48 <system_interrupt_enable+0x28>)
    7e2e:	1dfa      	adds	r2, r7, #7
    7e30:	7812      	ldrb	r2, [r2, #0]
    7e32:	0011      	movs	r1, r2
    7e34:	221f      	movs	r2, #31
    7e36:	400a      	ands	r2, r1
    7e38:	2101      	movs	r1, #1
    7e3a:	4091      	lsls	r1, r2
    7e3c:	000a      	movs	r2, r1
    7e3e:	601a      	str	r2, [r3, #0]
    7e40:	46c0      	nop			; (mov r8, r8)
    7e42:	46bd      	mov	sp, r7
    7e44:	b002      	add	sp, #8
    7e46:	bd80      	pop	{r7, pc}
    7e48:	e000e100 	.word	0xe000e100

00007e4c <_extint_get_eic_from_channel>:
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b084      	sub	sp, #16
    7e50:	af00      	add	r7, sp, #0
    7e52:	0002      	movs	r2, r0
    7e54:	1dfb      	adds	r3, r7, #7
    7e56:	701a      	strb	r2, [r3, #0]
    7e58:	230f      	movs	r3, #15
    7e5a:	18fb      	adds	r3, r7, r3
    7e5c:	1dfa      	adds	r2, r7, #7
    7e5e:	7812      	ldrb	r2, [r2, #0]
    7e60:	0952      	lsrs	r2, r2, #5
    7e62:	701a      	strb	r2, [r3, #0]
    7e64:	230f      	movs	r3, #15
    7e66:	18fb      	adds	r3, r7, r3
    7e68:	781b      	ldrb	r3, [r3, #0]
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d10c      	bne.n	7e88 <_extint_get_eic_from_channel+0x3c>
    7e6e:	4b09      	ldr	r3, [pc, #36]	; (7e94 <_extint_get_eic_from_channel+0x48>)
    7e70:	60bb      	str	r3, [r7, #8]
    7e72:	230f      	movs	r3, #15
    7e74:	18fb      	adds	r3, r7, r3
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	009b      	lsls	r3, r3, #2
    7e7a:	2210      	movs	r2, #16
    7e7c:	4694      	mov	ip, r2
    7e7e:	44bc      	add	ip, r7
    7e80:	4463      	add	r3, ip
    7e82:	3b08      	subs	r3, #8
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	e000      	b.n	7e8a <_extint_get_eic_from_channel+0x3e>
    7e88:	2300      	movs	r3, #0
    7e8a:	0018      	movs	r0, r3
    7e8c:	46bd      	mov	sp, r7
    7e8e:	b004      	add	sp, #16
    7e90:	bd80      	pop	{r7, pc}
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	40001800 	.word	0x40001800

00007e98 <extint_is_syncing>:
    7e98:	b580      	push	{r7, lr}
    7e9a:	b082      	sub	sp, #8
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	4b0f      	ldr	r3, [pc, #60]	; (7edc <extint_is_syncing+0x44>)
    7ea0:	603b      	str	r3, [r7, #0]
    7ea2:	2300      	movs	r3, #0
    7ea4:	607b      	str	r3, [r7, #4]
    7ea6:	e011      	b.n	7ecc <extint_is_syncing+0x34>
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	009b      	lsls	r3, r3, #2
    7eac:	2208      	movs	r2, #8
    7eae:	4694      	mov	ip, r2
    7eb0:	44bc      	add	ip, r7
    7eb2:	4463      	add	r3, ip
    7eb4:	3b08      	subs	r3, #8
    7eb6:	681b      	ldr	r3, [r3, #0]
    7eb8:	785b      	ldrb	r3, [r3, #1]
    7eba:	b2db      	uxtb	r3, r3
    7ebc:	b25b      	sxtb	r3, r3
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	da01      	bge.n	7ec6 <extint_is_syncing+0x2e>
    7ec2:	2301      	movs	r3, #1
    7ec4:	e006      	b.n	7ed4 <extint_is_syncing+0x3c>
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	3301      	adds	r3, #1
    7eca:	607b      	str	r3, [r7, #4]
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d0ea      	beq.n	7ea8 <extint_is_syncing+0x10>
    7ed2:	2300      	movs	r3, #0
    7ed4:	0018      	movs	r0, r3
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b002      	add	sp, #8
    7eda:	bd80      	pop	{r7, pc}
    7edc:	40001800 	.word	0x40001800

00007ee0 <_system_extint_init>:
    7ee0:	b590      	push	{r4, r7, lr}
    7ee2:	b085      	sub	sp, #20
    7ee4:	af00      	add	r7, sp, #0
    7ee6:	4c32      	ldr	r4, [pc, #200]	; (7fb0 <_system_extint_init+0xd0>)
    7ee8:	447c      	add	r4, pc
    7eea:	4b32      	ldr	r3, [pc, #200]	; (7fb4 <_system_extint_init+0xd4>)
    7eec:	607b      	str	r3, [r7, #4]
    7eee:	2140      	movs	r1, #64	; 0x40
    7ef0:	2000      	movs	r0, #0
    7ef2:	4b31      	ldr	r3, [pc, #196]	; (7fb8 <_system_extint_init+0xd8>)
    7ef4:	447b      	add	r3, pc
    7ef6:	4798      	blx	r3
    7ef8:	003b      	movs	r3, r7
    7efa:	0018      	movs	r0, r3
    7efc:	4b2f      	ldr	r3, [pc, #188]	; (7fbc <_system_extint_init+0xdc>)
    7efe:	447b      	add	r3, pc
    7f00:	4798      	blx	r3
    7f02:	003b      	movs	r3, r7
    7f04:	2202      	movs	r2, #2
    7f06:	701a      	strb	r2, [r3, #0]
    7f08:	003b      	movs	r3, r7
    7f0a:	0019      	movs	r1, r3
    7f0c:	2005      	movs	r0, #5
    7f0e:	4b2c      	ldr	r3, [pc, #176]	; (7fc0 <_system_extint_init+0xe0>)
    7f10:	58e3      	ldr	r3, [r4, r3]
    7f12:	4798      	blx	r3
    7f14:	2005      	movs	r0, #5
    7f16:	4b2b      	ldr	r3, [pc, #172]	; (7fc4 <_system_extint_init+0xe4>)
    7f18:	58e3      	ldr	r3, [r4, r3]
    7f1a:	4798      	blx	r3
    7f1c:	2300      	movs	r3, #0
    7f1e:	60fb      	str	r3, [r7, #12]
    7f20:	e018      	b.n	7f54 <_system_extint_init+0x74>
    7f22:	68fb      	ldr	r3, [r7, #12]
    7f24:	009b      	lsls	r3, r3, #2
    7f26:	2210      	movs	r2, #16
    7f28:	4694      	mov	ip, r2
    7f2a:	44bc      	add	ip, r7
    7f2c:	4463      	add	r3, ip
    7f2e:	3b0c      	subs	r3, #12
    7f30:	681a      	ldr	r2, [r3, #0]
    7f32:	68fb      	ldr	r3, [r7, #12]
    7f34:	009b      	lsls	r3, r3, #2
    7f36:	2110      	movs	r1, #16
    7f38:	468c      	mov	ip, r1
    7f3a:	44bc      	add	ip, r7
    7f3c:	4463      	add	r3, ip
    7f3e:	3b0c      	subs	r3, #12
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	b2db      	uxtb	r3, r3
    7f46:	2101      	movs	r1, #1
    7f48:	430b      	orrs	r3, r1
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	7013      	strb	r3, [r2, #0]
    7f4e:	68fb      	ldr	r3, [r7, #12]
    7f50:	3301      	adds	r3, #1
    7f52:	60fb      	str	r3, [r7, #12]
    7f54:	68fb      	ldr	r3, [r7, #12]
    7f56:	2b00      	cmp	r3, #0
    7f58:	d0e3      	beq.n	7f22 <_system_extint_init+0x42>
    7f5a:	46c0      	nop			; (mov r8, r8)
    7f5c:	4b1a      	ldr	r3, [pc, #104]	; (7fc8 <_system_extint_init+0xe8>)
    7f5e:	447b      	add	r3, pc
    7f60:	4798      	blx	r3
    7f62:	1e03      	subs	r3, r0, #0
    7f64:	d1fa      	bne.n	7f5c <_system_extint_init+0x7c>
    7f66:	230b      	movs	r3, #11
    7f68:	18fb      	adds	r3, r7, r3
    7f6a:	2200      	movs	r2, #0
    7f6c:	701a      	strb	r2, [r3, #0]
    7f6e:	e00e      	b.n	7f8e <_system_extint_init+0xae>
    7f70:	230b      	movs	r3, #11
    7f72:	18fb      	adds	r3, r7, r3
    7f74:	781a      	ldrb	r2, [r3, #0]
    7f76:	4b15      	ldr	r3, [pc, #84]	; (7fcc <_system_extint_init+0xec>)
    7f78:	58e3      	ldr	r3, [r4, r3]
    7f7a:	0092      	lsls	r2, r2, #2
    7f7c:	2100      	movs	r1, #0
    7f7e:	50d1      	str	r1, [r2, r3]
    7f80:	230b      	movs	r3, #11
    7f82:	18fb      	adds	r3, r7, r3
    7f84:	781a      	ldrb	r2, [r3, #0]
    7f86:	230b      	movs	r3, #11
    7f88:	18fb      	adds	r3, r7, r3
    7f8a:	3201      	adds	r2, #1
    7f8c:	701a      	strb	r2, [r3, #0]
    7f8e:	230b      	movs	r3, #11
    7f90:	18fb      	adds	r3, r7, r3
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	2b0f      	cmp	r3, #15
    7f96:	d9eb      	bls.n	7f70 <_system_extint_init+0x90>
    7f98:	2004      	movs	r0, #4
    7f9a:	4b0d      	ldr	r3, [pc, #52]	; (7fd0 <_system_extint_init+0xf0>)
    7f9c:	447b      	add	r3, pc
    7f9e:	4798      	blx	r3
    7fa0:	4b0c      	ldr	r3, [pc, #48]	; (7fd4 <_system_extint_init+0xf4>)
    7fa2:	447b      	add	r3, pc
    7fa4:	4798      	blx	r3
    7fa6:	46c0      	nop			; (mov r8, r8)
    7fa8:	46bd      	mov	sp, r7
    7faa:	b005      	add	sp, #20
    7fac:	bd90      	pop	{r4, r7, pc}
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	00009ef8 	.word	0x00009ef8
    7fb4:	40001800 	.word	0x40001800
    7fb8:	fffffea5 	.word	0xfffffea5
    7fbc:	fffffe83 	.word	0xfffffe83
    7fc0:	000000b0 	.word	0x000000b0
    7fc4:	00000238 	.word	0x00000238
    7fc8:	ffffff37 	.word	0xffffff37
    7fcc:	00000180 	.word	0x00000180
    7fd0:	fffffe81 	.word	0xfffffe81
    7fd4:	00000033 	.word	0x00000033

00007fd8 <_extint_enable>:
    7fd8:	b580      	push	{r7, lr}
    7fda:	b082      	sub	sp, #8
    7fdc:	af00      	add	r7, sp, #0
    7fde:	4b15      	ldr	r3, [pc, #84]	; (8034 <_extint_enable+0x5c>)
    7fe0:	603b      	str	r3, [r7, #0]
    7fe2:	2300      	movs	r3, #0
    7fe4:	607b      	str	r3, [r7, #4]
    7fe6:	e018      	b.n	801a <_extint_enable+0x42>
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	009b      	lsls	r3, r3, #2
    7fec:	2208      	movs	r2, #8
    7fee:	4694      	mov	ip, r2
    7ff0:	44bc      	add	ip, r7
    7ff2:	4463      	add	r3, ip
    7ff4:	3b08      	subs	r3, #8
    7ff6:	681a      	ldr	r2, [r3, #0]
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	009b      	lsls	r3, r3, #2
    7ffc:	2108      	movs	r1, #8
    7ffe:	468c      	mov	ip, r1
    8000:	44bc      	add	ip, r7
    8002:	4463      	add	r3, ip
    8004:	3b08      	subs	r3, #8
    8006:	681b      	ldr	r3, [r3, #0]
    8008:	781b      	ldrb	r3, [r3, #0]
    800a:	b2db      	uxtb	r3, r3
    800c:	2102      	movs	r1, #2
    800e:	430b      	orrs	r3, r1
    8010:	b2db      	uxtb	r3, r3
    8012:	7013      	strb	r3, [r2, #0]
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	3301      	adds	r3, #1
    8018:	607b      	str	r3, [r7, #4]
    801a:	687b      	ldr	r3, [r7, #4]
    801c:	2b00      	cmp	r3, #0
    801e:	d0e3      	beq.n	7fe8 <_extint_enable+0x10>
    8020:	46c0      	nop			; (mov r8, r8)
    8022:	4b05      	ldr	r3, [pc, #20]	; (8038 <_extint_enable+0x60>)
    8024:	447b      	add	r3, pc
    8026:	4798      	blx	r3
    8028:	1e03      	subs	r3, r0, #0
    802a:	d1fa      	bne.n	8022 <_extint_enable+0x4a>
    802c:	46c0      	nop			; (mov r8, r8)
    802e:	46bd      	mov	sp, r7
    8030:	b002      	add	sp, #8
    8032:	bd80      	pop	{r7, pc}
    8034:	40001800 	.word	0x40001800
    8038:	fffffe71 	.word	0xfffffe71

0000803c <extint_chan_get_config_defaults>:
    803c:	b580      	push	{r7, lr}
    803e:	b082      	sub	sp, #8
    8040:	af00      	add	r7, sp, #0
    8042:	6078      	str	r0, [r7, #4]
    8044:	687b      	ldr	r3, [r7, #4]
    8046:	2200      	movs	r2, #0
    8048:	601a      	str	r2, [r3, #0]
    804a:	687b      	ldr	r3, [r7, #4]
    804c:	2200      	movs	r2, #0
    804e:	605a      	str	r2, [r3, #4]
    8050:	687b      	ldr	r3, [r7, #4]
    8052:	2201      	movs	r2, #1
    8054:	721a      	strb	r2, [r3, #8]
    8056:	687b      	ldr	r3, [r7, #4]
    8058:	2201      	movs	r2, #1
    805a:	725a      	strb	r2, [r3, #9]
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	2200      	movs	r2, #0
    8060:	729a      	strb	r2, [r3, #10]
    8062:	687b      	ldr	r3, [r7, #4]
    8064:	2202      	movs	r2, #2
    8066:	72da      	strb	r2, [r3, #11]
    8068:	46c0      	nop			; (mov r8, r8)
    806a:	46bd      	mov	sp, r7
    806c:	b002      	add	sp, #8
    806e:	bd80      	pop	{r7, pc}

00008070 <extint_chan_set_config>:
    8070:	b590      	push	{r4, r7, lr}
    8072:	b087      	sub	sp, #28
    8074:	af00      	add	r7, sp, #0
    8076:	0002      	movs	r2, r0
    8078:	6039      	str	r1, [r7, #0]
    807a:	1dfb      	adds	r3, r7, #7
    807c:	701a      	strb	r2, [r3, #0]
    807e:	4c3b      	ldr	r4, [pc, #236]	; (816c <extint_chan_set_config+0xfc>)
    8080:	447c      	add	r4, pc
    8082:	2308      	movs	r3, #8
    8084:	18fb      	adds	r3, r7, r3
    8086:	0018      	movs	r0, r3
    8088:	4b39      	ldr	r3, [pc, #228]	; (8170 <extint_chan_set_config+0x100>)
    808a:	447b      	add	r3, pc
    808c:	4798      	blx	r3
    808e:	683b      	ldr	r3, [r7, #0]
    8090:	685b      	ldr	r3, [r3, #4]
    8092:	b2da      	uxtb	r2, r3
    8094:	2308      	movs	r3, #8
    8096:	18fb      	adds	r3, r7, r3
    8098:	701a      	strb	r2, [r3, #0]
    809a:	2308      	movs	r3, #8
    809c:	18fb      	adds	r3, r7, r3
    809e:	2200      	movs	r2, #0
    80a0:	705a      	strb	r2, [r3, #1]
    80a2:	683b      	ldr	r3, [r7, #0]
    80a4:	7a1a      	ldrb	r2, [r3, #8]
    80a6:	2308      	movs	r3, #8
    80a8:	18fb      	adds	r3, r7, r3
    80aa:	709a      	strb	r2, [r3, #2]
    80ac:	683b      	ldr	r3, [r7, #0]
    80ae:	681b      	ldr	r3, [r3, #0]
    80b0:	b2db      	uxtb	r3, r3
    80b2:	2208      	movs	r2, #8
    80b4:	18ba      	adds	r2, r7, r2
    80b6:	0011      	movs	r1, r2
    80b8:	0018      	movs	r0, r3
    80ba:	4b2e      	ldr	r3, [pc, #184]	; (8174 <extint_chan_set_config+0x104>)
    80bc:	58e3      	ldr	r3, [r4, r3]
    80be:	4798      	blx	r3
    80c0:	1dfb      	adds	r3, r7, #7
    80c2:	781b      	ldrb	r3, [r3, #0]
    80c4:	0018      	movs	r0, r3
    80c6:	4b2c      	ldr	r3, [pc, #176]	; (8178 <extint_chan_set_config+0x108>)
    80c8:	447b      	add	r3, pc
    80ca:	4798      	blx	r3
    80cc:	0003      	movs	r3, r0
    80ce:	613b      	str	r3, [r7, #16]
    80d0:	1dfb      	adds	r3, r7, #7
    80d2:	781b      	ldrb	r3, [r3, #0]
    80d4:	2207      	movs	r2, #7
    80d6:	4013      	ands	r3, r2
    80d8:	009b      	lsls	r3, r3, #2
    80da:	60fb      	str	r3, [r7, #12]
    80dc:	683b      	ldr	r3, [r7, #0]
    80de:	7adb      	ldrb	r3, [r3, #11]
    80e0:	617b      	str	r3, [r7, #20]
    80e2:	683b      	ldr	r3, [r7, #0]
    80e4:	7a9b      	ldrb	r3, [r3, #10]
    80e6:	2b00      	cmp	r3, #0
    80e8:	d003      	beq.n	80f2 <extint_chan_set_config+0x82>
    80ea:	697b      	ldr	r3, [r7, #20]
    80ec:	2208      	movs	r2, #8
    80ee:	4313      	orrs	r3, r2
    80f0:	617b      	str	r3, [r7, #20]
    80f2:	1dfb      	adds	r3, r7, #7
    80f4:	781b      	ldrb	r3, [r3, #0]
    80f6:	08db      	lsrs	r3, r3, #3
    80f8:	b2db      	uxtb	r3, r3
    80fa:	0018      	movs	r0, r3
    80fc:	1dfb      	adds	r3, r7, #7
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	08db      	lsrs	r3, r3, #3
    8102:	b2db      	uxtb	r3, r3
    8104:	001a      	movs	r2, r3
    8106:	693b      	ldr	r3, [r7, #16]
    8108:	3206      	adds	r2, #6
    810a:	0092      	lsls	r2, r2, #2
    810c:	58d3      	ldr	r3, [r2, r3]
    810e:	210f      	movs	r1, #15
    8110:	68fa      	ldr	r2, [r7, #12]
    8112:	4091      	lsls	r1, r2
    8114:	000a      	movs	r2, r1
    8116:	43d2      	mvns	r2, r2
    8118:	401a      	ands	r2, r3
    811a:	6979      	ldr	r1, [r7, #20]
    811c:	68fb      	ldr	r3, [r7, #12]
    811e:	4099      	lsls	r1, r3
    8120:	000b      	movs	r3, r1
    8122:	431a      	orrs	r2, r3
    8124:	0011      	movs	r1, r2
    8126:	693b      	ldr	r3, [r7, #16]
    8128:	1d82      	adds	r2, r0, #6
    812a:	0092      	lsls	r2, r2, #2
    812c:	50d1      	str	r1, [r2, r3]
    812e:	683b      	ldr	r3, [r7, #0]
    8130:	7a5b      	ldrb	r3, [r3, #9]
    8132:	2b00      	cmp	r3, #0
    8134:	d00a      	beq.n	814c <extint_chan_set_config+0xdc>
    8136:	693b      	ldr	r3, [r7, #16]
    8138:	695a      	ldr	r2, [r3, #20]
    813a:	1dfb      	adds	r3, r7, #7
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	2101      	movs	r1, #1
    8140:	4099      	lsls	r1, r3
    8142:	000b      	movs	r3, r1
    8144:	431a      	orrs	r2, r3
    8146:	693b      	ldr	r3, [r7, #16]
    8148:	615a      	str	r2, [r3, #20]
    814a:	e00a      	b.n	8162 <extint_chan_set_config+0xf2>
    814c:	693b      	ldr	r3, [r7, #16]
    814e:	695b      	ldr	r3, [r3, #20]
    8150:	1dfa      	adds	r2, r7, #7
    8152:	7812      	ldrb	r2, [r2, #0]
    8154:	2101      	movs	r1, #1
    8156:	4091      	lsls	r1, r2
    8158:	000a      	movs	r2, r1
    815a:	43d2      	mvns	r2, r2
    815c:	401a      	ands	r2, r3
    815e:	693b      	ldr	r3, [r7, #16]
    8160:	615a      	str	r2, [r3, #20]
    8162:	46c0      	nop			; (mov r8, r8)
    8164:	46bd      	mov	sp, r7
    8166:	b007      	add	sp, #28
    8168:	bd90      	pop	{r4, r7, pc}
    816a:	46c0      	nop			; (mov r8, r8)
    816c:	00009d60 	.word	0x00009d60
    8170:	fffffd6b 	.word	0xfffffd6b
    8174:	000002b8 	.word	0x000002b8
    8178:	fffffd81 	.word	0xfffffd81

0000817c <system_gclk_chan_get_config_defaults>:
    817c:	b580      	push	{r7, lr}
    817e:	b082      	sub	sp, #8
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	2200      	movs	r2, #0
    8188:	701a      	strb	r2, [r3, #0]
    818a:	46c0      	nop			; (mov r8, r8)
    818c:	46bd      	mov	sp, r7
    818e:	b002      	add	sp, #8
    8190:	bd80      	pop	{r7, pc}

00008192 <_sercom_get_sync_baud_val>:
    8192:	b580      	push	{r7, lr}
    8194:	b086      	sub	sp, #24
    8196:	af00      	add	r7, sp, #0
    8198:	60f8      	str	r0, [r7, #12]
    819a:	60b9      	str	r1, [r7, #8]
    819c:	607a      	str	r2, [r7, #4]
    819e:	2316      	movs	r3, #22
    81a0:	18fb      	adds	r3, r7, r3
    81a2:	2200      	movs	r2, #0
    81a4:	801a      	strh	r2, [r3, #0]
    81a6:	68bb      	ldr	r3, [r7, #8]
    81a8:	613b      	str	r3, [r7, #16]
    81aa:	68bb      	ldr	r3, [r7, #8]
    81ac:	085a      	lsrs	r2, r3, #1
    81ae:	68fb      	ldr	r3, [r7, #12]
    81b0:	429a      	cmp	r2, r3
    81b2:	d201      	bcs.n	81b8 <_sercom_get_sync_baud_val+0x26>
    81b4:	2340      	movs	r3, #64	; 0x40
    81b6:	e026      	b.n	8206 <_sercom_get_sync_baud_val+0x74>
    81b8:	68bb      	ldr	r3, [r7, #8]
    81ba:	085b      	lsrs	r3, r3, #1
    81bc:	613b      	str	r3, [r7, #16]
    81be:	e00a      	b.n	81d6 <_sercom_get_sync_baud_val+0x44>
    81c0:	693a      	ldr	r2, [r7, #16]
    81c2:	68fb      	ldr	r3, [r7, #12]
    81c4:	1ad3      	subs	r3, r2, r3
    81c6:	613b      	str	r3, [r7, #16]
    81c8:	2316      	movs	r3, #22
    81ca:	18fb      	adds	r3, r7, r3
    81cc:	881a      	ldrh	r2, [r3, #0]
    81ce:	2316      	movs	r3, #22
    81d0:	18fb      	adds	r3, r7, r3
    81d2:	3201      	adds	r2, #1
    81d4:	801a      	strh	r2, [r3, #0]
    81d6:	693a      	ldr	r2, [r7, #16]
    81d8:	68fb      	ldr	r3, [r7, #12]
    81da:	429a      	cmp	r2, r3
    81dc:	d2f0      	bcs.n	81c0 <_sercom_get_sync_baud_val+0x2e>
    81de:	2316      	movs	r3, #22
    81e0:	18fb      	adds	r3, r7, r3
    81e2:	2216      	movs	r2, #22
    81e4:	18ba      	adds	r2, r7, r2
    81e6:	8812      	ldrh	r2, [r2, #0]
    81e8:	3a01      	subs	r2, #1
    81ea:	801a      	strh	r2, [r3, #0]
    81ec:	2316      	movs	r3, #22
    81ee:	18fb      	adds	r3, r7, r3
    81f0:	881b      	ldrh	r3, [r3, #0]
    81f2:	2bff      	cmp	r3, #255	; 0xff
    81f4:	d901      	bls.n	81fa <_sercom_get_sync_baud_val+0x68>
    81f6:	2340      	movs	r3, #64	; 0x40
    81f8:	e005      	b.n	8206 <_sercom_get_sync_baud_val+0x74>
    81fa:	687b      	ldr	r3, [r7, #4]
    81fc:	2216      	movs	r2, #22
    81fe:	18ba      	adds	r2, r7, r2
    8200:	8812      	ldrh	r2, [r2, #0]
    8202:	801a      	strh	r2, [r3, #0]
    8204:	2300      	movs	r3, #0
    8206:	0018      	movs	r0, r3
    8208:	46bd      	mov	sp, r7
    820a:	b006      	add	sp, #24
    820c:	bd80      	pop	{r7, pc}
	...

00008210 <sercom_set_gclk_generator>:
    8210:	b590      	push	{r4, r7, lr}
    8212:	b085      	sub	sp, #20
    8214:	af00      	add	r7, sp, #0
    8216:	0002      	movs	r2, r0
    8218:	1dfb      	adds	r3, r7, #7
    821a:	701a      	strb	r2, [r3, #0]
    821c:	1dbb      	adds	r3, r7, #6
    821e:	1c0a      	adds	r2, r1, #0
    8220:	701a      	strb	r2, [r3, #0]
    8222:	4c1e      	ldr	r4, [pc, #120]	; (829c <sercom_set_gclk_generator+0x8c>)
    8224:	447c      	add	r4, pc
    8226:	4b1e      	ldr	r3, [pc, #120]	; (82a0 <sercom_set_gclk_generator+0x90>)
    8228:	447b      	add	r3, pc
    822a:	781b      	ldrb	r3, [r3, #0]
    822c:	2201      	movs	r2, #1
    822e:	4053      	eors	r3, r2
    8230:	b2db      	uxtb	r3, r3
    8232:	2b00      	cmp	r3, #0
    8234:	d103      	bne.n	823e <sercom_set_gclk_generator+0x2e>
    8236:	1dbb      	adds	r3, r7, #6
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	2b00      	cmp	r3, #0
    823c:	d020      	beq.n	8280 <sercom_set_gclk_generator+0x70>
    823e:	230c      	movs	r3, #12
    8240:	18fb      	adds	r3, r7, r3
    8242:	0018      	movs	r0, r3
    8244:	4b17      	ldr	r3, [pc, #92]	; (82a4 <sercom_set_gclk_generator+0x94>)
    8246:	447b      	add	r3, pc
    8248:	4798      	blx	r3
    824a:	230c      	movs	r3, #12
    824c:	18fb      	adds	r3, r7, r3
    824e:	1dfa      	adds	r2, r7, #7
    8250:	7812      	ldrb	r2, [r2, #0]
    8252:	701a      	strb	r2, [r3, #0]
    8254:	230c      	movs	r3, #12
    8256:	18fb      	adds	r3, r7, r3
    8258:	0019      	movs	r1, r3
    825a:	2013      	movs	r0, #19
    825c:	4b12      	ldr	r3, [pc, #72]	; (82a8 <sercom_set_gclk_generator+0x98>)
    825e:	58e3      	ldr	r3, [r4, r3]
    8260:	4798      	blx	r3
    8262:	2013      	movs	r0, #19
    8264:	4b11      	ldr	r3, [pc, #68]	; (82ac <sercom_set_gclk_generator+0x9c>)
    8266:	58e3      	ldr	r3, [r4, r3]
    8268:	4798      	blx	r3
    826a:	4b11      	ldr	r3, [pc, #68]	; (82b0 <sercom_set_gclk_generator+0xa0>)
    826c:	447b      	add	r3, pc
    826e:	1dfa      	adds	r2, r7, #7
    8270:	7812      	ldrb	r2, [r2, #0]
    8272:	705a      	strb	r2, [r3, #1]
    8274:	4b0f      	ldr	r3, [pc, #60]	; (82b4 <sercom_set_gclk_generator+0xa4>)
    8276:	447b      	add	r3, pc
    8278:	2201      	movs	r2, #1
    827a:	701a      	strb	r2, [r3, #0]
    827c:	2300      	movs	r3, #0
    827e:	e009      	b.n	8294 <sercom_set_gclk_generator+0x84>
    8280:	4b0d      	ldr	r3, [pc, #52]	; (82b8 <sercom_set_gclk_generator+0xa8>)
    8282:	447b      	add	r3, pc
    8284:	785b      	ldrb	r3, [r3, #1]
    8286:	1dfa      	adds	r2, r7, #7
    8288:	7812      	ldrb	r2, [r2, #0]
    828a:	429a      	cmp	r2, r3
    828c:	d101      	bne.n	8292 <sercom_set_gclk_generator+0x82>
    828e:	2300      	movs	r3, #0
    8290:	e000      	b.n	8294 <sercom_set_gclk_generator+0x84>
    8292:	231d      	movs	r3, #29
    8294:	0018      	movs	r0, r3
    8296:	46bd      	mov	sp, r7
    8298:	b005      	add	sp, #20
    829a:	bd90      	pop	{r4, r7, pc}
    829c:	00009bbc 	.word	0x00009bbc
    82a0:	1fff8304 	.word	0x1fff8304
    82a4:	ffffff33 	.word	0xffffff33
    82a8:	000000b0 	.word	0x000000b0
    82ac:	00000238 	.word	0x00000238
    82b0:	1fff82c0 	.word	0x1fff82c0
    82b4:	1fff82b6 	.word	0x1fff82b6
    82b8:	1fff82aa 	.word	0x1fff82aa

000082bc <_sercom_get_default_pad>:
    82bc:	b580      	push	{r7, lr}
    82be:	b082      	sub	sp, #8
    82c0:	af00      	add	r7, sp, #0
    82c2:	6078      	str	r0, [r7, #4]
    82c4:	000a      	movs	r2, r1
    82c6:	1cfb      	adds	r3, r7, #3
    82c8:	701a      	strb	r2, [r3, #0]
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	4a57      	ldr	r2, [pc, #348]	; (842c <_sercom_get_default_pad+0x170>)
    82ce:	4293      	cmp	r3, r2
    82d0:	d046      	beq.n	8360 <_sercom_get_default_pad+0xa4>
    82d2:	4a56      	ldr	r2, [pc, #344]	; (842c <_sercom_get_default_pad+0x170>)
    82d4:	4293      	cmp	r3, r2
    82d6:	d806      	bhi.n	82e6 <_sercom_get_default_pad+0x2a>
    82d8:	4a55      	ldr	r2, [pc, #340]	; (8430 <_sercom_get_default_pad+0x174>)
    82da:	4293      	cmp	r3, r2
    82dc:	d00f      	beq.n	82fe <_sercom_get_default_pad+0x42>
    82de:	4a55      	ldr	r2, [pc, #340]	; (8434 <_sercom_get_default_pad+0x178>)
    82e0:	4293      	cmp	r3, r2
    82e2:	d025      	beq.n	8330 <_sercom_get_default_pad+0x74>
    82e4:	e09d      	b.n	8422 <_sercom_get_default_pad+0x166>
    82e6:	4a54      	ldr	r2, [pc, #336]	; (8438 <_sercom_get_default_pad+0x17c>)
    82e8:	4293      	cmp	r3, r2
    82ea:	d100      	bne.n	82ee <_sercom_get_default_pad+0x32>
    82ec:	e068      	b.n	83c0 <_sercom_get_default_pad+0x104>
    82ee:	4a53      	ldr	r2, [pc, #332]	; (843c <_sercom_get_default_pad+0x180>)
    82f0:	4293      	cmp	r3, r2
    82f2:	d100      	bne.n	82f6 <_sercom_get_default_pad+0x3a>
    82f4:	e07c      	b.n	83f0 <_sercom_get_default_pad+0x134>
    82f6:	4a52      	ldr	r2, [pc, #328]	; (8440 <_sercom_get_default_pad+0x184>)
    82f8:	4293      	cmp	r3, r2
    82fa:	d049      	beq.n	8390 <_sercom_get_default_pad+0xd4>
    82fc:	e091      	b.n	8422 <_sercom_get_default_pad+0x166>
    82fe:	1cfb      	adds	r3, r7, #3
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	2b03      	cmp	r3, #3
    8304:	d900      	bls.n	8308 <_sercom_get_default_pad+0x4c>
    8306:	e08b      	b.n	8420 <_sercom_get_default_pad+0x164>
    8308:	0018      	movs	r0, r3
    830a:	f008 f9c1 	bl	10690 <__gnu_thumb1_case_si>
    830e:	46c0      	nop			; (mov r8, r8)
    8310:	00000010 	.word	0x00000010
    8314:	00000014 	.word	0x00000014
    8318:	00000018 	.word	0x00000018
    831c:	0000001c 	.word	0x0000001c
    8320:	4b48      	ldr	r3, [pc, #288]	; (8444 <_sercom_get_default_pad+0x188>)
    8322:	e07f      	b.n	8424 <_sercom_get_default_pad+0x168>
    8324:	4b48      	ldr	r3, [pc, #288]	; (8448 <_sercom_get_default_pad+0x18c>)
    8326:	e07d      	b.n	8424 <_sercom_get_default_pad+0x168>
    8328:	4b48      	ldr	r3, [pc, #288]	; (844c <_sercom_get_default_pad+0x190>)
    832a:	e07b      	b.n	8424 <_sercom_get_default_pad+0x168>
    832c:	4b48      	ldr	r3, [pc, #288]	; (8450 <_sercom_get_default_pad+0x194>)
    832e:	e079      	b.n	8424 <_sercom_get_default_pad+0x168>
    8330:	1cfb      	adds	r3, r7, #3
    8332:	781b      	ldrb	r3, [r3, #0]
    8334:	2b03      	cmp	r3, #3
    8336:	d900      	bls.n	833a <_sercom_get_default_pad+0x7e>
    8338:	e072      	b.n	8420 <_sercom_get_default_pad+0x164>
    833a:	0018      	movs	r0, r3
    833c:	f008 f9a8 	bl	10690 <__gnu_thumb1_case_si>
    8340:	00000010 	.word	0x00000010
    8344:	00000014 	.word	0x00000014
    8348:	00000018 	.word	0x00000018
    834c:	0000001c 	.word	0x0000001c
    8350:	2303      	movs	r3, #3
    8352:	e067      	b.n	8424 <_sercom_get_default_pad+0x168>
    8354:	4b3f      	ldr	r3, [pc, #252]	; (8454 <_sercom_get_default_pad+0x198>)
    8356:	e065      	b.n	8424 <_sercom_get_default_pad+0x168>
    8358:	4b3f      	ldr	r3, [pc, #252]	; (8458 <_sercom_get_default_pad+0x19c>)
    835a:	e063      	b.n	8424 <_sercom_get_default_pad+0x168>
    835c:	4b3f      	ldr	r3, [pc, #252]	; (845c <_sercom_get_default_pad+0x1a0>)
    835e:	e061      	b.n	8424 <_sercom_get_default_pad+0x168>
    8360:	1cfb      	adds	r3, r7, #3
    8362:	781b      	ldrb	r3, [r3, #0]
    8364:	2b03      	cmp	r3, #3
    8366:	d85b      	bhi.n	8420 <_sercom_get_default_pad+0x164>
    8368:	0018      	movs	r0, r3
    836a:	f008 f991 	bl	10690 <__gnu_thumb1_case_si>
    836e:	46c0      	nop			; (mov r8, r8)
    8370:	00000010 	.word	0x00000010
    8374:	00000014 	.word	0x00000014
    8378:	00000018 	.word	0x00000018
    837c:	0000001c 	.word	0x0000001c
    8380:	4b37      	ldr	r3, [pc, #220]	; (8460 <_sercom_get_default_pad+0x1a4>)
    8382:	e04f      	b.n	8424 <_sercom_get_default_pad+0x168>
    8384:	4b37      	ldr	r3, [pc, #220]	; (8464 <_sercom_get_default_pad+0x1a8>)
    8386:	e04d      	b.n	8424 <_sercom_get_default_pad+0x168>
    8388:	4b37      	ldr	r3, [pc, #220]	; (8468 <_sercom_get_default_pad+0x1ac>)
    838a:	e04b      	b.n	8424 <_sercom_get_default_pad+0x168>
    838c:	4b37      	ldr	r3, [pc, #220]	; (846c <_sercom_get_default_pad+0x1b0>)
    838e:	e049      	b.n	8424 <_sercom_get_default_pad+0x168>
    8390:	1cfb      	adds	r3, r7, #3
    8392:	781b      	ldrb	r3, [r3, #0]
    8394:	2b03      	cmp	r3, #3
    8396:	d843      	bhi.n	8420 <_sercom_get_default_pad+0x164>
    8398:	0018      	movs	r0, r3
    839a:	f008 f979 	bl	10690 <__gnu_thumb1_case_si>
    839e:	46c0      	nop			; (mov r8, r8)
    83a0:	00000010 	.word	0x00000010
    83a4:	00000014 	.word	0x00000014
    83a8:	00000018 	.word	0x00000018
    83ac:	0000001c 	.word	0x0000001c
    83b0:	4b2f      	ldr	r3, [pc, #188]	; (8470 <_sercom_get_default_pad+0x1b4>)
    83b2:	e037      	b.n	8424 <_sercom_get_default_pad+0x168>
    83b4:	4b2f      	ldr	r3, [pc, #188]	; (8474 <_sercom_get_default_pad+0x1b8>)
    83b6:	e035      	b.n	8424 <_sercom_get_default_pad+0x168>
    83b8:	4b2f      	ldr	r3, [pc, #188]	; (8478 <_sercom_get_default_pad+0x1bc>)
    83ba:	e033      	b.n	8424 <_sercom_get_default_pad+0x168>
    83bc:	4b2f      	ldr	r3, [pc, #188]	; (847c <_sercom_get_default_pad+0x1c0>)
    83be:	e031      	b.n	8424 <_sercom_get_default_pad+0x168>
    83c0:	1cfb      	adds	r3, r7, #3
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	2b03      	cmp	r3, #3
    83c6:	d82b      	bhi.n	8420 <_sercom_get_default_pad+0x164>
    83c8:	0018      	movs	r0, r3
    83ca:	f008 f961 	bl	10690 <__gnu_thumb1_case_si>
    83ce:	46c0      	nop			; (mov r8, r8)
    83d0:	00000010 	.word	0x00000010
    83d4:	00000014 	.word	0x00000014
    83d8:	00000018 	.word	0x00000018
    83dc:	0000001c 	.word	0x0000001c
    83e0:	4b27      	ldr	r3, [pc, #156]	; (8480 <_sercom_get_default_pad+0x1c4>)
    83e2:	e01f      	b.n	8424 <_sercom_get_default_pad+0x168>
    83e4:	4b27      	ldr	r3, [pc, #156]	; (8484 <_sercom_get_default_pad+0x1c8>)
    83e6:	e01d      	b.n	8424 <_sercom_get_default_pad+0x168>
    83e8:	4b27      	ldr	r3, [pc, #156]	; (8488 <_sercom_get_default_pad+0x1cc>)
    83ea:	e01b      	b.n	8424 <_sercom_get_default_pad+0x168>
    83ec:	4b27      	ldr	r3, [pc, #156]	; (848c <_sercom_get_default_pad+0x1d0>)
    83ee:	e019      	b.n	8424 <_sercom_get_default_pad+0x168>
    83f0:	1cfb      	adds	r3, r7, #3
    83f2:	781b      	ldrb	r3, [r3, #0]
    83f4:	2b03      	cmp	r3, #3
    83f6:	d813      	bhi.n	8420 <_sercom_get_default_pad+0x164>
    83f8:	0018      	movs	r0, r3
    83fa:	f008 f949 	bl	10690 <__gnu_thumb1_case_si>
    83fe:	46c0      	nop			; (mov r8, r8)
    8400:	00000010 	.word	0x00000010
    8404:	00000014 	.word	0x00000014
    8408:	00000018 	.word	0x00000018
    840c:	0000001c 	.word	0x0000001c
    8410:	4b1f      	ldr	r3, [pc, #124]	; (8490 <_sercom_get_default_pad+0x1d4>)
    8412:	e007      	b.n	8424 <_sercom_get_default_pad+0x168>
    8414:	4b1f      	ldr	r3, [pc, #124]	; (8494 <_sercom_get_default_pad+0x1d8>)
    8416:	e005      	b.n	8424 <_sercom_get_default_pad+0x168>
    8418:	4b1f      	ldr	r3, [pc, #124]	; (8498 <_sercom_get_default_pad+0x1dc>)
    841a:	e003      	b.n	8424 <_sercom_get_default_pad+0x168>
    841c:	4b1f      	ldr	r3, [pc, #124]	; (849c <_sercom_get_default_pad+0x1e0>)
    841e:	e001      	b.n	8424 <_sercom_get_default_pad+0x168>
    8420:	46c0      	nop			; (mov r8, r8)
    8422:	2300      	movs	r3, #0
    8424:	0018      	movs	r0, r3
    8426:	46bd      	mov	sp, r7
    8428:	b002      	add	sp, #8
    842a:	bd80      	pop	{r7, pc}
    842c:	42001000 	.word	0x42001000
    8430:	42000800 	.word	0x42000800
    8434:	42000c00 	.word	0x42000c00
    8438:	42001800 	.word	0x42001800
    843c:	42001c00 	.word	0x42001c00
    8440:	42001400 	.word	0x42001400
    8444:	00040003 	.word	0x00040003
    8448:	00050003 	.word	0x00050003
    844c:	00060003 	.word	0x00060003
    8450:	00070003 	.word	0x00070003
    8454:	00010003 	.word	0x00010003
    8458:	001e0003 	.word	0x001e0003
    845c:	001f0003 	.word	0x001f0003
    8460:	00080003 	.word	0x00080003
    8464:	00090003 	.word	0x00090003
    8468:	000a0003 	.word	0x000a0003
    846c:	000b0003 	.word	0x000b0003
    8470:	00100003 	.word	0x00100003
    8474:	00110003 	.word	0x00110003
    8478:	00120003 	.word	0x00120003
    847c:	00130003 	.word	0x00130003
    8480:	000c0003 	.word	0x000c0003
    8484:	000d0003 	.word	0x000d0003
    8488:	000e0003 	.word	0x000e0003
    848c:	000f0003 	.word	0x000f0003
    8490:	00160003 	.word	0x00160003
    8494:	00170003 	.word	0x00170003
    8498:	00180003 	.word	0x00180003
    849c:	00190003 	.word	0x00190003

000084a0 <_sercom_get_sercom_inst_index>:
    84a0:	b590      	push	{r4, r7, lr}
    84a2:	b08b      	sub	sp, #44	; 0x2c
    84a4:	af00      	add	r7, sp, #0
    84a6:	6078      	str	r0, [r7, #4]
    84a8:	230c      	movs	r3, #12
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	4a0f      	ldr	r2, [pc, #60]	; (84ec <_sercom_get_sercom_inst_index+0x4c>)
    84ae:	447a      	add	r2, pc
    84b0:	ca13      	ldmia	r2!, {r0, r1, r4}
    84b2:	c313      	stmia	r3!, {r0, r1, r4}
    84b4:	ca13      	ldmia	r2!, {r0, r1, r4}
    84b6:	c313      	stmia	r3!, {r0, r1, r4}
    84b8:	2300      	movs	r3, #0
    84ba:	627b      	str	r3, [r7, #36]	; 0x24
    84bc:	e00e      	b.n	84dc <_sercom_get_sercom_inst_index+0x3c>
    84be:	230c      	movs	r3, #12
    84c0:	18fb      	adds	r3, r7, r3
    84c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    84c4:	0092      	lsls	r2, r2, #2
    84c6:	58d3      	ldr	r3, [r2, r3]
    84c8:	001a      	movs	r2, r3
    84ca:	687b      	ldr	r3, [r7, #4]
    84cc:	429a      	cmp	r2, r3
    84ce:	d102      	bne.n	84d6 <_sercom_get_sercom_inst_index+0x36>
    84d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84d2:	b2db      	uxtb	r3, r3
    84d4:	e006      	b.n	84e4 <_sercom_get_sercom_inst_index+0x44>
    84d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84d8:	3301      	adds	r3, #1
    84da:	627b      	str	r3, [r7, #36]	; 0x24
    84dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84de:	2b05      	cmp	r3, #5
    84e0:	d9ed      	bls.n	84be <_sercom_get_sercom_inst_index+0x1e>
    84e2:	2300      	movs	r3, #0
    84e4:	0018      	movs	r0, r3
    84e6:	46bd      	mov	sp, r7
    84e8:	b00b      	add	sp, #44	; 0x2c
    84ea:	bd90      	pop	{r4, r7, pc}
    84ec:	0000982a 	.word	0x0000982a

000084f0 <system_pinmux_get_config_defaults>:
    84f0:	b580      	push	{r7, lr}
    84f2:	b082      	sub	sp, #8
    84f4:	af00      	add	r7, sp, #0
    84f6:	6078      	str	r0, [r7, #4]
    84f8:	687b      	ldr	r3, [r7, #4]
    84fa:	2280      	movs	r2, #128	; 0x80
    84fc:	701a      	strb	r2, [r3, #0]
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	2200      	movs	r2, #0
    8502:	705a      	strb	r2, [r3, #1]
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	2201      	movs	r2, #1
    8508:	709a      	strb	r2, [r3, #2]
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	2200      	movs	r2, #0
    850e:	70da      	strb	r2, [r3, #3]
    8510:	46c0      	nop			; (mov r8, r8)
    8512:	46bd      	mov	sp, r7
    8514:	b002      	add	sp, #8
    8516:	bd80      	pop	{r7, pc}

00008518 <system_pinmux_get_group_from_gpio_pin>:
    8518:	b580      	push	{r7, lr}
    851a:	b084      	sub	sp, #16
    851c:	af00      	add	r7, sp, #0
    851e:	0002      	movs	r2, r0
    8520:	1dfb      	adds	r3, r7, #7
    8522:	701a      	strb	r2, [r3, #0]
    8524:	230f      	movs	r3, #15
    8526:	18fb      	adds	r3, r7, r3
    8528:	1dfa      	adds	r2, r7, #7
    852a:	7812      	ldrb	r2, [r2, #0]
    852c:	09d2      	lsrs	r2, r2, #7
    852e:	701a      	strb	r2, [r3, #0]
    8530:	230e      	movs	r3, #14
    8532:	18fb      	adds	r3, r7, r3
    8534:	1dfa      	adds	r2, r7, #7
    8536:	7812      	ldrb	r2, [r2, #0]
    8538:	0952      	lsrs	r2, r2, #5
    853a:	701a      	strb	r2, [r3, #0]
    853c:	4b0d      	ldr	r3, [pc, #52]	; (8574 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    853e:	60bb      	str	r3, [r7, #8]
    8540:	230f      	movs	r3, #15
    8542:	18fb      	adds	r3, r7, r3
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	2b00      	cmp	r3, #0
    8548:	d10f      	bne.n	856a <system_pinmux_get_group_from_gpio_pin+0x52>
    854a:	230f      	movs	r3, #15
    854c:	18fb      	adds	r3, r7, r3
    854e:	781b      	ldrb	r3, [r3, #0]
    8550:	009b      	lsls	r3, r3, #2
    8552:	2210      	movs	r2, #16
    8554:	4694      	mov	ip, r2
    8556:	44bc      	add	ip, r7
    8558:	4463      	add	r3, ip
    855a:	3b08      	subs	r3, #8
    855c:	681a      	ldr	r2, [r3, #0]
    855e:	230e      	movs	r3, #14
    8560:	18fb      	adds	r3, r7, r3
    8562:	781b      	ldrb	r3, [r3, #0]
    8564:	01db      	lsls	r3, r3, #7
    8566:	18d3      	adds	r3, r2, r3
    8568:	e000      	b.n	856c <system_pinmux_get_group_from_gpio_pin+0x54>
    856a:	2300      	movs	r3, #0
    856c:	0018      	movs	r0, r3
    856e:	46bd      	mov	sp, r7
    8570:	b004      	add	sp, #16
    8572:	bd80      	pop	{r7, pc}
    8574:	41004400 	.word	0x41004400

00008578 <port_get_group_from_gpio_pin>:
    8578:	b580      	push	{r7, lr}
    857a:	b082      	sub	sp, #8
    857c:	af00      	add	r7, sp, #0
    857e:	0002      	movs	r2, r0
    8580:	1dfb      	adds	r3, r7, #7
    8582:	701a      	strb	r2, [r3, #0]
    8584:	1dfb      	adds	r3, r7, #7
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	0018      	movs	r0, r3
    858a:	4b04      	ldr	r3, [pc, #16]	; (859c <port_get_group_from_gpio_pin+0x24>)
    858c:	447b      	add	r3, pc
    858e:	4798      	blx	r3
    8590:	0003      	movs	r3, r0
    8592:	0018      	movs	r0, r3
    8594:	46bd      	mov	sp, r7
    8596:	b002      	add	sp, #8
    8598:	bd80      	pop	{r7, pc}
    859a:	46c0      	nop			; (mov r8, r8)
    859c:	ffffff89 	.word	0xffffff89

000085a0 <port_pin_set_output_level>:
    85a0:	b580      	push	{r7, lr}
    85a2:	b084      	sub	sp, #16
    85a4:	af00      	add	r7, sp, #0
    85a6:	0002      	movs	r2, r0
    85a8:	1dfb      	adds	r3, r7, #7
    85aa:	701a      	strb	r2, [r3, #0]
    85ac:	1dbb      	adds	r3, r7, #6
    85ae:	1c0a      	adds	r2, r1, #0
    85b0:	701a      	strb	r2, [r3, #0]
    85b2:	1dfb      	adds	r3, r7, #7
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	0018      	movs	r0, r3
    85b8:	4b0d      	ldr	r3, [pc, #52]	; (85f0 <port_pin_set_output_level+0x50>)
    85ba:	447b      	add	r3, pc
    85bc:	4798      	blx	r3
    85be:	0003      	movs	r3, r0
    85c0:	60fb      	str	r3, [r7, #12]
    85c2:	1dfb      	adds	r3, r7, #7
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	221f      	movs	r2, #31
    85c8:	4013      	ands	r3, r2
    85ca:	2201      	movs	r2, #1
    85cc:	409a      	lsls	r2, r3
    85ce:	0013      	movs	r3, r2
    85d0:	60bb      	str	r3, [r7, #8]
    85d2:	1dbb      	adds	r3, r7, #6
    85d4:	781b      	ldrb	r3, [r3, #0]
    85d6:	2b00      	cmp	r3, #0
    85d8:	d003      	beq.n	85e2 <port_pin_set_output_level+0x42>
    85da:	68fb      	ldr	r3, [r7, #12]
    85dc:	68ba      	ldr	r2, [r7, #8]
    85de:	619a      	str	r2, [r3, #24]
    85e0:	e002      	b.n	85e8 <port_pin_set_output_level+0x48>
    85e2:	68fb      	ldr	r3, [r7, #12]
    85e4:	68ba      	ldr	r2, [r7, #8]
    85e6:	615a      	str	r2, [r3, #20]
    85e8:	46c0      	nop			; (mov r8, r8)
    85ea:	46bd      	mov	sp, r7
    85ec:	b004      	add	sp, #16
    85ee:	bd80      	pop	{r7, pc}
    85f0:	ffffffbb 	.word	0xffffffbb

000085f4 <system_gclk_chan_get_config_defaults>:
    85f4:	b580      	push	{r7, lr}
    85f6:	b082      	sub	sp, #8
    85f8:	af00      	add	r7, sp, #0
    85fa:	6078      	str	r0, [r7, #4]
    85fc:	687b      	ldr	r3, [r7, #4]
    85fe:	2200      	movs	r2, #0
    8600:	701a      	strb	r2, [r3, #0]
    8602:	46c0      	nop			; (mov r8, r8)
    8604:	46bd      	mov	sp, r7
    8606:	b002      	add	sp, #8
    8608:	bd80      	pop	{r7, pc}
	...

0000860c <system_apb_clock_set_mask>:
    860c:	b580      	push	{r7, lr}
    860e:	b082      	sub	sp, #8
    8610:	af00      	add	r7, sp, #0
    8612:	0002      	movs	r2, r0
    8614:	6039      	str	r1, [r7, #0]
    8616:	1dfb      	adds	r3, r7, #7
    8618:	701a      	strb	r2, [r3, #0]
    861a:	1dfb      	adds	r3, r7, #7
    861c:	781b      	ldrb	r3, [r3, #0]
    861e:	2b01      	cmp	r3, #1
    8620:	d00a      	beq.n	8638 <system_apb_clock_set_mask+0x2c>
    8622:	2b02      	cmp	r3, #2
    8624:	d00f      	beq.n	8646 <system_apb_clock_set_mask+0x3a>
    8626:	2b00      	cmp	r3, #0
    8628:	d114      	bne.n	8654 <system_apb_clock_set_mask+0x48>
    862a:	4b0e      	ldr	r3, [pc, #56]	; (8664 <system_apb_clock_set_mask+0x58>)
    862c:	4a0d      	ldr	r2, [pc, #52]	; (8664 <system_apb_clock_set_mask+0x58>)
    862e:	6991      	ldr	r1, [r2, #24]
    8630:	683a      	ldr	r2, [r7, #0]
    8632:	430a      	orrs	r2, r1
    8634:	619a      	str	r2, [r3, #24]
    8636:	e00f      	b.n	8658 <system_apb_clock_set_mask+0x4c>
    8638:	4b0a      	ldr	r3, [pc, #40]	; (8664 <system_apb_clock_set_mask+0x58>)
    863a:	4a0a      	ldr	r2, [pc, #40]	; (8664 <system_apb_clock_set_mask+0x58>)
    863c:	69d1      	ldr	r1, [r2, #28]
    863e:	683a      	ldr	r2, [r7, #0]
    8640:	430a      	orrs	r2, r1
    8642:	61da      	str	r2, [r3, #28]
    8644:	e008      	b.n	8658 <system_apb_clock_set_mask+0x4c>
    8646:	4b07      	ldr	r3, [pc, #28]	; (8664 <system_apb_clock_set_mask+0x58>)
    8648:	4a06      	ldr	r2, [pc, #24]	; (8664 <system_apb_clock_set_mask+0x58>)
    864a:	6a11      	ldr	r1, [r2, #32]
    864c:	683a      	ldr	r2, [r7, #0]
    864e:	430a      	orrs	r2, r1
    8650:	621a      	str	r2, [r3, #32]
    8652:	e001      	b.n	8658 <system_apb_clock_set_mask+0x4c>
    8654:	2317      	movs	r3, #23
    8656:	e000      	b.n	865a <system_apb_clock_set_mask+0x4e>
    8658:	2300      	movs	r3, #0
    865a:	0018      	movs	r0, r3
    865c:	46bd      	mov	sp, r7
    865e:	b002      	add	sp, #8
    8660:	bd80      	pop	{r7, pc}
    8662:	46c0      	nop			; (mov r8, r8)
    8664:	40000400 	.word	0x40000400

00008668 <system_is_debugger_present>:
    8668:	b580      	push	{r7, lr}
    866a:	af00      	add	r7, sp, #0
    866c:	4b05      	ldr	r3, [pc, #20]	; (8684 <system_is_debugger_present+0x1c>)
    866e:	789b      	ldrb	r3, [r3, #2]
    8670:	b2db      	uxtb	r3, r3
    8672:	001a      	movs	r2, r3
    8674:	2302      	movs	r3, #2
    8676:	4013      	ands	r3, r2
    8678:	1e5a      	subs	r2, r3, #1
    867a:	4193      	sbcs	r3, r2
    867c:	b2db      	uxtb	r3, r3
    867e:	0018      	movs	r0, r3
    8680:	46bd      	mov	sp, r7
    8682:	bd80      	pop	{r7, pc}
    8684:	41002000 	.word	0x41002000

00008688 <system_interrupt_enable>:
    8688:	b580      	push	{r7, lr}
    868a:	b082      	sub	sp, #8
    868c:	af00      	add	r7, sp, #0
    868e:	0002      	movs	r2, r0
    8690:	1dfb      	adds	r3, r7, #7
    8692:	701a      	strb	r2, [r3, #0]
    8694:	4b06      	ldr	r3, [pc, #24]	; (86b0 <system_interrupt_enable+0x28>)
    8696:	1dfa      	adds	r2, r7, #7
    8698:	7812      	ldrb	r2, [r2, #0]
    869a:	0011      	movs	r1, r2
    869c:	221f      	movs	r2, #31
    869e:	400a      	ands	r2, r1
    86a0:	2101      	movs	r1, #1
    86a2:	4091      	lsls	r1, r2
    86a4:	000a      	movs	r2, r1
    86a6:	601a      	str	r2, [r3, #0]
    86a8:	46c0      	nop			; (mov r8, r8)
    86aa:	46bd      	mov	sp, r7
    86ac:	b002      	add	sp, #8
    86ae:	bd80      	pop	{r7, pc}
    86b0:	e000e100 	.word	0xe000e100

000086b4 <system_interrupt_disable>:
    86b4:	b580      	push	{r7, lr}
    86b6:	b082      	sub	sp, #8
    86b8:	af00      	add	r7, sp, #0
    86ba:	0002      	movs	r2, r0
    86bc:	1dfb      	adds	r3, r7, #7
    86be:	701a      	strb	r2, [r3, #0]
    86c0:	4a07      	ldr	r2, [pc, #28]	; (86e0 <system_interrupt_disable+0x2c>)
    86c2:	1dfb      	adds	r3, r7, #7
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	0019      	movs	r1, r3
    86c8:	231f      	movs	r3, #31
    86ca:	400b      	ands	r3, r1
    86cc:	2101      	movs	r1, #1
    86ce:	4099      	lsls	r1, r3
    86d0:	000b      	movs	r3, r1
    86d2:	0019      	movs	r1, r3
    86d4:	2380      	movs	r3, #128	; 0x80
    86d6:	50d1      	str	r1, [r2, r3]
    86d8:	46c0      	nop			; (mov r8, r8)
    86da:	46bd      	mov	sp, r7
    86dc:	b002      	add	sp, #8
    86de:	bd80      	pop	{r7, pc}
    86e0:	e000e100 	.word	0xe000e100

000086e4 <spi_is_syncing>:
    86e4:	b580      	push	{r7, lr}
    86e6:	b084      	sub	sp, #16
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	681b      	ldr	r3, [r3, #0]
    86f0:	60fb      	str	r3, [r7, #12]
    86f2:	68fb      	ldr	r3, [r7, #12]
    86f4:	69db      	ldr	r3, [r3, #28]
    86f6:	1e5a      	subs	r2, r3, #1
    86f8:	4193      	sbcs	r3, r2
    86fa:	b2db      	uxtb	r3, r3
    86fc:	0018      	movs	r0, r3
    86fe:	46bd      	mov	sp, r7
    8700:	b004      	add	sp, #16
    8702:	bd80      	pop	{r7, pc}

00008704 <spi_enable>:
    8704:	b580      	push	{r7, lr}
    8706:	b084      	sub	sp, #16
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	4a10      	ldr	r2, [pc, #64]	; (8750 <spi_enable+0x4c>)
    870e:	447a      	add	r2, pc
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	681b      	ldr	r3, [r3, #0]
    8714:	60fb      	str	r3, [r7, #12]
    8716:	687b      	ldr	r3, [r7, #4]
    8718:	681b      	ldr	r3, [r3, #0]
    871a:	0018      	movs	r0, r3
    871c:	4b0d      	ldr	r3, [pc, #52]	; (8754 <spi_enable+0x50>)
    871e:	58d3      	ldr	r3, [r2, r3]
    8720:	4798      	blx	r3
    8722:	0003      	movs	r3, r0
    8724:	0018      	movs	r0, r3
    8726:	4b0c      	ldr	r3, [pc, #48]	; (8758 <spi_enable+0x54>)
    8728:	447b      	add	r3, pc
    872a:	4798      	blx	r3
    872c:	46c0      	nop			; (mov r8, r8)
    872e:	687b      	ldr	r3, [r7, #4]
    8730:	0018      	movs	r0, r3
    8732:	4b0a      	ldr	r3, [pc, #40]	; (875c <spi_enable+0x58>)
    8734:	447b      	add	r3, pc
    8736:	4798      	blx	r3
    8738:	1e03      	subs	r3, r0, #0
    873a:	d1f8      	bne.n	872e <spi_enable+0x2a>
    873c:	68fb      	ldr	r3, [r7, #12]
    873e:	681b      	ldr	r3, [r3, #0]
    8740:	2202      	movs	r2, #2
    8742:	431a      	orrs	r2, r3
    8744:	68fb      	ldr	r3, [r7, #12]
    8746:	601a      	str	r2, [r3, #0]
    8748:	46c0      	nop			; (mov r8, r8)
    874a:	46bd      	mov	sp, r7
    874c:	b004      	add	sp, #16
    874e:	bd80      	pop	{r7, pc}
    8750:	000096d2 	.word	0x000096d2
    8754:	000000a8 	.word	0x000000a8
    8758:	ffffff5d 	.word	0xffffff5d
    875c:	ffffffad 	.word	0xffffffad

00008760 <spi_disable>:
    8760:	b580      	push	{r7, lr}
    8762:	b084      	sub	sp, #16
    8764:	af00      	add	r7, sp, #0
    8766:	6078      	str	r0, [r7, #4]
    8768:	4a14      	ldr	r2, [pc, #80]	; (87bc <spi_disable+0x5c>)
    876a:	447a      	add	r2, pc
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	681b      	ldr	r3, [r3, #0]
    8770:	60fb      	str	r3, [r7, #12]
    8772:	687b      	ldr	r3, [r7, #4]
    8774:	681b      	ldr	r3, [r3, #0]
    8776:	0018      	movs	r0, r3
    8778:	4b11      	ldr	r3, [pc, #68]	; (87c0 <spi_disable+0x60>)
    877a:	58d3      	ldr	r3, [r2, r3]
    877c:	4798      	blx	r3
    877e:	0003      	movs	r3, r0
    8780:	0018      	movs	r0, r3
    8782:	4b10      	ldr	r3, [pc, #64]	; (87c4 <spi_disable+0x64>)
    8784:	447b      	add	r3, pc
    8786:	4798      	blx	r3
    8788:	46c0      	nop			; (mov r8, r8)
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	0018      	movs	r0, r3
    878e:	4b0e      	ldr	r3, [pc, #56]	; (87c8 <spi_disable+0x68>)
    8790:	447b      	add	r3, pc
    8792:	4798      	blx	r3
    8794:	1e03      	subs	r3, r0, #0
    8796:	d1f8      	bne.n	878a <spi_disable+0x2a>
    8798:	68fb      	ldr	r3, [r7, #12]
    879a:	228f      	movs	r2, #143	; 0x8f
    879c:	751a      	strb	r2, [r3, #20]
    879e:	68fb      	ldr	r3, [r7, #12]
    87a0:	228f      	movs	r2, #143	; 0x8f
    87a2:	761a      	strb	r2, [r3, #24]
    87a4:	68fb      	ldr	r3, [r7, #12]
    87a6:	681b      	ldr	r3, [r3, #0]
    87a8:	2202      	movs	r2, #2
    87aa:	4393      	bics	r3, r2
    87ac:	001a      	movs	r2, r3
    87ae:	68fb      	ldr	r3, [r7, #12]
    87b0:	601a      	str	r2, [r3, #0]
    87b2:	46c0      	nop			; (mov r8, r8)
    87b4:	46bd      	mov	sp, r7
    87b6:	b004      	add	sp, #16
    87b8:	bd80      	pop	{r7, pc}
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	00009676 	.word	0x00009676
    87c0:	000000a8 	.word	0x000000a8
    87c4:	ffffff2d 	.word	0xffffff2d
    87c8:	ffffff51 	.word	0xffffff51

000087cc <spi_is_write_complete>:
    87cc:	b580      	push	{r7, lr}
    87ce:	b084      	sub	sp, #16
    87d0:	af00      	add	r7, sp, #0
    87d2:	6078      	str	r0, [r7, #4]
    87d4:	687b      	ldr	r3, [r7, #4]
    87d6:	681b      	ldr	r3, [r3, #0]
    87d8:	60fb      	str	r3, [r7, #12]
    87da:	68fb      	ldr	r3, [r7, #12]
    87dc:	7e1b      	ldrb	r3, [r3, #24]
    87de:	b2db      	uxtb	r3, r3
    87e0:	001a      	movs	r2, r3
    87e2:	2302      	movs	r3, #2
    87e4:	4013      	ands	r3, r2
    87e6:	1e5a      	subs	r2, r3, #1
    87e8:	4193      	sbcs	r3, r2
    87ea:	b2db      	uxtb	r3, r3
    87ec:	0018      	movs	r0, r3
    87ee:	46bd      	mov	sp, r7
    87f0:	b004      	add	sp, #16
    87f2:	bd80      	pop	{r7, pc}

000087f4 <spi_is_ready_to_write>:
    87f4:	b580      	push	{r7, lr}
    87f6:	b084      	sub	sp, #16
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
    87fc:	687b      	ldr	r3, [r7, #4]
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	60fb      	str	r3, [r7, #12]
    8802:	68fb      	ldr	r3, [r7, #12]
    8804:	7e1b      	ldrb	r3, [r3, #24]
    8806:	b2db      	uxtb	r3, r3
    8808:	001a      	movs	r2, r3
    880a:	2301      	movs	r3, #1
    880c:	4013      	ands	r3, r2
    880e:	1e5a      	subs	r2, r3, #1
    8810:	4193      	sbcs	r3, r2
    8812:	b2db      	uxtb	r3, r3
    8814:	0018      	movs	r0, r3
    8816:	46bd      	mov	sp, r7
    8818:	b004      	add	sp, #16
    881a:	bd80      	pop	{r7, pc}

0000881c <spi_is_ready_to_read>:
    881c:	b580      	push	{r7, lr}
    881e:	b084      	sub	sp, #16
    8820:	af00      	add	r7, sp, #0
    8822:	6078      	str	r0, [r7, #4]
    8824:	687b      	ldr	r3, [r7, #4]
    8826:	681b      	ldr	r3, [r3, #0]
    8828:	60fb      	str	r3, [r7, #12]
    882a:	68fb      	ldr	r3, [r7, #12]
    882c:	7e1b      	ldrb	r3, [r3, #24]
    882e:	b2db      	uxtb	r3, r3
    8830:	001a      	movs	r2, r3
    8832:	2304      	movs	r3, #4
    8834:	4013      	ands	r3, r2
    8836:	1e5a      	subs	r2, r3, #1
    8838:	4193      	sbcs	r3, r2
    883a:	b2db      	uxtb	r3, r3
    883c:	0018      	movs	r0, r3
    883e:	46bd      	mov	sp, r7
    8840:	b004      	add	sp, #16
    8842:	bd80      	pop	{r7, pc}

00008844 <spi_write>:
    8844:	b580      	push	{r7, lr}
    8846:	b084      	sub	sp, #16
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
    884c:	000a      	movs	r2, r1
    884e:	1cbb      	adds	r3, r7, #2
    8850:	801a      	strh	r2, [r3, #0]
    8852:	687b      	ldr	r3, [r7, #4]
    8854:	681b      	ldr	r3, [r3, #0]
    8856:	60fb      	str	r3, [r7, #12]
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	0018      	movs	r0, r3
    885c:	4b0b      	ldr	r3, [pc, #44]	; (888c <spi_write+0x48>)
    885e:	447b      	add	r3, pc
    8860:	4798      	blx	r3
    8862:	0003      	movs	r3, r0
    8864:	001a      	movs	r2, r3
    8866:	2301      	movs	r3, #1
    8868:	4053      	eors	r3, r2
    886a:	b2db      	uxtb	r3, r3
    886c:	2b00      	cmp	r3, #0
    886e:	d001      	beq.n	8874 <spi_write+0x30>
    8870:	2305      	movs	r3, #5
    8872:	e006      	b.n	8882 <spi_write+0x3e>
    8874:	1cbb      	adds	r3, r7, #2
    8876:	881b      	ldrh	r3, [r3, #0]
    8878:	05db      	lsls	r3, r3, #23
    887a:	0dda      	lsrs	r2, r3, #23
    887c:	68fb      	ldr	r3, [r7, #12]
    887e:	629a      	str	r2, [r3, #40]	; 0x28
    8880:	2300      	movs	r3, #0
    8882:	0018      	movs	r0, r3
    8884:	46bd      	mov	sp, r7
    8886:	b004      	add	sp, #16
    8888:	bd80      	pop	{r7, pc}
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	ffffff93 	.word	0xffffff93

00008890 <spi_read>:
    8890:	b580      	push	{r7, lr}
    8892:	b084      	sub	sp, #16
    8894:	af00      	add	r7, sp, #0
    8896:	6078      	str	r0, [r7, #4]
    8898:	6039      	str	r1, [r7, #0]
    889a:	687b      	ldr	r3, [r7, #4]
    889c:	681b      	ldr	r3, [r3, #0]
    889e:	60bb      	str	r3, [r7, #8]
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	0018      	movs	r0, r3
    88a4:	4b1b      	ldr	r3, [pc, #108]	; (8914 <spi_read+0x84>)
    88a6:	447b      	add	r3, pc
    88a8:	4798      	blx	r3
    88aa:	0003      	movs	r3, r0
    88ac:	001a      	movs	r2, r3
    88ae:	2301      	movs	r3, #1
    88b0:	4053      	eors	r3, r2
    88b2:	b2db      	uxtb	r3, r3
    88b4:	2b00      	cmp	r3, #0
    88b6:	d001      	beq.n	88bc <spi_read+0x2c>
    88b8:	2310      	movs	r3, #16
    88ba:	e027      	b.n	890c <spi_read+0x7c>
    88bc:	230f      	movs	r3, #15
    88be:	18fb      	adds	r3, r7, r3
    88c0:	2200      	movs	r2, #0
    88c2:	701a      	strb	r2, [r3, #0]
    88c4:	68bb      	ldr	r3, [r7, #8]
    88c6:	8b5b      	ldrh	r3, [r3, #26]
    88c8:	b29b      	uxth	r3, r3
    88ca:	001a      	movs	r2, r3
    88cc:	2304      	movs	r3, #4
    88ce:	4013      	ands	r3, r2
    88d0:	d006      	beq.n	88e0 <spi_read+0x50>
    88d2:	230f      	movs	r3, #15
    88d4:	18fb      	adds	r3, r7, r3
    88d6:	221e      	movs	r2, #30
    88d8:	701a      	strb	r2, [r3, #0]
    88da:	68bb      	ldr	r3, [r7, #8]
    88dc:	2204      	movs	r2, #4
    88de:	835a      	strh	r2, [r3, #26]
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	799b      	ldrb	r3, [r3, #6]
    88e4:	2b01      	cmp	r3, #1
    88e6:	d108      	bne.n	88fa <spi_read+0x6a>
    88e8:	68bb      	ldr	r3, [r7, #8]
    88ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88ec:	b29b      	uxth	r3, r3
    88ee:	05db      	lsls	r3, r3, #23
    88f0:	0ddb      	lsrs	r3, r3, #23
    88f2:	b29a      	uxth	r2, r3
    88f4:	683b      	ldr	r3, [r7, #0]
    88f6:	801a      	strh	r2, [r3, #0]
    88f8:	e005      	b.n	8906 <spi_read+0x76>
    88fa:	68bb      	ldr	r3, [r7, #8]
    88fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88fe:	b2db      	uxtb	r3, r3
    8900:	b29a      	uxth	r2, r3
    8902:	683b      	ldr	r3, [r7, #0]
    8904:	801a      	strh	r2, [r3, #0]
    8906:	230f      	movs	r3, #15
    8908:	18fb      	adds	r3, r7, r3
    890a:	781b      	ldrb	r3, [r3, #0]
    890c:	0018      	movs	r0, r3
    890e:	46bd      	mov	sp, r7
    8910:	b004      	add	sp, #16
    8912:	bd80      	pop	{r7, pc}
    8914:	ffffff73 	.word	0xffffff73

00008918 <spi_reset>:
    8918:	b580      	push	{r7, lr}
    891a:	b084      	sub	sp, #16
    891c:	af00      	add	r7, sp, #0
    891e:	6078      	str	r0, [r7, #4]
    8920:	687b      	ldr	r3, [r7, #4]
    8922:	681b      	ldr	r3, [r3, #0]
    8924:	60fb      	str	r3, [r7, #12]
    8926:	687b      	ldr	r3, [r7, #4]
    8928:	0018      	movs	r0, r3
    892a:	4b0a      	ldr	r3, [pc, #40]	; (8954 <spi_reset+0x3c>)
    892c:	447b      	add	r3, pc
    892e:	4798      	blx	r3
    8930:	46c0      	nop			; (mov r8, r8)
    8932:	687b      	ldr	r3, [r7, #4]
    8934:	0018      	movs	r0, r3
    8936:	4b08      	ldr	r3, [pc, #32]	; (8958 <spi_reset+0x40>)
    8938:	447b      	add	r3, pc
    893a:	4798      	blx	r3
    893c:	1e03      	subs	r3, r0, #0
    893e:	d1f8      	bne.n	8932 <spi_reset+0x1a>
    8940:	68fb      	ldr	r3, [r7, #12]
    8942:	681b      	ldr	r3, [r3, #0]
    8944:	2201      	movs	r2, #1
    8946:	431a      	orrs	r2, r3
    8948:	68fb      	ldr	r3, [r7, #12]
    894a:	601a      	str	r2, [r3, #0]
    894c:	46c0      	nop			; (mov r8, r8)
    894e:	46bd      	mov	sp, r7
    8950:	b004      	add	sp, #16
    8952:	bd80      	pop	{r7, pc}
    8954:	fffffe31 	.word	0xfffffe31
    8958:	fffffda9 	.word	0xfffffda9

0000895c <spi_set_baudrate>:
    895c:	b5b0      	push	{r4, r5, r7, lr}
    895e:	b088      	sub	sp, #32
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
    8964:	6039      	str	r1, [r7, #0]
    8966:	4c2e      	ldr	r4, [pc, #184]	; (8a20 <spi_set_baudrate+0xc4>)
    8968:	447c      	add	r4, pc
    896a:	230c      	movs	r3, #12
    896c:	18fb      	adds	r3, r7, r3
    896e:	2200      	movs	r2, #0
    8970:	801a      	strh	r2, [r3, #0]
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	681b      	ldr	r3, [r3, #0]
    8976:	61fb      	str	r3, [r7, #28]
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	0018      	movs	r0, r3
    897c:	4b29      	ldr	r3, [pc, #164]	; (8a24 <spi_set_baudrate+0xc8>)
    897e:	447b      	add	r3, pc
    8980:	4798      	blx	r3
    8982:	46c0      	nop			; (mov r8, r8)
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	0018      	movs	r0, r3
    8988:	4b27      	ldr	r3, [pc, #156]	; (8a28 <spi_set_baudrate+0xcc>)
    898a:	447b      	add	r3, pc
    898c:	4798      	blx	r3
    898e:	1e03      	subs	r3, r0, #0
    8990:	d1f8      	bne.n	8984 <spi_set_baudrate+0x28>
    8992:	687b      	ldr	r3, [r7, #4]
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	0018      	movs	r0, r3
    8998:	4b24      	ldr	r3, [pc, #144]	; (8a2c <spi_set_baudrate+0xd0>)
    899a:	58e3      	ldr	r3, [r4, r3]
    899c:	4798      	blx	r3
    899e:	0003      	movs	r3, r0
    89a0:	61bb      	str	r3, [r7, #24]
    89a2:	69bb      	ldr	r3, [r7, #24]
    89a4:	3314      	adds	r3, #20
    89a6:	617b      	str	r3, [r7, #20]
    89a8:	697b      	ldr	r3, [r7, #20]
    89aa:	b2db      	uxtb	r3, r3
    89ac:	0018      	movs	r0, r3
    89ae:	4b20      	ldr	r3, [pc, #128]	; (8a30 <spi_set_baudrate+0xd4>)
    89b0:	58e3      	ldr	r3, [r4, r3]
    89b2:	4798      	blx	r3
    89b4:	0003      	movs	r3, r0
    89b6:	613b      	str	r3, [r7, #16]
    89b8:	230f      	movs	r3, #15
    89ba:	18fd      	adds	r5, r7, r3
    89bc:	230c      	movs	r3, #12
    89be:	18fa      	adds	r2, r7, r3
    89c0:	6939      	ldr	r1, [r7, #16]
    89c2:	683b      	ldr	r3, [r7, #0]
    89c4:	0018      	movs	r0, r3
    89c6:	4b1b      	ldr	r3, [pc, #108]	; (8a34 <spi_set_baudrate+0xd8>)
    89c8:	58e3      	ldr	r3, [r4, r3]
    89ca:	4798      	blx	r3
    89cc:	0003      	movs	r3, r0
    89ce:	702b      	strb	r3, [r5, #0]
    89d0:	230f      	movs	r3, #15
    89d2:	18fb      	adds	r3, r7, r3
    89d4:	781b      	ldrb	r3, [r3, #0]
    89d6:	2b00      	cmp	r3, #0
    89d8:	d001      	beq.n	89de <spi_set_baudrate+0x82>
    89da:	2317      	movs	r3, #23
    89dc:	e01b      	b.n	8a16 <spi_set_baudrate+0xba>
    89de:	230c      	movs	r3, #12
    89e0:	18fb      	adds	r3, r7, r3
    89e2:	881b      	ldrh	r3, [r3, #0]
    89e4:	b2da      	uxtb	r2, r3
    89e6:	69fb      	ldr	r3, [r7, #28]
    89e8:	731a      	strb	r2, [r3, #12]
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	0018      	movs	r0, r3
    89f0:	4b11      	ldr	r3, [pc, #68]	; (8a38 <spi_set_baudrate+0xdc>)
    89f2:	447b      	add	r3, pc
    89f4:	4798      	blx	r3
    89f6:	1e03      	subs	r3, r0, #0
    89f8:	d1f8      	bne.n	89ec <spi_set_baudrate+0x90>
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	0018      	movs	r0, r3
    89fe:	4b0f      	ldr	r3, [pc, #60]	; (8a3c <spi_set_baudrate+0xe0>)
    8a00:	447b      	add	r3, pc
    8a02:	4798      	blx	r3
    8a04:	46c0      	nop			; (mov r8, r8)
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	0018      	movs	r0, r3
    8a0a:	4b0d      	ldr	r3, [pc, #52]	; (8a40 <spi_set_baudrate+0xe4>)
    8a0c:	447b      	add	r3, pc
    8a0e:	4798      	blx	r3
    8a10:	1e03      	subs	r3, r0, #0
    8a12:	d1f8      	bne.n	8a06 <spi_set_baudrate+0xaa>
    8a14:	2300      	movs	r3, #0
    8a16:	0018      	movs	r0, r3
    8a18:	46bd      	mov	sp, r7
    8a1a:	b008      	add	sp, #32
    8a1c:	bdb0      	pop	{r4, r5, r7, pc}
    8a1e:	46c0      	nop			; (mov r8, r8)
    8a20:	00009478 	.word	0x00009478
    8a24:	fffffddf 	.word	0xfffffddf
    8a28:	fffffd57 	.word	0xfffffd57
    8a2c:	000002b4 	.word	0x000002b4
    8a30:	000001a4 	.word	0x000001a4
    8a34:	00000108 	.word	0x00000108
    8a38:	fffffcef 	.word	0xfffffcef
    8a3c:	fffffd01 	.word	0xfffffd01
    8a40:	fffffcd5 	.word	0xfffffcd5

00008a44 <_spi_set_config>:
    8a44:	b5b0      	push	{r4, r5, r7, lr}
    8a46:	b092      	sub	sp, #72	; 0x48
    8a48:	af00      	add	r7, sp, #0
    8a4a:	6078      	str	r0, [r7, #4]
    8a4c:	6039      	str	r1, [r7, #0]
    8a4e:	4c7f      	ldr	r4, [pc, #508]	; (8c4c <_spi_set_config+0x208>)
    8a50:	447c      	add	r4, pc
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	681b      	ldr	r3, [r3, #0]
    8a56:	637b      	str	r3, [r7, #52]	; 0x34
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	681b      	ldr	r3, [r3, #0]
    8a5c:	633b      	str	r3, [r7, #48]	; 0x30
    8a5e:	231c      	movs	r3, #28
    8a60:	18fb      	adds	r3, r7, r3
    8a62:	0018      	movs	r0, r3
    8a64:	4b7a      	ldr	r3, [pc, #488]	; (8c50 <_spi_set_config+0x20c>)
    8a66:	447b      	add	r3, pc
    8a68:	4798      	blx	r3
    8a6a:	231c      	movs	r3, #28
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	2200      	movs	r2, #0
    8a70:	705a      	strb	r2, [r3, #1]
    8a72:	683b      	ldr	r3, [r7, #0]
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	2b00      	cmp	r3, #0
    8a78:	d103      	bne.n	8a82 <_spi_set_config+0x3e>
    8a7a:	231c      	movs	r3, #28
    8a7c:	18fb      	adds	r3, r7, r3
    8a7e:	2200      	movs	r2, #0
    8a80:	709a      	strb	r2, [r3, #2]
    8a82:	683b      	ldr	r3, [r7, #0]
    8a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a86:	230c      	movs	r3, #12
    8a88:	18fb      	adds	r3, r7, r3
    8a8a:	601a      	str	r2, [r3, #0]
    8a8c:	683b      	ldr	r3, [r7, #0]
    8a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8a90:	230c      	movs	r3, #12
    8a92:	18fb      	adds	r3, r7, r3
    8a94:	605a      	str	r2, [r3, #4]
    8a96:	683b      	ldr	r3, [r7, #0]
    8a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8a9a:	230c      	movs	r3, #12
    8a9c:	18fb      	adds	r3, r7, r3
    8a9e:	609a      	str	r2, [r3, #8]
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8aa4:	230c      	movs	r3, #12
    8aa6:	18fb      	adds	r3, r7, r3
    8aa8:	60da      	str	r2, [r3, #12]
    8aaa:	2347      	movs	r3, #71	; 0x47
    8aac:	18fb      	adds	r3, r7, r3
    8aae:	2200      	movs	r2, #0
    8ab0:	701a      	strb	r2, [r3, #0]
    8ab2:	e02e      	b.n	8b12 <_spi_set_config+0xce>
    8ab4:	2347      	movs	r3, #71	; 0x47
    8ab6:	18fb      	adds	r3, r7, r3
    8ab8:	781a      	ldrb	r2, [r3, #0]
    8aba:	230c      	movs	r3, #12
    8abc:	18fb      	adds	r3, r7, r3
    8abe:	0092      	lsls	r2, r2, #2
    8ac0:	58d3      	ldr	r3, [r2, r3]
    8ac2:	643b      	str	r3, [r7, #64]	; 0x40
    8ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d10a      	bne.n	8ae0 <_spi_set_config+0x9c>
    8aca:	2347      	movs	r3, #71	; 0x47
    8acc:	18fb      	adds	r3, r7, r3
    8ace:	781a      	ldrb	r2, [r3, #0]
    8ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8ad2:	0011      	movs	r1, r2
    8ad4:	0018      	movs	r0, r3
    8ad6:	4b5f      	ldr	r3, [pc, #380]	; (8c54 <_spi_set_config+0x210>)
    8ad8:	58e3      	ldr	r3, [r4, r3]
    8ada:	4798      	blx	r3
    8adc:	0003      	movs	r3, r0
    8ade:	643b      	str	r3, [r7, #64]	; 0x40
    8ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8ae2:	3301      	adds	r3, #1
    8ae4:	d00e      	beq.n	8b04 <_spi_set_config+0xc0>
    8ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8ae8:	b2da      	uxtb	r2, r3
    8aea:	231c      	movs	r3, #28
    8aec:	18fb      	adds	r3, r7, r3
    8aee:	701a      	strb	r2, [r3, #0]
    8af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8af2:	0c1b      	lsrs	r3, r3, #16
    8af4:	b2db      	uxtb	r3, r3
    8af6:	221c      	movs	r2, #28
    8af8:	18ba      	adds	r2, r7, r2
    8afa:	0011      	movs	r1, r2
    8afc:	0018      	movs	r0, r3
    8afe:	4b56      	ldr	r3, [pc, #344]	; (8c58 <_spi_set_config+0x214>)
    8b00:	58e3      	ldr	r3, [r4, r3]
    8b02:	4798      	blx	r3
    8b04:	2347      	movs	r3, #71	; 0x47
    8b06:	18fb      	adds	r3, r7, r3
    8b08:	781a      	ldrb	r2, [r3, #0]
    8b0a:	2347      	movs	r3, #71	; 0x47
    8b0c:	18fb      	adds	r3, r7, r3
    8b0e:	3201      	adds	r2, #1
    8b10:	701a      	strb	r2, [r3, #0]
    8b12:	2347      	movs	r3, #71	; 0x47
    8b14:	18fb      	adds	r3, r7, r3
    8b16:	781b      	ldrb	r3, [r3, #0]
    8b18:	2b03      	cmp	r3, #3
    8b1a:	d9cb      	bls.n	8ab4 <_spi_set_config+0x70>
    8b1c:	683b      	ldr	r3, [r7, #0]
    8b1e:	781a      	ldrb	r2, [r3, #0]
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	715a      	strb	r2, [r3, #5]
    8b24:	683b      	ldr	r3, [r7, #0]
    8b26:	7c1a      	ldrb	r2, [r3, #16]
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	719a      	strb	r2, [r3, #6]
    8b2c:	683b      	ldr	r3, [r7, #0]
    8b2e:	7c9a      	ldrb	r2, [r3, #18]
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	71da      	strb	r2, [r3, #7]
    8b34:	683b      	ldr	r3, [r7, #0]
    8b36:	7d1a      	ldrb	r2, [r3, #20]
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	721a      	strb	r2, [r3, #8]
    8b3c:	230a      	movs	r3, #10
    8b3e:	18fb      	adds	r3, r7, r3
    8b40:	2200      	movs	r2, #0
    8b42:	801a      	strh	r2, [r3, #0]
    8b44:	2300      	movs	r3, #0
    8b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    8b48:	2300      	movs	r3, #0
    8b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    8b4c:	683b      	ldr	r3, [r7, #0]
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	2b01      	cmp	r3, #1
    8b52:	d12c      	bne.n	8bae <_spi_set_config+0x16a>
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	681b      	ldr	r3, [r3, #0]
    8b58:	0018      	movs	r0, r3
    8b5a:	4b40      	ldr	r3, [pc, #256]	; (8c5c <_spi_set_config+0x218>)
    8b5c:	58e3      	ldr	r3, [r4, r3]
    8b5e:	4798      	blx	r3
    8b60:	0003      	movs	r3, r0
    8b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    8b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b66:	3314      	adds	r3, #20
    8b68:	62bb      	str	r3, [r7, #40]	; 0x28
    8b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8b6c:	b2db      	uxtb	r3, r3
    8b6e:	0018      	movs	r0, r3
    8b70:	4b3b      	ldr	r3, [pc, #236]	; (8c60 <_spi_set_config+0x21c>)
    8b72:	58e3      	ldr	r3, [r4, r3]
    8b74:	4798      	blx	r3
    8b76:	0003      	movs	r3, r0
    8b78:	627b      	str	r3, [r7, #36]	; 0x24
    8b7a:	683b      	ldr	r3, [r7, #0]
    8b7c:	699b      	ldr	r3, [r3, #24]
    8b7e:	2223      	movs	r2, #35	; 0x23
    8b80:	18bd      	adds	r5, r7, r2
    8b82:	220a      	movs	r2, #10
    8b84:	18ba      	adds	r2, r7, r2
    8b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8b88:	0018      	movs	r0, r3
    8b8a:	4b36      	ldr	r3, [pc, #216]	; (8c64 <_spi_set_config+0x220>)
    8b8c:	58e3      	ldr	r3, [r4, r3]
    8b8e:	4798      	blx	r3
    8b90:	0003      	movs	r3, r0
    8b92:	702b      	strb	r3, [r5, #0]
    8b94:	2323      	movs	r3, #35	; 0x23
    8b96:	18fb      	adds	r3, r7, r3
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d001      	beq.n	8ba2 <_spi_set_config+0x15e>
    8b9e:	2317      	movs	r3, #23
    8ba0:	e04f      	b.n	8c42 <_spi_set_config+0x1fe>
    8ba2:	230a      	movs	r3, #10
    8ba4:	18fb      	adds	r3, r7, r3
    8ba6:	881b      	ldrh	r3, [r3, #0]
    8ba8:	b2da      	uxtb	r2, r3
    8baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8bac:	731a      	strb	r2, [r3, #12]
    8bae:	683b      	ldr	r3, [r7, #0]
    8bb0:	685b      	ldr	r3, [r3, #4]
    8bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8bb4:	4313      	orrs	r3, r2
    8bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    8bb8:	683b      	ldr	r3, [r7, #0]
    8bba:	689b      	ldr	r3, [r3, #8]
    8bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8bbe:	4313      	orrs	r3, r2
    8bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    8bc2:	683b      	ldr	r3, [r7, #0]
    8bc4:	68db      	ldr	r3, [r3, #12]
    8bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8bc8:	4313      	orrs	r3, r2
    8bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    8bcc:	683b      	ldr	r3, [r7, #0]
    8bce:	7c1b      	ldrb	r3, [r3, #16]
    8bd0:	001a      	movs	r2, r3
    8bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8bd4:	4313      	orrs	r3, r2
    8bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    8bd8:	683b      	ldr	r3, [r7, #0]
    8bda:	7c5b      	ldrb	r3, [r3, #17]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d104      	bne.n	8bea <_spi_set_config+0x1a6>
    8be0:	4b21      	ldr	r3, [pc, #132]	; (8c68 <_spi_set_config+0x224>)
    8be2:	447b      	add	r3, pc
    8be4:	4798      	blx	r3
    8be6:	1e03      	subs	r3, r0, #0
    8be8:	d003      	beq.n	8bf2 <_spi_set_config+0x1ae>
    8bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8bec:	2280      	movs	r2, #128	; 0x80
    8bee:	4313      	orrs	r3, r2
    8bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    8bf2:	683b      	ldr	r3, [r7, #0]
    8bf4:	7c9b      	ldrb	r3, [r3, #18]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d004      	beq.n	8c04 <_spi_set_config+0x1c0>
    8bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8bfc:	2280      	movs	r2, #128	; 0x80
    8bfe:	0292      	lsls	r2, r2, #10
    8c00:	4313      	orrs	r3, r2
    8c02:	63bb      	str	r3, [r7, #56]	; 0x38
    8c04:	683b      	ldr	r3, [r7, #0]
    8c06:	7cdb      	ldrb	r3, [r3, #19]
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d004      	beq.n	8c16 <_spi_set_config+0x1d2>
    8c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c0e:	2280      	movs	r2, #128	; 0x80
    8c10:	0092      	lsls	r2, r2, #2
    8c12:	4313      	orrs	r3, r2
    8c14:	63bb      	str	r3, [r7, #56]	; 0x38
    8c16:	683b      	ldr	r3, [r7, #0]
    8c18:	7d1b      	ldrb	r3, [r3, #20]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d004      	beq.n	8c28 <_spi_set_config+0x1e4>
    8c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c20:	2280      	movs	r2, #128	; 0x80
    8c22:	0192      	lsls	r2, r2, #6
    8c24:	4313      	orrs	r3, r2
    8c26:	63bb      	str	r3, [r7, #56]	; 0x38
    8c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c2a:	681a      	ldr	r2, [r3, #0]
    8c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c2e:	431a      	orrs	r2, r3
    8c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c32:	601a      	str	r2, [r3, #0]
    8c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c36:	685a      	ldr	r2, [r3, #4]
    8c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8c3a:	431a      	orrs	r2, r3
    8c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c3e:	605a      	str	r2, [r3, #4]
    8c40:	2300      	movs	r3, #0
    8c42:	0018      	movs	r0, r3
    8c44:	46bd      	mov	sp, r7
    8c46:	b012      	add	sp, #72	; 0x48
    8c48:	bdb0      	pop	{r4, r5, r7, pc}
    8c4a:	46c0      	nop			; (mov r8, r8)
    8c4c:	00009390 	.word	0x00009390
    8c50:	fffffa87 	.word	0xfffffa87
    8c54:	000002cc 	.word	0x000002cc
    8c58:	000002b8 	.word	0x000002b8
    8c5c:	000002b4 	.word	0x000002b4
    8c60:	000001a4 	.word	0x000001a4
    8c64:	00000108 	.word	0x00000108
    8c68:	fffffa83 	.word	0xfffffa83

00008c6c <spi_init>:
    8c6c:	b5b0      	push	{r4, r5, r7, lr}
    8c6e:	b08a      	sub	sp, #40	; 0x28
    8c70:	af00      	add	r7, sp, #0
    8c72:	60f8      	str	r0, [r7, #12]
    8c74:	60b9      	str	r1, [r7, #8]
    8c76:	607a      	str	r2, [r7, #4]
    8c78:	4c5d      	ldr	r4, [pc, #372]	; (8df0 <spi_init+0x184>)
    8c7a:	447c      	add	r4, pc
    8c7c:	68fb      	ldr	r3, [r7, #12]
    8c7e:	68ba      	ldr	r2, [r7, #8]
    8c80:	601a      	str	r2, [r3, #0]
    8c82:	68fb      	ldr	r3, [r7, #12]
    8c84:	681b      	ldr	r3, [r3, #0]
    8c86:	623b      	str	r3, [r7, #32]
    8c88:	6a3b      	ldr	r3, [r7, #32]
    8c8a:	681b      	ldr	r3, [r3, #0]
    8c8c:	2202      	movs	r2, #2
    8c8e:	4013      	ands	r3, r2
    8c90:	d001      	beq.n	8c96 <spi_init+0x2a>
    8c92:	231c      	movs	r3, #28
    8c94:	e0a8      	b.n	8de8 <spi_init+0x17c>
    8c96:	6a3b      	ldr	r3, [r7, #32]
    8c98:	681b      	ldr	r3, [r3, #0]
    8c9a:	2201      	movs	r2, #1
    8c9c:	4013      	ands	r3, r2
    8c9e:	d001      	beq.n	8ca4 <spi_init+0x38>
    8ca0:	2305      	movs	r3, #5
    8ca2:	e0a1      	b.n	8de8 <spi_init+0x17c>
    8ca4:	68fb      	ldr	r3, [r7, #12]
    8ca6:	681b      	ldr	r3, [r3, #0]
    8ca8:	0018      	movs	r0, r3
    8caa:	4b52      	ldr	r3, [pc, #328]	; (8df4 <spi_init+0x188>)
    8cac:	58e3      	ldr	r3, [r4, r3]
    8cae:	4798      	blx	r3
    8cb0:	0003      	movs	r3, r0
    8cb2:	61fb      	str	r3, [r7, #28]
    8cb4:	69fb      	ldr	r3, [r7, #28]
    8cb6:	3302      	adds	r3, #2
    8cb8:	61bb      	str	r3, [r7, #24]
    8cba:	69fb      	ldr	r3, [r7, #28]
    8cbc:	3314      	adds	r3, #20
    8cbe:	617b      	str	r3, [r7, #20]
    8cc0:	2201      	movs	r2, #1
    8cc2:	69bb      	ldr	r3, [r7, #24]
    8cc4:	409a      	lsls	r2, r3
    8cc6:	0013      	movs	r3, r2
    8cc8:	0019      	movs	r1, r3
    8cca:	2002      	movs	r0, #2
    8ccc:	4b4a      	ldr	r3, [pc, #296]	; (8df8 <spi_init+0x18c>)
    8cce:	447b      	add	r3, pc
    8cd0:	4798      	blx	r3
    8cd2:	2310      	movs	r3, #16
    8cd4:	18fb      	adds	r3, r7, r3
    8cd6:	0018      	movs	r0, r3
    8cd8:	4b48      	ldr	r3, [pc, #288]	; (8dfc <spi_init+0x190>)
    8cda:	447b      	add	r3, pc
    8cdc:	4798      	blx	r3
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	2224      	movs	r2, #36	; 0x24
    8ce2:	5c9a      	ldrb	r2, [r3, r2]
    8ce4:	2310      	movs	r3, #16
    8ce6:	18fb      	adds	r3, r7, r3
    8ce8:	701a      	strb	r2, [r3, #0]
    8cea:	697b      	ldr	r3, [r7, #20]
    8cec:	b2db      	uxtb	r3, r3
    8cee:	2210      	movs	r2, #16
    8cf0:	18ba      	adds	r2, r7, r2
    8cf2:	0011      	movs	r1, r2
    8cf4:	0018      	movs	r0, r3
    8cf6:	4b42      	ldr	r3, [pc, #264]	; (8e00 <spi_init+0x194>)
    8cf8:	58e3      	ldr	r3, [r4, r3]
    8cfa:	4798      	blx	r3
    8cfc:	697b      	ldr	r3, [r7, #20]
    8cfe:	b2db      	uxtb	r3, r3
    8d00:	0018      	movs	r0, r3
    8d02:	4b40      	ldr	r3, [pc, #256]	; (8e04 <spi_init+0x198>)
    8d04:	58e3      	ldr	r3, [r4, r3]
    8d06:	4798      	blx	r3
    8d08:	687b      	ldr	r3, [r7, #4]
    8d0a:	2224      	movs	r2, #36	; 0x24
    8d0c:	5c9b      	ldrb	r3, [r3, r2]
    8d0e:	2100      	movs	r1, #0
    8d10:	0018      	movs	r0, r3
    8d12:	4b3d      	ldr	r3, [pc, #244]	; (8e08 <spi_init+0x19c>)
    8d14:	58e3      	ldr	r3, [r4, r3]
    8d16:	4798      	blx	r3
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	781b      	ldrb	r3, [r3, #0]
    8d1c:	2b01      	cmp	r3, #1
    8d1e:	d105      	bne.n	8d2c <spi_init+0xc0>
    8d20:	6a3b      	ldr	r3, [r7, #32]
    8d22:	681b      	ldr	r3, [r3, #0]
    8d24:	220c      	movs	r2, #12
    8d26:	431a      	orrs	r2, r3
    8d28:	6a3b      	ldr	r3, [r7, #32]
    8d2a:	601a      	str	r2, [r3, #0]
    8d2c:	2327      	movs	r3, #39	; 0x27
    8d2e:	18fb      	adds	r3, r7, r3
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
    8d34:	e010      	b.n	8d58 <spi_init+0xec>
    8d36:	2327      	movs	r3, #39	; 0x27
    8d38:	18fb      	adds	r3, r7, r3
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	68fa      	ldr	r2, [r7, #12]
    8d3e:	3302      	adds	r3, #2
    8d40:	009b      	lsls	r3, r3, #2
    8d42:	18d3      	adds	r3, r2, r3
    8d44:	3304      	adds	r3, #4
    8d46:	2200      	movs	r2, #0
    8d48:	601a      	str	r2, [r3, #0]
    8d4a:	2327      	movs	r3, #39	; 0x27
    8d4c:	18fb      	adds	r3, r7, r3
    8d4e:	781a      	ldrb	r2, [r3, #0]
    8d50:	2327      	movs	r3, #39	; 0x27
    8d52:	18fb      	adds	r3, r7, r3
    8d54:	3201      	adds	r2, #1
    8d56:	701a      	strb	r2, [r3, #0]
    8d58:	2327      	movs	r3, #39	; 0x27
    8d5a:	18fb      	adds	r3, r7, r3
    8d5c:	781b      	ldrb	r3, [r3, #0]
    8d5e:	2b06      	cmp	r3, #6
    8d60:	d9e9      	bls.n	8d36 <spi_init+0xca>
    8d62:	68fb      	ldr	r3, [r7, #12]
    8d64:	2200      	movs	r2, #0
    8d66:	62da      	str	r2, [r3, #44]	; 0x2c
    8d68:	68fb      	ldr	r3, [r7, #12]
    8d6a:	2200      	movs	r2, #0
    8d6c:	629a      	str	r2, [r3, #40]	; 0x28
    8d6e:	68fb      	ldr	r3, [r7, #12]
    8d70:	2200      	movs	r2, #0
    8d72:	869a      	strh	r2, [r3, #52]	; 0x34
    8d74:	68fb      	ldr	r3, [r7, #12]
    8d76:	2200      	movs	r2, #0
    8d78:	861a      	strh	r2, [r3, #48]	; 0x30
    8d7a:	68fb      	ldr	r3, [r7, #12]
    8d7c:	2236      	movs	r2, #54	; 0x36
    8d7e:	2100      	movs	r1, #0
    8d80:	5499      	strb	r1, [r3, r2]
    8d82:	68fb      	ldr	r3, [r7, #12]
    8d84:	2237      	movs	r2, #55	; 0x37
    8d86:	2100      	movs	r1, #0
    8d88:	5499      	strb	r1, [r3, r2]
    8d8a:	68fb      	ldr	r3, [r7, #12]
    8d8c:	2238      	movs	r2, #56	; 0x38
    8d8e:	2100      	movs	r1, #0
    8d90:	5499      	strb	r1, [r3, r2]
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	2203      	movs	r2, #3
    8d96:	725a      	strb	r2, [r3, #9]
    8d98:	68fb      	ldr	r3, [r7, #12]
    8d9a:	2200      	movs	r2, #0
    8d9c:	711a      	strb	r2, [r3, #4]
    8d9e:	68fb      	ldr	r3, [r7, #12]
    8da0:	681b      	ldr	r3, [r3, #0]
    8da2:	2213      	movs	r2, #19
    8da4:	18bd      	adds	r5, r7, r2
    8da6:	0018      	movs	r0, r3
    8da8:	4b12      	ldr	r3, [pc, #72]	; (8df4 <spi_init+0x188>)
    8daa:	58e3      	ldr	r3, [r4, r3]
    8dac:	4798      	blx	r3
    8dae:	0003      	movs	r3, r0
    8db0:	702b      	strb	r3, [r5, #0]
    8db2:	4b16      	ldr	r3, [pc, #88]	; (8e0c <spi_init+0x1a0>)
    8db4:	58e3      	ldr	r3, [r4, r3]
    8db6:	001a      	movs	r2, r3
    8db8:	2313      	movs	r3, #19
    8dba:	18fb      	adds	r3, r7, r3
    8dbc:	781b      	ldrb	r3, [r3, #0]
    8dbe:	0011      	movs	r1, r2
    8dc0:	0018      	movs	r0, r3
    8dc2:	4b13      	ldr	r3, [pc, #76]	; (8e10 <spi_init+0x1a4>)
    8dc4:	58e3      	ldr	r3, [r4, r3]
    8dc6:	4798      	blx	r3
    8dc8:	2313      	movs	r3, #19
    8dca:	18fb      	adds	r3, r7, r3
    8dcc:	781a      	ldrb	r2, [r3, #0]
    8dce:	4b11      	ldr	r3, [pc, #68]	; (8e14 <spi_init+0x1a8>)
    8dd0:	58e3      	ldr	r3, [r4, r3]
    8dd2:	0092      	lsls	r2, r2, #2
    8dd4:	68f9      	ldr	r1, [r7, #12]
    8dd6:	50d1      	str	r1, [r2, r3]
    8dd8:	687a      	ldr	r2, [r7, #4]
    8dda:	68fb      	ldr	r3, [r7, #12]
    8ddc:	0011      	movs	r1, r2
    8dde:	0018      	movs	r0, r3
    8de0:	4b0d      	ldr	r3, [pc, #52]	; (8e18 <spi_init+0x1ac>)
    8de2:	447b      	add	r3, pc
    8de4:	4798      	blx	r3
    8de6:	0003      	movs	r3, r0
    8de8:	0018      	movs	r0, r3
    8dea:	46bd      	mov	sp, r7
    8dec:	b00a      	add	sp, #40	; 0x28
    8dee:	bdb0      	pop	{r4, r5, r7, pc}
    8df0:	00009166 	.word	0x00009166
    8df4:	000002b4 	.word	0x000002b4
    8df8:	fffff93b 	.word	0xfffff93b
    8dfc:	fffff917 	.word	0xfffff917
    8e00:	000000b0 	.word	0x000000b0
    8e04:	00000238 	.word	0x00000238
    8e08:	00000230 	.word	0x00000230
    8e0c:	000000c4 	.word	0x000000c4
    8e10:	00000168 	.word	0x00000168
    8e14:	00000158 	.word	0x00000158
    8e18:	fffffc5f 	.word	0xfffffc5f

00008e1c <spi_read_buffer_wait>:
    8e1c:	b590      	push	{r4, r7, lr}
    8e1e:	b087      	sub	sp, #28
    8e20:	af00      	add	r7, sp, #0
    8e22:	60f8      	str	r0, [r7, #12]
    8e24:	60b9      	str	r1, [r7, #8]
    8e26:	0019      	movs	r1, r3
    8e28:	1dbb      	adds	r3, r7, #6
    8e2a:	801a      	strh	r2, [r3, #0]
    8e2c:	1d3b      	adds	r3, r7, #4
    8e2e:	1c0a      	adds	r2, r1, #0
    8e30:	801a      	strh	r2, [r3, #0]
    8e32:	68fb      	ldr	r3, [r7, #12]
    8e34:	2238      	movs	r2, #56	; 0x38
    8e36:	5c9b      	ldrb	r3, [r3, r2]
    8e38:	b2db      	uxtb	r3, r3
    8e3a:	2b05      	cmp	r3, #5
    8e3c:	d101      	bne.n	8e42 <spi_read_buffer_wait+0x26>
    8e3e:	2305      	movs	r3, #5
    8e40:	e07e      	b.n	8f40 <spi_read_buffer_wait+0x124>
    8e42:	1dbb      	adds	r3, r7, #6
    8e44:	881b      	ldrh	r3, [r3, #0]
    8e46:	2b00      	cmp	r3, #0
    8e48:	d101      	bne.n	8e4e <spi_read_buffer_wait+0x32>
    8e4a:	2317      	movs	r3, #23
    8e4c:	e078      	b.n	8f40 <spi_read_buffer_wait+0x124>
    8e4e:	68fb      	ldr	r3, [r7, #12]
    8e50:	79db      	ldrb	r3, [r3, #7]
    8e52:	2201      	movs	r2, #1
    8e54:	4053      	eors	r3, r2
    8e56:	b2db      	uxtb	r3, r3
    8e58:	2b00      	cmp	r3, #0
    8e5a:	d001      	beq.n	8e60 <spi_read_buffer_wait+0x44>
    8e5c:	231c      	movs	r3, #28
    8e5e:	e06f      	b.n	8f40 <spi_read_buffer_wait+0x124>
    8e60:	2316      	movs	r3, #22
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	2200      	movs	r2, #0
    8e66:	801a      	strh	r2, [r3, #0]
    8e68:	e062      	b.n	8f30 <spi_read_buffer_wait+0x114>
    8e6a:	68fb      	ldr	r3, [r7, #12]
    8e6c:	795b      	ldrb	r3, [r3, #5]
    8e6e:	2b01      	cmp	r3, #1
    8e70:	d114      	bne.n	8e9c <spi_read_buffer_wait+0x80>
    8e72:	46c0      	nop			; (mov r8, r8)
    8e74:	68fb      	ldr	r3, [r7, #12]
    8e76:	0018      	movs	r0, r3
    8e78:	4b33      	ldr	r3, [pc, #204]	; (8f48 <spi_read_buffer_wait+0x12c>)
    8e7a:	447b      	add	r3, pc
    8e7c:	4798      	blx	r3
    8e7e:	0003      	movs	r3, r0
    8e80:	001a      	movs	r2, r3
    8e82:	2301      	movs	r3, #1
    8e84:	4053      	eors	r3, r2
    8e86:	b2db      	uxtb	r3, r3
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d1f3      	bne.n	8e74 <spi_read_buffer_wait+0x58>
    8e8c:	1d3b      	adds	r3, r7, #4
    8e8e:	881a      	ldrh	r2, [r3, #0]
    8e90:	68fb      	ldr	r3, [r7, #12]
    8e92:	0011      	movs	r1, r2
    8e94:	0018      	movs	r0, r3
    8e96:	4b2d      	ldr	r3, [pc, #180]	; (8f4c <spi_read_buffer_wait+0x130>)
    8e98:	447b      	add	r3, pc
    8e9a:	4798      	blx	r3
    8e9c:	46c0      	nop			; (mov r8, r8)
    8e9e:	68fb      	ldr	r3, [r7, #12]
    8ea0:	0018      	movs	r0, r3
    8ea2:	4b2b      	ldr	r3, [pc, #172]	; (8f50 <spi_read_buffer_wait+0x134>)
    8ea4:	447b      	add	r3, pc
    8ea6:	4798      	blx	r3
    8ea8:	0003      	movs	r3, r0
    8eaa:	001a      	movs	r2, r3
    8eac:	2301      	movs	r3, #1
    8eae:	4053      	eors	r3, r2
    8eb0:	b2db      	uxtb	r3, r3
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d1f3      	bne.n	8e9e <spi_read_buffer_wait+0x82>
    8eb6:	2312      	movs	r3, #18
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	2200      	movs	r2, #0
    8ebc:	801a      	strh	r2, [r3, #0]
    8ebe:	2315      	movs	r3, #21
    8ec0:	18fc      	adds	r4, r7, r3
    8ec2:	2312      	movs	r3, #18
    8ec4:	18fa      	adds	r2, r7, r3
    8ec6:	68fb      	ldr	r3, [r7, #12]
    8ec8:	0011      	movs	r1, r2
    8eca:	0018      	movs	r0, r3
    8ecc:	4b21      	ldr	r3, [pc, #132]	; (8f54 <spi_read_buffer_wait+0x138>)
    8ece:	447b      	add	r3, pc
    8ed0:	4798      	blx	r3
    8ed2:	0003      	movs	r3, r0
    8ed4:	7023      	strb	r3, [r4, #0]
    8ed6:	2315      	movs	r3, #21
    8ed8:	18fb      	adds	r3, r7, r3
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	2b00      	cmp	r3, #0
    8ede:	d003      	beq.n	8ee8 <spi_read_buffer_wait+0xcc>
    8ee0:	2315      	movs	r3, #21
    8ee2:	18fb      	adds	r3, r7, r3
    8ee4:	781b      	ldrb	r3, [r3, #0]
    8ee6:	e02b      	b.n	8f40 <spi_read_buffer_wait+0x124>
    8ee8:	2316      	movs	r3, #22
    8eea:	18fb      	adds	r3, r7, r3
    8eec:	881b      	ldrh	r3, [r3, #0]
    8eee:	2216      	movs	r2, #22
    8ef0:	18ba      	adds	r2, r7, r2
    8ef2:	1c59      	adds	r1, r3, #1
    8ef4:	8011      	strh	r1, [r2, #0]
    8ef6:	001a      	movs	r2, r3
    8ef8:	68bb      	ldr	r3, [r7, #8]
    8efa:	189b      	adds	r3, r3, r2
    8efc:	2212      	movs	r2, #18
    8efe:	18ba      	adds	r2, r7, r2
    8f00:	8812      	ldrh	r2, [r2, #0]
    8f02:	b2d2      	uxtb	r2, r2
    8f04:	701a      	strb	r2, [r3, #0]
    8f06:	68fb      	ldr	r3, [r7, #12]
    8f08:	799b      	ldrb	r3, [r3, #6]
    8f0a:	2b01      	cmp	r3, #1
    8f0c:	d110      	bne.n	8f30 <spi_read_buffer_wait+0x114>
    8f0e:	2316      	movs	r3, #22
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	881b      	ldrh	r3, [r3, #0]
    8f14:	2216      	movs	r2, #22
    8f16:	18ba      	adds	r2, r7, r2
    8f18:	1c59      	adds	r1, r3, #1
    8f1a:	8011      	strh	r1, [r2, #0]
    8f1c:	001a      	movs	r2, r3
    8f1e:	68bb      	ldr	r3, [r7, #8]
    8f20:	189b      	adds	r3, r3, r2
    8f22:	2212      	movs	r2, #18
    8f24:	18ba      	adds	r2, r7, r2
    8f26:	8812      	ldrh	r2, [r2, #0]
    8f28:	0a12      	lsrs	r2, r2, #8
    8f2a:	b292      	uxth	r2, r2
    8f2c:	b2d2      	uxtb	r2, r2
    8f2e:	701a      	strb	r2, [r3, #0]
    8f30:	1dbb      	adds	r3, r7, #6
    8f32:	881b      	ldrh	r3, [r3, #0]
    8f34:	1dba      	adds	r2, r7, #6
    8f36:	1e59      	subs	r1, r3, #1
    8f38:	8011      	strh	r1, [r2, #0]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d195      	bne.n	8e6a <spi_read_buffer_wait+0x4e>
    8f3e:	2300      	movs	r3, #0
    8f40:	0018      	movs	r0, r3
    8f42:	46bd      	mov	sp, r7
    8f44:	b007      	add	sp, #28
    8f46:	bd90      	pop	{r4, r7, pc}
    8f48:	fffff977 	.word	0xfffff977
    8f4c:	fffff9a9 	.word	0xfffff9a9
    8f50:	fffff975 	.word	0xfffff975
    8f54:	fffff9bf 	.word	0xfffff9bf

00008f58 <spi_select_slave>:
    8f58:	b580      	push	{r7, lr}
    8f5a:	b086      	sub	sp, #24
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	60f8      	str	r0, [r7, #12]
    8f60:	60b9      	str	r1, [r7, #8]
    8f62:	1dfb      	adds	r3, r7, #7
    8f64:	701a      	strb	r2, [r3, #0]
    8f66:	68fb      	ldr	r3, [r7, #12]
    8f68:	795b      	ldrb	r3, [r3, #5]
    8f6a:	2b01      	cmp	r3, #1
    8f6c:	d001      	beq.n	8f72 <spi_select_slave+0x1a>
    8f6e:	2315      	movs	r3, #21
    8f70:	e064      	b.n	903c <spi_select_slave+0xe4>
    8f72:	68fb      	ldr	r3, [r7, #12]
    8f74:	7a1b      	ldrb	r3, [r3, #8]
    8f76:	2201      	movs	r2, #1
    8f78:	4053      	eors	r3, r2
    8f7a:	b2db      	uxtb	r3, r3
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d05c      	beq.n	903a <spi_select_slave+0xe2>
    8f80:	1dfb      	adds	r3, r7, #7
    8f82:	781b      	ldrb	r3, [r3, #0]
    8f84:	2b00      	cmp	r3, #0
    8f86:	d051      	beq.n	902c <spi_select_slave+0xd4>
    8f88:	68bb      	ldr	r3, [r7, #8]
    8f8a:	785b      	ldrb	r3, [r3, #1]
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d045      	beq.n	901c <spi_select_slave+0xc4>
    8f90:	68fb      	ldr	r3, [r7, #12]
    8f92:	0018      	movs	r0, r3
    8f94:	4b2b      	ldr	r3, [pc, #172]	; (9044 <spi_select_slave+0xec>)
    8f96:	447b      	add	r3, pc
    8f98:	4798      	blx	r3
    8f9a:	0003      	movs	r3, r0
    8f9c:	001a      	movs	r2, r3
    8f9e:	2301      	movs	r3, #1
    8fa0:	4053      	eors	r3, r2
    8fa2:	b2db      	uxtb	r3, r3
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d008      	beq.n	8fba <spi_select_slave+0x62>
    8fa8:	68bb      	ldr	r3, [r7, #8]
    8faa:	781b      	ldrb	r3, [r3, #0]
    8fac:	2101      	movs	r1, #1
    8fae:	0018      	movs	r0, r3
    8fb0:	4b25      	ldr	r3, [pc, #148]	; (9048 <spi_select_slave+0xf0>)
    8fb2:	447b      	add	r3, pc
    8fb4:	4798      	blx	r3
    8fb6:	2305      	movs	r3, #5
    8fb8:	e040      	b.n	903c <spi_select_slave+0xe4>
    8fba:	68bb      	ldr	r3, [r7, #8]
    8fbc:	781b      	ldrb	r3, [r3, #0]
    8fbe:	2100      	movs	r1, #0
    8fc0:	0018      	movs	r0, r3
    8fc2:	4b22      	ldr	r3, [pc, #136]	; (904c <spi_select_slave+0xf4>)
    8fc4:	447b      	add	r3, pc
    8fc6:	4798      	blx	r3
    8fc8:	68bb      	ldr	r3, [r7, #8]
    8fca:	789b      	ldrb	r3, [r3, #2]
    8fcc:	b29a      	uxth	r2, r3
    8fce:	68fb      	ldr	r3, [r7, #12]
    8fd0:	0011      	movs	r1, r2
    8fd2:	0018      	movs	r0, r3
    8fd4:	4b1e      	ldr	r3, [pc, #120]	; (9050 <spi_select_slave+0xf8>)
    8fd6:	447b      	add	r3, pc
    8fd8:	4798      	blx	r3
    8fda:	68fb      	ldr	r3, [r7, #12]
    8fdc:	79db      	ldrb	r3, [r3, #7]
    8fde:	2201      	movs	r2, #1
    8fe0:	4053      	eors	r3, r2
    8fe2:	b2db      	uxtb	r3, r3
    8fe4:	2b00      	cmp	r3, #0
    8fe6:	d028      	beq.n	903a <spi_select_slave+0xe2>
    8fe8:	46c0      	nop			; (mov r8, r8)
    8fea:	68fb      	ldr	r3, [r7, #12]
    8fec:	0018      	movs	r0, r3
    8fee:	4b19      	ldr	r3, [pc, #100]	; (9054 <spi_select_slave+0xfc>)
    8ff0:	447b      	add	r3, pc
    8ff2:	4798      	blx	r3
    8ff4:	0003      	movs	r3, r0
    8ff6:	001a      	movs	r2, r3
    8ff8:	2301      	movs	r3, #1
    8ffa:	4053      	eors	r3, r2
    8ffc:	b2db      	uxtb	r3, r3
    8ffe:	2b00      	cmp	r3, #0
    9000:	d1f3      	bne.n	8fea <spi_select_slave+0x92>
    9002:	2316      	movs	r3, #22
    9004:	18fb      	adds	r3, r7, r3
    9006:	2200      	movs	r2, #0
    9008:	801a      	strh	r2, [r3, #0]
    900a:	2316      	movs	r3, #22
    900c:	18fa      	adds	r2, r7, r3
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	0011      	movs	r1, r2
    9012:	0018      	movs	r0, r3
    9014:	4b10      	ldr	r3, [pc, #64]	; (9058 <spi_select_slave+0x100>)
    9016:	447b      	add	r3, pc
    9018:	4798      	blx	r3
    901a:	e00e      	b.n	903a <spi_select_slave+0xe2>
    901c:	68bb      	ldr	r3, [r7, #8]
    901e:	781b      	ldrb	r3, [r3, #0]
    9020:	2100      	movs	r1, #0
    9022:	0018      	movs	r0, r3
    9024:	4b0d      	ldr	r3, [pc, #52]	; (905c <spi_select_slave+0x104>)
    9026:	447b      	add	r3, pc
    9028:	4798      	blx	r3
    902a:	e006      	b.n	903a <spi_select_slave+0xe2>
    902c:	68bb      	ldr	r3, [r7, #8]
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	2101      	movs	r1, #1
    9032:	0018      	movs	r0, r3
    9034:	4b0a      	ldr	r3, [pc, #40]	; (9060 <spi_select_slave+0x108>)
    9036:	447b      	add	r3, pc
    9038:	4798      	blx	r3
    903a:	2300      	movs	r3, #0
    903c:	0018      	movs	r0, r3
    903e:	46bd      	mov	sp, r7
    9040:	b006      	add	sp, #24
    9042:	bd80      	pop	{r7, pc}
    9044:	fffff85b 	.word	0xfffff85b
    9048:	fffff5eb 	.word	0xfffff5eb
    904c:	fffff5d9 	.word	0xfffff5d9
    9050:	fffff86b 	.word	0xfffff86b
    9054:	fffff829 	.word	0xfffff829
    9058:	fffff877 	.word	0xfffff877
    905c:	fffff577 	.word	0xfffff577
    9060:	fffff567 	.word	0xfffff567

00009064 <spi_write_buffer_wait>:
    9064:	b580      	push	{r7, lr}
    9066:	b086      	sub	sp, #24
    9068:	af00      	add	r7, sp, #0
    906a:	60f8      	str	r0, [r7, #12]
    906c:	60b9      	str	r1, [r7, #8]
    906e:	1dbb      	adds	r3, r7, #6
    9070:	801a      	strh	r2, [r3, #0]
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	2238      	movs	r2, #56	; 0x38
    9076:	5c9b      	ldrb	r3, [r3, r2]
    9078:	b2db      	uxtb	r3, r3
    907a:	2b05      	cmp	r3, #5
    907c:	d101      	bne.n	9082 <spi_write_buffer_wait+0x1e>
    907e:	2305      	movs	r3, #5
    9080:	e08c      	b.n	919c <spi_write_buffer_wait+0x138>
    9082:	1dbb      	adds	r3, r7, #6
    9084:	881b      	ldrh	r3, [r3, #0]
    9086:	2b00      	cmp	r3, #0
    9088:	d101      	bne.n	908e <spi_write_buffer_wait+0x2a>
    908a:	2317      	movs	r3, #23
    908c:	e086      	b.n	919c <spi_write_buffer_wait+0x138>
    908e:	2316      	movs	r3, #22
    9090:	18fb      	adds	r3, r7, r3
    9092:	2200      	movs	r2, #0
    9094:	801a      	strh	r2, [r3, #0]
    9096:	2314      	movs	r3, #20
    9098:	18fb      	adds	r3, r7, r3
    909a:	1dba      	adds	r2, r7, #6
    909c:	8812      	ldrh	r2, [r2, #0]
    909e:	801a      	strh	r2, [r3, #0]
    90a0:	e063      	b.n	916a <spi_write_buffer_wait+0x106>
    90a2:	46c0      	nop			; (mov r8, r8)
    90a4:	68fb      	ldr	r3, [r7, #12]
    90a6:	0018      	movs	r0, r3
    90a8:	4b3e      	ldr	r3, [pc, #248]	; (91a4 <spi_write_buffer_wait+0x140>)
    90aa:	447b      	add	r3, pc
    90ac:	4798      	blx	r3
    90ae:	0003      	movs	r3, r0
    90b0:	001a      	movs	r2, r3
    90b2:	2301      	movs	r3, #1
    90b4:	4053      	eors	r3, r2
    90b6:	b2db      	uxtb	r3, r3
    90b8:	2b00      	cmp	r3, #0
    90ba:	d1f3      	bne.n	90a4 <spi_write_buffer_wait+0x40>
    90bc:	2316      	movs	r3, #22
    90be:	18fb      	adds	r3, r7, r3
    90c0:	881b      	ldrh	r3, [r3, #0]
    90c2:	2216      	movs	r2, #22
    90c4:	18ba      	adds	r2, r7, r2
    90c6:	1c59      	adds	r1, r3, #1
    90c8:	8011      	strh	r1, [r2, #0]
    90ca:	001a      	movs	r2, r3
    90cc:	68bb      	ldr	r3, [r7, #8]
    90ce:	189b      	adds	r3, r3, r2
    90d0:	781a      	ldrb	r2, [r3, #0]
    90d2:	2312      	movs	r3, #18
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	801a      	strh	r2, [r3, #0]
    90d8:	68fb      	ldr	r3, [r7, #12]
    90da:	799b      	ldrb	r3, [r3, #6]
    90dc:	2b01      	cmp	r3, #1
    90de:	d115      	bne.n	910c <spi_write_buffer_wait+0xa8>
    90e0:	2316      	movs	r3, #22
    90e2:	18fb      	adds	r3, r7, r3
    90e4:	881b      	ldrh	r3, [r3, #0]
    90e6:	2216      	movs	r2, #22
    90e8:	18ba      	adds	r2, r7, r2
    90ea:	1c59      	adds	r1, r3, #1
    90ec:	8011      	strh	r1, [r2, #0]
    90ee:	001a      	movs	r2, r3
    90f0:	68bb      	ldr	r3, [r7, #8]
    90f2:	189b      	adds	r3, r3, r2
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	021b      	lsls	r3, r3, #8
    90f8:	b21a      	sxth	r2, r3
    90fa:	2312      	movs	r3, #18
    90fc:	18fb      	adds	r3, r7, r3
    90fe:	2100      	movs	r1, #0
    9100:	5e5b      	ldrsh	r3, [r3, r1]
    9102:	4313      	orrs	r3, r2
    9104:	b21a      	sxth	r2, r3
    9106:	2312      	movs	r3, #18
    9108:	18fb      	adds	r3, r7, r3
    910a:	801a      	strh	r2, [r3, #0]
    910c:	2312      	movs	r3, #18
    910e:	18fb      	adds	r3, r7, r3
    9110:	881a      	ldrh	r2, [r3, #0]
    9112:	68fb      	ldr	r3, [r7, #12]
    9114:	0011      	movs	r1, r2
    9116:	0018      	movs	r0, r3
    9118:	4b23      	ldr	r3, [pc, #140]	; (91a8 <spi_write_buffer_wait+0x144>)
    911a:	447b      	add	r3, pc
    911c:	4798      	blx	r3
    911e:	68fb      	ldr	r3, [r7, #12]
    9120:	79db      	ldrb	r3, [r3, #7]
    9122:	2214      	movs	r2, #20
    9124:	18ba      	adds	r2, r7, r2
    9126:	2114      	movs	r1, #20
    9128:	1879      	adds	r1, r7, r1
    912a:	8809      	ldrh	r1, [r1, #0]
    912c:	8011      	strh	r1, [r2, #0]
    912e:	2b00      	cmp	r3, #0
    9130:	d01b      	beq.n	916a <spi_write_buffer_wait+0x106>
    9132:	46c0      	nop			; (mov r8, r8)
    9134:	68fb      	ldr	r3, [r7, #12]
    9136:	0018      	movs	r0, r3
    9138:	4b1c      	ldr	r3, [pc, #112]	; (91ac <spi_write_buffer_wait+0x148>)
    913a:	447b      	add	r3, pc
    913c:	4798      	blx	r3
    913e:	0003      	movs	r3, r0
    9140:	001a      	movs	r2, r3
    9142:	2301      	movs	r3, #1
    9144:	4053      	eors	r3, r2
    9146:	b2db      	uxtb	r3, r3
    9148:	2b00      	cmp	r3, #0
    914a:	d1f3      	bne.n	9134 <spi_write_buffer_wait+0xd0>
    914c:	2310      	movs	r3, #16
    914e:	18fa      	adds	r2, r7, r3
    9150:	68fb      	ldr	r3, [r7, #12]
    9152:	0011      	movs	r1, r2
    9154:	0018      	movs	r0, r3
    9156:	4b16      	ldr	r3, [pc, #88]	; (91b0 <spi_write_buffer_wait+0x14c>)
    9158:	447b      	add	r3, pc
    915a:	4798      	blx	r3
    915c:	2314      	movs	r3, #20
    915e:	18fb      	adds	r3, r7, r3
    9160:	881a      	ldrh	r2, [r3, #0]
    9162:	2314      	movs	r3, #20
    9164:	18fb      	adds	r3, r7, r3
    9166:	3a01      	subs	r2, #1
    9168:	801a      	strh	r2, [r3, #0]
    916a:	1dbb      	adds	r3, r7, #6
    916c:	881b      	ldrh	r3, [r3, #0]
    916e:	1dba      	adds	r2, r7, #6
    9170:	1e59      	subs	r1, r3, #1
    9172:	8011      	strh	r1, [r2, #0]
    9174:	2b00      	cmp	r3, #0
    9176:	d194      	bne.n	90a2 <spi_write_buffer_wait+0x3e>
    9178:	68fb      	ldr	r3, [r7, #12]
    917a:	795b      	ldrb	r3, [r3, #5]
    917c:	2b01      	cmp	r3, #1
    917e:	d10c      	bne.n	919a <spi_write_buffer_wait+0x136>
    9180:	46c0      	nop			; (mov r8, r8)
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	0018      	movs	r0, r3
    9186:	4b0b      	ldr	r3, [pc, #44]	; (91b4 <spi_write_buffer_wait+0x150>)
    9188:	447b      	add	r3, pc
    918a:	4798      	blx	r3
    918c:	0003      	movs	r3, r0
    918e:	001a      	movs	r2, r3
    9190:	2301      	movs	r3, #1
    9192:	4053      	eors	r3, r2
    9194:	b2db      	uxtb	r3, r3
    9196:	2b00      	cmp	r3, #0
    9198:	d1f3      	bne.n	9182 <spi_write_buffer_wait+0x11e>
    919a:	2300      	movs	r3, #0
    919c:	0018      	movs	r0, r3
    919e:	46bd      	mov	sp, r7
    91a0:	b006      	add	sp, #24
    91a2:	bd80      	pop	{r7, pc}
    91a4:	fffff747 	.word	0xfffff747
    91a8:	fffff727 	.word	0xfffff727
    91ac:	fffff6df 	.word	0xfffff6df
    91b0:	fffff735 	.word	0xfffff735
    91b4:	fffff641 	.word	0xfffff641

000091b8 <_spi_write>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b084      	sub	sp, #16
    91bc:	af00      	add	r7, sp, #0
    91be:	6078      	str	r0, [r7, #4]
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	60bb      	str	r3, [r7, #8]
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	b2da      	uxtb	r2, r3
    91ce:	230e      	movs	r3, #14
    91d0:	18fb      	adds	r3, r7, r3
    91d2:	801a      	strh	r2, [r3, #0]
    91d4:	687b      	ldr	r3, [r7, #4]
    91d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91d8:	1c5a      	adds	r2, r3, #1
    91da:	687b      	ldr	r3, [r7, #4]
    91dc:	62da      	str	r2, [r3, #44]	; 0x2c
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	799b      	ldrb	r3, [r3, #6]
    91e2:	2b01      	cmp	r3, #1
    91e4:	d113      	bne.n	920e <_spi_write+0x56>
    91e6:	687b      	ldr	r3, [r7, #4]
    91e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	b2db      	uxtb	r3, r3
    91ee:	021b      	lsls	r3, r3, #8
    91f0:	b21a      	sxth	r2, r3
    91f2:	230e      	movs	r3, #14
    91f4:	18fb      	adds	r3, r7, r3
    91f6:	2100      	movs	r1, #0
    91f8:	5e5b      	ldrsh	r3, [r3, r1]
    91fa:	4313      	orrs	r3, r2
    91fc:	b21a      	sxth	r2, r3
    91fe:	230e      	movs	r3, #14
    9200:	18fb      	adds	r3, r7, r3
    9202:	801a      	strh	r2, [r3, #0]
    9204:	687b      	ldr	r3, [r7, #4]
    9206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9208:	1c5a      	adds	r2, r3, #1
    920a:	687b      	ldr	r3, [r7, #4]
    920c:	62da      	str	r2, [r3, #44]	; 0x2c
    920e:	230e      	movs	r3, #14
    9210:	18fb      	adds	r3, r7, r3
    9212:	881b      	ldrh	r3, [r3, #0]
    9214:	05db      	lsls	r3, r3, #23
    9216:	0dda      	lsrs	r2, r3, #23
    9218:	68bb      	ldr	r3, [r7, #8]
    921a:	629a      	str	r2, [r3, #40]	; 0x28
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9220:	b29b      	uxth	r3, r3
    9222:	3b01      	subs	r3, #1
    9224:	b29a      	uxth	r2, r3
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	869a      	strh	r2, [r3, #52]	; 0x34
    922a:	46c0      	nop			; (mov r8, r8)
    922c:	46bd      	mov	sp, r7
    922e:	b004      	add	sp, #16
    9230:	bd80      	pop	{r7, pc}
	...

00009234 <_spi_write_dummy>:
    9234:	b580      	push	{r7, lr}
    9236:	b084      	sub	sp, #16
    9238:	af00      	add	r7, sp, #0
    923a:	6078      	str	r0, [r7, #4]
    923c:	4a0a      	ldr	r2, [pc, #40]	; (9268 <_spi_write_dummy+0x34>)
    923e:	447a      	add	r2, pc
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	681b      	ldr	r3, [r3, #0]
    9244:	60fb      	str	r3, [r7, #12]
    9246:	4b09      	ldr	r3, [pc, #36]	; (926c <_spi_write_dummy+0x38>)
    9248:	58d3      	ldr	r3, [r2, r3]
    924a:	881b      	ldrh	r3, [r3, #0]
    924c:	001a      	movs	r2, r3
    924e:	68fb      	ldr	r3, [r7, #12]
    9250:	629a      	str	r2, [r3, #40]	; 0x28
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9256:	b29b      	uxth	r3, r3
    9258:	3b01      	subs	r3, #1
    925a:	b29a      	uxth	r2, r3
    925c:	687b      	ldr	r3, [r7, #4]
    925e:	865a      	strh	r2, [r3, #50]	; 0x32
    9260:	46c0      	nop			; (mov r8, r8)
    9262:	46bd      	mov	sp, r7
    9264:	b004      	add	sp, #16
    9266:	bd80      	pop	{r7, pc}
    9268:	00008ba2 	.word	0x00008ba2
    926c:	0000013c 	.word	0x0000013c

00009270 <_spi_read_dummy>:
    9270:	b580      	push	{r7, lr}
    9272:	b084      	sub	sp, #16
    9274:	af00      	add	r7, sp, #0
    9276:	6078      	str	r0, [r7, #4]
    9278:	687b      	ldr	r3, [r7, #4]
    927a:	681b      	ldr	r3, [r3, #0]
    927c:	60fb      	str	r3, [r7, #12]
    927e:	230a      	movs	r3, #10
    9280:	18fb      	adds	r3, r7, r3
    9282:	2200      	movs	r2, #0
    9284:	801a      	strh	r2, [r3, #0]
    9286:	68fb      	ldr	r3, [r7, #12]
    9288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    928a:	230a      	movs	r3, #10
    928c:	18fb      	adds	r3, r7, r3
    928e:	801a      	strh	r2, [r3, #0]
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9294:	b29b      	uxth	r3, r3
    9296:	3b01      	subs	r3, #1
    9298:	b29a      	uxth	r2, r3
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	865a      	strh	r2, [r3, #50]	; 0x32
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	46bd      	mov	sp, r7
    92a2:	b004      	add	sp, #16
    92a4:	bd80      	pop	{r7, pc}

000092a6 <_spi_read>:
    92a6:	b580      	push	{r7, lr}
    92a8:	b084      	sub	sp, #16
    92aa:	af00      	add	r7, sp, #0
    92ac:	6078      	str	r0, [r7, #4]
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	681b      	ldr	r3, [r3, #0]
    92b2:	60fb      	str	r3, [r7, #12]
    92b4:	68fb      	ldr	r3, [r7, #12]
    92b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92b8:	b29a      	uxth	r2, r3
    92ba:	230a      	movs	r3, #10
    92bc:	18fb      	adds	r3, r7, r3
    92be:	05d2      	lsls	r2, r2, #23
    92c0:	0dd2      	lsrs	r2, r2, #23
    92c2:	801a      	strh	r2, [r3, #0]
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92c8:	220a      	movs	r2, #10
    92ca:	18ba      	adds	r2, r7, r2
    92cc:	8812      	ldrh	r2, [r2, #0]
    92ce:	b2d2      	uxtb	r2, r2
    92d0:	701a      	strb	r2, [r3, #0]
    92d2:	687b      	ldr	r3, [r7, #4]
    92d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92d6:	1c5a      	adds	r2, r3, #1
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	629a      	str	r2, [r3, #40]	; 0x28
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	799b      	ldrb	r3, [r3, #6]
    92e0:	2b01      	cmp	r3, #1
    92e2:	d10d      	bne.n	9300 <_spi_read+0x5a>
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92e8:	220a      	movs	r2, #10
    92ea:	18ba      	adds	r2, r7, r2
    92ec:	8812      	ldrh	r2, [r2, #0]
    92ee:	0a12      	lsrs	r2, r2, #8
    92f0:	b292      	uxth	r2, r2
    92f2:	b2d2      	uxtb	r2, r2
    92f4:	701a      	strb	r2, [r3, #0]
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92fa:	1c5a      	adds	r2, r3, #1
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	629a      	str	r2, [r3, #40]	; 0x28
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    9304:	b29b      	uxth	r3, r3
    9306:	3b01      	subs	r3, #1
    9308:	b29a      	uxth	r2, r3
    930a:	687b      	ldr	r3, [r7, #4]
    930c:	861a      	strh	r2, [r3, #48]	; 0x30
    930e:	46c0      	nop			; (mov r8, r8)
    9310:	46bd      	mov	sp, r7
    9312:	b004      	add	sp, #16
    9314:	bd80      	pop	{r7, pc}
	...

00009318 <_spi_interrupt_handler>:
    9318:	b580      	push	{r7, lr}
    931a:	b086      	sub	sp, #24
    931c:	af00      	add	r7, sp, #0
    931e:	0002      	movs	r2, r0
    9320:	1dfb      	adds	r3, r7, #7
    9322:	701a      	strb	r2, [r3, #0]
    9324:	499a      	ldr	r1, [pc, #616]	; (9590 <_spi_interrupt_handler+0x278>)
    9326:	4479      	add	r1, pc
    9328:	1dfb      	adds	r3, r7, #7
    932a:	781a      	ldrb	r2, [r3, #0]
    932c:	4b99      	ldr	r3, [pc, #612]	; (9594 <_spi_interrupt_handler+0x27c>)
    932e:	58cb      	ldr	r3, [r1, r3]
    9330:	0092      	lsls	r2, r2, #2
    9332:	58d3      	ldr	r3, [r2, r3]
    9334:	617b      	str	r3, [r7, #20]
    9336:	697b      	ldr	r3, [r7, #20]
    9338:	681b      	ldr	r3, [r3, #0]
    933a:	613b      	str	r3, [r7, #16]
    933c:	697b      	ldr	r3, [r7, #20]
    933e:	2237      	movs	r2, #55	; 0x37
    9340:	5c9a      	ldrb	r2, [r3, r2]
    9342:	697b      	ldr	r3, [r7, #20]
    9344:	2136      	movs	r1, #54	; 0x36
    9346:	5c59      	ldrb	r1, [r3, r1]
    9348:	230f      	movs	r3, #15
    934a:	18fb      	adds	r3, r7, r3
    934c:	400a      	ands	r2, r1
    934e:	701a      	strb	r2, [r3, #0]
    9350:	693b      	ldr	r3, [r7, #16]
    9352:	7e1b      	ldrb	r3, [r3, #24]
    9354:	b2da      	uxtb	r2, r3
    9356:	230c      	movs	r3, #12
    9358:	18fb      	adds	r3, r7, r3
    935a:	801a      	strh	r2, [r3, #0]
    935c:	693b      	ldr	r3, [r7, #16]
    935e:	7d9b      	ldrb	r3, [r3, #22]
    9360:	b2db      	uxtb	r3, r3
    9362:	b29a      	uxth	r2, r3
    9364:	230c      	movs	r3, #12
    9366:	18fb      	adds	r3, r7, r3
    9368:	210c      	movs	r1, #12
    936a:	1879      	adds	r1, r7, r1
    936c:	8809      	ldrh	r1, [r1, #0]
    936e:	400a      	ands	r2, r1
    9370:	801a      	strh	r2, [r3, #0]
    9372:	230c      	movs	r3, #12
    9374:	18fb      	adds	r3, r7, r3
    9376:	881b      	ldrh	r3, [r3, #0]
    9378:	2201      	movs	r2, #1
    937a:	4013      	ands	r3, r2
    937c:	d03a      	beq.n	93f4 <_spi_interrupt_handler+0xdc>
    937e:	697b      	ldr	r3, [r7, #20]
    9380:	795b      	ldrb	r3, [r3, #5]
    9382:	2b01      	cmp	r3, #1
    9384:	d111      	bne.n	93aa <_spi_interrupt_handler+0x92>
    9386:	697b      	ldr	r3, [r7, #20]
    9388:	7a5b      	ldrb	r3, [r3, #9]
    938a:	b2db      	uxtb	r3, r3
    938c:	2b00      	cmp	r3, #0
    938e:	d10c      	bne.n	93aa <_spi_interrupt_handler+0x92>
    9390:	697b      	ldr	r3, [r7, #20]
    9392:	0018      	movs	r0, r3
    9394:	4b80      	ldr	r3, [pc, #512]	; (9598 <_spi_interrupt_handler+0x280>)
    9396:	447b      	add	r3, pc
    9398:	4798      	blx	r3
    939a:	697b      	ldr	r3, [r7, #20]
    939c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    939e:	b29b      	uxth	r3, r3
    93a0:	2b00      	cmp	r3, #0
    93a2:	d102      	bne.n	93aa <_spi_interrupt_handler+0x92>
    93a4:	693b      	ldr	r3, [r7, #16]
    93a6:	2201      	movs	r2, #1
    93a8:	751a      	strb	r2, [r3, #20]
    93aa:	697b      	ldr	r3, [r7, #20]
    93ac:	795b      	ldrb	r3, [r3, #5]
    93ae:	2b01      	cmp	r3, #1
    93b0:	d120      	bne.n	93f4 <_spi_interrupt_handler+0xdc>
    93b2:	697b      	ldr	r3, [r7, #20]
    93b4:	7a5b      	ldrb	r3, [r3, #9]
    93b6:	b2db      	uxtb	r3, r3
    93b8:	2b00      	cmp	r3, #0
    93ba:	d01b      	beq.n	93f4 <_spi_interrupt_handler+0xdc>
    93bc:	697b      	ldr	r3, [r7, #20]
    93be:	0018      	movs	r0, r3
    93c0:	4b76      	ldr	r3, [pc, #472]	; (959c <_spi_interrupt_handler+0x284>)
    93c2:	447b      	add	r3, pc
    93c4:	4798      	blx	r3
    93c6:	697b      	ldr	r3, [r7, #20]
    93c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    93ca:	b29b      	uxth	r3, r3
    93cc:	2b00      	cmp	r3, #0
    93ce:	d111      	bne.n	93f4 <_spi_interrupt_handler+0xdc>
    93d0:	693b      	ldr	r3, [r7, #16]
    93d2:	2201      	movs	r2, #1
    93d4:	751a      	strb	r2, [r3, #20]
    93d6:	697b      	ldr	r3, [r7, #20]
    93d8:	7a5b      	ldrb	r3, [r3, #9]
    93da:	b2db      	uxtb	r3, r3
    93dc:	2b01      	cmp	r3, #1
    93de:	d109      	bne.n	93f4 <_spi_interrupt_handler+0xdc>
    93e0:	697b      	ldr	r3, [r7, #20]
    93e2:	79db      	ldrb	r3, [r3, #7]
    93e4:	2201      	movs	r2, #1
    93e6:	4053      	eors	r3, r2
    93e8:	b2db      	uxtb	r3, r3
    93ea:	2b00      	cmp	r3, #0
    93ec:	d002      	beq.n	93f4 <_spi_interrupt_handler+0xdc>
    93ee:	693b      	ldr	r3, [r7, #16]
    93f0:	2202      	movs	r2, #2
    93f2:	759a      	strb	r2, [r3, #22]
    93f4:	230c      	movs	r3, #12
    93f6:	18fb      	adds	r3, r7, r3
    93f8:	881b      	ldrh	r3, [r3, #0]
    93fa:	2204      	movs	r2, #4
    93fc:	4013      	ands	r3, r2
    93fe:	d100      	bne.n	9402 <_spi_interrupt_handler+0xea>
    9400:	e080      	b.n	9504 <_spi_interrupt_handler+0x1ec>
    9402:	693b      	ldr	r3, [r7, #16]
    9404:	8b5b      	ldrh	r3, [r3, #26]
    9406:	b29b      	uxth	r3, r3
    9408:	001a      	movs	r2, r3
    940a:	2304      	movs	r3, #4
    940c:	4013      	ands	r3, r2
    940e:	d022      	beq.n	9456 <_spi_interrupt_handler+0x13e>
    9410:	697b      	ldr	r3, [r7, #20]
    9412:	7a5b      	ldrb	r3, [r3, #9]
    9414:	b2db      	uxtb	r3, r3
    9416:	2b01      	cmp	r3, #1
    9418:	d014      	beq.n	9444 <_spi_interrupt_handler+0x12c>
    941a:	697b      	ldr	r3, [r7, #20]
    941c:	2238      	movs	r2, #56	; 0x38
    941e:	211e      	movs	r1, #30
    9420:	5499      	strb	r1, [r3, r2]
    9422:	697b      	ldr	r3, [r7, #20]
    9424:	2203      	movs	r2, #3
    9426:	725a      	strb	r2, [r3, #9]
    9428:	693b      	ldr	r3, [r7, #16]
    942a:	2205      	movs	r2, #5
    942c:	751a      	strb	r2, [r3, #20]
    942e:	230f      	movs	r3, #15
    9430:	18fb      	adds	r3, r7, r3
    9432:	781b      	ldrb	r3, [r3, #0]
    9434:	2208      	movs	r2, #8
    9436:	4013      	ands	r3, r2
    9438:	d004      	beq.n	9444 <_spi_interrupt_handler+0x12c>
    943a:	697b      	ldr	r3, [r7, #20]
    943c:	699b      	ldr	r3, [r3, #24]
    943e:	697a      	ldr	r2, [r7, #20]
    9440:	0010      	movs	r0, r2
    9442:	4798      	blx	r3
    9444:	693b      	ldr	r3, [r7, #16]
    9446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9448:	230a      	movs	r3, #10
    944a:	18fb      	adds	r3, r7, r3
    944c:	801a      	strh	r2, [r3, #0]
    944e:	693b      	ldr	r3, [r7, #16]
    9450:	2204      	movs	r2, #4
    9452:	835a      	strh	r2, [r3, #26]
    9454:	e056      	b.n	9504 <_spi_interrupt_handler+0x1ec>
    9456:	697b      	ldr	r3, [r7, #20]
    9458:	7a5b      	ldrb	r3, [r3, #9]
    945a:	b2db      	uxtb	r3, r3
    945c:	2b01      	cmp	r3, #1
    945e:	d11f      	bne.n	94a0 <_spi_interrupt_handler+0x188>
    9460:	697b      	ldr	r3, [r7, #20]
    9462:	0018      	movs	r0, r3
    9464:	4b4e      	ldr	r3, [pc, #312]	; (95a0 <_spi_interrupt_handler+0x288>)
    9466:	447b      	add	r3, pc
    9468:	4798      	blx	r3
    946a:	697b      	ldr	r3, [r7, #20]
    946c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    946e:	b29b      	uxth	r3, r3
    9470:	2b00      	cmp	r3, #0
    9472:	d147      	bne.n	9504 <_spi_interrupt_handler+0x1ec>
    9474:	693b      	ldr	r3, [r7, #16]
    9476:	2204      	movs	r2, #4
    9478:	751a      	strb	r2, [r3, #20]
    947a:	697b      	ldr	r3, [r7, #20]
    947c:	2238      	movs	r2, #56	; 0x38
    947e:	2100      	movs	r1, #0
    9480:	5499      	strb	r1, [r3, r2]
    9482:	697b      	ldr	r3, [r7, #20]
    9484:	2203      	movs	r2, #3
    9486:	725a      	strb	r2, [r3, #9]
    9488:	230f      	movs	r3, #15
    948a:	18fb      	adds	r3, r7, r3
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	2201      	movs	r2, #1
    9490:	4013      	ands	r3, r2
    9492:	d037      	beq.n	9504 <_spi_interrupt_handler+0x1ec>
    9494:	697b      	ldr	r3, [r7, #20]
    9496:	68db      	ldr	r3, [r3, #12]
    9498:	697a      	ldr	r2, [r7, #20]
    949a:	0010      	movs	r0, r2
    949c:	4798      	blx	r3
    949e:	e031      	b.n	9504 <_spi_interrupt_handler+0x1ec>
    94a0:	697b      	ldr	r3, [r7, #20]
    94a2:	0018      	movs	r0, r3
    94a4:	4b3f      	ldr	r3, [pc, #252]	; (95a4 <_spi_interrupt_handler+0x28c>)
    94a6:	447b      	add	r3, pc
    94a8:	4798      	blx	r3
    94aa:	697b      	ldr	r3, [r7, #20]
    94ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    94ae:	b29b      	uxth	r3, r3
    94b0:	2b00      	cmp	r3, #0
    94b2:	d127      	bne.n	9504 <_spi_interrupt_handler+0x1ec>
    94b4:	697b      	ldr	r3, [r7, #20]
    94b6:	2238      	movs	r2, #56	; 0x38
    94b8:	2100      	movs	r1, #0
    94ba:	5499      	strb	r1, [r3, r2]
    94bc:	693b      	ldr	r3, [r7, #16]
    94be:	2204      	movs	r2, #4
    94c0:	751a      	strb	r2, [r3, #20]
    94c2:	697b      	ldr	r3, [r7, #20]
    94c4:	7a5b      	ldrb	r3, [r3, #9]
    94c6:	b2db      	uxtb	r3, r3
    94c8:	2b02      	cmp	r3, #2
    94ca:	d10b      	bne.n	94e4 <_spi_interrupt_handler+0x1cc>
    94cc:	230f      	movs	r3, #15
    94ce:	18fb      	adds	r3, r7, r3
    94d0:	781b      	ldrb	r3, [r3, #0]
    94d2:	2204      	movs	r2, #4
    94d4:	4013      	ands	r3, r2
    94d6:	d015      	beq.n	9504 <_spi_interrupt_handler+0x1ec>
    94d8:	697b      	ldr	r3, [r7, #20]
    94da:	695b      	ldr	r3, [r3, #20]
    94dc:	697a      	ldr	r2, [r7, #20]
    94de:	0010      	movs	r0, r2
    94e0:	4798      	blx	r3
    94e2:	e00f      	b.n	9504 <_spi_interrupt_handler+0x1ec>
    94e4:	697b      	ldr	r3, [r7, #20]
    94e6:	7a5b      	ldrb	r3, [r3, #9]
    94e8:	b2db      	uxtb	r3, r3
    94ea:	2b00      	cmp	r3, #0
    94ec:	d10a      	bne.n	9504 <_spi_interrupt_handler+0x1ec>
    94ee:	230f      	movs	r3, #15
    94f0:	18fb      	adds	r3, r7, r3
    94f2:	781b      	ldrb	r3, [r3, #0]
    94f4:	2202      	movs	r2, #2
    94f6:	4013      	ands	r3, r2
    94f8:	d004      	beq.n	9504 <_spi_interrupt_handler+0x1ec>
    94fa:	697b      	ldr	r3, [r7, #20]
    94fc:	691b      	ldr	r3, [r3, #16]
    94fe:	697a      	ldr	r2, [r7, #20]
    9500:	0010      	movs	r0, r2
    9502:	4798      	blx	r3
    9504:	230c      	movs	r3, #12
    9506:	18fb      	adds	r3, r7, r3
    9508:	881b      	ldrh	r3, [r3, #0]
    950a:	2202      	movs	r2, #2
    950c:	4013      	ands	r3, r2
    950e:	d024      	beq.n	955a <_spi_interrupt_handler+0x242>
    9510:	697b      	ldr	r3, [r7, #20]
    9512:	795b      	ldrb	r3, [r3, #5]
    9514:	2b01      	cmp	r3, #1
    9516:	d120      	bne.n	955a <_spi_interrupt_handler+0x242>
    9518:	697b      	ldr	r3, [r7, #20]
    951a:	7a5b      	ldrb	r3, [r3, #9]
    951c:	b2db      	uxtb	r3, r3
    951e:	2b01      	cmp	r3, #1
    9520:	d11b      	bne.n	955a <_spi_interrupt_handler+0x242>
    9522:	697b      	ldr	r3, [r7, #20]
    9524:	79db      	ldrb	r3, [r3, #7]
    9526:	2201      	movs	r2, #1
    9528:	4053      	eors	r3, r2
    952a:	b2db      	uxtb	r3, r3
    952c:	2b00      	cmp	r3, #0
    952e:	d014      	beq.n	955a <_spi_interrupt_handler+0x242>
    9530:	693b      	ldr	r3, [r7, #16]
    9532:	2202      	movs	r2, #2
    9534:	751a      	strb	r2, [r3, #20]
    9536:	697b      	ldr	r3, [r7, #20]
    9538:	2203      	movs	r2, #3
    953a:	725a      	strb	r2, [r3, #9]
    953c:	697b      	ldr	r3, [r7, #20]
    953e:	2238      	movs	r2, #56	; 0x38
    9540:	2100      	movs	r1, #0
    9542:	5499      	strb	r1, [r3, r2]
    9544:	230f      	movs	r3, #15
    9546:	18fb      	adds	r3, r7, r3
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	2201      	movs	r2, #1
    954c:	4013      	ands	r3, r2
    954e:	d004      	beq.n	955a <_spi_interrupt_handler+0x242>
    9550:	697b      	ldr	r3, [r7, #20]
    9552:	68db      	ldr	r3, [r3, #12]
    9554:	697a      	ldr	r2, [r7, #20]
    9556:	0010      	movs	r0, r2
    9558:	4798      	blx	r3
    955a:	230c      	movs	r3, #12
    955c:	18fb      	adds	r3, r7, r3
    955e:	881b      	ldrh	r3, [r3, #0]
    9560:	2280      	movs	r2, #128	; 0x80
    9562:	4013      	ands	r3, r2
    9564:	d010      	beq.n	9588 <_spi_interrupt_handler+0x270>
    9566:	693b      	ldr	r3, [r7, #16]
    9568:	2280      	movs	r2, #128	; 0x80
    956a:	751a      	strb	r2, [r3, #20]
    956c:	693b      	ldr	r3, [r7, #16]
    956e:	2280      	movs	r2, #128	; 0x80
    9570:	761a      	strb	r2, [r3, #24]
    9572:	230f      	movs	r3, #15
    9574:	18fb      	adds	r3, r7, r3
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	2240      	movs	r2, #64	; 0x40
    957a:	4013      	ands	r3, r2
    957c:	d004      	beq.n	9588 <_spi_interrupt_handler+0x270>
    957e:	697b      	ldr	r3, [r7, #20]
    9580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9582:	697a      	ldr	r2, [r7, #20]
    9584:	0010      	movs	r0, r2
    9586:	4798      	blx	r3
    9588:	46c0      	nop			; (mov r8, r8)
    958a:	46bd      	mov	sp, r7
    958c:	b006      	add	sp, #24
    958e:	bd80      	pop	{r7, pc}
    9590:	00008aba 	.word	0x00008aba
    9594:	00000158 	.word	0x00000158
    9598:	fffffe9b 	.word	0xfffffe9b
    959c:	fffffdf3 	.word	0xfffffdf3
    95a0:	fffffe07 	.word	0xfffffe07
    95a4:	fffffdfd 	.word	0xfffffdfd

000095a8 <_sercom_default_handler>:
    95a8:	b580      	push	{r7, lr}
    95aa:	b082      	sub	sp, #8
    95ac:	af00      	add	r7, sp, #0
    95ae:	0002      	movs	r2, r0
    95b0:	1dfb      	adds	r3, r7, #7
    95b2:	701a      	strb	r2, [r3, #0]
    95b4:	46c0      	nop			; (mov r8, r8)
    95b6:	46bd      	mov	sp, r7
    95b8:	b002      	add	sp, #8
    95ba:	bd80      	pop	{r7, pc}

000095bc <_sercom_set_handler>:
    95bc:	b580      	push	{r7, lr}
    95be:	b084      	sub	sp, #16
    95c0:	af00      	add	r7, sp, #0
    95c2:	0002      	movs	r2, r0
    95c4:	6039      	str	r1, [r7, #0]
    95c6:	1dfb      	adds	r3, r7, #7
    95c8:	701a      	strb	r2, [r3, #0]
    95ca:	4a17      	ldr	r2, [pc, #92]	; (9628 <_sercom_set_handler+0x6c>)
    95cc:	447a      	add	r2, pc
    95ce:	4b17      	ldr	r3, [pc, #92]	; (962c <_sercom_set_handler+0x70>)
    95d0:	447b      	add	r3, pc
    95d2:	781b      	ldrb	r3, [r3, #0]
    95d4:	2101      	movs	r1, #1
    95d6:	404b      	eors	r3, r1
    95d8:	b2db      	uxtb	r3, r3
    95da:	2b00      	cmp	r3, #0
    95dc:	d019      	beq.n	9612 <_sercom_set_handler+0x56>
    95de:	2300      	movs	r3, #0
    95e0:	60fb      	str	r3, [r7, #12]
    95e2:	e00f      	b.n	9604 <_sercom_set_handler+0x48>
    95e4:	4b12      	ldr	r3, [pc, #72]	; (9630 <_sercom_set_handler+0x74>)
    95e6:	447b      	add	r3, pc
    95e8:	68f9      	ldr	r1, [r7, #12]
    95ea:	0089      	lsls	r1, r1, #2
    95ec:	4811      	ldr	r0, [pc, #68]	; (9634 <_sercom_set_handler+0x78>)
    95ee:	4478      	add	r0, pc
    95f0:	50c8      	str	r0, [r1, r3]
    95f2:	4b11      	ldr	r3, [pc, #68]	; (9638 <_sercom_set_handler+0x7c>)
    95f4:	58d3      	ldr	r3, [r2, r3]
    95f6:	68f9      	ldr	r1, [r7, #12]
    95f8:	0089      	lsls	r1, r1, #2
    95fa:	2000      	movs	r0, #0
    95fc:	50c8      	str	r0, [r1, r3]
    95fe:	68fb      	ldr	r3, [r7, #12]
    9600:	3301      	adds	r3, #1
    9602:	60fb      	str	r3, [r7, #12]
    9604:	68fb      	ldr	r3, [r7, #12]
    9606:	2b05      	cmp	r3, #5
    9608:	d9ec      	bls.n	95e4 <_sercom_set_handler+0x28>
    960a:	4b0c      	ldr	r3, [pc, #48]	; (963c <_sercom_set_handler+0x80>)
    960c:	447b      	add	r3, pc
    960e:	2201      	movs	r2, #1
    9610:	701a      	strb	r2, [r3, #0]
    9612:	1dfb      	adds	r3, r7, #7
    9614:	781a      	ldrb	r2, [r3, #0]
    9616:	4b0a      	ldr	r3, [pc, #40]	; (9640 <_sercom_set_handler+0x84>)
    9618:	447b      	add	r3, pc
    961a:	0092      	lsls	r2, r2, #2
    961c:	6839      	ldr	r1, [r7, #0]
    961e:	50d1      	str	r1, [r2, r3]
    9620:	46c0      	nop			; (mov r8, r8)
    9622:	46bd      	mov	sp, r7
    9624:	b004      	add	sp, #16
    9626:	bd80      	pop	{r7, pc}
    9628:	00008814 	.word	0x00008814
    962c:	1fff6f5e 	.word	0x1fff6f5e
    9630:	1fff6f4a 	.word	0x1fff6f4a
    9634:	ffffffb7 	.word	0xffffffb7
    9638:	00000158 	.word	0x00000158
    963c:	1fff6f22 	.word	0x1fff6f22
    9640:	1fff6f18 	.word	0x1fff6f18

00009644 <_sercom_get_interrupt_vector>:
    9644:	b5b0      	push	{r4, r5, r7, lr}
    9646:	b084      	sub	sp, #16
    9648:	af00      	add	r7, sp, #0
    964a:	6078      	str	r0, [r7, #4]
    964c:	4c10      	ldr	r4, [pc, #64]	; (9690 <_sercom_get_interrupt_vector+0x4c>)
    964e:	447c      	add	r4, pc
    9650:	2308      	movs	r3, #8
    9652:	18fa      	adds	r2, r7, r3
    9654:	4b0f      	ldr	r3, [pc, #60]	; (9694 <_sercom_get_interrupt_vector+0x50>)
    9656:	447b      	add	r3, pc
    9658:	0010      	movs	r0, r2
    965a:	0019      	movs	r1, r3
    965c:	2306      	movs	r3, #6
    965e:	001a      	movs	r2, r3
    9660:	4b0d      	ldr	r3, [pc, #52]	; (9698 <_sercom_get_interrupt_vector+0x54>)
    9662:	58e3      	ldr	r3, [r4, r3]
    9664:	4798      	blx	r3
    9666:	230f      	movs	r3, #15
    9668:	18fd      	adds	r5, r7, r3
    966a:	687b      	ldr	r3, [r7, #4]
    966c:	0018      	movs	r0, r3
    966e:	4b0b      	ldr	r3, [pc, #44]	; (969c <_sercom_get_interrupt_vector+0x58>)
    9670:	58e3      	ldr	r3, [r4, r3]
    9672:	4798      	blx	r3
    9674:	0003      	movs	r3, r0
    9676:	702b      	strb	r3, [r5, #0]
    9678:	230f      	movs	r3, #15
    967a:	18fb      	adds	r3, r7, r3
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	2208      	movs	r2, #8
    9680:	18ba      	adds	r2, r7, r2
    9682:	5cd3      	ldrb	r3, [r2, r3]
    9684:	b25b      	sxtb	r3, r3
    9686:	0018      	movs	r0, r3
    9688:	46bd      	mov	sp, r7
    968a:	b004      	add	sp, #16
    968c:	bdb0      	pop	{r4, r5, r7, pc}
    968e:	46c0      	nop			; (mov r8, r8)
    9690:	00008792 	.word	0x00008792
    9694:	0000869a 	.word	0x0000869a
    9698:	0000008c 	.word	0x0000008c
    969c:	000002b4 	.word	0x000002b4

000096a0 <SERCOM0_Handler>:
    96a0:	b580      	push	{r7, lr}
    96a2:	af00      	add	r7, sp, #0
    96a4:	4b03      	ldr	r3, [pc, #12]	; (96b4 <SERCOM0_Handler+0x14>)
    96a6:	447b      	add	r3, pc
    96a8:	681b      	ldr	r3, [r3, #0]
    96aa:	2000      	movs	r0, #0
    96ac:	4798      	blx	r3
    96ae:	46c0      	nop			; (mov r8, r8)
    96b0:	46bd      	mov	sp, r7
    96b2:	bd80      	pop	{r7, pc}
    96b4:	1fff6e8a 	.word	0x1fff6e8a

000096b8 <SERCOM1_Handler>:
    96b8:	b580      	push	{r7, lr}
    96ba:	af00      	add	r7, sp, #0
    96bc:	4b03      	ldr	r3, [pc, #12]	; (96cc <SERCOM1_Handler+0x14>)
    96be:	447b      	add	r3, pc
    96c0:	685b      	ldr	r3, [r3, #4]
    96c2:	2001      	movs	r0, #1
    96c4:	4798      	blx	r3
    96c6:	46c0      	nop			; (mov r8, r8)
    96c8:	46bd      	mov	sp, r7
    96ca:	bd80      	pop	{r7, pc}
    96cc:	1fff6e72 	.word	0x1fff6e72

000096d0 <SERCOM2_Handler>:
    96d0:	b580      	push	{r7, lr}
    96d2:	af00      	add	r7, sp, #0
    96d4:	4b03      	ldr	r3, [pc, #12]	; (96e4 <SERCOM2_Handler+0x14>)
    96d6:	447b      	add	r3, pc
    96d8:	689b      	ldr	r3, [r3, #8]
    96da:	2002      	movs	r0, #2
    96dc:	4798      	blx	r3
    96de:	46c0      	nop			; (mov r8, r8)
    96e0:	46bd      	mov	sp, r7
    96e2:	bd80      	pop	{r7, pc}
    96e4:	1fff6e5a 	.word	0x1fff6e5a

000096e8 <SERCOM3_Handler>:
    96e8:	b580      	push	{r7, lr}
    96ea:	af00      	add	r7, sp, #0
    96ec:	4b03      	ldr	r3, [pc, #12]	; (96fc <SERCOM3_Handler+0x14>)
    96ee:	447b      	add	r3, pc
    96f0:	68db      	ldr	r3, [r3, #12]
    96f2:	2003      	movs	r0, #3
    96f4:	4798      	blx	r3
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	46bd      	mov	sp, r7
    96fa:	bd80      	pop	{r7, pc}
    96fc:	1fff6e42 	.word	0x1fff6e42

00009700 <SERCOM4_Handler>:
    9700:	b580      	push	{r7, lr}
    9702:	af00      	add	r7, sp, #0
    9704:	4b03      	ldr	r3, [pc, #12]	; (9714 <SERCOM4_Handler+0x14>)
    9706:	447b      	add	r3, pc
    9708:	691b      	ldr	r3, [r3, #16]
    970a:	2004      	movs	r0, #4
    970c:	4798      	blx	r3
    970e:	46c0      	nop			; (mov r8, r8)
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}
    9714:	1fff6e2a 	.word	0x1fff6e2a

00009718 <SERCOM5_Handler>:
    9718:	b580      	push	{r7, lr}
    971a:	af00      	add	r7, sp, #0
    971c:	4b03      	ldr	r3, [pc, #12]	; (972c <SERCOM5_Handler+0x14>)
    971e:	447b      	add	r3, pc
    9720:	695b      	ldr	r3, [r3, #20]
    9722:	2005      	movs	r0, #5
    9724:	4798      	blx	r3
    9726:	46c0      	nop			; (mov r8, r8)
    9728:	46bd      	mov	sp, r7
    972a:	bd80      	pop	{r7, pc}
    972c:	1fff6e12 	.word	0x1fff6e12

00009730 <_extint_get_eic_from_channel>:
    9730:	b580      	push	{r7, lr}
    9732:	b084      	sub	sp, #16
    9734:	af00      	add	r7, sp, #0
    9736:	0002      	movs	r2, r0
    9738:	1dfb      	adds	r3, r7, #7
    973a:	701a      	strb	r2, [r3, #0]
    973c:	230f      	movs	r3, #15
    973e:	18fb      	adds	r3, r7, r3
    9740:	1dfa      	adds	r2, r7, #7
    9742:	7812      	ldrb	r2, [r2, #0]
    9744:	0952      	lsrs	r2, r2, #5
    9746:	701a      	strb	r2, [r3, #0]
    9748:	230f      	movs	r3, #15
    974a:	18fb      	adds	r3, r7, r3
    974c:	781b      	ldrb	r3, [r3, #0]
    974e:	2b00      	cmp	r3, #0
    9750:	d10c      	bne.n	976c <_extint_get_eic_from_channel+0x3c>
    9752:	4b09      	ldr	r3, [pc, #36]	; (9778 <_extint_get_eic_from_channel+0x48>)
    9754:	60bb      	str	r3, [r7, #8]
    9756:	230f      	movs	r3, #15
    9758:	18fb      	adds	r3, r7, r3
    975a:	781b      	ldrb	r3, [r3, #0]
    975c:	009b      	lsls	r3, r3, #2
    975e:	2210      	movs	r2, #16
    9760:	4694      	mov	ip, r2
    9762:	44bc      	add	ip, r7
    9764:	4463      	add	r3, ip
    9766:	3b08      	subs	r3, #8
    9768:	681b      	ldr	r3, [r3, #0]
    976a:	e000      	b.n	976e <_extint_get_eic_from_channel+0x3e>
    976c:	2300      	movs	r3, #0
    976e:	0018      	movs	r0, r3
    9770:	46bd      	mov	sp, r7
    9772:	b004      	add	sp, #16
    9774:	bd80      	pop	{r7, pc}
    9776:	46c0      	nop			; (mov r8, r8)
    9778:	40001800 	.word	0x40001800

0000977c <extint_chan_is_detected>:
    977c:	b580      	push	{r7, lr}
    977e:	b084      	sub	sp, #16
    9780:	af00      	add	r7, sp, #0
    9782:	0002      	movs	r2, r0
    9784:	1dfb      	adds	r3, r7, #7
    9786:	701a      	strb	r2, [r3, #0]
    9788:	1dfb      	adds	r3, r7, #7
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	0018      	movs	r0, r3
    978e:	4b0c      	ldr	r3, [pc, #48]	; (97c0 <extint_chan_is_detected+0x44>)
    9790:	447b      	add	r3, pc
    9792:	4798      	blx	r3
    9794:	0003      	movs	r3, r0
    9796:	60fb      	str	r3, [r7, #12]
    9798:	1dfb      	adds	r3, r7, #7
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	221f      	movs	r2, #31
    979e:	4013      	ands	r3, r2
    97a0:	2201      	movs	r2, #1
    97a2:	409a      	lsls	r2, r3
    97a4:	0013      	movs	r3, r2
    97a6:	60bb      	str	r3, [r7, #8]
    97a8:	68fb      	ldr	r3, [r7, #12]
    97aa:	691b      	ldr	r3, [r3, #16]
    97ac:	68ba      	ldr	r2, [r7, #8]
    97ae:	4013      	ands	r3, r2
    97b0:	1e5a      	subs	r2, r3, #1
    97b2:	4193      	sbcs	r3, r2
    97b4:	b2db      	uxtb	r3, r3
    97b6:	0018      	movs	r0, r3
    97b8:	46bd      	mov	sp, r7
    97ba:	b004      	add	sp, #16
    97bc:	bd80      	pop	{r7, pc}
    97be:	46c0      	nop			; (mov r8, r8)
    97c0:	ffffff9d 	.word	0xffffff9d

000097c4 <extint_chan_clear_detected>:
    97c4:	b580      	push	{r7, lr}
    97c6:	b084      	sub	sp, #16
    97c8:	af00      	add	r7, sp, #0
    97ca:	0002      	movs	r2, r0
    97cc:	1dfb      	adds	r3, r7, #7
    97ce:	701a      	strb	r2, [r3, #0]
    97d0:	1dfb      	adds	r3, r7, #7
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	0018      	movs	r0, r3
    97d6:	4b0a      	ldr	r3, [pc, #40]	; (9800 <extint_chan_clear_detected+0x3c>)
    97d8:	447b      	add	r3, pc
    97da:	4798      	blx	r3
    97dc:	0003      	movs	r3, r0
    97de:	60fb      	str	r3, [r7, #12]
    97e0:	1dfb      	adds	r3, r7, #7
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	221f      	movs	r2, #31
    97e6:	4013      	ands	r3, r2
    97e8:	2201      	movs	r2, #1
    97ea:	409a      	lsls	r2, r3
    97ec:	0013      	movs	r3, r2
    97ee:	60bb      	str	r3, [r7, #8]
    97f0:	68fb      	ldr	r3, [r7, #12]
    97f2:	68ba      	ldr	r2, [r7, #8]
    97f4:	611a      	str	r2, [r3, #16]
    97f6:	46c0      	nop			; (mov r8, r8)
    97f8:	46bd      	mov	sp, r7
    97fa:	b004      	add	sp, #16
    97fc:	bd80      	pop	{r7, pc}
    97fe:	46c0      	nop			; (mov r8, r8)
    9800:	ffffff55 	.word	0xffffff55

00009804 <extint_chan_enable_callback>:
    9804:	b580      	push	{r7, lr}
    9806:	b084      	sub	sp, #16
    9808:	af00      	add	r7, sp, #0
    980a:	0002      	movs	r2, r0
    980c:	1dfb      	adds	r3, r7, #7
    980e:	701a      	strb	r2, [r3, #0]
    9810:	1dbb      	adds	r3, r7, #6
    9812:	1c0a      	adds	r2, r1, #0
    9814:	701a      	strb	r2, [r3, #0]
    9816:	1dbb      	adds	r3, r7, #6
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	2b00      	cmp	r3, #0
    981c:	d10f      	bne.n	983e <extint_chan_enable_callback+0x3a>
    981e:	1dfb      	adds	r3, r7, #7
    9820:	781b      	ldrb	r3, [r3, #0]
    9822:	0018      	movs	r0, r3
    9824:	4b08      	ldr	r3, [pc, #32]	; (9848 <extint_chan_enable_callback+0x44>)
    9826:	447b      	add	r3, pc
    9828:	4798      	blx	r3
    982a:	0003      	movs	r3, r0
    982c:	60fb      	str	r3, [r7, #12]
    982e:	1dfb      	adds	r3, r7, #7
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	2201      	movs	r2, #1
    9834:	409a      	lsls	r2, r3
    9836:	68fb      	ldr	r3, [r7, #12]
    9838:	60da      	str	r2, [r3, #12]
    983a:	2300      	movs	r3, #0
    983c:	e000      	b.n	9840 <extint_chan_enable_callback+0x3c>
    983e:	2317      	movs	r3, #23
    9840:	0018      	movs	r0, r3
    9842:	46bd      	mov	sp, r7
    9844:	b004      	add	sp, #16
    9846:	bd80      	pop	{r7, pc}
    9848:	ffffff07 	.word	0xffffff07

0000984c <EIC_Handler>:
    984c:	b5b0      	push	{r4, r5, r7, lr}
    984e:	af00      	add	r7, sp, #0
    9850:	4c1c      	ldr	r4, [pc, #112]	; (98c4 <EIC_Handler+0x78>)
    9852:	447c      	add	r4, pc
    9854:	4b1c      	ldr	r3, [pc, #112]	; (98c8 <EIC_Handler+0x7c>)
    9856:	58e3      	ldr	r3, [r4, r3]
    9858:	2200      	movs	r2, #0
    985a:	701a      	strb	r2, [r3, #0]
    985c:	e02a      	b.n	98b4 <EIC_Handler+0x68>
    985e:	4b1a      	ldr	r3, [pc, #104]	; (98c8 <EIC_Handler+0x7c>)
    9860:	58e3      	ldr	r3, [r4, r3]
    9862:	781b      	ldrb	r3, [r3, #0]
    9864:	0018      	movs	r0, r3
    9866:	4b19      	ldr	r3, [pc, #100]	; (98cc <EIC_Handler+0x80>)
    9868:	447b      	add	r3, pc
    986a:	4798      	blx	r3
    986c:	1e03      	subs	r3, r0, #0
    986e:	d019      	beq.n	98a4 <EIC_Handler+0x58>
    9870:	4b15      	ldr	r3, [pc, #84]	; (98c8 <EIC_Handler+0x7c>)
    9872:	58e3      	ldr	r3, [r4, r3]
    9874:	781b      	ldrb	r3, [r3, #0]
    9876:	0018      	movs	r0, r3
    9878:	4b15      	ldr	r3, [pc, #84]	; (98d0 <EIC_Handler+0x84>)
    987a:	447b      	add	r3, pc
    987c:	4798      	blx	r3
    987e:	4b12      	ldr	r3, [pc, #72]	; (98c8 <EIC_Handler+0x7c>)
    9880:	58e3      	ldr	r3, [r4, r3]
    9882:	781b      	ldrb	r3, [r3, #0]
    9884:	001a      	movs	r2, r3
    9886:	4b13      	ldr	r3, [pc, #76]	; (98d4 <EIC_Handler+0x88>)
    9888:	58e3      	ldr	r3, [r4, r3]
    988a:	0092      	lsls	r2, r2, #2
    988c:	58d3      	ldr	r3, [r2, r3]
    988e:	2b00      	cmp	r3, #0
    9890:	d008      	beq.n	98a4 <EIC_Handler+0x58>
    9892:	4b0d      	ldr	r3, [pc, #52]	; (98c8 <EIC_Handler+0x7c>)
    9894:	58e3      	ldr	r3, [r4, r3]
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	001a      	movs	r2, r3
    989a:	4b0e      	ldr	r3, [pc, #56]	; (98d4 <EIC_Handler+0x88>)
    989c:	58e3      	ldr	r3, [r4, r3]
    989e:	0092      	lsls	r2, r2, #2
    98a0:	58d3      	ldr	r3, [r2, r3]
    98a2:	4798      	blx	r3
    98a4:	4b08      	ldr	r3, [pc, #32]	; (98c8 <EIC_Handler+0x7c>)
    98a6:	58e3      	ldr	r3, [r4, r3]
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	3301      	adds	r3, #1
    98ac:	b2da      	uxtb	r2, r3
    98ae:	4b06      	ldr	r3, [pc, #24]	; (98c8 <EIC_Handler+0x7c>)
    98b0:	58e3      	ldr	r3, [r4, r3]
    98b2:	701a      	strb	r2, [r3, #0]
    98b4:	4b04      	ldr	r3, [pc, #16]	; (98c8 <EIC_Handler+0x7c>)
    98b6:	58e3      	ldr	r3, [r4, r3]
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	2b0f      	cmp	r3, #15
    98bc:	d9cf      	bls.n	985e <EIC_Handler+0x12>
    98be:	46c0      	nop			; (mov r8, r8)
    98c0:	46bd      	mov	sp, r7
    98c2:	bdb0      	pop	{r4, r5, r7, pc}
    98c4:	0000858e 	.word	0x0000858e
    98c8:	000001f4 	.word	0x000001f4
    98cc:	ffffff11 	.word	0xffffff11
    98d0:	ffffff47 	.word	0xffffff47
    98d4:	00000180 	.word	0x00000180

000098d8 <bod_set_config>:
    98d8:	b580      	push	{r7, lr}
    98da:	b084      	sub	sp, #16
    98dc:	af00      	add	r7, sp, #0
    98de:	0002      	movs	r2, r0
    98e0:	6039      	str	r1, [r7, #0]
    98e2:	1dfb      	adds	r3, r7, #7
    98e4:	701a      	strb	r2, [r3, #0]
    98e6:	2300      	movs	r3, #0
    98e8:	60fb      	str	r3, [r7, #12]
    98ea:	4b2b      	ldr	r3, [pc, #172]	; (9998 <bod_set_config+0xc0>)
    98ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    98ee:	2202      	movs	r2, #2
    98f0:	4013      	ands	r3, r2
    98f2:	d005      	beq.n	9900 <bod_set_config+0x28>
    98f4:	4b28      	ldr	r3, [pc, #160]	; (9998 <bod_set_config+0xc0>)
    98f6:	4a28      	ldr	r2, [pc, #160]	; (9998 <bod_set_config+0xc0>)
    98f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
    98fa:	2102      	movs	r1, #2
    98fc:	438a      	bics	r2, r1
    98fe:	635a      	str	r2, [r3, #52]	; 0x34
    9900:	683b      	ldr	r3, [r7, #0]
    9902:	881b      	ldrh	r3, [r3, #0]
    9904:	001a      	movs	r2, r3
    9906:	683b      	ldr	r3, [r7, #0]
    9908:	791b      	ldrb	r3, [r3, #4]
    990a:	4313      	orrs	r3, r2
    990c:	683a      	ldr	r2, [r7, #0]
    990e:	8852      	ldrh	r2, [r2, #2]
    9910:	4313      	orrs	r3, r2
    9912:	68fa      	ldr	r2, [r7, #12]
    9914:	4313      	orrs	r3, r2
    9916:	60fb      	str	r3, [r7, #12]
    9918:	683b      	ldr	r3, [r7, #0]
    991a:	885a      	ldrh	r2, [r3, #2]
    991c:	2380      	movs	r3, #128	; 0x80
    991e:	005b      	lsls	r3, r3, #1
    9920:	429a      	cmp	r2, r3
    9922:	d104      	bne.n	992e <bod_set_config+0x56>
    9924:	68fb      	ldr	r3, [r7, #12]
    9926:	2280      	movs	r2, #128	; 0x80
    9928:	0092      	lsls	r2, r2, #2
    992a:	4313      	orrs	r3, r2
    992c:	60fb      	str	r3, [r7, #12]
    992e:	683b      	ldr	r3, [r7, #0]
    9930:	799b      	ldrb	r3, [r3, #6]
    9932:	2b00      	cmp	r3, #0
    9934:	d003      	beq.n	993e <bod_set_config+0x66>
    9936:	68fb      	ldr	r3, [r7, #12]
    9938:	2204      	movs	r2, #4
    993a:	4313      	orrs	r3, r2
    993c:	60fb      	str	r3, [r7, #12]
    993e:	683b      	ldr	r3, [r7, #0]
    9940:	79db      	ldrb	r3, [r3, #7]
    9942:	2b00      	cmp	r3, #0
    9944:	d003      	beq.n	994e <bod_set_config+0x76>
    9946:	68fb      	ldr	r3, [r7, #12]
    9948:	2240      	movs	r2, #64	; 0x40
    994a:	4313      	orrs	r3, r2
    994c:	60fb      	str	r3, [r7, #12]
    994e:	1dfb      	adds	r3, r7, #7
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	2b00      	cmp	r3, #0
    9954:	d118      	bne.n	9988 <bod_set_config+0xb0>
    9956:	683b      	ldr	r3, [r7, #0]
    9958:	795b      	ldrb	r3, [r3, #5]
    995a:	2b3f      	cmp	r3, #63	; 0x3f
    995c:	d901      	bls.n	9962 <bod_set_config+0x8a>
    995e:	2317      	movs	r3, #23
    9960:	e015      	b.n	998e <bod_set_config+0xb6>
    9962:	4b0d      	ldr	r3, [pc, #52]	; (9998 <bod_set_config+0xc0>)
    9964:	683a      	ldr	r2, [r7, #0]
    9966:	7952      	ldrb	r2, [r2, #5]
    9968:	0412      	lsls	r2, r2, #16
    996a:	0011      	movs	r1, r2
    996c:	22fc      	movs	r2, #252	; 0xfc
    996e:	0392      	lsls	r2, r2, #14
    9970:	4011      	ands	r1, r2
    9972:	68fa      	ldr	r2, [r7, #12]
    9974:	430a      	orrs	r2, r1
    9976:	635a      	str	r2, [r3, #52]	; 0x34
    9978:	46c0      	nop			; (mov r8, r8)
    997a:	4b07      	ldr	r3, [pc, #28]	; (9998 <bod_set_config+0xc0>)
    997c:	68da      	ldr	r2, [r3, #12]
    997e:	2380      	movs	r3, #128	; 0x80
    9980:	011b      	lsls	r3, r3, #4
    9982:	4013      	ands	r3, r2
    9984:	d0f9      	beq.n	997a <bod_set_config+0xa2>
    9986:	e001      	b.n	998c <bod_set_config+0xb4>
    9988:	2317      	movs	r3, #23
    998a:	e000      	b.n	998e <bod_set_config+0xb6>
    998c:	2300      	movs	r3, #0
    998e:	0018      	movs	r0, r3
    9990:	46bd      	mov	sp, r7
    9992:	b004      	add	sp, #16
    9994:	bd80      	pop	{r7, pc}
    9996:	46c0      	nop			; (mov r8, r8)
    9998:	40000800 	.word	0x40000800

0000999c <delay_cycles>:
    999c:	b580      	push	{r7, lr}
    999e:	b082      	sub	sp, #8
    99a0:	af00      	add	r7, sp, #0
    99a2:	6078      	str	r0, [r7, #4]
    99a4:	687b      	ldr	r3, [r7, #4]
    99a6:	2b00      	cmp	r3, #0
    99a8:	d00c      	beq.n	99c4 <delay_cycles+0x28>
    99aa:	4b08      	ldr	r3, [pc, #32]	; (99cc <delay_cycles+0x30>)
    99ac:	687a      	ldr	r2, [r7, #4]
    99ae:	605a      	str	r2, [r3, #4]
    99b0:	4b06      	ldr	r3, [pc, #24]	; (99cc <delay_cycles+0x30>)
    99b2:	2200      	movs	r2, #0
    99b4:	609a      	str	r2, [r3, #8]
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	4b04      	ldr	r3, [pc, #16]	; (99cc <delay_cycles+0x30>)
    99ba:	681a      	ldr	r2, [r3, #0]
    99bc:	2380      	movs	r3, #128	; 0x80
    99be:	025b      	lsls	r3, r3, #9
    99c0:	4013      	ands	r3, r2
    99c2:	d0f9      	beq.n	99b8 <delay_cycles+0x1c>
    99c4:	46c0      	nop			; (mov r8, r8)
    99c6:	46bd      	mov	sp, r7
    99c8:	b002      	add	sp, #8
    99ca:	bd80      	pop	{r7, pc}
    99cc:	e000e010 	.word	0xe000e010

000099d0 <delay_init>:
    99d0:	b5b0      	push	{r4, r5, r7, lr}
    99d2:	af00      	add	r7, sp, #0
    99d4:	4c15      	ldr	r4, [pc, #84]	; (9a2c <delay_init+0x5c>)
    99d6:	447c      	add	r4, pc
    99d8:	2000      	movs	r0, #0
    99da:	4b15      	ldr	r3, [pc, #84]	; (9a30 <delay_init+0x60>)
    99dc:	58e3      	ldr	r3, [r4, r3]
    99de:	4798      	blx	r3
    99e0:	0002      	movs	r2, r0
    99e2:	4b14      	ldr	r3, [pc, #80]	; (9a34 <delay_init+0x64>)
    99e4:	447b      	add	r3, pc
    99e6:	601a      	str	r2, [r3, #0]
    99e8:	4b13      	ldr	r3, [pc, #76]	; (9a38 <delay_init+0x68>)
    99ea:	447b      	add	r3, pc
    99ec:	6818      	ldr	r0, [r3, #0]
    99ee:	4b13      	ldr	r3, [pc, #76]	; (9a3c <delay_init+0x6c>)
    99f0:	58e3      	ldr	r3, [r4, r3]
    99f2:	001a      	movs	r2, r3
    99f4:	23fa      	movs	r3, #250	; 0xfa
    99f6:	0099      	lsls	r1, r3, #2
    99f8:	4790      	blx	r2
    99fa:	0003      	movs	r3, r0
    99fc:	001a      	movs	r2, r3
    99fe:	4b10      	ldr	r3, [pc, #64]	; (9a40 <delay_init+0x70>)
    9a00:	447b      	add	r3, pc
    9a02:	601a      	str	r2, [r3, #0]
    9a04:	4b0f      	ldr	r3, [pc, #60]	; (9a44 <delay_init+0x74>)
    9a06:	447b      	add	r3, pc
    9a08:	6818      	ldr	r0, [r3, #0]
    9a0a:	4b0c      	ldr	r3, [pc, #48]	; (9a3c <delay_init+0x6c>)
    9a0c:	58e3      	ldr	r3, [r4, r3]
    9a0e:	001a      	movs	r2, r3
    9a10:	23fa      	movs	r3, #250	; 0xfa
    9a12:	0099      	lsls	r1, r3, #2
    9a14:	4790      	blx	r2
    9a16:	0003      	movs	r3, r0
    9a18:	001a      	movs	r2, r3
    9a1a:	4b0b      	ldr	r3, [pc, #44]	; (9a48 <delay_init+0x78>)
    9a1c:	447b      	add	r3, pc
    9a1e:	601a      	str	r2, [r3, #0]
    9a20:	4b0a      	ldr	r3, [pc, #40]	; (9a4c <delay_init+0x7c>)
    9a22:	2205      	movs	r2, #5
    9a24:	601a      	str	r2, [r3, #0]
    9a26:	46c0      	nop			; (mov r8, r8)
    9a28:	46bd      	mov	sp, r7
    9a2a:	bdb0      	pop	{r4, r5, r7, pc}
    9a2c:	0000840a 	.word	0x0000840a
    9a30:	000000e0 	.word	0x000000e0
    9a34:	1fff6708 	.word	0x1fff6708
    9a38:	1fff6702 	.word	0x1fff6702
    9a3c:	0000020c 	.word	0x0000020c
    9a40:	1fff66ec 	.word	0x1fff66ec
    9a44:	1fff66e6 	.word	0x1fff66e6
    9a48:	1fff66d4 	.word	0x1fff66d4
    9a4c:	e000e010 	.word	0xe000e010

00009a50 <delay_cycles_us>:
    9a50:	b580      	push	{r7, lr}
    9a52:	b082      	sub	sp, #8
    9a54:	af00      	add	r7, sp, #0
    9a56:	6078      	str	r0, [r7, #4]
    9a58:	e006      	b.n	9a68 <delay_cycles_us+0x18>
    9a5a:	4b08      	ldr	r3, [pc, #32]	; (9a7c <delay_cycles_us+0x2c>)
    9a5c:	447b      	add	r3, pc
    9a5e:	681b      	ldr	r3, [r3, #0]
    9a60:	0018      	movs	r0, r3
    9a62:	4b07      	ldr	r3, [pc, #28]	; (9a80 <delay_cycles_us+0x30>)
    9a64:	447b      	add	r3, pc
    9a66:	4798      	blx	r3
    9a68:	687b      	ldr	r3, [r7, #4]
    9a6a:	1e5a      	subs	r2, r3, #1
    9a6c:	607a      	str	r2, [r7, #4]
    9a6e:	2b00      	cmp	r3, #0
    9a70:	d1f3      	bne.n	9a5a <delay_cycles_us+0xa>
    9a72:	46c0      	nop			; (mov r8, r8)
    9a74:	46bd      	mov	sp, r7
    9a76:	b002      	add	sp, #8
    9a78:	bd80      	pop	{r7, pc}
    9a7a:	46c0      	nop			; (mov r8, r8)
    9a7c:	1fff6694 	.word	0x1fff6694
    9a80:	ffffff35 	.word	0xffffff35

00009a84 <delay_cycles_ms>:
    9a84:	b580      	push	{r7, lr}
    9a86:	b082      	sub	sp, #8
    9a88:	af00      	add	r7, sp, #0
    9a8a:	6078      	str	r0, [r7, #4]
    9a8c:	e006      	b.n	9a9c <delay_cycles_ms+0x18>
    9a8e:	4b08      	ldr	r3, [pc, #32]	; (9ab0 <delay_cycles_ms+0x2c>)
    9a90:	447b      	add	r3, pc
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	0018      	movs	r0, r3
    9a96:	4b07      	ldr	r3, [pc, #28]	; (9ab4 <delay_cycles_ms+0x30>)
    9a98:	447b      	add	r3, pc
    9a9a:	4798      	blx	r3
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	1e5a      	subs	r2, r3, #1
    9aa0:	607a      	str	r2, [r7, #4]
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d1f3      	bne.n	9a8e <delay_cycles_ms+0xa>
    9aa6:	46c0      	nop			; (mov r8, r8)
    9aa8:	46bd      	mov	sp, r7
    9aaa:	b002      	add	sp, #8
    9aac:	bd80      	pop	{r7, pc}
    9aae:	46c0      	nop			; (mov r8, r8)
    9ab0:	1fff665c 	.word	0x1fff665c
    9ab4:	ffffff01 	.word	0xffffff01

00009ab8 <system_pinmux_get_group_from_gpio_pin>:
{
    9ab8:	b580      	push	{r7, lr}
    9aba:	b084      	sub	sp, #16
    9abc:	af00      	add	r7, sp, #0
    9abe:	0002      	movs	r2, r0
    9ac0:	1dfb      	adds	r3, r7, #7
    9ac2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9ac4:	230f      	movs	r3, #15
    9ac6:	18fb      	adds	r3, r7, r3
    9ac8:	1dfa      	adds	r2, r7, #7
    9aca:	7812      	ldrb	r2, [r2, #0]
    9acc:	09d2      	lsrs	r2, r2, #7
    9ace:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9ad0:	230e      	movs	r3, #14
    9ad2:	18fb      	adds	r3, r7, r3
    9ad4:	1dfa      	adds	r2, r7, #7
    9ad6:	7812      	ldrb	r2, [r2, #0]
    9ad8:	0952      	lsrs	r2, r2, #5
    9ada:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9adc:	4b0d      	ldr	r3, [pc, #52]	; (9b14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9ade:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9ae0:	230f      	movs	r3, #15
    9ae2:	18fb      	adds	r3, r7, r3
    9ae4:	781b      	ldrb	r3, [r3, #0]
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d10f      	bne.n	9b0a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9aea:	230f      	movs	r3, #15
    9aec:	18fb      	adds	r3, r7, r3
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	009b      	lsls	r3, r3, #2
    9af2:	2210      	movs	r2, #16
    9af4:	4694      	mov	ip, r2
    9af6:	44bc      	add	ip, r7
    9af8:	4463      	add	r3, ip
    9afa:	3b08      	subs	r3, #8
    9afc:	681a      	ldr	r2, [r3, #0]
    9afe:	230e      	movs	r3, #14
    9b00:	18fb      	adds	r3, r7, r3
    9b02:	781b      	ldrb	r3, [r3, #0]
    9b04:	01db      	lsls	r3, r3, #7
    9b06:	18d3      	adds	r3, r2, r3
    9b08:	e000      	b.n	9b0c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9b0a:	2300      	movs	r3, #0
}
    9b0c:	0018      	movs	r0, r3
    9b0e:	46bd      	mov	sp, r7
    9b10:	b004      	add	sp, #16
    9b12:	bd80      	pop	{r7, pc}
    9b14:	41004400 	.word	0x41004400

00009b18 <port_get_group_from_gpio_pin>:
{
    9b18:	b580      	push	{r7, lr}
    9b1a:	b082      	sub	sp, #8
    9b1c:	af00      	add	r7, sp, #0
    9b1e:	0002      	movs	r2, r0
    9b20:	1dfb      	adds	r3, r7, #7
    9b22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9b24:	1dfb      	adds	r3, r7, #7
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	0018      	movs	r0, r3
    9b2a:	4b04      	ldr	r3, [pc, #16]	; (9b3c <port_get_group_from_gpio_pin+0x24>)
    9b2c:	447b      	add	r3, pc
    9b2e:	4798      	blx	r3
    9b30:	0003      	movs	r3, r0
}
    9b32:	0018      	movs	r0, r3
    9b34:	46bd      	mov	sp, r7
    9b36:	b002      	add	sp, #8
    9b38:	bd80      	pop	{r7, pc}
    9b3a:	46c0      	nop			; (mov r8, r8)
    9b3c:	ffffff89 	.word	0xffffff89

00009b40 <port_get_config_defaults>:
{
    9b40:	b580      	push	{r7, lr}
    9b42:	b082      	sub	sp, #8
    9b44:	af00      	add	r7, sp, #0
    9b46:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    9b48:	687b      	ldr	r3, [r7, #4]
    9b4a:	2200      	movs	r2, #0
    9b4c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	2201      	movs	r2, #1
    9b52:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	2200      	movs	r2, #0
    9b58:	709a      	strb	r2, [r3, #2]
}
    9b5a:	46c0      	nop			; (mov r8, r8)
    9b5c:	46bd      	mov	sp, r7
    9b5e:	b002      	add	sp, #8
    9b60:	bd80      	pop	{r7, pc}
	...

00009b64 <port_pin_set_output_level>:
{
    9b64:	b580      	push	{r7, lr}
    9b66:	b084      	sub	sp, #16
    9b68:	af00      	add	r7, sp, #0
    9b6a:	0002      	movs	r2, r0
    9b6c:	1dfb      	adds	r3, r7, #7
    9b6e:	701a      	strb	r2, [r3, #0]
    9b70:	1dbb      	adds	r3, r7, #6
    9b72:	1c0a      	adds	r2, r1, #0
    9b74:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9b76:	1dfb      	adds	r3, r7, #7
    9b78:	781b      	ldrb	r3, [r3, #0]
    9b7a:	0018      	movs	r0, r3
    9b7c:	4b0d      	ldr	r3, [pc, #52]	; (9bb4 <port_pin_set_output_level+0x50>)
    9b7e:	447b      	add	r3, pc
    9b80:	4798      	blx	r3
    9b82:	0003      	movs	r3, r0
    9b84:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9b86:	1dfb      	adds	r3, r7, #7
    9b88:	781b      	ldrb	r3, [r3, #0]
    9b8a:	221f      	movs	r2, #31
    9b8c:	4013      	ands	r3, r2
    9b8e:	2201      	movs	r2, #1
    9b90:	409a      	lsls	r2, r3
    9b92:	0013      	movs	r3, r2
    9b94:	60bb      	str	r3, [r7, #8]
	if (level) {
    9b96:	1dbb      	adds	r3, r7, #6
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d003      	beq.n	9ba6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    9b9e:	68fb      	ldr	r3, [r7, #12]
    9ba0:	68ba      	ldr	r2, [r7, #8]
    9ba2:	619a      	str	r2, [r3, #24]
}
    9ba4:	e002      	b.n	9bac <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    9ba6:	68fb      	ldr	r3, [r7, #12]
    9ba8:	68ba      	ldr	r2, [r7, #8]
    9baa:	615a      	str	r2, [r3, #20]
}
    9bac:	46c0      	nop			; (mov r8, r8)
    9bae:	46bd      	mov	sp, r7
    9bb0:	b004      	add	sp, #16
    9bb2:	bd80      	pop	{r7, pc}
    9bb4:	ffffff97 	.word	0xffffff97

00009bb8 <system_interrupt_enable>:
{
    9bb8:	b580      	push	{r7, lr}
    9bba:	b082      	sub	sp, #8
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	0002      	movs	r2, r0
    9bc0:	1dfb      	adds	r3, r7, #7
    9bc2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9bc4:	4b06      	ldr	r3, [pc, #24]	; (9be0 <system_interrupt_enable+0x28>)
    9bc6:	1dfa      	adds	r2, r7, #7
    9bc8:	7812      	ldrb	r2, [r2, #0]
    9bca:	0011      	movs	r1, r2
    9bcc:	221f      	movs	r2, #31
    9bce:	400a      	ands	r2, r1
    9bd0:	2101      	movs	r1, #1
    9bd2:	4091      	lsls	r1, r2
    9bd4:	000a      	movs	r2, r1
    9bd6:	601a      	str	r2, [r3, #0]
}
    9bd8:	46c0      	nop			; (mov r8, r8)
    9bda:	46bd      	mov	sp, r7
    9bdc:	b002      	add	sp, #8
    9bde:	bd80      	pop	{r7, pc}
    9be0:	e000e100 	.word	0xe000e100

00009be4 <spi_is_syncing>:
{
    9be4:	b580      	push	{r7, lr}
    9be6:	b084      	sub	sp, #16
    9be8:	af00      	add	r7, sp, #0
    9bea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9bec:	687b      	ldr	r3, [r7, #4]
    9bee:	681b      	ldr	r3, [r3, #0]
    9bf0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    9bf2:	68fb      	ldr	r3, [r7, #12]
    9bf4:	69db      	ldr	r3, [r3, #28]
    9bf6:	1e5a      	subs	r2, r3, #1
    9bf8:	4193      	sbcs	r3, r2
    9bfa:	b2db      	uxtb	r3, r3
}
    9bfc:	0018      	movs	r0, r3
    9bfe:	46bd      	mov	sp, r7
    9c00:	b004      	add	sp, #16
    9c02:	bd80      	pop	{r7, pc}

00009c04 <spi_get_config_defaults>:
{
    9c04:	b590      	push	{r4, r7, lr}
    9c06:	b083      	sub	sp, #12
    9c08:	af00      	add	r7, sp, #0
    9c0a:	6078      	str	r0, [r7, #4]
    9c0c:	4c1e      	ldr	r4, [pc, #120]	; (9c88 <spi_get_config_defaults+0x84>)
    9c0e:	447c      	add	r4, pc
	config->mode             = SPI_MODE_MASTER;
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	2201      	movs	r2, #1
    9c14:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9c16:	687b      	ldr	r3, [r7, #4]
    9c18:	2200      	movs	r2, #0
    9c1a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9c1c:	687b      	ldr	r3, [r7, #4]
    9c1e:	2200      	movs	r2, #0
    9c20:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	22c0      	movs	r2, #192	; 0xc0
    9c26:	0392      	lsls	r2, r2, #14
    9c28:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9c2a:	687b      	ldr	r3, [r7, #4]
    9c2c:	2200      	movs	r2, #0
    9c2e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    9c30:	687b      	ldr	r3, [r7, #4]
    9c32:	2200      	movs	r2, #0
    9c34:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	2201      	movs	r2, #1
    9c3a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    9c3c:	687b      	ldr	r3, [r7, #4]
    9c3e:	2201      	movs	r2, #1
    9c40:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    9c42:	687b      	ldr	r3, [r7, #4]
    9c44:	2200      	movs	r2, #0
    9c46:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    9c48:	687b      	ldr	r3, [r7, #4]
    9c4a:	2224      	movs	r2, #36	; 0x24
    9c4c:	2100      	movs	r1, #0
    9c4e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	3318      	adds	r3, #24
    9c54:	220c      	movs	r2, #12
    9c56:	2100      	movs	r1, #0
    9c58:	0018      	movs	r0, r3
    9c5a:	4b0c      	ldr	r3, [pc, #48]	; (9c8c <spi_get_config_defaults+0x88>)
    9c5c:	58e3      	ldr	r3, [r4, r3]
    9c5e:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	4a0b      	ldr	r2, [pc, #44]	; (9c90 <spi_get_config_defaults+0x8c>)
    9c64:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	2200      	movs	r2, #0
    9c6a:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9c6c:	687b      	ldr	r3, [r7, #4]
    9c6e:	2200      	movs	r2, #0
    9c70:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	2200      	movs	r2, #0
    9c76:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	2200      	movs	r2, #0
    9c7c:	635a      	str	r2, [r3, #52]	; 0x34
};
    9c7e:	46c0      	nop			; (mov r8, r8)
    9c80:	46bd      	mov	sp, r7
    9c82:	b003      	add	sp, #12
    9c84:	bd90      	pop	{r4, r7, pc}
    9c86:	46c0      	nop			; (mov r8, r8)
    9c88:	000081d2 	.word	0x000081d2
    9c8c:	000001f8 	.word	0x000001f8
    9c90:	000186a0 	.word	0x000186a0

00009c94 <spi_slave_inst_get_config_defaults>:
{
    9c94:	b580      	push	{r7, lr}
    9c96:	b082      	sub	sp, #8
    9c98:	af00      	add	r7, sp, #0
    9c9a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    9c9c:	687b      	ldr	r3, [r7, #4]
    9c9e:	220a      	movs	r2, #10
    9ca0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	2200      	movs	r2, #0
    9ca6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	2200      	movs	r2, #0
    9cac:	709a      	strb	r2, [r3, #2]
}
    9cae:	46c0      	nop			; (mov r8, r8)
    9cb0:	46bd      	mov	sp, r7
    9cb2:	b002      	add	sp, #8
    9cb4:	bd80      	pop	{r7, pc}
	...

00009cb8 <spi_attach_slave>:
{
    9cb8:	b590      	push	{r4, r7, lr}
    9cba:	b085      	sub	sp, #20
    9cbc:	af00      	add	r7, sp, #0
    9cbe:	6078      	str	r0, [r7, #4]
    9cc0:	6039      	str	r1, [r7, #0]
    9cc2:	4c16      	ldr	r4, [pc, #88]	; (9d1c <spi_attach_slave+0x64>)
    9cc4:	447c      	add	r4, pc
	slave->ss_pin          = config->ss_pin;
    9cc6:	683b      	ldr	r3, [r7, #0]
    9cc8:	781a      	ldrb	r2, [r3, #0]
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    9cce:	683b      	ldr	r3, [r7, #0]
    9cd0:	785a      	ldrb	r2, [r3, #1]
    9cd2:	687b      	ldr	r3, [r7, #4]
    9cd4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    9cd6:	683b      	ldr	r3, [r7, #0]
    9cd8:	789a      	ldrb	r2, [r3, #2]
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    9cde:	230c      	movs	r3, #12
    9ce0:	18fb      	adds	r3, r7, r3
    9ce2:	0018      	movs	r0, r3
    9ce4:	4b0e      	ldr	r3, [pc, #56]	; (9d20 <spi_attach_slave+0x68>)
    9ce6:	447b      	add	r3, pc
    9ce8:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    9cea:	230c      	movs	r3, #12
    9cec:	18fb      	adds	r3, r7, r3
    9cee:	2201      	movs	r2, #1
    9cf0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	781b      	ldrb	r3, [r3, #0]
    9cf6:	220c      	movs	r2, #12
    9cf8:	18ba      	adds	r2, r7, r2
    9cfa:	0011      	movs	r1, r2
    9cfc:	0018      	movs	r0, r3
    9cfe:	4b09      	ldr	r3, [pc, #36]	; (9d24 <spi_attach_slave+0x6c>)
    9d00:	58e3      	ldr	r3, [r4, r3]
    9d02:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	2101      	movs	r1, #1
    9d0a:	0018      	movs	r0, r3
    9d0c:	4b06      	ldr	r3, [pc, #24]	; (9d28 <spi_attach_slave+0x70>)
    9d0e:	447b      	add	r3, pc
    9d10:	4798      	blx	r3
}
    9d12:	46c0      	nop			; (mov r8, r8)
    9d14:	46bd      	mov	sp, r7
    9d16:	b005      	add	sp, #20
    9d18:	bd90      	pop	{r4, r7, pc}
    9d1a:	46c0      	nop			; (mov r8, r8)
    9d1c:	0000811c 	.word	0x0000811c
    9d20:	fffffe57 	.word	0xfffffe57
    9d24:	00000240 	.word	0x00000240
    9d28:	fffffe53 	.word	0xfffffe53

00009d2c <spi_enable>:
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b084      	sub	sp, #16
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
    9d34:	4a10      	ldr	r2, [pc, #64]	; (9d78 <spi_enable+0x4c>)
    9d36:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	681b      	ldr	r3, [r3, #0]
    9d3c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	681b      	ldr	r3, [r3, #0]
    9d42:	0018      	movs	r0, r3
    9d44:	4b0d      	ldr	r3, [pc, #52]	; (9d7c <spi_enable+0x50>)
    9d46:	58d3      	ldr	r3, [r2, r3]
    9d48:	4798      	blx	r3
    9d4a:	0003      	movs	r3, r0
    9d4c:	0018      	movs	r0, r3
    9d4e:	4b0c      	ldr	r3, [pc, #48]	; (9d80 <spi_enable+0x54>)
    9d50:	447b      	add	r3, pc
    9d52:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    9d54:	46c0      	nop			; (mov r8, r8)
    9d56:	687b      	ldr	r3, [r7, #4]
    9d58:	0018      	movs	r0, r3
    9d5a:	4b0a      	ldr	r3, [pc, #40]	; (9d84 <spi_enable+0x58>)
    9d5c:	447b      	add	r3, pc
    9d5e:	4798      	blx	r3
    9d60:	1e03      	subs	r3, r0, #0
    9d62:	d1f8      	bne.n	9d56 <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9d64:	68fb      	ldr	r3, [r7, #12]
    9d66:	681b      	ldr	r3, [r3, #0]
    9d68:	2202      	movs	r2, #2
    9d6a:	431a      	orrs	r2, r3
    9d6c:	68fb      	ldr	r3, [r7, #12]
    9d6e:	601a      	str	r2, [r3, #0]
}
    9d70:	46c0      	nop			; (mov r8, r8)
    9d72:	46bd      	mov	sp, r7
    9d74:	b004      	add	sp, #16
    9d76:	bd80      	pop	{r7, pc}
    9d78:	000080aa 	.word	0x000080aa
    9d7c:	000000a8 	.word	0x000000a8
    9d80:	fffffe65 	.word	0xfffffe65
    9d84:	fffffe85 	.word	0xfffffe85

00009d88 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    9d88:	b580      	push	{r7, lr}
    9d8a:	b084      	sub	sp, #16
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	6078      	str	r0, [r7, #4]
    9d90:	000a      	movs	r2, r1
    9d92:	1cfb      	adds	r3, r7, #3
    9d94:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    9d96:	230f      	movs	r3, #15
    9d98:	18fb      	adds	r3, r7, r3
    9d9a:	2200      	movs	r2, #0
    9d9c:	701a      	strb	r2, [r3, #0]
	while (size--) {
    9d9e:	e038      	b.n	9e12 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    9da0:	687b      	ldr	r3, [r7, #4]
    9da2:	1c5a      	adds	r2, r3, #1
    9da4:	607a      	str	r2, [r7, #4]
    9da6:	220e      	movs	r2, #14
    9da8:	18ba      	adds	r2, r7, r2
    9daa:	781b      	ldrb	r3, [r3, #0]
    9dac:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    9dae:	230d      	movs	r3, #13
    9db0:	18fb      	adds	r3, r7, r3
    9db2:	2200      	movs	r2, #0
    9db4:	701a      	strb	r2, [r3, #0]
    9db6:	e027      	b.n	9e08 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    9db8:	230f      	movs	r3, #15
    9dba:	18fa      	adds	r2, r7, r3
    9dbc:	230f      	movs	r3, #15
    9dbe:	18fb      	adds	r3, r7, r3
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	18db      	adds	r3, r3, r3
    9dc4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    9dc6:	230e      	movs	r3, #14
    9dc8:	18fa      	adds	r2, r7, r3
    9dca:	230f      	movs	r3, #15
    9dcc:	18fb      	adds	r3, r7, r3
    9dce:	7812      	ldrb	r2, [r2, #0]
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	4053      	eors	r3, r2
    9dd4:	b2db      	uxtb	r3, r3
    9dd6:	b25b      	sxtb	r3, r3
    9dd8:	2b00      	cmp	r3, #0
    9dda:	da07      	bge.n	9dec <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    9ddc:	230f      	movs	r3, #15
    9dde:	18fb      	adds	r3, r7, r3
    9de0:	220f      	movs	r2, #15
    9de2:	18ba      	adds	r2, r7, r2
    9de4:	7812      	ldrb	r2, [r2, #0]
    9de6:	2109      	movs	r1, #9
    9de8:	404a      	eors	r2, r1
    9dea:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    9dec:	230e      	movs	r3, #14
    9dee:	18fa      	adds	r2, r7, r3
    9df0:	230e      	movs	r3, #14
    9df2:	18fb      	adds	r3, r7, r3
    9df4:	781b      	ldrb	r3, [r3, #0]
    9df6:	18db      	adds	r3, r3, r3
    9df8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    9dfa:	230d      	movs	r3, #13
    9dfc:	18fb      	adds	r3, r7, r3
    9dfe:	781a      	ldrb	r2, [r3, #0]
    9e00:	230d      	movs	r3, #13
    9e02:	18fb      	adds	r3, r7, r3
    9e04:	3201      	adds	r2, #1
    9e06:	701a      	strb	r2, [r3, #0]
    9e08:	230d      	movs	r3, #13
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	2b07      	cmp	r3, #7
    9e10:	d9d2      	bls.n	9db8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    9e12:	1cfb      	adds	r3, r7, #3
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	1cfa      	adds	r2, r7, #3
    9e18:	1e59      	subs	r1, r3, #1
    9e1a:	7011      	strb	r1, [r2, #0]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d1bf      	bne.n	9da0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    9e20:	230f      	movs	r3, #15
    9e22:	18fb      	adds	r3, r7, r3
    9e24:	781b      	ldrb	r3, [r3, #0]
    9e26:	005b      	lsls	r3, r3, #1
    9e28:	b25b      	sxtb	r3, r3
    9e2a:	2201      	movs	r2, #1
    9e2c:	4313      	orrs	r3, r2
    9e2e:	b25a      	sxtb	r2, r3
    9e30:	230f      	movs	r3, #15
    9e32:	18fb      	adds	r3, r7, r3
    9e34:	701a      	strb	r2, [r3, #0]
	return crc;
    9e36:	230f      	movs	r3, #15
    9e38:	18fb      	adds	r3, r7, r3
    9e3a:	781b      	ldrb	r3, [r3, #0]
}
    9e3c:	0018      	movs	r0, r3
    9e3e:	46bd      	mov	sp, r7
    9e40:	b004      	add	sp, #16
    9e42:	bd80      	pop	{r7, pc}

00009e44 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    9e44:	b5b0      	push	{r4, r5, r7, lr}
    9e46:	b082      	sub	sp, #8
    9e48:	af00      	add	r7, sp, #0
    9e4a:	4c1c      	ldr	r4, [pc, #112]	; (9ebc <sd_mmc_spi_wait_busy+0x78>)
    9e4c:	447c      	add	r4, pc
	uint8_t line = 0xFF;
    9e4e:	1c7b      	adds	r3, r7, #1
    9e50:	22ff      	movs	r2, #255	; 0xff
    9e52:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    9e54:	1cbb      	adds	r3, r7, #2
    9e56:	22ff      	movs	r2, #255	; 0xff
    9e58:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9e5a:	1cbb      	adds	r3, r7, #2
    9e5c:	881b      	ldrh	r3, [r3, #0]
    9e5e:	1c79      	adds	r1, r7, #1
    9e60:	4a17      	ldr	r2, [pc, #92]	; (9ec0 <sd_mmc_spi_wait_busy+0x7c>)
    9e62:	447a      	add	r2, pc
    9e64:	0010      	movs	r0, r2
    9e66:	2201      	movs	r2, #1
    9e68:	4d16      	ldr	r5, [pc, #88]	; (9ec4 <sd_mmc_spi_wait_busy+0x80>)
    9e6a:	5965      	ldr	r5, [r4, r5]
    9e6c:	47a8      	blx	r5
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    9e6e:	4b16      	ldr	r3, [pc, #88]	; (9ec8 <sd_mmc_spi_wait_busy+0x84>)
    9e70:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9e72:	1cbb      	adds	r3, r7, #2
    9e74:	881b      	ldrh	r3, [r3, #0]
    9e76:	1c79      	adds	r1, r7, #1
    9e78:	4a14      	ldr	r2, [pc, #80]	; (9ecc <sd_mmc_spi_wait_busy+0x88>)
    9e7a:	447a      	add	r2, pc
    9e7c:	0010      	movs	r0, r2
    9e7e:	2201      	movs	r2, #1
    9e80:	4d10      	ldr	r5, [pc, #64]	; (9ec4 <sd_mmc_spi_wait_busy+0x80>)
    9e82:	5965      	ldr	r5, [r4, r5]
    9e84:	47a8      	blx	r5
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    9e86:	1cbb      	adds	r3, r7, #2
    9e88:	881b      	ldrh	r3, [r3, #0]
    9e8a:	1c79      	adds	r1, r7, #1
    9e8c:	4a10      	ldr	r2, [pc, #64]	; (9ed0 <sd_mmc_spi_wait_busy+0x8c>)
    9e8e:	447a      	add	r2, pc
    9e90:	0010      	movs	r0, r2
    9e92:	2201      	movs	r2, #1
    9e94:	4d0b      	ldr	r5, [pc, #44]	; (9ec4 <sd_mmc_spi_wait_busy+0x80>)
    9e96:	5965      	ldr	r5, [r4, r5]
    9e98:	47a8      	blx	r5
			dummy);
		if (!(nec_timeout--)) {
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	1e5a      	subs	r2, r3, #1
    9e9e:	607a      	str	r2, [r7, #4]
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d101      	bne.n	9ea8 <sd_mmc_spi_wait_busy+0x64>
			return false;
    9ea4:	2300      	movs	r3, #0
    9ea6:	e004      	b.n	9eb2 <sd_mmc_spi_wait_busy+0x6e>
		}
	} while (line != 0xFF);
    9ea8:	1c7b      	adds	r3, r7, #1
    9eaa:	781b      	ldrb	r3, [r3, #0]
    9eac:	2bff      	cmp	r3, #255	; 0xff
    9eae:	d1ea      	bne.n	9e86 <sd_mmc_spi_wait_busy+0x42>
	return true;
    9eb0:	2301      	movs	r3, #1
}
    9eb2:	0018      	movs	r0, r3
    9eb4:	46bd      	mov	sp, r7
    9eb6:	b002      	add	sp, #8
    9eb8:	bdb0      	pop	{r4, r5, r7, pc}
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	00007f94 	.word	0x00007f94
    9ec0:	1fff66e6 	.word	0x1fff66e6
    9ec4:	000001f0 	.word	0x000001f0
    9ec8:	00030d40 	.word	0x00030d40
    9ecc:	1fff66ce 	.word	0x1fff66ce
    9ed0:	1fff66ba 	.word	0x1fff66ba

00009ed4 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    9ed4:	b5b0      	push	{r4, r5, r7, lr}
    9ed6:	b082      	sub	sp, #8
    9ed8:	af00      	add	r7, sp, #0
    9eda:	4c1f      	ldr	r4, [pc, #124]	; (9f58 <sd_mmc_spi_start_read_block+0x84>)
    9edc:	447c      	add	r4, pc
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    9ede:	1cbb      	adds	r3, r7, #2
    9ee0:	22ff      	movs	r2, #255	; 0xff
    9ee2:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    9ee4:	1c7b      	adds	r3, r7, #1
    9ee6:	2200      	movs	r2, #0
    9ee8:	701a      	strb	r2, [r3, #0]
	i = 500000;
    9eea:	4b1c      	ldr	r3, [pc, #112]	; (9f5c <sd_mmc_spi_start_read_block+0x88>)
    9eec:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	1e5a      	subs	r2, r3, #1
    9ef2:	607a      	str	r2, [r7, #4]
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d105      	bne.n	9f04 <sd_mmc_spi_start_read_block+0x30>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    9ef8:	4b19      	ldr	r3, [pc, #100]	; (9f60 <sd_mmc_spi_start_read_block+0x8c>)
    9efa:	447b      	add	r3, pc
    9efc:	2204      	movs	r2, #4
    9efe:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    9f00:	2300      	movs	r3, #0
    9f02:	e025      	b.n	9f50 <sd_mmc_spi_start_read_block+0x7c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    9f04:	1cbb      	adds	r3, r7, #2
    9f06:	881b      	ldrh	r3, [r3, #0]
    9f08:	1c79      	adds	r1, r7, #1
    9f0a:	4a16      	ldr	r2, [pc, #88]	; (9f64 <sd_mmc_spi_start_read_block+0x90>)
    9f0c:	447a      	add	r2, pc
    9f0e:	0010      	movs	r0, r2
    9f10:	2201      	movs	r2, #1
    9f12:	4d15      	ldr	r5, [pc, #84]	; (9f68 <sd_mmc_spi_start_read_block+0x94>)
    9f14:	5965      	ldr	r5, [r4, r5]
    9f16:	47a8      	blx	r5
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    9f18:	1c7b      	adds	r3, r7, #1
    9f1a:	781b      	ldrb	r3, [r3, #0]
    9f1c:	001a      	movs	r2, r3
    9f1e:	23f0      	movs	r3, #240	; 0xf0
    9f20:	4013      	ands	r3, r2
    9f22:	d110      	bne.n	9f46 <sd_mmc_spi_start_read_block+0x72>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    9f24:	1c7b      	adds	r3, r7, #1
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	001a      	movs	r2, r3
    9f2a:	2307      	movs	r3, #7
    9f2c:	4013      	ands	r3, r2
    9f2e:	d004      	beq.n	9f3a <sd_mmc_spi_start_read_block+0x66>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    9f30:	4b0e      	ldr	r3, [pc, #56]	; (9f6c <sd_mmc_spi_start_read_block+0x98>)
    9f32:	447b      	add	r3, pc
    9f34:	2207      	movs	r2, #7
    9f36:	701a      	strb	r2, [r3, #0]
    9f38:	e003      	b.n	9f42 <sd_mmc_spi_start_read_block+0x6e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    9f3a:	4b0d      	ldr	r3, [pc, #52]	; (9f70 <sd_mmc_spi_start_read_block+0x9c>)
    9f3c:	447b      	add	r3, pc
    9f3e:	220b      	movs	r2, #11
    9f40:	701a      	strb	r2, [r3, #0]
			}
			return false;
    9f42:	2300      	movs	r3, #0
    9f44:	e004      	b.n	9f50 <sd_mmc_spi_start_read_block+0x7c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    9f46:	1c7b      	adds	r3, r7, #1
    9f48:	781b      	ldrb	r3, [r3, #0]
    9f4a:	2bfe      	cmp	r3, #254	; 0xfe
    9f4c:	d1cf      	bne.n	9eee <sd_mmc_spi_start_read_block+0x1a>

	return true;
    9f4e:	2301      	movs	r3, #1
}
    9f50:	0018      	movs	r0, r3
    9f52:	46bd      	mov	sp, r7
    9f54:	b002      	add	sp, #8
    9f56:	bdb0      	pop	{r4, r5, r7, pc}
    9f58:	00007f04 	.word	0x00007f04
    9f5c:	0007a120 	.word	0x0007a120
    9f60:	1fff6691 	.word	0x1fff6691
    9f64:	1fff663c 	.word	0x1fff663c
    9f68:	000001f0 	.word	0x000001f0
    9f6c:	1fff6659 	.word	0x1fff6659
    9f70:	1fff664f 	.word	0x1fff664f

00009f74 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    9f74:	b5b0      	push	{r4, r5, r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
    9f7a:	4d09      	ldr	r5, [pc, #36]	; (9fa0 <sd_mmc_spi_stop_read_block+0x2c>)
    9f7c:	447d      	add	r5, pc
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    9f7e:	1dbb      	adds	r3, r7, #6
    9f80:	22ff      	movs	r2, #255	; 0xff
    9f82:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    9f84:	1dbb      	adds	r3, r7, #6
    9f86:	881b      	ldrh	r3, [r3, #0]
    9f88:	1d39      	adds	r1, r7, #4
    9f8a:	4a06      	ldr	r2, [pc, #24]	; (9fa4 <sd_mmc_spi_stop_read_block+0x30>)
    9f8c:	447a      	add	r2, pc
    9f8e:	0010      	movs	r0, r2
    9f90:	2202      	movs	r2, #2
    9f92:	4c05      	ldr	r4, [pc, #20]	; (9fa8 <sd_mmc_spi_stop_read_block+0x34>)
    9f94:	592c      	ldr	r4, [r5, r4]
    9f96:	47a0      	blx	r4
			dummy);
}
    9f98:	46c0      	nop			; (mov r8, r8)
    9f9a:	46bd      	mov	sp, r7
    9f9c:	b002      	add	sp, #8
    9f9e:	bdb0      	pop	{r4, r5, r7, pc}
    9fa0:	00007e64 	.word	0x00007e64
    9fa4:	1fff65bc 	.word	0x1fff65bc
    9fa8:	000001f0 	.word	0x000001f0

00009fac <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    9fac:	b590      	push	{r4, r7, lr}
    9fae:	b083      	sub	sp, #12
    9fb0:	af00      	add	r7, sp, #0
    9fb2:	4c13      	ldr	r4, [pc, #76]	; (a000 <sd_mmc_spi_start_write_block+0x54>)
    9fb4:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    9fb6:	1dfb      	adds	r3, r7, #7
    9fb8:	22ff      	movs	r2, #255	; 0xff
    9fba:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    9fbc:	1dfb      	adds	r3, r7, #7
    9fbe:	4a11      	ldr	r2, [pc, #68]	; (a004 <sd_mmc_spi_start_write_block+0x58>)
    9fc0:	447a      	add	r2, pc
    9fc2:	0010      	movs	r0, r2
    9fc4:	2201      	movs	r2, #1
    9fc6:	0019      	movs	r1, r3
    9fc8:	4b0f      	ldr	r3, [pc, #60]	; (a008 <sd_mmc_spi_start_write_block+0x5c>)
    9fca:	58e3      	ldr	r3, [r4, r3]
    9fcc:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    9fce:	4b0f      	ldr	r3, [pc, #60]	; (a00c <sd_mmc_spi_start_write_block+0x60>)
    9fd0:	447b      	add	r3, pc
    9fd2:	881b      	ldrh	r3, [r3, #0]
    9fd4:	2b01      	cmp	r3, #1
    9fd6:	d103      	bne.n	9fe0 <sd_mmc_spi_start_write_block+0x34>
		token = SPI_TOKEN_SINGLE_WRITE;
    9fd8:	1dbb      	adds	r3, r7, #6
    9fda:	22fe      	movs	r2, #254	; 0xfe
    9fdc:	701a      	strb	r2, [r3, #0]
    9fde:	e002      	b.n	9fe6 <sd_mmc_spi_start_write_block+0x3a>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    9fe0:	1dbb      	adds	r3, r7, #6
    9fe2:	22fc      	movs	r2, #252	; 0xfc
    9fe4:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    9fe6:	1dbb      	adds	r3, r7, #6
    9fe8:	4a09      	ldr	r2, [pc, #36]	; (a010 <sd_mmc_spi_start_write_block+0x64>)
    9fea:	447a      	add	r2, pc
    9fec:	0010      	movs	r0, r2
    9fee:	2201      	movs	r2, #1
    9ff0:	0019      	movs	r1, r3
    9ff2:	4b05      	ldr	r3, [pc, #20]	; (a008 <sd_mmc_spi_start_write_block+0x5c>)
    9ff4:	58e3      	ldr	r3, [r4, r3]
    9ff6:	4798      	blx	r3
}
    9ff8:	46c0      	nop			; (mov r8, r8)
    9ffa:	46bd      	mov	sp, r7
    9ffc:	b003      	add	sp, #12
    9ffe:	bd90      	pop	{r4, r7, pc}
    a000:	00007e2c 	.word	0x00007e2c
    a004:	1fff6588 	.word	0x1fff6588
    a008:	000002d4 	.word	0x000002d4
    a00c:	1fff65c6 	.word	0x1fff65c6
    a010:	1fff655e 	.word	0x1fff655e

0000a014 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    a014:	b5b0      	push	{r4, r5, r7, lr}
    a016:	b082      	sub	sp, #8
    a018:	af00      	add	r7, sp, #0
    a01a:	4c24      	ldr	r4, [pc, #144]	; (a0ac <sd_mmc_spi_stop_write_block+0x98>)
    a01c:	447c      	add	r4, pc
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    a01e:	1dbb      	adds	r3, r7, #6
    a020:	22ff      	movs	r2, #255	; 0xff
    a022:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    a024:	1cbb      	adds	r3, r7, #2
    a026:	2201      	movs	r2, #1
    a028:	4252      	negs	r2, r2
    a02a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    a02c:	1cbb      	adds	r3, r7, #2
    a02e:	4a20      	ldr	r2, [pc, #128]	; (a0b0 <sd_mmc_spi_stop_write_block+0x9c>)
    a030:	447a      	add	r2, pc
    a032:	0010      	movs	r0, r2
    a034:	2202      	movs	r2, #2
    a036:	0019      	movs	r1, r3
    a038:	4b1e      	ldr	r3, [pc, #120]	; (a0b4 <sd_mmc_spi_stop_write_block+0xa0>)
    a03a:	58e3      	ldr	r3, [r4, r3]
    a03c:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    a03e:	1dbb      	adds	r3, r7, #6
    a040:	881b      	ldrh	r3, [r3, #0]
    a042:	1d79      	adds	r1, r7, #5
    a044:	4a1c      	ldr	r2, [pc, #112]	; (a0b8 <sd_mmc_spi_stop_write_block+0xa4>)
    a046:	447a      	add	r2, pc
    a048:	0010      	movs	r0, r2
    a04a:	2201      	movs	r2, #1
    a04c:	4d1b      	ldr	r5, [pc, #108]	; (a0bc <sd_mmc_spi_stop_write_block+0xa8>)
    a04e:	5964      	ldr	r4, [r4, r5]
    a050:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    a052:	1d7b      	adds	r3, r7, #5
    a054:	781b      	ldrb	r3, [r3, #0]
    a056:	001a      	movs	r2, r3
    a058:	2310      	movs	r3, #16
    a05a:	4013      	ands	r3, r2
    a05c:	d105      	bne.n	a06a <sd_mmc_spi_stop_write_block+0x56>
    a05e:	1d7b      	adds	r3, r7, #5
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	001a      	movs	r2, r3
    a064:	2301      	movs	r3, #1
    a066:	4013      	ands	r3, r2
    a068:	d105      	bne.n	a076 <sd_mmc_spi_stop_write_block+0x62>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a06a:	4b15      	ldr	r3, [pc, #84]	; (a0c0 <sd_mmc_spi_stop_write_block+0xac>)
    a06c:	447b      	add	r3, pc
    a06e:	2201      	movs	r2, #1
    a070:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    a072:	2300      	movs	r3, #0
    a074:	e016      	b.n	a0a4 <sd_mmc_spi_stop_write_block+0x90>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    a076:	1d7b      	adds	r3, r7, #5
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	001a      	movs	r2, r3
    a07c:	231e      	movs	r3, #30
    a07e:	4013      	ands	r3, r2
    a080:	2b04      	cmp	r3, #4
    a082:	d00d      	beq.n	a0a0 <sd_mmc_spi_stop_write_block+0x8c>
    a084:	2b0a      	cmp	r3, #10
    a086:	d105      	bne.n	a094 <sd_mmc_spi_stop_write_block+0x80>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    a088:	4b0e      	ldr	r3, [pc, #56]	; (a0c4 <sd_mmc_spi_stop_write_block+0xb0>)
    a08a:	447b      	add	r3, pc
    a08c:	2208      	movs	r2, #8
    a08e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    a090:	2300      	movs	r3, #0
    a092:	e007      	b.n	a0a4 <sd_mmc_spi_stop_write_block+0x90>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    a094:	4b0c      	ldr	r3, [pc, #48]	; (a0c8 <sd_mmc_spi_stop_write_block+0xb4>)
    a096:	447b      	add	r3, pc
    a098:	220a      	movs	r2, #10
    a09a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    a09c:	2300      	movs	r3, #0
    a09e:	e001      	b.n	a0a4 <sd_mmc_spi_stop_write_block+0x90>
		break;
    a0a0:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    a0a2:	2301      	movs	r3, #1
}
    a0a4:	0018      	movs	r0, r3
    a0a6:	46bd      	mov	sp, r7
    a0a8:	b002      	add	sp, #8
    a0aa:	bdb0      	pop	{r4, r5, r7, pc}
    a0ac:	00007dc4 	.word	0x00007dc4
    a0b0:	1fff6518 	.word	0x1fff6518
    a0b4:	000002d4 	.word	0x000002d4
    a0b8:	1fff6502 	.word	0x1fff6502
    a0bc:	000001f0 	.word	0x000001f0
    a0c0:	1fff651f 	.word	0x1fff651f
    a0c4:	1fff6501 	.word	0x1fff6501
    a0c8:	1fff64f5 	.word	0x1fff64f5

0000a0cc <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    a0cc:	b5b0      	push	{r4, r5, r7, lr}
    a0ce:	b082      	sub	sp, #8
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	4c25      	ldr	r4, [pc, #148]	; (a168 <sd_mmc_spi_stop_multiwrite_block+0x9c>)
    a0d4:	447c      	add	r4, pc
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    a0d6:	4b25      	ldr	r3, [pc, #148]	; (a16c <sd_mmc_spi_stop_multiwrite_block+0xa0>)
    a0d8:	447b      	add	r3, pc
    a0da:	881b      	ldrh	r3, [r3, #0]
    a0dc:	2b01      	cmp	r3, #1
    a0de:	d101      	bne.n	a0e4 <sd_mmc_spi_stop_multiwrite_block+0x18>
		return true; // Single block write
    a0e0:	2301      	movs	r3, #1
    a0e2:	e03c      	b.n	a15e <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	if (sd_mmc_spi_nb_block >
    a0e4:	4b22      	ldr	r3, [pc, #136]	; (a170 <sd_mmc_spi_stop_multiwrite_block+0xa4>)
    a0e6:	447b      	add	r3, pc
    a0e8:	881b      	ldrh	r3, [r3, #0]
    a0ea:	001d      	movs	r5, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    a0ec:	4b21      	ldr	r3, [pc, #132]	; (a174 <sd_mmc_spi_stop_multiwrite_block+0xa8>)
    a0ee:	447b      	add	r3, pc
    a0f0:	681a      	ldr	r2, [r3, #0]
    a0f2:	4b21      	ldr	r3, [pc, #132]	; (a178 <sd_mmc_spi_stop_multiwrite_block+0xac>)
    a0f4:	447b      	add	r3, pc
    a0f6:	881b      	ldrh	r3, [r3, #0]
    a0f8:	0019      	movs	r1, r3
    a0fa:	4b20      	ldr	r3, [pc, #128]	; (a17c <sd_mmc_spi_stop_multiwrite_block+0xb0>)
    a0fc:	58e3      	ldr	r3, [r4, r3]
    a0fe:	0010      	movs	r0, r2
    a100:	4798      	blx	r3
    a102:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    a104:	429d      	cmp	r5, r3
    a106:	d901      	bls.n	a10c <sd_mmc_spi_stop_multiwrite_block+0x40>
		return true; // It is not the End of multi write
    a108:	2301      	movs	r3, #1
    a10a:	e028      	b.n	a15e <sd_mmc_spi_stop_multiwrite_block+0x92>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    a10c:	1dfb      	adds	r3, r7, #7
    a10e:	22ff      	movs	r2, #255	; 0xff
    a110:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a112:	1dfb      	adds	r3, r7, #7
    a114:	4a1a      	ldr	r2, [pc, #104]	; (a180 <sd_mmc_spi_stop_multiwrite_block+0xb4>)
    a116:	447a      	add	r2, pc
    a118:	0010      	movs	r0, r2
    a11a:	2201      	movs	r2, #1
    a11c:	0019      	movs	r1, r3
    a11e:	4b19      	ldr	r3, [pc, #100]	; (a184 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    a120:	58e3      	ldr	r3, [r4, r3]
    a122:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    a124:	1dfb      	adds	r3, r7, #7
    a126:	22fd      	movs	r2, #253	; 0xfd
    a128:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a12a:	1dfb      	adds	r3, r7, #7
    a12c:	4a16      	ldr	r2, [pc, #88]	; (a188 <sd_mmc_spi_stop_multiwrite_block+0xbc>)
    a12e:	447a      	add	r2, pc
    a130:	0010      	movs	r0, r2
    a132:	2201      	movs	r2, #1
    a134:	0019      	movs	r1, r3
    a136:	4b13      	ldr	r3, [pc, #76]	; (a184 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    a138:	58e3      	ldr	r3, [r4, r3]
    a13a:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    a13c:	4b13      	ldr	r3, [pc, #76]	; (a18c <sd_mmc_spi_stop_multiwrite_block+0xc0>)
    a13e:	447b      	add	r3, pc
    a140:	4798      	blx	r3
    a142:	0003      	movs	r3, r0
    a144:	001a      	movs	r2, r3
    a146:	2301      	movs	r3, #1
    a148:	4053      	eors	r3, r2
    a14a:	b2db      	uxtb	r3, r3
    a14c:	2b00      	cmp	r3, #0
    a14e:	d005      	beq.n	a15c <sd_mmc_spi_stop_multiwrite_block+0x90>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a150:	4b0f      	ldr	r3, [pc, #60]	; (a190 <sd_mmc_spi_stop_multiwrite_block+0xc4>)
    a152:	447b      	add	r3, pc
    a154:	2205      	movs	r2, #5
    a156:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    a158:	2300      	movs	r3, #0
    a15a:	e000      	b.n	a15e <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	return true;
    a15c:	2301      	movs	r3, #1
}
    a15e:	0018      	movs	r0, r3
    a160:	46bd      	mov	sp, r7
    a162:	b002      	add	sp, #8
    a164:	bdb0      	pop	{r4, r5, r7, pc}
    a166:	46c0      	nop			; (mov r8, r8)
    a168:	00007d0c 	.word	0x00007d0c
    a16c:	1fff64be 	.word	0x1fff64be
    a170:	1fff64b0 	.word	0x1fff64b0
    a174:	1fff64a2 	.word	0x1fff64a2
    a178:	1fff64a0 	.word	0x1fff64a0
    a17c:	0000020c 	.word	0x0000020c
    a180:	1fff6432 	.word	0x1fff6432
    a184:	000002d4 	.word	0x000002d4
    a188:	1fff641a 	.word	0x1fff641a
    a18c:	fffffd03 	.word	0xfffffd03
    a190:	1fff6439 	.word	0x1fff6439

0000a194 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    a194:	b590      	push	{r4, r7, lr}
    a196:	b091      	sub	sp, #68	; 0x44
    a198:	af00      	add	r7, sp, #0
    a19a:	4c28      	ldr	r4, [pc, #160]	; (a23c <sd_mmc_spi_init+0xa8>)
    a19c:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a19e:	4b28      	ldr	r3, [pc, #160]	; (a240 <sd_mmc_spi_init+0xac>)
    a1a0:	447b      	add	r3, pc
    a1a2:	2200      	movs	r2, #0
    a1a4:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    a1a6:	233c      	movs	r3, #60	; 0x3c
    a1a8:	18fb      	adds	r3, r7, r3
    a1aa:	0018      	movs	r0, r3
    a1ac:	4b25      	ldr	r3, [pc, #148]	; (a244 <sd_mmc_spi_init+0xb0>)
    a1ae:	447b      	add	r3, pc
    a1b0:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
#endif
	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    a1b2:	1d3b      	adds	r3, r7, #4
    a1b4:	0018      	movs	r0, r3
    a1b6:	4b24      	ldr	r3, [pc, #144]	; (a248 <sd_mmc_spi_init+0xb4>)
    a1b8:	447b      	add	r3, pc
    a1ba:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    a1bc:	1d3b      	adds	r3, r7, #4
    a1be:	2280      	movs	r2, #128	; 0x80
    a1c0:	0292      	lsls	r2, r2, #10
    a1c2:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    a1c4:	1d3b      	adds	r3, r7, #4
    a1c6:	4a21      	ldr	r2, [pc, #132]	; (a24c <sd_mmc_spi_init+0xb8>)
    a1c8:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    a1ca:	1d3b      	adds	r3, r7, #4
    a1cc:	4a20      	ldr	r2, [pc, #128]	; (a250 <sd_mmc_spi_init+0xbc>)
    a1ce:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    a1d0:	1d3b      	adds	r3, r7, #4
    a1d2:	4a20      	ldr	r2, [pc, #128]	; (a254 <sd_mmc_spi_init+0xc0>)
    a1d4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    a1d6:	1d3b      	adds	r3, r7, #4
    a1d8:	4a1f      	ldr	r2, [pc, #124]	; (a258 <sd_mmc_spi_init+0xc4>)
    a1da:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    a1dc:	1d3b      	adds	r3, r7, #4
    a1de:	2224      	movs	r2, #36	; 0x24
    a1e0:	2100      	movs	r1, #0
    a1e2:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    a1e4:	1d3b      	adds	r3, r7, #4
    a1e6:	4a1d      	ldr	r2, [pc, #116]	; (a25c <sd_mmc_spi_init+0xc8>)
    a1e8:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    a1ea:	1d3b      	adds	r3, r7, #4
    a1ec:	491c      	ldr	r1, [pc, #112]	; (a260 <sd_mmc_spi_init+0xcc>)
    a1ee:	4a1d      	ldr	r2, [pc, #116]	; (a264 <sd_mmc_spi_init+0xd0>)
    a1f0:	447a      	add	r2, pc
    a1f2:	0010      	movs	r0, r2
    a1f4:	001a      	movs	r2, r3
    a1f6:	4b1c      	ldr	r3, [pc, #112]	; (a268 <sd_mmc_spi_init+0xd4>)
    a1f8:	58e3      	ldr	r3, [r4, r3]
    a1fa:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    a1fc:	4b1b      	ldr	r3, [pc, #108]	; (a26c <sd_mmc_spi_init+0xd8>)
    a1fe:	447b      	add	r3, pc
    a200:	0018      	movs	r0, r3
    a202:	4b1b      	ldr	r3, [pc, #108]	; (a270 <sd_mmc_spi_init+0xdc>)
    a204:	447b      	add	r3, pc
    a206:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    a208:	4b1a      	ldr	r3, [pc, #104]	; (a274 <sd_mmc_spi_init+0xe0>)
    a20a:	447b      	add	r3, pc
    a20c:	0018      	movs	r0, r3
    a20e:	4b1a      	ldr	r3, [pc, #104]	; (a278 <sd_mmc_spi_init+0xe4>)
    a210:	447b      	add	r3, pc
    a212:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    a214:	4b19      	ldr	r3, [pc, #100]	; (a27c <sd_mmc_spi_init+0xe8>)
    a216:	58e3      	ldr	r3, [r4, r3]
    a218:	781a      	ldrb	r2, [r3, #0]
    a21a:	4b19      	ldr	r3, [pc, #100]	; (a280 <sd_mmc_spi_init+0xec>)
    a21c:	447b      	add	r3, pc
    a21e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    a220:	4b18      	ldr	r3, [pc, #96]	; (a284 <sd_mmc_spi_init+0xf0>)
    a222:	447b      	add	r3, pc
    a224:	001a      	movs	r2, r3
    a226:	4b18      	ldr	r3, [pc, #96]	; (a288 <sd_mmc_spi_init+0xf4>)
    a228:	447b      	add	r3, pc
    a22a:	0011      	movs	r1, r2
    a22c:	0018      	movs	r0, r3
    a22e:	4b17      	ldr	r3, [pc, #92]	; (a28c <sd_mmc_spi_init+0xf8>)
    a230:	447b      	add	r3, pc
    a232:	4798      	blx	r3
}
    a234:	46c0      	nop			; (mov r8, r8)
    a236:	46bd      	mov	sp, r7
    a238:	b011      	add	sp, #68	; 0x44
    a23a:	bd90      	pop	{r4, r7, pc}
    a23c:	00007c44 	.word	0x00007c44
    a240:	1fff63eb 	.word	0x1fff63eb
    a244:	fffff98f 	.word	0xfffff98f
    a248:	fffffa49 	.word	0xfffffa49
    a24c:	00100002 	.word	0x00100002
    a250:	00110002 	.word	0x00110002
    a254:	00120002 	.word	0x00120002
    a258:	00130002 	.word	0x00130002
    a25c:	00061a80 	.word	0x00061a80
    a260:	42000c00 	.word	0x42000c00
    a264:	1fff6358 	.word	0x1fff6358
    a268:	000000b8 	.word	0x000000b8
    a26c:	1fff634a 	.word	0x1fff634a
    a270:	fffffb25 	.word	0xfffffb25
    a274:	1fff637e 	.word	0x1fff637e
    a278:	fffffa81 	.word	0xfffffa81
    a27c:	000001e4 	.word	0x000001e4
    a280:	1fff636c 	.word	0x1fff636c
    a284:	1fff6366 	.word	0x1fff6366
    a288:	1fff635c 	.word	0x1fff635c
    a28c:	fffffa85 	.word	0xfffffa85

0000a290 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    a290:	b590      	push	{r4, r7, lr}
    a292:	b083      	sub	sp, #12
    a294:	af00      	add	r7, sp, #0
    a296:	0004      	movs	r4, r0
    a298:	6039      	str	r1, [r7, #0]
    a29a:	0010      	movs	r0, r2
    a29c:	0019      	movs	r1, r3
    a29e:	1dfb      	adds	r3, r7, #7
    a2a0:	1c22      	adds	r2, r4, #0
    a2a2:	701a      	strb	r2, [r3, #0]
    a2a4:	1dbb      	adds	r3, r7, #6
    a2a6:	1c02      	adds	r2, r0, #0
    a2a8:	701a      	strb	r2, [r3, #0]
    a2aa:	1d7b      	adds	r3, r7, #5
    a2ac:	1c0a      	adds	r2, r1, #0
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	4c18      	ldr	r4, [pc, #96]	; (a314 <sd_mmc_spi_select_device+0x84>)
    a2b2:	447c      	add	r4, pc
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a2b4:	4b18      	ldr	r3, [pc, #96]	; (a318 <sd_mmc_spi_select_device+0x88>)
    a2b6:	447b      	add	r3, pc
    a2b8:	2200      	movs	r2, #0
    a2ba:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    a2bc:	683b      	ldr	r3, [r7, #0]
    a2be:	4a17      	ldr	r2, [pc, #92]	; (a31c <sd_mmc_spi_select_device+0x8c>)
    a2c0:	4293      	cmp	r3, r2
    a2c2:	d907      	bls.n	a2d4 <sd_mmc_spi_select_device+0x44>
		clock = SD_MMC_SPI_MAX_CLOCK;
    a2c4:	4b15      	ldr	r3, [pc, #84]	; (a31c <sd_mmc_spi_select_device+0x8c>)
    a2c6:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a2c8:	e004      	b.n	a2d4 <sd_mmc_spi_select_device+0x44>
		clock -= clock / 8;
    a2ca:	683b      	ldr	r3, [r7, #0]
    a2cc:	08db      	lsrs	r3, r3, #3
    a2ce:	683a      	ldr	r2, [r7, #0]
    a2d0:	1ad3      	subs	r3, r2, r3
    a2d2:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a2d4:	683b      	ldr	r3, [r7, #0]
    a2d6:	4a12      	ldr	r2, [pc, #72]	; (a320 <sd_mmc_spi_select_device+0x90>)
    a2d8:	447a      	add	r2, pc
    a2da:	0019      	movs	r1, r3
    a2dc:	0010      	movs	r0, r2
    a2de:	4b11      	ldr	r3, [pc, #68]	; (a324 <sd_mmc_spi_select_device+0x94>)
    a2e0:	58e3      	ldr	r3, [r4, r3]
    a2e2:	4798      	blx	r3
    a2e4:	0003      	movs	r3, r0
    a2e6:	2b17      	cmp	r3, #23
    a2e8:	d0ef      	beq.n	a2ca <sd_mmc_spi_select_device+0x3a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    a2ea:	1dfb      	adds	r3, r7, #7
    a2ec:	781a      	ldrb	r2, [r3, #0]
    a2ee:	0013      	movs	r3, r2
    a2f0:	005b      	lsls	r3, r3, #1
    a2f2:	189b      	adds	r3, r3, r2
    a2f4:	4a0c      	ldr	r2, [pc, #48]	; (a328 <sd_mmc_spi_select_device+0x98>)
    a2f6:	447a      	add	r2, pc
    a2f8:	189b      	adds	r3, r3, r2
    a2fa:	4a0c      	ldr	r2, [pc, #48]	; (a32c <sd_mmc_spi_select_device+0x9c>)
    a2fc:	447a      	add	r2, pc
    a2fe:	0010      	movs	r0, r2
    a300:	2201      	movs	r2, #1
    a302:	0019      	movs	r1, r3
    a304:	4b0a      	ldr	r3, [pc, #40]	; (a330 <sd_mmc_spi_select_device+0xa0>)
    a306:	58e3      	ldr	r3, [r4, r3]
    a308:	4798      	blx	r3
}
    a30a:	46c0      	nop			; (mov r8, r8)
    a30c:	46bd      	mov	sp, r7
    a30e:	b003      	add	sp, #12
    a310:	bd90      	pop	{r4, r7, pc}
    a312:	46c0      	nop			; (mov r8, r8)
    a314:	00007b2e 	.word	0x00007b2e
    a318:	1fff62d5 	.word	0x1fff62d5
    a31c:	003d0900 	.word	0x003d0900
    a320:	1fff6270 	.word	0x1fff6270
    a324:	00000268 	.word	0x00000268
    a328:	1fff628e 	.word	0x1fff628e
    a32c:	1fff624c 	.word	0x1fff624c
    a330:	00000004 	.word	0x00000004

0000a334 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    a334:	b590      	push	{r4, r7, lr}
    a336:	b083      	sub	sp, #12
    a338:	af00      	add	r7, sp, #0
    a33a:	0002      	movs	r2, r0
    a33c:	1dfb      	adds	r3, r7, #7
    a33e:	701a      	strb	r2, [r3, #0]
    a340:	4c0c      	ldr	r4, [pc, #48]	; (a374 <sd_mmc_spi_deselect_device+0x40>)
    a342:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a344:	4b0c      	ldr	r3, [pc, #48]	; (a378 <sd_mmc_spi_deselect_device+0x44>)
    a346:	447b      	add	r3, pc
    a348:	2200      	movs	r2, #0
    a34a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    a34c:	1dfb      	adds	r3, r7, #7
    a34e:	781a      	ldrb	r2, [r3, #0]
    a350:	0013      	movs	r3, r2
    a352:	005b      	lsls	r3, r3, #1
    a354:	189b      	adds	r3, r3, r2
    a356:	4a09      	ldr	r2, [pc, #36]	; (a37c <sd_mmc_spi_deselect_device+0x48>)
    a358:	447a      	add	r2, pc
    a35a:	189b      	adds	r3, r3, r2
    a35c:	4a08      	ldr	r2, [pc, #32]	; (a380 <sd_mmc_spi_deselect_device+0x4c>)
    a35e:	447a      	add	r2, pc
    a360:	0010      	movs	r0, r2
    a362:	2200      	movs	r2, #0
    a364:	0019      	movs	r1, r3
    a366:	4b07      	ldr	r3, [pc, #28]	; (a384 <sd_mmc_spi_deselect_device+0x50>)
    a368:	58e3      	ldr	r3, [r4, r3]
    a36a:	4798      	blx	r3
}
    a36c:	46c0      	nop			; (mov r8, r8)
    a36e:	46bd      	mov	sp, r7
    a370:	b003      	add	sp, #12
    a372:	bd90      	pop	{r4, r7, pc}
    a374:	00007a9e 	.word	0x00007a9e
    a378:	1fff6245 	.word	0x1fff6245
    a37c:	1fff622c 	.word	0x1fff622c
    a380:	1fff61ea 	.word	0x1fff61ea
    a384:	00000004 	.word	0x00000004

0000a388 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    a388:	b590      	push	{r4, r7, lr}
    a38a:	b083      	sub	sp, #12
    a38c:	af00      	add	r7, sp, #0
    a38e:	4c11      	ldr	r4, [pc, #68]	; (a3d4 <sd_mmc_spi_send_clock+0x4c>)
    a390:	447c      	add	r4, pc
	uint8_t i;
	uint8_t dummy = 0xFF;
    a392:	1dbb      	adds	r3, r7, #6
    a394:	22ff      	movs	r2, #255	; 0xff
    a396:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a398:	4b0f      	ldr	r3, [pc, #60]	; (a3d8 <sd_mmc_spi_send_clock+0x50>)
    a39a:	447b      	add	r3, pc
    a39c:	2200      	movs	r2, #0
    a39e:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    a3a0:	1dfb      	adds	r3, r7, #7
    a3a2:	2200      	movs	r2, #0
    a3a4:	701a      	strb	r2, [r3, #0]
    a3a6:	e00d      	b.n	a3c4 <sd_mmc_spi_send_clock+0x3c>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    a3a8:	1dbb      	adds	r3, r7, #6
    a3aa:	4a0c      	ldr	r2, [pc, #48]	; (a3dc <sd_mmc_spi_send_clock+0x54>)
    a3ac:	447a      	add	r2, pc
    a3ae:	0010      	movs	r0, r2
    a3b0:	2201      	movs	r2, #1
    a3b2:	0019      	movs	r1, r3
    a3b4:	4b0a      	ldr	r3, [pc, #40]	; (a3e0 <sd_mmc_spi_send_clock+0x58>)
    a3b6:	58e3      	ldr	r3, [r4, r3]
    a3b8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    a3ba:	1dfb      	adds	r3, r7, #7
    a3bc:	781a      	ldrb	r2, [r3, #0]
    a3be:	1dfb      	adds	r3, r7, #7
    a3c0:	3201      	adds	r2, #1
    a3c2:	701a      	strb	r2, [r3, #0]
    a3c4:	1dfb      	adds	r3, r7, #7
    a3c6:	781b      	ldrb	r3, [r3, #0]
    a3c8:	2b09      	cmp	r3, #9
    a3ca:	d9ed      	bls.n	a3a8 <sd_mmc_spi_send_clock+0x20>
	}
}
    a3cc:	46c0      	nop			; (mov r8, r8)
    a3ce:	46bd      	mov	sp, r7
    a3d0:	b003      	add	sp, #12
    a3d2:	bd90      	pop	{r4, r7, pc}
    a3d4:	00007a50 	.word	0x00007a50
    a3d8:	1fff61f1 	.word	0x1fff61f1
    a3dc:	1fff619c 	.word	0x1fff619c
    a3e0:	000002d4 	.word	0x000002d4

0000a3e4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    a3e4:	b5b0      	push	{r4, r5, r7, lr}
    a3e6:	b084      	sub	sp, #16
    a3e8:	af02      	add	r7, sp, #8
    a3ea:	6078      	str	r0, [r7, #4]
    a3ec:	6039      	str	r1, [r7, #0]
    a3ee:	4d08      	ldr	r5, [pc, #32]	; (a410 <sd_mmc_spi_send_cmd+0x2c>)
    a3f0:	447d      	add	r5, pc
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    a3f2:	6839      	ldr	r1, [r7, #0]
    a3f4:	6878      	ldr	r0, [r7, #4]
    a3f6:	2300      	movs	r3, #0
    a3f8:	9300      	str	r3, [sp, #0]
    a3fa:	2300      	movs	r3, #0
    a3fc:	2200      	movs	r2, #0
    a3fe:	4c05      	ldr	r4, [pc, #20]	; (a414 <sd_mmc_spi_send_cmd+0x30>)
    a400:	592c      	ldr	r4, [r5, r4]
    a402:	47a0      	blx	r4
    a404:	0003      	movs	r3, r0
}
    a406:	0018      	movs	r0, r3
    a408:	46bd      	mov	sp, r7
    a40a:	b002      	add	sp, #8
    a40c:	bdb0      	pop	{r4, r5, r7, pc}
    a40e:	46c0      	nop			; (mov r8, r8)
    a410:	000079f0 	.word	0x000079f0
    a414:	00000130 	.word	0x00000130

0000a418 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    a418:	b5b0      	push	{r4, r5, r7, lr}
    a41a:	b088      	sub	sp, #32
    a41c:	af00      	add	r7, sp, #0
    a41e:	60f8      	str	r0, [r7, #12]
    a420:	60b9      	str	r1, [r7, #8]
    a422:	0019      	movs	r1, r3
    a424:	1dbb      	adds	r3, r7, #6
    a426:	801a      	strh	r2, [r3, #0]
    a428:	1d3b      	adds	r3, r7, #4
    a42a:	1c0a      	adds	r2, r1, #0
    a42c:	801a      	strh	r2, [r3, #0]
    a42e:	4c8a      	ldr	r4, [pc, #552]	; (a658 <sd_mmc_spi_adtc_start+0x240>)
    a430:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    a432:	231b      	movs	r3, #27
    a434:	18fb      	adds	r3, r7, r3
    a436:	22ff      	movs	r2, #255	; 0xff
    a438:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    a43a:	231c      	movs	r3, #28
    a43c:	18fb      	adds	r3, r7, r3
    a43e:	22ff      	movs	r2, #255	; 0xff
    a440:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a442:	4b86      	ldr	r3, [pc, #536]	; (a65c <sd_mmc_spi_adtc_start+0x244>)
    a444:	447b      	add	r3, pc
    a446:	2200      	movs	r2, #0
    a448:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    a44a:	68fb      	ldr	r3, [r7, #12]
    a44c:	b2db      	uxtb	r3, r3
    a44e:	223f      	movs	r2, #63	; 0x3f
    a450:	4013      	ands	r3, r2
    a452:	b2db      	uxtb	r3, r3
    a454:	2240      	movs	r2, #64	; 0x40
    a456:	4313      	orrs	r3, r2
    a458:	b2da      	uxtb	r2, r3
    a45a:	2314      	movs	r3, #20
    a45c:	18fb      	adds	r3, r7, r3
    a45e:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    a460:	68bb      	ldr	r3, [r7, #8]
    a462:	0e1b      	lsrs	r3, r3, #24
    a464:	b2da      	uxtb	r2, r3
    a466:	2314      	movs	r3, #20
    a468:	18fb      	adds	r3, r7, r3
    a46a:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    a46c:	68bb      	ldr	r3, [r7, #8]
    a46e:	0c1b      	lsrs	r3, r3, #16
    a470:	b2da      	uxtb	r2, r3
    a472:	2314      	movs	r3, #20
    a474:	18fb      	adds	r3, r7, r3
    a476:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    a478:	68bb      	ldr	r3, [r7, #8]
    a47a:	0a1b      	lsrs	r3, r3, #8
    a47c:	b2da      	uxtb	r2, r3
    a47e:	2314      	movs	r3, #20
    a480:	18fb      	adds	r3, r7, r3
    a482:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    a484:	68bb      	ldr	r3, [r7, #8]
    a486:	b2da      	uxtb	r2, r3
    a488:	2314      	movs	r3, #20
    a48a:	18fb      	adds	r3, r7, r3
    a48c:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    a48e:	2314      	movs	r3, #20
    a490:	18fb      	adds	r3, r7, r3
    a492:	2105      	movs	r1, #5
    a494:	0018      	movs	r0, r3
    a496:	4b72      	ldr	r3, [pc, #456]	; (a660 <sd_mmc_spi_adtc_start+0x248>)
    a498:	447b      	add	r3, pc
    a49a:	4798      	blx	r3
    a49c:	0003      	movs	r3, r0
    a49e:	001a      	movs	r2, r3
    a4a0:	2314      	movs	r3, #20
    a4a2:	18fb      	adds	r3, r7, r3
    a4a4:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    a4a6:	231b      	movs	r3, #27
    a4a8:	18fb      	adds	r3, r7, r3
    a4aa:	4a6e      	ldr	r2, [pc, #440]	; (a664 <sd_mmc_spi_adtc_start+0x24c>)
    a4ac:	447a      	add	r2, pc
    a4ae:	0010      	movs	r0, r2
    a4b0:	2201      	movs	r2, #1
    a4b2:	0019      	movs	r1, r3
    a4b4:	4b6c      	ldr	r3, [pc, #432]	; (a668 <sd_mmc_spi_adtc_start+0x250>)
    a4b6:	58e3      	ldr	r3, [r4, r3]
    a4b8:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    a4ba:	2314      	movs	r3, #20
    a4bc:	18fb      	adds	r3, r7, r3
    a4be:	4a6b      	ldr	r2, [pc, #428]	; (a66c <sd_mmc_spi_adtc_start+0x254>)
    a4c0:	447a      	add	r2, pc
    a4c2:	0010      	movs	r0, r2
    a4c4:	2206      	movs	r2, #6
    a4c6:	0019      	movs	r1, r3
    a4c8:	4b67      	ldr	r3, [pc, #412]	; (a668 <sd_mmc_spi_adtc_start+0x250>)
    a4ca:	58e3      	ldr	r3, [r4, r3]
    a4cc:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    a4ce:	2313      	movs	r3, #19
    a4d0:	18fb      	adds	r3, r7, r3
    a4d2:	22ff      	movs	r2, #255	; 0xff
    a4d4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    a4d6:	231c      	movs	r3, #28
    a4d8:	18fb      	adds	r3, r7, r3
    a4da:	881b      	ldrh	r3, [r3, #0]
    a4dc:	2213      	movs	r2, #19
    a4de:	18b9      	adds	r1, r7, r2
    a4e0:	4a63      	ldr	r2, [pc, #396]	; (a670 <sd_mmc_spi_adtc_start+0x258>)
    a4e2:	447a      	add	r2, pc
    a4e4:	0010      	movs	r0, r2
    a4e6:	2201      	movs	r2, #1
    a4e8:	4d62      	ldr	r5, [pc, #392]	; (a674 <sd_mmc_spi_adtc_start+0x25c>)
    a4ea:	5965      	ldr	r5, [r4, r5]
    a4ec:	47a8      	blx	r5
			dummy2);
	ncr_timeout = 7;
    a4ee:	231f      	movs	r3, #31
    a4f0:	18fb      	adds	r3, r7, r3
    a4f2:	2207      	movs	r2, #7
    a4f4:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    a4f6:	231c      	movs	r3, #28
    a4f8:	18fb      	adds	r3, r7, r3
    a4fa:	881b      	ldrh	r3, [r3, #0]
    a4fc:	2213      	movs	r2, #19
    a4fe:	18b9      	adds	r1, r7, r2
    a500:	4a5d      	ldr	r2, [pc, #372]	; (a678 <sd_mmc_spi_adtc_start+0x260>)
    a502:	447a      	add	r2, pc
    a504:	0010      	movs	r0, r2
    a506:	2201      	movs	r2, #1
    a508:	4d5a      	ldr	r5, [pc, #360]	; (a674 <sd_mmc_spi_adtc_start+0x25c>)
    a50a:	5965      	ldr	r5, [r4, r5]
    a50c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    a50e:	2313      	movs	r3, #19
    a510:	18fb      	adds	r3, r7, r3
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	b25b      	sxtb	r3, r3
    a516:	2b00      	cmp	r3, #0
    a518:	da11      	bge.n	a53e <sd_mmc_spi_adtc_start+0x126>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    a51a:	231f      	movs	r3, #31
    a51c:	18fb      	adds	r3, r7, r3
    a51e:	221f      	movs	r2, #31
    a520:	18ba      	adds	r2, r7, r2
    a522:	7812      	ldrb	r2, [r2, #0]
    a524:	3a01      	subs	r2, #1
    a526:	701a      	strb	r2, [r3, #0]
    a528:	231f      	movs	r3, #31
    a52a:	18fb      	adds	r3, r7, r3
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	2b00      	cmp	r3, #0
    a530:	d1e1      	bne.n	a4f6 <sd_mmc_spi_adtc_start+0xde>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    a532:	4b52      	ldr	r3, [pc, #328]	; (a67c <sd_mmc_spi_adtc_start+0x264>)
    a534:	447b      	add	r3, pc
    a536:	2202      	movs	r2, #2
    a538:	701a      	strb	r2, [r3, #0]
			return false;
    a53a:	2300      	movs	r3, #0
    a53c:	e088      	b.n	a650 <sd_mmc_spi_adtc_start+0x238>
			break;
    a53e:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    a540:	2313      	movs	r3, #19
    a542:	18fb      	adds	r3, r7, r3
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	001a      	movs	r2, r3
    a548:	4b4d      	ldr	r3, [pc, #308]	; (a680 <sd_mmc_spi_adtc_start+0x268>)
    a54a:	447b      	add	r3, pc
    a54c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    a54e:	2313      	movs	r3, #19
    a550:	18fb      	adds	r3, r7, r3
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	001a      	movs	r2, r3
    a556:	2308      	movs	r3, #8
    a558:	4013      	ands	r3, r2
    a55a:	d005      	beq.n	a568 <sd_mmc_spi_adtc_start+0x150>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    a55c:	4b49      	ldr	r3, [pc, #292]	; (a684 <sd_mmc_spi_adtc_start+0x26c>)
    a55e:	447b      	add	r3, pc
    a560:	2206      	movs	r2, #6
    a562:	701a      	strb	r2, [r3, #0]
		return false;
    a564:	2300      	movs	r3, #0
    a566:	e073      	b.n	a650 <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    a568:	2313      	movs	r3, #19
    a56a:	18fb      	adds	r3, r7, r3
    a56c:	781b      	ldrb	r3, [r3, #0]
    a56e:	001a      	movs	r2, r3
    a570:	2304      	movs	r3, #4
    a572:	4013      	ands	r3, r2
    a574:	d005      	beq.n	a582 <sd_mmc_spi_adtc_start+0x16a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    a576:	4b44      	ldr	r3, [pc, #272]	; (a688 <sd_mmc_spi_adtc_start+0x270>)
    a578:	447b      	add	r3, pc
    a57a:	2209      	movs	r2, #9
    a57c:	701a      	strb	r2, [r3, #0]
		return false;
    a57e:	2300      	movs	r3, #0
    a580:	e066      	b.n	a650 <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & ~R1_SPI_IDLE) {
    a582:	2313      	movs	r3, #19
    a584:	18fb      	adds	r3, r7, r3
    a586:	781b      	ldrb	r3, [r3, #0]
    a588:	001a      	movs	r2, r3
    a58a:	2301      	movs	r3, #1
    a58c:	439a      	bics	r2, r3
    a58e:	1e13      	subs	r3, r2, #0
    a590:	d005      	beq.n	a59e <sd_mmc_spi_adtc_start+0x186>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a592:	4b3e      	ldr	r3, [pc, #248]	; (a68c <sd_mmc_spi_adtc_start+0x274>)
    a594:	447b      	add	r3, pc
    a596:	2201      	movs	r2, #1
    a598:	701a      	strb	r2, [r3, #0]
		return false;
    a59a:	2300      	movs	r3, #0
    a59c:	e058      	b.n	a650 <sd_mmc_spi_adtc_start+0x238>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    a59e:	68fa      	ldr	r2, [r7, #12]
    a5a0:	2380      	movs	r3, #128	; 0x80
    a5a2:	019b      	lsls	r3, r3, #6
    a5a4:	4013      	ands	r3, r2
    a5a6:	d00f      	beq.n	a5c8 <sd_mmc_spi_adtc_start+0x1b0>
		if (!sd_mmc_spi_wait_busy()) {
    a5a8:	4b39      	ldr	r3, [pc, #228]	; (a690 <sd_mmc_spi_adtc_start+0x278>)
    a5aa:	447b      	add	r3, pc
    a5ac:	4798      	blx	r3
    a5ae:	0003      	movs	r3, r0
    a5b0:	001a      	movs	r2, r3
    a5b2:	2301      	movs	r3, #1
    a5b4:	4053      	eors	r3, r2
    a5b6:	b2db      	uxtb	r3, r3
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	d005      	beq.n	a5c8 <sd_mmc_spi_adtc_start+0x1b0>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    a5bc:	4b35      	ldr	r3, [pc, #212]	; (a694 <sd_mmc_spi_adtc_start+0x27c>)
    a5be:	447b      	add	r3, pc
    a5c0:	2203      	movs	r2, #3
    a5c2:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    a5c4:	2300      	movs	r3, #0
    a5c6:	e043      	b.n	a650 <sd_mmc_spi_adtc_start+0x238>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    a5c8:	68fa      	ldr	r2, [r7, #12]
    a5ca:	2380      	movs	r3, #128	; 0x80
    a5cc:	009b      	lsls	r3, r3, #2
    a5ce:	4013      	ands	r3, r2
    a5d0:	d016      	beq.n	a600 <sd_mmc_spi_adtc_start+0x1e8>
		sd_mmc_spi_response_32 = 0;
    a5d2:	4b31      	ldr	r3, [pc, #196]	; (a698 <sd_mmc_spi_adtc_start+0x280>)
    a5d4:	447b      	add	r3, pc
    a5d6:	2200      	movs	r2, #0
    a5d8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    a5da:	231c      	movs	r3, #28
    a5dc:	18fb      	adds	r3, r7, r3
    a5de:	881b      	ldrh	r3, [r3, #0]
    a5e0:	4a2e      	ldr	r2, [pc, #184]	; (a69c <sd_mmc_spi_adtc_start+0x284>)
    a5e2:	447a      	add	r2, pc
    a5e4:	0011      	movs	r1, r2
    a5e6:	4a2e      	ldr	r2, [pc, #184]	; (a6a0 <sd_mmc_spi_adtc_start+0x288>)
    a5e8:	447a      	add	r2, pc
    a5ea:	0010      	movs	r0, r2
    a5ec:	2201      	movs	r2, #1
    a5ee:	4d21      	ldr	r5, [pc, #132]	; (a674 <sd_mmc_spi_adtc_start+0x25c>)
    a5f0:	5965      	ldr	r5, [r4, r5]
    a5f2:	47a8      	blx	r5
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    a5f4:	4b2b      	ldr	r3, [pc, #172]	; (a6a4 <sd_mmc_spi_adtc_start+0x28c>)
    a5f6:	447b      	add	r3, pc
    a5f8:	681a      	ldr	r2, [r3, #0]
    a5fa:	4b2b      	ldr	r3, [pc, #172]	; (a6a8 <sd_mmc_spi_adtc_start+0x290>)
    a5fc:	447b      	add	r3, pc
    a5fe:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    a600:	68fa      	ldr	r2, [r7, #12]
    a602:	2380      	movs	r3, #128	; 0x80
    a604:	00db      	lsls	r3, r3, #3
    a606:	4013      	ands	r3, r2
    a608:	d013      	beq.n	a632 <sd_mmc_spi_adtc_start+0x21a>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    a60a:	231c      	movs	r3, #28
    a60c:	18fb      	adds	r3, r7, r3
    a60e:	881b      	ldrh	r3, [r3, #0]
    a610:	4a26      	ldr	r2, [pc, #152]	; (a6ac <sd_mmc_spi_adtc_start+0x294>)
    a612:	447a      	add	r2, pc
    a614:	0011      	movs	r1, r2
    a616:	4a26      	ldr	r2, [pc, #152]	; (a6b0 <sd_mmc_spi_adtc_start+0x298>)
    a618:	447a      	add	r2, pc
    a61a:	0010      	movs	r0, r2
    a61c:	2204      	movs	r2, #4
    a61e:	4d15      	ldr	r5, [pc, #84]	; (a674 <sd_mmc_spi_adtc_start+0x25c>)
    a620:	5964      	ldr	r4, [r4, r5]
    a622:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    a624:	4b23      	ldr	r3, [pc, #140]	; (a6b4 <sd_mmc_spi_adtc_start+0x29c>)
    a626:	447b      	add	r3, pc
    a628:	681b      	ldr	r3, [r3, #0]
    a62a:	ba1a      	rev	r2, r3
    a62c:	4b22      	ldr	r3, [pc, #136]	; (a6b8 <sd_mmc_spi_adtc_start+0x2a0>)
    a62e:	447b      	add	r3, pc
    a630:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    a632:	4b22      	ldr	r3, [pc, #136]	; (a6bc <sd_mmc_spi_adtc_start+0x2a4>)
    a634:	447b      	add	r3, pc
    a636:	1dba      	adds	r2, r7, #6
    a638:	8812      	ldrh	r2, [r2, #0]
    a63a:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    a63c:	4b20      	ldr	r3, [pc, #128]	; (a6c0 <sd_mmc_spi_adtc_start+0x2a8>)
    a63e:	447b      	add	r3, pc
    a640:	1d3a      	adds	r2, r7, #4
    a642:	8812      	ldrh	r2, [r2, #0]
    a644:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    a646:	4b1f      	ldr	r3, [pc, #124]	; (a6c4 <sd_mmc_spi_adtc_start+0x2ac>)
    a648:	447b      	add	r3, pc
    a64a:	2200      	movs	r2, #0
    a64c:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    a64e:	2301      	movs	r3, #1
}
    a650:	0018      	movs	r0, r3
    a652:	46bd      	mov	sp, r7
    a654:	b008      	add	sp, #32
    a656:	bdb0      	pop	{r4, r5, r7, pc}
    a658:	000079b0 	.word	0x000079b0
    a65c:	1fff6147 	.word	0x1fff6147
    a660:	fffff8ed 	.word	0xfffff8ed
    a664:	1fff609c 	.word	0x1fff609c
    a668:	000002d4 	.word	0x000002d4
    a66c:	1fff6088 	.word	0x1fff6088
    a670:	1fff6066 	.word	0x1fff6066
    a674:	000001f0 	.word	0x000001f0
    a678:	1fff6046 	.word	0x1fff6046
    a67c:	1fff6057 	.word	0x1fff6057
    a680:	1fff6042 	.word	0x1fff6042
    a684:	1fff602d 	.word	0x1fff602d
    a688:	1fff6013 	.word	0x1fff6013
    a68c:	1fff5ff7 	.word	0x1fff5ff7
    a690:	fffff897 	.word	0xfffff897
    a694:	1fff5fcd 	.word	0x1fff5fcd
    a698:	1fff5fb8 	.word	0x1fff5fb8
    a69c:	1fff5faa 	.word	0x1fff5faa
    a6a0:	1fff5f60 	.word	0x1fff5f60
    a6a4:	1fff5f96 	.word	0x1fff5f96
    a6a8:	1fff5f90 	.word	0x1fff5f90
    a6ac:	1fff5f7a 	.word	0x1fff5f7a
    a6b0:	1fff5f30 	.word	0x1fff5f30
    a6b4:	1fff5f66 	.word	0x1fff5f66
    a6b8:	1fff5f5e 	.word	0x1fff5f5e
    a6bc:	1fff5f60 	.word	0x1fff5f60
    a6c0:	1fff5f58 	.word	0x1fff5f58
    a6c4:	1fff5f48 	.word	0x1fff5f48

0000a6c8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    a6c8:	b580      	push	{r7, lr}
    a6ca:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    a6cc:	4b02      	ldr	r3, [pc, #8]	; (a6d8 <sd_mmc_spi_get_response+0x10>)
    a6ce:	447b      	add	r3, pc
    a6d0:	681b      	ldr	r3, [r3, #0]
}
    a6d2:	0018      	movs	r0, r3
    a6d4:	46bd      	mov	sp, r7
    a6d6:	bd80      	pop	{r7, pc}
    a6d8:	1fff5ebe 	.word	0x1fff5ebe

0000a6dc <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    a6dc:	b5b0      	push	{r4, r5, r7, lr}
    a6de:	b084      	sub	sp, #16
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
    a6e4:	4c26      	ldr	r4, [pc, #152]	; (a780 <sd_mmc_spi_read_word+0xa4>)
    a6e6:	447c      	add	r4, pc
	uint16_t dummy = 0xFF;
    a6e8:	230e      	movs	r3, #14
    a6ea:	18fb      	adds	r3, r7, r3
    a6ec:	22ff      	movs	r2, #255	; 0xff
    a6ee:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a6f0:	4b24      	ldr	r3, [pc, #144]	; (a784 <sd_mmc_spi_read_word+0xa8>)
    a6f2:	447b      	add	r3, pc
    a6f4:	2200      	movs	r2, #0
    a6f6:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    a6f8:	4b23      	ldr	r3, [pc, #140]	; (a788 <sd_mmc_spi_read_word+0xac>)
    a6fa:	447b      	add	r3, pc
    a6fc:	681a      	ldr	r2, [r3, #0]
    a6fe:	4b23      	ldr	r3, [pc, #140]	; (a78c <sd_mmc_spi_read_word+0xb0>)
    a700:	447b      	add	r3, pc
    a702:	881b      	ldrh	r3, [r3, #0]
    a704:	0019      	movs	r1, r3
    a706:	4b22      	ldr	r3, [pc, #136]	; (a790 <sd_mmc_spi_read_word+0xb4>)
    a708:	58e3      	ldr	r3, [r4, r3]
    a70a:	0010      	movs	r0, r2
    a70c:	4798      	blx	r3
    a70e:	1e0b      	subs	r3, r1, #0
    a710:	d10b      	bne.n	a72a <sd_mmc_spi_read_word+0x4e>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    a712:	4b20      	ldr	r3, [pc, #128]	; (a794 <sd_mmc_spi_read_word+0xb8>)
    a714:	447b      	add	r3, pc
    a716:	4798      	blx	r3
    a718:	0003      	movs	r3, r0
    a71a:	001a      	movs	r2, r3
    a71c:	2301      	movs	r3, #1
    a71e:	4053      	eors	r3, r2
    a720:	b2db      	uxtb	r3, r3
    a722:	2b00      	cmp	r3, #0
    a724:	d001      	beq.n	a72a <sd_mmc_spi_read_word+0x4e>
			return false;
    a726:	2300      	movs	r3, #0
    a728:	e026      	b.n	a778 <sd_mmc_spi_read_word+0x9c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    a72a:	230e      	movs	r3, #14
    a72c:	18fb      	adds	r3, r7, r3
    a72e:	881b      	ldrh	r3, [r3, #0]
    a730:	1d39      	adds	r1, r7, #4
    a732:	4a19      	ldr	r2, [pc, #100]	; (a798 <sd_mmc_spi_read_word+0xbc>)
    a734:	447a      	add	r2, pc
    a736:	0010      	movs	r0, r2
    a738:	2204      	movs	r2, #4
    a73a:	4d18      	ldr	r5, [pc, #96]	; (a79c <sd_mmc_spi_read_word+0xc0>)
    a73c:	5965      	ldr	r5, [r4, r5]
    a73e:	47a8      	blx	r5
			dummy);
	*value = le32_to_cpu(*value);
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	687a      	ldr	r2, [r7, #4]
    a744:	6812      	ldr	r2, [r2, #0]
    a746:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    a748:	4b15      	ldr	r3, [pc, #84]	; (a7a0 <sd_mmc_spi_read_word+0xc4>)
    a74a:	447b      	add	r3, pc
    a74c:	681b      	ldr	r3, [r3, #0]
    a74e:	1d1a      	adds	r2, r3, #4
    a750:	4b14      	ldr	r3, [pc, #80]	; (a7a4 <sd_mmc_spi_read_word+0xc8>)
    a752:	447b      	add	r3, pc
    a754:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    a756:	4b14      	ldr	r3, [pc, #80]	; (a7a8 <sd_mmc_spi_read_word+0xcc>)
    a758:	447b      	add	r3, pc
    a75a:	681a      	ldr	r2, [r3, #0]
    a75c:	4b13      	ldr	r3, [pc, #76]	; (a7ac <sd_mmc_spi_read_word+0xd0>)
    a75e:	447b      	add	r3, pc
    a760:	881b      	ldrh	r3, [r3, #0]
    a762:	0019      	movs	r1, r3
    a764:	4b0a      	ldr	r3, [pc, #40]	; (a790 <sd_mmc_spi_read_word+0xb4>)
    a766:	58e3      	ldr	r3, [r4, r3]
    a768:	0010      	movs	r0, r2
    a76a:	4798      	blx	r3
    a76c:	1e0b      	subs	r3, r1, #0
    a76e:	d102      	bne.n	a776 <sd_mmc_spi_read_word+0x9a>
		// End of block
		sd_mmc_spi_stop_read_block();
    a770:	4b0f      	ldr	r3, [pc, #60]	; (a7b0 <sd_mmc_spi_read_word+0xd4>)
    a772:	447b      	add	r3, pc
    a774:	4798      	blx	r3
	}
	return true;
    a776:	2301      	movs	r3, #1
}
    a778:	0018      	movs	r0, r3
    a77a:	46bd      	mov	sp, r7
    a77c:	b004      	add	sp, #16
    a77e:	bdb0      	pop	{r4, r5, r7, pc}
    a780:	000076fa 	.word	0x000076fa
    a784:	1fff5e99 	.word	0x1fff5e99
    a788:	1fff5e96 	.word	0x1fff5e96
    a78c:	1fff5e94 	.word	0x1fff5e94
    a790:	00000270 	.word	0x00000270
    a794:	fffff7bd 	.word	0xfffff7bd
    a798:	1fff5e14 	.word	0x1fff5e14
    a79c:	000001f0 	.word	0x000001f0
    a7a0:	1fff5e46 	.word	0x1fff5e46
    a7a4:	1fff5e3e 	.word	0x1fff5e3e
    a7a8:	1fff5e38 	.word	0x1fff5e38
    a7ac:	1fff5e36 	.word	0x1fff5e36
    a7b0:	fffff7ff 	.word	0xfffff7ff

0000a7b4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    a7b4:	b5b0      	push	{r4, r5, r7, lr}
    a7b6:	b084      	sub	sp, #16
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	000a      	movs	r2, r1
    a7be:	1cbb      	adds	r3, r7, #2
    a7c0:	801a      	strh	r2, [r3, #0]
    a7c2:	4c24      	ldr	r4, [pc, #144]	; (a854 <sd_mmc_spi_start_read_blocks+0xa0>)
    a7c4:	447c      	add	r4, pc
	uint32_t pos;
	uint16_t dummy = 0xFF;
    a7c6:	230a      	movs	r3, #10
    a7c8:	18fb      	adds	r3, r7, r3
    a7ca:	22ff      	movs	r2, #255	; 0xff
    a7cc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a7ce:	4b22      	ldr	r3, [pc, #136]	; (a858 <sd_mmc_spi_start_read_blocks+0xa4>)
    a7d0:	447b      	add	r3, pc
    a7d2:	2200      	movs	r2, #0
    a7d4:	701a      	strb	r2, [r3, #0]
	pos = 0;
    a7d6:	2300      	movs	r3, #0
    a7d8:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    a7da:	e02e      	b.n	a83a <sd_mmc_spi_start_read_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    a7dc:	4b1f      	ldr	r3, [pc, #124]	; (a85c <sd_mmc_spi_start_read_blocks+0xa8>)
    a7de:	447b      	add	r3, pc
    a7e0:	4798      	blx	r3
    a7e2:	0003      	movs	r3, r0
    a7e4:	001a      	movs	r2, r3
    a7e6:	2301      	movs	r3, #1
    a7e8:	4053      	eors	r3, r2
    a7ea:	b2db      	uxtb	r3, r3
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d001      	beq.n	a7f4 <sd_mmc_spi_start_read_blocks+0x40>
			return false;
    a7f0:	2300      	movs	r3, #0
    a7f2:	e02a      	b.n	a84a <sd_mmc_spi_start_read_blocks+0x96>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    a7f4:	687a      	ldr	r2, [r7, #4]
    a7f6:	68fb      	ldr	r3, [r7, #12]
    a7f8:	18d1      	adds	r1, r2, r3
    a7fa:	4b19      	ldr	r3, [pc, #100]	; (a860 <sd_mmc_spi_start_read_blocks+0xac>)
    a7fc:	447b      	add	r3, pc
    a7fe:	881a      	ldrh	r2, [r3, #0]
    a800:	230a      	movs	r3, #10
    a802:	18fb      	adds	r3, r7, r3
    a804:	881b      	ldrh	r3, [r3, #0]
    a806:	4817      	ldr	r0, [pc, #92]	; (a864 <sd_mmc_spi_start_read_blocks+0xb0>)
    a808:	4478      	add	r0, pc
    a80a:	4d17      	ldr	r5, [pc, #92]	; (a868 <sd_mmc_spi_start_read_blocks+0xb4>)
    a80c:	5965      	ldr	r5, [r4, r5]
    a80e:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    a810:	4b16      	ldr	r3, [pc, #88]	; (a86c <sd_mmc_spi_start_read_blocks+0xb8>)
    a812:	447b      	add	r3, pc
    a814:	881b      	ldrh	r3, [r3, #0]
    a816:	001a      	movs	r2, r3
    a818:	68fb      	ldr	r3, [r7, #12]
    a81a:	189b      	adds	r3, r3, r2
    a81c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    a81e:	4b14      	ldr	r3, [pc, #80]	; (a870 <sd_mmc_spi_start_read_blocks+0xbc>)
    a820:	447b      	add	r3, pc
    a822:	881b      	ldrh	r3, [r3, #0]
    a824:	001a      	movs	r2, r3
    a826:	4b13      	ldr	r3, [pc, #76]	; (a874 <sd_mmc_spi_start_read_blocks+0xc0>)
    a828:	447b      	add	r3, pc
    a82a:	681b      	ldr	r3, [r3, #0]
    a82c:	18d2      	adds	r2, r2, r3
    a82e:	4b12      	ldr	r3, [pc, #72]	; (a878 <sd_mmc_spi_start_read_blocks+0xc4>)
    a830:	447b      	add	r3, pc
    a832:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    a834:	4b11      	ldr	r3, [pc, #68]	; (a87c <sd_mmc_spi_start_read_blocks+0xc8>)
    a836:	447b      	add	r3, pc
    a838:	4798      	blx	r3
	while (nb_block--) {
    a83a:	1cbb      	adds	r3, r7, #2
    a83c:	881b      	ldrh	r3, [r3, #0]
    a83e:	1cba      	adds	r2, r7, #2
    a840:	1e59      	subs	r1, r3, #1
    a842:	8011      	strh	r1, [r2, #0]
    a844:	2b00      	cmp	r3, #0
    a846:	d1c9      	bne.n	a7dc <sd_mmc_spi_start_read_blocks+0x28>
	}
	return true;
    a848:	2301      	movs	r3, #1
}
    a84a:	0018      	movs	r0, r3
    a84c:	46bd      	mov	sp, r7
    a84e:	b004      	add	sp, #16
    a850:	bdb0      	pop	{r4, r5, r7, pc}
    a852:	46c0      	nop			; (mov r8, r8)
    a854:	0000761c 	.word	0x0000761c
    a858:	1fff5dbb 	.word	0x1fff5dbb
    a85c:	fffff6f3 	.word	0xfffff6f3
    a860:	1fff5d98 	.word	0x1fff5d98
    a864:	1fff5d40 	.word	0x1fff5d40
    a868:	000001f0 	.word	0x000001f0
    a86c:	1fff5d82 	.word	0x1fff5d82
    a870:	1fff5d74 	.word	0x1fff5d74
    a874:	1fff5d68 	.word	0x1fff5d68
    a878:	1fff5d60 	.word	0x1fff5d60
    a87c:	fffff73b 	.word	0xfffff73b

0000a880 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    a880:	b580      	push	{r7, lr}
    a882:	af00      	add	r7, sp, #0
	return true;
    a884:	2301      	movs	r3, #1
}
    a886:	0018      	movs	r0, r3
    a888:	46bd      	mov	sp, r7
    a88a:	bd80      	pop	{r7, pc}

0000a88c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    a88c:	b590      	push	{r4, r7, lr}
    a88e:	b085      	sub	sp, #20
    a890:	af00      	add	r7, sp, #0
    a892:	6078      	str	r0, [r7, #4]
    a894:	000a      	movs	r2, r1
    a896:	1cbb      	adds	r3, r7, #2
    a898:	801a      	strh	r2, [r3, #0]
    a89a:	4c2b      	ldr	r4, [pc, #172]	; (a948 <sd_mmc_spi_start_write_blocks+0xbc>)
    a89c:	447c      	add	r4, pc
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a89e:	4b2b      	ldr	r3, [pc, #172]	; (a94c <sd_mmc_spi_start_write_blocks+0xc0>)
    a8a0:	447b      	add	r3, pc
    a8a2:	2200      	movs	r2, #0
    a8a4:	701a      	strb	r2, [r3, #0]
	pos = 0;
    a8a6:	2300      	movs	r3, #0
    a8a8:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    a8aa:	e041      	b.n	a930 <sd_mmc_spi_start_write_blocks+0xa4>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    a8ac:	4b28      	ldr	r3, [pc, #160]	; (a950 <sd_mmc_spi_start_write_blocks+0xc4>)
    a8ae:	447b      	add	r3, pc
    a8b0:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    a8b2:	687a      	ldr	r2, [r7, #4]
    a8b4:	68fb      	ldr	r3, [r7, #12]
    a8b6:	18d1      	adds	r1, r2, r3
    a8b8:	4b26      	ldr	r3, [pc, #152]	; (a954 <sd_mmc_spi_start_write_blocks+0xc8>)
    a8ba:	447b      	add	r3, pc
    a8bc:	881b      	ldrh	r3, [r3, #0]
    a8be:	4a26      	ldr	r2, [pc, #152]	; (a958 <sd_mmc_spi_start_write_blocks+0xcc>)
    a8c0:	447a      	add	r2, pc
    a8c2:	0010      	movs	r0, r2
    a8c4:	001a      	movs	r2, r3
    a8c6:	4b25      	ldr	r3, [pc, #148]	; (a95c <sd_mmc_spi_start_write_blocks+0xd0>)
    a8c8:	58e3      	ldr	r3, [r4, r3]
    a8ca:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    a8cc:	4b24      	ldr	r3, [pc, #144]	; (a960 <sd_mmc_spi_start_write_blocks+0xd4>)
    a8ce:	447b      	add	r3, pc
    a8d0:	881b      	ldrh	r3, [r3, #0]
    a8d2:	001a      	movs	r2, r3
    a8d4:	68fb      	ldr	r3, [r7, #12]
    a8d6:	189b      	adds	r3, r3, r2
    a8d8:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    a8da:	4b22      	ldr	r3, [pc, #136]	; (a964 <sd_mmc_spi_start_write_blocks+0xd8>)
    a8dc:	447b      	add	r3, pc
    a8de:	881b      	ldrh	r3, [r3, #0]
    a8e0:	001a      	movs	r2, r3
    a8e2:	4b21      	ldr	r3, [pc, #132]	; (a968 <sd_mmc_spi_start_write_blocks+0xdc>)
    a8e4:	447b      	add	r3, pc
    a8e6:	681b      	ldr	r3, [r3, #0]
    a8e8:	18d2      	adds	r2, r2, r3
    a8ea:	4b20      	ldr	r3, [pc, #128]	; (a96c <sd_mmc_spi_start_write_blocks+0xe0>)
    a8ec:	447b      	add	r3, pc
    a8ee:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    a8f0:	4b1f      	ldr	r3, [pc, #124]	; (a970 <sd_mmc_spi_start_write_blocks+0xe4>)
    a8f2:	447b      	add	r3, pc
    a8f4:	4798      	blx	r3
    a8f6:	0003      	movs	r3, r0
    a8f8:	001a      	movs	r2, r3
    a8fa:	2301      	movs	r3, #1
    a8fc:	4053      	eors	r3, r2
    a8fe:	b2db      	uxtb	r3, r3
    a900:	2b00      	cmp	r3, #0
    a902:	d001      	beq.n	a908 <sd_mmc_spi_start_write_blocks+0x7c>
			return false;
    a904:	2300      	movs	r3, #0
    a906:	e01b      	b.n	a940 <sd_mmc_spi_start_write_blocks+0xb4>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    a908:	1cbb      	adds	r3, r7, #2
    a90a:	881b      	ldrh	r3, [r3, #0]
    a90c:	2b00      	cmp	r3, #0
    a90e:	d00f      	beq.n	a930 <sd_mmc_spi_start_write_blocks+0xa4>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    a910:	4b18      	ldr	r3, [pc, #96]	; (a974 <sd_mmc_spi_start_write_blocks+0xe8>)
    a912:	447b      	add	r3, pc
    a914:	4798      	blx	r3
    a916:	0003      	movs	r3, r0
    a918:	001a      	movs	r2, r3
    a91a:	2301      	movs	r3, #1
    a91c:	4053      	eors	r3, r2
    a91e:	b2db      	uxtb	r3, r3
    a920:	2b00      	cmp	r3, #0
    a922:	d005      	beq.n	a930 <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a924:	4b14      	ldr	r3, [pc, #80]	; (a978 <sd_mmc_spi_start_write_blocks+0xec>)
    a926:	447b      	add	r3, pc
    a928:	2205      	movs	r2, #5
    a92a:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    a92c:	2300      	movs	r3, #0
    a92e:	e007      	b.n	a940 <sd_mmc_spi_start_write_blocks+0xb4>
	while (nb_block--) {
    a930:	1cbb      	adds	r3, r7, #2
    a932:	881b      	ldrh	r3, [r3, #0]
    a934:	1cba      	adds	r2, r7, #2
    a936:	1e59      	subs	r1, r3, #1
    a938:	8011      	strh	r1, [r2, #0]
    a93a:	2b00      	cmp	r3, #0
    a93c:	d1b6      	bne.n	a8ac <sd_mmc_spi_start_write_blocks+0x20>
			}
		}
	}
	return true;
    a93e:	2301      	movs	r3, #1
}
    a940:	0018      	movs	r0, r3
    a942:	46bd      	mov	sp, r7
    a944:	b005      	add	sp, #20
    a946:	bd90      	pop	{r4, r7, pc}
    a948:	00007544 	.word	0x00007544
    a94c:	1fff5ceb 	.word	0x1fff5ceb
    a950:	fffff6fb 	.word	0xfffff6fb
    a954:	1fff5cda 	.word	0x1fff5cda
    a958:	1fff5c88 	.word	0x1fff5c88
    a95c:	000002d4 	.word	0x000002d4
    a960:	1fff5cc6 	.word	0x1fff5cc6
    a964:	1fff5cb8 	.word	0x1fff5cb8
    a968:	1fff5cac 	.word	0x1fff5cac
    a96c:	1fff5ca4 	.word	0x1fff5ca4
    a970:	fffff71f 	.word	0xfffff71f
    a974:	fffff52f 	.word	0xfffff52f
    a978:	1fff5c65 	.word	0x1fff5c65

0000a97c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    a980:	4b0b      	ldr	r3, [pc, #44]	; (a9b0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    a982:	447b      	add	r3, pc
    a984:	4798      	blx	r3
    a986:	0003      	movs	r3, r0
    a988:	001a      	movs	r2, r3
    a98a:	2301      	movs	r3, #1
    a98c:	4053      	eors	r3, r2
    a98e:	b2db      	uxtb	r3, r3
    a990:	2b00      	cmp	r3, #0
    a992:	d005      	beq.n	a9a0 <sd_mmc_spi_wait_end_of_write_blocks+0x24>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a994:	4b07      	ldr	r3, [pc, #28]	; (a9b4 <sd_mmc_spi_wait_end_of_write_blocks+0x38>)
    a996:	447b      	add	r3, pc
    a998:	2205      	movs	r2, #5
    a99a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    a99c:	2300      	movs	r3, #0
    a99e:	e003      	b.n	a9a8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    a9a0:	4b05      	ldr	r3, [pc, #20]	; (a9b8 <sd_mmc_spi_wait_end_of_write_blocks+0x3c>)
    a9a2:	447b      	add	r3, pc
    a9a4:	4798      	blx	r3
    a9a6:	0003      	movs	r3, r0
}
    a9a8:	0018      	movs	r0, r3
    a9aa:	46bd      	mov	sp, r7
    a9ac:	bd80      	pop	{r7, pc}
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	fffff4bf 	.word	0xfffff4bf
    a9b4:	1fff5bf5 	.word	0x1fff5bf5
    a9b8:	fffff727 	.word	0xfffff727

0000a9bc <mem_test_unit_ready>:
    a9bc:	b580      	push	{r7, lr}
    a9be:	b084      	sub	sp, #16
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	0002      	movs	r2, r0
    a9c4:	1dfb      	adds	r3, r7, #7
    a9c6:	701a      	strb	r2, [r3, #0]
    a9c8:	1dfb      	adds	r3, r7, #7
    a9ca:	781b      	ldrb	r3, [r3, #0]
    a9cc:	2b00      	cmp	r3, #0
    a9ce:	d109      	bne.n	a9e4 <mem_test_unit_ready+0x28>
    a9d0:	1dfb      	adds	r3, r7, #7
    a9d2:	781a      	ldrb	r2, [r3, #0]
    a9d4:	4b09      	ldr	r3, [pc, #36]	; (a9fc <mem_test_unit_ready+0x40>)
    a9d6:	447b      	add	r3, pc
    a9d8:	0152      	lsls	r2, r2, #5
    a9da:	58d3      	ldr	r3, [r2, r3]
    a9dc:	4798      	blx	r3
    a9de:	0003      	movs	r3, r0
    a9e0:	001a      	movs	r2, r3
    a9e2:	e000      	b.n	a9e6 <mem_test_unit_ready+0x2a>
    a9e4:	2201      	movs	r2, #1
    a9e6:	230f      	movs	r3, #15
    a9e8:	18fb      	adds	r3, r7, r3
    a9ea:	701a      	strb	r2, [r3, #0]
    a9ec:	230f      	movs	r3, #15
    a9ee:	18fb      	adds	r3, r7, r3
    a9f0:	781b      	ldrb	r3, [r3, #0]
    a9f2:	0018      	movs	r0, r3
    a9f4:	46bd      	mov	sp, r7
    a9f6:	b004      	add	sp, #16
    a9f8:	bd80      	pop	{r7, pc}
    a9fa:	46c0      	nop			; (mov r8, r8)
    a9fc:	1fff5722 	.word	0x1fff5722

0000aa00 <mem_read_capacity>:
    aa00:	b580      	push	{r7, lr}
    aa02:	b084      	sub	sp, #16
    aa04:	af00      	add	r7, sp, #0
    aa06:	0002      	movs	r2, r0
    aa08:	6039      	str	r1, [r7, #0]
    aa0a:	1dfb      	adds	r3, r7, #7
    aa0c:	701a      	strb	r2, [r3, #0]
    aa0e:	1dfb      	adds	r3, r7, #7
    aa10:	781b      	ldrb	r3, [r3, #0]
    aa12:	2b00      	cmp	r3, #0
    aa14:	d10d      	bne.n	aa32 <mem_read_capacity+0x32>
    aa16:	1dfb      	adds	r3, r7, #7
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	4a0b      	ldr	r2, [pc, #44]	; (aa48 <mem_read_capacity+0x48>)
    aa1c:	447a      	add	r2, pc
    aa1e:	015b      	lsls	r3, r3, #5
    aa20:	18d3      	adds	r3, r2, r3
    aa22:	3304      	adds	r3, #4
    aa24:	681b      	ldr	r3, [r3, #0]
    aa26:	683a      	ldr	r2, [r7, #0]
    aa28:	0010      	movs	r0, r2
    aa2a:	4798      	blx	r3
    aa2c:	0003      	movs	r3, r0
    aa2e:	001a      	movs	r2, r3
    aa30:	e000      	b.n	aa34 <mem_read_capacity+0x34>
    aa32:	2201      	movs	r2, #1
    aa34:	230f      	movs	r3, #15
    aa36:	18fb      	adds	r3, r7, r3
    aa38:	701a      	strb	r2, [r3, #0]
    aa3a:	230f      	movs	r3, #15
    aa3c:	18fb      	adds	r3, r7, r3
    aa3e:	781b      	ldrb	r3, [r3, #0]
    aa40:	0018      	movs	r0, r3
    aa42:	46bd      	mov	sp, r7
    aa44:	b004      	add	sp, #16
    aa46:	bd80      	pop	{r7, pc}
    aa48:	1fff56dc 	.word	0x1fff56dc

0000aa4c <mem_sector_size>:
    aa4c:	b580      	push	{r7, lr}
    aa4e:	b084      	sub	sp, #16
    aa50:	af00      	add	r7, sp, #0
    aa52:	0002      	movs	r2, r0
    aa54:	1dfb      	adds	r3, r7, #7
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	1dfb      	adds	r3, r7, #7
    aa5a:	781b      	ldrb	r3, [r3, #0]
    aa5c:	425a      	negs	r2, r3
    aa5e:	4153      	adcs	r3, r2
    aa60:	b2da      	uxtb	r2, r3
    aa62:	230f      	movs	r3, #15
    aa64:	18fb      	adds	r3, r7, r3
    aa66:	701a      	strb	r2, [r3, #0]
    aa68:	230f      	movs	r3, #15
    aa6a:	18fb      	adds	r3, r7, r3
    aa6c:	781b      	ldrb	r3, [r3, #0]
    aa6e:	0018      	movs	r0, r3
    aa70:	46bd      	mov	sp, r7
    aa72:	b004      	add	sp, #16
    aa74:	bd80      	pop	{r7, pc}
	...

0000aa78 <mem_wr_protect>:
    aa78:	b580      	push	{r7, lr}
    aa7a:	b084      	sub	sp, #16
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	0002      	movs	r2, r0
    aa80:	1dfb      	adds	r3, r7, #7
    aa82:	701a      	strb	r2, [r3, #0]
    aa84:	1dfb      	adds	r3, r7, #7
    aa86:	781b      	ldrb	r3, [r3, #0]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d10a      	bne.n	aaa2 <mem_wr_protect+0x2a>
    aa8c:	1dfb      	adds	r3, r7, #7
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	4a0a      	ldr	r2, [pc, #40]	; (aabc <mem_wr_protect+0x44>)
    aa92:	447a      	add	r2, pc
    aa94:	015b      	lsls	r3, r3, #5
    aa96:	18d3      	adds	r3, r2, r3
    aa98:	330c      	adds	r3, #12
    aa9a:	681b      	ldr	r3, [r3, #0]
    aa9c:	4798      	blx	r3
    aa9e:	1e03      	subs	r3, r0, #0
    aaa0:	d001      	beq.n	aaa6 <mem_wr_protect+0x2e>
    aaa2:	2201      	movs	r2, #1
    aaa4:	e000      	b.n	aaa8 <mem_wr_protect+0x30>
    aaa6:	2200      	movs	r2, #0
    aaa8:	230f      	movs	r3, #15
    aaaa:	18fb      	adds	r3, r7, r3
    aaac:	701a      	strb	r2, [r3, #0]
    aaae:	230f      	movs	r3, #15
    aab0:	18fb      	adds	r3, r7, r3
    aab2:	781b      	ldrb	r3, [r3, #0]
    aab4:	0018      	movs	r0, r3
    aab6:	46bd      	mov	sp, r7
    aab8:	b004      	add	sp, #16
    aaba:	bd80      	pop	{r7, pc}
    aabc:	1fff5666 	.word	0x1fff5666

0000aac0 <memory_2_ram>:
    aac0:	b580      	push	{r7, lr}
    aac2:	b086      	sub	sp, #24
    aac4:	af00      	add	r7, sp, #0
    aac6:	60b9      	str	r1, [r7, #8]
    aac8:	607a      	str	r2, [r7, #4]
    aaca:	230f      	movs	r3, #15
    aacc:	18fb      	adds	r3, r7, r3
    aace:	1c02      	adds	r2, r0, #0
    aad0:	701a      	strb	r2, [r3, #0]
    aad2:	230f      	movs	r3, #15
    aad4:	18fb      	adds	r3, r7, r3
    aad6:	781b      	ldrb	r3, [r3, #0]
    aad8:	2b00      	cmp	r3, #0
    aada:	d10f      	bne.n	aafc <memory_2_ram+0x3c>
    aadc:	230f      	movs	r3, #15
    aade:	18fb      	adds	r3, r7, r3
    aae0:	781b      	ldrb	r3, [r3, #0]
    aae2:	4a0c      	ldr	r2, [pc, #48]	; (ab14 <memory_2_ram+0x54>)
    aae4:	447a      	add	r2, pc
    aae6:	015b      	lsls	r3, r3, #5
    aae8:	18d3      	adds	r3, r2, r3
    aaea:	3314      	adds	r3, #20
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	6879      	ldr	r1, [r7, #4]
    aaf0:	68ba      	ldr	r2, [r7, #8]
    aaf2:	0010      	movs	r0, r2
    aaf4:	4798      	blx	r3
    aaf6:	0003      	movs	r3, r0
    aaf8:	001a      	movs	r2, r3
    aafa:	e000      	b.n	aafe <memory_2_ram+0x3e>
    aafc:	2201      	movs	r2, #1
    aafe:	2317      	movs	r3, #23
    ab00:	18fb      	adds	r3, r7, r3
    ab02:	701a      	strb	r2, [r3, #0]
    ab04:	2317      	movs	r3, #23
    ab06:	18fb      	adds	r3, r7, r3
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	0018      	movs	r0, r3
    ab0c:	46bd      	mov	sp, r7
    ab0e:	b006      	add	sp, #24
    ab10:	bd80      	pop	{r7, pc}
    ab12:	46c0      	nop			; (mov r8, r8)
    ab14:	1fff5614 	.word	0x1fff5614

0000ab18 <ram_2_memory>:
    ab18:	b580      	push	{r7, lr}
    ab1a:	b086      	sub	sp, #24
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	60b9      	str	r1, [r7, #8]
    ab20:	607a      	str	r2, [r7, #4]
    ab22:	230f      	movs	r3, #15
    ab24:	18fb      	adds	r3, r7, r3
    ab26:	1c02      	adds	r2, r0, #0
    ab28:	701a      	strb	r2, [r3, #0]
    ab2a:	230f      	movs	r3, #15
    ab2c:	18fb      	adds	r3, r7, r3
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	2b00      	cmp	r3, #0
    ab32:	d10f      	bne.n	ab54 <ram_2_memory+0x3c>
    ab34:	230f      	movs	r3, #15
    ab36:	18fb      	adds	r3, r7, r3
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	4a0c      	ldr	r2, [pc, #48]	; (ab6c <ram_2_memory+0x54>)
    ab3c:	447a      	add	r2, pc
    ab3e:	015b      	lsls	r3, r3, #5
    ab40:	18d3      	adds	r3, r2, r3
    ab42:	3318      	adds	r3, #24
    ab44:	681b      	ldr	r3, [r3, #0]
    ab46:	6879      	ldr	r1, [r7, #4]
    ab48:	68ba      	ldr	r2, [r7, #8]
    ab4a:	0010      	movs	r0, r2
    ab4c:	4798      	blx	r3
    ab4e:	0003      	movs	r3, r0
    ab50:	001a      	movs	r2, r3
    ab52:	e000      	b.n	ab56 <ram_2_memory+0x3e>
    ab54:	2201      	movs	r2, #1
    ab56:	2317      	movs	r3, #23
    ab58:	18fb      	adds	r3, r7, r3
    ab5a:	701a      	strb	r2, [r3, #0]
    ab5c:	2317      	movs	r3, #23
    ab5e:	18fb      	adds	r3, r7, r3
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	0018      	movs	r0, r3
    ab64:	46bd      	mov	sp, r7
    ab66:	b006      	add	sp, #24
    ab68:	bd80      	pop	{r7, pc}
    ab6a:	46c0      	nop			; (mov r8, r8)
    ab6c:	1fff55bc 	.word	0x1fff55bc

0000ab70 <nvm_is_ready>:
    ab70:	b580      	push	{r7, lr}
    ab72:	b082      	sub	sp, #8
    ab74:	af00      	add	r7, sp, #0
    ab76:	4b07      	ldr	r3, [pc, #28]	; (ab94 <nvm_is_ready+0x24>)
    ab78:	607b      	str	r3, [r7, #4]
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	7d1b      	ldrb	r3, [r3, #20]
    ab7e:	b2db      	uxtb	r3, r3
    ab80:	001a      	movs	r2, r3
    ab82:	2301      	movs	r3, #1
    ab84:	4013      	ands	r3, r2
    ab86:	1e5a      	subs	r2, r3, #1
    ab88:	4193      	sbcs	r3, r2
    ab8a:	b2db      	uxtb	r3, r3
    ab8c:	0018      	movs	r0, r3
    ab8e:	46bd      	mov	sp, r7
    ab90:	b002      	add	sp, #8
    ab92:	bd80      	pop	{r7, pc}
    ab94:	41004000 	.word	0x41004000

0000ab98 <system_apb_clock_set_mask>:
    ab98:	b580      	push	{r7, lr}
    ab9a:	b082      	sub	sp, #8
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	0002      	movs	r2, r0
    aba0:	6039      	str	r1, [r7, #0]
    aba2:	1dfb      	adds	r3, r7, #7
    aba4:	701a      	strb	r2, [r3, #0]
    aba6:	1dfb      	adds	r3, r7, #7
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	2b01      	cmp	r3, #1
    abac:	d00a      	beq.n	abc4 <system_apb_clock_set_mask+0x2c>
    abae:	2b02      	cmp	r3, #2
    abb0:	d00f      	beq.n	abd2 <system_apb_clock_set_mask+0x3a>
    abb2:	2b00      	cmp	r3, #0
    abb4:	d114      	bne.n	abe0 <system_apb_clock_set_mask+0x48>
    abb6:	4b0e      	ldr	r3, [pc, #56]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abb8:	4a0d      	ldr	r2, [pc, #52]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abba:	6991      	ldr	r1, [r2, #24]
    abbc:	683a      	ldr	r2, [r7, #0]
    abbe:	430a      	orrs	r2, r1
    abc0:	619a      	str	r2, [r3, #24]
    abc2:	e00f      	b.n	abe4 <system_apb_clock_set_mask+0x4c>
    abc4:	4b0a      	ldr	r3, [pc, #40]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abc6:	4a0a      	ldr	r2, [pc, #40]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abc8:	69d1      	ldr	r1, [r2, #28]
    abca:	683a      	ldr	r2, [r7, #0]
    abcc:	430a      	orrs	r2, r1
    abce:	61da      	str	r2, [r3, #28]
    abd0:	e008      	b.n	abe4 <system_apb_clock_set_mask+0x4c>
    abd2:	4b07      	ldr	r3, [pc, #28]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abd4:	4a06      	ldr	r2, [pc, #24]	; (abf0 <system_apb_clock_set_mask+0x58>)
    abd6:	6a11      	ldr	r1, [r2, #32]
    abd8:	683a      	ldr	r2, [r7, #0]
    abda:	430a      	orrs	r2, r1
    abdc:	621a      	str	r2, [r3, #32]
    abde:	e001      	b.n	abe4 <system_apb_clock_set_mask+0x4c>
    abe0:	2317      	movs	r3, #23
    abe2:	e000      	b.n	abe6 <system_apb_clock_set_mask+0x4e>
    abe4:	2300      	movs	r3, #0
    abe6:	0018      	movs	r0, r3
    abe8:	46bd      	mov	sp, r7
    abea:	b002      	add	sp, #8
    abec:	bd80      	pop	{r7, pc}
    abee:	46c0      	nop			; (mov r8, r8)
    abf0:	40000400 	.word	0x40000400

0000abf4 <nvm_set_config>:
    abf4:	b580      	push	{r7, lr}
    abf6:	b084      	sub	sp, #16
    abf8:	af00      	add	r7, sp, #0
    abfa:	6078      	str	r0, [r7, #4]
    abfc:	4b31      	ldr	r3, [pc, #196]	; (acc4 <nvm_set_config+0xd0>)
    abfe:	60fb      	str	r3, [r7, #12]
    ac00:	2104      	movs	r1, #4
    ac02:	2001      	movs	r0, #1
    ac04:	4b30      	ldr	r3, [pc, #192]	; (acc8 <nvm_set_config+0xd4>)
    ac06:	447b      	add	r3, pc
    ac08:	4798      	blx	r3
    ac0a:	68fb      	ldr	r3, [r7, #12]
    ac0c:	2220      	movs	r2, #32
    ac0e:	32ff      	adds	r2, #255	; 0xff
    ac10:	831a      	strh	r2, [r3, #24]
    ac12:	4b2e      	ldr	r3, [pc, #184]	; (accc <nvm_set_config+0xd8>)
    ac14:	447b      	add	r3, pc
    ac16:	4798      	blx	r3
    ac18:	0003      	movs	r3, r0
    ac1a:	001a      	movs	r2, r3
    ac1c:	2301      	movs	r3, #1
    ac1e:	4053      	eors	r3, r2
    ac20:	b2db      	uxtb	r3, r3
    ac22:	2b00      	cmp	r3, #0
    ac24:	d001      	beq.n	ac2a <nvm_set_config+0x36>
    ac26:	2305      	movs	r3, #5
    ac28:	e048      	b.n	acbc <nvm_set_config+0xc8>
    ac2a:	687b      	ldr	r3, [r7, #4]
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	021b      	lsls	r3, r3, #8
    ac30:	001a      	movs	r2, r3
    ac32:	23c0      	movs	r3, #192	; 0xc0
    ac34:	009b      	lsls	r3, r3, #2
    ac36:	401a      	ands	r2, r3
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	785b      	ldrb	r3, [r3, #1]
    ac3c:	01db      	lsls	r3, r3, #7
    ac3e:	0019      	movs	r1, r3
    ac40:	23ff      	movs	r3, #255	; 0xff
    ac42:	400b      	ands	r3, r1
    ac44:	431a      	orrs	r2, r3
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	789b      	ldrb	r3, [r3, #2]
    ac4a:	005b      	lsls	r3, r3, #1
    ac4c:	0019      	movs	r1, r3
    ac4e:	231e      	movs	r3, #30
    ac50:	400b      	ands	r3, r1
    ac52:	431a      	orrs	r2, r3
    ac54:	687b      	ldr	r3, [r7, #4]
    ac56:	78db      	ldrb	r3, [r3, #3]
    ac58:	049b      	lsls	r3, r3, #18
    ac5a:	0019      	movs	r1, r3
    ac5c:	2380      	movs	r3, #128	; 0x80
    ac5e:	02db      	lsls	r3, r3, #11
    ac60:	400b      	ands	r3, r1
    ac62:	431a      	orrs	r2, r3
    ac64:	687b      	ldr	r3, [r7, #4]
    ac66:	791b      	ldrb	r3, [r3, #4]
    ac68:	041b      	lsls	r3, r3, #16
    ac6a:	0019      	movs	r1, r3
    ac6c:	23c0      	movs	r3, #192	; 0xc0
    ac6e:	029b      	lsls	r3, r3, #10
    ac70:	400b      	ands	r3, r1
    ac72:	431a      	orrs	r2, r3
    ac74:	68fb      	ldr	r3, [r7, #12]
    ac76:	605a      	str	r2, [r3, #4]
    ac78:	68fb      	ldr	r3, [r7, #12]
    ac7a:	689b      	ldr	r3, [r3, #8]
    ac7c:	035b      	lsls	r3, r3, #13
    ac7e:	0f5b      	lsrs	r3, r3, #29
    ac80:	b2db      	uxtb	r3, r3
    ac82:	001a      	movs	r2, r3
    ac84:	2308      	movs	r3, #8
    ac86:	4093      	lsls	r3, r2
    ac88:	b29a      	uxth	r2, r3
    ac8a:	4b11      	ldr	r3, [pc, #68]	; (acd0 <nvm_set_config+0xdc>)
    ac8c:	447b      	add	r3, pc
    ac8e:	801a      	strh	r2, [r3, #0]
    ac90:	68fb      	ldr	r3, [r7, #12]
    ac92:	689b      	ldr	r3, [r3, #8]
    ac94:	b29a      	uxth	r2, r3
    ac96:	4b0f      	ldr	r3, [pc, #60]	; (acd4 <nvm_set_config+0xe0>)
    ac98:	447b      	add	r3, pc
    ac9a:	805a      	strh	r2, [r3, #2]
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	785a      	ldrb	r2, [r3, #1]
    aca0:	4b0d      	ldr	r3, [pc, #52]	; (acd8 <nvm_set_config+0xe4>)
    aca2:	447b      	add	r3, pc
    aca4:	711a      	strb	r2, [r3, #4]
    aca6:	68fb      	ldr	r3, [r7, #12]
    aca8:	8b1b      	ldrh	r3, [r3, #24]
    acaa:	b29b      	uxth	r3, r3
    acac:	001a      	movs	r2, r3
    acae:	2380      	movs	r3, #128	; 0x80
    acb0:	005b      	lsls	r3, r3, #1
    acb2:	4013      	ands	r3, r2
    acb4:	d001      	beq.n	acba <nvm_set_config+0xc6>
    acb6:	2310      	movs	r3, #16
    acb8:	e000      	b.n	acbc <nvm_set_config+0xc8>
    acba:	2300      	movs	r3, #0
    acbc:	0018      	movs	r0, r3
    acbe:	46bd      	mov	sp, r7
    acc0:	b004      	add	sp, #16
    acc2:	bd80      	pop	{r7, pc}
    acc4:	41004000 	.word	0x41004000
    acc8:	ffffff8f 	.word	0xffffff8f
    accc:	ffffff59 	.word	0xffffff59
    acd0:	1fff590c 	.word	0x1fff590c
    acd4:	1fff5900 	.word	0x1fff5900
    acd8:	1fff58f6 	.word	0x1fff58f6

0000acdc <nvm_execute_command>:
    acdc:	b580      	push	{r7, lr}
    acde:	b086      	sub	sp, #24
    ace0:	af00      	add	r7, sp, #0
    ace2:	60b9      	str	r1, [r7, #8]
    ace4:	607a      	str	r2, [r7, #4]
    ace6:	230f      	movs	r3, #15
    ace8:	18fb      	adds	r3, r7, r3
    acea:	1c02      	adds	r2, r0, #0
    acec:	701a      	strb	r2, [r3, #0]
    acee:	4b80      	ldr	r3, [pc, #512]	; (aef0 <nvm_execute_command+0x214>)
    acf0:	447b      	add	r3, pc
    acf2:	881b      	ldrh	r3, [r3, #0]
    acf4:	001a      	movs	r2, r3
    acf6:	4b7f      	ldr	r3, [pc, #508]	; (aef4 <nvm_execute_command+0x218>)
    acf8:	447b      	add	r3, pc
    acfa:	885b      	ldrh	r3, [r3, #2]
    acfc:	435a      	muls	r2, r3
    acfe:	68bb      	ldr	r3, [r7, #8]
    ad00:	429a      	cmp	r2, r3
    ad02:	d209      	bcs.n	ad18 <nvm_execute_command+0x3c>
    ad04:	68bb      	ldr	r3, [r7, #8]
    ad06:	4a7c      	ldr	r2, [pc, #496]	; (aef8 <nvm_execute_command+0x21c>)
    ad08:	4293      	cmp	r3, r2
    ad0a:	d903      	bls.n	ad14 <nvm_execute_command+0x38>
    ad0c:	68bb      	ldr	r3, [r7, #8]
    ad0e:	4a7b      	ldr	r2, [pc, #492]	; (aefc <nvm_execute_command+0x220>)
    ad10:	4293      	cmp	r3, r2
    ad12:	d901      	bls.n	ad18 <nvm_execute_command+0x3c>
    ad14:	2318      	movs	r3, #24
    ad16:	e0e6      	b.n	aee6 <nvm_execute_command+0x20a>
    ad18:	4b79      	ldr	r3, [pc, #484]	; (af00 <nvm_execute_command+0x224>)
    ad1a:	617b      	str	r3, [r7, #20]
    ad1c:	697b      	ldr	r3, [r7, #20]
    ad1e:	685b      	ldr	r3, [r3, #4]
    ad20:	613b      	str	r3, [r7, #16]
    ad22:	693b      	ldr	r3, [r7, #16]
    ad24:	2280      	movs	r2, #128	; 0x80
    ad26:	02d2      	lsls	r2, r2, #11
    ad28:	431a      	orrs	r2, r3
    ad2a:	697b      	ldr	r3, [r7, #20]
    ad2c:	605a      	str	r2, [r3, #4]
    ad2e:	697b      	ldr	r3, [r7, #20]
    ad30:	2220      	movs	r2, #32
    ad32:	32ff      	adds	r2, #255	; 0xff
    ad34:	831a      	strh	r2, [r3, #24]
    ad36:	4b73      	ldr	r3, [pc, #460]	; (af04 <nvm_execute_command+0x228>)
    ad38:	447b      	add	r3, pc
    ad3a:	4798      	blx	r3
    ad3c:	0003      	movs	r3, r0
    ad3e:	001a      	movs	r2, r3
    ad40:	2301      	movs	r3, #1
    ad42:	4053      	eors	r3, r2
    ad44:	b2db      	uxtb	r3, r3
    ad46:	2b00      	cmp	r3, #0
    ad48:	d004      	beq.n	ad54 <nvm_execute_command+0x78>
    ad4a:	697b      	ldr	r3, [r7, #20]
    ad4c:	693a      	ldr	r2, [r7, #16]
    ad4e:	605a      	str	r2, [r3, #4]
    ad50:	2305      	movs	r3, #5
    ad52:	e0c8      	b.n	aee6 <nvm_execute_command+0x20a>
    ad54:	230f      	movs	r3, #15
    ad56:	18fb      	adds	r3, r7, r3
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	3b02      	subs	r3, #2
    ad5c:	2b43      	cmp	r3, #67	; 0x43
    ad5e:	d900      	bls.n	ad62 <nvm_execute_command+0x86>
    ad60:	e0a3      	b.n	aeaa <nvm_execute_command+0x1ce>
    ad62:	0018      	movs	r0, r3
    ad64:	f005 fc94 	bl	10690 <__gnu_thumb1_case_si>
    ad68:	00000136 	.word	0x00000136
    ad6c:	00000142 	.word	0x00000142
    ad70:	00000136 	.word	0x00000136
    ad74:	00000110 	.word	0x00000110
    ad78:	00000110 	.word	0x00000110
    ad7c:	00000142 	.word	0x00000142
    ad80:	00000142 	.word	0x00000142
    ad84:	00000142 	.word	0x00000142
    ad88:	00000142 	.word	0x00000142
    ad8c:	00000142 	.word	0x00000142
    ad90:	00000142 	.word	0x00000142
    ad94:	00000142 	.word	0x00000142
    ad98:	00000142 	.word	0x00000142
    ad9c:	00000142 	.word	0x00000142
    ada0:	00000142 	.word	0x00000142
    ada4:	00000142 	.word	0x00000142
    ada8:	00000142 	.word	0x00000142
    adac:	00000142 	.word	0x00000142
    adb0:	00000142 	.word	0x00000142
    adb4:	00000142 	.word	0x00000142
    adb8:	00000142 	.word	0x00000142
    adbc:	00000142 	.word	0x00000142
    adc0:	00000142 	.word	0x00000142
    adc4:	00000142 	.word	0x00000142
    adc8:	00000142 	.word	0x00000142
    adcc:	00000142 	.word	0x00000142
    add0:	00000142 	.word	0x00000142
    add4:	00000142 	.word	0x00000142
    add8:	00000142 	.word	0x00000142
    addc:	00000142 	.word	0x00000142
    ade0:	00000142 	.word	0x00000142
    ade4:	00000142 	.word	0x00000142
    ade8:	00000142 	.word	0x00000142
    adec:	00000142 	.word	0x00000142
    adf0:	00000142 	.word	0x00000142
    adf4:	00000142 	.word	0x00000142
    adf8:	00000142 	.word	0x00000142
    adfc:	00000142 	.word	0x00000142
    ae00:	00000142 	.word	0x00000142
    ae04:	00000142 	.word	0x00000142
    ae08:	00000142 	.word	0x00000142
    ae0c:	00000142 	.word	0x00000142
    ae10:	00000142 	.word	0x00000142
    ae14:	00000142 	.word	0x00000142
    ae18:	00000142 	.word	0x00000142
    ae1c:	00000142 	.word	0x00000142
    ae20:	00000142 	.word	0x00000142
    ae24:	00000142 	.word	0x00000142
    ae28:	00000142 	.word	0x00000142
    ae2c:	00000142 	.word	0x00000142
    ae30:	00000142 	.word	0x00000142
    ae34:	00000142 	.word	0x00000142
    ae38:	00000142 	.word	0x00000142
    ae3c:	00000142 	.word	0x00000142
    ae40:	00000142 	.word	0x00000142
    ae44:	00000142 	.word	0x00000142
    ae48:	00000142 	.word	0x00000142
    ae4c:	00000142 	.word	0x00000142
    ae50:	00000142 	.word	0x00000142
    ae54:	00000142 	.word	0x00000142
    ae58:	00000142 	.word	0x00000142
    ae5c:	00000142 	.word	0x00000142
    ae60:	00000136 	.word	0x00000136
    ae64:	00000136 	.word	0x00000136
    ae68:	0000014c 	.word	0x0000014c
    ae6c:	0000014c 	.word	0x0000014c
    ae70:	0000014c 	.word	0x0000014c
    ae74:	0000014c 	.word	0x0000014c
    ae78:	697b      	ldr	r3, [r7, #20]
    ae7a:	8b1b      	ldrh	r3, [r3, #24]
    ae7c:	b29b      	uxth	r3, r3
    ae7e:	001a      	movs	r2, r3
    ae80:	2380      	movs	r3, #128	; 0x80
    ae82:	005b      	lsls	r3, r3, #1
    ae84:	4013      	ands	r3, r2
    ae86:	d004      	beq.n	ae92 <nvm_execute_command+0x1b6>
    ae88:	697b      	ldr	r3, [r7, #20]
    ae8a:	693a      	ldr	r2, [r7, #16]
    ae8c:	605a      	str	r2, [r3, #4]
    ae8e:	2310      	movs	r3, #16
    ae90:	e029      	b.n	aee6 <nvm_execute_command+0x20a>
    ae92:	68bb      	ldr	r3, [r7, #8]
    ae94:	089b      	lsrs	r3, r3, #2
    ae96:	005a      	lsls	r2, r3, #1
    ae98:	697b      	ldr	r3, [r7, #20]
    ae9a:	61da      	str	r2, [r3, #28]
    ae9c:	e00b      	b.n	aeb6 <nvm_execute_command+0x1da>
    ae9e:	68bb      	ldr	r3, [r7, #8]
    aea0:	089b      	lsrs	r3, r3, #2
    aea2:	005a      	lsls	r2, r3, #1
    aea4:	697b      	ldr	r3, [r7, #20]
    aea6:	61da      	str	r2, [r3, #28]
    aea8:	e005      	b.n	aeb6 <nvm_execute_command+0x1da>
    aeaa:	697b      	ldr	r3, [r7, #20]
    aeac:	693a      	ldr	r2, [r7, #16]
    aeae:	605a      	str	r2, [r3, #4]
    aeb0:	2317      	movs	r3, #23
    aeb2:	e018      	b.n	aee6 <nvm_execute_command+0x20a>
    aeb4:	46c0      	nop			; (mov r8, r8)
    aeb6:	230f      	movs	r3, #15
    aeb8:	18fb      	adds	r3, r7, r3
    aeba:	781b      	ldrb	r3, [r3, #0]
    aebc:	b29b      	uxth	r3, r3
    aebe:	4a12      	ldr	r2, [pc, #72]	; (af08 <nvm_execute_command+0x22c>)
    aec0:	4313      	orrs	r3, r2
    aec2:	b29a      	uxth	r2, r3
    aec4:	697b      	ldr	r3, [r7, #20]
    aec6:	801a      	strh	r2, [r3, #0]
    aec8:	46c0      	nop			; (mov r8, r8)
    aeca:	4b10      	ldr	r3, [pc, #64]	; (af0c <nvm_execute_command+0x230>)
    aecc:	447b      	add	r3, pc
    aece:	4798      	blx	r3
    aed0:	0003      	movs	r3, r0
    aed2:	001a      	movs	r2, r3
    aed4:	2301      	movs	r3, #1
    aed6:	4053      	eors	r3, r2
    aed8:	b2db      	uxtb	r3, r3
    aeda:	2b00      	cmp	r3, #0
    aedc:	d1f5      	bne.n	aeca <nvm_execute_command+0x1ee>
    aede:	697b      	ldr	r3, [r7, #20]
    aee0:	693a      	ldr	r2, [r7, #16]
    aee2:	605a      	str	r2, [r3, #4]
    aee4:	2300      	movs	r3, #0
    aee6:	0018      	movs	r0, r3
    aee8:	46bd      	mov	sp, r7
    aeea:	b006      	add	sp, #24
    aeec:	bd80      	pop	{r7, pc}
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	1fff58a8 	.word	0x1fff58a8
    aef4:	1fff58a0 	.word	0x1fff58a0
    aef8:	00803fff 	.word	0x00803fff
    aefc:	00806000 	.word	0x00806000
    af00:	41004000 	.word	0x41004000
    af04:	fffffe35 	.word	0xfffffe35
    af08:	ffffa500 	.word	0xffffa500
    af0c:	fffffca1 	.word	0xfffffca1

0000af10 <nvm_write_buffer>:
    af10:	b590      	push	{r4, r7, lr}
    af12:	b089      	sub	sp, #36	; 0x24
    af14:	af00      	add	r7, sp, #0
    af16:	60f8      	str	r0, [r7, #12]
    af18:	60b9      	str	r1, [r7, #8]
    af1a:	1dbb      	adds	r3, r7, #6
    af1c:	801a      	strh	r2, [r3, #0]
    af1e:	4c4f      	ldr	r4, [pc, #316]	; (b05c <nvm_write_buffer+0x14c>)
    af20:	447c      	add	r4, pc
    af22:	4b4f      	ldr	r3, [pc, #316]	; (b060 <nvm_write_buffer+0x150>)
    af24:	447b      	add	r3, pc
    af26:	881b      	ldrh	r3, [r3, #0]
    af28:	001a      	movs	r2, r3
    af2a:	4b4e      	ldr	r3, [pc, #312]	; (b064 <nvm_write_buffer+0x154>)
    af2c:	447b      	add	r3, pc
    af2e:	885b      	ldrh	r3, [r3, #2]
    af30:	435a      	muls	r2, r3
    af32:	68fb      	ldr	r3, [r7, #12]
    af34:	429a      	cmp	r2, r3
    af36:	d201      	bcs.n	af3c <nvm_write_buffer+0x2c>
    af38:	2318      	movs	r3, #24
    af3a:	e08a      	b.n	b052 <nvm_write_buffer+0x142>
    af3c:	4b4a      	ldr	r3, [pc, #296]	; (b068 <nvm_write_buffer+0x158>)
    af3e:	447b      	add	r3, pc
    af40:	881b      	ldrh	r3, [r3, #0]
    af42:	3b01      	subs	r3, #1
    af44:	001a      	movs	r2, r3
    af46:	68fb      	ldr	r3, [r7, #12]
    af48:	4013      	ands	r3, r2
    af4a:	d001      	beq.n	af50 <nvm_write_buffer+0x40>
    af4c:	2318      	movs	r3, #24
    af4e:	e080      	b.n	b052 <nvm_write_buffer+0x142>
    af50:	4b46      	ldr	r3, [pc, #280]	; (b06c <nvm_write_buffer+0x15c>)
    af52:	447b      	add	r3, pc
    af54:	881b      	ldrh	r3, [r3, #0]
    af56:	1dba      	adds	r2, r7, #6
    af58:	8812      	ldrh	r2, [r2, #0]
    af5a:	429a      	cmp	r2, r3
    af5c:	d901      	bls.n	af62 <nvm_write_buffer+0x52>
    af5e:	2317      	movs	r3, #23
    af60:	e077      	b.n	b052 <nvm_write_buffer+0x142>
    af62:	4b43      	ldr	r3, [pc, #268]	; (b070 <nvm_write_buffer+0x160>)
    af64:	617b      	str	r3, [r7, #20]
    af66:	4b43      	ldr	r3, [pc, #268]	; (b074 <nvm_write_buffer+0x164>)
    af68:	447b      	add	r3, pc
    af6a:	4798      	blx	r3
    af6c:	0003      	movs	r3, r0
    af6e:	001a      	movs	r2, r3
    af70:	2301      	movs	r3, #1
    af72:	4053      	eors	r3, r2
    af74:	b2db      	uxtb	r3, r3
    af76:	2b00      	cmp	r3, #0
    af78:	d001      	beq.n	af7e <nvm_write_buffer+0x6e>
    af7a:	2305      	movs	r3, #5
    af7c:	e069      	b.n	b052 <nvm_write_buffer+0x142>
    af7e:	697b      	ldr	r3, [r7, #20]
    af80:	4a3d      	ldr	r2, [pc, #244]	; (b078 <nvm_write_buffer+0x168>)
    af82:	801a      	strh	r2, [r3, #0]
    af84:	46c0      	nop			; (mov r8, r8)
    af86:	4b3d      	ldr	r3, [pc, #244]	; (b07c <nvm_write_buffer+0x16c>)
    af88:	447b      	add	r3, pc
    af8a:	4798      	blx	r3
    af8c:	0003      	movs	r3, r0
    af8e:	001a      	movs	r2, r3
    af90:	2301      	movs	r3, #1
    af92:	4053      	eors	r3, r2
    af94:	b2db      	uxtb	r3, r3
    af96:	2b00      	cmp	r3, #0
    af98:	d1f5      	bne.n	af86 <nvm_write_buffer+0x76>
    af9a:	697b      	ldr	r3, [r7, #20]
    af9c:	2220      	movs	r2, #32
    af9e:	32ff      	adds	r2, #255	; 0xff
    afa0:	831a      	strh	r2, [r3, #24]
    afa2:	68fb      	ldr	r3, [r7, #12]
    afa4:	085b      	lsrs	r3, r3, #1
    afa6:	61fb      	str	r3, [r7, #28]
    afa8:	231a      	movs	r3, #26
    afaa:	18fb      	adds	r3, r7, r3
    afac:	2200      	movs	r2, #0
    afae:	801a      	strh	r2, [r3, #0]
    afb0:	e032      	b.n	b018 <nvm_write_buffer+0x108>
    afb2:	231a      	movs	r3, #26
    afb4:	18fb      	adds	r3, r7, r3
    afb6:	881b      	ldrh	r3, [r3, #0]
    afb8:	68ba      	ldr	r2, [r7, #8]
    afba:	18d3      	adds	r3, r2, r3
    afbc:	781a      	ldrb	r2, [r3, #0]
    afbe:	2318      	movs	r3, #24
    afc0:	18fb      	adds	r3, r7, r3
    afc2:	801a      	strh	r2, [r3, #0]
    afc4:	231a      	movs	r3, #26
    afc6:	18fb      	adds	r3, r7, r3
    afc8:	881a      	ldrh	r2, [r3, #0]
    afca:	1dbb      	adds	r3, r7, #6
    afcc:	881b      	ldrh	r3, [r3, #0]
    afce:	3b01      	subs	r3, #1
    afd0:	429a      	cmp	r2, r3
    afd2:	da11      	bge.n	aff8 <nvm_write_buffer+0xe8>
    afd4:	231a      	movs	r3, #26
    afd6:	18fb      	adds	r3, r7, r3
    afd8:	881b      	ldrh	r3, [r3, #0]
    afda:	3301      	adds	r3, #1
    afdc:	68ba      	ldr	r2, [r7, #8]
    afde:	18d3      	adds	r3, r2, r3
    afe0:	781b      	ldrb	r3, [r3, #0]
    afe2:	021b      	lsls	r3, r3, #8
    afe4:	b21a      	sxth	r2, r3
    afe6:	2318      	movs	r3, #24
    afe8:	18fb      	adds	r3, r7, r3
    afea:	2100      	movs	r1, #0
    afec:	5e5b      	ldrsh	r3, [r3, r1]
    afee:	4313      	orrs	r3, r2
    aff0:	b21a      	sxth	r2, r3
    aff2:	2318      	movs	r3, #24
    aff4:	18fb      	adds	r3, r7, r3
    aff6:	801a      	strh	r2, [r3, #0]
    aff8:	69fb      	ldr	r3, [r7, #28]
    affa:	1c5a      	adds	r2, r3, #1
    affc:	61fa      	str	r2, [r7, #28]
    affe:	005b      	lsls	r3, r3, #1
    b000:	001a      	movs	r2, r3
    b002:	2318      	movs	r3, #24
    b004:	18fb      	adds	r3, r7, r3
    b006:	881b      	ldrh	r3, [r3, #0]
    b008:	8013      	strh	r3, [r2, #0]
    b00a:	231a      	movs	r3, #26
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	221a      	movs	r2, #26
    b010:	18ba      	adds	r2, r7, r2
    b012:	8812      	ldrh	r2, [r2, #0]
    b014:	3202      	adds	r2, #2
    b016:	801a      	strh	r2, [r3, #0]
    b018:	231a      	movs	r3, #26
    b01a:	18fa      	adds	r2, r7, r3
    b01c:	1dbb      	adds	r3, r7, #6
    b01e:	8812      	ldrh	r2, [r2, #0]
    b020:	881b      	ldrh	r3, [r3, #0]
    b022:	429a      	cmp	r2, r3
    b024:	d3c5      	bcc.n	afb2 <nvm_write_buffer+0xa2>
    b026:	4b16      	ldr	r3, [pc, #88]	; (b080 <nvm_write_buffer+0x170>)
    b028:	447b      	add	r3, pc
    b02a:	791b      	ldrb	r3, [r3, #4]
    b02c:	2201      	movs	r2, #1
    b02e:	4053      	eors	r3, r2
    b030:	b2db      	uxtb	r3, r3
    b032:	2b00      	cmp	r3, #0
    b034:	d00c      	beq.n	b050 <nvm_write_buffer+0x140>
    b036:	1dbb      	adds	r3, r7, #6
    b038:	881b      	ldrh	r3, [r3, #0]
    b03a:	2b3f      	cmp	r3, #63	; 0x3f
    b03c:	d808      	bhi.n	b050 <nvm_write_buffer+0x140>
    b03e:	68fb      	ldr	r3, [r7, #12]
    b040:	2200      	movs	r2, #0
    b042:	0019      	movs	r1, r3
    b044:	2004      	movs	r0, #4
    b046:	4b0f      	ldr	r3, [pc, #60]	; (b084 <nvm_write_buffer+0x174>)
    b048:	58e3      	ldr	r3, [r4, r3]
    b04a:	4798      	blx	r3
    b04c:	0003      	movs	r3, r0
    b04e:	e000      	b.n	b052 <nvm_write_buffer+0x142>
    b050:	2300      	movs	r3, #0
    b052:	0018      	movs	r0, r3
    b054:	46bd      	mov	sp, r7
    b056:	b009      	add	sp, #36	; 0x24
    b058:	bd90      	pop	{r4, r7, pc}
    b05a:	46c0      	nop			; (mov r8, r8)
    b05c:	00006ec0 	.word	0x00006ec0
    b060:	1fff5674 	.word	0x1fff5674
    b064:	1fff566c 	.word	0x1fff566c
    b068:	1fff565a 	.word	0x1fff565a
    b06c:	1fff5646 	.word	0x1fff5646
    b070:	41004000 	.word	0x41004000
    b074:	fffffc05 	.word	0xfffffc05
    b078:	ffffa544 	.word	0xffffa544
    b07c:	fffffbe5 	.word	0xfffffbe5
    b080:	1fff5570 	.word	0x1fff5570
    b084:	00000244 	.word	0x00000244

0000b088 <nvm_erase_row>:
    b088:	b580      	push	{r7, lr}
    b08a:	b084      	sub	sp, #16
    b08c:	af00      	add	r7, sp, #0
    b08e:	6078      	str	r0, [r7, #4]
    b090:	4b25      	ldr	r3, [pc, #148]	; (b128 <nvm_erase_row+0xa0>)
    b092:	447b      	add	r3, pc
    b094:	881b      	ldrh	r3, [r3, #0]
    b096:	001a      	movs	r2, r3
    b098:	4b24      	ldr	r3, [pc, #144]	; (b12c <nvm_erase_row+0xa4>)
    b09a:	447b      	add	r3, pc
    b09c:	885b      	ldrh	r3, [r3, #2]
    b09e:	435a      	muls	r2, r3
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	429a      	cmp	r2, r3
    b0a4:	d201      	bcs.n	b0aa <nvm_erase_row+0x22>
    b0a6:	2318      	movs	r3, #24
    b0a8:	e03a      	b.n	b120 <nvm_erase_row+0x98>
    b0aa:	4b21      	ldr	r3, [pc, #132]	; (b130 <nvm_erase_row+0xa8>)
    b0ac:	447b      	add	r3, pc
    b0ae:	881b      	ldrh	r3, [r3, #0]
    b0b0:	009b      	lsls	r3, r3, #2
    b0b2:	3b01      	subs	r3, #1
    b0b4:	001a      	movs	r2, r3
    b0b6:	687b      	ldr	r3, [r7, #4]
    b0b8:	4013      	ands	r3, r2
    b0ba:	d001      	beq.n	b0c0 <nvm_erase_row+0x38>
    b0bc:	2318      	movs	r3, #24
    b0be:	e02f      	b.n	b120 <nvm_erase_row+0x98>
    b0c0:	4b1c      	ldr	r3, [pc, #112]	; (b134 <nvm_erase_row+0xac>)
    b0c2:	60fb      	str	r3, [r7, #12]
    b0c4:	4b1c      	ldr	r3, [pc, #112]	; (b138 <nvm_erase_row+0xb0>)
    b0c6:	447b      	add	r3, pc
    b0c8:	4798      	blx	r3
    b0ca:	0003      	movs	r3, r0
    b0cc:	001a      	movs	r2, r3
    b0ce:	2301      	movs	r3, #1
    b0d0:	4053      	eors	r3, r2
    b0d2:	b2db      	uxtb	r3, r3
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d001      	beq.n	b0dc <nvm_erase_row+0x54>
    b0d8:	2305      	movs	r3, #5
    b0da:	e021      	b.n	b120 <nvm_erase_row+0x98>
    b0dc:	68fb      	ldr	r3, [r7, #12]
    b0de:	2220      	movs	r2, #32
    b0e0:	32ff      	adds	r2, #255	; 0xff
    b0e2:	831a      	strh	r2, [r3, #24]
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	089b      	lsrs	r3, r3, #2
    b0e8:	005a      	lsls	r2, r3, #1
    b0ea:	68fb      	ldr	r3, [r7, #12]
    b0ec:	61da      	str	r2, [r3, #28]
    b0ee:	68fb      	ldr	r3, [r7, #12]
    b0f0:	4a12      	ldr	r2, [pc, #72]	; (b13c <nvm_erase_row+0xb4>)
    b0f2:	801a      	strh	r2, [r3, #0]
    b0f4:	46c0      	nop			; (mov r8, r8)
    b0f6:	4b12      	ldr	r3, [pc, #72]	; (b140 <nvm_erase_row+0xb8>)
    b0f8:	447b      	add	r3, pc
    b0fa:	4798      	blx	r3
    b0fc:	0003      	movs	r3, r0
    b0fe:	001a      	movs	r2, r3
    b100:	2301      	movs	r3, #1
    b102:	4053      	eors	r3, r2
    b104:	b2db      	uxtb	r3, r3
    b106:	2b00      	cmp	r3, #0
    b108:	d1f5      	bne.n	b0f6 <nvm_erase_row+0x6e>
    b10a:	68fb      	ldr	r3, [r7, #12]
    b10c:	8b1b      	ldrh	r3, [r3, #24]
    b10e:	b29b      	uxth	r3, r3
    b110:	b2db      	uxtb	r3, r3
    b112:	001a      	movs	r2, r3
    b114:	231c      	movs	r3, #28
    b116:	4013      	ands	r3, r2
    b118:	d001      	beq.n	b11e <nvm_erase_row+0x96>
    b11a:	2304      	movs	r3, #4
    b11c:	e000      	b.n	b120 <nvm_erase_row+0x98>
    b11e:	2300      	movs	r3, #0
    b120:	0018      	movs	r0, r3
    b122:	46bd      	mov	sp, r7
    b124:	b004      	add	sp, #16
    b126:	bd80      	pop	{r7, pc}
    b128:	1fff5506 	.word	0x1fff5506
    b12c:	1fff54fe 	.word	0x1fff54fe
    b130:	1fff54ec 	.word	0x1fff54ec
    b134:	41004000 	.word	0x41004000
    b138:	fffffaa7 	.word	0xfffffaa7
    b13c:	ffffa502 	.word	0xffffa502
    b140:	fffffa75 	.word	0xfffffa75

0000b144 <system_pinmux_get_config_defaults>:
    b144:	b580      	push	{r7, lr}
    b146:	b082      	sub	sp, #8
    b148:	af00      	add	r7, sp, #0
    b14a:	6078      	str	r0, [r7, #4]
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	2280      	movs	r2, #128	; 0x80
    b150:	701a      	strb	r2, [r3, #0]
    b152:	687b      	ldr	r3, [r7, #4]
    b154:	2200      	movs	r2, #0
    b156:	705a      	strb	r2, [r3, #1]
    b158:	687b      	ldr	r3, [r7, #4]
    b15a:	2201      	movs	r2, #1
    b15c:	709a      	strb	r2, [r3, #2]
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	2200      	movs	r2, #0
    b162:	70da      	strb	r2, [r3, #3]
    b164:	46c0      	nop			; (mov r8, r8)
    b166:	46bd      	mov	sp, r7
    b168:	b002      	add	sp, #8
    b16a:	bd80      	pop	{r7, pc}

0000b16c <port_pin_set_config>:
    b16c:	b590      	push	{r4, r7, lr}
    b16e:	b085      	sub	sp, #20
    b170:	af00      	add	r7, sp, #0
    b172:	0002      	movs	r2, r0
    b174:	6039      	str	r1, [r7, #0]
    b176:	1dfb      	adds	r3, r7, #7
    b178:	701a      	strb	r2, [r3, #0]
    b17a:	4c14      	ldr	r4, [pc, #80]	; (b1cc <port_pin_set_config+0x60>)
    b17c:	447c      	add	r4, pc
    b17e:	230c      	movs	r3, #12
    b180:	18fb      	adds	r3, r7, r3
    b182:	0018      	movs	r0, r3
    b184:	4b12      	ldr	r3, [pc, #72]	; (b1d0 <port_pin_set_config+0x64>)
    b186:	447b      	add	r3, pc
    b188:	4798      	blx	r3
    b18a:	230c      	movs	r3, #12
    b18c:	18fb      	adds	r3, r7, r3
    b18e:	2280      	movs	r2, #128	; 0x80
    b190:	701a      	strb	r2, [r3, #0]
    b192:	683b      	ldr	r3, [r7, #0]
    b194:	781a      	ldrb	r2, [r3, #0]
    b196:	230c      	movs	r3, #12
    b198:	18fb      	adds	r3, r7, r3
    b19a:	705a      	strb	r2, [r3, #1]
    b19c:	683b      	ldr	r3, [r7, #0]
    b19e:	785a      	ldrb	r2, [r3, #1]
    b1a0:	230c      	movs	r3, #12
    b1a2:	18fb      	adds	r3, r7, r3
    b1a4:	709a      	strb	r2, [r3, #2]
    b1a6:	683b      	ldr	r3, [r7, #0]
    b1a8:	789a      	ldrb	r2, [r3, #2]
    b1aa:	230c      	movs	r3, #12
    b1ac:	18fb      	adds	r3, r7, r3
    b1ae:	70da      	strb	r2, [r3, #3]
    b1b0:	230c      	movs	r3, #12
    b1b2:	18fa      	adds	r2, r7, r3
    b1b4:	1dfb      	adds	r3, r7, #7
    b1b6:	781b      	ldrb	r3, [r3, #0]
    b1b8:	0011      	movs	r1, r2
    b1ba:	0018      	movs	r0, r3
    b1bc:	4b05      	ldr	r3, [pc, #20]	; (b1d4 <port_pin_set_config+0x68>)
    b1be:	58e3      	ldr	r3, [r4, r3]
    b1c0:	4798      	blx	r3
    b1c2:	46c0      	nop			; (mov r8, r8)
    b1c4:	46bd      	mov	sp, r7
    b1c6:	b005      	add	sp, #20
    b1c8:	bd90      	pop	{r4, r7, pc}
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	00006c64 	.word	0x00006c64
    b1d0:	ffffffbb 	.word	0xffffffbb
    b1d4:	000002b8 	.word	0x000002b8

0000b1d8 <cpu_irq_save>:
    b1d8:	b580      	push	{r7, lr}
    b1da:	b082      	sub	sp, #8
    b1dc:	af00      	add	r7, sp, #0
    b1de:	4a0b      	ldr	r2, [pc, #44]	; (b20c <cpu_irq_save+0x34>)
    b1e0:	447a      	add	r2, pc
    b1e2:	f3ef 8310 	mrs	r3, PRIMASK
    b1e6:	607b      	str	r3, [r7, #4]
    b1e8:	687b      	ldr	r3, [r7, #4]
    b1ea:	4259      	negs	r1, r3
    b1ec:	414b      	adcs	r3, r1
    b1ee:	b2db      	uxtb	r3, r3
    b1f0:	603b      	str	r3, [r7, #0]
    b1f2:	b672      	cpsid	i
    b1f4:	f3bf 8f5f 	dmb	sy
    b1f8:	4b05      	ldr	r3, [pc, #20]	; (b210 <cpu_irq_save+0x38>)
    b1fa:	58d3      	ldr	r3, [r2, r3]
    b1fc:	2200      	movs	r2, #0
    b1fe:	701a      	strb	r2, [r3, #0]
    b200:	683b      	ldr	r3, [r7, #0]
    b202:	0018      	movs	r0, r3
    b204:	46bd      	mov	sp, r7
    b206:	b002      	add	sp, #8
    b208:	bd80      	pop	{r7, pc}
    b20a:	46c0      	nop			; (mov r8, r8)
    b20c:	00006c00 	.word	0x00006c00
    b210:	000000ec 	.word	0x000000ec

0000b214 <cpu_irq_is_enabled_flags>:
    b214:	b580      	push	{r7, lr}
    b216:	b082      	sub	sp, #8
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	1e5a      	subs	r2, r3, #1
    b220:	4193      	sbcs	r3, r2
    b222:	b2db      	uxtb	r3, r3
    b224:	0018      	movs	r0, r3
    b226:	46bd      	mov	sp, r7
    b228:	b002      	add	sp, #8
    b22a:	bd80      	pop	{r7, pc}

0000b22c <cpu_irq_restore>:
    b22c:	b590      	push	{r4, r7, lr}
    b22e:	b083      	sub	sp, #12
    b230:	af00      	add	r7, sp, #0
    b232:	6078      	str	r0, [r7, #4]
    b234:	4c09      	ldr	r4, [pc, #36]	; (b25c <cpu_irq_restore+0x30>)
    b236:	447c      	add	r4, pc
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	0018      	movs	r0, r3
    b23c:	4b08      	ldr	r3, [pc, #32]	; (b260 <cpu_irq_restore+0x34>)
    b23e:	447b      	add	r3, pc
    b240:	4798      	blx	r3
    b242:	1e03      	subs	r3, r0, #0
    b244:	d006      	beq.n	b254 <cpu_irq_restore+0x28>
    b246:	4b07      	ldr	r3, [pc, #28]	; (b264 <cpu_irq_restore+0x38>)
    b248:	58e3      	ldr	r3, [r4, r3]
    b24a:	2201      	movs	r2, #1
    b24c:	701a      	strb	r2, [r3, #0]
    b24e:	f3bf 8f5f 	dmb	sy
    b252:	b662      	cpsie	i
    b254:	46c0      	nop			; (mov r8, r8)
    b256:	46bd      	mov	sp, r7
    b258:	b003      	add	sp, #12
    b25a:	bd90      	pop	{r4, r7, pc}
    b25c:	00006baa 	.word	0x00006baa
    b260:	ffffffd3 	.word	0xffffffd3
    b264:	000000ec 	.word	0x000000ec

0000b268 <usb_device_attach>:
    b268:	b580      	push	{r7, lr}
    b26a:	b082      	sub	sp, #8
    b26c:	af00      	add	r7, sp, #0
    b26e:	6078      	str	r0, [r7, #4]
    b270:	687b      	ldr	r3, [r7, #4]
    b272:	681a      	ldr	r2, [r3, #0]
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	681b      	ldr	r3, [r3, #0]
    b278:	891b      	ldrh	r3, [r3, #8]
    b27a:	b29b      	uxth	r3, r3
    b27c:	2101      	movs	r1, #1
    b27e:	438b      	bics	r3, r1
    b280:	b29b      	uxth	r3, r3
    b282:	8113      	strh	r3, [r2, #8]
    b284:	46c0      	nop			; (mov r8, r8)
    b286:	46bd      	mov	sp, r7
    b288:	b002      	add	sp, #8
    b28a:	bd80      	pop	{r7, pc}

0000b28c <usb_device_get_address>:
    b28c:	b580      	push	{r7, lr}
    b28e:	b082      	sub	sp, #8
    b290:	af00      	add	r7, sp, #0
    b292:	6078      	str	r0, [r7, #4]
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	681b      	ldr	r3, [r3, #0]
    b298:	7a9b      	ldrb	r3, [r3, #10]
    b29a:	065b      	lsls	r3, r3, #25
    b29c:	0e5b      	lsrs	r3, r3, #25
    b29e:	b2db      	uxtb	r3, r3
    b2a0:	0018      	movs	r0, r3
    b2a2:	46bd      	mov	sp, r7
    b2a4:	b002      	add	sp, #8
    b2a6:	bd80      	pop	{r7, pc}

0000b2a8 <usb_device_set_address>:
    b2a8:	b580      	push	{r7, lr}
    b2aa:	b082      	sub	sp, #8
    b2ac:	af00      	add	r7, sp, #0
    b2ae:	6078      	str	r0, [r7, #4]
    b2b0:	000a      	movs	r2, r1
    b2b2:	1cfb      	adds	r3, r7, #3
    b2b4:	701a      	strb	r2, [r3, #0]
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	681b      	ldr	r3, [r3, #0]
    b2ba:	1cfa      	adds	r2, r7, #3
    b2bc:	7812      	ldrb	r2, [r2, #0]
    b2be:	2180      	movs	r1, #128	; 0x80
    b2c0:	4249      	negs	r1, r1
    b2c2:	430a      	orrs	r2, r1
    b2c4:	b2d2      	uxtb	r2, r2
    b2c6:	729a      	strb	r2, [r3, #10]
    b2c8:	46c0      	nop			; (mov r8, r8)
    b2ca:	46bd      	mov	sp, r7
    b2cc:	b002      	add	sp, #8
    b2ce:	bd80      	pop	{r7, pc}

0000b2d0 <usb_device_get_frame_number>:
    b2d0:	b580      	push	{r7, lr}
    b2d2:	b082      	sub	sp, #8
    b2d4:	af00      	add	r7, sp, #0
    b2d6:	6078      	str	r0, [r7, #4]
    b2d8:	687b      	ldr	r3, [r7, #4]
    b2da:	681b      	ldr	r3, [r3, #0]
    b2dc:	8a1b      	ldrh	r3, [r3, #16]
    b2de:	049b      	lsls	r3, r3, #18
    b2e0:	0d5b      	lsrs	r3, r3, #21
    b2e2:	b29b      	uxth	r3, r3
    b2e4:	0018      	movs	r0, r3
    b2e6:	46bd      	mov	sp, r7
    b2e8:	b002      	add	sp, #8
    b2ea:	bd80      	pop	{r7, pc}

0000b2ec <usb_device_get_micro_frame_number>:
    b2ec:	b580      	push	{r7, lr}
    b2ee:	b082      	sub	sp, #8
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	6078      	str	r0, [r7, #4]
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	681b      	ldr	r3, [r3, #0]
    b2f8:	8a1b      	ldrh	r3, [r3, #16]
    b2fa:	b29b      	uxth	r3, r3
    b2fc:	0018      	movs	r0, r3
    b2fe:	46bd      	mov	sp, r7
    b300:	b002      	add	sp, #8
    b302:	bd80      	pop	{r7, pc}

0000b304 <usb_device_set_lpm_mode>:
    b304:	b580      	push	{r7, lr}
    b306:	b082      	sub	sp, #8
    b308:	af00      	add	r7, sp, #0
    b30a:	6078      	str	r0, [r7, #4]
    b30c:	000a      	movs	r2, r1
    b30e:	1cfb      	adds	r3, r7, #3
    b310:	701a      	strb	r2, [r3, #0]
    b312:	687b      	ldr	r3, [r7, #4]
    b314:	681a      	ldr	r2, [r3, #0]
    b316:	1cfb      	adds	r3, r7, #3
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	2103      	movs	r1, #3
    b31c:	400b      	ands	r3, r1
    b31e:	b2d9      	uxtb	r1, r3
    b320:	8913      	ldrh	r3, [r2, #8]
    b322:	1c08      	adds	r0, r1, #0
    b324:	2103      	movs	r1, #3
    b326:	4001      	ands	r1, r0
    b328:	0288      	lsls	r0, r1, #10
    b32a:	4905      	ldr	r1, [pc, #20]	; (b340 <usb_device_set_lpm_mode+0x3c>)
    b32c:	400b      	ands	r3, r1
    b32e:	1c19      	adds	r1, r3, #0
    b330:	1c03      	adds	r3, r0, #0
    b332:	430b      	orrs	r3, r1
    b334:	8113      	strh	r3, [r2, #8]
    b336:	46c0      	nop			; (mov r8, r8)
    b338:	46bd      	mov	sp, r7
    b33a:	b002      	add	sp, #8
    b33c:	bd80      	pop	{r7, pc}
    b33e:	46c0      	nop			; (mov r8, r8)
    b340:	fffff3ff 	.word	0xfffff3ff

0000b344 <sleepmgr_lock_mode>:
    b344:	b590      	push	{r4, r7, lr}
    b346:	b085      	sub	sp, #20
    b348:	af00      	add	r7, sp, #0
    b34a:	0002      	movs	r2, r0
    b34c:	1dfb      	adds	r3, r7, #7
    b34e:	701a      	strb	r2, [r3, #0]
    b350:	4c10      	ldr	r4, [pc, #64]	; (b394 <sleepmgr_lock_mode+0x50>)
    b352:	447c      	add	r4, pc
    b354:	1dfb      	adds	r3, r7, #7
    b356:	781b      	ldrb	r3, [r3, #0]
    b358:	4a0f      	ldr	r2, [pc, #60]	; (b398 <sleepmgr_lock_mode+0x54>)
    b35a:	58a2      	ldr	r2, [r4, r2]
    b35c:	5cd3      	ldrb	r3, [r2, r3]
    b35e:	2bff      	cmp	r3, #255	; 0xff
    b360:	d100      	bne.n	b364 <sleepmgr_lock_mode+0x20>
    b362:	e7fe      	b.n	b362 <sleepmgr_lock_mode+0x1e>
    b364:	4b0d      	ldr	r3, [pc, #52]	; (b39c <sleepmgr_lock_mode+0x58>)
    b366:	447b      	add	r3, pc
    b368:	4798      	blx	r3
    b36a:	0003      	movs	r3, r0
    b36c:	60fb      	str	r3, [r7, #12]
    b36e:	1dfb      	adds	r3, r7, #7
    b370:	781b      	ldrb	r3, [r3, #0]
    b372:	4a09      	ldr	r2, [pc, #36]	; (b398 <sleepmgr_lock_mode+0x54>)
    b374:	58a2      	ldr	r2, [r4, r2]
    b376:	5cd2      	ldrb	r2, [r2, r3]
    b378:	3201      	adds	r2, #1
    b37a:	b2d1      	uxtb	r1, r2
    b37c:	4a06      	ldr	r2, [pc, #24]	; (b398 <sleepmgr_lock_mode+0x54>)
    b37e:	58a2      	ldr	r2, [r4, r2]
    b380:	54d1      	strb	r1, [r2, r3]
    b382:	68fb      	ldr	r3, [r7, #12]
    b384:	0018      	movs	r0, r3
    b386:	4b06      	ldr	r3, [pc, #24]	; (b3a0 <sleepmgr_lock_mode+0x5c>)
    b388:	447b      	add	r3, pc
    b38a:	4798      	blx	r3
    b38c:	46c0      	nop			; (mov r8, r8)
    b38e:	46bd      	mov	sp, r7
    b390:	b005      	add	sp, #20
    b392:	bd90      	pop	{r4, r7, pc}
    b394:	00006a8e 	.word	0x00006a8e
    b398:	00000220 	.word	0x00000220
    b39c:	fffffe6f 	.word	0xfffffe6f
    b3a0:	fffffea1 	.word	0xfffffea1

0000b3a4 <sleepmgr_unlock_mode>:
    b3a4:	b590      	push	{r4, r7, lr}
    b3a6:	b085      	sub	sp, #20
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	0002      	movs	r2, r0
    b3ac:	1dfb      	adds	r3, r7, #7
    b3ae:	701a      	strb	r2, [r3, #0]
    b3b0:	4c10      	ldr	r4, [pc, #64]	; (b3f4 <sleepmgr_unlock_mode+0x50>)
    b3b2:	447c      	add	r4, pc
    b3b4:	1dfb      	adds	r3, r7, #7
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	4a0f      	ldr	r2, [pc, #60]	; (b3f8 <sleepmgr_unlock_mode+0x54>)
    b3ba:	58a2      	ldr	r2, [r4, r2]
    b3bc:	5cd3      	ldrb	r3, [r2, r3]
    b3be:	2b00      	cmp	r3, #0
    b3c0:	d100      	bne.n	b3c4 <sleepmgr_unlock_mode+0x20>
    b3c2:	e7fe      	b.n	b3c2 <sleepmgr_unlock_mode+0x1e>
    b3c4:	4b0d      	ldr	r3, [pc, #52]	; (b3fc <sleepmgr_unlock_mode+0x58>)
    b3c6:	447b      	add	r3, pc
    b3c8:	4798      	blx	r3
    b3ca:	0003      	movs	r3, r0
    b3cc:	60fb      	str	r3, [r7, #12]
    b3ce:	1dfb      	adds	r3, r7, #7
    b3d0:	781b      	ldrb	r3, [r3, #0]
    b3d2:	4a09      	ldr	r2, [pc, #36]	; (b3f8 <sleepmgr_unlock_mode+0x54>)
    b3d4:	58a2      	ldr	r2, [r4, r2]
    b3d6:	5cd2      	ldrb	r2, [r2, r3]
    b3d8:	3a01      	subs	r2, #1
    b3da:	b2d1      	uxtb	r1, r2
    b3dc:	4a06      	ldr	r2, [pc, #24]	; (b3f8 <sleepmgr_unlock_mode+0x54>)
    b3de:	58a2      	ldr	r2, [r4, r2]
    b3e0:	54d1      	strb	r1, [r2, r3]
    b3e2:	68fb      	ldr	r3, [r7, #12]
    b3e4:	0018      	movs	r0, r3
    b3e6:	4b06      	ldr	r3, [pc, #24]	; (b400 <sleepmgr_unlock_mode+0x5c>)
    b3e8:	447b      	add	r3, pc
    b3ea:	4798      	blx	r3
    b3ec:	46c0      	nop			; (mov r8, r8)
    b3ee:	46bd      	mov	sp, r7
    b3f0:	b005      	add	sp, #20
    b3f2:	bd90      	pop	{r4, r7, pc}
    b3f4:	00006a2e 	.word	0x00006a2e
    b3f8:	00000220 	.word	0x00000220
    b3fc:	fffffe0f 	.word	0xfffffe0f
    b400:	fffffe41 	.word	0xfffffe41

0000b404 <udd_wait_clock_ready>:
    b404:	b580      	push	{r7, lr}
    b406:	af00      	add	r7, sp, #0
    b408:	4b0c      	ldr	r3, [pc, #48]	; (b43c <udd_wait_clock_ready+0x38>)
    b40a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    b40c:	b29b      	uxth	r3, r3
    b40e:	001a      	movs	r2, r3
    b410:	2320      	movs	r3, #32
    b412:	4013      	ands	r3, r2
    b414:	d107      	bne.n	b426 <udd_wait_clock_ready+0x22>
    b416:	46c0      	nop			; (mov r8, r8)
    b418:	4b08      	ldr	r3, [pc, #32]	; (b43c <udd_wait_clock_ready+0x38>)
    b41a:	68db      	ldr	r3, [r3, #12]
    b41c:	22d0      	movs	r2, #208	; 0xd0
    b41e:	4013      	ands	r3, r2
    b420:	2bd0      	cmp	r3, #208	; 0xd0
    b422:	d1f9      	bne.n	b418 <udd_wait_clock_ready+0x14>
    b424:	e006      	b.n	b434 <udd_wait_clock_ready+0x30>
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	4b04      	ldr	r3, [pc, #16]	; (b43c <udd_wait_clock_ready+0x38>)
    b42a:	68db      	ldr	r3, [r3, #12]
    b42c:	2210      	movs	r2, #16
    b42e:	4013      	ands	r3, r2
    b430:	2b10      	cmp	r3, #16
    b432:	d1f9      	bne.n	b428 <udd_wait_clock_ready+0x24>
    b434:	46c0      	nop			; (mov r8, r8)
    b436:	46bd      	mov	sp, r7
    b438:	bd80      	pop	{r7, pc}
    b43a:	46c0      	nop			; (mov r8, r8)
    b43c:	40000800 	.word	0x40000800

0000b440 <udd_sleep_mode>:
    b440:	b590      	push	{r4, r7, lr}
    b442:	b085      	sub	sp, #20
    b444:	af00      	add	r7, sp, #0
    b446:	0002      	movs	r2, r0
    b448:	1dfb      	adds	r3, r7, #7
    b44a:	701a      	strb	r2, [r3, #0]
    b44c:	4c1d      	ldr	r4, [pc, #116]	; (b4c4 <udd_sleep_mode+0x84>)
    b44e:	447c      	add	r4, pc
    b450:	230c      	movs	r3, #12
    b452:	18fa      	adds	r2, r7, r3
    b454:	4b1c      	ldr	r3, [pc, #112]	; (b4c8 <udd_sleep_mode+0x88>)
    b456:	447b      	add	r3, pc
    b458:	0010      	movs	r0, r2
    b45a:	0019      	movs	r1, r3
    b45c:	2304      	movs	r3, #4
    b45e:	001a      	movs	r2, r3
    b460:	4b1a      	ldr	r3, [pc, #104]	; (b4cc <udd_sleep_mode+0x8c>)
    b462:	58e3      	ldr	r3, [r4, r3]
    b464:	4798      	blx	r3
    b466:	4b1a      	ldr	r3, [pc, #104]	; (b4d0 <udd_sleep_mode+0x90>)
    b468:	447b      	add	r3, pc
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	1dfa      	adds	r2, r7, #7
    b46e:	7812      	ldrb	r2, [r2, #0]
    b470:	429a      	cmp	r2, r3
    b472:	d022      	beq.n	b4ba <udd_sleep_mode+0x7a>
    b474:	1dfb      	adds	r3, r7, #7
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	2b00      	cmp	r3, #0
    b47a:	d008      	beq.n	b48e <udd_sleep_mode+0x4e>
    b47c:	1dfb      	adds	r3, r7, #7
    b47e:	781b      	ldrb	r3, [r3, #0]
    b480:	220c      	movs	r2, #12
    b482:	18ba      	adds	r2, r7, r2
    b484:	5cd3      	ldrb	r3, [r2, r3]
    b486:	0018      	movs	r0, r3
    b488:	4b12      	ldr	r3, [pc, #72]	; (b4d4 <udd_sleep_mode+0x94>)
    b48a:	447b      	add	r3, pc
    b48c:	4798      	blx	r3
    b48e:	4b12      	ldr	r3, [pc, #72]	; (b4d8 <udd_sleep_mode+0x98>)
    b490:	447b      	add	r3, pc
    b492:	781b      	ldrb	r3, [r3, #0]
    b494:	2b00      	cmp	r3, #0
    b496:	d00a      	beq.n	b4ae <udd_sleep_mode+0x6e>
    b498:	4b10      	ldr	r3, [pc, #64]	; (b4dc <udd_sleep_mode+0x9c>)
    b49a:	447b      	add	r3, pc
    b49c:	781b      	ldrb	r3, [r3, #0]
    b49e:	001a      	movs	r2, r3
    b4a0:	230c      	movs	r3, #12
    b4a2:	18fb      	adds	r3, r7, r3
    b4a4:	5c9b      	ldrb	r3, [r3, r2]
    b4a6:	0018      	movs	r0, r3
    b4a8:	4b0d      	ldr	r3, [pc, #52]	; (b4e0 <udd_sleep_mode+0xa0>)
    b4aa:	447b      	add	r3, pc
    b4ac:	4798      	blx	r3
    b4ae:	4b0d      	ldr	r3, [pc, #52]	; (b4e4 <udd_sleep_mode+0xa4>)
    b4b0:	447b      	add	r3, pc
    b4b2:	1dfa      	adds	r2, r7, #7
    b4b4:	7812      	ldrb	r2, [r2, #0]
    b4b6:	701a      	strb	r2, [r3, #0]
    b4b8:	e000      	b.n	b4bc <udd_sleep_mode+0x7c>
    b4ba:	46c0      	nop			; (mov r8, r8)
    b4bc:	46bd      	mov	sp, r7
    b4be:	b005      	add	sp, #20
    b4c0:	bd90      	pop	{r4, r7, pc}
    b4c2:	46c0      	nop			; (mov r8, r8)
    b4c4:	00006992 	.word	0x00006992
    b4c8:	000068ba 	.word	0x000068ba
    b4cc:	0000008c 	.word	0x0000008c
    b4d0:	1fff51b4 	.word	0x1fff51b4
    b4d4:	fffffeb7 	.word	0xfffffeb7
    b4d8:	1fff518c 	.word	0x1fff518c
    b4dc:	1fff5182 	.word	0x1fff5182
    b4e0:	fffffef7 	.word	0xfffffef7
    b4e4:	1fff516c 	.word	0x1fff516c

0000b4e8 <udd_ep_get_job>:
    b4e8:	b580      	push	{r7, lr}
    b4ea:	b082      	sub	sp, #8
    b4ec:	af00      	add	r7, sp, #0
    b4ee:	0002      	movs	r2, r0
    b4f0:	1dfb      	adds	r3, r7, #7
    b4f2:	701a      	strb	r2, [r3, #0]
    b4f4:	1dfb      	adds	r3, r7, #7
    b4f6:	781b      	ldrb	r3, [r3, #0]
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d003      	beq.n	b504 <udd_ep_get_job+0x1c>
    b4fc:	1dfb      	adds	r3, r7, #7
    b4fe:	781b      	ldrb	r3, [r3, #0]
    b500:	2b80      	cmp	r3, #128	; 0x80
    b502:	d101      	bne.n	b508 <udd_ep_get_job+0x20>
    b504:	2300      	movs	r3, #0
    b506:	e013      	b.n	b530 <udd_ep_get_job+0x48>
    b508:	1dfb      	adds	r3, r7, #7
    b50a:	781b      	ldrb	r3, [r3, #0]
    b50c:	220f      	movs	r2, #15
    b50e:	4013      	ands	r3, r2
    b510:	005b      	lsls	r3, r3, #1
    b512:	1dfa      	adds	r2, r7, #7
    b514:	7812      	ldrb	r2, [r2, #0]
    b516:	b252      	sxtb	r2, r2
    b518:	b2d2      	uxtb	r2, r2
    b51a:	09d2      	lsrs	r2, r2, #7
    b51c:	b2d2      	uxtb	r2, r2
    b51e:	189b      	adds	r3, r3, r2
    b520:	1e9a      	subs	r2, r3, #2
    b522:	0013      	movs	r3, r2
    b524:	009b      	lsls	r3, r3, #2
    b526:	189b      	adds	r3, r3, r2
    b528:	009b      	lsls	r3, r3, #2
    b52a:	4a03      	ldr	r2, [pc, #12]	; (b538 <udd_ep_get_job+0x50>)
    b52c:	447a      	add	r2, pc
    b52e:	189b      	adds	r3, r3, r2
    b530:	0018      	movs	r0, r3
    b532:	46bd      	mov	sp, r7
    b534:	b002      	add	sp, #8
    b536:	bd80      	pop	{r7, pc}
    b538:	1fff5078 	.word	0x1fff5078

0000b53c <udd_ep_trans_in_next>:
    b53c:	b5b0      	push	{r4, r5, r7, lr}
    b53e:	b088      	sub	sp, #32
    b540:	af00      	add	r7, sp, #0
    b542:	6078      	str	r0, [r7, #4]
    b544:	4c5f      	ldr	r4, [pc, #380]	; (b6c4 <udd_ep_trans_in_next+0x188>)
    b546:	447c      	add	r4, pc
    b548:	687b      	ldr	r3, [r7, #4]
    b54a:	61bb      	str	r3, [r7, #24]
    b54c:	2317      	movs	r3, #23
    b54e:	18fb      	adds	r3, r7, r3
    b550:	69ba      	ldr	r2, [r7, #24]
    b552:	7992      	ldrb	r2, [r2, #6]
    b554:	701a      	strb	r2, [r3, #0]
    b556:	2317      	movs	r3, #23
    b558:	18fb      	adds	r3, r7, r3
    b55a:	781b      	ldrb	r3, [r3, #0]
    b55c:	0018      	movs	r0, r3
    b55e:	4b5a      	ldr	r3, [pc, #360]	; (b6c8 <udd_ep_trans_in_next+0x18c>)
    b560:	447b      	add	r3, pc
    b562:	4798      	blx	r3
    b564:	0003      	movs	r3, r0
    b566:	613b      	str	r3, [r7, #16]
    b568:	230f      	movs	r3, #15
    b56a:	18fb      	adds	r3, r7, r3
    b56c:	2217      	movs	r2, #23
    b56e:	18ba      	adds	r2, r7, r2
    b570:	7812      	ldrb	r2, [r2, #0]
    b572:	210f      	movs	r1, #15
    b574:	400a      	ands	r2, r1
    b576:	701a      	strb	r2, [r3, #0]
    b578:	230c      	movs	r3, #12
    b57a:	18fb      	adds	r3, r7, r3
    b57c:	693a      	ldr	r2, [r7, #16]
    b57e:	8a12      	ldrh	r2, [r2, #16]
    b580:	801a      	strh	r2, [r3, #0]
    b582:	230a      	movs	r3, #10
    b584:	18fb      	adds	r3, r7, r3
    b586:	69ba      	ldr	r2, [r7, #24]
    b588:	8852      	ldrh	r2, [r2, #2]
    b58a:	801a      	strh	r2, [r3, #0]
    b58c:	693b      	ldr	r3, [r7, #16]
    b58e:	68da      	ldr	r2, [r3, #12]
    b590:	230a      	movs	r3, #10
    b592:	18fb      	adds	r3, r7, r3
    b594:	881b      	ldrh	r3, [r3, #0]
    b596:	18d2      	adds	r2, r2, r3
    b598:	693b      	ldr	r3, [r7, #16]
    b59a:	60da      	str	r2, [r3, #12]
    b59c:	693b      	ldr	r3, [r7, #16]
    b59e:	68da      	ldr	r2, [r3, #12]
    b5a0:	693b      	ldr	r3, [r7, #16]
    b5a2:	689b      	ldr	r3, [r3, #8]
    b5a4:	429a      	cmp	r2, r3
    b5a6:	d05a      	beq.n	b65e <udd_ep_trans_in_next+0x122>
    b5a8:	693b      	ldr	r3, [r7, #16]
    b5aa:	689b      	ldr	r3, [r3, #8]
    b5ac:	b299      	uxth	r1, r3
    b5ae:	693b      	ldr	r3, [r7, #16]
    b5b0:	68db      	ldr	r3, [r3, #12]
    b5b2:	b29a      	uxth	r2, r3
    b5b4:	231e      	movs	r3, #30
    b5b6:	18fb      	adds	r3, r7, r3
    b5b8:	1a8a      	subs	r2, r1, r2
    b5ba:	801a      	strh	r2, [r3, #0]
    b5bc:	231e      	movs	r3, #30
    b5be:	18fb      	adds	r3, r7, r3
    b5c0:	881b      	ldrh	r3, [r3, #0]
    b5c2:	4a42      	ldr	r2, [pc, #264]	; (b6cc <udd_ep_trans_in_next+0x190>)
    b5c4:	4293      	cmp	r3, r2
    b5c6:	d90e      	bls.n	b5e6 <udd_ep_trans_in_next+0xaa>
    b5c8:	230c      	movs	r3, #12
    b5ca:	18fb      	adds	r3, r7, r3
    b5cc:	881a      	ldrh	r2, [r3, #0]
    b5ce:	483f      	ldr	r0, [pc, #252]	; (b6cc <udd_ep_trans_in_next+0x190>)
    b5d0:	4b3f      	ldr	r3, [pc, #252]	; (b6d0 <udd_ep_trans_in_next+0x194>)
    b5d2:	58e3      	ldr	r3, [r4, r3]
    b5d4:	0011      	movs	r1, r2
    b5d6:	4798      	blx	r3
    b5d8:	000b      	movs	r3, r1
    b5da:	b29a      	uxth	r2, r3
    b5dc:	231e      	movs	r3, #30
    b5de:	18fb      	adds	r3, r7, r3
    b5e0:	493a      	ldr	r1, [pc, #232]	; (b6cc <udd_ep_trans_in_next+0x190>)
    b5e2:	1a8a      	subs	r2, r1, r2
    b5e4:	801a      	strh	r2, [r3, #0]
    b5e6:	693b      	ldr	r3, [r7, #16]
    b5e8:	7c9b      	ldrb	r3, [r3, #18]
    b5ea:	2202      	movs	r2, #2
    b5ec:	4013      	ands	r3, r2
    b5ee:	b2db      	uxtb	r3, r3
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d00f      	beq.n	b614 <udd_ep_trans_in_next+0xd8>
    b5f4:	231e      	movs	r3, #30
    b5f6:	18fa      	adds	r2, r7, r3
    b5f8:	230c      	movs	r3, #12
    b5fa:	18fb      	adds	r3, r7, r3
    b5fc:	8812      	ldrh	r2, [r2, #0]
    b5fe:	8819      	ldrh	r1, [r3, #0]
    b600:	4b34      	ldr	r3, [pc, #208]	; (b6d4 <udd_ep_trans_in_next+0x198>)
    b602:	58e3      	ldr	r3, [r4, r3]
    b604:	0010      	movs	r0, r2
    b606:	4798      	blx	r3
    b608:	000b      	movs	r3, r1
    b60a:	b29b      	uxth	r3, r3
    b60c:	2b00      	cmp	r3, #0
    b60e:	d101      	bne.n	b614 <udd_ep_trans_in_next+0xd8>
    b610:	2301      	movs	r3, #1
    b612:	e000      	b.n	b616 <udd_ep_trans_in_next+0xda>
    b614:	2300      	movs	r3, #0
    b616:	b2db      	uxtb	r3, r3
    b618:	1c1a      	adds	r2, r3, #0
    b61a:	2301      	movs	r3, #1
    b61c:	4013      	ands	r3, r2
    b61e:	b2da      	uxtb	r2, r3
    b620:	693b      	ldr	r3, [r7, #16]
    b622:	2101      	movs	r1, #1
    b624:	400a      	ands	r2, r1
    b626:	1890      	adds	r0, r2, r2
    b628:	7c9a      	ldrb	r2, [r3, #18]
    b62a:	2102      	movs	r1, #2
    b62c:	438a      	bics	r2, r1
    b62e:	1c11      	adds	r1, r2, #0
    b630:	1c02      	adds	r2, r0, #0
    b632:	430a      	orrs	r2, r1
    b634:	749a      	strb	r2, [r3, #18]
    b636:	693b      	ldr	r3, [r7, #16]
    b638:	685a      	ldr	r2, [r3, #4]
    b63a:	693b      	ldr	r3, [r7, #16]
    b63c:	68db      	ldr	r3, [r3, #12]
    b63e:	18d2      	adds	r2, r2, r3
    b640:	231e      	movs	r3, #30
    b642:	18fb      	adds	r3, r7, r3
    b644:	8818      	ldrh	r0, [r3, #0]
    b646:	230f      	movs	r3, #15
    b648:	18fb      	adds	r3, r7, r3
    b64a:	7819      	ldrb	r1, [r3, #0]
    b64c:	4b22      	ldr	r3, [pc, #136]	; (b6d8 <udd_ep_trans_in_next+0x19c>)
    b64e:	58e3      	ldr	r3, [r4, r3]
    b650:	001d      	movs	r5, r3
    b652:	0003      	movs	r3, r0
    b654:	0028      	movs	r0, r5
    b656:	4d21      	ldr	r5, [pc, #132]	; (b6dc <udd_ep_trans_in_next+0x1a0>)
    b658:	5964      	ldr	r4, [r4, r5]
    b65a:	47a0      	blx	r4
    b65c:	e02e      	b.n	b6bc <udd_ep_trans_in_next+0x180>
    b65e:	693b      	ldr	r3, [r7, #16]
    b660:	7c9b      	ldrb	r3, [r3, #18]
    b662:	2202      	movs	r2, #2
    b664:	4013      	ands	r3, r2
    b666:	b2db      	uxtb	r3, r3
    b668:	2b00      	cmp	r3, #0
    b66a:	d014      	beq.n	b696 <udd_ep_trans_in_next+0x15a>
    b66c:	693b      	ldr	r3, [r7, #16]
    b66e:	7c9a      	ldrb	r2, [r3, #18]
    b670:	2102      	movs	r1, #2
    b672:	438a      	bics	r2, r1
    b674:	749a      	strb	r2, [r3, #18]
    b676:	693b      	ldr	r3, [r7, #16]
    b678:	685a      	ldr	r2, [r3, #4]
    b67a:	693b      	ldr	r3, [r7, #16]
    b67c:	68db      	ldr	r3, [r3, #12]
    b67e:	18d2      	adds	r2, r2, r3
    b680:	230f      	movs	r3, #15
    b682:	18fb      	adds	r3, r7, r3
    b684:	7819      	ldrb	r1, [r3, #0]
    b686:	4b14      	ldr	r3, [pc, #80]	; (b6d8 <udd_ep_trans_in_next+0x19c>)
    b688:	58e3      	ldr	r3, [r4, r3]
    b68a:	0018      	movs	r0, r3
    b68c:	2300      	movs	r3, #0
    b68e:	4d13      	ldr	r5, [pc, #76]	; (b6dc <udd_ep_trans_in_next+0x1a0>)
    b690:	5964      	ldr	r4, [r4, r5]
    b692:	47a0      	blx	r4
    b694:	e012      	b.n	b6bc <udd_ep_trans_in_next+0x180>
    b696:	693b      	ldr	r3, [r7, #16]
    b698:	7c9a      	ldrb	r2, [r3, #18]
    b69a:	2101      	movs	r1, #1
    b69c:	438a      	bics	r2, r1
    b69e:	749a      	strb	r2, [r3, #18]
    b6a0:	693b      	ldr	r3, [r7, #16]
    b6a2:	681b      	ldr	r3, [r3, #0]
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d009      	beq.n	b6bc <udd_ep_trans_in_next+0x180>
    b6a8:	693b      	ldr	r3, [r7, #16]
    b6aa:	681c      	ldr	r4, [r3, #0]
    b6ac:	693b      	ldr	r3, [r7, #16]
    b6ae:	68d9      	ldr	r1, [r3, #12]
    b6b0:	2317      	movs	r3, #23
    b6b2:	18fb      	adds	r3, r7, r3
    b6b4:	781b      	ldrb	r3, [r3, #0]
    b6b6:	001a      	movs	r2, r3
    b6b8:	2000      	movs	r0, #0
    b6ba:	47a0      	blx	r4
    b6bc:	46bd      	mov	sp, r7
    b6be:	b008      	add	sp, #32
    b6c0:	bdb0      	pop	{r4, r5, r7, pc}
    b6c2:	46c0      	nop			; (mov r8, r8)
    b6c4:	0000689a 	.word	0x0000689a
    b6c8:	ffffff85 	.word	0xffffff85
    b6cc:	00001fff 	.word	0x00001fff
    b6d0:	000002e8 	.word	0x000002e8
    b6d4:	00000270 	.word	0x00000270
    b6d8:	00000078 	.word	0x00000078
    b6dc:	00000300 	.word	0x00000300

0000b6e0 <udd_ep_trans_out_next>:
    b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6e2:	b089      	sub	sp, #36	; 0x24
    b6e4:	af00      	add	r7, sp, #0
    b6e6:	6078      	str	r0, [r7, #4]
    b6e8:	4c74      	ldr	r4, [pc, #464]	; (b8bc <udd_ep_trans_out_next+0x1dc>)
    b6ea:	447c      	add	r4, pc
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	61bb      	str	r3, [r7, #24]
    b6f0:	2317      	movs	r3, #23
    b6f2:	18fb      	adds	r3, r7, r3
    b6f4:	69ba      	ldr	r2, [r7, #24]
    b6f6:	7992      	ldrb	r2, [r2, #6]
    b6f8:	701a      	strb	r2, [r3, #0]
    b6fa:	2317      	movs	r3, #23
    b6fc:	18fb      	adds	r3, r7, r3
    b6fe:	781b      	ldrb	r3, [r3, #0]
    b700:	0018      	movs	r0, r3
    b702:	4b6f      	ldr	r3, [pc, #444]	; (b8c0 <udd_ep_trans_out_next+0x1e0>)
    b704:	447b      	add	r3, pc
    b706:	4798      	blx	r3
    b708:	0003      	movs	r3, r0
    b70a:	613b      	str	r3, [r7, #16]
    b70c:	230f      	movs	r3, #15
    b70e:	18fb      	adds	r3, r7, r3
    b710:	2217      	movs	r2, #23
    b712:	18ba      	adds	r2, r7, r2
    b714:	7812      	ldrb	r2, [r2, #0]
    b716:	210f      	movs	r1, #15
    b718:	400a      	ands	r2, r1
    b71a:	701a      	strb	r2, [r3, #0]
    b71c:	230c      	movs	r3, #12
    b71e:	18fb      	adds	r3, r7, r3
    b720:	693a      	ldr	r2, [r7, #16]
    b722:	8a12      	ldrh	r2, [r2, #16]
    b724:	801a      	strh	r2, [r3, #0]
    b726:	230a      	movs	r3, #10
    b728:	18fb      	adds	r3, r7, r3
    b72a:	69ba      	ldr	r2, [r7, #24]
    b72c:	8812      	ldrh	r2, [r2, #0]
    b72e:	801a      	strh	r2, [r3, #0]
    b730:	693b      	ldr	r3, [r7, #16]
    b732:	7c9b      	ldrb	r3, [r3, #18]
    b734:	2204      	movs	r2, #4
    b736:	4013      	ands	r3, r2
    b738:	b2db      	uxtb	r3, r3
    b73a:	2b00      	cmp	r3, #0
    b73c:	d01c      	beq.n	b778 <udd_ep_trans_out_next+0x98>
    b73e:	693b      	ldr	r3, [r7, #16]
    b740:	685a      	ldr	r2, [r3, #4]
    b742:	693b      	ldr	r3, [r7, #16]
    b744:	68db      	ldr	r3, [r3, #12]
    b746:	18d5      	adds	r5, r2, r3
    b748:	230f      	movs	r3, #15
    b74a:	18fb      	adds	r3, r7, r3
    b74c:	781b      	ldrb	r3, [r3, #0]
    b74e:	3b01      	subs	r3, #1
    b750:	019b      	lsls	r3, r3, #6
    b752:	4a5c      	ldr	r2, [pc, #368]	; (b8c4 <udd_ep_trans_out_next+0x1e4>)
    b754:	58a2      	ldr	r2, [r4, r2]
    b756:	189e      	adds	r6, r3, r2
    b758:	693b      	ldr	r3, [r7, #16]
    b75a:	689a      	ldr	r2, [r3, #8]
    b75c:	230c      	movs	r3, #12
    b75e:	18fb      	adds	r3, r7, r3
    b760:	8819      	ldrh	r1, [r3, #0]
    b762:	4b59      	ldr	r3, [pc, #356]	; (b8c8 <udd_ep_trans_out_next+0x1e8>)
    b764:	58e3      	ldr	r3, [r4, r3]
    b766:	0010      	movs	r0, r2
    b768:	4798      	blx	r3
    b76a:	000b      	movs	r3, r1
    b76c:	001a      	movs	r2, r3
    b76e:	0031      	movs	r1, r6
    b770:	0028      	movs	r0, r5
    b772:	4b56      	ldr	r3, [pc, #344]	; (b8cc <udd_ep_trans_out_next+0x1ec>)
    b774:	58e3      	ldr	r3, [r4, r3]
    b776:	4798      	blx	r3
    b778:	693b      	ldr	r3, [r7, #16]
    b77a:	68da      	ldr	r2, [r3, #12]
    b77c:	230a      	movs	r3, #10
    b77e:	18fb      	adds	r3, r7, r3
    b780:	881b      	ldrh	r3, [r3, #0]
    b782:	18d2      	adds	r2, r2, r3
    b784:	693b      	ldr	r3, [r7, #16]
    b786:	60da      	str	r2, [r3, #12]
    b788:	693b      	ldr	r3, [r7, #16]
    b78a:	68da      	ldr	r2, [r3, #12]
    b78c:	693b      	ldr	r3, [r7, #16]
    b78e:	689b      	ldr	r3, [r3, #8]
    b790:	429a      	cmp	r2, r3
    b792:	d903      	bls.n	b79c <udd_ep_trans_out_next+0xbc>
    b794:	693b      	ldr	r3, [r7, #16]
    b796:	689a      	ldr	r2, [r3, #8]
    b798:	693b      	ldr	r3, [r7, #16]
    b79a:	60da      	str	r2, [r3, #12]
    b79c:	69bb      	ldr	r3, [r7, #24]
    b79e:	889b      	ldrh	r3, [r3, #4]
    b7a0:	220a      	movs	r2, #10
    b7a2:	18ba      	adds	r2, r7, r2
    b7a4:	8812      	ldrh	r2, [r2, #0]
    b7a6:	429a      	cmp	r2, r3
    b7a8:	d000      	beq.n	b7ac <udd_ep_trans_out_next+0xcc>
    b7aa:	e071      	b.n	b890 <udd_ep_trans_out_next+0x1b0>
    b7ac:	693b      	ldr	r3, [r7, #16]
    b7ae:	68da      	ldr	r2, [r3, #12]
    b7b0:	693b      	ldr	r3, [r7, #16]
    b7b2:	689b      	ldr	r3, [r3, #8]
    b7b4:	429a      	cmp	r2, r3
    b7b6:	d100      	bne.n	b7ba <udd_ep_trans_out_next+0xda>
    b7b8:	e06a      	b.n	b890 <udd_ep_trans_out_next+0x1b0>
    b7ba:	693b      	ldr	r3, [r7, #16]
    b7bc:	689b      	ldr	r3, [r3, #8]
    b7be:	b299      	uxth	r1, r3
    b7c0:	693b      	ldr	r3, [r7, #16]
    b7c2:	68db      	ldr	r3, [r3, #12]
    b7c4:	b29a      	uxth	r2, r3
    b7c6:	231e      	movs	r3, #30
    b7c8:	18fb      	adds	r3, r7, r3
    b7ca:	1a8a      	subs	r2, r1, r2
    b7cc:	801a      	strh	r2, [r3, #0]
    b7ce:	231e      	movs	r3, #30
    b7d0:	18fb      	adds	r3, r7, r3
    b7d2:	881b      	ldrh	r3, [r3, #0]
    b7d4:	4a3e      	ldr	r2, [pc, #248]	; (b8d0 <udd_ep_trans_out_next+0x1f0>)
    b7d6:	4293      	cmp	r3, r2
    b7d8:	d90f      	bls.n	b7fa <udd_ep_trans_out_next+0x11a>
    b7da:	230c      	movs	r3, #12
    b7dc:	18fb      	adds	r3, r7, r3
    b7de:	881a      	ldrh	r2, [r3, #0]
    b7e0:	483b      	ldr	r0, [pc, #236]	; (b8d0 <udd_ep_trans_out_next+0x1f0>)
    b7e2:	4b3c      	ldr	r3, [pc, #240]	; (b8d4 <udd_ep_trans_out_next+0x1f4>)
    b7e4:	58e3      	ldr	r3, [r4, r3]
    b7e6:	0011      	movs	r1, r2
    b7e8:	4798      	blx	r3
    b7ea:	000b      	movs	r3, r1
    b7ec:	b29a      	uxth	r2, r3
    b7ee:	231e      	movs	r3, #30
    b7f0:	18fb      	adds	r3, r7, r3
    b7f2:	4937      	ldr	r1, [pc, #220]	; (b8d0 <udd_ep_trans_out_next+0x1f0>)
    b7f4:	1a8a      	subs	r2, r1, r2
    b7f6:	801a      	strh	r2, [r3, #0]
    b7f8:	e012      	b.n	b820 <udd_ep_trans_out_next+0x140>
    b7fa:	231e      	movs	r3, #30
    b7fc:	18fa      	adds	r2, r7, r3
    b7fe:	230c      	movs	r3, #12
    b800:	18fb      	adds	r3, r7, r3
    b802:	8812      	ldrh	r2, [r2, #0]
    b804:	8819      	ldrh	r1, [r3, #0]
    b806:	4b30      	ldr	r3, [pc, #192]	; (b8c8 <udd_ep_trans_out_next+0x1e8>)
    b808:	58e3      	ldr	r3, [r4, r3]
    b80a:	0010      	movs	r0, r2
    b80c:	4798      	blx	r3
    b80e:	000b      	movs	r3, r1
    b810:	b29a      	uxth	r2, r3
    b812:	231e      	movs	r3, #30
    b814:	18fb      	adds	r3, r7, r3
    b816:	211e      	movs	r1, #30
    b818:	1879      	adds	r1, r7, r1
    b81a:	8809      	ldrh	r1, [r1, #0]
    b81c:	1a8a      	subs	r2, r1, r2
    b81e:	801a      	strh	r2, [r3, #0]
    b820:	231e      	movs	r3, #30
    b822:	18fa      	adds	r2, r7, r3
    b824:	230c      	movs	r3, #12
    b826:	18fb      	adds	r3, r7, r3
    b828:	8812      	ldrh	r2, [r2, #0]
    b82a:	881b      	ldrh	r3, [r3, #0]
    b82c:	429a      	cmp	r2, r3
    b82e:	d21b      	bcs.n	b868 <udd_ep_trans_out_next+0x188>
    b830:	693b      	ldr	r3, [r7, #16]
    b832:	7c9a      	ldrb	r2, [r3, #18]
    b834:	2104      	movs	r1, #4
    b836:	430a      	orrs	r2, r1
    b838:	749a      	strb	r2, [r3, #18]
    b83a:	230f      	movs	r3, #15
    b83c:	18fb      	adds	r3, r7, r3
    b83e:	781b      	ldrb	r3, [r3, #0]
    b840:	3b01      	subs	r3, #1
    b842:	019b      	lsls	r3, r3, #6
    b844:	4a1f      	ldr	r2, [pc, #124]	; (b8c4 <udd_ep_trans_out_next+0x1e4>)
    b846:	58a2      	ldr	r2, [r4, r2]
    b848:	189a      	adds	r2, r3, r2
    b84a:	230c      	movs	r3, #12
    b84c:	18fb      	adds	r3, r7, r3
    b84e:	8818      	ldrh	r0, [r3, #0]
    b850:	230f      	movs	r3, #15
    b852:	18fb      	adds	r3, r7, r3
    b854:	7819      	ldrb	r1, [r3, #0]
    b856:	4b20      	ldr	r3, [pc, #128]	; (b8d8 <udd_ep_trans_out_next+0x1f8>)
    b858:	58e3      	ldr	r3, [r4, r3]
    b85a:	001d      	movs	r5, r3
    b85c:	0003      	movs	r3, r0
    b85e:	0028      	movs	r0, r5
    b860:	4d1e      	ldr	r5, [pc, #120]	; (b8dc <udd_ep_trans_out_next+0x1fc>)
    b862:	5964      	ldr	r4, [r4, r5]
    b864:	47a0      	blx	r4
    b866:	e026      	b.n	b8b6 <udd_ep_trans_out_next+0x1d6>
    b868:	693b      	ldr	r3, [r7, #16]
    b86a:	685a      	ldr	r2, [r3, #4]
    b86c:	693b      	ldr	r3, [r7, #16]
    b86e:	68db      	ldr	r3, [r3, #12]
    b870:	18d2      	adds	r2, r2, r3
    b872:	231e      	movs	r3, #30
    b874:	18fb      	adds	r3, r7, r3
    b876:	8818      	ldrh	r0, [r3, #0]
    b878:	230f      	movs	r3, #15
    b87a:	18fb      	adds	r3, r7, r3
    b87c:	7819      	ldrb	r1, [r3, #0]
    b87e:	4b16      	ldr	r3, [pc, #88]	; (b8d8 <udd_ep_trans_out_next+0x1f8>)
    b880:	58e3      	ldr	r3, [r4, r3]
    b882:	001d      	movs	r5, r3
    b884:	0003      	movs	r3, r0
    b886:	0028      	movs	r0, r5
    b888:	4d14      	ldr	r5, [pc, #80]	; (b8dc <udd_ep_trans_out_next+0x1fc>)
    b88a:	5964      	ldr	r4, [r4, r5]
    b88c:	47a0      	blx	r4
    b88e:	e012      	b.n	b8b6 <udd_ep_trans_out_next+0x1d6>
    b890:	693b      	ldr	r3, [r7, #16]
    b892:	7c9a      	ldrb	r2, [r3, #18]
    b894:	2101      	movs	r1, #1
    b896:	438a      	bics	r2, r1
    b898:	749a      	strb	r2, [r3, #18]
    b89a:	693b      	ldr	r3, [r7, #16]
    b89c:	681b      	ldr	r3, [r3, #0]
    b89e:	2b00      	cmp	r3, #0
    b8a0:	d009      	beq.n	b8b6 <udd_ep_trans_out_next+0x1d6>
    b8a2:	693b      	ldr	r3, [r7, #16]
    b8a4:	681c      	ldr	r4, [r3, #0]
    b8a6:	693b      	ldr	r3, [r7, #16]
    b8a8:	68d9      	ldr	r1, [r3, #12]
    b8aa:	2317      	movs	r3, #23
    b8ac:	18fb      	adds	r3, r7, r3
    b8ae:	781b      	ldrb	r3, [r3, #0]
    b8b0:	001a      	movs	r2, r3
    b8b2:	2000      	movs	r0, #0
    b8b4:	47a0      	blx	r4
    b8b6:	46bd      	mov	sp, r7
    b8b8:	b009      	add	sp, #36	; 0x24
    b8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8bc:	000066f6 	.word	0x000066f6
    b8c0:	fffffde1 	.word	0xfffffde1
    b8c4:	0000001c 	.word	0x0000001c
    b8c8:	00000270 	.word	0x00000270
    b8cc:	0000008c 	.word	0x0000008c
    b8d0:	00001fff 	.word	0x00001fff
    b8d4:	000002e8 	.word	0x000002e8
    b8d8:	00000078 	.word	0x00000078
    b8dc:	0000014c 	.word	0x0000014c

0000b8e0 <udd_ep_transfer_process>:
    b8e0:	b580      	push	{r7, lr}
    b8e2:	b084      	sub	sp, #16
    b8e4:	af00      	add	r7, sp, #0
    b8e6:	6078      	str	r0, [r7, #4]
    b8e8:	6039      	str	r1, [r7, #0]
    b8ea:	683b      	ldr	r3, [r7, #0]
    b8ec:	60fb      	str	r3, [r7, #12]
    b8ee:	230b      	movs	r3, #11
    b8f0:	18fb      	adds	r3, r7, r3
    b8f2:	68fa      	ldr	r2, [r7, #12]
    b8f4:	7992      	ldrb	r2, [r2, #6]
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	230b      	movs	r3, #11
    b8fa:	18fb      	adds	r3, r7, r3
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	b25b      	sxtb	r3, r3
    b900:	2b00      	cmp	r3, #0
    b902:	da05      	bge.n	b910 <udd_ep_transfer_process+0x30>
    b904:	683b      	ldr	r3, [r7, #0]
    b906:	0018      	movs	r0, r3
    b908:	4b06      	ldr	r3, [pc, #24]	; (b924 <udd_ep_transfer_process+0x44>)
    b90a:	447b      	add	r3, pc
    b90c:	4798      	blx	r3
    b90e:	e004      	b.n	b91a <udd_ep_transfer_process+0x3a>
    b910:	683b      	ldr	r3, [r7, #0]
    b912:	0018      	movs	r0, r3
    b914:	4b04      	ldr	r3, [pc, #16]	; (b928 <udd_ep_transfer_process+0x48>)
    b916:	447b      	add	r3, pc
    b918:	4798      	blx	r3
    b91a:	46c0      	nop			; (mov r8, r8)
    b91c:	46bd      	mov	sp, r7
    b91e:	b004      	add	sp, #16
    b920:	bd80      	pop	{r7, pc}
    b922:	46c0      	nop			; (mov r8, r8)
    b924:	fffffc2f 	.word	0xfffffc2f
    b928:	fffffdc7 	.word	0xfffffdc7

0000b92c <udd_ep_abort>:
    b92c:	b590      	push	{r4, r7, lr}
    b92e:	b085      	sub	sp, #20
    b930:	af00      	add	r7, sp, #0
    b932:	0002      	movs	r2, r0
    b934:	1dfb      	adds	r3, r7, #7
    b936:	701a      	strb	r2, [r3, #0]
    b938:	4b17      	ldr	r3, [pc, #92]	; (b998 <udd_ep_abort+0x6c>)
    b93a:	447b      	add	r3, pc
    b93c:	1dfa      	adds	r2, r7, #7
    b93e:	7811      	ldrb	r1, [r2, #0]
    b940:	4a16      	ldr	r2, [pc, #88]	; (b99c <udd_ep_abort+0x70>)
    b942:	589a      	ldr	r2, [r3, r2]
    b944:	0010      	movs	r0, r2
    b946:	4a16      	ldr	r2, [pc, #88]	; (b9a0 <udd_ep_abort+0x74>)
    b948:	589b      	ldr	r3, [r3, r2]
    b94a:	4798      	blx	r3
    b94c:	1dfb      	adds	r3, r7, #7
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	0018      	movs	r0, r3
    b952:	4b14      	ldr	r3, [pc, #80]	; (b9a4 <udd_ep_abort+0x78>)
    b954:	447b      	add	r3, pc
    b956:	4798      	blx	r3
    b958:	0003      	movs	r3, r0
    b95a:	60fb      	str	r3, [r7, #12]
    b95c:	68fb      	ldr	r3, [r7, #12]
    b95e:	7c9b      	ldrb	r3, [r3, #18]
    b960:	2201      	movs	r2, #1
    b962:	4013      	ands	r3, r2
    b964:	b2db      	uxtb	r3, r3
    b966:	2b00      	cmp	r3, #0
    b968:	d012      	beq.n	b990 <udd_ep_abort+0x64>
    b96a:	68fb      	ldr	r3, [r7, #12]
    b96c:	7c9a      	ldrb	r2, [r3, #18]
    b96e:	2101      	movs	r1, #1
    b970:	438a      	bics	r2, r1
    b972:	749a      	strb	r2, [r3, #18]
    b974:	68fb      	ldr	r3, [r7, #12]
    b976:	681b      	ldr	r3, [r3, #0]
    b978:	2b00      	cmp	r3, #0
    b97a:	d00a      	beq.n	b992 <udd_ep_abort+0x66>
    b97c:	68fb      	ldr	r3, [r7, #12]
    b97e:	681c      	ldr	r4, [r3, #0]
    b980:	68fb      	ldr	r3, [r7, #12]
    b982:	68d9      	ldr	r1, [r3, #12]
    b984:	1dfb      	adds	r3, r7, #7
    b986:	781b      	ldrb	r3, [r3, #0]
    b988:	001a      	movs	r2, r3
    b98a:	2001      	movs	r0, #1
    b98c:	47a0      	blx	r4
    b98e:	e000      	b.n	b992 <udd_ep_abort+0x66>
    b990:	46c0      	nop			; (mov r8, r8)
    b992:	46bd      	mov	sp, r7
    b994:	b005      	add	sp, #20
    b996:	bd90      	pop	{r4, r7, pc}
    b998:	000064a6 	.word	0x000064a6
    b99c:	00000078 	.word	0x00000078
    b9a0:	00000010 	.word	0x00000010
    b9a4:	fffffb91 	.word	0xfffffb91

0000b9a8 <udd_is_high_speed>:
    b9a8:	b580      	push	{r7, lr}
    b9aa:	af00      	add	r7, sp, #0
    b9ac:	2300      	movs	r3, #0
    b9ae:	0018      	movs	r0, r3
    b9b0:	46bd      	mov	sp, r7
    b9b2:	bd80      	pop	{r7, pc}

0000b9b4 <udd_get_frame_number>:
    b9b4:	b580      	push	{r7, lr}
    b9b6:	af00      	add	r7, sp, #0
    b9b8:	4a05      	ldr	r2, [pc, #20]	; (b9d0 <udd_get_frame_number+0x1c>)
    b9ba:	447a      	add	r2, pc
    b9bc:	4b05      	ldr	r3, [pc, #20]	; (b9d4 <udd_get_frame_number+0x20>)
    b9be:	58d3      	ldr	r3, [r2, r3]
    b9c0:	0018      	movs	r0, r3
    b9c2:	4b05      	ldr	r3, [pc, #20]	; (b9d8 <udd_get_frame_number+0x24>)
    b9c4:	447b      	add	r3, pc
    b9c6:	4798      	blx	r3
    b9c8:	0003      	movs	r3, r0
    b9ca:	0018      	movs	r0, r3
    b9cc:	46bd      	mov	sp, r7
    b9ce:	bd80      	pop	{r7, pc}
    b9d0:	00006426 	.word	0x00006426
    b9d4:	00000078 	.word	0x00000078
    b9d8:	fffff909 	.word	0xfffff909

0000b9dc <udd_get_micro_frame_number>:
    b9dc:	b580      	push	{r7, lr}
    b9de:	af00      	add	r7, sp, #0
    b9e0:	4a05      	ldr	r2, [pc, #20]	; (b9f8 <udd_get_micro_frame_number+0x1c>)
    b9e2:	447a      	add	r2, pc
    b9e4:	4b05      	ldr	r3, [pc, #20]	; (b9fc <udd_get_micro_frame_number+0x20>)
    b9e6:	58d3      	ldr	r3, [r2, r3]
    b9e8:	0018      	movs	r0, r3
    b9ea:	4b05      	ldr	r3, [pc, #20]	; (ba00 <udd_get_micro_frame_number+0x24>)
    b9ec:	447b      	add	r3, pc
    b9ee:	4798      	blx	r3
    b9f0:	0003      	movs	r3, r0
    b9f2:	0018      	movs	r0, r3
    b9f4:	46bd      	mov	sp, r7
    b9f6:	bd80      	pop	{r7, pc}
    b9f8:	000063fe 	.word	0x000063fe
    b9fc:	00000078 	.word	0x00000078
    ba00:	fffff8fd 	.word	0xfffff8fd

0000ba04 <udd_ep_free>:
    ba04:	b590      	push	{r4, r7, lr}
    ba06:	b085      	sub	sp, #20
    ba08:	af00      	add	r7, sp, #0
    ba0a:	0002      	movs	r2, r0
    ba0c:	1dfb      	adds	r3, r7, #7
    ba0e:	701a      	strb	r2, [r3, #0]
    ba10:	4c1e      	ldr	r4, [pc, #120]	; (ba8c <udd_ep_free+0x88>)
    ba12:	447c      	add	r4, pc
    ba14:	2308      	movs	r3, #8
    ba16:	18fb      	adds	r3, r7, r3
    ba18:	0018      	movs	r0, r3
    ba1a:	4b1d      	ldr	r3, [pc, #116]	; (ba90 <udd_ep_free+0x8c>)
    ba1c:	58e3      	ldr	r3, [r4, r3]
    ba1e:	4798      	blx	r3
    ba20:	230f      	movs	r3, #15
    ba22:	18fb      	adds	r3, r7, r3
    ba24:	1dfa      	adds	r2, r7, #7
    ba26:	7812      	ldrb	r2, [r2, #0]
    ba28:	210f      	movs	r1, #15
    ba2a:	400a      	ands	r2, r1
    ba2c:	701a      	strb	r2, [r3, #0]
    ba2e:	1dfb      	adds	r3, r7, #7
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	0018      	movs	r0, r3
    ba34:	4b17      	ldr	r3, [pc, #92]	; (ba94 <udd_ep_free+0x90>)
    ba36:	58e3      	ldr	r3, [r4, r3]
    ba38:	4798      	blx	r3
    ba3a:	2308      	movs	r3, #8
    ba3c:	18fb      	adds	r3, r7, r3
    ba3e:	1dfa      	adds	r2, r7, #7
    ba40:	7812      	ldrb	r2, [r2, #0]
    ba42:	701a      	strb	r2, [r3, #0]
    ba44:	2308      	movs	r3, #8
    ba46:	18fb      	adds	r3, r7, r3
    ba48:	2200      	movs	r2, #0
    ba4a:	70da      	strb	r2, [r3, #3]
    ba4c:	2308      	movs	r3, #8
    ba4e:	18fa      	adds	r2, r7, r3
    ba50:	4b11      	ldr	r3, [pc, #68]	; (ba98 <udd_ep_free+0x94>)
    ba52:	58e3      	ldr	r3, [r4, r3]
    ba54:	0011      	movs	r1, r2
    ba56:	0018      	movs	r0, r3
    ba58:	4b10      	ldr	r3, [pc, #64]	; (ba9c <udd_ep_free+0x98>)
    ba5a:	58e3      	ldr	r3, [r4, r3]
    ba5c:	4798      	blx	r3
    ba5e:	230f      	movs	r3, #15
    ba60:	18fb      	adds	r3, r7, r3
    ba62:	7819      	ldrb	r1, [r3, #0]
    ba64:	4b0c      	ldr	r3, [pc, #48]	; (ba98 <udd_ep_free+0x94>)
    ba66:	58e3      	ldr	r3, [r4, r3]
    ba68:	2200      	movs	r2, #0
    ba6a:	0018      	movs	r0, r3
    ba6c:	4b0c      	ldr	r3, [pc, #48]	; (baa0 <udd_ep_free+0x9c>)
    ba6e:	58e3      	ldr	r3, [r4, r3]
    ba70:	4798      	blx	r3
    ba72:	1dfb      	adds	r3, r7, #7
    ba74:	7819      	ldrb	r1, [r3, #0]
    ba76:	4b08      	ldr	r3, [pc, #32]	; (ba98 <udd_ep_free+0x94>)
    ba78:	58e3      	ldr	r3, [r4, r3]
    ba7a:	2200      	movs	r2, #0
    ba7c:	0018      	movs	r0, r3
    ba7e:	4b09      	ldr	r3, [pc, #36]	; (baa4 <udd_ep_free+0xa0>)
    ba80:	58e3      	ldr	r3, [r4, r3]
    ba82:	4798      	blx	r3
    ba84:	46c0      	nop			; (mov r8, r8)
    ba86:	46bd      	mov	sp, r7
    ba88:	b005      	add	sp, #20
    ba8a:	bd90      	pop	{r4, r7, pc}
    ba8c:	000063ce 	.word	0x000063ce
    ba90:	00000104 	.word	0x00000104
    ba94:	000001b8 	.word	0x000001b8
    ba98:	00000078 	.word	0x00000078
    ba9c:	00000074 	.word	0x00000074
    baa0:	00000144 	.word	0x00000144
    baa4:	000001d8 	.word	0x000001d8

0000baa8 <udd_ep_alloc>:
    baa8:	b5b0      	push	{r4, r5, r7, lr}
    baaa:	b086      	sub	sp, #24
    baac:	af00      	add	r7, sp, #0
    baae:	0004      	movs	r4, r0
    bab0:	0008      	movs	r0, r1
    bab2:	0011      	movs	r1, r2
    bab4:	1dfb      	adds	r3, r7, #7
    bab6:	1c22      	adds	r2, r4, #0
    bab8:	701a      	strb	r2, [r3, #0]
    baba:	1dbb      	adds	r3, r7, #6
    babc:	1c02      	adds	r2, r0, #0
    babe:	701a      	strb	r2, [r3, #0]
    bac0:	1d3b      	adds	r3, r7, #4
    bac2:	1c0a      	adds	r2, r1, #0
    bac4:	801a      	strh	r2, [r3, #0]
    bac6:	4c62      	ldr	r4, [pc, #392]	; (bc50 <udd_ep_alloc+0x1a8>)
    bac8:	447c      	add	r4, pc
    baca:	230c      	movs	r3, #12
    bacc:	18fb      	adds	r3, r7, r3
    bace:	0018      	movs	r0, r3
    bad0:	4b60      	ldr	r3, [pc, #384]	; (bc54 <udd_ep_alloc+0x1ac>)
    bad2:	58e3      	ldr	r3, [r4, r3]
    bad4:	4798      	blx	r3
    bad6:	230c      	movs	r3, #12
    bad8:	18fb      	adds	r3, r7, r3
    bada:	1dfa      	adds	r2, r7, #7
    badc:	7812      	ldrb	r2, [r2, #0]
    bade:	701a      	strb	r2, [r3, #0]
    bae0:	1d3b      	adds	r3, r7, #4
    bae2:	881b      	ldrh	r3, [r3, #0]
    bae4:	2b08      	cmp	r3, #8
    bae6:	d804      	bhi.n	baf2 <udd_ep_alloc+0x4a>
    bae8:	230c      	movs	r3, #12
    baea:	18fb      	adds	r3, r7, r3
    baec:	2200      	movs	r2, #0
    baee:	705a      	strb	r2, [r3, #1]
    baf0:	e045      	b.n	bb7e <udd_ep_alloc+0xd6>
    baf2:	1d3b      	adds	r3, r7, #4
    baf4:	881b      	ldrh	r3, [r3, #0]
    baf6:	2b10      	cmp	r3, #16
    baf8:	d804      	bhi.n	bb04 <udd_ep_alloc+0x5c>
    bafa:	230c      	movs	r3, #12
    bafc:	18fb      	adds	r3, r7, r3
    bafe:	2201      	movs	r2, #1
    bb00:	705a      	strb	r2, [r3, #1]
    bb02:	e03c      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb04:	1d3b      	adds	r3, r7, #4
    bb06:	881b      	ldrh	r3, [r3, #0]
    bb08:	2b20      	cmp	r3, #32
    bb0a:	d804      	bhi.n	bb16 <udd_ep_alloc+0x6e>
    bb0c:	230c      	movs	r3, #12
    bb0e:	18fb      	adds	r3, r7, r3
    bb10:	2202      	movs	r2, #2
    bb12:	705a      	strb	r2, [r3, #1]
    bb14:	e033      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb16:	1d3b      	adds	r3, r7, #4
    bb18:	881b      	ldrh	r3, [r3, #0]
    bb1a:	2b40      	cmp	r3, #64	; 0x40
    bb1c:	d804      	bhi.n	bb28 <udd_ep_alloc+0x80>
    bb1e:	230c      	movs	r3, #12
    bb20:	18fb      	adds	r3, r7, r3
    bb22:	2203      	movs	r2, #3
    bb24:	705a      	strb	r2, [r3, #1]
    bb26:	e02a      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb28:	1d3b      	adds	r3, r7, #4
    bb2a:	881b      	ldrh	r3, [r3, #0]
    bb2c:	2b80      	cmp	r3, #128	; 0x80
    bb2e:	d804      	bhi.n	bb3a <udd_ep_alloc+0x92>
    bb30:	230c      	movs	r3, #12
    bb32:	18fb      	adds	r3, r7, r3
    bb34:	2204      	movs	r2, #4
    bb36:	705a      	strb	r2, [r3, #1]
    bb38:	e021      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb3a:	1d3b      	adds	r3, r7, #4
    bb3c:	881a      	ldrh	r2, [r3, #0]
    bb3e:	2380      	movs	r3, #128	; 0x80
    bb40:	005b      	lsls	r3, r3, #1
    bb42:	429a      	cmp	r2, r3
    bb44:	d804      	bhi.n	bb50 <udd_ep_alloc+0xa8>
    bb46:	230c      	movs	r3, #12
    bb48:	18fb      	adds	r3, r7, r3
    bb4a:	2205      	movs	r2, #5
    bb4c:	705a      	strb	r2, [r3, #1]
    bb4e:	e016      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb50:	1d3b      	adds	r3, r7, #4
    bb52:	881a      	ldrh	r2, [r3, #0]
    bb54:	2380      	movs	r3, #128	; 0x80
    bb56:	009b      	lsls	r3, r3, #2
    bb58:	429a      	cmp	r2, r3
    bb5a:	d804      	bhi.n	bb66 <udd_ep_alloc+0xbe>
    bb5c:	230c      	movs	r3, #12
    bb5e:	18fb      	adds	r3, r7, r3
    bb60:	2206      	movs	r2, #6
    bb62:	705a      	strb	r2, [r3, #1]
    bb64:	e00b      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb66:	1d3b      	adds	r3, r7, #4
    bb68:	881b      	ldrh	r3, [r3, #0]
    bb6a:	4a3b      	ldr	r2, [pc, #236]	; (bc58 <udd_ep_alloc+0x1b0>)
    bb6c:	4293      	cmp	r3, r2
    bb6e:	d804      	bhi.n	bb7a <udd_ep_alloc+0xd2>
    bb70:	230c      	movs	r3, #12
    bb72:	18fb      	adds	r3, r7, r3
    bb74:	2207      	movs	r2, #7
    bb76:	705a      	strb	r2, [r3, #1]
    bb78:	e001      	b.n	bb7e <udd_ep_alloc+0xd6>
    bb7a:	2300      	movs	r3, #0
    bb7c:	e063      	b.n	bc46 <udd_ep_alloc+0x19e>
    bb7e:	1dfb      	adds	r3, r7, #7
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	0018      	movs	r0, r3
    bb84:	4b35      	ldr	r3, [pc, #212]	; (bc5c <udd_ep_alloc+0x1b4>)
    bb86:	447b      	add	r3, pc
    bb88:	4798      	blx	r3
    bb8a:	0003      	movs	r3, r0
    bb8c:	617b      	str	r3, [r7, #20]
    bb8e:	697b      	ldr	r3, [r7, #20]
    bb90:	1d3a      	adds	r2, r7, #4
    bb92:	8812      	ldrh	r2, [r2, #0]
    bb94:	821a      	strh	r2, [r3, #16]
    bb96:	1dbb      	adds	r3, r7, #6
    bb98:	1dba      	adds	r2, r7, #6
    bb9a:	7812      	ldrb	r2, [r2, #0]
    bb9c:	2103      	movs	r1, #3
    bb9e:	400a      	ands	r2, r1
    bba0:	701a      	strb	r2, [r3, #0]
    bba2:	1dbb      	adds	r3, r7, #6
    bba4:	781b      	ldrb	r3, [r3, #0]
    bba6:	2b01      	cmp	r3, #1
    bba8:	d104      	bne.n	bbb4 <udd_ep_alloc+0x10c>
    bbaa:	230c      	movs	r3, #12
    bbac:	18fb      	adds	r3, r7, r3
    bbae:	2202      	movs	r2, #2
    bbb0:	70da      	strb	r2, [r3, #3]
    bbb2:	e013      	b.n	bbdc <udd_ep_alloc+0x134>
    bbb4:	1dbb      	adds	r3, r7, #6
    bbb6:	781b      	ldrb	r3, [r3, #0]
    bbb8:	2b02      	cmp	r3, #2
    bbba:	d104      	bne.n	bbc6 <udd_ep_alloc+0x11e>
    bbbc:	230c      	movs	r3, #12
    bbbe:	18fb      	adds	r3, r7, r3
    bbc0:	2203      	movs	r2, #3
    bbc2:	70da      	strb	r2, [r3, #3]
    bbc4:	e00a      	b.n	bbdc <udd_ep_alloc+0x134>
    bbc6:	1dbb      	adds	r3, r7, #6
    bbc8:	781b      	ldrb	r3, [r3, #0]
    bbca:	2b03      	cmp	r3, #3
    bbcc:	d104      	bne.n	bbd8 <udd_ep_alloc+0x130>
    bbce:	230c      	movs	r3, #12
    bbd0:	18fb      	adds	r3, r7, r3
    bbd2:	2204      	movs	r2, #4
    bbd4:	70da      	strb	r2, [r3, #3]
    bbd6:	e001      	b.n	bbdc <udd_ep_alloc+0x134>
    bbd8:	2300      	movs	r3, #0
    bbda:	e034      	b.n	bc46 <udd_ep_alloc+0x19e>
    bbdc:	2313      	movs	r3, #19
    bbde:	18fb      	adds	r3, r7, r3
    bbe0:	1dfa      	adds	r2, r7, #7
    bbe2:	7812      	ldrb	r2, [r2, #0]
    bbe4:	210f      	movs	r1, #15
    bbe6:	400a      	ands	r2, r1
    bbe8:	701a      	strb	r2, [r3, #0]
    bbea:	230c      	movs	r3, #12
    bbec:	18fa      	adds	r2, r7, r3
    bbee:	4b1c      	ldr	r3, [pc, #112]	; (bc60 <udd_ep_alloc+0x1b8>)
    bbf0:	58e3      	ldr	r3, [r4, r3]
    bbf2:	0011      	movs	r1, r2
    bbf4:	0018      	movs	r0, r3
    bbf6:	4b1b      	ldr	r3, [pc, #108]	; (bc64 <udd_ep_alloc+0x1bc>)
    bbf8:	58e3      	ldr	r3, [r4, r3]
    bbfa:	4798      	blx	r3
    bbfc:	1e03      	subs	r3, r0, #0
    bbfe:	d001      	beq.n	bc04 <udd_ep_alloc+0x15c>
    bc00:	2300      	movs	r3, #0
    bc02:	e020      	b.n	bc46 <udd_ep_alloc+0x19e>
    bc04:	4b18      	ldr	r3, [pc, #96]	; (bc68 <udd_ep_alloc+0x1c0>)
    bc06:	447b      	add	r3, pc
    bc08:	001a      	movs	r2, r3
    bc0a:	2313      	movs	r3, #19
    bc0c:	18fb      	adds	r3, r7, r3
    bc0e:	7819      	ldrb	r1, [r3, #0]
    bc10:	4b13      	ldr	r3, [pc, #76]	; (bc60 <udd_ep_alloc+0x1b8>)
    bc12:	58e3      	ldr	r3, [r4, r3]
    bc14:	0018      	movs	r0, r3
    bc16:	0013      	movs	r3, r2
    bc18:	2200      	movs	r2, #0
    bc1a:	4d14      	ldr	r5, [pc, #80]	; (bc6c <udd_ep_alloc+0x1c4>)
    bc1c:	5965      	ldr	r5, [r4, r5]
    bc1e:	47a8      	blx	r5
    bc20:	1dfb      	adds	r3, r7, #7
    bc22:	7819      	ldrb	r1, [r3, #0]
    bc24:	4b0e      	ldr	r3, [pc, #56]	; (bc60 <udd_ep_alloc+0x1b8>)
    bc26:	58e3      	ldr	r3, [r4, r3]
    bc28:	2200      	movs	r2, #0
    bc2a:	0018      	movs	r0, r3
    bc2c:	4b10      	ldr	r3, [pc, #64]	; (bc70 <udd_ep_alloc+0x1c8>)
    bc2e:	58e3      	ldr	r3, [r4, r3]
    bc30:	4798      	blx	r3
    bc32:	1dfb      	adds	r3, r7, #7
    bc34:	7819      	ldrb	r1, [r3, #0]
    bc36:	4b0a      	ldr	r3, [pc, #40]	; (bc60 <udd_ep_alloc+0x1b8>)
    bc38:	58e3      	ldr	r3, [r4, r3]
    bc3a:	2201      	movs	r2, #1
    bc3c:	0018      	movs	r0, r3
    bc3e:	4b0c      	ldr	r3, [pc, #48]	; (bc70 <udd_ep_alloc+0x1c8>)
    bc40:	58e3      	ldr	r3, [r4, r3]
    bc42:	4798      	blx	r3
    bc44:	2301      	movs	r3, #1
    bc46:	0018      	movs	r0, r3
    bc48:	46bd      	mov	sp, r7
    bc4a:	b006      	add	sp, #24
    bc4c:	bdb0      	pop	{r4, r5, r7, pc}
    bc4e:	46c0      	nop			; (mov r8, r8)
    bc50:	00006318 	.word	0x00006318
    bc54:	00000104 	.word	0x00000104
    bc58:	000003ff 	.word	0x000003ff
    bc5c:	fffff95f 	.word	0xfffff95f
    bc60:	00000078 	.word	0x00000078
    bc64:	00000074 	.word	0x00000074
    bc68:	fffffcd7 	.word	0xfffffcd7
    bc6c:	00000154 	.word	0x00000154
    bc70:	000002b0 	.word	0x000002b0

0000bc74 <udd_ep_is_halted>:
    bc74:	b580      	push	{r7, lr}
    bc76:	b082      	sub	sp, #8
    bc78:	af00      	add	r7, sp, #0
    bc7a:	0002      	movs	r2, r0
    bc7c:	1dfb      	adds	r3, r7, #7
    bc7e:	701a      	strb	r2, [r3, #0]
    bc80:	4b07      	ldr	r3, [pc, #28]	; (bca0 <udd_ep_is_halted+0x2c>)
    bc82:	447b      	add	r3, pc
    bc84:	1dfa      	adds	r2, r7, #7
    bc86:	7811      	ldrb	r1, [r2, #0]
    bc88:	4a06      	ldr	r2, [pc, #24]	; (bca4 <udd_ep_is_halted+0x30>)
    bc8a:	589a      	ldr	r2, [r3, r2]
    bc8c:	0010      	movs	r0, r2
    bc8e:	4a06      	ldr	r2, [pc, #24]	; (bca8 <udd_ep_is_halted+0x34>)
    bc90:	589b      	ldr	r3, [r3, r2]
    bc92:	4798      	blx	r3
    bc94:	0003      	movs	r3, r0
    bc96:	0018      	movs	r0, r3
    bc98:	46bd      	mov	sp, r7
    bc9a:	b002      	add	sp, #8
    bc9c:	bd80      	pop	{r7, pc}
    bc9e:	46c0      	nop			; (mov r8, r8)
    bca0:	0000615e 	.word	0x0000615e
    bca4:	00000078 	.word	0x00000078
    bca8:	00000138 	.word	0x00000138

0000bcac <udd_ep_set_halt>:
    bcac:	b590      	push	{r4, r7, lr}
    bcae:	b085      	sub	sp, #20
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	0002      	movs	r2, r0
    bcb4:	1dfb      	adds	r3, r7, #7
    bcb6:	701a      	strb	r2, [r3, #0]
    bcb8:	4c11      	ldr	r4, [pc, #68]	; (bd00 <udd_ep_set_halt+0x54>)
    bcba:	447c      	add	r4, pc
    bcbc:	230f      	movs	r3, #15
    bcbe:	18fb      	adds	r3, r7, r3
    bcc0:	1dfa      	adds	r2, r7, #7
    bcc2:	7812      	ldrb	r2, [r2, #0]
    bcc4:	210f      	movs	r1, #15
    bcc6:	400a      	ands	r2, r1
    bcc8:	701a      	strb	r2, [r3, #0]
    bcca:	230f      	movs	r3, #15
    bccc:	18fb      	adds	r3, r7, r3
    bcce:	781b      	ldrb	r3, [r3, #0]
    bcd0:	2b03      	cmp	r3, #3
    bcd2:	d901      	bls.n	bcd8 <udd_ep_set_halt+0x2c>
    bcd4:	2300      	movs	r3, #0
    bcd6:	e00f      	b.n	bcf8 <udd_ep_set_halt+0x4c>
    bcd8:	1dfb      	adds	r3, r7, #7
    bcda:	781a      	ldrb	r2, [r3, #0]
    bcdc:	4b09      	ldr	r3, [pc, #36]	; (bd04 <udd_ep_set_halt+0x58>)
    bcde:	58e3      	ldr	r3, [r4, r3]
    bce0:	0011      	movs	r1, r2
    bce2:	0018      	movs	r0, r3
    bce4:	4b08      	ldr	r3, [pc, #32]	; (bd08 <udd_ep_set_halt+0x5c>)
    bce6:	58e3      	ldr	r3, [r4, r3]
    bce8:	4798      	blx	r3
    bcea:	1dfb      	adds	r3, r7, #7
    bcec:	781b      	ldrb	r3, [r3, #0]
    bcee:	0018      	movs	r0, r3
    bcf0:	4b06      	ldr	r3, [pc, #24]	; (bd0c <udd_ep_set_halt+0x60>)
    bcf2:	58e3      	ldr	r3, [r4, r3]
    bcf4:	4798      	blx	r3
    bcf6:	2301      	movs	r3, #1
    bcf8:	0018      	movs	r0, r3
    bcfa:	46bd      	mov	sp, r7
    bcfc:	b005      	add	sp, #20
    bcfe:	bd90      	pop	{r4, r7, pc}
    bd00:	00006126 	.word	0x00006126
    bd04:	00000078 	.word	0x00000078
    bd08:	00000274 	.word	0x00000274
    bd0c:	000001b8 	.word	0x000001b8

0000bd10 <udd_ep_clear_halt>:
    bd10:	b590      	push	{r4, r7, lr}
    bd12:	b085      	sub	sp, #20
    bd14:	af00      	add	r7, sp, #0
    bd16:	0002      	movs	r2, r0
    bd18:	1dfb      	adds	r3, r7, #7
    bd1a:	701a      	strb	r2, [r3, #0]
    bd1c:	4c1a      	ldr	r4, [pc, #104]	; (bd88 <udd_ep_clear_halt+0x78>)
    bd1e:	447c      	add	r4, pc
    bd20:	230f      	movs	r3, #15
    bd22:	18fb      	adds	r3, r7, r3
    bd24:	1dfa      	adds	r2, r7, #7
    bd26:	7812      	ldrb	r2, [r2, #0]
    bd28:	210f      	movs	r1, #15
    bd2a:	400a      	ands	r2, r1
    bd2c:	701a      	strb	r2, [r3, #0]
    bd2e:	230f      	movs	r3, #15
    bd30:	18fb      	adds	r3, r7, r3
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	2b03      	cmp	r3, #3
    bd36:	d901      	bls.n	bd3c <udd_ep_clear_halt+0x2c>
    bd38:	2300      	movs	r3, #0
    bd3a:	e020      	b.n	bd7e <udd_ep_clear_halt+0x6e>
    bd3c:	1dfb      	adds	r3, r7, #7
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	0018      	movs	r0, r3
    bd42:	4b12      	ldr	r3, [pc, #72]	; (bd8c <udd_ep_clear_halt+0x7c>)
    bd44:	447b      	add	r3, pc
    bd46:	4798      	blx	r3
    bd48:	0003      	movs	r3, r0
    bd4a:	60bb      	str	r3, [r7, #8]
    bd4c:	1dfb      	adds	r3, r7, #7
    bd4e:	781a      	ldrb	r2, [r3, #0]
    bd50:	4b0f      	ldr	r3, [pc, #60]	; (bd90 <udd_ep_clear_halt+0x80>)
    bd52:	58e3      	ldr	r3, [r4, r3]
    bd54:	0011      	movs	r1, r2
    bd56:	0018      	movs	r0, r3
    bd58:	4b0e      	ldr	r3, [pc, #56]	; (bd94 <udd_ep_clear_halt+0x84>)
    bd5a:	58e3      	ldr	r3, [r4, r3]
    bd5c:	4798      	blx	r3
    bd5e:	68bb      	ldr	r3, [r7, #8]
    bd60:	7c9b      	ldrb	r3, [r3, #18]
    bd62:	2201      	movs	r2, #1
    bd64:	4013      	ands	r3, r2
    bd66:	b2db      	uxtb	r3, r3
    bd68:	2b00      	cmp	r3, #0
    bd6a:	d007      	beq.n	bd7c <udd_ep_clear_halt+0x6c>
    bd6c:	68bb      	ldr	r3, [r7, #8]
    bd6e:	7c9a      	ldrb	r2, [r3, #18]
    bd70:	2101      	movs	r1, #1
    bd72:	438a      	bics	r2, r1
    bd74:	749a      	strb	r2, [r3, #18]
    bd76:	68bb      	ldr	r3, [r7, #8]
    bd78:	681b      	ldr	r3, [r3, #0]
    bd7a:	4798      	blx	r3
    bd7c:	2301      	movs	r3, #1
    bd7e:	0018      	movs	r0, r3
    bd80:	46bd      	mov	sp, r7
    bd82:	b005      	add	sp, #20
    bd84:	bd90      	pop	{r4, r7, pc}
    bd86:	46c0      	nop			; (mov r8, r8)
    bd88:	000060c2 	.word	0x000060c2
    bd8c:	fffff7a1 	.word	0xfffff7a1
    bd90:	00000078 	.word	0x00000078
    bd94:	00000228 	.word	0x00000228

0000bd98 <udd_ctrl_stall_data>:
    bd98:	b5b0      	push	{r4, r5, r7, lr}
    bd9a:	af00      	add	r7, sp, #0
    bd9c:	4c0b      	ldr	r4, [pc, #44]	; (bdcc <udd_ctrl_stall_data+0x34>)
    bd9e:	447c      	add	r4, pc
    bda0:	4b0b      	ldr	r3, [pc, #44]	; (bdd0 <udd_ctrl_stall_data+0x38>)
    bda2:	447b      	add	r3, pc
    bda4:	2205      	movs	r2, #5
    bda6:	701a      	strb	r2, [r3, #0]
    bda8:	4b0a      	ldr	r3, [pc, #40]	; (bdd4 <udd_ctrl_stall_data+0x3c>)
    bdaa:	58e3      	ldr	r3, [r4, r3]
    bdac:	2180      	movs	r1, #128	; 0x80
    bdae:	0018      	movs	r0, r3
    bdb0:	4b09      	ldr	r3, [pc, #36]	; (bdd8 <udd_ctrl_stall_data+0x40>)
    bdb2:	58e3      	ldr	r3, [r4, r3]
    bdb4:	4798      	blx	r3
    bdb6:	4b07      	ldr	r3, [pc, #28]	; (bdd4 <udd_ctrl_stall_data+0x3c>)
    bdb8:	58e3      	ldr	r3, [r4, r3]
    bdba:	2100      	movs	r1, #0
    bdbc:	0018      	movs	r0, r3
    bdbe:	4b07      	ldr	r3, [pc, #28]	; (bddc <udd_ctrl_stall_data+0x44>)
    bdc0:	58e3      	ldr	r3, [r4, r3]
    bdc2:	4798      	blx	r3
    bdc4:	46c0      	nop			; (mov r8, r8)
    bdc6:	46bd      	mov	sp, r7
    bdc8:	bdb0      	pop	{r4, r5, r7, pc}
    bdca:	46c0      	nop			; (mov r8, r8)
    bdcc:	00006042 	.word	0x00006042
    bdd0:	1fff47fc 	.word	0x1fff47fc
    bdd4:	00000078 	.word	0x00000078
    bdd8:	00000274 	.word	0x00000274
    bddc:	00000228 	.word	0x00000228

0000bde0 <udd_ep_run>:
    bde0:	b5b0      	push	{r4, r5, r7, lr}
    bde2:	b088      	sub	sp, #32
    bde4:	af00      	add	r7, sp, #0
    bde6:	60ba      	str	r2, [r7, #8]
    bde8:	607b      	str	r3, [r7, #4]
    bdea:	230f      	movs	r3, #15
    bdec:	18fb      	adds	r3, r7, r3
    bdee:	1c02      	adds	r2, r0, #0
    bdf0:	701a      	strb	r2, [r3, #0]
    bdf2:	230e      	movs	r3, #14
    bdf4:	18fb      	adds	r3, r7, r3
    bdf6:	1c0a      	adds	r2, r1, #0
    bdf8:	701a      	strb	r2, [r3, #0]
    bdfa:	4cb3      	ldr	r4, [pc, #716]	; (c0c8 <udd_ep_run+0x2e8>)
    bdfc:	447c      	add	r4, pc
    bdfe:	231d      	movs	r3, #29
    be00:	18fb      	adds	r3, r7, r3
    be02:	220f      	movs	r2, #15
    be04:	18ba      	adds	r2, r7, r2
    be06:	7812      	ldrb	r2, [r2, #0]
    be08:	210f      	movs	r1, #15
    be0a:	400a      	ands	r2, r1
    be0c:	701a      	strb	r2, [r3, #0]
    be0e:	231d      	movs	r3, #29
    be10:	18fb      	adds	r3, r7, r3
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	2b03      	cmp	r3, #3
    be16:	d808      	bhi.n	be2a <udd_ep_run+0x4a>
    be18:	230f      	movs	r3, #15
    be1a:	18fb      	adds	r3, r7, r3
    be1c:	781b      	ldrb	r3, [r3, #0]
    be1e:	0018      	movs	r0, r3
    be20:	4baa      	ldr	r3, [pc, #680]	; (c0cc <udd_ep_run+0x2ec>)
    be22:	58e3      	ldr	r3, [r4, r3]
    be24:	4798      	blx	r3
    be26:	1e03      	subs	r3, r0, #0
    be28:	d001      	beq.n	be2e <udd_ep_run+0x4e>
    be2a:	2300      	movs	r3, #0
    be2c:	e148      	b.n	c0c0 <udd_ep_run+0x2e0>
    be2e:	230f      	movs	r3, #15
    be30:	18fb      	adds	r3, r7, r3
    be32:	781b      	ldrb	r3, [r3, #0]
    be34:	0018      	movs	r0, r3
    be36:	4ba6      	ldr	r3, [pc, #664]	; (c0d0 <udd_ep_run+0x2f0>)
    be38:	447b      	add	r3, pc
    be3a:	4798      	blx	r3
    be3c:	0003      	movs	r3, r0
    be3e:	61bb      	str	r3, [r7, #24]
    be40:	4ba4      	ldr	r3, [pc, #656]	; (c0d4 <udd_ep_run+0x2f4>)
    be42:	447b      	add	r3, pc
    be44:	4798      	blx	r3
    be46:	0003      	movs	r3, r0
    be48:	617b      	str	r3, [r7, #20]
    be4a:	69bb      	ldr	r3, [r7, #24]
    be4c:	7c9b      	ldrb	r3, [r3, #18]
    be4e:	2201      	movs	r2, #1
    be50:	4013      	ands	r3, r2
    be52:	b2db      	uxtb	r3, r3
    be54:	2b00      	cmp	r3, #0
    be56:	d006      	beq.n	be66 <udd_ep_run+0x86>
    be58:	697b      	ldr	r3, [r7, #20]
    be5a:	0018      	movs	r0, r3
    be5c:	4b9e      	ldr	r3, [pc, #632]	; (c0d8 <udd_ep_run+0x2f8>)
    be5e:	447b      	add	r3, pc
    be60:	4798      	blx	r3
    be62:	2300      	movs	r3, #0
    be64:	e12c      	b.n	c0c0 <udd_ep_run+0x2e0>
    be66:	69bb      	ldr	r3, [r7, #24]
    be68:	7c9a      	ldrb	r2, [r3, #18]
    be6a:	2101      	movs	r1, #1
    be6c:	430a      	orrs	r2, r1
    be6e:	749a      	strb	r2, [r3, #18]
    be70:	697b      	ldr	r3, [r7, #20]
    be72:	0018      	movs	r0, r3
    be74:	4b99      	ldr	r3, [pc, #612]	; (c0dc <udd_ep_run+0x2fc>)
    be76:	447b      	add	r3, pc
    be78:	4798      	blx	r3
    be7a:	69bb      	ldr	r3, [r7, #24]
    be7c:	68ba      	ldr	r2, [r7, #8]
    be7e:	605a      	str	r2, [r3, #4]
    be80:	69bb      	ldr	r3, [r7, #24]
    be82:	687a      	ldr	r2, [r7, #4]
    be84:	609a      	str	r2, [r3, #8]
    be86:	69bb      	ldr	r3, [r7, #24]
    be88:	2200      	movs	r2, #0
    be8a:	60da      	str	r2, [r3, #12]
    be8c:	69bb      	ldr	r3, [r7, #24]
    be8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    be90:	601a      	str	r2, [r3, #0]
    be92:	69bb      	ldr	r3, [r7, #24]
    be94:	220e      	movs	r2, #14
    be96:	18ba      	adds	r2, r7, r2
    be98:	7812      	ldrb	r2, [r2, #0]
    be9a:	2101      	movs	r1, #1
    be9c:	400a      	ands	r2, r1
    be9e:	1890      	adds	r0, r2, r2
    bea0:	7c9a      	ldrb	r2, [r3, #18]
    bea2:	2102      	movs	r1, #2
    bea4:	438a      	bics	r2, r1
    bea6:	1c11      	adds	r1, r2, #0
    bea8:	1c02      	adds	r2, r0, #0
    beaa:	430a      	orrs	r2, r1
    beac:	749a      	strb	r2, [r3, #18]
    beae:	69bb      	ldr	r3, [r7, #24]
    beb0:	7c9a      	ldrb	r2, [r3, #18]
    beb2:	2104      	movs	r1, #4
    beb4:	438a      	bics	r2, r1
    beb6:	749a      	strb	r2, [r3, #18]
    beb8:	230f      	movs	r3, #15
    beba:	18fb      	adds	r3, r7, r3
    bebc:	781b      	ldrb	r3, [r3, #0]
    bebe:	b25b      	sxtb	r3, r3
    bec0:	2b00      	cmp	r3, #0
    bec2:	db00      	blt.n	bec6 <udd_ep_run+0xe6>
    bec4:	e07e      	b.n	bfc4 <udd_ep_run+0x1e4>
    bec6:	69bb      	ldr	r3, [r7, #24]
    bec8:	689b      	ldr	r3, [r3, #8]
    beca:	2b00      	cmp	r3, #0
    becc:	d041      	beq.n	bf52 <udd_ep_run+0x172>
    bece:	69bb      	ldr	r3, [r7, #24]
    bed0:	689a      	ldr	r2, [r3, #8]
    bed2:	231e      	movs	r3, #30
    bed4:	18fb      	adds	r3, r7, r3
    bed6:	801a      	strh	r2, [r3, #0]
    bed8:	231e      	movs	r3, #30
    beda:	18fb      	adds	r3, r7, r3
    bedc:	881b      	ldrh	r3, [r3, #0]
    bede:	4a80      	ldr	r2, [pc, #512]	; (c0e0 <udd_ep_run+0x300>)
    bee0:	4293      	cmp	r3, r2
    bee2:	d90e      	bls.n	bf02 <udd_ep_run+0x122>
    bee4:	69bb      	ldr	r3, [r7, #24]
    bee6:	8a1b      	ldrh	r3, [r3, #16]
    bee8:	0019      	movs	r1, r3
    beea:	4a7d      	ldr	r2, [pc, #500]	; (c0e0 <udd_ep_run+0x300>)
    beec:	4b7d      	ldr	r3, [pc, #500]	; (c0e4 <udd_ep_run+0x304>)
    beee:	58e3      	ldr	r3, [r4, r3]
    bef0:	0010      	movs	r0, r2
    bef2:	4798      	blx	r3
    bef4:	000b      	movs	r3, r1
    bef6:	b29a      	uxth	r2, r3
    bef8:	231e      	movs	r3, #30
    befa:	18fb      	adds	r3, r7, r3
    befc:	4978      	ldr	r1, [pc, #480]	; (c0e0 <udd_ep_run+0x300>)
    befe:	1a8a      	subs	r2, r1, r2
    bf00:	801a      	strh	r2, [r3, #0]
    bf02:	69bb      	ldr	r3, [r7, #24]
    bf04:	7c9b      	ldrb	r3, [r3, #18]
    bf06:	2202      	movs	r2, #2
    bf08:	4013      	ands	r3, r2
    bf0a:	b2db      	uxtb	r3, r3
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d00e      	beq.n	bf2e <udd_ep_run+0x14e>
    bf10:	69bb      	ldr	r3, [r7, #24]
    bf12:	8a19      	ldrh	r1, [r3, #16]
    bf14:	231e      	movs	r3, #30
    bf16:	18fb      	adds	r3, r7, r3
    bf18:	881a      	ldrh	r2, [r3, #0]
    bf1a:	4b73      	ldr	r3, [pc, #460]	; (c0e8 <udd_ep_run+0x308>)
    bf1c:	58e3      	ldr	r3, [r4, r3]
    bf1e:	0010      	movs	r0, r2
    bf20:	4798      	blx	r3
    bf22:	000b      	movs	r3, r1
    bf24:	b29b      	uxth	r3, r3
    bf26:	2b00      	cmp	r3, #0
    bf28:	d101      	bne.n	bf2e <udd_ep_run+0x14e>
    bf2a:	2301      	movs	r3, #1
    bf2c:	e000      	b.n	bf30 <udd_ep_run+0x150>
    bf2e:	2300      	movs	r3, #0
    bf30:	b2db      	uxtb	r3, r3
    bf32:	1c1a      	adds	r2, r3, #0
    bf34:	2301      	movs	r3, #1
    bf36:	4013      	ands	r3, r2
    bf38:	b2da      	uxtb	r2, r3
    bf3a:	69bb      	ldr	r3, [r7, #24]
    bf3c:	2101      	movs	r1, #1
    bf3e:	400a      	ands	r2, r1
    bf40:	1890      	adds	r0, r2, r2
    bf42:	7c9a      	ldrb	r2, [r3, #18]
    bf44:	2102      	movs	r1, #2
    bf46:	438a      	bics	r2, r1
    bf48:	1c11      	adds	r1, r2, #0
    bf4a:	1c02      	adds	r2, r0, #0
    bf4c:	430a      	orrs	r2, r1
    bf4e:	749a      	strb	r2, [r3, #18]
    bf50:	e023      	b.n	bf9a <udd_ep_run+0x1ba>
    bf52:	69bb      	ldr	r3, [r7, #24]
    bf54:	7c9b      	ldrb	r3, [r3, #18]
    bf56:	2202      	movs	r2, #2
    bf58:	4013      	ands	r3, r2
    bf5a:	b2db      	uxtb	r3, r3
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d009      	beq.n	bf74 <udd_ep_run+0x194>
    bf60:	69bb      	ldr	r3, [r7, #24]
    bf62:	7c9a      	ldrb	r2, [r3, #18]
    bf64:	2102      	movs	r1, #2
    bf66:	438a      	bics	r2, r1
    bf68:	749a      	strb	r2, [r3, #18]
    bf6a:	231e      	movs	r3, #30
    bf6c:	18fb      	adds	r3, r7, r3
    bf6e:	2200      	movs	r2, #0
    bf70:	801a      	strh	r2, [r3, #0]
    bf72:	e012      	b.n	bf9a <udd_ep_run+0x1ba>
    bf74:	69bb      	ldr	r3, [r7, #24]
    bf76:	7c9a      	ldrb	r2, [r3, #18]
    bf78:	2101      	movs	r1, #1
    bf7a:	438a      	bics	r2, r1
    bf7c:	749a      	strb	r2, [r3, #18]
    bf7e:	69bb      	ldr	r3, [r7, #24]
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	2b00      	cmp	r3, #0
    bf84:	d007      	beq.n	bf96 <udd_ep_run+0x1b6>
    bf86:	69bb      	ldr	r3, [r7, #24]
    bf88:	681b      	ldr	r3, [r3, #0]
    bf8a:	220f      	movs	r2, #15
    bf8c:	18ba      	adds	r2, r7, r2
    bf8e:	7812      	ldrb	r2, [r2, #0]
    bf90:	2100      	movs	r1, #0
    bf92:	2000      	movs	r0, #0
    bf94:	4798      	blx	r3
    bf96:	2301      	movs	r3, #1
    bf98:	e092      	b.n	c0c0 <udd_ep_run+0x2e0>
    bf9a:	69bb      	ldr	r3, [r7, #24]
    bf9c:	685a      	ldr	r2, [r3, #4]
    bf9e:	231e      	movs	r3, #30
    bfa0:	18fb      	adds	r3, r7, r3
    bfa2:	8818      	ldrh	r0, [r3, #0]
    bfa4:	231d      	movs	r3, #29
    bfa6:	18fb      	adds	r3, r7, r3
    bfa8:	7819      	ldrb	r1, [r3, #0]
    bfaa:	4b50      	ldr	r3, [pc, #320]	; (c0ec <udd_ep_run+0x30c>)
    bfac:	58e3      	ldr	r3, [r4, r3]
    bfae:	001d      	movs	r5, r3
    bfb0:	0003      	movs	r3, r0
    bfb2:	0028      	movs	r0, r5
    bfb4:	4d4e      	ldr	r5, [pc, #312]	; (c0f0 <udd_ep_run+0x310>)
    bfb6:	5964      	ldr	r4, [r4, r5]
    bfb8:	47a0      	blx	r4
    bfba:	0003      	movs	r3, r0
    bfbc:	425a      	negs	r2, r3
    bfbe:	4153      	adcs	r3, r2
    bfc0:	b2db      	uxtb	r3, r3
    bfc2:	e07d      	b.n	c0c0 <udd_ep_run+0x2e0>
    bfc4:	69bb      	ldr	r3, [r7, #24]
    bfc6:	689b      	ldr	r3, [r3, #8]
    bfc8:	2b00      	cmp	r3, #0
    bfca:	d067      	beq.n	c09c <udd_ep_run+0x2bc>
    bfcc:	69bb      	ldr	r3, [r7, #24]
    bfce:	689a      	ldr	r2, [r3, #8]
    bfd0:	231e      	movs	r3, #30
    bfd2:	18fb      	adds	r3, r7, r3
    bfd4:	801a      	strh	r2, [r3, #0]
    bfd6:	231e      	movs	r3, #30
    bfd8:	18fb      	adds	r3, r7, r3
    bfda:	881b      	ldrh	r3, [r3, #0]
    bfdc:	4a40      	ldr	r2, [pc, #256]	; (c0e0 <udd_ep_run+0x300>)
    bfde:	4293      	cmp	r3, r2
    bfe0:	d90f      	bls.n	c002 <udd_ep_run+0x222>
    bfe2:	69bb      	ldr	r3, [r7, #24]
    bfe4:	8a1b      	ldrh	r3, [r3, #16]
    bfe6:	0019      	movs	r1, r3
    bfe8:	4a3d      	ldr	r2, [pc, #244]	; (c0e0 <udd_ep_run+0x300>)
    bfea:	4b3e      	ldr	r3, [pc, #248]	; (c0e4 <udd_ep_run+0x304>)
    bfec:	58e3      	ldr	r3, [r4, r3]
    bfee:	0010      	movs	r0, r2
    bff0:	4798      	blx	r3
    bff2:	000b      	movs	r3, r1
    bff4:	b29a      	uxth	r2, r3
    bff6:	231e      	movs	r3, #30
    bff8:	18fb      	adds	r3, r7, r3
    bffa:	4939      	ldr	r1, [pc, #228]	; (c0e0 <udd_ep_run+0x300>)
    bffc:	1a8a      	subs	r2, r1, r2
    bffe:	801a      	strh	r2, [r3, #0]
    c000:	e011      	b.n	c026 <udd_ep_run+0x246>
    c002:	69bb      	ldr	r3, [r7, #24]
    c004:	8a19      	ldrh	r1, [r3, #16]
    c006:	231e      	movs	r3, #30
    c008:	18fb      	adds	r3, r7, r3
    c00a:	881a      	ldrh	r2, [r3, #0]
    c00c:	4b36      	ldr	r3, [pc, #216]	; (c0e8 <udd_ep_run+0x308>)
    c00e:	58e3      	ldr	r3, [r4, r3]
    c010:	0010      	movs	r0, r2
    c012:	4798      	blx	r3
    c014:	000b      	movs	r3, r1
    c016:	b29a      	uxth	r2, r3
    c018:	231e      	movs	r3, #30
    c01a:	18fb      	adds	r3, r7, r3
    c01c:	211e      	movs	r1, #30
    c01e:	1879      	adds	r1, r7, r1
    c020:	8809      	ldrh	r1, [r1, #0]
    c022:	1a8a      	subs	r2, r1, r2
    c024:	801a      	strh	r2, [r3, #0]
    c026:	69bb      	ldr	r3, [r7, #24]
    c028:	8a1b      	ldrh	r3, [r3, #16]
    c02a:	221e      	movs	r2, #30
    c02c:	18ba      	adds	r2, r7, r2
    c02e:	8812      	ldrh	r2, [r2, #0]
    c030:	429a      	cmp	r2, r3
    c032:	d21e      	bcs.n	c072 <udd_ep_run+0x292>
    c034:	69bb      	ldr	r3, [r7, #24]
    c036:	7c9a      	ldrb	r2, [r3, #18]
    c038:	2104      	movs	r1, #4
    c03a:	430a      	orrs	r2, r1
    c03c:	749a      	strb	r2, [r3, #18]
    c03e:	231d      	movs	r3, #29
    c040:	18fb      	adds	r3, r7, r3
    c042:	781b      	ldrb	r3, [r3, #0]
    c044:	3b01      	subs	r3, #1
    c046:	019b      	lsls	r3, r3, #6
    c048:	4a2a      	ldr	r2, [pc, #168]	; (c0f4 <udd_ep_run+0x314>)
    c04a:	58a2      	ldr	r2, [r4, r2]
    c04c:	189a      	adds	r2, r3, r2
    c04e:	69bb      	ldr	r3, [r7, #24]
    c050:	8a1b      	ldrh	r3, [r3, #16]
    c052:	001d      	movs	r5, r3
    c054:	231d      	movs	r3, #29
    c056:	18fb      	adds	r3, r7, r3
    c058:	7819      	ldrb	r1, [r3, #0]
    c05a:	4b24      	ldr	r3, [pc, #144]	; (c0ec <udd_ep_run+0x30c>)
    c05c:	58e3      	ldr	r3, [r4, r3]
    c05e:	0018      	movs	r0, r3
    c060:	002b      	movs	r3, r5
    c062:	4d25      	ldr	r5, [pc, #148]	; (c0f8 <udd_ep_run+0x318>)
    c064:	5964      	ldr	r4, [r4, r5]
    c066:	47a0      	blx	r4
    c068:	0003      	movs	r3, r0
    c06a:	425a      	negs	r2, r3
    c06c:	4153      	adcs	r3, r2
    c06e:	b2db      	uxtb	r3, r3
    c070:	e026      	b.n	c0c0 <udd_ep_run+0x2e0>
    c072:	69bb      	ldr	r3, [r7, #24]
    c074:	685a      	ldr	r2, [r3, #4]
    c076:	231e      	movs	r3, #30
    c078:	18fb      	adds	r3, r7, r3
    c07a:	8818      	ldrh	r0, [r3, #0]
    c07c:	231d      	movs	r3, #29
    c07e:	18fb      	adds	r3, r7, r3
    c080:	7819      	ldrb	r1, [r3, #0]
    c082:	4b1a      	ldr	r3, [pc, #104]	; (c0ec <udd_ep_run+0x30c>)
    c084:	58e3      	ldr	r3, [r4, r3]
    c086:	001d      	movs	r5, r3
    c088:	0003      	movs	r3, r0
    c08a:	0028      	movs	r0, r5
    c08c:	4d1a      	ldr	r5, [pc, #104]	; (c0f8 <udd_ep_run+0x318>)
    c08e:	5964      	ldr	r4, [r4, r5]
    c090:	47a0      	blx	r4
    c092:	0003      	movs	r3, r0
    c094:	425a      	negs	r2, r3
    c096:	4153      	adcs	r3, r2
    c098:	b2db      	uxtb	r3, r3
    c09a:	e011      	b.n	c0c0 <udd_ep_run+0x2e0>
    c09c:	69bb      	ldr	r3, [r7, #24]
    c09e:	7c9a      	ldrb	r2, [r3, #18]
    c0a0:	2101      	movs	r1, #1
    c0a2:	438a      	bics	r2, r1
    c0a4:	749a      	strb	r2, [r3, #18]
    c0a6:	69bb      	ldr	r3, [r7, #24]
    c0a8:	681b      	ldr	r3, [r3, #0]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d007      	beq.n	c0be <udd_ep_run+0x2de>
    c0ae:	69bb      	ldr	r3, [r7, #24]
    c0b0:	681b      	ldr	r3, [r3, #0]
    c0b2:	220f      	movs	r2, #15
    c0b4:	18ba      	adds	r2, r7, r2
    c0b6:	7812      	ldrb	r2, [r2, #0]
    c0b8:	2100      	movs	r1, #0
    c0ba:	2000      	movs	r0, #0
    c0bc:	4798      	blx	r3
    c0be:	2301      	movs	r3, #1
    c0c0:	0018      	movs	r0, r3
    c0c2:	46bd      	mov	sp, r7
    c0c4:	b008      	add	sp, #32
    c0c6:	bdb0      	pop	{r4, r5, r7, pc}
    c0c8:	00005fe4 	.word	0x00005fe4
    c0cc:	000001a8 	.word	0x000001a8
    c0d0:	fffff6ad 	.word	0xfffff6ad
    c0d4:	fffff393 	.word	0xfffff393
    c0d8:	fffff3cb 	.word	0xfffff3cb
    c0dc:	fffff3b3 	.word	0xfffff3b3
    c0e0:	00001fff 	.word	0x00001fff
    c0e4:	000002e8 	.word	0x000002e8
    c0e8:	00000270 	.word	0x00000270
    c0ec:	00000078 	.word	0x00000078
    c0f0:	00000300 	.word	0x00000300
    c0f4:	0000001c 	.word	0x0000001c
    c0f8:	0000014c 	.word	0x0000014c

0000c0fc <udd_set_address>:
    c0fc:	b580      	push	{r7, lr}
    c0fe:	b082      	sub	sp, #8
    c100:	af00      	add	r7, sp, #0
    c102:	0002      	movs	r2, r0
    c104:	1dfb      	adds	r3, r7, #7
    c106:	701a      	strb	r2, [r3, #0]
    c108:	4a06      	ldr	r2, [pc, #24]	; (c124 <udd_set_address+0x28>)
    c10a:	447a      	add	r2, pc
    c10c:	1dfb      	adds	r3, r7, #7
    c10e:	7819      	ldrb	r1, [r3, #0]
    c110:	4b05      	ldr	r3, [pc, #20]	; (c128 <udd_set_address+0x2c>)
    c112:	58d3      	ldr	r3, [r2, r3]
    c114:	0018      	movs	r0, r3
    c116:	4b05      	ldr	r3, [pc, #20]	; (c12c <udd_set_address+0x30>)
    c118:	447b      	add	r3, pc
    c11a:	4798      	blx	r3
    c11c:	46c0      	nop			; (mov r8, r8)
    c11e:	46bd      	mov	sp, r7
    c120:	b002      	add	sp, #8
    c122:	bd80      	pop	{r7, pc}
    c124:	00005cd6 	.word	0x00005cd6
    c128:	00000078 	.word	0x00000078
    c12c:	fffff18d 	.word	0xfffff18d

0000c130 <udd_getaddress>:
    c130:	b580      	push	{r7, lr}
    c132:	af00      	add	r7, sp, #0
    c134:	4a05      	ldr	r2, [pc, #20]	; (c14c <udd_getaddress+0x1c>)
    c136:	447a      	add	r2, pc
    c138:	4b05      	ldr	r3, [pc, #20]	; (c150 <udd_getaddress+0x20>)
    c13a:	58d3      	ldr	r3, [r2, r3]
    c13c:	0018      	movs	r0, r3
    c13e:	4b05      	ldr	r3, [pc, #20]	; (c154 <udd_getaddress+0x24>)
    c140:	447b      	add	r3, pc
    c142:	4798      	blx	r3
    c144:	0003      	movs	r3, r0
    c146:	0018      	movs	r0, r3
    c148:	46bd      	mov	sp, r7
    c14a:	bd80      	pop	{r7, pc}
    c14c:	00005caa 	.word	0x00005caa
    c150:	00000078 	.word	0x00000078
    c154:	fffff149 	.word	0xfffff149

0000c158 <udd_set_setup_payload>:
    c158:	b580      	push	{r7, lr}
    c15a:	b082      	sub	sp, #8
    c15c:	af00      	add	r7, sp, #0
    c15e:	6078      	str	r0, [r7, #4]
    c160:	000a      	movs	r2, r1
    c162:	1cbb      	adds	r3, r7, #2
    c164:	801a      	strh	r2, [r3, #0]
    c166:	4b07      	ldr	r3, [pc, #28]	; (c184 <udd_set_setup_payload+0x2c>)
    c168:	447b      	add	r3, pc
    c16a:	4a07      	ldr	r2, [pc, #28]	; (c188 <udd_set_setup_payload+0x30>)
    c16c:	589a      	ldr	r2, [r3, r2]
    c16e:	6879      	ldr	r1, [r7, #4]
    c170:	6091      	str	r1, [r2, #8]
    c172:	4a05      	ldr	r2, [pc, #20]	; (c188 <udd_set_setup_payload+0x30>)
    c174:	589b      	ldr	r3, [r3, r2]
    c176:	1cba      	adds	r2, r7, #2
    c178:	8812      	ldrh	r2, [r2, #0]
    c17a:	819a      	strh	r2, [r3, #12]
    c17c:	46c0      	nop			; (mov r8, r8)
    c17e:	46bd      	mov	sp, r7
    c180:	b002      	add	sp, #8
    c182:	bd80      	pop	{r7, pc}
    c184:	00005c78 	.word	0x00005c78
    c188:	000001e8 	.word	0x000001e8

0000c18c <udd_ctrl_fetch_ram>:
    c18c:	b580      	push	{r7, lr}
    c18e:	af00      	add	r7, sp, #0
    c190:	4b1f      	ldr	r3, [pc, #124]	; (c210 <udd_ctrl_fetch_ram+0x84>)
    c192:	447b      	add	r3, pc
    c194:	4a1f      	ldr	r2, [pc, #124]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c196:	589a      	ldr	r2, [r3, r2]
    c198:	7811      	ldrb	r1, [r2, #0]
    c19a:	4a1f      	ldr	r2, [pc, #124]	; (c218 <udd_ctrl_fetch_ram+0x8c>)
    c19c:	589a      	ldr	r2, [r3, r2]
    c19e:	7011      	strb	r1, [r2, #0]
    c1a0:	4a1c      	ldr	r2, [pc, #112]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1a2:	589a      	ldr	r2, [r3, r2]
    c1a4:	7851      	ldrb	r1, [r2, #1]
    c1a6:	4a1c      	ldr	r2, [pc, #112]	; (c218 <udd_ctrl_fetch_ram+0x8c>)
    c1a8:	589a      	ldr	r2, [r3, r2]
    c1aa:	7051      	strb	r1, [r2, #1]
    c1ac:	4a19      	ldr	r2, [pc, #100]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1ae:	589a      	ldr	r2, [r3, r2]
    c1b0:	78d2      	ldrb	r2, [r2, #3]
    c1b2:	b292      	uxth	r2, r2
    c1b4:	0212      	lsls	r2, r2, #8
    c1b6:	b291      	uxth	r1, r2
    c1b8:	4a16      	ldr	r2, [pc, #88]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1ba:	589a      	ldr	r2, [r3, r2]
    c1bc:	7892      	ldrb	r2, [r2, #2]
    c1be:	b292      	uxth	r2, r2
    c1c0:	188a      	adds	r2, r1, r2
    c1c2:	b291      	uxth	r1, r2
    c1c4:	4a14      	ldr	r2, [pc, #80]	; (c218 <udd_ctrl_fetch_ram+0x8c>)
    c1c6:	589a      	ldr	r2, [r3, r2]
    c1c8:	8051      	strh	r1, [r2, #2]
    c1ca:	4a12      	ldr	r2, [pc, #72]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1cc:	589a      	ldr	r2, [r3, r2]
    c1ce:	7952      	ldrb	r2, [r2, #5]
    c1d0:	b292      	uxth	r2, r2
    c1d2:	0212      	lsls	r2, r2, #8
    c1d4:	b291      	uxth	r1, r2
    c1d6:	4a0f      	ldr	r2, [pc, #60]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1d8:	589a      	ldr	r2, [r3, r2]
    c1da:	7912      	ldrb	r2, [r2, #4]
    c1dc:	b292      	uxth	r2, r2
    c1de:	188a      	adds	r2, r1, r2
    c1e0:	b291      	uxth	r1, r2
    c1e2:	4a0d      	ldr	r2, [pc, #52]	; (c218 <udd_ctrl_fetch_ram+0x8c>)
    c1e4:	589a      	ldr	r2, [r3, r2]
    c1e6:	8091      	strh	r1, [r2, #4]
    c1e8:	4a0a      	ldr	r2, [pc, #40]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1ea:	589a      	ldr	r2, [r3, r2]
    c1ec:	79d2      	ldrb	r2, [r2, #7]
    c1ee:	b292      	uxth	r2, r2
    c1f0:	0212      	lsls	r2, r2, #8
    c1f2:	b291      	uxth	r1, r2
    c1f4:	4a07      	ldr	r2, [pc, #28]	; (c214 <udd_ctrl_fetch_ram+0x88>)
    c1f6:	589a      	ldr	r2, [r3, r2]
    c1f8:	7992      	ldrb	r2, [r2, #6]
    c1fa:	b292      	uxth	r2, r2
    c1fc:	188a      	adds	r2, r1, r2
    c1fe:	b291      	uxth	r1, r2
    c200:	4a05      	ldr	r2, [pc, #20]	; (c218 <udd_ctrl_fetch_ram+0x8c>)
    c202:	589b      	ldr	r3, [r3, r2]
    c204:	1c0a      	adds	r2, r1, #0
    c206:	80da      	strh	r2, [r3, #6]
    c208:	46c0      	nop			; (mov r8, r8)
    c20a:	46bd      	mov	sp, r7
    c20c:	bd80      	pop	{r7, pc}
    c20e:	46c0      	nop			; (mov r8, r8)
    c210:	00005c4e 	.word	0x00005c4e
    c214:	000002bc 	.word	0x000002bc
    c218:	000001e8 	.word	0x000001e8

0000c21c <udd_ctrl_send_zlp_in>:
    c21c:	b5b0      	push	{r4, r5, r7, lr}
    c21e:	af00      	add	r7, sp, #0
    c220:	4c0e      	ldr	r4, [pc, #56]	; (c25c <udd_ctrl_send_zlp_in+0x40>)
    c222:	447c      	add	r4, pc
    c224:	4b0e      	ldr	r3, [pc, #56]	; (c260 <udd_ctrl_send_zlp_in+0x44>)
    c226:	447b      	add	r3, pc
    c228:	2203      	movs	r2, #3
    c22a:	701a      	strb	r2, [r3, #0]
    c22c:	4b0d      	ldr	r3, [pc, #52]	; (c264 <udd_ctrl_send_zlp_in+0x48>)
    c22e:	58e3      	ldr	r3, [r4, r3]
    c230:	001a      	movs	r2, r3
    c232:	4b0d      	ldr	r3, [pc, #52]	; (c268 <udd_ctrl_send_zlp_in+0x4c>)
    c234:	58e3      	ldr	r3, [r4, r3]
    c236:	0011      	movs	r1, r2
    c238:	0018      	movs	r0, r3
    c23a:	4b0c      	ldr	r3, [pc, #48]	; (c26c <udd_ctrl_send_zlp_in+0x50>)
    c23c:	58e3      	ldr	r3, [r4, r3]
    c23e:	4798      	blx	r3
    c240:	4b0b      	ldr	r3, [pc, #44]	; (c270 <udd_ctrl_send_zlp_in+0x54>)
    c242:	58e3      	ldr	r3, [r4, r3]
    c244:	689a      	ldr	r2, [r3, #8]
    c246:	4b08      	ldr	r3, [pc, #32]	; (c268 <udd_ctrl_send_zlp_in+0x4c>)
    c248:	58e3      	ldr	r3, [r4, r3]
    c24a:	0018      	movs	r0, r3
    c24c:	2300      	movs	r3, #0
    c24e:	2100      	movs	r1, #0
    c250:	4d08      	ldr	r5, [pc, #32]	; (c274 <udd_ctrl_send_zlp_in+0x58>)
    c252:	5964      	ldr	r4, [r4, r5]
    c254:	47a0      	blx	r4
    c256:	46c0      	nop			; (mov r8, r8)
    c258:	46bd      	mov	sp, r7
    c25a:	bdb0      	pop	{r4, r5, r7, pc}
    c25c:	00005bbe 	.word	0x00005bbe
    c260:	1fff4378 	.word	0x1fff4378
    c264:	000002bc 	.word	0x000002bc
    c268:	00000078 	.word	0x00000078
    c26c:	000000c0 	.word	0x000000c0
    c270:	000001e8 	.word	0x000001e8
    c274:	00000300 	.word	0x00000300

0000c278 <udd_ctrl_in_sent>:
    c278:	b5b0      	push	{r4, r5, r7, lr}
    c27a:	b082      	sub	sp, #8
    c27c:	af00      	add	r7, sp, #0
    c27e:	4c3e      	ldr	r4, [pc, #248]	; (c378 <udd_ctrl_in_sent+0x100>)
    c280:	447c      	add	r4, pc
    c282:	4b3e      	ldr	r3, [pc, #248]	; (c37c <udd_ctrl_in_sent+0x104>)
    c284:	58e3      	ldr	r3, [r4, r3]
    c286:	8999      	ldrh	r1, [r3, #12]
    c288:	4b3d      	ldr	r3, [pc, #244]	; (c380 <udd_ctrl_in_sent+0x108>)
    c28a:	447b      	add	r3, pc
    c28c:	881a      	ldrh	r2, [r3, #0]
    c28e:	1dbb      	adds	r3, r7, #6
    c290:	1a8a      	subs	r2, r1, r2
    c292:	801a      	strh	r2, [r3, #0]
    c294:	1dbb      	adds	r3, r7, #6
    c296:	881b      	ldrh	r3, [r3, #0]
    c298:	2b00      	cmp	r3, #0
    c29a:	d13f      	bne.n	c31c <udd_ctrl_in_sent+0xa4>
    c29c:	4b39      	ldr	r3, [pc, #228]	; (c384 <udd_ctrl_in_sent+0x10c>)
    c29e:	447b      	add	r3, pc
    c2a0:	881a      	ldrh	r2, [r3, #0]
    c2a2:	4b39      	ldr	r3, [pc, #228]	; (c388 <udd_ctrl_in_sent+0x110>)
    c2a4:	447b      	add	r3, pc
    c2a6:	881b      	ldrh	r3, [r3, #0]
    c2a8:	18d3      	adds	r3, r2, r3
    c2aa:	b29a      	uxth	r2, r3
    c2ac:	4b37      	ldr	r3, [pc, #220]	; (c38c <udd_ctrl_in_sent+0x114>)
    c2ae:	447b      	add	r3, pc
    c2b0:	801a      	strh	r2, [r3, #0]
    c2b2:	4b32      	ldr	r3, [pc, #200]	; (c37c <udd_ctrl_in_sent+0x104>)
    c2b4:	58e3      	ldr	r3, [r4, r3]
    c2b6:	88da      	ldrh	r2, [r3, #6]
    c2b8:	4b35      	ldr	r3, [pc, #212]	; (c390 <udd_ctrl_in_sent+0x118>)
    c2ba:	447b      	add	r3, pc
    c2bc:	881b      	ldrh	r3, [r3, #0]
    c2be:	429a      	cmp	r2, r3
    c2c0:	d004      	beq.n	c2cc <udd_ctrl_in_sent+0x54>
    c2c2:	4b34      	ldr	r3, [pc, #208]	; (c394 <udd_ctrl_in_sent+0x11c>)
    c2c4:	447b      	add	r3, pc
    c2c6:	781b      	ldrb	r3, [r3, #0]
    c2c8:	2b00      	cmp	r3, #0
    c2ca:	d00e      	beq.n	c2ea <udd_ctrl_in_sent+0x72>
    c2cc:	4b32      	ldr	r3, [pc, #200]	; (c398 <udd_ctrl_in_sent+0x120>)
    c2ce:	447b      	add	r3, pc
    c2d0:	2204      	movs	r2, #4
    c2d2:	701a      	strb	r2, [r3, #0]
    c2d4:	4b31      	ldr	r3, [pc, #196]	; (c39c <udd_ctrl_in_sent+0x124>)
    c2d6:	58e3      	ldr	r3, [r4, r3]
    c2d8:	001a      	movs	r2, r3
    c2da:	4b31      	ldr	r3, [pc, #196]	; (c3a0 <udd_ctrl_in_sent+0x128>)
    c2dc:	58e3      	ldr	r3, [r4, r3]
    c2de:	0011      	movs	r1, r2
    c2e0:	0018      	movs	r0, r3
    c2e2:	4b30      	ldr	r3, [pc, #192]	; (c3a4 <udd_ctrl_in_sent+0x12c>)
    c2e4:	58e3      	ldr	r3, [r4, r3]
    c2e6:	4798      	blx	r3
    c2e8:	e043      	b.n	c372 <udd_ctrl_in_sent+0xfa>
    c2ea:	4b24      	ldr	r3, [pc, #144]	; (c37c <udd_ctrl_in_sent+0x104>)
    c2ec:	58e3      	ldr	r3, [r4, r3]
    c2ee:	695b      	ldr	r3, [r3, #20]
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d013      	beq.n	c31c <udd_ctrl_in_sent+0xa4>
    c2f4:	4b21      	ldr	r3, [pc, #132]	; (c37c <udd_ctrl_in_sent+0x104>)
    c2f6:	58e3      	ldr	r3, [r4, r3]
    c2f8:	695b      	ldr	r3, [r3, #20]
    c2fa:	4798      	blx	r3
    c2fc:	0003      	movs	r3, r0
    c2fe:	001a      	movs	r2, r3
    c300:	2301      	movs	r3, #1
    c302:	4053      	eors	r3, r2
    c304:	b2db      	uxtb	r3, r3
    c306:	2b00      	cmp	r3, #0
    c308:	d108      	bne.n	c31c <udd_ctrl_in_sent+0xa4>
    c30a:	4b27      	ldr	r3, [pc, #156]	; (c3a8 <udd_ctrl_in_sent+0x130>)
    c30c:	447b      	add	r3, pc
    c30e:	2200      	movs	r2, #0
    c310:	801a      	strh	r2, [r3, #0]
    c312:	1dbb      	adds	r3, r7, #6
    c314:	4a19      	ldr	r2, [pc, #100]	; (c37c <udd_ctrl_in_sent+0x104>)
    c316:	58a2      	ldr	r2, [r4, r2]
    c318:	8992      	ldrh	r2, [r2, #12]
    c31a:	801a      	strh	r2, [r3, #0]
    c31c:	1dbb      	adds	r3, r7, #6
    c31e:	881b      	ldrh	r3, [r3, #0]
    c320:	2b3f      	cmp	r3, #63	; 0x3f
    c322:	d907      	bls.n	c334 <udd_ctrl_in_sent+0xbc>
    c324:	1dbb      	adds	r3, r7, #6
    c326:	2240      	movs	r2, #64	; 0x40
    c328:	801a      	strh	r2, [r3, #0]
    c32a:	4b20      	ldr	r3, [pc, #128]	; (c3ac <udd_ctrl_in_sent+0x134>)
    c32c:	447b      	add	r3, pc
    c32e:	2200      	movs	r2, #0
    c330:	701a      	strb	r2, [r3, #0]
    c332:	e003      	b.n	c33c <udd_ctrl_in_sent+0xc4>
    c334:	4b1e      	ldr	r3, [pc, #120]	; (c3b0 <udd_ctrl_in_sent+0x138>)
    c336:	447b      	add	r3, pc
    c338:	2201      	movs	r2, #1
    c33a:	701a      	strb	r2, [r3, #0]
    c33c:	4b0f      	ldr	r3, [pc, #60]	; (c37c <udd_ctrl_in_sent+0x104>)
    c33e:	58e3      	ldr	r3, [r4, r3]
    c340:	689b      	ldr	r3, [r3, #8]
    c342:	4a1c      	ldr	r2, [pc, #112]	; (c3b4 <udd_ctrl_in_sent+0x13c>)
    c344:	447a      	add	r2, pc
    c346:	8812      	ldrh	r2, [r2, #0]
    c348:	189a      	adds	r2, r3, r2
    c34a:	1dbb      	adds	r3, r7, #6
    c34c:	8819      	ldrh	r1, [r3, #0]
    c34e:	4b14      	ldr	r3, [pc, #80]	; (c3a0 <udd_ctrl_in_sent+0x128>)
    c350:	58e3      	ldr	r3, [r4, r3]
    c352:	0018      	movs	r0, r3
    c354:	000b      	movs	r3, r1
    c356:	2100      	movs	r1, #0
    c358:	4d17      	ldr	r5, [pc, #92]	; (c3b8 <udd_ctrl_in_sent+0x140>)
    c35a:	5964      	ldr	r4, [r4, r5]
    c35c:	47a0      	blx	r4
    c35e:	4b17      	ldr	r3, [pc, #92]	; (c3bc <udd_ctrl_in_sent+0x144>)
    c360:	447b      	add	r3, pc
    c362:	881a      	ldrh	r2, [r3, #0]
    c364:	1dbb      	adds	r3, r7, #6
    c366:	881b      	ldrh	r3, [r3, #0]
    c368:	18d3      	adds	r3, r2, r3
    c36a:	b29a      	uxth	r2, r3
    c36c:	4b14      	ldr	r3, [pc, #80]	; (c3c0 <udd_ctrl_in_sent+0x148>)
    c36e:	447b      	add	r3, pc
    c370:	801a      	strh	r2, [r3, #0]
    c372:	46bd      	mov	sp, r7
    c374:	b002      	add	sp, #8
    c376:	bdb0      	pop	{r4, r5, r7, pc}
    c378:	00005b60 	.word	0x00005b60
    c37c:	000001e8 	.word	0x000001e8
    c380:	1fff4318 	.word	0x1fff4318
    c384:	1fff4302 	.word	0x1fff4302
    c388:	1fff42fe 	.word	0x1fff42fe
    c38c:	1fff42f2 	.word	0x1fff42f2
    c390:	1fff42e6 	.word	0x1fff42e6
    c394:	1fff4359 	.word	0x1fff4359
    c398:	1fff42d0 	.word	0x1fff42d0
    c39c:	000002bc 	.word	0x000002bc
    c3a0:	00000078 	.word	0x00000078
    c3a4:	000000c0 	.word	0x000000c0
    c3a8:	1fff4296 	.word	0x1fff4296
    c3ac:	1fff42f1 	.word	0x1fff42f1
    c3b0:	1fff42e7 	.word	0x1fff42e7
    c3b4:	1fff425e 	.word	0x1fff425e
    c3b8:	00000300 	.word	0x00000300
    c3bc:	1fff4242 	.word	0x1fff4242
    c3c0:	1fff4234 	.word	0x1fff4234

0000c3c4 <udd_ctrl_out_received>:
    c3c4:	b5b0      	push	{r4, r5, r7, lr}
    c3c6:	b084      	sub	sp, #16
    c3c8:	af00      	add	r7, sp, #0
    c3ca:	6078      	str	r0, [r7, #4]
    c3cc:	4c5c      	ldr	r4, [pc, #368]	; (c540 <udd_ctrl_out_received+0x17c>)
    c3ce:	447c      	add	r4, pc
    c3d0:	687b      	ldr	r3, [r7, #4]
    c3d2:	60bb      	str	r3, [r7, #8]
    c3d4:	230e      	movs	r3, #14
    c3d6:	18fb      	adds	r3, r7, r3
    c3d8:	68ba      	ldr	r2, [r7, #8]
    c3da:	8812      	ldrh	r2, [r2, #0]
    c3dc:	801a      	strh	r2, [r3, #0]
    c3de:	4b59      	ldr	r3, [pc, #356]	; (c544 <udd_ctrl_out_received+0x180>)
    c3e0:	58e3      	ldr	r3, [r4, r3]
    c3e2:	899b      	ldrh	r3, [r3, #12]
    c3e4:	001a      	movs	r2, r3
    c3e6:	4b58      	ldr	r3, [pc, #352]	; (c548 <udd_ctrl_out_received+0x184>)
    c3e8:	447b      	add	r3, pc
    c3ea:	881b      	ldrh	r3, [r3, #0]
    c3ec:	0019      	movs	r1, r3
    c3ee:	230e      	movs	r3, #14
    c3f0:	18fb      	adds	r3, r7, r3
    c3f2:	881b      	ldrh	r3, [r3, #0]
    c3f4:	18cb      	adds	r3, r1, r3
    c3f6:	429a      	cmp	r2, r3
    c3f8:	da09      	bge.n	c40e <udd_ctrl_out_received+0x4a>
    c3fa:	4b52      	ldr	r3, [pc, #328]	; (c544 <udd_ctrl_out_received+0x180>)
    c3fc:	58e3      	ldr	r3, [r4, r3]
    c3fe:	8999      	ldrh	r1, [r3, #12]
    c400:	4b52      	ldr	r3, [pc, #328]	; (c54c <udd_ctrl_out_received+0x188>)
    c402:	447b      	add	r3, pc
    c404:	881a      	ldrh	r2, [r3, #0]
    c406:	230e      	movs	r3, #14
    c408:	18fb      	adds	r3, r7, r3
    c40a:	1a8a      	subs	r2, r1, r2
    c40c:	801a      	strh	r2, [r3, #0]
    c40e:	4b4d      	ldr	r3, [pc, #308]	; (c544 <udd_ctrl_out_received+0x180>)
    c410:	58e3      	ldr	r3, [r4, r3]
    c412:	689b      	ldr	r3, [r3, #8]
    c414:	4a4e      	ldr	r2, [pc, #312]	; (c550 <udd_ctrl_out_received+0x18c>)
    c416:	447a      	add	r2, pc
    c418:	8812      	ldrh	r2, [r2, #0]
    c41a:	1898      	adds	r0, r3, r2
    c41c:	230e      	movs	r3, #14
    c41e:	18fb      	adds	r3, r7, r3
    c420:	881a      	ldrh	r2, [r3, #0]
    c422:	4b4c      	ldr	r3, [pc, #304]	; (c554 <udd_ctrl_out_received+0x190>)
    c424:	58e3      	ldr	r3, [r4, r3]
    c426:	0019      	movs	r1, r3
    c428:	4b4b      	ldr	r3, [pc, #300]	; (c558 <udd_ctrl_out_received+0x194>)
    c42a:	58e3      	ldr	r3, [r4, r3]
    c42c:	4798      	blx	r3
    c42e:	4b4b      	ldr	r3, [pc, #300]	; (c55c <udd_ctrl_out_received+0x198>)
    c430:	447b      	add	r3, pc
    c432:	881a      	ldrh	r2, [r3, #0]
    c434:	230e      	movs	r3, #14
    c436:	18fb      	adds	r3, r7, r3
    c438:	881b      	ldrh	r3, [r3, #0]
    c43a:	18d3      	adds	r3, r2, r3
    c43c:	b29a      	uxth	r2, r3
    c43e:	4b48      	ldr	r3, [pc, #288]	; (c560 <udd_ctrl_out_received+0x19c>)
    c440:	447b      	add	r3, pc
    c442:	801a      	strh	r2, [r3, #0]
    c444:	230e      	movs	r3, #14
    c446:	18fb      	adds	r3, r7, r3
    c448:	881b      	ldrh	r3, [r3, #0]
    c44a:	2b40      	cmp	r3, #64	; 0x40
    c44c:	d10d      	bne.n	c46a <udd_ctrl_out_received+0xa6>
    c44e:	4b3d      	ldr	r3, [pc, #244]	; (c544 <udd_ctrl_out_received+0x180>)
    c450:	58e3      	ldr	r3, [r4, r3]
    c452:	88db      	ldrh	r3, [r3, #6]
    c454:	001a      	movs	r2, r3
    c456:	4b43      	ldr	r3, [pc, #268]	; (c564 <udd_ctrl_out_received+0x1a0>)
    c458:	447b      	add	r3, pc
    c45a:	881b      	ldrh	r3, [r3, #0]
    c45c:	0019      	movs	r1, r3
    c45e:	4b42      	ldr	r3, [pc, #264]	; (c568 <udd_ctrl_out_received+0x1a4>)
    c460:	447b      	add	r3, pc
    c462:	881b      	ldrh	r3, [r3, #0]
    c464:	18cb      	adds	r3, r1, r3
    c466:	429a      	cmp	r2, r3
    c468:	dc22      	bgt.n	c4b0 <udd_ctrl_out_received+0xec>
    c46a:	4b40      	ldr	r3, [pc, #256]	; (c56c <udd_ctrl_out_received+0x1a8>)
    c46c:	447b      	add	r3, pc
    c46e:	881a      	ldrh	r2, [r3, #0]
    c470:	4b34      	ldr	r3, [pc, #208]	; (c544 <udd_ctrl_out_received+0x180>)
    c472:	58e3      	ldr	r3, [r4, r3]
    c474:	819a      	strh	r2, [r3, #12]
    c476:	4b33      	ldr	r3, [pc, #204]	; (c544 <udd_ctrl_out_received+0x180>)
    c478:	58e3      	ldr	r3, [r4, r3]
    c47a:	695b      	ldr	r3, [r3, #20]
    c47c:	2b00      	cmp	r3, #0
    c47e:	d013      	beq.n	c4a8 <udd_ctrl_out_received+0xe4>
    c480:	4b30      	ldr	r3, [pc, #192]	; (c544 <udd_ctrl_out_received+0x180>)
    c482:	58e3      	ldr	r3, [r4, r3]
    c484:	695b      	ldr	r3, [r3, #20]
    c486:	4798      	blx	r3
    c488:	0003      	movs	r3, r0
    c48a:	001a      	movs	r2, r3
    c48c:	2301      	movs	r3, #1
    c48e:	4053      	eors	r3, r2
    c490:	b2db      	uxtb	r3, r3
    c492:	2b00      	cmp	r3, #0
    c494:	d008      	beq.n	c4a8 <udd_ctrl_out_received+0xe4>
    c496:	4b36      	ldr	r3, [pc, #216]	; (c570 <udd_ctrl_out_received+0x1ac>)
    c498:	447b      	add	r3, pc
    c49a:	2205      	movs	r2, #5
    c49c:	701a      	strb	r2, [r3, #0]
    c49e:	2000      	movs	r0, #0
    c4a0:	4b34      	ldr	r3, [pc, #208]	; (c574 <udd_ctrl_out_received+0x1b0>)
    c4a2:	58e3      	ldr	r3, [r4, r3]
    c4a4:	4798      	blx	r3
    c4a6:	e047      	b.n	c538 <udd_ctrl_out_received+0x174>
    c4a8:	4b33      	ldr	r3, [pc, #204]	; (c578 <udd_ctrl_out_received+0x1b4>)
    c4aa:	447b      	add	r3, pc
    c4ac:	4798      	blx	r3
    c4ae:	e043      	b.n	c538 <udd_ctrl_out_received+0x174>
    c4b0:	4b24      	ldr	r3, [pc, #144]	; (c544 <udd_ctrl_out_received+0x180>)
    c4b2:	58e3      	ldr	r3, [r4, r3]
    c4b4:	899a      	ldrh	r2, [r3, #12]
    c4b6:	4b31      	ldr	r3, [pc, #196]	; (c57c <udd_ctrl_out_received+0x1b8>)
    c4b8:	447b      	add	r3, pc
    c4ba:	881b      	ldrh	r3, [r3, #0]
    c4bc:	429a      	cmp	r2, r3
    c4be:	d130      	bne.n	c522 <udd_ctrl_out_received+0x15e>
    c4c0:	4b20      	ldr	r3, [pc, #128]	; (c544 <udd_ctrl_out_received+0x180>)
    c4c2:	58e3      	ldr	r3, [r4, r3]
    c4c4:	695b      	ldr	r3, [r3, #20]
    c4c6:	2b00      	cmp	r3, #0
    c4c8:	d108      	bne.n	c4dc <udd_ctrl_out_received+0x118>
    c4ca:	4b2d      	ldr	r3, [pc, #180]	; (c580 <udd_ctrl_out_received+0x1bc>)
    c4cc:	447b      	add	r3, pc
    c4ce:	2205      	movs	r2, #5
    c4d0:	701a      	strb	r2, [r3, #0]
    c4d2:	2000      	movs	r0, #0
    c4d4:	4b27      	ldr	r3, [pc, #156]	; (c574 <udd_ctrl_out_received+0x1b0>)
    c4d6:	58e3      	ldr	r3, [r4, r3]
    c4d8:	4798      	blx	r3
    c4da:	e02d      	b.n	c538 <udd_ctrl_out_received+0x174>
    c4dc:	4b19      	ldr	r3, [pc, #100]	; (c544 <udd_ctrl_out_received+0x180>)
    c4de:	58e3      	ldr	r3, [r4, r3]
    c4e0:	695b      	ldr	r3, [r3, #20]
    c4e2:	4798      	blx	r3
    c4e4:	0003      	movs	r3, r0
    c4e6:	001a      	movs	r2, r3
    c4e8:	2301      	movs	r3, #1
    c4ea:	4053      	eors	r3, r2
    c4ec:	b2db      	uxtb	r3, r3
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d008      	beq.n	c504 <udd_ctrl_out_received+0x140>
    c4f2:	4b24      	ldr	r3, [pc, #144]	; (c584 <udd_ctrl_out_received+0x1c0>)
    c4f4:	447b      	add	r3, pc
    c4f6:	2205      	movs	r2, #5
    c4f8:	701a      	strb	r2, [r3, #0]
    c4fa:	2000      	movs	r0, #0
    c4fc:	4b1d      	ldr	r3, [pc, #116]	; (c574 <udd_ctrl_out_received+0x1b0>)
    c4fe:	58e3      	ldr	r3, [r4, r3]
    c500:	4798      	blx	r3
    c502:	e019      	b.n	c538 <udd_ctrl_out_received+0x174>
    c504:	4b20      	ldr	r3, [pc, #128]	; (c588 <udd_ctrl_out_received+0x1c4>)
    c506:	447b      	add	r3, pc
    c508:	881a      	ldrh	r2, [r3, #0]
    c50a:	4b20      	ldr	r3, [pc, #128]	; (c58c <udd_ctrl_out_received+0x1c8>)
    c50c:	447b      	add	r3, pc
    c50e:	881b      	ldrh	r3, [r3, #0]
    c510:	18d3      	adds	r3, r2, r3
    c512:	b29a      	uxth	r2, r3
    c514:	4b1e      	ldr	r3, [pc, #120]	; (c590 <udd_ctrl_out_received+0x1cc>)
    c516:	447b      	add	r3, pc
    c518:	801a      	strh	r2, [r3, #0]
    c51a:	4b1e      	ldr	r3, [pc, #120]	; (c594 <udd_ctrl_out_received+0x1d0>)
    c51c:	447b      	add	r3, pc
    c51e:	2200      	movs	r2, #0
    c520:	801a      	strh	r2, [r3, #0]
    c522:	4b0c      	ldr	r3, [pc, #48]	; (c554 <udd_ctrl_out_received+0x190>)
    c524:	58e3      	ldr	r3, [r4, r3]
    c526:	001a      	movs	r2, r3
    c528:	4b1b      	ldr	r3, [pc, #108]	; (c598 <udd_ctrl_out_received+0x1d4>)
    c52a:	58e3      	ldr	r3, [r4, r3]
    c52c:	0018      	movs	r0, r3
    c52e:	2340      	movs	r3, #64	; 0x40
    c530:	2100      	movs	r1, #0
    c532:	4d1a      	ldr	r5, [pc, #104]	; (c59c <udd_ctrl_out_received+0x1d8>)
    c534:	5964      	ldr	r4, [r4, r5]
    c536:	47a0      	blx	r4
    c538:	46bd      	mov	sp, r7
    c53a:	b004      	add	sp, #16
    c53c:	bdb0      	pop	{r4, r5, r7, pc}
    c53e:	46c0      	nop			; (mov r8, r8)
    c540:	00005a12 	.word	0x00005a12
    c544:	000001e8 	.word	0x000001e8
    c548:	1fff41ba 	.word	0x1fff41ba
    c54c:	1fff41a0 	.word	0x1fff41a0
    c550:	1fff418c 	.word	0x1fff418c
    c554:	000002bc 	.word	0x000002bc
    c558:	0000008c 	.word	0x0000008c
    c55c:	1fff4172 	.word	0x1fff4172
    c560:	1fff4162 	.word	0x1fff4162
    c564:	1fff4148 	.word	0x1fff4148
    c568:	1fff4142 	.word	0x1fff4142
    c56c:	1fff4136 	.word	0x1fff4136
    c570:	1fff4106 	.word	0x1fff4106
    c574:	00000128 	.word	0x00000128
    c578:	fffffd6f 	.word	0xfffffd6f
    c57c:	1fff40ea 	.word	0x1fff40ea
    c580:	1fff40d2 	.word	0x1fff40d2
    c584:	1fff40aa 	.word	0x1fff40aa
    c588:	1fff409a 	.word	0x1fff409a
    c58c:	1fff4096 	.word	0x1fff4096
    c590:	1fff408a 	.word	0x1fff408a
    c594:	1fff4086 	.word	0x1fff4086
    c598:	00000078 	.word	0x00000078
    c59c:	0000014c 	.word	0x0000014c

0000c5a0 <_usb_ep0_on_setup>:
    c5a0:	b5b0      	push	{r4, r5, r7, lr}
    c5a2:	b084      	sub	sp, #16
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	6078      	str	r0, [r7, #4]
    c5a8:	6039      	str	r1, [r7, #0]
    c5aa:	4c39      	ldr	r4, [pc, #228]	; (c690 <_usb_ep0_on_setup+0xf0>)
    c5ac:	447c      	add	r4, pc
    c5ae:	683b      	ldr	r3, [r7, #0]
    c5b0:	60fb      	str	r3, [r7, #12]
    c5b2:	4b38      	ldr	r3, [pc, #224]	; (c694 <_usb_ep0_on_setup+0xf4>)
    c5b4:	447b      	add	r3, pc
    c5b6:	781b      	ldrb	r3, [r3, #0]
    c5b8:	2b00      	cmp	r3, #0
    c5ba:	d00c      	beq.n	c5d6 <_usb_ep0_on_setup+0x36>
    c5bc:	4b36      	ldr	r3, [pc, #216]	; (c698 <_usb_ep0_on_setup+0xf8>)
    c5be:	58e3      	ldr	r3, [r4, r3]
    c5c0:	691b      	ldr	r3, [r3, #16]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d003      	beq.n	c5ce <_usb_ep0_on_setup+0x2e>
    c5c6:	4b34      	ldr	r3, [pc, #208]	; (c698 <_usb_ep0_on_setup+0xf8>)
    c5c8:	58e3      	ldr	r3, [r4, r3]
    c5ca:	691b      	ldr	r3, [r3, #16]
    c5cc:	4798      	blx	r3
    c5ce:	4b33      	ldr	r3, [pc, #204]	; (c69c <_usb_ep0_on_setup+0xfc>)
    c5d0:	447b      	add	r3, pc
    c5d2:	2200      	movs	r2, #0
    c5d4:	701a      	strb	r2, [r3, #0]
    c5d6:	68fb      	ldr	r3, [r7, #12]
    c5d8:	881b      	ldrh	r3, [r3, #0]
    c5da:	2b08      	cmp	r3, #8
    c5dc:	d003      	beq.n	c5e6 <_usb_ep0_on_setup+0x46>
    c5de:	4b30      	ldr	r3, [pc, #192]	; (c6a0 <_usb_ep0_on_setup+0x100>)
    c5e0:	447b      	add	r3, pc
    c5e2:	4798      	blx	r3
    c5e4:	e051      	b.n	c68a <_usb_ep0_on_setup+0xea>
    c5e6:	4b2f      	ldr	r3, [pc, #188]	; (c6a4 <_usb_ep0_on_setup+0x104>)
    c5e8:	447b      	add	r3, pc
    c5ea:	4798      	blx	r3
    c5ec:	4b2e      	ldr	r3, [pc, #184]	; (c6a8 <_usb_ep0_on_setup+0x108>)
    c5ee:	58e3      	ldr	r3, [r4, r3]
    c5f0:	4798      	blx	r3
    c5f2:	0003      	movs	r3, r0
    c5f4:	001a      	movs	r2, r3
    c5f6:	2301      	movs	r3, #1
    c5f8:	4053      	eors	r3, r2
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d003      	beq.n	c608 <_usb_ep0_on_setup+0x68>
    c600:	4b2a      	ldr	r3, [pc, #168]	; (c6ac <_usb_ep0_on_setup+0x10c>)
    c602:	447b      	add	r3, pc
    c604:	4798      	blx	r3
    c606:	e040      	b.n	c68a <_usb_ep0_on_setup+0xea>
    c608:	4b23      	ldr	r3, [pc, #140]	; (c698 <_usb_ep0_on_setup+0xf8>)
    c60a:	58e3      	ldr	r3, [r4, r3]
    c60c:	781b      	ldrb	r3, [r3, #0]
    c60e:	b25b      	sxtb	r3, r3
    c610:	2b00      	cmp	r3, #0
    c612:	da1a      	bge.n	c64a <_usb_ep0_on_setup+0xaa>
    c614:	4b26      	ldr	r3, [pc, #152]	; (c6b0 <_usb_ep0_on_setup+0x110>)
    c616:	447b      	add	r3, pc
    c618:	2200      	movs	r2, #0
    c61a:	801a      	strh	r2, [r3, #0]
    c61c:	4b25      	ldr	r3, [pc, #148]	; (c6b4 <_usb_ep0_on_setup+0x114>)
    c61e:	447b      	add	r3, pc
    c620:	2200      	movs	r2, #0
    c622:	801a      	strh	r2, [r3, #0]
    c624:	4b24      	ldr	r3, [pc, #144]	; (c6b8 <_usb_ep0_on_setup+0x118>)
    c626:	447b      	add	r3, pc
    c628:	2202      	movs	r2, #2
    c62a:	701a      	strb	r2, [r3, #0]
    c62c:	4b23      	ldr	r3, [pc, #140]	; (c6bc <_usb_ep0_on_setup+0x11c>)
    c62e:	58e3      	ldr	r3, [r4, r3]
    c630:	001a      	movs	r2, r3
    c632:	4b23      	ldr	r3, [pc, #140]	; (c6c0 <_usb_ep0_on_setup+0x120>)
    c634:	58e3      	ldr	r3, [r4, r3]
    c636:	0018      	movs	r0, r3
    c638:	2340      	movs	r3, #64	; 0x40
    c63a:	2100      	movs	r1, #0
    c63c:	4d21      	ldr	r5, [pc, #132]	; (c6c4 <_usb_ep0_on_setup+0x124>)
    c63e:	5964      	ldr	r4, [r4, r5]
    c640:	47a0      	blx	r4
    c642:	4b21      	ldr	r3, [pc, #132]	; (c6c8 <_usb_ep0_on_setup+0x128>)
    c644:	447b      	add	r3, pc
    c646:	4798      	blx	r3
    c648:	e01f      	b.n	c68a <_usb_ep0_on_setup+0xea>
    c64a:	4b13      	ldr	r3, [pc, #76]	; (c698 <_usb_ep0_on_setup+0xf8>)
    c64c:	58e3      	ldr	r3, [r4, r3]
    c64e:	88db      	ldrh	r3, [r3, #6]
    c650:	2b00      	cmp	r3, #0
    c652:	d103      	bne.n	c65c <_usb_ep0_on_setup+0xbc>
    c654:	4b1d      	ldr	r3, [pc, #116]	; (c6cc <_usb_ep0_on_setup+0x12c>)
    c656:	447b      	add	r3, pc
    c658:	4798      	blx	r3
    c65a:	e016      	b.n	c68a <_usb_ep0_on_setup+0xea>
    c65c:	4b1c      	ldr	r3, [pc, #112]	; (c6d0 <_usb_ep0_on_setup+0x130>)
    c65e:	447b      	add	r3, pc
    c660:	2200      	movs	r2, #0
    c662:	801a      	strh	r2, [r3, #0]
    c664:	4b1b      	ldr	r3, [pc, #108]	; (c6d4 <_usb_ep0_on_setup+0x134>)
    c666:	447b      	add	r3, pc
    c668:	2200      	movs	r2, #0
    c66a:	801a      	strh	r2, [r3, #0]
    c66c:	4b1a      	ldr	r3, [pc, #104]	; (c6d8 <_usb_ep0_on_setup+0x138>)
    c66e:	447b      	add	r3, pc
    c670:	2201      	movs	r2, #1
    c672:	701a      	strb	r2, [r3, #0]
    c674:	4b11      	ldr	r3, [pc, #68]	; (c6bc <_usb_ep0_on_setup+0x11c>)
    c676:	58e3      	ldr	r3, [r4, r3]
    c678:	001a      	movs	r2, r3
    c67a:	4b11      	ldr	r3, [pc, #68]	; (c6c0 <_usb_ep0_on_setup+0x120>)
    c67c:	58e3      	ldr	r3, [r4, r3]
    c67e:	0018      	movs	r0, r3
    c680:	2340      	movs	r3, #64	; 0x40
    c682:	2100      	movs	r1, #0
    c684:	4d0f      	ldr	r5, [pc, #60]	; (c6c4 <_usb_ep0_on_setup+0x124>)
    c686:	5964      	ldr	r4, [r4, r5]
    c688:	47a0      	blx	r4
    c68a:	46bd      	mov	sp, r7
    c68c:	b004      	add	sp, #16
    c68e:	bdb0      	pop	{r4, r5, r7, pc}
    c690:	00005834 	.word	0x00005834
    c694:	1fff3fea 	.word	0x1fff3fea
    c698:	000001e8 	.word	0x000001e8
    c69c:	1fff3fce 	.word	0x1fff3fce
    c6a0:	fffff7b5 	.word	0xfffff7b5
    c6a4:	fffffba1 	.word	0xfffffba1
    c6a8:	00000140 	.word	0x00000140
    c6ac:	fffff793 	.word	0xfffff793
    c6b0:	1fff3f8a 	.word	0x1fff3f8a
    c6b4:	1fff3f84 	.word	0x1fff3f84
    c6b8:	1fff3f78 	.word	0x1fff3f78
    c6bc:	000002bc 	.word	0x000002bc
    c6c0:	00000078 	.word	0x00000078
    c6c4:	0000014c 	.word	0x0000014c
    c6c8:	fffffc31 	.word	0xfffffc31
    c6cc:	fffffbc3 	.word	0xfffffbc3
    c6d0:	1fff3f42 	.word	0x1fff3f42
    c6d4:	1fff3f3c 	.word	0x1fff3f3c
    c6d8:	1fff3f30 	.word	0x1fff3f30

0000c6dc <udd_ctrl_underflow>:
    c6dc:	b580      	push	{r7, lr}
    c6de:	b084      	sub	sp, #16
    c6e0:	af00      	add	r7, sp, #0
    c6e2:	6078      	str	r0, [r7, #4]
    c6e4:	4b0e      	ldr	r3, [pc, #56]	; (c720 <udd_ctrl_underflow+0x44>)
    c6e6:	447b      	add	r3, pc
    c6e8:	687a      	ldr	r2, [r7, #4]
    c6ea:	60fa      	str	r2, [r7, #12]
    c6ec:	4a0d      	ldr	r2, [pc, #52]	; (c724 <udd_ctrl_underflow+0x48>)
    c6ee:	447a      	add	r2, pc
    c6f0:	7812      	ldrb	r2, [r2, #0]
    c6f2:	2a01      	cmp	r2, #1
    c6f4:	d103      	bne.n	c6fe <udd_ctrl_underflow+0x22>
    c6f6:	4b0c      	ldr	r3, [pc, #48]	; (c728 <udd_ctrl_underflow+0x4c>)
    c6f8:	447b      	add	r3, pc
    c6fa:	4798      	blx	r3
    c6fc:	e00c      	b.n	c718 <udd_ctrl_underflow+0x3c>
    c6fe:	4a0b      	ldr	r2, [pc, #44]	; (c72c <udd_ctrl_underflow+0x50>)
    c700:	447a      	add	r2, pc
    c702:	7812      	ldrb	r2, [r2, #0]
    c704:	2a04      	cmp	r2, #4
    c706:	d107      	bne.n	c718 <udd_ctrl_underflow+0x3c>
    c708:	68fa      	ldr	r2, [r7, #12]
    c70a:	7991      	ldrb	r1, [r2, #6]
    c70c:	4a08      	ldr	r2, [pc, #32]	; (c730 <udd_ctrl_underflow+0x54>)
    c70e:	589a      	ldr	r2, [r3, r2]
    c710:	0010      	movs	r0, r2
    c712:	4a08      	ldr	r2, [pc, #32]	; (c734 <udd_ctrl_underflow+0x58>)
    c714:	589b      	ldr	r3, [r3, r2]
    c716:	4798      	blx	r3
    c718:	46c0      	nop			; (mov r8, r8)
    c71a:	46bd      	mov	sp, r7
    c71c:	b004      	add	sp, #16
    c71e:	bd80      	pop	{r7, pc}
    c720:	000056fa 	.word	0x000056fa
    c724:	1fff3eb0 	.word	0x1fff3eb0
    c728:	fffffb21 	.word	0xfffffb21
    c72c:	1fff3e9e 	.word	0x1fff3e9e
    c730:	00000078 	.word	0x00000078
    c734:	00000274 	.word	0x00000274

0000c738 <udd_ctrl_overflow>:
    c738:	b580      	push	{r7, lr}
    c73a:	b084      	sub	sp, #16
    c73c:	af00      	add	r7, sp, #0
    c73e:	6078      	str	r0, [r7, #4]
    c740:	4b0f      	ldr	r3, [pc, #60]	; (c780 <udd_ctrl_overflow+0x48>)
    c742:	447b      	add	r3, pc
    c744:	687a      	ldr	r2, [r7, #4]
    c746:	60fa      	str	r2, [r7, #12]
    c748:	4a0e      	ldr	r2, [pc, #56]	; (c784 <udd_ctrl_overflow+0x4c>)
    c74a:	447a      	add	r2, pc
    c74c:	7812      	ldrb	r2, [r2, #0]
    c74e:	2a02      	cmp	r2, #2
    c750:	d104      	bne.n	c75c <udd_ctrl_overflow+0x24>
    c752:	4b0d      	ldr	r3, [pc, #52]	; (c788 <udd_ctrl_overflow+0x50>)
    c754:	447b      	add	r3, pc
    c756:	2204      	movs	r2, #4
    c758:	701a      	strb	r2, [r3, #0]
    c75a:	e00c      	b.n	c776 <udd_ctrl_overflow+0x3e>
    c75c:	4a0b      	ldr	r2, [pc, #44]	; (c78c <udd_ctrl_overflow+0x54>)
    c75e:	447a      	add	r2, pc
    c760:	7812      	ldrb	r2, [r2, #0]
    c762:	2a03      	cmp	r2, #3
    c764:	d107      	bne.n	c776 <udd_ctrl_overflow+0x3e>
    c766:	68fa      	ldr	r2, [r7, #12]
    c768:	7991      	ldrb	r1, [r2, #6]
    c76a:	4a09      	ldr	r2, [pc, #36]	; (c790 <udd_ctrl_overflow+0x58>)
    c76c:	589a      	ldr	r2, [r3, r2]
    c76e:	0010      	movs	r0, r2
    c770:	4a08      	ldr	r2, [pc, #32]	; (c794 <udd_ctrl_overflow+0x5c>)
    c772:	589b      	ldr	r3, [r3, r2]
    c774:	4798      	blx	r3
    c776:	46c0      	nop			; (mov r8, r8)
    c778:	46bd      	mov	sp, r7
    c77a:	b004      	add	sp, #16
    c77c:	bd80      	pop	{r7, pc}
    c77e:	46c0      	nop			; (mov r8, r8)
    c780:	0000569e 	.word	0x0000569e
    c784:	1fff3e54 	.word	0x1fff3e54
    c788:	1fff3e4a 	.word	0x1fff3e4a
    c78c:	1fff3e40 	.word	0x1fff3e40
    c790:	00000078 	.word	0x00000078
    c794:	00000274 	.word	0x00000274

0000c798 <_usb_ep0_on_tansfer_fail>:
    c798:	b580      	push	{r7, lr}
    c79a:	b084      	sub	sp, #16
    c79c:	af00      	add	r7, sp, #0
    c79e:	6078      	str	r0, [r7, #4]
    c7a0:	6039      	str	r1, [r7, #0]
    c7a2:	683b      	ldr	r3, [r7, #0]
    c7a4:	60fb      	str	r3, [r7, #12]
    c7a6:	68fb      	ldr	r3, [r7, #12]
    c7a8:	799b      	ldrb	r3, [r3, #6]
    c7aa:	b25b      	sxtb	r3, r3
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	da05      	bge.n	c7bc <_usb_ep0_on_tansfer_fail+0x24>
    c7b0:	683b      	ldr	r3, [r7, #0]
    c7b2:	0018      	movs	r0, r3
    c7b4:	4b06      	ldr	r3, [pc, #24]	; (c7d0 <_usb_ep0_on_tansfer_fail+0x38>)
    c7b6:	447b      	add	r3, pc
    c7b8:	4798      	blx	r3
    c7ba:	e004      	b.n	c7c6 <_usb_ep0_on_tansfer_fail+0x2e>
    c7bc:	683b      	ldr	r3, [r7, #0]
    c7be:	0018      	movs	r0, r3
    c7c0:	4b04      	ldr	r3, [pc, #16]	; (c7d4 <_usb_ep0_on_tansfer_fail+0x3c>)
    c7c2:	447b      	add	r3, pc
    c7c4:	4798      	blx	r3
    c7c6:	46c0      	nop			; (mov r8, r8)
    c7c8:	46bd      	mov	sp, r7
    c7ca:	b004      	add	sp, #16
    c7cc:	bd80      	pop	{r7, pc}
    c7ce:	46c0      	nop			; (mov r8, r8)
    c7d0:	ffffff23 	.word	0xffffff23
    c7d4:	ffffff73 	.word	0xffffff73

0000c7d8 <_usb_ep0_on_tansfer_ok>:
    c7d8:	b580      	push	{r7, lr}
    c7da:	b082      	sub	sp, #8
    c7dc:	af00      	add	r7, sp, #0
    c7de:	6078      	str	r0, [r7, #4]
    c7e0:	6039      	str	r1, [r7, #0]
    c7e2:	4b13      	ldr	r3, [pc, #76]	; (c830 <_usb_ep0_on_tansfer_ok+0x58>)
    c7e4:	447b      	add	r3, pc
    c7e6:	4a13      	ldr	r2, [pc, #76]	; (c834 <_usb_ep0_on_tansfer_ok+0x5c>)
    c7e8:	447a      	add	r2, pc
    c7ea:	7812      	ldrb	r2, [r2, #0]
    c7ec:	2a01      	cmp	r2, #1
    c7ee:	d105      	bne.n	c7fc <_usb_ep0_on_tansfer_ok+0x24>
    c7f0:	683b      	ldr	r3, [r7, #0]
    c7f2:	0018      	movs	r0, r3
    c7f4:	4b10      	ldr	r3, [pc, #64]	; (c838 <_usb_ep0_on_tansfer_ok+0x60>)
    c7f6:	447b      	add	r3, pc
    c7f8:	4798      	blx	r3
    c7fa:	e015      	b.n	c828 <_usb_ep0_on_tansfer_ok+0x50>
    c7fc:	4a0f      	ldr	r2, [pc, #60]	; (c83c <_usb_ep0_on_tansfer_ok+0x64>)
    c7fe:	447a      	add	r2, pc
    c800:	7812      	ldrb	r2, [r2, #0]
    c802:	2a02      	cmp	r2, #2
    c804:	d103      	bne.n	c80e <_usb_ep0_on_tansfer_ok+0x36>
    c806:	4b0e      	ldr	r3, [pc, #56]	; (c840 <_usb_ep0_on_tansfer_ok+0x68>)
    c808:	447b      	add	r3, pc
    c80a:	4798      	blx	r3
    c80c:	e00c      	b.n	c828 <_usb_ep0_on_tansfer_ok+0x50>
    c80e:	4a0d      	ldr	r2, [pc, #52]	; (c844 <_usb_ep0_on_tansfer_ok+0x6c>)
    c810:	589a      	ldr	r2, [r3, r2]
    c812:	6912      	ldr	r2, [r2, #16]
    c814:	2a00      	cmp	r2, #0
    c816:	d003      	beq.n	c820 <_usb_ep0_on_tansfer_ok+0x48>
    c818:	4a0a      	ldr	r2, [pc, #40]	; (c844 <_usb_ep0_on_tansfer_ok+0x6c>)
    c81a:	589b      	ldr	r3, [r3, r2]
    c81c:	691b      	ldr	r3, [r3, #16]
    c81e:	4798      	blx	r3
    c820:	4b09      	ldr	r3, [pc, #36]	; (c848 <_usb_ep0_on_tansfer_ok+0x70>)
    c822:	447b      	add	r3, pc
    c824:	2200      	movs	r2, #0
    c826:	701a      	strb	r2, [r3, #0]
    c828:	46c0      	nop			; (mov r8, r8)
    c82a:	46bd      	mov	sp, r7
    c82c:	b002      	add	sp, #8
    c82e:	bd80      	pop	{r7, pc}
    c830:	000055fc 	.word	0x000055fc
    c834:	1fff3db6 	.word	0x1fff3db6
    c838:	fffffbcb 	.word	0xfffffbcb
    c83c:	1fff3da0 	.word	0x1fff3da0
    c840:	fffffa6d 	.word	0xfffffa6d
    c844:	000001e8 	.word	0x000001e8
    c848:	1fff3d7c 	.word	0x1fff3d7c

0000c84c <udd_ctrl_ep_enable>:
    c84c:	b5b0      	push	{r4, r5, r7, lr}
    c84e:	b084      	sub	sp, #16
    c850:	af00      	add	r7, sp, #0
    c852:	6078      	str	r0, [r7, #4]
    c854:	4c2b      	ldr	r4, [pc, #172]	; (c904 <udd_ctrl_ep_enable+0xb8>)
    c856:	447c      	add	r4, pc
    c858:	230c      	movs	r3, #12
    c85a:	18fb      	adds	r3, r7, r3
    c85c:	0018      	movs	r0, r3
    c85e:	4b2a      	ldr	r3, [pc, #168]	; (c908 <udd_ctrl_ep_enable+0xbc>)
    c860:	58e3      	ldr	r3, [r4, r3]
    c862:	4798      	blx	r3
    c864:	230c      	movs	r3, #12
    c866:	18fb      	adds	r3, r7, r3
    c868:	2203      	movs	r2, #3
    c86a:	705a      	strb	r2, [r3, #1]
    c86c:	230c      	movs	r3, #12
    c86e:	18fa      	adds	r2, r7, r3
    c870:	687b      	ldr	r3, [r7, #4]
    c872:	0011      	movs	r1, r2
    c874:	0018      	movs	r0, r3
    c876:	4b25      	ldr	r3, [pc, #148]	; (c90c <udd_ctrl_ep_enable+0xc0>)
    c878:	58e3      	ldr	r3, [r4, r3]
    c87a:	4798      	blx	r3
    c87c:	4b24      	ldr	r3, [pc, #144]	; (c910 <udd_ctrl_ep_enable+0xc4>)
    c87e:	58e3      	ldr	r3, [r4, r3]
    c880:	001a      	movs	r2, r3
    c882:	687b      	ldr	r3, [r7, #4]
    c884:	0011      	movs	r1, r2
    c886:	0018      	movs	r0, r3
    c888:	4b22      	ldr	r3, [pc, #136]	; (c914 <udd_ctrl_ep_enable+0xc8>)
    c88a:	58e3      	ldr	r3, [r4, r3]
    c88c:	4798      	blx	r3
    c88e:	4b22      	ldr	r3, [pc, #136]	; (c918 <udd_ctrl_ep_enable+0xcc>)
    c890:	447b      	add	r3, pc
    c892:	6878      	ldr	r0, [r7, #4]
    c894:	2202      	movs	r2, #2
    c896:	2100      	movs	r1, #0
    c898:	4d20      	ldr	r5, [pc, #128]	; (c91c <udd_ctrl_ep_enable+0xd0>)
    c89a:	5965      	ldr	r5, [r4, r5]
    c89c:	47a8      	blx	r5
    c89e:	4b20      	ldr	r3, [pc, #128]	; (c920 <udd_ctrl_ep_enable+0xd4>)
    c8a0:	447b      	add	r3, pc
    c8a2:	6878      	ldr	r0, [r7, #4]
    c8a4:	2200      	movs	r2, #0
    c8a6:	2100      	movs	r1, #0
    c8a8:	4d1c      	ldr	r5, [pc, #112]	; (c91c <udd_ctrl_ep_enable+0xd0>)
    c8aa:	5965      	ldr	r5, [r4, r5]
    c8ac:	47a8      	blx	r5
    c8ae:	4b1d      	ldr	r3, [pc, #116]	; (c924 <udd_ctrl_ep_enable+0xd8>)
    c8b0:	447b      	add	r3, pc
    c8b2:	6878      	ldr	r0, [r7, #4]
    c8b4:	2201      	movs	r2, #1
    c8b6:	2100      	movs	r1, #0
    c8b8:	4d18      	ldr	r5, [pc, #96]	; (c91c <udd_ctrl_ep_enable+0xd0>)
    c8ba:	5965      	ldr	r5, [r4, r5]
    c8bc:	47a8      	blx	r5
    c8be:	687b      	ldr	r3, [r7, #4]
    c8c0:	2202      	movs	r2, #2
    c8c2:	2100      	movs	r1, #0
    c8c4:	0018      	movs	r0, r3
    c8c6:	4b18      	ldr	r3, [pc, #96]	; (c928 <udd_ctrl_ep_enable+0xdc>)
    c8c8:	58e3      	ldr	r3, [r4, r3]
    c8ca:	4798      	blx	r3
    c8cc:	687b      	ldr	r3, [r7, #4]
    c8ce:	2200      	movs	r2, #0
    c8d0:	2100      	movs	r1, #0
    c8d2:	0018      	movs	r0, r3
    c8d4:	4b14      	ldr	r3, [pc, #80]	; (c928 <udd_ctrl_ep_enable+0xdc>)
    c8d6:	58e3      	ldr	r3, [r4, r3]
    c8d8:	4798      	blx	r3
    c8da:	687b      	ldr	r3, [r7, #4]
    c8dc:	2201      	movs	r2, #1
    c8de:	2100      	movs	r1, #0
    c8e0:	0018      	movs	r0, r3
    c8e2:	4b11      	ldr	r3, [pc, #68]	; (c928 <udd_ctrl_ep_enable+0xdc>)
    c8e4:	58e3      	ldr	r3, [r4, r3]
    c8e6:	4798      	blx	r3
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	2101      	movs	r1, #1
    c8ec:	0018      	movs	r0, r3
    c8ee:	4b0f      	ldr	r3, [pc, #60]	; (c92c <udd_ctrl_ep_enable+0xe0>)
    c8f0:	447b      	add	r3, pc
    c8f2:	4798      	blx	r3
    c8f4:	4b0e      	ldr	r3, [pc, #56]	; (c930 <udd_ctrl_ep_enable+0xe4>)
    c8f6:	447b      	add	r3, pc
    c8f8:	2200      	movs	r2, #0
    c8fa:	701a      	strb	r2, [r3, #0]
    c8fc:	46c0      	nop			; (mov r8, r8)
    c8fe:	46bd      	mov	sp, r7
    c900:	b004      	add	sp, #16
    c902:	bdb0      	pop	{r4, r5, r7, pc}
    c904:	0000558a 	.word	0x0000558a
    c908:	00000104 	.word	0x00000104
    c90c:	00000074 	.word	0x00000074
    c910:	000002bc 	.word	0x000002bc
    c914:	000000c0 	.word	0x000000c0
    c918:	fffffd0d 	.word	0xfffffd0d
    c91c:	00000154 	.word	0x00000154
    c920:	ffffff35 	.word	0xffffff35
    c924:	fffffee5 	.word	0xfffffee5
    c928:	000002b0 	.word	0x000002b0
    c92c:	ffffea11 	.word	0xffffea11
    c930:	1fff3ca8 	.word	0x1fff3ca8

0000c934 <_usb_on_suspend>:
    c934:	b590      	push	{r4, r7, lr}
    c936:	b083      	sub	sp, #12
    c938:	af00      	add	r7, sp, #0
    c93a:	6078      	str	r0, [r7, #4]
    c93c:	6039      	str	r1, [r7, #0]
    c93e:	4c0c      	ldr	r4, [pc, #48]	; (c970 <_usb_on_suspend+0x3c>)
    c940:	447c      	add	r4, pc
    c942:	4b0c      	ldr	r3, [pc, #48]	; (c974 <_usb_on_suspend+0x40>)
    c944:	58e3      	ldr	r3, [r4, r3]
    c946:	2104      	movs	r1, #4
    c948:	0018      	movs	r0, r3
    c94a:	4b0b      	ldr	r3, [pc, #44]	; (c978 <_usb_on_suspend+0x44>)
    c94c:	58e3      	ldr	r3, [r4, r3]
    c94e:	4798      	blx	r3
    c950:	4b08      	ldr	r3, [pc, #32]	; (c974 <_usb_on_suspend+0x40>)
    c952:	58e3      	ldr	r3, [r4, r3]
    c954:	2102      	movs	r1, #2
    c956:	0018      	movs	r0, r3
    c958:	4b08      	ldr	r3, [pc, #32]	; (c97c <_usb_on_suspend+0x48>)
    c95a:	58e3      	ldr	r3, [r4, r3]
    c95c:	4798      	blx	r3
    c95e:	2001      	movs	r0, #1
    c960:	4b07      	ldr	r3, [pc, #28]	; (c980 <_usb_on_suspend+0x4c>)
    c962:	447b      	add	r3, pc
    c964:	4798      	blx	r3
    c966:	46c0      	nop			; (mov r8, r8)
    c968:	46bd      	mov	sp, r7
    c96a:	b003      	add	sp, #12
    c96c:	bd90      	pop	{r4, r7, pc}
    c96e:	46c0      	nop			; (mov r8, r8)
    c970:	000054a0 	.word	0x000054a0
    c974:	00000078 	.word	0x00000078
    c978:	00000054 	.word	0x00000054
    c97c:	0000016c 	.word	0x0000016c
    c980:	ffffeadb 	.word	0xffffeadb

0000c984 <_usb_device_lpm_suspend>:
    c984:	b590      	push	{r4, r7, lr}
    c986:	b085      	sub	sp, #20
    c988:	af00      	add	r7, sp, #0
    c98a:	6078      	str	r0, [r7, #4]
    c98c:	6039      	str	r1, [r7, #0]
    c98e:	4c10      	ldr	r4, [pc, #64]	; (c9d0 <_usb_device_lpm_suspend+0x4c>)
    c990:	447c      	add	r4, pc
    c992:	683b      	ldr	r3, [r7, #0]
    c994:	60fb      	str	r3, [r7, #12]
    c996:	4b0f      	ldr	r3, [pc, #60]	; (c9d4 <_usb_device_lpm_suspend+0x50>)
    c998:	58e3      	ldr	r3, [r4, r3]
    c99a:	2106      	movs	r1, #6
    c99c:	0018      	movs	r0, r3
    c99e:	4b0e      	ldr	r3, [pc, #56]	; (c9d8 <_usb_device_lpm_suspend+0x54>)
    c9a0:	58e3      	ldr	r3, [r4, r3]
    c9a2:	4798      	blx	r3
    c9a4:	4b0b      	ldr	r3, [pc, #44]	; (c9d4 <_usb_device_lpm_suspend+0x50>)
    c9a6:	58e3      	ldr	r3, [r4, r3]
    c9a8:	2104      	movs	r1, #4
    c9aa:	0018      	movs	r0, r3
    c9ac:	4b0a      	ldr	r3, [pc, #40]	; (c9d8 <_usb_device_lpm_suspend+0x54>)
    c9ae:	58e3      	ldr	r3, [r4, r3]
    c9b0:	4798      	blx	r3
    c9b2:	4b08      	ldr	r3, [pc, #32]	; (c9d4 <_usb_device_lpm_suspend+0x50>)
    c9b4:	58e3      	ldr	r3, [r4, r3]
    c9b6:	2102      	movs	r1, #2
    c9b8:	0018      	movs	r0, r3
    c9ba:	4b08      	ldr	r3, [pc, #32]	; (c9dc <_usb_device_lpm_suspend+0x58>)
    c9bc:	58e3      	ldr	r3, [r4, r3]
    c9be:	4798      	blx	r3
    c9c0:	2002      	movs	r0, #2
    c9c2:	4b07      	ldr	r3, [pc, #28]	; (c9e0 <_usb_device_lpm_suspend+0x5c>)
    c9c4:	447b      	add	r3, pc
    c9c6:	4798      	blx	r3
    c9c8:	46c0      	nop			; (mov r8, r8)
    c9ca:	46bd      	mov	sp, r7
    c9cc:	b005      	add	sp, #20
    c9ce:	bd90      	pop	{r4, r7, pc}
    c9d0:	00005450 	.word	0x00005450
    c9d4:	00000078 	.word	0x00000078
    c9d8:	00000054 	.word	0x00000054
    c9dc:	0000016c 	.word	0x0000016c
    c9e0:	ffffea79 	.word	0xffffea79

0000c9e4 <_usb_on_sof_notify>:
    c9e4:	b580      	push	{r7, lr}
    c9e6:	b082      	sub	sp, #8
    c9e8:	af00      	add	r7, sp, #0
    c9ea:	6078      	str	r0, [r7, #4]
    c9ec:	6039      	str	r1, [r7, #0]
    c9ee:	4a04      	ldr	r2, [pc, #16]	; (ca00 <_usb_on_sof_notify+0x1c>)
    c9f0:	447a      	add	r2, pc
    c9f2:	4b04      	ldr	r3, [pc, #16]	; (ca04 <_usb_on_sof_notify+0x20>)
    c9f4:	58d3      	ldr	r3, [r2, r3]
    c9f6:	4798      	blx	r3
    c9f8:	46c0      	nop			; (mov r8, r8)
    c9fa:	46bd      	mov	sp, r7
    c9fc:	b002      	add	sp, #8
    c9fe:	bd80      	pop	{r7, pc}
    ca00:	000053f0 	.word	0x000053f0
    ca04:	00000190 	.word	0x00000190

0000ca08 <_usb_on_bus_reset>:
    ca08:	b580      	push	{r7, lr}
    ca0a:	b082      	sub	sp, #8
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	6078      	str	r0, [r7, #4]
    ca10:	6039      	str	r1, [r7, #0]
    ca12:	4a0a      	ldr	r2, [pc, #40]	; (ca3c <_usb_on_bus_reset+0x34>)
    ca14:	447a      	add	r2, pc
    ca16:	4b0a      	ldr	r3, [pc, #40]	; (ca40 <_usb_on_bus_reset+0x38>)
    ca18:	58d3      	ldr	r3, [r2, r3]
    ca1a:	4798      	blx	r3
    ca1c:	687b      	ldr	r3, [r7, #4]
    ca1e:	2100      	movs	r1, #0
    ca20:	0018      	movs	r0, r3
    ca22:	4b08      	ldr	r3, [pc, #32]	; (ca44 <_usb_on_bus_reset+0x3c>)
    ca24:	447b      	add	r3, pc
    ca26:	4798      	blx	r3
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	0018      	movs	r0, r3
    ca2c:	4b06      	ldr	r3, [pc, #24]	; (ca48 <_usb_on_bus_reset+0x40>)
    ca2e:	447b      	add	r3, pc
    ca30:	4798      	blx	r3
    ca32:	46c0      	nop			; (mov r8, r8)
    ca34:	46bd      	mov	sp, r7
    ca36:	b002      	add	sp, #8
    ca38:	bd80      	pop	{r7, pc}
    ca3a:	46c0      	nop			; (mov r8, r8)
    ca3c:	000053cc 	.word	0x000053cc
    ca40:	000000a0 	.word	0x000000a0
    ca44:	ffffe881 	.word	0xffffe881
    ca48:	fffffe1b 	.word	0xfffffe1b

0000ca4c <_usb_on_wakeup>:
    ca4c:	b590      	push	{r4, r7, lr}
    ca4e:	b083      	sub	sp, #12
    ca50:	af00      	add	r7, sp, #0
    ca52:	6078      	str	r0, [r7, #4]
    ca54:	6039      	str	r1, [r7, #0]
    ca56:	4c16      	ldr	r4, [pc, #88]	; (cab0 <_usb_on_wakeup+0x64>)
    ca58:	447c      	add	r4, pc
    ca5a:	4b16      	ldr	r3, [pc, #88]	; (cab4 <_usb_on_wakeup+0x68>)
    ca5c:	447b      	add	r3, pc
    ca5e:	4798      	blx	r3
    ca60:	4b15      	ldr	r3, [pc, #84]	; (cab8 <_usb_on_wakeup+0x6c>)
    ca62:	58e3      	ldr	r3, [r4, r3]
    ca64:	2102      	movs	r1, #2
    ca66:	0018      	movs	r0, r3
    ca68:	4b14      	ldr	r3, [pc, #80]	; (cabc <_usb_on_wakeup+0x70>)
    ca6a:	58e3      	ldr	r3, [r4, r3]
    ca6c:	4798      	blx	r3
    ca6e:	4b12      	ldr	r3, [pc, #72]	; (cab8 <_usb_on_wakeup+0x6c>)
    ca70:	58e3      	ldr	r3, [r4, r3]
    ca72:	2104      	movs	r1, #4
    ca74:	0018      	movs	r0, r3
    ca76:	4b12      	ldr	r3, [pc, #72]	; (cac0 <_usb_on_wakeup+0x74>)
    ca78:	58e3      	ldr	r3, [r4, r3]
    ca7a:	4798      	blx	r3
    ca7c:	4b11      	ldr	r3, [pc, #68]	; (cac4 <_usb_on_wakeup+0x78>)
    ca7e:	447b      	add	r3, pc
    ca80:	001a      	movs	r2, r3
    ca82:	4b0d      	ldr	r3, [pc, #52]	; (cab8 <_usb_on_wakeup+0x6c>)
    ca84:	58e3      	ldr	r3, [r4, r3]
    ca86:	2106      	movs	r1, #6
    ca88:	0018      	movs	r0, r3
    ca8a:	4b0f      	ldr	r3, [pc, #60]	; (cac8 <_usb_on_wakeup+0x7c>)
    ca8c:	58e3      	ldr	r3, [r4, r3]
    ca8e:	4798      	blx	r3
    ca90:	4b09      	ldr	r3, [pc, #36]	; (cab8 <_usb_on_wakeup+0x6c>)
    ca92:	58e3      	ldr	r3, [r4, r3]
    ca94:	2106      	movs	r1, #6
    ca96:	0018      	movs	r0, r3
    ca98:	4b09      	ldr	r3, [pc, #36]	; (cac0 <_usb_on_wakeup+0x74>)
    ca9a:	58e3      	ldr	r3, [r4, r3]
    ca9c:	4798      	blx	r3
    ca9e:	2003      	movs	r0, #3
    caa0:	4b0a      	ldr	r3, [pc, #40]	; (cacc <_usb_on_wakeup+0x80>)
    caa2:	447b      	add	r3, pc
    caa4:	4798      	blx	r3
    caa6:	46c0      	nop			; (mov r8, r8)
    caa8:	46bd      	mov	sp, r7
    caaa:	b003      	add	sp, #12
    caac:	bd90      	pop	{r4, r7, pc}
    caae:	46c0      	nop			; (mov r8, r8)
    cab0:	00005388 	.word	0x00005388
    cab4:	ffffe9a5 	.word	0xffffe9a5
    cab8:	00000078 	.word	0x00000078
    cabc:	00000054 	.word	0x00000054
    cac0:	0000016c 	.word	0x0000016c
    cac4:	ffffff03 	.word	0xffffff03
    cac8:	0000003c 	.word	0x0000003c
    cacc:	ffffe99b 	.word	0xffffe99b

0000cad0 <udd_attach>:
    cad0:	b5b0      	push	{r4, r5, r7, lr}
    cad2:	af00      	add	r7, sp, #0
    cad4:	4c31      	ldr	r4, [pc, #196]	; (cb9c <udd_attach+0xcc>)
    cad6:	447c      	add	r4, pc
    cad8:	2003      	movs	r0, #3
    cada:	4b31      	ldr	r3, [pc, #196]	; (cba0 <udd_attach+0xd0>)
    cadc:	447b      	add	r3, pc
    cade:	4798      	blx	r3
    cae0:	4b30      	ldr	r3, [pc, #192]	; (cba4 <udd_attach+0xd4>)
    cae2:	58e3      	ldr	r3, [r4, r3]
    cae4:	0018      	movs	r0, r3
    cae6:	4b30      	ldr	r3, [pc, #192]	; (cba8 <udd_attach+0xd8>)
    cae8:	447b      	add	r3, pc
    caea:	4798      	blx	r3
    caec:	4b2f      	ldr	r3, [pc, #188]	; (cbac <udd_attach+0xdc>)
    caee:	447b      	add	r3, pc
    caf0:	001a      	movs	r2, r3
    caf2:	4b2c      	ldr	r3, [pc, #176]	; (cba4 <udd_attach+0xd4>)
    caf4:	58e3      	ldr	r3, [r4, r3]
    caf6:	2104      	movs	r1, #4
    caf8:	0018      	movs	r0, r3
    cafa:	4b2d      	ldr	r3, [pc, #180]	; (cbb0 <udd_attach+0xe0>)
    cafc:	58e3      	ldr	r3, [r4, r3]
    cafe:	4798      	blx	r3
    cb00:	4b2c      	ldr	r3, [pc, #176]	; (cbb4 <udd_attach+0xe4>)
    cb02:	447b      	add	r3, pc
    cb04:	001a      	movs	r2, r3
    cb06:	4b27      	ldr	r3, [pc, #156]	; (cba4 <udd_attach+0xd4>)
    cb08:	58e3      	ldr	r3, [r4, r3]
    cb0a:	2100      	movs	r1, #0
    cb0c:	0018      	movs	r0, r3
    cb0e:	4b28      	ldr	r3, [pc, #160]	; (cbb0 <udd_attach+0xe0>)
    cb10:	58e3      	ldr	r3, [r4, r3]
    cb12:	4798      	blx	r3
    cb14:	4b28      	ldr	r3, [pc, #160]	; (cbb8 <udd_attach+0xe8>)
    cb16:	447b      	add	r3, pc
    cb18:	001a      	movs	r2, r3
    cb1a:	4b22      	ldr	r3, [pc, #136]	; (cba4 <udd_attach+0xd4>)
    cb1c:	58e3      	ldr	r3, [r4, r3]
    cb1e:	2101      	movs	r1, #1
    cb20:	0018      	movs	r0, r3
    cb22:	4b23      	ldr	r3, [pc, #140]	; (cbb0 <udd_attach+0xe0>)
    cb24:	58e3      	ldr	r3, [r4, r3]
    cb26:	4798      	blx	r3
    cb28:	4b24      	ldr	r3, [pc, #144]	; (cbbc <udd_attach+0xec>)
    cb2a:	447b      	add	r3, pc
    cb2c:	001a      	movs	r2, r3
    cb2e:	4b1d      	ldr	r3, [pc, #116]	; (cba4 <udd_attach+0xd4>)
    cb30:	58e3      	ldr	r3, [r4, r3]
    cb32:	2102      	movs	r1, #2
    cb34:	0018      	movs	r0, r3
    cb36:	4b1e      	ldr	r3, [pc, #120]	; (cbb0 <udd_attach+0xe0>)
    cb38:	58e3      	ldr	r3, [r4, r3]
    cb3a:	4798      	blx	r3
    cb3c:	4b19      	ldr	r3, [pc, #100]	; (cba4 <udd_attach+0xd4>)
    cb3e:	58e3      	ldr	r3, [r4, r3]
    cb40:	2104      	movs	r1, #4
    cb42:	0018      	movs	r0, r3
    cb44:	4b1e      	ldr	r3, [pc, #120]	; (cbc0 <udd_attach+0xf0>)
    cb46:	58e3      	ldr	r3, [r4, r3]
    cb48:	4798      	blx	r3
    cb4a:	4b16      	ldr	r3, [pc, #88]	; (cba4 <udd_attach+0xd4>)
    cb4c:	58e3      	ldr	r3, [r4, r3]
    cb4e:	2100      	movs	r1, #0
    cb50:	0018      	movs	r0, r3
    cb52:	4b1b      	ldr	r3, [pc, #108]	; (cbc0 <udd_attach+0xf0>)
    cb54:	58e3      	ldr	r3, [r4, r3]
    cb56:	4798      	blx	r3
    cb58:	4b12      	ldr	r3, [pc, #72]	; (cba4 <udd_attach+0xd4>)
    cb5a:	58e3      	ldr	r3, [r4, r3]
    cb5c:	2101      	movs	r1, #1
    cb5e:	0018      	movs	r0, r3
    cb60:	4b17      	ldr	r3, [pc, #92]	; (cbc0 <udd_attach+0xf0>)
    cb62:	58e3      	ldr	r3, [r4, r3]
    cb64:	4798      	blx	r3
    cb66:	4b0f      	ldr	r3, [pc, #60]	; (cba4 <udd_attach+0xd4>)
    cb68:	58e3      	ldr	r3, [r4, r3]
    cb6a:	2102      	movs	r1, #2
    cb6c:	0018      	movs	r0, r3
    cb6e:	4b14      	ldr	r3, [pc, #80]	; (cbc0 <udd_attach+0xf0>)
    cb70:	58e3      	ldr	r3, [r4, r3]
    cb72:	4798      	blx	r3
    cb74:	4b13      	ldr	r3, [pc, #76]	; (cbc4 <udd_attach+0xf4>)
    cb76:	447b      	add	r3, pc
    cb78:	001a      	movs	r2, r3
    cb7a:	4b0a      	ldr	r3, [pc, #40]	; (cba4 <udd_attach+0xd4>)
    cb7c:	58e3      	ldr	r3, [r4, r3]
    cb7e:	2106      	movs	r1, #6
    cb80:	0018      	movs	r0, r3
    cb82:	4b0b      	ldr	r3, [pc, #44]	; (cbb0 <udd_attach+0xe0>)
    cb84:	58e3      	ldr	r3, [r4, r3]
    cb86:	4798      	blx	r3
    cb88:	4b06      	ldr	r3, [pc, #24]	; (cba4 <udd_attach+0xd4>)
    cb8a:	58e3      	ldr	r3, [r4, r3]
    cb8c:	2106      	movs	r1, #6
    cb8e:	0018      	movs	r0, r3
    cb90:	4b0b      	ldr	r3, [pc, #44]	; (cbc0 <udd_attach+0xf0>)
    cb92:	58e3      	ldr	r3, [r4, r3]
    cb94:	4798      	blx	r3
    cb96:	46c0      	nop			; (mov r8, r8)
    cb98:	46bd      	mov	sp, r7
    cb9a:	bdb0      	pop	{r4, r5, r7, pc}
    cb9c:	0000530a 	.word	0x0000530a
    cba0:	ffffe961 	.word	0xffffe961
    cba4:	00000078 	.word	0x00000078
    cba8:	ffffe77d 	.word	0xffffe77d
    cbac:	fffffe43 	.word	0xfffffe43
    cbb0:	0000003c 	.word	0x0000003c
    cbb4:	fffffedf 	.word	0xfffffedf
    cbb8:	fffffeef 	.word	0xfffffeef
    cbbc:	ffffff1f 	.word	0xffffff1f
    cbc0:	0000016c 	.word	0x0000016c
    cbc4:	fffffe0b 	.word	0xfffffe0b

0000cbc8 <udd_enable>:
    cbc8:	b590      	push	{r4, r7, lr}
    cbca:	b083      	sub	sp, #12
    cbcc:	af00      	add	r7, sp, #0
    cbce:	4c18      	ldr	r4, [pc, #96]	; (cc30 <udd_enable+0x68>)
    cbd0:	447c      	add	r4, pc
    cbd2:	4b18      	ldr	r3, [pc, #96]	; (cc34 <udd_enable+0x6c>)
    cbd4:	447b      	add	r3, pc
    cbd6:	4798      	blx	r3
    cbd8:	0003      	movs	r3, r0
    cbda:	607b      	str	r3, [r7, #4]
    cbdc:	003b      	movs	r3, r7
    cbde:	0018      	movs	r0, r3
    cbe0:	4b15      	ldr	r3, [pc, #84]	; (cc38 <udd_enable+0x70>)
    cbe2:	58e3      	ldr	r3, [r4, r3]
    cbe4:	4798      	blx	r3
    cbe6:	003b      	movs	r3, r7
    cbe8:	2200      	movs	r2, #0
    cbea:	709a      	strb	r2, [r3, #2]
    cbec:	003a      	movs	r2, r7
    cbee:	4913      	ldr	r1, [pc, #76]	; (cc3c <udd_enable+0x74>)
    cbf0:	4b13      	ldr	r3, [pc, #76]	; (cc40 <udd_enable+0x78>)
    cbf2:	58e3      	ldr	r3, [r4, r3]
    cbf4:	0018      	movs	r0, r3
    cbf6:	4b13      	ldr	r3, [pc, #76]	; (cc44 <udd_enable+0x7c>)
    cbf8:	58e3      	ldr	r3, [r4, r3]
    cbfa:	4798      	blx	r3
    cbfc:	4b10      	ldr	r3, [pc, #64]	; (cc40 <udd_enable+0x78>)
    cbfe:	58e3      	ldr	r3, [r4, r3]
    cc00:	0018      	movs	r0, r3
    cc02:	4b11      	ldr	r3, [pc, #68]	; (cc48 <udd_enable+0x80>)
    cc04:	58e3      	ldr	r3, [r4, r3]
    cc06:	4798      	blx	r3
    cc08:	4b10      	ldr	r3, [pc, #64]	; (cc4c <udd_enable+0x84>)
    cc0a:	447b      	add	r3, pc
    cc0c:	4798      	blx	r3
    cc0e:	2001      	movs	r0, #1
    cc10:	4b0f      	ldr	r3, [pc, #60]	; (cc50 <udd_enable+0x88>)
    cc12:	447b      	add	r3, pc
    cc14:	4798      	blx	r3
    cc16:	4b0f      	ldr	r3, [pc, #60]	; (cc54 <udd_enable+0x8c>)
    cc18:	58e3      	ldr	r3, [r4, r3]
    cc1a:	4798      	blx	r3
    cc1c:	687b      	ldr	r3, [r7, #4]
    cc1e:	0018      	movs	r0, r3
    cc20:	4b0d      	ldr	r3, [pc, #52]	; (cc58 <udd_enable+0x90>)
    cc22:	447b      	add	r3, pc
    cc24:	4798      	blx	r3
    cc26:	46c0      	nop			; (mov r8, r8)
    cc28:	46bd      	mov	sp, r7
    cc2a:	b003      	add	sp, #12
    cc2c:	bd90      	pop	{r4, r7, pc}
    cc2e:	46c0      	nop			; (mov r8, r8)
    cc30:	00005210 	.word	0x00005210
    cc34:	ffffe601 	.word	0xffffe601
    cc38:	000000b4 	.word	0x000000b4
    cc3c:	41005000 	.word	0x41005000
    cc40:	00000078 	.word	0x00000078
    cc44:	000000bc 	.word	0x000000bc
    cc48:	000002e4 	.word	0x000002e4
    cc4c:	ffffe7f7 	.word	0xffffe7f7
    cc50:	ffffe82b 	.word	0xffffe82b
    cc54:	00000248 	.word	0x00000248
    cc58:	ffffe607 	.word	0xffffe607

0000cc5c <system_gclk_chan_get_config_defaults>:
    cc5c:	b580      	push	{r7, lr}
    cc5e:	b082      	sub	sp, #8
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
    cc64:	687b      	ldr	r3, [r7, #4]
    cc66:	2200      	movs	r2, #0
    cc68:	701a      	strb	r2, [r3, #0]
    cc6a:	46c0      	nop			; (mov r8, r8)
    cc6c:	46bd      	mov	sp, r7
    cc6e:	b002      	add	sp, #8
    cc70:	bd80      	pop	{r7, pc}
	...

0000cc74 <system_apb_clock_set_mask>:
    cc74:	b580      	push	{r7, lr}
    cc76:	b082      	sub	sp, #8
    cc78:	af00      	add	r7, sp, #0
    cc7a:	0002      	movs	r2, r0
    cc7c:	6039      	str	r1, [r7, #0]
    cc7e:	1dfb      	adds	r3, r7, #7
    cc80:	701a      	strb	r2, [r3, #0]
    cc82:	1dfb      	adds	r3, r7, #7
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	2b01      	cmp	r3, #1
    cc88:	d00a      	beq.n	cca0 <system_apb_clock_set_mask+0x2c>
    cc8a:	2b02      	cmp	r3, #2
    cc8c:	d00f      	beq.n	ccae <system_apb_clock_set_mask+0x3a>
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d114      	bne.n	ccbc <system_apb_clock_set_mask+0x48>
    cc92:	4b0e      	ldr	r3, [pc, #56]	; (cccc <system_apb_clock_set_mask+0x58>)
    cc94:	4a0d      	ldr	r2, [pc, #52]	; (cccc <system_apb_clock_set_mask+0x58>)
    cc96:	6991      	ldr	r1, [r2, #24]
    cc98:	683a      	ldr	r2, [r7, #0]
    cc9a:	430a      	orrs	r2, r1
    cc9c:	619a      	str	r2, [r3, #24]
    cc9e:	e00f      	b.n	ccc0 <system_apb_clock_set_mask+0x4c>
    cca0:	4b0a      	ldr	r3, [pc, #40]	; (cccc <system_apb_clock_set_mask+0x58>)
    cca2:	4a0a      	ldr	r2, [pc, #40]	; (cccc <system_apb_clock_set_mask+0x58>)
    cca4:	69d1      	ldr	r1, [r2, #28]
    cca6:	683a      	ldr	r2, [r7, #0]
    cca8:	430a      	orrs	r2, r1
    ccaa:	61da      	str	r2, [r3, #28]
    ccac:	e008      	b.n	ccc0 <system_apb_clock_set_mask+0x4c>
    ccae:	4b07      	ldr	r3, [pc, #28]	; (cccc <system_apb_clock_set_mask+0x58>)
    ccb0:	4a06      	ldr	r2, [pc, #24]	; (cccc <system_apb_clock_set_mask+0x58>)
    ccb2:	6a11      	ldr	r1, [r2, #32]
    ccb4:	683a      	ldr	r2, [r7, #0]
    ccb6:	430a      	orrs	r2, r1
    ccb8:	621a      	str	r2, [r3, #32]
    ccba:	e001      	b.n	ccc0 <system_apb_clock_set_mask+0x4c>
    ccbc:	2317      	movs	r3, #23
    ccbe:	e000      	b.n	ccc2 <system_apb_clock_set_mask+0x4e>
    ccc0:	2300      	movs	r3, #0
    ccc2:	0018      	movs	r0, r3
    ccc4:	46bd      	mov	sp, r7
    ccc6:	b002      	add	sp, #8
    ccc8:	bd80      	pop	{r7, pc}
    ccca:	46c0      	nop			; (mov r8, r8)
    cccc:	40000400 	.word	0x40000400

0000ccd0 <system_pinmux_get_config_defaults>:
    ccd0:	b580      	push	{r7, lr}
    ccd2:	b082      	sub	sp, #8
    ccd4:	af00      	add	r7, sp, #0
    ccd6:	6078      	str	r0, [r7, #4]
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	2280      	movs	r2, #128	; 0x80
    ccdc:	701a      	strb	r2, [r3, #0]
    ccde:	687b      	ldr	r3, [r7, #4]
    cce0:	2200      	movs	r2, #0
    cce2:	705a      	strb	r2, [r3, #1]
    cce4:	687b      	ldr	r3, [r7, #4]
    cce6:	2201      	movs	r2, #1
    cce8:	709a      	strb	r2, [r3, #2]
    ccea:	687b      	ldr	r3, [r7, #4]
    ccec:	2200      	movs	r2, #0
    ccee:	70da      	strb	r2, [r3, #3]
    ccf0:	46c0      	nop			; (mov r8, r8)
    ccf2:	46bd      	mov	sp, r7
    ccf4:	b002      	add	sp, #8
    ccf6:	bd80      	pop	{r7, pc}

0000ccf8 <system_interrupt_enable>:
    ccf8:	b580      	push	{r7, lr}
    ccfa:	b082      	sub	sp, #8
    ccfc:	af00      	add	r7, sp, #0
    ccfe:	0002      	movs	r2, r0
    cd00:	1dfb      	adds	r3, r7, #7
    cd02:	701a      	strb	r2, [r3, #0]
    cd04:	4b06      	ldr	r3, [pc, #24]	; (cd20 <system_interrupt_enable+0x28>)
    cd06:	1dfa      	adds	r2, r7, #7
    cd08:	7812      	ldrb	r2, [r2, #0]
    cd0a:	0011      	movs	r1, r2
    cd0c:	221f      	movs	r2, #31
    cd0e:	400a      	ands	r2, r1
    cd10:	2101      	movs	r1, #1
    cd12:	4091      	lsls	r1, r2
    cd14:	000a      	movs	r2, r1
    cd16:	601a      	str	r2, [r3, #0]
    cd18:	46c0      	nop			; (mov r8, r8)
    cd1a:	46bd      	mov	sp, r7
    cd1c:	b002      	add	sp, #8
    cd1e:	bd80      	pop	{r7, pc}
    cd20:	e000e100 	.word	0xe000e100

0000cd24 <_usb_host_interrupt_handler>:
    cd24:	b590      	push	{r4, r7, lr}
    cd26:	b083      	sub	sp, #12
    cd28:	af00      	add	r7, sp, #0
    cd2a:	4c44      	ldr	r4, [pc, #272]	; (ce3c <_usb_host_interrupt_handler+0x118>)
    cd2c:	447c      	add	r4, pc
    cd2e:	4b44      	ldr	r3, [pc, #272]	; (ce40 <_usb_host_interrupt_handler+0x11c>)
    cd30:	447b      	add	r3, pc
    cd32:	681b      	ldr	r3, [r3, #0]
    cd34:	681b      	ldr	r3, [r3, #0]
    cd36:	8c1b      	ldrh	r3, [r3, #32]
    cd38:	b29b      	uxth	r3, r3
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	d00c      	beq.n	cd58 <_usb_host_interrupt_handler+0x34>
    cd3e:	4b41      	ldr	r3, [pc, #260]	; (ce44 <_usb_host_interrupt_handler+0x120>)
    cd40:	447b      	add	r3, pc
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	8c1b      	ldrh	r3, [r3, #32]
    cd48:	b29b      	uxth	r3, r3
    cd4a:	001a      	movs	r2, r3
    cd4c:	4b3e      	ldr	r3, [pc, #248]	; (ce48 <_usb_host_interrupt_handler+0x124>)
    cd4e:	58e3      	ldr	r3, [r4, r3]
    cd50:	0010      	movs	r0, r2
    cd52:	4798      	blx	r3
    cd54:	0003      	movs	r3, r0
    cd56:	e000      	b.n	cd5a <_usb_host_interrupt_handler+0x36>
    cd58:	2320      	movs	r3, #32
    cd5a:	607b      	str	r3, [r7, #4]
    cd5c:	687b      	ldr	r3, [r7, #4]
    cd5e:	2b1f      	cmp	r3, #31
    cd60:	d900      	bls.n	cd64 <_usb_host_interrupt_handler+0x40>
    cd62:	e1f5      	b.n	d150 <_usb_host_interrupt_handler+0x42c>
    cd64:	4b39      	ldr	r3, [pc, #228]	; (ce4c <_usb_host_interrupt_handler+0x128>)
    cd66:	447b      	add	r3, pc
    cd68:	681b      	ldr	r3, [r3, #0]
    cd6a:	681a      	ldr	r2, [r3, #0]
    cd6c:	687b      	ldr	r3, [r7, #4]
    cd6e:	3308      	adds	r3, #8
    cd70:	015b      	lsls	r3, r3, #5
    cd72:	18d3      	adds	r3, r2, r3
    cd74:	3307      	adds	r3, #7
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	b2db      	uxtb	r3, r3
    cd7a:	603b      	str	r3, [r7, #0]
    cd7c:	683b      	ldr	r3, [r7, #0]
    cd7e:	2203      	movs	r2, #3
    cd80:	4013      	ands	r3, r2
    cd82:	d100      	bne.n	cd86 <_usb_host_interrupt_handler+0x62>
    cd84:	e0b9      	b.n	cefa <_usb_host_interrupt_handler+0x1d6>
    cd86:	2201      	movs	r2, #1
    cd88:	687b      	ldr	r3, [r7, #4]
    cd8a:	409a      	lsls	r2, r3
    cd8c:	0013      	movs	r3, r2
    cd8e:	43db      	mvns	r3, r3
    cd90:	001a      	movs	r2, r3
    cd92:	4b2f      	ldr	r3, [pc, #188]	; (ce50 <_usb_host_interrupt_handler+0x12c>)
    cd94:	58e3      	ldr	r3, [r4, r3]
    cd96:	681b      	ldr	r3, [r3, #0]
    cd98:	401a      	ands	r2, r3
    cd9a:	4b2d      	ldr	r3, [pc, #180]	; (ce50 <_usb_host_interrupt_handler+0x12c>)
    cd9c:	58e3      	ldr	r3, [r4, r3]
    cd9e:	601a      	str	r2, [r3, #0]
    cda0:	4b2c      	ldr	r3, [pc, #176]	; (ce54 <_usb_host_interrupt_handler+0x130>)
    cda2:	447b      	add	r3, pc
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	681a      	ldr	r2, [r3, #0]
    cda8:	687b      	ldr	r3, [r7, #4]
    cdaa:	3308      	adds	r3, #8
    cdac:	015b      	lsls	r3, r3, #5
    cdae:	18d3      	adds	r3, r2, r3
    cdb0:	3307      	adds	r3, #7
    cdb2:	2203      	movs	r2, #3
    cdb4:	701a      	strb	r2, [r3, #0]
    cdb6:	4b28      	ldr	r3, [pc, #160]	; (ce58 <_usb_host_interrupt_handler+0x134>)
    cdb8:	447b      	add	r3, pc
    cdba:	681a      	ldr	r2, [r3, #0]
    cdbc:	21ae      	movs	r1, #174	; 0xae
    cdbe:	687b      	ldr	r3, [r7, #4]
    cdc0:	18d3      	adds	r3, r2, r3
    cdc2:	185b      	adds	r3, r3, r1
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	001a      	movs	r2, r3
    cdc8:	2301      	movs	r3, #1
    cdca:	4013      	ands	r3, r2
    cdcc:	d100      	bne.n	cdd0 <_usb_host_interrupt_handler+0xac>
    cdce:	e094      	b.n	cefa <_usb_host_interrupt_handler+0x1d6>
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	b2da      	uxtb	r2, r3
    cdd4:	4b21      	ldr	r3, [pc, #132]	; (ce5c <_usb_host_interrupt_handler+0x138>)
    cdd6:	447b      	add	r3, pc
    cdd8:	701a      	strb	r2, [r3, #0]
    cdda:	4b21      	ldr	r3, [pc, #132]	; (ce60 <_usb_host_interrupt_handler+0x13c>)
    cddc:	447b      	add	r3, pc
    cdde:	681b      	ldr	r3, [r3, #0]
    cde0:	681b      	ldr	r3, [r3, #0]
    cde2:	687a      	ldr	r2, [r7, #4]
    cde4:	3208      	adds	r2, #8
    cde6:	0152      	lsls	r2, r2, #5
    cde8:	5cd3      	ldrb	r3, [r2, r3]
    cdea:	079b      	lsls	r3, r3, #30
    cdec:	0f9b      	lsrs	r3, r3, #30
    cdee:	b2db      	uxtb	r3, r3
    cdf0:	2b01      	cmp	r3, #1
    cdf2:	d13d      	bne.n	ce70 <_usb_host_interrupt_handler+0x14c>
    cdf4:	4b1b      	ldr	r3, [pc, #108]	; (ce64 <_usb_host_interrupt_handler+0x140>)
    cdf6:	58e2      	ldr	r2, [r4, r3]
    cdf8:	687b      	ldr	r3, [r7, #4]
    cdfa:	015b      	lsls	r3, r3, #5
    cdfc:	18d3      	adds	r3, r2, r3
    cdfe:	685b      	ldr	r3, [r3, #4]
    ce00:	049b      	lsls	r3, r3, #18
    ce02:	0c9b      	lsrs	r3, r3, #18
    ce04:	b29b      	uxth	r3, r3
    ce06:	001a      	movs	r2, r3
    ce08:	4b17      	ldr	r3, [pc, #92]	; (ce68 <_usb_host_interrupt_handler+0x144>)
    ce0a:	447b      	add	r3, pc
    ce0c:	805a      	strh	r2, [r3, #2]
    ce0e:	4b15      	ldr	r3, [pc, #84]	; (ce64 <_usb_host_interrupt_handler+0x140>)
    ce10:	58e2      	ldr	r2, [r4, r3]
    ce12:	687b      	ldr	r3, [r7, #4]
    ce14:	015b      	lsls	r3, r3, #5
    ce16:	18d3      	adds	r3, r2, r3
    ce18:	685b      	ldr	r3, [r3, #4]
    ce1a:	011b      	lsls	r3, r3, #4
    ce1c:	0c9b      	lsrs	r3, r3, #18
    ce1e:	b29b      	uxth	r3, r3
    ce20:	001a      	movs	r2, r3
    ce22:	4b12      	ldr	r3, [pc, #72]	; (ce6c <_usb_host_interrupt_handler+0x148>)
    ce24:	447b      	add	r3, pc
    ce26:	809a      	strh	r2, [r3, #4]
    ce28:	4b0e      	ldr	r3, [pc, #56]	; (ce64 <_usb_host_interrupt_handler+0x140>)
    ce2a:	58e2      	ldr	r2, [r4, r3]
    ce2c:	687b      	ldr	r3, [r7, #4]
    ce2e:	015b      	lsls	r3, r3, #5
    ce30:	18d3      	adds	r3, r2, r3
    ce32:	685a      	ldr	r2, [r3, #4]
    ce34:	0b92      	lsrs	r2, r2, #14
    ce36:	0392      	lsls	r2, r2, #14
    ce38:	605a      	str	r2, [r3, #4]
    ce3a:	e04e      	b.n	ceda <_usb_host_interrupt_handler+0x1b6>
    ce3c:	000050b4 	.word	0x000050b4
    ce40:	1fff38f0 	.word	0x1fff38f0
    ce44:	1fff38e0 	.word	0x1fff38e0
    ce48:	00000278 	.word	0x00000278
    ce4c:	1fff38ba 	.word	0x1fff38ba
    ce50:	000000ac 	.word	0x000000ac
    ce54:	1fff387e 	.word	0x1fff387e
    ce58:	1fff3868 	.word	0x1fff3868
    ce5c:	1fff384e 	.word	0x1fff384e
    ce60:	1fff3844 	.word	0x1fff3844
    ce64:	00000020 	.word	0x00000020
    ce68:	1fff381a 	.word	0x1fff381a
    ce6c:	1fff3800 	.word	0x1fff3800
    ce70:	4b99      	ldr	r3, [pc, #612]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    ce72:	58e2      	ldr	r2, [r4, r3]
    ce74:	687b      	ldr	r3, [r7, #4]
    ce76:	015b      	lsls	r3, r3, #5
    ce78:	18d3      	adds	r3, r2, r3
    ce7a:	685b      	ldr	r3, [r3, #4]
    ce7c:	011b      	lsls	r3, r3, #4
    ce7e:	0c9b      	lsrs	r3, r3, #18
    ce80:	b29b      	uxth	r3, r3
    ce82:	001a      	movs	r2, r3
    ce84:	4b95      	ldr	r3, [pc, #596]	; (d0dc <_usb_host_interrupt_handler+0x3b8>)
    ce86:	447b      	add	r3, pc
    ce88:	805a      	strh	r2, [r3, #2]
    ce8a:	4b93      	ldr	r3, [pc, #588]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    ce8c:	58e2      	ldr	r2, [r4, r3]
    ce8e:	687b      	ldr	r3, [r7, #4]
    ce90:	015b      	lsls	r3, r3, #5
    ce92:	18d3      	adds	r3, r2, r3
    ce94:	685b      	ldr	r3, [r3, #4]
    ce96:	049b      	lsls	r3, r3, #18
    ce98:	0c9b      	lsrs	r3, r3, #18
    ce9a:	b29b      	uxth	r3, r3
    ce9c:	001a      	movs	r2, r3
    ce9e:	4b90      	ldr	r3, [pc, #576]	; (d0e0 <_usb_host_interrupt_handler+0x3bc>)
    cea0:	447b      	add	r3, pc
    cea2:	809a      	strh	r2, [r3, #4]
    cea4:	4b8c      	ldr	r3, [pc, #560]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    cea6:	58e2      	ldr	r2, [r4, r3]
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	015b      	lsls	r3, r3, #5
    ceac:	18d3      	adds	r3, r2, r3
    ceae:	685a      	ldr	r2, [r3, #4]
    ceb0:	498c      	ldr	r1, [pc, #560]	; (d0e4 <_usb_host_interrupt_handler+0x3c0>)
    ceb2:	400a      	ands	r2, r1
    ceb4:	605a      	str	r2, [r3, #4]
    ceb6:	4b8c      	ldr	r3, [pc, #560]	; (d0e8 <_usb_host_interrupt_handler+0x3c4>)
    ceb8:	447b      	add	r3, pc
    ceba:	885b      	ldrh	r3, [r3, #2]
    cebc:	2b00      	cmp	r3, #0
    cebe:	d10c      	bne.n	ceda <_usb_host_interrupt_handler+0x1b6>
    cec0:	4b85      	ldr	r3, [pc, #532]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    cec2:	58e2      	ldr	r2, [r4, r3]
    cec4:	687b      	ldr	r3, [r7, #4]
    cec6:	015b      	lsls	r3, r3, #5
    cec8:	18d3      	adds	r3, r2, r3
    ceca:	685b      	ldr	r3, [r3, #4]
    cecc:	049b      	lsls	r3, r3, #18
    cece:	0c9b      	lsrs	r3, r3, #18
    ced0:	b29b      	uxth	r3, r3
    ced2:	001a      	movs	r2, r3
    ced4:	4b85      	ldr	r3, [pc, #532]	; (d0ec <_usb_host_interrupt_handler+0x3c8>)
    ced6:	447b      	add	r3, pc
    ced8:	805a      	strh	r2, [r3, #2]
    ceda:	4b85      	ldr	r3, [pc, #532]	; (d0f0 <_usb_host_interrupt_handler+0x3cc>)
    cedc:	447b      	add	r3, pc
    cede:	681a      	ldr	r2, [r3, #0]
    cee0:	687b      	ldr	r3, [r7, #4]
    cee2:	3302      	adds	r3, #2
    cee4:	011b      	lsls	r3, r3, #4
    cee6:	18d3      	adds	r3, r2, r3
    cee8:	3304      	adds	r3, #4
    ceea:	681a      	ldr	r2, [r3, #0]
    ceec:	4b81      	ldr	r3, [pc, #516]	; (d0f4 <_usb_host_interrupt_handler+0x3d0>)
    ceee:	447b      	add	r3, pc
    cef0:	681b      	ldr	r3, [r3, #0]
    cef2:	4981      	ldr	r1, [pc, #516]	; (d0f8 <_usb_host_interrupt_handler+0x3d4>)
    cef4:	4479      	add	r1, pc
    cef6:	0018      	movs	r0, r3
    cef8:	4790      	blx	r2
    cefa:	683b      	ldr	r3, [r7, #0]
    cefc:	2204      	movs	r2, #4
    cefe:	4013      	ands	r3, r2
    cf00:	d017      	beq.n	cf32 <_usb_host_interrupt_handler+0x20e>
    cf02:	2201      	movs	r2, #1
    cf04:	687b      	ldr	r3, [r7, #4]
    cf06:	409a      	lsls	r2, r3
    cf08:	0013      	movs	r3, r2
    cf0a:	43db      	mvns	r3, r3
    cf0c:	001a      	movs	r2, r3
    cf0e:	4b7b      	ldr	r3, [pc, #492]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cf10:	58e3      	ldr	r3, [r4, r3]
    cf12:	681b      	ldr	r3, [r3, #0]
    cf14:	401a      	ands	r2, r3
    cf16:	4b79      	ldr	r3, [pc, #484]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cf18:	58e3      	ldr	r3, [r4, r3]
    cf1a:	601a      	str	r2, [r3, #0]
    cf1c:	4b78      	ldr	r3, [pc, #480]	; (d100 <_usb_host_interrupt_handler+0x3dc>)
    cf1e:	447b      	add	r3, pc
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	681a      	ldr	r2, [r3, #0]
    cf24:	687b      	ldr	r3, [r7, #4]
    cf26:	3308      	adds	r3, #8
    cf28:	015b      	lsls	r3, r3, #5
    cf2a:	18d3      	adds	r3, r2, r3
    cf2c:	3307      	adds	r3, #7
    cf2e:	2204      	movs	r2, #4
    cf30:	701a      	strb	r2, [r3, #0]
    cf32:	683b      	ldr	r3, [r7, #0]
    cf34:	2208      	movs	r2, #8
    cf36:	4013      	ands	r3, r2
    cf38:	d046      	beq.n	cfc8 <_usb_host_interrupt_handler+0x2a4>
    cf3a:	2201      	movs	r2, #1
    cf3c:	687b      	ldr	r3, [r7, #4]
    cf3e:	409a      	lsls	r2, r3
    cf40:	0013      	movs	r3, r2
    cf42:	43db      	mvns	r3, r3
    cf44:	001a      	movs	r2, r3
    cf46:	4b6d      	ldr	r3, [pc, #436]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cf48:	58e3      	ldr	r3, [r4, r3]
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	401a      	ands	r2, r3
    cf4e:	4b6b      	ldr	r3, [pc, #428]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cf50:	58e3      	ldr	r3, [r4, r3]
    cf52:	601a      	str	r2, [r3, #0]
    cf54:	4b6b      	ldr	r3, [pc, #428]	; (d104 <_usb_host_interrupt_handler+0x3e0>)
    cf56:	447b      	add	r3, pc
    cf58:	681b      	ldr	r3, [r3, #0]
    cf5a:	681a      	ldr	r2, [r3, #0]
    cf5c:	687b      	ldr	r3, [r7, #4]
    cf5e:	3308      	adds	r3, #8
    cf60:	015b      	lsls	r3, r3, #5
    cf62:	18d3      	adds	r3, r2, r3
    cf64:	3307      	adds	r3, #7
    cf66:	2208      	movs	r2, #8
    cf68:	701a      	strb	r2, [r3, #0]
    cf6a:	4b67      	ldr	r3, [pc, #412]	; (d108 <_usb_host_interrupt_handler+0x3e4>)
    cf6c:	447b      	add	r3, pc
    cf6e:	681a      	ldr	r2, [r3, #0]
    cf70:	21ae      	movs	r1, #174	; 0xae
    cf72:	687b      	ldr	r3, [r7, #4]
    cf74:	18d3      	adds	r3, r2, r3
    cf76:	185b      	adds	r3, r3, r1
    cf78:	781b      	ldrb	r3, [r3, #0]
    cf7a:	001a      	movs	r2, r3
    cf7c:	2302      	movs	r3, #2
    cf7e:	4013      	ands	r3, r2
    cf80:	d022      	beq.n	cfc8 <_usb_host_interrupt_handler+0x2a4>
    cf82:	687b      	ldr	r3, [r7, #4]
    cf84:	b2da      	uxtb	r2, r3
    cf86:	4b61      	ldr	r3, [pc, #388]	; (d10c <_usb_host_interrupt_handler+0x3e8>)
    cf88:	447b      	add	r3, pc
    cf8a:	701a      	strb	r2, [r3, #0]
    cf8c:	4b52      	ldr	r3, [pc, #328]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    cf8e:	58e2      	ldr	r2, [r4, r3]
    cf90:	687b      	ldr	r3, [r7, #4]
    cf92:	015b      	lsls	r3, r3, #5
    cf94:	18d3      	adds	r3, r2, r3
    cf96:	330e      	adds	r3, #14
    cf98:	881b      	ldrh	r3, [r3, #0]
    cf9a:	b29b      	uxth	r3, r3
    cf9c:	b2db      	uxtb	r3, r3
    cf9e:	221f      	movs	r2, #31
    cfa0:	4013      	ands	r3, r2
    cfa2:	b2da      	uxtb	r2, r3
    cfa4:	4b5a      	ldr	r3, [pc, #360]	; (d110 <_usb_host_interrupt_handler+0x3ec>)
    cfa6:	447b      	add	r3, pc
    cfa8:	705a      	strb	r2, [r3, #1]
    cfaa:	4b5a      	ldr	r3, [pc, #360]	; (d114 <_usb_host_interrupt_handler+0x3f0>)
    cfac:	447b      	add	r3, pc
    cfae:	681a      	ldr	r2, [r3, #0]
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	011b      	lsls	r3, r3, #4
    cfb4:	18d3      	adds	r3, r2, r3
    cfb6:	3328      	adds	r3, #40	; 0x28
    cfb8:	681a      	ldr	r2, [r3, #0]
    cfba:	4b57      	ldr	r3, [pc, #348]	; (d118 <_usb_host_interrupt_handler+0x3f4>)
    cfbc:	447b      	add	r3, pc
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	4956      	ldr	r1, [pc, #344]	; (d11c <_usb_host_interrupt_handler+0x3f8>)
    cfc2:	4479      	add	r1, pc
    cfc4:	0018      	movs	r0, r3
    cfc6:	4790      	blx	r2
    cfc8:	683b      	ldr	r3, [r7, #0]
    cfca:	2210      	movs	r2, #16
    cfcc:	4013      	ands	r3, r2
    cfce:	d043      	beq.n	d058 <_usb_host_interrupt_handler+0x334>
    cfd0:	2201      	movs	r2, #1
    cfd2:	687b      	ldr	r3, [r7, #4]
    cfd4:	409a      	lsls	r2, r3
    cfd6:	0013      	movs	r3, r2
    cfd8:	43db      	mvns	r3, r3
    cfda:	001a      	movs	r2, r3
    cfdc:	4b47      	ldr	r3, [pc, #284]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cfde:	58e3      	ldr	r3, [r4, r3]
    cfe0:	681b      	ldr	r3, [r3, #0]
    cfe2:	401a      	ands	r2, r3
    cfe4:	4b45      	ldr	r3, [pc, #276]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    cfe6:	58e3      	ldr	r3, [r4, r3]
    cfe8:	601a      	str	r2, [r3, #0]
    cfea:	4b4d      	ldr	r3, [pc, #308]	; (d120 <_usb_host_interrupt_handler+0x3fc>)
    cfec:	447b      	add	r3, pc
    cfee:	681b      	ldr	r3, [r3, #0]
    cff0:	681a      	ldr	r2, [r3, #0]
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	3308      	adds	r3, #8
    cff6:	015b      	lsls	r3, r3, #5
    cff8:	18d3      	adds	r3, r2, r3
    cffa:	3307      	adds	r3, #7
    cffc:	2210      	movs	r2, #16
    cffe:	701a      	strb	r2, [r3, #0]
    d000:	4b48      	ldr	r3, [pc, #288]	; (d124 <_usb_host_interrupt_handler+0x400>)
    d002:	447b      	add	r3, pc
    d004:	681a      	ldr	r2, [r3, #0]
    d006:	21ae      	movs	r1, #174	; 0xae
    d008:	687b      	ldr	r3, [r7, #4]
    d00a:	18d3      	adds	r3, r2, r3
    d00c:	185b      	adds	r3, r3, r1
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	001a      	movs	r2, r3
    d012:	2304      	movs	r3, #4
    d014:	4013      	ands	r3, r2
    d016:	d01f      	beq.n	d058 <_usb_host_interrupt_handler+0x334>
    d018:	687b      	ldr	r3, [r7, #4]
    d01a:	b2da      	uxtb	r2, r3
    d01c:	4b42      	ldr	r3, [pc, #264]	; (d128 <_usb_host_interrupt_handler+0x404>)
    d01e:	447b      	add	r3, pc
    d020:	701a      	strb	r2, [r3, #0]
    d022:	4b2d      	ldr	r3, [pc, #180]	; (d0d8 <_usb_host_interrupt_handler+0x3b4>)
    d024:	58e2      	ldr	r2, [r4, r3]
    d026:	687b      	ldr	r3, [r7, #4]
    d028:	015b      	lsls	r3, r3, #5
    d02a:	18d3      	adds	r3, r2, r3
    d02c:	685b      	ldr	r3, [r3, #4]
    d02e:	011b      	lsls	r3, r3, #4
    d030:	0c9b      	lsrs	r3, r3, #18
    d032:	b29b      	uxth	r3, r3
    d034:	001a      	movs	r2, r3
    d036:	4b3d      	ldr	r3, [pc, #244]	; (d12c <_usb_host_interrupt_handler+0x408>)
    d038:	447b      	add	r3, pc
    d03a:	805a      	strh	r2, [r3, #2]
    d03c:	4b3c      	ldr	r3, [pc, #240]	; (d130 <_usb_host_interrupt_handler+0x40c>)
    d03e:	447b      	add	r3, pc
    d040:	681a      	ldr	r2, [r3, #0]
    d042:	687b      	ldr	r3, [r7, #4]
    d044:	011b      	lsls	r3, r3, #4
    d046:	18d3      	adds	r3, r2, r3
    d048:	332c      	adds	r3, #44	; 0x2c
    d04a:	681a      	ldr	r2, [r3, #0]
    d04c:	4b39      	ldr	r3, [pc, #228]	; (d134 <_usb_host_interrupt_handler+0x410>)
    d04e:	447b      	add	r3, pc
    d050:	681b      	ldr	r3, [r3, #0]
    d052:	2100      	movs	r1, #0
    d054:	0018      	movs	r0, r3
    d056:	4790      	blx	r2
    d058:	683b      	ldr	r3, [r7, #0]
    d05a:	2220      	movs	r2, #32
    d05c:	4013      	ands	r3, r2
    d05e:	d100      	bne.n	d062 <_usb_host_interrupt_handler+0x33e>
    d060:	e170      	b.n	d344 <_usb_host_interrupt_handler+0x620>
    d062:	2201      	movs	r2, #1
    d064:	687b      	ldr	r3, [r7, #4]
    d066:	409a      	lsls	r2, r3
    d068:	0013      	movs	r3, r2
    d06a:	43db      	mvns	r3, r3
    d06c:	001a      	movs	r2, r3
    d06e:	4b23      	ldr	r3, [pc, #140]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    d070:	58e3      	ldr	r3, [r4, r3]
    d072:	681b      	ldr	r3, [r3, #0]
    d074:	401a      	ands	r2, r3
    d076:	4b21      	ldr	r3, [pc, #132]	; (d0fc <_usb_host_interrupt_handler+0x3d8>)
    d078:	58e3      	ldr	r3, [r4, r3]
    d07a:	601a      	str	r2, [r3, #0]
    d07c:	4b2e      	ldr	r3, [pc, #184]	; (d138 <_usb_host_interrupt_handler+0x414>)
    d07e:	447b      	add	r3, pc
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	681a      	ldr	r2, [r3, #0]
    d084:	687b      	ldr	r3, [r7, #4]
    d086:	3308      	adds	r3, #8
    d088:	015b      	lsls	r3, r3, #5
    d08a:	18d3      	adds	r3, r2, r3
    d08c:	3307      	adds	r3, #7
    d08e:	2220      	movs	r2, #32
    d090:	701a      	strb	r2, [r3, #0]
    d092:	4b2a      	ldr	r3, [pc, #168]	; (d13c <_usb_host_interrupt_handler+0x418>)
    d094:	447b      	add	r3, pc
    d096:	681a      	ldr	r2, [r3, #0]
    d098:	21ae      	movs	r1, #174	; 0xae
    d09a:	687b      	ldr	r3, [r7, #4]
    d09c:	18d3      	adds	r3, r2, r3
    d09e:	185b      	adds	r3, r3, r1
    d0a0:	781b      	ldrb	r3, [r3, #0]
    d0a2:	001a      	movs	r2, r3
    d0a4:	2308      	movs	r3, #8
    d0a6:	4013      	ands	r3, r2
    d0a8:	d100      	bne.n	d0ac <_usb_host_interrupt_handler+0x388>
    d0aa:	e14b      	b.n	d344 <_usb_host_interrupt_handler+0x620>
    d0ac:	687b      	ldr	r3, [r7, #4]
    d0ae:	b2da      	uxtb	r2, r3
    d0b0:	4b23      	ldr	r3, [pc, #140]	; (d140 <_usb_host_interrupt_handler+0x41c>)
    d0b2:	447b      	add	r3, pc
    d0b4:	701a      	strb	r2, [r3, #0]
    d0b6:	4b23      	ldr	r3, [pc, #140]	; (d144 <_usb_host_interrupt_handler+0x420>)
    d0b8:	447b      	add	r3, pc
    d0ba:	681a      	ldr	r2, [r3, #0]
    d0bc:	687b      	ldr	r3, [r7, #4]
    d0be:	011b      	lsls	r3, r3, #4
    d0c0:	18d3      	adds	r3, r2, r3
    d0c2:	3330      	adds	r3, #48	; 0x30
    d0c4:	681a      	ldr	r2, [r3, #0]
    d0c6:	4b20      	ldr	r3, [pc, #128]	; (d148 <_usb_host_interrupt_handler+0x424>)
    d0c8:	447b      	add	r3, pc
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	491f      	ldr	r1, [pc, #124]	; (d14c <_usb_host_interrupt_handler+0x428>)
    d0ce:	4479      	add	r1, pc
    d0d0:	0018      	movs	r0, r3
    d0d2:	4790      	blx	r2
    d0d4:	e136      	b.n	d344 <_usb_host_interrupt_handler+0x620>
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	00000020 	.word	0x00000020
    d0dc:	1fff379e 	.word	0x1fff379e
    d0e0:	1fff3784 	.word	0x1fff3784
    d0e4:	f0003fff 	.word	0xf0003fff
    d0e8:	1fff376c 	.word	0x1fff376c
    d0ec:	1fff374e 	.word	0x1fff374e
    d0f0:	1fff3744 	.word	0x1fff3744
    d0f4:	1fff3732 	.word	0x1fff3732
    d0f8:	1fff3730 	.word	0x1fff3730
    d0fc:	000000ac 	.word	0x000000ac
    d100:	1fff3702 	.word	0x1fff3702
    d104:	1fff36ca 	.word	0x1fff36ca
    d108:	1fff36b4 	.word	0x1fff36b4
    d10c:	1fff369c 	.word	0x1fff369c
    d110:	1fff367e 	.word	0x1fff367e
    d114:	1fff3674 	.word	0x1fff3674
    d118:	1fff3664 	.word	0x1fff3664
    d11c:	1fff3662 	.word	0x1fff3662
    d120:	1fff3634 	.word	0x1fff3634
    d124:	1fff361e 	.word	0x1fff361e
    d128:	1fff3606 	.word	0x1fff3606
    d12c:	1fff35ec 	.word	0x1fff35ec
    d130:	1fff35e2 	.word	0x1fff35e2
    d134:	1fff35d2 	.word	0x1fff35d2
    d138:	1fff35a2 	.word	0x1fff35a2
    d13c:	1fff358c 	.word	0x1fff358c
    d140:	1fff3572 	.word	0x1fff3572
    d144:	1fff3568 	.word	0x1fff3568
    d148:	1fff3558 	.word	0x1fff3558
    d14c:	1fff3556 	.word	0x1fff3556
    d150:	4b7e      	ldr	r3, [pc, #504]	; (d34c <_usb_host_interrupt_handler+0x628>)
    d152:	447b      	add	r3, pc
    d154:	681b      	ldr	r3, [r3, #0]
    d156:	681b      	ldr	r3, [r3, #0]
    d158:	8b9b      	ldrh	r3, [r3, #28]
    d15a:	b29b      	uxth	r3, r3
    d15c:	603b      	str	r3, [r7, #0]
    d15e:	683b      	ldr	r3, [r7, #0]
    d160:	2204      	movs	r2, #4
    d162:	4013      	ands	r3, r2
    d164:	d017      	beq.n	d196 <_usb_host_interrupt_handler+0x472>
    d166:	4b7a      	ldr	r3, [pc, #488]	; (d350 <_usb_host_interrupt_handler+0x62c>)
    d168:	447b      	add	r3, pc
    d16a:	681b      	ldr	r3, [r3, #0]
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	2204      	movs	r2, #4
    d170:	839a      	strh	r2, [r3, #28]
    d172:	4b78      	ldr	r3, [pc, #480]	; (d354 <_usb_host_interrupt_handler+0x630>)
    d174:	447b      	add	r3, pc
    d176:	681b      	ldr	r3, [r3, #0]
    d178:	22a5      	movs	r2, #165	; 0xa5
    d17a:	5c9b      	ldrb	r3, [r3, r2]
    d17c:	001a      	movs	r2, r3
    d17e:	2301      	movs	r3, #1
    d180:	4013      	ands	r3, r2
    d182:	d008      	beq.n	d196 <_usb_host_interrupt_handler+0x472>
    d184:	4b74      	ldr	r3, [pc, #464]	; (d358 <_usb_host_interrupt_handler+0x634>)
    d186:	447b      	add	r3, pc
    d188:	681b      	ldr	r3, [r3, #0]
    d18a:	685a      	ldr	r2, [r3, #4]
    d18c:	4b73      	ldr	r3, [pc, #460]	; (d35c <_usb_host_interrupt_handler+0x638>)
    d18e:	447b      	add	r3, pc
    d190:	681b      	ldr	r3, [r3, #0]
    d192:	0018      	movs	r0, r3
    d194:	4790      	blx	r2
    d196:	683b      	ldr	r3, [r7, #0]
    d198:	2208      	movs	r2, #8
    d19a:	4013      	ands	r3, r2
    d19c:	d01b      	beq.n	d1d6 <_usb_host_interrupt_handler+0x4b2>
    d19e:	4b70      	ldr	r3, [pc, #448]	; (d360 <_usb_host_interrupt_handler+0x63c>)
    d1a0:	58e3      	ldr	r3, [r4, r3]
    d1a2:	2200      	movs	r2, #0
    d1a4:	601a      	str	r2, [r3, #0]
    d1a6:	4b6f      	ldr	r3, [pc, #444]	; (d364 <_usb_host_interrupt_handler+0x640>)
    d1a8:	447b      	add	r3, pc
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	681b      	ldr	r3, [r3, #0]
    d1ae:	2208      	movs	r2, #8
    d1b0:	839a      	strh	r2, [r3, #28]
    d1b2:	4b6d      	ldr	r3, [pc, #436]	; (d368 <_usb_host_interrupt_handler+0x644>)
    d1b4:	447b      	add	r3, pc
    d1b6:	681b      	ldr	r3, [r3, #0]
    d1b8:	22a5      	movs	r2, #165	; 0xa5
    d1ba:	5c9b      	ldrb	r3, [r3, r2]
    d1bc:	001a      	movs	r2, r3
    d1be:	2302      	movs	r3, #2
    d1c0:	4013      	ands	r3, r2
    d1c2:	d008      	beq.n	d1d6 <_usb_host_interrupt_handler+0x4b2>
    d1c4:	4b69      	ldr	r3, [pc, #420]	; (d36c <_usb_host_interrupt_handler+0x648>)
    d1c6:	447b      	add	r3, pc
    d1c8:	681b      	ldr	r3, [r3, #0]
    d1ca:	689a      	ldr	r2, [r3, #8]
    d1cc:	4b68      	ldr	r3, [pc, #416]	; (d370 <_usb_host_interrupt_handler+0x64c>)
    d1ce:	447b      	add	r3, pc
    d1d0:	681b      	ldr	r3, [r3, #0]
    d1d2:	0018      	movs	r0, r3
    d1d4:	4790      	blx	r2
    d1d6:	683b      	ldr	r3, [r7, #0]
    d1d8:	2240      	movs	r2, #64	; 0x40
    d1da:	4013      	ands	r3, r2
    d1dc:	d017      	beq.n	d20e <_usb_host_interrupt_handler+0x4ea>
    d1de:	4b65      	ldr	r3, [pc, #404]	; (d374 <_usb_host_interrupt_handler+0x650>)
    d1e0:	447b      	add	r3, pc
    d1e2:	681b      	ldr	r3, [r3, #0]
    d1e4:	681b      	ldr	r3, [r3, #0]
    d1e6:	2240      	movs	r2, #64	; 0x40
    d1e8:	839a      	strh	r2, [r3, #28]
    d1ea:	4b63      	ldr	r3, [pc, #396]	; (d378 <_usb_host_interrupt_handler+0x654>)
    d1ec:	447b      	add	r3, pc
    d1ee:	681b      	ldr	r3, [r3, #0]
    d1f0:	22a5      	movs	r2, #165	; 0xa5
    d1f2:	5c9b      	ldrb	r3, [r3, r2]
    d1f4:	001a      	movs	r2, r3
    d1f6:	2310      	movs	r3, #16
    d1f8:	4013      	ands	r3, r2
    d1fa:	d008      	beq.n	d20e <_usb_host_interrupt_handler+0x4ea>
    d1fc:	4b5f      	ldr	r3, [pc, #380]	; (d37c <_usb_host_interrupt_handler+0x658>)
    d1fe:	447b      	add	r3, pc
    d200:	681b      	ldr	r3, [r3, #0]
    d202:	695a      	ldr	r2, [r3, #20]
    d204:	4b5e      	ldr	r3, [pc, #376]	; (d380 <_usb_host_interrupt_handler+0x65c>)
    d206:	447b      	add	r3, pc
    d208:	681b      	ldr	r3, [r3, #0]
    d20a:	0018      	movs	r0, r3
    d20c:	4790      	blx	r2
    d20e:	683b      	ldr	r3, [r7, #0]
    d210:	2220      	movs	r2, #32
    d212:	4013      	ands	r3, r2
    d214:	d017      	beq.n	d246 <_usb_host_interrupt_handler+0x522>
    d216:	4b5b      	ldr	r3, [pc, #364]	; (d384 <_usb_host_interrupt_handler+0x660>)
    d218:	447b      	add	r3, pc
    d21a:	681b      	ldr	r3, [r3, #0]
    d21c:	681b      	ldr	r3, [r3, #0]
    d21e:	2220      	movs	r2, #32
    d220:	839a      	strh	r2, [r3, #28]
    d222:	4b59      	ldr	r3, [pc, #356]	; (d388 <_usb_host_interrupt_handler+0x664>)
    d224:	447b      	add	r3, pc
    d226:	681b      	ldr	r3, [r3, #0]
    d228:	22a5      	movs	r2, #165	; 0xa5
    d22a:	5c9b      	ldrb	r3, [r3, r2]
    d22c:	001a      	movs	r2, r3
    d22e:	2308      	movs	r3, #8
    d230:	4013      	ands	r3, r2
    d232:	d008      	beq.n	d246 <_usb_host_interrupt_handler+0x522>
    d234:	4b55      	ldr	r3, [pc, #340]	; (d38c <_usb_host_interrupt_handler+0x668>)
    d236:	447b      	add	r3, pc
    d238:	681b      	ldr	r3, [r3, #0]
    d23a:	691a      	ldr	r2, [r3, #16]
    d23c:	4b54      	ldr	r3, [pc, #336]	; (d390 <_usb_host_interrupt_handler+0x66c>)
    d23e:	447b      	add	r3, pc
    d240:	681b      	ldr	r3, [r3, #0]
    d242:	0018      	movs	r0, r3
    d244:	4790      	blx	r2
    d246:	683b      	ldr	r3, [r7, #0]
    d248:	2210      	movs	r2, #16
    d24a:	4013      	ands	r3, r2
    d24c:	d017      	beq.n	d27e <_usb_host_interrupt_handler+0x55a>
    d24e:	4b51      	ldr	r3, [pc, #324]	; (d394 <_usb_host_interrupt_handler+0x670>)
    d250:	447b      	add	r3, pc
    d252:	681b      	ldr	r3, [r3, #0]
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	2210      	movs	r2, #16
    d258:	839a      	strh	r2, [r3, #28]
    d25a:	4b4f      	ldr	r3, [pc, #316]	; (d398 <_usb_host_interrupt_handler+0x674>)
    d25c:	447b      	add	r3, pc
    d25e:	681b      	ldr	r3, [r3, #0]
    d260:	22a5      	movs	r2, #165	; 0xa5
    d262:	5c9b      	ldrb	r3, [r3, r2]
    d264:	001a      	movs	r2, r3
    d266:	2304      	movs	r3, #4
    d268:	4013      	ands	r3, r2
    d26a:	d008      	beq.n	d27e <_usb_host_interrupt_handler+0x55a>
    d26c:	4b4b      	ldr	r3, [pc, #300]	; (d39c <_usb_host_interrupt_handler+0x678>)
    d26e:	447b      	add	r3, pc
    d270:	681b      	ldr	r3, [r3, #0]
    d272:	68da      	ldr	r2, [r3, #12]
    d274:	4b4a      	ldr	r3, [pc, #296]	; (d3a0 <_usb_host_interrupt_handler+0x67c>)
    d276:	447b      	add	r3, pc
    d278:	681b      	ldr	r3, [r3, #0]
    d27a:	0018      	movs	r0, r3
    d27c:	4790      	blx	r2
    d27e:	683b      	ldr	r3, [r7, #0]
    d280:	2280      	movs	r2, #128	; 0x80
    d282:	4013      	ands	r3, r2
    d284:	d01b      	beq.n	d2be <_usb_host_interrupt_handler+0x59a>
    d286:	4b36      	ldr	r3, [pc, #216]	; (d360 <_usb_host_interrupt_handler+0x63c>)
    d288:	58e3      	ldr	r3, [r4, r3]
    d28a:	2200      	movs	r2, #0
    d28c:	601a      	str	r2, [r3, #0]
    d28e:	4b45      	ldr	r3, [pc, #276]	; (d3a4 <_usb_host_interrupt_handler+0x680>)
    d290:	447b      	add	r3, pc
    d292:	681b      	ldr	r3, [r3, #0]
    d294:	681b      	ldr	r3, [r3, #0]
    d296:	2280      	movs	r2, #128	; 0x80
    d298:	839a      	strh	r2, [r3, #28]
    d29a:	4b43      	ldr	r3, [pc, #268]	; (d3a8 <_usb_host_interrupt_handler+0x684>)
    d29c:	447b      	add	r3, pc
    d29e:	681b      	ldr	r3, [r3, #0]
    d2a0:	22a5      	movs	r2, #165	; 0xa5
    d2a2:	5c9b      	ldrb	r3, [r3, r2]
    d2a4:	001a      	movs	r2, r3
    d2a6:	2320      	movs	r3, #32
    d2a8:	4013      	ands	r3, r2
    d2aa:	d008      	beq.n	d2be <_usb_host_interrupt_handler+0x59a>
    d2ac:	4b3f      	ldr	r3, [pc, #252]	; (d3ac <_usb_host_interrupt_handler+0x688>)
    d2ae:	447b      	add	r3, pc
    d2b0:	681b      	ldr	r3, [r3, #0]
    d2b2:	699a      	ldr	r2, [r3, #24]
    d2b4:	4b3e      	ldr	r3, [pc, #248]	; (d3b0 <_usb_host_interrupt_handler+0x68c>)
    d2b6:	447b      	add	r3, pc
    d2b8:	681b      	ldr	r3, [r3, #0]
    d2ba:	0018      	movs	r0, r3
    d2bc:	4790      	blx	r2
    d2be:	683a      	ldr	r2, [r7, #0]
    d2c0:	2380      	movs	r3, #128	; 0x80
    d2c2:	005b      	lsls	r3, r3, #1
    d2c4:	4013      	ands	r3, r2
    d2c6:	d01c      	beq.n	d302 <_usb_host_interrupt_handler+0x5de>
    d2c8:	4b25      	ldr	r3, [pc, #148]	; (d360 <_usb_host_interrupt_handler+0x63c>)
    d2ca:	58e3      	ldr	r3, [r4, r3]
    d2cc:	2200      	movs	r2, #0
    d2ce:	601a      	str	r2, [r3, #0]
    d2d0:	4b38      	ldr	r3, [pc, #224]	; (d3b4 <_usb_host_interrupt_handler+0x690>)
    d2d2:	447b      	add	r3, pc
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	681b      	ldr	r3, [r3, #0]
    d2d8:	2280      	movs	r2, #128	; 0x80
    d2da:	0052      	lsls	r2, r2, #1
    d2dc:	839a      	strh	r2, [r3, #28]
    d2de:	4b36      	ldr	r3, [pc, #216]	; (d3b8 <_usb_host_interrupt_handler+0x694>)
    d2e0:	447b      	add	r3, pc
    d2e2:	681b      	ldr	r3, [r3, #0]
    d2e4:	22a5      	movs	r2, #165	; 0xa5
    d2e6:	5c9b      	ldrb	r3, [r3, r2]
    d2e8:	001a      	movs	r2, r3
    d2ea:	2340      	movs	r3, #64	; 0x40
    d2ec:	4013      	ands	r3, r2
    d2ee:	d008      	beq.n	d302 <_usb_host_interrupt_handler+0x5de>
    d2f0:	4b32      	ldr	r3, [pc, #200]	; (d3bc <_usb_host_interrupt_handler+0x698>)
    d2f2:	447b      	add	r3, pc
    d2f4:	681b      	ldr	r3, [r3, #0]
    d2f6:	69da      	ldr	r2, [r3, #28]
    d2f8:	4b31      	ldr	r3, [pc, #196]	; (d3c0 <_usb_host_interrupt_handler+0x69c>)
    d2fa:	447b      	add	r3, pc
    d2fc:	681b      	ldr	r3, [r3, #0]
    d2fe:	0018      	movs	r0, r3
    d300:	4790      	blx	r2
    d302:	683a      	ldr	r2, [r7, #0]
    d304:	2380      	movs	r3, #128	; 0x80
    d306:	009b      	lsls	r3, r3, #2
    d308:	4013      	ands	r3, r2
    d30a:	d01b      	beq.n	d344 <_usb_host_interrupt_handler+0x620>
    d30c:	4b14      	ldr	r3, [pc, #80]	; (d360 <_usb_host_interrupt_handler+0x63c>)
    d30e:	58e3      	ldr	r3, [r4, r3]
    d310:	2200      	movs	r2, #0
    d312:	601a      	str	r2, [r3, #0]
    d314:	4b2b      	ldr	r3, [pc, #172]	; (d3c4 <_usb_host_interrupt_handler+0x6a0>)
    d316:	447b      	add	r3, pc
    d318:	681b      	ldr	r3, [r3, #0]
    d31a:	681b      	ldr	r3, [r3, #0]
    d31c:	2280      	movs	r2, #128	; 0x80
    d31e:	0092      	lsls	r2, r2, #2
    d320:	839a      	strh	r2, [r3, #28]
    d322:	4b29      	ldr	r3, [pc, #164]	; (d3c8 <_usb_host_interrupt_handler+0x6a4>)
    d324:	447b      	add	r3, pc
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	22a5      	movs	r2, #165	; 0xa5
    d32a:	5c9b      	ldrb	r3, [r3, r2]
    d32c:	b25b      	sxtb	r3, r3
    d32e:	2b00      	cmp	r3, #0
    d330:	da08      	bge.n	d344 <_usb_host_interrupt_handler+0x620>
    d332:	4b26      	ldr	r3, [pc, #152]	; (d3cc <_usb_host_interrupt_handler+0x6a8>)
    d334:	447b      	add	r3, pc
    d336:	681b      	ldr	r3, [r3, #0]
    d338:	6a1a      	ldr	r2, [r3, #32]
    d33a:	4b25      	ldr	r3, [pc, #148]	; (d3d0 <_usb_host_interrupt_handler+0x6ac>)
    d33c:	447b      	add	r3, pc
    d33e:	681b      	ldr	r3, [r3, #0]
    d340:	0018      	movs	r0, r3
    d342:	4790      	blx	r2
    d344:	46c0      	nop			; (mov r8, r8)
    d346:	46bd      	mov	sp, r7
    d348:	b003      	add	sp, #12
    d34a:	bd90      	pop	{r4, r7, pc}
    d34c:	1fff34ce 	.word	0x1fff34ce
    d350:	1fff34b8 	.word	0x1fff34b8
    d354:	1fff34ac 	.word	0x1fff34ac
    d358:	1fff349a 	.word	0x1fff349a
    d35c:	1fff3492 	.word	0x1fff3492
    d360:	000000ac 	.word	0x000000ac
    d364:	1fff3478 	.word	0x1fff3478
    d368:	1fff346c 	.word	0x1fff346c
    d36c:	1fff345a 	.word	0x1fff345a
    d370:	1fff3452 	.word	0x1fff3452
    d374:	1fff3440 	.word	0x1fff3440
    d378:	1fff3434 	.word	0x1fff3434
    d37c:	1fff3422 	.word	0x1fff3422
    d380:	1fff341a 	.word	0x1fff341a
    d384:	1fff3408 	.word	0x1fff3408
    d388:	1fff33fc 	.word	0x1fff33fc
    d38c:	1fff33ea 	.word	0x1fff33ea
    d390:	1fff33e2 	.word	0x1fff33e2
    d394:	1fff33d0 	.word	0x1fff33d0
    d398:	1fff33c4 	.word	0x1fff33c4
    d39c:	1fff33b2 	.word	0x1fff33b2
    d3a0:	1fff33aa 	.word	0x1fff33aa
    d3a4:	1fff3390 	.word	0x1fff3390
    d3a8:	1fff3384 	.word	0x1fff3384
    d3ac:	1fff3372 	.word	0x1fff3372
    d3b0:	1fff336a 	.word	0x1fff336a
    d3b4:	1fff334e 	.word	0x1fff334e
    d3b8:	1fff3340 	.word	0x1fff3340
    d3bc:	1fff332e 	.word	0x1fff332e
    d3c0:	1fff3326 	.word	0x1fff3326
    d3c4:	1fff330a 	.word	0x1fff330a
    d3c8:	1fff32fc 	.word	0x1fff32fc
    d3cc:	1fff32ec 	.word	0x1fff32ec
    d3d0:	1fff32e4 	.word	0x1fff32e4

0000d3d4 <usb_device_register_callback>:
    d3d4:	b580      	push	{r7, lr}
    d3d6:	b084      	sub	sp, #16
    d3d8:	af00      	add	r7, sp, #0
    d3da:	60f8      	str	r0, [r7, #12]
    d3dc:	607a      	str	r2, [r7, #4]
    d3de:	230b      	movs	r3, #11
    d3e0:	18fb      	adds	r3, r7, r3
    d3e2:	1c0a      	adds	r2, r1, #0
    d3e4:	701a      	strb	r2, [r3, #0]
    d3e6:	230b      	movs	r3, #11
    d3e8:	18fb      	adds	r3, r7, r3
    d3ea:	781a      	ldrb	r2, [r3, #0]
    d3ec:	68fb      	ldr	r3, [r7, #12]
    d3ee:	322e      	adds	r2, #46	; 0x2e
    d3f0:	0092      	lsls	r2, r2, #2
    d3f2:	6879      	ldr	r1, [r7, #4]
    d3f4:	50d1      	str	r1, [r2, r3]
    d3f6:	68fa      	ldr	r2, [r7, #12]
    d3f8:	23aa      	movs	r3, #170	; 0xaa
    d3fa:	005b      	lsls	r3, r3, #1
    d3fc:	5ad2      	ldrh	r2, [r2, r3]
    d3fe:	230b      	movs	r3, #11
    d400:	18fb      	adds	r3, r7, r3
    d402:	7819      	ldrb	r1, [r3, #0]
    d404:	4b07      	ldr	r3, [pc, #28]	; (d424 <usb_device_register_callback+0x50>)
    d406:	447b      	add	r3, pc
    d408:	0049      	lsls	r1, r1, #1
    d40a:	5acb      	ldrh	r3, [r1, r3]
    d40c:	4313      	orrs	r3, r2
    d40e:	b299      	uxth	r1, r3
    d410:	68fa      	ldr	r2, [r7, #12]
    d412:	23aa      	movs	r3, #170	; 0xaa
    d414:	005b      	lsls	r3, r3, #1
    d416:	52d1      	strh	r1, [r2, r3]
    d418:	2300      	movs	r3, #0
    d41a:	0018      	movs	r0, r3
    d41c:	46bd      	mov	sp, r7
    d41e:	b004      	add	sp, #16
    d420:	bd80      	pop	{r7, pc}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	0000490e 	.word	0x0000490e

0000d428 <usb_device_enable_callback>:
    d428:	b580      	push	{r7, lr}
    d42a:	b082      	sub	sp, #8
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
    d430:	000a      	movs	r2, r1
    d432:	1cfb      	adds	r3, r7, #3
    d434:	701a      	strb	r2, [r3, #0]
    d436:	687b      	ldr	r3, [r7, #4]
    d438:	681b      	ldr	r3, [r3, #0]
    d43a:	1cfa      	adds	r2, r7, #3
    d43c:	7811      	ldrb	r1, [r2, #0]
    d43e:	4a11      	ldr	r2, [pc, #68]	; (d484 <usb_device_enable_callback+0x5c>)
    d440:	447a      	add	r2, pc
    d442:	0049      	lsls	r1, r1, #1
    d444:	5a8a      	ldrh	r2, [r1, r2]
    d446:	839a      	strh	r2, [r3, #28]
    d448:	687a      	ldr	r2, [r7, #4]
    d44a:	23ab      	movs	r3, #171	; 0xab
    d44c:	005b      	lsls	r3, r3, #1
    d44e:	5ad2      	ldrh	r2, [r2, r3]
    d450:	1cfb      	adds	r3, r7, #3
    d452:	7819      	ldrb	r1, [r3, #0]
    d454:	4b0c      	ldr	r3, [pc, #48]	; (d488 <usb_device_enable_callback+0x60>)
    d456:	447b      	add	r3, pc
    d458:	0049      	lsls	r1, r1, #1
    d45a:	5acb      	ldrh	r3, [r1, r3]
    d45c:	4313      	orrs	r3, r2
    d45e:	b299      	uxth	r1, r3
    d460:	687a      	ldr	r2, [r7, #4]
    d462:	23ab      	movs	r3, #171	; 0xab
    d464:	005b      	lsls	r3, r3, #1
    d466:	52d1      	strh	r1, [r2, r3]
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	681b      	ldr	r3, [r3, #0]
    d46c:	1cfa      	adds	r2, r7, #3
    d46e:	7811      	ldrb	r1, [r2, #0]
    d470:	4a06      	ldr	r2, [pc, #24]	; (d48c <usb_device_enable_callback+0x64>)
    d472:	447a      	add	r2, pc
    d474:	0049      	lsls	r1, r1, #1
    d476:	5a8a      	ldrh	r2, [r1, r2]
    d478:	831a      	strh	r2, [r3, #24]
    d47a:	2300      	movs	r3, #0
    d47c:	0018      	movs	r0, r3
    d47e:	46bd      	mov	sp, r7
    d480:	b002      	add	sp, #8
    d482:	bd80      	pop	{r7, pc}
    d484:	000048d4 	.word	0x000048d4
    d488:	000048be 	.word	0x000048be
    d48c:	000048a2 	.word	0x000048a2

0000d490 <usb_device_disable_callback>:
    d490:	b580      	push	{r7, lr}
    d492:	b082      	sub	sp, #8
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    d498:	000a      	movs	r2, r1
    d49a:	1cfb      	adds	r3, r7, #3
    d49c:	701a      	strb	r2, [r3, #0]
    d49e:	687a      	ldr	r2, [r7, #4]
    d4a0:	23ab      	movs	r3, #171	; 0xab
    d4a2:	005b      	lsls	r3, r3, #1
    d4a4:	5ad3      	ldrh	r3, [r2, r3]
    d4a6:	b21b      	sxth	r3, r3
    d4a8:	1cfa      	adds	r2, r7, #3
    d4aa:	7811      	ldrb	r1, [r2, #0]
    d4ac:	4a0d      	ldr	r2, [pc, #52]	; (d4e4 <usb_device_disable_callback+0x54>)
    d4ae:	447a      	add	r2, pc
    d4b0:	0049      	lsls	r1, r1, #1
    d4b2:	5a8a      	ldrh	r2, [r1, r2]
    d4b4:	b212      	sxth	r2, r2
    d4b6:	43d2      	mvns	r2, r2
    d4b8:	b212      	sxth	r2, r2
    d4ba:	4013      	ands	r3, r2
    d4bc:	b21b      	sxth	r3, r3
    d4be:	b299      	uxth	r1, r3
    d4c0:	687a      	ldr	r2, [r7, #4]
    d4c2:	23ab      	movs	r3, #171	; 0xab
    d4c4:	005b      	lsls	r3, r3, #1
    d4c6:	52d1      	strh	r1, [r2, r3]
    d4c8:	687b      	ldr	r3, [r7, #4]
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	1cfa      	adds	r2, r7, #3
    d4ce:	7811      	ldrb	r1, [r2, #0]
    d4d0:	4a05      	ldr	r2, [pc, #20]	; (d4e8 <usb_device_disable_callback+0x58>)
    d4d2:	447a      	add	r2, pc
    d4d4:	0049      	lsls	r1, r1, #1
    d4d6:	5a8a      	ldrh	r2, [r1, r2]
    d4d8:	829a      	strh	r2, [r3, #20]
    d4da:	2300      	movs	r3, #0
    d4dc:	0018      	movs	r0, r3
    d4de:	46bd      	mov	sp, r7
    d4e0:	b002      	add	sp, #8
    d4e2:	bd80      	pop	{r7, pc}
    d4e4:	00004866 	.word	0x00004866
    d4e8:	00004842 	.word	0x00004842

0000d4ec <usb_device_endpoint_register_callback>:
    d4ec:	b580      	push	{r7, lr}
    d4ee:	b084      	sub	sp, #16
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	60f8      	str	r0, [r7, #12]
    d4f4:	0008      	movs	r0, r1
    d4f6:	0011      	movs	r1, r2
    d4f8:	607b      	str	r3, [r7, #4]
    d4fa:	230b      	movs	r3, #11
    d4fc:	18fb      	adds	r3, r7, r3
    d4fe:	1c02      	adds	r2, r0, #0
    d500:	701a      	strb	r2, [r3, #0]
    d502:	230a      	movs	r3, #10
    d504:	18fb      	adds	r3, r7, r3
    d506:	1c0a      	adds	r2, r1, #0
    d508:	701a      	strb	r2, [r3, #0]
    d50a:	230b      	movs	r3, #11
    d50c:	18fb      	adds	r3, r7, r3
    d50e:	7819      	ldrb	r1, [r3, #0]
    d510:	230a      	movs	r3, #10
    d512:	18fb      	adds	r3, r7, r3
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	68fa      	ldr	r2, [r7, #12]
    d518:	0089      	lsls	r1, r1, #2
    d51a:	18cb      	adds	r3, r1, r3
    d51c:	3334      	adds	r3, #52	; 0x34
    d51e:	009b      	lsls	r3, r3, #2
    d520:	18d3      	adds	r3, r2, r3
    d522:	3304      	adds	r3, #4
    d524:	687a      	ldr	r2, [r7, #4]
    d526:	601a      	str	r2, [r3, #0]
    d528:	230b      	movs	r3, #11
    d52a:	18fb      	adds	r3, r7, r3
    d52c:	781a      	ldrb	r2, [r3, #0]
    d52e:	230b      	movs	r3, #11
    d530:	18fb      	adds	r3, r7, r3
    d532:	7819      	ldrb	r1, [r3, #0]
    d534:	68f8      	ldr	r0, [r7, #12]
    d536:	23ac      	movs	r3, #172	; 0xac
    d538:	005b      	lsls	r3, r3, #1
    d53a:	1841      	adds	r1, r0, r1
    d53c:	18cb      	adds	r3, r1, r3
    d53e:	7819      	ldrb	r1, [r3, #0]
    d540:	230a      	movs	r3, #10
    d542:	18fb      	adds	r3, r7, r3
    d544:	781b      	ldrb	r3, [r3, #0]
    d546:	4808      	ldr	r0, [pc, #32]	; (d568 <usb_device_endpoint_register_callback+0x7c>)
    d548:	4478      	add	r0, pc
    d54a:	5cc3      	ldrb	r3, [r0, r3]
    d54c:	430b      	orrs	r3, r1
    d54e:	b2d8      	uxtb	r0, r3
    d550:	68f9      	ldr	r1, [r7, #12]
    d552:	23ac      	movs	r3, #172	; 0xac
    d554:	005b      	lsls	r3, r3, #1
    d556:	188a      	adds	r2, r1, r2
    d558:	18d3      	adds	r3, r2, r3
    d55a:	1c02      	adds	r2, r0, #0
    d55c:	701a      	strb	r2, [r3, #0]
    d55e:	2300      	movs	r3, #0
    d560:	0018      	movs	r0, r3
    d562:	46bd      	mov	sp, r7
    d564:	b004      	add	sp, #16
    d566:	bd80      	pop	{r7, pc}
    d568:	000047dc 	.word	0x000047dc

0000d56c <usb_device_endpoint_unregister_callback>:
    d56c:	b580      	push	{r7, lr}
    d56e:	b082      	sub	sp, #8
    d570:	af00      	add	r7, sp, #0
    d572:	6078      	str	r0, [r7, #4]
    d574:	0008      	movs	r0, r1
    d576:	0011      	movs	r1, r2
    d578:	1cfb      	adds	r3, r7, #3
    d57a:	1c02      	adds	r2, r0, #0
    d57c:	701a      	strb	r2, [r3, #0]
    d57e:	1cbb      	adds	r3, r7, #2
    d580:	1c0a      	adds	r2, r1, #0
    d582:	701a      	strb	r2, [r3, #0]
    d584:	1cfb      	adds	r3, r7, #3
    d586:	7819      	ldrb	r1, [r3, #0]
    d588:	1cbb      	adds	r3, r7, #2
    d58a:	781b      	ldrb	r3, [r3, #0]
    d58c:	687a      	ldr	r2, [r7, #4]
    d58e:	0089      	lsls	r1, r1, #2
    d590:	18cb      	adds	r3, r1, r3
    d592:	3334      	adds	r3, #52	; 0x34
    d594:	009b      	lsls	r3, r3, #2
    d596:	18d3      	adds	r3, r2, r3
    d598:	3304      	adds	r3, #4
    d59a:	2200      	movs	r2, #0
    d59c:	601a      	str	r2, [r3, #0]
    d59e:	1cfb      	adds	r3, r7, #3
    d5a0:	781a      	ldrb	r2, [r3, #0]
    d5a2:	1cfb      	adds	r3, r7, #3
    d5a4:	7819      	ldrb	r1, [r3, #0]
    d5a6:	6878      	ldr	r0, [r7, #4]
    d5a8:	23ac      	movs	r3, #172	; 0xac
    d5aa:	005b      	lsls	r3, r3, #1
    d5ac:	1841      	adds	r1, r0, r1
    d5ae:	18cb      	adds	r3, r1, r3
    d5b0:	781b      	ldrb	r3, [r3, #0]
    d5b2:	b25b      	sxtb	r3, r3
    d5b4:	1cb9      	adds	r1, r7, #2
    d5b6:	7809      	ldrb	r1, [r1, #0]
    d5b8:	480a      	ldr	r0, [pc, #40]	; (d5e4 <usb_device_endpoint_unregister_callback+0x78>)
    d5ba:	4478      	add	r0, pc
    d5bc:	5c41      	ldrb	r1, [r0, r1]
    d5be:	b249      	sxtb	r1, r1
    d5c0:	43c9      	mvns	r1, r1
    d5c2:	b249      	sxtb	r1, r1
    d5c4:	400b      	ands	r3, r1
    d5c6:	b25b      	sxtb	r3, r3
    d5c8:	b2d8      	uxtb	r0, r3
    d5ca:	6879      	ldr	r1, [r7, #4]
    d5cc:	23ac      	movs	r3, #172	; 0xac
    d5ce:	005b      	lsls	r3, r3, #1
    d5d0:	188a      	adds	r2, r1, r2
    d5d2:	18d3      	adds	r3, r2, r3
    d5d4:	1c02      	adds	r2, r0, #0
    d5d6:	701a      	strb	r2, [r3, #0]
    d5d8:	2300      	movs	r3, #0
    d5da:	0018      	movs	r0, r3
    d5dc:	46bd      	mov	sp, r7
    d5de:	b002      	add	sp, #8
    d5e0:	bd80      	pop	{r7, pc}
    d5e2:	46c0      	nop			; (mov r8, r8)
    d5e4:	0000476a 	.word	0x0000476a

0000d5e8 <usb_device_endpoint_enable_callback>:
    d5e8:	b580      	push	{r7, lr}
    d5ea:	b084      	sub	sp, #16
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	6078      	str	r0, [r7, #4]
    d5f0:	0008      	movs	r0, r1
    d5f2:	0011      	movs	r1, r2
    d5f4:	1cfb      	adds	r3, r7, #3
    d5f6:	1c02      	adds	r2, r0, #0
    d5f8:	701a      	strb	r2, [r3, #0]
    d5fa:	1cbb      	adds	r3, r7, #2
    d5fc:	1c0a      	adds	r2, r1, #0
    d5fe:	701a      	strb	r2, [r3, #0]
    d600:	230f      	movs	r3, #15
    d602:	18fb      	adds	r3, r7, r3
    d604:	1cfa      	adds	r2, r7, #3
    d606:	7812      	ldrb	r2, [r2, #0]
    d608:	210f      	movs	r1, #15
    d60a:	400a      	ands	r2, r1
    d60c:	701a      	strb	r2, [r3, #0]
    d60e:	230f      	movs	r3, #15
    d610:	18fb      	adds	r3, r7, r3
    d612:	781a      	ldrb	r2, [r3, #0]
    d614:	230f      	movs	r3, #15
    d616:	18fb      	adds	r3, r7, r3
    d618:	7819      	ldrb	r1, [r3, #0]
    d61a:	6878      	ldr	r0, [r7, #4]
    d61c:	23b0      	movs	r3, #176	; 0xb0
    d61e:	005b      	lsls	r3, r3, #1
    d620:	1841      	adds	r1, r0, r1
    d622:	18cb      	adds	r3, r1, r3
    d624:	7819      	ldrb	r1, [r3, #0]
    d626:	1cbb      	adds	r3, r7, #2
    d628:	781b      	ldrb	r3, [r3, #0]
    d62a:	4855      	ldr	r0, [pc, #340]	; (d780 <usb_device_endpoint_enable_callback+0x198>)
    d62c:	4478      	add	r0, pc
    d62e:	5cc3      	ldrb	r3, [r0, r3]
    d630:	430b      	orrs	r3, r1
    d632:	b2d8      	uxtb	r0, r3
    d634:	6879      	ldr	r1, [r7, #4]
    d636:	23b0      	movs	r3, #176	; 0xb0
    d638:	005b      	lsls	r3, r3, #1
    d63a:	188a      	adds	r2, r1, r2
    d63c:	18d3      	adds	r3, r2, r3
    d63e:	1c02      	adds	r2, r0, #0
    d640:	701a      	strb	r2, [r3, #0]
    d642:	1cbb      	adds	r3, r7, #2
    d644:	781b      	ldrb	r3, [r3, #0]
    d646:	2b00      	cmp	r3, #0
    d648:	d12f      	bne.n	d6aa <usb_device_endpoint_enable_callback+0xc2>
    d64a:	230f      	movs	r3, #15
    d64c:	18fb      	adds	r3, r7, r3
    d64e:	781b      	ldrb	r3, [r3, #0]
    d650:	2b00      	cmp	r3, #0
    d652:	d10c      	bne.n	d66e <usb_device_endpoint_enable_callback+0x86>
    d654:	687b      	ldr	r3, [r7, #4]
    d656:	6819      	ldr	r1, [r3, #0]
    d658:	230f      	movs	r3, #15
    d65a:	18fb      	adds	r3, r7, r3
    d65c:	781a      	ldrb	r2, [r3, #0]
    d65e:	230a      	movs	r3, #10
    d660:	33ff      	adds	r3, #255	; 0xff
    d662:	0152      	lsls	r2, r2, #5
    d664:	188a      	adds	r2, r1, r2
    d666:	18d3      	adds	r3, r2, r3
    d668:	2203      	movs	r2, #3
    d66a:	701a      	strb	r2, [r3, #0]
    d66c:	e01d      	b.n	d6aa <usb_device_endpoint_enable_callback+0xc2>
    d66e:	1cfb      	adds	r3, r7, #3
    d670:	781b      	ldrb	r3, [r3, #0]
    d672:	b25b      	sxtb	r3, r3
    d674:	2b00      	cmp	r3, #0
    d676:	da0c      	bge.n	d692 <usb_device_endpoint_enable_callback+0xaa>
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	6819      	ldr	r1, [r3, #0]
    d67c:	230f      	movs	r3, #15
    d67e:	18fb      	adds	r3, r7, r3
    d680:	781a      	ldrb	r2, [r3, #0]
    d682:	230a      	movs	r3, #10
    d684:	33ff      	adds	r3, #255	; 0xff
    d686:	0152      	lsls	r2, r2, #5
    d688:	188a      	adds	r2, r1, r2
    d68a:	18d3      	adds	r3, r2, r3
    d68c:	2202      	movs	r2, #2
    d68e:	701a      	strb	r2, [r3, #0]
    d690:	e00b      	b.n	d6aa <usb_device_endpoint_enable_callback+0xc2>
    d692:	687b      	ldr	r3, [r7, #4]
    d694:	6819      	ldr	r1, [r3, #0]
    d696:	230f      	movs	r3, #15
    d698:	18fb      	adds	r3, r7, r3
    d69a:	781a      	ldrb	r2, [r3, #0]
    d69c:	230a      	movs	r3, #10
    d69e:	33ff      	adds	r3, #255	; 0xff
    d6a0:	0152      	lsls	r2, r2, #5
    d6a2:	188a      	adds	r2, r1, r2
    d6a4:	18d3      	adds	r3, r2, r3
    d6a6:	2201      	movs	r2, #1
    d6a8:	701a      	strb	r2, [r3, #0]
    d6aa:	1cbb      	adds	r3, r7, #2
    d6ac:	781b      	ldrb	r3, [r3, #0]
    d6ae:	2b01      	cmp	r3, #1
    d6b0:	d12f      	bne.n	d712 <usb_device_endpoint_enable_callback+0x12a>
    d6b2:	230f      	movs	r3, #15
    d6b4:	18fb      	adds	r3, r7, r3
    d6b6:	781b      	ldrb	r3, [r3, #0]
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d10c      	bne.n	d6d6 <usb_device_endpoint_enable_callback+0xee>
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	6819      	ldr	r1, [r3, #0]
    d6c0:	230f      	movs	r3, #15
    d6c2:	18fb      	adds	r3, r7, r3
    d6c4:	781a      	ldrb	r2, [r3, #0]
    d6c6:	230a      	movs	r3, #10
    d6c8:	33ff      	adds	r3, #255	; 0xff
    d6ca:	0152      	lsls	r2, r2, #5
    d6cc:	188a      	adds	r2, r1, r2
    d6ce:	18d3      	adds	r3, r2, r3
    d6d0:	220c      	movs	r2, #12
    d6d2:	701a      	strb	r2, [r3, #0]
    d6d4:	e01d      	b.n	d712 <usb_device_endpoint_enable_callback+0x12a>
    d6d6:	1cfb      	adds	r3, r7, #3
    d6d8:	781b      	ldrb	r3, [r3, #0]
    d6da:	b25b      	sxtb	r3, r3
    d6dc:	2b00      	cmp	r3, #0
    d6de:	da0c      	bge.n	d6fa <usb_device_endpoint_enable_callback+0x112>
    d6e0:	687b      	ldr	r3, [r7, #4]
    d6e2:	6819      	ldr	r1, [r3, #0]
    d6e4:	230f      	movs	r3, #15
    d6e6:	18fb      	adds	r3, r7, r3
    d6e8:	781a      	ldrb	r2, [r3, #0]
    d6ea:	230a      	movs	r3, #10
    d6ec:	33ff      	adds	r3, #255	; 0xff
    d6ee:	0152      	lsls	r2, r2, #5
    d6f0:	188a      	adds	r2, r1, r2
    d6f2:	18d3      	adds	r3, r2, r3
    d6f4:	2208      	movs	r2, #8
    d6f6:	701a      	strb	r2, [r3, #0]
    d6f8:	e00b      	b.n	d712 <usb_device_endpoint_enable_callback+0x12a>
    d6fa:	687b      	ldr	r3, [r7, #4]
    d6fc:	6819      	ldr	r1, [r3, #0]
    d6fe:	230f      	movs	r3, #15
    d700:	18fb      	adds	r3, r7, r3
    d702:	781a      	ldrb	r2, [r3, #0]
    d704:	230a      	movs	r3, #10
    d706:	33ff      	adds	r3, #255	; 0xff
    d708:	0152      	lsls	r2, r2, #5
    d70a:	188a      	adds	r2, r1, r2
    d70c:	18d3      	adds	r3, r2, r3
    d70e:	2204      	movs	r2, #4
    d710:	701a      	strb	r2, [r3, #0]
    d712:	1cbb      	adds	r3, r7, #2
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	2b02      	cmp	r3, #2
    d718:	d10b      	bne.n	d732 <usb_device_endpoint_enable_callback+0x14a>
    d71a:	687b      	ldr	r3, [r7, #4]
    d71c:	6819      	ldr	r1, [r3, #0]
    d71e:	230f      	movs	r3, #15
    d720:	18fb      	adds	r3, r7, r3
    d722:	781a      	ldrb	r2, [r3, #0]
    d724:	230a      	movs	r3, #10
    d726:	33ff      	adds	r3, #255	; 0xff
    d728:	0152      	lsls	r2, r2, #5
    d72a:	188a      	adds	r2, r1, r2
    d72c:	18d3      	adds	r3, r2, r3
    d72e:	2210      	movs	r2, #16
    d730:	701a      	strb	r2, [r3, #0]
    d732:	1cbb      	adds	r3, r7, #2
    d734:	781b      	ldrb	r3, [r3, #0]
    d736:	2b03      	cmp	r3, #3
    d738:	d11d      	bne.n	d776 <usb_device_endpoint_enable_callback+0x18e>
    d73a:	1cfb      	adds	r3, r7, #3
    d73c:	781b      	ldrb	r3, [r3, #0]
    d73e:	b25b      	sxtb	r3, r3
    d740:	2b00      	cmp	r3, #0
    d742:	da0c      	bge.n	d75e <usb_device_endpoint_enable_callback+0x176>
    d744:	687b      	ldr	r3, [r7, #4]
    d746:	6819      	ldr	r1, [r3, #0]
    d748:	230f      	movs	r3, #15
    d74a:	18fb      	adds	r3, r7, r3
    d74c:	781a      	ldrb	r2, [r3, #0]
    d74e:	230a      	movs	r3, #10
    d750:	33ff      	adds	r3, #255	; 0xff
    d752:	0152      	lsls	r2, r2, #5
    d754:	188a      	adds	r2, r1, r2
    d756:	18d3      	adds	r3, r2, r3
    d758:	2240      	movs	r2, #64	; 0x40
    d75a:	701a      	strb	r2, [r3, #0]
    d75c:	e00b      	b.n	d776 <usb_device_endpoint_enable_callback+0x18e>
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	6819      	ldr	r1, [r3, #0]
    d762:	230f      	movs	r3, #15
    d764:	18fb      	adds	r3, r7, r3
    d766:	781a      	ldrb	r2, [r3, #0]
    d768:	230a      	movs	r3, #10
    d76a:	33ff      	adds	r3, #255	; 0xff
    d76c:	0152      	lsls	r2, r2, #5
    d76e:	188a      	adds	r2, r1, r2
    d770:	18d3      	adds	r3, r2, r3
    d772:	2220      	movs	r2, #32
    d774:	701a      	strb	r2, [r3, #0]
    d776:	2300      	movs	r3, #0
    d778:	0018      	movs	r0, r3
    d77a:	46bd      	mov	sp, r7
    d77c:	b004      	add	sp, #16
    d77e:	bd80      	pop	{r7, pc}
    d780:	000046f8 	.word	0x000046f8

0000d784 <usb_device_endpoint_disable_callback>:
    d784:	b580      	push	{r7, lr}
    d786:	b084      	sub	sp, #16
    d788:	af00      	add	r7, sp, #0
    d78a:	6078      	str	r0, [r7, #4]
    d78c:	0008      	movs	r0, r1
    d78e:	0011      	movs	r1, r2
    d790:	1cfb      	adds	r3, r7, #3
    d792:	1c02      	adds	r2, r0, #0
    d794:	701a      	strb	r2, [r3, #0]
    d796:	1cbb      	adds	r3, r7, #2
    d798:	1c0a      	adds	r2, r1, #0
    d79a:	701a      	strb	r2, [r3, #0]
    d79c:	230f      	movs	r3, #15
    d79e:	18fb      	adds	r3, r7, r3
    d7a0:	1cfa      	adds	r2, r7, #3
    d7a2:	7812      	ldrb	r2, [r2, #0]
    d7a4:	210f      	movs	r1, #15
    d7a6:	400a      	ands	r2, r1
    d7a8:	701a      	strb	r2, [r3, #0]
    d7aa:	230f      	movs	r3, #15
    d7ac:	18fb      	adds	r3, r7, r3
    d7ae:	781a      	ldrb	r2, [r3, #0]
    d7b0:	230f      	movs	r3, #15
    d7b2:	18fb      	adds	r3, r7, r3
    d7b4:	7819      	ldrb	r1, [r3, #0]
    d7b6:	6878      	ldr	r0, [r7, #4]
    d7b8:	23b0      	movs	r3, #176	; 0xb0
    d7ba:	005b      	lsls	r3, r3, #1
    d7bc:	1841      	adds	r1, r0, r1
    d7be:	18cb      	adds	r3, r1, r3
    d7c0:	781b      	ldrb	r3, [r3, #0]
    d7c2:	b25b      	sxtb	r3, r3
    d7c4:	1cb9      	adds	r1, r7, #2
    d7c6:	7809      	ldrb	r1, [r1, #0]
    d7c8:	4857      	ldr	r0, [pc, #348]	; (d928 <usb_device_endpoint_disable_callback+0x1a4>)
    d7ca:	4478      	add	r0, pc
    d7cc:	5c41      	ldrb	r1, [r0, r1]
    d7ce:	b249      	sxtb	r1, r1
    d7d0:	43c9      	mvns	r1, r1
    d7d2:	b249      	sxtb	r1, r1
    d7d4:	400b      	ands	r3, r1
    d7d6:	b25b      	sxtb	r3, r3
    d7d8:	b2d8      	uxtb	r0, r3
    d7da:	6879      	ldr	r1, [r7, #4]
    d7dc:	23b0      	movs	r3, #176	; 0xb0
    d7de:	005b      	lsls	r3, r3, #1
    d7e0:	188a      	adds	r2, r1, r2
    d7e2:	18d3      	adds	r3, r2, r3
    d7e4:	1c02      	adds	r2, r0, #0
    d7e6:	701a      	strb	r2, [r3, #0]
    d7e8:	1cbb      	adds	r3, r7, #2
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	2b00      	cmp	r3, #0
    d7ee:	d12f      	bne.n	d850 <usb_device_endpoint_disable_callback+0xcc>
    d7f0:	230f      	movs	r3, #15
    d7f2:	18fb      	adds	r3, r7, r3
    d7f4:	781b      	ldrb	r3, [r3, #0]
    d7f6:	2b00      	cmp	r3, #0
    d7f8:	d10c      	bne.n	d814 <usb_device_endpoint_disable_callback+0x90>
    d7fa:	687b      	ldr	r3, [r7, #4]
    d7fc:	6819      	ldr	r1, [r3, #0]
    d7fe:	230f      	movs	r3, #15
    d800:	18fb      	adds	r3, r7, r3
    d802:	781a      	ldrb	r2, [r3, #0]
    d804:	2384      	movs	r3, #132	; 0x84
    d806:	005b      	lsls	r3, r3, #1
    d808:	0152      	lsls	r2, r2, #5
    d80a:	188a      	adds	r2, r1, r2
    d80c:	18d3      	adds	r3, r2, r3
    d80e:	2203      	movs	r2, #3
    d810:	701a      	strb	r2, [r3, #0]
    d812:	e01d      	b.n	d850 <usb_device_endpoint_disable_callback+0xcc>
    d814:	1cfb      	adds	r3, r7, #3
    d816:	781b      	ldrb	r3, [r3, #0]
    d818:	b25b      	sxtb	r3, r3
    d81a:	2b00      	cmp	r3, #0
    d81c:	da0c      	bge.n	d838 <usb_device_endpoint_disable_callback+0xb4>
    d81e:	687b      	ldr	r3, [r7, #4]
    d820:	6819      	ldr	r1, [r3, #0]
    d822:	230f      	movs	r3, #15
    d824:	18fb      	adds	r3, r7, r3
    d826:	781a      	ldrb	r2, [r3, #0]
    d828:	2384      	movs	r3, #132	; 0x84
    d82a:	005b      	lsls	r3, r3, #1
    d82c:	0152      	lsls	r2, r2, #5
    d82e:	188a      	adds	r2, r1, r2
    d830:	18d3      	adds	r3, r2, r3
    d832:	2202      	movs	r2, #2
    d834:	701a      	strb	r2, [r3, #0]
    d836:	e00b      	b.n	d850 <usb_device_endpoint_disable_callback+0xcc>
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	6819      	ldr	r1, [r3, #0]
    d83c:	230f      	movs	r3, #15
    d83e:	18fb      	adds	r3, r7, r3
    d840:	781a      	ldrb	r2, [r3, #0]
    d842:	2384      	movs	r3, #132	; 0x84
    d844:	005b      	lsls	r3, r3, #1
    d846:	0152      	lsls	r2, r2, #5
    d848:	188a      	adds	r2, r1, r2
    d84a:	18d3      	adds	r3, r2, r3
    d84c:	2201      	movs	r2, #1
    d84e:	701a      	strb	r2, [r3, #0]
    d850:	1cbb      	adds	r3, r7, #2
    d852:	781b      	ldrb	r3, [r3, #0]
    d854:	2b01      	cmp	r3, #1
    d856:	d12f      	bne.n	d8b8 <usb_device_endpoint_disable_callback+0x134>
    d858:	230f      	movs	r3, #15
    d85a:	18fb      	adds	r3, r7, r3
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	2b00      	cmp	r3, #0
    d860:	d10c      	bne.n	d87c <usb_device_endpoint_disable_callback+0xf8>
    d862:	687b      	ldr	r3, [r7, #4]
    d864:	6819      	ldr	r1, [r3, #0]
    d866:	230f      	movs	r3, #15
    d868:	18fb      	adds	r3, r7, r3
    d86a:	781a      	ldrb	r2, [r3, #0]
    d86c:	2384      	movs	r3, #132	; 0x84
    d86e:	005b      	lsls	r3, r3, #1
    d870:	0152      	lsls	r2, r2, #5
    d872:	188a      	adds	r2, r1, r2
    d874:	18d3      	adds	r3, r2, r3
    d876:	220c      	movs	r2, #12
    d878:	701a      	strb	r2, [r3, #0]
    d87a:	e01d      	b.n	d8b8 <usb_device_endpoint_disable_callback+0x134>
    d87c:	1cfb      	adds	r3, r7, #3
    d87e:	781b      	ldrb	r3, [r3, #0]
    d880:	b25b      	sxtb	r3, r3
    d882:	2b00      	cmp	r3, #0
    d884:	da0c      	bge.n	d8a0 <usb_device_endpoint_disable_callback+0x11c>
    d886:	687b      	ldr	r3, [r7, #4]
    d888:	6819      	ldr	r1, [r3, #0]
    d88a:	230f      	movs	r3, #15
    d88c:	18fb      	adds	r3, r7, r3
    d88e:	781a      	ldrb	r2, [r3, #0]
    d890:	2384      	movs	r3, #132	; 0x84
    d892:	005b      	lsls	r3, r3, #1
    d894:	0152      	lsls	r2, r2, #5
    d896:	188a      	adds	r2, r1, r2
    d898:	18d3      	adds	r3, r2, r3
    d89a:	2208      	movs	r2, #8
    d89c:	701a      	strb	r2, [r3, #0]
    d89e:	e00b      	b.n	d8b8 <usb_device_endpoint_disable_callback+0x134>
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	6819      	ldr	r1, [r3, #0]
    d8a4:	230f      	movs	r3, #15
    d8a6:	18fb      	adds	r3, r7, r3
    d8a8:	781a      	ldrb	r2, [r3, #0]
    d8aa:	2384      	movs	r3, #132	; 0x84
    d8ac:	005b      	lsls	r3, r3, #1
    d8ae:	0152      	lsls	r2, r2, #5
    d8b0:	188a      	adds	r2, r1, r2
    d8b2:	18d3      	adds	r3, r2, r3
    d8b4:	2204      	movs	r2, #4
    d8b6:	701a      	strb	r2, [r3, #0]
    d8b8:	1cbb      	adds	r3, r7, #2
    d8ba:	781b      	ldrb	r3, [r3, #0]
    d8bc:	2b02      	cmp	r3, #2
    d8be:	d10b      	bne.n	d8d8 <usb_device_endpoint_disable_callback+0x154>
    d8c0:	687b      	ldr	r3, [r7, #4]
    d8c2:	6819      	ldr	r1, [r3, #0]
    d8c4:	230f      	movs	r3, #15
    d8c6:	18fb      	adds	r3, r7, r3
    d8c8:	781a      	ldrb	r2, [r3, #0]
    d8ca:	2384      	movs	r3, #132	; 0x84
    d8cc:	005b      	lsls	r3, r3, #1
    d8ce:	0152      	lsls	r2, r2, #5
    d8d0:	188a      	adds	r2, r1, r2
    d8d2:	18d3      	adds	r3, r2, r3
    d8d4:	2210      	movs	r2, #16
    d8d6:	701a      	strb	r2, [r3, #0]
    d8d8:	1cbb      	adds	r3, r7, #2
    d8da:	781b      	ldrb	r3, [r3, #0]
    d8dc:	2b03      	cmp	r3, #3
    d8de:	d11d      	bne.n	d91c <usb_device_endpoint_disable_callback+0x198>
    d8e0:	1cfb      	adds	r3, r7, #3
    d8e2:	781b      	ldrb	r3, [r3, #0]
    d8e4:	b25b      	sxtb	r3, r3
    d8e6:	2b00      	cmp	r3, #0
    d8e8:	da0c      	bge.n	d904 <usb_device_endpoint_disable_callback+0x180>
    d8ea:	687b      	ldr	r3, [r7, #4]
    d8ec:	6819      	ldr	r1, [r3, #0]
    d8ee:	230f      	movs	r3, #15
    d8f0:	18fb      	adds	r3, r7, r3
    d8f2:	781a      	ldrb	r2, [r3, #0]
    d8f4:	2384      	movs	r3, #132	; 0x84
    d8f6:	005b      	lsls	r3, r3, #1
    d8f8:	0152      	lsls	r2, r2, #5
    d8fa:	188a      	adds	r2, r1, r2
    d8fc:	18d3      	adds	r3, r2, r3
    d8fe:	2240      	movs	r2, #64	; 0x40
    d900:	701a      	strb	r2, [r3, #0]
    d902:	e00b      	b.n	d91c <usb_device_endpoint_disable_callback+0x198>
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	6819      	ldr	r1, [r3, #0]
    d908:	230f      	movs	r3, #15
    d90a:	18fb      	adds	r3, r7, r3
    d90c:	781a      	ldrb	r2, [r3, #0]
    d90e:	2384      	movs	r3, #132	; 0x84
    d910:	005b      	lsls	r3, r3, #1
    d912:	0152      	lsls	r2, r2, #5
    d914:	188a      	adds	r2, r1, r2
    d916:	18d3      	adds	r3, r2, r3
    d918:	2220      	movs	r2, #32
    d91a:	701a      	strb	r2, [r3, #0]
    d91c:	2300      	movs	r3, #0
    d91e:	0018      	movs	r0, r3
    d920:	46bd      	mov	sp, r7
    d922:	b004      	add	sp, #16
    d924:	bd80      	pop	{r7, pc}
    d926:	46c0      	nop			; (mov r8, r8)
    d928:	0000455a 	.word	0x0000455a

0000d92c <usb_device_endpoint_get_config_defaults>:
    d92c:	b580      	push	{r7, lr}
    d92e:	b082      	sub	sp, #8
    d930:	af00      	add	r7, sp, #0
    d932:	6078      	str	r0, [r7, #4]
    d934:	687b      	ldr	r3, [r7, #4]
    d936:	2200      	movs	r2, #0
    d938:	701a      	strb	r2, [r3, #0]
    d93a:	687b      	ldr	r3, [r7, #4]
    d93c:	2200      	movs	r2, #0
    d93e:	705a      	strb	r2, [r3, #1]
    d940:	687b      	ldr	r3, [r7, #4]
    d942:	2200      	movs	r2, #0
    d944:	709a      	strb	r2, [r3, #2]
    d946:	687b      	ldr	r3, [r7, #4]
    d948:	2201      	movs	r2, #1
    d94a:	70da      	strb	r2, [r3, #3]
    d94c:	46c0      	nop			; (mov r8, r8)
    d94e:	46bd      	mov	sp, r7
    d950:	b002      	add	sp, #8
    d952:	bd80      	pop	{r7, pc}

0000d954 <usb_device_endpoint_set_config>:
    d954:	b5b0      	push	{r4, r5, r7, lr}
    d956:	b084      	sub	sp, #16
    d958:	af00      	add	r7, sp, #0
    d95a:	6078      	str	r0, [r7, #4]
    d95c:	6039      	str	r1, [r7, #0]
    d95e:	4bdf      	ldr	r3, [pc, #892]	; (dcdc <usb_device_endpoint_set_config+0x388>)
    d960:	447b      	add	r3, pc
    d962:	683a      	ldr	r2, [r7, #0]
    d964:	7811      	ldrb	r1, [r2, #0]
    d966:	220f      	movs	r2, #15
    d968:	18ba      	adds	r2, r7, r2
    d96a:	200f      	movs	r0, #15
    d96c:	4001      	ands	r1, r0
    d96e:	7011      	strb	r1, [r2, #0]
    d970:	683a      	ldr	r2, [r7, #0]
    d972:	7812      	ldrb	r2, [r2, #0]
    d974:	b252      	sxtb	r2, r2
    d976:	b2d2      	uxtb	r2, r2
    d978:	09d2      	lsrs	r2, r2, #7
    d97a:	b2d1      	uxtb	r1, r2
    d97c:	220e      	movs	r2, #14
    d97e:	18ba      	adds	r2, r7, r2
    d980:	7011      	strb	r1, [r2, #0]
    d982:	683a      	ldr	r2, [r7, #0]
    d984:	78d2      	ldrb	r2, [r2, #3]
    d986:	2a04      	cmp	r2, #4
    d988:	d900      	bls.n	d98c <usb_device_endpoint_set_config+0x38>
    d98a:	e214      	b.n	ddb6 <usb_device_endpoint_set_config+0x462>
    d98c:	0010      	movs	r0, r2
    d98e:	f002 fe7f 	bl	10690 <__gnu_thumb1_case_si>
    d992:	46c0      	nop			; (mov r8, r8)
    d994:	00000014 	.word	0x00000014
    d998:	0000002a 	.word	0x0000002a
    d99c:	000001aa 	.word	0x000001aa
    d9a0:	00000278 	.word	0x00000278
    d9a4:	00000354 	.word	0x00000354
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	220f      	movs	r2, #15
    d9ae:	18ba      	adds	r2, r7, r2
    d9b0:	7812      	ldrb	r2, [r2, #0]
    d9b2:	3208      	adds	r2, #8
    d9b4:	0152      	lsls	r2, r2, #5
    d9b6:	2100      	movs	r1, #0
    d9b8:	54d1      	strb	r1, [r2, r3]
    d9ba:	2300      	movs	r3, #0
    d9bc:	e259      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    d9be:	687a      	ldr	r2, [r7, #4]
    d9c0:	6812      	ldr	r2, [r2, #0]
    d9c2:	210f      	movs	r1, #15
    d9c4:	1879      	adds	r1, r7, r1
    d9c6:	7809      	ldrb	r1, [r1, #0]
    d9c8:	3108      	adds	r1, #8
    d9ca:	0149      	lsls	r1, r1, #5
    d9cc:	5c8a      	ldrb	r2, [r1, r2]
    d9ce:	b2d2      	uxtb	r2, r2
    d9d0:	0011      	movs	r1, r2
    d9d2:	2207      	movs	r2, #7
    d9d4:	400a      	ands	r2, r1
    d9d6:	d130      	bne.n	da3a <usb_device_endpoint_set_config+0xe6>
    d9d8:	687a      	ldr	r2, [r7, #4]
    d9da:	6812      	ldr	r2, [r2, #0]
    d9dc:	210f      	movs	r1, #15
    d9de:	1879      	adds	r1, r7, r1
    d9e0:	7809      	ldrb	r1, [r1, #0]
    d9e2:	3108      	adds	r1, #8
    d9e4:	0149      	lsls	r1, r1, #5
    d9e6:	5c8a      	ldrb	r2, [r1, r2]
    d9e8:	b2d2      	uxtb	r2, r2
    d9ea:	0011      	movs	r1, r2
    d9ec:	2270      	movs	r2, #112	; 0x70
    d9ee:	400a      	ands	r2, r1
    d9f0:	d123      	bne.n	da3a <usb_device_endpoint_set_config+0xe6>
    d9f2:	687a      	ldr	r2, [r7, #4]
    d9f4:	6812      	ldr	r2, [r2, #0]
    d9f6:	210f      	movs	r1, #15
    d9f8:	1879      	adds	r1, r7, r1
    d9fa:	7809      	ldrb	r1, [r1, #0]
    d9fc:	3108      	adds	r1, #8
    d9fe:	0149      	lsls	r1, r1, #5
    da00:	2011      	movs	r0, #17
    da02:	5488      	strb	r0, [r1, r2]
    da04:	687a      	ldr	r2, [r7, #4]
    da06:	6811      	ldr	r1, [r2, #0]
    da08:	220f      	movs	r2, #15
    da0a:	18ba      	adds	r2, r7, r2
    da0c:	7812      	ldrb	r2, [r2, #0]
    da0e:	3208      	adds	r2, #8
    da10:	0152      	lsls	r2, r2, #5
    da12:	188a      	adds	r2, r1, r2
    da14:	3205      	adds	r2, #5
    da16:	2140      	movs	r1, #64	; 0x40
    da18:	7011      	strb	r1, [r2, #0]
    da1a:	687a      	ldr	r2, [r7, #4]
    da1c:	6811      	ldr	r1, [r2, #0]
    da1e:	220f      	movs	r2, #15
    da20:	18ba      	adds	r2, r7, r2
    da22:	7812      	ldrb	r2, [r2, #0]
    da24:	3208      	adds	r2, #8
    da26:	0152      	lsls	r2, r2, #5
    da28:	188a      	adds	r2, r1, r2
    da2a:	3204      	adds	r2, #4
    da2c:	2180      	movs	r1, #128	; 0x80
    da2e:	7011      	strb	r1, [r2, #0]
    da30:	683a      	ldr	r2, [r7, #0]
    da32:	7892      	ldrb	r2, [r2, #2]
    da34:	2a00      	cmp	r2, #0
    da36:	d102      	bne.n	da3e <usb_device_endpoint_set_config+0xea>
    da38:	e02c      	b.n	da94 <usb_device_endpoint_set_config+0x140>
    da3a:	231c      	movs	r3, #28
    da3c:	e219      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    da3e:	220f      	movs	r2, #15
    da40:	18ba      	adds	r2, r7, r2
    da42:	7814      	ldrb	r4, [r2, #0]
    da44:	220f      	movs	r2, #15
    da46:	18ba      	adds	r2, r7, r2
    da48:	7812      	ldrb	r2, [r2, #0]
    da4a:	49a5      	ldr	r1, [pc, #660]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    da4c:	5859      	ldr	r1, [r3, r1]
    da4e:	0152      	lsls	r2, r2, #5
    da50:	188a      	adds	r2, r1, r2
    da52:	3204      	adds	r2, #4
    da54:	6812      	ldr	r2, [r2, #0]
    da56:	2180      	movs	r1, #128	; 0x80
    da58:	0609      	lsls	r1, r1, #24
    da5a:	4311      	orrs	r1, r2
    da5c:	4aa0      	ldr	r2, [pc, #640]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    da5e:	5898      	ldr	r0, [r3, r2]
    da60:	0162      	lsls	r2, r4, #5
    da62:	1882      	adds	r2, r0, r2
    da64:	3204      	adds	r2, #4
    da66:	6011      	str	r1, [r2, #0]
    da68:	220f      	movs	r2, #15
    da6a:	18ba      	adds	r2, r7, r2
    da6c:	7814      	ldrb	r4, [r2, #0]
    da6e:	220f      	movs	r2, #15
    da70:	18ba      	adds	r2, r7, r2
    da72:	7812      	ldrb	r2, [r2, #0]
    da74:	499a      	ldr	r1, [pc, #616]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    da76:	5859      	ldr	r1, [r3, r1]
    da78:	0152      	lsls	r2, r2, #5
    da7a:	188a      	adds	r2, r1, r2
    da7c:	3214      	adds	r2, #20
    da7e:	6812      	ldr	r2, [r2, #0]
    da80:	2180      	movs	r1, #128	; 0x80
    da82:	0609      	lsls	r1, r1, #24
    da84:	4311      	orrs	r1, r2
    da86:	4a96      	ldr	r2, [pc, #600]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    da88:	5898      	ldr	r0, [r3, r2]
    da8a:	0162      	lsls	r2, r4, #5
    da8c:	1882      	adds	r2, r0, r2
    da8e:	3214      	adds	r2, #20
    da90:	6011      	str	r1, [r2, #0]
    da92:	e027      	b.n	dae4 <usb_device_endpoint_set_config+0x190>
    da94:	220f      	movs	r2, #15
    da96:	18ba      	adds	r2, r7, r2
    da98:	7814      	ldrb	r4, [r2, #0]
    da9a:	220f      	movs	r2, #15
    da9c:	18ba      	adds	r2, r7, r2
    da9e:	7812      	ldrb	r2, [r2, #0]
    daa0:	498f      	ldr	r1, [pc, #572]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    daa2:	5859      	ldr	r1, [r3, r1]
    daa4:	0152      	lsls	r2, r2, #5
    daa6:	188a      	adds	r2, r1, r2
    daa8:	3204      	adds	r2, #4
    daaa:	6812      	ldr	r2, [r2, #0]
    daac:	0052      	lsls	r2, r2, #1
    daae:	0851      	lsrs	r1, r2, #1
    dab0:	4a8b      	ldr	r2, [pc, #556]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    dab2:	5898      	ldr	r0, [r3, r2]
    dab4:	0162      	lsls	r2, r4, #5
    dab6:	1882      	adds	r2, r0, r2
    dab8:	3204      	adds	r2, #4
    daba:	6011      	str	r1, [r2, #0]
    dabc:	220f      	movs	r2, #15
    dabe:	18ba      	adds	r2, r7, r2
    dac0:	7814      	ldrb	r4, [r2, #0]
    dac2:	220f      	movs	r2, #15
    dac4:	18ba      	adds	r2, r7, r2
    dac6:	7812      	ldrb	r2, [r2, #0]
    dac8:	4985      	ldr	r1, [pc, #532]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    daca:	5859      	ldr	r1, [r3, r1]
    dacc:	0152      	lsls	r2, r2, #5
    dace:	188a      	adds	r2, r1, r2
    dad0:	3214      	adds	r2, #20
    dad2:	6812      	ldr	r2, [r2, #0]
    dad4:	0052      	lsls	r2, r2, #1
    dad6:	0851      	lsrs	r1, r2, #1
    dad8:	4a81      	ldr	r2, [pc, #516]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    dada:	5898      	ldr	r0, [r3, r2]
    dadc:	0162      	lsls	r2, r4, #5
    dade:	1882      	adds	r2, r0, r2
    dae0:	3214      	adds	r2, #20
    dae2:	6011      	str	r1, [r2, #0]
    dae4:	220f      	movs	r2, #15
    dae6:	18ba      	adds	r2, r7, r2
    dae8:	7812      	ldrb	r2, [r2, #0]
    daea:	6839      	ldr	r1, [r7, #0]
    daec:	7849      	ldrb	r1, [r1, #1]
    daee:	1c08      	adds	r0, r1, #0
    daf0:	2107      	movs	r1, #7
    daf2:	4001      	ands	r1, r0
    daf4:	b2c8      	uxtb	r0, r1
    daf6:	497a      	ldr	r1, [pc, #488]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    daf8:	5859      	ldr	r1, [r3, r1]
    dafa:	0152      	lsls	r2, r2, #5
    dafc:	188a      	adds	r2, r1, r2
    dafe:	6851      	ldr	r1, [r2, #4]
    db00:	2407      	movs	r4, #7
    db02:	4020      	ands	r0, r4
    db04:	0700      	lsls	r0, r0, #28
    db06:	4c77      	ldr	r4, [pc, #476]	; (dce4 <usb_device_endpoint_set_config+0x390>)
    db08:	4021      	ands	r1, r4
    db0a:	4301      	orrs	r1, r0
    db0c:	6051      	str	r1, [r2, #4]
    db0e:	220f      	movs	r2, #15
    db10:	18ba      	adds	r2, r7, r2
    db12:	7810      	ldrb	r0, [r2, #0]
    db14:	683a      	ldr	r2, [r7, #0]
    db16:	7852      	ldrb	r2, [r2, #1]
    db18:	1c11      	adds	r1, r2, #0
    db1a:	2207      	movs	r2, #7
    db1c:	400a      	ands	r2, r1
    db1e:	b2d1      	uxtb	r1, r2
    db20:	4a6f      	ldr	r2, [pc, #444]	; (dce0 <usb_device_endpoint_set_config+0x38c>)
    db22:	589a      	ldr	r2, [r3, r2]
    db24:	0143      	lsls	r3, r0, #5
    db26:	18d3      	adds	r3, r2, r3
    db28:	3310      	adds	r3, #16
    db2a:	685a      	ldr	r2, [r3, #4]
    db2c:	2007      	movs	r0, #7
    db2e:	4001      	ands	r1, r0
    db30:	0709      	lsls	r1, r1, #28
    db32:	486c      	ldr	r0, [pc, #432]	; (dce4 <usb_device_endpoint_set_config+0x390>)
    db34:	4002      	ands	r2, r0
    db36:	430a      	orrs	r2, r1
    db38:	605a      	str	r2, [r3, #4]
    db3a:	2300      	movs	r3, #0
    db3c:	e199      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    db3e:	220e      	movs	r2, #14
    db40:	18ba      	adds	r2, r7, r2
    db42:	7812      	ldrb	r2, [r2, #0]
    db44:	2a00      	cmp	r2, #0
    db46:	d030      	beq.n	dbaa <usb_device_endpoint_set_config+0x256>
    db48:	687a      	ldr	r2, [r7, #4]
    db4a:	6812      	ldr	r2, [r2, #0]
    db4c:	210f      	movs	r1, #15
    db4e:	1879      	adds	r1, r7, r1
    db50:	7809      	ldrb	r1, [r1, #0]
    db52:	3108      	adds	r1, #8
    db54:	0149      	lsls	r1, r1, #5
    db56:	5c8a      	ldrb	r2, [r1, r2]
    db58:	b2d2      	uxtb	r2, r2
    db5a:	0011      	movs	r1, r2
    db5c:	2270      	movs	r2, #112	; 0x70
    db5e:	400a      	ands	r2, r1
    db60:	d121      	bne.n	dba6 <usb_device_endpoint_set_config+0x252>
    db62:	687a      	ldr	r2, [r7, #4]
    db64:	6811      	ldr	r1, [r2, #0]
    db66:	220f      	movs	r2, #15
    db68:	18ba      	adds	r2, r7, r2
    db6a:	7810      	ldrb	r0, [r2, #0]
    db6c:	687a      	ldr	r2, [r7, #4]
    db6e:	6812      	ldr	r2, [r2, #0]
    db70:	240f      	movs	r4, #15
    db72:	193c      	adds	r4, r7, r4
    db74:	7824      	ldrb	r4, [r4, #0]
    db76:	3408      	adds	r4, #8
    db78:	0164      	lsls	r4, r4, #5
    db7a:	5ca2      	ldrb	r2, [r4, r2]
    db7c:	b2d2      	uxtb	r2, r2
    db7e:	2420      	movs	r4, #32
    db80:	4322      	orrs	r2, r4
    db82:	b2d4      	uxtb	r4, r2
    db84:	0002      	movs	r2, r0
    db86:	3208      	adds	r2, #8
    db88:	0152      	lsls	r2, r2, #5
    db8a:	1c20      	adds	r0, r4, #0
    db8c:	5450      	strb	r0, [r2, r1]
    db8e:	687a      	ldr	r2, [r7, #4]
    db90:	6811      	ldr	r1, [r2, #0]
    db92:	220f      	movs	r2, #15
    db94:	18ba      	adds	r2, r7, r2
    db96:	7812      	ldrb	r2, [r2, #0]
    db98:	3208      	adds	r2, #8
    db9a:	0152      	lsls	r2, r2, #5
    db9c:	188a      	adds	r2, r1, r2
    db9e:	3204      	adds	r2, #4
    dba0:	2180      	movs	r1, #128	; 0x80
    dba2:	7011      	strb	r1, [r2, #0]
    dba4:	e108      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    dba6:	231c      	movs	r3, #28
    dba8:	e163      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    dbaa:	687a      	ldr	r2, [r7, #4]
    dbac:	6812      	ldr	r2, [r2, #0]
    dbae:	210f      	movs	r1, #15
    dbb0:	1879      	adds	r1, r7, r1
    dbb2:	7809      	ldrb	r1, [r1, #0]
    dbb4:	3108      	adds	r1, #8
    dbb6:	0149      	lsls	r1, r1, #5
    dbb8:	5c8a      	ldrb	r2, [r1, r2]
    dbba:	b2d2      	uxtb	r2, r2
    dbbc:	0011      	movs	r1, r2
    dbbe:	2207      	movs	r2, #7
    dbc0:	400a      	ands	r2, r1
    dbc2:	d121      	bne.n	dc08 <usb_device_endpoint_set_config+0x2b4>
    dbc4:	687a      	ldr	r2, [r7, #4]
    dbc6:	6811      	ldr	r1, [r2, #0]
    dbc8:	220f      	movs	r2, #15
    dbca:	18ba      	adds	r2, r7, r2
    dbcc:	7810      	ldrb	r0, [r2, #0]
    dbce:	687a      	ldr	r2, [r7, #4]
    dbd0:	6812      	ldr	r2, [r2, #0]
    dbd2:	240f      	movs	r4, #15
    dbd4:	193c      	adds	r4, r7, r4
    dbd6:	7824      	ldrb	r4, [r4, #0]
    dbd8:	3408      	adds	r4, #8
    dbda:	0164      	lsls	r4, r4, #5
    dbdc:	5ca2      	ldrb	r2, [r4, r2]
    dbde:	b2d2      	uxtb	r2, r2
    dbe0:	2402      	movs	r4, #2
    dbe2:	4322      	orrs	r2, r4
    dbe4:	b2d4      	uxtb	r4, r2
    dbe6:	0002      	movs	r2, r0
    dbe8:	3208      	adds	r2, #8
    dbea:	0152      	lsls	r2, r2, #5
    dbec:	1c20      	adds	r0, r4, #0
    dbee:	5450      	strb	r0, [r2, r1]
    dbf0:	687a      	ldr	r2, [r7, #4]
    dbf2:	6811      	ldr	r1, [r2, #0]
    dbf4:	220f      	movs	r2, #15
    dbf6:	18ba      	adds	r2, r7, r2
    dbf8:	7812      	ldrb	r2, [r2, #0]
    dbfa:	3208      	adds	r2, #8
    dbfc:	0152      	lsls	r2, r2, #5
    dbfe:	188a      	adds	r2, r1, r2
    dc00:	3205      	adds	r2, #5
    dc02:	2140      	movs	r1, #64	; 0x40
    dc04:	7011      	strb	r1, [r2, #0]
    dc06:	e0d7      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    dc08:	231c      	movs	r3, #28
    dc0a:	e132      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    dc0c:	220e      	movs	r2, #14
    dc0e:	18ba      	adds	r2, r7, r2
    dc10:	7812      	ldrb	r2, [r2, #0]
    dc12:	2a00      	cmp	r2, #0
    dc14:	d030      	beq.n	dc78 <usb_device_endpoint_set_config+0x324>
    dc16:	687a      	ldr	r2, [r7, #4]
    dc18:	6812      	ldr	r2, [r2, #0]
    dc1a:	210f      	movs	r1, #15
    dc1c:	1879      	adds	r1, r7, r1
    dc1e:	7809      	ldrb	r1, [r1, #0]
    dc20:	3108      	adds	r1, #8
    dc22:	0149      	lsls	r1, r1, #5
    dc24:	5c8a      	ldrb	r2, [r1, r2]
    dc26:	b2d2      	uxtb	r2, r2
    dc28:	0011      	movs	r1, r2
    dc2a:	2270      	movs	r2, #112	; 0x70
    dc2c:	400a      	ands	r2, r1
    dc2e:	d121      	bne.n	dc74 <usb_device_endpoint_set_config+0x320>
    dc30:	687a      	ldr	r2, [r7, #4]
    dc32:	6811      	ldr	r1, [r2, #0]
    dc34:	220f      	movs	r2, #15
    dc36:	18ba      	adds	r2, r7, r2
    dc38:	7810      	ldrb	r0, [r2, #0]
    dc3a:	687a      	ldr	r2, [r7, #4]
    dc3c:	6812      	ldr	r2, [r2, #0]
    dc3e:	240f      	movs	r4, #15
    dc40:	193c      	adds	r4, r7, r4
    dc42:	7824      	ldrb	r4, [r4, #0]
    dc44:	3408      	adds	r4, #8
    dc46:	0164      	lsls	r4, r4, #5
    dc48:	5ca2      	ldrb	r2, [r4, r2]
    dc4a:	b2d2      	uxtb	r2, r2
    dc4c:	2430      	movs	r4, #48	; 0x30
    dc4e:	4322      	orrs	r2, r4
    dc50:	b2d4      	uxtb	r4, r2
    dc52:	0002      	movs	r2, r0
    dc54:	3208      	adds	r2, #8
    dc56:	0152      	lsls	r2, r2, #5
    dc58:	1c20      	adds	r0, r4, #0
    dc5a:	5450      	strb	r0, [r2, r1]
    dc5c:	687a      	ldr	r2, [r7, #4]
    dc5e:	6811      	ldr	r1, [r2, #0]
    dc60:	220f      	movs	r2, #15
    dc62:	18ba      	adds	r2, r7, r2
    dc64:	7812      	ldrb	r2, [r2, #0]
    dc66:	3208      	adds	r2, #8
    dc68:	0152      	lsls	r2, r2, #5
    dc6a:	188a      	adds	r2, r1, r2
    dc6c:	3204      	adds	r2, #4
    dc6e:	2180      	movs	r1, #128	; 0x80
    dc70:	7011      	strb	r1, [r2, #0]
    dc72:	e0a1      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    dc74:	231c      	movs	r3, #28
    dc76:	e0fc      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    dc78:	687a      	ldr	r2, [r7, #4]
    dc7a:	6812      	ldr	r2, [r2, #0]
    dc7c:	210f      	movs	r1, #15
    dc7e:	1879      	adds	r1, r7, r1
    dc80:	7809      	ldrb	r1, [r1, #0]
    dc82:	3108      	adds	r1, #8
    dc84:	0149      	lsls	r1, r1, #5
    dc86:	5c8a      	ldrb	r2, [r1, r2]
    dc88:	b2d2      	uxtb	r2, r2
    dc8a:	0011      	movs	r1, r2
    dc8c:	2207      	movs	r2, #7
    dc8e:	400a      	ands	r2, r1
    dc90:	d121      	bne.n	dcd6 <usb_device_endpoint_set_config+0x382>
    dc92:	687a      	ldr	r2, [r7, #4]
    dc94:	6811      	ldr	r1, [r2, #0]
    dc96:	220f      	movs	r2, #15
    dc98:	18ba      	adds	r2, r7, r2
    dc9a:	7810      	ldrb	r0, [r2, #0]
    dc9c:	687a      	ldr	r2, [r7, #4]
    dc9e:	6812      	ldr	r2, [r2, #0]
    dca0:	240f      	movs	r4, #15
    dca2:	193c      	adds	r4, r7, r4
    dca4:	7824      	ldrb	r4, [r4, #0]
    dca6:	3408      	adds	r4, #8
    dca8:	0164      	lsls	r4, r4, #5
    dcaa:	5ca2      	ldrb	r2, [r4, r2]
    dcac:	b2d2      	uxtb	r2, r2
    dcae:	2403      	movs	r4, #3
    dcb0:	4322      	orrs	r2, r4
    dcb2:	b2d4      	uxtb	r4, r2
    dcb4:	0002      	movs	r2, r0
    dcb6:	3208      	adds	r2, #8
    dcb8:	0152      	lsls	r2, r2, #5
    dcba:	1c20      	adds	r0, r4, #0
    dcbc:	5450      	strb	r0, [r2, r1]
    dcbe:	687a      	ldr	r2, [r7, #4]
    dcc0:	6811      	ldr	r1, [r2, #0]
    dcc2:	220f      	movs	r2, #15
    dcc4:	18ba      	adds	r2, r7, r2
    dcc6:	7812      	ldrb	r2, [r2, #0]
    dcc8:	3208      	adds	r2, #8
    dcca:	0152      	lsls	r2, r2, #5
    dccc:	188a      	adds	r2, r1, r2
    dcce:	3205      	adds	r2, #5
    dcd0:	2140      	movs	r1, #64	; 0x40
    dcd2:	7011      	strb	r1, [r2, #0]
    dcd4:	e070      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    dcd6:	231c      	movs	r3, #28
    dcd8:	e0cb      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    dcda:	46c0      	nop			; (mov r8, r8)
    dcdc:	00004480 	.word	0x00004480
    dce0:	00000020 	.word	0x00000020
    dce4:	8fffffff 	.word	0x8fffffff
    dce8:	220e      	movs	r2, #14
    dcea:	18ba      	adds	r2, r7, r2
    dcec:	7812      	ldrb	r2, [r2, #0]
    dcee:	2a00      	cmp	r2, #0
    dcf0:	d030      	beq.n	dd54 <usb_device_endpoint_set_config+0x400>
    dcf2:	687a      	ldr	r2, [r7, #4]
    dcf4:	6812      	ldr	r2, [r2, #0]
    dcf6:	210f      	movs	r1, #15
    dcf8:	1879      	adds	r1, r7, r1
    dcfa:	7809      	ldrb	r1, [r1, #0]
    dcfc:	3108      	adds	r1, #8
    dcfe:	0149      	lsls	r1, r1, #5
    dd00:	5c8a      	ldrb	r2, [r1, r2]
    dd02:	b2d2      	uxtb	r2, r2
    dd04:	0011      	movs	r1, r2
    dd06:	2270      	movs	r2, #112	; 0x70
    dd08:	400a      	ands	r2, r1
    dd0a:	d121      	bne.n	dd50 <usb_device_endpoint_set_config+0x3fc>
    dd0c:	687a      	ldr	r2, [r7, #4]
    dd0e:	6811      	ldr	r1, [r2, #0]
    dd10:	220f      	movs	r2, #15
    dd12:	18ba      	adds	r2, r7, r2
    dd14:	7810      	ldrb	r0, [r2, #0]
    dd16:	687a      	ldr	r2, [r7, #4]
    dd18:	6812      	ldr	r2, [r2, #0]
    dd1a:	240f      	movs	r4, #15
    dd1c:	193c      	adds	r4, r7, r4
    dd1e:	7824      	ldrb	r4, [r4, #0]
    dd20:	3408      	adds	r4, #8
    dd22:	0164      	lsls	r4, r4, #5
    dd24:	5ca2      	ldrb	r2, [r4, r2]
    dd26:	b2d2      	uxtb	r2, r2
    dd28:	2440      	movs	r4, #64	; 0x40
    dd2a:	4322      	orrs	r2, r4
    dd2c:	b2d4      	uxtb	r4, r2
    dd2e:	0002      	movs	r2, r0
    dd30:	3208      	adds	r2, #8
    dd32:	0152      	lsls	r2, r2, #5
    dd34:	1c20      	adds	r0, r4, #0
    dd36:	5450      	strb	r0, [r2, r1]
    dd38:	687a      	ldr	r2, [r7, #4]
    dd3a:	6811      	ldr	r1, [r2, #0]
    dd3c:	220f      	movs	r2, #15
    dd3e:	18ba      	adds	r2, r7, r2
    dd40:	7812      	ldrb	r2, [r2, #0]
    dd42:	3208      	adds	r2, #8
    dd44:	0152      	lsls	r2, r2, #5
    dd46:	188a      	adds	r2, r1, r2
    dd48:	3204      	adds	r2, #4
    dd4a:	2180      	movs	r1, #128	; 0x80
    dd4c:	7011      	strb	r1, [r2, #0]
    dd4e:	e033      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    dd50:	231c      	movs	r3, #28
    dd52:	e08e      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    dd54:	687a      	ldr	r2, [r7, #4]
    dd56:	6812      	ldr	r2, [r2, #0]
    dd58:	210f      	movs	r1, #15
    dd5a:	1879      	adds	r1, r7, r1
    dd5c:	7809      	ldrb	r1, [r1, #0]
    dd5e:	3108      	adds	r1, #8
    dd60:	0149      	lsls	r1, r1, #5
    dd62:	5c8a      	ldrb	r2, [r1, r2]
    dd64:	b2d2      	uxtb	r2, r2
    dd66:	0011      	movs	r1, r2
    dd68:	2207      	movs	r2, #7
    dd6a:	400a      	ands	r2, r1
    dd6c:	d121      	bne.n	ddb2 <usb_device_endpoint_set_config+0x45e>
    dd6e:	687a      	ldr	r2, [r7, #4]
    dd70:	6811      	ldr	r1, [r2, #0]
    dd72:	220f      	movs	r2, #15
    dd74:	18ba      	adds	r2, r7, r2
    dd76:	7810      	ldrb	r0, [r2, #0]
    dd78:	687a      	ldr	r2, [r7, #4]
    dd7a:	6812      	ldr	r2, [r2, #0]
    dd7c:	240f      	movs	r4, #15
    dd7e:	193c      	adds	r4, r7, r4
    dd80:	7824      	ldrb	r4, [r4, #0]
    dd82:	3408      	adds	r4, #8
    dd84:	0164      	lsls	r4, r4, #5
    dd86:	5ca2      	ldrb	r2, [r4, r2]
    dd88:	b2d2      	uxtb	r2, r2
    dd8a:	2404      	movs	r4, #4
    dd8c:	4322      	orrs	r2, r4
    dd8e:	b2d4      	uxtb	r4, r2
    dd90:	0002      	movs	r2, r0
    dd92:	3208      	adds	r2, #8
    dd94:	0152      	lsls	r2, r2, #5
    dd96:	1c20      	adds	r0, r4, #0
    dd98:	5450      	strb	r0, [r2, r1]
    dd9a:	687a      	ldr	r2, [r7, #4]
    dd9c:	6811      	ldr	r1, [r2, #0]
    dd9e:	220f      	movs	r2, #15
    dda0:	18ba      	adds	r2, r7, r2
    dda2:	7812      	ldrb	r2, [r2, #0]
    dda4:	3208      	adds	r2, #8
    dda6:	0152      	lsls	r2, r2, #5
    dda8:	188a      	adds	r2, r1, r2
    ddaa:	3205      	adds	r2, #5
    ddac:	2140      	movs	r1, #64	; 0x40
    ddae:	7011      	strb	r1, [r2, #0]
    ddb0:	e002      	b.n	ddb8 <usb_device_endpoint_set_config+0x464>
    ddb2:	231c      	movs	r3, #28
    ddb4:	e05d      	b.n	de72 <usb_device_endpoint_set_config+0x51e>
    ddb6:	46c0      	nop			; (mov r8, r8)
    ddb8:	220f      	movs	r2, #15
    ddba:	18ba      	adds	r2, r7, r2
    ddbc:	7814      	ldrb	r4, [r2, #0]
    ddbe:	220e      	movs	r2, #14
    ddc0:	18ba      	adds	r2, r7, r2
    ddc2:	7812      	ldrb	r2, [r2, #0]
    ddc4:	6839      	ldr	r1, [r7, #0]
    ddc6:	7849      	ldrb	r1, [r1, #1]
    ddc8:	1c08      	adds	r0, r1, #0
    ddca:	2107      	movs	r1, #7
    ddcc:	4001      	ands	r1, r0
    ddce:	b2c8      	uxtb	r0, r1
    ddd0:	492a      	ldr	r1, [pc, #168]	; (de7c <usb_device_endpoint_set_config+0x528>)
    ddd2:	5859      	ldr	r1, [r3, r1]
    ddd4:	0064      	lsls	r4, r4, #1
    ddd6:	18a2      	adds	r2, r4, r2
    ddd8:	0112      	lsls	r2, r2, #4
    ddda:	188a      	adds	r2, r1, r2
    dddc:	6851      	ldr	r1, [r2, #4]
    ddde:	2407      	movs	r4, #7
    dde0:	4020      	ands	r0, r4
    dde2:	0700      	lsls	r0, r0, #28
    dde4:	4c26      	ldr	r4, [pc, #152]	; (de80 <usb_device_endpoint_set_config+0x52c>)
    dde6:	4021      	ands	r1, r4
    dde8:	4301      	orrs	r1, r0
    ddea:	6051      	str	r1, [r2, #4]
    ddec:	683a      	ldr	r2, [r7, #0]
    ddee:	7892      	ldrb	r2, [r2, #2]
    ddf0:	2a00      	cmp	r2, #0
    ddf2:	d01f      	beq.n	de34 <usb_device_endpoint_set_config+0x4e0>
    ddf4:	220f      	movs	r2, #15
    ddf6:	18ba      	adds	r2, r7, r2
    ddf8:	7814      	ldrb	r4, [r2, #0]
    ddfa:	220e      	movs	r2, #14
    ddfc:	18ba      	adds	r2, r7, r2
    ddfe:	7810      	ldrb	r0, [r2, #0]
    de00:	220f      	movs	r2, #15
    de02:	18ba      	adds	r2, r7, r2
    de04:	7815      	ldrb	r5, [r2, #0]
    de06:	220e      	movs	r2, #14
    de08:	18ba      	adds	r2, r7, r2
    de0a:	7812      	ldrb	r2, [r2, #0]
    de0c:	491b      	ldr	r1, [pc, #108]	; (de7c <usb_device_endpoint_set_config+0x528>)
    de0e:	5859      	ldr	r1, [r3, r1]
    de10:	006d      	lsls	r5, r5, #1
    de12:	18aa      	adds	r2, r5, r2
    de14:	0112      	lsls	r2, r2, #4
    de16:	188a      	adds	r2, r1, r2
    de18:	3204      	adds	r2, #4
    de1a:	6812      	ldr	r2, [r2, #0]
    de1c:	2180      	movs	r1, #128	; 0x80
    de1e:	0609      	lsls	r1, r1, #24
    de20:	430a      	orrs	r2, r1
    de22:	4916      	ldr	r1, [pc, #88]	; (de7c <usb_device_endpoint_set_config+0x528>)
    de24:	5859      	ldr	r1, [r3, r1]
    de26:	0063      	lsls	r3, r4, #1
    de28:	181b      	adds	r3, r3, r0
    de2a:	011b      	lsls	r3, r3, #4
    de2c:	18cb      	adds	r3, r1, r3
    de2e:	3304      	adds	r3, #4
    de30:	601a      	str	r2, [r3, #0]
    de32:	e01d      	b.n	de70 <usb_device_endpoint_set_config+0x51c>
    de34:	220f      	movs	r2, #15
    de36:	18ba      	adds	r2, r7, r2
    de38:	7814      	ldrb	r4, [r2, #0]
    de3a:	220e      	movs	r2, #14
    de3c:	18ba      	adds	r2, r7, r2
    de3e:	7810      	ldrb	r0, [r2, #0]
    de40:	220f      	movs	r2, #15
    de42:	18ba      	adds	r2, r7, r2
    de44:	7815      	ldrb	r5, [r2, #0]
    de46:	220e      	movs	r2, #14
    de48:	18ba      	adds	r2, r7, r2
    de4a:	7812      	ldrb	r2, [r2, #0]
    de4c:	490b      	ldr	r1, [pc, #44]	; (de7c <usb_device_endpoint_set_config+0x528>)
    de4e:	5859      	ldr	r1, [r3, r1]
    de50:	006d      	lsls	r5, r5, #1
    de52:	18aa      	adds	r2, r5, r2
    de54:	0112      	lsls	r2, r2, #4
    de56:	188a      	adds	r2, r1, r2
    de58:	3204      	adds	r2, #4
    de5a:	6812      	ldr	r2, [r2, #0]
    de5c:	0052      	lsls	r2, r2, #1
    de5e:	0852      	lsrs	r2, r2, #1
    de60:	4906      	ldr	r1, [pc, #24]	; (de7c <usb_device_endpoint_set_config+0x528>)
    de62:	5859      	ldr	r1, [r3, r1]
    de64:	0063      	lsls	r3, r4, #1
    de66:	181b      	adds	r3, r3, r0
    de68:	011b      	lsls	r3, r3, #4
    de6a:	18cb      	adds	r3, r1, r3
    de6c:	3304      	adds	r3, #4
    de6e:	601a      	str	r2, [r3, #0]
    de70:	2300      	movs	r3, #0
    de72:	0018      	movs	r0, r3
    de74:	46bd      	mov	sp, r7
    de76:	b004      	add	sp, #16
    de78:	bdb0      	pop	{r4, r5, r7, pc}
    de7a:	46c0      	nop			; (mov r8, r8)
    de7c:	00000020 	.word	0x00000020
    de80:	8fffffff 	.word	0x8fffffff

0000de84 <usb_device_endpoint_abort_job>:
    de84:	b580      	push	{r7, lr}
    de86:	b084      	sub	sp, #16
    de88:	af00      	add	r7, sp, #0
    de8a:	6078      	str	r0, [r7, #4]
    de8c:	000a      	movs	r2, r1
    de8e:	1cfb      	adds	r3, r7, #3
    de90:	701a      	strb	r2, [r3, #0]
    de92:	230f      	movs	r3, #15
    de94:	18fb      	adds	r3, r7, r3
    de96:	1cfa      	adds	r2, r7, #3
    de98:	7812      	ldrb	r2, [r2, #0]
    de9a:	210f      	movs	r1, #15
    de9c:	400a      	ands	r2, r1
    de9e:	701a      	strb	r2, [r3, #0]
    dea0:	1cfb      	adds	r3, r7, #3
    dea2:	781b      	ldrb	r3, [r3, #0]
    dea4:	b25b      	sxtb	r3, r3
    dea6:	2b00      	cmp	r3, #0
    dea8:	da16      	bge.n	ded8 <usb_device_endpoint_abort_job+0x54>
    deaa:	687b      	ldr	r3, [r7, #4]
    deac:	681a      	ldr	r2, [r3, #0]
    deae:	230f      	movs	r3, #15
    deb0:	18fb      	adds	r3, r7, r3
    deb2:	781b      	ldrb	r3, [r3, #0]
    deb4:	3308      	adds	r3, #8
    deb6:	015b      	lsls	r3, r3, #5
    deb8:	18d3      	adds	r3, r2, r3
    deba:	3304      	adds	r3, #4
    debc:	2280      	movs	r2, #128	; 0x80
    debe:	701a      	strb	r2, [r3, #0]
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	681a      	ldr	r2, [r3, #0]
    dec4:	230f      	movs	r3, #15
    dec6:	18fb      	adds	r3, r7, r3
    dec8:	781b      	ldrb	r3, [r3, #0]
    deca:	3308      	adds	r3, #8
    decc:	015b      	lsls	r3, r3, #5
    dece:	18d3      	adds	r3, r2, r3
    ded0:	3307      	adds	r3, #7
    ded2:	2202      	movs	r2, #2
    ded4:	701a      	strb	r2, [r3, #0]
    ded6:	e015      	b.n	df04 <usb_device_endpoint_abort_job+0x80>
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	681a      	ldr	r2, [r3, #0]
    dedc:	230f      	movs	r3, #15
    dede:	18fb      	adds	r3, r7, r3
    dee0:	781b      	ldrb	r3, [r3, #0]
    dee2:	3308      	adds	r3, #8
    dee4:	015b      	lsls	r3, r3, #5
    dee6:	18d3      	adds	r3, r2, r3
    dee8:	3305      	adds	r3, #5
    deea:	2240      	movs	r2, #64	; 0x40
    deec:	701a      	strb	r2, [r3, #0]
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	681a      	ldr	r2, [r3, #0]
    def2:	230f      	movs	r3, #15
    def4:	18fb      	adds	r3, r7, r3
    def6:	781b      	ldrb	r3, [r3, #0]
    def8:	3308      	adds	r3, #8
    defa:	015b      	lsls	r3, r3, #5
    defc:	18d3      	adds	r3, r2, r3
    defe:	3307      	adds	r3, #7
    df00:	2201      	movs	r2, #1
    df02:	701a      	strb	r2, [r3, #0]
    df04:	46c0      	nop			; (mov r8, r8)
    df06:	46bd      	mov	sp, r7
    df08:	b004      	add	sp, #16
    df0a:	bd80      	pop	{r7, pc}

0000df0c <usb_device_endpoint_is_halted>:
    df0c:	b580      	push	{r7, lr}
    df0e:	b084      	sub	sp, #16
    df10:	af00      	add	r7, sp, #0
    df12:	6078      	str	r0, [r7, #4]
    df14:	000a      	movs	r2, r1
    df16:	1cfb      	adds	r3, r7, #3
    df18:	701a      	strb	r2, [r3, #0]
    df1a:	230f      	movs	r3, #15
    df1c:	18fb      	adds	r3, r7, r3
    df1e:	1cfa      	adds	r2, r7, #3
    df20:	7812      	ldrb	r2, [r2, #0]
    df22:	210f      	movs	r1, #15
    df24:	400a      	ands	r2, r1
    df26:	701a      	strb	r2, [r3, #0]
    df28:	1cfb      	adds	r3, r7, #3
    df2a:	781b      	ldrb	r3, [r3, #0]
    df2c:	b25b      	sxtb	r3, r3
    df2e:	2b00      	cmp	r3, #0
    df30:	da11      	bge.n	df56 <usb_device_endpoint_is_halted+0x4a>
    df32:	687b      	ldr	r3, [r7, #4]
    df34:	681a      	ldr	r2, [r3, #0]
    df36:	230f      	movs	r3, #15
    df38:	18fb      	adds	r3, r7, r3
    df3a:	781b      	ldrb	r3, [r3, #0]
    df3c:	3308      	adds	r3, #8
    df3e:	015b      	lsls	r3, r3, #5
    df40:	18d3      	adds	r3, r2, r3
    df42:	3306      	adds	r3, #6
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	b2db      	uxtb	r3, r3
    df48:	001a      	movs	r2, r3
    df4a:	2320      	movs	r3, #32
    df4c:	4013      	ands	r3, r2
    df4e:	1e5a      	subs	r2, r3, #1
    df50:	4193      	sbcs	r3, r2
    df52:	b2db      	uxtb	r3, r3
    df54:	e010      	b.n	df78 <usb_device_endpoint_is_halted+0x6c>
    df56:	687b      	ldr	r3, [r7, #4]
    df58:	681a      	ldr	r2, [r3, #0]
    df5a:	230f      	movs	r3, #15
    df5c:	18fb      	adds	r3, r7, r3
    df5e:	781b      	ldrb	r3, [r3, #0]
    df60:	3308      	adds	r3, #8
    df62:	015b      	lsls	r3, r3, #5
    df64:	18d3      	adds	r3, r2, r3
    df66:	3306      	adds	r3, #6
    df68:	781b      	ldrb	r3, [r3, #0]
    df6a:	b2db      	uxtb	r3, r3
    df6c:	001a      	movs	r2, r3
    df6e:	2310      	movs	r3, #16
    df70:	4013      	ands	r3, r2
    df72:	1e5a      	subs	r2, r3, #1
    df74:	4193      	sbcs	r3, r2
    df76:	b2db      	uxtb	r3, r3
    df78:	0018      	movs	r0, r3
    df7a:	46bd      	mov	sp, r7
    df7c:	b004      	add	sp, #16
    df7e:	bd80      	pop	{r7, pc}

0000df80 <usb_device_endpoint_set_halt>:
    df80:	b580      	push	{r7, lr}
    df82:	b084      	sub	sp, #16
    df84:	af00      	add	r7, sp, #0
    df86:	6078      	str	r0, [r7, #4]
    df88:	000a      	movs	r2, r1
    df8a:	1cfb      	adds	r3, r7, #3
    df8c:	701a      	strb	r2, [r3, #0]
    df8e:	230f      	movs	r3, #15
    df90:	18fb      	adds	r3, r7, r3
    df92:	1cfa      	adds	r2, r7, #3
    df94:	7812      	ldrb	r2, [r2, #0]
    df96:	210f      	movs	r1, #15
    df98:	400a      	ands	r2, r1
    df9a:	701a      	strb	r2, [r3, #0]
    df9c:	1cfb      	adds	r3, r7, #3
    df9e:	781b      	ldrb	r3, [r3, #0]
    dfa0:	b25b      	sxtb	r3, r3
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	da0b      	bge.n	dfbe <usb_device_endpoint_set_halt+0x3e>
    dfa6:	687b      	ldr	r3, [r7, #4]
    dfa8:	681a      	ldr	r2, [r3, #0]
    dfaa:	230f      	movs	r3, #15
    dfac:	18fb      	adds	r3, r7, r3
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	3308      	adds	r3, #8
    dfb2:	015b      	lsls	r3, r3, #5
    dfb4:	18d3      	adds	r3, r2, r3
    dfb6:	3305      	adds	r3, #5
    dfb8:	2220      	movs	r2, #32
    dfba:	701a      	strb	r2, [r3, #0]
    dfbc:	e00a      	b.n	dfd4 <usb_device_endpoint_set_halt+0x54>
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	681a      	ldr	r2, [r3, #0]
    dfc2:	230f      	movs	r3, #15
    dfc4:	18fb      	adds	r3, r7, r3
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	3308      	adds	r3, #8
    dfca:	015b      	lsls	r3, r3, #5
    dfcc:	18d3      	adds	r3, r2, r3
    dfce:	3305      	adds	r3, #5
    dfd0:	2210      	movs	r2, #16
    dfd2:	701a      	strb	r2, [r3, #0]
    dfd4:	46c0      	nop			; (mov r8, r8)
    dfd6:	46bd      	mov	sp, r7
    dfd8:	b004      	add	sp, #16
    dfda:	bd80      	pop	{r7, pc}

0000dfdc <usb_device_endpoint_clear_halt>:
    dfdc:	b580      	push	{r7, lr}
    dfde:	b084      	sub	sp, #16
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	6078      	str	r0, [r7, #4]
    dfe4:	000a      	movs	r2, r1
    dfe6:	1cfb      	adds	r3, r7, #3
    dfe8:	701a      	strb	r2, [r3, #0]
    dfea:	230f      	movs	r3, #15
    dfec:	18fb      	adds	r3, r7, r3
    dfee:	1cfa      	adds	r2, r7, #3
    dff0:	7812      	ldrb	r2, [r2, #0]
    dff2:	210f      	movs	r1, #15
    dff4:	400a      	ands	r2, r1
    dff6:	701a      	strb	r2, [r3, #0]
    dff8:	1cfb      	adds	r3, r7, #3
    dffa:	781b      	ldrb	r3, [r3, #0]
    dffc:	b25b      	sxtb	r3, r3
    dffe:	2b00      	cmp	r3, #0
    e000:	da3f      	bge.n	e082 <usb_device_endpoint_clear_halt+0xa6>
    e002:	687b      	ldr	r3, [r7, #4]
    e004:	681a      	ldr	r2, [r3, #0]
    e006:	230f      	movs	r3, #15
    e008:	18fb      	adds	r3, r7, r3
    e00a:	781b      	ldrb	r3, [r3, #0]
    e00c:	3308      	adds	r3, #8
    e00e:	015b      	lsls	r3, r3, #5
    e010:	18d3      	adds	r3, r2, r3
    e012:	3306      	adds	r3, #6
    e014:	781b      	ldrb	r3, [r3, #0]
    e016:	b2db      	uxtb	r3, r3
    e018:	001a      	movs	r2, r3
    e01a:	2320      	movs	r3, #32
    e01c:	4013      	ands	r3, r2
    e01e:	d06f      	beq.n	e100 <usb_device_endpoint_clear_halt+0x124>
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	681a      	ldr	r2, [r3, #0]
    e024:	230f      	movs	r3, #15
    e026:	18fb      	adds	r3, r7, r3
    e028:	781b      	ldrb	r3, [r3, #0]
    e02a:	3308      	adds	r3, #8
    e02c:	015b      	lsls	r3, r3, #5
    e02e:	18d3      	adds	r3, r2, r3
    e030:	3304      	adds	r3, #4
    e032:	2220      	movs	r2, #32
    e034:	701a      	strb	r2, [r3, #0]
    e036:	687b      	ldr	r3, [r7, #4]
    e038:	681a      	ldr	r2, [r3, #0]
    e03a:	230f      	movs	r3, #15
    e03c:	18fb      	adds	r3, r7, r3
    e03e:	781b      	ldrb	r3, [r3, #0]
    e040:	3308      	adds	r3, #8
    e042:	015b      	lsls	r3, r3, #5
    e044:	18d3      	adds	r3, r2, r3
    e046:	3307      	adds	r3, #7
    e048:	781b      	ldrb	r3, [r3, #0]
    e04a:	b2db      	uxtb	r3, r3
    e04c:	001a      	movs	r2, r3
    e04e:	2340      	movs	r3, #64	; 0x40
    e050:	4013      	ands	r3, r2
    e052:	d055      	beq.n	e100 <usb_device_endpoint_clear_halt+0x124>
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	681a      	ldr	r2, [r3, #0]
    e058:	230f      	movs	r3, #15
    e05a:	18fb      	adds	r3, r7, r3
    e05c:	781b      	ldrb	r3, [r3, #0]
    e05e:	3308      	adds	r3, #8
    e060:	015b      	lsls	r3, r3, #5
    e062:	18d3      	adds	r3, r2, r3
    e064:	3307      	adds	r3, #7
    e066:	2240      	movs	r2, #64	; 0x40
    e068:	701a      	strb	r2, [r3, #0]
    e06a:	687b      	ldr	r3, [r7, #4]
    e06c:	681a      	ldr	r2, [r3, #0]
    e06e:	230f      	movs	r3, #15
    e070:	18fb      	adds	r3, r7, r3
    e072:	781b      	ldrb	r3, [r3, #0]
    e074:	3308      	adds	r3, #8
    e076:	015b      	lsls	r3, r3, #5
    e078:	18d3      	adds	r3, r2, r3
    e07a:	3304      	adds	r3, #4
    e07c:	2202      	movs	r2, #2
    e07e:	701a      	strb	r2, [r3, #0]
    e080:	e03e      	b.n	e100 <usb_device_endpoint_clear_halt+0x124>
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	681a      	ldr	r2, [r3, #0]
    e086:	230f      	movs	r3, #15
    e088:	18fb      	adds	r3, r7, r3
    e08a:	781b      	ldrb	r3, [r3, #0]
    e08c:	3308      	adds	r3, #8
    e08e:	015b      	lsls	r3, r3, #5
    e090:	18d3      	adds	r3, r2, r3
    e092:	3306      	adds	r3, #6
    e094:	781b      	ldrb	r3, [r3, #0]
    e096:	b2db      	uxtb	r3, r3
    e098:	001a      	movs	r2, r3
    e09a:	2310      	movs	r3, #16
    e09c:	4013      	ands	r3, r2
    e09e:	d02f      	beq.n	e100 <usb_device_endpoint_clear_halt+0x124>
    e0a0:	687b      	ldr	r3, [r7, #4]
    e0a2:	681a      	ldr	r2, [r3, #0]
    e0a4:	230f      	movs	r3, #15
    e0a6:	18fb      	adds	r3, r7, r3
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	3308      	adds	r3, #8
    e0ac:	015b      	lsls	r3, r3, #5
    e0ae:	18d3      	adds	r3, r2, r3
    e0b0:	3304      	adds	r3, #4
    e0b2:	2210      	movs	r2, #16
    e0b4:	701a      	strb	r2, [r3, #0]
    e0b6:	687b      	ldr	r3, [r7, #4]
    e0b8:	681a      	ldr	r2, [r3, #0]
    e0ba:	230f      	movs	r3, #15
    e0bc:	18fb      	adds	r3, r7, r3
    e0be:	781b      	ldrb	r3, [r3, #0]
    e0c0:	3308      	adds	r3, #8
    e0c2:	015b      	lsls	r3, r3, #5
    e0c4:	18d3      	adds	r3, r2, r3
    e0c6:	3307      	adds	r3, #7
    e0c8:	781b      	ldrb	r3, [r3, #0]
    e0ca:	b2db      	uxtb	r3, r3
    e0cc:	001a      	movs	r2, r3
    e0ce:	2320      	movs	r3, #32
    e0d0:	4013      	ands	r3, r2
    e0d2:	d015      	beq.n	e100 <usb_device_endpoint_clear_halt+0x124>
    e0d4:	687b      	ldr	r3, [r7, #4]
    e0d6:	681a      	ldr	r2, [r3, #0]
    e0d8:	230f      	movs	r3, #15
    e0da:	18fb      	adds	r3, r7, r3
    e0dc:	781b      	ldrb	r3, [r3, #0]
    e0de:	3308      	adds	r3, #8
    e0e0:	015b      	lsls	r3, r3, #5
    e0e2:	18d3      	adds	r3, r2, r3
    e0e4:	3307      	adds	r3, #7
    e0e6:	2220      	movs	r2, #32
    e0e8:	701a      	strb	r2, [r3, #0]
    e0ea:	687b      	ldr	r3, [r7, #4]
    e0ec:	681a      	ldr	r2, [r3, #0]
    e0ee:	230f      	movs	r3, #15
    e0f0:	18fb      	adds	r3, r7, r3
    e0f2:	781b      	ldrb	r3, [r3, #0]
    e0f4:	3308      	adds	r3, #8
    e0f6:	015b      	lsls	r3, r3, #5
    e0f8:	18d3      	adds	r3, r2, r3
    e0fa:	3304      	adds	r3, #4
    e0fc:	2201      	movs	r2, #1
    e0fe:	701a      	strb	r2, [r3, #0]
    e100:	46c0      	nop			; (mov r8, r8)
    e102:	46bd      	mov	sp, r7
    e104:	b004      	add	sp, #16
    e106:	bd80      	pop	{r7, pc}

0000e108 <usb_device_endpoint_write_buffer_job>:
    e108:	b580      	push	{r7, lr}
    e10a:	b086      	sub	sp, #24
    e10c:	af00      	add	r7, sp, #0
    e10e:	60f8      	str	r0, [r7, #12]
    e110:	607a      	str	r2, [r7, #4]
    e112:	603b      	str	r3, [r7, #0]
    e114:	230b      	movs	r3, #11
    e116:	18fb      	adds	r3, r7, r3
    e118:	1c0a      	adds	r2, r1, #0
    e11a:	701a      	strb	r2, [r3, #0]
    e11c:	4b28      	ldr	r3, [pc, #160]	; (e1c0 <usb_device_endpoint_write_buffer_job+0xb8>)
    e11e:	447b      	add	r3, pc
    e120:	68fa      	ldr	r2, [r7, #12]
    e122:	6812      	ldr	r2, [r2, #0]
    e124:	210b      	movs	r1, #11
    e126:	1879      	adds	r1, r7, r1
    e128:	7809      	ldrb	r1, [r1, #0]
    e12a:	3108      	adds	r1, #8
    e12c:	0149      	lsls	r1, r1, #5
    e12e:	5c8a      	ldrb	r2, [r1, r2]
    e130:	0652      	lsls	r2, r2, #25
    e132:	0f52      	lsrs	r2, r2, #29
    e134:	b2d1      	uxtb	r1, r2
    e136:	2217      	movs	r2, #23
    e138:	18ba      	adds	r2, r7, r2
    e13a:	7011      	strb	r1, [r2, #0]
    e13c:	2217      	movs	r2, #23
    e13e:	18ba      	adds	r2, r7, r2
    e140:	7812      	ldrb	r2, [r2, #0]
    e142:	2a00      	cmp	r2, #0
    e144:	d101      	bne.n	e14a <usb_device_endpoint_write_buffer_job+0x42>
    e146:	231c      	movs	r3, #28
    e148:	e035      	b.n	e1b6 <usb_device_endpoint_write_buffer_job+0xae>
    e14a:	220b      	movs	r2, #11
    e14c:	18ba      	adds	r2, r7, r2
    e14e:	7812      	ldrb	r2, [r2, #0]
    e150:	6879      	ldr	r1, [r7, #4]
    e152:	481c      	ldr	r0, [pc, #112]	; (e1c4 <usb_device_endpoint_write_buffer_job+0xbc>)
    e154:	5818      	ldr	r0, [r3, r0]
    e156:	0152      	lsls	r2, r2, #5
    e158:	1882      	adds	r2, r0, r2
    e15a:	3210      	adds	r2, #16
    e15c:	6011      	str	r1, [r2, #0]
    e15e:	220b      	movs	r2, #11
    e160:	18ba      	adds	r2, r7, r2
    e162:	7812      	ldrb	r2, [r2, #0]
    e164:	4917      	ldr	r1, [pc, #92]	; (e1c4 <usb_device_endpoint_write_buffer_job+0xbc>)
    e166:	5859      	ldr	r1, [r3, r1]
    e168:	0152      	lsls	r2, r2, #5
    e16a:	188a      	adds	r2, r1, r2
    e16c:	3210      	adds	r2, #16
    e16e:	6851      	ldr	r1, [r2, #4]
    e170:	4815      	ldr	r0, [pc, #84]	; (e1c8 <usb_device_endpoint_write_buffer_job+0xc0>)
    e172:	4001      	ands	r1, r0
    e174:	6051      	str	r1, [r2, #4]
    e176:	220b      	movs	r2, #11
    e178:	18ba      	adds	r2, r7, r2
    e17a:	7810      	ldrb	r0, [r2, #0]
    e17c:	683a      	ldr	r2, [r7, #0]
    e17e:	b292      	uxth	r2, r2
    e180:	0492      	lsls	r2, r2, #18
    e182:	0c92      	lsrs	r2, r2, #18
    e184:	b291      	uxth	r1, r2
    e186:	4a0f      	ldr	r2, [pc, #60]	; (e1c4 <usb_device_endpoint_write_buffer_job+0xbc>)
    e188:	589a      	ldr	r2, [r3, r2]
    e18a:	0143      	lsls	r3, r0, #5
    e18c:	18d3      	adds	r3, r2, r3
    e18e:	3310      	adds	r3, #16
    e190:	685a      	ldr	r2, [r3, #4]
    e192:	0489      	lsls	r1, r1, #18
    e194:	0c89      	lsrs	r1, r1, #18
    e196:	0b92      	lsrs	r2, r2, #14
    e198:	0392      	lsls	r2, r2, #14
    e19a:	430a      	orrs	r2, r1
    e19c:	605a      	str	r2, [r3, #4]
    e19e:	68fb      	ldr	r3, [r7, #12]
    e1a0:	681a      	ldr	r2, [r3, #0]
    e1a2:	230b      	movs	r3, #11
    e1a4:	18fb      	adds	r3, r7, r3
    e1a6:	781b      	ldrb	r3, [r3, #0]
    e1a8:	3308      	adds	r3, #8
    e1aa:	015b      	lsls	r3, r3, #5
    e1ac:	18d3      	adds	r3, r2, r3
    e1ae:	3305      	adds	r3, #5
    e1b0:	2280      	movs	r2, #128	; 0x80
    e1b2:	701a      	strb	r2, [r3, #0]
    e1b4:	2300      	movs	r3, #0
    e1b6:	0018      	movs	r0, r3
    e1b8:	46bd      	mov	sp, r7
    e1ba:	b006      	add	sp, #24
    e1bc:	bd80      	pop	{r7, pc}
    e1be:	46c0      	nop			; (mov r8, r8)
    e1c0:	00003cc2 	.word	0x00003cc2
    e1c4:	00000020 	.word	0x00000020
    e1c8:	f0003fff 	.word	0xf0003fff

0000e1cc <usb_device_endpoint_read_buffer_job>:
    e1cc:	b590      	push	{r4, r7, lr}
    e1ce:	b087      	sub	sp, #28
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	60f8      	str	r0, [r7, #12]
    e1d4:	607a      	str	r2, [r7, #4]
    e1d6:	603b      	str	r3, [r7, #0]
    e1d8:	230b      	movs	r3, #11
    e1da:	18fb      	adds	r3, r7, r3
    e1dc:	1c0a      	adds	r2, r1, #0
    e1de:	701a      	strb	r2, [r3, #0]
    e1e0:	4b26      	ldr	r3, [pc, #152]	; (e27c <usb_device_endpoint_read_buffer_job+0xb0>)
    e1e2:	447b      	add	r3, pc
    e1e4:	68fa      	ldr	r2, [r7, #12]
    e1e6:	6812      	ldr	r2, [r2, #0]
    e1e8:	210b      	movs	r1, #11
    e1ea:	1879      	adds	r1, r7, r1
    e1ec:	7809      	ldrb	r1, [r1, #0]
    e1ee:	3108      	adds	r1, #8
    e1f0:	0149      	lsls	r1, r1, #5
    e1f2:	5c8a      	ldrb	r2, [r1, r2]
    e1f4:	0752      	lsls	r2, r2, #29
    e1f6:	0f52      	lsrs	r2, r2, #29
    e1f8:	b2d1      	uxtb	r1, r2
    e1fa:	2217      	movs	r2, #23
    e1fc:	18ba      	adds	r2, r7, r2
    e1fe:	7011      	strb	r1, [r2, #0]
    e200:	2217      	movs	r2, #23
    e202:	18ba      	adds	r2, r7, r2
    e204:	7812      	ldrb	r2, [r2, #0]
    e206:	2a00      	cmp	r2, #0
    e208:	d101      	bne.n	e20e <usb_device_endpoint_read_buffer_job+0x42>
    e20a:	231c      	movs	r3, #28
    e20c:	e032      	b.n	e274 <usb_device_endpoint_read_buffer_job+0xa8>
    e20e:	220b      	movs	r2, #11
    e210:	18ba      	adds	r2, r7, r2
    e212:	7811      	ldrb	r1, [r2, #0]
    e214:	6878      	ldr	r0, [r7, #4]
    e216:	4a1a      	ldr	r2, [pc, #104]	; (e280 <usb_device_endpoint_read_buffer_job+0xb4>)
    e218:	589a      	ldr	r2, [r3, r2]
    e21a:	0149      	lsls	r1, r1, #5
    e21c:	5088      	str	r0, [r1, r2]
    e21e:	220b      	movs	r2, #11
    e220:	18ba      	adds	r2, r7, r2
    e222:	7812      	ldrb	r2, [r2, #0]
    e224:	6839      	ldr	r1, [r7, #0]
    e226:	b289      	uxth	r1, r1
    e228:	0489      	lsls	r1, r1, #18
    e22a:	0c89      	lsrs	r1, r1, #18
    e22c:	b288      	uxth	r0, r1
    e22e:	4914      	ldr	r1, [pc, #80]	; (e280 <usb_device_endpoint_read_buffer_job+0xb4>)
    e230:	5859      	ldr	r1, [r3, r1]
    e232:	0152      	lsls	r2, r2, #5
    e234:	188a      	adds	r2, r1, r2
    e236:	6851      	ldr	r1, [r2, #4]
    e238:	0480      	lsls	r0, r0, #18
    e23a:	0c80      	lsrs	r0, r0, #18
    e23c:	0380      	lsls	r0, r0, #14
    e23e:	4c11      	ldr	r4, [pc, #68]	; (e284 <usb_device_endpoint_read_buffer_job+0xb8>)
    e240:	4021      	ands	r1, r4
    e242:	4301      	orrs	r1, r0
    e244:	6051      	str	r1, [r2, #4]
    e246:	220b      	movs	r2, #11
    e248:	18ba      	adds	r2, r7, r2
    e24a:	7811      	ldrb	r1, [r2, #0]
    e24c:	4a0c      	ldr	r2, [pc, #48]	; (e280 <usb_device_endpoint_read_buffer_job+0xb4>)
    e24e:	589a      	ldr	r2, [r3, r2]
    e250:	014b      	lsls	r3, r1, #5
    e252:	18d3      	adds	r3, r2, r3
    e254:	685a      	ldr	r2, [r3, #4]
    e256:	0b92      	lsrs	r2, r2, #14
    e258:	0392      	lsls	r2, r2, #14
    e25a:	605a      	str	r2, [r3, #4]
    e25c:	68fb      	ldr	r3, [r7, #12]
    e25e:	681a      	ldr	r2, [r3, #0]
    e260:	230b      	movs	r3, #11
    e262:	18fb      	adds	r3, r7, r3
    e264:	781b      	ldrb	r3, [r3, #0]
    e266:	3308      	adds	r3, #8
    e268:	015b      	lsls	r3, r3, #5
    e26a:	18d3      	adds	r3, r2, r3
    e26c:	3304      	adds	r3, #4
    e26e:	2240      	movs	r2, #64	; 0x40
    e270:	701a      	strb	r2, [r3, #0]
    e272:	2300      	movs	r3, #0
    e274:	0018      	movs	r0, r3
    e276:	46bd      	mov	sp, r7
    e278:	b007      	add	sp, #28
    e27a:	bd90      	pop	{r4, r7, pc}
    e27c:	00003bfe 	.word	0x00003bfe
    e280:	00000020 	.word	0x00000020
    e284:	f0003fff 	.word	0xf0003fff

0000e288 <usb_device_endpoint_setup_buffer_job>:
    e288:	b580      	push	{r7, lr}
    e28a:	b082      	sub	sp, #8
    e28c:	af00      	add	r7, sp, #0
    e28e:	6078      	str	r0, [r7, #4]
    e290:	6039      	str	r1, [r7, #0]
    e292:	4b10      	ldr	r3, [pc, #64]	; (e2d4 <usb_device_endpoint_setup_buffer_job+0x4c>)
    e294:	447b      	add	r3, pc
    e296:	6839      	ldr	r1, [r7, #0]
    e298:	4a0f      	ldr	r2, [pc, #60]	; (e2d8 <usb_device_endpoint_setup_buffer_job+0x50>)
    e29a:	589a      	ldr	r2, [r3, r2]
    e29c:	6011      	str	r1, [r2, #0]
    e29e:	4a0e      	ldr	r2, [pc, #56]	; (e2d8 <usb_device_endpoint_setup_buffer_job+0x50>)
    e2a0:	589a      	ldr	r2, [r3, r2]
    e2a2:	6851      	ldr	r1, [r2, #4]
    e2a4:	480d      	ldr	r0, [pc, #52]	; (e2dc <usb_device_endpoint_setup_buffer_job+0x54>)
    e2a6:	4001      	ands	r1, r0
    e2a8:	2080      	movs	r0, #128	; 0x80
    e2aa:	0280      	lsls	r0, r0, #10
    e2ac:	4301      	orrs	r1, r0
    e2ae:	6051      	str	r1, [r2, #4]
    e2b0:	4a09      	ldr	r2, [pc, #36]	; (e2d8 <usb_device_endpoint_setup_buffer_job+0x50>)
    e2b2:	589b      	ldr	r3, [r3, r2]
    e2b4:	685a      	ldr	r2, [r3, #4]
    e2b6:	0b92      	lsrs	r2, r2, #14
    e2b8:	0392      	lsls	r2, r2, #14
    e2ba:	605a      	str	r2, [r3, #4]
    e2bc:	687b      	ldr	r3, [r7, #4]
    e2be:	681a      	ldr	r2, [r3, #0]
    e2c0:	2382      	movs	r3, #130	; 0x82
    e2c2:	005b      	lsls	r3, r3, #1
    e2c4:	2140      	movs	r1, #64	; 0x40
    e2c6:	54d1      	strb	r1, [r2, r3]
    e2c8:	2300      	movs	r3, #0
    e2ca:	0018      	movs	r0, r3
    e2cc:	46bd      	mov	sp, r7
    e2ce:	b002      	add	sp, #8
    e2d0:	bd80      	pop	{r7, pc}
    e2d2:	46c0      	nop			; (mov r8, r8)
    e2d4:	00003b4c 	.word	0x00003b4c
    e2d8:	00000020 	.word	0x00000020
    e2dc:	f0003fff 	.word	0xf0003fff

0000e2e0 <_usb_device_interrupt_handler>:
    e2e0:	b590      	push	{r4, r7, lr}
    e2e2:	b085      	sub	sp, #20
    e2e4:	af00      	add	r7, sp, #0
    e2e6:	4cb2      	ldr	r4, [pc, #712]	; (e5b0 <_usb_device_interrupt_handler+0x2d0>)
    e2e8:	447c      	add	r4, pc
    e2ea:	4bb2      	ldr	r3, [pc, #712]	; (e5b4 <_usb_device_interrupt_handler+0x2d4>)
    e2ec:	447b      	add	r3, pc
    e2ee:	681b      	ldr	r3, [r3, #0]
    e2f0:	681a      	ldr	r2, [r3, #0]
    e2f2:	2308      	movs	r3, #8
    e2f4:	18fb      	adds	r3, r7, r3
    e2f6:	8c12      	ldrh	r2, [r2, #32]
    e2f8:	801a      	strh	r2, [r3, #0]
    e2fa:	2308      	movs	r3, #8
    e2fc:	18fb      	adds	r3, r7, r3
    e2fe:	881b      	ldrh	r3, [r3, #0]
    e300:	2b00      	cmp	r3, #0
    e302:	d000      	beq.n	e306 <_usb_device_interrupt_handler+0x26>
    e304:	e061      	b.n	e3ca <_usb_device_interrupt_handler+0xea>
    e306:	4bac      	ldr	r3, [pc, #688]	; (e5b8 <_usb_device_interrupt_handler+0x2d8>)
    e308:	447b      	add	r3, pc
    e30a:	681b      	ldr	r3, [r3, #0]
    e30c:	681a      	ldr	r2, [r3, #0]
    e30e:	1dbb      	adds	r3, r7, #6
    e310:	8b92      	ldrh	r2, [r2, #28]
    e312:	801a      	strh	r2, [r3, #0]
    e314:	4ba9      	ldr	r3, [pc, #676]	; (e5bc <_usb_device_interrupt_handler+0x2dc>)
    e316:	447b      	add	r3, pc
    e318:	681a      	ldr	r2, [r3, #0]
    e31a:	23ab      	movs	r3, #171	; 0xab
    e31c:	005b      	lsls	r3, r3, #1
    e31e:	5ad3      	ldrh	r3, [r2, r3]
    e320:	1dba      	adds	r2, r7, #6
    e322:	8812      	ldrh	r2, [r2, #0]
    e324:	4013      	ands	r3, r2
    e326:	b29a      	uxth	r2, r3
    e328:	4ba5      	ldr	r3, [pc, #660]	; (e5c0 <_usb_device_interrupt_handler+0x2e0>)
    e32a:	447b      	add	r3, pc
    e32c:	6819      	ldr	r1, [r3, #0]
    e32e:	23aa      	movs	r3, #170	; 0xaa
    e330:	005b      	lsls	r3, r3, #1
    e332:	5ac9      	ldrh	r1, [r1, r3]
    e334:	1d3b      	adds	r3, r7, #4
    e336:	400a      	ands	r2, r1
    e338:	801a      	strh	r2, [r3, #0]
    e33a:	2300      	movs	r3, #0
    e33c:	60fb      	str	r3, [r7, #12]
    e33e:	e040      	b.n	e3c2 <_usb_device_interrupt_handler+0xe2>
    e340:	4ba0      	ldr	r3, [pc, #640]	; (e5c4 <_usb_device_interrupt_handler+0x2e4>)
    e342:	447b      	add	r3, pc
    e344:	68fa      	ldr	r2, [r7, #12]
    e346:	0052      	lsls	r2, r2, #1
    e348:	5ad3      	ldrh	r3, [r2, r3]
    e34a:	1dba      	adds	r2, r7, #6
    e34c:	8812      	ldrh	r2, [r2, #0]
    e34e:	4013      	ands	r3, r2
    e350:	b29b      	uxth	r3, r3
    e352:	2b00      	cmp	r3, #0
    e354:	d009      	beq.n	e36a <_usb_device_interrupt_handler+0x8a>
    e356:	4b9c      	ldr	r3, [pc, #624]	; (e5c8 <_usb_device_interrupt_handler+0x2e8>)
    e358:	447b      	add	r3, pc
    e35a:	681b      	ldr	r3, [r3, #0]
    e35c:	681b      	ldr	r3, [r3, #0]
    e35e:	4a9b      	ldr	r2, [pc, #620]	; (e5cc <_usb_device_interrupt_handler+0x2ec>)
    e360:	447a      	add	r2, pc
    e362:	68f9      	ldr	r1, [r7, #12]
    e364:	0049      	lsls	r1, r1, #1
    e366:	5a8a      	ldrh	r2, [r1, r2]
    e368:	839a      	strh	r2, [r3, #28]
    e36a:	4b99      	ldr	r3, [pc, #612]	; (e5d0 <_usb_device_interrupt_handler+0x2f0>)
    e36c:	447b      	add	r3, pc
    e36e:	68fa      	ldr	r2, [r7, #12]
    e370:	0052      	lsls	r2, r2, #1
    e372:	5ad3      	ldrh	r3, [r2, r3]
    e374:	1d3a      	adds	r2, r7, #4
    e376:	8812      	ldrh	r2, [r2, #0]
    e378:	4013      	ands	r3, r2
    e37a:	b29b      	uxth	r3, r3
    e37c:	2b00      	cmp	r3, #0
    e37e:	d01d      	beq.n	e3bc <_usb_device_interrupt_handler+0xdc>
    e380:	68fb      	ldr	r3, [r7, #12]
    e382:	2b06      	cmp	r3, #6
    e384:	d10c      	bne.n	e3a0 <_usb_device_interrupt_handler+0xc0>
    e386:	4b93      	ldr	r3, [pc, #588]	; (e5d4 <_usb_device_interrupt_handler+0x2f4>)
    e388:	58e3      	ldr	r3, [r4, r3]
    e38a:	891b      	ldrh	r3, [r3, #8]
    e38c:	045b      	lsls	r3, r3, #17
    e38e:	0d5b      	lsrs	r3, r3, #21
    e390:	b29b      	uxth	r3, r3
    e392:	001a      	movs	r2, r3
    e394:	2380      	movs	r3, #128	; 0x80
    e396:	005b      	lsls	r3, r3, #1
    e398:	401a      	ands	r2, r3
    e39a:	4b8f      	ldr	r3, [pc, #572]	; (e5d8 <_usb_device_interrupt_handler+0x2f8>)
    e39c:	447b      	add	r3, pc
    e39e:	601a      	str	r2, [r3, #0]
    e3a0:	4b8e      	ldr	r3, [pc, #568]	; (e5dc <_usb_device_interrupt_handler+0x2fc>)
    e3a2:	447b      	add	r3, pc
    e3a4:	681b      	ldr	r3, [r3, #0]
    e3a6:	68fa      	ldr	r2, [r7, #12]
    e3a8:	322e      	adds	r2, #46	; 0x2e
    e3aa:	0092      	lsls	r2, r2, #2
    e3ac:	58d2      	ldr	r2, [r2, r3]
    e3ae:	4b8c      	ldr	r3, [pc, #560]	; (e5e0 <_usb_device_interrupt_handler+0x300>)
    e3b0:	447b      	add	r3, pc
    e3b2:	681b      	ldr	r3, [r3, #0]
    e3b4:	498b      	ldr	r1, [pc, #556]	; (e5e4 <_usb_device_interrupt_handler+0x304>)
    e3b6:	4479      	add	r1, pc
    e3b8:	0018      	movs	r0, r3
    e3ba:	4790      	blx	r2
    e3bc:	68fb      	ldr	r3, [r7, #12]
    e3be:	3301      	adds	r3, #1
    e3c0:	60fb      	str	r3, [r7, #12]
    e3c2:	68fb      	ldr	r3, [r7, #12]
    e3c4:	2b06      	cmp	r3, #6
    e3c6:	ddbb      	ble.n	e340 <_usb_device_interrupt_handler+0x60>
    e3c8:	e2ba      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e3ca:	230b      	movs	r3, #11
    e3cc:	18fb      	adds	r3, r7, r3
    e3ce:	2200      	movs	r2, #0
    e3d0:	701a      	strb	r2, [r3, #0]
    e3d2:	e2a5      	b.n	e920 <_usb_device_interrupt_handler+0x640>
    e3d4:	2308      	movs	r3, #8
    e3d6:	18fb      	adds	r3, r7, r3
    e3d8:	881a      	ldrh	r2, [r3, #0]
    e3da:	230b      	movs	r3, #11
    e3dc:	18fb      	adds	r3, r7, r3
    e3de:	781b      	ldrb	r3, [r3, #0]
    e3e0:	411a      	asrs	r2, r3
    e3e2:	0013      	movs	r3, r2
    e3e4:	2201      	movs	r2, #1
    e3e6:	4013      	ands	r3, r2
    e3e8:	d100      	bne.n	e3ec <_usb_device_interrupt_handler+0x10c>
    e3ea:	e292      	b.n	e912 <_usb_device_interrupt_handler+0x632>
    e3ec:	4b7e      	ldr	r3, [pc, #504]	; (e5e8 <_usb_device_interrupt_handler+0x308>)
    e3ee:	447b      	add	r3, pc
    e3f0:	681b      	ldr	r3, [r3, #0]
    e3f2:	681a      	ldr	r2, [r3, #0]
    e3f4:	230b      	movs	r3, #11
    e3f6:	18fb      	adds	r3, r7, r3
    e3f8:	781b      	ldrb	r3, [r3, #0]
    e3fa:	3308      	adds	r3, #8
    e3fc:	015b      	lsls	r3, r3, #5
    e3fe:	18d3      	adds	r3, r2, r3
    e400:	3307      	adds	r3, #7
    e402:	781b      	ldrb	r3, [r3, #0]
    e404:	b2da      	uxtb	r2, r3
    e406:	1dbb      	adds	r3, r7, #6
    e408:	801a      	strh	r2, [r3, #0]
    e40a:	4b78      	ldr	r3, [pc, #480]	; (e5ec <_usb_device_interrupt_handler+0x30c>)
    e40c:	447b      	add	r3, pc
    e40e:	6819      	ldr	r1, [r3, #0]
    e410:	230b      	movs	r3, #11
    e412:	18fb      	adds	r3, r7, r3
    e414:	781a      	ldrb	r2, [r3, #0]
    e416:	23b0      	movs	r3, #176	; 0xb0
    e418:	005b      	lsls	r3, r3, #1
    e41a:	188a      	adds	r2, r1, r2
    e41c:	18d3      	adds	r3, r2, r3
    e41e:	781b      	ldrb	r3, [r3, #0]
    e420:	b29b      	uxth	r3, r3
    e422:	1dba      	adds	r2, r7, #6
    e424:	8812      	ldrh	r2, [r2, #0]
    e426:	4013      	ands	r3, r2
    e428:	b29b      	uxth	r3, r3
    e42a:	b21a      	sxth	r2, r3
    e42c:	4b70      	ldr	r3, [pc, #448]	; (e5f0 <_usb_device_interrupt_handler+0x310>)
    e42e:	447b      	add	r3, pc
    e430:	6818      	ldr	r0, [r3, #0]
    e432:	230b      	movs	r3, #11
    e434:	18fb      	adds	r3, r7, r3
    e436:	7819      	ldrb	r1, [r3, #0]
    e438:	23ac      	movs	r3, #172	; 0xac
    e43a:	005b      	lsls	r3, r3, #1
    e43c:	1841      	adds	r1, r0, r1
    e43e:	18cb      	adds	r3, r1, r3
    e440:	781b      	ldrb	r3, [r3, #0]
    e442:	b21b      	sxth	r3, r3
    e444:	4013      	ands	r3, r2
    e446:	b21a      	sxth	r2, r3
    e448:	1d3b      	adds	r3, r7, #4
    e44a:	801a      	strh	r2, [r3, #0]
    e44c:	1dbb      	adds	r3, r7, #6
    e44e:	881b      	ldrh	r3, [r3, #0]
    e450:	2260      	movs	r2, #96	; 0x60
    e452:	4013      	ands	r3, r2
    e454:	d065      	beq.n	e522 <_usb_device_interrupt_handler+0x242>
    e456:	4b67      	ldr	r3, [pc, #412]	; (e5f4 <_usb_device_interrupt_handler+0x314>)
    e458:	447b      	add	r3, pc
    e45a:	681b      	ldr	r3, [r3, #0]
    e45c:	681a      	ldr	r2, [r3, #0]
    e45e:	230b      	movs	r3, #11
    e460:	18fb      	adds	r3, r7, r3
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	3308      	adds	r3, #8
    e466:	015b      	lsls	r3, r3, #5
    e468:	18d3      	adds	r3, r2, r3
    e46a:	3307      	adds	r3, #7
    e46c:	781b      	ldrb	r3, [r3, #0]
    e46e:	b2db      	uxtb	r3, r3
    e470:	001a      	movs	r2, r3
    e472:	2340      	movs	r3, #64	; 0x40
    e474:	4013      	ands	r3, r2
    e476:	d017      	beq.n	e4a8 <_usb_device_interrupt_handler+0x1c8>
    e478:	4b5f      	ldr	r3, [pc, #380]	; (e5f8 <_usb_device_interrupt_handler+0x318>)
    e47a:	447b      	add	r3, pc
    e47c:	681b      	ldr	r3, [r3, #0]
    e47e:	681a      	ldr	r2, [r3, #0]
    e480:	230b      	movs	r3, #11
    e482:	18fb      	adds	r3, r7, r3
    e484:	781b      	ldrb	r3, [r3, #0]
    e486:	3308      	adds	r3, #8
    e488:	015b      	lsls	r3, r3, #5
    e48a:	18d3      	adds	r3, r2, r3
    e48c:	3307      	adds	r3, #7
    e48e:	2240      	movs	r2, #64	; 0x40
    e490:	701a      	strb	r2, [r3, #0]
    e492:	230b      	movs	r3, #11
    e494:	18fb      	adds	r3, r7, r3
    e496:	781b      	ldrb	r3, [r3, #0]
    e498:	2280      	movs	r2, #128	; 0x80
    e49a:	4252      	negs	r2, r2
    e49c:	4313      	orrs	r3, r2
    e49e:	b2da      	uxtb	r2, r3
    e4a0:	4b56      	ldr	r3, [pc, #344]	; (e5fc <_usb_device_interrupt_handler+0x31c>)
    e4a2:	447b      	add	r3, pc
    e4a4:	719a      	strb	r2, [r3, #6]
    e4a6:	e023      	b.n	e4f0 <_usb_device_interrupt_handler+0x210>
    e4a8:	4b55      	ldr	r3, [pc, #340]	; (e600 <_usb_device_interrupt_handler+0x320>)
    e4aa:	447b      	add	r3, pc
    e4ac:	681b      	ldr	r3, [r3, #0]
    e4ae:	681a      	ldr	r2, [r3, #0]
    e4b0:	230b      	movs	r3, #11
    e4b2:	18fb      	adds	r3, r7, r3
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	3308      	adds	r3, #8
    e4b8:	015b      	lsls	r3, r3, #5
    e4ba:	18d3      	adds	r3, r2, r3
    e4bc:	3307      	adds	r3, #7
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	b2db      	uxtb	r3, r3
    e4c2:	001a      	movs	r2, r3
    e4c4:	2320      	movs	r3, #32
    e4c6:	4013      	ands	r3, r2
    e4c8:	d012      	beq.n	e4f0 <_usb_device_interrupt_handler+0x210>
    e4ca:	4b4e      	ldr	r3, [pc, #312]	; (e604 <_usb_device_interrupt_handler+0x324>)
    e4cc:	447b      	add	r3, pc
    e4ce:	681b      	ldr	r3, [r3, #0]
    e4d0:	681a      	ldr	r2, [r3, #0]
    e4d2:	230b      	movs	r3, #11
    e4d4:	18fb      	adds	r3, r7, r3
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	3308      	adds	r3, #8
    e4da:	015b      	lsls	r3, r3, #5
    e4dc:	18d3      	adds	r3, r2, r3
    e4de:	3307      	adds	r3, #7
    e4e0:	2220      	movs	r2, #32
    e4e2:	701a      	strb	r2, [r3, #0]
    e4e4:	4b48      	ldr	r3, [pc, #288]	; (e608 <_usb_device_interrupt_handler+0x328>)
    e4e6:	447b      	add	r3, pc
    e4e8:	220b      	movs	r2, #11
    e4ea:	18ba      	adds	r2, r7, r2
    e4ec:	7812      	ldrb	r2, [r2, #0]
    e4ee:	719a      	strb	r2, [r3, #6]
    e4f0:	1d3b      	adds	r3, r7, #4
    e4f2:	881b      	ldrh	r3, [r3, #0]
    e4f4:	2260      	movs	r2, #96	; 0x60
    e4f6:	4013      	ands	r3, r2
    e4f8:	d100      	bne.n	e4fc <_usb_device_interrupt_handler+0x21c>
    e4fa:	e218      	b.n	e92e <_usb_device_interrupt_handler+0x64e>
    e4fc:	4b43      	ldr	r3, [pc, #268]	; (e60c <_usb_device_interrupt_handler+0x32c>)
    e4fe:	447b      	add	r3, pc
    e500:	681a      	ldr	r2, [r3, #0]
    e502:	230b      	movs	r3, #11
    e504:	18fb      	adds	r3, r7, r3
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	21e0      	movs	r1, #224	; 0xe0
    e50a:	011b      	lsls	r3, r3, #4
    e50c:	18d3      	adds	r3, r2, r3
    e50e:	185b      	adds	r3, r3, r1
    e510:	681a      	ldr	r2, [r3, #0]
    e512:	4b3f      	ldr	r3, [pc, #252]	; (e610 <_usb_device_interrupt_handler+0x330>)
    e514:	447b      	add	r3, pc
    e516:	681b      	ldr	r3, [r3, #0]
    e518:	493e      	ldr	r1, [pc, #248]	; (e614 <_usb_device_interrupt_handler+0x334>)
    e51a:	4479      	add	r1, pc
    e51c:	0018      	movs	r0, r3
    e51e:	4790      	blx	r2
    e520:	e205      	b.n	e92e <_usb_device_interrupt_handler+0x64e>
    e522:	1dbb      	adds	r3, r7, #6
    e524:	881b      	ldrh	r3, [r3, #0]
    e526:	2210      	movs	r2, #16
    e528:	4013      	ands	r3, r2
    e52a:	d100      	bne.n	e52e <_usb_device_interrupt_handler+0x24e>
    e52c:	e080      	b.n	e630 <_usb_device_interrupt_handler+0x350>
    e52e:	4b3a      	ldr	r3, [pc, #232]	; (e618 <_usb_device_interrupt_handler+0x338>)
    e530:	447b      	add	r3, pc
    e532:	681b      	ldr	r3, [r3, #0]
    e534:	681a      	ldr	r2, [r3, #0]
    e536:	230b      	movs	r3, #11
    e538:	18fb      	adds	r3, r7, r3
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	3308      	adds	r3, #8
    e53e:	015b      	lsls	r3, r3, #5
    e540:	18d3      	adds	r3, r2, r3
    e542:	3307      	adds	r3, #7
    e544:	2210      	movs	r2, #16
    e546:	701a      	strb	r2, [r3, #0]
    e548:	4b34      	ldr	r3, [pc, #208]	; (e61c <_usb_device_interrupt_handler+0x33c>)
    e54a:	447b      	add	r3, pc
    e54c:	6819      	ldr	r1, [r3, #0]
    e54e:	230b      	movs	r3, #11
    e550:	18fb      	adds	r3, r7, r3
    e552:	781a      	ldrb	r2, [r3, #0]
    e554:	23b0      	movs	r3, #176	; 0xb0
    e556:	005b      	lsls	r3, r3, #1
    e558:	188a      	adds	r2, r1, r2
    e55a:	18d3      	adds	r3, r2, r3
    e55c:	781b      	ldrb	r3, [r3, #0]
    e55e:	2210      	movs	r2, #16
    e560:	4013      	ands	r3, r2
    e562:	b2db      	uxtb	r3, r3
    e564:	2b00      	cmp	r3, #0
    e566:	d100      	bne.n	e56a <_usb_device_interrupt_handler+0x28a>
    e568:	e1e3      	b.n	e932 <_usb_device_interrupt_handler+0x652>
    e56a:	230b      	movs	r3, #11
    e56c:	18fb      	adds	r3, r7, r3
    e56e:	781b      	ldrb	r3, [r3, #0]
    e570:	4a18      	ldr	r2, [pc, #96]	; (e5d4 <_usb_device_interrupt_handler+0x2f4>)
    e572:	58a2      	ldr	r2, [r4, r2]
    e574:	015b      	lsls	r3, r3, #5
    e576:	18d3      	adds	r3, r2, r3
    e578:	685b      	ldr	r3, [r3, #4]
    e57a:	049b      	lsls	r3, r3, #18
    e57c:	0c9b      	lsrs	r3, r3, #18
    e57e:	b29b      	uxth	r3, r3
    e580:	001a      	movs	r2, r3
    e582:	4b27      	ldr	r3, [pc, #156]	; (e620 <_usb_device_interrupt_handler+0x340>)
    e584:	447b      	add	r3, pc
    e586:	801a      	strh	r2, [r3, #0]
    e588:	4b26      	ldr	r3, [pc, #152]	; (e624 <_usb_device_interrupt_handler+0x344>)
    e58a:	447b      	add	r3, pc
    e58c:	681a      	ldr	r2, [r3, #0]
    e58e:	230b      	movs	r3, #11
    e590:	18fb      	adds	r3, r7, r3
    e592:	781b      	ldrb	r3, [r3, #0]
    e594:	21dc      	movs	r1, #220	; 0xdc
    e596:	011b      	lsls	r3, r3, #4
    e598:	18d3      	adds	r3, r2, r3
    e59a:	185b      	adds	r3, r3, r1
    e59c:	681a      	ldr	r2, [r3, #0]
    e59e:	4b22      	ldr	r3, [pc, #136]	; (e628 <_usb_device_interrupt_handler+0x348>)
    e5a0:	447b      	add	r3, pc
    e5a2:	681b      	ldr	r3, [r3, #0]
    e5a4:	4921      	ldr	r1, [pc, #132]	; (e62c <_usb_device_interrupt_handler+0x34c>)
    e5a6:	4479      	add	r1, pc
    e5a8:	0018      	movs	r0, r3
    e5aa:	4790      	blx	r2
    e5ac:	e1c1      	b.n	e932 <_usb_device_interrupt_handler+0x652>
    e5ae:	46c0      	nop			; (mov r8, r8)
    e5b0:	00003af8 	.word	0x00003af8
    e5b4:	1fff2334 	.word	0x1fff2334
    e5b8:	1fff2318 	.word	0x1fff2318
    e5bc:	1fff230a 	.word	0x1fff230a
    e5c0:	1fff22f6 	.word	0x1fff22f6
    e5c4:	000039d2 	.word	0x000039d2
    e5c8:	1fff22c8 	.word	0x1fff22c8
    e5cc:	000039b4 	.word	0x000039b4
    e5d0:	000039a8 	.word	0x000039a8
    e5d4:	00000020 	.word	0x00000020
    e5d8:	1fff2290 	.word	0x1fff2290
    e5dc:	1fff227e 	.word	0x1fff227e
    e5e0:	1fff2270 	.word	0x1fff2270
    e5e4:	1fff2276 	.word	0x1fff2276
    e5e8:	1fff2232 	.word	0x1fff2232
    e5ec:	1fff2214 	.word	0x1fff2214
    e5f0:	1fff21f2 	.word	0x1fff21f2
    e5f4:	1fff21c8 	.word	0x1fff21c8
    e5f8:	1fff21a6 	.word	0x1fff21a6
    e5fc:	1fff218e 	.word	0x1fff218e
    e600:	1fff2176 	.word	0x1fff2176
    e604:	1fff2154 	.word	0x1fff2154
    e608:	1fff214a 	.word	0x1fff214a
    e60c:	1fff2122 	.word	0x1fff2122
    e610:	1fff210c 	.word	0x1fff210c
    e614:	1fff2116 	.word	0x1fff2116
    e618:	1fff20f0 	.word	0x1fff20f0
    e61c:	1fff20d6 	.word	0x1fff20d6
    e620:	1fff20ac 	.word	0x1fff20ac
    e624:	1fff2096 	.word	0x1fff2096
    e628:	1fff2080 	.word	0x1fff2080
    e62c:	1fff208a 	.word	0x1fff208a
    e630:	1dbb      	adds	r3, r7, #6
    e632:	881b      	ldrh	r3, [r3, #0]
    e634:	2203      	movs	r2, #3
    e636:	4013      	ands	r3, r2
    e638:	d100      	bne.n	e63c <_usb_device_interrupt_handler+0x35c>
    e63a:	e093      	b.n	e764 <_usb_device_interrupt_handler+0x484>
    e63c:	4bc2      	ldr	r3, [pc, #776]	; (e948 <_usb_device_interrupt_handler+0x668>)
    e63e:	447b      	add	r3, pc
    e640:	681b      	ldr	r3, [r3, #0]
    e642:	681a      	ldr	r2, [r3, #0]
    e644:	230b      	movs	r3, #11
    e646:	18fb      	adds	r3, r7, r3
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	3308      	adds	r3, #8
    e64c:	015b      	lsls	r3, r3, #5
    e64e:	18d3      	adds	r3, r2, r3
    e650:	3307      	adds	r3, #7
    e652:	781b      	ldrb	r3, [r3, #0]
    e654:	b2db      	uxtb	r3, r3
    e656:	001a      	movs	r2, r3
    e658:	2302      	movs	r3, #2
    e65a:	4013      	ands	r3, r2
    e65c:	d027      	beq.n	e6ae <_usb_device_interrupt_handler+0x3ce>
    e65e:	4bbb      	ldr	r3, [pc, #748]	; (e94c <_usb_device_interrupt_handler+0x66c>)
    e660:	447b      	add	r3, pc
    e662:	681b      	ldr	r3, [r3, #0]
    e664:	681a      	ldr	r2, [r3, #0]
    e666:	230b      	movs	r3, #11
    e668:	18fb      	adds	r3, r7, r3
    e66a:	781b      	ldrb	r3, [r3, #0]
    e66c:	3308      	adds	r3, #8
    e66e:	015b      	lsls	r3, r3, #5
    e670:	18d3      	adds	r3, r2, r3
    e672:	3307      	adds	r3, #7
    e674:	2202      	movs	r2, #2
    e676:	701a      	strb	r2, [r3, #0]
    e678:	230b      	movs	r3, #11
    e67a:	18fb      	adds	r3, r7, r3
    e67c:	781b      	ldrb	r3, [r3, #0]
    e67e:	2280      	movs	r2, #128	; 0x80
    e680:	4252      	negs	r2, r2
    e682:	4313      	orrs	r3, r2
    e684:	b2da      	uxtb	r2, r3
    e686:	4bb2      	ldr	r3, [pc, #712]	; (e950 <_usb_device_interrupt_handler+0x670>)
    e688:	447b      	add	r3, pc
    e68a:	719a      	strb	r2, [r3, #6]
    e68c:	230b      	movs	r3, #11
    e68e:	18fb      	adds	r3, r7, r3
    e690:	781b      	ldrb	r3, [r3, #0]
    e692:	4ab0      	ldr	r2, [pc, #704]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e694:	58a2      	ldr	r2, [r4, r2]
    e696:	015b      	lsls	r3, r3, #5
    e698:	18d3      	adds	r3, r2, r3
    e69a:	3310      	adds	r3, #16
    e69c:	685b      	ldr	r3, [r3, #4]
    e69e:	049b      	lsls	r3, r3, #18
    e6a0:	0c9b      	lsrs	r3, r3, #18
    e6a2:	b29b      	uxth	r3, r3
    e6a4:	001a      	movs	r2, r3
    e6a6:	4bac      	ldr	r3, [pc, #688]	; (e958 <_usb_device_interrupt_handler+0x678>)
    e6a8:	447b      	add	r3, pc
    e6aa:	805a      	strh	r2, [r3, #2]
    e6ac:	e041      	b.n	e732 <_usb_device_interrupt_handler+0x452>
    e6ae:	4bab      	ldr	r3, [pc, #684]	; (e95c <_usb_device_interrupt_handler+0x67c>)
    e6b0:	447b      	add	r3, pc
    e6b2:	681b      	ldr	r3, [r3, #0]
    e6b4:	681a      	ldr	r2, [r3, #0]
    e6b6:	230b      	movs	r3, #11
    e6b8:	18fb      	adds	r3, r7, r3
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	3308      	adds	r3, #8
    e6be:	015b      	lsls	r3, r3, #5
    e6c0:	18d3      	adds	r3, r2, r3
    e6c2:	3307      	adds	r3, #7
    e6c4:	781b      	ldrb	r3, [r3, #0]
    e6c6:	b2db      	uxtb	r3, r3
    e6c8:	001a      	movs	r2, r3
    e6ca:	2301      	movs	r3, #1
    e6cc:	4013      	ands	r3, r2
    e6ce:	d030      	beq.n	e732 <_usb_device_interrupt_handler+0x452>
    e6d0:	4ba3      	ldr	r3, [pc, #652]	; (e960 <_usb_device_interrupt_handler+0x680>)
    e6d2:	447b      	add	r3, pc
    e6d4:	681b      	ldr	r3, [r3, #0]
    e6d6:	681a      	ldr	r2, [r3, #0]
    e6d8:	230b      	movs	r3, #11
    e6da:	18fb      	adds	r3, r7, r3
    e6dc:	781b      	ldrb	r3, [r3, #0]
    e6de:	3308      	adds	r3, #8
    e6e0:	015b      	lsls	r3, r3, #5
    e6e2:	18d3      	adds	r3, r2, r3
    e6e4:	3307      	adds	r3, #7
    e6e6:	2201      	movs	r2, #1
    e6e8:	701a      	strb	r2, [r3, #0]
    e6ea:	4b9e      	ldr	r3, [pc, #632]	; (e964 <_usb_device_interrupt_handler+0x684>)
    e6ec:	447b      	add	r3, pc
    e6ee:	220b      	movs	r2, #11
    e6f0:	18ba      	adds	r2, r7, r2
    e6f2:	7812      	ldrb	r2, [r2, #0]
    e6f4:	719a      	strb	r2, [r3, #6]
    e6f6:	230b      	movs	r3, #11
    e6f8:	18fb      	adds	r3, r7, r3
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	4a95      	ldr	r2, [pc, #596]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e6fe:	58a2      	ldr	r2, [r4, r2]
    e700:	015b      	lsls	r3, r3, #5
    e702:	18d3      	adds	r3, r2, r3
    e704:	685b      	ldr	r3, [r3, #4]
    e706:	049b      	lsls	r3, r3, #18
    e708:	0c9b      	lsrs	r3, r3, #18
    e70a:	b29b      	uxth	r3, r3
    e70c:	001a      	movs	r2, r3
    e70e:	4b96      	ldr	r3, [pc, #600]	; (e968 <_usb_device_interrupt_handler+0x688>)
    e710:	447b      	add	r3, pc
    e712:	801a      	strh	r2, [r3, #0]
    e714:	230b      	movs	r3, #11
    e716:	18fb      	adds	r3, r7, r3
    e718:	781b      	ldrb	r3, [r3, #0]
    e71a:	4a8e      	ldr	r2, [pc, #568]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e71c:	58a2      	ldr	r2, [r4, r2]
    e71e:	015b      	lsls	r3, r3, #5
    e720:	18d3      	adds	r3, r2, r3
    e722:	685b      	ldr	r3, [r3, #4]
    e724:	011b      	lsls	r3, r3, #4
    e726:	0c9b      	lsrs	r3, r3, #18
    e728:	b29b      	uxth	r3, r3
    e72a:	001a      	movs	r2, r3
    e72c:	4b8f      	ldr	r3, [pc, #572]	; (e96c <_usb_device_interrupt_handler+0x68c>)
    e72e:	447b      	add	r3, pc
    e730:	809a      	strh	r2, [r3, #4]
    e732:	1d3b      	adds	r3, r7, #4
    e734:	881b      	ldrh	r3, [r3, #0]
    e736:	2203      	movs	r2, #3
    e738:	4013      	ands	r3, r2
    e73a:	d100      	bne.n	e73e <_usb_device_interrupt_handler+0x45e>
    e73c:	e0fb      	b.n	e936 <_usb_device_interrupt_handler+0x656>
    e73e:	4b8c      	ldr	r3, [pc, #560]	; (e970 <_usb_device_interrupt_handler+0x690>)
    e740:	447b      	add	r3, pc
    e742:	681a      	ldr	r2, [r3, #0]
    e744:	230b      	movs	r3, #11
    e746:	18fb      	adds	r3, r7, r3
    e748:	781b      	ldrb	r3, [r3, #0]
    e74a:	330d      	adds	r3, #13
    e74c:	011b      	lsls	r3, r3, #4
    e74e:	18d3      	adds	r3, r2, r3
    e750:	3304      	adds	r3, #4
    e752:	681a      	ldr	r2, [r3, #0]
    e754:	4b87      	ldr	r3, [pc, #540]	; (e974 <_usb_device_interrupt_handler+0x694>)
    e756:	447b      	add	r3, pc
    e758:	681b      	ldr	r3, [r3, #0]
    e75a:	4987      	ldr	r1, [pc, #540]	; (e978 <_usb_device_interrupt_handler+0x698>)
    e75c:	4479      	add	r1, pc
    e75e:	0018      	movs	r0, r3
    e760:	4790      	blx	r2
    e762:	e0e8      	b.n	e936 <_usb_device_interrupt_handler+0x656>
    e764:	1dbb      	adds	r3, r7, #6
    e766:	881b      	ldrh	r3, [r3, #0]
    e768:	220c      	movs	r2, #12
    e76a:	4013      	ands	r3, r2
    e76c:	d100      	bne.n	e770 <_usb_device_interrupt_handler+0x490>
    e76e:	e0d0      	b.n	e912 <_usb_device_interrupt_handler+0x632>
    e770:	4b82      	ldr	r3, [pc, #520]	; (e97c <_usb_device_interrupt_handler+0x69c>)
    e772:	447b      	add	r3, pc
    e774:	681b      	ldr	r3, [r3, #0]
    e776:	681a      	ldr	r2, [r3, #0]
    e778:	230b      	movs	r3, #11
    e77a:	18fb      	adds	r3, r7, r3
    e77c:	781b      	ldrb	r3, [r3, #0]
    e77e:	3308      	adds	r3, #8
    e780:	015b      	lsls	r3, r3, #5
    e782:	18d3      	adds	r3, r2, r3
    e784:	3307      	adds	r3, #7
    e786:	781b      	ldrb	r3, [r3, #0]
    e788:	b2db      	uxtb	r3, r3
    e78a:	001a      	movs	r2, r3
    e78c:	2308      	movs	r3, #8
    e78e:	4013      	ands	r3, r2
    e790:	d04d      	beq.n	e82e <_usb_device_interrupt_handler+0x54e>
    e792:	4b7b      	ldr	r3, [pc, #492]	; (e980 <_usb_device_interrupt_handler+0x6a0>)
    e794:	447b      	add	r3, pc
    e796:	681b      	ldr	r3, [r3, #0]
    e798:	681a      	ldr	r2, [r3, #0]
    e79a:	230b      	movs	r3, #11
    e79c:	18fb      	adds	r3, r7, r3
    e79e:	781b      	ldrb	r3, [r3, #0]
    e7a0:	3308      	adds	r3, #8
    e7a2:	015b      	lsls	r3, r3, #5
    e7a4:	18d3      	adds	r3, r2, r3
    e7a6:	3307      	adds	r3, #7
    e7a8:	2208      	movs	r2, #8
    e7aa:	701a      	strb	r2, [r3, #0]
    e7ac:	230b      	movs	r3, #11
    e7ae:	18fb      	adds	r3, r7, r3
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	4a68      	ldr	r2, [pc, #416]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e7b4:	58a2      	ldr	r2, [r4, r2]
    e7b6:	015b      	lsls	r3, r3, #5
    e7b8:	18d3      	adds	r3, r2, r3
    e7ba:	331a      	adds	r3, #26
    e7bc:	781b      	ldrb	r3, [r3, #0]
    e7be:	b2db      	uxtb	r3, r3
    e7c0:	001a      	movs	r2, r3
    e7c2:	2302      	movs	r3, #2
    e7c4:	4013      	ands	r3, r2
    e7c6:	d016      	beq.n	e7f6 <_usb_device_interrupt_handler+0x516>
    e7c8:	230b      	movs	r3, #11
    e7ca:	18fb      	adds	r3, r7, r3
    e7cc:	781b      	ldrb	r3, [r3, #0]
    e7ce:	220b      	movs	r2, #11
    e7d0:	18ba      	adds	r2, r7, r2
    e7d2:	7812      	ldrb	r2, [r2, #0]
    e7d4:	495f      	ldr	r1, [pc, #380]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e7d6:	5861      	ldr	r1, [r4, r1]
    e7d8:	0152      	lsls	r2, r2, #5
    e7da:	188a      	adds	r2, r1, r2
    e7dc:	321a      	adds	r2, #26
    e7de:	7812      	ldrb	r2, [r2, #0]
    e7e0:	b2d2      	uxtb	r2, r2
    e7e2:	2102      	movs	r1, #2
    e7e4:	438a      	bics	r2, r1
    e7e6:	b2d1      	uxtb	r1, r2
    e7e8:	4a5a      	ldr	r2, [pc, #360]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e7ea:	58a2      	ldr	r2, [r4, r2]
    e7ec:	015b      	lsls	r3, r3, #5
    e7ee:	18d3      	adds	r3, r2, r3
    e7f0:	331a      	adds	r3, #26
    e7f2:	1c0a      	adds	r2, r1, #0
    e7f4:	701a      	strb	r2, [r3, #0]
    e7f6:	230b      	movs	r3, #11
    e7f8:	18fb      	adds	r3, r7, r3
    e7fa:	781b      	ldrb	r3, [r3, #0]
    e7fc:	2280      	movs	r2, #128	; 0x80
    e7fe:	4252      	negs	r2, r2
    e800:	4313      	orrs	r3, r2
    e802:	b2da      	uxtb	r2, r3
    e804:	4b5f      	ldr	r3, [pc, #380]	; (e984 <_usb_device_interrupt_handler+0x6a4>)
    e806:	447b      	add	r3, pc
    e808:	719a      	strb	r2, [r3, #6]
    e80a:	4b5f      	ldr	r3, [pc, #380]	; (e988 <_usb_device_interrupt_handler+0x6a8>)
    e80c:	447b      	add	r3, pc
    e80e:	681b      	ldr	r3, [r3, #0]
    e810:	681a      	ldr	r2, [r3, #0]
    e812:	230b      	movs	r3, #11
    e814:	18fb      	adds	r3, r7, r3
    e816:	781b      	ldrb	r3, [r3, #0]
    e818:	3308      	adds	r3, #8
    e81a:	015b      	lsls	r3, r3, #5
    e81c:	18d3      	adds	r3, r2, r3
    e81e:	3307      	adds	r3, #7
    e820:	781b      	ldrb	r3, [r3, #0]
    e822:	b2db      	uxtb	r3, r3
    e824:	001a      	movs	r2, r3
    e826:	2302      	movs	r3, #2
    e828:	4013      	ands	r3, r2
    e82a:	d05a      	beq.n	e8e2 <_usb_device_interrupt_handler+0x602>
    e82c:	e088      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e82e:	4b57      	ldr	r3, [pc, #348]	; (e98c <_usb_device_interrupt_handler+0x6ac>)
    e830:	447b      	add	r3, pc
    e832:	681b      	ldr	r3, [r3, #0]
    e834:	681a      	ldr	r2, [r3, #0]
    e836:	230b      	movs	r3, #11
    e838:	18fb      	adds	r3, r7, r3
    e83a:	781b      	ldrb	r3, [r3, #0]
    e83c:	3308      	adds	r3, #8
    e83e:	015b      	lsls	r3, r3, #5
    e840:	18d3      	adds	r3, r2, r3
    e842:	3307      	adds	r3, #7
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	b2db      	uxtb	r3, r3
    e848:	001a      	movs	r2, r3
    e84a:	2304      	movs	r3, #4
    e84c:	4013      	ands	r3, r2
    e84e:	d048      	beq.n	e8e2 <_usb_device_interrupt_handler+0x602>
    e850:	4b4f      	ldr	r3, [pc, #316]	; (e990 <_usb_device_interrupt_handler+0x6b0>)
    e852:	447b      	add	r3, pc
    e854:	681b      	ldr	r3, [r3, #0]
    e856:	681a      	ldr	r2, [r3, #0]
    e858:	230b      	movs	r3, #11
    e85a:	18fb      	adds	r3, r7, r3
    e85c:	781b      	ldrb	r3, [r3, #0]
    e85e:	3308      	adds	r3, #8
    e860:	015b      	lsls	r3, r3, #5
    e862:	18d3      	adds	r3, r2, r3
    e864:	3307      	adds	r3, #7
    e866:	2204      	movs	r2, #4
    e868:	701a      	strb	r2, [r3, #0]
    e86a:	230b      	movs	r3, #11
    e86c:	18fb      	adds	r3, r7, r3
    e86e:	781b      	ldrb	r3, [r3, #0]
    e870:	4a38      	ldr	r2, [pc, #224]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e872:	58a2      	ldr	r2, [r4, r2]
    e874:	015b      	lsls	r3, r3, #5
    e876:	18d3      	adds	r3, r2, r3
    e878:	330a      	adds	r3, #10
    e87a:	781b      	ldrb	r3, [r3, #0]
    e87c:	b2db      	uxtb	r3, r3
    e87e:	001a      	movs	r2, r3
    e880:	2302      	movs	r3, #2
    e882:	4013      	ands	r3, r2
    e884:	d016      	beq.n	e8b4 <_usb_device_interrupt_handler+0x5d4>
    e886:	230b      	movs	r3, #11
    e888:	18fb      	adds	r3, r7, r3
    e88a:	781b      	ldrb	r3, [r3, #0]
    e88c:	220b      	movs	r2, #11
    e88e:	18ba      	adds	r2, r7, r2
    e890:	7812      	ldrb	r2, [r2, #0]
    e892:	4930      	ldr	r1, [pc, #192]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e894:	5861      	ldr	r1, [r4, r1]
    e896:	0152      	lsls	r2, r2, #5
    e898:	188a      	adds	r2, r1, r2
    e89a:	320a      	adds	r2, #10
    e89c:	7812      	ldrb	r2, [r2, #0]
    e89e:	b2d2      	uxtb	r2, r2
    e8a0:	2102      	movs	r1, #2
    e8a2:	438a      	bics	r2, r1
    e8a4:	b2d1      	uxtb	r1, r2
    e8a6:	4a2b      	ldr	r2, [pc, #172]	; (e954 <_usb_device_interrupt_handler+0x674>)
    e8a8:	58a2      	ldr	r2, [r4, r2]
    e8aa:	015b      	lsls	r3, r3, #5
    e8ac:	18d3      	adds	r3, r2, r3
    e8ae:	330a      	adds	r3, #10
    e8b0:	1c0a      	adds	r2, r1, #0
    e8b2:	701a      	strb	r2, [r3, #0]
    e8b4:	4b37      	ldr	r3, [pc, #220]	; (e994 <_usb_device_interrupt_handler+0x6b4>)
    e8b6:	447b      	add	r3, pc
    e8b8:	220b      	movs	r2, #11
    e8ba:	18ba      	adds	r2, r7, r2
    e8bc:	7812      	ldrb	r2, [r2, #0]
    e8be:	719a      	strb	r2, [r3, #6]
    e8c0:	4b35      	ldr	r3, [pc, #212]	; (e998 <_usb_device_interrupt_handler+0x6b8>)
    e8c2:	447b      	add	r3, pc
    e8c4:	681b      	ldr	r3, [r3, #0]
    e8c6:	681a      	ldr	r2, [r3, #0]
    e8c8:	230b      	movs	r3, #11
    e8ca:	18fb      	adds	r3, r7, r3
    e8cc:	781b      	ldrb	r3, [r3, #0]
    e8ce:	3308      	adds	r3, #8
    e8d0:	015b      	lsls	r3, r3, #5
    e8d2:	18d3      	adds	r3, r2, r3
    e8d4:	3307      	adds	r3, #7
    e8d6:	781b      	ldrb	r3, [r3, #0]
    e8d8:	b2db      	uxtb	r3, r3
    e8da:	001a      	movs	r2, r3
    e8dc:	2301      	movs	r3, #1
    e8de:	4013      	ands	r3, r2
    e8e0:	d12b      	bne.n	e93a <_usb_device_interrupt_handler+0x65a>
    e8e2:	1d3b      	adds	r3, r7, #4
    e8e4:	881b      	ldrh	r3, [r3, #0]
    e8e6:	220c      	movs	r2, #12
    e8e8:	4013      	ands	r3, r2
    e8ea:	d028      	beq.n	e93e <_usb_device_interrupt_handler+0x65e>
    e8ec:	4b2b      	ldr	r3, [pc, #172]	; (e99c <_usb_device_interrupt_handler+0x6bc>)
    e8ee:	447b      	add	r3, pc
    e8f0:	681a      	ldr	r2, [r3, #0]
    e8f2:	230b      	movs	r3, #11
    e8f4:	18fb      	adds	r3, r7, r3
    e8f6:	781b      	ldrb	r3, [r3, #0]
    e8f8:	21d8      	movs	r1, #216	; 0xd8
    e8fa:	011b      	lsls	r3, r3, #4
    e8fc:	18d3      	adds	r3, r2, r3
    e8fe:	185b      	adds	r3, r3, r1
    e900:	681a      	ldr	r2, [r3, #0]
    e902:	4b27      	ldr	r3, [pc, #156]	; (e9a0 <_usb_device_interrupt_handler+0x6c0>)
    e904:	447b      	add	r3, pc
    e906:	681b      	ldr	r3, [r3, #0]
    e908:	4926      	ldr	r1, [pc, #152]	; (e9a4 <_usb_device_interrupt_handler+0x6c4>)
    e90a:	4479      	add	r1, pc
    e90c:	0018      	movs	r0, r3
    e90e:	4790      	blx	r2
    e910:	e015      	b.n	e93e <_usb_device_interrupt_handler+0x65e>
    e912:	230b      	movs	r3, #11
    e914:	18fb      	adds	r3, r7, r3
    e916:	781a      	ldrb	r2, [r3, #0]
    e918:	230b      	movs	r3, #11
    e91a:	18fb      	adds	r3, r7, r3
    e91c:	3201      	adds	r2, #1
    e91e:	701a      	strb	r2, [r3, #0]
    e920:	230b      	movs	r3, #11
    e922:	18fb      	adds	r3, r7, r3
    e924:	781b      	ldrb	r3, [r3, #0]
    e926:	2b07      	cmp	r3, #7
    e928:	d800      	bhi.n	e92c <_usb_device_interrupt_handler+0x64c>
    e92a:	e553      	b.n	e3d4 <_usb_device_interrupt_handler+0xf4>
    e92c:	e008      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e92e:	46c0      	nop			; (mov r8, r8)
    e930:	e006      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e932:	46c0      	nop			; (mov r8, r8)
    e934:	e004      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e936:	46c0      	nop			; (mov r8, r8)
    e938:	e002      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e93a:	46c0      	nop			; (mov r8, r8)
    e93c:	e000      	b.n	e940 <_usb_device_interrupt_handler+0x660>
    e93e:	46c0      	nop			; (mov r8, r8)
    e940:	46bd      	mov	sp, r7
    e942:	b005      	add	sp, #20
    e944:	bd90      	pop	{r4, r7, pc}
    e946:	46c0      	nop			; (mov r8, r8)
    e948:	1fff1fe2 	.word	0x1fff1fe2
    e94c:	1fff1fc0 	.word	0x1fff1fc0
    e950:	1fff1fa8 	.word	0x1fff1fa8
    e954:	00000020 	.word	0x00000020
    e958:	1fff1f88 	.word	0x1fff1f88
    e95c:	1fff1f70 	.word	0x1fff1f70
    e960:	1fff1f4e 	.word	0x1fff1f4e
    e964:	1fff1f44 	.word	0x1fff1f44
    e968:	1fff1f20 	.word	0x1fff1f20
    e96c:	1fff1f02 	.word	0x1fff1f02
    e970:	1fff1ee0 	.word	0x1fff1ee0
    e974:	1fff1eca 	.word	0x1fff1eca
    e978:	1fff1ed4 	.word	0x1fff1ed4
    e97c:	1fff1eae 	.word	0x1fff1eae
    e980:	1fff1e8c 	.word	0x1fff1e8c
    e984:	1fff1e2a 	.word	0x1fff1e2a
    e988:	1fff1e14 	.word	0x1fff1e14
    e98c:	1fff1df0 	.word	0x1fff1df0
    e990:	1fff1dce 	.word	0x1fff1dce
    e994:	1fff1d7a 	.word	0x1fff1d7a
    e998:	1fff1d5e 	.word	0x1fff1d5e
    e99c:	1fff1d32 	.word	0x1fff1d32
    e9a0:	1fff1d1c 	.word	0x1fff1d1c
    e9a4:	1fff1d26 	.word	0x1fff1d26

0000e9a8 <usb_enable>:
    e9a8:	b580      	push	{r7, lr}
    e9aa:	b082      	sub	sp, #8
    e9ac:	af00      	add	r7, sp, #0
    e9ae:	6078      	str	r0, [r7, #4]
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	681a      	ldr	r2, [r3, #0]
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	681b      	ldr	r3, [r3, #0]
    e9b8:	781b      	ldrb	r3, [r3, #0]
    e9ba:	b2db      	uxtb	r3, r3
    e9bc:	2102      	movs	r1, #2
    e9be:	430b      	orrs	r3, r1
    e9c0:	b2db      	uxtb	r3, r3
    e9c2:	7013      	strb	r3, [r2, #0]
    e9c4:	46c0      	nop			; (mov r8, r8)
    e9c6:	687b      	ldr	r3, [r7, #4]
    e9c8:	681b      	ldr	r3, [r3, #0]
    e9ca:	789b      	ldrb	r3, [r3, #2]
    e9cc:	b2db      	uxtb	r3, r3
    e9ce:	2b02      	cmp	r3, #2
    e9d0:	d0f9      	beq.n	e9c6 <usb_enable+0x1e>
    e9d2:	46c0      	nop			; (mov r8, r8)
    e9d4:	46bd      	mov	sp, r7
    e9d6:	b002      	add	sp, #8
    e9d8:	bd80      	pop	{r7, pc}
	...

0000e9dc <USB_Handler>:
    e9dc:	b580      	push	{r7, lr}
    e9de:	af00      	add	r7, sp, #0
    e9e0:	4b09      	ldr	r3, [pc, #36]	; (ea08 <USB_Handler+0x2c>)
    e9e2:	447b      	add	r3, pc
    e9e4:	681b      	ldr	r3, [r3, #0]
    e9e6:	681b      	ldr	r3, [r3, #0]
    e9e8:	781b      	ldrb	r3, [r3, #0]
    e9ea:	061b      	lsls	r3, r3, #24
    e9ec:	0fdb      	lsrs	r3, r3, #31
    e9ee:	b2db      	uxtb	r3, r3
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d003      	beq.n	e9fc <USB_Handler+0x20>
    e9f4:	4b05      	ldr	r3, [pc, #20]	; (ea0c <USB_Handler+0x30>)
    e9f6:	447b      	add	r3, pc
    e9f8:	4798      	blx	r3
    e9fa:	e002      	b.n	ea02 <USB_Handler+0x26>
    e9fc:	4b04      	ldr	r3, [pc, #16]	; (ea10 <USB_Handler+0x34>)
    e9fe:	447b      	add	r3, pc
    ea00:	4798      	blx	r3
    ea02:	46c0      	nop			; (mov r8, r8)
    ea04:	46bd      	mov	sp, r7
    ea06:	bd80      	pop	{r7, pc}
    ea08:	1fff1c3e 	.word	0x1fff1c3e
    ea0c:	ffffe32b 	.word	0xffffe32b
    ea10:	fffff8df 	.word	0xfffff8df

0000ea14 <usb_get_config_defaults>:
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	2200      	movs	r2, #0
    ea20:	701a      	strb	r2, [r3, #0]
    ea22:	687b      	ldr	r3, [r7, #4]
    ea24:	2201      	movs	r2, #1
    ea26:	705a      	strb	r2, [r3, #1]
    ea28:	687b      	ldr	r3, [r7, #4]
    ea2a:	2200      	movs	r2, #0
    ea2c:	709a      	strb	r2, [r3, #2]
    ea2e:	687b      	ldr	r3, [r7, #4]
    ea30:	2201      	movs	r2, #1
    ea32:	70da      	strb	r2, [r3, #3]
    ea34:	46c0      	nop			; (mov r8, r8)
    ea36:	46bd      	mov	sp, r7
    ea38:	b002      	add	sp, #8
    ea3a:	bd80      	pop	{r7, pc}

0000ea3c <usb_init>:
    ea3c:	b590      	push	{r4, r7, lr}
    ea3e:	b08d      	sub	sp, #52	; 0x34
    ea40:	af00      	add	r7, sp, #0
    ea42:	60f8      	str	r0, [r7, #12]
    ea44:	60b9      	str	r1, [r7, #8]
    ea46:	607a      	str	r2, [r7, #4]
    ea48:	4ccc      	ldr	r4, [pc, #816]	; (ed7c <usb_init+0x340>)
    ea4a:	447c      	add	r4, pc
    ea4c:	4bcc      	ldr	r3, [pc, #816]	; (ed80 <usb_init+0x344>)
    ea4e:	58e3      	ldr	r3, [r4, r3]
    ea50:	2200      	movs	r2, #0
    ea52:	601a      	str	r2, [r3, #0]
    ea54:	4bcb      	ldr	r3, [pc, #812]	; (ed84 <usb_init+0x348>)
    ea56:	447b      	add	r3, pc
    ea58:	68fa      	ldr	r2, [r7, #12]
    ea5a:	601a      	str	r2, [r3, #0]
    ea5c:	68fb      	ldr	r3, [r7, #12]
    ea5e:	68ba      	ldr	r2, [r7, #8]
    ea60:	601a      	str	r2, [r3, #0]
    ea62:	2120      	movs	r1, #32
    ea64:	2001      	movs	r0, #1
    ea66:	4bc8      	ldr	r3, [pc, #800]	; (ed88 <usb_init+0x34c>)
    ea68:	447b      	add	r3, pc
    ea6a:	4798      	blx	r3
    ea6c:	2318      	movs	r3, #24
    ea6e:	18fb      	adds	r3, r7, r3
    ea70:	0018      	movs	r0, r3
    ea72:	4bc6      	ldr	r3, [pc, #792]	; (ed8c <usb_init+0x350>)
    ea74:	447b      	add	r3, pc
    ea76:	4798      	blx	r3
    ea78:	2318      	movs	r3, #24
    ea7a:	18fb      	adds	r3, r7, r3
    ea7c:	2206      	movs	r2, #6
    ea7e:	701a      	strb	r2, [r3, #0]
    ea80:	2318      	movs	r3, #24
    ea82:	18fb      	adds	r3, r7, r3
    ea84:	0019      	movs	r1, r3
    ea86:	2018      	movs	r0, #24
    ea88:	4bc1      	ldr	r3, [pc, #772]	; (ed90 <usb_init+0x354>)
    ea8a:	58e3      	ldr	r3, [r4, r3]
    ea8c:	4798      	blx	r3
    ea8e:	2318      	movs	r3, #24
    ea90:	18fb      	adds	r3, r7, r3
    ea92:	2206      	movs	r2, #6
    ea94:	701a      	strb	r2, [r3, #0]
    ea96:	2318      	movs	r3, #24
    ea98:	18fb      	adds	r3, r7, r3
    ea9a:	0019      	movs	r1, r3
    ea9c:	2019      	movs	r0, #25
    ea9e:	4bbc      	ldr	r3, [pc, #752]	; (ed90 <usb_init+0x354>)
    eaa0:	58e3      	ldr	r3, [r4, r3]
    eaa2:	4798      	blx	r3
    eaa4:	2314      	movs	r3, #20
    eaa6:	18fb      	adds	r3, r7, r3
    eaa8:	0018      	movs	r0, r3
    eaaa:	4bba      	ldr	r3, [pc, #744]	; (ed94 <usb_init+0x358>)
    eaac:	447b      	add	r3, pc
    eaae:	4798      	blx	r3
    eab0:	687b      	ldr	r3, [r7, #4]
    eab2:	789a      	ldrb	r2, [r3, #2]
    eab4:	2314      	movs	r3, #20
    eab6:	18fb      	adds	r3, r7, r3
    eab8:	701a      	strb	r2, [r3, #0]
    eaba:	2314      	movs	r3, #20
    eabc:	18fb      	adds	r3, r7, r3
    eabe:	0019      	movs	r1, r3
    eac0:	2006      	movs	r0, #6
    eac2:	4bb5      	ldr	r3, [pc, #724]	; (ed98 <usb_init+0x35c>)
    eac4:	58e3      	ldr	r3, [r4, r3]
    eac6:	4798      	blx	r3
    eac8:	2006      	movs	r0, #6
    eaca:	4bb4      	ldr	r3, [pc, #720]	; (ed9c <usb_init+0x360>)
    eacc:	58e3      	ldr	r3, [r4, r3]
    eace:	4798      	blx	r3
    ead0:	68ba      	ldr	r2, [r7, #8]
    ead2:	7813      	ldrb	r3, [r2, #0]
    ead4:	2101      	movs	r1, #1
    ead6:	430b      	orrs	r3, r1
    ead8:	7013      	strb	r3, [r2, #0]
    eada:	46c0      	nop			; (mov r8, r8)
    eadc:	68bb      	ldr	r3, [r7, #8]
    eade:	789b      	ldrb	r3, [r3, #2]
    eae0:	07db      	lsls	r3, r3, #31
    eae2:	0fdb      	lsrs	r3, r3, #31
    eae4:	b2db      	uxtb	r3, r3
    eae6:	2b00      	cmp	r3, #0
    eae8:	d1f8      	bne.n	eadc <usb_init+0xa0>
    eaea:	4aad      	ldr	r2, [pc, #692]	; (eda0 <usb_init+0x364>)
    eaec:	78d3      	ldrb	r3, [r2, #3]
    eaee:	2103      	movs	r1, #3
    eaf0:	438b      	bics	r3, r1
    eaf2:	1c19      	adds	r1, r3, #0
    eaf4:	2302      	movs	r3, #2
    eaf6:	430b      	orrs	r3, r1
    eaf8:	70d3      	strb	r3, [r2, #3]
    eafa:	4aa9      	ldr	r2, [pc, #676]	; (eda0 <usb_init+0x364>)
    eafc:	78d3      	ldrb	r3, [r2, #3]
    eafe:	210c      	movs	r1, #12
    eb00:	438b      	bics	r3, r1
    eb02:	1c19      	adds	r1, r3, #0
    eb04:	2308      	movs	r3, #8
    eb06:	430b      	orrs	r3, r1
    eb08:	70d3      	strb	r3, [r2, #3]
    eb0a:	4ba6      	ldr	r3, [pc, #664]	; (eda4 <usb_init+0x368>)
    eb0c:	681b      	ldr	r3, [r3, #0]
    eb0e:	0b5b      	lsrs	r3, r3, #13
    eb10:	221f      	movs	r2, #31
    eb12:	4013      	ands	r3, r2
    eb14:	627b      	str	r3, [r7, #36]	; 0x24
    eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb18:	2b1f      	cmp	r3, #31
    eb1a:	d101      	bne.n	eb20 <usb_init+0xe4>
    eb1c:	2305      	movs	r3, #5
    eb1e:	627b      	str	r3, [r7, #36]	; 0x24
    eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eb22:	b2db      	uxtb	r3, r3
    eb24:	1c1a      	adds	r2, r3, #0
    eb26:	231f      	movs	r3, #31
    eb28:	4013      	ands	r3, r2
    eb2a:	b2d9      	uxtb	r1, r3
    eb2c:	68ba      	ldr	r2, [r7, #8]
    eb2e:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    eb30:	1c08      	adds	r0, r1, #0
    eb32:	211f      	movs	r1, #31
    eb34:	4001      	ands	r1, r0
    eb36:	0188      	lsls	r0, r1, #6
    eb38:	499b      	ldr	r1, [pc, #620]	; (eda8 <usb_init+0x36c>)
    eb3a:	400b      	ands	r3, r1
    eb3c:	1c19      	adds	r1, r3, #0
    eb3e:	1c03      	adds	r3, r0, #0
    eb40:	430b      	orrs	r3, r1
    eb42:	8513      	strh	r3, [r2, #40]	; 0x28
    eb44:	4b97      	ldr	r3, [pc, #604]	; (eda4 <usb_init+0x368>)
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	0c9b      	lsrs	r3, r3, #18
    eb4a:	221f      	movs	r2, #31
    eb4c:	4013      	ands	r3, r2
    eb4e:	623b      	str	r3, [r7, #32]
    eb50:	6a3b      	ldr	r3, [r7, #32]
    eb52:	2b1f      	cmp	r3, #31
    eb54:	d101      	bne.n	eb5a <usb_init+0x11e>
    eb56:	231d      	movs	r3, #29
    eb58:	623b      	str	r3, [r7, #32]
    eb5a:	6a3b      	ldr	r3, [r7, #32]
    eb5c:	b2db      	uxtb	r3, r3
    eb5e:	1c1a      	adds	r2, r3, #0
    eb60:	231f      	movs	r3, #31
    eb62:	4013      	ands	r3, r2
    eb64:	b2d9      	uxtb	r1, r3
    eb66:	68ba      	ldr	r2, [r7, #8]
    eb68:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    eb6a:	1c08      	adds	r0, r1, #0
    eb6c:	211f      	movs	r1, #31
    eb6e:	4008      	ands	r0, r1
    eb70:	211f      	movs	r1, #31
    eb72:	438b      	bics	r3, r1
    eb74:	1c19      	adds	r1, r3, #0
    eb76:	1c03      	adds	r3, r0, #0
    eb78:	430b      	orrs	r3, r1
    eb7a:	8513      	strh	r3, [r2, #40]	; 0x28
    eb7c:	4b89      	ldr	r3, [pc, #548]	; (eda4 <usb_init+0x368>)
    eb7e:	681b      	ldr	r3, [r3, #0]
    eb80:	0ddb      	lsrs	r3, r3, #23
    eb82:	2207      	movs	r2, #7
    eb84:	4013      	ands	r3, r2
    eb86:	61fb      	str	r3, [r7, #28]
    eb88:	69fb      	ldr	r3, [r7, #28]
    eb8a:	2b07      	cmp	r3, #7
    eb8c:	d101      	bne.n	eb92 <usb_init+0x156>
    eb8e:	2303      	movs	r3, #3
    eb90:	61fb      	str	r3, [r7, #28]
    eb92:	69fb      	ldr	r3, [r7, #28]
    eb94:	b2db      	uxtb	r3, r3
    eb96:	1c1a      	adds	r2, r3, #0
    eb98:	2307      	movs	r3, #7
    eb9a:	4013      	ands	r3, r2
    eb9c:	b2d9      	uxtb	r1, r3
    eb9e:	68ba      	ldr	r2, [r7, #8]
    eba0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    eba2:	1c08      	adds	r0, r1, #0
    eba4:	2107      	movs	r1, #7
    eba6:	4001      	ands	r1, r0
    eba8:	0308      	lsls	r0, r1, #12
    ebaa:	4980      	ldr	r1, [pc, #512]	; (edac <usb_init+0x370>)
    ebac:	400b      	ands	r3, r1
    ebae:	1c19      	adds	r1, r3, #0
    ebb0:	1c03      	adds	r3, r0, #0
    ebb2:	430b      	orrs	r3, r1
    ebb4:	8513      	strh	r3, [r2, #40]	; 0x28
    ebb6:	687b      	ldr	r3, [r7, #4]
    ebb8:	7819      	ldrb	r1, [r3, #0]
    ebba:	68ba      	ldr	r2, [r7, #8]
    ebbc:	7813      	ldrb	r3, [r2, #0]
    ebbe:	01c8      	lsls	r0, r1, #7
    ebc0:	217f      	movs	r1, #127	; 0x7f
    ebc2:	400b      	ands	r3, r1
    ebc4:	1c19      	adds	r1, r3, #0
    ebc6:	1c03      	adds	r3, r0, #0
    ebc8:	430b      	orrs	r3, r1
    ebca:	7013      	strb	r3, [r2, #0]
    ebcc:	687b      	ldr	r3, [r7, #4]
    ebce:	7859      	ldrb	r1, [r3, #1]
    ebd0:	68ba      	ldr	r2, [r7, #8]
    ebd2:	7813      	ldrb	r3, [r2, #0]
    ebd4:	2001      	movs	r0, #1
    ebd6:	4001      	ands	r1, r0
    ebd8:	0088      	lsls	r0, r1, #2
    ebda:	2104      	movs	r1, #4
    ebdc:	438b      	bics	r3, r1
    ebde:	1c19      	adds	r1, r3, #0
    ebe0:	1c03      	adds	r3, r0, #0
    ebe2:	430b      	orrs	r3, r1
    ebe4:	7013      	strb	r3, [r2, #0]
    ebe6:	4b72      	ldr	r3, [pc, #456]	; (edb0 <usb_init+0x374>)
    ebe8:	58e3      	ldr	r3, [r4, r3]
    ebea:	001a      	movs	r2, r3
    ebec:	68bb      	ldr	r3, [r7, #8]
    ebee:	625a      	str	r2, [r3, #36]	; 0x24
    ebf0:	687b      	ldr	r3, [r7, #4]
    ebf2:	78db      	ldrb	r3, [r3, #3]
    ebf4:	2b01      	cmp	r3, #1
    ebf6:	d106      	bne.n	ec06 <usb_init+0x1ca>
    ebf8:	68fb      	ldr	r3, [r7, #12]
    ebfa:	681a      	ldr	r2, [r3, #0]
    ebfc:	8913      	ldrh	r3, [r2, #8]
    ebfe:	210c      	movs	r1, #12
    ec00:	438b      	bics	r3, r1
    ec02:	8113      	strh	r3, [r2, #8]
    ec04:	e00c      	b.n	ec20 <usb_init+0x1e4>
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	78db      	ldrb	r3, [r3, #3]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d108      	bne.n	ec20 <usb_init+0x1e4>
    ec0e:	68fb      	ldr	r3, [r7, #12]
    ec10:	681a      	ldr	r2, [r3, #0]
    ec12:	8913      	ldrh	r3, [r2, #8]
    ec14:	210c      	movs	r1, #12
    ec16:	438b      	bics	r3, r1
    ec18:	1c19      	adds	r1, r3, #0
    ec1a:	2304      	movs	r3, #4
    ec1c:	430b      	orrs	r3, r1
    ec1e:	8113      	strh	r3, [r2, #8]
    ec20:	2380      	movs	r3, #128	; 0x80
    ec22:	005a      	lsls	r2, r3, #1
    ec24:	4b62      	ldr	r3, [pc, #392]	; (edb0 <usb_init+0x374>)
    ec26:	58e3      	ldr	r3, [r4, r3]
    ec28:	2100      	movs	r1, #0
    ec2a:	0018      	movs	r0, r3
    ec2c:	4b61      	ldr	r3, [pc, #388]	; (edb4 <usb_init+0x378>)
    ec2e:	58e3      	ldr	r3, [r4, r3]
    ec30:	4798      	blx	r3
    ec32:	2300      	movs	r3, #0
    ec34:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec36:	e009      	b.n	ec4c <usb_init+0x210>
    ec38:	68fa      	ldr	r2, [r7, #12]
    ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec3c:	009b      	lsls	r3, r3, #2
    ec3e:	18d3      	adds	r3, r2, r3
    ec40:	3304      	adds	r3, #4
    ec42:	2200      	movs	r2, #0
    ec44:	601a      	str	r2, [r3, #0]
    ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec48:	3301      	adds	r3, #1
    ec4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec4e:	2b07      	cmp	r3, #7
    ec50:	d9f2      	bls.n	ec38 <usb_init+0x1fc>
    ec52:	2300      	movs	r3, #0
    ec54:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec56:	e016      	b.n	ec86 <usb_init+0x24a>
    ec58:	2300      	movs	r3, #0
    ec5a:	62bb      	str	r3, [r7, #40]	; 0x28
    ec5c:	e00d      	b.n	ec7a <usb_init+0x23e>
    ec5e:	68fa      	ldr	r2, [r7, #12]
    ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec62:	0099      	lsls	r1, r3, #2
    ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec66:	18cb      	adds	r3, r1, r3
    ec68:	3308      	adds	r3, #8
    ec6a:	009b      	lsls	r3, r3, #2
    ec6c:	18d3      	adds	r3, r2, r3
    ec6e:	3304      	adds	r3, #4
    ec70:	2200      	movs	r2, #0
    ec72:	601a      	str	r2, [r3, #0]
    ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec76:	3301      	adds	r3, #1
    ec78:	62bb      	str	r3, [r7, #40]	; 0x28
    ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec7c:	2b03      	cmp	r3, #3
    ec7e:	d9ee      	bls.n	ec5e <usb_init+0x222>
    ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec82:	3301      	adds	r3, #1
    ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec88:	2b07      	cmp	r3, #7
    ec8a:	d9e5      	bls.n	ec58 <usb_init+0x21c>
    ec8c:	68fb      	ldr	r3, [r7, #12]
    ec8e:	22a4      	movs	r2, #164	; 0xa4
    ec90:	2100      	movs	r1, #0
    ec92:	5499      	strb	r1, [r3, r2]
    ec94:	68fb      	ldr	r3, [r7, #12]
    ec96:	22a5      	movs	r2, #165	; 0xa5
    ec98:	2100      	movs	r1, #0
    ec9a:	5499      	strb	r1, [r3, r2]
    ec9c:	2300      	movs	r3, #0
    ec9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    eca0:	e010      	b.n	ecc4 <usb_init+0x288>
    eca2:	68fa      	ldr	r2, [r7, #12]
    eca4:	21a6      	movs	r1, #166	; 0xa6
    eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eca8:	18d3      	adds	r3, r2, r3
    ecaa:	185b      	adds	r3, r3, r1
    ecac:	2200      	movs	r2, #0
    ecae:	701a      	strb	r2, [r3, #0]
    ecb0:	68fa      	ldr	r2, [r7, #12]
    ecb2:	21ae      	movs	r1, #174	; 0xae
    ecb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecb6:	18d3      	adds	r3, r2, r3
    ecb8:	185b      	adds	r3, r3, r1
    ecba:	2200      	movs	r2, #0
    ecbc:	701a      	strb	r2, [r3, #0]
    ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecc0:	3301      	adds	r3, #1
    ecc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecc6:	2b07      	cmp	r3, #7
    ecc8:	d9eb      	bls.n	eca2 <usb_init+0x266>
    ecca:	2300      	movs	r3, #0
    eccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecce:	e008      	b.n	ece2 <usb_init+0x2a6>
    ecd0:	68fb      	ldr	r3, [r7, #12]
    ecd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ecd4:	322e      	adds	r2, #46	; 0x2e
    ecd6:	0092      	lsls	r2, r2, #2
    ecd8:	2100      	movs	r1, #0
    ecda:	50d1      	str	r1, [r2, r3]
    ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecde:	3301      	adds	r3, #1
    ece0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ece2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ece4:	2b06      	cmp	r3, #6
    ece6:	d9f3      	bls.n	ecd0 <usb_init+0x294>
    ece8:	2300      	movs	r3, #0
    ecea:	62fb      	str	r3, [r7, #44]	; 0x2c
    ecec:	e016      	b.n	ed1c <usb_init+0x2e0>
    ecee:	2300      	movs	r3, #0
    ecf0:	62bb      	str	r3, [r7, #40]	; 0x28
    ecf2:	e00d      	b.n	ed10 <usb_init+0x2d4>
    ecf4:	68fa      	ldr	r2, [r7, #12]
    ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecf8:	0099      	lsls	r1, r3, #2
    ecfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ecfc:	18cb      	adds	r3, r1, r3
    ecfe:	3334      	adds	r3, #52	; 0x34
    ed00:	009b      	lsls	r3, r3, #2
    ed02:	18d3      	adds	r3, r2, r3
    ed04:	3304      	adds	r3, #4
    ed06:	2200      	movs	r2, #0
    ed08:	601a      	str	r2, [r3, #0]
    ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed0c:	3301      	adds	r3, #1
    ed0e:	62bb      	str	r3, [r7, #40]	; 0x28
    ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed12:	2b03      	cmp	r3, #3
    ed14:	d9ee      	bls.n	ecf4 <usb_init+0x2b8>
    ed16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed18:	3301      	adds	r3, #1
    ed1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed1e:	2b07      	cmp	r3, #7
    ed20:	d9e5      	bls.n	ecee <usb_init+0x2b2>
    ed22:	68fa      	ldr	r2, [r7, #12]
    ed24:	23aa      	movs	r3, #170	; 0xaa
    ed26:	005b      	lsls	r3, r3, #1
    ed28:	2100      	movs	r1, #0
    ed2a:	52d1      	strh	r1, [r2, r3]
    ed2c:	68fa      	ldr	r2, [r7, #12]
    ed2e:	23ab      	movs	r3, #171	; 0xab
    ed30:	005b      	lsls	r3, r3, #1
    ed32:	2100      	movs	r1, #0
    ed34:	52d1      	strh	r1, [r2, r3]
    ed36:	2300      	movs	r3, #0
    ed38:	62bb      	str	r3, [r7, #40]	; 0x28
    ed3a:	e012      	b.n	ed62 <usb_init+0x326>
    ed3c:	68f9      	ldr	r1, [r7, #12]
    ed3e:	23ac      	movs	r3, #172	; 0xac
    ed40:	005b      	lsls	r3, r3, #1
    ed42:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ed44:	188a      	adds	r2, r1, r2
    ed46:	18d3      	adds	r3, r2, r3
    ed48:	2200      	movs	r2, #0
    ed4a:	701a      	strb	r2, [r3, #0]
    ed4c:	68f9      	ldr	r1, [r7, #12]
    ed4e:	23b0      	movs	r3, #176	; 0xb0
    ed50:	005b      	lsls	r3, r3, #1
    ed52:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ed54:	188a      	adds	r2, r1, r2
    ed56:	18d3      	adds	r3, r2, r3
    ed58:	2200      	movs	r2, #0
    ed5a:	701a      	strb	r2, [r3, #0]
    ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed5e:	3301      	adds	r3, #1
    ed60:	62bb      	str	r3, [r7, #40]	; 0x28
    ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed64:	2b07      	cmp	r3, #7
    ed66:	d9e9      	bls.n	ed3c <usb_init+0x300>
    ed68:	2007      	movs	r0, #7
    ed6a:	4b13      	ldr	r3, [pc, #76]	; (edb8 <usb_init+0x37c>)
    ed6c:	447b      	add	r3, pc
    ed6e:	4798      	blx	r3
    ed70:	2300      	movs	r3, #0
    ed72:	0018      	movs	r0, r3
    ed74:	46bd      	mov	sp, r7
    ed76:	b00d      	add	sp, #52	; 0x34
    ed78:	bd90      	pop	{r4, r7, pc}
    ed7a:	46c0      	nop			; (mov r8, r8)
    ed7c:	00003396 	.word	0x00003396
    ed80:	000000ac 	.word	0x000000ac
    ed84:	1fff1bca 	.word	0x1fff1bca
    ed88:	ffffe209 	.word	0xffffe209
    ed8c:	ffffe259 	.word	0xffffe259
    ed90:	000002b8 	.word	0x000002b8
    ed94:	ffffe1ad 	.word	0xffffe1ad
    ed98:	000000b0 	.word	0x000000b0
    ed9c:	00000238 	.word	0x00000238
    eda0:	41005000 	.word	0x41005000
    eda4:	00806024 	.word	0x00806024
    eda8:	fffff83f 	.word	0xfffff83f
    edac:	ffff8fff 	.word	0xffff8fff
    edb0:	00000020 	.word	0x00000020
    edb4:	000001f8 	.word	0x000001f8
    edb8:	ffffdf89 	.word	0xffffdf89

0000edbc <system_pinmux_get_group_from_gpio_pin>:
{
    edbc:	b580      	push	{r7, lr}
    edbe:	b084      	sub	sp, #16
    edc0:	af00      	add	r7, sp, #0
    edc2:	0002      	movs	r2, r0
    edc4:	1dfb      	adds	r3, r7, #7
    edc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    edc8:	230f      	movs	r3, #15
    edca:	18fb      	adds	r3, r7, r3
    edcc:	1dfa      	adds	r2, r7, #7
    edce:	7812      	ldrb	r2, [r2, #0]
    edd0:	09d2      	lsrs	r2, r2, #7
    edd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    edd4:	230e      	movs	r3, #14
    edd6:	18fb      	adds	r3, r7, r3
    edd8:	1dfa      	adds	r2, r7, #7
    edda:	7812      	ldrb	r2, [r2, #0]
    eddc:	0952      	lsrs	r2, r2, #5
    edde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ede0:	4b0d      	ldr	r3, [pc, #52]	; (ee18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ede2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    ede4:	230f      	movs	r3, #15
    ede6:	18fb      	adds	r3, r7, r3
    ede8:	781b      	ldrb	r3, [r3, #0]
    edea:	2b00      	cmp	r3, #0
    edec:	d10f      	bne.n	ee0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    edee:	230f      	movs	r3, #15
    edf0:	18fb      	adds	r3, r7, r3
    edf2:	781b      	ldrb	r3, [r3, #0]
    edf4:	009b      	lsls	r3, r3, #2
    edf6:	2210      	movs	r2, #16
    edf8:	4694      	mov	ip, r2
    edfa:	44bc      	add	ip, r7
    edfc:	4463      	add	r3, ip
    edfe:	3b08      	subs	r3, #8
    ee00:	681a      	ldr	r2, [r3, #0]
    ee02:	230e      	movs	r3, #14
    ee04:	18fb      	adds	r3, r7, r3
    ee06:	781b      	ldrb	r3, [r3, #0]
    ee08:	01db      	lsls	r3, r3, #7
    ee0a:	18d3      	adds	r3, r2, r3
    ee0c:	e000      	b.n	ee10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    ee0e:	2300      	movs	r3, #0
}
    ee10:	0018      	movs	r0, r3
    ee12:	46bd      	mov	sp, r7
    ee14:	b004      	add	sp, #16
    ee16:	bd80      	pop	{r7, pc}
    ee18:	41004400 	.word	0x41004400

0000ee1c <port_get_group_from_gpio_pin>:
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	b082      	sub	sp, #8
    ee20:	af00      	add	r7, sp, #0
    ee22:	0002      	movs	r2, r0
    ee24:	1dfb      	adds	r3, r7, #7
    ee26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ee28:	1dfb      	adds	r3, r7, #7
    ee2a:	781b      	ldrb	r3, [r3, #0]
    ee2c:	0018      	movs	r0, r3
    ee2e:	4b04      	ldr	r3, [pc, #16]	; (ee40 <port_get_group_from_gpio_pin+0x24>)
    ee30:	447b      	add	r3, pc
    ee32:	4798      	blx	r3
    ee34:	0003      	movs	r3, r0
}
    ee36:	0018      	movs	r0, r3
    ee38:	46bd      	mov	sp, r7
    ee3a:	b002      	add	sp, #8
    ee3c:	bd80      	pop	{r7, pc}
    ee3e:	46c0      	nop			; (mov r8, r8)
    ee40:	ffffff89 	.word	0xffffff89

0000ee44 <port_get_config_defaults>:
{
    ee44:	b580      	push	{r7, lr}
    ee46:	b082      	sub	sp, #8
    ee48:	af00      	add	r7, sp, #0
    ee4a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    ee4c:	687b      	ldr	r3, [r7, #4]
    ee4e:	2200      	movs	r2, #0
    ee50:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ee52:	687b      	ldr	r3, [r7, #4]
    ee54:	2201      	movs	r2, #1
    ee56:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    ee58:	687b      	ldr	r3, [r7, #4]
    ee5a:	2200      	movs	r2, #0
    ee5c:	709a      	strb	r2, [r3, #2]
}
    ee5e:	46c0      	nop			; (mov r8, r8)
    ee60:	46bd      	mov	sp, r7
    ee62:	b002      	add	sp, #8
    ee64:	bd80      	pop	{r7, pc}
	...

0000ee68 <port_pin_set_output_level>:
{
    ee68:	b580      	push	{r7, lr}
    ee6a:	b084      	sub	sp, #16
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	0002      	movs	r2, r0
    ee70:	1dfb      	adds	r3, r7, #7
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	1dbb      	adds	r3, r7, #6
    ee76:	1c0a      	adds	r2, r1, #0
    ee78:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ee7a:	1dfb      	adds	r3, r7, #7
    ee7c:	781b      	ldrb	r3, [r3, #0]
    ee7e:	0018      	movs	r0, r3
    ee80:	4b0d      	ldr	r3, [pc, #52]	; (eeb8 <port_pin_set_output_level+0x50>)
    ee82:	447b      	add	r3, pc
    ee84:	4798      	blx	r3
    ee86:	0003      	movs	r3, r0
    ee88:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ee8a:	1dfb      	adds	r3, r7, #7
    ee8c:	781b      	ldrb	r3, [r3, #0]
    ee8e:	221f      	movs	r2, #31
    ee90:	4013      	ands	r3, r2
    ee92:	2201      	movs	r2, #1
    ee94:	409a      	lsls	r2, r3
    ee96:	0013      	movs	r3, r2
    ee98:	60bb      	str	r3, [r7, #8]
	if (level) {
    ee9a:	1dbb      	adds	r3, r7, #6
    ee9c:	781b      	ldrb	r3, [r3, #0]
    ee9e:	2b00      	cmp	r3, #0
    eea0:	d003      	beq.n	eeaa <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    eea2:	68fb      	ldr	r3, [r7, #12]
    eea4:	68ba      	ldr	r2, [r7, #8]
    eea6:	619a      	str	r2, [r3, #24]
}
    eea8:	e002      	b.n	eeb0 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    eeaa:	68fb      	ldr	r3, [r7, #12]
    eeac:	68ba      	ldr	r2, [r7, #8]
    eeae:	615a      	str	r2, [r3, #20]
}
    eeb0:	46c0      	nop			; (mov r8, r8)
    eeb2:	46bd      	mov	sp, r7
    eeb4:	b004      	add	sp, #16
    eeb6:	bd80      	pop	{r7, pc}
    eeb8:	ffffff97 	.word	0xffffff97

0000eebc <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    eebc:	b590      	push	{r4, r7, lr}
    eebe:	b083      	sub	sp, #12
    eec0:	af00      	add	r7, sp, #0
    eec2:	4ca5      	ldr	r4, [pc, #660]	; (f158 <system_board_init+0x29c>)
    eec4:	447c      	add	r4, pc
	// Initialize all IO's to turn everything off and low-power
	struct port_config config;
	port_get_config_defaults(&config);
    eec6:	1d3b      	adds	r3, r7, #4
    eec8:	0018      	movs	r0, r3
    eeca:	4ba4      	ldr	r3, [pc, #656]	; (f15c <system_board_init+0x2a0>)
    eecc:	447b      	add	r3, pc
    eece:	4798      	blx	r3

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    eed0:	1d3b      	adds	r3, r7, #4
    eed2:	2200      	movs	r2, #0
    eed4:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    eed6:	1d3b      	adds	r3, r7, #4
    eed8:	2201      	movs	r2, #1
    eeda:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    eedc:	1d3b      	adds	r3, r7, #4
    eede:	2200      	movs	r2, #0
    eee0:	709a      	strb	r2, [r3, #2]
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    eee2:	1d3b      	adds	r3, r7, #4
    eee4:	0019      	movs	r1, r3
    eee6:	2013      	movs	r0, #19
    eee8:	4b9d      	ldr	r3, [pc, #628]	; (f160 <system_board_init+0x2a4>)
    eeea:	58e3      	ldr	r3, [r4, r3]
    eeec:	4798      	blx	r3
    eeee:	1d3b      	adds	r3, r7, #4
    eef0:	0019      	movs	r1, r3
    eef2:	2010      	movs	r0, #16
    eef4:	4b9a      	ldr	r3, [pc, #616]	; (f160 <system_board_init+0x2a4>)
    eef6:	58e3      	ldr	r3, [r4, r3]
    eef8:	4798      	blx	r3
    eefa:	1d3b      	adds	r3, r7, #4
    eefc:	0019      	movs	r1, r3
    eefe:	2011      	movs	r0, #17
    ef00:	4b97      	ldr	r3, [pc, #604]	; (f160 <system_board_init+0x2a4>)
    ef02:	58e3      	ldr	r3, [r4, r3]
    ef04:	4798      	blx	r3
    ef06:	1d3b      	adds	r3, r7, #4
    ef08:	0019      	movs	r1, r3
    ef0a:	2012      	movs	r0, #18
    ef0c:	4b94      	ldr	r3, [pc, #592]	; (f160 <system_board_init+0x2a4>)
    ef0e:	58e3      	ldr	r3, [r4, r3]
    ef10:	4798      	blx	r3
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    ef12:	1d3b      	adds	r3, r7, #4
    ef14:	2200      	movs	r2, #0
    ef16:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    ef18:	1d3b      	adds	r3, r7, #4
    ef1a:	2200      	movs	r2, #0
    ef1c:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    ef1e:	1d3b      	adds	r3, r7, #4
    ef20:	2201      	movs	r2, #1
    ef22:	709a      	strb	r2, [r3, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    ef24:	1d3b      	adds	r3, r7, #4
    ef26:	0019      	movs	r1, r3
    ef28:	2014      	movs	r0, #20
    ef2a:	4b8d      	ldr	r3, [pc, #564]	; (f160 <system_board_init+0x2a4>)
    ef2c:	58e3      	ldr	r3, [r4, r3]
    ef2e:	4798      	blx	r3
    ef30:	1d3b      	adds	r3, r7, #4
    ef32:	0019      	movs	r1, r3
    ef34:	2015      	movs	r0, #21
    ef36:	4b8a      	ldr	r3, [pc, #552]	; (f160 <system_board_init+0x2a4>)
    ef38:	58e3      	ldr	r3, [r4, r3]
    ef3a:	4798      	blx	r3

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    ef3c:	1d3b      	adds	r3, r7, #4
    ef3e:	2200      	movs	r2, #0
    ef40:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    ef42:	1d3b      	adds	r3, r7, #4
    ef44:	2201      	movs	r2, #1
    ef46:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    ef48:	1d3b      	adds	r3, r7, #4
    ef4a:	2201      	movs	r2, #1
    ef4c:	709a      	strb	r2, [r3, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    ef4e:	1d3b      	adds	r3, r7, #4
    ef50:	0019      	movs	r1, r3
    ef52:	2018      	movs	r0, #24
    ef54:	4b82      	ldr	r3, [pc, #520]	; (f160 <system_board_init+0x2a4>)
    ef56:	58e3      	ldr	r3, [r4, r3]
    ef58:	4798      	blx	r3
    ef5a:	1d3b      	adds	r3, r7, #4
    ef5c:	0019      	movs	r1, r3
    ef5e:	2019      	movs	r0, #25
    ef60:	4b7f      	ldr	r3, [pc, #508]	; (f160 <system_board_init+0x2a4>)
    ef62:	58e3      	ldr	r3, [r4, r3]
    ef64:	4798      	blx	r3

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    ef66:	1d3b      	adds	r3, r7, #4
    ef68:	2200      	movs	r2, #0
    ef6a:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    ef6c:	1d3b      	adds	r3, r7, #4
    ef6e:	2202      	movs	r2, #2
    ef70:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    ef72:	1d3b      	adds	r3, r7, #4
    ef74:	2201      	movs	r2, #1
    ef76:	709a      	strb	r2, [r3, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    ef78:	1d3b      	adds	r3, r7, #4
    ef7a:	0019      	movs	r1, r3
    ef7c:	2036      	movs	r0, #54	; 0x36
    ef7e:	4b78      	ldr	r3, [pc, #480]	; (f160 <system_board_init+0x2a4>)
    ef80:	58e3      	ldr	r3, [r4, r3]
    ef82:	4798      	blx	r3
    ef84:	1d3b      	adds	r3, r7, #4
    ef86:	0019      	movs	r1, r3
    ef88:	2022      	movs	r0, #34	; 0x22
    ef8a:	4b75      	ldr	r3, [pc, #468]	; (f160 <system_board_init+0x2a4>)
    ef8c:	58e3      	ldr	r3, [r4, r3]
    ef8e:	4798      	blx	r3
    ef90:	1d3b      	adds	r3, r7, #4
    ef92:	0019      	movs	r1, r3
    ef94:	2037      	movs	r0, #55	; 0x37
    ef96:	4b72      	ldr	r3, [pc, #456]	; (f160 <system_board_init+0x2a4>)
    ef98:	58e3      	ldr	r3, [r4, r3]
    ef9a:	4798      	blx	r3
    ef9c:	1d3b      	adds	r3, r7, #4
    ef9e:	0019      	movs	r1, r3
    efa0:	2023      	movs	r0, #35	; 0x23
    efa2:	4b6f      	ldr	r3, [pc, #444]	; (f160 <system_board_init+0x2a4>)
    efa4:	58e3      	ldr	r3, [r4, r3]
    efa6:	4798      	blx	r3
    efa8:	1d3b      	adds	r3, r7, #4
    efaa:	0019      	movs	r1, r3
    efac:	202a      	movs	r0, #42	; 0x2a
    efae:	4b6c      	ldr	r3, [pc, #432]	; (f160 <system_board_init+0x2a4>)
    efb0:	58e3      	ldr	r3, [r4, r3]
    efb2:	4798      	blx	r3

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    efb4:	1d3b      	adds	r3, r7, #4
    efb6:	2200      	movs	r2, #0
    efb8:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    efba:	1d3b      	adds	r3, r7, #4
    efbc:	2201      	movs	r2, #1
    efbe:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    efc0:	1d3b      	adds	r3, r7, #4
    efc2:	2200      	movs	r2, #0
    efc4:	709a      	strb	r2, [r3, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    efc6:	1d3b      	adds	r3, r7, #4
    efc8:	0019      	movs	r1, r3
    efca:	2003      	movs	r0, #3
    efcc:	4b64      	ldr	r3, [pc, #400]	; (f160 <system_board_init+0x2a4>)
    efce:	58e3      	ldr	r3, [r4, r3]
    efd0:	4798      	blx	r3
    efd2:	1d3b      	adds	r3, r7, #4
    efd4:	0019      	movs	r1, r3
    efd6:	201f      	movs	r0, #31
    efd8:	4b61      	ldr	r3, [pc, #388]	; (f160 <system_board_init+0x2a4>)
    efda:	58e3      	ldr	r3, [r4, r3]
    efdc:	4798      	blx	r3

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    efde:	1d3b      	adds	r3, r7, #4
    efe0:	2200      	movs	r2, #0
    efe2:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    efe4:	1d3b      	adds	r3, r7, #4
    efe6:	2200      	movs	r2, #0
    efe8:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    efea:	1d3b      	adds	r3, r7, #4
    efec:	2201      	movs	r2, #1
    efee:	709a      	strb	r2, [r3, #2]
	CFG(BATSENSE_ADC_PIN);
    eff0:	1d3b      	adds	r3, r7, #4
    eff2:	0019      	movs	r1, r3
    eff4:	2002      	movs	r0, #2
    eff6:	4b5a      	ldr	r3, [pc, #360]	; (f160 <system_board_init+0x2a4>)
    eff8:	58e3      	ldr	r3, [r4, r3]
    effa:	4798      	blx	r3

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    effc:	1d3b      	adds	r3, r7, #4
    effe:	2200      	movs	r2, #0
    f000:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    f002:	1d3b      	adds	r3, r7, #4
    f004:	2200      	movs	r2, #0
    f006:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f008:	1d3b      	adds	r3, r7, #4
    f00a:	2201      	movs	r2, #1
    f00c:	709a      	strb	r2, [r3, #2]
	CFG(LED_OUT_PIN);
    f00e:	1d3b      	adds	r3, r7, #4
    f010:	0019      	movs	r1, r3
    f012:	202b      	movs	r0, #43	; 0x2b
    f014:	4b52      	ldr	r3, [pc, #328]	; (f160 <system_board_init+0x2a4>)
    f016:	58e3      	ldr	r3, [r4, r3]
    f018:	4798      	blx	r3
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    f01a:	1d3b      	adds	r3, r7, #4
    f01c:	2200      	movs	r2, #0
    f01e:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f020:	1d3b      	adds	r3, r7, #4
    f022:	2202      	movs	r2, #2
    f024:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f026:	1d3b      	adds	r3, r7, #4
    f028:	2201      	movs	r2, #1
    f02a:	709a      	strb	r2, [r3, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    f02c:	1d3b      	adds	r3, r7, #4
    f02e:	0019      	movs	r1, r3
    f030:	2004      	movs	r0, #4
    f032:	4b4b      	ldr	r3, [pc, #300]	; (f160 <system_board_init+0x2a4>)
    f034:	58e3      	ldr	r3, [r4, r3]
    f036:	4798      	blx	r3
    f038:	1d3b      	adds	r3, r7, #4
    f03a:	0019      	movs	r1, r3
    f03c:	2005      	movs	r0, #5
    f03e:	4b48      	ldr	r3, [pc, #288]	; (f160 <system_board_init+0x2a4>)
    f040:	58e3      	ldr	r3, [r4, r3]
    f042:	4798      	blx	r3
    f044:	1d3b      	adds	r3, r7, #4
    f046:	0019      	movs	r1, r3
    f048:	2006      	movs	r0, #6
    f04a:	4b45      	ldr	r3, [pc, #276]	; (f160 <system_board_init+0x2a4>)
    f04c:	58e3      	ldr	r3, [r4, r3]
    f04e:	4798      	blx	r3
    f050:	1d3b      	adds	r3, r7, #4
    f052:	0019      	movs	r1, r3
    f054:	2007      	movs	r0, #7
    f056:	4b42      	ldr	r3, [pc, #264]	; (f160 <system_board_init+0x2a4>)
    f058:	58e3      	ldr	r3, [r4, r3]
    f05a:	4798      	blx	r3
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    f05c:	1d3b      	adds	r3, r7, #4
    f05e:	0019      	movs	r1, r3
    f060:	2008      	movs	r0, #8
    f062:	4b3f      	ldr	r3, [pc, #252]	; (f160 <system_board_init+0x2a4>)
    f064:	58e3      	ldr	r3, [r4, r3]
    f066:	4798      	blx	r3
    f068:	1d3b      	adds	r3, r7, #4
    f06a:	0019      	movs	r1, r3
    f06c:	2009      	movs	r0, #9
    f06e:	4b3c      	ldr	r3, [pc, #240]	; (f160 <system_board_init+0x2a4>)
    f070:	58e3      	ldr	r3, [r4, r3]
    f072:	4798      	blx	r3
    f074:	1d3b      	adds	r3, r7, #4
    f076:	0019      	movs	r1, r3
    f078:	200a      	movs	r0, #10
    f07a:	4b39      	ldr	r3, [pc, #228]	; (f160 <system_board_init+0x2a4>)
    f07c:	58e3      	ldr	r3, [r4, r3]
    f07e:	4798      	blx	r3
    f080:	1d3b      	adds	r3, r7, #4
    f082:	0019      	movs	r1, r3
    f084:	200b      	movs	r0, #11
    f086:	4b36      	ldr	r3, [pc, #216]	; (f160 <system_board_init+0x2a4>)
    f088:	58e3      	ldr	r3, [r4, r3]
    f08a:	4798      	blx	r3
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
    f08c:	1d3b      	adds	r3, r7, #4
    f08e:	2200      	movs	r2, #0
    f090:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f092:	1d3b      	adds	r3, r7, #4
    f094:	2202      	movs	r2, #2
    f096:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f098:	1d3b      	adds	r3, r7, #4
    f09a:	2201      	movs	r2, #1
    f09c:	709a      	strb	r2, [r3, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    f09e:	1d3b      	adds	r3, r7, #4
    f0a0:	0019      	movs	r1, r3
    f0a2:	2017      	movs	r0, #23
    f0a4:	4b2e      	ldr	r3, [pc, #184]	; (f160 <system_board_init+0x2a4>)
    f0a6:	58e3      	ldr	r3, [r4, r3]
    f0a8:	4798      	blx	r3

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
    f0aa:	1d3b      	adds	r3, r7, #4
    f0ac:	2200      	movs	r2, #0
    f0ae:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    f0b0:	1d3b      	adds	r3, r7, #4
    f0b2:	2202      	movs	r2, #2
    f0b4:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    f0b6:	1d3b      	adds	r3, r7, #4
    f0b8:	2201      	movs	r2, #1
    f0ba:	709a      	strb	r2, [r3, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    f0bc:	1d3b      	adds	r3, r7, #4
    f0be:	0019      	movs	r1, r3
    f0c0:	200e      	movs	r0, #14
    f0c2:	4b27      	ldr	r3, [pc, #156]	; (f160 <system_board_init+0x2a4>)
    f0c4:	58e3      	ldr	r3, [r4, r3]
    f0c6:	4798      	blx	r3
    f0c8:	1d3b      	adds	r3, r7, #4
    f0ca:	0019      	movs	r1, r3
    f0cc:	200f      	movs	r0, #15
    f0ce:	4b24      	ldr	r3, [pc, #144]	; (f160 <system_board_init+0x2a4>)
    f0d0:	58e3      	ldr	r3, [r4, r3]
    f0d2:	4798      	blx	r3
    f0d4:	1d3b      	adds	r3, r7, #4
    f0d6:	0019      	movs	r1, r3
    f0d8:	200c      	movs	r0, #12
    f0da:	4b21      	ldr	r3, [pc, #132]	; (f160 <system_board_init+0x2a4>)
    f0dc:	58e3      	ldr	r3, [r4, r3]
    f0de:	4798      	blx	r3
    f0e0:	1d3b      	adds	r3, r7, #4
    f0e2:	0019      	movs	r1, r3
    f0e4:	200d      	movs	r0, #13
    f0e6:	4b1e      	ldr	r3, [pc, #120]	; (f160 <system_board_init+0x2a4>)
    f0e8:	58e3      	ldr	r3, [r4, r3]
    f0ea:	4798      	blx	r3
    f0ec:	1d3b      	adds	r3, r7, #4
    f0ee:	0019      	movs	r1, r3
    f0f0:	2029      	movs	r0, #41	; 0x29
    f0f2:	4b1b      	ldr	r3, [pc, #108]	; (f160 <system_board_init+0x2a4>)
    f0f4:	58e3      	ldr	r3, [r4, r3]
    f0f6:	4798      	blx	r3
    f0f8:	1d3b      	adds	r3, r7, #4
    f0fa:	0019      	movs	r1, r3
    f0fc:	2016      	movs	r0, #22
    f0fe:	4b18      	ldr	r3, [pc, #96]	; (f160 <system_board_init+0x2a4>)
    f100:	58e3      	ldr	r3, [r4, r3]
    f102:	4798      	blx	r3
    f104:	1d3b      	adds	r3, r7, #4
    f106:	0019      	movs	r1, r3
    f108:	2028      	movs	r0, #40	; 0x28
    f10a:	4b15      	ldr	r3, [pc, #84]	; (f160 <system_board_init+0x2a4>)
    f10c:	58e3      	ldr	r3, [r4, r3]
    f10e:	4798      	blx	r3
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    f110:	1d3b      	adds	r3, r7, #4
    f112:	2201      	movs	r2, #1
    f114:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    f116:	1d3b      	adds	r3, r7, #4
    f118:	2200      	movs	r2, #0
    f11a:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    f11c:	1d3b      	adds	r3, r7, #4
    f11e:	2200      	movs	r2, #0
    f120:	709a      	strb	r2, [r3, #2]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
    f122:	2100      	movs	r1, #0
    f124:	201b      	movs	r0, #27
    f126:	4b0f      	ldr	r3, [pc, #60]	; (f164 <system_board_init+0x2a8>)
    f128:	447b      	add	r3, pc
    f12a:	4798      	blx	r3
    f12c:	2100      	movs	r1, #0
    f12e:	201c      	movs	r0, #28
    f130:	4b0d      	ldr	r3, [pc, #52]	; (f168 <system_board_init+0x2ac>)
    f132:	447b      	add	r3, pc
    f134:	4798      	blx	r3
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    f136:	1d3b      	adds	r3, r7, #4
    f138:	0019      	movs	r1, r3
    f13a:	201b      	movs	r0, #27
    f13c:	4b08      	ldr	r3, [pc, #32]	; (f160 <system_board_init+0x2a4>)
    f13e:	58e3      	ldr	r3, [r4, r3]
    f140:	4798      	blx	r3
    f142:	1d3b      	adds	r3, r7, #4
    f144:	0019      	movs	r1, r3
    f146:	201c      	movs	r0, #28
    f148:	4b05      	ldr	r3, [pc, #20]	; (f160 <system_board_init+0x2a4>)
    f14a:	58e3      	ldr	r3, [r4, r3]
    f14c:	4798      	blx	r3
	
    f14e:	46c0      	nop			; (mov r8, r8)
    f150:	46bd      	mov	sp, r7
    f152:	b003      	add	sp, #12
    f154:	bd90      	pop	{r4, r7, pc}
    f156:	46c0      	nop			; (mov r8, r8)
    f158:	00002f1c 	.word	0x00002f1c
    f15c:	ffffff75 	.word	0xffffff75
    f160:	00000240 	.word	0x00000240
    f164:	fffffd3d 	.word	0xfffffd3d
    f168:	fffffd33 	.word	0xfffffd33

0000f16c <cpu_irq_enter_critical>:
    f16c:	b580      	push	{r7, lr}
    f16e:	b082      	sub	sp, #8
    f170:	af00      	add	r7, sp, #0
    f172:	4a14      	ldr	r2, [pc, #80]	; (f1c4 <cpu_irq_enter_critical+0x58>)
    f174:	447a      	add	r2, pc
    f176:	4b14      	ldr	r3, [pc, #80]	; (f1c8 <cpu_irq_enter_critical+0x5c>)
    f178:	447b      	add	r3, pc
    f17a:	681b      	ldr	r3, [r3, #0]
    f17c:	2b00      	cmp	r3, #0
    f17e:	d115      	bne.n	f1ac <cpu_irq_enter_critical+0x40>
    f180:	f3ef 8310 	mrs	r3, PRIMASK
    f184:	607b      	str	r3, [r7, #4]
    f186:	687b      	ldr	r3, [r7, #4]
    f188:	2b00      	cmp	r3, #0
    f18a:	d10b      	bne.n	f1a4 <cpu_irq_enter_critical+0x38>
    f18c:	b672      	cpsid	i
    f18e:	f3bf 8f5f 	dmb	sy
    f192:	4b0e      	ldr	r3, [pc, #56]	; (f1cc <cpu_irq_enter_critical+0x60>)
    f194:	58d3      	ldr	r3, [r2, r3]
    f196:	2200      	movs	r2, #0
    f198:	701a      	strb	r2, [r3, #0]
    f19a:	4b0d      	ldr	r3, [pc, #52]	; (f1d0 <cpu_irq_enter_critical+0x64>)
    f19c:	447b      	add	r3, pc
    f19e:	2201      	movs	r2, #1
    f1a0:	701a      	strb	r2, [r3, #0]
    f1a2:	e003      	b.n	f1ac <cpu_irq_enter_critical+0x40>
    f1a4:	4b0b      	ldr	r3, [pc, #44]	; (f1d4 <cpu_irq_enter_critical+0x68>)
    f1a6:	447b      	add	r3, pc
    f1a8:	2200      	movs	r2, #0
    f1aa:	701a      	strb	r2, [r3, #0]
    f1ac:	4b0a      	ldr	r3, [pc, #40]	; (f1d8 <cpu_irq_enter_critical+0x6c>)
    f1ae:	447b      	add	r3, pc
    f1b0:	681b      	ldr	r3, [r3, #0]
    f1b2:	1c5a      	adds	r2, r3, #1
    f1b4:	4b09      	ldr	r3, [pc, #36]	; (f1dc <cpu_irq_enter_critical+0x70>)
    f1b6:	447b      	add	r3, pc
    f1b8:	601a      	str	r2, [r3, #0]
    f1ba:	46c0      	nop			; (mov r8, r8)
    f1bc:	46bd      	mov	sp, r7
    f1be:	b002      	add	sp, #8
    f1c0:	bd80      	pop	{r7, pc}
    f1c2:	46c0      	nop			; (mov r8, r8)
    f1c4:	00002c6c 	.word	0x00002c6c
    f1c8:	1fff14c4 	.word	0x1fff14c4
    f1cc:	000000ec 	.word	0x000000ec
    f1d0:	1fff14a4 	.word	0x1fff14a4
    f1d4:	1fff149a 	.word	0x1fff149a
    f1d8:	1fff148e 	.word	0x1fff148e
    f1dc:	1fff1486 	.word	0x1fff1486

0000f1e0 <cpu_irq_leave_critical>:
    f1e0:	b580      	push	{r7, lr}
    f1e2:	af00      	add	r7, sp, #0
    f1e4:	4a0e      	ldr	r2, [pc, #56]	; (f220 <cpu_irq_leave_critical+0x40>)
    f1e6:	447a      	add	r2, pc
    f1e8:	4b0e      	ldr	r3, [pc, #56]	; (f224 <cpu_irq_leave_critical+0x44>)
    f1ea:	447b      	add	r3, pc
    f1ec:	681b      	ldr	r3, [r3, #0]
    f1ee:	1e59      	subs	r1, r3, #1
    f1f0:	4b0d      	ldr	r3, [pc, #52]	; (f228 <cpu_irq_leave_critical+0x48>)
    f1f2:	447b      	add	r3, pc
    f1f4:	6019      	str	r1, [r3, #0]
    f1f6:	4b0d      	ldr	r3, [pc, #52]	; (f22c <cpu_irq_leave_critical+0x4c>)
    f1f8:	447b      	add	r3, pc
    f1fa:	681b      	ldr	r3, [r3, #0]
    f1fc:	2b00      	cmp	r3, #0
    f1fe:	d10c      	bne.n	f21a <cpu_irq_leave_critical+0x3a>
    f200:	4b0b      	ldr	r3, [pc, #44]	; (f230 <cpu_irq_leave_critical+0x50>)
    f202:	447b      	add	r3, pc
    f204:	781b      	ldrb	r3, [r3, #0]
    f206:	b2db      	uxtb	r3, r3
    f208:	2b00      	cmp	r3, #0
    f20a:	d006      	beq.n	f21a <cpu_irq_leave_critical+0x3a>
    f20c:	4b09      	ldr	r3, [pc, #36]	; (f234 <cpu_irq_leave_critical+0x54>)
    f20e:	58d3      	ldr	r3, [r2, r3]
    f210:	2201      	movs	r2, #1
    f212:	701a      	strb	r2, [r3, #0]
    f214:	f3bf 8f5f 	dmb	sy
    f218:	b662      	cpsie	i
    f21a:	46c0      	nop			; (mov r8, r8)
    f21c:	46bd      	mov	sp, r7
    f21e:	bd80      	pop	{r7, pc}
    f220:	00002bfa 	.word	0x00002bfa
    f224:	1fff1452 	.word	0x1fff1452
    f228:	1fff144a 	.word	0x1fff144a
    f22c:	1fff1444 	.word	0x1fff1444
    f230:	1fff143e 	.word	0x1fff143e
    f234:	000000ec 	.word	0x000000ec

0000f238 <system_gclk_gen_get_config_defaults>:
{
    f238:	b580      	push	{r7, lr}
    f23a:	b082      	sub	sp, #8
    f23c:	af00      	add	r7, sp, #0
    f23e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    f240:	687b      	ldr	r3, [r7, #4]
    f242:	2201      	movs	r2, #1
    f244:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    f246:	687b      	ldr	r3, [r7, #4]
    f248:	2200      	movs	r2, #0
    f24a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    f24c:	687b      	ldr	r3, [r7, #4]
    f24e:	2206      	movs	r2, #6
    f250:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    f252:	687b      	ldr	r3, [r7, #4]
    f254:	2200      	movs	r2, #0
    f256:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    f258:	687b      	ldr	r3, [r7, #4]
    f25a:	2200      	movs	r2, #0
    f25c:	725a      	strb	r2, [r3, #9]
}
    f25e:	46c0      	nop			; (mov r8, r8)
    f260:	46bd      	mov	sp, r7
    f262:	b002      	add	sp, #8
    f264:	bd80      	pop	{r7, pc}

0000f266 <system_gclk_chan_get_config_defaults>:
{
    f266:	b580      	push	{r7, lr}
    f268:	b082      	sub	sp, #8
    f26a:	af00      	add	r7, sp, #0
    f26c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    f26e:	687b      	ldr	r3, [r7, #4]
    f270:	2200      	movs	r2, #0
    f272:	701a      	strb	r2, [r3, #0]
}
    f274:	46c0      	nop			; (mov r8, r8)
    f276:	46bd      	mov	sp, r7
    f278:	b002      	add	sp, #8
    f27a:	bd80      	pop	{r7, pc}

0000f27c <system_clock_source_xosc32k_get_config_defaults>:
{
    f27c:	b580      	push	{r7, lr}
    f27e:	b082      	sub	sp, #8
    f280:	af00      	add	r7, sp, #0
    f282:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    f284:	687b      	ldr	r3, [r7, #4]
    f286:	2200      	movs	r2, #0
    f288:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	2204      	movs	r2, #4
    f28e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    f290:	687b      	ldr	r3, [r7, #4]
    f292:	2200      	movs	r2, #0
    f294:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	2280      	movs	r2, #128	; 0x80
    f29a:	0212      	lsls	r2, r2, #8
    f29c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    f29e:	687b      	ldr	r3, [r7, #4]
    f2a0:	2200      	movs	r2, #0
    f2a2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    f2a4:	687b      	ldr	r3, [r7, #4]
    f2a6:	2201      	movs	r2, #1
    f2a8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    f2aa:	687b      	ldr	r3, [r7, #4]
    f2ac:	2200      	movs	r2, #0
    f2ae:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    f2b0:	687b      	ldr	r3, [r7, #4]
    f2b2:	2201      	movs	r2, #1
    f2b4:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    f2b6:	687b      	ldr	r3, [r7, #4]
    f2b8:	2200      	movs	r2, #0
    f2ba:	739a      	strb	r2, [r3, #14]
}
    f2bc:	46c0      	nop			; (mov r8, r8)
    f2be:	46bd      	mov	sp, r7
    f2c0:	b002      	add	sp, #8
    f2c2:	bd80      	pop	{r7, pc}

0000f2c4 <system_clock_source_osc8m_get_config_defaults>:
{
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b082      	sub	sp, #8
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    f2cc:	687b      	ldr	r3, [r7, #4]
    f2ce:	2203      	movs	r2, #3
    f2d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    f2d2:	687b      	ldr	r3, [r7, #4]
    f2d4:	2200      	movs	r2, #0
    f2d6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    f2d8:	687b      	ldr	r3, [r7, #4]
    f2da:	2201      	movs	r2, #1
    f2dc:	709a      	strb	r2, [r3, #2]
}
    f2de:	46c0      	nop			; (mov r8, r8)
    f2e0:	46bd      	mov	sp, r7
    f2e2:	b002      	add	sp, #8
    f2e4:	bd80      	pop	{r7, pc}

0000f2e6 <system_clock_source_dfll_get_config_defaults>:
{
    f2e6:	b580      	push	{r7, lr}
    f2e8:	b082      	sub	sp, #8
    f2ea:	af00      	add	r7, sp, #0
    f2ec:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    f2ee:	687b      	ldr	r3, [r7, #4]
    f2f0:	2200      	movs	r2, #0
    f2f2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f2f4:	687b      	ldr	r3, [r7, #4]
    f2f6:	2200      	movs	r2, #0
    f2f8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    f2fa:	687b      	ldr	r3, [r7, #4]
    f2fc:	2200      	movs	r2, #0
    f2fe:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	2200      	movs	r2, #0
    f304:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f306:	687b      	ldr	r3, [r7, #4]
    f308:	2200      	movs	r2, #0
    f30a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    f30c:	687b      	ldr	r3, [r7, #4]
    f30e:	2201      	movs	r2, #1
    f310:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    f312:	687b      	ldr	r3, [r7, #4]
    f314:	2207      	movs	r2, #7
    f316:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    f318:	687b      	ldr	r3, [r7, #4]
    f31a:	223f      	movs	r2, #63	; 0x3f
    f31c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    f31e:	687b      	ldr	r3, [r7, #4]
    f320:	2201      	movs	r2, #1
    f322:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    f324:	687b      	ldr	r3, [r7, #4]
    f326:	2201      	movs	r2, #1
    f328:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    f32a:	687b      	ldr	r3, [r7, #4]
    f32c:	2206      	movs	r2, #6
    f32e:	821a      	strh	r2, [r3, #16]
}
    f330:	46c0      	nop			; (mov r8, r8)
    f332:	46bd      	mov	sp, r7
    f334:	b002      	add	sp, #8
    f336:	bd80      	pop	{r7, pc}

0000f338 <system_cpu_clock_set_divider>:
{
    f338:	b580      	push	{r7, lr}
    f33a:	b082      	sub	sp, #8
    f33c:	af00      	add	r7, sp, #0
    f33e:	0002      	movs	r2, r0
    f340:	1dfb      	adds	r3, r7, #7
    f342:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    f344:	4a03      	ldr	r2, [pc, #12]	; (f354 <system_cpu_clock_set_divider+0x1c>)
    f346:	1dfb      	adds	r3, r7, #7
    f348:	781b      	ldrb	r3, [r3, #0]
    f34a:	7213      	strb	r3, [r2, #8]
}
    f34c:	46c0      	nop			; (mov r8, r8)
    f34e:	46bd      	mov	sp, r7
    f350:	b002      	add	sp, #8
    f352:	bd80      	pop	{r7, pc}
    f354:	40000400 	.word	0x40000400

0000f358 <system_apb_clock_set_divider>:
{
    f358:	b580      	push	{r7, lr}
    f35a:	b082      	sub	sp, #8
    f35c:	af00      	add	r7, sp, #0
    f35e:	0002      	movs	r2, r0
    f360:	1dfb      	adds	r3, r7, #7
    f362:	701a      	strb	r2, [r3, #0]
    f364:	1dbb      	adds	r3, r7, #6
    f366:	1c0a      	adds	r2, r1, #0
    f368:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    f36a:	1dfb      	adds	r3, r7, #7
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	2b01      	cmp	r3, #1
    f370:	d008      	beq.n	f384 <system_apb_clock_set_divider+0x2c>
    f372:	2b02      	cmp	r3, #2
    f374:	d00b      	beq.n	f38e <system_apb_clock_set_divider+0x36>
    f376:	2b00      	cmp	r3, #0
    f378:	d10e      	bne.n	f398 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    f37a:	4a0b      	ldr	r2, [pc, #44]	; (f3a8 <system_apb_clock_set_divider+0x50>)
    f37c:	1dbb      	adds	r3, r7, #6
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	7253      	strb	r3, [r2, #9]
			break;
    f382:	e00b      	b.n	f39c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    f384:	4a08      	ldr	r2, [pc, #32]	; (f3a8 <system_apb_clock_set_divider+0x50>)
    f386:	1dbb      	adds	r3, r7, #6
    f388:	781b      	ldrb	r3, [r3, #0]
    f38a:	7293      	strb	r3, [r2, #10]
			break;
    f38c:	e006      	b.n	f39c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    f38e:	4a06      	ldr	r2, [pc, #24]	; (f3a8 <system_apb_clock_set_divider+0x50>)
    f390:	1dbb      	adds	r3, r7, #6
    f392:	781b      	ldrb	r3, [r3, #0]
    f394:	72d3      	strb	r3, [r2, #11]
			break;
    f396:	e001      	b.n	f39c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    f398:	2317      	movs	r3, #23
    f39a:	e000      	b.n	f39e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    f39c:	2300      	movs	r3, #0
}
    f39e:	0018      	movs	r0, r3
    f3a0:	46bd      	mov	sp, r7
    f3a2:	b002      	add	sp, #8
    f3a4:	bd80      	pop	{r7, pc}
    f3a6:	46c0      	nop			; (mov r8, r8)
    f3a8:	40000400 	.word	0x40000400

0000f3ac <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    f3ac:	b580      	push	{r7, lr}
    f3ae:	b082      	sub	sp, #8
    f3b0:	af00      	add	r7, sp, #0
    f3b2:	0002      	movs	r2, r0
    f3b4:	1dfb      	adds	r3, r7, #7
    f3b6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    f3b8:	4a08      	ldr	r2, [pc, #32]	; (f3dc <system_flash_set_waitstates+0x30>)
    f3ba:	1dfb      	adds	r3, r7, #7
    f3bc:	781b      	ldrb	r3, [r3, #0]
    f3be:	210f      	movs	r1, #15
    f3c0:	400b      	ands	r3, r1
    f3c2:	b2d9      	uxtb	r1, r3
    f3c4:	6853      	ldr	r3, [r2, #4]
    f3c6:	200f      	movs	r0, #15
    f3c8:	4001      	ands	r1, r0
    f3ca:	0049      	lsls	r1, r1, #1
    f3cc:	201e      	movs	r0, #30
    f3ce:	4383      	bics	r3, r0
    f3d0:	430b      	orrs	r3, r1
    f3d2:	6053      	str	r3, [r2, #4]
}
    f3d4:	46c0      	nop			; (mov r8, r8)
    f3d6:	46bd      	mov	sp, r7
    f3d8:	b002      	add	sp, #8
    f3da:	bd80      	pop	{r7, pc}
    f3dc:	41004000 	.word	0x41004000

0000f3e0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    f3e0:	b580      	push	{r7, lr}
    f3e2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    f3e4:	46c0      	nop			; (mov r8, r8)
    f3e6:	4b04      	ldr	r3, [pc, #16]	; (f3f8 <_system_dfll_wait_for_sync+0x18>)
    f3e8:	68db      	ldr	r3, [r3, #12]
    f3ea:	2210      	movs	r2, #16
    f3ec:	4013      	ands	r3, r2
    f3ee:	d0fa      	beq.n	f3e6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    f3f0:	46c0      	nop			; (mov r8, r8)
    f3f2:	46bd      	mov	sp, r7
    f3f4:	bd80      	pop	{r7, pc}
    f3f6:	46c0      	nop			; (mov r8, r8)
    f3f8:	40000800 	.word	0x40000800

0000f3fc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    f3fc:	b580      	push	{r7, lr}
    f3fe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    f400:	4b0f      	ldr	r3, [pc, #60]	; (f440 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f402:	2202      	movs	r2, #2
    f404:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    f406:	4b0f      	ldr	r3, [pc, #60]	; (f444 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    f408:	447b      	add	r3, pc
    f40a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    f40c:	4a0c      	ldr	r2, [pc, #48]	; (f440 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f40e:	4b0e      	ldr	r3, [pc, #56]	; (f448 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    f410:	447b      	add	r3, pc
    f412:	689b      	ldr	r3, [r3, #8]
    f414:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    f416:	4a0a      	ldr	r2, [pc, #40]	; (f440 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f418:	4b0c      	ldr	r3, [pc, #48]	; (f44c <_system_clock_source_dfll_set_config_errata_9905+0x50>)
    f41a:	447b      	add	r3, pc
    f41c:	685b      	ldr	r3, [r3, #4]
    f41e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    f420:	4b07      	ldr	r3, [pc, #28]	; (f440 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f422:	2200      	movs	r2, #0
    f424:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    f426:	4b0a      	ldr	r3, [pc, #40]	; (f450 <_system_clock_source_dfll_set_config_errata_9905+0x54>)
    f428:	447b      	add	r3, pc
    f42a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    f42c:	4a04      	ldr	r2, [pc, #16]	; (f440 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    f42e:	4b09      	ldr	r3, [pc, #36]	; (f454 <_system_clock_source_dfll_set_config_errata_9905+0x58>)
    f430:	447b      	add	r3, pc
    f432:	681b      	ldr	r3, [r3, #0]
    f434:	b29b      	uxth	r3, r3
    f436:	8493      	strh	r3, [r2, #36]	; 0x24
}
    f438:	46c0      	nop			; (mov r8, r8)
    f43a:	46bd      	mov	sp, r7
    f43c:	bd80      	pop	{r7, pc}
    f43e:	46c0      	nop			; (mov r8, r8)
    f440:	40000800 	.word	0x40000800
    f444:	ffffffd5 	.word	0xffffffd5
    f448:	1fff1234 	.word	0x1fff1234
    f44c:	1fff122a 	.word	0x1fff122a
    f450:	ffffffb5 	.word	0xffffffb5
    f454:	1fff1214 	.word	0x1fff1214

0000f458 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    f458:	b590      	push	{r4, r7, lr}
    f45a:	b083      	sub	sp, #12
    f45c:	af00      	add	r7, sp, #0
    f45e:	0002      	movs	r2, r0
    f460:	1dfb      	adds	r3, r7, #7
    f462:	701a      	strb	r2, [r3, #0]
    f464:	4c32      	ldr	r4, [pc, #200]	; (f530 <system_clock_source_get_hz+0xd8>)
    f466:	447c      	add	r4, pc
	switch (clock_source) {
    f468:	1dfb      	adds	r3, r7, #7
    f46a:	781b      	ldrb	r3, [r3, #0]
    f46c:	2b08      	cmp	r3, #8
    f46e:	d859      	bhi.n	f524 <system_clock_source_get_hz+0xcc>
    f470:	0018      	movs	r0, r3
    f472:	f001 f90d 	bl	10690 <__gnu_thumb1_case_si>
    f476:	46c0      	nop			; (mov r8, r8)
    f478:	00000024 	.word	0x00000024
    f47c:	000000ac 	.word	0x000000ac
    f480:	000000ac 	.word	0x000000ac
    f484:	00000044 	.word	0x00000044
    f488:	0000003e 	.word	0x0000003e
    f48c:	0000004a 	.word	0x0000004a
    f490:	0000002c 	.word	0x0000002c
    f494:	00000052 	.word	0x00000052
    f498:	00000090 	.word	0x00000090
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    f49c:	4b25      	ldr	r3, [pc, #148]	; (f534 <system_clock_source_get_hz+0xdc>)
    f49e:	447b      	add	r3, pc
    f4a0:	691b      	ldr	r3, [r3, #16]
    f4a2:	e040      	b.n	f526 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    f4a4:	4b24      	ldr	r3, [pc, #144]	; (f538 <system_clock_source_get_hz+0xe0>)
    f4a6:	6a1b      	ldr	r3, [r3, #32]
    f4a8:	059b      	lsls	r3, r3, #22
    f4aa:	0f9b      	lsrs	r3, r3, #30
    f4ac:	b2db      	uxtb	r3, r3
    f4ae:	001a      	movs	r2, r3
    f4b0:	4b22      	ldr	r3, [pc, #136]	; (f53c <system_clock_source_get_hz+0xe4>)
    f4b2:	40d3      	lsrs	r3, r2
    f4b4:	e037      	b.n	f526 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    f4b6:	2380      	movs	r3, #128	; 0x80
    f4b8:	021b      	lsls	r3, r3, #8
    f4ba:	e034      	b.n	f526 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    f4bc:	2380      	movs	r3, #128	; 0x80
    f4be:	021b      	lsls	r3, r3, #8
    f4c0:	e031      	b.n	f526 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    f4c2:	4b1f      	ldr	r3, [pc, #124]	; (f540 <system_clock_source_get_hz+0xe8>)
    f4c4:	447b      	add	r3, pc
    f4c6:	695b      	ldr	r3, [r3, #20]
    f4c8:	e02d      	b.n	f526 <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    f4ca:	4b1e      	ldr	r3, [pc, #120]	; (f544 <system_clock_source_get_hz+0xec>)
    f4cc:	447b      	add	r3, pc
    f4ce:	681b      	ldr	r3, [r3, #0]
    f4d0:	2202      	movs	r2, #2
    f4d2:	4013      	ands	r3, r2
    f4d4:	d101      	bne.n	f4da <system_clock_source_get_hz+0x82>
			return 0;
    f4d6:	2300      	movs	r3, #0
    f4d8:	e025      	b.n	f526 <system_clock_source_get_hz+0xce>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    f4da:	4b1b      	ldr	r3, [pc, #108]	; (f548 <system_clock_source_get_hz+0xf0>)
    f4dc:	447b      	add	r3, pc
    f4de:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    f4e0:	4b1a      	ldr	r3, [pc, #104]	; (f54c <system_clock_source_get_hz+0xf4>)
    f4e2:	447b      	add	r3, pc
    f4e4:	681b      	ldr	r3, [r3, #0]
    f4e6:	2204      	movs	r2, #4
    f4e8:	4013      	ands	r3, r2
    f4ea:	d00b      	beq.n	f504 <system_clock_source_get_hz+0xac>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f4ec:	2000      	movs	r0, #0
    f4ee:	4b18      	ldr	r3, [pc, #96]	; (f550 <system_clock_source_get_hz+0xf8>)
    f4f0:	58e3      	ldr	r3, [r4, r3]
    f4f2:	4798      	blx	r3
    f4f4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    f4f6:	4b17      	ldr	r3, [pc, #92]	; (f554 <system_clock_source_get_hz+0xfc>)
    f4f8:	447b      	add	r3, pc
    f4fa:	689b      	ldr	r3, [r3, #8]
    f4fc:	041b      	lsls	r3, r3, #16
    f4fe:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f500:	4353      	muls	r3, r2
    f502:	e010      	b.n	f526 <system_clock_source_get_hz+0xce>
		}

		return 48000000UL;
    f504:	4b14      	ldr	r3, [pc, #80]	; (f558 <system_clock_source_get_hz+0x100>)
    f506:	e00e      	b.n	f526 <system_clock_source_get_hz+0xce>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    f508:	4a0b      	ldr	r2, [pc, #44]	; (f538 <system_clock_source_get_hz+0xe0>)
    f50a:	2350      	movs	r3, #80	; 0x50
    f50c:	5cd3      	ldrb	r3, [r2, r3]
    f50e:	b2db      	uxtb	r3, r3
    f510:	001a      	movs	r2, r3
    f512:	2304      	movs	r3, #4
    f514:	4013      	ands	r3, r2
    f516:	d101      	bne.n	f51c <system_clock_source_get_hz+0xc4>
			return 0;
    f518:	2300      	movs	r3, #0
    f51a:	e004      	b.n	f526 <system_clock_source_get_hz+0xce>
		}

		return _system_clock_inst.dpll.frequency;
    f51c:	4b0f      	ldr	r3, [pc, #60]	; (f55c <system_clock_source_get_hz+0x104>)
    f51e:	447b      	add	r3, pc
    f520:	68db      	ldr	r3, [r3, #12]
    f522:	e000      	b.n	f526 <system_clock_source_get_hz+0xce>
#endif

	default:
		return 0;
    f524:	2300      	movs	r3, #0
	}
}
    f526:	0018      	movs	r0, r3
    f528:	46bd      	mov	sp, r7
    f52a:	b003      	add	sp, #12
    f52c:	bd90      	pop	{r4, r7, pc}
    f52e:	46c0      	nop			; (mov r8, r8)
    f530:	0000297a 	.word	0x0000297a
    f534:	1fff11a6 	.word	0x1fff11a6
    f538:	40000800 	.word	0x40000800
    f53c:	007a1200 	.word	0x007a1200
    f540:	1fff1180 	.word	0x1fff1180
    f544:	1fff1178 	.word	0x1fff1178
    f548:	ffffff01 	.word	0xffffff01
    f54c:	1fff1162 	.word	0x1fff1162
    f550:	000001a4 	.word	0x000001a4
    f554:	1fff114c 	.word	0x1fff114c
    f558:	02dc6c00 	.word	0x02dc6c00
    f55c:	1fff1126 	.word	0x1fff1126

0000f560 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    f560:	b580      	push	{r7, lr}
    f562:	b084      	sub	sp, #16
    f564:	af00      	add	r7, sp, #0
    f566:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    f568:	4b1a      	ldr	r3, [pc, #104]	; (f5d4 <system_clock_source_osc8m_set_config+0x74>)
    f56a:	6a1b      	ldr	r3, [r3, #32]
    f56c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    f56e:	687b      	ldr	r3, [r7, #4]
    f570:	781b      	ldrb	r3, [r3, #0]
    f572:	1c1a      	adds	r2, r3, #0
    f574:	2303      	movs	r3, #3
    f576:	4013      	ands	r3, r2
    f578:	b2da      	uxtb	r2, r3
    f57a:	230d      	movs	r3, #13
    f57c:	18fb      	adds	r3, r7, r3
    f57e:	2103      	movs	r1, #3
    f580:	400a      	ands	r2, r1
    f582:	0010      	movs	r0, r2
    f584:	781a      	ldrb	r2, [r3, #0]
    f586:	2103      	movs	r1, #3
    f588:	438a      	bics	r2, r1
    f58a:	1c11      	adds	r1, r2, #0
    f58c:	1c02      	adds	r2, r0, #0
    f58e:	430a      	orrs	r2, r1
    f590:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    f592:	687b      	ldr	r3, [r7, #4]
    f594:	789a      	ldrb	r2, [r3, #2]
    f596:	230c      	movs	r3, #12
    f598:	18fb      	adds	r3, r7, r3
    f59a:	01d0      	lsls	r0, r2, #7
    f59c:	781a      	ldrb	r2, [r3, #0]
    f59e:	217f      	movs	r1, #127	; 0x7f
    f5a0:	400a      	ands	r2, r1
    f5a2:	1c11      	adds	r1, r2, #0
    f5a4:	1c02      	adds	r2, r0, #0
    f5a6:	430a      	orrs	r2, r1
    f5a8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	785a      	ldrb	r2, [r3, #1]
    f5ae:	230c      	movs	r3, #12
    f5b0:	18fb      	adds	r3, r7, r3
    f5b2:	2101      	movs	r1, #1
    f5b4:	400a      	ands	r2, r1
    f5b6:	0190      	lsls	r0, r2, #6
    f5b8:	781a      	ldrb	r2, [r3, #0]
    f5ba:	2140      	movs	r1, #64	; 0x40
    f5bc:	438a      	bics	r2, r1
    f5be:	1c11      	adds	r1, r2, #0
    f5c0:	1c02      	adds	r2, r0, #0
    f5c2:	430a      	orrs	r2, r1
    f5c4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    f5c6:	4b03      	ldr	r3, [pc, #12]	; (f5d4 <system_clock_source_osc8m_set_config+0x74>)
    f5c8:	68fa      	ldr	r2, [r7, #12]
    f5ca:	621a      	str	r2, [r3, #32]
}
    f5cc:	46c0      	nop			; (mov r8, r8)
    f5ce:	46bd      	mov	sp, r7
    f5d0:	b004      	add	sp, #16
    f5d2:	bd80      	pop	{r7, pc}
    f5d4:	40000800 	.word	0x40000800

0000f5d8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    f5d8:	b580      	push	{r7, lr}
    f5da:	b084      	sub	sp, #16
    f5dc:	af00      	add	r7, sp, #0
    f5de:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    f5e0:	4a43      	ldr	r2, [pc, #268]	; (f6f0 <system_clock_source_xosc32k_set_config+0x118>)
    f5e2:	230c      	movs	r3, #12
    f5e4:	18fb      	adds	r3, r7, r3
    f5e6:	8a92      	ldrh	r2, [r2, #20]
    f5e8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    f5ea:	687b      	ldr	r3, [r7, #4]
    f5ec:	785b      	ldrb	r3, [r3, #1]
    f5ee:	1c1a      	adds	r2, r3, #0
    f5f0:	2307      	movs	r3, #7
    f5f2:	4013      	ands	r3, r2
    f5f4:	b2da      	uxtb	r2, r3
    f5f6:	230c      	movs	r3, #12
    f5f8:	18fb      	adds	r3, r7, r3
    f5fa:	2107      	movs	r1, #7
    f5fc:	400a      	ands	r2, r1
    f5fe:	0010      	movs	r0, r2
    f600:	785a      	ldrb	r2, [r3, #1]
    f602:	2107      	movs	r1, #7
    f604:	438a      	bics	r2, r1
    f606:	1c11      	adds	r1, r2, #0
    f608:	1c02      	adds	r2, r0, #0
    f60a:	430a      	orrs	r2, r1
    f60c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	781b      	ldrb	r3, [r3, #0]
    f612:	2b00      	cmp	r3, #0
    f614:	d106      	bne.n	f624 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    f616:	230c      	movs	r3, #12
    f618:	18fb      	adds	r3, r7, r3
    f61a:	781a      	ldrb	r2, [r3, #0]
    f61c:	2104      	movs	r1, #4
    f61e:	430a      	orrs	r2, r1
    f620:	701a      	strb	r2, [r3, #0]
    f622:	e005      	b.n	f630 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    f624:	230c      	movs	r3, #12
    f626:	18fb      	adds	r3, r7, r3
    f628:	781a      	ldrb	r2, [r3, #0]
    f62a:	2104      	movs	r1, #4
    f62c:	438a      	bics	r2, r1
    f62e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    f630:	687b      	ldr	r3, [r7, #4]
    f632:	789a      	ldrb	r2, [r3, #2]
    f634:	230c      	movs	r3, #12
    f636:	18fb      	adds	r3, r7, r3
    f638:	2101      	movs	r1, #1
    f63a:	400a      	ands	r2, r1
    f63c:	0150      	lsls	r0, r2, #5
    f63e:	781a      	ldrb	r2, [r3, #0]
    f640:	2120      	movs	r1, #32
    f642:	438a      	bics	r2, r1
    f644:	1c11      	adds	r1, r2, #0
    f646:	1c02      	adds	r2, r0, #0
    f648:	430a      	orrs	r2, r1
    f64a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    f64c:	687b      	ldr	r3, [r7, #4]
    f64e:	78da      	ldrb	r2, [r3, #3]
    f650:	230c      	movs	r3, #12
    f652:	18fb      	adds	r3, r7, r3
    f654:	2101      	movs	r1, #1
    f656:	400a      	ands	r2, r1
    f658:	0110      	lsls	r0, r2, #4
    f65a:	781a      	ldrb	r2, [r3, #0]
    f65c:	2110      	movs	r1, #16
    f65e:	438a      	bics	r2, r1
    f660:	1c11      	adds	r1, r2, #0
    f662:	1c02      	adds	r2, r0, #0
    f664:	430a      	orrs	r2, r1
    f666:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    f668:	687b      	ldr	r3, [r7, #4]
    f66a:	791a      	ldrb	r2, [r3, #4]
    f66c:	230c      	movs	r3, #12
    f66e:	18fb      	adds	r3, r7, r3
    f670:	2101      	movs	r1, #1
    f672:	400a      	ands	r2, r1
    f674:	00d0      	lsls	r0, r2, #3
    f676:	781a      	ldrb	r2, [r3, #0]
    f678:	2108      	movs	r1, #8
    f67a:	438a      	bics	r2, r1
    f67c:	1c11      	adds	r1, r2, #0
    f67e:	1c02      	adds	r2, r0, #0
    f680:	430a      	orrs	r2, r1
    f682:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    f684:	687b      	ldr	r3, [r7, #4]
    f686:	7b5a      	ldrb	r2, [r3, #13]
    f688:	230c      	movs	r3, #12
    f68a:	18fb      	adds	r3, r7, r3
    f68c:	01d0      	lsls	r0, r2, #7
    f68e:	781a      	ldrb	r2, [r3, #0]
    f690:	217f      	movs	r1, #127	; 0x7f
    f692:	400a      	ands	r2, r1
    f694:	1c11      	adds	r1, r2, #0
    f696:	1c02      	adds	r2, r0, #0
    f698:	430a      	orrs	r2, r1
    f69a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    f69c:	687b      	ldr	r3, [r7, #4]
    f69e:	7b1a      	ldrb	r2, [r3, #12]
    f6a0:	230c      	movs	r3, #12
    f6a2:	18fb      	adds	r3, r7, r3
    f6a4:	2101      	movs	r1, #1
    f6a6:	400a      	ands	r2, r1
    f6a8:	0190      	lsls	r0, r2, #6
    f6aa:	781a      	ldrb	r2, [r3, #0]
    f6ac:	2140      	movs	r1, #64	; 0x40
    f6ae:	438a      	bics	r2, r1
    f6b0:	1c11      	adds	r1, r2, #0
    f6b2:	1c02      	adds	r2, r0, #0
    f6b4:	430a      	orrs	r2, r1
    f6b6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	7b9a      	ldrb	r2, [r3, #14]
    f6bc:	230c      	movs	r3, #12
    f6be:	18fb      	adds	r3, r7, r3
    f6c0:	2101      	movs	r1, #1
    f6c2:	400a      	ands	r2, r1
    f6c4:	0110      	lsls	r0, r2, #4
    f6c6:	785a      	ldrb	r2, [r3, #1]
    f6c8:	2110      	movs	r1, #16
    f6ca:	438a      	bics	r2, r1
    f6cc:	1c11      	adds	r1, r2, #0
    f6ce:	1c02      	adds	r2, r0, #0
    f6d0:	430a      	orrs	r2, r1
    f6d2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	689a      	ldr	r2, [r3, #8]
    f6d8:	4b06      	ldr	r3, [pc, #24]	; (f6f4 <system_clock_source_xosc32k_set_config+0x11c>)
    f6da:	447b      	add	r3, pc
    f6dc:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    f6de:	4a04      	ldr	r2, [pc, #16]	; (f6f0 <system_clock_source_xosc32k_set_config+0x118>)
    f6e0:	230c      	movs	r3, #12
    f6e2:	18fb      	adds	r3, r7, r3
    f6e4:	881b      	ldrh	r3, [r3, #0]
    f6e6:	8293      	strh	r3, [r2, #20]
}
    f6e8:	46c0      	nop			; (mov r8, r8)
    f6ea:	46bd      	mov	sp, r7
    f6ec:	b004      	add	sp, #16
    f6ee:	bd80      	pop	{r7, pc}
    f6f0:	40000800 	.word	0x40000800
    f6f4:	1fff0f6a 	.word	0x1fff0f6a

0000f6f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    f6f8:	b580      	push	{r7, lr}
    f6fa:	b082      	sub	sp, #8
    f6fc:	af00      	add	r7, sp, #0
    f6fe:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	7a1b      	ldrb	r3, [r3, #8]
    f704:	029b      	lsls	r3, r3, #10
    f706:	041b      	lsls	r3, r3, #16
    f708:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    f70a:	687b      	ldr	r3, [r7, #4]
    f70c:	895b      	ldrh	r3, [r3, #10]
    f70e:	059b      	lsls	r3, r3, #22
    f710:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f712:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    f714:	4b2e      	ldr	r3, [pc, #184]	; (f7d0 <system_clock_source_dfll_set_config+0xd8>)
    f716:	447b      	add	r3, pc
    f718:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    f71e:	687b      	ldr	r3, [r7, #4]
    f720:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    f722:	4313      	orrs	r3, r2
    f724:	b2db      	uxtb	r3, r3
    f726:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    f728:	687b      	ldr	r3, [r7, #4]
    f72a:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    f72c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    f72e:	687a      	ldr	r2, [r7, #4]
    f730:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    f732:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    f734:	687b      	ldr	r3, [r7, #4]
    f736:	785b      	ldrb	r3, [r3, #1]
    f738:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    f73a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    f73c:	4b25      	ldr	r3, [pc, #148]	; (f7d4 <system_clock_source_dfll_set_config+0xdc>)
    f73e:	447b      	add	r3, pc
    f740:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	781b      	ldrb	r3, [r3, #0]
    f746:	2b04      	cmp	r3, #4
    f748:	d119      	bne.n	f77e <system_clock_source_dfll_set_config+0x86>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f74a:	687b      	ldr	r3, [r7, #4]
    f74c:	7b1b      	ldrb	r3, [r3, #12]
    f74e:	069b      	lsls	r3, r3, #26
    f750:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f752:	687b      	ldr	r3, [r7, #4]
    f754:	89db      	ldrh	r3, [r3, #14]
    f756:	041b      	lsls	r3, r3, #16
    f758:	0019      	movs	r1, r3
    f75a:	4b1f      	ldr	r3, [pc, #124]	; (f7d8 <system_clock_source_dfll_set_config+0xe0>)
    f75c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f75e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f760:	687a      	ldr	r2, [r7, #4]
    f762:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f764:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    f766:	4b1d      	ldr	r3, [pc, #116]	; (f7dc <system_clock_source_dfll_set_config+0xe4>)
    f768:	447b      	add	r3, pc
    f76a:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    f76c:	4b1c      	ldr	r3, [pc, #112]	; (f7e0 <system_clock_source_dfll_set_config+0xe8>)
    f76e:	447b      	add	r3, pc
    f770:	681b      	ldr	r3, [r3, #0]
    f772:	687a      	ldr	r2, [r7, #4]
    f774:	7812      	ldrb	r2, [r2, #0]
    f776:	431a      	orrs	r2, r3
    f778:	4b1a      	ldr	r3, [pc, #104]	; (f7e4 <system_clock_source_dfll_set_config+0xec>)
    f77a:	447b      	add	r3, pc
    f77c:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    f77e:	687b      	ldr	r3, [r7, #4]
    f780:	781b      	ldrb	r3, [r3, #0]
    f782:	2b20      	cmp	r3, #32
    f784:	d11f      	bne.n	f7c6 <system_clock_source_dfll_set_config+0xce>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	7b1b      	ldrb	r3, [r3, #12]
    f78a:	069b      	lsls	r3, r3, #26
    f78c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f78e:	687b      	ldr	r3, [r7, #4]
    f790:	89db      	ldrh	r3, [r3, #14]
    f792:	041b      	lsls	r3, r3, #16
    f794:	0019      	movs	r1, r3
    f796:	4b10      	ldr	r3, [pc, #64]	; (f7d8 <system_clock_source_dfll_set_config+0xe0>)
    f798:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f79a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f79c:	687a      	ldr	r2, [r7, #4]
    f79e:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f7a0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    f7a2:	4b11      	ldr	r3, [pc, #68]	; (f7e8 <system_clock_source_dfll_set_config+0xf0>)
    f7a4:	447b      	add	r3, pc
    f7a6:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    f7a8:	4b10      	ldr	r3, [pc, #64]	; (f7ec <system_clock_source_dfll_set_config+0xf4>)
    f7aa:	447b      	add	r3, pc
    f7ac:	681b      	ldr	r3, [r3, #0]
    f7ae:	687a      	ldr	r2, [r7, #4]
    f7b0:	7812      	ldrb	r2, [r2, #0]
    f7b2:	2104      	movs	r1, #4
    f7b4:	430a      	orrs	r2, r1
    f7b6:	b2d2      	uxtb	r2, r2
    f7b8:	4313      	orrs	r3, r2
    f7ba:	2280      	movs	r2, #128	; 0x80
    f7bc:	00d2      	lsls	r2, r2, #3
    f7be:	431a      	orrs	r2, r3
    f7c0:	4b0b      	ldr	r3, [pc, #44]	; (f7f0 <system_clock_source_dfll_set_config+0xf8>)
    f7c2:	447b      	add	r3, pc
    f7c4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    f7c6:	46c0      	nop			; (mov r8, r8)
    f7c8:	46bd      	mov	sp, r7
    f7ca:	b002      	add	sp, #8
    f7cc:	bd80      	pop	{r7, pc}
    f7ce:	46c0      	nop			; (mov r8, r8)
    f7d0:	1fff0f2e 	.word	0x1fff0f2e
    f7d4:	1fff0f06 	.word	0x1fff0f06
    f7d8:	03ff0000 	.word	0x03ff0000
    f7dc:	1fff0edc 	.word	0x1fff0edc
    f7e0:	1fff0ed6 	.word	0x1fff0ed6
    f7e4:	1fff0eca 	.word	0x1fff0eca
    f7e8:	1fff0ea0 	.word	0x1fff0ea0
    f7ec:	1fff0e9a 	.word	0x1fff0e9a
    f7f0:	1fff0e82 	.word	0x1fff0e82

0000f7f4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    f7f4:	b580      	push	{r7, lr}
    f7f6:	b082      	sub	sp, #8
    f7f8:	af00      	add	r7, sp, #0
    f7fa:	0002      	movs	r2, r0
    f7fc:	1dfb      	adds	r3, r7, #7
    f7fe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    f800:	1dfb      	adds	r3, r7, #7
    f802:	781b      	ldrb	r3, [r3, #0]
    f804:	2b08      	cmp	r3, #8
    f806:	d84f      	bhi.n	f8a8 <system_clock_source_enable+0xb4>
    f808:	0018      	movs	r0, r3
    f80a:	f000 ff41 	bl	10690 <__gnu_thumb1_case_si>
    f80e:	46c0      	nop			; (mov r8, r8)
    f810:	00000042 	.word	0x00000042
    f814:	00000098 	.word	0x00000098
    f818:	00000098 	.word	0x00000098
    f81c:	00000094 	.word	0x00000094
    f820:	00000034 	.word	0x00000034
    f824:	00000054 	.word	0x00000054
    f828:	00000024 	.word	0x00000024
    f82c:	00000066 	.word	0x00000066
    f830:	0000007e 	.word	0x0000007e
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    f834:	4b20      	ldr	r3, [pc, #128]	; (f8b8 <system_clock_source_enable+0xc4>)
    f836:	4a20      	ldr	r2, [pc, #128]	; (f8b8 <system_clock_source_enable+0xc4>)
    f838:	6a12      	ldr	r2, [r2, #32]
    f83a:	2102      	movs	r1, #2
    f83c:	430a      	orrs	r2, r1
    f83e:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    f840:	2300      	movs	r3, #0
    f842:	e034      	b.n	f8ae <system_clock_source_enable+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    f844:	4b1c      	ldr	r3, [pc, #112]	; (f8b8 <system_clock_source_enable+0xc4>)
    f846:	4a1c      	ldr	r2, [pc, #112]	; (f8b8 <system_clock_source_enable+0xc4>)
    f848:	6992      	ldr	r2, [r2, #24]
    f84a:	2102      	movs	r1, #2
    f84c:	430a      	orrs	r2, r1
    f84e:	619a      	str	r2, [r3, #24]
		break;
    f850:	e02c      	b.n	f8ac <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    f852:	4a19      	ldr	r2, [pc, #100]	; (f8b8 <system_clock_source_enable+0xc4>)
    f854:	4b18      	ldr	r3, [pc, #96]	; (f8b8 <system_clock_source_enable+0xc4>)
    f856:	8a1b      	ldrh	r3, [r3, #16]
    f858:	b29b      	uxth	r3, r3
    f85a:	2102      	movs	r1, #2
    f85c:	430b      	orrs	r3, r1
    f85e:	b29b      	uxth	r3, r3
    f860:	8213      	strh	r3, [r2, #16]
		break;
    f862:	e023      	b.n	f8ac <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    f864:	4a14      	ldr	r2, [pc, #80]	; (f8b8 <system_clock_source_enable+0xc4>)
    f866:	4b14      	ldr	r3, [pc, #80]	; (f8b8 <system_clock_source_enable+0xc4>)
    f868:	8a9b      	ldrh	r3, [r3, #20]
    f86a:	b29b      	uxth	r3, r3
    f86c:	2102      	movs	r1, #2
    f86e:	430b      	orrs	r3, r1
    f870:	b29b      	uxth	r3, r3
    f872:	8293      	strh	r3, [r2, #20]
		break;
    f874:	e01a      	b.n	f8ac <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    f876:	4b11      	ldr	r3, [pc, #68]	; (f8bc <system_clock_source_enable+0xc8>)
    f878:	447b      	add	r3, pc
    f87a:	681b      	ldr	r3, [r3, #0]
    f87c:	2202      	movs	r2, #2
    f87e:	431a      	orrs	r2, r3
    f880:	4b0f      	ldr	r3, [pc, #60]	; (f8c0 <system_clock_source_enable+0xcc>)
    f882:	447b      	add	r3, pc
    f884:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    f886:	4b0f      	ldr	r3, [pc, #60]	; (f8c4 <system_clock_source_enable+0xd0>)
    f888:	447b      	add	r3, pc
    f88a:	4798      	blx	r3
		break;
    f88c:	e00e      	b.n	f8ac <system_clock_source_enable+0xb8>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    f88e:	4a0a      	ldr	r2, [pc, #40]	; (f8b8 <system_clock_source_enable+0xc4>)
    f890:	4909      	ldr	r1, [pc, #36]	; (f8b8 <system_clock_source_enable+0xc4>)
    f892:	2344      	movs	r3, #68	; 0x44
    f894:	5ccb      	ldrb	r3, [r1, r3]
    f896:	b2db      	uxtb	r3, r3
    f898:	2102      	movs	r1, #2
    f89a:	430b      	orrs	r3, r1
    f89c:	b2d9      	uxtb	r1, r3
    f89e:	2344      	movs	r3, #68	; 0x44
    f8a0:	54d1      	strb	r1, [r2, r3]
		break;
    f8a2:	e003      	b.n	f8ac <system_clock_source_enable+0xb8>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    f8a4:	2300      	movs	r3, #0
    f8a6:	e002      	b.n	f8ae <system_clock_source_enable+0xba>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f8a8:	2317      	movs	r3, #23
    f8aa:	e000      	b.n	f8ae <system_clock_source_enable+0xba>
	}

	return STATUS_OK;
    f8ac:	2300      	movs	r3, #0
}
    f8ae:	0018      	movs	r0, r3
    f8b0:	46bd      	mov	sp, r7
    f8b2:	b002      	add	sp, #8
    f8b4:	bd80      	pop	{r7, pc}
    f8b6:	46c0      	nop			; (mov r8, r8)
    f8b8:	40000800 	.word	0x40000800
    f8bc:	1fff0dcc 	.word	0x1fff0dcc
    f8c0:	1fff0dc2 	.word	0x1fff0dc2
    f8c4:	fffffb71 	.word	0xfffffb71

0000f8c8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    f8c8:	b580      	push	{r7, lr}
    f8ca:	b084      	sub	sp, #16
    f8cc:	af00      	add	r7, sp, #0
    f8ce:	0002      	movs	r2, r0
    f8d0:	1dfb      	adds	r3, r7, #7
    f8d2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    f8d4:	2300      	movs	r3, #0
    f8d6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    f8d8:	1dfb      	adds	r3, r7, #7
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	2b08      	cmp	r3, #8
    f8de:	d832      	bhi.n	f946 <system_clock_source_is_ready+0x7e>
    f8e0:	0018      	movs	r0, r3
    f8e2:	f000 fed5 	bl	10690 <__gnu_thumb1_case_si>
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	00000030 	.word	0x00000030
    f8ec:	0000005e 	.word	0x0000005e
    f8f0:	0000005e 	.word	0x0000005e
    f8f4:	0000005a 	.word	0x0000005a
    f8f8:	0000002a 	.word	0x0000002a
    f8fc:	00000036 	.word	0x00000036
    f900:	00000024 	.word	0x00000024
    f904:	0000003c 	.word	0x0000003c
    f908:	00000042 	.word	0x00000042
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    f90c:	2308      	movs	r3, #8
    f90e:	60fb      	str	r3, [r7, #12]
		break;
    f910:	e01b      	b.n	f94a <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    f912:	2304      	movs	r3, #4
    f914:	60fb      	str	r3, [r7, #12]
		break;
    f916:	e018      	b.n	f94a <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    f918:	2301      	movs	r3, #1
    f91a:	60fb      	str	r3, [r7, #12]
		break;
    f91c:	e015      	b.n	f94a <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    f91e:	2302      	movs	r3, #2
    f920:	60fb      	str	r3, [r7, #12]
		break;
    f922:	e012      	b.n	f94a <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    f924:	23d0      	movs	r3, #208	; 0xd0
    f926:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    f928:	e00f      	b.n	f94a <system_clock_source_is_ready+0x82>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    f92a:	4a0e      	ldr	r2, [pc, #56]	; (f964 <system_clock_source_is_ready+0x9c>)
    f92c:	2350      	movs	r3, #80	; 0x50
    f92e:	5cd3      	ldrb	r3, [r2, r3]
    f930:	b2db      	uxtb	r3, r3
    f932:	001a      	movs	r2, r3
    f934:	2303      	movs	r3, #3
    f936:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    f938:	3b03      	subs	r3, #3
    f93a:	425a      	negs	r2, r3
    f93c:	4153      	adcs	r3, r2
    f93e:	b2db      	uxtb	r3, r3
    f940:	e00c      	b.n	f95c <system_clock_source_is_ready+0x94>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    f942:	2301      	movs	r3, #1
    f944:	e00a      	b.n	f95c <system_clock_source_is_ready+0x94>

	default:
		return false;
    f946:	2300      	movs	r3, #0
    f948:	e008      	b.n	f95c <system_clock_source_is_ready+0x94>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    f94a:	4b06      	ldr	r3, [pc, #24]	; (f964 <system_clock_source_is_ready+0x9c>)
    f94c:	68db      	ldr	r3, [r3, #12]
    f94e:	68fa      	ldr	r2, [r7, #12]
    f950:	401a      	ands	r2, r3
    f952:	68fb      	ldr	r3, [r7, #12]
    f954:	1ad3      	subs	r3, r2, r3
    f956:	425a      	negs	r2, r3
    f958:	4153      	adcs	r3, r2
    f95a:	b2db      	uxtb	r3, r3
}
    f95c:	0018      	movs	r0, r3
    f95e:	46bd      	mov	sp, r7
    f960:	b004      	add	sp, #16
    f962:	bd80      	pop	{r7, pc}
    f964:	40000800 	.word	0x40000800

0000f968 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    f968:	b590      	push	{r4, r7, lr}
    f96a:	b083      	sub	sp, #12
    f96c:	af00      	add	r7, sp, #0
    f96e:	4c0d      	ldr	r4, [pc, #52]	; (f9a4 <_switch_peripheral_gclk+0x3c>)
    f970:	447c      	add	r4, pc
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    f972:	003b      	movs	r3, r7
    f974:	2203      	movs	r2, #3
    f976:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f978:	2300      	movs	r3, #0
    f97a:	607b      	str	r3, [r7, #4]
    f97c:	e00a      	b.n	f994 <_switch_peripheral_gclk+0x2c>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	b2db      	uxtb	r3, r3
    f982:	003a      	movs	r2, r7
    f984:	0011      	movs	r1, r2
    f986:	0018      	movs	r0, r3
    f988:	4b07      	ldr	r3, [pc, #28]	; (f9a8 <_switch_peripheral_gclk+0x40>)
    f98a:	58e3      	ldr	r3, [r4, r3]
    f98c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f98e:	687b      	ldr	r3, [r7, #4]
    f990:	3301      	adds	r3, #1
    f992:	607b      	str	r3, [r7, #4]
    f994:	687b      	ldr	r3, [r7, #4]
    f996:	2b24      	cmp	r3, #36	; 0x24
    f998:	d9f1      	bls.n	f97e <_switch_peripheral_gclk+0x16>
	}
}
    f99a:	46c0      	nop			; (mov r8, r8)
    f99c:	46bd      	mov	sp, r7
    f99e:	b003      	add	sp, #12
    f9a0:	bd90      	pop	{r4, r7, pc}
    f9a2:	46c0      	nop			; (mov r8, r8)
    f9a4:	00002470 	.word	0x00002470
    f9a8:	000000b0 	.word	0x000000b0

0000f9ac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    f9ac:	b590      	push	{r4, r7, lr}
    f9ae:	b0ab      	sub	sp, #172	; 0xac
    f9b0:	af00      	add	r7, sp, #0
    f9b2:	4ca9      	ldr	r4, [pc, #676]	; (fc58 <system_clock_init+0x2ac>)
    f9b4:	447c      	add	r4, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    f9b6:	4ba9      	ldr	r3, [pc, #676]	; (fc5c <system_clock_init+0x2b0>)
    f9b8:	22c2      	movs	r2, #194	; 0xc2
    f9ba:	00d2      	lsls	r2, r2, #3
    f9bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    f9be:	2001      	movs	r0, #1
    f9c0:	4ba7      	ldr	r3, [pc, #668]	; (fc60 <system_clock_init+0x2b4>)
    f9c2:	447b      	add	r3, pc
    f9c4:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    f9c6:	4ba7      	ldr	r3, [pc, #668]	; (fc64 <system_clock_init+0x2b8>)
    f9c8:	447b      	add	r3, pc
    f9ca:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    f9cc:	2394      	movs	r3, #148	; 0x94
    f9ce:	18fb      	adds	r3, r7, r3
    f9d0:	0018      	movs	r0, r3
    f9d2:	4ba5      	ldr	r3, [pc, #660]	; (fc68 <system_clock_init+0x2bc>)
    f9d4:	447b      	add	r3, pc
    f9d6:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    f9d8:	2394      	movs	r3, #148	; 0x94
    f9da:	18fb      	adds	r3, r7, r3
    f9dc:	2280      	movs	r2, #128	; 0x80
    f9de:	0212      	lsls	r2, r2, #8
    f9e0:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    f9e2:	2394      	movs	r3, #148	; 0x94
    f9e4:	18fb      	adds	r3, r7, r3
    f9e6:	2200      	movs	r2, #0
    f9e8:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    f9ea:	2394      	movs	r3, #148	; 0x94
    f9ec:	18fb      	adds	r3, r7, r3
    f9ee:	2202      	movs	r2, #2
    f9f0:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    f9f2:	2394      	movs	r3, #148	; 0x94
    f9f4:	18fb      	adds	r3, r7, r3
    f9f6:	2201      	movs	r2, #1
    f9f8:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    f9fa:	2394      	movs	r3, #148	; 0x94
    f9fc:	18fb      	adds	r3, r7, r3
    f9fe:	2200      	movs	r2, #0
    fa00:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    fa02:	2394      	movs	r3, #148	; 0x94
    fa04:	18fb      	adds	r3, r7, r3
    fa06:	2201      	movs	r2, #1
    fa08:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    fa0a:	2394      	movs	r3, #148	; 0x94
    fa0c:	18fb      	adds	r3, r7, r3
    fa0e:	2200      	movs	r2, #0
    fa10:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    fa12:	2394      	movs	r3, #148	; 0x94
    fa14:	18fb      	adds	r3, r7, r3
    fa16:	2201      	movs	r2, #1
    fa18:	731a      	strb	r2, [r3, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fa1a:	2394      	movs	r3, #148	; 0x94
    fa1c:	18fb      	adds	r3, r7, r3
    fa1e:	0018      	movs	r0, r3
    fa20:	4b92      	ldr	r3, [pc, #584]	; (fc6c <system_clock_init+0x2c0>)
    fa22:	58e3      	ldr	r3, [r4, r3]
    fa24:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fa26:	2005      	movs	r0, #5
    fa28:	4b91      	ldr	r3, [pc, #580]	; (fc70 <system_clock_init+0x2c4>)
    fa2a:	58e3      	ldr	r3, [r4, r3]
    fa2c:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	2005      	movs	r0, #5
    fa32:	4b90      	ldr	r3, [pc, #576]	; (fc74 <system_clock_init+0x2c8>)
    fa34:	58e3      	ldr	r3, [r4, r3]
    fa36:	4798      	blx	r3
    fa38:	0003      	movs	r3, r0
    fa3a:	001a      	movs	r2, r3
    fa3c:	2301      	movs	r3, #1
    fa3e:	4053      	eors	r3, r2
    fa40:	b2db      	uxtb	r3, r3
    fa42:	2b00      	cmp	r3, #0
    fa44:	d1f4      	bne.n	fa30 <system_clock_init+0x84>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    fa46:	4a85      	ldr	r2, [pc, #532]	; (fc5c <system_clock_init+0x2b0>)
    fa48:	8a93      	ldrh	r3, [r2, #20]
    fa4a:	2180      	movs	r1, #128	; 0x80
    fa4c:	430b      	orrs	r3, r1
    fa4e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    fa50:	2380      	movs	r3, #128	; 0x80
    fa52:	18fb      	adds	r3, r7, r3
    fa54:	0018      	movs	r0, r3
    fa56:	4b88      	ldr	r3, [pc, #544]	; (fc78 <system_clock_init+0x2cc>)
    fa58:	447b      	add	r3, pc
    fa5a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fa5c:	2380      	movs	r3, #128	; 0x80
    fa5e:	18fb      	adds	r3, r7, r3
    fa60:	2204      	movs	r2, #4
    fa62:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    fa64:	2380      	movs	r3, #128	; 0x80
    fa66:	18fb      	adds	r3, r7, r3
    fa68:	2200      	movs	r2, #0
    fa6a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fa6c:	4b83      	ldr	r3, [pc, #524]	; (fc7c <system_clock_init+0x2d0>)
    fa6e:	681b      	ldr	r3, [r3, #0]
    fa70:	0e9b      	lsrs	r3, r3, #26
    fa72:	22a4      	movs	r2, #164	; 0xa4
    fa74:	18ba      	adds	r2, r7, r2
    fa76:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    fa78:	23a4      	movs	r3, #164	; 0xa4
    fa7a:	18fb      	adds	r3, r7, r3
    fa7c:	681b      	ldr	r3, [r3, #0]
    fa7e:	2b3f      	cmp	r3, #63	; 0x3f
    fa80:	d103      	bne.n	fa8a <system_clock_init+0xde>
		coarse = 0x1f;
    fa82:	231f      	movs	r3, #31
    fa84:	22a4      	movs	r2, #164	; 0xa4
    fa86:	18ba      	adds	r2, r7, r2
    fa88:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    fa8a:	23a4      	movs	r3, #164	; 0xa4
    fa8c:	18fb      	adds	r3, r7, r3
    fa8e:	681b      	ldr	r3, [r3, #0]
    fa90:	b2da      	uxtb	r2, r3
    fa92:	2380      	movs	r3, #128	; 0x80
    fa94:	18fb      	adds	r3, r7, r3
    fa96:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    fa98:	2380      	movs	r3, #128	; 0x80
    fa9a:	18fb      	adds	r3, r7, r3
    fa9c:	2200      	movs	r2, #0
    fa9e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    faa0:	2380      	movs	r3, #128	; 0x80
    faa2:	18fb      	adds	r3, r7, r3
    faa4:	2200      	movs	r2, #0
    faa6:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    faa8:	2380      	movs	r3, #128	; 0x80
    faaa:	18fb      	adds	r3, r7, r3
    faac:	2200      	movs	r2, #0
    faae:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    fab0:	2380      	movs	r3, #128	; 0x80
    fab2:	18fb      	adds	r3, r7, r3
    fab4:	2200      	movs	r2, #0
    fab6:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fab8:	2380      	movs	r3, #128	; 0x80
    faba:	18fb      	adds	r3, r7, r3
    fabc:	4a70      	ldr	r2, [pc, #448]	; (fc80 <system_clock_init+0x2d4>)
    fabe:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    fac0:	2380      	movs	r3, #128	; 0x80
    fac2:	18fb      	adds	r3, r7, r3
    fac4:	2207      	movs	r2, #7
    fac6:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    fac8:	2380      	movs	r3, #128	; 0x80
    faca:	18fb      	adds	r3, r7, r3
    facc:	223f      	movs	r2, #63	; 0x3f
    face:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    fad0:	2380      	movs	r3, #128	; 0x80
    fad2:	18fb      	adds	r3, r7, r3
    fad4:	0018      	movs	r0, r3
    fad6:	4b6b      	ldr	r3, [pc, #428]	; (fc84 <system_clock_init+0x2d8>)
    fad8:	58e3      	ldr	r3, [r4, r3]
    fada:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    fadc:	237c      	movs	r3, #124	; 0x7c
    fade:	18fb      	adds	r3, r7, r3
    fae0:	0018      	movs	r0, r3
    fae2:	4b69      	ldr	r3, [pc, #420]	; (fc88 <system_clock_init+0x2dc>)
    fae4:	447b      	add	r3, pc
    fae6:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    fae8:	237c      	movs	r3, #124	; 0x7c
    faea:	18fb      	adds	r3, r7, r3
    faec:	2200      	movs	r2, #0
    faee:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    faf0:	237c      	movs	r3, #124	; 0x7c
    faf2:	18fb      	adds	r3, r7, r3
    faf4:	2201      	movs	r2, #1
    faf6:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    faf8:	237c      	movs	r3, #124	; 0x7c
    fafa:	18fb      	adds	r3, r7, r3
    fafc:	2200      	movs	r2, #0
    fafe:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    fb00:	237c      	movs	r3, #124	; 0x7c
    fb02:	18fb      	adds	r3, r7, r3
    fb04:	0018      	movs	r0, r3
    fb06:	4b61      	ldr	r3, [pc, #388]	; (fc8c <system_clock_init+0x2e0>)
    fb08:	58e3      	ldr	r3, [r4, r3]
    fb0a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    fb0c:	2006      	movs	r0, #6
    fb0e:	4b58      	ldr	r3, [pc, #352]	; (fc70 <system_clock_init+0x2c4>)
    fb10:	58e3      	ldr	r3, [r4, r3]
    fb12:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    fb14:	4b5e      	ldr	r3, [pc, #376]	; (fc90 <system_clock_init+0x2e4>)
    fb16:	58e3      	ldr	r3, [r4, r3]
    fb18:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    fb1a:	2364      	movs	r3, #100	; 0x64
    fb1c:	18fb      	adds	r3, r7, r3
    fb1e:	0018      	movs	r0, r3
    fb20:	4b5c      	ldr	r3, [pc, #368]	; (fc94 <system_clock_init+0x2e8>)
    fb22:	447b      	add	r3, pc
    fb24:	4798      	blx	r3
    fb26:	2364      	movs	r3, #100	; 0x64
    fb28:	18fb      	adds	r3, r7, r3
    fb2a:	2205      	movs	r2, #5
    fb2c:	701a      	strb	r2, [r3, #0]
    fb2e:	2364      	movs	r3, #100	; 0x64
    fb30:	18fb      	adds	r3, r7, r3
    fb32:	2201      	movs	r2, #1
    fb34:	605a      	str	r2, [r3, #4]
    fb36:	2364      	movs	r3, #100	; 0x64
    fb38:	18fb      	adds	r3, r7, r3
    fb3a:	2200      	movs	r2, #0
    fb3c:	721a      	strb	r2, [r3, #8]
    fb3e:	2364      	movs	r3, #100	; 0x64
    fb40:	18fb      	adds	r3, r7, r3
    fb42:	2200      	movs	r2, #0
    fb44:	725a      	strb	r2, [r3, #9]
    fb46:	2364      	movs	r3, #100	; 0x64
    fb48:	18fb      	adds	r3, r7, r3
    fb4a:	0019      	movs	r1, r3
    fb4c:	2001      	movs	r0, #1
    fb4e:	4b52      	ldr	r3, [pc, #328]	; (fc98 <system_clock_init+0x2ec>)
    fb50:	58e3      	ldr	r3, [r4, r3]
    fb52:	4798      	blx	r3
    fb54:	2001      	movs	r0, #1
    fb56:	4b51      	ldr	r3, [pc, #324]	; (fc9c <system_clock_init+0x2f0>)
    fb58:	58e3      	ldr	r3, [r4, r3]
    fb5a:	4798      	blx	r3
    fb5c:	2358      	movs	r3, #88	; 0x58
    fb5e:	18fb      	adds	r3, r7, r3
    fb60:	0018      	movs	r0, r3
    fb62:	4b4f      	ldr	r3, [pc, #316]	; (fca0 <system_clock_init+0x2f4>)
    fb64:	447b      	add	r3, pc
    fb66:	4798      	blx	r3
    fb68:	2358      	movs	r3, #88	; 0x58
    fb6a:	18fb      	adds	r3, r7, r3
    fb6c:	2205      	movs	r2, #5
    fb6e:	701a      	strb	r2, [r3, #0]
    fb70:	2358      	movs	r3, #88	; 0x58
    fb72:	18fb      	adds	r3, r7, r3
    fb74:	2220      	movs	r2, #32
    fb76:	605a      	str	r2, [r3, #4]
    fb78:	2358      	movs	r3, #88	; 0x58
    fb7a:	18fb      	adds	r3, r7, r3
    fb7c:	2201      	movs	r2, #1
    fb7e:	721a      	strb	r2, [r3, #8]
    fb80:	2358      	movs	r3, #88	; 0x58
    fb82:	18fb      	adds	r3, r7, r3
    fb84:	2200      	movs	r2, #0
    fb86:	725a      	strb	r2, [r3, #9]
    fb88:	2358      	movs	r3, #88	; 0x58
    fb8a:	18fb      	adds	r3, r7, r3
    fb8c:	0019      	movs	r1, r3
    fb8e:	2002      	movs	r0, #2
    fb90:	4b41      	ldr	r3, [pc, #260]	; (fc98 <system_clock_init+0x2ec>)
    fb92:	58e3      	ldr	r3, [r4, r3]
    fb94:	4798      	blx	r3
    fb96:	2002      	movs	r0, #2
    fb98:	4b40      	ldr	r3, [pc, #256]	; (fc9c <system_clock_init+0x2f0>)
    fb9a:	58e3      	ldr	r3, [r4, r3]
    fb9c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    fb9e:	230c      	movs	r3, #12
    fba0:	18fb      	adds	r3, r7, r3
    fba2:	0018      	movs	r0, r3
    fba4:	4b3f      	ldr	r3, [pc, #252]	; (fca4 <system_clock_init+0x2f8>)
    fba6:	447b      	add	r3, pc
    fba8:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    fbaa:	230c      	movs	r3, #12
    fbac:	18fb      	adds	r3, r7, r3
    fbae:	2201      	movs	r2, #1
    fbb0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    fbb2:	230c      	movs	r3, #12
    fbb4:	18fb      	adds	r3, r7, r3
    fbb6:	0019      	movs	r1, r3
    fbb8:	2000      	movs	r0, #0
    fbba:	4b3b      	ldr	r3, [pc, #236]	; (fca8 <system_clock_init+0x2fc>)
    fbbc:	58e3      	ldr	r3, [r4, r3]
    fbbe:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    fbc0:	2000      	movs	r0, #0
    fbc2:	4b3a      	ldr	r3, [pc, #232]	; (fcac <system_clock_init+0x300>)
    fbc4:	58e3      	ldr	r3, [r4, r3]
    fbc6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    fbc8:	2007      	movs	r0, #7
    fbca:	4b29      	ldr	r3, [pc, #164]	; (fc70 <system_clock_init+0x2c4>)
    fbcc:	58e3      	ldr	r3, [r4, r3]
    fbce:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    fbd0:	46c0      	nop			; (mov r8, r8)
    fbd2:	2007      	movs	r0, #7
    fbd4:	4b27      	ldr	r3, [pc, #156]	; (fc74 <system_clock_init+0x2c8>)
    fbd6:	58e3      	ldr	r3, [r4, r3]
    fbd8:	4798      	blx	r3
    fbda:	0003      	movs	r3, r0
    fbdc:	001a      	movs	r2, r3
    fbde:	2301      	movs	r3, #1
    fbe0:	4053      	eors	r3, r2
    fbe2:	b2db      	uxtb	r3, r3
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d1f4      	bne.n	fbd2 <system_clock_init+0x226>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    fbe8:	4a1c      	ldr	r2, [pc, #112]	; (fc5c <system_clock_init+0x2b0>)
    fbea:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    fbec:	2180      	movs	r1, #128	; 0x80
    fbee:	430b      	orrs	r3, r1
    fbf0:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    fbf2:	2000      	movs	r0, #0
    fbf4:	4b2e      	ldr	r3, [pc, #184]	; (fcb0 <system_clock_init+0x304>)
    fbf6:	447b      	add	r3, pc
    fbf8:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    fbfa:	2100      	movs	r1, #0
    fbfc:	2000      	movs	r0, #0
    fbfe:	4b2d      	ldr	r3, [pc, #180]	; (fcb4 <system_clock_init+0x308>)
    fc00:	447b      	add	r3, pc
    fc02:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    fc04:	2100      	movs	r1, #0
    fc06:	2001      	movs	r0, #1
    fc08:	4b2b      	ldr	r3, [pc, #172]	; (fcb8 <system_clock_init+0x30c>)
    fc0a:	447b      	add	r3, pc
    fc0c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    fc0e:	2100      	movs	r1, #0
    fc10:	2002      	movs	r0, #2
    fc12:	4b2a      	ldr	r3, [pc, #168]	; (fcbc <system_clock_init+0x310>)
    fc14:	447b      	add	r3, pc
    fc16:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    fc18:	003b      	movs	r3, r7
    fc1a:	0018      	movs	r0, r3
    fc1c:	4b28      	ldr	r3, [pc, #160]	; (fcc0 <system_clock_init+0x314>)
    fc1e:	447b      	add	r3, pc
    fc20:	4798      	blx	r3
    fc22:	003b      	movs	r3, r7
    fc24:	2207      	movs	r2, #7
    fc26:	701a      	strb	r2, [r3, #0]
    fc28:	003b      	movs	r3, r7
    fc2a:	2201      	movs	r2, #1
    fc2c:	605a      	str	r2, [r3, #4]
    fc2e:	003b      	movs	r3, r7
    fc30:	2200      	movs	r2, #0
    fc32:	721a      	strb	r2, [r3, #8]
    fc34:	003b      	movs	r3, r7
    fc36:	2200      	movs	r2, #0
    fc38:	725a      	strb	r2, [r3, #9]
    fc3a:	003b      	movs	r3, r7
    fc3c:	0019      	movs	r1, r3
    fc3e:	2000      	movs	r0, #0
    fc40:	4b15      	ldr	r3, [pc, #84]	; (fc98 <system_clock_init+0x2ec>)
    fc42:	58e3      	ldr	r3, [r4, r3]
    fc44:	4798      	blx	r3
    fc46:	2000      	movs	r0, #0
    fc48:	4b14      	ldr	r3, [pc, #80]	; (fc9c <system_clock_init+0x2f0>)
    fc4a:	58e3      	ldr	r3, [r4, r3]
    fc4c:	4798      	blx	r3
#endif
}
    fc4e:	46c0      	nop			; (mov r8, r8)
    fc50:	46bd      	mov	sp, r7
    fc52:	b02b      	add	sp, #172	; 0xac
    fc54:	bd90      	pop	{r4, r7, pc}
    fc56:	46c0      	nop			; (mov r8, r8)
    fc58:	0000242c 	.word	0x0000242c
    fc5c:	40000800 	.word	0x40000800
    fc60:	fffff9e7 	.word	0xfffff9e7
    fc64:	ffffff9d 	.word	0xffffff9d
    fc68:	fffff8a5 	.word	0xfffff8a5
    fc6c:	0000022c 	.word	0x0000022c
    fc70:	0000025c 	.word	0x0000025c
    fc74:	00000280 	.word	0x00000280
    fc78:	fffff88b 	.word	0xfffff88b
    fc7c:	00806024 	.word	0x00806024
    fc80:	000005dc 	.word	0x000005dc
    fc84:	00000064 	.word	0x00000064
    fc88:	fffff7dd 	.word	0xfffff7dd
    fc8c:	00000114 	.word	0x00000114
    fc90:	000002c4 	.word	0x000002c4
    fc94:	fffff713 	.word	0xfffff713
    fc98:	000000f4 	.word	0x000000f4
    fc9c:	000001d4 	.word	0x000001d4
    fca0:	fffff6d1 	.word	0xfffff6d1
    fca4:	fffff6bd 	.word	0xfffff6bd
    fca8:	000000b0 	.word	0x000000b0
    fcac:	00000238 	.word	0x00000238
    fcb0:	fffff73f 	.word	0xfffff73f
    fcb4:	fffff755 	.word	0xfffff755
    fcb8:	fffff74b 	.word	0xfffff74b
    fcbc:	fffff741 	.word	0xfffff741
    fcc0:	fffff617 	.word	0xfffff617

0000fcc4 <system_apb_clock_set_mask>:
    fcc4:	b580      	push	{r7, lr}
    fcc6:	b082      	sub	sp, #8
    fcc8:	af00      	add	r7, sp, #0
    fcca:	0002      	movs	r2, r0
    fccc:	6039      	str	r1, [r7, #0]
    fcce:	1dfb      	adds	r3, r7, #7
    fcd0:	701a      	strb	r2, [r3, #0]
    fcd2:	1dfb      	adds	r3, r7, #7
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	2b01      	cmp	r3, #1
    fcd8:	d00a      	beq.n	fcf0 <system_apb_clock_set_mask+0x2c>
    fcda:	2b02      	cmp	r3, #2
    fcdc:	d00f      	beq.n	fcfe <system_apb_clock_set_mask+0x3a>
    fcde:	2b00      	cmp	r3, #0
    fce0:	d114      	bne.n	fd0c <system_apb_clock_set_mask+0x48>
    fce2:	4b0e      	ldr	r3, [pc, #56]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fce4:	4a0d      	ldr	r2, [pc, #52]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fce6:	6991      	ldr	r1, [r2, #24]
    fce8:	683a      	ldr	r2, [r7, #0]
    fcea:	430a      	orrs	r2, r1
    fcec:	619a      	str	r2, [r3, #24]
    fcee:	e00f      	b.n	fd10 <system_apb_clock_set_mask+0x4c>
    fcf0:	4b0a      	ldr	r3, [pc, #40]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fcf2:	4a0a      	ldr	r2, [pc, #40]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fcf4:	69d1      	ldr	r1, [r2, #28]
    fcf6:	683a      	ldr	r2, [r7, #0]
    fcf8:	430a      	orrs	r2, r1
    fcfa:	61da      	str	r2, [r3, #28]
    fcfc:	e008      	b.n	fd10 <system_apb_clock_set_mask+0x4c>
    fcfe:	4b07      	ldr	r3, [pc, #28]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fd00:	4a06      	ldr	r2, [pc, #24]	; (fd1c <system_apb_clock_set_mask+0x58>)
    fd02:	6a11      	ldr	r1, [r2, #32]
    fd04:	683a      	ldr	r2, [r7, #0]
    fd06:	430a      	orrs	r2, r1
    fd08:	621a      	str	r2, [r3, #32]
    fd0a:	e001      	b.n	fd10 <system_apb_clock_set_mask+0x4c>
    fd0c:	2317      	movs	r3, #23
    fd0e:	e000      	b.n	fd12 <system_apb_clock_set_mask+0x4e>
    fd10:	2300      	movs	r3, #0
    fd12:	0018      	movs	r0, r3
    fd14:	46bd      	mov	sp, r7
    fd16:	b002      	add	sp, #8
    fd18:	bd80      	pop	{r7, pc}
    fd1a:	46c0      	nop			; (mov r8, r8)
    fd1c:	40000400 	.word	0x40000400

0000fd20 <system_interrupt_enter_critical_section>:
    fd20:	b580      	push	{r7, lr}
    fd22:	af00      	add	r7, sp, #0
    fd24:	4a03      	ldr	r2, [pc, #12]	; (fd34 <system_interrupt_enter_critical_section+0x14>)
    fd26:	447a      	add	r2, pc
    fd28:	4b03      	ldr	r3, [pc, #12]	; (fd38 <system_interrupt_enter_critical_section+0x18>)
    fd2a:	58d3      	ldr	r3, [r2, r3]
    fd2c:	4798      	blx	r3
    fd2e:	46c0      	nop			; (mov r8, r8)
    fd30:	46bd      	mov	sp, r7
    fd32:	bd80      	pop	{r7, pc}
    fd34:	000020ba 	.word	0x000020ba
    fd38:	000000d8 	.word	0x000000d8

0000fd3c <system_interrupt_leave_critical_section>:
    fd3c:	b580      	push	{r7, lr}
    fd3e:	af00      	add	r7, sp, #0
    fd40:	4a03      	ldr	r2, [pc, #12]	; (fd50 <system_interrupt_leave_critical_section+0x14>)
    fd42:	447a      	add	r2, pc
    fd44:	4b03      	ldr	r3, [pc, #12]	; (fd54 <system_interrupt_leave_critical_section+0x18>)
    fd46:	58d3      	ldr	r3, [r2, r3]
    fd48:	4798      	blx	r3
    fd4a:	46c0      	nop			; (mov r8, r8)
    fd4c:	46bd      	mov	sp, r7
    fd4e:	bd80      	pop	{r7, pc}
    fd50:	0000209e 	.word	0x0000209e
    fd54:	00000014 	.word	0x00000014

0000fd58 <system_gclk_is_syncing>:
    fd58:	b580      	push	{r7, lr}
    fd5a:	af00      	add	r7, sp, #0
    fd5c:	4b05      	ldr	r3, [pc, #20]	; (fd74 <system_gclk_is_syncing+0x1c>)
    fd5e:	785b      	ldrb	r3, [r3, #1]
    fd60:	b2db      	uxtb	r3, r3
    fd62:	b25b      	sxtb	r3, r3
    fd64:	2b00      	cmp	r3, #0
    fd66:	da01      	bge.n	fd6c <system_gclk_is_syncing+0x14>
    fd68:	2301      	movs	r3, #1
    fd6a:	e000      	b.n	fd6e <system_gclk_is_syncing+0x16>
    fd6c:	2300      	movs	r3, #0
    fd6e:	0018      	movs	r0, r3
    fd70:	46bd      	mov	sp, r7
    fd72:	bd80      	pop	{r7, pc}
    fd74:	40000c00 	.word	0x40000c00

0000fd78 <system_gclk_init>:
    fd78:	b580      	push	{r7, lr}
    fd7a:	af00      	add	r7, sp, #0
    fd7c:	2108      	movs	r1, #8
    fd7e:	2000      	movs	r0, #0
    fd80:	4b08      	ldr	r3, [pc, #32]	; (fda4 <system_gclk_init+0x2c>)
    fd82:	447b      	add	r3, pc
    fd84:	4798      	blx	r3
    fd86:	4b08      	ldr	r3, [pc, #32]	; (fda8 <system_gclk_init+0x30>)
    fd88:	2201      	movs	r2, #1
    fd8a:	701a      	strb	r2, [r3, #0]
    fd8c:	46c0      	nop			; (mov r8, r8)
    fd8e:	4b06      	ldr	r3, [pc, #24]	; (fda8 <system_gclk_init+0x30>)
    fd90:	781b      	ldrb	r3, [r3, #0]
    fd92:	b2db      	uxtb	r3, r3
    fd94:	001a      	movs	r2, r3
    fd96:	2301      	movs	r3, #1
    fd98:	4013      	ands	r3, r2
    fd9a:	d1f8      	bne.n	fd8e <system_gclk_init+0x16>
    fd9c:	46c0      	nop			; (mov r8, r8)
    fd9e:	46bd      	mov	sp, r7
    fda0:	bd80      	pop	{r7, pc}
    fda2:	46c0      	nop			; (mov r8, r8)
    fda4:	ffffff3f 	.word	0xffffff3f
    fda8:	40000c00 	.word	0x40000c00

0000fdac <system_gclk_gen_set_config>:
    fdac:	b580      	push	{r7, lr}
    fdae:	b086      	sub	sp, #24
    fdb0:	af00      	add	r7, sp, #0
    fdb2:	0002      	movs	r2, r0
    fdb4:	6039      	str	r1, [r7, #0]
    fdb6:	1dfb      	adds	r3, r7, #7
    fdb8:	701a      	strb	r2, [r3, #0]
    fdba:	1dfb      	adds	r3, r7, #7
    fdbc:	781b      	ldrb	r3, [r3, #0]
    fdbe:	617b      	str	r3, [r7, #20]
    fdc0:	1dfb      	adds	r3, r7, #7
    fdc2:	781b      	ldrb	r3, [r3, #0]
    fdc4:	613b      	str	r3, [r7, #16]
    fdc6:	683b      	ldr	r3, [r7, #0]
    fdc8:	781b      	ldrb	r3, [r3, #0]
    fdca:	021b      	lsls	r3, r3, #8
    fdcc:	001a      	movs	r2, r3
    fdce:	697b      	ldr	r3, [r7, #20]
    fdd0:	4313      	orrs	r3, r2
    fdd2:	617b      	str	r3, [r7, #20]
    fdd4:	683b      	ldr	r3, [r7, #0]
    fdd6:	785b      	ldrb	r3, [r3, #1]
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d004      	beq.n	fde6 <system_gclk_gen_set_config+0x3a>
    fddc:	697b      	ldr	r3, [r7, #20]
    fdde:	2280      	movs	r2, #128	; 0x80
    fde0:	02d2      	lsls	r2, r2, #11
    fde2:	4313      	orrs	r3, r2
    fde4:	617b      	str	r3, [r7, #20]
    fde6:	683b      	ldr	r3, [r7, #0]
    fde8:	7a5b      	ldrb	r3, [r3, #9]
    fdea:	2b00      	cmp	r3, #0
    fdec:	d004      	beq.n	fdf8 <system_gclk_gen_set_config+0x4c>
    fdee:	697b      	ldr	r3, [r7, #20]
    fdf0:	2280      	movs	r2, #128	; 0x80
    fdf2:	0312      	lsls	r2, r2, #12
    fdf4:	4313      	orrs	r3, r2
    fdf6:	617b      	str	r3, [r7, #20]
    fdf8:	683b      	ldr	r3, [r7, #0]
    fdfa:	685b      	ldr	r3, [r3, #4]
    fdfc:	2b01      	cmp	r3, #1
    fdfe:	d92c      	bls.n	fe5a <system_gclk_gen_set_config+0xae>
    fe00:	683b      	ldr	r3, [r7, #0]
    fe02:	685a      	ldr	r2, [r3, #4]
    fe04:	683b      	ldr	r3, [r7, #0]
    fe06:	685b      	ldr	r3, [r3, #4]
    fe08:	3b01      	subs	r3, #1
    fe0a:	4013      	ands	r3, r2
    fe0c:	d11a      	bne.n	fe44 <system_gclk_gen_set_config+0x98>
    fe0e:	2300      	movs	r3, #0
    fe10:	60fb      	str	r3, [r7, #12]
    fe12:	2302      	movs	r3, #2
    fe14:	60bb      	str	r3, [r7, #8]
    fe16:	e005      	b.n	fe24 <system_gclk_gen_set_config+0x78>
    fe18:	68fb      	ldr	r3, [r7, #12]
    fe1a:	3301      	adds	r3, #1
    fe1c:	60fb      	str	r3, [r7, #12]
    fe1e:	68bb      	ldr	r3, [r7, #8]
    fe20:	005b      	lsls	r3, r3, #1
    fe22:	60bb      	str	r3, [r7, #8]
    fe24:	683b      	ldr	r3, [r7, #0]
    fe26:	685a      	ldr	r2, [r3, #4]
    fe28:	68bb      	ldr	r3, [r7, #8]
    fe2a:	429a      	cmp	r2, r3
    fe2c:	d8f4      	bhi.n	fe18 <system_gclk_gen_set_config+0x6c>
    fe2e:	68fb      	ldr	r3, [r7, #12]
    fe30:	021b      	lsls	r3, r3, #8
    fe32:	693a      	ldr	r2, [r7, #16]
    fe34:	4313      	orrs	r3, r2
    fe36:	613b      	str	r3, [r7, #16]
    fe38:	697b      	ldr	r3, [r7, #20]
    fe3a:	2280      	movs	r2, #128	; 0x80
    fe3c:	0352      	lsls	r2, r2, #13
    fe3e:	4313      	orrs	r3, r2
    fe40:	617b      	str	r3, [r7, #20]
    fe42:	e00a      	b.n	fe5a <system_gclk_gen_set_config+0xae>
    fe44:	683b      	ldr	r3, [r7, #0]
    fe46:	685b      	ldr	r3, [r3, #4]
    fe48:	021b      	lsls	r3, r3, #8
    fe4a:	693a      	ldr	r2, [r7, #16]
    fe4c:	4313      	orrs	r3, r2
    fe4e:	613b      	str	r3, [r7, #16]
    fe50:	697b      	ldr	r3, [r7, #20]
    fe52:	2280      	movs	r2, #128	; 0x80
    fe54:	0292      	lsls	r2, r2, #10
    fe56:	4313      	orrs	r3, r2
    fe58:	617b      	str	r3, [r7, #20]
    fe5a:	683b      	ldr	r3, [r7, #0]
    fe5c:	7a1b      	ldrb	r3, [r3, #8]
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d004      	beq.n	fe6c <system_gclk_gen_set_config+0xc0>
    fe62:	697b      	ldr	r3, [r7, #20]
    fe64:	2280      	movs	r2, #128	; 0x80
    fe66:	0392      	lsls	r2, r2, #14
    fe68:	4313      	orrs	r3, r2
    fe6a:	617b      	str	r3, [r7, #20]
    fe6c:	46c0      	nop			; (mov r8, r8)
    fe6e:	4b15      	ldr	r3, [pc, #84]	; (fec4 <system_gclk_gen_set_config+0x118>)
    fe70:	447b      	add	r3, pc
    fe72:	4798      	blx	r3
    fe74:	1e03      	subs	r3, r0, #0
    fe76:	d1fa      	bne.n	fe6e <system_gclk_gen_set_config+0xc2>
    fe78:	4b13      	ldr	r3, [pc, #76]	; (fec8 <system_gclk_gen_set_config+0x11c>)
    fe7a:	447b      	add	r3, pc
    fe7c:	4798      	blx	r3
    fe7e:	4a13      	ldr	r2, [pc, #76]	; (fecc <system_gclk_gen_set_config+0x120>)
    fe80:	1dfb      	adds	r3, r7, #7
    fe82:	781b      	ldrb	r3, [r3, #0]
    fe84:	7013      	strb	r3, [r2, #0]
    fe86:	46c0      	nop			; (mov r8, r8)
    fe88:	4b11      	ldr	r3, [pc, #68]	; (fed0 <system_gclk_gen_set_config+0x124>)
    fe8a:	447b      	add	r3, pc
    fe8c:	4798      	blx	r3
    fe8e:	1e03      	subs	r3, r0, #0
    fe90:	d1fa      	bne.n	fe88 <system_gclk_gen_set_config+0xdc>
    fe92:	4b10      	ldr	r3, [pc, #64]	; (fed4 <system_gclk_gen_set_config+0x128>)
    fe94:	693a      	ldr	r2, [r7, #16]
    fe96:	609a      	str	r2, [r3, #8]
    fe98:	46c0      	nop			; (mov r8, r8)
    fe9a:	4b0f      	ldr	r3, [pc, #60]	; (fed8 <system_gclk_gen_set_config+0x12c>)
    fe9c:	447b      	add	r3, pc
    fe9e:	4798      	blx	r3
    fea0:	1e03      	subs	r3, r0, #0
    fea2:	d1fa      	bne.n	fe9a <system_gclk_gen_set_config+0xee>
    fea4:	4b0b      	ldr	r3, [pc, #44]	; (fed4 <system_gclk_gen_set_config+0x128>)
    fea6:	4a0b      	ldr	r2, [pc, #44]	; (fed4 <system_gclk_gen_set_config+0x128>)
    fea8:	6851      	ldr	r1, [r2, #4]
    feaa:	2280      	movs	r2, #128	; 0x80
    feac:	0252      	lsls	r2, r2, #9
    feae:	4011      	ands	r1, r2
    feb0:	697a      	ldr	r2, [r7, #20]
    feb2:	430a      	orrs	r2, r1
    feb4:	605a      	str	r2, [r3, #4]
    feb6:	4b09      	ldr	r3, [pc, #36]	; (fedc <system_gclk_gen_set_config+0x130>)
    feb8:	447b      	add	r3, pc
    feba:	4798      	blx	r3
    febc:	46c0      	nop			; (mov r8, r8)
    febe:	46bd      	mov	sp, r7
    fec0:	b006      	add	sp, #24
    fec2:	bd80      	pop	{r7, pc}
    fec4:	fffffee5 	.word	0xfffffee5
    fec8:	fffffea3 	.word	0xfffffea3
    fecc:	40000c08 	.word	0x40000c08
    fed0:	fffffecb 	.word	0xfffffecb
    fed4:	40000c00 	.word	0x40000c00
    fed8:	fffffeb9 	.word	0xfffffeb9
    fedc:	fffffe81 	.word	0xfffffe81

0000fee0 <system_gclk_gen_enable>:
    fee0:	b580      	push	{r7, lr}
    fee2:	b082      	sub	sp, #8
    fee4:	af00      	add	r7, sp, #0
    fee6:	0002      	movs	r2, r0
    fee8:	1dfb      	adds	r3, r7, #7
    feea:	701a      	strb	r2, [r3, #0]
    feec:	46c0      	nop			; (mov r8, r8)
    feee:	4b10      	ldr	r3, [pc, #64]	; (ff30 <system_gclk_gen_enable+0x50>)
    fef0:	447b      	add	r3, pc
    fef2:	4798      	blx	r3
    fef4:	1e03      	subs	r3, r0, #0
    fef6:	d1fa      	bne.n	feee <system_gclk_gen_enable+0xe>
    fef8:	4b0e      	ldr	r3, [pc, #56]	; (ff34 <system_gclk_gen_enable+0x54>)
    fefa:	447b      	add	r3, pc
    fefc:	4798      	blx	r3
    fefe:	4a0e      	ldr	r2, [pc, #56]	; (ff38 <system_gclk_gen_enable+0x58>)
    ff00:	1dfb      	adds	r3, r7, #7
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	7013      	strb	r3, [r2, #0]
    ff06:	46c0      	nop			; (mov r8, r8)
    ff08:	4b0c      	ldr	r3, [pc, #48]	; (ff3c <system_gclk_gen_enable+0x5c>)
    ff0a:	447b      	add	r3, pc
    ff0c:	4798      	blx	r3
    ff0e:	1e03      	subs	r3, r0, #0
    ff10:	d1fa      	bne.n	ff08 <system_gclk_gen_enable+0x28>
    ff12:	4b0b      	ldr	r3, [pc, #44]	; (ff40 <system_gclk_gen_enable+0x60>)
    ff14:	4a0a      	ldr	r2, [pc, #40]	; (ff40 <system_gclk_gen_enable+0x60>)
    ff16:	6852      	ldr	r2, [r2, #4]
    ff18:	2180      	movs	r1, #128	; 0x80
    ff1a:	0249      	lsls	r1, r1, #9
    ff1c:	430a      	orrs	r2, r1
    ff1e:	605a      	str	r2, [r3, #4]
    ff20:	4b08      	ldr	r3, [pc, #32]	; (ff44 <system_gclk_gen_enable+0x64>)
    ff22:	447b      	add	r3, pc
    ff24:	4798      	blx	r3
    ff26:	46c0      	nop			; (mov r8, r8)
    ff28:	46bd      	mov	sp, r7
    ff2a:	b002      	add	sp, #8
    ff2c:	bd80      	pop	{r7, pc}
    ff2e:	46c0      	nop			; (mov r8, r8)
    ff30:	fffffe65 	.word	0xfffffe65
    ff34:	fffffe23 	.word	0xfffffe23
    ff38:	40000c04 	.word	0x40000c04
    ff3c:	fffffe4b 	.word	0xfffffe4b
    ff40:	40000c00 	.word	0x40000c00
    ff44:	fffffe17 	.word	0xfffffe17

0000ff48 <system_gclk_gen_get_hz>:
    ff48:	b590      	push	{r4, r7, lr}
    ff4a:	b087      	sub	sp, #28
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	0002      	movs	r2, r0
    ff50:	1dfb      	adds	r3, r7, #7
    ff52:	701a      	strb	r2, [r3, #0]
    ff54:	4c2f      	ldr	r4, [pc, #188]	; (10014 <system_gclk_gen_get_hz+0xcc>)
    ff56:	447c      	add	r4, pc
    ff58:	46c0      	nop			; (mov r8, r8)
    ff5a:	4b2f      	ldr	r3, [pc, #188]	; (10018 <system_gclk_gen_get_hz+0xd0>)
    ff5c:	447b      	add	r3, pc
    ff5e:	4798      	blx	r3
    ff60:	1e03      	subs	r3, r0, #0
    ff62:	d1fa      	bne.n	ff5a <system_gclk_gen_get_hz+0x12>
    ff64:	4b2d      	ldr	r3, [pc, #180]	; (1001c <system_gclk_gen_get_hz+0xd4>)
    ff66:	447b      	add	r3, pc
    ff68:	4798      	blx	r3
    ff6a:	4a2d      	ldr	r2, [pc, #180]	; (10020 <system_gclk_gen_get_hz+0xd8>)
    ff6c:	1dfb      	adds	r3, r7, #7
    ff6e:	781b      	ldrb	r3, [r3, #0]
    ff70:	7013      	strb	r3, [r2, #0]
    ff72:	46c0      	nop			; (mov r8, r8)
    ff74:	4b2b      	ldr	r3, [pc, #172]	; (10024 <system_gclk_gen_get_hz+0xdc>)
    ff76:	447b      	add	r3, pc
    ff78:	4798      	blx	r3
    ff7a:	1e03      	subs	r3, r0, #0
    ff7c:	d1fa      	bne.n	ff74 <system_gclk_gen_get_hz+0x2c>
    ff7e:	4b2a      	ldr	r3, [pc, #168]	; (10028 <system_gclk_gen_get_hz+0xe0>)
    ff80:	685b      	ldr	r3, [r3, #4]
    ff82:	04db      	lsls	r3, r3, #19
    ff84:	0edb      	lsrs	r3, r3, #27
    ff86:	b2db      	uxtb	r3, r3
    ff88:	0018      	movs	r0, r3
    ff8a:	4b28      	ldr	r3, [pc, #160]	; (1002c <system_gclk_gen_get_hz+0xe4>)
    ff8c:	58e3      	ldr	r3, [r4, r3]
    ff8e:	4798      	blx	r3
    ff90:	0003      	movs	r3, r0
    ff92:	617b      	str	r3, [r7, #20]
    ff94:	4a22      	ldr	r2, [pc, #136]	; (10020 <system_gclk_gen_get_hz+0xd8>)
    ff96:	1dfb      	adds	r3, r7, #7
    ff98:	781b      	ldrb	r3, [r3, #0]
    ff9a:	7013      	strb	r3, [r2, #0]
    ff9c:	4b22      	ldr	r3, [pc, #136]	; (10028 <system_gclk_gen_get_hz+0xe0>)
    ff9e:	685b      	ldr	r3, [r3, #4]
    ffa0:	02db      	lsls	r3, r3, #11
    ffa2:	0fdb      	lsrs	r3, r3, #31
    ffa4:	b2da      	uxtb	r2, r3
    ffa6:	2313      	movs	r3, #19
    ffa8:	18fb      	adds	r3, r7, r3
    ffaa:	701a      	strb	r2, [r3, #0]
    ffac:	4a20      	ldr	r2, [pc, #128]	; (10030 <system_gclk_gen_get_hz+0xe8>)
    ffae:	1dfb      	adds	r3, r7, #7
    ffb0:	781b      	ldrb	r3, [r3, #0]
    ffb2:	7013      	strb	r3, [r2, #0]
    ffb4:	46c0      	nop			; (mov r8, r8)
    ffb6:	4b1f      	ldr	r3, [pc, #124]	; (10034 <system_gclk_gen_get_hz+0xec>)
    ffb8:	447b      	add	r3, pc
    ffba:	4798      	blx	r3
    ffbc:	1e03      	subs	r3, r0, #0
    ffbe:	d1fa      	bne.n	ffb6 <system_gclk_gen_get_hz+0x6e>
    ffc0:	4b19      	ldr	r3, [pc, #100]	; (10028 <system_gclk_gen_get_hz+0xe0>)
    ffc2:	689b      	ldr	r3, [r3, #8]
    ffc4:	021b      	lsls	r3, r3, #8
    ffc6:	0c1b      	lsrs	r3, r3, #16
    ffc8:	b29b      	uxth	r3, r3
    ffca:	60fb      	str	r3, [r7, #12]
    ffcc:	4b1a      	ldr	r3, [pc, #104]	; (10038 <system_gclk_gen_get_hz+0xf0>)
    ffce:	447b      	add	r3, pc
    ffd0:	4798      	blx	r3
    ffd2:	2313      	movs	r3, #19
    ffd4:	18fb      	adds	r3, r7, r3
    ffd6:	781b      	ldrb	r3, [r3, #0]
    ffd8:	2b00      	cmp	r3, #0
    ffda:	d10a      	bne.n	fff2 <system_gclk_gen_get_hz+0xaa>
    ffdc:	68fb      	ldr	r3, [r7, #12]
    ffde:	2b01      	cmp	r3, #1
    ffe0:	d907      	bls.n	fff2 <system_gclk_gen_get_hz+0xaa>
    ffe2:	4b16      	ldr	r3, [pc, #88]	; (1003c <system_gclk_gen_get_hz+0xf4>)
    ffe4:	58e3      	ldr	r3, [r4, r3]
    ffe6:	68f9      	ldr	r1, [r7, #12]
    ffe8:	6978      	ldr	r0, [r7, #20]
    ffea:	4798      	blx	r3
    ffec:	0003      	movs	r3, r0
    ffee:	617b      	str	r3, [r7, #20]
    fff0:	e00a      	b.n	10008 <system_gclk_gen_get_hz+0xc0>
    fff2:	2313      	movs	r3, #19
    fff4:	18fb      	adds	r3, r7, r3
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	2b00      	cmp	r3, #0
    fffa:	d005      	beq.n	10008 <system_gclk_gen_get_hz+0xc0>
    fffc:	68fb      	ldr	r3, [r7, #12]
    fffe:	3301      	adds	r3, #1
   10000:	697a      	ldr	r2, [r7, #20]
   10002:	40da      	lsrs	r2, r3
   10004:	0013      	movs	r3, r2
   10006:	617b      	str	r3, [r7, #20]
   10008:	697b      	ldr	r3, [r7, #20]
   1000a:	0018      	movs	r0, r3
   1000c:	46bd      	mov	sp, r7
   1000e:	b007      	add	sp, #28
   10010:	bd90      	pop	{r4, r7, pc}
   10012:	46c0      	nop			; (mov r8, r8)
   10014:	00001e8a 	.word	0x00001e8a
   10018:	fffffdf9 	.word	0xfffffdf9
   1001c:	fffffdb7 	.word	0xfffffdb7
   10020:	40000c04 	.word	0x40000c04
   10024:	fffffddf 	.word	0xfffffddf
   10028:	40000c00 	.word	0x40000c00
   1002c:	0000026c 	.word	0x0000026c
   10030:	40000c08 	.word	0x40000c08
   10034:	fffffd9d 	.word	0xfffffd9d
   10038:	fffffd6b 	.word	0xfffffd6b
   1003c:	0000020c 	.word	0x0000020c

00010040 <system_gclk_chan_set_config>:
   10040:	b580      	push	{r7, lr}
   10042:	b084      	sub	sp, #16
   10044:	af00      	add	r7, sp, #0
   10046:	0002      	movs	r2, r0
   10048:	6039      	str	r1, [r7, #0]
   1004a:	1dfb      	adds	r3, r7, #7
   1004c:	701a      	strb	r2, [r3, #0]
   1004e:	4a0d      	ldr	r2, [pc, #52]	; (10084 <system_gclk_chan_set_config+0x44>)
   10050:	447a      	add	r2, pc
   10052:	1dfb      	adds	r3, r7, #7
   10054:	781b      	ldrb	r3, [r3, #0]
   10056:	60fb      	str	r3, [r7, #12]
   10058:	683b      	ldr	r3, [r7, #0]
   1005a:	781b      	ldrb	r3, [r3, #0]
   1005c:	021b      	lsls	r3, r3, #8
   1005e:	0019      	movs	r1, r3
   10060:	68fb      	ldr	r3, [r7, #12]
   10062:	430b      	orrs	r3, r1
   10064:	60fb      	str	r3, [r7, #12]
   10066:	1dfb      	adds	r3, r7, #7
   10068:	781b      	ldrb	r3, [r3, #0]
   1006a:	0018      	movs	r0, r3
   1006c:	4b06      	ldr	r3, [pc, #24]	; (10088 <system_gclk_chan_set_config+0x48>)
   1006e:	58d3      	ldr	r3, [r2, r3]
   10070:	4798      	blx	r3
   10072:	4b06      	ldr	r3, [pc, #24]	; (1008c <system_gclk_chan_set_config+0x4c>)
   10074:	68fa      	ldr	r2, [r7, #12]
   10076:	b292      	uxth	r2, r2
   10078:	805a      	strh	r2, [r3, #2]
   1007a:	46c0      	nop			; (mov r8, r8)
   1007c:	46bd      	mov	sp, r7
   1007e:	b004      	add	sp, #16
   10080:	bd80      	pop	{r7, pc}
   10082:	46c0      	nop			; (mov r8, r8)
   10084:	00001d90 	.word	0x00001d90
   10088:	00000290 	.word	0x00000290
   1008c:	40000c00 	.word	0x40000c00

00010090 <system_gclk_chan_enable>:
   10090:	b580      	push	{r7, lr}
   10092:	b082      	sub	sp, #8
   10094:	af00      	add	r7, sp, #0
   10096:	0002      	movs	r2, r0
   10098:	1dfb      	adds	r3, r7, #7
   1009a:	701a      	strb	r2, [r3, #0]
   1009c:	4b0b      	ldr	r3, [pc, #44]	; (100cc <system_gclk_chan_enable+0x3c>)
   1009e:	447b      	add	r3, pc
   100a0:	4798      	blx	r3
   100a2:	4a0b      	ldr	r2, [pc, #44]	; (100d0 <system_gclk_chan_enable+0x40>)
   100a4:	1dfb      	adds	r3, r7, #7
   100a6:	781b      	ldrb	r3, [r3, #0]
   100a8:	7013      	strb	r3, [r2, #0]
   100aa:	490a      	ldr	r1, [pc, #40]	; (100d4 <system_gclk_chan_enable+0x44>)
   100ac:	4b09      	ldr	r3, [pc, #36]	; (100d4 <system_gclk_chan_enable+0x44>)
   100ae:	885b      	ldrh	r3, [r3, #2]
   100b0:	b29b      	uxth	r3, r3
   100b2:	2280      	movs	r2, #128	; 0x80
   100b4:	01d2      	lsls	r2, r2, #7
   100b6:	4313      	orrs	r3, r2
   100b8:	b29b      	uxth	r3, r3
   100ba:	804b      	strh	r3, [r1, #2]
   100bc:	4b06      	ldr	r3, [pc, #24]	; (100d8 <system_gclk_chan_enable+0x48>)
   100be:	447b      	add	r3, pc
   100c0:	4798      	blx	r3
   100c2:	46c0      	nop			; (mov r8, r8)
   100c4:	46bd      	mov	sp, r7
   100c6:	b002      	add	sp, #8
   100c8:	bd80      	pop	{r7, pc}
   100ca:	46c0      	nop			; (mov r8, r8)
   100cc:	fffffc7f 	.word	0xfffffc7f
   100d0:	40000c02 	.word	0x40000c02
   100d4:	40000c00 	.word	0x40000c00
   100d8:	fffffc7b 	.word	0xfffffc7b

000100dc <system_gclk_chan_disable>:
   100dc:	b580      	push	{r7, lr}
   100de:	b084      	sub	sp, #16
   100e0:	af00      	add	r7, sp, #0
   100e2:	0002      	movs	r2, r0
   100e4:	1dfb      	adds	r3, r7, #7
   100e6:	701a      	strb	r2, [r3, #0]
   100e8:	4b1d      	ldr	r3, [pc, #116]	; (10160 <system_gclk_chan_disable+0x84>)
   100ea:	447b      	add	r3, pc
   100ec:	4798      	blx	r3
   100ee:	4a1d      	ldr	r2, [pc, #116]	; (10164 <system_gclk_chan_disable+0x88>)
   100f0:	1dfb      	adds	r3, r7, #7
   100f2:	781b      	ldrb	r3, [r3, #0]
   100f4:	7013      	strb	r3, [r2, #0]
   100f6:	4b1c      	ldr	r3, [pc, #112]	; (10168 <system_gclk_chan_disable+0x8c>)
   100f8:	885b      	ldrh	r3, [r3, #2]
   100fa:	051b      	lsls	r3, r3, #20
   100fc:	0f1b      	lsrs	r3, r3, #28
   100fe:	b2db      	uxtb	r3, r3
   10100:	60fb      	str	r3, [r7, #12]
   10102:	4a19      	ldr	r2, [pc, #100]	; (10168 <system_gclk_chan_disable+0x8c>)
   10104:	8853      	ldrh	r3, [r2, #2]
   10106:	4919      	ldr	r1, [pc, #100]	; (1016c <system_gclk_chan_disable+0x90>)
   10108:	400b      	ands	r3, r1
   1010a:	8053      	strh	r3, [r2, #2]
   1010c:	4a16      	ldr	r2, [pc, #88]	; (10168 <system_gclk_chan_disable+0x8c>)
   1010e:	4b16      	ldr	r3, [pc, #88]	; (10168 <system_gclk_chan_disable+0x8c>)
   10110:	885b      	ldrh	r3, [r3, #2]
   10112:	b29b      	uxth	r3, r3
   10114:	4916      	ldr	r1, [pc, #88]	; (10170 <system_gclk_chan_disable+0x94>)
   10116:	400b      	ands	r3, r1
   10118:	b29b      	uxth	r3, r3
   1011a:	8053      	strh	r3, [r2, #2]
   1011c:	46c0      	nop			; (mov r8, r8)
   1011e:	4b12      	ldr	r3, [pc, #72]	; (10168 <system_gclk_chan_disable+0x8c>)
   10120:	885b      	ldrh	r3, [r3, #2]
   10122:	b29b      	uxth	r3, r3
   10124:	001a      	movs	r2, r3
   10126:	2380      	movs	r3, #128	; 0x80
   10128:	01db      	lsls	r3, r3, #7
   1012a:	4013      	ands	r3, r2
   1012c:	d1f7      	bne.n	1011e <system_gclk_chan_disable+0x42>
   1012e:	4a0e      	ldr	r2, [pc, #56]	; (10168 <system_gclk_chan_disable+0x8c>)
   10130:	68fb      	ldr	r3, [r7, #12]
   10132:	b2db      	uxtb	r3, r3
   10134:	1c19      	adds	r1, r3, #0
   10136:	230f      	movs	r3, #15
   10138:	400b      	ands	r3, r1
   1013a:	b2d9      	uxtb	r1, r3
   1013c:	8853      	ldrh	r3, [r2, #2]
   1013e:	1c08      	adds	r0, r1, #0
   10140:	210f      	movs	r1, #15
   10142:	4001      	ands	r1, r0
   10144:	0208      	lsls	r0, r1, #8
   10146:	4909      	ldr	r1, [pc, #36]	; (1016c <system_gclk_chan_disable+0x90>)
   10148:	400b      	ands	r3, r1
   1014a:	1c19      	adds	r1, r3, #0
   1014c:	1c03      	adds	r3, r0, #0
   1014e:	430b      	orrs	r3, r1
   10150:	8053      	strh	r3, [r2, #2]
   10152:	4b08      	ldr	r3, [pc, #32]	; (10174 <system_gclk_chan_disable+0x98>)
   10154:	447b      	add	r3, pc
   10156:	4798      	blx	r3
   10158:	46c0      	nop			; (mov r8, r8)
   1015a:	46bd      	mov	sp, r7
   1015c:	b004      	add	sp, #16
   1015e:	bd80      	pop	{r7, pc}
   10160:	fffffc33 	.word	0xfffffc33
   10164:	40000c02 	.word	0x40000c02
   10168:	40000c00 	.word	0x40000c00
   1016c:	fffff0ff 	.word	0xfffff0ff
   10170:	ffffbfff 	.word	0xffffbfff
   10174:	fffffbe5 	.word	0xfffffbe5

00010178 <system_gclk_chan_get_hz>:
   10178:	b590      	push	{r4, r7, lr}
   1017a:	b085      	sub	sp, #20
   1017c:	af00      	add	r7, sp, #0
   1017e:	0002      	movs	r2, r0
   10180:	1dfb      	adds	r3, r7, #7
   10182:	701a      	strb	r2, [r3, #0]
   10184:	4c0f      	ldr	r4, [pc, #60]	; (101c4 <system_gclk_chan_get_hz+0x4c>)
   10186:	447c      	add	r4, pc
   10188:	4b0f      	ldr	r3, [pc, #60]	; (101c8 <system_gclk_chan_get_hz+0x50>)
   1018a:	447b      	add	r3, pc
   1018c:	4798      	blx	r3
   1018e:	4a0f      	ldr	r2, [pc, #60]	; (101cc <system_gclk_chan_get_hz+0x54>)
   10190:	1dfb      	adds	r3, r7, #7
   10192:	781b      	ldrb	r3, [r3, #0]
   10194:	7013      	strb	r3, [r2, #0]
   10196:	4b0e      	ldr	r3, [pc, #56]	; (101d0 <system_gclk_chan_get_hz+0x58>)
   10198:	885b      	ldrh	r3, [r3, #2]
   1019a:	051b      	lsls	r3, r3, #20
   1019c:	0f1b      	lsrs	r3, r3, #28
   1019e:	b2da      	uxtb	r2, r3
   101a0:	230f      	movs	r3, #15
   101a2:	18fb      	adds	r3, r7, r3
   101a4:	701a      	strb	r2, [r3, #0]
   101a6:	4b0b      	ldr	r3, [pc, #44]	; (101d4 <system_gclk_chan_get_hz+0x5c>)
   101a8:	447b      	add	r3, pc
   101aa:	4798      	blx	r3
   101ac:	230f      	movs	r3, #15
   101ae:	18fb      	adds	r3, r7, r3
   101b0:	781b      	ldrb	r3, [r3, #0]
   101b2:	0018      	movs	r0, r3
   101b4:	4b08      	ldr	r3, [pc, #32]	; (101d8 <system_gclk_chan_get_hz+0x60>)
   101b6:	58e3      	ldr	r3, [r4, r3]
   101b8:	4798      	blx	r3
   101ba:	0003      	movs	r3, r0
   101bc:	0018      	movs	r0, r3
   101be:	46bd      	mov	sp, r7
   101c0:	b005      	add	sp, #20
   101c2:	bd90      	pop	{r4, r7, pc}
   101c4:	00001c5a 	.word	0x00001c5a
   101c8:	fffffb93 	.word	0xfffffb93
   101cc:	40000c02 	.word	0x40000c02
   101d0:	40000c00 	.word	0x40000c00
   101d4:	fffffb91 	.word	0xfffffb91
   101d8:	000000e0 	.word	0x000000e0

000101dc <system_pinmux_get_group_from_gpio_pin>:
   101dc:	b580      	push	{r7, lr}
   101de:	b084      	sub	sp, #16
   101e0:	af00      	add	r7, sp, #0
   101e2:	0002      	movs	r2, r0
   101e4:	1dfb      	adds	r3, r7, #7
   101e6:	701a      	strb	r2, [r3, #0]
   101e8:	230f      	movs	r3, #15
   101ea:	18fb      	adds	r3, r7, r3
   101ec:	1dfa      	adds	r2, r7, #7
   101ee:	7812      	ldrb	r2, [r2, #0]
   101f0:	09d2      	lsrs	r2, r2, #7
   101f2:	701a      	strb	r2, [r3, #0]
   101f4:	230e      	movs	r3, #14
   101f6:	18fb      	adds	r3, r7, r3
   101f8:	1dfa      	adds	r2, r7, #7
   101fa:	7812      	ldrb	r2, [r2, #0]
   101fc:	0952      	lsrs	r2, r2, #5
   101fe:	701a      	strb	r2, [r3, #0]
   10200:	4b0d      	ldr	r3, [pc, #52]	; (10238 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10202:	60bb      	str	r3, [r7, #8]
   10204:	230f      	movs	r3, #15
   10206:	18fb      	adds	r3, r7, r3
   10208:	781b      	ldrb	r3, [r3, #0]
   1020a:	2b00      	cmp	r3, #0
   1020c:	d10f      	bne.n	1022e <system_pinmux_get_group_from_gpio_pin+0x52>
   1020e:	230f      	movs	r3, #15
   10210:	18fb      	adds	r3, r7, r3
   10212:	781b      	ldrb	r3, [r3, #0]
   10214:	009b      	lsls	r3, r3, #2
   10216:	2210      	movs	r2, #16
   10218:	4694      	mov	ip, r2
   1021a:	44bc      	add	ip, r7
   1021c:	4463      	add	r3, ip
   1021e:	3b08      	subs	r3, #8
   10220:	681a      	ldr	r2, [r3, #0]
   10222:	230e      	movs	r3, #14
   10224:	18fb      	adds	r3, r7, r3
   10226:	781b      	ldrb	r3, [r3, #0]
   10228:	01db      	lsls	r3, r3, #7
   1022a:	18d3      	adds	r3, r2, r3
   1022c:	e000      	b.n	10230 <system_pinmux_get_group_from_gpio_pin+0x54>
   1022e:	2300      	movs	r3, #0
   10230:	0018      	movs	r0, r3
   10232:	46bd      	mov	sp, r7
   10234:	b004      	add	sp, #16
   10236:	bd80      	pop	{r7, pc}
   10238:	41004400 	.word	0x41004400

0001023c <_system_pinmux_config>:
   1023c:	b580      	push	{r7, lr}
   1023e:	b088      	sub	sp, #32
   10240:	af00      	add	r7, sp, #0
   10242:	60f8      	str	r0, [r7, #12]
   10244:	60b9      	str	r1, [r7, #8]
   10246:	607a      	str	r2, [r7, #4]
   10248:	2300      	movs	r3, #0
   1024a:	61fb      	str	r3, [r7, #28]
   1024c:	687b      	ldr	r3, [r7, #4]
   1024e:	78db      	ldrb	r3, [r3, #3]
   10250:	2201      	movs	r2, #1
   10252:	4053      	eors	r3, r2
   10254:	b2db      	uxtb	r3, r3
   10256:	2b00      	cmp	r3, #0
   10258:	d035      	beq.n	102c6 <_system_pinmux_config+0x8a>
   1025a:	687b      	ldr	r3, [r7, #4]
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	2b80      	cmp	r3, #128	; 0x80
   10260:	d00b      	beq.n	1027a <_system_pinmux_config+0x3e>
   10262:	69fb      	ldr	r3, [r7, #28]
   10264:	2280      	movs	r2, #128	; 0x80
   10266:	0252      	lsls	r2, r2, #9
   10268:	4313      	orrs	r3, r2
   1026a:	61fb      	str	r3, [r7, #28]
   1026c:	687b      	ldr	r3, [r7, #4]
   1026e:	781b      	ldrb	r3, [r3, #0]
   10270:	061b      	lsls	r3, r3, #24
   10272:	001a      	movs	r2, r3
   10274:	69fb      	ldr	r3, [r7, #28]
   10276:	4313      	orrs	r3, r2
   10278:	61fb      	str	r3, [r7, #28]
   1027a:	687b      	ldr	r3, [r7, #4]
   1027c:	785b      	ldrb	r3, [r3, #1]
   1027e:	2b00      	cmp	r3, #0
   10280:	d003      	beq.n	1028a <_system_pinmux_config+0x4e>
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	785b      	ldrb	r3, [r3, #1]
   10286:	2b02      	cmp	r3, #2
   10288:	d110      	bne.n	102ac <_system_pinmux_config+0x70>
   1028a:	69fb      	ldr	r3, [r7, #28]
   1028c:	2280      	movs	r2, #128	; 0x80
   1028e:	0292      	lsls	r2, r2, #10
   10290:	4313      	orrs	r3, r2
   10292:	61fb      	str	r3, [r7, #28]
   10294:	687b      	ldr	r3, [r7, #4]
   10296:	789b      	ldrb	r3, [r3, #2]
   10298:	2b00      	cmp	r3, #0
   1029a:	d004      	beq.n	102a6 <_system_pinmux_config+0x6a>
   1029c:	69fb      	ldr	r3, [r7, #28]
   1029e:	2280      	movs	r2, #128	; 0x80
   102a0:	02d2      	lsls	r2, r2, #11
   102a2:	4313      	orrs	r3, r2
   102a4:	61fb      	str	r3, [r7, #28]
   102a6:	68fb      	ldr	r3, [r7, #12]
   102a8:	68ba      	ldr	r2, [r7, #8]
   102aa:	605a      	str	r2, [r3, #4]
   102ac:	687b      	ldr	r3, [r7, #4]
   102ae:	785b      	ldrb	r3, [r3, #1]
   102b0:	2b01      	cmp	r3, #1
   102b2:	d003      	beq.n	102bc <_system_pinmux_config+0x80>
   102b4:	687b      	ldr	r3, [r7, #4]
   102b6:	785b      	ldrb	r3, [r3, #1]
   102b8:	2b02      	cmp	r3, #2
   102ba:	d107      	bne.n	102cc <_system_pinmux_config+0x90>
   102bc:	69fb      	ldr	r3, [r7, #28]
   102be:	4a22      	ldr	r2, [pc, #136]	; (10348 <_system_pinmux_config+0x10c>)
   102c0:	4013      	ands	r3, r2
   102c2:	61fb      	str	r3, [r7, #28]
   102c4:	e002      	b.n	102cc <_system_pinmux_config+0x90>
   102c6:	68fb      	ldr	r3, [r7, #12]
   102c8:	68ba      	ldr	r2, [r7, #8]
   102ca:	605a      	str	r2, [r3, #4]
   102cc:	68bb      	ldr	r3, [r7, #8]
   102ce:	041b      	lsls	r3, r3, #16
   102d0:	0c1b      	lsrs	r3, r3, #16
   102d2:	61bb      	str	r3, [r7, #24]
   102d4:	68bb      	ldr	r3, [r7, #8]
   102d6:	0c1b      	lsrs	r3, r3, #16
   102d8:	617b      	str	r3, [r7, #20]
   102da:	69ba      	ldr	r2, [r7, #24]
   102dc:	69fb      	ldr	r3, [r7, #28]
   102de:	4313      	orrs	r3, r2
   102e0:	22a0      	movs	r2, #160	; 0xa0
   102e2:	05d2      	lsls	r2, r2, #23
   102e4:	431a      	orrs	r2, r3
   102e6:	68fb      	ldr	r3, [r7, #12]
   102e8:	629a      	str	r2, [r3, #40]	; 0x28
   102ea:	697a      	ldr	r2, [r7, #20]
   102ec:	69fb      	ldr	r3, [r7, #28]
   102ee:	4313      	orrs	r3, r2
   102f0:	22d0      	movs	r2, #208	; 0xd0
   102f2:	0612      	lsls	r2, r2, #24
   102f4:	431a      	orrs	r2, r3
   102f6:	68fb      	ldr	r3, [r7, #12]
   102f8:	629a      	str	r2, [r3, #40]	; 0x28
   102fa:	687b      	ldr	r3, [r7, #4]
   102fc:	78db      	ldrb	r3, [r3, #3]
   102fe:	2201      	movs	r2, #1
   10300:	4053      	eors	r3, r2
   10302:	b2db      	uxtb	r3, r3
   10304:	2b00      	cmp	r3, #0
   10306:	d01a      	beq.n	1033e <_system_pinmux_config+0x102>
   10308:	69fa      	ldr	r2, [r7, #28]
   1030a:	2380      	movs	r3, #128	; 0x80
   1030c:	02db      	lsls	r3, r3, #11
   1030e:	4013      	ands	r3, r2
   10310:	d00a      	beq.n	10328 <_system_pinmux_config+0xec>
   10312:	687b      	ldr	r3, [r7, #4]
   10314:	789b      	ldrb	r3, [r3, #2]
   10316:	2b01      	cmp	r3, #1
   10318:	d103      	bne.n	10322 <_system_pinmux_config+0xe6>
   1031a:	68fb      	ldr	r3, [r7, #12]
   1031c:	68ba      	ldr	r2, [r7, #8]
   1031e:	619a      	str	r2, [r3, #24]
   10320:	e002      	b.n	10328 <_system_pinmux_config+0xec>
   10322:	68fb      	ldr	r3, [r7, #12]
   10324:	68ba      	ldr	r2, [r7, #8]
   10326:	615a      	str	r2, [r3, #20]
   10328:	687b      	ldr	r3, [r7, #4]
   1032a:	785b      	ldrb	r3, [r3, #1]
   1032c:	2b01      	cmp	r3, #1
   1032e:	d003      	beq.n	10338 <_system_pinmux_config+0xfc>
   10330:	687b      	ldr	r3, [r7, #4]
   10332:	785b      	ldrb	r3, [r3, #1]
   10334:	2b02      	cmp	r3, #2
   10336:	d102      	bne.n	1033e <_system_pinmux_config+0x102>
   10338:	68fb      	ldr	r3, [r7, #12]
   1033a:	68ba      	ldr	r2, [r7, #8]
   1033c:	609a      	str	r2, [r3, #8]
   1033e:	46c0      	nop			; (mov r8, r8)
   10340:	46bd      	mov	sp, r7
   10342:	b008      	add	sp, #32
   10344:	bd80      	pop	{r7, pc}
   10346:	46c0      	nop			; (mov r8, r8)
   10348:	fffbffff 	.word	0xfffbffff

0001034c <system_pinmux_pin_set_config>:
   1034c:	b580      	push	{r7, lr}
   1034e:	b084      	sub	sp, #16
   10350:	af00      	add	r7, sp, #0
   10352:	0002      	movs	r2, r0
   10354:	6039      	str	r1, [r7, #0]
   10356:	1dfb      	adds	r3, r7, #7
   10358:	701a      	strb	r2, [r3, #0]
   1035a:	1dfb      	adds	r3, r7, #7
   1035c:	781b      	ldrb	r3, [r3, #0]
   1035e:	0018      	movs	r0, r3
   10360:	4b0b      	ldr	r3, [pc, #44]	; (10390 <system_pinmux_pin_set_config+0x44>)
   10362:	447b      	add	r3, pc
   10364:	4798      	blx	r3
   10366:	0003      	movs	r3, r0
   10368:	60fb      	str	r3, [r7, #12]
   1036a:	1dfb      	adds	r3, r7, #7
   1036c:	781b      	ldrb	r3, [r3, #0]
   1036e:	221f      	movs	r2, #31
   10370:	4013      	ands	r3, r2
   10372:	2201      	movs	r2, #1
   10374:	409a      	lsls	r2, r3
   10376:	0013      	movs	r3, r2
   10378:	60bb      	str	r3, [r7, #8]
   1037a:	683a      	ldr	r2, [r7, #0]
   1037c:	68b9      	ldr	r1, [r7, #8]
   1037e:	68fb      	ldr	r3, [r7, #12]
   10380:	0018      	movs	r0, r3
   10382:	4b04      	ldr	r3, [pc, #16]	; (10394 <system_pinmux_pin_set_config+0x48>)
   10384:	447b      	add	r3, pc
   10386:	4798      	blx	r3
   10388:	46c0      	nop			; (mov r8, r8)
   1038a:	46bd      	mov	sp, r7
   1038c:	b004      	add	sp, #16
   1038e:	bd80      	pop	{r7, pc}
   10390:	fffffe77 	.word	0xfffffe77
   10394:	fffffeb5 	.word	0xfffffeb5

00010398 <_system_dummy_init>:
   10398:	b580      	push	{r7, lr}
   1039a:	af00      	add	r7, sp, #0
   1039c:	46c0      	nop			; (mov r8, r8)
   1039e:	46bd      	mov	sp, r7
   103a0:	bd80      	pop	{r7, pc}
	...

000103a4 <system_init>:
   103a4:	b5b0      	push	{r4, r5, r7, lr}
   103a6:	af00      	add	r7, sp, #0
   103a8:	4c09      	ldr	r4, [pc, #36]	; (103d0 <system_init+0x2c>)
   103aa:	447c      	add	r4, pc
   103ac:	4b09      	ldr	r3, [pc, #36]	; (103d4 <system_init+0x30>)
   103ae:	58e3      	ldr	r3, [r4, r3]
   103b0:	4798      	blx	r3
   103b2:	4b09      	ldr	r3, [pc, #36]	; (103d8 <system_init+0x34>)
   103b4:	58e3      	ldr	r3, [r4, r3]
   103b6:	4798      	blx	r3
   103b8:	4b08      	ldr	r3, [pc, #32]	; (103dc <system_init+0x38>)
   103ba:	58e3      	ldr	r3, [r4, r3]
   103bc:	4798      	blx	r3
   103be:	4b08      	ldr	r3, [pc, #32]	; (103e0 <system_init+0x3c>)
   103c0:	58e3      	ldr	r3, [r4, r3]
   103c2:	4798      	blx	r3
   103c4:	4b07      	ldr	r3, [pc, #28]	; (103e4 <system_init+0x40>)
   103c6:	58e3      	ldr	r3, [r4, r3]
   103c8:	4798      	blx	r3
   103ca:	46c0      	nop			; (mov r8, r8)
   103cc:	46bd      	mov	sp, r7
   103ce:	bdb0      	pop	{r4, r5, r7, pc}
   103d0:	00001a36 	.word	0x00001a36
   103d4:	00000254 	.word	0x00000254
   103d8:	000001c8 	.word	0x000001c8
   103dc:	0000024c 	.word	0x0000024c
   103e0:	00000170 	.word	0x00000170
   103e4:	000000d4 	.word	0x000000d4

000103e8 <Reset_Handler>:
   103e8:	b590      	push	{r4, r7, lr}
   103ea:	b083      	sub	sp, #12
   103ec:	af00      	add	r7, sp, #0
   103ee:	4c34      	ldr	r4, [pc, #208]	; (104c0 <Reset_Handler+0xd8>)
   103f0:	447c      	add	r4, pc
   103f2:	4b34      	ldr	r3, [pc, #208]	; (104c4 <Reset_Handler+0xdc>)
   103f4:	58e3      	ldr	r3, [r4, r3]
   103f6:	607b      	str	r3, [r7, #4]
   103f8:	4b33      	ldr	r3, [pc, #204]	; (104c8 <Reset_Handler+0xe0>)
   103fa:	58e3      	ldr	r3, [r4, r3]
   103fc:	603b      	str	r3, [r7, #0]
   103fe:	687a      	ldr	r2, [r7, #4]
   10400:	683b      	ldr	r3, [r7, #0]
   10402:	429a      	cmp	r2, r3
   10404:	d00d      	beq.n	10422 <Reset_Handler+0x3a>
   10406:	e007      	b.n	10418 <Reset_Handler+0x30>
   10408:	683b      	ldr	r3, [r7, #0]
   1040a:	1d1a      	adds	r2, r3, #4
   1040c:	603a      	str	r2, [r7, #0]
   1040e:	687a      	ldr	r2, [r7, #4]
   10410:	1d11      	adds	r1, r2, #4
   10412:	6079      	str	r1, [r7, #4]
   10414:	6812      	ldr	r2, [r2, #0]
   10416:	601a      	str	r2, [r3, #0]
   10418:	683b      	ldr	r3, [r7, #0]
   1041a:	4a2c      	ldr	r2, [pc, #176]	; (104cc <Reset_Handler+0xe4>)
   1041c:	58a2      	ldr	r2, [r4, r2]
   1041e:	4293      	cmp	r3, r2
   10420:	d3f2      	bcc.n	10408 <Reset_Handler+0x20>
   10422:	4b2b      	ldr	r3, [pc, #172]	; (104d0 <Reset_Handler+0xe8>)
   10424:	58e3      	ldr	r3, [r4, r3]
   10426:	603b      	str	r3, [r7, #0]
   10428:	e004      	b.n	10434 <Reset_Handler+0x4c>
   1042a:	683b      	ldr	r3, [r7, #0]
   1042c:	1d1a      	adds	r2, r3, #4
   1042e:	603a      	str	r2, [r7, #0]
   10430:	2200      	movs	r2, #0
   10432:	601a      	str	r2, [r3, #0]
   10434:	683b      	ldr	r3, [r7, #0]
   10436:	4a27      	ldr	r2, [pc, #156]	; (104d4 <Reset_Handler+0xec>)
   10438:	58a2      	ldr	r2, [r4, r2]
   1043a:	4293      	cmp	r3, r2
   1043c:	d3f5      	bcc.n	1042a <Reset_Handler+0x42>
   1043e:	4b26      	ldr	r3, [pc, #152]	; (104d8 <Reset_Handler+0xf0>)
   10440:	58e3      	ldr	r3, [r4, r3]
   10442:	607b      	str	r3, [r7, #4]
   10444:	4b25      	ldr	r3, [pc, #148]	; (104dc <Reset_Handler+0xf4>)
   10446:	687a      	ldr	r2, [r7, #4]
   10448:	21ff      	movs	r1, #255	; 0xff
   1044a:	438a      	bics	r2, r1
   1044c:	609a      	str	r2, [r3, #8]
   1044e:	4a24      	ldr	r2, [pc, #144]	; (104e0 <Reset_Handler+0xf8>)
   10450:	2390      	movs	r3, #144	; 0x90
   10452:	005b      	lsls	r3, r3, #1
   10454:	2102      	movs	r1, #2
   10456:	50d1      	str	r1, [r2, r3]
   10458:	4a22      	ldr	r2, [pc, #136]	; (104e4 <Reset_Handler+0xfc>)
   1045a:	78d3      	ldrb	r3, [r2, #3]
   1045c:	2103      	movs	r1, #3
   1045e:	438b      	bics	r3, r1
   10460:	1c19      	adds	r1, r3, #0
   10462:	2302      	movs	r3, #2
   10464:	430b      	orrs	r3, r1
   10466:	70d3      	strb	r3, [r2, #3]
   10468:	4a1e      	ldr	r2, [pc, #120]	; (104e4 <Reset_Handler+0xfc>)
   1046a:	78d3      	ldrb	r3, [r2, #3]
   1046c:	210c      	movs	r1, #12
   1046e:	438b      	bics	r3, r1
   10470:	1c19      	adds	r1, r3, #0
   10472:	2308      	movs	r3, #8
   10474:	430b      	orrs	r3, r1
   10476:	70d3      	strb	r3, [r2, #3]
   10478:	4a1b      	ldr	r2, [pc, #108]	; (104e8 <Reset_Handler+0x100>)
   1047a:	7b93      	ldrb	r3, [r2, #14]
   1047c:	2130      	movs	r1, #48	; 0x30
   1047e:	438b      	bics	r3, r1
   10480:	1c19      	adds	r1, r3, #0
   10482:	2320      	movs	r3, #32
   10484:	430b      	orrs	r3, r1
   10486:	7393      	strb	r3, [r2, #14]
   10488:	4a17      	ldr	r2, [pc, #92]	; (104e8 <Reset_Handler+0x100>)
   1048a:	7b93      	ldrb	r3, [r2, #14]
   1048c:	210c      	movs	r1, #12
   1048e:	438b      	bics	r3, r1
   10490:	1c19      	adds	r1, r3, #0
   10492:	2308      	movs	r3, #8
   10494:	430b      	orrs	r3, r1
   10496:	7393      	strb	r3, [r2, #14]
   10498:	4a13      	ldr	r2, [pc, #76]	; (104e8 <Reset_Handler+0x100>)
   1049a:	7b93      	ldrb	r3, [r2, #14]
   1049c:	2103      	movs	r1, #3
   1049e:	438b      	bics	r3, r1
   104a0:	1c19      	adds	r1, r3, #0
   104a2:	2302      	movs	r3, #2
   104a4:	430b      	orrs	r3, r1
   104a6:	7393      	strb	r3, [r2, #14]
   104a8:	4a10      	ldr	r2, [pc, #64]	; (104ec <Reset_Handler+0x104>)
   104aa:	6853      	ldr	r3, [r2, #4]
   104ac:	2180      	movs	r1, #128	; 0x80
   104ae:	430b      	orrs	r3, r1
   104b0:	6053      	str	r3, [r2, #4]
   104b2:	4b0f      	ldr	r3, [pc, #60]	; (104f0 <Reset_Handler+0x108>)
   104b4:	58e3      	ldr	r3, [r4, r3]
   104b6:	4798      	blx	r3
   104b8:	4b0e      	ldr	r3, [pc, #56]	; (104f4 <Reset_Handler+0x10c>)
   104ba:	58e3      	ldr	r3, [r4, r3]
   104bc:	4798      	blx	r3
   104be:	e7fe      	b.n	104be <Reset_Handler+0xd6>
   104c0:	000019f0 	.word	0x000019f0
   104c4:	0000006c 	.word	0x0000006c
   104c8:	00000090 	.word	0x00000090
   104cc:	0000027c 	.word	0x0000027c
   104d0:	00000080 	.word	0x00000080
   104d4:	00000214 	.word	0x00000214
   104d8:	00000050 	.word	0x00000050
   104dc:	e000ed00 	.word	0xe000ed00
   104e0:	41007000 	.word	0x41007000
   104e4:	41005000 	.word	0x41005000
   104e8:	41004800 	.word	0x41004800
   104ec:	41004000 	.word	0x41004000
   104f0:	000000fc 	.word	0x000000fc
   104f4:	00000200 	.word	0x00000200

000104f8 <Dummy_Handler>:
   104f8:	b580      	push	{r7, lr}
   104fa:	af00      	add	r7, sp, #0
   104fc:	e7fe      	b.n	104fc <Dummy_Handler+0x4>
	...

00010500 <_read>:
   10500:	b590      	push	{r4, r7, lr}
   10502:	b087      	sub	sp, #28
   10504:	af00      	add	r7, sp, #0
   10506:	60f8      	str	r0, [r7, #12]
   10508:	60b9      	str	r1, [r7, #8]
   1050a:	607a      	str	r2, [r7, #4]
   1050c:	4c11      	ldr	r4, [pc, #68]	; (10554 <_read+0x54>)
   1050e:	447c      	add	r4, pc
   10510:	2300      	movs	r3, #0
   10512:	617b      	str	r3, [r7, #20]
   10514:	68fb      	ldr	r3, [r7, #12]
   10516:	2b00      	cmp	r3, #0
   10518:	d014      	beq.n	10544 <_read+0x44>
   1051a:	2301      	movs	r3, #1
   1051c:	425b      	negs	r3, r3
   1051e:	e015      	b.n	1054c <_read+0x4c>
   10520:	4b0d      	ldr	r3, [pc, #52]	; (10558 <_read+0x58>)
   10522:	58e3      	ldr	r3, [r4, r3]
   10524:	681a      	ldr	r2, [r3, #0]
   10526:	4b0d      	ldr	r3, [pc, #52]	; (1055c <_read+0x5c>)
   10528:	58e3      	ldr	r3, [r4, r3]
   1052a:	681b      	ldr	r3, [r3, #0]
   1052c:	68b9      	ldr	r1, [r7, #8]
   1052e:	0018      	movs	r0, r3
   10530:	4790      	blx	r2
   10532:	68bb      	ldr	r3, [r7, #8]
   10534:	3301      	adds	r3, #1
   10536:	60bb      	str	r3, [r7, #8]
   10538:	697b      	ldr	r3, [r7, #20]
   1053a:	3301      	adds	r3, #1
   1053c:	617b      	str	r3, [r7, #20]
   1053e:	687b      	ldr	r3, [r7, #4]
   10540:	3b01      	subs	r3, #1
   10542:	607b      	str	r3, [r7, #4]
   10544:	687b      	ldr	r3, [r7, #4]
   10546:	2b00      	cmp	r3, #0
   10548:	dcea      	bgt.n	10520 <_read+0x20>
   1054a:	697b      	ldr	r3, [r7, #20]
   1054c:	0018      	movs	r0, r3
   1054e:	46bd      	mov	sp, r7
   10550:	b007      	add	sp, #28
   10552:	bd90      	pop	{r4, r7, pc}
   10554:	000018d2 	.word	0x000018d2
   10558:	000000f0 	.word	0x000000f0
   1055c:	00000204 	.word	0x00000204

00010560 <_write>:
   10560:	b590      	push	{r4, r7, lr}
   10562:	b087      	sub	sp, #28
   10564:	af00      	add	r7, sp, #0
   10566:	60f8      	str	r0, [r7, #12]
   10568:	60b9      	str	r1, [r7, #8]
   1056a:	607a      	str	r2, [r7, #4]
   1056c:	4c17      	ldr	r4, [pc, #92]	; (105cc <_write+0x6c>)
   1056e:	447c      	add	r4, pc
   10570:	2300      	movs	r3, #0
   10572:	617b      	str	r3, [r7, #20]
   10574:	68fb      	ldr	r3, [r7, #12]
   10576:	2b01      	cmp	r3, #1
   10578:	d01f      	beq.n	105ba <_write+0x5a>
   1057a:	68fb      	ldr	r3, [r7, #12]
   1057c:	2b02      	cmp	r3, #2
   1057e:	d01c      	beq.n	105ba <_write+0x5a>
   10580:	68fb      	ldr	r3, [r7, #12]
   10582:	2b03      	cmp	r3, #3
   10584:	d019      	beq.n	105ba <_write+0x5a>
   10586:	2301      	movs	r3, #1
   10588:	425b      	negs	r3, r3
   1058a:	e01a      	b.n	105c2 <_write+0x62>
   1058c:	4b10      	ldr	r3, [pc, #64]	; (105d0 <_write+0x70>)
   1058e:	58e3      	ldr	r3, [r4, r3]
   10590:	681a      	ldr	r2, [r3, #0]
   10592:	4b10      	ldr	r3, [pc, #64]	; (105d4 <_write+0x74>)
   10594:	58e3      	ldr	r3, [r4, r3]
   10596:	6818      	ldr	r0, [r3, #0]
   10598:	68bb      	ldr	r3, [r7, #8]
   1059a:	1c59      	adds	r1, r3, #1
   1059c:	60b9      	str	r1, [r7, #8]
   1059e:	781b      	ldrb	r3, [r3, #0]
   105a0:	0019      	movs	r1, r3
   105a2:	4790      	blx	r2
   105a4:	1e03      	subs	r3, r0, #0
   105a6:	da02      	bge.n	105ae <_write+0x4e>
   105a8:	2301      	movs	r3, #1
   105aa:	425b      	negs	r3, r3
   105ac:	e009      	b.n	105c2 <_write+0x62>
   105ae:	697b      	ldr	r3, [r7, #20]
   105b0:	3301      	adds	r3, #1
   105b2:	617b      	str	r3, [r7, #20]
   105b4:	687b      	ldr	r3, [r7, #4]
   105b6:	3b01      	subs	r3, #1
   105b8:	607b      	str	r3, [r7, #4]
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	2b00      	cmp	r3, #0
   105be:	d1e5      	bne.n	1058c <_write+0x2c>
   105c0:	697b      	ldr	r3, [r7, #20]
   105c2:	0018      	movs	r0, r3
   105c4:	46bd      	mov	sp, r7
   105c6:	b007      	add	sp, #28
   105c8:	bd90      	pop	{r4, r7, pc}
   105ca:	46c0      	nop			; (mov r8, r8)
   105cc:	00001872 	.word	0x00001872
   105d0:	0000011c 	.word	0x0000011c
   105d4:	00000204 	.word	0x00000204

000105d8 <_sbrk>:
   105d8:	b580      	push	{r7, lr}
   105da:	b084      	sub	sp, #16
   105dc:	af00      	add	r7, sp, #0
   105de:	6078      	str	r0, [r7, #4]
   105e0:	490e      	ldr	r1, [pc, #56]	; (1061c <_sbrk+0x44>)
   105e2:	4479      	add	r1, pc
   105e4:	4b0e      	ldr	r3, [pc, #56]	; (10620 <_sbrk+0x48>)
   105e6:	447b      	add	r3, pc
   105e8:	681b      	ldr	r3, [r3, #0]
   105ea:	2b00      	cmp	r3, #0
   105ec:	d104      	bne.n	105f8 <_sbrk+0x20>
   105ee:	4b0d      	ldr	r3, [pc, #52]	; (10624 <_sbrk+0x4c>)
   105f0:	447b      	add	r3, pc
   105f2:	4a0d      	ldr	r2, [pc, #52]	; (10628 <_sbrk+0x50>)
   105f4:	588a      	ldr	r2, [r1, r2]
   105f6:	601a      	str	r2, [r3, #0]
   105f8:	4b0c      	ldr	r3, [pc, #48]	; (1062c <_sbrk+0x54>)
   105fa:	447b      	add	r3, pc
   105fc:	681b      	ldr	r3, [r3, #0]
   105fe:	60fb      	str	r3, [r7, #12]
   10600:	4b0b      	ldr	r3, [pc, #44]	; (10630 <_sbrk+0x58>)
   10602:	447b      	add	r3, pc
   10604:	681a      	ldr	r2, [r3, #0]
   10606:	687b      	ldr	r3, [r7, #4]
   10608:	18d2      	adds	r2, r2, r3
   1060a:	4b0a      	ldr	r3, [pc, #40]	; (10634 <_sbrk+0x5c>)
   1060c:	447b      	add	r3, pc
   1060e:	601a      	str	r2, [r3, #0]
   10610:	68fb      	ldr	r3, [r7, #12]
   10612:	0018      	movs	r0, r3
   10614:	46bd      	mov	sp, r7
   10616:	b004      	add	sp, #16
   10618:	bd80      	pop	{r7, pc}
   1061a:	46c0      	nop			; (mov r8, r8)
   1061c:	000017fe 	.word	0x000017fe
   10620:	1fff0076 	.word	0x1fff0076
   10624:	1fff006c 	.word	0x1fff006c
   10628:	00000288 	.word	0x00000288
   1062c:	1fff0062 	.word	0x1fff0062
   10630:	1fff005a 	.word	0x1fff005a
   10634:	1fff0050 	.word	0x1fff0050

00010638 <_close>:
   10638:	b580      	push	{r7, lr}
   1063a:	b082      	sub	sp, #8
   1063c:	af00      	add	r7, sp, #0
   1063e:	6078      	str	r0, [r7, #4]
   10640:	2301      	movs	r3, #1
   10642:	425b      	negs	r3, r3
   10644:	0018      	movs	r0, r3
   10646:	46bd      	mov	sp, r7
   10648:	b002      	add	sp, #8
   1064a:	bd80      	pop	{r7, pc}

0001064c <_fstat>:
   1064c:	b580      	push	{r7, lr}
   1064e:	b082      	sub	sp, #8
   10650:	af00      	add	r7, sp, #0
   10652:	6078      	str	r0, [r7, #4]
   10654:	6039      	str	r1, [r7, #0]
   10656:	683b      	ldr	r3, [r7, #0]
   10658:	2280      	movs	r2, #128	; 0x80
   1065a:	0192      	lsls	r2, r2, #6
   1065c:	605a      	str	r2, [r3, #4]
   1065e:	2300      	movs	r3, #0
   10660:	0018      	movs	r0, r3
   10662:	46bd      	mov	sp, r7
   10664:	b002      	add	sp, #8
   10666:	bd80      	pop	{r7, pc}

00010668 <_isatty>:
   10668:	b580      	push	{r7, lr}
   1066a:	b082      	sub	sp, #8
   1066c:	af00      	add	r7, sp, #0
   1066e:	6078      	str	r0, [r7, #4]
   10670:	2301      	movs	r3, #1
   10672:	0018      	movs	r0, r3
   10674:	46bd      	mov	sp, r7
   10676:	b002      	add	sp, #8
   10678:	bd80      	pop	{r7, pc}

0001067a <_lseek>:
   1067a:	b580      	push	{r7, lr}
   1067c:	b084      	sub	sp, #16
   1067e:	af00      	add	r7, sp, #0
   10680:	60f8      	str	r0, [r7, #12]
   10682:	60b9      	str	r1, [r7, #8]
   10684:	607a      	str	r2, [r7, #4]
   10686:	2300      	movs	r3, #0
   10688:	0018      	movs	r0, r3
   1068a:	46bd      	mov	sp, r7
   1068c:	b004      	add	sp, #16
   1068e:	bd80      	pop	{r7, pc}

00010690 <__gnu_thumb1_case_si>:
   10690:	b403      	push	{r0, r1}
   10692:	4671      	mov	r1, lr
   10694:	3102      	adds	r1, #2
   10696:	0889      	lsrs	r1, r1, #2
   10698:	0080      	lsls	r0, r0, #2
   1069a:	0089      	lsls	r1, r1, #2
   1069c:	5808      	ldr	r0, [r1, r0]
   1069e:	1840      	adds	r0, r0, r1
   106a0:	4686      	mov	lr, r0
   106a2:	bc03      	pop	{r0, r1}
   106a4:	46f7      	mov	pc, lr
   106a6:	46c0      	nop			; (mov r8, r8)

000106a8 <__udivsi3>:
   106a8:	2200      	movs	r2, #0
   106aa:	0843      	lsrs	r3, r0, #1
   106ac:	428b      	cmp	r3, r1
   106ae:	d374      	bcc.n	1079a <__udivsi3+0xf2>
   106b0:	0903      	lsrs	r3, r0, #4
   106b2:	428b      	cmp	r3, r1
   106b4:	d35f      	bcc.n	10776 <__udivsi3+0xce>
   106b6:	0a03      	lsrs	r3, r0, #8
   106b8:	428b      	cmp	r3, r1
   106ba:	d344      	bcc.n	10746 <__udivsi3+0x9e>
   106bc:	0b03      	lsrs	r3, r0, #12
   106be:	428b      	cmp	r3, r1
   106c0:	d328      	bcc.n	10714 <__udivsi3+0x6c>
   106c2:	0c03      	lsrs	r3, r0, #16
   106c4:	428b      	cmp	r3, r1
   106c6:	d30d      	bcc.n	106e4 <__udivsi3+0x3c>
   106c8:	22ff      	movs	r2, #255	; 0xff
   106ca:	0209      	lsls	r1, r1, #8
   106cc:	ba12      	rev	r2, r2
   106ce:	0c03      	lsrs	r3, r0, #16
   106d0:	428b      	cmp	r3, r1
   106d2:	d302      	bcc.n	106da <__udivsi3+0x32>
   106d4:	1212      	asrs	r2, r2, #8
   106d6:	0209      	lsls	r1, r1, #8
   106d8:	d065      	beq.n	107a6 <__udivsi3+0xfe>
   106da:	0b03      	lsrs	r3, r0, #12
   106dc:	428b      	cmp	r3, r1
   106de:	d319      	bcc.n	10714 <__udivsi3+0x6c>
   106e0:	e000      	b.n	106e4 <__udivsi3+0x3c>
   106e2:	0a09      	lsrs	r1, r1, #8
   106e4:	0bc3      	lsrs	r3, r0, #15
   106e6:	428b      	cmp	r3, r1
   106e8:	d301      	bcc.n	106ee <__udivsi3+0x46>
   106ea:	03cb      	lsls	r3, r1, #15
   106ec:	1ac0      	subs	r0, r0, r3
   106ee:	4152      	adcs	r2, r2
   106f0:	0b83      	lsrs	r3, r0, #14
   106f2:	428b      	cmp	r3, r1
   106f4:	d301      	bcc.n	106fa <__udivsi3+0x52>
   106f6:	038b      	lsls	r3, r1, #14
   106f8:	1ac0      	subs	r0, r0, r3
   106fa:	4152      	adcs	r2, r2
   106fc:	0b43      	lsrs	r3, r0, #13
   106fe:	428b      	cmp	r3, r1
   10700:	d301      	bcc.n	10706 <__udivsi3+0x5e>
   10702:	034b      	lsls	r3, r1, #13
   10704:	1ac0      	subs	r0, r0, r3
   10706:	4152      	adcs	r2, r2
   10708:	0b03      	lsrs	r3, r0, #12
   1070a:	428b      	cmp	r3, r1
   1070c:	d301      	bcc.n	10712 <__udivsi3+0x6a>
   1070e:	030b      	lsls	r3, r1, #12
   10710:	1ac0      	subs	r0, r0, r3
   10712:	4152      	adcs	r2, r2
   10714:	0ac3      	lsrs	r3, r0, #11
   10716:	428b      	cmp	r3, r1
   10718:	d301      	bcc.n	1071e <__udivsi3+0x76>
   1071a:	02cb      	lsls	r3, r1, #11
   1071c:	1ac0      	subs	r0, r0, r3
   1071e:	4152      	adcs	r2, r2
   10720:	0a83      	lsrs	r3, r0, #10
   10722:	428b      	cmp	r3, r1
   10724:	d301      	bcc.n	1072a <__udivsi3+0x82>
   10726:	028b      	lsls	r3, r1, #10
   10728:	1ac0      	subs	r0, r0, r3
   1072a:	4152      	adcs	r2, r2
   1072c:	0a43      	lsrs	r3, r0, #9
   1072e:	428b      	cmp	r3, r1
   10730:	d301      	bcc.n	10736 <__udivsi3+0x8e>
   10732:	024b      	lsls	r3, r1, #9
   10734:	1ac0      	subs	r0, r0, r3
   10736:	4152      	adcs	r2, r2
   10738:	0a03      	lsrs	r3, r0, #8
   1073a:	428b      	cmp	r3, r1
   1073c:	d301      	bcc.n	10742 <__udivsi3+0x9a>
   1073e:	020b      	lsls	r3, r1, #8
   10740:	1ac0      	subs	r0, r0, r3
   10742:	4152      	adcs	r2, r2
   10744:	d2cd      	bcs.n	106e2 <__udivsi3+0x3a>
   10746:	09c3      	lsrs	r3, r0, #7
   10748:	428b      	cmp	r3, r1
   1074a:	d301      	bcc.n	10750 <__udivsi3+0xa8>
   1074c:	01cb      	lsls	r3, r1, #7
   1074e:	1ac0      	subs	r0, r0, r3
   10750:	4152      	adcs	r2, r2
   10752:	0983      	lsrs	r3, r0, #6
   10754:	428b      	cmp	r3, r1
   10756:	d301      	bcc.n	1075c <__udivsi3+0xb4>
   10758:	018b      	lsls	r3, r1, #6
   1075a:	1ac0      	subs	r0, r0, r3
   1075c:	4152      	adcs	r2, r2
   1075e:	0943      	lsrs	r3, r0, #5
   10760:	428b      	cmp	r3, r1
   10762:	d301      	bcc.n	10768 <__udivsi3+0xc0>
   10764:	014b      	lsls	r3, r1, #5
   10766:	1ac0      	subs	r0, r0, r3
   10768:	4152      	adcs	r2, r2
   1076a:	0903      	lsrs	r3, r0, #4
   1076c:	428b      	cmp	r3, r1
   1076e:	d301      	bcc.n	10774 <__udivsi3+0xcc>
   10770:	010b      	lsls	r3, r1, #4
   10772:	1ac0      	subs	r0, r0, r3
   10774:	4152      	adcs	r2, r2
   10776:	08c3      	lsrs	r3, r0, #3
   10778:	428b      	cmp	r3, r1
   1077a:	d301      	bcc.n	10780 <__udivsi3+0xd8>
   1077c:	00cb      	lsls	r3, r1, #3
   1077e:	1ac0      	subs	r0, r0, r3
   10780:	4152      	adcs	r2, r2
   10782:	0883      	lsrs	r3, r0, #2
   10784:	428b      	cmp	r3, r1
   10786:	d301      	bcc.n	1078c <__udivsi3+0xe4>
   10788:	008b      	lsls	r3, r1, #2
   1078a:	1ac0      	subs	r0, r0, r3
   1078c:	4152      	adcs	r2, r2
   1078e:	0843      	lsrs	r3, r0, #1
   10790:	428b      	cmp	r3, r1
   10792:	d301      	bcc.n	10798 <__udivsi3+0xf0>
   10794:	004b      	lsls	r3, r1, #1
   10796:	1ac0      	subs	r0, r0, r3
   10798:	4152      	adcs	r2, r2
   1079a:	1a41      	subs	r1, r0, r1
   1079c:	d200      	bcs.n	107a0 <__udivsi3+0xf8>
   1079e:	4601      	mov	r1, r0
   107a0:	4152      	adcs	r2, r2
   107a2:	4610      	mov	r0, r2
   107a4:	4770      	bx	lr
   107a6:	e7ff      	b.n	107a8 <__udivsi3+0x100>
   107a8:	b501      	push	{r0, lr}
   107aa:	2000      	movs	r0, #0
   107ac:	f000 f8f0 	bl	10990 <__aeabi_idiv0>
   107b0:	bd02      	pop	{r1, pc}
   107b2:	46c0      	nop			; (mov r8, r8)

000107b4 <__aeabi_uidivmod>:
   107b4:	2900      	cmp	r1, #0
   107b6:	d0f7      	beq.n	107a8 <__udivsi3+0x100>
   107b8:	e776      	b.n	106a8 <__udivsi3>
   107ba:	4770      	bx	lr

000107bc <__divsi3>:
   107bc:	4603      	mov	r3, r0
   107be:	430b      	orrs	r3, r1
   107c0:	d47f      	bmi.n	108c2 <__divsi3+0x106>
   107c2:	2200      	movs	r2, #0
   107c4:	0843      	lsrs	r3, r0, #1
   107c6:	428b      	cmp	r3, r1
   107c8:	d374      	bcc.n	108b4 <__divsi3+0xf8>
   107ca:	0903      	lsrs	r3, r0, #4
   107cc:	428b      	cmp	r3, r1
   107ce:	d35f      	bcc.n	10890 <__divsi3+0xd4>
   107d0:	0a03      	lsrs	r3, r0, #8
   107d2:	428b      	cmp	r3, r1
   107d4:	d344      	bcc.n	10860 <__divsi3+0xa4>
   107d6:	0b03      	lsrs	r3, r0, #12
   107d8:	428b      	cmp	r3, r1
   107da:	d328      	bcc.n	1082e <__divsi3+0x72>
   107dc:	0c03      	lsrs	r3, r0, #16
   107de:	428b      	cmp	r3, r1
   107e0:	d30d      	bcc.n	107fe <__divsi3+0x42>
   107e2:	22ff      	movs	r2, #255	; 0xff
   107e4:	0209      	lsls	r1, r1, #8
   107e6:	ba12      	rev	r2, r2
   107e8:	0c03      	lsrs	r3, r0, #16
   107ea:	428b      	cmp	r3, r1
   107ec:	d302      	bcc.n	107f4 <__divsi3+0x38>
   107ee:	1212      	asrs	r2, r2, #8
   107f0:	0209      	lsls	r1, r1, #8
   107f2:	d065      	beq.n	108c0 <__divsi3+0x104>
   107f4:	0b03      	lsrs	r3, r0, #12
   107f6:	428b      	cmp	r3, r1
   107f8:	d319      	bcc.n	1082e <__divsi3+0x72>
   107fa:	e000      	b.n	107fe <__divsi3+0x42>
   107fc:	0a09      	lsrs	r1, r1, #8
   107fe:	0bc3      	lsrs	r3, r0, #15
   10800:	428b      	cmp	r3, r1
   10802:	d301      	bcc.n	10808 <__divsi3+0x4c>
   10804:	03cb      	lsls	r3, r1, #15
   10806:	1ac0      	subs	r0, r0, r3
   10808:	4152      	adcs	r2, r2
   1080a:	0b83      	lsrs	r3, r0, #14
   1080c:	428b      	cmp	r3, r1
   1080e:	d301      	bcc.n	10814 <__divsi3+0x58>
   10810:	038b      	lsls	r3, r1, #14
   10812:	1ac0      	subs	r0, r0, r3
   10814:	4152      	adcs	r2, r2
   10816:	0b43      	lsrs	r3, r0, #13
   10818:	428b      	cmp	r3, r1
   1081a:	d301      	bcc.n	10820 <__divsi3+0x64>
   1081c:	034b      	lsls	r3, r1, #13
   1081e:	1ac0      	subs	r0, r0, r3
   10820:	4152      	adcs	r2, r2
   10822:	0b03      	lsrs	r3, r0, #12
   10824:	428b      	cmp	r3, r1
   10826:	d301      	bcc.n	1082c <__divsi3+0x70>
   10828:	030b      	lsls	r3, r1, #12
   1082a:	1ac0      	subs	r0, r0, r3
   1082c:	4152      	adcs	r2, r2
   1082e:	0ac3      	lsrs	r3, r0, #11
   10830:	428b      	cmp	r3, r1
   10832:	d301      	bcc.n	10838 <__divsi3+0x7c>
   10834:	02cb      	lsls	r3, r1, #11
   10836:	1ac0      	subs	r0, r0, r3
   10838:	4152      	adcs	r2, r2
   1083a:	0a83      	lsrs	r3, r0, #10
   1083c:	428b      	cmp	r3, r1
   1083e:	d301      	bcc.n	10844 <__divsi3+0x88>
   10840:	028b      	lsls	r3, r1, #10
   10842:	1ac0      	subs	r0, r0, r3
   10844:	4152      	adcs	r2, r2
   10846:	0a43      	lsrs	r3, r0, #9
   10848:	428b      	cmp	r3, r1
   1084a:	d301      	bcc.n	10850 <__divsi3+0x94>
   1084c:	024b      	lsls	r3, r1, #9
   1084e:	1ac0      	subs	r0, r0, r3
   10850:	4152      	adcs	r2, r2
   10852:	0a03      	lsrs	r3, r0, #8
   10854:	428b      	cmp	r3, r1
   10856:	d301      	bcc.n	1085c <__divsi3+0xa0>
   10858:	020b      	lsls	r3, r1, #8
   1085a:	1ac0      	subs	r0, r0, r3
   1085c:	4152      	adcs	r2, r2
   1085e:	d2cd      	bcs.n	107fc <__divsi3+0x40>
   10860:	09c3      	lsrs	r3, r0, #7
   10862:	428b      	cmp	r3, r1
   10864:	d301      	bcc.n	1086a <__divsi3+0xae>
   10866:	01cb      	lsls	r3, r1, #7
   10868:	1ac0      	subs	r0, r0, r3
   1086a:	4152      	adcs	r2, r2
   1086c:	0983      	lsrs	r3, r0, #6
   1086e:	428b      	cmp	r3, r1
   10870:	d301      	bcc.n	10876 <__divsi3+0xba>
   10872:	018b      	lsls	r3, r1, #6
   10874:	1ac0      	subs	r0, r0, r3
   10876:	4152      	adcs	r2, r2
   10878:	0943      	lsrs	r3, r0, #5
   1087a:	428b      	cmp	r3, r1
   1087c:	d301      	bcc.n	10882 <__divsi3+0xc6>
   1087e:	014b      	lsls	r3, r1, #5
   10880:	1ac0      	subs	r0, r0, r3
   10882:	4152      	adcs	r2, r2
   10884:	0903      	lsrs	r3, r0, #4
   10886:	428b      	cmp	r3, r1
   10888:	d301      	bcc.n	1088e <__divsi3+0xd2>
   1088a:	010b      	lsls	r3, r1, #4
   1088c:	1ac0      	subs	r0, r0, r3
   1088e:	4152      	adcs	r2, r2
   10890:	08c3      	lsrs	r3, r0, #3
   10892:	428b      	cmp	r3, r1
   10894:	d301      	bcc.n	1089a <__divsi3+0xde>
   10896:	00cb      	lsls	r3, r1, #3
   10898:	1ac0      	subs	r0, r0, r3
   1089a:	4152      	adcs	r2, r2
   1089c:	0883      	lsrs	r3, r0, #2
   1089e:	428b      	cmp	r3, r1
   108a0:	d301      	bcc.n	108a6 <__divsi3+0xea>
   108a2:	008b      	lsls	r3, r1, #2
   108a4:	1ac0      	subs	r0, r0, r3
   108a6:	4152      	adcs	r2, r2
   108a8:	0843      	lsrs	r3, r0, #1
   108aa:	428b      	cmp	r3, r1
   108ac:	d301      	bcc.n	108b2 <__divsi3+0xf6>
   108ae:	004b      	lsls	r3, r1, #1
   108b0:	1ac0      	subs	r0, r0, r3
   108b2:	4152      	adcs	r2, r2
   108b4:	1a41      	subs	r1, r0, r1
   108b6:	d200      	bcs.n	108ba <__divsi3+0xfe>
   108b8:	4601      	mov	r1, r0
   108ba:	4152      	adcs	r2, r2
   108bc:	4610      	mov	r0, r2
   108be:	4770      	bx	lr
   108c0:	e05d      	b.n	1097e <__divsi3+0x1c2>
   108c2:	0fca      	lsrs	r2, r1, #31
   108c4:	d000      	beq.n	108c8 <__divsi3+0x10c>
   108c6:	4249      	negs	r1, r1
   108c8:	1003      	asrs	r3, r0, #32
   108ca:	d300      	bcc.n	108ce <__divsi3+0x112>
   108cc:	4240      	negs	r0, r0
   108ce:	4053      	eors	r3, r2
   108d0:	2200      	movs	r2, #0
   108d2:	469c      	mov	ip, r3
   108d4:	0903      	lsrs	r3, r0, #4
   108d6:	428b      	cmp	r3, r1
   108d8:	d32d      	bcc.n	10936 <__divsi3+0x17a>
   108da:	0a03      	lsrs	r3, r0, #8
   108dc:	428b      	cmp	r3, r1
   108de:	d312      	bcc.n	10906 <__divsi3+0x14a>
   108e0:	22fc      	movs	r2, #252	; 0xfc
   108e2:	0189      	lsls	r1, r1, #6
   108e4:	ba12      	rev	r2, r2
   108e6:	0a03      	lsrs	r3, r0, #8
   108e8:	428b      	cmp	r3, r1
   108ea:	d30c      	bcc.n	10906 <__divsi3+0x14a>
   108ec:	0189      	lsls	r1, r1, #6
   108ee:	1192      	asrs	r2, r2, #6
   108f0:	428b      	cmp	r3, r1
   108f2:	d308      	bcc.n	10906 <__divsi3+0x14a>
   108f4:	0189      	lsls	r1, r1, #6
   108f6:	1192      	asrs	r2, r2, #6
   108f8:	428b      	cmp	r3, r1
   108fa:	d304      	bcc.n	10906 <__divsi3+0x14a>
   108fc:	0189      	lsls	r1, r1, #6
   108fe:	d03a      	beq.n	10976 <__divsi3+0x1ba>
   10900:	1192      	asrs	r2, r2, #6
   10902:	e000      	b.n	10906 <__divsi3+0x14a>
   10904:	0989      	lsrs	r1, r1, #6
   10906:	09c3      	lsrs	r3, r0, #7
   10908:	428b      	cmp	r3, r1
   1090a:	d301      	bcc.n	10910 <__divsi3+0x154>
   1090c:	01cb      	lsls	r3, r1, #7
   1090e:	1ac0      	subs	r0, r0, r3
   10910:	4152      	adcs	r2, r2
   10912:	0983      	lsrs	r3, r0, #6
   10914:	428b      	cmp	r3, r1
   10916:	d301      	bcc.n	1091c <__divsi3+0x160>
   10918:	018b      	lsls	r3, r1, #6
   1091a:	1ac0      	subs	r0, r0, r3
   1091c:	4152      	adcs	r2, r2
   1091e:	0943      	lsrs	r3, r0, #5
   10920:	428b      	cmp	r3, r1
   10922:	d301      	bcc.n	10928 <__divsi3+0x16c>
   10924:	014b      	lsls	r3, r1, #5
   10926:	1ac0      	subs	r0, r0, r3
   10928:	4152      	adcs	r2, r2
   1092a:	0903      	lsrs	r3, r0, #4
   1092c:	428b      	cmp	r3, r1
   1092e:	d301      	bcc.n	10934 <__divsi3+0x178>
   10930:	010b      	lsls	r3, r1, #4
   10932:	1ac0      	subs	r0, r0, r3
   10934:	4152      	adcs	r2, r2
   10936:	08c3      	lsrs	r3, r0, #3
   10938:	428b      	cmp	r3, r1
   1093a:	d301      	bcc.n	10940 <__divsi3+0x184>
   1093c:	00cb      	lsls	r3, r1, #3
   1093e:	1ac0      	subs	r0, r0, r3
   10940:	4152      	adcs	r2, r2
   10942:	0883      	lsrs	r3, r0, #2
   10944:	428b      	cmp	r3, r1
   10946:	d301      	bcc.n	1094c <__divsi3+0x190>
   10948:	008b      	lsls	r3, r1, #2
   1094a:	1ac0      	subs	r0, r0, r3
   1094c:	4152      	adcs	r2, r2
   1094e:	d2d9      	bcs.n	10904 <__divsi3+0x148>
   10950:	0843      	lsrs	r3, r0, #1
   10952:	428b      	cmp	r3, r1
   10954:	d301      	bcc.n	1095a <__divsi3+0x19e>
   10956:	004b      	lsls	r3, r1, #1
   10958:	1ac0      	subs	r0, r0, r3
   1095a:	4152      	adcs	r2, r2
   1095c:	1a41      	subs	r1, r0, r1
   1095e:	d200      	bcs.n	10962 <__divsi3+0x1a6>
   10960:	4601      	mov	r1, r0
   10962:	4663      	mov	r3, ip
   10964:	4152      	adcs	r2, r2
   10966:	105b      	asrs	r3, r3, #1
   10968:	4610      	mov	r0, r2
   1096a:	d301      	bcc.n	10970 <__divsi3+0x1b4>
   1096c:	4240      	negs	r0, r0
   1096e:	2b00      	cmp	r3, #0
   10970:	d500      	bpl.n	10974 <__divsi3+0x1b8>
   10972:	4249      	negs	r1, r1
   10974:	4770      	bx	lr
   10976:	4663      	mov	r3, ip
   10978:	105b      	asrs	r3, r3, #1
   1097a:	d300      	bcc.n	1097e <__divsi3+0x1c2>
   1097c:	4240      	negs	r0, r0
   1097e:	b501      	push	{r0, lr}
   10980:	2000      	movs	r0, #0
   10982:	f000 f805 	bl	10990 <__aeabi_idiv0>
   10986:	bd02      	pop	{r1, pc}

00010988 <__aeabi_idivmod>:
   10988:	2900      	cmp	r1, #0
   1098a:	d0f8      	beq.n	1097e <__divsi3+0x1c2>
   1098c:	e716      	b.n	107bc <__divsi3>
   1098e:	4770      	bx	lr

00010990 <__aeabi_idiv0>:
   10990:	4770      	bx	lr
   10992:	46c0      	nop			; (mov r8, r8)

00010994 <__ctzsi2>:
   10994:	4241      	negs	r1, r0
   10996:	4008      	ands	r0, r1
   10998:	211c      	movs	r1, #28
   1099a:	2301      	movs	r3, #1
   1099c:	041b      	lsls	r3, r3, #16
   1099e:	4298      	cmp	r0, r3
   109a0:	d301      	bcc.n	109a6 <__ctzsi2+0x12>
   109a2:	0c00      	lsrs	r0, r0, #16
   109a4:	3910      	subs	r1, #16
   109a6:	0a1b      	lsrs	r3, r3, #8
   109a8:	4298      	cmp	r0, r3
   109aa:	d301      	bcc.n	109b0 <__ctzsi2+0x1c>
   109ac:	0a00      	lsrs	r0, r0, #8
   109ae:	3908      	subs	r1, #8
   109b0:	091b      	lsrs	r3, r3, #4
   109b2:	4298      	cmp	r0, r3
   109b4:	d301      	bcc.n	109ba <__ctzsi2+0x26>
   109b6:	0900      	lsrs	r0, r0, #4
   109b8:	3904      	subs	r1, #4
   109ba:	a202      	add	r2, pc, #8	; (adr r2, 109c4 <__ctzsi2+0x30>)
   109bc:	5c10      	ldrb	r0, [r2, r0]
   109be:	1a40      	subs	r0, r0, r1
   109c0:	4770      	bx	lr
   109c2:	46c0      	nop			; (mov r8, r8)
   109c4:	1d1d1c1b 	.word	0x1d1d1c1b
   109c8:	1e1e1e1e 	.word	0x1e1e1e1e
   109cc:	1f1f1f1f 	.word	0x1f1f1f1f
   109d0:	1f1f1f1f 	.word	0x1f1f1f1f

000109d4 <__libc_init_array>:
   109d4:	b570      	push	{r4, r5, r6, lr}
   109d6:	2600      	movs	r6, #0
   109d8:	4d0c      	ldr	r5, [pc, #48]	; (10a0c <__libc_init_array+0x38>)
   109da:	4c0d      	ldr	r4, [pc, #52]	; (10a10 <__libc_init_array+0x3c>)
   109dc:	1b64      	subs	r4, r4, r5
   109de:	10a4      	asrs	r4, r4, #2
   109e0:	42a6      	cmp	r6, r4
   109e2:	d109      	bne.n	109f8 <__libc_init_array+0x24>
   109e4:	2600      	movs	r6, #0
   109e6:	f001 f9ed 	bl	11dc4 <_init>
   109ea:	4d0a      	ldr	r5, [pc, #40]	; (10a14 <__libc_init_array+0x40>)
   109ec:	4c0a      	ldr	r4, [pc, #40]	; (10a18 <__libc_init_array+0x44>)
   109ee:	1b64      	subs	r4, r4, r5
   109f0:	10a4      	asrs	r4, r4, #2
   109f2:	42a6      	cmp	r6, r4
   109f4:	d105      	bne.n	10a02 <__libc_init_array+0x2e>
   109f6:	bd70      	pop	{r4, r5, r6, pc}
   109f8:	00b3      	lsls	r3, r6, #2
   109fa:	58eb      	ldr	r3, [r5, r3]
   109fc:	4798      	blx	r3
   109fe:	3601      	adds	r6, #1
   10a00:	e7ee      	b.n	109e0 <__libc_init_array+0xc>
   10a02:	00b3      	lsls	r3, r6, #2
   10a04:	58eb      	ldr	r3, [r5, r3]
   10a06:	4798      	blx	r3
   10a08:	3601      	adds	r6, #1
   10a0a:	e7f2      	b.n	109f2 <__libc_init_array+0x1e>
   10a0c:	00011dd0 	.word	0x00011dd0
   10a10:	00011dd0 	.word	0x00011dd0
   10a14:	00011dd0 	.word	0x00011dd0
   10a18:	00011dd4 	.word	0x00011dd4

00010a1c <memcpy>:
   10a1c:	2300      	movs	r3, #0
   10a1e:	b510      	push	{r4, lr}
   10a20:	429a      	cmp	r2, r3
   10a22:	d100      	bne.n	10a26 <memcpy+0xa>
   10a24:	bd10      	pop	{r4, pc}
   10a26:	5ccc      	ldrb	r4, [r1, r3]
   10a28:	54c4      	strb	r4, [r0, r3]
   10a2a:	3301      	adds	r3, #1
   10a2c:	e7f8      	b.n	10a20 <memcpy+0x4>

00010a2e <memset>:
   10a2e:	0003      	movs	r3, r0
   10a30:	1882      	adds	r2, r0, r2
   10a32:	4293      	cmp	r3, r2
   10a34:	d100      	bne.n	10a38 <memset+0xa>
   10a36:	4770      	bx	lr
   10a38:	7019      	strb	r1, [r3, #0]
   10a3a:	3301      	adds	r3, #1
   10a3c:	e7f9      	b.n	10a32 <memset+0x4>

00010a3e <setbuf>:
   10a3e:	424a      	negs	r2, r1
   10a40:	414a      	adcs	r2, r1
   10a42:	2380      	movs	r3, #128	; 0x80
   10a44:	b510      	push	{r4, lr}
   10a46:	0052      	lsls	r2, r2, #1
   10a48:	00db      	lsls	r3, r3, #3
   10a4a:	f000 f801 	bl	10a50 <setvbuf>
   10a4e:	bd10      	pop	{r4, pc}

00010a50 <setvbuf>:
   10a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a52:	001d      	movs	r5, r3
   10a54:	4b4f      	ldr	r3, [pc, #316]	; (10b94 <setvbuf+0x144>)
   10a56:	b085      	sub	sp, #20
   10a58:	681e      	ldr	r6, [r3, #0]
   10a5a:	0004      	movs	r4, r0
   10a5c:	000f      	movs	r7, r1
   10a5e:	9200      	str	r2, [sp, #0]
   10a60:	2e00      	cmp	r6, #0
   10a62:	d005      	beq.n	10a70 <setvbuf+0x20>
   10a64:	69b3      	ldr	r3, [r6, #24]
   10a66:	2b00      	cmp	r3, #0
   10a68:	d102      	bne.n	10a70 <setvbuf+0x20>
   10a6a:	0030      	movs	r0, r6
   10a6c:	f000 f9aa 	bl	10dc4 <__sinit>
   10a70:	4b49      	ldr	r3, [pc, #292]	; (10b98 <setvbuf+0x148>)
   10a72:	429c      	cmp	r4, r3
   10a74:	d150      	bne.n	10b18 <setvbuf+0xc8>
   10a76:	6874      	ldr	r4, [r6, #4]
   10a78:	9b00      	ldr	r3, [sp, #0]
   10a7a:	2b02      	cmp	r3, #2
   10a7c:	d005      	beq.n	10a8a <setvbuf+0x3a>
   10a7e:	2b01      	cmp	r3, #1
   10a80:	d900      	bls.n	10a84 <setvbuf+0x34>
   10a82:	e084      	b.n	10b8e <setvbuf+0x13e>
   10a84:	2d00      	cmp	r5, #0
   10a86:	da00      	bge.n	10a8a <setvbuf+0x3a>
   10a88:	e081      	b.n	10b8e <setvbuf+0x13e>
   10a8a:	0021      	movs	r1, r4
   10a8c:	0030      	movs	r0, r6
   10a8e:	f000 f92b 	bl	10ce8 <_fflush_r>
   10a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10a94:	2900      	cmp	r1, #0
   10a96:	d008      	beq.n	10aaa <setvbuf+0x5a>
   10a98:	0023      	movs	r3, r4
   10a9a:	3344      	adds	r3, #68	; 0x44
   10a9c:	4299      	cmp	r1, r3
   10a9e:	d002      	beq.n	10aa6 <setvbuf+0x56>
   10aa0:	0030      	movs	r0, r6
   10aa2:	f000 fa95 	bl	10fd0 <_free_r>
   10aa6:	2300      	movs	r3, #0
   10aa8:	6363      	str	r3, [r4, #52]	; 0x34
   10aaa:	2300      	movs	r3, #0
   10aac:	61a3      	str	r3, [r4, #24]
   10aae:	6063      	str	r3, [r4, #4]
   10ab0:	89a3      	ldrh	r3, [r4, #12]
   10ab2:	061b      	lsls	r3, r3, #24
   10ab4:	d503      	bpl.n	10abe <setvbuf+0x6e>
   10ab6:	6921      	ldr	r1, [r4, #16]
   10ab8:	0030      	movs	r0, r6
   10aba:	f000 fa89 	bl	10fd0 <_free_r>
   10abe:	89a3      	ldrh	r3, [r4, #12]
   10ac0:	4a36      	ldr	r2, [pc, #216]	; (10b9c <setvbuf+0x14c>)
   10ac2:	4013      	ands	r3, r2
   10ac4:	81a3      	strh	r3, [r4, #12]
   10ac6:	9b00      	ldr	r3, [sp, #0]
   10ac8:	2b02      	cmp	r3, #2
   10aca:	d05a      	beq.n	10b82 <setvbuf+0x132>
   10acc:	ab03      	add	r3, sp, #12
   10ace:	aa02      	add	r2, sp, #8
   10ad0:	0021      	movs	r1, r4
   10ad2:	0030      	movs	r0, r6
   10ad4:	f000 fa0c 	bl	10ef0 <__swhatbuf_r>
   10ad8:	89a3      	ldrh	r3, [r4, #12]
   10ada:	4318      	orrs	r0, r3
   10adc:	81a0      	strh	r0, [r4, #12]
   10ade:	2d00      	cmp	r5, #0
   10ae0:	d124      	bne.n	10b2c <setvbuf+0xdc>
   10ae2:	9d02      	ldr	r5, [sp, #8]
   10ae4:	0028      	movs	r0, r5
   10ae6:	f000 fa69 	bl	10fbc <malloc>
   10aea:	9501      	str	r5, [sp, #4]
   10aec:	1e07      	subs	r7, r0, #0
   10aee:	d142      	bne.n	10b76 <setvbuf+0x126>
   10af0:	9b02      	ldr	r3, [sp, #8]
   10af2:	9301      	str	r3, [sp, #4]
   10af4:	42ab      	cmp	r3, r5
   10af6:	d139      	bne.n	10b6c <setvbuf+0x11c>
   10af8:	2001      	movs	r0, #1
   10afa:	4240      	negs	r0, r0
   10afc:	2302      	movs	r3, #2
   10afe:	89a2      	ldrh	r2, [r4, #12]
   10b00:	4313      	orrs	r3, r2
   10b02:	81a3      	strh	r3, [r4, #12]
   10b04:	2300      	movs	r3, #0
   10b06:	60a3      	str	r3, [r4, #8]
   10b08:	0023      	movs	r3, r4
   10b0a:	3347      	adds	r3, #71	; 0x47
   10b0c:	6023      	str	r3, [r4, #0]
   10b0e:	6123      	str	r3, [r4, #16]
   10b10:	2301      	movs	r3, #1
   10b12:	6163      	str	r3, [r4, #20]
   10b14:	b005      	add	sp, #20
   10b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b18:	4b21      	ldr	r3, [pc, #132]	; (10ba0 <setvbuf+0x150>)
   10b1a:	429c      	cmp	r4, r3
   10b1c:	d101      	bne.n	10b22 <setvbuf+0xd2>
   10b1e:	68b4      	ldr	r4, [r6, #8]
   10b20:	e7aa      	b.n	10a78 <setvbuf+0x28>
   10b22:	4b20      	ldr	r3, [pc, #128]	; (10ba4 <setvbuf+0x154>)
   10b24:	429c      	cmp	r4, r3
   10b26:	d1a7      	bne.n	10a78 <setvbuf+0x28>
   10b28:	68f4      	ldr	r4, [r6, #12]
   10b2a:	e7a5      	b.n	10a78 <setvbuf+0x28>
   10b2c:	2f00      	cmp	r7, #0
   10b2e:	d0d9      	beq.n	10ae4 <setvbuf+0x94>
   10b30:	69b3      	ldr	r3, [r6, #24]
   10b32:	2b00      	cmp	r3, #0
   10b34:	d102      	bne.n	10b3c <setvbuf+0xec>
   10b36:	0030      	movs	r0, r6
   10b38:	f000 f944 	bl	10dc4 <__sinit>
   10b3c:	9b00      	ldr	r3, [sp, #0]
   10b3e:	2b01      	cmp	r3, #1
   10b40:	d103      	bne.n	10b4a <setvbuf+0xfa>
   10b42:	89a3      	ldrh	r3, [r4, #12]
   10b44:	9a00      	ldr	r2, [sp, #0]
   10b46:	431a      	orrs	r2, r3
   10b48:	81a2      	strh	r2, [r4, #12]
   10b4a:	2008      	movs	r0, #8
   10b4c:	89a3      	ldrh	r3, [r4, #12]
   10b4e:	6027      	str	r7, [r4, #0]
   10b50:	6127      	str	r7, [r4, #16]
   10b52:	6165      	str	r5, [r4, #20]
   10b54:	4018      	ands	r0, r3
   10b56:	d018      	beq.n	10b8a <setvbuf+0x13a>
   10b58:	2001      	movs	r0, #1
   10b5a:	4018      	ands	r0, r3
   10b5c:	2300      	movs	r3, #0
   10b5e:	4298      	cmp	r0, r3
   10b60:	d011      	beq.n	10b86 <setvbuf+0x136>
   10b62:	426d      	negs	r5, r5
   10b64:	60a3      	str	r3, [r4, #8]
   10b66:	61a5      	str	r5, [r4, #24]
   10b68:	0018      	movs	r0, r3
   10b6a:	e7d3      	b.n	10b14 <setvbuf+0xc4>
   10b6c:	9801      	ldr	r0, [sp, #4]
   10b6e:	f000 fa25 	bl	10fbc <malloc>
   10b72:	1e07      	subs	r7, r0, #0
   10b74:	d0c0      	beq.n	10af8 <setvbuf+0xa8>
   10b76:	2380      	movs	r3, #128	; 0x80
   10b78:	89a2      	ldrh	r2, [r4, #12]
   10b7a:	9d01      	ldr	r5, [sp, #4]
   10b7c:	4313      	orrs	r3, r2
   10b7e:	81a3      	strh	r3, [r4, #12]
   10b80:	e7d6      	b.n	10b30 <setvbuf+0xe0>
   10b82:	2000      	movs	r0, #0
   10b84:	e7ba      	b.n	10afc <setvbuf+0xac>
   10b86:	60a5      	str	r5, [r4, #8]
   10b88:	e7c4      	b.n	10b14 <setvbuf+0xc4>
   10b8a:	60a0      	str	r0, [r4, #8]
   10b8c:	e7c2      	b.n	10b14 <setvbuf+0xc4>
   10b8e:	2001      	movs	r0, #1
   10b90:	4240      	negs	r0, r0
   10b92:	e7bf      	b.n	10b14 <setvbuf+0xc4>
   10b94:	20000120 	.word	0x20000120
   10b98:	00011d50 	.word	0x00011d50
   10b9c:	fffff35c 	.word	0xfffff35c
   10ba0:	00011d70 	.word	0x00011d70
   10ba4:	00011d30 	.word	0x00011d30

00010ba8 <viprintf>:
   10ba8:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <viprintf+0x28>)
   10baa:	b570      	push	{r4, r5, r6, lr}
   10bac:	681c      	ldr	r4, [r3, #0]
   10bae:	0005      	movs	r5, r0
   10bb0:	000e      	movs	r6, r1
   10bb2:	2c00      	cmp	r4, #0
   10bb4:	d005      	beq.n	10bc2 <viprintf+0x1a>
   10bb6:	69a3      	ldr	r3, [r4, #24]
   10bb8:	2b00      	cmp	r3, #0
   10bba:	d102      	bne.n	10bc2 <viprintf+0x1a>
   10bbc:	0020      	movs	r0, r4
   10bbe:	f000 f901 	bl	10dc4 <__sinit>
   10bc2:	0033      	movs	r3, r6
   10bc4:	002a      	movs	r2, r5
   10bc6:	68a1      	ldr	r1, [r4, #8]
   10bc8:	0020      	movs	r0, r4
   10bca:	f000 fad1 	bl	11170 <_vfiprintf_r>
   10bce:	bd70      	pop	{r4, r5, r6, pc}
   10bd0:	20000120 	.word	0x20000120

00010bd4 <__sflush_r>:
   10bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bd6:	898a      	ldrh	r2, [r1, #12]
   10bd8:	0005      	movs	r5, r0
   10bda:	000c      	movs	r4, r1
   10bdc:	0713      	lsls	r3, r2, #28
   10bde:	d460      	bmi.n	10ca2 <__sflush_r+0xce>
   10be0:	684b      	ldr	r3, [r1, #4]
   10be2:	2b00      	cmp	r3, #0
   10be4:	dc04      	bgt.n	10bf0 <__sflush_r+0x1c>
   10be6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10be8:	2b00      	cmp	r3, #0
   10bea:	dc01      	bgt.n	10bf0 <__sflush_r+0x1c>
   10bec:	2000      	movs	r0, #0
   10bee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10bf0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10bf2:	2f00      	cmp	r7, #0
   10bf4:	d0fa      	beq.n	10bec <__sflush_r+0x18>
   10bf6:	2300      	movs	r3, #0
   10bf8:	682e      	ldr	r6, [r5, #0]
   10bfa:	602b      	str	r3, [r5, #0]
   10bfc:	2380      	movs	r3, #128	; 0x80
   10bfe:	015b      	lsls	r3, r3, #5
   10c00:	401a      	ands	r2, r3
   10c02:	d034      	beq.n	10c6e <__sflush_r+0x9a>
   10c04:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10c06:	89a3      	ldrh	r3, [r4, #12]
   10c08:	075b      	lsls	r3, r3, #29
   10c0a:	d506      	bpl.n	10c1a <__sflush_r+0x46>
   10c0c:	6863      	ldr	r3, [r4, #4]
   10c0e:	1ac0      	subs	r0, r0, r3
   10c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c12:	2b00      	cmp	r3, #0
   10c14:	d001      	beq.n	10c1a <__sflush_r+0x46>
   10c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10c18:	1ac0      	subs	r0, r0, r3
   10c1a:	0002      	movs	r2, r0
   10c1c:	6a21      	ldr	r1, [r4, #32]
   10c1e:	2300      	movs	r3, #0
   10c20:	0028      	movs	r0, r5
   10c22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10c24:	47b8      	blx	r7
   10c26:	89a1      	ldrh	r1, [r4, #12]
   10c28:	1c43      	adds	r3, r0, #1
   10c2a:	d106      	bne.n	10c3a <__sflush_r+0x66>
   10c2c:	682b      	ldr	r3, [r5, #0]
   10c2e:	2b1d      	cmp	r3, #29
   10c30:	d831      	bhi.n	10c96 <__sflush_r+0xc2>
   10c32:	4a2c      	ldr	r2, [pc, #176]	; (10ce4 <__sflush_r+0x110>)
   10c34:	40da      	lsrs	r2, r3
   10c36:	07d3      	lsls	r3, r2, #31
   10c38:	d52d      	bpl.n	10c96 <__sflush_r+0xc2>
   10c3a:	2300      	movs	r3, #0
   10c3c:	6063      	str	r3, [r4, #4]
   10c3e:	6923      	ldr	r3, [r4, #16]
   10c40:	6023      	str	r3, [r4, #0]
   10c42:	04cb      	lsls	r3, r1, #19
   10c44:	d505      	bpl.n	10c52 <__sflush_r+0x7e>
   10c46:	1c43      	adds	r3, r0, #1
   10c48:	d102      	bne.n	10c50 <__sflush_r+0x7c>
   10c4a:	682b      	ldr	r3, [r5, #0]
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	d100      	bne.n	10c52 <__sflush_r+0x7e>
   10c50:	6560      	str	r0, [r4, #84]	; 0x54
   10c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10c54:	602e      	str	r6, [r5, #0]
   10c56:	2900      	cmp	r1, #0
   10c58:	d0c8      	beq.n	10bec <__sflush_r+0x18>
   10c5a:	0023      	movs	r3, r4
   10c5c:	3344      	adds	r3, #68	; 0x44
   10c5e:	4299      	cmp	r1, r3
   10c60:	d002      	beq.n	10c68 <__sflush_r+0x94>
   10c62:	0028      	movs	r0, r5
   10c64:	f000 f9b4 	bl	10fd0 <_free_r>
   10c68:	2000      	movs	r0, #0
   10c6a:	6360      	str	r0, [r4, #52]	; 0x34
   10c6c:	e7bf      	b.n	10bee <__sflush_r+0x1a>
   10c6e:	2301      	movs	r3, #1
   10c70:	6a21      	ldr	r1, [r4, #32]
   10c72:	0028      	movs	r0, r5
   10c74:	47b8      	blx	r7
   10c76:	1c43      	adds	r3, r0, #1
   10c78:	d1c5      	bne.n	10c06 <__sflush_r+0x32>
   10c7a:	682b      	ldr	r3, [r5, #0]
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	d0c2      	beq.n	10c06 <__sflush_r+0x32>
   10c80:	2b1d      	cmp	r3, #29
   10c82:	d001      	beq.n	10c88 <__sflush_r+0xb4>
   10c84:	2b16      	cmp	r3, #22
   10c86:	d101      	bne.n	10c8c <__sflush_r+0xb8>
   10c88:	602e      	str	r6, [r5, #0]
   10c8a:	e7af      	b.n	10bec <__sflush_r+0x18>
   10c8c:	2340      	movs	r3, #64	; 0x40
   10c8e:	89a2      	ldrh	r2, [r4, #12]
   10c90:	4313      	orrs	r3, r2
   10c92:	81a3      	strh	r3, [r4, #12]
   10c94:	e7ab      	b.n	10bee <__sflush_r+0x1a>
   10c96:	2340      	movs	r3, #64	; 0x40
   10c98:	430b      	orrs	r3, r1
   10c9a:	2001      	movs	r0, #1
   10c9c:	81a3      	strh	r3, [r4, #12]
   10c9e:	4240      	negs	r0, r0
   10ca0:	e7a5      	b.n	10bee <__sflush_r+0x1a>
   10ca2:	690f      	ldr	r7, [r1, #16]
   10ca4:	2f00      	cmp	r7, #0
   10ca6:	d0a1      	beq.n	10bec <__sflush_r+0x18>
   10ca8:	680b      	ldr	r3, [r1, #0]
   10caa:	600f      	str	r7, [r1, #0]
   10cac:	1bdb      	subs	r3, r3, r7
   10cae:	9301      	str	r3, [sp, #4]
   10cb0:	2300      	movs	r3, #0
   10cb2:	0792      	lsls	r2, r2, #30
   10cb4:	d100      	bne.n	10cb8 <__sflush_r+0xe4>
   10cb6:	694b      	ldr	r3, [r1, #20]
   10cb8:	60a3      	str	r3, [r4, #8]
   10cba:	9b01      	ldr	r3, [sp, #4]
   10cbc:	2b00      	cmp	r3, #0
   10cbe:	dc00      	bgt.n	10cc2 <__sflush_r+0xee>
   10cc0:	e794      	b.n	10bec <__sflush_r+0x18>
   10cc2:	9b01      	ldr	r3, [sp, #4]
   10cc4:	003a      	movs	r2, r7
   10cc6:	6a21      	ldr	r1, [r4, #32]
   10cc8:	0028      	movs	r0, r5
   10cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10ccc:	47b0      	blx	r6
   10cce:	2800      	cmp	r0, #0
   10cd0:	dc03      	bgt.n	10cda <__sflush_r+0x106>
   10cd2:	2340      	movs	r3, #64	; 0x40
   10cd4:	89a2      	ldrh	r2, [r4, #12]
   10cd6:	4313      	orrs	r3, r2
   10cd8:	e7df      	b.n	10c9a <__sflush_r+0xc6>
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	183f      	adds	r7, r7, r0
   10cde:	1a1b      	subs	r3, r3, r0
   10ce0:	9301      	str	r3, [sp, #4]
   10ce2:	e7ea      	b.n	10cba <__sflush_r+0xe6>
   10ce4:	20400001 	.word	0x20400001

00010ce8 <_fflush_r>:
   10ce8:	690b      	ldr	r3, [r1, #16]
   10cea:	b570      	push	{r4, r5, r6, lr}
   10cec:	0005      	movs	r5, r0
   10cee:	000c      	movs	r4, r1
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d101      	bne.n	10cf8 <_fflush_r+0x10>
   10cf4:	2000      	movs	r0, #0
   10cf6:	bd70      	pop	{r4, r5, r6, pc}
   10cf8:	2800      	cmp	r0, #0
   10cfa:	d004      	beq.n	10d06 <_fflush_r+0x1e>
   10cfc:	6983      	ldr	r3, [r0, #24]
   10cfe:	2b00      	cmp	r3, #0
   10d00:	d101      	bne.n	10d06 <_fflush_r+0x1e>
   10d02:	f000 f85f 	bl	10dc4 <__sinit>
   10d06:	4b0b      	ldr	r3, [pc, #44]	; (10d34 <_fflush_r+0x4c>)
   10d08:	429c      	cmp	r4, r3
   10d0a:	d109      	bne.n	10d20 <_fflush_r+0x38>
   10d0c:	686c      	ldr	r4, [r5, #4]
   10d0e:	220c      	movs	r2, #12
   10d10:	5ea3      	ldrsh	r3, [r4, r2]
   10d12:	2b00      	cmp	r3, #0
   10d14:	d0ee      	beq.n	10cf4 <_fflush_r+0xc>
   10d16:	0021      	movs	r1, r4
   10d18:	0028      	movs	r0, r5
   10d1a:	f7ff ff5b 	bl	10bd4 <__sflush_r>
   10d1e:	e7ea      	b.n	10cf6 <_fflush_r+0xe>
   10d20:	4b05      	ldr	r3, [pc, #20]	; (10d38 <_fflush_r+0x50>)
   10d22:	429c      	cmp	r4, r3
   10d24:	d101      	bne.n	10d2a <_fflush_r+0x42>
   10d26:	68ac      	ldr	r4, [r5, #8]
   10d28:	e7f1      	b.n	10d0e <_fflush_r+0x26>
   10d2a:	4b04      	ldr	r3, [pc, #16]	; (10d3c <_fflush_r+0x54>)
   10d2c:	429c      	cmp	r4, r3
   10d2e:	d1ee      	bne.n	10d0e <_fflush_r+0x26>
   10d30:	68ec      	ldr	r4, [r5, #12]
   10d32:	e7ec      	b.n	10d0e <_fflush_r+0x26>
   10d34:	00011d50 	.word	0x00011d50
   10d38:	00011d70 	.word	0x00011d70
   10d3c:	00011d30 	.word	0x00011d30

00010d40 <_cleanup_r>:
   10d40:	b510      	push	{r4, lr}
   10d42:	4902      	ldr	r1, [pc, #8]	; (10d4c <_cleanup_r+0xc>)
   10d44:	f000 f8b2 	bl	10eac <_fwalk_reent>
   10d48:	bd10      	pop	{r4, pc}
   10d4a:	46c0      	nop			; (mov r8, r8)
   10d4c:	00010ce9 	.word	0x00010ce9

00010d50 <std.isra.0>:
   10d50:	2300      	movs	r3, #0
   10d52:	b510      	push	{r4, lr}
   10d54:	0004      	movs	r4, r0
   10d56:	6003      	str	r3, [r0, #0]
   10d58:	6043      	str	r3, [r0, #4]
   10d5a:	6083      	str	r3, [r0, #8]
   10d5c:	8181      	strh	r1, [r0, #12]
   10d5e:	6643      	str	r3, [r0, #100]	; 0x64
   10d60:	81c2      	strh	r2, [r0, #14]
   10d62:	6103      	str	r3, [r0, #16]
   10d64:	6143      	str	r3, [r0, #20]
   10d66:	6183      	str	r3, [r0, #24]
   10d68:	0019      	movs	r1, r3
   10d6a:	2208      	movs	r2, #8
   10d6c:	305c      	adds	r0, #92	; 0x5c
   10d6e:	f7ff fe5e 	bl	10a2e <memset>
   10d72:	4b05      	ldr	r3, [pc, #20]	; (10d88 <std.isra.0+0x38>)
   10d74:	6224      	str	r4, [r4, #32]
   10d76:	6263      	str	r3, [r4, #36]	; 0x24
   10d78:	4b04      	ldr	r3, [pc, #16]	; (10d8c <std.isra.0+0x3c>)
   10d7a:	62a3      	str	r3, [r4, #40]	; 0x28
   10d7c:	4b04      	ldr	r3, [pc, #16]	; (10d90 <std.isra.0+0x40>)
   10d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
   10d80:	4b04      	ldr	r3, [pc, #16]	; (10d94 <std.isra.0+0x44>)
   10d82:	6323      	str	r3, [r4, #48]	; 0x30
   10d84:	bd10      	pop	{r4, pc}
   10d86:	46c0      	nop			; (mov r8, r8)
   10d88:	000116dd 	.word	0x000116dd
   10d8c:	00011705 	.word	0x00011705
   10d90:	0001173d 	.word	0x0001173d
   10d94:	00011769 	.word	0x00011769

00010d98 <__sfmoreglue>:
   10d98:	b570      	push	{r4, r5, r6, lr}
   10d9a:	2568      	movs	r5, #104	; 0x68
   10d9c:	1e4a      	subs	r2, r1, #1
   10d9e:	4355      	muls	r5, r2
   10da0:	000e      	movs	r6, r1
   10da2:	0029      	movs	r1, r5
   10da4:	3174      	adds	r1, #116	; 0x74
   10da6:	f000 f95d 	bl	11064 <_malloc_r>
   10daa:	1e04      	subs	r4, r0, #0
   10dac:	d008      	beq.n	10dc0 <__sfmoreglue+0x28>
   10dae:	2100      	movs	r1, #0
   10db0:	002a      	movs	r2, r5
   10db2:	6001      	str	r1, [r0, #0]
   10db4:	6046      	str	r6, [r0, #4]
   10db6:	300c      	adds	r0, #12
   10db8:	60a0      	str	r0, [r4, #8]
   10dba:	3268      	adds	r2, #104	; 0x68
   10dbc:	f7ff fe37 	bl	10a2e <memset>
   10dc0:	0020      	movs	r0, r4
   10dc2:	bd70      	pop	{r4, r5, r6, pc}

00010dc4 <__sinit>:
   10dc4:	6983      	ldr	r3, [r0, #24]
   10dc6:	b513      	push	{r0, r1, r4, lr}
   10dc8:	0004      	movs	r4, r0
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d128      	bne.n	10e20 <__sinit+0x5c>
   10dce:	6483      	str	r3, [r0, #72]	; 0x48
   10dd0:	64c3      	str	r3, [r0, #76]	; 0x4c
   10dd2:	6503      	str	r3, [r0, #80]	; 0x50
   10dd4:	4b13      	ldr	r3, [pc, #76]	; (10e24 <__sinit+0x60>)
   10dd6:	4a14      	ldr	r2, [pc, #80]	; (10e28 <__sinit+0x64>)
   10dd8:	681b      	ldr	r3, [r3, #0]
   10dda:	6282      	str	r2, [r0, #40]	; 0x28
   10ddc:	9301      	str	r3, [sp, #4]
   10dde:	4298      	cmp	r0, r3
   10de0:	d101      	bne.n	10de6 <__sinit+0x22>
   10de2:	2301      	movs	r3, #1
   10de4:	6183      	str	r3, [r0, #24]
   10de6:	0020      	movs	r0, r4
   10de8:	f000 f820 	bl	10e2c <__sfp>
   10dec:	6060      	str	r0, [r4, #4]
   10dee:	0020      	movs	r0, r4
   10df0:	f000 f81c 	bl	10e2c <__sfp>
   10df4:	60a0      	str	r0, [r4, #8]
   10df6:	0020      	movs	r0, r4
   10df8:	f000 f818 	bl	10e2c <__sfp>
   10dfc:	2200      	movs	r2, #0
   10dfe:	60e0      	str	r0, [r4, #12]
   10e00:	2104      	movs	r1, #4
   10e02:	6860      	ldr	r0, [r4, #4]
   10e04:	f7ff ffa4 	bl	10d50 <std.isra.0>
   10e08:	2201      	movs	r2, #1
   10e0a:	2109      	movs	r1, #9
   10e0c:	68a0      	ldr	r0, [r4, #8]
   10e0e:	f7ff ff9f 	bl	10d50 <std.isra.0>
   10e12:	2202      	movs	r2, #2
   10e14:	2112      	movs	r1, #18
   10e16:	68e0      	ldr	r0, [r4, #12]
   10e18:	f7ff ff9a 	bl	10d50 <std.isra.0>
   10e1c:	2301      	movs	r3, #1
   10e1e:	61a3      	str	r3, [r4, #24]
   10e20:	bd13      	pop	{r0, r1, r4, pc}
   10e22:	46c0      	nop			; (mov r8, r8)
   10e24:	00011d2c 	.word	0x00011d2c
   10e28:	00010d41 	.word	0x00010d41

00010e2c <__sfp>:
   10e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e2e:	4b1e      	ldr	r3, [pc, #120]	; (10ea8 <__sfp+0x7c>)
   10e30:	0007      	movs	r7, r0
   10e32:	681e      	ldr	r6, [r3, #0]
   10e34:	69b3      	ldr	r3, [r6, #24]
   10e36:	2b00      	cmp	r3, #0
   10e38:	d102      	bne.n	10e40 <__sfp+0x14>
   10e3a:	0030      	movs	r0, r6
   10e3c:	f7ff ffc2 	bl	10dc4 <__sinit>
   10e40:	3648      	adds	r6, #72	; 0x48
   10e42:	68b4      	ldr	r4, [r6, #8]
   10e44:	6873      	ldr	r3, [r6, #4]
   10e46:	3b01      	subs	r3, #1
   10e48:	d504      	bpl.n	10e54 <__sfp+0x28>
   10e4a:	6833      	ldr	r3, [r6, #0]
   10e4c:	2b00      	cmp	r3, #0
   10e4e:	d007      	beq.n	10e60 <__sfp+0x34>
   10e50:	6836      	ldr	r6, [r6, #0]
   10e52:	e7f6      	b.n	10e42 <__sfp+0x16>
   10e54:	220c      	movs	r2, #12
   10e56:	5ea5      	ldrsh	r5, [r4, r2]
   10e58:	2d00      	cmp	r5, #0
   10e5a:	d00d      	beq.n	10e78 <__sfp+0x4c>
   10e5c:	3468      	adds	r4, #104	; 0x68
   10e5e:	e7f2      	b.n	10e46 <__sfp+0x1a>
   10e60:	2104      	movs	r1, #4
   10e62:	0038      	movs	r0, r7
   10e64:	f7ff ff98 	bl	10d98 <__sfmoreglue>
   10e68:	6030      	str	r0, [r6, #0]
   10e6a:	2800      	cmp	r0, #0
   10e6c:	d1f0      	bne.n	10e50 <__sfp+0x24>
   10e6e:	230c      	movs	r3, #12
   10e70:	0004      	movs	r4, r0
   10e72:	603b      	str	r3, [r7, #0]
   10e74:	0020      	movs	r0, r4
   10e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e78:	2301      	movs	r3, #1
   10e7a:	0020      	movs	r0, r4
   10e7c:	425b      	negs	r3, r3
   10e7e:	81e3      	strh	r3, [r4, #14]
   10e80:	3302      	adds	r3, #2
   10e82:	81a3      	strh	r3, [r4, #12]
   10e84:	6665      	str	r5, [r4, #100]	; 0x64
   10e86:	6025      	str	r5, [r4, #0]
   10e88:	60a5      	str	r5, [r4, #8]
   10e8a:	6065      	str	r5, [r4, #4]
   10e8c:	6125      	str	r5, [r4, #16]
   10e8e:	6165      	str	r5, [r4, #20]
   10e90:	61a5      	str	r5, [r4, #24]
   10e92:	2208      	movs	r2, #8
   10e94:	0029      	movs	r1, r5
   10e96:	305c      	adds	r0, #92	; 0x5c
   10e98:	f7ff fdc9 	bl	10a2e <memset>
   10e9c:	6365      	str	r5, [r4, #52]	; 0x34
   10e9e:	63a5      	str	r5, [r4, #56]	; 0x38
   10ea0:	64a5      	str	r5, [r4, #72]	; 0x48
   10ea2:	64e5      	str	r5, [r4, #76]	; 0x4c
   10ea4:	e7e6      	b.n	10e74 <__sfp+0x48>
   10ea6:	46c0      	nop			; (mov r8, r8)
   10ea8:	00011d2c 	.word	0x00011d2c

00010eac <_fwalk_reent>:
   10eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10eae:	0004      	movs	r4, r0
   10eb0:	0007      	movs	r7, r0
   10eb2:	2600      	movs	r6, #0
   10eb4:	9101      	str	r1, [sp, #4]
   10eb6:	3448      	adds	r4, #72	; 0x48
   10eb8:	2c00      	cmp	r4, #0
   10eba:	d101      	bne.n	10ec0 <_fwalk_reent+0x14>
   10ebc:	0030      	movs	r0, r6
   10ebe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10ec0:	6863      	ldr	r3, [r4, #4]
   10ec2:	68a5      	ldr	r5, [r4, #8]
   10ec4:	9300      	str	r3, [sp, #0]
   10ec6:	9b00      	ldr	r3, [sp, #0]
   10ec8:	3b01      	subs	r3, #1
   10eca:	9300      	str	r3, [sp, #0]
   10ecc:	d501      	bpl.n	10ed2 <_fwalk_reent+0x26>
   10ece:	6824      	ldr	r4, [r4, #0]
   10ed0:	e7f2      	b.n	10eb8 <_fwalk_reent+0xc>
   10ed2:	89ab      	ldrh	r3, [r5, #12]
   10ed4:	2b01      	cmp	r3, #1
   10ed6:	d908      	bls.n	10eea <_fwalk_reent+0x3e>
   10ed8:	220e      	movs	r2, #14
   10eda:	5eab      	ldrsh	r3, [r5, r2]
   10edc:	3301      	adds	r3, #1
   10ede:	d004      	beq.n	10eea <_fwalk_reent+0x3e>
   10ee0:	0029      	movs	r1, r5
   10ee2:	0038      	movs	r0, r7
   10ee4:	9b01      	ldr	r3, [sp, #4]
   10ee6:	4798      	blx	r3
   10ee8:	4306      	orrs	r6, r0
   10eea:	3568      	adds	r5, #104	; 0x68
   10eec:	e7eb      	b.n	10ec6 <_fwalk_reent+0x1a>
	...

00010ef0 <__swhatbuf_r>:
   10ef0:	b570      	push	{r4, r5, r6, lr}
   10ef2:	000e      	movs	r6, r1
   10ef4:	001d      	movs	r5, r3
   10ef6:	230e      	movs	r3, #14
   10ef8:	5ec9      	ldrsh	r1, [r1, r3]
   10efa:	b090      	sub	sp, #64	; 0x40
   10efc:	0014      	movs	r4, r2
   10efe:	2900      	cmp	r1, #0
   10f00:	da07      	bge.n	10f12 <__swhatbuf_r+0x22>
   10f02:	2300      	movs	r3, #0
   10f04:	602b      	str	r3, [r5, #0]
   10f06:	89b3      	ldrh	r3, [r6, #12]
   10f08:	061b      	lsls	r3, r3, #24
   10f0a:	d411      	bmi.n	10f30 <__swhatbuf_r+0x40>
   10f0c:	2380      	movs	r3, #128	; 0x80
   10f0e:	00db      	lsls	r3, r3, #3
   10f10:	e00f      	b.n	10f32 <__swhatbuf_r+0x42>
   10f12:	aa01      	add	r2, sp, #4
   10f14:	f000 fd20 	bl	11958 <_fstat_r>
   10f18:	2800      	cmp	r0, #0
   10f1a:	dbf2      	blt.n	10f02 <__swhatbuf_r+0x12>
   10f1c:	22f0      	movs	r2, #240	; 0xf0
   10f1e:	9b02      	ldr	r3, [sp, #8]
   10f20:	0212      	lsls	r2, r2, #8
   10f22:	4013      	ands	r3, r2
   10f24:	4a05      	ldr	r2, [pc, #20]	; (10f3c <__swhatbuf_r+0x4c>)
   10f26:	189b      	adds	r3, r3, r2
   10f28:	425a      	negs	r2, r3
   10f2a:	4153      	adcs	r3, r2
   10f2c:	602b      	str	r3, [r5, #0]
   10f2e:	e7ed      	b.n	10f0c <__swhatbuf_r+0x1c>
   10f30:	2340      	movs	r3, #64	; 0x40
   10f32:	2000      	movs	r0, #0
   10f34:	6023      	str	r3, [r4, #0]
   10f36:	b010      	add	sp, #64	; 0x40
   10f38:	bd70      	pop	{r4, r5, r6, pc}
   10f3a:	46c0      	nop			; (mov r8, r8)
   10f3c:	ffffe000 	.word	0xffffe000

00010f40 <__smakebuf_r>:
   10f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f42:	2602      	movs	r6, #2
   10f44:	898b      	ldrh	r3, [r1, #12]
   10f46:	0005      	movs	r5, r0
   10f48:	000c      	movs	r4, r1
   10f4a:	4233      	tst	r3, r6
   10f4c:	d006      	beq.n	10f5c <__smakebuf_r+0x1c>
   10f4e:	0023      	movs	r3, r4
   10f50:	3347      	adds	r3, #71	; 0x47
   10f52:	6023      	str	r3, [r4, #0]
   10f54:	6123      	str	r3, [r4, #16]
   10f56:	2301      	movs	r3, #1
   10f58:	6163      	str	r3, [r4, #20]
   10f5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10f5c:	ab01      	add	r3, sp, #4
   10f5e:	466a      	mov	r2, sp
   10f60:	f7ff ffc6 	bl	10ef0 <__swhatbuf_r>
   10f64:	9900      	ldr	r1, [sp, #0]
   10f66:	0007      	movs	r7, r0
   10f68:	0028      	movs	r0, r5
   10f6a:	f000 f87b 	bl	11064 <_malloc_r>
   10f6e:	2800      	cmp	r0, #0
   10f70:	d106      	bne.n	10f80 <__smakebuf_r+0x40>
   10f72:	220c      	movs	r2, #12
   10f74:	5ea3      	ldrsh	r3, [r4, r2]
   10f76:	059a      	lsls	r2, r3, #22
   10f78:	d4ef      	bmi.n	10f5a <__smakebuf_r+0x1a>
   10f7a:	431e      	orrs	r6, r3
   10f7c:	81a6      	strh	r6, [r4, #12]
   10f7e:	e7e6      	b.n	10f4e <__smakebuf_r+0xe>
   10f80:	4b0d      	ldr	r3, [pc, #52]	; (10fb8 <__smakebuf_r+0x78>)
   10f82:	62ab      	str	r3, [r5, #40]	; 0x28
   10f84:	2380      	movs	r3, #128	; 0x80
   10f86:	89a2      	ldrh	r2, [r4, #12]
   10f88:	6020      	str	r0, [r4, #0]
   10f8a:	4313      	orrs	r3, r2
   10f8c:	81a3      	strh	r3, [r4, #12]
   10f8e:	9b00      	ldr	r3, [sp, #0]
   10f90:	6120      	str	r0, [r4, #16]
   10f92:	6163      	str	r3, [r4, #20]
   10f94:	9b01      	ldr	r3, [sp, #4]
   10f96:	2b00      	cmp	r3, #0
   10f98:	d00a      	beq.n	10fb0 <__smakebuf_r+0x70>
   10f9a:	230e      	movs	r3, #14
   10f9c:	5ee1      	ldrsh	r1, [r4, r3]
   10f9e:	0028      	movs	r0, r5
   10fa0:	f000 fcec 	bl	1197c <_isatty_r>
   10fa4:	2800      	cmp	r0, #0
   10fa6:	d003      	beq.n	10fb0 <__smakebuf_r+0x70>
   10fa8:	2301      	movs	r3, #1
   10faa:	89a2      	ldrh	r2, [r4, #12]
   10fac:	4313      	orrs	r3, r2
   10fae:	81a3      	strh	r3, [r4, #12]
   10fb0:	89a0      	ldrh	r0, [r4, #12]
   10fb2:	4338      	orrs	r0, r7
   10fb4:	81a0      	strh	r0, [r4, #12]
   10fb6:	e7d0      	b.n	10f5a <__smakebuf_r+0x1a>
   10fb8:	00010d41 	.word	0x00010d41

00010fbc <malloc>:
   10fbc:	b510      	push	{r4, lr}
   10fbe:	4b03      	ldr	r3, [pc, #12]	; (10fcc <malloc+0x10>)
   10fc0:	0001      	movs	r1, r0
   10fc2:	6818      	ldr	r0, [r3, #0]
   10fc4:	f000 f84e 	bl	11064 <_malloc_r>
   10fc8:	bd10      	pop	{r4, pc}
   10fca:	46c0      	nop			; (mov r8, r8)
   10fcc:	20000120 	.word	0x20000120

00010fd0 <_free_r>:
   10fd0:	b570      	push	{r4, r5, r6, lr}
   10fd2:	0005      	movs	r5, r0
   10fd4:	2900      	cmp	r1, #0
   10fd6:	d010      	beq.n	10ffa <_free_r+0x2a>
   10fd8:	1f0c      	subs	r4, r1, #4
   10fda:	6823      	ldr	r3, [r4, #0]
   10fdc:	2b00      	cmp	r3, #0
   10fde:	da00      	bge.n	10fe2 <_free_r+0x12>
   10fe0:	18e4      	adds	r4, r4, r3
   10fe2:	0028      	movs	r0, r5
   10fe4:	f000 fcfb 	bl	119de <__malloc_lock>
   10fe8:	4a1d      	ldr	r2, [pc, #116]	; (11060 <_free_r+0x90>)
   10fea:	6813      	ldr	r3, [r2, #0]
   10fec:	2b00      	cmp	r3, #0
   10fee:	d105      	bne.n	10ffc <_free_r+0x2c>
   10ff0:	6063      	str	r3, [r4, #4]
   10ff2:	6014      	str	r4, [r2, #0]
   10ff4:	0028      	movs	r0, r5
   10ff6:	f000 fcf3 	bl	119e0 <__malloc_unlock>
   10ffa:	bd70      	pop	{r4, r5, r6, pc}
   10ffc:	42a3      	cmp	r3, r4
   10ffe:	d909      	bls.n	11014 <_free_r+0x44>
   11000:	6821      	ldr	r1, [r4, #0]
   11002:	1860      	adds	r0, r4, r1
   11004:	4283      	cmp	r3, r0
   11006:	d1f3      	bne.n	10ff0 <_free_r+0x20>
   11008:	6818      	ldr	r0, [r3, #0]
   1100a:	685b      	ldr	r3, [r3, #4]
   1100c:	1841      	adds	r1, r0, r1
   1100e:	6021      	str	r1, [r4, #0]
   11010:	e7ee      	b.n	10ff0 <_free_r+0x20>
   11012:	0013      	movs	r3, r2
   11014:	685a      	ldr	r2, [r3, #4]
   11016:	2a00      	cmp	r2, #0
   11018:	d001      	beq.n	1101e <_free_r+0x4e>
   1101a:	42a2      	cmp	r2, r4
   1101c:	d9f9      	bls.n	11012 <_free_r+0x42>
   1101e:	6819      	ldr	r1, [r3, #0]
   11020:	1858      	adds	r0, r3, r1
   11022:	42a0      	cmp	r0, r4
   11024:	d10b      	bne.n	1103e <_free_r+0x6e>
   11026:	6820      	ldr	r0, [r4, #0]
   11028:	1809      	adds	r1, r1, r0
   1102a:	1858      	adds	r0, r3, r1
   1102c:	6019      	str	r1, [r3, #0]
   1102e:	4282      	cmp	r2, r0
   11030:	d1e0      	bne.n	10ff4 <_free_r+0x24>
   11032:	6810      	ldr	r0, [r2, #0]
   11034:	6852      	ldr	r2, [r2, #4]
   11036:	1841      	adds	r1, r0, r1
   11038:	6019      	str	r1, [r3, #0]
   1103a:	605a      	str	r2, [r3, #4]
   1103c:	e7da      	b.n	10ff4 <_free_r+0x24>
   1103e:	42a0      	cmp	r0, r4
   11040:	d902      	bls.n	11048 <_free_r+0x78>
   11042:	230c      	movs	r3, #12
   11044:	602b      	str	r3, [r5, #0]
   11046:	e7d5      	b.n	10ff4 <_free_r+0x24>
   11048:	6821      	ldr	r1, [r4, #0]
   1104a:	1860      	adds	r0, r4, r1
   1104c:	4282      	cmp	r2, r0
   1104e:	d103      	bne.n	11058 <_free_r+0x88>
   11050:	6810      	ldr	r0, [r2, #0]
   11052:	6852      	ldr	r2, [r2, #4]
   11054:	1841      	adds	r1, r0, r1
   11056:	6021      	str	r1, [r4, #0]
   11058:	6062      	str	r2, [r4, #4]
   1105a:	605c      	str	r4, [r3, #4]
   1105c:	e7ca      	b.n	10ff4 <_free_r+0x24>
   1105e:	46c0      	nop			; (mov r8, r8)
   11060:	20000664 	.word	0x20000664

00011064 <_malloc_r>:
   11064:	2303      	movs	r3, #3
   11066:	b570      	push	{r4, r5, r6, lr}
   11068:	1ccd      	adds	r5, r1, #3
   1106a:	439d      	bics	r5, r3
   1106c:	3508      	adds	r5, #8
   1106e:	0006      	movs	r6, r0
   11070:	2d0c      	cmp	r5, #12
   11072:	d21e      	bcs.n	110b2 <_malloc_r+0x4e>
   11074:	250c      	movs	r5, #12
   11076:	42a9      	cmp	r1, r5
   11078:	d81d      	bhi.n	110b6 <_malloc_r+0x52>
   1107a:	0030      	movs	r0, r6
   1107c:	f000 fcaf 	bl	119de <__malloc_lock>
   11080:	4a25      	ldr	r2, [pc, #148]	; (11118 <_malloc_r+0xb4>)
   11082:	6814      	ldr	r4, [r2, #0]
   11084:	0021      	movs	r1, r4
   11086:	2900      	cmp	r1, #0
   11088:	d119      	bne.n	110be <_malloc_r+0x5a>
   1108a:	4c24      	ldr	r4, [pc, #144]	; (1111c <_malloc_r+0xb8>)
   1108c:	6823      	ldr	r3, [r4, #0]
   1108e:	2b00      	cmp	r3, #0
   11090:	d103      	bne.n	1109a <_malloc_r+0x36>
   11092:	0030      	movs	r0, r6
   11094:	f000 fb10 	bl	116b8 <_sbrk_r>
   11098:	6020      	str	r0, [r4, #0]
   1109a:	0029      	movs	r1, r5
   1109c:	0030      	movs	r0, r6
   1109e:	f000 fb0b 	bl	116b8 <_sbrk_r>
   110a2:	1c43      	adds	r3, r0, #1
   110a4:	d12c      	bne.n	11100 <_malloc_r+0x9c>
   110a6:	230c      	movs	r3, #12
   110a8:	0030      	movs	r0, r6
   110aa:	6033      	str	r3, [r6, #0]
   110ac:	f000 fc98 	bl	119e0 <__malloc_unlock>
   110b0:	e003      	b.n	110ba <_malloc_r+0x56>
   110b2:	2d00      	cmp	r5, #0
   110b4:	dadf      	bge.n	11076 <_malloc_r+0x12>
   110b6:	230c      	movs	r3, #12
   110b8:	6033      	str	r3, [r6, #0]
   110ba:	2000      	movs	r0, #0
   110bc:	bd70      	pop	{r4, r5, r6, pc}
   110be:	680b      	ldr	r3, [r1, #0]
   110c0:	1b5b      	subs	r3, r3, r5
   110c2:	d41a      	bmi.n	110fa <_malloc_r+0x96>
   110c4:	2b0b      	cmp	r3, #11
   110c6:	d903      	bls.n	110d0 <_malloc_r+0x6c>
   110c8:	600b      	str	r3, [r1, #0]
   110ca:	18cc      	adds	r4, r1, r3
   110cc:	6025      	str	r5, [r4, #0]
   110ce:	e003      	b.n	110d8 <_malloc_r+0x74>
   110d0:	428c      	cmp	r4, r1
   110d2:	d10e      	bne.n	110f2 <_malloc_r+0x8e>
   110d4:	6863      	ldr	r3, [r4, #4]
   110d6:	6013      	str	r3, [r2, #0]
   110d8:	0030      	movs	r0, r6
   110da:	f000 fc81 	bl	119e0 <__malloc_unlock>
   110de:	0020      	movs	r0, r4
   110e0:	2207      	movs	r2, #7
   110e2:	300b      	adds	r0, #11
   110e4:	1d23      	adds	r3, r4, #4
   110e6:	4390      	bics	r0, r2
   110e8:	1ac3      	subs	r3, r0, r3
   110ea:	d0e7      	beq.n	110bc <_malloc_r+0x58>
   110ec:	425a      	negs	r2, r3
   110ee:	50e2      	str	r2, [r4, r3]
   110f0:	e7e4      	b.n	110bc <_malloc_r+0x58>
   110f2:	684b      	ldr	r3, [r1, #4]
   110f4:	6063      	str	r3, [r4, #4]
   110f6:	000c      	movs	r4, r1
   110f8:	e7ee      	b.n	110d8 <_malloc_r+0x74>
   110fa:	000c      	movs	r4, r1
   110fc:	6849      	ldr	r1, [r1, #4]
   110fe:	e7c2      	b.n	11086 <_malloc_r+0x22>
   11100:	2303      	movs	r3, #3
   11102:	1cc4      	adds	r4, r0, #3
   11104:	439c      	bics	r4, r3
   11106:	42a0      	cmp	r0, r4
   11108:	d0e0      	beq.n	110cc <_malloc_r+0x68>
   1110a:	1a21      	subs	r1, r4, r0
   1110c:	0030      	movs	r0, r6
   1110e:	f000 fad3 	bl	116b8 <_sbrk_r>
   11112:	1c43      	adds	r3, r0, #1
   11114:	d1da      	bne.n	110cc <_malloc_r+0x68>
   11116:	e7c6      	b.n	110a6 <_malloc_r+0x42>
   11118:	20000664 	.word	0x20000664
   1111c:	20000668 	.word	0x20000668

00011120 <__sfputc_r>:
   11120:	6893      	ldr	r3, [r2, #8]
   11122:	b510      	push	{r4, lr}
   11124:	3b01      	subs	r3, #1
   11126:	6093      	str	r3, [r2, #8]
   11128:	2b00      	cmp	r3, #0
   1112a:	da05      	bge.n	11138 <__sfputc_r+0x18>
   1112c:	6994      	ldr	r4, [r2, #24]
   1112e:	42a3      	cmp	r3, r4
   11130:	db08      	blt.n	11144 <__sfputc_r+0x24>
   11132:	b2cb      	uxtb	r3, r1
   11134:	2b0a      	cmp	r3, #10
   11136:	d005      	beq.n	11144 <__sfputc_r+0x24>
   11138:	6813      	ldr	r3, [r2, #0]
   1113a:	1c58      	adds	r0, r3, #1
   1113c:	6010      	str	r0, [r2, #0]
   1113e:	7019      	strb	r1, [r3, #0]
   11140:	b2c8      	uxtb	r0, r1
   11142:	bd10      	pop	{r4, pc}
   11144:	f000 fb16 	bl	11774 <__swbuf_r>
   11148:	e7fb      	b.n	11142 <__sfputc_r+0x22>

0001114a <__sfputs_r>:
   1114a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1114c:	0006      	movs	r6, r0
   1114e:	000f      	movs	r7, r1
   11150:	0014      	movs	r4, r2
   11152:	18d5      	adds	r5, r2, r3
   11154:	42ac      	cmp	r4, r5
   11156:	d101      	bne.n	1115c <__sfputs_r+0x12>
   11158:	2000      	movs	r0, #0
   1115a:	e007      	b.n	1116c <__sfputs_r+0x22>
   1115c:	7821      	ldrb	r1, [r4, #0]
   1115e:	003a      	movs	r2, r7
   11160:	0030      	movs	r0, r6
   11162:	f7ff ffdd 	bl	11120 <__sfputc_r>
   11166:	3401      	adds	r4, #1
   11168:	1c43      	adds	r3, r0, #1
   1116a:	d1f3      	bne.n	11154 <__sfputs_r+0xa>
   1116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011170 <_vfiprintf_r>:
   11170:	b5f0      	push	{r4, r5, r6, r7, lr}
   11172:	b09f      	sub	sp, #124	; 0x7c
   11174:	0006      	movs	r6, r0
   11176:	000f      	movs	r7, r1
   11178:	0014      	movs	r4, r2
   1117a:	9305      	str	r3, [sp, #20]
   1117c:	2800      	cmp	r0, #0
   1117e:	d004      	beq.n	1118a <_vfiprintf_r+0x1a>
   11180:	6983      	ldr	r3, [r0, #24]
   11182:	2b00      	cmp	r3, #0
   11184:	d101      	bne.n	1118a <_vfiprintf_r+0x1a>
   11186:	f7ff fe1d 	bl	10dc4 <__sinit>
   1118a:	4b7f      	ldr	r3, [pc, #508]	; (11388 <_vfiprintf_r+0x218>)
   1118c:	429f      	cmp	r7, r3
   1118e:	d15c      	bne.n	1124a <_vfiprintf_r+0xda>
   11190:	6877      	ldr	r7, [r6, #4]
   11192:	89bb      	ldrh	r3, [r7, #12]
   11194:	071b      	lsls	r3, r3, #28
   11196:	d562      	bpl.n	1125e <_vfiprintf_r+0xee>
   11198:	693b      	ldr	r3, [r7, #16]
   1119a:	2b00      	cmp	r3, #0
   1119c:	d05f      	beq.n	1125e <_vfiprintf_r+0xee>
   1119e:	2300      	movs	r3, #0
   111a0:	ad06      	add	r5, sp, #24
   111a2:	616b      	str	r3, [r5, #20]
   111a4:	3320      	adds	r3, #32
   111a6:	766b      	strb	r3, [r5, #25]
   111a8:	3310      	adds	r3, #16
   111aa:	76ab      	strb	r3, [r5, #26]
   111ac:	9402      	str	r4, [sp, #8]
   111ae:	9c02      	ldr	r4, [sp, #8]
   111b0:	7823      	ldrb	r3, [r4, #0]
   111b2:	2b00      	cmp	r3, #0
   111b4:	d15d      	bne.n	11272 <_vfiprintf_r+0x102>
   111b6:	9b02      	ldr	r3, [sp, #8]
   111b8:	1ae3      	subs	r3, r4, r3
   111ba:	9304      	str	r3, [sp, #16]
   111bc:	d00d      	beq.n	111da <_vfiprintf_r+0x6a>
   111be:	9b04      	ldr	r3, [sp, #16]
   111c0:	9a02      	ldr	r2, [sp, #8]
   111c2:	0039      	movs	r1, r7
   111c4:	0030      	movs	r0, r6
   111c6:	f7ff ffc0 	bl	1114a <__sfputs_r>
   111ca:	1c43      	adds	r3, r0, #1
   111cc:	d100      	bne.n	111d0 <_vfiprintf_r+0x60>
   111ce:	e0cc      	b.n	1136a <_vfiprintf_r+0x1fa>
   111d0:	696a      	ldr	r2, [r5, #20]
   111d2:	9b04      	ldr	r3, [sp, #16]
   111d4:	4694      	mov	ip, r2
   111d6:	4463      	add	r3, ip
   111d8:	616b      	str	r3, [r5, #20]
   111da:	7823      	ldrb	r3, [r4, #0]
   111dc:	2b00      	cmp	r3, #0
   111de:	d100      	bne.n	111e2 <_vfiprintf_r+0x72>
   111e0:	e0c3      	b.n	1136a <_vfiprintf_r+0x1fa>
   111e2:	2201      	movs	r2, #1
   111e4:	2300      	movs	r3, #0
   111e6:	4252      	negs	r2, r2
   111e8:	606a      	str	r2, [r5, #4]
   111ea:	a902      	add	r1, sp, #8
   111ec:	3254      	adds	r2, #84	; 0x54
   111ee:	1852      	adds	r2, r2, r1
   111f0:	3401      	adds	r4, #1
   111f2:	602b      	str	r3, [r5, #0]
   111f4:	60eb      	str	r3, [r5, #12]
   111f6:	60ab      	str	r3, [r5, #8]
   111f8:	7013      	strb	r3, [r2, #0]
   111fa:	65ab      	str	r3, [r5, #88]	; 0x58
   111fc:	7821      	ldrb	r1, [r4, #0]
   111fe:	2205      	movs	r2, #5
   11200:	4862      	ldr	r0, [pc, #392]	; (1138c <_vfiprintf_r+0x21c>)
   11202:	f000 fbe1 	bl	119c8 <memchr>
   11206:	1c63      	adds	r3, r4, #1
   11208:	469c      	mov	ip, r3
   1120a:	2800      	cmp	r0, #0
   1120c:	d135      	bne.n	1127a <_vfiprintf_r+0x10a>
   1120e:	6829      	ldr	r1, [r5, #0]
   11210:	06cb      	lsls	r3, r1, #27
   11212:	d504      	bpl.n	1121e <_vfiprintf_r+0xae>
   11214:	2353      	movs	r3, #83	; 0x53
   11216:	aa02      	add	r2, sp, #8
   11218:	3020      	adds	r0, #32
   1121a:	189b      	adds	r3, r3, r2
   1121c:	7018      	strb	r0, [r3, #0]
   1121e:	070b      	lsls	r3, r1, #28
   11220:	d504      	bpl.n	1122c <_vfiprintf_r+0xbc>
   11222:	2353      	movs	r3, #83	; 0x53
   11224:	202b      	movs	r0, #43	; 0x2b
   11226:	aa02      	add	r2, sp, #8
   11228:	189b      	adds	r3, r3, r2
   1122a:	7018      	strb	r0, [r3, #0]
   1122c:	7823      	ldrb	r3, [r4, #0]
   1122e:	2b2a      	cmp	r3, #42	; 0x2a
   11230:	d02c      	beq.n	1128c <_vfiprintf_r+0x11c>
   11232:	2000      	movs	r0, #0
   11234:	210a      	movs	r1, #10
   11236:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11238:	7822      	ldrb	r2, [r4, #0]
   1123a:	3a30      	subs	r2, #48	; 0x30
   1123c:	2a09      	cmp	r2, #9
   1123e:	d800      	bhi.n	11242 <_vfiprintf_r+0xd2>
   11240:	e06b      	b.n	1131a <_vfiprintf_r+0x1aa>
   11242:	2800      	cmp	r0, #0
   11244:	d02a      	beq.n	1129c <_vfiprintf_r+0x12c>
   11246:	9309      	str	r3, [sp, #36]	; 0x24
   11248:	e028      	b.n	1129c <_vfiprintf_r+0x12c>
   1124a:	4b51      	ldr	r3, [pc, #324]	; (11390 <_vfiprintf_r+0x220>)
   1124c:	429f      	cmp	r7, r3
   1124e:	d101      	bne.n	11254 <_vfiprintf_r+0xe4>
   11250:	68b7      	ldr	r7, [r6, #8]
   11252:	e79e      	b.n	11192 <_vfiprintf_r+0x22>
   11254:	4b4f      	ldr	r3, [pc, #316]	; (11394 <_vfiprintf_r+0x224>)
   11256:	429f      	cmp	r7, r3
   11258:	d19b      	bne.n	11192 <_vfiprintf_r+0x22>
   1125a:	68f7      	ldr	r7, [r6, #12]
   1125c:	e799      	b.n	11192 <_vfiprintf_r+0x22>
   1125e:	0039      	movs	r1, r7
   11260:	0030      	movs	r0, r6
   11262:	f000 faf1 	bl	11848 <__swsetup_r>
   11266:	2800      	cmp	r0, #0
   11268:	d099      	beq.n	1119e <_vfiprintf_r+0x2e>
   1126a:	2001      	movs	r0, #1
   1126c:	4240      	negs	r0, r0
   1126e:	b01f      	add	sp, #124	; 0x7c
   11270:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11272:	2b25      	cmp	r3, #37	; 0x25
   11274:	d09f      	beq.n	111b6 <_vfiprintf_r+0x46>
   11276:	3401      	adds	r4, #1
   11278:	e79a      	b.n	111b0 <_vfiprintf_r+0x40>
   1127a:	4b44      	ldr	r3, [pc, #272]	; (1138c <_vfiprintf_r+0x21c>)
   1127c:	6829      	ldr	r1, [r5, #0]
   1127e:	1ac0      	subs	r0, r0, r3
   11280:	2301      	movs	r3, #1
   11282:	4083      	lsls	r3, r0
   11284:	430b      	orrs	r3, r1
   11286:	602b      	str	r3, [r5, #0]
   11288:	4664      	mov	r4, ip
   1128a:	e7b7      	b.n	111fc <_vfiprintf_r+0x8c>
   1128c:	9b05      	ldr	r3, [sp, #20]
   1128e:	1d18      	adds	r0, r3, #4
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	9005      	str	r0, [sp, #20]
   11294:	2b00      	cmp	r3, #0
   11296:	db3a      	blt.n	1130e <_vfiprintf_r+0x19e>
   11298:	9309      	str	r3, [sp, #36]	; 0x24
   1129a:	4664      	mov	r4, ip
   1129c:	7823      	ldrb	r3, [r4, #0]
   1129e:	2b2e      	cmp	r3, #46	; 0x2e
   112a0:	d10b      	bne.n	112ba <_vfiprintf_r+0x14a>
   112a2:	7863      	ldrb	r3, [r4, #1]
   112a4:	1c62      	adds	r2, r4, #1
   112a6:	2b2a      	cmp	r3, #42	; 0x2a
   112a8:	d13f      	bne.n	1132a <_vfiprintf_r+0x1ba>
   112aa:	9b05      	ldr	r3, [sp, #20]
   112ac:	3402      	adds	r4, #2
   112ae:	1d1a      	adds	r2, r3, #4
   112b0:	681b      	ldr	r3, [r3, #0]
   112b2:	9205      	str	r2, [sp, #20]
   112b4:	2b00      	cmp	r3, #0
   112b6:	db35      	blt.n	11324 <_vfiprintf_r+0x1b4>
   112b8:	9307      	str	r3, [sp, #28]
   112ba:	7821      	ldrb	r1, [r4, #0]
   112bc:	2203      	movs	r2, #3
   112be:	4836      	ldr	r0, [pc, #216]	; (11398 <_vfiprintf_r+0x228>)
   112c0:	f000 fb82 	bl	119c8 <memchr>
   112c4:	2800      	cmp	r0, #0
   112c6:	d007      	beq.n	112d8 <_vfiprintf_r+0x168>
   112c8:	4b33      	ldr	r3, [pc, #204]	; (11398 <_vfiprintf_r+0x228>)
   112ca:	682a      	ldr	r2, [r5, #0]
   112cc:	1ac0      	subs	r0, r0, r3
   112ce:	2340      	movs	r3, #64	; 0x40
   112d0:	4083      	lsls	r3, r0
   112d2:	4313      	orrs	r3, r2
   112d4:	602b      	str	r3, [r5, #0]
   112d6:	3401      	adds	r4, #1
   112d8:	7821      	ldrb	r1, [r4, #0]
   112da:	1c63      	adds	r3, r4, #1
   112dc:	2206      	movs	r2, #6
   112de:	482f      	ldr	r0, [pc, #188]	; (1139c <_vfiprintf_r+0x22c>)
   112e0:	9302      	str	r3, [sp, #8]
   112e2:	7629      	strb	r1, [r5, #24]
   112e4:	f000 fb70 	bl	119c8 <memchr>
   112e8:	2800      	cmp	r0, #0
   112ea:	d044      	beq.n	11376 <_vfiprintf_r+0x206>
   112ec:	4b2c      	ldr	r3, [pc, #176]	; (113a0 <_vfiprintf_r+0x230>)
   112ee:	2b00      	cmp	r3, #0
   112f0:	d12f      	bne.n	11352 <_vfiprintf_r+0x1e2>
   112f2:	6829      	ldr	r1, [r5, #0]
   112f4:	9b05      	ldr	r3, [sp, #20]
   112f6:	2207      	movs	r2, #7
   112f8:	05c9      	lsls	r1, r1, #23
   112fa:	d528      	bpl.n	1134e <_vfiprintf_r+0x1de>
   112fc:	189b      	adds	r3, r3, r2
   112fe:	4393      	bics	r3, r2
   11300:	3308      	adds	r3, #8
   11302:	9305      	str	r3, [sp, #20]
   11304:	696b      	ldr	r3, [r5, #20]
   11306:	9a03      	ldr	r2, [sp, #12]
   11308:	189b      	adds	r3, r3, r2
   1130a:	616b      	str	r3, [r5, #20]
   1130c:	e74f      	b.n	111ae <_vfiprintf_r+0x3e>
   1130e:	425b      	negs	r3, r3
   11310:	60eb      	str	r3, [r5, #12]
   11312:	2302      	movs	r3, #2
   11314:	430b      	orrs	r3, r1
   11316:	602b      	str	r3, [r5, #0]
   11318:	e7bf      	b.n	1129a <_vfiprintf_r+0x12a>
   1131a:	434b      	muls	r3, r1
   1131c:	3401      	adds	r4, #1
   1131e:	189b      	adds	r3, r3, r2
   11320:	2001      	movs	r0, #1
   11322:	e789      	b.n	11238 <_vfiprintf_r+0xc8>
   11324:	2301      	movs	r3, #1
   11326:	425b      	negs	r3, r3
   11328:	e7c6      	b.n	112b8 <_vfiprintf_r+0x148>
   1132a:	2300      	movs	r3, #0
   1132c:	0014      	movs	r4, r2
   1132e:	200a      	movs	r0, #10
   11330:	001a      	movs	r2, r3
   11332:	606b      	str	r3, [r5, #4]
   11334:	7821      	ldrb	r1, [r4, #0]
   11336:	3930      	subs	r1, #48	; 0x30
   11338:	2909      	cmp	r1, #9
   1133a:	d903      	bls.n	11344 <_vfiprintf_r+0x1d4>
   1133c:	2b00      	cmp	r3, #0
   1133e:	d0bc      	beq.n	112ba <_vfiprintf_r+0x14a>
   11340:	9207      	str	r2, [sp, #28]
   11342:	e7ba      	b.n	112ba <_vfiprintf_r+0x14a>
   11344:	4342      	muls	r2, r0
   11346:	3401      	adds	r4, #1
   11348:	1852      	adds	r2, r2, r1
   1134a:	2301      	movs	r3, #1
   1134c:	e7f2      	b.n	11334 <_vfiprintf_r+0x1c4>
   1134e:	3307      	adds	r3, #7
   11350:	e7d5      	b.n	112fe <_vfiprintf_r+0x18e>
   11352:	ab05      	add	r3, sp, #20
   11354:	9300      	str	r3, [sp, #0]
   11356:	003a      	movs	r2, r7
   11358:	4b12      	ldr	r3, [pc, #72]	; (113a4 <_vfiprintf_r+0x234>)
   1135a:	0029      	movs	r1, r5
   1135c:	0030      	movs	r0, r6
   1135e:	e000      	b.n	11362 <_vfiprintf_r+0x1f2>
   11360:	bf00      	nop
   11362:	9003      	str	r0, [sp, #12]
   11364:	9b03      	ldr	r3, [sp, #12]
   11366:	3301      	adds	r3, #1
   11368:	d1cc      	bne.n	11304 <_vfiprintf_r+0x194>
   1136a:	89bb      	ldrh	r3, [r7, #12]
   1136c:	065b      	lsls	r3, r3, #25
   1136e:	d500      	bpl.n	11372 <_vfiprintf_r+0x202>
   11370:	e77b      	b.n	1126a <_vfiprintf_r+0xfa>
   11372:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11374:	e77b      	b.n	1126e <_vfiprintf_r+0xfe>
   11376:	ab05      	add	r3, sp, #20
   11378:	9300      	str	r3, [sp, #0]
   1137a:	003a      	movs	r2, r7
   1137c:	4b09      	ldr	r3, [pc, #36]	; (113a4 <_vfiprintf_r+0x234>)
   1137e:	0029      	movs	r1, r5
   11380:	0030      	movs	r0, r6
   11382:	f000 f87f 	bl	11484 <_printf_i>
   11386:	e7ec      	b.n	11362 <_vfiprintf_r+0x1f2>
   11388:	00011d50 	.word	0x00011d50
   1138c:	00011d90 	.word	0x00011d90
   11390:	00011d70 	.word	0x00011d70
   11394:	00011d30 	.word	0x00011d30
   11398:	00011d96 	.word	0x00011d96
   1139c:	00011d9a 	.word	0x00011d9a
   113a0:	00000000 	.word	0x00000000
   113a4:	0001114b 	.word	0x0001114b

000113a8 <_printf_common>:
   113a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   113aa:	0015      	movs	r5, r2
   113ac:	9301      	str	r3, [sp, #4]
   113ae:	688a      	ldr	r2, [r1, #8]
   113b0:	690b      	ldr	r3, [r1, #16]
   113b2:	9000      	str	r0, [sp, #0]
   113b4:	000c      	movs	r4, r1
   113b6:	4293      	cmp	r3, r2
   113b8:	da00      	bge.n	113bc <_printf_common+0x14>
   113ba:	0013      	movs	r3, r2
   113bc:	0022      	movs	r2, r4
   113be:	602b      	str	r3, [r5, #0]
   113c0:	3243      	adds	r2, #67	; 0x43
   113c2:	7812      	ldrb	r2, [r2, #0]
   113c4:	2a00      	cmp	r2, #0
   113c6:	d001      	beq.n	113cc <_printf_common+0x24>
   113c8:	3301      	adds	r3, #1
   113ca:	602b      	str	r3, [r5, #0]
   113cc:	6823      	ldr	r3, [r4, #0]
   113ce:	069b      	lsls	r3, r3, #26
   113d0:	d502      	bpl.n	113d8 <_printf_common+0x30>
   113d2:	682b      	ldr	r3, [r5, #0]
   113d4:	3302      	adds	r3, #2
   113d6:	602b      	str	r3, [r5, #0]
   113d8:	2706      	movs	r7, #6
   113da:	6823      	ldr	r3, [r4, #0]
   113dc:	401f      	ands	r7, r3
   113de:	d027      	beq.n	11430 <_printf_common+0x88>
   113e0:	0023      	movs	r3, r4
   113e2:	3343      	adds	r3, #67	; 0x43
   113e4:	781b      	ldrb	r3, [r3, #0]
   113e6:	1e5a      	subs	r2, r3, #1
   113e8:	4193      	sbcs	r3, r2
   113ea:	6822      	ldr	r2, [r4, #0]
   113ec:	0692      	lsls	r2, r2, #26
   113ee:	d430      	bmi.n	11452 <_printf_common+0xaa>
   113f0:	0022      	movs	r2, r4
   113f2:	9901      	ldr	r1, [sp, #4]
   113f4:	3243      	adds	r2, #67	; 0x43
   113f6:	9800      	ldr	r0, [sp, #0]
   113f8:	9e08      	ldr	r6, [sp, #32]
   113fa:	47b0      	blx	r6
   113fc:	1c43      	adds	r3, r0, #1
   113fe:	d025      	beq.n	1144c <_printf_common+0xa4>
   11400:	2306      	movs	r3, #6
   11402:	6820      	ldr	r0, [r4, #0]
   11404:	682a      	ldr	r2, [r5, #0]
   11406:	68e1      	ldr	r1, [r4, #12]
   11408:	4003      	ands	r3, r0
   1140a:	2500      	movs	r5, #0
   1140c:	2b04      	cmp	r3, #4
   1140e:	d103      	bne.n	11418 <_printf_common+0x70>
   11410:	1a8d      	subs	r5, r1, r2
   11412:	43eb      	mvns	r3, r5
   11414:	17db      	asrs	r3, r3, #31
   11416:	401d      	ands	r5, r3
   11418:	68a3      	ldr	r3, [r4, #8]
   1141a:	6922      	ldr	r2, [r4, #16]
   1141c:	4293      	cmp	r3, r2
   1141e:	dd01      	ble.n	11424 <_printf_common+0x7c>
   11420:	1a9b      	subs	r3, r3, r2
   11422:	18ed      	adds	r5, r5, r3
   11424:	2700      	movs	r7, #0
   11426:	42bd      	cmp	r5, r7
   11428:	d120      	bne.n	1146c <_printf_common+0xc4>
   1142a:	2000      	movs	r0, #0
   1142c:	e010      	b.n	11450 <_printf_common+0xa8>
   1142e:	3701      	adds	r7, #1
   11430:	68e3      	ldr	r3, [r4, #12]
   11432:	682a      	ldr	r2, [r5, #0]
   11434:	1a9b      	subs	r3, r3, r2
   11436:	429f      	cmp	r7, r3
   11438:	dad2      	bge.n	113e0 <_printf_common+0x38>
   1143a:	0022      	movs	r2, r4
   1143c:	2301      	movs	r3, #1
   1143e:	3219      	adds	r2, #25
   11440:	9901      	ldr	r1, [sp, #4]
   11442:	9800      	ldr	r0, [sp, #0]
   11444:	9e08      	ldr	r6, [sp, #32]
   11446:	47b0      	blx	r6
   11448:	1c43      	adds	r3, r0, #1
   1144a:	d1f0      	bne.n	1142e <_printf_common+0x86>
   1144c:	2001      	movs	r0, #1
   1144e:	4240      	negs	r0, r0
   11450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11452:	2030      	movs	r0, #48	; 0x30
   11454:	18e1      	adds	r1, r4, r3
   11456:	3143      	adds	r1, #67	; 0x43
   11458:	7008      	strb	r0, [r1, #0]
   1145a:	0021      	movs	r1, r4
   1145c:	1c5a      	adds	r2, r3, #1
   1145e:	3145      	adds	r1, #69	; 0x45
   11460:	7809      	ldrb	r1, [r1, #0]
   11462:	18a2      	adds	r2, r4, r2
   11464:	3243      	adds	r2, #67	; 0x43
   11466:	3302      	adds	r3, #2
   11468:	7011      	strb	r1, [r2, #0]
   1146a:	e7c1      	b.n	113f0 <_printf_common+0x48>
   1146c:	0022      	movs	r2, r4
   1146e:	2301      	movs	r3, #1
   11470:	321a      	adds	r2, #26
   11472:	9901      	ldr	r1, [sp, #4]
   11474:	9800      	ldr	r0, [sp, #0]
   11476:	9e08      	ldr	r6, [sp, #32]
   11478:	47b0      	blx	r6
   1147a:	1c43      	adds	r3, r0, #1
   1147c:	d0e6      	beq.n	1144c <_printf_common+0xa4>
   1147e:	3701      	adds	r7, #1
   11480:	e7d1      	b.n	11426 <_printf_common+0x7e>
	...

00011484 <_printf_i>:
   11484:	b5f0      	push	{r4, r5, r6, r7, lr}
   11486:	b08b      	sub	sp, #44	; 0x2c
   11488:	9206      	str	r2, [sp, #24]
   1148a:	000a      	movs	r2, r1
   1148c:	3243      	adds	r2, #67	; 0x43
   1148e:	9307      	str	r3, [sp, #28]
   11490:	9005      	str	r0, [sp, #20]
   11492:	9204      	str	r2, [sp, #16]
   11494:	7e0a      	ldrb	r2, [r1, #24]
   11496:	000c      	movs	r4, r1
   11498:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1149a:	2a6e      	cmp	r2, #110	; 0x6e
   1149c:	d100      	bne.n	114a0 <_printf_i+0x1c>
   1149e:	e08f      	b.n	115c0 <_printf_i+0x13c>
   114a0:	d817      	bhi.n	114d2 <_printf_i+0x4e>
   114a2:	2a63      	cmp	r2, #99	; 0x63
   114a4:	d02c      	beq.n	11500 <_printf_i+0x7c>
   114a6:	d808      	bhi.n	114ba <_printf_i+0x36>
   114a8:	2a00      	cmp	r2, #0
   114aa:	d100      	bne.n	114ae <_printf_i+0x2a>
   114ac:	e099      	b.n	115e2 <_printf_i+0x15e>
   114ae:	2a58      	cmp	r2, #88	; 0x58
   114b0:	d054      	beq.n	1155c <_printf_i+0xd8>
   114b2:	0026      	movs	r6, r4
   114b4:	3642      	adds	r6, #66	; 0x42
   114b6:	7032      	strb	r2, [r6, #0]
   114b8:	e029      	b.n	1150e <_printf_i+0x8a>
   114ba:	2a64      	cmp	r2, #100	; 0x64
   114bc:	d001      	beq.n	114c2 <_printf_i+0x3e>
   114be:	2a69      	cmp	r2, #105	; 0x69
   114c0:	d1f7      	bne.n	114b2 <_printf_i+0x2e>
   114c2:	6821      	ldr	r1, [r4, #0]
   114c4:	681a      	ldr	r2, [r3, #0]
   114c6:	0608      	lsls	r0, r1, #24
   114c8:	d523      	bpl.n	11512 <_printf_i+0x8e>
   114ca:	1d11      	adds	r1, r2, #4
   114cc:	6019      	str	r1, [r3, #0]
   114ce:	6815      	ldr	r5, [r2, #0]
   114d0:	e025      	b.n	1151e <_printf_i+0x9a>
   114d2:	2a73      	cmp	r2, #115	; 0x73
   114d4:	d100      	bne.n	114d8 <_printf_i+0x54>
   114d6:	e088      	b.n	115ea <_printf_i+0x166>
   114d8:	d808      	bhi.n	114ec <_printf_i+0x68>
   114da:	2a6f      	cmp	r2, #111	; 0x6f
   114dc:	d029      	beq.n	11532 <_printf_i+0xae>
   114de:	2a70      	cmp	r2, #112	; 0x70
   114e0:	d1e7      	bne.n	114b2 <_printf_i+0x2e>
   114e2:	2220      	movs	r2, #32
   114e4:	6809      	ldr	r1, [r1, #0]
   114e6:	430a      	orrs	r2, r1
   114e8:	6022      	str	r2, [r4, #0]
   114ea:	e003      	b.n	114f4 <_printf_i+0x70>
   114ec:	2a75      	cmp	r2, #117	; 0x75
   114ee:	d020      	beq.n	11532 <_printf_i+0xae>
   114f0:	2a78      	cmp	r2, #120	; 0x78
   114f2:	d1de      	bne.n	114b2 <_printf_i+0x2e>
   114f4:	0022      	movs	r2, r4
   114f6:	2178      	movs	r1, #120	; 0x78
   114f8:	3245      	adds	r2, #69	; 0x45
   114fa:	7011      	strb	r1, [r2, #0]
   114fc:	4a6c      	ldr	r2, [pc, #432]	; (116b0 <_printf_i+0x22c>)
   114fe:	e030      	b.n	11562 <_printf_i+0xde>
   11500:	000e      	movs	r6, r1
   11502:	681a      	ldr	r2, [r3, #0]
   11504:	3642      	adds	r6, #66	; 0x42
   11506:	1d11      	adds	r1, r2, #4
   11508:	6019      	str	r1, [r3, #0]
   1150a:	6813      	ldr	r3, [r2, #0]
   1150c:	7033      	strb	r3, [r6, #0]
   1150e:	2301      	movs	r3, #1
   11510:	e079      	b.n	11606 <_printf_i+0x182>
   11512:	0649      	lsls	r1, r1, #25
   11514:	d5d9      	bpl.n	114ca <_printf_i+0x46>
   11516:	1d11      	adds	r1, r2, #4
   11518:	6019      	str	r1, [r3, #0]
   1151a:	2300      	movs	r3, #0
   1151c:	5ed5      	ldrsh	r5, [r2, r3]
   1151e:	2d00      	cmp	r5, #0
   11520:	da03      	bge.n	1152a <_printf_i+0xa6>
   11522:	232d      	movs	r3, #45	; 0x2d
   11524:	9a04      	ldr	r2, [sp, #16]
   11526:	426d      	negs	r5, r5
   11528:	7013      	strb	r3, [r2, #0]
   1152a:	4b62      	ldr	r3, [pc, #392]	; (116b4 <_printf_i+0x230>)
   1152c:	270a      	movs	r7, #10
   1152e:	9303      	str	r3, [sp, #12]
   11530:	e02f      	b.n	11592 <_printf_i+0x10e>
   11532:	6820      	ldr	r0, [r4, #0]
   11534:	6819      	ldr	r1, [r3, #0]
   11536:	0605      	lsls	r5, r0, #24
   11538:	d503      	bpl.n	11542 <_printf_i+0xbe>
   1153a:	1d08      	adds	r0, r1, #4
   1153c:	6018      	str	r0, [r3, #0]
   1153e:	680d      	ldr	r5, [r1, #0]
   11540:	e005      	b.n	1154e <_printf_i+0xca>
   11542:	0640      	lsls	r0, r0, #25
   11544:	d5f9      	bpl.n	1153a <_printf_i+0xb6>
   11546:	680d      	ldr	r5, [r1, #0]
   11548:	1d08      	adds	r0, r1, #4
   1154a:	6018      	str	r0, [r3, #0]
   1154c:	b2ad      	uxth	r5, r5
   1154e:	4b59      	ldr	r3, [pc, #356]	; (116b4 <_printf_i+0x230>)
   11550:	2708      	movs	r7, #8
   11552:	9303      	str	r3, [sp, #12]
   11554:	2a6f      	cmp	r2, #111	; 0x6f
   11556:	d018      	beq.n	1158a <_printf_i+0x106>
   11558:	270a      	movs	r7, #10
   1155a:	e016      	b.n	1158a <_printf_i+0x106>
   1155c:	3145      	adds	r1, #69	; 0x45
   1155e:	700a      	strb	r2, [r1, #0]
   11560:	4a54      	ldr	r2, [pc, #336]	; (116b4 <_printf_i+0x230>)
   11562:	9203      	str	r2, [sp, #12]
   11564:	681a      	ldr	r2, [r3, #0]
   11566:	6821      	ldr	r1, [r4, #0]
   11568:	1d10      	adds	r0, r2, #4
   1156a:	6018      	str	r0, [r3, #0]
   1156c:	6815      	ldr	r5, [r2, #0]
   1156e:	0608      	lsls	r0, r1, #24
   11570:	d522      	bpl.n	115b8 <_printf_i+0x134>
   11572:	07cb      	lsls	r3, r1, #31
   11574:	d502      	bpl.n	1157c <_printf_i+0xf8>
   11576:	2320      	movs	r3, #32
   11578:	4319      	orrs	r1, r3
   1157a:	6021      	str	r1, [r4, #0]
   1157c:	2710      	movs	r7, #16
   1157e:	2d00      	cmp	r5, #0
   11580:	d103      	bne.n	1158a <_printf_i+0x106>
   11582:	2320      	movs	r3, #32
   11584:	6822      	ldr	r2, [r4, #0]
   11586:	439a      	bics	r2, r3
   11588:	6022      	str	r2, [r4, #0]
   1158a:	0023      	movs	r3, r4
   1158c:	2200      	movs	r2, #0
   1158e:	3343      	adds	r3, #67	; 0x43
   11590:	701a      	strb	r2, [r3, #0]
   11592:	6863      	ldr	r3, [r4, #4]
   11594:	60a3      	str	r3, [r4, #8]
   11596:	2b00      	cmp	r3, #0
   11598:	db5c      	blt.n	11654 <_printf_i+0x1d0>
   1159a:	2204      	movs	r2, #4
   1159c:	6821      	ldr	r1, [r4, #0]
   1159e:	4391      	bics	r1, r2
   115a0:	6021      	str	r1, [r4, #0]
   115a2:	2d00      	cmp	r5, #0
   115a4:	d158      	bne.n	11658 <_printf_i+0x1d4>
   115a6:	9e04      	ldr	r6, [sp, #16]
   115a8:	2b00      	cmp	r3, #0
   115aa:	d064      	beq.n	11676 <_printf_i+0x1f2>
   115ac:	0026      	movs	r6, r4
   115ae:	9b03      	ldr	r3, [sp, #12]
   115b0:	3642      	adds	r6, #66	; 0x42
   115b2:	781b      	ldrb	r3, [r3, #0]
   115b4:	7033      	strb	r3, [r6, #0]
   115b6:	e05e      	b.n	11676 <_printf_i+0x1f2>
   115b8:	0648      	lsls	r0, r1, #25
   115ba:	d5da      	bpl.n	11572 <_printf_i+0xee>
   115bc:	b2ad      	uxth	r5, r5
   115be:	e7d8      	b.n	11572 <_printf_i+0xee>
   115c0:	6809      	ldr	r1, [r1, #0]
   115c2:	681a      	ldr	r2, [r3, #0]
   115c4:	0608      	lsls	r0, r1, #24
   115c6:	d505      	bpl.n	115d4 <_printf_i+0x150>
   115c8:	1d11      	adds	r1, r2, #4
   115ca:	6019      	str	r1, [r3, #0]
   115cc:	6813      	ldr	r3, [r2, #0]
   115ce:	6962      	ldr	r2, [r4, #20]
   115d0:	601a      	str	r2, [r3, #0]
   115d2:	e006      	b.n	115e2 <_printf_i+0x15e>
   115d4:	0649      	lsls	r1, r1, #25
   115d6:	d5f7      	bpl.n	115c8 <_printf_i+0x144>
   115d8:	1d11      	adds	r1, r2, #4
   115da:	6019      	str	r1, [r3, #0]
   115dc:	6813      	ldr	r3, [r2, #0]
   115de:	8aa2      	ldrh	r2, [r4, #20]
   115e0:	801a      	strh	r2, [r3, #0]
   115e2:	2300      	movs	r3, #0
   115e4:	9e04      	ldr	r6, [sp, #16]
   115e6:	6123      	str	r3, [r4, #16]
   115e8:	e054      	b.n	11694 <_printf_i+0x210>
   115ea:	681a      	ldr	r2, [r3, #0]
   115ec:	1d11      	adds	r1, r2, #4
   115ee:	6019      	str	r1, [r3, #0]
   115f0:	6816      	ldr	r6, [r2, #0]
   115f2:	2100      	movs	r1, #0
   115f4:	6862      	ldr	r2, [r4, #4]
   115f6:	0030      	movs	r0, r6
   115f8:	f000 f9e6 	bl	119c8 <memchr>
   115fc:	2800      	cmp	r0, #0
   115fe:	d001      	beq.n	11604 <_printf_i+0x180>
   11600:	1b80      	subs	r0, r0, r6
   11602:	6060      	str	r0, [r4, #4]
   11604:	6863      	ldr	r3, [r4, #4]
   11606:	6123      	str	r3, [r4, #16]
   11608:	2300      	movs	r3, #0
   1160a:	9a04      	ldr	r2, [sp, #16]
   1160c:	7013      	strb	r3, [r2, #0]
   1160e:	e041      	b.n	11694 <_printf_i+0x210>
   11610:	6923      	ldr	r3, [r4, #16]
   11612:	0032      	movs	r2, r6
   11614:	9906      	ldr	r1, [sp, #24]
   11616:	9805      	ldr	r0, [sp, #20]
   11618:	9d07      	ldr	r5, [sp, #28]
   1161a:	47a8      	blx	r5
   1161c:	1c43      	adds	r3, r0, #1
   1161e:	d043      	beq.n	116a8 <_printf_i+0x224>
   11620:	6823      	ldr	r3, [r4, #0]
   11622:	2500      	movs	r5, #0
   11624:	079b      	lsls	r3, r3, #30
   11626:	d40f      	bmi.n	11648 <_printf_i+0x1c4>
   11628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1162a:	68e0      	ldr	r0, [r4, #12]
   1162c:	4298      	cmp	r0, r3
   1162e:	da3d      	bge.n	116ac <_printf_i+0x228>
   11630:	0018      	movs	r0, r3
   11632:	e03b      	b.n	116ac <_printf_i+0x228>
   11634:	0022      	movs	r2, r4
   11636:	2301      	movs	r3, #1
   11638:	3219      	adds	r2, #25
   1163a:	9906      	ldr	r1, [sp, #24]
   1163c:	9805      	ldr	r0, [sp, #20]
   1163e:	9e07      	ldr	r6, [sp, #28]
   11640:	47b0      	blx	r6
   11642:	1c43      	adds	r3, r0, #1
   11644:	d030      	beq.n	116a8 <_printf_i+0x224>
   11646:	3501      	adds	r5, #1
   11648:	68e3      	ldr	r3, [r4, #12]
   1164a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1164c:	1a9b      	subs	r3, r3, r2
   1164e:	429d      	cmp	r5, r3
   11650:	dbf0      	blt.n	11634 <_printf_i+0x1b0>
   11652:	e7e9      	b.n	11628 <_printf_i+0x1a4>
   11654:	2d00      	cmp	r5, #0
   11656:	d0a9      	beq.n	115ac <_printf_i+0x128>
   11658:	9e04      	ldr	r6, [sp, #16]
   1165a:	0028      	movs	r0, r5
   1165c:	0039      	movs	r1, r7
   1165e:	f7ff f8a9 	bl	107b4 <__aeabi_uidivmod>
   11662:	9b03      	ldr	r3, [sp, #12]
   11664:	3e01      	subs	r6, #1
   11666:	5c5b      	ldrb	r3, [r3, r1]
   11668:	0028      	movs	r0, r5
   1166a:	7033      	strb	r3, [r6, #0]
   1166c:	0039      	movs	r1, r7
   1166e:	f7ff f81b 	bl	106a8 <__udivsi3>
   11672:	1e05      	subs	r5, r0, #0
   11674:	d1f1      	bne.n	1165a <_printf_i+0x1d6>
   11676:	2f08      	cmp	r7, #8
   11678:	d109      	bne.n	1168e <_printf_i+0x20a>
   1167a:	6823      	ldr	r3, [r4, #0]
   1167c:	07db      	lsls	r3, r3, #31
   1167e:	d506      	bpl.n	1168e <_printf_i+0x20a>
   11680:	6863      	ldr	r3, [r4, #4]
   11682:	6922      	ldr	r2, [r4, #16]
   11684:	4293      	cmp	r3, r2
   11686:	dc02      	bgt.n	1168e <_printf_i+0x20a>
   11688:	2330      	movs	r3, #48	; 0x30
   1168a:	3e01      	subs	r6, #1
   1168c:	7033      	strb	r3, [r6, #0]
   1168e:	9b04      	ldr	r3, [sp, #16]
   11690:	1b9b      	subs	r3, r3, r6
   11692:	6123      	str	r3, [r4, #16]
   11694:	9b07      	ldr	r3, [sp, #28]
   11696:	aa09      	add	r2, sp, #36	; 0x24
   11698:	9300      	str	r3, [sp, #0]
   1169a:	0021      	movs	r1, r4
   1169c:	9b06      	ldr	r3, [sp, #24]
   1169e:	9805      	ldr	r0, [sp, #20]
   116a0:	f7ff fe82 	bl	113a8 <_printf_common>
   116a4:	1c43      	adds	r3, r0, #1
   116a6:	d1b3      	bne.n	11610 <_printf_i+0x18c>
   116a8:	2001      	movs	r0, #1
   116aa:	4240      	negs	r0, r0
   116ac:	b00b      	add	sp, #44	; 0x2c
   116ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116b0:	00011db2 	.word	0x00011db2
   116b4:	00011da1 	.word	0x00011da1

000116b8 <_sbrk_r>:
   116b8:	2300      	movs	r3, #0
   116ba:	b570      	push	{r4, r5, r6, lr}
   116bc:	4c06      	ldr	r4, [pc, #24]	; (116d8 <_sbrk_r+0x20>)
   116be:	0005      	movs	r5, r0
   116c0:	0008      	movs	r0, r1
   116c2:	6023      	str	r3, [r4, #0]
   116c4:	f7fe ff88 	bl	105d8 <_sbrk>
   116c8:	1c43      	adds	r3, r0, #1
   116ca:	d103      	bne.n	116d4 <_sbrk_r+0x1c>
   116cc:	6823      	ldr	r3, [r4, #0]
   116ce:	2b00      	cmp	r3, #0
   116d0:	d000      	beq.n	116d4 <_sbrk_r+0x1c>
   116d2:	602b      	str	r3, [r5, #0]
   116d4:	bd70      	pop	{r4, r5, r6, pc}
   116d6:	46c0      	nop			; (mov r8, r8)
   116d8:	20000a78 	.word	0x20000a78

000116dc <__sread>:
   116dc:	b570      	push	{r4, r5, r6, lr}
   116de:	000c      	movs	r4, r1
   116e0:	250e      	movs	r5, #14
   116e2:	5f49      	ldrsh	r1, [r1, r5]
   116e4:	f000 f97e 	bl	119e4 <_read_r>
   116e8:	2800      	cmp	r0, #0
   116ea:	db03      	blt.n	116f4 <__sread+0x18>
   116ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   116ee:	181b      	adds	r3, r3, r0
   116f0:	6563      	str	r3, [r4, #84]	; 0x54
   116f2:	bd70      	pop	{r4, r5, r6, pc}
   116f4:	89a3      	ldrh	r3, [r4, #12]
   116f6:	4a02      	ldr	r2, [pc, #8]	; (11700 <__sread+0x24>)
   116f8:	4013      	ands	r3, r2
   116fa:	81a3      	strh	r3, [r4, #12]
   116fc:	e7f9      	b.n	116f2 <__sread+0x16>
   116fe:	46c0      	nop			; (mov r8, r8)
   11700:	ffffefff 	.word	0xffffefff

00011704 <__swrite>:
   11704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11706:	001f      	movs	r7, r3
   11708:	898b      	ldrh	r3, [r1, #12]
   1170a:	0005      	movs	r5, r0
   1170c:	000c      	movs	r4, r1
   1170e:	0016      	movs	r6, r2
   11710:	05db      	lsls	r3, r3, #23
   11712:	d505      	bpl.n	11720 <__swrite+0x1c>
   11714:	230e      	movs	r3, #14
   11716:	5ec9      	ldrsh	r1, [r1, r3]
   11718:	2200      	movs	r2, #0
   1171a:	2302      	movs	r3, #2
   1171c:	f000 f940 	bl	119a0 <_lseek_r>
   11720:	89a3      	ldrh	r3, [r4, #12]
   11722:	4a05      	ldr	r2, [pc, #20]	; (11738 <__swrite+0x34>)
   11724:	0028      	movs	r0, r5
   11726:	4013      	ands	r3, r2
   11728:	81a3      	strh	r3, [r4, #12]
   1172a:	0032      	movs	r2, r6
   1172c:	230e      	movs	r3, #14
   1172e:	5ee1      	ldrsh	r1, [r4, r3]
   11730:	003b      	movs	r3, r7
   11732:	f000 f875 	bl	11820 <_write_r>
   11736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11738:	ffffefff 	.word	0xffffefff

0001173c <__sseek>:
   1173c:	b570      	push	{r4, r5, r6, lr}
   1173e:	000c      	movs	r4, r1
   11740:	250e      	movs	r5, #14
   11742:	5f49      	ldrsh	r1, [r1, r5]
   11744:	f000 f92c 	bl	119a0 <_lseek_r>
   11748:	89a3      	ldrh	r3, [r4, #12]
   1174a:	1c42      	adds	r2, r0, #1
   1174c:	d103      	bne.n	11756 <__sseek+0x1a>
   1174e:	4a05      	ldr	r2, [pc, #20]	; (11764 <__sseek+0x28>)
   11750:	4013      	ands	r3, r2
   11752:	81a3      	strh	r3, [r4, #12]
   11754:	bd70      	pop	{r4, r5, r6, pc}
   11756:	2280      	movs	r2, #128	; 0x80
   11758:	0152      	lsls	r2, r2, #5
   1175a:	4313      	orrs	r3, r2
   1175c:	81a3      	strh	r3, [r4, #12]
   1175e:	6560      	str	r0, [r4, #84]	; 0x54
   11760:	e7f8      	b.n	11754 <__sseek+0x18>
   11762:	46c0      	nop			; (mov r8, r8)
   11764:	ffffefff 	.word	0xffffefff

00011768 <__sclose>:
   11768:	b510      	push	{r4, lr}
   1176a:	230e      	movs	r3, #14
   1176c:	5ec9      	ldrsh	r1, [r1, r3]
   1176e:	f000 f8e1 	bl	11934 <_close_r>
   11772:	bd10      	pop	{r4, pc}

00011774 <__swbuf_r>:
   11774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11776:	0005      	movs	r5, r0
   11778:	000e      	movs	r6, r1
   1177a:	0014      	movs	r4, r2
   1177c:	2800      	cmp	r0, #0
   1177e:	d004      	beq.n	1178a <__swbuf_r+0x16>
   11780:	6983      	ldr	r3, [r0, #24]
   11782:	2b00      	cmp	r3, #0
   11784:	d101      	bne.n	1178a <__swbuf_r+0x16>
   11786:	f7ff fb1d 	bl	10dc4 <__sinit>
   1178a:	4b22      	ldr	r3, [pc, #136]	; (11814 <__swbuf_r+0xa0>)
   1178c:	429c      	cmp	r4, r3
   1178e:	d12d      	bne.n	117ec <__swbuf_r+0x78>
   11790:	686c      	ldr	r4, [r5, #4]
   11792:	69a3      	ldr	r3, [r4, #24]
   11794:	60a3      	str	r3, [r4, #8]
   11796:	89a3      	ldrh	r3, [r4, #12]
   11798:	071b      	lsls	r3, r3, #28
   1179a:	d531      	bpl.n	11800 <__swbuf_r+0x8c>
   1179c:	6923      	ldr	r3, [r4, #16]
   1179e:	2b00      	cmp	r3, #0
   117a0:	d02e      	beq.n	11800 <__swbuf_r+0x8c>
   117a2:	6823      	ldr	r3, [r4, #0]
   117a4:	6922      	ldr	r2, [r4, #16]
   117a6:	b2f7      	uxtb	r7, r6
   117a8:	1a98      	subs	r0, r3, r2
   117aa:	6963      	ldr	r3, [r4, #20]
   117ac:	b2f6      	uxtb	r6, r6
   117ae:	4298      	cmp	r0, r3
   117b0:	db05      	blt.n	117be <__swbuf_r+0x4a>
   117b2:	0021      	movs	r1, r4
   117b4:	0028      	movs	r0, r5
   117b6:	f7ff fa97 	bl	10ce8 <_fflush_r>
   117ba:	2800      	cmp	r0, #0
   117bc:	d126      	bne.n	1180c <__swbuf_r+0x98>
   117be:	68a3      	ldr	r3, [r4, #8]
   117c0:	3001      	adds	r0, #1
   117c2:	3b01      	subs	r3, #1
   117c4:	60a3      	str	r3, [r4, #8]
   117c6:	6823      	ldr	r3, [r4, #0]
   117c8:	1c5a      	adds	r2, r3, #1
   117ca:	6022      	str	r2, [r4, #0]
   117cc:	701f      	strb	r7, [r3, #0]
   117ce:	6963      	ldr	r3, [r4, #20]
   117d0:	4298      	cmp	r0, r3
   117d2:	d004      	beq.n	117de <__swbuf_r+0x6a>
   117d4:	89a3      	ldrh	r3, [r4, #12]
   117d6:	07db      	lsls	r3, r3, #31
   117d8:	d51a      	bpl.n	11810 <__swbuf_r+0x9c>
   117da:	2e0a      	cmp	r6, #10
   117dc:	d118      	bne.n	11810 <__swbuf_r+0x9c>
   117de:	0021      	movs	r1, r4
   117e0:	0028      	movs	r0, r5
   117e2:	f7ff fa81 	bl	10ce8 <_fflush_r>
   117e6:	2800      	cmp	r0, #0
   117e8:	d012      	beq.n	11810 <__swbuf_r+0x9c>
   117ea:	e00f      	b.n	1180c <__swbuf_r+0x98>
   117ec:	4b0a      	ldr	r3, [pc, #40]	; (11818 <__swbuf_r+0xa4>)
   117ee:	429c      	cmp	r4, r3
   117f0:	d101      	bne.n	117f6 <__swbuf_r+0x82>
   117f2:	68ac      	ldr	r4, [r5, #8]
   117f4:	e7cd      	b.n	11792 <__swbuf_r+0x1e>
   117f6:	4b09      	ldr	r3, [pc, #36]	; (1181c <__swbuf_r+0xa8>)
   117f8:	429c      	cmp	r4, r3
   117fa:	d1ca      	bne.n	11792 <__swbuf_r+0x1e>
   117fc:	68ec      	ldr	r4, [r5, #12]
   117fe:	e7c8      	b.n	11792 <__swbuf_r+0x1e>
   11800:	0021      	movs	r1, r4
   11802:	0028      	movs	r0, r5
   11804:	f000 f820 	bl	11848 <__swsetup_r>
   11808:	2800      	cmp	r0, #0
   1180a:	d0ca      	beq.n	117a2 <__swbuf_r+0x2e>
   1180c:	2601      	movs	r6, #1
   1180e:	4276      	negs	r6, r6
   11810:	0030      	movs	r0, r6
   11812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11814:	00011d50 	.word	0x00011d50
   11818:	00011d70 	.word	0x00011d70
   1181c:	00011d30 	.word	0x00011d30

00011820 <_write_r>:
   11820:	b570      	push	{r4, r5, r6, lr}
   11822:	0005      	movs	r5, r0
   11824:	0008      	movs	r0, r1
   11826:	0011      	movs	r1, r2
   11828:	2200      	movs	r2, #0
   1182a:	4c06      	ldr	r4, [pc, #24]	; (11844 <_write_r+0x24>)
   1182c:	6022      	str	r2, [r4, #0]
   1182e:	001a      	movs	r2, r3
   11830:	f7fe fe96 	bl	10560 <_write>
   11834:	1c43      	adds	r3, r0, #1
   11836:	d103      	bne.n	11840 <_write_r+0x20>
   11838:	6823      	ldr	r3, [r4, #0]
   1183a:	2b00      	cmp	r3, #0
   1183c:	d000      	beq.n	11840 <_write_r+0x20>
   1183e:	602b      	str	r3, [r5, #0]
   11840:	bd70      	pop	{r4, r5, r6, pc}
   11842:	46c0      	nop			; (mov r8, r8)
   11844:	20000a78 	.word	0x20000a78

00011848 <__swsetup_r>:
   11848:	4b36      	ldr	r3, [pc, #216]	; (11924 <__swsetup_r+0xdc>)
   1184a:	b570      	push	{r4, r5, r6, lr}
   1184c:	681d      	ldr	r5, [r3, #0]
   1184e:	0006      	movs	r6, r0
   11850:	000c      	movs	r4, r1
   11852:	2d00      	cmp	r5, #0
   11854:	d005      	beq.n	11862 <__swsetup_r+0x1a>
   11856:	69ab      	ldr	r3, [r5, #24]
   11858:	2b00      	cmp	r3, #0
   1185a:	d102      	bne.n	11862 <__swsetup_r+0x1a>
   1185c:	0028      	movs	r0, r5
   1185e:	f7ff fab1 	bl	10dc4 <__sinit>
   11862:	4b31      	ldr	r3, [pc, #196]	; (11928 <__swsetup_r+0xe0>)
   11864:	429c      	cmp	r4, r3
   11866:	d10f      	bne.n	11888 <__swsetup_r+0x40>
   11868:	686c      	ldr	r4, [r5, #4]
   1186a:	230c      	movs	r3, #12
   1186c:	5ee2      	ldrsh	r2, [r4, r3]
   1186e:	b293      	uxth	r3, r2
   11870:	0719      	lsls	r1, r3, #28
   11872:	d42d      	bmi.n	118d0 <__swsetup_r+0x88>
   11874:	06d9      	lsls	r1, r3, #27
   11876:	d411      	bmi.n	1189c <__swsetup_r+0x54>
   11878:	2309      	movs	r3, #9
   1187a:	2001      	movs	r0, #1
   1187c:	6033      	str	r3, [r6, #0]
   1187e:	3337      	adds	r3, #55	; 0x37
   11880:	4313      	orrs	r3, r2
   11882:	81a3      	strh	r3, [r4, #12]
   11884:	4240      	negs	r0, r0
   11886:	bd70      	pop	{r4, r5, r6, pc}
   11888:	4b28      	ldr	r3, [pc, #160]	; (1192c <__swsetup_r+0xe4>)
   1188a:	429c      	cmp	r4, r3
   1188c:	d101      	bne.n	11892 <__swsetup_r+0x4a>
   1188e:	68ac      	ldr	r4, [r5, #8]
   11890:	e7eb      	b.n	1186a <__swsetup_r+0x22>
   11892:	4b27      	ldr	r3, [pc, #156]	; (11930 <__swsetup_r+0xe8>)
   11894:	429c      	cmp	r4, r3
   11896:	d1e8      	bne.n	1186a <__swsetup_r+0x22>
   11898:	68ec      	ldr	r4, [r5, #12]
   1189a:	e7e6      	b.n	1186a <__swsetup_r+0x22>
   1189c:	075b      	lsls	r3, r3, #29
   1189e:	d513      	bpl.n	118c8 <__swsetup_r+0x80>
   118a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   118a2:	2900      	cmp	r1, #0
   118a4:	d008      	beq.n	118b8 <__swsetup_r+0x70>
   118a6:	0023      	movs	r3, r4
   118a8:	3344      	adds	r3, #68	; 0x44
   118aa:	4299      	cmp	r1, r3
   118ac:	d002      	beq.n	118b4 <__swsetup_r+0x6c>
   118ae:	0030      	movs	r0, r6
   118b0:	f7ff fb8e 	bl	10fd0 <_free_r>
   118b4:	2300      	movs	r3, #0
   118b6:	6363      	str	r3, [r4, #52]	; 0x34
   118b8:	2224      	movs	r2, #36	; 0x24
   118ba:	89a3      	ldrh	r3, [r4, #12]
   118bc:	4393      	bics	r3, r2
   118be:	81a3      	strh	r3, [r4, #12]
   118c0:	2300      	movs	r3, #0
   118c2:	6063      	str	r3, [r4, #4]
   118c4:	6923      	ldr	r3, [r4, #16]
   118c6:	6023      	str	r3, [r4, #0]
   118c8:	2308      	movs	r3, #8
   118ca:	89a2      	ldrh	r2, [r4, #12]
   118cc:	4313      	orrs	r3, r2
   118ce:	81a3      	strh	r3, [r4, #12]
   118d0:	6923      	ldr	r3, [r4, #16]
   118d2:	2b00      	cmp	r3, #0
   118d4:	d10b      	bne.n	118ee <__swsetup_r+0xa6>
   118d6:	21a0      	movs	r1, #160	; 0xa0
   118d8:	2280      	movs	r2, #128	; 0x80
   118da:	89a3      	ldrh	r3, [r4, #12]
   118dc:	0089      	lsls	r1, r1, #2
   118de:	0092      	lsls	r2, r2, #2
   118e0:	400b      	ands	r3, r1
   118e2:	4293      	cmp	r3, r2
   118e4:	d003      	beq.n	118ee <__swsetup_r+0xa6>
   118e6:	0021      	movs	r1, r4
   118e8:	0030      	movs	r0, r6
   118ea:	f7ff fb29 	bl	10f40 <__smakebuf_r>
   118ee:	2301      	movs	r3, #1
   118f0:	89a2      	ldrh	r2, [r4, #12]
   118f2:	4013      	ands	r3, r2
   118f4:	d011      	beq.n	1191a <__swsetup_r+0xd2>
   118f6:	2300      	movs	r3, #0
   118f8:	60a3      	str	r3, [r4, #8]
   118fa:	6963      	ldr	r3, [r4, #20]
   118fc:	425b      	negs	r3, r3
   118fe:	61a3      	str	r3, [r4, #24]
   11900:	2000      	movs	r0, #0
   11902:	6923      	ldr	r3, [r4, #16]
   11904:	4283      	cmp	r3, r0
   11906:	d1be      	bne.n	11886 <__swsetup_r+0x3e>
   11908:	230c      	movs	r3, #12
   1190a:	5ee2      	ldrsh	r2, [r4, r3]
   1190c:	0613      	lsls	r3, r2, #24
   1190e:	d5ba      	bpl.n	11886 <__swsetup_r+0x3e>
   11910:	2340      	movs	r3, #64	; 0x40
   11912:	4313      	orrs	r3, r2
   11914:	81a3      	strh	r3, [r4, #12]
   11916:	3801      	subs	r0, #1
   11918:	e7b5      	b.n	11886 <__swsetup_r+0x3e>
   1191a:	0792      	lsls	r2, r2, #30
   1191c:	d400      	bmi.n	11920 <__swsetup_r+0xd8>
   1191e:	6963      	ldr	r3, [r4, #20]
   11920:	60a3      	str	r3, [r4, #8]
   11922:	e7ed      	b.n	11900 <__swsetup_r+0xb8>
   11924:	20000120 	.word	0x20000120
   11928:	00011d50 	.word	0x00011d50
   1192c:	00011d70 	.word	0x00011d70
   11930:	00011d30 	.word	0x00011d30

00011934 <_close_r>:
   11934:	2300      	movs	r3, #0
   11936:	b570      	push	{r4, r5, r6, lr}
   11938:	4c06      	ldr	r4, [pc, #24]	; (11954 <_close_r+0x20>)
   1193a:	0005      	movs	r5, r0
   1193c:	0008      	movs	r0, r1
   1193e:	6023      	str	r3, [r4, #0]
   11940:	f7fe fe7a 	bl	10638 <_close>
   11944:	1c43      	adds	r3, r0, #1
   11946:	d103      	bne.n	11950 <_close_r+0x1c>
   11948:	6823      	ldr	r3, [r4, #0]
   1194a:	2b00      	cmp	r3, #0
   1194c:	d000      	beq.n	11950 <_close_r+0x1c>
   1194e:	602b      	str	r3, [r5, #0]
   11950:	bd70      	pop	{r4, r5, r6, pc}
   11952:	46c0      	nop			; (mov r8, r8)
   11954:	20000a78 	.word	0x20000a78

00011958 <_fstat_r>:
   11958:	2300      	movs	r3, #0
   1195a:	b570      	push	{r4, r5, r6, lr}
   1195c:	4c06      	ldr	r4, [pc, #24]	; (11978 <_fstat_r+0x20>)
   1195e:	0005      	movs	r5, r0
   11960:	0008      	movs	r0, r1
   11962:	0011      	movs	r1, r2
   11964:	6023      	str	r3, [r4, #0]
   11966:	f7fe fe71 	bl	1064c <_fstat>
   1196a:	1c43      	adds	r3, r0, #1
   1196c:	d103      	bne.n	11976 <_fstat_r+0x1e>
   1196e:	6823      	ldr	r3, [r4, #0]
   11970:	2b00      	cmp	r3, #0
   11972:	d000      	beq.n	11976 <_fstat_r+0x1e>
   11974:	602b      	str	r3, [r5, #0]
   11976:	bd70      	pop	{r4, r5, r6, pc}
   11978:	20000a78 	.word	0x20000a78

0001197c <_isatty_r>:
   1197c:	2300      	movs	r3, #0
   1197e:	b570      	push	{r4, r5, r6, lr}
   11980:	4c06      	ldr	r4, [pc, #24]	; (1199c <_isatty_r+0x20>)
   11982:	0005      	movs	r5, r0
   11984:	0008      	movs	r0, r1
   11986:	6023      	str	r3, [r4, #0]
   11988:	f7fe fe6e 	bl	10668 <_isatty>
   1198c:	1c43      	adds	r3, r0, #1
   1198e:	d103      	bne.n	11998 <_isatty_r+0x1c>
   11990:	6823      	ldr	r3, [r4, #0]
   11992:	2b00      	cmp	r3, #0
   11994:	d000      	beq.n	11998 <_isatty_r+0x1c>
   11996:	602b      	str	r3, [r5, #0]
   11998:	bd70      	pop	{r4, r5, r6, pc}
   1199a:	46c0      	nop			; (mov r8, r8)
   1199c:	20000a78 	.word	0x20000a78

000119a0 <_lseek_r>:
   119a0:	b570      	push	{r4, r5, r6, lr}
   119a2:	0005      	movs	r5, r0
   119a4:	0008      	movs	r0, r1
   119a6:	0011      	movs	r1, r2
   119a8:	2200      	movs	r2, #0
   119aa:	4c06      	ldr	r4, [pc, #24]	; (119c4 <_lseek_r+0x24>)
   119ac:	6022      	str	r2, [r4, #0]
   119ae:	001a      	movs	r2, r3
   119b0:	f7fe fe63 	bl	1067a <_lseek>
   119b4:	1c43      	adds	r3, r0, #1
   119b6:	d103      	bne.n	119c0 <_lseek_r+0x20>
   119b8:	6823      	ldr	r3, [r4, #0]
   119ba:	2b00      	cmp	r3, #0
   119bc:	d000      	beq.n	119c0 <_lseek_r+0x20>
   119be:	602b      	str	r3, [r5, #0]
   119c0:	bd70      	pop	{r4, r5, r6, pc}
   119c2:	46c0      	nop			; (mov r8, r8)
   119c4:	20000a78 	.word	0x20000a78

000119c8 <memchr>:
   119c8:	b2c9      	uxtb	r1, r1
   119ca:	1882      	adds	r2, r0, r2
   119cc:	4290      	cmp	r0, r2
   119ce:	d101      	bne.n	119d4 <memchr+0xc>
   119d0:	2000      	movs	r0, #0
   119d2:	4770      	bx	lr
   119d4:	7803      	ldrb	r3, [r0, #0]
   119d6:	428b      	cmp	r3, r1
   119d8:	d0fb      	beq.n	119d2 <memchr+0xa>
   119da:	3001      	adds	r0, #1
   119dc:	e7f6      	b.n	119cc <memchr+0x4>

000119de <__malloc_lock>:
   119de:	4770      	bx	lr

000119e0 <__malloc_unlock>:
   119e0:	4770      	bx	lr
	...

000119e4 <_read_r>:
   119e4:	b570      	push	{r4, r5, r6, lr}
   119e6:	0005      	movs	r5, r0
   119e8:	0008      	movs	r0, r1
   119ea:	0011      	movs	r1, r2
   119ec:	2200      	movs	r2, #0
   119ee:	4c06      	ldr	r4, [pc, #24]	; (11a08 <_read_r+0x24>)
   119f0:	6022      	str	r2, [r4, #0]
   119f2:	001a      	movs	r2, r3
   119f4:	f7fe fd84 	bl	10500 <_read>
   119f8:	1c43      	adds	r3, r0, #1
   119fa:	d103      	bne.n	11a04 <_read_r+0x20>
   119fc:	6823      	ldr	r3, [r4, #0]
   119fe:	2b00      	cmp	r3, #0
   11a00:	d000      	beq.n	11a04 <_read_r+0x20>
   11a02:	602b      	str	r3, [r5, #0]
   11a04:	bd70      	pop	{r4, r5, r6, pc}
   11a06:	46c0      	nop			; (mov r8, r8)
   11a08:	20000a78 	.word	0x20000a78

00011a0c <sd_mmc_trans_units>:
   11a0c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00011a28 <sd_trans_multipliers>:
   11a28:	00000000 0000000a 0000000c 0000000d     ................
   11a38:	0000000f 00000014 00000019 0000001e     ................
   11a48:	00000023 00000028 0000002d 00000032     #...(...-...2...
   11a58:	00000037 0000003c 00000046 00000050     7...<...F...P...

00011a68 <mmc_trans_multipliers>:
   11a68:	00000000 0000000a 0000000c 0000000d     ................
   11a78:	0000000f 00000014 0000001a 0000001e     ................
   11a88:	00000023 00000028 0000002d 00000034     #...(...-...4...
   11a98:	00000037 0000003c 00000046 00000050     7...<...F...P...
   11aa8:	2c2b2a22 3d3c3b3a 5d5b3f3e 00007f7c     "*+,:;<=>?[]|...
   11ab8:	695f6473 6567616d 6e69622e 00000000     sd_image.bin....
   11ac8:	000a0a0a 2e2e2e2e 6f42202e 6f6c746f     ......... Bootlo
   11ad8:	72656461 61747320 64657472 2e2e2e20     ader started ...
   11ae8:	000a2e2e 353a3232 36353a37 00000000     ....22:57:56....
   11af8:	20727041 32203831 00373130 706d6f43     Apr 18 2017.Comp
   11b08:	64656c69 3a6e6f20 20732520 0a207325     iled on: %s %s .
   11b18:	00000a0a 20435452 75646f6d 6920656c     ....RTC module i
   11b28:	2074696e 6c696166 0a2e6465 00000000     nit failed......
   11b38:	20444f42 75646f6d 6920656c 2074696e     BOD module init 
   11b48:	6c696166 0a2e6465 00000000 49545845     failed......EXTI
   11b58:	6d20544e 6c75646f 6e692065 66207469     NT module init f
   11b68:	656c6961 000a2e64 204d564e 75646f6d     ailed...NVM modu
   11b78:	6920656c 2074696e 6c696166 0a2e6465     le init failed..
   11b88:	00000000 61636f4c 6954206c 203a656d     ....Local Time: 
   11b98:	252f6425 64252f64 64252020 3a64253a     %d/%d/%d  %d:%d:
   11ba8:	000a6425 20544f4e 4e554f46 00000044     %d..NOT FOUND...
   11bb8:	4e554f46 00000044 2077654e 67616d69     FOUND...New imag
   11bc8:	69662065 203a656c 000a7325 68746f4e     e file: %s..Noth
   11bd8:	20676e69 64206f74 47202e6f 676e696f     ing to do. Going
   11be8:	206f7420 65656c73 000a2e70 656c6946      to sleep...File
   11bf8:	65706f20 6166206e 64656c69 00000a2e      open failed....
   11c08:	656c6946 63786520 73646565 78616d20     File exceeds max
   11c18:	7a697320 666f2065 20642520 65747962      size of %d byte
   11c28:	000a2e73 656c6946 61657220 72652064     s...File read er
   11c38:	20726f72 65746661 64252072 74796220     ror after %d byt
   11c48:	000a7365 676f7250 656d6172 75252064     es..Programed %u
   11c58:	20666f20 62207525 73657479 0000000a      of %u bytes....
   11c68:	206f6f54 796e616d 74796220 000a7365     Too many bytes..
   11c78:	62616e55 7420656c 6564206f 6574656c     Unable to delete
   11c88:	6c696620 000a2e65 756f6853 6e20646c      file...Should n
   11c98:	6220746f 65682065 000a6572 204d564e     ot be here..NVM 
   11ca8:	73617265 6f722065 72652077 0a726f72     erase row error.
   11cb8:	00000000 204d564e 74697277 75622065     ....NVM write bu
   11cc8:	72656666 72726520 000a726f 2e2e3231     ffer error..12..
   11cd8:	0046452e 42000800 42000c00 42001000     .EF....B...B...B
   11ce8:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   11cf8:	00000e0d 2f445322 20434d4d 64726143     ...."SD/MMC Card
   11d08:	6f6c5320 22302074 00000000 01020300      Slot 0"........

00011d18 <_usb_device_irq_bits>:
   11d18:	00080004 00800070 01000001 00000200     ....p...........

00011d28 <_usb_endpoint_irq_bits>:
   11d28:	60100c03                                ...`

00011d2c <_global_impure_ptr>:
   11d2c:	20000124                                $.. 

00011d30 <__sf_fake_stderr>:
	...

00011d50 <__sf_fake_stdin>:
	...

00011d70 <__sf_fake_stdout>:
	...
   11d90:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   11da0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   11db0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   11dc0:	00006665                                ef..

00011dc4 <_init>:
   11dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dc6:	46c0      	nop			; (mov r8, r8)
   11dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11dca:	bc08      	pop	{r3}
   11dcc:	469e      	mov	lr, r3
   11dce:	4770      	bx	lr

00011dd0 <__init_array_start>:
   11dd0:	000000dd 	.word	0x000000dd

00011dd4 <_fini>:
   11dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dd6:	46c0      	nop			; (mov r8, r8)
   11dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11dda:	bc08      	pop	{r3}
   11ddc:	469e      	mov	lr, r3
   11dde:	4770      	bx	lr

00011de0 <__fini_array_start>:
   11de0:	000000b5 	.word	0x000000b5
