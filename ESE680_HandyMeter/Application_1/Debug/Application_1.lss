
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012990  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000504  00012990  00012990  00022990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00012e94  00012e94  00022e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     000003ec  20000000  00012ea0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000ed4  200003f0  00013290  000303ec  2**4
                  ALLOC
  5 .stack        00002004  200012c4  00014164  000303ec  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  000303ec  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00030416  2**0
                  CONTENTS, READONLY
  8 .debug_info   00084889  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b585  00000000  00000000  000b4cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001feb2  00000000  00000000  000c027d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ae8  00000000  00000000  000e012f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020e8  00000000  00000000  000e1c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b3ec  00000000  00000000  000e3cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ba80  00000000  00000000  0010f0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a36e7  00000000  00000000  0013ab6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005a7c  00000000  00000000  001de254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 32 00 20 4d dc 00 00 49 dc 00 00 49 dc 00 00     .2. M...I...I...
	...
      2c:	49 dc 00 00 00 00 00 00 00 00 00 00 49 dc 00 00     I...........I...
      3c:	49 dc 00 00 49 dc 00 00 bd 2b 00 00 49 dc 00 00     I...I....+..I...
      4c:	09 a4 00 00 c9 9e 00 00 49 dc 00 00 75 9d 00 00     ........I...u...
      5c:	b9 d9 00 00 49 dc 00 00 f9 a6 00 00 0d a7 00 00     ....I...........
      6c:	21 a7 00 00 35 a7 00 00 49 a7 00 00 5d a7 00 00     !...5...I...]...
      7c:	ad 0a 00 00 cd 0a 00 00 ed 0a 00 00 49 dc 00 00     ............I...
      8c:	49 dc 00 00 49 dc 00 00 00 00 00 00 00 00 00 00     I...I...........
      9c:	49 dc 00 00 49 dc 00 00 49 dc 00 00 49 dc 00 00     I...I...I...I...
      ac:	49 dc 00 00 00 00 00 00                             I.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003f0 	.word	0x200003f0
      d4:	00000000 	.word	0x00000000
      d8:	00012990 	.word	0x00012990

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200003f4 	.word	0x200003f4
     108:	00012990 	.word	0x00012990
     10c:	00012990 	.word	0x00012990
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b083      	sub	sp, #12
     118:	0005      	movs	r5, r0
     11a:	4c14      	ldr	r4, [pc, #80]	; (16c <sd_mmc_test_unit_ready+0x58>)
     11c:	447c      	add	r4, pc
	switch (sd_mmc_check(slot))
     11e:	4b14      	ldr	r3, [pc, #80]	; (170 <sd_mmc_test_unit_ready+0x5c>)
     120:	58e3      	ldr	r3, [r4, r3]
     122:	9301      	str	r3, [sp, #4]
     124:	4798      	blx	r3
     126:	2801      	cmp	r0, #1
     128:	d005      	beq.n	136 <sd_mmc_test_unit_ready+0x22>
     12a:	2800      	cmp	r0, #0
     12c:	d006      	beq.n	13c <sd_mmc_test_unit_ready+0x28>
     12e:	2802      	cmp	r0, #2
     130:	d016      	beq.n	160 <sd_mmc_test_unit_ready+0x4c>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     132:	2001      	movs	r0, #1
     134:	e000      	b.n	138 <sd_mmc_test_unit_ready+0x24>
		return CTRL_BUSY;
     136:	2003      	movs	r0, #3
	}
}
     138:	b003      	add	sp, #12
     13a:	bd30      	pop	{r4, r5, pc}
		if (sd_mmc_ejected[slot]) {
     13c:	4b0d      	ldr	r3, [pc, #52]	; (174 <sd_mmc_test_unit_ready+0x60>)
     13e:	447b      	add	r3, pc
     140:	5d5b      	ldrb	r3, [r3, r5]
     142:	2b00      	cmp	r3, #0
     144:	d001      	beq.n	14a <sd_mmc_test_unit_ready+0x36>
			return CTRL_NO_PRESENT;
     146:	2002      	movs	r0, #2
     148:	e7f6      	b.n	138 <sd_mmc_test_unit_ready+0x24>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     14a:	0028      	movs	r0, r5
     14c:	4b0a      	ldr	r3, [pc, #40]	; (178 <sd_mmc_test_unit_ready+0x64>)
     14e:	58e3      	ldr	r3, [r4, r3]
     150:	9301      	str	r3, [sp, #4]
     152:	4798      	blx	r3
     154:	0783      	lsls	r3, r0, #30
     156:	d101      	bne.n	15c <sd_mmc_test_unit_ready+0x48>
		return CTRL_NO_PRESENT;
     158:	2002      	movs	r0, #2
     15a:	e7ed      	b.n	138 <sd_mmc_test_unit_ready+0x24>
			return CTRL_GOOD;
     15c:	2000      	movs	r0, #0
     15e:	e7eb      	b.n	138 <sd_mmc_test_unit_ready+0x24>
		sd_mmc_ejected[slot] = false;
     160:	2200      	movs	r2, #0
     162:	4b06      	ldr	r3, [pc, #24]	; (17c <sd_mmc_test_unit_ready+0x68>)
     164:	447b      	add	r3, pc
     166:	555a      	strb	r2, [r3, r5]
		return CTRL_NO_PRESENT;
     168:	2002      	movs	r0, #2
     16a:	e7e5      	b.n	138 <sd_mmc_test_unit_ready+0x24>
     16c:	00012870 	.word	0x00012870
     170:	000000b8 	.word	0x000000b8
     174:	200002ca 	.word	0x200002ca
     178:	00000168 	.word	0x00000168
     17c:	200002a4 	.word	0x200002a4

00000180 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     180:	b500      	push	{lr}
     182:	b083      	sub	sp, #12
     184:	4b04      	ldr	r3, [pc, #16]	; (198 <sd_mmc_test_unit_ready_0+0x18>)
     186:	447b      	add	r3, pc
	return sd_mmc_test_unit_ready(0);
     188:	2000      	movs	r0, #0
     18a:	4a04      	ldr	r2, [pc, #16]	; (19c <sd_mmc_test_unit_ready_0+0x1c>)
     18c:	589b      	ldr	r3, [r3, r2]
     18e:	9301      	str	r3, [sp, #4]
     190:	4798      	blx	r3
}
     192:	b003      	add	sp, #12
     194:	bd00      	pop	{pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	00012806 	.word	0x00012806
     19c:	00000090 	.word	0x00000090

000001a0 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     1a0:	b570      	push	{r4, r5, r6, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	0004      	movs	r4, r0
     1a6:	000e      	movs	r6, r1
     1a8:	4d07      	ldr	r5, [pc, #28]	; (1c8 <sd_mmc_read_capacity+0x28>)
     1aa:	447d      	add	r5, pc
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     1ac:	4b07      	ldr	r3, [pc, #28]	; (1cc <sd_mmc_read_capacity+0x2c>)
     1ae:	58eb      	ldr	r3, [r5, r3]
     1b0:	9301      	str	r3, [sp, #4]
     1b2:	4798      	blx	r3
     1b4:	0040      	lsls	r0, r0, #1
     1b6:	3801      	subs	r0, #1
     1b8:	6030      	str	r0, [r6, #0]
	return sd_mmc_test_unit_ready(slot);
     1ba:	0020      	movs	r0, r4
     1bc:	4b04      	ldr	r3, [pc, #16]	; (1d0 <sd_mmc_read_capacity+0x30>)
     1be:	58eb      	ldr	r3, [r5, r3]
     1c0:	9301      	str	r3, [sp, #4]
     1c2:	4798      	blx	r3
}
     1c4:	b002      	add	sp, #8
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	000127e2 	.word	0x000127e2
     1cc:	000004ec 	.word	0x000004ec
     1d0:	00000090 	.word	0x00000090

000001d4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     1d4:	b500      	push	{lr}
     1d6:	b083      	sub	sp, #12
     1d8:	0001      	movs	r1, r0
     1da:	4b04      	ldr	r3, [pc, #16]	; (1ec <sd_mmc_read_capacity_0+0x18>)
     1dc:	447b      	add	r3, pc
	return sd_mmc_read_capacity(0, nb_sector);
     1de:	2000      	movs	r0, #0
     1e0:	4a03      	ldr	r2, [pc, #12]	; (1f0 <sd_mmc_read_capacity_0+0x1c>)
     1e2:	589b      	ldr	r3, [r3, r2]
     1e4:	9301      	str	r3, [sp, #4]
     1e6:	4798      	blx	r3
}
     1e8:	b003      	add	sp, #12
     1ea:	bd00      	pop	{pc}
     1ec:	000127b0 	.word	0x000127b0
     1f0:	00000218 	.word	0x00000218

000001f4 <sd_mmc_unload>:
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
     1f4:	4b02      	ldr	r3, [pc, #8]	; (200 <sd_mmc_unload+0xc>)
     1f6:	447b      	add	r3, pc
     1f8:	5419      	strb	r1, [r3, r0]
	return true;
}
     1fa:	2001      	movs	r0, #1
     1fc:	4770      	bx	lr
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	20000212 	.word	0x20000212

00000204 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
     204:	b500      	push	{lr}
     206:	b083      	sub	sp, #12
     208:	0001      	movs	r1, r0
     20a:	4b04      	ldr	r3, [pc, #16]	; (21c <sd_mmc_unload_0+0x18>)
     20c:	447b      	add	r3, pc
	return sd_mmc_unload(0, unload);
     20e:	2000      	movs	r0, #0
     210:	4a03      	ldr	r2, [pc, #12]	; (220 <sd_mmc_unload_0+0x1c>)
     212:	589b      	ldr	r3, [r3, r2]
     214:	9301      	str	r3, [sp, #4]
     216:	4798      	blx	r3
}
     218:	b003      	add	sp, #12
     21a:	bd00      	pop	{pc}
     21c:	00012780 	.word	0x00012780
     220:	000002c4 	.word	0x000002c4

00000224 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
     224:	b500      	push	{lr}
     226:	b083      	sub	sp, #12
     228:	4b03      	ldr	r3, [pc, #12]	; (238 <sd_mmc_wr_protect+0x14>)
     22a:	447b      	add	r3, pc
	return sd_mmc_is_write_protected(slot);
     22c:	4a03      	ldr	r2, [pc, #12]	; (23c <sd_mmc_wr_protect+0x18>)
     22e:	589b      	ldr	r3, [r3, r2]
     230:	9301      	str	r3, [sp, #4]
     232:	4798      	blx	r3
}
     234:	b003      	add	sp, #12
     236:	bd00      	pop	{pc}
     238:	00012762 	.word	0x00012762
     23c:	00000210 	.word	0x00000210

00000240 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
     240:	b500      	push	{lr}
     242:	b083      	sub	sp, #12
     244:	4b04      	ldr	r3, [pc, #16]	; (258 <sd_mmc_wr_protect_0+0x18>)
     246:	447b      	add	r3, pc
	return sd_mmc_wr_protect(0);
     248:	2000      	movs	r0, #0
     24a:	4a04      	ldr	r2, [pc, #16]	; (25c <sd_mmc_wr_protect_0+0x1c>)
     24c:	589b      	ldr	r3, [r3, r2]
     24e:	9301      	str	r3, [sp, #4]
     250:	4798      	blx	r3
}
     252:	b003      	add	sp, #12
     254:	bd00      	pop	{pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	00012746 	.word	0x00012746
     25c:	000002dc 	.word	0x000002dc

00000260 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
	UNUSED(slot);
	return true;
}
     260:	2001      	movs	r0, #1
     262:	4770      	bx	lr

00000264 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
     264:	b500      	push	{lr}
     266:	b083      	sub	sp, #12
     268:	4b04      	ldr	r3, [pc, #16]	; (27c <sd_mmc_removal_0+0x18>)
     26a:	447b      	add	r3, pc
	return sd_mmc_removal(0);
     26c:	2000      	movs	r0, #0
     26e:	4a04      	ldr	r2, [pc, #16]	; (280 <sd_mmc_removal_0+0x1c>)
     270:	589b      	ldr	r3, [r3, r2]
     272:	9301      	str	r3, [sp, #4]
     274:	4798      	blx	r3
}
     276:	b003      	add	sp, #12
     278:	bd00      	pop	{pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	00012722 	.word	0x00012722
     280:	00000338 	.word	0x00000338

00000284 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     284:	b530      	push	{r4, r5, lr}
     286:	b083      	sub	sp, #12
     288:	0015      	movs	r5, r2
     28a:	4c11      	ldr	r4, [pc, #68]	; (2d0 <sd_mmc_mem_2_ram+0x4c>)
     28c:	447c      	add	r4, pc
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     28e:	2201      	movs	r2, #1
     290:	4b10      	ldr	r3, [pc, #64]	; (2d4 <sd_mmc_mem_2_ram+0x50>)
     292:	58e3      	ldr	r3, [r4, r3]
     294:	9301      	str	r3, [sp, #4]
     296:	4798      	blx	r3
     298:	2800      	cmp	r0, #0
     29a:	d003      	beq.n	2a4 <sd_mmc_mem_2_ram+0x20>
     29c:	2802      	cmp	r0, #2
     29e:	d115      	bne.n	2cc <sd_mmc_mem_2_ram+0x48>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     2a0:	b003      	add	sp, #12
     2a2:	bd30      	pop	{r4, r5, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     2a4:	2101      	movs	r1, #1
     2a6:	0028      	movs	r0, r5
     2a8:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <sd_mmc_mem_2_ram+0x54>)
     2aa:	58e3      	ldr	r3, [r4, r3]
     2ac:	9301      	str	r3, [sp, #4]
     2ae:	4798      	blx	r3
     2b0:	2800      	cmp	r0, #0
     2b2:	d001      	beq.n	2b8 <sd_mmc_mem_2_ram+0x34>
		return CTRL_FAIL;
     2b4:	2001      	movs	r0, #1
     2b6:	e7f3      	b.n	2a0 <sd_mmc_mem_2_ram+0x1c>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     2b8:	4b08      	ldr	r3, [pc, #32]	; (2dc <sd_mmc_mem_2_ram+0x58>)
     2ba:	58e3      	ldr	r3, [r4, r3]
     2bc:	9301      	str	r3, [sp, #4]
     2be:	4798      	blx	r3
     2c0:	2800      	cmp	r0, #0
     2c2:	d101      	bne.n	2c8 <sd_mmc_mem_2_ram+0x44>
	return CTRL_GOOD;
     2c4:	2000      	movs	r0, #0
     2c6:	e7eb      	b.n	2a0 <sd_mmc_mem_2_ram+0x1c>
		return CTRL_FAIL;
     2c8:	2001      	movs	r0, #1
     2ca:	e7e9      	b.n	2a0 <sd_mmc_mem_2_ram+0x1c>
		return CTRL_FAIL;
     2cc:	2001      	movs	r0, #1
     2ce:	e7e7      	b.n	2a0 <sd_mmc_mem_2_ram+0x1c>
     2d0:	00012700 	.word	0x00012700
     2d4:	0000024c 	.word	0x0000024c
     2d8:	000001a4 	.word	0x000001a4
     2dc:	000001e0 	.word	0x000001e0

000002e0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     2e0:	b510      	push	{r4, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	000a      	movs	r2, r1
     2e6:	4b05      	ldr	r3, [pc, #20]	; (2fc <sd_mmc_mem_2_ram_0+0x1c>)
     2e8:	447b      	add	r3, pc
	return sd_mmc_mem_2_ram(0, addr, ram);
     2ea:	0001      	movs	r1, r0
     2ec:	2000      	movs	r0, #0
     2ee:	4c04      	ldr	r4, [pc, #16]	; (300 <sd_mmc_mem_2_ram_0+0x20>)
     2f0:	591b      	ldr	r3, [r3, r4]
     2f2:	9301      	str	r3, [sp, #4]
     2f4:	4798      	blx	r3
}
     2f6:	b002      	add	sp, #8
     2f8:	bd10      	pop	{r4, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	000126a4 	.word	0x000126a4
     300:	0000041c 	.word	0x0000041c

00000304 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     304:	b530      	push	{r4, r5, lr}
     306:	b083      	sub	sp, #12
     308:	0015      	movs	r5, r2
     30a:	4c11      	ldr	r4, [pc, #68]	; (350 <sd_mmc_ram_2_mem+0x4c>)
     30c:	447c      	add	r4, pc
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     30e:	2201      	movs	r2, #1
     310:	4b10      	ldr	r3, [pc, #64]	; (354 <sd_mmc_ram_2_mem+0x50>)
     312:	58e3      	ldr	r3, [r4, r3]
     314:	9301      	str	r3, [sp, #4]
     316:	4798      	blx	r3
     318:	2800      	cmp	r0, #0
     31a:	d003      	beq.n	324 <sd_mmc_ram_2_mem+0x20>
     31c:	2802      	cmp	r0, #2
     31e:	d115      	bne.n	34c <sd_mmc_ram_2_mem+0x48>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     320:	b003      	add	sp, #12
     322:	bd30      	pop	{r4, r5, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     324:	2101      	movs	r1, #1
     326:	0028      	movs	r0, r5
     328:	4b0b      	ldr	r3, [pc, #44]	; (358 <sd_mmc_ram_2_mem+0x54>)
     32a:	58e3      	ldr	r3, [r4, r3]
     32c:	9301      	str	r3, [sp, #4]
     32e:	4798      	blx	r3
     330:	2800      	cmp	r0, #0
     332:	d001      	beq.n	338 <sd_mmc_ram_2_mem+0x34>
		return CTRL_FAIL;
     334:	2001      	movs	r0, #1
     336:	e7f3      	b.n	320 <sd_mmc_ram_2_mem+0x1c>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     338:	4b08      	ldr	r3, [pc, #32]	; (35c <sd_mmc_ram_2_mem+0x58>)
     33a:	58e3      	ldr	r3, [r4, r3]
     33c:	9301      	str	r3, [sp, #4]
     33e:	4798      	blx	r3
     340:	2800      	cmp	r0, #0
     342:	d101      	bne.n	348 <sd_mmc_ram_2_mem+0x44>
	return CTRL_GOOD;
     344:	2000      	movs	r0, #0
     346:	e7eb      	b.n	320 <sd_mmc_ram_2_mem+0x1c>
		return CTRL_FAIL;
     348:	2001      	movs	r0, #1
     34a:	e7e9      	b.n	320 <sd_mmc_ram_2_mem+0x1c>
		return CTRL_FAIL;
     34c:	2001      	movs	r0, #1
     34e:	e7e7      	b.n	320 <sd_mmc_ram_2_mem+0x1c>
     350:	00012680 	.word	0x00012680
     354:	000004cc 	.word	0x000004cc
     358:	00000004 	.word	0x00000004
     35c:	000000b0 	.word	0x000000b0

00000360 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     360:	b510      	push	{r4, lr}
     362:	b082      	sub	sp, #8
     364:	000a      	movs	r2, r1
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <sd_mmc_ram_2_mem_0+0x1c>)
     368:	447b      	add	r3, pc
	return sd_mmc_ram_2_mem(0, addr, ram);
     36a:	0001      	movs	r1, r0
     36c:	2000      	movs	r0, #0
     36e:	4c04      	ldr	r4, [pc, #16]	; (380 <sd_mmc_ram_2_mem_0+0x20>)
     370:	591b      	ldr	r3, [r3, r4]
     372:	9301      	str	r3, [sp, #4]
     374:	4798      	blx	r3
}
     376:	b002      	add	sp, #8
     378:	bd10      	pop	{r4, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	00012624 	.word	0x00012624
     380:	00000268 	.word	0x00000268

00000384 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
     384:	b510      	push	{r4, lr}
     386:	b082      	sub	sp, #8
     388:	4909      	ldr	r1, [pc, #36]	; (3b0 <_tcc_get_inst_index+0x2c>)
     38a:	4479      	add	r1, pc
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     38c:	2300      	movs	r3, #0
     38e:	2b02      	cmp	r3, #2
     390:	d80b      	bhi.n	3aa <_tcc_get_inst_index+0x26>
		if (hw == tcc_modules[i]) {
     392:	4a08      	ldr	r2, [pc, #32]	; (3b4 <_tcc_get_inst_index+0x30>)
     394:	588a      	ldr	r2, [r1, r2]
     396:	9201      	str	r2, [sp, #4]
     398:	009a      	lsls	r2, r3, #2
     39a:	9c01      	ldr	r4, [sp, #4]
     39c:	5912      	ldr	r2, [r2, r4]
     39e:	4282      	cmp	r2, r0
     3a0:	d001      	beq.n	3a6 <_tcc_get_inst_index+0x22>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     3a2:	3301      	adds	r3, #1
     3a4:	e7f3      	b.n	38e <_tcc_get_inst_index+0xa>
			return i;
     3a6:	b2d8      	uxtb	r0, r3
     3a8:	e000      	b.n	3ac <_tcc_get_inst_index+0x28>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     3aa:	2000      	movs	r0, #0
}
     3ac:	b002      	add	sp, #8
     3ae:	bd10      	pop	{r4, pc}
     3b0:	00012602 	.word	0x00012602
     3b4:	000002ec 	.word	0x000002ec

000003b8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     3b8:	b530      	push	{r4, r5, lr}
     3ba:	b083      	sub	sp, #12
     3bc:	0004      	movs	r4, r0
     3be:	4d53      	ldr	r5, [pc, #332]	; (50c <tcc_get_config_defaults+0x154>)
     3c0:	447d      	add	r5, pc
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     3c2:	0008      	movs	r0, r1
     3c4:	4b52      	ldr	r3, [pc, #328]	; (510 <tcc_get_config_defaults+0x158>)
     3c6:	58eb      	ldr	r3, [r5, r3]
     3c8:	9301      	str	r3, [sp, #4]
     3ca:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     3cc:	2300      	movs	r3, #0
     3ce:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     3d0:	4a50      	ldr	r2, [pc, #320]	; (514 <tcc_get_config_defaults+0x15c>)
     3d2:	58aa      	ldr	r2, [r5, r2]
     3d4:	0080      	lsls	r0, r0, #2
     3d6:	5882      	ldr	r2, [r0, r2]
     3d8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     3da:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     3dc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     3de:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     3e0:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     3e2:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     3e4:	61e3      	str	r3, [r4, #28]
     3e6:	6223      	str	r3, [r4, #32]
     3e8:	6263      	str	r3, [r4, #36]	; 0x24
     3ea:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     3ec:	7523      	strb	r3, [r4, #20]
     3ee:	7563      	strb	r3, [r4, #21]
     3f0:	75a3      	strb	r3, [r4, #22]
     3f2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     3f4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     3f6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     3f8:	7423      	strb	r3, [r4, #16]
     3fa:	7463      	strb	r3, [r4, #17]
     3fc:	74a3      	strb	r3, [r4, #18]
     3fe:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     400:	222c      	movs	r2, #44	; 0x2c
     402:	54a3      	strb	r3, [r4, r2]
     404:	3201      	adds	r2, #1
     406:	54a3      	strb	r3, [r4, r2]
     408:	3201      	adds	r2, #1
     40a:	54a3      	strb	r3, [r4, r2]
     40c:	3201      	adds	r2, #1
     40e:	54a3      	strb	r3, [r4, r2]
     410:	3201      	adds	r2, #1
     412:	54a3      	strb	r3, [r4, r2]
     414:	3201      	adds	r2, #1
     416:	54a3      	strb	r3, [r4, r2]
     418:	3201      	adds	r2, #1
     41a:	54a3      	strb	r3, [r4, r2]
     41c:	3201      	adds	r2, #1
     41e:	54a3      	strb	r3, [r4, r2]
     420:	3201      	adds	r2, #1
     422:	54a3      	strb	r3, [r4, r2]
     424:	3201      	adds	r2, #1
     426:	54a3      	strb	r3, [r4, r2]
     428:	3201      	adds	r2, #1
     42a:	54a3      	strb	r3, [r4, r2]
     42c:	3201      	adds	r2, #1
     42e:	54a3      	strb	r3, [r4, r2]
     430:	3201      	adds	r2, #1
     432:	54a3      	strb	r3, [r4, r2]
     434:	3201      	adds	r2, #1
     436:	54a3      	strb	r3, [r4, r2]
     438:	3201      	adds	r2, #1
     43a:	54a3      	strb	r3, [r4, r2]
     43c:	3201      	adds	r2, #1
     43e:	54a3      	strb	r3, [r4, r2]
     440:	3201      	adds	r2, #1
     442:	54a3      	strb	r3, [r4, r2]
     444:	3201      	adds	r2, #1
     446:	54a3      	strb	r3, [r4, r2]
     448:	3201      	adds	r2, #1
     44a:	54a3      	strb	r3, [r4, r2]
     44c:	3201      	adds	r2, #1
     44e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     450:	3201      	adds	r2, #1
     452:	54a3      	strb	r3, [r4, r2]
     454:	3201      	adds	r2, #1
     456:	54a3      	strb	r3, [r4, r2]
     458:	3201      	adds	r2, #1
     45a:	54a3      	strb	r3, [r4, r2]
     45c:	3201      	adds	r2, #1
     45e:	54a3      	strb	r3, [r4, r2]
     460:	3201      	adds	r2, #1
     462:	54a3      	strb	r3, [r4, r2]
     464:	3201      	adds	r2, #1
     466:	54a3      	strb	r3, [r4, r2]
     468:	3201      	adds	r2, #1
     46a:	54a3      	strb	r3, [r4, r2]
     46c:	3201      	adds	r2, #1
     46e:	54a3      	strb	r3, [r4, r2]
     470:	3201      	adds	r2, #1
     472:	54a3      	strb	r3, [r4, r2]
     474:	3201      	adds	r2, #1
     476:	54a3      	strb	r3, [r4, r2]
     478:	3201      	adds	r2, #1
     47a:	54a3      	strb	r3, [r4, r2]
     47c:	3201      	adds	r2, #1
     47e:	54a3      	strb	r3, [r4, r2]
     480:	3201      	adds	r2, #1
     482:	54a3      	strb	r3, [r4, r2]
     484:	3201      	adds	r2, #1
     486:	54a3      	strb	r3, [r4, r2]
     488:	3201      	adds	r2, #1
     48a:	54a3      	strb	r3, [r4, r2]
     48c:	3201      	adds	r2, #1
     48e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     490:	3201      	adds	r2, #1
     492:	54a3      	strb	r3, [r4, r2]
     494:	3201      	adds	r2, #1
     496:	54a3      	strb	r3, [r4, r2]
     498:	3201      	adds	r2, #1
     49a:	54a3      	strb	r3, [r4, r2]
     49c:	3201      	adds	r2, #1
     49e:	54a3      	strb	r3, [r4, r2]
     4a0:	3201      	adds	r2, #1
     4a2:	54a3      	strb	r3, [r4, r2]
     4a4:	3201      	adds	r2, #1
     4a6:	54a3      	strb	r3, [r4, r2]
     4a8:	3201      	adds	r2, #1
     4aa:	54a3      	strb	r3, [r4, r2]
     4ac:	3201      	adds	r2, #1
     4ae:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     4b0:	3241      	adds	r2, #65	; 0x41
     4b2:	54a3      	strb	r3, [r4, r2]
     4b4:	65a3      	str	r3, [r4, #88]	; 0x58
     4b6:	67a3      	str	r3, [r4, #120]	; 0x78
     4b8:	3201      	adds	r2, #1
     4ba:	54a3      	strb	r3, [r4, r2]
     4bc:	65e3      	str	r3, [r4, #92]	; 0x5c
     4be:	67e3      	str	r3, [r4, #124]	; 0x7c
     4c0:	3201      	adds	r2, #1
     4c2:	54a3      	strb	r3, [r4, r2]
     4c4:	6623      	str	r3, [r4, #96]	; 0x60
     4c6:	3a1a      	subs	r2, #26
     4c8:	50a3      	str	r3, [r4, r2]
     4ca:	321b      	adds	r2, #27
     4cc:	54a3      	strb	r3, [r4, r2]
     4ce:	6663      	str	r3, [r4, #100]	; 0x64
     4d0:	3a17      	subs	r2, #23
     4d2:	50a3      	str	r3, [r4, r2]
     4d4:	3218      	adds	r2, #24
     4d6:	54a3      	strb	r3, [r4, r2]
     4d8:	66a3      	str	r3, [r4, #104]	; 0x68
     4da:	3a14      	subs	r2, #20
     4dc:	50a3      	str	r3, [r4, r2]
     4de:	3215      	adds	r2, #21
     4e0:	54a3      	strb	r3, [r4, r2]
     4e2:	66e3      	str	r3, [r4, #108]	; 0x6c
     4e4:	3a11      	subs	r2, #17
     4e6:	50a3      	str	r3, [r4, r2]
     4e8:	3212      	adds	r2, #18
     4ea:	54a3      	strb	r3, [r4, r2]
     4ec:	6723      	str	r3, [r4, #112]	; 0x70
     4ee:	3a0e      	subs	r2, #14
     4f0:	50a3      	str	r3, [r4, r2]
     4f2:	320f      	adds	r2, #15
     4f4:	54a3      	strb	r3, [r4, r2]
     4f6:	6763      	str	r3, [r4, #116]	; 0x74
     4f8:	3a0b      	subs	r2, #11
     4fa:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     4fc:	2101      	movs	r1, #1
     4fe:	320c      	adds	r2, #12
     500:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     502:	3201      	adds	r2, #1
     504:	54a3      	strb	r3, [r4, r2]
}
     506:	b003      	add	sp, #12
     508:	bd30      	pop	{r4, r5, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	000125cc 	.word	0x000125cc
     510:	00000088 	.word	0x00000088
     514:	00000438 	.word	0x00000438

00000518 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     518:	b5f0      	push	{r4, r5, r6, r7, lr}
     51a:	46de      	mov	lr, fp
     51c:	4657      	mov	r7, sl
     51e:	464e      	mov	r6, r9
     520:	4645      	mov	r5, r8
     522:	b5e0      	push	{r5, r6, r7, lr}
     524:	b08d      	sub	sp, #52	; 0x34
     526:	9002      	str	r0, [sp, #8]
     528:	000f      	movs	r7, r1
     52a:	0016      	movs	r6, r2
     52c:	4cc4      	ldr	r4, [pc, #784]	; (840 <tcc_init+0x328>)
     52e:	447c      	add	r4, pc
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     530:	0008      	movs	r0, r1
     532:	4bc4      	ldr	r3, [pc, #784]	; (844 <tcc_init+0x32c>)
     534:	58e3      	ldr	r3, [r4, r3]
     536:	9300      	str	r3, [sp, #0]
     538:	4798      	blx	r3

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     53a:	9001      	str	r0, [sp, #4]
     53c:	4bc2      	ldr	r3, [pc, #776]	; (848 <tcc_init+0x330>)
     53e:	58e3      	ldr	r3, [r4, r3]
     540:	9300      	str	r3, [sp, #0]
     542:	0083      	lsls	r3, r0, #2
     544:	9900      	ldr	r1, [sp, #0]
     546:	585b      	ldr	r3, [r3, r1]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     548:	49c0      	ldr	r1, [pc, #768]	; (84c <tcc_init+0x334>)
     54a:	6a0d      	ldr	r5, [r1, #32]
     54c:	432b      	orrs	r3, r5
     54e:	620b      	str	r3, [r1, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     550:	683b      	ldr	r3, [r7, #0]
     552:	079b      	lsls	r3, r3, #30
     554:	d508      	bpl.n	568 <tcc_init+0x50>
		return STATUS_ERR_DENIED;
     556:	251c      	movs	r5, #28
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     558:	0028      	movs	r0, r5
     55a:	b00d      	add	sp, #52	; 0x34
     55c:	bc3c      	pop	{r2, r3, r4, r5}
     55e:	4690      	mov	r8, r2
     560:	4699      	mov	r9, r3
     562:	46a2      	mov	sl, r4
     564:	46ab      	mov	fp, r5
     566:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2101      	movs	r1, #1
     56c:	400b      	ands	r3, r1
     56e:	d001      	beq.n	574 <tcc_init+0x5c>
		return STATUS_ERR_DENIED;
     570:	251c      	movs	r5, #28
     572:	e7f1      	b.n	558 <tcc_init+0x40>
	uint32_t count_max  = _tcc_maxs[module_index];
     574:	49b6      	ldr	r1, [pc, #728]	; (850 <tcc_init+0x338>)
     576:	5861      	ldr	r1, [r4, r1]
     578:	9100      	str	r1, [sp, #0]
     57a:	0081      	lsls	r1, r0, #2
     57c:	9d00      	ldr	r5, [sp, #0]
     57e:	5949      	ldr	r1, [r1, r5]
	if ((config->counter.count > count_max)
     580:	6835      	ldr	r5, [r6, #0]
     582:	42a9      	cmp	r1, r5
     584:	d201      	bcs.n	58a <tcc_init+0x72>
		return STATUS_ERR_INVALID_ARG;
     586:	2517      	movs	r5, #23
     588:	e7e6      	b.n	558 <tcc_init+0x40>
		|| (config->counter.period > count_max)
     58a:	6875      	ldr	r5, [r6, #4]
     58c:	42a9      	cmp	r1, r5
     58e:	d201      	bcs.n	594 <tcc_init+0x7c>
		return STATUS_ERR_INVALID_ARG;
     590:	2517      	movs	r5, #23
     592:	e7e1      	b.n	558 <tcc_init+0x40>
     594:	2500      	movs	r5, #0
     596:	46ac      	mov	ip, r5
     598:	4662      	mov	r2, ip
     59a:	469c      	mov	ip, r3
     59c:	0003      	movs	r3, r0
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     59e:	2a03      	cmp	r2, #3
     5a0:	dc08      	bgt.n	5b4 <tcc_init+0x9c>
		if ((config->compare.match[i] > count_max)
     5a2:	1d95      	adds	r5, r2, #6
     5a4:	00ad      	lsls	r5, r5, #2
     5a6:	1975      	adds	r5, r6, r5
     5a8:	686d      	ldr	r5, [r5, #4]
     5aa:	42a9      	cmp	r1, r5
     5ac:	d200      	bcs.n	5b0 <tcc_init+0x98>
     5ae:	e1ef      	b.n	990 <tcc_init+0x478>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     5b0:	3201      	adds	r2, #1
     5b2:	e7f4      	b.n	59e <tcc_init+0x86>
     5b4:	0002      	movs	r2, r0
     5b6:	0018      	movs	r0, r3
     5b8:	2100      	movs	r1, #0
     5ba:	0003      	movs	r3, r0
     5bc:	0010      	movs	r0, r2
     5be:	9a01      	ldr	r2, [sp, #4]
     5c0:	e000      	b.n	5c4 <tcc_init+0xac>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     5c2:	3101      	adds	r1, #1
     5c4:	2907      	cmp	r1, #7
     5c6:	dc0c      	bgt.n	5e2 <tcc_init+0xca>
		if (!config->pins.enable_wave_out_pin[i]) {
     5c8:	1875      	adds	r5, r6, r1
     5ca:	3598      	adds	r5, #152	; 0x98
     5cc:	782d      	ldrb	r5, [r5, #0]
     5ce:	2d00      	cmp	r5, #0
     5d0:	d0f7      	beq.n	5c2 <tcc_init+0xaa>
		if (i >= _tcc_ow_nums[module_index]) {
     5d2:	4da0      	ldr	r5, [pc, #640]	; (854 <tcc_init+0x33c>)
     5d4:	5965      	ldr	r5, [r4, r5]
     5d6:	9500      	str	r5, [sp, #0]
     5d8:	5cad      	ldrb	r5, [r5, r2]
     5da:	42a9      	cmp	r1, r5
     5dc:	dbf1      	blt.n	5c2 <tcc_init+0xaa>
			return STATUS_ERR_INVALID_ARG;
     5de:	2517      	movs	r5, #23
     5e0:	e7ba      	b.n	558 <tcc_init+0x40>
     5e2:	0002      	movs	r2, r0
     5e4:	0018      	movs	r0, r3
     5e6:	4663      	mov	r3, ip
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     5e8:	2100      	movs	r1, #0
	uint32_t ctrla = 0;
     5ea:	2500      	movs	r5, #0
     5ec:	46ac      	mov	ip, r5
     5ee:	4698      	mov	r8, r3
     5f0:	e000      	b.n	5f4 <tcc_init+0xdc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     5f2:	3101      	adds	r1, #1
     5f4:	2903      	cmp	r1, #3
     5f6:	dc10      	bgt.n	61a <tcc_init+0x102>
		if (config->capture.channel_function[i] ==
     5f8:	1875      	adds	r5, r6, r1
     5fa:	7c2d      	ldrb	r5, [r5, #16]
     5fc:	2d01      	cmp	r5, #1
     5fe:	d1f8      	bne.n	5f2 <tcc_init+0xda>
			if (i > _tcc_cc_nums[module_index]) {
     600:	4d95      	ldr	r5, [pc, #596]	; (858 <tcc_init+0x340>)
     602:	5963      	ldr	r3, [r4, r5]
     604:	9300      	str	r3, [sp, #0]
     606:	5c9d      	ldrb	r5, [r3, r2]
     608:	42a9      	cmp	r1, r5
     60a:	dc2e      	bgt.n	66a <tcc_init+0x152>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     60c:	2580      	movs	r5, #128	; 0x80
     60e:	046d      	lsls	r5, r5, #17
     610:	408d      	lsls	r5, r1
     612:	4663      	mov	r3, ip
     614:	432b      	orrs	r3, r5
     616:	469c      	mov	ip, r3
     618:	e7eb      	b.n	5f2 <tcc_init+0xda>
     61a:	4643      	mov	r3, r8
	if (config->run_in_standby) {
     61c:	22a1      	movs	r2, #161	; 0xa1
     61e:	5cb2      	ldrb	r2, [r6, r2]
     620:	2a00      	cmp	r2, #0
     622:	d004      	beq.n	62e <tcc_init+0x116>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     624:	2280      	movs	r2, #128	; 0x80
     626:	0112      	lsls	r2, r2, #4
     628:	4661      	mov	r1, ip
     62a:	4311      	orrs	r1, r2
     62c:	468c      	mov	ip, r1
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     62e:	7b32      	ldrb	r2, [r6, #12]
     630:	0312      	lsls	r2, r2, #12
     632:	4661      	mov	r1, ip
     634:	430a      	orrs	r2, r1
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     636:	7af1      	ldrb	r1, [r6, #11]
     638:	0209      	lsls	r1, r1, #8
     63a:	430a      	orrs	r2, r1
     63c:	9204      	str	r2, [sp, #16]
	return STATUS_OK;
     63e:	2500      	movs	r5, #0
	if (STATUS_OK != status) {
     640:	2d00      	cmp	r5, #0
     642:	d000      	beq.n	646 <tcc_init+0x12e>
     644:	e788      	b.n	558 <tcc_init+0x40>
	if (config->counter.oneshot) {
     646:	7a32      	ldrb	r2, [r6, #8]
     648:	2a00      	cmp	r2, #0
     64a:	d113      	bne.n	674 <tcc_init+0x15c>
	uint8_t ctrlb = 0;
     64c:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     64e:	7a72      	ldrb	r2, [r6, #9]
     650:	2a01      	cmp	r2, #1
     652:	d012      	beq.n	67a <tcc_init+0x162>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     654:	4a80      	ldr	r2, [pc, #512]	; (858 <tcc_init+0x340>)
     656:	58a2      	ldr	r2, [r4, r2]
     658:	5c12      	ldrb	r2, [r2, r0]
     65a:	9200      	str	r2, [sp, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     65c:	2200      	movs	r2, #0
     65e:	9505      	str	r5, [sp, #20]
     660:	46bc      	mov	ip, r7
     662:	4699      	mov	r9, r3
     664:	46a0      	mov	r8, r4
     666:	9003      	str	r0, [sp, #12]
     668:	e048      	b.n	6fc <tcc_init+0x1e4>
     66a:	4643      	mov	r3, r8
	uint32_t ctrla = 0;
     66c:	2200      	movs	r2, #0
     66e:	9204      	str	r2, [sp, #16]
				return STATUS_ERR_INVALID_ARG;
     670:	2517      	movs	r5, #23
     672:	e7e5      	b.n	640 <tcc_init+0x128>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     674:	2204      	movs	r2, #4
     676:	9206      	str	r2, [sp, #24]
     678:	e7e9      	b.n	64e <tcc_init+0x136>
		ctrlb |= TCC_CTRLBSET_DIR;
     67a:	9906      	ldr	r1, [sp, #24]
     67c:	4311      	orrs	r1, r2
     67e:	b2ca      	uxtb	r2, r1
     680:	9206      	str	r2, [sp, #24]
     682:	e7e7      	b.n	654 <tcc_init+0x13c>
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     684:	4649      	mov	r1, r9
     686:	e05e      	b.n	746 <tcc_init+0x22e>
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     688:	4649      	mov	r1, r9
     68a:	e066      	b.n	75a <tcc_init+0x242>
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     68c:	4649      	mov	r1, r9
     68e:	430d      	orrs	r5, r1
     690:	46aa      	mov	sl, r5
				| TCC_FCTRLA_SRC(cfg->source)
     692:	0090      	lsls	r0, r2, #2
     694:	1885      	adds	r5, r0, r2
     696:	0069      	lsls	r1, r5, #1
     698:	1871      	adds	r1, r6, r1
     69a:	000d      	movs	r5, r1
     69c:	3531      	adds	r5, #49	; 0x31
     69e:	782b      	ldrb	r3, [r5, #0]
     6a0:	2503      	movs	r5, #3
     6a2:	401d      	ands	r5, r3
     6a4:	4653      	mov	r3, sl
     6a6:	431d      	orrs	r5, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
     6a8:	2332      	movs	r3, #50	; 0x32
     6aa:	469a      	mov	sl, r3
     6ac:	448a      	add	sl, r1
     6ae:	4653      	mov	r3, sl
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	015b      	lsls	r3, r3, #5
     6b4:	469b      	mov	fp, r3
     6b6:	2360      	movs	r3, #96	; 0x60
     6b8:	469a      	mov	sl, r3
     6ba:	465b      	mov	r3, fp
     6bc:	4657      	mov	r7, sl
     6be:	403b      	ands	r3, r7
     6c0:	431d      	orrs	r5, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
     6c2:	2333      	movs	r3, #51	; 0x33
     6c4:	469a      	mov	sl, r3
     6c6:	448a      	add	sl, r1
     6c8:	4653      	mov	r3, sl
     6ca:	781b      	ldrb	r3, [r3, #0]
     6cc:	021b      	lsls	r3, r3, #8
     6ce:	469a      	mov	sl, r3
     6d0:	23c0      	movs	r3, #192	; 0xc0
     6d2:	009b      	lsls	r3, r3, #2
     6d4:	469b      	mov	fp, r3
     6d6:	4653      	mov	r3, sl
     6d8:	465f      	mov	r7, fp
     6da:	403b      	ands	r3, r7
     6dc:	431d      	orrs	r5, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     6de:	3134      	adds	r1, #52	; 0x34
     6e0:	7809      	ldrb	r1, [r1, #0]
     6e2:	0309      	lsls	r1, r1, #12
     6e4:	23e0      	movs	r3, #224	; 0xe0
     6e6:	01db      	lsls	r3, r3, #7
     6e8:	4019      	ands	r1, r3
     6ea:	430d      	orrs	r5, r1
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     6ec:	02a4      	lsls	r4, r4, #10
     6ee:	21c0      	movs	r1, #192	; 0xc0
     6f0:	0109      	lsls	r1, r1, #4
     6f2:	400c      	ands	r4, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6f4:	432c      	orrs	r4, r5
		value_buffer[i] = fault;
     6f6:	a90a      	add	r1, sp, #40	; 0x28
     6f8:	500c      	str	r4, [r1, r0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     6fa:	3201      	adds	r2, #1
     6fc:	2a01      	cmp	r2, #1
     6fe:	dc37      	bgt.n	770 <tcc_init+0x258>
		if (cfg->capture_channel >= cc_num) {
     700:	0094      	lsls	r4, r2, #2
     702:	18a4      	adds	r4, r4, r2
     704:	0061      	lsls	r1, r4, #1
     706:	1871      	adds	r1, r6, r1
     708:	3135      	adds	r1, #53	; 0x35
     70a:	780c      	ldrb	r4, [r1, #0]
     70c:	9b00      	ldr	r3, [sp, #0]
     70e:	42a3      	cmp	r3, r4
     710:	d93e      	bls.n	790 <tcc_init+0x278>
		if (cfg->filter_value > 0xF) {
     712:	0095      	lsls	r5, r2, #2
     714:	18ad      	adds	r5, r5, r2
     716:	0069      	lsls	r1, r5, #1
     718:	1871      	adds	r1, r6, r1
     71a:	312c      	adds	r1, #44	; 0x2c
     71c:	7809      	ldrb	r1, [r1, #0]
     71e:	290f      	cmp	r1, #15
     720:	d83b      	bhi.n	79a <tcc_init+0x282>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     722:	0609      	lsls	r1, r1, #24
     724:	20f0      	movs	r0, #240	; 0xf0
     726:	0500      	lsls	r0, r0, #20
     728:	4008      	ands	r0, r1
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     72a:	0095      	lsls	r5, r2, #2
     72c:	18ad      	adds	r5, r5, r2
     72e:	0069      	lsls	r1, r5, #1
     730:	1871      	adds	r1, r6, r1
     732:	000d      	movs	r5, r1
     734:	352d      	adds	r5, #45	; 0x2d
     736:	782d      	ldrb	r5, [r5, #0]
     738:	042d      	lsls	r5, r5, #16
     73a:	4305      	orrs	r5, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     73c:	312e      	adds	r1, #46	; 0x2e
     73e:	7809      	ldrb	r1, [r1, #0]
     740:	2900      	cmp	r1, #0
     742:	d09f      	beq.n	684 <tcc_init+0x16c>
     744:	2180      	movs	r1, #128	; 0x80
     746:	430d      	orrs	r5, r1
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     748:	0090      	lsls	r0, r2, #2
     74a:	1880      	adds	r0, r0, r2
     74c:	0041      	lsls	r1, r0, #1
     74e:	1871      	adds	r1, r6, r1
     750:	312f      	adds	r1, #47	; 0x2f
     752:	7809      	ldrb	r1, [r1, #0]
     754:	2900      	cmp	r1, #0
     756:	d097      	beq.n	688 <tcc_init+0x170>
     758:	2108      	movs	r1, #8
     75a:	430d      	orrs	r5, r1
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     75c:	0090      	lsls	r0, r2, #2
     75e:	1880      	adds	r0, r0, r2
     760:	0041      	lsls	r1, r0, #1
     762:	1871      	adds	r1, r6, r1
     764:	3130      	adds	r1, #48	; 0x30
     766:	7809      	ldrb	r1, [r1, #0]
     768:	2900      	cmp	r1, #0
     76a:	d08f      	beq.n	68c <tcc_init+0x174>
     76c:	2110      	movs	r1, #16
     76e:	e78e      	b.n	68e <tcc_init+0x176>
     770:	9d05      	ldr	r5, [sp, #20]
     772:	4667      	mov	r7, ip
     774:	4644      	mov	r4, r8
     776:	9803      	ldr	r0, [sp, #12]
	if (STATUS_OK != status) {
     778:	2d00      	cmp	r5, #0
     77a:	d000      	beq.n	77e <tcc_init+0x266>
     77c:	e6ec      	b.n	558 <tcc_init+0x40>
	uint8_t ow_num = _tcc_ow_nums[module_index];
     77e:	4b35      	ldr	r3, [pc, #212]	; (854 <tcc_init+0x33c>)
     780:	58e3      	ldr	r3, [r4, r3]
     782:	9300      	str	r3, [sp, #0]
     784:	5c19      	ldrb	r1, [r3, r0]
	drvctrl = 0;
     786:	2300      	movs	r3, #0
     788:	46a4      	mov	ip, r4
     78a:	000c      	movs	r4, r1
     78c:	0019      	movs	r1, r3
     78e:	e00e      	b.n	7ae <tcc_init+0x296>
     790:	4667      	mov	r7, ip
     792:	4644      	mov	r4, r8
     794:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
     796:	2517      	movs	r5, #23
     798:	e7ee      	b.n	778 <tcc_init+0x260>
     79a:	4667      	mov	r7, ip
     79c:	4644      	mov	r4, r8
     79e:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
     7a0:	2517      	movs	r5, #23
     7a2:	e7e9      	b.n	778 <tcc_init+0x260>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     7a4:	2202      	movs	r2, #2
     7a6:	32ff      	adds	r2, #255	; 0xff
     7a8:	409a      	lsls	r2, r3
     7aa:	4311      	orrs	r1, r2
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     7ac:	3301      	adds	r3, #1
     7ae:	2b07      	cmp	r3, #7
     7b0:	d819      	bhi.n	7e6 <tcc_init+0x2ce>
		if (config->wave_ext.invert[i]) {
     7b2:	18f2      	adds	r2, r6, r3
     7b4:	3250      	adds	r2, #80	; 0x50
     7b6:	7812      	ldrb	r2, [r2, #0]
     7b8:	2a00      	cmp	r2, #0
     7ba:	d005      	beq.n	7c8 <tcc_init+0x2b0>
			if (i >= ow_num) {
     7bc:	42a3      	cmp	r3, r4
     7be:	d226      	bcs.n	80e <tcc_init+0x2f6>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     7c0:	2280      	movs	r2, #128	; 0x80
     7c2:	0252      	lsls	r2, r2, #9
     7c4:	409a      	lsls	r2, r3
     7c6:	4311      	orrs	r1, r2
		if (config->wave_ext.non_recoverable_fault[i].output !=
     7c8:	001a      	movs	r2, r3
     7ca:	321c      	adds	r2, #28
     7cc:	0052      	lsls	r2, r2, #1
     7ce:	18b2      	adds	r2, r6, r2
     7d0:	7a52      	ldrb	r2, [r2, #9]
     7d2:	2a00      	cmp	r2, #0
     7d4:	d0ea      	beq.n	7ac <tcc_init+0x294>
			if (i >= ow_num) {
     7d6:	42a3      	cmp	r3, r4
     7d8:	d21e      	bcs.n	818 <tcc_init+0x300>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     7da:	2a02      	cmp	r2, #2
     7dc:	d0e2      	beq.n	7a4 <tcc_init+0x28c>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     7de:	2201      	movs	r2, #1
     7e0:	409a      	lsls	r2, r3
     7e2:	4311      	orrs	r1, r2
     7e4:	e7e2      	b.n	7ac <tcc_init+0x294>
     7e6:	4689      	mov	r9, r1
     7e8:	4664      	mov	r4, ip
	if (STATUS_OK != status) {
     7ea:	2d00      	cmp	r5, #0
     7ec:	d000      	beq.n	7f0 <tcc_init+0x2d8>
     7ee:	e6b3      	b.n	558 <tcc_init+0x40>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     7f0:	4b19      	ldr	r3, [pc, #100]	; (858 <tcc_init+0x340>)
     7f2:	58e3      	ldr	r3, [r4, r3]
     7f4:	9300      	str	r3, [sp, #0]
     7f6:	5c1b      	ldrb	r3, [r3, r0]
     7f8:	469b      	mov	fp, r3
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     7fa:	7e73      	ldrb	r3, [r6, #25]
     7fc:	011b      	lsls	r3, r3, #4
     7fe:	2230      	movs	r2, #48	; 0x30
     800:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     802:	7e31      	ldrb	r1, [r6, #24]
     804:	2307      	movs	r3, #7
     806:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     808:	431a      	orrs	r2, r3
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     80a:	2300      	movs	r3, #0
     80c:	e00a      	b.n	824 <tcc_init+0x30c>
     80e:	4664      	mov	r4, ip
	uint32_t drvctrl = 0;
     810:	2300      	movs	r3, #0
     812:	4699      	mov	r9, r3
				return STATUS_ERR_INVALID_ARG;
     814:	2517      	movs	r5, #23
     816:	e7e8      	b.n	7ea <tcc_init+0x2d2>
     818:	4664      	mov	r4, ip
	uint32_t drvctrl = 0;
     81a:	2300      	movs	r3, #0
     81c:	4699      	mov	r9, r3
				return STATUS_ERR_INVALID_ARG;
     81e:	2517      	movs	r5, #23
     820:	e7e3      	b.n	7ea <tcc_init+0x2d2>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     822:	3301      	adds	r3, #1
     824:	2b03      	cmp	r3, #3
     826:	dc19      	bgt.n	85c <tcc_init+0x344>
		if (wav_cfg->wave_polarity[n]) {
     828:	18f1      	adds	r1, r6, r3
     82a:	7d09      	ldrb	r1, [r1, #20]
     82c:	2900      	cmp	r1, #0
     82e:	d0f8      	beq.n	822 <tcc_init+0x30a>
			if (n >= cc_num) {
     830:	455b      	cmp	r3, fp
     832:	da1c      	bge.n	86e <tcc_init+0x356>
			wave |= (TCC_WAVE_POL0 << n);
     834:	2180      	movs	r1, #128	; 0x80
     836:	0249      	lsls	r1, r1, #9
     838:	4099      	lsls	r1, r3
     83a:	430a      	orrs	r2, r1
     83c:	e7f1      	b.n	822 <tcc_init+0x30a>
     83e:	46c0      	nop			; (mov r8, r8)
     840:	0001245e 	.word	0x0001245e
     844:	00000088 	.word	0x00000088
     848:	00000468 	.word	0x00000468
     84c:	40000400 	.word	0x40000400
     850:	00000438 	.word	0x00000438
     854:	00000200 	.word	0x00000200
     858:	00000494 	.word	0x00000494
	value_buffer[0] = wave;
     85c:	9207      	str	r2, [sp, #28]
	if (STATUS_OK != status) {
     85e:	2d00      	cmp	r5, #0
     860:	d000      	beq.n	864 <tcc_init+0x34c>
     862:	e679      	b.n	558 <tcc_init+0x40>
     864:	2300      	movs	r3, #0
     866:	46a4      	mov	ip, r4
     868:	0004      	movs	r4, r0
     86a:	9802      	ldr	r0, [sp, #8]
     86c:	e006      	b.n	87c <tcc_init+0x364>
				return STATUS_ERR_INVALID_ARG;
     86e:	2517      	movs	r5, #23
     870:	e7f5      	b.n	85e <tcc_init+0x346>
		module_inst->callback[i] = NULL;
     872:	009a      	lsls	r2, r3, #2
     874:	1882      	adds	r2, r0, r2
     876:	2100      	movs	r1, #0
     878:	6051      	str	r1, [r2, #4]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     87a:	3301      	adds	r3, #1
     87c:	2b0b      	cmp	r3, #11
     87e:	ddf8      	ble.n	872 <tcc_init+0x35a>
     880:	0020      	movs	r0, r4
     882:	4664      	mov	r4, ip
	module_inst->register_callback_mask = 0;
     884:	2300      	movs	r3, #0
     886:	469a      	mov	sl, r3
     888:	9b02      	ldr	r3, [sp, #8]
     88a:	4652      	mov	r2, sl
     88c:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     88e:	001a      	movs	r2, r3
     890:	4651      	mov	r1, sl
     892:	6399      	str	r1, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     894:	4b3f      	ldr	r3, [pc, #252]	; (994 <tcc_init+0x47c>)
     896:	58e3      	ldr	r3, [r4, r3]
     898:	9300      	str	r3, [sp, #0]
     89a:	0083      	lsls	r3, r0, #2
     89c:	9900      	ldr	r1, [sp, #0]
     89e:	505a      	str	r2, [r3, r1]
	module_inst->hw = hw;
     8a0:	0011      	movs	r1, r2
     8a2:	6017      	str	r7, [r2, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     8a4:	23a0      	movs	r3, #160	; 0xa0
     8a6:	5cf2      	ldrb	r2, [r6, r3]
     8a8:	3b64      	subs	r3, #100	; 0x64
     8aa:	54ca      	strb	r2, [r1, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
     8ac:	7ab3      	ldrb	r3, [r6, #10]
     8ae:	a909      	add	r1, sp, #36	; 0x24
     8b0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     8b2:	4b39      	ldr	r3, [pc, #228]	; (998 <tcc_init+0x480>)
     8b4:	58e3      	ldr	r3, [r4, r3]
     8b6:	5c1b      	ldrb	r3, [r3, r0]
     8b8:	9300      	str	r3, [sp, #0]
     8ba:	0018      	movs	r0, r3
     8bc:	4b37      	ldr	r3, [pc, #220]	; (99c <tcc_init+0x484>)
     8be:	58e2      	ldr	r2, [r4, r3]
     8c0:	9202      	str	r2, [sp, #8]
     8c2:	4790      	blx	r2
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     8c4:	9800      	ldr	r0, [sp, #0]
     8c6:	4b36      	ldr	r3, [pc, #216]	; (9a0 <tcc_init+0x488>)
     8c8:	58e3      	ldr	r3, [r4, r3]
     8ca:	9300      	str	r3, [sp, #0]
     8cc:	4798      	blx	r3
     8ce:	9502      	str	r5, [sp, #8]
     8d0:	4655      	mov	r5, sl
     8d2:	46ba      	mov	sl, r7
     8d4:	0027      	movs	r7, r4
     8d6:	9c01      	ldr	r4, [sp, #4]
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     8d8:	e000      	b.n	8dc <tcc_init+0x3c4>
     8da:	3501      	adds	r5, #1
     8dc:	4b31      	ldr	r3, [pc, #196]	; (9a4 <tcc_init+0x48c>)
     8de:	58fb      	ldr	r3, [r7, r3]
     8e0:	9300      	str	r3, [sp, #0]
     8e2:	5d1b      	ldrb	r3, [r3, r4]
     8e4:	429d      	cmp	r5, r3
     8e6:	da18      	bge.n	91a <tcc_init+0x402>
		if (!config->pins.enable_wave_out_pin[i]) {
     8e8:	1973      	adds	r3, r6, r5
     8ea:	3398      	adds	r3, #152	; 0x98
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	2b00      	cmp	r3, #0
     8f0:	d0f3      	beq.n	8da <tcc_init+0x3c2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8f2:	2201      	movs	r2, #1
     8f4:	a908      	add	r1, sp, #32
     8f6:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     8f8:	2300      	movs	r3, #0
     8fa:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     8fc:	002b      	movs	r3, r5
     8fe:	331e      	adds	r3, #30
     900:	009b      	lsls	r3, r3, #2
     902:	599b      	ldr	r3, [r3, r6]
     904:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     906:	704a      	strb	r2, [r1, #1]
				config->pins.wave_out_pin[i], &pin_config);
     908:	002b      	movs	r3, r5
     90a:	3316      	adds	r3, #22
     90c:	009b      	lsls	r3, r3, #2
		system_pinmux_pin_set_config(
     90e:	5cf0      	ldrb	r0, [r6, r3]
     910:	4b25      	ldr	r3, [pc, #148]	; (9a8 <tcc_init+0x490>)
     912:	58fb      	ldr	r3, [r7, r3]
     914:	9300      	str	r3, [sp, #0]
     916:	4798      	blx	r3
     918:	e7df      	b.n	8da <tcc_init+0x3c2>
     91a:	9d02      	ldr	r5, [sp, #8]
     91c:	4657      	mov	r7, sl
	hw->CTRLA.reg = ctrla;
     91e:	9b04      	ldr	r3, [sp, #16]
     920:	603b      	str	r3, [r7, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     922:	68bb      	ldr	r3, [r7, #8]
     924:	075b      	lsls	r3, r3, #29
     926:	d4fc      	bmi.n	922 <tcc_init+0x40a>
	hw->CTRLBCLR.reg = 0xFF;
     928:	23ff      	movs	r3, #255	; 0xff
     92a:	713b      	strb	r3, [r7, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     92c:	68bb      	ldr	r3, [r7, #8]
     92e:	075b      	lsls	r3, r3, #29
     930:	d4fc      	bmi.n	92c <tcc_init+0x414>
	hw->CTRLBSET.reg = ctrlb;
     932:	466b      	mov	r3, sp
     934:	7e1b      	ldrb	r3, [r3, #24]
     936:	717b      	strb	r3, [r7, #5]
	hw->FCTRLA.reg = faults[0];
     938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     93a:	60fb      	str	r3, [r7, #12]
	hw->FCTRLB.reg = faults[1];
     93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     93e:	613b      	str	r3, [r7, #16]
	hw->DRVCTRL.reg = drvctrl;
     940:	464b      	mov	r3, r9
     942:	61bb      	str	r3, [r7, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     944:	68ba      	ldr	r2, [r7, #8]
     946:	4b19      	ldr	r3, [pc, #100]	; (9ac <tcc_init+0x494>)
     948:	421a      	tst	r2, r3
     94a:	d1fb      	bne.n	944 <tcc_init+0x42c>
	hw->WAVE.reg = waves[0];
     94c:	9b07      	ldr	r3, [sp, #28]
     94e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     950:	68bb      	ldr	r3, [r7, #8]
     952:	06db      	lsls	r3, r3, #27
     954:	d4fc      	bmi.n	950 <tcc_init+0x438>
	hw->COUNT.reg = config->counter.count;
     956:	6833      	ldr	r3, [r6, #0]
     958:	637b      	str	r3, [r7, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     95a:	68ba      	ldr	r2, [r7, #8]
     95c:	4b14      	ldr	r3, [pc, #80]	; (9b0 <tcc_init+0x498>)
     95e:	421a      	tst	r2, r3
     960:	d1fb      	bne.n	95a <tcc_init+0x442>
	hw->PER.reg = (config->counter.period);
     962:	6873      	ldr	r3, [r6, #4]
     964:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     966:	2100      	movs	r1, #0
     968:	4658      	mov	r0, fp
     96a:	e00e      	b.n	98a <tcc_init+0x472>
		while (hw->SYNCBUSY.reg & (
     96c:	68ba      	ldr	r2, [r7, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     96e:	4b11      	ldr	r3, [pc, #68]	; (9b4 <tcc_init+0x49c>)
     970:	408b      	lsls	r3, r1
		while (hw->SYNCBUSY.reg & (
     972:	4213      	tst	r3, r2
     974:	d1fa      	bne.n	96c <tcc_init+0x454>
		hw->CC[i].reg = (config->compare.match[i]);
     976:	1d8b      	adds	r3, r1, #6
     978:	009b      	lsls	r3, r3, #2
     97a:	18f3      	adds	r3, r6, r3
     97c:	685a      	ldr	r2, [r3, #4]
     97e:	000b      	movs	r3, r1
     980:	3310      	adds	r3, #16
     982:	009b      	lsls	r3, r3, #2
     984:	18fb      	adds	r3, r7, r3
     986:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     988:	3101      	adds	r1, #1
     98a:	4281      	cmp	r1, r0
     98c:	dbee      	blt.n	96c <tcc_init+0x454>
     98e:	e5e3      	b.n	558 <tcc_init+0x40>
			return STATUS_ERR_INVALID_ARG;
     990:	2517      	movs	r5, #23
     992:	e5e1      	b.n	558 <tcc_init+0x40>
     994:	0000001c 	.word	0x0000001c
     998:	0000049c 	.word	0x0000049c
     99c:	00000114 	.word	0x00000114
     9a0:	00000380 	.word	0x00000380
     9a4:	00000200 	.word	0x00000200
     9a8:	0000046c 	.word	0x0000046c
     9ac:	00020040 	.word	0x00020040
     9b0:	00040080 	.word	0x00040080
     9b4:	00080100 	.word	0x00080100

000009b8 <_tcc_interrupt_get_interrupt_vector>:
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     9b8:	4b01      	ldr	r3, [pc, #4]	; (9c0 <_tcc_interrupt_get_interrupt_vector+0x8>)
     9ba:	447b      	add	r3, pc
     9bc:	5618      	ldrsb	r0, [r3, r0]
}
     9be:	4770      	bx	lr
     9c0:	0001080e 	.word	0x0001080e

000009c4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
     9c4:	b510      	push	{r4, lr}
     9c6:	b082      	sub	sp, #8
     9c8:	4b07      	ldr	r3, [pc, #28]	; (9e8 <tcc_register_callback+0x24>)
     9ca:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     9cc:	0092      	lsls	r2, r2, #2
     9ce:	1884      	adds	r4, r0, r2
     9d0:	6061      	str	r1, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     9d2:	4906      	ldr	r1, [pc, #24]	; (9ec <tcc_register_callback+0x28>)
     9d4:	585b      	ldr	r3, [r3, r1]
     9d6:	9301      	str	r3, [sp, #4]
     9d8:	58d3      	ldr	r3, [r2, r3]
     9da:	6b42      	ldr	r2, [r0, #52]	; 0x34
     9dc:	4313      	orrs	r3, r2
     9de:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     9e0:	2000      	movs	r0, #0
     9e2:	b002      	add	sp, #8
     9e4:	bd10      	pop	{r4, pc}
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00011fc2 	.word	0x00011fc2
     9ec:	00000074 	.word	0x00000074

000009f0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     9f0:	b570      	push	{r4, r5, r6, lr}
     9f2:	b082      	sub	sp, #8
     9f4:	0004      	movs	r4, r0
     9f6:	000d      	movs	r5, r1
     9f8:	4e0d      	ldr	r6, [pc, #52]	; (a30 <tcc_enable_callback+0x40>)
     9fa:	447e      	add	r6, pc
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     9fc:	6800      	ldr	r0, [r0, #0]
     9fe:	4b0d      	ldr	r3, [pc, #52]	; (a34 <tcc_enable_callback+0x44>)
     a00:	58f3      	ldr	r3, [r6, r3]
     a02:	9301      	str	r3, [sp, #4]
     a04:	4798      	blx	r3
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
     a06:	4b0c      	ldr	r3, [pc, #48]	; (a38 <tcc_enable_callback+0x48>)
     a08:	447b      	add	r3, pc
     a0a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a0c:	231f      	movs	r3, #31
     a0e:	4018      	ands	r0, r3
     a10:	3b1e      	subs	r3, #30
     a12:	4083      	lsls	r3, r0
     a14:	4a09      	ldr	r2, [pc, #36]	; (a3c <tcc_enable_callback+0x4c>)
     a16:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     a18:	4b09      	ldr	r3, [pc, #36]	; (a40 <tcc_enable_callback+0x50>)
     a1a:	58f3      	ldr	r3, [r6, r3]
     a1c:	9301      	str	r3, [sp, #4]
     a1e:	00ad      	lsls	r5, r5, #2
     a20:	58ea      	ldr	r2, [r5, r3]
     a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a24:	4313      	orrs	r3, r2
     a26:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     a28:	6823      	ldr	r3, [r4, #0]
     a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
     a2c:	b002      	add	sp, #8
     a2e:	bd70      	pop	{r4, r5, r6, pc}
     a30:	00011f92 	.word	0x00011f92
     a34:	00000088 	.word	0x00000088
     a38:	ffffffad 	.word	0xffffffad
     a3c:	e000e100 	.word	0xe000e100
     a40:	00000074 	.word	0x00000074

00000a44 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	46c6      	mov	lr, r8
     a48:	b500      	push	{lr}
     a4a:	b082      	sub	sp, #8
     a4c:	4f14      	ldr	r7, [pc, #80]	; (aa0 <_tcc_interrupt_handler+0x5c>)
     a4e:	447f      	add	r7, pc
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     a50:	4b14      	ldr	r3, [pc, #80]	; (aa4 <_tcc_interrupt_handler+0x60>)
     a52:	58fb      	ldr	r3, [r7, r3]
     a54:	9301      	str	r3, [sp, #4]
     a56:	0080      	lsls	r0, r0, #2
     a58:	58c3      	ldr	r3, [r0, r3]
     a5a:	4698      	mov	r8, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     a60:	4643      	mov	r3, r8
     a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     a64:	401e      	ands	r6, r3
     a66:	4643      	mov	r3, r8
     a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     a6a:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     a6c:	2400      	movs	r4, #0
     a6e:	e000      	b.n	a72 <_tcc_interrupt_handler+0x2e>
     a70:	3401      	adds	r4, #1
     a72:	2c0b      	cmp	r4, #11
     a74:	dc0f      	bgt.n	a96 <_tcc_interrupt_handler+0x52>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <_tcc_interrupt_handler+0x64>)
     a78:	58fb      	ldr	r3, [r7, r3]
     a7a:	9301      	str	r3, [sp, #4]
     a7c:	00a3      	lsls	r3, r4, #2
     a7e:	9a01      	ldr	r2, [sp, #4]
     a80:	589d      	ldr	r5, [r3, r2]
     a82:	4235      	tst	r5, r6
     a84:	d0f4      	beq.n	a70 <_tcc_interrupt_handler+0x2c>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     a86:	4443      	add	r3, r8
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	4640      	mov	r0, r8
     a8c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     a8e:	4643      	mov	r3, r8
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	62dd      	str	r5, [r3, #44]	; 0x2c
     a94:	e7ec      	b.n	a70 <_tcc_interrupt_handler+0x2c>
		}
	}
}
     a96:	b002      	add	sp, #8
     a98:	bc04      	pop	{r2}
     a9a:	4690      	mov	r8, r2
     a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	00011f3e 	.word	0x00011f3e
     aa4:	0000001c 	.word	0x0000001c
     aa8:	00000074 	.word	0x00000074

00000aac <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     aac:	b500      	push	{lr}
     aae:	b083      	sub	sp, #12
     ab0:	4b04      	ldr	r3, [pc, #16]	; (ac4 <TCC0_Handler+0x18>)
     ab2:	447b      	add	r3, pc
     ab4:	2000      	movs	r0, #0
     ab6:	4a04      	ldr	r2, [pc, #16]	; (ac8 <TCC0_Handler+0x1c>)
     ab8:	589b      	ldr	r3, [r3, r2]
     aba:	9301      	str	r3, [sp, #4]
     abc:	4798      	blx	r3
     abe:	b003      	add	sp, #12
     ac0:	bd00      	pop	{pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	00011eda 	.word	0x00011eda
     ac8:	00000094 	.word	0x00000094

00000acc <TCC1_Handler>:
     acc:	b500      	push	{lr}
     ace:	b083      	sub	sp, #12
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <TCC1_Handler+0x18>)
     ad2:	447b      	add	r3, pc
     ad4:	2001      	movs	r0, #1
     ad6:	4a04      	ldr	r2, [pc, #16]	; (ae8 <TCC1_Handler+0x1c>)
     ad8:	589b      	ldr	r3, [r3, r2]
     ada:	9301      	str	r3, [sp, #4]
     adc:	4798      	blx	r3
     ade:	b003      	add	sp, #12
     ae0:	bd00      	pop	{pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00011eba 	.word	0x00011eba
     ae8:	00000094 	.word	0x00000094

00000aec <TCC2_Handler>:
     aec:	b500      	push	{lr}
     aee:	b083      	sub	sp, #12
     af0:	4b04      	ldr	r3, [pc, #16]	; (b04 <TCC2_Handler+0x18>)
     af2:	447b      	add	r3, pc
     af4:	2002      	movs	r0, #2
     af6:	4a04      	ldr	r2, [pc, #16]	; (b08 <TCC2_Handler+0x1c>)
     af8:	589b      	ldr	r3, [r3, r2]
     afa:	9301      	str	r3, [sp, #4]
     afc:	4798      	blx	r3
     afe:	b003      	add	sp, #12
     b00:	bd00      	pop	{pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00011e9a 	.word	0x00011e9a
     b08:	00000094 	.word	0x00000094

00000b0c <_is_ip>:
	_http_client_clear_conn(module_inst, -ETIME);
}

static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
     b0c:	2100      	movs	r1, #0
	char ch;

	while (*host != '\0') {
     b0e:	e004      	b.n	b1a <_is_ip+0xe>
		ch = *host++;
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
			isv6 = 1;
		} else if (ch == '.') {
			if (isv6) {
     b10:	2900      	cmp	r1, #0
     b12:	d002      	beq.n	b1a <_is_ip+0xe>
				return 0;
     b14:	2000      	movs	r0, #0
     b16:	e021      	b.n	b5c <_is_ip+0x50>
			isv6 = 1;
     b18:	2101      	movs	r1, #1
	while (*host != '\0') {
     b1a:	7803      	ldrb	r3, [r0, #0]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d01c      	beq.n	b5a <_is_ip+0x4e>
		ch = *host++;
     b20:	3001      	adds	r0, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
     b22:	001a      	movs	r2, r3
     b24:	3a61      	subs	r2, #97	; 0x61
     b26:	b2d2      	uxtb	r2, r2
     b28:	2a05      	cmp	r2, #5
     b2a:	d9f5      	bls.n	b18 <_is_ip+0xc>
     b2c:	001a      	movs	r2, r3
     b2e:	3a41      	subs	r2, #65	; 0x41
     b30:	b2d2      	uxtb	r2, r2
     b32:	2a05      	cmp	r2, #5
     b34:	d90b      	bls.n	b4e <_is_ip+0x42>
     b36:	2b3a      	cmp	r3, #58	; 0x3a
     b38:	d00b      	beq.n	b52 <_is_ip+0x46>
     b3a:	2b2f      	cmp	r3, #47	; 0x2f
     b3c:	d00b      	beq.n	b56 <_is_ip+0x4a>
		} else if (ch == '.') {
     b3e:	2b2e      	cmp	r3, #46	; 0x2e
     b40:	d0e6      	beq.n	b10 <_is_ip+0x4>
			}
		} else if ((ch & 0x30) != 0x30) {
     b42:	2230      	movs	r2, #48	; 0x30
     b44:	4013      	ands	r3, r2
     b46:	2b30      	cmp	r3, #48	; 0x30
     b48:	d0e7      	beq.n	b1a <_is_ip+0xe>
			return 0;
     b4a:	2000      	movs	r0, #0
     b4c:	e006      	b.n	b5c <_is_ip+0x50>
			isv6 = 1;
     b4e:	2101      	movs	r1, #1
     b50:	e7e3      	b.n	b1a <_is_ip+0xe>
     b52:	2101      	movs	r1, #1
     b54:	e7e1      	b.n	b1a <_is_ip+0xe>
     b56:	2101      	movs	r1, #1
     b58:	e7df      	b.n	b1a <_is_ip+0xe>
		}
	}
	return 1;
     b5a:	2001      	movs	r0, #1
}
     b5c:	4770      	bx	lr
	...

00000b60 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
     b60:	b570      	push	{r4, r5, r6, lr}
     b62:	b082      	sub	sp, #8
     b64:	0004      	movs	r4, r0
     b66:	4d16      	ldr	r5, [pc, #88]	; (bc0 <_http_client_send_wait+0x60>)
     b68:	447d      	add	r5, pc
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
     b6a:	2041      	movs	r0, #65	; 0x41
     b6c:	5c23      	ldrb	r3, [r4, r0]
     b6e:	2601      	movs	r6, #1
     b70:	4333      	orrs	r3, r6
     b72:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
     b74:	b292      	uxth	r2, r2
     b76:	2000      	movs	r0, #0
     b78:	5620      	ldrsb	r0, [r4, r0]
     b7a:	2300      	movs	r3, #0
     b7c:	4e11      	ldr	r6, [pc, #68]	; (bc4 <_http_client_send_wait+0x64>)
     b7e:	59ae      	ldr	r6, [r5, r6]
     b80:	9601      	str	r6, [sp, #4]
     b82:	47b0      	blx	r6
     b84:	2800      	cmp	r0, #0
     b86:	da0f      	bge.n	ba8 <_http_client_send_wait+0x48>
		module->sending = 0;
     b88:	2241      	movs	r2, #65	; 0x41
     b8a:	5ca3      	ldrb	r3, [r4, r2]
     b8c:	2101      	movs	r1, #1
     b8e:	438b      	bics	r3, r1
     b90:	54a3      	strb	r3, [r4, r2]
		return result;
     b92:	e013      	b.n	bbc <_http_client_send_wait+0x5c>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
     b94:	2000      	movs	r0, #0
     b96:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <_http_client_send_wait+0x68>)
     b98:	58eb      	ldr	r3, [r5, r3]
     b9a:	9301      	str	r3, [sp, #4]
     b9c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
     b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
     ba0:	4b0a      	ldr	r3, [pc, #40]	; (bcc <_http_client_send_wait+0x6c>)
     ba2:	58eb      	ldr	r3, [r5, r3]
     ba4:	9301      	str	r3, [sp, #4]
     ba6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
     ba8:	2341      	movs	r3, #65	; 0x41
     baa:	5ce3      	ldrb	r3, [r4, r3]
     bac:	07db      	lsls	r3, r3, #31
     bae:	d504      	bpl.n	bba <_http_client_send_wait+0x5a>
     bb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     bb2:	2b02      	cmp	r3, #2
     bb4:	d8ee      	bhi.n	b94 <_http_client_send_wait+0x34>
	}

	return 0;
     bb6:	2000      	movs	r0, #0
     bb8:	e000      	b.n	bbc <_http_client_send_wait+0x5c>
     bba:	2000      	movs	r0, #0
}
     bbc:	b002      	add	sp, #8
     bbe:	bd70      	pop	{r4, r5, r6, pc}
     bc0:	00011e24 	.word	0x00011e24
     bc4:	00000198 	.word	0x00000198
     bc8:	00000300 	.word	0x00000300
     bcc:	00000248 	.word	0x00000248

00000bd0 <http_client_get_config_defaults>:
	config->port = 80;
     bd0:	2350      	movs	r3, #80	; 0x50
     bd2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
     bd4:	2300      	movs	r3, #0
     bd6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
     bd8:	4a06      	ldr	r2, [pc, #24]	; (bf4 <http_client_get_config_defaults+0x24>)
     bda:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
     bdc:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
     bde:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
     be0:	3301      	adds	r3, #1
     be2:	33ff      	adds	r3, #255	; 0xff
     be4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
     be6:	3bae      	subs	r3, #174	; 0xae
     be8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
     bea:	4b03      	ldr	r3, [pc, #12]	; (bf8 <http_client_get_config_defaults+0x28>)
     bec:	447b      	add	r3, pc
     bee:	6183      	str	r3, [r0, #24]
}
     bf0:	4770      	bx	lr
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00004e20 	.word	0x00004e20
     bf8:	000106f8 	.word	0x000106f8

00000bfc <http_client_init>:
{
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	b082      	sub	sp, #8
     c00:	0004      	movs	r4, r0
     c02:	000d      	movs	r5, r1
     c04:	4e2d      	ldr	r6, [pc, #180]	; (cbc <http_client_init+0xc0>)
     c06:	447e      	add	r6, pc
	if (module == NULL || config == NULL) {
     c08:	2800      	cmp	r0, #0
     c0a:	d044      	beq.n	c96 <http_client_init+0x9a>
     c0c:	2900      	cmp	r1, #0
     c0e:	d045      	beq.n	c9c <http_client_init+0xa0>
	if (config->recv_buffer_size == 0) {
     c10:	690b      	ldr	r3, [r1, #16]
     c12:	2b00      	cmp	r3, #0
     c14:	d045      	beq.n	ca2 <http_client_init+0xa6>
	if (config->timer_inst == NULL) {
     c16:	684b      	ldr	r3, [r1, #4]
     c18:	2b00      	cmp	r3, #0
     c1a:	d045      	beq.n	ca8 <http_client_init+0xac>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
     c1c:	694b      	ldr	r3, [r1, #20]
     c1e:	2b51      	cmp	r3, #81	; 0x51
     c20:	d945      	bls.n	cae <http_client_init+0xb2>
	memset(module, 0, sizeof(struct http_client_module));
     c22:	22e8      	movs	r2, #232	; 0xe8
     c24:	2100      	movs	r1, #0
     c26:	4b26      	ldr	r3, [pc, #152]	; (cc0 <http_client_init+0xc4>)
     c28:	58f3      	ldr	r3, [r6, r3]
     c2a:	9301      	str	r3, [sp, #4]
     c2c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
     c2e:	0020      	movs	r0, r4
     c30:	3050      	adds	r0, #80	; 0x50
     c32:	221c      	movs	r2, #28
     c34:	0029      	movs	r1, r5
     c36:	4b23      	ldr	r3, [pc, #140]	; (cc4 <http_client_init+0xc8>)
     c38:	58f3      	ldr	r3, [r6, r3]
     c3a:	9301      	str	r3, [sp, #4]
     c3c:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
     c3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     c40:	2b00      	cmp	r3, #0
     c42:	d009      	beq.n	c58 <http_client_init+0x5c>
	if (config->timeout > 0) {
     c44:	892b      	ldrh	r3, [r5, #8]
     c46:	2b00      	cmp	r3, #0
     c48:	d114      	bne.n	c74 <http_client_init+0x78>
	module->req.state = STATE_INIT;
     c4a:	2300      	movs	r3, #0
     c4c:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
     c4e:	22d8      	movs	r2, #216	; 0xd8
     c50:	50a3      	str	r3, [r4, r2]
	return 0;
     c52:	2000      	movs	r0, #0
}
     c54:	b002      	add	sp, #8
     c56:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
     c58:	6928      	ldr	r0, [r5, #16]
     c5a:	4b1b      	ldr	r3, [pc, #108]	; (cc8 <http_client_init+0xcc>)
     c5c:	58f3      	ldr	r3, [r6, r3]
     c5e:	9301      	str	r3, [sp, #4]
     c60:	4798      	blx	r3
     c62:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
     c64:	2800      	cmp	r0, #0
     c66:	d025      	beq.n	cb4 <http_client_init+0xb8>
		module->alloc_buffer = 1;
     c68:	2241      	movs	r2, #65	; 0x41
     c6a:	5ca3      	ldrb	r3, [r4, r2]
     c6c:	2104      	movs	r1, #4
     c6e:	430b      	orrs	r3, r1
     c70:	54a3      	strb	r3, [r4, r2]
     c72:	e7e7      	b.n	c44 <http_client_init+0x48>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
     c74:	4b15      	ldr	r3, [pc, #84]	; (ccc <http_client_init+0xd0>)
     c76:	58f3      	ldr	r3, [r6, r3]
     c78:	9301      	str	r3, [sp, #4]
     c7a:	6868      	ldr	r0, [r5, #4]
     c7c:	2300      	movs	r3, #0
     c7e:	0022      	movs	r2, r4
     c80:	9901      	ldr	r1, [sp, #4]
     c82:	4d13      	ldr	r5, [pc, #76]	; (cd0 <http_client_init+0xd4>)
     c84:	5975      	ldr	r5, [r6, r5]
     c86:	9501      	str	r5, [sp, #4]
     c88:	47a8      	blx	r5
     c8a:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
     c8c:	2800      	cmp	r0, #0
     c8e:	dadc      	bge.n	c4a <http_client_init+0x4e>
			return -ENOSPC;
     c90:	201c      	movs	r0, #28
     c92:	4240      	negs	r0, r0
     c94:	e7de      	b.n	c54 <http_client_init+0x58>
		return -EINVAL;
     c96:	2016      	movs	r0, #22
     c98:	4240      	negs	r0, r0
     c9a:	e7db      	b.n	c54 <http_client_init+0x58>
     c9c:	2016      	movs	r0, #22
     c9e:	4240      	negs	r0, r0
     ca0:	e7d8      	b.n	c54 <http_client_init+0x58>
		return -EINVAL;
     ca2:	2016      	movs	r0, #22
     ca4:	4240      	negs	r0, r0
     ca6:	e7d5      	b.n	c54 <http_client_init+0x58>
		return -EINVAL;
     ca8:	2016      	movs	r0, #22
     caa:	4240      	negs	r0, r0
     cac:	e7d2      	b.n	c54 <http_client_init+0x58>
		return -EINVAL;
     cae:	2016      	movs	r0, #22
     cb0:	4240      	negs	r0, r0
     cb2:	e7cf      	b.n	c54 <http_client_init+0x58>
			return -ENOMEM;
     cb4:	200c      	movs	r0, #12
     cb6:	4240      	negs	r0, r0
     cb8:	e7cc      	b.n	c54 <http_client_init+0x58>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00011d86 	.word	0x00011d86
     cc0:	00000328 	.word	0x00000328
     cc4:	000000ec 	.word	0x000000ec
     cc8:	0000011c 	.word	0x0000011c
     ccc:	000000e4 	.word	0x000000e4
     cd0:	00000150 	.word	0x00000150

00000cd4 <http_client_register_callback>:
	if (module == NULL) {
     cd4:	2800      	cmp	r0, #0
     cd6:	d002      	beq.n	cde <http_client_register_callback+0xa>
	module->cb = callback;
     cd8:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
     cda:	2000      	movs	r0, #0
}
     cdc:	4770      	bx	lr
		return -EINVAL;
     cde:	2016      	movs	r0, #22
     ce0:	4240      	negs	r0, r0
     ce2:	e7fb      	b.n	cdc <http_client_register_callback+0x8>

00000ce4 <_http_client_clear_conn>:
{
     ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce6:	b087      	sub	sp, #28
     ce8:	0004      	movs	r4, r0
     cea:	000f      	movs	r7, r1
     cec:	4d20      	ldr	r5, [pc, #128]	; (d70 <_http_client_clear_conn+0x8c>)
     cee:	447d      	add	r5, pc
	if (module->req.entity.close) {
     cf0:	23c0      	movs	r3, #192	; 0xc0
     cf2:	58c3      	ldr	r3, [r0, r3]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d002      	beq.n	cfe <_http_client_clear_conn+0x1a>
		module->req.entity.close(module->req.entity.priv_data);
     cf8:	22c4      	movs	r2, #196	; 0xc4
     cfa:	5880      	ldr	r0, [r0, r2]
     cfc:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
     cfe:	0020      	movs	r0, r4
     d00:	30b0      	adds	r0, #176	; 0xb0
     d02:	2218      	movs	r2, #24
     d04:	2100      	movs	r1, #0
     d06:	4b1b      	ldr	r3, [pc, #108]	; (d74 <_http_client_clear_conn+0x90>)
     d08:	58eb      	ldr	r3, [r5, r3]
     d0a:	9301      	str	r3, [sp, #4]
     d0c:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
     d0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     d10:	2b00      	cmp	r3, #0
     d12:	d126      	bne.n	d62 <_http_client_clear_conn+0x7e>
	module_ref_inst[module->sock] = NULL;
     d14:	2300      	movs	r3, #0
     d16:	56e3      	ldrsb	r3, [r4, r3]
     d18:	009b      	lsls	r3, r3, #2
     d1a:	2600      	movs	r6, #0
     d1c:	4a16      	ldr	r2, [pc, #88]	; (d78 <_http_client_clear_conn+0x94>)
     d1e:	447a      	add	r2, pc
     d20:	509e      	str	r6, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
     d22:	0020      	movs	r0, r4
     d24:	306c      	adds	r0, #108	; 0x6c
     d26:	226c      	movs	r2, #108	; 0x6c
     d28:	2100      	movs	r1, #0
     d2a:	4b12      	ldr	r3, [pc, #72]	; (d74 <_http_client_clear_conn+0x90>)
     d2c:	58ed      	ldr	r5, [r5, r3]
     d2e:	47a8      	blx	r5
	memset(&module->resp, 0, sizeof(struct http_client_resp));
     d30:	0020      	movs	r0, r4
     d32:	30d8      	adds	r0, #216	; 0xd8
     d34:	2210      	movs	r2, #16
     d36:	2100      	movs	r1, #0
     d38:	47a8      	blx	r5
	module->req.state = STATE_INIT;
     d3a:	66e6      	str	r6, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
     d3c:	23d8      	movs	r3, #216	; 0xd8
     d3e:	50e6      	str	r6, [r4, r3]
	module->sending = 0;
     d40:	2241      	movs	r2, #65	; 0x41
     d42:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
     d44:	2101      	movs	r1, #1
     d46:	438b      	bics	r3, r1
     d48:	3101      	adds	r1, #1
     d4a:	438b      	bics	r3, r1
     d4c:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
     d4e:	9703      	str	r7, [sp, #12]
	if (module->cb) {
     d50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     d52:	2b00      	cmp	r3, #0
     d54:	d003      	beq.n	d5e <_http_client_clear_conn+0x7a>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
     d56:	aa03      	add	r2, sp, #12
     d58:	3102      	adds	r1, #2
     d5a:	0020      	movs	r0, r4
     d5c:	4798      	blx	r3
}
     d5e:	b007      	add	sp, #28
     d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
     d62:	2000      	movs	r0, #0
     d64:	5620      	ldrsb	r0, [r4, r0]
     d66:	4b05      	ldr	r3, [pc, #20]	; (d7c <_http_client_clear_conn+0x98>)
     d68:	58eb      	ldr	r3, [r5, r3]
     d6a:	9301      	str	r3, [sp, #4]
     d6c:	4798      	blx	r3
     d6e:	e7d1      	b.n	d14 <_http_client_clear_conn+0x30>
     d70:	00011c9e 	.word	0x00011c9e
     d74:	00000328 	.word	0x00000328
     d78:	1ffff6ee 	.word	0x1ffff6ee
     d7c:	000004d0 	.word	0x000004d0

00000d80 <http_client_socket_resolve_handler>:
{
     d80:	b5f0      	push	{r4, r5, r6, r7, lr}
     d82:	b087      	sub	sp, #28
     d84:	0005      	movs	r5, r0
     d86:	9101      	str	r1, [sp, #4]
     d88:	4e1b      	ldr	r6, [pc, #108]	; (df8 <http_client_socket_resolve_handler+0x78>)
     d8a:	447e      	add	r6, pc
	for (i = 0; i < TCP_SOCK_MAX; i++) {
     d8c:	2400      	movs	r4, #0
     d8e:	e013      	b.n	db8 <http_client_socket_resolve_handler+0x38>
				addr_in.sin_family = AF_INET;
     d90:	2302      	movs	r3, #2
     d92:	a902      	add	r1, sp, #8
     d94:	800b      	strh	r3, [r1, #0]
				addr_in.sin_port = _htons(module->config.port);
     d96:	334e      	adds	r3, #78	; 0x4e
     d98:	5afb      	ldrh	r3, [r7, r3]
     d9a:	021a      	lsls	r2, r3, #8
     d9c:	0a1b      	lsrs	r3, r3, #8
     d9e:	4313      	orrs	r3, r2
     da0:	804b      	strh	r3, [r1, #2]
				addr_in.sin_addr.s_addr = server_ip;
     da2:	9b01      	ldr	r3, [sp, #4]
     da4:	604b      	str	r3, [r1, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     da6:	2000      	movs	r0, #0
     da8:	5638      	ldrsb	r0, [r7, r0]
     daa:	2210      	movs	r2, #16
     dac:	4b13      	ldr	r3, [pc, #76]	; (dfc <http_client_socket_resolve_handler+0x7c>)
     dae:	58f3      	ldr	r3, [r6, r3]
     db0:	9300      	str	r3, [sp, #0]
     db2:	4798      	blx	r3
				return;
     db4:	e01d      	b.n	df2 <http_client_socket_resolve_handler+0x72>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
     db6:	3401      	adds	r4, #1
     db8:	2c06      	cmp	r4, #6
     dba:	dc1a      	bgt.n	df2 <http_client_socket_resolve_handler+0x72>
		if (module_ref_inst[i] != NULL) {
     dbc:	00a3      	lsls	r3, r4, #2
     dbe:	4a10      	ldr	r2, [pc, #64]	; (e00 <http_client_socket_resolve_handler+0x80>)
     dc0:	447a      	add	r2, pc
     dc2:	589f      	ldr	r7, [r3, r2]
     dc4:	2f00      	cmp	r7, #0
     dc6:	d0f6      	beq.n	db6 <http_client_socket_resolve_handler+0x36>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
     dc8:	1c79      	adds	r1, r7, #1
     dca:	0028      	movs	r0, r5
     dcc:	4b0d      	ldr	r3, [pc, #52]	; (e04 <http_client_socket_resolve_handler+0x84>)
     dce:	58f3      	ldr	r3, [r6, r3]
     dd0:	9300      	str	r3, [sp, #0]
     dd2:	4798      	blx	r3
     dd4:	2800      	cmp	r0, #0
     dd6:	d1ee      	bne.n	db6 <http_client_socket_resolve_handler+0x36>
     dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     dda:	2b01      	cmp	r3, #1
     ddc:	d1eb      	bne.n	db6 <http_client_socket_resolve_handler+0x36>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
     dde:	9b01      	ldr	r3, [sp, #4]
     de0:	2b00      	cmp	r3, #0
     de2:	d1d5      	bne.n	d90 <http_client_socket_resolve_handler+0x10>
					_http_client_clear_conn(module, -EHOSTUNREACH);
     de4:	2176      	movs	r1, #118	; 0x76
     de6:	4249      	negs	r1, r1
     de8:	0038      	movs	r0, r7
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <http_client_socket_resolve_handler+0x88>)
     dec:	58f3      	ldr	r3, [r6, r3]
     dee:	9300      	str	r3, [sp, #0]
     df0:	4798      	blx	r3
}
     df2:	b007      	add	sp, #28
     df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	00011c02 	.word	0x00011c02
     dfc:	00000060 	.word	0x00000060
     e00:	1ffff64c 	.word	0x1ffff64c
     e04:	00000378 	.word	0x00000378
     e08:	000004f0 	.word	0x000004f0

00000e0c <http_client_timer_callback>:
{
     e0c:	b500      	push	{lr}
     e0e:	b083      	sub	sp, #12
     e10:	4b06      	ldr	r3, [pc, #24]	; (e2c <http_client_timer_callback+0x20>)
     e12:	447b      	add	r3, pc
	if (module_inst == NULL) {
     e14:	2a00      	cmp	r2, #0
     e16:	d006      	beq.n	e26 <http_client_timer_callback+0x1a>
	_http_client_clear_conn(module_inst, -ETIME);
     e18:	213e      	movs	r1, #62	; 0x3e
     e1a:	4249      	negs	r1, r1
     e1c:	0010      	movs	r0, r2
     e1e:	4a04      	ldr	r2, [pc, #16]	; (e30 <http_client_timer_callback+0x24>)
     e20:	589b      	ldr	r3, [r3, r2]
     e22:	9301      	str	r3, [sp, #4]
     e24:	4798      	blx	r3
}
     e26:	b003      	add	sp, #12
     e28:	bd00      	pop	{pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00011b7a 	.word	0x00011b7a
     e30:	000004f0 	.word	0x000004f0

00000e34 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
     e34:	b5f0      	push	{r4, r5, r6, r7, lr}
     e36:	46de      	mov	lr, fp
     e38:	4657      	mov	r7, sl
     e3a:	464e      	mov	r6, r9
     e3c:	4645      	mov	r5, r8
     e3e:	b5e0      	push	{r5, r6, r7, lr}
     e40:	b097      	sub	sp, #92	; 0x5c
     e42:	af02      	add	r7, sp, #8
     e44:	0004      	movs	r4, r0
     e46:	4bcc      	ldr	r3, [pc, #816]	; (1178 <_http_client_request+0x344>)
     e48:	447b      	add	r3, pc
     e4a:	4698      	mov	r8, r3
     e4c:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
     e4e:	2210      	movs	r2, #16
     e50:	49ca      	ldr	r1, [pc, #808]	; (117c <_http_client_request+0x348>)
     e52:	4479      	add	r1, pc
     e54:	2310      	movs	r3, #16
     e56:	2010      	movs	r0, #16
     e58:	1838      	adds	r0, r7, r0
     e5a:	18c0      	adds	r0, r0, r3
     e5c:	4bc8      	ldr	r3, [pc, #800]	; (1180 <_http_client_request+0x34c>)
     e5e:	4645      	mov	r5, r8
     e60:	58eb      	ldr	r3, [r5, r3]
     e62:	60fb      	str	r3, [r7, #12]
     e64:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
     e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
     e68:	1dd3      	adds	r3, r2, #7
     e6a:	08db      	lsrs	r3, r3, #3
     e6c:	00db      	lsls	r3, r3, #3
     e6e:	4669      	mov	r1, sp
     e70:	1acb      	subs	r3, r1, r3
     e72:	469d      	mov	sp, r3
     e74:	ab02      	add	r3, sp, #8
     e76:	4699      	mov	r9, r3

	if (module == NULL) {
     e78:	2c00      	cmp	r4, #0
     e7a:	d100      	bne.n	e7e <_http_client_request+0x4a>
     e7c:	e253      	b.n	1326 <_http_client_request+0x4f2>
		return;
	}

	if (module->sending != 0) {
     e7e:	2341      	movs	r3, #65	; 0x41
     e80:	5ce3      	ldrb	r3, [r4, r3]
     e82:	07db      	lsls	r3, r3, #31
     e84:	d500      	bpl.n	e88 <_http_client_request+0x54>
     e86:	e24e      	b.n	1326 <_http_client_request+0x4f2>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
     e88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     e8a:	2b03      	cmp	r3, #3
     e8c:	d004      	beq.n	e98 <_http_client_request+0x64>
     e8e:	2b04      	cmp	r3, #4
     e90:	d100      	bne.n	e94 <_http_client_request+0x60>
     e92:	e149      	b.n	1128 <_http_client_request+0x2f4>
     e94:	46dd      	mov	sp, fp
     e96:	e247      	b.n	1328 <_http_client_request+0x4f4>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
     e98:	2300      	movs	r3, #0
     e9a:	21cc      	movs	r1, #204	; 0xcc
     e9c:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
     e9e:	3104      	adds	r1, #4
     ea0:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
     ea2:	4bb8      	ldr	r3, [pc, #736]	; (1184 <_http_client_request+0x350>)
     ea4:	58eb      	ldr	r3, [r5, r3]
     ea6:	60fb      	str	r3, [r7, #12]
     ea8:	9400      	str	r4, [sp, #0]
     eaa:	68fb      	ldr	r3, [r7, #12]
     eac:	4649      	mov	r1, r9
     eae:	202c      	movs	r0, #44	; 0x2c
     eb0:	2510      	movs	r5, #16
     eb2:	46ac      	mov	ip, r5
     eb4:	44bc      	add	ip, r7
     eb6:	4460      	add	r0, ip
     eb8:	4db3      	ldr	r5, [pc, #716]	; (1188 <_http_client_request+0x354>)
     eba:	4646      	mov	r6, r8
     ebc:	5975      	ldr	r5, [r6, r5]
     ebe:	60fd      	str	r5, [r7, #12]
     ec0:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
     ec2:	23c8      	movs	r3, #200	; 0xc8
     ec4:	5ce3      	ldrb	r3, [r4, r3]
     ec6:	2b01      	cmp	r3, #1
     ec8:	d100      	bne.n	ecc <_http_client_request+0x98>
     eca:	e0ad      	b.n	1028 <_http_client_request+0x1f4>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
     ecc:	2b02      	cmp	r3, #2
     ece:	d100      	bne.n	ed2 <_http_client_request+0x9e>
     ed0:	e0b6      	b.n	1040 <_http_client_request+0x20c>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
     ed2:	2b03      	cmp	r3, #3
     ed4:	d100      	bne.n	ed8 <_http_client_request+0xa4>
     ed6:	e0bf      	b.n	1058 <_http_client_request+0x224>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
     ed8:	2b04      	cmp	r3, #4
     eda:	d100      	bne.n	ede <_http_client_request+0xaa>
     edc:	e0c8      	b.n	1070 <_http_client_request+0x23c>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
     ede:	2b05      	cmp	r3, #5
     ee0:	d100      	bne.n	ee4 <_http_client_request+0xb0>
     ee2:	e0d1      	b.n	1088 <_http_client_request+0x254>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
     ee4:	2b06      	cmp	r3, #6
     ee6:	d100      	bne.n	eea <_http_client_request+0xb6>
     ee8:	e0da      	b.n	10a0 <_http_client_request+0x26c>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
     eea:	0025      	movs	r5, r4
     eec:	3570      	adds	r5, #112	; 0x70
     eee:	0028      	movs	r0, r5
     ef0:	4ba6      	ldr	r3, [pc, #664]	; (118c <_http_client_request+0x358>)
     ef2:	4642      	mov	r2, r8
     ef4:	58d3      	ldr	r3, [r2, r3]
     ef6:	60bb      	str	r3, [r7, #8]
     ef8:	4798      	blx	r3
     efa:	0002      	movs	r2, r0
     efc:	0029      	movs	r1, r5
     efe:	202c      	movs	r0, #44	; 0x2c
     f00:	4684      	mov	ip, r0
     f02:	2310      	movs	r3, #16
     f04:	469a      	mov	sl, r3
     f06:	44ba      	add	sl, r7
     f08:	44d4      	add	ip, sl
     f0a:	4663      	mov	r3, ip
     f0c:	4666      	mov	r6, ip
     f0e:	0018      	movs	r0, r3
     f10:	4b9f      	ldr	r3, [pc, #636]	; (1190 <_http_client_request+0x35c>)
     f12:	4645      	mov	r5, r8
     f14:	58ed      	ldr	r5, [r5, r3]
     f16:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
     f18:	220b      	movs	r2, #11
     f1a:	499e      	ldr	r1, [pc, #632]	; (1194 <_http_client_request+0x360>)
     f1c:	4479      	add	r1, pc
     f1e:	0030      	movs	r0, r6
     f20:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
     f22:	220c      	movs	r2, #12
     f24:	499c      	ldr	r1, [pc, #624]	; (1198 <_http_client_request+0x364>)
     f26:	4479      	add	r1, pc
     f28:	60fe      	str	r6, [r7, #12]
     f2a:	0030      	movs	r0, r6
     f2c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
     f2e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     f30:	000e      	movs	r6, r1
     f32:	0008      	movs	r0, r1
     f34:	68ba      	ldr	r2, [r7, #8]
     f36:	4790      	blx	r2
     f38:	0002      	movs	r2, r0
     f3a:	0031      	movs	r1, r6
     f3c:	68fe      	ldr	r6, [r7, #12]
     f3e:	0030      	movs	r0, r6
     f40:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     f42:	4b96      	ldr	r3, [pc, #600]	; (119c <_http_client_request+0x368>)
     f44:	447b      	add	r3, pc
     f46:	2202      	movs	r2, #2
     f48:	607b      	str	r3, [r7, #4]
     f4a:	0019      	movs	r1, r3
     f4c:	0030      	movs	r0, r6
     f4e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
     f50:	2206      	movs	r2, #6
     f52:	4993      	ldr	r1, [pc, #588]	; (11a0 <_http_client_request+0x36c>)
     f54:	4479      	add	r1, pc
     f56:	60fe      	str	r6, [r7, #12]
     f58:	0030      	movs	r0, r6
     f5a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
     f5c:	1c60      	adds	r0, r4, #1
     f5e:	0006      	movs	r6, r0
     f60:	68ba      	ldr	r2, [r7, #8]
     f62:	4790      	blx	r2
     f64:	0002      	movs	r2, r0
     f66:	0031      	movs	r1, r6
     f68:	68fe      	ldr	r6, [r7, #12]
     f6a:	0030      	movs	r0, r6
     f6c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     f6e:	2202      	movs	r2, #2
     f70:	6879      	ldr	r1, [r7, #4]
     f72:	0030      	movs	r0, r6
     f74:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
     f76:	2218      	movs	r2, #24
     f78:	498a      	ldr	r1, [pc, #552]	; (11a4 <_http_client_request+0x370>)
     f7a:	4479      	add	r1, pc
     f7c:	0030      	movs	r0, r6
     f7e:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
     f80:	2213      	movs	r2, #19
     f82:	4989      	ldr	r1, [pc, #548]	; (11a8 <_http_client_request+0x374>)
     f84:	4479      	add	r1, pc
     f86:	0030      	movs	r0, r6
     f88:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
     f8a:	2217      	movs	r2, #23
     f8c:	4987      	ldr	r1, [pc, #540]	; (11ac <_http_client_request+0x378>)
     f8e:	4479      	add	r1, pc
     f90:	0030      	movs	r0, r6
     f92:	47a8      	blx	r5

		if (entity->read != NULL) {
     f94:	0023      	movs	r3, r4
     f96:	33b0      	adds	r3, #176	; 0xb0
     f98:	68db      	ldr	r3, [r3, #12]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d100      	bne.n	fa0 <_http_client_request+0x16c>
     f9e:	e09a      	b.n	10d6 <_http_client_request+0x2a2>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
     fa0:	23b0      	movs	r3, #176	; 0xb0
     fa2:	5ce3      	ldrb	r3, [r4, r3]
     fa4:	2b00      	cmp	r3, #0
     fa6:	d000      	beq.n	faa <_http_client_request+0x176>
     fa8:	e086      	b.n	10b8 <_http_client_request+0x284>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
     faa:	0023      	movs	r3, r4
     fac:	33b0      	adds	r3, #176	; 0xb0
     fae:	689b      	ldr	r3, [r3, #8]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d100      	bne.n	fb6 <_http_client_request+0x182>
     fb4:	e08f      	b.n	10d6 <_http_client_request+0x2a2>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
     fb6:	0022      	movs	r2, r4
     fb8:	32b0      	adds	r2, #176	; 0xb0
     fba:	6950      	ldr	r0, [r2, #20]
     fbc:	4798      	blx	r3
     fbe:	23cc      	movs	r3, #204	; 0xcc
     fc0:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
     fc2:	2800      	cmp	r0, #0
     fc4:	da00      	bge.n	fc8 <_http_client_request+0x194>
     fc6:	e0d4      	b.n	1172 <_http_client_request+0x33e>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
     fc8:	0002      	movs	r2, r0
     fca:	4979      	ldr	r1, [pc, #484]	; (11b0 <_http_client_request+0x37c>)
     fcc:	4479      	add	r1, pc
     fce:	2320      	movs	r3, #32
     fd0:	469c      	mov	ip, r3
     fd2:	3b10      	subs	r3, #16
     fd4:	469a      	mov	sl, r3
     fd6:	44ba      	add	sl, r7
     fd8:	44d4      	add	ip, sl
     fda:	4663      	mov	r3, ip
     fdc:	4666      	mov	r6, ip
     fde:	0018      	movs	r0, r3
     fe0:	4b74      	ldr	r3, [pc, #464]	; (11b4 <_http_client_request+0x380>)
     fe2:	4645      	mov	r5, r8
     fe4:	58ed      	ldr	r5, [r5, r3]
     fe6:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
     fe8:	2210      	movs	r2, #16
     fea:	4973      	ldr	r1, [pc, #460]	; (11b8 <_http_client_request+0x384>)
     fec:	4479      	add	r1, pc
     fee:	202c      	movs	r0, #44	; 0x2c
     ff0:	4684      	mov	ip, r0
     ff2:	2310      	movs	r3, #16
     ff4:	469a      	mov	sl, r3
     ff6:	44ba      	add	sl, r7
     ff8:	44d4      	add	ip, sl
     ffa:	4660      	mov	r0, ip
     ffc:	60f8      	str	r0, [r7, #12]
     ffe:	4b64      	ldr	r3, [pc, #400]	; (1190 <_http_client_request+0x35c>)
    1000:	4645      	mov	r5, r8
    1002:	58ed      	ldr	r5, [r5, r3]
    1004:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    1006:	0030      	movs	r0, r6
    1008:	4b60      	ldr	r3, [pc, #384]	; (118c <_http_client_request+0x358>)
    100a:	4642      	mov	r2, r8
    100c:	58d2      	ldr	r2, [r2, r3]
    100e:	60ba      	str	r2, [r7, #8]
    1010:	4790      	blx	r2
    1012:	0002      	movs	r2, r0
    1014:	0031      	movs	r1, r6
    1016:	68fe      	ldr	r6, [r7, #12]
    1018:	0030      	movs	r0, r6
    101a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    101c:	2202      	movs	r2, #2
    101e:	4967      	ldr	r1, [pc, #412]	; (11bc <_http_client_request+0x388>)
    1020:	4479      	add	r1, pc
    1022:	0030      	movs	r0, r6
    1024:	47a8      	blx	r5
    1026:	e056      	b.n	10d6 <_http_client_request+0x2a2>
			stream_writer_send_buffer(&writer, "GET ", 4);
    1028:	2204      	movs	r2, #4
    102a:	4965      	ldr	r1, [pc, #404]	; (11c0 <_http_client_request+0x38c>)
    102c:	4479      	add	r1, pc
    102e:	332b      	adds	r3, #43	; 0x2b
    1030:	2010      	movs	r0, #16
    1032:	1838      	adds	r0, r7, r0
    1034:	18c0      	adds	r0, r0, r3
    1036:	4b56      	ldr	r3, [pc, #344]	; (1190 <_http_client_request+0x35c>)
    1038:	58f3      	ldr	r3, [r6, r3]
    103a:	60fb      	str	r3, [r7, #12]
    103c:	4798      	blx	r3
    103e:	e754      	b.n	eea <_http_client_request+0xb6>
			stream_writer_send_buffer(&writer, "POST ", 5);
    1040:	2205      	movs	r2, #5
    1042:	4960      	ldr	r1, [pc, #384]	; (11c4 <_http_client_request+0x390>)
    1044:	4479      	add	r1, pc
    1046:	332a      	adds	r3, #42	; 0x2a
    1048:	2010      	movs	r0, #16
    104a:	1838      	adds	r0, r7, r0
    104c:	18c0      	adds	r0, r0, r3
    104e:	4b50      	ldr	r3, [pc, #320]	; (1190 <_http_client_request+0x35c>)
    1050:	58f3      	ldr	r3, [r6, r3]
    1052:	60fb      	str	r3, [r7, #12]
    1054:	4798      	blx	r3
    1056:	e748      	b.n	eea <_http_client_request+0xb6>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    1058:	2207      	movs	r2, #7
    105a:	495b      	ldr	r1, [pc, #364]	; (11c8 <_http_client_request+0x394>)
    105c:	4479      	add	r1, pc
    105e:	3329      	adds	r3, #41	; 0x29
    1060:	2010      	movs	r0, #16
    1062:	1838      	adds	r0, r7, r0
    1064:	18c0      	adds	r0, r0, r3
    1066:	4b4a      	ldr	r3, [pc, #296]	; (1190 <_http_client_request+0x35c>)
    1068:	58f3      	ldr	r3, [r6, r3]
    106a:	60fb      	str	r3, [r7, #12]
    106c:	4798      	blx	r3
    106e:	e73c      	b.n	eea <_http_client_request+0xb6>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    1070:	2204      	movs	r2, #4
    1072:	4956      	ldr	r1, [pc, #344]	; (11cc <_http_client_request+0x398>)
    1074:	4479      	add	r1, pc
    1076:	3328      	adds	r3, #40	; 0x28
    1078:	2010      	movs	r0, #16
    107a:	1838      	adds	r0, r7, r0
    107c:	18c0      	adds	r0, r0, r3
    107e:	4b44      	ldr	r3, [pc, #272]	; (1190 <_http_client_request+0x35c>)
    1080:	58f3      	ldr	r3, [r6, r3]
    1082:	60fb      	str	r3, [r7, #12]
    1084:	4798      	blx	r3
    1086:	e730      	b.n	eea <_http_client_request+0xb6>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    1088:	2208      	movs	r2, #8
    108a:	4951      	ldr	r1, [pc, #324]	; (11d0 <_http_client_request+0x39c>)
    108c:	4479      	add	r1, pc
    108e:	3327      	adds	r3, #39	; 0x27
    1090:	2010      	movs	r0, #16
    1092:	1838      	adds	r0, r7, r0
    1094:	18c0      	adds	r0, r0, r3
    1096:	4b3e      	ldr	r3, [pc, #248]	; (1190 <_http_client_request+0x35c>)
    1098:	58f3      	ldr	r3, [r6, r3]
    109a:	60fb      	str	r3, [r7, #12]
    109c:	4798      	blx	r3
    109e:	e724      	b.n	eea <_http_client_request+0xb6>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    10a0:	2205      	movs	r2, #5
    10a2:	494c      	ldr	r1, [pc, #304]	; (11d4 <_http_client_request+0x3a0>)
    10a4:	4479      	add	r1, pc
    10a6:	3326      	adds	r3, #38	; 0x26
    10a8:	2010      	movs	r0, #16
    10aa:	1838      	adds	r0, r7, r0
    10ac:	18c0      	adds	r0, r0, r3
    10ae:	4b38      	ldr	r3, [pc, #224]	; (1190 <_http_client_request+0x35c>)
    10b0:	58f3      	ldr	r3, [r6, r3]
    10b2:	60fb      	str	r3, [r7, #12]
    10b4:	4798      	blx	r3
    10b6:	e718      	b.n	eea <_http_client_request+0xb6>
				module->req.content_length = -1;
    10b8:	2201      	movs	r2, #1
    10ba:	4252      	negs	r2, r2
    10bc:	23cc      	movs	r3, #204	; 0xcc
    10be:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    10c0:	321d      	adds	r2, #29
    10c2:	4945      	ldr	r1, [pc, #276]	; (11d8 <_http_client_request+0x3a4>)
    10c4:	4479      	add	r1, pc
    10c6:	3ba0      	subs	r3, #160	; 0xa0
    10c8:	4650      	mov	r0, sl
    10ca:	18c0      	adds	r0, r0, r3
    10cc:	4b30      	ldr	r3, [pc, #192]	; (1190 <_http_client_request+0x35c>)
    10ce:	4645      	mov	r5, r8
    10d0:	58eb      	ldr	r3, [r5, r3]
    10d2:	60fb      	str	r3, [r7, #12]
    10d4:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    10d6:	23d4      	movs	r3, #212	; 0xd4
    10d8:	58e5      	ldr	r5, [r4, r3]
    10da:	2d00      	cmp	r5, #0
    10dc:	d010      	beq.n	1100 <_http_client_request+0x2cc>
			stream_writer_send_buffer(&writer,
    10de:	0028      	movs	r0, r5
    10e0:	4b2a      	ldr	r3, [pc, #168]	; (118c <_http_client_request+0x358>)
    10e2:	4642      	mov	r2, r8
    10e4:	58d3      	ldr	r3, [r2, r3]
    10e6:	60fb      	str	r3, [r7, #12]
    10e8:	4798      	blx	r3
    10ea:	0002      	movs	r2, r0
    10ec:	0029      	movs	r1, r5
    10ee:	232c      	movs	r3, #44	; 0x2c
    10f0:	2010      	movs	r0, #16
    10f2:	1838      	adds	r0, r7, r0
    10f4:	18c0      	adds	r0, r0, r3
    10f6:	4b26      	ldr	r3, [pc, #152]	; (1190 <_http_client_request+0x35c>)
    10f8:	4645      	mov	r5, r8
    10fa:	58eb      	ldr	r3, [r5, r3]
    10fc:	60fb      	str	r3, [r7, #12]
    10fe:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    1100:	2202      	movs	r2, #2
    1102:	4936      	ldr	r1, [pc, #216]	; (11dc <_http_client_request+0x3a8>)
    1104:	4479      	add	r1, pc
    1106:	232c      	movs	r3, #44	; 0x2c
    1108:	2010      	movs	r0, #16
    110a:	1838      	adds	r0, r7, r0
    110c:	18c5      	adds	r5, r0, r3
    110e:	0028      	movs	r0, r5
    1110:	4b1f      	ldr	r3, [pc, #124]	; (1190 <_http_client_request+0x35c>)
    1112:	4646      	mov	r6, r8
    1114:	58f3      	ldr	r3, [r6, r3]
    1116:	60fb      	str	r3, [r7, #12]
    1118:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    111a:	0028      	movs	r0, r5
    111c:	4b30      	ldr	r3, [pc, #192]	; (11e0 <_http_client_request+0x3ac>)
    111e:	58f3      	ldr	r3, [r6, r3]
    1120:	60fb      	str	r3, [r7, #12]
    1122:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    1124:	2304      	movs	r3, #4
    1126:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    1128:	23cc      	movs	r3, #204	; 0xcc
    112a:	58e2      	ldr	r2, [r4, r3]
    112c:	2a00      	cmp	r2, #0
    112e:	db59      	blt.n	11e4 <_http_client_request+0x3b0>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    1130:	2a00      	cmp	r2, #0
    1132:	dc00      	bgt.n	1136 <_http_client_request+0x302>
    1134:	e137      	b.n	13a6 <_http_client_request+0x572>
    1136:	0023      	movs	r3, r4
    1138:	33b0      	adds	r3, #176	; 0xb0
    113a:	68dd      	ldr	r5, [r3, #12]
    113c:	2d00      	cmp	r5, #0
    113e:	d100      	bne.n	1142 <_http_client_request+0x30e>
    1140:	e131      	b.n	13a6 <_http_client_request+0x572>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    1142:	23d0      	movs	r3, #208	; 0xd0
    1144:	58e3      	ldr	r3, [r4, r3]
    1146:	429a      	cmp	r2, r3
    1148:	dd00      	ble.n	114c <_http_client_request+0x318>
    114a:	e0f5      	b.n	1338 <_http_client_request+0x504>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    114c:	23c0      	movs	r3, #192	; 0xc0
    114e:	58e3      	ldr	r3, [r4, r3]
    1150:	2b00      	cmp	r3, #0
    1152:	d002      	beq.n	115a <_http_client_request+0x326>
					module->req.entity.close(module->req.entity.priv_data);
    1154:	22c4      	movs	r2, #196	; 0xc4
    1156:	58a0      	ldr	r0, [r4, r2]
    1158:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    115a:	2302      	movs	r3, #2
    115c:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    115e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1160:	2b00      	cmp	r3, #0
    1162:	d100      	bne.n	1166 <_http_client_request+0x332>
    1164:	e696      	b.n	e94 <_http_client_request+0x60>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    1166:	2214      	movs	r2, #20
    1168:	18ba      	adds	r2, r7, r2
    116a:	2101      	movs	r1, #1
    116c:	0020      	movs	r0, r4
    116e:	4798      	blx	r3
    1170:	e690      	b.n	e94 <_http_client_request+0x60>
					module->req.content_length = 0;
    1172:	2200      	movs	r2, #0
    1174:	50e2      	str	r2, [r4, r3]
    1176:	e7ae      	b.n	10d6 <_http_client_request+0x2a2>
    1178:	00011b44 	.word	0x00011b44
    117c:	0001037a 	.word	0x0001037a
    1180:	000000ec 	.word	0x000000ec
    1184:	00000430 	.word	0x00000430
    1188:	00000030 	.word	0x00000030
    118c:	00000484 	.word	0x00000484
    1190:	00000470 	.word	0x00000470
    1194:	00010324 	.word	0x00010324
    1198:	00010326 	.word	0x00010326
    119c:	0001058c 	.word	0x0001058c
    11a0:	00010308 	.word	0x00010308
    11a4:	000102ea 	.word	0x000102ea
    11a8:	000102fc 	.word	0x000102fc
    11ac:	00010306 	.word	0x00010306
    11b0:	00010300 	.word	0x00010300
    11b4:	0000039c 	.word	0x0000039c
    11b8:	000102e4 	.word	0x000102e4
    11bc:	000104b0 	.word	0x000104b0
    11c0:	000101e0 	.word	0x000101e0
    11c4:	000101d0 	.word	0x000101d0
    11c8:	000101c0 	.word	0x000101c0
    11cc:	000101b0 	.word	0x000101b0
    11d0:	000101a0 	.word	0x000101a0
    11d4:	00010194 	.word	0x00010194
    11d8:	000101e8 	.word	0x000101e8
    11dc:	000103cc 	.word	0x000103cc
    11e0:	00000448 	.word	0x00000448
		if (module->req.content_length < 0 && entity->read) {
    11e4:	0023      	movs	r3, r4
    11e6:	33b0      	adds	r3, #176	; 0xb0
    11e8:	68dd      	ldr	r5, [r3, #12]
    11ea:	2d00      	cmp	r5, #0
    11ec:	d0a0      	beq.n	1130 <_http_client_request+0x2fc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    11ee:	6958      	ldr	r0, [r3, #20]
    11f0:	464b      	mov	r3, r9
    11f2:	1d59      	adds	r1, r3, #5
    11f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    11f6:	1fda      	subs	r2, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    11f8:	23d0      	movs	r3, #208	; 0xd0
    11fa:	58e3      	ldr	r3, [r4, r3]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    11fc:	47a8      	blx	r5
    11fe:	60f8      	str	r0, [r7, #12]
			if (size < 0) {
    1200:	2800      	cmp	r0, #0
    1202:	da00      	bge.n	1206 <_http_client_request+0x3d2>
    1204:	e085      	b.n	1312 <_http_client_request+0x4de>
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    1206:	230a      	movs	r3, #10
    1208:	464a      	mov	r2, r9
    120a:	7113      	strb	r3, [r2, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    120c:	220d      	movs	r2, #13
    120e:	4649      	mov	r1, r9
    1210:	70ca      	strb	r2, [r1, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    1212:	68f9      	ldr	r1, [r7, #12]
    1214:	3105      	adds	r1, #5
    1216:	4648      	mov	r0, r9
    1218:	5442      	strb	r2, [r0, r1]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    121a:	68fa      	ldr	r2, [r7, #12]
    121c:	3206      	adds	r2, #6
    121e:	5483      	strb	r3, [r0, r2]
			if (size >= 0) {
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	2b00      	cmp	r3, #0
    1224:	db10      	blt.n	1248 <_http_client_request+0x414>
				ptr = buffer + 2;
    1226:	2302      	movs	r3, #2
    1228:	444b      	add	r3, r9
    122a:	603b      	str	r3, [r7, #0]
				*ptr = CH_LUT[size % 16];
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	17da      	asrs	r2, r3, #31
    1230:	0f12      	lsrs	r2, r2, #28
    1232:	1899      	adds	r1, r3, r2
    1234:	230f      	movs	r3, #15
    1236:	400b      	ands	r3, r1
    1238:	1a9b      	subs	r3, r3, r2
    123a:	2210      	movs	r2, #16
    123c:	2110      	movs	r1, #16
    123e:	468c      	mov	ip, r1
    1240:	44bc      	add	ip, r7
    1242:	4462      	add	r2, ip
    1244:	5cd3      	ldrb	r3, [r2, r3]
    1246:	7083      	strb	r3, [r0, #2]
			if (size >= 0x10) {
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	2b0f      	cmp	r3, #15
    124c:	dd17      	ble.n	127e <_http_client_request+0x44a>
				ptr = buffer + 1;
    124e:	2301      	movs	r3, #1
    1250:	444b      	add	r3, r9
    1252:	603b      	str	r3, [r7, #0]
				*ptr = CH_LUT[(size / 0x10) % 16];
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	17db      	asrs	r3, r3, #31
    1258:	220f      	movs	r2, #15
    125a:	4013      	ands	r3, r2
    125c:	68f9      	ldr	r1, [r7, #12]
    125e:	468c      	mov	ip, r1
    1260:	4463      	add	r3, ip
    1262:	1119      	asrs	r1, r3, #4
    1264:	17db      	asrs	r3, r3, #31
    1266:	0f1b      	lsrs	r3, r3, #28
    1268:	18c9      	adds	r1, r1, r3
    126a:	400a      	ands	r2, r1
    126c:	1ad3      	subs	r3, r2, r3
    126e:	2210      	movs	r2, #16
    1270:	2110      	movs	r1, #16
    1272:	468c      	mov	ip, r1
    1274:	44bc      	add	ip, r7
    1276:	4462      	add	r2, ip
    1278:	5cd3      	ldrb	r3, [r2, r3]
    127a:	464a      	mov	r2, r9
    127c:	7053      	strb	r3, [r2, #1]
			if (size >= 0x100) {
    127e:	68fb      	ldr	r3, [r7, #12]
    1280:	2bff      	cmp	r3, #255	; 0xff
    1282:	dd15      	ble.n	12b0 <_http_client_request+0x47c>
				*ptr = CH_LUT[(size / 0x100) % 16];
    1284:	17da      	asrs	r2, r3, #31
    1286:	23ff      	movs	r3, #255	; 0xff
    1288:	4013      	ands	r3, r2
    128a:	68fa      	ldr	r2, [r7, #12]
    128c:	4694      	mov	ip, r2
    128e:	4463      	add	r3, ip
    1290:	1219      	asrs	r1, r3, #8
    1292:	17db      	asrs	r3, r3, #31
    1294:	0f1b      	lsrs	r3, r3, #28
    1296:	18c9      	adds	r1, r1, r3
    1298:	220f      	movs	r2, #15
    129a:	400a      	ands	r2, r1
    129c:	1ad3      	subs	r3, r2, r3
    129e:	2210      	movs	r2, #16
    12a0:	2110      	movs	r1, #16
    12a2:	468c      	mov	ip, r1
    12a4:	44bc      	add	ip, r7
    12a6:	4462      	add	r2, ip
    12a8:	5cd3      	ldrb	r3, [r2, r3]
    12aa:	464a      	mov	r2, r9
    12ac:	7013      	strb	r3, [r2, #0]
				ptr = buffer;
    12ae:	603a      	str	r2, [r7, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    12b0:	683b      	ldr	r3, [r7, #0]
    12b2:	1cda      	adds	r2, r3, #3
    12b4:	464b      	mov	r3, r9
    12b6:	1ad2      	subs	r2, r2, r3
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	469c      	mov	ip, r3
    12bc:	4462      	add	r2, ip
    12be:	b292      	uxth	r2, r2
    12c0:	3204      	adds	r2, #4
    12c2:	b292      	uxth	r2, r2
    12c4:	2000      	movs	r0, #0
    12c6:	5620      	ldrsb	r0, [r4, r0]
    12c8:	2300      	movs	r3, #0
    12ca:	6839      	ldr	r1, [r7, #0]
    12cc:	4e3c      	ldr	r6, [pc, #240]	; (13c0 <_http_client_request+0x58c>)
    12ce:	4645      	mov	r5, r8
    12d0:	59ae      	ldr	r6, [r5, r6]
    12d2:	60be      	str	r6, [r7, #8]
    12d4:	47b0      	blx	r6
    12d6:	2800      	cmp	r0, #0
    12d8:	db1e      	blt.n	1318 <_http_client_request+0x4e4>
			module->req.sent_length += size;
    12da:	22d0      	movs	r2, #208	; 0xd0
    12dc:	58a3      	ldr	r3, [r4, r2]
    12de:	68f9      	ldr	r1, [r7, #12]
    12e0:	468c      	mov	ip, r1
    12e2:	4463      	add	r3, ip
    12e4:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    12e6:	1e0b      	subs	r3, r1, #0
    12e8:	d000      	beq.n	12ec <_http_client_request+0x4b8>
    12ea:	e5d3      	b.n	e94 <_http_client_request+0x60>
				if (module->req.entity.close) {
    12ec:	33c0      	adds	r3, #192	; 0xc0
    12ee:	58e3      	ldr	r3, [r4, r3]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d002      	beq.n	12fa <_http_client_request+0x4c6>
					module->req.entity.close(module->req.entity.priv_data);
    12f4:	3a0c      	subs	r2, #12
    12f6:	58a0      	ldr	r0, [r4, r2]
    12f8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    12fa:	2302      	movs	r3, #2
    12fc:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    12fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1300:	2b00      	cmp	r3, #0
    1302:	d100      	bne.n	1306 <_http_client_request+0x4d2>
    1304:	e5c6      	b.n	e94 <_http_client_request+0x60>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    1306:	2214      	movs	r2, #20
    1308:	18ba      	adds	r2, r7, r2
    130a:	2101      	movs	r1, #1
    130c:	0020      	movs	r0, r4
    130e:	4798      	blx	r3
    1310:	e5c0      	b.n	e94 <_http_client_request+0x60>
				size = 0;
    1312:	2300      	movs	r3, #0
    1314:	60fb      	str	r3, [r7, #12]
    1316:	e776      	b.n	1206 <_http_client_request+0x3d2>
				_http_client_clear_conn(module, -EIO);
    1318:	2105      	movs	r1, #5
    131a:	4249      	negs	r1, r1
    131c:	0020      	movs	r0, r4
    131e:	4b29      	ldr	r3, [pc, #164]	; (13c4 <_http_client_request+0x590>)
    1320:	58eb      	ldr	r3, [r5, r3]
    1322:	60fb      	str	r3, [r7, #12]
    1324:	4798      	blx	r3
    1326:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    1328:	46bd      	mov	sp, r7
    132a:	b015      	add	sp, #84	; 0x54
    132c:	bc3c      	pop	{r2, r3, r4, r5}
    132e:	4690      	mov	r8, r2
    1330:	4699      	mov	r9, r3
    1332:	46a2      	mov	sl, r4
    1334:	46ab      	mov	fp, r5
    1336:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    1338:	0022      	movs	r2, r4
    133a:	32b0      	adds	r2, #176	; 0xb0
    133c:	6950      	ldr	r0, [r2, #20]
    133e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    1340:	4649      	mov	r1, r9
    1342:	47a8      	blx	r5
			if (size < 0) {
    1344:	2800      	cmp	r0, #0
    1346:	db1d      	blt.n	1384 <_http_client_request+0x550>
				if (size > module->req.content_length - module->req.sent_length) {
    1348:	23cc      	movs	r3, #204	; 0xcc
    134a:	58e5      	ldr	r5, [r4, r3]
    134c:	3304      	adds	r3, #4
    134e:	58e3      	ldr	r3, [r4, r3]
    1350:	1aeb      	subs	r3, r5, r3
    1352:	469a      	mov	sl, r3
    1354:	4298      	cmp	r0, r3
    1356:	dc00      	bgt.n	135a <_http_client_request+0x526>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    1358:	4682      	mov	sl, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    135a:	4653      	mov	r3, sl
    135c:	81bb      	strh	r3, [r7, #12]
    135e:	b29a      	uxth	r2, r3
    1360:	2000      	movs	r0, #0
    1362:	5620      	ldrsb	r0, [r4, r0]
    1364:	2300      	movs	r3, #0
    1366:	4649      	mov	r1, r9
    1368:	4e15      	ldr	r6, [pc, #84]	; (13c0 <_http_client_request+0x58c>)
    136a:	4645      	mov	r5, r8
    136c:	59ae      	ldr	r6, [r5, r6]
    136e:	60fe      	str	r6, [r7, #12]
    1370:	47b0      	blx	r6
    1372:	2800      	cmp	r0, #0
    1374:	db0f      	blt.n	1396 <_http_client_request+0x562>
				module->req.sent_length += size;
    1376:	23d0      	movs	r3, #208	; 0xd0
    1378:	58e2      	ldr	r2, [r4, r3]
    137a:	4694      	mov	ip, r2
    137c:	4655      	mov	r5, sl
    137e:	4465      	add	r5, ip
    1380:	50e5      	str	r5, [r4, r3]
    1382:	e587      	b.n	e94 <_http_client_request+0x60>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    1384:	2105      	movs	r1, #5
    1386:	4249      	negs	r1, r1
    1388:	0020      	movs	r0, r4
    138a:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <_http_client_request+0x590>)
    138c:	4642      	mov	r2, r8
    138e:	58d3      	ldr	r3, [r2, r3]
    1390:	60fb      	str	r3, [r7, #12]
    1392:	4798      	blx	r3
    1394:	e57e      	b.n	e94 <_http_client_request+0x60>
					_http_client_clear_conn(module, -EIO);
    1396:	2105      	movs	r1, #5
    1398:	4249      	negs	r1, r1
    139a:	0020      	movs	r0, r4
    139c:	4b09      	ldr	r3, [pc, #36]	; (13c4 <_http_client_request+0x590>)
    139e:	58eb      	ldr	r3, [r5, r3]
    13a0:	60fb      	str	r3, [r7, #12]
    13a2:	4798      	blx	r3
					return;
    13a4:	e7bf      	b.n	1326 <_http_client_request+0x4f2>
			module->req.state = STATE_SOCK_CONNECTED;
    13a6:	2302      	movs	r3, #2
    13a8:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    13aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    13ac:	2b00      	cmp	r3, #0
    13ae:	d100      	bne.n	13b2 <_http_client_request+0x57e>
    13b0:	e570      	b.n	e94 <_http_client_request+0x60>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    13b2:	2214      	movs	r2, #20
    13b4:	18ba      	adds	r2, r7, r2
    13b6:	2101      	movs	r1, #1
    13b8:	0020      	movs	r0, r4
    13ba:	4798      	blx	r3
    13bc:	e56a      	b.n	e94 <_http_client_request+0x60>
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	00000198 	.word	0x00000198
    13c4:	000004f0 	.word	0x000004f0

000013c8 <http_client_send_request>:
{
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ca:	46de      	mov	lr, fp
    13cc:	464f      	mov	r7, r9
    13ce:	b580      	push	{r7, lr}
    13d0:	b089      	sub	sp, #36	; 0x24
    13d2:	0005      	movs	r5, r0
    13d4:	4689      	mov	r9, r1
    13d6:	4693      	mov	fp, r2
    13d8:	9302      	str	r3, [sp, #8]
    13da:	4f8b      	ldr	r7, [pc, #556]	; (1608 <http_client_send_request+0x240>)
    13dc:	447f      	add	r7, pc
	if (module == NULL) {
    13de:	2800      	cmp	r0, #0
    13e0:	d100      	bne.n	13e4 <http_client_send_request+0x1c>
    13e2:	e0f8      	b.n	15d6 <http_client_send_request+0x20e>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    13e4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    13e6:	2b02      	cmp	r3, #2
    13e8:	d900      	bls.n	13ec <http_client_send_request+0x24>
    13ea:	e0f8      	b.n	15de <http_client_send_request+0x216>
	if (!strncmp(url, "http://", 7)) {
    13ec:	2207      	movs	r2, #7
    13ee:	4987      	ldr	r1, [pc, #540]	; (160c <http_client_send_request+0x244>)
    13f0:	4479      	add	r1, pc
    13f2:	4648      	mov	r0, r9
    13f4:	4b86      	ldr	r3, [pc, #536]	; (1610 <http_client_send_request+0x248>)
    13f6:	58fb      	ldr	r3, [r7, r3]
    13f8:	9300      	str	r3, [sp, #0]
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	d00b      	beq.n	1418 <http_client_send_request+0x50>
	} else if (!strncmp(url, "https://", 8)) {
    1400:	2208      	movs	r2, #8
    1402:	4984      	ldr	r1, [pc, #528]	; (1614 <http_client_send_request+0x24c>)
    1404:	4479      	add	r1, pc
    1406:	4648      	mov	r0, r9
    1408:	4b81      	ldr	r3, [pc, #516]	; (1610 <http_client_send_request+0x248>)
    140a:	58fb      	ldr	r3, [r7, r3]
    140c:	9300      	str	r3, [sp, #0]
    140e:	4798      	blx	r3
    1410:	2800      	cmp	r0, #0
    1412:	d015      	beq.n	1440 <http_client_send_request+0x78>
	int i = 0, j = 0, reconnect = 0;
    1414:	2400      	movs	r4, #0
    1416:	e000      	b.n	141a <http_client_send_request+0x52>
		i = 7;
    1418:	2407      	movs	r4, #7
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    141a:	1c6b      	adds	r3, r5, #1
    141c:	464a      	mov	r2, r9
    141e:	1916      	adds	r6, r2, r4
    1420:	9301      	str	r3, [sp, #4]
    1422:	0018      	movs	r0, r3
    1424:	4b7c      	ldr	r3, [pc, #496]	; (1618 <http_client_send_request+0x250>)
    1426:	58fa      	ldr	r2, [r7, r3]
    1428:	9200      	str	r2, [sp, #0]
    142a:	4790      	blx	r2
    142c:	0002      	movs	r2, r0
    142e:	0031      	movs	r1, r6
    1430:	9801      	ldr	r0, [sp, #4]
    1432:	4b77      	ldr	r3, [pc, #476]	; (1610 <http_client_send_request+0x248>)
    1434:	58fb      	ldr	r3, [r7, r3]
    1436:	9300      	str	r3, [sp, #0]
    1438:	4798      	blx	r3
    143a:	9000      	str	r0, [sp, #0]
	int i = 0, j = 0, reconnect = 0;
    143c:	2200      	movs	r2, #0
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    143e:	e005      	b.n	144c <http_client_send_request+0x84>
		i = 8;
    1440:	2408      	movs	r4, #8
    1442:	e7ea      	b.n	141a <http_client_send_request+0x52>
		module->host[j++] = url[i];
    1444:	18a9      	adds	r1, r5, r2
    1446:	704b      	strb	r3, [r1, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    1448:	3401      	adds	r4, #1
		module->host[j++] = url[i];
    144a:	3201      	adds	r2, #1
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    144c:	464b      	mov	r3, r9
    144e:	191e      	adds	r6, r3, r4
    1450:	7833      	ldrb	r3, [r6, #0]
    1452:	2b00      	cmp	r3, #0
    1454:	d001      	beq.n	145a <http_client_send_request+0x92>
    1456:	2b2f      	cmp	r3, #47	; 0x2f
    1458:	d1f4      	bne.n	1444 <http_client_send_request+0x7c>
	module->host[j] = '\0';
    145a:	18aa      	adds	r2, r5, r2
    145c:	2300      	movs	r3, #0
    145e:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    1460:	786b      	ldrb	r3, [r5, #1]
    1462:	2b00      	cmp	r3, #0
    1464:	d100      	bne.n	1468 <http_client_send_request+0xa0>
    1466:	e0be      	b.n	15e6 <http_client_send_request+0x21e>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    1468:	0030      	movs	r0, r6
    146a:	4b6b      	ldr	r3, [pc, #428]	; (1618 <http_client_send_request+0x250>)
    146c:	58fb      	ldr	r3, [r7, r3]
    146e:	9303      	str	r3, [sp, #12]
    1470:	4798      	blx	r3
    1472:	283f      	cmp	r0, #63	; 0x3f
    1474:	d900      	bls.n	1478 <http_client_send_request+0xb0>
    1476:	e0ba      	b.n	15ee <http_client_send_request+0x226>
	if (module->req.ext_header != NULL) {
    1478:	23d4      	movs	r3, #212	; 0xd4
    147a:	58e8      	ldr	r0, [r5, r3]
    147c:	2800      	cmp	r0, #0
    147e:	d003      	beq.n	1488 <http_client_send_request+0xc0>
		free(module->req.ext_header);
    1480:	4b66      	ldr	r3, [pc, #408]	; (161c <http_client_send_request+0x254>)
    1482:	58fb      	ldr	r3, [r7, r3]
    1484:	9303      	str	r3, [sp, #12]
    1486:	4798      	blx	r3
	if (ext_header != NULL) {
    1488:	9b10      	ldr	r3, [sp, #64]	; 0x40
    148a:	2b00      	cmp	r3, #0
    148c:	d032      	beq.n	14f4 <http_client_send_request+0x12c>
		module->req.ext_header = strdup(ext_header);
    148e:	0018      	movs	r0, r3
    1490:	4b63      	ldr	r3, [pc, #396]	; (1620 <http_client_send_request+0x258>)
    1492:	58fb      	ldr	r3, [r7, r3]
    1494:	9303      	str	r3, [sp, #12]
    1496:	4798      	blx	r3
    1498:	23d4      	movs	r3, #212	; 0xd4
    149a:	50e8      	str	r0, [r5, r3]
		if (module->req.ext_header == NULL) {
    149c:	2800      	cmp	r0, #0
    149e:	d100      	bne.n	14a2 <http_client_send_request+0xda>
    14a0:	e0a9      	b.n	15f6 <http_client_send_request+0x22e>
	module->sending = 0;
    14a2:	2241      	movs	r2, #65	; 0x41
    14a4:	5cab      	ldrb	r3, [r5, r2]
    14a6:	2101      	movs	r1, #1
    14a8:	438b      	bics	r3, r1
    14aa:	54ab      	strb	r3, [r5, r2]
	module->recved_size = 0;
    14ac:	2300      	movs	r3, #0
    14ae:	646b      	str	r3, [r5, #68]	; 0x44
	if (uri[0] == '/') {
    14b0:	7833      	ldrb	r3, [r6, #0]
    14b2:	2b2f      	cmp	r3, #47	; 0x2f
    14b4:	d022      	beq.n	14fc <http_client_send_request+0x134>
		module->req.uri[0] = '/';
    14b6:	222f      	movs	r2, #47	; 0x2f
    14b8:	2370      	movs	r3, #112	; 0x70
    14ba:	54ea      	strb	r2, [r5, r3]
		if (uri[0] != 0) {
    14bc:	7833      	ldrb	r3, [r6, #0]
    14be:	2b00      	cmp	r3, #0
    14c0:	d124      	bne.n	150c <http_client_send_request+0x144>
	if (entity != NULL) {
    14c2:	9b02      	ldr	r3, [sp, #8]
    14c4:	2b00      	cmp	r3, #0
    14c6:	d029      	beq.n	151c <http_client_send_request+0x154>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    14c8:	0028      	movs	r0, r5
    14ca:	30b0      	adds	r0, #176	; 0xb0
    14cc:	2218      	movs	r2, #24
    14ce:	0019      	movs	r1, r3
    14d0:	4b54      	ldr	r3, [pc, #336]	; (1624 <http_client_send_request+0x25c>)
    14d2:	58fb      	ldr	r3, [r7, r3]
    14d4:	9302      	str	r3, [sp, #8]
    14d6:	4798      	blx	r3
	module->req.method = method;
    14d8:	23c8      	movs	r3, #200	; 0xc8
    14da:	465a      	mov	r2, fp
    14dc:	54ea      	strb	r2, [r5, r3]
	switch (module->req.state) {
    14de:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    14e0:	2b01      	cmp	r3, #1
    14e2:	d024      	beq.n	152e <http_client_send_request+0x166>
    14e4:	2b00      	cmp	r3, #0
    14e6:	d02e      	beq.n	1546 <http_client_send_request+0x17e>
    14e8:	2b02      	cmp	r3, #2
    14ea:	d023      	beq.n	1534 <http_client_send_request+0x16c>
		return -EAGAIN;
    14ec:	230b      	movs	r3, #11
    14ee:	425b      	negs	r3, r3
    14f0:	9300      	str	r3, [sp, #0]
    14f2:	e05c      	b.n	15ae <http_client_send_request+0x1e6>
		module->req.ext_header = NULL;
    14f4:	2200      	movs	r2, #0
    14f6:	23d4      	movs	r3, #212	; 0xd4
    14f8:	50ea      	str	r2, [r5, r3]
    14fa:	e7d2      	b.n	14a2 <http_client_send_request+0xda>
		strcpy(module->req.uri, uri);
    14fc:	0028      	movs	r0, r5
    14fe:	3070      	adds	r0, #112	; 0x70
    1500:	0031      	movs	r1, r6
    1502:	4b49      	ldr	r3, [pc, #292]	; (1628 <http_client_send_request+0x260>)
    1504:	58fb      	ldr	r3, [r7, r3]
    1506:	9303      	str	r3, [sp, #12]
    1508:	4798      	blx	r3
    150a:	e7da      	b.n	14c2 <http_client_send_request+0xfa>
			strcpy(module->req.uri + 1, uri);
    150c:	0031      	movs	r1, r6
    150e:	0028      	movs	r0, r5
    1510:	3071      	adds	r0, #113	; 0x71
    1512:	4b45      	ldr	r3, [pc, #276]	; (1628 <http_client_send_request+0x260>)
    1514:	58fb      	ldr	r3, [r7, r3]
    1516:	9303      	str	r3, [sp, #12]
    1518:	4798      	blx	r3
    151a:	e7d2      	b.n	14c2 <http_client_send_request+0xfa>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    151c:	0028      	movs	r0, r5
    151e:	30b0      	adds	r0, #176	; 0xb0
    1520:	2218      	movs	r2, #24
    1522:	2100      	movs	r1, #0
    1524:	4b41      	ldr	r3, [pc, #260]	; (162c <http_client_send_request+0x264>)
    1526:	58fb      	ldr	r3, [r7, r3]
    1528:	9302      	str	r3, [sp, #8]
    152a:	4798      	blx	r3
    152c:	e7d4      	b.n	14d8 <http_client_send_request+0x110>
		if (!reconnect) {
    152e:	9b00      	ldr	r3, [sp, #0]
    1530:	2b00      	cmp	r3, #0
    1532:	d03c      	beq.n	15ae <http_client_send_request+0x1e6>
		if (!reconnect) {
    1534:	9b00      	ldr	r3, [sp, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d03f      	beq.n	15ba <http_client_send_request+0x1f2>
			_http_client_clear_conn(module, 0);
    153a:	2100      	movs	r1, #0
    153c:	0028      	movs	r0, r5
    153e:	4b3c      	ldr	r3, [pc, #240]	; (1630 <http_client_send_request+0x268>)
    1540:	58fb      	ldr	r3, [r7, r3]
    1542:	9300      	str	r3, [sp, #0]
    1544:	4798      	blx	r3
		if (module->config.tls) {
    1546:	2352      	movs	r3, #82	; 0x52
    1548:	5cea      	ldrb	r2, [r5, r3]
    154a:	2a00      	cmp	r2, #0
    154c:	d000      	beq.n	1550 <http_client_send_request+0x188>
			flag |= SOCKET_FLAGS_SSL;
    154e:	2201      	movs	r2, #1
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    1550:	2101      	movs	r1, #1
    1552:	2002      	movs	r0, #2
    1554:	4b37      	ldr	r3, [pc, #220]	; (1634 <http_client_send_request+0x26c>)
    1556:	58fb      	ldr	r3, [r7, r3]
    1558:	9300      	str	r3, [sp, #0]
    155a:	4798      	blx	r3
    155c:	7028      	strb	r0, [r5, #0]
		if (module->sock >= 0) {
    155e:	2800      	cmp	r0, #0
    1560:	db4d      	blt.n	15fe <http_client_send_request+0x236>
			module_ref_inst[module->sock] = module;
    1562:	0080      	lsls	r0, r0, #2
    1564:	4b34      	ldr	r3, [pc, #208]	; (1638 <http_client_send_request+0x270>)
    1566:	447b      	add	r3, pc
    1568:	50c5      	str	r5, [r0, r3]
			if (_is_ip(module->host)) {
    156a:	9e01      	ldr	r6, [sp, #4]
    156c:	0030      	movs	r0, r6
    156e:	4b33      	ldr	r3, [pc, #204]	; (163c <http_client_send_request+0x274>)
    1570:	447b      	add	r3, pc
    1572:	4798      	blx	r3
    1574:	2800      	cmp	r0, #0
    1576:	d028      	beq.n	15ca <http_client_send_request+0x202>
				addr_in.sin_family = AF_INET;
    1578:	ac04      	add	r4, sp, #16
    157a:	2302      	movs	r3, #2
    157c:	8023      	strh	r3, [r4, #0]
				addr_in.sin_port = _htons(module->config.port);
    157e:	334e      	adds	r3, #78	; 0x4e
    1580:	5aeb      	ldrh	r3, [r5, r3]
    1582:	021a      	lsls	r2, r3, #8
    1584:	0a1b      	lsrs	r3, r3, #8
    1586:	4313      	orrs	r3, r2
    1588:	8063      	strh	r3, [r4, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    158a:	0030      	movs	r0, r6
    158c:	4b2c      	ldr	r3, [pc, #176]	; (1640 <http_client_send_request+0x278>)
    158e:	58fb      	ldr	r3, [r7, r3]
    1590:	9300      	str	r3, [sp, #0]
    1592:	4798      	blx	r3
    1594:	6060      	str	r0, [r4, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    1596:	2000      	movs	r0, #0
    1598:	5628      	ldrsb	r0, [r5, r0]
    159a:	2210      	movs	r2, #16
    159c:	0021      	movs	r1, r4
    159e:	4b29      	ldr	r3, [pc, #164]	; (1644 <http_client_send_request+0x27c>)
    15a0:	58fb      	ldr	r3, [r7, r3]
    15a2:	9300      	str	r3, [sp, #0]
    15a4:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    15a6:	2301      	movs	r3, #1
    15a8:	66eb      	str	r3, [r5, #108]	; 0x6c
	return 0;
    15aa:	2300      	movs	r3, #0
    15ac:	9300      	str	r3, [sp, #0]
}
    15ae:	9800      	ldr	r0, [sp, #0]
    15b0:	b009      	add	sp, #36	; 0x24
    15b2:	bc0c      	pop	{r2, r3}
    15b4:	4691      	mov	r9, r2
    15b6:	469b      	mov	fp, r3
    15b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			module->req.state = STATE_REQ_SEND_HEADER;
    15ba:	3303      	adds	r3, #3
    15bc:	66eb      	str	r3, [r5, #108]	; 0x6c
			_http_client_request(module);
    15be:	0028      	movs	r0, r5
    15c0:	4b21      	ldr	r3, [pc, #132]	; (1648 <http_client_send_request+0x280>)
    15c2:	58fb      	ldr	r3, [r7, r3]
    15c4:	9301      	str	r3, [sp, #4]
    15c6:	4798      	blx	r3
			break;
    15c8:	e7f1      	b.n	15ae <http_client_send_request+0x1e6>
				gethostbyname((uint8*)module->host);
    15ca:	9801      	ldr	r0, [sp, #4]
    15cc:	4b1f      	ldr	r3, [pc, #124]	; (164c <http_client_send_request+0x284>)
    15ce:	58fb      	ldr	r3, [r7, r3]
    15d0:	9300      	str	r3, [sp, #0]
    15d2:	4798      	blx	r3
    15d4:	e7e7      	b.n	15a6 <http_client_send_request+0x1de>
		return -EINVAL;
    15d6:	2316      	movs	r3, #22
    15d8:	425b      	negs	r3, r3
    15da:	9300      	str	r3, [sp, #0]
    15dc:	e7e7      	b.n	15ae <http_client_send_request+0x1e6>
		return -EBUSY;
    15de:	2310      	movs	r3, #16
    15e0:	425b      	negs	r3, r3
    15e2:	9300      	str	r3, [sp, #0]
    15e4:	e7e3      	b.n	15ae <http_client_send_request+0x1e6>
		return -EINVAL;
    15e6:	2316      	movs	r3, #22
    15e8:	425b      	negs	r3, r3
    15ea:	9300      	str	r3, [sp, #0]
    15ec:	e7df      	b.n	15ae <http_client_send_request+0x1e6>
		return -ENAMETOOLONG;
    15ee:	235b      	movs	r3, #91	; 0x5b
    15f0:	425b      	negs	r3, r3
    15f2:	9300      	str	r3, [sp, #0]
    15f4:	e7db      	b.n	15ae <http_client_send_request+0x1e6>
			return -ENOMEM;
    15f6:	230c      	movs	r3, #12
    15f8:	425b      	negs	r3, r3
    15fa:	9300      	str	r3, [sp, #0]
    15fc:	e7d7      	b.n	15ae <http_client_send_request+0x1e6>
			return -ENOSPC;
    15fe:	231c      	movs	r3, #28
    1600:	425b      	negs	r3, r3
    1602:	9300      	str	r3, [sp, #0]
    1604:	e7d3      	b.n	15ae <http_client_send_request+0x1e6>
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	000115b0 	.word	0x000115b0
    160c:	0000ff00 	.word	0x0000ff00
    1610:	00000290 	.word	0x00000290
    1614:	0000fef4 	.word	0x0000fef4
    1618:	00000484 	.word	0x00000484
    161c:	000004fc 	.word	0x000004fc
    1620:	00000310 	.word	0x00000310
    1624:	000000ec 	.word	0x000000ec
    1628:	0000000c 	.word	0x0000000c
    162c:	00000328 	.word	0x00000328
    1630:	000004f0 	.word	0x000004f0
    1634:	00000154 	.word	0x00000154
    1638:	1fffeea6 	.word	0x1fffeea6
    163c:	fffff599 	.word	0xfffff599
    1640:	00000360 	.word	0x00000360
    1644:	00000060 	.word	0x00000060
    1648:	000004e8 	.word	0x000004e8
    164c:	00000388 	.word	0x00000388

00001650 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    1650:	b530      	push	{r4, r5, lr}
    1652:	b083      	sub	sp, #12
    1654:	4c0d      	ldr	r4, [pc, #52]	; (168c <_http_client_recv_packet+0x3c>)
    1656:	447c      	add	r4, pc
	if (module == NULL) {
    1658:	2800      	cmp	r0, #0
    165a:	d00e      	beq.n	167a <_http_client_recv_packet+0x2a>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    165c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    165e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    1660:	4293      	cmp	r3, r2
    1662:	d20c      	bcs.n	167e <_http_client_recv_packet+0x2e>
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
		module->config.recv_buffer + module->recved_size,
    1664:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    1666:	18c9      	adds	r1, r1, r3
	recv(module->sock,
    1668:	1ad2      	subs	r2, r2, r3
    166a:	b292      	uxth	r2, r2
    166c:	7800      	ldrb	r0, [r0, #0]
    166e:	b240      	sxtb	r0, r0
    1670:	2300      	movs	r3, #0
    1672:	4d07      	ldr	r5, [pc, #28]	; (1690 <_http_client_recv_packet+0x40>)
    1674:	5964      	ldr	r4, [r4, r5]
    1676:	9401      	str	r4, [sp, #4]
    1678:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    167a:	b003      	add	sp, #12
    167c:	bd30      	pop	{r4, r5, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    167e:	218b      	movs	r1, #139	; 0x8b
    1680:	4249      	negs	r1, r1
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <_http_client_recv_packet+0x44>)
    1684:	58e3      	ldr	r3, [r4, r3]
    1686:	9301      	str	r3, [sp, #4]
    1688:	4798      	blx	r3
		return;
    168a:	e7f6      	b.n	167a <_http_client_recv_packet+0x2a>
    168c:	00011336 	.word	0x00011336
    1690:	0000005c 	.word	0x0000005c
    1694:	000004f0 	.word	0x000004f0

00001698 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    1698:	b570      	push	{r4, r5, r6, lr}
    169a:	b082      	sub	sp, #8
    169c:	0005      	movs	r5, r0
    169e:	4b09      	ldr	r3, [pc, #36]	; (16c4 <_http_client_move_buffer+0x2c>)
    16a0:	447b      	add	r3, pc
	char *buffer = module->config.recv_buffer;
    16a2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    16a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    16a6:	1a54      	subs	r4, r2, r1
    16a8:	1824      	adds	r4, r4, r0

	if (remain > 0) {
    16aa:	2c00      	cmp	r4, #0
    16ac:	dc03      	bgt.n	16b6 <_http_client_move_buffer+0x1e>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    16ae:	2300      	movs	r3, #0
    16b0:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    16b2:	b002      	add	sp, #8
    16b4:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    16b6:	0022      	movs	r2, r4
    16b8:	4e03      	ldr	r6, [pc, #12]	; (16c8 <_http_client_move_buffer+0x30>)
    16ba:	599b      	ldr	r3, [r3, r6]
    16bc:	9301      	str	r3, [sp, #4]
    16be:	4798      	blx	r3
		module->recved_size = remain;
    16c0:	646c      	str	r4, [r5, #68]	; 0x44
    16c2:	e7f6      	b.n	16b2 <_http_client_move_buffer+0x1a>
    16c4:	000112ec 	.word	0x000112ec
    16c8:	00000080 	.word	0x00000080

000016cc <_http_client_handle_header>:
{
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	46c6      	mov	lr, r8
    16d0:	b500      	push	{lr}
    16d2:	b086      	sub	sp, #24
    16d4:	0007      	movs	r7, r0
    16d6:	4e6d      	ldr	r6, [pc, #436]	; (188c <_http_client_handle_header+0x1c0>)
    16d8:	447e      	add	r6, pc
	for (ptr = module->config.recv_buffer ; ; ) {
    16da:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    16dc:	e04d      	b.n	177a <_http_client_handle_header+0xae>
			_http_client_move_buffer(module, ptr);
    16de:	0021      	movs	r1, r4
    16e0:	0038      	movs	r0, r7
    16e2:	4b6b      	ldr	r3, [pc, #428]	; (1890 <_http_client_handle_header+0x1c4>)
    16e4:	58f3      	ldr	r3, [r6, r3]
    16e6:	9301      	str	r3, [sp, #4]
    16e8:	4798      	blx	r3
			return 0;
    16ea:	2300      	movs	r3, #0
    16ec:	4698      	mov	r8, r3
}
    16ee:	4640      	mov	r0, r8
    16f0:	b006      	add	sp, #24
    16f2:	bc04      	pop	{r2}
    16f4:	4690      	mov	r8, r2
    16f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    16f8:	1ca1      	adds	r1, r4, #2
    16fa:	0038      	movs	r0, r7
    16fc:	4b64      	ldr	r3, [pc, #400]	; (1890 <_http_client_handle_header+0x1c4>)
    16fe:	58f3      	ldr	r3, [r6, r3]
    1700:	9301      	str	r3, [sp, #4]
    1702:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    1704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1706:	2b00      	cmp	r3, #0
    1708:	d00a      	beq.n	1720 <_http_client_handle_header+0x54>
    170a:	22e4      	movs	r2, #228	; 0xe4
    170c:	5ab9      	ldrh	r1, [r7, r2]
    170e:	2900      	cmp	r1, #0
    1710:	d006      	beq.n	1720 <_http_client_handle_header+0x54>
				if (module->resp.content_length < 0) {
    1712:	3a08      	subs	r2, #8
    1714:	58b8      	ldr	r0, [r7, r2]
    1716:	2800      	cmp	r0, #0
    1718:	db08      	blt.n	172c <_http_client_handle_header+0x60>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    171a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    171c:	4290      	cmp	r0, r2
    171e:	dc11      	bgt.n	1744 <_http_client_handle_header+0x78>
			module->resp.state = STATE_PARSE_ENTITY;
    1720:	2201      	movs	r2, #1
    1722:	23d8      	movs	r3, #216	; 0xd8
    1724:	50fa      	str	r2, [r7, r3]
			return 1;
    1726:	3bd7      	subs	r3, #215	; 0xd7
    1728:	4698      	mov	r8, r3
    172a:	e7e0      	b.n	16ee <_http_client_handle_header+0x22>
					data.recv_response.response_code = module->resp.response_code;
    172c:	aa03      	add	r2, sp, #12
    172e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    1730:	2101      	movs	r1, #1
    1732:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    1734:	2100      	movs	r1, #0
    1736:	20e0      	movs	r0, #224	; 0xe0
    1738:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    173a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    173c:	3102      	adds	r1, #2
    173e:	0038      	movs	r0, r7
    1740:	4798      	blx	r3
    1742:	e7ed      	b.n	1720 <_http_client_handle_header+0x54>
					data.recv_response.response_code = module->resp.response_code;
    1744:	aa03      	add	r2, sp, #12
    1746:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    1748:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    174a:	2100      	movs	r1, #0
    174c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    174e:	20e0      	movs	r0, #224	; 0xe0
    1750:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    1752:	3102      	adds	r1, #2
    1754:	0038      	movs	r0, r7
    1756:	4798      	blx	r3
    1758:	e7e2      	b.n	1720 <_http_client_handle_header+0x54>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    175a:	0020      	movs	r0, r4
    175c:	3010      	adds	r0, #16
    175e:	4b4d      	ldr	r3, [pc, #308]	; (1894 <_http_client_handle_header+0x1c8>)
    1760:	58f3      	ldr	r3, [r6, r3]
    1762:	9301      	str	r3, [sp, #4]
    1764:	4798      	blx	r3
    1766:	23dc      	movs	r3, #220	; 0xdc
    1768:	50f8      	str	r0, [r7, r3]
    176a:	e005      	b.n	1778 <_http_client_handle_header+0xac>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    176c:	3401      	adds	r4, #1
    176e:	e033      	b.n	17d8 <_http_client_handle_header+0x10c>
					module->req.content_length = -1;
    1770:	2201      	movs	r2, #1
    1772:	4252      	negs	r2, r2
    1774:	23cc      	movs	r3, #204	; 0xcc
    1776:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    1778:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    177a:	4947      	ldr	r1, [pc, #284]	; (1898 <_http_client_handle_header+0x1cc>)
    177c:	4479      	add	r1, pc
    177e:	0020      	movs	r0, r4
    1780:	4b46      	ldr	r3, [pc, #280]	; (189c <_http_client_handle_header+0x1d0>)
    1782:	58f3      	ldr	r3, [r6, r3]
    1784:	9301      	str	r3, [sp, #4]
    1786:	4798      	blx	r3
    1788:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    178a:	d0a8      	beq.n	16de <_http_client_handle_header+0x12>
    178c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    178e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1790:	4694      	mov	ip, r2
    1792:	4463      	add	r3, ip
    1794:	4298      	cmp	r0, r3
    1796:	d2a2      	bcs.n	16de <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    1798:	2202      	movs	r2, #2
    179a:	4941      	ldr	r1, [pc, #260]	; (18a0 <_http_client_handle_header+0x1d4>)
    179c:	4479      	add	r1, pc
    179e:	0020      	movs	r0, r4
    17a0:	4b40      	ldr	r3, [pc, #256]	; (18a4 <_http_client_handle_header+0x1d8>)
    17a2:	58f3      	ldr	r3, [r6, r3]
    17a4:	9301      	str	r3, [sp, #4]
    17a6:	4798      	blx	r3
    17a8:	2800      	cmp	r0, #0
    17aa:	d0a5      	beq.n	16f8 <_http_client_handle_header+0x2c>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    17ac:	2210      	movs	r2, #16
    17ae:	493e      	ldr	r1, [pc, #248]	; (18a8 <_http_client_handle_header+0x1dc>)
    17b0:	4479      	add	r1, pc
    17b2:	0020      	movs	r0, r4
    17b4:	4b3b      	ldr	r3, [pc, #236]	; (18a4 <_http_client_handle_header+0x1d8>)
    17b6:	58f3      	ldr	r3, [r6, r3]
    17b8:	9301      	str	r3, [sp, #4]
    17ba:	4798      	blx	r3
    17bc:	2800      	cmp	r0, #0
    17be:	d0cc      	beq.n	175a <_http_client_handle_header+0x8e>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    17c0:	2213      	movs	r2, #19
    17c2:	493a      	ldr	r1, [pc, #232]	; (18ac <_http_client_handle_header+0x1e0>)
    17c4:	4479      	add	r1, pc
    17c6:	0020      	movs	r0, r4
    17c8:	4b36      	ldr	r3, [pc, #216]	; (18a4 <_http_client_handle_header+0x1d8>)
    17ca:	58f3      	ldr	r3, [r6, r3]
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	4798      	blx	r3
    17d0:	4680      	mov	r8, r0
    17d2:	2800      	cmp	r0, #0
    17d4:	d111      	bne.n	17fa <_http_client_handle_header+0x12e>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    17d6:	3413      	adds	r4, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    17d8:	42ac      	cmp	r4, r5
    17da:	d2cd      	bcs.n	1778 <_http_client_handle_header+0xac>
				if (*type_ptr == ' ') {
    17dc:	7823      	ldrb	r3, [r4, #0]
    17de:	2b20      	cmp	r3, #32
    17e0:	d0c4      	beq.n	176c <_http_client_handle_header+0xa0>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    17e2:	2b43      	cmp	r3, #67	; 0x43
    17e4:	d0c4      	beq.n	1770 <_http_client_handle_header+0xa4>
    17e6:	2b63      	cmp	r3, #99	; 0x63
    17e8:	d0c2      	beq.n	1770 <_http_client_handle_header+0xa4>
					_http_client_clear_conn(module, -ENOTSUP);
    17ea:	2186      	movs	r1, #134	; 0x86
    17ec:	4249      	negs	r1, r1
    17ee:	0038      	movs	r0, r7
    17f0:	4b2f      	ldr	r3, [pc, #188]	; (18b0 <_http_client_handle_header+0x1e4>)
    17f2:	58f3      	ldr	r3, [r6, r3]
    17f4:	9301      	str	r3, [sp, #4]
    17f6:	4798      	blx	r3
					return 0;
    17f8:	e779      	b.n	16ee <_http_client_handle_header+0x22>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    17fa:	220c      	movs	r2, #12
    17fc:	492d      	ldr	r1, [pc, #180]	; (18b4 <_http_client_handle_header+0x1e8>)
    17fe:	4479      	add	r1, pc
    1800:	0020      	movs	r0, r4
    1802:	4b28      	ldr	r3, [pc, #160]	; (18a4 <_http_client_handle_header+0x1d8>)
    1804:	58f3      	ldr	r3, [r6, r3]
    1806:	9301      	str	r3, [sp, #4]
    1808:	4798      	blx	r3
    180a:	2800      	cmp	r0, #0
    180c:	d117      	bne.n	183e <_http_client_handle_header+0x172>
			char *type_ptr = ptr + strlen("Connection: ");
    180e:	340c      	adds	r4, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1810:	42ac      	cmp	r4, r5
    1812:	d2b1      	bcs.n	1778 <_http_client_handle_header+0xac>
				if (*type_ptr == ' ') {
    1814:	7823      	ldrb	r3, [r4, #0]
    1816:	2b20      	cmp	r3, #32
    1818:	d009      	beq.n	182e <_http_client_handle_header+0x162>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    181a:	2b4b      	cmp	r3, #75	; 0x4b
    181c:	d009      	beq.n	1832 <_http_client_handle_header+0x166>
    181e:	2b6b      	cmp	r3, #107	; 0x6b
    1820:	d007      	beq.n	1832 <_http_client_handle_header+0x166>
					module->permanent = 0;
    1822:	2241      	movs	r2, #65	; 0x41
    1824:	5cbb      	ldrb	r3, [r7, r2]
    1826:	2102      	movs	r1, #2
    1828:	438b      	bics	r3, r1
    182a:	54bb      	strb	r3, [r7, r2]
    182c:	e7a4      	b.n	1778 <_http_client_handle_header+0xac>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    182e:	3401      	adds	r4, #1
    1830:	e7ee      	b.n	1810 <_http_client_handle_header+0x144>
					module->permanent = 1;
    1832:	2241      	movs	r2, #65	; 0x41
    1834:	5cbb      	ldrb	r3, [r7, r2]
    1836:	2102      	movs	r1, #2
    1838:	430b      	orrs	r3, r1
    183a:	54bb      	strb	r3, [r7, r2]
    183c:	e79c      	b.n	1778 <_http_client_handle_header+0xac>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    183e:	2205      	movs	r2, #5
    1840:	491d      	ldr	r1, [pc, #116]	; (18b8 <_http_client_handle_header+0x1ec>)
    1842:	4479      	add	r1, pc
    1844:	0020      	movs	r0, r4
    1846:	4b17      	ldr	r3, [pc, #92]	; (18a4 <_http_client_handle_header+0x1d8>)
    1848:	58f3      	ldr	r3, [r6, r3]
    184a:	9301      	str	r3, [sp, #4]
    184c:	4798      	blx	r3
    184e:	2800      	cmp	r0, #0
    1850:	d192      	bne.n	1778 <_http_client_handle_header+0xac>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    1852:	0020      	movs	r0, r4
    1854:	3009      	adds	r0, #9
    1856:	4b0f      	ldr	r3, [pc, #60]	; (1894 <_http_client_handle_header+0x1c8>)
    1858:	58f3      	ldr	r3, [r6, r3]
    185a:	9301      	str	r3, [sp, #4]
    185c:	4798      	blx	r3
    185e:	23e4      	movs	r3, #228	; 0xe4
    1860:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    1862:	2200      	movs	r2, #0
    1864:	3b08      	subs	r3, #8
    1866:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    1868:	7963      	ldrb	r3, [r4, #5]
    186a:	2b31      	cmp	r3, #49	; 0x31
    186c:	d802      	bhi.n	1874 <_http_client_handle_header+0x1a8>
    186e:	79e3      	ldrb	r3, [r4, #7]
    1870:	2b30      	cmp	r3, #48	; 0x30
    1872:	d905      	bls.n	1880 <_http_client_handle_header+0x1b4>
				module->permanent = 1;
    1874:	2241      	movs	r2, #65	; 0x41
    1876:	5cbb      	ldrb	r3, [r7, r2]
    1878:	2102      	movs	r1, #2
    187a:	430b      	orrs	r3, r1
    187c:	54bb      	strb	r3, [r7, r2]
    187e:	e77b      	b.n	1778 <_http_client_handle_header+0xac>
				module->permanent = 0;
    1880:	2241      	movs	r2, #65	; 0x41
    1882:	5cbb      	ldrb	r3, [r7, r2]
    1884:	2102      	movs	r1, #2
    1886:	438b      	bics	r3, r1
    1888:	54bb      	strb	r3, [r7, r2]
    188a:	e775      	b.n	1778 <_http_client_handle_header+0xac>
    188c:	000112b4 	.word	0x000112b4
    1890:	00000394 	.word	0x00000394
    1894:	00000458 	.word	0x00000458
    1898:	0000fd54 	.word	0x0000fd54
    189c:	0000025c 	.word	0x0000025c
    18a0:	0000fd34 	.word	0x0000fd34
    18a4:	00000290 	.word	0x00000290
    18a8:	0000fb20 	.word	0x0000fb20
    18ac:	0000fa1c 	.word	0x0000fa1c
    18b0:	000004f0 	.word	0x000004f0
    18b4:	0000f9f6 	.word	0x0000f9f6
    18b8:	0000f9c2 	.word	0x0000f9c2

000018bc <_http_client_read_chuked_entity>:
{
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18be:	46ce      	mov	lr, r9
    18c0:	4647      	mov	r7, r8
    18c2:	b580      	push	{r7, lr}
    18c4:	b087      	sub	sp, #28
    18c6:	0006      	movs	r6, r0
    18c8:	4b51      	ldr	r3, [pc, #324]	; (1a10 <_http_client_read_chuked_entity+0x154>)
    18ca:	447b      	add	r3, pc
    18cc:	4698      	mov	r8, r3
	int length = (int)module->recved_size;
    18ce:	6c44      	ldr	r4, [r0, #68]	; 0x44
	char *buffer= module->config.recv_buffer;
    18d0:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	int extension = 0;
    18d2:	2700      	movs	r7, #0
    18d4:	e00d      	b.n	18f2 <_http_client_read_chuked_entity+0x36>
				if (module->permanent == 0) {
    18d6:	2341      	movs	r3, #65	; 0x41
    18d8:	5cf3      	ldrb	r3, [r6, r3]
    18da:	079b      	lsls	r3, r3, #30
    18dc:	d520      	bpl.n	1920 <_http_client_read_chuked_entity+0x64>
				_http_client_move_buffer(module, buffer + 2);
    18de:	1ca9      	adds	r1, r5, #2
    18e0:	0030      	movs	r0, r6
    18e2:	4b4c      	ldr	r3, [pc, #304]	; (1a14 <_http_client_read_chuked_entity+0x158>)
    18e4:	4642      	mov	r2, r8
    18e6:	58d3      	ldr	r3, [r2, r3]
    18e8:	9301      	str	r3, [sp, #4]
    18ea:	4798      	blx	r3
	} while(module->recved_size > 0);
    18ec:	6c73      	ldr	r3, [r6, #68]	; 0x44
    18ee:	2b00      	cmp	r3, #0
    18f0:	d01d      	beq.n	192e <_http_client_read_chuked_entity+0x72>
		if (module->resp.read_length >= 0) {
    18f2:	23e0      	movs	r3, #224	; 0xe0
    18f4:	58f3      	ldr	r3, [r6, r3]
    18f6:	2b00      	cmp	r3, #0
    18f8:	db3e      	blt.n	1978 <_http_client_read_chuked_entity+0xbc>
			if (module->resp.read_length == 0) {
    18fa:	d11d      	bne.n	1938 <_http_client_read_chuked_entity+0x7c>
				module->resp.state = STATE_PARSE_HEADER;
    18fc:	2200      	movs	r2, #0
    18fe:	33d8      	adds	r3, #216	; 0xd8
    1900:	50f2      	str	r2, [r6, r3]
				module->resp.response_code = 0;
    1902:	330c      	adds	r3, #12
    1904:	52f2      	strh	r2, [r6, r3]
				data.recv_chunked_data.is_complete = 1;
    1906:	2101      	movs	r1, #1
    1908:	ab03      	add	r3, sp, #12
    190a:	7219      	strb	r1, [r3, #8]
				data.recv_chunked_data.length = 0;
    190c:	9203      	str	r2, [sp, #12]
				data.recv_chunked_data.data = NULL;
    190e:	9204      	str	r2, [sp, #16]
				if (module->cb) {
    1910:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    1912:	2b00      	cmp	r3, #0
    1914:	d0df      	beq.n	18d6 <_http_client_read_chuked_entity+0x1a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    1916:	aa03      	add	r2, sp, #12
    1918:	3102      	adds	r1, #2
    191a:	0030      	movs	r0, r6
    191c:	4798      	blx	r3
    191e:	e7da      	b.n	18d6 <_http_client_read_chuked_entity+0x1a>
					_http_client_clear_conn(module, 0);
    1920:	2100      	movs	r1, #0
    1922:	0030      	movs	r0, r6
    1924:	4b3c      	ldr	r3, [pc, #240]	; (1a18 <_http_client_read_chuked_entity+0x15c>)
    1926:	4642      	mov	r2, r8
    1928:	58d3      	ldr	r3, [r2, r3]
    192a:	9301      	str	r3, [sp, #4]
    192c:	4798      	blx	r3
}
    192e:	b007      	add	sp, #28
    1930:	bc0c      	pop	{r2, r3}
    1932:	4690      	mov	r8, r2
    1934:	4699      	mov	r9, r3
    1936:	bdf0      	pop	{r4, r5, r6, r7, pc}
			} else if (module->resp.read_length <= length) {
    1938:	429c      	cmp	r4, r3
    193a:	dbd7      	blt.n	18ec <_http_client_read_chuked_entity+0x30>
				data.recv_chunked_data.length = module->resp.read_length;
    193c:	9303      	str	r3, [sp, #12]
				data.recv_chunked_data.data = buffer;
    193e:	ab03      	add	r3, sp, #12
    1940:	9504      	str	r5, [sp, #16]
				data.recv_chunked_data.is_complete = 0;
    1942:	2200      	movs	r2, #0
    1944:	721a      	strb	r2, [r3, #8]
				if (module->cb) {
    1946:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    1948:	2b00      	cmp	r3, #0
    194a:	d003      	beq.n	1954 <_http_client_read_chuked_entity+0x98>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    194c:	aa03      	add	r2, sp, #12
    194e:	2103      	movs	r1, #3
    1950:	0030      	movs	r0, r6
    1952:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    1954:	23e0      	movs	r3, #224	; 0xe0
    1956:	4699      	mov	r9, r3
    1958:	58f3      	ldr	r3, [r6, r3]
    195a:	1c99      	adds	r1, r3, #2
    195c:	1869      	adds	r1, r5, r1
    195e:	0030      	movs	r0, r6
    1960:	4b2c      	ldr	r3, [pc, #176]	; (1a14 <_http_client_read_chuked_entity+0x158>)
    1962:	4642      	mov	r2, r8
    1964:	58d3      	ldr	r3, [r2, r3]
    1966:	9301      	str	r3, [sp, #4]
    1968:	4798      	blx	r3
				length = (int)module->recved_size;
    196a:	6c74      	ldr	r4, [r6, #68]	; 0x44
				buffer = module->config.recv_buffer;
    196c:	6df5      	ldr	r5, [r6, #92]	; 0x5c
				module->resp.read_length = -1;
    196e:	2301      	movs	r3, #1
    1970:	425b      	negs	r3, r3
    1972:	464a      	mov	r2, r9
    1974:	50b3      	str	r3, [r6, r2]
    1976:	e7b9      	b.n	18ec <_http_client_read_chuked_entity+0x30>
			module->resp.read_length = 0;
    1978:	2200      	movs	r2, #0
    197a:	23e0      	movs	r3, #224	; 0xe0
    197c:	50f2      	str	r2, [r6, r3]
			for (; length > 0; buffer++, length--) {
    197e:	e01a      	b.n	19b6 <_http_client_read_chuked_entity+0xfa>
					buffer++;
    1980:	3501      	adds	r5, #1
					length--;
    1982:	3c01      	subs	r4, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    1984:	23e0      	movs	r3, #224	; 0xe0
    1986:	58f3      	ldr	r3, [r6, r3]
    1988:	6e32      	ldr	r2, [r6, #96]	; 0x60
    198a:	4293      	cmp	r3, r2
    198c:	dc36      	bgt.n	19fc <_http_client_read_chuked_entity+0x140>
			if (length  == 0) {
    198e:	2c00      	cmp	r4, #0
    1990:	d1ac      	bne.n	18ec <_http_client_read_chuked_entity+0x30>
				module->resp.read_length = -1;
    1992:	2201      	movs	r2, #1
    1994:	4252      	negs	r2, r2
    1996:	23e0      	movs	r3, #224	; 0xe0
    1998:	50f2      	str	r2, [r6, r3]
				return;
    199a:	e7c8      	b.n	192e <_http_client_read_chuked_entity+0x72>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    199c:	001a      	movs	r2, r3
    199e:	3a61      	subs	r2, #97	; 0x61
    19a0:	b2d2      	uxtb	r2, r2
    19a2:	2a05      	cmp	r2, #5
    19a4:	d81a      	bhi.n	19dc <_http_client_read_chuked_entity+0x120>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    19a6:	21e0      	movs	r1, #224	; 0xe0
    19a8:	5872      	ldr	r2, [r6, r1]
    19aa:	0112      	lsls	r2, r2, #4
    19ac:	18d3      	adds	r3, r2, r3
    19ae:	3b61      	subs	r3, #97	; 0x61
    19b0:	5073      	str	r3, [r6, r1]
			for (; length > 0; buffer++, length--) {
    19b2:	3501      	adds	r5, #1
    19b4:	3c01      	subs	r4, #1
    19b6:	2c00      	cmp	r4, #0
    19b8:	dde4      	ble.n	1984 <_http_client_read_chuked_entity+0xc8>
				if (*buffer == '\n') {
    19ba:	782b      	ldrb	r3, [r5, #0]
    19bc:	2b0a      	cmp	r3, #10
    19be:	d0df      	beq.n	1980 <_http_client_read_chuked_entity+0xc4>
				if (extension != 0) {
    19c0:	2f00      	cmp	r7, #0
    19c2:	d1f6      	bne.n	19b2 <_http_client_read_chuked_entity+0xf6>
				if (*buffer >= '0' && *buffer <= '9') {
    19c4:	001a      	movs	r2, r3
    19c6:	3a30      	subs	r2, #48	; 0x30
    19c8:	b2d2      	uxtb	r2, r2
    19ca:	2a09      	cmp	r2, #9
    19cc:	d8e6      	bhi.n	199c <_http_client_read_chuked_entity+0xe0>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    19ce:	21e0      	movs	r1, #224	; 0xe0
    19d0:	5872      	ldr	r2, [r6, r1]
    19d2:	0112      	lsls	r2, r2, #4
    19d4:	18d3      	adds	r3, r2, r3
    19d6:	3b30      	subs	r3, #48	; 0x30
    19d8:	5073      	str	r3, [r6, r1]
    19da:	e7ea      	b.n	19b2 <_http_client_read_chuked_entity+0xf6>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    19dc:	001a      	movs	r2, r3
    19de:	3a41      	subs	r2, #65	; 0x41
    19e0:	b2d2      	uxtb	r2, r2
    19e2:	2a05      	cmp	r2, #5
    19e4:	d806      	bhi.n	19f4 <_http_client_read_chuked_entity+0x138>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    19e6:	21e0      	movs	r1, #224	; 0xe0
    19e8:	5872      	ldr	r2, [r6, r1]
    19ea:	0112      	lsls	r2, r2, #4
    19ec:	18d3      	adds	r3, r2, r3
    19ee:	3b41      	subs	r3, #65	; 0x41
    19f0:	5073      	str	r3, [r6, r1]
    19f2:	e7de      	b.n	19b2 <_http_client_read_chuked_entity+0xf6>
				} else if (*buffer == ';') {
    19f4:	2b3b      	cmp	r3, #59	; 0x3b
    19f6:	d1dc      	bne.n	19b2 <_http_client_read_chuked_entity+0xf6>
					extension = 1;
    19f8:	2701      	movs	r7, #1
    19fa:	e7da      	b.n	19b2 <_http_client_read_chuked_entity+0xf6>
				_http_client_clear_conn(module, -EOVERFLOW);
    19fc:	218b      	movs	r1, #139	; 0x8b
    19fe:	4249      	negs	r1, r1
    1a00:	0030      	movs	r0, r6
    1a02:	4b05      	ldr	r3, [pc, #20]	; (1a18 <_http_client_read_chuked_entity+0x15c>)
    1a04:	4642      	mov	r2, r8
    1a06:	58d3      	ldr	r3, [r2, r3]
    1a08:	9301      	str	r3, [sp, #4]
    1a0a:	4798      	blx	r3
				return;
    1a0c:	e78f      	b.n	192e <_http_client_read_chuked_entity+0x72>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	000110c2 	.word	0x000110c2
    1a14:	00000394 	.word	0x00000394
    1a18:	000004f0 	.word	0x000004f0

00001a1c <_http_client_handle_entity>:
{
    1a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1e:	b087      	sub	sp, #28
    1a20:	0004      	movs	r4, r0
    1a22:	4e40      	ldr	r6, [pc, #256]	; (1b24 <_http_client_handle_entity+0x108>)
    1a24:	447e      	add	r6, pc
	char *buffer = module->config.recv_buffer;
    1a26:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    1a28:	23dc      	movs	r3, #220	; 0xdc
    1a2a:	58c3      	ldr	r3, [r0, r3]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	db31      	blt.n	1a94 <_http_client_handle_entity+0x78>
    1a30:	6e02      	ldr	r2, [r0, #96]	; 0x60
    1a32:	4293      	cmp	r3, r2
    1a34:	dc2e      	bgt.n	1a94 <_http_client_handle_entity+0x78>
		if ((int)module->recved_size >= module->resp.content_length) {
    1a36:	6c42      	ldr	r2, [r0, #68]	; 0x44
    1a38:	4293      	cmp	r3, r2
    1a3a:	dd00      	ble.n	1a3e <_http_client_handle_entity+0x22>
    1a3c:	e06f      	b.n	1b1e <_http_client_handle_entity+0x102>
			if (module->cb && module->resp.response_code) {
    1a3e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    1a40:	2f00      	cmp	r7, #0
    1a42:	d003      	beq.n	1a4c <_http_client_handle_entity+0x30>
    1a44:	22e4      	movs	r2, #228	; 0xe4
    1a46:	5a81      	ldrh	r1, [r0, r2]
    1a48:	2900      	cmp	r1, #0
    1a4a:	d110      	bne.n	1a6e <_http_client_handle_entity+0x52>
			module->resp.state = STATE_PARSE_HEADER;
    1a4c:	2300      	movs	r3, #0
    1a4e:	22d8      	movs	r2, #216	; 0xd8
    1a50:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    1a52:	320c      	adds	r2, #12
    1a54:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    1a56:	3341      	adds	r3, #65	; 0x41
    1a58:	5ce3      	ldrb	r3, [r4, r3]
    1a5a:	079b      	lsls	r3, r3, #30
    1a5c:	d410      	bmi.n	1a80 <_http_client_handle_entity+0x64>
				_http_client_clear_conn(module, 0);
    1a5e:	2100      	movs	r1, #0
    1a60:	0020      	movs	r0, r4
    1a62:	4b31      	ldr	r3, [pc, #196]	; (1b28 <_http_client_handle_entity+0x10c>)
    1a64:	58f3      	ldr	r3, [r6, r3]
    1a66:	9301      	str	r3, [sp, #4]
    1a68:	4798      	blx	r3
	return 0;
    1a6a:	2000      	movs	r0, #0
    1a6c:	e03d      	b.n	1aea <_http_client_handle_entity+0xce>
				data.recv_response.response_code = module->resp.response_code;
    1a6e:	aa03      	add	r2, sp, #12
    1a70:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    1a72:	2100      	movs	r1, #0
    1a74:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    1a76:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    1a78:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    1a7a:	3102      	adds	r1, #2
    1a7c:	47b8      	blx	r7
    1a7e:	e7e5      	b.n	1a4c <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    1a80:	23dc      	movs	r3, #220	; 0xdc
    1a82:	58e1      	ldr	r1, [r4, r3]
    1a84:	1869      	adds	r1, r5, r1
    1a86:	0020      	movs	r0, r4
    1a88:	4b28      	ldr	r3, [pc, #160]	; (1b2c <_http_client_handle_entity+0x110>)
    1a8a:	58f3      	ldr	r3, [r6, r3]
    1a8c:	9301      	str	r3, [sp, #4]
    1a8e:	4798      	blx	r3
				return module->recved_size;
    1a90:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1a92:	e02a      	b.n	1aea <_http_client_handle_entity+0xce>
		if (module->resp.content_length >= 0) {
    1a94:	2b00      	cmp	r3, #0
    1a96:	db3c      	blt.n	1b12 <_http_client_handle_entity+0xf6>
			data.recv_chunked_data.length = module->recved_size;
    1a98:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1a9a:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    1a9c:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    1a9e:	21e0      	movs	r1, #224	; 0xe0
    1aa0:	5860      	ldr	r0, [r4, r1]
    1aa2:	4684      	mov	ip, r0
    1aa4:	4462      	add	r2, ip
    1aa6:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    1aa8:	4293      	cmp	r3, r2
    1aaa:	dc20      	bgt.n	1aee <_http_client_handle_entity+0xd2>
				module->resp.state = STATE_PARSE_HEADER;
    1aac:	2300      	movs	r3, #0
    1aae:	22d8      	movs	r2, #216	; 0xd8
    1ab0:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    1ab2:	320c      	adds	r2, #12
    1ab4:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    1ab6:	3ae3      	subs	r2, #227	; 0xe3
    1ab8:	ab03      	add	r3, sp, #12
    1aba:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    1abc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d003      	beq.n	1aca <_http_client_handle_entity+0xae>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    1ac2:	aa03      	add	r2, sp, #12
    1ac4:	2103      	movs	r1, #3
    1ac6:	0020      	movs	r0, r4
    1ac8:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    1aca:	ab03      	add	r3, sp, #12
    1acc:	7a1b      	ldrb	r3, [r3, #8]
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d103      	bne.n	1ada <_http_client_handle_entity+0xbe>
				if (module->permanent == 0) {
    1ad2:	3340      	adds	r3, #64	; 0x40
    1ad4:	5ce3      	ldrb	r3, [r4, r3]
    1ad6:	079b      	lsls	r3, r3, #30
    1ad8:	d50d      	bpl.n	1af6 <_http_client_handle_entity+0xda>
			_http_client_move_buffer(module, buffer + module->recved_size);
    1ada:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1adc:	18e9      	adds	r1, r5, r3
    1ade:	0020      	movs	r0, r4
    1ae0:	4b12      	ldr	r3, [pc, #72]	; (1b2c <_http_client_handle_entity+0x110>)
    1ae2:	58f3      	ldr	r3, [r6, r3]
    1ae4:	9301      	str	r3, [sp, #4]
    1ae6:	4798      	blx	r3
	return 0;
    1ae8:	2000      	movs	r0, #0
}
    1aea:	b007      	add	sp, #28
    1aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    1aee:	2200      	movs	r2, #0
    1af0:	ab03      	add	r3, sp, #12
    1af2:	721a      	strb	r2, [r3, #8]
    1af4:	e7e2      	b.n	1abc <_http_client_handle_entity+0xa0>
					printf("1\r\n");
    1af6:	480e      	ldr	r0, [pc, #56]	; (1b30 <_http_client_handle_entity+0x114>)
    1af8:	4478      	add	r0, pc
    1afa:	4b0e      	ldr	r3, [pc, #56]	; (1b34 <_http_client_handle_entity+0x118>)
    1afc:	58f3      	ldr	r3, [r6, r3]
    1afe:	9301      	str	r3, [sp, #4]
    1b00:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    1b02:	2100      	movs	r1, #0
    1b04:	0020      	movs	r0, r4
    1b06:	4b08      	ldr	r3, [pc, #32]	; (1b28 <_http_client_handle_entity+0x10c>)
    1b08:	58f3      	ldr	r3, [r6, r3]
    1b0a:	9301      	str	r3, [sp, #4]
    1b0c:	4798      	blx	r3
					return 0;
    1b0e:	2000      	movs	r0, #0
    1b10:	e7eb      	b.n	1aea <_http_client_handle_entity+0xce>
			_http_client_read_chuked_entity(module);
    1b12:	0020      	movs	r0, r4
    1b14:	4b08      	ldr	r3, [pc, #32]	; (1b38 <_http_client_handle_entity+0x11c>)
    1b16:	447b      	add	r3, pc
    1b18:	4798      	blx	r3
	return 0;
    1b1a:	2000      	movs	r0, #0
    1b1c:	e7e5      	b.n	1aea <_http_client_handle_entity+0xce>
    1b1e:	2000      	movs	r0, #0
    1b20:	e7e3      	b.n	1aea <_http_client_handle_entity+0xce>
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	00010f68 	.word	0x00010f68
    1b28:	000004f0 	.word	0x000004f0
    1b2c:	00000394 	.word	0x00000394
    1b30:	0000f6e4 	.word	0x0000f6e4
    1b34:	00000108 	.word	0x00000108
    1b38:	fffffda3 	.word	0xfffffda3

00001b3c <_http_client_handle_response>:
{
    1b3c:	b500      	push	{lr}
    1b3e:	b083      	sub	sp, #12
    1b40:	4b0a      	ldr	r3, [pc, #40]	; (1b6c <_http_client_handle_response+0x30>)
    1b42:	447b      	add	r3, pc
	switch(module->resp.state) {
    1b44:	22d8      	movs	r2, #216	; 0xd8
    1b46:	5882      	ldr	r2, [r0, r2]
    1b48:	2a00      	cmp	r2, #0
    1b4a:	d003      	beq.n	1b54 <_http_client_handle_response+0x18>
    1b4c:	2a01      	cmp	r2, #1
    1b4e:	d007      	beq.n	1b60 <_http_client_handle_response+0x24>
	return 0;
    1b50:	2000      	movs	r0, #0
    1b52:	e003      	b.n	1b5c <_http_client_handle_response+0x20>
		return _http_client_handle_header(module);
    1b54:	4a06      	ldr	r2, [pc, #24]	; (1b70 <_http_client_handle_response+0x34>)
    1b56:	589b      	ldr	r3, [r3, r2]
    1b58:	9301      	str	r3, [sp, #4]
    1b5a:	4798      	blx	r3
}
    1b5c:	b003      	add	sp, #12
    1b5e:	bd00      	pop	{pc}
		return _http_client_handle_entity(module);
    1b60:	4a04      	ldr	r2, [pc, #16]	; (1b74 <_http_client_handle_response+0x38>)
    1b62:	589b      	ldr	r3, [r3, r2]
    1b64:	9301      	str	r3, [sp, #4]
    1b66:	4798      	blx	r3
    1b68:	e7f8      	b.n	1b5c <_http_client_handle_response+0x20>
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	00010e4a 	.word	0x00010e4a
    1b70:	00000054 	.word	0x00000054
    1b74:	000003ec 	.word	0x000003ec

00001b78 <_http_client_recved_packet>:
{
    1b78:	b530      	push	{r4, r5, lr}
    1b7a:	b083      	sub	sp, #12
    1b7c:	0004      	movs	r4, r0
    1b7e:	4d0d      	ldr	r5, [pc, #52]	; (1bb4 <_http_client_recved_packet+0x3c>)
    1b80:	447d      	add	r5, pc
	module->recved_size += read_len;
    1b82:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1b84:	469c      	mov	ip, r3
    1b86:	4461      	add	r1, ip
    1b88:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    1b8a:	2358      	movs	r3, #88	; 0x58
    1b8c:	5ac3      	ldrh	r3, [r0, r3]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d108      	bne.n	1ba4 <_http_client_recved_packet+0x2c>
	while(_http_client_handle_response(module) != 0);
    1b92:	0020      	movs	r0, r4
    1b94:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <_http_client_recved_packet+0x40>)
    1b96:	58eb      	ldr	r3, [r5, r3]
    1b98:	9301      	str	r3, [sp, #4]
    1b9a:	4798      	blx	r3
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d1f8      	bne.n	1b92 <_http_client_recved_packet+0x1a>
}
    1ba0:	b003      	add	sp, #12
    1ba2:	bd30      	pop	{r4, r5, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    1ba4:	6c81      	ldr	r1, [r0, #72]	; 0x48
    1ba6:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <_http_client_recved_packet+0x44>)
    1baa:	58eb      	ldr	r3, [r5, r3]
    1bac:	9301      	str	r3, [sp, #4]
    1bae:	4798      	blx	r3
    1bb0:	e7ef      	b.n	1b92 <_http_client_recved_packet+0x1a>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	00010e0c 	.word	0x00010e0c
    1bb8:	0000034c 	.word	0x0000034c
    1bbc:	000003bc 	.word	0x000003bc

00001bc0 <http_client_socket_event_handler>:
{
    1bc0:	b530      	push	{r4, r5, lr}
    1bc2:	b087      	sub	sp, #28
    1bc4:	4d7c      	ldr	r5, [pc, #496]	; (1db8 <http_client_socket_event_handler+0x1f8>)
    1bc6:	447d      	add	r5, pc
	struct http_client_module *module = module_ref_inst[sock];
    1bc8:	0080      	lsls	r0, r0, #2
    1bca:	4b7c      	ldr	r3, [pc, #496]	; (1dbc <http_client_socket_event_handler+0x1fc>)
    1bcc:	447b      	add	r3, pc
    1bce:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    1bd0:	2c00      	cmp	r4, #0
    1bd2:	d006      	beq.n	1be2 <http_client_socket_event_handler+0x22>
	switch (msg_type) {
    1bd4:	2906      	cmp	r1, #6
    1bd6:	d05f      	beq.n	1c98 <http_client_socket_event_handler+0xd8>
    1bd8:	2907      	cmp	r1, #7
    1bda:	d100      	bne.n	1bde <http_client_socket_event_handler+0x1e>
    1bdc:	e0a4      	b.n	1d28 <http_client_socket_event_handler+0x168>
    1bde:	2905      	cmp	r1, #5
    1be0:	d001      	beq.n	1be6 <http_client_socket_event_handler+0x26>
}
    1be2:	b007      	add	sp, #28
    1be4:	bd30      	pop	{r4, r5, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    1be6:	2001      	movs	r0, #1
    1be8:	5610      	ldrsb	r0, [r2, r0]
    1bea:	9003      	str	r0, [sp, #12]
    	if (msg_connect->s8Error < 0) {
    1bec:	2800      	cmp	r0, #0
    1bee:	db1b      	blt.n	1c28 <http_client_socket_event_handler+0x68>
			if (module->cb != NULL) {
    1bf0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d003      	beq.n	1bfe <http_client_socket_event_handler+0x3e>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    1bf6:	aa03      	add	r2, sp, #12
    1bf8:	2100      	movs	r1, #0
    1bfa:	0020      	movs	r0, r4
    1bfc:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    1bfe:	2303      	movs	r3, #3
    1c00:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    1c02:	3355      	adds	r3, #85	; 0x55
    1c04:	5ae2      	ldrh	r2, [r4, r3]
    1c06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    1c08:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1c0a:	4b6d      	ldr	r3, [pc, #436]	; (1dc0 <http_client_socket_event_handler+0x200>)
    1c0c:	58eb      	ldr	r3, [r5, r3]
    1c0e:	9301      	str	r3, [sp, #4]
    1c10:	4798      	blx	r3
    		_http_client_recv_packet(module);
    1c12:	0020      	movs	r0, r4
    1c14:	4b6b      	ldr	r3, [pc, #428]	; (1dc4 <http_client_socket_event_handler+0x204>)
    1c16:	58eb      	ldr	r3, [r5, r3]
    1c18:	9301      	str	r3, [sp, #4]
    1c1a:	4798      	blx	r3
			_http_client_request(module);
    1c1c:	0020      	movs	r0, r4
    1c1e:	4b6a      	ldr	r3, [pc, #424]	; (1dc8 <http_client_socket_event_handler+0x208>)
    1c20:	58eb      	ldr	r3, [r5, r3]
    1c22:	9301      	str	r3, [sp, #4]
    1c24:	4798      	blx	r3
    1c26:	e7dc      	b.n	1be2 <http_client_socket_event_handler+0x22>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    1c28:	0003      	movs	r3, r0
	switch (err) {
    1c2a:	300e      	adds	r0, #14
    1c2c:	280e      	cmp	r0, #14
    1c2e:	d824      	bhi.n	1c7a <http_client_socket_event_handler+0xba>
    1c30:	f00d fcf6 	bl	f620 <__gnu_thumb1_case_uqi>
    1c34:	171a1d20 	.word	0x171a1d20
    1c38:	14230823 	.word	0x14230823
    1c3c:	0e0e2311 	.word	0x0e0e2311
    1c40:	2a0b      	.short	0x2a0b
    1c42:	08          	.byte	0x08
    1c43:	00          	.byte	0x00
			return -EIO;
    1c44:	2105      	movs	r1, #5
    1c46:	4249      	negs	r1, r1
    1c48:	e020      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -EADDRINUSE;
    1c4a:	2170      	movs	r1, #112	; 0x70
    1c4c:	4249      	negs	r1, r1
    1c4e:	e01d      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -ENOMEM;
    1c50:	210c      	movs	r1, #12
    1c52:	4249      	negs	r1, r1
    1c54:	e01a      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -EINVAL;
    1c56:	2116      	movs	r1, #22
    1c58:	4249      	negs	r1, r1
    1c5a:	e017      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -ENOMEM;
    1c5c:	210c      	movs	r1, #12
    1c5e:	4249      	negs	r1, r1
    1c60:	e014      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -EDESTADDRREQ;
    1c62:	2179      	movs	r1, #121	; 0x79
    1c64:	4249      	negs	r1, r1
    1c66:	e011      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -ECONNRESET;
    1c68:	2168      	movs	r1, #104	; 0x68
    1c6a:	4249      	negs	r1, r1
    1c6c:	e00e      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -EAGAIN;
    1c6e:	210b      	movs	r1, #11
    1c70:	4249      	negs	r1, r1
    1c72:	e00b      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -EBUSY; /* HW error occurred. Retry it*/
    1c74:	2110      	movs	r1, #16
    1c76:	4249      	negs	r1, r1
    1c78:	e008      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			if (err < 0) {
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	db01      	blt.n	1c82 <http_client_socket_event_handler+0xc2>
			return 0;
    1c7e:	2100      	movs	r1, #0
    1c80:	e004      	b.n	1c8c <http_client_socket_event_handler+0xcc>
				return -EIO;
    1c82:	2105      	movs	r1, #5
    1c84:	4249      	negs	r1, r1
    1c86:	e001      	b.n	1c8c <http_client_socket_event_handler+0xcc>
			return -ENOENT;
    1c88:	2102      	movs	r1, #2
    1c8a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    1c8c:	0020      	movs	r0, r4
    1c8e:	4b4f      	ldr	r3, [pc, #316]	; (1dcc <http_client_socket_event_handler+0x20c>)
    1c90:	58eb      	ldr	r3, [r5, r3]
    1c92:	9301      	str	r3, [sp, #4]
    1c94:	4798      	blx	r3
    1c96:	e7a4      	b.n	1be2 <http_client_socket_event_handler+0x22>
    	if (msg_recv->s16BufferSize > 0) {
    1c98:	2304      	movs	r3, #4
    1c9a:	5ed1      	ldrsh	r1, [r2, r3]
    1c9c:	2900      	cmp	r1, #0
    1c9e:	dd0a      	ble.n	1cb6 <http_client_socket_event_handler+0xf6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    1ca0:	0020      	movs	r0, r4
    1ca2:	4b4b      	ldr	r3, [pc, #300]	; (1dd0 <http_client_socket_event_handler+0x210>)
    1ca4:	58eb      	ldr	r3, [r5, r3]
    1ca6:	9301      	str	r3, [sp, #4]
    1ca8:	4798      	blx	r3
		_http_client_recv_packet(module);
    1caa:	0020      	movs	r0, r4
    1cac:	4b45      	ldr	r3, [pc, #276]	; (1dc4 <http_client_socket_event_handler+0x204>)
    1cae:	58eb      	ldr	r3, [r5, r3]
    1cb0:	9301      	str	r3, [sp, #4]
    1cb2:	4798      	blx	r3
		break;
    1cb4:	e795      	b.n	1be2 <http_client_socket_event_handler+0x22>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    1cb6:	000b      	movs	r3, r1
	switch (err) {
    1cb8:	310e      	adds	r1, #14
    1cba:	0008      	movs	r0, r1
    1cbc:	290e      	cmp	r1, #14
    1cbe:	d824      	bhi.n	1d0a <http_client_socket_event_handler+0x14a>
    1cc0:	f00d fcae 	bl	f620 <__gnu_thumb1_case_uqi>
    1cc4:	171a1d20 	.word	0x171a1d20
    1cc8:	14230823 	.word	0x14230823
    1ccc:	0e0e2311 	.word	0x0e0e2311
    1cd0:	2a0b      	.short	0x2a0b
    1cd2:	08          	.byte	0x08
    1cd3:	00          	.byte	0x00
			return -EIO;
    1cd4:	2105      	movs	r1, #5
    1cd6:	4249      	negs	r1, r1
    1cd8:	e020      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -EADDRINUSE;
    1cda:	2170      	movs	r1, #112	; 0x70
    1cdc:	4249      	negs	r1, r1
    1cde:	e01d      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -ENOMEM;
    1ce0:	210c      	movs	r1, #12
    1ce2:	4249      	negs	r1, r1
    1ce4:	e01a      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -EINVAL;
    1ce6:	2116      	movs	r1, #22
    1ce8:	4249      	negs	r1, r1
    1cea:	e017      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -ENOMEM;
    1cec:	210c      	movs	r1, #12
    1cee:	4249      	negs	r1, r1
    1cf0:	e014      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -EDESTADDRREQ;
    1cf2:	2179      	movs	r1, #121	; 0x79
    1cf4:	4249      	negs	r1, r1
    1cf6:	e011      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -ECONNRESET;
    1cf8:	2168      	movs	r1, #104	; 0x68
    1cfa:	4249      	negs	r1, r1
    1cfc:	e00e      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -EAGAIN;
    1cfe:	210b      	movs	r1, #11
    1d00:	4249      	negs	r1, r1
    1d02:	e00b      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -EBUSY; /* HW error occurred. Retry it*/
    1d04:	2110      	movs	r1, #16
    1d06:	4249      	negs	r1, r1
    1d08:	e008      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			if (err < 0) {
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	db01      	blt.n	1d12 <http_client_socket_event_handler+0x152>
			return 0;
    1d0e:	2100      	movs	r1, #0
    1d10:	e004      	b.n	1d1c <http_client_socket_event_handler+0x15c>
				return -EIO;
    1d12:	2105      	movs	r1, #5
    1d14:	4249      	negs	r1, r1
    1d16:	e001      	b.n	1d1c <http_client_socket_event_handler+0x15c>
			return -ENOENT;
    1d18:	2102      	movs	r1, #2
    1d1a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    1d1c:	0020      	movs	r0, r4
    1d1e:	4b2b      	ldr	r3, [pc, #172]	; (1dcc <http_client_socket_event_handler+0x20c>)
    1d20:	58eb      	ldr	r3, [r5, r3]
    1d22:	9301      	str	r3, [sp, #4]
    1d24:	4798      	blx	r3
    1d26:	e7c0      	b.n	1caa <http_client_socket_event_handler+0xea>
		send_ret = *(int16_t*)msg_data;
    1d28:	2300      	movs	r3, #0
    1d2a:	5ed0      	ldrsh	r0, [r2, r3]
		if (send_ret < 0) {
    1d2c:	2800      	cmp	r0, #0
    1d2e:	db0a      	blt.n	1d46 <http_client_socket_event_handler+0x186>
    		_http_client_request(module);
    1d30:	0020      	movs	r0, r4
    1d32:	4b25      	ldr	r3, [pc, #148]	; (1dc8 <http_client_socket_event_handler+0x208>)
    1d34:	58eb      	ldr	r3, [r5, r3]
    1d36:	9301      	str	r3, [sp, #4]
    1d38:	4798      	blx	r3
		module->sending = 0;
    1d3a:	2241      	movs	r2, #65	; 0x41
    1d3c:	5ca3      	ldrb	r3, [r4, r2]
    1d3e:	2101      	movs	r1, #1
    1d40:	438b      	bics	r3, r1
    1d42:	54a3      	strb	r3, [r4, r2]
    	break;
    1d44:	e74d      	b.n	1be2 <http_client_socket_event_handler+0x22>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    1d46:	0003      	movs	r3, r0
	switch (err) {
    1d48:	300e      	adds	r0, #14
    1d4a:	280e      	cmp	r0, #14
    1d4c:	d824      	bhi.n	1d98 <http_client_socket_event_handler+0x1d8>
    1d4e:	f00d fc67 	bl	f620 <__gnu_thumb1_case_uqi>
    1d52:	1d20      	.short	0x1d20
    1d54:	0823171a 	.word	0x0823171a
    1d58:	23111423 	.word	0x23111423
    1d5c:	2a0b0e0e 	.word	0x2a0b0e0e
    1d60:	08          	.byte	0x08
    1d61:	00          	.byte	0x00
			return -EIO;
    1d62:	2105      	movs	r1, #5
    1d64:	4249      	negs	r1, r1
    1d66:	e020      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -EADDRINUSE;
    1d68:	2170      	movs	r1, #112	; 0x70
    1d6a:	4249      	negs	r1, r1
    1d6c:	e01d      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -ENOMEM;
    1d6e:	210c      	movs	r1, #12
    1d70:	4249      	negs	r1, r1
    1d72:	e01a      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -EINVAL;
    1d74:	2116      	movs	r1, #22
    1d76:	4249      	negs	r1, r1
    1d78:	e017      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -ENOMEM;
    1d7a:	210c      	movs	r1, #12
    1d7c:	4249      	negs	r1, r1
    1d7e:	e014      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -EDESTADDRREQ;
    1d80:	2179      	movs	r1, #121	; 0x79
    1d82:	4249      	negs	r1, r1
    1d84:	e011      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -ECONNRESET;
    1d86:	2168      	movs	r1, #104	; 0x68
    1d88:	4249      	negs	r1, r1
    1d8a:	e00e      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -EAGAIN;
    1d8c:	210b      	movs	r1, #11
    1d8e:	4249      	negs	r1, r1
    1d90:	e00b      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -EBUSY; /* HW error occurred. Retry it*/
    1d92:	2110      	movs	r1, #16
    1d94:	4249      	negs	r1, r1
    1d96:	e008      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			if (err < 0) {
    1d98:	2b00      	cmp	r3, #0
    1d9a:	db01      	blt.n	1da0 <http_client_socket_event_handler+0x1e0>
			return 0;
    1d9c:	2100      	movs	r1, #0
    1d9e:	e004      	b.n	1daa <http_client_socket_event_handler+0x1ea>
				return -EIO;
    1da0:	2105      	movs	r1, #5
    1da2:	4249      	negs	r1, r1
    1da4:	e001      	b.n	1daa <http_client_socket_event_handler+0x1ea>
			return -ENOENT;
    1da6:	2102      	movs	r1, #2
    1da8:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    1daa:	0020      	movs	r0, r4
    1dac:	4b07      	ldr	r3, [pc, #28]	; (1dcc <http_client_socket_event_handler+0x20c>)
    1dae:	58eb      	ldr	r3, [r5, r3]
    1db0:	9301      	str	r3, [sp, #4]
    1db2:	4798      	blx	r3
    1db4:	e7c1      	b.n	1d3a <http_client_socket_event_handler+0x17a>
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00010dc6 	.word	0x00010dc6
    1dbc:	1fffe840 	.word	0x1fffe840
    1dc0:	000002e8 	.word	0x000002e8
    1dc4:	000001f0 	.word	0x000001f0
    1dc8:	000004e8 	.word	0x000004e8
    1dcc:	000004f0 	.word	0x000004f0
    1dd0:	00000320 	.word	0x00000320

00001dd4 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    1dd4:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    1dd6:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    1dd8:	2200      	movs	r2, #0
    1dda:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    1ddc:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    1dde:	9b00      	ldr	r3, [sp, #0]
    1de0:	60c3      	str	r3, [r0, #12]
}
    1de2:	4770      	bx	lr

00001de4 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    1de4:	b510      	push	{r4, lr}
    1de6:	0004      	movs	r4, r0
	if(writer->written > 0) {
    1de8:	6842      	ldr	r2, [r0, #4]
    1dea:	2a00      	cmp	r2, #0
    1dec:	d100      	bne.n	1df0 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    1dee:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    1df0:	6901      	ldr	r1, [r0, #16]
    1df2:	68c0      	ldr	r0, [r0, #12]
    1df4:	68a3      	ldr	r3, [r4, #8]
    1df6:	4798      	blx	r3
		writer->written = 0;
    1df8:	2300      	movs	r3, #0
    1dfa:	6063      	str	r3, [r4, #4]
}
    1dfc:	e7f7      	b.n	1dee <stream_writer_send_remain+0xa>
	...

00001e00 <stream_writer_send_8>:
{
    1e00:	b530      	push	{r4, r5, lr}
    1e02:	b083      	sub	sp, #12
    1e04:	0004      	movs	r4, r0
    1e06:	000d      	movs	r5, r1
    1e08:	4a09      	ldr	r2, [pc, #36]	; (1e30 <stream_writer_send_8+0x30>)
    1e0a:	447a      	add	r2, pc
	int remain = writer->max_size - writer->written;
    1e0c:	6803      	ldr	r3, [r0, #0]
    1e0e:	6841      	ldr	r1, [r0, #4]
    1e10:	1a5b      	subs	r3, r3, r1
	if (remain < 1) {
    1e12:	2b00      	cmp	r3, #0
    1e14:	dd06      	ble.n	1e24 <stream_writer_send_8+0x24>
	writer->buffer[writer->written++] = (char)value;
    1e16:	6922      	ldr	r2, [r4, #16]
    1e18:	6863      	ldr	r3, [r4, #4]
    1e1a:	1c59      	adds	r1, r3, #1
    1e1c:	6061      	str	r1, [r4, #4]
    1e1e:	54d5      	strb	r5, [r2, r3]
}
    1e20:	b003      	add	sp, #12
    1e22:	bd30      	pop	{r4, r5, pc}
		stream_writer_send_remain(writer);
    1e24:	4b03      	ldr	r3, [pc, #12]	; (1e34 <stream_writer_send_8+0x34>)
    1e26:	58d3      	ldr	r3, [r2, r3]
    1e28:	9301      	str	r3, [sp, #4]
    1e2a:	4798      	blx	r3
    1e2c:	e7f3      	b.n	1e16 <stream_writer_send_8+0x16>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	00010b82 	.word	0x00010b82
    1e34:	00000448 	.word	0x00000448

00001e38 <stream_writer_send_buffer>:
{
    1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3a:	b083      	sub	sp, #12
    1e3c:	0006      	movs	r6, r0
    1e3e:	000d      	movs	r5, r1
    1e40:	0014      	movs	r4, r2
    1e42:	4f08      	ldr	r7, [pc, #32]	; (1e64 <stream_writer_send_buffer+0x2c>)
    1e44:	447f      	add	r7, pc
	for (; length > 0; length--, buffer++) {
    1e46:	e008      	b.n	1e5a <stream_writer_send_buffer+0x22>
		stream_writer_send_8(writer, *buffer);
    1e48:	2100      	movs	r1, #0
    1e4a:	5669      	ldrsb	r1, [r5, r1]
    1e4c:	0030      	movs	r0, r6
    1e4e:	4b06      	ldr	r3, [pc, #24]	; (1e68 <stream_writer_send_buffer+0x30>)
    1e50:	58fb      	ldr	r3, [r7, r3]
    1e52:	9301      	str	r3, [sp, #4]
    1e54:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    1e56:	3c01      	subs	r4, #1
    1e58:	3501      	adds	r5, #1
    1e5a:	2c00      	cmp	r4, #0
    1e5c:	d1f4      	bne.n	1e48 <stream_writer_send_buffer+0x10>
}
    1e5e:	b003      	add	sp, #12
    1e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00010b48 	.word	0x00010b48
    1e68:	000003d8 	.word	0x000003d8

00001e6c <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    1e6c:	4a02      	ldr	r2, [pc, #8]	; (1e78 <sw_timer_tcc_callback+0xc>)
    1e6e:	447a      	add	r2, pc
    1e70:	6813      	ldr	r3, [r2, #0]
    1e72:	3301      	adds	r3, #1
    1e74:	6013      	str	r3, [r2, #0]
}
    1e76:	4770      	bx	lr
    1e78:	1fffe5ba 	.word	0x1fffe5ba

00001e7c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    1e7c:	2364      	movs	r3, #100	; 0x64
    1e7e:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    1e80:	2300      	movs	r3, #0
    1e82:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    1e84:	7043      	strb	r3, [r0, #1]
}
    1e86:	4770      	bx	lr

00001e88 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    1e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8a:	46ce      	mov	lr, r9
    1e8c:	b500      	push	{lr}
    1e8e:	b0ae      	sub	sp, #184	; 0xb8
    1e90:	4684      	mov	ip, r0
    1e92:	000f      	movs	r7, r1
    1e94:	4c28      	ldr	r4, [pc, #160]	; (1f38 <sw_timer_init+0xb0>)
    1e96:	447c      	add	r4, pc
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    1e98:	4b28      	ldr	r3, [pc, #160]	; (1f3c <sw_timer_init+0xb4>)
    1e9a:	447b      	add	r3, pc
    1e9c:	ad02      	add	r5, sp, #8
    1e9e:	002a      	movs	r2, r5
    1ea0:	cb43      	ldmia	r3!, {r0, r1, r6}
    1ea2:	c243      	stmia	r2!, {r0, r1, r6}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    1ea4:	887b      	ldrh	r3, [r7, #2]
    1ea6:	4662      	mov	r2, ip
    1ea8:	6693      	str	r3, [r2, #104]	; 0x68
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    1eaa:	4660      	mov	r0, ip
    1eac:	3028      	adds	r0, #40	; 0x28
    1eae:	9000      	str	r0, [sp, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    1eb0:	783b      	ldrb	r3, [r7, #0]
    1eb2:	009b      	lsls	r3, r3, #2
    1eb4:	5959      	ldr	r1, [r3, r5]
    1eb6:	ae05      	add	r6, sp, #20
    1eb8:	0030      	movs	r0, r6
    1eba:	4b21      	ldr	r3, [pc, #132]	; (1f40 <sw_timer_init+0xb8>)
    1ebc:	58e3      	ldr	r3, [r4, r3]
    1ebe:	9301      	str	r3, [sp, #4]
    1ec0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    1ec2:	2000      	movs	r0, #0
    1ec4:	4b1f      	ldr	r3, [pc, #124]	; (1f44 <sw_timer_init+0xbc>)
    1ec6:	58e3      	ldr	r3, [r4, r3]
    1ec8:	9301      	str	r3, [sp, #4]
    1eca:	4798      	blx	r3
    1ecc:	4b1e      	ldr	r3, [pc, #120]	; (1f48 <sw_timer_init+0xc0>)
    1ece:	7a1b      	ldrb	r3, [r3, #8]
    1ed0:	b2db      	uxtb	r3, r3
    1ed2:	0002      	movs	r2, r0
    1ed4:	40da      	lsrs	r2, r3
    1ed6:	4691      	mov	r9, r2
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    1ed8:	8879      	ldrh	r1, [r7, #2]
    1eda:	4b1c      	ldr	r3, [pc, #112]	; (1f4c <sw_timer_init+0xc4>)
    1edc:	58e3      	ldr	r3, [r4, r3]
    1ede:	9301      	str	r3, [sp, #4]
    1ee0:	20fa      	movs	r0, #250	; 0xfa
    1ee2:	0200      	lsls	r0, r0, #8
    1ee4:	4798      	blx	r3
    1ee6:	0001      	movs	r1, r0
    1ee8:	4b19      	ldr	r3, [pc, #100]	; (1f50 <sw_timer_init+0xc8>)
    1eea:	58e3      	ldr	r3, [r4, r3]
    1eec:	9301      	str	r3, [sp, #4]
    1eee:	4648      	mov	r0, r9
    1ef0:	4798      	blx	r3
    1ef2:	6070      	str	r0, [r6, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    1ef4:	2305      	movs	r3, #5
    1ef6:	72f3      	strb	r3, [r6, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    1ef8:	783b      	ldrb	r3, [r7, #0]
    1efa:	009b      	lsls	r3, r3, #2
    1efc:	5959      	ldr	r1, [r3, r5]
    1efe:	0032      	movs	r2, r6
    1f00:	9d00      	ldr	r5, [sp, #0]
    1f02:	0028      	movs	r0, r5
    1f04:	4b13      	ldr	r3, [pc, #76]	; (1f54 <sw_timer_init+0xcc>)
    1f06:	58e3      	ldr	r3, [r4, r3]
    1f08:	9300      	str	r3, [sp, #0]
    1f0a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    1f0c:	787a      	ldrb	r2, [r7, #1]
    1f0e:	3208      	adds	r2, #8
    1f10:	b2d2      	uxtb	r2, r2
    1f12:	4911      	ldr	r1, [pc, #68]	; (1f58 <sw_timer_init+0xd0>)
    1f14:	4479      	add	r1, pc
    1f16:	0028      	movs	r0, r5
    1f18:	4b10      	ldr	r3, [pc, #64]	; (1f5c <sw_timer_init+0xd4>)
    1f1a:	58e3      	ldr	r3, [r4, r3]
    1f1c:	9300      	str	r3, [sp, #0]
    1f1e:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    1f20:	7879      	ldrb	r1, [r7, #1]
    1f22:	3108      	adds	r1, #8
    1f24:	b2c9      	uxtb	r1, r1
    1f26:	0028      	movs	r0, r5
    1f28:	4b0d      	ldr	r3, [pc, #52]	; (1f60 <sw_timer_init+0xd8>)
    1f2a:	58e3      	ldr	r3, [r4, r3]
    1f2c:	9300      	str	r3, [sp, #0]
    1f2e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    1f30:	b02e      	add	sp, #184	; 0xb8
    1f32:	bc04      	pop	{r2}
    1f34:	4691      	mov	r9, r2
    1f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f38:	00010af6 	.word	0x00010af6
    1f3c:	0000f46a 	.word	0x0000f46a
    1f40:	00000164 	.word	0x00000164
    1f44:	0000014c 	.word	0x0000014c
    1f48:	40000400 	.word	0x40000400
    1f4c:	00000234 	.word	0x00000234
    1f50:	00000340 	.word	0x00000340
    1f54:	000000d4 	.word	0x000000d4
    1f58:	ffffff55 	.word	0xffffff55
    1f5c:	0000047c 	.word	0x0000047c
    1f60:	0000036c 	.word	0x0000036c

00001f64 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1f64:	6a82      	ldr	r2, [r0, #40]	; 0x28

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1f66:	6893      	ldr	r3, [r2, #8]
    1f68:	079b      	lsls	r3, r3, #30
    1f6a:	d4fc      	bmi.n	1f66 <sw_timer_enable+0x2>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1f6c:	6813      	ldr	r3, [r2, #0]
    1f6e:	2102      	movs	r1, #2
    1f70:	430b      	orrs	r3, r1
    1f72:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    1f74:	4770      	bx	lr
	...

00001f78 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	46d6      	mov	lr, sl
    1f7c:	464f      	mov	r7, r9
    1f7e:	4646      	mov	r6, r8
    1f80:	b5c0      	push	{r6, r7, lr}
    1f82:	b082      	sub	sp, #8
    1f84:	0007      	movs	r7, r0
    1f86:	4819      	ldr	r0, [pc, #100]	; (1fec <sw_timer_register_callback+0x74>)
    1f88:	4478      	add	r0, pc
    1f8a:	4684      	mov	ip, r0
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    1f8c:	2400      	movs	r4, #0
    1f8e:	2c01      	cmp	r4, #1
    1f90:	dc22      	bgt.n	1fd8 <sw_timer_register_callback+0x60>
		if (module_inst->handler[index].used == 0) {
    1f92:	00a5      	lsls	r5, r4, #2
    1f94:	192d      	adds	r5, r5, r4
    1f96:	00ae      	lsls	r6, r5, #2
    1f98:	5df0      	ldrb	r0, [r6, r7]
    1f9a:	07c0      	lsls	r0, r0, #31
    1f9c:	d501      	bpl.n	1fa2 <sw_timer_register_callback+0x2a>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    1f9e:	3401      	adds	r4, #1
    1fa0:	e7f5      	b.n	1f8e <sw_timer_register_callback+0x16>
			handler = &module_inst->handler[index];
			handler->callback = callback;
    1fa2:	00a5      	lsls	r5, r4, #2
    1fa4:	19be      	adds	r6, r7, r6
    1fa6:	6071      	str	r1, [r6, #4]
			handler->callback_enable = 0;
    1fa8:	1928      	adds	r0, r5, r4
    1faa:	0081      	lsls	r1, r0, #2
    1fac:	468a      	mov	sl, r1
    1fae:	5dc9      	ldrb	r1, [r1, r7]
    1fb0:	2002      	movs	r0, #2
    1fb2:	4381      	bics	r1, r0
    1fb4:	0008      	movs	r0, r1
    1fb6:	4651      	mov	r1, sl
    1fb8:	55c8      	strb	r0, [r1, r7]
			handler->context = context;
    1fba:	60b2      	str	r2, [r6, #8]
			handler->period = period / module_inst->accuracy;
    1fbc:	4a0c      	ldr	r2, [pc, #48]	; (1ff0 <sw_timer_register_callback+0x78>)
    1fbe:	4661      	mov	r1, ip
    1fc0:	588a      	ldr	r2, [r1, r2]
    1fc2:	9201      	str	r2, [sp, #4]
    1fc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    1fc6:	0018      	movs	r0, r3
    1fc8:	4790      	blx	r2
    1fca:	60f0      	str	r0, [r6, #12]
			handler->used = 1;
    1fcc:	4653      	mov	r3, sl
    1fce:	5dda      	ldrb	r2, [r3, r7]
    1fd0:	2101      	movs	r1, #1
    1fd2:	430a      	orrs	r2, r1
    1fd4:	55da      	strb	r2, [r3, r7]
			return index;
    1fd6:	e001      	b.n	1fdc <sw_timer_register_callback+0x64>
		}
	}
	return -1;
    1fd8:	2401      	movs	r4, #1
    1fda:	4264      	negs	r4, r4
}
    1fdc:	0020      	movs	r0, r4
    1fde:	b002      	add	sp, #8
    1fe0:	bc1c      	pop	{r2, r3, r4}
    1fe2:	4690      	mov	r8, r2
    1fe4:	4699      	mov	r9, r3
    1fe6:	46a2      	mov	sl, r4
    1fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	00010a04 	.word	0x00010a04
    1ff0:	00000340 	.word	0x00000340

00001ff4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    1ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff6:	b083      	sub	sp, #12
    1ff8:	0004      	movs	r4, r0
    1ffa:	000e      	movs	r6, r1
    1ffc:	480c      	ldr	r0, [pc, #48]	; (2030 <STACK_SIZE+0x30>)
    1ffe:	4478      	add	r0, pc
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    2000:	008d      	lsls	r5, r1, #2
    2002:	1869      	adds	r1, r5, r1
    2004:	008b      	lsls	r3, r1, #2
    2006:	5d19      	ldrb	r1, [r3, r4]
    2008:	2702      	movs	r7, #2
    200a:	4339      	orrs	r1, r7
    200c:	5519      	strb	r1, [r3, r4]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    200e:	4b09      	ldr	r3, [pc, #36]	; (2034 <STACK_SIZE+0x34>)
    2010:	58c3      	ldr	r3, [r0, r3]
    2012:	9301      	str	r3, [sp, #4]
    2014:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2016:	0010      	movs	r0, r2
    2018:	4798      	blx	r3
    201a:	4b07      	ldr	r3, [pc, #28]	; (2038 <STACK_SIZE+0x38>)
    201c:	447b      	add	r3, pc
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	18c0      	adds	r0, r0, r3
    2022:	19ad      	adds	r5, r5, r6
    2024:	00ab      	lsls	r3, r5, #2
    2026:	18e4      	adds	r4, r4, r3
    2028:	6120      	str	r0, [r4, #16]
}
    202a:	b003      	add	sp, #12
    202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	0001098e 	.word	0x0001098e
    2034:	00000340 	.word	0x00000340
    2038:	1fffe40c 	.word	0x1fffe40c

0000203c <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    203c:	008b      	lsls	r3, r1, #2
    203e:	1859      	adds	r1, r3, r1
    2040:	008b      	lsls	r3, r1, #2
    2042:	5c1a      	ldrb	r2, [r3, r0]
    2044:	2102      	movs	r1, #2
    2046:	438a      	bics	r2, r1
    2048:	541a      	strb	r2, [r3, r0]
}
    204a:	4770      	bx	lr

0000204c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204e:	0005      	movs	r5, r0
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    2050:	2400      	movs	r4, #0
    2052:	e017      	b.n	2084 <sw_timer_task+0x38>
				/* Timer was expired. */
				if (handler->period > 0) {
					handler->expire_time = sw_timer_tick + handler->period;
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    2054:	00a3      	lsls	r3, r4, #2
    2056:	191b      	adds	r3, r3, r4
    2058:	009a      	lsls	r2, r3, #2
    205a:	5d53      	ldrb	r3, [r2, r5]
    205c:	2102      	movs	r1, #2
    205e:	438b      	bics	r3, r1
    2060:	5553      	strb	r3, [r2, r5]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    2062:	00a6      	lsls	r6, r4, #2
    2064:	1933      	adds	r3, r6, r4
    2066:	009a      	lsls	r2, r3, #2
    2068:	18aa      	adds	r2, r5, r2
    206a:	6857      	ldr	r7, [r2, #4]
    206c:	68d3      	ldr	r3, [r2, #12]
    206e:	6892      	ldr	r2, [r2, #8]
    2070:	0021      	movs	r1, r4
    2072:	0028      	movs	r0, r5
    2074:	47b8      	blx	r7
				/* Leave critical section. */
				handler->busy = 0;
    2076:	1936      	adds	r6, r6, r4
    2078:	00b3      	lsls	r3, r6, #2
    207a:	5d5a      	ldrb	r2, [r3, r5]
    207c:	2104      	movs	r1, #4
    207e:	438a      	bics	r2, r1
    2080:	555a      	strb	r2, [r3, r5]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    2082:	3401      	adds	r4, #1
    2084:	2c01      	cmp	r4, #1
    2086:	dc27      	bgt.n	20d8 <sw_timer_task+0x8c>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    2088:	00a3      	lsls	r3, r4, #2
    208a:	191b      	adds	r3, r3, r4
    208c:	009a      	lsls	r2, r3, #2
    208e:	5d53      	ldrb	r3, [r2, r5]
    2090:	07db      	lsls	r3, r3, #31
    2092:	d5f6      	bpl.n	2082 <sw_timer_task+0x36>
    2094:	5d53      	ldrb	r3, [r2, r5]
    2096:	079b      	lsls	r3, r3, #30
    2098:	d5f3      	bpl.n	2082 <sw_timer_task+0x36>
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    209a:	00a2      	lsls	r2, r4, #2
    209c:	1912      	adds	r2, r2, r4
    209e:	0093      	lsls	r3, r2, #2
    20a0:	18eb      	adds	r3, r5, r3
    20a2:	691b      	ldr	r3, [r3, #16]
    20a4:	4a0d      	ldr	r2, [pc, #52]	; (20dc <sw_timer_task+0x90>)
    20a6:	447a      	add	r2, pc
    20a8:	6812      	ldr	r2, [r2, #0]
    20aa:	1a9b      	subs	r3, r3, r2
    20ac:	d5e9      	bpl.n	2082 <sw_timer_task+0x36>
    20ae:	00a3      	lsls	r3, r4, #2
    20b0:	191b      	adds	r3, r3, r4
    20b2:	0099      	lsls	r1, r3, #2
    20b4:	5d4b      	ldrb	r3, [r1, r5]
    20b6:	075b      	lsls	r3, r3, #29
    20b8:	d4e3      	bmi.n	2082 <sw_timer_task+0x36>
				handler->busy = 1;
    20ba:	5d48      	ldrb	r0, [r1, r5]
    20bc:	2604      	movs	r6, #4
    20be:	4330      	orrs	r0, r6
    20c0:	5548      	strb	r0, [r1, r5]
				if (handler->period > 0) {
    20c2:	1869      	adds	r1, r5, r1
    20c4:	68cb      	ldr	r3, [r1, #12]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d0c4      	beq.n	2054 <sw_timer_task+0x8>
					handler->expire_time = sw_timer_tick + handler->period;
    20ca:	18d2      	adds	r2, r2, r3
    20cc:	00a1      	lsls	r1, r4, #2
    20ce:	1909      	adds	r1, r1, r4
    20d0:	008b      	lsls	r3, r1, #2
    20d2:	18eb      	adds	r3, r5, r3
    20d4:	611a      	str	r2, [r3, #16]
    20d6:	e7c4      	b.n	2062 <sw_timer_task+0x16>
			}
		}
	}
}
    20d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	1fffe382 	.word	0x1fffe382

000020e0 <init_state>:
	sw_timer_enable(&swt_module_inst);
}

static void init_state(void)
{
	down_state = NOT_READY;
    20e0:	2200      	movs	r2, #0
    20e2:	4b02      	ldr	r3, [pc, #8]	; (20ec <init_state+0xc>)
    20e4:	447b      	add	r3, pc
    20e6:	701a      	strb	r2, [r3, #0]
}
    20e8:	4770      	bx	lr
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	1fffe348 	.word	0x1fffe348

000020f0 <clear_state>:

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    20f0:	4a02      	ldr	r2, [pc, #8]	; (20fc <clear_state+0xc>)
    20f2:	447a      	add	r2, pc
    20f4:	7813      	ldrb	r3, [r2, #0]
    20f6:	4383      	bics	r3, r0
    20f8:	7013      	strb	r3, [r2, #0]
}
    20fa:	4770      	bx	lr
    20fc:	1fffe33a 	.word	0x1fffe33a

00002100 <add_state>:


static void add_state(download_state mask)
{
	down_state |= mask;
    2100:	4b02      	ldr	r3, [pc, #8]	; (210c <add_state+0xc>)
    2102:	447b      	add	r3, pc
    2104:	781a      	ldrb	r2, [r3, #0]
    2106:	4310      	orrs	r0, r2
    2108:	7018      	strb	r0, [r3, #0]
}
    210a:	4770      	bx	lr
    210c:	1fffe32a 	.word	0x1fffe32a

00002110 <resolve_cb>:
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}


static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    2110:	b5f0      	push	{r4, r5, r6, r7, lr}
    2112:	b085      	sub	sp, #20
    2114:	0005      	movs	r5, r0
    2116:	000c      	movs	r4, r1
    2118:	4e0d      	ldr	r6, [pc, #52]	; (2150 <resolve_cb+0x40>)
    211a:	447e      	add	r6, pc
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    211c:	0a0b      	lsrs	r3, r1, #8
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    211e:	0c08      	lsrs	r0, r1, #16
    2120:	0e0f      	lsrs	r7, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    2122:	21ff      	movs	r1, #255	; 0xff
    2124:	400b      	ands	r3, r1
    2126:	000a      	movs	r2, r1
    2128:	4022      	ands	r2, r4
    212a:	9701      	str	r7, [sp, #4]
    212c:	4001      	ands	r1, r0
    212e:	9100      	str	r1, [sp, #0]
    2130:	0029      	movs	r1, r5
    2132:	4808      	ldr	r0, [pc, #32]	; (2154 <resolve_cb+0x44>)
    2134:	4478      	add	r0, pc
    2136:	4f08      	ldr	r7, [pc, #32]	; (2158 <resolve_cb+0x48>)
    2138:	59f7      	ldr	r7, [r6, r7]
    213a:	9703      	str	r7, [sp, #12]
    213c:	47b8      	blx	r7
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    213e:	0021      	movs	r1, r4
    2140:	0028      	movs	r0, r5
    2142:	4b06      	ldr	r3, [pc, #24]	; (215c <resolve_cb+0x4c>)
    2144:	58f3      	ldr	r3, [r6, r3]
    2146:	9303      	str	r3, [sp, #12]
    2148:	4798      	blx	r3
}
    214a:	b005      	add	sp, #20
    214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	00010872 	.word	0x00010872
    2154:	0000f454 	.word	0x0000f454
    2158:	0000003c 	.word	0x0000003c
    215c:	000001cc 	.word	0x000001cc

00002160 <socket_cb>:
{
    2160:	b510      	push	{r4, lr}
    2162:	b082      	sub	sp, #8
    2164:	4b03      	ldr	r3, [pc, #12]	; (2174 <socket_cb+0x14>)
    2166:	447b      	add	r3, pc
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    2168:	4c03      	ldr	r4, [pc, #12]	; (2178 <socket_cb+0x18>)
    216a:	591b      	ldr	r3, [r3, r4]
    216c:	9301      	str	r3, [sp, #4]
    216e:	4798      	blx	r3
}
    2170:	b002      	add	sp, #8
    2172:	bd10      	pop	{r4, pc}
    2174:	00010826 	.word	0x00010826
    2178:	000002e4 	.word	0x000002e4

0000217c <start_download>:
{
    217c:	b530      	push	{r4, r5, lr}
    217e:	b085      	sub	sp, #20
    2180:	4c1e      	ldr	r4, [pc, #120]	; (21fc <start_download+0x80>)
    2182:	447c      	add	r4, pc
	return ((down_state & mask) != 0);
    2184:	4b1e      	ldr	r3, [pc, #120]	; (2200 <start_download+0x84>)
    2186:	447b      	add	r3, pc
    2188:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    218a:	07da      	lsls	r2, r3, #31
    218c:	d51a      	bpl.n	21c4 <start_download+0x48>
	if (!is_state_set(WIFI_CONNECTED)) {
    218e:	079a      	lsls	r2, r3, #30
    2190:	d51f      	bpl.n	21d2 <start_download+0x56>
	if (is_state_set(GET_REQUESTED)) {
    2192:	075a      	lsls	r2, r3, #29
    2194:	d424      	bmi.n	21e0 <start_download+0x64>
	if (is_state_set(DOWNLOADING)) {
    2196:	071b      	lsls	r3, r3, #28
    2198:	d429      	bmi.n	21ee <start_download+0x72>
	printf("start_download: sending HTTP request...\r\n");
    219a:	481a      	ldr	r0, [pc, #104]	; (2204 <start_download+0x88>)
    219c:	4478      	add	r0, pc
    219e:	4b1a      	ldr	r3, [pc, #104]	; (2208 <start_download+0x8c>)
    21a0:	58e3      	ldr	r3, [r4, r3]
    21a2:	9303      	str	r3, [sp, #12]
    21a4:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    21a6:	4b19      	ldr	r3, [pc, #100]	; (220c <start_download+0x90>)
    21a8:	58e3      	ldr	r3, [r4, r3]
    21aa:	9303      	str	r3, [sp, #12]
    21ac:	2300      	movs	r3, #0
    21ae:	9300      	str	r3, [sp, #0]
    21b0:	2201      	movs	r2, #1
    21b2:	4917      	ldr	r1, [pc, #92]	; (2210 <start_download+0x94>)
    21b4:	4479      	add	r1, pc
    21b6:	9803      	ldr	r0, [sp, #12]
    21b8:	4d16      	ldr	r5, [pc, #88]	; (2214 <start_download+0x98>)
    21ba:	5964      	ldr	r4, [r4, r5]
    21bc:	9403      	str	r4, [sp, #12]
    21be:	47a0      	blx	r4
}
    21c0:	b005      	add	sp, #20
    21c2:	bd30      	pop	{r4, r5, pc}
		printf("start_download: MMC storage not ready.\r\n");
    21c4:	4814      	ldr	r0, [pc, #80]	; (2218 <start_download+0x9c>)
    21c6:	4478      	add	r0, pc
    21c8:	4b0f      	ldr	r3, [pc, #60]	; (2208 <start_download+0x8c>)
    21ca:	58e3      	ldr	r3, [r4, r3]
    21cc:	9303      	str	r3, [sp, #12]
    21ce:	4798      	blx	r3
		return;
    21d0:	e7f6      	b.n	21c0 <start_download+0x44>
		printf("start_download: Wi-Fi is not connected.\r\n");
    21d2:	4812      	ldr	r0, [pc, #72]	; (221c <start_download+0xa0>)
    21d4:	4478      	add	r0, pc
    21d6:	4b0c      	ldr	r3, [pc, #48]	; (2208 <start_download+0x8c>)
    21d8:	58e3      	ldr	r3, [r4, r3]
    21da:	9303      	str	r3, [sp, #12]
    21dc:	4798      	blx	r3
		return;
    21de:	e7ef      	b.n	21c0 <start_download+0x44>
		printf("start_download: request is sent already.\r\n");
    21e0:	480f      	ldr	r0, [pc, #60]	; (2220 <start_download+0xa4>)
    21e2:	4478      	add	r0, pc
    21e4:	4b08      	ldr	r3, [pc, #32]	; (2208 <start_download+0x8c>)
    21e6:	58e3      	ldr	r3, [r4, r3]
    21e8:	9303      	str	r3, [sp, #12]
    21ea:	4798      	blx	r3
		return;
    21ec:	e7e8      	b.n	21c0 <start_download+0x44>
		printf("start_download: running download already.\r\n");
    21ee:	480d      	ldr	r0, [pc, #52]	; (2224 <start_download+0xa8>)
    21f0:	4478      	add	r0, pc
    21f2:	4b05      	ldr	r3, [pc, #20]	; (2208 <start_download+0x8c>)
    21f4:	58e3      	ldr	r3, [r4, r3]
    21f6:	9303      	str	r3, [sp, #12]
    21f8:	4798      	blx	r3
		return;
    21fa:	e7e1      	b.n	21c0 <start_download+0x44>
    21fc:	0001080a 	.word	0x0001080a
    2200:	1fffe2a6 	.word	0x1fffe2a6
    2204:	0000f4c8 	.word	0x0000f4c8
    2208:	00000108 	.word	0x00000108
    220c:	00000324 	.word	0x00000324
    2210:	0000f4dc 	.word	0x0000f4dc
    2214:	00000284 	.word	0x00000284
    2218:	0000f3f2 	.word	0x0000f3f2
    221c:	0000f40c 	.word	0x0000f40c
    2220:	0000f42a 	.word	0x0000f42a
    2224:	0000f448 	.word	0x0000f448

00002228 <wifi_cb>:


static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    2228:	b530      	push	{r4, r5, lr}
    222a:	b085      	sub	sp, #20
    222c:	4c2e      	ldr	r4, [pc, #184]	; (22e8 <wifi_cb+0xc0>)
    222e:	447c      	add	r4, pc
	switch (u8MsgType) {
    2230:	282c      	cmp	r0, #44	; 0x2c
    2232:	d003      	beq.n	223c <wifi_cb+0x14>
    2234:	2832      	cmp	r0, #50	; 0x32
    2236:	d042      	beq.n	22be <wifi_cb+0x96>
	}

	default:
		break;
	}
}
    2238:	b005      	add	sp, #20
    223a:	bd30      	pop	{r4, r5, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    223c:	780b      	ldrb	r3, [r1, #0]
    223e:	2b01      	cmp	r3, #1
    2240:	d022      	beq.n	2288 <wifi_cb+0x60>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    2242:	2b00      	cmp	r3, #0
    2244:	d1f8      	bne.n	2238 <wifi_cb+0x10>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    2246:	4829      	ldr	r0, [pc, #164]	; (22ec <wifi_cb+0xc4>)
    2248:	4478      	add	r0, pc
    224a:	4b29      	ldr	r3, [pc, #164]	; (22f0 <wifi_cb+0xc8>)
    224c:	58e3      	ldr	r3, [r4, r3]
    224e:	9303      	str	r3, [sp, #12]
    2250:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    2252:	2002      	movs	r0, #2
    2254:	4b27      	ldr	r3, [pc, #156]	; (22f4 <wifi_cb+0xcc>)
    2256:	447b      	add	r3, pc
    2258:	4798      	blx	r3
	return ((down_state & mask) != 0);
    225a:	4b27      	ldr	r3, [pc, #156]	; (22f8 <wifi_cb+0xd0>)
    225c:	447b      	add	r3, pc
    225e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    2260:	071b      	lsls	r3, r3, #28
    2262:	d41c      	bmi.n	229e <wifi_cb+0x76>
	return ((down_state & mask) != 0);
    2264:	4b25      	ldr	r3, [pc, #148]	; (22fc <wifi_cb+0xd4>)
    2266:	447b      	add	r3, pc
    2268:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    226a:	075b      	lsls	r3, r3, #29
    226c:	d422      	bmi.n	22b4 <wifi_cb+0x8c>
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    226e:	23ff      	movs	r3, #255	; 0xff
    2270:	9300      	str	r3, [sp, #0]
    2272:	4b23      	ldr	r3, [pc, #140]	; (2300 <wifi_cb+0xd8>)
    2274:	447b      	add	r3, pc
    2276:	2202      	movs	r2, #2
    2278:	2106      	movs	r1, #6
    227a:	4822      	ldr	r0, [pc, #136]	; (2304 <wifi_cb+0xdc>)
    227c:	4478      	add	r0, pc
    227e:	4d22      	ldr	r5, [pc, #136]	; (2308 <wifi_cb+0xe0>)
    2280:	5964      	ldr	r4, [r4, r5]
    2282:	9403      	str	r4, [sp, #12]
    2284:	47a0      	blx	r4
    2286:	e7d7      	b.n	2238 <wifi_cb+0x10>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    2288:	4820      	ldr	r0, [pc, #128]	; (230c <wifi_cb+0xe4>)
    228a:	4478      	add	r0, pc
    228c:	4b18      	ldr	r3, [pc, #96]	; (22f0 <wifi_cb+0xc8>)
    228e:	58e3      	ldr	r3, [r4, r3]
    2290:	9303      	str	r3, [sp, #12]
    2292:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    2294:	4b1e      	ldr	r3, [pc, #120]	; (2310 <wifi_cb+0xe8>)
    2296:	58e3      	ldr	r3, [r4, r3]
    2298:	9303      	str	r3, [sp, #12]
    229a:	4798      	blx	r3
    229c:	e7cc      	b.n	2238 <wifi_cb+0x10>
				f_close(&file_object);
    229e:	481d      	ldr	r0, [pc, #116]	; (2314 <wifi_cb+0xec>)
    22a0:	4478      	add	r0, pc
    22a2:	4b1d      	ldr	r3, [pc, #116]	; (2318 <wifi_cb+0xf0>)
    22a4:	58e3      	ldr	r3, [r4, r3]
    22a6:	9303      	str	r3, [sp, #12]
    22a8:	4798      	blx	r3
				clear_state(DOWNLOADING);
    22aa:	2008      	movs	r0, #8
    22ac:	4b1b      	ldr	r3, [pc, #108]	; (231c <wifi_cb+0xf4>)
    22ae:	447b      	add	r3, pc
    22b0:	4798      	blx	r3
    22b2:	e7d7      	b.n	2264 <wifi_cb+0x3c>
				clear_state(GET_REQUESTED);
    22b4:	2004      	movs	r0, #4
    22b6:	4b1a      	ldr	r3, [pc, #104]	; (2320 <wifi_cb+0xf8>)
    22b8:	447b      	add	r3, pc
    22ba:	4798      	blx	r3
    22bc:	e7d7      	b.n	226e <wifi_cb+0x46>
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    22be:	7808      	ldrb	r0, [r1, #0]
    22c0:	784a      	ldrb	r2, [r1, #1]
    22c2:	788b      	ldrb	r3, [r1, #2]
    22c4:	78c9      	ldrb	r1, [r1, #3]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    22c6:	9100      	str	r1, [sp, #0]
    22c8:	0001      	movs	r1, r0
    22ca:	4816      	ldr	r0, [pc, #88]	; (2324 <wifi_cb+0xfc>)
    22cc:	4478      	add	r0, pc
    22ce:	4d16      	ldr	r5, [pc, #88]	; (2328 <wifi_cb+0x100>)
    22d0:	5964      	ldr	r4, [r4, r5]
    22d2:	9403      	str	r4, [sp, #12]
    22d4:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    22d6:	2002      	movs	r0, #2
    22d8:	4b14      	ldr	r3, [pc, #80]	; (232c <wifi_cb+0x104>)
    22da:	447b      	add	r3, pc
    22dc:	4798      	blx	r3
		start_download();
    22de:	4b14      	ldr	r3, [pc, #80]	; (2330 <wifi_cb+0x108>)
    22e0:	447b      	add	r3, pc
    22e2:	4798      	blx	r3
}
    22e4:	e7a8      	b.n	2238 <wifi_cb+0x10>
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	0001075e 	.word	0x0001075e
    22ec:	0000f5fc 	.word	0x0000f5fc
    22f0:	00000108 	.word	0x00000108
    22f4:	fffffe97 	.word	0xfffffe97
    22f8:	1fffe1d0 	.word	0x1fffe1d0
    22fc:	1fffe1c6 	.word	0x1fffe1c6
    2300:	0000f5f0 	.word	0x0000f5f0
    2304:	0000f5f4 	.word	0x0000f5f4
    2308:	00000398 	.word	0x00000398
    230c:	0000f59a 	.word	0x0000f59a
    2310:	000004bc 	.word	0x000004bc
    2314:	1fffe3c0 	.word	0x1fffe3c0
    2318:	00000254 	.word	0x00000254
    231c:	fffffe3f 	.word	0xfffffe3f
    2320:	fffffe35 	.word	0xfffffe35
    2324:	0000f5ac 	.word	0x0000f5ac
    2328:	0000003c 	.word	0x0000003c
    232c:	fffffe23 	.word	0xfffffe23
    2330:	fffffe99 	.word	0xfffffe99

00002334 <configure_bod>:
{
    2334:	b500      	push	{lr}
    2336:	b085      	sub	sp, #20
    2338:	4b10      	ldr	r3, [pc, #64]	; (237c <configure_bod+0x48>)
    233a:	447b      	add	r3, pc
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    233c:	2200      	movs	r2, #0
    233e:	a902      	add	r1, sp, #8
    2340:	800a      	strh	r2, [r1, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    2342:	3201      	adds	r2, #1
    2344:	718a      	strb	r2, [r1, #6]
	config_bod33.action = BOD_ACTION_INTERRUPT;
    2346:	320f      	adds	r2, #15
    2348:	710a      	strb	r2, [r1, #4]
	config_bod33.run_in_standby = 0;
    234a:	2200      	movs	r2, #0
    234c:	71ca      	strb	r2, [r1, #7]
	config_bod33.mode = BOD_MODE_SAMPLED;
    234e:	2280      	movs	r2, #128	; 0x80
    2350:	0052      	lsls	r2, r2, #1
    2352:	804a      	strh	r2, [r1, #2]
	config_bod33.level = 40;						// Set to 2.8V
    2354:	3ad8      	subs	r2, #216	; 0xd8
    2356:	714a      	strb	r2, [r1, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    2358:	2000      	movs	r0, #0
    235a:	4a09      	ldr	r2, [pc, #36]	; (2380 <configure_bod+0x4c>)
    235c:	589b      	ldr	r3, [r3, r2]
    235e:	9301      	str	r3, [sp, #4]
    2360:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    2362:	4b08      	ldr	r3, [pc, #32]	; (2384 <configure_bod+0x50>)
    2364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2366:	2102      	movs	r1, #2
    2368:	430a      	orrs	r2, r1
    236a:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    236c:	2280      	movs	r2, #128	; 0x80
    236e:	00d2      	lsls	r2, r2, #3
    2370:	605a      	str	r2, [r3, #4]
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <configure_bod+0x54>)
    2374:	6019      	str	r1, [r3, #0]
}
    2376:	b005      	add	sp, #20
    2378:	bd00      	pop	{pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	00010652 	.word	0x00010652
    2380:	00000364 	.word	0x00000364
    2384:	40000800 	.word	0x40000800
    2388:	e000e100 	.word	0xe000e100

0000238c <configure_rtc>:
{
    238c:	b5f0      	push	{r4, r5, r6, r7, lr}
    238e:	b08b      	sub	sp, #44	; 0x2c
    2390:	4d2a      	ldr	r5, [pc, #168]	; (243c <configure_rtc+0xb0>)
    2392:	447d      	add	r5, pc
	rtc_instance.hw = RTC;
    2394:	4b2a      	ldr	r3, [pc, #168]	; (2440 <configure_rtc+0xb4>)
    2396:	58eb      	ldr	r3, [r5, r3]
    2398:	4a2a      	ldr	r2, [pc, #168]	; (2444 <configure_rtc+0xb8>)
    239a:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    239c:	2001      	movs	r0, #1
    239e:	7118      	strb	r0, [r3, #4]
	rtc_instance.year_init_value = 2000;
    23a0:	21fa      	movs	r1, #250	; 0xfa
    23a2:	00c9      	lsls	r1, r1, #3
    23a4:	80d9      	strh	r1, [r3, #6]
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
	time->second = 0;
    23a6:	2200      	movs	r2, #0
    23a8:	ab02      	add	r3, sp, #8
    23aa:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    23ac:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    23ae:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    23b0:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    23b2:	7118      	strb	r0, [r3, #4]
	time->month  = 1;
    23b4:	7158      	strb	r0, [r3, #5]
	time->year   = 2000;
    23b6:	80d9      	strh	r1, [r3, #6]
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    23b8:	20a0      	movs	r0, #160	; 0xa0
    23ba:	0100      	lsls	r0, r0, #4
    23bc:	ab05      	add	r3, sp, #20
    23be:	8018      	strh	r0, [r3, #0]
	config->clear_on_match      = false;
    23c0:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    23c2:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    23c4:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    23c6:	80d9      	strh	r1, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    23c8:	2400      	movs	r4, #0
    23ca:	2c00      	cmp	r4, #0
    23cc:	d021      	beq.n	2412 <configure_rtc+0x86>
	config_rtc_calendar.clock_24h = true;
    23ce:	2301      	movs	r3, #1
    23d0:	ac05      	add	r4, sp, #20
    23d2:	7123      	strb	r3, [r4, #4]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    23d4:	3301      	adds	r3, #1
    23d6:	a904      	add	r1, sp, #16
    23d8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    23da:	2004      	movs	r0, #4
    23dc:	4b1a      	ldr	r3, [pc, #104]	; (2448 <configure_rtc+0xbc>)
    23de:	58eb      	ldr	r3, [r5, r3]
    23e0:	9300      	str	r3, [sp, #0]
    23e2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    23e4:	2004      	movs	r0, #4
    23e6:	4b19      	ldr	r3, [pc, #100]	; (244c <configure_rtc+0xc0>)
    23e8:	58eb      	ldr	r3, [r5, r3]
    23ea:	9300      	str	r3, [sp, #0]
    23ec:	4798      	blx	r3
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    23ee:	4b14      	ldr	r3, [pc, #80]	; (2440 <configure_rtc+0xb4>)
    23f0:	58eb      	ldr	r3, [r5, r3]
    23f2:	9300      	str	r3, [sp, #0]
    23f4:	0022      	movs	r2, r4
    23f6:	4913      	ldr	r1, [pc, #76]	; (2444 <configure_rtc+0xb8>)
    23f8:	0018      	movs	r0, r3
    23fa:	4b15      	ldr	r3, [pc, #84]	; (2450 <configure_rtc+0xc4>)
    23fc:	58eb      	ldr	r3, [r5, r3]
    23fe:	9301      	str	r3, [sp, #4]
    2400:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    2402:	9800      	ldr	r0, [sp, #0]
    2404:	4b13      	ldr	r3, [pc, #76]	; (2454 <configure_rtc+0xc8>)
    2406:	58eb      	ldr	r3, [r5, r3]
    2408:	9300      	str	r3, [sp, #0]
    240a:	4798      	blx	r3
}
    240c:	2000      	movs	r0, #0
    240e:	b00b      	add	sp, #44	; 0x2c
    2410:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config->alarm[i].time = time;
    2412:	00a7      	lsls	r7, r4, #2
    2414:	193b      	adds	r3, r7, r4
    2416:	0058      	lsls	r0, r3, #1
    2418:	ae05      	add	r6, sp, #20
    241a:	1830      	adds	r0, r6, r0
    241c:	3008      	adds	r0, #8
    241e:	2208      	movs	r2, #8
    2420:	a902      	add	r1, sp, #8
    2422:	4b0d      	ldr	r3, [pc, #52]	; (2458 <configure_rtc+0xcc>)
    2424:	58eb      	ldr	r3, [r5, r3]
    2426:	9300      	str	r3, [sp, #0]
    2428:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    242a:	193f      	adds	r7, r7, r4
    242c:	007b      	lsls	r3, r7, #1
    242e:	18f6      	adds	r6, r6, r3
    2430:	2306      	movs	r3, #6
    2432:	7433      	strb	r3, [r6, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2434:	3401      	adds	r4, #1
    2436:	b2e4      	uxtb	r4, r4
    2438:	e7c7      	b.n	23ca <configure_rtc+0x3e>
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	000105fa 	.word	0x000105fa
    2440:	00000058 	.word	0x00000058
    2444:	40001400 	.word	0x40001400
    2448:	00000114 	.word	0x00000114
    244c:	00000380 	.word	0x00000380
    2450:	00000140 	.word	0x00000140
    2454:	000000a4 	.word	0x000000a4
    2458:	000000ec 	.word	0x000000ec

0000245c <configure_wakeup>:
static enum status_code configure_wakeup(void) {
    245c:	b5f0      	push	{r4, r5, r6, r7, lr}
    245e:	b087      	sub	sp, #28
    2460:	4d16      	ldr	r5, [pc, #88]	; (24bc <configure_wakeup+0x60>)
    2462:	447d      	add	r5, pc
	extint_chan_get_config_defaults(&ext_conf);
    2464:	ac03      	add	r4, sp, #12
    2466:	0020      	movs	r0, r4
    2468:	4b15      	ldr	r3, [pc, #84]	; (24c0 <configure_wakeup+0x64>)
    246a:	58eb      	ldr	r3, [r5, r3]
    246c:	9301      	str	r3, [sp, #4]
    246e:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    2470:	2302      	movs	r3, #2
    2472:	72e3      	strb	r3, [r4, #11]
	ext_conf.filter_input_signal = true;
    2474:	3b01      	subs	r3, #1
    2476:	72a3      	strb	r3, [r4, #10]
	ext_conf.wake_if_sleeping = true;
    2478:	7263      	strb	r3, [r4, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    247a:	2203      	movs	r2, #3
    247c:	9203      	str	r2, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    247e:	2600      	movs	r6, #0
    2480:	6066      	str	r6, [r4, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    2482:	7223      	strb	r3, [r4, #8]
	extint_chan_set_config(3, &ext_conf);
    2484:	0021      	movs	r1, r4
    2486:	2003      	movs	r0, #3
    2488:	4b0e      	ldr	r3, [pc, #56]	; (24c4 <configure_wakeup+0x68>)
    248a:	58eb      	ldr	r3, [r5, r3]
    248c:	9301      	str	r3, [sp, #4]
    248e:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    2490:	2100      	movs	r1, #0
    2492:	2003      	movs	r0, #3
    2494:	4b0c      	ldr	r3, [pc, #48]	; (24c8 <configure_wakeup+0x6c>)
    2496:	58ef      	ldr	r7, [r5, r3]
    2498:	47b8      	blx	r7
    249a:	0005      	movs	r5, r0
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    249c:	231f      	movs	r3, #31
    249e:	9303      	str	r3, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    24a0:	6066      	str	r6, [r4, #4]
	extint_chan_set_config(11, &ext_conf);
    24a2:	0021      	movs	r1, r4
    24a4:	200b      	movs	r0, #11
    24a6:	9a01      	ldr	r2, [sp, #4]
    24a8:	4790      	blx	r2
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    24aa:	2100      	movs	r1, #0
    24ac:	200b      	movs	r0, #11
    24ae:	47b8      	blx	r7
	if (code1 != STATUS_OK) return code1;
    24b0:	2d00      	cmp	r5, #0
    24b2:	d100      	bne.n	24b6 <configure_wakeup+0x5a>
	else return STATUS_OK;
    24b4:	0005      	movs	r5, r0
}
    24b6:	0028      	movs	r0, r5
    24b8:	b007      	add	sp, #28
    24ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24bc:	0001052a 	.word	0x0001052a
    24c0:	00000040 	.word	0x00000040
    24c4:	000001d4 	.word	0x000001d4
    24c8:	000002a8 	.word	0x000002a8

000024cc <configure_iot_sw_timer>:
static void configure_iot_sw_timer(void) {
    24cc:	b530      	push	{r4, r5, lr}
    24ce:	b085      	sub	sp, #20
    24d0:	4c0b      	ldr	r4, [pc, #44]	; (2500 <configure_iot_sw_timer+0x34>)
    24d2:	447c      	add	r4, pc
	sw_timer_get_config_defaults(&swt_conf);
    24d4:	ad03      	add	r5, sp, #12
    24d6:	0028      	movs	r0, r5
    24d8:	4b0a      	ldr	r3, [pc, #40]	; (2504 <configure_iot_sw_timer+0x38>)
    24da:	58e3      	ldr	r3, [r4, r3]
    24dc:	9300      	str	r3, [sp, #0]
    24de:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    24e0:	4b09      	ldr	r3, [pc, #36]	; (2508 <configure_iot_sw_timer+0x3c>)
    24e2:	58e3      	ldr	r3, [r4, r3]
    24e4:	9300      	str	r3, [sp, #0]
    24e6:	0029      	movs	r1, r5
    24e8:	0018      	movs	r0, r3
    24ea:	4b08      	ldr	r3, [pc, #32]	; (250c <configure_iot_sw_timer+0x40>)
    24ec:	58e3      	ldr	r3, [r4, r3]
    24ee:	9301      	str	r3, [sp, #4]
    24f0:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    24f2:	9800      	ldr	r0, [sp, #0]
    24f4:	4b06      	ldr	r3, [pc, #24]	; (2510 <configure_iot_sw_timer+0x44>)
    24f6:	58e3      	ldr	r3, [r4, r3]
    24f8:	9300      	str	r3, [sp, #0]
    24fa:	4798      	blx	r3
}
    24fc:	b005      	add	sp, #20
    24fe:	bd30      	pop	{r4, r5, pc}
    2500:	000104ba 	.word	0x000104ba
    2504:	00000134 	.word	0x00000134
    2508:	000002d4 	.word	0x000002d4
    250c:	0000015c 	.word	0x0000015c
    2510:	00000178 	.word	0x00000178

00002514 <configure_http_client>:


static void configure_http_client(void)
{
    2514:	b530      	push	{r4, r5, lr}
    2516:	b08b      	sub	sp, #44	; 0x2c
    2518:	4c16      	ldr	r4, [pc, #88]	; (2574 <configure_http_client+0x60>)
    251a:	447c      	add	r4, pc
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    251c:	ad03      	add	r5, sp, #12
    251e:	0028      	movs	r0, r5
    2520:	4b15      	ldr	r3, [pc, #84]	; (2578 <configure_http_client+0x64>)
    2522:	58e3      	ldr	r3, [r4, r3]
    2524:	9301      	str	r3, [sp, #4]
    2526:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    2528:	2380      	movs	r3, #128	; 0x80
    252a:	00db      	lsls	r3, r3, #3
    252c:	612b      	str	r3, [r5, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    252e:	4b13      	ldr	r3, [pc, #76]	; (257c <configure_http_client+0x68>)
    2530:	58e3      	ldr	r3, [r4, r3]
    2532:	9301      	str	r3, [sp, #4]
    2534:	606b      	str	r3, [r5, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    2536:	4b12      	ldr	r3, [pc, #72]	; (2580 <configure_http_client+0x6c>)
    2538:	58e3      	ldr	r3, [r4, r3]
    253a:	9301      	str	r3, [sp, #4]
    253c:	0029      	movs	r1, r5
    253e:	0018      	movs	r0, r3
    2540:	4b10      	ldr	r3, [pc, #64]	; (2584 <configure_http_client+0x70>)
    2542:	58e3      	ldr	r3, [r4, r3]
    2544:	9301      	str	r3, [sp, #4]
    2546:	4798      	blx	r3
    2548:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    254a:	db0b      	blt.n	2564 <configure_http_client+0x50>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
		while (1) {
		}
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
    254c:	4b0c      	ldr	r3, [pc, #48]	; (2580 <configure_http_client+0x6c>)
    254e:	58e3      	ldr	r3, [r4, r3]
    2550:	9301      	str	r3, [sp, #4]
    2552:	490d      	ldr	r1, [pc, #52]	; (2588 <configure_http_client+0x74>)
    2554:	4479      	add	r1, pc
    2556:	0018      	movs	r0, r3
    2558:	4b0c      	ldr	r3, [pc, #48]	; (258c <configure_http_client+0x78>)
    255a:	58e3      	ldr	r3, [r4, r3]
    255c:	9301      	str	r3, [sp, #4]
    255e:	4798      	blx	r3
}
    2560:	b00b      	add	sp, #44	; 0x2c
    2562:	bd30      	pop	{r4, r5, pc}
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    2564:	480a      	ldr	r0, [pc, #40]	; (2590 <configure_http_client+0x7c>)
    2566:	4478      	add	r0, pc
    2568:	4b0a      	ldr	r3, [pc, #40]	; (2594 <configure_http_client+0x80>)
    256a:	58e3      	ldr	r3, [r4, r3]
    256c:	9301      	str	r3, [sp, #4]
    256e:	4798      	blx	r3
    2570:	e7fe      	b.n	2570 <configure_http_client+0x5c>
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	00010472 	.word	0x00010472
    2578:	00000008 	.word	0x00000008
    257c:	000002d4 	.word	0x000002d4
    2580:	00000324 	.word	0x00000324
    2584:	00000414 	.word	0x00000414
    2588:	0000043d 	.word	0x0000043d
    258c:	00000420 	.word	0x00000420
    2590:	0000edaa 	.word	0x0000edaa
    2594:	0000003c 	.word	0x0000003c

00002598 <is_exist_file>:
{
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	b082      	sub	sp, #8
    259c:	4e0e      	ldr	r6, [pc, #56]	; (25d8 <is_exist_file+0x40>)
    259e:	447e      	add	r6, pc
	if (fp == NULL || file_path_name == NULL) {
    25a0:	2800      	cmp	r0, #0
    25a2:	d014      	beq.n	25ce <is_exist_file+0x36>
    25a4:	2900      	cmp	r1, #0
    25a6:	d014      	beq.n	25d2 <is_exist_file+0x3a>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    25a8:	4d0c      	ldr	r5, [pc, #48]	; (25dc <is_exist_file+0x44>)
    25aa:	447d      	add	r5, pc
    25ac:	2200      	movs	r2, #0
    25ae:	0028      	movs	r0, r5
    25b0:	4b0b      	ldr	r3, [pc, #44]	; (25e0 <is_exist_file+0x48>)
    25b2:	58f3      	ldr	r3, [r6, r3]
    25b4:	9301      	str	r3, [sp, #4]
    25b6:	4798      	blx	r3
    25b8:	0004      	movs	r4, r0
	f_close(&file_object);
    25ba:	0028      	movs	r0, r5
    25bc:	4b09      	ldr	r3, [pc, #36]	; (25e4 <is_exist_file+0x4c>)
    25be:	58f3      	ldr	r3, [r6, r3]
    25c0:	9301      	str	r3, [sp, #4]
    25c2:	4798      	blx	r3
	return (ret == FR_OK);
    25c4:	4260      	negs	r0, r4
    25c6:	4160      	adcs	r0, r4
    25c8:	b2c0      	uxtb	r0, r0
}
    25ca:	b002      	add	sp, #8
    25cc:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    25ce:	2000      	movs	r0, #0
    25d0:	e7fb      	b.n	25ca <is_exist_file+0x32>
    25d2:	2000      	movs	r0, #0
    25d4:	e7f9      	b.n	25ca <is_exist_file+0x32>
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	000103ee 	.word	0x000103ee
    25dc:	1fffe0b6 	.word	0x1fffe0b6
    25e0:	00000440 	.word	0x00000440
    25e4:	00000254 	.word	0x00000254

000025e8 <rename_to_unique>:
{
    25e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ea:	46ce      	mov	lr, r9
    25ec:	b500      	push	{lr}
    25ee:	b0ca      	sub	sp, #296	; 0x128
    25f0:	0007      	movs	r7, r0
    25f2:	9002      	str	r0, [sp, #8]
    25f4:	000e      	movs	r6, r1
    25f6:	9104      	str	r1, [sp, #16]
    25f8:	9205      	str	r2, [sp, #20]
    25fa:	4d67      	ldr	r5, [pc, #412]	; (2798 <rename_to_unique+0x1b0>)
    25fc:	447d      	add	r5, pc
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    25fe:	22fb      	movs	r2, #251	; 0xfb
    2600:	2100      	movs	r1, #0
    2602:	a80b      	add	r0, sp, #44	; 0x2c
    2604:	4b65      	ldr	r3, [pc, #404]	; (279c <rename_to_unique+0x1b4>)
    2606:	58ec      	ldr	r4, [r5, r3]
    2608:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    260a:	2209      	movs	r2, #9
    260c:	2100      	movs	r1, #0
    260e:	a808      	add	r0, sp, #32
    2610:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
    2612:	2300      	movs	r3, #0
    2614:	9307      	str	r3, [sp, #28]
	if (file_path_name == NULL) {
    2616:	2e00      	cmp	r6, #0
    2618:	d100      	bne.n	261c <rename_to_unique+0x34>
    261a:	e0b0      	b.n	277e <rename_to_unique+0x196>
	if (!is_exist_file(fp, file_path_name)) {
    261c:	0031      	movs	r1, r6
    261e:	0038      	movs	r0, r7
    2620:	4b5f      	ldr	r3, [pc, #380]	; (27a0 <rename_to_unique+0x1b8>)
    2622:	447b      	add	r3, pc
    2624:	4798      	blx	r3
    2626:	9001      	str	r0, [sp, #4]
    2628:	9003      	str	r0, [sp, #12]
    262a:	2800      	cmp	r0, #0
    262c:	d100      	bne.n	2630 <rename_to_unique+0x48>
    262e:	e0a9      	b.n	2784 <rename_to_unique+0x19c>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    2630:	0030      	movs	r0, r6
    2632:	4b5c      	ldr	r3, [pc, #368]	; (27a4 <rename_to_unique+0x1bc>)
    2634:	58ea      	ldr	r2, [r5, r3]
    2636:	9200      	str	r2, [sp, #0]
    2638:	4790      	blx	r2
    263a:	28fa      	cmp	r0, #250	; 0xfa
    263c:	d900      	bls.n	2640 <rename_to_unique+0x58>
    263e:	e0a8      	b.n	2792 <rename_to_unique+0x1aa>
	p = strrchr(file_path_name, '.');
    2640:	212e      	movs	r1, #46	; 0x2e
    2642:	9604      	str	r6, [sp, #16]
    2644:	0030      	movs	r0, r6
    2646:	4b58      	ldr	r3, [pc, #352]	; (27a8 <rename_to_unique+0x1c0>)
    2648:	58ea      	ldr	r2, [r5, r3]
    264a:	9200      	str	r2, [sp, #0]
    264c:	4790      	blx	r2
    264e:	1e06      	subs	r6, r0, #0
	if (p != NULL) {
    2650:	d044      	beq.n	26dc <rename_to_unique+0xf4>
		ext_len = strlen(p);
    2652:	4b54      	ldr	r3, [pc, #336]	; (27a4 <rename_to_unique+0x1bc>)
    2654:	58ea      	ldr	r2, [r5, r3]
    2656:	9200      	str	r2, [sp, #0]
    2658:	4790      	blx	r2
    265a:	0007      	movs	r7, r0
    265c:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    265e:	2c07      	cmp	r4, #7
    2660:	d82a      	bhi.n	26b8 <rename_to_unique+0xd0>
			strcpy(ext, p);
    2662:	0031      	movs	r1, r6
    2664:	a808      	add	r0, sp, #32
    2666:	4b51      	ldr	r3, [pc, #324]	; (27ac <rename_to_unique+0x1c4>)
    2668:	58ea      	ldr	r2, [r5, r3]
    266a:	9200      	str	r2, [sp, #0]
    266c:	4790      	blx	r2
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    266e:	9804      	ldr	r0, [sp, #16]
    2670:	4b4c      	ldr	r3, [pc, #304]	; (27a4 <rename_to_unique+0x1bc>)
    2672:	58ea      	ldr	r2, [r5, r3]
    2674:	9200      	str	r2, [sp, #0]
    2676:	4790      	blx	r2
    2678:	043f      	lsls	r7, r7, #16
    267a:	0c3f      	lsrs	r7, r7, #16
    267c:	1bc7      	subs	r7, r0, r7
    267e:	2ff6      	cmp	r7, #246	; 0xf6
    2680:	d90c      	bls.n	269c <rename_to_unique+0xb4>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    2682:	27f6      	movs	r7, #246	; 0xf6
    2684:	1b3f      	subs	r7, r7, r4
    2686:	b2bc      	uxth	r4, r7
				strncpy(name, file_path_name, name_len);
    2688:	0022      	movs	r2, r4
    268a:	9904      	ldr	r1, [sp, #16]
    268c:	a80b      	add	r0, sp, #44	; 0x2c
    268e:	4b48      	ldr	r3, [pc, #288]	; (27b0 <rename_to_unique+0x1c8>)
    2690:	58ee      	ldr	r6, [r5, r3]
    2692:	9600      	str	r6, [sp, #0]
    2694:	47b0      	blx	r6
			valid_ext = true;
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	4699      	mov	r9, r3
    269a:	e017      	b.n	26cc <rename_to_unique+0xe4>
				name_len = (p - file_path_name);
    269c:	9b04      	ldr	r3, [sp, #16]
    269e:	1af2      	subs	r2, r6, r3
    26a0:	b294      	uxth	r4, r2
				strncpy(name, file_path_name, name_len);
    26a2:	0412      	lsls	r2, r2, #16
    26a4:	0c12      	lsrs	r2, r2, #16
    26a6:	0019      	movs	r1, r3
    26a8:	a80b      	add	r0, sp, #44	; 0x2c
    26aa:	4b41      	ldr	r3, [pc, #260]	; (27b0 <rename_to_unique+0x1c8>)
    26ac:	58eb      	ldr	r3, [r5, r3]
    26ae:	9300      	str	r3, [sp, #0]
    26b0:	4798      	blx	r3
			valid_ext = true;
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	4699      	mov	r9, r3
    26b6:	e009      	b.n	26cc <rename_to_unique+0xe4>
			strncpy(name, file_path_name, name_len);
    26b8:	22f6      	movs	r2, #246	; 0xf6
    26ba:	9904      	ldr	r1, [sp, #16]
    26bc:	a80b      	add	r0, sp, #44	; 0x2c
    26be:	4b3c      	ldr	r3, [pc, #240]	; (27b0 <rename_to_unique+0x1c8>)
    26c0:	58eb      	ldr	r3, [r5, r3]
    26c2:	9300      	str	r3, [sp, #0]
    26c4:	4798      	blx	r3
	bool valid_ext = false;
    26c6:	2300      	movs	r3, #0
    26c8:	4699      	mov	r9, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    26ca:	24f6      	movs	r4, #246	; 0xf6
	name[name_len++] = '-';
    26cc:	1c67      	adds	r7, r4, #1
    26ce:	b2bf      	uxth	r7, r7
    26d0:	222d      	movs	r2, #45	; 0x2d
    26d2:	ab0b      	add	r3, sp, #44	; 0x2c
    26d4:	551a      	strb	r2, [r3, r4]
	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    26d6:	2401      	movs	r4, #1
    26d8:	2300      	movs	r3, #0
    26da:	e010      	b.n	26fe <rename_to_unique+0x116>
		strncpy(name, file_path_name, name_len);
    26dc:	22f6      	movs	r2, #246	; 0xf6
    26de:	9904      	ldr	r1, [sp, #16]
    26e0:	a80b      	add	r0, sp, #44	; 0x2c
    26e2:	4b33      	ldr	r3, [pc, #204]	; (27b0 <rename_to_unique+0x1c8>)
    26e4:	58eb      	ldr	r3, [r5, r3]
    26e6:	9300      	str	r3, [sp, #0]
    26e8:	4798      	blx	r3
	bool valid_ext = false;
    26ea:	2300      	movs	r3, #0
    26ec:	4699      	mov	r9, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    26ee:	24f6      	movs	r4, #246	; 0xf6
    26f0:	e7ec      	b.n	26cc <rename_to_unique+0xe4>
		count *= 10;
    26f2:	00a2      	lsls	r2, r4, #2
    26f4:	18a4      	adds	r4, r4, r2
    26f6:	0062      	lsls	r2, r4, #1
    26f8:	b294      	uxth	r4, r2
	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    26fa:	3301      	adds	r3, #1
    26fc:	b29b      	uxth	r3, r3
    26fe:	2b02      	cmp	r3, #2
    2700:	d9f7      	bls.n	26f2 <rename_to_unique+0x10a>
    2702:	2601      	movs	r6, #1
    2704:	e008      	b.n	2718 <rename_to_unique+0x130>
		if (!is_exist_file(fp, name)) {
    2706:	a90b      	add	r1, sp, #44	; 0x2c
    2708:	9802      	ldr	r0, [sp, #8]
    270a:	4b2a      	ldr	r3, [pc, #168]	; (27b4 <rename_to_unique+0x1cc>)
    270c:	447b      	add	r3, pc
    270e:	4798      	blx	r3
    2710:	2800      	cmp	r0, #0
    2712:	d022      	beq.n	275a <rename_to_unique+0x172>
	for (i = 1; i < count; i++) {
    2714:	3601      	adds	r6, #1
    2716:	b2b6      	uxth	r6, r6
    2718:	42a6      	cmp	r6, r4
    271a:	d22d      	bcs.n	2778 <rename_to_unique+0x190>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    271c:	0032      	movs	r2, r6
    271e:	4926      	ldr	r1, [pc, #152]	; (27b8 <rename_to_unique+0x1d0>)
    2720:	4479      	add	r1, pc
    2722:	ab07      	add	r3, sp, #28
    2724:	9300      	str	r3, [sp, #0]
    2726:	0018      	movs	r0, r3
    2728:	4b24      	ldr	r3, [pc, #144]	; (27bc <rename_to_unique+0x1d4>)
    272a:	58eb      	ldr	r3, [r5, r3]
    272c:	9301      	str	r3, [sp, #4]
    272e:	469c      	mov	ip, r3
    2730:	47e0      	blx	ip
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    2732:	a80b      	add	r0, sp, #44	; 0x2c
    2734:	19c0      	adds	r0, r0, r7
    2736:	2203      	movs	r2, #3
    2738:	9900      	ldr	r1, [sp, #0]
    273a:	4b1d      	ldr	r3, [pc, #116]	; (27b0 <rename_to_unique+0x1c8>)
    273c:	58eb      	ldr	r3, [r5, r3]
    273e:	9300      	str	r3, [sp, #0]
    2740:	4798      	blx	r3
		if (valid_ext) {
    2742:	464b      	mov	r3, r9
    2744:	2b00      	cmp	r3, #0
    2746:	d0de      	beq.n	2706 <rename_to_unique+0x11e>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    2748:	1cfb      	adds	r3, r7, #3
    274a:	a80b      	add	r0, sp, #44	; 0x2c
    274c:	18c0      	adds	r0, r0, r3
    274e:	a908      	add	r1, sp, #32
    2750:	4b16      	ldr	r3, [pc, #88]	; (27ac <rename_to_unique+0x1c4>)
    2752:	58eb      	ldr	r3, [r5, r3]
    2754:	9300      	str	r3, [sp, #0]
    2756:	4798      	blx	r3
    2758:	e7d5      	b.n	2706 <rename_to_unique+0x11e>
			memset(file_path_name, 0, max_len);
    275a:	9a05      	ldr	r2, [sp, #20]
    275c:	2100      	movs	r1, #0
    275e:	9c04      	ldr	r4, [sp, #16]
    2760:	0020      	movs	r0, r4
    2762:	4b0e      	ldr	r3, [pc, #56]	; (279c <rename_to_unique+0x1b4>)
    2764:	58eb      	ldr	r3, [r5, r3]
    2766:	9300      	str	r3, [sp, #0]
    2768:	4798      	blx	r3
			strcpy(file_path_name, name);
    276a:	a90b      	add	r1, sp, #44	; 0x2c
    276c:	0020      	movs	r0, r4
    276e:	4b0f      	ldr	r3, [pc, #60]	; (27ac <rename_to_unique+0x1c4>)
    2770:	58eb      	ldr	r3, [r5, r3]
    2772:	9300      	str	r3, [sp, #0]
    2774:	4798      	blx	r3
			return true;
    2776:	e007      	b.n	2788 <rename_to_unique+0x1a0>
	return false;
    2778:	2300      	movs	r3, #0
    277a:	9303      	str	r3, [sp, #12]
    277c:	e004      	b.n	2788 <rename_to_unique+0x1a0>
		return false;
    277e:	2300      	movs	r3, #0
    2780:	9303      	str	r3, [sp, #12]
    2782:	e001      	b.n	2788 <rename_to_unique+0x1a0>
		return true;
    2784:	2301      	movs	r3, #1
    2786:	9303      	str	r3, [sp, #12]
}
    2788:	9803      	ldr	r0, [sp, #12]
    278a:	b04a      	add	sp, #296	; 0x128
    278c:	bc04      	pop	{r2}
    278e:	4691      	mov	r9, r2
    2790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
    2792:	2300      	movs	r3, #0
    2794:	9303      	str	r3, [sp, #12]
    2796:	e7f7      	b.n	2788 <rename_to_unique+0x1a0>
    2798:	00010390 	.word	0x00010390
    279c:	00000328 	.word	0x00000328
    27a0:	ffffff73 	.word	0xffffff73
    27a4:	00000484 	.word	0x00000484
    27a8:	000001d0 	.word	0x000001d0
    27ac:	0000000c 	.word	0x0000000c
    27b0:	000002a4 	.word	0x000002a4
    27b4:	fffffe89 	.word	0xfffffe89
    27b8:	0000ee60 	.word	0x0000ee60
    27bc:	0000039c 	.word	0x0000039c

000027c0 <store_file_packet>:
{
    27c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c2:	b085      	sub	sp, #20
    27c4:	0005      	movs	r5, r0
    27c6:	000f      	movs	r7, r1
    27c8:	4e53      	ldr	r6, [pc, #332]	; (2918 <store_file_packet+0x158>)
    27ca:	447e      	add	r6, pc
	if ((data == NULL) || (length < 1)) {
    27cc:	2800      	cmp	r0, #0
    27ce:	d010      	beq.n	27f2 <store_file_packet+0x32>
    27d0:	2900      	cmp	r1, #0
    27d2:	d00e      	beq.n	27f2 <store_file_packet+0x32>
	return ((down_state & mask) != 0);
    27d4:	4b51      	ldr	r3, [pc, #324]	; (291c <store_file_packet+0x15c>)
    27d6:	447b      	add	r3, pc
    27d8:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    27da:	071b      	lsls	r3, r3, #28
    27dc:	d445      	bmi.n	286a <store_file_packet+0xaa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    27de:	4b50      	ldr	r3, [pc, #320]	; (2920 <store_file_packet+0x160>)
    27e0:	447b      	add	r3, pc
    27e2:	2230      	movs	r2, #48	; 0x30
    27e4:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    27e6:	320a      	adds	r2, #10
    27e8:	705a      	strb	r2, [r3, #1]
		cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    27ea:	4c4e      	ldr	r4, [pc, #312]	; (2924 <store_file_packet+0x164>)
    27ec:	447c      	add	r4, pc
    27ee:	3430      	adds	r4, #48	; 0x30
		while (*cp != '/') {
    27f0:	e008      	b.n	2804 <store_file_packet+0x44>
		printf("store_file_packet: empty data.\r\n");
    27f2:	484d      	ldr	r0, [pc, #308]	; (2928 <store_file_packet+0x168>)
    27f4:	4478      	add	r0, pc
    27f6:	4b4d      	ldr	r3, [pc, #308]	; (292c <store_file_packet+0x16c>)
    27f8:	58f3      	ldr	r3, [r6, r3]
    27fa:	9300      	str	r3, [sp, #0]
    27fc:	4798      	blx	r3
}
    27fe:	b005      	add	sp, #20
    2800:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    2802:	3c01      	subs	r4, #1
		while (*cp != '/') {
    2804:	7823      	ldrb	r3, [r4, #0]
    2806:	2b2f      	cmp	r3, #47	; 0x2f
    2808:	d1fb      	bne.n	2802 <store_file_packet+0x42>
		if (strlen(cp) > 1) {
    280a:	0020      	movs	r0, r4
    280c:	4b48      	ldr	r3, [pc, #288]	; (2930 <store_file_packet+0x170>)
    280e:	58f3      	ldr	r3, [r6, r3]
    2810:	9300      	str	r3, [sp, #0]
    2812:	4798      	blx	r3
    2814:	2801      	cmp	r0, #1
    2816:	d945      	bls.n	28a4 <store_file_packet+0xe4>
			cp++;
    2818:	1c61      	adds	r1, r4, #1
			strcpy(&save_file_name[2], cp);
    281a:	4c46      	ldr	r4, [pc, #280]	; (2934 <store_file_packet+0x174>)
    281c:	447c      	add	r4, pc
    281e:	1ca0      	adds	r0, r4, #2
    2820:	4b45      	ldr	r3, [pc, #276]	; (2938 <store_file_packet+0x178>)
    2822:	58f3      	ldr	r3, [r6, r3]
    2824:	9300      	str	r3, [sp, #0]
    2826:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    2828:	4b44      	ldr	r3, [pc, #272]	; (293c <store_file_packet+0x17c>)
    282a:	447b      	add	r3, pc
    282c:	22fa      	movs	r2, #250	; 0xfa
    282e:	0021      	movs	r1, r4
    2830:	9300      	str	r3, [sp, #0]
    2832:	0018      	movs	r0, r3
    2834:	4b42      	ldr	r3, [pc, #264]	; (2940 <store_file_packet+0x180>)
    2836:	447b      	add	r3, pc
    2838:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    283a:	0021      	movs	r1, r4
    283c:	4841      	ldr	r0, [pc, #260]	; (2944 <store_file_packet+0x184>)
    283e:	4478      	add	r0, pc
    2840:	4b41      	ldr	r3, [pc, #260]	; (2948 <store_file_packet+0x188>)
    2842:	58f2      	ldr	r2, [r6, r3]
    2844:	9201      	str	r2, [sp, #4]
    2846:	4790      	blx	r2
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    2848:	220a      	movs	r2, #10
    284a:	0021      	movs	r1, r4
    284c:	9800      	ldr	r0, [sp, #0]
    284e:	4b3f      	ldr	r3, [pc, #252]	; (294c <store_file_packet+0x18c>)
    2850:	58f3      	ldr	r3, [r6, r3]
    2852:	9300      	str	r3, [sp, #0]
    2854:	4798      	blx	r3
		if (ret != FR_OK) {
    2856:	2800      	cmp	r0, #0
    2858:	d12f      	bne.n	28ba <store_file_packet+0xfa>
		received_file_size = 0;
    285a:	2200      	movs	r2, #0
    285c:	4b3c      	ldr	r3, [pc, #240]	; (2950 <store_file_packet+0x190>)
    285e:	447b      	add	r3, pc
    2860:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    2862:	2008      	movs	r0, #8
    2864:	4b3b      	ldr	r3, [pc, #236]	; (2954 <store_file_packet+0x194>)
    2866:	447b      	add	r3, pc
    2868:	4798      	blx	r3
		UINT wsize = length;
    286a:	9703      	str	r7, [sp, #12]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    286c:	ab03      	add	r3, sp, #12
    286e:	003a      	movs	r2, r7
    2870:	0029      	movs	r1, r5
    2872:	4839      	ldr	r0, [pc, #228]	; (2958 <store_file_packet+0x198>)
    2874:	4478      	add	r0, pc
    2876:	4c39      	ldr	r4, [pc, #228]	; (295c <store_file_packet+0x19c>)
    2878:	5934      	ldr	r4, [r6, r4]
    287a:	9400      	str	r4, [sp, #0]
    287c:	47a0      	blx	r4
		if (ret != FR_OK) {
    287e:	2800      	cmp	r0, #0
    2880:	d023      	beq.n	28ca <store_file_packet+0x10a>
			f_close(&file_object);
    2882:	4837      	ldr	r0, [pc, #220]	; (2960 <store_file_packet+0x1a0>)
    2884:	4478      	add	r0, pc
    2886:	4b37      	ldr	r3, [pc, #220]	; (2964 <store_file_packet+0x1a4>)
    2888:	58f3      	ldr	r3, [r6, r3]
    288a:	9300      	str	r3, [sp, #0]
    288c:	4798      	blx	r3
			add_state(CANCELED);
    288e:	2020      	movs	r0, #32
    2890:	4b35      	ldr	r3, [pc, #212]	; (2968 <store_file_packet+0x1a8>)
    2892:	447b      	add	r3, pc
    2894:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    2896:	4835      	ldr	r0, [pc, #212]	; (296c <store_file_packet+0x1ac>)
    2898:	4478      	add	r0, pc
    289a:	4b24      	ldr	r3, [pc, #144]	; (292c <store_file_packet+0x16c>)
    289c:	58f3      	ldr	r3, [r6, r3]
    289e:	9300      	str	r3, [sp, #0]
    28a0:	4798      	blx	r3
			return;
    28a2:	e7ac      	b.n	27fe <store_file_packet+0x3e>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    28a4:	4832      	ldr	r0, [pc, #200]	; (2970 <store_file_packet+0x1b0>)
    28a6:	4478      	add	r0, pc
    28a8:	4b20      	ldr	r3, [pc, #128]	; (292c <store_file_packet+0x16c>)
    28aa:	58f3      	ldr	r3, [r6, r3]
    28ac:	9300      	str	r3, [sp, #0]
    28ae:	4798      	blx	r3
			add_state(CANCELED);
    28b0:	2020      	movs	r0, #32
    28b2:	4b30      	ldr	r3, [pc, #192]	; (2974 <store_file_packet+0x1b4>)
    28b4:	447b      	add	r3, pc
    28b6:	4798      	blx	r3
			return;
    28b8:	e7a1      	b.n	27fe <store_file_packet+0x3e>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    28ba:	0001      	movs	r1, r0
    28bc:	482e      	ldr	r0, [pc, #184]	; (2978 <store_file_packet+0x1b8>)
    28be:	4478      	add	r0, pc
    28c0:	4b21      	ldr	r3, [pc, #132]	; (2948 <store_file_packet+0x188>)
    28c2:	58f3      	ldr	r3, [r6, r3]
    28c4:	9300      	str	r3, [sp, #0]
    28c6:	4798      	blx	r3
			return;
    28c8:	e799      	b.n	27fe <store_file_packet+0x3e>
		received_file_size += wsize;
    28ca:	4c2c      	ldr	r4, [pc, #176]	; (297c <store_file_packet+0x1bc>)
    28cc:	447c      	add	r4, pc
    28ce:	6823      	ldr	r3, [r4, #0]
    28d0:	9a03      	ldr	r2, [sp, #12]
    28d2:	4694      	mov	ip, r2
    28d4:	4463      	add	r3, ip
    28d6:	0019      	movs	r1, r3
    28d8:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    28da:	4d29      	ldr	r5, [pc, #164]	; (2980 <store_file_packet+0x1c0>)
    28dc:	447d      	add	r5, pc
    28de:	682a      	ldr	r2, [r5, #0]
    28e0:	4828      	ldr	r0, [pc, #160]	; (2984 <store_file_packet+0x1c4>)
    28e2:	4478      	add	r0, pc
    28e4:	4b18      	ldr	r3, [pc, #96]	; (2948 <store_file_packet+0x188>)
    28e6:	58f3      	ldr	r3, [r6, r3]
    28e8:	9300      	str	r3, [sp, #0]
    28ea:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    28ec:	6822      	ldr	r2, [r4, #0]
    28ee:	682b      	ldr	r3, [r5, #0]
    28f0:	429a      	cmp	r2, r3
    28f2:	d200      	bcs.n	28f6 <store_file_packet+0x136>
    28f4:	e783      	b.n	27fe <store_file_packet+0x3e>
			f_close(&file_object);
    28f6:	4824      	ldr	r0, [pc, #144]	; (2988 <store_file_packet+0x1c8>)
    28f8:	4478      	add	r0, pc
    28fa:	4b1a      	ldr	r3, [pc, #104]	; (2964 <store_file_packet+0x1a4>)
    28fc:	58f3      	ldr	r3, [r6, r3]
    28fe:	9300      	str	r3, [sp, #0]
    2900:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    2902:	4822      	ldr	r0, [pc, #136]	; (298c <store_file_packet+0x1cc>)
    2904:	4478      	add	r0, pc
    2906:	4b09      	ldr	r3, [pc, #36]	; (292c <store_file_packet+0x16c>)
    2908:	58f3      	ldr	r3, [r6, r3]
    290a:	9300      	str	r3, [sp, #0]
    290c:	4798      	blx	r3
			add_state(COMPLETED);
    290e:	2010      	movs	r0, #16
    2910:	4b1f      	ldr	r3, [pc, #124]	; (2990 <store_file_packet+0x1d0>)
    2912:	447b      	add	r3, pc
    2914:	4798      	blx	r3
			return;
    2916:	e772      	b.n	27fe <store_file_packet+0x3e>
    2918:	000101c2 	.word	0x000101c2
    291c:	1fffdc56 	.word	0x1fffdc56
    2920:	1fffd81c 	.word	0x1fffd81c
    2924:	0000eea4 	.word	0x0000eea4
    2928:	0000eed0 	.word	0x0000eed0
    292c:	00000108 	.word	0x00000108
    2930:	00000484 	.word	0x00000484
    2934:	1fffd7e0 	.word	0x1fffd7e0
    2938:	0000000c 	.word	0x0000000c
    293c:	1fffde36 	.word	0x1fffde36
    2940:	fffffdaf 	.word	0xfffffdaf
    2944:	0000eea6 	.word	0x0000eea6
    2948:	0000003c 	.word	0x0000003c
    294c:	00000440 	.word	0x00000440
    2950:	1fffe02a 	.word	0x1fffe02a
    2954:	fffff897 	.word	0xfffff897
    2958:	1fffddec 	.word	0x1fffddec
    295c:	0000042c 	.word	0x0000042c
    2960:	1fffdddc 	.word	0x1fffdddc
    2964:	00000254 	.word	0x00000254
    2968:	fffff86b 	.word	0xfffff86b
    296c:	0000eee8 	.word	0x0000eee8
    2970:	0000ee66 	.word	0x0000ee66
    2974:	fffff849 	.word	0xfffff849
    2978:	0000ee8e 	.word	0x0000ee8e
    297c:	1fffdfbc 	.word	0x1fffdfbc
    2980:	1fffdfa8 	.word	0x1fffdfa8
    2984:	0000eeda 	.word	0x0000eeda
    2988:	1fffdd68 	.word	0x1fffdd68
    298c:	0000eeec 	.word	0x0000eeec
    2990:	fffff7eb 	.word	0xfffff7eb

00002994 <http_client_callback>:
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b083      	sub	sp, #12
    2998:	0015      	movs	r5, r2
    299a:	4c3b      	ldr	r4, [pc, #236]	; (2a88 <http_client_callback+0xf4>)
    299c:	447c      	add	r4, pc
	switch (type) {
    299e:	2904      	cmp	r1, #4
    29a0:	d80b      	bhi.n	29ba <http_client_callback+0x26>
    29a2:	0008      	movs	r0, r1
    29a4:	f00c fe3c 	bl	f620 <__gnu_thumb1_case_uqi>
    29a8:	3b160b03 	.word	0x3b160b03
    29ac:	48          	.byte	0x48
    29ad:	00          	.byte	0x00
		printf("http_client_callback: HTTP client socket connected.\r\n");
    29ae:	4837      	ldr	r0, [pc, #220]	; (2a8c <http_client_callback+0xf8>)
    29b0:	4478      	add	r0, pc
    29b2:	4b37      	ldr	r3, [pc, #220]	; (2a90 <http_client_callback+0xfc>)
    29b4:	58e3      	ldr	r3, [r4, r3]
    29b6:	9301      	str	r3, [sp, #4]
    29b8:	4798      	blx	r3
}
    29ba:	b003      	add	sp, #12
    29bc:	bd30      	pop	{r4, r5, pc}
		printf("http_client_callback: request completed.\r\n");
    29be:	4835      	ldr	r0, [pc, #212]	; (2a94 <http_client_callback+0x100>)
    29c0:	4478      	add	r0, pc
    29c2:	4b33      	ldr	r3, [pc, #204]	; (2a90 <http_client_callback+0xfc>)
    29c4:	58e3      	ldr	r3, [r4, r3]
    29c6:	9301      	str	r3, [sp, #4]
    29c8:	4798      	blx	r3
		add_state(GET_REQUESTED);
    29ca:	2004      	movs	r0, #4
    29cc:	4b32      	ldr	r3, [pc, #200]	; (2a98 <http_client_callback+0x104>)
    29ce:	447b      	add	r3, pc
    29d0:	4798      	blx	r3
		break;
    29d2:	e7f2      	b.n	29ba <http_client_callback+0x26>
				(unsigned int)data->recv_response.response_code,
    29d4:	8811      	ldrh	r1, [r2, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
    29d6:	6852      	ldr	r2, [r2, #4]
    29d8:	4830      	ldr	r0, [pc, #192]	; (2a9c <http_client_callback+0x108>)
    29da:	4478      	add	r0, pc
    29dc:	4b30      	ldr	r3, [pc, #192]	; (2aa0 <http_client_callback+0x10c>)
    29de:	58e3      	ldr	r3, [r4, r3]
    29e0:	9301      	str	r3, [sp, #4]
    29e2:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    29e4:	882b      	ldrh	r3, [r5, #0]
    29e6:	2bc8      	cmp	r3, #200	; 0xc8
    29e8:	d114      	bne.n	2a14 <http_client_callback+0x80>
			http_file_size = data->recv_response.content_length;
    29ea:	6869      	ldr	r1, [r5, #4]
    29ec:	4b2d      	ldr	r3, [pc, #180]	; (2aa4 <http_client_callback+0x110>)
    29ee:	447b      	add	r3, pc
    29f0:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    29f2:	2200      	movs	r2, #0
    29f4:	4b2c      	ldr	r3, [pc, #176]	; (2aa8 <http_client_callback+0x114>)
    29f6:	447b      	add	r3, pc
    29f8:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    29fa:	2380      	movs	r3, #128	; 0x80
    29fc:	00db      	lsls	r3, r3, #3
    29fe:	4299      	cmp	r1, r3
    2a00:	d8db      	bhi.n	29ba <http_client_callback+0x26>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2a02:	68a8      	ldr	r0, [r5, #8]
    2a04:	4b29      	ldr	r3, [pc, #164]	; (2aac <http_client_callback+0x118>)
    2a06:	447b      	add	r3, pc
    2a08:	4798      	blx	r3
			add_state(COMPLETED);
    2a0a:	2010      	movs	r0, #16
    2a0c:	4b28      	ldr	r3, [pc, #160]	; (2ab0 <http_client_callback+0x11c>)
    2a0e:	447b      	add	r3, pc
    2a10:	4798      	blx	r3
    2a12:	e7d2      	b.n	29ba <http_client_callback+0x26>
			add_state(CANCELED);
    2a14:	2020      	movs	r0, #32
    2a16:	4b27      	ldr	r3, [pc, #156]	; (2ab4 <http_client_callback+0x120>)
    2a18:	447b      	add	r3, pc
    2a1a:	4798      	blx	r3
			return;
    2a1c:	e7cd      	b.n	29ba <http_client_callback+0x26>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    2a1e:	6811      	ldr	r1, [r2, #0]
    2a20:	6850      	ldr	r0, [r2, #4]
    2a22:	4b25      	ldr	r3, [pc, #148]	; (2ab8 <http_client_callback+0x124>)
    2a24:	447b      	add	r3, pc
    2a26:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    2a28:	7a2b      	ldrb	r3, [r5, #8]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d0c5      	beq.n	29ba <http_client_callback+0x26>
			add_state(COMPLETED);
    2a2e:	2010      	movs	r0, #16
    2a30:	4b22      	ldr	r3, [pc, #136]	; (2abc <http_client_callback+0x128>)
    2a32:	447b      	add	r3, pc
    2a34:	4798      	blx	r3
    2a36:	e7c0      	b.n	29ba <http_client_callback+0x26>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    2a38:	6811      	ldr	r1, [r2, #0]
    2a3a:	4821      	ldr	r0, [pc, #132]	; (2ac0 <http_client_callback+0x12c>)
    2a3c:	4478      	add	r0, pc
    2a3e:	4b18      	ldr	r3, [pc, #96]	; (2aa0 <http_client_callback+0x10c>)
    2a40:	58e3      	ldr	r3, [r4, r3]
    2a42:	9301      	str	r3, [sp, #4]
    2a44:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    2a46:	682b      	ldr	r3, [r5, #0]
    2a48:	330b      	adds	r3, #11
    2a4a:	d1b6      	bne.n	29ba <http_client_callback+0x26>
	return ((down_state & mask) != 0);
    2a4c:	4b1d      	ldr	r3, [pc, #116]	; (2ac4 <http_client_callback+0x130>)
    2a4e:	447b      	add	r3, pc
    2a50:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    2a52:	071b      	lsls	r3, r3, #28
    2a54:	d408      	bmi.n	2a68 <http_client_callback+0xd4>
	return ((down_state & mask) != 0);
    2a56:	4b1c      	ldr	r3, [pc, #112]	; (2ac8 <http_client_callback+0x134>)
    2a58:	447b      	add	r3, pc
    2a5a:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    2a5c:	075b      	lsls	r3, r3, #29
    2a5e:	d40e      	bmi.n	2a7e <http_client_callback+0xea>
			start_download();
    2a60:	4b1a      	ldr	r3, [pc, #104]	; (2acc <http_client_callback+0x138>)
    2a62:	447b      	add	r3, pc
    2a64:	4798      	blx	r3
    2a66:	e7a8      	b.n	29ba <http_client_callback+0x26>
				f_close(&file_object);
    2a68:	4819      	ldr	r0, [pc, #100]	; (2ad0 <http_client_callback+0x13c>)
    2a6a:	4478      	add	r0, pc
    2a6c:	4b19      	ldr	r3, [pc, #100]	; (2ad4 <http_client_callback+0x140>)
    2a6e:	58e3      	ldr	r3, [r4, r3]
    2a70:	9301      	str	r3, [sp, #4]
    2a72:	4798      	blx	r3
				clear_state(DOWNLOADING);
    2a74:	2008      	movs	r0, #8
    2a76:	4b18      	ldr	r3, [pc, #96]	; (2ad8 <http_client_callback+0x144>)
    2a78:	447b      	add	r3, pc
    2a7a:	4798      	blx	r3
    2a7c:	e7eb      	b.n	2a56 <http_client_callback+0xc2>
				clear_state(GET_REQUESTED);
    2a7e:	2004      	movs	r0, #4
    2a80:	4b16      	ldr	r3, [pc, #88]	; (2adc <http_client_callback+0x148>)
    2a82:	447b      	add	r3, pc
    2a84:	4798      	blx	r3
    2a86:	e7eb      	b.n	2a60 <http_client_callback+0xcc>
    2a88:	0000fff0 	.word	0x0000fff0
    2a8c:	0000e9a8 	.word	0x0000e9a8
    2a90:	00000108 	.word	0x00000108
    2a94:	0000e9d0 	.word	0x0000e9d0
    2a98:	fffff72f 	.word	0xfffff72f
    2a9c:	0000e9e2 	.word	0x0000e9e2
    2aa0:	0000003c 	.word	0x0000003c
    2aa4:	1fffde96 	.word	0x1fffde96
    2aa8:	1fffde92 	.word	0x1fffde92
    2aac:	fffffdb7 	.word	0xfffffdb7
    2ab0:	fffff6ef 	.word	0xfffff6ef
    2ab4:	fffff6e5 	.word	0xfffff6e5
    2ab8:	fffffd99 	.word	0xfffffd99
    2abc:	fffff6cb 	.word	0xfffff6cb
    2ac0:	0000e9bc 	.word	0x0000e9bc
    2ac4:	1fffd9de 	.word	0x1fffd9de
    2ac8:	1fffd9d4 	.word	0x1fffd9d4
    2acc:	fffff717 	.word	0xfffff717
    2ad0:	1fffdbf6 	.word	0x1fffdbf6
    2ad4:	00000254 	.word	0x00000254
    2ad8:	fffff675 	.word	0xfffff675
    2adc:	fffff66b 	.word	0xfffff66b

00002ae0 <init_storage>:

static void init_storage(void)
{
    2ae0:	b570      	push	{r4, r5, r6, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	4d26      	ldr	r5, [pc, #152]	; (2b80 <init_storage+0xa0>)
    2ae6:	447d      	add	r5, pc
	FRESULT res;
	Ctrl_status status;

	sd_mmc_init();
    2ae8:	4b26      	ldr	r3, [pc, #152]	; (2b84 <init_storage+0xa4>)
    2aea:	58eb      	ldr	r3, [r5, r3]
    2aec:	9301      	str	r3, [sp, #4]
    2aee:	4798      	blx	r3
    2af0:	e001      	b.n	2af6 <init_storage+0x16>
				printf("init_storage: SD Card install failed.\r\n");
				printf("init_storage: try unplug and re-plug the card.\r\n");
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
				}
			}
		} while (CTRL_GOOD != status);
    2af2:	2c00      	cmp	r4, #0
    2af4:	d017      	beq.n	2b26 <init_storage+0x46>
			status = sd_mmc_test_unit_ready(0);
    2af6:	2000      	movs	r0, #0
    2af8:	4b23      	ldr	r3, [pc, #140]	; (2b88 <init_storage+0xa8>)
    2afa:	58eb      	ldr	r3, [r5, r3]
    2afc:	9301      	str	r3, [sp, #4]
    2afe:	4798      	blx	r3
    2b00:	0004      	movs	r4, r0
			if (CTRL_FAIL == status) {
    2b02:	2801      	cmp	r0, #1
    2b04:	d1f5      	bne.n	2af2 <init_storage+0x12>
				printf("init_storage: SD Card install failed.\r\n");
    2b06:	4821      	ldr	r0, [pc, #132]	; (2b8c <init_storage+0xac>)
    2b08:	4478      	add	r0, pc
    2b0a:	4b21      	ldr	r3, [pc, #132]	; (2b90 <init_storage+0xb0>)
    2b0c:	58ee      	ldr	r6, [r5, r3]
    2b0e:	47b0      	blx	r6
				printf("init_storage: try unplug and re-plug the card.\r\n");
    2b10:	4820      	ldr	r0, [pc, #128]	; (2b94 <init_storage+0xb4>)
    2b12:	4478      	add	r0, pc
    2b14:	47b0      	blx	r6
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    2b16:	2000      	movs	r0, #0
    2b18:	4b1f      	ldr	r3, [pc, #124]	; (2b98 <init_storage+0xb8>)
    2b1a:	58eb      	ldr	r3, [r5, r3]
    2b1c:	9301      	str	r3, [sp, #4]
    2b1e:	4798      	blx	r3
    2b20:	2802      	cmp	r0, #2
    2b22:	d1f8      	bne.n	2b16 <init_storage+0x36>
    2b24:	e7e5      	b.n	2af2 <init_storage+0x12>

		printf("init_storage: mounting SD card...\r\n");
    2b26:	481d      	ldr	r0, [pc, #116]	; (2b9c <init_storage+0xbc>)
    2b28:	4478      	add	r0, pc
    2b2a:	4b19      	ldr	r3, [pc, #100]	; (2b90 <init_storage+0xb0>)
    2b2c:	58eb      	ldr	r3, [r5, r3]
    2b2e:	9301      	str	r3, [sp, #4]
    2b30:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    2b32:	4c1b      	ldr	r4, [pc, #108]	; (2ba0 <init_storage+0xc0>)
    2b34:	447c      	add	r4, pc
    2b36:	228c      	movs	r2, #140	; 0x8c
    2b38:	0092      	lsls	r2, r2, #2
    2b3a:	2100      	movs	r1, #0
    2b3c:	0020      	movs	r0, r4
    2b3e:	4b19      	ldr	r3, [pc, #100]	; (2ba4 <init_storage+0xc4>)
    2b40:	58eb      	ldr	r3, [r5, r3]
    2b42:	9301      	str	r3, [sp, #4]
    2b44:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    2b46:	0021      	movs	r1, r4
    2b48:	2000      	movs	r0, #0
    2b4a:	4b17      	ldr	r3, [pc, #92]	; (2ba8 <init_storage+0xc8>)
    2b4c:	58eb      	ldr	r3, [r5, r3]
    2b4e:	9301      	str	r3, [sp, #4]
    2b50:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    2b52:	280b      	cmp	r0, #11
    2b54:	d00b      	beq.n	2b6e <init_storage+0x8e>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
			return;
		}
		printf("init_storage: SD card mount OK.\r\n");
    2b56:	4815      	ldr	r0, [pc, #84]	; (2bac <init_storage+0xcc>)
    2b58:	4478      	add	r0, pc
    2b5a:	4b0d      	ldr	r3, [pc, #52]	; (2b90 <init_storage+0xb0>)
    2b5c:	58eb      	ldr	r3, [r5, r3]
    2b5e:	9301      	str	r3, [sp, #4]
    2b60:	4798      	blx	r3
		add_state(STORAGE_READY);
    2b62:	2001      	movs	r0, #1
    2b64:	4b12      	ldr	r3, [pc, #72]	; (2bb0 <init_storage+0xd0>)
    2b66:	447b      	add	r3, pc
    2b68:	4798      	blx	r3
		return;
	}
}
    2b6a:	b002      	add	sp, #8
    2b6c:	bd70      	pop	{r4, r5, r6, pc}
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    2b6e:	0001      	movs	r1, r0
    2b70:	4810      	ldr	r0, [pc, #64]	; (2bb4 <init_storage+0xd4>)
    2b72:	4478      	add	r0, pc
    2b74:	4b10      	ldr	r3, [pc, #64]	; (2bb8 <init_storage+0xd8>)
    2b76:	58eb      	ldr	r3, [r5, r3]
    2b78:	9301      	str	r3, [sp, #4]
    2b7a:	4798      	blx	r3
			return;
    2b7c:	e7f5      	b.n	2b6a <init_storage+0x8a>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	0000fea6 	.word	0x0000fea6
    2b84:	0000008c 	.word	0x0000008c
    2b88:	00000090 	.word	0x00000090
    2b8c:	0000e920 	.word	0x0000e920
    2b90:	00000108 	.word	0x00000108
    2b94:	0000e93e 	.word	0x0000e93e
    2b98:	000000b8 	.word	0x000000b8
    2b9c:	0000e958 	.word	0x0000e958
    2ba0:	1fffd8fc 	.word	0x1fffd8fc
    2ba4:	00000328 	.word	0x00000328
    2ba8:	00000354 	.word	0x00000354
    2bac:	0000e97c 	.word	0x0000e97c
    2bb0:	fffff597 	.word	0xfffff597
    2bb4:	0000e932 	.word	0x0000e932
    2bb8:	0000003c 	.word	0x0000003c

00002bbc <SYSCTRL_Handler>:
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    2bbc:	4b05      	ldr	r3, [pc, #20]	; (2bd4 <SYSCTRL_Handler+0x18>)
    2bbe:	689b      	ldr	r3, [r3, #8]
    2bc0:	055b      	lsls	r3, r3, #21
    2bc2:	d506      	bpl.n	2bd2 <SYSCTRL_Handler+0x16>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    2bc4:	2280      	movs	r2, #128	; 0x80
    2bc6:	00d2      	lsls	r2, r2, #3
    2bc8:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <SYSCTRL_Handler+0x18>)
    2bca:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2bd0:	bf30      	wfi
}
    2bd2:	4770      	bx	lr
    2bd4:	40000800 	.word	0x40000800

00002bd8 <main>:

int main(void)
{
    2bd8:	b530      	push	{r4, r5, lr}
    2bda:	b08b      	sub	sp, #44	; 0x2c
    2bdc:	4c4b      	ldr	r4, [pc, #300]	; (2d0c <main+0x134>)
    2bde:	447c      	add	r4, pc
	system_init();
    2be0:	4b4b      	ldr	r3, [pc, #300]	; (2d10 <main+0x138>)
    2be2:	58e3      	ldr	r3, [r4, r3]
    2be4:	9303      	str	r3, [sp, #12]
    2be6:	4798      	blx	r3
	delay_init();
    2be8:	4b4a      	ldr	r3, [pc, #296]	; (2d14 <main+0x13c>)
    2bea:	58e3      	ldr	r3, [r4, r3]
    2bec:	9303      	str	r3, [sp, #12]
    2bee:	4798      	blx	r3
	configure_bod();
    2bf0:	4b49      	ldr	r3, [pc, #292]	; (2d18 <main+0x140>)
    2bf2:	447b      	add	r3, pc
    2bf4:	4798      	blx	r3
	configure_rtc();
    2bf6:	4b49      	ldr	r3, [pc, #292]	; (2d1c <main+0x144>)
    2bf8:	447b      	add	r3, pc
    2bfa:	4798      	blx	r3
	configure_wakeup();
    2bfc:	4b48      	ldr	r3, [pc, #288]	; (2d20 <main+0x148>)
    2bfe:	447b      	add	r3, pc
    2c00:	4798      	blx	r3
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2c02:	2300      	movs	r3, #0
    2c04:	e007      	b.n	2c16 <main+0x3e>
		sleepmgr_locks[i] = 0;
    2c06:	4a47      	ldr	r2, [pc, #284]	; (2d24 <main+0x14c>)
    2c08:	58a2      	ldr	r2, [r4, r2]
    2c0a:	9203      	str	r2, [sp, #12]
    2c0c:	2200      	movs	r2, #0
    2c0e:	9903      	ldr	r1, [sp, #12]
    2c10:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2c12:	3301      	adds	r3, #1
    2c14:	b2db      	uxtb	r3, r3
    2c16:	2b03      	cmp	r3, #3
    2c18:	d9f5      	bls.n	2c06 <main+0x2e>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c1a:	4b42      	ldr	r3, [pc, #264]	; (2d24 <main+0x14c>)
    2c1c:	58e3      	ldr	r3, [r4, r3]
    2c1e:	9303      	str	r3, [sp, #12]
    2c20:	2501      	movs	r5, #1
    2c22:	711d      	strb	r5, [r3, #4]
	sleepmgr_init();
	stdio_usb_init();
    2c24:	4b40      	ldr	r3, [pc, #256]	; (2d28 <main+0x150>)
    2c26:	58e3      	ldr	r3, [r4, r3]
    2c28:	9303      	str	r3, [sp, #12]
    2c2a:	4798      	blx	r3
	stdio_usb_enable();
    2c2c:	4b3f      	ldr	r3, [pc, #252]	; (2d2c <main+0x154>)
    2c2e:	58e3      	ldr	r3, [r4, r3]
    2c30:	9303      	str	r3, [sp, #12]
    2c32:	4798      	blx	r3
	cpu_irq_enable();
    2c34:	4b3e      	ldr	r3, [pc, #248]	; (2d30 <main+0x158>)
    2c36:	58e3      	ldr	r3, [r4, r3]
    2c38:	9303      	str	r3, [sp, #12]
    2c3a:	701d      	strb	r5, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2c3c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2c40:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_ms(500);
    2c42:	20fa      	movs	r0, #250	; 0xfa
    2c44:	0040      	lsls	r0, r0, #1
    2c46:	4b3b      	ldr	r3, [pc, #236]	; (2d34 <main+0x15c>)
    2c48:	58e3      	ldr	r3, [r4, r3]
    2c4a:	9303      	str	r3, [sp, #12]
    2c4c:	4798      	blx	r3
	init_state();
    2c4e:	4b3a      	ldr	r3, [pc, #232]	; (2d38 <main+0x160>)
    2c50:	447b      	add	r3, pc
    2c52:	4798      	blx	r3
	configure_iot_sw_timer();
    2c54:	4b39      	ldr	r3, [pc, #228]	; (2d3c <main+0x164>)
    2c56:	447b      	add	r3, pc
    2c58:	4798      	blx	r3
	configure_http_client();
    2c5a:	4b39      	ldr	r3, [pc, #228]	; (2d40 <main+0x168>)
    2c5c:	447b      	add	r3, pc
    2c5e:	4798      	blx	r3
	init_storage();
    2c60:	4b38      	ldr	r3, [pc, #224]	; (2d44 <main+0x16c>)
    2c62:	447b      	add	r3, pc
    2c64:	4798      	blx	r3
	nm_bsp_init();
    2c66:	4b38      	ldr	r3, [pc, #224]	; (2d48 <main+0x170>)
    2c68:	58e3      	ldr	r3, [r4, r3]
    2c6a:	9303      	str	r3, [sp, #12]
    2c6c:	4798      	blx	r3

	tstrWifiInitParam param;
	int8_t ret;
	

	param.pfAppWifiCb = wifi_cb;
    2c6e:	4b37      	ldr	r3, [pc, #220]	; (2d4c <main+0x174>)
    2c70:	447b      	add	r3, pc
    2c72:	9304      	str	r3, [sp, #16]
	ret = m2m_wifi_init(&param);
    2c74:	a804      	add	r0, sp, #16
    2c76:	4b36      	ldr	r3, [pc, #216]	; (2d50 <main+0x178>)
    2c78:	58e3      	ldr	r3, [r4, r3]
    2c7a:	9303      	str	r3, [sp, #12]
    2c7c:	4798      	blx	r3
    2c7e:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    2c80:	d006      	beq.n	2c90 <main+0xb8>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    2c82:	4834      	ldr	r0, [pc, #208]	; (2d54 <main+0x17c>)
    2c84:	4478      	add	r0, pc
    2c86:	4b34      	ldr	r3, [pc, #208]	; (2d58 <main+0x180>)
    2c88:	58e3      	ldr	r3, [r4, r3]
    2c8a:	9303      	str	r3, [sp, #12]
    2c8c:	4798      	blx	r3
    2c8e:	e7fe      	b.n	2c8e <main+0xb6>
		while (1) {
		}
	}
	
	socketInit();
    2c90:	4b32      	ldr	r3, [pc, #200]	; (2d5c <main+0x184>)
    2c92:	58e3      	ldr	r3, [r4, r3]
    2c94:	9303      	str	r3, [sp, #12]
    2c96:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
    2c98:	4931      	ldr	r1, [pc, #196]	; (2d60 <main+0x188>)
    2c9a:	4479      	add	r1, pc
    2c9c:	4831      	ldr	r0, [pc, #196]	; (2d64 <main+0x18c>)
    2c9e:	4478      	add	r0, pc
    2ca0:	4b31      	ldr	r3, [pc, #196]	; (2d68 <main+0x190>)
    2ca2:	58e3      	ldr	r3, [r4, r3]
    2ca4:	9303      	str	r3, [sp, #12]
    2ca6:	4798      	blx	r3

	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    2ca8:	4d30      	ldr	r5, [pc, #192]	; (2d6c <main+0x194>)
    2caa:	447d      	add	r5, pc
    2cac:	0029      	movs	r1, r5
    2cae:	4830      	ldr	r0, [pc, #192]	; (2d70 <main+0x198>)
    2cb0:	4478      	add	r0, pc
    2cb2:	4b29      	ldr	r3, [pc, #164]	; (2d58 <main+0x180>)
    2cb4:	58e3      	ldr	r3, [r4, r3]
    2cb6:	9303      	str	r3, [sp, #12]
    2cb8:	4798      	blx	r3
	ret = m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2cba:	23ff      	movs	r3, #255	; 0xff
    2cbc:	9300      	str	r3, [sp, #0]
    2cbe:	4b2d      	ldr	r3, [pc, #180]	; (2d74 <main+0x19c>)
    2cc0:	447b      	add	r3, pc
    2cc2:	2202      	movs	r2, #2
    2cc4:	2106      	movs	r1, #6
    2cc6:	0028      	movs	r0, r5
    2cc8:	4d2b      	ldr	r5, [pc, #172]	; (2d78 <main+0x1a0>)
    2cca:	5965      	ldr	r5, [r4, r5]
    2ccc:	9503      	str	r5, [sp, #12]
    2cce:	47a8      	blx	r5
	return ((down_state & mask) != 0);
    2cd0:	4b2a      	ldr	r3, [pc, #168]	; (2d7c <main+0x1a4>)
    2cd2:	447b      	add	r3, pc
    2cd4:	781b      	ldrb	r3, [r3, #0]
		
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2cd6:	06da      	lsls	r2, r3, #27
    2cd8:	d40f      	bmi.n	2cfa <main+0x122>
    2cda:	069b      	lsls	r3, r3, #26
    2cdc:	d40d      	bmi.n	2cfa <main+0x122>
		m2m_wifi_handle_events(NULL);
    2cde:	2000      	movs	r0, #0
    2ce0:	4b27      	ldr	r3, [pc, #156]	; (2d80 <main+0x1a8>)
    2ce2:	58e3      	ldr	r3, [r4, r3]
    2ce4:	9303      	str	r3, [sp, #12]
    2ce6:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
    2ce8:	4b26      	ldr	r3, [pc, #152]	; (2d84 <main+0x1ac>)
    2cea:	58e3      	ldr	r3, [r4, r3]
    2cec:	9303      	str	r3, [sp, #12]
    2cee:	0018      	movs	r0, r3
    2cf0:	4b25      	ldr	r3, [pc, #148]	; (2d88 <main+0x1b0>)
    2cf2:	58e3      	ldr	r3, [r4, r3]
    2cf4:	9303      	str	r3, [sp, #12]
    2cf6:	4798      	blx	r3
    2cf8:	e7ea      	b.n	2cd0 <main+0xf8>
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    2cfa:	4824      	ldr	r0, [pc, #144]	; (2d8c <main+0x1b4>)
    2cfc:	4478      	add	r0, pc
    2cfe:	4b24      	ldr	r3, [pc, #144]	; (2d90 <main+0x1b8>)
    2d00:	58e4      	ldr	r4, [r4, r3]
    2d02:	47a0      	blx	r4
	printf("main: done.\r\n");
    2d04:	4823      	ldr	r0, [pc, #140]	; (2d94 <main+0x1bc>)
    2d06:	4478      	add	r0, pc
    2d08:	47a0      	blx	r4
    2d0a:	e7fe      	b.n	2d0a <main+0x132>
    2d0c:	0000fdae 	.word	0x0000fdae
    2d10:	00000098 	.word	0x00000098
    2d14:	00000258 	.word	0x00000258
    2d18:	fffff73f 	.word	0xfffff73f
    2d1c:	fffff791 	.word	0xfffff791
    2d20:	fffff85b 	.word	0xfffff85b
    2d24:	0000035c 	.word	0x0000035c
    2d28:	000004a8 	.word	0x000004a8
    2d2c:	00000358 	.word	0x00000358
    2d30:	0000016c 	.word	0x0000016c
    2d34:	0000044c 	.word	0x0000044c
    2d38:	fffff48d 	.word	0xfffff48d
    2d3c:	fffff873 	.word	0xfffff873
    2d40:	fffff8b5 	.word	0xfffff8b5
    2d44:	fffffe7b 	.word	0xfffffe7b
    2d48:	00000478 	.word	0x00000478
    2d4c:	fffff5b5 	.word	0xfffff5b5
    2d50:	000002c0 	.word	0x000002c0
    2d54:	0000e874 	.word	0x0000e874
    2d58:	0000003c 	.word	0x0000003c
    2d5c:	000001f4 	.word	0x000001f4
    2d60:	fffff473 	.word	0xfffff473
    2d64:	fffff4bf 	.word	0xfffff4bf
    2d68:	000001b4 	.word	0x000001b4
    2d6c:	0000ebc6 	.word	0x0000ebc6
    2d70:	0000e874 	.word	0x0000e874
    2d74:	0000eba4 	.word	0x0000eba4
    2d78:	00000398 	.word	0x00000398
    2d7c:	1fffd75a 	.word	0x1fffd75a
    2d80:	00000300 	.word	0x00000300
    2d84:	000002d4 	.word	0x000002d4
    2d88:	00000248 	.word	0x00000248
    2d8c:	0000e84c 	.word	0x0000e84c
    2d90:	00000108 	.word	0x00000108
    2d94:	0000e86a 	.word	0x0000e86a

00002d98 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    2d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9a:	46c6      	mov	lr, r8
    2d9c:	b500      	push	{lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	4b50      	ldr	r3, [pc, #320]	; (2ee4 <system_board_init+0x14c>)
    2da2:	447b      	add	r3, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2da4:	2600      	movs	r6, #0
    2da6:	ac01      	add	r4, sp, #4
    2da8:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2daa:	2701      	movs	r7, #1
    2dac:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    2dae:	70a6      	strb	r6, [r4, #2]

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    2db0:	0021      	movs	r1, r4
    2db2:	2013      	movs	r0, #19
    2db4:	4a4c      	ldr	r2, [pc, #304]	; (2ee8 <system_board_init+0x150>)
    2db6:	589d      	ldr	r5, [r3, r2]
    2db8:	47a8      	blx	r5
    2dba:	0021      	movs	r1, r4
    2dbc:	2010      	movs	r0, #16
    2dbe:	47a8      	blx	r5
    2dc0:	0021      	movs	r1, r4
    2dc2:	2011      	movs	r0, #17
    2dc4:	47a8      	blx	r5
    2dc6:	0021      	movs	r1, r4
    2dc8:	2012      	movs	r0, #18
    2dca:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    2dcc:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    2dce:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    2dd0:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    2dd2:	0021      	movs	r1, r4
    2dd4:	2014      	movs	r0, #20
    2dd6:	47a8      	blx	r5
    2dd8:	0021      	movs	r1, r4
    2dda:	2015      	movs	r0, #21
    2ddc:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    2dde:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    2de0:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
    2de2:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    2de4:	0021      	movs	r1, r4
    2de6:	2018      	movs	r0, #24
    2de8:	47a8      	blx	r5
    2dea:	0021      	movs	r1, r4
    2dec:	2019      	movs	r0, #25
    2dee:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    2df0:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    2df2:	2302      	movs	r3, #2
    2df4:	4698      	mov	r8, r3
    2df6:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
    2df8:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    2dfa:	0021      	movs	r1, r4
    2dfc:	2036      	movs	r0, #54	; 0x36
    2dfe:	47a8      	blx	r5
    2e00:	0021      	movs	r1, r4
    2e02:	2022      	movs	r0, #34	; 0x22
    2e04:	47a8      	blx	r5
    2e06:	0021      	movs	r1, r4
    2e08:	2037      	movs	r0, #55	; 0x37
    2e0a:	47a8      	blx	r5
    2e0c:	0021      	movs	r1, r4
    2e0e:	2023      	movs	r0, #35	; 0x23
    2e10:	47a8      	blx	r5
    2e12:	0021      	movs	r1, r4
    2e14:	202a      	movs	r0, #42	; 0x2a
    2e16:	47a8      	blx	r5

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    2e18:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    2e1a:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
    2e1c:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    2e1e:	0021      	movs	r1, r4
    2e20:	2003      	movs	r0, #3
    2e22:	47a8      	blx	r5
    2e24:	0021      	movs	r1, r4
    2e26:	201f      	movs	r0, #31
    2e28:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    2e2a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    2e2c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    2e2e:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
    2e30:	0021      	movs	r1, r4
    2e32:	2002      	movs	r0, #2
    2e34:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    2e36:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    2e38:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    2e3a:	70a7      	strb	r7, [r4, #2]
	CFG(LED_OUT_PIN);
    2e3c:	0021      	movs	r1, r4
    2e3e:	202b      	movs	r0, #43	; 0x2b
    2e40:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    2e42:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    2e44:	4643      	mov	r3, r8
    2e46:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
    2e48:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    2e4a:	0021      	movs	r1, r4
    2e4c:	2004      	movs	r0, #4
    2e4e:	47a8      	blx	r5
    2e50:	0021      	movs	r1, r4
    2e52:	2005      	movs	r0, #5
    2e54:	47a8      	blx	r5
    2e56:	0021      	movs	r1, r4
    2e58:	2006      	movs	r0, #6
    2e5a:	47a8      	blx	r5
    2e5c:	0021      	movs	r1, r4
    2e5e:	2007      	movs	r0, #7
    2e60:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    2e62:	0021      	movs	r1, r4
    2e64:	2008      	movs	r0, #8
    2e66:	47a8      	blx	r5
    2e68:	0021      	movs	r1, r4
    2e6a:	2009      	movs	r0, #9
    2e6c:	47a8      	blx	r5
    2e6e:	0021      	movs	r1, r4
    2e70:	200a      	movs	r0, #10
    2e72:	47a8      	blx	r5
    2e74:	0021      	movs	r1, r4
    2e76:	200b      	movs	r0, #11
    2e78:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
    2e7a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    2e7c:	4643      	mov	r3, r8
    2e7e:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
    2e80:	70a7      	strb	r7, [r4, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    2e82:	0021      	movs	r1, r4
    2e84:	2017      	movs	r0, #23
    2e86:	47a8      	blx	r5

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
    2e88:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    2e8a:	4643      	mov	r3, r8
    2e8c:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
    2e8e:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    2e90:	0021      	movs	r1, r4
    2e92:	200e      	movs	r0, #14
    2e94:	47a8      	blx	r5
    2e96:	0021      	movs	r1, r4
    2e98:	200f      	movs	r0, #15
    2e9a:	47a8      	blx	r5
    2e9c:	0021      	movs	r1, r4
    2e9e:	200c      	movs	r0, #12
    2ea0:	47a8      	blx	r5
    2ea2:	0021      	movs	r1, r4
    2ea4:	200d      	movs	r0, #13
    2ea6:	47a8      	blx	r5
    2ea8:	0021      	movs	r1, r4
    2eaa:	2029      	movs	r0, #41	; 0x29
    2eac:	47a8      	blx	r5
    2eae:	0021      	movs	r1, r4
    2eb0:	2016      	movs	r0, #22
    2eb2:	47a8      	blx	r5
    2eb4:	0021      	movs	r1, r4
    2eb6:	2028      	movs	r0, #40	; 0x28
    2eb8:	47a8      	blx	r5
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    2eba:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    2ebc:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
    2ebe:	70a6      	strb	r6, [r4, #2]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ec0:	4b0a      	ldr	r3, [pc, #40]	; (2eec <system_board_init+0x154>)
    2ec2:	2280      	movs	r2, #128	; 0x80
    2ec4:	0512      	lsls	r2, r2, #20
    2ec6:	615a      	str	r2, [r3, #20]
    2ec8:	2280      	movs	r2, #128	; 0x80
    2eca:	0552      	lsls	r2, r2, #21
    2ecc:	615a      	str	r2, [r3, #20]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    2ece:	0021      	movs	r1, r4
    2ed0:	201b      	movs	r0, #27
    2ed2:	47a8      	blx	r5
    2ed4:	0021      	movs	r1, r4
    2ed6:	201c      	movs	r0, #28
    2ed8:	47a8      	blx	r5
	
    2eda:	b002      	add	sp, #8
    2edc:	bc04      	pop	{r2}
    2ede:	4690      	mov	r8, r2
    2ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	0000fbea 	.word	0x0000fbea
    2ee8:	00000390 	.word	0x00000390
    2eec:	41004400 	.word	0x41004400

00002ef0 <sdio_op_cond>:

#else
static bool sdio_op_cond(void)
{
	return true; // No error but card type not updated
}
    2ef0:	2001      	movs	r0, #1
    2ef2:	4770      	bx	lr

00002ef4 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    2ef4:	b510      	push	{r4, lr}
    2ef6:	b082      	sub	sp, #8
    2ef8:	4c28      	ldr	r4, [pc, #160]	; (2f9c <mmc_decode_csd+0xa8>)
    2efa:	447c      	add	r4, pc
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    2efc:	4b28      	ldr	r3, [pc, #160]	; (2fa0 <mmc_decode_csd+0xac>)
    2efe:	447b      	add	r3, pc
    2f00:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    2f02:	7b93      	ldrb	r3, [r2, #14]
    2f04:	109b      	asrs	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
    2f06:	200f      	movs	r0, #15
    2f08:	4018      	ands	r0, r3
    2f0a:	3801      	subs	r0, #1
    2f0c:	2803      	cmp	r0, #3
    2f0e:	d803      	bhi.n	2f18 <mmc_decode_csd+0x24>
    2f10:	f00c fb86 	bl	f620 <__gnu_thumb1_case_uqi>
    2f14:	413e3b38 	.word	0x413e3b38
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    2f18:	2312      	movs	r3, #18
    2f1a:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    2f1c:	7c53      	ldrb	r3, [r2, #17]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    2f1e:	2107      	movs	r1, #7
    2f20:	4019      	ands	r1, r3
    2f22:	4820      	ldr	r0, [pc, #128]	; (2fa4 <mmc_decode_csd+0xb0>)
    2f24:	5820      	ldr	r0, [r4, r0]
    2f26:	9001      	str	r0, [sp, #4]
    2f28:	0089      	lsls	r1, r1, #2
    2f2a:	5808      	ldr	r0, [r1, r0]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    2f2c:	08d9      	lsrs	r1, r3, #3
    2f2e:	230f      	movs	r3, #15
    2f30:	400b      	ands	r3, r1
    2f32:	491d      	ldr	r1, [pc, #116]	; (2fa8 <mmc_decode_csd+0xb4>)
    2f34:	5861      	ldr	r1, [r4, r1]
    2f36:	9101      	str	r1, [sp, #4]
    2f38:	009b      	lsls	r3, r3, #2
    2f3a:	585b      	ldr	r3, [r3, r1]
	sd_mmc_card->clock = unit * mul * 1000;
    2f3c:	4358      	muls	r0, r3
    2f3e:	23fa      	movs	r3, #250	; 0xfa
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	4343      	muls	r3, r0
    2f44:	6013      	str	r3, [r2, #0]
    2f46:	7d93      	ldrb	r3, [r2, #22]
    2f48:	119b      	asrs	r3, r3, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    2f4a:	7d51      	ldrb	r1, [r2, #21]
    2f4c:	0089      	lsls	r1, r1, #2
    2f4e:	430b      	orrs	r3, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    2f50:	7d11      	ldrb	r1, [r2, #20]
    2f52:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    2f54:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    2f56:	051b      	lsls	r3, r3, #20
    2f58:	0d1b      	lsrs	r3, r3, #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    2f5a:	4914      	ldr	r1, [pc, #80]	; (2fac <mmc_decode_csd+0xb8>)
    2f5c:	428b      	cmp	r3, r1
    2f5e:	d00f      	beq.n	2f80 <mmc_decode_csd+0x8c>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    2f60:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    2f62:	7e11      	ldrb	r1, [r2, #24]
    2f64:	11c9      	asrs	r1, r1, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    2f66:	7dd0      	ldrb	r0, [r2, #23]
    2f68:	0040      	lsls	r0, r0, #1
    2f6a:	4308      	orrs	r0, r1
	value &=  ((uint32_t)1 << size) - 1;
    2f6c:	2107      	movs	r1, #7
    2f6e:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    2f70:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    2f72:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    2f74:	7cd0      	ldrb	r0, [r2, #19]
	value &=  ((uint32_t)1 << size) - 1;
    2f76:	210f      	movs	r1, #15
    2f78:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    2f7a:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    2f7c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    2f7e:	6053      	str	r3, [r2, #4]
	}
}
    2f80:	b002      	add	sp, #8
    2f82:	bd10      	pop	{r4, pc}
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    2f84:	2314      	movs	r3, #20
    2f86:	7313      	strb	r3, [r2, #12]
		break;
    2f88:	e7c8      	b.n	2f1c <mmc_decode_csd+0x28>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    2f8a:	2322      	movs	r3, #34	; 0x22
    2f8c:	7313      	strb	r3, [r2, #12]
		break;
    2f8e:	e7c5      	b.n	2f1c <mmc_decode_csd+0x28>
		sd_mmc_card->version = CARD_VER_MMC_3;
    2f90:	2330      	movs	r3, #48	; 0x30
    2f92:	7313      	strb	r3, [r2, #12]
		break;
    2f94:	e7c2      	b.n	2f1c <mmc_decode_csd+0x28>
		sd_mmc_card->version = CARD_VER_MMC_4;
    2f96:	2340      	movs	r3, #64	; 0x40
    2f98:	7313      	strb	r3, [r2, #12]
		break;
    2f9a:	e7bf      	b.n	2f1c <mmc_decode_csd+0x28>
    2f9c:	0000fa92 	.word	0x0000fa92
    2fa0:	1fffd98e 	.word	0x1fffd98e
    2fa4:	000002d0 	.word	0x000002d0
    2fa8:	000000f4 	.word	0x000000f4
    2fac:	00000fff 	.word	0x00000fff

00002fb0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    2fb0:	b510      	push	{r4, lr}
    2fb2:	b082      	sub	sp, #8
    2fb4:	4822      	ldr	r0, [pc, #136]	; (3040 <sd_decode_csd+0x90>)
    2fb6:	4478      	add	r0, pc
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    2fb8:	4b22      	ldr	r3, [pc, #136]	; (3044 <sd_decode_csd+0x94>)
    2fba:	447b      	add	r3, pc
    2fbc:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    2fbe:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    2fc0:	2107      	movs	r1, #7
    2fc2:	4019      	ands	r1, r3
    2fc4:	4c20      	ldr	r4, [pc, #128]	; (3048 <sd_decode_csd+0x98>)
    2fc6:	5904      	ldr	r4, [r0, r4]
    2fc8:	9401      	str	r4, [sp, #4]
    2fca:	0089      	lsls	r1, r1, #2
    2fcc:	590c      	ldr	r4, [r1, r4]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    2fce:	08d9      	lsrs	r1, r3, #3
    2fd0:	230f      	movs	r3, #15
    2fd2:	400b      	ands	r3, r1
    2fd4:	491d      	ldr	r1, [pc, #116]	; (304c <sd_decode_csd+0x9c>)
    2fd6:	5841      	ldr	r1, [r0, r1]
    2fd8:	9101      	str	r1, [sp, #4]
    2fda:	009b      	lsls	r3, r3, #2
    2fdc:	585b      	ldr	r3, [r3, r1]
	sd_mmc_card->clock = unit * mul * 1000;
    2fde:	435c      	muls	r4, r3
    2fe0:	23fa      	movs	r3, #250	; 0xfa
    2fe2:	009b      	lsls	r3, r3, #2
    2fe4:	4363      	muls	r3, r4
    2fe6:	6013      	str	r3, [r2, #0]
    2fe8:	7b93      	ldrb	r3, [r2, #14]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    2fea:	099b      	lsrs	r3, r3, #6
    2fec:	d11b      	bne.n	3026 <sd_decode_csd+0x76>
    2fee:	7d93      	ldrb	r3, [r2, #22]
    2ff0:	119b      	asrs	r3, r3, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    2ff2:	7d51      	ldrb	r1, [r2, #21]
    2ff4:	0089      	lsls	r1, r1, #2
    2ff6:	430b      	orrs	r3, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    2ff8:	7d11      	ldrb	r1, [r2, #20]
    2ffa:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    2ffc:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    2ffe:	051b      	lsls	r3, r3, #20
    3000:	0d1b      	lsrs	r3, r3, #20
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    3002:	3301      	adds	r3, #1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3004:	7e11      	ldrb	r1, [r2, #24]
    3006:	11c9      	asrs	r1, r1, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3008:	7dd0      	ldrb	r0, [r2, #23]
    300a:	0040      	lsls	r0, r0, #1
    300c:	4308      	orrs	r0, r1
	value &=  ((uint32_t)1 << size) - 1;
    300e:	2107      	movs	r1, #7
    3010:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    3012:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    3014:	408b      	lsls	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3016:	7cd0      	ldrb	r0, [r2, #19]
	value &=  ((uint32_t)1 << size) - 1;
    3018:	210f      	movs	r1, #15
    301a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    301c:	408b      	lsls	r3, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
    301e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    3020:	6053      	str	r3, [r2, #4]
	}
}
    3022:	b002      	add	sp, #8
    3024:	bd10      	pop	{r4, pc}
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3026:	7dd3      	ldrb	r3, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3028:	7d91      	ldrb	r1, [r2, #22]
    302a:	0209      	lsls	r1, r1, #8
    302c:	430b      	orrs	r3, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    302e:	7d51      	ldrb	r1, [r2, #21]
    3030:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3032:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    3034:	029b      	lsls	r3, r3, #10
    3036:	0a9b      	lsrs	r3, r3, #10
				* 512;
    3038:	3301      	adds	r3, #1
    303a:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    303c:	6053      	str	r3, [r2, #4]
    303e:	e7f0      	b.n	3022 <sd_decode_csd+0x72>
    3040:	0000f9d6 	.word	0x0000f9d6
    3044:	1fffd8d2 	.word	0x1fffd8d2
    3048:	000002d0 	.word	0x000002d0
    304c:	000002ac 	.word	0x000002ac

00003050 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    3050:	b530      	push	{r4, r5, lr}
    3052:	b083      	sub	sp, #12
    3054:	4c09      	ldr	r4, [pc, #36]	; (307c <sd_mmc_configure_slot+0x2c>)
    3056:	447c      	add	r4, pc
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    3058:	4b09      	ldr	r3, [pc, #36]	; (3080 <sd_mmc_configure_slot+0x30>)
    305a:	447b      	add	r3, pc
    305c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    305e:	7f8b      	ldrb	r3, [r1, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    3060:	1e5a      	subs	r2, r3, #1
    3062:	4193      	sbcs	r3, r2
    3064:	b2db      	uxtb	r3, r3
    3066:	7b4a      	ldrb	r2, [r1, #13]
    3068:	6809      	ldr	r1, [r1, #0]
    306a:	4806      	ldr	r0, [pc, #24]	; (3084 <sd_mmc_configure_slot+0x34>)
    306c:	4478      	add	r0, pc
    306e:	7800      	ldrb	r0, [r0, #0]
    3070:	4d05      	ldr	r5, [pc, #20]	; (3088 <sd_mmc_configure_slot+0x38>)
    3072:	5964      	ldr	r4, [r4, r5]
    3074:	9401      	str	r4, [sp, #4]
    3076:	47a0      	blx	r4
}
    3078:	b003      	add	sp, #12
    307a:	bd30      	pop	{r4, r5, pc}
    307c:	0000f936 	.word	0x0000f936
    3080:	1fffd832 	.word	0x1fffd832
    3084:	1fffd848 	.word	0x1fffd848
    3088:	0000004c 	.word	0x0000004c

0000308c <sd_mmc_select_slot>:
{
    308c:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    308e:	2800      	cmp	r0, #0
    3090:	d001      	beq.n	3096 <sd_mmc_select_slot+0xa>
		return SD_MMC_ERR_SLOT;
    3092:	2004      	movs	r0, #4
}
    3094:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    3096:	0142      	lsls	r2, r0, #5
    3098:	4b13      	ldr	r3, [pc, #76]	; (30e8 <sd_mmc_select_slot+0x5c>)
    309a:	447b      	add	r3, pc
    309c:	189b      	adds	r3, r3, r2
    309e:	7a9b      	ldrb	r3, [r3, #10]
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    30a0:	3b03      	subs	r3, #3
    30a2:	b2db      	uxtb	r3, r3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    30a4:	2b01      	cmp	r3, #1
    30a6:	d912      	bls.n	30ce <sd_mmc_select_slot+0x42>
	sd_mmc_slot_sel = slot;
    30a8:	4b10      	ldr	r3, [pc, #64]	; (30ec <sd_mmc_select_slot+0x60>)
    30aa:	447b      	add	r3, pc
    30ac:	7018      	strb	r0, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    30ae:	0140      	lsls	r0, r0, #5
    30b0:	4c0f      	ldr	r4, [pc, #60]	; (30f0 <sd_mmc_select_slot+0x64>)
    30b2:	447c      	add	r4, pc
    30b4:	1824      	adds	r4, r4, r0
    30b6:	4b0f      	ldr	r3, [pc, #60]	; (30f4 <sd_mmc_select_slot+0x68>)
    30b8:	447b      	add	r3, pc
    30ba:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    30bc:	4b0e      	ldr	r3, [pc, #56]	; (30f8 <sd_mmc_select_slot+0x6c>)
    30be:	447b      	add	r3, pc
    30c0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    30c2:	7aa0      	ldrb	r0, [r4, #10]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    30c4:	3802      	subs	r0, #2
    30c6:	4243      	negs	r3, r0
    30c8:	4158      	adcs	r0, r3
    30ca:	b2c0      	uxtb	r0, r0
    30cc:	e7e2      	b.n	3094 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    30ce:	4b0b      	ldr	r3, [pc, #44]	; (30fc <sd_mmc_select_slot+0x70>)
    30d0:	447b      	add	r3, pc
    30d2:	0011      	movs	r1, r2
    30d4:	189a      	adds	r2, r3, r2
    30d6:	2402      	movs	r4, #2
    30d8:	7294      	strb	r4, [r2, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    30da:	4c09      	ldr	r4, [pc, #36]	; (3100 <sd_mmc_select_slot+0x74>)
    30dc:	50cc      	str	r4, [r1, r3]
		sd_mmc_cards[slot].bus_width = 1;
    30de:	2301      	movs	r3, #1
    30e0:	7353      	strb	r3, [r2, #13]
		sd_mmc_cards[slot].high_speed = 0;
    30e2:	2300      	movs	r3, #0
    30e4:	7793      	strb	r3, [r2, #30]
    30e6:	e7df      	b.n	30a8 <sd_mmc_select_slot+0x1c>
    30e8:	1fffd7f6 	.word	0x1fffd7f6
    30ec:	1fffd80a 	.word	0x1fffd80a
    30f0:	1fffd7de 	.word	0x1fffd7de
    30f4:	1fffd7d4 	.word	0x1fffd7d4
    30f8:	ffffff8f 	.word	0xffffff8f
    30fc:	1fffd7c0 	.word	0x1fffd7c0
    3100:	00061a80 	.word	0x00061a80

00003104 <sd_cmd8>:
{
    3104:	b570      	push	{r4, r5, r6, lr}
    3106:	b082      	sub	sp, #8
    3108:	0006      	movs	r6, r0
    310a:	4d11      	ldr	r5, [pc, #68]	; (3150 <sd_cmd8+0x4c>)
    310c:	447d      	add	r5, pc
	*v2 = 0;
    310e:	2300      	movs	r3, #0
    3110:	7003      	strb	r3, [r0, #0]
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    3112:	21d5      	movs	r1, #213	; 0xd5
    3114:	0049      	lsls	r1, r1, #1
    3116:	480f      	ldr	r0, [pc, #60]	; (3154 <sd_cmd8+0x50>)
    3118:	4b0f      	ldr	r3, [pc, #60]	; (3158 <sd_cmd8+0x54>)
    311a:	58eb      	ldr	r3, [r5, r3]
    311c:	9301      	str	r3, [sp, #4]
    311e:	4798      	blx	r3
    3120:	1e04      	subs	r4, r0, #0
    3122:	d103      	bne.n	312c <sd_cmd8+0x28>
		return true; // It is not a V2
    3124:	2401      	movs	r4, #1
}
    3126:	0020      	movs	r0, r4
    3128:	b002      	add	sp, #8
    312a:	bd70      	pop	{r4, r5, r6, pc}
	resp = driver_get_response();
    312c:	4b0b      	ldr	r3, [pc, #44]	; (315c <sd_cmd8+0x58>)
    312e:	58eb      	ldr	r3, [r5, r3]
    3130:	9301      	str	r3, [sp, #4]
    3132:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    3134:	1c43      	adds	r3, r0, #1
    3136:	d0f6      	beq.n	3126 <sd_cmd8+0x22>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    3138:	0500      	lsls	r0, r0, #20
    313a:	0d00      	lsrs	r0, r0, #20
    313c:	23d5      	movs	r3, #213	; 0xd5
    313e:	005b      	lsls	r3, r3, #1
    3140:	4298      	cmp	r0, r3
    3142:	d001      	beq.n	3148 <sd_cmd8+0x44>
		return false;
    3144:	2400      	movs	r4, #0
    3146:	e7ee      	b.n	3126 <sd_cmd8+0x22>
	*v2 = 1;
    3148:	3baa      	subs	r3, #170	; 0xaa
    314a:	3bff      	subs	r3, #255	; 0xff
    314c:	7033      	strb	r3, [r6, #0]
	return true;
    314e:	e7ea      	b.n	3126 <sd_cmd8+0x22>
    3150:	0000f880 	.word	0x0000f880
    3154:	00005508 	.word	0x00005508
    3158:	000003dc 	.word	0x000003dc
    315c:	0000043c 	.word	0x0000043c

00003160 <sd_spi_op_cond>:
{
    3160:	b5f0      	push	{r4, r5, r6, r7, lr}
    3162:	b083      	sub	sp, #12
    3164:	0007      	movs	r7, r0
    3166:	4d1f      	ldr	r5, [pc, #124]	; (31e4 <sd_spi_op_cond+0x84>)
    3168:	447d      	add	r5, pc
	retry = 7150;
    316a:	4e1f      	ldr	r6, [pc, #124]	; (31e8 <sd_spi_op_cond+0x88>)
    316c:	e012      	b.n	3194 <sd_spi_op_cond+0x34>
			arg |= SD_ACMD41_HCS;
    316e:	2180      	movs	r1, #128	; 0x80
    3170:	05c9      	lsls	r1, r1, #23
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    3172:	481e      	ldr	r0, [pc, #120]	; (31ec <sd_spi_op_cond+0x8c>)
    3174:	4b1e      	ldr	r3, [pc, #120]	; (31f0 <sd_spi_op_cond+0x90>)
    3176:	58eb      	ldr	r3, [r5, r3]
    3178:	9301      	str	r3, [sp, #4]
    317a:	4798      	blx	r3
    317c:	1e04      	subs	r4, r0, #0
    317e:	d01d      	beq.n	31bc <sd_spi_op_cond+0x5c>
		resp = driver_get_response();
    3180:	4b1c      	ldr	r3, [pc, #112]	; (31f4 <sd_spi_op_cond+0x94>)
    3182:	58eb      	ldr	r3, [r5, r3]
    3184:	9301      	str	r3, [sp, #4]
    3186:	4798      	blx	r3
		if (!(resp & R1_SPI_IDLE)) {
    3188:	07c3      	lsls	r3, r0, #31
    318a:	d50f      	bpl.n	31ac <sd_spi_op_cond+0x4c>
		if (retry-- == 0) {
    318c:	1e73      	subs	r3, r6, #1
    318e:	2e00      	cmp	r6, #0
    3190:	d025      	beq.n	31de <sd_spi_op_cond+0x7e>
    3192:	001e      	movs	r6, r3
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    3194:	2100      	movs	r1, #0
    3196:	4818      	ldr	r0, [pc, #96]	; (31f8 <sd_spi_op_cond+0x98>)
    3198:	4b15      	ldr	r3, [pc, #84]	; (31f0 <sd_spi_op_cond+0x90>)
    319a:	58eb      	ldr	r3, [r5, r3]
    319c:	9301      	str	r3, [sp, #4]
    319e:	4798      	blx	r3
    31a0:	1e04      	subs	r4, r0, #0
    31a2:	d00b      	beq.n	31bc <sd_spi_op_cond+0x5c>
		if (v2) {
    31a4:	2f00      	cmp	r7, #0
    31a6:	d1e2      	bne.n	316e <sd_spi_op_cond+0xe>
		arg = 0;
    31a8:	2100      	movs	r1, #0
    31aa:	e7e2      	b.n	3172 <sd_spi_op_cond+0x12>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    31ac:	2100      	movs	r1, #0
    31ae:	4813      	ldr	r0, [pc, #76]	; (31fc <sd_spi_op_cond+0x9c>)
    31b0:	4b0f      	ldr	r3, [pc, #60]	; (31f0 <sd_spi_op_cond+0x90>)
    31b2:	58eb      	ldr	r3, [r5, r3]
    31b4:	9301      	str	r3, [sp, #4]
    31b6:	4798      	blx	r3
    31b8:	1e04      	subs	r4, r0, #0
    31ba:	d102      	bne.n	31c2 <sd_spi_op_cond+0x62>
}
    31bc:	0020      	movs	r0, r4
    31be:	b003      	add	sp, #12
    31c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((driver_get_response() & OCR_CCS) != 0) {
    31c2:	4b0c      	ldr	r3, [pc, #48]	; (31f4 <sd_spi_op_cond+0x94>)
    31c4:	58eb      	ldr	r3, [r5, r3]
    31c6:	9301      	str	r3, [sp, #4]
    31c8:	4798      	blx	r3
    31ca:	0043      	lsls	r3, r0, #1
    31cc:	d5f6      	bpl.n	31bc <sd_spi_op_cond+0x5c>
		sd_mmc_card->type |= CARD_TYPE_HC;
    31ce:	4b0c      	ldr	r3, [pc, #48]	; (3200 <sd_spi_op_cond+0xa0>)
    31d0:	447b      	add	r3, pc
    31d2:	681a      	ldr	r2, [r3, #0]
    31d4:	7ad3      	ldrb	r3, [r2, #11]
    31d6:	2108      	movs	r1, #8
    31d8:	430b      	orrs	r3, r1
    31da:	72d3      	strb	r3, [r2, #11]
    31dc:	e7ee      	b.n	31bc <sd_spi_op_cond+0x5c>
			return false;
    31de:	2400      	movs	r4, #0
    31e0:	e7ec      	b.n	31bc <sd_spi_op_cond+0x5c>
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	0000f824 	.word	0x0000f824
    31e8:	00001bee 	.word	0x00001bee
    31ec:	00001129 	.word	0x00001129
    31f0:	000003dc 	.word	0x000003dc
    31f4:	0000043c 	.word	0x0000043c
    31f8:	00001137 	.word	0x00001137
    31fc:	0000053a 	.word	0x0000053a
    3200:	1fffd6bc 	.word	0x1fffd6bc

00003204 <mmc_spi_op_cond>:
{
    3204:	b570      	push	{r4, r5, r6, lr}
    3206:	b082      	sub	sp, #8
    3208:	4e1a      	ldr	r6, [pc, #104]	; (3274 <mmc_spi_op_cond+0x70>)
    320a:	447e      	add	r6, pc
	retry = 7150;
    320c:	4d1a      	ldr	r5, [pc, #104]	; (3278 <mmc_spi_op_cond+0x74>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    320e:	2100      	movs	r1, #0
    3210:	481a      	ldr	r0, [pc, #104]	; (327c <mmc_spi_op_cond+0x78>)
    3212:	4b1b      	ldr	r3, [pc, #108]	; (3280 <mmc_spi_op_cond+0x7c>)
    3214:	58f3      	ldr	r3, [r6, r3]
    3216:	9301      	str	r3, [sp, #4]
    3218:	4798      	blx	r3
    321a:	1e04      	subs	r4, r0, #0
    321c:	d012      	beq.n	3244 <mmc_spi_op_cond+0x40>
		resp = driver_get_response();
    321e:	4b19      	ldr	r3, [pc, #100]	; (3284 <mmc_spi_op_cond+0x80>)
    3220:	58f3      	ldr	r3, [r6, r3]
    3222:	9301      	str	r3, [sp, #4]
    3224:	4798      	blx	r3
		if (!(resp & R1_SPI_IDLE)) {
    3226:	07c3      	lsls	r3, r0, #31
    3228:	d504      	bpl.n	3234 <mmc_spi_op_cond+0x30>
		if (retry-- == 0) {
    322a:	1e6b      	subs	r3, r5, #1
    322c:	2d00      	cmp	r5, #0
    322e:	d01f      	beq.n	3270 <mmc_spi_op_cond+0x6c>
    3230:	001d      	movs	r5, r3
    3232:	e7ec      	b.n	320e <mmc_spi_op_cond+0xa>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    3234:	2100      	movs	r1, #0
    3236:	4814      	ldr	r0, [pc, #80]	; (3288 <mmc_spi_op_cond+0x84>)
    3238:	4b11      	ldr	r3, [pc, #68]	; (3280 <mmc_spi_op_cond+0x7c>)
    323a:	58f3      	ldr	r3, [r6, r3]
    323c:	9301      	str	r3, [sp, #4]
    323e:	4798      	blx	r3
    3240:	1e04      	subs	r4, r0, #0
    3242:	d102      	bne.n	324a <mmc_spi_op_cond+0x46>
}
    3244:	0020      	movs	r0, r4
    3246:	b002      	add	sp, #8
    3248:	bd70      	pop	{r4, r5, r6, pc}
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    324a:	4b0e      	ldr	r3, [pc, #56]	; (3284 <mmc_spi_op_cond+0x80>)
    324c:	58f3      	ldr	r3, [r6, r3]
    324e:	9301      	str	r3, [sp, #4]
    3250:	4798      	blx	r3
    3252:	23c0      	movs	r3, #192	; 0xc0
    3254:	05db      	lsls	r3, r3, #23
    3256:	4018      	ands	r0, r3
    3258:	2380      	movs	r3, #128	; 0x80
    325a:	05db      	lsls	r3, r3, #23
    325c:	4298      	cmp	r0, r3
    325e:	d1f1      	bne.n	3244 <mmc_spi_op_cond+0x40>
		sd_mmc_card->type |= CARD_TYPE_HC;
    3260:	4b0a      	ldr	r3, [pc, #40]	; (328c <mmc_spi_op_cond+0x88>)
    3262:	447b      	add	r3, pc
    3264:	681a      	ldr	r2, [r3, #0]
    3266:	7ad3      	ldrb	r3, [r2, #11]
    3268:	2108      	movs	r1, #8
    326a:	430b      	orrs	r3, r1
    326c:	72d3      	strb	r3, [r2, #11]
    326e:	e7e9      	b.n	3244 <mmc_spi_op_cond+0x40>
			return false;
    3270:	2400      	movs	r4, #0
    3272:	e7e7      	b.n	3244 <mmc_spi_op_cond+0x40>
    3274:	0000f782 	.word	0x0000f782
    3278:	00001bee 	.word	0x00001bee
    327c:	00001101 	.word	0x00001101
    3280:	000003dc 	.word	0x000003dc
    3284:	0000043c 	.word	0x0000043c
    3288:	0000053a 	.word	0x0000053a
    328c:	1fffd62a 	.word	0x1fffd62a

00003290 <sd_mmc_cmd13>:
{
    3290:	b570      	push	{r4, r5, r6, lr}
    3292:	b082      	sub	sp, #8
    3294:	4e0d      	ldr	r6, [pc, #52]	; (32cc <sd_mmc_cmd13+0x3c>)
    3296:	447e      	add	r6, pc
	nec_timeout = 200000;
    3298:	4d0d      	ldr	r5, [pc, #52]	; (32d0 <sd_mmc_cmd13+0x40>)
    329a:	e000      	b.n	329e <sd_mmc_cmd13+0xe>
		if (nec_timeout-- == 0) {
    329c:	001d      	movs	r5, r3
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    329e:	2100      	movs	r1, #0
    32a0:	480c      	ldr	r0, [pc, #48]	; (32d4 <sd_mmc_cmd13+0x44>)
    32a2:	4b0d      	ldr	r3, [pc, #52]	; (32d8 <sd_mmc_cmd13+0x48>)
    32a4:	58f3      	ldr	r3, [r6, r3]
    32a6:	9301      	str	r3, [sp, #4]
    32a8:	4798      	blx	r3
    32aa:	1e04      	subs	r4, r0, #0
    32ac:	d00a      	beq.n	32c4 <sd_mmc_cmd13+0x34>
			if (!(driver_get_response() & 0xFF)) {
    32ae:	4b0b      	ldr	r3, [pc, #44]	; (32dc <sd_mmc_cmd13+0x4c>)
    32b0:	58f3      	ldr	r3, [r6, r3]
    32b2:	9301      	str	r3, [sp, #4]
    32b4:	4798      	blx	r3
    32b6:	23ff      	movs	r3, #255	; 0xff
    32b8:	4203      	tst	r3, r0
    32ba:	d003      	beq.n	32c4 <sd_mmc_cmd13+0x34>
		if (nec_timeout-- == 0) {
    32bc:	1e6b      	subs	r3, r5, #1
    32be:	2d00      	cmp	r5, #0
    32c0:	d1ec      	bne.n	329c <sd_mmc_cmd13+0xc>
			return false;
    32c2:	2400      	movs	r4, #0
}
    32c4:	0020      	movs	r0, r4
    32c6:	b002      	add	sp, #8
    32c8:	bd70      	pop	{r4, r5, r6, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	0000f6f6 	.word	0x0000f6f6
    32d0:	00030d40 	.word	0x00030d40
    32d4:	00001b0d 	.word	0x00001b0d
    32d8:	000003dc 	.word	0x000003dc
    32dc:	0000043c 	.word	0x0000043c

000032e0 <mmc_cmd8>:
{
    32e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32e2:	b087      	sub	sp, #28
    32e4:	0006      	movs	r6, r0
    32e6:	4f2b      	ldr	r7, [pc, #172]	; (3394 <mmc_cmd8+0xb4>)
    32e8:	447f      	add	r7, pc
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    32ea:	2300      	movs	r3, #0
    32ec:	9300      	str	r3, [sp, #0]
    32ee:	3301      	adds	r3, #1
    32f0:	2280      	movs	r2, #128	; 0x80
    32f2:	0092      	lsls	r2, r2, #2
    32f4:	2100      	movs	r1, #0
    32f6:	4828      	ldr	r0, [pc, #160]	; (3398 <mmc_cmd8+0xb8>)
    32f8:	4c28      	ldr	r4, [pc, #160]	; (339c <mmc_cmd8+0xbc>)
    32fa:	593c      	ldr	r4, [r7, r4]
    32fc:	9403      	str	r4, [sp, #12]
    32fe:	47a0      	blx	r4
    3300:	1e05      	subs	r5, r0, #0
    3302:	d040      	beq.n	3386 <mmc_cmd8+0xa6>
    3304:	2400      	movs	r4, #0
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    3306:	2c31      	cmp	r4, #49	; 0x31
    3308:	d809      	bhi.n	331e <mmc_cmd8+0x3e>
		if (!driver_read_word(&ext_csd)) {
    330a:	a805      	add	r0, sp, #20
    330c:	4b24      	ldr	r3, [pc, #144]	; (33a0 <mmc_cmd8+0xc0>)
    330e:	58fb      	ldr	r3, [r7, r3]
    3310:	9303      	str	r3, [sp, #12]
    3312:	4798      	blx	r3
    3314:	2800      	cmp	r0, #0
    3316:	d035      	beq.n	3384 <mmc_cmd8+0xa4>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    3318:	3401      	adds	r4, #1
    331a:	b2a4      	uxth	r4, r4
    331c:	e7f3      	b.n	3306 <mmc_cmd8+0x26>
			& MMC_CTYPE_52MHZ;
    331e:	2302      	movs	r3, #2
    3320:	9a05      	ldr	r2, [sp, #20]
    3322:	4013      	ands	r3, r2
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    3324:	7033      	strb	r3, [r6, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    3326:	4b1f      	ldr	r3, [pc, #124]	; (33a4 <mmc_cmd8+0xc4>)
    3328:	447b      	add	r3, pc
    332a:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    332c:	7d93      	ldrb	r3, [r2, #22]
    332e:	119b      	asrs	r3, r3, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    3330:	7d51      	ldrb	r1, [r2, #21]
    3332:	0089      	lsls	r1, r1, #2
    3334:	430b      	orrs	r3, r1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    3336:	7d12      	ldrb	r2, [r2, #20]
    3338:	0292      	lsls	r2, r2, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    333a:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    333c:	051b      	lsls	r3, r3, #20
    333e:	0d1b      	lsrs	r3, r3, #20
    3340:	4a19      	ldr	r2, [pc, #100]	; (33a8 <mmc_cmd8+0xc8>)
    3342:	4293      	cmp	r3, r2
    3344:	d00b      	beq.n	335e <mmc_cmd8+0x7e>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    3346:	2c7f      	cmp	r4, #127	; 0x7f
    3348:	d81d      	bhi.n	3386 <mmc_cmd8+0xa6>
		if (!driver_read_word(&sec_count)) {
    334a:	a804      	add	r0, sp, #16
    334c:	4b14      	ldr	r3, [pc, #80]	; (33a0 <mmc_cmd8+0xc0>)
    334e:	58fb      	ldr	r3, [r7, r3]
    3350:	9303      	str	r3, [sp, #12]
    3352:	4798      	blx	r3
    3354:	2800      	cmp	r0, #0
    3356:	d01b      	beq.n	3390 <mmc_cmd8+0xb0>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    3358:	3401      	adds	r4, #1
    335a:	b2a4      	uxth	r4, r4
    335c:	e7f3      	b.n	3346 <mmc_cmd8+0x66>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    335e:	2c35      	cmp	r4, #53	; 0x35
    3360:	d809      	bhi.n	3376 <mmc_cmd8+0x96>
			if (!driver_read_word(&sec_count)) {
    3362:	a804      	add	r0, sp, #16
    3364:	4b0e      	ldr	r3, [pc, #56]	; (33a0 <mmc_cmd8+0xc0>)
    3366:	58fb      	ldr	r3, [r7, r3]
    3368:	9303      	str	r3, [sp, #12]
    336a:	4798      	blx	r3
    336c:	2800      	cmp	r0, #0
    336e:	d00d      	beq.n	338c <mmc_cmd8+0xac>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    3370:	3401      	adds	r4, #1
    3372:	b2a4      	uxth	r4, r4
    3374:	e7f3      	b.n	335e <mmc_cmd8+0x7e>
		sd_mmc_card->capacity = sec_count / 2;
    3376:	4b0d      	ldr	r3, [pc, #52]	; (33ac <mmc_cmd8+0xcc>)
    3378:	447b      	add	r3, pc
    337a:	681a      	ldr	r2, [r3, #0]
    337c:	9b04      	ldr	r3, [sp, #16]
    337e:	085b      	lsrs	r3, r3, #1
    3380:	6053      	str	r3, [r2, #4]
    3382:	e7e0      	b.n	3346 <mmc_cmd8+0x66>
			return false;
    3384:	0005      	movs	r5, r0
}
    3386:	0028      	movs	r0, r5
    3388:	b007      	add	sp, #28
    338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return false;
    338c:	0005      	movs	r5, r0
    338e:	e7fa      	b.n	3386 <mmc_cmd8+0xa6>
			return false;
    3390:	0005      	movs	r5, r0
    3392:	e7f8      	b.n	3386 <mmc_cmd8+0xa6>
    3394:	0000f6a4 	.word	0x0000f6a4
    3398:	00081108 	.word	0x00081108
    339c:	000001e4 	.word	0x000001e4
    33a0:	00000190 	.word	0x00000190
    33a4:	1fffd564 	.word	0x1fffd564
    33a8:	00000fff 	.word	0x00000fff
    33ac:	1fffd514 	.word	0x1fffd514

000033b0 <sd_mmc_cmd9_spi>:
{
    33b0:	b530      	push	{r4, r5, lr}
    33b2:	b085      	sub	sp, #20
    33b4:	4c11      	ldr	r4, [pc, #68]	; (33fc <sd_mmc_cmd9_spi+0x4c>)
    33b6:	447c      	add	r4, pc
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    33b8:	4b11      	ldr	r3, [pc, #68]	; (3400 <sd_mmc_cmd9_spi+0x50>)
    33ba:	447b      	add	r3, pc
    33bc:	681b      	ldr	r3, [r3, #0]
    33be:	8919      	ldrh	r1, [r3, #8]
    33c0:	0409      	lsls	r1, r1, #16
    33c2:	2301      	movs	r3, #1
    33c4:	9300      	str	r3, [sp, #0]
    33c6:	2210      	movs	r2, #16
    33c8:	480e      	ldr	r0, [pc, #56]	; (3404 <sd_mmc_cmd9_spi+0x54>)
    33ca:	4d0f      	ldr	r5, [pc, #60]	; (3408 <sd_mmc_cmd9_spi+0x58>)
    33cc:	5965      	ldr	r5, [r4, r5]
    33ce:	9503      	str	r5, [sp, #12]
    33d0:	47a8      	blx	r5
    33d2:	2800      	cmp	r0, #0
    33d4:	d101      	bne.n	33da <sd_mmc_cmd9_spi+0x2a>
}
    33d6:	b005      	add	sp, #20
    33d8:	bd30      	pop	{r4, r5, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    33da:	4b0c      	ldr	r3, [pc, #48]	; (340c <sd_mmc_cmd9_spi+0x5c>)
    33dc:	447b      	add	r3, pc
    33de:	6818      	ldr	r0, [r3, #0]
    33e0:	300e      	adds	r0, #14
    33e2:	2101      	movs	r1, #1
    33e4:	4b0a      	ldr	r3, [pc, #40]	; (3410 <sd_mmc_cmd9_spi+0x60>)
    33e6:	58e3      	ldr	r3, [r4, r3]
    33e8:	9303      	str	r3, [sp, #12]
    33ea:	4798      	blx	r3
    33ec:	2800      	cmp	r0, #0
    33ee:	d0f2      	beq.n	33d6 <sd_mmc_cmd9_spi+0x26>
	return driver_wait_end_of_read_blocks();
    33f0:	4b08      	ldr	r3, [pc, #32]	; (3414 <sd_mmc_cmd9_spi+0x64>)
    33f2:	58e3      	ldr	r3, [r4, r3]
    33f4:	9303      	str	r3, [sp, #12]
    33f6:	4798      	blx	r3
    33f8:	e7ed      	b.n	33d6 <sd_mmc_cmd9_spi+0x26>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	0000f5d6 	.word	0x0000f5d6
    3400:	1fffd4d2 	.word	0x1fffd4d2
    3404:	00081109 	.word	0x00081109
    3408:	000001e4 	.word	0x000001e4
    340c:	1fffd4b0 	.word	0x1fffd4b0
    3410:	00000348 	.word	0x00000348
    3414:	0000026c 	.word	0x0000026c

00003418 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    3418:	b530      	push	{r4, r5, lr}
    341a:	b085      	sub	sp, #20
    341c:	4d20      	ldr	r5, [pc, #128]	; (34a0 <sd_mmc_spi_install_mmc+0x88>)
    341e:	447d      	add	r5, pc
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    3420:	2100      	movs	r1, #0
    3422:	2088      	movs	r0, #136	; 0x88
    3424:	0140      	lsls	r0, r0, #5
    3426:	4b1f      	ldr	r3, [pc, #124]	; (34a4 <sd_mmc_spi_install_mmc+0x8c>)
    3428:	58eb      	ldr	r3, [r5, r3]
    342a:	9301      	str	r3, [sp, #4]
    342c:	4798      	blx	r3
    342e:	1e04      	subs	r4, r0, #0
    3430:	d102      	bne.n	3438 <sd_mmc_spi_install_mmc+0x20>
		return false;
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
	return true;
}
    3432:	0020      	movs	r0, r4
    3434:	b005      	add	sp, #20
    3436:	bd30      	pop	{r4, r5, pc}
	if (!mmc_spi_op_cond()) {
    3438:	4b1b      	ldr	r3, [pc, #108]	; (34a8 <sd_mmc_spi_install_mmc+0x90>)
    343a:	447b      	add	r3, pc
    343c:	4798      	blx	r3
    343e:	1e04      	subs	r4, r0, #0
    3440:	d0f7      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    3442:	2100      	movs	r1, #0
    3444:	4819      	ldr	r0, [pc, #100]	; (34ac <sd_mmc_spi_install_mmc+0x94>)
    3446:	4b17      	ldr	r3, [pc, #92]	; (34a4 <sd_mmc_spi_install_mmc+0x8c>)
    3448:	58eb      	ldr	r3, [r5, r3]
    344a:	9301      	str	r3, [sp, #4]
    344c:	4798      	blx	r3
    344e:	1e04      	subs	r4, r0, #0
    3450:	d0ef      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	if (!sd_mmc_cmd9_spi()) {
    3452:	4b17      	ldr	r3, [pc, #92]	; (34b0 <sd_mmc_spi_install_mmc+0x98>)
    3454:	447b      	add	r3, pc
    3456:	4798      	blx	r3
    3458:	1e04      	subs	r4, r0, #0
    345a:	d0ea      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	mmc_decode_csd();
    345c:	4b15      	ldr	r3, [pc, #84]	; (34b4 <sd_mmc_spi_install_mmc+0x9c>)
    345e:	447b      	add	r3, pc
    3460:	4798      	blx	r3
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    3462:	4b15      	ldr	r3, [pc, #84]	; (34b8 <sd_mmc_spi_install_mmc+0xa0>)
    3464:	447b      	add	r3, pc
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	7b1b      	ldrb	r3, [r3, #12]
    346a:	2b3f      	cmp	r3, #63	; 0x3f
    346c:	d906      	bls.n	347c <sd_mmc_spi_install_mmc+0x64>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    346e:	ab02      	add	r3, sp, #8
    3470:	1dd8      	adds	r0, r3, #7
    3472:	4b12      	ldr	r3, [pc, #72]	; (34bc <sd_mmc_spi_install_mmc+0xa4>)
    3474:	447b      	add	r3, pc
    3476:	4798      	blx	r3
    3478:	1e04      	subs	r4, r0, #0
    347a:	d0da      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    347c:	2180      	movs	r1, #128	; 0x80
    347e:	0089      	lsls	r1, r1, #2
    3480:	480f      	ldr	r0, [pc, #60]	; (34c0 <sd_mmc_spi_install_mmc+0xa8>)
    3482:	4b08      	ldr	r3, [pc, #32]	; (34a4 <sd_mmc_spi_install_mmc+0x8c>)
    3484:	58eb      	ldr	r3, [r5, r3]
    3486:	9301      	str	r3, [sp, #4]
    3488:	4798      	blx	r3
    348a:	1e04      	subs	r4, r0, #0
    348c:	d0d1      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	if (!sd_mmc_cmd13()) {
    348e:	4b0d      	ldr	r3, [pc, #52]	; (34c4 <sd_mmc_spi_install_mmc+0xac>)
    3490:	447b      	add	r3, pc
    3492:	4798      	blx	r3
    3494:	1e04      	subs	r4, r0, #0
    3496:	d0cc      	beq.n	3432 <sd_mmc_spi_install_mmc+0x1a>
	sd_mmc_configure_slot();
    3498:	4b0b      	ldr	r3, [pc, #44]	; (34c8 <sd_mmc_spi_install_mmc+0xb0>)
    349a:	447b      	add	r3, pc
    349c:	4798      	blx	r3
	return true;
    349e:	e7c8      	b.n	3432 <sd_mmc_spi_install_mmc+0x1a>
    34a0:	0000f56e 	.word	0x0000f56e
    34a4:	000003dc 	.word	0x000003dc
    34a8:	fffffdc7 	.word	0xfffffdc7
    34ac:	0000113b 	.word	0x0000113b
    34b0:	ffffff59 	.word	0xffffff59
    34b4:	fffffa93 	.word	0xfffffa93
    34b8:	1fffd428 	.word	0x1fffd428
    34bc:	fffffe69 	.word	0xfffffe69
    34c0:	00001110 	.word	0x00001110
    34c4:	fffffdfd 	.word	0xfffffdfd
    34c8:	fffffbb3 	.word	0xfffffbb3

000034cc <sd_acmd51>:
{
    34cc:	b530      	push	{r4, r5, lr}
    34ce:	b087      	sub	sp, #28
    34d0:	4c2a      	ldr	r4, [pc, #168]	; (357c <sd_acmd51+0xb0>)
    34d2:	447c      	add	r4, pc
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    34d4:	4b2a      	ldr	r3, [pc, #168]	; (3580 <sd_acmd51+0xb4>)
    34d6:	447b      	add	r3, pc
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	8919      	ldrh	r1, [r3, #8]
    34dc:	0409      	lsls	r1, r1, #16
    34de:	4829      	ldr	r0, [pc, #164]	; (3584 <sd_acmd51+0xb8>)
    34e0:	4b29      	ldr	r3, [pc, #164]	; (3588 <sd_acmd51+0xbc>)
    34e2:	58e3      	ldr	r3, [r4, r3]
    34e4:	9303      	str	r3, [sp, #12]
    34e6:	4798      	blx	r3
    34e8:	2800      	cmp	r0, #0
    34ea:	d101      	bne.n	34f0 <sd_acmd51+0x24>
}
    34ec:	b007      	add	sp, #28
    34ee:	bd30      	pop	{r4, r5, pc}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    34f0:	2301      	movs	r3, #1
    34f2:	9300      	str	r3, [sp, #0]
    34f4:	2208      	movs	r2, #8
    34f6:	2100      	movs	r1, #0
    34f8:	4824      	ldr	r0, [pc, #144]	; (358c <sd_acmd51+0xc0>)
    34fa:	4d25      	ldr	r5, [pc, #148]	; (3590 <sd_acmd51+0xc4>)
    34fc:	5965      	ldr	r5, [r4, r5]
    34fe:	9503      	str	r5, [sp, #12]
    3500:	47a8      	blx	r5
    3502:	2800      	cmp	r0, #0
    3504:	d0f2      	beq.n	34ec <sd_acmd51+0x20>
	if (!driver_start_read_blocks(scr, 1)) {
    3506:	2101      	movs	r1, #1
    3508:	a804      	add	r0, sp, #16
    350a:	4b22      	ldr	r3, [pc, #136]	; (3594 <sd_acmd51+0xc8>)
    350c:	58e3      	ldr	r3, [r4, r3]
    350e:	9303      	str	r3, [sp, #12]
    3510:	4798      	blx	r3
    3512:	2800      	cmp	r0, #0
    3514:	d0ea      	beq.n	34ec <sd_acmd51+0x20>
	if (!driver_wait_end_of_read_blocks()) {
    3516:	4b20      	ldr	r3, [pc, #128]	; (3598 <sd_acmd51+0xcc>)
    3518:	58e3      	ldr	r3, [r4, r3]
    351a:	9303      	str	r3, [sp, #12]
    351c:	4798      	blx	r3
    351e:	2800      	cmp	r0, #0
    3520:	d0e4      	beq.n	34ec <sd_acmd51+0x20>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    3522:	ab04      	add	r3, sp, #16
    3524:	781a      	ldrb	r2, [r3, #0]
	switch (SD_SCR_SD_SPEC(scr)) {
    3526:	230f      	movs	r3, #15
    3528:	4013      	ands	r3, r2
    352a:	2b01      	cmp	r3, #1
    352c:	d00f      	beq.n	354e <sd_acmd51+0x82>
    352e:	2b00      	cmp	r3, #0
    3530:	d007      	beq.n	3542 <sd_acmd51+0x76>
    3532:	2b02      	cmp	r3, #2
    3534:	d011      	beq.n	355a <sd_acmd51+0x8e>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    3536:	4b19      	ldr	r3, [pc, #100]	; (359c <sd_acmd51+0xd0>)
    3538:	447b      	add	r3, pc
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	2210      	movs	r2, #16
    353e:	731a      	strb	r2, [r3, #12]
		break;
    3540:	e7d4      	b.n	34ec <sd_acmd51+0x20>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    3542:	4b17      	ldr	r3, [pc, #92]	; (35a0 <sd_acmd51+0xd4>)
    3544:	447b      	add	r3, pc
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	2210      	movs	r2, #16
    354a:	731a      	strb	r2, [r3, #12]
		break;
    354c:	e7ce      	b.n	34ec <sd_acmd51+0x20>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    354e:	4b15      	ldr	r3, [pc, #84]	; (35a4 <sd_acmd51+0xd8>)
    3550:	447b      	add	r3, pc
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	221a      	movs	r2, #26
    3556:	731a      	strb	r2, [r3, #12]
		break;
    3558:	e7c8      	b.n	34ec <sd_acmd51+0x20>
    355a:	ab04      	add	r3, sp, #16
    355c:	789b      	ldrb	r3, [r3, #2]
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    355e:	09db      	lsrs	r3, r3, #7
    3560:	2b01      	cmp	r3, #1
    3562:	d005      	beq.n	3570 <sd_acmd51+0xa4>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    3564:	4b10      	ldr	r3, [pc, #64]	; (35a8 <sd_acmd51+0xdc>)
    3566:	447b      	add	r3, pc
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	2220      	movs	r2, #32
    356c:	731a      	strb	r2, [r3, #12]
    356e:	e7bd      	b.n	34ec <sd_acmd51+0x20>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    3570:	4b0e      	ldr	r3, [pc, #56]	; (35ac <sd_acmd51+0xe0>)
    3572:	447b      	add	r3, pc
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	2230      	movs	r2, #48	; 0x30
    3578:	731a      	strb	r2, [r3, #12]
    357a:	e7b7      	b.n	34ec <sd_acmd51+0x20>
    357c:	0000f4ba 	.word	0x0000f4ba
    3580:	1fffd3b6 	.word	0x1fffd3b6
    3584:	00001137 	.word	0x00001137
    3588:	000003dc 	.word	0x000003dc
    358c:	00081133 	.word	0x00081133
    3590:	000001e4 	.word	0x000001e4
    3594:	00000348 	.word	0x00000348
    3598:	0000026c 	.word	0x0000026c
    359c:	1fffd354 	.word	0x1fffd354
    35a0:	1fffd348 	.word	0x1fffd348
    35a4:	1fffd33c 	.word	0x1fffd33c
    35a8:	1fffd326 	.word	0x1fffd326
    35ac:	1fffd31a 	.word	0x1fffd31a

000035b0 <sd_mmc_spi_card_init>:
{
    35b0:	b530      	push	{r4, r5, lr}
    35b2:	b085      	sub	sp, #20
    35b4:	4d41      	ldr	r5, [pc, #260]	; (36bc <sd_mmc_spi_card_init+0x10c>)
    35b6:	447d      	add	r5, pc
	uint8_t v2 = 0;
    35b8:	2200      	movs	r2, #0
    35ba:	ab02      	add	r3, sp, #8
    35bc:	71da      	strb	r2, [r3, #7]
	sd_mmc_card->type = CARD_TYPE_SD;
    35be:	4b40      	ldr	r3, [pc, #256]	; (36c0 <sd_mmc_spi_card_init+0x110>)
    35c0:	447b      	add	r3, pc
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	2101      	movs	r1, #1
    35c6:	72d9      	strb	r1, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    35c8:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    35ca:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    35cc:	4b3d      	ldr	r3, [pc, #244]	; (36c4 <sd_mmc_spi_card_init+0x114>)
    35ce:	58eb      	ldr	r3, [r5, r3]
    35d0:	9301      	str	r3, [sp, #4]
    35d2:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    35d4:	2100      	movs	r1, #0
    35d6:	2088      	movs	r0, #136	; 0x88
    35d8:	0140      	lsls	r0, r0, #5
    35da:	4b3b      	ldr	r3, [pc, #236]	; (36c8 <sd_mmc_spi_card_init+0x118>)
    35dc:	58eb      	ldr	r3, [r5, r3]
    35de:	9301      	str	r3, [sp, #4]
    35e0:	4798      	blx	r3
    35e2:	1e04      	subs	r4, r0, #0
    35e4:	d102      	bne.n	35ec <sd_mmc_spi_card_init+0x3c>
}
    35e6:	0020      	movs	r0, r4
    35e8:	b005      	add	sp, #20
    35ea:	bd30      	pop	{r4, r5, pc}
	if (!sd_cmd8(&v2)) {
    35ec:	ab02      	add	r3, sp, #8
    35ee:	1dd8      	adds	r0, r3, #7
    35f0:	4b36      	ldr	r3, [pc, #216]	; (36cc <sd_mmc_spi_card_init+0x11c>)
    35f2:	447b      	add	r3, pc
    35f4:	4798      	blx	r3
    35f6:	1e04      	subs	r4, r0, #0
    35f8:	d0f5      	beq.n	35e6 <sd_mmc_spi_card_init+0x36>
	if (!sdio_op_cond()) {
    35fa:	4b35      	ldr	r3, [pc, #212]	; (36d0 <sd_mmc_spi_card_init+0x120>)
    35fc:	447b      	add	r3, pc
    35fe:	4798      	blx	r3
    3600:	1e04      	subs	r4, r0, #0
    3602:	d0f0      	beq.n	35e6 <sd_mmc_spi_card_init+0x36>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3604:	4b33      	ldr	r3, [pc, #204]	; (36d4 <sd_mmc_spi_card_init+0x124>)
    3606:	447b      	add	r3, pc
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	7adb      	ldrb	r3, [r3, #11]
    360c:	07db      	lsls	r3, r3, #31
    360e:	d41c      	bmi.n	364a <sd_mmc_spi_card_init+0x9a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    3610:	4b31      	ldr	r3, [pc, #196]	; (36d8 <sd_mmc_spi_card_init+0x128>)
    3612:	447b      	add	r3, pc
    3614:	681b      	ldr	r3, [r3, #0]
    3616:	7adb      	ldrb	r3, [r3, #11]
    3618:	07db      	lsls	r3, r3, #31
    361a:	d431      	bmi.n	3680 <sd_mmc_spi_card_init+0xd0>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    361c:	4b2f      	ldr	r3, [pc, #188]	; (36dc <sd_mmc_spi_card_init+0x12c>)
    361e:	447b      	add	r3, pc
    3620:	681b      	ldr	r3, [r3, #0]
    3622:	7ada      	ldrb	r2, [r3, #11]
    3624:	2309      	movs	r3, #9
    3626:	4013      	ands	r3, r2
    3628:	2b01      	cmp	r3, #1
    362a:	d03a      	beq.n	36a2 <sd_mmc_spi_card_init+0xf2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    362c:	4b2c      	ldr	r3, [pc, #176]	; (36e0 <sd_mmc_spi_card_init+0x130>)
    362e:	447b      	add	r3, pc
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	7adb      	ldrb	r3, [r3, #11]
    3634:	07db      	lsls	r3, r3, #31
    3636:	d504      	bpl.n	3642 <sd_mmc_spi_card_init+0x92>
		if (!sd_mmc_cmd13()) {
    3638:	4b2a      	ldr	r3, [pc, #168]	; (36e4 <sd_mmc_spi_card_init+0x134>)
    363a:	447b      	add	r3, pc
    363c:	4798      	blx	r3
    363e:	2800      	cmp	r0, #0
    3640:	d03a      	beq.n	36b8 <sd_mmc_spi_card_init+0x108>
	sd_mmc_configure_slot();
    3642:	4b29      	ldr	r3, [pc, #164]	; (36e8 <sd_mmc_spi_card_init+0x138>)
    3644:	447b      	add	r3, pc
    3646:	4798      	blx	r3
	return true;
    3648:	e7cd      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
		if (!sd_spi_op_cond(v2)) {
    364a:	ab02      	add	r3, sp, #8
    364c:	79d8      	ldrb	r0, [r3, #7]
    364e:	4b27      	ldr	r3, [pc, #156]	; (36ec <sd_mmc_spi_card_init+0x13c>)
    3650:	447b      	add	r3, pc
    3652:	4798      	blx	r3
    3654:	2800      	cmp	r0, #0
    3656:	d009      	beq.n	366c <sd_mmc_spi_card_init+0xbc>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    3658:	2100      	movs	r1, #0
    365a:	4825      	ldr	r0, [pc, #148]	; (36f0 <sd_mmc_spi_card_init+0x140>)
    365c:	4b1a      	ldr	r3, [pc, #104]	; (36c8 <sd_mmc_spi_card_init+0x118>)
    365e:	58eb      	ldr	r3, [r5, r3]
    3660:	9301      	str	r3, [sp, #4]
    3662:	4798      	blx	r3
    3664:	2800      	cmp	r0, #0
    3666:	d1d3      	bne.n	3610 <sd_mmc_spi_card_init+0x60>
			return false;
    3668:	0004      	movs	r4, r0
    366a:	e7bc      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
			sd_mmc_card->type = CARD_TYPE_MMC;
    366c:	4b21      	ldr	r3, [pc, #132]	; (36f4 <sd_mmc_spi_card_init+0x144>)
    366e:	447b      	add	r3, pc
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	2202      	movs	r2, #2
    3674:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    3676:	4b20      	ldr	r3, [pc, #128]	; (36f8 <sd_mmc_spi_card_init+0x148>)
    3678:	447b      	add	r3, pc
    367a:	4798      	blx	r3
    367c:	0004      	movs	r4, r0
    367e:	e7b2      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
		if (!sd_mmc_cmd9_spi()) {
    3680:	4b1e      	ldr	r3, [pc, #120]	; (36fc <sd_mmc_spi_card_init+0x14c>)
    3682:	447b      	add	r3, pc
    3684:	4798      	blx	r3
    3686:	2800      	cmp	r0, #0
    3688:	d101      	bne.n	368e <sd_mmc_spi_card_init+0xde>
			return false;
    368a:	0004      	movs	r4, r0
    368c:	e7ab      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
		sd_decode_csd();
    368e:	4b1c      	ldr	r3, [pc, #112]	; (3700 <sd_mmc_spi_card_init+0x150>)
    3690:	447b      	add	r3, pc
    3692:	4798      	blx	r3
		if (!sd_acmd51()) {
    3694:	4b1b      	ldr	r3, [pc, #108]	; (3704 <sd_mmc_spi_card_init+0x154>)
    3696:	447b      	add	r3, pc
    3698:	4798      	blx	r3
    369a:	2800      	cmp	r0, #0
    369c:	d1be      	bne.n	361c <sd_mmc_spi_card_init+0x6c>
			return false;
    369e:	0004      	movs	r4, r0
    36a0:	e7a1      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    36a2:	2180      	movs	r1, #128	; 0x80
    36a4:	0089      	lsls	r1, r1, #2
    36a6:	4818      	ldr	r0, [pc, #96]	; (3708 <sd_mmc_spi_card_init+0x158>)
    36a8:	4b07      	ldr	r3, [pc, #28]	; (36c8 <sd_mmc_spi_card_init+0x118>)
    36aa:	58eb      	ldr	r3, [r5, r3]
    36ac:	9301      	str	r3, [sp, #4]
    36ae:	4798      	blx	r3
    36b0:	2800      	cmp	r0, #0
    36b2:	d1bb      	bne.n	362c <sd_mmc_spi_card_init+0x7c>
			return false;
    36b4:	0004      	movs	r4, r0
    36b6:	e796      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
			return false;
    36b8:	0004      	movs	r4, r0
    36ba:	e794      	b.n	35e6 <sd_mmc_spi_card_init+0x36>
    36bc:	0000f3d6 	.word	0x0000f3d6
    36c0:	1fffd2cc 	.word	0x1fffd2cc
    36c4:	000004d8 	.word	0x000004d8
    36c8:	000003dc 	.word	0x000003dc
    36cc:	fffffb0f 	.word	0xfffffb0f
    36d0:	fffff8f1 	.word	0xfffff8f1
    36d4:	1fffd286 	.word	0x1fffd286
    36d8:	1fffd27a 	.word	0x1fffd27a
    36dc:	1fffd26e 	.word	0x1fffd26e
    36e0:	1fffd25e 	.word	0x1fffd25e
    36e4:	fffffc53 	.word	0xfffffc53
    36e8:	fffffa09 	.word	0xfffffa09
    36ec:	fffffb0d 	.word	0xfffffb0d
    36f0:	0000113b 	.word	0x0000113b
    36f4:	1fffd21e 	.word	0x1fffd21e
    36f8:	fffffd9d 	.word	0xfffffd9d
    36fc:	fffffd2b 	.word	0xfffffd2b
    3700:	fffff91d 	.word	0xfffff91d
    3704:	fffffe33 	.word	0xfffffe33
    3708:	00001110 	.word	0x00001110

0000370c <sd_mmc_deselect_slot>:
{
    370c:	b500      	push	{lr}
    370e:	b083      	sub	sp, #12
    3710:	4b06      	ldr	r3, [pc, #24]	; (372c <sd_mmc_deselect_slot+0x20>)
    3712:	447b      	add	r3, pc
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    3714:	4a06      	ldr	r2, [pc, #24]	; (3730 <sd_mmc_deselect_slot+0x24>)
    3716:	447a      	add	r2, pc
    3718:	7810      	ldrb	r0, [r2, #0]
    371a:	2800      	cmp	r0, #0
    371c:	d001      	beq.n	3722 <sd_mmc_deselect_slot+0x16>
}
    371e:	b003      	add	sp, #12
    3720:	bd00      	pop	{pc}
		driver_deselect_device(sd_mmc_slot_sel);
    3722:	4a04      	ldr	r2, [pc, #16]	; (3734 <sd_mmc_deselect_slot+0x28>)
    3724:	589b      	ldr	r3, [r3, r2]
    3726:	9301      	str	r3, [sp, #4]
    3728:	4798      	blx	r3
}
    372a:	e7f8      	b.n	371e <sd_mmc_deselect_slot+0x12>
    372c:	0000f27a 	.word	0x0000f27a
    3730:	1fffd19e 	.word	0x1fffd19e
    3734:	000004b8 	.word	0x000004b8

00003738 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    3738:	b500      	push	{lr}
    373a:	b083      	sub	sp, #12
    373c:	490b      	ldr	r1, [pc, #44]	; (376c <sd_mmc_init+0x34>)
    373e:	4479      	add	r1, pc
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    3740:	2300      	movs	r3, #0
    3742:	2b00      	cmp	r3, #0
    3744:	d009      	beq.n	375a <sd_mmc_init+0x22>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    3746:	22ff      	movs	r2, #255	; 0xff
    3748:	4b09      	ldr	r3, [pc, #36]	; (3770 <sd_mmc_init+0x38>)
    374a:	447b      	add	r3, pc
    374c:	701a      	strb	r2, [r3, #0]
	driver_init();
    374e:	4b09      	ldr	r3, [pc, #36]	; (3774 <sd_mmc_init+0x3c>)
    3750:	58cb      	ldr	r3, [r1, r3]
    3752:	9301      	str	r3, [sp, #4]
    3754:	4798      	blx	r3
}
    3756:	b003      	add	sp, #12
    3758:	bd00      	pop	{pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    375a:	0158      	lsls	r0, r3, #5
    375c:	4a06      	ldr	r2, [pc, #24]	; (3778 <sd_mmc_init+0x40>)
    375e:	447a      	add	r2, pc
    3760:	1812      	adds	r2, r2, r0
    3762:	2004      	movs	r0, #4
    3764:	7290      	strb	r0, [r2, #10]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    3766:	3301      	adds	r3, #1
    3768:	b2db      	uxtb	r3, r3
    376a:	e7ea      	b.n	3742 <sd_mmc_init+0xa>
    376c:	0000f24e 	.word	0x0000f24e
    3770:	1fffd16a 	.word	0x1fffd16a
    3774:	00000260 	.word	0x00000260
    3778:	1fffd132 	.word	0x1fffd132

0000377c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    377c:	b510      	push	{r4, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    377e:	4b11      	ldr	r3, [pc, #68]	; (37c4 <sd_mmc_check+0x48>)
    3780:	447b      	add	r3, pc
    3782:	4798      	blx	r3
    3784:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    3786:	2801      	cmp	r0, #1
    3788:	d004      	beq.n	3794 <sd_mmc_check+0x18>
		sd_mmc_deselect_slot();
    378a:	4b0f      	ldr	r3, [pc, #60]	; (37c8 <sd_mmc_check+0x4c>)
    378c:	447b      	add	r3, pc
    378e:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    3790:	0020      	movs	r0, r4
    3792:	bd10      	pop	{r4, pc}
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    3794:	4b0d      	ldr	r3, [pc, #52]	; (37cc <sd_mmc_check+0x50>)
    3796:	447b      	add	r3, pc
    3798:	4798      	blx	r3
    379a:	2800      	cmp	r0, #0
    379c:	d109      	bne.n	37b2 <sd_mmc_check+0x36>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    379e:	4b0c      	ldr	r3, [pc, #48]	; (37d0 <sd_mmc_check+0x54>)
    37a0:	447b      	add	r3, pc
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	2203      	movs	r2, #3
    37a6:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    37a8:	4b0a      	ldr	r3, [pc, #40]	; (37d4 <sd_mmc_check+0x58>)
    37aa:	447b      	add	r3, pc
    37ac:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    37ae:	2403      	movs	r4, #3
    37b0:	e7ee      	b.n	3790 <sd_mmc_check+0x14>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    37b2:	4b09      	ldr	r3, [pc, #36]	; (37d8 <sd_mmc_check+0x5c>)
    37b4:	447b      	add	r3, pc
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	2200      	movs	r2, #0
    37ba:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    37bc:	4b07      	ldr	r3, [pc, #28]	; (37dc <sd_mmc_check+0x60>)
    37be:	447b      	add	r3, pc
    37c0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    37c2:	e7e5      	b.n	3790 <sd_mmc_check+0x14>
    37c4:	fffff909 	.word	0xfffff909
    37c8:	ffffff7d 	.word	0xffffff7d
    37cc:	fffffe17 	.word	0xfffffe17
    37d0:	1fffd0ec 	.word	0x1fffd0ec
    37d4:	ffffff5f 	.word	0xffffff5f
    37d8:	1fffd0d8 	.word	0x1fffd0d8
    37dc:	ffffff4b 	.word	0xffffff4b

000037e0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    37e0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    37e2:	4b07      	ldr	r3, [pc, #28]	; (3800 <sd_mmc_get_type+0x20>)
    37e4:	447b      	add	r3, pc
    37e6:	4798      	blx	r3
    37e8:	2800      	cmp	r0, #0
    37ea:	d001      	beq.n	37f0 <sd_mmc_get_type+0x10>
		return CARD_TYPE_UNKNOWN;
    37ec:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    37ee:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    37f0:	4b04      	ldr	r3, [pc, #16]	; (3804 <sd_mmc_get_type+0x24>)
    37f2:	447b      	add	r3, pc
    37f4:	4798      	blx	r3
	return sd_mmc_card->type;
    37f6:	4b04      	ldr	r3, [pc, #16]	; (3808 <sd_mmc_get_type+0x28>)
    37f8:	447b      	add	r3, pc
    37fa:	681b      	ldr	r3, [r3, #0]
    37fc:	7ad8      	ldrb	r0, [r3, #11]
    37fe:	e7f6      	b.n	37ee <sd_mmc_get_type+0xe>
    3800:	fffff8a5 	.word	0xfffff8a5
    3804:	ffffff17 	.word	0xffffff17
    3808:	1fffd094 	.word	0x1fffd094

0000380c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    380c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    380e:	4b07      	ldr	r3, [pc, #28]	; (382c <sd_mmc_get_capacity+0x20>)
    3810:	447b      	add	r3, pc
    3812:	4798      	blx	r3
    3814:	2800      	cmp	r0, #0
    3816:	d001      	beq.n	381c <sd_mmc_get_capacity+0x10>
		return 0;
    3818:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    381a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    381c:	4b04      	ldr	r3, [pc, #16]	; (3830 <sd_mmc_get_capacity+0x24>)
    381e:	447b      	add	r3, pc
    3820:	4798      	blx	r3
	return sd_mmc_card->capacity;
    3822:	4b04      	ldr	r3, [pc, #16]	; (3834 <sd_mmc_get_capacity+0x28>)
    3824:	447b      	add	r3, pc
    3826:	681b      	ldr	r3, [r3, #0]
    3828:	6858      	ldr	r0, [r3, #4]
    382a:	e7f6      	b.n	381a <sd_mmc_get_capacity+0xe>
    382c:	fffff879 	.word	0xfffff879
    3830:	fffffeeb 	.word	0xfffffeeb
    3834:	1fffd068 	.word	0x1fffd068

00003838 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    3838:	2000      	movs	r0, #0
    383a:	4770      	bx	lr

0000383c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    383c:	b5f0      	push	{r4, r5, r6, r7, lr}
    383e:	b085      	sub	sp, #20
    3840:	000f      	movs	r7, r1
    3842:	0016      	movs	r6, r2
    3844:	4d1b      	ldr	r5, [pc, #108]	; (38b4 <sd_mmc_init_read_blocks+0x78>)
    3846:	447d      	add	r5, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    3848:	4b1b      	ldr	r3, [pc, #108]	; (38b8 <sd_mmc_init_read_blocks+0x7c>)
    384a:	447b      	add	r3, pc
    384c:	4798      	blx	r3
    384e:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    3850:	d002      	beq.n	3858 <sd_mmc_init_read_blocks+0x1c>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    3852:	0020      	movs	r0, r4
    3854:	b005      	add	sp, #20
    3856:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!sd_mmc_cmd13()) {
    3858:	4b18      	ldr	r3, [pc, #96]	; (38bc <sd_mmc_init_read_blocks+0x80>)
    385a:	447b      	add	r3, pc
    385c:	4798      	blx	r3
    385e:	2800      	cmp	r0, #0
    3860:	d01c      	beq.n	389c <sd_mmc_init_read_blocks+0x60>
	if (nb_block > 1) {
    3862:	2e01      	cmp	r6, #1
    3864:	d91f      	bls.n	38a6 <sd_mmc_init_read_blocks+0x6a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    3866:	4816      	ldr	r0, [pc, #88]	; (38c0 <sd_mmc_init_read_blocks+0x84>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    3868:	4b16      	ldr	r3, [pc, #88]	; (38c4 <sd_mmc_init_read_blocks+0x88>)
    386a:	447b      	add	r3, pc
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	7adb      	ldrb	r3, [r3, #11]
    3870:	071b      	lsls	r3, r3, #28
    3872:	d400      	bmi.n	3876 <sd_mmc_init_read_blocks+0x3a>
		arg = (start * SD_MMC_BLOCK_SIZE);
    3874:	027f      	lsls	r7, r7, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    3876:	2301      	movs	r3, #1
    3878:	9300      	str	r3, [sp, #0]
    387a:	0033      	movs	r3, r6
    387c:	2280      	movs	r2, #128	; 0x80
    387e:	0092      	lsls	r2, r2, #2
    3880:	0039      	movs	r1, r7
    3882:	4f11      	ldr	r7, [pc, #68]	; (38c8 <sd_mmc_init_read_blocks+0x8c>)
    3884:	59ed      	ldr	r5, [r5, r7]
    3886:	9503      	str	r5, [sp, #12]
    3888:	47a8      	blx	r5
    388a:	2800      	cmp	r0, #0
    388c:	d00d      	beq.n	38aa <sd_mmc_init_read_blocks+0x6e>
	sd_mmc_nb_block_remaining = nb_block;
    388e:	4b0f      	ldr	r3, [pc, #60]	; (38cc <sd_mmc_init_read_blocks+0x90>)
    3890:	447b      	add	r3, pc
    3892:	801e      	strh	r6, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    3894:	4b0e      	ldr	r3, [pc, #56]	; (38d0 <sd_mmc_init_read_blocks+0x94>)
    3896:	447b      	add	r3, pc
    3898:	801e      	strh	r6, [r3, #0]
	return SD_MMC_OK;
    389a:	e7da      	b.n	3852 <sd_mmc_init_read_blocks+0x16>
		sd_mmc_deselect_slot();
    389c:	4b0d      	ldr	r3, [pc, #52]	; (38d4 <sd_mmc_init_read_blocks+0x98>)
    389e:	447b      	add	r3, pc
    38a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    38a2:	3405      	adds	r4, #5
    38a4:	e7d5      	b.n	3852 <sd_mmc_init_read_blocks+0x16>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    38a6:	480c      	ldr	r0, [pc, #48]	; (38d8 <sd_mmc_init_read_blocks+0x9c>)
    38a8:	e7de      	b.n	3868 <sd_mmc_init_read_blocks+0x2c>
		sd_mmc_deselect_slot();
    38aa:	4b0c      	ldr	r3, [pc, #48]	; (38dc <sd_mmc_init_read_blocks+0xa0>)
    38ac:	447b      	add	r3, pc
    38ae:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    38b0:	2405      	movs	r4, #5
    38b2:	e7ce      	b.n	3852 <sd_mmc_init_read_blocks+0x16>
    38b4:	0000f146 	.word	0x0000f146
    38b8:	fffff83f 	.word	0xfffff83f
    38bc:	fffffa33 	.word	0xfffffa33
    38c0:	00101112 	.word	0x00101112
    38c4:	1fffd022 	.word	0x1fffd022
    38c8:	000001e4 	.word	0x000001e4
    38cc:	1fffd020 	.word	0x1fffd020
    38d0:	1fffd01c 	.word	0x1fffd01c
    38d4:	fffffe6b 	.word	0xfffffe6b
    38d8:	00081111 	.word	0x00081111
    38dc:	fffffe5d 	.word	0xfffffe5d

000038e0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    38e0:	b510      	push	{r4, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	000c      	movs	r4, r1
    38e6:	4b0b      	ldr	r3, [pc, #44]	; (3914 <sd_mmc_start_read_blocks+0x34>)
    38e8:	447b      	add	r3, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    38ea:	4a0b      	ldr	r2, [pc, #44]	; (3918 <sd_mmc_start_read_blocks+0x38>)
    38ec:	589b      	ldr	r3, [r3, r2]
    38ee:	9301      	str	r3, [sp, #4]
    38f0:	4798      	blx	r3
    38f2:	2800      	cmp	r0, #0
    38f4:	d106      	bne.n	3904 <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
    38f6:	2200      	movs	r2, #0
    38f8:	4b08      	ldr	r3, [pc, #32]	; (391c <sd_mmc_start_read_blocks+0x3c>)
    38fa:	447b      	add	r3, pc
    38fc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    38fe:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    3900:	b002      	add	sp, #8
    3902:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    3904:	4a06      	ldr	r2, [pc, #24]	; (3920 <sd_mmc_start_read_blocks+0x40>)
    3906:	447a      	add	r2, pc
    3908:	8813      	ldrh	r3, [r2, #0]
    390a:	1b1c      	subs	r4, r3, r4
    390c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    390e:	2000      	movs	r0, #0
    3910:	e7f6      	b.n	3900 <sd_mmc_start_read_blocks+0x20>
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	0000f0a4 	.word	0x0000f0a4
    3918:	00000348 	.word	0x00000348
    391c:	1fffcfb6 	.word	0x1fffcfb6
    3920:	1fffcfaa 	.word	0x1fffcfaa

00003924 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    3924:	b530      	push	{r4, r5, lr}
    3926:	b083      	sub	sp, #12
    3928:	0005      	movs	r5, r0
    392a:	4c1b      	ldr	r4, [pc, #108]	; (3998 <sd_mmc_wait_end_of_read_blocks+0x74>)
    392c:	447c      	add	r4, pc
	if (!driver_wait_end_of_read_blocks()) {
    392e:	4b1b      	ldr	r3, [pc, #108]	; (399c <sd_mmc_wait_end_of_read_blocks+0x78>)
    3930:	58e3      	ldr	r3, [r4, r3]
    3932:	9301      	str	r3, [sp, #4]
    3934:	4798      	blx	r3
    3936:	2800      	cmp	r0, #0
    3938:	d102      	bne.n	3940 <sd_mmc_wait_end_of_read_blocks+0x1c>
		return SD_MMC_ERR_COMM;
    393a:	2005      	movs	r0, #5
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    393c:	b003      	add	sp, #12
    393e:	bd30      	pop	{r4, r5, pc}
	if (abort) {
    3940:	2d00      	cmp	r5, #0
    3942:	d015      	beq.n	3970 <sd_mmc_wait_end_of_read_blocks+0x4c>
		sd_mmc_nb_block_remaining = 0;
    3944:	2200      	movs	r2, #0
    3946:	4b16      	ldr	r3, [pc, #88]	; (39a0 <sd_mmc_wait_end_of_read_blocks+0x7c>)
    3948:	447b      	add	r3, pc
    394a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    394c:	4b15      	ldr	r3, [pc, #84]	; (39a4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    394e:	447b      	add	r3, pc
    3950:	881b      	ldrh	r3, [r3, #0]
    3952:	2b01      	cmp	r3, #1
    3954:	d013      	beq.n	397e <sd_mmc_wait_end_of_read_blocks+0x5a>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    3956:	2100      	movs	r1, #0
    3958:	4813      	ldr	r0, [pc, #76]	; (39a8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    395a:	4b14      	ldr	r3, [pc, #80]	; (39ac <sd_mmc_wait_end_of_read_blocks+0x88>)
    395c:	58e3      	ldr	r3, [r4, r3]
    395e:	9301      	str	r3, [sp, #4]
    3960:	4798      	blx	r3
    3962:	2800      	cmp	r0, #0
    3964:	d010      	beq.n	3988 <sd_mmc_wait_end_of_read_blocks+0x64>
	sd_mmc_deselect_slot();
    3966:	4b12      	ldr	r3, [pc, #72]	; (39b0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    3968:	447b      	add	r3, pc
    396a:	4798      	blx	r3
	return SD_MMC_OK;
    396c:	2000      	movs	r0, #0
    396e:	e7e5      	b.n	393c <sd_mmc_wait_end_of_read_blocks+0x18>
	} else if (sd_mmc_nb_block_remaining) {
    3970:	4b10      	ldr	r3, [pc, #64]	; (39b4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    3972:	447b      	add	r3, pc
    3974:	881b      	ldrh	r3, [r3, #0]
    3976:	2b00      	cmp	r3, #0
    3978:	d0e8      	beq.n	394c <sd_mmc_wait_end_of_read_blocks+0x28>
		return SD_MMC_OK;
    397a:	2000      	movs	r0, #0
    397c:	e7de      	b.n	393c <sd_mmc_wait_end_of_read_blocks+0x18>
		sd_mmc_deselect_slot();
    397e:	4b0e      	ldr	r3, [pc, #56]	; (39b8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    3980:	447b      	add	r3, pc
    3982:	4798      	blx	r3
		return SD_MMC_OK;
    3984:	2000      	movs	r0, #0
    3986:	e7d9      	b.n	393c <sd_mmc_wait_end_of_read_blocks+0x18>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    3988:	2100      	movs	r1, #0
    398a:	4807      	ldr	r0, [pc, #28]	; (39a8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    398c:	4b07      	ldr	r3, [pc, #28]	; (39ac <sd_mmc_wait_end_of_read_blocks+0x88>)
    398e:	58e3      	ldr	r3, [r4, r3]
    3990:	9301      	str	r3, [sp, #4]
    3992:	4798      	blx	r3
    3994:	e7e7      	b.n	3966 <sd_mmc_wait_end_of_read_blocks+0x42>
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	0000f060 	.word	0x0000f060
    399c:	0000026c 	.word	0x0000026c
    39a0:	1fffcf68 	.word	0x1fffcf68
    39a4:	1fffcf64 	.word	0x1fffcf64
    39a8:	0000310c 	.word	0x0000310c
    39ac:	000003dc 	.word	0x000003dc
    39b0:	fffffda1 	.word	0xfffffda1
    39b4:	1fffcf3e 	.word	0x1fffcf3e
    39b8:	fffffd89 	.word	0xfffffd89

000039bc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    39bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39be:	b085      	sub	sp, #20
    39c0:	9003      	str	r0, [sp, #12]
    39c2:	000d      	movs	r5, r1
    39c4:	0016      	movs	r6, r2
    39c6:	4f1d      	ldr	r7, [pc, #116]	; (3a3c <sd_mmc_init_write_blocks+0x80>)
    39c8:	447f      	add	r7, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    39ca:	4b1d      	ldr	r3, [pc, #116]	; (3a40 <sd_mmc_init_write_blocks+0x84>)
    39cc:	447b      	add	r3, pc
    39ce:	4798      	blx	r3
    39d0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    39d2:	d002      	beq.n	39da <sd_mmc_init_write_blocks+0x1e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    39d4:	0020      	movs	r0, r4
    39d6:	b005      	add	sp, #20
    39d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (sd_mmc_is_write_protected(slot)) {
    39da:	9803      	ldr	r0, [sp, #12]
    39dc:	4b19      	ldr	r3, [pc, #100]	; (3a44 <sd_mmc_init_write_blocks+0x88>)
    39de:	58fb      	ldr	r3, [r7, r3]
    39e0:	9303      	str	r3, [sp, #12]
    39e2:	4798      	blx	r3
    39e4:	2800      	cmp	r0, #0
    39e6:	d11c      	bne.n	3a22 <sd_mmc_init_write_blocks+0x66>
	if (nb_block > 1) {
    39e8:	2e01      	cmp	r6, #1
    39ea:	d91f      	bls.n	3a2c <sd_mmc_init_write_blocks+0x70>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    39ec:	4816      	ldr	r0, [pc, #88]	; (3a48 <sd_mmc_init_write_blocks+0x8c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    39ee:	4b17      	ldr	r3, [pc, #92]	; (3a4c <sd_mmc_init_write_blocks+0x90>)
    39f0:	447b      	add	r3, pc
    39f2:	681b      	ldr	r3, [r3, #0]
    39f4:	7adb      	ldrb	r3, [r3, #11]
    39f6:	071b      	lsls	r3, r3, #28
    39f8:	d400      	bmi.n	39fc <sd_mmc_init_write_blocks+0x40>
		arg = (start * SD_MMC_BLOCK_SIZE);
    39fa:	026d      	lsls	r5, r5, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    39fc:	2301      	movs	r3, #1
    39fe:	9300      	str	r3, [sp, #0]
    3a00:	0033      	movs	r3, r6
    3a02:	2280      	movs	r2, #128	; 0x80
    3a04:	0092      	lsls	r2, r2, #2
    3a06:	0029      	movs	r1, r5
    3a08:	4d11      	ldr	r5, [pc, #68]	; (3a50 <sd_mmc_init_write_blocks+0x94>)
    3a0a:	597d      	ldr	r5, [r7, r5]
    3a0c:	9503      	str	r5, [sp, #12]
    3a0e:	47a8      	blx	r5
    3a10:	2800      	cmp	r0, #0
    3a12:	d00d      	beq.n	3a30 <sd_mmc_init_write_blocks+0x74>
	sd_mmc_nb_block_remaining = nb_block;
    3a14:	4b0f      	ldr	r3, [pc, #60]	; (3a54 <sd_mmc_init_write_blocks+0x98>)
    3a16:	447b      	add	r3, pc
    3a18:	801e      	strh	r6, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    3a1a:	4b0f      	ldr	r3, [pc, #60]	; (3a58 <sd_mmc_init_write_blocks+0x9c>)
    3a1c:	447b      	add	r3, pc
    3a1e:	801e      	strh	r6, [r3, #0]
	return SD_MMC_OK;
    3a20:	e7d8      	b.n	39d4 <sd_mmc_init_write_blocks+0x18>
		sd_mmc_deselect_slot();
    3a22:	4b0e      	ldr	r3, [pc, #56]	; (3a5c <sd_mmc_init_write_blocks+0xa0>)
    3a24:	447b      	add	r3, pc
    3a26:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    3a28:	3407      	adds	r4, #7
    3a2a:	e7d3      	b.n	39d4 <sd_mmc_init_write_blocks+0x18>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    3a2c:	480c      	ldr	r0, [pc, #48]	; (3a60 <sd_mmc_init_write_blocks+0xa4>)
    3a2e:	e7de      	b.n	39ee <sd_mmc_init_write_blocks+0x32>
		sd_mmc_deselect_slot();
    3a30:	4b0c      	ldr	r3, [pc, #48]	; (3a64 <sd_mmc_init_write_blocks+0xa8>)
    3a32:	447b      	add	r3, pc
    3a34:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    3a36:	2405      	movs	r4, #5
    3a38:	e7cc      	b.n	39d4 <sd_mmc_init_write_blocks+0x18>
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	0000efc4 	.word	0x0000efc4
    3a40:	fffff6bd 	.word	0xfffff6bd
    3a44:	00000210 	.word	0x00000210
    3a48:	00109119 	.word	0x00109119
    3a4c:	1fffce9c 	.word	0x1fffce9c
    3a50:	000001e4 	.word	0x000001e4
    3a54:	1fffce9a 	.word	0x1fffce9a
    3a58:	1fffce96 	.word	0x1fffce96
    3a5c:	fffffce5 	.word	0xfffffce5
    3a60:	00089118 	.word	0x00089118
    3a64:	fffffcd7 	.word	0xfffffcd7

00003a68 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    3a68:	b510      	push	{r4, lr}
    3a6a:	b082      	sub	sp, #8
    3a6c:	000c      	movs	r4, r1
    3a6e:	4b0b      	ldr	r3, [pc, #44]	; (3a9c <sd_mmc_start_write_blocks+0x34>)
    3a70:	447b      	add	r3, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    3a72:	4a0b      	ldr	r2, [pc, #44]	; (3aa0 <sd_mmc_start_write_blocks+0x38>)
    3a74:	589b      	ldr	r3, [r3, r2]
    3a76:	9301      	str	r3, [sp, #4]
    3a78:	4798      	blx	r3
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d106      	bne.n	3a8c <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
    3a7e:	2200      	movs	r2, #0
    3a80:	4b08      	ldr	r3, [pc, #32]	; (3aa4 <sd_mmc_start_write_blocks+0x3c>)
    3a82:	447b      	add	r3, pc
    3a84:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    3a86:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    3a88:	b002      	add	sp, #8
    3a8a:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    3a8c:	4a06      	ldr	r2, [pc, #24]	; (3aa8 <sd_mmc_start_write_blocks+0x40>)
    3a8e:	447a      	add	r2, pc
    3a90:	8813      	ldrh	r3, [r2, #0]
    3a92:	1b1c      	subs	r4, r3, r4
    3a94:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    3a96:	2000      	movs	r0, #0
    3a98:	e7f6      	b.n	3a88 <sd_mmc_start_write_blocks+0x20>
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	0000ef1c 	.word	0x0000ef1c
    3aa0:	000002f8 	.word	0x000002f8
    3aa4:	1fffce2e 	.word	0x1fffce2e
    3aa8:	1fffce22 	.word	0x1fffce22

00003aac <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    3aac:	b510      	push	{r4, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	0004      	movs	r4, r0
    3ab2:	4b13      	ldr	r3, [pc, #76]	; (3b00 <sd_mmc_wait_end_of_write_blocks+0x54>)
    3ab4:	447b      	add	r3, pc
	if (!driver_wait_end_of_write_blocks()) {
    3ab6:	4a13      	ldr	r2, [pc, #76]	; (3b04 <sd_mmc_wait_end_of_write_blocks+0x58>)
    3ab8:	589b      	ldr	r3, [r3, r2]
    3aba:	9301      	str	r3, [sp, #4]
    3abc:	4798      	blx	r3
    3abe:	2800      	cmp	r0, #0
    3ac0:	d102      	bne.n	3ac8 <sd_mmc_wait_end_of_write_blocks+0x1c>
		return SD_MMC_ERR_COMM;
    3ac2:	2005      	movs	r0, #5
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    3ac4:	b002      	add	sp, #8
    3ac6:	bd10      	pop	{r4, pc}
	if (abort) {
    3ac8:	2c00      	cmp	r4, #0
    3aca:	d00d      	beq.n	3ae8 <sd_mmc_wait_end_of_write_blocks+0x3c>
		sd_mmc_nb_block_remaining = 0;
    3acc:	2200      	movs	r2, #0
    3ace:	4b0e      	ldr	r3, [pc, #56]	; (3b08 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    3ad0:	447b      	add	r3, pc
    3ad2:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    3ad4:	4b0d      	ldr	r3, [pc, #52]	; (3b0c <sd_mmc_wait_end_of_write_blocks+0x60>)
    3ad6:	447b      	add	r3, pc
    3ad8:	881b      	ldrh	r3, [r3, #0]
    3ada:	2b01      	cmp	r3, #1
    3adc:	d00b      	beq.n	3af6 <sd_mmc_wait_end_of_write_blocks+0x4a>
	sd_mmc_deselect_slot();
    3ade:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <sd_mmc_wait_end_of_write_blocks+0x64>)
    3ae0:	447b      	add	r3, pc
    3ae2:	4798      	blx	r3
	return SD_MMC_OK;
    3ae4:	2000      	movs	r0, #0
    3ae6:	e7ed      	b.n	3ac4 <sd_mmc_wait_end_of_write_blocks+0x18>
	} else if (sd_mmc_nb_block_remaining) {
    3ae8:	4b0a      	ldr	r3, [pc, #40]	; (3b14 <sd_mmc_wait_end_of_write_blocks+0x68>)
    3aea:	447b      	add	r3, pc
    3aec:	881b      	ldrh	r3, [r3, #0]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d0f0      	beq.n	3ad4 <sd_mmc_wait_end_of_write_blocks+0x28>
		return SD_MMC_OK;
    3af2:	2000      	movs	r0, #0
    3af4:	e7e6      	b.n	3ac4 <sd_mmc_wait_end_of_write_blocks+0x18>
		sd_mmc_deselect_slot();
    3af6:	4b08      	ldr	r3, [pc, #32]	; (3b18 <sd_mmc_wait_end_of_write_blocks+0x6c>)
    3af8:	447b      	add	r3, pc
    3afa:	4798      	blx	r3
		return SD_MMC_OK;
    3afc:	2000      	movs	r0, #0
    3afe:	e7e1      	b.n	3ac4 <sd_mmc_wait_end_of_write_blocks+0x18>
    3b00:	0000eed8 	.word	0x0000eed8
    3b04:	00000384 	.word	0x00000384
    3b08:	1fffcde0 	.word	0x1fffcde0
    3b0c:	1fffcddc 	.word	0x1fffcddc
    3b10:	fffffc29 	.word	0xfffffc29
    3b14:	1fffcdc6 	.word	0x1fffcdc6
    3b18:	fffffc11 	.word	0xfffffc11

00003b1c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    3b1c:	b530      	push	{r4, r5, lr}
	uint8_t crc, value, i;

	crc = 0;
    3b1e:	2300      	movs	r3, #0
	while (size--) {
    3b20:	e011      	b.n	3b46 <sd_mmc_spi_crc7+0x2a>
		for (i = 0; i < 8; i++) {
			crc <<= 1;
			if ((value & 0x80) ^ (crc & 0x80)) {
				crc ^= 0x09;
			}
			value <<= 1;
    3b22:	0049      	lsls	r1, r1, #1
    3b24:	b2c9      	uxtb	r1, r1
		for (i = 0; i < 8; i++) {
    3b26:	3201      	adds	r2, #1
    3b28:	b2d2      	uxtb	r2, r2
    3b2a:	2a07      	cmp	r2, #7
    3b2c:	d809      	bhi.n	3b42 <sd_mmc_spi_crc7+0x26>
			crc <<= 1;
    3b2e:	005b      	lsls	r3, r3, #1
    3b30:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    3b32:	0008      	movs	r0, r1
    3b34:	4058      	eors	r0, r3
    3b36:	0600      	lsls	r0, r0, #24
    3b38:	d5f3      	bpl.n	3b22 <sd_mmc_spi_crc7+0x6>
				crc ^= 0x09;
    3b3a:	2009      	movs	r0, #9
    3b3c:	4043      	eors	r3, r0
    3b3e:	b2db      	uxtb	r3, r3
    3b40:	e7ef      	b.n	3b22 <sd_mmc_spi_crc7+0x6>
	while (size--) {
    3b42:	0021      	movs	r1, r4
		value = *buf++;
    3b44:	0028      	movs	r0, r5
	while (size--) {
    3b46:	1e4c      	subs	r4, r1, #1
    3b48:	b2e4      	uxtb	r4, r4
    3b4a:	2900      	cmp	r1, #0
    3b4c:	d003      	beq.n	3b56 <sd_mmc_spi_crc7+0x3a>
		value = *buf++;
    3b4e:	1c45      	adds	r5, r0, #1
    3b50:	7801      	ldrb	r1, [r0, #0]
		for (i = 0; i < 8; i++) {
    3b52:	2200      	movs	r2, #0
    3b54:	e7e9      	b.n	3b2a <sd_mmc_spi_crc7+0xe>
		}
	}
	crc = (crc << 1) | 1;
    3b56:	005b      	lsls	r3, r3, #1
    3b58:	2001      	movs	r0, #1
    3b5a:	4318      	orrs	r0, r3
    3b5c:	b2c0      	uxtb	r0, r0
	return crc;
}
    3b5e:	bd30      	pop	{r4, r5, pc}

00003b60 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    3b60:	b510      	push	{r4, lr}
    3b62:	b084      	sub	sp, #16
    3b64:	4c11      	ldr	r4, [pc, #68]	; (3bac <sd_mmc_spi_start_write_block+0x4c>)
    3b66:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    3b68:	23ff      	movs	r3, #255	; 0xff
    3b6a:	aa02      	add	r2, sp, #8
    3b6c:	1dd1      	adds	r1, r2, #7
    3b6e:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    3b70:	2201      	movs	r2, #1
    3b72:	480f      	ldr	r0, [pc, #60]	; (3bb0 <sd_mmc_spi_start_write_block+0x50>)
    3b74:	4478      	add	r0, pc
    3b76:	4b0f      	ldr	r3, [pc, #60]	; (3bb4 <sd_mmc_spi_start_write_block+0x54>)
    3b78:	58e3      	ldr	r3, [r4, r3]
    3b7a:	9301      	str	r3, [sp, #4]
    3b7c:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    3b7e:	4b0e      	ldr	r3, [pc, #56]	; (3bb8 <sd_mmc_spi_start_write_block+0x58>)
    3b80:	447b      	add	r3, pc
    3b82:	881b      	ldrh	r3, [r3, #0]
    3b84:	2b01      	cmp	r3, #1
    3b86:	d00d      	beq.n	3ba4 <sd_mmc_spi_start_write_block+0x44>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    3b88:	22fc      	movs	r2, #252	; 0xfc
    3b8a:	ab02      	add	r3, sp, #8
    3b8c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    3b8e:	2201      	movs	r2, #1
    3b90:	ab02      	add	r3, sp, #8
    3b92:	1d99      	adds	r1, r3, #6
    3b94:	4809      	ldr	r0, [pc, #36]	; (3bbc <sd_mmc_spi_start_write_block+0x5c>)
    3b96:	4478      	add	r0, pc
    3b98:	4b06      	ldr	r3, [pc, #24]	; (3bb4 <sd_mmc_spi_start_write_block+0x54>)
    3b9a:	58e3      	ldr	r3, [r4, r3]
    3b9c:	9301      	str	r3, [sp, #4]
    3b9e:	4798      	blx	r3
}
    3ba0:	b004      	add	sp, #16
    3ba2:	bd10      	pop	{r4, pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    3ba4:	22fe      	movs	r2, #254	; 0xfe
    3ba6:	ab02      	add	r3, sp, #8
    3ba8:	719a      	strb	r2, [r3, #6]
    3baa:	e7f0      	b.n	3b8e <sd_mmc_spi_start_write_block+0x2e>
    3bac:	0000ee26 	.word	0x0000ee26
    3bb0:	1fffcd44 	.word	0x1fffcd44
    3bb4:	000004ac 	.word	0x000004ac
    3bb8:	1fffcd7c 	.word	0x1fffcd7c
    3bbc:	1fffcd22 	.word	0x1fffcd22

00003bc0 <sd_mmc_spi_wait_busy>:
{
    3bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bc2:	b085      	sub	sp, #20
    3bc4:	4e15      	ldr	r6, [pc, #84]	; (3c1c <sd_mmc_spi_wait_busy+0x5c>)
    3bc6:	447e      	add	r6, pc
	uint8_t line = 0xFF;
    3bc8:	23ff      	movs	r3, #255	; 0xff
    3bca:	aa02      	add	r2, sp, #8
    3bcc:	1dd4      	adds	r4, r2, #7
    3bce:	71d3      	strb	r3, [r2, #7]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3bd0:	4d13      	ldr	r5, [pc, #76]	; (3c20 <sd_mmc_spi_wait_busy+0x60>)
    3bd2:	447d      	add	r5, pc
    3bd4:	2201      	movs	r2, #1
    3bd6:	0021      	movs	r1, r4
    3bd8:	0028      	movs	r0, r5
    3bda:	4f12      	ldr	r7, [pc, #72]	; (3c24 <sd_mmc_spi_wait_busy+0x64>)
    3bdc:	59f7      	ldr	r7, [r6, r7]
    3bde:	47b8      	blx	r7
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3be0:	23ff      	movs	r3, #255	; 0xff
    3be2:	2201      	movs	r2, #1
    3be4:	0021      	movs	r1, r4
    3be6:	0028      	movs	r0, r5
    3be8:	47b8      	blx	r7
	uint32_t nec_timeout = 200000;
    3bea:	4c0f      	ldr	r4, [pc, #60]	; (3c28 <sd_mmc_spi_wait_busy+0x68>)
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3bec:	23ff      	movs	r3, #255	; 0xff
    3bee:	2201      	movs	r2, #1
    3bf0:	a902      	add	r1, sp, #8
    3bf2:	3107      	adds	r1, #7
    3bf4:	480d      	ldr	r0, [pc, #52]	; (3c2c <sd_mmc_spi_wait_busy+0x6c>)
    3bf6:	4478      	add	r0, pc
    3bf8:	4d0a      	ldr	r5, [pc, #40]	; (3c24 <sd_mmc_spi_wait_busy+0x64>)
    3bfa:	5975      	ldr	r5, [r6, r5]
    3bfc:	9501      	str	r5, [sp, #4]
    3bfe:	47a8      	blx	r5
		if (!(nec_timeout--)) {
    3c00:	1e63      	subs	r3, r4, #1
    3c02:	2c00      	cmp	r4, #0
    3c04:	d008      	beq.n	3c18 <sd_mmc_spi_wait_busy+0x58>
	} while (line != 0xFF);
    3c06:	aa02      	add	r2, sp, #8
    3c08:	3207      	adds	r2, #7
    3c0a:	7812      	ldrb	r2, [r2, #0]
		if (!(nec_timeout--)) {
    3c0c:	001c      	movs	r4, r3
	} while (line != 0xFF);
    3c0e:	2aff      	cmp	r2, #255	; 0xff
    3c10:	d1ec      	bne.n	3bec <sd_mmc_spi_wait_busy+0x2c>
	return true;
    3c12:	2001      	movs	r0, #1
}
    3c14:	b005      	add	sp, #20
    3c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
    3c18:	2000      	movs	r0, #0
    3c1a:	e7fb      	b.n	3c14 <sd_mmc_spi_wait_busy+0x54>
    3c1c:	0000edc6 	.word	0x0000edc6
    3c20:	1fffcce6 	.word	0x1fffcce6
    3c24:	00000314 	.word	0x00000314
    3c28:	00030d40 	.word	0x00030d40
    3c2c:	1fffccc2 	.word	0x1fffccc2

00003c30 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	b084      	sub	sp, #16
    3c34:	4c1a      	ldr	r4, [pc, #104]	; (3ca0 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    3c36:	447c      	add	r4, pc
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    3c38:	4b1a      	ldr	r3, [pc, #104]	; (3ca4 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    3c3a:	447b      	add	r3, pc
    3c3c:	881d      	ldrh	r5, [r3, #0]
    3c3e:	2d01      	cmp	r5, #1
    3c40:	d02b      	beq.n	3c9a <sd_mmc_spi_stop_multiwrite_block+0x6a>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    3c42:	4b19      	ldr	r3, [pc, #100]	; (3ca8 <sd_mmc_spi_stop_multiwrite_block+0x78>)
    3c44:	447b      	add	r3, pc
    3c46:	8819      	ldrh	r1, [r3, #0]
    3c48:	4b18      	ldr	r3, [pc, #96]	; (3cac <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    3c4a:	58e3      	ldr	r3, [r4, r3]
    3c4c:	9301      	str	r3, [sp, #4]
    3c4e:	4b18      	ldr	r3, [pc, #96]	; (3cb0 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    3c50:	447b      	add	r3, pc
    3c52:	6818      	ldr	r0, [r3, #0]
    3c54:	9b01      	ldr	r3, [sp, #4]
    3c56:	4798      	blx	r3
	if (sd_mmc_spi_nb_block >
    3c58:	4285      	cmp	r5, r0
    3c5a:	d902      	bls.n	3c62 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    3c5c:	2001      	movs	r0, #1
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    3c5e:	b004      	add	sp, #16
    3c60:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    3c62:	23ff      	movs	r3, #255	; 0xff
    3c64:	aa02      	add	r2, sp, #8
    3c66:	1dd5      	adds	r5, r2, #7
    3c68:	71d3      	strb	r3, [r2, #7]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    3c6a:	4e12      	ldr	r6, [pc, #72]	; (3cb4 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    3c6c:	447e      	add	r6, pc
    3c6e:	2201      	movs	r2, #1
    3c70:	0029      	movs	r1, r5
    3c72:	0030      	movs	r0, r6
    3c74:	4b10      	ldr	r3, [pc, #64]	; (3cb8 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    3c76:	58e4      	ldr	r4, [r4, r3]
    3c78:	47a0      	blx	r4
	value = SPI_TOKEN_STOP_TRAN;
    3c7a:	23fd      	movs	r3, #253	; 0xfd
    3c7c:	702b      	strb	r3, [r5, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    3c7e:	2201      	movs	r2, #1
    3c80:	0029      	movs	r1, r5
    3c82:	0030      	movs	r0, r6
    3c84:	47a0      	blx	r4
	if (!sd_mmc_spi_wait_busy()) {
    3c86:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    3c88:	447b      	add	r3, pc
    3c8a:	4798      	blx	r3
    3c8c:	2800      	cmp	r0, #0
    3c8e:	d1e6      	bne.n	3c5e <sd_mmc_spi_stop_multiwrite_block+0x2e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3c90:	2205      	movs	r2, #5
    3c92:	4b0b      	ldr	r3, [pc, #44]	; (3cc0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    3c94:	447b      	add	r3, pc
    3c96:	701a      	strb	r2, [r3, #0]
		return false;
    3c98:	e7e1      	b.n	3c5e <sd_mmc_spi_stop_multiwrite_block+0x2e>
		return true; // Single block write
    3c9a:	2001      	movs	r0, #1
    3c9c:	e7df      	b.n	3c5e <sd_mmc_spi_stop_multiwrite_block+0x2e>
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	0000ed56 	.word	0x0000ed56
    3ca4:	1fffccc2 	.word	0x1fffccc2
    3ca8:	1fffccb0 	.word	0x1fffccb0
    3cac:	00000340 	.word	0x00000340
    3cb0:	1fffccb4 	.word	0x1fffccb4
    3cb4:	1fffcc4c 	.word	0x1fffcc4c
    3cb8:	000004ac 	.word	0x000004ac
    3cbc:	ffffff35 	.word	0xffffff35
    3cc0:	1fffcc67 	.word	0x1fffcc67

00003cc4 <sd_mmc_spi_start_read_block>:
{
    3cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cc6:	b085      	sub	sp, #20
    3cc8:	4f19      	ldr	r7, [pc, #100]	; (3d30 <sd_mmc_spi_start_read_block+0x6c>)
    3cca:	447f      	add	r7, pc
	token = 0;
    3ccc:	2200      	movs	r2, #0
    3cce:	ab02      	add	r3, sp, #8
    3cd0:	71da      	strb	r2, [r3, #7]
	i = 500000;
    3cd2:	4b18      	ldr	r3, [pc, #96]	; (3d34 <sd_mmc_spi_start_read_block+0x70>)
		if (i-- == 0) {
    3cd4:	1e5e      	subs	r6, r3, #1
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d015      	beq.n	3d06 <sd_mmc_spi_start_read_block+0x42>
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    3cda:	23ff      	movs	r3, #255	; 0xff
    3cdc:	2201      	movs	r2, #1
    3cde:	a902      	add	r1, sp, #8
    3ce0:	1dcc      	adds	r4, r1, #7
    3ce2:	0021      	movs	r1, r4
    3ce4:	4814      	ldr	r0, [pc, #80]	; (3d38 <sd_mmc_spi_start_read_block+0x74>)
    3ce6:	4478      	add	r0, pc
    3ce8:	4d14      	ldr	r5, [pc, #80]	; (3d3c <sd_mmc_spi_start_read_block+0x78>)
    3cea:	597d      	ldr	r5, [r7, r5]
    3cec:	9501      	str	r5, [sp, #4]
    3cee:	47a8      	blx	r5
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    3cf0:	7822      	ldrb	r2, [r4, #0]
    3cf2:	230f      	movs	r3, #15
    3cf4:	0011      	movs	r1, r2
    3cf6:	4399      	bics	r1, r3
    3cf8:	d00b      	beq.n	3d12 <sd_mmc_spi_start_read_block+0x4e>
		if (i-- == 0) {
    3cfa:	0033      	movs	r3, r6
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    3cfc:	2afe      	cmp	r2, #254	; 0xfe
    3cfe:	d1e9      	bne.n	3cd4 <sd_mmc_spi_start_read_block+0x10>
	return true;
    3d00:	2001      	movs	r0, #1
}
    3d02:	b005      	add	sp, #20
    3d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    3d06:	2204      	movs	r2, #4
    3d08:	4b0d      	ldr	r3, [pc, #52]	; (3d40 <sd_mmc_spi_start_read_block+0x7c>)
    3d0a:	447b      	add	r3, pc
    3d0c:	701a      	strb	r2, [r3, #0]
			return false;
    3d0e:	2000      	movs	r0, #0
    3d10:	e7f7      	b.n	3d02 <sd_mmc_spi_start_read_block+0x3e>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    3d12:	0753      	lsls	r3, r2, #29
    3d14:	d005      	beq.n	3d22 <sd_mmc_spi_start_read_block+0x5e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    3d16:	2207      	movs	r2, #7
    3d18:	4b0a      	ldr	r3, [pc, #40]	; (3d44 <sd_mmc_spi_start_read_block+0x80>)
    3d1a:	447b      	add	r3, pc
    3d1c:	701a      	strb	r2, [r3, #0]
			return false;
    3d1e:	2000      	movs	r0, #0
    3d20:	e7ef      	b.n	3d02 <sd_mmc_spi_start_read_block+0x3e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    3d22:	220b      	movs	r2, #11
    3d24:	4b08      	ldr	r3, [pc, #32]	; (3d48 <sd_mmc_spi_start_read_block+0x84>)
    3d26:	447b      	add	r3, pc
    3d28:	701a      	strb	r2, [r3, #0]
			return false;
    3d2a:	2000      	movs	r0, #0
    3d2c:	e7e9      	b.n	3d02 <sd_mmc_spi_start_read_block+0x3e>
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	0000ecc2 	.word	0x0000ecc2
    3d34:	0007a120 	.word	0x0007a120
    3d38:	1fffcbd2 	.word	0x1fffcbd2
    3d3c:	00000314 	.word	0x00000314
    3d40:	1fffcbf1 	.word	0x1fffcbf1
    3d44:	1fffcbe1 	.word	0x1fffcbe1
    3d48:	1fffcbd5 	.word	0x1fffcbd5

00003d4c <sd_mmc_spi_stop_read_block>:
{
    3d4c:	b530      	push	{r4, r5, lr}
    3d4e:	b085      	sub	sp, #20
    3d50:	4c06      	ldr	r4, [pc, #24]	; (3d6c <sd_mmc_spi_stop_read_block+0x20>)
    3d52:	447c      	add	r4, pc
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    3d54:	23ff      	movs	r3, #255	; 0xff
    3d56:	2202      	movs	r2, #2
    3d58:	a903      	add	r1, sp, #12
    3d5a:	4805      	ldr	r0, [pc, #20]	; (3d70 <sd_mmc_spi_stop_read_block+0x24>)
    3d5c:	4478      	add	r0, pc
    3d5e:	4d05      	ldr	r5, [pc, #20]	; (3d74 <sd_mmc_spi_stop_read_block+0x28>)
    3d60:	5964      	ldr	r4, [r4, r5]
    3d62:	9401      	str	r4, [sp, #4]
    3d64:	47a0      	blx	r4
}
    3d66:	b005      	add	sp, #20
    3d68:	bd30      	pop	{r4, r5, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	0000ec3a 	.word	0x0000ec3a
    3d70:	1fffcb5c 	.word	0x1fffcb5c
    3d74:	00000314 	.word	0x00000314

00003d78 <sd_mmc_spi_stop_write_block>:
{
    3d78:	b570      	push	{r4, r5, r6, lr}
    3d7a:	b084      	sub	sp, #16
    3d7c:	4e1b      	ldr	r6, [pc, #108]	; (3dec <sd_mmc_spi_stop_write_block+0x74>)
    3d7e:	447e      	add	r6, pc
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    3d80:	2301      	movs	r3, #1
    3d82:	425b      	negs	r3, r3
    3d84:	a903      	add	r1, sp, #12
    3d86:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    3d88:	4d19      	ldr	r5, [pc, #100]	; (3df0 <sd_mmc_spi_stop_write_block+0x78>)
    3d8a:	447d      	add	r5, pc
    3d8c:	2202      	movs	r2, #2
    3d8e:	0028      	movs	r0, r5
    3d90:	4b18      	ldr	r3, [pc, #96]	; (3df4 <sd_mmc_spi_stop_write_block+0x7c>)
    3d92:	58f3      	ldr	r3, [r6, r3]
    3d94:	9301      	str	r3, [sp, #4]
    3d96:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    3d98:	23ff      	movs	r3, #255	; 0xff
    3d9a:	2201      	movs	r2, #1
    3d9c:	a902      	add	r1, sp, #8
    3d9e:	1dcc      	adds	r4, r1, #7
    3da0:	0021      	movs	r1, r4
    3da2:	0028      	movs	r0, r5
    3da4:	4d14      	ldr	r5, [pc, #80]	; (3df8 <sd_mmc_spi_stop_write_block+0x80>)
    3da6:	5975      	ldr	r5, [r6, r5]
    3da8:	9501      	str	r5, [sp, #4]
    3daa:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    3dac:	7822      	ldrb	r2, [r4, #0]
    3dae:	2311      	movs	r3, #17
    3db0:	4013      	ands	r3, r2
    3db2:	2b01      	cmp	r3, #1
    3db4:	d006      	beq.n	3dc4 <sd_mmc_spi_stop_write_block+0x4c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    3db6:	2201      	movs	r2, #1
    3db8:	4b10      	ldr	r3, [pc, #64]	; (3dfc <sd_mmc_spi_stop_write_block+0x84>)
    3dba:	447b      	add	r3, pc
    3dbc:	701a      	strb	r2, [r3, #0]
		return false;
    3dbe:	2000      	movs	r0, #0
}
    3dc0:	b004      	add	sp, #16
    3dc2:	bd70      	pop	{r4, r5, r6, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    3dc4:	231e      	movs	r3, #30
    3dc6:	401a      	ands	r2, r3
    3dc8:	2a04      	cmp	r2, #4
    3dca:	d00d      	beq.n	3de8 <sd_mmc_spi_stop_write_block+0x70>
    3dcc:	2a0a      	cmp	r2, #10
    3dce:	d105      	bne.n	3ddc <sd_mmc_spi_stop_write_block+0x64>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    3dd0:	3a02      	subs	r2, #2
    3dd2:	4b0b      	ldr	r3, [pc, #44]	; (3e00 <sd_mmc_spi_stop_write_block+0x88>)
    3dd4:	447b      	add	r3, pc
    3dd6:	701a      	strb	r2, [r3, #0]
		return false;
    3dd8:	2000      	movs	r0, #0
    3dda:	e7f1      	b.n	3dc0 <sd_mmc_spi_stop_write_block+0x48>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    3ddc:	220a      	movs	r2, #10
    3dde:	4b09      	ldr	r3, [pc, #36]	; (3e04 <sd_mmc_spi_stop_write_block+0x8c>)
    3de0:	447b      	add	r3, pc
    3de2:	701a      	strb	r2, [r3, #0]
		return false;
    3de4:	2000      	movs	r0, #0
    3de6:	e7eb      	b.n	3dc0 <sd_mmc_spi_stop_write_block+0x48>
	return true;
    3de8:	2001      	movs	r0, #1
    3dea:	e7e9      	b.n	3dc0 <sd_mmc_spi_stop_write_block+0x48>
    3dec:	0000ec0e 	.word	0x0000ec0e
    3df0:	1fffcb2e 	.word	0x1fffcb2e
    3df4:	000004ac 	.word	0x000004ac
    3df8:	00000314 	.word	0x00000314
    3dfc:	1fffcb41 	.word	0x1fffcb41
    3e00:	1fffcb27 	.word	0x1fffcb27
    3e04:	1fffcb1b 	.word	0x1fffcb1b

00003e08 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    3e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e0a:	46c6      	mov	lr, r8
    3e0c:	b500      	push	{lr}
    3e0e:	b092      	sub	sp, #72	; 0x48
    3e10:	4e3b      	ldr	r6, [pc, #236]	; (3f00 <sd_mmc_spi_init+0xf8>)
    3e12:	447e      	add	r6, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3e14:	2500      	movs	r5, #0
    3e16:	4b3b      	ldr	r3, [pc, #236]	; (3f04 <sd_mmc_spi_init+0xfc>)
    3e18:	447b      	add	r3, pc
    3e1a:	701d      	strb	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3e1c:	2701      	movs	r7, #1
    3e1e:	ac04      	add	r4, sp, #16
    3e20:	7027      	strb	r7, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3e22:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3e24:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3e26:	23c0      	movs	r3, #192	; 0xc0
    3e28:	039b      	lsls	r3, r3, #14
    3e2a:	60e3      	str	r3, [r4, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3e2c:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    3e2e:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    3e30:	74a7      	strb	r7, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3e32:	74e7      	strb	r7, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3e34:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3e36:	2324      	movs	r3, #36	; 0x24
    3e38:	4698      	mov	r8, r3
    3e3a:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3e3c:	220c      	movs	r2, #12
    3e3e:	2100      	movs	r1, #0
    3e40:	a80a      	add	r0, sp, #40	; 0x28
    3e42:	4b31      	ldr	r3, [pc, #196]	; (3f08 <sd_mmc_spi_init+0x100>)
    3e44:	58f3      	ldr	r3, [r6, r3]
    3e46:	9301      	str	r3, [sp, #4]
    3e48:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    3e4a:	2380      	movs	r3, #128	; 0x80
    3e4c:	029b      	lsls	r3, r3, #10
    3e4e:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    3e50:	4b2e      	ldr	r3, [pc, #184]	; (3f0c <sd_mmc_spi_init+0x104>)
    3e52:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    3e54:	4b2e      	ldr	r3, [pc, #184]	; (3f10 <sd_mmc_spi_init+0x108>)
    3e56:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    3e58:	4b2e      	ldr	r3, [pc, #184]	; (3f14 <sd_mmc_spi_init+0x10c>)
    3e5a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    3e5c:	4b2e      	ldr	r3, [pc, #184]	; (3f18 <sd_mmc_spi_init+0x110>)
    3e5e:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    3e60:	4643      	mov	r3, r8
    3e62:	54e5      	strb	r5, [r4, r3]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    3e64:	4b2d      	ldr	r3, [pc, #180]	; (3f1c <sd_mmc_spi_init+0x114>)
    3e66:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    3e68:	4b2d      	ldr	r3, [pc, #180]	; (3f20 <sd_mmc_spi_init+0x118>)
    3e6a:	447b      	add	r3, pc
    3e6c:	0022      	movs	r2, r4
    3e6e:	492d      	ldr	r1, [pc, #180]	; (3f24 <sd_mmc_spi_init+0x11c>)
    3e70:	001c      	movs	r4, r3
    3e72:	0018      	movs	r0, r3
    3e74:	4b2c      	ldr	r3, [pc, #176]	; (3f28 <sd_mmc_spi_init+0x120>)
    3e76:	58f3      	ldr	r3, [r6, r3]
    3e78:	9301      	str	r3, [sp, #4]
    3e7a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e7c:	6824      	ldr	r4, [r4, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e7e:	0020      	movs	r0, r4
    3e80:	4b2a      	ldr	r3, [pc, #168]	; (3f2c <sd_mmc_spi_init+0x124>)
    3e82:	58f3      	ldr	r3, [r6, r3]
    3e84:	9301      	str	r3, [sp, #4]
    3e86:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3e88:	231f      	movs	r3, #31
    3e8a:	4018      	ands	r0, r3
    3e8c:	4087      	lsls	r7, r0
    3e8e:	4b28      	ldr	r3, [pc, #160]	; (3f30 <sd_mmc_spi_init+0x128>)
    3e90:	601f      	str	r7, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e92:	4b28      	ldr	r3, [pc, #160]	; (3f34 <sd_mmc_spi_init+0x12c>)
    3e94:	447b      	add	r3, pc
    3e96:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3e98:	69db      	ldr	r3, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d1f9      	bne.n	3e92 <sd_mmc_spi_init+0x8a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e9e:	6823      	ldr	r3, [r4, #0]
    3ea0:	2202      	movs	r2, #2
    3ea2:	4313      	orrs	r3, r2
    3ea4:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    3ea6:	4a24      	ldr	r2, [pc, #144]	; (3f38 <sd_mmc_spi_init+0x130>)
    3ea8:	447a      	add	r2, pc
    3eaa:	2300      	movs	r3, #0
    3eac:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3eae:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    3eb0:	4922      	ldr	r1, [pc, #136]	; (3f3c <sd_mmc_spi_init+0x134>)
    3eb2:	5871      	ldr	r1, [r6, r1]
    3eb4:	9101      	str	r1, [sp, #4]
    3eb6:	7808      	ldrb	r0, [r1, #0]
    3eb8:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    3eba:	4c21      	ldr	r4, [pc, #132]	; (3f40 <sd_mmc_spi_init+0x138>)
    3ebc:	447c      	add	r4, pc
    3ebe:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3ec0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3ec2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3ec4:	2201      	movs	r2, #1
    3ec6:	a903      	add	r1, sp, #12
    3ec8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3eca:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3ecc:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3ece:	4b1d      	ldr	r3, [pc, #116]	; (3f44 <sd_mmc_spi_init+0x13c>)
    3ed0:	58f3      	ldr	r3, [r6, r3]
    3ed2:	9301      	str	r3, [sp, #4]
    3ed4:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3ed6:	7822      	ldrb	r2, [r4, #0]
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    3ed8:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    3eda:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3edc:	2900      	cmp	r1, #0
    3ede:	d10c      	bne.n	3efa <sd_mmc_spi_init+0xf2>
		return &(ports[port_index]->Group[group_index]);
    3ee0:	01db      	lsls	r3, r3, #7
    3ee2:	4919      	ldr	r1, [pc, #100]	; (3f48 <sd_mmc_spi_init+0x140>)
    3ee4:	468c      	mov	ip, r1
    3ee6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3ee8:	211f      	movs	r1, #31
    3eea:	4011      	ands	r1, r2
    3eec:	2201      	movs	r2, #1
    3eee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3ef0:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    3ef2:	b012      	add	sp, #72	; 0x48
    3ef4:	bc04      	pop	{r2}
    3ef6:	4690      	mov	r8, r2
    3ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else {
		Assert(false);
		return NULL;
    3efa:	2300      	movs	r3, #0
    3efc:	e7f4      	b.n	3ee8 <sd_mmc_spi_init+0xe0>
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	0000eb7a 	.word	0x0000eb7a
    3f04:	1fffcae3 	.word	0x1fffcae3
    3f08:	00000328 	.word	0x00000328
    3f0c:	00100002 	.word	0x00100002
    3f10:	00110002 	.word	0x00110002
    3f14:	00120002 	.word	0x00120002
    3f18:	00130002 	.word	0x00130002
    3f1c:	00061a80 	.word	0x00061a80
    3f20:	1fffca4e 	.word	0x1fffca4e
    3f24:	42000c00 	.word	0x42000c00
    3f28:	00000120 	.word	0x00000120
    3f2c:	00000104 	.word	0x00000104
    3f30:	e000e100 	.word	0xe000e100
    3f34:	1fffca24 	.word	0x1fffca24
    3f38:	1fffca60 	.word	0x1fffca60
    3f3c:	00000304 	.word	0x00000304
    3f40:	1fffca3c 	.word	0x1fffca3c
    3f44:	00000390 	.word	0x00000390
    3f48:	41004400 	.word	0x41004400

00003f4c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    3f4c:	b570      	push	{r4, r5, r6, lr}
    3f4e:	b082      	sub	sp, #8
    3f50:	0006      	movs	r6, r0
    3f52:	000c      	movs	r4, r1
    3f54:	4d11      	ldr	r5, [pc, #68]	; (3f9c <sd_mmc_spi_select_device+0x50>)
    3f56:	447d      	add	r5, pc
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3f58:	2200      	movs	r2, #0
    3f5a:	4b11      	ldr	r3, [pc, #68]	; (3fa0 <sd_mmc_spi_select_device+0x54>)
    3f5c:	447b      	add	r3, pc
    3f5e:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    3f60:	4b10      	ldr	r3, [pc, #64]	; (3fa4 <sd_mmc_spi_select_device+0x58>)
    3f62:	4299      	cmp	r1, r3
    3f64:	d903      	bls.n	3f6e <sd_mmc_spi_select_device+0x22>
		clock = SD_MMC_SPI_MAX_CLOCK;
    3f66:	001c      	movs	r4, r3
    3f68:	e001      	b.n	3f6e <sd_mmc_spi_select_device+0x22>
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
		clock -= clock / 8;
    3f6a:	08e3      	lsrs	r3, r4, #3
    3f6c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    3f6e:	0021      	movs	r1, r4
    3f70:	480d      	ldr	r0, [pc, #52]	; (3fa8 <sd_mmc_spi_select_device+0x5c>)
    3f72:	4478      	add	r0, pc
    3f74:	4b0d      	ldr	r3, [pc, #52]	; (3fac <sd_mmc_spi_select_device+0x60>)
    3f76:	58eb      	ldr	r3, [r5, r3]
    3f78:	9301      	str	r3, [sp, #4]
    3f7a:	4798      	blx	r3
    3f7c:	2817      	cmp	r0, #23
    3f7e:	d0f4      	beq.n	3f6a <sd_mmc_spi_select_device+0x1e>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    3f80:	0071      	lsls	r1, r6, #1
    3f82:	198e      	adds	r6, r1, r6
    3f84:	490a      	ldr	r1, [pc, #40]	; (3fb0 <sd_mmc_spi_select_device+0x64>)
    3f86:	4479      	add	r1, pc
    3f88:	1989      	adds	r1, r1, r6
    3f8a:	2201      	movs	r2, #1
    3f8c:	4809      	ldr	r0, [pc, #36]	; (3fb4 <sd_mmc_spi_select_device+0x68>)
    3f8e:	4478      	add	r0, pc
    3f90:	4b09      	ldr	r3, [pc, #36]	; (3fb8 <sd_mmc_spi_select_device+0x6c>)
    3f92:	58eb      	ldr	r3, [r5, r3]
    3f94:	9301      	str	r3, [sp, #4]
    3f96:	4798      	blx	r3
}
    3f98:	b002      	add	sp, #8
    3f9a:	bd70      	pop	{r4, r5, r6, pc}
    3f9c:	0000ea36 	.word	0x0000ea36
    3fa0:	1fffc99f 	.word	0x1fffc99f
    3fa4:	003d0900 	.word	0x003d0900
    3fa8:	1fffc946 	.word	0x1fffc946
    3fac:	000003e0 	.word	0x000003e0
    3fb0:	1fffc972 	.word	0x1fffc972
    3fb4:	1fffc92a 	.word	0x1fffc92a
    3fb8:	00000010 	.word	0x00000010

00003fbc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    3fbc:	b510      	push	{r4, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	4b09      	ldr	r3, [pc, #36]	; (3fe8 <sd_mmc_spi_deselect_device+0x2c>)
    3fc2:	447b      	add	r3, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3fc4:	2100      	movs	r1, #0
    3fc6:	4a09      	ldr	r2, [pc, #36]	; (3fec <sd_mmc_spi_deselect_device+0x30>)
    3fc8:	447a      	add	r2, pc
    3fca:	7011      	strb	r1, [r2, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    3fcc:	0041      	lsls	r1, r0, #1
    3fce:	1808      	adds	r0, r1, r0
    3fd0:	4907      	ldr	r1, [pc, #28]	; (3ff0 <sd_mmc_spi_deselect_device+0x34>)
    3fd2:	4479      	add	r1, pc
    3fd4:	1809      	adds	r1, r1, r0
    3fd6:	2200      	movs	r2, #0
    3fd8:	4806      	ldr	r0, [pc, #24]	; (3ff4 <sd_mmc_spi_deselect_device+0x38>)
    3fda:	4478      	add	r0, pc
    3fdc:	4c06      	ldr	r4, [pc, #24]	; (3ff8 <sd_mmc_spi_deselect_device+0x3c>)
    3fde:	591b      	ldr	r3, [r3, r4]
    3fe0:	9301      	str	r3, [sp, #4]
    3fe2:	4798      	blx	r3
}
    3fe4:	b002      	add	sp, #8
    3fe6:	bd10      	pop	{r4, pc}
    3fe8:	0000e9ca 	.word	0x0000e9ca
    3fec:	1fffc933 	.word	0x1fffc933
    3ff0:	1fffc926 	.word	0x1fffc926
    3ff4:	1fffc8de 	.word	0x1fffc8de
    3ff8:	00000010 	.word	0x00000010

00003ffc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    3ffc:	b530      	push	{r4, r5, lr}
    3ffe:	b085      	sub	sp, #20
    4000:	4d0c      	ldr	r5, [pc, #48]	; (4034 <sd_mmc_spi_send_clock+0x38>)
    4002:	447d      	add	r5, pc
	uint8_t i;
	uint8_t dummy = 0xFF;
    4004:	22ff      	movs	r2, #255	; 0xff
    4006:	ab02      	add	r3, sp, #8
    4008:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    400a:	2200      	movs	r2, #0
    400c:	4b0a      	ldr	r3, [pc, #40]	; (4038 <sd_mmc_spi_send_clock+0x3c>)
    400e:	447b      	add	r3, pc
    4010:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    4012:	2400      	movs	r4, #0
    4014:	e00a      	b.n	402c <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    4016:	2201      	movs	r2, #1
    4018:	ab02      	add	r3, sp, #8
    401a:	1dd9      	adds	r1, r3, #7
    401c:	4807      	ldr	r0, [pc, #28]	; (403c <sd_mmc_spi_send_clock+0x40>)
    401e:	4478      	add	r0, pc
    4020:	4b07      	ldr	r3, [pc, #28]	; (4040 <sd_mmc_spi_send_clock+0x44>)
    4022:	58eb      	ldr	r3, [r5, r3]
    4024:	9301      	str	r3, [sp, #4]
    4026:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    4028:	3401      	adds	r4, #1
    402a:	b2e4      	uxtb	r4, r4
    402c:	2c09      	cmp	r4, #9
    402e:	d9f2      	bls.n	4016 <sd_mmc_spi_send_clock+0x1a>
	}
}
    4030:	b005      	add	sp, #20
    4032:	bd30      	pop	{r4, r5, pc}
    4034:	0000e98a 	.word	0x0000e98a
    4038:	1fffc8ed 	.word	0x1fffc8ed
    403c:	1fffc89a 	.word	0x1fffc89a
    4040:	000004ac 	.word	0x000004ac

00004044 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    4044:	b5f0      	push	{r4, r5, r6, r7, lr}
    4046:	46c6      	mov	lr, r8
    4048:	b500      	push	{lr}
    404a:	b088      	sub	sp, #32
    404c:	4680      	mov	r8, r0
    404e:	9202      	str	r2, [sp, #8]
    4050:	9303      	str	r3, [sp, #12]
    4052:	4e57      	ldr	r6, [pc, #348]	; (41b0 <sd_mmc_spi_adtc_start+0x16c>)
    4054:	447e      	add	r6, pc
	uint8_t dummy = 0xFF;
    4056:	25ff      	movs	r5, #255	; 0xff
    4058:	230f      	movs	r3, #15
    405a:	aa04      	add	r2, sp, #16
    405c:	4694      	mov	ip, r2
    405e:	4463      	add	r3, ip
    4060:	9301      	str	r3, [sp, #4]
    4062:	701d      	strb	r5, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4064:	2200      	movs	r2, #0
    4066:	4b53      	ldr	r3, [pc, #332]	; (41b4 <sd_mmc_spi_adtc_start+0x170>)
    4068:	447b      	add	r3, pc
    406a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    406c:	233f      	movs	r3, #63	; 0x3f
    406e:	4003      	ands	r3, r0
    4070:	2240      	movs	r2, #64	; 0x40
    4072:	4313      	orrs	r3, r2
    4074:	af06      	add	r7, sp, #24
    4076:	703b      	strb	r3, [r7, #0]
	cmd_token[1] = arg >> 24;
    4078:	0e0b      	lsrs	r3, r1, #24
    407a:	707b      	strb	r3, [r7, #1]
	cmd_token[2] = arg >> 16;
    407c:	0c0b      	lsrs	r3, r1, #16
    407e:	70bb      	strb	r3, [r7, #2]
	cmd_token[3] = arg >> 8;
    4080:	0a0b      	lsrs	r3, r1, #8
    4082:	70fb      	strb	r3, [r7, #3]
	cmd_token[4] = arg;
    4084:	7139      	strb	r1, [r7, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    4086:	2105      	movs	r1, #5
    4088:	0038      	movs	r0, r7
    408a:	4b4b      	ldr	r3, [pc, #300]	; (41b8 <sd_mmc_spi_adtc_start+0x174>)
    408c:	447b      	add	r3, pc
    408e:	4798      	blx	r3
    4090:	7178      	strb	r0, [r7, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    4092:	4c4a      	ldr	r4, [pc, #296]	; (41bc <sd_mmc_spi_adtc_start+0x178>)
    4094:	447c      	add	r4, pc
    4096:	2201      	movs	r2, #1
    4098:	9901      	ldr	r1, [sp, #4]
    409a:	0020      	movs	r0, r4
    409c:	4b48      	ldr	r3, [pc, #288]	; (41c0 <sd_mmc_spi_adtc_start+0x17c>)
    409e:	58f3      	ldr	r3, [r6, r3]
    40a0:	9301      	str	r3, [sp, #4]
    40a2:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    40a4:	2206      	movs	r2, #6
    40a6:	0039      	movs	r1, r7
    40a8:	0020      	movs	r0, r4
    40aa:	9b01      	ldr	r3, [sp, #4]
    40ac:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    40ae:	ab04      	add	r3, sp, #16
    40b0:	1dd9      	adds	r1, r3, #7
    40b2:	700d      	strb	r5, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    40b4:	23ff      	movs	r3, #255	; 0xff
    40b6:	2201      	movs	r2, #1
    40b8:	0020      	movs	r0, r4
    40ba:	4c42      	ldr	r4, [pc, #264]	; (41c4 <sd_mmc_spi_adtc_start+0x180>)
    40bc:	5934      	ldr	r4, [r6, r4]
    40be:	9401      	str	r4, [sp, #4]
    40c0:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    40c2:	3df8      	subs	r5, #248	; 0xf8
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    40c4:	23ff      	movs	r3, #255	; 0xff
    40c6:	2201      	movs	r2, #1
    40c8:	a904      	add	r1, sp, #16
    40ca:	1dcc      	adds	r4, r1, #7
    40cc:	0021      	movs	r1, r4
    40ce:	483e      	ldr	r0, [pc, #248]	; (41c8 <sd_mmc_spi_adtc_start+0x184>)
    40d0:	4478      	add	r0, pc
    40d2:	4f3c      	ldr	r7, [pc, #240]	; (41c4 <sd_mmc_spi_adtc_start+0x180>)
    40d4:	59f7      	ldr	r7, [r6, r7]
    40d6:	9701      	str	r7, [sp, #4]
    40d8:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    40da:	7823      	ldrb	r3, [r4, #0]
    40dc:	b25a      	sxtb	r2, r3
    40de:	2a00      	cmp	r2, #0
    40e0:	da0c      	bge.n	40fc <sd_mmc_spi_adtc_start+0xb8>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    40e2:	3d01      	subs	r5, #1
    40e4:	b2ed      	uxtb	r5, r5
    40e6:	2d00      	cmp	r5, #0
    40e8:	d1ec      	bne.n	40c4 <sd_mmc_spi_adtc_start+0x80>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    40ea:	2202      	movs	r2, #2
    40ec:	4b37      	ldr	r3, [pc, #220]	; (41cc <sd_mmc_spi_adtc_start+0x188>)
    40ee:	447b      	add	r3, pc
    40f0:	701a      	strb	r2, [r3, #0]
			return false;
    40f2:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    40f4:	b008      	add	sp, #32
    40f6:	bc04      	pop	{r2}
    40f8:	4690      	mov	r8, r2
    40fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    40fc:	4a34      	ldr	r2, [pc, #208]	; (41d0 <sd_mmc_spi_adtc_start+0x18c>)
    40fe:	447a      	add	r2, pc
    4100:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    4102:	071a      	lsls	r2, r3, #28
    4104:	d41d      	bmi.n	4142 <sd_mmc_spi_adtc_start+0xfe>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    4106:	075a      	lsls	r2, r3, #29
    4108:	d421      	bmi.n	414e <sd_mmc_spi_adtc_start+0x10a>
	if (r1 & ~R1_SPI_IDLE) {
    410a:	2201      	movs	r2, #1
    410c:	4393      	bics	r3, r2
    410e:	d124      	bne.n	415a <sd_mmc_spi_adtc_start+0x116>
	if (cmd & SDMMC_RESP_BUSY) {
    4110:	4643      	mov	r3, r8
    4112:	049b      	lsls	r3, r3, #18
    4114:	d426      	bmi.n	4164 <sd_mmc_spi_adtc_start+0x120>
	if (cmd & SDMMC_RESP_8) {
    4116:	4643      	mov	r3, r8
    4118:	059b      	lsls	r3, r3, #22
    411a:	d42d      	bmi.n	4178 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_32) {
    411c:	4643      	mov	r3, r8
    411e:	055b      	lsls	r3, r3, #21
    4120:	d437      	bmi.n	4192 <sd_mmc_spi_adtc_start+0x14e>
	sd_mmc_spi_block_size = block_size;
    4122:	4b2c      	ldr	r3, [pc, #176]	; (41d4 <sd_mmc_spi_adtc_start+0x190>)
    4124:	447b      	add	r3, pc
    4126:	466a      	mov	r2, sp
    4128:	8912      	ldrh	r2, [r2, #8]
    412a:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    412c:	4b2a      	ldr	r3, [pc, #168]	; (41d8 <sd_mmc_spi_adtc_start+0x194>)
    412e:	447b      	add	r3, pc
    4130:	466a      	mov	r2, sp
    4132:	8992      	ldrh	r2, [r2, #12]
    4134:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    4136:	2200      	movs	r2, #0
    4138:	4b28      	ldr	r3, [pc, #160]	; (41dc <sd_mmc_spi_adtc_start+0x198>)
    413a:	447b      	add	r3, pc
    413c:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    413e:	2001      	movs	r0, #1
    4140:	e7d8      	b.n	40f4 <sd_mmc_spi_adtc_start+0xb0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    4142:	2206      	movs	r2, #6
    4144:	4b26      	ldr	r3, [pc, #152]	; (41e0 <sd_mmc_spi_adtc_start+0x19c>)
    4146:	447b      	add	r3, pc
    4148:	701a      	strb	r2, [r3, #0]
		return false;
    414a:	2000      	movs	r0, #0
    414c:	e7d2      	b.n	40f4 <sd_mmc_spi_adtc_start+0xb0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    414e:	2209      	movs	r2, #9
    4150:	4b24      	ldr	r3, [pc, #144]	; (41e4 <sd_mmc_spi_adtc_start+0x1a0>)
    4152:	447b      	add	r3, pc
    4154:	701a      	strb	r2, [r3, #0]
		return false;
    4156:	2000      	movs	r0, #0
    4158:	e7cc      	b.n	40f4 <sd_mmc_spi_adtc_start+0xb0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    415a:	4b23      	ldr	r3, [pc, #140]	; (41e8 <sd_mmc_spi_adtc_start+0x1a4>)
    415c:	447b      	add	r3, pc
    415e:	701a      	strb	r2, [r3, #0]
		return false;
    4160:	2000      	movs	r0, #0
    4162:	e7c7      	b.n	40f4 <sd_mmc_spi_adtc_start+0xb0>
		if (!sd_mmc_spi_wait_busy()) {
    4164:	4b21      	ldr	r3, [pc, #132]	; (41ec <sd_mmc_spi_adtc_start+0x1a8>)
    4166:	447b      	add	r3, pc
    4168:	4798      	blx	r3
    416a:	2800      	cmp	r0, #0
    416c:	d1d3      	bne.n	4116 <sd_mmc_spi_adtc_start+0xd2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    416e:	2203      	movs	r2, #3
    4170:	4b1f      	ldr	r3, [pc, #124]	; (41f0 <sd_mmc_spi_adtc_start+0x1ac>)
    4172:	447b      	add	r3, pc
    4174:	701a      	strb	r2, [r3, #0]
			return false;
    4176:	e7bd      	b.n	40f4 <sd_mmc_spi_adtc_start+0xb0>
		sd_mmc_spi_response_32 = 0;
    4178:	491e      	ldr	r1, [pc, #120]	; (41f4 <sd_mmc_spi_adtc_start+0x1b0>)
    417a:	4479      	add	r1, pc
    417c:	2300      	movs	r3, #0
    417e:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    4180:	33ff      	adds	r3, #255	; 0xff
    4182:	2201      	movs	r2, #1
    4184:	481c      	ldr	r0, [pc, #112]	; (41f8 <sd_mmc_spi_adtc_start+0x1b4>)
    4186:	4478      	add	r0, pc
    4188:	4c0e      	ldr	r4, [pc, #56]	; (41c4 <sd_mmc_spi_adtc_start+0x180>)
    418a:	5934      	ldr	r4, [r6, r4]
    418c:	9401      	str	r4, [sp, #4]
    418e:	47a0      	blx	r4
    4190:	e7c4      	b.n	411c <sd_mmc_spi_adtc_start+0xd8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    4192:	4c1a      	ldr	r4, [pc, #104]	; (41fc <sd_mmc_spi_adtc_start+0x1b8>)
    4194:	447c      	add	r4, pc
    4196:	23ff      	movs	r3, #255	; 0xff
    4198:	2204      	movs	r2, #4
    419a:	0021      	movs	r1, r4
    419c:	4818      	ldr	r0, [pc, #96]	; (4200 <sd_mmc_spi_adtc_start+0x1bc>)
    419e:	4478      	add	r0, pc
    41a0:	4d08      	ldr	r5, [pc, #32]	; (41c4 <sd_mmc_spi_adtc_start+0x180>)
    41a2:	5975      	ldr	r5, [r6, r5]
    41a4:	9501      	str	r5, [sp, #4]
    41a6:	47a8      	blx	r5
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    41a8:	6823      	ldr	r3, [r4, #0]
    41aa:	ba1b      	rev	r3, r3
    41ac:	6023      	str	r3, [r4, #0]
    41ae:	e7b8      	b.n	4122 <sd_mmc_spi_adtc_start+0xde>
    41b0:	0000e938 	.word	0x0000e938
    41b4:	1fffc893 	.word	0x1fffc893
    41b8:	fffffa8d 	.word	0xfffffa8d
    41bc:	1fffc824 	.word	0x1fffc824
    41c0:	000004ac 	.word	0x000004ac
    41c4:	00000314 	.word	0x00000314
    41c8:	1fffc7e8 	.word	0x1fffc7e8
    41cc:	1fffc80d 	.word	0x1fffc80d
    41d0:	1fffc802 	.word	0x1fffc802
    41d4:	1fffc7d0 	.word	0x1fffc7d0
    41d8:	1fffc7ce 	.word	0x1fffc7ce
    41dc:	1fffc7ca 	.word	0x1fffc7ca
    41e0:	1fffc7b5 	.word	0x1fffc7b5
    41e4:	1fffc7a9 	.word	0x1fffc7a9
    41e8:	1fffc79f 	.word	0x1fffc79f
    41ec:	fffffa57 	.word	0xfffffa57
    41f0:	1fffc789 	.word	0x1fffc789
    41f4:	1fffc786 	.word	0x1fffc786
    41f8:	1fffc732 	.word	0x1fffc732
    41fc:	1fffc76c 	.word	0x1fffc76c
    4200:	1fffc71a 	.word	0x1fffc71a

00004204 <sd_mmc_spi_send_cmd>:
{
    4204:	b530      	push	{r4, r5, lr}
    4206:	b085      	sub	sp, #20
    4208:	4c05      	ldr	r4, [pc, #20]	; (4220 <sd_mmc_spi_send_cmd+0x1c>)
    420a:	447c      	add	r4, pc
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    420c:	2300      	movs	r3, #0
    420e:	9300      	str	r3, [sp, #0]
    4210:	2200      	movs	r2, #0
    4212:	4d04      	ldr	r5, [pc, #16]	; (4224 <sd_mmc_spi_send_cmd+0x20>)
    4214:	5964      	ldr	r4, [r4, r5]
    4216:	9403      	str	r4, [sp, #12]
    4218:	47a0      	blx	r4
}
    421a:	b005      	add	sp, #20
    421c:	bd30      	pop	{r4, r5, pc}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	0000e782 	.word	0x0000e782
    4224:	000001e4 	.word	0x000001e4

00004228 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    4228:	4b01      	ldr	r3, [pc, #4]	; (4230 <sd_mmc_spi_get_response+0x8>)
    422a:	447b      	add	r3, pc
    422c:	6818      	ldr	r0, [r3, #0]
}
    422e:	4770      	bx	lr
    4230:	1fffc6d6 	.word	0x1fffc6d6

00004234 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    4234:	b530      	push	{r4, r5, lr}
    4236:	b083      	sub	sp, #12
    4238:	9001      	str	r0, [sp, #4]
    423a:	4c1b      	ldr	r4, [pc, #108]	; (42a8 <sd_mmc_spi_read_word+0x74>)
    423c:	447c      	add	r4, pc
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    423e:	2200      	movs	r2, #0
    4240:	4b1a      	ldr	r3, [pc, #104]	; (42ac <sd_mmc_spi_read_word+0x78>)
    4242:	447b      	add	r3, pc
    4244:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    4246:	4b1a      	ldr	r3, [pc, #104]	; (42b0 <sd_mmc_spi_read_word+0x7c>)
    4248:	447b      	add	r3, pc
    424a:	8819      	ldrh	r1, [r3, #0]
    424c:	4b19      	ldr	r3, [pc, #100]	; (42b4 <sd_mmc_spi_read_word+0x80>)
    424e:	447b      	add	r3, pc
    4250:	6818      	ldr	r0, [r3, #0]
    4252:	4b19      	ldr	r3, [pc, #100]	; (42b8 <sd_mmc_spi_read_word+0x84>)
    4254:	58e3      	ldr	r3, [r4, r3]
    4256:	9300      	str	r3, [sp, #0]
    4258:	4798      	blx	r3
    425a:	2900      	cmp	r1, #0
    425c:	d104      	bne.n	4268 <sd_mmc_spi_read_word+0x34>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    425e:	4b17      	ldr	r3, [pc, #92]	; (42bc <sd_mmc_spi_read_word+0x88>)
    4260:	447b      	add	r3, pc
    4262:	4798      	blx	r3
    4264:	2800      	cmp	r0, #0
    4266:	d017      	beq.n	4298 <sd_mmc_spi_read_word+0x64>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    4268:	23ff      	movs	r3, #255	; 0xff
    426a:	2204      	movs	r2, #4
    426c:	a901      	add	r1, sp, #4
    426e:	4814      	ldr	r0, [pc, #80]	; (42c0 <sd_mmc_spi_read_word+0x8c>)
    4270:	4478      	add	r0, pc
    4272:	4d14      	ldr	r5, [pc, #80]	; (42c4 <sd_mmc_spi_read_word+0x90>)
    4274:	5965      	ldr	r5, [r4, r5]
    4276:	9500      	str	r5, [sp, #0]
    4278:	47a8      	blx	r5
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    427a:	4b13      	ldr	r3, [pc, #76]	; (42c8 <sd_mmc_spi_read_word+0x94>)
    427c:	447b      	add	r3, pc
    427e:	681a      	ldr	r2, [r3, #0]
    4280:	1d10      	adds	r0, r2, #4
    4282:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    4284:	4b11      	ldr	r3, [pc, #68]	; (42cc <sd_mmc_spi_read_word+0x98>)
    4286:	447b      	add	r3, pc
    4288:	8819      	ldrh	r1, [r3, #0]
    428a:	4b0b      	ldr	r3, [pc, #44]	; (42b8 <sd_mmc_spi_read_word+0x84>)
    428c:	58e3      	ldr	r3, [r4, r3]
    428e:	9300      	str	r3, [sp, #0]
    4290:	4798      	blx	r3
    4292:	2900      	cmp	r1, #0
    4294:	d002      	beq.n	429c <sd_mmc_spi_read_word+0x68>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    4296:	2001      	movs	r0, #1
}
    4298:	b003      	add	sp, #12
    429a:	bd30      	pop	{r4, r5, pc}
		sd_mmc_spi_stop_read_block();
    429c:	4b0c      	ldr	r3, [pc, #48]	; (42d0 <sd_mmc_spi_read_word+0x9c>)
    429e:	447b      	add	r3, pc
    42a0:	4798      	blx	r3
	return true;
    42a2:	2001      	movs	r0, #1
    42a4:	e7f8      	b.n	4298 <sd_mmc_spi_read_word+0x64>
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	0000e750 	.word	0x0000e750
    42ac:	1fffc6b9 	.word	0x1fffc6b9
    42b0:	1fffc6ac 	.word	0x1fffc6ac
    42b4:	1fffc6b6 	.word	0x1fffc6b6
    42b8:	000003f0 	.word	0x000003f0
    42bc:	fffffa61 	.word	0xfffffa61
    42c0:	1fffc648 	.word	0x1fffc648
    42c4:	00000314 	.word	0x00000314
    42c8:	1fffc688 	.word	0x1fffc688
    42cc:	1fffc66e 	.word	0x1fffc66e
    42d0:	fffffaab 	.word	0xfffffaab

000042d4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d6:	46ce      	mov	lr, r9
    42d8:	4647      	mov	r7, r8
    42da:	b580      	push	{r7, lr}
    42dc:	b083      	sub	sp, #12
    42de:	4680      	mov	r8, r0
    42e0:	4e17      	ldr	r6, [pc, #92]	; (4340 <sd_mmc_spi_start_read_blocks+0x6c>)
    42e2:	447e      	add	r6, pc
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    42e4:	2200      	movs	r2, #0
    42e6:	4b17      	ldr	r3, [pc, #92]	; (4344 <sd_mmc_spi_start_read_blocks+0x70>)
    42e8:	447b      	add	r3, pc
    42ea:	701a      	strb	r2, [r3, #0]
	pos = 0;
    42ec:	2500      	movs	r5, #0
	while (nb_block--) {
    42ee:	1e4c      	subs	r4, r1, #1
    42f0:	b2a3      	uxth	r3, r4
    42f2:	4699      	mov	r9, r3
    42f4:	2900      	cmp	r1, #0
    42f6:	d01d      	beq.n	4334 <sd_mmc_spi_start_read_blocks+0x60>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    42f8:	4b13      	ldr	r3, [pc, #76]	; (4348 <sd_mmc_spi_start_read_blocks+0x74>)
    42fa:	447b      	add	r3, pc
    42fc:	4798      	blx	r3
    42fe:	2800      	cmp	r0, #0
    4300:	d019      	beq.n	4336 <sd_mmc_spi_start_read_blocks+0x62>
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    4302:	4f12      	ldr	r7, [pc, #72]	; (434c <sd_mmc_spi_start_read_blocks+0x78>)
    4304:	447f      	add	r7, pc
    4306:	883a      	ldrh	r2, [r7, #0]
    4308:	4643      	mov	r3, r8
    430a:	1959      	adds	r1, r3, r5
    430c:	23ff      	movs	r3, #255	; 0xff
    430e:	4810      	ldr	r0, [pc, #64]	; (4350 <sd_mmc_spi_start_read_blocks+0x7c>)
    4310:	4478      	add	r0, pc
    4312:	4c10      	ldr	r4, [pc, #64]	; (4354 <sd_mmc_spi_start_read_blocks+0x80>)
    4314:	5934      	ldr	r4, [r6, r4]
    4316:	9401      	str	r4, [sp, #4]
    4318:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    431a:	883b      	ldrh	r3, [r7, #0]
    431c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    431e:	4a0e      	ldr	r2, [pc, #56]	; (4358 <sd_mmc_spi_start_read_blocks+0x84>)
    4320:	447a      	add	r2, pc
    4322:	6811      	ldr	r1, [r2, #0]
    4324:	468c      	mov	ip, r1
    4326:	4463      	add	r3, ip
    4328:	6013      	str	r3, [r2, #0]

		sd_mmc_spi_stop_read_block();
    432a:	4b0c      	ldr	r3, [pc, #48]	; (435c <sd_mmc_spi_start_read_blocks+0x88>)
    432c:	447b      	add	r3, pc
    432e:	4798      	blx	r3
	while (nb_block--) {
    4330:	4649      	mov	r1, r9
    4332:	e7dc      	b.n	42ee <sd_mmc_spi_start_read_blocks+0x1a>
	}
	return true;
    4334:	2001      	movs	r0, #1
}
    4336:	b003      	add	sp, #12
    4338:	bc0c      	pop	{r2, r3}
    433a:	4690      	mov	r8, r2
    433c:	4699      	mov	r9, r3
    433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4340:	0000e6aa 	.word	0x0000e6aa
    4344:	1fffc613 	.word	0x1fffc613
    4348:	fffff9c7 	.word	0xfffff9c7
    434c:	1fffc5f0 	.word	0x1fffc5f0
    4350:	1fffc5a8 	.word	0x1fffc5a8
    4354:	00000314 	.word	0x00000314
    4358:	1fffc5e4 	.word	0x1fffc5e4
    435c:	fffffa1d 	.word	0xfffffa1d

00004360 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    4360:	2001      	movs	r0, #1
    4362:	4770      	bx	lr

00004364 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    4364:	b5f0      	push	{r4, r5, r6, r7, lr}
    4366:	46c6      	mov	lr, r8
    4368:	b500      	push	{lr}
    436a:	b082      	sub	sp, #8
    436c:	4680      	mov	r8, r0
    436e:	4e1c      	ldr	r6, [pc, #112]	; (43e0 <sd_mmc_spi_start_write_blocks+0x7c>)
    4370:	447e      	add	r6, pc
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4372:	2200      	movs	r2, #0
    4374:	4b1b      	ldr	r3, [pc, #108]	; (43e4 <sd_mmc_spi_start_write_blocks+0x80>)
    4376:	447b      	add	r3, pc
    4378:	701a      	strb	r2, [r3, #0]
	pos = 0;
    437a:	2500      	movs	r5, #0
	while (nb_block--) {
    437c:	e000      	b.n	4380 <sd_mmc_spi_start_write_blocks+0x1c>
{
    437e:	0021      	movs	r1, r4
	while (nb_block--) {
    4380:	1e4c      	subs	r4, r1, #1
    4382:	b2a4      	uxth	r4, r4
    4384:	2900      	cmp	r1, #0
    4386:	d026      	beq.n	43d6 <sd_mmc_spi_start_write_blocks+0x72>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    4388:	4b17      	ldr	r3, [pc, #92]	; (43e8 <sd_mmc_spi_start_write_blocks+0x84>)
    438a:	447b      	add	r3, pc
    438c:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    438e:	4f17      	ldr	r7, [pc, #92]	; (43ec <sd_mmc_spi_start_write_blocks+0x88>)
    4390:	447f      	add	r7, pc
    4392:	883a      	ldrh	r2, [r7, #0]
    4394:	4643      	mov	r3, r8
    4396:	1959      	adds	r1, r3, r5
    4398:	4815      	ldr	r0, [pc, #84]	; (43f0 <sd_mmc_spi_start_write_blocks+0x8c>)
    439a:	4478      	add	r0, pc
    439c:	4b15      	ldr	r3, [pc, #84]	; (43f4 <sd_mmc_spi_start_write_blocks+0x90>)
    439e:	58f3      	ldr	r3, [r6, r3]
    43a0:	9301      	str	r3, [sp, #4]
    43a2:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    43a4:	883b      	ldrh	r3, [r7, #0]
    43a6:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    43a8:	4a13      	ldr	r2, [pc, #76]	; (43f8 <sd_mmc_spi_start_write_blocks+0x94>)
    43aa:	447a      	add	r2, pc
    43ac:	6811      	ldr	r1, [r2, #0]
    43ae:	468c      	mov	ip, r1
    43b0:	4463      	add	r3, ip
    43b2:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    43b4:	4b11      	ldr	r3, [pc, #68]	; (43fc <sd_mmc_spi_start_write_blocks+0x98>)
    43b6:	447b      	add	r3, pc
    43b8:	4798      	blx	r3
    43ba:	2800      	cmp	r0, #0
    43bc:	d00c      	beq.n	43d8 <sd_mmc_spi_start_write_blocks+0x74>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    43be:	2c00      	cmp	r4, #0
    43c0:	d0dd      	beq.n	437e <sd_mmc_spi_start_write_blocks+0x1a>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    43c2:	4b0f      	ldr	r3, [pc, #60]	; (4400 <sd_mmc_spi_start_write_blocks+0x9c>)
    43c4:	447b      	add	r3, pc
    43c6:	4798      	blx	r3
    43c8:	2800      	cmp	r0, #0
    43ca:	d1d8      	bne.n	437e <sd_mmc_spi_start_write_blocks+0x1a>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    43cc:	2205      	movs	r2, #5
    43ce:	4b0d      	ldr	r3, [pc, #52]	; (4404 <sd_mmc_spi_start_write_blocks+0xa0>)
    43d0:	447b      	add	r3, pc
    43d2:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    43d4:	e000      	b.n	43d8 <sd_mmc_spi_start_write_blocks+0x74>
			}
		}
	}
	return true;
    43d6:	2001      	movs	r0, #1
}
    43d8:	b002      	add	sp, #8
    43da:	bc04      	pop	{r2}
    43dc:	4690      	mov	r8, r2
    43de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43e0:	0000e61c 	.word	0x0000e61c
    43e4:	1fffc585 	.word	0x1fffc585
    43e8:	fffff7d3 	.word	0xfffff7d3
    43ec:	1fffc564 	.word	0x1fffc564
    43f0:	1fffc51e 	.word	0x1fffc51e
    43f4:	000004ac 	.word	0x000004ac
    43f8:	1fffc55a 	.word	0x1fffc55a
    43fc:	fffff9bf 	.word	0xfffff9bf
    4400:	fffff7f9 	.word	0xfffff7f9
    4404:	1fffc52b 	.word	0x1fffc52b

00004408 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    4408:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    440a:	4b07      	ldr	r3, [pc, #28]	; (4428 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    440c:	447b      	add	r3, pc
    440e:	4798      	blx	r3
    4410:	2800      	cmp	r0, #0
    4412:	d104      	bne.n	441e <sd_mmc_spi_wait_end_of_write_blocks+0x16>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    4414:	2205      	movs	r2, #5
    4416:	4b05      	ldr	r3, [pc, #20]	; (442c <sd_mmc_spi_wait_end_of_write_blocks+0x24>)
    4418:	447b      	add	r3, pc
    441a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    441c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    441e:	4b04      	ldr	r3, [pc, #16]	; (4430 <sd_mmc_spi_wait_end_of_write_blocks+0x28>)
    4420:	447b      	add	r3, pc
    4422:	4798      	blx	r3
    4424:	e7fa      	b.n	441c <sd_mmc_spi_wait_end_of_write_blocks+0x14>
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	fffff7b1 	.word	0xfffff7b1
    442c:	1fffc4e3 	.word	0x1fffc4e3
    4430:	fffff80d 	.word	0xfffff80d

00004434 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4434:	b510      	push	{r4, lr}
    4436:	b082      	sub	sp, #8
    4438:	4c0c      	ldr	r4, [pc, #48]	; (446c <delay_init+0x38>)
    443a:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
    443c:	2000      	movs	r0, #0
    443e:	4b0c      	ldr	r3, [pc, #48]	; (4470 <delay_init+0x3c>)
    4440:	58e3      	ldr	r3, [r4, r3]
    4442:	9301      	str	r3, [sp, #4]
    4444:	4798      	blx	r3
	cycles_per_ms /= 1000;
    4446:	4b0b      	ldr	r3, [pc, #44]	; (4474 <delay_init+0x40>)
    4448:	58e4      	ldr	r4, [r4, r3]
    444a:	21fa      	movs	r1, #250	; 0xfa
    444c:	0089      	lsls	r1, r1, #2
    444e:	47a0      	blx	r4
    4450:	4b09      	ldr	r3, [pc, #36]	; (4478 <delay_init+0x44>)
    4452:	447b      	add	r3, pc
    4454:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4456:	21fa      	movs	r1, #250	; 0xfa
    4458:	0089      	lsls	r1, r1, #2
    445a:	47a0      	blx	r4
    445c:	4b07      	ldr	r3, [pc, #28]	; (447c <delay_init+0x48>)
    445e:	447b      	add	r3, pc
    4460:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4462:	2205      	movs	r2, #5
    4464:	4b06      	ldr	r3, [pc, #24]	; (4480 <delay_init+0x4c>)
    4466:	601a      	str	r2, [r3, #0]
}
    4468:	b002      	add	sp, #8
    446a:	bd10      	pop	{r4, pc}
    446c:	0000e552 	.word	0x0000e552
    4470:	0000014c 	.word	0x0000014c
    4474:	00000340 	.word	0x00000340
    4478:	1fffbcaa 	.word	0x1fffbcaa
    447c:	1fffbca2 	.word	0x1fffbca2
    4480:	e000e010 	.word	0xe000e010

00004484 <delay_cycles_ms>:
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    4484:	e000      	b.n	4488 <delay_cycles_ms+0x4>
{
    4486:	0010      	movs	r0, r2
	while (n--) {
    4488:	1e42      	subs	r2, r0, #1
    448a:	2800      	cmp	r0, #0
    448c:	d00d      	beq.n	44aa <delay_cycles_ms+0x26>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    448e:	4b07      	ldr	r3, [pc, #28]	; (44ac <delay_cycles_ms+0x28>)
    4490:	447b      	add	r3, pc
    4492:	681b      	ldr	r3, [r3, #0]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    4494:	2b00      	cmp	r3, #0
    4496:	d0f6      	beq.n	4486 <delay_cycles_ms+0x2>
		SysTick->LOAD = n;
    4498:	4905      	ldr	r1, [pc, #20]	; (44b0 <delay_cycles_ms+0x2c>)
    449a:	604b      	str	r3, [r1, #4]
		SysTick->VAL = 0;
    449c:	2300      	movs	r3, #0
    449e:	608b      	str	r3, [r1, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44a0:	4b03      	ldr	r3, [pc, #12]	; (44b0 <delay_cycles_ms+0x2c>)
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	03db      	lsls	r3, r3, #15
    44a6:	d5fb      	bpl.n	44a0 <delay_cycles_ms+0x1c>
    44a8:	e7ed      	b.n	4486 <delay_cycles_ms+0x2>
	}
}
    44aa:	4770      	bx	lr
    44ac:	1fffbc6c 	.word	0x1fffbc6c
    44b0:	e000e010 	.word	0xe000e010

000044b4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    44b4:	b510      	push	{r4, lr}
	if (gpfIsr) {
    44b6:	4b03      	ldr	r3, [pc, #12]	; (44c4 <chip_isr+0x10>)
    44b8:	447b      	add	r3, pc
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	2b00      	cmp	r3, #0
    44be:	d000      	beq.n	44c2 <chip_isr+0xe>
		gpfIsr();
    44c0:	4798      	blx	r3
	}
}
    44c2:	bd10      	pop	{r4, pc}
    44c4:	1fffc454 	.word	0x1fffc454

000044c8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    44c8:	b530      	push	{r4, r5, lr}
    44ca:	b083      	sub	sp, #12
    44cc:	4b0d      	ldr	r3, [pc, #52]	; (4504 <init_chip_pins+0x3c>)
    44ce:	447b      	add	r3, pc
	config->input_pull = PORT_PIN_PULL_UP;
    44d0:	2201      	movs	r2, #1
    44d2:	ac01      	add	r4, sp, #4
    44d4:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    44d6:	2100      	movs	r1, #0
    44d8:	70a1      	strb	r1, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    44da:	7022      	strb	r2, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    44dc:	0021      	movs	r1, r4
    44de:	201b      	movs	r0, #27
    44e0:	4a09      	ldr	r2, [pc, #36]	; (4508 <init_chip_pins+0x40>)
    44e2:	589d      	ldr	r5, [r3, r2]
    44e4:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    44e6:	0021      	movs	r1, r4
    44e8:	201c      	movs	r0, #28
    44ea:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    44ec:	0021      	movs	r1, r4
    44ee:	2028      	movs	r0, #40	; 0x28
    44f0:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    44f2:	4b06      	ldr	r3, [pc, #24]	; (450c <init_chip_pins+0x44>)
    44f4:	2280      	movs	r2, #128	; 0x80
    44f6:	0552      	lsls	r2, r2, #21
    44f8:	615a      	str	r2, [r3, #20]
    44fa:	2280      	movs	r2, #128	; 0x80
    44fc:	0512      	lsls	r2, r2, #20
    44fe:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
}
    4500:	b003      	add	sp, #12
    4502:	bd30      	pop	{r4, r5, pc}
    4504:	0000e4be 	.word	0x0000e4be
    4508:	00000390 	.word	0x00000390
    450c:	41004400 	.word	0x41004400

00004510 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    4510:	b530      	push	{r4, r5, lr}
    4512:	b083      	sub	sp, #12
    4514:	4d06      	ldr	r5, [pc, #24]	; (4530 <nm_bsp_sleep+0x20>)
    4516:	447d      	add	r5, pc
	while (u32TimeMsec--) {
    4518:	e005      	b.n	4526 <nm_bsp_sleep+0x16>
		delay_ms(1);
    451a:	2001      	movs	r0, #1
    451c:	4b05      	ldr	r3, [pc, #20]	; (4534 <nm_bsp_sleep+0x24>)
    451e:	58eb      	ldr	r3, [r5, r3]
    4520:	9301      	str	r3, [sp, #4]
    4522:	4798      	blx	r3
	while (u32TimeMsec--) {
    4524:	0020      	movs	r0, r4
    4526:	1e44      	subs	r4, r0, #1
    4528:	2800      	cmp	r0, #0
    452a:	d1f6      	bne.n	451a <nm_bsp_sleep+0xa>
	}
}
    452c:	b003      	add	sp, #12
    452e:	bd30      	pop	{r4, r5, pc}
    4530:	0000e476 	.word	0x0000e476
    4534:	0000044c 	.word	0x0000044c

00004538 <nm_bsp_reset>:
{
    4538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    453a:	4b0a      	ldr	r3, [pc, #40]	; (4564 <nm_bsp_reset+0x2c>)
    453c:	447b      	add	r3, pc
    453e:	4c0a      	ldr	r4, [pc, #40]	; (4568 <nm_bsp_reset+0x30>)
    4540:	2780      	movs	r7, #128	; 0x80
    4542:	057f      	lsls	r7, r7, #21
    4544:	6167      	str	r7, [r4, #20]
    4546:	2680      	movs	r6, #128	; 0x80
    4548:	0536      	lsls	r6, r6, #20
    454a:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    454c:	2064      	movs	r0, #100	; 0x64
    454e:	4a07      	ldr	r2, [pc, #28]	; (456c <nm_bsp_reset+0x34>)
    4550:	589d      	ldr	r5, [r3, r2]
    4552:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    4554:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    4556:	2064      	movs	r0, #100	; 0x64
    4558:	47a8      	blx	r5
    455a:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    455c:	2064      	movs	r0, #100	; 0x64
    455e:	47a8      	blx	r5
}
    4560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	0000e450 	.word	0x0000e450
    4568:	41004400 	.word	0x41004400
    456c:	00000160 	.word	0x00000160

00004570 <nm_bsp_init>:
{
    4570:	b510      	push	{r4, lr}
    4572:	b082      	sub	sp, #8
    4574:	4c12      	ldr	r4, [pc, #72]	; (45c0 <nm_bsp_init+0x50>)
    4576:	447c      	add	r4, pc
	gpfIsr = NULL;
    4578:	2200      	movs	r2, #0
    457a:	4b12      	ldr	r3, [pc, #72]	; (45c4 <nm_bsp_init+0x54>)
    457c:	447b      	add	r3, pc
    457e:	601a      	str	r2, [r3, #0]
	init_chip_pins();
    4580:	4b11      	ldr	r3, [pc, #68]	; (45c8 <nm_bsp_init+0x58>)
    4582:	447b      	add	r3, pc
    4584:	4798      	blx	r3
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    4586:	4b11      	ldr	r3, [pc, #68]	; (45cc <nm_bsp_init+0x5c>)
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	07db      	lsls	r3, r3, #31
    458c:	d503      	bpl.n	4596 <nm_bsp_init+0x26>
    458e:	4b0f      	ldr	r3, [pc, #60]	; (45cc <nm_bsp_init+0x5c>)
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	079b      	lsls	r3, r3, #30
    4594:	d403      	bmi.n	459e <nm_bsp_init+0x2e>
	    delay_init();
    4596:	4b0e      	ldr	r3, [pc, #56]	; (45d0 <nm_bsp_init+0x60>)
    4598:	58e3      	ldr	r3, [r4, r3]
    459a:	9301      	str	r3, [sp, #4]
    459c:	4798      	blx	r3
	nm_bsp_reset();
    459e:	4b0d      	ldr	r3, [pc, #52]	; (45d4 <nm_bsp_init+0x64>)
    45a0:	58e3      	ldr	r3, [r4, r3]
    45a2:	9301      	str	r3, [sp, #4]
    45a4:	4798      	blx	r3
	cpu_irq_enable();
    45a6:	4b0c      	ldr	r3, [pc, #48]	; (45d8 <nm_bsp_init+0x68>)
    45a8:	58e3      	ldr	r3, [r4, r3]
    45aa:	9301      	str	r3, [sp, #4]
    45ac:	2301      	movs	r3, #1
    45ae:	9a01      	ldr	r2, [sp, #4]
    45b0:	7013      	strb	r3, [r2, #0]
    45b2:	f3bf 8f5f 	dmb	sy
    45b6:	b662      	cpsie	i
}
    45b8:	2000      	movs	r0, #0
    45ba:	b002      	add	sp, #8
    45bc:	bd10      	pop	{r4, pc}
    45be:	46c0      	nop			; (mov r8, r8)
    45c0:	0000e416 	.word	0x0000e416
    45c4:	1fffc390 	.word	0x1fffc390
    45c8:	ffffff43 	.word	0xffffff43
    45cc:	e000e010 	.word	0xe000e010
    45d0:	00000258 	.word	0x00000258
    45d4:	00000228 	.word	0x00000228
    45d8:	0000016c 	.word	0x0000016c

000045dc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    45dc:	b530      	push	{r4, r5, lr}
    45de:	b087      	sub	sp, #28
    45e0:	4c14      	ldr	r4, [pc, #80]	; (4634 <nm_bsp_register_isr+0x58>)
    45e2:	447c      	add	r4, pc
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    45e4:	4b14      	ldr	r3, [pc, #80]	; (4638 <nm_bsp_register_isr+0x5c>)
    45e6:	447b      	add	r3, pc
    45e8:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    45ea:	ad03      	add	r5, sp, #12
    45ec:	0028      	movs	r0, r5
    45ee:	4b13      	ldr	r3, [pc, #76]	; (463c <nm_bsp_register_isr+0x60>)
    45f0:	58e3      	ldr	r3, [r4, r3]
    45f2:	9301      	str	r3, [sp, #4]
    45f4:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    45f6:	2329      	movs	r3, #41	; 0x29
    45f8:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    45fa:	2300      	movs	r3, #0
    45fc:	606b      	str	r3, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    45fe:	3301      	adds	r3, #1
    4600:	722b      	strb	r3, [r5, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    4602:	3301      	adds	r3, #1
    4604:	72eb      	strb	r3, [r5, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    4606:	0029      	movs	r1, r5
    4608:	2009      	movs	r0, #9
    460a:	4b0d      	ldr	r3, [pc, #52]	; (4640 <nm_bsp_register_isr+0x64>)
    460c:	58e3      	ldr	r3, [r4, r3]
    460e:	9301      	str	r3, [sp, #4]
    4610:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    4612:	2200      	movs	r2, #0
    4614:	2109      	movs	r1, #9
    4616:	480b      	ldr	r0, [pc, #44]	; (4644 <nm_bsp_register_isr+0x68>)
    4618:	4478      	add	r0, pc
    461a:	4b0b      	ldr	r3, [pc, #44]	; (4648 <nm_bsp_register_isr+0x6c>)
    461c:	58e3      	ldr	r3, [r4, r3]
    461e:	9301      	str	r3, [sp, #4]
    4620:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    4622:	2100      	movs	r1, #0
    4624:	2009      	movs	r0, #9
    4626:	4b09      	ldr	r3, [pc, #36]	; (464c <nm_bsp_register_isr+0x70>)
    4628:	58e3      	ldr	r3, [r4, r3]
    462a:	9301      	str	r3, [sp, #4]
    462c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    462e:	b007      	add	sp, #28
    4630:	bd30      	pop	{r4, r5, pc}
    4632:	46c0      	nop			; (mov r8, r8)
    4634:	0000e3aa 	.word	0x0000e3aa
    4638:	1fffc326 	.word	0x1fffc326
    463c:	00000040 	.word	0x00000040
    4640:	000001d4 	.word	0x000001d4
    4644:	fffffe99 	.word	0xfffffe99
    4648:	000003f4 	.word	0x000003f4
    464c:	000002a8 	.word	0x000002a8

00004650 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    4650:	b500      	push	{lr}
    4652:	b083      	sub	sp, #12
    4654:	4b09      	ldr	r3, [pc, #36]	; (467c <nm_bsp_interrupt_ctrl+0x2c>)
    4656:	447b      	add	r3, pc
	if (u8Enable) {
    4658:	2800      	cmp	r0, #0
    465a:	d107      	bne.n	466c <nm_bsp_interrupt_ctrl+0x1c>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    465c:	2100      	movs	r1, #0
    465e:	2009      	movs	r0, #9
    4660:	4a07      	ldr	r2, [pc, #28]	; (4680 <nm_bsp_interrupt_ctrl+0x30>)
    4662:	589b      	ldr	r3, [r3, r2]
    4664:	9301      	str	r3, [sp, #4]
    4666:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    4668:	b003      	add	sp, #12
    466a:	bd00      	pop	{pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    466c:	2100      	movs	r1, #0
    466e:	2009      	movs	r0, #9
    4670:	4a04      	ldr	r2, [pc, #16]	; (4684 <nm_bsp_interrupt_ctrl+0x34>)
    4672:	589b      	ldr	r3, [r3, r2]
    4674:	9301      	str	r3, [sp, #4]
    4676:	4798      	blx	r3
    4678:	e7f6      	b.n	4668 <nm_bsp_interrupt_ctrl+0x18>
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	0000e336 	.word	0x0000e336
    4680:	0000021c 	.word	0x0000021c
    4684:	000002a8 	.word	0x000002a8

00004688 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    4688:	b5f0      	push	{r4, r5, r6, r7, lr}
    468a:	46ce      	mov	lr, r9
    468c:	4647      	mov	r7, r8
    468e:	b580      	push	{r7, lr}
    4690:	b085      	sub	sp, #20
    4692:	0007      	movs	r7, r0
    4694:	000e      	movs	r6, r1
    4696:	0015      	movs	r5, r2
    4698:	4c44      	ldr	r4, [pc, #272]	; (47ac <spi_rw+0x124>)
    469a:	447c      	add	r4, pc
	uint8 u8Dummy = 0;
    469c:	2200      	movs	r2, #0
    469e:	ab02      	add	r3, sp, #8
    46a0:	71da      	strb	r2, [r3, #7]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    46a2:	2900      	cmp	r1, #0
    46a4:	d033      	beq.n	470e <spi_rw+0x86>
    46a6:	2d00      	cmp	r5, #0
    46a8:	d100      	bne.n	46ac <spi_rw+0x24>
    46aa:	e07c      	b.n	47a6 <spi_rw+0x11e>
		return M2M_ERR_INVALID_ARG;
	}

	if (pu8Mosi == NULL) {
    46ac:	2f00      	cmp	r7, #0
    46ae:	d033      	beq.n	4718 <spi_rw+0x90>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    46b0:	2300      	movs	r3, #0
    46b2:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	if(pu8Miso == NULL) {
    46b4:	2e00      	cmp	r6, #0
    46b6:	d034      	beq.n	4722 <spi_rw+0x9a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    46b8:	2300      	movs	r3, #0
    46ba:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);
    46bc:	4b3c      	ldr	r3, [pc, #240]	; (47b0 <spi_rw+0x128>)
    46be:	58e3      	ldr	r3, [r4, r3]
    46c0:	9300      	str	r3, [sp, #0]
    46c2:	4b3c      	ldr	r3, [pc, #240]	; (47b4 <spi_rw+0x12c>)
    46c4:	58e3      	ldr	r3, [r4, r3]
    46c6:	9301      	str	r3, [sp, #4]
    46c8:	2201      	movs	r2, #1
    46ca:	9900      	ldr	r1, [sp, #0]
    46cc:	0018      	movs	r0, r3
    46ce:	4b3a      	ldr	r3, [pc, #232]	; (47b8 <spi_rw+0x130>)
    46d0:	58e3      	ldr	r3, [r4, r3]
    46d2:	9300      	str	r3, [sp, #0]
    46d4:	4798      	blx	r3
	uint16_t rxd_data = 0;
    46d6:	2100      	movs	r1, #0

	while (u16Sz) {
    46d8:	2d00      	cmp	r5, #0
    46da:	d127      	bne.n	472c <spi_rw+0xa4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    46dc:	4b35      	ldr	r3, [pc, #212]	; (47b4 <spi_rw+0x12c>)
    46de:	58e3      	ldr	r3, [r4, r3]
    46e0:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46e2:	7e1b      	ldrb	r3, [r3, #24]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    46e4:	079b      	lsls	r3, r3, #30
    46e6:	d5f9      	bpl.n	46dc <spi_rw+0x54>
		;

	spi_select_slave(&master, &slave_inst, false);
    46e8:	4b31      	ldr	r3, [pc, #196]	; (47b0 <spi_rw+0x128>)
    46ea:	58e3      	ldr	r3, [r4, r3]
    46ec:	9300      	str	r3, [sp, #0]
    46ee:	4b31      	ldr	r3, [pc, #196]	; (47b4 <spi_rw+0x12c>)
    46f0:	58e3      	ldr	r3, [r4, r3]
    46f2:	9301      	str	r3, [sp, #4]
    46f4:	2200      	movs	r2, #0
    46f6:	9900      	ldr	r1, [sp, #0]
    46f8:	0018      	movs	r0, r3
    46fa:	4b2f      	ldr	r3, [pc, #188]	; (47b8 <spi_rw+0x130>)
    46fc:	58e3      	ldr	r3, [r4, r3]
    46fe:	9300      	str	r3, [sp, #0]
    4700:	4798      	blx	r3

	return M2M_SUCCESS;
    4702:	2000      	movs	r0, #0
}
    4704:	b005      	add	sp, #20
    4706:	bc0c      	pop	{r2, r3}
    4708:	4690      	mov	r8, r2
    470a:	4699      	mov	r9, r3
    470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    470e:	2800      	cmp	r0, #0
    4710:	d1c9      	bne.n	46a6 <spi_rw+0x1e>
		return M2M_ERR_INVALID_ARG;
    4712:	200f      	movs	r0, #15
    4714:	4240      	negs	r0, r0
    4716:	e7f5      	b.n	4704 <spi_rw+0x7c>
		u8SkipMosi = 1;
    4718:	2301      	movs	r3, #1
    471a:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    471c:	ab02      	add	r3, sp, #8
    471e:	1ddf      	adds	r7, r3, #7
    4720:	e7c8      	b.n	46b4 <spi_rw+0x2c>
		u8SkipMiso = 1;
    4722:	2301      	movs	r3, #1
    4724:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
    4726:	ab02      	add	r3, sp, #8
    4728:	1dde      	adds	r6, r3, #7
    472a:	e7c7      	b.n	46bc <spi_rw+0x34>
		txd_data = *pu8Mosi;
    472c:	783b      	ldrb	r3, [r7, #0]
    472e:	469c      	mov	ip, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4730:	4b20      	ldr	r3, [pc, #128]	; (47b4 <spi_rw+0x12c>)
    4732:	58e3      	ldr	r3, [r4, r3]
    4734:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4736:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    4738:	07d2      	lsls	r2, r2, #31
    473a:	d5f9      	bpl.n	4730 <spi_rw+0xa8>
    473c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    473e:	07d2      	lsls	r2, r2, #31
    4740:	d508      	bpl.n	4754 <spi_rw+0xcc>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4742:	4662      	mov	r2, ip
    4744:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4746:	2000      	movs	r0, #0
		while(spi_write(&master, txd_data) != STATUS_OK)
    4748:	2800      	cmp	r0, #0
    474a:	d1f7      	bne.n	473c <spi_rw+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    474c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    474e:	0752      	lsls	r2, r2, #29
    4750:	d5fc      	bpl.n	474c <spi_rw+0xc4>
    4752:	e00a      	b.n	476a <spi_rw+0xe2>
		return STATUS_BUSY;
    4754:	2005      	movs	r0, #5
    4756:	e7f7      	b.n	4748 <spi_rw+0xc0>
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4758:	0002      	movs	r2, r0
    475a:	e00f      	b.n	477c <spi_rw+0xf4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    475c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    475e:	05c9      	lsls	r1, r1, #23
    4760:	0dc9      	lsrs	r1, r1, #23
    4762:	e000      	b.n	4766 <spi_rw+0xde>
		return STATUS_ERR_IO;
    4764:	2210      	movs	r2, #16
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    4766:	2a00      	cmp	r2, #0
    4768:	d011      	beq.n	478e <spi_rw+0x106>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    476a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    476c:	0752      	lsls	r2, r2, #29
    476e:	d5f9      	bpl.n	4764 <spi_rw+0xdc>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4770:	8b5a      	ldrh	r2, [r3, #26]
    4772:	0752      	lsls	r2, r2, #29
    4774:	d5f0      	bpl.n	4758 <spi_rw+0xd0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4776:	2204      	movs	r2, #4
    4778:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    477a:	321a      	adds	r2, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    477c:	490d      	ldr	r1, [pc, #52]	; (47b4 <spi_rw+0x12c>)
    477e:	5861      	ldr	r1, [r4, r1]
    4780:	9100      	str	r1, [sp, #0]
    4782:	7989      	ldrb	r1, [r1, #6]
    4784:	2901      	cmp	r1, #1
    4786:	d0e9      	beq.n	475c <spi_rw+0xd4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4788:	6a99      	ldr	r1, [r3, #40]	; 0x28
    478a:	b2c9      	uxtb	r1, r1
    478c:	e7eb      	b.n	4766 <spi_rw+0xde>
		*pu8Miso = rxd_data;
    478e:	7031      	strb	r1, [r6, #0]
		u16Sz--;
    4790:	3d01      	subs	r5, #1
    4792:	b2ad      	uxth	r5, r5
		if (!u8SkipMiso)
    4794:	464b      	mov	r3, r9
    4796:	2b00      	cmp	r3, #0
    4798:	d100      	bne.n	479c <spi_rw+0x114>
			pu8Miso++;
    479a:	3601      	adds	r6, #1
		if (!u8SkipMosi)
    479c:	4643      	mov	r3, r8
    479e:	2b00      	cmp	r3, #0
    47a0:	d19a      	bne.n	46d8 <spi_rw+0x50>
			pu8Mosi++;
    47a2:	3701      	adds	r7, #1
    47a4:	e798      	b.n	46d8 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    47a6:	200f      	movs	r0, #15
    47a8:	4240      	negs	r0, r0
    47aa:	e7ab      	b.n	4704 <spi_rw+0x7c>
    47ac:	0000e2f2 	.word	0x0000e2f2
    47b0:	00000184 	.word	0x00000184
    47b4:	000004f4 	.word	0x000004f4
    47b8:	00000010 	.word	0x00000010

000047bc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    47bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    47be:	b093      	sub	sp, #76	; 0x4c
    47c0:	4c3e      	ldr	r4, [pc, #248]	; (48bc <nm_bus_init+0x100>)
    47c2:	447c      	add	r4, pc
	config->address_enabled = false;
    47c4:	2300      	movs	r3, #0
    47c6:	aa03      	add	r2, sp, #12
    47c8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    47ca:	7093      	strb	r3, [r2, #2]
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    47cc:	210e      	movs	r1, #14
    47ce:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    47d0:	4a3b      	ldr	r2, [pc, #236]	; (48c0 <nm_bus_init+0x104>)
    47d2:	58a5      	ldr	r5, [r4, r2]
    47d4:	7029      	strb	r1, [r5, #0]
	slave->address_enabled = config->address_enabled;
    47d6:	706b      	strb	r3, [r5, #1]
	slave->address         = config->address;
    47d8:	70ab      	strb	r3, [r5, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    47da:	2201      	movs	r2, #1
    47dc:	a902      	add	r1, sp, #8
    47de:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    47e0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    47e2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    47e4:	200e      	movs	r0, #14
    47e6:	4b37      	ldr	r3, [pc, #220]	; (48c4 <nm_bus_init+0x108>)
    47e8:	58e3      	ldr	r3, [r4, r3]
    47ea:	9301      	str	r3, [sp, #4]
    47ec:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    47ee:	782b      	ldrb	r3, [r5, #0]
	uint8_t port_index  = (gpio_pin / 128);
    47f0:	09d9      	lsrs	r1, r3, #7
	uint8_t group_index = (gpio_pin / 32);
    47f2:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    47f4:	2900      	cmp	r1, #0
    47f6:	d15b      	bne.n	48b0 <nm_bus_init+0xf4>
		return &(ports[port_index]->Group[group_index]);
    47f8:	01d2      	lsls	r2, r2, #7
    47fa:	4933      	ldr	r1, [pc, #204]	; (48c8 <nm_bus_init+0x10c>)
    47fc:	468c      	mov	ip, r1
    47fe:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4800:	211f      	movs	r1, #31
    4802:	4019      	ands	r1, r3
    4804:	2301      	movs	r3, #1
    4806:	0018      	movs	r0, r3
    4808:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    480a:	6190      	str	r0, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    480c:	ad04      	add	r5, sp, #16
    480e:	702b      	strb	r3, [r5, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    4810:	2600      	movs	r6, #0
    4812:	606e      	str	r6, [r5, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    4814:	60ae      	str	r6, [r5, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    4816:	27c0      	movs	r7, #192	; 0xc0
    4818:	03bf      	lsls	r7, r7, #14
    481a:	60ef      	str	r7, [r5, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    481c:	742e      	strb	r6, [r5, #16]
	config->run_in_standby   = false;
    481e:	746e      	strb	r6, [r5, #17]
	config->receiver_enable  = true;
    4820:	74ab      	strb	r3, [r5, #18]
	config->select_slave_low_detect_enable= true;
    4822:	74eb      	strb	r3, [r5, #19]
	config->master_slave_select_enable= false;
    4824:	752e      	strb	r6, [r5, #20]
	config->generator_source = GCLK_GENERATOR_0;
    4826:	3323      	adds	r3, #35	; 0x23
    4828:	54ee      	strb	r6, [r5, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    482a:	220c      	movs	r2, #12
    482c:	2100      	movs	r1, #0
    482e:	a80a      	add	r0, sp, #40	; 0x28
    4830:	4b26      	ldr	r3, [pc, #152]	; (48cc <nm_bus_init+0x110>)
    4832:	58e3      	ldr	r3, [r4, r3]
    4834:	9301      	str	r3, [sp, #4]
    4836:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    4838:	60ef      	str	r7, [r5, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    483a:	4b25      	ldr	r3, [pc, #148]	; (48d0 <nm_bus_init+0x114>)
    483c:	62ab      	str	r3, [r5, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    483e:	4b25      	ldr	r3, [pc, #148]	; (48d4 <nm_bus_init+0x118>)
    4840:	62eb      	str	r3, [r5, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    4842:	4b25      	ldr	r3, [pc, #148]	; (48d8 <nm_bus_init+0x11c>)
    4844:	632b      	str	r3, [r5, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    4846:	4b25      	ldr	r3, [pc, #148]	; (48dc <nm_bus_init+0x120>)
    4848:	636b      	str	r3, [r5, #52]	; 0x34
	config.master_slave_select_enable = false;
    484a:	752e      	strb	r6, [r5, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    484c:	4b24      	ldr	r3, [pc, #144]	; (48e0 <nm_bus_init+0x124>)
    484e:	61ab      	str	r3, [r5, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    4850:	4b24      	ldr	r3, [pc, #144]	; (48e4 <nm_bus_init+0x128>)
    4852:	58e3      	ldr	r3, [r4, r3]
    4854:	9301      	str	r3, [sp, #4]
    4856:	002a      	movs	r2, r5
    4858:	4923      	ldr	r1, [pc, #140]	; (48e8 <nm_bus_init+0x12c>)
    485a:	0018      	movs	r0, r3
    485c:	4b23      	ldr	r3, [pc, #140]	; (48ec <nm_bus_init+0x130>)
    485e:	58e3      	ldr	r3, [r4, r3]
    4860:	9301      	str	r3, [sp, #4]
    4862:	4798      	blx	r3
    4864:	2800      	cmp	r0, #0
    4866:	d125      	bne.n	48b4 <nm_bus_init+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4868:	4b1e      	ldr	r3, [pc, #120]	; (48e4 <nm_bus_init+0x128>)
    486a:	58e3      	ldr	r3, [r4, r3]
    486c:	681d      	ldr	r5, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    486e:	0028      	movs	r0, r5
    4870:	4b1f      	ldr	r3, [pc, #124]	; (48f0 <nm_bus_init+0x134>)
    4872:	58e3      	ldr	r3, [r4, r3]
    4874:	9301      	str	r3, [sp, #4]
    4876:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4878:	231f      	movs	r3, #31
    487a:	4018      	ands	r0, r3
    487c:	3b1e      	subs	r3, #30
    487e:	4083      	lsls	r3, r0
    4880:	4a1c      	ldr	r2, [pc, #112]	; (48f4 <nm_bus_init+0x138>)
    4882:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4884:	4b17      	ldr	r3, [pc, #92]	; (48e4 <nm_bus_init+0x128>)
    4886:	58e3      	ldr	r3, [r4, r3]
    4888:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    488a:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    488c:	2b00      	cmp	r3, #0
    488e:	d1f9      	bne.n	4884 <nm_bus_init+0xc8>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4890:	682b      	ldr	r3, [r5, #0]
    4892:	2202      	movs	r2, #2
    4894:	4313      	orrs	r3, r2
    4896:	602b      	str	r3, [r5, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    4898:	4b17      	ldr	r3, [pc, #92]	; (48f8 <nm_bus_init+0x13c>)
    489a:	58e3      	ldr	r3, [r4, r3]
    489c:	9301      	str	r3, [sp, #4]
    489e:	4798      	blx	r3
	nm_bsp_sleep(1);
    48a0:	2001      	movs	r0, #1
    48a2:	4b16      	ldr	r3, [pc, #88]	; (48fc <nm_bus_init+0x140>)
    48a4:	58e3      	ldr	r3, [r4, r3]
    48a6:	9301      	str	r3, [sp, #4]
    48a8:	4798      	blx	r3
#endif
	return result;
    48aa:	2000      	movs	r0, #0
}
    48ac:	b013      	add	sp, #76	; 0x4c
    48ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    48b0:	2200      	movs	r2, #0
    48b2:	e7a5      	b.n	4800 <nm_bus_init+0x44>
		return M2M_ERR_BUS_FAIL;
    48b4:	2006      	movs	r0, #6
    48b6:	4240      	negs	r0, r0
    48b8:	e7f8      	b.n	48ac <nm_bus_init+0xf0>
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	0000e1ca 	.word	0x0000e1ca
    48c0:	00000184 	.word	0x00000184
    48c4:	00000390 	.word	0x00000390
    48c8:	41004400 	.word	0x41004400
    48cc:	00000328 	.word	0x00000328
    48d0:	000c0002 	.word	0x000c0002
    48d4:	000d0002 	.word	0x000d0002
    48d8:	000e0002 	.word	0x000e0002
    48dc:	000f0002 	.word	0x000f0002
    48e0:	00b71b00 	.word	0x00b71b00
    48e4:	000004f4 	.word	0x000004f4
    48e8:	42001000 	.word	0x42001000
    48ec:	00000120 	.word	0x00000120
    48f0:	00000104 	.word	0x00000104
    48f4:	e000e100 	.word	0xe000e100
    48f8:	00000228 	.word	0x00000228
    48fc:	00000160 	.word	0x00000160

00004900 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    4900:	b510      	push	{r4, lr}
    4902:	b082      	sub	sp, #8
    4904:	4c12      	ldr	r4, [pc, #72]	; (4950 <nm_bus_ioctl+0x50>)
    4906:	447c      	add	r4, pc
	sint8 s8Ret = 0;
	switch(u8Cmd)
    4908:	2803      	cmp	r0, #3
    490a:	d108      	bne.n	491e <nm_bus_ioctl+0x1e>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    490c:	6808      	ldr	r0, [r1, #0]
    490e:	684b      	ldr	r3, [r1, #4]
    4910:	890a      	ldrh	r2, [r1, #8]
    4912:	0019      	movs	r1, r3
    4914:	4b0f      	ldr	r3, [pc, #60]	; (4954 <nm_bus_ioctl+0x54>)
    4916:	447b      	add	r3, pc
    4918:	4798      	blx	r3
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    491a:	b002      	add	sp, #8
    491c:	bd10      	pop	{r4, pc}
			M2M_ERR("invalide ioclt cmd\n");
    491e:	220e      	movs	r2, #14
    4920:	32ff      	adds	r2, #255	; 0xff
    4922:	490d      	ldr	r1, [pc, #52]	; (4958 <nm_bus_ioctl+0x58>)
    4924:	4479      	add	r1, pc
    4926:	480d      	ldr	r0, [pc, #52]	; (495c <nm_bus_ioctl+0x5c>)
    4928:	4478      	add	r0, pc
    492a:	4b0d      	ldr	r3, [pc, #52]	; (4960 <nm_bus_ioctl+0x60>)
    492c:	58e3      	ldr	r3, [r4, r3]
    492e:	9301      	str	r3, [sp, #4]
    4930:	4798      	blx	r3
    4932:	480c      	ldr	r0, [pc, #48]	; (4964 <nm_bus_ioctl+0x64>)
    4934:	4478      	add	r0, pc
    4936:	4b0c      	ldr	r3, [pc, #48]	; (4968 <nm_bus_ioctl+0x68>)
    4938:	58e3      	ldr	r3, [r4, r3]
    493a:	9301      	str	r3, [sp, #4]
    493c:	4798      	blx	r3
    493e:	200d      	movs	r0, #13
    4940:	4b0a      	ldr	r3, [pc, #40]	; (496c <nm_bus_ioctl+0x6c>)
    4942:	58e3      	ldr	r3, [r4, r3]
    4944:	9301      	str	r3, [sp, #4]
    4946:	4798      	blx	r3
			s8Ret = -1;
    4948:	2001      	movs	r0, #1
    494a:	4240      	negs	r0, r0
			break;
    494c:	e7e5      	b.n	491a <nm_bus_ioctl+0x1a>
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	0000e086 	.word	0x0000e086
    4954:	fffffd6f 	.word	0xfffffd6f
    4958:	0000d018 	.word	0x0000d018
    495c:	0000d024 	.word	0x0000d024
    4960:	0000003c 	.word	0x0000003c
    4964:	0000d02c 	.word	0x0000d02c
    4968:	00000108 	.word	0x00000108
    496c:	00000000 	.word	0x00000000

00004970 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    4970:	b530      	push	{r4, r5, lr}
    4972:	b085      	sub	sp, #20
    4974:	4c1a      	ldr	r4, [pc, #104]	; (49e0 <nm_bus_deinit+0x70>)
    4976:	447c      	add	r4, pc
	config->direction  = PORT_PIN_DIR_INPUT;
    4978:	2200      	movs	r2, #0
    497a:	ab03      	add	r3, sp, #12
    497c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    497e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    4980:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4982:	4b18      	ldr	r3, [pc, #96]	; (49e4 <nm_bus_deinit+0x74>)
    4984:	58e3      	ldr	r3, [r4, r3]
    4986:	681d      	ldr	r5, [r3, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4988:	0028      	movs	r0, r5
    498a:	4b17      	ldr	r3, [pc, #92]	; (49e8 <nm_bus_deinit+0x78>)
    498c:	58e3      	ldr	r3, [r4, r3]
    498e:	9301      	str	r3, [sp, #4]
    4990:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4992:	231f      	movs	r3, #31
    4994:	4018      	ands	r0, r3
    4996:	3b1e      	subs	r3, #30
    4998:	4083      	lsls	r3, r0
    499a:	2280      	movs	r2, #128	; 0x80
    499c:	4913      	ldr	r1, [pc, #76]	; (49ec <nm_bus_deinit+0x7c>)
    499e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    49a0:	4b10      	ldr	r3, [pc, #64]	; (49e4 <nm_bus_deinit+0x74>)
    49a2:	58e3      	ldr	r3, [r4, r3]
    49a4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    49a6:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    49a8:	2b00      	cmp	r3, #0
    49aa:	d1f9      	bne.n	49a0 <nm_bus_deinit+0x30>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    49ac:	338f      	adds	r3, #143	; 0x8f
    49ae:	752b      	strb	r3, [r5, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    49b0:	762b      	strb	r3, [r5, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    49b2:	682b      	ldr	r3, [r5, #0]
    49b4:	2202      	movs	r2, #2
    49b6:	4393      	bics	r3, r2
    49b8:	602b      	str	r3, [r5, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    49ba:	ad03      	add	r5, sp, #12
    49bc:	0029      	movs	r1, r5
    49be:	200c      	movs	r0, #12
    49c0:	4b0b      	ldr	r3, [pc, #44]	; (49f0 <nm_bus_deinit+0x80>)
    49c2:	58e4      	ldr	r4, [r4, r3]
    49c4:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    49c6:	0029      	movs	r1, r5
    49c8:	200f      	movs	r0, #15
    49ca:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    49cc:	0029      	movs	r1, r5
    49ce:	200d      	movs	r0, #13
    49d0:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    49d2:	0029      	movs	r1, r5
    49d4:	200e      	movs	r0, #14
    49d6:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    49d8:	2000      	movs	r0, #0
    49da:	b005      	add	sp, #20
    49dc:	bd30      	pop	{r4, r5, pc}
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	0000e016 	.word	0x0000e016
    49e4:	000004f4 	.word	0x000004f4
    49e8:	00000104 	.word	0x00000104
    49ec:	e000e100 	.word	0xe000e100
    49f0:	00000390 	.word	0x00000390

000049f4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    49f4:	2a00      	cmp	r2, #0
    49f6:	d006      	beq.n	4a06 <m2m_memcpy+0x12>
	do
	{
		*pDst = *pSrc;
    49f8:	780b      	ldrb	r3, [r1, #0]
    49fa:	7003      	strb	r3, [r0, #0]
		pDst++;
    49fc:	3001      	adds	r0, #1
		pSrc++;
    49fe:	3101      	adds	r1, #1
	}while(--sz);
    4a00:	3a01      	subs	r2, #1
    4a02:	2a00      	cmp	r2, #0
    4a04:	d1f8      	bne.n	49f8 <m2m_memcpy+0x4>
}
    4a06:	4770      	bx	lr

00004a08 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    4a08:	2a00      	cmp	r2, #0
    4a0a:	d004      	beq.n	4a16 <m2m_memset+0xe>
	do
	{
		*pBuf = val;
    4a0c:	7001      	strb	r1, [r0, #0]
		pBuf++;
    4a0e:	3001      	adds	r0, #1
	}while(--sz);
    4a10:	3a01      	subs	r2, #1
    4a12:	2a00      	cmp	r2, #0
    4a14:	d1fa      	bne.n	4a0c <m2m_memset+0x4>
}
    4a16:	4770      	bx	lr

00004a18 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    4a18:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
    4a1a:	2000      	movs	r0, #0
	while(*pcStr)
    4a1c:	e002      	b.n	4a24 <m2m_strlen+0xc>
	{
		u16StrLen ++;
    4a1e:	3001      	adds	r0, #1
    4a20:	b280      	uxth	r0, r0
		pcStr++;
    4a22:	3301      	adds	r3, #1
	while(*pcStr)
    4a24:	781a      	ldrb	r2, [r3, #0]
    4a26:	2a00      	cmp	r2, #0
    4a28:	d1f9      	bne.n	4a1e <m2m_strlen+0x6>
	}
	return u16StrLen;
}
    4a2a:	4770      	bx	lr

00004a2c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    4a2c:	4b04      	ldr	r3, [pc, #16]	; (4a40 <isr+0x14>)
    4a2e:	447b      	add	r3, pc
	gstrHifCxt.u8Interrupt++;
    4a30:	4a04      	ldr	r2, [pc, #16]	; (4a44 <isr+0x18>)
    4a32:	589a      	ldr	r2, [r3, r2]
    4a34:	78d3      	ldrb	r3, [r2, #3]
    4a36:	3301      	adds	r3, #1
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    4a3c:	4770      	bx	lr
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	0000df5e 	.word	0x0000df5e
    4a44:	000000c4 	.word	0x000000c4

00004a48 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    4a48:	4770      	bx	lr
	...

00004a4c <hif_set_rx_done>:
{
    4a4c:	b510      	push	{r4, lr}
    4a4e:	b084      	sub	sp, #16
    4a50:	4c10      	ldr	r4, [pc, #64]	; (4a94 <hif_set_rx_done+0x48>)
    4a52:	447c      	add	r4, pc
	gstrHifCxt.u8HifRXDone = 0;
    4a54:	4b10      	ldr	r3, [pc, #64]	; (4a98 <hif_set_rx_done+0x4c>)
    4a56:	58e3      	ldr	r3, [r4, r3]
    4a58:	9301      	str	r3, [sp, #4]
    4a5a:	2300      	movs	r3, #0
    4a5c:	9a01      	ldr	r2, [sp, #4]
    4a5e:	7093      	strb	r3, [r2, #2]
	nm_bsp_interrupt_ctrl(1);
    4a60:	2001      	movs	r0, #1
    4a62:	4b0e      	ldr	r3, [pc, #56]	; (4a9c <hif_set_rx_done+0x50>)
    4a64:	58e3      	ldr	r3, [r4, r3]
    4a66:	9301      	str	r3, [sp, #4]
    4a68:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    4a6a:	a903      	add	r1, sp, #12
    4a6c:	480c      	ldr	r0, [pc, #48]	; (4aa0 <hif_set_rx_done+0x54>)
    4a6e:	4b0d      	ldr	r3, [pc, #52]	; (4aa4 <hif_set_rx_done+0x58>)
    4a70:	58e3      	ldr	r3, [r4, r3]
    4a72:	9301      	str	r3, [sp, #4]
    4a74:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    4a76:	2800      	cmp	r0, #0
    4a78:	d001      	beq.n	4a7e <hif_set_rx_done+0x32>
}
    4a7a:	b004      	add	sp, #16
    4a7c:	bd10      	pop	{r4, pc}
	reg |= NBIT1;
    4a7e:	2102      	movs	r1, #2
    4a80:	9b03      	ldr	r3, [sp, #12]
    4a82:	4319      	orrs	r1, r3
    4a84:	9103      	str	r1, [sp, #12]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    4a86:	4806      	ldr	r0, [pc, #24]	; (4aa0 <hif_set_rx_done+0x54>)
    4a88:	4b07      	ldr	r3, [pc, #28]	; (4aa8 <hif_set_rx_done+0x5c>)
    4a8a:	58e3      	ldr	r3, [r4, r3]
    4a8c:	9301      	str	r3, [sp, #4]
    4a8e:	4798      	blx	r3
    4a90:	e7f3      	b.n	4a7a <hif_set_rx_done+0x2e>
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	0000df3a 	.word	0x0000df3a
    4a98:	000000c4 	.word	0x000000c4
    4a9c:	00000110 	.word	0x00000110
    4aa0:	00001070 	.word	0x00001070
    4aa4:	00000044 	.word	0x00000044
    4aa8:	000003c4 	.word	0x000003c4

00004aac <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aae:	b089      	sub	sp, #36	; 0x24
    4ab0:	4eba      	ldr	r6, [pc, #744]	; (4d9c <hif_isr+0x2f0>)
    4ab2:	447e      	add	r6, pc
	sint8 ret = M2M_SUCCESS;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    4ab4:	a907      	add	r1, sp, #28
    4ab6:	48ba      	ldr	r0, [pc, #744]	; (4da0 <hif_isr+0x2f4>)
    4ab8:	4bba      	ldr	r3, [pc, #744]	; (4da4 <hif_isr+0x2f8>)
    4aba:	58f3      	ldr	r3, [r6, r3]
    4abc:	9303      	str	r3, [sp, #12]
    4abe:	4798      	blx	r3
    4ac0:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    4ac2:	d000      	beq.n	4ac6 <hif_isr+0x1a>
    4ac4:	e244      	b.n	4f50 <hif_isr+0x4a4>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    4ac6:	9b07      	ldr	r3, [sp, #28]
    4ac8:	07db      	lsls	r3, r3, #31
    4aca:	d400      	bmi.n	4ace <hif_isr+0x22>
    4acc:	e22b      	b.n	4f26 <hif_isr+0x47a>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    4ace:	2000      	movs	r0, #0
    4ad0:	4bb5      	ldr	r3, [pc, #724]	; (4da8 <hif_isr+0x2fc>)
    4ad2:	58f3      	ldr	r3, [r6, r3]
    4ad4:	9303      	str	r3, [sp, #12]
    4ad6:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    4ad8:	2301      	movs	r3, #1
    4ada:	9907      	ldr	r1, [sp, #28]
    4adc:	4399      	bics	r1, r3
    4ade:	9107      	str	r1, [sp, #28]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    4ae0:	48af      	ldr	r0, [pc, #700]	; (4da0 <hif_isr+0x2f4>)
    4ae2:	4bb2      	ldr	r3, [pc, #712]	; (4dac <hif_isr+0x300>)
    4ae4:	58f3      	ldr	r3, [r6, r3]
    4ae6:	9303      	str	r3, [sp, #12]
    4ae8:	4798      	blx	r3
    4aea:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    4aec:	d000      	beq.n	4af0 <hif_isr+0x44>
    4aee:	e243      	b.n	4f78 <hif_isr+0x4cc>
			gstrHifCxt.u8HifRXDone = 1;
    4af0:	4baf      	ldr	r3, [pc, #700]	; (4db0 <hif_isr+0x304>)
    4af2:	58f3      	ldr	r3, [r6, r3]
    4af4:	9303      	str	r3, [sp, #12]
    4af6:	2301      	movs	r3, #1
    4af8:	9a03      	ldr	r2, [sp, #12]
    4afa:	7093      	strb	r3, [r2, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    4afc:	9b07      	ldr	r3, [sp, #28]
    4afe:	089d      	lsrs	r5, r3, #2
    4b00:	052d      	lsls	r5, r5, #20
    4b02:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    4b04:	d100      	bne.n	4b08 <hif_isr+0x5c>
    4b06:	e1f6      	b.n	4ef6 <hif_isr+0x44a>
				uint32 address = 0;
    4b08:	2300      	movs	r3, #0
    4b0a:	9305      	str	r3, [sp, #20]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    4b0c:	a905      	add	r1, sp, #20
    4b0e:	48a9      	ldr	r0, [pc, #676]	; (4db4 <hif_isr+0x308>)
    4b10:	4ba4      	ldr	r3, [pc, #656]	; (4da4 <hif_isr+0x2f8>)
    4b12:	58f3      	ldr	r3, [r6, r3]
    4b14:	9303      	str	r3, [sp, #12]
    4b16:	4798      	blx	r3
    4b18:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    4b1a:	d01a      	beq.n	4b52 <hif_isr+0xa6>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    4b1c:	22c8      	movs	r2, #200	; 0xc8
    4b1e:	32ff      	adds	r2, #255	; 0xff
    4b20:	49a5      	ldr	r1, [pc, #660]	; (4db8 <hif_isr+0x30c>)
    4b22:	4479      	add	r1, pc
    4b24:	48a5      	ldr	r0, [pc, #660]	; (4dbc <hif_isr+0x310>)
    4b26:	4478      	add	r0, pc
    4b28:	4ba5      	ldr	r3, [pc, #660]	; (4dc0 <hif_isr+0x314>)
    4b2a:	58f3      	ldr	r3, [r6, r3]
    4b2c:	9303      	str	r3, [sp, #12]
    4b2e:	4798      	blx	r3
    4b30:	48a4      	ldr	r0, [pc, #656]	; (4dc4 <hif_isr+0x318>)
    4b32:	4478      	add	r0, pc
    4b34:	4ba4      	ldr	r3, [pc, #656]	; (4dc8 <hif_isr+0x31c>)
    4b36:	58f3      	ldr	r3, [r6, r3]
    4b38:	9303      	str	r3, [sp, #12]
    4b3a:	4798      	blx	r3
    4b3c:	200d      	movs	r0, #13
    4b3e:	4ba3      	ldr	r3, [pc, #652]	; (4dcc <hif_isr+0x320>)
    4b40:	58f3      	ldr	r3, [r6, r3]
    4b42:	9303      	str	r3, [sp, #12]
    4b44:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    4b46:	2001      	movs	r0, #1
    4b48:	4b97      	ldr	r3, [pc, #604]	; (4da8 <hif_isr+0x2fc>)
    4b4a:	58f3      	ldr	r3, [r6, r3]
    4b4c:	9303      	str	r3, [sp, #12]
    4b4e:	4798      	blx	r3
					goto ERR1;
    4b50:	e212      	b.n	4f78 <hif_isr+0x4cc>
				}
				gstrHifCxt.u32RxAddr = address;
    4b52:	4b97      	ldr	r3, [pc, #604]	; (4db0 <hif_isr+0x304>)
    4b54:	58f3      	ldr	r3, [r6, r3]
    4b56:	9a05      	ldr	r2, [sp, #20]
    4b58:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    4b5a:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    4b5c:	2204      	movs	r2, #4
    4b5e:	af06      	add	r7, sp, #24
    4b60:	0039      	movs	r1, r7
    4b62:	9805      	ldr	r0, [sp, #20]
    4b64:	4b9a      	ldr	r3, [pc, #616]	; (4dd0 <hif_isr+0x324>)
    4b66:	58f3      	ldr	r3, [r6, r3]
    4b68:	9303      	str	r3, [sp, #12]
    4b6a:	4798      	blx	r3
    4b6c:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    4b6e:	887b      	ldrh	r3, [r7, #2]
    4b70:	b29b      	uxth	r3, r3
    4b72:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    4b74:	2800      	cmp	r0, #0
    4b76:	d13d      	bne.n	4bf4 <hif_isr+0x148>
				{
					M2M_ERR("(hif) address bus fail\n");
					nm_bsp_interrupt_ctrl(1);
					goto ERR1;
				}
				if(strHif.u16Length != size)
    4b78:	ab06      	add	r3, sp, #24
    4b7a:	885b      	ldrh	r3, [r3, #2]
    4b7c:	b29b      	uxth	r3, r3
    4b7e:	429d      	cmp	r5, r3
    4b80:	d004      	beq.n	4b8c <hif_isr+0xe0>
				{
					if((size - strHif.u16Length) > 4)
    4b82:	ab06      	add	r3, sp, #24
    4b84:	885b      	ldrh	r3, [r3, #2]
    4b86:	1aeb      	subs	r3, r5, r3
    4b88:	2b04      	cmp	r3, #4
    4b8a:	dc4e      	bgt.n	4c2a <hif_isr+0x17e>
						ret = M2M_ERR_BUS_FAIL;
						goto ERR1;
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    4b8c:	ab06      	add	r3, sp, #24
    4b8e:	781b      	ldrb	r3, [r3, #0]
    4b90:	2b01      	cmp	r3, #1
    4b92:	d06b      	beq.n	4c6c <hif_isr+0x1c0>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					else
						M2M_ERR("WIFI callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    4b94:	ab06      	add	r3, sp, #24
    4b96:	781b      	ldrb	r3, [r3, #0]
    4b98:	2b02      	cmp	r3, #2
    4b9a:	d100      	bne.n	4b9e <hif_isr+0xf2>
    4b9c:	e0ae      	b.n	4cfc <hif_isr+0x250>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					else
						M2M_ERR("Scoket callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    4b9e:	ab06      	add	r3, sp, #24
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	2b04      	cmp	r3, #4
    4ba4:	d100      	bne.n	4ba8 <hif_isr+0xfc>
    4ba6:	e0d1      	b.n	4d4c <hif_isr+0x2a0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					else
						M2M_ERR("Ota callback is not registered\n");

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    4ba8:	ab06      	add	r3, sp, #24
    4baa:	781b      	ldrb	r3, [r3, #0]
    4bac:	2b06      	cmp	r3, #6
    4bae:	d100      	bne.n	4bb2 <hif_isr+0x106>
    4bb0:	e140      	b.n	4e34 <hif_isr+0x388>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);

					else
						M2M_ERR("Crypto callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    4bb2:	ab06      	add	r3, sp, #24
    4bb4:	781b      	ldrb	r3, [r3, #0]
    4bb6:	2b07      	cmp	r3, #7
    4bb8:	d100      	bne.n	4bbc <hif_isr+0x110>
    4bba:	e162      	b.n	4e82 <hif_isr+0x3d6>
					if(gstrHifCxt.pfSigmaCb)
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					else
						M2M_ERR("Sigma callback is not registered\n");
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    4bbc:	ab06      	add	r3, sp, #24
    4bbe:	781b      	ldrb	r3, [r3, #0]
    4bc0:	2b05      	cmp	r3, #5
    4bc2:	d100      	bne.n	4bc6 <hif_isr+0x11a>
    4bc4:	e184      	b.n	4ed0 <hif_isr+0x424>
				    if(gstrHifCxt.pfSslCb)
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    4bc6:	4a83      	ldr	r2, [pc, #524]	; (4dd4 <hif_isr+0x328>)
    4bc8:	4983      	ldr	r1, [pc, #524]	; (4dd8 <hif_isr+0x32c>)
    4bca:	4479      	add	r1, pc
    4bcc:	4883      	ldr	r0, [pc, #524]	; (4ddc <hif_isr+0x330>)
    4bce:	4478      	add	r0, pc
    4bd0:	4b7b      	ldr	r3, [pc, #492]	; (4dc0 <hif_isr+0x314>)
    4bd2:	58f3      	ldr	r3, [r6, r3]
    4bd4:	9303      	str	r3, [sp, #12]
    4bd6:	4798      	blx	r3
    4bd8:	4881      	ldr	r0, [pc, #516]	; (4de0 <hif_isr+0x334>)
    4bda:	4478      	add	r0, pc
    4bdc:	4b7a      	ldr	r3, [pc, #488]	; (4dc8 <hif_isr+0x31c>)
    4bde:	58f3      	ldr	r3, [r6, r3]
    4be0:	9303      	str	r3, [sp, #12]
    4be2:	4798      	blx	r3
    4be4:	200d      	movs	r0, #13
    4be6:	4b79      	ldr	r3, [pc, #484]	; (4dcc <hif_isr+0x320>)
    4be8:	58f3      	ldr	r3, [r6, r3]
    4bea:	9303      	str	r3, [sp, #12]
    4bec:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    4bee:	2406      	movs	r4, #6
    4bf0:	4264      	negs	r4, r4
					goto ERR1;
    4bf2:	e1c1      	b.n	4f78 <hif_isr+0x4cc>
					M2M_ERR("(hif) address bus fail\n");
    4bf4:	22d2      	movs	r2, #210	; 0xd2
    4bf6:	32ff      	adds	r2, #255	; 0xff
    4bf8:	497a      	ldr	r1, [pc, #488]	; (4de4 <hif_isr+0x338>)
    4bfa:	4479      	add	r1, pc
    4bfc:	487a      	ldr	r0, [pc, #488]	; (4de8 <hif_isr+0x33c>)
    4bfe:	4478      	add	r0, pc
    4c00:	4b6f      	ldr	r3, [pc, #444]	; (4dc0 <hif_isr+0x314>)
    4c02:	58f3      	ldr	r3, [r6, r3]
    4c04:	9303      	str	r3, [sp, #12]
    4c06:	4798      	blx	r3
    4c08:	4878      	ldr	r0, [pc, #480]	; (4dec <hif_isr+0x340>)
    4c0a:	4478      	add	r0, pc
    4c0c:	4b6e      	ldr	r3, [pc, #440]	; (4dc8 <hif_isr+0x31c>)
    4c0e:	58f3      	ldr	r3, [r6, r3]
    4c10:	9303      	str	r3, [sp, #12]
    4c12:	4798      	blx	r3
    4c14:	200d      	movs	r0, #13
    4c16:	4b6d      	ldr	r3, [pc, #436]	; (4dcc <hif_isr+0x320>)
    4c18:	58f3      	ldr	r3, [r6, r3]
    4c1a:	9303      	str	r3, [sp, #12]
    4c1c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    4c1e:	2001      	movs	r0, #1
    4c20:	4b61      	ldr	r3, [pc, #388]	; (4da8 <hif_isr+0x2fc>)
    4c22:	58f3      	ldr	r3, [r6, r3]
    4c24:	9303      	str	r3, [sp, #12]
    4c26:	4798      	blx	r3
					goto ERR1;
    4c28:	e1a6      	b.n	4f78 <hif_isr+0x4cc>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    4c2a:	22ed      	movs	r2, #237	; 0xed
    4c2c:	0052      	lsls	r2, r2, #1
    4c2e:	4970      	ldr	r1, [pc, #448]	; (4df0 <hif_isr+0x344>)
    4c30:	4479      	add	r1, pc
    4c32:	4870      	ldr	r0, [pc, #448]	; (4df4 <hif_isr+0x348>)
    4c34:	4478      	add	r0, pc
    4c36:	4b62      	ldr	r3, [pc, #392]	; (4dc0 <hif_isr+0x314>)
    4c38:	58f4      	ldr	r4, [r6, r3]
    4c3a:	47a0      	blx	r4
    4c3c:	a906      	add	r1, sp, #24
    4c3e:	884a      	ldrh	r2, [r1, #2]
    4c40:	b292      	uxth	r2, r2
    4c42:	780b      	ldrb	r3, [r1, #0]
    4c44:	b2db      	uxtb	r3, r3
    4c46:	7849      	ldrb	r1, [r1, #1]
    4c48:	9100      	str	r1, [sp, #0]
    4c4a:	0029      	movs	r1, r5
    4c4c:	486a      	ldr	r0, [pc, #424]	; (4df8 <hif_isr+0x34c>)
    4c4e:	4478      	add	r0, pc
    4c50:	47a0      	blx	r4
    4c52:	200d      	movs	r0, #13
    4c54:	4b5d      	ldr	r3, [pc, #372]	; (4dcc <hif_isr+0x320>)
    4c56:	58f3      	ldr	r3, [r6, r3]
    4c58:	9303      	str	r3, [sp, #12]
    4c5a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    4c5c:	2001      	movs	r0, #1
    4c5e:	4b52      	ldr	r3, [pc, #328]	; (4da8 <hif_isr+0x2fc>)
    4c60:	58f3      	ldr	r3, [r6, r3]
    4c62:	9303      	str	r3, [sp, #12]
    4c64:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    4c66:	2406      	movs	r4, #6
    4c68:	4264      	negs	r4, r4
						goto ERR1;
    4c6a:	e185      	b.n	4f78 <hif_isr+0x4cc>
					if(gstrHifCxt.pfWifiCb)
    4c6c:	4b50      	ldr	r3, [pc, #320]	; (4db0 <hif_isr+0x304>)
    4c6e:	58f3      	ldr	r3, [r6, r3]
    4c70:	68db      	ldr	r3, [r3, #12]
    4c72:	2b00      	cmp	r3, #0
    4c74:	d02c      	beq.n	4cd0 <hif_isr+0x224>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4c76:	4b4e      	ldr	r3, [pc, #312]	; (4db0 <hif_isr+0x304>)
    4c78:	58f3      	ldr	r3, [r6, r3]
    4c7a:	68db      	ldr	r3, [r3, #12]
    4c7c:	aa06      	add	r2, sp, #24
    4c7e:	7850      	ldrb	r0, [r2, #1]
    4c80:	b2c0      	uxtb	r0, r0
    4c82:	8851      	ldrh	r1, [r2, #2]
    4c84:	9a05      	ldr	r2, [sp, #20]
    4c86:	3208      	adds	r2, #8
    4c88:	3908      	subs	r1, #8
    4c8a:	b289      	uxth	r1, r1
    4c8c:	4798      	blx	r3
				}
				if(gstrHifCxt.u8HifRXDone)
    4c8e:	4b48      	ldr	r3, [pc, #288]	; (4db0 <hif_isr+0x304>)
    4c90:	58f3      	ldr	r3, [r6, r3]
    4c92:	9303      	str	r3, [sp, #12]
    4c94:	789b      	ldrb	r3, [r3, #2]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d100      	bne.n	4c9c <hif_isr+0x1f0>
    4c9a:	e16d      	b.n	4f78 <hif_isr+0x4cc>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    4c9c:	4a57      	ldr	r2, [pc, #348]	; (4dfc <hif_isr+0x350>)
    4c9e:	4958      	ldr	r1, [pc, #352]	; (4e00 <hif_isr+0x354>)
    4ca0:	4479      	add	r1, pc
    4ca2:	4858      	ldr	r0, [pc, #352]	; (4e04 <hif_isr+0x358>)
    4ca4:	4478      	add	r0, pc
    4ca6:	4b46      	ldr	r3, [pc, #280]	; (4dc0 <hif_isr+0x314>)
    4ca8:	58f4      	ldr	r4, [r6, r3]
    4caa:	47a0      	blx	r4
    4cac:	ab06      	add	r3, sp, #24
    4cae:	7819      	ldrb	r1, [r3, #0]
    4cb0:	b2c9      	uxtb	r1, r1
    4cb2:	785a      	ldrb	r2, [r3, #1]
    4cb4:	b2d2      	uxtb	r2, r2
    4cb6:	4854      	ldr	r0, [pc, #336]	; (4e08 <hif_isr+0x35c>)
    4cb8:	4478      	add	r0, pc
    4cba:	47a0      	blx	r4
    4cbc:	200d      	movs	r0, #13
    4cbe:	4b43      	ldr	r3, [pc, #268]	; (4dcc <hif_isr+0x320>)
    4cc0:	58f3      	ldr	r3, [r6, r3]
    4cc2:	9303      	str	r3, [sp, #12]
    4cc4:	4798      	blx	r3
					ret = hif_set_rx_done();
    4cc6:	4b51      	ldr	r3, [pc, #324]	; (4e0c <hif_isr+0x360>)
    4cc8:	447b      	add	r3, pc
    4cca:	4798      	blx	r3
    4ccc:	0004      	movs	r4, r0
    4cce:	e153      	b.n	4f78 <hif_isr+0x4cc>
						M2M_ERR("WIFI callback is not registered\n");
    4cd0:	22f3      	movs	r2, #243	; 0xf3
    4cd2:	0052      	lsls	r2, r2, #1
    4cd4:	494e      	ldr	r1, [pc, #312]	; (4e10 <hif_isr+0x364>)
    4cd6:	4479      	add	r1, pc
    4cd8:	484e      	ldr	r0, [pc, #312]	; (4e14 <hif_isr+0x368>)
    4cda:	4478      	add	r0, pc
    4cdc:	4b38      	ldr	r3, [pc, #224]	; (4dc0 <hif_isr+0x314>)
    4cde:	58f3      	ldr	r3, [r6, r3]
    4ce0:	9303      	str	r3, [sp, #12]
    4ce2:	4798      	blx	r3
    4ce4:	484c      	ldr	r0, [pc, #304]	; (4e18 <hif_isr+0x36c>)
    4ce6:	4478      	add	r0, pc
    4ce8:	4b37      	ldr	r3, [pc, #220]	; (4dc8 <hif_isr+0x31c>)
    4cea:	58f3      	ldr	r3, [r6, r3]
    4cec:	9303      	str	r3, [sp, #12]
    4cee:	4798      	blx	r3
    4cf0:	200d      	movs	r0, #13
    4cf2:	4b36      	ldr	r3, [pc, #216]	; (4dcc <hif_isr+0x320>)
    4cf4:	58f3      	ldr	r3, [r6, r3]
    4cf6:	9303      	str	r3, [sp, #12]
    4cf8:	4798      	blx	r3
    4cfa:	e7c8      	b.n	4c8e <hif_isr+0x1e2>
					if(gstrHifCxt.pfIpCb)
    4cfc:	4b2c      	ldr	r3, [pc, #176]	; (4db0 <hif_isr+0x304>)
    4cfe:	58f3      	ldr	r3, [r6, r3]
    4d00:	691b      	ldr	r3, [r3, #16]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d00c      	beq.n	4d20 <hif_isr+0x274>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4d06:	4b2a      	ldr	r3, [pc, #168]	; (4db0 <hif_isr+0x304>)
    4d08:	58f3      	ldr	r3, [r6, r3]
    4d0a:	691b      	ldr	r3, [r3, #16]
    4d0c:	aa06      	add	r2, sp, #24
    4d0e:	7850      	ldrb	r0, [r2, #1]
    4d10:	b2c0      	uxtb	r0, r0
    4d12:	8851      	ldrh	r1, [r2, #2]
    4d14:	9a05      	ldr	r2, [sp, #20]
    4d16:	3208      	adds	r2, #8
    4d18:	3908      	subs	r1, #8
    4d1a:	b289      	uxth	r1, r1
    4d1c:	4798      	blx	r3
    4d1e:	e7b6      	b.n	4c8e <hif_isr+0x1e2>
						M2M_ERR("Scoket callback is not registered\n");
    4d20:	22f7      	movs	r2, #247	; 0xf7
    4d22:	0052      	lsls	r2, r2, #1
    4d24:	493d      	ldr	r1, [pc, #244]	; (4e1c <hif_isr+0x370>)
    4d26:	4479      	add	r1, pc
    4d28:	483d      	ldr	r0, [pc, #244]	; (4e20 <hif_isr+0x374>)
    4d2a:	4478      	add	r0, pc
    4d2c:	4b24      	ldr	r3, [pc, #144]	; (4dc0 <hif_isr+0x314>)
    4d2e:	58f3      	ldr	r3, [r6, r3]
    4d30:	9303      	str	r3, [sp, #12]
    4d32:	4798      	blx	r3
    4d34:	483b      	ldr	r0, [pc, #236]	; (4e24 <hif_isr+0x378>)
    4d36:	4478      	add	r0, pc
    4d38:	4b23      	ldr	r3, [pc, #140]	; (4dc8 <hif_isr+0x31c>)
    4d3a:	58f3      	ldr	r3, [r6, r3]
    4d3c:	9303      	str	r3, [sp, #12]
    4d3e:	4798      	blx	r3
    4d40:	200d      	movs	r0, #13
    4d42:	4b22      	ldr	r3, [pc, #136]	; (4dcc <hif_isr+0x320>)
    4d44:	58f3      	ldr	r3, [r6, r3]
    4d46:	9303      	str	r3, [sp, #12]
    4d48:	4798      	blx	r3
    4d4a:	e7a0      	b.n	4c8e <hif_isr+0x1e2>
					if(gstrHifCxt.pfOtaCb)
    4d4c:	4b18      	ldr	r3, [pc, #96]	; (4db0 <hif_isr+0x304>)
    4d4e:	58f3      	ldr	r3, [r6, r3]
    4d50:	695b      	ldr	r3, [r3, #20]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d00c      	beq.n	4d70 <hif_isr+0x2c4>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4d56:	4b16      	ldr	r3, [pc, #88]	; (4db0 <hif_isr+0x304>)
    4d58:	58f3      	ldr	r3, [r6, r3]
    4d5a:	695b      	ldr	r3, [r3, #20]
    4d5c:	aa06      	add	r2, sp, #24
    4d5e:	7850      	ldrb	r0, [r2, #1]
    4d60:	b2c0      	uxtb	r0, r0
    4d62:	8851      	ldrh	r1, [r2, #2]
    4d64:	9a05      	ldr	r2, [sp, #20]
    4d66:	3208      	adds	r2, #8
    4d68:	3908      	subs	r1, #8
    4d6a:	b289      	uxth	r1, r1
    4d6c:	4798      	blx	r3
    4d6e:	e78e      	b.n	4c8e <hif_isr+0x1e2>
						M2M_ERR("Ota callback is not registered\n");
    4d70:	22fb      	movs	r2, #251	; 0xfb
    4d72:	0052      	lsls	r2, r2, #1
    4d74:	492c      	ldr	r1, [pc, #176]	; (4e28 <hif_isr+0x37c>)
    4d76:	4479      	add	r1, pc
    4d78:	482c      	ldr	r0, [pc, #176]	; (4e2c <hif_isr+0x380>)
    4d7a:	4478      	add	r0, pc
    4d7c:	4b10      	ldr	r3, [pc, #64]	; (4dc0 <hif_isr+0x314>)
    4d7e:	58f3      	ldr	r3, [r6, r3]
    4d80:	9303      	str	r3, [sp, #12]
    4d82:	4798      	blx	r3
    4d84:	482a      	ldr	r0, [pc, #168]	; (4e30 <hif_isr+0x384>)
    4d86:	4478      	add	r0, pc
    4d88:	4b0f      	ldr	r3, [pc, #60]	; (4dc8 <hif_isr+0x31c>)
    4d8a:	58f3      	ldr	r3, [r6, r3]
    4d8c:	9303      	str	r3, [sp, #12]
    4d8e:	4798      	blx	r3
    4d90:	200d      	movs	r0, #13
    4d92:	4b0e      	ldr	r3, [pc, #56]	; (4dcc <hif_isr+0x320>)
    4d94:	58f3      	ldr	r3, [r6, r3]
    4d96:	9303      	str	r3, [sp, #12]
    4d98:	4798      	blx	r3
    4d9a:	e778      	b.n	4c8e <hif_isr+0x1e2>
    4d9c:	0000deda 	.word	0x0000deda
    4da0:	00001070 	.word	0x00001070
    4da4:	00000044 	.word	0x00000044
    4da8:	00000110 	.word	0x00000110
    4dac:	000003c4 	.word	0x000003c4
    4db0:	000000c4 	.word	0x000000c4
    4db4:	00001084 	.word	0x00001084
    4db8:	0000ce5e 	.word	0x0000ce5e
    4dbc:	0000ce26 	.word	0x0000ce26
    4dc0:	0000003c 	.word	0x0000003c
    4dc4:	0000ceb2 	.word	0x0000ceb2
    4dc8:	00000108 	.word	0x00000108
    4dcc:	00000000 	.word	0x00000000
    4dd0:	000003ac 	.word	0x000003ac
    4dd4:	0000020f 	.word	0x0000020f
    4dd8:	0000cdb6 	.word	0x0000cdb6
    4ddc:	0000cd7e 	.word	0x0000cd7e
    4de0:	0000cf32 	.word	0x0000cf32
    4de4:	0000cd86 	.word	0x0000cd86
    4de8:	0000cd4e 	.word	0x0000cd4e
    4dec:	0000cdfe 	.word	0x0000cdfe
    4df0:	0000cd50 	.word	0x0000cd50
    4df4:	0000cd18 	.word	0x0000cd18
    4df8:	0000cdd2 	.word	0x0000cdd2
    4dfc:	00000215 	.word	0x00000215
    4e00:	0000cce0 	.word	0x0000cce0
    4e04:	0000cca8 	.word	0x0000cca8
    4e08:	0000ce6c 	.word	0x0000ce6c
    4e0c:	fffffd81 	.word	0xfffffd81
    4e10:	0000ccaa 	.word	0x0000ccaa
    4e14:	0000cc72 	.word	0x0000cc72
    4e18:	0000cd7a 	.word	0x0000cd7a
    4e1c:	0000cc5a 	.word	0x0000cc5a
    4e20:	0000cc22 	.word	0x0000cc22
    4e24:	0000cd4a 	.word	0x0000cd4a
    4e28:	0000cc0a 	.word	0x0000cc0a
    4e2c:	0000cbd2 	.word	0x0000cbd2
    4e30:	0000cd1e 	.word	0x0000cd1e
					if(gstrHifCxt.pfCryptoCb)
    4e34:	4b52      	ldr	r3, [pc, #328]	; (4f80 <hif_isr+0x4d4>)
    4e36:	58f3      	ldr	r3, [r6, r3]
    4e38:	6a1b      	ldr	r3, [r3, #32]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d00c      	beq.n	4e58 <hif_isr+0x3ac>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4e3e:	4b50      	ldr	r3, [pc, #320]	; (4f80 <hif_isr+0x4d4>)
    4e40:	58f3      	ldr	r3, [r6, r3]
    4e42:	6a1b      	ldr	r3, [r3, #32]
    4e44:	aa06      	add	r2, sp, #24
    4e46:	7850      	ldrb	r0, [r2, #1]
    4e48:	b2c0      	uxtb	r0, r0
    4e4a:	8851      	ldrh	r1, [r2, #2]
    4e4c:	9a05      	ldr	r2, [sp, #20]
    4e4e:	3208      	adds	r2, #8
    4e50:	3908      	subs	r1, #8
    4e52:	b289      	uxth	r1, r1
    4e54:	4798      	blx	r3
    4e56:	e71a      	b.n	4c8e <hif_isr+0x1e2>
						M2M_ERR("Crypto callback is not registered\n");
    4e58:	4a4a      	ldr	r2, [pc, #296]	; (4f84 <hif_isr+0x4d8>)
    4e5a:	494b      	ldr	r1, [pc, #300]	; (4f88 <hif_isr+0x4dc>)
    4e5c:	4479      	add	r1, pc
    4e5e:	484b      	ldr	r0, [pc, #300]	; (4f8c <hif_isr+0x4e0>)
    4e60:	4478      	add	r0, pc
    4e62:	4b4b      	ldr	r3, [pc, #300]	; (4f90 <hif_isr+0x4e4>)
    4e64:	58f3      	ldr	r3, [r6, r3]
    4e66:	9303      	str	r3, [sp, #12]
    4e68:	4798      	blx	r3
    4e6a:	484a      	ldr	r0, [pc, #296]	; (4f94 <hif_isr+0x4e8>)
    4e6c:	4478      	add	r0, pc
    4e6e:	4b4a      	ldr	r3, [pc, #296]	; (4f98 <hif_isr+0x4ec>)
    4e70:	58f3      	ldr	r3, [r6, r3]
    4e72:	9303      	str	r3, [sp, #12]
    4e74:	4798      	blx	r3
    4e76:	200d      	movs	r0, #13
    4e78:	4b48      	ldr	r3, [pc, #288]	; (4f9c <hif_isr+0x4f0>)
    4e7a:	58f3      	ldr	r3, [r6, r3]
    4e7c:	9303      	str	r3, [sp, #12]
    4e7e:	4798      	blx	r3
    4e80:	e705      	b.n	4c8e <hif_isr+0x1e2>
					if(gstrHifCxt.pfSigmaCb)
    4e82:	4b3f      	ldr	r3, [pc, #252]	; (4f80 <hif_isr+0x4d4>)
    4e84:	58f3      	ldr	r3, [r6, r3]
    4e86:	699b      	ldr	r3, [r3, #24]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d00c      	beq.n	4ea6 <hif_isr+0x3fa>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4e8c:	4b3c      	ldr	r3, [pc, #240]	; (4f80 <hif_isr+0x4d4>)
    4e8e:	58f3      	ldr	r3, [r6, r3]
    4e90:	699b      	ldr	r3, [r3, #24]
    4e92:	aa06      	add	r2, sp, #24
    4e94:	7850      	ldrb	r0, [r2, #1]
    4e96:	b2c0      	uxtb	r0, r0
    4e98:	8851      	ldrh	r1, [r2, #2]
    4e9a:	9a05      	ldr	r2, [sp, #20]
    4e9c:	3208      	adds	r2, #8
    4e9e:	3908      	subs	r1, #8
    4ea0:	b289      	uxth	r1, r1
    4ea2:	4798      	blx	r3
    4ea4:	e6f3      	b.n	4c8e <hif_isr+0x1e2>
						M2M_ERR("Sigma callback is not registered\n");
    4ea6:	4a3e      	ldr	r2, [pc, #248]	; (4fa0 <hif_isr+0x4f4>)
    4ea8:	493e      	ldr	r1, [pc, #248]	; (4fa4 <hif_isr+0x4f8>)
    4eaa:	4479      	add	r1, pc
    4eac:	483e      	ldr	r0, [pc, #248]	; (4fa8 <hif_isr+0x4fc>)
    4eae:	4478      	add	r0, pc
    4eb0:	4b37      	ldr	r3, [pc, #220]	; (4f90 <hif_isr+0x4e4>)
    4eb2:	58f3      	ldr	r3, [r6, r3]
    4eb4:	9303      	str	r3, [sp, #12]
    4eb6:	4798      	blx	r3
    4eb8:	483c      	ldr	r0, [pc, #240]	; (4fac <hif_isr+0x500>)
    4eba:	4478      	add	r0, pc
    4ebc:	4b36      	ldr	r3, [pc, #216]	; (4f98 <hif_isr+0x4ec>)
    4ebe:	58f3      	ldr	r3, [r6, r3]
    4ec0:	9303      	str	r3, [sp, #12]
    4ec2:	4798      	blx	r3
    4ec4:	200d      	movs	r0, #13
    4ec6:	4b35      	ldr	r3, [pc, #212]	; (4f9c <hif_isr+0x4f0>)
    4ec8:	58f3      	ldr	r3, [r6, r3]
    4eca:	9303      	str	r3, [sp, #12]
    4ecc:	4798      	blx	r3
    4ece:	e6de      	b.n	4c8e <hif_isr+0x1e2>
				    if(gstrHifCxt.pfSslCb)
    4ed0:	4b2b      	ldr	r3, [pc, #172]	; (4f80 <hif_isr+0x4d4>)
    4ed2:	58f3      	ldr	r3, [r6, r3]
    4ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d100      	bne.n	4edc <hif_isr+0x430>
    4eda:	e6d8      	b.n	4c8e <hif_isr+0x1e2>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4edc:	4b28      	ldr	r3, [pc, #160]	; (4f80 <hif_isr+0x4d4>)
    4ede:	58f3      	ldr	r3, [r6, r3]
    4ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ee2:	aa06      	add	r2, sp, #24
    4ee4:	7850      	ldrb	r0, [r2, #1]
    4ee6:	b2c0      	uxtb	r0, r0
    4ee8:	8851      	ldrh	r1, [r2, #2]
    4eea:	9a05      	ldr	r2, [sp, #20]
    4eec:	3208      	adds	r2, #8
    4eee:	3908      	subs	r1, #8
    4ef0:	b289      	uxth	r1, r1
    4ef2:	4798      	blx	r3
    4ef4:	e6cb      	b.n	4c8e <hif_isr+0x1e2>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    4ef6:	2287      	movs	r2, #135	; 0x87
    4ef8:	0092      	lsls	r2, r2, #2
    4efa:	492d      	ldr	r1, [pc, #180]	; (4fb0 <hif_isr+0x504>)
    4efc:	4479      	add	r1, pc
    4efe:	482d      	ldr	r0, [pc, #180]	; (4fb4 <hif_isr+0x508>)
    4f00:	4478      	add	r0, pc
    4f02:	4b23      	ldr	r3, [pc, #140]	; (4f90 <hif_isr+0x4e4>)
    4f04:	58f3      	ldr	r3, [r6, r3]
    4f06:	9303      	str	r3, [sp, #12]
    4f08:	4798      	blx	r3
    4f0a:	482b      	ldr	r0, [pc, #172]	; (4fb8 <hif_isr+0x50c>)
    4f0c:	4478      	add	r0, pc
    4f0e:	4b22      	ldr	r3, [pc, #136]	; (4f98 <hif_isr+0x4ec>)
    4f10:	58f3      	ldr	r3, [r6, r3]
    4f12:	9303      	str	r3, [sp, #12]
    4f14:	4798      	blx	r3
    4f16:	200d      	movs	r0, #13
    4f18:	4b20      	ldr	r3, [pc, #128]	; (4f9c <hif_isr+0x4f0>)
    4f1a:	58f3      	ldr	r3, [r6, r3]
    4f1c:	9303      	str	r3, [sp, #12]
    4f1e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    4f20:	2402      	movs	r4, #2
    4f22:	4264      	negs	r4, r4
				goto ERR1;
    4f24:	e028      	b.n	4f78 <hif_isr+0x4cc>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    4f26:	2289      	movs	r2, #137	; 0x89
    4f28:	0092      	lsls	r2, r2, #2
    4f2a:	4924      	ldr	r1, [pc, #144]	; (4fbc <hif_isr+0x510>)
    4f2c:	4479      	add	r1, pc
    4f2e:	4824      	ldr	r0, [pc, #144]	; (4fc0 <hif_isr+0x514>)
    4f30:	4478      	add	r0, pc
    4f32:	4b17      	ldr	r3, [pc, #92]	; (4f90 <hif_isr+0x4e4>)
    4f34:	58f4      	ldr	r4, [r6, r3]
    4f36:	47a0      	blx	r4
    4f38:	9907      	ldr	r1, [sp, #28]
    4f3a:	4822      	ldr	r0, [pc, #136]	; (4fc4 <hif_isr+0x518>)
    4f3c:	4478      	add	r0, pc
    4f3e:	47a0      	blx	r4
    4f40:	200d      	movs	r0, #13
    4f42:	4b16      	ldr	r3, [pc, #88]	; (4f9c <hif_isr+0x4f0>)
    4f44:	58f3      	ldr	r3, [r6, r3]
    4f46:	9303      	str	r3, [sp, #12]
    4f48:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4f4a:	240c      	movs	r4, #12
    4f4c:	4264      	negs	r4, r4
			goto ERR1;
    4f4e:	e013      	b.n	4f78 <hif_isr+0x4cc>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    4f50:	4a1d      	ldr	r2, [pc, #116]	; (4fc8 <hif_isr+0x51c>)
    4f52:	491e      	ldr	r1, [pc, #120]	; (4fcc <hif_isr+0x520>)
    4f54:	4479      	add	r1, pc
    4f56:	481e      	ldr	r0, [pc, #120]	; (4fd0 <hif_isr+0x524>)
    4f58:	4478      	add	r0, pc
    4f5a:	4b0d      	ldr	r3, [pc, #52]	; (4f90 <hif_isr+0x4e4>)
    4f5c:	58f3      	ldr	r3, [r6, r3]
    4f5e:	9303      	str	r3, [sp, #12]
    4f60:	4798      	blx	r3
    4f62:	481c      	ldr	r0, [pc, #112]	; (4fd4 <hif_isr+0x528>)
    4f64:	4478      	add	r0, pc
    4f66:	4b0c      	ldr	r3, [pc, #48]	; (4f98 <hif_isr+0x4ec>)
    4f68:	58f3      	ldr	r3, [r6, r3]
    4f6a:	9303      	str	r3, [sp, #12]
    4f6c:	4798      	blx	r3
    4f6e:	200d      	movs	r0, #13
    4f70:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <hif_isr+0x4f0>)
    4f72:	58f3      	ldr	r3, [r6, r3]
    4f74:	9303      	str	r3, [sp, #12]
    4f76:	4798      	blx	r3
		goto ERR1;
	}

ERR1:
	return ret;
}
    4f78:	0020      	movs	r0, r4
    4f7a:	b009      	add	sp, #36	; 0x24
    4f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	000000c4 	.word	0x000000c4
    4f84:	000001ff 	.word	0x000001ff
    4f88:	0000cb24 	.word	0x0000cb24
    4f8c:	0000caec 	.word	0x0000caec
    4f90:	0000003c 	.word	0x0000003c
    4f94:	0000cc58 	.word	0x0000cc58
    4f98:	00000108 	.word	0x00000108
    4f9c:	00000000 	.word	0x00000000
    4fa0:	00000206 	.word	0x00000206
    4fa4:	0000cad6 	.word	0x0000cad6
    4fa8:	0000ca9e 	.word	0x0000ca9e
    4fac:	0000cc2e 	.word	0x0000cc2e
    4fb0:	0000ca84 	.word	0x0000ca84
    4fb4:	0000ca4c 	.word	0x0000ca4c
    4fb8:	0000cc44 	.word	0x0000cc44
    4fbc:	0000ca54 	.word	0x0000ca54
    4fc0:	0000ca1c 	.word	0x0000ca1c
    4fc4:	0000cc28 	.word	0x0000cc28
    4fc8:	0000022d 	.word	0x0000022d
    4fcc:	0000ca2c 	.word	0x0000ca2c
    4fd0:	0000c9f4 	.word	0x0000c9f4
    4fd4:	0000cc1c 	.word	0x0000cc1c

00004fd8 <hif_chip_wake>:
{
    4fd8:	b510      	push	{r4, lr}
    4fda:	b082      	sub	sp, #8
    4fdc:	4c13      	ldr	r4, [pc, #76]	; (502c <hif_chip_wake+0x54>)
    4fde:	447c      	add	r4, pc
	if(gstrHifCxt.u8HifRXDone)
    4fe0:	4b13      	ldr	r3, [pc, #76]	; (5030 <hif_chip_wake+0x58>)
    4fe2:	58e3      	ldr	r3, [r4, r3]
    4fe4:	9301      	str	r3, [sp, #4]
    4fe6:	789b      	ldrb	r3, [r3, #2]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d11d      	bne.n	5028 <hif_chip_wake+0x50>
	if(gstrHifCxt.u8ChipSleep == 0)
    4fec:	4b10      	ldr	r3, [pc, #64]	; (5030 <hif_chip_wake+0x58>)
    4fee:	58e3      	ldr	r3, [r4, r3]
    4ff0:	9301      	str	r3, [sp, #4]
    4ff2:	785b      	ldrb	r3, [r3, #1]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d10e      	bne.n	5016 <hif_chip_wake+0x3e>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    4ff8:	4b0d      	ldr	r3, [pc, #52]	; (5030 <hif_chip_wake+0x58>)
    4ffa:	58e3      	ldr	r3, [r4, r3]
    4ffc:	9301      	str	r3, [sp, #4]
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	2b00      	cmp	r3, #0
    5002:	d101      	bne.n	5008 <hif_chip_wake+0x30>
	sint8 ret = M2M_SUCCESS;
    5004:	2000      	movs	r0, #0
    5006:	e007      	b.n	5018 <hif_chip_wake+0x40>
			ret = chip_wake();
    5008:	4b0a      	ldr	r3, [pc, #40]	; (5034 <hif_chip_wake+0x5c>)
    500a:	58e3      	ldr	r3, [r4, r3]
    500c:	9301      	str	r3, [sp, #4]
    500e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    5010:	2800      	cmp	r0, #0
    5012:	d001      	beq.n	5018 <hif_chip_wake+0x40>
    5014:	e006      	b.n	5024 <hif_chip_wake+0x4c>
	sint8 ret = M2M_SUCCESS;
    5016:	2000      	movs	r0, #0
	gstrHifCxt.u8ChipSleep++;
    5018:	4b05      	ldr	r3, [pc, #20]	; (5030 <hif_chip_wake+0x58>)
    501a:	58e2      	ldr	r2, [r4, r3]
    501c:	7853      	ldrb	r3, [r2, #1]
    501e:	3301      	adds	r3, #1
    5020:	b2db      	uxtb	r3, r3
    5022:	7053      	strb	r3, [r2, #1]
}
    5024:	b002      	add	sp, #8
    5026:	bd10      	pop	{r4, pc}
		return ret;
    5028:	2000      	movs	r0, #0
    502a:	e7fb      	b.n	5024 <hif_chip_wake+0x4c>
    502c:	0000d9ae 	.word	0x0000d9ae
    5030:	000000c4 	.word	0x000000c4
    5034:	00000434 	.word	0x00000434

00005038 <hif_chip_sleep_sc>:
{
    5038:	b082      	sub	sp, #8
    503a:	4b08      	ldr	r3, [pc, #32]	; (505c <hif_chip_sleep_sc+0x24>)
    503c:	447b      	add	r3, pc
	if(gstrHifCxt.u8ChipSleep >= 1)
    503e:	4a08      	ldr	r2, [pc, #32]	; (5060 <hif_chip_sleep_sc+0x28>)
    5040:	589a      	ldr	r2, [r3, r2]
    5042:	9201      	str	r2, [sp, #4]
    5044:	7852      	ldrb	r2, [r2, #1]
    5046:	2a00      	cmp	r2, #0
    5048:	d005      	beq.n	5056 <hif_chip_sleep_sc+0x1e>
		gstrHifCxt.u8ChipSleep--;
    504a:	4a05      	ldr	r2, [pc, #20]	; (5060 <hif_chip_sleep_sc+0x28>)
    504c:	589a      	ldr	r2, [r3, r2]
    504e:	7853      	ldrb	r3, [r2, #1]
    5050:	3b01      	subs	r3, #1
    5052:	b2db      	uxtb	r3, r3
    5054:	7053      	strb	r3, [r2, #1]
}
    5056:	2000      	movs	r0, #0
    5058:	b002      	add	sp, #8
    505a:	4770      	bx	lr
    505c:	0000d950 	.word	0x0000d950
    5060:	000000c4 	.word	0x000000c4

00005064 <hif_chip_sleep>:
{
    5064:	b500      	push	{lr}
    5066:	b083      	sub	sp, #12
    5068:	4b11      	ldr	r3, [pc, #68]	; (50b0 <hif_chip_sleep+0x4c>)
    506a:	447b      	add	r3, pc
	if(gstrHifCxt.u8ChipSleep >= 1)
    506c:	4a11      	ldr	r2, [pc, #68]	; (50b4 <hif_chip_sleep+0x50>)
    506e:	589a      	ldr	r2, [r3, r2]
    5070:	9201      	str	r2, [sp, #4]
    5072:	7852      	ldrb	r2, [r2, #1]
    5074:	2a00      	cmp	r2, #0
    5076:	d005      	beq.n	5084 <hif_chip_sleep+0x20>
		gstrHifCxt.u8ChipSleep--;
    5078:	4a0e      	ldr	r2, [pc, #56]	; (50b4 <hif_chip_sleep+0x50>)
    507a:	5899      	ldr	r1, [r3, r2]
    507c:	784a      	ldrb	r2, [r1, #1]
    507e:	3a01      	subs	r2, #1
    5080:	b2d2      	uxtb	r2, r2
    5082:	704a      	strb	r2, [r1, #1]
	if(gstrHifCxt.u8ChipSleep == 0)
    5084:	4a0b      	ldr	r2, [pc, #44]	; (50b4 <hif_chip_sleep+0x50>)
    5086:	589a      	ldr	r2, [r3, r2]
    5088:	9201      	str	r2, [sp, #4]
    508a:	7852      	ldrb	r2, [r2, #1]
    508c:	2a00      	cmp	r2, #0
    508e:	d10c      	bne.n	50aa <hif_chip_sleep+0x46>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    5090:	4a08      	ldr	r2, [pc, #32]	; (50b4 <hif_chip_sleep+0x50>)
    5092:	589a      	ldr	r2, [r3, r2]
    5094:	9201      	str	r2, [sp, #4]
    5096:	7812      	ldrb	r2, [r2, #0]
    5098:	2a00      	cmp	r2, #0
    509a:	d101      	bne.n	50a0 <hif_chip_sleep+0x3c>
	sint8 ret = M2M_SUCCESS;
    509c:	2000      	movs	r0, #0
    509e:	e005      	b.n	50ac <hif_chip_sleep+0x48>
			ret = chip_sleep();
    50a0:	4a05      	ldr	r2, [pc, #20]	; (50b8 <hif_chip_sleep+0x54>)
    50a2:	589b      	ldr	r3, [r3, r2]
    50a4:	9301      	str	r3, [sp, #4]
    50a6:	4798      	blx	r3
    50a8:	e000      	b.n	50ac <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
    50aa:	2000      	movs	r0, #0
}
    50ac:	b003      	add	sp, #12
    50ae:	bd00      	pop	{pc}
    50b0:	0000d922 	.word	0x0000d922
    50b4:	000000c4 	.word	0x000000c4
    50b8:	000003d4 	.word	0x000003d4

000050bc <hif_send>:
{
    50bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50be:	46d6      	mov	lr, sl
    50c0:	464f      	mov	r7, r9
    50c2:	4646      	mov	r6, r8
    50c4:	b5c0      	push	{r6, r7, lr}
    50c6:	b08a      	sub	sp, #40	; 0x28
    50c8:	4680      	mov	r8, r0
    50ca:	000e      	movs	r6, r1
    50cc:	9203      	str	r2, [sp, #12]
    50ce:	9302      	str	r3, [sp, #8]
    50d0:	ab12      	add	r3, sp, #72	; 0x48
    50d2:	cb04      	ldmia	r3!, {r2}
    50d4:	4691      	mov	r9, r2
    50d6:	881f      	ldrh	r7, [r3, #0]
    50d8:	ab14      	add	r3, sp, #80	; 0x50
    50da:	881b      	ldrh	r3, [r3, #0]
    50dc:	469a      	mov	sl, r3
    50de:	4d88      	ldr	r5, [pc, #544]	; (5300 <hif_send+0x244>)
    50e0:	447d      	add	r5, pc
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    50e2:	227f      	movs	r2, #127	; 0x7f
    50e4:	400a      	ands	r2, r1
    50e6:	ab09      	add	r3, sp, #36	; 0x24
    50e8:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    50ea:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    50ec:	2208      	movs	r2, #8
    50ee:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    50f0:	464b      	mov	r3, r9
    50f2:	2b00      	cmp	r3, #0
    50f4:	d03c      	beq.n	5170 <hif_send+0xb4>
		strHif.u16Length += u16DataOffset + u16DataSize;
    50f6:	a909      	add	r1, sp, #36	; 0x24
    50f8:	884b      	ldrh	r3, [r1, #2]
    50fa:	4652      	mov	r2, sl
    50fc:	19d2      	adds	r2, r2, r7
    50fe:	b292      	uxth	r2, r2
    5100:	189b      	adds	r3, r3, r2
    5102:	b29b      	uxth	r3, r3
    5104:	804b      	strh	r3, [r1, #2]
	ret = hif_chip_wake();
    5106:	4b7f      	ldr	r3, [pc, #508]	; (5304 <hif_send+0x248>)
    5108:	58eb      	ldr	r3, [r5, r3]
    510a:	9301      	str	r3, [sp, #4]
    510c:	4798      	blx	r3
    510e:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    5110:	d000      	beq.n	5114 <hif_send+0x58>
    5112:	e0de      	b.n	52d2 <hif_send+0x216>
		volatile uint32 reg, dma_addr = 0;
    5114:	2300      	movs	r3, #0
    5116:	9307      	str	r3, [sp, #28]
		volatile uint16 cnt = 0;
    5118:	aa04      	add	r2, sp, #16
    511a:	80d3      	strh	r3, [r2, #6]
		reg = 0UL;
    511c:	9306      	str	r3, [sp, #24]
		reg |= (uint32)u8Gid;
    511e:	9b06      	ldr	r3, [sp, #24]
    5120:	4642      	mov	r2, r8
    5122:	431a      	orrs	r2, r3
    5124:	9206      	str	r2, [sp, #24]
		reg |= ((uint32)u8Opcode<<8);
    5126:	0236      	lsls	r6, r6, #8
    5128:	9b06      	ldr	r3, [sp, #24]
    512a:	431e      	orrs	r6, r3
    512c:	9606      	str	r6, [sp, #24]
		reg |= ((uint32)strHif.u16Length<<16);
    512e:	ab09      	add	r3, sp, #36	; 0x24
    5130:	885b      	ldrh	r3, [r3, #2]
    5132:	041b      	lsls	r3, r3, #16
    5134:	9a06      	ldr	r2, [sp, #24]
    5136:	4313      	orrs	r3, r2
    5138:	9306      	str	r3, [sp, #24]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    513a:	9906      	ldr	r1, [sp, #24]
    513c:	4872      	ldr	r0, [pc, #456]	; (5308 <hif_send+0x24c>)
    513e:	4b73      	ldr	r3, [pc, #460]	; (530c <hif_send+0x250>)
    5140:	58eb      	ldr	r3, [r5, r3]
    5142:	9301      	str	r3, [sp, #4]
    5144:	4798      	blx	r3
    5146:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    5148:	d162      	bne.n	5210 <hif_send+0x154>
		reg = 0UL;
    514a:	2300      	movs	r3, #0
    514c:	9306      	str	r3, [sp, #24]
		reg |= NBIT1;
    514e:	9b06      	ldr	r3, [sp, #24]
    5150:	2202      	movs	r2, #2
    5152:	4313      	orrs	r3, r2
    5154:	9306      	str	r3, [sp, #24]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    5156:	9906      	ldr	r1, [sp, #24]
    5158:	486d      	ldr	r0, [pc, #436]	; (5310 <hif_send+0x254>)
    515a:	4b6c      	ldr	r3, [pc, #432]	; (530c <hif_send+0x250>)
    515c:	58eb      	ldr	r3, [r5, r3]
    515e:	9301      	str	r3, [sp, #4]
    5160:	4798      	blx	r3
    5162:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    5164:	d154      	bne.n	5210 <hif_send+0x154>
		dma_addr = 0;
    5166:	2300      	movs	r3, #0
    5168:	9307      	str	r3, [sp, #28]
		for(cnt = 0; cnt < 1000; cnt ++)
    516a:	aa04      	add	r2, sp, #16
    516c:	80d3      	strh	r3, [r2, #6]
    516e:	e015      	b.n	519c <hif_send+0xe0>
		strHif.u16Length += u16CtrlBufSize;
    5170:	aa09      	add	r2, sp, #36	; 0x24
    5172:	8853      	ldrh	r3, [r2, #2]
    5174:	9902      	ldr	r1, [sp, #8]
    5176:	468c      	mov	ip, r1
    5178:	4463      	add	r3, ip
    517a:	b29b      	uxth	r3, r3
    517c:	8053      	strh	r3, [r2, #2]
    517e:	e7c2      	b.n	5106 <hif_send+0x4a>
				nm_bsp_sleep(1);
    5180:	2001      	movs	r0, #1
    5182:	4b64      	ldr	r3, [pc, #400]	; (5314 <hif_send+0x258>)
    5184:	58eb      	ldr	r3, [r5, r3]
    5186:	9301      	str	r3, [sp, #4]
    5188:	4798      	blx	r3
			if (!(reg & NBIT1))
    518a:	9b06      	ldr	r3, [sp, #24]
    518c:	079b      	lsls	r3, r3, #30
    518e:	d535      	bpl.n	51fc <hif_send+0x140>
		for(cnt = 0; cnt < 1000; cnt ++)
    5190:	ab04      	add	r3, sp, #16
    5192:	1d9a      	adds	r2, r3, #6
    5194:	88db      	ldrh	r3, [r3, #6]
    5196:	3301      	adds	r3, #1
    5198:	b29b      	uxth	r3, r3
    519a:	8013      	strh	r3, [r2, #0]
    519c:	ab04      	add	r3, sp, #16
    519e:	3306      	adds	r3, #6
    51a0:	881b      	ldrh	r3, [r3, #0]
    51a2:	b29b      	uxth	r3, r3
    51a4:	4a5c      	ldr	r2, [pc, #368]	; (5318 <hif_send+0x25c>)
    51a6:	4293      	cmp	r3, r2
    51a8:	d83d      	bhi.n	5226 <hif_send+0x16a>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    51aa:	a906      	add	r1, sp, #24
    51ac:	4858      	ldr	r0, [pc, #352]	; (5310 <hif_send+0x254>)
    51ae:	4b5b      	ldr	r3, [pc, #364]	; (531c <hif_send+0x260>)
    51b0:	58eb      	ldr	r3, [r5, r3]
    51b2:	9301      	str	r3, [sp, #4]
    51b4:	4798      	blx	r3
			if(ret != M2M_SUCCESS) break;
    51b6:	2800      	cmp	r0, #0
    51b8:	d135      	bne.n	5226 <hif_send+0x16a>
			if(cnt >= 500) {
    51ba:	ab04      	add	r3, sp, #16
    51bc:	3306      	adds	r3, #6
    51be:	881b      	ldrh	r3, [r3, #0]
    51c0:	b29b      	uxth	r3, r3
    51c2:	22f4      	movs	r2, #244	; 0xf4
    51c4:	32ff      	adds	r2, #255	; 0xff
    51c6:	4293      	cmp	r3, r2
    51c8:	d9df      	bls.n	518a <hif_send+0xce>
				if(cnt < 501) {
    51ca:	ab04      	add	r3, sp, #16
    51cc:	3306      	adds	r3, #6
    51ce:	881b      	ldrh	r3, [r3, #0]
    51d0:	b29b      	uxth	r3, r3
    51d2:	3201      	adds	r2, #1
    51d4:	4293      	cmp	r3, r2
    51d6:	d8d3      	bhi.n	5180 <hif_send+0xc4>
					M2M_INFO("Slowing down...\n");
    51d8:	4851      	ldr	r0, [pc, #324]	; (5320 <hif_send+0x264>)
    51da:	4478      	add	r0, pc
    51dc:	4b51      	ldr	r3, [pc, #324]	; (5324 <hif_send+0x268>)
    51de:	58eb      	ldr	r3, [r5, r3]
    51e0:	9301      	str	r3, [sp, #4]
    51e2:	4798      	blx	r3
    51e4:	4850      	ldr	r0, [pc, #320]	; (5328 <hif_send+0x26c>)
    51e6:	4478      	add	r0, pc
    51e8:	4b50      	ldr	r3, [pc, #320]	; (532c <hif_send+0x270>)
    51ea:	58eb      	ldr	r3, [r5, r3]
    51ec:	9301      	str	r3, [sp, #4]
    51ee:	4798      	blx	r3
    51f0:	200d      	movs	r0, #13
    51f2:	4b4f      	ldr	r3, [pc, #316]	; (5330 <hif_send+0x274>)
    51f4:	58eb      	ldr	r3, [r5, r3]
    51f6:	9301      	str	r3, [sp, #4]
    51f8:	4798      	blx	r3
    51fa:	e7c1      	b.n	5180 <hif_send+0xc4>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    51fc:	a907      	add	r1, sp, #28
    51fe:	484d      	ldr	r0, [pc, #308]	; (5334 <hif_send+0x278>)
    5200:	4b46      	ldr	r3, [pc, #280]	; (531c <hif_send+0x260>)
    5202:	58eb      	ldr	r3, [r5, r3]
    5204:	9301      	str	r3, [sp, #4]
    5206:	4798      	blx	r3
    5208:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    520a:	d00c      	beq.n	5226 <hif_send+0x16a>
					dma_addr = 0;
    520c:	2300      	movs	r3, #0
    520e:	9307      	str	r3, [sp, #28]
	hif_chip_sleep_sc();
    5210:	4b49      	ldr	r3, [pc, #292]	; (5338 <hif_send+0x27c>)
    5212:	58eb      	ldr	r3, [r5, r3]
    5214:	9301      	str	r3, [sp, #4]
    5216:	4798      	blx	r3
}
    5218:	0020      	movs	r0, r4
    521a:	b00a      	add	sp, #40	; 0x28
    521c:	bc1c      	pop	{r2, r3, r4}
    521e:	4690      	mov	r8, r2
    5220:	4699      	mov	r9, r3
    5222:	46a2      	mov	sl, r4
    5224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    5226:	9b07      	ldr	r3, [sp, #28]
    5228:	2b00      	cmp	r3, #0
    522a:	d04b      	beq.n	52c4 <hif_send+0x208>
			u32CurrAddr = dma_addr;
    522c:	9b07      	ldr	r3, [sp, #28]
    522e:	9308      	str	r3, [sp, #32]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    5230:	a909      	add	r1, sp, #36	; 0x24
    5232:	884b      	ldrh	r3, [r1, #2]
    5234:	b29b      	uxth	r3, r3
    5236:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    5238:	9808      	ldr	r0, [sp, #32]
    523a:	2208      	movs	r2, #8
    523c:	4b3f      	ldr	r3, [pc, #252]	; (533c <hif_send+0x280>)
    523e:	58eb      	ldr	r3, [r5, r3]
    5240:	9301      	str	r3, [sp, #4]
    5242:	4798      	blx	r3
    5244:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    5246:	d1e3      	bne.n	5210 <hif_send+0x154>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    5248:	9b08      	ldr	r3, [sp, #32]
    524a:	3308      	adds	r3, #8
    524c:	9308      	str	r3, [sp, #32]
			if(pu8CtrlBuf != NULL)
    524e:	9b03      	ldr	r3, [sp, #12]
    5250:	2b00      	cmp	r3, #0
    5252:	d00d      	beq.n	5270 <hif_send+0x1b4>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    5254:	9808      	ldr	r0, [sp, #32]
    5256:	9e02      	ldr	r6, [sp, #8]
    5258:	0032      	movs	r2, r6
    525a:	0019      	movs	r1, r3
    525c:	4b37      	ldr	r3, [pc, #220]	; (533c <hif_send+0x280>)
    525e:	58eb      	ldr	r3, [r5, r3]
    5260:	9301      	str	r3, [sp, #4]
    5262:	4798      	blx	r3
    5264:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    5266:	d1d3      	bne.n	5210 <hif_send+0x154>
				u32CurrAddr += u16CtrlBufSize;
    5268:	9b08      	ldr	r3, [sp, #32]
    526a:	46b4      	mov	ip, r6
    526c:	4463      	add	r3, ip
    526e:	9308      	str	r3, [sp, #32]
			if(pu8DataBuf != NULL)
    5270:	464b      	mov	r3, r9
    5272:	2b00      	cmp	r3, #0
    5274:	d011      	beq.n	529a <hif_send+0x1de>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    5276:	4653      	mov	r3, sl
    5278:	9a02      	ldr	r2, [sp, #8]
    527a:	1a9b      	subs	r3, r3, r2
    527c:	9a08      	ldr	r2, [sp, #32]
    527e:	189b      	adds	r3, r3, r2
    5280:	9308      	str	r3, [sp, #32]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    5282:	9808      	ldr	r0, [sp, #32]
    5284:	003a      	movs	r2, r7
    5286:	4649      	mov	r1, r9
    5288:	4b2c      	ldr	r3, [pc, #176]	; (533c <hif_send+0x280>)
    528a:	58eb      	ldr	r3, [r5, r3]
    528c:	9301      	str	r3, [sp, #4]
    528e:	4798      	blx	r3
    5290:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    5292:	d1bd      	bne.n	5210 <hif_send+0x154>
				u32CurrAddr += u16DataSize;
    5294:	9b08      	ldr	r3, [sp, #32]
    5296:	18fb      	adds	r3, r7, r3
    5298:	9308      	str	r3, [sp, #32]
			reg = dma_addr << 2;
    529a:	9b07      	ldr	r3, [sp, #28]
    529c:	009b      	lsls	r3, r3, #2
    529e:	9306      	str	r3, [sp, #24]
			reg |= NBIT1;
    52a0:	9b06      	ldr	r3, [sp, #24]
    52a2:	2202      	movs	r2, #2
    52a4:	4313      	orrs	r3, r2
    52a6:	9306      	str	r3, [sp, #24]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    52a8:	9906      	ldr	r1, [sp, #24]
    52aa:	4825      	ldr	r0, [pc, #148]	; (5340 <hif_send+0x284>)
    52ac:	4b17      	ldr	r3, [pc, #92]	; (530c <hif_send+0x250>)
    52ae:	58eb      	ldr	r3, [r5, r3]
    52b0:	9301      	str	r3, [sp, #4]
    52b2:	4798      	blx	r3
    52b4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    52b6:	d1ab      	bne.n	5210 <hif_send+0x154>
 	ret = hif_chip_sleep();
    52b8:	4b22      	ldr	r3, [pc, #136]	; (5344 <hif_send+0x288>)
    52ba:	58eb      	ldr	r3, [r5, r3]
    52bc:	9301      	str	r3, [sp, #4]
    52be:	4798      	blx	r3
    52c0:	0004      	movs	r4, r0
	return ret;
    52c2:	e7a9      	b.n	5218 <hif_send+0x15c>
			ret = hif_chip_sleep();
    52c4:	4b1f      	ldr	r3, [pc, #124]	; (5344 <hif_send+0x288>)
    52c6:	58eb      	ldr	r3, [r5, r3]
    52c8:	9301      	str	r3, [sp, #4]
    52ca:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    52cc:	2403      	movs	r4, #3
    52ce:	4264      	negs	r4, r4
			goto ERR2;
    52d0:	e7a2      	b.n	5218 <hif_send+0x15c>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    52d2:	22cb      	movs	r2, #203	; 0xcb
    52d4:	0052      	lsls	r2, r2, #1
    52d6:	491c      	ldr	r1, [pc, #112]	; (5348 <hif_send+0x28c>)
    52d8:	4479      	add	r1, pc
    52da:	481c      	ldr	r0, [pc, #112]	; (534c <hif_send+0x290>)
    52dc:	4478      	add	r0, pc
    52de:	4b11      	ldr	r3, [pc, #68]	; (5324 <hif_send+0x268>)
    52e0:	58eb      	ldr	r3, [r5, r3]
    52e2:	9301      	str	r3, [sp, #4]
    52e4:	4798      	blx	r3
    52e6:	481a      	ldr	r0, [pc, #104]	; (5350 <hif_send+0x294>)
    52e8:	4478      	add	r0, pc
    52ea:	4b10      	ldr	r3, [pc, #64]	; (532c <hif_send+0x270>)
    52ec:	58eb      	ldr	r3, [r5, r3]
    52ee:	9301      	str	r3, [sp, #4]
    52f0:	4798      	blx	r3
    52f2:	200d      	movs	r0, #13
    52f4:	4b0e      	ldr	r3, [pc, #56]	; (5330 <hif_send+0x274>)
    52f6:	58eb      	ldr	r3, [r5, r3]
    52f8:	9301      	str	r3, [sp, #4]
    52fa:	4798      	blx	r3
		goto ERR2;
    52fc:	e78c      	b.n	5218 <hif_send+0x15c>
    52fe:	46c0      	nop			; (mov r8, r8)
    5300:	0000d8ac 	.word	0x0000d8ac
    5304:	000003fc 	.word	0x000003fc
    5308:	0000108c 	.word	0x0000108c
    530c:	000003c4 	.word	0x000003c4
    5310:	00001078 	.word	0x00001078
    5314:	00000160 	.word	0x00000160
    5318:	000003e7 	.word	0x000003e7
    531c:	00000044 	.word	0x00000044
    5320:	0000ca82 	.word	0x0000ca82
    5324:	0000003c 	.word	0x0000003c
    5328:	0000ca82 	.word	0x0000ca82
    532c:	00000108 	.word	0x00000108
    5330:	00000000 	.word	0x00000000
    5334:	00150400 	.word	0x00150400
    5338:	000002a0 	.word	0x000002a0
    533c:	00000404 	.word	0x00000404
    5340:	0000106c 	.word	0x0000106c
    5344:	000003a8 	.word	0x000003a8
    5348:	0000c69c 	.word	0x0000c69c
    534c:	0000c670 	.word	0x0000c670
    5350:	0000c990 	.word	0x0000c990

00005354 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    5354:	b570      	push	{r4, r5, r6, lr}
    5356:	b082      	sub	sp, #8
    5358:	4e13      	ldr	r6, [pc, #76]	; (53a8 <hif_handle_isr+0x54>)
    535a:	447e      	add	r6, pc
	sint8 ret = M2M_SUCCESS;	
    535c:	2000      	movs	r0, #0
	while (gstrHifCxt.u8Interrupt) {
    535e:	4b13      	ldr	r3, [pc, #76]	; (53ac <hif_handle_isr+0x58>)
    5360:	58f3      	ldr	r3, [r6, r3]
    5362:	9301      	str	r3, [sp, #4]
    5364:	78db      	ldrb	r3, [r3, #3]
    5366:	2b00      	cmp	r3, #0
    5368:	d01c      	beq.n	53a4 <hif_handle_isr+0x50>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    536a:	4b10      	ldr	r3, [pc, #64]	; (53ac <hif_handle_isr+0x58>)
    536c:	58f2      	ldr	r2, [r6, r3]
    536e:	78d3      	ldrb	r3, [r2, #3]
    5370:	3b01      	subs	r3, #1
    5372:	b2db      	uxtb	r3, r3
    5374:	70d3      	strb	r3, [r2, #3]
		while(1)
		{
			ret = hif_isr();
    5376:	4b0e      	ldr	r3, [pc, #56]	; (53b0 <hif_handle_isr+0x5c>)
    5378:	447b      	add	r3, pc
    537a:	4798      	blx	r3
    537c:	1e04      	subs	r4, r0, #0
			if(ret == M2M_SUCCESS) {
    537e:	d0ee      	beq.n	535e <hif_handle_isr+0xa>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    5380:	4a0c      	ldr	r2, [pc, #48]	; (53b4 <hif_handle_isr+0x60>)
    5382:	490d      	ldr	r1, [pc, #52]	; (53b8 <hif_handle_isr+0x64>)
    5384:	4479      	add	r1, pc
    5386:	480d      	ldr	r0, [pc, #52]	; (53bc <hif_handle_isr+0x68>)
    5388:	4478      	add	r0, pc
    538a:	4b0d      	ldr	r3, [pc, #52]	; (53c0 <hif_handle_isr+0x6c>)
    538c:	58f5      	ldr	r5, [r6, r3]
    538e:	47a8      	blx	r5
    5390:	0021      	movs	r1, r4
    5392:	480c      	ldr	r0, [pc, #48]	; (53c4 <hif_handle_isr+0x70>)
    5394:	4478      	add	r0, pc
    5396:	47a8      	blx	r5
    5398:	200d      	movs	r0, #13
    539a:	4b0b      	ldr	r3, [pc, #44]	; (53c8 <hif_handle_isr+0x74>)
    539c:	58f3      	ldr	r3, [r6, r3]
    539e:	9301      	str	r3, [sp, #4]
    53a0:	4798      	blx	r3
			ret = hif_isr();
    53a2:	e7e8      	b.n	5376 <hif_handle_isr+0x22>
			}
		}
	}

	return ret;
}
    53a4:	b002      	add	sp, #8
    53a6:	bd70      	pop	{r4, r5, r6, pc}
    53a8:	0000d632 	.word	0x0000d632
    53ac:	000000c4 	.word	0x000000c4
    53b0:	fffff731 	.word	0xfffff731
    53b4:	0000024a 	.word	0x0000024a
    53b8:	0000c604 	.word	0x0000c604
    53bc:	0000c5c4 	.word	0x0000c5c4
    53c0:	0000003c 	.word	0x0000003c
    53c4:	0000c620 	.word	0x0000c620
    53c8:	00000000 	.word	0x00000000

000053cc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    53cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ce:	b083      	sub	sp, #12
    53d0:	0015      	movs	r5, r2
    53d2:	001e      	movs	r6, r3
    53d4:	4c3c      	ldr	r4, [pc, #240]	; (54c8 <hif_receive+0xfc>)
    53d6:	447c      	add	r4, pc
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    53d8:	2800      	cmp	r0, #0
    53da:	d003      	beq.n	53e4 <hif_receive+0x18>
    53dc:	2900      	cmp	r1, #0
    53de:	d001      	beq.n	53e4 <hif_receive+0x18>
    53e0:	2a00      	cmp	r2, #0
    53e2:	d11d      	bne.n	5420 <hif_receive+0x54>
	{
		if(isDone)
    53e4:	2e00      	cmp	r6, #0
    53e6:	d004      	beq.n	53f2 <hif_receive+0x26>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    53e8:	4b38      	ldr	r3, [pc, #224]	; (54cc <hif_receive+0x100>)
    53ea:	447b      	add	r3, pc
    53ec:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    53ee:	b003      	add	sp, #12
    53f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    53f2:	4a37      	ldr	r2, [pc, #220]	; (54d0 <hif_receive+0x104>)
    53f4:	4937      	ldr	r1, [pc, #220]	; (54d4 <hif_receive+0x108>)
    53f6:	4479      	add	r1, pc
    53f8:	4837      	ldr	r0, [pc, #220]	; (54d8 <hif_receive+0x10c>)
    53fa:	4478      	add	r0, pc
    53fc:	4b37      	ldr	r3, [pc, #220]	; (54dc <hif_receive+0x110>)
    53fe:	58e3      	ldr	r3, [r4, r3]
    5400:	9301      	str	r3, [sp, #4]
    5402:	4798      	blx	r3
    5404:	4836      	ldr	r0, [pc, #216]	; (54e0 <hif_receive+0x114>)
    5406:	4478      	add	r0, pc
    5408:	4b36      	ldr	r3, [pc, #216]	; (54e4 <hif_receive+0x118>)
    540a:	58e3      	ldr	r3, [r4, r3]
    540c:	9301      	str	r3, [sp, #4]
    540e:	4798      	blx	r3
    5410:	200d      	movs	r0, #13
    5412:	4b35      	ldr	r3, [pc, #212]	; (54e8 <hif_receive+0x11c>)
    5414:	58e3      	ldr	r3, [r4, r3]
    5416:	9301      	str	r3, [sp, #4]
    5418:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    541a:	200c      	movs	r0, #12
    541c:	4240      	negs	r0, r0
    541e:	e7e6      	b.n	53ee <hif_receive+0x22>
	if(u16Sz > gstrHifCxt.u32RxSize)
    5420:	4b32      	ldr	r3, [pc, #200]	; (54ec <hif_receive+0x120>)
    5422:	58e3      	ldr	r3, [r4, r3]
    5424:	689b      	ldr	r3, [r3, #8]
    5426:	429a      	cmp	r2, r3
    5428:	d820      	bhi.n	546c <hif_receive+0xa0>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    542a:	4b30      	ldr	r3, [pc, #192]	; (54ec <hif_receive+0x120>)
    542c:	58e3      	ldr	r3, [r4, r3]
    542e:	685b      	ldr	r3, [r3, #4]
    5430:	4298      	cmp	r0, r3
    5432:	d332      	bcc.n	549a <hif_receive+0xce>
    5434:	1887      	adds	r7, r0, r2
    5436:	4b2d      	ldr	r3, [pc, #180]	; (54ec <hif_receive+0x120>)
    5438:	58e2      	ldr	r2, [r4, r3]
    543a:	6853      	ldr	r3, [r2, #4]
    543c:	6892      	ldr	r2, [r2, #8]
    543e:	189b      	adds	r3, r3, r2
    5440:	429f      	cmp	r7, r3
    5442:	d82a      	bhi.n	549a <hif_receive+0xce>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    5444:	002a      	movs	r2, r5
    5446:	4b2a      	ldr	r3, [pc, #168]	; (54f0 <hif_receive+0x124>)
    5448:	58e3      	ldr	r3, [r4, r3]
    544a:	9301      	str	r3, [sp, #4]
    544c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    544e:	2800      	cmp	r0, #0
    5450:	d1cd      	bne.n	53ee <hif_receive+0x22>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    5452:	4b26      	ldr	r3, [pc, #152]	; (54ec <hif_receive+0x120>)
    5454:	58e2      	ldr	r2, [r4, r3]
    5456:	6853      	ldr	r3, [r2, #4]
    5458:	6892      	ldr	r2, [r2, #8]
    545a:	189b      	adds	r3, r3, r2
    545c:	429f      	cmp	r7, r3
    545e:	d001      	beq.n	5464 <hif_receive+0x98>
    5460:	2e00      	cmp	r6, #0
    5462:	d0c4      	beq.n	53ee <hif_receive+0x22>
		ret = hif_set_rx_done();
    5464:	4b23      	ldr	r3, [pc, #140]	; (54f4 <hif_receive+0x128>)
    5466:	447b      	add	r3, pc
    5468:	4798      	blx	r3
    546a:	e7c0      	b.n	53ee <hif_receive+0x22>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    546c:	4a22      	ldr	r2, [pc, #136]	; (54f8 <hif_receive+0x12c>)
    546e:	4923      	ldr	r1, [pc, #140]	; (54fc <hif_receive+0x130>)
    5470:	4479      	add	r1, pc
    5472:	4823      	ldr	r0, [pc, #140]	; (5500 <hif_receive+0x134>)
    5474:	4478      	add	r0, pc
    5476:	4b19      	ldr	r3, [pc, #100]	; (54dc <hif_receive+0x110>)
    5478:	58e6      	ldr	r6, [r4, r3]
    547a:	47b0      	blx	r6
    547c:	4b1b      	ldr	r3, [pc, #108]	; (54ec <hif_receive+0x120>)
    547e:	58e3      	ldr	r3, [r4, r3]
    5480:	689a      	ldr	r2, [r3, #8]
    5482:	0029      	movs	r1, r5
    5484:	481f      	ldr	r0, [pc, #124]	; (5504 <hif_receive+0x138>)
    5486:	4478      	add	r0, pc
    5488:	47b0      	blx	r6
    548a:	200d      	movs	r0, #13
    548c:	4b16      	ldr	r3, [pc, #88]	; (54e8 <hif_receive+0x11c>)
    548e:	58e3      	ldr	r3, [r4, r3]
    5490:	9301      	str	r3, [sp, #4]
    5492:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5494:	200c      	movs	r0, #12
    5496:	4240      	negs	r0, r0
		goto ERR1;
    5498:	e7a9      	b.n	53ee <hif_receive+0x22>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    549a:	4a1b      	ldr	r2, [pc, #108]	; (5508 <hif_receive+0x13c>)
    549c:	491b      	ldr	r1, [pc, #108]	; (550c <hif_receive+0x140>)
    549e:	4479      	add	r1, pc
    54a0:	481b      	ldr	r0, [pc, #108]	; (5510 <hif_receive+0x144>)
    54a2:	4478      	add	r0, pc
    54a4:	4b0d      	ldr	r3, [pc, #52]	; (54dc <hif_receive+0x110>)
    54a6:	58e3      	ldr	r3, [r4, r3]
    54a8:	9301      	str	r3, [sp, #4]
    54aa:	4798      	blx	r3
    54ac:	4819      	ldr	r0, [pc, #100]	; (5514 <hif_receive+0x148>)
    54ae:	4478      	add	r0, pc
    54b0:	4b0c      	ldr	r3, [pc, #48]	; (54e4 <hif_receive+0x118>)
    54b2:	58e3      	ldr	r3, [r4, r3]
    54b4:	9301      	str	r3, [sp, #4]
    54b6:	4798      	blx	r3
    54b8:	200d      	movs	r0, #13
    54ba:	4b0b      	ldr	r3, [pc, #44]	; (54e8 <hif_receive+0x11c>)
    54bc:	58e3      	ldr	r3, [r4, r3]
    54be:	9301      	str	r3, [sp, #4]
    54c0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    54c2:	200c      	movs	r0, #12
    54c4:	4240      	negs	r0, r0
		goto ERR1;
    54c6:	e792      	b.n	53ee <hif_receive+0x22>
    54c8:	0000d5b6 	.word	0x0000d5b6
    54cc:	fffff65f 	.word	0xfffff65f
    54d0:	0000026b 	.word	0x0000026b
    54d4:	0000c5a2 	.word	0x0000c5a2
    54d8:	0000c552 	.word	0x0000c552
    54dc:	0000003c 	.word	0x0000003c
    54e0:	0000c79e 	.word	0x0000c79e
    54e4:	00000108 	.word	0x00000108
    54e8:	00000000 	.word	0x00000000
    54ec:	000000c4 	.word	0x000000c4
    54f0:	000003ac 	.word	0x000003ac
    54f4:	fffff5e3 	.word	0xfffff5e3
    54f8:	00000273 	.word	0x00000273
    54fc:	0000c528 	.word	0x0000c528
    5500:	0000c4d8 	.word	0x0000c4d8
    5504:	0000c73e 	.word	0x0000c73e
    5508:	00000279 	.word	0x00000279
    550c:	0000c4fa 	.word	0x0000c4fa
    5510:	0000c4aa 	.word	0x0000c4aa
    5514:	0000c75e 	.word	0x0000c75e

00005518 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    5518:	b570      	push	{r4, r5, r6, lr}
    551a:	b082      	sub	sp, #8
    551c:	0005      	movs	r5, r0
    551e:	4c21      	ldr	r4, [pc, #132]	; (55a4 <hif_register_cb+0x8c>)
    5520:	447c      	add	r4, pc
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    5522:	3801      	subs	r0, #1
    5524:	2806      	cmp	r0, #6
    5526:	d829      	bhi.n	557c <hif_register_cb+0x64>
    5528:	f00a f87a 	bl	f620 <__gnu_thumb1_case_uqi>
    552c:	0f14040a 	.word	0x0f14040a
    5530:	1923      	.short	0x1923
    5532:	1e          	.byte	0x1e
    5533:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    5534:	4b1c      	ldr	r3, [pc, #112]	; (55a8 <hif_register_cb+0x90>)
    5536:	58e3      	ldr	r3, [r4, r3]
    5538:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    553a:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    553c:	b002      	add	sp, #8
    553e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    5540:	4b19      	ldr	r3, [pc, #100]	; (55a8 <hif_register_cb+0x90>)
    5542:	58e3      	ldr	r3, [r4, r3]
    5544:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    5546:	2000      	movs	r0, #0
			break;
    5548:	e7f8      	b.n	553c <hif_register_cb+0x24>
			gstrHifCxt.pfOtaCb = fn;
    554a:	4b17      	ldr	r3, [pc, #92]	; (55a8 <hif_register_cb+0x90>)
    554c:	58e3      	ldr	r3, [r4, r3]
    554e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    5550:	2000      	movs	r0, #0
			break;
    5552:	e7f3      	b.n	553c <hif_register_cb+0x24>
			gstrHifCxt.pfHifCb = fn;
    5554:	4b14      	ldr	r3, [pc, #80]	; (55a8 <hif_register_cb+0x90>)
    5556:	58e3      	ldr	r3, [r4, r3]
    5558:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    555a:	2000      	movs	r0, #0
			break;
    555c:	e7ee      	b.n	553c <hif_register_cb+0x24>
			gstrHifCxt.pfCryptoCb = fn;
    555e:	4b12      	ldr	r3, [pc, #72]	; (55a8 <hif_register_cb+0x90>)
    5560:	58e3      	ldr	r3, [r4, r3]
    5562:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    5564:	2000      	movs	r0, #0
			break;
    5566:	e7e9      	b.n	553c <hif_register_cb+0x24>
			gstrHifCxt.pfSigmaCb = fn;
    5568:	4b0f      	ldr	r3, [pc, #60]	; (55a8 <hif_register_cb+0x90>)
    556a:	58e3      	ldr	r3, [r4, r3]
    556c:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    556e:	2000      	movs	r0, #0
			break;
    5570:	e7e4      	b.n	553c <hif_register_cb+0x24>
			gstrHifCxt.pfSslCb = fn;
    5572:	4b0d      	ldr	r3, [pc, #52]	; (55a8 <hif_register_cb+0x90>)
    5574:	58e3      	ldr	r3, [r4, r3]
    5576:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    5578:	2000      	movs	r0, #0
			break;
    557a:	e7df      	b.n	553c <hif_register_cb+0x24>
			M2M_ERR("GRp ? %d\n",u8Grp);
    557c:	4a0b      	ldr	r2, [pc, #44]	; (55ac <hif_register_cb+0x94>)
    557e:	490c      	ldr	r1, [pc, #48]	; (55b0 <hif_register_cb+0x98>)
    5580:	4479      	add	r1, pc
    5582:	480c      	ldr	r0, [pc, #48]	; (55b4 <hif_register_cb+0x9c>)
    5584:	4478      	add	r0, pc
    5586:	4b0c      	ldr	r3, [pc, #48]	; (55b8 <hif_register_cb+0xa0>)
    5588:	58e6      	ldr	r6, [r4, r3]
    558a:	47b0      	blx	r6
    558c:	0029      	movs	r1, r5
    558e:	480b      	ldr	r0, [pc, #44]	; (55bc <hif_register_cb+0xa4>)
    5590:	4478      	add	r0, pc
    5592:	47b0      	blx	r6
    5594:	200d      	movs	r0, #13
    5596:	4b0a      	ldr	r3, [pc, #40]	; (55c0 <hif_register_cb+0xa8>)
    5598:	58e3      	ldr	r3, [r4, r3]
    559a:	9301      	str	r3, [sp, #4]
    559c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    559e:	200c      	movs	r0, #12
    55a0:	4240      	negs	r0, r0
			break;
    55a2:	e7cb      	b.n	553c <hif_register_cb+0x24>
    55a4:	0000d46c 	.word	0x0000d46c
    55a8:	000000c4 	.word	0x000000c4
    55ac:	000002b1 	.word	0x000002b1
    55b0:	0000c424 	.word	0x0000c424
    55b4:	0000c3c8 	.word	0x0000c3c8
    55b8:	0000003c 	.word	0x0000003c
    55bc:	0000c6c0 	.word	0x0000c6c0
    55c0:	00000000 	.word	0x00000000

000055c4 <hif_init>:
{
    55c4:	b510      	push	{r4, lr}
    55c6:	b082      	sub	sp, #8
    55c8:	4c0d      	ldr	r4, [pc, #52]	; (5600 <hif_init+0x3c>)
    55ca:	447c      	add	r4, pc
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    55cc:	4b0d      	ldr	r3, [pc, #52]	; (5604 <hif_init+0x40>)
    55ce:	58e3      	ldr	r3, [r4, r3]
    55d0:	9301      	str	r3, [sp, #4]
    55d2:	2228      	movs	r2, #40	; 0x28
    55d4:	2100      	movs	r1, #0
    55d6:	0018      	movs	r0, r3
    55d8:	4b0b      	ldr	r3, [pc, #44]	; (5608 <hif_init+0x44>)
    55da:	58e3      	ldr	r3, [r4, r3]
    55dc:	9301      	str	r3, [sp, #4]
    55de:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    55e0:	480a      	ldr	r0, [pc, #40]	; (560c <hif_init+0x48>)
    55e2:	4478      	add	r0, pc
    55e4:	4b0a      	ldr	r3, [pc, #40]	; (5610 <hif_init+0x4c>)
    55e6:	58e3      	ldr	r3, [r4, r3]
    55e8:	9301      	str	r3, [sp, #4]
    55ea:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    55ec:	4909      	ldr	r1, [pc, #36]	; (5614 <hif_init+0x50>)
    55ee:	4479      	add	r1, pc
    55f0:	2003      	movs	r0, #3
    55f2:	4b09      	ldr	r3, [pc, #36]	; (5618 <hif_init+0x54>)
    55f4:	58e3      	ldr	r3, [r4, r3]
    55f6:	9301      	str	r3, [sp, #4]
    55f8:	4798      	blx	r3
}
    55fa:	2000      	movs	r0, #0
    55fc:	b002      	add	sp, #8
    55fe:	bd10      	pop	{r4, pc}
    5600:	0000d3c2 	.word	0x0000d3c2
    5604:	000000c4 	.word	0x000000c4
    5608:	000001b8 	.word	0x000001b8
    560c:	fffff447 	.word	0xfffff447
    5610:	00000028 	.word	0x00000028
    5614:	fffff457 	.word	0xfffff457
    5618:	000002f0 	.word	0x000002f0

0000561c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    561c:	b570      	push	{r4, r5, r6, lr}
    561e:	b0a0      	sub	sp, #128	; 0x80
    5620:	0004      	movs	r4, r0
    5622:	0016      	movs	r6, r2
    5624:	4dbb      	ldr	r5, [pc, #748]	; (5914 <m2m_wifi_cb+0x2f8>)
    5626:	447d      	add	r5, pc
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    5628:	282c      	cmp	r0, #44	; 0x2c
    562a:	d037      	beq.n	569c <m2m_wifi_cb+0x80>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    562c:	281b      	cmp	r0, #27
    562e:	d048      	beq.n	56c2 <m2m_wifi_cb+0xa6>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    5630:	2806      	cmp	r0, #6
    5632:	d059      	beq.n	56e8 <m2m_wifi_cb+0xcc>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    5634:	280e      	cmp	r0, #14
    5636:	d02f      	beq.n	5698 <m2m_wifi_cb+0x7c>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    5638:	2832      	cmp	r0, #50	; 0x32
    563a:	d100      	bne.n	563e <m2m_wifi_cb+0x22>
    563c:	e067      	b.n	570e <m2m_wifi_cb+0xf2>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    563e:	282f      	cmp	r0, #47	; 0x2f
    5640:	d100      	bne.n	5644 <m2m_wifi_cb+0x28>
    5642:	e077      	b.n	5734 <m2m_wifi_cb+0x118>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    5644:	2834      	cmp	r0, #52	; 0x34
    5646:	d100      	bne.n	564a <m2m_wifi_cb+0x2e>
    5648:	e090      	b.n	576c <m2m_wifi_cb+0x150>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    564a:	2811      	cmp	r0, #17
    564c:	d100      	bne.n	5650 <m2m_wifi_cb+0x34>
    564e:	e0b8      	b.n	57c2 <m2m_wifi_cb+0x1a6>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    5650:	2813      	cmp	r0, #19
    5652:	d100      	bne.n	5656 <m2m_wifi_cb+0x3a>
    5654:	e0d3      	b.n	57fe <m2m_wifi_cb+0x1e2>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    5656:	2804      	cmp	r0, #4
    5658:	d100      	bne.n	565c <m2m_wifi_cb+0x40>
    565a:	e0e5      	b.n	5828 <m2m_wifi_cb+0x20c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    565c:	2865      	cmp	r0, #101	; 0x65
    565e:	d100      	bne.n	5662 <m2m_wifi_cb+0x46>
    5660:	e0f7      	b.n	5852 <m2m_wifi_cb+0x236>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    5662:	2809      	cmp	r0, #9
    5664:	d100      	bne.n	5668 <m2m_wifi_cb+0x4c>
    5666:	e109      	b.n	587c <m2m_wifi_cb+0x260>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    5668:	282a      	cmp	r0, #42	; 0x2a
    566a:	d100      	bne.n	566e <m2m_wifi_cb+0x52>
    566c:	e11b      	b.n	58a6 <m2m_wifi_cb+0x28a>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    566e:	2820      	cmp	r0, #32
    5670:	d100      	bne.n	5674 <m2m_wifi_cb+0x58>
    5672:	e12d      	b.n	58d0 <m2m_wifi_cb+0x2b4>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    5674:	2292      	movs	r2, #146	; 0x92
    5676:	0052      	lsls	r2, r2, #1
    5678:	49a7      	ldr	r1, [pc, #668]	; (5918 <m2m_wifi_cb+0x2fc>)
    567a:	4479      	add	r1, pc
    567c:	48a7      	ldr	r0, [pc, #668]	; (591c <m2m_wifi_cb+0x300>)
    567e:	4478      	add	r0, pc
    5680:	4ba7      	ldr	r3, [pc, #668]	; (5920 <m2m_wifi_cb+0x304>)
    5682:	58ee      	ldr	r6, [r5, r3]
    5684:	47b0      	blx	r6
    5686:	0021      	movs	r1, r4
    5688:	48a6      	ldr	r0, [pc, #664]	; (5924 <m2m_wifi_cb+0x308>)
    568a:	4478      	add	r0, pc
    568c:	47b0      	blx	r6
    568e:	200d      	movs	r0, #13
    5690:	4ba5      	ldr	r3, [pc, #660]	; (5928 <m2m_wifi_cb+0x30c>)
    5692:	58eb      	ldr	r3, [r5, r3]
    5694:	9303      	str	r3, [sp, #12]
    5696:	4798      	blx	r3
	}
}
    5698:	b020      	add	sp, #128	; 0x80
    569a:	bd70      	pop	{r4, r5, r6, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    569c:	2300      	movs	r3, #0
    569e:	2204      	movs	r2, #4
    56a0:	a905      	add	r1, sp, #20
    56a2:	0030      	movs	r0, r6
    56a4:	4ca1      	ldr	r4, [pc, #644]	; (592c <m2m_wifi_cb+0x310>)
    56a6:	592c      	ldr	r4, [r5, r4]
    56a8:	9403      	str	r4, [sp, #12]
    56aa:	47a0      	blx	r4
    56ac:	2800      	cmp	r0, #0
    56ae:	d1f3      	bne.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    56b0:	4b9f      	ldr	r3, [pc, #636]	; (5930 <m2m_wifi_cb+0x314>)
    56b2:	447b      	add	r3, pc
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d0ee      	beq.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    56ba:	a905      	add	r1, sp, #20
    56bc:	302c      	adds	r0, #44	; 0x2c
    56be:	4798      	blx	r3
    56c0:	e7ea      	b.n	5698 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    56c2:	2300      	movs	r3, #0
    56c4:	2208      	movs	r2, #8
    56c6:	a905      	add	r1, sp, #20
    56c8:	0030      	movs	r0, r6
    56ca:	4c98      	ldr	r4, [pc, #608]	; (592c <m2m_wifi_cb+0x310>)
    56cc:	592c      	ldr	r4, [r5, r4]
    56ce:	9403      	str	r4, [sp, #12]
    56d0:	47a0      	blx	r4
    56d2:	2800      	cmp	r0, #0
    56d4:	d1e0      	bne.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    56d6:	4b97      	ldr	r3, [pc, #604]	; (5934 <m2m_wifi_cb+0x318>)
    56d8:	447b      	add	r3, pc
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	2b00      	cmp	r3, #0
    56de:	d0db      	beq.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    56e0:	a905      	add	r1, sp, #20
    56e2:	301b      	adds	r0, #27
    56e4:	4798      	blx	r3
    56e6:	e7d7      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    56e8:	2301      	movs	r3, #1
    56ea:	2230      	movs	r2, #48	; 0x30
    56ec:	a905      	add	r1, sp, #20
    56ee:	0030      	movs	r0, r6
    56f0:	4c8e      	ldr	r4, [pc, #568]	; (592c <m2m_wifi_cb+0x310>)
    56f2:	592c      	ldr	r4, [r5, r4]
    56f4:	9403      	str	r4, [sp, #12]
    56f6:	47a0      	blx	r4
    56f8:	2800      	cmp	r0, #0
    56fa:	d1cd      	bne.n	5698 <m2m_wifi_cb+0x7c>
			if(gpfAppWifiCb)
    56fc:	4b8e      	ldr	r3, [pc, #568]	; (5938 <m2m_wifi_cb+0x31c>)
    56fe:	447b      	add	r3, pc
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	2b00      	cmp	r3, #0
    5704:	d0c8      	beq.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    5706:	a905      	add	r1, sp, #20
    5708:	3006      	adds	r0, #6
    570a:	4798      	blx	r3
    570c:	e7c4      	b.n	5698 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    570e:	2300      	movs	r3, #0
    5710:	2214      	movs	r2, #20
    5712:	a905      	add	r1, sp, #20
    5714:	0030      	movs	r0, r6
    5716:	4c85      	ldr	r4, [pc, #532]	; (592c <m2m_wifi_cb+0x310>)
    5718:	592c      	ldr	r4, [r5, r4]
    571a:	9403      	str	r4, [sp, #12]
    571c:	47a0      	blx	r4
    571e:	2800      	cmp	r0, #0
    5720:	d1ba      	bne.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    5722:	4b86      	ldr	r3, [pc, #536]	; (593c <m2m_wifi_cb+0x320>)
    5724:	447b      	add	r3, pc
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	2b00      	cmp	r3, #0
    572a:	d0b5      	beq.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    572c:	a905      	add	r1, sp, #20
    572e:	3032      	adds	r0, #50	; 0x32
    5730:	4798      	blx	r3
    5732:	e7b1      	b.n	5698 <m2m_wifi_cb+0x7c>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    5734:	2264      	movs	r2, #100	; 0x64
    5736:	2100      	movs	r1, #0
    5738:	ac05      	add	r4, sp, #20
    573a:	0020      	movs	r0, r4
    573c:	4b80      	ldr	r3, [pc, #512]	; (5940 <m2m_wifi_cb+0x324>)
    573e:	58eb      	ldr	r3, [r5, r3]
    5740:	9303      	str	r3, [sp, #12]
    5742:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    5744:	2300      	movs	r3, #0
    5746:	2264      	movs	r2, #100	; 0x64
    5748:	0021      	movs	r1, r4
    574a:	0030      	movs	r0, r6
    574c:	4c77      	ldr	r4, [pc, #476]	; (592c <m2m_wifi_cb+0x310>)
    574e:	592c      	ldr	r4, [r5, r4]
    5750:	9403      	str	r4, [sp, #12]
    5752:	47a0      	blx	r4
    5754:	2800      	cmp	r0, #0
    5756:	d19f      	bne.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    5758:	4b7a      	ldr	r3, [pc, #488]	; (5944 <m2m_wifi_cb+0x328>)
    575a:	447b      	add	r3, pc
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	2b00      	cmp	r3, #0
    5760:	d100      	bne.n	5764 <m2m_wifi_cb+0x148>
    5762:	e799      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    5764:	a905      	add	r1, sp, #20
    5766:	302f      	adds	r0, #47	; 0x2f
    5768:	4798      	blx	r3
    576a:	e795      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    576c:	2300      	movs	r3, #0
    576e:	2204      	movs	r2, #4
    5770:	a905      	add	r1, sp, #20
    5772:	0030      	movs	r0, r6
    5774:	4c6d      	ldr	r4, [pc, #436]	; (592c <m2m_wifi_cb+0x310>)
    5776:	592c      	ldr	r4, [r5, r4]
    5778:	9403      	str	r4, [sp, #12]
    577a:	47a0      	blx	r4
    577c:	2800      	cmp	r0, #0
    577e:	d000      	beq.n	5782 <m2m_wifi_cb+0x166>
    5780:	e78a      	b.n	5698 <m2m_wifi_cb+0x7c>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    5782:	4871      	ldr	r0, [pc, #452]	; (5948 <m2m_wifi_cb+0x32c>)
    5784:	4478      	add	r0, pc
    5786:	4b66      	ldr	r3, [pc, #408]	; (5920 <m2m_wifi_cb+0x304>)
    5788:	58ec      	ldr	r4, [r5, r3]
    578a:	47a0      	blx	r4
    578c:	9e05      	ldr	r6, [sp, #20]
    578e:	0e31      	lsrs	r1, r6, #24
    5790:	0c32      	lsrs	r2, r6, #16
    5792:	0a33      	lsrs	r3, r6, #8
    5794:	20ff      	movs	r0, #255	; 0xff
    5796:	4003      	ands	r3, r0
    5798:	4002      	ands	r2, r0
    579a:	4030      	ands	r0, r6
    579c:	9000      	str	r0, [sp, #0]
    579e:	486b      	ldr	r0, [pc, #428]	; (594c <m2m_wifi_cb+0x330>)
    57a0:	4478      	add	r0, pc
    57a2:	47a0      	blx	r4
    57a4:	200d      	movs	r0, #13
    57a6:	4b60      	ldr	r3, [pc, #384]	; (5928 <m2m_wifi_cb+0x30c>)
    57a8:	58eb      	ldr	r3, [r5, r3]
    57aa:	9303      	str	r3, [sp, #12]
    57ac:	4798      	blx	r3
			if (gpfAppWifiCb)
    57ae:	4b68      	ldr	r3, [pc, #416]	; (5950 <m2m_wifi_cb+0x334>)
    57b0:	447b      	add	r3, pc
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d100      	bne.n	57ba <m2m_wifi_cb+0x19e>
    57b8:	e76e      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    57ba:	2100      	movs	r1, #0
    57bc:	2034      	movs	r0, #52	; 0x34
    57be:	4798      	blx	r3
    57c0:	e76a      	b.n	5698 <m2m_wifi_cb+0x7c>
		gu8scanInProgress = 0;
    57c2:	2200      	movs	r2, #0
    57c4:	4b63      	ldr	r3, [pc, #396]	; (5954 <m2m_wifi_cb+0x338>)
    57c6:	447b      	add	r3, pc
    57c8:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    57ca:	2300      	movs	r3, #0
    57cc:	3204      	adds	r2, #4
    57ce:	a905      	add	r1, sp, #20
    57d0:	0030      	movs	r0, r6
    57d2:	4c56      	ldr	r4, [pc, #344]	; (592c <m2m_wifi_cb+0x310>)
    57d4:	592c      	ldr	r4, [r5, r4]
    57d6:	9403      	str	r4, [sp, #12]
    57d8:	47a0      	blx	r4
    57da:	2800      	cmp	r0, #0
    57dc:	d000      	beq.n	57e0 <m2m_wifi_cb+0x1c4>
    57de:	e75b      	b.n	5698 <m2m_wifi_cb+0x7c>
			gu8ChNum = strState.u8NumofCh;
    57e0:	ab05      	add	r3, sp, #20
    57e2:	781a      	ldrb	r2, [r3, #0]
    57e4:	4b5c      	ldr	r3, [pc, #368]	; (5958 <m2m_wifi_cb+0x33c>)
    57e6:	447b      	add	r3, pc
    57e8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    57ea:	4b5c      	ldr	r3, [pc, #368]	; (595c <m2m_wifi_cb+0x340>)
    57ec:	447b      	add	r3, pc
    57ee:	681b      	ldr	r3, [r3, #0]
    57f0:	2b00      	cmp	r3, #0
    57f2:	d100      	bne.n	57f6 <m2m_wifi_cb+0x1da>
    57f4:	e750      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    57f6:	a905      	add	r1, sp, #20
    57f8:	3011      	adds	r0, #17
    57fa:	4798      	blx	r3
    57fc:	e74c      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    57fe:	2300      	movs	r3, #0
    5800:	222c      	movs	r2, #44	; 0x2c
    5802:	a905      	add	r1, sp, #20
    5804:	0030      	movs	r0, r6
    5806:	4c49      	ldr	r4, [pc, #292]	; (592c <m2m_wifi_cb+0x310>)
    5808:	592c      	ldr	r4, [r5, r4]
    580a:	9403      	str	r4, [sp, #12]
    580c:	47a0      	blx	r4
    580e:	2800      	cmp	r0, #0
    5810:	d000      	beq.n	5814 <m2m_wifi_cb+0x1f8>
    5812:	e741      	b.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    5814:	4b52      	ldr	r3, [pc, #328]	; (5960 <m2m_wifi_cb+0x344>)
    5816:	447b      	add	r3, pc
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	d100      	bne.n	5820 <m2m_wifi_cb+0x204>
    581e:	e73b      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    5820:	a905      	add	r1, sp, #20
    5822:	3013      	adds	r0, #19
    5824:	4798      	blx	r3
    5826:	e737      	b.n	5698 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    5828:	2300      	movs	r3, #0
    582a:	2204      	movs	r2, #4
    582c:	a91e      	add	r1, sp, #120	; 0x78
    582e:	0030      	movs	r0, r6
    5830:	4c3e      	ldr	r4, [pc, #248]	; (592c <m2m_wifi_cb+0x310>)
    5832:	592c      	ldr	r4, [r5, r4]
    5834:	9403      	str	r4, [sp, #12]
    5836:	47a0      	blx	r4
    5838:	2800      	cmp	r0, #0
    583a:	d000      	beq.n	583e <m2m_wifi_cb+0x222>
    583c:	e72c      	b.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    583e:	4b49      	ldr	r3, [pc, #292]	; (5964 <m2m_wifi_cb+0x348>)
    5840:	447b      	add	r3, pc
    5842:	681b      	ldr	r3, [r3, #0]
    5844:	2b00      	cmp	r3, #0
    5846:	d100      	bne.n	584a <m2m_wifi_cb+0x22e>
    5848:	e726      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    584a:	a91e      	add	r1, sp, #120	; 0x78
    584c:	3004      	adds	r0, #4
    584e:	4798      	blx	r3
    5850:	e722      	b.n	5698 <m2m_wifi_cb+0x7c>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    5852:	2300      	movs	r3, #0
    5854:	2204      	movs	r2, #4
    5856:	a91e      	add	r1, sp, #120	; 0x78
    5858:	0030      	movs	r0, r6
    585a:	4c34      	ldr	r4, [pc, #208]	; (592c <m2m_wifi_cb+0x310>)
    585c:	592c      	ldr	r4, [r5, r4]
    585e:	9403      	str	r4, [sp, #12]
    5860:	47a0      	blx	r4
    5862:	2800      	cmp	r0, #0
    5864:	d000      	beq.n	5868 <m2m_wifi_cb+0x24c>
    5866:	e717      	b.n	5698 <m2m_wifi_cb+0x7c>
			if (gpfAppWifiCb)
    5868:	4b3f      	ldr	r3, [pc, #252]	; (5968 <m2m_wifi_cb+0x34c>)
    586a:	447b      	add	r3, pc
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	2b00      	cmp	r3, #0
    5870:	d100      	bne.n	5874 <m2m_wifi_cb+0x258>
    5872:	e711      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    5874:	a91e      	add	r1, sp, #120	; 0x78
    5876:	3065      	adds	r0, #101	; 0x65
    5878:	4798      	blx	r3
    587a:	e70d      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    587c:	2301      	movs	r3, #1
    587e:	2264      	movs	r2, #100	; 0x64
    5880:	a905      	add	r1, sp, #20
    5882:	0030      	movs	r0, r6
    5884:	4c29      	ldr	r4, [pc, #164]	; (592c <m2m_wifi_cb+0x310>)
    5886:	592c      	ldr	r4, [r5, r4]
    5888:	9403      	str	r4, [sp, #12]
    588a:	47a0      	blx	r4
    588c:	2800      	cmp	r0, #0
    588e:	d000      	beq.n	5892 <m2m_wifi_cb+0x276>
    5890:	e702      	b.n	5698 <m2m_wifi_cb+0x7c>
			if(gpfAppWifiCb)
    5892:	4b36      	ldr	r3, [pc, #216]	; (596c <m2m_wifi_cb+0x350>)
    5894:	447b      	add	r3, pc
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	2b00      	cmp	r3, #0
    589a:	d100      	bne.n	589e <m2m_wifi_cb+0x282>
    589c:	e6fc      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    589e:	a905      	add	r1, sp, #20
    58a0:	3009      	adds	r0, #9
    58a2:	4798      	blx	r3
    58a4:	e6f8      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    58a6:	2301      	movs	r3, #1
    58a8:	2204      	movs	r2, #4
    58aa:	a905      	add	r1, sp, #20
    58ac:	0030      	movs	r0, r6
    58ae:	4c1f      	ldr	r4, [pc, #124]	; (592c <m2m_wifi_cb+0x310>)
    58b0:	592c      	ldr	r4, [r5, r4]
    58b2:	9403      	str	r4, [sp, #12]
    58b4:	47a0      	blx	r4
    58b6:	2800      	cmp	r0, #0
    58b8:	d000      	beq.n	58bc <m2m_wifi_cb+0x2a0>
    58ba:	e6ed      	b.n	5698 <m2m_wifi_cb+0x7c>
			if(gpfAppWifiCb)
    58bc:	4b2c      	ldr	r3, [pc, #176]	; (5970 <m2m_wifi_cb+0x354>)
    58be:	447b      	add	r3, pc
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	2b00      	cmp	r3, #0
    58c4:	d100      	bne.n	58c8 <m2m_wifi_cb+0x2ac>
    58c6:	e6e7      	b.n	5698 <m2m_wifi_cb+0x7c>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    58c8:	a905      	add	r1, sp, #20
    58ca:	302a      	adds	r0, #42	; 0x2a
    58cc:	4798      	blx	r3
    58ce:	e6e3      	b.n	5698 <m2m_wifi_cb+0x7c>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    58d0:	2300      	movs	r3, #0
    58d2:	2208      	movs	r2, #8
    58d4:	a905      	add	r1, sp, #20
    58d6:	0030      	movs	r0, r6
    58d8:	4c14      	ldr	r4, [pc, #80]	; (592c <m2m_wifi_cb+0x310>)
    58da:	592c      	ldr	r4, [r5, r4]
    58dc:	9403      	str	r4, [sp, #12]
    58de:	47a0      	blx	r4
    58e0:	2800      	cmp	r0, #0
    58e2:	d000      	beq.n	58e6 <m2m_wifi_cb+0x2ca>
    58e4:	e6d8      	b.n	5698 <m2m_wifi_cb+0x7c>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    58e6:	ab05      	add	r3, sp, #20
    58e8:	889a      	ldrh	r2, [r3, #4]
    58ea:	0030      	movs	r0, r6
    58ec:	3008      	adds	r0, #8
    58ee:	2301      	movs	r3, #1
    58f0:	9905      	ldr	r1, [sp, #20]
    58f2:	4c0e      	ldr	r4, [pc, #56]	; (592c <m2m_wifi_cb+0x310>)
    58f4:	592c      	ldr	r4, [r5, r4]
    58f6:	9403      	str	r4, [sp, #12]
    58f8:	47a0      	blx	r4
    58fa:	2800      	cmp	r0, #0
    58fc:	d000      	beq.n	5900 <m2m_wifi_cb+0x2e4>
    58fe:	e6cb      	b.n	5698 <m2m_wifi_cb+0x7c>
				if(gpfAppWifiCb)
    5900:	4b1c      	ldr	r3, [pc, #112]	; (5974 <m2m_wifi_cb+0x358>)
    5902:	447b      	add	r3, pc
    5904:	681b      	ldr	r3, [r3, #0]
    5906:	2b00      	cmp	r3, #0
    5908:	d100      	bne.n	590c <m2m_wifi_cb+0x2f0>
    590a:	e6c5      	b.n	5698 <m2m_wifi_cb+0x7c>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    590c:	a905      	add	r1, sp, #20
    590e:	3020      	adds	r0, #32
    5910:	4798      	blx	r3
    5912:	e6c1      	b.n	5698 <m2m_wifi_cb+0x7c>
    5914:	0000d366 	.word	0x0000d366
    5918:	0000c61a 	.word	0x0000c61a
    591c:	0000c2ce 	.word	0x0000c2ce
    5920:	0000003c 	.word	0x0000003c
    5924:	0000c6f2 	.word	0x0000c6f2
    5928:	00000000 	.word	0x00000000
    592c:	00000208 	.word	0x00000208
    5930:	1fffb25e 	.word	0x1fffb25e
    5934:	1fffb238 	.word	0x1fffb238
    5938:	1fffb212 	.word	0x1fffb212
    593c:	1fffb1ec 	.word	0x1fffb1ec
    5940:	000001b8 	.word	0x000001b8
    5944:	1fffb1b6 	.word	0x1fffb1b6
    5948:	0000c4d8 	.word	0x0000c4d8
    594c:	0000c5bc 	.word	0x0000c5bc
    5950:	1fffb160 	.word	0x1fffb160
    5954:	1fffb14f 	.word	0x1fffb14f
    5958:	1fffb12e 	.word	0x1fffb12e
    595c:	1fffb124 	.word	0x1fffb124
    5960:	1fffb0fa 	.word	0x1fffb0fa
    5964:	1fffb0d0 	.word	0x1fffb0d0
    5968:	1fffb0a6 	.word	0x1fffb0a6
    596c:	1fffb07c 	.word	0x1fffb07c
    5970:	1fffb052 	.word	0x1fffb052
    5974:	1fffb00e 	.word	0x1fffb00e

00005978 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    5978:	b5f0      	push	{r4, r5, r6, r7, lr}
    597a:	46c6      	mov	lr, r8
    597c:	b500      	push	{lr}
    597e:	b090      	sub	sp, #64	; 0x40
    5980:	4e4c      	ldr	r6, [pc, #304]	; (5ab4 <m2m_wifi_init+0x13c>)
    5982:	447e      	add	r6, pc
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    5984:	2201      	movs	r2, #1
    5986:	230f      	movs	r3, #15
    5988:	a902      	add	r1, sp, #8
    598a:	468c      	mov	ip, r1
    598c:	4463      	add	r3, ip
    598e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    5990:	2800      	cmp	r0, #0
    5992:	d100      	bne.n	5996 <m2m_wifi_init+0x1e>
    5994:	e08a      	b.n	5aac <m2m_wifi_init+0x134>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    5996:	6802      	ldr	r2, [r0, #0]
    5998:	4b47      	ldr	r3, [pc, #284]	; (5ab8 <m2m_wifi_init+0x140>)
    599a:	447b      	add	r3, pc
    599c:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    599e:	2200      	movs	r2, #0
    59a0:	4b46      	ldr	r3, [pc, #280]	; (5abc <m2m_wifi_init+0x144>)
    59a2:	447b      	add	r3, pc
    59a4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    59a6:	200f      	movs	r0, #15
    59a8:	4460      	add	r0, ip
    59aa:	4b45      	ldr	r3, [pc, #276]	; (5ac0 <m2m_wifi_init+0x148>)
    59ac:	58f3      	ldr	r3, [r6, r3]
    59ae:	9303      	str	r3, [sp, #12]
    59b0:	4798      	blx	r3
    59b2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    59b4:	d004      	beq.n	59c0 <m2m_wifi_init+0x48>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    59b6:	0020      	movs	r0, r4
    59b8:	b010      	add	sp, #64	; 0x40
    59ba:	bc04      	pop	{r2}
    59bc:	4690      	mov	r8, r2
    59be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    59c0:	2000      	movs	r0, #0
    59c2:	4b40      	ldr	r3, [pc, #256]	; (5ac4 <m2m_wifi_init+0x14c>)
    59c4:	58f3      	ldr	r3, [r6, r3]
    59c6:	9303      	str	r3, [sp, #12]
    59c8:	4798      	blx	r3
    59ca:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    59cc:	d168      	bne.n	5aa0 <m2m_wifi_init+0x128>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    59ce:	493e      	ldr	r1, [pc, #248]	; (5ac8 <m2m_wifi_init+0x150>)
    59d0:	4479      	add	r1, pc
    59d2:	2001      	movs	r0, #1
    59d4:	4b3d      	ldr	r3, [pc, #244]	; (5acc <m2m_wifi_init+0x154>)
    59d6:	58f3      	ldr	r3, [r6, r3]
    59d8:	9303      	str	r3, [sp, #12]
    59da:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    59dc:	af06      	add	r7, sp, #24
    59de:	0038      	movs	r0, r7
    59e0:	4b3b      	ldr	r3, [pc, #236]	; (5ad0 <m2m_wifi_init+0x158>)
    59e2:	58f3      	ldr	r3, [r6, r3]
    59e4:	9303      	str	r3, [sp, #12]
    59e6:	4798      	blx	r3
    59e8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    59ea:	4b3a      	ldr	r3, [pc, #232]	; (5ad4 <m2m_wifi_init+0x15c>)
    59ec:	447b      	add	r3, pc
    59ee:	9303      	str	r3, [sp, #12]
    59f0:	0018      	movs	r0, r3
    59f2:	4b39      	ldr	r3, [pc, #228]	; (5ad8 <m2m_wifi_init+0x160>)
    59f4:	58f5      	ldr	r5, [r6, r3]
    59f6:	47a8      	blx	r5
    59f8:	7939      	ldrb	r1, [r7, #4]
    59fa:	797a      	ldrb	r2, [r7, #5]
    59fc:	79bb      	ldrb	r3, [r7, #6]
    59fe:	8c38      	ldrh	r0, [r7, #32]
    5a00:	9000      	str	r0, [sp, #0]
    5a02:	4836      	ldr	r0, [pc, #216]	; (5adc <m2m_wifi_init+0x164>)
    5a04:	4478      	add	r0, pc
    5a06:	47a8      	blx	r5
    5a08:	200d      	movs	r0, #13
    5a0a:	4b35      	ldr	r3, [pc, #212]	; (5ae0 <m2m_wifi_init+0x168>)
    5a0c:	58f2      	ldr	r2, [r6, r3]
    5a0e:	4690      	mov	r8, r2
    5a10:	4790      	blx	r2
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    5a12:	9803      	ldr	r0, [sp, #12]
    5a14:	47a8      	blx	r5
    5a16:	2226      	movs	r2, #38	; 0x26
    5a18:	ab02      	add	r3, sp, #8
    5a1a:	469c      	mov	ip, r3
    5a1c:	4462      	add	r2, ip
    5a1e:	211a      	movs	r1, #26
    5a20:	4461      	add	r1, ip
    5a22:	4830      	ldr	r0, [pc, #192]	; (5ae4 <m2m_wifi_init+0x16c>)
    5a24:	4478      	add	r0, pc
    5a26:	47a8      	blx	r5
    5a28:	200d      	movs	r0, #13
    5a2a:	47c0      	blx	r8
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    5a2c:	9803      	ldr	r0, [sp, #12]
    5a2e:	47a8      	blx	r5
    5a30:	79f9      	ldrb	r1, [r7, #7]
    5a32:	7a3a      	ldrb	r2, [r7, #8]
    5a34:	7a7b      	ldrb	r3, [r7, #9]
    5a36:	482c      	ldr	r0, [pc, #176]	; (5ae8 <m2m_wifi_init+0x170>)
    5a38:	4478      	add	r0, pc
    5a3a:	47a8      	blx	r5
    5a3c:	200d      	movs	r0, #13
    5a3e:	47c0      	blx	r8
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    5a40:	9f03      	ldr	r7, [sp, #12]
    5a42:	0038      	movs	r0, r7
    5a44:	47a8      	blx	r5
    5a46:	2302      	movs	r3, #2
    5a48:	2205      	movs	r2, #5
    5a4a:	2113      	movs	r1, #19
    5a4c:	4827      	ldr	r0, [pc, #156]	; (5aec <m2m_wifi_init+0x174>)
    5a4e:	4478      	add	r0, pc
    5a50:	47a8      	blx	r5
    5a52:	200d      	movs	r0, #13
    5a54:	47c0      	blx	r8
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    5a56:	0038      	movs	r0, r7
    5a58:	47a8      	blx	r5
    5a5a:	4a25      	ldr	r2, [pc, #148]	; (5af0 <m2m_wifi_init+0x178>)
    5a5c:	447a      	add	r2, pc
    5a5e:	4925      	ldr	r1, [pc, #148]	; (5af4 <m2m_wifi_init+0x17c>)
    5a60:	4479      	add	r1, pc
    5a62:	4825      	ldr	r0, [pc, #148]	; (5af8 <m2m_wifi_init+0x180>)
    5a64:	4478      	add	r0, pc
    5a66:	47a8      	blx	r5
    5a68:	200d      	movs	r0, #13
    5a6a:	47c0      	blx	r8
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    5a6c:	0023      	movs	r3, r4
    5a6e:	330d      	adds	r3, #13
    5a70:	d000      	beq.n	5a74 <m2m_wifi_init+0xfc>
    5a72:	e7a0      	b.n	59b6 <m2m_wifi_init+0x3e>
		M2M_ERR("Mismatch Firmawre Version\n");
    5a74:	22e8      	movs	r2, #232	; 0xe8
    5a76:	32ff      	adds	r2, #255	; 0xff
    5a78:	4920      	ldr	r1, [pc, #128]	; (5afc <m2m_wifi_init+0x184>)
    5a7a:	4479      	add	r1, pc
    5a7c:	4820      	ldr	r0, [pc, #128]	; (5b00 <m2m_wifi_init+0x188>)
    5a7e:	4478      	add	r0, pc
    5a80:	4b15      	ldr	r3, [pc, #84]	; (5ad8 <m2m_wifi_init+0x160>)
    5a82:	58f3      	ldr	r3, [r6, r3]
    5a84:	9303      	str	r3, [sp, #12]
    5a86:	4798      	blx	r3
    5a88:	481e      	ldr	r0, [pc, #120]	; (5b04 <m2m_wifi_init+0x18c>)
    5a8a:	4478      	add	r0, pc
    5a8c:	4b1e      	ldr	r3, [pc, #120]	; (5b08 <m2m_wifi_init+0x190>)
    5a8e:	58f3      	ldr	r3, [r6, r3]
    5a90:	9303      	str	r3, [sp, #12]
    5a92:	4798      	blx	r3
    5a94:	200d      	movs	r0, #13
    5a96:	4b12      	ldr	r3, [pc, #72]	; (5ae0 <m2m_wifi_init+0x168>)
    5a98:	58f3      	ldr	r3, [r6, r3]
    5a9a:	9303      	str	r3, [sp, #12]
    5a9c:	4798      	blx	r3
    5a9e:	e78a      	b.n	59b6 <m2m_wifi_init+0x3e>
	nm_drv_deinit(NULL);
    5aa0:	2000      	movs	r0, #0
    5aa2:	4b1a      	ldr	r3, [pc, #104]	; (5b0c <m2m_wifi_init+0x194>)
    5aa4:	58f3      	ldr	r3, [r6, r3]
    5aa6:	9303      	str	r3, [sp, #12]
    5aa8:	4798      	blx	r3
    5aaa:	e784      	b.n	59b6 <m2m_wifi_init+0x3e>
		ret = M2M_ERR_FAIL;
    5aac:	240c      	movs	r4, #12
    5aae:	4264      	negs	r4, r4
    5ab0:	e781      	b.n	59b6 <m2m_wifi_init+0x3e>
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	0000d00a 	.word	0x0000d00a
    5ab8:	1fffaf76 	.word	0x1fffaf76
    5abc:	1fffaf73 	.word	0x1fffaf73
    5ac0:	00000294 	.word	0x00000294
    5ac4:	000004dc 	.word	0x000004dc
    5ac8:	fffffc49 	.word	0xfffffc49
    5acc:	000002f0 	.word	0x000002f0
    5ad0:	000003b8 	.word	0x000003b8
    5ad4:	0000c270 	.word	0x0000c270
    5ad8:	0000003c 	.word	0x0000003c
    5adc:	0000c434 	.word	0x0000c434
    5ae0:	00000000 	.word	0x00000000
    5ae4:	0000c43c 	.word	0x0000c43c
    5ae8:	0000c444 	.word	0x0000c444
    5aec:	0000c452 	.word	0x0000c452
    5af0:	0000c45c 	.word	0x0000c45c
    5af4:	0000c464 	.word	0x0000c464
    5af8:	0000c46c 	.word	0x0000c46c
    5afc:	0000c226 	.word	0x0000c226
    5b00:	0000bece 	.word	0x0000bece
    5b04:	0000c45e 	.word	0x0000c45e
    5b08:	00000108 	.word	0x00000108
    5b0c:	000001e8 	.word	0x000001e8

00005b10 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    5b10:	b500      	push	{lr}
    5b12:	b083      	sub	sp, #12
    5b14:	4b03      	ldr	r3, [pc, #12]	; (5b24 <m2m_wifi_handle_events+0x14>)
    5b16:	447b      	add	r3, pc
	return hif_handle_isr();
    5b18:	4a03      	ldr	r2, [pc, #12]	; (5b28 <m2m_wifi_handle_events+0x18>)
    5b1a:	589b      	ldr	r3, [r3, r2]
    5b1c:	9301      	str	r3, [sp, #4]
    5b1e:	4798      	blx	r3
}
    5b20:	b003      	add	sp, #12
    5b22:	bd00      	pop	{pc}
    5b24:	0000ce76 	.word	0x0000ce76
    5b28:	00000064 	.word	0x00000064

00005b2c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    5b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b2e:	46d6      	mov	lr, sl
    5b30:	4647      	mov	r7, r8
    5b32:	b580      	push	{r7, lr}
    5b34:	b0a3      	sub	sp, #140	; 0x8c
    5b36:	9004      	str	r0, [sp, #16]
    5b38:	000c      	movs	r4, r1
    5b3a:	0015      	movs	r5, r2
    5b3c:	001f      	movs	r7, r3
    5b3e:	ab2a      	add	r3, sp, #168	; 0xa8
    5b40:	881b      	ldrh	r3, [r3, #0]
    5b42:	469a      	mov	sl, r3
    5b44:	ab2b      	add	r3, sp, #172	; 0xac
    5b46:	781b      	ldrb	r3, [r3, #0]
    5b48:	4698      	mov	r8, r3
    5b4a:	4eab      	ldr	r6, [pc, #684]	; (5df8 <m2m_wifi_connect_sc+0x2cc>)
    5b4c:	447e      	add	r6, pc
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    5b4e:	2a01      	cmp	r2, #1
    5b50:	d003      	beq.n	5b5a <m2m_wifi_connect_sc+0x2e>
	{
		if(pvAuthInfo == NULL)
    5b52:	2f00      	cmp	r7, #0
    5b54:	d045      	beq.n	5be2 <m2m_wifi_connect_sc+0xb6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    5b56:	2a02      	cmp	r2, #2
    5b58:	d05a      	beq.n	5c10 <m2m_wifi_connect_sc+0xe4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    5b5a:	1e63      	subs	r3, r4, #1
    5b5c:	b2db      	uxtb	r3, r3
    5b5e:	2b1f      	cmp	r3, #31
    5b60:	d900      	bls.n	5b64 <m2m_wifi_connect_sc+0x38>
    5b62:	e089      	b.n	5c78 <m2m_wifi_connect_sc+0x14c>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    5b64:	4653      	mov	r3, sl
    5b66:	3b01      	subs	r3, #1
    5b68:	b29b      	uxth	r3, r3
    5b6a:	2b0d      	cmp	r3, #13
    5b6c:	d903      	bls.n	5b76 <m2m_wifi_connect_sc+0x4a>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    5b6e:	4653      	mov	r3, sl
    5b70:	2bff      	cmp	r3, #255	; 0xff
    5b72:	d000      	beq.n	5b76 <m2m_wifi_connect_sc+0x4a>
    5b74:	e097      	b.n	5ca6 <m2m_wifi_connect_sc+0x17a>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    5b76:	0022      	movs	r2, r4
    5b78:	9904      	ldr	r1, [sp, #16]
    5b7a:	205a      	movs	r0, #90	; 0x5a
    5b7c:	ab02      	add	r3, sp, #8
    5b7e:	469c      	mov	ip, r3
    5b80:	4460      	add	r0, ip
    5b82:	4b9e      	ldr	r3, [pc, #632]	; (5dfc <m2m_wifi_connect_sc+0x2d0>)
    5b84:	58f3      	ldr	r3, [r6, r3]
    5b86:	9304      	str	r3, [sp, #16]
    5b88:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    5b8a:	ab07      	add	r3, sp, #28
    5b8c:	191c      	adds	r4, r3, r4
    5b8e:	3446      	adds	r4, #70	; 0x46
    5b90:	2200      	movs	r2, #0
    5b92:	7022      	strb	r2, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    5b94:	3244      	adds	r2, #68	; 0x44
    5b96:	4651      	mov	r1, sl
    5b98:	5299      	strh	r1, [r3, r2]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    5b9a:	4642      	mov	r2, r8
    5b9c:	1e51      	subs	r1, r2, #1
    5b9e:	418a      	sbcs	r2, r1
    5ba0:	2167      	movs	r1, #103	; 0x67
    5ba2:	545a      	strb	r2, [r3, r1]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    5ba4:	2241      	movs	r2, #65	; 0x41
    5ba6:	549d      	strb	r5, [r3, r2]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    5ba8:	2d03      	cmp	r5, #3
    5baa:	d100      	bne.n	5bae <m2m_wifi_connect_sc+0x82>
    5bac:	e093      	b.n	5cd6 <m2m_wifi_connect_sc+0x1aa>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    5bae:	2d02      	cmp	r5, #2
    5bb0:	d100      	bne.n	5bb4 <m2m_wifi_connect_sc+0x88>
    5bb2:	e0da      	b.n	5d6a <m2m_wifi_connect_sc+0x23e>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    5bb4:	2d04      	cmp	r5, #4
    5bb6:	d100      	bne.n	5bba <m2m_wifi_connect_sc+0x8e>
    5bb8:	e0ff      	b.n	5dba <m2m_wifi_connect_sc+0x28e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    5bba:	2d01      	cmp	r5, #1
    5bbc:	d000      	beq.n	5bc0 <m2m_wifi_connect_sc+0x94>
    5bbe:	e104      	b.n	5dca <m2m_wifi_connect_sc+0x29e>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    5bc0:	2300      	movs	r3, #0
    5bc2:	9302      	str	r3, [sp, #8]
    5bc4:	9301      	str	r3, [sp, #4]
    5bc6:	9300      	str	r3, [sp, #0]
    5bc8:	336c      	adds	r3, #108	; 0x6c
    5bca:	aa07      	add	r2, sp, #28
    5bcc:	2128      	movs	r1, #40	; 0x28
    5bce:	2001      	movs	r0, #1
    5bd0:	4c8b      	ldr	r4, [pc, #556]	; (5e00 <m2m_wifi_connect_sc+0x2d4>)
    5bd2:	5934      	ldr	r4, [r6, r4]
    5bd4:	9404      	str	r4, [sp, #16]
    5bd6:	47a0      	blx	r4

ERR1:
	return ret;
}
    5bd8:	b023      	add	sp, #140	; 0x8c
    5bda:	bc0c      	pop	{r2, r3}
    5bdc:	4690      	mov	r8, r2
    5bde:	469a      	mov	sl, r3
    5be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    5be2:	4a88      	ldr	r2, [pc, #544]	; (5e04 <m2m_wifi_connect_sc+0x2d8>)
    5be4:	4988      	ldr	r1, [pc, #544]	; (5e08 <m2m_wifi_connect_sc+0x2dc>)
    5be6:	4479      	add	r1, pc
    5be8:	4888      	ldr	r0, [pc, #544]	; (5e0c <m2m_wifi_connect_sc+0x2e0>)
    5bea:	4478      	add	r0, pc
    5bec:	4b88      	ldr	r3, [pc, #544]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5bee:	58f3      	ldr	r3, [r6, r3]
    5bf0:	9304      	str	r3, [sp, #16]
    5bf2:	4798      	blx	r3
    5bf4:	4887      	ldr	r0, [pc, #540]	; (5e14 <m2m_wifi_connect_sc+0x2e8>)
    5bf6:	4478      	add	r0, pc
    5bf8:	4b87      	ldr	r3, [pc, #540]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5bfa:	58f3      	ldr	r3, [r6, r3]
    5bfc:	9304      	str	r3, [sp, #16]
    5bfe:	4798      	blx	r3
    5c00:	200d      	movs	r0, #13
    5c02:	4b86      	ldr	r3, [pc, #536]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5c04:	58f3      	ldr	r3, [r6, r3]
    5c06:	9304      	str	r3, [sp, #16]
    5c08:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5c0a:	200c      	movs	r0, #12
    5c0c:	4240      	negs	r0, r0
			goto ERR1;
    5c0e:	e7e3      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    5c10:	0038      	movs	r0, r7
    5c12:	4b83      	ldr	r3, [pc, #524]	; (5e20 <m2m_wifi_connect_sc+0x2f4>)
    5c14:	58f3      	ldr	r3, [r6, r3]
    5c16:	9305      	str	r3, [sp, #20]
    5c18:	4798      	blx	r3
    5c1a:	2840      	cmp	r0, #64	; 0x40
    5c1c:	d19d      	bne.n	5b5a <m2m_wifi_connect_sc+0x2e>
    5c1e:	2300      	movs	r3, #0
			while(i < (M2M_MAX_PSK_LEN-1))
    5c20:	2b3f      	cmp	r3, #63	; 0x3f
    5c22:	d900      	bls.n	5c26 <m2m_wifi_connect_sc+0xfa>
    5c24:	e799      	b.n	5b5a <m2m_wifi_connect_sc+0x2e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    5c26:	5cfa      	ldrb	r2, [r7, r3]
    5c28:	2a2f      	cmp	r2, #47	; 0x2f
    5c2a:	d90e      	bls.n	5c4a <m2m_wifi_connect_sc+0x11e>
    5c2c:	0011      	movs	r1, r2
    5c2e:	393a      	subs	r1, #58	; 0x3a
    5c30:	b2c9      	uxtb	r1, r1
    5c32:	2906      	cmp	r1, #6
    5c34:	d909      	bls.n	5c4a <m2m_wifi_connect_sc+0x11e>
    5c36:	0011      	movs	r1, r2
    5c38:	3947      	subs	r1, #71	; 0x47
    5c3a:	b2c9      	uxtb	r1, r1
    5c3c:	2919      	cmp	r1, #25
    5c3e:	d904      	bls.n	5c4a <m2m_wifi_connect_sc+0x11e>
    5c40:	2a66      	cmp	r2, #102	; 0x66
    5c42:	d802      	bhi.n	5c4a <m2m_wifi_connect_sc+0x11e>
				i++;
    5c44:	3301      	adds	r3, #1
    5c46:	b2db      	uxtb	r3, r3
    5c48:	e7ea      	b.n	5c20 <m2m_wifi_connect_sc+0xf4>
					M2M_ERR("Invalid Key\n");
    5c4a:	4a76      	ldr	r2, [pc, #472]	; (5e24 <m2m_wifi_connect_sc+0x2f8>)
    5c4c:	4976      	ldr	r1, [pc, #472]	; (5e28 <m2m_wifi_connect_sc+0x2fc>)
    5c4e:	4479      	add	r1, pc
    5c50:	4876      	ldr	r0, [pc, #472]	; (5e2c <m2m_wifi_connect_sc+0x300>)
    5c52:	4478      	add	r0, pc
    5c54:	4b6e      	ldr	r3, [pc, #440]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5c56:	58f3      	ldr	r3, [r6, r3]
    5c58:	9304      	str	r3, [sp, #16]
    5c5a:	4798      	blx	r3
    5c5c:	4874      	ldr	r0, [pc, #464]	; (5e30 <m2m_wifi_connect_sc+0x304>)
    5c5e:	4478      	add	r0, pc
    5c60:	4b6d      	ldr	r3, [pc, #436]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5c62:	58f3      	ldr	r3, [r6, r3]
    5c64:	9304      	str	r3, [sp, #16]
    5c66:	4798      	blx	r3
    5c68:	200d      	movs	r0, #13
    5c6a:	4b6c      	ldr	r3, [pc, #432]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5c6c:	58f3      	ldr	r3, [r6, r3]
    5c6e:	9304      	str	r3, [sp, #16]
    5c70:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    5c72:	200c      	movs	r0, #12
    5c74:	4240      	negs	r0, r0
					goto ERR1;
    5c76:	e7af      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
		M2M_ERR("SSID LEN INVALID\n");
    5c78:	4a6e      	ldr	r2, [pc, #440]	; (5e34 <m2m_wifi_connect_sc+0x308>)
    5c7a:	496f      	ldr	r1, [pc, #444]	; (5e38 <m2m_wifi_connect_sc+0x30c>)
    5c7c:	4479      	add	r1, pc
    5c7e:	486f      	ldr	r0, [pc, #444]	; (5e3c <m2m_wifi_connect_sc+0x310>)
    5c80:	4478      	add	r0, pc
    5c82:	4b63      	ldr	r3, [pc, #396]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5c84:	58f3      	ldr	r3, [r6, r3]
    5c86:	9304      	str	r3, [sp, #16]
    5c88:	4798      	blx	r3
    5c8a:	486d      	ldr	r0, [pc, #436]	; (5e40 <m2m_wifi_connect_sc+0x314>)
    5c8c:	4478      	add	r0, pc
    5c8e:	4b62      	ldr	r3, [pc, #392]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5c90:	58f3      	ldr	r3, [r6, r3]
    5c92:	9304      	str	r3, [sp, #16]
    5c94:	4798      	blx	r3
    5c96:	200d      	movs	r0, #13
    5c98:	4b60      	ldr	r3, [pc, #384]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5c9a:	58f3      	ldr	r3, [r6, r3]
    5c9c:	9304      	str	r3, [sp, #16]
    5c9e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5ca0:	200c      	movs	r0, #12
    5ca2:	4240      	negs	r0, r0
		goto ERR1;
    5ca4:	e798      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
			M2M_ERR("CH INVALID\n");
    5ca6:	228d      	movs	r2, #141	; 0x8d
    5ca8:	0092      	lsls	r2, r2, #2
    5caa:	4966      	ldr	r1, [pc, #408]	; (5e44 <m2m_wifi_connect_sc+0x318>)
    5cac:	4479      	add	r1, pc
    5cae:	4866      	ldr	r0, [pc, #408]	; (5e48 <m2m_wifi_connect_sc+0x31c>)
    5cb0:	4478      	add	r0, pc
    5cb2:	4b57      	ldr	r3, [pc, #348]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5cb4:	58f3      	ldr	r3, [r6, r3]
    5cb6:	9304      	str	r3, [sp, #16]
    5cb8:	4798      	blx	r3
    5cba:	4864      	ldr	r0, [pc, #400]	; (5e4c <m2m_wifi_connect_sc+0x320>)
    5cbc:	4478      	add	r0, pc
    5cbe:	4b56      	ldr	r3, [pc, #344]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5cc0:	58f3      	ldr	r3, [r6, r3]
    5cc2:	9304      	str	r3, [sp, #16]
    5cc4:	4798      	blx	r3
    5cc6:	200d      	movs	r0, #13
    5cc8:	4b54      	ldr	r3, [pc, #336]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5cca:	58f3      	ldr	r3, [r6, r3]
    5ccc:	9304      	str	r3, [sp, #16]
    5cce:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5cd0:	200c      	movs	r0, #12
    5cd2:	4240      	negs	r0, r0
			goto ERR1;
    5cd4:	e780      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    5cd6:	783b      	ldrb	r3, [r7, #0]
    5cd8:	3b01      	subs	r3, #1
    5cda:	b2db      	uxtb	r3, r3
    5cdc:	aa07      	add	r2, sp, #28
    5cde:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    5ce0:	2b03      	cmp	r3, #3
    5ce2:	d818      	bhi.n	5d16 <m2m_wifi_connect_sc+0x1ea>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    5ce4:	787b      	ldrb	r3, [r7, #1]
    5ce6:	3b01      	subs	r3, #1
    5ce8:	b2db      	uxtb	r3, r3
    5cea:	aa07      	add	r2, sp, #28
    5cec:	7053      	strb	r3, [r2, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    5cee:	2b0a      	cmp	r3, #10
    5cf0:	d001      	beq.n	5cf6 <m2m_wifi_connect_sc+0x1ca>
    5cf2:	2b1a      	cmp	r3, #26
    5cf4:	d124      	bne.n	5d40 <m2m_wifi_connect_sc+0x214>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    5cf6:	1cb9      	adds	r1, r7, #2
    5cf8:	787a      	ldrb	r2, [r7, #1]
    5cfa:	2016      	movs	r0, #22
    5cfc:	ab02      	add	r3, sp, #8
    5cfe:	469c      	mov	ip, r3
    5d00:	4460      	add	r0, ip
    5d02:	4b3e      	ldr	r3, [pc, #248]	; (5dfc <m2m_wifi_connect_sc+0x2d0>)
    5d04:	58f3      	ldr	r3, [r6, r3]
    5d06:	9304      	str	r3, [sp, #16]
    5d08:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    5d0a:	787a      	ldrb	r2, [r7, #1]
    5d0c:	ab07      	add	r3, sp, #28
    5d0e:	189b      	adds	r3, r3, r2
    5d10:	2200      	movs	r2, #0
    5d12:	709a      	strb	r2, [r3, #2]
    5d14:	e754      	b.n	5bc0 <m2m_wifi_connect_sc+0x94>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    5d16:	4a4e      	ldr	r2, [pc, #312]	; (5e50 <m2m_wifi_connect_sc+0x324>)
    5d18:	494e      	ldr	r1, [pc, #312]	; (5e54 <m2m_wifi_connect_sc+0x328>)
    5d1a:	4479      	add	r1, pc
    5d1c:	484e      	ldr	r0, [pc, #312]	; (5e58 <m2m_wifi_connect_sc+0x32c>)
    5d1e:	4478      	add	r0, pc
    5d20:	4b3b      	ldr	r3, [pc, #236]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5d22:	58f4      	ldr	r4, [r6, r3]
    5d24:	47a0      	blx	r4
    5d26:	ab07      	add	r3, sp, #28
    5d28:	7819      	ldrb	r1, [r3, #0]
    5d2a:	484c      	ldr	r0, [pc, #304]	; (5e5c <m2m_wifi_connect_sc+0x330>)
    5d2c:	4478      	add	r0, pc
    5d2e:	47a0      	blx	r4
    5d30:	200d      	movs	r0, #13
    5d32:	4b3a      	ldr	r3, [pc, #232]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5d34:	58f3      	ldr	r3, [r6, r3]
    5d36:	9304      	str	r3, [sp, #16]
    5d38:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5d3a:	200c      	movs	r0, #12
    5d3c:	4240      	negs	r0, r0
			goto ERR1;
    5d3e:	e74b      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    5d40:	4a47      	ldr	r2, [pc, #284]	; (5e60 <m2m_wifi_connect_sc+0x334>)
    5d42:	4948      	ldr	r1, [pc, #288]	; (5e64 <m2m_wifi_connect_sc+0x338>)
    5d44:	4479      	add	r1, pc
    5d46:	4848      	ldr	r0, [pc, #288]	; (5e68 <m2m_wifi_connect_sc+0x33c>)
    5d48:	4478      	add	r0, pc
    5d4a:	4b31      	ldr	r3, [pc, #196]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5d4c:	58f4      	ldr	r4, [r6, r3]
    5d4e:	47a0      	blx	r4
    5d50:	ab07      	add	r3, sp, #28
    5d52:	7859      	ldrb	r1, [r3, #1]
    5d54:	4845      	ldr	r0, [pc, #276]	; (5e6c <m2m_wifi_connect_sc+0x340>)
    5d56:	4478      	add	r0, pc
    5d58:	47a0      	blx	r4
    5d5a:	200d      	movs	r0, #13
    5d5c:	4b2f      	ldr	r3, [pc, #188]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5d5e:	58f3      	ldr	r3, [r6, r3]
    5d60:	9304      	str	r3, [sp, #16]
    5d62:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5d64:	200c      	movs	r0, #12
    5d66:	4240      	negs	r0, r0
			goto ERR1;
    5d68:	e736      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    5d6a:	0038      	movs	r0, r7
    5d6c:	4b2c      	ldr	r3, [pc, #176]	; (5e20 <m2m_wifi_connect_sc+0x2f4>)
    5d6e:	58f3      	ldr	r3, [r6, r3]
    5d70:	9304      	str	r3, [sp, #16]
    5d72:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    5d74:	1e43      	subs	r3, r0, #1
    5d76:	b29b      	uxth	r3, r3
    5d78:	2b3f      	cmp	r3, #63	; 0x3f
    5d7a:	d807      	bhi.n	5d8c <m2m_wifi_connect_sc+0x260>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    5d7c:	1c42      	adds	r2, r0, #1
    5d7e:	0039      	movs	r1, r7
    5d80:	a807      	add	r0, sp, #28
    5d82:	4b1e      	ldr	r3, [pc, #120]	; (5dfc <m2m_wifi_connect_sc+0x2d0>)
    5d84:	58f3      	ldr	r3, [r6, r3]
    5d86:	9304      	str	r3, [sp, #16]
    5d88:	4798      	blx	r3
    5d8a:	e719      	b.n	5bc0 <m2m_wifi_connect_sc+0x94>
			M2M_ERR("Incorrect PSK key length\n");
    5d8c:	4a38      	ldr	r2, [pc, #224]	; (5e70 <m2m_wifi_connect_sc+0x344>)
    5d8e:	4939      	ldr	r1, [pc, #228]	; (5e74 <m2m_wifi_connect_sc+0x348>)
    5d90:	4479      	add	r1, pc
    5d92:	4839      	ldr	r0, [pc, #228]	; (5e78 <m2m_wifi_connect_sc+0x34c>)
    5d94:	4478      	add	r0, pc
    5d96:	4b1e      	ldr	r3, [pc, #120]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5d98:	58f3      	ldr	r3, [r6, r3]
    5d9a:	9304      	str	r3, [sp, #16]
    5d9c:	4798      	blx	r3
    5d9e:	4837      	ldr	r0, [pc, #220]	; (5e7c <m2m_wifi_connect_sc+0x350>)
    5da0:	4478      	add	r0, pc
    5da2:	4b1d      	ldr	r3, [pc, #116]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5da4:	58f3      	ldr	r3, [r6, r3]
    5da6:	9304      	str	r3, [sp, #16]
    5da8:	4798      	blx	r3
    5daa:	200d      	movs	r0, #13
    5dac:	4b1b      	ldr	r3, [pc, #108]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5dae:	58f3      	ldr	r3, [r6, r3]
    5db0:	9304      	str	r3, [sp, #16]
    5db2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5db4:	200c      	movs	r0, #12
    5db6:	4240      	negs	r0, r0
			goto ERR1;
    5db8:	e70e      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    5dba:	223e      	movs	r2, #62	; 0x3e
    5dbc:	0039      	movs	r1, r7
    5dbe:	a807      	add	r0, sp, #28
    5dc0:	4b0e      	ldr	r3, [pc, #56]	; (5dfc <m2m_wifi_connect_sc+0x2d0>)
    5dc2:	58f3      	ldr	r3, [r6, r3]
    5dc4:	9304      	str	r3, [sp, #16]
    5dc6:	4798      	blx	r3
    5dc8:	e6fa      	b.n	5bc0 <m2m_wifi_connect_sc+0x94>
		M2M_ERR("undefined sec type\n");
    5dca:	4a2d      	ldr	r2, [pc, #180]	; (5e80 <m2m_wifi_connect_sc+0x354>)
    5dcc:	492d      	ldr	r1, [pc, #180]	; (5e84 <m2m_wifi_connect_sc+0x358>)
    5dce:	4479      	add	r1, pc
    5dd0:	482d      	ldr	r0, [pc, #180]	; (5e88 <m2m_wifi_connect_sc+0x35c>)
    5dd2:	4478      	add	r0, pc
    5dd4:	4b0e      	ldr	r3, [pc, #56]	; (5e10 <m2m_wifi_connect_sc+0x2e4>)
    5dd6:	58f3      	ldr	r3, [r6, r3]
    5dd8:	9304      	str	r3, [sp, #16]
    5dda:	4798      	blx	r3
    5ddc:	482b      	ldr	r0, [pc, #172]	; (5e8c <m2m_wifi_connect_sc+0x360>)
    5dde:	4478      	add	r0, pc
    5de0:	4b0d      	ldr	r3, [pc, #52]	; (5e18 <m2m_wifi_connect_sc+0x2ec>)
    5de2:	58f3      	ldr	r3, [r6, r3]
    5de4:	9304      	str	r3, [sp, #16]
    5de6:	4798      	blx	r3
    5de8:	200d      	movs	r0, #13
    5dea:	4b0c      	ldr	r3, [pc, #48]	; (5e1c <m2m_wifi_connect_sc+0x2f0>)
    5dec:	58f3      	ldr	r3, [r6, r3]
    5dee:	9304      	str	r3, [sp, #16]
    5df0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5df2:	200c      	movs	r0, #12
    5df4:	4240      	negs	r0, r0
		goto ERR1;
    5df6:	e6ef      	b.n	5bd8 <m2m_wifi_connect_sc+0xac>
    5df8:	0000ce40 	.word	0x0000ce40
    5dfc:	000004e4 	.word	0x000004e4
    5e00:	00000318 	.word	0x00000318
    5e04:	00000215 	.word	0x00000215
    5e08:	0000c0ca 	.word	0x0000c0ca
    5e0c:	0000bd62 	.word	0x0000bd62
    5e10:	0000003c 	.word	0x0000003c
    5e14:	0000c19a 	.word	0x0000c19a
    5e18:	00000108 	.word	0x00000108
    5e1c:	00000000 	.word	0x00000000
    5e20:	000002d8 	.word	0x000002d8
    5e24:	00000221 	.word	0x00000221
    5e28:	0000c062 	.word	0x0000c062
    5e2c:	0000bcfa 	.word	0x0000bcfa
    5e30:	0000c146 	.word	0x0000c146
    5e34:	0000022b 	.word	0x0000022b
    5e38:	0000c034 	.word	0x0000c034
    5e3c:	0000bccc 	.word	0x0000bccc
    5e40:	0000c124 	.word	0x0000c124
    5e44:	0000c004 	.word	0x0000c004
    5e48:	0000bc9c 	.word	0x0000bc9c
    5e4c:	0000c108 	.word	0x0000c108
    5e50:	0000024b 	.word	0x0000024b
    5e54:	0000bf96 	.word	0x0000bf96
    5e58:	0000bc2e 	.word	0x0000bc2e
    5e5c:	0000c0a4 	.word	0x0000c0a4
    5e60:	00000252 	.word	0x00000252
    5e64:	0000bf6c 	.word	0x0000bf6c
    5e68:	0000bc04 	.word	0x0000bc04
    5e6c:	0000c096 	.word	0x0000c096
    5e70:	00000261 	.word	0x00000261
    5e74:	0000bf20 	.word	0x0000bf20
    5e78:	0000bbb8 	.word	0x0000bbb8
    5e7c:	0000c068 	.word	0x0000c068
    5e80:	00000271 	.word	0x00000271
    5e84:	0000bee2 	.word	0x0000bee2
    5e88:	0000bb7a 	.word	0x0000bb7a
    5e8c:	0000c046 	.word	0x0000c046

00005e90 <m2m_wifi_connect>:
{
    5e90:	b570      	push	{r4, r5, r6, lr}
    5e92:	b084      	sub	sp, #16
    5e94:	ac08      	add	r4, sp, #32
    5e96:	8825      	ldrh	r5, [r4, #0]
    5e98:	4c05      	ldr	r4, [pc, #20]	; (5eb0 <m2m_wifi_connect+0x20>)
    5e9a:	447c      	add	r4, pc
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    5e9c:	2600      	movs	r6, #0
    5e9e:	9601      	str	r6, [sp, #4]
    5ea0:	9500      	str	r5, [sp, #0]
    5ea2:	4d04      	ldr	r5, [pc, #16]	; (5eb4 <m2m_wifi_connect+0x24>)
    5ea4:	5964      	ldr	r4, [r4, r5]
    5ea6:	9403      	str	r4, [sp, #12]
    5ea8:	47a0      	blx	r4
}
    5eaa:	b004      	add	sp, #16
    5eac:	bd70      	pop	{r4, r5, r6, pc}
    5eae:	46c0      	nop			; (mov r8, r8)
    5eb0:	0000caf2 	.word	0x0000caf2
    5eb4:	000001dc 	.word	0x000001dc

00005eb8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    5eb8:	2000      	movs	r0, #0
    5eba:	4770      	bx	lr

00005ebc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    5ebc:	b570      	push	{r4, r5, r6, lr}
    5ebe:	b084      	sub	sp, #16
    5ec0:	4d0d      	ldr	r5, [pc, #52]	; (5ef8 <chip_apply_conf+0x3c>)
    5ec2:	447d      	add	r5, pc
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    5ec4:	2680      	movs	r6, #128	; 0x80
    5ec6:	0076      	lsls	r6, r6, #1
    5ec8:	4306      	orrs	r6, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    5eca:	24a5      	movs	r4, #165	; 0xa5
    5ecc:	0164      	lsls	r4, r4, #5
    5ece:	0031      	movs	r1, r6
    5ed0:	0020      	movs	r0, r4
    5ed2:	4b0a      	ldr	r3, [pc, #40]	; (5efc <chip_apply_conf+0x40>)
    5ed4:	58eb      	ldr	r3, [r5, r3]
    5ed6:	9301      	str	r3, [sp, #4]
    5ed8:	4798      	blx	r3
		if(val32 != 0) {		
			uint32 reg = 0;
    5eda:	2300      	movs	r3, #0
    5edc:	9303      	str	r3, [sp, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    5ede:	a903      	add	r1, sp, #12
    5ee0:	0020      	movs	r0, r4
    5ee2:	4b07      	ldr	r3, [pc, #28]	; (5f00 <chip_apply_conf+0x44>)
    5ee4:	58eb      	ldr	r3, [r5, r3]
    5ee6:	9301      	str	r3, [sp, #4]
    5ee8:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
    5eea:	2800      	cmp	r0, #0
    5eec:	d1ed      	bne.n	5eca <chip_apply_conf+0xe>
				if(reg == val32)
    5eee:	9b03      	ldr	r3, [sp, #12]
    5ef0:	429e      	cmp	r6, r3
    5ef2:	d1ea      	bne.n	5eca <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    5ef4:	b004      	add	sp, #16
    5ef6:	bd70      	pop	{r4, r5, r6, pc}
    5ef8:	0000caca 	.word	0x0000caca
    5efc:	000003c4 	.word	0x000003c4
    5f00:	00000044 	.word	0x00000044

00005f04 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    5f04:	b510      	push	{r4, lr}
    5f06:	b084      	sub	sp, #16
    5f08:	4c17      	ldr	r4, [pc, #92]	; (5f68 <enable_interrupts+0x64>)
    5f0a:	447c      	add	r4, pc
	uint32 reg = 0;
    5f0c:	2300      	movs	r3, #0
    5f0e:	9303      	str	r3, [sp, #12]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    5f10:	a903      	add	r1, sp, #12
    5f12:	4816      	ldr	r0, [pc, #88]	; (5f6c <enable_interrupts+0x68>)
    5f14:	4b16      	ldr	r3, [pc, #88]	; (5f70 <enable_interrupts+0x6c>)
    5f16:	58e3      	ldr	r3, [r4, r3]
    5f18:	9301      	str	r3, [sp, #4]
    5f1a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    5f1c:	2800      	cmp	r0, #0
    5f1e:	d001      	beq.n	5f24 <enable_interrupts+0x20>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    5f20:	b004      	add	sp, #16
    5f22:	bd10      	pop	{r4, pc}
	reg |= ((uint32) 1 << 8);
    5f24:	2180      	movs	r1, #128	; 0x80
    5f26:	0049      	lsls	r1, r1, #1
    5f28:	9b03      	ldr	r3, [sp, #12]
    5f2a:	4319      	orrs	r1, r3
    5f2c:	9103      	str	r1, [sp, #12]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    5f2e:	480f      	ldr	r0, [pc, #60]	; (5f6c <enable_interrupts+0x68>)
    5f30:	4b10      	ldr	r3, [pc, #64]	; (5f74 <enable_interrupts+0x70>)
    5f32:	58e3      	ldr	r3, [r4, r3]
    5f34:	9301      	str	r3, [sp, #4]
    5f36:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    5f38:	2800      	cmp	r0, #0
    5f3a:	d1f1      	bne.n	5f20 <enable_interrupts+0x1c>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    5f3c:	a903      	add	r1, sp, #12
    5f3e:	20d0      	movs	r0, #208	; 0xd0
    5f40:	0140      	lsls	r0, r0, #5
    5f42:	4b0b      	ldr	r3, [pc, #44]	; (5f70 <enable_interrupts+0x6c>)
    5f44:	58e3      	ldr	r3, [r4, r3]
    5f46:	9301      	str	r3, [sp, #4]
    5f48:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d1e8      	bne.n	5f20 <enable_interrupts+0x1c>
	reg |= ((uint32) 1 << 16);
    5f4e:	2180      	movs	r1, #128	; 0x80
    5f50:	0249      	lsls	r1, r1, #9
    5f52:	9b03      	ldr	r3, [sp, #12]
    5f54:	4319      	orrs	r1, r3
    5f56:	9103      	str	r1, [sp, #12]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    5f58:	20d0      	movs	r0, #208	; 0xd0
    5f5a:	0140      	lsls	r0, r0, #5
    5f5c:	4b05      	ldr	r3, [pc, #20]	; (5f74 <enable_interrupts+0x70>)
    5f5e:	58e3      	ldr	r3, [r4, r3]
    5f60:	9301      	str	r3, [sp, #4]
    5f62:	4798      	blx	r3
    5f64:	e7dc      	b.n	5f20 <enable_interrupts+0x1c>
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	0000ca82 	.word	0x0000ca82
    5f6c:	00001408 	.word	0x00001408
    5f70:	00000044 	.word	0x00000044
    5f74:	000003c4 	.word	0x000003c4

00005f78 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    5f78:	b530      	push	{r4, r5, lr}
    5f7a:	b085      	sub	sp, #20
    5f7c:	4d32      	ldr	r5, [pc, #200]	; (6048 <nmi_get_chipid+0xd0>)
    5f7e:	447d      	add	r5, pc
	static uint32 chipid = 0;

	if (chipid == 0) {
    5f80:	4b32      	ldr	r3, [pc, #200]	; (604c <nmi_get_chipid+0xd4>)
    5f82:	447b      	add	r3, pc
    5f84:	681c      	ldr	r4, [r3, #0]
    5f86:	2c00      	cmp	r4, #0
    5f88:	d005      	beq.n	5f96 <nmi_get_chipid+0x1e>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    5f8a:	4b31      	ldr	r3, [pc, #196]	; (6050 <nmi_get_chipid+0xd8>)
    5f8c:	447b      	add	r3, pc
    5f8e:	681c      	ldr	r4, [r3, #0]
}
    5f90:	0020      	movs	r0, r4
    5f92:	b005      	add	sp, #20
    5f94:	bd30      	pop	{r4, r5, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    5f96:	492f      	ldr	r1, [pc, #188]	; (6054 <nmi_get_chipid+0xdc>)
    5f98:	4479      	add	r1, pc
    5f9a:	2080      	movs	r0, #128	; 0x80
    5f9c:	0140      	lsls	r0, r0, #5
    5f9e:	4b2e      	ldr	r3, [pc, #184]	; (6058 <nmi_get_chipid+0xe0>)
    5fa0:	58eb      	ldr	r3, [r5, r3]
    5fa2:	9301      	str	r3, [sp, #4]
    5fa4:	4798      	blx	r3
    5fa6:	2800      	cmp	r0, #0
    5fa8:	d004      	beq.n	5fb4 <nmi_get_chipid+0x3c>
			chipid = 0;
    5faa:	2200      	movs	r2, #0
    5fac:	4b2b      	ldr	r3, [pc, #172]	; (605c <nmi_get_chipid+0xe4>)
    5fae:	447b      	add	r3, pc
    5fb0:	601a      	str	r2, [r3, #0]
			return 0;
    5fb2:	e7ed      	b.n	5f90 <nmi_get_chipid+0x18>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    5fb4:	a903      	add	r1, sp, #12
    5fb6:	482a      	ldr	r0, [pc, #168]	; (6060 <nmi_get_chipid+0xe8>)
    5fb8:	4b27      	ldr	r3, [pc, #156]	; (6058 <nmi_get_chipid+0xe0>)
    5fba:	58eb      	ldr	r3, [r5, r3]
    5fbc:	9301      	str	r3, [sp, #4]
    5fbe:	4798      	blx	r3
    5fc0:	2800      	cmp	r0, #0
    5fc2:	d004      	beq.n	5fce <nmi_get_chipid+0x56>
			chipid = 0;
    5fc4:	2200      	movs	r2, #0
    5fc6:	4b27      	ldr	r3, [pc, #156]	; (6064 <nmi_get_chipid+0xec>)
    5fc8:	447b      	add	r3, pc
    5fca:	601a      	str	r2, [r3, #0]
			return 0;
    5fcc:	e7e0      	b.n	5f90 <nmi_get_chipid+0x18>
		if (chipid == 0x1002a0)  {
    5fce:	4b26      	ldr	r3, [pc, #152]	; (6068 <nmi_get_chipid+0xf0>)
    5fd0:	447b      	add	r3, pc
    5fd2:	681b      	ldr	r3, [r3, #0]
    5fd4:	4a25      	ldr	r2, [pc, #148]	; (606c <nmi_get_chipid+0xf4>)
    5fd6:	4293      	cmp	r3, r2
    5fd8:	d00f      	beq.n	5ffa <nmi_get_chipid+0x82>
		} else if(chipid == 0x1002b0) {
    5fda:	4a25      	ldr	r2, [pc, #148]	; (6070 <nmi_get_chipid+0xf8>)
    5fdc:	4293      	cmp	r3, r2
    5fde:	d014      	beq.n	600a <nmi_get_chipid+0x92>
		}else if(chipid == 0x1000F0) { 
    5fe0:	4a24      	ldr	r2, [pc, #144]	; (6074 <nmi_get_chipid+0xfc>)
    5fe2:	4293      	cmp	r3, r2
    5fe4:	d020      	beq.n	6028 <nmi_get_chipid+0xb0>
		chipid &= ~(0x0f0000);
    5fe6:	4924      	ldr	r1, [pc, #144]	; (6078 <nmi_get_chipid+0x100>)
    5fe8:	4479      	add	r1, pc
    5fea:	4a24      	ldr	r2, [pc, #144]	; (607c <nmi_get_chipid+0x104>)
    5fec:	680b      	ldr	r3, [r1, #0]
    5fee:	401a      	ands	r2, r3
		chipid |= 0x050000;
    5ff0:	23a0      	movs	r3, #160	; 0xa0
    5ff2:	02db      	lsls	r3, r3, #11
    5ff4:	4313      	orrs	r3, r2
    5ff6:	600b      	str	r3, [r1, #0]
    5ff8:	e7c7      	b.n	5f8a <nmi_get_chipid+0x12>
			if (rfrevid == 0x1) { /* 1002A0 */
    5ffa:	9b03      	ldr	r3, [sp, #12]
    5ffc:	2b01      	cmp	r3, #1
    5ffe:	d0f2      	beq.n	5fe6 <nmi_get_chipid+0x6e>
				chipid = 0x1002a1;
    6000:	4a1f      	ldr	r2, [pc, #124]	; (6080 <nmi_get_chipid+0x108>)
    6002:	4b20      	ldr	r3, [pc, #128]	; (6084 <nmi_get_chipid+0x10c>)
    6004:	447b      	add	r3, pc
    6006:	601a      	str	r2, [r3, #0]
    6008:	e7ed      	b.n	5fe6 <nmi_get_chipid+0x6e>
			if(rfrevid == 3) { /* 1002B0 */
    600a:	9b03      	ldr	r3, [sp, #12]
    600c:	2b03      	cmp	r3, #3
    600e:	d0ea      	beq.n	5fe6 <nmi_get_chipid+0x6e>
			} else if(rfrevid == 4) { /* 1002B1 */
    6010:	2b04      	cmp	r3, #4
    6012:	d004      	beq.n	601e <nmi_get_chipid+0xa6>
				chipid = 0x1002b2;
    6014:	4a1c      	ldr	r2, [pc, #112]	; (6088 <nmi_get_chipid+0x110>)
    6016:	4b1d      	ldr	r3, [pc, #116]	; (608c <nmi_get_chipid+0x114>)
    6018:	447b      	add	r3, pc
    601a:	601a      	str	r2, [r3, #0]
    601c:	e7e3      	b.n	5fe6 <nmi_get_chipid+0x6e>
				chipid = 0x1002b1;
    601e:	4a1c      	ldr	r2, [pc, #112]	; (6090 <nmi_get_chipid+0x118>)
    6020:	4b1c      	ldr	r3, [pc, #112]	; (6094 <nmi_get_chipid+0x11c>)
    6022:	447b      	add	r3, pc
    6024:	601a      	str	r2, [r3, #0]
    6026:	e7de      	b.n	5fe6 <nmi_get_chipid+0x6e>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    6028:	491b      	ldr	r1, [pc, #108]	; (6098 <nmi_get_chipid+0x120>)
    602a:	4479      	add	r1, pc
    602c:	20ec      	movs	r0, #236	; 0xec
    602e:	0380      	lsls	r0, r0, #14
    6030:	4b09      	ldr	r3, [pc, #36]	; (6058 <nmi_get_chipid+0xe0>)
    6032:	58eb      	ldr	r3, [r5, r3]
    6034:	9301      	str	r3, [sp, #4]
    6036:	4798      	blx	r3
    6038:	2800      	cmp	r0, #0
    603a:	d0d4      	beq.n	5fe6 <nmi_get_chipid+0x6e>
			chipid = 0;
    603c:	2200      	movs	r2, #0
    603e:	4b17      	ldr	r3, [pc, #92]	; (609c <nmi_get_chipid+0x124>)
    6040:	447b      	add	r3, pc
    6042:	601a      	str	r2, [r3, #0]
			return 0;
    6044:	e7a4      	b.n	5f90 <nmi_get_chipid+0x18>
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	0000ca0e 	.word	0x0000ca0e
    604c:	1fffa996 	.word	0x1fffa996
    6050:	1fffa98c 	.word	0x1fffa98c
    6054:	1fffa980 	.word	0x1fffa980
    6058:	00000044 	.word	0x00000044
    605c:	1fffa96a 	.word	0x1fffa96a
    6060:	000013f4 	.word	0x000013f4
    6064:	1fffa950 	.word	0x1fffa950
    6068:	1fffa948 	.word	0x1fffa948
    606c:	001002a0 	.word	0x001002a0
    6070:	001002b0 	.word	0x001002b0
    6074:	001000f0 	.word	0x001000f0
    6078:	1fffa930 	.word	0x1fffa930
    607c:	fff0ffff 	.word	0xfff0ffff
    6080:	001002a1 	.word	0x001002a1
    6084:	1fffa914 	.word	0x1fffa914
    6088:	001002b2 	.word	0x001002b2
    608c:	1fffa900 	.word	0x1fffa900
    6090:	001002b1 	.word	0x001002b1
    6094:	1fffa8f6 	.word	0x1fffa8f6
    6098:	1fffa8ee 	.word	0x1fffa8ee
    609c:	1fffa8d8 	.word	0x1fffa8d8

000060a0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    60a0:	b510      	push	{r4, lr}
    60a2:	b084      	sub	sp, #16
    60a4:	4c1b      	ldr	r4, [pc, #108]	; (6114 <chip_sleep+0x74>)
    60a6:	447c      	add	r4, pc
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    60a8:	a903      	add	r1, sp, #12
    60aa:	2010      	movs	r0, #16
    60ac:	4b1a      	ldr	r3, [pc, #104]	; (6118 <chip_sleep+0x78>)
    60ae:	58e3      	ldr	r3, [r4, r3]
    60b0:	9301      	str	r3, [sp, #4]
    60b2:	4798      	blx	r3
		if(ret != M2M_SUCCESS) goto ERR1;
    60b4:	2800      	cmp	r0, #0
    60b6:	d122      	bne.n	60fe <chip_sleep+0x5e>
		if((reg & NBIT0) == 0) break;
    60b8:	9b03      	ldr	r3, [sp, #12]
    60ba:	07db      	lsls	r3, r3, #31
    60bc:	d4f4      	bmi.n	60a8 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    60be:	a903      	add	r1, sp, #12
    60c0:	3001      	adds	r0, #1
    60c2:	4b15      	ldr	r3, [pc, #84]	; (6118 <chip_sleep+0x78>)
    60c4:	58e3      	ldr	r3, [r4, r3]
    60c6:	9301      	str	r3, [sp, #4]
    60c8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    60ca:	2800      	cmp	r0, #0
    60cc:	d117      	bne.n	60fe <chip_sleep+0x5e>
	if(reg & NBIT1)
    60ce:	9903      	ldr	r1, [sp, #12]
    60d0:	078b      	lsls	r3, r1, #30
    60d2:	d509      	bpl.n	60e8 <chip_sleep+0x48>
	{
		reg &=~NBIT1;
    60d4:	2302      	movs	r3, #2
    60d6:	4399      	bics	r1, r3
    60d8:	9103      	str	r1, [sp, #12]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    60da:	3001      	adds	r0, #1
    60dc:	4b0f      	ldr	r3, [pc, #60]	; (611c <chip_sleep+0x7c>)
    60de:	58e3      	ldr	r3, [r4, r3]
    60e0:	9301      	str	r3, [sp, #4]
    60e2:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    60e4:	2800      	cmp	r0, #0
    60e6:	d10a      	bne.n	60fe <chip_sleep+0x5e>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    60e8:	a903      	add	r1, sp, #12
    60ea:	200b      	movs	r0, #11
    60ec:	4b0a      	ldr	r3, [pc, #40]	; (6118 <chip_sleep+0x78>)
    60ee:	58e3      	ldr	r3, [r4, r3]
    60f0:	9301      	str	r3, [sp, #4]
    60f2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    60f4:	2800      	cmp	r0, #0
    60f6:	d102      	bne.n	60fe <chip_sleep+0x5e>
	if(reg & NBIT0)
    60f8:	9903      	ldr	r1, [sp, #12]
    60fa:	07cb      	lsls	r3, r1, #31
    60fc:	d401      	bmi.n	6102 <chip_sleep+0x62>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    60fe:	b004      	add	sp, #16
    6100:	bd10      	pop	{r4, pc}
		reg &= ~NBIT0;
    6102:	2301      	movs	r3, #1
    6104:	4399      	bics	r1, r3
    6106:	9103      	str	r1, [sp, #12]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    6108:	300b      	adds	r0, #11
    610a:	4b04      	ldr	r3, [pc, #16]	; (611c <chip_sleep+0x7c>)
    610c:	58e3      	ldr	r3, [r4, r3]
    610e:	9301      	str	r3, [sp, #4]
    6110:	4798      	blx	r3
    6112:	e7f4      	b.n	60fe <chip_sleep+0x5e>
    6114:	0000c8e6 	.word	0x0000c8e6
    6118:	00000044 	.word	0x00000044
    611c:	000003c4 	.word	0x000003c4

00006120 <chip_wake>:
sint8 chip_wake(void)
{
    6120:	b570      	push	{r4, r5, r6, lr}
    6122:	b084      	sub	sp, #16
    6124:	4d3a      	ldr	r5, [pc, #232]	; (6210 <chip_wake+0xf0>)
    6126:	447d      	add	r5, pc
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    6128:	2300      	movs	r3, #0
    612a:	9303      	str	r3, [sp, #12]
    612c:	9302      	str	r3, [sp, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    612e:	a903      	add	r1, sp, #12
    6130:	200b      	movs	r0, #11
    6132:	4b38      	ldr	r3, [pc, #224]	; (6214 <chip_wake+0xf4>)
    6134:	58eb      	ldr	r3, [r5, r3]
    6136:	9301      	str	r3, [sp, #4]
    6138:	4798      	blx	r3
    613a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    613c:	d141      	bne.n	61c2 <chip_wake+0xa2>
	
	if(!(reg & NBIT0))
    613e:	9903      	ldr	r1, [sp, #12]
    6140:	07cb      	lsls	r3, r1, #31
    6142:	d408      	bmi.n	6156 <chip_wake+0x36>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    6144:	2301      	movs	r3, #1
    6146:	4319      	orrs	r1, r3
    6148:	200b      	movs	r0, #11
    614a:	4b33      	ldr	r3, [pc, #204]	; (6218 <chip_wake+0xf8>)
    614c:	58eb      	ldr	r3, [r5, r3]
    614e:	9301      	str	r3, [sp, #4]
    6150:	4798      	blx	r3
    6152:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    6154:	d135      	bne.n	61c2 <chip_wake+0xa2>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    6156:	a903      	add	r1, sp, #12
    6158:	2001      	movs	r0, #1
    615a:	4b2e      	ldr	r3, [pc, #184]	; (6214 <chip_wake+0xf4>)
    615c:	58eb      	ldr	r3, [r5, r3]
    615e:	9301      	str	r3, [sp, #4]
    6160:	4798      	blx	r3
    6162:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    6164:	d12d      	bne.n	61c2 <chip_wake+0xa2>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    6166:	9903      	ldr	r1, [sp, #12]
    6168:	078b      	lsls	r3, r1, #30
    616a:	d52d      	bpl.n	61c8 <chip_wake+0xa8>
{
    616c:	2600      	movs	r6, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    616e:	a902      	add	r1, sp, #8
    6170:	200f      	movs	r0, #15
    6172:	4b28      	ldr	r3, [pc, #160]	; (6214 <chip_wake+0xf4>)
    6174:	58eb      	ldr	r3, [r5, r3]
    6176:	9301      	str	r3, [sp, #4]
    6178:	4798      	blx	r3
    617a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    617c:	d12e      	bne.n	61dc <chip_wake+0xbc>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
    617e:	9b02      	ldr	r3, [sp, #8]
    6180:	075b      	lsls	r3, r3, #29
    6182:	d43f      	bmi.n	6204 <chip_wake+0xe4>
			break;
		}
		nm_bsp_sleep(2);
    6184:	2002      	movs	r0, #2
    6186:	4b25      	ldr	r3, [pc, #148]	; (621c <chip_wake+0xfc>)
    6188:	58eb      	ldr	r3, [r5, r3]
    618a:	9301      	str	r3, [sp, #4]
    618c:	4798      	blx	r3
		trials++;
    618e:	3601      	adds	r6, #1
		if(trials > WAKUP_TRAILS_TIMEOUT)
    6190:	2e04      	cmp	r6, #4
    6192:	d9ec      	bls.n	616e <chip_wake+0x4e>
		{
			M2M_ERR("Failed to wakup the chip\n");
    6194:	22af      	movs	r2, #175	; 0xaf
    6196:	0052      	lsls	r2, r2, #1
    6198:	4921      	ldr	r1, [pc, #132]	; (6220 <chip_wake+0x100>)
    619a:	4479      	add	r1, pc
    619c:	4821      	ldr	r0, [pc, #132]	; (6224 <chip_wake+0x104>)
    619e:	4478      	add	r0, pc
    61a0:	4b21      	ldr	r3, [pc, #132]	; (6228 <chip_wake+0x108>)
    61a2:	58eb      	ldr	r3, [r5, r3]
    61a4:	9301      	str	r3, [sp, #4]
    61a6:	4798      	blx	r3
    61a8:	4820      	ldr	r0, [pc, #128]	; (622c <chip_wake+0x10c>)
    61aa:	4478      	add	r0, pc
    61ac:	4b20      	ldr	r3, [pc, #128]	; (6230 <chip_wake+0x110>)
    61ae:	58eb      	ldr	r3, [r5, r3]
    61b0:	9301      	str	r3, [sp, #4]
    61b2:	4798      	blx	r3
    61b4:	200d      	movs	r0, #13
    61b6:	4b1f      	ldr	r3, [pc, #124]	; (6234 <chip_wake+0x114>)
    61b8:	58eb      	ldr	r3, [r5, r3]
    61ba:	9301      	str	r3, [sp, #4]
    61bc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    61be:	2404      	movs	r4, #4
    61c0:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    61c2:	0020      	movs	r0, r4
    61c4:	b004      	add	sp, #16
    61c6:	bd70      	pop	{r4, r5, r6, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    61c8:	2302      	movs	r3, #2
    61ca:	4319      	orrs	r1, r3
    61cc:	2001      	movs	r0, #1
    61ce:	4b12      	ldr	r3, [pc, #72]	; (6218 <chip_wake+0xf8>)
    61d0:	58eb      	ldr	r3, [r5, r3]
    61d2:	9301      	str	r3, [sp, #4]
    61d4:	4798      	blx	r3
    61d6:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    61d8:	d0c8      	beq.n	616c <chip_wake+0x4c>
    61da:	e7f2      	b.n	61c2 <chip_wake+0xa2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    61dc:	22aa      	movs	r2, #170	; 0xaa
    61de:	0052      	lsls	r2, r2, #1
    61e0:	4915      	ldr	r1, [pc, #84]	; (6238 <chip_wake+0x118>)
    61e2:	4479      	add	r1, pc
    61e4:	4815      	ldr	r0, [pc, #84]	; (623c <chip_wake+0x11c>)
    61e6:	4478      	add	r0, pc
    61e8:	4b0f      	ldr	r3, [pc, #60]	; (6228 <chip_wake+0x108>)
    61ea:	58ee      	ldr	r6, [r5, r3]
    61ec:	47b0      	blx	r6
    61ee:	9a02      	ldr	r2, [sp, #8]
    61f0:	0021      	movs	r1, r4
    61f2:	4813      	ldr	r0, [pc, #76]	; (6240 <chip_wake+0x120>)
    61f4:	4478      	add	r0, pc
    61f6:	47b0      	blx	r6
    61f8:	200d      	movs	r0, #13
    61fa:	4b0e      	ldr	r3, [pc, #56]	; (6234 <chip_wake+0x114>)
    61fc:	58eb      	ldr	r3, [r5, r3]
    61fe:	9301      	str	r3, [sp, #4]
    6200:	4798      	blx	r3
			goto _WAKE_EXIT;
    6202:	e7de      	b.n	61c2 <chip_wake+0xa2>
	nm_bus_reset();
    6204:	4b0f      	ldr	r3, [pc, #60]	; (6244 <chip_wake+0x124>)
    6206:	58eb      	ldr	r3, [r5, r3]
    6208:	9301      	str	r3, [sp, #4]
    620a:	4798      	blx	r3
    620c:	e7d9      	b.n	61c2 <chip_wake+0xa2>
    620e:	46c0      	nop			; (mov r8, r8)
    6210:	0000c866 	.word	0x0000c866
    6214:	00000044 	.word	0x00000044
    6218:	000003c4 	.word	0x000003c4
    621c:	00000160 	.word	0x00000160
    6220:	0000bd6a 	.word	0x0000bd6a
    6224:	0000b7ae 	.word	0x0000b7ae
    6228:	0000003c 	.word	0x0000003c
    622c:	0000bda2 	.word	0x0000bda2
    6230:	00000108 	.word	0x00000108
    6234:	00000000 	.word	0x00000000
    6238:	0000bd22 	.word	0x0000bd22
    623c:	0000b766 	.word	0x0000b766
    6240:	0000bd40 	.word	0x0000bd40
    6244:	0000018c 	.word	0x0000018c

00006248 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    6248:	b530      	push	{r4, r5, lr}
    624a:	b083      	sub	sp, #12
    624c:	0005      	movs	r5, r0
    624e:	4c3d      	ldr	r4, [pc, #244]	; (6344 <wait_for_bootrom+0xfc>)
    6250:	447c      	add	r4, pc
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    6252:	483d      	ldr	r0, [pc, #244]	; (6348 <wait_for_bootrom+0x100>)
    6254:	4b3d      	ldr	r3, [pc, #244]	; (634c <wait_for_bootrom+0x104>)
    6256:	58e3      	ldr	r3, [r4, r3]
    6258:	9301      	str	r3, [sp, #4]
    625a:	4798      	blx	r3
		if (reg & 0x80000000) {
    625c:	2800      	cmp	r0, #0
    625e:	db05      	blt.n	626c <wait_for_bootrom+0x24>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    6260:	2001      	movs	r0, #1
    6262:	4b3b      	ldr	r3, [pc, #236]	; (6350 <wait_for_bootrom+0x108>)
    6264:	58e3      	ldr	r3, [r4, r3]
    6266:	9301      	str	r3, [sp, #4]
    6268:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    626a:	e7f2      	b.n	6252 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    626c:	4839      	ldr	r0, [pc, #228]	; (6354 <wait_for_bootrom+0x10c>)
    626e:	4b37      	ldr	r3, [pc, #220]	; (634c <wait_for_bootrom+0x104>)
    6270:	58e3      	ldr	r3, [r4, r3]
    6272:	9301      	str	r3, [sp, #4]
    6274:	4798      	blx	r3
	reg &= 0x1;
    6276:	2301      	movs	r3, #1
    6278:	4018      	ands	r0, r3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    627a:	d03b      	beq.n	62f4 <wait_for_bootrom+0xac>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    627c:	2d02      	cmp	r5, #2
    627e:	d03d      	beq.n	62fc <wait_for_bootrom+0xb4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    6280:	2d03      	cmp	r5, #3
    6282:	d046      	beq.n	6312 <wait_for_bootrom+0xca>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    6284:	2d04      	cmp	r5, #4
    6286:	d04e      	beq.n	6326 <wait_for_bootrom+0xde>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    6288:	4933      	ldr	r1, [pc, #204]	; (6358 <wait_for_bootrom+0x110>)
    628a:	4834      	ldr	r0, [pc, #208]	; (635c <wait_for_bootrom+0x114>)
    628c:	4b34      	ldr	r3, [pc, #208]	; (6360 <wait_for_bootrom+0x118>)
    628e:	58e3      	ldr	r3, [r4, r3]
    6290:	9301      	str	r3, [sp, #4]
    6292:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    6294:	2500      	movs	r5, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    6296:	4b33      	ldr	r3, [pc, #204]	; (6364 <wait_for_bootrom+0x11c>)
    6298:	58e3      	ldr	r3, [r4, r3]
    629a:	9301      	str	r3, [sp, #4]
    629c:	4798      	blx	r3
    629e:	0500      	lsls	r0, r0, #20
    62a0:	0d00      	lsrs	r0, r0, #20
    62a2:	4b31      	ldr	r3, [pc, #196]	; (6368 <wait_for_bootrom+0x120>)
    62a4:	4298      	cmp	r0, r3
    62a6:	d846      	bhi.n	6336 <wait_for_bootrom+0xee>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    62a8:	0028      	movs	r0, r5
    62aa:	4b30      	ldr	r3, [pc, #192]	; (636c <wait_for_bootrom+0x124>)
    62ac:	58e3      	ldr	r3, [r4, r3]
    62ae:	9301      	str	r3, [sp, #4]
    62b0:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    62b2:	482f      	ldr	r0, [pc, #188]	; (6370 <wait_for_bootrom+0x128>)
    62b4:	4478      	add	r0, pc
    62b6:	4b2f      	ldr	r3, [pc, #188]	; (6374 <wait_for_bootrom+0x12c>)
    62b8:	58e5      	ldr	r5, [r4, r3]
    62ba:	47a8      	blx	r5
    62bc:	4926      	ldr	r1, [pc, #152]	; (6358 <wait_for_bootrom+0x110>)
    62be:	482e      	ldr	r0, [pc, #184]	; (6378 <wait_for_bootrom+0x130>)
    62c0:	4478      	add	r0, pc
    62c2:	47a8      	blx	r5
    62c4:	200d      	movs	r0, #13
    62c6:	4b2d      	ldr	r3, [pc, #180]	; (637c <wait_for_bootrom+0x134>)
    62c8:	58e3      	ldr	r3, [r4, r3]
    62ca:	9301      	str	r3, [sp, #4]
    62cc:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    62ce:	492c      	ldr	r1, [pc, #176]	; (6380 <wait_for_bootrom+0x138>)
    62d0:	482c      	ldr	r0, [pc, #176]	; (6384 <wait_for_bootrom+0x13c>)
    62d2:	4b23      	ldr	r3, [pc, #140]	; (6360 <wait_for_bootrom+0x118>)
    62d4:	58e3      	ldr	r3, [r4, r3]
    62d6:	9301      	str	r3, [sp, #4]
    62d8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    62da:	2000      	movs	r0, #0
    62dc:	b003      	add	sp, #12
    62de:	bd30      	pop	{r4, r5, pc}
			nm_bsp_sleep(1);
    62e0:	2001      	movs	r0, #1
    62e2:	4b1b      	ldr	r3, [pc, #108]	; (6350 <wait_for_bootrom+0x108>)
    62e4:	58e3      	ldr	r3, [r4, r3]
    62e6:	9301      	str	r3, [sp, #4]
    62e8:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    62ea:	4826      	ldr	r0, [pc, #152]	; (6384 <wait_for_bootrom+0x13c>)
    62ec:	4b17      	ldr	r3, [pc, #92]	; (634c <wait_for_bootrom+0x104>)
    62ee:	58e3      	ldr	r3, [r4, r3]
    62f0:	9301      	str	r3, [sp, #4]
    62f2:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
    62f4:	4b24      	ldr	r3, [pc, #144]	; (6388 <wait_for_bootrom+0x140>)
    62f6:	4298      	cmp	r0, r3
    62f8:	d1f2      	bne.n	62e0 <wait_for_bootrom+0x98>
    62fa:	e7bf      	b.n	627c <wait_for_bootrom+0x34>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    62fc:	4923      	ldr	r1, [pc, #140]	; (638c <wait_for_bootrom+0x144>)
    62fe:	4824      	ldr	r0, [pc, #144]	; (6390 <wait_for_bootrom+0x148>)
    6300:	4b17      	ldr	r3, [pc, #92]	; (6360 <wait_for_bootrom+0x118>)
    6302:	58e5      	ldr	r5, [r4, r3]
    6304:	47a8      	blx	r5
		nm_write_reg(NMI_STATE_REG, NBIT20);
    6306:	2180      	movs	r1, #128	; 0x80
    6308:	0349      	lsls	r1, r1, #13
    630a:	4814      	ldr	r0, [pc, #80]	; (635c <wait_for_bootrom+0x114>)
    630c:	47a8      	blx	r5
	uint32 u32GpReg1 = 0;
    630e:	2500      	movs	r5, #0
    6310:	e7c1      	b.n	6296 <wait_for_bootrom+0x4e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    6312:	491e      	ldr	r1, [pc, #120]	; (638c <wait_for_bootrom+0x144>)
    6314:	481e      	ldr	r0, [pc, #120]	; (6390 <wait_for_bootrom+0x148>)
    6316:	4b12      	ldr	r3, [pc, #72]	; (6360 <wait_for_bootrom+0x118>)
    6318:	58e5      	ldr	r5, [r4, r3]
    631a:	47a8      	blx	r5
		nm_write_reg(NMI_STATE_REG, 0);
    631c:	2100      	movs	r1, #0
    631e:	480f      	ldr	r0, [pc, #60]	; (635c <wait_for_bootrom+0x114>)
    6320:	47a8      	blx	r5
	uint32 u32GpReg1 = 0;
    6322:	2500      	movs	r5, #0
    6324:	e7b7      	b.n	6296 <wait_for_bootrom+0x4e>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    6326:	490c      	ldr	r1, [pc, #48]	; (6358 <wait_for_bootrom+0x110>)
    6328:	480c      	ldr	r0, [pc, #48]	; (635c <wait_for_bootrom+0x114>)
    632a:	4b0d      	ldr	r3, [pc, #52]	; (6360 <wait_for_bootrom+0x118>)
    632c:	58e3      	ldr	r3, [r4, r3]
    632e:	9301      	str	r3, [sp, #4]
    6330:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    6332:	357c      	adds	r5, #124	; 0x7c
    6334:	e7af      	b.n	6296 <wait_for_bootrom+0x4e>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    6336:	2002      	movs	r0, #2
    6338:	4328      	orrs	r0, r5
    633a:	4b0c      	ldr	r3, [pc, #48]	; (636c <wait_for_bootrom+0x124>)
    633c:	58e3      	ldr	r3, [r4, r3]
    633e:	9301      	str	r3, [sp, #4]
    6340:	4798      	blx	r3
    6342:	e7b6      	b.n	62b2 <wait_for_bootrom+0x6a>
    6344:	0000c73c 	.word	0x0000c73c
    6348:	00001014 	.word	0x00001014
    634c:	000001c0 	.word	0x000001c0
    6350:	00000160 	.word	0x00000160
    6354:	000207bc 	.word	0x000207bc
    6358:	13521352 	.word	0x13521352
    635c:	0000108c 	.word	0x0000108c
    6360:	000003c4 	.word	0x000003c4
    6364:	0000002c 	.word	0x0000002c
    6368:	0000039f 	.word	0x0000039f
    636c:	0000019c 	.word	0x0000019c
    6370:	0000b9a8 	.word	0x0000b9a8
    6374:	0000003c 	.word	0x0000003c
    6378:	0000bca8 	.word	0x0000bca8
    637c:	00000000 	.word	0x00000000
    6380:	ef522f61 	.word	0xef522f61
    6384:	000c000c 	.word	0x000c000c
    6388:	10add09e 	.word	0x10add09e
    638c:	3c1cd57d 	.word	0x3c1cd57d
    6390:	000207ac 	.word	0x000207ac

00006394 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    6394:	b530      	push	{r4, r5, lr}
    6396:	b085      	sub	sp, #20
    6398:	4d19      	ldr	r5, [pc, #100]	; (6400 <wait_for_firmware_start+0x6c>)
    639a:	447d      	add	r5, pc
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    639c:	4b19      	ldr	r3, [pc, #100]	; (6404 <wait_for_firmware_start+0x70>)
    639e:	9303      	str	r3, [sp, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    63a0:	4b19      	ldr	r3, [pc, #100]	; (6408 <wait_for_firmware_start+0x74>)
    63a2:	9302      	str	r3, [sp, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    63a4:	3802      	subs	r0, #2
    63a6:	b2c0      	uxtb	r0, r0
    63a8:	2801      	cmp	r0, #1
    63aa:	d914      	bls.n	63d6 <wait_for_firmware_start+0x42>
{
    63ac:	2400      	movs	r4, #0
    63ae:	2000      	movs	r0, #0
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    63b0:	9b02      	ldr	r3, [sp, #8]
    63b2:	4298      	cmp	r0, r3
    63b4:	d014      	beq.n	63e0 <wait_for_firmware_start+0x4c>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    63b6:	2002      	movs	r0, #2
    63b8:	4b14      	ldr	r3, [pc, #80]	; (640c <wait_for_firmware_start+0x78>)
    63ba:	58eb      	ldr	r3, [r5, r3]
    63bc:	9301      	str	r3, [sp, #4]
    63be:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    63c0:	9803      	ldr	r0, [sp, #12]
    63c2:	4b13      	ldr	r3, [pc, #76]	; (6410 <wait_for_firmware_start+0x7c>)
    63c4:	58eb      	ldr	r3, [r5, r3]
    63c6:	9301      	str	r3, [sp, #4]
    63c8:	4798      	blx	r3
		if(++cnt >= u32Timeout)
    63ca:	3401      	adds	r4, #1
    63cc:	1c63      	adds	r3, r4, #1
    63ce:	d1ef      	bne.n	63b0 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    63d0:	2005      	movs	r0, #5
    63d2:	4240      	negs	r0, r0
    63d4:	e009      	b.n	63ea <wait_for_firmware_start+0x56>
		regAddress = NMI_REV_REG;
    63d6:	4b0f      	ldr	r3, [pc, #60]	; (6414 <wait_for_firmware_start+0x80>)
    63d8:	9303      	str	r3, [sp, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    63da:	4b0f      	ldr	r3, [pc, #60]	; (6418 <wait_for_firmware_start+0x84>)
    63dc:	9302      	str	r3, [sp, #8]
    63de:	e7e5      	b.n	63ac <wait_for_firmware_start+0x18>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    63e0:	9a02      	ldr	r2, [sp, #8]
    63e2:	4b09      	ldr	r3, [pc, #36]	; (6408 <wait_for_firmware_start+0x74>)
    63e4:	429a      	cmp	r2, r3
    63e6:	d002      	beq.n	63ee <wait_for_firmware_start+0x5a>
	sint8 ret = M2M_SUCCESS;
    63e8:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    63ea:	b005      	add	sp, #20
    63ec:	bd30      	pop	{r4, r5, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    63ee:	2100      	movs	r1, #0
    63f0:	4804      	ldr	r0, [pc, #16]	; (6404 <wait_for_firmware_start+0x70>)
    63f2:	4b0a      	ldr	r3, [pc, #40]	; (641c <wait_for_firmware_start+0x88>)
    63f4:	58eb      	ldr	r3, [r5, r3]
    63f6:	9301      	str	r3, [sp, #4]
    63f8:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    63fa:	2000      	movs	r0, #0
    63fc:	e7f5      	b.n	63ea <wait_for_firmware_start+0x56>
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	0000c5f2 	.word	0x0000c5f2
    6404:	0000108c 	.word	0x0000108c
    6408:	02532636 	.word	0x02532636
    640c:	00000160 	.word	0x00000160
    6410:	000001c0 	.word	0x000001c0
    6414:	000207ac 	.word	0x000207ac
    6418:	d75dc1c3 	.word	0xd75dc1c3
    641c:	000003c4 	.word	0x000003c4

00006420 <chip_deinit>:

sint8 chip_deinit(void)
{
    6420:	b530      	push	{r4, r5, lr}
    6422:	b085      	sub	sp, #20
    6424:	4d22      	ldr	r5, [pc, #136]	; (64b0 <chip_deinit+0x90>)
    6426:	447d      	add	r5, pc
	uint32 reg = 0;
    6428:	2300      	movs	r3, #0
    642a:	9303      	str	r3, [sp, #12]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    642c:	a903      	add	r1, sp, #12
    642e:	20a0      	movs	r0, #160	; 0xa0
    6430:	0140      	lsls	r0, r0, #5
    6432:	4b20      	ldr	r3, [pc, #128]	; (64b4 <chip_deinit+0x94>)
    6434:	58eb      	ldr	r3, [r5, r3]
    6436:	9301      	str	r3, [sp, #4]
    6438:	4798      	blx	r3
    643a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    643c:	d120      	bne.n	6480 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    643e:	491e      	ldr	r1, [pc, #120]	; (64b8 <chip_deinit+0x98>)
    6440:	9b03      	ldr	r3, [sp, #12]
    6442:	4019      	ands	r1, r3
    6444:	9103      	str	r1, [sp, #12]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    6446:	20a0      	movs	r0, #160	; 0xa0
    6448:	0140      	lsls	r0, r0, #5
    644a:	4b1c      	ldr	r3, [pc, #112]	; (64bc <chip_deinit+0x9c>)
    644c:	58eb      	ldr	r3, [r5, r3]
    644e:	9301      	str	r3, [sp, #4]
    6450:	4798      	blx	r3
    6452:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    6454:	d028      	beq.n	64a8 <chip_deinit+0x88>
		M2M_ERR("failed to de-initialize\n");
    6456:	4a1a      	ldr	r2, [pc, #104]	; (64c0 <chip_deinit+0xa0>)
    6458:	491a      	ldr	r1, [pc, #104]	; (64c4 <chip_deinit+0xa4>)
    645a:	4479      	add	r1, pc
    645c:	481a      	ldr	r0, [pc, #104]	; (64c8 <chip_deinit+0xa8>)
    645e:	4478      	add	r0, pc
    6460:	4b1a      	ldr	r3, [pc, #104]	; (64cc <chip_deinit+0xac>)
    6462:	58eb      	ldr	r3, [r5, r3]
    6464:	9301      	str	r3, [sp, #4]
    6466:	4798      	blx	r3
    6468:	4819      	ldr	r0, [pc, #100]	; (64d0 <chip_deinit+0xb0>)
    646a:	4478      	add	r0, pc
    646c:	4b19      	ldr	r3, [pc, #100]	; (64d4 <chip_deinit+0xb4>)
    646e:	58eb      	ldr	r3, [r5, r3]
    6470:	9301      	str	r3, [sp, #4]
    6472:	4798      	blx	r3
    6474:	200d      	movs	r0, #13
    6476:	4b18      	ldr	r3, [pc, #96]	; (64d8 <chip_deinit+0xb8>)
    6478:	58eb      	ldr	r3, [r5, r3]
    647a:	9301      	str	r3, [sp, #4]
    647c:	4798      	blx	r3
		goto ERR1;
    647e:	e013      	b.n	64a8 <chip_deinit+0x88>
		M2M_ERR("failed to de-initialize\n");
    6480:	4a16      	ldr	r2, [pc, #88]	; (64dc <chip_deinit+0xbc>)
    6482:	4917      	ldr	r1, [pc, #92]	; (64e0 <chip_deinit+0xc0>)
    6484:	4479      	add	r1, pc
    6486:	4817      	ldr	r0, [pc, #92]	; (64e4 <chip_deinit+0xc4>)
    6488:	4478      	add	r0, pc
    648a:	4b10      	ldr	r3, [pc, #64]	; (64cc <chip_deinit+0xac>)
    648c:	58eb      	ldr	r3, [r5, r3]
    648e:	9301      	str	r3, [sp, #4]
    6490:	4798      	blx	r3
    6492:	4815      	ldr	r0, [pc, #84]	; (64e8 <chip_deinit+0xc8>)
    6494:	4478      	add	r0, pc
    6496:	4b0f      	ldr	r3, [pc, #60]	; (64d4 <chip_deinit+0xb4>)
    6498:	58eb      	ldr	r3, [r5, r3]
    649a:	9301      	str	r3, [sp, #4]
    649c:	4798      	blx	r3
    649e:	200d      	movs	r0, #13
    64a0:	4b0d      	ldr	r3, [pc, #52]	; (64d8 <chip_deinit+0xb8>)
    64a2:	58eb      	ldr	r3, [r5, r3]
    64a4:	9301      	str	r3, [sp, #4]
    64a6:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    64a8:	0020      	movs	r0, r4
    64aa:	b005      	add	sp, #20
    64ac:	bd30      	pop	{r4, r5, pc}
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	0000c566 	.word	0x0000c566
    64b4:	00000044 	.word	0x00000044
    64b8:	fffffbff 	.word	0xfffffbff
    64bc:	000003c4 	.word	0x000003c4
    64c0:	0000020b 	.word	0x0000020b
    64c4:	0000bab6 	.word	0x0000bab6
    64c8:	0000b4ee 	.word	0x0000b4ee
    64cc:	0000003c 	.word	0x0000003c
    64d0:	0000bab2 	.word	0x0000bab2
    64d4:	00000108 	.word	0x00000108
    64d8:	00000000 	.word	0x00000000
    64dc:	00000205 	.word	0x00000205
    64e0:	0000ba8c 	.word	0x0000ba8c
    64e4:	0000b4c4 	.word	0x0000b4c4
    64e8:	0000ba88 	.word	0x0000ba88

000064ec <p_nm_read_block>:
#error "Plesae define bus usage"
#endif
}

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    64ec:	b510      	push	{r4, lr}
    64ee:	b082      	sub	sp, #8
    64f0:	4b03      	ldr	r3, [pc, #12]	; (6500 <p_nm_read_block+0x14>)
    64f2:	447b      	add	r3, pc
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    64f4:	4c03      	ldr	r4, [pc, #12]	; (6504 <p_nm_read_block+0x18>)
    64f6:	591b      	ldr	r3, [r3, r4]
    64f8:	9301      	str	r3, [sp, #4]
    64fa:	4798      	blx	r3
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    64fc:	b002      	add	sp, #8
    64fe:	bd10      	pop	{r4, pc}
    6500:	0000c49a 	.word	0x0000c49a
    6504:	00000128 	.word	0x00000128

00006508 <p_nm_write_block>:

	return s8Ret;
}

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6508:	b510      	push	{r4, lr}
    650a:	b082      	sub	sp, #8
    650c:	4b03      	ldr	r3, [pc, #12]	; (651c <p_nm_write_block+0x14>)
    650e:	447b      	add	r3, pc
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    6510:	4c03      	ldr	r4, [pc, #12]	; (6520 <p_nm_write_block+0x18>)
    6512:	591b      	ldr	r3, [r3, r4]
    6514:	9301      	str	r3, [sp, #4]
    6516:	4798      	blx	r3
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    6518:	b002      	add	sp, #8
    651a:	bd10      	pop	{r4, pc}
    651c:	0000c47e 	.word	0x0000c47e
    6520:	00000500 	.word	0x00000500

00006524 <nm_bus_iface_init>:
{
    6524:	b500      	push	{lr}
    6526:	b083      	sub	sp, #12
    6528:	4b03      	ldr	r3, [pc, #12]	; (6538 <nm_bus_iface_init+0x14>)
    652a:	447b      	add	r3, pc
	ret = nm_bus_init(pvInitVal);
    652c:	4a03      	ldr	r2, [pc, #12]	; (653c <nm_bus_iface_init+0x18>)
    652e:	589b      	ldr	r3, [r3, r2]
    6530:	9301      	str	r3, [sp, #4]
    6532:	4798      	blx	r3
}
    6534:	b003      	add	sp, #12
    6536:	bd00      	pop	{pc}
    6538:	0000c462 	.word	0x0000c462
    653c:	00000174 	.word	0x00000174

00006540 <nm_bus_iface_deinit>:
{
    6540:	b500      	push	{lr}
    6542:	b083      	sub	sp, #12
    6544:	4b03      	ldr	r3, [pc, #12]	; (6554 <nm_bus_iface_deinit+0x14>)
    6546:	447b      	add	r3, pc
	ret = nm_bus_deinit();
    6548:	4a03      	ldr	r2, [pc, #12]	; (6558 <nm_bus_iface_deinit+0x18>)
    654a:	589b      	ldr	r3, [r3, r2]
    654c:	9301      	str	r3, [sp, #4]
    654e:	4798      	blx	r3
}
    6550:	b003      	add	sp, #12
    6552:	bd00      	pop	{pc}
    6554:	0000c446 	.word	0x0000c446
    6558:	00000250 	.word	0x00000250

0000655c <nm_bus_reset>:
{
    655c:	b500      	push	{lr}
    655e:	b083      	sub	sp, #12
    6560:	4b03      	ldr	r3, [pc, #12]	; (6570 <nm_bus_reset+0x14>)
    6562:	447b      	add	r3, pc
	return nm_spi_reset();
    6564:	4a03      	ldr	r2, [pc, #12]	; (6574 <nm_bus_reset+0x18>)
    6566:	589b      	ldr	r3, [r3, r2]
    6568:	9301      	str	r3, [sp, #4]
    656a:	4798      	blx	r3
}
    656c:	b003      	add	sp, #12
    656e:	bd00      	pop	{pc}
    6570:	0000c42a 	.word	0x0000c42a
    6574:	000002b4 	.word	0x000002b4

00006578 <nm_read_reg>:
{
    6578:	b500      	push	{lr}
    657a:	b083      	sub	sp, #12
    657c:	4b03      	ldr	r3, [pc, #12]	; (658c <nm_read_reg+0x14>)
    657e:	447b      	add	r3, pc
	return nm_spi_read_reg(u32Addr);
    6580:	4a03      	ldr	r2, [pc, #12]	; (6590 <nm_read_reg+0x18>)
    6582:	589b      	ldr	r3, [r3, r2]
    6584:	9301      	str	r3, [sp, #4]
    6586:	4798      	blx	r3
}
    6588:	b003      	add	sp, #12
    658a:	bd00      	pop	{pc}
    658c:	0000c40e 	.word	0x0000c40e
    6590:	000003d0 	.word	0x000003d0

00006594 <nm_read_reg_with_ret>:
{
    6594:	b500      	push	{lr}
    6596:	b083      	sub	sp, #12
    6598:	4b03      	ldr	r3, [pc, #12]	; (65a8 <nm_read_reg_with_ret+0x14>)
    659a:	447b      	add	r3, pc
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    659c:	4a03      	ldr	r2, [pc, #12]	; (65ac <nm_read_reg_with_ret+0x18>)
    659e:	589b      	ldr	r3, [r3, r2]
    65a0:	9301      	str	r3, [sp, #4]
    65a2:	4798      	blx	r3
}
    65a4:	b003      	add	sp, #12
    65a6:	bd00      	pop	{pc}
    65a8:	0000c3f2 	.word	0x0000c3f2
    65ac:	00000344 	.word	0x00000344

000065b0 <nm_write_reg>:
{
    65b0:	b500      	push	{lr}
    65b2:	b083      	sub	sp, #12
    65b4:	4b03      	ldr	r3, [pc, #12]	; (65c4 <nm_write_reg+0x14>)
    65b6:	447b      	add	r3, pc
	return nm_spi_write_reg(u32Addr,u32Val);
    65b8:	4a03      	ldr	r2, [pc, #12]	; (65c8 <nm_write_reg+0x18>)
    65ba:	589b      	ldr	r3, [r3, r2]
    65bc:	9301      	str	r3, [sp, #4]
    65be:	4798      	blx	r3
}
    65c0:	b003      	add	sp, #12
    65c2:	bd00      	pop	{pc}
    65c4:	0000c3d6 	.word	0x0000c3d6
    65c8:	000001a8 	.word	0x000001a8

000065cc <nm_read_block>:
{
    65cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ce:	46ce      	mov	lr, r9
    65d0:	4647      	mov	r7, r8
    65d2:	b580      	push	{r7, lr}
    65d4:	b083      	sub	sp, #12
    65d6:	0006      	movs	r6, r0
    65d8:	4688      	mov	r8, r1
    65da:	0015      	movs	r5, r2
    65dc:	4b17      	ldr	r3, [pc, #92]	; (663c <nm_read_block+0x70>)
    65de:	447b      	add	r3, pc
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    65e0:	4a17      	ldr	r2, [pc, #92]	; (6640 <nm_read_block+0x74>)
    65e2:	589b      	ldr	r3, [r3, r2]
    65e4:	9301      	str	r3, [sp, #4]
    65e6:	881c      	ldrh	r4, [r3, #0]
    65e8:	3c08      	subs	r4, #8
    65ea:	b2a4      	uxth	r4, r4
	sint8 s8Ret = M2M_SUCCESS;
    65ec:	2300      	movs	r3, #0
    65ee:	4699      	mov	r9, r3
	uint32 off = 0;
    65f0:	2700      	movs	r7, #0
		if(u32Sz <= u16MaxTrxSz)
    65f2:	42a5      	cmp	r5, r4
    65f4:	d910      	bls.n	6618 <nm_read_block+0x4c>
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    65f6:	4643      	mov	r3, r8
    65f8:	19d9      	adds	r1, r3, r7
    65fa:	0022      	movs	r2, r4
    65fc:	0030      	movs	r0, r6
    65fe:	4b11      	ldr	r3, [pc, #68]	; (6644 <nm_read_block+0x78>)
    6600:	447b      	add	r3, pc
    6602:	4798      	blx	r3
    6604:	b2c0      	uxtb	r0, r0
    6606:	4448      	add	r0, r9
    6608:	b243      	sxtb	r3, r0
    660a:	4699      	mov	r9, r3
			if(M2M_SUCCESS != s8Ret) break;
    660c:	2b00      	cmp	r3, #0
    660e:	d10e      	bne.n	662e <nm_read_block+0x62>
			u32Sz -= u16MaxTrxSz;
    6610:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
    6612:	193f      	adds	r7, r7, r4
			u32Addr += u16MaxTrxSz;
    6614:	1936      	adds	r6, r6, r4
		if(u32Sz <= u16MaxTrxSz)
    6616:	e7ec      	b.n	65f2 <nm_read_block+0x26>
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    6618:	b2aa      	uxth	r2, r5
    661a:	0039      	movs	r1, r7
    661c:	4441      	add	r1, r8
    661e:	0030      	movs	r0, r6
    6620:	4b09      	ldr	r3, [pc, #36]	; (6648 <nm_read_block+0x7c>)
    6622:	447b      	add	r3, pc
    6624:	4798      	blx	r3
    6626:	b2c0      	uxtb	r0, r0
    6628:	4448      	add	r0, r9
    662a:	b243      	sxtb	r3, r0
    662c:	4699      	mov	r9, r3
}
    662e:	4648      	mov	r0, r9
    6630:	b003      	add	sp, #12
    6632:	bc0c      	pop	{r2, r3}
    6634:	4690      	mov	r8, r2
    6636:	4699      	mov	r9, r3
    6638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    663a:	46c0      	nop			; (mov r8, r8)
    663c:	0000c3ae 	.word	0x0000c3ae
    6640:	00000070 	.word	0x00000070
    6644:	fffffee9 	.word	0xfffffee9
    6648:	fffffec7 	.word	0xfffffec7

0000664c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    664c:	b5f0      	push	{r4, r5, r6, r7, lr}
    664e:	46ce      	mov	lr, r9
    6650:	4647      	mov	r7, r8
    6652:	b580      	push	{r7, lr}
    6654:	b083      	sub	sp, #12
    6656:	0006      	movs	r6, r0
    6658:	4688      	mov	r8, r1
    665a:	0015      	movs	r5, r2
    665c:	4b17      	ldr	r3, [pc, #92]	; (66bc <nm_write_block+0x70>)
    665e:	447b      	add	r3, pc
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    6660:	4a17      	ldr	r2, [pc, #92]	; (66c0 <nm_write_block+0x74>)
    6662:	589b      	ldr	r3, [r3, r2]
    6664:	9301      	str	r3, [sp, #4]
    6666:	881c      	ldrh	r4, [r3, #0]
    6668:	3c08      	subs	r4, #8
    666a:	b2a4      	uxth	r4, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;
    666c:	2300      	movs	r3, #0
    666e:	4699      	mov	r9, r3
	uint32 off = 0;
    6670:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    6672:	42a5      	cmp	r5, r4
    6674:	d910      	bls.n	6698 <nm_write_block+0x4c>
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    6676:	4643      	mov	r3, r8
    6678:	19d9      	adds	r1, r3, r7
    667a:	0022      	movs	r2, r4
    667c:	0030      	movs	r0, r6
    667e:	4b11      	ldr	r3, [pc, #68]	; (66c4 <nm_write_block+0x78>)
    6680:	447b      	add	r3, pc
    6682:	4798      	blx	r3
    6684:	b2c0      	uxtb	r0, r0
    6686:	4448      	add	r0, r9
    6688:	b243      	sxtb	r3, r0
    668a:	4699      	mov	r9, r3
			if(M2M_SUCCESS != s8Ret) break;
    668c:	2b00      	cmp	r3, #0
    668e:	d10e      	bne.n	66ae <nm_write_block+0x62>
			u32Sz -= u16MaxTrxSz;
    6690:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
    6692:	193f      	adds	r7, r7, r4
			u32Addr += u16MaxTrxSz;
    6694:	1936      	adds	r6, r6, r4
		if(u32Sz <= u16MaxTrxSz)
    6696:	e7ec      	b.n	6672 <nm_write_block+0x26>
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    6698:	b2aa      	uxth	r2, r5
    669a:	0039      	movs	r1, r7
    669c:	4441      	add	r1, r8
    669e:	0030      	movs	r0, r6
    66a0:	4b09      	ldr	r3, [pc, #36]	; (66c8 <nm_write_block+0x7c>)
    66a2:	447b      	add	r3, pc
    66a4:	4798      	blx	r3
    66a6:	b2c0      	uxtb	r0, r0
    66a8:	4448      	add	r0, r9
    66aa:	b243      	sxtb	r3, r0
    66ac:	4699      	mov	r9, r3
		}
	}

	return s8Ret;
}
    66ae:	4648      	mov	r0, r9
    66b0:	b003      	add	sp, #12
    66b2:	bc0c      	pop	{r2, r3}
    66b4:	4690      	mov	r8, r2
    66b6:	4699      	mov	r9, r3
    66b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ba:	46c0      	nop			; (mov r8, r8)
    66bc:	0000c32e 	.word	0x0000c32e
    66c0:	00000070 	.word	0x00000070
    66c4:	fffffe85 	.word	0xfffffe85
    66c8:	fffffe63 	.word	0xfffffe63

000066cc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    66cc:	b570      	push	{r4, r5, r6, lr}
    66ce:	b086      	sub	sp, #24
    66d0:	0005      	movs	r5, r0
    66d2:	4c38      	ldr	r4, [pc, #224]	; (67b4 <nm_get_firmware_full_info+0xe8>)
    66d4:	447c      	add	r4, pc
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    66d6:	2300      	movs	r3, #0
    66d8:	9305      	str	r3, [sp, #20]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    66da:	2208      	movs	r2, #8
    66dc:	2100      	movs	r1, #0
    66de:	a803      	add	r0, sp, #12
    66e0:	4b35      	ldr	r3, [pc, #212]	; (67b8 <nm_get_firmware_full_info+0xec>)
    66e2:	58e3      	ldr	r3, [r4, r3]
    66e4:	9301      	str	r3, [sp, #4]
    66e6:	4798      	blx	r3
	if (pstrRev != NULL)
    66e8:	2d00      	cmp	r5, #0
    66ea:	d051      	beq.n	6790 <nm_get_firmware_full_info+0xc4>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    66ec:	2228      	movs	r2, #40	; 0x28
    66ee:	2100      	movs	r1, #0
    66f0:	0028      	movs	r0, r5
    66f2:	4b32      	ldr	r3, [pc, #200]	; (67bc <nm_get_firmware_full_info+0xf0>)
    66f4:	58e3      	ldr	r3, [r4, r3]
    66f6:	9301      	str	r3, [sp, #4]
    66f8:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    66fa:	a905      	add	r1, sp, #20
    66fc:	4830      	ldr	r0, [pc, #192]	; (67c0 <nm_get_firmware_full_info+0xf4>)
    66fe:	4b31      	ldr	r3, [pc, #196]	; (67c4 <nm_get_firmware_full_info+0xf8>)
    6700:	58e3      	ldr	r3, [r4, r3]
    6702:	9301      	str	r3, [sp, #4]
    6704:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    6706:	2800      	cmp	r0, #0
    6708:	d143      	bne.n	6792 <nm_get_firmware_full_info+0xc6>
		{
			if(reg != 0)
    670a:	9b05      	ldr	r3, [sp, #20]
    670c:	2b00      	cmp	r3, #0
    670e:	d042      	beq.n	6796 <nm_get_firmware_full_info+0xca>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    6710:	20c0      	movs	r0, #192	; 0xc0
    6712:	0280      	lsls	r0, r0, #10
    6714:	4318      	orrs	r0, r3
    6716:	2208      	movs	r2, #8
    6718:	a903      	add	r1, sp, #12
    671a:	4b2b      	ldr	r3, [pc, #172]	; (67c8 <nm_get_firmware_full_info+0xfc>)
    671c:	58e3      	ldr	r3, [r4, r3]
    671e:	9301      	str	r3, [sp, #4]
    6720:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    6722:	2800      	cmp	r0, #0
    6724:	d135      	bne.n	6792 <nm_get_firmware_full_info+0xc6>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    6726:	9b04      	ldr	r3, [sp, #16]
    6728:	0418      	lsls	r0, r3, #16
    672a:	0c00      	lsrs	r0, r0, #16
    672c:	9005      	str	r0, [sp, #20]
					if(reg != 0)
    672e:	d035      	beq.n	679c <nm_get_firmware_full_info+0xd0>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    6730:	23c0      	movs	r3, #192	; 0xc0
    6732:	029b      	lsls	r3, r3, #10
    6734:	4318      	orrs	r0, r3
    6736:	2228      	movs	r2, #40	; 0x28
    6738:	0029      	movs	r1, r5
    673a:	4b23      	ldr	r3, [pc, #140]	; (67c8 <nm_get_firmware_full_info+0xfc>)
    673c:	58e3      	ldr	r3, [r4, r3]
    673e:	9301      	str	r3, [sp, #4]
    6740:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    6742:	2800      	cmp	r0, #0
    6744:	d125      	bne.n	6792 <nm_get_firmware_full_info+0xc6>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    6746:	7929      	ldrb	r1, [r5, #4]
    6748:	0209      	lsls	r1, r1, #8
    674a:	796b      	ldrb	r3, [r5, #5]
    674c:	011b      	lsls	r3, r3, #4
    674e:	22ff      	movs	r2, #255	; 0xff
    6750:	4013      	ands	r3, r2
    6752:	430b      	orrs	r3, r1
    6754:	b21b      	sxth	r3, r3
    6756:	79ac      	ldrb	r4, [r5, #6]
    6758:	210f      	movs	r1, #15
    675a:	400c      	ands	r4, r1
    675c:	4323      	orrs	r3, r4
    675e:	b29b      	uxth	r3, r3
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    6760:	79ec      	ldrb	r4, [r5, #7]
    6762:	0224      	lsls	r4, r4, #8
    6764:	7a2e      	ldrb	r6, [r5, #8]
    6766:	0136      	lsls	r6, r6, #4
    6768:	4032      	ands	r2, r6
    676a:	4322      	orrs	r2, r4
    676c:	b212      	sxth	r2, r2
    676e:	7a6c      	ldrb	r4, [r5, #9]
    6770:	4021      	ands	r1, r4
    6772:	430a      	orrs	r2, r1
    6774:	b292      	uxth	r2, r2
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    6776:	2b00      	cmp	r3, #0
    6778:	d013      	beq.n	67a2 <nm_get_firmware_full_info+0xd6>
    677a:	2a00      	cmp	r2, #0
    677c:	d014      	beq.n	67a8 <nm_get_firmware_full_info+0xdc>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    677e:	4913      	ldr	r1, [pc, #76]	; (67cc <nm_get_firmware_full_info+0x100>)
    6780:	428a      	cmp	r2, r1
    6782:	d814      	bhi.n	67ae <nm_get_firmware_full_info+0xe2>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    6784:	4a12      	ldr	r2, [pc, #72]	; (67d0 <nm_get_firmware_full_info+0x104>)
    6786:	4293      	cmp	r3, r2
    6788:	d803      	bhi.n	6792 <nm_get_firmware_full_info+0xc6>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    678a:	200d      	movs	r0, #13
    678c:	4240      	negs	r0, r0
    678e:	e000      	b.n	6792 <nm_get_firmware_full_info+0xc6>
	sint8	ret = M2M_SUCCESS;
    6790:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    6792:	b006      	add	sp, #24
    6794:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    6796:	200c      	movs	r0, #12
    6798:	4240      	negs	r0, r0
    679a:	e7fa      	b.n	6792 <nm_get_firmware_full_info+0xc6>
						ret = M2M_ERR_FAIL;
    679c:	200c      	movs	r0, #12
    679e:	4240      	negs	r0, r0
    67a0:	e7f7      	b.n	6792 <nm_get_firmware_full_info+0xc6>
								ret = M2M_ERR_FAIL;
    67a2:	200c      	movs	r0, #12
    67a4:	4240      	negs	r0, r0
    67a6:	e7f4      	b.n	6792 <nm_get_firmware_full_info+0xc6>
    67a8:	200c      	movs	r0, #12
    67aa:	4240      	negs	r0, r0
    67ac:	e7f1      	b.n	6792 <nm_get_firmware_full_info+0xc6>
								ret = M2M_ERR_FW_VER_MISMATCH;
    67ae:	200d      	movs	r0, #13
    67b0:	4240      	negs	r0, r0
    67b2:	e7ee      	b.n	6792 <nm_get_firmware_full_info+0xc6>
    67b4:	0000c2b8 	.word	0x0000c2b8
    67b8:	00000328 	.word	0x00000328
    67bc:	000001b8 	.word	0x000001b8
    67c0:	000c0008 	.word	0x000c0008
    67c4:	00000044 	.word	0x00000044
    67c8:	000003ac 	.word	0x000003ac
    67cc:	00001352 	.word	0x00001352
    67d0:	00001351 	.word	0x00001351

000067d4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    67d4:	b570      	push	{r4, r5, r6, lr}
    67d6:	b082      	sub	sp, #8
    67d8:	4d39      	ldr	r5, [pc, #228]	; (68c0 <nm_drv_init+0xec>)
    67da:	447d      	add	r5, pc
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    67dc:	2800      	cmp	r0, #0
    67de:	d055      	beq.n	688c <nm_drv_init+0xb8>
		u8Mode = *((uint8 *)arg);
    67e0:	7806      	ldrb	r6, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    67e2:	1e73      	subs	r3, r6, #1
    67e4:	b2db      	uxtb	r3, r3
    67e6:	2b03      	cmp	r3, #3
    67e8:	d852      	bhi.n	6890 <nm_drv_init+0xbc>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    67ea:	2000      	movs	r0, #0
    67ec:	4b35      	ldr	r3, [pc, #212]	; (68c4 <nm_drv_init+0xf0>)
    67ee:	58eb      	ldr	r3, [r5, r3]
    67f0:	9301      	str	r3, [sp, #4]
    67f2:	4798      	blx	r3
    67f4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    67f6:	d14d      	bne.n	6894 <nm_drv_init+0xc0>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    67f8:	4833      	ldr	r0, [pc, #204]	; (68c8 <nm_drv_init+0xf4>)
    67fa:	4478      	add	r0, pc
    67fc:	4b33      	ldr	r3, [pc, #204]	; (68cc <nm_drv_init+0xf8>)
    67fe:	58ec      	ldr	r4, [r5, r3]
    6800:	47a0      	blx	r4
    6802:	4b33      	ldr	r3, [pc, #204]	; (68d0 <nm_drv_init+0xfc>)
    6804:	58eb      	ldr	r3, [r5, r3]
    6806:	9301      	str	r3, [sp, #4]
    6808:	4798      	blx	r3
    680a:	0001      	movs	r1, r0
    680c:	4831      	ldr	r0, [pc, #196]	; (68d4 <nm_drv_init+0x100>)
    680e:	4478      	add	r0, pc
    6810:	47a0      	blx	r4
    6812:	200d      	movs	r0, #13
    6814:	4b30      	ldr	r3, [pc, #192]	; (68d8 <nm_drv_init+0x104>)
    6816:	58eb      	ldr	r3, [r5, r3]
    6818:	9301      	str	r3, [sp, #4]
    681a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    681c:	4b2f      	ldr	r3, [pc, #188]	; (68dc <nm_drv_init+0x108>)
    681e:	58eb      	ldr	r3, [r5, r3]
    6820:	9301      	str	r3, [sp, #4]
    6822:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    6824:	0030      	movs	r0, r6
    6826:	4b2e      	ldr	r3, [pc, #184]	; (68e0 <nm_drv_init+0x10c>)
    6828:	58eb      	ldr	r3, [r5, r3]
    682a:	9301      	str	r3, [sp, #4]
    682c:	4798      	blx	r3
    682e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    6830:	d125      	bne.n	687e <nm_drv_init+0xaa>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    6832:	0030      	movs	r0, r6
    6834:	4b2b      	ldr	r3, [pc, #172]	; (68e4 <nm_drv_init+0x110>)
    6836:	58eb      	ldr	r3, [r5, r3]
    6838:	9301      	str	r3, [sp, #4]
    683a:	4798      	blx	r3
    683c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    683e:	d11e      	bne.n	687e <nm_drv_init+0xaa>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    6840:	3e02      	subs	r6, #2
    6842:	b2f6      	uxtb	r6, r6
    6844:	2e01      	cmp	r6, #1
    6846:	d91e      	bls.n	6886 <nm_drv_init+0xb2>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    6848:	4b27      	ldr	r3, [pc, #156]	; (68e8 <nm_drv_init+0x114>)
    684a:	58eb      	ldr	r3, [r5, r3]
    684c:	9301      	str	r3, [sp, #4]
    684e:	4798      	blx	r3
    6850:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    6852:	d018      	beq.n	6886 <nm_drv_init+0xb2>
		M2M_ERR("failed to enable interrupts..\n");
    6854:	2256      	movs	r2, #86	; 0x56
    6856:	32ff      	adds	r2, #255	; 0xff
    6858:	4924      	ldr	r1, [pc, #144]	; (68ec <nm_drv_init+0x118>)
    685a:	4479      	add	r1, pc
    685c:	4824      	ldr	r0, [pc, #144]	; (68f0 <nm_drv_init+0x11c>)
    685e:	4478      	add	r0, pc
    6860:	4b1a      	ldr	r3, [pc, #104]	; (68cc <nm_drv_init+0xf8>)
    6862:	58eb      	ldr	r3, [r5, r3]
    6864:	9301      	str	r3, [sp, #4]
    6866:	4798      	blx	r3
    6868:	4822      	ldr	r0, [pc, #136]	; (68f4 <nm_drv_init+0x120>)
    686a:	4478      	add	r0, pc
    686c:	4b22      	ldr	r3, [pc, #136]	; (68f8 <nm_drv_init+0x124>)
    686e:	58eb      	ldr	r3, [r5, r3]
    6870:	9301      	str	r3, [sp, #4]
    6872:	4798      	blx	r3
    6874:	200d      	movs	r0, #13
    6876:	4b18      	ldr	r3, [pc, #96]	; (68d8 <nm_drv_init+0x104>)
    6878:	58eb      	ldr	r3, [r5, r3]
    687a:	9301      	str	r3, [sp, #4]
    687c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    687e:	4b1f      	ldr	r3, [pc, #124]	; (68fc <nm_drv_init+0x128>)
    6880:	58eb      	ldr	r3, [r5, r3]
    6882:	9301      	str	r3, [sp, #4]
    6884:	4798      	blx	r3
ERR1:
	return ret;
}
    6886:	0020      	movs	r0, r4
    6888:	b002      	add	sp, #8
    688a:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    688c:	2601      	movs	r6, #1
    688e:	e7ac      	b.n	67ea <nm_drv_init+0x16>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    6890:	2601      	movs	r6, #1
    6892:	e7aa      	b.n	67ea <nm_drv_init+0x16>
		M2M_ERR("[nmi start]: fail init bus\n");
    6894:	2228      	movs	r2, #40	; 0x28
    6896:	32ff      	adds	r2, #255	; 0xff
    6898:	4919      	ldr	r1, [pc, #100]	; (6900 <nm_drv_init+0x12c>)
    689a:	4479      	add	r1, pc
    689c:	4819      	ldr	r0, [pc, #100]	; (6904 <nm_drv_init+0x130>)
    689e:	4478      	add	r0, pc
    68a0:	4b0a      	ldr	r3, [pc, #40]	; (68cc <nm_drv_init+0xf8>)
    68a2:	58eb      	ldr	r3, [r5, r3]
    68a4:	9301      	str	r3, [sp, #4]
    68a6:	4798      	blx	r3
    68a8:	4817      	ldr	r0, [pc, #92]	; (6908 <nm_drv_init+0x134>)
    68aa:	4478      	add	r0, pc
    68ac:	4b12      	ldr	r3, [pc, #72]	; (68f8 <nm_drv_init+0x124>)
    68ae:	58eb      	ldr	r3, [r5, r3]
    68b0:	9301      	str	r3, [sp, #4]
    68b2:	4798      	blx	r3
    68b4:	200d      	movs	r0, #13
    68b6:	4b08      	ldr	r3, [pc, #32]	; (68d8 <nm_drv_init+0x104>)
    68b8:	58eb      	ldr	r3, [r5, r3]
    68ba:	9301      	str	r3, [sp, #4]
    68bc:	4798      	blx	r3
		goto ERR1;
    68be:	e7e2      	b.n	6886 <nm_drv_init+0xb2>
    68c0:	0000c1b2 	.word	0x0000c1b2
    68c4:	0000027c 	.word	0x0000027c
    68c8:	0000b462 	.word	0x0000b462
    68cc:	0000003c 	.word	0x0000003c
    68d0:	0000002c 	.word	0x0000002c
    68d4:	0000b82a 	.word	0x0000b82a
    68d8:	00000000 	.word	0x00000000
    68dc:	00000474 	.word	0x00000474
    68e0:	000004c8 	.word	0x000004c8
    68e4:	000004d4 	.word	0x000004d4
    68e8:	000004a4 	.word	0x000004a4
    68ec:	0000b726 	.word	0x0000b726
    68f0:	0000b0ee 	.word	0x0000b0ee
    68f4:	0000b792 	.word	0x0000b792
    68f8:	00000108 	.word	0x00000108
    68fc:	000003e8 	.word	0x000003e8
    6900:	0000b6e6 	.word	0x0000b6e6
    6904:	0000b0ae 	.word	0x0000b0ae
    6908:	0000b772 	.word	0x0000b772

0000690c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    690c:	b530      	push	{r4, r5, lr}
    690e:	b083      	sub	sp, #12
    6910:	4d2e      	ldr	r5, [pc, #184]	; (69cc <nm_drv_deinit+0xc0>)
    6912:	447d      	add	r5, pc
	sint8 ret;

	ret = chip_deinit();
    6914:	4b2e      	ldr	r3, [pc, #184]	; (69d0 <nm_drv_deinit+0xc4>)
    6916:	58eb      	ldr	r3, [r5, r3]
    6918:	9301      	str	r3, [sp, #4]
    691a:	4798      	blx	r3
    691c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    691e:	d111      	bne.n	6944 <nm_drv_deinit+0x38>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    6920:	2000      	movs	r0, #0
    6922:	4b2c      	ldr	r3, [pc, #176]	; (69d4 <nm_drv_deinit+0xc8>)
    6924:	58eb      	ldr	r3, [r5, r3]
    6926:	9301      	str	r3, [sp, #4]
    6928:	4798      	blx	r3
    692a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    692c:	d122      	bne.n	6974 <nm_drv_deinit+0x68>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    692e:	4b2a      	ldr	r3, [pc, #168]	; (69d8 <nm_drv_deinit+0xcc>)
    6930:	58eb      	ldr	r3, [r5, r3]
    6932:	9301      	str	r3, [sp, #4]
    6934:	4798      	blx	r3
    6936:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    6938:	d132      	bne.n	69a0 <nm_drv_deinit+0x94>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    693a:	4b28      	ldr	r3, [pc, #160]	; (69dc <nm_drv_deinit+0xd0>)
    693c:	58eb      	ldr	r3, [r5, r3]
    693e:	9301      	str	r3, [sp, #4]
    6940:	4798      	blx	r3
    6942:	e014      	b.n	696e <nm_drv_deinit+0x62>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    6944:	22b6      	movs	r2, #182	; 0xb6
    6946:	0052      	lsls	r2, r2, #1
    6948:	4925      	ldr	r1, [pc, #148]	; (69e0 <nm_drv_deinit+0xd4>)
    694a:	4479      	add	r1, pc
    694c:	4825      	ldr	r0, [pc, #148]	; (69e4 <nm_drv_deinit+0xd8>)
    694e:	4478      	add	r0, pc
    6950:	4b25      	ldr	r3, [pc, #148]	; (69e8 <nm_drv_deinit+0xdc>)
    6952:	58eb      	ldr	r3, [r5, r3]
    6954:	9301      	str	r3, [sp, #4]
    6956:	4798      	blx	r3
    6958:	4824      	ldr	r0, [pc, #144]	; (69ec <nm_drv_deinit+0xe0>)
    695a:	4478      	add	r0, pc
    695c:	4b24      	ldr	r3, [pc, #144]	; (69f0 <nm_drv_deinit+0xe4>)
    695e:	58eb      	ldr	r3, [r5, r3]
    6960:	9301      	str	r3, [sp, #4]
    6962:	4798      	blx	r3
    6964:	200d      	movs	r0, #13
    6966:	4b23      	ldr	r3, [pc, #140]	; (69f4 <nm_drv_deinit+0xe8>)
    6968:	58eb      	ldr	r3, [r5, r3]
    696a:	9301      	str	r3, [sp, #4]
    696c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    696e:	0020      	movs	r0, r4
    6970:	b003      	add	sp, #12
    6972:	bd30      	pop	{r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    6974:	2274      	movs	r2, #116	; 0x74
    6976:	32ff      	adds	r2, #255	; 0xff
    6978:	491f      	ldr	r1, [pc, #124]	; (69f8 <nm_drv_deinit+0xec>)
    697a:	4479      	add	r1, pc
    697c:	481f      	ldr	r0, [pc, #124]	; (69fc <nm_drv_deinit+0xf0>)
    697e:	4478      	add	r0, pc
    6980:	4b19      	ldr	r3, [pc, #100]	; (69e8 <nm_drv_deinit+0xdc>)
    6982:	58eb      	ldr	r3, [r5, r3]
    6984:	9301      	str	r3, [sp, #4]
    6986:	4798      	blx	r3
    6988:	481d      	ldr	r0, [pc, #116]	; (6a00 <nm_drv_deinit+0xf4>)
    698a:	4478      	add	r0, pc
    698c:	4b18      	ldr	r3, [pc, #96]	; (69f0 <nm_drv_deinit+0xe4>)
    698e:	58eb      	ldr	r3, [r5, r3]
    6990:	9301      	str	r3, [sp, #4]
    6992:	4798      	blx	r3
    6994:	200d      	movs	r0, #13
    6996:	4b17      	ldr	r3, [pc, #92]	; (69f4 <nm_drv_deinit+0xe8>)
    6998:	58eb      	ldr	r3, [r5, r3]
    699a:	9301      	str	r3, [sp, #4]
    699c:	4798      	blx	r3
		goto ERR1;
    699e:	e7e6      	b.n	696e <nm_drv_deinit+0x62>
		M2M_ERR("[nmi stop]: fail init bus\n");
    69a0:	227a      	movs	r2, #122	; 0x7a
    69a2:	32ff      	adds	r2, #255	; 0xff
    69a4:	4917      	ldr	r1, [pc, #92]	; (6a04 <nm_drv_deinit+0xf8>)
    69a6:	4479      	add	r1, pc
    69a8:	4817      	ldr	r0, [pc, #92]	; (6a08 <nm_drv_deinit+0xfc>)
    69aa:	4478      	add	r0, pc
    69ac:	4b0e      	ldr	r3, [pc, #56]	; (69e8 <nm_drv_deinit+0xdc>)
    69ae:	58eb      	ldr	r3, [r5, r3]
    69b0:	9301      	str	r3, [sp, #4]
    69b2:	4798      	blx	r3
    69b4:	4815      	ldr	r0, [pc, #84]	; (6a0c <nm_drv_deinit+0x100>)
    69b6:	4478      	add	r0, pc
    69b8:	4b0d      	ldr	r3, [pc, #52]	; (69f0 <nm_drv_deinit+0xe4>)
    69ba:	58eb      	ldr	r3, [r5, r3]
    69bc:	9301      	str	r3, [sp, #4]
    69be:	4798      	blx	r3
    69c0:	200d      	movs	r0, #13
    69c2:	4b0c      	ldr	r3, [pc, #48]	; (69f4 <nm_drv_deinit+0xe8>)
    69c4:	58eb      	ldr	r3, [r5, r3]
    69c6:	9301      	str	r3, [sp, #4]
    69c8:	4798      	blx	r3
		goto ERR1;
    69ca:	e7d0      	b.n	696e <nm_drv_deinit+0x62>
    69cc:	0000c07a 	.word	0x0000c07a
    69d0:	00000050 	.word	0x00000050
    69d4:	000001ac 	.word	0x000001ac
    69d8:	000003e8 	.word	0x000003e8
    69dc:	000000a8 	.word	0x000000a8
    69e0:	0000b642 	.word	0x0000b642
    69e4:	0000affe 	.word	0x0000affe
    69e8:	0000003c 	.word	0x0000003c
    69ec:	0000b642 	.word	0x0000b642
    69f0:	00000108 	.word	0x00000108
    69f4:	00000000 	.word	0x00000000
    69f8:	0000b612 	.word	0x0000b612
    69fc:	0000afce 	.word	0x0000afce
    6a00:	0000b632 	.word	0x0000b632
    6a04:	0000b5e6 	.word	0x0000b5e6
    6a08:	0000afa2 	.word	0x0000afa2
    6a0c:	0000b62a 	.word	0x0000b62a

00006a10 <crc7_byte>:
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    6a10:	0040      	lsls	r0, r0, #1
    6a12:	4041      	eors	r1, r0
    6a14:	4b01      	ldr	r3, [pc, #4]	; (6a1c <crc7_byte+0xc>)
    6a16:	447b      	add	r3, pc
    6a18:	5c58      	ldrb	r0, [r3, r1]
}
    6a1a:	4770      	bx	lr
    6a1c:	0000b6be 	.word	0x0000b6be

00006a20 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    6a20:	b570      	push	{r4, r5, r6, lr}
	while (len--)
    6a22:	e006      	b.n	6a32 <crc7+0x12>
		crc = crc7_byte(crc, *buffer++);
    6a24:	1c4d      	adds	r5, r1, #1
    6a26:	7809      	ldrb	r1, [r1, #0]
    6a28:	4b04      	ldr	r3, [pc, #16]	; (6a3c <crc7+0x1c>)
    6a2a:	447b      	add	r3, pc
    6a2c:	4798      	blx	r3
	while (len--)
    6a2e:	0022      	movs	r2, r4
		crc = crc7_byte(crc, *buffer++);
    6a30:	0029      	movs	r1, r5
	while (len--)
    6a32:	1e54      	subs	r4, r2, #1
    6a34:	2a00      	cmp	r2, #0
    6a36:	d1f5      	bne.n	6a24 <crc7+0x4>
	return crc;
}
    6a38:	bd70      	pop	{r4, r5, r6, pc}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	ffffffe3 	.word	0xffffffe3

00006a40 <nmi_spi_write>:
{
    6a40:	b500      	push	{lr}
    6a42:	b087      	sub	sp, #28
    6a44:	4a07      	ldr	r2, [pc, #28]	; (6a64 <nmi_spi_write+0x24>)
    6a46:	447a      	add	r2, pc
	spi.pu8InBuf = b;
    6a48:	9003      	str	r0, [sp, #12]
	spi.pu8OutBuf = NULL;
    6a4a:	2000      	movs	r0, #0
    6a4c:	ab03      	add	r3, sp, #12
    6a4e:	9004      	str	r0, [sp, #16]
	spi.u16Sz = sz;
    6a50:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    6a52:	0019      	movs	r1, r3
    6a54:	3003      	adds	r0, #3
    6a56:	4b04      	ldr	r3, [pc, #16]	; (6a68 <nmi_spi_write+0x28>)
    6a58:	58d3      	ldr	r3, [r2, r3]
    6a5a:	9301      	str	r3, [sp, #4]
    6a5c:	4798      	blx	r3
}
    6a5e:	b007      	add	sp, #28
    6a60:	bd00      	pop	{pc}
    6a62:	46c0      	nop			; (mov r8, r8)
    6a64:	0000bf46 	.word	0x0000bf46
    6a68:	000000dc 	.word	0x000000dc

00006a6c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    6a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a6e:	b087      	sub	sp, #28
    6a70:	ac0c      	add	r4, sp, #48	; 0x30
    6a72:	7825      	ldrb	r5, [r4, #0]
    6a74:	4f60      	ldr	r7, [pc, #384]	; (6bf8 <spi_cmd+0x18c>)
    6a76:	447f      	add	r7, pc
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    6a78:	ac03      	add	r4, sp, #12
    6a7a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    6a7c:	38c1      	subs	r0, #193	; 0xc1
    6a7e:	280e      	cmp	r0, #14
    6a80:	d900      	bls.n	6a84 <spi_cmd+0x18>
    6a82:	e09b      	b.n	6bbc <spi_cmd+0x150>
    6a84:	f008 fdcc 	bl	f620 <__gnu_thumb1_case_uqi>
    6a88:	2f735959 	.word	0x2f735959
    6a8c:	65654941 	.word	0x65654941
    6a90:	9a9a088a 	.word	0x9a9a088a
    6a94:	9a9a      	.short	0x9a9a
    6a96:	51          	.byte	0x51
    6a97:	00          	.byte	0x00
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    6a98:	0c0a      	lsrs	r2, r1, #16
    6a9a:	ab03      	add	r3, sp, #12
    6a9c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6a9e:	0a0a      	lsrs	r2, r1, #8
    6aa0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    6aa2:	70d9      	strb	r1, [r3, #3]
	sint8 result = N_OK;
    6aa4:	2501      	movs	r5, #1
		len = 5;
    6aa6:	2405      	movs	r4, #5
	default:
		result = N_FAIL;
		break;
	}

	if (result) {
    6aa8:	2d00      	cmp	r5, #0
    6aaa:	d019      	beq.n	6ae0 <spi_cmd+0x74>
		if (!gu8Crc_off)
    6aac:	4b53      	ldr	r3, [pc, #332]	; (6bfc <spi_cmd+0x190>)
    6aae:	447b      	add	r3, pc
    6ab0:	781b      	ldrb	r3, [r3, #0]
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	d000      	beq.n	6ab8 <spi_cmd+0x4c>
    6ab6:	e084      	b.n	6bc2 <spi_cmd+0x156>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    6ab8:	1e66      	subs	r6, r4, #1
    6aba:	0032      	movs	r2, r6
    6abc:	ab03      	add	r3, sp, #12
    6abe:	9301      	str	r3, [sp, #4]
    6ac0:	0019      	movs	r1, r3
    6ac2:	207f      	movs	r0, #127	; 0x7f
    6ac4:	4b4e      	ldr	r3, [pc, #312]	; (6c00 <spi_cmd+0x194>)
    6ac6:	447b      	add	r3, pc
    6ac8:	4798      	blx	r3
    6aca:	0040      	lsls	r0, r0, #1
    6acc:	9b01      	ldr	r3, [sp, #4]
    6ace:	5598      	strb	r0, [r3, r6]
		else
			len-=1;

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    6ad0:	b2a1      	uxth	r1, r4
    6ad2:	a803      	add	r0, sp, #12
    6ad4:	4b4b      	ldr	r3, [pc, #300]	; (6c04 <spi_cmd+0x198>)
    6ad6:	447b      	add	r3, pc
    6ad8:	4798      	blx	r3
    6ada:	2800      	cmp	r0, #0
    6adc:	d000      	beq.n	6ae0 <spi_cmd+0x74>
    6ade:	e073      	b.n	6bc8 <spi_cmd+0x15c>
			result = N_FAIL;
		}
	}

	return result;
}
    6ae0:	0028      	movs	r0, r5
    6ae2:	b007      	add	sp, #28
    6ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc[1] = (uint8)(adr >> 8);
    6ae6:	0a0b      	lsrs	r3, r1, #8
    6ae8:	b2db      	uxtb	r3, r3
    6aea:	aa03      	add	r2, sp, #12
    6aec:	7053      	strb	r3, [r2, #1]
		if(clockless)  bc[1] |= (1 << 7);
    6aee:	2d00      	cmp	r5, #0
    6af0:	d004      	beq.n	6afc <spi_cmd+0x90>
    6af2:	2280      	movs	r2, #128	; 0x80
    6af4:	4252      	negs	r2, r2
    6af6:	4313      	orrs	r3, r2
    6af8:	aa03      	add	r2, sp, #12
    6afa:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    6afc:	ab03      	add	r3, sp, #12
    6afe:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    6b00:	2200      	movs	r2, #0
    6b02:	70da      	strb	r2, [r3, #3]
	sint8 result = N_OK;
    6b04:	2501      	movs	r5, #1
		len = 5;
    6b06:	2405      	movs	r4, #5
		break;
    6b08:	e7ce      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = 0x00;
    6b0a:	2200      	movs	r2, #0
    6b0c:	ab03      	add	r3, sp, #12
    6b0e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    6b10:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6b12:	70da      	strb	r2, [r3, #3]
	sint8 result = N_OK;
    6b14:	2501      	movs	r5, #1
		len = 5;
    6b16:	2405      	movs	r4, #5
		break;
    6b18:	e7c6      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = 0x00;
    6b1a:	2200      	movs	r2, #0
    6b1c:	ab03      	add	r3, sp, #12
    6b1e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    6b20:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    6b22:	70da      	strb	r2, [r3, #3]
	sint8 result = N_OK;
    6b24:	2501      	movs	r5, #1
		len = 5;
    6b26:	2405      	movs	r4, #5
		break;
    6b28:	e7be      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = 0xff;
    6b2a:	22ff      	movs	r2, #255	; 0xff
    6b2c:	ab03      	add	r3, sp, #12
    6b2e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    6b30:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    6b32:	70da      	strb	r2, [r3, #3]
	sint8 result = N_OK;
    6b34:	2501      	movs	r5, #1
		len = 5;
    6b36:	2405      	movs	r4, #5
		break;
    6b38:	e7b6      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = (uint8)(adr >> 16);
    6b3a:	0c08      	lsrs	r0, r1, #16
    6b3c:	aa03      	add	r2, sp, #12
    6b3e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    6b40:	0a08      	lsrs	r0, r1, #8
    6b42:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    6b44:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    6b46:	0a19      	lsrs	r1, r3, #8
    6b48:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    6b4a:	7153      	strb	r3, [r2, #5]
	sint8 result = N_OK;
    6b4c:	2501      	movs	r5, #1
		len = 7;
    6b4e:	2407      	movs	r4, #7
		break;
    6b50:	e7aa      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = (uint8)(adr >> 16);
    6b52:	0c08      	lsrs	r0, r1, #16
    6b54:	aa03      	add	r2, sp, #12
    6b56:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    6b58:	0a08      	lsrs	r0, r1, #8
    6b5a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    6b5c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    6b5e:	0c19      	lsrs	r1, r3, #16
    6b60:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    6b62:	0a19      	lsrs	r1, r3, #8
    6b64:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    6b66:	7193      	strb	r3, [r2, #6]
	sint8 result = N_OK;
    6b68:	2501      	movs	r5, #1
		len = 8;
    6b6a:	2408      	movs	r4, #8
		break;
    6b6c:	e79c      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = (uint8)(adr >> 8);
    6b6e:	0a0b      	lsrs	r3, r1, #8
    6b70:	b2db      	uxtb	r3, r3
    6b72:	a803      	add	r0, sp, #12
    6b74:	7043      	strb	r3, [r0, #1]
		if(clockless)  bc[1] |= (1 << 7);
    6b76:	2d00      	cmp	r5, #0
    6b78:	d004      	beq.n	6b84 <spi_cmd+0x118>
    6b7a:	2080      	movs	r0, #128	; 0x80
    6b7c:	4240      	negs	r0, r0
    6b7e:	4303      	orrs	r3, r0
    6b80:	a803      	add	r0, sp, #12
    6b82:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    6b84:	ab03      	add	r3, sp, #12
    6b86:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    6b88:	0e11      	lsrs	r1, r2, #24
    6b8a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    6b8c:	0c11      	lsrs	r1, r2, #16
    6b8e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    6b90:	0a11      	lsrs	r1, r2, #8
    6b92:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    6b94:	719a      	strb	r2, [r3, #6]
	sint8 result = N_OK;
    6b96:	2501      	movs	r5, #1
		len = 8;
    6b98:	2408      	movs	r4, #8
		break;
    6b9a:	e785      	b.n	6aa8 <spi_cmd+0x3c>
		bc[1] = (uint8)(adr >> 16);
    6b9c:	0c08      	lsrs	r0, r1, #16
    6b9e:	ab03      	add	r3, sp, #12
    6ba0:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6ba2:	0a08      	lsrs	r0, r1, #8
    6ba4:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    6ba6:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    6ba8:	0e11      	lsrs	r1, r2, #24
    6baa:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    6bac:	0c11      	lsrs	r1, r2, #16
    6bae:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    6bb0:	0a11      	lsrs	r1, r2, #8
    6bb2:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    6bb4:	71da      	strb	r2, [r3, #7]
	sint8 result = N_OK;
    6bb6:	2501      	movs	r5, #1
		len = 9;
    6bb8:	2409      	movs	r4, #9
		break;
    6bba:	e775      	b.n	6aa8 <spi_cmd+0x3c>
		result = N_FAIL;
    6bbc:	2500      	movs	r5, #0
	uint8 len = 5;
    6bbe:	2405      	movs	r4, #5
    6bc0:	e772      	b.n	6aa8 <spi_cmd+0x3c>
			len-=1;
    6bc2:	3c01      	subs	r4, #1
    6bc4:	b2e4      	uxtb	r4, r4
    6bc6:	e783      	b.n	6ad0 <spi_cmd+0x64>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    6bc8:	2228      	movs	r2, #40	; 0x28
    6bca:	32ff      	adds	r2, #255	; 0xff
    6bcc:	490e      	ldr	r1, [pc, #56]	; (6c08 <spi_cmd+0x19c>)
    6bce:	4479      	add	r1, pc
    6bd0:	480e      	ldr	r0, [pc, #56]	; (6c0c <spi_cmd+0x1a0>)
    6bd2:	4478      	add	r0, pc
    6bd4:	4b0e      	ldr	r3, [pc, #56]	; (6c10 <spi_cmd+0x1a4>)
    6bd6:	58fb      	ldr	r3, [r7, r3]
    6bd8:	9301      	str	r3, [sp, #4]
    6bda:	4798      	blx	r3
    6bdc:	480d      	ldr	r0, [pc, #52]	; (6c14 <spi_cmd+0x1a8>)
    6bde:	4478      	add	r0, pc
    6be0:	4b0d      	ldr	r3, [pc, #52]	; (6c18 <spi_cmd+0x1ac>)
    6be2:	58fb      	ldr	r3, [r7, r3]
    6be4:	9301      	str	r3, [sp, #4]
    6be6:	4798      	blx	r3
    6be8:	200d      	movs	r0, #13
    6bea:	4b0c      	ldr	r3, [pc, #48]	; (6c1c <spi_cmd+0x1b0>)
    6bec:	58fb      	ldr	r3, [r7, r3]
    6bee:	9301      	str	r3, [sp, #4]
    6bf0:	4798      	blx	r3
			result = N_FAIL;
    6bf2:	2500      	movs	r5, #0
    6bf4:	e774      	b.n	6ae0 <spi_cmd+0x74>
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	0000bf16 	.word	0x0000bf16
    6bfc:	1fff9e6e 	.word	0x1fff9e6e
    6c00:	ffffff57 	.word	0xffffff57
    6c04:	ffffff67 	.word	0xffffff67
    6c08:	0000b47a 	.word	0x0000b47a
    6c0c:	0000ad7a 	.word	0x0000ad7a
    6c10:	0000003c 	.word	0x0000003c
    6c14:	0000b806 	.word	0x0000b806
    6c18:	00000108 	.word	0x00000108
    6c1c:	00000000 	.word	0x00000000

00006c20 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    6c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c22:	46d6      	mov	lr, sl
    6c24:	464f      	mov	r7, r9
    6c26:	4646      	mov	r6, r8
    6c28:	b5c0      	push	{r6, r7, lr}
    6c2a:	b084      	sub	sp, #16
    6c2c:	4680      	mov	r8, r0
    6c2e:	000e      	movs	r6, r1
    6c30:	4b4a      	ldr	r3, [pc, #296]	; (6d5c <spi_data_write+0x13c>)
    6c32:	447b      	add	r3, pc
    6c34:	4699      	mov	r9, r3
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    6c36:	2200      	movs	r2, #0
    6c38:	ab03      	add	r3, sp, #12
    6c3a:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6c3c:	2400      	movs	r4, #0
    6c3e:	e028      	b.n	6c92 <spi_data_write+0x72>
	do {
		if (sz <= DATA_PKT_SZ)
			nbytes = sz;
		else
			nbytes = DATA_PKT_SZ;
    6c40:	2580      	movs	r5, #128	; 0x80
    6c42:	01ad      	lsls	r5, r5, #6
    6c44:	e02a      	b.n	6c9c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
    6c46:	2380      	movs	r3, #128	; 0x80
    6c48:	019b      	lsls	r3, r3, #6
    6c4a:	429e      	cmp	r6, r3
    6c4c:	d830      	bhi.n	6cb0 <spi_data_write+0x90>
				order = 0x3;
    6c4e:	2203      	movs	r2, #3
			else
				order = 0x2;
		}
		cmd |= order;
    6c50:	2310      	movs	r3, #16
    6c52:	425b      	negs	r3, r3
    6c54:	4313      	orrs	r3, r2
    6c56:	aa02      	add	r2, sp, #8
    6c58:	1dd0      	adds	r0, r2, #7
    6c5a:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    6c5c:	2101      	movs	r1, #1
    6c5e:	4b40      	ldr	r3, [pc, #256]	; (6d60 <spi_data_write+0x140>)
    6c60:	447b      	add	r3, pc
    6c62:	4798      	blx	r3
    6c64:	1e07      	subs	r7, r0, #0
    6c66:	d125      	bne.n	6cb4 <spi_data_write+0x94>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    6c68:	4643      	mov	r3, r8
    6c6a:	1918      	adds	r0, r3, r4
    6c6c:	0029      	movs	r1, r5
    6c6e:	4b3d      	ldr	r3, [pc, #244]	; (6d64 <spi_data_write+0x144>)
    6c70:	447b      	add	r3, pc
    6c72:	4798      	blx	r3
    6c74:	4682      	mov	sl, r0
    6c76:	2800      	cmp	r0, #0
    6c78:	d13a      	bne.n	6cf0 <spi_data_write+0xd0>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    6c7a:	4b3b      	ldr	r3, [pc, #236]	; (6d68 <spi_data_write+0x148>)
    6c7c:	447b      	add	r3, pc
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	2b00      	cmp	r3, #0
    6c82:	d04b      	beq.n	6d1c <spi_data_write+0xfc>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    6c84:	192c      	adds	r4, r5, r4
    6c86:	b224      	sxth	r4, r4
		sz -= nbytes;
    6c88:	1b76      	subs	r6, r6, r5
    6c8a:	b2b6      	uxth	r6, r6
	} while (sz);
    6c8c:	2e00      	cmp	r6, #0
    6c8e:	d100      	bne.n	6c92 <spi_data_write+0x72>
    6c90:	e062      	b.n	6d58 <spi_data_write+0x138>
		if (sz <= DATA_PKT_SZ)
    6c92:	2380      	movs	r3, #128	; 0x80
    6c94:	019b      	lsls	r3, r3, #6
    6c96:	429e      	cmp	r6, r3
    6c98:	d8d2      	bhi.n	6c40 <spi_data_write+0x20>
			nbytes = sz;
    6c9a:	0035      	movs	r5, r6
		if (ix == 0)  {
    6c9c:	2c00      	cmp	r4, #0
    6c9e:	d1d2      	bne.n	6c46 <spi_data_write+0x26>
			if (sz <= DATA_PKT_SZ)
    6ca0:	2380      	movs	r3, #128	; 0x80
    6ca2:	019b      	lsls	r3, r3, #6
    6ca4:	429e      	cmp	r6, r3
    6ca6:	d801      	bhi.n	6cac <spi_data_write+0x8c>
				order = 0x3;
    6ca8:	2203      	movs	r2, #3
    6caa:	e7d1      	b.n	6c50 <spi_data_write+0x30>
				order = 0x1;
    6cac:	2201      	movs	r2, #1
    6cae:	e7cf      	b.n	6c50 <spi_data_write+0x30>
				order = 0x2;
    6cb0:	2202      	movs	r2, #2
    6cb2:	e7cd      	b.n	6c50 <spi_data_write+0x30>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    6cb4:	22d4      	movs	r2, #212	; 0xd4
    6cb6:	0092      	lsls	r2, r2, #2
    6cb8:	492c      	ldr	r1, [pc, #176]	; (6d6c <spi_data_write+0x14c>)
    6cba:	4479      	add	r1, pc
    6cbc:	482c      	ldr	r0, [pc, #176]	; (6d70 <spi_data_write+0x150>)
    6cbe:	4478      	add	r0, pc
    6cc0:	4b2c      	ldr	r3, [pc, #176]	; (6d74 <spi_data_write+0x154>)
    6cc2:	464c      	mov	r4, r9
    6cc4:	58e3      	ldr	r3, [r4, r3]
    6cc6:	9301      	str	r3, [sp, #4]
    6cc8:	4798      	blx	r3
    6cca:	482b      	ldr	r0, [pc, #172]	; (6d78 <spi_data_write+0x158>)
    6ccc:	4478      	add	r0, pc
    6cce:	4b2b      	ldr	r3, [pc, #172]	; (6d7c <spi_data_write+0x15c>)
    6cd0:	58e3      	ldr	r3, [r4, r3]
    6cd2:	9301      	str	r3, [sp, #4]
    6cd4:	4798      	blx	r3
    6cd6:	200d      	movs	r0, #13
    6cd8:	4b29      	ldr	r3, [pc, #164]	; (6d80 <spi_data_write+0x160>)
    6cda:	58e3      	ldr	r3, [r4, r3]
    6cdc:	9301      	str	r3, [sp, #4]
    6cde:	4798      	blx	r3
			result = N_FAIL;
    6ce0:	2700      	movs	r7, #0


	return result;
}
    6ce2:	0038      	movs	r0, r7
    6ce4:	b004      	add	sp, #16
    6ce6:	bc1c      	pop	{r2, r3, r4}
    6ce8:	4690      	mov	r8, r2
    6cea:	4699      	mov	r9, r3
    6cec:	46a2      	mov	sl, r4
    6cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    6cf0:	4a24      	ldr	r2, [pc, #144]	; (6d84 <spi_data_write+0x164>)
    6cf2:	4925      	ldr	r1, [pc, #148]	; (6d88 <spi_data_write+0x168>)
    6cf4:	4479      	add	r1, pc
    6cf6:	4825      	ldr	r0, [pc, #148]	; (6d8c <spi_data_write+0x16c>)
    6cf8:	4478      	add	r0, pc
    6cfa:	4b1e      	ldr	r3, [pc, #120]	; (6d74 <spi_data_write+0x154>)
    6cfc:	464c      	mov	r4, r9
    6cfe:	58e3      	ldr	r3, [r4, r3]
    6d00:	9301      	str	r3, [sp, #4]
    6d02:	4798      	blx	r3
    6d04:	4822      	ldr	r0, [pc, #136]	; (6d90 <spi_data_write+0x170>)
    6d06:	4478      	add	r0, pc
    6d08:	4b1c      	ldr	r3, [pc, #112]	; (6d7c <spi_data_write+0x15c>)
    6d0a:	58e3      	ldr	r3, [r4, r3]
    6d0c:	9301      	str	r3, [sp, #4]
    6d0e:	4798      	blx	r3
    6d10:	200d      	movs	r0, #13
    6d12:	4b1b      	ldr	r3, [pc, #108]	; (6d80 <spi_data_write+0x160>)
    6d14:	58e3      	ldr	r3, [r4, r3]
    6d16:	9301      	str	r3, [sp, #4]
    6d18:	4798      	blx	r3
			break;
    6d1a:	e7e2      	b.n	6ce2 <spi_data_write+0xc2>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    6d1c:	2102      	movs	r1, #2
    6d1e:	a803      	add	r0, sp, #12
    6d20:	4b1c      	ldr	r3, [pc, #112]	; (6d94 <spi_data_write+0x174>)
    6d22:	447b      	add	r3, pc
    6d24:	4798      	blx	r3
    6d26:	2800      	cmp	r0, #0
    6d28:	d0ac      	beq.n	6c84 <spi_data_write+0x64>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    6d2a:	4a1b      	ldr	r2, [pc, #108]	; (6d98 <spi_data_write+0x178>)
    6d2c:	491b      	ldr	r1, [pc, #108]	; (6d9c <spi_data_write+0x17c>)
    6d2e:	4479      	add	r1, pc
    6d30:	481b      	ldr	r0, [pc, #108]	; (6da0 <spi_data_write+0x180>)
    6d32:	4478      	add	r0, pc
    6d34:	4b0f      	ldr	r3, [pc, #60]	; (6d74 <spi_data_write+0x154>)
    6d36:	464c      	mov	r4, r9
    6d38:	58e3      	ldr	r3, [r4, r3]
    6d3a:	9301      	str	r3, [sp, #4]
    6d3c:	4798      	blx	r3
    6d3e:	4819      	ldr	r0, [pc, #100]	; (6da4 <spi_data_write+0x184>)
    6d40:	4478      	add	r0, pc
    6d42:	4b0e      	ldr	r3, [pc, #56]	; (6d7c <spi_data_write+0x15c>)
    6d44:	58e3      	ldr	r3, [r4, r3]
    6d46:	9301      	str	r3, [sp, #4]
    6d48:	4798      	blx	r3
    6d4a:	200d      	movs	r0, #13
    6d4c:	4b0c      	ldr	r3, [pc, #48]	; (6d80 <spi_data_write+0x160>)
    6d4e:	58e3      	ldr	r3, [r4, r3]
    6d50:	9301      	str	r3, [sp, #4]
    6d52:	4798      	blx	r3
				result = N_FAIL;
    6d54:	4657      	mov	r7, sl
				break;
    6d56:	e7c4      	b.n	6ce2 <spi_data_write+0xc2>
	sint8 result = 1;
    6d58:	2701      	movs	r7, #1
    6d5a:	e7c2      	b.n	6ce2 <spi_data_write+0xc2>
    6d5c:	0000bd5a 	.word	0x0000bd5a
    6d60:	fffffddd 	.word	0xfffffddd
    6d64:	fffffdcd 	.word	0xfffffdcd
    6d68:	1fff9ca0 	.word	0x1fff9ca0
    6d6c:	0000b3c2 	.word	0x0000b3c2
    6d70:	0000ac8e 	.word	0x0000ac8e
    6d74:	0000003c 	.word	0x0000003c
    6d78:	0000b890 	.word	0x0000b890
    6d7c:	00000108 	.word	0x00000108
    6d80:	00000000 	.word	0x00000000
    6d84:	00000359 	.word	0x00000359
    6d88:	0000b388 	.word	0x0000b388
    6d8c:	0000ac54 	.word	0x0000ac54
    6d90:	0000b88e 	.word	0x0000b88e
    6d94:	fffffd1b 	.word	0xfffffd1b
    6d98:	00000363 	.word	0x00000363
    6d9c:	0000b34e 	.word	0x0000b34e
    6da0:	0000ac1a 	.word	0x0000ac1a
    6da4:	0000b888 	.word	0x0000b888

00006da8 <nmi_spi_read>:
{
    6da8:	b500      	push	{lr}
    6daa:	b087      	sub	sp, #28
    6dac:	4a07      	ldr	r2, [pc, #28]	; (6dcc <nmi_spi_read+0x24>)
    6dae:	447a      	add	r2, pc
	spi.pu8InBuf = NULL;
    6db0:	2300      	movs	r3, #0
    6db2:	9303      	str	r3, [sp, #12]
	spi.pu8OutBuf = b;
    6db4:	ab03      	add	r3, sp, #12
    6db6:	9004      	str	r0, [sp, #16]
	spi.u16Sz = sz;
    6db8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    6dba:	0019      	movs	r1, r3
    6dbc:	2003      	movs	r0, #3
    6dbe:	4b04      	ldr	r3, [pc, #16]	; (6dd0 <nmi_spi_read+0x28>)
    6dc0:	58d3      	ldr	r3, [r2, r3]
    6dc2:	9301      	str	r3, [sp, #4]
    6dc4:	4798      	blx	r3
}
    6dc6:	b007      	add	sp, #28
    6dc8:	bd00      	pop	{pc}
    6dca:	46c0      	nop			; (mov r8, r8)
    6dcc:	0000bbde 	.word	0x0000bbde
    6dd0:	000000dc 	.word	0x000000dc

00006dd4 <spi_cmd_rsp>:
{
    6dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dd6:	b085      	sub	sp, #20
    6dd8:	0007      	movs	r7, r0
    6dda:	4e37      	ldr	r6, [pc, #220]	; (6eb8 <spi_cmd_rsp+0xe4>)
    6ddc:	447e      	add	r6, pc
	if ((cmd == CMD_RESET) ||
    6dde:	28cf      	cmp	r0, #207	; 0xcf
    6de0:	d005      	beq.n	6dee <spi_cmd_rsp+0x1a>
    6de2:	28c5      	cmp	r0, #197	; 0xc5
    6de4:	d003      	beq.n	6dee <spi_cmd_rsp+0x1a>
		 (cmd == CMD_TERMINATE) ||
    6de6:	28c6      	cmp	r0, #198	; 0xc6
    6de8:	d001      	beq.n	6dee <spi_cmd_rsp+0x1a>
{
    6dea:	250a      	movs	r5, #10
    6dec:	e00a      	b.n	6e04 <spi_cmd_rsp+0x30>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6dee:	2101      	movs	r1, #1
    6df0:	ab02      	add	r3, sp, #8
    6df2:	1dd8      	adds	r0, r3, #7
    6df4:	4b31      	ldr	r3, [pc, #196]	; (6ebc <spi_cmd_rsp+0xe8>)
    6df6:	447b      	add	r3, pc
    6df8:	4798      	blx	r3
    6dfa:	2800      	cmp	r0, #0
    6dfc:	d0f5      	beq.n	6dea <spi_cmd_rsp+0x16>
			result = N_FAIL;
    6dfe:	2400      	movs	r4, #0
    6e00:	e03f      	b.n	6e82 <spi_cmd_rsp+0xae>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    6e02:	001d      	movs	r5, r3
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6e04:	2101      	movs	r1, #1
    6e06:	ab02      	add	r3, sp, #8
    6e08:	1dd8      	adds	r0, r3, #7
    6e0a:	4b2d      	ldr	r3, [pc, #180]	; (6ec0 <spi_cmd_rsp+0xec>)
    6e0c:	447b      	add	r3, pc
    6e0e:	4798      	blx	r3
    6e10:	1e04      	subs	r4, r0, #0
    6e12:	d10a      	bne.n	6e2a <spi_cmd_rsp+0x56>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    6e14:	ab02      	add	r3, sp, #8
    6e16:	3307      	adds	r3, #7
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	429f      	cmp	r7, r3
    6e1c:	d01c      	beq.n	6e58 <spi_cmd_rsp+0x84>
    6e1e:	1e6b      	subs	r3, r5, #1
    6e20:	b25b      	sxtb	r3, r3
    6e22:	2d00      	cmp	r5, #0
    6e24:	dced      	bgt.n	6e02 <spi_cmd_rsp+0x2e>
    6e26:	250a      	movs	r5, #10
    6e28:	e019      	b.n	6e5e <spi_cmd_rsp+0x8a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6e2a:	22b1      	movs	r2, #177	; 0xb1
    6e2c:	0052      	lsls	r2, r2, #1
    6e2e:	4925      	ldr	r1, [pc, #148]	; (6ec4 <spi_cmd_rsp+0xf0>)
    6e30:	4479      	add	r1, pc
    6e32:	4825      	ldr	r0, [pc, #148]	; (6ec8 <spi_cmd_rsp+0xf4>)
    6e34:	4478      	add	r0, pc
    6e36:	4b25      	ldr	r3, [pc, #148]	; (6ecc <spi_cmd_rsp+0xf8>)
    6e38:	58f3      	ldr	r3, [r6, r3]
    6e3a:	9301      	str	r3, [sp, #4]
    6e3c:	4798      	blx	r3
    6e3e:	4824      	ldr	r0, [pc, #144]	; (6ed0 <spi_cmd_rsp+0xfc>)
    6e40:	4478      	add	r0, pc
    6e42:	4b24      	ldr	r3, [pc, #144]	; (6ed4 <spi_cmd_rsp+0x100>)
    6e44:	58f3      	ldr	r3, [r6, r3]
    6e46:	9301      	str	r3, [sp, #4]
    6e48:	4798      	blx	r3
    6e4a:	200d      	movs	r0, #13
    6e4c:	4b22      	ldr	r3, [pc, #136]	; (6ed8 <spi_cmd_rsp+0x104>)
    6e4e:	58f3      	ldr	r3, [r6, r3]
    6e50:	9301      	str	r3, [sp, #4]
    6e52:	4798      	blx	r3
			result = N_FAIL;
    6e54:	2400      	movs	r4, #0
			goto _fail_;
    6e56:	e014      	b.n	6e82 <spi_cmd_rsp+0xae>
    6e58:	250a      	movs	r5, #10
    6e5a:	e000      	b.n	6e5e <spi_cmd_rsp+0x8a>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    6e5c:	001d      	movs	r5, r3
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6e5e:	2101      	movs	r1, #1
    6e60:	ab02      	add	r3, sp, #8
    6e62:	1dd8      	adds	r0, r3, #7
    6e64:	4b1d      	ldr	r3, [pc, #116]	; (6edc <spi_cmd_rsp+0x108>)
    6e66:	447b      	add	r3, pc
    6e68:	4798      	blx	r3
    6e6a:	2800      	cmp	r0, #0
    6e6c:	d10c      	bne.n	6e88 <spi_cmd_rsp+0xb4>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    6e6e:	ab02      	add	r3, sp, #8
    6e70:	3307      	adds	r3, #7
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	2b00      	cmp	r3, #0
    6e76:	d01d      	beq.n	6eb4 <spi_cmd_rsp+0xe0>
    6e78:	1e6b      	subs	r3, r5, #1
    6e7a:	b25b      	sxtb	r3, r3
    6e7c:	2d00      	cmp	r5, #0
    6e7e:	dced      	bgt.n	6e5c <spi_cmd_rsp+0x88>
	sint8 result = N_OK;
    6e80:	2401      	movs	r4, #1
}
    6e82:	0020      	movs	r0, r4
    6e84:	b005      	add	sp, #20
    6e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6e88:	22b8      	movs	r2, #184	; 0xb8
    6e8a:	0052      	lsls	r2, r2, #1
    6e8c:	4914      	ldr	r1, [pc, #80]	; (6ee0 <spi_cmd_rsp+0x10c>)
    6e8e:	4479      	add	r1, pc
    6e90:	4814      	ldr	r0, [pc, #80]	; (6ee4 <spi_cmd_rsp+0x110>)
    6e92:	4478      	add	r0, pc
    6e94:	4b0d      	ldr	r3, [pc, #52]	; (6ecc <spi_cmd_rsp+0xf8>)
    6e96:	58f3      	ldr	r3, [r6, r3]
    6e98:	9301      	str	r3, [sp, #4]
    6e9a:	4798      	blx	r3
    6e9c:	4812      	ldr	r0, [pc, #72]	; (6ee8 <spi_cmd_rsp+0x114>)
    6e9e:	4478      	add	r0, pc
    6ea0:	4b0c      	ldr	r3, [pc, #48]	; (6ed4 <spi_cmd_rsp+0x100>)
    6ea2:	58f3      	ldr	r3, [r6, r3]
    6ea4:	9301      	str	r3, [sp, #4]
    6ea6:	4798      	blx	r3
    6ea8:	200d      	movs	r0, #13
    6eaa:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <spi_cmd_rsp+0x104>)
    6eac:	58f3      	ldr	r3, [r6, r3]
    6eae:	9301      	str	r3, [sp, #4]
    6eb0:	4798      	blx	r3
			goto _fail_;
    6eb2:	e7e6      	b.n	6e82 <spi_cmd_rsp+0xae>
	sint8 result = N_OK;
    6eb4:	2401      	movs	r4, #1
    6eb6:	e7e4      	b.n	6e82 <spi_cmd_rsp+0xae>
    6eb8:	0000bbb0 	.word	0x0000bbb0
    6ebc:	ffffffaf 	.word	0xffffffaf
    6ec0:	ffffff99 	.word	0xffffff99
    6ec4:	0000b230 	.word	0x0000b230
    6ec8:	0000ab18 	.word	0x0000ab18
    6ecc:	0000003c 	.word	0x0000003c
    6ed0:	0000b5d0 	.word	0x0000b5d0
    6ed4:	00000108 	.word	0x00000108
    6ed8:	00000000 	.word	0x00000000
    6edc:	ffffff3f 	.word	0xffffff3f
    6ee0:	0000b1d2 	.word	0x0000b1d2
    6ee4:	0000aaba 	.word	0x0000aaba
    6ee8:	0000b572 	.word	0x0000b572

00006eec <spi_data_read>:
{
    6eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eee:	46de      	mov	lr, fp
    6ef0:	4657      	mov	r7, sl
    6ef2:	464e      	mov	r6, r9
    6ef4:	4645      	mov	r5, r8
    6ef6:	b5e0      	push	{r5, r6, r7, lr}
    6ef8:	b085      	sub	sp, #20
    6efa:	4681      	mov	r9, r0
    6efc:	000f      	movs	r7, r1
    6efe:	4692      	mov	sl, r2
    6f00:	4b5a      	ldr	r3, [pc, #360]	; (706c <spi_data_read+0x180>)
    6f02:	447b      	add	r3, pc
    6f04:	469b      	mov	fp, r3
	sint8 result = N_OK;
    6f06:	2301      	movs	r3, #1
    6f08:	4698      	mov	r8, r3
	ix = 0;
    6f0a:	2600      	movs	r6, #0
    6f0c:	e034      	b.n	6f78 <spi_data_read+0x8c>
			nbytes = DATA_PKT_SZ;
    6f0e:	2380      	movs	r3, #128	; 0x80
    6f10:	019b      	lsls	r3, r3, #6
    6f12:	9300      	str	r3, [sp, #0]
    6f14:	e036      	b.n	6f84 <spi_data_read+0x98>
		} while (retry--);
    6f16:	001c      	movs	r4, r3
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6f18:	2101      	movs	r1, #1
    6f1a:	ab02      	add	r3, sp, #8
    6f1c:	1cd8      	adds	r0, r3, #3
    6f1e:	4b54      	ldr	r3, [pc, #336]	; (7070 <spi_data_read+0x184>)
    6f20:	447b      	add	r3, pc
    6f22:	4798      	blx	r3
    6f24:	2800      	cmp	r0, #0
    6f26:	d12f      	bne.n	6f88 <spi_data_read+0x9c>
			if (((rsp >> 4) & 0xf) == 0xf)
    6f28:	ab02      	add	r3, sp, #8
    6f2a:	3303      	adds	r3, #3
    6f2c:	781b      	ldrb	r3, [r3, #0]
    6f2e:	091b      	lsrs	r3, r3, #4
    6f30:	2b0f      	cmp	r3, #15
    6f32:	d042      	beq.n	6fba <spi_data_read+0xce>
		} while (retry--);
    6f34:	1e63      	subs	r3, r4, #1
    6f36:	b21b      	sxth	r3, r3
    6f38:	2c00      	cmp	r4, #0
    6f3a:	d1ec      	bne.n	6f16 <spi_data_read+0x2a>
		if (result == N_FAIL)
    6f3c:	4642      	mov	r2, r8
    6f3e:	2a00      	cmp	r2, #0
    6f40:	d053      	beq.n	6fea <spi_data_read+0xfe>
		if (retry <= 0) {
    6f42:	2b00      	cmp	r3, #0
    6f44:	dd3b      	ble.n	6fbe <spi_data_read+0xd2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    6f46:	466b      	mov	r3, sp
    6f48:	881d      	ldrh	r5, [r3, #0]
    6f4a:	464b      	mov	r3, r9
    6f4c:	1998      	adds	r0, r3, r6
    6f4e:	0029      	movs	r1, r5
    6f50:	4b48      	ldr	r3, [pc, #288]	; (7074 <spi_data_read+0x188>)
    6f52:	447b      	add	r3, pc
    6f54:	4798      	blx	r3
    6f56:	1e04      	subs	r4, r0, #0
    6f58:	d14f      	bne.n	6ffa <spi_data_read+0x10e>
		if(!clockless)
    6f5a:	4653      	mov	r3, sl
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d105      	bne.n	6f6c <spi_data_read+0x80>
			if (!gu8Crc_off) {
    6f60:	4b45      	ldr	r3, [pc, #276]	; (7078 <spi_data_read+0x18c>)
    6f62:	447b      	add	r3, pc
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	2b00      	cmp	r3, #0
    6f68:	d100      	bne.n	6f6c <spi_data_read+0x80>
    6f6a:	e05f      	b.n	702c <spi_data_read+0x140>
		ix += nbytes;
    6f6c:	19ae      	adds	r6, r5, r6
    6f6e:	b236      	sxth	r6, r6
		sz -= nbytes;
    6f70:	1b7f      	subs	r7, r7, r5
    6f72:	b2bf      	uxth	r7, r7
	} while (sz);
    6f74:	2f00      	cmp	r7, #0
    6f76:	d038      	beq.n	6fea <spi_data_read+0xfe>
		if (sz <= DATA_PKT_SZ)
    6f78:	2380      	movs	r3, #128	; 0x80
    6f7a:	019b      	lsls	r3, r3, #6
    6f7c:	429f      	cmp	r7, r3
    6f7e:	d8c6      	bhi.n	6f0e <spi_data_read+0x22>
			nbytes = sz;
    6f80:	b23b      	sxth	r3, r7
    6f82:	9300      	str	r3, [sp, #0]
		retry = SPI_RESP_RETRY_COUNT;
    6f84:	240a      	movs	r4, #10
    6f86:	e7c7      	b.n	6f18 <spi_data_read+0x2c>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    6f88:	4a3c      	ldr	r2, [pc, #240]	; (707c <spi_data_read+0x190>)
    6f8a:	493d      	ldr	r1, [pc, #244]	; (7080 <spi_data_read+0x194>)
    6f8c:	4479      	add	r1, pc
    6f8e:	483d      	ldr	r0, [pc, #244]	; (7084 <spi_data_read+0x198>)
    6f90:	4478      	add	r0, pc
    6f92:	4b3d      	ldr	r3, [pc, #244]	; (7088 <spi_data_read+0x19c>)
    6f94:	465d      	mov	r5, fp
    6f96:	58eb      	ldr	r3, [r5, r3]
    6f98:	9301      	str	r3, [sp, #4]
    6f9a:	4798      	blx	r3
    6f9c:	483b      	ldr	r0, [pc, #236]	; (708c <spi_data_read+0x1a0>)
    6f9e:	4478      	add	r0, pc
    6fa0:	4b3b      	ldr	r3, [pc, #236]	; (7090 <spi_data_read+0x1a4>)
    6fa2:	58eb      	ldr	r3, [r5, r3]
    6fa4:	9301      	str	r3, [sp, #4]
    6fa6:	4798      	blx	r3
    6fa8:	200d      	movs	r0, #13
    6faa:	4b3a      	ldr	r3, [pc, #232]	; (7094 <spi_data_read+0x1a8>)
    6fac:	58eb      	ldr	r3, [r5, r3]
    6fae:	9301      	str	r3, [sp, #4]
    6fb0:	4798      	blx	r3
				break;
    6fb2:	0023      	movs	r3, r4
				result = N_FAIL;
    6fb4:	2200      	movs	r2, #0
    6fb6:	4690      	mov	r8, r2
				break;
    6fb8:	e7c0      	b.n	6f3c <spi_data_read+0x50>
    6fba:	0023      	movs	r3, r4
    6fbc:	e7be      	b.n	6f3c <spi_data_read+0x50>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    6fbe:	4a36      	ldr	r2, [pc, #216]	; (7098 <spi_data_read+0x1ac>)
    6fc0:	4936      	ldr	r1, [pc, #216]	; (709c <spi_data_read+0x1b0>)
    6fc2:	4479      	add	r1, pc
    6fc4:	4836      	ldr	r0, [pc, #216]	; (70a0 <spi_data_read+0x1b4>)
    6fc6:	4478      	add	r0, pc
    6fc8:	4b2f      	ldr	r3, [pc, #188]	; (7088 <spi_data_read+0x19c>)
    6fca:	465c      	mov	r4, fp
    6fcc:	58e4      	ldr	r4, [r4, r3]
    6fce:	47a0      	blx	r4
    6fd0:	ab02      	add	r3, sp, #8
    6fd2:	78d9      	ldrb	r1, [r3, #3]
    6fd4:	4833      	ldr	r0, [pc, #204]	; (70a4 <spi_data_read+0x1b8>)
    6fd6:	4478      	add	r0, pc
    6fd8:	47a0      	blx	r4
    6fda:	200d      	movs	r0, #13
    6fdc:	4b2d      	ldr	r3, [pc, #180]	; (7094 <spi_data_read+0x1a8>)
    6fde:	465a      	mov	r2, fp
    6fe0:	58d3      	ldr	r3, [r2, r3]
    6fe2:	9300      	str	r3, [sp, #0]
    6fe4:	4798      	blx	r3
			result = N_FAIL;
    6fe6:	2300      	movs	r3, #0
    6fe8:	4698      	mov	r8, r3
}
    6fea:	4640      	mov	r0, r8
    6fec:	b005      	add	sp, #20
    6fee:	bc3c      	pop	{r2, r3, r4, r5}
    6ff0:	4690      	mov	r8, r2
    6ff2:	4699      	mov	r9, r3
    6ff4:	46a2      	mov	sl, r4
    6ff6:	46ab      	mov	fp, r5
    6ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    6ffa:	22c5      	movs	r2, #197	; 0xc5
    6ffc:	0092      	lsls	r2, r2, #2
    6ffe:	492a      	ldr	r1, [pc, #168]	; (70a8 <spi_data_read+0x1bc>)
    7000:	4479      	add	r1, pc
    7002:	482a      	ldr	r0, [pc, #168]	; (70ac <spi_data_read+0x1c0>)
    7004:	4478      	add	r0, pc
    7006:	4b20      	ldr	r3, [pc, #128]	; (7088 <spi_data_read+0x19c>)
    7008:	465c      	mov	r4, fp
    700a:	58e3      	ldr	r3, [r4, r3]
    700c:	9300      	str	r3, [sp, #0]
    700e:	4798      	blx	r3
    7010:	4827      	ldr	r0, [pc, #156]	; (70b0 <spi_data_read+0x1c4>)
    7012:	4478      	add	r0, pc
    7014:	4b1e      	ldr	r3, [pc, #120]	; (7090 <spi_data_read+0x1a4>)
    7016:	58e3      	ldr	r3, [r4, r3]
    7018:	9300      	str	r3, [sp, #0]
    701a:	4798      	blx	r3
    701c:	200d      	movs	r0, #13
    701e:	4b1d      	ldr	r3, [pc, #116]	; (7094 <spi_data_read+0x1a8>)
    7020:	58e3      	ldr	r3, [r4, r3]
    7022:	9300      	str	r3, [sp, #0]
    7024:	4798      	blx	r3
			result = N_FAIL;
    7026:	2300      	movs	r3, #0
    7028:	4698      	mov	r8, r3
			break;
    702a:	e7de      	b.n	6fea <spi_data_read+0xfe>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    702c:	2102      	movs	r1, #2
    702e:	a803      	add	r0, sp, #12
    7030:	4b20      	ldr	r3, [pc, #128]	; (70b4 <spi_data_read+0x1c8>)
    7032:	447b      	add	r3, pc
    7034:	4798      	blx	r3
    7036:	2800      	cmp	r0, #0
    7038:	d100      	bne.n	703c <spi_data_read+0x150>
    703a:	e797      	b.n	6f6c <spi_data_read+0x80>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    703c:	4a1e      	ldr	r2, [pc, #120]	; (70b8 <spi_data_read+0x1cc>)
    703e:	491f      	ldr	r1, [pc, #124]	; (70bc <spi_data_read+0x1d0>)
    7040:	4479      	add	r1, pc
    7042:	481f      	ldr	r0, [pc, #124]	; (70c0 <spi_data_read+0x1d4>)
    7044:	4478      	add	r0, pc
    7046:	4b10      	ldr	r3, [pc, #64]	; (7088 <spi_data_read+0x19c>)
    7048:	465d      	mov	r5, fp
    704a:	58eb      	ldr	r3, [r5, r3]
    704c:	9300      	str	r3, [sp, #0]
    704e:	4798      	blx	r3
    7050:	481c      	ldr	r0, [pc, #112]	; (70c4 <spi_data_read+0x1d8>)
    7052:	4478      	add	r0, pc
    7054:	4b0e      	ldr	r3, [pc, #56]	; (7090 <spi_data_read+0x1a4>)
    7056:	58eb      	ldr	r3, [r5, r3]
    7058:	9300      	str	r3, [sp, #0]
    705a:	4798      	blx	r3
    705c:	200d      	movs	r0, #13
    705e:	4b0d      	ldr	r3, [pc, #52]	; (7094 <spi_data_read+0x1a8>)
    7060:	58eb      	ldr	r3, [r5, r3]
    7062:	9300      	str	r3, [sp, #0]
    7064:	4798      	blx	r3
					result = N_FAIL;
    7066:	46a0      	mov	r8, r4
					break;
    7068:	e7bf      	b.n	6fea <spi_data_read+0xfe>
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	0000ba8a 	.word	0x0000ba8a
    7070:	fffffe85 	.word	0xfffffe85
    7074:	fffffe53 	.word	0xfffffe53
    7078:	1fff99ba 	.word	0x1fff99ba
    707c:	000002ff 	.word	0x000002ff
    7080:	0000b0e0 	.word	0x0000b0e0
    7084:	0000a9bc 	.word	0x0000a9bc
    7088:	0000003c 	.word	0x0000003c
    708c:	0000b4a6 	.word	0x0000b4a6
    7090:	00000108 	.word	0x00000108
    7094:	00000000 	.word	0x00000000
    7098:	0000030b 	.word	0x0000030b
    709c:	0000b0aa 	.word	0x0000b0aa
    70a0:	0000a986 	.word	0x0000a986
    70a4:	0000b4a2 	.word	0x0000b4a2
    70a8:	0000b06c 	.word	0x0000b06c
    70ac:	0000a948 	.word	0x0000a948
    70b0:	0000b496 	.word	0x0000b496
    70b4:	fffffd73 	.word	0xfffffd73
    70b8:	0000031f 	.word	0x0000031f
    70bc:	0000b02c 	.word	0x0000b02c
    70c0:	0000a908 	.word	0x0000a908
    70c4:	0000b486 	.word	0x0000b486

000070c8 <spi_data_rsp>:
{
    70c8:	b570      	push	{r4, r5, r6, lr}
    70ca:	b084      	sub	sp, #16
    70cc:	4e25      	ldr	r6, [pc, #148]	; (7164 <spi_data_rsp+0x9c>)
    70ce:	447e      	add	r6, pc
    if (!gu8Crc_off)
    70d0:	4b25      	ldr	r3, [pc, #148]	; (7168 <spi_data_rsp+0xa0>)
    70d2:	447b      	add	r3, pc
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	2b00      	cmp	r3, #0
    70d8:	d128      	bne.n	712c <spi_data_rsp+0x64>
		len = 2;
    70da:	2502      	movs	r5, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    70dc:	b2a9      	uxth	r1, r5
    70de:	a803      	add	r0, sp, #12
    70e0:	4b22      	ldr	r3, [pc, #136]	; (716c <spi_data_rsp+0xa4>)
    70e2:	447b      	add	r3, pc
    70e4:	4798      	blx	r3
    70e6:	1e04      	subs	r4, r0, #0
    70e8:	d122      	bne.n	7130 <spi_data_rsp+0x68>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    70ea:	1e6b      	subs	r3, r5, #1
    70ec:	aa03      	add	r2, sp, #12
    70ee:	5cd3      	ldrb	r3, [r2, r3]
    70f0:	2b00      	cmp	r3, #0
    70f2:	d103      	bne.n	70fc <spi_data_rsp+0x34>
    70f4:	3d02      	subs	r5, #2
    70f6:	5d53      	ldrb	r3, [r2, r5]
    70f8:	2bc3      	cmp	r3, #195	; 0xc3
    70fa:	d030      	beq.n	715e <spi_data_rsp+0x96>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    70fc:	22a1      	movs	r2, #161	; 0xa1
    70fe:	0052      	lsls	r2, r2, #1
    7100:	491b      	ldr	r1, [pc, #108]	; (7170 <spi_data_rsp+0xa8>)
    7102:	4479      	add	r1, pc
    7104:	481b      	ldr	r0, [pc, #108]	; (7174 <spi_data_rsp+0xac>)
    7106:	4478      	add	r0, pc
    7108:	4b1b      	ldr	r3, [pc, #108]	; (7178 <spi_data_rsp+0xb0>)
    710a:	58f5      	ldr	r5, [r6, r3]
    710c:	47a8      	blx	r5
    710e:	ab03      	add	r3, sp, #12
    7110:	7819      	ldrb	r1, [r3, #0]
    7112:	785a      	ldrb	r2, [r3, #1]
    7114:	789b      	ldrb	r3, [r3, #2]
    7116:	4819      	ldr	r0, [pc, #100]	; (717c <spi_data_rsp+0xb4>)
    7118:	4478      	add	r0, pc
    711a:	47a8      	blx	r5
    711c:	200d      	movs	r0, #13
    711e:	4b18      	ldr	r3, [pc, #96]	; (7180 <spi_data_rsp+0xb8>)
    7120:	58f3      	ldr	r3, [r6, r3]
    7122:	9301      	str	r3, [sp, #4]
    7124:	4798      	blx	r3
}
    7126:	0020      	movs	r0, r4
    7128:	b004      	add	sp, #16
    712a:	bd70      	pop	{r4, r5, r6, pc}
		len = 3;
    712c:	2503      	movs	r5, #3
    712e:	e7d5      	b.n	70dc <spi_data_rsp+0x14>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    7130:	223c      	movs	r2, #60	; 0x3c
    7132:	32ff      	adds	r2, #255	; 0xff
    7134:	4913      	ldr	r1, [pc, #76]	; (7184 <spi_data_rsp+0xbc>)
    7136:	4479      	add	r1, pc
    7138:	4813      	ldr	r0, [pc, #76]	; (7188 <spi_data_rsp+0xc0>)
    713a:	4478      	add	r0, pc
    713c:	4b0e      	ldr	r3, [pc, #56]	; (7178 <spi_data_rsp+0xb0>)
    713e:	58f3      	ldr	r3, [r6, r3]
    7140:	9301      	str	r3, [sp, #4]
    7142:	4798      	blx	r3
    7144:	4811      	ldr	r0, [pc, #68]	; (718c <spi_data_rsp+0xc4>)
    7146:	4478      	add	r0, pc
    7148:	4b11      	ldr	r3, [pc, #68]	; (7190 <spi_data_rsp+0xc8>)
    714a:	58f3      	ldr	r3, [r6, r3]
    714c:	9301      	str	r3, [sp, #4]
    714e:	4798      	blx	r3
    7150:	200d      	movs	r0, #13
    7152:	4b0b      	ldr	r3, [pc, #44]	; (7180 <spi_data_rsp+0xb8>)
    7154:	58f3      	ldr	r3, [r6, r3]
    7156:	9301      	str	r3, [sp, #4]
    7158:	4798      	blx	r3
		result = N_FAIL;
    715a:	2400      	movs	r4, #0
		goto _fail_;
    715c:	e7e3      	b.n	7126 <spi_data_rsp+0x5e>
	sint8 result = N_OK;
    715e:	2401      	movs	r4, #1
    7160:	e7e1      	b.n	7126 <spi_data_rsp+0x5e>
    7162:	46c0      	nop			; (mov r8, r8)
    7164:	0000b8be 	.word	0x0000b8be
    7168:	1fff984a 	.word	0x1fff984a
    716c:	fffffcc3 	.word	0xfffffcc3
    7170:	0000af4e 	.word	0x0000af4e
    7174:	0000a846 	.word	0x0000a846
    7178:	0000003c 	.word	0x0000003c
    717c:	0000b414 	.word	0x0000b414
    7180:	00000000 	.word	0x00000000
    7184:	0000af1a 	.word	0x0000af1a
    7188:	0000a812 	.word	0x0000a812
    718c:	0000b3c6 	.word	0x0000b3c6
    7190:	00000108 	.word	0x00000108

00007194 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    7194:	b5f0      	push	{r4, r5, r6, r7, lr}
    7196:	b087      	sub	sp, #28
    7198:	9002      	str	r0, [sp, #8]
    719a:	9104      	str	r1, [sp, #16]
    719c:	4c39      	ldr	r4, [pc, #228]	; (7284 <spi_write_reg+0xf0>)
    719e:	447c      	add	r4, pc
	uint8 retry = SPI_RETRY_COUNT;
    71a0:	250a      	movs	r5, #10
    71a2:	e04b      	b.n	723c <spi_write_reg+0xa8>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    71a4:	2300      	movs	r3, #0
		cmd = CMD_SINGLE_WRITE;
    71a6:	22c9      	movs	r2, #201	; 0xc9
    71a8:	9203      	str	r2, [sp, #12]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    71aa:	9300      	str	r3, [sp, #0]
    71ac:	2304      	movs	r3, #4
    71ae:	9a04      	ldr	r2, [sp, #16]
    71b0:	9902      	ldr	r1, [sp, #8]
    71b2:	9803      	ldr	r0, [sp, #12]
    71b4:	4e34      	ldr	r6, [pc, #208]	; (7288 <spi_write_reg+0xf4>)
    71b6:	447e      	add	r6, pc
    71b8:	47b0      	blx	r6
    71ba:	0007      	movs	r7, r0
	if (result != N_OK) {
    71bc:	2801      	cmp	r0, #1
    71be:	d044      	beq.n	724a <spi_write_reg+0xb6>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    71c0:	4a32      	ldr	r2, [pc, #200]	; (728c <spi_write_reg+0xf8>)
    71c2:	4933      	ldr	r1, [pc, #204]	; (7290 <spi_write_reg+0xfc>)
    71c4:	4479      	add	r1, pc
    71c6:	4833      	ldr	r0, [pc, #204]	; (7294 <spi_write_reg+0x100>)
    71c8:	4478      	add	r0, pc
    71ca:	4b33      	ldr	r3, [pc, #204]	; (7298 <spi_write_reg+0x104>)
    71cc:	58e6      	ldr	r6, [r4, r3]
    71ce:	47b0      	blx	r6
    71d0:	9902      	ldr	r1, [sp, #8]
    71d2:	4832      	ldr	r0, [pc, #200]	; (729c <spi_write_reg+0x108>)
    71d4:	4478      	add	r0, pc
    71d6:	47b0      	blx	r6
    71d8:	200d      	movs	r0, #13
    71da:	4b31      	ldr	r3, [pc, #196]	; (72a0 <spi_write_reg+0x10c>)
    71dc:	58e3      	ldr	r3, [r4, r3]
    71de:	9303      	str	r3, [sp, #12]
    71e0:	4798      	blx	r3
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    71e2:	2f01      	cmp	r7, #1
    71e4:	d04b      	beq.n	727e <spi_write_reg+0xea>
	{
		nm_bsp_sleep(1);
    71e6:	2001      	movs	r0, #1
    71e8:	4b2e      	ldr	r3, [pc, #184]	; (72a4 <spi_write_reg+0x110>)
    71ea:	58e3      	ldr	r3, [r4, r3]
    71ec:	9303      	str	r3, [sp, #12]
    71ee:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    71f0:	2300      	movs	r3, #0
    71f2:	9300      	str	r3, [sp, #0]
    71f4:	2200      	movs	r2, #0
    71f6:	2100      	movs	r1, #0
    71f8:	20cf      	movs	r0, #207	; 0xcf
    71fa:	4e2b      	ldr	r6, [pc, #172]	; (72a8 <spi_write_reg+0x114>)
    71fc:	447e      	add	r6, pc
    71fe:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    7200:	20cf      	movs	r0, #207	; 0xcf
    7202:	4b2a      	ldr	r3, [pc, #168]	; (72ac <spi_write_reg+0x118>)
    7204:	447b      	add	r3, pc
    7206:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    7208:	4a29      	ldr	r2, [pc, #164]	; (72b0 <spi_write_reg+0x11c>)
    720a:	492a      	ldr	r1, [pc, #168]	; (72b4 <spi_write_reg+0x120>)
    720c:	4479      	add	r1, pc
    720e:	482a      	ldr	r0, [pc, #168]	; (72b8 <spi_write_reg+0x124>)
    7210:	4478      	add	r0, pc
    7212:	4b21      	ldr	r3, [pc, #132]	; (7298 <spi_write_reg+0x104>)
    7214:	58e6      	ldr	r6, [r4, r3]
    7216:	47b0      	blx	r6
    7218:	9b04      	ldr	r3, [sp, #16]
    721a:	9a02      	ldr	r2, [sp, #8]
    721c:	0029      	movs	r1, r5
    721e:	4827      	ldr	r0, [pc, #156]	; (72bc <spi_write_reg+0x128>)
    7220:	4478      	add	r0, pc
    7222:	47b0      	blx	r6
    7224:	200d      	movs	r0, #13
    7226:	4b1e      	ldr	r3, [pc, #120]	; (72a0 <spi_write_reg+0x10c>)
    7228:	58e1      	ldr	r1, [r4, r3]
    722a:	9105      	str	r1, [sp, #20]
    722c:	4788      	blx	r1
		nm_bsp_sleep(1);
    722e:	2001      	movs	r0, #1
    7230:	9a03      	ldr	r2, [sp, #12]
    7232:	4790      	blx	r2
		retry--;
    7234:	3d01      	subs	r5, #1
    7236:	b2ed      	uxtb	r5, r5
		if(retry) goto _RETRY_;
    7238:	2d00      	cmp	r5, #0
    723a:	d020      	beq.n	727e <spi_write_reg+0xea>
	if (addr <= 0x30)
    723c:	9b02      	ldr	r3, [sp, #8]
    723e:	2b30      	cmp	r3, #48	; 0x30
    7240:	d8b0      	bhi.n	71a4 <spi_write_reg+0x10>
		clockless = 1;
    7242:	2301      	movs	r3, #1
		cmd = CMD_INTERNAL_WRITE;
    7244:	22c3      	movs	r2, #195	; 0xc3
    7246:	9203      	str	r2, [sp, #12]
    7248:	e7af      	b.n	71aa <spi_write_reg+0x16>
	result = spi_cmd_rsp(cmd);
    724a:	9803      	ldr	r0, [sp, #12]
    724c:	4b1c      	ldr	r3, [pc, #112]	; (72c0 <spi_write_reg+0x12c>)
    724e:	447b      	add	r3, pc
    7250:	4798      	blx	r3
    7252:	0007      	movs	r7, r0
	if (result != N_OK) {
    7254:	2801      	cmp	r0, #1
    7256:	d0c4      	beq.n	71e2 <spi_write_reg+0x4e>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7258:	22e7      	movs	r2, #231	; 0xe7
    725a:	0092      	lsls	r2, r2, #2
    725c:	4919      	ldr	r1, [pc, #100]	; (72c4 <spi_write_reg+0x130>)
    725e:	4479      	add	r1, pc
    7260:	4819      	ldr	r0, [pc, #100]	; (72c8 <spi_write_reg+0x134>)
    7262:	4478      	add	r0, pc
    7264:	4b0c      	ldr	r3, [pc, #48]	; (7298 <spi_write_reg+0x104>)
    7266:	58e6      	ldr	r6, [r4, r3]
    7268:	47b0      	blx	r6
    726a:	9902      	ldr	r1, [sp, #8]
    726c:	4817      	ldr	r0, [pc, #92]	; (72cc <spi_write_reg+0x138>)
    726e:	4478      	add	r0, pc
    7270:	47b0      	blx	r6
    7272:	200d      	movs	r0, #13
    7274:	4b0a      	ldr	r3, [pc, #40]	; (72a0 <spi_write_reg+0x10c>)
    7276:	58e3      	ldr	r3, [r4, r3]
    7278:	9303      	str	r3, [sp, #12]
    727a:	4798      	blx	r3
		goto _FAIL_;
    727c:	e7b1      	b.n	71e2 <spi_write_reg+0x4e>
	}

	return result;
}
    727e:	0038      	movs	r0, r7
    7280:	b007      	add	sp, #28
    7282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7284:	0000b7ee 	.word	0x0000b7ee
    7288:	fffff8b3 	.word	0xfffff8b3
    728c:	00000396 	.word	0x00000396
    7290:	0000aec8 	.word	0x0000aec8
    7294:	0000a784 	.word	0x0000a784
    7298:	0000003c 	.word	0x0000003c
    729c:	0000b4c4 	.word	0x0000b4c4
    72a0:	00000000 	.word	0x00000000
    72a4:	00000160 	.word	0x00000160
    72a8:	fffff86d 	.word	0xfffff86d
    72ac:	fffffbcd 	.word	0xfffffbcd
    72b0:	000003af 	.word	0x000003af
    72b4:	0000ae80 	.word	0x0000ae80
    72b8:	0000a73c 	.word	0x0000a73c
    72bc:	0000b4dc 	.word	0x0000b4dc
    72c0:	fffffb83 	.word	0xfffffb83
    72c4:	0000ae2e 	.word	0x0000ae2e
    72c8:	0000a6ea 	.word	0x0000a6ea
    72cc:	0000b456 	.word	0x0000b456

000072d0 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    72d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72d2:	46d6      	mov	lr, sl
    72d4:	b500      	push	{lr}
    72d6:	b088      	sub	sp, #32
    72d8:	9003      	str	r0, [sp, #12]
    72da:	468a      	mov	sl, r1
    72dc:	4d50      	ldr	r5, [pc, #320]	; (7420 <spi_read_reg+0x150>)
    72de:	447d      	add	r5, pc
	uint8 retry = SPI_RETRY_COUNT;
    72e0:	260a      	movs	r6, #10
    72e2:	e04b      	b.n	737c <spi_read_reg+0xac>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    72e4:	2700      	movs	r7, #0
		cmd = CMD_SINGLE_READ;
    72e6:	23ca      	movs	r3, #202	; 0xca
    72e8:	9304      	str	r3, [sp, #16]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    72ea:	9700      	str	r7, [sp, #0]
    72ec:	2304      	movs	r3, #4
    72ee:	2200      	movs	r2, #0
    72f0:	9903      	ldr	r1, [sp, #12]
    72f2:	9804      	ldr	r0, [sp, #16]
    72f4:	4c4b      	ldr	r4, [pc, #300]	; (7424 <spi_read_reg+0x154>)
    72f6:	447c      	add	r4, pc
    72f8:	47a0      	blx	r4
    72fa:	0004      	movs	r4, r0
	if (result != N_OK) {
    72fc:	2801      	cmp	r0, #1
    72fe:	d044      	beq.n	738a <spi_read_reg+0xba>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    7300:	4a49      	ldr	r2, [pc, #292]	; (7428 <spi_read_reg+0x158>)
    7302:	494a      	ldr	r1, [pc, #296]	; (742c <spi_read_reg+0x15c>)
    7304:	4479      	add	r1, pc
    7306:	484a      	ldr	r0, [pc, #296]	; (7430 <spi_read_reg+0x160>)
    7308:	4478      	add	r0, pc
    730a:	4b4a      	ldr	r3, [pc, #296]	; (7434 <spi_read_reg+0x164>)
    730c:	58ef      	ldr	r7, [r5, r3]
    730e:	47b8      	blx	r7
    7310:	9903      	ldr	r1, [sp, #12]
    7312:	4849      	ldr	r0, [pc, #292]	; (7438 <spi_read_reg+0x168>)
    7314:	4478      	add	r0, pc
    7316:	47b8      	blx	r7
    7318:	200d      	movs	r0, #13
    731a:	4b48      	ldr	r3, [pc, #288]	; (743c <spi_read_reg+0x16c>)
    731c:	58eb      	ldr	r3, [r5, r3]
    731e:	9304      	str	r3, [sp, #16]
    7320:	4798      	blx	r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    7322:	2c01      	cmp	r4, #1
    7324:	d100      	bne.n	7328 <spi_read_reg+0x58>
    7326:	e075      	b.n	7414 <spi_read_reg+0x144>
	{
		
		nm_bsp_sleep(1);
    7328:	2001      	movs	r0, #1
    732a:	4b45      	ldr	r3, [pc, #276]	; (7440 <spi_read_reg+0x170>)
    732c:	58eb      	ldr	r3, [r5, r3]
    732e:	9304      	str	r3, [sp, #16]
    7330:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7332:	2300      	movs	r3, #0
    7334:	9300      	str	r3, [sp, #0]
    7336:	2200      	movs	r2, #0
    7338:	2100      	movs	r1, #0
    733a:	20cf      	movs	r0, #207	; 0xcf
    733c:	4f41      	ldr	r7, [pc, #260]	; (7444 <spi_read_reg+0x174>)
    733e:	447f      	add	r7, pc
    7340:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    7342:	20cf      	movs	r0, #207	; 0xcf
    7344:	4b40      	ldr	r3, [pc, #256]	; (7448 <spi_read_reg+0x178>)
    7346:	447b      	add	r3, pc
    7348:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    734a:	4a40      	ldr	r2, [pc, #256]	; (744c <spi_read_reg+0x17c>)
    734c:	4940      	ldr	r1, [pc, #256]	; (7450 <spi_read_reg+0x180>)
    734e:	4479      	add	r1, pc
    7350:	4840      	ldr	r0, [pc, #256]	; (7454 <spi_read_reg+0x184>)
    7352:	4478      	add	r0, pc
    7354:	4b37      	ldr	r3, [pc, #220]	; (7434 <spi_read_reg+0x164>)
    7356:	58ef      	ldr	r7, [r5, r3]
    7358:	47b8      	blx	r7
    735a:	9a03      	ldr	r2, [sp, #12]
    735c:	0031      	movs	r1, r6
    735e:	483e      	ldr	r0, [pc, #248]	; (7458 <spi_read_reg+0x188>)
    7360:	4478      	add	r0, pc
    7362:	47b8      	blx	r7
    7364:	200d      	movs	r0, #13
    7366:	4b35      	ldr	r3, [pc, #212]	; (743c <spi_read_reg+0x16c>)
    7368:	58e9      	ldr	r1, [r5, r3]
    736a:	9105      	str	r1, [sp, #20]
    736c:	4788      	blx	r1
		nm_bsp_sleep(1);
    736e:	2001      	movs	r0, #1
    7370:	9a04      	ldr	r2, [sp, #16]
    7372:	4790      	blx	r2
		retry--;
    7374:	3e01      	subs	r6, #1
    7376:	b2f6      	uxtb	r6, r6
		if(retry) goto _RETRY_;
    7378:	2e00      	cmp	r6, #0
    737a:	d04b      	beq.n	7414 <spi_read_reg+0x144>
	if (addr <= 0xff)
    737c:	9b03      	ldr	r3, [sp, #12]
    737e:	2bff      	cmp	r3, #255	; 0xff
    7380:	d8b0      	bhi.n	72e4 <spi_read_reg+0x14>
		clockless = 1;
    7382:	2701      	movs	r7, #1
		cmd = CMD_INTERNAL_READ;
    7384:	23c4      	movs	r3, #196	; 0xc4
    7386:	9304      	str	r3, [sp, #16]
    7388:	e7af      	b.n	72ea <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    738a:	9804      	ldr	r0, [sp, #16]
    738c:	4b33      	ldr	r3, [pc, #204]	; (745c <spi_read_reg+0x18c>)
    738e:	447b      	add	r3, pc
    7390:	4798      	blx	r3
    7392:	0004      	movs	r4, r0
	if (result != N_OK) {
    7394:	2801      	cmp	r0, #1
    7396:	d011      	beq.n	73bc <spi_read_reg+0xec>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    7398:	4a31      	ldr	r2, [pc, #196]	; (7460 <spi_read_reg+0x190>)
    739a:	4932      	ldr	r1, [pc, #200]	; (7464 <spi_read_reg+0x194>)
    739c:	4479      	add	r1, pc
    739e:	4832      	ldr	r0, [pc, #200]	; (7468 <spi_read_reg+0x198>)
    73a0:	4478      	add	r0, pc
    73a2:	4b24      	ldr	r3, [pc, #144]	; (7434 <spi_read_reg+0x164>)
    73a4:	58ef      	ldr	r7, [r5, r3]
    73a6:	47b8      	blx	r7
    73a8:	9903      	ldr	r1, [sp, #12]
    73aa:	4830      	ldr	r0, [pc, #192]	; (746c <spi_read_reg+0x19c>)
    73ac:	4478      	add	r0, pc
    73ae:	47b8      	blx	r7
    73b0:	200d      	movs	r0, #13
    73b2:	4b22      	ldr	r3, [pc, #136]	; (743c <spi_read_reg+0x16c>)
    73b4:	58eb      	ldr	r3, [r5, r3]
    73b6:	9304      	str	r3, [sp, #16]
    73b8:	4798      	blx	r3
		goto _FAIL_;
    73ba:	e7b2      	b.n	7322 <spi_read_reg+0x52>
	result = spi_data_read(&tmp[0], 4, clockless);
    73bc:	003a      	movs	r2, r7
    73be:	2104      	movs	r1, #4
    73c0:	a807      	add	r0, sp, #28
    73c2:	4b2b      	ldr	r3, [pc, #172]	; (7470 <spi_read_reg+0x1a0>)
    73c4:	447b      	add	r3, pc
    73c6:	4798      	blx	r3
    73c8:	0004      	movs	r4, r0
	if (result != N_OK) {
    73ca:	2801      	cmp	r0, #1
    73cc:	d014      	beq.n	73f8 <spi_read_reg+0x128>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    73ce:	4a29      	ldr	r2, [pc, #164]	; (7474 <spi_read_reg+0x1a4>)
    73d0:	4929      	ldr	r1, [pc, #164]	; (7478 <spi_read_reg+0x1a8>)
    73d2:	4479      	add	r1, pc
    73d4:	4829      	ldr	r0, [pc, #164]	; (747c <spi_read_reg+0x1ac>)
    73d6:	4478      	add	r0, pc
    73d8:	4b16      	ldr	r3, [pc, #88]	; (7434 <spi_read_reg+0x164>)
    73da:	58eb      	ldr	r3, [r5, r3]
    73dc:	9304      	str	r3, [sp, #16]
    73de:	4798      	blx	r3
    73e0:	4827      	ldr	r0, [pc, #156]	; (7480 <spi_read_reg+0x1b0>)
    73e2:	4478      	add	r0, pc
    73e4:	4b27      	ldr	r3, [pc, #156]	; (7484 <spi_read_reg+0x1b4>)
    73e6:	58eb      	ldr	r3, [r5, r3]
    73e8:	9304      	str	r3, [sp, #16]
    73ea:	4798      	blx	r3
    73ec:	200d      	movs	r0, #13
    73ee:	4b13      	ldr	r3, [pc, #76]	; (743c <spi_read_reg+0x16c>)
    73f0:	58eb      	ldr	r3, [r5, r3]
    73f2:	9304      	str	r3, [sp, #16]
    73f4:	4798      	blx	r3
		goto _FAIL_;
    73f6:	e794      	b.n	7322 <spi_read_reg+0x52>
	*u32data = tmp[0] |
    73f8:	aa07      	add	r2, sp, #28
    73fa:	7813      	ldrb	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
    73fc:	7851      	ldrb	r1, [r2, #1]
    73fe:	0209      	lsls	r1, r1, #8
	*u32data = tmp[0] |
    7400:	430b      	orrs	r3, r1
		((uint32)tmp[2] << 16) |
    7402:	7891      	ldrb	r1, [r2, #2]
    7404:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    7406:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    7408:	78d2      	ldrb	r2, [r2, #3]
    740a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    740c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    740e:	4652      	mov	r2, sl
    7410:	6013      	str	r3, [r2, #0]
    7412:	e786      	b.n	7322 <spi_read_reg+0x52>
	}
		
	return result;
}
    7414:	0020      	movs	r0, r4
    7416:	b008      	add	sp, #32
    7418:	bc04      	pop	{r2}
    741a:	4692      	mov	sl, r2
    741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    741e:	46c0      	nop			; (mov r8, r8)
    7420:	0000b6ae 	.word	0x0000b6ae
    7424:	fffff773 	.word	0xfffff773
    7428:	00000417 	.word	0x00000417
    742c:	0000ada8 	.word	0x0000ada8
    7430:	0000a644 	.word	0x0000a644
    7434:	0000003c 	.word	0x0000003c
    7438:	0000b2ec 	.word	0x0000b2ec
    743c:	00000000 	.word	0x00000000
    7440:	00000160 	.word	0x00000160
    7444:	fffff72b 	.word	0xfffff72b
    7448:	fffffa8b 	.word	0xfffffa8b
    744c:	0000043c 	.word	0x0000043c
    7450:	0000ad5e 	.word	0x0000ad5e
    7454:	0000a5fa 	.word	0x0000a5fa
    7458:	0000b320 	.word	0x0000b320
    745c:	fffffa43 	.word	0xfffffa43
    7460:	0000041d 	.word	0x0000041d
    7464:	0000ad10 	.word	0x0000ad10
    7468:	0000a5ac 	.word	0x0000a5ac
    746c:	0000b280 	.word	0x0000b280
    7470:	fffffb25 	.word	0xfffffb25
    7474:	00000424 	.word	0x00000424
    7478:	0000acda 	.word	0x0000acda
    747c:	0000a576 	.word	0x0000a576
    7480:	0000b27e 	.word	0x0000b27e
    7484:	00000108 	.word	0x00000108

00007488 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    7488:	b5f0      	push	{r4, r5, r6, r7, lr}
    748a:	46de      	mov	lr, fp
    748c:	b500      	push	{lr}
    748e:	b08a      	sub	sp, #40	; 0x28
    7490:	9004      	str	r0, [sp, #16]
    7492:	9107      	str	r1, [sp, #28]
    7494:	9203      	str	r2, [sp, #12]
    7496:	4c55      	ldr	r4, [pc, #340]	; (75ec <nm_spi_read+0x164>)
    7498:	447c      	add	r4, pc
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    749a:	2300      	movs	r3, #0
    749c:	469b      	mov	fp, r3
	uint8 retry = SPI_RETRY_COUNT;
    749e:	250a      	movs	r5, #10
    74a0:	0026      	movs	r6, r4
    74a2:	002c      	movs	r4, r5
    74a4:	e04d      	b.n	7542 <nm_spi_read+0xba>
#if defined USE_OLD_SPI_SW
	if (size == 1)
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
    74a6:	469b      	mov	fp, r3
		size = 2;
    74a8:	3301      	adds	r3, #1
    74aa:	9303      	str	r3, [sp, #12]
    74ac:	e04c      	b.n	7548 <nm_spi_read+0xc0>
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    74ae:	20c8      	movs	r0, #200	; 0xc8
    74b0:	4b4f      	ldr	r3, [pc, #316]	; (75f0 <nm_spi_read+0x168>)
    74b2:	447b      	add	r3, pc
    74b4:	4798      	blx	r3
    74b6:	0007      	movs	r7, r0
	if (result != N_OK) {
    74b8:	2801      	cmp	r0, #1
    74ba:	d065      	beq.n	7588 <nm_spi_read+0x100>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    74bc:	4a4d      	ldr	r2, [pc, #308]	; (75f4 <nm_spi_read+0x16c>)
    74be:	494e      	ldr	r1, [pc, #312]	; (75f8 <nm_spi_read+0x170>)
    74c0:	4479      	add	r1, pc
    74c2:	484e      	ldr	r0, [pc, #312]	; (75fc <nm_spi_read+0x174>)
    74c4:	4478      	add	r0, pc
    74c6:	4b4e      	ldr	r3, [pc, #312]	; (7600 <nm_spi_read+0x178>)
    74c8:	58f3      	ldr	r3, [r6, r3]
    74ca:	9305      	str	r3, [sp, #20]
    74cc:	4798      	blx	r3
    74ce:	9904      	ldr	r1, [sp, #16]
    74d0:	484c      	ldr	r0, [pc, #304]	; (7604 <nm_spi_read+0x17c>)
    74d2:	4478      	add	r0, pc
    74d4:	9d05      	ldr	r5, [sp, #20]
    74d6:	47a8      	blx	r5
    74d8:	200d      	movs	r0, #13
    74da:	4b4b      	ldr	r3, [pc, #300]	; (7608 <nm_spi_read+0x180>)
    74dc:	58f3      	ldr	r3, [r6, r3]
    74de:	9305      	str	r3, [sp, #20]
    74e0:	4798      	blx	r3
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    74e2:	2f01      	cmp	r7, #1
    74e4:	d100      	bne.n	74e8 <nm_spi_read+0x60>
    74e6:	e07c      	b.n	75e2 <nm_spi_read+0x15a>
	{
		nm_bsp_sleep(1);
    74e8:	2001      	movs	r0, #1
    74ea:	4b48      	ldr	r3, [pc, #288]	; (760c <nm_spi_read+0x184>)
    74ec:	58f3      	ldr	r3, [r6, r3]
    74ee:	9305      	str	r3, [sp, #20]
    74f0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    74f2:	2300      	movs	r3, #0
    74f4:	9300      	str	r3, [sp, #0]
    74f6:	2200      	movs	r2, #0
    74f8:	2100      	movs	r1, #0
    74fa:	20cf      	movs	r0, #207	; 0xcf
    74fc:	4d44      	ldr	r5, [pc, #272]	; (7610 <nm_spi_read+0x188>)
    74fe:	447d      	add	r5, pc
    7500:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    7502:	20cf      	movs	r0, #207	; 0xcf
    7504:	4b43      	ldr	r3, [pc, #268]	; (7614 <nm_spi_read+0x18c>)
    7506:	447b      	add	r3, pc
    7508:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    750a:	4a43      	ldr	r2, [pc, #268]	; (7618 <nm_spi_read+0x190>)
    750c:	4943      	ldr	r1, [pc, #268]	; (761c <nm_spi_read+0x194>)
    750e:	4479      	add	r1, pc
    7510:	4843      	ldr	r0, [pc, #268]	; (7620 <nm_spi_read+0x198>)
    7512:	4478      	add	r0, pc
    7514:	4b3a      	ldr	r3, [pc, #232]	; (7600 <nm_spi_read+0x178>)
    7516:	58f5      	ldr	r5, [r6, r3]
    7518:	9506      	str	r5, [sp, #24]
    751a:	47a8      	blx	r5
    751c:	9b03      	ldr	r3, [sp, #12]
    751e:	9a04      	ldr	r2, [sp, #16]
    7520:	0021      	movs	r1, r4
    7522:	4840      	ldr	r0, [pc, #256]	; (7624 <nm_spi_read+0x19c>)
    7524:	4478      	add	r0, pc
    7526:	9d06      	ldr	r5, [sp, #24]
    7528:	47a8      	blx	r5
    752a:	200d      	movs	r0, #13
    752c:	4b36      	ldr	r3, [pc, #216]	; (7608 <nm_spi_read+0x180>)
    752e:	58f1      	ldr	r1, [r6, r3]
    7530:	9106      	str	r1, [sp, #24]
    7532:	4788      	blx	r1
		nm_bsp_sleep(1);
    7534:	2001      	movs	r0, #1
    7536:	9a05      	ldr	r2, [sp, #20]
    7538:	4790      	blx	r2
		retry--;
    753a:	3c01      	subs	r4, #1
    753c:	b2e4      	uxtb	r4, r4
		if(retry) goto _RETRY_;
    753e:	2c00      	cmp	r4, #0
    7540:	d04f      	beq.n	75e2 <nm_spi_read+0x15a>
	if (size == 1)
    7542:	9b03      	ldr	r3, [sp, #12]
    7544:	2b01      	cmp	r3, #1
    7546:	d0ae      	beq.n	74a6 <nm_spi_read+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    7548:	2300      	movs	r3, #0
    754a:	9300      	str	r3, [sp, #0]
    754c:	9b03      	ldr	r3, [sp, #12]
    754e:	2200      	movs	r2, #0
    7550:	9904      	ldr	r1, [sp, #16]
    7552:	20c8      	movs	r0, #200	; 0xc8
    7554:	4d34      	ldr	r5, [pc, #208]	; (7628 <nm_spi_read+0x1a0>)
    7556:	447d      	add	r5, pc
    7558:	47a8      	blx	r5
    755a:	0007      	movs	r7, r0
	if (result != N_OK) {
    755c:	2801      	cmp	r0, #1
    755e:	d0a6      	beq.n	74ae <nm_spi_read+0x26>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    7560:	4a32      	ldr	r2, [pc, #200]	; (762c <nm_spi_read+0x1a4>)
    7562:	4933      	ldr	r1, [pc, #204]	; (7630 <nm_spi_read+0x1a8>)
    7564:	4479      	add	r1, pc
    7566:	4833      	ldr	r0, [pc, #204]	; (7634 <nm_spi_read+0x1ac>)
    7568:	4478      	add	r0, pc
    756a:	4b25      	ldr	r3, [pc, #148]	; (7600 <nm_spi_read+0x178>)
    756c:	58f3      	ldr	r3, [r6, r3]
    756e:	9305      	str	r3, [sp, #20]
    7570:	4798      	blx	r3
    7572:	9904      	ldr	r1, [sp, #16]
    7574:	4830      	ldr	r0, [pc, #192]	; (7638 <nm_spi_read+0x1b0>)
    7576:	4478      	add	r0, pc
    7578:	9d05      	ldr	r5, [sp, #20]
    757a:	47a8      	blx	r5
    757c:	200d      	movs	r0, #13
    757e:	4b22      	ldr	r3, [pc, #136]	; (7608 <nm_spi_read+0x180>)
    7580:	58f3      	ldr	r3, [r6, r3]
    7582:	9305      	str	r3, [sp, #20]
    7584:	4798      	blx	r3
		goto _FAIL_;
    7586:	e7ac      	b.n	74e2 <nm_spi_read+0x5a>
	if (single_byte_workaround)
    7588:	465b      	mov	r3, fp
    758a:	2b00      	cmp	r3, #0
    758c:	d021      	beq.n	75d2 <nm_spi_read+0x14a>
		result = spi_data_read(tmp, size,0);
    758e:	2200      	movs	r2, #0
    7590:	9903      	ldr	r1, [sp, #12]
    7592:	ad09      	add	r5, sp, #36	; 0x24
    7594:	0028      	movs	r0, r5
    7596:	4b29      	ldr	r3, [pc, #164]	; (763c <nm_spi_read+0x1b4>)
    7598:	447b      	add	r3, pc
    759a:	4798      	blx	r3
    759c:	0007      	movs	r7, r0
		buf[0] = tmp[0];
    759e:	782b      	ldrb	r3, [r5, #0]
    75a0:	9a07      	ldr	r2, [sp, #28]
    75a2:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    75a4:	2f01      	cmp	r7, #1
    75a6:	d09c      	beq.n	74e2 <nm_spi_read+0x5a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    75a8:	4a25      	ldr	r2, [pc, #148]	; (7640 <nm_spi_read+0x1b8>)
    75aa:	4926      	ldr	r1, [pc, #152]	; (7644 <nm_spi_read+0x1bc>)
    75ac:	4479      	add	r1, pc
    75ae:	4826      	ldr	r0, [pc, #152]	; (7648 <nm_spi_read+0x1c0>)
    75b0:	4478      	add	r0, pc
    75b2:	4b13      	ldr	r3, [pc, #76]	; (7600 <nm_spi_read+0x178>)
    75b4:	58f3      	ldr	r3, [r6, r3]
    75b6:	9305      	str	r3, [sp, #20]
    75b8:	4798      	blx	r3
    75ba:	4824      	ldr	r0, [pc, #144]	; (764c <nm_spi_read+0x1c4>)
    75bc:	4478      	add	r0, pc
    75be:	4b24      	ldr	r3, [pc, #144]	; (7650 <nm_spi_read+0x1c8>)
    75c0:	58f3      	ldr	r3, [r6, r3]
    75c2:	9305      	str	r3, [sp, #20]
    75c4:	4798      	blx	r3
    75c6:	200d      	movs	r0, #13
    75c8:	4b0f      	ldr	r3, [pc, #60]	; (7608 <nm_spi_read+0x180>)
    75ca:	58f3      	ldr	r3, [r6, r3]
    75cc:	9305      	str	r3, [sp, #20]
    75ce:	4798      	blx	r3
		goto _FAIL_;
    75d0:	e787      	b.n	74e2 <nm_spi_read+0x5a>
		result = spi_data_read(buf, size,0);
    75d2:	2200      	movs	r2, #0
    75d4:	9903      	ldr	r1, [sp, #12]
    75d6:	9807      	ldr	r0, [sp, #28]
    75d8:	4b1e      	ldr	r3, [pc, #120]	; (7654 <nm_spi_read+0x1cc>)
    75da:	447b      	add	r3, pc
    75dc:	4798      	blx	r3
    75de:	0007      	movs	r7, r0
    75e0:	e7e0      	b.n	75a4 <nm_spi_read+0x11c>
	}

	return result;
}
    75e2:	0038      	movs	r0, r7
    75e4:	b00a      	add	sp, #40	; 0x28
    75e6:	bc04      	pop	{r2}
    75e8:	4693      	mov	fp, r2
    75ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75ec:	0000b4f4 	.word	0x0000b4f4
    75f0:	fffff91f 	.word	0xfffff91f
    75f4:	00000463 	.word	0x00000463
    75f8:	0000abfc 	.word	0x0000abfc
    75fc:	0000a488 	.word	0x0000a488
    7600:	0000003c 	.word	0x0000003c
    7604:	0000ae06 	.word	0x0000ae06
    7608:	00000000 	.word	0x00000000
    760c:	00000160 	.word	0x00000160
    7610:	fffff56b 	.word	0xfffff56b
    7614:	fffff8cb 	.word	0xfffff8cb
    7618:	00000484 	.word	0x00000484
    761c:	0000abae 	.word	0x0000abae
    7620:	0000a43a 	.word	0x0000a43a
    7624:	0000ae14 	.word	0x0000ae14
    7628:	fffff513 	.word	0xfffff513
    762c:	0000045d 	.word	0x0000045d
    7630:	0000ab58 	.word	0x0000ab58
    7634:	0000a3e4 	.word	0x0000a3e4
    7638:	0000ad32 	.word	0x0000ad32
    763c:	fffff951 	.word	0xfffff951
    7640:	00000473 	.word	0x00000473
    7644:	0000ab10 	.word	0x0000ab10
    7648:	0000a39c 	.word	0x0000a39c
    764c:	0000ad54 	.word	0x0000ad54
    7650:	00000108 	.word	0x00000108
    7654:	fffff90f 	.word	0xfffff90f

00007658 <nm_spi_write>:
{
    7658:	b5f0      	push	{r4, r5, r6, r7, lr}
    765a:	b089      	sub	sp, #36	; 0x24
    765c:	9004      	str	r0, [sp, #16]
    765e:	9107      	str	r1, [sp, #28]
    7660:	9203      	str	r2, [sp, #12]
    7662:	4c57      	ldr	r4, [pc, #348]	; (77c0 <nm_spi_write+0x168>)
    7664:	447c      	add	r4, pc
	uint8 retry = SPI_RETRY_COUNT;
    7666:	250a      	movs	r5, #10
    7668:	e049      	b.n	76fe <nm_spi_write+0xa6>
		size = 2;
    766a:	3301      	adds	r3, #1
    766c:	9303      	str	r3, [sp, #12]
    766e:	e049      	b.n	7704 <nm_spi_write+0xac>
	result = spi_cmd_rsp(cmd);
    7670:	20c7      	movs	r0, #199	; 0xc7
    7672:	4b54      	ldr	r3, [pc, #336]	; (77c4 <nm_spi_write+0x16c>)
    7674:	447b      	add	r3, pc
    7676:	4798      	blx	r3
    7678:	0007      	movs	r7, r0
	if (result != N_OK) {
    767a:	2801      	cmp	r0, #1
    767c:	d060      	beq.n	7740 <nm_spi_write+0xe8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    767e:	22f4      	movs	r2, #244	; 0xf4
    7680:	0092      	lsls	r2, r2, #2
    7682:	4951      	ldr	r1, [pc, #324]	; (77c8 <nm_spi_write+0x170>)
    7684:	4479      	add	r1, pc
    7686:	4851      	ldr	r0, [pc, #324]	; (77cc <nm_spi_write+0x174>)
    7688:	4478      	add	r0, pc
    768a:	4b51      	ldr	r3, [pc, #324]	; (77d0 <nm_spi_write+0x178>)
    768c:	58e6      	ldr	r6, [r4, r3]
    768e:	47b0      	blx	r6
    7690:	9904      	ldr	r1, [sp, #16]
    7692:	4850      	ldr	r0, [pc, #320]	; (77d4 <nm_spi_write+0x17c>)
    7694:	4478      	add	r0, pc
    7696:	47b0      	blx	r6
    7698:	200d      	movs	r0, #13
    769a:	4b4f      	ldr	r3, [pc, #316]	; (77d8 <nm_spi_write+0x180>)
    769c:	58e3      	ldr	r3, [r4, r3]
    769e:	9305      	str	r3, [sp, #20]
    76a0:	4798      	blx	r3
	if(result != N_OK)
    76a2:	2f01      	cmp	r7, #1
    76a4:	d100      	bne.n	76a8 <nm_spi_write+0x50>
    76a6:	e087      	b.n	77b8 <nm_spi_write+0x160>
		nm_bsp_sleep(1);
    76a8:	2001      	movs	r0, #1
    76aa:	4b4c      	ldr	r3, [pc, #304]	; (77dc <nm_spi_write+0x184>)
    76ac:	58e3      	ldr	r3, [r4, r3]
    76ae:	9305      	str	r3, [sp, #20]
    76b0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    76b2:	2300      	movs	r3, #0
    76b4:	9300      	str	r3, [sp, #0]
    76b6:	2200      	movs	r2, #0
    76b8:	2100      	movs	r1, #0
    76ba:	20cf      	movs	r0, #207	; 0xcf
    76bc:	4e48      	ldr	r6, [pc, #288]	; (77e0 <nm_spi_write+0x188>)
    76be:	447e      	add	r6, pc
    76c0:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    76c2:	20cf      	movs	r0, #207	; 0xcf
    76c4:	4b47      	ldr	r3, [pc, #284]	; (77e4 <nm_spi_write+0x18c>)
    76c6:	447b      	add	r3, pc
    76c8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    76ca:	4a47      	ldr	r2, [pc, #284]	; (77e8 <nm_spi_write+0x190>)
    76cc:	4947      	ldr	r1, [pc, #284]	; (77ec <nm_spi_write+0x194>)
    76ce:	4479      	add	r1, pc
    76d0:	4847      	ldr	r0, [pc, #284]	; (77f0 <nm_spi_write+0x198>)
    76d2:	4478      	add	r0, pc
    76d4:	4b3e      	ldr	r3, [pc, #248]	; (77d0 <nm_spi_write+0x178>)
    76d6:	58e6      	ldr	r6, [r4, r3]
    76d8:	47b0      	blx	r6
    76da:	9b03      	ldr	r3, [sp, #12]
    76dc:	9a04      	ldr	r2, [sp, #16]
    76de:	0029      	movs	r1, r5
    76e0:	4844      	ldr	r0, [pc, #272]	; (77f4 <nm_spi_write+0x19c>)
    76e2:	4478      	add	r0, pc
    76e4:	47b0      	blx	r6
    76e6:	200d      	movs	r0, #13
    76e8:	4b3b      	ldr	r3, [pc, #236]	; (77d8 <nm_spi_write+0x180>)
    76ea:	58e1      	ldr	r1, [r4, r3]
    76ec:	9106      	str	r1, [sp, #24]
    76ee:	4788      	blx	r1
		nm_bsp_sleep(1);
    76f0:	2001      	movs	r0, #1
    76f2:	9a05      	ldr	r2, [sp, #20]
    76f4:	4790      	blx	r2
		retry--;
    76f6:	3d01      	subs	r5, #1
    76f8:	b2ed      	uxtb	r5, r5
		if(retry) goto _RETRY_;
    76fa:	2d00      	cmp	r5, #0
    76fc:	d05c      	beq.n	77b8 <nm_spi_write+0x160>
	if (size == 1)
    76fe:	9b03      	ldr	r3, [sp, #12]
    7700:	2b01      	cmp	r3, #1
    7702:	d0b2      	beq.n	766a <nm_spi_write+0x12>
	result = spi_cmd(cmd, addr, 0, size,0);
    7704:	2300      	movs	r3, #0
    7706:	9300      	str	r3, [sp, #0]
    7708:	9b03      	ldr	r3, [sp, #12]
    770a:	2200      	movs	r2, #0
    770c:	9904      	ldr	r1, [sp, #16]
    770e:	20c7      	movs	r0, #199	; 0xc7
    7710:	4e39      	ldr	r6, [pc, #228]	; (77f8 <nm_spi_write+0x1a0>)
    7712:	447e      	add	r6, pc
    7714:	47b0      	blx	r6
    7716:	0007      	movs	r7, r0
	if (result != N_OK) {
    7718:	2801      	cmp	r0, #1
    771a:	d0a9      	beq.n	7670 <nm_spi_write+0x18>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    771c:	4a37      	ldr	r2, [pc, #220]	; (77fc <nm_spi_write+0x1a4>)
    771e:	4938      	ldr	r1, [pc, #224]	; (7800 <nm_spi_write+0x1a8>)
    7720:	4479      	add	r1, pc
    7722:	4838      	ldr	r0, [pc, #224]	; (7804 <nm_spi_write+0x1ac>)
    7724:	4478      	add	r0, pc
    7726:	4b2a      	ldr	r3, [pc, #168]	; (77d0 <nm_spi_write+0x178>)
    7728:	58e6      	ldr	r6, [r4, r3]
    772a:	47b0      	blx	r6
    772c:	9904      	ldr	r1, [sp, #16]
    772e:	4836      	ldr	r0, [pc, #216]	; (7808 <nm_spi_write+0x1b0>)
    7730:	4478      	add	r0, pc
    7732:	47b0      	blx	r6
    7734:	200d      	movs	r0, #13
    7736:	4b28      	ldr	r3, [pc, #160]	; (77d8 <nm_spi_write+0x180>)
    7738:	58e3      	ldr	r3, [r4, r3]
    773a:	9305      	str	r3, [sp, #20]
    773c:	4798      	blx	r3
		goto _FAIL_;
    773e:	e7b0      	b.n	76a2 <nm_spi_write+0x4a>
	result = spi_data_write(buf, size);
    7740:	9903      	ldr	r1, [sp, #12]
    7742:	9807      	ldr	r0, [sp, #28]
    7744:	4b31      	ldr	r3, [pc, #196]	; (780c <nm_spi_write+0x1b4>)
    7746:	447b      	add	r3, pc
    7748:	4798      	blx	r3
    774a:	0007      	movs	r7, r0
	if (result != N_OK) {
    774c:	2801      	cmp	r0, #1
    774e:	d015      	beq.n	777c <nm_spi_write+0x124>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    7750:	22f8      	movs	r2, #248	; 0xf8
    7752:	0092      	lsls	r2, r2, #2
    7754:	492e      	ldr	r1, [pc, #184]	; (7810 <nm_spi_write+0x1b8>)
    7756:	4479      	add	r1, pc
    7758:	482e      	ldr	r0, [pc, #184]	; (7814 <nm_spi_write+0x1bc>)
    775a:	4478      	add	r0, pc
    775c:	4b1c      	ldr	r3, [pc, #112]	; (77d0 <nm_spi_write+0x178>)
    775e:	58e3      	ldr	r3, [r4, r3]
    7760:	9305      	str	r3, [sp, #20]
    7762:	4798      	blx	r3
    7764:	482c      	ldr	r0, [pc, #176]	; (7818 <nm_spi_write+0x1c0>)
    7766:	4478      	add	r0, pc
    7768:	4b2c      	ldr	r3, [pc, #176]	; (781c <nm_spi_write+0x1c4>)
    776a:	58e3      	ldr	r3, [r4, r3]
    776c:	9305      	str	r3, [sp, #20]
    776e:	4798      	blx	r3
    7770:	200d      	movs	r0, #13
    7772:	4b19      	ldr	r3, [pc, #100]	; (77d8 <nm_spi_write+0x180>)
    7774:	58e3      	ldr	r3, [r4, r3]
    7776:	9305      	str	r3, [sp, #20]
    7778:	4798      	blx	r3
		goto _FAIL_;
    777a:	e792      	b.n	76a2 <nm_spi_write+0x4a>
	result = spi_data_rsp(cmd);
    777c:	20c7      	movs	r0, #199	; 0xc7
    777e:	4b28      	ldr	r3, [pc, #160]	; (7820 <nm_spi_write+0x1c8>)
    7780:	447b      	add	r3, pc
    7782:	4798      	blx	r3
    7784:	0007      	movs	r7, r0
	if (result != N_OK) {
    7786:	2801      	cmp	r0, #1
    7788:	d100      	bne.n	778c <nm_spi_write+0x134>
    778a:	e78a      	b.n	76a2 <nm_spi_write+0x4a>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    778c:	22fa      	movs	r2, #250	; 0xfa
    778e:	0092      	lsls	r2, r2, #2
    7790:	4924      	ldr	r1, [pc, #144]	; (7824 <nm_spi_write+0x1cc>)
    7792:	4479      	add	r1, pc
    7794:	4824      	ldr	r0, [pc, #144]	; (7828 <nm_spi_write+0x1d0>)
    7796:	4478      	add	r0, pc
    7798:	4b0d      	ldr	r3, [pc, #52]	; (77d0 <nm_spi_write+0x178>)
    779a:	58e3      	ldr	r3, [r4, r3]
    779c:	9305      	str	r3, [sp, #20]
    779e:	4798      	blx	r3
    77a0:	4822      	ldr	r0, [pc, #136]	; (782c <nm_spi_write+0x1d4>)
    77a2:	4478      	add	r0, pc
    77a4:	4b1d      	ldr	r3, [pc, #116]	; (781c <nm_spi_write+0x1c4>)
    77a6:	58e3      	ldr	r3, [r4, r3]
    77a8:	9305      	str	r3, [sp, #20]
    77aa:	4798      	blx	r3
    77ac:	200d      	movs	r0, #13
    77ae:	4b0a      	ldr	r3, [pc, #40]	; (77d8 <nm_spi_write+0x180>)
    77b0:	58e3      	ldr	r3, [r4, r3]
    77b2:	9305      	str	r3, [sp, #20]
    77b4:	4798      	blx	r3
		goto _FAIL_;
    77b6:	e774      	b.n	76a2 <nm_spi_write+0x4a>
}
    77b8:	0038      	movs	r0, r7
    77ba:	b009      	add	sp, #36	; 0x24
    77bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	0000b328 	.word	0x0000b328
    77c4:	fffff75d 	.word	0xfffff75d
    77c8:	0000aa18 	.word	0x0000aa18
    77cc:	0000a2c4 	.word	0x0000a2c4
    77d0:	0000003c 	.word	0x0000003c
    77d4:	0000acf0 	.word	0x0000acf0
    77d8:	00000000 	.word	0x00000000
    77dc:	00000160 	.word	0x00000160
    77e0:	fffff3ab 	.word	0xfffff3ab
    77e4:	fffff70b 	.word	0xfffff70b
    77e8:	000003f2 	.word	0x000003f2
    77ec:	0000a9ce 	.word	0x0000a9ce
    77f0:	0000a27a 	.word	0x0000a27a
    77f4:	0000ac56 	.word	0x0000ac56
    77f8:	fffff357 	.word	0xfffff357
    77fc:	000003ca 	.word	0x000003ca
    7800:	0000a97c 	.word	0x0000a97c
    7804:	0000a228 	.word	0x0000a228
    7808:	0000ac24 	.word	0x0000ac24
    780c:	fffff4d7 	.word	0xfffff4d7
    7810:	0000a946 	.word	0x0000a946
    7814:	0000a1f2 	.word	0x0000a1f2
    7818:	0000ac56 	.word	0x0000ac56
    781c:	00000108 	.word	0x00000108
    7820:	fffff945 	.word	0xfffff945
    7824:	0000a90a 	.word	0x0000a90a
    7828:	0000a1b6 	.word	0x0000a1b6
    782c:	0000ac1a 	.word	0x0000ac1a

00007830 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    7830:	b510      	push	{r4, lr}
    7832:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7834:	2300      	movs	r3, #0
    7836:	9300      	str	r3, [sp, #0]
    7838:	2200      	movs	r2, #0
    783a:	2100      	movs	r1, #0
    783c:	20cf      	movs	r0, #207	; 0xcf
    783e:	4c05      	ldr	r4, [pc, #20]	; (7854 <nm_spi_reset+0x24>)
    7840:	447c      	add	r4, pc
    7842:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    7844:	20cf      	movs	r0, #207	; 0xcf
    7846:	4b04      	ldr	r3, [pc, #16]	; (7858 <nm_spi_reset+0x28>)
    7848:	447b      	add	r3, pc
    784a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    784c:	2000      	movs	r0, #0
    784e:	b002      	add	sp, #8
    7850:	bd10      	pop	{r4, pc}
    7852:	46c0      	nop			; (mov r8, r8)
    7854:	fffff229 	.word	0xfffff229
    7858:	fffff589 	.word	0xfffff589

0000785c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    785c:	2200      	movs	r2, #0
    785e:	4b02      	ldr	r3, [pc, #8]	; (7868 <nm_spi_deinit+0xc>)
    7860:	447b      	add	r3, pc
    7862:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    7864:	2000      	movs	r0, #0
    7866:	4770      	bx	lr
    7868:	1fff90bc 	.word	0x1fff90bc

0000786c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    786c:	b500      	push	{lr}
    786e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    7870:	a901      	add	r1, sp, #4
    7872:	4b03      	ldr	r3, [pc, #12]	; (7880 <nm_spi_read_reg+0x14>)
    7874:	447b      	add	r3, pc
    7876:	4798      	blx	r3

	return u32Val;
}
    7878:	9801      	ldr	r0, [sp, #4]
    787a:	b003      	add	sp, #12
    787c:	bd00      	pop	{pc}
    787e:	46c0      	nop			; (mov r8, r8)
    7880:	fffffa59 	.word	0xfffffa59

00007884 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7884:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    7886:	4b05      	ldr	r3, [pc, #20]	; (789c <nm_spi_read_reg_with_ret+0x18>)
    7888:	447b      	add	r3, pc
    788a:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    788c:	2801      	cmp	r0, #1
    788e:	d101      	bne.n	7894 <nm_spi_read_reg_with_ret+0x10>
    7890:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    7892:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    7894:	2006      	movs	r0, #6
    7896:	4240      	negs	r0, r0
    7898:	e7fb      	b.n	7892 <nm_spi_read_reg_with_ret+0xe>
    789a:	46c0      	nop			; (mov r8, r8)
    789c:	fffffa45 	.word	0xfffffa45

000078a0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    78a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    78a2:	4b05      	ldr	r3, [pc, #20]	; (78b8 <nm_spi_write_reg+0x18>)
    78a4:	447b      	add	r3, pc
    78a6:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    78a8:	2801      	cmp	r0, #1
    78aa:	d101      	bne.n	78b0 <nm_spi_write_reg+0x10>
    78ac:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    78ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    78b0:	2006      	movs	r0, #6
    78b2:	4240      	negs	r0, r0
    78b4:	e7fb      	b.n	78ae <nm_spi_write_reg+0xe>
    78b6:	46c0      	nop			; (mov r8, r8)
    78b8:	fffff8ed 	.word	0xfffff8ed

000078bc <spi_init_pkt_sz>:
{
    78bc:	b530      	push	{r4, r5, lr}
    78be:	b083      	sub	sp, #12
    78c0:	4d09      	ldr	r5, [pc, #36]	; (78e8 <spi_init_pkt_sz+0x2c>)
    78c2:	447d      	add	r5, pc
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    78c4:	4c09      	ldr	r4, [pc, #36]	; (78ec <spi_init_pkt_sz+0x30>)
    78c6:	0020      	movs	r0, r4
    78c8:	4b09      	ldr	r3, [pc, #36]	; (78f0 <spi_init_pkt_sz+0x34>)
    78ca:	58eb      	ldr	r3, [r5, r3]
    78cc:	9301      	str	r3, [sp, #4]
    78ce:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    78d0:	2370      	movs	r3, #112	; 0x70
    78d2:	0001      	movs	r1, r0
    78d4:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    78d6:	2050      	movs	r0, #80	; 0x50
    78d8:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    78da:	0020      	movs	r0, r4
    78dc:	4b05      	ldr	r3, [pc, #20]	; (78f4 <spi_init_pkt_sz+0x38>)
    78de:	58eb      	ldr	r3, [r5, r3]
    78e0:	9301      	str	r3, [sp, #4]
    78e2:	4798      	blx	r3
}
    78e4:	b003      	add	sp, #12
    78e6:	bd30      	pop	{r4, r5, pc}
    78e8:	0000b0ca 	.word	0x0000b0ca
    78ec:	0000e824 	.word	0x0000e824
    78f0:	000003d0 	.word	0x000003d0
    78f4:	000001a8 	.word	0x000001a8

000078f8 <nm_spi_init>:
{
    78f8:	b530      	push	{r4, r5, lr}
    78fa:	b085      	sub	sp, #20
    78fc:	4d49      	ldr	r5, [pc, #292]	; (7a24 <nm_spi_init+0x12c>)
    78fe:	447d      	add	r5, pc
	uint32 reg = 0;
    7900:	2300      	movs	r3, #0
    7902:	9302      	str	r3, [sp, #8]
	gu8Crc_off = 0;
    7904:	4a48      	ldr	r2, [pc, #288]	; (7a28 <nm_spi_init+0x130>)
    7906:	447a      	add	r2, pc
    7908:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    790a:	a902      	add	r1, sp, #8
    790c:	4847      	ldr	r0, [pc, #284]	; (7a2c <nm_spi_init+0x134>)
    790e:	4b48      	ldr	r3, [pc, #288]	; (7a30 <nm_spi_init+0x138>)
    7910:	447b      	add	r3, pc
    7912:	4798      	blx	r3
    7914:	2800      	cmp	r0, #0
    7916:	d025      	beq.n	7964 <nm_spi_init+0x6c>
	if(gu8Crc_off == 0)
    7918:	4b46      	ldr	r3, [pc, #280]	; (7a34 <nm_spi_init+0x13c>)
    791a:	447b      	add	r3, pc
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	2b00      	cmp	r3, #0
    7920:	d111      	bne.n	7946 <nm_spi_init+0x4e>
		reg &= ~0xc;	/* disable crc checking */
    7922:	330c      	adds	r3, #12
    7924:	9902      	ldr	r1, [sp, #8]
    7926:	4399      	bics	r1, r3
		reg &= ~0x70;
    7928:	3364      	adds	r3, #100	; 0x64
    792a:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    792c:	3b20      	subs	r3, #32
    792e:	4319      	orrs	r1, r3
    7930:	9102      	str	r1, [sp, #8]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    7932:	483e      	ldr	r0, [pc, #248]	; (7a2c <nm_spi_init+0x134>)
    7934:	4b40      	ldr	r3, [pc, #256]	; (7a38 <nm_spi_init+0x140>)
    7936:	447b      	add	r3, pc
    7938:	4798      	blx	r3
    793a:	1e04      	subs	r4, r0, #0
    793c:	d046      	beq.n	79cc <nm_spi_init+0xd4>
		gu8Crc_off = 1;
    793e:	2201      	movs	r2, #1
    7940:	4b3e      	ldr	r3, [pc, #248]	; (7a3c <nm_spi_init+0x144>)
    7942:	447b      	add	r3, pc
    7944:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    7946:	a903      	add	r1, sp, #12
    7948:	2080      	movs	r0, #128	; 0x80
    794a:	0140      	lsls	r0, r0, #5
    794c:	4b3c      	ldr	r3, [pc, #240]	; (7a40 <nm_spi_init+0x148>)
    794e:	447b      	add	r3, pc
    7950:	4798      	blx	r3
    7952:	2800      	cmp	r0, #0
    7954:	d04f      	beq.n	79f6 <nm_spi_init+0xfe>
	spi_init_pkt_sz();
    7956:	4b3b      	ldr	r3, [pc, #236]	; (7a44 <nm_spi_init+0x14c>)
    7958:	447b      	add	r3, pc
    795a:	4798      	blx	r3
	return M2M_SUCCESS;
    795c:	2400      	movs	r4, #0
}
    795e:	0020      	movs	r0, r4
    7960:	b005      	add	sp, #20
    7962:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
    7964:	2201      	movs	r2, #1
    7966:	4b38      	ldr	r3, [pc, #224]	; (7a48 <nm_spi_init+0x150>)
    7968:	447b      	add	r3, pc
    796a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    796c:	4a37      	ldr	r2, [pc, #220]	; (7a4c <nm_spi_init+0x154>)
    796e:	4938      	ldr	r1, [pc, #224]	; (7a50 <nm_spi_init+0x158>)
    7970:	4479      	add	r1, pc
    7972:	4838      	ldr	r0, [pc, #224]	; (7a54 <nm_spi_init+0x15c>)
    7974:	4478      	add	r0, pc
    7976:	4b38      	ldr	r3, [pc, #224]	; (7a58 <nm_spi_init+0x160>)
    7978:	58eb      	ldr	r3, [r5, r3]
    797a:	9301      	str	r3, [sp, #4]
    797c:	4798      	blx	r3
    797e:	4837      	ldr	r0, [pc, #220]	; (7a5c <nm_spi_init+0x164>)
    7980:	4478      	add	r0, pc
    7982:	4b37      	ldr	r3, [pc, #220]	; (7a60 <nm_spi_init+0x168>)
    7984:	58eb      	ldr	r3, [r5, r3]
    7986:	9301      	str	r3, [sp, #4]
    7988:	4798      	blx	r3
    798a:	200d      	movs	r0, #13
    798c:	4b35      	ldr	r3, [pc, #212]	; (7a64 <nm_spi_init+0x16c>)
    798e:	58eb      	ldr	r3, [r5, r3]
    7990:	9301      	str	r3, [sp, #4]
    7992:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    7994:	a902      	add	r1, sp, #8
    7996:	4825      	ldr	r0, [pc, #148]	; (7a2c <nm_spi_init+0x134>)
    7998:	4b33      	ldr	r3, [pc, #204]	; (7a68 <nm_spi_init+0x170>)
    799a:	447b      	add	r3, pc
    799c:	4798      	blx	r3
    799e:	1e04      	subs	r4, r0, #0
    79a0:	d1ba      	bne.n	7918 <nm_spi_init+0x20>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    79a2:	4a32      	ldr	r2, [pc, #200]	; (7a6c <nm_spi_init+0x174>)
    79a4:	4932      	ldr	r1, [pc, #200]	; (7a70 <nm_spi_init+0x178>)
    79a6:	4479      	add	r1, pc
    79a8:	4832      	ldr	r0, [pc, #200]	; (7a74 <nm_spi_init+0x17c>)
    79aa:	4478      	add	r0, pc
    79ac:	4b2a      	ldr	r3, [pc, #168]	; (7a58 <nm_spi_init+0x160>)
    79ae:	58eb      	ldr	r3, [r5, r3]
    79b0:	9301      	str	r3, [sp, #4]
    79b2:	4798      	blx	r3
    79b4:	4830      	ldr	r0, [pc, #192]	; (7a78 <nm_spi_init+0x180>)
    79b6:	4478      	add	r0, pc
    79b8:	4b29      	ldr	r3, [pc, #164]	; (7a60 <nm_spi_init+0x168>)
    79ba:	58eb      	ldr	r3, [r5, r3]
    79bc:	9301      	str	r3, [sp, #4]
    79be:	4798      	blx	r3
    79c0:	200d      	movs	r0, #13
    79c2:	4b28      	ldr	r3, [pc, #160]	; (7a64 <nm_spi_init+0x16c>)
    79c4:	58eb      	ldr	r3, [r5, r3]
    79c6:	9301      	str	r3, [sp, #4]
    79c8:	4798      	blx	r3
			return 0;
    79ca:	e7c8      	b.n	795e <nm_spi_init+0x66>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    79cc:	4a2b      	ldr	r2, [pc, #172]	; (7a7c <nm_spi_init+0x184>)
    79ce:	492c      	ldr	r1, [pc, #176]	; (7a80 <nm_spi_init+0x188>)
    79d0:	4479      	add	r1, pc
    79d2:	482c      	ldr	r0, [pc, #176]	; (7a84 <nm_spi_init+0x18c>)
    79d4:	4478      	add	r0, pc
    79d6:	4b20      	ldr	r3, [pc, #128]	; (7a58 <nm_spi_init+0x160>)
    79d8:	58eb      	ldr	r3, [r5, r3]
    79da:	9301      	str	r3, [sp, #4]
    79dc:	4798      	blx	r3
    79de:	482a      	ldr	r0, [pc, #168]	; (7a88 <nm_spi_init+0x190>)
    79e0:	4478      	add	r0, pc
    79e2:	4b1f      	ldr	r3, [pc, #124]	; (7a60 <nm_spi_init+0x168>)
    79e4:	58eb      	ldr	r3, [r5, r3]
    79e6:	9301      	str	r3, [sp, #4]
    79e8:	4798      	blx	r3
    79ea:	200d      	movs	r0, #13
    79ec:	4b1d      	ldr	r3, [pc, #116]	; (7a64 <nm_spi_init+0x16c>)
    79ee:	58eb      	ldr	r3, [r5, r3]
    79f0:	9301      	str	r3, [sp, #4]
    79f2:	4798      	blx	r3
			return 0;
    79f4:	e7b3      	b.n	795e <nm_spi_init+0x66>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    79f6:	4a25      	ldr	r2, [pc, #148]	; (7a8c <nm_spi_init+0x194>)
    79f8:	4925      	ldr	r1, [pc, #148]	; (7a90 <nm_spi_init+0x198>)
    79fa:	4479      	add	r1, pc
    79fc:	4825      	ldr	r0, [pc, #148]	; (7a94 <nm_spi_init+0x19c>)
    79fe:	4478      	add	r0, pc
    7a00:	4b15      	ldr	r3, [pc, #84]	; (7a58 <nm_spi_init+0x160>)
    7a02:	58eb      	ldr	r3, [r5, r3]
    7a04:	9301      	str	r3, [sp, #4]
    7a06:	4798      	blx	r3
    7a08:	4823      	ldr	r0, [pc, #140]	; (7a98 <nm_spi_init+0x1a0>)
    7a0a:	4478      	add	r0, pc
    7a0c:	4b14      	ldr	r3, [pc, #80]	; (7a60 <nm_spi_init+0x168>)
    7a0e:	58eb      	ldr	r3, [r5, r3]
    7a10:	9301      	str	r3, [sp, #4]
    7a12:	4798      	blx	r3
    7a14:	200d      	movs	r0, #13
    7a16:	4b13      	ldr	r3, [pc, #76]	; (7a64 <nm_spi_init+0x16c>)
    7a18:	58eb      	ldr	r3, [r5, r3]
    7a1a:	9301      	str	r3, [sp, #4]
    7a1c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    7a1e:	2406      	movs	r4, #6
    7a20:	4264      	negs	r4, r4
    7a22:	e79c      	b.n	795e <nm_spi_init+0x66>
    7a24:	0000b08e 	.word	0x0000b08e
    7a28:	1fff9016 	.word	0x1fff9016
    7a2c:	0000e824 	.word	0x0000e824
    7a30:	fffff9bd 	.word	0xfffff9bd
    7a34:	1fff9002 	.word	0x1fff9002
    7a38:	fffff85b 	.word	0xfffff85b
    7a3c:	1fff8fda 	.word	0x1fff8fda
    7a40:	fffff97f 	.word	0xfffff97f
    7a44:	ffffff61 	.word	0xffffff61
    7a48:	1fff8fb4 	.word	0x1fff8fb4
    7a4c:	000004c7 	.word	0x000004c7
    7a50:	0000a758 	.word	0x0000a758
    7a54:	00009fd8 	.word	0x00009fd8
    7a58:	0000003c 	.word	0x0000003c
    7a5c:	0000a854 	.word	0x0000a854
    7a60:	00000108 	.word	0x00000108
    7a64:	00000000 	.word	0x00000000
    7a68:	fffff933 	.word	0xfffff933
    7a6c:	000004ca 	.word	0x000004ca
    7a70:	0000a722 	.word	0x0000a722
    7a74:	00009fa2 	.word	0x00009fa2
    7a78:	0000a86e 	.word	0x0000a86e
    7a7c:	000004d4 	.word	0x000004d4
    7a80:	0000a6f8 	.word	0x0000a6f8
    7a84:	00009f78 	.word	0x00009f78
    7a88:	0000a870 	.word	0x0000a870
    7a8c:	000004de 	.word	0x000004de
    7a90:	0000a6ce 	.word	0x0000a6ce
    7a94:	00009f4e 	.word	0x00009f4e
    7a98:	0000a87a 	.word	0x0000a87a

00007a9c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7a9c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    7a9e:	4b05      	ldr	r3, [pc, #20]	; (7ab4 <nm_spi_read_block+0x18>)
    7aa0:	447b      	add	r3, pc
    7aa2:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7aa4:	2801      	cmp	r0, #1
    7aa6:	d101      	bne.n	7aac <nm_spi_read_block+0x10>
    7aa8:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    7aaa:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    7aac:	2006      	movs	r0, #6
    7aae:	4240      	negs	r0, r0
    7ab0:	e7fb      	b.n	7aaa <nm_spi_read_block+0xe>
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	fffff9e5 	.word	0xfffff9e5

00007ab8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7ab8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    7aba:	4b05      	ldr	r3, [pc, #20]	; (7ad0 <nm_spi_write_block+0x18>)
    7abc:	447b      	add	r3, pc
    7abe:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7ac0:	2801      	cmp	r0, #1
    7ac2:	d101      	bne.n	7ac8 <nm_spi_write_block+0x10>
    7ac4:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    7ac6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    7ac8:	2006      	movs	r0, #6
    7aca:	4240      	negs	r0, r0
    7acc:	e7fb      	b.n	7ac6 <nm_spi_write_block+0xe>
    7ace:	46c0      	nop			; (mov r8, r8)
    7ad0:	fffffb99 	.word	0xfffffb99

00007ad4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    7ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ad6:	46de      	mov	lr, fp
    7ad8:	464f      	mov	r7, r9
    7ada:	4646      	mov	r6, r8
    7adc:	b5c0      	push	{r6, r7, lr}
    7ade:	b084      	sub	sp, #16
    7ae0:	9002      	str	r0, [sp, #8]
    7ae2:	000f      	movs	r7, r1
    7ae4:	9203      	str	r2, [sp, #12]
    7ae6:	469b      	mov	fp, r3
    7ae8:	ab0c      	add	r3, sp, #48	; 0x30
    7aea:	881d      	ldrh	r5, [r3, #0]
    7aec:	4c4c      	ldr	r4, [pc, #304]	; (7c20 <Socket_ReadSocketData+0x14c>)
    7aee:	447c      	add	r4, pc
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    7af0:	2d00      	cmp	r5, #0
    7af2:	d01d      	beq.n	7b30 <Socket_ReadSocketData+0x5c>
    7af4:	4681      	mov	r9, r0
    7af6:	4b4b      	ldr	r3, [pc, #300]	; (7c24 <Socket_ReadSocketData+0x150>)
    7af8:	58e3      	ldr	r3, [r4, r3]
    7afa:	9301      	str	r3, [sp, #4]
    7afc:	0103      	lsls	r3, r0, #4
    7afe:	9901      	ldr	r1, [sp, #4]
    7b00:	585b      	ldr	r3, [r3, r1]
    7b02:	2b00      	cmp	r3, #0
    7b04:	d014      	beq.n	7b30 <Socket_ReadSocketData+0x5c>
    7b06:	4b47      	ldr	r3, [pc, #284]	; (7c24 <Socket_ReadSocketData+0x150>)
    7b08:	58e3      	ldr	r3, [r4, r3]
    7b0a:	9301      	str	r3, [sp, #4]
    7b0c:	0103      	lsls	r3, r0, #4
    7b0e:	9901      	ldr	r1, [sp, #4]
    7b10:	468c      	mov	ip, r1
    7b12:	4463      	add	r3, ip
    7b14:	889b      	ldrh	r3, [r3, #4]
    7b16:	b29b      	uxth	r3, r3
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d009      	beq.n	7b30 <Socket_ReadSocketData+0x5c>
    7b1c:	4b41      	ldr	r3, [pc, #260]	; (7c24 <Socket_ReadSocketData+0x150>)
    7b1e:	58e3      	ldr	r3, [r4, r3]
    7b20:	9301      	str	r3, [sp, #4]
    7b22:	0103      	lsls	r3, r0, #4
    7b24:	9a01      	ldr	r2, [sp, #4]
    7b26:	4694      	mov	ip, r2
    7b28:	4463      	add	r3, ip
    7b2a:	7a9b      	ldrb	r3, [r3, #10]
    7b2c:	2b01      	cmp	r3, #1
    7b2e:	d005      	beq.n	7b3c <Socket_ReadSocketData+0x68>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    7b30:	b004      	add	sp, #16
    7b32:	bc1c      	pop	{r2, r3, r4}
    7b34:	4690      	mov	r8, r2
    7b36:	4699      	mov	r9, r3
    7b38:	46a3      	mov	fp, r4
    7b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pstrRecv->u16RemainingSize = u16ReadCount;
    7b3c:	80fd      	strh	r5, [r7, #6]
    7b3e:	e013      	b.n	7b68 <Socket_ReadSocketData+0x94>
			u16Read = u16ReadCount;
    7b40:	46a8      	mov	r8, r5
			u8SetRxDone = 1;
    7b42:	2301      	movs	r3, #1
    7b44:	e029      	b.n	7b9a <Socket_ReadSocketData+0xc6>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    7b46:	4838      	ldr	r0, [pc, #224]	; (7c28 <Socket_ReadSocketData+0x154>)
    7b48:	4478      	add	r0, pc
    7b4a:	4b38      	ldr	r3, [pc, #224]	; (7c2c <Socket_ReadSocketData+0x158>)
    7b4c:	58e6      	ldr	r6, [r4, r3]
    7b4e:	47b0      	blx	r6
    7b50:	0029      	movs	r1, r5
    7b52:	4837      	ldr	r0, [pc, #220]	; (7c30 <Socket_ReadSocketData+0x15c>)
    7b54:	4478      	add	r0, pc
    7b56:	47b0      	blx	r6
    7b58:	200d      	movs	r0, #13
    7b5a:	4b36      	ldr	r3, [pc, #216]	; (7c34 <Socket_ReadSocketData+0x160>)
    7b5c:	58e3      	ldr	r3, [r4, r3]
    7b5e:	9301      	str	r3, [sp, #4]
    7b60:	4798      	blx	r3
				break;
    7b62:	e7e5      	b.n	7b30 <Socket_ReadSocketData+0x5c>
		}while(u16ReadCount != 0);
    7b64:	2d00      	cmp	r5, #0
    7b66:	d0e3      	beq.n	7b30 <Socket_ReadSocketData+0x5c>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    7b68:	4b2e      	ldr	r3, [pc, #184]	; (7c24 <Socket_ReadSocketData+0x150>)
    7b6a:	58e3      	ldr	r3, [r4, r3]
    7b6c:	9301      	str	r3, [sp, #4]
    7b6e:	464b      	mov	r3, r9
    7b70:	011b      	lsls	r3, r3, #4
    7b72:	9a01      	ldr	r2, [sp, #4]
    7b74:	4694      	mov	ip, r2
    7b76:	4463      	add	r3, ip
    7b78:	889b      	ldrh	r3, [r3, #4]
    7b7a:	1aeb      	subs	r3, r5, r3
    7b7c:	b21b      	sxth	r3, r3
			if(s16Diff > 0)
    7b7e:	2b00      	cmp	r3, #0
    7b80:	ddde      	ble.n	7b40 <Socket_ReadSocketData+0x6c>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    7b82:	4b28      	ldr	r3, [pc, #160]	; (7c24 <Socket_ReadSocketData+0x150>)
    7b84:	58e3      	ldr	r3, [r4, r3]
    7b86:	9301      	str	r3, [sp, #4]
    7b88:	464b      	mov	r3, r9
    7b8a:	011b      	lsls	r3, r3, #4
    7b8c:	9a01      	ldr	r2, [sp, #4]
    7b8e:	4694      	mov	ip, r2
    7b90:	4463      	add	r3, ip
    7b92:	889b      	ldrh	r3, [r3, #4]
    7b94:	b29b      	uxth	r3, r3
    7b96:	4698      	mov	r8, r3
				u8SetRxDone = 0;
    7b98:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    7b9a:	4a22      	ldr	r2, [pc, #136]	; (7c24 <Socket_ReadSocketData+0x150>)
    7b9c:	58a2      	ldr	r2, [r4, r2]
    7b9e:	9201      	str	r2, [sp, #4]
    7ba0:	464a      	mov	r2, r9
    7ba2:	0112      	lsls	r2, r2, #4
    7ba4:	9901      	ldr	r1, [sp, #4]
    7ba6:	5851      	ldr	r1, [r2, r1]
    7ba8:	4642      	mov	r2, r8
    7baa:	4658      	mov	r0, fp
    7bac:	4e22      	ldr	r6, [pc, #136]	; (7c38 <Socket_ReadSocketData+0x164>)
    7bae:	59a6      	ldr	r6, [r4, r6]
    7bb0:	9601      	str	r6, [sp, #4]
    7bb2:	47b0      	blx	r6
    7bb4:	2800      	cmp	r0, #0
    7bb6:	d1c6      	bne.n	7b46 <Socket_ReadSocketData+0x72>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    7bb8:	4b1a      	ldr	r3, [pc, #104]	; (7c24 <Socket_ReadSocketData+0x150>)
    7bba:	58e3      	ldr	r3, [r4, r3]
    7bbc:	9301      	str	r3, [sp, #4]
    7bbe:	464b      	mov	r3, r9
    7bc0:	011b      	lsls	r3, r3, #4
    7bc2:	9a01      	ldr	r2, [sp, #4]
    7bc4:	589b      	ldr	r3, [r3, r2]
    7bc6:	603b      	str	r3, [r7, #0]
				pstrRecv->s16BufferSize		= u16Read;
    7bc8:	4643      	mov	r3, r8
    7bca:	80bb      	strh	r3, [r7, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    7bcc:	88fb      	ldrh	r3, [r7, #6]
    7bce:	4642      	mov	r2, r8
    7bd0:	1a9b      	subs	r3, r3, r2
    7bd2:	80fb      	strh	r3, [r7, #6]
				if (gpfAppSocketCb)
    7bd4:	4b19      	ldr	r3, [pc, #100]	; (7c3c <Socket_ReadSocketData+0x168>)
    7bd6:	58e3      	ldr	r3, [r4, r3]
    7bd8:	681b      	ldr	r3, [r3, #0]
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d006      	beq.n	7bec <Socket_ReadSocketData+0x118>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    7bde:	4b17      	ldr	r3, [pc, #92]	; (7c3c <Socket_ReadSocketData+0x168>)
    7be0:	58e3      	ldr	r3, [r4, r3]
    7be2:	681b      	ldr	r3, [r3, #0]
    7be4:	003a      	movs	r2, r7
    7be6:	9903      	ldr	r1, [sp, #12]
    7be8:	9802      	ldr	r0, [sp, #8]
    7bea:	4798      	blx	r3
				u16ReadCount -= u16Read;
    7bec:	4643      	mov	r3, r8
    7bee:	1aed      	subs	r5, r5, r3
    7bf0:	b2ad      	uxth	r5, r5
				u32Address += u16Read;
    7bf2:	44c3      	add	fp, r8
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    7bf4:	4b0b      	ldr	r3, [pc, #44]	; (7c24 <Socket_ReadSocketData+0x150>)
    7bf6:	58e3      	ldr	r3, [r4, r3]
    7bf8:	9301      	str	r3, [sp, #4]
    7bfa:	464b      	mov	r3, r9
    7bfc:	011b      	lsls	r3, r3, #4
    7bfe:	9a01      	ldr	r2, [sp, #4]
    7c00:	4694      	mov	ip, r2
    7c02:	4463      	add	r3, ip
    7c04:	7a9b      	ldrb	r3, [r3, #10]
    7c06:	2b00      	cmp	r3, #0
    7c08:	d1ac      	bne.n	7b64 <Socket_ReadSocketData+0x90>
    7c0a:	2d00      	cmp	r5, #0
    7c0c:	d0aa      	beq.n	7b64 <Socket_ReadSocketData+0x90>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    7c0e:	3301      	adds	r3, #1
    7c10:	2200      	movs	r2, #0
    7c12:	2100      	movs	r1, #0
    7c14:	2000      	movs	r0, #0
    7c16:	4d08      	ldr	r5, [pc, #32]	; (7c38 <Socket_ReadSocketData+0x164>)
    7c18:	5964      	ldr	r4, [r4, r5]
    7c1a:	9401      	str	r4, [sp, #4]
    7c1c:	47a0      	blx	r4
    7c1e:	e787      	b.n	7b30 <Socket_ReadSocketData+0x5c>
    7c20:	0000ae9e 	.word	0x0000ae9e
    7c24:	0000038c 	.word	0x0000038c
    7c28:	0000a114 	.word	0x0000a114
    7c2c:	0000003c 	.word	0x0000003c
    7c30:	0000abc4 	.word	0x0000abc4
    7c34:	00000000 	.word	0x00000000
    7c38:	00000208 	.word	0x00000208
    7c3c:	000003c8 	.word	0x000003c8

00007c40 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    7c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c42:	46de      	mov	lr, fp
    7c44:	4657      	mov	r7, sl
    7c46:	464e      	mov	r6, r9
    7c48:	4645      	mov	r5, r8
    7c4a:	b5e0      	push	{r5, r6, r7, lr}
    7c4c:	b09b      	sub	sp, #108	; 0x6c
    7c4e:	000e      	movs	r6, r1
    7c50:	0015      	movs	r5, r2
    7c52:	4cb9      	ldr	r4, [pc, #740]	; (7f38 <m2m_ip_cb+0x2f8>)
    7c54:	447c      	add	r4, pc
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    7c56:	2841      	cmp	r0, #65	; 0x41
    7c58:	d03d      	beq.n	7cd6 <m2m_ip_cb+0x96>
    7c5a:	2854      	cmp	r0, #84	; 0x54
    7c5c:	d03b      	beq.n	7cd6 <m2m_ip_cb+0x96>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    7c5e:	2842      	cmp	r0, #66	; 0x42
    7c60:	d05d      	beq.n	7d1e <m2m_ip_cb+0xde>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    7c62:	2843      	cmp	r0, #67	; 0x43
    7c64:	d100      	bne.n	7c68 <m2m_ip_cb+0x28>
    7c66:	e078      	b.n	7d5a <m2m_ip_cb+0x11a>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    7c68:	2844      	cmp	r0, #68	; 0x44
    7c6a:	d100      	bne.n	7c6e <m2m_ip_cb+0x2e>
    7c6c:	e0cc      	b.n	7e08 <m2m_ip_cb+0x1c8>
    7c6e:	284b      	cmp	r0, #75	; 0x4b
    7c70:	d100      	bne.n	7c74 <m2m_ip_cb+0x34>
    7c72:	e0c9      	b.n	7e08 <m2m_ip_cb+0x1c8>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    7c74:	284a      	cmp	r0, #74	; 0x4a
    7c76:	d100      	bne.n	7c7a <m2m_ip_cb+0x3a>
    7c78:	e0f4      	b.n	7e64 <m2m_ip_cb+0x224>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    7c7a:	2846      	cmp	r0, #70	; 0x46
    7c7c:	d100      	bne.n	7c80 <m2m_ip_cb+0x40>
    7c7e:	e109      	b.n	7e94 <m2m_ip_cb+0x254>
    7c80:	2848      	cmp	r0, #72	; 0x48
    7c82:	d100      	bne.n	7c86 <m2m_ip_cb+0x46>
    7c84:	e106      	b.n	7e94 <m2m_ip_cb+0x254>
    7c86:	284d      	cmp	r0, #77	; 0x4d
    7c88:	d100      	bne.n	7c8c <m2m_ip_cb+0x4c>
    7c8a:	e103      	b.n	7e94 <m2m_ip_cb+0x254>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    7c8c:	2845      	cmp	r0, #69	; 0x45
    7c8e:	d100      	bne.n	7c92 <m2m_ip_cb+0x52>
    7c90:	e16e      	b.n	7f70 <m2m_ip_cb+0x330>
    7c92:	2847      	cmp	r0, #71	; 0x47
    7c94:	d100      	bne.n	7c98 <m2m_ip_cb+0x58>
    7c96:	e16b      	b.n	7f70 <m2m_ip_cb+0x330>
    7c98:	284c      	cmp	r0, #76	; 0x4c
    7c9a:	d100      	bne.n	7c9e <m2m_ip_cb+0x5e>
    7c9c:	e168      	b.n	7f70 <m2m_ip_cb+0x330>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    7c9e:	2852      	cmp	r0, #82	; 0x52
    7ca0:	d136      	bne.n	7d10 <m2m_ip_cb+0xd0>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    7ca2:	2301      	movs	r3, #1
    7ca4:	2214      	movs	r2, #20
    7ca6:	a909      	add	r1, sp, #36	; 0x24
    7ca8:	0028      	movs	r0, r5
    7caa:	4da4      	ldr	r5, [pc, #656]	; (7f3c <m2m_ip_cb+0x2fc>)
    7cac:	5965      	ldr	r5, [r4, r5]
    7cae:	9503      	str	r5, [sp, #12]
    7cb0:	47a8      	blx	r5
    7cb2:	2800      	cmp	r0, #0
    7cb4:	d12c      	bne.n	7d10 <m2m_ip_cb+0xd0>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    7cb6:	4ba2      	ldr	r3, [pc, #648]	; (7f40 <m2m_ip_cb+0x300>)
    7cb8:	58e3      	ldr	r3, [r4, r3]
    7cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7cbc:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    7cbe:	681b      	ldr	r3, [r3, #0]
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d025      	beq.n	7d10 <m2m_ip_cb+0xd0>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    7cc4:	4b9e      	ldr	r3, [pc, #632]	; (7f40 <m2m_ip_cb+0x300>)
    7cc6:	58e3      	ldr	r3, [r4, r3]
    7cc8:	681c      	ldr	r4, [r3, #0]
    7cca:	ab09      	add	r3, sp, #36	; 0x24
    7ccc:	7c1a      	ldrb	r2, [r3, #16]
    7cce:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    7cd2:	47a0      	blx	r4
			}
		}
	}
}
    7cd4:	e01c      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    7cd6:	2300      	movs	r3, #0
    7cd8:	2204      	movs	r2, #4
    7cda:	a909      	add	r1, sp, #36	; 0x24
    7cdc:	0028      	movs	r0, r5
    7cde:	4d97      	ldr	r5, [pc, #604]	; (7f3c <m2m_ip_cb+0x2fc>)
    7ce0:	5965      	ldr	r5, [r4, r5]
    7ce2:	9503      	str	r5, [sp, #12]
    7ce4:	47a8      	blx	r5
    7ce6:	2800      	cmp	r0, #0
    7ce8:	d112      	bne.n	7d10 <m2m_ip_cb+0xd0>
			strBind.status = strBindReply.s8Status;
    7cea:	ab09      	add	r3, sp, #36	; 0x24
    7cec:	2201      	movs	r2, #1
    7cee:	569a      	ldrsb	r2, [r3, r2]
    7cf0:	ab05      	add	r3, sp, #20
    7cf2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7cf4:	4b93      	ldr	r3, [pc, #588]	; (7f44 <m2m_ip_cb+0x304>)
    7cf6:	58e3      	ldr	r3, [r4, r3]
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d008      	beq.n	7d10 <m2m_ip_cb+0xd0>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    7cfe:	4b91      	ldr	r3, [pc, #580]	; (7f44 <m2m_ip_cb+0x304>)
    7d00:	58e3      	ldr	r3, [r4, r3]
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	aa09      	add	r2, sp, #36	; 0x24
    7d06:	2000      	movs	r0, #0
    7d08:	5610      	ldrsb	r0, [r2, r0]
    7d0a:	aa05      	add	r2, sp, #20
    7d0c:	2101      	movs	r1, #1
    7d0e:	4798      	blx	r3
}
    7d10:	b01b      	add	sp, #108	; 0x6c
    7d12:	bc3c      	pop	{r2, r3, r4, r5}
    7d14:	4690      	mov	r8, r2
    7d16:	4699      	mov	r9, r3
    7d18:	46a2      	mov	sl, r4
    7d1a:	46ab      	mov	fp, r5
    7d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    7d1e:	2300      	movs	r3, #0
    7d20:	2204      	movs	r2, #4
    7d22:	a909      	add	r1, sp, #36	; 0x24
    7d24:	0028      	movs	r0, r5
    7d26:	4d85      	ldr	r5, [pc, #532]	; (7f3c <m2m_ip_cb+0x2fc>)
    7d28:	5965      	ldr	r5, [r4, r5]
    7d2a:	9503      	str	r5, [sp, #12]
    7d2c:	47a8      	blx	r5
    7d2e:	2800      	cmp	r0, #0
    7d30:	d1ee      	bne.n	7d10 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
    7d32:	ab09      	add	r3, sp, #36	; 0x24
    7d34:	2201      	movs	r2, #1
    7d36:	569a      	ldrsb	r2, [r3, r2]
    7d38:	ab05      	add	r3, sp, #20
    7d3a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7d3c:	4b81      	ldr	r3, [pc, #516]	; (7f44 <m2m_ip_cb+0x304>)
    7d3e:	58e3      	ldr	r3, [r4, r3]
    7d40:	681b      	ldr	r3, [r3, #0]
    7d42:	2b00      	cmp	r3, #0
    7d44:	d0e4      	beq.n	7d10 <m2m_ip_cb+0xd0>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    7d46:	4b7f      	ldr	r3, [pc, #508]	; (7f44 <m2m_ip_cb+0x304>)
    7d48:	58e3      	ldr	r3, [r4, r3]
    7d4a:	681b      	ldr	r3, [r3, #0]
    7d4c:	aa09      	add	r2, sp, #36	; 0x24
    7d4e:	2000      	movs	r0, #0
    7d50:	5610      	ldrsb	r0, [r2, r0]
    7d52:	aa05      	add	r2, sp, #20
    7d54:	2102      	movs	r1, #2
    7d56:	4798      	blx	r3
    7d58:	e7da      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    7d5a:	2300      	movs	r3, #0
    7d5c:	220c      	movs	r2, #12
    7d5e:	a905      	add	r1, sp, #20
    7d60:	0028      	movs	r0, r5
    7d62:	4d76      	ldr	r5, [pc, #472]	; (7f3c <m2m_ip_cb+0x2fc>)
    7d64:	5965      	ldr	r5, [r4, r5]
    7d66:	9503      	str	r5, [sp, #12]
    7d68:	47a8      	blx	r5
    7d6a:	2800      	cmp	r0, #0
    7d6c:	d1d0      	bne.n	7d10 <m2m_ip_cb+0xd0>
			if(strAcceptReply.sConnectedSock >= 0)
    7d6e:	ab05      	add	r3, sp, #20
    7d70:	2209      	movs	r2, #9
    7d72:	569a      	ldrsb	r2, [r3, r2]
    7d74:	2a00      	cmp	r2, #0
    7d76:	db2e      	blt.n	7dd6 <m2m_ip_cb+0x196>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    7d78:	0018      	movs	r0, r3
    7d7a:	2108      	movs	r1, #8
    7d7c:	5659      	ldrsb	r1, [r3, r1]
    7d7e:	4b72      	ldr	r3, [pc, #456]	; (7f48 <m2m_ip_cb+0x308>)
    7d80:	58e3      	ldr	r3, [r4, r3]
    7d82:	0109      	lsls	r1, r1, #4
    7d84:	1859      	adds	r1, r3, r1
    7d86:	7ac9      	ldrb	r1, [r1, #11]
    7d88:	b2c9      	uxtb	r1, r1
    7d8a:	0115      	lsls	r5, r2, #4
    7d8c:	195b      	adds	r3, r3, r5
    7d8e:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    7d90:	2101      	movs	r1, #1
    7d92:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7d94:	8941      	ldrh	r1, [r0, #10]
    7d96:	3908      	subs	r1, #8
    7d98:	b289      	uxth	r1, r1
    7d9a:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    7d9c:	4b6b      	ldr	r3, [pc, #428]	; (7f4c <m2m_ip_cb+0x30c>)
    7d9e:	58e1      	ldr	r1, [r4, r3]
    7da0:	880b      	ldrh	r3, [r1, #0]
    7da2:	3301      	adds	r3, #1
    7da4:	b29b      	uxth	r3, r3
    7da6:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    7da8:	880b      	ldrh	r3, [r1, #0]
    7daa:	b29b      	uxth	r3, r3
    7dac:	2b00      	cmp	r3, #0
    7dae:	d105      	bne.n	7dbc <m2m_ip_cb+0x17c>
					++gu16SessionID;
    7db0:	4b66      	ldr	r3, [pc, #408]	; (7f4c <m2m_ip_cb+0x30c>)
    7db2:	58e1      	ldr	r1, [r4, r3]
    7db4:	880b      	ldrh	r3, [r1, #0]
    7db6:	3301      	adds	r3, #1
    7db8:	b29b      	uxth	r3, r3
    7dba:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    7dbc:	4b63      	ldr	r3, [pc, #396]	; (7f4c <m2m_ip_cb+0x30c>)
    7dbe:	58e3      	ldr	r3, [r4, r3]
    7dc0:	9303      	str	r3, [sp, #12]
    7dc2:	8819      	ldrh	r1, [r3, #0]
    7dc4:	b289      	uxth	r1, r1
    7dc6:	4b60      	ldr	r3, [pc, #384]	; (7f48 <m2m_ip_cb+0x308>)
    7dc8:	58e3      	ldr	r3, [r4, r3]
    7dca:	9303      	str	r3, [sp, #12]
    7dcc:	0113      	lsls	r3, r2, #4
    7dce:	9803      	ldr	r0, [sp, #12]
    7dd0:	4684      	mov	ip, r0
    7dd2:	4463      	add	r3, ip
    7dd4:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    7dd6:	ab09      	add	r3, sp, #36	; 0x24
    7dd8:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    7dda:	2202      	movs	r2, #2
    7ddc:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7dde:	aa05      	add	r2, sp, #20
    7de0:	8851      	ldrh	r1, [r2, #2]
    7de2:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7de4:	9a06      	ldr	r2, [sp, #24]
    7de6:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    7de8:	4b56      	ldr	r3, [pc, #344]	; (7f44 <m2m_ip_cb+0x304>)
    7dea:	58e3      	ldr	r3, [r4, r3]
    7dec:	681b      	ldr	r3, [r3, #0]
    7dee:	2b00      	cmp	r3, #0
    7df0:	d100      	bne.n	7df4 <m2m_ip_cb+0x1b4>
    7df2:	e78d      	b.n	7d10 <m2m_ip_cb+0xd0>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    7df4:	4b53      	ldr	r3, [pc, #332]	; (7f44 <m2m_ip_cb+0x304>)
    7df6:	58e3      	ldr	r3, [r4, r3]
    7df8:	681b      	ldr	r3, [r3, #0]
    7dfa:	aa05      	add	r2, sp, #20
    7dfc:	2008      	movs	r0, #8
    7dfe:	5610      	ldrsb	r0, [r2, r0]
    7e00:	aa09      	add	r2, sp, #36	; 0x24
    7e02:	2104      	movs	r1, #4
    7e04:	4798      	blx	r3
    7e06:	e783      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    7e08:	2300      	movs	r3, #0
    7e0a:	2204      	movs	r2, #4
    7e0c:	a909      	add	r1, sp, #36	; 0x24
    7e0e:	0028      	movs	r0, r5
    7e10:	4d4a      	ldr	r5, [pc, #296]	; (7f3c <m2m_ip_cb+0x2fc>)
    7e12:	5965      	ldr	r5, [r4, r5]
    7e14:	9503      	str	r5, [sp, #12]
    7e16:	47a8      	blx	r5
    7e18:	2800      	cmp	r0, #0
    7e1a:	d000      	beq.n	7e1e <m2m_ip_cb+0x1de>
    7e1c:	e778      	b.n	7d10 <m2m_ip_cb+0xd0>
			strConnMsg.sock		= strConnectReply.sock;
    7e1e:	ab09      	add	r3, sp, #36	; 0x24
    7e20:	2000      	movs	r0, #0
    7e22:	5618      	ldrsb	r0, [r3, r0]
    7e24:	aa05      	add	r2, sp, #20
    7e26:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7e28:	785b      	ldrb	r3, [r3, #1]
    7e2a:	b25b      	sxtb	r3, r3
    7e2c:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    7e2e:	2b00      	cmp	r3, #0
    7e30:	d10b      	bne.n	7e4a <m2m_ip_cb+0x20a>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7e32:	ab09      	add	r3, sp, #36	; 0x24
    7e34:	885b      	ldrh	r3, [r3, #2]
    7e36:	3b08      	subs	r3, #8
    7e38:	b29b      	uxth	r3, r3
    7e3a:	4a43      	ldr	r2, [pc, #268]	; (7f48 <m2m_ip_cb+0x308>)
    7e3c:	58a2      	ldr	r2, [r4, r2]
    7e3e:	9203      	str	r2, [sp, #12]
    7e40:	0102      	lsls	r2, r0, #4
    7e42:	9903      	ldr	r1, [sp, #12]
    7e44:	468c      	mov	ip, r1
    7e46:	4462      	add	r2, ip
    7e48:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    7e4a:	4b3e      	ldr	r3, [pc, #248]	; (7f44 <m2m_ip_cb+0x304>)
    7e4c:	58e3      	ldr	r3, [r4, r3]
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	2b00      	cmp	r3, #0
    7e52:	d100      	bne.n	7e56 <m2m_ip_cb+0x216>
    7e54:	e75c      	b.n	7d10 <m2m_ip_cb+0xd0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    7e56:	4b3b      	ldr	r3, [pc, #236]	; (7f44 <m2m_ip_cb+0x304>)
    7e58:	58e3      	ldr	r3, [r4, r3]
    7e5a:	681b      	ldr	r3, [r3, #0]
    7e5c:	aa05      	add	r2, sp, #20
    7e5e:	2105      	movs	r1, #5
    7e60:	4798      	blx	r3
	{
    7e62:	e755      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    7e64:	2300      	movs	r3, #0
    7e66:	2244      	movs	r2, #68	; 0x44
    7e68:	a909      	add	r1, sp, #36	; 0x24
    7e6a:	0028      	movs	r0, r5
    7e6c:	4d33      	ldr	r5, [pc, #204]	; (7f3c <m2m_ip_cb+0x2fc>)
    7e6e:	5965      	ldr	r5, [r4, r5]
    7e70:	9503      	str	r5, [sp, #12]
    7e72:	47a8      	blx	r5
    7e74:	2800      	cmp	r0, #0
    7e76:	d000      	beq.n	7e7a <m2m_ip_cb+0x23a>
    7e78:	e74a      	b.n	7d10 <m2m_ip_cb+0xd0>
			if(gpfAppResolveCb)
    7e7a:	4b35      	ldr	r3, [pc, #212]	; (7f50 <m2m_ip_cb+0x310>)
    7e7c:	58e3      	ldr	r3, [r4, r3]
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	2b00      	cmp	r3, #0
    7e82:	d100      	bne.n	7e86 <m2m_ip_cb+0x246>
    7e84:	e744      	b.n	7d10 <m2m_ip_cb+0xd0>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    7e86:	4b32      	ldr	r3, [pc, #200]	; (7f50 <m2m_ip_cb+0x310>)
    7e88:	58e3      	ldr	r3, [r4, r3]
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	a809      	add	r0, sp, #36	; 0x24
    7e8e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7e90:	4798      	blx	r3
    7e92:	e73d      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    7e94:	2848      	cmp	r0, #72	; 0x48
    7e96:	d035      	beq.n	7f04 <m2m_ip_cb+0x2c4>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    7e98:	2306      	movs	r3, #6
    7e9a:	469b      	mov	fp, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    7e9c:	2300      	movs	r3, #0
    7e9e:	2210      	movs	r2, #16
    7ea0:	a905      	add	r1, sp, #20
    7ea2:	0028      	movs	r0, r5
    7ea4:	4f25      	ldr	r7, [pc, #148]	; (7f3c <m2m_ip_cb+0x2fc>)
    7ea6:	59e7      	ldr	r7, [r4, r7]
    7ea8:	9703      	str	r7, [sp, #12]
    7eaa:	47b8      	blx	r7
    7eac:	2800      	cmp	r0, #0
    7eae:	d000      	beq.n	7eb2 <m2m_ip_cb+0x272>
    7eb0:	e72e      	b.n	7d10 <m2m_ip_cb+0xd0>
			sock			= strRecvReply.sock;
    7eb2:	aa05      	add	r2, sp, #20
    7eb4:	200c      	movs	r0, #12
    7eb6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    7eb8:	89d3      	ldrh	r3, [r2, #14]
    7eba:	469c      	mov	ip, r3
			gastrSockets[sock].bIsRecvPending = 0;
    7ebc:	4b22      	ldr	r3, [pc, #136]	; (7f48 <m2m_ip_cb+0x308>)
    7ebe:	58e3      	ldr	r3, [r4, r3]
    7ec0:	9303      	str	r3, [sp, #12]
    7ec2:	0101      	lsls	r1, r0, #4
    7ec4:	4698      	mov	r8, r3
    7ec6:	4441      	add	r1, r8
    7ec8:	2300      	movs	r3, #0
    7eca:	730b      	strb	r3, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    7ecc:	2708      	movs	r7, #8
    7ece:	5fd3      	ldrsh	r3, [r2, r7]
    7ed0:	4698      	mov	r8, r3
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    7ed2:	8953      	ldrh	r3, [r2, #10]
    7ed4:	4699      	mov	r9, r3
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    7ed6:	8853      	ldrh	r3, [r2, #2]
    7ed8:	469a      	mov	sl, r3
    7eda:	ab09      	add	r3, sp, #36	; 0x24
    7edc:	4657      	mov	r7, sl
    7ede:	815f      	strh	r7, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    7ee0:	9a06      	ldr	r2, [sp, #24]
    7ee2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7ee4:	88ca      	ldrh	r2, [r1, #6]
    7ee6:	b292      	uxth	r2, r2
    7ee8:	4594      	cmp	ip, r2
    7eea:	d00e      	beq.n	7f0a <m2m_ip_cb+0x2ca>
				if(u16ReadSize < u16BufferSize)
    7eec:	2e10      	cmp	r6, #16
    7eee:	d800      	bhi.n	7ef2 <m2m_ip_cb+0x2b2>
    7ef0:	e70e      	b.n	7d10 <m2m_ip_cb+0xd0>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    7ef2:	2301      	movs	r3, #1
    7ef4:	2200      	movs	r2, #0
    7ef6:	2100      	movs	r1, #0
    7ef8:	2000      	movs	r0, #0
    7efa:	4d10      	ldr	r5, [pc, #64]	; (7f3c <m2m_ip_cb+0x2fc>)
    7efc:	5964      	ldr	r4, [r4, r5]
    7efe:	9403      	str	r4, [sp, #12]
    7f00:	47a0      	blx	r4
	{
    7f02:	e705      	b.n	7d10 <m2m_ip_cb+0xd0>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    7f04:	2309      	movs	r3, #9
    7f06:	469b      	mov	fp, r3
    7f08:	e7c8      	b.n	7e9c <m2m_ip_cb+0x25c>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    7f0a:	4643      	mov	r3, r8
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	dd01      	ble.n	7f14 <m2m_ip_cb+0x2d4>
    7f10:	45b0      	cmp	r8, r6
    7f12:	db1f      	blt.n	7f54 <m2m_ip_cb+0x314>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    7f14:	ab09      	add	r3, sp, #36	; 0x24
    7f16:	4642      	mov	r2, r8
    7f18:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    7f1a:	2300      	movs	r3, #0
    7f1c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    7f1e:	4b09      	ldr	r3, [pc, #36]	; (7f44 <m2m_ip_cb+0x304>)
    7f20:	58e3      	ldr	r3, [r4, r3]
    7f22:	681b      	ldr	r3, [r3, #0]
    7f24:	2b00      	cmp	r3, #0
    7f26:	d100      	bne.n	7f2a <m2m_ip_cb+0x2ea>
    7f28:	e6f2      	b.n	7d10 <m2m_ip_cb+0xd0>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    7f2a:	4b06      	ldr	r3, [pc, #24]	; (7f44 <m2m_ip_cb+0x304>)
    7f2c:	58e3      	ldr	r3, [r4, r3]
    7f2e:	681b      	ldr	r3, [r3, #0]
    7f30:	aa09      	add	r2, sp, #36	; 0x24
    7f32:	4659      	mov	r1, fp
    7f34:	4798      	blx	r3
    7f36:	e6eb      	b.n	7d10 <m2m_ip_cb+0xd0>
    7f38:	0000ad38 	.word	0x0000ad38
    7f3c:	00000208 	.word	0x00000208
    7f40:	00000464 	.word	0x00000464
    7f44:	000003c8 	.word	0x000003c8
    7f48:	0000038c 	.word	0x0000038c
    7f4c:	000003a4 	.word	0x000003a4
    7f50:	00000490 	.word	0x00000490
					u32Address += u16DataOffset;
    7f54:	002b      	movs	r3, r5
    7f56:	444b      	add	r3, r9
					u16ReadSize = (uint16)s16RecvStatus;
    7f58:	4642      	mov	r2, r8
    7f5a:	4669      	mov	r1, sp
    7f5c:	818a      	strh	r2, [r1, #12]
    7f5e:	898a      	ldrh	r2, [r1, #12]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    7f60:	9200      	str	r2, [sp, #0]
    7f62:	465a      	mov	r2, fp
    7f64:	a909      	add	r1, sp, #36	; 0x24
    7f66:	4d1b      	ldr	r5, [pc, #108]	; (7fd4 <m2m_ip_cb+0x394>)
    7f68:	5964      	ldr	r4, [r4, r5]
    7f6a:	9403      	str	r4, [sp, #12]
    7f6c:	47a0      	blx	r4
    7f6e:	e6cf      	b.n	7d10 <m2m_ip_cb+0xd0>
		if(u8OpCode == SOCKET_CMD_SENDTO)
    7f70:	2847      	cmp	r0, #71	; 0x47
    7f72:	d02c      	beq.n	7fce <m2m_ip_cb+0x38e>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    7f74:	2607      	movs	r6, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7f76:	2300      	movs	r3, #0
    7f78:	2208      	movs	r2, #8
    7f7a:	a909      	add	r1, sp, #36	; 0x24
    7f7c:	0028      	movs	r0, r5
    7f7e:	4d16      	ldr	r5, [pc, #88]	; (7fd8 <m2m_ip_cb+0x398>)
    7f80:	5965      	ldr	r5, [r4, r5]
    7f82:	9503      	str	r5, [sp, #12]
    7f84:	47a8      	blx	r5
    7f86:	2800      	cmp	r0, #0
    7f88:	d000      	beq.n	7f8c <m2m_ip_cb+0x34c>
    7f8a:	e6c1      	b.n	7d10 <m2m_ip_cb+0xd0>
			sock = strReply.sock;
    7f8c:	ab09      	add	r3, sp, #36	; 0x24
    7f8e:	2000      	movs	r0, #0
    7f90:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    7f92:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    7f94:	2102      	movs	r1, #2
    7f96:	5e59      	ldrsh	r1, [r3, r1]
    7f98:	ab05      	add	r3, sp, #20
    7f9a:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7f9c:	4b0f      	ldr	r3, [pc, #60]	; (7fdc <m2m_ip_cb+0x39c>)
    7f9e:	58e3      	ldr	r3, [r4, r3]
    7fa0:	9303      	str	r3, [sp, #12]
    7fa2:	0103      	lsls	r3, r0, #4
    7fa4:	9903      	ldr	r1, [sp, #12]
    7fa6:	468c      	mov	ip, r1
    7fa8:	4463      	add	r3, ip
    7faa:	88db      	ldrh	r3, [r3, #6]
    7fac:	b29b      	uxth	r3, r3
    7fae:	429a      	cmp	r2, r3
    7fb0:	d000      	beq.n	7fb4 <m2m_ip_cb+0x374>
    7fb2:	e6ad      	b.n	7d10 <m2m_ip_cb+0xd0>
				if(gpfAppSocketCb)
    7fb4:	4b0a      	ldr	r3, [pc, #40]	; (7fe0 <m2m_ip_cb+0x3a0>)
    7fb6:	58e3      	ldr	r3, [r4, r3]
    7fb8:	681b      	ldr	r3, [r3, #0]
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d100      	bne.n	7fc0 <m2m_ip_cb+0x380>
    7fbe:	e6a7      	b.n	7d10 <m2m_ip_cb+0xd0>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    7fc0:	4b07      	ldr	r3, [pc, #28]	; (7fe0 <m2m_ip_cb+0x3a0>)
    7fc2:	58e3      	ldr	r3, [r4, r3]
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	aa05      	add	r2, sp, #20
    7fc8:	0031      	movs	r1, r6
    7fca:	4798      	blx	r3
	{
    7fcc:	e6a0      	b.n	7d10 <m2m_ip_cb+0xd0>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7fce:	2608      	movs	r6, #8
    7fd0:	e7d1      	b.n	7f76 <m2m_ip_cb+0x336>
    7fd2:	46c0      	nop			; (mov r8, r8)
    7fd4:	0000029c 	.word	0x0000029c
    7fd8:	00000208 	.word	0x00000208
    7fdc:	0000038c 	.word	0x0000038c
    7fe0:	000003c8 	.word	0x000003c8

00007fe4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    7fe4:	b510      	push	{r4, lr}
    7fe6:	b082      	sub	sp, #8
    7fe8:	4c13      	ldr	r4, [pc, #76]	; (8038 <socketInit+0x54>)
    7fea:	447c      	add	r4, pc
	if(gbSocketInit == 0)
    7fec:	4b13      	ldr	r3, [pc, #76]	; (803c <socketInit+0x58>)
    7fee:	58e3      	ldr	r3, [r4, r3]
    7ff0:	9301      	str	r3, [sp, #4]
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d001      	beq.n	7ffc <socketInit+0x18>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    7ff8:	b002      	add	sp, #8
    7ffa:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    7ffc:	4b10      	ldr	r3, [pc, #64]	; (8040 <socketInit+0x5c>)
    7ffe:	58e3      	ldr	r3, [r4, r3]
    8000:	9301      	str	r3, [sp, #4]
    8002:	22b0      	movs	r2, #176	; 0xb0
    8004:	2100      	movs	r1, #0
    8006:	0018      	movs	r0, r3
    8008:	4b0e      	ldr	r3, [pc, #56]	; (8044 <socketInit+0x60>)
    800a:	58e3      	ldr	r3, [r4, r3]
    800c:	9301      	str	r3, [sp, #4]
    800e:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    8010:	490d      	ldr	r1, [pc, #52]	; (8048 <socketInit+0x64>)
    8012:	4479      	add	r1, pc
    8014:	2002      	movs	r0, #2
    8016:	4b0d      	ldr	r3, [pc, #52]	; (804c <socketInit+0x68>)
    8018:	58e3      	ldr	r3, [r4, r3]
    801a:	9301      	str	r3, [sp, #4]
    801c:	4798      	blx	r3
		gbSocketInit	= 1;
    801e:	4b07      	ldr	r3, [pc, #28]	; (803c <socketInit+0x58>)
    8020:	58e3      	ldr	r3, [r4, r3]
    8022:	9301      	str	r3, [sp, #4]
    8024:	2301      	movs	r3, #1
    8026:	9a01      	ldr	r2, [sp, #4]
    8028:	7013      	strb	r3, [r2, #0]
		gu16SessionID	= 0;
    802a:	4b09      	ldr	r3, [pc, #36]	; (8050 <socketInit+0x6c>)
    802c:	58e3      	ldr	r3, [r4, r3]
    802e:	9301      	str	r3, [sp, #4]
    8030:	2300      	movs	r3, #0
    8032:	9a01      	ldr	r2, [sp, #4]
    8034:	8013      	strh	r3, [r2, #0]
}
    8036:	e7df      	b.n	7ff8 <socketInit+0x14>
    8038:	0000a9a2 	.word	0x0000a9a2
    803c:	00000244 	.word	0x00000244
    8040:	0000038c 	.word	0x0000038c
    8044:	000001b8 	.word	0x000001b8
    8048:	fffffc2b 	.word	0xfffffc2b
    804c:	000002f0 	.word	0x000002f0
    8050:	000003a4 	.word	0x000003a4

00008054 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    8054:	4b04      	ldr	r3, [pc, #16]	; (8068 <registerSocketCallback+0x14>)
    8056:	447b      	add	r3, pc
	gpfAppSocketCb = pfAppSocketCb;
    8058:	4a04      	ldr	r2, [pc, #16]	; (806c <registerSocketCallback+0x18>)
    805a:	589a      	ldr	r2, [r3, r2]
    805c:	6010      	str	r0, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
    805e:	4a04      	ldr	r2, [pc, #16]	; (8070 <registerSocketCallback+0x1c>)
    8060:	589b      	ldr	r3, [r3, r2]
    8062:	6019      	str	r1, [r3, #0]
}
    8064:	4770      	bx	lr
    8066:	46c0      	nop			; (mov r8, r8)
    8068:	0000a936 	.word	0x0000a936
    806c:	000003c8 	.word	0x000003c8
    8070:	00000490 	.word	0x00000490

00008074 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    8074:	b5f0      	push	{r4, r5, r6, r7, lr}
    8076:	46c6      	mov	lr, r8
    8078:	b500      	push	{lr}
    807a:	b088      	sub	sp, #32
    807c:	9205      	str	r2, [sp, #20]
    807e:	4e52      	ldr	r6, [pc, #328]	; (81c8 <socket+0x154>)
    8080:	447e      	add	r6, pc
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    8082:	2802      	cmp	r0, #2
    8084:	d000      	beq.n	8088 <socket+0x14>
    8086:	e09b      	b.n	81c0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    8088:	2901      	cmp	r1, #1
    808a:	d044      	beq.n	8116 <socket+0xa2>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    808c:	2902      	cmp	r1, #2
    808e:	d100      	bne.n	8092 <socket+0x1e>
    8090:	e065      	b.n	815e <socket+0xea>
	SOCKET					sock = -1;
    8092:	2701      	movs	r7, #1
    8094:	427f      	negs	r7, r7
					break;
				}
			}
		}

		if(sock >= 0)
    8096:	2f00      	cmp	r7, #0
    8098:	db32      	blt.n	8100 <socket+0x8c>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    809a:	2210      	movs	r2, #16
    809c:	2100      	movs	r1, #0
    809e:	0020      	movs	r0, r4
    80a0:	4b4a      	ldr	r3, [pc, #296]	; (81cc <socket+0x158>)
    80a2:	58f3      	ldr	r3, [r6, r3]
    80a4:	9304      	str	r3, [sp, #16]
    80a6:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    80a8:	2301      	movs	r3, #1
    80aa:	72a3      	strb	r3, [r4, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    80ac:	4b48      	ldr	r3, [pc, #288]	; (81d0 <socket+0x15c>)
    80ae:	58f2      	ldr	r2, [r6, r3]
    80b0:	8813      	ldrh	r3, [r2, #0]
    80b2:	3301      	adds	r3, #1
    80b4:	b29b      	uxth	r3, r3
    80b6:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    80b8:	8813      	ldrh	r3, [r2, #0]
    80ba:	b29b      	uxth	r3, r3
    80bc:	2b00      	cmp	r3, #0
    80be:	d105      	bne.n	80cc <socket+0x58>
				++gu16SessionID;
    80c0:	4b43      	ldr	r3, [pc, #268]	; (81d0 <socket+0x15c>)
    80c2:	58f2      	ldr	r2, [r6, r3]
    80c4:	8813      	ldrh	r3, [r2, #0]
    80c6:	3301      	adds	r3, #1
    80c8:	b29b      	uxth	r3, r3
    80ca:	8013      	strh	r3, [r2, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    80cc:	4b40      	ldr	r3, [pc, #256]	; (81d0 <socket+0x15c>)
    80ce:	58f3      	ldr	r3, [r6, r3]
    80d0:	9304      	str	r3, [sp, #16]
    80d2:	881b      	ldrh	r3, [r3, #0]
    80d4:	b29b      	uxth	r3, r3
    80d6:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    80d8:	483e      	ldr	r0, [pc, #248]	; (81d4 <socket+0x160>)
    80da:	4478      	add	r0, pc
    80dc:	4b3e      	ldr	r3, [pc, #248]	; (81d8 <socket+0x164>)
    80de:	58f5      	ldr	r5, [r6, r3]
    80e0:	47a8      	blx	r5
    80e2:	9b04      	ldr	r3, [sp, #16]
    80e4:	881a      	ldrh	r2, [r3, #0]
    80e6:	b292      	uxth	r2, r2
    80e8:	0039      	movs	r1, r7
    80ea:	483c      	ldr	r0, [pc, #240]	; (81dc <socket+0x168>)
    80ec:	4478      	add	r0, pc
    80ee:	47a8      	blx	r5
    80f0:	200d      	movs	r0, #13
    80f2:	4b3b      	ldr	r3, [pc, #236]	; (81e0 <socket+0x16c>)
    80f4:	58f3      	ldr	r3, [r6, r3]
    80f6:	9304      	str	r3, [sp, #16]
    80f8:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    80fa:	9b05      	ldr	r3, [sp, #20]
    80fc:	07db      	lsls	r3, r3, #31
    80fe:	d44f      	bmi.n	81a0 <socket+0x12c>
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    8100:	0038      	movs	r0, r7
    8102:	b008      	add	sp, #32
    8104:	bc04      	pop	{r2}
    8106:	4690      	mov	r8, r2
    8108:	bdf0      	pop	{r4, r5, r6, r7, pc}
					sock = (SOCKET)u8SockID;
    810a:	4643      	mov	r3, r8
    810c:	466a      	mov	r2, sp
    810e:	7413      	strb	r3, [r2, #16]
    8110:	2710      	movs	r7, #16
    8112:	57d7      	ldrsb	r7, [r2, r7]
					break;
    8114:	e7bf      	b.n	8096 <socket+0x22>
    8116:	2500      	movs	r5, #0
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    8118:	2d06      	cmp	r5, #6
    811a:	d81a      	bhi.n	8152 <socket+0xde>
				u8SockID	= u8NextTcpSock;
    811c:	4f31      	ldr	r7, [pc, #196]	; (81e4 <socket+0x170>)
    811e:	447f      	add	r7, pc
    8120:	783b      	ldrb	r3, [r7, #0]
    8122:	b2db      	uxtb	r3, r3
    8124:	4698      	mov	r8, r3
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8126:	783c      	ldrb	r4, [r7, #0]
    8128:	0124      	lsls	r4, r4, #4
    812a:	4b2f      	ldr	r3, [pc, #188]	; (81e8 <socket+0x174>)
    812c:	58f3      	ldr	r3, [r6, r3]
    812e:	9304      	str	r3, [sp, #16]
    8130:	469c      	mov	ip, r3
    8132:	4464      	add	r4, ip
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8134:	7838      	ldrb	r0, [r7, #0]
    8136:	3001      	adds	r0, #1
    8138:	4b2c      	ldr	r3, [pc, #176]	; (81ec <socket+0x178>)
    813a:	58f3      	ldr	r3, [r6, r3]
    813c:	9304      	str	r3, [sp, #16]
    813e:	2107      	movs	r1, #7
    8140:	4798      	blx	r3
    8142:	b2c9      	uxtb	r1, r1
    8144:	7039      	strb	r1, [r7, #0]
				if(!pstrSock->bIsUsed)
    8146:	7aa3      	ldrb	r3, [r4, #10]
    8148:	2b00      	cmp	r3, #0
    814a:	d0de      	beq.n	810a <socket+0x96>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    814c:	3501      	adds	r5, #1
    814e:	b2ed      	uxtb	r5, r5
    8150:	e7e2      	b.n	8118 <socket+0xa4>
	SOCKET					sock = -1;
    8152:	2701      	movs	r7, #1
    8154:	427f      	negs	r7, r7
    8156:	e79e      	b.n	8096 <socket+0x22>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    8158:	3507      	adds	r5, #7
    815a:	b26f      	sxtb	r7, r5
					break;
    815c:	e79b      	b.n	8096 <socket+0x22>
    815e:	2100      	movs	r1, #0
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8160:	2903      	cmp	r1, #3
    8162:	d81a      	bhi.n	819a <socket+0x126>
				u8SockID		= u8NextUdpSock;
    8164:	4822      	ldr	r0, [pc, #136]	; (81f0 <socket+0x17c>)
    8166:	4478      	add	r0, pc
    8168:	7805      	ldrb	r5, [r0, #0]
    816a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    816c:	7804      	ldrb	r4, [r0, #0]
    816e:	0124      	lsls	r4, r4, #4
    8170:	4b1d      	ldr	r3, [pc, #116]	; (81e8 <socket+0x174>)
    8172:	58f3      	ldr	r3, [r6, r3]
    8174:	9304      	str	r3, [sp, #16]
    8176:	3370      	adds	r3, #112	; 0x70
    8178:	18e4      	adds	r4, r4, r3
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    817a:	7803      	ldrb	r3, [r0, #0]
    817c:	3301      	adds	r3, #1
    817e:	17df      	asrs	r7, r3, #31
    8180:	0fbf      	lsrs	r7, r7, #30
    8182:	19da      	adds	r2, r3, r7
    8184:	2303      	movs	r3, #3
    8186:	4013      	ands	r3, r2
    8188:	1bdb      	subs	r3, r3, r7
    818a:	b2db      	uxtb	r3, r3
    818c:	7003      	strb	r3, [r0, #0]
				if(!pstrSock->bIsUsed)
    818e:	7aa3      	ldrb	r3, [r4, #10]
    8190:	2b00      	cmp	r3, #0
    8192:	d0e1      	beq.n	8158 <socket+0xe4>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8194:	3101      	adds	r1, #1
    8196:	b2c9      	uxtb	r1, r1
    8198:	e7e2      	b.n	8160 <socket+0xec>
	SOCKET					sock = -1;
    819a:	2701      	movs	r7, #1
    819c:	427f      	negs	r7, r7
    819e:	e77a      	b.n	8096 <socket+0x22>
				strSSLCreate.sslSock = sock;
    81a0:	aa07      	add	r2, sp, #28
    81a2:	7017      	strb	r7, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    81a4:	2321      	movs	r3, #33	; 0x21
    81a6:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    81a8:	2300      	movs	r3, #0
    81aa:	9302      	str	r3, [sp, #8]
    81ac:	9301      	str	r3, [sp, #4]
    81ae:	9300      	str	r3, [sp, #0]
    81b0:	3304      	adds	r3, #4
    81b2:	2150      	movs	r1, #80	; 0x50
    81b4:	2002      	movs	r0, #2
    81b6:	4c0f      	ldr	r4, [pc, #60]	; (81f4 <socket+0x180>)
    81b8:	5934      	ldr	r4, [r6, r4]
    81ba:	9404      	str	r4, [sp, #16]
    81bc:	47a0      	blx	r4
    81be:	e79f      	b.n	8100 <socket+0x8c>
	SOCKET					sock = -1;
    81c0:	2701      	movs	r7, #1
    81c2:	427f      	negs	r7, r7
    81c4:	e79c      	b.n	8100 <socket+0x8c>
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	0000a90c 	.word	0x0000a90c
    81cc:	000001b8 	.word	0x000001b8
    81d0:	000003a4 	.word	0x000003a4
    81d4:	00009b82 	.word	0x00009b82
    81d8:	0000003c 	.word	0x0000003c
    81dc:	0000a658 	.word	0x0000a658
    81e0:	00000000 	.word	0x00000000
    81e4:	1fff8802 	.word	0x1fff8802
    81e8:	0000038c 	.word	0x0000038c
    81ec:	000004c4 	.word	0x000004c4
    81f0:	1fff87bb 	.word	0x1fff87bb
    81f4:	00000318 	.word	0x00000318

000081f8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    81f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    81fa:	b08b      	sub	sp, #44	; 0x2c
    81fc:	0004      	movs	r4, r0
    81fe:	4d2b      	ldr	r5, [pc, #172]	; (82ac <connect+0xb4>)
    8200:	447d      	add	r5, pc
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    8202:	2800      	cmp	r0, #0
    8204:	db46      	blt.n	8294 <connect+0x9c>
    8206:	2900      	cmp	r1, #0
    8208:	d047      	beq.n	829a <connect+0xa2>
    820a:	4b29      	ldr	r3, [pc, #164]	; (82b0 <connect+0xb8>)
    820c:	58eb      	ldr	r3, [r5, r3]
    820e:	9305      	str	r3, [sp, #20]
    8210:	0103      	lsls	r3, r0, #4
    8212:	9805      	ldr	r0, [sp, #20]
    8214:	4684      	mov	ip, r0
    8216:	4463      	add	r3, ip
    8218:	7a9b      	ldrb	r3, [r3, #10]
    821a:	2b01      	cmp	r3, #1
    821c:	d140      	bne.n	82a0 <connect+0xa8>
    821e:	2a00      	cmp	r2, #0
    8220:	d041      	beq.n	82a6 <connect+0xae>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8222:	4b23      	ldr	r3, [pc, #140]	; (82b0 <connect+0xb8>)
    8224:	58eb      	ldr	r3, [r5, r3]
    8226:	9305      	str	r3, [sp, #20]
    8228:	0123      	lsls	r3, r4, #4
    822a:	9a05      	ldr	r2, [sp, #20]
    822c:	4694      	mov	ip, r2
    822e:	4463      	add	r3, ip
    8230:	7adb      	ldrb	r3, [r3, #11]
    8232:	07db      	lsls	r3, r3, #31
    8234:	d50b      	bpl.n	824e <connect+0x56>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    8236:	4b1e      	ldr	r3, [pc, #120]	; (82b0 <connect+0xb8>)
    8238:	58eb      	ldr	r3, [r5, r3]
    823a:	9305      	str	r3, [sp, #20]
    823c:	0123      	lsls	r3, r4, #4
    823e:	9a05      	ldr	r2, [sp, #20]
    8240:	4694      	mov	ip, r2
    8242:	4463      	add	r3, ip
    8244:	7ada      	ldrb	r2, [r3, #11]
    8246:	ab07      	add	r3, sp, #28
    8248:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    824a:	264b      	movs	r6, #75	; 0x4b
    824c:	e000      	b.n	8250 <connect+0x58>
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    824e:	2644      	movs	r6, #68	; 0x44
		}
		strConnect.sock = sock;
    8250:	af07      	add	r7, sp, #28
    8252:	723c      	strb	r4, [r7, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    8254:	2208      	movs	r2, #8
    8256:	0038      	movs	r0, r7
    8258:	4b16      	ldr	r3, [pc, #88]	; (82b4 <connect+0xbc>)
    825a:	58eb      	ldr	r3, [r5, r3]
    825c:	9305      	str	r3, [sp, #20]
    825e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    8260:	4b13      	ldr	r3, [pc, #76]	; (82b0 <connect+0xb8>)
    8262:	58eb      	ldr	r3, [r5, r3]
    8264:	9305      	str	r3, [sp, #20]
    8266:	0124      	lsls	r4, r4, #4
    8268:	469c      	mov	ip, r3
    826a:	4464      	add	r4, ip
    826c:	88e3      	ldrh	r3, [r4, #6]
    826e:	817b      	strh	r3, [r7, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8270:	2300      	movs	r3, #0
    8272:	9302      	str	r3, [sp, #8]
    8274:	9301      	str	r3, [sp, #4]
    8276:	9300      	str	r3, [sp, #0]
    8278:	330c      	adds	r3, #12
    827a:	003a      	movs	r2, r7
    827c:	0031      	movs	r1, r6
    827e:	2002      	movs	r0, #2
    8280:	4c0d      	ldr	r4, [pc, #52]	; (82b8 <connect+0xc0>)
    8282:	592c      	ldr	r4, [r5, r4]
    8284:	9405      	str	r4, [sp, #20]
    8286:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8288:	2800      	cmp	r0, #0
    828a:	d001      	beq.n	8290 <connect+0x98>
		{
			s8Ret = SOCK_ERR_INVALID;
    828c:	2009      	movs	r0, #9
    828e:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    8290:	b00b      	add	sp, #44	; 0x2c
    8292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8294:	2006      	movs	r0, #6
    8296:	4240      	negs	r0, r0
    8298:	e7fa      	b.n	8290 <connect+0x98>
    829a:	2006      	movs	r0, #6
    829c:	4240      	negs	r0, r0
    829e:	e7f7      	b.n	8290 <connect+0x98>
    82a0:	2006      	movs	r0, #6
    82a2:	4240      	negs	r0, r0
    82a4:	e7f4      	b.n	8290 <connect+0x98>
    82a6:	2006      	movs	r0, #6
    82a8:	4240      	negs	r0, r0
    82aa:	e7f1      	b.n	8290 <connect+0x98>
    82ac:	0000a78c 	.word	0x0000a78c
    82b0:	0000038c 	.word	0x0000038c
    82b4:	000004e4 	.word	0x000004e4
    82b8:	00000318 	.word	0x00000318

000082bc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    82bc:	b570      	push	{r4, r5, r6, lr}
    82be:	b08a      	sub	sp, #40	; 0x28
    82c0:	4c2d      	ldr	r4, [pc, #180]	; (8378 <send+0xbc>)
    82c2:	447c      	add	r4, pc
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    82c4:	2800      	cmp	r0, #0
    82c6:	db4b      	blt.n	8360 <send+0xa4>
    82c8:	2900      	cmp	r1, #0
    82ca:	d04c      	beq.n	8366 <send+0xaa>
    82cc:	23af      	movs	r3, #175	; 0xaf
    82ce:	00db      	lsls	r3, r3, #3
    82d0:	429a      	cmp	r2, r3
    82d2:	d84b      	bhi.n	836c <send+0xb0>
    82d4:	4b29      	ldr	r3, [pc, #164]	; (837c <send+0xc0>)
    82d6:	58e3      	ldr	r3, [r4, r3]
    82d8:	9305      	str	r3, [sp, #20]
    82da:	0103      	lsls	r3, r0, #4
    82dc:	9d05      	ldr	r5, [sp, #20]
    82de:	46ac      	mov	ip, r5
    82e0:	4463      	add	r3, ip
    82e2:	7a9b      	ldrb	r3, [r3, #10]
    82e4:	2b01      	cmp	r3, #1
    82e6:	d144      	bne.n	8372 <send+0xb6>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    82e8:	ab06      	add	r3, sp, #24
    82ea:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    82ec:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    82ee:	4d23      	ldr	r5, [pc, #140]	; (837c <send+0xc0>)
    82f0:	5965      	ldr	r5, [r4, r5]
    82f2:	9505      	str	r5, [sp, #20]
    82f4:	0105      	lsls	r5, r0, #4
    82f6:	9e05      	ldr	r6, [sp, #20]
    82f8:	46b4      	mov	ip, r6
    82fa:	4465      	add	r5, ip
    82fc:	88ed      	ldrh	r5, [r5, #6]
    82fe:	819d      	strh	r5, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    8300:	2806      	cmp	r0, #6
    8302:	dc14      	bgt.n	832e <send+0x72>
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    8304:	2550      	movs	r5, #80	; 0x50
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8306:	4b1d      	ldr	r3, [pc, #116]	; (837c <send+0xc0>)
    8308:	58e3      	ldr	r3, [r4, r3]
    830a:	9305      	str	r3, [sp, #20]
    830c:	0103      	lsls	r3, r0, #4
    830e:	9e05      	ldr	r6, [sp, #20]
    8310:	46b4      	mov	ip, r6
    8312:	4463      	add	r3, ip
    8314:	7adb      	ldrb	r3, [r3, #11]
    8316:	07db      	lsls	r3, r3, #31
    8318:	d50b      	bpl.n	8332 <send+0x76>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    831a:	4b18      	ldr	r3, [pc, #96]	; (837c <send+0xc0>)
    831c:	58e3      	ldr	r3, [r4, r3]
    831e:	9305      	str	r3, [sp, #20]
    8320:	0100      	lsls	r0, r0, #4
    8322:	469c      	mov	ip, r3
    8324:	4460      	add	r0, ip
    8326:	8905      	ldrh	r5, [r0, #8]
    8328:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    832a:	234c      	movs	r3, #76	; 0x4c
    832c:	e002      	b.n	8334 <send+0x78>
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    832e:	2544      	movs	r5, #68	; 0x44
    8330:	e7e9      	b.n	8306 <send+0x4a>
		u8Cmd			= SOCKET_CMD_SEND;
    8332:	2345      	movs	r3, #69	; 0x45
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    8334:	2080      	movs	r0, #128	; 0x80
    8336:	4240      	negs	r0, r0
    8338:	4318      	orrs	r0, r3
    833a:	b2c0      	uxtb	r0, r0
    833c:	9502      	str	r5, [sp, #8]
    833e:	9201      	str	r2, [sp, #4]
    8340:	9100      	str	r1, [sp, #0]
    8342:	2310      	movs	r3, #16
    8344:	aa06      	add	r2, sp, #24
    8346:	0001      	movs	r1, r0
    8348:	2002      	movs	r0, #2
    834a:	4d0d      	ldr	r5, [pc, #52]	; (8380 <send+0xc4>)
    834c:	5964      	ldr	r4, [r4, r5]
    834e:	9405      	str	r4, [sp, #20]
    8350:	47a0      	blx	r4
    8352:	b200      	sxth	r0, r0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    8354:	2800      	cmp	r0, #0
    8356:	d001      	beq.n	835c <send+0xa0>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    8358:	200e      	movs	r0, #14
    835a:	4240      	negs	r0, r0
		}
	}
	return s16Ret;
}
    835c:	b00a      	add	sp, #40	; 0x28
    835e:	bd70      	pop	{r4, r5, r6, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8360:	2006      	movs	r0, #6
    8362:	4240      	negs	r0, r0
    8364:	e7fa      	b.n	835c <send+0xa0>
    8366:	2006      	movs	r0, #6
    8368:	4240      	negs	r0, r0
    836a:	e7f7      	b.n	835c <send+0xa0>
    836c:	2006      	movs	r0, #6
    836e:	4240      	negs	r0, r0
    8370:	e7f4      	b.n	835c <send+0xa0>
    8372:	2006      	movs	r0, #6
    8374:	4240      	negs	r0, r0
    8376:	e7f1      	b.n	835c <send+0xa0>
    8378:	0000a6ca 	.word	0x0000a6ca
    837c:	0000038c 	.word	0x0000038c
    8380:	00000318 	.word	0x00000318

00008384 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    8384:	b570      	push	{r4, r5, r6, lr}
    8386:	b088      	sub	sp, #32
    8388:	4c2c      	ldr	r4, [pc, #176]	; (843c <recv+0xb8>)
    838a:	447c      	add	r4, pc
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    838c:	2800      	cmp	r0, #0
    838e:	db45      	blt.n	841c <recv+0x98>
    8390:	2900      	cmp	r1, #0
    8392:	d046      	beq.n	8422 <recv+0x9e>
    8394:	2a00      	cmp	r2, #0
    8396:	d047      	beq.n	8428 <recv+0xa4>
    8398:	4d29      	ldr	r5, [pc, #164]	; (8440 <recv+0xbc>)
    839a:	5965      	ldr	r5, [r4, r5]
    839c:	9505      	str	r5, [sp, #20]
    839e:	0105      	lsls	r5, r0, #4
    83a0:	9e05      	ldr	r6, [sp, #20]
    83a2:	46b4      	mov	ip, r6
    83a4:	4465      	add	r5, ip
    83a6:	7aad      	ldrb	r5, [r5, #10]
    83a8:	2d01      	cmp	r5, #1
    83aa:	d140      	bne.n	842e <recv+0xaa>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    83ac:	4d24      	ldr	r5, [pc, #144]	; (8440 <recv+0xbc>)
    83ae:	5965      	ldr	r5, [r4, r5]
    83b0:	0106      	lsls	r6, r0, #4
    83b2:	5171      	str	r1, [r6, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    83b4:	19ad      	adds	r5, r5, r6
    83b6:	80aa      	strh	r2, [r5, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    83b8:	7b2a      	ldrb	r2, [r5, #12]
    83ba:	2a00      	cmp	r2, #0
    83bc:	d13a      	bne.n	8434 <recv+0xb0>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    83be:	4a20      	ldr	r2, [pc, #128]	; (8440 <recv+0xbc>)
    83c0:	58a2      	ldr	r2, [r4, r2]
    83c2:	9205      	str	r2, [sp, #20]
    83c4:	0032      	movs	r2, r6
    83c6:	9905      	ldr	r1, [sp, #20]
    83c8:	468c      	mov	ip, r1
    83ca:	4462      	add	r2, ip
    83cc:	2101      	movs	r1, #1
    83ce:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    83d0:	7ad2      	ldrb	r2, [r2, #11]
    83d2:	07d2      	lsls	r2, r2, #31
    83d4:	d41e      	bmi.n	8414 <recv+0x90>
			uint8		u8Cmd = SOCKET_CMD_RECV;
    83d6:	3145      	adds	r1, #69	; 0x45
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    83d8:	2b00      	cmp	r3, #0
    83da:	d11d      	bne.n	8418 <recv+0x94>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    83dc:	3b01      	subs	r3, #1
    83de:	9306      	str	r3, [sp, #24]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    83e0:	aa06      	add	r2, sp, #24
    83e2:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    83e4:	4b16      	ldr	r3, [pc, #88]	; (8440 <recv+0xbc>)
    83e6:	58e3      	ldr	r3, [r4, r3]
    83e8:	9305      	str	r3, [sp, #20]
    83ea:	0100      	lsls	r0, r0, #4
    83ec:	469c      	mov	ip, r3
    83ee:	4460      	add	r0, ip
    83f0:	88c3      	ldrh	r3, [r0, #6]
    83f2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    83f4:	2300      	movs	r3, #0
    83f6:	9302      	str	r3, [sp, #8]
    83f8:	9301      	str	r3, [sp, #4]
    83fa:	9300      	str	r3, [sp, #0]
    83fc:	3308      	adds	r3, #8
    83fe:	2002      	movs	r0, #2
    8400:	4d10      	ldr	r5, [pc, #64]	; (8444 <recv+0xc0>)
    8402:	5964      	ldr	r4, [r4, r5]
    8404:	9405      	str	r4, [sp, #20]
    8406:	47a0      	blx	r4
    8408:	b200      	sxth	r0, r0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    840a:	2800      	cmp	r0, #0
    840c:	d013      	beq.n	8436 <recv+0xb2>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    840e:	200e      	movs	r0, #14
    8410:	4240      	negs	r0, r0
    8412:	e010      	b.n	8436 <recv+0xb2>
				u8Cmd = SOCKET_CMD_SSL_RECV;
    8414:	214d      	movs	r1, #77	; 0x4d
    8416:	e7df      	b.n	83d8 <recv+0x54>
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    8418:	9306      	str	r3, [sp, #24]
    841a:	e7e1      	b.n	83e0 <recv+0x5c>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    841c:	2006      	movs	r0, #6
    841e:	4240      	negs	r0, r0
    8420:	e009      	b.n	8436 <recv+0xb2>
    8422:	2006      	movs	r0, #6
    8424:	4240      	negs	r0, r0
    8426:	e006      	b.n	8436 <recv+0xb2>
    8428:	2006      	movs	r0, #6
    842a:	4240      	negs	r0, r0
    842c:	e003      	b.n	8436 <recv+0xb2>
    842e:	2006      	movs	r0, #6
    8430:	4240      	negs	r0, r0
    8432:	e000      	b.n	8436 <recv+0xb2>
		s16Ret = SOCK_ERR_NO_ERROR;
    8434:	2000      	movs	r0, #0
			}
		}
	}
	return s16Ret;
}
    8436:	b008      	add	sp, #32
    8438:	bd70      	pop	{r4, r5, r6, pc}
    843a:	46c0      	nop			; (mov r8, r8)
    843c:	0000a602 	.word	0x0000a602
    8440:	0000038c 	.word	0x0000038c
    8444:	00000318 	.word	0x00000318

00008448 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    8448:	b570      	push	{r4, r5, r6, lr}
    844a:	b088      	sub	sp, #32
    844c:	0004      	movs	r4, r0
    844e:	4e29      	ldr	r6, [pc, #164]	; (84f4 <close+0xac>)
    8450:	447e      	add	r6, pc
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    8452:	4829      	ldr	r0, [pc, #164]	; (84f8 <close+0xb0>)
    8454:	4478      	add	r0, pc
    8456:	4b29      	ldr	r3, [pc, #164]	; (84fc <close+0xb4>)
    8458:	58f5      	ldr	r5, [r6, r3]
    845a:	47a8      	blx	r5
    845c:	0021      	movs	r1, r4
    845e:	4828      	ldr	r0, [pc, #160]	; (8500 <close+0xb8>)
    8460:	4478      	add	r0, pc
    8462:	47a8      	blx	r5
    8464:	200d      	movs	r0, #13
    8466:	4b27      	ldr	r3, [pc, #156]	; (8504 <close+0xbc>)
    8468:	58f3      	ldr	r3, [r6, r3]
    846a:	9305      	str	r3, [sp, #20]
    846c:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    846e:	2c00      	cmp	r4, #0
    8470:	db3a      	blt.n	84e8 <close+0xa0>
    8472:	4b25      	ldr	r3, [pc, #148]	; (8508 <close+0xc0>)
    8474:	58f3      	ldr	r3, [r6, r3]
    8476:	9305      	str	r3, [sp, #20]
    8478:	0123      	lsls	r3, r4, #4
    847a:	9a05      	ldr	r2, [sp, #20]
    847c:	4694      	mov	ip, r2
    847e:	4463      	add	r3, ip
    8480:	7a9b      	ldrb	r3, [r3, #10]
    8482:	2b01      	cmp	r3, #1
    8484:	d133      	bne.n	84ee <close+0xa6>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    8486:	aa07      	add	r2, sp, #28
    8488:	7014      	strb	r4, [r2, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    848a:	4b1f      	ldr	r3, [pc, #124]	; (8508 <close+0xc0>)
    848c:	58f3      	ldr	r3, [r6, r3]
    848e:	9305      	str	r3, [sp, #20]
    8490:	0123      	lsls	r3, r4, #4
    8492:	9905      	ldr	r1, [sp, #20]
    8494:	468c      	mov	ip, r1
    8496:	4463      	add	r3, ip
    8498:	88d9      	ldrh	r1, [r3, #6]
    849a:	8051      	strh	r1, [r2, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    849c:	2200      	movs	r2, #0
    849e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    84a0:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    84a2:	7adb      	ldrb	r3, [r3, #11]
    84a4:	07db      	lsls	r3, r3, #31
    84a6:	d41d      	bmi.n	84e4 <close+0x9c>
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    84a8:	2149      	movs	r1, #73	; 0x49
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    84aa:	2300      	movs	r3, #0
    84ac:	9302      	str	r3, [sp, #8]
    84ae:	9301      	str	r3, [sp, #4]
    84b0:	9300      	str	r3, [sp, #0]
    84b2:	3304      	adds	r3, #4
    84b4:	aa07      	add	r2, sp, #28
    84b6:	2002      	movs	r0, #2
    84b8:	4d14      	ldr	r5, [pc, #80]	; (850c <close+0xc4>)
    84ba:	5975      	ldr	r5, [r6, r5]
    84bc:	9505      	str	r5, [sp, #20]
    84be:	47a8      	blx	r5
    84c0:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    84c2:	d001      	beq.n	84c8 <close+0x80>
		{
			s8Ret = SOCK_ERR_INVALID;
    84c4:	2509      	movs	r5, #9
    84c6:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    84c8:	0124      	lsls	r4, r4, #4
    84ca:	4b0f      	ldr	r3, [pc, #60]	; (8508 <close+0xc0>)
    84cc:	58f3      	ldr	r3, [r6, r3]
    84ce:	9305      	str	r3, [sp, #20]
    84d0:	18e0      	adds	r0, r4, r3
    84d2:	2210      	movs	r2, #16
    84d4:	2100      	movs	r1, #0
    84d6:	4b0e      	ldr	r3, [pc, #56]	; (8510 <close+0xc8>)
    84d8:	58f3      	ldr	r3, [r6, r3]
    84da:	9305      	str	r3, [sp, #20]
    84dc:	4798      	blx	r3
	}
	return s8Ret;
}
    84de:	0028      	movs	r0, r5
    84e0:	b008      	add	sp, #32
    84e2:	bd70      	pop	{r4, r5, r6, pc}
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    84e4:	214e      	movs	r1, #78	; 0x4e
    84e6:	e7e0      	b.n	84aa <close+0x62>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    84e8:	2506      	movs	r5, #6
    84ea:	426d      	negs	r5, r5
    84ec:	e7f7      	b.n	84de <close+0x96>
    84ee:	2506      	movs	r5, #6
    84f0:	426d      	negs	r5, r5
    84f2:	e7f4      	b.n	84de <close+0x96>
    84f4:	0000a53c 	.word	0x0000a53c
    84f8:	00009808 	.word	0x00009808
    84fc:	0000003c 	.word	0x0000003c
    8500:	0000a2cc 	.word	0x0000a2cc
    8504:	00000000 	.word	0x00000000
    8508:	0000038c 	.word	0x0000038c
    850c:	00000318 	.word	0x00000318
    8510:	000001b8 	.word	0x000001b8

00008514 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    8514:	b570      	push	{r4, r5, r6, lr}
    8516:	b084      	sub	sp, #16
    8518:	4c1c      	ldr	r4, [pc, #112]	; (858c <nmi_inet_addr+0x78>)
    851a:	447c      	add	r4, pc
	uint8	tmp;
	uint32	u32IP = 0;
    851c:	2300      	movs	r3, #0
    851e:	9303      	str	r3, [sp, #12]
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    8520:	2600      	movs	r6, #0
	tmp = 0;
    8522:	2200      	movs	r2, #0
	for(i = 0; i < 4; ++i)
    8524:	2e03      	cmp	r6, #3
    8526:	d823      	bhi.n	8570 <nmi_inet_addr+0x5c>
    8528:	2300      	movs	r3, #0
    852a:	e007      	b.n	853c <nmi_inet_addr+0x28>
			{
				return 0;
			}
			if(c == '.' || c == 0)
			{
				au8IP[i] = tmp;
    852c:	a902      	add	r1, sp, #8
    852e:	558a      	strb	r2, [r1, r6]
				tmp = 0;
    8530:	2200      	movs	r2, #0
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    8532:	3001      	adds	r0, #1
		} while(c != '.' && c != 0);
    8534:	2d2e      	cmp	r5, #46	; 0x2e
    8536:	d018      	beq.n	856a <nmi_inet_addr+0x56>
    8538:	2d00      	cmp	r5, #0
    853a:	d016      	beq.n	856a <nmi_inet_addr+0x56>
			c = *pcIpAddr;
    853c:	7805      	ldrb	r5, [r0, #0]
			++j;
    853e:	3301      	adds	r3, #1
    8540:	b2db      	uxtb	r3, r3
			if(j > 4)
    8542:	2b04      	cmp	r3, #4
    8544:	d81d      	bhi.n	8582 <nmi_inet_addr+0x6e>
			if(c == '.' || c == 0)
    8546:	2d2e      	cmp	r5, #46	; 0x2e
    8548:	d0f0      	beq.n	852c <nmi_inet_addr+0x18>
    854a:	2d00      	cmp	r5, #0
    854c:	d0ee      	beq.n	852c <nmi_inet_addr+0x18>
			else if(c >= '0' && c <= '9')
    854e:	0029      	movs	r1, r5
    8550:	3930      	subs	r1, #48	; 0x30
    8552:	b2c9      	uxtb	r1, r1
    8554:	2909      	cmp	r1, #9
    8556:	d817      	bhi.n	8588 <nmi_inet_addr+0x74>
				tmp = (tmp * 10) + (c - '0');
    8558:	0091      	lsls	r1, r2, #2
    855a:	1851      	adds	r1, r2, r1
    855c:	004a      	lsls	r2, r1, #1
    855e:	b2d2      	uxtb	r2, r2
    8560:	18aa      	adds	r2, r5, r2
    8562:	b2d2      	uxtb	r2, r2
    8564:	3a30      	subs	r2, #48	; 0x30
    8566:	b2d2      	uxtb	r2, r2
    8568:	e7e3      	b.n	8532 <nmi_inet_addr+0x1e>
	for(i = 0; i < 4; ++i)
    856a:	3601      	adds	r6, #1
    856c:	b2f6      	uxtb	r6, r6
    856e:	e7d9      	b.n	8524 <nmi_inet_addr+0x10>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    8570:	2204      	movs	r2, #4
    8572:	a902      	add	r1, sp, #8
    8574:	a803      	add	r0, sp, #12
    8576:	4b06      	ldr	r3, [pc, #24]	; (8590 <nmi_inet_addr+0x7c>)
    8578:	58e3      	ldr	r3, [r4, r3]
    857a:	9301      	str	r3, [sp, #4]
    857c:	4798      	blx	r3
	return u32IP;
    857e:	9803      	ldr	r0, [sp, #12]
    8580:	e000      	b.n	8584 <nmi_inet_addr+0x70>
				return 0;
    8582:	2000      	movs	r0, #0
}
    8584:	b004      	add	sp, #16
    8586:	bd70      	pop	{r4, r5, r6, pc}
				return 0;
    8588:	2000      	movs	r0, #0
    858a:	e7fb      	b.n	8584 <nmi_inet_addr+0x70>
    858c:	0000a472 	.word	0x0000a472
    8590:	000004e4 	.word	0x000004e4

00008594 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8594:	b530      	push	{r4, r5, lr}
    8596:	b087      	sub	sp, #28
    8598:	0004      	movs	r4, r0
    859a:	4d0e      	ldr	r5, [pc, #56]	; (85d4 <gethostbyname+0x40>)
    859c:	447d      	add	r5, pc
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    859e:	4b0e      	ldr	r3, [pc, #56]	; (85d8 <gethostbyname+0x44>)
    85a0:	58eb      	ldr	r3, [r5, r3]
    85a2:	9305      	str	r3, [sp, #20]
    85a4:	4798      	blx	r3
    85a6:	b2c3      	uxtb	r3, r0
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    85a8:	2b40      	cmp	r3, #64	; 0x40
    85aa:	d80f      	bhi.n	85cc <gethostbyname+0x38>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    85ac:	23ff      	movs	r3, #255	; 0xff
    85ae:	4003      	ands	r3, r0
    85b0:	3301      	adds	r3, #1
    85b2:	2200      	movs	r2, #0
    85b4:	9202      	str	r2, [sp, #8]
    85b6:	9201      	str	r2, [sp, #4]
    85b8:	9200      	str	r2, [sp, #0]
    85ba:	0022      	movs	r2, r4
    85bc:	214a      	movs	r1, #74	; 0x4a
    85be:	2002      	movs	r0, #2
    85c0:	4c06      	ldr	r4, [pc, #24]	; (85dc <gethostbyname+0x48>)
    85c2:	592c      	ldr	r4, [r5, r4]
    85c4:	9405      	str	r4, [sp, #20]
    85c6:	47a0      	blx	r4
	}
	return s8Err;
}
    85c8:	b007      	add	sp, #28
    85ca:	bd30      	pop	{r4, r5, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    85cc:	2006      	movs	r0, #6
    85ce:	4240      	negs	r0, r0
    85d0:	e7fa      	b.n	85c8 <gethostbyname+0x34>
    85d2:	46c0      	nop			; (mov r8, r8)
    85d4:	0000a3f0 	.word	0x0000a3f0
    85d8:	000002d8 	.word	0x000002d8
    85dc:	00000318 	.word	0x00000318

000085e0 <spi_flash_leave_low_power_mode>:
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
}


static void spi_flash_leave_low_power_mode(void) {
    85e0:	b570      	push	{r4, r5, r6, lr}
    85e2:	b084      	sub	sp, #16
    85e4:	4c0f      	ldr	r4, [pc, #60]	; (8624 <spi_flash_leave_low_power_mode+0x44>)
    85e6:	447c      	add	r4, pc
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;
    85e8:	23ab      	movs	r3, #171	; 0xab
    85ea:	ae03      	add	r6, sp, #12
    85ec:	7033      	strb	r3, [r6, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    85ee:	2100      	movs	r1, #0
    85f0:	480d      	ldr	r0, [pc, #52]	; (8628 <spi_flash_leave_low_power_mode+0x48>)
    85f2:	4b0e      	ldr	r3, [pc, #56]	; (862c <spi_flash_leave_low_power_mode+0x4c>)
    85f4:	58e5      	ldr	r5, [r4, r3]
    85f6:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    85f8:	7831      	ldrb	r1, [r6, #0]
    85fa:	480d      	ldr	r0, [pc, #52]	; (8630 <spi_flash_leave_low_power_mode+0x50>)
    85fc:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    85fe:	2101      	movs	r1, #1
    8600:	480c      	ldr	r0, [pc, #48]	; (8634 <spi_flash_leave_low_power_mode+0x54>)
    8602:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8604:	2100      	movs	r1, #0
    8606:	480c      	ldr	r0, [pc, #48]	; (8638 <spi_flash_leave_low_power_mode+0x58>)
    8608:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    860a:	2181      	movs	r1, #129	; 0x81
    860c:	480b      	ldr	r0, [pc, #44]	; (863c <spi_flash_leave_low_power_mode+0x5c>)
    860e:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8610:	480b      	ldr	r0, [pc, #44]	; (8640 <spi_flash_leave_low_power_mode+0x60>)
    8612:	4b0c      	ldr	r3, [pc, #48]	; (8644 <spi_flash_leave_low_power_mode+0x64>)
    8614:	58e3      	ldr	r3, [r4, r3]
    8616:	9301      	str	r3, [sp, #4]
    8618:	4798      	blx	r3
    861a:	2801      	cmp	r0, #1
    861c:	d1f8      	bne.n	8610 <spi_flash_leave_low_power_mode+0x30>
}
    861e:	b004      	add	sp, #16
    8620:	bd70      	pop	{r4, r5, r6, pc}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	0000a3a6 	.word	0x0000a3a6
    8628:	00010208 	.word	0x00010208
    862c:	000003c4 	.word	0x000003c4
    8630:	0001020c 	.word	0x0001020c
    8634:	00010214 	.word	0x00010214
    8638:	0001021c 	.word	0x0001021c
    863c:	00010204 	.word	0x00010204
    8640:	00010218 	.word	0x00010218
    8644:	000001c0 	.word	0x000001c0

00008648 <spi_flash_enter_low_power_mode>:
static void spi_flash_enter_low_power_mode(void) {
    8648:	b570      	push	{r4, r5, r6, lr}
    864a:	b084      	sub	sp, #16
    864c:	4c0f      	ldr	r4, [pc, #60]	; (868c <spi_flash_enter_low_power_mode+0x44>)
    864e:	447c      	add	r4, pc
	cmd[0] = 0xb9;
    8650:	23b9      	movs	r3, #185	; 0xb9
    8652:	ae03      	add	r6, sp, #12
    8654:	7033      	strb	r3, [r6, #0]
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8656:	2100      	movs	r1, #0
    8658:	480d      	ldr	r0, [pc, #52]	; (8690 <spi_flash_enter_low_power_mode+0x48>)
    865a:	4b0e      	ldr	r3, [pc, #56]	; (8694 <spi_flash_enter_low_power_mode+0x4c>)
    865c:	58e5      	ldr	r5, [r4, r3]
    865e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8660:	7831      	ldrb	r1, [r6, #0]
    8662:	480d      	ldr	r0, [pc, #52]	; (8698 <spi_flash_enter_low_power_mode+0x50>)
    8664:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8666:	2101      	movs	r1, #1
    8668:	480c      	ldr	r0, [pc, #48]	; (869c <spi_flash_enter_low_power_mode+0x54>)
    866a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    866c:	2100      	movs	r1, #0
    866e:	480c      	ldr	r0, [pc, #48]	; (86a0 <spi_flash_enter_low_power_mode+0x58>)
    8670:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8672:	2181      	movs	r1, #129	; 0x81
    8674:	480b      	ldr	r0, [pc, #44]	; (86a4 <spi_flash_enter_low_power_mode+0x5c>)
    8676:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8678:	480b      	ldr	r0, [pc, #44]	; (86a8 <spi_flash_enter_low_power_mode+0x60>)
    867a:	4b0c      	ldr	r3, [pc, #48]	; (86ac <spi_flash_enter_low_power_mode+0x64>)
    867c:	58e3      	ldr	r3, [r4, r3]
    867e:	9301      	str	r3, [sp, #4]
    8680:	4798      	blx	r3
    8682:	2801      	cmp	r0, #1
    8684:	d1f8      	bne.n	8678 <spi_flash_enter_low_power_mode+0x30>
}
    8686:	b004      	add	sp, #16
    8688:	bd70      	pop	{r4, r5, r6, pc}
    868a:	46c0      	nop			; (mov r8, r8)
    868c:	0000a33e 	.word	0x0000a33e
    8690:	00010208 	.word	0x00010208
    8694:	000003c4 	.word	0x000003c4
    8698:	0001020c 	.word	0x0001020c
    869c:	00010214 	.word	0x00010214
    86a0:	0001021c 	.word	0x0001021c
    86a4:	00010204 	.word	0x00010204
    86a8:	00010218 	.word	0x00010218
    86ac:	000001c0 	.word	0x000001c0

000086b0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    86b0:	b570      	push	{r4, r5, r6, lr}
    86b2:	b084      	sub	sp, #16
    86b4:	0004      	movs	r4, r0
    86b6:	4d1c      	ldr	r5, [pc, #112]	; (8728 <spi_flash_enable+0x78>)
    86b8:	447d      	add	r5, pc
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    86ba:	4b1c      	ldr	r3, [pc, #112]	; (872c <spi_flash_enable+0x7c>)
    86bc:	58eb      	ldr	r3, [r5, r3]
    86be:	9301      	str	r3, [sp, #4]
    86c0:	4798      	blx	r3
    86c2:	0500      	lsls	r0, r0, #20
    86c4:	0d00      	lsrs	r0, r0, #20
    86c6:	4b1a      	ldr	r3, [pc, #104]	; (8730 <spi_flash_enable+0x80>)
    86c8:	4298      	cmp	r0, r3
    86ca:	d803      	bhi.n	86d4 <spi_flash_enable+0x24>
	sint8 s8Ret = M2M_SUCCESS;
    86cc:	2600      	movs	r6, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    86ce:	0030      	movs	r0, r6
    86d0:	b004      	add	sp, #16
    86d2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    86d4:	a903      	add	r1, sp, #12
    86d6:	4817      	ldr	r0, [pc, #92]	; (8734 <spi_flash_enable+0x84>)
    86d8:	4b17      	ldr	r3, [pc, #92]	; (8738 <spi_flash_enable+0x88>)
    86da:	58eb      	ldr	r3, [r5, r3]
    86dc:	9301      	str	r3, [sp, #4]
    86de:	4798      	blx	r3
    86e0:	1e06      	subs	r6, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    86e2:	d1f4      	bne.n	86ce <spi_flash_enable+0x1e>
		u32Val &= ~((0x7777ul) << 12);
    86e4:	4b15      	ldr	r3, [pc, #84]	; (873c <spi_flash_enable+0x8c>)
    86e6:	9a03      	ldr	r2, [sp, #12]
    86e8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    86ea:	4915      	ldr	r1, [pc, #84]	; (8740 <spi_flash_enable+0x90>)
    86ec:	4319      	orrs	r1, r3
    86ee:	9103      	str	r1, [sp, #12]
		nm_write_reg(0x1410, u32Val);
    86f0:	4810      	ldr	r0, [pc, #64]	; (8734 <spi_flash_enable+0x84>)
    86f2:	4b14      	ldr	r3, [pc, #80]	; (8744 <spi_flash_enable+0x94>)
    86f4:	58eb      	ldr	r3, [r5, r3]
    86f6:	9301      	str	r3, [sp, #4]
    86f8:	4798      	blx	r3
		if(enable) {
    86fa:	2c00      	cmp	r4, #0
    86fc:	d00f      	beq.n	871e <spi_flash_enable+0x6e>
			spi_flash_leave_low_power_mode();
    86fe:	4b12      	ldr	r3, [pc, #72]	; (8748 <spi_flash_enable+0x98>)
    8700:	447b      	add	r3, pc
    8702:	4798      	blx	r3
		u32Val &= ~((0x7777ul) << 12);
    8704:	4b0d      	ldr	r3, [pc, #52]	; (873c <spi_flash_enable+0x8c>)
    8706:	9a03      	ldr	r2, [sp, #12]
    8708:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    870a:	2180      	movs	r1, #128	; 0x80
    870c:	0249      	lsls	r1, r1, #9
    870e:	4319      	orrs	r1, r3
    8710:	9103      	str	r1, [sp, #12]
		nm_write_reg(0x1410, u32Val);
    8712:	4808      	ldr	r0, [pc, #32]	; (8734 <spi_flash_enable+0x84>)
    8714:	4b0b      	ldr	r3, [pc, #44]	; (8744 <spi_flash_enable+0x94>)
    8716:	58eb      	ldr	r3, [r5, r3]
    8718:	9301      	str	r3, [sp, #4]
    871a:	4798      	blx	r3
    871c:	e7d7      	b.n	86ce <spi_flash_enable+0x1e>
			spi_flash_enter_low_power_mode();
    871e:	4b0b      	ldr	r3, [pc, #44]	; (874c <spi_flash_enable+0x9c>)
    8720:	447b      	add	r3, pc
    8722:	4798      	blx	r3
    8724:	e7ee      	b.n	8704 <spi_flash_enable+0x54>
    8726:	46c0      	nop			; (mov r8, r8)
    8728:	0000a2d4 	.word	0x0000a2d4
    872c:	0000002c 	.word	0x0000002c
    8730:	0000039f 	.word	0x0000039f
    8734:	00001410 	.word	0x00001410
    8738:	00000044 	.word	0x00000044
    873c:	f8888fff 	.word	0xf8888fff
    8740:	01111000 	.word	0x01111000
    8744:	000003c4 	.word	0x000003c4
    8748:	fffffedd 	.word	0xfffffedd
    874c:	ffffff25 	.word	0xffffff25

00008750 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    8750:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    8752:	2800      	cmp	r0, #0
    8754:	d001      	beq.n	875a <mem_test_unit_ready+0xa>
    8756:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
    8758:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    875a:	0140      	lsls	r0, r0, #5
    875c:	4b02      	ldr	r3, [pc, #8]	; (8768 <mem_test_unit_ready+0x18>)
    875e:	447b      	add	r3, pc
    8760:	58c3      	ldr	r3, [r0, r3]
  status =
    8762:	4798      	blx	r3
    8764:	e7f8      	b.n	8758 <mem_test_unit_ready+0x8>
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	1fff79aa 	.word	0x1fff79aa

0000876c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    876c:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    876e:	2800      	cmp	r0, #0
    8770:	d001      	beq.n	8776 <mem_read_capacity+0xa>
    8772:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
    8774:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8776:	0140      	lsls	r0, r0, #5
    8778:	4b03      	ldr	r3, [pc, #12]	; (8788 <mem_read_capacity+0x1c>)
    877a:	447b      	add	r3, pc
    877c:	1818      	adds	r0, r3, r0
    877e:	6843      	ldr	r3, [r0, #4]
  status =
    8780:	0008      	movs	r0, r1
    8782:	4798      	blx	r3
    8784:	e7f6      	b.n	8774 <mem_read_capacity+0x8>
    8786:	46c0      	nop			; (mov r8, r8)
    8788:	1fff798e 	.word	0x1fff798e

0000878c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    878c:	4243      	negs	r3, r0
    878e:	4158      	adcs	r0, r3
    8790:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    8792:	4770      	bx	lr

00008794 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    8794:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8796:	2800      	cmp	r0, #0
    8798:	d001      	beq.n	879e <mem_wr_protect+0xa>
    879a:	2001      	movs	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    879c:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    879e:	0140      	lsls	r0, r0, #5
    87a0:	4b02      	ldr	r3, [pc, #8]	; (87ac <mem_wr_protect+0x18>)
    87a2:	447b      	add	r3, pc
    87a4:	1818      	adds	r0, r3, r0
    87a6:	68c3      	ldr	r3, [r0, #12]
    87a8:	4798      	blx	r3
    87aa:	e7f7      	b.n	879c <mem_wr_protect+0x8>
    87ac:	1fff7966 	.word	0x1fff7966

000087b0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    87b0:	b510      	push	{r4, lr}
    87b2:	000c      	movs	r4, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    87b4:	2800      	cmp	r0, #0
    87b6:	d001      	beq.n	87bc <memory_2_ram+0xc>
    87b8:	2001      	movs	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    87ba:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    87bc:	0140      	lsls	r0, r0, #5
    87be:	4b04      	ldr	r3, [pc, #16]	; (87d0 <memory_2_ram+0x20>)
    87c0:	447b      	add	r3, pc
    87c2:	1818      	adds	r0, r3, r0
    87c4:	6943      	ldr	r3, [r0, #20]
  status =
    87c6:	0011      	movs	r1, r2
    87c8:	0020      	movs	r0, r4
    87ca:	4798      	blx	r3
    87cc:	e7f5      	b.n	87ba <memory_2_ram+0xa>
    87ce:	46c0      	nop			; (mov r8, r8)
    87d0:	1fff7948 	.word	0x1fff7948

000087d4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    87d4:	b510      	push	{r4, lr}
    87d6:	000c      	movs	r4, r1
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    87d8:	2800      	cmp	r0, #0
    87da:	d001      	beq.n	87e0 <ram_2_memory+0xc>
    87dc:	2001      	movs	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    87de:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    87e0:	0140      	lsls	r0, r0, #5
    87e2:	4b04      	ldr	r3, [pc, #16]	; (87f4 <ram_2_memory+0x20>)
    87e4:	447b      	add	r3, pc
    87e6:	1818      	adds	r0, r3, r0
    87e8:	6983      	ldr	r3, [r0, #24]
  status =
    87ea:	0011      	movs	r1, r2
    87ec:	0020      	movs	r0, r4
    87ee:	4798      	blx	r3
    87f0:	e7f5      	b.n	87de <ram_2_memory+0xa>
    87f2:	46c0      	nop			; (mov r8, r8)
    87f4:	1fff7924 	.word	0x1fff7924

000087f8 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    87f8:	b510      	push	{r4, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    87fa:	4a11      	ldr	r2, [pc, #68]	; (8840 <udi_cdc_comm_enable+0x48>)
    87fc:	447a      	add	r2, pc
    87fe:	2100      	movs	r1, #0
    8800:	7011      	strb	r1, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    8802:	2000      	movs	r0, #0
    8804:	4b0f      	ldr	r3, [pc, #60]	; (8844 <udi_cdc_comm_enable+0x4c>)
    8806:	447b      	add	r3, pc
    8808:	8019      	strh	r1, [r3, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
    880a:	4b0f      	ldr	r3, [pc, #60]	; (8848 <udi_cdc_comm_enable+0x50>)
    880c:	447b      	add	r3, pc
    880e:	24a1      	movs	r4, #161	; 0xa1
    8810:	701c      	strb	r4, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    8812:	3c81      	subs	r4, #129	; 0x81
    8814:	705c      	strb	r4, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    8816:	8059      	strh	r1, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    8818:	8099      	strh	r1, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    881a:	3c1e      	subs	r4, #30
    881c:	80dc      	strh	r4, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    881e:	8119      	strh	r1, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    8820:	4b0a      	ldr	r3, [pc, #40]	; (884c <udi_cdc_comm_enable+0x54>)
    8822:	447b      	add	r3, pc
    8824:	21e1      	movs	r1, #225	; 0xe1
    8826:	0249      	lsls	r1, r1, #9
    8828:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    882a:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    882c:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    882e:	2108      	movs	r1, #8
    8830:	7199      	strb	r1, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    8832:	7813      	ldrb	r3, [r2, #0]
    8834:	3301      	adds	r3, #1
    8836:	b2db      	uxtb	r3, r3
    8838:	7013      	strb	r3, [r2, #0]
	return true;
}
    883a:	2001      	movs	r0, #1
    883c:	bd10      	pop	{r4, pc}
    883e:	46c0      	nop			; (mov r8, r8)
    8840:	1fff8133 	.word	0x1fff8133
    8844:	1fff81be 	.word	0x1fff81be
    8848:	1fff8250 	.word	0x1fff8250
    884c:	1fff8106 	.word	0x1fff8106

00008850 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    8850:	4a03      	ldr	r2, [pc, #12]	; (8860 <udi_cdc_comm_disable+0x10>)
    8852:	447a      	add	r2, pc
    8854:	7813      	ldrb	r3, [r2, #0]
    8856:	3b01      	subs	r3, #1
    8858:	b2db      	uxtb	r3, r3
    885a:	7013      	strb	r3, [r2, #0]
}
    885c:	4770      	bx	lr
    885e:	46c0      	nop			; (mov r8, r8)
    8860:	1fff80dd 	.word	0x1fff80dd

00008864 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    8864:	4a05      	ldr	r2, [pc, #20]	; (887c <udi_cdc_data_disable+0x18>)
    8866:	447a      	add	r2, pc
    8868:	7813      	ldrb	r3, [r2, #0]
    886a:	3b01      	subs	r3, #1
    886c:	b2db      	uxtb	r3, r3
    886e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
    8870:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    8872:	2200      	movs	r2, #0
    8874:	4b02      	ldr	r3, [pc, #8]	; (8880 <udi_cdc_data_disable+0x1c>)
    8876:	447b      	add	r3, pc
    8878:	701a      	strb	r2, [r3, #0]
}
    887a:	4770      	bx	lr
    887c:	1fff80ca 	.word	0x1fff80ca
    8880:	1fff80ae 	.word	0x1fff80ae

00008884 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    8884:	2000      	movs	r0, #0
    8886:	4770      	bx	lr

00008888 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    8888:	2000      	movs	r0, #0
    888a:	4770      	bx	lr

0000888c <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
    888c:	2000      	movs	r0, #0
    888e:	4770      	bx	lr

00008890 <udi_cdc_comm_setup>:
{
    8890:	b510      	push	{r4, lr}
    8892:	b082      	sub	sp, #8
    8894:	4c2b      	ldr	r4, [pc, #172]	; (8944 <udi_cdc_comm_setup+0xb4>)
    8896:	447c      	add	r4, pc
	uint8_t port = udi_cdc_setup_to_port();
    8898:	4b2b      	ldr	r3, [pc, #172]	; (8948 <udi_cdc_comm_setup+0xb8>)
    889a:	447b      	add	r3, pc
    889c:	4798      	blx	r3
	if (Udd_setup_is_in()) {
    889e:	4b2b      	ldr	r3, [pc, #172]	; (894c <udi_cdc_comm_setup+0xbc>)
    88a0:	58e3      	ldr	r3, [r4, r3]
    88a2:	9301      	str	r3, [sp, #4]
    88a4:	781b      	ldrb	r3, [r3, #0]
    88a6:	b25a      	sxtb	r2, r3
    88a8:	2a00      	cmp	r2, #0
    88aa:	db08      	blt.n	88be <udi_cdc_comm_setup+0x2e>
	if (Udd_setup_is_out()) {
    88ac:	2a00      	cmp	r2, #0
    88ae:	db45      	blt.n	893c <udi_cdc_comm_setup+0xac>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    88b0:	2260      	movs	r2, #96	; 0x60
    88b2:	4013      	ands	r3, r2
    88b4:	2b20      	cmp	r3, #32
    88b6:	d020      	beq.n	88fa <udi_cdc_comm_setup+0x6a>
	return false;  // request Not supported
    88b8:	2000      	movs	r0, #0
}
    88ba:	b002      	add	sp, #8
    88bc:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    88be:	2160      	movs	r1, #96	; 0x60
    88c0:	4019      	ands	r1, r3
    88c2:	2920      	cmp	r1, #32
    88c4:	d1f2      	bne.n	88ac <udi_cdc_comm_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    88c6:	4921      	ldr	r1, [pc, #132]	; (894c <udi_cdc_comm_setup+0xbc>)
    88c8:	5861      	ldr	r1, [r4, r1]
    88ca:	9101      	str	r1, [sp, #4]
    88cc:	7849      	ldrb	r1, [r1, #1]
    88ce:	2921      	cmp	r1, #33	; 0x21
    88d0:	d1ec      	bne.n	88ac <udi_cdc_comm_setup+0x1c>
						udd_g_ctrlreq.req.wLength)
    88d2:	4b1e      	ldr	r3, [pc, #120]	; (894c <udi_cdc_comm_setup+0xbc>)
    88d4:	58e3      	ldr	r3, [r4, r3]
    88d6:	9301      	str	r3, [sp, #4]
    88d8:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    88da:	2b07      	cmp	r3, #7
    88dc:	d001      	beq.n	88e2 <udi_cdc_comm_setup+0x52>
					return false; // Error for USB host
    88de:	2000      	movs	r0, #0
    88e0:	e7eb      	b.n	88ba <udi_cdc_comm_setup+0x2a>
						(uint8_t *) &
    88e2:	00c3      	lsls	r3, r0, #3
    88e4:	1a1b      	subs	r3, r3, r0
    88e6:	481a      	ldr	r0, [pc, #104]	; (8950 <udi_cdc_comm_setup+0xc0>)
    88e8:	4478      	add	r0, pc
    88ea:	18c0      	adds	r0, r0, r3
				udd_g_ctrlreq.payload =
    88ec:	4b17      	ldr	r3, [pc, #92]	; (894c <udi_cdc_comm_setup+0xbc>)
    88ee:	58e3      	ldr	r3, [r4, r3]
    88f0:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
    88f2:	2207      	movs	r2, #7
    88f4:	819a      	strh	r2, [r3, #12]
				return true;
    88f6:	2001      	movs	r0, #1
    88f8:	e7df      	b.n	88ba <udi_cdc_comm_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
    88fa:	4b14      	ldr	r3, [pc, #80]	; (894c <udi_cdc_comm_setup+0xbc>)
    88fc:	58e3      	ldr	r3, [r4, r3]
    88fe:	9301      	str	r3, [sp, #4]
    8900:	785b      	ldrb	r3, [r3, #1]
    8902:	2b20      	cmp	r3, #32
    8904:	d003      	beq.n	890e <udi_cdc_comm_setup+0x7e>
    8906:	2b22      	cmp	r3, #34	; 0x22
    8908:	d11a      	bne.n	8940 <udi_cdc_comm_setup+0xb0>
				return true;
    890a:	2001      	movs	r0, #1
    890c:	e7d5      	b.n	88ba <udi_cdc_comm_setup+0x2a>
						udd_g_ctrlreq.req.wLength)
    890e:	4b0f      	ldr	r3, [pc, #60]	; (894c <udi_cdc_comm_setup+0xbc>)
    8910:	58e3      	ldr	r3, [r4, r3]
    8912:	9301      	str	r3, [sp, #4]
    8914:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    8916:	2b07      	cmp	r3, #7
    8918:	d001      	beq.n	891e <udi_cdc_comm_setup+0x8e>
					return false; // Error for USB host
    891a:	2000      	movs	r0, #0
    891c:	e7cd      	b.n	88ba <udi_cdc_comm_setup+0x2a>
				udd_g_ctrlreq.callback =
    891e:	4b0b      	ldr	r3, [pc, #44]	; (894c <udi_cdc_comm_setup+0xbc>)
    8920:	58e3      	ldr	r3, [r4, r3]
    8922:	4a0c      	ldr	r2, [pc, #48]	; (8954 <udi_cdc_comm_setup+0xc4>)
    8924:	447a      	add	r2, pc
    8926:	611a      	str	r2, [r3, #16]
						(uint8_t *) &
    8928:	00c2      	lsls	r2, r0, #3
    892a:	1a12      	subs	r2, r2, r0
    892c:	480a      	ldr	r0, [pc, #40]	; (8958 <udi_cdc_comm_setup+0xc8>)
    892e:	4478      	add	r0, pc
    8930:	1880      	adds	r0, r0, r2
				udd_g_ctrlreq.payload =
    8932:	6098      	str	r0, [r3, #8]
				udd_g_ctrlreq.payload_size =
    8934:	2207      	movs	r2, #7
    8936:	819a      	strh	r2, [r3, #12]
				return true;
    8938:	2001      	movs	r0, #1
    893a:	e7be      	b.n	88ba <udi_cdc_comm_setup+0x2a>
	return false;  // request Not supported
    893c:	2000      	movs	r0, #0
    893e:	e7bc      	b.n	88ba <udi_cdc_comm_setup+0x2a>
    8940:	2000      	movs	r0, #0
    8942:	e7ba      	b.n	88ba <udi_cdc_comm_setup+0x2a>
    8944:	0000a0f6 	.word	0x0000a0f6
    8948:	ffffffef 	.word	0xffffffef
    894c:	00000308 	.word	0x00000308
    8950:	1fff8040 	.word	0x1fff8040
    8954:	00000035 	.word	0x00000035
    8958:	1fff7ffa 	.word	0x1fff7ffa

0000895c <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    895c:	4770      	bx	lr
	...

00008960 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
    8960:	b570      	push	{r4, r5, r6, lr}
    8962:	b086      	sub	sp, #24
    8964:	4c5e      	ldr	r4, [pc, #376]	; (8ae0 <udi_cdc_tx_send+0x180>)
    8966:	447c      	add	r4, pc

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    8968:	4b5e      	ldr	r3, [pc, #376]	; (8ae4 <udi_cdc_tx_send+0x184>)
    896a:	447b      	add	r3, pc
    896c:	781b      	ldrb	r3, [r3, #0]
    896e:	2b00      	cmp	r3, #0
    8970:	d001      	beq.n	8976 <udi_cdc_tx_send+0x16>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    8972:	b006      	add	sp, #24
    8974:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
    8976:	4b5c      	ldr	r3, [pc, #368]	; (8ae8 <udi_cdc_tx_send+0x188>)
    8978:	58e3      	ldr	r3, [r4, r3]
    897a:	9303      	str	r3, [sp, #12]
    897c:	4798      	blx	r3
    897e:	2800      	cmp	r0, #0
    8980:	d059      	beq.n	8a36 <udi_cdc_tx_send+0xd6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    8982:	4b5a      	ldr	r3, [pc, #360]	; (8aec <udi_cdc_tx_send+0x18c>)
    8984:	447b      	add	r3, pc
    8986:	881d      	ldrh	r5, [r3, #0]
    8988:	4b59      	ldr	r3, [pc, #356]	; (8af0 <udi_cdc_tx_send+0x190>)
    898a:	58e3      	ldr	r3, [r4, r3]
    898c:	9303      	str	r3, [sp, #12]
    898e:	4798      	blx	r3
    8990:	4285      	cmp	r5, r0
    8992:	d0ee      	beq.n	8972 <udi_cdc_tx_send+0x12>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8994:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8998:	425a      	negs	r2, r3
    899a:	4153      	adcs	r3, r2
    899c:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    899e:	b672      	cpsid	i
    89a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    89a4:	4b53      	ldr	r3, [pc, #332]	; (8af4 <udi_cdc_tx_send+0x194>)
    89a6:	58e3      	ldr	r3, [r4, r3]
    89a8:	9303      	str	r3, [sp, #12]
    89aa:	2300      	movs	r3, #0
    89ac:	9a03      	ldr	r2, [sp, #12]
    89ae:	7013      	strb	r3, [r2, #0]
	return flags;
    89b0:	9e05      	ldr	r6, [sp, #20]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    89b2:	4b51      	ldr	r3, [pc, #324]	; (8af8 <udi_cdc_tx_send+0x198>)
    89b4:	447b      	add	r3, pc
    89b6:	781d      	ldrb	r5, [r3, #0]
    89b8:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    89ba:	006a      	lsls	r2, r5, #1
    89bc:	4b4f      	ldr	r3, [pc, #316]	; (8afc <udi_cdc_tx_send+0x19c>)
    89be:	447b      	add	r3, pc
    89c0:	5ad3      	ldrh	r3, [r2, r3]
    89c2:	2b00      	cmp	r3, #0
    89c4:	d041      	beq.n	8a4a <udi_cdc_tx_send+0xea>
	sof_zlp_counter = 0;
    89c6:	2200      	movs	r2, #0
    89c8:	4b4d      	ldr	r3, [pc, #308]	; (8b00 <udi_cdc_tx_send+0x1a0>)
    89ca:	447b      	add	r3, pc
    89cc:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    89ce:	4b4d      	ldr	r3, [pc, #308]	; (8b04 <udi_cdc_tx_send+0x1a4>)
    89d0:	447b      	add	r3, pc
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	2b00      	cmp	r3, #0
    89d6:	d161      	bne.n	8a9c <udi_cdc_tx_send+0x13c>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    89d8:	426b      	negs	r3, r5
    89da:	416b      	adcs	r3, r5
    89dc:	b2db      	uxtb	r3, r3
    89de:	4a4a      	ldr	r2, [pc, #296]	; (8b08 <udi_cdc_tx_send+0x1a8>)
    89e0:	447a      	add	r2, pc
    89e2:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    89e4:	2201      	movs	r2, #1
    89e6:	4b49      	ldr	r3, [pc, #292]	; (8b0c <udi_cdc_tx_send+0x1ac>)
    89e8:	447b      	add	r3, pc
    89ea:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    89ec:	2e00      	cmp	r6, #0
    89ee:	d008      	beq.n	8a02 <udi_cdc_tx_send+0xa2>
		cpu_irq_enable();
    89f0:	4b40      	ldr	r3, [pc, #256]	; (8af4 <udi_cdc_tx_send+0x194>)
    89f2:	58e3      	ldr	r3, [r4, r3]
    89f4:	9303      	str	r3, [sp, #12]
    89f6:	2301      	movs	r3, #1
    89f8:	9a03      	ldr	r2, [sp, #12]
    89fa:	7013      	strb	r3, [r2, #0]
    89fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8a00:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    8a02:	002e      	movs	r6, r5
    8a04:	006d      	lsls	r5, r5, #1
    8a06:	4b42      	ldr	r3, [pc, #264]	; (8b10 <udi_cdc_tx_send+0x1b0>)
    8a08:	447b      	add	r3, pc
    8a0a:	5aeb      	ldrh	r3, [r5, r3]
    8a0c:	0019      	movs	r1, r3
    8a0e:	3940      	subs	r1, #64	; 0x40
    8a10:	1e4a      	subs	r2, r1, #1
    8a12:	4191      	sbcs	r1, r2
    8a14:	b2cd      	uxtb	r5, r1
	if (b_short_packet) {
    8a16:	2b40      	cmp	r3, #64	; 0x40
    8a18:	d04c      	beq.n	8ab4 <udi_cdc_tx_send+0x154>
		if (udd_is_high_speed()) {
    8a1a:	4b33      	ldr	r3, [pc, #204]	; (8ae8 <udi_cdc_tx_send+0x188>)
    8a1c:	58e3      	ldr	r3, [r4, r3]
    8a1e:	9303      	str	r3, [sp, #12]
    8a20:	4798      	blx	r3
    8a22:	2800      	cmp	r0, #0
    8a24:	d03e      	beq.n	8aa4 <udi_cdc_tx_send+0x144>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    8a26:	4b32      	ldr	r3, [pc, #200]	; (8af0 <udi_cdc_tx_send+0x190>)
    8a28:	58e3      	ldr	r3, [r4, r3]
    8a2a:	9303      	str	r3, [sp, #12]
    8a2c:	4798      	blx	r3
    8a2e:	4b39      	ldr	r3, [pc, #228]	; (8b14 <udi_cdc_tx_send+0x1b4>)
    8a30:	447b      	add	r3, pc
    8a32:	8018      	strh	r0, [r3, #0]
    8a34:	e042      	b.n	8abc <udi_cdc_tx_send+0x15c>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    8a36:	4b38      	ldr	r3, [pc, #224]	; (8b18 <udi_cdc_tx_send+0x1b8>)
    8a38:	447b      	add	r3, pc
    8a3a:	881d      	ldrh	r5, [r3, #0]
    8a3c:	4b37      	ldr	r3, [pc, #220]	; (8b1c <udi_cdc_tx_send+0x1bc>)
    8a3e:	58e3      	ldr	r3, [r4, r3]
    8a40:	9303      	str	r3, [sp, #12]
    8a42:	4798      	blx	r3
    8a44:	4285      	cmp	r5, r0
    8a46:	d1a5      	bne.n	8994 <udi_cdc_tx_send+0x34>
    8a48:	e793      	b.n	8972 <udi_cdc_tx_send+0x12>
		sof_zlp_counter++;
    8a4a:	4a35      	ldr	r2, [pc, #212]	; (8b20 <udi_cdc_tx_send+0x1c0>)
    8a4c:	447a      	add	r2, pc
    8a4e:	8813      	ldrh	r3, [r2, #0]
    8a50:	3301      	adds	r3, #1
    8a52:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    8a54:	4b24      	ldr	r3, [pc, #144]	; (8ae8 <udi_cdc_tx_send+0x188>)
    8a56:	58e3      	ldr	r3, [r4, r3]
    8a58:	9303      	str	r3, [sp, #12]
    8a5a:	4798      	blx	r3
    8a5c:	2800      	cmp	r0, #0
    8a5e:	d104      	bne.n	8a6a <udi_cdc_tx_send+0x10a>
    8a60:	4b30      	ldr	r3, [pc, #192]	; (8b24 <udi_cdc_tx_send+0x1c4>)
    8a62:	447b      	add	r3, pc
    8a64:	881b      	ldrh	r3, [r3, #0]
    8a66:	2b63      	cmp	r3, #99	; 0x63
    8a68:	d90b      	bls.n	8a82 <udi_cdc_tx_send+0x122>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    8a6a:	4b1f      	ldr	r3, [pc, #124]	; (8ae8 <udi_cdc_tx_send+0x188>)
    8a6c:	58e3      	ldr	r3, [r4, r3]
    8a6e:	9303      	str	r3, [sp, #12]
    8a70:	4798      	blx	r3
    8a72:	2800      	cmp	r0, #0
    8a74:	d0a7      	beq.n	89c6 <udi_cdc_tx_send+0x66>
    8a76:	4b2c      	ldr	r3, [pc, #176]	; (8b28 <udi_cdc_tx_send+0x1c8>)
    8a78:	447b      	add	r3, pc
    8a7a:	881a      	ldrh	r2, [r3, #0]
    8a7c:	4b2b      	ldr	r3, [pc, #172]	; (8b2c <udi_cdc_tx_send+0x1cc>)
    8a7e:	429a      	cmp	r2, r3
    8a80:	d8a1      	bhi.n	89c6 <udi_cdc_tx_send+0x66>
	if (cpu_irq_is_enabled_flags(flags))
    8a82:	2e00      	cmp	r6, #0
    8a84:	d100      	bne.n	8a88 <udi_cdc_tx_send+0x128>
    8a86:	e774      	b.n	8972 <udi_cdc_tx_send+0x12>
		cpu_irq_enable();
    8a88:	4b1a      	ldr	r3, [pc, #104]	; (8af4 <udi_cdc_tx_send+0x194>)
    8a8a:	58e3      	ldr	r3, [r4, r3]
    8a8c:	9303      	str	r3, [sp, #12]
    8a8e:	2301      	movs	r3, #1
    8a90:	9a03      	ldr	r2, [sp, #12]
    8a92:	7013      	strb	r3, [r2, #0]
    8a94:	f3bf 8f5f 	dmb	sy
    8a98:	b662      	cpsie	i
    8a9a:	e76a      	b.n	8972 <udi_cdc_tx_send+0x12>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    8a9c:	426b      	negs	r3, r5
    8a9e:	415d      	adcs	r5, r3
    8aa0:	b2ed      	uxtb	r5, r5
    8aa2:	e79f      	b.n	89e4 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    8aa4:	4b1d      	ldr	r3, [pc, #116]	; (8b1c <udi_cdc_tx_send+0x1bc>)
    8aa6:	58e3      	ldr	r3, [r4, r3]
    8aa8:	9303      	str	r3, [sp, #12]
    8aaa:	4798      	blx	r3
    8aac:	4b20      	ldr	r3, [pc, #128]	; (8b30 <udi_cdc_tx_send+0x1d0>)
    8aae:	447b      	add	r3, pc
    8ab0:	8018      	strh	r0, [r3, #0]
    8ab2:	e003      	b.n	8abc <udi_cdc_tx_send+0x15c>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    8ab4:	2200      	movs	r2, #0
    8ab6:	4b1f      	ldr	r3, [pc, #124]	; (8b34 <udi_cdc_tx_send+0x1d4>)
    8ab8:	447b      	add	r3, pc
    8aba:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf[port][buf_sel_trans],
    8abc:	01b3      	lsls	r3, r6, #6
    8abe:	4a1e      	ldr	r2, [pc, #120]	; (8b38 <udi_cdc_tx_send+0x1d8>)
    8ac0:	447a      	add	r2, pc
    8ac2:	18d2      	adds	r2, r2, r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    8ac4:	0076      	lsls	r6, r6, #1
    8ac6:	491d      	ldr	r1, [pc, #116]	; (8b3c <udi_cdc_tx_send+0x1dc>)
    8ac8:	4479      	add	r1, pc
    8aca:	5a73      	ldrh	r3, [r6, r1]
	udd_ep_run( ep,
    8acc:	491c      	ldr	r1, [pc, #112]	; (8b40 <udi_cdc_tx_send+0x1e0>)
    8ace:	4479      	add	r1, pc
    8ad0:	9100      	str	r1, [sp, #0]
    8ad2:	0029      	movs	r1, r5
    8ad4:	2081      	movs	r0, #129	; 0x81
    8ad6:	4d1b      	ldr	r5, [pc, #108]	; (8b44 <udi_cdc_tx_send+0x1e4>)
    8ad8:	5964      	ldr	r4, [r4, r5]
    8ada:	9403      	str	r4, [sp, #12]
    8adc:	47a0      	blx	r4
    8ade:	e748      	b.n	8972 <udi_cdc_tx_send+0x12>
    8ae0:	0000a026 	.word	0x0000a026
    8ae4:	1fff80ee 	.word	0x1fff80ee
    8ae8:	00000280 	.word	0x00000280
    8aec:	1fff80d0 	.word	0x1fff80d0
    8af0:	00000084 	.word	0x00000084
    8af4:	0000016c 	.word	0x0000016c
    8af8:	1fff809c 	.word	0x1fff809c
    8afc:	1fff808e 	.word	0x1fff808e
    8b00:	1fff7f58 	.word	0x1fff7f58
    8b04:	1fff7ff8 	.word	0x1fff7ff8
    8b08:	1fff8070 	.word	0x1fff8070
    8b0c:	1fff8070 	.word	0x1fff8070
    8b10:	1fff8044 	.word	0x1fff8044
    8b14:	1fff8024 	.word	0x1fff8024
    8b18:	1fff801c 	.word	0x1fff801c
    8b1c:	0000013c 	.word	0x0000013c
    8b20:	1fff7ed6 	.word	0x1fff7ed6
    8b24:	1fff7ec0 	.word	0x1fff7ec0
    8b28:	1fff7eaa 	.word	0x1fff7eaa
    8b2c:	0000031f 	.word	0x0000031f
    8b30:	1fff7fa6 	.word	0x1fff7fa6
    8b34:	1fff7f9c 	.word	0x1fff7f9c
    8b38:	1fff7f0c 	.word	0x1fff7f0c
    8b3c:	1fff7f84 	.word	0x1fff7f84
    8b40:	00000077 	.word	0x00000077
    8b44:	000000c0 	.word	0x000000c0

00008b48 <udi_cdc_data_sent>:
{
    8b48:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d000      	beq.n	8b50 <udi_cdc_data_sent+0x8>
}
    8b4e:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    8b50:	4b09      	ldr	r3, [pc, #36]	; (8b78 <udi_cdc_data_sent+0x30>)
    8b52:	447b      	add	r3, pc
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	425a      	negs	r2, r3
    8b58:	4153      	adcs	r3, r2
    8b5a:	005b      	lsls	r3, r3, #1
    8b5c:	2200      	movs	r2, #0
    8b5e:	4907      	ldr	r1, [pc, #28]	; (8b7c <udi_cdc_data_sent+0x34>)
    8b60:	4479      	add	r1, pc
    8b62:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
    8b64:	4b06      	ldr	r3, [pc, #24]	; (8b80 <udi_cdc_data_sent+0x38>)
    8b66:	447b      	add	r3, pc
    8b68:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    8b6a:	4b06      	ldr	r3, [pc, #24]	; (8b84 <udi_cdc_data_sent+0x3c>)
    8b6c:	447b      	add	r3, pc
    8b6e:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
    8b70:	4b05      	ldr	r3, [pc, #20]	; (8b88 <udi_cdc_data_sent+0x40>)
    8b72:	447b      	add	r3, pc
    8b74:	4798      	blx	r3
    8b76:	e7ea      	b.n	8b4e <udi_cdc_data_sent+0x6>
    8b78:	1fff7efe 	.word	0x1fff7efe
    8b7c:	1fff7eec 	.word	0x1fff7eec
    8b80:	1fff7e62 	.word	0x1fff7e62
    8b84:	1fff7eec 	.word	0x1fff7eec
    8b88:	fffffdeb 	.word	0xfffffdeb

00008b8c <udi_cdc_data_sof_notify>:
{
    8b8c:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    8b8e:	2000      	movs	r0, #0
    8b90:	4b01      	ldr	r3, [pc, #4]	; (8b98 <udi_cdc_data_sof_notify+0xc>)
    8b92:	447b      	add	r3, pc
    8b94:	4798      	blx	r3
}
    8b96:	bd10      	pop	{r4, pc}
    8b98:	fffffdcb 	.word	0xfffffdcb

00008b9c <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    8b9c:	b510      	push	{r4, lr}
    8b9e:	b084      	sub	sp, #16
    8ba0:	4a14      	ldr	r2, [pc, #80]	; (8bf4 <udi_cdc_multi_get_nb_received_data+0x58>)
    8ba2:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8ba4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8ba8:	4259      	negs	r1, r3
    8baa:	414b      	adcs	r3, r1
    8bac:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8bae:	b672      	cpsid	i
    8bb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8bb4:	4b10      	ldr	r3, [pc, #64]	; (8bf8 <udi_cdc_multi_get_nb_received_data+0x5c>)
    8bb6:	58d3      	ldr	r3, [r2, r3]
    8bb8:	9301      	str	r3, [sp, #4]
    8bba:	2300      	movs	r3, #0
    8bbc:	9901      	ldr	r1, [sp, #4]
    8bbe:	700b      	strb	r3, [r1, #0]
	return flags;
    8bc0:	9903      	ldr	r1, [sp, #12]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    8bc2:	4b0e      	ldr	r3, [pc, #56]	; (8bfc <udi_cdc_multi_get_nb_received_data+0x60>)
    8bc4:	447b      	add	r3, pc
    8bc6:	881c      	ldrh	r4, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    8bc8:	4b0d      	ldr	r3, [pc, #52]	; (8c00 <udi_cdc_multi_get_nb_received_data+0x64>)
    8bca:	447b      	add	r3, pc
    8bcc:	781b      	ldrb	r3, [r3, #0]
    8bce:	005b      	lsls	r3, r3, #1
    8bd0:	480c      	ldr	r0, [pc, #48]	; (8c04 <udi_cdc_multi_get_nb_received_data+0x68>)
    8bd2:	4478      	add	r0, pc
    8bd4:	5a18      	ldrh	r0, [r3, r0]
    8bd6:	1b00      	subs	r0, r0, r4
	if (cpu_irq_is_enabled_flags(flags))
    8bd8:	2900      	cmp	r1, #0
    8bda:	d008      	beq.n	8bee <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
    8bdc:	4b06      	ldr	r3, [pc, #24]	; (8bf8 <udi_cdc_multi_get_nb_received_data+0x5c>)
    8bde:	58d3      	ldr	r3, [r2, r3]
    8be0:	9301      	str	r3, [sp, #4]
    8be2:	2301      	movs	r3, #1
    8be4:	9a01      	ldr	r2, [sp, #4]
    8be6:	7013      	strb	r3, [r2, #0]
    8be8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8bec:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
    8bee:	b004      	add	sp, #16
    8bf0:	bd10      	pop	{r4, pc}
    8bf2:	46c0      	nop			; (mov r8, r8)
    8bf4:	00009dea 	.word	0x00009dea
    8bf8:	0000016c 	.word	0x0000016c
    8bfc:	1fff7df8 	.word	0x1fff7df8
    8c00:	1fff7dee 	.word	0x1fff7dee
    8c04:	1fff7de2 	.word	0x1fff7de2

00008c08 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    8c08:	b500      	push	{lr}
    8c0a:	b083      	sub	sp, #12
    8c0c:	4b05      	ldr	r3, [pc, #20]	; (8c24 <udi_cdc_multi_is_rx_ready+0x1c>)
    8c0e:	447b      	add	r3, pc
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    8c10:	4a05      	ldr	r2, [pc, #20]	; (8c28 <udi_cdc_multi_is_rx_ready+0x20>)
    8c12:	589b      	ldr	r3, [r3, r2]
    8c14:	9301      	str	r3, [sp, #4]
    8c16:	4798      	blx	r3
    8c18:	1e43      	subs	r3, r0, #1
    8c1a:	4198      	sbcs	r0, r3
    8c1c:	b2c0      	uxtb	r0, r0
}
    8c1e:	b003      	add	sp, #12
    8c20:	bd00      	pop	{pc}
    8c22:	46c0      	nop			; (mov r8, r8)
    8c24:	00009d7e 	.word	0x00009d7e
    8c28:	00000048 	.word	0x00000048

00008c2c <udi_cdc_rx_start>:
{
    8c2c:	b530      	push	{r4, r5, lr}
    8c2e:	b087      	sub	sp, #28
    8c30:	4d30      	ldr	r5, [pc, #192]	; (8cf4 <udi_cdc_rx_start+0xc8>)
    8c32:	447d      	add	r5, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8c34:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8c38:	425a      	negs	r2, r3
    8c3a:	4153      	adcs	r3, r2
    8c3c:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    8c3e:	b672      	cpsid	i
    8c40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8c44:	4b2c      	ldr	r3, [pc, #176]	; (8cf8 <udi_cdc_rx_start+0xcc>)
    8c46:	58eb      	ldr	r3, [r5, r3]
    8c48:	9303      	str	r3, [sp, #12]
    8c4a:	2300      	movs	r3, #0
    8c4c:	9a03      	ldr	r2, [sp, #12]
    8c4e:	7013      	strb	r3, [r2, #0]
	return flags;
    8c50:	9b05      	ldr	r3, [sp, #20]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    8c52:	4a2a      	ldr	r2, [pc, #168]	; (8cfc <udi_cdc_rx_start+0xd0>)
    8c54:	447a      	add	r2, pc
    8c56:	7814      	ldrb	r4, [r2, #0]
    8c58:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    8c5a:	4a29      	ldr	r2, [pc, #164]	; (8d00 <udi_cdc_rx_start+0xd4>)
    8c5c:	447a      	add	r2, pc
    8c5e:	7812      	ldrb	r2, [r2, #0]
    8c60:	2a00      	cmp	r2, #0
    8c62:	d10a      	bne.n	8c7a <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    8c64:	4a27      	ldr	r2, [pc, #156]	; (8d04 <udi_cdc_rx_start+0xd8>)
    8c66:	447a      	add	r2, pc
    8c68:	8811      	ldrh	r1, [r2, #0]
    8c6a:	b289      	uxth	r1, r1
    8c6c:	0062      	lsls	r2, r4, #1
    8c6e:	4826      	ldr	r0, [pc, #152]	; (8d08 <udi_cdc_rx_start+0xdc>)
    8c70:	4478      	add	r0, pc
    8c72:	5a12      	ldrh	r2, [r2, r0]
    8c74:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
    8c76:	4291      	cmp	r1, r2
    8c78:	d20d      	bcs.n	8c96 <udi_cdc_rx_start+0x6a>
	if (cpu_irq_is_enabled_flags(flags))
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	d038      	beq.n	8cf0 <udi_cdc_rx_start+0xc4>
		cpu_irq_enable();
    8c7e:	4b1e      	ldr	r3, [pc, #120]	; (8cf8 <udi_cdc_rx_start+0xcc>)
    8c80:	58eb      	ldr	r3, [r5, r3]
    8c82:	9303      	str	r3, [sp, #12]
    8c84:	2301      	movs	r3, #1
    8c86:	9a03      	ldr	r2, [sp, #12]
    8c88:	7013      	strb	r3, [r2, #0]
    8c8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8c8e:	b662      	cpsie	i
		return false;
    8c90:	2000      	movs	r0, #0
}
    8c92:	b007      	add	sp, #28
    8c94:	bd30      	pop	{r4, r5, pc}
	udi_cdc_rx_pos[port] = 0;
    8c96:	2100      	movs	r1, #0
    8c98:	4a1c      	ldr	r2, [pc, #112]	; (8d0c <udi_cdc_rx_start+0xe0>)
    8c9a:	447a      	add	r2, pc
    8c9c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    8c9e:	4262      	negs	r2, r4
    8ca0:	4162      	adcs	r2, r4
    8ca2:	b2d2      	uxtb	r2, r2
    8ca4:	491a      	ldr	r1, [pc, #104]	; (8d10 <udi_cdc_rx_start+0xe4>)
    8ca6:	4479      	add	r1, pc
    8ca8:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    8caa:	2101      	movs	r1, #1
    8cac:	4a19      	ldr	r2, [pc, #100]	; (8d14 <udi_cdc_rx_start+0xe8>)
    8cae:	447a      	add	r2, pc
    8cb0:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d008      	beq.n	8cc8 <udi_cdc_rx_start+0x9c>
		cpu_irq_enable();
    8cb6:	4b10      	ldr	r3, [pc, #64]	; (8cf8 <udi_cdc_rx_start+0xcc>)
    8cb8:	58eb      	ldr	r3, [r5, r3]
    8cba:	9303      	str	r3, [sp, #12]
    8cbc:	2301      	movs	r3, #1
    8cbe:	9a03      	ldr	r2, [sp, #12]
    8cc0:	7013      	strb	r3, [r2, #0]
    8cc2:	f3bf 8f5f 	dmb	sy
    8cc6:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
    8cc8:	2000      	movs	r0, #0
    8cca:	4b13      	ldr	r3, [pc, #76]	; (8d18 <udi_cdc_rx_start+0xec>)
    8ccc:	58eb      	ldr	r3, [r5, r3]
    8cce:	9303      	str	r3, [sp, #12]
    8cd0:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
    8cd2:	01a4      	lsls	r4, r4, #6
    8cd4:	4a11      	ldr	r2, [pc, #68]	; (8d1c <udi_cdc_rx_start+0xf0>)
    8cd6:	447a      	add	r2, pc
    8cd8:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
    8cda:	4b11      	ldr	r3, [pc, #68]	; (8d20 <udi_cdc_rx_start+0xf4>)
    8cdc:	447b      	add	r3, pc
    8cde:	9300      	str	r3, [sp, #0]
    8ce0:	2340      	movs	r3, #64	; 0x40
    8ce2:	2101      	movs	r1, #1
    8ce4:	2002      	movs	r0, #2
    8ce6:	4c0f      	ldr	r4, [pc, #60]	; (8d24 <udi_cdc_rx_start+0xf8>)
    8ce8:	592c      	ldr	r4, [r5, r4]
    8cea:	9403      	str	r4, [sp, #12]
    8cec:	47a0      	blx	r4
    8cee:	e7d0      	b.n	8c92 <udi_cdc_rx_start+0x66>
		return false;
    8cf0:	2000      	movs	r0, #0
    8cf2:	e7ce      	b.n	8c92 <udi_cdc_rx_start+0x66>
    8cf4:	00009d5a 	.word	0x00009d5a
    8cf8:	0000016c 	.word	0x0000016c
    8cfc:	1fff7d64 	.word	0x1fff7d64
    8d00:	1fff7d64 	.word	0x1fff7d64
    8d04:	1fff7d56 	.word	0x1fff7d56
    8d08:	1fff7d44 	.word	0x1fff7d44
    8d0c:	1fff7d22 	.word	0x1fff7d22
    8d10:	1fff7d12 	.word	0x1fff7d12
    8d14:	1fff7d12 	.word	0x1fff7d12
    8d18:	000002b0 	.word	0x000002b0
    8d1c:	1fff7c5e 	.word	0x1fff7c5e
    8d20:	000000f9 	.word	0x000000f9
    8d24:	000000c0 	.word	0x000000c0

00008d28 <udi_cdc_data_enable>:
{
    8d28:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    8d2a:	2400      	movs	r4, #0
    8d2c:	4b1c      	ldr	r3, [pc, #112]	; (8da0 <udi_cdc_data_enable+0x78>)
    8d2e:	447b      	add	r3, pc
    8d30:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    8d32:	4b1c      	ldr	r3, [pc, #112]	; (8da4 <udi_cdc_data_enable+0x7c>)
    8d34:	447b      	add	r3, pc
    8d36:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    8d38:	4b1b      	ldr	r3, [pc, #108]	; (8da8 <udi_cdc_data_enable+0x80>)
    8d3a:	447b      	add	r3, pc
    8d3c:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    8d3e:	4b1b      	ldr	r3, [pc, #108]	; (8dac <udi_cdc_data_enable+0x84>)
    8d40:	447b      	add	r3, pc
    8d42:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    8d44:	4b1a      	ldr	r3, [pc, #104]	; (8db0 <udi_cdc_data_enable+0x88>)
    8d46:	447b      	add	r3, pc
    8d48:	2500      	movs	r5, #0
    8d4a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    8d4c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    8d4e:	4b19      	ldr	r3, [pc, #100]	; (8db4 <udi_cdc_data_enable+0x8c>)
    8d50:	447b      	add	r3, pc
    8d52:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    8d54:	2000      	movs	r0, #0
    8d56:	4b18      	ldr	r3, [pc, #96]	; (8db8 <udi_cdc_data_enable+0x90>)
    8d58:	447b      	add	r3, pc
    8d5a:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    8d5c:	4b17      	ldr	r3, [pc, #92]	; (8dbc <udi_cdc_data_enable+0x94>)
    8d5e:	447b      	add	r3, pc
    8d60:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    8d62:	4b17      	ldr	r3, [pc, #92]	; (8dc0 <udi_cdc_data_enable+0x98>)
    8d64:	447b      	add	r3, pc
    8d66:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    8d68:	4b16      	ldr	r3, [pc, #88]	; (8dc4 <udi_cdc_data_enable+0x9c>)
    8d6a:	447b      	add	r3, pc
    8d6c:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    8d6e:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    8d70:	4b15      	ldr	r3, [pc, #84]	; (8dc8 <udi_cdc_data_enable+0xa0>)
    8d72:	447b      	add	r3, pc
    8d74:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    8d76:	2000      	movs	r0, #0
    8d78:	4b14      	ldr	r3, [pc, #80]	; (8dcc <udi_cdc_data_enable+0xa4>)
    8d7a:	447b      	add	r3, pc
    8d7c:	4798      	blx	r3
    8d7e:	2800      	cmp	r0, #0
    8d80:	d008      	beq.n	8d94 <udi_cdc_data_enable+0x6c>
	udi_cdc_nb_data_enabled++;
    8d82:	4a13      	ldr	r2, [pc, #76]	; (8dd0 <udi_cdc_data_enable+0xa8>)
    8d84:	447a      	add	r2, pc
    8d86:	7813      	ldrb	r3, [r2, #0]
    8d88:	3301      	adds	r3, #1
    8d8a:	b2db      	uxtb	r3, r3
    8d8c:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    8d8e:	7813      	ldrb	r3, [r2, #0]
    8d90:	2b01      	cmp	r3, #1
    8d92:	d000      	beq.n	8d96 <udi_cdc_data_enable+0x6e>
}
    8d94:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
    8d96:	2201      	movs	r2, #1
    8d98:	4b0e      	ldr	r3, [pc, #56]	; (8dd4 <udi_cdc_data_enable+0xac>)
    8d9a:	447b      	add	r3, pc
    8d9c:	701a      	strb	r2, [r3, #0]
    8d9e:	e7f9      	b.n	8d94 <udi_cdc_data_enable+0x6c>
    8da0:	1fff7c02 	.word	0x1fff7c02
    8da4:	1fff7d24 	.word	0x1fff7d24
    8da8:	1fff7c8e 	.word	0x1fff7c8e
    8dac:	1fff7d10 	.word	0x1fff7d10
    8db0:	1fff7d06 	.word	0x1fff7d06
    8db4:	1fff7d04 	.word	0x1fff7d04
    8db8:	fffffc05 	.word	0xfffffc05
    8dbc:	1fff7c62 	.word	0x1fff7c62
    8dc0:	1fff7c54 	.word	0x1fff7c54
    8dc4:	1fff7c4a 	.word	0x1fff7c4a
    8dc8:	1fff7c4a 	.word	0x1fff7c4a
    8dcc:	fffffeaf 	.word	0xfffffeaf
    8dd0:	1fff7bac 	.word	0x1fff7bac
    8dd4:	1fff7b8a 	.word	0x1fff7b8a

00008dd8 <udi_cdc_data_received>:
{
    8dd8:	b530      	push	{r4, r5, lr}
    8dda:	b085      	sub	sp, #20
    8ddc:	0014      	movs	r4, r2
    8dde:	4d15      	ldr	r5, [pc, #84]	; (8e34 <udi_cdc_data_received+0x5c>)
    8de0:	447d      	add	r5, pc
	if (UDD_EP_TRANSFER_OK != status) {
    8de2:	2800      	cmp	r0, #0
    8de4:	d114      	bne.n	8e10 <udi_cdc_data_received+0x38>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    8de6:	4b14      	ldr	r3, [pc, #80]	; (8e38 <udi_cdc_data_received+0x60>)
    8de8:	447b      	add	r3, pc
    8dea:	781a      	ldrb	r2, [r3, #0]
    8dec:	4253      	negs	r3, r2
    8dee:	415a      	adcs	r2, r3
    8df0:	b2d2      	uxtb	r2, r2
	if (!n) {
    8df2:	2900      	cmp	r1, #0
    8df4:	d00e      	beq.n	8e14 <udi_cdc_data_received+0x3c>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    8df6:	b289      	uxth	r1, r1
    8df8:	0052      	lsls	r2, r2, #1
    8dfa:	4b10      	ldr	r3, [pc, #64]	; (8e3c <udi_cdc_data_received+0x64>)
    8dfc:	447b      	add	r3, pc
    8dfe:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    8e00:	2200      	movs	r2, #0
    8e02:	4b0f      	ldr	r3, [pc, #60]	; (8e40 <udi_cdc_data_received+0x68>)
    8e04:	447b      	add	r3, pc
    8e06:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
    8e08:	2000      	movs	r0, #0
    8e0a:	4b0e      	ldr	r3, [pc, #56]	; (8e44 <udi_cdc_data_received+0x6c>)
    8e0c:	447b      	add	r3, pc
    8e0e:	4798      	blx	r3
}
    8e10:	b005      	add	sp, #20
    8e12:	bd30      	pop	{r4, r5, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
    8e14:	0192      	lsls	r2, r2, #6
    8e16:	4b0c      	ldr	r3, [pc, #48]	; (8e48 <udi_cdc_data_received+0x70>)
    8e18:	447b      	add	r3, pc
    8e1a:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    8e1c:	4b0b      	ldr	r3, [pc, #44]	; (8e4c <udi_cdc_data_received+0x74>)
    8e1e:	447b      	add	r3, pc
    8e20:	9300      	str	r3, [sp, #0]
    8e22:	2340      	movs	r3, #64	; 0x40
    8e24:	3101      	adds	r1, #1
    8e26:	0020      	movs	r0, r4
    8e28:	4c09      	ldr	r4, [pc, #36]	; (8e50 <udi_cdc_data_received+0x78>)
    8e2a:	592c      	ldr	r4, [r5, r4]
    8e2c:	9403      	str	r4, [sp, #12]
    8e2e:	47a0      	blx	r4
		return;
    8e30:	e7ee      	b.n	8e10 <udi_cdc_data_received+0x38>
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	00009bac 	.word	0x00009bac
    8e38:	1fff7bd0 	.word	0x1fff7bd0
    8e3c:	1fff7bb8 	.word	0x1fff7bb8
    8e40:	1fff7bbc 	.word	0x1fff7bbc
    8e44:	fffffe1d 	.word	0xfffffe1d
    8e48:	1fff7b1c 	.word	0x1fff7b1c
    8e4c:	ffffffb7 	.word	0xffffffb7
    8e50:	000000c0 	.word	0x000000c0

00008e54 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    8e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e56:	b085      	sub	sp, #20
    8e58:	4c28      	ldr	r4, [pc, #160]	; (8efc <udi_cdc_multi_getc+0xa8>)
    8e5a:	447c      	add	r4, pc

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    8e5c:	4b28      	ldr	r3, [pc, #160]	; (8f00 <udi_cdc_multi_getc+0xac>)
    8e5e:	447b      	add	r3, pc
    8e60:	799d      	ldrb	r5, [r3, #6]
    8e62:	3d09      	subs	r5, #9
    8e64:	426b      	negs	r3, r5
    8e66:	415d      	adcs	r5, r3
    8e68:	b2ed      	uxtb	r5, r5
	int rx_data = 0;
    8e6a:	2000      	movs	r0, #0
    8e6c:	e006      	b.n	8e7c <udi_cdc_multi_getc+0x28>
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
    8e6e:	428b      	cmp	r3, r1
    8e70:	d330      	bcc.n	8ed4 <udi_cdc_multi_getc+0x80>
		if (!udi_cdc_data_running) {
    8e72:	4b24      	ldr	r3, [pc, #144]	; (8f04 <udi_cdc_multi_getc+0xb0>)
    8e74:	447b      	add	r3, pc
    8e76:	781b      	ldrb	r3, [r3, #0]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d027      	beq.n	8ecc <udi_cdc_multi_getc+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8e7c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8e80:	425a      	negs	r2, r3
    8e82:	4153      	adcs	r3, r2
    8e84:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8e86:	b672      	cpsid	i
    8e88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8e8c:	4b1e      	ldr	r3, [pc, #120]	; (8f08 <udi_cdc_multi_getc+0xb4>)
    8e8e:	58e3      	ldr	r3, [r4, r3]
    8e90:	9301      	str	r3, [sp, #4]
    8e92:	2300      	movs	r3, #0
    8e94:	9a01      	ldr	r2, [sp, #4]
    8e96:	7013      	strb	r3, [r2, #0]
	return flags;
    8e98:	9f03      	ldr	r7, [sp, #12]
	pos = udi_cdc_rx_pos[port];
    8e9a:	4b1c      	ldr	r3, [pc, #112]	; (8f0c <udi_cdc_multi_getc+0xb8>)
    8e9c:	447b      	add	r3, pc
    8e9e:	881b      	ldrh	r3, [r3, #0]
    8ea0:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
    8ea2:	4a1b      	ldr	r2, [pc, #108]	; (8f10 <udi_cdc_multi_getc+0xbc>)
    8ea4:	447a      	add	r2, pc
    8ea6:	7812      	ldrb	r2, [r2, #0]
    8ea8:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    8eaa:	0056      	lsls	r6, r2, #1
    8eac:	4919      	ldr	r1, [pc, #100]	; (8f14 <udi_cdc_multi_getc+0xc0>)
    8eae:	4479      	add	r1, pc
    8eb0:	5a71      	ldrh	r1, [r6, r1]
    8eb2:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
    8eb4:	2f00      	cmp	r7, #0
    8eb6:	d0da      	beq.n	8e6e <udi_cdc_multi_getc+0x1a>
		cpu_irq_enable();
    8eb8:	4e13      	ldr	r6, [pc, #76]	; (8f08 <udi_cdc_multi_getc+0xb4>)
    8eba:	59a6      	ldr	r6, [r4, r6]
    8ebc:	9601      	str	r6, [sp, #4]
    8ebe:	2601      	movs	r6, #1
    8ec0:	9f01      	ldr	r7, [sp, #4]
    8ec2:	703e      	strb	r6, [r7, #0]
    8ec4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8ec8:	b662      	cpsie	i
    8eca:	e7d0      	b.n	8e6e <udi_cdc_multi_getc+0x1a>
			return 0;
    8ecc:	2600      	movs	r6, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    8ece:	0030      	movs	r0, r6
    8ed0:	b005      	add	sp, #20
    8ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    8ed4:	0192      	lsls	r2, r2, #6
    8ed6:	4910      	ldr	r1, [pc, #64]	; (8f18 <udi_cdc_multi_getc+0xc4>)
    8ed8:	4479      	add	r1, pc
    8eda:	188a      	adds	r2, r1, r2
    8edc:	5cd6      	ldrb	r6, [r2, r3]
    8ede:	4306      	orrs	r6, r0
	udi_cdc_rx_pos[port] = pos+1;
    8ee0:	3301      	adds	r3, #1
    8ee2:	b29b      	uxth	r3, r3
    8ee4:	4a0d      	ldr	r2, [pc, #52]	; (8f1c <udi_cdc_multi_getc+0xc8>)
    8ee6:	447a      	add	r2, pc
    8ee8:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
    8eea:	2000      	movs	r0, #0
    8eec:	4b0c      	ldr	r3, [pc, #48]	; (8f20 <udi_cdc_multi_getc+0xcc>)
    8eee:	447b      	add	r3, pc
    8ef0:	4798      	blx	r3
	if (b_databit_9) {
    8ef2:	2d00      	cmp	r5, #0
    8ef4:	d0eb      	beq.n	8ece <udi_cdc_multi_getc+0x7a>
		rx_data = rx_data << 8;
    8ef6:	0230      	lsls	r0, r6, #8
		b_databit_9 = false;
    8ef8:	2500      	movs	r5, #0
		goto udi_cdc_getc_process_one_byte;
    8efa:	e7bf      	b.n	8e7c <udi_cdc_multi_getc+0x28>
    8efc:	00009b32 	.word	0x00009b32
    8f00:	1fff7aca 	.word	0x1fff7aca
    8f04:	1fff7ab0 	.word	0x1fff7ab0
    8f08:	0000016c 	.word	0x0000016c
    8f0c:	1fff7b20 	.word	0x1fff7b20
    8f10:	1fff7b14 	.word	0x1fff7b14
    8f14:	1fff7b06 	.word	0x1fff7b06
    8f18:	1fff7a5c 	.word	0x1fff7a5c
    8f1c:	1fff7ad6 	.word	0x1fff7ad6
    8f20:	fffffd3b 	.word	0xfffffd3b

00008f24 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    8f24:	b500      	push	{lr}
    8f26:	b083      	sub	sp, #12
    8f28:	4b04      	ldr	r3, [pc, #16]	; (8f3c <udi_cdc_getc+0x18>)
    8f2a:	447b      	add	r3, pc
	return udi_cdc_multi_getc(0);
    8f2c:	2000      	movs	r0, #0
    8f2e:	4a04      	ldr	r2, [pc, #16]	; (8f40 <udi_cdc_getc+0x1c>)
    8f30:	589b      	ldr	r3, [r3, r2]
    8f32:	9301      	str	r3, [sp, #4]
    8f34:	4798      	blx	r3
}
    8f36:	b003      	add	sp, #12
    8f38:	bd00      	pop	{pc}
    8f3a:	46c0      	nop			; (mov r8, r8)
    8f3c:	00009a62 	.word	0x00009a62
    8f40:	0000032c 	.word	0x0000032c

00008f44 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    8f44:	b510      	push	{r4, lr}
    8f46:	b084      	sub	sp, #16
    8f48:	4a1f      	ldr	r2, [pc, #124]	; (8fc8 <udi_cdc_multi_get_free_tx_buffer+0x84>)
    8f4a:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8f4c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8f50:	4259      	negs	r1, r3
    8f52:	414b      	adcs	r3, r1
    8f54:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    8f56:	b672      	cpsid	i
    8f58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8f5c:	4b1b      	ldr	r3, [pc, #108]	; (8fcc <udi_cdc_multi_get_free_tx_buffer+0x88>)
    8f5e:	58d3      	ldr	r3, [r2, r3]
    8f60:	9301      	str	r3, [sp, #4]
    8f62:	2300      	movs	r3, #0
    8f64:	9901      	ldr	r1, [sp, #4]
    8f66:	700b      	strb	r3, [r1, #0]
	return flags;
    8f68:	9c03      	ldr	r4, [sp, #12]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    8f6a:	4b19      	ldr	r3, [pc, #100]	; (8fd0 <udi_cdc_multi_get_free_tx_buffer+0x8c>)
    8f6c:	447b      	add	r3, pc
    8f6e:	781b      	ldrb	r3, [r3, #0]
    8f70:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    8f72:	0058      	lsls	r0, r3, #1
    8f74:	4917      	ldr	r1, [pc, #92]	; (8fd4 <udi_cdc_multi_get_free_tx_buffer+0x90>)
    8f76:	4479      	add	r1, pc
    8f78:	5a41      	ldrh	r1, [r0, r1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    8f7a:	2940      	cmp	r1, #64	; 0x40
    8f7c:	d00e      	beq.n	8f9c <udi_cdc_multi_get_free_tx_buffer+0x58>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    8f7e:	2040      	movs	r0, #64	; 0x40
    8f80:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
    8f82:	2c00      	cmp	r4, #0
    8f84:	d008      	beq.n	8f98 <udi_cdc_multi_get_free_tx_buffer+0x54>
		cpu_irq_enable();
    8f86:	4b11      	ldr	r3, [pc, #68]	; (8fcc <udi_cdc_multi_get_free_tx_buffer+0x88>)
    8f88:	58d3      	ldr	r3, [r2, r3]
    8f8a:	9301      	str	r3, [sp, #4]
    8f8c:	2301      	movs	r3, #1
    8f8e:	9a01      	ldr	r2, [sp, #4]
    8f90:	7013      	strb	r3, [r2, #0]
    8f92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8f96:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
    8f98:	b004      	add	sp, #16
    8f9a:	bd10      	pop	{r4, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
    8f9c:	480e      	ldr	r0, [pc, #56]	; (8fd8 <udi_cdc_multi_get_free_tx_buffer+0x94>)
    8f9e:	4478      	add	r0, pc
    8fa0:	7800      	ldrb	r0, [r0, #0]
    8fa2:	2800      	cmp	r0, #0
    8fa4:	d1eb      	bne.n	8f7e <udi_cdc_multi_get_free_tx_buffer+0x3a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    8fa6:	480d      	ldr	r0, [pc, #52]	; (8fdc <udi_cdc_multi_get_free_tx_buffer+0x98>)
    8fa8:	4478      	add	r0, pc
    8faa:	7800      	ldrb	r0, [r0, #0]
    8fac:	2800      	cmp	r0, #0
    8fae:	d1e6      	bne.n	8f7e <udi_cdc_multi_get_free_tx_buffer+0x3a>
			udi_cdc_tx_both_buf_to_send[port] = true;
    8fb0:	3001      	adds	r0, #1
    8fb2:	490b      	ldr	r1, [pc, #44]	; (8fe0 <udi_cdc_multi_get_free_tx_buffer+0x9c>)
    8fb4:	4479      	add	r1, pc
    8fb6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    8fb8:	4259      	negs	r1, r3
    8fba:	414b      	adcs	r3, r1
    8fbc:	b2db      	uxtb	r3, r3
    8fbe:	4909      	ldr	r1, [pc, #36]	; (8fe4 <udi_cdc_multi_get_free_tx_buffer+0xa0>)
    8fc0:	4479      	add	r1, pc
    8fc2:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
    8fc4:	2100      	movs	r1, #0
    8fc6:	e7da      	b.n	8f7e <udi_cdc_multi_get_free_tx_buffer+0x3a>
    8fc8:	00009a42 	.word	0x00009a42
    8fcc:	0000016c 	.word	0x0000016c
    8fd0:	1fff7ae4 	.word	0x1fff7ae4
    8fd4:	1fff7ad6 	.word	0x1fff7ad6
    8fd8:	1fff7aba 	.word	0x1fff7aba
    8fdc:	1fff7a20 	.word	0x1fff7a20
    8fe0:	1fff7a14 	.word	0x1fff7a14
    8fe4:	1fff7a90 	.word	0x1fff7a90

00008fe8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    8fe8:	b500      	push	{lr}
    8fea:	b083      	sub	sp, #12
    8fec:	4b05      	ldr	r3, [pc, #20]	; (9004 <udi_cdc_multi_is_tx_ready+0x1c>)
    8fee:	447b      	add	r3, pc
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    8ff0:	4a05      	ldr	r2, [pc, #20]	; (9008 <udi_cdc_multi_is_tx_ready+0x20>)
    8ff2:	589b      	ldr	r3, [r3, r2]
    8ff4:	9301      	str	r3, [sp, #4]
    8ff6:	4798      	blx	r3
    8ff8:	1e43      	subs	r3, r0, #1
    8ffa:	4198      	sbcs	r0, r3
    8ffc:	b2c0      	uxtb	r0, r0
}
    8ffe:	b003      	add	sp, #12
    9000:	bd00      	pop	{pc}
    9002:	46c0      	nop			; (mov r8, r8)
    9004:	0000999e 	.word	0x0000999e
    9008:	000002c8 	.word	0x000002c8

0000900c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    900c:	b5f0      	push	{r4, r5, r6, r7, lr}
    900e:	46c6      	mov	lr, r8
    9010:	b500      	push	{lr}
    9012:	b084      	sub	sp, #16
    9014:	000d      	movs	r5, r1
    9016:	4c25      	ldr	r4, [pc, #148]	; (90ac <udi_cdc_multi_putc+0xa0>)
    9018:	447c      	add	r4, pc

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    901a:	4b25      	ldr	r3, [pc, #148]	; (90b0 <udi_cdc_multi_putc+0xa4>)
    901c:	447b      	add	r3, pc
    901e:	799e      	ldrb	r6, [r3, #6]
    9020:	3e09      	subs	r6, #9
    9022:	4273      	negs	r3, r6
    9024:	415e      	adcs	r6, r3
    9026:	b2f6      	uxtb	r6, r6
    9028:	e02e      	b.n	9088 <udi_cdc_multi_putc+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    902a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    902e:	425a      	negs	r2, r3
    9030:	4153      	adcs	r3, r2
    9032:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    9034:	b672      	cpsid	i
    9036:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    903a:	4b1e      	ldr	r3, [pc, #120]	; (90b4 <udi_cdc_multi_putc+0xa8>)
    903c:	58e3      	ldr	r3, [r4, r3]
    903e:	9301      	str	r3, [sp, #4]
    9040:	2300      	movs	r3, #0
    9042:	9a01      	ldr	r2, [sp, #4]
    9044:	7013      	strb	r3, [r2, #0]
	return flags;
    9046:	9b03      	ldr	r3, [sp, #12]
    9048:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    904a:	4b1b      	ldr	r3, [pc, #108]	; (90b8 <udi_cdc_multi_putc+0xac>)
    904c:	447b      	add	r3, pc
    904e:	781b      	ldrb	r3, [r3, #0]
    9050:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    9052:	4a1a      	ldr	r2, [pc, #104]	; (90bc <udi_cdc_multi_putc+0xb0>)
    9054:	447a      	add	r2, pc
    9056:	0058      	lsls	r0, r3, #1
    9058:	5a81      	ldrh	r1, [r0, r2]
    905a:	1c4f      	adds	r7, r1, #1
    905c:	5287      	strh	r7, [r0, r2]
    905e:	019b      	lsls	r3, r3, #6
    9060:	4a17      	ldr	r2, [pc, #92]	; (90c0 <udi_cdc_multi_putc+0xb4>)
    9062:	447a      	add	r2, pc
    9064:	18d3      	adds	r3, r2, r3
    9066:	545d      	strb	r5, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
    9068:	4643      	mov	r3, r8
    906a:	2b00      	cmp	r3, #0
    906c:	d008      	beq.n	9080 <udi_cdc_multi_putc+0x74>
		cpu_irq_enable();
    906e:	4b11      	ldr	r3, [pc, #68]	; (90b4 <udi_cdc_multi_putc+0xa8>)
    9070:	58e3      	ldr	r3, [r4, r3]
    9072:	9301      	str	r3, [sp, #4]
    9074:	2301      	movs	r3, #1
    9076:	9a01      	ldr	r2, [sp, #4]
    9078:	7013      	strb	r3, [r2, #0]
    907a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    907e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
    9080:	2e00      	cmp	r6, #0
    9082:	d011      	beq.n	90a8 <udi_cdc_multi_putc+0x9c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    9084:	122d      	asrs	r5, r5, #8
		b_databit_9 = false;
    9086:	2600      	movs	r6, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
    9088:	2000      	movs	r0, #0
    908a:	4b0e      	ldr	r3, [pc, #56]	; (90c4 <udi_cdc_multi_putc+0xb8>)
    908c:	58e3      	ldr	r3, [r4, r3]
    908e:	9301      	str	r3, [sp, #4]
    9090:	4798      	blx	r3
    9092:	2800      	cmp	r0, #0
    9094:	d1c9      	bne.n	902a <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
    9096:	4b0c      	ldr	r3, [pc, #48]	; (90c8 <udi_cdc_multi_putc+0xbc>)
    9098:	447b      	add	r3, pc
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	2b00      	cmp	r3, #0
    909e:	d1f3      	bne.n	9088 <udi_cdc_multi_putc+0x7c>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    90a0:	b004      	add	sp, #16
    90a2:	bc04      	pop	{r2}
    90a4:	4690      	mov	r8, r2
    90a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    90a8:	2001      	movs	r0, #1
    90aa:	e7f9      	b.n	90a0 <udi_cdc_multi_putc+0x94>
    90ac:	00009974 	.word	0x00009974
    90b0:	1fff790c 	.word	0x1fff790c
    90b4:	0000016c 	.word	0x0000016c
    90b8:	1fff7a04 	.word	0x1fff7a04
    90bc:	1fff79f8 	.word	0x1fff79f8
    90c0:	1fff796a 	.word	0x1fff796a
    90c4:	000004b4 	.word	0x000004b4
    90c8:	1fff788c 	.word	0x1fff788c

000090cc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    90cc:	b500      	push	{lr}
    90ce:	b083      	sub	sp, #12
    90d0:	0001      	movs	r1, r0
    90d2:	4b04      	ldr	r3, [pc, #16]	; (90e4 <udi_cdc_putc+0x18>)
    90d4:	447b      	add	r3, pc
	return udi_cdc_multi_putc(0, value);
    90d6:	2000      	movs	r0, #0
    90d8:	4a03      	ldr	r2, [pc, #12]	; (90e8 <udi_cdc_putc+0x1c>)
    90da:	589b      	ldr	r3, [r3, r2]
    90dc:	9301      	str	r3, [sp, #4]
    90de:	4798      	blx	r3
}
    90e0:	b003      	add	sp, #12
    90e2:	bd00      	pop	{pc}
    90e4:	000098b8 	.word	0x000098b8
    90e8:	0000037c 	.word	0x0000037c

000090ec <udc_get_string_serial_name>:
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
	}
    90ec:	4801      	ldr	r0, [pc, #4]	; (90f4 <udc_get_string_serial_name+0x8>)
    90ee:	4478      	add	r0, pc
    90f0:	4770      	bx	lr
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	0000968a 	.word	0x0000968a

000090f8 <udc_get_eof_conf>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    90f8:	4b04      	ldr	r3, [pc, #16]	; (910c <udc_get_eof_conf+0x14>)
    90fa:	447b      	add	r3, pc
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	6818      	ldr	r0, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    9100:	7882      	ldrb	r2, [r0, #2]
    9102:	78c3      	ldrb	r3, [r0, #3]
    9104:	021b      	lsls	r3, r3, #8
    9106:	4313      	orrs	r3, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    9108:	18c0      	adds	r0, r0, r3
}
    910a:	4770      	bx	lr
    910c:	1fff797a 	.word	0x1fff797a

00009110 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    9110:	b570      	push	{r4, r5, r6, lr}
    9112:	0004      	movs	r4, r0
    9114:	000d      	movs	r5, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    9116:	4b0a      	ldr	r3, [pc, #40]	; (9140 <udc_next_desc_in_iface+0x30>)
    9118:	447b      	add	r3, pc
    911a:	4798      	blx	r3
    911c:	0002      	movs	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    911e:	7820      	ldrb	r0, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    9120:	1820      	adds	r0, r4, r0
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    9122:	4290      	cmp	r0, r2
    9124:	d207      	bcs.n	9136 <udc_next_desc_in_iface+0x26>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    9126:	7843      	ldrb	r3, [r0, #1]
    9128:	2b04      	cmp	r3, #4
    912a:	d006      	beq.n	913a <udc_next_desc_in_iface+0x2a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    912c:	42ab      	cmp	r3, r5
    912e:	d003      	beq.n	9138 <udc_next_desc_in_iface+0x28>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    9130:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    9132:	18c0      	adds	r0, r0, r3
    9134:	e7f5      	b.n	9122 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
    9136:	2000      	movs	r0, #0
}
    9138:	bd70      	pop	{r4, r5, r6, pc}
	return NULL; // No specific descriptor found
    913a:	2000      	movs	r0, #0
    913c:	e7fc      	b.n	9138 <udc_next_desc_in_iface+0x28>
    913e:	46c0      	nop			; (mov r8, r8)
    9140:	ffffffdd 	.word	0xffffffdd

00009144 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    9144:	b570      	push	{r4, r5, r6, lr}
    9146:	0005      	movs	r5, r0
    9148:	000c      	movs	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    914a:	4b17      	ldr	r3, [pc, #92]	; (91a8 <udc_update_iface_desc+0x64>)
    914c:	447b      	add	r3, pc
    914e:	781b      	ldrb	r3, [r3, #0]
    9150:	2b00      	cmp	r3, #0
    9152:	d024      	beq.n	919e <udc_update_iface_desc+0x5a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    9154:	4b15      	ldr	r3, [pc, #84]	; (91ac <udc_update_iface_desc+0x68>)
    9156:	447b      	add	r3, pc
    9158:	681b      	ldr	r3, [r3, #0]
    915a:	681b      	ldr	r3, [r3, #0]
    915c:	791a      	ldrb	r2, [r3, #4]
    915e:	4282      	cmp	r2, r0
    9160:	d91f      	bls.n	91a2 <udc_update_iface_desc+0x5e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    9162:	4a13      	ldr	r2, [pc, #76]	; (91b0 <udc_update_iface_desc+0x6c>)
    9164:	447a      	add	r2, pc
    9166:	6013      	str	r3, [r2, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    9168:	4b12      	ldr	r3, [pc, #72]	; (91b4 <udc_update_iface_desc+0x70>)
    916a:	447b      	add	r3, pc
    916c:	4798      	blx	r3
	while (ptr_end_desc >
    916e:	e004      	b.n	917a <udc_update_iface_desc+0x36>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    9170:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    9172:	189b      	adds	r3, r3, r2
    9174:	4a10      	ldr	r2, [pc, #64]	; (91b8 <udc_update_iface_desc+0x74>)
    9176:	447a      	add	r2, pc
    9178:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    917a:	4b10      	ldr	r3, [pc, #64]	; (91bc <udc_update_iface_desc+0x78>)
    917c:	447b      	add	r3, pc
    917e:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
    9180:	4298      	cmp	r0, r3
    9182:	d90a      	bls.n	919a <udc_update_iface_desc+0x56>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    9184:	785a      	ldrb	r2, [r3, #1]
    9186:	2a04      	cmp	r2, #4
    9188:	d1f2      	bne.n	9170 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    918a:	789a      	ldrb	r2, [r3, #2]
    918c:	4295      	cmp	r5, r2
    918e:	d1ef      	bne.n	9170 <udc_update_iface_desc+0x2c>
					udc_ptr_iface->bAlternateSetting)) {
    9190:	78da      	ldrb	r2, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    9192:	42a2      	cmp	r2, r4
    9194:	d1ec      	bne.n	9170 <udc_update_iface_desc+0x2c>
				return true; // Interface found
    9196:	2001      	movs	r0, #1
    9198:	e002      	b.n	91a0 <udc_update_iface_desc+0x5c>
	}
	return false; // Interface not found
    919a:	2000      	movs	r0, #0
    919c:	e000      	b.n	91a0 <udc_update_iface_desc+0x5c>
		return false;
    919e:	2000      	movs	r0, #0
}
    91a0:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    91a2:	2000      	movs	r0, #0
    91a4:	e7fc      	b.n	91a0 <udc_update_iface_desc+0x5c>
    91a6:	46c0      	nop			; (mov r8, r8)
    91a8:	1fff7924 	.word	0x1fff7924
    91ac:	1fff791e 	.word	0x1fff791e
    91b0:	1fff7914 	.word	0x1fff7914
    91b4:	ffffff8b 	.word	0xffffff8b
    91b8:	1fff7902 	.word	0x1fff7902
    91bc:	1fff78fc 	.word	0x1fff78fc

000091c0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    91c0:	b082      	sub	sp, #8
    91c2:	4b0d      	ldr	r3, [pc, #52]	; (91f8 <udc_req_std_dev_clear_feature+0x38>)
    91c4:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    91c6:	4a0d      	ldr	r2, [pc, #52]	; (91fc <udc_req_std_dev_clear_feature+0x3c>)
    91c8:	589a      	ldr	r2, [r3, r2]
    91ca:	9201      	str	r2, [sp, #4]
    91cc:	88d2      	ldrh	r2, [r2, #6]
    91ce:	2a00      	cmp	r2, #0
    91d0:	d10f      	bne.n	91f2 <udc_req_std_dev_clear_feature+0x32>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    91d2:	4a0a      	ldr	r2, [pc, #40]	; (91fc <udc_req_std_dev_clear_feature+0x3c>)
    91d4:	589b      	ldr	r3, [r3, r2]
    91d6:	9301      	str	r3, [sp, #4]
    91d8:	885b      	ldrh	r3, [r3, #2]
    91da:	2b01      	cmp	r3, #1
    91dc:	d001      	beq.n	91e2 <udc_req_std_dev_clear_feature+0x22>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    91de:	2000      	movs	r0, #0
    91e0:	e008      	b.n	91f4 <udc_req_std_dev_clear_feature+0x34>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    91e2:	4a07      	ldr	r2, [pc, #28]	; (9200 <udc_req_std_dev_clear_feature+0x40>)
    91e4:	447a      	add	r2, pc
    91e6:	8813      	ldrh	r3, [r2, #0]
    91e8:	2102      	movs	r1, #2
    91ea:	438b      	bics	r3, r1
    91ec:	8013      	strh	r3, [r2, #0]
		return true;
    91ee:	2001      	movs	r0, #1
    91f0:	e000      	b.n	91f4 <udc_req_std_dev_clear_feature+0x34>
		return false;
    91f2:	2000      	movs	r0, #0
}
    91f4:	b002      	add	sp, #8
    91f6:	4770      	bx	lr
    91f8:	000097c8 	.word	0x000097c8
    91fc:	00000308 	.word	0x00000308
    9200:	1fff7882 	.word	0x1fff7882

00009204 <udc_req_std_dev_set_feature>:
#endif
	default:
		break;
	}
	return false;
}
    9204:	2000      	movs	r0, #0
    9206:	4770      	bx	lr

00009208 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    9208:	b082      	sub	sp, #8
    920a:	4b09      	ldr	r3, [pc, #36]	; (9230 <udc_req_std_dev_set_address+0x28>)
    920c:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    920e:	4a09      	ldr	r2, [pc, #36]	; (9234 <udc_req_std_dev_set_address+0x2c>)
    9210:	589a      	ldr	r2, [r3, r2]
    9212:	9201      	str	r2, [sp, #4]
    9214:	88d2      	ldrh	r2, [r2, #6]
    9216:	2a00      	cmp	r2, #0
    9218:	d107      	bne.n	922a <udc_req_std_dev_set_address+0x22>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    921a:	4a06      	ldr	r2, [pc, #24]	; (9234 <udc_req_std_dev_set_address+0x2c>)
    921c:	589b      	ldr	r3, [r3, r2]
    921e:	4a06      	ldr	r2, [pc, #24]	; (9238 <udc_req_std_dev_set_address+0x30>)
    9220:	447a      	add	r2, pc
    9222:	611a      	str	r2, [r3, #16]
	return true;
    9224:	2001      	movs	r0, #1
}
    9226:	b002      	add	sp, #8
    9228:	4770      	bx	lr
		return false;
    922a:	2000      	movs	r0, #0
    922c:	e7fb      	b.n	9226 <udc_req_std_dev_set_address+0x1e>
    922e:	46c0      	nop			; (mov r8, r8)
    9230:	00009780 	.word	0x00009780
    9234:	00000308 	.word	0x00000308
    9238:	00000459 	.word	0x00000459

0000923c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    923c:	b530      	push	{r4, r5, lr}
    923e:	b083      	sub	sp, #12
    9240:	4b17      	ldr	r3, [pc, #92]	; (92a0 <udc_req_iface+0x64>)
    9242:	447b      	add	r3, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    9244:	4a17      	ldr	r2, [pc, #92]	; (92a4 <udc_req_iface+0x68>)
    9246:	447a      	add	r2, pc
    9248:	7812      	ldrb	r2, [r2, #0]
    924a:	2a00      	cmp	r2, #0
    924c:	d025      	beq.n	929a <udc_req_iface+0x5e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    924e:	4a16      	ldr	r2, [pc, #88]	; (92a8 <udc_req_iface+0x6c>)
    9250:	589b      	ldr	r3, [r3, r2]
    9252:	9301      	str	r3, [sp, #4]
    9254:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    9256:	4b15      	ldr	r3, [pc, #84]	; (92ac <udc_req_iface+0x70>)
    9258:	447b      	add	r3, pc
    925a:	681b      	ldr	r3, [r3, #0]
    925c:	681b      	ldr	r3, [r3, #0]
    925e:	791b      	ldrb	r3, [r3, #4]
    9260:	429c      	cmp	r4, r3
    9262:	d301      	bcc.n	9268 <udc_req_iface+0x2c>
		return false;
    9264:	2000      	movs	r0, #0
    9266:	e019      	b.n	929c <udc_req_iface+0x60>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    9268:	2100      	movs	r1, #0
    926a:	0020      	movs	r0, r4
    926c:	4b10      	ldr	r3, [pc, #64]	; (92b0 <udc_req_iface+0x74>)
    926e:	447b      	add	r3, pc
    9270:	4798      	blx	r3
    9272:	2800      	cmp	r0, #0
    9274:	d012      	beq.n	929c <udc_req_iface+0x60>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    9276:	4b0f      	ldr	r3, [pc, #60]	; (92b4 <udc_req_iface+0x78>)
    9278:	447b      	add	r3, pc
    927a:	681b      	ldr	r3, [r3, #0]
    927c:	685a      	ldr	r2, [r3, #4]
    927e:	00a3      	lsls	r3, r4, #2
    9280:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    9282:	68eb      	ldr	r3, [r5, #12]
    9284:	4798      	blx	r3
    9286:	0001      	movs	r1, r0
    9288:	0020      	movs	r0, r4
    928a:	4b0b      	ldr	r3, [pc, #44]	; (92b8 <udc_req_iface+0x7c>)
    928c:	447b      	add	r3, pc
    928e:	4798      	blx	r3
    9290:	2800      	cmp	r0, #0
    9292:	d003      	beq.n	929c <udc_req_iface+0x60>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    9294:	68ab      	ldr	r3, [r5, #8]
    9296:	4798      	blx	r3
    9298:	e000      	b.n	929c <udc_req_iface+0x60>
		return false; // The device is not is configured state yet
    929a:	2000      	movs	r0, #0
}
    929c:	b003      	add	sp, #12
    929e:	bd30      	pop	{r4, r5, pc}
    92a0:	0000974a 	.word	0x0000974a
    92a4:	1fff782a 	.word	0x1fff782a
    92a8:	00000308 	.word	0x00000308
    92ac:	1fff781c 	.word	0x1fff781c
    92b0:	fffffed3 	.word	0xfffffed3
    92b4:	1fff77fc 	.word	0x1fff77fc
    92b8:	fffffeb5 	.word	0xfffffeb5

000092bc <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    92bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    92be:	4b12      	ldr	r3, [pc, #72]	; (9308 <udc_req_ep+0x4c>)
    92c0:	447b      	add	r3, pc
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	2b00      	cmp	r3, #0
    92c6:	d01c      	beq.n	9302 <udc_req_ep+0x46>
    92c8:	2400      	movs	r4, #0
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    92ca:	4b10      	ldr	r3, [pc, #64]	; (930c <udc_req_ep+0x50>)
    92cc:	447b      	add	r3, pc
    92ce:	681b      	ldr	r3, [r3, #0]
    92d0:	681a      	ldr	r2, [r3, #0]
    92d2:	7912      	ldrb	r2, [r2, #4]
    92d4:	4294      	cmp	r4, r2
    92d6:	d212      	bcs.n	92fe <udc_req_ep+0x42>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    92d8:	685a      	ldr	r2, [r3, #4]
    92da:	00a3      	lsls	r3, r4, #2
    92dc:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    92de:	68eb      	ldr	r3, [r5, #12]
    92e0:	4798      	blx	r3
    92e2:	0001      	movs	r1, r0
    92e4:	0020      	movs	r0, r4
    92e6:	4b0a      	ldr	r3, [pc, #40]	; (9310 <udc_req_ep+0x54>)
    92e8:	447b      	add	r3, pc
    92ea:	4798      	blx	r3
    92ec:	2800      	cmp	r0, #0
    92ee:	d009      	beq.n	9304 <udc_req_ep+0x48>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    92f0:	68ab      	ldr	r3, [r5, #8]
    92f2:	4798      	blx	r3
    92f4:	2800      	cmp	r0, #0
    92f6:	d105      	bne.n	9304 <udc_req_ep+0x48>
			iface_num++) {
    92f8:	3401      	adds	r4, #1
    92fa:	b2e4      	uxtb	r4, r4
    92fc:	e7e5      	b.n	92ca <udc_req_ep+0xe>
			return true;
		}
	}
	return false;
    92fe:	2000      	movs	r0, #0
    9300:	e000      	b.n	9304 <udc_req_ep+0x48>
		return false; // The device is not is configured state yet
    9302:	2000      	movs	r0, #0
}
    9304:	bd70      	pop	{r4, r5, r6, pc}
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	1fff77b0 	.word	0x1fff77b0
    930c:	1fff77a8 	.word	0x1fff77a8
    9310:	fffffe59 	.word	0xfffffe59

00009314 <udc_iface_disable>:
{
    9314:	b5f0      	push	{r4, r5, r6, r7, lr}
    9316:	b083      	sub	sp, #12
    9318:	0004      	movs	r4, r0
    931a:	4e16      	ldr	r6, [pc, #88]	; (9374 <udc_iface_disable+0x60>)
    931c:	447e      	add	r6, pc
	if (!udc_update_iface_desc(iface_num, 0)) {
    931e:	2100      	movs	r1, #0
    9320:	4b15      	ldr	r3, [pc, #84]	; (9378 <udc_iface_disable+0x64>)
    9322:	447b      	add	r3, pc
    9324:	4798      	blx	r3
    9326:	1e05      	subs	r5, r0, #0
    9328:	d102      	bne.n	9330 <udc_iface_disable+0x1c>
}
    932a:	0028      	movs	r0, r5
    932c:	b003      	add	sp, #12
    932e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    9330:	4b12      	ldr	r3, [pc, #72]	; (937c <udc_iface_disable+0x68>)
    9332:	447b      	add	r3, pc
    9334:	681b      	ldr	r3, [r3, #0]
    9336:	685a      	ldr	r2, [r3, #4]
    9338:	00a3      	lsls	r3, r4, #2
    933a:	58d7      	ldr	r7, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    933c:	68fb      	ldr	r3, [r7, #12]
    933e:	4798      	blx	r3
    9340:	0001      	movs	r1, r0
    9342:	0020      	movs	r0, r4
    9344:	4b0e      	ldr	r3, [pc, #56]	; (9380 <udc_iface_disable+0x6c>)
    9346:	447b      	add	r3, pc
    9348:	4798      	blx	r3
    934a:	1e05      	subs	r5, r0, #0
    934c:	d0ed      	beq.n	932a <udc_iface_disable+0x16>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    934e:	4b0d      	ldr	r3, [pc, #52]	; (9384 <udc_iface_disable+0x70>)
    9350:	447b      	add	r3, pc
    9352:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    9354:	2105      	movs	r1, #5
    9356:	0020      	movs	r0, r4
    9358:	4b0b      	ldr	r3, [pc, #44]	; (9388 <udc_iface_disable+0x74>)
    935a:	447b      	add	r3, pc
    935c:	4798      	blx	r3
    935e:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    9360:	d005      	beq.n	936e <udc_iface_disable+0x5a>
			udd_ep_free(ep_desc->bEndpointAddress);
    9362:	7880      	ldrb	r0, [r0, #2]
    9364:	4b09      	ldr	r3, [pc, #36]	; (938c <udc_iface_disable+0x78>)
    9366:	58f3      	ldr	r3, [r6, r3]
    9368:	9301      	str	r3, [sp, #4]
    936a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    936c:	e7f2      	b.n	9354 <udc_iface_disable+0x40>
	udi_api->disable();
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	4798      	blx	r3
	return true;
    9372:	e7da      	b.n	932a <udc_iface_disable+0x16>
    9374:	00009670 	.word	0x00009670
    9378:	fffffe1f 	.word	0xfffffe1f
    937c:	1fff7742 	.word	0x1fff7742
    9380:	fffffdfb 	.word	0xfffffdfb
    9384:	1fff7728 	.word	0x1fff7728
    9388:	fffffdb3 	.word	0xfffffdb3
    938c:	00000270 	.word	0x00000270

00009390 <udc_req_std_dev_get_status>:
{
    9390:	b500      	push	{lr}
    9392:	b083      	sub	sp, #12
    9394:	4b09      	ldr	r3, [pc, #36]	; (93bc <udc_req_std_dev_get_status+0x2c>)
    9396:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    9398:	4a09      	ldr	r2, [pc, #36]	; (93c0 <udc_req_std_dev_get_status+0x30>)
    939a:	589a      	ldr	r2, [r3, r2]
    939c:	9201      	str	r2, [sp, #4]
    939e:	88d2      	ldrh	r2, [r2, #6]
    93a0:	2a02      	cmp	r2, #2
    93a2:	d002      	beq.n	93aa <udc_req_std_dev_get_status+0x1a>
		return false;
    93a4:	2000      	movs	r0, #0
}
    93a6:	b003      	add	sp, #12
    93a8:	bd00      	pop	{pc}
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    93aa:	2102      	movs	r1, #2
    93ac:	4805      	ldr	r0, [pc, #20]	; (93c4 <udc_req_std_dev_get_status+0x34>)
    93ae:	4478      	add	r0, pc
    93b0:	4a05      	ldr	r2, [pc, #20]	; (93c8 <udc_req_std_dev_get_status+0x38>)
    93b2:	589b      	ldr	r3, [r3, r2]
    93b4:	9301      	str	r3, [sp, #4]
    93b6:	4798      	blx	r3
	return true;
    93b8:	2001      	movs	r0, #1
    93ba:	e7f4      	b.n	93a6 <udc_req_std_dev_get_status+0x16>
    93bc:	000095f6 	.word	0x000095f6
    93c0:	00000308 	.word	0x00000308
    93c4:	1fff76b8 	.word	0x1fff76b8
    93c8:	000000ac 	.word	0x000000ac

000093cc <udc_req_std_dev_get_str_desc>:
{
    93cc:	b570      	push	{r4, r5, r6, lr}
    93ce:	b082      	sub	sp, #8
    93d0:	4d21      	ldr	r5, [pc, #132]	; (9458 <udc_req_std_dev_get_str_desc+0x8c>)
    93d2:	447d      	add	r5, pc
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    93d4:	4b21      	ldr	r3, [pc, #132]	; (945c <udc_req_std_dev_get_str_desc+0x90>)
    93d6:	58eb      	ldr	r3, [r5, r3]
    93d8:	9301      	str	r3, [sp, #4]
    93da:	885b      	ldrh	r3, [r3, #2]
    93dc:	20ff      	movs	r0, #255	; 0xff
    93de:	4018      	ands	r0, r3
    93e0:	2803      	cmp	r0, #3
    93e2:	d837      	bhi.n	9454 <udc_req_std_dev_get_str_desc+0x88>
    93e4:	f006 f91c 	bl	f620 <__gnu_thumb1_case_uqi>
    93e8:	0f150206 	.word	0x0f150206
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    93ec:	260b      	movs	r6, #11
		str = udc_string_manufacturer_name;
    93ee:	4c1c      	ldr	r4, [pc, #112]	; (9460 <udc_req_std_dev_get_str_desc+0x94>)
    93f0:	447c      	add	r4, pc
    93f2:	e011      	b.n	9418 <udc_req_std_dev_get_str_desc+0x4c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    93f4:	2104      	movs	r1, #4
    93f6:	481b      	ldr	r0, [pc, #108]	; (9464 <udc_req_std_dev_get_str_desc+0x98>)
    93f8:	4478      	add	r0, pc
    93fa:	4b1b      	ldr	r3, [pc, #108]	; (9468 <udc_req_std_dev_get_str_desc+0x9c>)
    93fc:	58eb      	ldr	r3, [r5, r3]
    93fe:	9301      	str	r3, [sp, #4]
    9400:	4798      	blx	r3
	uint8_t str_length = 0;
    9402:	2600      	movs	r6, #0
		break;
    9404:	e008      	b.n	9418 <udc_req_std_dev_get_str_desc+0x4c>
		str = udc_get_string_serial_name();
    9406:	4b19      	ldr	r3, [pc, #100]	; (946c <udc_req_std_dev_get_str_desc+0xa0>)
    9408:	447b      	add	r3, pc
    940a:	4798      	blx	r3
    940c:	0004      	movs	r4, r0
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    940e:	2607      	movs	r6, #7
		break;
    9410:	e002      	b.n	9418 <udc_req_std_dev_get_str_desc+0x4c>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    9412:	2610      	movs	r6, #16
		str = udc_string_product_name;
    9414:	4c16      	ldr	r4, [pc, #88]	; (9470 <udc_req_std_dev_get_str_desc+0xa4>)
    9416:	447c      	add	r4, pc
	if (str_length) {
    9418:	2e00      	cmp	r6, #0
    941a:	d001      	beq.n	9420 <udc_req_std_dev_get_str_desc+0x54>
    941c:	2300      	movs	r3, #0
    941e:	e009      	b.n	9434 <udc_req_std_dev_get_str_desc+0x68>
	return true;
    9420:	2001      	movs	r0, #1
    9422:	e015      	b.n	9450 <udc_req_std_dev_get_str_desc+0x84>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    9424:	5ce1      	ldrb	r1, [r4, r3]
    9426:	0058      	lsls	r0, r3, #1
    9428:	4a12      	ldr	r2, [pc, #72]	; (9474 <udc_req_std_dev_get_str_desc+0xa8>)
    942a:	447a      	add	r2, pc
    942c:	1812      	adds	r2, r2, r0
    942e:	8051      	strh	r1, [r2, #2]
		for(i = 0; i < str_length; i++) {
    9430:	3301      	adds	r3, #1
    9432:	b2db      	uxtb	r3, r3
    9434:	42b3      	cmp	r3, r6
    9436:	d3f5      	bcc.n	9424 <udc_req_std_dev_get_str_desc+0x58>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    9438:	3601      	adds	r6, #1
    943a:	0076      	lsls	r6, r6, #1
    943c:	b2f1      	uxtb	r1, r6
    943e:	480e      	ldr	r0, [pc, #56]	; (9478 <udc_req_std_dev_get_str_desc+0xac>)
    9440:	4478      	add	r0, pc
    9442:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    9444:	b289      	uxth	r1, r1
    9446:	4b08      	ldr	r3, [pc, #32]	; (9468 <udc_req_std_dev_get_str_desc+0x9c>)
    9448:	58eb      	ldr	r3, [r5, r3]
    944a:	9301      	str	r3, [sp, #4]
    944c:	4798      	blx	r3
	return true;
    944e:	2001      	movs	r0, #1
}
    9450:	b002      	add	sp, #8
    9452:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    9454:	2000      	movs	r0, #0
    9456:	e7fb      	b.n	9450 <udc_req_std_dev_get_str_desc+0x84>
    9458:	000095ba 	.word	0x000095ba
    945c:	00000308 	.word	0x00000308
    9460:	1fff6e08 	.word	0x1fff6e08
    9464:	1fff6dfc 	.word	0x1fff6dfc
    9468:	000000ac 	.word	0x000000ac
    946c:	fffffce1 	.word	0xfffffce1
    9470:	1fff6dee 	.word	0x1fff6dee
    9474:	1fff6da6 	.word	0x1fff6da6
    9478:	1fff6d90 	.word	0x1fff6d90

0000947c <udc_req_std_dev_get_descriptor>:
{
    947c:	b510      	push	{r4, lr}
    947e:	b082      	sub	sp, #8
    9480:	4c2f      	ldr	r4, [pc, #188]	; (9540 <udc_req_std_dev_get_descriptor+0xc4>)
    9482:	447c      	add	r4, pc
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    9484:	4b2f      	ldr	r3, [pc, #188]	; (9544 <udc_req_std_dev_get_descriptor+0xc8>)
    9486:	58e3      	ldr	r3, [r4, r3]
    9488:	9301      	str	r3, [sp, #4]
    948a:	8858      	ldrh	r0, [r3, #2]
    948c:	b2c3      	uxtb	r3, r0
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    948e:	0a00      	lsrs	r0, r0, #8
    9490:	3801      	subs	r0, #1
    9492:	280e      	cmp	r0, #14
    9494:	d84d      	bhi.n	9532 <udc_req_std_dev_get_descriptor+0xb6>
    9496:	f006 f8c3 	bl	f620 <__gnu_thumb1_case_uqi>
    949a:	1d08      	.short	0x1d08
    949c:	4c4c4c46 	.word	0x4c4c4c46
    94a0:	4c4c4c4c 	.word	0x4c4c4c4c
    94a4:	4c4c4c4c 	.word	0x4c4c4c4c
    94a8:	38          	.byte	0x38
    94a9:	00          	.byte	0x00
				(uint8_t *) udc_config.confdev_lsfs,
    94aa:	4b27      	ldr	r3, [pc, #156]	; (9548 <udc_req_std_dev_get_descriptor+0xcc>)
    94ac:	58e3      	ldr	r3, [r4, r3]
    94ae:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    94b0:	7801      	ldrb	r1, [r0, #0]
    94b2:	4b26      	ldr	r3, [pc, #152]	; (954c <udc_req_std_dev_get_descriptor+0xd0>)
    94b4:	58e3      	ldr	r3, [r4, r3]
    94b6:	9301      	str	r3, [sp, #4]
    94b8:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    94ba:	4b22      	ldr	r3, [pc, #136]	; (9544 <udc_req_std_dev_get_descriptor+0xc8>)
    94bc:	58e3      	ldr	r3, [r4, r3]
    94be:	88da      	ldrh	r2, [r3, #6]
    94c0:	899b      	ldrh	r3, [r3, #12]
    94c2:	429a      	cmp	r2, r3
    94c4:	d239      	bcs.n	953a <udc_req_std_dev_get_descriptor+0xbe>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    94c6:	4b1f      	ldr	r3, [pc, #124]	; (9544 <udc_req_std_dev_get_descriptor+0xc8>)
    94c8:	58e3      	ldr	r3, [r4, r3]
    94ca:	9301      	str	r3, [sp, #4]
    94cc:	819a      	strh	r2, [r3, #12]
	return true;
    94ce:	2001      	movs	r0, #1
}
    94d0:	b002      	add	sp, #8
    94d2:	bd10      	pop	{r4, pc}
			if (conf_num >= udc_config.confdev_lsfs->
    94d4:	4a1c      	ldr	r2, [pc, #112]	; (9548 <udc_req_std_dev_get_descriptor+0xcc>)
    94d6:	58a2      	ldr	r2, [r4, r2]
    94d8:	6812      	ldr	r2, [r2, #0]
    94da:	7c52      	ldrb	r2, [r2, #17]
    94dc:	4293      	cmp	r3, r2
    94de:	d301      	bcc.n	94e4 <udc_req_std_dev_get_descriptor+0x68>
				return false;
    94e0:	2000      	movs	r0, #0
    94e2:	e7f5      	b.n	94d0 <udc_req_std_dev_get_descriptor+0x54>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    94e4:	4a18      	ldr	r2, [pc, #96]	; (9548 <udc_req_std_dev_get_descriptor+0xcc>)
    94e6:	58a2      	ldr	r2, [r4, r2]
    94e8:	6852      	ldr	r2, [r2, #4]
    94ea:	00db      	lsls	r3, r3, #3
    94ec:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    94ee:	7883      	ldrb	r3, [r0, #2]
    94f0:	78c1      	ldrb	r1, [r0, #3]
    94f2:	0209      	lsls	r1, r1, #8
    94f4:	4319      	orrs	r1, r3
    94f6:	4b15      	ldr	r3, [pc, #84]	; (954c <udc_req_std_dev_get_descriptor+0xd0>)
    94f8:	58e3      	ldr	r3, [r4, r3]
    94fa:	9301      	str	r3, [sp, #4]
    94fc:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    94fe:	4b11      	ldr	r3, [pc, #68]	; (9544 <udc_req_std_dev_get_descriptor+0xc8>)
    9500:	58e3      	ldr	r3, [r4, r3]
    9502:	689b      	ldr	r3, [r3, #8]
    9504:	2202      	movs	r2, #2
    9506:	705a      	strb	r2, [r3, #1]
		break;
    9508:	e7d7      	b.n	94ba <udc_req_std_dev_get_descriptor+0x3e>
		if (udc_config.conf_bos == NULL) {
    950a:	4b0f      	ldr	r3, [pc, #60]	; (9548 <udc_req_std_dev_get_descriptor+0xcc>)
    950c:	58e3      	ldr	r3, [r4, r3]
    950e:	6898      	ldr	r0, [r3, #8]
    9510:	2800      	cmp	r0, #0
    9512:	d010      	beq.n	9536 <udc_req_std_dev_get_descriptor+0xba>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    9514:	7883      	ldrb	r3, [r0, #2]
    9516:	78c1      	ldrb	r1, [r0, #3]
    9518:	0209      	lsls	r1, r1, #8
    951a:	4319      	orrs	r1, r3
    951c:	4b0b      	ldr	r3, [pc, #44]	; (954c <udc_req_std_dev_get_descriptor+0xd0>)
    951e:	58e3      	ldr	r3, [r4, r3]
    9520:	9301      	str	r3, [sp, #4]
    9522:	4798      	blx	r3
		break;
    9524:	e7c9      	b.n	94ba <udc_req_std_dev_get_descriptor+0x3e>
		if (!udc_req_std_dev_get_str_desc()) {
    9526:	4b0a      	ldr	r3, [pc, #40]	; (9550 <udc_req_std_dev_get_descriptor+0xd4>)
    9528:	447b      	add	r3, pc
    952a:	4798      	blx	r3
    952c:	2800      	cmp	r0, #0
    952e:	d1c4      	bne.n	94ba <udc_req_std_dev_get_descriptor+0x3e>
    9530:	e7ce      	b.n	94d0 <udc_req_std_dev_get_descriptor+0x54>
		return false;
    9532:	2000      	movs	r0, #0
    9534:	e7cc      	b.n	94d0 <udc_req_std_dev_get_descriptor+0x54>
			return false;
    9536:	2000      	movs	r0, #0
    9538:	e7ca      	b.n	94d0 <udc_req_std_dev_get_descriptor+0x54>
	return true;
    953a:	2001      	movs	r0, #1
    953c:	e7c8      	b.n	94d0 <udc_req_std_dev_get_descriptor+0x54>
    953e:	46c0      	nop			; (mov r8, r8)
    9540:	0000950a 	.word	0x0000950a
    9544:	00000308 	.word	0x00000308
    9548:	000001bc 	.word	0x000001bc
    954c:	000000ac 	.word	0x000000ac
    9550:	fffffea1 	.word	0xfffffea1

00009554 <udc_req_std_dev_get_configuration>:
{
    9554:	b500      	push	{lr}
    9556:	b083      	sub	sp, #12
    9558:	4b09      	ldr	r3, [pc, #36]	; (9580 <udc_req_std_dev_get_configuration+0x2c>)
    955a:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != 1) {
    955c:	4a09      	ldr	r2, [pc, #36]	; (9584 <udc_req_std_dev_get_configuration+0x30>)
    955e:	589a      	ldr	r2, [r3, r2]
    9560:	9201      	str	r2, [sp, #4]
    9562:	88d2      	ldrh	r2, [r2, #6]
    9564:	2a01      	cmp	r2, #1
    9566:	d002      	beq.n	956e <udc_req_std_dev_get_configuration+0x1a>
		return false;
    9568:	2000      	movs	r0, #0
}
    956a:	b003      	add	sp, #12
    956c:	bd00      	pop	{pc}
	udd_set_setup_payload(&udc_num_configuration,1);
    956e:	2101      	movs	r1, #1
    9570:	4805      	ldr	r0, [pc, #20]	; (9588 <udc_req_std_dev_get_configuration+0x34>)
    9572:	4478      	add	r0, pc
    9574:	4a05      	ldr	r2, [pc, #20]	; (958c <udc_req_std_dev_get_configuration+0x38>)
    9576:	589b      	ldr	r3, [r3, r2]
    9578:	9301      	str	r3, [sp, #4]
    957a:	4798      	blx	r3
	return true;
    957c:	2001      	movs	r0, #1
    957e:	e7f4      	b.n	956a <udc_req_std_dev_get_configuration+0x16>
    9580:	00009432 	.word	0x00009432
    9584:	00000308 	.word	0x00000308
    9588:	1fff74fe 	.word	0x1fff74fe
    958c:	000000ac 	.word	0x000000ac

00009590 <udc_req_std_iface_get_setting>:
{
    9590:	b570      	push	{r4, r5, r6, lr}
    9592:	b082      	sub	sp, #8
    9594:	4c1c      	ldr	r4, [pc, #112]	; (9608 <udc_req_std_iface_get_setting+0x78>)
    9596:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength != 1) {
    9598:	4b1c      	ldr	r3, [pc, #112]	; (960c <udc_req_std_iface_get_setting+0x7c>)
    959a:	58e3      	ldr	r3, [r4, r3]
    959c:	9301      	str	r3, [sp, #4]
    959e:	88db      	ldrh	r3, [r3, #6]
    95a0:	2b01      	cmp	r3, #1
    95a2:	d003      	beq.n	95ac <udc_req_std_iface_get_setting+0x1c>
		return false; // Error in request
    95a4:	2500      	movs	r5, #0
}
    95a6:	0028      	movs	r0, r5
    95a8:	b002      	add	sp, #8
    95aa:	bd70      	pop	{r4, r5, r6, pc}
	if (!udc_num_configuration) {
    95ac:	4b18      	ldr	r3, [pc, #96]	; (9610 <udc_req_std_iface_get_setting+0x80>)
    95ae:	447b      	add	r3, pc
    95b0:	781b      	ldrb	r3, [r3, #0]
    95b2:	2b00      	cmp	r3, #0
    95b4:	d025      	beq.n	9602 <udc_req_std_iface_get_setting+0x72>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    95b6:	4b15      	ldr	r3, [pc, #84]	; (960c <udc_req_std_iface_get_setting+0x7c>)
    95b8:	58e3      	ldr	r3, [r4, r3]
    95ba:	9301      	str	r3, [sp, #4]
    95bc:	791e      	ldrb	r6, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    95be:	4b15      	ldr	r3, [pc, #84]	; (9614 <udc_req_std_iface_get_setting+0x84>)
    95c0:	447b      	add	r3, pc
    95c2:	681b      	ldr	r3, [r3, #0]
    95c4:	681b      	ldr	r3, [r3, #0]
    95c6:	791b      	ldrb	r3, [r3, #4]
    95c8:	429e      	cmp	r6, r3
    95ca:	d301      	bcc.n	95d0 <udc_req_std_iface_get_setting+0x40>
		return false;
    95cc:	2500      	movs	r5, #0
    95ce:	e7ea      	b.n	95a6 <udc_req_std_iface_get_setting+0x16>
	if (!udc_update_iface_desc(iface_num, 0)) {
    95d0:	2100      	movs	r1, #0
    95d2:	0030      	movs	r0, r6
    95d4:	4b10      	ldr	r3, [pc, #64]	; (9618 <udc_req_std_iface_get_setting+0x88>)
    95d6:	447b      	add	r3, pc
    95d8:	4798      	blx	r3
    95da:	1e05      	subs	r5, r0, #0
    95dc:	d0e3      	beq.n	95a6 <udc_req_std_iface_get_setting+0x16>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    95de:	4b0f      	ldr	r3, [pc, #60]	; (961c <udc_req_std_iface_get_setting+0x8c>)
    95e0:	447b      	add	r3, pc
    95e2:	681b      	ldr	r3, [r3, #0]
    95e4:	685b      	ldr	r3, [r3, #4]
    95e6:	00b6      	lsls	r6, r6, #2
    95e8:	599b      	ldr	r3, [r3, r6]
	udc_iface_setting = udi_api->getsetting();
    95ea:	68db      	ldr	r3, [r3, #12]
    95ec:	4798      	blx	r3
    95ee:	4b0c      	ldr	r3, [pc, #48]	; (9620 <udc_req_std_iface_get_setting+0x90>)
    95f0:	447b      	add	r3, pc
    95f2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    95f4:	2101      	movs	r1, #1
    95f6:	0018      	movs	r0, r3
    95f8:	4b0a      	ldr	r3, [pc, #40]	; (9624 <udc_req_std_iface_get_setting+0x94>)
    95fa:	58e3      	ldr	r3, [r4, r3]
    95fc:	9301      	str	r3, [sp, #4]
    95fe:	4798      	blx	r3
	return true;
    9600:	e7d1      	b.n	95a6 <udc_req_std_iface_get_setting+0x16>
		return false; // The device is not is configured state yet
    9602:	2500      	movs	r5, #0
    9604:	e7cf      	b.n	95a6 <udc_req_std_iface_get_setting+0x16>
    9606:	46c0      	nop			; (mov r8, r8)
    9608:	000093f6 	.word	0x000093f6
    960c:	00000308 	.word	0x00000308
    9610:	1fff74c2 	.word	0x1fff74c2
    9614:	1fff74b4 	.word	0x1fff74b4
    9618:	fffffb6b 	.word	0xfffffb6b
    961c:	1fff7494 	.word	0x1fff7494
    9620:	1fff747c 	.word	0x1fff747c
    9624:	000000ac 	.word	0x000000ac

00009628 <udc_req_std_ep_get_status>:
{
    9628:	b510      	push	{r4, lr}
    962a:	b082      	sub	sp, #8
    962c:	4c0e      	ldr	r4, [pc, #56]	; (9668 <udc_req_std_ep_get_status+0x40>)
    962e:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    9630:	4b0e      	ldr	r3, [pc, #56]	; (966c <udc_req_std_ep_get_status+0x44>)
    9632:	58e3      	ldr	r3, [r4, r3]
    9634:	9301      	str	r3, [sp, #4]
    9636:	88db      	ldrh	r3, [r3, #6]
    9638:	2b02      	cmp	r3, #2
    963a:	d002      	beq.n	9642 <udc_req_std_ep_get_status+0x1a>
		return false;
    963c:	2000      	movs	r0, #0
}
    963e:	b002      	add	sp, #8
    9640:	bd10      	pop	{r4, pc}
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    9642:	4b0a      	ldr	r3, [pc, #40]	; (966c <udc_req_std_ep_get_status+0x44>)
    9644:	58e3      	ldr	r3, [r4, r3]
    9646:	9301      	str	r3, [sp, #4]
    9648:	7918      	ldrb	r0, [r3, #4]
    964a:	4b09      	ldr	r3, [pc, #36]	; (9670 <udc_req_std_ep_get_status+0x48>)
    964c:	58e3      	ldr	r3, [r4, r3]
    964e:	9301      	str	r3, [sp, #4]
    9650:	4798      	blx	r3
    9652:	4b08      	ldr	r3, [pc, #32]	; (9674 <udc_req_std_ep_get_status+0x4c>)
    9654:	447b      	add	r3, pc
    9656:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    9658:	2102      	movs	r1, #2
    965a:	0018      	movs	r0, r3
    965c:	4b06      	ldr	r3, [pc, #24]	; (9678 <udc_req_std_ep_get_status+0x50>)
    965e:	58e3      	ldr	r3, [r4, r3]
    9660:	9301      	str	r3, [sp, #4]
    9662:	4798      	blx	r3
	return true;
    9664:	2001      	movs	r0, #1
    9666:	e7ea      	b.n	963e <udc_req_std_ep_get_status+0x16>
    9668:	0000935e 	.word	0x0000935e
    966c:	00000308 	.word	0x00000308
    9670:	00000298 	.word	0x00000298
    9674:	1fff7414 	.word	0x1fff7414
    9678:	000000ac 	.word	0x000000ac

0000967c <udc_valid_address>:
{
    967c:	b500      	push	{lr}
    967e:	b083      	sub	sp, #12
    9680:	4b06      	ldr	r3, [pc, #24]	; (969c <udc_valid_address+0x20>)
    9682:	447b      	add	r3, pc
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    9684:	4a06      	ldr	r2, [pc, #24]	; (96a0 <udc_valid_address+0x24>)
    9686:	589a      	ldr	r2, [r3, r2]
    9688:	9201      	str	r2, [sp, #4]
    968a:	8852      	ldrh	r2, [r2, #2]
    968c:	207f      	movs	r0, #127	; 0x7f
    968e:	4010      	ands	r0, r2
    9690:	4a04      	ldr	r2, [pc, #16]	; (96a4 <udc_valid_address+0x28>)
    9692:	589b      	ldr	r3, [r3, r2]
    9694:	9301      	str	r3, [sp, #4]
    9696:	4798      	blx	r3
}
    9698:	b003      	add	sp, #12
    969a:	bd00      	pop	{pc}
    969c:	0000930a 	.word	0x0000930a
    96a0:	00000308 	.word	0x00000308
    96a4:	000004b0 	.word	0x000004b0

000096a8 <udc_iface_enable>:
{
    96a8:	b570      	push	{r4, r5, r6, lr}
    96aa:	b082      	sub	sp, #8
    96ac:	0005      	movs	r5, r0
    96ae:	4e14      	ldr	r6, [pc, #80]	; (9700 <udc_iface_enable+0x58>)
    96b0:	447e      	add	r6, pc
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    96b2:	4b14      	ldr	r3, [pc, #80]	; (9704 <udc_iface_enable+0x5c>)
    96b4:	447b      	add	r3, pc
    96b6:	4798      	blx	r3
    96b8:	2800      	cmp	r0, #0
    96ba:	d01e      	beq.n	96fa <udc_iface_enable+0x52>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    96bc:	4b12      	ldr	r3, [pc, #72]	; (9708 <udc_iface_enable+0x60>)
    96be:	447b      	add	r3, pc
    96c0:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    96c2:	2105      	movs	r1, #5
    96c4:	0020      	movs	r0, r4
    96c6:	4b11      	ldr	r3, [pc, #68]	; (970c <udc_iface_enable+0x64>)
    96c8:	447b      	add	r3, pc
    96ca:	4798      	blx	r3
    96cc:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    96ce:	d00c      	beq.n	96ea <udc_iface_enable+0x42>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    96d0:	7903      	ldrb	r3, [r0, #4]
    96d2:	7942      	ldrb	r2, [r0, #5]
    96d4:	0212      	lsls	r2, r2, #8
    96d6:	431a      	orrs	r2, r3
    96d8:	78c1      	ldrb	r1, [r0, #3]
    96da:	7880      	ldrb	r0, [r0, #2]
    96dc:	4b0c      	ldr	r3, [pc, #48]	; (9710 <udc_iface_enable+0x68>)
    96de:	58f3      	ldr	r3, [r6, r3]
    96e0:	9301      	str	r3, [sp, #4]
    96e2:	4798      	blx	r3
    96e4:	2800      	cmp	r0, #0
    96e6:	d1ec      	bne.n	96c2 <udc_iface_enable+0x1a>
    96e8:	e007      	b.n	96fa <udc_iface_enable+0x52>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    96ea:	4b0a      	ldr	r3, [pc, #40]	; (9714 <udc_iface_enable+0x6c>)
    96ec:	447b      	add	r3, pc
    96ee:	681b      	ldr	r3, [r3, #0]
    96f0:	685b      	ldr	r3, [r3, #4]
    96f2:	00ad      	lsls	r5, r5, #2
    96f4:	58eb      	ldr	r3, [r5, r3]
    96f6:	681b      	ldr	r3, [r3, #0]
    96f8:	4798      	blx	r3
}
    96fa:	b002      	add	sp, #8
    96fc:	bd70      	pop	{r4, r5, r6, pc}
    96fe:	46c0      	nop			; (mov r8, r8)
    9700:	000092dc 	.word	0x000092dc
    9704:	fffffa8d 	.word	0xfffffa8d
    9708:	1fff73ba 	.word	0x1fff73ba
    970c:	fffffa45 	.word	0xfffffa45
    9710:	0000030c 	.word	0x0000030c
    9714:	1fff7388 	.word	0x1fff7388

00009718 <udc_req_std_iface_set_setting>:
{
    9718:	b530      	push	{r4, r5, lr}
    971a:	b083      	sub	sp, #12
    971c:	4b10      	ldr	r3, [pc, #64]	; (9760 <udc_req_std_iface_set_setting+0x48>)
    971e:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    9720:	4a10      	ldr	r2, [pc, #64]	; (9764 <udc_req_std_iface_set_setting+0x4c>)
    9722:	589a      	ldr	r2, [r3, r2]
    9724:	9201      	str	r2, [sp, #4]
    9726:	88d2      	ldrh	r2, [r2, #6]
    9728:	2a00      	cmp	r2, #0
    972a:	d116      	bne.n	975a <udc_req_std_iface_set_setting+0x42>
	if (!udc_num_configuration) {
    972c:	4a0e      	ldr	r2, [pc, #56]	; (9768 <udc_req_std_iface_set_setting+0x50>)
    972e:	447a      	add	r2, pc
    9730:	7812      	ldrb	r2, [r2, #0]
    9732:	2a00      	cmp	r2, #0
    9734:	d101      	bne.n	973a <udc_req_std_iface_set_setting+0x22>
		return false; // The device is not is configured state yet
    9736:	2000      	movs	r0, #0
    9738:	e010      	b.n	975c <udc_req_std_iface_set_setting+0x44>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    973a:	4a0a      	ldr	r2, [pc, #40]	; (9764 <udc_req_std_iface_set_setting+0x4c>)
    973c:	589b      	ldr	r3, [r3, r2]
    973e:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    9740:	789d      	ldrb	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    9742:	0020      	movs	r0, r4
    9744:	4b09      	ldr	r3, [pc, #36]	; (976c <udc_req_std_iface_set_setting+0x54>)
    9746:	447b      	add	r3, pc
    9748:	4798      	blx	r3
    974a:	2800      	cmp	r0, #0
    974c:	d006      	beq.n	975c <udc_req_std_iface_set_setting+0x44>
	return udc_iface_enable(iface_num, setting_num);
    974e:	0029      	movs	r1, r5
    9750:	0020      	movs	r0, r4
    9752:	4b07      	ldr	r3, [pc, #28]	; (9770 <udc_req_std_iface_set_setting+0x58>)
    9754:	447b      	add	r3, pc
    9756:	4798      	blx	r3
    9758:	e000      	b.n	975c <udc_req_std_iface_set_setting+0x44>
		return false; // Error in request
    975a:	2000      	movs	r0, #0
}
    975c:	b003      	add	sp, #12
    975e:	bd30      	pop	{r4, r5, pc}
    9760:	0000926e 	.word	0x0000926e
    9764:	00000308 	.word	0x00000308
    9768:	1fff7342 	.word	0x1fff7342
    976c:	fffffbcb 	.word	0xfffffbcb
    9770:	ffffff51 	.word	0xffffff51

00009774 <udc_req_std_ep_clear_feature>:
{
    9774:	b500      	push	{lr}
    9776:	b083      	sub	sp, #12
    9778:	4b0d      	ldr	r3, [pc, #52]	; (97b0 <udc_req_std_ep_clear_feature+0x3c>)
    977a:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    977c:	4a0d      	ldr	r2, [pc, #52]	; (97b4 <udc_req_std_ep_clear_feature+0x40>)
    977e:	589a      	ldr	r2, [r3, r2]
    9780:	9201      	str	r2, [sp, #4]
    9782:	88d2      	ldrh	r2, [r2, #6]
    9784:	2a00      	cmp	r2, #0
    9786:	d110      	bne.n	97aa <udc_req_std_ep_clear_feature+0x36>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    9788:	4a0a      	ldr	r2, [pc, #40]	; (97b4 <udc_req_std_ep_clear_feature+0x40>)
    978a:	589a      	ldr	r2, [r3, r2]
    978c:	9201      	str	r2, [sp, #4]
    978e:	8852      	ldrh	r2, [r2, #2]
    9790:	2a00      	cmp	r2, #0
    9792:	d001      	beq.n	9798 <udc_req_std_ep_clear_feature+0x24>
	return false;
    9794:	2000      	movs	r0, #0
    9796:	e009      	b.n	97ac <udc_req_std_ep_clear_feature+0x38>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    9798:	4a06      	ldr	r2, [pc, #24]	; (97b4 <udc_req_std_ep_clear_feature+0x40>)
    979a:	589a      	ldr	r2, [r3, r2]
    979c:	9201      	str	r2, [sp, #4]
    979e:	7910      	ldrb	r0, [r2, #4]
    97a0:	4a05      	ldr	r2, [pc, #20]	; (97b8 <udc_req_std_ep_clear_feature+0x44>)
    97a2:	589b      	ldr	r3, [r3, r2]
    97a4:	9301      	str	r3, [sp, #4]
    97a6:	4798      	blx	r3
    97a8:	e000      	b.n	97ac <udc_req_std_ep_clear_feature+0x38>
		return false;
    97aa:	2000      	movs	r0, #0
}
    97ac:	b003      	add	sp, #12
    97ae:	bd00      	pop	{pc}
    97b0:	00009212 	.word	0x00009212
    97b4:	00000308 	.word	0x00000308
    97b8:	000002bc 	.word	0x000002bc

000097bc <udc_req_std_ep_set_feature>:
{
    97bc:	b530      	push	{r4, r5, lr}
    97be:	b083      	sub	sp, #12
    97c0:	4c0f      	ldr	r4, [pc, #60]	; (9800 <udc_req_std_ep_set_feature+0x44>)
    97c2:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength) {
    97c4:	4b0f      	ldr	r3, [pc, #60]	; (9804 <udc_req_std_ep_set_feature+0x48>)
    97c6:	58e3      	ldr	r3, [r4, r3]
    97c8:	9301      	str	r3, [sp, #4]
    97ca:	88db      	ldrh	r3, [r3, #6]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d114      	bne.n	97fa <udc_req_std_ep_set_feature+0x3e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    97d0:	4b0c      	ldr	r3, [pc, #48]	; (9804 <udc_req_std_ep_set_feature+0x48>)
    97d2:	58e3      	ldr	r3, [r4, r3]
    97d4:	9301      	str	r3, [sp, #4]
    97d6:	885b      	ldrh	r3, [r3, #2]
    97d8:	2b00      	cmp	r3, #0
    97da:	d001      	beq.n	97e0 <udc_req_std_ep_set_feature+0x24>
	return false;
    97dc:	2000      	movs	r0, #0
    97de:	e00d      	b.n	97fc <udc_req_std_ep_set_feature+0x40>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    97e0:	4b08      	ldr	r3, [pc, #32]	; (9804 <udc_req_std_ep_set_feature+0x48>)
    97e2:	58e5      	ldr	r5, [r4, r3]
    97e4:	7928      	ldrb	r0, [r5, #4]
    97e6:	4b08      	ldr	r3, [pc, #32]	; (9808 <udc_req_std_ep_set_feature+0x4c>)
    97e8:	58e3      	ldr	r3, [r4, r3]
    97ea:	9301      	str	r3, [sp, #4]
    97ec:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    97ee:	7928      	ldrb	r0, [r5, #4]
    97f0:	4b06      	ldr	r3, [pc, #24]	; (980c <udc_req_std_ep_set_feature+0x50>)
    97f2:	58e3      	ldr	r3, [r4, r3]
    97f4:	9301      	str	r3, [sp, #4]
    97f6:	4798      	blx	r3
    97f8:	e000      	b.n	97fc <udc_req_std_ep_set_feature+0x40>
		return false;
    97fa:	2000      	movs	r0, #0
}
    97fc:	b003      	add	sp, #12
    97fe:	bd30      	pop	{r4, r5, pc}
    9800:	000091ca 	.word	0x000091ca
    9804:	00000308 	.word	0x00000308
    9808:	000002b8 	.word	0x000002b8
    980c:	000001d8 	.word	0x000001d8

00009810 <udc_start>:
{
    9810:	b500      	push	{lr}
    9812:	b083      	sub	sp, #12
    9814:	4b03      	ldr	r3, [pc, #12]	; (9824 <udc_start+0x14>)
    9816:	447b      	add	r3, pc
	udd_enable();
    9818:	4a03      	ldr	r2, [pc, #12]	; (9828 <udc_start+0x18>)
    981a:	589b      	ldr	r3, [r3, r2]
    981c:	9301      	str	r3, [sp, #4]
    981e:	4798      	blx	r3
}
    9820:	b003      	add	sp, #12
    9822:	bd00      	pop	{pc}
    9824:	00009176 	.word	0x00009176
    9828:	00000288 	.word	0x00000288

0000982c <udc_reset>:
{
    982c:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    982e:	4b0e      	ldr	r3, [pc, #56]	; (9868 <udc_reset+0x3c>)
    9830:	447b      	add	r3, pc
    9832:	781b      	ldrb	r3, [r3, #0]
    9834:	2b00      	cmp	r3, #0
    9836:	d00e      	beq.n	9856 <udc_reset+0x2a>
    9838:	2400      	movs	r4, #0
    983a:	e005      	b.n	9848 <udc_reset+0x1c>
			udc_iface_disable(iface_num);
    983c:	0020      	movs	r0, r4
    983e:	4b0b      	ldr	r3, [pc, #44]	; (986c <udc_reset+0x40>)
    9840:	447b      	add	r3, pc
    9842:	4798      	blx	r3
				iface_num++) {
    9844:	3401      	adds	r4, #1
    9846:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9848:	4b09      	ldr	r3, [pc, #36]	; (9870 <udc_reset+0x44>)
    984a:	447b      	add	r3, pc
    984c:	681b      	ldr	r3, [r3, #0]
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    9852:	429c      	cmp	r4, r3
    9854:	d3f2      	bcc.n	983c <udc_reset+0x10>
	udc_num_configuration = 0;
    9856:	2200      	movs	r2, #0
    9858:	4b06      	ldr	r3, [pc, #24]	; (9874 <udc_reset+0x48>)
    985a:	447b      	add	r3, pc
    985c:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    985e:	3201      	adds	r2, #1
    9860:	4b05      	ldr	r3, [pc, #20]	; (9878 <udc_reset+0x4c>)
    9862:	447b      	add	r3, pc
    9864:	801a      	strh	r2, [r3, #0]
}
    9866:	bd10      	pop	{r4, pc}
    9868:	1fff7240 	.word	0x1fff7240
    986c:	fffffad1 	.word	0xfffffad1
    9870:	1fff722a 	.word	0x1fff722a
    9874:	1fff7216 	.word	0x1fff7216
    9878:	1fff7204 	.word	0x1fff7204

0000987c <udc_req_std_dev_set_configuration>:
{
    987c:	b510      	push	{r4, lr}
    987e:	b082      	sub	sp, #8
    9880:	4c27      	ldr	r4, [pc, #156]	; (9920 <udc_req_std_dev_set_configuration+0xa4>)
    9882:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength) {
    9884:	4b27      	ldr	r3, [pc, #156]	; (9924 <udc_req_std_dev_set_configuration+0xa8>)
    9886:	58e3      	ldr	r3, [r4, r3]
    9888:	9301      	str	r3, [sp, #4]
    988a:	88db      	ldrh	r3, [r3, #6]
    988c:	2b00      	cmp	r3, #0
    988e:	d002      	beq.n	9896 <udc_req_std_dev_set_configuration+0x1a>
		return false;
    9890:	2000      	movs	r0, #0
}
    9892:	b002      	add	sp, #8
    9894:	bd10      	pop	{r4, pc}
	if (!udd_getaddress()) {
    9896:	4b24      	ldr	r3, [pc, #144]	; (9928 <udc_req_std_dev_set_configuration+0xac>)
    9898:	58e3      	ldr	r3, [r4, r3]
    989a:	9301      	str	r3, [sp, #4]
    989c:	4798      	blx	r3
    989e:	2800      	cmp	r0, #0
    98a0:	d039      	beq.n	9916 <udc_req_std_dev_set_configuration+0x9a>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    98a2:	4b20      	ldr	r3, [pc, #128]	; (9924 <udc_req_std_dev_set_configuration+0xa8>)
    98a4:	58e3      	ldr	r3, [r4, r3]
    98a6:	9301      	str	r3, [sp, #4]
    98a8:	885a      	ldrh	r2, [r3, #2]
    98aa:	23ff      	movs	r3, #255	; 0xff
    98ac:	4013      	ands	r3, r2
				udc_config.confdev_lsfs->bNumConfigurations) {
    98ae:	4a1f      	ldr	r2, [pc, #124]	; (992c <udc_req_std_dev_set_configuration+0xb0>)
    98b0:	58a2      	ldr	r2, [r4, r2]
    98b2:	6812      	ldr	r2, [r2, #0]
    98b4:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    98b6:	4293      	cmp	r3, r2
    98b8:	dd01      	ble.n	98be <udc_req_std_dev_set_configuration+0x42>
			return false;
    98ba:	2000      	movs	r0, #0
    98bc:	e7e9      	b.n	9892 <udc_req_std_dev_set_configuration+0x16>
	udc_reset();
    98be:	4b1c      	ldr	r3, [pc, #112]	; (9930 <udc_req_std_dev_set_configuration+0xb4>)
    98c0:	58e3      	ldr	r3, [r4, r3]
    98c2:	9301      	str	r3, [sp, #4]
    98c4:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    98c6:	4b17      	ldr	r3, [pc, #92]	; (9924 <udc_req_std_dev_set_configuration+0xa8>)
    98c8:	58e3      	ldr	r3, [r4, r3]
    98ca:	9301      	str	r3, [sp, #4]
    98cc:	789b      	ldrb	r3, [r3, #2]
    98ce:	4a19      	ldr	r2, [pc, #100]	; (9934 <udc_req_std_dev_set_configuration+0xb8>)
    98d0:	447a      	add	r2, pc
    98d2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    98d4:	2b00      	cmp	r3, #0
    98d6:	d020      	beq.n	991a <udc_req_std_dev_set_configuration+0x9e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    98d8:	4a14      	ldr	r2, [pc, #80]	; (992c <udc_req_std_dev_set_configuration+0xb0>)
    98da:	58a2      	ldr	r2, [r4, r2]
    98dc:	6852      	ldr	r2, [r2, #4]
    98de:	4916      	ldr	r1, [pc, #88]	; (9938 <udc_req_std_dev_set_configuration+0xbc>)
    98e0:	468c      	mov	ip, r1
    98e2:	4463      	add	r3, ip
    98e4:	00db      	lsls	r3, r3, #3
    98e6:	18d3      	adds	r3, r2, r3
    98e8:	4a14      	ldr	r2, [pc, #80]	; (993c <udc_req_std_dev_set_configuration+0xc0>)
    98ea:	447a      	add	r2, pc
    98ec:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    98ee:	2400      	movs	r4, #0
    98f0:	4b13      	ldr	r3, [pc, #76]	; (9940 <udc_req_std_dev_set_configuration+0xc4>)
    98f2:	447b      	add	r3, pc
    98f4:	681b      	ldr	r3, [r3, #0]
    98f6:	681b      	ldr	r3, [r3, #0]
    98f8:	791b      	ldrb	r3, [r3, #4]
    98fa:	429c      	cmp	r4, r3
    98fc:	d209      	bcs.n	9912 <udc_req_std_dev_set_configuration+0x96>
		if (!udc_iface_enable(iface_num, 0)) {
    98fe:	2100      	movs	r1, #0
    9900:	0020      	movs	r0, r4
    9902:	4b10      	ldr	r3, [pc, #64]	; (9944 <udc_req_std_dev_set_configuration+0xc8>)
    9904:	447b      	add	r3, pc
    9906:	4798      	blx	r3
    9908:	2800      	cmp	r0, #0
    990a:	d0c2      	beq.n	9892 <udc_req_std_dev_set_configuration+0x16>
			iface_num++) {
    990c:	3401      	adds	r4, #1
    990e:	b2e4      	uxtb	r4, r4
    9910:	e7ee      	b.n	98f0 <udc_req_std_dev_set_configuration+0x74>
	return true;
    9912:	2001      	movs	r0, #1
    9914:	e7bd      	b.n	9892 <udc_req_std_dev_set_configuration+0x16>
		return false;
    9916:	2000      	movs	r0, #0
    9918:	e7bb      	b.n	9892 <udc_req_std_dev_set_configuration+0x16>
		return true; // Default empty configuration requested
    991a:	2001      	movs	r0, #1
    991c:	e7b9      	b.n	9892 <udc_req_std_dev_set_configuration+0x16>
    991e:	46c0      	nop			; (mov r8, r8)
    9920:	0000910a 	.word	0x0000910a
    9924:	00000308 	.word	0x00000308
    9928:	0000006c 	.word	0x0000006c
    992c:	000001bc 	.word	0x000001bc
    9930:	000000fc 	.word	0x000000fc
    9934:	1fff71a0 	.word	0x1fff71a0
    9938:	1fffffff 	.word	0x1fffffff
    993c:	1fff718a 	.word	0x1fff718a
    9940:	1fff7182 	.word	0x1fff7182
    9944:	fffffda1 	.word	0xfffffda1

00009948 <udc_reqstd>:
{
    9948:	b500      	push	{lr}
    994a:	b083      	sub	sp, #12
    994c:	4b45      	ldr	r3, [pc, #276]	; (9a64 <udc_reqstd+0x11c>)
    994e:	447b      	add	r3, pc
	if (Udd_setup_is_in()) {
    9950:	4a45      	ldr	r2, [pc, #276]	; (9a68 <udc_reqstd+0x120>)
    9952:	589a      	ldr	r2, [r3, r2]
    9954:	9201      	str	r2, [sp, #4]
    9956:	7811      	ldrb	r1, [r2, #0]
    9958:	b24a      	sxtb	r2, r1
    995a:	2a00      	cmp	r2, #0
    995c:	db10      	blt.n	9980 <udc_reqstd+0x38>
    995e:	221f      	movs	r2, #31
    9960:	400a      	ands	r2, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    9962:	d159      	bne.n	9a18 <udc_reqstd+0xd0>
			switch (udd_g_ctrlreq.req.bRequest) {
    9964:	4940      	ldr	r1, [pc, #256]	; (9a68 <udc_reqstd+0x120>)
    9966:	5859      	ldr	r1, [r3, r1]
    9968:	9101      	str	r1, [sp, #4]
    996a:	7848      	ldrb	r0, [r1, #1]
    996c:	3801      	subs	r0, #1
    996e:	2808      	cmp	r0, #8
    9970:	d852      	bhi.n	9a18 <udc_reqstd+0xd0>
    9972:	f005 fe55 	bl	f620 <__gnu_thumb1_case_uqi>
    9976:	5145      	.short	0x5145
    9978:	51415149 	.word	0x51415149
    997c:	5151      	.short	0x5151
    997e:	4d          	.byte	0x4d
    997f:	00          	.byte	0x00
		if (udd_g_ctrlreq.req.wLength == 0) {
    9980:	4a39      	ldr	r2, [pc, #228]	; (9a68 <udc_reqstd+0x120>)
    9982:	589a      	ldr	r2, [r3, r2]
    9984:	9201      	str	r2, [sp, #4]
    9986:	88d2      	ldrh	r2, [r2, #6]
    9988:	2a00      	cmp	r2, #0
    998a:	d100      	bne.n	998e <udc_reqstd+0x46>
    998c:	e067      	b.n	9a5e <udc_reqstd+0x116>
    998e:	221f      	movs	r2, #31
    9990:	400a      	ands	r2, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    9992:	d109      	bne.n	99a8 <udc_reqstd+0x60>
			switch (udd_g_ctrlreq.req.bRequest) {
    9994:	4934      	ldr	r1, [pc, #208]	; (9a68 <udc_reqstd+0x120>)
    9996:	5859      	ldr	r1, [r3, r1]
    9998:	9101      	str	r1, [sp, #4]
    999a:	7849      	ldrb	r1, [r1, #1]
    999c:	2906      	cmp	r1, #6
    999e:	d00d      	beq.n	99bc <udc_reqstd+0x74>
    99a0:	2908      	cmp	r1, #8
    99a2:	d00f      	beq.n	99c4 <udc_reqstd+0x7c>
    99a4:	2900      	cmp	r1, #0
    99a6:	d005      	beq.n	99b4 <udc_reqstd+0x6c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    99a8:	2a01      	cmp	r2, #1
    99aa:	d00f      	beq.n	99cc <udc_reqstd+0x84>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    99ac:	2a02      	cmp	r2, #2
    99ae:	d017      	beq.n	99e0 <udc_reqstd+0x98>
	return false;
    99b0:	2000      	movs	r0, #0
    99b2:	e036      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_get_status();
    99b4:	4b2d      	ldr	r3, [pc, #180]	; (9a6c <udc_reqstd+0x124>)
    99b6:	447b      	add	r3, pc
    99b8:	4798      	blx	r3
    99ba:	e032      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_get_descriptor();
    99bc:	4b2c      	ldr	r3, [pc, #176]	; (9a70 <udc_reqstd+0x128>)
    99be:	447b      	add	r3, pc
    99c0:	4798      	blx	r3
    99c2:	e02e      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_get_configuration();
    99c4:	4b2b      	ldr	r3, [pc, #172]	; (9a74 <udc_reqstd+0x12c>)
    99c6:	447b      	add	r3, pc
    99c8:	4798      	blx	r3
    99ca:	e02a      	b.n	9a22 <udc_reqstd+0xda>
			switch (udd_g_ctrlreq.req.bRequest) {
    99cc:	4926      	ldr	r1, [pc, #152]	; (9a68 <udc_reqstd+0x120>)
    99ce:	5859      	ldr	r1, [r3, r1]
    99d0:	9101      	str	r1, [sp, #4]
    99d2:	7849      	ldrb	r1, [r1, #1]
    99d4:	290a      	cmp	r1, #10
    99d6:	d1e9      	bne.n	99ac <udc_reqstd+0x64>
				return udc_req_std_iface_get_setting();
    99d8:	4b27      	ldr	r3, [pc, #156]	; (9a78 <udc_reqstd+0x130>)
    99da:	447b      	add	r3, pc
    99dc:	4798      	blx	r3
    99de:	e020      	b.n	9a22 <udc_reqstd+0xda>
			switch (udd_g_ctrlreq.req.bRequest) {
    99e0:	4a21      	ldr	r2, [pc, #132]	; (9a68 <udc_reqstd+0x120>)
    99e2:	589b      	ldr	r3, [r3, r2]
    99e4:	9301      	str	r3, [sp, #4]
    99e6:	785b      	ldrb	r3, [r3, #1]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d001      	beq.n	99f0 <udc_reqstd+0xa8>
	return false;
    99ec:	2000      	movs	r0, #0
    99ee:	e018      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_ep_get_status();
    99f0:	4b22      	ldr	r3, [pc, #136]	; (9a7c <udc_reqstd+0x134>)
    99f2:	447b      	add	r3, pc
    99f4:	4798      	blx	r3
    99f6:	e014      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_set_address();
    99f8:	4b21      	ldr	r3, [pc, #132]	; (9a80 <udc_reqstd+0x138>)
    99fa:	447b      	add	r3, pc
    99fc:	4798      	blx	r3
    99fe:	e010      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_clear_feature();
    9a00:	4b20      	ldr	r3, [pc, #128]	; (9a84 <udc_reqstd+0x13c>)
    9a02:	447b      	add	r3, pc
    9a04:	4798      	blx	r3
    9a06:	e00c      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_set_feature();
    9a08:	4b1f      	ldr	r3, [pc, #124]	; (9a88 <udc_reqstd+0x140>)
    9a0a:	447b      	add	r3, pc
    9a0c:	4798      	blx	r3
    9a0e:	e008      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_dev_set_configuration();
    9a10:	4b1e      	ldr	r3, [pc, #120]	; (9a8c <udc_reqstd+0x144>)
    9a12:	447b      	add	r3, pc
    9a14:	4798      	blx	r3
    9a16:	e004      	b.n	9a22 <udc_reqstd+0xda>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    9a18:	2a01      	cmp	r2, #1
    9a1a:	d004      	beq.n	9a26 <udc_reqstd+0xde>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    9a1c:	2a02      	cmp	r2, #2
    9a1e:	d00c      	beq.n	9a3a <udc_reqstd+0xf2>
	return false;
    9a20:	2000      	movs	r0, #0
}
    9a22:	b003      	add	sp, #12
    9a24:	bd00      	pop	{pc}
			switch (udd_g_ctrlreq.req.bRequest) {
    9a26:	4910      	ldr	r1, [pc, #64]	; (9a68 <udc_reqstd+0x120>)
    9a28:	5859      	ldr	r1, [r3, r1]
    9a2a:	9101      	str	r1, [sp, #4]
    9a2c:	7849      	ldrb	r1, [r1, #1]
    9a2e:	290b      	cmp	r1, #11
    9a30:	d1f4      	bne.n	9a1c <udc_reqstd+0xd4>
				return udc_req_std_iface_set_setting();
    9a32:	4b17      	ldr	r3, [pc, #92]	; (9a90 <udc_reqstd+0x148>)
    9a34:	447b      	add	r3, pc
    9a36:	4798      	blx	r3
    9a38:	e7f3      	b.n	9a22 <udc_reqstd+0xda>
			switch (udd_g_ctrlreq.req.bRequest) {
    9a3a:	4a0b      	ldr	r2, [pc, #44]	; (9a68 <udc_reqstd+0x120>)
    9a3c:	589b      	ldr	r3, [r3, r2]
    9a3e:	9301      	str	r3, [sp, #4]
    9a40:	785b      	ldrb	r3, [r3, #1]
    9a42:	2b01      	cmp	r3, #1
    9a44:	d003      	beq.n	9a4e <udc_reqstd+0x106>
    9a46:	2b03      	cmp	r3, #3
    9a48:	d005      	beq.n	9a56 <udc_reqstd+0x10e>
	return false;
    9a4a:	2000      	movs	r0, #0
    9a4c:	e7e9      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_ep_clear_feature();
    9a4e:	4b11      	ldr	r3, [pc, #68]	; (9a94 <udc_reqstd+0x14c>)
    9a50:	447b      	add	r3, pc
    9a52:	4798      	blx	r3
    9a54:	e7e5      	b.n	9a22 <udc_reqstd+0xda>
				return udc_req_std_ep_set_feature();
    9a56:	4b10      	ldr	r3, [pc, #64]	; (9a98 <udc_reqstd+0x150>)
    9a58:	447b      	add	r3, pc
    9a5a:	4798      	blx	r3
    9a5c:	e7e1      	b.n	9a22 <udc_reqstd+0xda>
			return false; // Error for USB host
    9a5e:	2000      	movs	r0, #0
    9a60:	e7df      	b.n	9a22 <udc_reqstd+0xda>
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	0000903e 	.word	0x0000903e
    9a68:	00000308 	.word	0x00000308
    9a6c:	fffff9d7 	.word	0xfffff9d7
    9a70:	fffffabb 	.word	0xfffffabb
    9a74:	fffffb8b 	.word	0xfffffb8b
    9a78:	fffffbb3 	.word	0xfffffbb3
    9a7c:	fffffc33 	.word	0xfffffc33
    9a80:	fffff80b 	.word	0xfffff80b
    9a84:	fffff7bb 	.word	0xfffff7bb
    9a88:	fffff7f7 	.word	0xfffff7f7
    9a8c:	fffffe67 	.word	0xfffffe67
    9a90:	fffffce1 	.word	0xfffffce1
    9a94:	fffffd21 	.word	0xfffffd21
    9a98:	fffffd61 	.word	0xfffffd61

00009a9c <udc_sof_notify>:
{
    9a9c:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    9a9e:	4b0c      	ldr	r3, [pc, #48]	; (9ad0 <udc_sof_notify+0x34>)
    9aa0:	447b      	add	r3, pc
    9aa2:	781b      	ldrb	r3, [r3, #0]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d012      	beq.n	9ace <udc_sof_notify+0x32>
    9aa8:	2400      	movs	r4, #0
    9aaa:	e001      	b.n	9ab0 <udc_sof_notify+0x14>
				iface_num++) {
    9aac:	3401      	adds	r4, #1
    9aae:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    9ab0:	4b08      	ldr	r3, [pc, #32]	; (9ad4 <udc_sof_notify+0x38>)
    9ab2:	447b      	add	r3, pc
    9ab4:	681b      	ldr	r3, [r3, #0]
    9ab6:	681a      	ldr	r2, [r3, #0]
    9ab8:	7912      	ldrb	r2, [r2, #4]
		for (iface_num = 0;
    9aba:	4294      	cmp	r4, r2
    9abc:	d207      	bcs.n	9ace <udc_sof_notify+0x32>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    9abe:	685b      	ldr	r3, [r3, #4]
    9ac0:	00a2      	lsls	r2, r4, #2
    9ac2:	58d3      	ldr	r3, [r2, r3]
    9ac4:	691b      	ldr	r3, [r3, #16]
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d0f0      	beq.n	9aac <udc_sof_notify+0x10>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    9aca:	4798      	blx	r3
    9acc:	e7ee      	b.n	9aac <udc_sof_notify+0x10>
}
    9ace:	bd10      	pop	{r4, pc}
    9ad0:	1fff6fd0 	.word	0x1fff6fd0
    9ad4:	1fff6fc2 	.word	0x1fff6fc2

00009ad8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    9ad8:	b510      	push	{r4, lr}
    9ada:	b082      	sub	sp, #8
    9adc:	4c1c      	ldr	r4, [pc, #112]	; (9b50 <udc_process_setup+0x78>)
    9ade:	447c      	add	r4, pc
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    9ae0:	4b1c      	ldr	r3, [pc, #112]	; (9b54 <udc_process_setup+0x7c>)
    9ae2:	58e3      	ldr	r3, [r4, r3]
    9ae4:	2200      	movs	r2, #0
    9ae6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    9ae8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    9aea:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    9aec:	781b      	ldrb	r3, [r3, #0]
    9aee:	b25a      	sxtb	r2, r3
    9af0:	2a00      	cmp	r2, #0
    9af2:	db15      	blt.n	9b20 <udc_process_setup+0x48>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    9af4:	2260      	movs	r2, #96	; 0x60
    9af6:	421a      	tst	r2, r3
    9af8:	d01a      	beq.n	9b30 <udc_process_setup+0x58>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    9afa:	4b16      	ldr	r3, [pc, #88]	; (9b54 <udc_process_setup+0x7c>)
    9afc:	58e3      	ldr	r3, [r4, r3]
    9afe:	9301      	str	r3, [sp, #4]
    9b00:	781a      	ldrb	r2, [r3, #0]
    9b02:	231f      	movs	r3, #31
    9b04:	4013      	ands	r3, r2
    9b06:	2b01      	cmp	r3, #1
    9b08:	d018      	beq.n	9b3c <udc_process_setup+0x64>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    9b0a:	4b12      	ldr	r3, [pc, #72]	; (9b54 <udc_process_setup+0x7c>)
    9b0c:	58e3      	ldr	r3, [r4, r3]
    9b0e:	9301      	str	r3, [sp, #4]
    9b10:	781a      	ldrb	r2, [r3, #0]
    9b12:	231f      	movs	r3, #31
    9b14:	4013      	ands	r3, r2
    9b16:	2b02      	cmp	r3, #2
    9b18:	d016      	beq.n	9b48 <udc_process_setup+0x70>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    9b1a:	2000      	movs	r0, #0
#endif
}
    9b1c:	b002      	add	sp, #8
    9b1e:	bd10      	pop	{r4, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    9b20:	4a0c      	ldr	r2, [pc, #48]	; (9b54 <udc_process_setup+0x7c>)
    9b22:	58a2      	ldr	r2, [r4, r2]
    9b24:	9201      	str	r2, [sp, #4]
    9b26:	88d2      	ldrh	r2, [r2, #6]
    9b28:	2a00      	cmp	r2, #0
    9b2a:	d1e3      	bne.n	9af4 <udc_process_setup+0x1c>
			return false; // Error from USB host
    9b2c:	2000      	movs	r0, #0
    9b2e:	e7f5      	b.n	9b1c <udc_process_setup+0x44>
		if (udc_reqstd()) {
    9b30:	4b09      	ldr	r3, [pc, #36]	; (9b58 <udc_process_setup+0x80>)
    9b32:	447b      	add	r3, pc
    9b34:	4798      	blx	r3
    9b36:	2800      	cmp	r0, #0
    9b38:	d0df      	beq.n	9afa <udc_process_setup+0x22>
    9b3a:	e7ef      	b.n	9b1c <udc_process_setup+0x44>
		if (udc_req_iface()) {
    9b3c:	4b07      	ldr	r3, [pc, #28]	; (9b5c <udc_process_setup+0x84>)
    9b3e:	447b      	add	r3, pc
    9b40:	4798      	blx	r3
    9b42:	2800      	cmp	r0, #0
    9b44:	d0e1      	beq.n	9b0a <udc_process_setup+0x32>
    9b46:	e7e9      	b.n	9b1c <udc_process_setup+0x44>
		if (udc_req_ep()) {
    9b48:	4b05      	ldr	r3, [pc, #20]	; (9b60 <udc_process_setup+0x88>)
    9b4a:	447b      	add	r3, pc
    9b4c:	4798      	blx	r3
    9b4e:	e7e5      	b.n	9b1c <udc_process_setup+0x44>
    9b50:	00008eae 	.word	0x00008eae
    9b54:	00000308 	.word	0x00000308
    9b58:	fffffe13 	.word	0xfffffe13
    9b5c:	fffff6fb 	.word	0xfffff6fb
    9b60:	fffff76f 	.word	0xfffff76f

00009b64 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    9b64:	b082      	sub	sp, #8
    9b66:	4b12      	ldr	r3, [pc, #72]	; (9bb0 <cpu_irq_enter_critical+0x4c>)
    9b68:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
    9b6a:	4a12      	ldr	r2, [pc, #72]	; (9bb4 <cpu_irq_enter_critical+0x50>)
    9b6c:	447a      	add	r2, pc
    9b6e:	6812      	ldr	r2, [r2, #0]
    9b70:	2a00      	cmp	r2, #0
    9b72:	d107      	bne.n	9b84 <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9b74:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    9b78:	2a00      	cmp	r2, #0
    9b7a:	d00a      	beq.n	9b92 <cpu_irq_enter_critical+0x2e>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    9b7c:	2200      	movs	r2, #0
    9b7e:	4b0e      	ldr	r3, [pc, #56]	; (9bb8 <cpu_irq_enter_critical+0x54>)
    9b80:	447b      	add	r3, pc
    9b82:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    9b84:	4a0d      	ldr	r2, [pc, #52]	; (9bbc <cpu_irq_enter_critical+0x58>)
    9b86:	447a      	add	r2, pc
    9b88:	6813      	ldr	r3, [r2, #0]
    9b8a:	3301      	adds	r3, #1
    9b8c:	6013      	str	r3, [r2, #0]
}
    9b8e:	b002      	add	sp, #8
    9b90:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    9b92:	b672      	cpsid	i
    9b94:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    9b98:	4a09      	ldr	r2, [pc, #36]	; (9bc0 <cpu_irq_enter_critical+0x5c>)
    9b9a:	589b      	ldr	r3, [r3, r2]
    9b9c:	9301      	str	r3, [sp, #4]
    9b9e:	2300      	movs	r3, #0
    9ba0:	9a01      	ldr	r2, [sp, #4]
    9ba2:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    9ba4:	2201      	movs	r2, #1
    9ba6:	4b07      	ldr	r3, [pc, #28]	; (9bc4 <cpu_irq_enter_critical+0x60>)
    9ba8:	447b      	add	r3, pc
    9baa:	701a      	strb	r2, [r3, #0]
    9bac:	e7ea      	b.n	9b84 <cpu_irq_enter_critical+0x20>
    9bae:	46c0      	nop			; (mov r8, r8)
    9bb0:	00008e24 	.word	0x00008e24
    9bb4:	1fff6f10 	.word	0x1fff6f10
    9bb8:	1fff6f00 	.word	0x1fff6f00
    9bbc:	1fff6ef6 	.word	0x1fff6ef6
    9bc0:	0000016c 	.word	0x0000016c
    9bc4:	1fff6ed8 	.word	0x1fff6ed8

00009bc8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    9bc8:	b082      	sub	sp, #8
    9bca:	490d      	ldr	r1, [pc, #52]	; (9c00 <cpu_irq_leave_critical+0x38>)
    9bcc:	4479      	add	r1, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    9bce:	4b0d      	ldr	r3, [pc, #52]	; (9c04 <cpu_irq_leave_critical+0x3c>)
    9bd0:	447b      	add	r3, pc
    9bd2:	681a      	ldr	r2, [r3, #0]
    9bd4:	3a01      	subs	r2, #1
    9bd6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    9bd8:	681b      	ldr	r3, [r3, #0]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d10d      	bne.n	9bfa <cpu_irq_leave_critical+0x32>
    9bde:	4b0a      	ldr	r3, [pc, #40]	; (9c08 <cpu_irq_leave_critical+0x40>)
    9be0:	447b      	add	r3, pc
    9be2:	781b      	ldrb	r3, [r3, #0]
    9be4:	2b00      	cmp	r3, #0
    9be6:	d008      	beq.n	9bfa <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    9be8:	4b08      	ldr	r3, [pc, #32]	; (9c0c <cpu_irq_leave_critical+0x44>)
    9bea:	58cb      	ldr	r3, [r1, r3]
    9bec:	9301      	str	r3, [sp, #4]
    9bee:	2301      	movs	r3, #1
    9bf0:	9a01      	ldr	r2, [sp, #4]
    9bf2:	7013      	strb	r3, [r2, #0]
    9bf4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9bf8:	b662      	cpsie	i
	}
}
    9bfa:	b002      	add	sp, #8
    9bfc:	4770      	bx	lr
    9bfe:	46c0      	nop			; (mov r8, r8)
    9c00:	00008dc0 	.word	0x00008dc0
    9c04:	1fff6eac 	.word	0x1fff6eac
    9c08:	1fff6ea0 	.word	0x1fff6ea0
    9c0c:	0000016c 	.word	0x0000016c

00009c10 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
    9c10:	b500      	push	{lr}
    9c12:	b083      	sub	sp, #12
    9c14:	4b0a      	ldr	r3, [pc, #40]	; (9c40 <stdio_usb_putchar+0x30>)
    9c16:	447b      	add	r3, pc
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    9c18:	4a0a      	ldr	r2, [pc, #40]	; (9c44 <stdio_usb_putchar+0x34>)
    9c1a:	447a      	add	r2, pc
    9c1c:	7812      	ldrb	r2, [r2, #0]
    9c1e:	2a00      	cmp	r2, #0
    9c20:	d102      	bne.n	9c28 <stdio_usb_putchar+0x18>
		return 0;  // -1
    9c22:	2000      	movs	r0, #0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
    9c24:	b003      	add	sp, #12
    9c26:	bd00      	pop	{pc}
	return udi_cdc_putc(data) ? 0 : -1;
    9c28:	0008      	movs	r0, r1
    9c2a:	4a07      	ldr	r2, [pc, #28]	; (9c48 <stdio_usb_putchar+0x38>)
    9c2c:	589b      	ldr	r3, [r3, r2]
    9c2e:	9301      	str	r3, [sp, #4]
    9c30:	4798      	blx	r3
    9c32:	2800      	cmp	r0, #0
    9c34:	d001      	beq.n	9c3a <stdio_usb_putchar+0x2a>
    9c36:	2000      	movs	r0, #0
    9c38:	e7f4      	b.n	9c24 <stdio_usb_putchar+0x14>
    9c3a:	2001      	movs	r0, #1
    9c3c:	4240      	negs	r0, r0
    9c3e:	e7f1      	b.n	9c24 <stdio_usb_putchar+0x14>
    9c40:	00008d76 	.word	0x00008d76
    9c44:	1fff6e67 	.word	0x1fff6e67
    9c48:	000000f8 	.word	0x000000f8

00009c4c <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    9c4c:	b510      	push	{r4, lr}
    9c4e:	b082      	sub	sp, #8
    9c50:	000c      	movs	r4, r1
    9c52:	4b08      	ldr	r3, [pc, #32]	; (9c74 <stdio_usb_getchar+0x28>)
    9c54:	447b      	add	r3, pc
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    9c56:	4a08      	ldr	r2, [pc, #32]	; (9c78 <stdio_usb_getchar+0x2c>)
    9c58:	447a      	add	r2, pc
    9c5a:	7812      	ldrb	r2, [r2, #0]
    9c5c:	2a00      	cmp	r2, #0
    9c5e:	d103      	bne.n	9c68 <stdio_usb_getchar+0x1c>
		*data = 0;  // -1
    9c60:	2300      	movs	r3, #0
    9c62:	700b      	strb	r3, [r1, #0]
		return;
	}

	*data = (char)udi_cdc_getc();
}
    9c64:	b002      	add	sp, #8
    9c66:	bd10      	pop	{r4, pc}
	*data = (char)udi_cdc_getc();
    9c68:	4a04      	ldr	r2, [pc, #16]	; (9c7c <stdio_usb_getchar+0x30>)
    9c6a:	589b      	ldr	r3, [r3, r2]
    9c6c:	9301      	str	r3, [sp, #4]
    9c6e:	4798      	blx	r3
    9c70:	7020      	strb	r0, [r4, #0]
    9c72:	e7f7      	b.n	9c64 <stdio_usb_getchar+0x18>
    9c74:	00008d38 	.word	0x00008d38
    9c78:	1fff6e29 	.word	0x1fff6e29
    9c7c:	00000410 	.word	0x00000410

00009c80 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    9c80:	2201      	movs	r2, #1
    9c82:	4b02      	ldr	r3, [pc, #8]	; (9c8c <stdio_usb_enable+0xc>)
    9c84:	447b      	add	r3, pc
    9c86:	701a      	strb	r2, [r3, #0]
	return true;
}
    9c88:	2001      	movs	r0, #1
    9c8a:	4770      	bx	lr
    9c8c:	1fff6dfd 	.word	0x1fff6dfd

00009c90 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
    9c90:	b530      	push	{r4, r5, lr}
    9c92:	b083      	sub	sp, #12
    9c94:	4c11      	ldr	r4, [pc, #68]	; (9cdc <stdio_usb_init+0x4c>)
    9c96:	447c      	add	r4, pc
	stdio_base = NULL;
    9c98:	4b11      	ldr	r3, [pc, #68]	; (9ce0 <stdio_usb_init+0x50>)
    9c9a:	58e3      	ldr	r3, [r4, r3]
    9c9c:	2200      	movs	r2, #0
    9c9e:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    9ca0:	4b10      	ldr	r3, [pc, #64]	; (9ce4 <stdio_usb_init+0x54>)
    9ca2:	58e3      	ldr	r3, [r4, r3]
    9ca4:	4a10      	ldr	r2, [pc, #64]	; (9ce8 <stdio_usb_init+0x58>)
    9ca6:	58a2      	ldr	r2, [r4, r2]
    9ca8:	9201      	str	r2, [sp, #4]
    9caa:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    9cac:	4b0f      	ldr	r3, [pc, #60]	; (9cec <stdio_usb_init+0x5c>)
    9cae:	58e3      	ldr	r3, [r4, r3]
    9cb0:	4a0f      	ldr	r2, [pc, #60]	; (9cf0 <stdio_usb_init+0x60>)
    9cb2:	58a2      	ldr	r2, [r4, r2]
    9cb4:	9201      	str	r2, [sp, #4]
    9cb6:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    9cb8:	4b0e      	ldr	r3, [pc, #56]	; (9cf4 <stdio_usb_init+0x64>)
    9cba:	58e3      	ldr	r3, [r4, r3]
    9cbc:	9301      	str	r3, [sp, #4]
    9cbe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    9cc0:	4b0d      	ldr	r3, [pc, #52]	; (9cf8 <stdio_usb_init+0x68>)
    9cc2:	58e5      	ldr	r5, [r4, r3]
    9cc4:	682b      	ldr	r3, [r5, #0]
    9cc6:	6898      	ldr	r0, [r3, #8]
    9cc8:	2100      	movs	r1, #0
    9cca:	4b0c      	ldr	r3, [pc, #48]	; (9cfc <stdio_usb_init+0x6c>)
    9ccc:	58e4      	ldr	r4, [r4, r3]
    9cce:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9cd0:	682b      	ldr	r3, [r5, #0]
    9cd2:	6858      	ldr	r0, [r3, #4]
    9cd4:	2100      	movs	r1, #0
    9cd6:	47a0      	blx	r4
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    9cd8:	b003      	add	sp, #12
    9cda:	bd30      	pop	{r4, r5, pc}
    9cdc:	00008cf6 	.word	0x00008cf6
    9ce0:	00000334 	.word	0x00000334
    9ce4:	000001c4 	.word	0x000001c4
    9ce8:	0000022c 	.word	0x0000022c
    9cec:	00000170 	.word	0x00000170
    9cf0:	000001c8 	.word	0x000001c8
    9cf4:	00000498 	.word	0x00000498
    9cf8:	000003b4 	.word	0x000003b4
    9cfc:	00000450 	.word	0x00000450

00009d00 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    9d00:	b510      	push	{r4, lr}
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    9d02:	4b1b      	ldr	r3, [pc, #108]	; (9d70 <bod_set_config+0x70>)
    9d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9d06:	079b      	lsls	r3, r3, #30
    9d08:	d504      	bpl.n	9d14 <bod_set_config+0x14>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    9d0a:	4a19      	ldr	r2, [pc, #100]	; (9d70 <bod_set_config+0x70>)
    9d0c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9d0e:	2402      	movs	r4, #2
    9d10:	43a3      	bics	r3, r4
    9d12:	6353      	str	r3, [r2, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    9d14:	880b      	ldrh	r3, [r1, #0]
    9d16:	790a      	ldrb	r2, [r1, #4]
    9d18:	4313      	orrs	r3, r2
			(uint32_t)conf->mode;
    9d1a:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    9d1c:	4313      	orrs	r3, r2

	if (conf->mode == BOD_MODE_SAMPLED) {
    9d1e:	2480      	movs	r4, #128	; 0x80
    9d20:	0064      	lsls	r4, r4, #1
    9d22:	42a2      	cmp	r2, r4
    9d24:	d00d      	beq.n	9d42 <bod_set_config+0x42>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
    9d26:	798a      	ldrb	r2, [r1, #6]
    9d28:	2a00      	cmp	r2, #0
    9d2a:	d001      	beq.n	9d30 <bod_set_config+0x30>
		temp |= SYSCTRL_BOD33_HYST;
    9d2c:	2204      	movs	r2, #4
    9d2e:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
    9d30:	79ca      	ldrb	r2, [r1, #7]
    9d32:	2a00      	cmp	r2, #0
    9d34:	d001      	beq.n	9d3a <bod_set_config+0x3a>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    9d36:	2240      	movs	r2, #64	; 0x40
    9d38:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
    9d3a:	2800      	cmp	r0, #0
    9d3c:	d005      	beq.n	9d4a <bod_set_config+0x4a>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    9d3e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    9d40:	bd10      	pop	{r4, pc}
		temp |= SYSCTRL_BOD33_CEN;
    9d42:	2280      	movs	r2, #128	; 0x80
    9d44:	0092      	lsls	r2, r2, #2
    9d46:	4313      	orrs	r3, r2
    9d48:	e7ed      	b.n	9d26 <bod_set_config+0x26>
			if (conf->level > 0x3F) {
    9d4a:	794a      	ldrb	r2, [r1, #5]
    9d4c:	2a3f      	cmp	r2, #63	; 0x3f
    9d4e:	d901      	bls.n	9d54 <bod_set_config+0x54>
				return STATUS_ERR_INVALID_ARG;
    9d50:	2017      	movs	r0, #23
    9d52:	e7f5      	b.n	9d40 <bod_set_config+0x40>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    9d54:	0412      	lsls	r2, r2, #16
    9d56:	21fc      	movs	r1, #252	; 0xfc
    9d58:	0389      	lsls	r1, r1, #14
    9d5a:	400a      	ands	r2, r1
    9d5c:	4313      	orrs	r3, r2
    9d5e:	4a04      	ldr	r2, [pc, #16]	; (9d70 <bod_set_config+0x70>)
    9d60:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    9d62:	4b03      	ldr	r3, [pc, #12]	; (9d70 <bod_set_config+0x70>)
    9d64:	68db      	ldr	r3, [r3, #12]
    9d66:	051b      	lsls	r3, r3, #20
    9d68:	d5fb      	bpl.n	9d62 <bod_set_config+0x62>
	return STATUS_OK;
    9d6a:	2000      	movs	r0, #0
    9d6c:	e7e8      	b.n	9d40 <bod_set_config+0x40>
    9d6e:	46c0      	nop			; (mov r8, r8)
    9d70:	40000800 	.word	0x40000800

00009d74 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    9d74:	b530      	push	{r4, r5, lr}
    9d76:	b083      	sub	sp, #12
    9d78:	4c2b      	ldr	r4, [pc, #172]	; (9e28 <DMAC_Handler+0xb4>)
    9d7a:	447c      	add	r4, pc
	cpu_irq_enter_critical();
    9d7c:	4b2b      	ldr	r3, [pc, #172]	; (9e2c <DMAC_Handler+0xb8>)
    9d7e:	58e3      	ldr	r3, [r4, r3]
    9d80:	9301      	str	r3, [sp, #4]
    9d82:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    9d84:	492a      	ldr	r1, [pc, #168]	; (9e30 <DMAC_Handler+0xbc>)
    9d86:	8c0b      	ldrh	r3, [r1, #32]
    9d88:	220f      	movs	r2, #15
    9d8a:	4013      	ands	r3, r2

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    9d8c:	009b      	lsls	r3, r3, #2
    9d8e:	4829      	ldr	r0, [pc, #164]	; (9e34 <DMAC_Handler+0xc0>)
    9d90:	4478      	add	r0, pc
    9d92:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    9d94:	7803      	ldrb	r3, [r0, #0]
    9d96:	401a      	ands	r2, r3
    9d98:	233f      	movs	r3, #63	; 0x3f
    9d9a:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
    9d9c:	330f      	adds	r3, #15
    9d9e:	5cca      	ldrb	r2, [r1, r3]
    9da0:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    9da2:	7803      	ldrb	r3, [r0, #0]
    9da4:	4924      	ldr	r1, [pc, #144]	; (9e38 <DMAC_Handler+0xc4>)
    9da6:	5861      	ldr	r1, [r4, r1]
    9da8:	9101      	str	r1, [sp, #4]
    9daa:	011b      	lsls	r3, r3, #4
    9dac:	18c9      	adds	r1, r1, r3
    9dae:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    9db0:	4d22      	ldr	r5, [pc, #136]	; (9e3c <DMAC_Handler+0xc8>)
    9db2:	447d      	add	r5, pc
    9db4:	18eb      	adds	r3, r5, r3
    9db6:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    9db8:	1acb      	subs	r3, r1, r3
    9dba:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    9dbc:	07d3      	lsls	r3, r2, #31
    9dbe:	d512      	bpl.n	9de6 <DMAC_Handler+0x72>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    9dc0:	2101      	movs	r1, #1
    9dc2:	234e      	movs	r3, #78	; 0x4e
    9dc4:	4a1a      	ldr	r2, [pc, #104]	; (9e30 <DMAC_Handler+0xbc>)
    9dc6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    9dc8:	3b3e      	subs	r3, #62	; 0x3e
    9dca:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    9dcc:	7c03      	ldrb	r3, [r0, #16]
    9dce:	07db      	lsls	r3, r3, #31
    9dd0:	d503      	bpl.n	9dda <DMAC_Handler+0x66>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    9dd2:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d000      	beq.n	9dda <DMAC_Handler+0x66>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    9dd8:	4798      	blx	r3
	cpu_irq_leave_critical();
    9dda:	4b19      	ldr	r3, [pc, #100]	; (9e40 <DMAC_Handler+0xcc>)
    9ddc:	58e3      	ldr	r3, [r4, r3]
    9dde:	9301      	str	r3, [sp, #4]
    9de0:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
    9de2:	b003      	add	sp, #12
    9de4:	bd30      	pop	{r4, r5, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    9de6:	0793      	lsls	r3, r2, #30
    9de8:	d50d      	bpl.n	9e06 <DMAC_Handler+0x92>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    9dea:	2102      	movs	r1, #2
    9dec:	234e      	movs	r3, #78	; 0x4e
    9dee:	4a10      	ldr	r2, [pc, #64]	; (9e30 <DMAC_Handler+0xbc>)
    9df0:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
    9df2:	2300      	movs	r3, #0
    9df4:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    9df6:	7c03      	ldrb	r3, [r0, #16]
    9df8:	079b      	lsls	r3, r3, #30
    9dfa:	d5ee      	bpl.n	9dda <DMAC_Handler+0x66>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    9dfc:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d0eb      	beq.n	9dda <DMAC_Handler+0x66>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    9e02:	4798      	blx	r3
    9e04:	e7e9      	b.n	9dda <DMAC_Handler+0x66>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    9e06:	0753      	lsls	r3, r2, #29
    9e08:	d5e7      	bpl.n	9dda <DMAC_Handler+0x66>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    9e0a:	2104      	movs	r1, #4
    9e0c:	234e      	movs	r3, #78	; 0x4e
    9e0e:	4a08      	ldr	r2, [pc, #32]	; (9e30 <DMAC_Handler+0xbc>)
    9e10:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
    9e12:	3b48      	subs	r3, #72	; 0x48
    9e14:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    9e16:	7c03      	ldrb	r3, [r0, #16]
    9e18:	075b      	lsls	r3, r3, #29
    9e1a:	d5de      	bpl.n	9dda <DMAC_Handler+0x66>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    9e1c:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    9e1e:	2b00      	cmp	r3, #0
    9e20:	d0db      	beq.n	9dda <DMAC_Handler+0x66>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    9e22:	4798      	blx	r3
    9e24:	e7d9      	b.n	9dda <DMAC_Handler+0x66>
    9e26:	46c0      	nop			; (mov r8, r8)
    9e28:	00008c12 	.word	0x00008c12
    9e2c:	00000148 	.word	0x00000148
    9e30:	41004800 	.word	0x41004800
    9e34:	1fff6cf4 	.word	0x1fff6cf4
    9e38:	00000078 	.word	0x00000078
    9e3c:	1fff6cea 	.word	0x1fff6cea
    9e40:	00000020 	.word	0x00000020

00009e44 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    9e44:	b510      	push	{r4, lr}
    9e46:	b082      	sub	sp, #8
    9e48:	4b0d      	ldr	r3, [pc, #52]	; (9e80 <extint_register_callback+0x3c>)
    9e4a:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    9e4c:	2a00      	cmp	r2, #0
    9e4e:	d002      	beq.n	9e56 <extint_register_callback+0x12>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9e50:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    9e52:	b002      	add	sp, #8
    9e54:	bd10      	pop	{r4, pc}
	if (_extint_dev.callbacks[channel] == NULL) {
    9e56:	4a0b      	ldr	r2, [pc, #44]	; (9e84 <extint_register_callback+0x40>)
    9e58:	589a      	ldr	r2, [r3, r2]
    9e5a:	9201      	str	r2, [sp, #4]
    9e5c:	008a      	lsls	r2, r1, #2
    9e5e:	9c01      	ldr	r4, [sp, #4]
    9e60:	5912      	ldr	r2, [r2, r4]
    9e62:	2a00      	cmp	r2, #0
    9e64:	d003      	beq.n	9e6e <extint_register_callback+0x2a>
	} else if (_extint_dev.callbacks[channel] == callback) {
    9e66:	4282      	cmp	r2, r0
    9e68:	d008      	beq.n	9e7c <extint_register_callback+0x38>
	return STATUS_ERR_ALREADY_INITIALIZED;
    9e6a:	201d      	movs	r0, #29
    9e6c:	e7f1      	b.n	9e52 <extint_register_callback+0xe>
		_extint_dev.callbacks[channel] = callback;
    9e6e:	4a05      	ldr	r2, [pc, #20]	; (9e84 <extint_register_callback+0x40>)
    9e70:	589b      	ldr	r3, [r3, r2]
    9e72:	9301      	str	r3, [sp, #4]
    9e74:	0089      	lsls	r1, r1, #2
    9e76:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    9e78:	2000      	movs	r0, #0
    9e7a:	e7ea      	b.n	9e52 <extint_register_callback+0xe>
		return STATUS_OK;
    9e7c:	2000      	movs	r0, #0
    9e7e:	e7e8      	b.n	9e52 <extint_register_callback+0xe>
    9e80:	00008b42 	.word	0x00008b42
    9e84:	00000264 	.word	0x00000264

00009e88 <extint_chan_enable_callback>:
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9e88:	2900      	cmp	r1, #0
    9e8a:	d001      	beq.n	9e90 <extint_chan_enable_callback+0x8>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9e8c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    9e8e:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    9e90:	281f      	cmp	r0, #31
    9e92:	d905      	bls.n	9ea0 <extint_chan_enable_callback+0x18>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    9e94:	2200      	movs	r2, #0
		eic->INTENSET.reg = (1UL << channel);
    9e96:	2301      	movs	r3, #1
    9e98:	4083      	lsls	r3, r0
    9e9a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    9e9c:	2000      	movs	r0, #0
    9e9e:	e7f6      	b.n	9e8e <extint_chan_enable_callback+0x6>
		return eics[eic_index];
    9ea0:	4a00      	ldr	r2, [pc, #0]	; (9ea4 <extint_chan_enable_callback+0x1c>)
    9ea2:	e7f8      	b.n	9e96 <extint_chan_enable_callback+0xe>
    9ea4:	40001800 	.word	0x40001800

00009ea8 <extint_chan_disable_callback>:
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9ea8:	2900      	cmp	r1, #0
    9eaa:	d001      	beq.n	9eb0 <extint_chan_disable_callback+0x8>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9eac:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    9eae:	4770      	bx	lr
	if (eic_index < EIC_INST_NUM) {
    9eb0:	281f      	cmp	r0, #31
    9eb2:	d905      	bls.n	9ec0 <extint_chan_disable_callback+0x18>
		return NULL;
    9eb4:	2200      	movs	r2, #0
		eic->INTENCLR.reg = (1UL << channel);
    9eb6:	2301      	movs	r3, #1
    9eb8:	4083      	lsls	r3, r0
    9eba:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    9ebc:	2000      	movs	r0, #0
    9ebe:	e7f6      	b.n	9eae <extint_chan_disable_callback+0x6>
		return eics[eic_index];
    9ec0:	4a00      	ldr	r2, [pc, #0]	; (9ec4 <extint_chan_disable_callback+0x1c>)
    9ec2:	e7f8      	b.n	9eb6 <extint_chan_disable_callback+0xe>
    9ec4:	40001800 	.word	0x40001800

00009ec8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    9ec8:	b510      	push	{r4, lr}
    9eca:	b082      	sub	sp, #8
    9ecc:	4c15      	ldr	r4, [pc, #84]	; (9f24 <EIC_Handler+0x5c>)
    9ece:	447c      	add	r4, pc
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9ed0:	4b15      	ldr	r3, [pc, #84]	; (9f28 <EIC_Handler+0x60>)
    9ed2:	58e3      	ldr	r3, [r4, r3]
    9ed4:	9301      	str	r3, [sp, #4]
    9ed6:	2300      	movs	r3, #0
    9ed8:	9a01      	ldr	r2, [sp, #4]
    9eda:	7013      	strb	r3, [r2, #0]
    9edc:	e006      	b.n	9eec <EIC_Handler+0x24>
    9ede:	4813      	ldr	r0, [pc, #76]	; (9f2c <EIC_Handler+0x64>)
    9ee0:	e00d      	b.n	9efe <EIC_Handler+0x36>
    9ee2:	4b11      	ldr	r3, [pc, #68]	; (9f28 <EIC_Handler+0x60>)
    9ee4:	58e2      	ldr	r2, [r4, r3]
    9ee6:	7813      	ldrb	r3, [r2, #0]
    9ee8:	3301      	adds	r3, #1
    9eea:	7013      	strb	r3, [r2, #0]
    9eec:	4b0e      	ldr	r3, [pc, #56]	; (9f28 <EIC_Handler+0x60>)
    9eee:	58e3      	ldr	r3, [r4, r3]
    9ef0:	9301      	str	r3, [sp, #4]
    9ef2:	781b      	ldrb	r3, [r3, #0]
    9ef4:	2b0f      	cmp	r3, #15
    9ef6:	d813      	bhi.n	9f20 <EIC_Handler+0x58>
	if (eic_index < EIC_INST_NUM) {
    9ef8:	2b1f      	cmp	r3, #31
    9efa:	d9f0      	bls.n	9ede <EIC_Handler+0x16>
		return NULL;
    9efc:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    9efe:	211f      	movs	r1, #31
    9f00:	4019      	ands	r1, r3
    9f02:	2201      	movs	r2, #1
    9f04:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    9f06:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
    9f08:	4211      	tst	r1, r2
    9f0a:	d0ea      	beq.n	9ee2 <EIC_Handler+0x1a>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    9f0c:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    9f0e:	4a08      	ldr	r2, [pc, #32]	; (9f30 <EIC_Handler+0x68>)
    9f10:	58a2      	ldr	r2, [r4, r2]
    9f12:	9201      	str	r2, [sp, #4]
    9f14:	009b      	lsls	r3, r3, #2
    9f16:	589b      	ldr	r3, [r3, r2]
    9f18:	2b00      	cmp	r3, #0
    9f1a:	d0e2      	beq.n	9ee2 <EIC_Handler+0x1a>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    9f1c:	4798      	blx	r3
    9f1e:	e7e0      	b.n	9ee2 <EIC_Handler+0x1a>
			}
		}
	}
}
    9f20:	b002      	add	sp, #8
    9f22:	bd10      	pop	{r4, pc}
    9f24:	00008abe 	.word	0x00008abe
    9f28:	0000031c 	.word	0x0000031c
    9f2c:	40001800 	.word	0x40001800
    9f30:	00000264 	.word	0x00000264

00009f34 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9f34:	2200      	movs	r2, #0
    9f36:	2a00      	cmp	r2, #0
    9f38:	d006      	beq.n	9f48 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9f3a:	2300      	movs	r3, #0
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d00b      	beq.n	9f58 <_extint_enable+0x24>
	return false;
    9f40:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    9f42:	2b00      	cmp	r3, #0
    9f44:	d1f9      	bne.n	9f3a <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    9f46:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    9f48:	4908      	ldr	r1, [pc, #32]	; (9f6c <_extint_enable+0x38>)
    9f4a:	780b      	ldrb	r3, [r1, #0]
    9f4c:	2002      	movs	r0, #2
    9f4e:	4303      	orrs	r3, r0
    9f50:	b2db      	uxtb	r3, r3
    9f52:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9f54:	3201      	adds	r2, #1
    9f56:	e7ee      	b.n	9f36 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    9f58:	4a04      	ldr	r2, [pc, #16]	; (9f6c <_extint_enable+0x38>)
    9f5a:	7852      	ldrb	r2, [r2, #1]
    9f5c:	b252      	sxtb	r2, r2
    9f5e:	2a00      	cmp	r2, #0
    9f60:	db01      	blt.n	9f66 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9f62:	3301      	adds	r3, #1
    9f64:	e7ea      	b.n	9f3c <_extint_enable+0x8>
			return true;
    9f66:	2301      	movs	r3, #1
    9f68:	e7eb      	b.n	9f42 <_extint_enable+0xe>
    9f6a:	46c0      	nop			; (mov r8, r8)
    9f6c:	40001800 	.word	0x40001800

00009f70 <_system_extint_init>:
{
    9f70:	b510      	push	{r4, lr}
    9f72:	b084      	sub	sp, #16
    9f74:	4c20      	ldr	r4, [pc, #128]	; (9ff8 <_system_extint_init+0x88>)
    9f76:	447c      	add	r4, pc
			PM->APBAMASK.reg |= mask;
    9f78:	4a20      	ldr	r2, [pc, #128]	; (9ffc <_system_extint_init+0x8c>)
    9f7a:	6993      	ldr	r3, [r2, #24]
    9f7c:	2140      	movs	r1, #64	; 0x40
    9f7e:	430b      	orrs	r3, r1
    9f80:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    9f82:	2302      	movs	r3, #2
    9f84:	a903      	add	r1, sp, #12
    9f86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    9f88:	2005      	movs	r0, #5
    9f8a:	4b1d      	ldr	r3, [pc, #116]	; (a000 <_system_extint_init+0x90>)
    9f8c:	58e3      	ldr	r3, [r4, r3]
    9f8e:	9301      	str	r3, [sp, #4]
    9f90:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    9f92:	2005      	movs	r0, #5
    9f94:	4b1b      	ldr	r3, [pc, #108]	; (a004 <_system_extint_init+0x94>)
    9f96:	58e3      	ldr	r3, [r4, r3]
    9f98:	9301      	str	r3, [sp, #4]
    9f9a:	4798      	blx	r3
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9f9c:	2200      	movs	r2, #0
    9f9e:	2a00      	cmp	r2, #0
    9fa0:	d006      	beq.n	9fb0 <_system_extint_init+0x40>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9fa2:	2300      	movs	r3, #0
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d00b      	beq.n	9fc0 <_system_extint_init+0x50>
	return false;
    9fa8:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
    9faa:	2b00      	cmp	r3, #0
    9fac:	d1f9      	bne.n	9fa2 <_system_extint_init+0x32>
    9fae:	e019      	b.n	9fe4 <_system_extint_init+0x74>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    9fb0:	4915      	ldr	r1, [pc, #84]	; (a008 <_system_extint_init+0x98>)
    9fb2:	780b      	ldrb	r3, [r1, #0]
    9fb4:	2001      	movs	r0, #1
    9fb6:	4303      	orrs	r3, r0
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9fbc:	3201      	adds	r2, #1
    9fbe:	e7ee      	b.n	9f9e <_system_extint_init+0x2e>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    9fc0:	4a11      	ldr	r2, [pc, #68]	; (a008 <_system_extint_init+0x98>)
    9fc2:	7852      	ldrb	r2, [r2, #1]
    9fc4:	b252      	sxtb	r2, r2
    9fc6:	2a00      	cmp	r2, #0
    9fc8:	db01      	blt.n	9fce <_system_extint_init+0x5e>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9fca:	3301      	adds	r3, #1
    9fcc:	e7ea      	b.n	9fa4 <_system_extint_init+0x34>
			return true;
    9fce:	2301      	movs	r3, #1
    9fd0:	e7eb      	b.n	9faa <_system_extint_init+0x3a>
		_extint_dev.callbacks[j] = NULL;
    9fd2:	4a0e      	ldr	r2, [pc, #56]	; (a00c <_system_extint_init+0x9c>)
    9fd4:	58a2      	ldr	r2, [r4, r2]
    9fd6:	9201      	str	r2, [sp, #4]
    9fd8:	009a      	lsls	r2, r3, #2
    9fda:	2100      	movs	r1, #0
    9fdc:	9801      	ldr	r0, [sp, #4]
    9fde:	5011      	str	r1, [r2, r0]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9fe0:	3301      	adds	r3, #1
    9fe2:	b2db      	uxtb	r3, r3
    9fe4:	2b0f      	cmp	r3, #15
    9fe6:	d9f4      	bls.n	9fd2 <_system_extint_init+0x62>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9fe8:	2210      	movs	r2, #16
    9fea:	4b09      	ldr	r3, [pc, #36]	; (a010 <_system_extint_init+0xa0>)
    9fec:	601a      	str	r2, [r3, #0]
	_extint_enable();
    9fee:	4b09      	ldr	r3, [pc, #36]	; (a014 <_system_extint_init+0xa4>)
    9ff0:	447b      	add	r3, pc
    9ff2:	4798      	blx	r3
}
    9ff4:	b004      	add	sp, #16
    9ff6:	bd10      	pop	{r4, pc}
    9ff8:	00008a16 	.word	0x00008a16
    9ffc:	40000400 	.word	0x40000400
    a000:	00000114 	.word	0x00000114
    a004:	00000380 	.word	0x00000380
    a008:	40001800 	.word	0x40001800
    a00c:	00000264 	.word	0x00000264
    a010:	e000e100 	.word	0xe000e100
    a014:	ffffff41 	.word	0xffffff41

0000a018 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    a018:	2300      	movs	r3, #0
    a01a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    a01c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    a01e:	2201      	movs	r2, #1
    a020:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    a022:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    a024:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    a026:	3302      	adds	r3, #2
    a028:	72c3      	strb	r3, [r0, #11]
}
    a02a:	4770      	bx	lr

0000a02c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a02e:	b085      	sub	sp, #20
    a030:	0005      	movs	r5, r0
    a032:	000c      	movs	r4, r1
    a034:	4b1c      	ldr	r3, [pc, #112]	; (a0a8 <extint_chan_set_config+0x7c>)
    a036:	447b      	add	r3, pc
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a038:	2200      	movs	r2, #0
    a03a:	a903      	add	r1, sp, #12
    a03c:	704a      	strb	r2, [r1, #1]
	config->powersave    = false;
    a03e:	70ca      	strb	r2, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    a040:	7922      	ldrb	r2, [r4, #4]
    a042:	700a      	strb	r2, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    a044:	7a22      	ldrb	r2, [r4, #8]
    a046:	708a      	strb	r2, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    a048:	7820      	ldrb	r0, [r4, #0]
    a04a:	4a18      	ldr	r2, [pc, #96]	; (a0ac <extint_chan_set_config+0x80>)
    a04c:	589b      	ldr	r3, [r3, r2]
    a04e:	9301      	str	r3, [sp, #4]
    a050:	4798      	blx	r3
	if (eic_index < EIC_INST_NUM) {
    a052:	2d1f      	cmp	r5, #31
    a054:	d920      	bls.n	a098 <extint_chan_set_config+0x6c>
		return NULL;
    a056:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    a058:	2207      	movs	r2, #7
    a05a:	402a      	ands	r2, r5
    a05c:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    a05e:	7ae3      	ldrb	r3, [r4, #11]
    a060:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    a062:	7aa1      	ldrb	r1, [r4, #10]
    a064:	2900      	cmp	r1, #0
    a066:	d002      	beq.n	a06e <extint_chan_set_config+0x42>
		new_config |= EIC_CONFIG_FILTEN0;
    a068:	2608      	movs	r6, #8
    a06a:	431e      	orrs	r6, r3
    a06c:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    a06e:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
    a070:	3306      	adds	r3, #6
    a072:	009b      	lsls	r3, r3, #2
    a074:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    a076:	270f      	movs	r7, #15
    a078:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    a07a:	43b9      	bics	r1, r7
			(new_config << config_pos);
    a07c:	4096      	lsls	r6, r2
    a07e:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    a080:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    a082:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    a084:	7a63      	ldrb	r3, [r4, #9]
    a086:	2b00      	cmp	r3, #0
    a088:	d108      	bne.n	a09c <extint_chan_set_config+0x70>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    a08a:	6943      	ldr	r3, [r0, #20]
    a08c:	2201      	movs	r2, #1
    a08e:	40aa      	lsls	r2, r5
    a090:	4393      	bics	r3, r2
    a092:	6143      	str	r3, [r0, #20]
	}
}
    a094:	b005      	add	sp, #20
    a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
    a098:	4805      	ldr	r0, [pc, #20]	; (a0b0 <extint_chan_set_config+0x84>)
    a09a:	e7dd      	b.n	a058 <extint_chan_set_config+0x2c>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    a09c:	6943      	ldr	r3, [r0, #20]
    a09e:	2201      	movs	r2, #1
    a0a0:	40aa      	lsls	r2, r5
    a0a2:	4313      	orrs	r3, r2
    a0a4:	6143      	str	r3, [r0, #20]
    a0a6:	e7f5      	b.n	a094 <extint_chan_set_config+0x68>
    a0a8:	00008956 	.word	0x00008956
    a0ac:	0000046c 	.word	0x0000046c
    a0b0:	40001800 	.word	0x40001800

0000a0b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    a0b4:	b510      	push	{r4, lr}
    a0b6:	b084      	sub	sp, #16
    a0b8:	4a08      	ldr	r2, [pc, #32]	; (a0dc <port_pin_set_config+0x28>)
    a0ba:	447a      	add	r2, pc
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a0bc:	2480      	movs	r4, #128	; 0x80
    a0be:	ab03      	add	r3, sp, #12
    a0c0:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    a0c2:	780c      	ldrb	r4, [r1, #0]
    a0c4:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    a0c6:	784c      	ldrb	r4, [r1, #1]
    a0c8:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    a0ca:	7889      	ldrb	r1, [r1, #2]
    a0cc:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    a0ce:	0019      	movs	r1, r3
    a0d0:	4b03      	ldr	r3, [pc, #12]	; (a0e0 <port_pin_set_config+0x2c>)
    a0d2:	58d3      	ldr	r3, [r2, r3]
    a0d4:	9301      	str	r3, [sp, #4]
    a0d6:	4798      	blx	r3
}
    a0d8:	b004      	add	sp, #16
    a0da:	bd10      	pop	{r4, pc}
    a0dc:	000088d2 	.word	0x000088d2
    a0e0:	0000046c 	.word	0x0000046c

0000a0e4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    a0e4:	6802      	ldr	r2, [r0, #0]
    a0e6:	2108      	movs	r1, #8
    a0e8:	4b08      	ldr	r3, [pc, #32]	; (a10c <rtc_calendar_enable+0x28>)
    a0ea:	6019      	str	r1, [r3, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a0ec:	6803      	ldr	r3, [r0, #0]
    a0ee:	7a9b      	ldrb	r3, [r3, #10]
    a0f0:	b25b      	sxtb	r3, r3
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	db08      	blt.n	a108 <rtc_calendar_enable+0x24>
        return false;
    a0f6:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d1f7      	bne.n	a0ec <rtc_calendar_enable+0x8>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    a0fc:	8813      	ldrh	r3, [r2, #0]
    a0fe:	2102      	movs	r1, #2
    a100:	430b      	orrs	r3, r1
    a102:	b29b      	uxth	r3, r3
    a104:	8013      	strh	r3, [r2, #0]
}
    a106:	4770      	bx	lr
                return true;
    a108:	2301      	movs	r3, #1
    a10a:	e7f5      	b.n	a0f8 <rtc_calendar_enable+0x14>
    a10c:	e000e100 	.word	0xe000e100

0000a110 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    a110:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    a112:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a114:	2408      	movs	r4, #8
    a116:	2380      	movs	r3, #128	; 0x80
    a118:	4909      	ldr	r1, [pc, #36]	; (a140 <rtc_calendar_disable+0x30>)
    a11a:	50cc      	str	r4, [r1, r3]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a11c:	6803      	ldr	r3, [r0, #0]
    a11e:	7a9b      	ldrb	r3, [r3, #10]
    a120:	b25b      	sxtb	r3, r3
    a122:	2b00      	cmp	r3, #0
    a124:	db0a      	blt.n	a13c <rtc_calendar_disable+0x2c>
        return false;
    a126:	2300      	movs	r3, #0

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    a128:	2b00      	cmp	r3, #0
    a12a:	d1f7      	bne.n	a11c <rtc_calendar_disable+0xc>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    a12c:	33c1      	adds	r3, #193	; 0xc1
    a12e:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    a130:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    a132:	8813      	ldrh	r3, [r2, #0]
    a134:	2102      	movs	r1, #2
    a136:	438b      	bics	r3, r1
    a138:	8013      	strh	r3, [r2, #0]
}
    a13a:	bd10      	pop	{r4, pc}
                return true;
    a13c:	2301      	movs	r3, #1
    a13e:	e7f3      	b.n	a128 <rtc_calendar_disable+0x18>
    a140:	e000e100 	.word	0xe000e100

0000a144 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    a144:	b530      	push	{r4, r5, lr}
    a146:	b083      	sub	sp, #12
    a148:	0004      	movs	r4, r0
    a14a:	4b0d      	ldr	r3, [pc, #52]	; (a180 <rtc_calendar_reset+0x3c>)
    a14c:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    a14e:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    a150:	4a0c      	ldr	r2, [pc, #48]	; (a184 <rtc_calendar_reset+0x40>)
    a152:	589b      	ldr	r3, [r3, r2]
    a154:	9301      	str	r3, [sp, #4]
    a156:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    a158:	2300      	movs	r3, #0
    a15a:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    a15c:	8263      	strh	r3, [r4, #18]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a15e:	6823      	ldr	r3, [r4, #0]
    a160:	7a9b      	ldrb	r3, [r3, #10]
    a162:	b25b      	sxtb	r3, r3
    a164:	2b00      	cmp	r3, #0
    a166:	db09      	blt.n	a17c <rtc_calendar_reset+0x38>
        return false;
    a168:	2300      	movs	r3, #0
#endif

	while (rtc_calendar_is_syncing(module)) {
    a16a:	2b00      	cmp	r3, #0
    a16c:	d1f7      	bne.n	a15e <rtc_calendar_reset+0x1a>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    a16e:	882b      	ldrh	r3, [r5, #0]
    a170:	2201      	movs	r2, #1
    a172:	4313      	orrs	r3, r2
    a174:	b29b      	uxth	r3, r3
    a176:	802b      	strh	r3, [r5, #0]
}
    a178:	b003      	add	sp, #12
    a17a:	bd30      	pop	{r4, r5, pc}
                return true;
    a17c:	2301      	movs	r3, #1
    a17e:	e7f4      	b.n	a16a <rtc_calendar_reset+0x26>
    a180:	00008840 	.word	0x00008840
    a184:	00000230 	.word	0x00000230

0000a188 <rtc_calendar_time_to_register_value>:
{
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    a188:	88cb      	ldrh	r3, [r1, #6]
    a18a:	88c2      	ldrh	r2, [r0, #6]
    a18c:	1a9b      	subs	r3, r3, r2
    a18e:	069b      	lsls	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    a190:	794a      	ldrb	r2, [r1, #5]
    a192:	0592      	lsls	r2, r2, #22
    a194:	4313      	orrs	r3, r2

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    a196:	790a      	ldrb	r2, [r1, #4]
    a198:	0452      	lsls	r2, r2, #17
    a19a:	4313      	orrs	r3, r2

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    a19c:	788a      	ldrb	r2, [r1, #2]
    a19e:	0312      	lsls	r2, r2, #12
    a1a0:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    a1a2:	7902      	ldrb	r2, [r0, #4]
    a1a4:	2a00      	cmp	r2, #0
    a1a6:	d105      	bne.n	a1b4 <rtc_calendar_time_to_register_value+0x2c>
    a1a8:	78ca      	ldrb	r2, [r1, #3]
    a1aa:	2a00      	cmp	r2, #0
    a1ac:	d002      	beq.n	a1b4 <rtc_calendar_time_to_register_value+0x2c>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    a1ae:	2280      	movs	r2, #128	; 0x80
    a1b0:	0252      	lsls	r2, r2, #9
    a1b2:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    a1b4:	7848      	ldrb	r0, [r1, #1]
    a1b6:	0180      	lsls	r0, r0, #6
    a1b8:	4303      	orrs	r3, r0

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    a1ba:	7808      	ldrb	r0, [r1, #0]
    a1bc:	4318      	orrs	r0, r3

	return register_value;
}
    a1be:	4770      	bx	lr

0000a1c0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    a1c0:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    a1c2:	0e8c      	lsrs	r4, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    a1c4:	88c3      	ldrh	r3, [r0, #6]
    a1c6:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    a1c8:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    a1ca:	0d8c      	lsrs	r4, r1, #22
    a1cc:	230f      	movs	r3, #15
    a1ce:	4023      	ands	r3, r4
    a1d0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    a1d2:	0c4c      	lsrs	r4, r1, #17
    a1d4:	231f      	movs	r3, #31
    a1d6:	4023      	ands	r3, r4
    a1d8:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    a1da:	7903      	ldrb	r3, [r0, #4]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d110      	bne.n	a202 <rtc_calendar_register_value_to_time+0x42>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    a1e0:	0b08      	lsrs	r0, r1, #12
    a1e2:	230f      	movs	r3, #15
    a1e4:	4003      	ands	r3, r0
		time->hour = ((register_value &
    a1e6:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    a1e8:	2380      	movs	r3, #128	; 0x80
    a1ea:	025b      	lsls	r3, r3, #9
    a1ec:	400b      	ands	r3, r1
    a1ee:	1e58      	subs	r0, r3, #1
    a1f0:	4183      	sbcs	r3, r0
    a1f2:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    a1f4:	0988      	lsrs	r0, r1, #6
    a1f6:	233f      	movs	r3, #63	; 0x3f
    a1f8:	4018      	ands	r0, r3
    a1fa:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    a1fc:	4019      	ands	r1, r3
    a1fe:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    a200:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    a202:	0b08      	lsrs	r0, r1, #12
    a204:	231f      	movs	r3, #31
    a206:	4003      	ands	r3, r0
    a208:	7093      	strb	r3, [r2, #2]
    a20a:	e7f3      	b.n	a1f4 <rtc_calendar_register_value_to_time+0x34>

0000a20c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    a20c:	b570      	push	{r4, r5, r6, lr}
    a20e:	b082      	sub	sp, #8
    a210:	000a      	movs	r2, r1
    a212:	4c16      	ldr	r4, [pc, #88]	; (a26c <rtc_calendar_get_time+0x60>)
    a214:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    a216:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    a218:	7945      	ldrb	r5, [r0, #5]
    a21a:	2d00      	cmp	r5, #0
    a21c:	d009      	beq.n	a232 <rtc_calendar_get_time+0x26>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    a21e:	8859      	ldrh	r1, [r3, #2]
    a220:	0449      	lsls	r1, r1, #17
    a222:	d513      	bpl.n	a24c <rtc_calendar_get_time+0x40>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    a224:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    a226:	4b12      	ldr	r3, [pc, #72]	; (a270 <rtc_calendar_get_time+0x64>)
    a228:	58e3      	ldr	r3, [r4, r3]
    a22a:	9301      	str	r3, [sp, #4]
    a22c:	4798      	blx	r3
}
    a22e:	b002      	add	sp, #8
    a230:	bd70      	pop	{r4, r5, r6, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    a232:	4910      	ldr	r1, [pc, #64]	; (a274 <rtc_calendar_get_time+0x68>)
    a234:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a236:	6801      	ldr	r1, [r0, #0]
    a238:	7a89      	ldrb	r1, [r1, #10]
    a23a:	b249      	sxtb	r1, r1
    a23c:	2900      	cmp	r1, #0
    a23e:	db03      	blt.n	a248 <rtc_calendar_get_time+0x3c>
        return false;
    a240:	0029      	movs	r1, r5
		while (rtc_calendar_is_syncing(module)) {
    a242:	2900      	cmp	r1, #0
    a244:	d1f7      	bne.n	a236 <rtc_calendar_get_time+0x2a>
    a246:	e7ed      	b.n	a224 <rtc_calendar_get_time+0x18>
                return true;
    a248:	2101      	movs	r1, #1
    a24a:	e7fa      	b.n	a242 <rtc_calendar_get_time+0x36>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    a24c:	8859      	ldrh	r1, [r3, #2]
    a24e:	4e0a      	ldr	r6, [pc, #40]	; (a278 <rtc_calendar_get_time+0x6c>)
    a250:	4331      	orrs	r1, r6
    a252:	b289      	uxth	r1, r1
    a254:	8059      	strh	r1, [r3, #2]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a256:	6801      	ldr	r1, [r0, #0]
    a258:	7a89      	ldrb	r1, [r1, #10]
    a25a:	b249      	sxtb	r1, r1
    a25c:	2900      	cmp	r1, #0
    a25e:	db03      	blt.n	a268 <rtc_calendar_get_time+0x5c>
        return false;
    a260:	2100      	movs	r1, #0
		while (rtc_calendar_is_syncing(module)) {
    a262:	2900      	cmp	r1, #0
    a264:	d1f7      	bne.n	a256 <rtc_calendar_get_time+0x4a>
    a266:	e7dd      	b.n	a224 <rtc_calendar_get_time+0x18>
                return true;
    a268:	0029      	movs	r1, r5
    a26a:	e7fa      	b.n	a262 <rtc_calendar_get_time+0x56>
    a26c:	00008778 	.word	0x00008778
    a270:	00000068 	.word	0x00000068
    a274:	ffff8000 	.word	0xffff8000
    a278:	ffffc000 	.word	0xffffc000

0000a27c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    a27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a27e:	b083      	sub	sp, #12
    a280:	0006      	movs	r6, r0
    a282:	000d      	movs	r5, r1
    a284:	0014      	movs	r4, r2
    a286:	4b0f      	ldr	r3, [pc, #60]	; (a2c4 <rtc_calendar_set_alarm+0x48>)
    a288:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    a28a:	6807      	ldr	r7, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    a28c:	2a01      	cmp	r2, #1
    a28e:	d902      	bls.n	a296 <rtc_calendar_set_alarm+0x1a>
		return STATUS_ERR_INVALID_ARG;
    a290:	2017      	movs	r0, #23

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    a292:	b003      	add	sp, #12
    a294:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    a296:	4a0c      	ldr	r2, [pc, #48]	; (a2c8 <rtc_calendar_set_alarm+0x4c>)
    a298:	589b      	ldr	r3, [r3, r2]
    a29a:	9301      	str	r3, [sp, #4]
    a29c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    a29e:	6833      	ldr	r3, [r6, #0]
    a2a0:	7a9b      	ldrb	r3, [r3, #10]
    a2a2:	b25b      	sxtb	r3, r3
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	db0a      	blt.n	a2be <rtc_calendar_set_alarm+0x42>
        return false;
    a2a8:	2300      	movs	r3, #0
	while (rtc_calendar_is_syncing(module)) {
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d1f7      	bne.n	a29e <rtc_calendar_set_alarm+0x22>
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    a2ae:	3403      	adds	r4, #3
    a2b0:	00e4      	lsls	r4, r4, #3
    a2b2:	51e0      	str	r0, [r4, r7]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    a2b4:	7a2b      	ldrb	r3, [r5, #8]
    a2b6:	193c      	adds	r4, r7, r4
    a2b8:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
    a2ba:	2000      	movs	r0, #0
    a2bc:	e7e9      	b.n	a292 <rtc_calendar_set_alarm+0x16>
                return true;
    a2be:	2301      	movs	r3, #1
    a2c0:	e7f3      	b.n	a2aa <rtc_calendar_set_alarm+0x2e>
    a2c2:	46c0      	nop			; (mov r8, r8)
    a2c4:	00008704 	.word	0x00008704
    a2c8:	00000428 	.word	0x00000428

0000a2cc <_rtc_calendar_set_config>:
{
    a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ce:	b083      	sub	sp, #12
    a2d0:	0005      	movs	r5, r0
    a2d2:	000e      	movs	r6, r1
    a2d4:	4f17      	ldr	r7, [pc, #92]	; (a334 <_rtc_calendar_set_config+0x68>)
    a2d6:	447f      	add	r7, pc
	Rtc *const rtc_module = module->hw;
    a2d8:	6801      	ldr	r1, [r0, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    a2da:	8832      	ldrh	r2, [r6, #0]
    a2dc:	2308      	movs	r3, #8
    a2de:	4313      	orrs	r3, r2
    a2e0:	b29b      	uxth	r3, r3
	if (!(config->clock_24h)) {
    a2e2:	7930      	ldrb	r0, [r6, #4]
    a2e4:	2800      	cmp	r0, #0
    a2e6:	d102      	bne.n	a2ee <_rtc_calendar_set_config+0x22>
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    a2e8:	2348      	movs	r3, #72	; 0x48
    a2ea:	4313      	orrs	r3, r2
    a2ec:	b29b      	uxth	r3, r3
	if (config->clear_on_match) {
    a2ee:	78b2      	ldrb	r2, [r6, #2]
    a2f0:	2a00      	cmp	r2, #0
    a2f2:	d002      	beq.n	a2fa <_rtc_calendar_set_config+0x2e>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    a2f4:	2280      	movs	r2, #128	; 0x80
    a2f6:	4313      	orrs	r3, r2
    a2f8:	b29b      	uxth	r3, r3
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    a2fa:	800b      	strh	r3, [r1, #0]
	if (config->continuously_update) {
    a2fc:	78f3      	ldrb	r3, [r6, #3]
    a2fe:	2b00      	cmp	r3, #0
    a300:	d004      	beq.n	a30c <_rtc_calendar_set_config+0x40>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    a302:	884b      	ldrh	r3, [r1, #2]
    a304:	2280      	movs	r2, #128	; 0x80
    a306:	01d2      	lsls	r2, r2, #7
    a308:	4313      	orrs	r3, r2
    a30a:	804b      	strh	r3, [r1, #2]
{
    a30c:	2400      	movs	r4, #0
    a30e:	e00c      	b.n	a32a <_rtc_calendar_set_config+0x5e>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    a310:	00a3      	lsls	r3, r4, #2
    a312:	191b      	adds	r3, r3, r4
    a314:	0059      	lsls	r1, r3, #1
    a316:	3108      	adds	r1, #8
    a318:	1871      	adds	r1, r6, r1
    a31a:	0022      	movs	r2, r4
    a31c:	0028      	movs	r0, r5
    a31e:	4b06      	ldr	r3, [pc, #24]	; (a338 <_rtc_calendar_set_config+0x6c>)
    a320:	58fb      	ldr	r3, [r7, r3]
    a322:	9301      	str	r3, [sp, #4]
    a324:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    a326:	3401      	adds	r4, #1
    a328:	b2e4      	uxtb	r4, r4
    a32a:	2c00      	cmp	r4, #0
    a32c:	d0f0      	beq.n	a310 <_rtc_calendar_set_config+0x44>
}
    a32e:	b003      	add	sp, #12
    a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a332:	46c0      	nop			; (mov r8, r8)
    a334:	000086b6 	.word	0x000086b6
    a338:	00000454 	.word	0x00000454

0000a33c <rtc_calendar_init>:
{
    a33c:	b570      	push	{r4, r5, r6, lr}
    a33e:	b084      	sub	sp, #16
    a340:	0004      	movs	r4, r0
    a342:	0016      	movs	r6, r2
    a344:	4d14      	ldr	r5, [pc, #80]	; (a398 <rtc_calendar_init+0x5c>)
    a346:	447d      	add	r5, pc
	module->hw = hw;
    a348:	6001      	str	r1, [r0, #0]
    a34a:	4a14      	ldr	r2, [pc, #80]	; (a39c <rtc_calendar_init+0x60>)
    a34c:	6993      	ldr	r3, [r2, #24]
    a34e:	2120      	movs	r1, #32
    a350:	430b      	orrs	r3, r1
    a352:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    a354:	2302      	movs	r3, #2
    a356:	a903      	add	r1, sp, #12
    a358:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    a35a:	2004      	movs	r0, #4
    a35c:	4b10      	ldr	r3, [pc, #64]	; (a3a0 <rtc_calendar_init+0x64>)
    a35e:	58eb      	ldr	r3, [r5, r3]
    a360:	9301      	str	r3, [sp, #4]
    a362:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    a364:	2004      	movs	r0, #4
    a366:	4b0f      	ldr	r3, [pc, #60]	; (a3a4 <rtc_calendar_init+0x68>)
    a368:	58eb      	ldr	r3, [r5, r3]
    a36a:	9301      	str	r3, [sp, #4]
    a36c:	4798      	blx	r3
	rtc_calendar_reset(module);
    a36e:	0020      	movs	r0, r4
    a370:	4b0d      	ldr	r3, [pc, #52]	; (a3a8 <rtc_calendar_init+0x6c>)
    a372:	58eb      	ldr	r3, [r5, r3]
    a374:	9301      	str	r3, [sp, #4]
    a376:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    a378:	7933      	ldrb	r3, [r6, #4]
    a37a:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    a37c:	78f3      	ldrb	r3, [r6, #3]
    a37e:	7163      	strb	r3, [r4, #5]
	module->year_init_value     = config->year_init_value;
    a380:	88f3      	ldrh	r3, [r6, #6]
    a382:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
    a384:	4b09      	ldr	r3, [pc, #36]	; (a3ac <rtc_calendar_init+0x70>)
    a386:	58eb      	ldr	r3, [r5, r3]
    a388:	601c      	str	r4, [r3, #0]
	_rtc_calendar_set_config(module, config);
    a38a:	0031      	movs	r1, r6
    a38c:	0020      	movs	r0, r4
    a38e:	4b08      	ldr	r3, [pc, #32]	; (a3b0 <rtc_calendar_init+0x74>)
    a390:	447b      	add	r3, pc
    a392:	4798      	blx	r3
}
    a394:	b004      	add	sp, #16
    a396:	bd70      	pop	{r4, r5, r6, pc}
    a398:	00008646 	.word	0x00008646
    a39c:	40000400 	.word	0x40000400
    a3a0:	00000114 	.word	0x00000114
    a3a4:	00000380 	.word	0x00000380
    a3a8:	00000278 	.word	0x00000278
    a3ac:	00000024 	.word	0x00000024
    a3b0:	ffffff39 	.word	0xffffff39

0000a3b4 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    a3b4:	b510      	push	{r4, lr}
    a3b6:	b082      	sub	sp, #8
    a3b8:	4b11      	ldr	r3, [pc, #68]	; (a400 <_rtc_interrupt_handler+0x4c>)
    a3ba:	447b      	add	r3, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    a3bc:	4a11      	ldr	r2, [pc, #68]	; (a404 <_rtc_interrupt_handler+0x50>)
    a3be:	589b      	ldr	r3, [r3, r2]
    a3c0:	9301      	str	r3, [sp, #4]
    a3c2:	0080      	lsls	r0, r0, #2
    a3c4:	58c2      	ldr	r2, [r0, r3]

	Rtc *const rtc_module = module->hw;
    a3c6:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    a3c8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    a3ca:	8a13      	ldrh	r3, [r2, #16]
    a3cc:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    a3ce:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    a3d0:	79e3      	ldrb	r3, [r4, #7]
    a3d2:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    a3d4:	b258      	sxtb	r0, r3
    a3d6:	2800      	cmp	r0, #0
    a3d8:	db07      	blt.n	a3ea <_rtc_interrupt_handler+0x36>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    a3da:	07db      	lsls	r3, r3, #31
    a3dc:	d503      	bpl.n	a3e6 <_rtc_interrupt_handler+0x32>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    a3de:	07cb      	lsls	r3, r1, #31
    a3e0:	d40b      	bmi.n	a3fa <_rtc_interrupt_handler+0x46>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    a3e2:	2301      	movs	r3, #1
    a3e4:	7223      	strb	r3, [r4, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    a3e6:	b002      	add	sp, #8
    a3e8:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    a3ea:	078b      	lsls	r3, r1, #30
    a3ec:	d402      	bmi.n	a3f4 <_rtc_interrupt_handler+0x40>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    a3ee:	2380      	movs	r3, #128	; 0x80
    a3f0:	7223      	strb	r3, [r4, #8]
    a3f2:	e7f8      	b.n	a3e6 <_rtc_interrupt_handler+0x32>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    a3f4:	68d3      	ldr	r3, [r2, #12]
    a3f6:	4798      	blx	r3
    a3f8:	e7f9      	b.n	a3ee <_rtc_interrupt_handler+0x3a>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    a3fa:	6893      	ldr	r3, [r2, #8]
    a3fc:	4798      	blx	r3
    a3fe:	e7f0      	b.n	a3e2 <_rtc_interrupt_handler+0x2e>
    a400:	000085d2 	.word	0x000085d2
    a404:	00000024 	.word	0x00000024

0000a408 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    a408:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(0);
    a40a:	2000      	movs	r0, #0
    a40c:	4b01      	ldr	r3, [pc, #4]	; (a414 <RTC_Handler+0xc>)
    a40e:	447b      	add	r3, pc
    a410:	4798      	blx	r3
}
    a412:	bd10      	pop	{r4, pc}
    a414:	ffffffa3 	.word	0xffffffa3

0000a418 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    a418:	0849      	lsrs	r1, r1, #1
    a41a:	4281      	cmp	r1, r0
    a41c:	d201      	bcs.n	a422 <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a41e:	2040      	movs	r0, #64	; 0x40
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    a420:	4770      	bx	lr
    a422:	2300      	movs	r3, #0
    a424:	e002      	b.n	a42c <_sercom_get_sync_baud_val+0x14>
		clock_value = clock_value - baudrate;
    a426:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    a428:	3301      	adds	r3, #1
    a42a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    a42c:	4281      	cmp	r1, r0
    a42e:	d2fa      	bcs.n	a426 <_sercom_get_sync_baud_val+0xe>
	baud_calculated = baud_calculated - 1;
    a430:	3b01      	subs	r3, #1
    a432:	b29b      	uxth	r3, r3
	if (baud_calculated > 0xFF) {
    a434:	2bff      	cmp	r3, #255	; 0xff
    a436:	d901      	bls.n	a43c <_sercom_get_sync_baud_val+0x24>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a438:	2040      	movs	r0, #64	; 0x40
    a43a:	e7f1      	b.n	a420 <_sercom_get_sync_baud_val+0x8>
		*baudvalue = baud_calculated;
    a43c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    a43e:	2000      	movs	r0, #0
    a440:	e7ee      	b.n	a420 <_sercom_get_sync_baud_val+0x8>
	...

0000a444 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a444:	b530      	push	{r4, r5, lr}
    a446:	b085      	sub	sp, #20
    a448:	0005      	movs	r5, r0
    a44a:	4c13      	ldr	r4, [pc, #76]	; (a498 <sercom_set_gclk_generator+0x54>)
    a44c:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a44e:	4b13      	ldr	r3, [pc, #76]	; (a49c <sercom_set_gclk_generator+0x58>)
    a450:	447b      	add	r3, pc
    a452:	781b      	ldrb	r3, [r3, #0]
    a454:	2b00      	cmp	r3, #0
    a456:	d008      	beq.n	a46a <sercom_set_gclk_generator+0x26>
    a458:	2900      	cmp	r1, #0
    a45a:	d106      	bne.n	a46a <sercom_set_gclk_generator+0x26>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    a45c:	4b10      	ldr	r3, [pc, #64]	; (a4a0 <sercom_set_gclk_generator+0x5c>)
    a45e:	447b      	add	r3, pc
    a460:	785b      	ldrb	r3, [r3, #1]
    a462:	4283      	cmp	r3, r0
    a464:	d015      	beq.n	a492 <sercom_set_gclk_generator+0x4e>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a466:	201d      	movs	r0, #29
    a468:	e011      	b.n	a48e <sercom_set_gclk_generator+0x4a>
		gclk_chan_conf.source_generator = generator_source;
    a46a:	a903      	add	r1, sp, #12
    a46c:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a46e:	2013      	movs	r0, #19
    a470:	4b0c      	ldr	r3, [pc, #48]	; (a4a4 <sercom_set_gclk_generator+0x60>)
    a472:	58e3      	ldr	r3, [r4, r3]
    a474:	9301      	str	r3, [sp, #4]
    a476:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a478:	2013      	movs	r0, #19
    a47a:	4b0b      	ldr	r3, [pc, #44]	; (a4a8 <sercom_set_gclk_generator+0x64>)
    a47c:	58e3      	ldr	r3, [r4, r3]
    a47e:	9301      	str	r3, [sp, #4]
    a480:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    a482:	4b0a      	ldr	r3, [pc, #40]	; (a4ac <sercom_set_gclk_generator+0x68>)
    a484:	447b      	add	r3, pc
    a486:	705d      	strb	r5, [r3, #1]
		_sercom_config.generator_is_set = true;
    a488:	2201      	movs	r2, #1
    a48a:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    a48c:	2000      	movs	r0, #0
}
    a48e:	b005      	add	sp, #20
    a490:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    a492:	2000      	movs	r0, #0
    a494:	e7fb      	b.n	a48e <sercom_set_gclk_generator+0x4a>
    a496:	46c0      	nop			; (mov r8, r8)
    a498:	00008540 	.word	0x00008540
    a49c:	1fff669c 	.word	0x1fff669c
    a4a0:	1fff668e 	.word	0x1fff668e
    a4a4:	00000114 	.word	0x00000114
    a4a8:	00000380 	.word	0x00000380
    a4ac:	1fff6668 	.word	0x1fff6668

0000a4b0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a4b0:	b500      	push	{lr}
	switch ((uintptr_t)sercom_module) {
    a4b2:	4a3d      	ldr	r2, [pc, #244]	; (a5a8 <_sercom_get_default_pad+0xf8>)
    a4b4:	4290      	cmp	r0, r2
    a4b6:	d02f      	beq.n	a518 <_sercom_get_default_pad+0x68>
    a4b8:	d90a      	bls.n	a4d0 <_sercom_get_default_pad+0x20>
    a4ba:	4a3c      	ldr	r2, [pc, #240]	; (a5ac <_sercom_get_default_pad+0xfc>)
    a4bc:	4290      	cmp	r0, r2
    a4be:	d049      	beq.n	a554 <_sercom_get_default_pad+0xa4>
    a4c0:	4a3b      	ldr	r2, [pc, #236]	; (a5b0 <_sercom_get_default_pad+0x100>)
    a4c2:	4290      	cmp	r0, r2
    a4c4:	d055      	beq.n	a572 <_sercom_get_default_pad+0xc2>
    a4c6:	4a3b      	ldr	r2, [pc, #236]	; (a5b4 <_sercom_get_default_pad+0x104>)
    a4c8:	4290      	cmp	r0, r2
    a4ca:	d034      	beq.n	a536 <_sercom_get_default_pad+0x86>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    a4cc:	2000      	movs	r0, #0
}
    a4ce:	bd00      	pop	{pc}
	switch ((uintptr_t)sercom_module) {
    a4d0:	4a39      	ldr	r2, [pc, #228]	; (a5b8 <_sercom_get_default_pad+0x108>)
    a4d2:	4290      	cmp	r0, r2
    a4d4:	d009      	beq.n	a4ea <_sercom_get_default_pad+0x3a>
    a4d6:	4a39      	ldr	r2, [pc, #228]	; (a5bc <_sercom_get_default_pad+0x10c>)
    a4d8:	4290      	cmp	r0, r2
    a4da:	d1f7      	bne.n	a4cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a4dc:	2903      	cmp	r1, #3
    a4de:	d815      	bhi.n	a50c <_sercom_get_default_pad+0x5c>
    a4e0:	0008      	movs	r0, r1
    a4e2:	f005 f89d 	bl	f620 <__gnu_thumb1_case_uqi>
    a4e6:	5711      	.short	0x5711
    a4e8:	1715      	.short	0x1715
    a4ea:	2903      	cmp	r1, #3
    a4ec:	d806      	bhi.n	a4fc <_sercom_get_default_pad+0x4c>
    a4ee:	0008      	movs	r0, r1
    a4f0:	f005 f896 	bl	f620 <__gnu_thumb1_case_uqi>
    a4f4:	08064e02 	.word	0x08064e02
    a4f8:	4831      	ldr	r0, [pc, #196]	; (a5c0 <_sercom_get_default_pad+0x110>)
    a4fa:	e7e8      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a4fc:	2000      	movs	r0, #0
    a4fe:	e7e6      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a500:	4830      	ldr	r0, [pc, #192]	; (a5c4 <_sercom_get_default_pad+0x114>)
    a502:	e7e4      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a504:	4830      	ldr	r0, [pc, #192]	; (a5c8 <_sercom_get_default_pad+0x118>)
    a506:	e7e2      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a508:	2003      	movs	r0, #3
    a50a:	e7e0      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a50c:	2000      	movs	r0, #0
    a50e:	e7de      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a510:	482e      	ldr	r0, [pc, #184]	; (a5cc <_sercom_get_default_pad+0x11c>)
    a512:	e7dc      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a514:	482e      	ldr	r0, [pc, #184]	; (a5d0 <_sercom_get_default_pad+0x120>)
    a516:	e7da      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a518:	2903      	cmp	r1, #3
    a51a:	d806      	bhi.n	a52a <_sercom_get_default_pad+0x7a>
    a51c:	0008      	movs	r0, r1
    a51e:	f005 f87f 	bl	f620 <__gnu_thumb1_case_uqi>
    a522:	3b02      	.short	0x3b02
    a524:	0806      	.short	0x0806
    a526:	482b      	ldr	r0, [pc, #172]	; (a5d4 <_sercom_get_default_pad+0x124>)
    a528:	e7d1      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a52a:	2000      	movs	r0, #0
    a52c:	e7cf      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a52e:	482a      	ldr	r0, [pc, #168]	; (a5d8 <_sercom_get_default_pad+0x128>)
    a530:	e7cd      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a532:	482a      	ldr	r0, [pc, #168]	; (a5dc <_sercom_get_default_pad+0x12c>)
    a534:	e7cb      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a536:	2903      	cmp	r1, #3
    a538:	d806      	bhi.n	a548 <_sercom_get_default_pad+0x98>
    a53a:	0008      	movs	r0, r1
    a53c:	f005 f870 	bl	f620 <__gnu_thumb1_case_uqi>
    a540:	08062e02 	.word	0x08062e02
    a544:	4826      	ldr	r0, [pc, #152]	; (a5e0 <_sercom_get_default_pad+0x130>)
    a546:	e7c2      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a548:	2000      	movs	r0, #0
    a54a:	e7c0      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a54c:	4825      	ldr	r0, [pc, #148]	; (a5e4 <_sercom_get_default_pad+0x134>)
    a54e:	e7be      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a550:	4825      	ldr	r0, [pc, #148]	; (a5e8 <_sercom_get_default_pad+0x138>)
    a552:	e7bc      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a554:	2903      	cmp	r1, #3
    a556:	d806      	bhi.n	a566 <_sercom_get_default_pad+0xb6>
    a558:	0008      	movs	r0, r1
    a55a:	f005 f861 	bl	f620 <__gnu_thumb1_case_uqi>
    a55e:	2102      	.short	0x2102
    a560:	0806      	.short	0x0806
    a562:	4822      	ldr	r0, [pc, #136]	; (a5ec <_sercom_get_default_pad+0x13c>)
    a564:	e7b3      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a566:	2000      	movs	r0, #0
    a568:	e7b1      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a56a:	4821      	ldr	r0, [pc, #132]	; (a5f0 <_sercom_get_default_pad+0x140>)
    a56c:	e7af      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a56e:	4821      	ldr	r0, [pc, #132]	; (a5f4 <_sercom_get_default_pad+0x144>)
    a570:	e7ad      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a572:	2903      	cmp	r1, #3
    a574:	d806      	bhi.n	a584 <_sercom_get_default_pad+0xd4>
    a576:	0008      	movs	r0, r1
    a578:	f005 f852 	bl	f620 <__gnu_thumb1_case_uqi>
    a57c:	08061402 	.word	0x08061402
    a580:	481d      	ldr	r0, [pc, #116]	; (a5f8 <_sercom_get_default_pad+0x148>)
    a582:	e7a4      	b.n	a4ce <_sercom_get_default_pad+0x1e>
	return 0;
    a584:	2000      	movs	r0, #0
    a586:	e7a2      	b.n	a4ce <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a588:	481c      	ldr	r0, [pc, #112]	; (a5fc <_sercom_get_default_pad+0x14c>)
    a58a:	e7a0      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a58c:	481c      	ldr	r0, [pc, #112]	; (a600 <_sercom_get_default_pad+0x150>)
    a58e:	e79e      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a590:	481c      	ldr	r0, [pc, #112]	; (a604 <_sercom_get_default_pad+0x154>)
    a592:	e79c      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a594:	481c      	ldr	r0, [pc, #112]	; (a608 <_sercom_get_default_pad+0x158>)
    a596:	e79a      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a598:	481c      	ldr	r0, [pc, #112]	; (a60c <_sercom_get_default_pad+0x15c>)
    a59a:	e798      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a59c:	481c      	ldr	r0, [pc, #112]	; (a610 <_sercom_get_default_pad+0x160>)
    a59e:	e796      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a5a0:	481c      	ldr	r0, [pc, #112]	; (a614 <_sercom_get_default_pad+0x164>)
    a5a2:	e794      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a5a4:	481c      	ldr	r0, [pc, #112]	; (a618 <_sercom_get_default_pad+0x168>)
    a5a6:	e792      	b.n	a4ce <_sercom_get_default_pad+0x1e>
    a5a8:	42001000 	.word	0x42001000
    a5ac:	42001800 	.word	0x42001800
    a5b0:	42001c00 	.word	0x42001c00
    a5b4:	42001400 	.word	0x42001400
    a5b8:	42000800 	.word	0x42000800
    a5bc:	42000c00 	.word	0x42000c00
    a5c0:	00040003 	.word	0x00040003
    a5c4:	00060003 	.word	0x00060003
    a5c8:	00070003 	.word	0x00070003
    a5cc:	001e0003 	.word	0x001e0003
    a5d0:	001f0003 	.word	0x001f0003
    a5d4:	00080003 	.word	0x00080003
    a5d8:	000a0003 	.word	0x000a0003
    a5dc:	000b0003 	.word	0x000b0003
    a5e0:	00100003 	.word	0x00100003
    a5e4:	00120003 	.word	0x00120003
    a5e8:	00130003 	.word	0x00130003
    a5ec:	000c0003 	.word	0x000c0003
    a5f0:	000e0003 	.word	0x000e0003
    a5f4:	000f0003 	.word	0x000f0003
    a5f8:	00160003 	.word	0x00160003
    a5fc:	00180003 	.word	0x00180003
    a600:	00190003 	.word	0x00190003
    a604:	00050003 	.word	0x00050003
    a608:	00010003 	.word	0x00010003
    a60c:	00090003 	.word	0x00090003
    a610:	00110003 	.word	0x00110003
    a614:	000d0003 	.word	0x000d0003
    a618:	00170003 	.word	0x00170003

0000a61c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a61c:	b530      	push	{r4, r5, lr}
    a61e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a620:	4a0b      	ldr	r2, [pc, #44]	; (a650 <_sercom_get_sercom_inst_index+0x34>)
    a622:	447a      	add	r2, pc
    a624:	466b      	mov	r3, sp
    a626:	ca32      	ldmia	r2!, {r1, r4, r5}
    a628:	c332      	stmia	r3!, {r1, r4, r5}
    a62a:	0014      	movs	r4, r2
    a62c:	0019      	movs	r1, r3
    a62e:	cc2c      	ldmia	r4!, {r2, r3, r5}
    a630:	c12c      	stmia	r1!, {r2, r3, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a632:	2300      	movs	r3, #0
    a634:	2b05      	cmp	r3, #5
    a636:	d808      	bhi.n	a64a <_sercom_get_sercom_inst_index+0x2e>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a638:	009a      	lsls	r2, r3, #2
    a63a:	4669      	mov	r1, sp
    a63c:	5852      	ldr	r2, [r2, r1]
    a63e:	4282      	cmp	r2, r0
    a640:	d001      	beq.n	a646 <_sercom_get_sercom_inst_index+0x2a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a642:	3301      	adds	r3, #1
    a644:	e7f6      	b.n	a634 <_sercom_get_sercom_inst_index+0x18>
			return i;
    a646:	b2d8      	uxtb	r0, r3
    a648:	e000      	b.n	a64c <_sercom_get_sercom_inst_index+0x30>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a64a:	2000      	movs	r0, #0
}
    a64c:	b007      	add	sp, #28
    a64e:	bd30      	pop	{r4, r5, pc}
    a650:	0000815e 	.word	0x0000815e

0000a654 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    a654:	4770      	bx	lr
	...

0000a658 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a658:	b570      	push	{r4, r5, r6, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	4e10      	ldr	r6, [pc, #64]	; (a6a0 <_sercom_set_handler+0x48>)
    a65e:	447e      	add	r6, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a660:	4b10      	ldr	r3, [pc, #64]	; (a6a4 <_sercom_set_handler+0x4c>)
    a662:	447b      	add	r3, pc
    a664:	781b      	ldrb	r3, [r3, #0]
    a666:	2b00      	cmp	r3, #0
    a668:	d00d      	beq.n	a686 <_sercom_set_handler+0x2e>
    a66a:	e012      	b.n	a692 <_sercom_set_handler+0x3a>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a66c:	009c      	lsls	r4, r3, #2
    a66e:	4a0e      	ldr	r2, [pc, #56]	; (a6a8 <_sercom_set_handler+0x50>)
    a670:	447a      	add	r2, pc
    a672:	4d0e      	ldr	r5, [pc, #56]	; (a6ac <_sercom_set_handler+0x54>)
    a674:	447d      	add	r5, pc
    a676:	5162      	str	r2, [r4, r5]
			_sercom_instances[i] = NULL;
    a678:	4a0d      	ldr	r2, [pc, #52]	; (a6b0 <_sercom_set_handler+0x58>)
    a67a:	58b2      	ldr	r2, [r6, r2]
    a67c:	9201      	str	r2, [sp, #4]
    a67e:	2200      	movs	r2, #0
    a680:	9d01      	ldr	r5, [sp, #4]
    a682:	5162      	str	r2, [r4, r5]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a684:	3301      	adds	r3, #1
    a686:	2b05      	cmp	r3, #5
    a688:	d9f0      	bls.n	a66c <_sercom_set_handler+0x14>
		}

		_handler_table_initialized = true;
    a68a:	2201      	movs	r2, #1
    a68c:	4b09      	ldr	r3, [pc, #36]	; (a6b4 <_sercom_set_handler+0x5c>)
    a68e:	447b      	add	r3, pc
    a690:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a692:	0080      	lsls	r0, r0, #2
    a694:	4b08      	ldr	r3, [pc, #32]	; (a6b8 <_sercom_set_handler+0x60>)
    a696:	447b      	add	r3, pc
    a698:	50c1      	str	r1, [r0, r3]
}
    a69a:	b002      	add	sp, #8
    a69c:	bd70      	pop	{r4, r5, r6, pc}
    a69e:	46c0      	nop			; (mov r8, r8)
    a6a0:	0000832e 	.word	0x0000832e
    a6a4:	1fff648c 	.word	0x1fff648c
    a6a8:	ffffffe1 	.word	0xffffffe1
    a6ac:	1fff647c 	.word	0x1fff647c
    a6b0:	00000224 	.word	0x00000224
    a6b4:	1fff6460 	.word	0x1fff6460
    a6b8:	1fff645a 	.word	0x1fff645a

0000a6bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    a6bc:	b570      	push	{r4, r5, r6, lr}
    a6be:	b084      	sub	sp, #16
    a6c0:	0006      	movs	r6, r0
    a6c2:	4d09      	ldr	r5, [pc, #36]	; (a6e8 <_sercom_get_interrupt_vector+0x2c>)
    a6c4:	447d      	add	r5, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    a6c6:	2206      	movs	r2, #6
    a6c8:	4908      	ldr	r1, [pc, #32]	; (a6ec <_sercom_get_interrupt_vector+0x30>)
    a6ca:	4479      	add	r1, pc
    a6cc:	ac02      	add	r4, sp, #8
    a6ce:	0020      	movs	r0, r4
    a6d0:	4b07      	ldr	r3, [pc, #28]	; (a6f0 <_sercom_get_interrupt_vector+0x34>)
    a6d2:	58eb      	ldr	r3, [r5, r3]
    a6d4:	9301      	str	r3, [sp, #4]
    a6d6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    a6d8:	0030      	movs	r0, r6
    a6da:	4b06      	ldr	r3, [pc, #24]	; (a6f4 <_sercom_get_interrupt_vector+0x38>)
    a6dc:	58eb      	ldr	r3, [r5, r3]
    a6de:	9301      	str	r3, [sp, #4]
    a6e0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    a6e2:	5620      	ldrsb	r0, [r4, r0]
}
    a6e4:	b004      	add	sp, #16
    a6e6:	bd70      	pop	{r4, r5, r6, pc}
    a6e8:	000082c8 	.word	0x000082c8
    a6ec:	000080ce 	.word	0x000080ce
    a6f0:	000000ec 	.word	0x000000ec
    a6f4:	00000460 	.word	0x00000460

0000a6f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    a6f8:	b510      	push	{r4, lr}
    a6fa:	4b03      	ldr	r3, [pc, #12]	; (a708 <SERCOM0_Handler+0x10>)
    a6fc:	447b      	add	r3, pc
    a6fe:	681b      	ldr	r3, [r3, #0]
    a700:	2000      	movs	r0, #0
    a702:	4798      	blx	r3
    a704:	bd10      	pop	{r4, pc}
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	1fff63f4 	.word	0x1fff63f4

0000a70c <SERCOM1_Handler>:
    a70c:	b510      	push	{r4, lr}
    a70e:	4b03      	ldr	r3, [pc, #12]	; (a71c <SERCOM1_Handler+0x10>)
    a710:	447b      	add	r3, pc
    a712:	685b      	ldr	r3, [r3, #4]
    a714:	2001      	movs	r0, #1
    a716:	4798      	blx	r3
    a718:	bd10      	pop	{r4, pc}
    a71a:	46c0      	nop			; (mov r8, r8)
    a71c:	1fff63e0 	.word	0x1fff63e0

0000a720 <SERCOM2_Handler>:
    a720:	b510      	push	{r4, lr}
    a722:	4b03      	ldr	r3, [pc, #12]	; (a730 <SERCOM2_Handler+0x10>)
    a724:	447b      	add	r3, pc
    a726:	689b      	ldr	r3, [r3, #8]
    a728:	2002      	movs	r0, #2
    a72a:	4798      	blx	r3
    a72c:	bd10      	pop	{r4, pc}
    a72e:	46c0      	nop			; (mov r8, r8)
    a730:	1fff63cc 	.word	0x1fff63cc

0000a734 <SERCOM3_Handler>:
    a734:	b510      	push	{r4, lr}
    a736:	4b03      	ldr	r3, [pc, #12]	; (a744 <SERCOM3_Handler+0x10>)
    a738:	447b      	add	r3, pc
    a73a:	68db      	ldr	r3, [r3, #12]
    a73c:	2003      	movs	r0, #3
    a73e:	4798      	blx	r3
    a740:	bd10      	pop	{r4, pc}
    a742:	46c0      	nop			; (mov r8, r8)
    a744:	1fff63b8 	.word	0x1fff63b8

0000a748 <SERCOM4_Handler>:
    a748:	b510      	push	{r4, lr}
    a74a:	4b03      	ldr	r3, [pc, #12]	; (a758 <SERCOM4_Handler+0x10>)
    a74c:	447b      	add	r3, pc
    a74e:	691b      	ldr	r3, [r3, #16]
    a750:	2004      	movs	r0, #4
    a752:	4798      	blx	r3
    a754:	bd10      	pop	{r4, pc}
    a756:	46c0      	nop			; (mov r8, r8)
    a758:	1fff63a4 	.word	0x1fff63a4

0000a75c <SERCOM5_Handler>:
    a75c:	b510      	push	{r4, lr}
    a75e:	4b03      	ldr	r3, [pc, #12]	; (a76c <SERCOM5_Handler+0x10>)
    a760:	447b      	add	r3, pc
    a762:	695b      	ldr	r3, [r3, #20]
    a764:	2005      	movs	r0, #5
    a766:	4798      	blx	r3
    a768:	bd10      	pop	{r4, pc}
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	1fff6390 	.word	0x1fff6390

0000a770 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    a770:	b5f0      	push	{r4, r5, r6, r7, lr}
    a772:	46c6      	mov	lr, r8
    a774:	b500      	push	{lr}
    a776:	b088      	sub	sp, #32
    a778:	0006      	movs	r6, r0
    a77a:	000d      	movs	r5, r1
    a77c:	4b48      	ldr	r3, [pc, #288]	; (a8a0 <_spi_set_config+0x130>)
    a77e:	447b      	add	r3, pc
    a780:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a782:	6807      	ldr	r7, [r0, #0]
    a784:	2280      	movs	r2, #128	; 0x80
    a786:	ab07      	add	r3, sp, #28
    a788:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a78a:	2200      	movs	r2, #0
    a78c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a78e:	2101      	movs	r1, #1
    a790:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    a792:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    a794:	782b      	ldrb	r3, [r5, #0]
    a796:	2b00      	cmp	r3, #0
    a798:	d101      	bne.n	a79e <_spi_set_config+0x2e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a79a:	ab07      	add	r3, sp, #28
    a79c:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    a79e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    a7a0:	9303      	str	r3, [sp, #12]
    a7a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    a7a4:	9204      	str	r2, [sp, #16]
    a7a6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    a7a8:	9205      	str	r2, [sp, #20]
    a7aa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    a7ac:	9206      	str	r2, [sp, #24]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a7ae:	2400      	movs	r4, #0
    a7b0:	e009      	b.n	a7c6 <_spi_set_config+0x56>
		uint32_t current_pinmux = pad_pinmuxes[pad];

		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a7b2:	0021      	movs	r1, r4
    a7b4:	0038      	movs	r0, r7
    a7b6:	4b3b      	ldr	r3, [pc, #236]	; (a8a4 <_spi_set_config+0x134>)
    a7b8:	4642      	mov	r2, r8
    a7ba:	58d3      	ldr	r3, [r2, r3]
    a7bc:	9301      	str	r3, [sp, #4]
    a7be:	4798      	blx	r3
    a7c0:	e008      	b.n	a7d4 <_spi_set_config+0x64>
	for (uint8_t pad = 0; pad < 4; pad++) {
    a7c2:	3401      	adds	r4, #1
    a7c4:	b2e4      	uxtb	r4, r4
    a7c6:	2c03      	cmp	r4, #3
    a7c8:	d810      	bhi.n	a7ec <_spi_set_config+0x7c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a7ca:	00a3      	lsls	r3, r4, #2
    a7cc:	aa03      	add	r2, sp, #12
    a7ce:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    a7d0:	2800      	cmp	r0, #0
    a7d2:	d0ee      	beq.n	a7b2 <_spi_set_config+0x42>
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a7d4:	1c43      	adds	r3, r0, #1
    a7d6:	d0f4      	beq.n	a7c2 <_spi_set_config+0x52>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a7d8:	a907      	add	r1, sp, #28
    a7da:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a7dc:	0c00      	lsrs	r0, r0, #16
    a7de:	b2c0      	uxtb	r0, r0
    a7e0:	4b31      	ldr	r3, [pc, #196]	; (a8a8 <_spi_set_config+0x138>)
    a7e2:	4642      	mov	r2, r8
    a7e4:	58d3      	ldr	r3, [r2, r3]
    a7e6:	9301      	str	r3, [sp, #4]
    a7e8:	4798      	blx	r3
    a7ea:	e7ea      	b.n	a7c2 <_spi_set_config+0x52>
		}
	}

	module->mode             = config->mode;
    a7ec:	782b      	ldrb	r3, [r5, #0]
    a7ee:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    a7f0:	7c2b      	ldrb	r3, [r5, #16]
    a7f2:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    a7f4:	7cab      	ldrb	r3, [r5, #18]
    a7f6:	71f3      	strb	r3, [r6, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    a7f8:	7d2b      	ldrb	r3, [r5, #20]
    a7fa:	7233      	strb	r3, [r6, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    a7fc:	2200      	movs	r2, #0
    a7fe:	ab02      	add	r3, sp, #8
    a800:	805a      	strh	r2, [r3, #2]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    a802:	782b      	ldrb	r3, [r5, #0]
    a804:	2b01      	cmp	r3, #1
    a806:	d02b      	beq.n	a860 <_spi_set_config+0xf0>
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    a808:	686b      	ldr	r3, [r5, #4]
    a80a:	68aa      	ldr	r2, [r5, #8]
    a80c:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    a80e:	68ea      	ldr	r2, [r5, #12]
    a810:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    a812:	7c2a      	ldrb	r2, [r5, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    a814:	7c69      	ldrb	r1, [r5, #17]
    a816:	2900      	cmp	r1, #0
    a818:	d103      	bne.n	a822 <_spi_set_config+0xb2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a81a:	4924      	ldr	r1, [pc, #144]	; (a8ac <_spi_set_config+0x13c>)
    a81c:	7889      	ldrb	r1, [r1, #2]
    a81e:	0789      	lsls	r1, r1, #30
    a820:	d501      	bpl.n	a826 <_spi_set_config+0xb6>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    a822:	2180      	movs	r1, #128	; 0x80
    a824:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    a826:	7ca9      	ldrb	r1, [r5, #18]
    a828:	2900      	cmp	r1, #0
    a82a:	d002      	beq.n	a832 <_spi_set_config+0xc2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    a82c:	2180      	movs	r1, #128	; 0x80
    a82e:	0289      	lsls	r1, r1, #10
    a830:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    a832:	7ce9      	ldrb	r1, [r5, #19]
    a834:	2900      	cmp	r1, #0
    a836:	d002      	beq.n	a83e <_spi_set_config+0xce>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    a838:	2180      	movs	r1, #128	; 0x80
    a83a:	0089      	lsls	r1, r1, #2
    a83c:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    a83e:	7d29      	ldrb	r1, [r5, #20]
    a840:	2900      	cmp	r1, #0
    a842:	d002      	beq.n	a84a <_spi_set_config+0xda>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    a844:	2180      	movs	r1, #128	; 0x80
    a846:	0189      	lsls	r1, r1, #6
    a848:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    a84a:	6839      	ldr	r1, [r7, #0]
    a84c:	430b      	orrs	r3, r1
    a84e:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    a850:	687b      	ldr	r3, [r7, #4]
    a852:	4313      	orrs	r3, r2
    a854:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    a856:	2000      	movs	r0, #0
}
    a858:	b008      	add	sp, #32
    a85a:	bc04      	pop	{r2}
    a85c:	4690      	mov	r8, r2
    a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a860:	6830      	ldr	r0, [r6, #0]
    a862:	4b13      	ldr	r3, [pc, #76]	; (a8b0 <_spi_set_config+0x140>)
    a864:	4642      	mov	r2, r8
    a866:	58d3      	ldr	r3, [r2, r3]
    a868:	9301      	str	r3, [sp, #4]
    a86a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a86c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    a86e:	b2c0      	uxtb	r0, r0
    a870:	4b10      	ldr	r3, [pc, #64]	; (a8b4 <_spi_set_config+0x144>)
    a872:	4642      	mov	r2, r8
    a874:	58d3      	ldr	r3, [r2, r3]
    a876:	9301      	str	r3, [sp, #4]
    a878:	4798      	blx	r3
    a87a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    a87c:	ab02      	add	r3, sp, #8
    a87e:	1c9a      	adds	r2, r3, #2
    a880:	69a8      	ldr	r0, [r5, #24]
    a882:	4b0d      	ldr	r3, [pc, #52]	; (a8b8 <_spi_set_config+0x148>)
    a884:	4644      	mov	r4, r8
    a886:	58e3      	ldr	r3, [r4, r3]
    a888:	9301      	str	r3, [sp, #4]
    a88a:	4798      	blx	r3
		if (error_code != STATUS_OK) {
    a88c:	2800      	cmp	r0, #0
    a88e:	d001      	beq.n	a894 <_spi_set_config+0x124>
			return STATUS_ERR_INVALID_ARG;
    a890:	2017      	movs	r0, #23
    a892:	e7e1      	b.n	a858 <_spi_set_config+0xe8>
		spi_module->BAUD.reg = (uint8_t)baud;
    a894:	ab02      	add	r3, sp, #8
    a896:	3302      	adds	r3, #2
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	733b      	strb	r3, [r7, #12]
    a89c:	e7b4      	b.n	a808 <_spi_set_config+0x98>
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	0000820e 	.word	0x0000820e
    a8a4:	000004a0 	.word	0x000004a0
    a8a8:	0000046c 	.word	0x0000046c
    a8ac:	41002000 	.word	0x41002000
    a8b0:	00000460 	.word	0x00000460
    a8b4:	0000028c 	.word	0x0000028c
    a8b8:	000001a0 	.word	0x000001a0

0000a8bc <spi_set_baudrate>:
{
    a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8be:	b085      	sub	sp, #20
    a8c0:	0004      	movs	r4, r0
    a8c2:	000d      	movs	r5, r1
    a8c4:	4e2c      	ldr	r6, [pc, #176]	; (a978 <spi_set_baudrate+0xbc>)
    a8c6:	447e      	add	r6, pc
	uint16_t baud = 0;
    a8c8:	2200      	movs	r2, #0
    a8ca:	ab02      	add	r3, sp, #8
    a8cc:	80da      	strh	r2, [r3, #6]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a8ce:	6807      	ldr	r7, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    a8d0:	0038      	movs	r0, r7
    a8d2:	4b2a      	ldr	r3, [pc, #168]	; (a97c <spi_set_baudrate+0xc0>)
    a8d4:	58f3      	ldr	r3, [r6, r3]
    a8d6:	9301      	str	r3, [sp, #4]
    a8d8:	4798      	blx	r3
    a8da:	231f      	movs	r3, #31
    a8dc:	4018      	ands	r0, r3
    a8de:	3b1e      	subs	r3, #30
    a8e0:	4083      	lsls	r3, r0
    a8e2:	2280      	movs	r2, #128	; 0x80
    a8e4:	4926      	ldr	r1, [pc, #152]	; (a980 <spi_set_baudrate+0xc4>)
    a8e6:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a8e8:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    a8ea:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d1fb      	bne.n	a8e8 <spi_set_baudrate+0x2c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    a8f0:	338f      	adds	r3, #143	; 0x8f
    a8f2:	753b      	strb	r3, [r7, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    a8f4:	763b      	strb	r3, [r7, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a8f6:	683b      	ldr	r3, [r7, #0]
    a8f8:	2202      	movs	r2, #2
    a8fa:	4393      	bics	r3, r2
    a8fc:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a8fe:	6820      	ldr	r0, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    a900:	69c3      	ldr	r3, [r0, #28]
	while (spi_is_syncing(module)) {
    a902:	2b00      	cmp	r3, #0
    a904:	d1fb      	bne.n	a8fe <spi_set_baudrate+0x42>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a906:	4b1f      	ldr	r3, [pc, #124]	; (a984 <spi_set_baudrate+0xc8>)
    a908:	58f3      	ldr	r3, [r6, r3]
    a90a:	9301      	str	r3, [sp, #4]
    a90c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a90e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    a910:	b2c0      	uxtb	r0, r0
    a912:	4b1d      	ldr	r3, [pc, #116]	; (a988 <spi_set_baudrate+0xcc>)
    a914:	58f3      	ldr	r3, [r6, r3]
    a916:	9301      	str	r3, [sp, #4]
    a918:	4798      	blx	r3
    a91a:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
    a91c:	ab02      	add	r3, sp, #8
    a91e:	1d9a      	adds	r2, r3, #6
    a920:	0028      	movs	r0, r5
    a922:	4b1a      	ldr	r3, [pc, #104]	; (a98c <spi_set_baudrate+0xd0>)
    a924:	58f3      	ldr	r3, [r6, r3]
    a926:	9301      	str	r3, [sp, #4]
    a928:	4798      	blx	r3
    a92a:	1e05      	subs	r5, r0, #0
	if (error_code != STATUS_OK) {
    a92c:	d003      	beq.n	a936 <spi_set_baudrate+0x7a>
		return STATUS_ERR_INVALID_ARG;
    a92e:	2517      	movs	r5, #23
}
    a930:	0028      	movs	r0, r5
    a932:	b005      	add	sp, #20
    a934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    a936:	ab02      	add	r3, sp, #8
    a938:	3306      	adds	r3, #6
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	733b      	strb	r3, [r7, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a93e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    a940:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    a942:	2b00      	cmp	r3, #0
    a944:	d1fb      	bne.n	a93e <spi_set_baudrate+0x82>
	SercomSpi *const spi_module = &(module->hw->SPI);
    a946:	6827      	ldr	r7, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a948:	0038      	movs	r0, r7
    a94a:	4b0c      	ldr	r3, [pc, #48]	; (a97c <spi_set_baudrate+0xc0>)
    a94c:	58f3      	ldr	r3, [r6, r3]
    a94e:	9301      	str	r3, [sp, #4]
    a950:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a952:	231f      	movs	r3, #31
    a954:	4018      	ands	r0, r3
    a956:	3b1e      	subs	r3, #30
    a958:	4083      	lsls	r3, r0
    a95a:	4a09      	ldr	r2, [pc, #36]	; (a980 <spi_set_baudrate+0xc4>)
    a95c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a95e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    a960:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    a962:	2b00      	cmp	r3, #0
    a964:	d1fb      	bne.n	a95e <spi_set_baudrate+0xa2>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a966:	683b      	ldr	r3, [r7, #0]
    a968:	2202      	movs	r2, #2
    a96a:	4313      	orrs	r3, r2
    a96c:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a96e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    a970:	69db      	ldr	r3, [r3, #28]
	while (spi_is_syncing(module)) {
    a972:	2b00      	cmp	r3, #0
    a974:	d1fb      	bne.n	a96e <spi_set_baudrate+0xb2>
    a976:	e7db      	b.n	a930 <spi_set_baudrate+0x74>
    a978:	000080c6 	.word	0x000080c6
    a97c:	00000104 	.word	0x00000104
    a980:	e000e100 	.word	0xe000e100
    a984:	00000460 	.word	0x00000460
    a988:	0000028c 	.word	0x0000028c
    a98c:	000001a0 	.word	0x000001a0

0000a990 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    a990:	b5f0      	push	{r4, r5, r6, r7, lr}
    a992:	46ce      	mov	lr, r9
    a994:	b500      	push	{lr}
    a996:	b084      	sub	sp, #16
    a998:	0005      	movs	r5, r0
    a99a:	000c      	movs	r4, r1
    a99c:	0016      	movs	r6, r2
    a99e:	4f38      	ldr	r7, [pc, #224]	; (aa80 <spi_init+0xf0>)
    a9a0:	447f      	add	r7, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    a9a2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    a9a4:	680b      	ldr	r3, [r1, #0]
    a9a6:	079b      	lsls	r3, r3, #30
    a9a8:	d504      	bpl.n	a9b4 <spi_init+0x24>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    a9aa:	201c      	movs	r0, #28
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    a9ac:	b004      	add	sp, #16
    a9ae:	bc04      	pop	{r2}
    a9b0:	4691      	mov	r9, r2
    a9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    a9b4:	680b      	ldr	r3, [r1, #0]
    a9b6:	07db      	lsls	r3, r3, #31
    a9b8:	d501      	bpl.n	a9be <spi_init+0x2e>
		return STATUS_BUSY;
    a9ba:	2005      	movs	r0, #5
    a9bc:	e7f6      	b.n	a9ac <spi_init+0x1c>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a9be:	0008      	movs	r0, r1
    a9c0:	4b30      	ldr	r3, [pc, #192]	; (aa84 <spi_init+0xf4>)
    a9c2:	58fb      	ldr	r3, [r7, r3]
    a9c4:	9300      	str	r3, [sp, #0]
    a9c6:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a9c8:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a9ca:	3014      	adds	r0, #20
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a9cc:	2301      	movs	r3, #1
    a9ce:	4093      	lsls	r3, r2
			PM->APBCMASK.reg |= mask;
    a9d0:	4a2d      	ldr	r2, [pc, #180]	; (aa88 <spi_init+0xf8>)
    a9d2:	6a11      	ldr	r1, [r2, #32]
    a9d4:	430b      	orrs	r3, r1
    a9d6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    a9d8:	2324      	movs	r3, #36	; 0x24
    a9da:	4699      	mov	r9, r3
    a9dc:	5cf3      	ldrb	r3, [r6, r3]
    a9de:	a903      	add	r1, sp, #12
    a9e0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a9e2:	b2c3      	uxtb	r3, r0
    a9e4:	9300      	str	r3, [sp, #0]
    a9e6:	0018      	movs	r0, r3
    a9e8:	4b28      	ldr	r3, [pc, #160]	; (aa8c <spi_init+0xfc>)
    a9ea:	58fa      	ldr	r2, [r7, r3]
    a9ec:	9201      	str	r2, [sp, #4]
    a9ee:	4790      	blx	r2
	system_gclk_chan_enable(gclk_index);
    a9f0:	9800      	ldr	r0, [sp, #0]
    a9f2:	4b27      	ldr	r3, [pc, #156]	; (aa90 <spi_init+0x100>)
    a9f4:	58fb      	ldr	r3, [r7, r3]
    a9f6:	9300      	str	r3, [sp, #0]
    a9f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a9fa:	464b      	mov	r3, r9
    a9fc:	5cf0      	ldrb	r0, [r6, r3]
    a9fe:	2100      	movs	r1, #0
    aa00:	4b24      	ldr	r3, [pc, #144]	; (aa94 <spi_init+0x104>)
    aa02:	58fb      	ldr	r3, [r7, r3]
    aa04:	9300      	str	r3, [sp, #0]
    aa06:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    aa08:	7833      	ldrb	r3, [r6, #0]
    aa0a:	2b01      	cmp	r3, #1
    aa0c:	d001      	beq.n	aa12 <spi_init+0x82>
{
    aa0e:	2300      	movs	r3, #0
    aa10:	e00b      	b.n	aa2a <spi_init+0x9a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    aa12:	6823      	ldr	r3, [r4, #0]
    aa14:	220c      	movs	r2, #12
    aa16:	4313      	orrs	r3, r2
    aa18:	6023      	str	r3, [r4, #0]
    aa1a:	e7f8      	b.n	aa0e <spi_init+0x7e>
		module->callback[i]        = NULL;
    aa1c:	1c9a      	adds	r2, r3, #2
    aa1e:	0092      	lsls	r2, r2, #2
    aa20:	18aa      	adds	r2, r5, r2
    aa22:	2100      	movs	r1, #0
    aa24:	6051      	str	r1, [r2, #4]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    aa26:	3301      	adds	r3, #1
    aa28:	b2db      	uxtb	r3, r3
    aa2a:	2b06      	cmp	r3, #6
    aa2c:	d9f6      	bls.n	aa1c <spi_init+0x8c>
	module->tx_buffer_ptr              = NULL;
    aa2e:	2200      	movs	r2, #0
    aa30:	62ea      	str	r2, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    aa32:	62aa      	str	r2, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    aa34:	2300      	movs	r3, #0
    aa36:	86aa      	strh	r2, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    aa38:	862a      	strh	r2, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    aa3a:	3236      	adds	r2, #54	; 0x36
    aa3c:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback           = 0x00;
    aa3e:	3201      	adds	r2, #1
    aa40:	54ab      	strb	r3, [r5, r2]
	module->status                     = STATUS_OK;
    aa42:	3201      	adds	r2, #1
    aa44:	54ab      	strb	r3, [r5, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    aa46:	3a35      	subs	r2, #53	; 0x35
    aa48:	726a      	strb	r2, [r5, #9]
	module->locked                     = false;
    aa4a:	712b      	strb	r3, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    aa4c:	6828      	ldr	r0, [r5, #0]
    aa4e:	4b0d      	ldr	r3, [pc, #52]	; (aa84 <spi_init+0xf4>)
    aa50:	58fb      	ldr	r3, [r7, r3]
    aa52:	9300      	str	r3, [sp, #0]
    aa54:	4798      	blx	r3
    aa56:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    aa58:	4b0f      	ldr	r3, [pc, #60]	; (aa98 <spi_init+0x108>)
    aa5a:	58fb      	ldr	r3, [r7, r3]
    aa5c:	9300      	str	r3, [sp, #0]
    aa5e:	0019      	movs	r1, r3
    aa60:	4b0e      	ldr	r3, [pc, #56]	; (aa9c <spi_init+0x10c>)
    aa62:	58fb      	ldr	r3, [r7, r3]
    aa64:	9300      	str	r3, [sp, #0]
    aa66:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    aa68:	4b0d      	ldr	r3, [pc, #52]	; (aaa0 <spi_init+0x110>)
    aa6a:	58fb      	ldr	r3, [r7, r3]
    aa6c:	9300      	str	r3, [sp, #0]
    aa6e:	00a4      	lsls	r4, r4, #2
    aa70:	50e5      	str	r5, [r4, r3]
	return _spi_set_config(module, config);
    aa72:	0031      	movs	r1, r6
    aa74:	0028      	movs	r0, r5
    aa76:	4b0b      	ldr	r3, [pc, #44]	; (aaa4 <spi_init+0x114>)
    aa78:	447b      	add	r3, pc
    aa7a:	4798      	blx	r3
    aa7c:	e796      	b.n	a9ac <spi_init+0x1c>
    aa7e:	46c0      	nop			; (mov r8, r8)
    aa80:	00007fec 	.word	0x00007fec
    aa84:	00000460 	.word	0x00000460
    aa88:	40000400 	.word	0x40000400
    aa8c:	00000114 	.word	0x00000114
    aa90:	00000380 	.word	0x00000380
    aa94:	00000374 	.word	0x00000374
    aa98:	00000130 	.word	0x00000130
    aa9c:	00000238 	.word	0x00000238
    aaa0:	00000224 	.word	0x00000224
    aaa4:	fffffcf5 	.word	0xfffffcf5

0000aaa8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    aaaa:	2438      	movs	r4, #56	; 0x38
    aaac:	5d04      	ldrb	r4, [r0, r4]
    aaae:	2c05      	cmp	r4, #5
    aab0:	d048      	beq.n	ab44 <spi_read_buffer_wait+0x9c>
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    aab2:	2a00      	cmp	r2, #0
    aab4:	d101      	bne.n	aaba <spi_read_buffer_wait+0x12>
		return STATUS_ERR_INVALID_ARG;
    aab6:	2417      	movs	r4, #23
    aab8:	e045      	b.n	ab46 <spi_read_buffer_wait+0x9e>
	}

	if (!(module->receiver_enabled)) {
    aaba:	79c4      	ldrb	r4, [r0, #7]
    aabc:	2c00      	cmp	r4, #0
    aabe:	d13d      	bne.n	ab3c <spi_read_buffer_wait+0x94>
		return STATUS_ERR_DENIED;
    aac0:	341c      	adds	r4, #28
    aac2:	e040      	b.n	ab46 <spi_read_buffer_wait+0x9e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    aac4:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    aac6:	7e14      	ldrb	r4, [r2, #24]

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    aac8:	07e4      	lsls	r4, r4, #31
    aaca:	d5fb      	bpl.n	aac4 <spi_read_buffer_wait+0x1c>
    aacc:	7e14      	ldrb	r4, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    aace:	07e4      	lsls	r4, r4, #31
    aad0:	d51c      	bpl.n	ab0c <spi_read_buffer_wait+0x64>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    aad2:	05dc      	lsls	r4, r3, #23
    aad4:	0de4      	lsrs	r4, r4, #23
    aad6:	6294      	str	r4, [r2, #40]	; 0x28
    aad8:	e018      	b.n	ab0c <spi_read_buffer_wait+0x64>
	enum status_code retval = STATUS_OK;
    aada:	2400      	movs	r4, #0
    aadc:	e023      	b.n	ab26 <spi_read_buffer_wait+0x7e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    aade:	6a97      	ldr	r7, [r2, #40]	; 0x28
    aae0:	05ff      	lsls	r7, r7, #23
    aae2:	0dff      	lsrs	r7, r7, #23
    aae4:	e001      	b.n	aaea <spi_read_buffer_wait+0x42>

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
		}

		uint16_t received_data = 0;
    aae6:	2700      	movs	r7, #0
		return STATUS_ERR_IO;
    aae8:	2410      	movs	r4, #16
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    aaea:	2c00      	cmp	r4, #0
    aaec:	d12b      	bne.n	ab46 <spi_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    aaee:	1c72      	adds	r2, r6, #1
    aaf0:	b292      	uxth	r2, r2
    aaf2:	558f      	strb	r7, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    aaf4:	7984      	ldrb	r4, [r0, #6]
    aaf6:	2c01      	cmp	r4, #1
    aaf8:	d01b      	beq.n	ab32 <spi_read_buffer_wait+0x8a>
    aafa:	0016      	movs	r6, r2
    aafc:	002a      	movs	r2, r5
	while (length--) {
    aafe:	1e55      	subs	r5, r2, #1
    ab00:	b2ad      	uxth	r5, r5
    ab02:	2a00      	cmp	r2, #0
    ab04:	d01c      	beq.n	ab40 <spi_read_buffer_wait+0x98>
		if (module->mode == SPI_MODE_MASTER) {
    ab06:	7942      	ldrb	r2, [r0, #5]
    ab08:	2a01      	cmp	r2, #1
    ab0a:	d0db      	beq.n	aac4 <spi_read_buffer_wait+0x1c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ab0c:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ab0e:	7e14      	ldrb	r4, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
    ab10:	0764      	lsls	r4, r4, #29
    ab12:	d5fb      	bpl.n	ab0c <spi_read_buffer_wait+0x64>
    ab14:	7e14      	ldrb	r4, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    ab16:	0764      	lsls	r4, r4, #29
    ab18:	d5e5      	bpl.n	aae6 <spi_read_buffer_wait+0x3e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ab1a:	8b54      	ldrh	r4, [r2, #26]
    ab1c:	0764      	lsls	r4, r4, #29
    ab1e:	d5dc      	bpl.n	aada <spi_read_buffer_wait+0x32>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ab20:	2404      	movs	r4, #4
    ab22:	8354      	strh	r4, [r2, #26]
		retval = STATUS_ERR_OVERFLOW;
    ab24:	341a      	adds	r4, #26
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ab26:	7987      	ldrb	r7, [r0, #6]
    ab28:	2f01      	cmp	r7, #1
    ab2a:	d0d8      	beq.n	aade <spi_read_buffer_wait+0x36>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ab2c:	6a97      	ldr	r7, [r2, #40]	; 0x28
    ab2e:	b2ff      	uxtb	r7, r7
    ab30:	e7db      	b.n	aaea <spi_read_buffer_wait+0x42>
			rx_data[rx_pos++] = (received_data >> 8);
    ab32:	3602      	adds	r6, #2
    ab34:	0a3f      	lsrs	r7, r7, #8
    ab36:	548f      	strb	r7, [r1, r2]
    ab38:	b2b2      	uxth	r2, r6
    ab3a:	e7de      	b.n	aafa <spi_read_buffer_wait+0x52>
    ab3c:	2600      	movs	r6, #0
    ab3e:	e7de      	b.n	aafe <spi_read_buffer_wait+0x56>
		}
	}

	return STATUS_OK;
    ab40:	2400      	movs	r4, #0
    ab42:	e000      	b.n	ab46 <spi_read_buffer_wait+0x9e>
		return STATUS_BUSY;
    ab44:	2405      	movs	r4, #5
}
    ab46:	0020      	movs	r0, r4
    ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ab4c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    ab4c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    ab4e:	7943      	ldrb	r3, [r0, #5]
    ab50:	2b01      	cmp	r3, #1
    ab52:	d001      	beq.n	ab58 <spi_select_slave+0xc>
		return STATUS_ERR_UNSUPPORTED_DEV;
    ab54:	2015      	movs	r0, #21
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    ab56:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    ab58:	7a03      	ldrb	r3, [r0, #8]
    ab5a:	2b00      	cmp	r3, #0
    ab5c:	d16c      	bne.n	ac38 <spi_select_slave+0xec>
		if (select) {
    ab5e:	2a00      	cmp	r2, #0
    ab60:	d058      	beq.n	ac14 <spi_select_slave+0xc8>
			if (slave->address_enabled) {
    ab62:	784b      	ldrb	r3, [r1, #1]
    ab64:	2b00      	cmp	r3, #0
    ab66:	d043      	beq.n	abf0 <spi_select_slave+0xa4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ab68:	6803      	ldr	r3, [r0, #0]
    ab6a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    ab6c:	07db      	lsls	r3, r3, #31
    ab6e:	d411      	bmi.n	ab94 <spi_select_slave+0x48>
					port_pin_set_output_level(slave->ss_pin, true);
    ab70:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ab72:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    ab74:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    ab76:	2900      	cmp	r1, #0
    ab78:	d10a      	bne.n	ab90 <spi_select_slave+0x44>
		return &(ports[port_index]->Group[group_index]);
    ab7a:	01db      	lsls	r3, r3, #7
    ab7c:	4931      	ldr	r1, [pc, #196]	; (ac44 <spi_select_slave+0xf8>)
    ab7e:	468c      	mov	ip, r1
    ab80:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ab82:	211f      	movs	r1, #31
    ab84:	4011      	ands	r1, r2
    ab86:	2201      	movs	r2, #1
    ab88:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    ab8a:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    ab8c:	2005      	movs	r0, #5
    ab8e:	e7e2      	b.n	ab56 <spi_select_slave+0xa>
		return NULL;
    ab90:	2300      	movs	r3, #0
    ab92:	e7f6      	b.n	ab82 <spi_select_slave+0x36>
				port_pin_set_output_level(slave->ss_pin, false);
    ab94:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ab96:	09d4      	lsrs	r4, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    ab98:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    ab9a:	2c00      	cmp	r4, #0
    ab9c:	d104      	bne.n	aba8 <spi_select_slave+0x5c>
		return &(ports[port_index]->Group[group_index]);
    ab9e:	01db      	lsls	r3, r3, #7
    aba0:	4c28      	ldr	r4, [pc, #160]	; (ac44 <spi_select_slave+0xf8>)
    aba2:	46a4      	mov	ip, r4
    aba4:	4463      	add	r3, ip
    aba6:	e000      	b.n	abaa <spi_select_slave+0x5e>
		return NULL;
    aba8:	2300      	movs	r3, #0
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    abaa:	241f      	movs	r4, #31
    abac:	4014      	ands	r4, r2
    abae:	2201      	movs	r2, #1
    abb0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    abb2:	615a      	str	r2, [r3, #20]
				spi_write(module, slave->address);
    abb4:	788a      	ldrb	r2, [r1, #2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    abb6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    abb8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    abba:	07c9      	lsls	r1, r1, #31
    abbc:	d500      	bpl.n	abc0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    abbe:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    abc0:	79c3      	ldrb	r3, [r0, #7]
    abc2:	2b00      	cmp	r3, #0
    abc4:	d13a      	bne.n	ac3c <spi_select_slave+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    abc6:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    abc8:	7e1a      	ldrb	r2, [r3, #24]
					while (!spi_is_ready_to_read(module)) {
    abca:	0752      	lsls	r2, r2, #29
    abcc:	d5fb      	bpl.n	abc6 <spi_select_slave+0x7a>
    abce:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    abd0:	0752      	lsls	r2, r2, #29
    abd2:	d535      	bpl.n	ac40 <spi_select_slave+0xf4>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    abd4:	8b5a      	ldrh	r2, [r3, #26]
    abd6:	0752      	lsls	r2, r2, #29
    abd8:	d501      	bpl.n	abde <spi_select_slave+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    abda:	2204      	movs	r2, #4
    abdc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    abde:	7982      	ldrb	r2, [r0, #6]
    abe0:	2a01      	cmp	r2, #1
    abe2:	d002      	beq.n	abea <spi_select_slave+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return STATUS_OK;
    abe6:	2000      	movs	r0, #0
    abe8:	e7b5      	b.n	ab56 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    abec:	2000      	movs	r0, #0
    abee:	e7b2      	b.n	ab56 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    abf0:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    abf2:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    abf4:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    abf6:	2900      	cmp	r1, #0
    abf8:	d10a      	bne.n	ac10 <spi_select_slave+0xc4>
		return &(ports[port_index]->Group[group_index]);
    abfa:	01db      	lsls	r3, r3, #7
    abfc:	4911      	ldr	r1, [pc, #68]	; (ac44 <spi_select_slave+0xf8>)
    abfe:	468c      	mov	ip, r1
    ac00:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ac02:	211f      	movs	r1, #31
    ac04:	4011      	ands	r1, r2
    ac06:	2201      	movs	r2, #1
    ac08:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    ac0a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    ac0c:	2000      	movs	r0, #0
    ac0e:	e7a2      	b.n	ab56 <spi_select_slave+0xa>
		return NULL;
    ac10:	2300      	movs	r3, #0
    ac12:	e7f6      	b.n	ac02 <spi_select_slave+0xb6>
			port_pin_set_output_level(slave->ss_pin, true);
    ac14:	780a      	ldrb	r2, [r1, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ac16:	09d1      	lsrs	r1, r2, #7
	uint8_t group_index = (gpio_pin / 32);
    ac18:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    ac1a:	2900      	cmp	r1, #0
    ac1c:	d10a      	bne.n	ac34 <spi_select_slave+0xe8>
		return &(ports[port_index]->Group[group_index]);
    ac1e:	01db      	lsls	r3, r3, #7
    ac20:	4908      	ldr	r1, [pc, #32]	; (ac44 <spi_select_slave+0xf8>)
    ac22:	468c      	mov	ip, r1
    ac24:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ac26:	211f      	movs	r1, #31
    ac28:	4011      	ands	r1, r2
    ac2a:	2201      	movs	r2, #1
    ac2c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    ac2e:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    ac30:	2000      	movs	r0, #0
    ac32:	e790      	b.n	ab56 <spi_select_slave+0xa>
		return NULL;
    ac34:	2300      	movs	r3, #0
    ac36:	e7f6      	b.n	ac26 <spi_select_slave+0xda>
    ac38:	2000      	movs	r0, #0
    ac3a:	e78c      	b.n	ab56 <spi_select_slave+0xa>
    ac3c:	2000      	movs	r0, #0
    ac3e:	e78a      	b.n	ab56 <spi_select_slave+0xa>
    ac40:	2000      	movs	r0, #0
    ac42:	e788      	b.n	ab56 <spi_select_slave+0xa>
    ac44:	41004400 	.word	0x41004400

0000ac48 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac4a:	46c6      	mov	lr, r8
    ac4c:	b500      	push	{lr}
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ac4e:	2338      	movs	r3, #56	; 0x38
    ac50:	5cc3      	ldrb	r3, [r0, r3]
    ac52:	2b05      	cmp	r3, #5
    ac54:	d046      	beq.n	ace4 <spi_write_buffer_wait+0x9c>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    ac56:	2a00      	cmp	r2, #0
    ac58:	d101      	bne.n	ac5e <spi_write_buffer_wait+0x16>
		return STATUS_ERR_INVALID_ARG;
    ac5a:	2017      	movs	r0, #23
    ac5c:	e043      	b.n	ace6 <spi_write_buffer_wait+0x9e>
    ac5e:	2600      	movs	r6, #0
    ac60:	e00c      	b.n	ac7c <spi_write_buffer_wait+0x34>
		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    ac62:	3602      	adds	r6, #2
    ac64:	5d0a      	ldrb	r2, [r1, r4]
    ac66:	0212      	lsls	r2, r2, #8
    ac68:	433a      	orrs	r2, r7
    ac6a:	4690      	mov	r8, r2
    ac6c:	b2b4      	uxth	r4, r6
    ac6e:	e015      	b.n	ac9c <spi_write_buffer_wait+0x54>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ac70:	7982      	ldrb	r2, [r0, #6]
    ac72:	2a01      	cmp	r2, #1
    ac74:	d029      	beq.n	acca <spi_write_buffer_wait+0x82>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ac78:	0026      	movs	r6, r4
    ac7a:	002a      	movs	r2, r5
	while (length--) {
    ac7c:	1e55      	subs	r5, r2, #1
    ac7e:	b2ad      	uxth	r5, r5
    ac80:	2a00      	cmp	r2, #0
    ac82:	d024      	beq.n	acce <spi_write_buffer_wait+0x86>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ac84:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ac86:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(module)) {
    ac88:	07d2      	lsls	r2, r2, #31
    ac8a:	d5fb      	bpl.n	ac84 <spi_write_buffer_wait+0x3c>
		uint16_t data_to_send = tx_data[tx_pos++];
    ac8c:	1c74      	adds	r4, r6, #1
    ac8e:	b2a4      	uxth	r4, r4
    ac90:	5d8f      	ldrb	r7, [r1, r6]
    ac92:	b2ba      	uxth	r2, r7
    ac94:	4690      	mov	r8, r2
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ac96:	7982      	ldrb	r2, [r0, #6]
    ac98:	2a01      	cmp	r2, #1
    ac9a:	d0e2      	beq.n	ac62 <spi_write_buffer_wait+0x1a>
    ac9c:	7e1e      	ldrb	r6, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ac9e:	07f2      	lsls	r2, r6, #31
    aca0:	d503      	bpl.n	acaa <spi_write_buffer_wait+0x62>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    aca2:	4642      	mov	r2, r8
    aca4:	05d2      	lsls	r2, r2, #23
    aca6:	0dd2      	lsrs	r2, r2, #23
    aca8:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    acaa:	79c3      	ldrb	r3, [r0, #7]
    acac:	2b00      	cmp	r3, #0
    acae:	d0e3      	beq.n	ac78 <spi_write_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    acb0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    acb2:	7e1a      	ldrb	r2, [r3, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    acb4:	0752      	lsls	r2, r2, #29
    acb6:	d5fb      	bpl.n	acb0 <spi_write_buffer_wait+0x68>
    acb8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    acba:	0752      	lsls	r2, r2, #29
    acbc:	d5dc      	bpl.n	ac78 <spi_write_buffer_wait+0x30>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    acbe:	8b5a      	ldrh	r2, [r3, #26]
    acc0:	0752      	lsls	r2, r2, #29
    acc2:	d5d5      	bpl.n	ac70 <spi_write_buffer_wait+0x28>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    acc4:	2204      	movs	r2, #4
    acc6:	835a      	strh	r2, [r3, #26]
    acc8:	e7d2      	b.n	ac70 <spi_write_buffer_wait+0x28>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    acca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    accc:	e7d4      	b.n	ac78 <spi_write_buffer_wait+0x30>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    acce:	7943      	ldrb	r3, [r0, #5]
    acd0:	2b01      	cmp	r3, #1
    acd2:	d001      	beq.n	acd8 <spi_write_buffer_wait+0x90>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    acd4:	2000      	movs	r0, #0
    acd6:	e006      	b.n	ace6 <spi_write_buffer_wait+0x9e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    acd8:	6803      	ldr	r3, [r0, #0]
    acda:	7e1b      	ldrb	r3, [r3, #24]
		while (!spi_is_write_complete(module)) {
    acdc:	079b      	lsls	r3, r3, #30
    acde:	d5fb      	bpl.n	acd8 <spi_write_buffer_wait+0x90>
	return STATUS_OK;
    ace0:	2000      	movs	r0, #0
    ace2:	e000      	b.n	ace6 <spi_write_buffer_wait+0x9e>
		return STATUS_BUSY;
    ace4:	2005      	movs	r0, #5
}
    ace6:	bc04      	pop	{r2}
    ace8:	4690      	mov	r8, r2
    acea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000acec <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    acec:	b570      	push	{r4, r5, r6, lr}
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    acee:	6805      	ldr	r5, [r0, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    acf0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    acf2:	780a      	ldrb	r2, [r1, #0]
    acf4:	b2d2      	uxtb	r2, r2
    acf6:	b293      	uxth	r3, r2
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    acf8:	1c4c      	adds	r4, r1, #1
    acfa:	62c4      	str	r4, [r0, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    acfc:	7986      	ldrb	r6, [r0, #6]
    acfe:	2e01      	cmp	r6, #1
    ad00:	d007      	beq.n	ad12 <_spi_write+0x26>
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    ad02:	05db      	lsls	r3, r3, #23
    ad04:	0ddb      	lsrs	r3, r3, #23
    ad06:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    ad08:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    ad0a:	3b01      	subs	r3, #1
    ad0c:	b29b      	uxth	r3, r3
    ad0e:	8683      	strh	r3, [r0, #52]	; 0x34
}
    ad10:	bd70      	pop	{r4, r5, r6, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    ad12:	784b      	ldrb	r3, [r1, #1]
    ad14:	021b      	lsls	r3, r3, #8
    ad16:	4313      	orrs	r3, r2
		(module->tx_buffer_ptr)++;
    ad18:	1c8c      	adds	r4, r1, #2
    ad1a:	62c4      	str	r4, [r0, #44]	; 0x2c
    ad1c:	e7f1      	b.n	ad02 <_spi_write+0x16>
	...

0000ad20 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    ad20:	b082      	sub	sp, #8
    ad22:	4b07      	ldr	r3, [pc, #28]	; (ad40 <_spi_write_dummy+0x20>)
    ad24:	447b      	add	r3, pc
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ad26:	6802      	ldr	r2, [r0, #0]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    ad28:	4906      	ldr	r1, [pc, #24]	; (ad44 <_spi_write_dummy+0x24>)
    ad2a:	585b      	ldr	r3, [r3, r1]
    ad2c:	9301      	str	r3, [sp, #4]
    ad2e:	881b      	ldrh	r3, [r3, #0]
    ad30:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    ad32:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    ad34:	3b01      	subs	r3, #1
    ad36:	b29b      	uxth	r3, r3
    ad38:	8643      	strh	r3, [r0, #50]	; 0x32
}
    ad3a:	b002      	add	sp, #8
    ad3c:	4770      	bx	lr
    ad3e:	46c0      	nop			; (mov r8, r8)
    ad40:	00007c68 	.word	0x00007c68
    ad44:	000001fc 	.word	0x000001fc

0000ad48 <_spi_read_dummy>:
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ad48:	6803      	ldr	r3, [r0, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    ad4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    ad4c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    ad4e:	3b01      	subs	r3, #1
    ad50:	b29b      	uxth	r3, r3
    ad52:	8643      	strh	r3, [r0, #50]	; 0x32
}
    ad54:	4770      	bx	lr

0000ad56 <_spi_read>:
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ad56:	6803      	ldr	r3, [r0, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    ad58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad5a:	05db      	lsls	r3, r3, #23
    ad5c:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    ad5e:	b2da      	uxtb	r2, r3
    ad60:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ad62:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    ad64:	6a82      	ldr	r2, [r0, #40]	; 0x28
    ad66:	1c51      	adds	r1, r2, #1
    ad68:	6281      	str	r1, [r0, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ad6a:	7981      	ldrb	r1, [r0, #6]
    ad6c:	2901      	cmp	r1, #1
    ad6e:	d004      	beq.n	ad7a <_spi_read+0x24>
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    ad70:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    ad72:	3b01      	subs	r3, #1
    ad74:	b29b      	uxth	r3, r3
    ad76:	8603      	strh	r3, [r0, #48]	; 0x30
}
    ad78:	4770      	bx	lr
		*(module->rx_buffer_ptr) = (received_data >> 8);
    ad7a:	0a1b      	lsrs	r3, r3, #8
    ad7c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    ad7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    ad80:	3301      	adds	r3, #1
    ad82:	6283      	str	r3, [r0, #40]	; 0x28
    ad84:	e7f4      	b.n	ad70 <_spi_read+0x1a>
	...

0000ad88 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    ad88:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad8a:	b083      	sub	sp, #12
    ad8c:	4b5b      	ldr	r3, [pc, #364]	; (aefc <_spi_interrupt_handler+0x174>)
    ad8e:	447b      	add	r3, pc
	/* Get device instance from the look-up table */
	struct spi_module *module
    ad90:	4a5b      	ldr	r2, [pc, #364]	; (af00 <_spi_interrupt_handler+0x178>)
    ad92:	589b      	ldr	r3, [r3, r2]
    ad94:	9301      	str	r3, [sp, #4]
    ad96:	0080      	lsls	r0, r0, #2
    ad98:	58c5      	ldr	r5, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ad9a:	682e      	ldr	r6, [r5, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    ad9c:	2337      	movs	r3, #55	; 0x37
    ad9e:	5cef      	ldrb	r7, [r5, r3]
    ada0:	2236      	movs	r2, #54	; 0x36
    ada2:	5caa      	ldrb	r2, [r5, r2]
	uint8_t callback_mask =
    ada4:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    ada6:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    ada8:	7db4      	ldrb	r4, [r6, #22]
    adaa:	401c      	ands	r4, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    adac:	07e3      	lsls	r3, r4, #31
    adae:	d505      	bpl.n	adbc <_spi_interrupt_handler+0x34>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    adb0:	796b      	ldrb	r3, [r5, #5]
    adb2:	2b01      	cmp	r3, #1
    adb4:	d022      	beq.n	adfc <_spi_interrupt_handler+0x74>
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    adb6:	796b      	ldrb	r3, [r5, #5]
		if (0
    adb8:	2b01      	cmp	r3, #1
    adba:	d02d      	beq.n	ae18 <_spi_interrupt_handler+0x90>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    adbc:	0763      	lsls	r3, r4, #29
    adbe:	d511      	bpl.n	ade4 <_spi_interrupt_handler+0x5c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    adc0:	8b73      	ldrh	r3, [r6, #26]
    adc2:	075b      	lsls	r3, r3, #29
    adc4:	d542      	bpl.n	ae4c <_spi_interrupt_handler+0xc4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    adc6:	7a6b      	ldrb	r3, [r5, #9]
    adc8:	2b01      	cmp	r3, #1
    adca:	d008      	beq.n	adde <_spi_interrupt_handler+0x56>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    adcc:	221e      	movs	r2, #30
    adce:	2338      	movs	r3, #56	; 0x38
    add0:	54ea      	strb	r2, [r5, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    add2:	3b35      	subs	r3, #53	; 0x35
    add4:	726b      	strb	r3, [r5, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    add6:	3302      	adds	r3, #2
    add8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    adda:	073b      	lsls	r3, r7, #28
    addc:	d432      	bmi.n	ae44 <_spi_interrupt_handler+0xbc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    adde:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ade0:	2304      	movs	r3, #4
    ade2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    ade4:	07a3      	lsls	r3, r4, #30
    ade6:	d503      	bpl.n	adf0 <_spi_interrupt_handler+0x68>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    ade8:	796b      	ldrb	r3, [r5, #5]
    adea:	2b01      	cmp	r3, #1
    adec:	d100      	bne.n	adf0 <_spi_interrupt_handler+0x68>
    adee:	e065      	b.n	aebc <_spi_interrupt_handler+0x134>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    adf0:	b264      	sxtb	r4, r4
    adf2:	2c00      	cmp	r4, #0
    adf4:	da00      	bge.n	adf8 <_spi_interrupt_handler+0x70>
    adf6:	e077      	b.n	aee8 <_spi_interrupt_handler+0x160>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    adf8:	b003      	add	sp, #12
    adfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    adfc:	7a6b      	ldrb	r3, [r5, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    adfe:	2b00      	cmp	r3, #0
    ae00:	d1d9      	bne.n	adb6 <_spi_interrupt_handler+0x2e>
			_spi_write_dummy(module);
    ae02:	0028      	movs	r0, r5
    ae04:	4b3f      	ldr	r3, [pc, #252]	; (af04 <_spi_interrupt_handler+0x17c>)
    ae06:	447b      	add	r3, pc
    ae08:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    ae0a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    ae0c:	b29b      	uxth	r3, r3
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d1d1      	bne.n	adb6 <_spi_interrupt_handler+0x2e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    ae12:	3301      	adds	r3, #1
    ae14:	7533      	strb	r3, [r6, #20]
    ae16:	e7ce      	b.n	adb6 <_spi_interrupt_handler+0x2e>
			(module->dir != SPI_DIRECTION_READ))
    ae18:	7a6b      	ldrb	r3, [r5, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d0ce      	beq.n	adbc <_spi_interrupt_handler+0x34>
			_spi_write(module);
    ae1e:	0028      	movs	r0, r5
    ae20:	4b39      	ldr	r3, [pc, #228]	; (af08 <_spi_interrupt_handler+0x180>)
    ae22:	447b      	add	r3, pc
    ae24:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    ae26:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    ae28:	b29b      	uxth	r3, r3
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d1c6      	bne.n	adbc <_spi_interrupt_handler+0x34>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    ae2e:	3301      	adds	r3, #1
    ae30:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    ae32:	7a6b      	ldrb	r3, [r5, #9]
    ae34:	2b01      	cmp	r3, #1
    ae36:	d1c1      	bne.n	adbc <_spi_interrupt_handler+0x34>
						!(module->receiver_enabled)) {
    ae38:	79eb      	ldrb	r3, [r5, #7]
				if (module->dir == SPI_DIRECTION_WRITE &&
    ae3a:	2b00      	cmp	r3, #0
    ae3c:	d1be      	bne.n	adbc <_spi_interrupt_handler+0x34>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    ae3e:	3302      	adds	r3, #2
    ae40:	75b3      	strb	r3, [r6, #22]
    ae42:	e7bb      	b.n	adbc <_spi_interrupt_handler+0x34>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    ae44:	0028      	movs	r0, r5
    ae46:	69ab      	ldr	r3, [r5, #24]
    ae48:	4798      	blx	r3
    ae4a:	e7c8      	b.n	adde <_spi_interrupt_handler+0x56>
			if (module->dir == SPI_DIRECTION_WRITE) {
    ae4c:	7a6b      	ldrb	r3, [r5, #9]
    ae4e:	2b01      	cmp	r3, #1
    ae50:	d018      	beq.n	ae84 <_spi_interrupt_handler+0xfc>
				_spi_read(module);
    ae52:	0028      	movs	r0, r5
    ae54:	4b2d      	ldr	r3, [pc, #180]	; (af0c <_spi_interrupt_handler+0x184>)
    ae56:	447b      	add	r3, pc
    ae58:	4798      	blx	r3
				if (module->remaining_rx_buffer_length == 0) {
    ae5a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ae5c:	b29b      	uxth	r3, r3
    ae5e:	2b00      	cmp	r3, #0
    ae60:	d1c0      	bne.n	ade4 <_spi_interrupt_handler+0x5c>
					module->status = STATUS_OK;
    ae62:	2200      	movs	r2, #0
    ae64:	3338      	adds	r3, #56	; 0x38
    ae66:	54ea      	strb	r2, [r5, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    ae68:	3b34      	subs	r3, #52	; 0x34
    ae6a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    ae6c:	7a6b      	ldrb	r3, [r5, #9]
    ae6e:	2b02      	cmp	r3, #2
    ae70:	d01d      	beq.n	aeae <_spi_interrupt_handler+0x126>
					} else if (module->dir == SPI_DIRECTION_READ) {
    ae72:	7a6b      	ldrb	r3, [r5, #9]
    ae74:	2b00      	cmp	r3, #0
    ae76:	d1b5      	bne.n	ade4 <_spi_interrupt_handler+0x5c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    ae78:	07bb      	lsls	r3, r7, #30
    ae7a:	d5b3      	bpl.n	ade4 <_spi_interrupt_handler+0x5c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    ae7c:	0028      	movs	r0, r5
    ae7e:	692b      	ldr	r3, [r5, #16]
    ae80:	4798      	blx	r3
    ae82:	e7af      	b.n	ade4 <_spi_interrupt_handler+0x5c>
				_spi_read_dummy(module);
    ae84:	0028      	movs	r0, r5
    ae86:	4b22      	ldr	r3, [pc, #136]	; (af10 <_spi_interrupt_handler+0x188>)
    ae88:	447b      	add	r3, pc
    ae8a:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    ae8c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    ae8e:	b29b      	uxth	r3, r3
    ae90:	2b00      	cmp	r3, #0
    ae92:	d1a7      	bne.n	ade4 <_spi_interrupt_handler+0x5c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    ae94:	3304      	adds	r3, #4
    ae96:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    ae98:	2200      	movs	r2, #0
    ae9a:	3334      	adds	r3, #52	; 0x34
    ae9c:	54ea      	strb	r2, [r5, r3]
					module->dir = SPI_DIRECTION_IDLE;
    ae9e:	3b35      	subs	r3, #53	; 0x35
    aea0:	726b      	strb	r3, [r5, #9]
					if (callback_mask &
    aea2:	07fb      	lsls	r3, r7, #31
    aea4:	d59e      	bpl.n	ade4 <_spi_interrupt_handler+0x5c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    aea6:	0028      	movs	r0, r5
    aea8:	68eb      	ldr	r3, [r5, #12]
    aeaa:	4798      	blx	r3
    aeac:	e79a      	b.n	ade4 <_spi_interrupt_handler+0x5c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    aeae:	077b      	lsls	r3, r7, #29
    aeb0:	d400      	bmi.n	aeb4 <_spi_interrupt_handler+0x12c>
    aeb2:	e797      	b.n	ade4 <_spi_interrupt_handler+0x5c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    aeb4:	0028      	movs	r0, r5
    aeb6:	696b      	ldr	r3, [r5, #20]
    aeb8:	4798      	blx	r3
    aeba:	e793      	b.n	ade4 <_spi_interrupt_handler+0x5c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    aebc:	7a6b      	ldrb	r3, [r5, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    aebe:	2b01      	cmp	r3, #1
    aec0:	d000      	beq.n	aec4 <_spi_interrupt_handler+0x13c>
    aec2:	e795      	b.n	adf0 <_spi_interrupt_handler+0x68>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    aec4:	79eb      	ldrb	r3, [r5, #7]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d000      	beq.n	aecc <_spi_interrupt_handler+0x144>
    aeca:	e791      	b.n	adf0 <_spi_interrupt_handler+0x68>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    aecc:	3302      	adds	r3, #2
    aece:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    aed0:	3301      	adds	r3, #1
    aed2:	726b      	strb	r3, [r5, #9]
			module->status = STATUS_OK;
    aed4:	2200      	movs	r2, #0
    aed6:	3335      	adds	r3, #53	; 0x35
    aed8:	54ea      	strb	r2, [r5, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    aeda:	07fb      	lsls	r3, r7, #31
    aedc:	d400      	bmi.n	aee0 <_spi_interrupt_handler+0x158>
    aede:	e787      	b.n	adf0 <_spi_interrupt_handler+0x68>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    aee0:	0028      	movs	r0, r5
    aee2:	68eb      	ldr	r3, [r5, #12]
    aee4:	4798      	blx	r3
    aee6:	e783      	b.n	adf0 <_spi_interrupt_handler+0x68>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    aee8:	2380      	movs	r3, #128	; 0x80
    aeea:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    aeec:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    aeee:	067b      	lsls	r3, r7, #25
    aef0:	d400      	bmi.n	aef4 <_spi_interrupt_handler+0x16c>
    aef2:	e781      	b.n	adf8 <_spi_interrupt_handler+0x70>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    aef4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    aef6:	0028      	movs	r0, r5
    aef8:	4798      	blx	r3
}
    aefa:	e77d      	b.n	adf8 <_spi_interrupt_handler+0x70>
    aefc:	00007bfe 	.word	0x00007bfe
    af00:	00000224 	.word	0x00000224
    af04:	ffffff17 	.word	0xffffff17
    af08:	fffffec7 	.word	0xfffffec7
    af0c:	fffffefd 	.word	0xfffffefd
    af10:	fffffebd 	.word	0xfffffebd

0000af14 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    af14:	b530      	push	{r4, r5, lr}
    af16:	b085      	sub	sp, #20
    af18:	4d08      	ldr	r5, [pc, #32]	; (af3c <_switch_peripheral_gclk+0x28>)
    af1a:	447d      	add	r5, pc
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    af1c:	2203      	movs	r2, #3
    af1e:	ab03      	add	r3, sp, #12
    af20:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    af22:	2400      	movs	r4, #0
    af24:	e006      	b.n	af34 <_switch_peripheral_gclk+0x20>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    af26:	b2e0      	uxtb	r0, r4
    af28:	a903      	add	r1, sp, #12
    af2a:	4b05      	ldr	r3, [pc, #20]	; (af40 <_switch_peripheral_gclk+0x2c>)
    af2c:	58eb      	ldr	r3, [r5, r3]
    af2e:	9301      	str	r3, [sp, #4]
    af30:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    af32:	3401      	adds	r4, #1
    af34:	2c24      	cmp	r4, #36	; 0x24
    af36:	d9f6      	bls.n	af26 <_switch_peripheral_gclk+0x12>
	}
}
    af38:	b005      	add	sp, #20
    af3a:	bd30      	pop	{r4, r5, pc}
    af3c:	00007a72 	.word	0x00007a72
    af40:	00000114 	.word	0x00000114

0000af44 <system_clock_source_get_hz>:
{
    af44:	b500      	push	{lr}
    af46:	b083      	sub	sp, #12
    af48:	4b24      	ldr	r3, [pc, #144]	; (afdc <system_clock_source_get_hz+0x98>)
    af4a:	447b      	add	r3, pc
	switch (clock_source) {
    af4c:	2808      	cmp	r0, #8
    af4e:	d83e      	bhi.n	afce <system_clock_source_get_hz+0x8a>
    af50:	f004 fb66 	bl	f620 <__gnu_thumb1_case_uqi>
    af54:	053d3d09 	.word	0x053d3d09
    af58:	180d1405 	.word	0x180d1405
    af5c:	34          	.byte	0x34
    af5d:	00          	.byte	0x00
		return 32768UL;
    af5e:	2080      	movs	r0, #128	; 0x80
    af60:	0200      	lsls	r0, r0, #8
}
    af62:	b003      	add	sp, #12
    af64:	bd00      	pop	{pc}
		return _system_clock_inst.xosc.frequency;
    af66:	4b1e      	ldr	r3, [pc, #120]	; (afe0 <system_clock_source_get_hz+0x9c>)
    af68:	447b      	add	r3, pc
    af6a:	6918      	ldr	r0, [r3, #16]
    af6c:	e7f9      	b.n	af62 <system_clock_source_get_hz+0x1e>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    af6e:	4b1d      	ldr	r3, [pc, #116]	; (afe4 <system_clock_source_get_hz+0xa0>)
    af70:	6a1b      	ldr	r3, [r3, #32]
    af72:	059b      	lsls	r3, r3, #22
    af74:	0f9b      	lsrs	r3, r3, #30
    af76:	481c      	ldr	r0, [pc, #112]	; (afe8 <system_clock_source_get_hz+0xa4>)
    af78:	40d8      	lsrs	r0, r3
    af7a:	e7f2      	b.n	af62 <system_clock_source_get_hz+0x1e>
		return _system_clock_inst.xosc32k.frequency;
    af7c:	4b1b      	ldr	r3, [pc, #108]	; (afec <system_clock_source_get_hz+0xa8>)
    af7e:	447b      	add	r3, pc
    af80:	6958      	ldr	r0, [r3, #20]
    af82:	e7ee      	b.n	af62 <system_clock_source_get_hz+0x1e>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    af84:	4a1a      	ldr	r2, [pc, #104]	; (aff0 <system_clock_source_get_hz+0xac>)
    af86:	447a      	add	r2, pc
    af88:	6812      	ldr	r2, [r2, #0]
    af8a:	0792      	lsls	r2, r2, #30
    af8c:	d521      	bpl.n	afd2 <system_clock_source_get_hz+0x8e>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    af8e:	4a15      	ldr	r2, [pc, #84]	; (afe4 <system_clock_source_get_hz+0xa0>)
    af90:	68d2      	ldr	r2, [r2, #12]
    af92:	06d2      	lsls	r2, r2, #27
    af94:	d5fb      	bpl.n	af8e <system_clock_source_get_hz+0x4a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    af96:	4a17      	ldr	r2, [pc, #92]	; (aff4 <system_clock_source_get_hz+0xb0>)
    af98:	447a      	add	r2, pc
    af9a:	6812      	ldr	r2, [r2, #0]
    af9c:	0752      	lsls	r2, r2, #29
    af9e:	d401      	bmi.n	afa4 <system_clock_source_get_hz+0x60>
		return 48000000UL;
    afa0:	4815      	ldr	r0, [pc, #84]	; (aff8 <system_clock_source_get_hz+0xb4>)
    afa2:	e7de      	b.n	af62 <system_clock_source_get_hz+0x1e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    afa4:	2000      	movs	r0, #0
    afa6:	4a15      	ldr	r2, [pc, #84]	; (affc <system_clock_source_get_hz+0xb8>)
    afa8:	589b      	ldr	r3, [r3, r2]
    afaa:	9301      	str	r3, [sp, #4]
    afac:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    afae:	4b14      	ldr	r3, [pc, #80]	; (b000 <system_clock_source_get_hz+0xbc>)
    afb0:	447b      	add	r3, pc
    afb2:	689b      	ldr	r3, [r3, #8]
    afb4:	041b      	lsls	r3, r3, #16
    afb6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    afb8:	4358      	muls	r0, r3
    afba:	e7d2      	b.n	af62 <system_clock_source_get_hz+0x1e>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    afbc:	2350      	movs	r3, #80	; 0x50
    afbe:	4a09      	ldr	r2, [pc, #36]	; (afe4 <system_clock_source_get_hz+0xa0>)
    afc0:	5cd3      	ldrb	r3, [r2, r3]
    afc2:	075b      	lsls	r3, r3, #29
    afc4:	d507      	bpl.n	afd6 <system_clock_source_get_hz+0x92>
		return _system_clock_inst.dpll.frequency;
    afc6:	4b0f      	ldr	r3, [pc, #60]	; (b004 <system_clock_source_get_hz+0xc0>)
    afc8:	447b      	add	r3, pc
    afca:	68d8      	ldr	r0, [r3, #12]
    afcc:	e7c9      	b.n	af62 <system_clock_source_get_hz+0x1e>
		return 0;
    afce:	2000      	movs	r0, #0
    afd0:	e7c7      	b.n	af62 <system_clock_source_get_hz+0x1e>
			return 0;
    afd2:	2000      	movs	r0, #0
    afd4:	e7c5      	b.n	af62 <system_clock_source_get_hz+0x1e>
			return 0;
    afd6:	2000      	movs	r0, #0
    afd8:	e7c3      	b.n	af62 <system_clock_source_get_hz+0x1e>
    afda:	46c0      	nop			; (mov r8, r8)
    afdc:	00007a42 	.word	0x00007a42
    afe0:	1fff5ba0 	.word	0x1fff5ba0
    afe4:	40000800 	.word	0x40000800
    afe8:	007a1200 	.word	0x007a1200
    afec:	1fff5b8a 	.word	0x1fff5b8a
    aff0:	1fff5b82 	.word	0x1fff5b82
    aff4:	1fff5b70 	.word	0x1fff5b70
    aff8:	02dc6c00 	.word	0x02dc6c00
    affc:	0000028c 	.word	0x0000028c
    b000:	1fff5b58 	.word	0x1fff5b58
    b004:	1fff5b40 	.word	0x1fff5b40

0000b008 <system_clock_source_osc8m_set_config>:
{
    b008:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    b00a:	4d0c      	ldr	r5, [pc, #48]	; (b03c <system_clock_source_osc8m_set_config+0x34>)
    b00c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    b00e:	7802      	ldrb	r2, [r0, #0]
    b010:	2103      	movs	r1, #3
    b012:	400a      	ands	r2, r1
    b014:	0212      	lsls	r2, r2, #8
    b016:	490a      	ldr	r1, [pc, #40]	; (b040 <system_clock_source_osc8m_set_config+0x38>)
    b018:	4031      	ands	r1, r6
    b01a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    b01c:	7882      	ldrb	r2, [r0, #2]
    b01e:	2401      	movs	r4, #1
    b020:	4022      	ands	r2, r4
    b022:	01d2      	lsls	r2, r2, #7
    b024:	2380      	movs	r3, #128	; 0x80
    b026:	4399      	bics	r1, r3
    b028:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    b02a:	7843      	ldrb	r3, [r0, #1]
    b02c:	4023      	ands	r3, r4
    b02e:	019b      	lsls	r3, r3, #6
    b030:	2140      	movs	r1, #64	; 0x40
    b032:	438a      	bics	r2, r1
    b034:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    b036:	622b      	str	r3, [r5, #32]
}
    b038:	bd70      	pop	{r4, r5, r6, pc}
    b03a:	46c0      	nop			; (mov r8, r8)
    b03c:	40000800 	.word	0x40000800
    b040:	fffffcff 	.word	0xfffffcff

0000b044 <system_clock_source_xosc32k_set_config>:
{
    b044:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    b046:	4b1f      	ldr	r3, [pc, #124]	; (b0c4 <system_clock_source_xosc32k_set_config+0x80>)
    b048:	8a9a      	ldrh	r2, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    b04a:	7841      	ldrb	r1, [r0, #1]
    b04c:	2307      	movs	r3, #7
    b04e:	400b      	ands	r3, r1
    b050:	021b      	lsls	r3, r3, #8
    b052:	491d      	ldr	r1, [pc, #116]	; (b0c8 <system_clock_source_xosc32k_set_config+0x84>)
    b054:	400a      	ands	r2, r1
    b056:	4313      	orrs	r3, r2
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    b058:	7802      	ldrb	r2, [r0, #0]
    b05a:	2a00      	cmp	r2, #0
    b05c:	d02f      	beq.n	b0be <system_clock_source_xosc32k_set_config+0x7a>
		temp.bit.XTALEN = 0;
    b05e:	2204      	movs	r2, #4
    b060:	4393      	bics	r3, r2
    b062:	001e      	movs	r6, r3
	temp.bit.AAMPEN = config->auto_gain_control;
    b064:	7882      	ldrb	r2, [r0, #2]
    b066:	2701      	movs	r7, #1
    b068:	403a      	ands	r2, r7
    b06a:	0155      	lsls	r5, r2, #5
    b06c:	2320      	movs	r3, #32
    b06e:	0032      	movs	r2, r6
    b070:	439a      	bics	r2, r3
    b072:	432a      	orrs	r2, r5
	temp.bit.EN1K = config->enable_1khz_output;
    b074:	78c5      	ldrb	r5, [r0, #3]
    b076:	403d      	ands	r5, r7
    b078:	012d      	lsls	r5, r5, #4
    b07a:	3b10      	subs	r3, #16
    b07c:	439a      	bics	r2, r3
    b07e:	4315      	orrs	r5, r2
	temp.bit.EN32K = config->enable_32khz_output;
    b080:	7904      	ldrb	r4, [r0, #4]
    b082:	403c      	ands	r4, r7
    b084:	00e4      	lsls	r4, r4, #3
    b086:	3b08      	subs	r3, #8
    b088:	439d      	bics	r5, r3
    b08a:	432c      	orrs	r4, r5
	temp.bit.ONDEMAND = config->on_demand;
    b08c:	7b41      	ldrb	r1, [r0, #13]
    b08e:	4039      	ands	r1, r7
    b090:	01c9      	lsls	r1, r1, #7
    b092:	3378      	adds	r3, #120	; 0x78
    b094:	439c      	bics	r4, r3
    b096:	4321      	orrs	r1, r4
	temp.bit.RUNSTDBY = config->run_in_standby;
    b098:	7b02      	ldrb	r2, [r0, #12]
    b09a:	403a      	ands	r2, r7
    b09c:	0192      	lsls	r2, r2, #6
    b09e:	3b40      	subs	r3, #64	; 0x40
    b0a0:	4399      	bics	r1, r3
    b0a2:	430a      	orrs	r2, r1
	temp.bit.WRTLOCK  = config->write_once;
    b0a4:	7b83      	ldrb	r3, [r0, #14]
    b0a6:	403b      	ands	r3, r7
    b0a8:	031b      	lsls	r3, r3, #12
    b0aa:	4908      	ldr	r1, [pc, #32]	; (b0cc <system_clock_source_xosc32k_set_config+0x88>)
    b0ac:	400a      	ands	r2, r1
    b0ae:	4313      	orrs	r3, r2
	_system_clock_inst.xosc32k.frequency = config->frequency;
    b0b0:	6881      	ldr	r1, [r0, #8]
    b0b2:	4a07      	ldr	r2, [pc, #28]	; (b0d0 <system_clock_source_xosc32k_set_config+0x8c>)
    b0b4:	447a      	add	r2, pc
    b0b6:	6151      	str	r1, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    b0b8:	4a02      	ldr	r2, [pc, #8]	; (b0c4 <system_clock_source_xosc32k_set_config+0x80>)
    b0ba:	8293      	strh	r3, [r2, #20]
}
    b0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp.bit.XTALEN = 1;
    b0be:	2604      	movs	r6, #4
    b0c0:	431e      	orrs	r6, r3
    b0c2:	e7cf      	b.n	b064 <system_clock_source_xosc32k_set_config+0x20>
    b0c4:	40000800 	.word	0x40000800
    b0c8:	fffff8ff 	.word	0xfffff8ff
    b0cc:	ffffefff 	.word	0xffffefff
    b0d0:	1fff5a54 	.word	0x1fff5a54

0000b0d4 <system_clock_source_dfll_set_config>:
{
    b0d4:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    b0d6:	7a03      	ldrb	r3, [r0, #8]
    b0d8:	069b      	lsls	r3, r3, #26
    b0da:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    b0dc:	8942      	ldrh	r2, [r0, #10]
    b0de:	0592      	lsls	r2, r2, #22
    b0e0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    b0e2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    b0e4:	491e      	ldr	r1, [pc, #120]	; (b160 <system_clock_source_dfll_set_config+0x8c>)
    b0e6:	4479      	add	r1, pc
    b0e8:	604b      	str	r3, [r1, #4]
			(uint32_t)config->wakeup_lock     |
    b0ea:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->stable_tracking |
    b0ec:	79c2      	ldrb	r2, [r0, #7]
			(uint32_t)config->wakeup_lock     |
    b0ee:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
    b0f0:	8842      	ldrh	r2, [r0, #2]
			(uint32_t)config->stable_tracking |
    b0f2:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    b0f4:	8882      	ldrh	r2, [r0, #4]
			(uint32_t)config->quick_lock      |
    b0f6:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    b0f8:	7842      	ldrb	r2, [r0, #1]
    b0fa:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    b0fc:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    b0fe:	600b      	str	r3, [r1, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    b100:	7803      	ldrb	r3, [r0, #0]
    b102:	2b04      	cmp	r3, #4
    b104:	d003      	beq.n	b10e <system_clock_source_dfll_set_config+0x3a>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    b106:	7803      	ldrb	r3, [r0, #0]
    b108:	2b20      	cmp	r3, #32
    b10a:	d011      	beq.n	b130 <system_clock_source_dfll_set_config+0x5c>
}
    b10c:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b10e:	7b03      	ldrb	r3, [r0, #12]
    b110:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b112:	89c2      	ldrh	r2, [r0, #14]
    b114:	0412      	lsls	r2, r2, #16
    b116:	4913      	ldr	r1, [pc, #76]	; (b164 <system_clock_source_dfll_set_config+0x90>)
    b118:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b11a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    b11c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b11e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    b120:	4a11      	ldr	r2, [pc, #68]	; (b168 <system_clock_source_dfll_set_config+0x94>)
    b122:	447a      	add	r2, pc
    b124:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    b126:	6813      	ldr	r3, [r2, #0]
    b128:	7801      	ldrb	r1, [r0, #0]
    b12a:	430b      	orrs	r3, r1
    b12c:	6013      	str	r3, [r2, #0]
    b12e:	e7ea      	b.n	b106 <system_clock_source_dfll_set_config+0x32>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b130:	7b03      	ldrb	r3, [r0, #12]
    b132:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b134:	89c2      	ldrh	r2, [r0, #14]
    b136:	0412      	lsls	r2, r2, #16
    b138:	490a      	ldr	r1, [pc, #40]	; (b164 <system_clock_source_dfll_set_config+0x90>)
    b13a:	400a      	ands	r2, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b13c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    b13e:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b140:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    b142:	490a      	ldr	r1, [pc, #40]	; (b16c <system_clock_source_dfll_set_config+0x98>)
    b144:	4479      	add	r1, pc
    b146:	608b      	str	r3, [r1, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    b148:	680c      	ldr	r4, [r1, #0]
    b14a:	7802      	ldrb	r2, [r0, #0]
    b14c:	2304      	movs	r3, #4
    b14e:	431a      	orrs	r2, r3
    b150:	b2d2      	uxtb	r2, r2
    b152:	4314      	orrs	r4, r2
    b154:	2380      	movs	r3, #128	; 0x80
    b156:	00db      	lsls	r3, r3, #3
    b158:	4323      	orrs	r3, r4
    b15a:	600b      	str	r3, [r1, #0]
}
    b15c:	e7d6      	b.n	b10c <system_clock_source_dfll_set_config+0x38>
    b15e:	46c0      	nop			; (mov r8, r8)
    b160:	1fff5a22 	.word	0x1fff5a22
    b164:	03ff0000 	.word	0x03ff0000
    b168:	1fff59e6 	.word	0x1fff59e6
    b16c:	1fff59c4 	.word	0x1fff59c4

0000b170 <system_clock_source_enable>:
{
    b170:	b500      	push	{lr}
	switch (clock_source) {
    b172:	2808      	cmp	r0, #8
    b174:	d850      	bhi.n	b218 <system_clock_source_enable+0xa8>
    b176:	f004 fa53 	bl	f620 <__gnu_thumb1_case_uqi>
    b17a:	4f15      	.short	0x4f15
    b17c:	1d0e054f 	.word	0x1d0e054f
    b180:	2507      	.short	0x2507
    b182:	46          	.byte	0x46
    b183:	00          	.byte	0x00
		return STATUS_OK;
    b184:	2000      	movs	r0, #0
}
    b186:	bd00      	pop	{pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    b188:	4a24      	ldr	r2, [pc, #144]	; (b21c <system_clock_source_enable+0xac>)
    b18a:	6a13      	ldr	r3, [r2, #32]
    b18c:	2102      	movs	r1, #2
    b18e:	430b      	orrs	r3, r1
    b190:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    b192:	2000      	movs	r0, #0
    b194:	e7f7      	b.n	b186 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    b196:	4a21      	ldr	r2, [pc, #132]	; (b21c <system_clock_source_enable+0xac>)
    b198:	6993      	ldr	r3, [r2, #24]
    b19a:	2102      	movs	r1, #2
    b19c:	430b      	orrs	r3, r1
    b19e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    b1a0:	2000      	movs	r0, #0
		break;
    b1a2:	e7f0      	b.n	b186 <system_clock_source_enable+0x16>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    b1a4:	4a1d      	ldr	r2, [pc, #116]	; (b21c <system_clock_source_enable+0xac>)
    b1a6:	8a13      	ldrh	r3, [r2, #16]
    b1a8:	2102      	movs	r1, #2
    b1aa:	430b      	orrs	r3, r1
    b1ac:	b29b      	uxth	r3, r3
    b1ae:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    b1b0:	2000      	movs	r0, #0
		break;
    b1b2:	e7e8      	b.n	b186 <system_clock_source_enable+0x16>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    b1b4:	4a19      	ldr	r2, [pc, #100]	; (b21c <system_clock_source_enable+0xac>)
    b1b6:	8a93      	ldrh	r3, [r2, #20]
    b1b8:	2102      	movs	r1, #2
    b1ba:	430b      	orrs	r3, r1
    b1bc:	b29b      	uxth	r3, r3
    b1be:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    b1c0:	2000      	movs	r0, #0
		break;
    b1c2:	e7e0      	b.n	b186 <system_clock_source_enable+0x16>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    b1c4:	4916      	ldr	r1, [pc, #88]	; (b220 <system_clock_source_enable+0xb0>)
    b1c6:	4479      	add	r1, pc
    b1c8:	680b      	ldr	r3, [r1, #0]
    b1ca:	2202      	movs	r2, #2
    b1cc:	4313      	orrs	r3, r2
    b1ce:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    b1d0:	4b12      	ldr	r3, [pc, #72]	; (b21c <system_clock_source_enable+0xac>)
    b1d2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    b1d4:	4b11      	ldr	r3, [pc, #68]	; (b21c <system_clock_source_enable+0xac>)
    b1d6:	68db      	ldr	r3, [r3, #12]
    b1d8:	06db      	lsls	r3, r3, #27
    b1da:	d5fb      	bpl.n	b1d4 <system_clock_source_enable+0x64>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    b1dc:	4a11      	ldr	r2, [pc, #68]	; (b224 <system_clock_source_enable+0xb4>)
    b1de:	447a      	add	r2, pc
    b1e0:	6891      	ldr	r1, [r2, #8]
    b1e2:	4b0e      	ldr	r3, [pc, #56]	; (b21c <system_clock_source_enable+0xac>)
    b1e4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    b1e6:	6852      	ldr	r2, [r2, #4]
    b1e8:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    b1ea:	2200      	movs	r2, #0
    b1ec:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    b1ee:	4b0b      	ldr	r3, [pc, #44]	; (b21c <system_clock_source_enable+0xac>)
    b1f0:	68db      	ldr	r3, [r3, #12]
    b1f2:	06db      	lsls	r3, r3, #27
    b1f4:	d5fb      	bpl.n	b1ee <system_clock_source_enable+0x7e>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    b1f6:	4b0c      	ldr	r3, [pc, #48]	; (b228 <system_clock_source_enable+0xb8>)
    b1f8:	447b      	add	r3, pc
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	b29b      	uxth	r3, r3
    b1fe:	4a07      	ldr	r2, [pc, #28]	; (b21c <system_clock_source_enable+0xac>)
    b200:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    b202:	2000      	movs	r0, #0
    b204:	e7bf      	b.n	b186 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    b206:	4905      	ldr	r1, [pc, #20]	; (b21c <system_clock_source_enable+0xac>)
    b208:	2244      	movs	r2, #68	; 0x44
    b20a:	5c8b      	ldrb	r3, [r1, r2]
    b20c:	2002      	movs	r0, #2
    b20e:	4303      	orrs	r3, r0
    b210:	b2db      	uxtb	r3, r3
    b212:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    b214:	2000      	movs	r0, #0
		break;
    b216:	e7b6      	b.n	b186 <system_clock_source_enable+0x16>
		return STATUS_ERR_INVALID_ARG;
    b218:	2017      	movs	r0, #23
    b21a:	e7b4      	b.n	b186 <system_clock_source_enable+0x16>
    b21c:	40000800 	.word	0x40000800
    b220:	1fff5942 	.word	0x1fff5942
    b224:	1fff592a 	.word	0x1fff592a
    b228:	1fff5910 	.word	0x1fff5910

0000b22c <system_clock_source_is_ready>:
{
    b22c:	b500      	push	{lr}
	switch (clock_source) {
    b22e:	2808      	cmp	r0, #8
    b230:	d822      	bhi.n	b278 <system_clock_source_is_ready+0x4c>
    b232:	f004 f9f5 	bl	f620 <__gnu_thumb1_case_uqi>
    b236:	2107      	.short	0x2107
    b238:	09190521 	.word	0x09190521
    b23c:	0b17      	.short	0x0b17
    b23e:	0d          	.byte	0x0d
    b23f:	00          	.byte	0x00
		return true;
    b240:	2001      	movs	r0, #1
    b242:	e018      	b.n	b276 <system_clock_source_is_ready+0x4a>
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    b244:	2001      	movs	r0, #1
		break;
    b246:	e010      	b.n	b26a <system_clock_source_is_ready+0x3e>
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    b248:	2002      	movs	r0, #2
		break;
    b24a:	e00e      	b.n	b26a <system_clock_source_is_ready+0x3e>
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    b24c:	20d0      	movs	r0, #208	; 0xd0
		break;
    b24e:	e00c      	b.n	b26a <system_clock_source_is_ready+0x3e>
		return ((SYSCTRL->DPLLSTATUS.reg &
    b250:	2350      	movs	r3, #80	; 0x50
    b252:	4a0a      	ldr	r2, [pc, #40]	; (b27c <system_clock_source_is_ready+0x50>)
    b254:	5cd0      	ldrb	r0, [r2, r3]
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    b256:	3b4d      	subs	r3, #77	; 0x4d
    b258:	4018      	ands	r0, r3
    b25a:	3803      	subs	r0, #3
    b25c:	4243      	negs	r3, r0
    b25e:	4158      	adcs	r0, r3
    b260:	b2c0      	uxtb	r0, r0
    b262:	e008      	b.n	b276 <system_clock_source_is_ready+0x4a>
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    b264:	2008      	movs	r0, #8
    b266:	e000      	b.n	b26a <system_clock_source_is_ready+0x3e>
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    b268:	2004      	movs	r0, #4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    b26a:	4b04      	ldr	r3, [pc, #16]	; (b27c <system_clock_source_is_ready+0x50>)
    b26c:	68db      	ldr	r3, [r3, #12]
    b26e:	4398      	bics	r0, r3
    b270:	4243      	negs	r3, r0
    b272:	4158      	adcs	r0, r3
    b274:	b2c0      	uxtb	r0, r0
}
    b276:	bd00      	pop	{pc}
		return false;
    b278:	2000      	movs	r0, #0
    b27a:	e7fc      	b.n	b276 <system_clock_source_is_ready+0x4a>
    b27c:	40000800 	.word	0x40000800

0000b280 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    b280:	b5f0      	push	{r4, r5, r6, r7, lr}
    b282:	46c6      	mov	lr, r8
    b284:	b500      	push	{lr}
    b286:	b092      	sub	sp, #72	; 0x48
    b288:	4c5f      	ldr	r4, [pc, #380]	; (b408 <system_clock_init+0x188>)
    b28a:	447c      	add	r4, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    b28c:	22c2      	movs	r2, #194	; 0xc2
    b28e:	00d2      	lsls	r2, r2, #3
    b290:	4b5e      	ldr	r3, [pc, #376]	; (b40c <system_clock_init+0x18c>)
    b292:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    b294:	4a5e      	ldr	r2, [pc, #376]	; (b410 <system_clock_init+0x190>)
    b296:	6853      	ldr	r3, [r2, #4]
    b298:	211e      	movs	r1, #30
    b29a:	438b      	bics	r3, r1
    b29c:	2502      	movs	r5, #2
    b29e:	432b      	orrs	r3, r5
    b2a0:	6053      	str	r3, [r2, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    b2a2:	4b5c      	ldr	r3, [pc, #368]	; (b414 <system_clock_init+0x194>)
    b2a4:	447b      	add	r3, pc
    b2a6:	4798      	blx	r3
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    b2a8:	2300      	movs	r3, #0
    b2aa:	a80e      	add	r0, sp, #56	; 0x38
    b2ac:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    b2ae:	2280      	movs	r2, #128	; 0x80
    b2b0:	0212      	lsls	r2, r2, #8
    b2b2:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    b2b4:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    b2b6:	2201      	movs	r2, #1
    b2b8:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    b2ba:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    b2bc:	7045      	strb	r5, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    b2be:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    b2c0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    b2c2:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    b2c4:	4b54      	ldr	r3, [pc, #336]	; (b418 <system_clock_init+0x198>)
    b2c6:	58e3      	ldr	r3, [r4, r3]
    b2c8:	9301      	str	r3, [sp, #4]
    b2ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    b2cc:	2005      	movs	r0, #5
    b2ce:	4b53      	ldr	r3, [pc, #332]	; (b41c <system_clock_init+0x19c>)
    b2d0:	58e3      	ldr	r3, [r4, r3]
    b2d2:	9301      	str	r3, [sp, #4]
    b2d4:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    b2d6:	2005      	movs	r0, #5
    b2d8:	4b51      	ldr	r3, [pc, #324]	; (b420 <system_clock_init+0x1a0>)
    b2da:	58e3      	ldr	r3, [r4, r3]
    b2dc:	9301      	str	r3, [sp, #4]
    b2de:	4798      	blx	r3
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d0f8      	beq.n	b2d6 <system_clock_init+0x56>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    b2e4:	4a49      	ldr	r2, [pc, #292]	; (b40c <system_clock_init+0x18c>)
    b2e6:	8a93      	ldrh	r3, [r2, #20]
    b2e8:	2180      	movs	r1, #128	; 0x80
    b2ea:	430b      	orrs	r3, r1
    b2ec:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    b2ee:	2100      	movs	r1, #0
    b2f0:	2200      	movs	r2, #0
    b2f2:	ab09      	add	r3, sp, #36	; 0x24
    b2f4:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    b2f6:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    b2f8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    b2fa:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    b2fc:	313f      	adds	r1, #63	; 0x3f
    b2fe:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    b300:	393b      	subs	r1, #59	; 0x3b
    b302:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    b304:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    b306:	4b47      	ldr	r3, [pc, #284]	; (b424 <system_clock_init+0x1a4>)
    b308:	681b      	ldr	r3, [r3, #0]
    b30a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    b30c:	2b3f      	cmp	r3, #63	; 0x3f
    b30e:	d100      	bne.n	b312 <system_clock_init+0x92>
    b310:	e077      	b.n	b402 <system_clock_init+0x182>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    b312:	a809      	add	r0, sp, #36	; 0x24
    b314:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    b316:	4b44      	ldr	r3, [pc, #272]	; (b428 <system_clock_init+0x1a8>)
    b318:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    b31a:	2307      	movs	r3, #7
    b31c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    b31e:	3338      	adds	r3, #56	; 0x38
    b320:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    b322:	4b42      	ldr	r3, [pc, #264]	; (b42c <system_clock_init+0x1ac>)
    b324:	58e3      	ldr	r3, [r4, r3]
    b326:	9301      	str	r3, [sp, #4]
    b328:	4798      	blx	r3
	config->run_in_standby  = false;
    b32a:	2700      	movs	r7, #0
    b32c:	a808      	add	r0, sp, #32
    b32e:	7047      	strb	r7, [r0, #1]
	config->on_demand       = true;
    b330:	2601      	movs	r6, #1
    b332:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    b334:	7007      	strb	r7, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    b336:	4b3e      	ldr	r3, [pc, #248]	; (b430 <system_clock_init+0x1b0>)
    b338:	58e3      	ldr	r3, [r4, r3]
    b33a:	9301      	str	r3, [sp, #4]
    b33c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    b33e:	2006      	movs	r0, #6
    b340:	4b36      	ldr	r3, [pc, #216]	; (b41c <system_clock_init+0x19c>)
    b342:	58e3      	ldr	r3, [r4, r3]
    b344:	9301      	str	r3, [sp, #4]
    b346:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    b348:	4b3a      	ldr	r3, [pc, #232]	; (b434 <system_clock_init+0x1b4>)
    b34a:	58e1      	ldr	r1, [r4, r3]
    b34c:	9102      	str	r1, [sp, #8]
    b34e:	4788      	blx	r1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    b350:	ad05      	add	r5, sp, #20
    b352:	9606      	str	r6, [sp, #24]
	config->high_when_disabled = false;
    b354:	706f      	strb	r7, [r5, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    b356:	722f      	strb	r7, [r5, #8]
	config->output_enable      = false;
    b358:	726f      	strb	r7, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    b35a:	2105      	movs	r1, #5
    b35c:	4688      	mov	r8, r1
    b35e:	7029      	strb	r1, [r5, #0]
    b360:	0029      	movs	r1, r5
    b362:	2001      	movs	r0, #1
    b364:	4b34      	ldr	r3, [pc, #208]	; (b438 <system_clock_init+0x1b8>)
    b366:	58e3      	ldr	r3, [r4, r3]
    b368:	9302      	str	r3, [sp, #8]
    b36a:	469c      	mov	ip, r3
    b36c:	47e0      	blx	ip
    b36e:	2001      	movs	r0, #1
    b370:	4b32      	ldr	r3, [pc, #200]	; (b43c <system_clock_init+0x1bc>)
    b372:	58e1      	ldr	r1, [r4, r3]
    b374:	9103      	str	r1, [sp, #12]
    b376:	4788      	blx	r1
	config->high_when_disabled = false;
    b378:	706f      	strb	r7, [r5, #1]
	config->output_enable      = false;
    b37a:	726f      	strb	r7, [r5, #9]
    b37c:	4640      	mov	r0, r8
    b37e:	7028      	strb	r0, [r5, #0]
    b380:	2320      	movs	r3, #32
    b382:	606b      	str	r3, [r5, #4]
    b384:	722e      	strb	r6, [r5, #8]
    b386:	0029      	movs	r1, r5
    b388:	2002      	movs	r0, #2
    b38a:	9f02      	ldr	r7, [sp, #8]
    b38c:	47b8      	blx	r7
    b38e:	2002      	movs	r0, #2
    b390:	9903      	ldr	r1, [sp, #12]
    b392:	4788      	blx	r1
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    b394:	702e      	strb	r6, [r5, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    b396:	0029      	movs	r1, r5
    b398:	2000      	movs	r0, #0
    b39a:	4b29      	ldr	r3, [pc, #164]	; (b440 <system_clock_init+0x1c0>)
    b39c:	58e5      	ldr	r5, [r4, r3]
    b39e:	9502      	str	r5, [sp, #8]
    b3a0:	47a8      	blx	r5
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    b3a2:	2000      	movs	r0, #0
    b3a4:	4b27      	ldr	r3, [pc, #156]	; (b444 <system_clock_init+0x1c4>)
    b3a6:	58e1      	ldr	r1, [r4, r3]
    b3a8:	9102      	str	r1, [sp, #8]
    b3aa:	4788      	blx	r1
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    b3ac:	2007      	movs	r0, #7
    b3ae:	9a01      	ldr	r2, [sp, #4]
    b3b0:	4790      	blx	r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    b3b2:	2007      	movs	r0, #7
    b3b4:	4b1a      	ldr	r3, [pc, #104]	; (b420 <system_clock_init+0x1a0>)
    b3b6:	58e3      	ldr	r3, [r4, r3]
    b3b8:	9301      	str	r3, [sp, #4]
    b3ba:	4798      	blx	r3
    b3bc:	2800      	cmp	r0, #0
    b3be:	d0f8      	beq.n	b3b2 <system_clock_init+0x132>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    b3c0:	4a12      	ldr	r2, [pc, #72]	; (b40c <system_clock_init+0x18c>)
    b3c2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    b3c4:	2180      	movs	r1, #128	; 0x80
    b3c6:	430b      	orrs	r3, r1
    b3c8:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    b3ca:	4a1f      	ldr	r2, [pc, #124]	; (b448 <system_clock_init+0x1c8>)
    b3cc:	2300      	movs	r3, #0
    b3ce:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    b3d0:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    b3d2:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    b3d4:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    b3d6:	2201      	movs	r2, #1
    b3d8:	a905      	add	r1, sp, #20
    b3da:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    b3dc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    b3de:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    b3e0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    b3e2:	3307      	adds	r3, #7
    b3e4:	700b      	strb	r3, [r1, #0]
    b3e6:	2000      	movs	r0, #0
    b3e8:	4b13      	ldr	r3, [pc, #76]	; (b438 <system_clock_init+0x1b8>)
    b3ea:	58e3      	ldr	r3, [r4, r3]
    b3ec:	9301      	str	r3, [sp, #4]
    b3ee:	4798      	blx	r3
    b3f0:	2000      	movs	r0, #0
    b3f2:	4b12      	ldr	r3, [pc, #72]	; (b43c <system_clock_init+0x1bc>)
    b3f4:	58e3      	ldr	r3, [r4, r3]
    b3f6:	9301      	str	r3, [sp, #4]
    b3f8:	4798      	blx	r3
#endif
}
    b3fa:	b012      	add	sp, #72	; 0x48
    b3fc:	bc04      	pop	{r2}
    b3fe:	4690      	mov	r8, r2
    b400:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    b402:	3b20      	subs	r3, #32
    b404:	e785      	b.n	b312 <system_clock_init+0x92>
    b406:	46c0      	nop			; (mov r8, r8)
    b408:	00007702 	.word	0x00007702
    b40c:	40000800 	.word	0x40000800
    b410:	41004000 	.word	0x41004000
    b414:	fffffc6d 	.word	0xfffffc6d
    b418:	00000370 	.word	0x00000370
    b41c:	000003cc 	.word	0x000003cc
    b420:	0000040c 	.word	0x0000040c
    b424:	00806024 	.word	0x00806024
    b428:	000005dc 	.word	0x000005dc
    b42c:	000000b4 	.word	0x000000b4
    b430:	000001b0 	.word	0x000001b0
    b434:	0000048c 	.word	0x0000048c
    b438:	0000017c 	.word	0x0000017c
    b43c:	000002e0 	.word	0x000002e0
    b440:	00000114 	.word	0x00000114
    b444:	00000380 	.word	0x00000380
    b448:	40000400 	.word	0x40000400

0000b44c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    b44c:	4a06      	ldr	r2, [pc, #24]	; (b468 <system_gclk_init+0x1c>)
    b44e:	6993      	ldr	r3, [r2, #24]
    b450:	2108      	movs	r1, #8
    b452:	430b      	orrs	r3, r1
    b454:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    b456:	2201      	movs	r2, #1
    b458:	4b04      	ldr	r3, [pc, #16]	; (b46c <system_gclk_init+0x20>)
    b45a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    b45c:	4b03      	ldr	r3, [pc, #12]	; (b46c <system_gclk_init+0x20>)
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	07db      	lsls	r3, r3, #31
    b462:	d4fb      	bmi.n	b45c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    b464:	4770      	bx	lr
    b466:	46c0      	nop			; (mov r8, r8)
    b468:	40000400 	.word	0x40000400
    b46c:	40000c00 	.word	0x40000c00

0000b470 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    b470:	b5f0      	push	{r4, r5, r6, r7, lr}
    b472:	46c6      	mov	lr, r8
    b474:	b500      	push	{lr}
    b476:	b082      	sub	sp, #8
    b478:	0007      	movs	r7, r0
    b47a:	4e34      	ldr	r6, [pc, #208]	; (b54c <system_gclk_gen_set_config+0xdc>)
    b47c:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    b47e:	4680      	mov	r8, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    b480:	780c      	ldrb	r4, [r1, #0]
    b482:	0224      	lsls	r4, r4, #8
    b484:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    b486:	784b      	ldrb	r3, [r1, #1]
    b488:	2b00      	cmp	r3, #0
    b48a:	d002      	beq.n	b492 <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    b48c:	2380      	movs	r3, #128	; 0x80
    b48e:	02db      	lsls	r3, r3, #11
    b490:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    b492:	7a4b      	ldrb	r3, [r1, #9]
    b494:	2b00      	cmp	r3, #0
    b496:	d002      	beq.n	b49e <system_gclk_gen_set_config+0x2e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    b498:	2380      	movs	r3, #128	; 0x80
    b49a:	031b      	lsls	r3, r3, #12
    b49c:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    b49e:	6848      	ldr	r0, [r1, #4]
    b4a0:	2801      	cmp	r0, #1
    b4a2:	d913      	bls.n	b4cc <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    b4a4:	1e43      	subs	r3, r0, #1
    b4a6:	4203      	tst	r3, r0
    b4a8:	d046      	beq.n	b538 <system_gclk_gen_set_config+0xc8>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    b4aa:	0200      	lsls	r0, r0, #8
			new_gendiv_config  |=
    b4ac:	4338      	orrs	r0, r7
    b4ae:	4680      	mov	r8, r0

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    b4b0:	2380      	movs	r3, #128	; 0x80
    b4b2:	029b      	lsls	r3, r3, #10
    b4b4:	431c      	orrs	r4, r3
    b4b6:	e009      	b.n	b4cc <system_gclk_gen_set_config+0x5c>
				div2_count++;
    b4b8:	3201      	adds	r2, #1
						mask <<= 1) {
    b4ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    b4bc:	4283      	cmp	r3, r0
    b4be:	d3fb      	bcc.n	b4b8 <system_gclk_gen_set_config+0x48>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    b4c0:	0212      	lsls	r2, r2, #8
    b4c2:	433a      	orrs	r2, r7
    b4c4:	4690      	mov	r8, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    b4c6:	2380      	movs	r3, #128	; 0x80
    b4c8:	035b      	lsls	r3, r3, #13
    b4ca:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    b4cc:	7a0b      	ldrb	r3, [r1, #8]
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d002      	beq.n	b4d8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    b4d2:	2380      	movs	r3, #128	; 0x80
    b4d4:	039b      	lsls	r3, r3, #14
    b4d6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b4d8:	4b1d      	ldr	r3, [pc, #116]	; (b550 <system_gclk_gen_set_config+0xe0>)
    b4da:	785b      	ldrb	r3, [r3, #1]
    b4dc:	b25b      	sxtb	r3, r3
    b4de:	2b00      	cmp	r3, #0
    b4e0:	db2d      	blt.n	b53e <system_gclk_gen_set_config+0xce>
	return false;
    b4e2:	2500      	movs	r5, #0
	}

	while (system_gclk_is_syncing()) {
    b4e4:	2d00      	cmp	r5, #0
    b4e6:	d1f7      	bne.n	b4d8 <system_gclk_gen_set_config+0x68>
	cpu_irq_enter_critical();
    b4e8:	4b1a      	ldr	r3, [pc, #104]	; (b554 <system_gclk_gen_set_config+0xe4>)
    b4ea:	58f3      	ldr	r3, [r6, r3]
    b4ec:	9301      	str	r3, [sp, #4]
    b4ee:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    b4f0:	4b19      	ldr	r3, [pc, #100]	; (b558 <system_gclk_gen_set_config+0xe8>)
    b4f2:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b4f4:	4b16      	ldr	r3, [pc, #88]	; (b550 <system_gclk_gen_set_config+0xe0>)
    b4f6:	785b      	ldrb	r3, [r3, #1]
    b4f8:	b25b      	sxtb	r3, r3
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	db21      	blt.n	b542 <system_gclk_gen_set_config+0xd2>
	return false;
    b4fe:	002a      	movs	r2, r5

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    b500:	2a00      	cmp	r2, #0
    b502:	d1f7      	bne.n	b4f4 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    b504:	4b12      	ldr	r3, [pc, #72]	; (b550 <system_gclk_gen_set_config+0xe0>)
    b506:	4641      	mov	r1, r8
    b508:	6099      	str	r1, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b50a:	4b11      	ldr	r3, [pc, #68]	; (b550 <system_gclk_gen_set_config+0xe0>)
    b50c:	785b      	ldrb	r3, [r3, #1]
    b50e:	b25b      	sxtb	r3, r3
    b510:	2b00      	cmp	r3, #0
    b512:	db18      	blt.n	b546 <system_gclk_gen_set_config+0xd6>
	return false;
    b514:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    b516:	2b00      	cmp	r3, #0
    b518:	d1f7      	bne.n	b50a <system_gclk_gen_set_config+0x9a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    b51a:	4a0d      	ldr	r2, [pc, #52]	; (b550 <system_gclk_gen_set_config+0xe0>)
    b51c:	6853      	ldr	r3, [r2, #4]
    b51e:	2180      	movs	r1, #128	; 0x80
    b520:	0249      	lsls	r1, r1, #9
    b522:	400b      	ands	r3, r1
    b524:	431c      	orrs	r4, r3
    b526:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    b528:	4b0c      	ldr	r3, [pc, #48]	; (b55c <system_gclk_gen_set_config+0xec>)
    b52a:	58f3      	ldr	r3, [r6, r3]
    b52c:	9301      	str	r3, [sp, #4]
    b52e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    b530:	b002      	add	sp, #8
    b532:	bc04      	pop	{r2}
    b534:	4690      	mov	r8, r2
    b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b538:	2302      	movs	r3, #2
    b53a:	2200      	movs	r2, #0
    b53c:	e7be      	b.n	b4bc <system_gclk_gen_set_config+0x4c>
		return true;
    b53e:	2501      	movs	r5, #1
    b540:	e7d0      	b.n	b4e4 <system_gclk_gen_set_config+0x74>
    b542:	2201      	movs	r2, #1
    b544:	e7dc      	b.n	b500 <system_gclk_gen_set_config+0x90>
    b546:	2301      	movs	r3, #1
    b548:	e7e5      	b.n	b516 <system_gclk_gen_set_config+0xa6>
    b54a:	46c0      	nop			; (mov r8, r8)
    b54c:	00007510 	.word	0x00007510
    b550:	40000c00 	.word	0x40000c00
    b554:	00000148 	.word	0x00000148
    b558:	40000c08 	.word	0x40000c08
    b55c:	00000020 	.word	0x00000020

0000b560 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    b560:	b570      	push	{r4, r5, r6, lr}
    b562:	b082      	sub	sp, #8
    b564:	0006      	movs	r6, r0
    b566:	4d14      	ldr	r5, [pc, #80]	; (b5b8 <system_gclk_gen_enable+0x58>)
    b568:	447d      	add	r5, pc
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b56a:	4b14      	ldr	r3, [pc, #80]	; (b5bc <system_gclk_gen_enable+0x5c>)
    b56c:	785b      	ldrb	r3, [r3, #1]
    b56e:	b25b      	sxtb	r3, r3
    b570:	2b00      	cmp	r3, #0
    b572:	db1c      	blt.n	b5ae <system_gclk_gen_enable+0x4e>
	return false;
    b574:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    b576:	2c00      	cmp	r4, #0
    b578:	d1f7      	bne.n	b56a <system_gclk_gen_enable+0xa>
	cpu_irq_enter_critical();
    b57a:	4b11      	ldr	r3, [pc, #68]	; (b5c0 <system_gclk_gen_enable+0x60>)
    b57c:	58eb      	ldr	r3, [r5, r3]
    b57e:	9301      	str	r3, [sp, #4]
    b580:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    b582:	4b10      	ldr	r3, [pc, #64]	; (b5c4 <system_gclk_gen_enable+0x64>)
    b584:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b586:	4b0d      	ldr	r3, [pc, #52]	; (b5bc <system_gclk_gen_enable+0x5c>)
    b588:	785b      	ldrb	r3, [r3, #1]
    b58a:	b25b      	sxtb	r3, r3
    b58c:	2b00      	cmp	r3, #0
    b58e:	db10      	blt.n	b5b2 <system_gclk_gen_enable+0x52>
	return false;
    b590:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    b592:	2b00      	cmp	r3, #0
    b594:	d1f7      	bne.n	b586 <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    b596:	4a09      	ldr	r2, [pc, #36]	; (b5bc <system_gclk_gen_enable+0x5c>)
    b598:	6851      	ldr	r1, [r2, #4]
    b59a:	2380      	movs	r3, #128	; 0x80
    b59c:	025b      	lsls	r3, r3, #9
    b59e:	430b      	orrs	r3, r1
    b5a0:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    b5a2:	4b09      	ldr	r3, [pc, #36]	; (b5c8 <system_gclk_gen_enable+0x68>)
    b5a4:	58eb      	ldr	r3, [r5, r3]
    b5a6:	9301      	str	r3, [sp, #4]
    b5a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    b5aa:	b002      	add	sp, #8
    b5ac:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    b5ae:	2401      	movs	r4, #1
    b5b0:	e7e1      	b.n	b576 <system_gclk_gen_enable+0x16>
    b5b2:	2301      	movs	r3, #1
    b5b4:	e7ed      	b.n	b592 <system_gclk_gen_enable+0x32>
    b5b6:	46c0      	nop			; (mov r8, r8)
    b5b8:	00007424 	.word	0x00007424
    b5bc:	40000c00 	.word	0x40000c00
    b5c0:	00000148 	.word	0x00000148
    b5c4:	40000c04 	.word	0x40000c04
    b5c8:	00000020 	.word	0x00000020

0000b5cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    b5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ce:	b083      	sub	sp, #12
    b5d0:	0007      	movs	r7, r0
    b5d2:	4e29      	ldr	r6, [pc, #164]	; (b678 <system_gclk_gen_get_hz+0xac>)
    b5d4:	447e      	add	r6, pc
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b5d6:	4b29      	ldr	r3, [pc, #164]	; (b67c <system_gclk_gen_get_hz+0xb0>)
    b5d8:	785b      	ldrb	r3, [r3, #1]
    b5da:	b25b      	sxtb	r3, r3
    b5dc:	2b00      	cmp	r3, #0
    b5de:	db3c      	blt.n	b65a <system_gclk_gen_get_hz+0x8e>
	return false;
    b5e0:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    b5e2:	2d00      	cmp	r5, #0
    b5e4:	d1f7      	bne.n	b5d6 <system_gclk_gen_get_hz+0xa>
	cpu_irq_enter_critical();
    b5e6:	4b26      	ldr	r3, [pc, #152]	; (b680 <system_gclk_gen_get_hz+0xb4>)
    b5e8:	58f3      	ldr	r3, [r6, r3]
    b5ea:	9300      	str	r3, [sp, #0]
    b5ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    b5ee:	4b25      	ldr	r3, [pc, #148]	; (b684 <system_gclk_gen_get_hz+0xb8>)
    b5f0:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b5f2:	4b22      	ldr	r3, [pc, #136]	; (b67c <system_gclk_gen_get_hz+0xb0>)
    b5f4:	785b      	ldrb	r3, [r3, #1]
    b5f6:	b25b      	sxtb	r3, r3
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	db30      	blt.n	b65e <system_gclk_gen_get_hz+0x92>
	return false;
    b5fc:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    b5fe:	2c00      	cmp	r4, #0
    b600:	d1f7      	bne.n	b5f2 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    b602:	4d1e      	ldr	r5, [pc, #120]	; (b67c <system_gclk_gen_get_hz+0xb0>)
    b604:	6868      	ldr	r0, [r5, #4]
    b606:	04c0      	lsls	r0, r0, #19
    b608:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    b60a:	4b1f      	ldr	r3, [pc, #124]	; (b688 <system_gclk_gen_get_hz+0xbc>)
    b60c:	58f3      	ldr	r3, [r6, r3]
    b60e:	9300      	str	r3, [sp, #0]
    b610:	4798      	blx	r3
    b612:	9000      	str	r0, [sp, #0]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    b614:	4b1b      	ldr	r3, [pc, #108]	; (b684 <system_gclk_gen_get_hz+0xb8>)
    b616:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    b618:	686b      	ldr	r3, [r5, #4]
    b61a:	02db      	lsls	r3, r3, #11
    b61c:	0fdd      	lsrs	r5, r3, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    b61e:	4b1b      	ldr	r3, [pc, #108]	; (b68c <system_gclk_gen_get_hz+0xc0>)
    b620:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b622:	4b16      	ldr	r3, [pc, #88]	; (b67c <system_gclk_gen_get_hz+0xb0>)
    b624:	785b      	ldrb	r3, [r3, #1]
    b626:	b25b      	sxtb	r3, r3
    b628:	2b00      	cmp	r3, #0
    b62a:	db1a      	blt.n	b662 <system_gclk_gen_get_hz+0x96>
	return false;
    b62c:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    b62e:	2b00      	cmp	r3, #0
    b630:	d1f7      	bne.n	b622 <system_gclk_gen_get_hz+0x56>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    b632:	4b12      	ldr	r3, [pc, #72]	; (b67c <system_gclk_gen_get_hz+0xb0>)
    b634:	689c      	ldr	r4, [r3, #8]
    b636:	0224      	lsls	r4, r4, #8
    b638:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    b63a:	4b15      	ldr	r3, [pc, #84]	; (b690 <system_gclk_gen_get_hz+0xc4>)
    b63c:	58f3      	ldr	r3, [r6, r3]
    b63e:	9301      	str	r3, [sp, #4]
    b640:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    b642:	2d00      	cmp	r5, #0
    b644:	d10f      	bne.n	b666 <system_gclk_gen_get_hz+0x9a>
    b646:	2c01      	cmp	r4, #1
    b648:	d90d      	bls.n	b666 <system_gclk_gen_get_hz+0x9a>
		gen_input_hz /= divider;
    b64a:	4b12      	ldr	r3, [pc, #72]	; (b694 <system_gclk_gen_get_hz+0xc8>)
    b64c:	58f3      	ldr	r3, [r6, r3]
    b64e:	9301      	str	r3, [sp, #4]
    b650:	0021      	movs	r1, r4
    b652:	9800      	ldr	r0, [sp, #0]
    b654:	4798      	blx	r3
    b656:	9000      	str	r0, [sp, #0]
    b658:	e00b      	b.n	b672 <system_gclk_gen_get_hz+0xa6>
		return true;
    b65a:	2501      	movs	r5, #1
    b65c:	e7c1      	b.n	b5e2 <system_gclk_gen_get_hz+0x16>
    b65e:	2401      	movs	r4, #1
    b660:	e7cd      	b.n	b5fe <system_gclk_gen_get_hz+0x32>
    b662:	2301      	movs	r3, #1
    b664:	e7e3      	b.n	b62e <system_gclk_gen_get_hz+0x62>
	} else if (divsel) {
    b666:	2d00      	cmp	r5, #0
    b668:	d003      	beq.n	b672 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz >>= (divider+1);
    b66a:	3401      	adds	r4, #1
    b66c:	9b00      	ldr	r3, [sp, #0]
    b66e:	40e3      	lsrs	r3, r4
    b670:	9300      	str	r3, [sp, #0]
	}

	return gen_input_hz;
}
    b672:	9800      	ldr	r0, [sp, #0]
    b674:	b003      	add	sp, #12
    b676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b678:	000073b8 	.word	0x000073b8
    b67c:	40000c00 	.word	0x40000c00
    b680:	00000148 	.word	0x00000148
    b684:	40000c04 	.word	0x40000c04
    b688:	000003e4 	.word	0x000003e4
    b68c:	40000c08 	.word	0x40000c08
    b690:	00000020 	.word	0x00000020
    b694:	00000340 	.word	0x00000340

0000b698 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    b698:	b530      	push	{r4, r5, lr}
    b69a:	b083      	sub	sp, #12
    b69c:	0005      	movs	r5, r0
    b69e:	4c0a      	ldr	r4, [pc, #40]	; (b6c8 <system_gclk_chan_enable+0x30>)
    b6a0:	447c      	add	r4, pc
	cpu_irq_enter_critical();
    b6a2:	4b0a      	ldr	r3, [pc, #40]	; (b6cc <system_gclk_chan_enable+0x34>)
    b6a4:	58e3      	ldr	r3, [r4, r3]
    b6a6:	9301      	str	r3, [sp, #4]
    b6a8:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    b6aa:	4b09      	ldr	r3, [pc, #36]	; (b6d0 <system_gclk_chan_enable+0x38>)
    b6ac:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    b6ae:	4a09      	ldr	r2, [pc, #36]	; (b6d4 <system_gclk_chan_enable+0x3c>)
    b6b0:	8853      	ldrh	r3, [r2, #2]
    b6b2:	2180      	movs	r1, #128	; 0x80
    b6b4:	01c9      	lsls	r1, r1, #7
    b6b6:	430b      	orrs	r3, r1
    b6b8:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    b6ba:	4b07      	ldr	r3, [pc, #28]	; (b6d8 <system_gclk_chan_enable+0x40>)
    b6bc:	58e3      	ldr	r3, [r4, r3]
    b6be:	9301      	str	r3, [sp, #4]
    b6c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    b6c2:	b003      	add	sp, #12
    b6c4:	bd30      	pop	{r4, r5, pc}
    b6c6:	46c0      	nop			; (mov r8, r8)
    b6c8:	000072ec 	.word	0x000072ec
    b6cc:	00000148 	.word	0x00000148
    b6d0:	40000c02 	.word	0x40000c02
    b6d4:	40000c00 	.word	0x40000c00
    b6d8:	00000020 	.word	0x00000020

0000b6dc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    b6dc:	b530      	push	{r4, r5, lr}
    b6de:	b083      	sub	sp, #12
    b6e0:	0005      	movs	r5, r0
    b6e2:	4c12      	ldr	r4, [pc, #72]	; (b72c <system_gclk_chan_disable+0x50>)
    b6e4:	447c      	add	r4, pc
	cpu_irq_enter_critical();
    b6e6:	4b12      	ldr	r3, [pc, #72]	; (b730 <system_gclk_chan_disable+0x54>)
    b6e8:	58e3      	ldr	r3, [r4, r3]
    b6ea:	9301      	str	r3, [sp, #4]
    b6ec:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    b6ee:	4b11      	ldr	r3, [pc, #68]	; (b734 <system_gclk_chan_disable+0x58>)
    b6f0:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    b6f2:	4911      	ldr	r1, [pc, #68]	; (b738 <system_gclk_chan_disable+0x5c>)
    b6f4:	884b      	ldrh	r3, [r1, #2]
    b6f6:	051b      	lsls	r3, r3, #20
    b6f8:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    b6fa:	884b      	ldrh	r3, [r1, #2]
    b6fc:	480f      	ldr	r0, [pc, #60]	; (b73c <system_gclk_chan_disable+0x60>)
    b6fe:	4003      	ands	r3, r0
    b700:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    b702:	884b      	ldrh	r3, [r1, #2]
    b704:	480e      	ldr	r0, [pc, #56]	; (b740 <system_gclk_chan_disable+0x64>)
    b706:	4003      	ands	r3, r0
    b708:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    b70a:	4b0b      	ldr	r3, [pc, #44]	; (b738 <system_gclk_chan_disable+0x5c>)
    b70c:	885b      	ldrh	r3, [r3, #2]
    b70e:	045b      	lsls	r3, r3, #17
    b710:	d4fb      	bmi.n	b70a <system_gclk_chan_disable+0x2e>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    b712:	4809      	ldr	r0, [pc, #36]	; (b738 <system_gclk_chan_disable+0x5c>)
    b714:	8841      	ldrh	r1, [r0, #2]
    b716:	0213      	lsls	r3, r2, #8
    b718:	4a08      	ldr	r2, [pc, #32]	; (b73c <system_gclk_chan_disable+0x60>)
    b71a:	400a      	ands	r2, r1
    b71c:	4313      	orrs	r3, r2
    b71e:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    b720:	4b08      	ldr	r3, [pc, #32]	; (b744 <system_gclk_chan_disable+0x68>)
    b722:	58e3      	ldr	r3, [r4, r3]
    b724:	9301      	str	r3, [sp, #4]
    b726:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    b728:	b003      	add	sp, #12
    b72a:	bd30      	pop	{r4, r5, pc}
    b72c:	000072a8 	.word	0x000072a8
    b730:	00000148 	.word	0x00000148
    b734:	40000c02 	.word	0x40000c02
    b738:	40000c00 	.word	0x40000c00
    b73c:	fffff0ff 	.word	0xfffff0ff
    b740:	ffffbfff 	.word	0xffffbfff
    b744:	00000020 	.word	0x00000020

0000b748 <system_gclk_chan_set_config>:
{
    b748:	b510      	push	{r4, lr}
    b74a:	b082      	sub	sp, #8
    b74c:	4b06      	ldr	r3, [pc, #24]	; (b768 <system_gclk_chan_set_config+0x20>)
    b74e:	447b      	add	r3, pc
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    b750:	780c      	ldrb	r4, [r1, #0]
    b752:	0224      	lsls	r4, r4, #8
    b754:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    b756:	4a05      	ldr	r2, [pc, #20]	; (b76c <system_gclk_chan_set_config+0x24>)
    b758:	589b      	ldr	r3, [r3, r2]
    b75a:	9301      	str	r3, [sp, #4]
    b75c:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    b75e:	b2a4      	uxth	r4, r4
    b760:	4b03      	ldr	r3, [pc, #12]	; (b770 <system_gclk_chan_set_config+0x28>)
    b762:	805c      	strh	r4, [r3, #2]
}
    b764:	b002      	add	sp, #8
    b766:	bd10      	pop	{r4, pc}
    b768:	0000723e 	.word	0x0000723e
    b76c:	00000424 	.word	0x00000424
    b770:	40000c00 	.word	0x40000c00

0000b774 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    b774:	b530      	push	{r4, r5, lr}
    b776:	b083      	sub	sp, #12
    b778:	0004      	movs	r4, r0
    b77a:	4d0b      	ldr	r5, [pc, #44]	; (b7a8 <system_gclk_chan_get_hz+0x34>)
    b77c:	447d      	add	r5, pc
	cpu_irq_enter_critical();
    b77e:	4b0b      	ldr	r3, [pc, #44]	; (b7ac <system_gclk_chan_get_hz+0x38>)
    b780:	58eb      	ldr	r3, [r5, r3]
    b782:	9301      	str	r3, [sp, #4]
    b784:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    b786:	4b0a      	ldr	r3, [pc, #40]	; (b7b0 <system_gclk_chan_get_hz+0x3c>)
    b788:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    b78a:	4b0a      	ldr	r3, [pc, #40]	; (b7b4 <system_gclk_chan_get_hz+0x40>)
    b78c:	885c      	ldrh	r4, [r3, #2]
    b78e:	0524      	lsls	r4, r4, #20
    b790:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    b792:	4b09      	ldr	r3, [pc, #36]	; (b7b8 <system_gclk_chan_get_hz+0x44>)
    b794:	58eb      	ldr	r3, [r5, r3]
    b796:	9301      	str	r3, [sp, #4]
    b798:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    b79a:	0020      	movs	r0, r4
    b79c:	4b07      	ldr	r3, [pc, #28]	; (b7bc <system_gclk_chan_get_hz+0x48>)
    b79e:	58eb      	ldr	r3, [r5, r3]
    b7a0:	9301      	str	r3, [sp, #4]
    b7a2:	4798      	blx	r3
}
    b7a4:	b003      	add	sp, #12
    b7a6:	bd30      	pop	{r4, r5, pc}
    b7a8:	00007210 	.word	0x00007210
    b7ac:	00000148 	.word	0x00000148
    b7b0:	40000c02 	.word	0x40000c02
    b7b4:	40000c00 	.word	0x40000c00
    b7b8:	00000020 	.word	0x00000020
    b7bc:	0000014c 	.word	0x0000014c

0000b7c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    b7c0:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    b7c2:	78d3      	ldrb	r3, [r2, #3]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d120      	bne.n	b80a <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    b7c8:	7815      	ldrb	r5, [r2, #0]
    b7ca:	2d80      	cmp	r5, #128	; 0x80
    b7cc:	d01b      	beq.n	b806 <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    b7ce:	062d      	lsls	r5, r5, #24
    b7d0:	2380      	movs	r3, #128	; 0x80
    b7d2:	025b      	lsls	r3, r3, #9
    b7d4:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    b7d6:	7853      	ldrb	r3, [r2, #1]
    b7d8:	2b00      	cmp	r3, #0
    b7da:	d001      	beq.n	b7e0 <_system_pinmux_config+0x20>
    b7dc:	2b02      	cmp	r3, #2
    b7de:	d10a      	bne.n	b7f6 <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    b7e0:	2380      	movs	r3, #128	; 0x80
    b7e2:	029b      	lsls	r3, r3, #10
    b7e4:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    b7e6:	7894      	ldrb	r4, [r2, #2]
    b7e8:	2c00      	cmp	r4, #0
    b7ea:	d002      	beq.n	b7f2 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    b7ec:	23c0      	movs	r3, #192	; 0xc0
    b7ee:	02db      	lsls	r3, r3, #11
    b7f0:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    b7f2:	6041      	str	r1, [r0, #4]
    b7f4:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b7f6:	7853      	ldrb	r3, [r2, #1]
    b7f8:	3b01      	subs	r3, #1
    b7fa:	b2db      	uxtb	r3, r3
    b7fc:	2b01      	cmp	r3, #1
    b7fe:	d806      	bhi.n	b80e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    b800:	4b13      	ldr	r3, [pc, #76]	; (b850 <_system_pinmux_config+0x90>)
    b802:	401d      	ands	r5, r3
    b804:	e003      	b.n	b80e <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    b806:	2500      	movs	r5, #0
    b808:	e7e5      	b.n	b7d6 <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    b80a:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    b80c:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    b80e:	040c      	lsls	r4, r1, #16
    b810:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    b812:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b814:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    b816:	26a0      	movs	r6, #160	; 0xa0
    b818:	05f6      	lsls	r6, r6, #23
    b81a:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b81c:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b81e:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    b820:	24d0      	movs	r4, #208	; 0xd0
    b822:	0624      	lsls	r4, r4, #24
    b824:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b826:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    b828:	78d3      	ldrb	r3, [r2, #3]
    b82a:	2b00      	cmp	r3, #0
    b82c:	d10a      	bne.n	b844 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    b82e:	036b      	lsls	r3, r5, #13
    b830:	d503      	bpl.n	b83a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    b832:	7893      	ldrb	r3, [r2, #2]
    b834:	2b01      	cmp	r3, #1
    b836:	d006      	beq.n	b846 <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    b838:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b83a:	7853      	ldrb	r3, [r2, #1]
    b83c:	3b01      	subs	r3, #1
    b83e:	b2db      	uxtb	r3, r3
    b840:	2b01      	cmp	r3, #1
    b842:	d902      	bls.n	b84a <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    b844:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    b846:	6181      	str	r1, [r0, #24]
    b848:	e7f7      	b.n	b83a <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    b84a:	6081      	str	r1, [r0, #8]
}
    b84c:	e7fa      	b.n	b844 <_system_pinmux_config+0x84>
    b84e:	46c0      	nop			; (mov r8, r8)
    b850:	fffbffff 	.word	0xfffbffff

0000b854 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    b854:	b510      	push	{r4, lr}
    b856:	000a      	movs	r2, r1
	uint8_t port_index  = (gpio_pin / 128);
    b858:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    b85a:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    b85c:	2900      	cmp	r1, #0
    b85e:	d10c      	bne.n	b87a <system_pinmux_pin_set_config+0x26>
		return &(ports[port_index]->Group[group_index]);
    b860:	01db      	lsls	r3, r3, #7
    b862:	4907      	ldr	r1, [pc, #28]	; (b880 <system_pinmux_pin_set_config+0x2c>)
    b864:	468c      	mov	ip, r1
    b866:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    b868:	241f      	movs	r4, #31
    b86a:	4020      	ands	r0, r4
    b86c:	2101      	movs	r1, #1
    b86e:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    b870:	0018      	movs	r0, r3
    b872:	4b04      	ldr	r3, [pc, #16]	; (b884 <system_pinmux_pin_set_config+0x30>)
    b874:	447b      	add	r3, pc
    b876:	4798      	blx	r3
}
    b878:	bd10      	pop	{r4, pc}
		return NULL;
    b87a:	2300      	movs	r3, #0
    b87c:	e7f4      	b.n	b868 <system_pinmux_pin_set_config+0x14>
    b87e:	46c0      	nop			; (mov r8, r8)
    b880:	41004400 	.word	0x41004400
    b884:	ffffff49 	.word	0xffffff49

0000b888 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    b888:	4770      	bx	lr
	...

0000b88c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    b88c:	b510      	push	{r4, lr}
    b88e:	b082      	sub	sp, #8
    b890:	4c0b      	ldr	r4, [pc, #44]	; (b8c0 <system_init+0x34>)
    b892:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    b894:	4b0b      	ldr	r3, [pc, #44]	; (b8c4 <system_init+0x38>)
    b896:	58e3      	ldr	r3, [r4, r3]
    b898:	9301      	str	r3, [sp, #4]
    b89a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    b89c:	4b0a      	ldr	r3, [pc, #40]	; (b8c8 <system_init+0x3c>)
    b89e:	58e3      	ldr	r3, [r4, r3]
    b8a0:	9301      	str	r3, [sp, #4]
    b8a2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    b8a4:	4b09      	ldr	r3, [pc, #36]	; (b8cc <system_init+0x40>)
    b8a6:	58e3      	ldr	r3, [r4, r3]
    b8a8:	9301      	str	r3, [sp, #4]
    b8aa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    b8ac:	4b08      	ldr	r3, [pc, #32]	; (b8d0 <system_init+0x44>)
    b8ae:	58e3      	ldr	r3, [r4, r3]
    b8b0:	9301      	str	r3, [sp, #4]
    b8b2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    b8b4:	4b07      	ldr	r3, [pc, #28]	; (b8d4 <system_init+0x48>)
    b8b6:	58e3      	ldr	r3, [r4, r3]
    b8b8:	9301      	str	r3, [sp, #4]
    b8ba:	4798      	blx	r3
}
    b8bc:	b002      	add	sp, #8
    b8be:	bd10      	pop	{r4, pc}
    b8c0:	000070fa 	.word	0x000070fa
    b8c4:	000003c0 	.word	0x000003c0
    b8c8:	000002cc 	.word	0x000002cc
    b8cc:	000003b0 	.word	0x000003b0
    b8d0:	00000240 	.word	0x00000240
    b8d4:	00000144 	.word	0x00000144

0000b8d8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    b8d8:	b530      	push	{r4, r5, lr}
    b8da:	b087      	sub	sp, #28
    b8dc:	0005      	movs	r5, r0
    b8de:	4c36      	ldr	r4, [pc, #216]	; (b9b8 <udd_sleep_mode+0xe0>)
    b8e0:	447c      	add	r4, pc
	enum sleepmgr_mode sleep_mode[] = {
    b8e2:	2204      	movs	r2, #4
    b8e4:	4935      	ldr	r1, [pc, #212]	; (b9bc <udd_sleep_mode+0xe4>)
    b8e6:	4479      	add	r1, pc
    b8e8:	a805      	add	r0, sp, #20
    b8ea:	4b35      	ldr	r3, [pc, #212]	; (b9c0 <udd_sleep_mode+0xe8>)
    b8ec:	58e3      	ldr	r3, [r4, r3]
    b8ee:	9301      	str	r3, [sp, #4]
    b8f0:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    b8f2:	4b34      	ldr	r3, [pc, #208]	; (b9c4 <udd_sleep_mode+0xec>)
    b8f4:	447b      	add	r3, pc
    b8f6:	781b      	ldrb	r3, [r3, #0]
    b8f8:	42ab      	cmp	r3, r5
    b8fa:	d009      	beq.n	b910 <udd_sleep_mode+0x38>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    b8fc:	2d00      	cmp	r5, #0
    b8fe:	d109      	bne.n	b914 <udd_sleep_mode+0x3c>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    b900:	4b31      	ldr	r3, [pc, #196]	; (b9c8 <udd_sleep_mode+0xf0>)
    b902:	447b      	add	r3, pc
    b904:	781b      	ldrb	r3, [r3, #0]
    b906:	2b00      	cmp	r3, #0
    b908:	d12d      	bne.n	b966 <udd_sleep_mode+0x8e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    b90a:	4b30      	ldr	r3, [pc, #192]	; (b9cc <udd_sleep_mode+0xf4>)
    b90c:	447b      	add	r3, pc
    b90e:	701d      	strb	r5, [r3, #0]
}
    b910:	b007      	add	sp, #28
    b912:	bd30      	pop	{r4, r5, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    b914:	ab05      	add	r3, sp, #20
    b916:	5d5b      	ldrb	r3, [r3, r5]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    b918:	4a2d      	ldr	r2, [pc, #180]	; (b9d0 <udd_sleep_mode+0xf8>)
    b91a:	58a2      	ldr	r2, [r4, r2]
    b91c:	9201      	str	r2, [sp, #4]
    b91e:	5cd2      	ldrb	r2, [r2, r3]
    b920:	2aff      	cmp	r2, #255	; 0xff
    b922:	d100      	bne.n	b926 <udd_sleep_mode+0x4e>
    b924:	e7fe      	b.n	b924 <udd_sleep_mode+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b926:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    b92a:	4251      	negs	r1, r2
    b92c:	414a      	adcs	r2, r1
    b92e:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    b930:	b672      	cpsid	i
    b932:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    b936:	4a27      	ldr	r2, [pc, #156]	; (b9d4 <udd_sleep_mode+0xfc>)
    b938:	58a2      	ldr	r2, [r4, r2]
    b93a:	9201      	str	r2, [sp, #4]
    b93c:	2200      	movs	r2, #0
    b93e:	9901      	ldr	r1, [sp, #4]
    b940:	700a      	strb	r2, [r1, #0]
	return flags;
    b942:	9803      	ldr	r0, [sp, #12]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    b944:	4a22      	ldr	r2, [pc, #136]	; (b9d0 <udd_sleep_mode+0xf8>)
    b946:	58a1      	ldr	r1, [r4, r2]
    b948:	5cca      	ldrb	r2, [r1, r3]
    b94a:	3201      	adds	r2, #1
    b94c:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    b94e:	2800      	cmp	r0, #0
    b950:	d0d6      	beq.n	b900 <udd_sleep_mode+0x28>
		cpu_irq_enable();
    b952:	4b20      	ldr	r3, [pc, #128]	; (b9d4 <udd_sleep_mode+0xfc>)
    b954:	58e3      	ldr	r3, [r4, r3]
    b956:	9301      	str	r3, [sp, #4]
    b958:	2301      	movs	r3, #1
    b95a:	9a01      	ldr	r2, [sp, #4]
    b95c:	7013      	strb	r3, [r2, #0]
    b95e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b962:	b662      	cpsie	i
    b964:	e7cc      	b.n	b900 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    b966:	aa05      	add	r2, sp, #20
    b968:	5cd3      	ldrb	r3, [r2, r3]
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    b96a:	4a19      	ldr	r2, [pc, #100]	; (b9d0 <udd_sleep_mode+0xf8>)
    b96c:	58a2      	ldr	r2, [r4, r2]
    b96e:	9201      	str	r2, [sp, #4]
    b970:	5cd2      	ldrb	r2, [r2, r3]
    b972:	2a00      	cmp	r2, #0
    b974:	d100      	bne.n	b978 <udd_sleep_mode+0xa0>
    b976:	e7fe      	b.n	b976 <udd_sleep_mode+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    b978:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    b97c:	4251      	negs	r1, r2
    b97e:	414a      	adcs	r2, r1
    b980:	9204      	str	r2, [sp, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    b982:	b672      	cpsid	i
    b984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    b988:	4a12      	ldr	r2, [pc, #72]	; (b9d4 <udd_sleep_mode+0xfc>)
    b98a:	58a2      	ldr	r2, [r4, r2]
    b98c:	9201      	str	r2, [sp, #4]
    b98e:	2200      	movs	r2, #0
    b990:	9901      	ldr	r1, [sp, #4]
    b992:	700a      	strb	r2, [r1, #0]
	return flags;
    b994:	9804      	ldr	r0, [sp, #16]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    b996:	4a0e      	ldr	r2, [pc, #56]	; (b9d0 <udd_sleep_mode+0xf8>)
    b998:	58a1      	ldr	r1, [r4, r2]
    b99a:	5cca      	ldrb	r2, [r1, r3]
    b99c:	3a01      	subs	r2, #1
    b99e:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    b9a0:	2800      	cmp	r0, #0
    b9a2:	d0b2      	beq.n	b90a <udd_sleep_mode+0x32>
		cpu_irq_enable();
    b9a4:	4b0b      	ldr	r3, [pc, #44]	; (b9d4 <udd_sleep_mode+0xfc>)
    b9a6:	58e3      	ldr	r3, [r4, r3]
    b9a8:	9301      	str	r3, [sp, #4]
    b9aa:	2301      	movs	r3, #1
    b9ac:	9a01      	ldr	r2, [sp, #4]
    b9ae:	7013      	strb	r3, [r2, #0]
    b9b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b9b4:	b662      	cpsie	i
    b9b6:	e7a8      	b.n	b90a <udd_sleep_mode+0x32>
    b9b8:	000070ac 	.word	0x000070ac
    b9bc:	00006eba 	.word	0x00006eba
    b9c0:	000000ec 	.word	0x000000ec
    b9c4:	1fff52ac 	.word	0x1fff52ac
    b9c8:	1fff529e 	.word	0x1fff529e
    b9cc:	1fff5294 	.word	0x1fff5294
    b9d0:	0000035c 	.word	0x0000035c
    b9d4:	0000016c 	.word	0x0000016c

0000b9d8 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    b9d8:	2800      	cmp	r0, #0
    b9da:	d00e      	beq.n	b9fa <udd_ep_get_job+0x22>
    b9dc:	2880      	cmp	r0, #128	; 0x80
    b9de:	d00e      	beq.n	b9fe <udd_ep_get_job+0x26>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    b9e0:	230f      	movs	r3, #15
    b9e2:	4003      	ands	r3, r0
    b9e4:	005b      	lsls	r3, r3, #1
    b9e6:	09c0      	lsrs	r0, r0, #7
    b9e8:	1818      	adds	r0, r3, r0
    b9ea:	3802      	subs	r0, #2
    b9ec:	0083      	lsls	r3, r0, #2
    b9ee:	1818      	adds	r0, r3, r0
    b9f0:	0083      	lsls	r3, r0, #2
    b9f2:	4804      	ldr	r0, [pc, #16]	; (ba04 <udd_ep_get_job+0x2c>)
    b9f4:	4478      	add	r0, pc
    b9f6:	18c0      	adds	r0, r0, r3
	}
}
    b9f8:	4770      	bx	lr
		return NULL;
    b9fa:	2000      	movs	r0, #0
    b9fc:	e7fc      	b.n	b9f8 <udd_ep_get_job+0x20>
    b9fe:	2000      	movs	r0, #0
    ba00:	e7fa      	b.n	b9f8 <udd_ep_get_job+0x20>
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	1fff5134 	.word	0x1fff5134

0000ba08 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    ba08:	4a0c      	ldr	r2, [pc, #48]	; (ba3c <udd_ctrl_fetch_ram+0x34>)
    ba0a:	447a      	add	r2, pc
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    ba0c:	4b0c      	ldr	r3, [pc, #48]	; (ba40 <udd_ctrl_fetch_ram+0x38>)
    ba0e:	58d3      	ldr	r3, [r2, r3]
    ba10:	7819      	ldrb	r1, [r3, #0]
    ba12:	480c      	ldr	r0, [pc, #48]	; (ba44 <udd_ctrl_fetch_ram+0x3c>)
    ba14:	5812      	ldr	r2, [r2, r0]
    ba16:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    ba18:	7859      	ldrb	r1, [r3, #1]
    ba1a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    ba1c:	78d9      	ldrb	r1, [r3, #3]
    ba1e:	0209      	lsls	r1, r1, #8
    ba20:	7898      	ldrb	r0, [r3, #2]
    ba22:	1809      	adds	r1, r1, r0
    ba24:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    ba26:	7959      	ldrb	r1, [r3, #5]
    ba28:	0209      	lsls	r1, r1, #8
    ba2a:	7918      	ldrb	r0, [r3, #4]
    ba2c:	1809      	adds	r1, r1, r0
    ba2e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    ba30:	79d9      	ldrb	r1, [r3, #7]
    ba32:	0209      	lsls	r1, r1, #8
    ba34:	799b      	ldrb	r3, [r3, #6]
    ba36:	18cb      	adds	r3, r1, r3
    ba38:	80d3      	strh	r3, [r2, #6]
}
    ba3a:	4770      	bx	lr
    ba3c:	00006f82 	.word	0x00006f82
    ba40:	00000480 	.word	0x00000480
    ba44:	00000308 	.word	0x00000308

0000ba48 <udd_ep_trans_in_next>:
{
    ba48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba4a:	46d6      	mov	lr, sl
    ba4c:	464f      	mov	r7, r9
    ba4e:	4646      	mov	r6, r8
    ba50:	b5c0      	push	{r6, r7, lr}
    ba52:	b082      	sub	sp, #8
    ba54:	0004      	movs	r4, r0
    ba56:	4f38      	ldr	r7, [pc, #224]	; (bb38 <udd_ep_trans_in_next+0xf0>)
    ba58:	447f      	add	r7, pc
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    ba5a:	7983      	ldrb	r3, [r0, #6]
    ba5c:	469a      	mov	sl, r3
	ptr_job = udd_ep_get_job(ep);
    ba5e:	0018      	movs	r0, r3
    ba60:	4b36      	ldr	r3, [pc, #216]	; (bb3c <udd_ep_trans_in_next+0xf4>)
    ba62:	447b      	add	r3, pc
    ba64:	4798      	blx	r3
    ba66:	0005      	movs	r5, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    ba68:	230f      	movs	r3, #15
    ba6a:	4652      	mov	r2, sl
    ba6c:	401a      	ands	r2, r3
    ba6e:	4690      	mov	r8, r2
	ep_size = ptr_job->ep_size;
    ba70:	8a03      	ldrh	r3, [r0, #16]
    ba72:	4699      	mov	r9, r3
	nb_trans = ep_callback_para->sent_bytes;
    ba74:	8866      	ldrh	r6, [r4, #2]
	ptr_job->nb_trans += nb_trans;
    ba76:	68c3      	ldr	r3, [r0, #12]
    ba78:	469c      	mov	ip, r3
    ba7a:	4466      	add	r6, ip
    ba7c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    ba7e:	6884      	ldr	r4, [r0, #8]
    ba80:	42a6      	cmp	r6, r4
    ba82:	d039      	beq.n	baf8 <udd_ep_trans_in_next+0xb0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    ba84:	b2a4      	uxth	r4, r4
    ba86:	b2b1      	uxth	r1, r6
    ba88:	1a64      	subs	r4, r4, r1
    ba8a:	b2a4      	uxth	r4, r4
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    ba8c:	4b2c      	ldr	r3, [pc, #176]	; (bb40 <udd_ep_trans_in_next+0xf8>)
    ba8e:	429c      	cmp	r4, r3
    ba90:	d909      	bls.n	baa6 <udd_ep_trans_in_next+0x5e>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    ba92:	001c      	movs	r4, r3
    ba94:	4b2b      	ldr	r3, [pc, #172]	; (bb44 <udd_ep_trans_in_next+0xfc>)
    ba96:	58fb      	ldr	r3, [r7, r3]
    ba98:	9301      	str	r3, [sp, #4]
    ba9a:	4649      	mov	r1, r9
    ba9c:	0020      	movs	r0, r4
    ba9e:	4798      	blx	r3
    baa0:	b289      	uxth	r1, r1
    baa2:	1a64      	subs	r4, r4, r1
    baa4:	b2a4      	uxth	r4, r4
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    baa6:	7cab      	ldrb	r3, [r5, #18]
    baa8:	079b      	lsls	r3, r3, #30
    baaa:	d50a      	bpl.n	bac2 <udd_ep_trans_in_next+0x7a>
    baac:	4b26      	ldr	r3, [pc, #152]	; (bb48 <udd_ep_trans_in_next+0x100>)
    baae:	58fb      	ldr	r3, [r7, r3]
    bab0:	9301      	str	r3, [sp, #4]
    bab2:	4649      	mov	r1, r9
    bab4:	0020      	movs	r0, r4
    bab6:	4798      	blx	r3
    bab8:	b289      	uxth	r1, r1
    baba:	2900      	cmp	r1, #0
    babc:	d01a      	beq.n	baf4 <udd_ep_trans_in_next+0xac>
    babe:	2200      	movs	r2, #0
    bac0:	e000      	b.n	bac4 <udd_ep_trans_in_next+0x7c>
    bac2:	2200      	movs	r2, #0
    bac4:	0052      	lsls	r2, r2, #1
    bac6:	7cab      	ldrb	r3, [r5, #18]
    bac8:	2102      	movs	r1, #2
    baca:	438b      	bics	r3, r1
    bacc:	4313      	orrs	r3, r2
    bace:	74ab      	strb	r3, [r5, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    bad0:	686a      	ldr	r2, [r5, #4]
    bad2:	1992      	adds	r2, r2, r6
    bad4:	4b1d      	ldr	r3, [pc, #116]	; (bb4c <udd_ep_trans_in_next+0x104>)
    bad6:	58fb      	ldr	r3, [r7, r3]
    bad8:	9301      	str	r3, [sp, #4]
    bada:	0023      	movs	r3, r4
    badc:	4641      	mov	r1, r8
    bade:	9801      	ldr	r0, [sp, #4]
    bae0:	4c1b      	ldr	r4, [pc, #108]	; (bb50 <udd_ep_trans_in_next+0x108>)
    bae2:	593c      	ldr	r4, [r7, r4]
    bae4:	9401      	str	r4, [sp, #4]
    bae6:	47a0      	blx	r4
}
    bae8:	b002      	add	sp, #8
    baea:	bc1c      	pop	{r2, r3, r4}
    baec:	4690      	mov	r8, r2
    baee:	4699      	mov	r9, r3
    baf0:	46a2      	mov	sl, r4
    baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    baf4:	2201      	movs	r2, #1
    baf6:	e7e5      	b.n	bac4 <udd_ep_trans_in_next+0x7c>
	if (ptr_job->b_shortpacket) {
    baf8:	7c83      	ldrb	r3, [r0, #18]
    bafa:	079b      	lsls	r3, r3, #30
    bafc:	d40b      	bmi.n	bb16 <udd_ep_trans_in_next+0xce>
	ptr_job->busy = false;
    bafe:	7c83      	ldrb	r3, [r0, #18]
    bb00:	2201      	movs	r2, #1
    bb02:	4393      	bics	r3, r2
    bb04:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    bb06:	6803      	ldr	r3, [r0, #0]
    bb08:	2b00      	cmp	r3, #0
    bb0a:	d0ed      	beq.n	bae8 <udd_ep_trans_in_next+0xa0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    bb0c:	4652      	mov	r2, sl
    bb0e:	0031      	movs	r1, r6
    bb10:	2000      	movs	r0, #0
    bb12:	4798      	blx	r3
    bb14:	e7e8      	b.n	bae8 <udd_ep_trans_in_next+0xa0>
		ptr_job->b_shortpacket = false;
    bb16:	7c83      	ldrb	r3, [r0, #18]
    bb18:	2202      	movs	r2, #2
    bb1a:	4393      	bics	r3, r2
    bb1c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    bb1e:	6842      	ldr	r2, [r0, #4]
    bb20:	1992      	adds	r2, r2, r6
    bb22:	4b0a      	ldr	r3, [pc, #40]	; (bb4c <udd_ep_trans_in_next+0x104>)
    bb24:	58fb      	ldr	r3, [r7, r3]
    bb26:	9301      	str	r3, [sp, #4]
    bb28:	2300      	movs	r3, #0
    bb2a:	4641      	mov	r1, r8
    bb2c:	9801      	ldr	r0, [sp, #4]
    bb2e:	4c08      	ldr	r4, [pc, #32]	; (bb50 <udd_ep_trans_in_next+0x108>)
    bb30:	593c      	ldr	r4, [r7, r4]
    bb32:	9401      	str	r4, [sp, #4]
    bb34:	47a0      	blx	r4
		return;
    bb36:	e7d7      	b.n	bae8 <udd_ep_trans_in_next+0xa0>
    bb38:	00006f34 	.word	0x00006f34
    bb3c:	ffffff73 	.word	0xffffff73
    bb40:	00001fff 	.word	0x00001fff
    bb44:	000004c4 	.word	0x000004c4
    bb48:	000003f0 	.word	0x000003f0
    bb4c:	000000cc 	.word	0x000000cc
    bb50:	000004f8 	.word	0x000004f8

0000bb54 <udd_ep_trans_out_next>:
{
    bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb56:	46de      	mov	lr, fp
    bb58:	4657      	mov	r7, sl
    bb5a:	464e      	mov	r6, r9
    bb5c:	4645      	mov	r5, r8
    bb5e:	b5e0      	push	{r5, r6, r7, lr}
    bb60:	b083      	sub	sp, #12
    bb62:	0005      	movs	r5, r0
    bb64:	4b4b      	ldr	r3, [pc, #300]	; (bc94 <udd_ep_trans_out_next+0x140>)
    bb66:	447b      	add	r3, pc
    bb68:	4698      	mov	r8, r3
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    bb6a:	7986      	ldrb	r6, [r0, #6]
	ptr_job = udd_ep_get_job(ep);
    bb6c:	0030      	movs	r0, r6
    bb6e:	4b4a      	ldr	r3, [pc, #296]	; (bc98 <udd_ep_trans_out_next+0x144>)
    bb70:	447b      	add	r3, pc
    bb72:	4798      	blx	r3
    bb74:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    bb76:	270f      	movs	r7, #15
    bb78:	4037      	ands	r7, r6
    bb7a:	9700      	str	r7, [sp, #0]
	ep_size = ptr_job->ep_size;
    bb7c:	8a03      	ldrh	r3, [r0, #16]
    bb7e:	469a      	mov	sl, r3
	nb_trans = ep_callback_para->received_bytes;
    bb80:	882b      	ldrh	r3, [r5, #0]
    bb82:	4699      	mov	r9, r3
	if (ptr_job->b_use_out_cache_buffer) {
    bb84:	7c83      	ldrb	r3, [r0, #18]
    bb86:	075b      	lsls	r3, r3, #29
    bb88:	d41b      	bmi.n	bbc2 <udd_ep_trans_out_next+0x6e>
	ptr_job->nb_trans += nb_trans;
    bb8a:	68e3      	ldr	r3, [r4, #12]
    bb8c:	444b      	add	r3, r9
    bb8e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    bb90:	68a1      	ldr	r1, [r4, #8]
    bb92:	428b      	cmp	r3, r1
    bb94:	d900      	bls.n	bb98 <udd_ep_trans_out_next+0x44>
		ptr_job->nb_trans = ptr_job->buf_size;
    bb96:	60e1      	str	r1, [r4, #12]
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    bb98:	88ab      	ldrh	r3, [r5, #4]
    bb9a:	4599      	cmp	r9, r3
    bb9c:	d02e      	beq.n	bbfc <udd_ep_trans_out_next+0xa8>
	ptr_job->busy = false;
    bb9e:	7ca3      	ldrb	r3, [r4, #18]
    bba0:	2201      	movs	r2, #1
    bba2:	4393      	bics	r3, r2
    bba4:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    bba6:	6823      	ldr	r3, [r4, #0]
    bba8:	2b00      	cmp	r3, #0
    bbaa:	d003      	beq.n	bbb4 <udd_ep_trans_out_next+0x60>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    bbac:	68e1      	ldr	r1, [r4, #12]
    bbae:	0032      	movs	r2, r6
    bbb0:	2000      	movs	r0, #0
    bbb2:	4798      	blx	r3
}
    bbb4:	b003      	add	sp, #12
    bbb6:	bc3c      	pop	{r2, r3, r4, r5}
    bbb8:	4690      	mov	r8, r2
    bbba:	4699      	mov	r9, r3
    bbbc:	46a2      	mov	sl, r4
    bbbe:	46ab      	mov	fp, r5
    bbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    bbc2:	6843      	ldr	r3, [r0, #4]
    bbc4:	68c2      	ldr	r2, [r0, #12]
    bbc6:	4694      	mov	ip, r2
    bbc8:	4463      	add	r3, ip
    bbca:	001f      	movs	r7, r3
    bbcc:	9b00      	ldr	r3, [sp, #0]
    bbce:	3b01      	subs	r3, #1
    bbd0:	019b      	lsls	r3, r3, #6
    bbd2:	4a32      	ldr	r2, [pc, #200]	; (bc9c <udd_ep_trans_out_next+0x148>)
    bbd4:	4641      	mov	r1, r8
    bbd6:	588a      	ldr	r2, [r1, r2]
    bbd8:	9201      	str	r2, [sp, #4]
    bbda:	4693      	mov	fp, r2
    bbdc:	449b      	add	fp, r3
    bbde:	4b30      	ldr	r3, [pc, #192]	; (bca0 <udd_ep_trans_out_next+0x14c>)
    bbe0:	58ca      	ldr	r2, [r1, r3]
    bbe2:	9201      	str	r2, [sp, #4]
    bbe4:	4651      	mov	r1, sl
    bbe6:	6880      	ldr	r0, [r0, #8]
    bbe8:	4790      	blx	r2
    bbea:	000a      	movs	r2, r1
    bbec:	4659      	mov	r1, fp
    bbee:	0038      	movs	r0, r7
    bbf0:	4b2c      	ldr	r3, [pc, #176]	; (bca4 <udd_ep_trans_out_next+0x150>)
    bbf2:	4647      	mov	r7, r8
    bbf4:	58fb      	ldr	r3, [r7, r3]
    bbf6:	9301      	str	r3, [sp, #4]
    bbf8:	4798      	blx	r3
    bbfa:	e7c6      	b.n	bb8a <udd_ep_trans_out_next+0x36>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    bbfc:	68e3      	ldr	r3, [r4, #12]
    bbfe:	4699      	mov	r9, r3
    bc00:	4299      	cmp	r1, r3
    bc02:	d0cc      	beq.n	bb9e <udd_ep_trans_out_next+0x4a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    bc04:	b28d      	uxth	r5, r1
    bc06:	466a      	mov	r2, sp
    bc08:	8093      	strh	r3, [r2, #4]
    bc0a:	8891      	ldrh	r1, [r2, #4]
    bc0c:	1a6d      	subs	r5, r5, r1
    bc0e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    bc10:	4b25      	ldr	r3, [pc, #148]	; (bca8 <udd_ep_trans_out_next+0x154>)
    bc12:	429d      	cmp	r5, r3
    bc14:	d925      	bls.n	bc62 <udd_ep_trans_out_next+0x10e>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    bc16:	001d      	movs	r5, r3
    bc18:	4b24      	ldr	r3, [pc, #144]	; (bcac <udd_ep_trans_out_next+0x158>)
    bc1a:	4642      	mov	r2, r8
    bc1c:	58d3      	ldr	r3, [r2, r3]
    bc1e:	9301      	str	r3, [sp, #4]
    bc20:	4651      	mov	r1, sl
    bc22:	0028      	movs	r0, r5
    bc24:	4798      	blx	r3
    bc26:	b28b      	uxth	r3, r1
    bc28:	1aeb      	subs	r3, r5, r3
    bc2a:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    bc2c:	4553      	cmp	r3, sl
    bc2e:	d223      	bcs.n	bc78 <udd_ep_trans_out_next+0x124>
			ptr_job->b_use_out_cache_buffer = true;
    bc30:	7ca3      	ldrb	r3, [r4, #18]
    bc32:	2204      	movs	r2, #4
    bc34:	4313      	orrs	r3, r2
    bc36:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    bc38:	9800      	ldr	r0, [sp, #0]
    bc3a:	1e42      	subs	r2, r0, #1
    bc3c:	0192      	lsls	r2, r2, #6
    bc3e:	4b17      	ldr	r3, [pc, #92]	; (bc9c <udd_ep_trans_out_next+0x148>)
    bc40:	4641      	mov	r1, r8
    bc42:	58cb      	ldr	r3, [r1, r3]
    bc44:	9300      	str	r3, [sp, #0]
    bc46:	469c      	mov	ip, r3
    bc48:	4462      	add	r2, ip
    bc4a:	4b19      	ldr	r3, [pc, #100]	; (bcb0 <udd_ep_trans_out_next+0x15c>)
    bc4c:	58cb      	ldr	r3, [r1, r3]
    bc4e:	9300      	str	r3, [sp, #0]
    bc50:	4653      	mov	r3, sl
    bc52:	0001      	movs	r1, r0
    bc54:	9800      	ldr	r0, [sp, #0]
    bc56:	4c17      	ldr	r4, [pc, #92]	; (bcb4 <udd_ep_trans_out_next+0x160>)
    bc58:	4645      	mov	r5, r8
    bc5a:	592c      	ldr	r4, [r5, r4]
    bc5c:	9400      	str	r4, [sp, #0]
    bc5e:	47a0      	blx	r4
    bc60:	e7a8      	b.n	bbb4 <udd_ep_trans_out_next+0x60>
			next_trans -= next_trans % ep_size;
    bc62:	4b0f      	ldr	r3, [pc, #60]	; (bca0 <udd_ep_trans_out_next+0x14c>)
    bc64:	4642      	mov	r2, r8
    bc66:	58d3      	ldr	r3, [r2, r3]
    bc68:	9301      	str	r3, [sp, #4]
    bc6a:	4651      	mov	r1, sl
    bc6c:	0028      	movs	r0, r5
    bc6e:	4798      	blx	r3
    bc70:	b28b      	uxth	r3, r1
    bc72:	1aeb      	subs	r3, r5, r3
    bc74:	b29b      	uxth	r3, r3
    bc76:	e7d9      	b.n	bc2c <udd_ep_trans_out_next+0xd8>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    bc78:	6862      	ldr	r2, [r4, #4]
    bc7a:	444a      	add	r2, r9
    bc7c:	490c      	ldr	r1, [pc, #48]	; (bcb0 <udd_ep_trans_out_next+0x15c>)
    bc7e:	4640      	mov	r0, r8
    bc80:	5841      	ldr	r1, [r0, r1]
    bc82:	9101      	str	r1, [sp, #4]
    bc84:	9900      	ldr	r1, [sp, #0]
    bc86:	9801      	ldr	r0, [sp, #4]
    bc88:	4c0a      	ldr	r4, [pc, #40]	; (bcb4 <udd_ep_trans_out_next+0x160>)
    bc8a:	4645      	mov	r5, r8
    bc8c:	592c      	ldr	r4, [r5, r4]
    bc8e:	9400      	str	r4, [sp, #0]
    bc90:	47a0      	blx	r4
    bc92:	e78f      	b.n	bbb4 <udd_ep_trans_out_next+0x60>
    bc94:	00006e26 	.word	0x00006e26
    bc98:	fffffe65 	.word	0xfffffe65
    bc9c:	00000034 	.word	0x00000034
    bca0:	000003f0 	.word	0x000003f0
    bca4:	000000ec 	.word	0x000000ec
    bca8:	00001fff 	.word	0x00001fff
    bcac:	000004c4 	.word	0x000004c4
    bcb0:	000000cc 	.word	0x000000cc
    bcb4:	00000214 	.word	0x00000214

0000bcb8 <udd_ep_transfer_process>:
{
    bcb8:	b510      	push	{r4, lr}
	if (ep & USB_EP_DIR_IN) {
    bcba:	2306      	movs	r3, #6
    bcbc:	56cb      	ldrsb	r3, [r1, r3]
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	db04      	blt.n	bccc <udd_ep_transfer_process+0x14>
		udd_ep_trans_out_next(pointer);
    bcc2:	0008      	movs	r0, r1
    bcc4:	4b04      	ldr	r3, [pc, #16]	; (bcd8 <udd_ep_transfer_process+0x20>)
    bcc6:	447b      	add	r3, pc
    bcc8:	4798      	blx	r3
}
    bcca:	bd10      	pop	{r4, pc}
		udd_ep_trans_in_next(pointer);
    bccc:	0008      	movs	r0, r1
    bcce:	4b03      	ldr	r3, [pc, #12]	; (bcdc <udd_ep_transfer_process+0x24>)
    bcd0:	447b      	add	r3, pc
    bcd2:	4798      	blx	r3
    bcd4:	e7f9      	b.n	bcca <udd_ep_transfer_process+0x12>
    bcd6:	46c0      	nop			; (mov r8, r8)
    bcd8:	fffffe8b 	.word	0xfffffe8b
    bcdc:	fffffd75 	.word	0xfffffd75

0000bce0 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    bce0:	b500      	push	{lr}
    bce2:	b083      	sub	sp, #12
    bce4:	4a0c      	ldr	r2, [pc, #48]	; (bd18 <udd_ctrl_overflow+0x38>)
    bce6:	447a      	add	r2, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    bce8:	4b0c      	ldr	r3, [pc, #48]	; (bd1c <udd_ctrl_overflow+0x3c>)
    bcea:	447b      	add	r3, pc
    bcec:	781b      	ldrb	r3, [r3, #0]
    bcee:	2b02      	cmp	r3, #2
    bcf0:	d003      	beq.n	bcfa <udd_ctrl_overflow+0x1a>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    bcf2:	2b03      	cmp	r3, #3
    bcf4:	d006      	beq.n	bd04 <udd_ctrl_overflow+0x24>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    bcf6:	b003      	add	sp, #12
    bcf8:	bd00      	pop	{pc}
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    bcfa:	2204      	movs	r2, #4
    bcfc:	4b08      	ldr	r3, [pc, #32]	; (bd20 <udd_ctrl_overflow+0x40>)
    bcfe:	447b      	add	r3, pc
    bd00:	701a      	strb	r2, [r3, #0]
    bd02:	e7f8      	b.n	bcf6 <udd_ctrl_overflow+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    bd04:	7981      	ldrb	r1, [r0, #6]
    bd06:	4b07      	ldr	r3, [pc, #28]	; (bd24 <udd_ctrl_overflow+0x44>)
    bd08:	58d3      	ldr	r3, [r2, r3]
    bd0a:	9301      	str	r3, [sp, #4]
    bd0c:	0018      	movs	r0, r3
    bd0e:	4b06      	ldr	r3, [pc, #24]	; (bd28 <udd_ctrl_overflow+0x48>)
    bd10:	58d3      	ldr	r3, [r2, r3]
    bd12:	9301      	str	r3, [sp, #4]
    bd14:	4798      	blx	r3
}
    bd16:	e7ee      	b.n	bcf6 <udd_ctrl_overflow+0x16>
    bd18:	00006ca6 	.word	0x00006ca6
    bd1c:	1fff4e3c 	.word	0x1fff4e3c
    bd20:	1fff4e28 	.word	0x1fff4e28
    bd24:	000000cc 	.word	0x000000cc
    bd28:	000003f8 	.word	0x000003f8

0000bd2c <udd_ctrl_stall_data>:
{
    bd2c:	b510      	push	{r4, lr}
    bd2e:	b082      	sub	sp, #8
    bd30:	4c0b      	ldr	r4, [pc, #44]	; (bd60 <udd_ctrl_stall_data+0x34>)
    bd32:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    bd34:	2205      	movs	r2, #5
    bd36:	4b0b      	ldr	r3, [pc, #44]	; (bd64 <udd_ctrl_stall_data+0x38>)
    bd38:	447b      	add	r3, pc
    bd3a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    bd3c:	4b0a      	ldr	r3, [pc, #40]	; (bd68 <udd_ctrl_stall_data+0x3c>)
    bd3e:	58e3      	ldr	r3, [r4, r3]
    bd40:	9300      	str	r3, [sp, #0]
    bd42:	2180      	movs	r1, #128	; 0x80
    bd44:	0018      	movs	r0, r3
    bd46:	4b09      	ldr	r3, [pc, #36]	; (bd6c <udd_ctrl_stall_data+0x40>)
    bd48:	58e3      	ldr	r3, [r4, r3]
    bd4a:	9301      	str	r3, [sp, #4]
    bd4c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    bd4e:	2100      	movs	r1, #0
    bd50:	9800      	ldr	r0, [sp, #0]
    bd52:	4b07      	ldr	r3, [pc, #28]	; (bd70 <udd_ctrl_stall_data+0x44>)
    bd54:	58e3      	ldr	r3, [r4, r3]
    bd56:	9300      	str	r3, [sp, #0]
    bd58:	4798      	blx	r3
}
    bd5a:	b002      	add	sp, #8
    bd5c:	bd10      	pop	{r4, pc}
    bd5e:	46c0      	nop			; (mov r8, r8)
    bd60:	00006c5a 	.word	0x00006c5a
    bd64:	1fff4dee 	.word	0x1fff4dee
    bd68:	000000cc 	.word	0x000000cc
    bd6c:	000003f8 	.word	0x000003f8
    bd70:	00000368 	.word	0x00000368

0000bd74 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    bd74:	b530      	push	{r4, r5, lr}
    bd76:	b083      	sub	sp, #12
    bd78:	4c0c      	ldr	r4, [pc, #48]	; (bdac <_usb_device_lpm_suspend+0x38>)
    bd7a:	447c      	add	r4, pc
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    bd7c:	4b0c      	ldr	r3, [pc, #48]	; (bdb0 <_usb_device_lpm_suspend+0x3c>)
    bd7e:	58e3      	ldr	r3, [r4, r3]
    bd80:	9301      	str	r3, [sp, #4]
    bd82:	2106      	movs	r1, #6
    bd84:	0018      	movs	r0, r3
    bd86:	4b0b      	ldr	r3, [pc, #44]	; (bdb4 <_usb_device_lpm_suspend+0x40>)
    bd88:	58e5      	ldr	r5, [r4, r3]
    bd8a:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    bd8c:	2104      	movs	r1, #4
    bd8e:	9801      	ldr	r0, [sp, #4]
    bd90:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    bd92:	2102      	movs	r1, #2
    bd94:	9801      	ldr	r0, [sp, #4]
    bd96:	4b08      	ldr	r3, [pc, #32]	; (bdb8 <_usb_device_lpm_suspend+0x44>)
    bd98:	58e3      	ldr	r3, [r4, r3]
    bd9a:	9301      	str	r3, [sp, #4]
    bd9c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    bd9e:	2002      	movs	r0, #2
    bda0:	4b06      	ldr	r3, [pc, #24]	; (bdbc <_usb_device_lpm_suspend+0x48>)
    bda2:	447b      	add	r3, pc
    bda4:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    bda6:	b003      	add	sp, #12
    bda8:	bd30      	pop	{r4, r5, pc}
    bdaa:	46c0      	nop			; (mov r8, r8)
    bdac:	00006c12 	.word	0x00006c12
    bdb0:	000000cc 	.word	0x000000cc
    bdb4:	000000a0 	.word	0x000000a0
    bdb8:	0000023c 	.word	0x0000023c
    bdbc:	fffffb33 	.word	0xfffffb33

0000bdc0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    bdc0:	b530      	push	{r4, r5, lr}
    bdc2:	b083      	sub	sp, #12
    bdc4:	4c17      	ldr	r4, [pc, #92]	; (be24 <_usb_on_wakeup+0x64>)
    bdc6:	447c      	add	r4, pc
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    bdc8:	4b17      	ldr	r3, [pc, #92]	; (be28 <_usb_on_wakeup+0x68>)
    bdca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    bdcc:	069b      	lsls	r3, r3, #26
    bdce:	d424      	bmi.n	be1a <_usb_on_wakeup+0x5a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    bdd0:	4b15      	ldr	r3, [pc, #84]	; (be28 <_usb_on_wakeup+0x68>)
    bdd2:	68da      	ldr	r2, [r3, #12]
    bdd4:	23d0      	movs	r3, #208	; 0xd0
    bdd6:	4013      	ands	r3, r2
    bdd8:	2bd0      	cmp	r3, #208	; 0xd0
    bdda:	d1f9      	bne.n	bdd0 <_usb_on_wakeup+0x10>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    bddc:	4b13      	ldr	r3, [pc, #76]	; (be2c <_usb_on_wakeup+0x6c>)
    bdde:	58e3      	ldr	r3, [r4, r3]
    bde0:	9300      	str	r3, [sp, #0]
    bde2:	2102      	movs	r1, #2
    bde4:	0018      	movs	r0, r3
    bde6:	4b12      	ldr	r3, [pc, #72]	; (be30 <_usb_on_wakeup+0x70>)
    bde8:	58e3      	ldr	r3, [r4, r3]
    bdea:	9301      	str	r3, [sp, #4]
    bdec:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    bdee:	2104      	movs	r1, #4
    bdf0:	9800      	ldr	r0, [sp, #0]
    bdf2:	4b10      	ldr	r3, [pc, #64]	; (be34 <_usb_on_wakeup+0x74>)
    bdf4:	58e5      	ldr	r5, [r4, r3]
    bdf6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    bdf8:	4a0f      	ldr	r2, [pc, #60]	; (be38 <_usb_on_wakeup+0x78>)
    bdfa:	447a      	add	r2, pc
    bdfc:	2106      	movs	r1, #6
    bdfe:	9800      	ldr	r0, [sp, #0]
    be00:	4b0e      	ldr	r3, [pc, #56]	; (be3c <_usb_on_wakeup+0x7c>)
    be02:	58e3      	ldr	r3, [r4, r3]
    be04:	9301      	str	r3, [sp, #4]
    be06:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    be08:	2106      	movs	r1, #6
    be0a:	9800      	ldr	r0, [sp, #0]
    be0c:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    be0e:	2003      	movs	r0, #3
    be10:	4b0b      	ldr	r3, [pc, #44]	; (be40 <_usb_on_wakeup+0x80>)
    be12:	447b      	add	r3, pc
    be14:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    be16:	b003      	add	sp, #12
    be18:	bd30      	pop	{r4, r5, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    be1a:	4b03      	ldr	r3, [pc, #12]	; (be28 <_usb_on_wakeup+0x68>)
    be1c:	68db      	ldr	r3, [r3, #12]
    be1e:	06db      	lsls	r3, r3, #27
    be20:	d5fb      	bpl.n	be1a <_usb_on_wakeup+0x5a>
    be22:	e7db      	b.n	bddc <_usb_on_wakeup+0x1c>
    be24:	00006bc6 	.word	0x00006bc6
    be28:	40000800 	.word	0x40000800
    be2c:	000000cc 	.word	0x000000cc
    be30:	000000a0 	.word	0x000000a0
    be34:	0000023c 	.word	0x0000023c
    be38:	ffffff77 	.word	0xffffff77
    be3c:	0000007c 	.word	0x0000007c
    be40:	fffffac3 	.word	0xfffffac3

0000be44 <_usb_on_suspend>:
{
    be44:	b510      	push	{r4, lr}
    be46:	b082      	sub	sp, #8
    be48:	4c0b      	ldr	r4, [pc, #44]	; (be78 <_usb_on_suspend+0x34>)
    be4a:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    be4c:	4b0b      	ldr	r3, [pc, #44]	; (be7c <_usb_on_suspend+0x38>)
    be4e:	58e3      	ldr	r3, [r4, r3]
    be50:	9300      	str	r3, [sp, #0]
    be52:	2104      	movs	r1, #4
    be54:	0018      	movs	r0, r3
    be56:	4b0a      	ldr	r3, [pc, #40]	; (be80 <_usb_on_suspend+0x3c>)
    be58:	58e3      	ldr	r3, [r4, r3]
    be5a:	9301      	str	r3, [sp, #4]
    be5c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    be5e:	2102      	movs	r1, #2
    be60:	9800      	ldr	r0, [sp, #0]
    be62:	4b08      	ldr	r3, [pc, #32]	; (be84 <_usb_on_suspend+0x40>)
    be64:	58e3      	ldr	r3, [r4, r3]
    be66:	9300      	str	r3, [sp, #0]
    be68:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    be6a:	2001      	movs	r0, #1
    be6c:	4b06      	ldr	r3, [pc, #24]	; (be88 <_usb_on_suspend+0x44>)
    be6e:	447b      	add	r3, pc
    be70:	4798      	blx	r3
}
    be72:	b002      	add	sp, #8
    be74:	bd10      	pop	{r4, pc}
    be76:	46c0      	nop			; (mov r8, r8)
    be78:	00006b42 	.word	0x00006b42
    be7c:	000000cc 	.word	0x000000cc
    be80:	000000a0 	.word	0x000000a0
    be84:	0000023c 	.word	0x0000023c
    be88:	fffffa67 	.word	0xfffffa67

0000be8c <udd_ctrl_ep_enable>:
{
    be8c:	b570      	push	{r4, r5, r6, lr}
    be8e:	b084      	sub	sp, #16
    be90:	0004      	movs	r4, r0
    be92:	4d24      	ldr	r5, [pc, #144]	; (bf24 <udd_ctrl_ep_enable+0x98>)
    be94:	447d      	add	r5, pc
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    be96:	ae03      	add	r6, sp, #12
    be98:	0030      	movs	r0, r6
    be9a:	4b23      	ldr	r3, [pc, #140]	; (bf28 <udd_ctrl_ep_enable+0x9c>)
    be9c:	58eb      	ldr	r3, [r5, r3]
    be9e:	9301      	str	r3, [sp, #4]
    bea0:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    bea2:	2303      	movs	r3, #3
    bea4:	7073      	strb	r3, [r6, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    bea6:	0031      	movs	r1, r6
    bea8:	0020      	movs	r0, r4
    beaa:	4b20      	ldr	r3, [pc, #128]	; (bf2c <udd_ctrl_ep_enable+0xa0>)
    beac:	58eb      	ldr	r3, [r5, r3]
    beae:	9301      	str	r3, [sp, #4]
    beb0:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    beb2:	4b1f      	ldr	r3, [pc, #124]	; (bf30 <udd_ctrl_ep_enable+0xa4>)
    beb4:	58eb      	ldr	r3, [r5, r3]
    beb6:	9301      	str	r3, [sp, #4]
    beb8:	0019      	movs	r1, r3
    beba:	0020      	movs	r0, r4
    bebc:	4b1d      	ldr	r3, [pc, #116]	; (bf34 <udd_ctrl_ep_enable+0xa8>)
    bebe:	58eb      	ldr	r3, [r5, r3]
    bec0:	9301      	str	r3, [sp, #4]
    bec2:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    bec4:	4b1c      	ldr	r3, [pc, #112]	; (bf38 <udd_ctrl_ep_enable+0xac>)
    bec6:	447b      	add	r3, pc
    bec8:	2202      	movs	r2, #2
    beca:	2100      	movs	r1, #0
    becc:	0020      	movs	r0, r4
    bece:	4e1b      	ldr	r6, [pc, #108]	; (bf3c <udd_ctrl_ep_enable+0xb0>)
    bed0:	59ae      	ldr	r6, [r5, r6]
    bed2:	47b0      	blx	r6
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    bed4:	4b1a      	ldr	r3, [pc, #104]	; (bf40 <udd_ctrl_ep_enable+0xb4>)
    bed6:	447b      	add	r3, pc
    bed8:	2200      	movs	r2, #0
    beda:	2100      	movs	r1, #0
    bedc:	0020      	movs	r0, r4
    bede:	47b0      	blx	r6
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    bee0:	4b18      	ldr	r3, [pc, #96]	; (bf44 <udd_ctrl_ep_enable+0xb8>)
    bee2:	447b      	add	r3, pc
    bee4:	2201      	movs	r2, #1
    bee6:	2100      	movs	r1, #0
    bee8:	0020      	movs	r0, r4
    beea:	47b0      	blx	r6
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    beec:	2202      	movs	r2, #2
    beee:	2100      	movs	r1, #0
    bef0:	0020      	movs	r0, r4
    bef2:	4b15      	ldr	r3, [pc, #84]	; (bf48 <udd_ctrl_ep_enable+0xbc>)
    bef4:	58ed      	ldr	r5, [r5, r3]
    bef6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    bef8:	2200      	movs	r2, #0
    befa:	2100      	movs	r1, #0
    befc:	0020      	movs	r0, r4
    befe:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    bf00:	2201      	movs	r2, #1
    bf02:	2100      	movs	r1, #0
    bf04:	0020      	movs	r0, r4
    bf06:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    bf08:	6821      	ldr	r1, [r4, #0]
    bf0a:	890b      	ldrh	r3, [r1, #8]
    bf0c:	4a0f      	ldr	r2, [pc, #60]	; (bf4c <udd_ctrl_ep_enable+0xc0>)
    bf0e:	401a      	ands	r2, r3
    bf10:	2380      	movs	r3, #128	; 0x80
    bf12:	00db      	lsls	r3, r3, #3
    bf14:	4313      	orrs	r3, r2
    bf16:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    bf18:	2200      	movs	r2, #0
    bf1a:	4b0d      	ldr	r3, [pc, #52]	; (bf50 <udd_ctrl_ep_enable+0xc4>)
    bf1c:	447b      	add	r3, pc
    bf1e:	701a      	strb	r2, [r3, #0]
}
    bf20:	b004      	add	sp, #16
    bf22:	bd70      	pop	{r4, r5, r6, pc}
    bf24:	00006af8 	.word	0x00006af8
    bf28:	00000194 	.word	0x00000194
    bf2c:	000000c8 	.word	0x000000c8
    bf30:	00000480 	.word	0x00000480
    bf34:	0000012c 	.word	0x0000012c
    bf38:	0000028b 	.word	0x0000028b
    bf3c:	00000220 	.word	0x00000220
    bf40:	000007bf 	.word	0x000007bf
    bf44:	00000147 	.word	0x00000147
    bf48:	0000045c 	.word	0x0000045c
    bf4c:	fffff3ff 	.word	0xfffff3ff
    bf50:	1fff4c0a 	.word	0x1fff4c0a

0000bf54 <_usb_on_bus_reset>:
{
    bf54:	b510      	push	{r4, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	0004      	movs	r4, r0
    bf5a:	4b07      	ldr	r3, [pc, #28]	; (bf78 <_usb_on_bus_reset+0x24>)
    bf5c:	447b      	add	r3, pc
	udc_reset();
    bf5e:	4a07      	ldr	r2, [pc, #28]	; (bf7c <_usb_on_bus_reset+0x28>)
    bf60:	589b      	ldr	r3, [r3, r2]
    bf62:	9301      	str	r3, [sp, #4]
    bf64:	4798      	blx	r3
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    bf66:	2380      	movs	r3, #128	; 0x80
    bf68:	6822      	ldr	r2, [r4, #0]
    bf6a:	7293      	strb	r3, [r2, #10]
	udd_ctrl_ep_enable(module_inst);
    bf6c:	0020      	movs	r0, r4
    bf6e:	4b04      	ldr	r3, [pc, #16]	; (bf80 <_usb_on_bus_reset+0x2c>)
    bf70:	447b      	add	r3, pc
    bf72:	4798      	blx	r3
}
    bf74:	b002      	add	sp, #8
    bf76:	bd10      	pop	{r4, pc}
    bf78:	00006a30 	.word	0x00006a30
    bf7c:	000000fc 	.word	0x000000fc
    bf80:	ffffff19 	.word	0xffffff19

0000bf84 <udd_ctrl_send_zlp_in>:
{
    bf84:	b530      	push	{r4, r5, lr}
    bf86:	b083      	sub	sp, #12
    bf88:	4c0e      	ldr	r4, [pc, #56]	; (bfc4 <udd_ctrl_send_zlp_in+0x40>)
    bf8a:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    bf8c:	2203      	movs	r2, #3
    bf8e:	4b0e      	ldr	r3, [pc, #56]	; (bfc8 <udd_ctrl_send_zlp_in+0x44>)
    bf90:	447b      	add	r3, pc
    bf92:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    bf94:	4b0d      	ldr	r3, [pc, #52]	; (bfcc <udd_ctrl_send_zlp_in+0x48>)
    bf96:	58e3      	ldr	r3, [r4, r3]
    bf98:	9301      	str	r3, [sp, #4]
    bf9a:	4b0d      	ldr	r3, [pc, #52]	; (bfd0 <udd_ctrl_send_zlp_in+0x4c>)
    bf9c:	58e3      	ldr	r3, [r4, r3]
    bf9e:	9300      	str	r3, [sp, #0]
    bfa0:	9901      	ldr	r1, [sp, #4]
    bfa2:	0018      	movs	r0, r3
    bfa4:	4b0b      	ldr	r3, [pc, #44]	; (bfd4 <udd_ctrl_send_zlp_in+0x50>)
    bfa6:	58e3      	ldr	r3, [r4, r3]
    bfa8:	9301      	str	r3, [sp, #4]
    bfaa:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    bfac:	4b0a      	ldr	r3, [pc, #40]	; (bfd8 <udd_ctrl_send_zlp_in+0x54>)
    bfae:	58e3      	ldr	r3, [r4, r3]
    bfb0:	689a      	ldr	r2, [r3, #8]
    bfb2:	2300      	movs	r3, #0
    bfb4:	2100      	movs	r1, #0
    bfb6:	9800      	ldr	r0, [sp, #0]
    bfb8:	4d08      	ldr	r5, [pc, #32]	; (bfdc <udd_ctrl_send_zlp_in+0x58>)
    bfba:	5964      	ldr	r4, [r4, r5]
    bfbc:	9400      	str	r4, [sp, #0]
    bfbe:	47a0      	blx	r4
}
    bfc0:	b003      	add	sp, #12
    bfc2:	bd30      	pop	{r4, r5, pc}
    bfc4:	00006a02 	.word	0x00006a02
    bfc8:	1fff4b96 	.word	0x1fff4b96
    bfcc:	00000480 	.word	0x00000480
    bfd0:	000000cc 	.word	0x000000cc
    bfd4:	0000012c 	.word	0x0000012c
    bfd8:	00000308 	.word	0x00000308
    bfdc:	000004f8 	.word	0x000004f8

0000bfe0 <udd_ctrl_underflow>:
{
    bfe0:	b500      	push	{lr}
    bfe2:	b083      	sub	sp, #12
    bfe4:	4a0c      	ldr	r2, [pc, #48]	; (c018 <udd_ctrl_underflow+0x38>)
    bfe6:	447a      	add	r2, pc
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    bfe8:	4b0c      	ldr	r3, [pc, #48]	; (c01c <udd_ctrl_underflow+0x3c>)
    bfea:	447b      	add	r3, pc
    bfec:	781b      	ldrb	r3, [r3, #0]
    bfee:	2b01      	cmp	r3, #1
    bff0:	d003      	beq.n	bffa <udd_ctrl_underflow+0x1a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    bff2:	2b04      	cmp	r3, #4
    bff4:	d005      	beq.n	c002 <udd_ctrl_underflow+0x22>
}
    bff6:	b003      	add	sp, #12
    bff8:	bd00      	pop	{pc}
		udd_ctrl_send_zlp_in();
    bffa:	4b09      	ldr	r3, [pc, #36]	; (c020 <udd_ctrl_underflow+0x40>)
    bffc:	447b      	add	r3, pc
    bffe:	4798      	blx	r3
    c000:	e7f9      	b.n	bff6 <udd_ctrl_underflow+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    c002:	7981      	ldrb	r1, [r0, #6]
    c004:	4b07      	ldr	r3, [pc, #28]	; (c024 <udd_ctrl_underflow+0x44>)
    c006:	58d3      	ldr	r3, [r2, r3]
    c008:	9301      	str	r3, [sp, #4]
    c00a:	0018      	movs	r0, r3
    c00c:	4b06      	ldr	r3, [pc, #24]	; (c028 <udd_ctrl_underflow+0x48>)
    c00e:	58d3      	ldr	r3, [r2, r3]
    c010:	9301      	str	r3, [sp, #4]
    c012:	4798      	blx	r3
}
    c014:	e7ef      	b.n	bff6 <udd_ctrl_underflow+0x16>
    c016:	46c0      	nop			; (mov r8, r8)
    c018:	000069a6 	.word	0x000069a6
    c01c:	1fff4b3c 	.word	0x1fff4b3c
    c020:	ffffff85 	.word	0xffffff85
    c024:	000000cc 	.word	0x000000cc
    c028:	000003f8 	.word	0x000003f8

0000c02c <_usb_ep0_on_tansfer_fail>:
{
    c02c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    c02e:	2306      	movs	r3, #6
    c030:	56cb      	ldrsb	r3, [r1, r3]
    c032:	2b00      	cmp	r3, #0
    c034:	db04      	blt.n	c040 <_usb_ep0_on_tansfer_fail+0x14>
		udd_ctrl_overflow(pointer);
    c036:	0008      	movs	r0, r1
    c038:	4b04      	ldr	r3, [pc, #16]	; (c04c <_usb_ep0_on_tansfer_fail+0x20>)
    c03a:	447b      	add	r3, pc
    c03c:	4798      	blx	r3
}
    c03e:	bd10      	pop	{r4, pc}
		udd_ctrl_underflow(pointer);
    c040:	0008      	movs	r0, r1
    c042:	4b03      	ldr	r3, [pc, #12]	; (c050 <_usb_ep0_on_tansfer_fail+0x24>)
    c044:	447b      	add	r3, pc
    c046:	4798      	blx	r3
    c048:	e7f9      	b.n	c03e <_usb_ep0_on_tansfer_fail+0x12>
    c04a:	46c0      	nop			; (mov r8, r8)
    c04c:	fffffca3 	.word	0xfffffca3
    c050:	ffffff99 	.word	0xffffff99

0000c054 <udd_ctrl_in_sent>:
{
    c054:	b5f0      	push	{r4, r5, r6, r7, lr}
    c056:	b083      	sub	sp, #12
    c058:	4d30      	ldr	r5, [pc, #192]	; (c11c <udd_ctrl_in_sent+0xc8>)
    c05a:	447d      	add	r5, pc
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    c05c:	4b30      	ldr	r3, [pc, #192]	; (c120 <udd_ctrl_in_sent+0xcc>)
    c05e:	58eb      	ldr	r3, [r5, r3]
    c060:	9300      	str	r3, [sp, #0]
    c062:	899c      	ldrh	r4, [r3, #12]
    c064:	4b2f      	ldr	r3, [pc, #188]	; (c124 <udd_ctrl_in_sent+0xd0>)
    c066:	447b      	add	r3, pc
    c068:	881b      	ldrh	r3, [r3, #0]
    c06a:	1ae4      	subs	r4, r4, r3
    c06c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    c06e:	2c00      	cmp	r4, #0
    c070:	d120      	bne.n	c0b4 <udd_ctrl_in_sent+0x60>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    c072:	4a2d      	ldr	r2, [pc, #180]	; (c128 <udd_ctrl_in_sent+0xd4>)
    c074:	447a      	add	r2, pc
    c076:	8811      	ldrh	r1, [r2, #0]
    c078:	185b      	adds	r3, r3, r1
    c07a:	b29b      	uxth	r3, r3
    c07c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    c07e:	4a28      	ldr	r2, [pc, #160]	; (c120 <udd_ctrl_in_sent+0xcc>)
    c080:	58aa      	ldr	r2, [r5, r2]
    c082:	9200      	str	r2, [sp, #0]
    c084:	88d2      	ldrh	r2, [r2, #6]
    c086:	4293      	cmp	r3, r2
    c088:	d031      	beq.n	c0ee <udd_ctrl_in_sent+0x9a>
    c08a:	4b28      	ldr	r3, [pc, #160]	; (c12c <udd_ctrl_in_sent+0xd8>)
    c08c:	447b      	add	r3, pc
    c08e:	781b      	ldrb	r3, [r3, #0]
    c090:	2b00      	cmp	r3, #0
    c092:	d12c      	bne.n	c0ee <udd_ctrl_in_sent+0x9a>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    c094:	4b22      	ldr	r3, [pc, #136]	; (c120 <udd_ctrl_in_sent+0xcc>)
    c096:	58eb      	ldr	r3, [r5, r3]
    c098:	695b      	ldr	r3, [r3, #20]
    c09a:	2b00      	cmp	r3, #0
    c09c:	d00a      	beq.n	c0b4 <udd_ctrl_in_sent+0x60>
    c09e:	4798      	blx	r3
    c0a0:	2800      	cmp	r0, #0
    c0a2:	d007      	beq.n	c0b4 <udd_ctrl_in_sent+0x60>
			udd_ctrl_payload_nb_trans = 0;
    c0a4:	2200      	movs	r2, #0
    c0a6:	4b22      	ldr	r3, [pc, #136]	; (c130 <udd_ctrl_in_sent+0xdc>)
    c0a8:	447b      	add	r3, pc
    c0aa:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    c0ac:	4b1c      	ldr	r3, [pc, #112]	; (c120 <udd_ctrl_in_sent+0xcc>)
    c0ae:	58eb      	ldr	r3, [r5, r3]
    c0b0:	9300      	str	r3, [sp, #0]
    c0b2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    c0b4:	2c3f      	cmp	r4, #63	; 0x3f
    c0b6:	d92b      	bls.n	c110 <udd_ctrl_in_sent+0xbc>
		b_shortpacket = false;
    c0b8:	2200      	movs	r2, #0
    c0ba:	4b1e      	ldr	r3, [pc, #120]	; (c134 <udd_ctrl_in_sent+0xe0>)
    c0bc:	447b      	add	r3, pc
    c0be:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    c0c0:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    c0c2:	4b17      	ldr	r3, [pc, #92]	; (c120 <udd_ctrl_in_sent+0xcc>)
    c0c4:	58eb      	ldr	r3, [r5, r3]
    c0c6:	689a      	ldr	r2, [r3, #8]
    c0c8:	4e1b      	ldr	r6, [pc, #108]	; (c138 <udd_ctrl_in_sent+0xe4>)
    c0ca:	447e      	add	r6, pc
    c0cc:	8833      	ldrh	r3, [r6, #0]
    c0ce:	18d2      	adds	r2, r2, r3
    c0d0:	4b1a      	ldr	r3, [pc, #104]	; (c13c <udd_ctrl_in_sent+0xe8>)
    c0d2:	58eb      	ldr	r3, [r5, r3]
    c0d4:	9300      	str	r3, [sp, #0]
    c0d6:	0023      	movs	r3, r4
    c0d8:	2100      	movs	r1, #0
    c0da:	9800      	ldr	r0, [sp, #0]
    c0dc:	4f18      	ldr	r7, [pc, #96]	; (c140 <udd_ctrl_in_sent+0xec>)
    c0de:	59ed      	ldr	r5, [r5, r7]
    c0e0:	9500      	str	r5, [sp, #0]
    c0e2:	47a8      	blx	r5
	udd_ctrl_payload_nb_trans += nb_remain;
    c0e4:	8833      	ldrh	r3, [r6, #0]
    c0e6:	18e4      	adds	r4, r4, r3
    c0e8:	8034      	strh	r4, [r6, #0]
}
    c0ea:	b003      	add	sp, #12
    c0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    c0ee:	2204      	movs	r2, #4
    c0f0:	4b14      	ldr	r3, [pc, #80]	; (c144 <udd_ctrl_in_sent+0xf0>)
    c0f2:	447b      	add	r3, pc
    c0f4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    c0f6:	4b14      	ldr	r3, [pc, #80]	; (c148 <udd_ctrl_in_sent+0xf4>)
    c0f8:	58eb      	ldr	r3, [r5, r3]
    c0fa:	9300      	str	r3, [sp, #0]
    c0fc:	4b0f      	ldr	r3, [pc, #60]	; (c13c <udd_ctrl_in_sent+0xe8>)
    c0fe:	58eb      	ldr	r3, [r5, r3]
    c100:	9301      	str	r3, [sp, #4]
    c102:	9900      	ldr	r1, [sp, #0]
    c104:	0018      	movs	r0, r3
    c106:	4b11      	ldr	r3, [pc, #68]	; (c14c <udd_ctrl_in_sent+0xf8>)
    c108:	58eb      	ldr	r3, [r5, r3]
    c10a:	9300      	str	r3, [sp, #0]
    c10c:	4798      	blx	r3
			return;
    c10e:	e7ec      	b.n	c0ea <udd_ctrl_in_sent+0x96>
		b_shortpacket = true;
    c110:	2201      	movs	r2, #1
    c112:	4b0f      	ldr	r3, [pc, #60]	; (c150 <udd_ctrl_in_sent+0xfc>)
    c114:	447b      	add	r3, pc
    c116:	701a      	strb	r2, [r3, #0]
    c118:	e7d3      	b.n	c0c2 <udd_ctrl_in_sent+0x6e>
    c11a:	46c0      	nop			; (mov r8, r8)
    c11c:	00006932 	.word	0x00006932
    c120:	00000308 	.word	0x00000308
    c124:	1fff4abc 	.word	0x1fff4abc
    c128:	1fff4ab0 	.word	0x1fff4ab0
    c12c:	1fff4a94 	.word	0x1fff4a94
    c130:	1fff4a7a 	.word	0x1fff4a7a
    c134:	1fff4a64 	.word	0x1fff4a64
    c138:	1fff4a58 	.word	0x1fff4a58
    c13c:	000000cc 	.word	0x000000cc
    c140:	000004f8 	.word	0x000004f8
    c144:	1fff4a34 	.word	0x1fff4a34
    c148:	00000480 	.word	0x00000480
    c14c:	0000012c 	.word	0x0000012c
    c150:	1fff4a0c 	.word	0x1fff4a0c

0000c154 <_usb_ep0_on_setup>:
{
    c154:	b530      	push	{r4, r5, lr}
    c156:	b083      	sub	sp, #12
    c158:	000d      	movs	r5, r1
    c15a:	4c37      	ldr	r4, [pc, #220]	; (c238 <_usb_ep0_on_setup+0xe4>)
    c15c:	447c      	add	r4, pc
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    c15e:	4b37      	ldr	r3, [pc, #220]	; (c23c <_usb_ep0_on_setup+0xe8>)
    c160:	447b      	add	r3, pc
    c162:	781b      	ldrb	r3, [r3, #0]
    c164:	2b00      	cmp	r3, #0
    c166:	d009      	beq.n	c17c <_usb_ep0_on_setup+0x28>
		if (NULL != udd_g_ctrlreq.callback) {
    c168:	4b35      	ldr	r3, [pc, #212]	; (c240 <_usb_ep0_on_setup+0xec>)
    c16a:	58e3      	ldr	r3, [r4, r3]
    c16c:	691b      	ldr	r3, [r3, #16]
    c16e:	2b00      	cmp	r3, #0
    c170:	d000      	beq.n	c174 <_usb_ep0_on_setup+0x20>
			udd_g_ctrlreq.callback();
    c172:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    c174:	2200      	movs	r2, #0
    c176:	4b33      	ldr	r3, [pc, #204]	; (c244 <_usb_ep0_on_setup+0xf0>)
    c178:	447b      	add	r3, pc
    c17a:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    c17c:	882b      	ldrh	r3, [r5, #0]
    c17e:	2b08      	cmp	r3, #8
    c180:	d004      	beq.n	c18c <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    c182:	4b31      	ldr	r3, [pc, #196]	; (c248 <_usb_ep0_on_setup+0xf4>)
    c184:	447b      	add	r3, pc
    c186:	4798      	blx	r3
}
    c188:	b003      	add	sp, #12
    c18a:	bd30      	pop	{r4, r5, pc}
		udd_ctrl_fetch_ram();
    c18c:	4b2f      	ldr	r3, [pc, #188]	; (c24c <_usb_ep0_on_setup+0xf8>)
    c18e:	447b      	add	r3, pc
    c190:	4798      	blx	r3
		if (false == udc_process_setup()) {
    c192:	4b2f      	ldr	r3, [pc, #188]	; (c250 <_usb_ep0_on_setup+0xfc>)
    c194:	58e3      	ldr	r3, [r4, r3]
    c196:	9300      	str	r3, [sp, #0]
    c198:	4798      	blx	r3
    c19a:	2800      	cmp	r0, #0
    c19c:	d026      	beq.n	c1ec <_usb_ep0_on_setup+0x98>
		} else if (Udd_setup_is_in()) {
    c19e:	4b28      	ldr	r3, [pc, #160]	; (c240 <_usb_ep0_on_setup+0xec>)
    c1a0:	58e3      	ldr	r3, [r4, r3]
    c1a2:	9300      	str	r3, [sp, #0]
    c1a4:	781b      	ldrb	r3, [r3, #0]
    c1a6:	b25b      	sxtb	r3, r3
    c1a8:	2b00      	cmp	r3, #0
    c1aa:	db23      	blt.n	c1f4 <_usb_ep0_on_setup+0xa0>
			if(0 == udd_g_ctrlreq.req.wLength) {
    c1ac:	4b24      	ldr	r3, [pc, #144]	; (c240 <_usb_ep0_on_setup+0xec>)
    c1ae:	58e3      	ldr	r3, [r4, r3]
    c1b0:	9300      	str	r3, [sp, #0]
    c1b2:	88db      	ldrh	r3, [r3, #6]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d03a      	beq.n	c22e <_usb_ep0_on_setup+0xda>
				udd_ctrl_prev_payload_nb_trans = 0;
    c1b8:	2300      	movs	r3, #0
    c1ba:	4a26      	ldr	r2, [pc, #152]	; (c254 <_usb_ep0_on_setup+0x100>)
    c1bc:	447a      	add	r2, pc
    c1be:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    c1c0:	4a25      	ldr	r2, [pc, #148]	; (c258 <_usb_ep0_on_setup+0x104>)
    c1c2:	447a      	add	r2, pc
    c1c4:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    c1c6:	2201      	movs	r2, #1
    c1c8:	4b24      	ldr	r3, [pc, #144]	; (c25c <_usb_ep0_on_setup+0x108>)
    c1ca:	447b      	add	r3, pc
    c1cc:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c1ce:	4b24      	ldr	r3, [pc, #144]	; (c260 <_usb_ep0_on_setup+0x10c>)
    c1d0:	58e3      	ldr	r3, [r4, r3]
    c1d2:	9300      	str	r3, [sp, #0]
    c1d4:	4b23      	ldr	r3, [pc, #140]	; (c264 <_usb_ep0_on_setup+0x110>)
    c1d6:	58e3      	ldr	r3, [r4, r3]
    c1d8:	9301      	str	r3, [sp, #4]
    c1da:	2340      	movs	r3, #64	; 0x40
    c1dc:	9a00      	ldr	r2, [sp, #0]
    c1de:	2100      	movs	r1, #0
    c1e0:	9801      	ldr	r0, [sp, #4]
    c1e2:	4d21      	ldr	r5, [pc, #132]	; (c268 <_usb_ep0_on_setup+0x114>)
    c1e4:	5964      	ldr	r4, [r4, r5]
    c1e6:	9400      	str	r4, [sp, #0]
    c1e8:	47a0      	blx	r4
    c1ea:	e7cd      	b.n	c188 <_usb_ep0_on_setup+0x34>
			udd_ctrl_stall_data();
    c1ec:	4b1f      	ldr	r3, [pc, #124]	; (c26c <_usb_ep0_on_setup+0x118>)
    c1ee:	447b      	add	r3, pc
    c1f0:	4798      	blx	r3
			return;
    c1f2:	e7c9      	b.n	c188 <_usb_ep0_on_setup+0x34>
			udd_ctrl_prev_payload_nb_trans = 0;
    c1f4:	2300      	movs	r3, #0
    c1f6:	4a1e      	ldr	r2, [pc, #120]	; (c270 <_usb_ep0_on_setup+0x11c>)
    c1f8:	447a      	add	r2, pc
    c1fa:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    c1fc:	4a1d      	ldr	r2, [pc, #116]	; (c274 <_usb_ep0_on_setup+0x120>)
    c1fe:	447a      	add	r2, pc
    c200:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    c202:	2202      	movs	r2, #2
    c204:	4b1c      	ldr	r3, [pc, #112]	; (c278 <_usb_ep0_on_setup+0x124>)
    c206:	447b      	add	r3, pc
    c208:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c20a:	4b15      	ldr	r3, [pc, #84]	; (c260 <_usb_ep0_on_setup+0x10c>)
    c20c:	58e3      	ldr	r3, [r4, r3]
    c20e:	9300      	str	r3, [sp, #0]
    c210:	4b14      	ldr	r3, [pc, #80]	; (c264 <_usb_ep0_on_setup+0x110>)
    c212:	58e3      	ldr	r3, [r4, r3]
    c214:	9301      	str	r3, [sp, #4]
    c216:	2340      	movs	r3, #64	; 0x40
    c218:	9a00      	ldr	r2, [sp, #0]
    c21a:	2100      	movs	r1, #0
    c21c:	9801      	ldr	r0, [sp, #4]
    c21e:	4d12      	ldr	r5, [pc, #72]	; (c268 <_usb_ep0_on_setup+0x114>)
    c220:	5964      	ldr	r4, [r4, r5]
    c222:	9400      	str	r4, [sp, #0]
    c224:	47a0      	blx	r4
			udd_ctrl_in_sent();
    c226:	4b15      	ldr	r3, [pc, #84]	; (c27c <_usb_ep0_on_setup+0x128>)
    c228:	447b      	add	r3, pc
    c22a:	4798      	blx	r3
    c22c:	e7ac      	b.n	c188 <_usb_ep0_on_setup+0x34>
				udd_ctrl_send_zlp_in();
    c22e:	4b14      	ldr	r3, [pc, #80]	; (c280 <_usb_ep0_on_setup+0x12c>)
    c230:	447b      	add	r3, pc
    c232:	4798      	blx	r3
				return;
    c234:	e7a8      	b.n	c188 <_usb_ep0_on_setup+0x34>
    c236:	46c0      	nop			; (mov r8, r8)
    c238:	00006830 	.word	0x00006830
    c23c:	1fff49c6 	.word	0x1fff49c6
    c240:	00000308 	.word	0x00000308
    c244:	1fff49ae 	.word	0x1fff49ae
    c248:	fffffba5 	.word	0xfffffba5
    c24c:	fffff877 	.word	0xfffff877
    c250:	00000204 	.word	0x00000204
    c254:	1fff4968 	.word	0x1fff4968
    c258:	1fff4960 	.word	0x1fff4960
    c25c:	1fff495c 	.word	0x1fff495c
    c260:	00000480 	.word	0x00000480
    c264:	000000cc 	.word	0x000000cc
    c268:	00000214 	.word	0x00000214
    c26c:	fffffb3b 	.word	0xfffffb3b
    c270:	1fff492c 	.word	0x1fff492c
    c274:	1fff4924 	.word	0x1fff4924
    c278:	1fff4920 	.word	0x1fff4920
    c27c:	fffffe29 	.word	0xfffffe29
    c280:	fffffd51 	.word	0xfffffd51

0000c284 <_usb_on_sof_notify>:
{
    c284:	b500      	push	{lr}
    c286:	b083      	sub	sp, #12
    c288:	4b03      	ldr	r3, [pc, #12]	; (c298 <_usb_on_sof_notify+0x14>)
    c28a:	447b      	add	r3, pc
	udc_sof_notify();
    c28c:	4a03      	ldr	r2, [pc, #12]	; (c29c <_usb_on_sof_notify+0x18>)
    c28e:	589b      	ldr	r3, [r3, r2]
    c290:	9301      	str	r3, [sp, #4]
    c292:	4798      	blx	r3
}
    c294:	b003      	add	sp, #12
    c296:	bd00      	pop	{pc}
    c298:	00006702 	.word	0x00006702
    c29c:	00000274 	.word	0x00000274

0000c2a0 <udd_ep_abort>:
{
    c2a0:	b510      	push	{r4, lr}
    c2a2:	b082      	sub	sp, #8
    c2a4:	0004      	movs	r4, r0
    c2a6:	4b0f      	ldr	r3, [pc, #60]	; (c2e4 <udd_ep_abort+0x44>)
    c2a8:	447b      	add	r3, pc
	usb_device_endpoint_abort_job(&usb_device, ep);
    c2aa:	4a0f      	ldr	r2, [pc, #60]	; (c2e8 <udd_ep_abort+0x48>)
    c2ac:	589a      	ldr	r2, [r3, r2]
    c2ae:	9201      	str	r2, [sp, #4]
    c2b0:	0001      	movs	r1, r0
    c2b2:	0010      	movs	r0, r2
    c2b4:	4a0d      	ldr	r2, [pc, #52]	; (c2ec <udd_ep_abort+0x4c>)
    c2b6:	589b      	ldr	r3, [r3, r2]
    c2b8:	9301      	str	r3, [sp, #4]
    c2ba:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    c2bc:	0020      	movs	r0, r4
    c2be:	4b0c      	ldr	r3, [pc, #48]	; (c2f0 <udd_ep_abort+0x50>)
    c2c0:	447b      	add	r3, pc
    c2c2:	4798      	blx	r3
	if (!ptr_job->busy) {
    c2c4:	7c83      	ldrb	r3, [r0, #18]
    c2c6:	07db      	lsls	r3, r3, #31
    c2c8:	d50a      	bpl.n	c2e0 <udd_ep_abort+0x40>
	ptr_job->busy = false;
    c2ca:	7c83      	ldrb	r3, [r0, #18]
    c2cc:	2201      	movs	r2, #1
    c2ce:	4393      	bics	r3, r2
    c2d0:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    c2d2:	6803      	ldr	r3, [r0, #0]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d003      	beq.n	c2e0 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    c2d8:	68c1      	ldr	r1, [r0, #12]
    c2da:	0022      	movs	r2, r4
    c2dc:	2001      	movs	r0, #1
    c2de:	4798      	blx	r3
}
    c2e0:	b002      	add	sp, #8
    c2e2:	bd10      	pop	{r4, pc}
    c2e4:	000066e4 	.word	0x000066e4
    c2e8:	000000cc 	.word	0x000000cc
    c2ec:	00000018 	.word	0x00000018
    c2f0:	fffff715 	.word	0xfffff715

0000c2f4 <udd_is_high_speed>:
}
    c2f4:	2000      	movs	r0, #0
    c2f6:	4770      	bx	lr

0000c2f8 <udd_get_frame_number>:
{
    c2f8:	4b04      	ldr	r3, [pc, #16]	; (c30c <udd_get_frame_number+0x14>)
    c2fa:	447b      	add	r3, pc
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    c2fc:	4a04      	ldr	r2, [pc, #16]	; (c310 <udd_get_frame_number+0x18>)
    c2fe:	589b      	ldr	r3, [r3, r2]
    c300:	681b      	ldr	r3, [r3, #0]
    c302:	8a18      	ldrh	r0, [r3, #16]
    c304:	0480      	lsls	r0, r0, #18
    c306:	0d40      	lsrs	r0, r0, #21
}
    c308:	4770      	bx	lr
    c30a:	46c0      	nop			; (mov r8, r8)
    c30c:	00006692 	.word	0x00006692
    c310:	000000cc 	.word	0x000000cc

0000c314 <udd_get_micro_frame_number>:
{
    c314:	4b03      	ldr	r3, [pc, #12]	; (c324 <udd_get_micro_frame_number+0x10>)
    c316:	447b      	add	r3, pc
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    c318:	4a03      	ldr	r2, [pc, #12]	; (c328 <udd_get_micro_frame_number+0x14>)
    c31a:	589b      	ldr	r3, [r3, r2]
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	8a18      	ldrh	r0, [r3, #16]
    c320:	b280      	uxth	r0, r0
}
    c322:	4770      	bx	lr
    c324:	00006676 	.word	0x00006676
    c328:	000000cc 	.word	0x000000cc

0000c32c <udd_ep_free>:
{
    c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c32e:	b085      	sub	sp, #20
    c330:	0005      	movs	r5, r0
    c332:	4c15      	ldr	r4, [pc, #84]	; (c388 <udd_ep_free+0x5c>)
    c334:	447c      	add	r4, pc
	usb_device_endpoint_get_config_defaults(&config_ep);
    c336:	ae03      	add	r6, sp, #12
    c338:	0030      	movs	r0, r6
    c33a:	4b14      	ldr	r3, [pc, #80]	; (c38c <udd_ep_free+0x60>)
    c33c:	58e3      	ldr	r3, [r4, r3]
    c33e:	9300      	str	r3, [sp, #0]
    c340:	4798      	blx	r3
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c342:	270f      	movs	r7, #15
    c344:	402f      	ands	r7, r5
	udd_ep_abort(ep);
    c346:	0028      	movs	r0, r5
    c348:	4b11      	ldr	r3, [pc, #68]	; (c390 <udd_ep_free+0x64>)
    c34a:	58e3      	ldr	r3, [r4, r3]
    c34c:	9300      	str	r3, [sp, #0]
    c34e:	4798      	blx	r3
	config_ep.ep_address = ep;
    c350:	7035      	strb	r5, [r6, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    c352:	2300      	movs	r3, #0
    c354:	70f3      	strb	r3, [r6, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    c356:	4b0f      	ldr	r3, [pc, #60]	; (c394 <udd_ep_free+0x68>)
    c358:	58e3      	ldr	r3, [r4, r3]
    c35a:	9300      	str	r3, [sp, #0]
    c35c:	0031      	movs	r1, r6
    c35e:	0018      	movs	r0, r3
    c360:	4b0d      	ldr	r3, [pc, #52]	; (c398 <udd_ep_free+0x6c>)
    c362:	58e3      	ldr	r3, [r4, r3]
    c364:	9301      	str	r3, [sp, #4]
    c366:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    c368:	2200      	movs	r2, #0
    c36a:	0039      	movs	r1, r7
    c36c:	9800      	ldr	r0, [sp, #0]
    c36e:	4b0b      	ldr	r3, [pc, #44]	; (c39c <udd_ep_free+0x70>)
    c370:	58e3      	ldr	r3, [r4, r3]
    c372:	9301      	str	r3, [sp, #4]
    c374:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    c376:	2200      	movs	r2, #0
    c378:	0029      	movs	r1, r5
    c37a:	9800      	ldr	r0, [sp, #0]
    c37c:	4b08      	ldr	r3, [pc, #32]	; (c3a0 <udd_ep_free+0x74>)
    c37e:	58e3      	ldr	r3, [r4, r3]
    c380:	9300      	str	r3, [sp, #0]
    c382:	4798      	blx	r3
}
    c384:	b005      	add	sp, #20
    c386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c388:	00006658 	.word	0x00006658
    c38c:	00000194 	.word	0x00000194
    c390:	000002b8 	.word	0x000002b8
    c394:	000000cc 	.word	0x000000cc
    c398:	000000c8 	.word	0x000000c8
    c39c:	0000020c 	.word	0x0000020c
    c3a0:	000002f4 	.word	0x000002f4

0000c3a4 <udd_ep_alloc>:
{
    c3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3a6:	46c6      	mov	lr, r8
    c3a8:	b500      	push	{lr}
    c3aa:	b084      	sub	sp, #16
    c3ac:	0005      	movs	r5, r0
    c3ae:	4688      	mov	r8, r1
    c3b0:	0016      	movs	r6, r2
    c3b2:	4c42      	ldr	r4, [pc, #264]	; (c4bc <udd_ep_alloc+0x118>)
    c3b4:	447c      	add	r4, pc
	usb_device_endpoint_get_config_defaults(&config_ep);
    c3b6:	af03      	add	r7, sp, #12
    c3b8:	0038      	movs	r0, r7
    c3ba:	4b41      	ldr	r3, [pc, #260]	; (c4c0 <udd_ep_alloc+0x11c>)
    c3bc:	58e3      	ldr	r3, [r4, r3]
    c3be:	9300      	str	r3, [sp, #0]
    c3c0:	4798      	blx	r3
	config_ep.ep_address = ep;
    c3c2:	703d      	strb	r5, [r7, #0]
	if(MaxEndpointSize <= 8) {
    c3c4:	2e08      	cmp	r6, #8
    c3c6:	d812      	bhi.n	c3ee <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    c3c8:	2200      	movs	r2, #0
    c3ca:	ab03      	add	r3, sp, #12
    c3cc:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    c3ce:	0028      	movs	r0, r5
    c3d0:	4b3c      	ldr	r3, [pc, #240]	; (c4c4 <udd_ep_alloc+0x120>)
    c3d2:	447b      	add	r3, pc
    c3d4:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    c3d6:	8206      	strh	r6, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    c3d8:	2103      	movs	r1, #3
    c3da:	4643      	mov	r3, r8
    c3dc:	4019      	ands	r1, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    c3de:	2901      	cmp	r1, #1
    c3e0:	d034      	beq.n	c44c <udd_ep_alloc+0xa8>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    c3e2:	2902      	cmp	r1, #2
    c3e4:	d047      	beq.n	c476 <udd_ep_alloc+0xd2>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    c3e6:	2903      	cmp	r1, #3
    c3e8:	d049      	beq.n	c47e <udd_ep_alloc+0xda>
		return false;
    c3ea:	2000      	movs	r0, #0
    c3ec:	e03f      	b.n	c46e <udd_ep_alloc+0xca>
	} else if(MaxEndpointSize <= 16) {
    c3ee:	2e10      	cmp	r6, #16
    c3f0:	d803      	bhi.n	c3fa <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    c3f2:	2201      	movs	r2, #1
    c3f4:	ab03      	add	r3, sp, #12
    c3f6:	705a      	strb	r2, [r3, #1]
    c3f8:	e7e9      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 32) {
    c3fa:	2e20      	cmp	r6, #32
    c3fc:	d803      	bhi.n	c406 <udd_ep_alloc+0x62>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    c3fe:	2202      	movs	r2, #2
    c400:	ab03      	add	r3, sp, #12
    c402:	705a      	strb	r2, [r3, #1]
    c404:	e7e3      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 64) {
    c406:	2e40      	cmp	r6, #64	; 0x40
    c408:	d803      	bhi.n	c412 <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    c40a:	2203      	movs	r2, #3
    c40c:	ab03      	add	r3, sp, #12
    c40e:	705a      	strb	r2, [r3, #1]
    c410:	e7dd      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 128) {
    c412:	2e80      	cmp	r6, #128	; 0x80
    c414:	d803      	bhi.n	c41e <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    c416:	2204      	movs	r2, #4
    c418:	ab03      	add	r3, sp, #12
    c41a:	705a      	strb	r2, [r3, #1]
    c41c:	e7d7      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 256) {
    c41e:	2380      	movs	r3, #128	; 0x80
    c420:	005b      	lsls	r3, r3, #1
    c422:	429e      	cmp	r6, r3
    c424:	d803      	bhi.n	c42e <udd_ep_alloc+0x8a>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    c426:	2205      	movs	r2, #5
    c428:	ab03      	add	r3, sp, #12
    c42a:	705a      	strb	r2, [r3, #1]
    c42c:	e7cf      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 512) {
    c42e:	2380      	movs	r3, #128	; 0x80
    c430:	009b      	lsls	r3, r3, #2
    c432:	429e      	cmp	r6, r3
    c434:	d803      	bhi.n	c43e <udd_ep_alloc+0x9a>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    c436:	2206      	movs	r2, #6
    c438:	ab03      	add	r3, sp, #12
    c43a:	705a      	strb	r2, [r3, #1]
    c43c:	e7c7      	b.n	c3ce <udd_ep_alloc+0x2a>
	} else if(MaxEndpointSize <= 1023) {
    c43e:	4b22      	ldr	r3, [pc, #136]	; (c4c8 <udd_ep_alloc+0x124>)
    c440:	429e      	cmp	r6, r3
    c442:	d838      	bhi.n	c4b6 <udd_ep_alloc+0x112>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    c444:	2207      	movs	r2, #7
    c446:	ab03      	add	r3, sp, #12
    c448:	705a      	strb	r2, [r3, #1]
    c44a:	e7c0      	b.n	c3ce <udd_ep_alloc+0x2a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    c44c:	2202      	movs	r2, #2
    c44e:	ab03      	add	r3, sp, #12
    c450:	70da      	strb	r2, [r3, #3]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c452:	260f      	movs	r6, #15
    c454:	402e      	ands	r6, r5
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    c456:	4b1d      	ldr	r3, [pc, #116]	; (c4cc <udd_ep_alloc+0x128>)
    c458:	58e3      	ldr	r3, [r4, r3]
    c45a:	9300      	str	r3, [sp, #0]
    c45c:	a903      	add	r1, sp, #12
    c45e:	0018      	movs	r0, r3
    c460:	4b1b      	ldr	r3, [pc, #108]	; (c4d0 <udd_ep_alloc+0x12c>)
    c462:	58e3      	ldr	r3, [r4, r3]
    c464:	9300      	str	r3, [sp, #0]
    c466:	4798      	blx	r3
    c468:	2800      	cmp	r0, #0
    c46a:	d00c      	beq.n	c486 <udd_ep_alloc+0xe2>
		return false;
    c46c:	2000      	movs	r0, #0
}
    c46e:	b004      	add	sp, #16
    c470:	bc04      	pop	{r2}
    c472:	4690      	mov	r8, r2
    c474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    c476:	2203      	movs	r2, #3
    c478:	ab03      	add	r3, sp, #12
    c47a:	70da      	strb	r2, [r3, #3]
    c47c:	e7e9      	b.n	c452 <udd_ep_alloc+0xae>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    c47e:	2204      	movs	r2, #4
    c480:	ab03      	add	r3, sp, #12
    c482:	70da      	strb	r2, [r3, #3]
    c484:	e7e5      	b.n	c452 <udd_ep_alloc+0xae>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    c486:	4b11      	ldr	r3, [pc, #68]	; (c4cc <udd_ep_alloc+0x128>)
    c488:	58e3      	ldr	r3, [r4, r3]
    c48a:	9300      	str	r3, [sp, #0]
    c48c:	4b11      	ldr	r3, [pc, #68]	; (c4d4 <udd_ep_alloc+0x130>)
    c48e:	447b      	add	r3, pc
    c490:	2200      	movs	r2, #0
    c492:	0031      	movs	r1, r6
    c494:	9800      	ldr	r0, [sp, #0]
    c496:	4e10      	ldr	r6, [pc, #64]	; (c4d8 <udd_ep_alloc+0x134>)
    c498:	59a6      	ldr	r6, [r4, r6]
    c49a:	9601      	str	r6, [sp, #4]
    c49c:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    c49e:	2200      	movs	r2, #0
    c4a0:	0029      	movs	r1, r5
    c4a2:	9800      	ldr	r0, [sp, #0]
    c4a4:	4b0d      	ldr	r3, [pc, #52]	; (c4dc <udd_ep_alloc+0x138>)
    c4a6:	58e4      	ldr	r4, [r4, r3]
    c4a8:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    c4aa:	2201      	movs	r2, #1
    c4ac:	0029      	movs	r1, r5
    c4ae:	9800      	ldr	r0, [sp, #0]
    c4b0:	47a0      	blx	r4
	return true;
    c4b2:	2001      	movs	r0, #1
    c4b4:	e7db      	b.n	c46e <udd_ep_alloc+0xca>
		return false;
    c4b6:	2000      	movs	r0, #0
    c4b8:	e7d9      	b.n	c46e <udd_ep_alloc+0xca>
    c4ba:	46c0      	nop			; (mov r8, r8)
    c4bc:	000065d8 	.word	0x000065d8
    c4c0:	00000194 	.word	0x00000194
    c4c4:	fffff603 	.word	0xfffff603
    c4c8:	000003ff 	.word	0x000003ff
    c4cc:	000000cc 	.word	0x000000cc
    c4d0:	000000c8 	.word	0x000000c8
    c4d4:	fffff827 	.word	0xfffff827
    c4d8:	00000220 	.word	0x00000220
    c4dc:	0000045c 	.word	0x0000045c

0000c4e0 <udd_ep_is_halted>:
{
    c4e0:	b500      	push	{lr}
    c4e2:	b083      	sub	sp, #12
    c4e4:	0001      	movs	r1, r0
    c4e6:	4b06      	ldr	r3, [pc, #24]	; (c500 <udd_ep_is_halted+0x20>)
    c4e8:	447b      	add	r3, pc
	return usb_device_endpoint_is_halted(&usb_device, ep);
    c4ea:	4a06      	ldr	r2, [pc, #24]	; (c504 <udd_ep_is_halted+0x24>)
    c4ec:	589a      	ldr	r2, [r3, r2]
    c4ee:	9201      	str	r2, [sp, #4]
    c4f0:	0010      	movs	r0, r2
    c4f2:	4a05      	ldr	r2, [pc, #20]	; (c508 <udd_ep_is_halted+0x28>)
    c4f4:	589b      	ldr	r3, [r3, r2]
    c4f6:	9301      	str	r3, [sp, #4]
    c4f8:	4798      	blx	r3
}
    c4fa:	b003      	add	sp, #12
    c4fc:	bd00      	pop	{pc}
    c4fe:	46c0      	nop			; (mov r8, r8)
    c500:	000064a4 	.word	0x000064a4
    c504:	000000cc 	.word	0x000000cc
    c508:	000001f8 	.word	0x000001f8

0000c50c <udd_ep_set_halt>:
{
    c50c:	b530      	push	{r4, r5, lr}
    c50e:	b083      	sub	sp, #12
    c510:	0005      	movs	r5, r0
    c512:	4c0c      	ldr	r4, [pc, #48]	; (c544 <udd_ep_set_halt+0x38>)
    c514:	447c      	add	r4, pc
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c516:	230f      	movs	r3, #15
    c518:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    c51a:	2b03      	cmp	r3, #3
    c51c:	d902      	bls.n	c524 <udd_ep_set_halt+0x18>
		return false;
    c51e:	2000      	movs	r0, #0
}
    c520:	b003      	add	sp, #12
    c522:	bd30      	pop	{r4, r5, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    c524:	4b08      	ldr	r3, [pc, #32]	; (c548 <udd_ep_set_halt+0x3c>)
    c526:	58e3      	ldr	r3, [r4, r3]
    c528:	9301      	str	r3, [sp, #4]
    c52a:	0001      	movs	r1, r0
    c52c:	0018      	movs	r0, r3
    c52e:	4b07      	ldr	r3, [pc, #28]	; (c54c <udd_ep_set_halt+0x40>)
    c530:	58e3      	ldr	r3, [r4, r3]
    c532:	9301      	str	r3, [sp, #4]
    c534:	4798      	blx	r3
	udd_ep_abort(ep);
    c536:	0028      	movs	r0, r5
    c538:	4b05      	ldr	r3, [pc, #20]	; (c550 <udd_ep_set_halt+0x44>)
    c53a:	58e3      	ldr	r3, [r4, r3]
    c53c:	9301      	str	r3, [sp, #4]
    c53e:	4798      	blx	r3
	return true;
    c540:	2001      	movs	r0, #1
    c542:	e7ed      	b.n	c520 <udd_ep_set_halt+0x14>
    c544:	00006478 	.word	0x00006478
    c548:	000000cc 	.word	0x000000cc
    c54c:	000003f8 	.word	0x000003f8
    c550:	000002b8 	.word	0x000002b8

0000c554 <udd_ctrl_out_received>:
{
    c554:	b570      	push	{r4, r5, r6, lr}
    c556:	b082      	sub	sp, #8
    c558:	4d3f      	ldr	r5, [pc, #252]	; (c658 <udd_ctrl_out_received+0x104>)
    c55a:	447d      	add	r5, pc
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    c55c:	8806      	ldrh	r6, [r0, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    c55e:	4b3f      	ldr	r3, [pc, #252]	; (c65c <udd_ctrl_out_received+0x108>)
    c560:	58eb      	ldr	r3, [r5, r3]
    c562:	9300      	str	r3, [sp, #0]
    c564:	899b      	ldrh	r3, [r3, #12]
    c566:	4a3e      	ldr	r2, [pc, #248]	; (c660 <udd_ctrl_out_received+0x10c>)
    c568:	447a      	add	r2, pc
    c56a:	8814      	ldrh	r4, [r2, #0]
    c56c:	19a2      	adds	r2, r4, r6
    c56e:	4293      	cmp	r3, r2
    c570:	da01      	bge.n	c576 <udd_ctrl_out_received+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    c572:	1b1e      	subs	r6, r3, r4
    c574:	b2b6      	uxth	r6, r6
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    c576:	4b39      	ldr	r3, [pc, #228]	; (c65c <udd_ctrl_out_received+0x108>)
    c578:	58eb      	ldr	r3, [r5, r3]
    c57a:	6898      	ldr	r0, [r3, #8]
    c57c:	1900      	adds	r0, r0, r4
    c57e:	4b39      	ldr	r3, [pc, #228]	; (c664 <udd_ctrl_out_received+0x110>)
    c580:	58eb      	ldr	r3, [r5, r3]
    c582:	9300      	str	r3, [sp, #0]
    c584:	0032      	movs	r2, r6
    c586:	0019      	movs	r1, r3
    c588:	4b37      	ldr	r3, [pc, #220]	; (c668 <udd_ctrl_out_received+0x114>)
    c58a:	58eb      	ldr	r3, [r5, r3]
    c58c:	9300      	str	r3, [sp, #0]
    c58e:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    c590:	1934      	adds	r4, r6, r4
    c592:	b2a4      	uxth	r4, r4
    c594:	4b35      	ldr	r3, [pc, #212]	; (c66c <udd_ctrl_out_received+0x118>)
    c596:	447b      	add	r3, pc
    c598:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    c59a:	2e40      	cmp	r6, #64	; 0x40
    c59c:	d00d      	beq.n	c5ba <udd_ctrl_out_received+0x66>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    c59e:	4b2f      	ldr	r3, [pc, #188]	; (c65c <udd_ctrl_out_received+0x108>)
    c5a0:	58eb      	ldr	r3, [r5, r3]
    c5a2:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    c5a4:	695b      	ldr	r3, [r3, #20]
    c5a6:	2b00      	cmp	r3, #0
    c5a8:	d002      	beq.n	c5b0 <udd_ctrl_out_received+0x5c>
			if (!udd_g_ctrlreq.over_under_run()) {
    c5aa:	4798      	blx	r3
    c5ac:	2800      	cmp	r0, #0
    c5ae:	d023      	beq.n	c5f8 <udd_ctrl_out_received+0xa4>
		udd_ctrl_send_zlp_in();
    c5b0:	4b2f      	ldr	r3, [pc, #188]	; (c670 <udd_ctrl_out_received+0x11c>)
    c5b2:	447b      	add	r3, pc
    c5b4:	4798      	blx	r3
}
    c5b6:	b002      	add	sp, #8
    c5b8:	bd70      	pop	{r4, r5, r6, pc}
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    c5ba:	4b28      	ldr	r3, [pc, #160]	; (c65c <udd_ctrl_out_received+0x108>)
    c5bc:	58eb      	ldr	r3, [r5, r3]
    c5be:	9300      	str	r3, [sp, #0]
    c5c0:	88da      	ldrh	r2, [r3, #6]
    c5c2:	4b2c      	ldr	r3, [pc, #176]	; (c674 <udd_ctrl_out_received+0x120>)
    c5c4:	447b      	add	r3, pc
    c5c6:	881b      	ldrh	r3, [r3, #0]
    c5c8:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    c5ca:	429a      	cmp	r2, r3
    c5cc:	dde7      	ble.n	c59e <udd_ctrl_out_received+0x4a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    c5ce:	4b23      	ldr	r3, [pc, #140]	; (c65c <udd_ctrl_out_received+0x108>)
    c5d0:	58eb      	ldr	r3, [r5, r3]
    c5d2:	9300      	str	r3, [sp, #0]
    c5d4:	899b      	ldrh	r3, [r3, #12]
    c5d6:	429c      	cmp	r4, r3
    c5d8:	d017      	beq.n	c60a <udd_ctrl_out_received+0xb6>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    c5da:	4b22      	ldr	r3, [pc, #136]	; (c664 <udd_ctrl_out_received+0x110>)
    c5dc:	58eb      	ldr	r3, [r5, r3]
    c5de:	9300      	str	r3, [sp, #0]
    c5e0:	4b25      	ldr	r3, [pc, #148]	; (c678 <udd_ctrl_out_received+0x124>)
    c5e2:	58eb      	ldr	r3, [r5, r3]
    c5e4:	9301      	str	r3, [sp, #4]
    c5e6:	2340      	movs	r3, #64	; 0x40
    c5e8:	9a00      	ldr	r2, [sp, #0]
    c5ea:	2100      	movs	r1, #0
    c5ec:	9801      	ldr	r0, [sp, #4]
    c5ee:	4c23      	ldr	r4, [pc, #140]	; (c67c <udd_ctrl_out_received+0x128>)
    c5f0:	592c      	ldr	r4, [r5, r4]
    c5f2:	9400      	str	r4, [sp, #0]
    c5f4:	47a0      	blx	r4
    c5f6:	e7de      	b.n	c5b6 <udd_ctrl_out_received+0x62>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c5f8:	2205      	movs	r2, #5
    c5fa:	4b21      	ldr	r3, [pc, #132]	; (c680 <udd_ctrl_out_received+0x12c>)
    c5fc:	447b      	add	r3, pc
    c5fe:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    c600:	4b20      	ldr	r3, [pc, #128]	; (c684 <udd_ctrl_out_received+0x130>)
    c602:	58eb      	ldr	r3, [r5, r3]
    c604:	9300      	str	r3, [sp, #0]
    c606:	4798      	blx	r3
				return;
    c608:	e7d5      	b.n	c5b6 <udd_ctrl_out_received+0x62>
		if (!udd_g_ctrlreq.over_under_run) {
    c60a:	4b14      	ldr	r3, [pc, #80]	; (c65c <udd_ctrl_out_received+0x108>)
    c60c:	58eb      	ldr	r3, [r5, r3]
    c60e:	695b      	ldr	r3, [r3, #20]
    c610:	2b00      	cmp	r3, #0
    c612:	d00d      	beq.n	c630 <udd_ctrl_out_received+0xdc>
		if (!udd_g_ctrlreq.over_under_run()) {
    c614:	4798      	blx	r3
    c616:	2800      	cmp	r0, #0
    c618:	d014      	beq.n	c644 <udd_ctrl_out_received+0xf0>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    c61a:	4a1b      	ldr	r2, [pc, #108]	; (c688 <udd_ctrl_out_received+0x134>)
    c61c:	447a      	add	r2, pc
    c61e:	4b1b      	ldr	r3, [pc, #108]	; (c68c <udd_ctrl_out_received+0x138>)
    c620:	447b      	add	r3, pc
    c622:	8811      	ldrh	r1, [r2, #0]
    c624:	8818      	ldrh	r0, [r3, #0]
    c626:	1809      	adds	r1, r1, r0
    c628:	8011      	strh	r1, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
    c62a:	2200      	movs	r2, #0
    c62c:	801a      	strh	r2, [r3, #0]
    c62e:	e7d4      	b.n	c5da <udd_ctrl_out_received+0x86>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c630:	2205      	movs	r2, #5
    c632:	4b17      	ldr	r3, [pc, #92]	; (c690 <udd_ctrl_out_received+0x13c>)
    c634:	447b      	add	r3, pc
    c636:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    c638:	2000      	movs	r0, #0
    c63a:	4b12      	ldr	r3, [pc, #72]	; (c684 <udd_ctrl_out_received+0x130>)
    c63c:	58eb      	ldr	r3, [r5, r3]
    c63e:	9300      	str	r3, [sp, #0]
    c640:	4798      	blx	r3
			return;
    c642:	e7b8      	b.n	c5b6 <udd_ctrl_out_received+0x62>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    c644:	2205      	movs	r2, #5
    c646:	4b13      	ldr	r3, [pc, #76]	; (c694 <udd_ctrl_out_received+0x140>)
    c648:	447b      	add	r3, pc
    c64a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    c64c:	4b0d      	ldr	r3, [pc, #52]	; (c684 <udd_ctrl_out_received+0x130>)
    c64e:	58eb      	ldr	r3, [r5, r3]
    c650:	9300      	str	r3, [sp, #0]
    c652:	4798      	blx	r3
			return;
    c654:	e7af      	b.n	c5b6 <udd_ctrl_out_received+0x62>
    c656:	46c0      	nop			; (mov r8, r8)
    c658:	00006432 	.word	0x00006432
    c65c:	00000308 	.word	0x00000308
    c660:	1fff45ba 	.word	0x1fff45ba
    c664:	00000480 	.word	0x00000480
    c668:	000000ec 	.word	0x000000ec
    c66c:	1fff458c 	.word	0x1fff458c
    c670:	fffff9cf 	.word	0xfffff9cf
    c674:	1fff4560 	.word	0x1fff4560
    c678:	000000cc 	.word	0x000000cc
    c67c:	00000214 	.word	0x00000214
    c680:	1fff452a 	.word	0x1fff452a
    c684:	000001d8 	.word	0x000001d8
    c688:	1fff4508 	.word	0x1fff4508
    c68c:	1fff4502 	.word	0x1fff4502
    c690:	1fff44f2 	.word	0x1fff44f2
    c694:	1fff44de 	.word	0x1fff44de

0000c698 <_usb_ep0_on_tansfer_ok>:
{
    c698:	b510      	push	{r4, lr}
    c69a:	4a0e      	ldr	r2, [pc, #56]	; (c6d4 <_usb_ep0_on_tansfer_ok+0x3c>)
    c69c:	447a      	add	r2, pc
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    c69e:	4b0e      	ldr	r3, [pc, #56]	; (c6d8 <_usb_ep0_on_tansfer_ok+0x40>)
    c6a0:	447b      	add	r3, pc
    c6a2:	781b      	ldrb	r3, [r3, #0]
    c6a4:	2b01      	cmp	r3, #1
    c6a6:	d00c      	beq.n	c6c2 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    c6a8:	2b02      	cmp	r3, #2
    c6aa:	d00f      	beq.n	c6cc <_usb_ep0_on_tansfer_ok+0x34>
			if (NULL != udd_g_ctrlreq.callback) {
    c6ac:	4b0b      	ldr	r3, [pc, #44]	; (c6dc <_usb_ep0_on_tansfer_ok+0x44>)
    c6ae:	58d3      	ldr	r3, [r2, r3]
    c6b0:	691b      	ldr	r3, [r3, #16]
    c6b2:	2b00      	cmp	r3, #0
    c6b4:	d000      	beq.n	c6b8 <_usb_ep0_on_tansfer_ok+0x20>
				udd_g_ctrlreq.callback();
    c6b6:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    c6b8:	2200      	movs	r2, #0
    c6ba:	4b09      	ldr	r3, [pc, #36]	; (c6e0 <_usb_ep0_on_tansfer_ok+0x48>)
    c6bc:	447b      	add	r3, pc
    c6be:	701a      	strb	r2, [r3, #0]
}
    c6c0:	bd10      	pop	{r4, pc}
			udd_ctrl_out_received(pointer);
    c6c2:	0008      	movs	r0, r1
    c6c4:	4b07      	ldr	r3, [pc, #28]	; (c6e4 <_usb_ep0_on_tansfer_ok+0x4c>)
    c6c6:	447b      	add	r3, pc
    c6c8:	4798      	blx	r3
    c6ca:	e7f9      	b.n	c6c0 <_usb_ep0_on_tansfer_ok+0x28>
			udd_ctrl_in_sent();
    c6cc:	4b06      	ldr	r3, [pc, #24]	; (c6e8 <_usb_ep0_on_tansfer_ok+0x50>)
    c6ce:	447b      	add	r3, pc
    c6d0:	4798      	blx	r3
    c6d2:	e7f5      	b.n	c6c0 <_usb_ep0_on_tansfer_ok+0x28>
    c6d4:	000062f0 	.word	0x000062f0
    c6d8:	1fff4486 	.word	0x1fff4486
    c6dc:	00000308 	.word	0x00000308
    c6e0:	1fff446a 	.word	0x1fff446a
    c6e4:	fffffe8b 	.word	0xfffffe8b
    c6e8:	fffff983 	.word	0xfffff983

0000c6ec <udd_ep_clear_halt>:
{
    c6ec:	b570      	push	{r4, r5, r6, lr}
    c6ee:	b082      	sub	sp, #8
    c6f0:	0005      	movs	r5, r0
    c6f2:	4c11      	ldr	r4, [pc, #68]	; (c738 <udd_ep_clear_halt+0x4c>)
    c6f4:	447c      	add	r4, pc
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c6f6:	230f      	movs	r3, #15
    c6f8:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    c6fa:	2b03      	cmp	r3, #3
    c6fc:	d902      	bls.n	c704 <udd_ep_clear_halt+0x18>
		return false;
    c6fe:	2000      	movs	r0, #0
}
    c700:	b002      	add	sp, #8
    c702:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    c704:	4b0d      	ldr	r3, [pc, #52]	; (c73c <udd_ep_clear_halt+0x50>)
    c706:	447b      	add	r3, pc
    c708:	4798      	blx	r3
    c70a:	0006      	movs	r6, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    c70c:	4b0c      	ldr	r3, [pc, #48]	; (c740 <udd_ep_clear_halt+0x54>)
    c70e:	58e3      	ldr	r3, [r4, r3]
    c710:	9301      	str	r3, [sp, #4]
    c712:	0029      	movs	r1, r5
    c714:	0018      	movs	r0, r3
    c716:	4b0b      	ldr	r3, [pc, #44]	; (c744 <udd_ep_clear_halt+0x58>)
    c718:	58e3      	ldr	r3, [r4, r3]
    c71a:	9301      	str	r3, [sp, #4]
    c71c:	4798      	blx	r3
	if (ptr_job->busy == true) {
    c71e:	7cb3      	ldrb	r3, [r6, #18]
    c720:	07db      	lsls	r3, r3, #31
    c722:	d401      	bmi.n	c728 <udd_ep_clear_halt+0x3c>
	return true;
    c724:	2001      	movs	r0, #1
    c726:	e7eb      	b.n	c700 <udd_ep_clear_halt+0x14>
		ptr_job->busy = false;
    c728:	7cb3      	ldrb	r3, [r6, #18]
    c72a:	2201      	movs	r2, #1
    c72c:	4393      	bics	r3, r2
    c72e:	74b3      	strb	r3, [r6, #18]
		ptr_job->call_nohalt();
    c730:	6833      	ldr	r3, [r6, #0]
    c732:	4798      	blx	r3
	return true;
    c734:	2001      	movs	r0, #1
    c736:	e7e3      	b.n	c700 <udd_ep_clear_halt+0x14>
    c738:	00006298 	.word	0x00006298
    c73c:	fffff2cf 	.word	0xfffff2cf
    c740:	000000cc 	.word	0x000000cc
    c744:	00000368 	.word	0x00000368

0000c748 <udd_ep_run>:
{
    c748:	b5f0      	push	{r4, r5, r6, r7, lr}
    c74a:	46c6      	mov	lr, r8
    c74c:	b500      	push	{lr}
    c74e:	b086      	sub	sp, #24
    c750:	0005      	movs	r5, r0
    c752:	9102      	str	r1, [sp, #8]
    c754:	9201      	str	r2, [sp, #4]
    c756:	9300      	str	r3, [sp, #0]
    c758:	4e81      	ldr	r6, [pc, #516]	; (c960 <udd_ep_run+0x218>)
    c75a:	447e      	add	r6, pc
	ep_num = ep & USB_EP_ADDR_MASK;
    c75c:	230f      	movs	r3, #15
    c75e:	4003      	ands	r3, r0
    c760:	4698      	mov	r8, r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    c762:	2b03      	cmp	r3, #3
    c764:	d905      	bls.n	c772 <udd_ep_run+0x2a>
		return false;
    c766:	2400      	movs	r4, #0
}
    c768:	0020      	movs	r0, r4
    c76a:	b006      	add	sp, #24
    c76c:	bc04      	pop	{r2}
    c76e:	4690      	mov	r8, r2
    c770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    c772:	4b7c      	ldr	r3, [pc, #496]	; (c964 <udd_ep_run+0x21c>)
    c774:	58f3      	ldr	r3, [r6, r3]
    c776:	9303      	str	r3, [sp, #12]
    c778:	4798      	blx	r3
    c77a:	1e04      	subs	r4, r0, #0
    c77c:	d000      	beq.n	c780 <udd_ep_run+0x38>
    c77e:	e0e8      	b.n	c952 <udd_ep_run+0x20a>
	ptr_job = udd_ep_get_job(ep);
    c780:	0028      	movs	r0, r5
    c782:	4b79      	ldr	r3, [pc, #484]	; (c968 <udd_ep_run+0x220>)
    c784:	447b      	add	r3, pc
    c786:	4798      	blx	r3
    c788:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c78a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c78e:	425a      	negs	r2, r3
    c790:	4153      	adcs	r3, r2
    c792:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    c794:	b672      	cpsid	i
    c796:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c79a:	4b74      	ldr	r3, [pc, #464]	; (c96c <udd_ep_run+0x224>)
    c79c:	58f3      	ldr	r3, [r6, r3]
    c79e:	9303      	str	r3, [sp, #12]
    c7a0:	2300      	movs	r3, #0
    c7a2:	9a03      	ldr	r2, [sp, #12]
    c7a4:	7013      	strb	r3, [r2, #0]
	return flags;
    c7a6:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    c7a8:	7c83      	ldrb	r3, [r0, #18]
    c7aa:	07db      	lsls	r3, r3, #31
    c7ac:	d50b      	bpl.n	c7c6 <udd_ep_run+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
    c7ae:	2a00      	cmp	r2, #0
    c7b0:	d0da      	beq.n	c768 <udd_ep_run+0x20>
		cpu_irq_enable();
    c7b2:	4b6e      	ldr	r3, [pc, #440]	; (c96c <udd_ep_run+0x224>)
    c7b4:	58f3      	ldr	r3, [r6, r3]
    c7b6:	9300      	str	r3, [sp, #0]
    c7b8:	2301      	movs	r3, #1
    c7ba:	9a00      	ldr	r2, [sp, #0]
    c7bc:	7013      	strb	r3, [r2, #0]
    c7be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c7c2:	b662      	cpsie	i
    c7c4:	e7d0      	b.n	c768 <udd_ep_run+0x20>
	ptr_job->busy = true;
    c7c6:	7c83      	ldrb	r3, [r0, #18]
    c7c8:	2101      	movs	r1, #1
    c7ca:	430b      	orrs	r3, r1
    c7cc:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    c7ce:	2a00      	cmp	r2, #0
    c7d0:	d008      	beq.n	c7e4 <udd_ep_run+0x9c>
		cpu_irq_enable();
    c7d2:	4b66      	ldr	r3, [pc, #408]	; (c96c <udd_ep_run+0x224>)
    c7d4:	58f3      	ldr	r3, [r6, r3]
    c7d6:	9303      	str	r3, [sp, #12]
    c7d8:	2301      	movs	r3, #1
    c7da:	9a03      	ldr	r2, [sp, #12]
    c7dc:	7013      	strb	r3, [r2, #0]
    c7de:	f3bf 8f5f 	dmb	sy
    c7e2:	b662      	cpsie	i
	ptr_job->buf = buf;
    c7e4:	9b01      	ldr	r3, [sp, #4]
    c7e6:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    c7e8:	9b00      	ldr	r3, [sp, #0]
    c7ea:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    c7ec:	2300      	movs	r3, #0
    c7ee:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    c7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c7f2:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    c7f4:	2301      	movs	r3, #1
    c7f6:	9a02      	ldr	r2, [sp, #8]
    c7f8:	4013      	ands	r3, r2
    c7fa:	005a      	lsls	r2, r3, #1
    c7fc:	7cbb      	ldrb	r3, [r7, #18]
    c7fe:	2102      	movs	r1, #2
    c800:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    c802:	4313      	orrs	r3, r2
    c804:	2204      	movs	r2, #4
    c806:	4393      	bics	r3, r2
    c808:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    c80a:	b26b      	sxtb	r3, r5
    c80c:	2b00      	cmp	r3, #0
    c80e:	db2d      	blt.n	c86c <udd_ep_run+0x124>
		if (0 != ptr_job->buf_size) {
    c810:	9b00      	ldr	r3, [sp, #0]
    c812:	2b00      	cmp	r3, #0
    c814:	d100      	bne.n	c818 <udd_ep_run+0xd0>
    c816:	e08f      	b.n	c938 <udd_ep_run+0x1f0>
			next_trans = ptr_job->buf_size;
    c818:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    c81a:	4b55      	ldr	r3, [pc, #340]	; (c970 <udd_ep_run+0x228>)
    c81c:	429c      	cmp	r4, r3
    c81e:	d972      	bls.n	c906 <udd_ep_run+0x1be>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    c820:	8a39      	ldrh	r1, [r7, #16]
    c822:	001c      	movs	r4, r3
    c824:	4b53      	ldr	r3, [pc, #332]	; (c974 <udd_ep_run+0x22c>)
    c826:	58f3      	ldr	r3, [r6, r3]
    c828:	9300      	str	r3, [sp, #0]
    c82a:	0020      	movs	r0, r4
    c82c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    c82e:	b289      	uxth	r1, r1
    c830:	1a63      	subs	r3, r4, r1
    c832:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    c834:	8a3b      	ldrh	r3, [r7, #16]
    c836:	429a      	cmp	r2, r3
    c838:	d26f      	bcs.n	c91a <udd_ep_run+0x1d2>
				ptr_job->b_use_out_cache_buffer = true;
    c83a:	7cba      	ldrb	r2, [r7, #18]
    c83c:	2104      	movs	r1, #4
    c83e:	430a      	orrs	r2, r1
    c840:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    c842:	4642      	mov	r2, r8
    c844:	3a01      	subs	r2, #1
    c846:	0192      	lsls	r2, r2, #6
    c848:	494b      	ldr	r1, [pc, #300]	; (c978 <udd_ep_run+0x230>)
    c84a:	5871      	ldr	r1, [r6, r1]
    c84c:	9100      	str	r1, [sp, #0]
    c84e:	468c      	mov	ip, r1
    c850:	4462      	add	r2, ip
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    c852:	494a      	ldr	r1, [pc, #296]	; (c97c <udd_ep_run+0x234>)
    c854:	5871      	ldr	r1, [r6, r1]
    c856:	9100      	str	r1, [sp, #0]
    c858:	4641      	mov	r1, r8
    c85a:	9800      	ldr	r0, [sp, #0]
    c85c:	4c48      	ldr	r4, [pc, #288]	; (c980 <udd_ep_run+0x238>)
    c85e:	5934      	ldr	r4, [r6, r4]
    c860:	9400      	str	r4, [sp, #0]
    c862:	47a0      	blx	r4
				return (STATUS_OK ==
    c864:	4244      	negs	r4, r0
    c866:	4144      	adcs	r4, r0
    c868:	b2e4      	uxtb	r4, r4
    c86a:	e77d      	b.n	c768 <udd_ep_run+0x20>
		if (0 != ptr_job->buf_size) {
    c86c:	9b00      	ldr	r3, [sp, #0]
    c86e:	2b00      	cmp	r3, #0
    c870:	d033      	beq.n	c8da <udd_ep_run+0x192>
			next_trans = ptr_job->buf_size;
    c872:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    c874:	4b3e      	ldr	r3, [pc, #248]	; (c970 <udd_ep_run+0x228>)
    c876:	429c      	cmp	r4, r3
    c878:	d909      	bls.n	c88e <udd_ep_run+0x146>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    c87a:	8a39      	ldrh	r1, [r7, #16]
    c87c:	001c      	movs	r4, r3
    c87e:	4b3d      	ldr	r3, [pc, #244]	; (c974 <udd_ep_run+0x22c>)
    c880:	58f3      	ldr	r3, [r6, r3]
    c882:	9300      	str	r3, [sp, #0]
    c884:	0020      	movs	r0, r4
    c886:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    c888:	b289      	uxth	r1, r1
    c88a:	1a63      	subs	r3, r4, r1
    c88c:	b29c      	uxth	r4, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    c88e:	7cbb      	ldrb	r3, [r7, #18]
    c890:	079b      	lsls	r3, r3, #30
    c892:	d50a      	bpl.n	c8aa <udd_ep_run+0x162>
					(0 == (next_trans % ptr_job->ep_size));
    c894:	8a39      	ldrh	r1, [r7, #16]
    c896:	4b3b      	ldr	r3, [pc, #236]	; (c984 <udd_ep_run+0x23c>)
    c898:	58f3      	ldr	r3, [r6, r3]
    c89a:	9300      	str	r3, [sp, #0]
    c89c:	0020      	movs	r0, r4
    c89e:	4798      	blx	r3
    c8a0:	b289      	uxth	r1, r1
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    c8a2:	2900      	cmp	r1, #0
    c8a4:	d017      	beq.n	c8d6 <udd_ep_run+0x18e>
    c8a6:	2200      	movs	r2, #0
    c8a8:	e000      	b.n	c8ac <udd_ep_run+0x164>
    c8aa:	2200      	movs	r2, #0
    c8ac:	0052      	lsls	r2, r2, #1
    c8ae:	7cbb      	ldrb	r3, [r7, #18]
    c8b0:	2102      	movs	r1, #2
    c8b2:	438b      	bics	r3, r1
    c8b4:	4313      	orrs	r3, r2
    c8b6:	74bb      	strb	r3, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    c8b8:	4b30      	ldr	r3, [pc, #192]	; (c97c <udd_ep_run+0x234>)
    c8ba:	58f3      	ldr	r3, [r6, r3]
    c8bc:	9300      	str	r3, [sp, #0]
    c8be:	0023      	movs	r3, r4
    c8c0:	9a01      	ldr	r2, [sp, #4]
    c8c2:	4641      	mov	r1, r8
    c8c4:	9800      	ldr	r0, [sp, #0]
    c8c6:	4c30      	ldr	r4, [pc, #192]	; (c988 <udd_ep_run+0x240>)
    c8c8:	5934      	ldr	r4, [r6, r4]
    c8ca:	9400      	str	r4, [sp, #0]
    c8cc:	47a0      	blx	r4
		return (STATUS_OK ==
    c8ce:	4244      	negs	r4, r0
    c8d0:	4144      	adcs	r4, r0
    c8d2:	b2e4      	uxtb	r4, r4
    c8d4:	e748      	b.n	c768 <udd_ep_run+0x20>
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    c8d6:	2201      	movs	r2, #1
    c8d8:	e7e8      	b.n	c8ac <udd_ep_run+0x164>
		} else if (true == ptr_job->b_shortpacket) {
    c8da:	7cbb      	ldrb	r3, [r7, #18]
    c8dc:	079b      	lsls	r3, r3, #30
    c8de:	d505      	bpl.n	c8ec <udd_ep_run+0x1a4>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    c8e0:	7cbb      	ldrb	r3, [r7, #18]
    c8e2:	2202      	movs	r2, #2
    c8e4:	4393      	bics	r3, r2
    c8e6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    c8e8:	2400      	movs	r4, #0
    c8ea:	e7e5      	b.n	c8b8 <udd_ep_run+0x170>
			ptr_job->busy = false;
    c8ec:	7cbb      	ldrb	r3, [r7, #18]
    c8ee:	2201      	movs	r2, #1
    c8f0:	4393      	bics	r3, r2
    c8f2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    c8f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d02d      	beq.n	c956 <udd_ep_run+0x20e>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    c8fa:	002a      	movs	r2, r5
    c8fc:	2100      	movs	r1, #0
    c8fe:	2000      	movs	r0, #0
    c900:	4798      	blx	r3
			return true;
    c902:	2401      	movs	r4, #1
    c904:	e730      	b.n	c768 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
    c906:	8a39      	ldrh	r1, [r7, #16]
    c908:	4b1e      	ldr	r3, [pc, #120]	; (c984 <udd_ep_run+0x23c>)
    c90a:	58f3      	ldr	r3, [r6, r3]
    c90c:	9300      	str	r3, [sp, #0]
    c90e:	0020      	movs	r0, r4
    c910:	4798      	blx	r3
    c912:	b289      	uxth	r1, r1
    c914:	1a63      	subs	r3, r4, r1
    c916:	b29a      	uxth	r2, r3
    c918:	e78c      	b.n	c834 <udd_ep_run+0xec>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    c91a:	4b18      	ldr	r3, [pc, #96]	; (c97c <udd_ep_run+0x234>)
    c91c:	58f3      	ldr	r3, [r6, r3]
    c91e:	9300      	str	r3, [sp, #0]
    c920:	0013      	movs	r3, r2
    c922:	9a01      	ldr	r2, [sp, #4]
    c924:	4641      	mov	r1, r8
    c926:	9800      	ldr	r0, [sp, #0]
    c928:	4c15      	ldr	r4, [pc, #84]	; (c980 <udd_ep_run+0x238>)
    c92a:	5934      	ldr	r4, [r6, r4]
    c92c:	9400      	str	r4, [sp, #0]
    c92e:	47a0      	blx	r4
				return (STATUS_OK ==
    c930:	4244      	negs	r4, r0
    c932:	4144      	adcs	r4, r0
    c934:	b2e4      	uxtb	r4, r4
    c936:	e717      	b.n	c768 <udd_ep_run+0x20>
			ptr_job->busy = false;
    c938:	7cbb      	ldrb	r3, [r7, #18]
    c93a:	2201      	movs	r2, #1
    c93c:	4393      	bics	r3, r2
    c93e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    c940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c942:	2b00      	cmp	r3, #0
    c944:	d009      	beq.n	c95a <udd_ep_run+0x212>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    c946:	002a      	movs	r2, r5
    c948:	2100      	movs	r1, #0
    c94a:	2000      	movs	r0, #0
    c94c:	4798      	blx	r3
			return true;
    c94e:	2401      	movs	r4, #1
    c950:	e70a      	b.n	c768 <udd_ep_run+0x20>
		return false;
    c952:	2400      	movs	r4, #0
    c954:	e708      	b.n	c768 <udd_ep_run+0x20>
			return true;
    c956:	2401      	movs	r4, #1
    c958:	e706      	b.n	c768 <udd_ep_run+0x20>
			return true;
    c95a:	2401      	movs	r4, #1
    c95c:	e704      	b.n	c768 <udd_ep_run+0x20>
    c95e:	46c0      	nop			; (mov r8, r8)
    c960:	00006232 	.word	0x00006232
    c964:	00000298 	.word	0x00000298
    c968:	fffff251 	.word	0xfffff251
    c96c:	0000016c 	.word	0x0000016c
    c970:	00001fff 	.word	0x00001fff
    c974:	000004c4 	.word	0x000004c4
    c978:	00000034 	.word	0x00000034
    c97c:	000000cc 	.word	0x000000cc
    c980:	00000214 	.word	0x00000214
    c984:	000003f0 	.word	0x000003f0
    c988:	000004f8 	.word	0x000004f8

0000c98c <udd_set_address>:
{
    c98c:	4b05      	ldr	r3, [pc, #20]	; (c9a4 <udd_set_address+0x18>)
    c98e:	447b      	add	r3, pc
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    c990:	4a05      	ldr	r2, [pc, #20]	; (c9a8 <udd_set_address+0x1c>)
    c992:	589b      	ldr	r3, [r3, r2]
    c994:	681a      	ldr	r2, [r3, #0]
    c996:	2380      	movs	r3, #128	; 0x80
    c998:	425b      	negs	r3, r3
    c99a:	4318      	orrs	r0, r3
    c99c:	b2c0      	uxtb	r0, r0
    c99e:	7290      	strb	r0, [r2, #10]
}
    c9a0:	4770      	bx	lr
    c9a2:	46c0      	nop			; (mov r8, r8)
    c9a4:	00005ffe 	.word	0x00005ffe
    c9a8:	000000cc 	.word	0x000000cc

0000c9ac <udd_getaddress>:
{
    c9ac:	4b04      	ldr	r3, [pc, #16]	; (c9c0 <udd_getaddress+0x14>)
    c9ae:	447b      	add	r3, pc
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    c9b0:	4a04      	ldr	r2, [pc, #16]	; (c9c4 <udd_getaddress+0x18>)
    c9b2:	589b      	ldr	r3, [r3, r2]
    c9b4:	681b      	ldr	r3, [r3, #0]
    c9b6:	7a98      	ldrb	r0, [r3, #10]
    c9b8:	0640      	lsls	r0, r0, #25
    c9ba:	0e40      	lsrs	r0, r0, #25
}
    c9bc:	4770      	bx	lr
    c9be:	46c0      	nop			; (mov r8, r8)
    c9c0:	00005fde 	.word	0x00005fde
    c9c4:	000000cc 	.word	0x000000cc

0000c9c8 <udd_set_setup_payload>:
{
    c9c8:	4b03      	ldr	r3, [pc, #12]	; (c9d8 <udd_set_setup_payload+0x10>)
    c9ca:	447b      	add	r3, pc
	udd_g_ctrlreq.payload = payload;
    c9cc:	4a03      	ldr	r2, [pc, #12]	; (c9dc <udd_set_setup_payload+0x14>)
    c9ce:	589b      	ldr	r3, [r3, r2]
    c9d0:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    c9d2:	8199      	strh	r1, [r3, #12]
}
    c9d4:	4770      	bx	lr
    c9d6:	46c0      	nop			; (mov r8, r8)
    c9d8:	00005fc2 	.word	0x00005fc2
    c9dc:	00000308 	.word	0x00000308

0000c9e0 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    c9e0:	b570      	push	{r4, r5, r6, lr}
    c9e2:	4d1d      	ldr	r5, [pc, #116]	; (ca58 <udd_attach+0x78>)
    c9e4:	447d      	add	r5, pc
	udd_sleep_mode(UDD_STATE_IDLE);
    c9e6:	2003      	movs	r0, #3
    c9e8:	4b1c      	ldr	r3, [pc, #112]	; (ca5c <udd_attach+0x7c>)
    c9ea:	447b      	add	r3, pc
    c9ec:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    c9ee:	4b1c      	ldr	r3, [pc, #112]	; (ca60 <udd_attach+0x80>)
    c9f0:	58ec      	ldr	r4, [r5, r3]
    c9f2:	6822      	ldr	r2, [r4, #0]
    c9f4:	8913      	ldrh	r3, [r2, #8]
    c9f6:	2101      	movs	r1, #1
    c9f8:	438b      	bics	r3, r1
    c9fa:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    c9fc:	4a19      	ldr	r2, [pc, #100]	; (ca64 <udd_attach+0x84>)
    c9fe:	447a      	add	r2, pc
    ca00:	3103      	adds	r1, #3
    ca02:	0020      	movs	r0, r4
    ca04:	4b18      	ldr	r3, [pc, #96]	; (ca68 <udd_attach+0x88>)
    ca06:	58ee      	ldr	r6, [r5, r3]
    ca08:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    ca0a:	4a18      	ldr	r2, [pc, #96]	; (ca6c <udd_attach+0x8c>)
    ca0c:	447a      	add	r2, pc
    ca0e:	2100      	movs	r1, #0
    ca10:	0020      	movs	r0, r4
    ca12:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    ca14:	4a16      	ldr	r2, [pc, #88]	; (ca70 <udd_attach+0x90>)
    ca16:	447a      	add	r2, pc
    ca18:	2101      	movs	r1, #1
    ca1a:	0020      	movs	r0, r4
    ca1c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    ca1e:	4a15      	ldr	r2, [pc, #84]	; (ca74 <udd_attach+0x94>)
    ca20:	447a      	add	r2, pc
    ca22:	2102      	movs	r1, #2
    ca24:	0020      	movs	r0, r4
    ca26:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    ca28:	2104      	movs	r1, #4
    ca2a:	0020      	movs	r0, r4
    ca2c:	4b12      	ldr	r3, [pc, #72]	; (ca78 <udd_attach+0x98>)
    ca2e:	58ed      	ldr	r5, [r5, r3]
    ca30:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    ca32:	2100      	movs	r1, #0
    ca34:	0020      	movs	r0, r4
    ca36:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    ca38:	2101      	movs	r1, #1
    ca3a:	0020      	movs	r0, r4
    ca3c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    ca3e:	2102      	movs	r1, #2
    ca40:	0020      	movs	r0, r4
    ca42:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    ca44:	4a0d      	ldr	r2, [pc, #52]	; (ca7c <udd_attach+0x9c>)
    ca46:	447a      	add	r2, pc
    ca48:	2106      	movs	r1, #6
    ca4a:	0020      	movs	r0, r4
    ca4c:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    ca4e:	2106      	movs	r1, #6
    ca50:	0020      	movs	r0, r4
    ca52:	47a8      	blx	r5
#endif
}
    ca54:	bd70      	pop	{r4, r5, r6, pc}
    ca56:	46c0      	nop			; (mov r8, r8)
    ca58:	00005fa8 	.word	0x00005fa8
    ca5c:	ffffeeeb 	.word	0xffffeeeb
    ca60:	000000cc 	.word	0x000000cc
    ca64:	fffff443 	.word	0xfffff443
    ca68:	0000007c 	.word	0x0000007c
    ca6c:	fffff875 	.word	0xfffff875
    ca70:	fffff53b 	.word	0xfffff53b
    ca74:	fffff39d 	.word	0xfffff39d
    ca78:	0000023c 	.word	0x0000023c
    ca7c:	fffff32b 	.word	0xfffff32b

0000ca80 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    ca80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca82:	b085      	sub	sp, #20
    ca84:	4c24      	ldr	r4, [pc, #144]	; (cb18 <udd_enable+0x98>)
    ca86:	447c      	add	r4, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ca88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ca8c:	425a      	negs	r2, r3
    ca8e:	4153      	adcs	r3, r2
    ca90:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    ca92:	b672      	cpsid	i
    ca94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ca98:	4b20      	ldr	r3, [pc, #128]	; (cb1c <udd_enable+0x9c>)
    ca9a:	58e3      	ldr	r3, [r4, r3]
    ca9c:	9300      	str	r3, [sp, #0]
    ca9e:	2700      	movs	r7, #0
    caa0:	701f      	strb	r7, [r3, #0]
	return flags;
    caa2:	9d02      	ldr	r5, [sp, #8]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    caa4:	ae03      	add	r6, sp, #12
    caa6:	0030      	movs	r0, r6
    caa8:	4b1d      	ldr	r3, [pc, #116]	; (cb20 <udd_enable+0xa0>)
    caaa:	58e3      	ldr	r3, [r4, r3]
    caac:	9300      	str	r3, [sp, #0]
    caae:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    cab0:	70b7      	strb	r7, [r6, #2]
	usb_init(&usb_device, USB, &config_usb);
    cab2:	4b1c      	ldr	r3, [pc, #112]	; (cb24 <udd_enable+0xa4>)
    cab4:	58e3      	ldr	r3, [r4, r3]
    cab6:	9300      	str	r3, [sp, #0]
    cab8:	0032      	movs	r2, r6
    caba:	491b      	ldr	r1, [pc, #108]	; (cb28 <udd_enable+0xa8>)
    cabc:	0018      	movs	r0, r3
    cabe:	4b1b      	ldr	r3, [pc, #108]	; (cb2c <udd_enable+0xac>)
    cac0:	58e3      	ldr	r3, [r4, r3]
    cac2:	9301      	str	r3, [sp, #4]
    cac4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    cac6:	9800      	ldr	r0, [sp, #0]
    cac8:	4b19      	ldr	r3, [pc, #100]	; (cb30 <udd_enable+0xb0>)
    caca:	58e3      	ldr	r3, [r4, r3]
    cacc:	9300      	str	r3, [sp, #0]
    cace:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    cad0:	4b18      	ldr	r3, [pc, #96]	; (cb34 <udd_enable+0xb4>)
    cad2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    cad4:	069b      	lsls	r3, r3, #26
    cad6:	d41a      	bmi.n	cb0e <udd_enable+0x8e>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    cad8:	4b16      	ldr	r3, [pc, #88]	; (cb34 <udd_enable+0xb4>)
    cada:	68da      	ldr	r2, [r3, #12]
    cadc:	23d0      	movs	r3, #208	; 0xd0
    cade:	4013      	ands	r3, r2
    cae0:	2bd0      	cmp	r3, #208	; 0xd0
    cae2:	d1f9      	bne.n	cad8 <udd_enable+0x58>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    cae4:	2001      	movs	r0, #1
    cae6:	4b14      	ldr	r3, [pc, #80]	; (cb38 <udd_enable+0xb8>)
    cae8:	447b      	add	r3, pc
    caea:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    caec:	4b13      	ldr	r3, [pc, #76]	; (cb3c <udd_enable+0xbc>)
    caee:	58e3      	ldr	r3, [r4, r3]
    caf0:	9300      	str	r3, [sp, #0]
    caf2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    caf4:	2d00      	cmp	r5, #0
    caf6:	d008      	beq.n	cb0a <udd_enable+0x8a>
		cpu_irq_enable();
    caf8:	4b08      	ldr	r3, [pc, #32]	; (cb1c <udd_enable+0x9c>)
    cafa:	58e3      	ldr	r3, [r4, r3]
    cafc:	9300      	str	r3, [sp, #0]
    cafe:	2301      	movs	r3, #1
    cb00:	9a00      	ldr	r2, [sp, #0]
    cb02:	7013      	strb	r3, [r2, #0]
    cb04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cb08:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    cb0a:	b005      	add	sp, #20
    cb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    cb0e:	4b09      	ldr	r3, [pc, #36]	; (cb34 <udd_enable+0xb4>)
    cb10:	68db      	ldr	r3, [r3, #12]
    cb12:	06db      	lsls	r3, r3, #27
    cb14:	d5fb      	bpl.n	cb0e <udd_enable+0x8e>
    cb16:	e7e5      	b.n	cae4 <udd_enable+0x64>
    cb18:	00005f06 	.word	0x00005f06
    cb1c:	0000016c 	.word	0x0000016c
    cb20:	00000118 	.word	0x00000118
    cb24:	000000cc 	.word	0x000000cc
    cb28:	41005000 	.word	0x41005000
    cb2c:	00000124 	.word	0x00000124
    cb30:	000004c0 	.word	0x000004c0
    cb34:	40000800 	.word	0x40000800
    cb38:	ffffeded 	.word	0xffffeded
    cb3c:	000003a0 	.word	0x000003a0

0000cb40 <_usb_device_interrupt_handler>:

	return STATUS_OK;
}

static void _usb_device_interrupt_handler(void)
{
    cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb42:	46c6      	mov	lr, r8
    cb44:	b500      	push	{lr}
    cb46:	b082      	sub	sp, #8
    cb48:	4bc1      	ldr	r3, [pc, #772]	; (ce50 <_usb_device_interrupt_handler+0x310>)
    cb4a:	447b      	add	r3, pc
    cb4c:	4698      	mov	r8, r3
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    cb4e:	4bc1      	ldr	r3, [pc, #772]	; (ce54 <_usb_device_interrupt_handler+0x314>)
    cb50:	447b      	add	r3, pc
    cb52:	6818      	ldr	r0, [r3, #0]
    cb54:	6807      	ldr	r7, [r0, #0]
    cb56:	8c3e      	ldrh	r6, [r7, #32]
    cb58:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    cb5a:	2e00      	cmp	r6, #0
    cb5c:	d000      	beq.n	cb60 <_usb_device_interrupt_handler+0x20>
    cb5e:	e174      	b.n	ce4a <_usb_device_interrupt_handler+0x30a>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    cb60:	8bbf      	ldrh	r7, [r7, #28]
    cb62:	b2bf      	uxth	r7, r7
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    cb64:	23ab      	movs	r3, #171	; 0xab
    cb66:	005b      	lsls	r3, r3, #1
    cb68:	5ac6      	ldrh	r6, [r0, r3]
				_usb_instances->device_registered_callback_mask;
    cb6a:	3b02      	subs	r3, #2
    cb6c:	5ac3      	ldrh	r3, [r0, r3]
		flags_run = flags &
    cb6e:	403e      	ands	r6, r7
    cb70:	401e      	ands	r6, r3

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    cb72:	2400      	movs	r4, #0
    cb74:	e00a      	b.n	cb8c <_usb_device_interrupt_handler+0x4c>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    cb76:	4bb8      	ldr	r3, [pc, #736]	; (ce58 <_usb_device_interrupt_handler+0x318>)
    cb78:	447b      	add	r3, pc
    cb7a:	6818      	ldr	r0, [r3, #0]
    cb7c:	0023      	movs	r3, r4
    cb7e:	332e      	adds	r3, #46	; 0x2e
    cb80:	009b      	lsls	r3, r3, #2
    cb82:	581b      	ldr	r3, [r3, r0]
    cb84:	49b5      	ldr	r1, [pc, #724]	; (ce5c <_usb_device_interrupt_handler+0x31c>)
    cb86:	4479      	add	r1, pc
    cb88:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    cb8a:	3401      	adds	r4, #1
    cb8c:	2c06      	cmp	r4, #6
    cb8e:	dc31      	bgt.n	cbf4 <_usb_device_interrupt_handler+0xb4>
			if (flags & _usb_device_irq_bits[i]) {
    cb90:	0063      	lsls	r3, r4, #1
    cb92:	4ab3      	ldr	r2, [pc, #716]	; (ce60 <_usb_device_interrupt_handler+0x320>)
    cb94:	447a      	add	r2, pc
    cb96:	5a9b      	ldrh	r3, [r3, r2]
    cb98:	423b      	tst	r3, r7
    cb9a:	d004      	beq.n	cba6 <_usb_device_interrupt_handler+0x66>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    cb9c:	4ab1      	ldr	r2, [pc, #708]	; (ce64 <_usb_device_interrupt_handler+0x324>)
    cb9e:	447a      	add	r2, pc
    cba0:	6812      	ldr	r2, [r2, #0]
    cba2:	6812      	ldr	r2, [r2, #0]
    cba4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    cba6:	4233      	tst	r3, r6
    cba8:	d0ef      	beq.n	cb8a <_usb_device_interrupt_handler+0x4a>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    cbaa:	2c06      	cmp	r4, #6
    cbac:	d1e3      	bne.n	cb76 <_usb_device_interrupt_handler+0x36>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    cbae:	4bae      	ldr	r3, [pc, #696]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cbb0:	4642      	mov	r2, r8
    cbb2:	58d3      	ldr	r3, [r2, r3]
    cbb4:	9300      	str	r3, [sp, #0]
    cbb6:	891b      	ldrh	r3, [r3, #8]
    cbb8:	045b      	lsls	r3, r3, #17
    cbba:	0d5b      	lsrs	r3, r3, #21
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    cbbc:	2280      	movs	r2, #128	; 0x80
    cbbe:	0052      	lsls	r2, r2, #1
    cbc0:	4013      	ands	r3, r2
					device_callback_lpm_wakeup_enable =
    cbc2:	4aaa      	ldr	r2, [pc, #680]	; (ce6c <_usb_device_interrupt_handler+0x32c>)
    cbc4:	447a      	add	r2, pc
    cbc6:	6013      	str	r3, [r2, #0]
    cbc8:	e7d5      	b.n	cb76 <_usb_device_interrupt_handler+0x36>
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    cbca:	001a      	movs	r2, r3
    cbcc:	3208      	adds	r2, #8
    cbce:	0152      	lsls	r2, r2, #5
    cbd0:	18ba      	adds	r2, r7, r2
    cbd2:	79d2      	ldrb	r2, [r2, #7]
    cbd4:	0652      	lsls	r2, r2, #25
    cbd6:	d511      	bpl.n	cbfc <_usb_device_interrupt_handler+0xbc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    cbd8:	001a      	movs	r2, r3
    cbda:	3208      	adds	r2, #8
    cbdc:	0152      	lsls	r2, r2, #5
    cbde:	18bf      	adds	r7, r7, r2
    cbe0:	2240      	movs	r2, #64	; 0x40
    cbe2:	71fa      	strb	r2, [r7, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    cbe4:	3ac0      	subs	r2, #192	; 0xc0
    cbe6:	4313      	orrs	r3, r2
    cbe8:	4aa1      	ldr	r2, [pc, #644]	; (ce70 <_usb_device_interrupt_handler+0x330>)
    cbea:	447a      	add	r2, pc
    cbec:	7193      	strb	r3, [r2, #6]
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    cbee:	2360      	movs	r3, #96	; 0x60
    cbf0:	420b      	tst	r3, r1
    cbf2:	d115      	bne.n	cc20 <_usb_device_interrupt_handler+0xe0>
					return;
				}
			}
		}
	}
}
    cbf4:	b002      	add	sp, #8
    cbf6:	bc04      	pop	{r2}
    cbf8:	4690      	mov	r8, r2
    cbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    cbfc:	9c00      	ldr	r4, [sp, #0]
    cbfe:	0022      	movs	r2, r4
    cc00:	3208      	adds	r2, #8
    cc02:	0152      	lsls	r2, r2, #5
    cc04:	18ba      	adds	r2, r7, r2
    cc06:	79d2      	ldrb	r2, [r2, #7]
    cc08:	0692      	lsls	r2, r2, #26
    cc0a:	d5f0      	bpl.n	cbee <_usb_device_interrupt_handler+0xae>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    cc0c:	0022      	movs	r2, r4
    cc0e:	3208      	adds	r2, #8
    cc10:	0152      	lsls	r2, r2, #5
    cc12:	18bf      	adds	r7, r7, r2
    cc14:	2220      	movs	r2, #32
    cc16:	71fa      	strb	r2, [r7, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    cc18:	4a96      	ldr	r2, [pc, #600]	; (ce74 <_usb_device_interrupt_handler+0x334>)
    cc1a:	447a      	add	r2, pc
    cc1c:	7193      	strb	r3, [r2, #6]
    cc1e:	e7e6      	b.n	cbee <_usb_device_interrupt_handler+0xae>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    cc20:	9b00      	ldr	r3, [sp, #0]
    cc22:	011b      	lsls	r3, r3, #4
    cc24:	18c3      	adds	r3, r0, r3
    cc26:	33e0      	adds	r3, #224	; 0xe0
    cc28:	681b      	ldr	r3, [r3, #0]
    cc2a:	4993      	ldr	r1, [pc, #588]	; (ce78 <_usb_device_interrupt_handler+0x338>)
    cc2c:	4479      	add	r1, pc
    cc2e:	4798      	blx	r3
    cc30:	e7e0      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    cc32:	9a00      	ldr	r2, [sp, #0]
    cc34:	0013      	movs	r3, r2
    cc36:	3308      	adds	r3, #8
    cc38:	015b      	lsls	r3, r3, #5
    cc3a:	18ff      	adds	r7, r7, r3
    cc3c:	2310      	movs	r3, #16
    cc3e:	71fb      	strb	r3, [r7, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    cc40:	1883      	adds	r3, r0, r2
    cc42:	3361      	adds	r3, #97	; 0x61
    cc44:	33ff      	adds	r3, #255	; 0xff
    cc46:	781b      	ldrb	r3, [r3, #0]
    cc48:	06db      	lsls	r3, r3, #27
    cc4a:	d5d3      	bpl.n	cbf4 <_usb_device_interrupt_handler+0xb4>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    cc4c:	4b86      	ldr	r3, [pc, #536]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cc4e:	4642      	mov	r2, r8
    cc50:	58d3      	ldr	r3, [r2, r3]
    cc52:	9301      	str	r3, [sp, #4]
    cc54:	9a00      	ldr	r2, [sp, #0]
    cc56:	0153      	lsls	r3, r2, #5
    cc58:	9901      	ldr	r1, [sp, #4]
    cc5a:	468c      	mov	ip, r1
    cc5c:	4463      	add	r3, ip
    cc5e:	685b      	ldr	r3, [r3, #4]
    cc60:	049b      	lsls	r3, r3, #18
    cc62:	0c9b      	lsrs	r3, r3, #18
    cc64:	4985      	ldr	r1, [pc, #532]	; (ce7c <_usb_device_interrupt_handler+0x33c>)
    cc66:	4479      	add	r1, pc
    cc68:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    cc6a:	0113      	lsls	r3, r2, #4
    cc6c:	18c3      	adds	r3, r0, r3
    cc6e:	33dc      	adds	r3, #220	; 0xdc
    cc70:	681b      	ldr	r3, [r3, #0]
    cc72:	4798      	blx	r3
    cc74:	e7be      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    cc76:	9c00      	ldr	r4, [sp, #0]
    cc78:	0022      	movs	r2, r4
    cc7a:	3208      	adds	r2, #8
    cc7c:	0152      	lsls	r2, r2, #5
    cc7e:	18ba      	adds	r2, r7, r2
    cc80:	79d2      	ldrb	r2, [r2, #7]
    cc82:	0792      	lsls	r2, r2, #30
    cc84:	d523      	bpl.n	ccce <_usb_device_interrupt_handler+0x18e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    cc86:	0022      	movs	r2, r4
    cc88:	3208      	adds	r2, #8
    cc8a:	0152      	lsls	r2, r2, #5
    cc8c:	18bf      	adds	r7, r7, r2
    cc8e:	2202      	movs	r2, #2
    cc90:	71fa      	strb	r2, [r7, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    cc92:	4a7b      	ldr	r2, [pc, #492]	; (ce80 <_usb_device_interrupt_handler+0x340>)
    cc94:	447a      	add	r2, pc
    cc96:	2680      	movs	r6, #128	; 0x80
    cc98:	4276      	negs	r6, r6
    cc9a:	4333      	orrs	r3, r6
    cc9c:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    cc9e:	4b72      	ldr	r3, [pc, #456]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cca0:	4645      	mov	r5, r8
    cca2:	58eb      	ldr	r3, [r5, r3]
    cca4:	9301      	str	r3, [sp, #4]
    cca6:	0163      	lsls	r3, r4, #5
    cca8:	9c01      	ldr	r4, [sp, #4]
    ccaa:	46a4      	mov	ip, r4
    ccac:	4463      	add	r3, ip
    ccae:	3310      	adds	r3, #16
    ccb0:	685b      	ldr	r3, [r3, #4]
    ccb2:	049b      	lsls	r3, r3, #18
    ccb4:	0c9b      	lsrs	r3, r3, #18
    ccb6:	8053      	strh	r3, [r2, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    ccb8:	078b      	lsls	r3, r1, #30
    ccba:	d09b      	beq.n	cbf4 <_usb_device_interrupt_handler+0xb4>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    ccbc:	9b00      	ldr	r3, [sp, #0]
    ccbe:	330d      	adds	r3, #13
    ccc0:	011b      	lsls	r3, r3, #4
    ccc2:	18c3      	adds	r3, r0, r3
    ccc4:	685b      	ldr	r3, [r3, #4]
    ccc6:	496f      	ldr	r1, [pc, #444]	; (ce84 <_usb_device_interrupt_handler+0x344>)
    ccc8:	4479      	add	r1, pc
    ccca:	4798      	blx	r3
    cccc:	e792      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    ccce:	9c00      	ldr	r4, [sp, #0]
    ccd0:	0022      	movs	r2, r4
    ccd2:	3208      	adds	r2, #8
    ccd4:	0152      	lsls	r2, r2, #5
    ccd6:	18ba      	adds	r2, r7, r2
    ccd8:	79d2      	ldrb	r2, [r2, #7]
    ccda:	07d2      	lsls	r2, r2, #31
    ccdc:	d5ec      	bpl.n	ccb8 <_usb_device_interrupt_handler+0x178>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    ccde:	0022      	movs	r2, r4
    cce0:	3208      	adds	r2, #8
    cce2:	0152      	lsls	r2, r2, #5
    cce4:	18bf      	adds	r7, r7, r2
    cce6:	2201      	movs	r2, #1
    cce8:	71fa      	strb	r2, [r7, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    ccea:	4e67      	ldr	r6, [pc, #412]	; (ce88 <_usb_device_interrupt_handler+0x348>)
    ccec:	447e      	add	r6, pc
    ccee:	71b3      	strb	r3, [r6, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    ccf0:	4b5d      	ldr	r3, [pc, #372]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    ccf2:	4642      	mov	r2, r8
    ccf4:	58d3      	ldr	r3, [r2, r3]
    ccf6:	9301      	str	r3, [sp, #4]
    ccf8:	0162      	lsls	r2, r4, #5
    ccfa:	469c      	mov	ip, r3
    ccfc:	4462      	add	r2, ip
    ccfe:	6853      	ldr	r3, [r2, #4]
    cd00:	049b      	lsls	r3, r3, #18
    cd02:	0c9b      	lsrs	r3, r3, #18
    cd04:	8033      	strh	r3, [r6, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    cd06:	6853      	ldr	r3, [r2, #4]
    cd08:	011b      	lsls	r3, r3, #4
    cd0a:	0c9b      	lsrs	r3, r3, #18
    cd0c:	80b3      	strh	r3, [r6, #4]
    cd0e:	e7d3      	b.n	ccb8 <_usb_device_interrupt_handler+0x178>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    cd10:	9c00      	ldr	r4, [sp, #0]
    cd12:	0022      	movs	r2, r4
    cd14:	3208      	adds	r2, #8
    cd16:	0152      	lsls	r2, r2, #5
    cd18:	18ba      	adds	r2, r7, r2
    cd1a:	79d2      	ldrb	r2, [r2, #7]
    cd1c:	0752      	lsls	r2, r2, #29
    cd1e:	d400      	bmi.n	cd22 <_usb_device_interrupt_handler+0x1e2>
    cd20:	e086      	b.n	ce30 <_usb_device_interrupt_handler+0x2f0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    cd22:	0022      	movs	r2, r4
    cd24:	3208      	adds	r2, #8
    cd26:	0152      	lsls	r2, r2, #5
    cd28:	18bf      	adds	r7, r7, r2
    cd2a:	2204      	movs	r2, #4
    cd2c:	71fa      	strb	r2, [r7, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    cd2e:	4a4e      	ldr	r2, [pc, #312]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cd30:	4645      	mov	r5, r8
    cd32:	58aa      	ldr	r2, [r5, r2]
    cd34:	9201      	str	r2, [sp, #4]
    cd36:	0162      	lsls	r2, r4, #5
    cd38:	9d01      	ldr	r5, [sp, #4]
    cd3a:	46ac      	mov	ip, r5
    cd3c:	4462      	add	r2, ip
    cd3e:	7a92      	ldrb	r2, [r2, #10]
    cd40:	0792      	lsls	r2, r2, #30
    cd42:	d50b      	bpl.n	cd5c <_usb_device_interrupt_handler+0x21c>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    cd44:	4a48      	ldr	r2, [pc, #288]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cd46:	4645      	mov	r5, r8
    cd48:	58aa      	ldr	r2, [r5, r2]
    cd4a:	9201      	str	r2, [sp, #4]
    cd4c:	0162      	lsls	r2, r4, #5
    cd4e:	9c01      	ldr	r4, [sp, #4]
    cd50:	46a4      	mov	ip, r4
    cd52:	4462      	add	r2, ip
    cd54:	7a95      	ldrb	r5, [r2, #10]
    cd56:	2602      	movs	r6, #2
    cd58:	43b5      	bics	r5, r6
    cd5a:	7295      	strb	r5, [r2, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    cd5c:	4a4b      	ldr	r2, [pc, #300]	; (ce8c <_usb_device_interrupt_handler+0x34c>)
    cd5e:	447a      	add	r2, pc
    cd60:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    cd62:	9b00      	ldr	r3, [sp, #0]
    cd64:	3308      	adds	r3, #8
    cd66:	015b      	lsls	r3, r3, #5
    cd68:	6802      	ldr	r2, [r0, #0]
    cd6a:	4694      	mov	ip, r2
    cd6c:	4463      	add	r3, ip
    cd6e:	79db      	ldrb	r3, [r3, #7]
    cd70:	07db      	lsls	r3, r3, #31
    cd72:	d55d      	bpl.n	ce30 <_usb_device_interrupt_handler+0x2f0>
    cd74:	e73e      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    cd76:	3301      	adds	r3, #1
    cd78:	b2db      	uxtb	r3, r3
    cd7a:	2b07      	cmp	r3, #7
    cd7c:	d900      	bls.n	cd80 <_usb_device_interrupt_handler+0x240>
    cd7e:	e739      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
			if (ep_inst & (1 << i)) {
    cd80:	9300      	str	r3, [sp, #0]
    cd82:	0032      	movs	r2, r6
    cd84:	411a      	asrs	r2, r3
    cd86:	07d2      	lsls	r2, r2, #31
    cd88:	d5f5      	bpl.n	cd76 <_usb_device_interrupt_handler+0x236>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    cd8a:	001a      	movs	r2, r3
    cd8c:	3208      	adds	r2, #8
    cd8e:	0152      	lsls	r2, r2, #5
    cd90:	18ba      	adds	r2, r7, r2
    cd92:	79d2      	ldrb	r2, [r2, #7]
    cd94:	b2d2      	uxtb	r2, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    cd96:	18c1      	adds	r1, r0, r3
    cd98:	000c      	movs	r4, r1
    cd9a:	3461      	adds	r4, #97	; 0x61
    cd9c:	34ff      	adds	r4, #255	; 0xff
    cd9e:	7825      	ldrb	r5, [r4, #0]
						_usb_instances->device_endpoint_registered_callback_mask[i];
    cda0:	3159      	adds	r1, #89	; 0x59
    cda2:	31ff      	adds	r1, #255	; 0xff
    cda4:	780c      	ldrb	r4, [r1, #0]
    cda6:	0029      	movs	r1, r5
    cda8:	4011      	ands	r1, r2
    cdaa:	4021      	ands	r1, r4
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    cdac:	2460      	movs	r4, #96	; 0x60
    cdae:	4214      	tst	r4, r2
    cdb0:	d000      	beq.n	cdb4 <_usb_device_interrupt_handler+0x274>
    cdb2:	e70a      	b.n	cbca <_usb_device_interrupt_handler+0x8a>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cdb4:	06d4      	lsls	r4, r2, #27
    cdb6:	d500      	bpl.n	cdba <_usb_device_interrupt_handler+0x27a>
    cdb8:	e73b      	b.n	cc32 <_usb_device_interrupt_handler+0xf2>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    cdba:	0794      	lsls	r4, r2, #30
    cdbc:	d000      	beq.n	cdc0 <_usb_device_interrupt_handler+0x280>
    cdbe:	e75a      	b.n	cc76 <_usb_device_interrupt_handler+0x136>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    cdc0:	240c      	movs	r4, #12
    cdc2:	4214      	tst	r4, r2
    cdc4:	d0d7      	beq.n	cd76 <_usb_device_interrupt_handler+0x236>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    cdc6:	9c00      	ldr	r4, [sp, #0]
    cdc8:	0022      	movs	r2, r4
    cdca:	3208      	adds	r2, #8
    cdcc:	0152      	lsls	r2, r2, #5
    cdce:	18ba      	adds	r2, r7, r2
    cdd0:	79d2      	ldrb	r2, [r2, #7]
    cdd2:	0712      	lsls	r2, r2, #28
    cdd4:	d59c      	bpl.n	cd10 <_usb_device_interrupt_handler+0x1d0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    cdd6:	0022      	movs	r2, r4
    cdd8:	3208      	adds	r2, #8
    cdda:	0152      	lsls	r2, r2, #5
    cddc:	18bf      	adds	r7, r7, r2
    cdde:	2208      	movs	r2, #8
    cde0:	71fa      	strb	r2, [r7, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    cde2:	4a21      	ldr	r2, [pc, #132]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cde4:	4645      	mov	r5, r8
    cde6:	58aa      	ldr	r2, [r5, r2]
    cde8:	9201      	str	r2, [sp, #4]
    cdea:	0162      	lsls	r2, r4, #5
    cdec:	9d01      	ldr	r5, [sp, #4]
    cdee:	46ac      	mov	ip, r5
    cdf0:	4462      	add	r2, ip
    cdf2:	7e92      	ldrb	r2, [r2, #26]
    cdf4:	0792      	lsls	r2, r2, #30
    cdf6:	d50b      	bpl.n	ce10 <_usb_device_interrupt_handler+0x2d0>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    cdf8:	4a1b      	ldr	r2, [pc, #108]	; (ce68 <_usb_device_interrupt_handler+0x328>)
    cdfa:	4645      	mov	r5, r8
    cdfc:	58aa      	ldr	r2, [r5, r2]
    cdfe:	9201      	str	r2, [sp, #4]
    ce00:	0162      	lsls	r2, r4, #5
    ce02:	9c01      	ldr	r4, [sp, #4]
    ce04:	46a4      	mov	ip, r4
    ce06:	4462      	add	r2, ip
    ce08:	7e95      	ldrb	r5, [r2, #26]
    ce0a:	2602      	movs	r6, #2
    ce0c:	43b5      	bics	r5, r6
    ce0e:	7695      	strb	r5, [r2, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    ce10:	2280      	movs	r2, #128	; 0x80
    ce12:	4252      	negs	r2, r2
    ce14:	4313      	orrs	r3, r2
    ce16:	4a1e      	ldr	r2, [pc, #120]	; (ce90 <_usb_device_interrupt_handler+0x350>)
    ce18:	447a      	add	r2, pc
    ce1a:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ce1c:	9b00      	ldr	r3, [sp, #0]
    ce1e:	3308      	adds	r3, #8
    ce20:	015b      	lsls	r3, r3, #5
    ce22:	6802      	ldr	r2, [r0, #0]
    ce24:	4694      	mov	ip, r2
    ce26:	4463      	add	r3, ip
    ce28:	79db      	ldrb	r3, [r3, #7]
    ce2a:	079b      	lsls	r3, r3, #30
    ce2c:	d500      	bpl.n	ce30 <_usb_device_interrupt_handler+0x2f0>
    ce2e:	e6e1      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    ce30:	230c      	movs	r3, #12
    ce32:	420b      	tst	r3, r1
    ce34:	d100      	bne.n	ce38 <_usb_device_interrupt_handler+0x2f8>
    ce36:	e6dd      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    ce38:	9b00      	ldr	r3, [sp, #0]
    ce3a:	011b      	lsls	r3, r3, #4
    ce3c:	18c3      	adds	r3, r0, r3
    ce3e:	33d8      	adds	r3, #216	; 0xd8
    ce40:	681b      	ldr	r3, [r3, #0]
    ce42:	4914      	ldr	r1, [pc, #80]	; (ce94 <_usb_device_interrupt_handler+0x354>)
    ce44:	4479      	add	r1, pc
    ce46:	4798      	blx	r3
    ce48:	e6d4      	b.n	cbf4 <_usb_device_interrupt_handler+0xb4>
    ce4a:	2300      	movs	r3, #0
    ce4c:	e795      	b.n	cd7a <_usb_device_interrupt_handler+0x23a>
    ce4e:	46c0      	nop			; (mov r8, r8)
    ce50:	00005e42 	.word	0x00005e42
    ce54:	1fff4054 	.word	0x1fff4054
    ce58:	1fff402c 	.word	0x1fff402c
    ce5c:	1fff4022 	.word	0x1fff4022
    ce60:	00005c10 	.word	0x00005c10
    ce64:	1fff4006 	.word	0x1fff4006
    ce68:	00000038 	.word	0x00000038
    ce6c:	1fff3fe4 	.word	0x1fff3fe4
    ce70:	1fff3fc2 	.word	0x1fff3fc2
    ce74:	1fff3f92 	.word	0x1fff3f92
    ce78:	1fff3f80 	.word	0x1fff3f80
    ce7c:	1fff3f46 	.word	0x1fff3f46
    ce80:	1fff3f18 	.word	0x1fff3f18
    ce84:	1fff3ee4 	.word	0x1fff3ee4
    ce88:	1fff3ec0 	.word	0x1fff3ec0
    ce8c:	1fff3e4e 	.word	0x1fff3e4e
    ce90:	1fff3d94 	.word	0x1fff3d94
    ce94:	1fff3d68 	.word	0x1fff3d68

0000ce98 <_usb_host_interrupt_handler>:
{
    ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce9a:	b083      	sub	sp, #12
    ce9c:	4d89      	ldr	r5, [pc, #548]	; (d0c4 <_usb_host_interrupt_handler+0x22c>)
    ce9e:	447d      	add	r5, pc
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    cea0:	4b89      	ldr	r3, [pc, #548]	; (d0c8 <_usb_host_interrupt_handler+0x230>)
    cea2:	447b      	add	r3, pc
    cea4:	681f      	ldr	r7, [r3, #0]
    cea6:	683e      	ldr	r6, [r7, #0]
    cea8:	8c33      	ldrh	r3, [r6, #32]
    ceaa:	b29b      	uxth	r3, r3
    ceac:	2b00      	cmp	r3, #0
    ceae:	d100      	bne.n	ceb2 <_usb_host_interrupt_handler+0x1a>
    ceb0:	e0c9      	b.n	d046 <_usb_host_interrupt_handler+0x1ae>
    ceb2:	8c30      	ldrh	r0, [r6, #32]
    ceb4:	b280      	uxth	r0, r0
    ceb6:	4b85      	ldr	r3, [pc, #532]	; (d0cc <_usb_host_interrupt_handler+0x234>)
    ceb8:	58eb      	ldr	r3, [r5, r3]
    ceba:	9301      	str	r3, [sp, #4]
    cebc:	4798      	blx	r3
    cebe:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    cec0:	2c1f      	cmp	r4, #31
    cec2:	d900      	bls.n	cec6 <_usb_host_interrupt_handler+0x2e>
    cec4:	e124      	b.n	d110 <_usb_host_interrupt_handler+0x278>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    cec6:	0023      	movs	r3, r4
    cec8:	3308      	adds	r3, #8
    ceca:	015b      	lsls	r3, r3, #5
    cecc:	18f6      	adds	r6, r6, r3
    cece:	79f6      	ldrb	r6, [r6, #7]
    ced0:	b2f6      	uxtb	r6, r6
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    ced2:	07b3      	lsls	r3, r6, #30
    ced4:	d04f      	beq.n	cf76 <_usb_host_interrupt_handler+0xde>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    ced6:	2301      	movs	r3, #1
    ced8:	40a3      	lsls	r3, r4
    ceda:	4a7d      	ldr	r2, [pc, #500]	; (d0d0 <_usb_host_interrupt_handler+0x238>)
    cedc:	58aa      	ldr	r2, [r5, r2]
    cede:	6811      	ldr	r1, [r2, #0]
    cee0:	4399      	bics	r1, r3
    cee2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cee4:	0023      	movs	r3, r4
    cee6:	3308      	adds	r3, #8
    cee8:	015b      	lsls	r3, r3, #5
    ceea:	683a      	ldr	r2, [r7, #0]
    ceec:	4694      	mov	ip, r2
    ceee:	4463      	add	r3, ip
    cef0:	2203      	movs	r2, #3
    cef2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    cef4:	193b      	adds	r3, r7, r4
    cef6:	33ae      	adds	r3, #174	; 0xae
    cef8:	781b      	ldrb	r3, [r3, #0]
    cefa:	07db      	lsls	r3, r3, #31
    cefc:	d53b      	bpl.n	cf76 <_usb_host_interrupt_handler+0xde>
				pipe_callback_para.pipe_num = pipe_int;
    cefe:	4b75      	ldr	r3, [pc, #468]	; (d0d4 <_usb_host_interrupt_handler+0x23c>)
    cf00:	447b      	add	r3, pc
    cf02:	701c      	strb	r4, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    cf04:	683a      	ldr	r2, [r7, #0]
    cf06:	0023      	movs	r3, r4
    cf08:	3308      	adds	r3, #8
    cf0a:	015b      	lsls	r3, r3, #5
    cf0c:	5c9b      	ldrb	r3, [r3, r2]
    cf0e:	079b      	lsls	r3, r3, #30
    cf10:	0f9b      	lsrs	r3, r3, #30
    cf12:	2b01      	cmp	r3, #1
    cf14:	d100      	bne.n	cf18 <_usb_host_interrupt_handler+0x80>
    cf16:	e098      	b.n	d04a <_usb_host_interrupt_handler+0x1b2>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    cf18:	4b6f      	ldr	r3, [pc, #444]	; (d0d8 <_usb_host_interrupt_handler+0x240>)
    cf1a:	58eb      	ldr	r3, [r5, r3]
    cf1c:	9301      	str	r3, [sp, #4]
    cf1e:	0163      	lsls	r3, r4, #5
    cf20:	9a01      	ldr	r2, [sp, #4]
    cf22:	4694      	mov	ip, r2
    cf24:	4463      	add	r3, ip
    cf26:	685a      	ldr	r2, [r3, #4]
    cf28:	0112      	lsls	r2, r2, #4
    cf2a:	0c92      	lsrs	r2, r2, #18
    cf2c:	b290      	uxth	r0, r2
    cf2e:	496b      	ldr	r1, [pc, #428]	; (d0dc <_usb_host_interrupt_handler+0x244>)
    cf30:	4479      	add	r1, pc
    cf32:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    cf34:	685a      	ldr	r2, [r3, #4]
    cf36:	0492      	lsls	r2, r2, #18
    cf38:	0c92      	lsrs	r2, r2, #18
    cf3a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    cf3c:	6859      	ldr	r1, [r3, #4]
    cf3e:	4a68      	ldr	r2, [pc, #416]	; (d0e0 <_usb_host_interrupt_handler+0x248>)
    cf40:	400a      	ands	r2, r1
    cf42:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    cf44:	2800      	cmp	r0, #0
    cf46:	d10c      	bne.n	cf62 <_usb_host_interrupt_handler+0xca>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    cf48:	4b63      	ldr	r3, [pc, #396]	; (d0d8 <_usb_host_interrupt_handler+0x240>)
    cf4a:	58eb      	ldr	r3, [r5, r3]
    cf4c:	9301      	str	r3, [sp, #4]
    cf4e:	0163      	lsls	r3, r4, #5
    cf50:	9a01      	ldr	r2, [sp, #4]
    cf52:	4694      	mov	ip, r2
    cf54:	4463      	add	r3, ip
    cf56:	685b      	ldr	r3, [r3, #4]
    cf58:	049b      	lsls	r3, r3, #18
    cf5a:	0c9b      	lsrs	r3, r3, #18
    cf5c:	4a61      	ldr	r2, [pc, #388]	; (d0e4 <_usb_host_interrupt_handler+0x24c>)
    cf5e:	447a      	add	r2, pc
    cf60:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    cf62:	4b61      	ldr	r3, [pc, #388]	; (d0e8 <_usb_host_interrupt_handler+0x250>)
    cf64:	447b      	add	r3, pc
    cf66:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    cf68:	1ca3      	adds	r3, r4, #2
    cf6a:	011b      	lsls	r3, r3, #4
    cf6c:	18c3      	adds	r3, r0, r3
    cf6e:	685b      	ldr	r3, [r3, #4]
    cf70:	495e      	ldr	r1, [pc, #376]	; (d0ec <_usb_host_interrupt_handler+0x254>)
    cf72:	4479      	add	r1, pc
    cf74:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    cf76:	0773      	lsls	r3, r6, #29
    cf78:	d510      	bpl.n	cf9c <_usb_host_interrupt_handler+0x104>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cf7a:	2301      	movs	r3, #1
    cf7c:	40a3      	lsls	r3, r4
    cf7e:	4a54      	ldr	r2, [pc, #336]	; (d0d0 <_usb_host_interrupt_handler+0x238>)
    cf80:	58aa      	ldr	r2, [r5, r2]
    cf82:	6811      	ldr	r1, [r2, #0]
    cf84:	4399      	bics	r1, r3
    cf86:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cf88:	4b59      	ldr	r3, [pc, #356]	; (d0f0 <_usb_host_interrupt_handler+0x258>)
    cf8a:	447b      	add	r3, pc
    cf8c:	681b      	ldr	r3, [r3, #0]
    cf8e:	681b      	ldr	r3, [r3, #0]
    cf90:	0022      	movs	r2, r4
    cf92:	3208      	adds	r2, #8
    cf94:	0152      	lsls	r2, r2, #5
    cf96:	189b      	adds	r3, r3, r2
    cf98:	2204      	movs	r2, #4
    cf9a:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    cf9c:	0733      	lsls	r3, r6, #28
    cf9e:	d516      	bpl.n	cfce <_usb_host_interrupt_handler+0x136>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cfa0:	2301      	movs	r3, #1
    cfa2:	40a3      	lsls	r3, r4
    cfa4:	4a4a      	ldr	r2, [pc, #296]	; (d0d0 <_usb_host_interrupt_handler+0x238>)
    cfa6:	58aa      	ldr	r2, [r5, r2]
    cfa8:	6811      	ldr	r1, [r2, #0]
    cfaa:	4399      	bics	r1, r3
    cfac:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cfae:	4b51      	ldr	r3, [pc, #324]	; (d0f4 <_usb_host_interrupt_handler+0x25c>)
    cfb0:	447b      	add	r3, pc
    cfb2:	6818      	ldr	r0, [r3, #0]
    cfb4:	0023      	movs	r3, r4
    cfb6:	3308      	adds	r3, #8
    cfb8:	015b      	lsls	r3, r3, #5
    cfba:	6802      	ldr	r2, [r0, #0]
    cfbc:	4694      	mov	ip, r2
    cfbe:	4463      	add	r3, ip
    cfc0:	2208      	movs	r2, #8
    cfc2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    cfc4:	1903      	adds	r3, r0, r4
    cfc6:	33ae      	adds	r3, #174	; 0xae
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	079b      	lsls	r3, r3, #30
    cfcc:	d453      	bmi.n	d076 <_usb_host_interrupt_handler+0x1de>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    cfce:	06f3      	lsls	r3, r6, #27
    cfd0:	d516      	bpl.n	d000 <_usb_host_interrupt_handler+0x168>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    cfd2:	2301      	movs	r3, #1
    cfd4:	40a3      	lsls	r3, r4
    cfd6:	4a3e      	ldr	r2, [pc, #248]	; (d0d0 <_usb_host_interrupt_handler+0x238>)
    cfd8:	58aa      	ldr	r2, [r5, r2]
    cfda:	6811      	ldr	r1, [r2, #0]
    cfdc:	4399      	bics	r1, r3
    cfde:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    cfe0:	4b45      	ldr	r3, [pc, #276]	; (d0f8 <_usb_host_interrupt_handler+0x260>)
    cfe2:	447b      	add	r3, pc
    cfe4:	6818      	ldr	r0, [r3, #0]
    cfe6:	0023      	movs	r3, r4
    cfe8:	3308      	adds	r3, #8
    cfea:	015b      	lsls	r3, r3, #5
    cfec:	6802      	ldr	r2, [r0, #0]
    cfee:	4694      	mov	ip, r2
    cff0:	4463      	add	r3, ip
    cff2:	2210      	movs	r2, #16
    cff4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    cff6:	1903      	adds	r3, r0, r4
    cff8:	33ae      	adds	r3, #174	; 0xae
    cffa:	781b      	ldrb	r3, [r3, #0]
    cffc:	075b      	lsls	r3, r3, #29
    cffe:	d44d      	bmi.n	d09c <_usb_host_interrupt_handler+0x204>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    d000:	06b3      	lsls	r3, r6, #26
    d002:	d400      	bmi.n	d006 <_usb_host_interrupt_handler+0x16e>
    d004:	e0f6      	b.n	d1f4 <_usb_host_interrupt_handler+0x35c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    d006:	2301      	movs	r3, #1
    d008:	40a3      	lsls	r3, r4
    d00a:	4a31      	ldr	r2, [pc, #196]	; (d0d0 <_usb_host_interrupt_handler+0x238>)
    d00c:	58aa      	ldr	r2, [r5, r2]
    d00e:	6811      	ldr	r1, [r2, #0]
    d010:	4399      	bics	r1, r3
    d012:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    d014:	4b39      	ldr	r3, [pc, #228]	; (d0fc <_usb_host_interrupt_handler+0x264>)
    d016:	447b      	add	r3, pc
    d018:	6818      	ldr	r0, [r3, #0]
    d01a:	0023      	movs	r3, r4
    d01c:	3308      	adds	r3, #8
    d01e:	015b      	lsls	r3, r3, #5
    d020:	6802      	ldr	r2, [r0, #0]
    d022:	4694      	mov	ip, r2
    d024:	4463      	add	r3, ip
    d026:	2220      	movs	r2, #32
    d028:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    d02a:	1903      	adds	r3, r0, r4
    d02c:	33ae      	adds	r3, #174	; 0xae
    d02e:	781b      	ldrb	r3, [r3, #0]
    d030:	071b      	lsls	r3, r3, #28
    d032:	d400      	bmi.n	d036 <_usb_host_interrupt_handler+0x19e>
    d034:	e0de      	b.n	d1f4 <_usb_host_interrupt_handler+0x35c>
				pipe_callback_para.pipe_num = pipe_int;
    d036:	4932      	ldr	r1, [pc, #200]	; (d100 <_usb_host_interrupt_handler+0x268>)
    d038:	4479      	add	r1, pc
    d03a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    d03c:	0124      	lsls	r4, r4, #4
    d03e:	1904      	adds	r4, r0, r4
    d040:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d042:	4798      	blx	r3
    d044:	e0d6      	b.n	d1f4 <_usb_host_interrupt_handler+0x35c>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    d046:	2420      	movs	r4, #32
    d048:	e73a      	b.n	cec0 <_usb_host_interrupt_handler+0x28>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    d04a:	4b23      	ldr	r3, [pc, #140]	; (d0d8 <_usb_host_interrupt_handler+0x240>)
    d04c:	58eb      	ldr	r3, [r5, r3]
    d04e:	9301      	str	r3, [sp, #4]
    d050:	0163      	lsls	r3, r4, #5
    d052:	9a01      	ldr	r2, [sp, #4]
    d054:	4694      	mov	ip, r2
    d056:	4463      	add	r3, ip
    d058:	685a      	ldr	r2, [r3, #4]
    d05a:	0492      	lsls	r2, r2, #18
    d05c:	0c92      	lsrs	r2, r2, #18
    d05e:	4929      	ldr	r1, [pc, #164]	; (d104 <_usb_host_interrupt_handler+0x26c>)
    d060:	4479      	add	r1, pc
    d062:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    d064:	685a      	ldr	r2, [r3, #4]
    d066:	0112      	lsls	r2, r2, #4
    d068:	0c92      	lsrs	r2, r2, #18
    d06a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    d06c:	685a      	ldr	r2, [r3, #4]
    d06e:	0b92      	lsrs	r2, r2, #14
    d070:	0391      	lsls	r1, r2, #14
    d072:	6059      	str	r1, [r3, #4]
    d074:	e775      	b.n	cf62 <_usb_host_interrupt_handler+0xca>
				pipe_callback_para.pipe_num = pipe_int;
    d076:	4924      	ldr	r1, [pc, #144]	; (d108 <_usb_host_interrupt_handler+0x270>)
    d078:	4479      	add	r1, pc
    d07a:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    d07c:	4b16      	ldr	r3, [pc, #88]	; (d0d8 <_usb_host_interrupt_handler+0x240>)
    d07e:	58eb      	ldr	r3, [r5, r3]
    d080:	9301      	str	r3, [sp, #4]
    d082:	0163      	lsls	r3, r4, #5
    d084:	9a01      	ldr	r2, [sp, #4]
    d086:	4694      	mov	ip, r2
    d088:	4463      	add	r3, ip
    d08a:	89db      	ldrh	r3, [r3, #14]
    d08c:	221f      	movs	r2, #31
    d08e:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    d090:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    d092:	0123      	lsls	r3, r4, #4
    d094:	18c3      	adds	r3, r0, r3
    d096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d098:	4798      	blx	r3
    d09a:	e798      	b.n	cfce <_usb_host_interrupt_handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    d09c:	4a1b      	ldr	r2, [pc, #108]	; (d10c <_usb_host_interrupt_handler+0x274>)
    d09e:	447a      	add	r2, pc
    d0a0:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    d0a2:	4b0d      	ldr	r3, [pc, #52]	; (d0d8 <_usb_host_interrupt_handler+0x240>)
    d0a4:	58eb      	ldr	r3, [r5, r3]
    d0a6:	9301      	str	r3, [sp, #4]
    d0a8:	0163      	lsls	r3, r4, #5
    d0aa:	9901      	ldr	r1, [sp, #4]
    d0ac:	468c      	mov	ip, r1
    d0ae:	4463      	add	r3, ip
    d0b0:	685b      	ldr	r3, [r3, #4]
    d0b2:	011b      	lsls	r3, r3, #4
    d0b4:	0c9b      	lsrs	r3, r3, #18
    d0b6:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    d0b8:	0123      	lsls	r3, r4, #4
    d0ba:	18c3      	adds	r3, r0, r3
    d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d0be:	2100      	movs	r1, #0
    d0c0:	4798      	blx	r3
    d0c2:	e79d      	b.n	d000 <_usb_host_interrupt_handler+0x168>
    d0c4:	00005aee 	.word	0x00005aee
    d0c8:	1fff3d02 	.word	0x1fff3d02
    d0cc:	00000400 	.word	0x00000400
    d0d0:	0000010c 	.word	0x0000010c
    d0d4:	1fff3cb8 	.word	0x1fff3cb8
    d0d8:	00000038 	.word	0x00000038
    d0dc:	1fff3c88 	.word	0x1fff3c88
    d0e0:	f0003fff 	.word	0xf0003fff
    d0e4:	1fff3c5a 	.word	0x1fff3c5a
    d0e8:	1fff3c40 	.word	0x1fff3c40
    d0ec:	1fff3c46 	.word	0x1fff3c46
    d0f0:	1fff3c1a 	.word	0x1fff3c1a
    d0f4:	1fff3bf4 	.word	0x1fff3bf4
    d0f8:	1fff3bc2 	.word	0x1fff3bc2
    d0fc:	1fff3b8e 	.word	0x1fff3b8e
    d100:	1fff3b80 	.word	0x1fff3b80
    d104:	1fff3b58 	.word	0x1fff3b58
    d108:	1fff3b40 	.word	0x1fff3b40
    d10c:	1fff3b1a 	.word	0x1fff3b1a
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    d110:	8bb4      	ldrh	r4, [r6, #28]
    d112:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    d114:	0763      	lsls	r3, r4, #29
    d116:	d506      	bpl.n	d126 <_usb_host_interrupt_handler+0x28e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    d118:	2304      	movs	r3, #4
    d11a:	83b3      	strh	r3, [r6, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    d11c:	33a1      	adds	r3, #161	; 0xa1
    d11e:	5cfb      	ldrb	r3, [r7, r3]
    d120:	07db      	lsls	r3, r3, #31
    d122:	d500      	bpl.n	d126 <_usb_host_interrupt_handler+0x28e>
    d124:	e068      	b.n	d1f8 <_usb_host_interrupt_handler+0x360>
		if (flags & USB_HOST_INTFLAG_RST) {
    d126:	0723      	lsls	r3, r4, #28
    d128:	d50d      	bpl.n	d146 <_usb_host_interrupt_handler+0x2ae>
			host_pipe_job_busy_status = 0;
    d12a:	4b40      	ldr	r3, [pc, #256]	; (d22c <_usb_host_interrupt_handler+0x394>)
    d12c:	58eb      	ldr	r3, [r5, r3]
    d12e:	2200      	movs	r2, #0
    d130:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    d132:	4b3f      	ldr	r3, [pc, #252]	; (d230 <_usb_host_interrupt_handler+0x398>)
    d134:	447b      	add	r3, pc
    d136:	6818      	ldr	r0, [r3, #0]
    d138:	2308      	movs	r3, #8
    d13a:	6802      	ldr	r2, [r0, #0]
    d13c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    d13e:	339d      	adds	r3, #157	; 0x9d
    d140:	5cc3      	ldrb	r3, [r0, r3]
    d142:	079b      	lsls	r3, r3, #30
    d144:	d45c      	bmi.n	d200 <_usb_host_interrupt_handler+0x368>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    d146:	0663      	lsls	r3, r4, #25
    d148:	d509      	bpl.n	d15e <_usb_host_interrupt_handler+0x2c6>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    d14a:	4b3a      	ldr	r3, [pc, #232]	; (d234 <_usb_host_interrupt_handler+0x39c>)
    d14c:	447b      	add	r3, pc
    d14e:	6818      	ldr	r0, [r3, #0]
    d150:	2340      	movs	r3, #64	; 0x40
    d152:	6802      	ldr	r2, [r0, #0]
    d154:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    d156:	3365      	adds	r3, #101	; 0x65
    d158:	5cc3      	ldrb	r3, [r0, r3]
    d15a:	06db      	lsls	r3, r3, #27
    d15c:	d453      	bmi.n	d206 <_usb_host_interrupt_handler+0x36e>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    d15e:	06a3      	lsls	r3, r4, #26
    d160:	d509      	bpl.n	d176 <_usb_host_interrupt_handler+0x2de>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    d162:	4b35      	ldr	r3, [pc, #212]	; (d238 <_usb_host_interrupt_handler+0x3a0>)
    d164:	447b      	add	r3, pc
    d166:	6818      	ldr	r0, [r3, #0]
    d168:	2320      	movs	r3, #32
    d16a:	6802      	ldr	r2, [r0, #0]
    d16c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    d16e:	3385      	adds	r3, #133	; 0x85
    d170:	5cc3      	ldrb	r3, [r0, r3]
    d172:	071b      	lsls	r3, r3, #28
    d174:	d44a      	bmi.n	d20c <_usb_host_interrupt_handler+0x374>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    d176:	06e3      	lsls	r3, r4, #27
    d178:	d509      	bpl.n	d18e <_usb_host_interrupt_handler+0x2f6>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    d17a:	4b30      	ldr	r3, [pc, #192]	; (d23c <_usb_host_interrupt_handler+0x3a4>)
    d17c:	447b      	add	r3, pc
    d17e:	6818      	ldr	r0, [r3, #0]
    d180:	2310      	movs	r3, #16
    d182:	6802      	ldr	r2, [r0, #0]
    d184:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    d186:	3395      	adds	r3, #149	; 0x95
    d188:	5cc3      	ldrb	r3, [r0, r3]
    d18a:	075b      	lsls	r3, r3, #29
    d18c:	d441      	bmi.n	d212 <_usb_host_interrupt_handler+0x37a>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    d18e:	0623      	lsls	r3, r4, #24
    d190:	d50d      	bpl.n	d1ae <_usb_host_interrupt_handler+0x316>
			host_pipe_job_busy_status = 0;
    d192:	4b26      	ldr	r3, [pc, #152]	; (d22c <_usb_host_interrupt_handler+0x394>)
    d194:	58eb      	ldr	r3, [r5, r3]
    d196:	2200      	movs	r2, #0
    d198:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    d19a:	4b29      	ldr	r3, [pc, #164]	; (d240 <_usb_host_interrupt_handler+0x3a8>)
    d19c:	447b      	add	r3, pc
    d19e:	6818      	ldr	r0, [r3, #0]
    d1a0:	2380      	movs	r3, #128	; 0x80
    d1a2:	6802      	ldr	r2, [r0, #0]
    d1a4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    d1a6:	3325      	adds	r3, #37	; 0x25
    d1a8:	5cc3      	ldrb	r3, [r0, r3]
    d1aa:	069b      	lsls	r3, r3, #26
    d1ac:	d434      	bmi.n	d218 <_usb_host_interrupt_handler+0x380>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    d1ae:	05e3      	lsls	r3, r4, #23
    d1b0:	d50e      	bpl.n	d1d0 <_usb_host_interrupt_handler+0x338>
			host_pipe_job_busy_status = 0;
    d1b2:	4b1e      	ldr	r3, [pc, #120]	; (d22c <_usb_host_interrupt_handler+0x394>)
    d1b4:	58eb      	ldr	r3, [r5, r3]
    d1b6:	2200      	movs	r2, #0
    d1b8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    d1ba:	4b22      	ldr	r3, [pc, #136]	; (d244 <_usb_host_interrupt_handler+0x3ac>)
    d1bc:	447b      	add	r3, pc
    d1be:	6818      	ldr	r0, [r3, #0]
    d1c0:	2380      	movs	r3, #128	; 0x80
    d1c2:	005b      	lsls	r3, r3, #1
    d1c4:	6802      	ldr	r2, [r0, #0]
    d1c6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    d1c8:	3b5b      	subs	r3, #91	; 0x5b
    d1ca:	5cc3      	ldrb	r3, [r0, r3]
    d1cc:	065b      	lsls	r3, r3, #25
    d1ce:	d426      	bmi.n	d21e <_usb_host_interrupt_handler+0x386>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    d1d0:	05a3      	lsls	r3, r4, #22
    d1d2:	d50f      	bpl.n	d1f4 <_usb_host_interrupt_handler+0x35c>
			host_pipe_job_busy_status = 0;
    d1d4:	4b15      	ldr	r3, [pc, #84]	; (d22c <_usb_host_interrupt_handler+0x394>)
    d1d6:	58eb      	ldr	r3, [r5, r3]
    d1d8:	2200      	movs	r2, #0
    d1da:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    d1dc:	4b1a      	ldr	r3, [pc, #104]	; (d248 <_usb_host_interrupt_handler+0x3b0>)
    d1de:	447b      	add	r3, pc
    d1e0:	6818      	ldr	r0, [r3, #0]
    d1e2:	2380      	movs	r3, #128	; 0x80
    d1e4:	009b      	lsls	r3, r3, #2
    d1e6:	6802      	ldr	r2, [r0, #0]
    d1e8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    d1ea:	3b5c      	subs	r3, #92	; 0x5c
    d1ec:	3bff      	subs	r3, #255	; 0xff
    d1ee:	56c3      	ldrsb	r3, [r0, r3]
    d1f0:	2b00      	cmp	r3, #0
    d1f2:	db17      	blt.n	d224 <_usb_host_interrupt_handler+0x38c>
}
    d1f4:	b003      	add	sp, #12
    d1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	0038      	movs	r0, r7
    d1fc:	4798      	blx	r3
    d1fe:	e792      	b.n	d126 <_usb_host_interrupt_handler+0x28e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    d200:	6883      	ldr	r3, [r0, #8]
    d202:	4798      	blx	r3
    d204:	e79f      	b.n	d146 <_usb_host_interrupt_handler+0x2ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    d206:	6943      	ldr	r3, [r0, #20]
    d208:	4798      	blx	r3
    d20a:	e7a8      	b.n	d15e <_usb_host_interrupt_handler+0x2c6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    d20c:	6903      	ldr	r3, [r0, #16]
    d20e:	4798      	blx	r3
    d210:	e7b1      	b.n	d176 <_usb_host_interrupt_handler+0x2de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    d212:	68c3      	ldr	r3, [r0, #12]
    d214:	4798      	blx	r3
    d216:	e7ba      	b.n	d18e <_usb_host_interrupt_handler+0x2f6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    d218:	6983      	ldr	r3, [r0, #24]
    d21a:	4798      	blx	r3
    d21c:	e7c7      	b.n	d1ae <_usb_host_interrupt_handler+0x316>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    d21e:	69c3      	ldr	r3, [r0, #28]
    d220:	4798      	blx	r3
    d222:	e7d5      	b.n	d1d0 <_usb_host_interrupt_handler+0x338>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    d224:	6a03      	ldr	r3, [r0, #32]
    d226:	4798      	blx	r3
}
    d228:	e7e4      	b.n	d1f4 <_usb_host_interrupt_handler+0x35c>
    d22a:	46c0      	nop			; (mov r8, r8)
    d22c:	0000010c 	.word	0x0000010c
    d230:	1fff3a70 	.word	0x1fff3a70
    d234:	1fff3a58 	.word	0x1fff3a58
    d238:	1fff3a40 	.word	0x1fff3a40
    d23c:	1fff3a28 	.word	0x1fff3a28
    d240:	1fff3a08 	.word	0x1fff3a08
    d244:	1fff39e8 	.word	0x1fff39e8
    d248:	1fff39c6 	.word	0x1fff39c6

0000d24c <usb_device_register_callback>:
	module_inst->device_callback[callback_type] = callback_func;
    d24c:	000b      	movs	r3, r1
    d24e:	332e      	adds	r3, #46	; 0x2e
    d250:	009b      	lsls	r3, r3, #2
    d252:	501a      	str	r2, [r3, r0]
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    d254:	0049      	lsls	r1, r1, #1
    d256:	4b05      	ldr	r3, [pc, #20]	; (d26c <usb_device_register_callback+0x20>)
    d258:	447b      	add	r3, pc
    d25a:	5acb      	ldrh	r3, [r1, r3]
    d25c:	22aa      	movs	r2, #170	; 0xaa
    d25e:	0052      	lsls	r2, r2, #1
    d260:	5a81      	ldrh	r1, [r0, r2]
    d262:	430b      	orrs	r3, r1
    d264:	5283      	strh	r3, [r0, r2]
}
    d266:	2000      	movs	r0, #0
    d268:	4770      	bx	lr
    d26a:	46c0      	nop			; (mov r8, r8)
    d26c:	0000554c 	.word	0x0000554c

0000d270 <usb_device_enable_callback>:
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    d270:	0049      	lsls	r1, r1, #1
    d272:	4b07      	ldr	r3, [pc, #28]	; (d290 <usb_device_enable_callback+0x20>)
    d274:	447b      	add	r3, pc
    d276:	5acb      	ldrh	r3, [r1, r3]
    d278:	6802      	ldr	r2, [r0, #0]
    d27a:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    d27c:	21ab      	movs	r1, #171	; 0xab
    d27e:	0049      	lsls	r1, r1, #1
    d280:	5a42      	ldrh	r2, [r0, r1]
    d282:	431a      	orrs	r2, r3
    d284:	5242      	strh	r2, [r0, r1]
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    d286:	6802      	ldr	r2, [r0, #0]
    d288:	8313      	strh	r3, [r2, #24]
}
    d28a:	2000      	movs	r0, #0
    d28c:	4770      	bx	lr
    d28e:	46c0      	nop			; (mov r8, r8)
    d290:	00005530 	.word	0x00005530

0000d294 <usb_device_disable_callback>:
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    d294:	0049      	lsls	r1, r1, #1
    d296:	4b06      	ldr	r3, [pc, #24]	; (d2b0 <usb_device_disable_callback+0x1c>)
    d298:	447b      	add	r3, pc
    d29a:	5aca      	ldrh	r2, [r1, r3]
    d29c:	21ab      	movs	r1, #171	; 0xab
    d29e:	0049      	lsls	r1, r1, #1
    d2a0:	5a43      	ldrh	r3, [r0, r1]
    d2a2:	4393      	bics	r3, r2
    d2a4:	5243      	strh	r3, [r0, r1]
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    d2a6:	6803      	ldr	r3, [r0, #0]
    d2a8:	829a      	strh	r2, [r3, #20]
}
    d2aa:	2000      	movs	r0, #0
    d2ac:	4770      	bx	lr
    d2ae:	46c0      	nop			; (mov r8, r8)
    d2b0:	0000550c 	.word	0x0000550c

0000d2b4 <usb_device_endpoint_register_callback>:
{
    d2b4:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    d2b6:	008c      	lsls	r4, r1, #2
    d2b8:	18a4      	adds	r4, r4, r2
    d2ba:	3434      	adds	r4, #52	; 0x34
    d2bc:	00a4      	lsls	r4, r4, #2
    d2be:	1904      	adds	r4, r0, r4
    d2c0:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    d2c2:	4b05      	ldr	r3, [pc, #20]	; (d2d8 <usb_device_endpoint_register_callback+0x24>)
    d2c4:	447b      	add	r3, pc
    d2c6:	5c9b      	ldrb	r3, [r3, r2]
    d2c8:	1840      	adds	r0, r0, r1
    d2ca:	3059      	adds	r0, #89	; 0x59
    d2cc:	30ff      	adds	r0, #255	; 0xff
    d2ce:	7802      	ldrb	r2, [r0, #0]
    d2d0:	4313      	orrs	r3, r2
    d2d2:	7003      	strb	r3, [r0, #0]
}
    d2d4:	2000      	movs	r0, #0
    d2d6:	bd10      	pop	{r4, pc}
    d2d8:	000054f0 	.word	0x000054f0

0000d2dc <usb_device_endpoint_unregister_callback>:
{
    d2dc:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    d2de:	008b      	lsls	r3, r1, #2
    d2e0:	189b      	adds	r3, r3, r2
    d2e2:	3334      	adds	r3, #52	; 0x34
    d2e4:	009b      	lsls	r3, r3, #2
    d2e6:	18c3      	adds	r3, r0, r3
    d2e8:	2400      	movs	r4, #0
    d2ea:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    d2ec:	4b05      	ldr	r3, [pc, #20]	; (d304 <usb_device_endpoint_unregister_callback+0x28>)
    d2ee:	447b      	add	r3, pc
    d2f0:	5c9a      	ldrb	r2, [r3, r2]
    d2f2:	1840      	adds	r0, r0, r1
    d2f4:	3059      	adds	r0, #89	; 0x59
    d2f6:	30ff      	adds	r0, #255	; 0xff
    d2f8:	7803      	ldrb	r3, [r0, #0]
    d2fa:	4393      	bics	r3, r2
    d2fc:	7003      	strb	r3, [r0, #0]
}
    d2fe:	2000      	movs	r0, #0
    d300:	bd10      	pop	{r4, pc}
    d302:	46c0      	nop			; (mov r8, r8)
    d304:	000054c6 	.word	0x000054c6

0000d308 <usb_device_endpoint_enable_callback>:
{
    d308:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d30a:	230f      	movs	r3, #15
    d30c:	400b      	ands	r3, r1
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    d30e:	4c37      	ldr	r4, [pc, #220]	; (d3ec <usb_device_endpoint_enable_callback+0xe4>)
    d310:	447c      	add	r4, pc
    d312:	5ca5      	ldrb	r5, [r4, r2]
    d314:	18c4      	adds	r4, r0, r3
    d316:	3461      	adds	r4, #97	; 0x61
    d318:	34ff      	adds	r4, #255	; 0xff
    d31a:	7826      	ldrb	r6, [r4, #0]
    d31c:	4335      	orrs	r5, r6
    d31e:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    d320:	2a00      	cmp	r2, #0
    d322:	d109      	bne.n	d338 <usb_device_endpoint_enable_callback+0x30>
		if (ep_num == 0) { // control endpoint
    d324:	2b00      	cmp	r3, #0
    d326:	d10f      	bne.n	d348 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    d328:	015c      	lsls	r4, r3, #5
    d32a:	6805      	ldr	r5, [r0, #0]
    d32c:	46ac      	mov	ip, r5
    d32e:	4464      	add	r4, ip
    d330:	340a      	adds	r4, #10
    d332:	34ff      	adds	r4, #255	; 0xff
    d334:	2503      	movs	r5, #3
    d336:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    d338:	2a01      	cmp	r2, #1
    d33a:	d01a      	beq.n	d372 <usb_device_endpoint_enable_callback+0x6a>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    d33c:	2a02      	cmp	r2, #2
    d33e:	d038      	beq.n	d3b2 <usb_device_endpoint_enable_callback+0xaa>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    d340:	2a03      	cmp	r2, #3
    d342:	d03f      	beq.n	d3c4 <usb_device_endpoint_enable_callback+0xbc>
}
    d344:	2000      	movs	r0, #0
    d346:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    d348:	b24c      	sxtb	r4, r1
    d34a:	2c00      	cmp	r4, #0
    d34c:	db08      	blt.n	d360 <usb_device_endpoint_enable_callback+0x58>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    d34e:	015c      	lsls	r4, r3, #5
    d350:	6805      	ldr	r5, [r0, #0]
    d352:	46ac      	mov	ip, r5
    d354:	4464      	add	r4, ip
    d356:	340a      	adds	r4, #10
    d358:	34ff      	adds	r4, #255	; 0xff
    d35a:	2501      	movs	r5, #1
    d35c:	7025      	strb	r5, [r4, #0]
    d35e:	e7eb      	b.n	d338 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    d360:	015c      	lsls	r4, r3, #5
    d362:	6805      	ldr	r5, [r0, #0]
    d364:	46ac      	mov	ip, r5
    d366:	4464      	add	r4, ip
    d368:	340a      	adds	r4, #10
    d36a:	34ff      	adds	r4, #255	; 0xff
    d36c:	2502      	movs	r5, #2
    d36e:	7025      	strb	r5, [r4, #0]
    d370:	e7e2      	b.n	d338 <usb_device_endpoint_enable_callback+0x30>
		if (ep_num == 0) { // control endpoint
    d372:	2b00      	cmp	r3, #0
    d374:	d108      	bne.n	d388 <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    d376:	015c      	lsls	r4, r3, #5
    d378:	6805      	ldr	r5, [r0, #0]
    d37a:	46ac      	mov	ip, r5
    d37c:	4464      	add	r4, ip
    d37e:	340a      	adds	r4, #10
    d380:	34ff      	adds	r4, #255	; 0xff
    d382:	250c      	movs	r5, #12
    d384:	7025      	strb	r5, [r4, #0]
    d386:	e7d9      	b.n	d33c <usb_device_endpoint_enable_callback+0x34>
		} else if (ep & USB_EP_DIR_IN) {
    d388:	b24c      	sxtb	r4, r1
    d38a:	2c00      	cmp	r4, #0
    d38c:	db08      	blt.n	d3a0 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    d38e:	015c      	lsls	r4, r3, #5
    d390:	6805      	ldr	r5, [r0, #0]
    d392:	46ac      	mov	ip, r5
    d394:	4464      	add	r4, ip
    d396:	340a      	adds	r4, #10
    d398:	34ff      	adds	r4, #255	; 0xff
    d39a:	2504      	movs	r5, #4
    d39c:	7025      	strb	r5, [r4, #0]
    d39e:	e7cd      	b.n	d33c <usb_device_endpoint_enable_callback+0x34>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    d3a0:	015c      	lsls	r4, r3, #5
    d3a2:	6805      	ldr	r5, [r0, #0]
    d3a4:	46ac      	mov	ip, r5
    d3a6:	4464      	add	r4, ip
    d3a8:	340a      	adds	r4, #10
    d3aa:	34ff      	adds	r4, #255	; 0xff
    d3ac:	2508      	movs	r5, #8
    d3ae:	7025      	strb	r5, [r4, #0]
    d3b0:	e7c4      	b.n	d33c <usb_device_endpoint_enable_callback+0x34>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    d3b2:	015c      	lsls	r4, r3, #5
    d3b4:	6805      	ldr	r5, [r0, #0]
    d3b6:	46ac      	mov	ip, r5
    d3b8:	4464      	add	r4, ip
    d3ba:	340a      	adds	r4, #10
    d3bc:	34ff      	adds	r4, #255	; 0xff
    d3be:	2510      	movs	r5, #16
    d3c0:	7025      	strb	r5, [r4, #0]
    d3c2:	e7bd      	b.n	d340 <usb_device_endpoint_enable_callback+0x38>
		if (ep & USB_EP_DIR_IN) {
    d3c4:	b249      	sxtb	r1, r1
    d3c6:	2900      	cmp	r1, #0
    d3c8:	db07      	blt.n	d3da <usb_device_endpoint_enable_callback+0xd2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    d3ca:	6802      	ldr	r2, [r0, #0]
    d3cc:	015b      	lsls	r3, r3, #5
    d3ce:	18d3      	adds	r3, r2, r3
    d3d0:	330a      	adds	r3, #10
    d3d2:	33ff      	adds	r3, #255	; 0xff
    d3d4:	2220      	movs	r2, #32
    d3d6:	701a      	strb	r2, [r3, #0]
    d3d8:	e7b4      	b.n	d344 <usb_device_endpoint_enable_callback+0x3c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    d3da:	6802      	ldr	r2, [r0, #0]
    d3dc:	015b      	lsls	r3, r3, #5
    d3de:	18d3      	adds	r3, r2, r3
    d3e0:	330a      	adds	r3, #10
    d3e2:	33ff      	adds	r3, #255	; 0xff
    d3e4:	2240      	movs	r2, #64	; 0x40
    d3e6:	701a      	strb	r2, [r3, #0]
    d3e8:	e7ac      	b.n	d344 <usb_device_endpoint_enable_callback+0x3c>
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	000054a4 	.word	0x000054a4

0000d3f0 <usb_device_endpoint_disable_callback>:
{
    d3f0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d3f2:	230f      	movs	r3, #15
    d3f4:	400b      	ands	r3, r1
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    d3f6:	4c37      	ldr	r4, [pc, #220]	; (d4d4 <usb_device_endpoint_disable_callback+0xe4>)
    d3f8:	447c      	add	r4, pc
    d3fa:	5ca6      	ldrb	r6, [r4, r2]
    d3fc:	18c4      	adds	r4, r0, r3
    d3fe:	3461      	adds	r4, #97	; 0x61
    d400:	34ff      	adds	r4, #255	; 0xff
    d402:	7825      	ldrb	r5, [r4, #0]
    d404:	43b5      	bics	r5, r6
    d406:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    d408:	2a00      	cmp	r2, #0
    d40a:	d109      	bne.n	d420 <usb_device_endpoint_disable_callback+0x30>
		if (ep_num == 0) { // control endpoint
    d40c:	2b00      	cmp	r3, #0
    d40e:	d10f      	bne.n	d430 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    d410:	015c      	lsls	r4, r3, #5
    d412:	6805      	ldr	r5, [r0, #0]
    d414:	46ac      	mov	ip, r5
    d416:	4464      	add	r4, ip
    d418:	3409      	adds	r4, #9
    d41a:	34ff      	adds	r4, #255	; 0xff
    d41c:	2503      	movs	r5, #3
    d41e:	7025      	strb	r5, [r4, #0]
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    d420:	2a01      	cmp	r2, #1
    d422:	d01a      	beq.n	d45a <usb_device_endpoint_disable_callback+0x6a>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    d424:	2a02      	cmp	r2, #2
    d426:	d038      	beq.n	d49a <usb_device_endpoint_disable_callback+0xaa>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    d428:	2a03      	cmp	r2, #3
    d42a:	d03f      	beq.n	d4ac <usb_device_endpoint_disable_callback+0xbc>
}
    d42c:	2000      	movs	r0, #0
    d42e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    d430:	b24c      	sxtb	r4, r1
    d432:	2c00      	cmp	r4, #0
    d434:	db08      	blt.n	d448 <usb_device_endpoint_disable_callback+0x58>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    d436:	015c      	lsls	r4, r3, #5
    d438:	6805      	ldr	r5, [r0, #0]
    d43a:	46ac      	mov	ip, r5
    d43c:	4464      	add	r4, ip
    d43e:	3409      	adds	r4, #9
    d440:	34ff      	adds	r4, #255	; 0xff
    d442:	2501      	movs	r5, #1
    d444:	7025      	strb	r5, [r4, #0]
    d446:	e7eb      	b.n	d420 <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    d448:	015c      	lsls	r4, r3, #5
    d44a:	6805      	ldr	r5, [r0, #0]
    d44c:	46ac      	mov	ip, r5
    d44e:	4464      	add	r4, ip
    d450:	3409      	adds	r4, #9
    d452:	34ff      	adds	r4, #255	; 0xff
    d454:	2502      	movs	r5, #2
    d456:	7025      	strb	r5, [r4, #0]
    d458:	e7e2      	b.n	d420 <usb_device_endpoint_disable_callback+0x30>
		if (ep_num == 0) { // control endpoint
    d45a:	2b00      	cmp	r3, #0
    d45c:	d108      	bne.n	d470 <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    d45e:	015c      	lsls	r4, r3, #5
    d460:	6805      	ldr	r5, [r0, #0]
    d462:	46ac      	mov	ip, r5
    d464:	4464      	add	r4, ip
    d466:	3409      	adds	r4, #9
    d468:	34ff      	adds	r4, #255	; 0xff
    d46a:	250c      	movs	r5, #12
    d46c:	7025      	strb	r5, [r4, #0]
    d46e:	e7d9      	b.n	d424 <usb_device_endpoint_disable_callback+0x34>
		} else if (ep & USB_EP_DIR_IN) {
    d470:	b24c      	sxtb	r4, r1
    d472:	2c00      	cmp	r4, #0
    d474:	db08      	blt.n	d488 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    d476:	015c      	lsls	r4, r3, #5
    d478:	6805      	ldr	r5, [r0, #0]
    d47a:	46ac      	mov	ip, r5
    d47c:	4464      	add	r4, ip
    d47e:	3409      	adds	r4, #9
    d480:	34ff      	adds	r4, #255	; 0xff
    d482:	2504      	movs	r5, #4
    d484:	7025      	strb	r5, [r4, #0]
    d486:	e7cd      	b.n	d424 <usb_device_endpoint_disable_callback+0x34>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    d488:	015c      	lsls	r4, r3, #5
    d48a:	6805      	ldr	r5, [r0, #0]
    d48c:	46ac      	mov	ip, r5
    d48e:	4464      	add	r4, ip
    d490:	3409      	adds	r4, #9
    d492:	34ff      	adds	r4, #255	; 0xff
    d494:	2508      	movs	r5, #8
    d496:	7025      	strb	r5, [r4, #0]
    d498:	e7c4      	b.n	d424 <usb_device_endpoint_disable_callback+0x34>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    d49a:	015c      	lsls	r4, r3, #5
    d49c:	6805      	ldr	r5, [r0, #0]
    d49e:	46ac      	mov	ip, r5
    d4a0:	4464      	add	r4, ip
    d4a2:	3409      	adds	r4, #9
    d4a4:	34ff      	adds	r4, #255	; 0xff
    d4a6:	2510      	movs	r5, #16
    d4a8:	7025      	strb	r5, [r4, #0]
    d4aa:	e7bd      	b.n	d428 <usb_device_endpoint_disable_callback+0x38>
		if (ep & USB_EP_DIR_IN) {
    d4ac:	b249      	sxtb	r1, r1
    d4ae:	2900      	cmp	r1, #0
    d4b0:	db07      	blt.n	d4c2 <usb_device_endpoint_disable_callback+0xd2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    d4b2:	6802      	ldr	r2, [r0, #0]
    d4b4:	015b      	lsls	r3, r3, #5
    d4b6:	18d3      	adds	r3, r2, r3
    d4b8:	3309      	adds	r3, #9
    d4ba:	33ff      	adds	r3, #255	; 0xff
    d4bc:	2220      	movs	r2, #32
    d4be:	701a      	strb	r2, [r3, #0]
    d4c0:	e7b4      	b.n	d42c <usb_device_endpoint_disable_callback+0x3c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    d4c2:	6802      	ldr	r2, [r0, #0]
    d4c4:	015b      	lsls	r3, r3, #5
    d4c6:	18d3      	adds	r3, r2, r3
    d4c8:	3309      	adds	r3, #9
    d4ca:	33ff      	adds	r3, #255	; 0xff
    d4cc:	2240      	movs	r2, #64	; 0x40
    d4ce:	701a      	strb	r2, [r3, #0]
    d4d0:	e7ac      	b.n	d42c <usb_device_endpoint_disable_callback+0x3c>
    d4d2:	46c0      	nop			; (mov r8, r8)
    d4d4:	000053bc 	.word	0x000053bc

0000d4d8 <usb_device_endpoint_get_config_defaults>:
	ep_config->ep_address = 0;
    d4d8:	2300      	movs	r3, #0
    d4da:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    d4dc:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    d4de:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    d4e0:	3301      	adds	r3, #1
    d4e2:	70c3      	strb	r3, [r0, #3]
}
    d4e4:	4770      	bx	lr
	...

0000d4e8 <usb_device_endpoint_set_config>:
{
    d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4ea:	46ce      	mov	lr, r9
    d4ec:	4647      	mov	r7, r8
    d4ee:	b580      	push	{r7, lr}
    d4f0:	b083      	sub	sp, #12
    d4f2:	0006      	movs	r6, r0
    d4f4:	4ca8      	ldr	r4, [pc, #672]	; (d798 <usb_device_endpoint_set_config+0x2b0>)
    d4f6:	447c      	add	r4, pc
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    d4f8:	780a      	ldrb	r2, [r1, #0]
    d4fa:	230f      	movs	r3, #15
    d4fc:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    d4fe:	b252      	sxtb	r2, r2
    d500:	0fd5      	lsrs	r5, r2, #31
	switch (ep_config->ep_type) {
    d502:	78c8      	ldrb	r0, [r1, #3]
    d504:	2804      	cmp	r0, #4
    d506:	d900      	bls.n	d50a <usb_device_endpoint_set_config+0x22>
    d508:	e09d      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
    d50a:	f002 f893 	bl	f634 <__gnu_thumb1_case_uhi>
    d50e:	0005      	.short	0x0005
    d510:	0064000c 	.word	0x0064000c
    d514:	00fc00c3 	.word	0x00fc00c3
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    d518:	6832      	ldr	r2, [r6, #0]
    d51a:	3308      	adds	r3, #8
    d51c:	015b      	lsls	r3, r3, #5
    d51e:	2100      	movs	r1, #0
    d520:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    d522:	2000      	movs	r0, #0
    d524:	e0b1      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    d526:	6830      	ldr	r0, [r6, #0]
    d528:	001a      	movs	r2, r3
    d52a:	3208      	adds	r2, #8
    d52c:	0152      	lsls	r2, r2, #5
    d52e:	5c12      	ldrb	r2, [r2, r0]
    d530:	0752      	lsls	r2, r2, #29
    d532:	d001      	beq.n	d538 <usb_device_endpoint_set_config+0x50>
				return STATUS_ERR_DENIED;
    d534:	201c      	movs	r0, #28
    d536:	e0a8      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    d538:	001a      	movs	r2, r3
    d53a:	3208      	adds	r2, #8
    d53c:	0152      	lsls	r2, r2, #5
    d53e:	5c15      	ldrb	r5, [r2, r0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    d540:	2270      	movs	r2, #112	; 0x70
    d542:	4215      	tst	r5, r2
    d544:	d001      	beq.n	d54a <usb_device_endpoint_set_config+0x62>
				return STATUS_ERR_DENIED;
    d546:	201c      	movs	r0, #28
    d548:	e09f      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    d54a:	001a      	movs	r2, r3
    d54c:	3208      	adds	r2, #8
    d54e:	0152      	lsls	r2, r2, #5
    d550:	2511      	movs	r5, #17
    d552:	5415      	strb	r5, [r2, r0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    d554:	6830      	ldr	r0, [r6, #0]
    d556:	1880      	adds	r0, r0, r2
    d558:	352f      	adds	r5, #47	; 0x2f
    d55a:	7145      	strb	r5, [r0, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    d55c:	6830      	ldr	r0, [r6, #0]
    d55e:	1882      	adds	r2, r0, r2
    d560:	2080      	movs	r0, #128	; 0x80
    d562:	7110      	strb	r0, [r2, #4]
			if (true == ep_config->auto_zlp) {
    d564:	788a      	ldrb	r2, [r1, #2]
    d566:	2a00      	cmp	r2, #0
    d568:	d025      	beq.n	d5b6 <usb_device_endpoint_set_config+0xce>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d56a:	4a8c      	ldr	r2, [pc, #560]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d56c:	58a2      	ldr	r2, [r4, r2]
    d56e:	9201      	str	r2, [sp, #4]
    d570:	015a      	lsls	r2, r3, #5
    d572:	9801      	ldr	r0, [sp, #4]
    d574:	4684      	mov	ip, r0
    d576:	4462      	add	r2, ip
    d578:	6855      	ldr	r5, [r2, #4]
    d57a:	2080      	movs	r0, #128	; 0x80
    d57c:	0600      	lsls	r0, r0, #24
    d57e:	4305      	orrs	r5, r0
    d580:	6055      	str	r5, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d582:	6955      	ldr	r5, [r2, #20]
    d584:	4328      	orrs	r0, r5
    d586:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    d588:	784d      	ldrb	r5, [r1, #1]
    d58a:	2207      	movs	r2, #7
    d58c:	4015      	ands	r5, r2
    d58e:	4883      	ldr	r0, [pc, #524]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d590:	5820      	ldr	r0, [r4, r0]
    d592:	9001      	str	r0, [sp, #4]
    d594:	015b      	lsls	r3, r3, #5
    d596:	18c0      	adds	r0, r0, r3
    d598:	6846      	ldr	r6, [r0, #4]
    d59a:	072c      	lsls	r4, r5, #28
    d59c:	4d80      	ldr	r5, [pc, #512]	; (d7a0 <usb_device_endpoint_set_config+0x2b8>)
    d59e:	402e      	ands	r6, r5
    d5a0:	4334      	orrs	r4, r6
    d5a2:	6044      	str	r4, [r0, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    d5a4:	784b      	ldrb	r3, [r1, #1]
    d5a6:	6941      	ldr	r1, [r0, #20]
    d5a8:	4013      	ands	r3, r2
    d5aa:	071b      	lsls	r3, r3, #28
    d5ac:	4029      	ands	r1, r5
    d5ae:	430b      	orrs	r3, r1
    d5b0:	6143      	str	r3, [r0, #20]
			return STATUS_OK;
    d5b2:	2000      	movs	r0, #0
    d5b4:	e069      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d5b6:	4a79      	ldr	r2, [pc, #484]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d5b8:	58a2      	ldr	r2, [r4, r2]
    d5ba:	9201      	str	r2, [sp, #4]
    d5bc:	015a      	lsls	r2, r3, #5
    d5be:	9801      	ldr	r0, [sp, #4]
    d5c0:	4684      	mov	ip, r0
    d5c2:	4462      	add	r2, ip
    d5c4:	6850      	ldr	r0, [r2, #4]
    d5c6:	0040      	lsls	r0, r0, #1
    d5c8:	0840      	lsrs	r0, r0, #1
    d5ca:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d5cc:	6950      	ldr	r0, [r2, #20]
    d5ce:	0040      	lsls	r0, r0, #1
    d5d0:	0840      	lsrs	r0, r0, #1
    d5d2:	6150      	str	r0, [r2, #20]
    d5d4:	e7d8      	b.n	d588 <usb_device_endpoint_set_config+0xa0>
			if (ep_bank) {
    d5d6:	2a00      	cmp	r2, #0
    d5d8:	db08      	blt.n	d5ec <usb_device_endpoint_set_config+0x104>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    d5da:	6830      	ldr	r0, [r6, #0]
    d5dc:	001a      	movs	r2, r3
    d5de:	3208      	adds	r2, #8
    d5e0:	0152      	lsls	r2, r2, #5
    d5e2:	5c12      	ldrb	r2, [r2, r0]
    d5e4:	0752      	lsls	r2, r2, #29
    d5e6:	d01d      	beq.n	d624 <usb_device_endpoint_set_config+0x13c>
					return STATUS_ERR_DENIED;
    d5e8:	201c      	movs	r0, #28
    d5ea:	e04e      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    d5ec:	6830      	ldr	r0, [r6, #0]
    d5ee:	001a      	movs	r2, r3
    d5f0:	3208      	adds	r2, #8
    d5f2:	0152      	lsls	r2, r2, #5
    d5f4:	5c17      	ldrb	r7, [r2, r0]
    d5f6:	2270      	movs	r2, #112	; 0x70
    d5f8:	4217      	tst	r7, r2
    d5fa:	d001      	beq.n	d600 <usb_device_endpoint_set_config+0x118>
					return STATUS_ERR_DENIED;
    d5fc:	201c      	movs	r0, #28
    d5fe:	e044      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    d600:	001a      	movs	r2, r3
    d602:	3208      	adds	r2, #8
    d604:	0152      	lsls	r2, r2, #5
    d606:	4691      	mov	r9, r2
    d608:	5c12      	ldrb	r2, [r2, r0]
    d60a:	2720      	movs	r7, #32
    d60c:	46bc      	mov	ip, r7
    d60e:	4667      	mov	r7, ip
    d610:	433a      	orrs	r2, r7
    d612:	b2d7      	uxtb	r7, r2
    d614:	464a      	mov	r2, r9
    d616:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    d618:	6830      	ldr	r0, [r6, #0]
    d61a:	0002      	movs	r2, r0
    d61c:	444a      	add	r2, r9
    d61e:	2080      	movs	r0, #128	; 0x80
    d620:	7110      	strb	r0, [r2, #4]
    d622:	e010      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    d624:	001a      	movs	r2, r3
    d626:	3208      	adds	r2, #8
    d628:	0152      	lsls	r2, r2, #5
    d62a:	4691      	mov	r9, r2
    d62c:	5c12      	ldrb	r2, [r2, r0]
    d62e:	2702      	movs	r7, #2
    d630:	46bc      	mov	ip, r7
    d632:	4667      	mov	r7, ip
    d634:	433a      	orrs	r2, r7
    d636:	b2d7      	uxtb	r7, r2
    d638:	464a      	mov	r2, r9
    d63a:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    d63c:	6830      	ldr	r0, [r6, #0]
    d63e:	0002      	movs	r2, r0
    d640:	444a      	add	r2, r9
    d642:	2040      	movs	r0, #64	; 0x40
    d644:	7150      	strb	r0, [r2, #5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    d646:	784f      	ldrb	r7, [r1, #1]
    d648:	4a54      	ldr	r2, [pc, #336]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d64a:	58a2      	ldr	r2, [r4, r2]
    d64c:	9201      	str	r2, [sp, #4]
    d64e:	0058      	lsls	r0, r3, #1
    d650:	1940      	adds	r0, r0, r5
    d652:	0100      	lsls	r0, r0, #4
    d654:	4694      	mov	ip, r2
    d656:	4460      	add	r0, ip
    d658:	6846      	ldr	r6, [r0, #4]
    d65a:	2207      	movs	r2, #7
    d65c:	403a      	ands	r2, r7
    d65e:	0712      	lsls	r2, r2, #28
    d660:	4f4f      	ldr	r7, [pc, #316]	; (d7a0 <usb_device_endpoint_set_config+0x2b8>)
    d662:	403e      	ands	r6, r7
    d664:	4332      	orrs	r2, r6
    d666:	6042      	str	r2, [r0, #4]
	if (true == ep_config->auto_zlp) {
    d668:	788a      	ldrb	r2, [r1, #2]
    d66a:	2a00      	cmp	r2, #0
    d66c:	d000      	beq.n	d670 <usb_device_endpoint_set_config+0x188>
    d66e:	e083      	b.n	d778 <usb_device_endpoint_set_config+0x290>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d670:	4a4a      	ldr	r2, [pc, #296]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d672:	58a2      	ldr	r2, [r4, r2]
    d674:	9201      	str	r2, [sp, #4]
    d676:	005b      	lsls	r3, r3, #1
    d678:	195b      	adds	r3, r3, r5
    d67a:	011b      	lsls	r3, r3, #4
    d67c:	4694      	mov	ip, r2
    d67e:	4463      	add	r3, ip
    d680:	685a      	ldr	r2, [r3, #4]
    d682:	0052      	lsls	r2, r2, #1
    d684:	0852      	lsrs	r2, r2, #1
    d686:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    d688:	2000      	movs	r0, #0
}
    d68a:	b003      	add	sp, #12
    d68c:	bc0c      	pop	{r2, r3}
    d68e:	4690      	mov	r8, r2
    d690:	4699      	mov	r9, r3
    d692:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_bank) {
    d694:	2a00      	cmp	r2, #0
    d696:	db08      	blt.n	d6aa <usb_device_endpoint_set_config+0x1c2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    d698:	6830      	ldr	r0, [r6, #0]
    d69a:	001a      	movs	r2, r3
    d69c:	3208      	adds	r2, #8
    d69e:	0152      	lsls	r2, r2, #5
    d6a0:	5c12      	ldrb	r2, [r2, r0]
    d6a2:	0752      	lsls	r2, r2, #29
    d6a4:	d01d      	beq.n	d6e2 <usb_device_endpoint_set_config+0x1fa>
					return STATUS_ERR_DENIED;
    d6a6:	201c      	movs	r0, #28
    d6a8:	e7ef      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    d6aa:	6830      	ldr	r0, [r6, #0]
    d6ac:	001a      	movs	r2, r3
    d6ae:	3208      	adds	r2, #8
    d6b0:	0152      	lsls	r2, r2, #5
    d6b2:	5c17      	ldrb	r7, [r2, r0]
    d6b4:	2270      	movs	r2, #112	; 0x70
    d6b6:	4217      	tst	r7, r2
    d6b8:	d001      	beq.n	d6be <usb_device_endpoint_set_config+0x1d6>
					return STATUS_ERR_DENIED;
    d6ba:	201c      	movs	r0, #28
    d6bc:	e7e5      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    d6be:	001a      	movs	r2, r3
    d6c0:	3208      	adds	r2, #8
    d6c2:	0152      	lsls	r2, r2, #5
    d6c4:	4691      	mov	r9, r2
    d6c6:	5c12      	ldrb	r2, [r2, r0]
    d6c8:	2730      	movs	r7, #48	; 0x30
    d6ca:	46bc      	mov	ip, r7
    d6cc:	4667      	mov	r7, ip
    d6ce:	433a      	orrs	r2, r7
    d6d0:	b2d7      	uxtb	r7, r2
    d6d2:	464a      	mov	r2, r9
    d6d4:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    d6d6:	6830      	ldr	r0, [r6, #0]
    d6d8:	0002      	movs	r2, r0
    d6da:	444a      	add	r2, r9
    d6dc:	2080      	movs	r0, #128	; 0x80
    d6de:	7110      	strb	r0, [r2, #4]
    d6e0:	e7b1      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    d6e2:	001a      	movs	r2, r3
    d6e4:	3208      	adds	r2, #8
    d6e6:	0152      	lsls	r2, r2, #5
    d6e8:	4691      	mov	r9, r2
    d6ea:	5c12      	ldrb	r2, [r2, r0]
    d6ec:	2703      	movs	r7, #3
    d6ee:	46bc      	mov	ip, r7
    d6f0:	4667      	mov	r7, ip
    d6f2:	433a      	orrs	r2, r7
    d6f4:	b2d7      	uxtb	r7, r2
    d6f6:	464a      	mov	r2, r9
    d6f8:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    d6fa:	6830      	ldr	r0, [r6, #0]
    d6fc:	0002      	movs	r2, r0
    d6fe:	444a      	add	r2, r9
    d700:	2040      	movs	r0, #64	; 0x40
    d702:	7150      	strb	r0, [r2, #5]
    d704:	e79f      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
			if (ep_bank) {
    d706:	2a00      	cmp	r2, #0
    d708:	db08      	blt.n	d71c <usb_device_endpoint_set_config+0x234>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    d70a:	6830      	ldr	r0, [r6, #0]
    d70c:	001a      	movs	r2, r3
    d70e:	3208      	adds	r2, #8
    d710:	0152      	lsls	r2, r2, #5
    d712:	5c12      	ldrb	r2, [r2, r0]
    d714:	0752      	lsls	r2, r2, #29
    d716:	d01d      	beq.n	d754 <usb_device_endpoint_set_config+0x26c>
					return STATUS_ERR_DENIED;
    d718:	201c      	movs	r0, #28
    d71a:	e7b6      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    d71c:	6830      	ldr	r0, [r6, #0]
    d71e:	001a      	movs	r2, r3
    d720:	3208      	adds	r2, #8
    d722:	0152      	lsls	r2, r2, #5
    d724:	5c17      	ldrb	r7, [r2, r0]
    d726:	2270      	movs	r2, #112	; 0x70
    d728:	4217      	tst	r7, r2
    d72a:	d001      	beq.n	d730 <usb_device_endpoint_set_config+0x248>
					return STATUS_ERR_DENIED;
    d72c:	201c      	movs	r0, #28
    d72e:	e7ac      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    d730:	001a      	movs	r2, r3
    d732:	3208      	adds	r2, #8
    d734:	0152      	lsls	r2, r2, #5
    d736:	4691      	mov	r9, r2
    d738:	5c12      	ldrb	r2, [r2, r0]
    d73a:	2740      	movs	r7, #64	; 0x40
    d73c:	46bc      	mov	ip, r7
    d73e:	4667      	mov	r7, ip
    d740:	433a      	orrs	r2, r7
    d742:	b2d7      	uxtb	r7, r2
    d744:	464a      	mov	r2, r9
    d746:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    d748:	6830      	ldr	r0, [r6, #0]
    d74a:	0002      	movs	r2, r0
    d74c:	444a      	add	r2, r9
    d74e:	2080      	movs	r0, #128	; 0x80
    d750:	7110      	strb	r0, [r2, #4]
    d752:	e778      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    d754:	001a      	movs	r2, r3
    d756:	3208      	adds	r2, #8
    d758:	0152      	lsls	r2, r2, #5
    d75a:	4691      	mov	r9, r2
    d75c:	5c12      	ldrb	r2, [r2, r0]
    d75e:	2704      	movs	r7, #4
    d760:	46bc      	mov	ip, r7
    d762:	4667      	mov	r7, ip
    d764:	433a      	orrs	r2, r7
    d766:	b2d7      	uxtb	r7, r2
    d768:	464a      	mov	r2, r9
    d76a:	5417      	strb	r7, [r2, r0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    d76c:	6830      	ldr	r0, [r6, #0]
    d76e:	0002      	movs	r2, r0
    d770:	444a      	add	r2, r9
    d772:	2040      	movs	r0, #64	; 0x40
    d774:	7150      	strb	r0, [r2, #5]
    d776:	e766      	b.n	d646 <usb_device_endpoint_set_config+0x15e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    d778:	4a08      	ldr	r2, [pc, #32]	; (d79c <usb_device_endpoint_set_config+0x2b4>)
    d77a:	58a2      	ldr	r2, [r4, r2]
    d77c:	9201      	str	r2, [sp, #4]
    d77e:	005b      	lsls	r3, r3, #1
    d780:	195b      	adds	r3, r3, r5
    d782:	011b      	lsls	r3, r3, #4
    d784:	4694      	mov	ip, r2
    d786:	4463      	add	r3, ip
    d788:	6859      	ldr	r1, [r3, #4]
    d78a:	2280      	movs	r2, #128	; 0x80
    d78c:	0612      	lsls	r2, r2, #24
    d78e:	430a      	orrs	r2, r1
    d790:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
    d792:	2000      	movs	r0, #0
    d794:	e779      	b.n	d68a <usb_device_endpoint_set_config+0x1a2>
    d796:	46c0      	nop			; (mov r8, r8)
    d798:	00005496 	.word	0x00005496
    d79c:	00000038 	.word	0x00000038
    d7a0:	8fffffff 	.word	0x8fffffff

0000d7a4 <usb_device_endpoint_abort_job>:
	ep_num = ep & USB_EP_ADDR_MASK;
    d7a4:	230f      	movs	r3, #15
    d7a6:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    d7a8:	b249      	sxtb	r1, r1
    d7aa:	2900      	cmp	r1, #0
    d7ac:	db0a      	blt.n	d7c4 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    d7ae:	3308      	adds	r3, #8
    d7b0:	015b      	lsls	r3, r3, #5
    d7b2:	6802      	ldr	r2, [r0, #0]
    d7b4:	18d2      	adds	r2, r2, r3
    d7b6:	2140      	movs	r1, #64	; 0x40
    d7b8:	7151      	strb	r1, [r2, #5]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    d7ba:	6802      	ldr	r2, [r0, #0]
    d7bc:	18d3      	adds	r3, r2, r3
    d7be:	2201      	movs	r2, #1
    d7c0:	71da      	strb	r2, [r3, #7]
}
    d7c2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    d7c4:	3308      	adds	r3, #8
    d7c6:	015b      	lsls	r3, r3, #5
    d7c8:	6802      	ldr	r2, [r0, #0]
    d7ca:	18d2      	adds	r2, r2, r3
    d7cc:	2180      	movs	r1, #128	; 0x80
    d7ce:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    d7d0:	6802      	ldr	r2, [r0, #0]
    d7d2:	18d3      	adds	r3, r2, r3
    d7d4:	2202      	movs	r2, #2
    d7d6:	71da      	strb	r2, [r3, #7]
    d7d8:	e7f3      	b.n	d7c2 <usb_device_endpoint_abort_job+0x1e>

0000d7da <usb_device_endpoint_is_halted>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d7da:	230f      	movs	r3, #15
    d7dc:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    d7de:	b249      	sxtb	r1, r1
    d7e0:	2900      	cmp	r1, #0
    d7e2:	db08      	blt.n	d7f6 <usb_device_endpoint_is_halted+0x1c>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    d7e4:	6802      	ldr	r2, [r0, #0]
    d7e6:	3308      	adds	r3, #8
    d7e8:	015b      	lsls	r3, r3, #5
    d7ea:	18d3      	adds	r3, r2, r3
    d7ec:	799b      	ldrb	r3, [r3, #6]
    d7ee:	091b      	lsrs	r3, r3, #4
    d7f0:	2001      	movs	r0, #1
    d7f2:	4018      	ands	r0, r3
}
    d7f4:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    d7f6:	6802      	ldr	r2, [r0, #0]
    d7f8:	3308      	adds	r3, #8
    d7fa:	015b      	lsls	r3, r3, #5
    d7fc:	18d3      	adds	r3, r2, r3
    d7fe:	799b      	ldrb	r3, [r3, #6]
    d800:	095b      	lsrs	r3, r3, #5
    d802:	2001      	movs	r0, #1
    d804:	4018      	ands	r0, r3
    d806:	e7f5      	b.n	d7f4 <usb_device_endpoint_is_halted+0x1a>

0000d808 <usb_device_endpoint_set_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d808:	230f      	movs	r3, #15
    d80a:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    d80c:	b249      	sxtb	r1, r1
    d80e:	2900      	cmp	r1, #0
    d810:	db06      	blt.n	d820 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    d812:	6802      	ldr	r2, [r0, #0]
    d814:	3308      	adds	r3, #8
    d816:	015b      	lsls	r3, r3, #5
    d818:	18d3      	adds	r3, r2, r3
    d81a:	2210      	movs	r2, #16
    d81c:	715a      	strb	r2, [r3, #5]
}
    d81e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    d820:	6802      	ldr	r2, [r0, #0]
    d822:	3308      	adds	r3, #8
    d824:	015b      	lsls	r3, r3, #5
    d826:	18d3      	adds	r3, r2, r3
    d828:	2220      	movs	r2, #32
    d82a:	715a      	strb	r2, [r3, #5]
    d82c:	e7f7      	b.n	d81e <usb_device_endpoint_set_halt+0x16>

0000d82e <usb_device_endpoint_clear_halt>:
{
    d82e:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    d830:	230f      	movs	r3, #15
    d832:	400b      	ands	r3, r1
	if (ep & USB_EP_DIR_IN) {
    d834:	b249      	sxtb	r1, r1
    d836:	2900      	cmp	r1, #0
    d838:	db1c      	blt.n	d874 <usb_device_endpoint_clear_halt+0x46>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    d83a:	6801      	ldr	r1, [r0, #0]
    d83c:	001a      	movs	r2, r3
    d83e:	3208      	adds	r2, #8
    d840:	0152      	lsls	r2, r2, #5
    d842:	188a      	adds	r2, r1, r2
    d844:	7992      	ldrb	r2, [r2, #6]
    d846:	06d2      	lsls	r2, r2, #27
    d848:	d513      	bpl.n	d872 <usb_device_endpoint_clear_halt+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    d84a:	001a      	movs	r2, r3
    d84c:	3208      	adds	r2, #8
    d84e:	0152      	lsls	r2, r2, #5
    d850:	1889      	adds	r1, r1, r2
    d852:	2410      	movs	r4, #16
    d854:	710c      	strb	r4, [r1, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    d856:	6801      	ldr	r1, [r0, #0]
    d858:	188a      	adds	r2, r1, r2
    d85a:	79d2      	ldrb	r2, [r2, #7]
    d85c:	0692      	lsls	r2, r2, #26
    d85e:	d508      	bpl.n	d872 <usb_device_endpoint_clear_halt+0x44>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    d860:	3308      	adds	r3, #8
    d862:	015b      	lsls	r3, r3, #5
    d864:	18c9      	adds	r1, r1, r3
    d866:	2220      	movs	r2, #32
    d868:	71ca      	strb	r2, [r1, #7]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    d86a:	6802      	ldr	r2, [r0, #0]
    d86c:	18d3      	adds	r3, r2, r3
    d86e:	2201      	movs	r2, #1
    d870:	711a      	strb	r2, [r3, #4]
}
    d872:	bd10      	pop	{r4, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    d874:	6801      	ldr	r1, [r0, #0]
    d876:	001a      	movs	r2, r3
    d878:	3208      	adds	r2, #8
    d87a:	0152      	lsls	r2, r2, #5
    d87c:	188a      	adds	r2, r1, r2
    d87e:	7992      	ldrb	r2, [r2, #6]
    d880:	0692      	lsls	r2, r2, #26
    d882:	d5f6      	bpl.n	d872 <usb_device_endpoint_clear_halt+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    d884:	001a      	movs	r2, r3
    d886:	3208      	adds	r2, #8
    d888:	0152      	lsls	r2, r2, #5
    d88a:	1889      	adds	r1, r1, r2
    d88c:	2420      	movs	r4, #32
    d88e:	710c      	strb	r4, [r1, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    d890:	6801      	ldr	r1, [r0, #0]
    d892:	188a      	adds	r2, r1, r2
    d894:	79d2      	ldrb	r2, [r2, #7]
    d896:	0652      	lsls	r2, r2, #25
    d898:	d5eb      	bpl.n	d872 <usb_device_endpoint_clear_halt+0x44>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    d89a:	3308      	adds	r3, #8
    d89c:	015b      	lsls	r3, r3, #5
    d89e:	18c9      	adds	r1, r1, r3
    d8a0:	2240      	movs	r2, #64	; 0x40
    d8a2:	71ca      	strb	r2, [r1, #7]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    d8a4:	6802      	ldr	r2, [r0, #0]
    d8a6:	18d3      	adds	r3, r2, r3
    d8a8:	2202      	movs	r2, #2
    d8aa:	711a      	strb	r2, [r3, #4]
    d8ac:	e7e1      	b.n	d872 <usb_device_endpoint_clear_halt+0x44>
	...

0000d8b0 <usb_device_endpoint_write_buffer_job>:
{
    d8b0:	b570      	push	{r4, r5, r6, lr}
    d8b2:	b082      	sub	sp, #8
    d8b4:	4d13      	ldr	r5, [pc, #76]	; (d904 <usb_device_endpoint_write_buffer_job+0x54>)
    d8b6:	447d      	add	r5, pc
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    d8b8:	000c      	movs	r4, r1
    d8ba:	3408      	adds	r4, #8
    d8bc:	0164      	lsls	r4, r4, #5
    d8be:	6806      	ldr	r6, [r0, #0]
    d8c0:	5da4      	ldrb	r4, [r4, r6]
    d8c2:	0664      	lsls	r4, r4, #25
    d8c4:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    d8c6:	d102      	bne.n	d8ce <usb_device_endpoint_write_buffer_job+0x1e>
		return STATUS_ERR_DENIED;
    d8c8:	201c      	movs	r0, #28
}
    d8ca:	b002      	add	sp, #8
    d8cc:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    d8ce:	4c0e      	ldr	r4, [pc, #56]	; (d908 <usb_device_endpoint_write_buffer_job+0x58>)
    d8d0:	592c      	ldr	r4, [r5, r4]
    d8d2:	9401      	str	r4, [sp, #4]
    d8d4:	014d      	lsls	r5, r1, #5
    d8d6:	46a4      	mov	ip, r4
    d8d8:	4465      	add	r5, ip
    d8da:	002c      	movs	r4, r5
    d8dc:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    d8de:	696d      	ldr	r5, [r5, #20]
    d8e0:	4a0a      	ldr	r2, [pc, #40]	; (d90c <usb_device_endpoint_write_buffer_job+0x5c>)
    d8e2:	402a      	ands	r2, r5
    d8e4:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    d8e6:	6962      	ldr	r2, [r4, #20]
    d8e8:	049b      	lsls	r3, r3, #18
    d8ea:	0c9b      	lsrs	r3, r3, #18
    d8ec:	0b92      	lsrs	r2, r2, #14
    d8ee:	0392      	lsls	r2, r2, #14
    d8f0:	4313      	orrs	r3, r2
    d8f2:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    d8f4:	6803      	ldr	r3, [r0, #0]
    d8f6:	3108      	adds	r1, #8
    d8f8:	0149      	lsls	r1, r1, #5
    d8fa:	1859      	adds	r1, r3, r1
    d8fc:	2380      	movs	r3, #128	; 0x80
    d8fe:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    d900:	2000      	movs	r0, #0
    d902:	e7e2      	b.n	d8ca <usb_device_endpoint_write_buffer_job+0x1a>
    d904:	000050d6 	.word	0x000050d6
    d908:	00000038 	.word	0x00000038
    d90c:	f0003fff 	.word	0xf0003fff

0000d910 <usb_device_endpoint_read_buffer_job>:
{
    d910:	b570      	push	{r4, r5, r6, lr}
    d912:	4d11      	ldr	r5, [pc, #68]	; (d958 <usb_device_endpoint_read_buffer_job+0x48>)
    d914:	447d      	add	r5, pc
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    d916:	000c      	movs	r4, r1
    d918:	3408      	adds	r4, #8
    d91a:	0164      	lsls	r4, r4, #5
    d91c:	6806      	ldr	r6, [r0, #0]
    d91e:	5da4      	ldrb	r4, [r4, r6]
    d920:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    d922:	d101      	bne.n	d928 <usb_device_endpoint_read_buffer_job+0x18>
		return STATUS_ERR_DENIED;
    d924:	201c      	movs	r0, #28
}
    d926:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    d928:	4c0c      	ldr	r4, [pc, #48]	; (d95c <usb_device_endpoint_read_buffer_job+0x4c>)
    d92a:	592c      	ldr	r4, [r5, r4]
    d92c:	014d      	lsls	r5, r1, #5
    d92e:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    d930:	1962      	adds	r2, r4, r5
    d932:	6854      	ldr	r4, [r2, #4]
    d934:	049b      	lsls	r3, r3, #18
    d936:	091b      	lsrs	r3, r3, #4
    d938:	4d09      	ldr	r5, [pc, #36]	; (d960 <usb_device_endpoint_read_buffer_job+0x50>)
    d93a:	402c      	ands	r4, r5
    d93c:	4323      	orrs	r3, r4
    d93e:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    d940:	6853      	ldr	r3, [r2, #4]
    d942:	0b9b      	lsrs	r3, r3, #14
    d944:	039c      	lsls	r4, r3, #14
    d946:	6054      	str	r4, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    d948:	6803      	ldr	r3, [r0, #0]
    d94a:	3108      	adds	r1, #8
    d94c:	0149      	lsls	r1, r1, #5
    d94e:	1859      	adds	r1, r3, r1
    d950:	2340      	movs	r3, #64	; 0x40
    d952:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    d954:	2000      	movs	r0, #0
    d956:	e7e6      	b.n	d926 <usb_device_endpoint_read_buffer_job+0x16>
    d958:	00005078 	.word	0x00005078
    d95c:	00000038 	.word	0x00000038
    d960:	f0003fff 	.word	0xf0003fff

0000d964 <usb_device_endpoint_setup_buffer_job>:
{
    d964:	4b0b      	ldr	r3, [pc, #44]	; (d994 <usb_device_endpoint_setup_buffer_job+0x30>)
    d966:	447b      	add	r3, pc
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    d968:	4a0b      	ldr	r2, [pc, #44]	; (d998 <usb_device_endpoint_setup_buffer_job+0x34>)
    d96a:	589b      	ldr	r3, [r3, r2]
    d96c:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    d96e:	6859      	ldr	r1, [r3, #4]
    d970:	4a0a      	ldr	r2, [pc, #40]	; (d99c <usb_device_endpoint_setup_buffer_job+0x38>)
    d972:	4011      	ands	r1, r2
    d974:	2280      	movs	r2, #128	; 0x80
    d976:	0292      	lsls	r2, r2, #10
    d978:	430a      	orrs	r2, r1
    d97a:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    d97c:	685a      	ldr	r2, [r3, #4]
    d97e:	0b92      	lsrs	r2, r2, #14
    d980:	0391      	lsls	r1, r2, #14
    d982:	6059      	str	r1, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    d984:	6802      	ldr	r2, [r0, #0]
    d986:	2140      	movs	r1, #64	; 0x40
    d988:	2382      	movs	r3, #130	; 0x82
    d98a:	005b      	lsls	r3, r3, #1
    d98c:	54d1      	strb	r1, [r2, r3]
}
    d98e:	2000      	movs	r0, #0
    d990:	4770      	bx	lr
    d992:	46c0      	nop			; (mov r8, r8)
    d994:	00005026 	.word	0x00005026
    d998:	00000038 	.word	0x00000038
    d99c:	f0003fff 	.word	0xf0003fff

0000d9a0 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    d9a0:	6802      	ldr	r2, [r0, #0]
    d9a2:	7813      	ldrb	r3, [r2, #0]
    d9a4:	2102      	movs	r1, #2
    d9a6:	430b      	orrs	r3, r1
    d9a8:	b2db      	uxtb	r3, r3
    d9aa:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    d9ac:	6803      	ldr	r3, [r0, #0]
    d9ae:	789b      	ldrb	r3, [r3, #2]
    d9b0:	2b02      	cmp	r3, #2
    d9b2:	d0fb      	beq.n	d9ac <usb_enable+0xc>
}
    d9b4:	4770      	bx	lr
	...

0000d9b8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    d9b8:	b510      	push	{r4, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    d9ba:	4b07      	ldr	r3, [pc, #28]	; (d9d8 <USB_Handler+0x20>)
    d9bc:	447b      	add	r3, pc
    d9be:	681b      	ldr	r3, [r3, #0]
    d9c0:	681b      	ldr	r3, [r3, #0]
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	09db      	lsrs	r3, r3, #7
    d9c6:	d103      	bne.n	d9d0 <USB_Handler+0x18>
		/*host mode ISR */
		_usb_host_interrupt_handler();
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    d9c8:	4b04      	ldr	r3, [pc, #16]	; (d9dc <USB_Handler+0x24>)
    d9ca:	447b      	add	r3, pc
    d9cc:	4798      	blx	r3
	}
}
    d9ce:	bd10      	pop	{r4, pc}
		_usb_host_interrupt_handler();
    d9d0:	4b03      	ldr	r3, [pc, #12]	; (d9e0 <USB_Handler+0x28>)
    d9d2:	447b      	add	r3, pc
    d9d4:	4798      	blx	r3
    d9d6:	e7fa      	b.n	d9ce <USB_Handler+0x16>
    d9d8:	1fff31e8 	.word	0x1fff31e8
    d9dc:	fffff173 	.word	0xfffff173
    d9e0:	fffff4c3 	.word	0xfffff4c3

0000d9e4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    d9e4:	2200      	movs	r2, #0
    d9e6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    d9e8:	2301      	movs	r3, #1
    d9ea:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    d9ec:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    d9ee:	70c3      	strb	r3, [r0, #3]
}
    d9f0:	4770      	bx	lr
	...

0000d9f4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9f6:	46d6      	mov	lr, sl
    d9f8:	4647      	mov	r7, r8
    d9fa:	b580      	push	{r7, lr}
    d9fc:	b085      	sub	sp, #20
    d9fe:	0004      	movs	r4, r0
    da00:	000d      	movs	r5, r1
    da02:	0017      	movs	r7, r2
    da04:	4e82      	ldr	r6, [pc, #520]	; (dc10 <usb_init+0x21c>)
    da06:	447e      	add	r6, pc
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    da08:	4b82      	ldr	r3, [pc, #520]	; (dc14 <usb_init+0x220>)
    da0a:	58f2      	ldr	r2, [r6, r3]
    da0c:	2300      	movs	r3, #0
    da0e:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    da10:	4a81      	ldr	r2, [pc, #516]	; (dc18 <usb_init+0x224>)
    da12:	447a      	add	r2, pc
    da14:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    da16:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    da18:	4980      	ldr	r1, [pc, #512]	; (dc1c <usb_init+0x228>)
    da1a:	69ca      	ldr	r2, [r1, #28]
    da1c:	2020      	movs	r0, #32
    da1e:	4302      	orrs	r2, r0
    da20:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    da22:	aa03      	add	r2, sp, #12
    da24:	4690      	mov	r8, r2
    da26:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    da28:	2201      	movs	r2, #1
    da2a:	4641      	mov	r1, r8
    da2c:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    da2e:	70cb      	strb	r3, [r1, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    da30:	3306      	adds	r3, #6
    da32:	469a      	mov	sl, r3
    da34:	4652      	mov	r2, sl
    da36:	700a      	strb	r2, [r1, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    da38:	3808      	subs	r0, #8
    da3a:	4b79      	ldr	r3, [pc, #484]	; (dc20 <usb_init+0x22c>)
    da3c:	58f3      	ldr	r3, [r6, r3]
    da3e:	9301      	str	r3, [sp, #4]
    da40:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    da42:	4641      	mov	r1, r8
    da44:	4650      	mov	r0, sl
    da46:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    da48:	2019      	movs	r0, #25
    da4a:	9a01      	ldr	r2, [sp, #4]
    da4c:	4790      	blx	r2

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    da4e:	78bb      	ldrb	r3, [r7, #2]
    da50:	a902      	add	r1, sp, #8
    da52:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    da54:	2006      	movs	r0, #6
    da56:	4b73      	ldr	r3, [pc, #460]	; (dc24 <usb_init+0x230>)
    da58:	58f3      	ldr	r3, [r6, r3]
    da5a:	9301      	str	r3, [sp, #4]
    da5c:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    da5e:	2006      	movs	r0, #6
    da60:	4b71      	ldr	r3, [pc, #452]	; (dc28 <usb_init+0x234>)
    da62:	58f3      	ldr	r3, [r6, r3]
    da64:	9301      	str	r3, [sp, #4]
    da66:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    da68:	782b      	ldrb	r3, [r5, #0]
    da6a:	2201      	movs	r2, #1
    da6c:	4313      	orrs	r3, r2
    da6e:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    da70:	78ab      	ldrb	r3, [r5, #2]
    da72:	07db      	lsls	r3, r3, #31
    da74:	d4fc      	bmi.n	da70 <usb_init+0x7c>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    da76:	4a6d      	ldr	r2, [pc, #436]	; (dc2c <usb_init+0x238>)
    da78:	78d3      	ldrb	r3, [r2, #3]
    da7a:	2103      	movs	r1, #3
    da7c:	438b      	bics	r3, r1
    da7e:	2102      	movs	r1, #2
    da80:	430b      	orrs	r3, r1
    da82:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    da84:	78d3      	ldrb	r3, [r2, #3]
    da86:	210c      	movs	r1, #12
    da88:	438b      	bics	r3, r1
    da8a:	2108      	movs	r1, #8
    da8c:	430b      	orrs	r3, r1
    da8e:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    da90:	4b67      	ldr	r3, [pc, #412]	; (dc30 <usb_init+0x23c>)
    da92:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    da94:	0b52      	lsrs	r2, r2, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    da96:	231f      	movs	r3, #31
    da98:	4013      	ands	r3, r2
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    da9a:	2b1f      	cmp	r3, #31
    da9c:	d04b      	beq.n	db36 <usb_init+0x142>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    da9e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    daa0:	019b      	lsls	r3, r3, #6
    daa2:	4964      	ldr	r1, [pc, #400]	; (dc34 <usb_init+0x240>)
    daa4:	400a      	ands	r2, r1
    daa6:	4313      	orrs	r3, r2
    daa8:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    daaa:	4b61      	ldr	r3, [pc, #388]	; (dc30 <usb_init+0x23c>)
    daac:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    daae:	0c92      	lsrs	r2, r2, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    dab0:	231f      	movs	r3, #31
    dab2:	401a      	ands	r2, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    dab4:	2a1f      	cmp	r2, #31
    dab6:	d040      	beq.n	db3a <usb_init+0x146>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    dab8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    daba:	211f      	movs	r1, #31
    dabc:	438b      	bics	r3, r1
    dabe:	4313      	orrs	r3, r2
    dac0:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    dac2:	4b5b      	ldr	r3, [pc, #364]	; (dc30 <usb_init+0x23c>)
    dac4:	681a      	ldr	r2, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    dac6:	0dd2      	lsrs	r2, r2, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    dac8:	2307      	movs	r3, #7
    daca:	4013      	ands	r3, r2
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    dacc:	2b07      	cmp	r3, #7
    dace:	d036      	beq.n	db3e <usb_init+0x14a>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    dad0:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    dad2:	031b      	lsls	r3, r3, #12
    dad4:	4958      	ldr	r1, [pc, #352]	; (dc38 <usb_init+0x244>)
    dad6:	400a      	ands	r2, r1
    dad8:	4313      	orrs	r3, r2
    dada:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    dadc:	783a      	ldrb	r2, [r7, #0]
    dade:	7829      	ldrb	r1, [r5, #0]
    dae0:	01d2      	lsls	r2, r2, #7
    dae2:	237f      	movs	r3, #127	; 0x7f
    dae4:	400b      	ands	r3, r1
    dae6:	4313      	orrs	r3, r2
    dae8:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    daea:	7879      	ldrb	r1, [r7, #1]
    daec:	782b      	ldrb	r3, [r5, #0]
    daee:	2201      	movs	r2, #1
    daf0:	400a      	ands	r2, r1
    daf2:	0092      	lsls	r2, r2, #2
    daf4:	2104      	movs	r1, #4
    daf6:	438b      	bics	r3, r1
    daf8:	4313      	orrs	r3, r2
    dafa:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    dafc:	4b4f      	ldr	r3, [pc, #316]	; (dc3c <usb_init+0x248>)
    dafe:	58f3      	ldr	r3, [r6, r3]
    db00:	9301      	str	r3, [sp, #4]
    db02:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    db04:	78fb      	ldrb	r3, [r7, #3]
    db06:	2b01      	cmp	r3, #1
    db08:	d01b      	beq.n	db42 <usb_init+0x14e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    db0a:	2b00      	cmp	r3, #0
    db0c:	d106      	bne.n	db1c <usb_init+0x128>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    db0e:	6822      	ldr	r2, [r4, #0]
    db10:	8913      	ldrh	r3, [r2, #8]
    db12:	210c      	movs	r1, #12
    db14:	438b      	bics	r3, r1
    db16:	2104      	movs	r1, #4
    db18:	430b      	orrs	r3, r1
    db1a:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    db1c:	4b47      	ldr	r3, [pc, #284]	; (dc3c <usb_init+0x248>)
    db1e:	58f3      	ldr	r3, [r6, r3]
    db20:	9301      	str	r3, [sp, #4]
    db22:	2280      	movs	r2, #128	; 0x80
    db24:	0052      	lsls	r2, r2, #1
    db26:	2100      	movs	r1, #0
    db28:	0018      	movs	r0, r3
    db2a:	4b45      	ldr	r3, [pc, #276]	; (dc40 <usb_init+0x24c>)
    db2c:	58f3      	ldr	r3, [r6, r3]
    db2e:	9301      	str	r3, [sp, #4]
    db30:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    db32:	2300      	movs	r3, #0
    db34:	e010      	b.n	db58 <usb_init+0x164>
		pad_transn = 5;
    db36:	3b1a      	subs	r3, #26
    db38:	e7b1      	b.n	da9e <usb_init+0xaa>
		pad_transp = 29;
    db3a:	3a02      	subs	r2, #2
    db3c:	e7bc      	b.n	dab8 <usb_init+0xc4>
		pad_trim = 3;
    db3e:	3b04      	subs	r3, #4
    db40:	e7c6      	b.n	dad0 <usb_init+0xdc>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    db42:	6822      	ldr	r2, [r4, #0]
    db44:	8913      	ldrh	r3, [r2, #8]
    db46:	3108      	adds	r1, #8
    db48:	438b      	bics	r3, r1
    db4a:	8113      	strh	r3, [r2, #8]
    db4c:	e7e6      	b.n	db1c <usb_init+0x128>
		module_inst->host_callback[i] = NULL;
    db4e:	009a      	lsls	r2, r3, #2
    db50:	18a2      	adds	r2, r4, r2
    db52:	2100      	movs	r1, #0
    db54:	6051      	str	r1, [r2, #4]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    db56:	3301      	adds	r3, #1
    db58:	2b07      	cmp	r3, #7
    db5a:	d9f8      	bls.n	db4e <usb_init+0x15a>
    db5c:	2000      	movs	r0, #0
    db5e:	e00a      	b.n	db76 <usb_init+0x182>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    db60:	0083      	lsls	r3, r0, #2
    db62:	189b      	adds	r3, r3, r2
    db64:	3308      	adds	r3, #8
    db66:	009b      	lsls	r3, r3, #2
    db68:	18e3      	adds	r3, r4, r3
    db6a:	2100      	movs	r1, #0
    db6c:	6059      	str	r1, [r3, #4]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    db6e:	3201      	adds	r2, #1
    db70:	2a03      	cmp	r2, #3
    db72:	d9f5      	bls.n	db60 <usb_init+0x16c>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    db74:	3001      	adds	r0, #1
    db76:	2807      	cmp	r0, #7
    db78:	d801      	bhi.n	db7e <usb_init+0x18a>
    db7a:	2200      	movs	r2, #0
    db7c:	e7f8      	b.n	db70 <usb_init+0x17c>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    db7e:	2300      	movs	r3, #0
    db80:	22a4      	movs	r2, #164	; 0xa4
    db82:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    db84:	3201      	adds	r2, #1
    db86:	54a3      	strb	r3, [r4, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    db88:	2200      	movs	r2, #0
    db8a:	e007      	b.n	db9c <usb_init+0x1a8>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    db8c:	18a3      	adds	r3, r4, r2
    db8e:	0018      	movs	r0, r3
    db90:	30a6      	adds	r0, #166	; 0xa6
    db92:	2100      	movs	r1, #0
    db94:	7001      	strb	r1, [r0, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    db96:	33ae      	adds	r3, #174	; 0xae
    db98:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    db9a:	3201      	adds	r2, #1
    db9c:	2a07      	cmp	r2, #7
    db9e:	d9f5      	bls.n	db8c <usb_init+0x198>
    dba0:	2300      	movs	r3, #0
    dba2:	e005      	b.n	dbb0 <usb_init+0x1bc>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    dba4:	001a      	movs	r2, r3
    dba6:	322e      	adds	r2, #46	; 0x2e
    dba8:	0092      	lsls	r2, r2, #2
    dbaa:	2100      	movs	r1, #0
    dbac:	5111      	str	r1, [r2, r4]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    dbae:	3301      	adds	r3, #1
    dbb0:	2b06      	cmp	r3, #6
    dbb2:	d9f7      	bls.n	dba4 <usb_init+0x1b0>
    dbb4:	2000      	movs	r0, #0
    dbb6:	e00a      	b.n	dbce <usb_init+0x1da>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    dbb8:	0083      	lsls	r3, r0, #2
    dbba:	189b      	adds	r3, r3, r2
    dbbc:	3334      	adds	r3, #52	; 0x34
    dbbe:	009b      	lsls	r3, r3, #2
    dbc0:	18e3      	adds	r3, r4, r3
    dbc2:	2100      	movs	r1, #0
    dbc4:	6059      	str	r1, [r3, #4]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    dbc6:	3201      	adds	r2, #1
    dbc8:	2a03      	cmp	r2, #3
    dbca:	d9f5      	bls.n	dbb8 <usb_init+0x1c4>
	for (i = 0; i < USB_EPT_NUM; i++) {
    dbcc:	3001      	adds	r0, #1
    dbce:	2807      	cmp	r0, #7
    dbd0:	d801      	bhi.n	dbd6 <usb_init+0x1e2>
    dbd2:	2200      	movs	r2, #0
    dbd4:	e7f8      	b.n	dbc8 <usb_init+0x1d4>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    dbd6:	2300      	movs	r3, #0
    dbd8:	22aa      	movs	r2, #170	; 0xaa
    dbda:	0052      	lsls	r2, r2, #1
    dbdc:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    dbde:	3202      	adds	r2, #2
    dbe0:	52a3      	strh	r3, [r4, r2]
	for (j = 0; j < USB_EPT_NUM; j++) {
    dbe2:	2200      	movs	r2, #0
    dbe4:	e009      	b.n	dbfa <usb_init+0x206>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    dbe6:	18a3      	adds	r3, r4, r2
    dbe8:	0018      	movs	r0, r3
    dbea:	3059      	adds	r0, #89	; 0x59
    dbec:	30ff      	adds	r0, #255	; 0xff
    dbee:	2100      	movs	r1, #0
    dbf0:	7001      	strb	r1, [r0, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    dbf2:	3361      	adds	r3, #97	; 0x61
    dbf4:	33ff      	adds	r3, #255	; 0xff
    dbf6:	7019      	strb	r1, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    dbf8:	3201      	adds	r2, #1
    dbfa:	2a07      	cmp	r2, #7
    dbfc:	d9f3      	bls.n	dbe6 <usb_init+0x1f2>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    dbfe:	2280      	movs	r2, #128	; 0x80
    dc00:	4b10      	ldr	r3, [pc, #64]	; (dc44 <usb_init+0x250>)
    dc02:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    dc04:	2000      	movs	r0, #0
    dc06:	b005      	add	sp, #20
    dc08:	bc0c      	pop	{r2, r3}
    dc0a:	4690      	mov	r8, r2
    dc0c:	469a      	mov	sl, r3
    dc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc10:	00004f86 	.word	0x00004f86
    dc14:	0000010c 	.word	0x0000010c
    dc18:	1fff3192 	.word	0x1fff3192
    dc1c:	40000400 	.word	0x40000400
    dc20:	0000046c 	.word	0x0000046c
    dc24:	00000114 	.word	0x00000114
    dc28:	00000380 	.word	0x00000380
    dc2c:	41005000 	.word	0x41005000
    dc30:	00806024 	.word	0x00806024
    dc34:	fffff83f 	.word	0xfffff83f
    dc38:	ffff8fff 	.word	0xffff8fff
    dc3c:	00000038 	.word	0x00000038
    dc40:	00000328 	.word	0x00000328
    dc44:	e000e100 	.word	0xe000e100

0000dc48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    dc48:	e7fe      	b.n	dc48 <Dummy_Handler>
	...

0000dc4c <Reset_Handler>:
{
    dc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc4e:	b083      	sub	sp, #12
    dc50:	4c2e      	ldr	r4, [pc, #184]	; (dd0c <Reset_Handler+0xc0>)
    dc52:	447c      	add	r4, pc
        if (pSrc != pDest) {
    dc54:	4b2e      	ldr	r3, [pc, #184]	; (dd10 <Reset_Handler+0xc4>)
    dc56:	58e3      	ldr	r3, [r4, r3]
    dc58:	9300      	str	r3, [sp, #0]
    dc5a:	4b2e      	ldr	r3, [pc, #184]	; (dd14 <Reset_Handler+0xc8>)
    dc5c:	58e3      	ldr	r3, [r4, r3]
    dc5e:	9301      	str	r3, [sp, #4]
    dc60:	9b00      	ldr	r3, [sp, #0]
    dc62:	9a01      	ldr	r2, [sp, #4]
    dc64:	4293      	cmp	r3, r2
    dc66:	d00d      	beq.n	dc84 <Reset_Handler+0x38>
    dc68:	4b2a      	ldr	r3, [pc, #168]	; (dd14 <Reset_Handler+0xc8>)
    dc6a:	58e3      	ldr	r3, [r4, r3]
    dc6c:	4a28      	ldr	r2, [pc, #160]	; (dd10 <Reset_Handler+0xc4>)
    dc6e:	58a2      	ldr	r2, [r4, r2]
    dc70:	e003      	b.n	dc7a <Reset_Handler+0x2e>
                        *pDest++ = *pSrc++;
    dc72:	6811      	ldr	r1, [r2, #0]
    dc74:	6019      	str	r1, [r3, #0]
    dc76:	3304      	adds	r3, #4
    dc78:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    dc7a:	4927      	ldr	r1, [pc, #156]	; (dd18 <Reset_Handler+0xcc>)
    dc7c:	5861      	ldr	r1, [r4, r1]
    dc7e:	9100      	str	r1, [sp, #0]
    dc80:	428b      	cmp	r3, r1
    dc82:	d3f6      	bcc.n	dc72 <Reset_Handler+0x26>
                        *pDest++ = *pSrc++;
    dc84:	4b25      	ldr	r3, [pc, #148]	; (dd1c <Reset_Handler+0xd0>)
    dc86:	58e3      	ldr	r3, [r4, r3]
    dc88:	e002      	b.n	dc90 <Reset_Handler+0x44>
                *pDest++ = 0;
    dc8a:	2200      	movs	r2, #0
    dc8c:	601a      	str	r2, [r3, #0]
    dc8e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    dc90:	4a23      	ldr	r2, [pc, #140]	; (dd20 <Reset_Handler+0xd4>)
    dc92:	58a2      	ldr	r2, [r4, r2]
    dc94:	9200      	str	r2, [sp, #0]
    dc96:	4293      	cmp	r3, r2
    dc98:	d3f7      	bcc.n	dc8a <Reset_Handler+0x3e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    dc9a:	4b22      	ldr	r3, [pc, #136]	; (dd24 <Reset_Handler+0xd8>)
    dc9c:	58e3      	ldr	r3, [r4, r3]
    dc9e:	9300      	str	r3, [sp, #0]
    dca0:	23ff      	movs	r3, #255	; 0xff
    dca2:	9a00      	ldr	r2, [sp, #0]
    dca4:	439a      	bics	r2, r3
    dca6:	0013      	movs	r3, r2
    dca8:	4a1f      	ldr	r2, [pc, #124]	; (dd28 <Reset_Handler+0xdc>)
    dcaa:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    dcac:	2102      	movs	r1, #2
    dcae:	2390      	movs	r3, #144	; 0x90
    dcb0:	005b      	lsls	r3, r3, #1
    dcb2:	4a1e      	ldr	r2, [pc, #120]	; (dd2c <Reset_Handler+0xe0>)
    dcb4:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    dcb6:	491e      	ldr	r1, [pc, #120]	; (dd30 <Reset_Handler+0xe4>)
    dcb8:	78cb      	ldrb	r3, [r1, #3]
    dcba:	2603      	movs	r6, #3
    dcbc:	43b3      	bics	r3, r6
    dcbe:	2502      	movs	r5, #2
    dcc0:	432b      	orrs	r3, r5
    dcc2:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    dcc4:	78cb      	ldrb	r3, [r1, #3]
    dcc6:	270c      	movs	r7, #12
    dcc8:	43bb      	bics	r3, r7
    dcca:	2208      	movs	r2, #8
    dccc:	4313      	orrs	r3, r2
    dcce:	70cb      	strb	r3, [r1, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    dcd0:	4b18      	ldr	r3, [pc, #96]	; (dd34 <Reset_Handler+0xe8>)
    dcd2:	7b98      	ldrb	r0, [r3, #14]
    dcd4:	2130      	movs	r1, #48	; 0x30
    dcd6:	4388      	bics	r0, r1
    dcd8:	2120      	movs	r1, #32
    dcda:	4308      	orrs	r0, r1
    dcdc:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    dcde:	7b99      	ldrb	r1, [r3, #14]
    dce0:	43b9      	bics	r1, r7
    dce2:	4311      	orrs	r1, r2
    dce4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    dce6:	7b9a      	ldrb	r2, [r3, #14]
    dce8:	43b2      	bics	r2, r6
    dcea:	432a      	orrs	r2, r5
    dcec:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    dcee:	4a12      	ldr	r2, [pc, #72]	; (dd38 <Reset_Handler+0xec>)
    dcf0:	6851      	ldr	r1, [r2, #4]
    dcf2:	2380      	movs	r3, #128	; 0x80
    dcf4:	430b      	orrs	r3, r1
    dcf6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    dcf8:	4b10      	ldr	r3, [pc, #64]	; (dd3c <Reset_Handler+0xf0>)
    dcfa:	58e3      	ldr	r3, [r4, r3]
    dcfc:	9300      	str	r3, [sp, #0]
    dcfe:	4798      	blx	r3
        main();
    dd00:	4b0f      	ldr	r3, [pc, #60]	; (dd40 <Reset_Handler+0xf4>)
    dd02:	58e3      	ldr	r3, [r4, r3]
    dd04:	9300      	str	r3, [sp, #0]
    dd06:	4798      	blx	r3
    dd08:	e7fe      	b.n	dd08 <Reset_Handler+0xbc>
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	00004d3a 	.word	0x00004d3a
    dd10:	000000bc 	.word	0x000000bc
    dd14:	000000f0 	.word	0x000000f0
    dd18:	00000408 	.word	0x00000408
    dd1c:	000000d8 	.word	0x000000d8
    dd20:	00000350 	.word	0x00000350
    dd24:	0000009c 	.word	0x0000009c
    dd28:	e000ed00 	.word	0xe000ed00
    dd2c:	41007000 	.word	0x41007000
    dd30:	41005000 	.word	0x41005000
    dd34:	41004800 	.word	0x41004800
    dd38:	41004000 	.word	0x41004000
    dd3c:	00000188 	.word	0x00000188
    dd40:	00000330 	.word	0x00000330

0000dd44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd46:	0006      	movs	r6, r0
    dd48:	000d      	movs	r5, r1
    dd4a:	0014      	movs	r4, r2
    dd4c:	4f0a      	ldr	r7, [pc, #40]	; (dd78 <_read+0x34>)
    dd4e:	447f      	add	r7, pc
	int nChars = 0;

	if (file != 0) {
    dd50:	2800      	cmp	r0, #0
    dd52:	d00d      	beq.n	dd70 <_read+0x2c>
		return -1;
    dd54:	2601      	movs	r6, #1
    dd56:	4276      	negs	r6, r6
    dd58:	e00c      	b.n	dd74 <_read+0x30>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    dd5a:	4b08      	ldr	r3, [pc, #32]	; (dd7c <_read+0x38>)
    dd5c:	58fb      	ldr	r3, [r7, r3]
    dd5e:	6818      	ldr	r0, [r3, #0]
    dd60:	4b07      	ldr	r3, [pc, #28]	; (dd80 <_read+0x3c>)
    dd62:	58fb      	ldr	r3, [r7, r3]
    dd64:	681b      	ldr	r3, [r3, #0]
    dd66:	0029      	movs	r1, r5
    dd68:	4798      	blx	r3
		ptr++;
    dd6a:	3501      	adds	r5, #1
		nChars++;
    dd6c:	3601      	adds	r6, #1
	for (; len > 0; --len) {
    dd6e:	3c01      	subs	r4, #1
    dd70:	2c00      	cmp	r4, #0
    dd72:	dcf2      	bgt.n	dd5a <_read+0x16>
	}
	return nChars;
}
    dd74:	0030      	movs	r0, r6
    dd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd78:	00004c3e 	.word	0x00004c3e
    dd7c:	00000334 	.word	0x00000334
    dd80:	00000170 	.word	0x00000170

0000dd84 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd86:	0014      	movs	r4, r2
    dd88:	4d0e      	ldr	r5, [pc, #56]	; (ddc4 <_write+0x40>)
    dd8a:	447d      	add	r5, pc
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    dd8c:	3801      	subs	r0, #1
    dd8e:	2802      	cmp	r0, #2
    dd90:	d811      	bhi.n	ddb6 <_write+0x32>
    dd92:	2600      	movs	r6, #0
		return -1;
	}

	for (; len != 0; --len) {
    dd94:	2c00      	cmp	r4, #0
    dd96:	d013      	beq.n	ddc0 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    dd98:	4b0b      	ldr	r3, [pc, #44]	; (ddc8 <_write+0x44>)
    dd9a:	58eb      	ldr	r3, [r5, r3]
    dd9c:	6818      	ldr	r0, [r3, #0]
    dd9e:	1c4f      	adds	r7, r1, #1
    dda0:	7809      	ldrb	r1, [r1, #0]
    dda2:	4b0a      	ldr	r3, [pc, #40]	; (ddcc <_write+0x48>)
    dda4:	58eb      	ldr	r3, [r5, r3]
    dda6:	681b      	ldr	r3, [r3, #0]
    dda8:	4798      	blx	r3
    ddaa:	2800      	cmp	r0, #0
    ddac:	db06      	blt.n	ddbc <_write+0x38>
			return -1;
		}
		++nChars;
    ddae:	3601      	adds	r6, #1
	for (; len != 0; --len) {
    ddb0:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
    ddb2:	0039      	movs	r1, r7
    ddb4:	e7ee      	b.n	dd94 <_write+0x10>
		return -1;
    ddb6:	2601      	movs	r6, #1
    ddb8:	4276      	negs	r6, r6
    ddba:	e001      	b.n	ddc0 <_write+0x3c>
			return -1;
    ddbc:	2601      	movs	r6, #1
    ddbe:	4276      	negs	r6, r6
	}
	return nChars;
}
    ddc0:	0030      	movs	r0, r6
    ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddc4:	00004c02 	.word	0x00004c02
    ddc8:	00000334 	.word	0x00000334
    ddcc:	000001c4 	.word	0x000001c4

0000ddd0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    ddd0:	b082      	sub	sp, #8
    ddd2:	0003      	movs	r3, r0
    ddd4:	4a0a      	ldr	r2, [pc, #40]	; (de00 <_sbrk+0x30>)
    ddd6:	447a      	add	r2, pc
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    ddd8:	490a      	ldr	r1, [pc, #40]	; (de04 <_sbrk+0x34>)
    ddda:	4479      	add	r1, pc
    dddc:	6809      	ldr	r1, [r1, #0]
    ddde:	2900      	cmp	r1, #0
    dde0:	d006      	beq.n	ddf0 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    dde2:	4a09      	ldr	r2, [pc, #36]	; (de08 <_sbrk+0x38>)
    dde4:	447a      	add	r2, pc
    dde6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    dde8:	18c3      	adds	r3, r0, r3
    ddea:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    ddec:	b002      	add	sp, #8
    ddee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    ddf0:	4906      	ldr	r1, [pc, #24]	; (de0c <_sbrk+0x3c>)
    ddf2:	5852      	ldr	r2, [r2, r1]
    ddf4:	9201      	str	r2, [sp, #4]
    ddf6:	4a06      	ldr	r2, [pc, #24]	; (de10 <_sbrk+0x40>)
    ddf8:	447a      	add	r2, pc
    ddfa:	9901      	ldr	r1, [sp, #4]
    ddfc:	6011      	str	r1, [r2, #0]
    ddfe:	e7f0      	b.n	dde2 <_sbrk+0x12>
    de00:	00004bb6 	.word	0x00004bb6
    de04:	1fff2de6 	.word	0x1fff2de6
    de08:	1fff2ddc 	.word	0x1fff2ddc
    de0c:	00000418 	.word	0x00000418
    de10:	1fff2dc8 	.word	0x1fff2dc8

0000de14 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    de14:	2001      	movs	r0, #1
    de16:	4240      	negs	r0, r0
    de18:	4770      	bx	lr

0000de1a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    de1a:	2380      	movs	r3, #128	; 0x80
    de1c:	019b      	lsls	r3, r3, #6
    de1e:	604b      	str	r3, [r1, #4]

	return 0;
}
    de20:	2000      	movs	r0, #0
    de22:	4770      	bx	lr

0000de24 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    de24:	2001      	movs	r0, #1
    de26:	4770      	bx	lr

0000de28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    de28:	2000      	movs	r0, #0
    de2a:	4770      	bx	lr

0000de2c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    de2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de2e:	b08d      	sub	sp, #52	; 0x34
    de30:	4e27      	ldr	r6, [pc, #156]	; (ded0 <configure_rtc_calendar+0xa4>)
    de32:	447e      	add	r6, pc
	time->second = 0;
    de34:	2200      	movs	r2, #0
    de36:	ab03      	add	r3, sp, #12
    de38:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    de3a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    de3c:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    de3e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    de40:	2101      	movs	r1, #1
    de42:	7119      	strb	r1, [r3, #4]
	time->month  = 1;
    de44:	7159      	strb	r1, [r3, #5]
	time->year   = 2000;
    de46:	21fa      	movs	r1, #250	; 0xfa
    de48:	00c9      	lsls	r1, r1, #3
    de4a:	80d9      	strh	r1, [r3, #6]
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    de4c:	20a0      	movs	r0, #160	; 0xa0
    de4e:	0100      	lsls	r0, r0, #4
    de50:	ab07      	add	r3, sp, #28
    de52:	8018      	strh	r0, [r3, #0]
	config->clear_on_match      = false;
    de54:	709a      	strb	r2, [r3, #2]
	config->continuously_update = false;
    de56:	70da      	strb	r2, [r3, #3]
	config->clock_24h           = false;
    de58:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    de5a:	80d9      	strh	r1, [r3, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    de5c:	2400      	movs	r4, #0
    de5e:	2c00      	cmp	r4, #0
    de60:	d022      	beq.n	dea8 <configure_rtc_calendar+0x7c>
	time->minute = 0;
    de62:	2200      	movs	r2, #0
    de64:	ab05      	add	r3, sp, #20
    de66:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    de68:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    de6a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    de6c:	2101      	movs	r1, #1
    de6e:	7119      	strb	r1, [r3, #4]
	time->month  = 1;
    de70:	7159      	strb	r1, [r3, #5]

	rtc_calendar_get_config_defaults(&config_rtc_calendar);

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
	init_time.year   = 2014;
    de72:	4a18      	ldr	r2, [pc, #96]	; (ded4 <configure_rtc_calendar+0xa8>)
    de74:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
	init_time.day    = 1;
	init_time.hour   = 0;
	init_time.minute = 0;
	init_time.second = 4;
    de76:	2204      	movs	r2, #4
    de78:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    de7a:	aa07      	add	r2, sp, #28
    de7c:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    de7e:	a909      	add	r1, sp, #36	; 0x24
    de80:	cb11      	ldmia	r3!, {r0, r4}
    de82:	c111      	stmia	r1!, {r0, r4}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    de84:	2306      	movs	r3, #6
    de86:	7413      	strb	r3, [r2, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    de88:	4b13      	ldr	r3, [pc, #76]	; (ded8 <configure_rtc_calendar+0xac>)
    de8a:	58f3      	ldr	r3, [r6, r3]
    de8c:	9300      	str	r3, [sp, #0]
    de8e:	4913      	ldr	r1, [pc, #76]	; (dedc <configure_rtc_calendar+0xb0>)
    de90:	0018      	movs	r0, r3
    de92:	4b13      	ldr	r3, [pc, #76]	; (dee0 <configure_rtc_calendar+0xb4>)
    de94:	58f3      	ldr	r3, [r6, r3]
    de96:	9301      	str	r3, [sp, #4]
    de98:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    de9a:	9800      	ldr	r0, [sp, #0]
    de9c:	4b11      	ldr	r3, [pc, #68]	; (dee4 <configure_rtc_calendar+0xb8>)
    de9e:	58f3      	ldr	r3, [r6, r3]
    dea0:	9300      	str	r3, [sp, #0]
    dea2:	4798      	blx	r3
}
    dea4:	b00d      	add	sp, #52	; 0x34
    dea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config->alarm[i].time = time;
    dea8:	00a7      	lsls	r7, r4, #2
    deaa:	193b      	adds	r3, r7, r4
    deac:	0058      	lsls	r0, r3, #1
    deae:	ad07      	add	r5, sp, #28
    deb0:	1828      	adds	r0, r5, r0
    deb2:	3008      	adds	r0, #8
    deb4:	2208      	movs	r2, #8
    deb6:	a903      	add	r1, sp, #12
    deb8:	4b0b      	ldr	r3, [pc, #44]	; (dee8 <configure_rtc_calendar+0xbc>)
    deba:	58f3      	ldr	r3, [r6, r3]
    debc:	9300      	str	r3, [sp, #0]
    debe:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    dec0:	193f      	adds	r7, r7, r4
    dec2:	007b      	lsls	r3, r7, #1
    dec4:	18ed      	adds	r5, r5, r3
    dec6:	2306      	movs	r3, #6
    dec8:	742b      	strb	r3, [r5, #16]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    deca:	3401      	adds	r4, #1
    decc:	b2e4      	uxtb	r4, r4
    dece:	e7c6      	b.n	de5e <configure_rtc_calendar+0x32>
    ded0:	00004b5a 	.word	0x00004b5a
    ded4:	000007de 	.word	0x000007de
    ded8:	00000058 	.word	0x00000058
    dedc:	40001400 	.word	0x40001400
    dee0:	00000140 	.word	0x00000140
    dee4:	000000a4 	.word	0x000000a4
    dee8:	000000ec 	.word	0x000000ec

0000deec <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    deec:	b5f0      	push	{r4, r5, r6, r7, lr}
    deee:	b083      	sub	sp, #12
    def0:	0006      	movs	r6, r0
    def2:	4d13      	ldr	r5, [pc, #76]	; (df40 <disk_initialize+0x54>)
    def4:	447d      	add	r5, pc
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    def6:	4b13      	ldr	r3, [pc, #76]	; (df44 <disk_initialize+0x58>)
    def8:	447b      	add	r3, pc
    defa:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    defc:	2e01      	cmp	r6, #1
    defe:	d902      	bls.n	df06 <disk_initialize+0x1a>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    df00:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    df02:	b003      	add	sp, #12
    df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df06:	2700      	movs	r7, #0
	for (i = 0; i < 2; i ++) {
    df08:	2f01      	cmp	r7, #1
    df0a:	dc09      	bgt.n	df20 <disk_initialize+0x34>
		mem_status = mem_test_unit_ready(drv);
    df0c:	0030      	movs	r0, r6
    df0e:	4b0e      	ldr	r3, [pc, #56]	; (df48 <disk_initialize+0x5c>)
    df10:	58eb      	ldr	r3, [r5, r3]
    df12:	9301      	str	r3, [sp, #4]
    df14:	4798      	blx	r3
    df16:	0004      	movs	r4, r0
		if (CTRL_BUSY != mem_status) {
    df18:	2803      	cmp	r0, #3
    df1a:	d101      	bne.n	df20 <disk_initialize+0x34>
	for (i = 0; i < 2; i ++) {
    df1c:	3701      	adds	r7, #1
    df1e:	e7f3      	b.n	df08 <disk_initialize+0x1c>
	if (mem_status != CTRL_GOOD) {
    df20:	2c00      	cmp	r4, #0
    df22:	d001      	beq.n	df28 <disk_initialize+0x3c>
		return STA_NOINIT;
    df24:	2001      	movs	r0, #1
    df26:	e7ec      	b.n	df02 <disk_initialize+0x16>
	if (mem_wr_protect(drv)) {
    df28:	0030      	movs	r0, r6
    df2a:	4b08      	ldr	r3, [pc, #32]	; (df4c <disk_initialize+0x60>)
    df2c:	58eb      	ldr	r3, [r5, r3]
    df2e:	9301      	str	r3, [sp, #4]
    df30:	4798      	blx	r3
    df32:	2800      	cmp	r0, #0
    df34:	d001      	beq.n	df3a <disk_initialize+0x4e>
		return STA_PROTECT;
    df36:	2004      	movs	r0, #4
    df38:	e7e3      	b.n	df02 <disk_initialize+0x16>
	return 0;
    df3a:	2000      	movs	r0, #0
    df3c:	e7e1      	b.n	df02 <disk_initialize+0x16>
    df3e:	46c0      	nop			; (mov r8, r8)
    df40:	00004a98 	.word	0x00004a98
    df44:	ffffff31 	.word	0xffffff31
    df48:	00000180 	.word	0x00000180
    df4c:	000000e0 	.word	0x000000e0

0000df50 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    df50:	b500      	push	{lr}
    df52:	b083      	sub	sp, #12
    df54:	4b08      	ldr	r3, [pc, #32]	; (df78 <disk_status+0x28>)
    df56:	447b      	add	r3, pc
	switch (mem_test_unit_ready(drv)) {
    df58:	4a08      	ldr	r2, [pc, #32]	; (df7c <disk_status+0x2c>)
    df5a:	589b      	ldr	r3, [r3, r2]
    df5c:	9301      	str	r3, [sp, #4]
    df5e:	4798      	blx	r3
    df60:	2800      	cmp	r0, #0
    df62:	d003      	beq.n	df6c <disk_status+0x1c>
    df64:	2802      	cmp	r0, #2
    df66:	d004      	beq.n	df72 <disk_status+0x22>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
    df68:	2001      	movs	r0, #1
    df6a:	e000      	b.n	df6e <disk_status+0x1e>
		return 0;
    df6c:	2000      	movs	r0, #0
	}
}
    df6e:	b003      	add	sp, #12
    df70:	bd00      	pop	{pc}
		return STA_NOINIT | STA_NODISK;
    df72:	2003      	movs	r0, #3
    df74:	e7fb      	b.n	df6e <disk_status+0x1e>
    df76:	46c0      	nop			; (mov r8, r8)
    df78:	00004a36 	.word	0x00004a36
    df7c:	00000180 	.word	0x00000180

0000df80 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    df80:	b5f0      	push	{r4, r5, r6, r7, lr}
    df82:	46ce      	mov	lr, r9
    df84:	4647      	mov	r7, r8
    df86:	b580      	push	{r7, lr}
    df88:	b085      	sub	sp, #20
    df8a:	9001      	str	r0, [sp, #4]
    df8c:	4689      	mov	r9, r1
    df8e:	4690      	mov	r8, r2
    df90:	001f      	movs	r7, r3
    df92:	4d1a      	ldr	r5, [pc, #104]	; (dffc <disk_read+0x7c>)
    df94:	447d      	add	r5, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    df96:	4b1a      	ldr	r3, [pc, #104]	; (e000 <disk_read+0x80>)
    df98:	58eb      	ldr	r3, [r5, r3]
    df9a:	9300      	str	r3, [sp, #0]
    df9c:	4798      	blx	r3
    df9e:	1e04      	subs	r4, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    dfa0:	d105      	bne.n	dfae <disk_read+0x2e>
		return RES_ERROR;
    dfa2:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    dfa4:	b005      	add	sp, #20
    dfa6:	bc0c      	pop	{r2, r3}
    dfa8:	4690      	mov	r8, r2
    dfaa:	4699      	mov	r9, r3
    dfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    dfae:	a903      	add	r1, sp, #12
    dfb0:	9801      	ldr	r0, [sp, #4]
    dfb2:	4b14      	ldr	r3, [pc, #80]	; (e004 <disk_read+0x84>)
    dfb4:	58eb      	ldr	r3, [r5, r3]
    dfb6:	9300      	str	r3, [sp, #0]
    dfb8:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    dfba:	0023      	movs	r3, r4
    dfbc:	437b      	muls	r3, r7
    dfbe:	4443      	add	r3, r8
			(ul_last_sector_num + 1) * uc_sector_size) {
    dfc0:	9a03      	ldr	r2, [sp, #12]
    dfc2:	3201      	adds	r2, #1
    dfc4:	0026      	movs	r6, r4
    dfc6:	4354      	muls	r4, r2
	if ((sector + count * uc_sector_size) >
    dfc8:	42a3      	cmp	r3, r4
    dfca:	d901      	bls.n	dfd0 <disk_read+0x50>
		return RES_PARERR;
    dfcc:	2004      	movs	r0, #4
    dfce:	e7e9      	b.n	dfa4 <disk_read+0x24>
    dfd0:	2400      	movs	r4, #0
	for (i = 0; i < count; i++) {
    dfd2:	42bc      	cmp	r4, r7
    dfd4:	d20d      	bcs.n	dff2 <disk_read+0x72>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    dfd6:	0031      	movs	r1, r6
    dfd8:	4361      	muls	r1, r4
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    dfda:	024a      	lsls	r2, r1, #9
    dfdc:	444a      	add	r2, r9
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    dfde:	4441      	add	r1, r8
    dfe0:	9801      	ldr	r0, [sp, #4]
    dfe2:	4b09      	ldr	r3, [pc, #36]	; (e008 <disk_read+0x88>)
    dfe4:	58eb      	ldr	r3, [r5, r3]
    dfe6:	9300      	str	r3, [sp, #0]
    dfe8:	4798      	blx	r3
    dfea:	2800      	cmp	r0, #0
    dfec:	d103      	bne.n	dff6 <disk_read+0x76>
	for (i = 0; i < count; i++) {
    dfee:	3401      	adds	r4, #1
    dff0:	e7ef      	b.n	dfd2 <disk_read+0x52>
	return RES_OK;
    dff2:	2000      	movs	r0, #0
    dff4:	e7d6      	b.n	dfa4 <disk_read+0x24>
			return RES_ERROR;
    dff6:	2001      	movs	r0, #1
    dff8:	e7d4      	b.n	dfa4 <disk_read+0x24>
    dffa:	46c0      	nop			; (mov r8, r8)
    dffc:	000049f8 	.word	0x000049f8
    e000:	000004e0 	.word	0x000004e0
    e004:	000000e8 	.word	0x000000e8
    e008:	000000d0 	.word	0x000000d0

0000e00c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    e00c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e00e:	46ce      	mov	lr, r9
    e010:	4647      	mov	r7, r8
    e012:	b580      	push	{r7, lr}
    e014:	b085      	sub	sp, #20
    e016:	9001      	str	r0, [sp, #4]
    e018:	4689      	mov	r9, r1
    e01a:	4690      	mov	r8, r2
    e01c:	001f      	movs	r7, r3
    e01e:	4d1a      	ldr	r5, [pc, #104]	; (e088 <disk_write+0x7c>)
    e020:	447d      	add	r5, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    e022:	4b1a      	ldr	r3, [pc, #104]	; (e08c <disk_write+0x80>)
    e024:	58eb      	ldr	r3, [r5, r3]
    e026:	9300      	str	r3, [sp, #0]
    e028:	4798      	blx	r3
    e02a:	1e04      	subs	r4, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    e02c:	d105      	bne.n	e03a <disk_write+0x2e>
		return RES_ERROR;
    e02e:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    e030:	b005      	add	sp, #20
    e032:	bc0c      	pop	{r2, r3}
    e034:	4690      	mov	r8, r2
    e036:	4699      	mov	r9, r3
    e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    e03a:	a903      	add	r1, sp, #12
    e03c:	9801      	ldr	r0, [sp, #4]
    e03e:	4b14      	ldr	r3, [pc, #80]	; (e090 <disk_write+0x84>)
    e040:	58eb      	ldr	r3, [r5, r3]
    e042:	9300      	str	r3, [sp, #0]
    e044:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    e046:	0023      	movs	r3, r4
    e048:	437b      	muls	r3, r7
    e04a:	4443      	add	r3, r8
			(ul_last_sector_num + 1) * uc_sector_size) {
    e04c:	9a03      	ldr	r2, [sp, #12]
    e04e:	3201      	adds	r2, #1
    e050:	0026      	movs	r6, r4
    e052:	4354      	muls	r4, r2
	if ((sector + count * uc_sector_size) >
    e054:	42a3      	cmp	r3, r4
    e056:	d901      	bls.n	e05c <disk_write+0x50>
		return RES_PARERR;
    e058:	2004      	movs	r0, #4
    e05a:	e7e9      	b.n	e030 <disk_write+0x24>
    e05c:	2400      	movs	r4, #0
	for (i = 0; i < count; i++) {
    e05e:	42bc      	cmp	r4, r7
    e060:	d20d      	bcs.n	e07e <disk_write+0x72>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    e062:	0031      	movs	r1, r6
    e064:	4361      	muls	r1, r4
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    e066:	024a      	lsls	r2, r1, #9
    e068:	444a      	add	r2, r9
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    e06a:	4441      	add	r1, r8
    e06c:	9801      	ldr	r0, [sp, #4]
    e06e:	4b09      	ldr	r3, [pc, #36]	; (e094 <disk_write+0x88>)
    e070:	58eb      	ldr	r3, [r5, r3]
    e072:	9300      	str	r3, [sp, #0]
    e074:	4798      	blx	r3
    e076:	2800      	cmp	r0, #0
    e078:	d103      	bne.n	e082 <disk_write+0x76>
	for (i = 0; i < count; i++) {
    e07a:	3401      	adds	r4, #1
    e07c:	e7ef      	b.n	e05e <disk_write+0x52>
	return RES_OK;
    e07e:	2000      	movs	r0, #0
    e080:	e7d6      	b.n	e030 <disk_write+0x24>
			return RES_ERROR;
    e082:	2001      	movs	r0, #1
    e084:	e7d4      	b.n	e030 <disk_write+0x24>
    e086:	46c0      	nop			; (mov r8, r8)
    e088:	0000496c 	.word	0x0000496c
    e08c:	000004e0 	.word	0x000004e0
    e090:	000000e8 	.word	0x000000e8
    e094:	00000014 	.word	0x00000014

0000e098 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    e098:	b530      	push	{r4, r5, lr}
    e09a:	b085      	sub	sp, #20
    e09c:	0004      	movs	r4, r0
    e09e:	0015      	movs	r5, r2
    e0a0:	4b1b      	ldr	r3, [pc, #108]	; (e110 <disk_ioctl+0x78>)
    e0a2:	447b      	add	r3, pc
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    e0a4:	2903      	cmp	r1, #3
    e0a6:	d831      	bhi.n	e10c <disk_ioctl+0x74>
    e0a8:	0008      	movs	r0, r1
    e0aa:	f001 fab9 	bl	f620 <__gnu_thumb1_case_uqi>
    e0ae:	0726      	.short	0x0726
    e0b0:	0212      	.short	0x0212
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    e0b2:	2301      	movs	r3, #1
    e0b4:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    e0b6:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
    e0b8:	b005      	add	sp, #20
    e0ba:	bd30      	pop	{r4, r5, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    e0bc:	a903      	add	r1, sp, #12
    e0be:	0020      	movs	r0, r4
    e0c0:	4a14      	ldr	r2, [pc, #80]	; (e114 <disk_ioctl+0x7c>)
    e0c2:	589b      	ldr	r3, [r3, r2]
    e0c4:	9301      	str	r3, [sp, #4]
    e0c6:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    e0c8:	9b03      	ldr	r3, [sp, #12]
    e0ca:	3301      	adds	r3, #1
    e0cc:	602b      	str	r3, [r5, #0]
		res = RES_OK;
    e0ce:	2000      	movs	r0, #0
	break;
    e0d0:	e7f2      	b.n	e0b8 <disk_ioctl+0x20>
		uint8_t uc_sector_size = mem_sector_size(drv);
    e0d2:	0020      	movs	r0, r4
    e0d4:	4a10      	ldr	r2, [pc, #64]	; (e118 <disk_ioctl+0x80>)
    e0d6:	589b      	ldr	r3, [r3, r2]
    e0d8:	9301      	str	r3, [sp, #4]
    e0da:	4798      	blx	r3
    e0dc:	0003      	movs	r3, r0
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    e0de:	3801      	subs	r0, #1
    e0e0:	b2c0      	uxtb	r0, r0
    e0e2:	2801      	cmp	r0, #1
    e0e4:	d905      	bls.n	e0f2 <disk_ioctl+0x5a>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    e0e6:	2b04      	cmp	r3, #4
    e0e8:	d003      	beq.n	e0f2 <disk_ioctl+0x5a>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    e0ea:	2b08      	cmp	r3, #8
    e0ec:	d001      	beq.n	e0f2 <disk_ioctl+0x5a>
			return RES_ERROR;
    e0ee:	2001      	movs	r0, #1
    e0f0:	e7e2      	b.n	e0b8 <disk_ioctl+0x20>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    e0f2:	2300      	movs	r3, #0
    e0f4:	702b      	strb	r3, [r5, #0]
		res = RES_OK;
    e0f6:	2000      	movs	r0, #0
	break;
    e0f8:	e7de      	b.n	e0b8 <disk_ioctl+0x20>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    e0fa:	0020      	movs	r0, r4
    e0fc:	4a07      	ldr	r2, [pc, #28]	; (e11c <disk_ioctl+0x84>)
    e0fe:	589b      	ldr	r3, [r3, r2]
    e100:	9301      	str	r3, [sp, #4]
    e102:	4798      	blx	r3
    e104:	2800      	cmp	r0, #0
    e106:	d0d7      	beq.n	e0b8 <disk_ioctl+0x20>
			res = RES_NOTRDY;
    e108:	2003      	movs	r0, #3
    e10a:	e7d5      	b.n	e0b8 <disk_ioctl+0x20>
		res = RES_PARERR;
    e10c:	2004      	movs	r0, #4
    e10e:	e7d3      	b.n	e0b8 <disk_ioctl+0x20>
    e110:	000048ea 	.word	0x000048ea
    e114:	000000e8 	.word	0x000000e8
    e118:	000004e0 	.word	0x000004e0
    e11c:	00000180 	.word	0x00000180

0000e120 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    e120:	b510      	push	{r4, lr}
    e122:	b084      	sub	sp, #16
    e124:	4b10      	ldr	r3, [pc, #64]	; (e168 <get_fattime+0x48>)
    e126:	447b      	add	r3, pc
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    e128:	4a10      	ldr	r2, [pc, #64]	; (e16c <get_fattime+0x4c>)
    e12a:	589a      	ldr	r2, [r3, r2]
    e12c:	9201      	str	r2, [sp, #4]
    e12e:	ac02      	add	r4, sp, #8
    e130:	0021      	movs	r1, r4
    e132:	0010      	movs	r0, r2
    e134:	4a0e      	ldr	r2, [pc, #56]	; (e170 <get_fattime+0x50>)
    e136:	589b      	ldr	r3, [r3, r2]
    e138:	9301      	str	r3, [sp, #4]
    e13a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    e13c:	88e0      	ldrh	r0, [r4, #6]
    e13e:	4b0d      	ldr	r3, [pc, #52]	; (e174 <get_fattime+0x54>)
    e140:	469c      	mov	ip, r3
    e142:	4460      	add	r0, ip
    e144:	0640      	lsls	r0, r0, #25
			| (current_time.month << 21)
    e146:	7963      	ldrb	r3, [r4, #5]
    e148:	055b      	lsls	r3, r3, #21
    e14a:	4318      	orrs	r0, r3
			| (current_time.day << 16)
    e14c:	7923      	ldrb	r3, [r4, #4]
    e14e:	041b      	lsls	r3, r3, #16
    e150:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    e152:	78a3      	ldrb	r3, [r4, #2]
    e154:	02db      	lsls	r3, r3, #11
    e156:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    e158:	7863      	ldrb	r3, [r4, #1]
    e15a:	015b      	lsls	r3, r3, #5
    e15c:	4318      	orrs	r0, r3
			| ((current_time.second >> 1) << 0);
    e15e:	7823      	ldrb	r3, [r4, #0]
    e160:	085b      	lsrs	r3, r3, #1
    e162:	4318      	orrs	r0, r3

	return ul_time;
}
    e164:	b004      	add	sp, #16
    e166:	bd10      	pop	{r4, pc}
    e168:	00004866 	.word	0x00004866
    e16c:	00000058 	.word	0x00000058
    e170:	000001ec 	.word	0x000001ec
    e174:	fffff844 	.word	0xfffff844

0000e178 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    e178:	e004      	b.n	e184 <mem_cpy+0xc>
		*d++ = *s++;
    e17a:	780a      	ldrb	r2, [r1, #0]
    e17c:	7002      	strb	r2, [r0, #0]
    e17e:	3101      	adds	r1, #1
    e180:	3001      	adds	r0, #1
	while (cnt--)
    e182:	001a      	movs	r2, r3
    e184:	1e53      	subs	r3, r2, #1
    e186:	2a00      	cmp	r2, #0
    e188:	d1f7      	bne.n	e17a <mem_cpy+0x2>
}
    e18a:	4770      	bx	lr

0000e18c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    e18c:	e002      	b.n	e194 <mem_set+0x8>
		*d++ = (BYTE)val;
    e18e:	7001      	strb	r1, [r0, #0]
    e190:	3001      	adds	r0, #1
	while (cnt--)
    e192:	001a      	movs	r2, r3
    e194:	1e53      	subs	r3, r2, #1
    e196:	2a00      	cmp	r2, #0
    e198:	d1f9      	bne.n	e18e <mem_set+0x2>
}
    e19a:	4770      	bx	lr

0000e19c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    e19c:	b570      	push	{r4, r5, r6, lr}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    e19e:	0003      	movs	r3, r0
	int r = 0;
    e1a0:	2000      	movs	r0, #0

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    e1a2:	e001      	b.n	e1a8 <mem_cmp+0xc>
    e1a4:	0029      	movs	r1, r5
    e1a6:	0033      	movs	r3, r6
    e1a8:	1e54      	subs	r4, r2, #1
    e1aa:	2a00      	cmp	r2, #0
    e1ac:	d007      	beq.n	e1be <mem_cmp+0x22>
    e1ae:	1c5e      	adds	r6, r3, #1
    e1b0:	7818      	ldrb	r0, [r3, #0]
    e1b2:	1c4d      	adds	r5, r1, #1
    e1b4:	780b      	ldrb	r3, [r1, #0]
    e1b6:	1ac0      	subs	r0, r0, r3
    e1b8:	0022      	movs	r2, r4
    e1ba:	2800      	cmp	r0, #0
    e1bc:	d0f2      	beq.n	e1a4 <mem_cmp+0x8>
	return r;
}
    e1be:	bd70      	pop	{r4, r5, r6, pc}

0000e1c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    e1c0:	e000      	b.n	e1c4 <chk_chr+0x4>
    e1c2:	3001      	adds	r0, #1
    e1c4:	7803      	ldrb	r3, [r0, #0]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d001      	beq.n	e1ce <chk_chr+0xe>
    e1ca:	428b      	cmp	r3, r1
    e1cc:	d1f9      	bne.n	e1c2 <chk_chr+0x2>
	return *str;
}
    e1ce:	0018      	movs	r0, r3
    e1d0:	4770      	bx	lr

0000e1d2 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    e1d2:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e1d4:	6983      	ldr	r3, [r0, #24]
    e1d6:	3b02      	subs	r3, #2
    e1d8:	4299      	cmp	r1, r3
    e1da:	d204      	bcs.n	e1e6 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
    e1dc:	7883      	ldrb	r3, [r0, #2]
    e1de:	4359      	muls	r1, r3
    e1e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    e1e2:	1808      	adds	r0, r1, r0
}
    e1e4:	4770      	bx	lr
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e1e6:	2000      	movs	r0, #0
    e1e8:	e7fc      	b.n	e1e4 <clust2sect+0x12>
	...

0000e1ec <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1ee:	46de      	mov	lr, fp
    e1f0:	4657      	mov	r7, sl
    e1f2:	464e      	mov	r6, r9
    e1f4:	4645      	mov	r5, r8
    e1f6:	b5e0      	push	{r5, r6, r7, lr}
    e1f8:	4689      	mov	r9, r1
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    e1fa:	680c      	ldr	r4, [r1, #0]
    e1fc:	e000      	b.n	e200 <create_name+0x14>
    e1fe:	3401      	adds	r4, #1
    e200:	7823      	ldrb	r3, [r4, #0]
    e202:	2b2f      	cmp	r3, #47	; 0x2f
    e204:	d0fb      	beq.n	e1fe <create_name+0x12>
    e206:	2b5c      	cmp	r3, #92	; 0x5c
    e208:	d0f9      	beq.n	e1fe <create_name+0x12>
	sfn = dj->fn;
    e20a:	6983      	ldr	r3, [r0, #24]
    e20c:	4698      	mov	r8, r3
	mem_set(sfn, ' ', 11);
    e20e:	220b      	movs	r2, #11
    e210:	2120      	movs	r1, #32
    e212:	0018      	movs	r0, r3
    e214:	4b42      	ldr	r3, [pc, #264]	; (e320 <create_name+0x134>)
    e216:	447b      	add	r3, pc
    e218:	4798      	blx	r3
	si = i = b = 0; ni = 8;
    e21a:	2600      	movs	r6, #0
    e21c:	2300      	movs	r3, #0
    e21e:	2708      	movs	r7, #8
    e220:	2200      	movs	r2, #0
    e222:	4692      	mov	sl, r2
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    e224:	1c5a      	adds	r2, r3, #1
    e226:	4693      	mov	fp, r2
    e228:	5ce5      	ldrb	r5, [r4, r3]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    e22a:	2d20      	cmp	r5, #32
    e22c:	d940      	bls.n	e2b0 <create_name+0xc4>
    e22e:	2d2f      	cmp	r5, #47	; 0x2f
    e230:	d03e      	beq.n	e2b0 <create_name+0xc4>
    e232:	2d5c      	cmp	r5, #92	; 0x5c
    e234:	d03c      	beq.n	e2b0 <create_name+0xc4>
		if (c == '.' || i >= ni) {
    e236:	2d2e      	cmp	r5, #46	; 0x2e
    e238:	d001      	beq.n	e23e <create_name+0x52>
    e23a:	42b7      	cmp	r7, r6
    e23c:	d811      	bhi.n	e262 <create_name+0x76>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    e23e:	2f08      	cmp	r7, #8
    e240:	d167      	bne.n	e312 <create_name+0x126>
    e242:	2d2e      	cmp	r5, #46	; 0x2e
    e244:	d006      	beq.n	e254 <create_name+0x68>
    e246:	2006      	movs	r0, #6

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    e248:	bc3c      	pop	{r2, r3, r4, r5}
    e24a:	4690      	mov	r8, r2
    e24c:	4699      	mov	r9, r3
    e24e:	46a2      	mov	sl, r4
    e250:	46ab      	mov	fp, r5
    e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			b <<= 2; continue;
    e254:	4653      	mov	r3, sl
    e256:	009b      	lsls	r3, r3, #2
    e258:	b2db      	uxtb	r3, r3
    e25a:	469a      	mov	sl, r3
			i = 8; ni = 11;
    e25c:	003e      	movs	r6, r7
    e25e:	3703      	adds	r7, #3
			b <<= 2; continue;
    e260:	e017      	b.n	e292 <create_name+0xa6>
		if (c >= 0x80) {				/* Extended char? */
    e262:	b26b      	sxtb	r3, r5
    e264:	2b00      	cmp	r3, #0
    e266:	db56      	blt.n	e316 <create_name+0x12a>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    e268:	0029      	movs	r1, r5
    e26a:	482e      	ldr	r0, [pc, #184]	; (e324 <create_name+0x138>)
    e26c:	4478      	add	r0, pc
    e26e:	4b2e      	ldr	r3, [pc, #184]	; (e328 <create_name+0x13c>)
    e270:	447b      	add	r3, pc
    e272:	4798      	blx	r3
    e274:	2800      	cmp	r0, #0
    e276:	d150      	bne.n	e31a <create_name+0x12e>
			if (IsUpper(c)) {			/* ASCII large capital? */
    e278:	002b      	movs	r3, r5
    e27a:	3b41      	subs	r3, #65	; 0x41
    e27c:	b2db      	uxtb	r3, r3
    e27e:	2b19      	cmp	r3, #25
    e280:	d809      	bhi.n	e296 <create_name+0xaa>
				b |= 2;
    e282:	2302      	movs	r3, #2
    e284:	4652      	mov	r2, sl
    e286:	431a      	orrs	r2, r3
    e288:	b2d3      	uxtb	r3, r2
    e28a:	469a      	mov	sl, r3
			sfn[i++] = c;
    e28c:	4643      	mov	r3, r8
    e28e:	559d      	strb	r5, [r3, r6]
    e290:	3601      	adds	r6, #1
    e292:	465b      	mov	r3, fp
    e294:	e7c6      	b.n	e224 <create_name+0x38>
				if (IsLower(c)) {		/* ASCII small capital? */
    e296:	002b      	movs	r3, r5
    e298:	3b61      	subs	r3, #97	; 0x61
    e29a:	b2db      	uxtb	r3, r3
    e29c:	2b19      	cmp	r3, #25
    e29e:	d8f5      	bhi.n	e28c <create_name+0xa0>
					b |= 1; c -= 0x20;
    e2a0:	2301      	movs	r3, #1
    e2a2:	4652      	mov	r2, sl
    e2a4:	431a      	orrs	r2, r3
    e2a6:	b2d3      	uxtb	r3, r2
    e2a8:	469a      	mov	sl, r3
    e2aa:	3d20      	subs	r5, #32
    e2ac:	b2ed      	uxtb	r5, r5
    e2ae:	e7ed      	b.n	e28c <create_name+0xa0>
	*path = &p[si];						/* Return pointer to the next segment */
    e2b0:	445c      	add	r4, fp
    e2b2:	464b      	mov	r3, r9
    e2b4:	601c      	str	r4, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    e2b6:	2d20      	cmp	r5, #32
    e2b8:	d804      	bhi.n	e2c4 <create_name+0xd8>
    e2ba:	2304      	movs	r3, #4
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    e2bc:	2e00      	cmp	r6, #0
    e2be:	d103      	bne.n	e2c8 <create_name+0xdc>
    e2c0:	2006      	movs	r0, #6
    e2c2:	e7c1      	b.n	e248 <create_name+0x5c>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    e2c4:	2300      	movs	r3, #0
    e2c6:	e7f9      	b.n	e2bc <create_name+0xd0>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    e2c8:	4642      	mov	r2, r8
    e2ca:	7812      	ldrb	r2, [r2, #0]
    e2cc:	2ae5      	cmp	r2, #229	; 0xe5
    e2ce:	d00f      	beq.n	e2f0 <create_name+0x104>
	if (ni == 8) b <<= 2;
    e2d0:	2f08      	cmp	r7, #8
    e2d2:	d011      	beq.n	e2f8 <create_name+0x10c>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    e2d4:	2203      	movs	r2, #3
    e2d6:	4651      	mov	r1, sl
    e2d8:	400a      	ands	r2, r1
    e2da:	2a01      	cmp	r2, #1
    e2dc:	d011      	beq.n	e302 <create_name+0x116>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    e2de:	220c      	movs	r2, #12
    e2e0:	4651      	mov	r1, sl
    e2e2:	400a      	ands	r2, r1
    e2e4:	2a04      	cmp	r2, #4
    e2e6:	d010      	beq.n	e30a <create_name+0x11e>
	sfn[NS] = c;		/* Store NT flag, File name is created */
    e2e8:	4642      	mov	r2, r8
    e2ea:	72d3      	strb	r3, [r2, #11]
	return FR_OK;
    e2ec:	2000      	movs	r0, #0
    e2ee:	e7ab      	b.n	e248 <create_name+0x5c>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    e2f0:	3ae0      	subs	r2, #224	; 0xe0
    e2f2:	4641      	mov	r1, r8
    e2f4:	700a      	strb	r2, [r1, #0]
    e2f6:	e7eb      	b.n	e2d0 <create_name+0xe4>
	if (ni == 8) b <<= 2;
    e2f8:	4652      	mov	r2, sl
    e2fa:	0092      	lsls	r2, r2, #2
    e2fc:	b2d2      	uxtb	r2, r2
    e2fe:	4692      	mov	sl, r2
    e300:	e7e8      	b.n	e2d4 <create_name+0xe8>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    e302:	2210      	movs	r2, #16
    e304:	4313      	orrs	r3, r2
    e306:	b2db      	uxtb	r3, r3
    e308:	e7e9      	b.n	e2de <create_name+0xf2>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    e30a:	2208      	movs	r2, #8
    e30c:	4313      	orrs	r3, r2
    e30e:	b2db      	uxtb	r3, r3
    e310:	e7ea      	b.n	e2e8 <create_name+0xfc>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    e312:	2006      	movs	r0, #6
    e314:	e798      	b.n	e248 <create_name+0x5c>
			return FR_INVALID_NAME;
    e316:	2006      	movs	r0, #6
    e318:	e796      	b.n	e248 <create_name+0x5c>
				return FR_INVALID_NAME;
    e31a:	2006      	movs	r0, #6
    e31c:	e794      	b.n	e248 <create_name+0x5c>
    e31e:	46c0      	nop			; (mov r8, r8)
    e320:	ffffff73 	.word	0xffffff73
    e324:	0000454c 	.word	0x0000454c
    e328:	ffffff4d 	.word	0xffffff4d

0000e32c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    e32c:	b500      	push	{lr}
    e32e:	b083      	sub	sp, #12
    e330:	4b0d      	ldr	r3, [pc, #52]	; (e368 <validate+0x3c>)
    e332:	447b      	add	r3, pc
	if (!fs || !fs->fs_type || fs->id != id)
    e334:	2800      	cmp	r0, #0
    e336:	d013      	beq.n	e360 <validate+0x34>
    e338:	7802      	ldrb	r2, [r0, #0]
    e33a:	2a00      	cmp	r2, #0
    e33c:	d102      	bne.n	e344 <validate+0x18>
		return FR_INVALID_OBJECT;
    e33e:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    e340:	b003      	add	sp, #12
    e342:	bd00      	pop	{pc}
	if (!fs || !fs->fs_type || fs->id != id)
    e344:	88c2      	ldrh	r2, [r0, #6]
    e346:	428a      	cmp	r2, r1
    e348:	d001      	beq.n	e34e <validate+0x22>
		return FR_INVALID_OBJECT;
    e34a:	2009      	movs	r0, #9
    e34c:	e7f8      	b.n	e340 <validate+0x14>
	if (disk_status(fs->drv) & STA_NOINIT)
    e34e:	7840      	ldrb	r0, [r0, #1]
    e350:	4a06      	ldr	r2, [pc, #24]	; (e36c <validate+0x40>)
    e352:	589b      	ldr	r3, [r3, r2]
    e354:	9301      	str	r3, [sp, #4]
    e356:	4798      	blx	r3
    e358:	07c3      	lsls	r3, r0, #31
    e35a:	d503      	bpl.n	e364 <validate+0x38>
		return FR_NOT_READY;
    e35c:	2003      	movs	r0, #3
    e35e:	e7ef      	b.n	e340 <validate+0x14>
		return FR_INVALID_OBJECT;
    e360:	2009      	movs	r0, #9
    e362:	e7ed      	b.n	e340 <validate+0x14>
	return FR_OK;
    e364:	2000      	movs	r0, #0
    e366:	e7eb      	b.n	e340 <validate+0x14>
    e368:	0000465a 	.word	0x0000465a
    e36c:	00000138 	.word	0x00000138

0000e370 <check_fs>:
{
    e370:	b570      	push	{r4, r5, r6, lr}
    e372:	b082      	sub	sp, #8
    e374:	0004      	movs	r4, r0
    e376:	000a      	movs	r2, r1
    e378:	4d22      	ldr	r5, [pc, #136]	; (e404 <check_fs+0x94>)
    e37a:	447d      	add	r5, pc
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    e37c:	0001      	movs	r1, r0
    e37e:	3130      	adds	r1, #48	; 0x30
    e380:	7840      	ldrb	r0, [r0, #1]
    e382:	2301      	movs	r3, #1
    e384:	4e20      	ldr	r6, [pc, #128]	; (e408 <check_fs+0x98>)
    e386:	59ad      	ldr	r5, [r5, r6]
    e388:	9501      	str	r5, [sp, #4]
    e38a:	47a8      	blx	r5
    e38c:	2800      	cmp	r0, #0
    e38e:	d002      	beq.n	e396 <check_fs+0x26>
		return 3;
    e390:	2003      	movs	r0, #3
}
    e392:	b002      	add	sp, #8
    e394:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    e396:	4b1d      	ldr	r3, [pc, #116]	; (e40c <check_fs+0x9c>)
    e398:	5ce2      	ldrb	r2, [r4, r3]
    e39a:	0212      	lsls	r2, r2, #8
    e39c:	4b1c      	ldr	r3, [pc, #112]	; (e410 <check_fs+0xa0>)
    e39e:	5ce3      	ldrb	r3, [r4, r3]
    e3a0:	4313      	orrs	r3, r2
    e3a2:	b21b      	sxth	r3, r3
    e3a4:	4a1b      	ldr	r2, [pc, #108]	; (e414 <check_fs+0xa4>)
    e3a6:	4293      	cmp	r3, r2
    e3a8:	d001      	beq.n	e3ae <check_fs+0x3e>
		return 2;
    e3aa:	2002      	movs	r0, #2
    e3ac:	e7f1      	b.n	e392 <check_fs+0x22>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    e3ae:	2369      	movs	r3, #105	; 0x69
    e3b0:	5ce3      	ldrb	r3, [r4, r3]
    e3b2:	061b      	lsls	r3, r3, #24
    e3b4:	2268      	movs	r2, #104	; 0x68
    e3b6:	5ca2      	ldrb	r2, [r4, r2]
    e3b8:	0412      	lsls	r2, r2, #16
    e3ba:	4313      	orrs	r3, r2
    e3bc:	2267      	movs	r2, #103	; 0x67
    e3be:	5ca2      	ldrb	r2, [r4, r2]
    e3c0:	0212      	lsls	r2, r2, #8
    e3c2:	4313      	orrs	r3, r2
    e3c4:	2266      	movs	r2, #102	; 0x66
    e3c6:	5ca2      	ldrb	r2, [r4, r2]
    e3c8:	4313      	orrs	r3, r2
    e3ca:	021b      	lsls	r3, r3, #8
    e3cc:	0a1b      	lsrs	r3, r3, #8
    e3ce:	4a12      	ldr	r2, [pc, #72]	; (e418 <check_fs+0xa8>)
    e3d0:	4293      	cmp	r3, r2
    e3d2:	d014      	beq.n	e3fe <check_fs+0x8e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    e3d4:	2385      	movs	r3, #133	; 0x85
    e3d6:	5ce3      	ldrb	r3, [r4, r3]
    e3d8:	061b      	lsls	r3, r3, #24
    e3da:	2284      	movs	r2, #132	; 0x84
    e3dc:	5ca2      	ldrb	r2, [r4, r2]
    e3de:	0412      	lsls	r2, r2, #16
    e3e0:	4313      	orrs	r3, r2
    e3e2:	2283      	movs	r2, #131	; 0x83
    e3e4:	5ca2      	ldrb	r2, [r4, r2]
    e3e6:	0212      	lsls	r2, r2, #8
    e3e8:	4313      	orrs	r3, r2
    e3ea:	2282      	movs	r2, #130	; 0x82
    e3ec:	5ca2      	ldrb	r2, [r4, r2]
    e3ee:	4313      	orrs	r3, r2
    e3f0:	021b      	lsls	r3, r3, #8
    e3f2:	0a1b      	lsrs	r3, r3, #8
    e3f4:	4a08      	ldr	r2, [pc, #32]	; (e418 <check_fs+0xa8>)
    e3f6:	4293      	cmp	r3, r2
    e3f8:	d0cb      	beq.n	e392 <check_fs+0x22>
	return 1;
    e3fa:	2001      	movs	r0, #1
    e3fc:	e7c9      	b.n	e392 <check_fs+0x22>
		return 0;
    e3fe:	2000      	movs	r0, #0
    e400:	e7c7      	b.n	e392 <check_fs+0x22>
    e402:	46c0      	nop			; (mov r8, r8)
    e404:	00004612 	.word	0x00004612
    e408:	00000488 	.word	0x00000488
    e40c:	0000022f 	.word	0x0000022f
    e410:	0000022e 	.word	0x0000022e
    e414:	ffffaa55 	.word	0xffffaa55
    e418:	00544146 	.word	0x00544146

0000e41c <chk_mounted>:
{
    e41c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e41e:	46de      	mov	lr, fp
    e420:	4657      	mov	r7, sl
    e422:	464e      	mov	r6, r9
    e424:	4645      	mov	r5, r8
    e426:	b5e0      	push	{r5, r6, r7, lr}
    e428:	b083      	sub	sp, #12
    e42a:	0017      	movs	r7, r2
    e42c:	4cca      	ldr	r4, [pc, #808]	; (e758 <chk_mounted+0x33c>)
    e42e:	447c      	add	r4, pc
	const TCHAR *p = *path;
    e430:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    e432:	781e      	ldrb	r6, [r3, #0]
    e434:	3e30      	subs	r6, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    e436:	2e09      	cmp	r6, #9
    e438:	d807      	bhi.n	e44a <chk_mounted+0x2e>
    e43a:	785a      	ldrb	r2, [r3, #1]
    e43c:	2a3a      	cmp	r2, #58	; 0x3a
    e43e:	d001      	beq.n	e444 <chk_mounted+0x28>
		vol = 0;						/* Use drive 0 */
    e440:	2600      	movs	r6, #0
    e442:	e003      	b.n	e44c <chk_mounted+0x30>
		p += 2; *path = p;				/* Return pointer to the path name */
    e444:	3302      	adds	r3, #2
    e446:	6003      	str	r3, [r0, #0]
    e448:	e000      	b.n	e44c <chk_mounted+0x30>
		vol = 0;						/* Use drive 0 */
    e44a:	2600      	movs	r6, #0
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    e44c:	2e00      	cmp	r6, #0
    e44e:	d007      	beq.n	e460 <chk_mounted+0x44>
		return FR_INVALID_DRIVE;
    e450:	200b      	movs	r0, #11
}
    e452:	b003      	add	sp, #12
    e454:	bc3c      	pop	{r2, r3, r4, r5}
    e456:	4690      	mov	r8, r2
    e458:	4699      	mov	r9, r3
    e45a:	46a2      	mov	sl, r4
    e45c:	46ab      	mov	fp, r5
    e45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    e460:	00b3      	lsls	r3, r6, #2
    e462:	4abe      	ldr	r2, [pc, #760]	; (e75c <chk_mounted+0x340>)
    e464:	447a      	add	r2, pc
    e466:	589d      	ldr	r5, [r3, r2]
    e468:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    e46a:	2d00      	cmp	r5, #0
    e46c:	d100      	bne.n	e470 <chk_mounted+0x54>
    e46e:	e1ba      	b.n	e7e6 <chk_mounted+0x3ca>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    e470:	782b      	ldrb	r3, [r5, #0]
    e472:	2b00      	cmp	r3, #0
    e474:	d00f      	beq.n	e496 <chk_mounted+0x7a>
		stat = disk_status(fs->drv);
    e476:	7868      	ldrb	r0, [r5, #1]
    e478:	4bb9      	ldr	r3, [pc, #740]	; (e760 <chk_mounted+0x344>)
    e47a:	58e3      	ldr	r3, [r4, r3]
    e47c:	9300      	str	r3, [sp, #0]
    e47e:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    e480:	07c3      	lsls	r3, r0, #31
    e482:	d408      	bmi.n	e496 <chk_mounted+0x7a>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    e484:	2f00      	cmp	r7, #0
    e486:	d100      	bne.n	e48a <chk_mounted+0x6e>
    e488:	e1af      	b.n	e7ea <chk_mounted+0x3ce>
    e48a:	0743      	lsls	r3, r0, #29
    e48c:	d501      	bpl.n	e492 <chk_mounted+0x76>
				return FR_WRITE_PROTECTED;
    e48e:	200a      	movs	r0, #10
    e490:	e7df      	b.n	e452 <chk_mounted+0x36>
			return FR_OK;				/* The file system object is valid */
    e492:	2000      	movs	r0, #0
    e494:	e7dd      	b.n	e452 <chk_mounted+0x36>
	fs->fs_type = 0;					/* Clear the file system object */
    e496:	2300      	movs	r3, #0
    e498:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    e49a:	b2f0      	uxtb	r0, r6
    e49c:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    e49e:	4bb1      	ldr	r3, [pc, #708]	; (e764 <chk_mounted+0x348>)
    e4a0:	58e3      	ldr	r3, [r4, r3]
    e4a2:	9300      	str	r3, [sp, #0]
    e4a4:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    e4a6:	07c3      	lsls	r3, r0, #31
    e4a8:	d501      	bpl.n	e4ae <chk_mounted+0x92>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    e4aa:	2003      	movs	r0, #3
    e4ac:	e7d1      	b.n	e452 <chk_mounted+0x36>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    e4ae:	2f00      	cmp	r7, #0
    e4b0:	d003      	beq.n	e4ba <chk_mounted+0x9e>
    e4b2:	0743      	lsls	r3, r0, #29
    e4b4:	d501      	bpl.n	e4ba <chk_mounted+0x9e>
		return FR_WRITE_PROTECTED;
    e4b6:	200a      	movs	r0, #10
    e4b8:	e7cb      	b.n	e452 <chk_mounted+0x36>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    e4ba:	2100      	movs	r1, #0
    e4bc:	0028      	movs	r0, r5
    e4be:	4baa      	ldr	r3, [pc, #680]	; (e768 <chk_mounted+0x34c>)
    e4c0:	447b      	add	r3, pc
    e4c2:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    e4c4:	2801      	cmp	r0, #1
    e4c6:	d007      	beq.n	e4d8 <chk_mounted+0xbc>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    e4c8:	2600      	movs	r6, #0
	if (fmt == 3) return FR_DISK_ERR;
    e4ca:	2803      	cmp	r0, #3
    e4cc:	d100      	bne.n	e4d0 <chk_mounted+0xb4>
    e4ce:	e18e      	b.n	e7ee <chk_mounted+0x3d2>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    e4d0:	2800      	cmp	r0, #0
    e4d2:	d01f      	beq.n	e514 <chk_mounted+0xf8>
    e4d4:	200d      	movs	r0, #13
    e4d6:	e7bc      	b.n	e452 <chk_mounted+0x36>
		if (tbl[4]) {						/* Is the partition existing? */
    e4d8:	23f9      	movs	r3, #249	; 0xf9
    e4da:	005b      	lsls	r3, r3, #1
    e4dc:	5ceb      	ldrb	r3, [r5, r3]
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d101      	bne.n	e4e6 <chk_mounted+0xca>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    e4e2:	2600      	movs	r6, #0
    e4e4:	e7f1      	b.n	e4ca <chk_mounted+0xae>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    e4e6:	23fa      	movs	r3, #250	; 0xfa
    e4e8:	33ff      	adds	r3, #255	; 0xff
    e4ea:	5cee      	ldrb	r6, [r5, r3]
    e4ec:	0636      	lsls	r6, r6, #24
    e4ee:	3b01      	subs	r3, #1
    e4f0:	5ceb      	ldrb	r3, [r5, r3]
    e4f2:	041b      	lsls	r3, r3, #16
    e4f4:	431e      	orrs	r6, r3
    e4f6:	23f8      	movs	r3, #248	; 0xf8
    e4f8:	33ff      	adds	r3, #255	; 0xff
    e4fa:	5ceb      	ldrb	r3, [r5, r3]
    e4fc:	021b      	lsls	r3, r3, #8
    e4fe:	431e      	orrs	r6, r3
    e500:	23fb      	movs	r3, #251	; 0xfb
    e502:	005b      	lsls	r3, r3, #1
    e504:	5cea      	ldrb	r2, [r5, r3]
    e506:	4316      	orrs	r6, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    e508:	0031      	movs	r1, r6
    e50a:	0028      	movs	r0, r5
    e50c:	4b97      	ldr	r3, [pc, #604]	; (e76c <chk_mounted+0x350>)
    e50e:	447b      	add	r3, pc
    e510:	4798      	blx	r3
    e512:	e7da      	b.n	e4ca <chk_mounted+0xae>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    e514:	233c      	movs	r3, #60	; 0x3c
    e516:	5cea      	ldrb	r2, [r5, r3]
    e518:	0212      	lsls	r2, r2, #8
    e51a:	3b01      	subs	r3, #1
    e51c:	5ceb      	ldrb	r3, [r5, r3]
    e51e:	4313      	orrs	r3, r2
    e520:	b21b      	sxth	r3, r3
    e522:	2280      	movs	r2, #128	; 0x80
    e524:	0092      	lsls	r2, r2, #2
    e526:	4293      	cmp	r3, r2
    e528:	d001      	beq.n	e52e <chk_mounted+0x112>
		return FR_NO_FILESYSTEM;
    e52a:	200d      	movs	r0, #13
    e52c:	e791      	b.n	e452 <chk_mounted+0x36>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    e52e:	2347      	movs	r3, #71	; 0x47
    e530:	5ceb      	ldrb	r3, [r5, r3]
    e532:	021b      	lsls	r3, r3, #8
    e534:	3abb      	subs	r2, #187	; 0xbb
    e536:	3aff      	subs	r2, #255	; 0xff
    e538:	5caf      	ldrb	r7, [r5, r2]
    e53a:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    e53c:	d10d      	bne.n	e55a <chk_mounted+0x13e>
    e53e:	2357      	movs	r3, #87	; 0x57
    e540:	5cef      	ldrb	r7, [r5, r3]
    e542:	063f      	lsls	r7, r7, #24
    e544:	3b01      	subs	r3, #1
    e546:	5ceb      	ldrb	r3, [r5, r3]
    e548:	041b      	lsls	r3, r3, #16
    e54a:	431f      	orrs	r7, r3
    e54c:	2355      	movs	r3, #85	; 0x55
    e54e:	5ceb      	ldrb	r3, [r5, r3]
    e550:	021b      	lsls	r3, r3, #8
    e552:	431f      	orrs	r7, r3
    e554:	2354      	movs	r3, #84	; 0x54
    e556:	5ceb      	ldrb	r3, [r5, r3]
    e558:	431f      	orrs	r7, r3
	fs->fsize = fasize;
    e55a:	61ef      	str	r7, [r5, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    e55c:	2340      	movs	r3, #64	; 0x40
    e55e:	5ceb      	ldrb	r3, [r5, r3]
    e560:	70eb      	strb	r3, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    e562:	1e5a      	subs	r2, r3, #1
    e564:	b2d2      	uxtb	r2, r2
    e566:	2a01      	cmp	r2, #1
    e568:	d901      	bls.n	e56e <chk_mounted+0x152>
    e56a:	200d      	movs	r0, #13
    e56c:	e771      	b.n	e452 <chk_mounted+0x36>
	fasize *= b;										/* Number of sectors for FAT area */
    e56e:	437b      	muls	r3, r7
    e570:	9300      	str	r3, [sp, #0]
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    e572:	233d      	movs	r3, #61	; 0x3d
    e574:	5ce9      	ldrb	r1, [r5, r3]
    e576:	70a9      	strb	r1, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    e578:	2900      	cmp	r1, #0
    e57a:	d100      	bne.n	e57e <chk_mounted+0x162>
    e57c:	e139      	b.n	e7f2 <chk_mounted+0x3d6>
    e57e:	1e4b      	subs	r3, r1, #1
    e580:	420b      	tst	r3, r1
    e582:	d001      	beq.n	e588 <chk_mounted+0x16c>
    e584:	200d      	movs	r0, #13
    e586:	e764      	b.n	e452 <chk_mounted+0x36>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    e588:	2342      	movs	r3, #66	; 0x42
    e58a:	5ceb      	ldrb	r3, [r5, r3]
    e58c:	021b      	lsls	r3, r3, #8
    e58e:	2241      	movs	r2, #65	; 0x41
    e590:	5caa      	ldrb	r2, [r5, r2]
    e592:	431a      	orrs	r2, r3
    e594:	4692      	mov	sl, r2
    e596:	812a      	strh	r2, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    e598:	0013      	movs	r3, r2
    e59a:	071b      	lsls	r3, r3, #28
    e59c:	d000      	beq.n	e5a0 <chk_mounted+0x184>
    e59e:	e12a      	b.n	e7f6 <chk_mounted+0x3da>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    e5a0:	2344      	movs	r3, #68	; 0x44
    e5a2:	5ceb      	ldrb	r3, [r5, r3]
    e5a4:	021b      	lsls	r3, r3, #8
    e5a6:	2243      	movs	r2, #67	; 0x43
    e5a8:	5ca8      	ldrb	r0, [r5, r2]
    e5aa:	4318      	orrs	r0, r3
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    e5ac:	d10d      	bne.n	e5ca <chk_mounted+0x1ae>
    e5ae:	2353      	movs	r3, #83	; 0x53
    e5b0:	5ce8      	ldrb	r0, [r5, r3]
    e5b2:	0600      	lsls	r0, r0, #24
    e5b4:	3b01      	subs	r3, #1
    e5b6:	5ceb      	ldrb	r3, [r5, r3]
    e5b8:	041b      	lsls	r3, r3, #16
    e5ba:	4318      	orrs	r0, r3
    e5bc:	2351      	movs	r3, #81	; 0x51
    e5be:	5ceb      	ldrb	r3, [r5, r3]
    e5c0:	021b      	lsls	r3, r3, #8
    e5c2:	4318      	orrs	r0, r3
    e5c4:	2350      	movs	r3, #80	; 0x50
    e5c6:	5ceb      	ldrb	r3, [r5, r3]
    e5c8:	4318      	orrs	r0, r3
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    e5ca:	233f      	movs	r3, #63	; 0x3f
    e5cc:	5ceb      	ldrb	r3, [r5, r3]
    e5ce:	021b      	lsls	r3, r3, #8
    e5d0:	223e      	movs	r2, #62	; 0x3e
    e5d2:	5caa      	ldrb	r2, [r5, r2]
    e5d4:	431a      	orrs	r2, r3
    e5d6:	4691      	mov	r9, r2
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    e5d8:	d100      	bne.n	e5dc <chk_mounted+0x1c0>
    e5da:	e10e      	b.n	e7fa <chk_mounted+0x3de>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    e5dc:	9b00      	ldr	r3, [sp, #0]
    e5de:	444b      	add	r3, r9
    e5e0:	4652      	mov	r2, sl
    e5e2:	0912      	lsrs	r2, r2, #4
    e5e4:	4698      	mov	r8, r3
    e5e6:	4490      	add	r8, r2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    e5e8:	4540      	cmp	r0, r8
    e5ea:	d200      	bcs.n	e5ee <chk_mounted+0x1d2>
    e5ec:	e107      	b.n	e7fe <chk_mounted+0x3e2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    e5ee:	4643      	mov	r3, r8
    e5f0:	1ac0      	subs	r0, r0, r3
    e5f2:	4b5f      	ldr	r3, [pc, #380]	; (e770 <chk_mounted+0x354>)
    e5f4:	58e3      	ldr	r3, [r4, r3]
    e5f6:	9301      	str	r3, [sp, #4]
    e5f8:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    e5fa:	2800      	cmp	r0, #0
    e5fc:	d100      	bne.n	e600 <chk_mounted+0x1e4>
    e5fe:	e100      	b.n	e802 <chk_mounted+0x3e6>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    e600:	4b5c      	ldr	r3, [pc, #368]	; (e774 <chk_mounted+0x358>)
    e602:	4298      	cmp	r0, r3
    e604:	d900      	bls.n	e608 <chk_mounted+0x1ec>
    e606:	e0a3      	b.n	e750 <chk_mounted+0x334>
	fmt = FS_FAT12;
    e608:	2301      	movs	r3, #1
    e60a:	469b      	mov	fp, r3
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    e60c:	4b5a      	ldr	r3, [pc, #360]	; (e778 <chk_mounted+0x35c>)
    e60e:	4298      	cmp	r0, r3
    e610:	d901      	bls.n	e616 <chk_mounted+0x1fa>
    e612:	2303      	movs	r3, #3
    e614:	469b      	mov	fp, r3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    e616:	3002      	adds	r0, #2
    e618:	61a8      	str	r0, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    e61a:	4643      	mov	r3, r8
    e61c:	18f3      	adds	r3, r6, r3
    e61e:	62ab      	str	r3, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    e620:	464b      	mov	r3, r9
    e622:	18f3      	adds	r3, r6, r3
    e624:	622b      	str	r3, [r5, #32]
	if (fmt == FS_FAT32) {
    e626:	465a      	mov	r2, fp
    e628:	2a03      	cmp	r2, #3
    e62a:	d000      	beq.n	e62e <chk_mounted+0x212>
    e62c:	e0c8      	b.n	e7c0 <chk_mounted+0x3a4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    e62e:	4653      	mov	r3, sl
    e630:	2b00      	cmp	r3, #0
    e632:	d000      	beq.n	e636 <chk_mounted+0x21a>
    e634:	e0e7      	b.n	e806 <chk_mounted+0x3ea>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    e636:	335f      	adds	r3, #95	; 0x5f
    e638:	5ceb      	ldrb	r3, [r5, r3]
    e63a:	061b      	lsls	r3, r3, #24
    e63c:	325b      	adds	r2, #91	; 0x5b
    e63e:	5caa      	ldrb	r2, [r5, r2]
    e640:	0412      	lsls	r2, r2, #16
    e642:	4313      	orrs	r3, r2
    e644:	225d      	movs	r2, #93	; 0x5d
    e646:	5caa      	ldrb	r2, [r5, r2]
    e648:	0212      	lsls	r2, r2, #8
    e64a:	4313      	orrs	r3, r2
    e64c:	225c      	movs	r2, #92	; 0x5c
    e64e:	5caa      	ldrb	r2, [r5, r2]
    e650:	4313      	orrs	r3, r2
    e652:	626b      	str	r3, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    e654:	0080      	lsls	r0, r0, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    e656:	4b49      	ldr	r3, [pc, #292]	; (e77c <chk_mounted+0x360>)
    e658:	469c      	mov	ip, r3
    e65a:	4460      	add	r0, ip
    e65c:	0a40      	lsrs	r0, r0, #9
    e65e:	4287      	cmp	r7, r0
    e660:	d200      	bcs.n	e664 <chk_mounted+0x248>
    e662:	e0d4      	b.n	e80e <chk_mounted+0x3f2>
	fs->free_clust = 0xFFFFFFFF;
    e664:	2301      	movs	r3, #1
    e666:	425b      	negs	r3, r3
    e668:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
    e66a:	2300      	movs	r3, #0
    e66c:	60eb      	str	r3, [r5, #12]
	if (fmt == FS_FAT32) {
    e66e:	465b      	mov	r3, fp
    e670:	2b03      	cmp	r3, #3
    e672:	d160      	bne.n	e736 <chk_mounted+0x31a>
	 	fs->fsi_flag = 0;
    e674:	2300      	movs	r3, #0
    e676:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    e678:	3361      	adds	r3, #97	; 0x61
    e67a:	5ceb      	ldrb	r3, [r5, r3]
    e67c:	021b      	lsls	r3, r3, #8
    e67e:	2260      	movs	r2, #96	; 0x60
    e680:	5caa      	ldrb	r2, [r5, r2]
    e682:	431a      	orrs	r2, r3
    e684:	18b2      	adds	r2, r6, r2
    e686:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    e688:	0029      	movs	r1, r5
    e68a:	3130      	adds	r1, #48	; 0x30
    e68c:	7868      	ldrb	r0, [r5, #1]
    e68e:	2301      	movs	r3, #1
    e690:	4e3b      	ldr	r6, [pc, #236]	; (e780 <chk_mounted+0x364>)
    e692:	59a4      	ldr	r4, [r4, r6]
    e694:	9400      	str	r4, [sp, #0]
    e696:	47a0      	blx	r4
    e698:	2800      	cmp	r0, #0
    e69a:	d14c      	bne.n	e736 <chk_mounted+0x31a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    e69c:	4b39      	ldr	r3, [pc, #228]	; (e784 <chk_mounted+0x368>)
    e69e:	5cea      	ldrb	r2, [r5, r3]
    e6a0:	0212      	lsls	r2, r2, #8
    e6a2:	4b39      	ldr	r3, [pc, #228]	; (e788 <chk_mounted+0x36c>)
    e6a4:	5ceb      	ldrb	r3, [r5, r3]
    e6a6:	4313      	orrs	r3, r2
    e6a8:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    e6aa:	4a38      	ldr	r2, [pc, #224]	; (e78c <chk_mounted+0x370>)
    e6ac:	4293      	cmp	r3, r2
    e6ae:	d142      	bne.n	e736 <chk_mounted+0x31a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    e6b0:	2333      	movs	r3, #51	; 0x33
    e6b2:	5ceb      	ldrb	r3, [r5, r3]
    e6b4:	061b      	lsls	r3, r3, #24
    e6b6:	2232      	movs	r2, #50	; 0x32
    e6b8:	5caa      	ldrb	r2, [r5, r2]
    e6ba:	0412      	lsls	r2, r2, #16
    e6bc:	4313      	orrs	r3, r2
    e6be:	2231      	movs	r2, #49	; 0x31
    e6c0:	5caa      	ldrb	r2, [r5, r2]
    e6c2:	0212      	lsls	r2, r2, #8
    e6c4:	4313      	orrs	r3, r2
    e6c6:	2230      	movs	r2, #48	; 0x30
    e6c8:	5caa      	ldrb	r2, [r5, r2]
    e6ca:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    e6cc:	4a30      	ldr	r2, [pc, #192]	; (e790 <chk_mounted+0x374>)
    e6ce:	4293      	cmp	r3, r2
    e6d0:	d131      	bne.n	e736 <chk_mounted+0x31a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    e6d2:	4b30      	ldr	r3, [pc, #192]	; (e794 <chk_mounted+0x378>)
    e6d4:	5ceb      	ldrb	r3, [r5, r3]
    e6d6:	061b      	lsls	r3, r3, #24
    e6d8:	4a2f      	ldr	r2, [pc, #188]	; (e798 <chk_mounted+0x37c>)
    e6da:	5caa      	ldrb	r2, [r5, r2]
    e6dc:	0412      	lsls	r2, r2, #16
    e6de:	4313      	orrs	r3, r2
    e6e0:	4a2e      	ldr	r2, [pc, #184]	; (e79c <chk_mounted+0x380>)
    e6e2:	5caa      	ldrb	r2, [r5, r2]
    e6e4:	0212      	lsls	r2, r2, #8
    e6e6:	4313      	orrs	r3, r2
    e6e8:	2285      	movs	r2, #133	; 0x85
    e6ea:	0092      	lsls	r2, r2, #2
    e6ec:	5caa      	ldrb	r2, [r5, r2]
    e6ee:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    e6f0:	4a2b      	ldr	r2, [pc, #172]	; (e7a0 <chk_mounted+0x384>)
    e6f2:	4293      	cmp	r3, r2
    e6f4:	d11f      	bne.n	e736 <chk_mounted+0x31a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    e6f6:	4b2b      	ldr	r3, [pc, #172]	; (e7a4 <chk_mounted+0x388>)
    e6f8:	5ceb      	ldrb	r3, [r5, r3]
    e6fa:	061b      	lsls	r3, r3, #24
    e6fc:	4a2a      	ldr	r2, [pc, #168]	; (e7a8 <chk_mounted+0x38c>)
    e6fe:	5caa      	ldrb	r2, [r5, r2]
    e700:	0412      	lsls	r2, r2, #16
    e702:	4313      	orrs	r3, r2
    e704:	4a29      	ldr	r2, [pc, #164]	; (e7ac <chk_mounted+0x390>)
    e706:	5caa      	ldrb	r2, [r5, r2]
    e708:	0212      	lsls	r2, r2, #8
    e70a:	4313      	orrs	r3, r2
    e70c:	2287      	movs	r2, #135	; 0x87
    e70e:	0092      	lsls	r2, r2, #2
    e710:	5caa      	ldrb	r2, [r5, r2]
    e712:	4313      	orrs	r3, r2
    e714:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    e716:	4b26      	ldr	r3, [pc, #152]	; (e7b0 <chk_mounted+0x394>)
    e718:	5ceb      	ldrb	r3, [r5, r3]
    e71a:	061b      	lsls	r3, r3, #24
    e71c:	4a25      	ldr	r2, [pc, #148]	; (e7b4 <chk_mounted+0x398>)
    e71e:	5caa      	ldrb	r2, [r5, r2]
    e720:	0412      	lsls	r2, r2, #16
    e722:	4313      	orrs	r3, r2
    e724:	4a24      	ldr	r2, [pc, #144]	; (e7b8 <chk_mounted+0x39c>)
    e726:	5caa      	ldrb	r2, [r5, r2]
    e728:	0212      	lsls	r2, r2, #8
    e72a:	4313      	orrs	r3, r2
    e72c:	2286      	movs	r2, #134	; 0x86
    e72e:	0092      	lsls	r2, r2, #2
    e730:	5caa      	ldrb	r2, [r5, r2]
    e732:	4313      	orrs	r3, r2
    e734:	612b      	str	r3, [r5, #16]
	fs->fs_type = fmt;		/* FAT sub-type */
    e736:	465b      	mov	r3, fp
    e738:	702b      	strb	r3, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    e73a:	4a20      	ldr	r2, [pc, #128]	; (e7bc <chk_mounted+0x3a0>)
    e73c:	447a      	add	r2, pc
    e73e:	8813      	ldrh	r3, [r2, #0]
    e740:	3301      	adds	r3, #1
    e742:	b29b      	uxth	r3, r3
    e744:	8013      	strh	r3, [r2, #0]
    e746:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    e748:	2000      	movs	r0, #0
    e74a:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
    e74c:	7128      	strb	r0, [r5, #4]
	return FR_OK;
    e74e:	e680      	b.n	e452 <chk_mounted+0x36>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    e750:	2302      	movs	r3, #2
    e752:	469b      	mov	fp, r3
    e754:	e75a      	b.n	e60c <chk_mounted+0x1f0>
    e756:	46c0      	nop			; (mov r8, r8)
    e758:	0000455e 	.word	0x0000455e
    e75c:	1fff2760 	.word	0x1fff2760
    e760:	00000138 	.word	0x00000138
    e764:	00000100 	.word	0x00000100
    e768:	fffffead 	.word	0xfffffead
    e76c:	fffffe5f 	.word	0xfffffe5f
    e770:	00000340 	.word	0x00000340
    e774:	00000ff5 	.word	0x00000ff5
    e778:	0000fff5 	.word	0x0000fff5
    e77c:	000001ff 	.word	0x000001ff
    e780:	00000488 	.word	0x00000488
    e784:	0000022f 	.word	0x0000022f
    e788:	0000022e 	.word	0x0000022e
    e78c:	ffffaa55 	.word	0xffffaa55
    e790:	41615252 	.word	0x41615252
    e794:	00000217 	.word	0x00000217
    e798:	00000216 	.word	0x00000216
    e79c:	00000215 	.word	0x00000215
    e7a0:	61417272 	.word	0x61417272
    e7a4:	0000021f 	.word	0x0000021f
    e7a8:	0000021e 	.word	0x0000021e
    e7ac:	0000021d 	.word	0x0000021d
    e7b0:	0000021b 	.word	0x0000021b
    e7b4:	0000021a 	.word	0x0000021a
    e7b8:	00000219 	.word	0x00000219
    e7bc:	1fff248c 	.word	0x1fff248c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    e7c0:	4652      	mov	r2, sl
    e7c2:	2a00      	cmp	r2, #0
    e7c4:	d021      	beq.n	e80a <chk_mounted+0x3ee>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    e7c6:	9a00      	ldr	r2, [sp, #0]
    e7c8:	4694      	mov	ip, r2
    e7ca:	4463      	add	r3, ip
    e7cc:	626b      	str	r3, [r5, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    e7ce:	465b      	mov	r3, fp
    e7d0:	2b02      	cmp	r3, #2
    e7d2:	d101      	bne.n	e7d8 <chk_mounted+0x3bc>
    e7d4:	0040      	lsls	r0, r0, #1
    e7d6:	e73e      	b.n	e656 <chk_mounted+0x23a>
    e7d8:	2303      	movs	r3, #3
    e7da:	4343      	muls	r3, r0
    e7dc:	085b      	lsrs	r3, r3, #1
    e7de:	2201      	movs	r2, #1
    e7e0:	4010      	ands	r0, r2
    e7e2:	1818      	adds	r0, r3, r0
    e7e4:	e737      	b.n	e656 <chk_mounted+0x23a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    e7e6:	200c      	movs	r0, #12
    e7e8:	e633      	b.n	e452 <chk_mounted+0x36>
			return FR_OK;				/* The file system object is valid */
    e7ea:	2000      	movs	r0, #0
    e7ec:	e631      	b.n	e452 <chk_mounted+0x36>
	if (fmt == 3) return FR_DISK_ERR;
    e7ee:	2001      	movs	r0, #1
    e7f0:	e62f      	b.n	e452 <chk_mounted+0x36>
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    e7f2:	200d      	movs	r0, #13
    e7f4:	e62d      	b.n	e452 <chk_mounted+0x36>
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    e7f6:	200d      	movs	r0, #13
    e7f8:	e62b      	b.n	e452 <chk_mounted+0x36>
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    e7fa:	200d      	movs	r0, #13
    e7fc:	e629      	b.n	e452 <chk_mounted+0x36>
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    e7fe:	200d      	movs	r0, #13
    e800:	e627      	b.n	e452 <chk_mounted+0x36>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    e802:	200d      	movs	r0, #13
    e804:	e625      	b.n	e452 <chk_mounted+0x36>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    e806:	200d      	movs	r0, #13
    e808:	e623      	b.n	e452 <chk_mounted+0x36>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    e80a:	200d      	movs	r0, #13
    e80c:	e621      	b.n	e452 <chk_mounted+0x36>
		return FR_NO_FILESYSTEM;
    e80e:	200d      	movs	r0, #13
    e810:	e61f      	b.n	e452 <chk_mounted+0x36>
    e812:	46c0      	nop			; (mov r8, r8)

0000e814 <move_window>:
{
    e814:	b5f0      	push	{r4, r5, r6, r7, lr}
    e816:	46d6      	mov	lr, sl
    e818:	464f      	mov	r7, r9
    e81a:	4646      	mov	r6, r8
    e81c:	b5c0      	push	{r6, r7, lr}
    e81e:	b082      	sub	sp, #8
    e820:	0004      	movs	r4, r0
    e822:	4689      	mov	r9, r1
    e824:	4b2c      	ldr	r3, [pc, #176]	; (e8d8 <move_window+0xc4>)
    e826:	447b      	add	r3, pc
    e828:	4698      	mov	r8, r3
	wsect = fs->winsect;
    e82a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    e82c:	428d      	cmp	r5, r1
    e82e:	d04c      	beq.n	e8ca <move_window+0xb6>
		if (fs->wflag) {	/* Write back dirty window if needed */
    e830:	7903      	ldrb	r3, [r0, #4]
    e832:	2b00      	cmp	r3, #0
    e834:	d109      	bne.n	e84a <move_window+0x36>
		if (sector) {
    e836:	464b      	mov	r3, r9
    e838:	2b00      	cmp	r3, #0
    e83a:	d137      	bne.n	e8ac <move_window+0x98>
	return FR_OK;
    e83c:	2000      	movs	r0, #0
}
    e83e:	b002      	add	sp, #8
    e840:	bc1c      	pop	{r2, r3, r4}
    e842:	4690      	mov	r8, r2
    e844:	4699      	mov	r9, r3
    e846:	46a2      	mov	sl, r4
    e848:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    e84a:	2330      	movs	r3, #48	; 0x30
    e84c:	469c      	mov	ip, r3
    e84e:	4484      	add	ip, r0
    e850:	4663      	mov	r3, ip
    e852:	4661      	mov	r1, ip
    e854:	9301      	str	r3, [sp, #4]
    e856:	7840      	ldrb	r0, [r0, #1]
    e858:	2301      	movs	r3, #1
    e85a:	002a      	movs	r2, r5
    e85c:	4e1f      	ldr	r6, [pc, #124]	; (e8dc <move_window+0xc8>)
    e85e:	4647      	mov	r7, r8
    e860:	59be      	ldr	r6, [r7, r6]
    e862:	9600      	str	r6, [sp, #0]
    e864:	47b0      	blx	r6
    e866:	2800      	cmp	r0, #0
    e868:	d131      	bne.n	e8ce <move_window+0xba>
			fs->wflag = 0;
    e86a:	2300      	movs	r3, #0
    e86c:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e86e:	6a23      	ldr	r3, [r4, #32]
    e870:	69e2      	ldr	r2, [r4, #28]
    e872:	4694      	mov	ip, r2
    e874:	4463      	add	r3, ip
    e876:	429d      	cmp	r5, r3
    e878:	d2dd      	bcs.n	e836 <move_window+0x22>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e87a:	78e3      	ldrb	r3, [r4, #3]
    e87c:	469a      	mov	sl, r3
    e87e:	e011      	b.n	e8a4 <move_window+0x90>
					wsect += fs->fsize;
    e880:	69e3      	ldr	r3, [r4, #28]
    e882:	469c      	mov	ip, r3
    e884:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    e886:	7860      	ldrb	r0, [r4, #1]
    e888:	2301      	movs	r3, #1
    e88a:	002a      	movs	r2, r5
    e88c:	9901      	ldr	r1, [sp, #4]
    e88e:	4e13      	ldr	r6, [pc, #76]	; (e8dc <move_window+0xc8>)
    e890:	46b4      	mov	ip, r6
    e892:	4646      	mov	r6, r8
    e894:	4667      	mov	r7, ip
    e896:	59f6      	ldr	r6, [r6, r7]
    e898:	9600      	str	r6, [sp, #0]
    e89a:	47b0      	blx	r6
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e89c:	4656      	mov	r6, sl
    e89e:	3e01      	subs	r6, #1
    e8a0:	b2f3      	uxtb	r3, r6
    e8a2:	469a      	mov	sl, r3
    e8a4:	4653      	mov	r3, sl
    e8a6:	2b01      	cmp	r3, #1
    e8a8:	d8ea      	bhi.n	e880 <move_window+0x6c>
    e8aa:	e7c4      	b.n	e836 <move_window+0x22>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    e8ac:	0021      	movs	r1, r4
    e8ae:	3130      	adds	r1, #48	; 0x30
    e8b0:	7860      	ldrb	r0, [r4, #1]
    e8b2:	2301      	movs	r3, #1
    e8b4:	464a      	mov	r2, r9
    e8b6:	4d0a      	ldr	r5, [pc, #40]	; (e8e0 <move_window+0xcc>)
    e8b8:	4646      	mov	r6, r8
    e8ba:	5975      	ldr	r5, [r6, r5]
    e8bc:	9500      	str	r5, [sp, #0]
    e8be:	47a8      	blx	r5
    e8c0:	2800      	cmp	r0, #0
    e8c2:	d106      	bne.n	e8d2 <move_window+0xbe>
			fs->winsect = sector;
    e8c4:	464b      	mov	r3, r9
    e8c6:	62e3      	str	r3, [r4, #44]	; 0x2c
    e8c8:	e7b9      	b.n	e83e <move_window+0x2a>
	return FR_OK;
    e8ca:	2000      	movs	r0, #0
    e8cc:	e7b7      	b.n	e83e <move_window+0x2a>
				return FR_DISK_ERR;
    e8ce:	2001      	movs	r0, #1
    e8d0:	e7b5      	b.n	e83e <move_window+0x2a>
				return FR_DISK_ERR;
    e8d2:	2001      	movs	r0, #1
    e8d4:	e7b3      	b.n	e83e <move_window+0x2a>
    e8d6:	46c0      	nop			; (mov r8, r8)
    e8d8:	00004166 	.word	0x00004166
    e8dc:	00000444 	.word	0x00000444
    e8e0:	00000488 	.word	0x00000488

0000e8e4 <get_fat>:
{
    e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8e6:	0005      	movs	r5, r0
    e8e8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    e8ea:	2901      	cmp	r1, #1
    e8ec:	d977      	bls.n	e9de <get_fat+0xfa>
    e8ee:	6983      	ldr	r3, [r0, #24]
    e8f0:	4299      	cmp	r1, r3
    e8f2:	d276      	bcs.n	e9e2 <get_fat+0xfe>
	switch (fs->fs_type) {
    e8f4:	7803      	ldrb	r3, [r0, #0]
    e8f6:	2b02      	cmp	r3, #2
    e8f8:	d035      	beq.n	e966 <get_fat+0x82>
    e8fa:	2b03      	cmp	r3, #3
    e8fc:	d04d      	beq.n	e99a <get_fat+0xb6>
    e8fe:	2b01      	cmp	r3, #1
    e900:	d002      	beq.n	e908 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e902:	2001      	movs	r0, #1
    e904:	4240      	negs	r0, r0
    e906:	e06d      	b.n	e9e4 <get_fat+0x100>
		bc = (UINT)clst; bc += bc / 2;
    e908:	084f      	lsrs	r7, r1, #1
    e90a:	19cf      	adds	r7, r1, r7
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e90c:	0a79      	lsrs	r1, r7, #9
    e90e:	6a03      	ldr	r3, [r0, #32]
    e910:	469c      	mov	ip, r3
    e912:	4461      	add	r1, ip
    e914:	4b34      	ldr	r3, [pc, #208]	; (e9e8 <get_fat+0x104>)
    e916:	447b      	add	r3, pc
    e918:	4798      	blx	r3
    e91a:	2800      	cmp	r0, #0
    e91c:	d002      	beq.n	e924 <get_fat+0x40>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e91e:	2001      	movs	r0, #1
    e920:	4240      	negs	r0, r0
    e922:	e05f      	b.n	e9e4 <get_fat+0x100>
		wc = fs->win[bc % SS(fs)]; bc++;
    e924:	05fb      	lsls	r3, r7, #23
    e926:	0ddb      	lsrs	r3, r3, #23
    e928:	18eb      	adds	r3, r5, r3
    e92a:	3330      	adds	r3, #48	; 0x30
    e92c:	781e      	ldrb	r6, [r3, #0]
    e92e:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e930:	0a79      	lsrs	r1, r7, #9
    e932:	6a2b      	ldr	r3, [r5, #32]
    e934:	469c      	mov	ip, r3
    e936:	4461      	add	r1, ip
    e938:	0028      	movs	r0, r5
    e93a:	4b2c      	ldr	r3, [pc, #176]	; (e9ec <get_fat+0x108>)
    e93c:	447b      	add	r3, pc
    e93e:	4798      	blx	r3
    e940:	2800      	cmp	r0, #0
    e942:	d002      	beq.n	e94a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e944:	2001      	movs	r0, #1
    e946:	4240      	negs	r0, r0
    e948:	e04c      	b.n	e9e4 <get_fat+0x100>
		wc |= fs->win[bc % SS(fs)] << 8;
    e94a:	05ff      	lsls	r7, r7, #23
    e94c:	0dff      	lsrs	r7, r7, #23
    e94e:	19ed      	adds	r5, r5, r7
    e950:	3530      	adds	r5, #48	; 0x30
    e952:	7828      	ldrb	r0, [r5, #0]
    e954:	0200      	lsls	r0, r0, #8
    e956:	4330      	orrs	r0, r6
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    e958:	07e3      	lsls	r3, r4, #31
    e95a:	d501      	bpl.n	e960 <get_fat+0x7c>
    e95c:	0900      	lsrs	r0, r0, #4
    e95e:	e041      	b.n	e9e4 <get_fat+0x100>
    e960:	0500      	lsls	r0, r0, #20
    e962:	0d00      	lsrs	r0, r0, #20
    e964:	e03e      	b.n	e9e4 <get_fat+0x100>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    e966:	0a09      	lsrs	r1, r1, #8
    e968:	6a03      	ldr	r3, [r0, #32]
    e96a:	469c      	mov	ip, r3
    e96c:	4461      	add	r1, ip
    e96e:	4b20      	ldr	r3, [pc, #128]	; (e9f0 <get_fat+0x10c>)
    e970:	447b      	add	r3, pc
    e972:	4798      	blx	r3
    e974:	2800      	cmp	r0, #0
    e976:	d002      	beq.n	e97e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e978:	2001      	movs	r0, #1
    e97a:	4240      	negs	r0, r0
    e97c:	e032      	b.n	e9e4 <get_fat+0x100>
		p = &fs->win[clst * 2 % SS(fs)];
    e97e:	0064      	lsls	r4, r4, #1
    e980:	23ff      	movs	r3, #255	; 0xff
    e982:	005b      	lsls	r3, r3, #1
    e984:	401c      	ands	r4, r3
    e986:	0023      	movs	r3, r4
    e988:	3330      	adds	r3, #48	; 0x30
    e98a:	18eb      	adds	r3, r5, r3
		return LD_WORD(p);
    e98c:	785b      	ldrb	r3, [r3, #1]
    e98e:	021b      	lsls	r3, r3, #8
    e990:	192c      	adds	r4, r5, r4
    e992:	3430      	adds	r4, #48	; 0x30
    e994:	7820      	ldrb	r0, [r4, #0]
    e996:	4318      	orrs	r0, r3
    e998:	e024      	b.n	e9e4 <get_fat+0x100>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    e99a:	09c9      	lsrs	r1, r1, #7
    e99c:	6a03      	ldr	r3, [r0, #32]
    e99e:	469c      	mov	ip, r3
    e9a0:	4461      	add	r1, ip
    e9a2:	4b14      	ldr	r3, [pc, #80]	; (e9f4 <get_fat+0x110>)
    e9a4:	447b      	add	r3, pc
    e9a6:	4798      	blx	r3
    e9a8:	2800      	cmp	r0, #0
    e9aa:	d002      	beq.n	e9b2 <get_fat+0xce>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e9ac:	2001      	movs	r0, #1
    e9ae:	4240      	negs	r0, r0
    e9b0:	e018      	b.n	e9e4 <get_fat+0x100>
		p = &fs->win[clst * 4 % SS(fs)];
    e9b2:	00a4      	lsls	r4, r4, #2
    e9b4:	23fe      	movs	r3, #254	; 0xfe
    e9b6:	005b      	lsls	r3, r3, #1
    e9b8:	401c      	ands	r4, r3
    e9ba:	0023      	movs	r3, r4
    e9bc:	3330      	adds	r3, #48	; 0x30
    e9be:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    e9c0:	78d8      	ldrb	r0, [r3, #3]
    e9c2:	0600      	lsls	r0, r0, #24
    e9c4:	789a      	ldrb	r2, [r3, #2]
    e9c6:	0412      	lsls	r2, r2, #16
    e9c8:	4310      	orrs	r0, r2
    e9ca:	785b      	ldrb	r3, [r3, #1]
    e9cc:	021b      	lsls	r3, r3, #8
    e9ce:	4318      	orrs	r0, r3
    e9d0:	192c      	adds	r4, r5, r4
    e9d2:	3430      	adds	r4, #48	; 0x30
    e9d4:	7823      	ldrb	r3, [r4, #0]
    e9d6:	4318      	orrs	r0, r3
    e9d8:	0100      	lsls	r0, r0, #4
    e9da:	0900      	lsrs	r0, r0, #4
    e9dc:	e002      	b.n	e9e4 <get_fat+0x100>
		return 1;
    e9de:	2001      	movs	r0, #1
    e9e0:	e000      	b.n	e9e4 <get_fat+0x100>
    e9e2:	2001      	movs	r0, #1
}
    e9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9e6:	46c0      	nop			; (mov r8, r8)
    e9e8:	fffffefb 	.word	0xfffffefb
    e9ec:	fffffed5 	.word	0xfffffed5
    e9f0:	fffffea1 	.word	0xfffffea1
    e9f4:	fffffe6d 	.word	0xfffffe6d

0000e9f8 <dir_sdi>:
{
    e9f8:	b570      	push	{r4, r5, r6, lr}
    e9fa:	0005      	movs	r5, r0
    e9fc:	000c      	movs	r4, r1
	dj->index = idx;
    e9fe:	80e9      	strh	r1, [r5, #6]
	clst = dj->sclust;
    ea00:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    ea02:	2901      	cmp	r1, #1
    ea04:	d03e      	beq.n	ea84 <dir_sdi+0x8c>
    ea06:	6803      	ldr	r3, [r0, #0]
    ea08:	699a      	ldr	r2, [r3, #24]
    ea0a:	4291      	cmp	r1, r2
    ea0c:	d301      	bcc.n	ea12 <dir_sdi+0x1a>
		return FR_INT_ERR;
    ea0e:	2002      	movs	r0, #2
    ea10:	e039      	b.n	ea86 <dir_sdi+0x8e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    ea12:	2900      	cmp	r1, #0
    ea14:	d102      	bne.n	ea1c <dir_sdi+0x24>
    ea16:	781a      	ldrb	r2, [r3, #0]
    ea18:	2a03      	cmp	r2, #3
    ea1a:	d007      	beq.n	ea2c <dir_sdi+0x34>
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    ea1c:	2900      	cmp	r1, #0
    ea1e:	d114      	bne.n	ea4a <dir_sdi+0x52>
		dj->clust = clst;
    ea20:	60e9      	str	r1, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    ea22:	891a      	ldrh	r2, [r3, #8]
    ea24:	4294      	cmp	r4, r2
    ea26:	d303      	bcc.n	ea30 <dir_sdi+0x38>
			return FR_INT_ERR;
    ea28:	2002      	movs	r0, #2
    ea2a:	e02c      	b.n	ea86 <dir_sdi+0x8e>
		clst = dj->fs->dirbase;
    ea2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    ea2e:	e7f5      	b.n	ea1c <dir_sdi+0x24>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    ea30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea32:	0922      	lsrs	r2, r4, #4
    ea34:	189b      	adds	r3, r3, r2
    ea36:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    ea38:	682b      	ldr	r3, [r5, #0]
    ea3a:	3330      	adds	r3, #48	; 0x30
    ea3c:	220f      	movs	r2, #15
    ea3e:	4014      	ands	r4, r2
    ea40:	0164      	lsls	r4, r4, #5
    ea42:	191c      	adds	r4, r3, r4
    ea44:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
    ea46:	2000      	movs	r0, #0
    ea48:	e01d      	b.n	ea86 <dir_sdi+0x8e>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    ea4a:	789e      	ldrb	r6, [r3, #2]
    ea4c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    ea4e:	42b4      	cmp	r4, r6
    ea50:	d30f      	bcc.n	ea72 <dir_sdi+0x7a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    ea52:	6828      	ldr	r0, [r5, #0]
    ea54:	4b0f      	ldr	r3, [pc, #60]	; (ea94 <dir_sdi+0x9c>)
    ea56:	447b      	add	r3, pc
    ea58:	4798      	blx	r3
    ea5a:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    ea5c:	1c43      	adds	r3, r0, #1
    ea5e:	d013      	beq.n	ea88 <dir_sdi+0x90>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    ea60:	2801      	cmp	r0, #1
    ea62:	d913      	bls.n	ea8c <dir_sdi+0x94>
    ea64:	682b      	ldr	r3, [r5, #0]
    ea66:	699b      	ldr	r3, [r3, #24]
    ea68:	4298      	cmp	r0, r3
    ea6a:	d211      	bcs.n	ea90 <dir_sdi+0x98>
			idx -= ic;
    ea6c:	1ba4      	subs	r4, r4, r6
    ea6e:	b2a4      	uxth	r4, r4
    ea70:	e7ed      	b.n	ea4e <dir_sdi+0x56>
		dj->clust = clst;
    ea72:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    ea74:	6828      	ldr	r0, [r5, #0]
    ea76:	4b08      	ldr	r3, [pc, #32]	; (ea98 <dir_sdi+0xa0>)
    ea78:	447b      	add	r3, pc
    ea7a:	4798      	blx	r3
    ea7c:	0923      	lsrs	r3, r4, #4
    ea7e:	18c0      	adds	r0, r0, r3
    ea80:	6128      	str	r0, [r5, #16]
    ea82:	e7d9      	b.n	ea38 <dir_sdi+0x40>
		return FR_INT_ERR;
    ea84:	2002      	movs	r0, #2
}
    ea86:	bd70      	pop	{r4, r5, r6, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    ea88:	2001      	movs	r0, #1
    ea8a:	e7fc      	b.n	ea86 <dir_sdi+0x8e>
				return FR_INT_ERR;
    ea8c:	2002      	movs	r0, #2
    ea8e:	e7fa      	b.n	ea86 <dir_sdi+0x8e>
    ea90:	2002      	movs	r0, #2
    ea92:	e7f8      	b.n	ea86 <dir_sdi+0x8e>
    ea94:	fffffe8b 	.word	0xfffffe8b
    ea98:	fffff757 	.word	0xfffff757

0000ea9c <put_fat>:
{
    ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea9e:	0006      	movs	r6, r0
    eaa0:	000c      	movs	r4, r1
    eaa2:	0015      	movs	r5, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    eaa4:	2901      	cmp	r1, #1
    eaa6:	d800      	bhi.n	eaaa <put_fat+0xe>
    eaa8:	e08a      	b.n	ebc0 <put_fat+0x124>
    eaaa:	6983      	ldr	r3, [r0, #24]
    eaac:	4299      	cmp	r1, r3
    eaae:	d301      	bcc.n	eab4 <put_fat+0x18>
		res = FR_INT_ERR;
    eab0:	2002      	movs	r0, #2
    eab2:	e086      	b.n	ebc2 <put_fat+0x126>
		switch (fs->fs_type) {
    eab4:	7803      	ldrb	r3, [r0, #0]
    eab6:	2b02      	cmp	r3, #2
    eab8:	d04c      	beq.n	eb54 <put_fat+0xb8>
    eaba:	2b03      	cmp	r3, #3
    eabc:	d061      	beq.n	eb82 <put_fat+0xe6>
    eabe:	2b01      	cmp	r3, #1
    eac0:	d003      	beq.n	eaca <put_fat+0x2e>
			res = FR_INT_ERR;
    eac2:	2002      	movs	r0, #2
		fs->wflag = 1;
    eac4:	2301      	movs	r3, #1
    eac6:	7133      	strb	r3, [r6, #4]
    eac8:	e07b      	b.n	ebc2 <put_fat+0x126>
			bc = clst; bc += bc / 2;
    eaca:	084f      	lsrs	r7, r1, #1
    eacc:	19cf      	adds	r7, r1, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    eace:	0a79      	lsrs	r1, r7, #9
    ead0:	6a03      	ldr	r3, [r0, #32]
    ead2:	469c      	mov	ip, r3
    ead4:	4461      	add	r1, ip
    ead6:	4b3b      	ldr	r3, [pc, #236]	; (ebc4 <put_fat+0x128>)
    ead8:	447b      	add	r3, pc
    eada:	4798      	blx	r3
			if (res != FR_OK) break;
    eadc:	2800      	cmp	r0, #0
    eade:	d1f1      	bne.n	eac4 <put_fat+0x28>
			p = &fs->win[bc % SS(fs)];
    eae0:	05fb      	lsls	r3, r7, #23
    eae2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    eae4:	2201      	movs	r2, #1
    eae6:	4014      	ands	r4, r2
    eae8:	d025      	beq.n	eb36 <put_fat+0x9a>
    eaea:	18f2      	adds	r2, r6, r3
    eaec:	3230      	adds	r2, #48	; 0x30
    eaee:	2100      	movs	r1, #0
    eaf0:	5651      	ldrsb	r1, [r2, r1]
    eaf2:	220f      	movs	r2, #15
    eaf4:	400a      	ands	r2, r1
    eaf6:	0129      	lsls	r1, r5, #4
    eaf8:	20ff      	movs	r0, #255	; 0xff
    eafa:	0100      	lsls	r0, r0, #4
    eafc:	4001      	ands	r1, r0
    eafe:	430a      	orrs	r2, r1
    eb00:	b2d2      	uxtb	r2, r2
    eb02:	18f3      	adds	r3, r6, r3
    eb04:	3330      	adds	r3, #48	; 0x30
    eb06:	701a      	strb	r2, [r3, #0]
			bc++;
    eb08:	3701      	adds	r7, #1
			fs->wflag = 1;
    eb0a:	2301      	movs	r3, #1
    eb0c:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    eb0e:	0a79      	lsrs	r1, r7, #9
    eb10:	6a33      	ldr	r3, [r6, #32]
    eb12:	469c      	mov	ip, r3
    eb14:	4461      	add	r1, ip
    eb16:	0030      	movs	r0, r6
    eb18:	4b2b      	ldr	r3, [pc, #172]	; (ebc8 <put_fat+0x12c>)
    eb1a:	447b      	add	r3, pc
    eb1c:	4798      	blx	r3
			if (res != FR_OK) break;
    eb1e:	2800      	cmp	r0, #0
    eb20:	d1d0      	bne.n	eac4 <put_fat+0x28>
			p = &fs->win[bc % SS(fs)];
    eb22:	05ff      	lsls	r7, r7, #23
    eb24:	0dff      	lsrs	r7, r7, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    eb26:	2c00      	cmp	r4, #0
    eb28:	d007      	beq.n	eb3a <put_fat+0x9e>
    eb2a:	092d      	lsrs	r5, r5, #4
    eb2c:	b2ed      	uxtb	r5, r5
    eb2e:	19f7      	adds	r7, r6, r7
    eb30:	3730      	adds	r7, #48	; 0x30
    eb32:	703d      	strb	r5, [r7, #0]
			break;
    eb34:	e7c6      	b.n	eac4 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    eb36:	b2ea      	uxtb	r2, r5
    eb38:	e7e3      	b.n	eb02 <put_fat+0x66>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    eb3a:	19f3      	adds	r3, r6, r7
    eb3c:	3330      	adds	r3, #48	; 0x30
    eb3e:	781b      	ldrb	r3, [r3, #0]
    eb40:	b25b      	sxtb	r3, r3
    eb42:	220f      	movs	r2, #15
    eb44:	4393      	bics	r3, r2
    eb46:	0a2d      	lsrs	r5, r5, #8
    eb48:	b26a      	sxtb	r2, r5
    eb4a:	250f      	movs	r5, #15
    eb4c:	4015      	ands	r5, r2
    eb4e:	431d      	orrs	r5, r3
    eb50:	b2ed      	uxtb	r5, r5
    eb52:	e7ec      	b.n	eb2e <put_fat+0x92>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    eb54:	0a09      	lsrs	r1, r1, #8
    eb56:	6a03      	ldr	r3, [r0, #32]
    eb58:	469c      	mov	ip, r3
    eb5a:	4461      	add	r1, ip
    eb5c:	4b1b      	ldr	r3, [pc, #108]	; (ebcc <put_fat+0x130>)
    eb5e:	447b      	add	r3, pc
    eb60:	4798      	blx	r3
			if (res != FR_OK) break;
    eb62:	2800      	cmp	r0, #0
    eb64:	d1ae      	bne.n	eac4 <put_fat+0x28>
			p = &fs->win[clst * 2 % SS(fs)];
    eb66:	0064      	lsls	r4, r4, #1
    eb68:	23ff      	movs	r3, #255	; 0xff
    eb6a:	005b      	lsls	r3, r3, #1
    eb6c:	401c      	ands	r4, r3
    eb6e:	0023      	movs	r3, r4
    eb70:	3330      	adds	r3, #48	; 0x30
    eb72:	18f3      	adds	r3, r6, r3
			ST_WORD(p, (WORD)val);
    eb74:	1934      	adds	r4, r6, r4
    eb76:	3430      	adds	r4, #48	; 0x30
    eb78:	7025      	strb	r5, [r4, #0]
    eb7a:	b2ad      	uxth	r5, r5
    eb7c:	0a2d      	lsrs	r5, r5, #8
    eb7e:	705d      	strb	r5, [r3, #1]
			break;
    eb80:	e7a0      	b.n	eac4 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    eb82:	09c9      	lsrs	r1, r1, #7
    eb84:	6a03      	ldr	r3, [r0, #32]
    eb86:	469c      	mov	ip, r3
    eb88:	4461      	add	r1, ip
    eb8a:	4b11      	ldr	r3, [pc, #68]	; (ebd0 <put_fat+0x134>)
    eb8c:	447b      	add	r3, pc
    eb8e:	4798      	blx	r3
			if (res != FR_OK) break;
    eb90:	2800      	cmp	r0, #0
    eb92:	d197      	bne.n	eac4 <put_fat+0x28>
			p = &fs->win[clst * 4 % SS(fs)];
    eb94:	00a4      	lsls	r4, r4, #2
    eb96:	23fe      	movs	r3, #254	; 0xfe
    eb98:	005b      	lsls	r3, r3, #1
    eb9a:	401c      	ands	r4, r3
    eb9c:	0023      	movs	r3, r4
    eb9e:	3330      	adds	r3, #48	; 0x30
    eba0:	18f3      	adds	r3, r6, r3
			val |= LD_DWORD(p) & 0xF0000000;
    eba2:	78da      	ldrb	r2, [r3, #3]
    eba4:	1934      	adds	r4, r6, r4
    eba6:	3430      	adds	r4, #48	; 0x30
    eba8:	0912      	lsrs	r2, r2, #4
    ebaa:	0712      	lsls	r2, r2, #28
    ebac:	4315      	orrs	r5, r2
			ST_DWORD(p, val);
    ebae:	7025      	strb	r5, [r4, #0]
    ebb0:	b2aa      	uxth	r2, r5
    ebb2:	0a12      	lsrs	r2, r2, #8
    ebb4:	705a      	strb	r2, [r3, #1]
    ebb6:	0c2a      	lsrs	r2, r5, #16
    ebb8:	709a      	strb	r2, [r3, #2]
    ebba:	0e2d      	lsrs	r5, r5, #24
    ebbc:	70dd      	strb	r5, [r3, #3]
			break;
    ebbe:	e781      	b.n	eac4 <put_fat+0x28>
		res = FR_INT_ERR;
    ebc0:	2002      	movs	r0, #2
}
    ebc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebc4:	fffffd39 	.word	0xfffffd39
    ebc8:	fffffcf7 	.word	0xfffffcf7
    ebcc:	fffffcb3 	.word	0xfffffcb3
    ebd0:	fffffc85 	.word	0xfffffc85

0000ebd4 <create_chain>:
{
    ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebd6:	0005      	movs	r5, r0
    ebd8:	1e0f      	subs	r7, r1, #0
	if (clst == 0) {		/* Create a new chain */
    ebda:	d107      	bne.n	ebec <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
    ebdc:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    ebde:	2e00      	cmp	r6, #0
    ebe0:	d00e      	beq.n	ec00 <create_chain+0x2c>
    ebe2:	6983      	ldr	r3, [r0, #24]
    ebe4:	429e      	cmp	r6, r3
    ebe6:	d30c      	bcc.n	ec02 <create_chain+0x2e>
    ebe8:	2601      	movs	r6, #1
    ebea:	e00a      	b.n	ec02 <create_chain+0x2e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    ebec:	4b26      	ldr	r3, [pc, #152]	; (ec88 <create_chain+0xb4>)
    ebee:	447b      	add	r3, pc
    ebf0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    ebf2:	2801      	cmp	r0, #1
    ebf4:	d93f      	bls.n	ec76 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    ebf6:	69ab      	ldr	r3, [r5, #24]
    ebf8:	4298      	cmp	r0, r3
    ebfa:	d341      	bcc.n	ec80 <create_chain+0xac>
		scl = clst;
    ebfc:	003e      	movs	r6, r7
    ebfe:	e000      	b.n	ec02 <create_chain+0x2e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    ec00:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    ec02:	0034      	movs	r4, r6
    ec04:	e00c      	b.n	ec20 <create_chain+0x4c>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    ec06:	0021      	movs	r1, r4
    ec08:	0028      	movs	r0, r5
    ec0a:	4b20      	ldr	r3, [pc, #128]	; (ec8c <create_chain+0xb8>)
    ec0c:	447b      	add	r3, pc
    ec0e:	4798      	blx	r3
		if (cs == 0) break;				/* Found a free cluster */
    ec10:	2800      	cmp	r0, #0
    ec12:	d00d      	beq.n	ec30 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    ec14:	1c43      	adds	r3, r0, #1
    ec16:	d033      	beq.n	ec80 <create_chain+0xac>
    ec18:	2801      	cmp	r0, #1
    ec1a:	d031      	beq.n	ec80 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    ec1c:	42b4      	cmp	r4, r6
    ec1e:	d02e      	beq.n	ec7e <create_chain+0xaa>
		ncl++;							/* Next cluster */
    ec20:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    ec22:	69ab      	ldr	r3, [r5, #24]
    ec24:	429c      	cmp	r4, r3
    ec26:	d3ee      	bcc.n	ec06 <create_chain+0x32>
			if (ncl > scl) return 0;	/* No free cluster */
    ec28:	2e01      	cmp	r6, #1
    ec2a:	d926      	bls.n	ec7a <create_chain+0xa6>
			ncl = 2;
    ec2c:	2402      	movs	r4, #2
    ec2e:	e7ea      	b.n	ec06 <create_chain+0x32>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    ec30:	4a17      	ldr	r2, [pc, #92]	; (ec90 <create_chain+0xbc>)
    ec32:	0021      	movs	r1, r4
    ec34:	0028      	movs	r0, r5
    ec36:	4b17      	ldr	r3, [pc, #92]	; (ec94 <create_chain+0xc0>)
    ec38:	447b      	add	r3, pc
    ec3a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    ec3c:	2800      	cmp	r0, #0
    ec3e:	d101      	bne.n	ec44 <create_chain+0x70>
    ec40:	2f00      	cmp	r7, #0
    ec42:	d10b      	bne.n	ec5c <create_chain+0x88>
	if (res == FR_OK) {
    ec44:	2800      	cmp	r0, #0
    ec46:	d110      	bne.n	ec6a <create_chain+0x96>
		fs->last_clust = ncl;			/* Update FSINFO */
    ec48:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    ec4a:	692b      	ldr	r3, [r5, #16]
    ec4c:	1c5a      	adds	r2, r3, #1
    ec4e:	d018      	beq.n	ec82 <create_chain+0xae>
			fs->free_clust--;
    ec50:	3b01      	subs	r3, #1
    ec52:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    ec54:	2301      	movs	r3, #1
    ec56:	716b      	strb	r3, [r5, #5]
    ec58:	0020      	movs	r0, r4
    ec5a:	e011      	b.n	ec80 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    ec5c:	0022      	movs	r2, r4
    ec5e:	0039      	movs	r1, r7
    ec60:	0028      	movs	r0, r5
    ec62:	4b0d      	ldr	r3, [pc, #52]	; (ec98 <create_chain+0xc4>)
    ec64:	447b      	add	r3, pc
    ec66:	4798      	blx	r3
    ec68:	e7ec      	b.n	ec44 <create_chain+0x70>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    ec6a:	2801      	cmp	r0, #1
    ec6c:	d001      	beq.n	ec72 <create_chain+0x9e>
    ec6e:	2001      	movs	r0, #1
    ec70:	e006      	b.n	ec80 <create_chain+0xac>
    ec72:	3802      	subs	r0, #2
    ec74:	e004      	b.n	ec80 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    ec76:	2001      	movs	r0, #1
    ec78:	e002      	b.n	ec80 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    ec7a:	2000      	movs	r0, #0
    ec7c:	e000      	b.n	ec80 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    ec7e:	2000      	movs	r0, #0
}
    ec80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec82:	0020      	movs	r0, r4
    ec84:	e7fc      	b.n	ec80 <create_chain+0xac>
    ec86:	46c0      	nop			; (mov r8, r8)
    ec88:	fffffcf3 	.word	0xfffffcf3
    ec8c:	fffffcd5 	.word	0xfffffcd5
    ec90:	0fffffff 	.word	0x0fffffff
    ec94:	fffffe61 	.word	0xfffffe61
    ec98:	fffffe35 	.word	0xfffffe35

0000ec9c <remove_chain>:
{
    ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec9e:	0004      	movs	r4, r0
    eca0:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    eca2:	2901      	cmp	r1, #1
    eca4:	d925      	bls.n	ecf2 <remove_chain+0x56>
    eca6:	6983      	ldr	r3, [r0, #24]
    eca8:	4299      	cmp	r1, r3
    ecaa:	d301      	bcc.n	ecb0 <remove_chain+0x14>
		res = FR_INT_ERR;
    ecac:	2702      	movs	r7, #2
    ecae:	e021      	b.n	ecf4 <remove_chain+0x58>
    ecb0:	2700      	movs	r7, #0
    ecb2:	e000      	b.n	ecb6 <remove_chain+0x1a>
    ecb4:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    ecb6:	69a3      	ldr	r3, [r4, #24]
    ecb8:	429d      	cmp	r5, r3
    ecba:	d21b      	bcs.n	ecf4 <remove_chain+0x58>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    ecbc:	0029      	movs	r1, r5
    ecbe:	0020      	movs	r0, r4
    ecc0:	4b0f      	ldr	r3, [pc, #60]	; (ed00 <remove_chain+0x64>)
    ecc2:	447b      	add	r3, pc
    ecc4:	4798      	blx	r3
    ecc6:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    ecc8:	d014      	beq.n	ecf4 <remove_chain+0x58>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    ecca:	2801      	cmp	r0, #1
    eccc:	d014      	beq.n	ecf8 <remove_chain+0x5c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    ecce:	1c43      	adds	r3, r0, #1
    ecd0:	d014      	beq.n	ecfc <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    ecd2:	2200      	movs	r2, #0
    ecd4:	0029      	movs	r1, r5
    ecd6:	0020      	movs	r0, r4
    ecd8:	4b0a      	ldr	r3, [pc, #40]	; (ed04 <remove_chain+0x68>)
    ecda:	447b      	add	r3, pc
    ecdc:	4798      	blx	r3
    ecde:	1e07      	subs	r7, r0, #0
			if (res != FR_OK) break;
    ece0:	d108      	bne.n	ecf4 <remove_chain+0x58>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    ece2:	6923      	ldr	r3, [r4, #16]
    ece4:	1c5a      	adds	r2, r3, #1
    ece6:	d0e5      	beq.n	ecb4 <remove_chain+0x18>
				fs->free_clust++;
    ece8:	3301      	adds	r3, #1
    ecea:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    ecec:	2301      	movs	r3, #1
    ecee:	7163      	strb	r3, [r4, #5]
    ecf0:	e7e0      	b.n	ecb4 <remove_chain+0x18>
		res = FR_INT_ERR;
    ecf2:	2702      	movs	r7, #2
}
    ecf4:	0038      	movs	r0, r7
    ecf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    ecf8:	2702      	movs	r7, #2
    ecfa:	e7fb      	b.n	ecf4 <remove_chain+0x58>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    ecfc:	2701      	movs	r7, #1
    ecfe:	e7f9      	b.n	ecf4 <remove_chain+0x58>
    ed00:	fffffc1f 	.word	0xfffffc1f
    ed04:	fffffdbf 	.word	0xfffffdbf

0000ed08 <dir_next>:
{
    ed08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed0a:	46c6      	mov	lr, r8
    ed0c:	b500      	push	{lr}
    ed0e:	0006      	movs	r6, r0
    ed10:	000d      	movs	r5, r1
	i = dj->index + 1;
    ed12:	88c4      	ldrh	r4, [r0, #6]
    ed14:	3401      	adds	r4, #1
    ed16:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    ed18:	2c00      	cmp	r4, #0
    ed1a:	d103      	bne.n	ed24 <dir_next+0x1c>
		return FR_NO_FILE;
    ed1c:	2004      	movs	r0, #4
}
    ed1e:	bc04      	pop	{r2}
    ed20:	4690      	mov	r8, r2
    ed22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    ed24:	6903      	ldr	r3, [r0, #16]
    ed26:	2b00      	cmp	r3, #0
    ed28:	d101      	bne.n	ed2e <dir_next+0x26>
		return FR_NO_FILE;
    ed2a:	2004      	movs	r0, #4
    ed2c:	e7f7      	b.n	ed1e <dir_next+0x16>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    ed2e:	270f      	movs	r7, #15
    ed30:	4027      	ands	r7, r4
    ed32:	d110      	bne.n	ed56 <dir_next+0x4e>
		dj->sect++;					/* Next sector */
    ed34:	3301      	adds	r3, #1
    ed36:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
    ed38:	68c1      	ldr	r1, [r0, #12]
    ed3a:	2900      	cmp	r1, #0
    ed3c:	d105      	bne.n	ed4a <dir_next+0x42>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    ed3e:	6803      	ldr	r3, [r0, #0]
    ed40:	891b      	ldrh	r3, [r3, #8]
    ed42:	429c      	cmp	r4, r3
    ed44:	d307      	bcc.n	ed56 <dir_next+0x4e>
				return FR_NO_FILE;
    ed46:	2004      	movs	r0, #4
    ed48:	e7e9      	b.n	ed1e <dir_next+0x16>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    ed4a:	0923      	lsrs	r3, r4, #4
    ed4c:	6800      	ldr	r0, [r0, #0]
    ed4e:	7882      	ldrb	r2, [r0, #2]
    ed50:	3a01      	subs	r2, #1
    ed52:	421a      	tst	r2, r3
    ed54:	d007      	beq.n	ed66 <dir_next+0x5e>
	dj->index = i;
    ed56:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    ed58:	6833      	ldr	r3, [r6, #0]
    ed5a:	3330      	adds	r3, #48	; 0x30
    ed5c:	017f      	lsls	r7, r7, #5
    ed5e:	19df      	adds	r7, r3, r7
    ed60:	6177      	str	r7, [r6, #20]
	return FR_OK;
    ed62:	2000      	movs	r0, #0
    ed64:	e7db      	b.n	ed1e <dir_next+0x16>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    ed66:	4b30      	ldr	r3, [pc, #192]	; (ee28 <dir_next+0x120>)
    ed68:	447b      	add	r3, pc
    ed6a:	4798      	blx	r3
    ed6c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    ed6e:	0003      	movs	r3, r0
    ed70:	2801      	cmp	r0, #1
    ed72:	d94d      	bls.n	ee10 <dir_next+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ed74:	3301      	adds	r3, #1
    ed76:	d04d      	beq.n	ee14 <dir_next+0x10c>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    ed78:	6830      	ldr	r0, [r6, #0]
    ed7a:	6983      	ldr	r3, [r0, #24]
    ed7c:	4598      	cmp	r8, r3
    ed7e:	d33e      	bcc.n	edfe <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    ed80:	2d00      	cmp	r5, #0
    ed82:	d101      	bne.n	ed88 <dir_next+0x80>
    ed84:	2004      	movs	r0, #4
    ed86:	e7ca      	b.n	ed1e <dir_next+0x16>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    ed88:	68f1      	ldr	r1, [r6, #12]
    ed8a:	4b28      	ldr	r3, [pc, #160]	; (ee2c <dir_next+0x124>)
    ed8c:	447b      	add	r3, pc
    ed8e:	4798      	blx	r3
    ed90:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    ed92:	1e03      	subs	r3, r0, #0
    ed94:	d101      	bne.n	ed9a <dir_next+0x92>
    ed96:	2007      	movs	r0, #7
    ed98:	e7c1      	b.n	ed1e <dir_next+0x16>
					if (clst == 1) return FR_INT_ERR;
    ed9a:	2801      	cmp	r0, #1
    ed9c:	d03c      	beq.n	ee18 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ed9e:	3301      	adds	r3, #1
    eda0:	d03c      	beq.n	ee1c <dir_next+0x114>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    eda2:	2100      	movs	r1, #0
    eda4:	6830      	ldr	r0, [r6, #0]
    eda6:	4b22      	ldr	r3, [pc, #136]	; (ee30 <dir_next+0x128>)
    eda8:	447b      	add	r3, pc
    edaa:	4798      	blx	r3
    edac:	2800      	cmp	r0, #0
    edae:	d137      	bne.n	ee20 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    edb0:	6830      	ldr	r0, [r6, #0]
    edb2:	3030      	adds	r0, #48	; 0x30
    edb4:	2280      	movs	r2, #128	; 0x80
    edb6:	0092      	lsls	r2, r2, #2
    edb8:	2100      	movs	r1, #0
    edba:	4b1e      	ldr	r3, [pc, #120]	; (ee34 <dir_next+0x12c>)
    edbc:	447b      	add	r3, pc
    edbe:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    edc0:	6835      	ldr	r5, [r6, #0]
    edc2:	4641      	mov	r1, r8
    edc4:	0028      	movs	r0, r5
    edc6:	4b1c      	ldr	r3, [pc, #112]	; (ee38 <dir_next+0x130>)
    edc8:	447b      	add	r3, pc
    edca:	4798      	blx	r3
    edcc:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    edce:	2500      	movs	r5, #0
    edd0:	6833      	ldr	r3, [r6, #0]
    edd2:	789a      	ldrb	r2, [r3, #2]
    edd4:	4295      	cmp	r5, r2
    edd6:	d20f      	bcs.n	edf8 <dir_next+0xf0>
						dj->fs->wflag = 1;
    edd8:	2201      	movs	r2, #1
    edda:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    eddc:	2100      	movs	r1, #0
    edde:	6830      	ldr	r0, [r6, #0]
    ede0:	4b16      	ldr	r3, [pc, #88]	; (ee3c <dir_next+0x134>)
    ede2:	447b      	add	r3, pc
    ede4:	4798      	blx	r3
    ede6:	2800      	cmp	r0, #0
    ede8:	d11c      	bne.n	ee24 <dir_next+0x11c>
						dj->fs->winsect++;
    edea:	6832      	ldr	r2, [r6, #0]
    edec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    edee:	3301      	adds	r3, #1
    edf0:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    edf2:	3501      	adds	r5, #1
    edf4:	b2ed      	uxtb	r5, r5
    edf6:	e7eb      	b.n	edd0 <dir_next+0xc8>
					dj->fs->winsect -= c;						/* Rewind window address */
    edf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    edfa:	1b55      	subs	r5, r2, r5
    edfc:	62dd      	str	r5, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    edfe:	4643      	mov	r3, r8
    ee00:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    ee02:	4641      	mov	r1, r8
    ee04:	6830      	ldr	r0, [r6, #0]
    ee06:	4b0e      	ldr	r3, [pc, #56]	; (ee40 <dir_next+0x138>)
    ee08:	447b      	add	r3, pc
    ee0a:	4798      	blx	r3
    ee0c:	6130      	str	r0, [r6, #16]
    ee0e:	e7a2      	b.n	ed56 <dir_next+0x4e>
				if (clst <= 1) return FR_INT_ERR;
    ee10:	2002      	movs	r0, #2
    ee12:	e784      	b.n	ed1e <dir_next+0x16>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ee14:	2001      	movs	r0, #1
    ee16:	e782      	b.n	ed1e <dir_next+0x16>
					if (clst == 1) return FR_INT_ERR;
    ee18:	2002      	movs	r0, #2
    ee1a:	e780      	b.n	ed1e <dir_next+0x16>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ee1c:	2001      	movs	r0, #1
    ee1e:	e77e      	b.n	ed1e <dir_next+0x16>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    ee20:	2001      	movs	r0, #1
    ee22:	e77c      	b.n	ed1e <dir_next+0x16>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    ee24:	2001      	movs	r0, #1
    ee26:	e77a      	b.n	ed1e <dir_next+0x16>
    ee28:	fffffb79 	.word	0xfffffb79
    ee2c:	fffffe45 	.word	0xfffffe45
    ee30:	fffffa69 	.word	0xfffffa69
    ee34:	fffff3cd 	.word	0xfffff3cd
    ee38:	fffff407 	.word	0xfffff407
    ee3c:	fffffa2f 	.word	0xfffffa2f
    ee40:	fffff3c7 	.word	0xfffff3c7

0000ee44 <dir_find>:
{
    ee44:	b570      	push	{r4, r5, r6, lr}
    ee46:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    ee48:	2100      	movs	r1, #0
    ee4a:	4b13      	ldr	r3, [pc, #76]	; (ee98 <dir_find+0x54>)
    ee4c:	447b      	add	r3, pc
    ee4e:	4798      	blx	r3
    ee50:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
    ee52:	d008      	beq.n	ee66 <dir_find+0x22>
}
    ee54:	0020      	movs	r0, r4
    ee56:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dj, 0);		/* Next entry */
    ee58:	2100      	movs	r1, #0
    ee5a:	0028      	movs	r0, r5
    ee5c:	4b0f      	ldr	r3, [pc, #60]	; (ee9c <dir_find+0x58>)
    ee5e:	447b      	add	r3, pc
    ee60:	4798      	blx	r3
    ee62:	1e04      	subs	r4, r0, #0
	} while (res == FR_OK);
    ee64:	d1f6      	bne.n	ee54 <dir_find+0x10>
		res = move_window(dj->fs, dj->sect);
    ee66:	6929      	ldr	r1, [r5, #16]
    ee68:	6828      	ldr	r0, [r5, #0]
    ee6a:	4b0d      	ldr	r3, [pc, #52]	; (eea0 <dir_find+0x5c>)
    ee6c:	447b      	add	r3, pc
    ee6e:	4798      	blx	r3
    ee70:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    ee72:	d1ef      	bne.n	ee54 <dir_find+0x10>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    ee74:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
    ee76:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d00a      	beq.n	ee92 <dir_find+0x4e>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    ee7c:	7ac3      	ldrb	r3, [r0, #11]
    ee7e:	071b      	lsls	r3, r3, #28
    ee80:	d4ea      	bmi.n	ee58 <dir_find+0x14>
    ee82:	220b      	movs	r2, #11
    ee84:	69a9      	ldr	r1, [r5, #24]
    ee86:	4b07      	ldr	r3, [pc, #28]	; (eea4 <dir_find+0x60>)
    ee88:	447b      	add	r3, pc
    ee8a:	4798      	blx	r3
    ee8c:	2800      	cmp	r0, #0
    ee8e:	d1e3      	bne.n	ee58 <dir_find+0x14>
    ee90:	e7e0      	b.n	ee54 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ee92:	2404      	movs	r4, #4
    ee94:	e7de      	b.n	ee54 <dir_find+0x10>
    ee96:	46c0      	nop			; (mov r8, r8)
    ee98:	fffffba9 	.word	0xfffffba9
    ee9c:	fffffea7 	.word	0xfffffea7
    eea0:	fffff9a5 	.word	0xfffff9a5
    eea4:	fffff311 	.word	0xfffff311

0000eea8 <follow_path>:
{
    eea8:	b510      	push	{r4, lr}
    eeaa:	b082      	sub	sp, #8
    eeac:	0004      	movs	r4, r0
    eeae:	9101      	str	r1, [sp, #4]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    eeb0:	780b      	ldrb	r3, [r1, #0]
    eeb2:	2b2f      	cmp	r3, #47	; 0x2f
    eeb4:	d028      	beq.n	ef08 <follow_path+0x60>
    eeb6:	2b5c      	cmp	r3, #92	; 0x5c
    eeb8:	d026      	beq.n	ef08 <follow_path+0x60>
	dj->sclust = 0;						/* Start from the root dir */
    eeba:	2300      	movs	r3, #0
    eebc:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    eebe:	9b01      	ldr	r3, [sp, #4]
    eec0:	781b      	ldrb	r3, [r3, #0]
    eec2:	2b1f      	cmp	r3, #31
    eec4:	d923      	bls.n	ef0e <follow_path+0x66>
			res = create_name(dj, &path);	/* Get a segment */
    eec6:	a901      	add	r1, sp, #4
    eec8:	0020      	movs	r0, r4
    eeca:	4b19      	ldr	r3, [pc, #100]	; (ef30 <follow_path+0x88>)
    eecc:	447b      	add	r3, pc
    eece:	4798      	blx	r3
			if (res != FR_OK) break;
    eed0:	2800      	cmp	r0, #0
    eed2:	d123      	bne.n	ef1c <follow_path+0x74>
			res = dir_find(dj);				/* Find it */
    eed4:	0020      	movs	r0, r4
    eed6:	4b17      	ldr	r3, [pc, #92]	; (ef34 <follow_path+0x8c>)
    eed8:	447b      	add	r3, pc
    eeda:	4798      	blx	r3
			ns = *(dj->fn+NS);
    eedc:	69a3      	ldr	r3, [r4, #24]
    eede:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    eee0:	2800      	cmp	r0, #0
    eee2:	d11d      	bne.n	ef20 <follow_path+0x78>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    eee4:	075b      	lsls	r3, r3, #29
    eee6:	d419      	bmi.n	ef1c <follow_path+0x74>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    eee8:	6962      	ldr	r2, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    eeea:	7ad3      	ldrb	r3, [r2, #11]
    eeec:	06db      	lsls	r3, r3, #27
    eeee:	d51d      	bpl.n	ef2c <follow_path+0x84>
			dj->sclust = LD_CLUST(dir);
    eef0:	7d51      	ldrb	r1, [r2, #21]
    eef2:	0209      	lsls	r1, r1, #8
    eef4:	7d13      	ldrb	r3, [r2, #20]
    eef6:	430b      	orrs	r3, r1
    eef8:	041b      	lsls	r3, r3, #16
    eefa:	7ed1      	ldrb	r1, [r2, #27]
    eefc:	0209      	lsls	r1, r1, #8
    eefe:	7e92      	ldrb	r2, [r2, #26]
    ef00:	430a      	orrs	r2, r1
    ef02:	4313      	orrs	r3, r2
    ef04:	60a3      	str	r3, [r4, #8]
			res = create_name(dj, &path);	/* Get a segment */
    ef06:	e7de      	b.n	eec6 <follow_path+0x1e>
		path++;
    ef08:	3101      	adds	r1, #1
    ef0a:	9101      	str	r1, [sp, #4]
    ef0c:	e7d5      	b.n	eeba <follow_path+0x12>
		res = dir_sdi(dj, 0);
    ef0e:	2100      	movs	r1, #0
    ef10:	0020      	movs	r0, r4
    ef12:	4b09      	ldr	r3, [pc, #36]	; (ef38 <follow_path+0x90>)
    ef14:	447b      	add	r3, pc
    ef16:	4798      	blx	r3
		dj->dir = 0;
    ef18:	2300      	movs	r3, #0
    ef1a:	6163      	str	r3, [r4, #20]
}
    ef1c:	b002      	add	sp, #8
    ef1e:	bd10      	pop	{r4, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    ef20:	2804      	cmp	r0, #4
    ef22:	d1fb      	bne.n	ef1c <follow_path+0x74>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    ef24:	075b      	lsls	r3, r3, #29
    ef26:	d4f9      	bmi.n	ef1c <follow_path+0x74>
    ef28:	2005      	movs	r0, #5
    ef2a:	e7f7      	b.n	ef1c <follow_path+0x74>
				res = FR_NO_PATH; break;
    ef2c:	2005      	movs	r0, #5
    ef2e:	e7f5      	b.n	ef1c <follow_path+0x74>
    ef30:	fffff31d 	.word	0xfffff31d
    ef34:	ffffff69 	.word	0xffffff69
    ef38:	fffffae1 	.word	0xfffffae1

0000ef3c <dir_register>:
{
    ef3c:	b570      	push	{r4, r5, r6, lr}
    ef3e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);
    ef40:	2100      	movs	r1, #0
    ef42:	4b1a      	ldr	r3, [pc, #104]	; (efac <dir_register+0x70>)
    ef44:	447b      	add	r3, pc
    ef46:	4798      	blx	r3
    ef48:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    ef4a:	d113      	bne.n	ef74 <dir_register+0x38>
			res = move_window(dj->fs, dj->sect);
    ef4c:	6929      	ldr	r1, [r5, #16]
    ef4e:	6828      	ldr	r0, [r5, #0]
    ef50:	4b17      	ldr	r3, [pc, #92]	; (efb0 <dir_register+0x74>)
    ef52:	447b      	add	r3, pc
    ef54:	4798      	blx	r3
    ef56:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    ef58:	d10c      	bne.n	ef74 <dir_register+0x38>
			c = *dj->dir;
    ef5a:	696b      	ldr	r3, [r5, #20]
    ef5c:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    ef5e:	2be5      	cmp	r3, #229	; 0xe5
    ef60:	d008      	beq.n	ef74 <dir_register+0x38>
    ef62:	2b00      	cmp	r3, #0
    ef64:	d006      	beq.n	ef74 <dir_register+0x38>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    ef66:	2101      	movs	r1, #1
    ef68:	0028      	movs	r0, r5
    ef6a:	4b12      	ldr	r3, [pc, #72]	; (efb4 <dir_register+0x78>)
    ef6c:	447b      	add	r3, pc
    ef6e:	4798      	blx	r3
    ef70:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
    ef72:	d0eb      	beq.n	ef4c <dir_register+0x10>
	if (res == FR_OK) {		/* Initialize the SFN entry */
    ef74:	2c00      	cmp	r4, #0
    ef76:	d001      	beq.n	ef7c <dir_register+0x40>
}
    ef78:	0020      	movs	r0, r4
    ef7a:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(dj->fs, dj->sect);
    ef7c:	6929      	ldr	r1, [r5, #16]
    ef7e:	6828      	ldr	r0, [r5, #0]
    ef80:	4b0d      	ldr	r3, [pc, #52]	; (efb8 <dir_register+0x7c>)
    ef82:	447b      	add	r3, pc
    ef84:	4798      	blx	r3
    ef86:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    ef88:	d1f6      	bne.n	ef78 <dir_register+0x3c>
			dir = dj->dir;
    ef8a:	696e      	ldr	r6, [r5, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    ef8c:	2220      	movs	r2, #32
    ef8e:	2100      	movs	r1, #0
    ef90:	0030      	movs	r0, r6
    ef92:	4b0a      	ldr	r3, [pc, #40]	; (efbc <dir_register+0x80>)
    ef94:	447b      	add	r3, pc
    ef96:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    ef98:	220b      	movs	r2, #11
    ef9a:	69a9      	ldr	r1, [r5, #24]
    ef9c:	0030      	movs	r0, r6
    ef9e:	4b08      	ldr	r3, [pc, #32]	; (efc0 <dir_register+0x84>)
    efa0:	447b      	add	r3, pc
    efa2:	4798      	blx	r3
			dj->fs->wflag = 1;
    efa4:	682b      	ldr	r3, [r5, #0]
    efa6:	2201      	movs	r2, #1
    efa8:	711a      	strb	r2, [r3, #4]
    efaa:	e7e5      	b.n	ef78 <dir_register+0x3c>
    efac:	fffffab1 	.word	0xfffffab1
    efb0:	fffff8bf 	.word	0xfffff8bf
    efb4:	fffffd99 	.word	0xfffffd99
    efb8:	fffff88f 	.word	0xfffff88f
    efbc:	fffff1f5 	.word	0xfffff1f5
    efc0:	fffff1d5 	.word	0xfffff1d5

0000efc4 <sync>:
{
    efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    efc6:	46c6      	mov	lr, r8
    efc8:	b500      	push	{lr}
    efca:	b082      	sub	sp, #8
    efcc:	0005      	movs	r5, r0
    efce:	4e35      	ldr	r6, [pc, #212]	; (f0a4 <sync+0xe0>)
    efd0:	447e      	add	r6, pc
	res = move_window(fs, 0);
    efd2:	2100      	movs	r1, #0
    efd4:	4b34      	ldr	r3, [pc, #208]	; (f0a8 <sync+0xe4>)
    efd6:	447b      	add	r3, pc
    efd8:	4798      	blx	r3
    efda:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    efdc:	d10c      	bne.n	eff8 <sync+0x34>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    efde:	782b      	ldrb	r3, [r5, #0]
    efe0:	2b03      	cmp	r3, #3
    efe2:	d00e      	beq.n	f002 <sync+0x3e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    efe4:	7868      	ldrb	r0, [r5, #1]
    efe6:	2200      	movs	r2, #0
    efe8:	2100      	movs	r1, #0
    efea:	4b30      	ldr	r3, [pc, #192]	; (f0ac <sync+0xe8>)
    efec:	58f3      	ldr	r3, [r6, r3]
    efee:	9301      	str	r3, [sp, #4]
    eff0:	4798      	blx	r3
    eff2:	2800      	cmp	r0, #0
    eff4:	d000      	beq.n	eff8 <sync+0x34>
			res = FR_DISK_ERR;
    eff6:	2401      	movs	r4, #1
}
    eff8:	0020      	movs	r0, r4
    effa:	b002      	add	sp, #8
    effc:	bc04      	pop	{r2}
    effe:	4690      	mov	r8, r2
    f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    f002:	796b      	ldrb	r3, [r5, #5]
    f004:	2b00      	cmp	r3, #0
    f006:	d0ed      	beq.n	efe4 <sync+0x20>
			fs->winsect = 0;
    f008:	2300      	movs	r3, #0
    f00a:	4698      	mov	r8, r3
    f00c:	62eb      	str	r3, [r5, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    f00e:	002f      	movs	r7, r5
    f010:	3730      	adds	r7, #48	; 0x30
    f012:	2280      	movs	r2, #128	; 0x80
    f014:	0092      	lsls	r2, r2, #2
    f016:	2100      	movs	r1, #0
    f018:	0038      	movs	r0, r7
    f01a:	4b25      	ldr	r3, [pc, #148]	; (f0b0 <sync+0xec>)
    f01c:	447b      	add	r3, pc
    f01e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    f020:	2255      	movs	r2, #85	; 0x55
    f022:	4b24      	ldr	r3, [pc, #144]	; (f0b4 <sync+0xf0>)
    f024:	54ea      	strb	r2, [r5, r3]
    f026:	3255      	adds	r2, #85	; 0x55
    f028:	4b23      	ldr	r3, [pc, #140]	; (f0b8 <sync+0xf4>)
    f02a:	54ea      	strb	r2, [r5, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    f02c:	3bde      	subs	r3, #222	; 0xde
    f02e:	3bff      	subs	r3, #255	; 0xff
    f030:	3a7a      	subs	r2, #122	; 0x7a
    f032:	54ab      	strb	r3, [r5, r2]
    f034:	3201      	adds	r2, #1
    f036:	54ab      	strb	r3, [r5, r2]
    f038:	330f      	adds	r3, #15
    f03a:	3201      	adds	r2, #1
    f03c:	54ab      	strb	r3, [r5, r2]
    f03e:	320f      	adds	r2, #15
    f040:	2133      	movs	r1, #51	; 0x33
    f042:	546a      	strb	r2, [r5, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    f044:	313f      	adds	r1, #63	; 0x3f
    f046:	2085      	movs	r0, #133	; 0x85
    f048:	0080      	lsls	r0, r0, #2
    f04a:	5429      	strb	r1, [r5, r0]
    f04c:	481b      	ldr	r0, [pc, #108]	; (f0bc <sync+0xf8>)
    f04e:	5429      	strb	r1, [r5, r0]
    f050:	491b      	ldr	r1, [pc, #108]	; (f0c0 <sync+0xfc>)
    f052:	546a      	strb	r2, [r5, r1]
    f054:	4a1b      	ldr	r2, [pc, #108]	; (f0c4 <sync+0x100>)
    f056:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    f058:	692b      	ldr	r3, [r5, #16]
    f05a:	3201      	adds	r2, #1
    f05c:	54ab      	strb	r3, [r5, r2]
    f05e:	b29a      	uxth	r2, r3
    f060:	0a12      	lsrs	r2, r2, #8
    f062:	4919      	ldr	r1, [pc, #100]	; (f0c8 <sync+0x104>)
    f064:	546a      	strb	r2, [r5, r1]
    f066:	0c19      	lsrs	r1, r3, #16
    f068:	4a18      	ldr	r2, [pc, #96]	; (f0cc <sync+0x108>)
    f06a:	54a9      	strb	r1, [r5, r2]
    f06c:	0e1b      	lsrs	r3, r3, #24
    f06e:	4a18      	ldr	r2, [pc, #96]	; (f0d0 <sync+0x10c>)
    f070:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    f072:	68eb      	ldr	r3, [r5, #12]
    f074:	3201      	adds	r2, #1
    f076:	54ab      	strb	r3, [r5, r2]
    f078:	b29a      	uxth	r2, r3
    f07a:	0a12      	lsrs	r2, r2, #8
    f07c:	4915      	ldr	r1, [pc, #84]	; (f0d4 <sync+0x110>)
    f07e:	546a      	strb	r2, [r5, r1]
    f080:	0c19      	lsrs	r1, r3, #16
    f082:	4a15      	ldr	r2, [pc, #84]	; (f0d8 <sync+0x114>)
    f084:	54a9      	strb	r1, [r5, r2]
    f086:	0e1b      	lsrs	r3, r3, #24
    f088:	4a14      	ldr	r2, [pc, #80]	; (f0dc <sync+0x118>)
    f08a:	54ab      	strb	r3, [r5, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    f08c:	7868      	ldrb	r0, [r5, #1]
    f08e:	2301      	movs	r3, #1
    f090:	696a      	ldr	r2, [r5, #20]
    f092:	0039      	movs	r1, r7
    f094:	4f12      	ldr	r7, [pc, #72]	; (f0e0 <sync+0x11c>)
    f096:	59f7      	ldr	r7, [r6, r7]
    f098:	9701      	str	r7, [sp, #4]
    f09a:	47b8      	blx	r7
			fs->fsi_flag = 0;
    f09c:	4643      	mov	r3, r8
    f09e:	716b      	strb	r3, [r5, #5]
    f0a0:	e7a0      	b.n	efe4 <sync+0x20>
    f0a2:	46c0      	nop			; (mov r8, r8)
    f0a4:	000039bc 	.word	0x000039bc
    f0a8:	fffff83b 	.word	0xfffff83b
    f0ac:	00000158 	.word	0x00000158
    f0b0:	fffff16d 	.word	0xfffff16d
    f0b4:	0000022e 	.word	0x0000022e
    f0b8:	0000022f 	.word	0x0000022f
    f0bc:	00000215 	.word	0x00000215
    f0c0:	00000216 	.word	0x00000216
    f0c4:	00000217 	.word	0x00000217
    f0c8:	00000219 	.word	0x00000219
    f0cc:	0000021a 	.word	0x0000021a
    f0d0:	0000021b 	.word	0x0000021b
    f0d4:	0000021d 	.word	0x0000021d
    f0d8:	0000021e 	.word	0x0000021e
    f0dc:	0000021f 	.word	0x0000021f
    f0e0:	00000444 	.word	0x00000444

0000f0e4 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    f0e4:	2800      	cmp	r0, #0
    f0e6:	d001      	beq.n	f0ec <f_mount+0x8>
		return FR_INVALID_DRIVE;
    f0e8:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    f0ea:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    f0ec:	0083      	lsls	r3, r0, #2
    f0ee:	4a08      	ldr	r2, [pc, #32]	; (f110 <f_mount+0x2c>)
    f0f0:	447a      	add	r2, pc
    f0f2:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d001      	beq.n	f0fc <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    f0f8:	2200      	movs	r2, #0
    f0fa:	701a      	strb	r2, [r3, #0]
	if (fs) {
    f0fc:	2900      	cmp	r1, #0
    f0fe:	d001      	beq.n	f104 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    f100:	2300      	movs	r3, #0
    f102:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    f104:	0080      	lsls	r0, r0, #2
    f106:	4b03      	ldr	r3, [pc, #12]	; (f114 <f_mount+0x30>)
    f108:	447b      	add	r3, pc
    f10a:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    f10c:	2000      	movs	r0, #0
    f10e:	e7ec      	b.n	f0ea <f_mount+0x6>
    f110:	1fff1ad4 	.word	0x1fff1ad4
    f114:	1fff1abc 	.word	0x1fff1abc

0000f118 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    f118:	b5f0      	push	{r4, r5, r6, r7, lr}
    f11a:	46ce      	mov	lr, r9
    f11c:	4647      	mov	r7, r8
    f11e:	b580      	push	{r7, lr}
    f120:	b08d      	sub	sp, #52	; 0x34
    f122:	0006      	movs	r6, r0
    f124:	9101      	str	r1, [sp, #4]
    f126:	4690      	mov	r8, r2
    f128:	4b60      	ldr	r3, [pc, #384]	; (f2ac <f_open+0x194>)
    f12a:	447b      	add	r3, pc
    f12c:	4699      	mov	r9, r3
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    f12e:	2300      	movs	r3, #0
    f130:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    f132:	271f      	movs	r7, #31
    f134:	0013      	movs	r3, r2
    f136:	4017      	ands	r7, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    f138:	221e      	movs	r2, #30
    f13a:	401a      	ands	r2, r3
    f13c:	ad05      	add	r5, sp, #20
    f13e:	0029      	movs	r1, r5
    f140:	a801      	add	r0, sp, #4
    f142:	4b5b      	ldr	r3, [pc, #364]	; (f2b0 <f_open+0x198>)
    f144:	447b      	add	r3, pc
    f146:	4798      	blx	r3
    f148:	0004      	movs	r4, r0
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    f14a:	ab02      	add	r3, sp, #8
    f14c:	61ab      	str	r3, [r5, #24]
	if (res == FR_OK)
    f14e:	2800      	cmp	r0, #0
    f150:	d046      	beq.n	f1e0 <f_open+0xc8>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    f152:	9d0a      	ldr	r5, [sp, #40]	; 0x28

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    f154:	2c00      	cmp	r4, #0
    f156:	d101      	bne.n	f15c <f_open+0x44>
		if (!dir)	/* Current dir itself */
    f158:	2d00      	cmp	r5, #0
    f15a:	d048      	beq.n	f1ee <f_open+0xd6>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    f15c:	231c      	movs	r3, #28
    f15e:	4642      	mov	r2, r8
    f160:	4213      	tst	r3, r2
    f162:	d100      	bne.n	f166 <f_open+0x4e>
    f164:	e091      	b.n	f28a <f_open+0x172>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    f166:	2c00      	cmp	r4, #0
    f168:	d049      	beq.n	f1fe <f_open+0xe6>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    f16a:	2c04      	cmp	r4, #4
    f16c:	d041      	beq.n	f1f2 <f_open+0xda>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    f16e:	2308      	movs	r3, #8
    f170:	431f      	orrs	r7, r3
    f172:	b2ff      	uxtb	r7, r7
			dir = dj.dir;					/* New entry */
    f174:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    f176:	2c00      	cmp	r4, #0
    f178:	d101      	bne.n	f17e <f_open+0x66>
    f17a:	073b      	lsls	r3, r7, #28
    f17c:	d44a      	bmi.n	f214 <f_open+0xfc>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    f17e:	2c00      	cmp	r4, #0
    f180:	d108      	bne.n	f194 <f_open+0x7c>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    f182:	073b      	lsls	r3, r7, #28
    f184:	d502      	bpl.n	f18c <f_open+0x74>
			mode |= FA__WRITTEN;
    f186:	2320      	movs	r3, #32
    f188:	431f      	orrs	r7, r3
    f18a:	b2ff      	uxtb	r7, r7
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    f18c:	9b05      	ldr	r3, [sp, #20]
    f18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f190:	61f3      	str	r3, [r6, #28]
		fp->dir_ptr = dir;
    f192:	6235      	str	r5, [r6, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    f194:	2c00      	cmp	r4, #0
    f196:	d11d      	bne.n	f1d4 <f_open+0xbc>
		fp->flag = mode;					/* File access mode */
    f198:	71b7      	strb	r7, [r6, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    f19a:	7d6a      	ldrb	r2, [r5, #21]
    f19c:	0212      	lsls	r2, r2, #8
    f19e:	7d2b      	ldrb	r3, [r5, #20]
    f1a0:	4313      	orrs	r3, r2
    f1a2:	041b      	lsls	r3, r3, #16
    f1a4:	7ee9      	ldrb	r1, [r5, #27]
    f1a6:	0209      	lsls	r1, r1, #8
    f1a8:	7eaa      	ldrb	r2, [r5, #26]
    f1aa:	430a      	orrs	r2, r1
    f1ac:	4313      	orrs	r3, r2
    f1ae:	6133      	str	r3, [r6, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    f1b0:	7feb      	ldrb	r3, [r5, #31]
    f1b2:	061b      	lsls	r3, r3, #24
    f1b4:	7faa      	ldrb	r2, [r5, #30]
    f1b6:	0412      	lsls	r2, r2, #16
    f1b8:	4313      	orrs	r3, r2
    f1ba:	7f6a      	ldrb	r2, [r5, #29]
    f1bc:	0212      	lsls	r2, r2, #8
    f1be:	4313      	orrs	r3, r2
    f1c0:	7f2a      	ldrb	r2, [r5, #28]
    f1c2:	4313      	orrs	r3, r2
    f1c4:	60f3      	str	r3, [r6, #12]
		fp->fptr = 0;						/* File pointer */
    f1c6:	2300      	movs	r3, #0
    f1c8:	60b3      	str	r3, [r6, #8]
		fp->dsect = 0;
    f1ca:	61b3      	str	r3, [r6, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    f1cc:	9b05      	ldr	r3, [sp, #20]
    f1ce:	6033      	str	r3, [r6, #0]
    f1d0:	88db      	ldrh	r3, [r3, #6]
    f1d2:	80b3      	strh	r3, [r6, #4]
	}

	LEAVE_FF(dj.fs, res);
}
    f1d4:	0020      	movs	r0, r4
    f1d6:	b00d      	add	sp, #52	; 0x34
    f1d8:	bc0c      	pop	{r2, r3}
    f1da:	4690      	mov	r8, r2
    f1dc:	4699      	mov	r9, r3
    f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
    f1e0:	9901      	ldr	r1, [sp, #4]
    f1e2:	a805      	add	r0, sp, #20
    f1e4:	4b33      	ldr	r3, [pc, #204]	; (f2b4 <f_open+0x19c>)
    f1e6:	447b      	add	r3, pc
    f1e8:	4798      	blx	r3
    f1ea:	0004      	movs	r4, r0
    f1ec:	e7b1      	b.n	f152 <f_open+0x3a>
			res = FR_INVALID_NAME;
    f1ee:	3406      	adds	r4, #6
    f1f0:	e7b4      	b.n	f15c <f_open+0x44>
				res = dir_register(&dj);
    f1f2:	a805      	add	r0, sp, #20
    f1f4:	4b30      	ldr	r3, [pc, #192]	; (f2b8 <f_open+0x1a0>)
    f1f6:	447b      	add	r3, pc
    f1f8:	4798      	blx	r3
    f1fa:	0004      	movs	r4, r0
    f1fc:	e7b7      	b.n	f16e <f_open+0x56>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    f1fe:	7aeb      	ldrb	r3, [r5, #11]
    f200:	2211      	movs	r2, #17
    f202:	421a      	tst	r2, r3
    f204:	d104      	bne.n	f210 <f_open+0xf8>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    f206:	4643      	mov	r3, r8
    f208:	075b      	lsls	r3, r3, #29
    f20a:	d5b4      	bpl.n	f176 <f_open+0x5e>
					res = FR_EXIST;
    f20c:	2408      	movs	r4, #8
    f20e:	e7b2      	b.n	f176 <f_open+0x5e>
				res = FR_DENIED;
    f210:	2407      	movs	r4, #7
    f212:	e7b0      	b.n	f176 <f_open+0x5e>
			dw = get_fattime();					/* Created time */
    f214:	4b29      	ldr	r3, [pc, #164]	; (f2bc <f_open+0x1a4>)
    f216:	464a      	mov	r2, r9
    f218:	58d3      	ldr	r3, [r2, r3]
    f21a:	9300      	str	r3, [sp, #0]
    f21c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    f21e:	73a8      	strb	r0, [r5, #14]
    f220:	b283      	uxth	r3, r0
    f222:	0a1b      	lsrs	r3, r3, #8
    f224:	73eb      	strb	r3, [r5, #15]
    f226:	0c03      	lsrs	r3, r0, #16
    f228:	742b      	strb	r3, [r5, #16]
    f22a:	0e00      	lsrs	r0, r0, #24
    f22c:	7468      	strb	r0, [r5, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    f22e:	2300      	movs	r3, #0
    f230:	72eb      	strb	r3, [r5, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    f232:	772b      	strb	r3, [r5, #28]
    f234:	776b      	strb	r3, [r5, #29]
    f236:	77ab      	strb	r3, [r5, #30]
    f238:	77eb      	strb	r3, [r5, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    f23a:	7d69      	ldrb	r1, [r5, #21]
    f23c:	0209      	lsls	r1, r1, #8
    f23e:	7d2a      	ldrb	r2, [r5, #20]
    f240:	430a      	orrs	r2, r1
    f242:	0412      	lsls	r2, r2, #16
    f244:	7ee8      	ldrb	r0, [r5, #27]
    f246:	0200      	lsls	r0, r0, #8
    f248:	7ea9      	ldrb	r1, [r5, #26]
    f24a:	4301      	orrs	r1, r0
    f24c:	430a      	orrs	r2, r1
    f24e:	4690      	mov	r8, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    f250:	76ab      	strb	r3, [r5, #26]
    f252:	76eb      	strb	r3, [r5, #27]
    f254:	752b      	strb	r3, [r5, #20]
    f256:	756b      	strb	r3, [r5, #21]
			dj.fs->wflag = 1;
    f258:	9805      	ldr	r0, [sp, #20]
    f25a:	3301      	adds	r3, #1
    f25c:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    f25e:	2a00      	cmp	r2, #0
    f260:	d100      	bne.n	f264 <f_open+0x14c>
    f262:	e78c      	b.n	f17e <f_open+0x66>
				dw = dj.fs->winsect;
    f264:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    f266:	4699      	mov	r9, r3
				res = remove_chain(dj.fs, cl);
    f268:	0011      	movs	r1, r2
    f26a:	4b15      	ldr	r3, [pc, #84]	; (f2c0 <f_open+0x1a8>)
    f26c:	447b      	add	r3, pc
    f26e:	4798      	blx	r3
    f270:	1e04      	subs	r4, r0, #0
				if (res == FR_OK) {
    f272:	d000      	beq.n	f276 <f_open+0x15e>
    f274:	e783      	b.n	f17e <f_open+0x66>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    f276:	9805      	ldr	r0, [sp, #20]
    f278:	4643      	mov	r3, r8
    f27a:	3b01      	subs	r3, #1
    f27c:	60c3      	str	r3, [r0, #12]
					res = move_window(dj.fs, dw);
    f27e:	4649      	mov	r1, r9
    f280:	4b10      	ldr	r3, [pc, #64]	; (f2c4 <f_open+0x1ac>)
    f282:	447b      	add	r3, pc
    f284:	4798      	blx	r3
    f286:	0004      	movs	r4, r0
    f288:	e779      	b.n	f17e <f_open+0x66>
		if (res == FR_OK) {						/* Follow succeeded */
    f28a:	2c00      	cmp	r4, #0
    f28c:	d000      	beq.n	f290 <f_open+0x178>
    f28e:	e776      	b.n	f17e <f_open+0x66>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    f290:	7aeb      	ldrb	r3, [r5, #11]
    f292:	06da      	lsls	r2, r3, #27
    f294:	d501      	bpl.n	f29a <f_open+0x182>
				res = FR_NO_FILE;
    f296:	2404      	movs	r4, #4
    f298:	e771      	b.n	f17e <f_open+0x66>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    f29a:	4642      	mov	r2, r8
    f29c:	0792      	lsls	r2, r2, #30
    f29e:	d400      	bmi.n	f2a2 <f_open+0x18a>
    f2a0:	e76d      	b.n	f17e <f_open+0x66>
    f2a2:	07db      	lsls	r3, r3, #31
    f2a4:	d400      	bmi.n	f2a8 <f_open+0x190>
    f2a6:	e76a      	b.n	f17e <f_open+0x66>
					res = FR_DENIED;
    f2a8:	2407      	movs	r4, #7
    f2aa:	e768      	b.n	f17e <f_open+0x66>
    f2ac:	00003862 	.word	0x00003862
    f2b0:	fffff2d5 	.word	0xfffff2d5
    f2b4:	fffffcbf 	.word	0xfffffcbf
    f2b8:	fffffd43 	.word	0xfffffd43
    f2bc:	000002fc 	.word	0x000002fc
    f2c0:	fffffa2d 	.word	0xfffffa2d
    f2c4:	fffff58f 	.word	0xfffff58f

0000f2c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    f2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ca:	46de      	mov	lr, fp
    f2cc:	4657      	mov	r7, sl
    f2ce:	464e      	mov	r6, r9
    f2d0:	4645      	mov	r5, r8
    f2d2:	b5e0      	push	{r5, r6, r7, lr}
    f2d4:	b085      	sub	sp, #20
    f2d6:	0004      	movs	r4, r0
    f2d8:	000d      	movs	r5, r1
    f2da:	0017      	movs	r7, r2
    f2dc:	001a      	movs	r2, r3
    f2de:	9301      	str	r3, [sp, #4]
    f2e0:	4b88      	ldr	r3, [pc, #544]	; (f504 <f_write+0x23c>)
    f2e2:	447b      	add	r3, pc
    f2e4:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    f2e6:	2300      	movs	r3, #0
    f2e8:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    f2ea:	8881      	ldrh	r1, [r0, #4]
    f2ec:	6800      	ldr	r0, [r0, #0]
    f2ee:	4b86      	ldr	r3, [pc, #536]	; (f508 <f_write+0x240>)
    f2f0:	447b      	add	r3, pc
    f2f2:	4798      	blx	r3
    f2f4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    f2f6:	2800      	cmp	r0, #0
    f2f8:	d000      	beq.n	f2fc <f_write+0x34>
    f2fa:	e0fb      	b.n	f4f4 <f_write+0x22c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    f2fc:	79a3      	ldrb	r3, [r4, #6]
    f2fe:	b25a      	sxtb	r2, r3
    f300:	2a00      	cmp	r2, #0
    f302:	da00      	bge.n	f306 <f_write+0x3e>
    f304:	e0f4      	b.n	f4f0 <f_write+0x228>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    f306:	079b      	lsls	r3, r3, #30
    f308:	d402      	bmi.n	f310 <f_write+0x48>
		LEAVE_FF(fp->fs, FR_DENIED);
    f30a:	2307      	movs	r3, #7
    f30c:	9300      	str	r3, [sp, #0]
    f30e:	e0f1      	b.n	f4f4 <f_write+0x22c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    f310:	68e3      	ldr	r3, [r4, #12]
    f312:	19da      	adds	r2, r3, r7
    f314:	4293      	cmp	r3, r2
    f316:	d900      	bls.n	f31a <f_write+0x52>
    f318:	2700      	movs	r7, #0
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
		if (wcnt > btw) wcnt = btw;
    f31a:	46a8      	mov	r8, r5
    f31c:	e078      	b.n	f410 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    f31e:	4b7b      	ldr	r3, [pc, #492]	; (f50c <f_write+0x244>)
    f320:	447b      	add	r3, pc
    f322:	4798      	blx	r3
    f324:	0003      	movs	r3, r0
    f326:	6120      	str	r0, [r4, #16]
    f328:	e086      	b.n	f438 <f_write+0x170>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    f32a:	6961      	ldr	r1, [r4, #20]
    f32c:	4b78      	ldr	r3, [pc, #480]	; (f510 <f_write+0x248>)
    f32e:	447b      	add	r3, pc
    f330:	4798      	blx	r3
    f332:	0003      	movs	r3, r0
    f334:	e080      	b.n	f438 <f_write+0x170>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    f336:	79a2      	ldrb	r2, [r4, #6]
    f338:	3b81      	subs	r3, #129	; 0x81
    f33a:	4313      	orrs	r3, r2
    f33c:	71a3      	strb	r3, [r4, #6]
    f33e:	2302      	movs	r3, #2
    f340:	9300      	str	r3, [sp, #0]
    f342:	e0d7      	b.n	f4f4 <f_write+0x22c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    f344:	79a2      	ldrb	r2, [r4, #6]
    f346:	3b7f      	subs	r3, #127	; 0x7f
    f348:	4313      	orrs	r3, r2
    f34a:	71a3      	strb	r3, [r4, #6]
    f34c:	2301      	movs	r3, #1
    f34e:	9300      	str	r3, [sp, #0]
    f350:	e0d0      	b.n	f4f4 <f_write+0x22c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    f352:	0021      	movs	r1, r4
    f354:	3124      	adds	r1, #36	; 0x24
    f356:	6823      	ldr	r3, [r4, #0]
    f358:	7858      	ldrb	r0, [r3, #1]
    f35a:	2301      	movs	r3, #1
    f35c:	69a2      	ldr	r2, [r4, #24]
    f35e:	4d6d      	ldr	r5, [pc, #436]	; (f514 <f_write+0x24c>)
    f360:	465e      	mov	r6, fp
    f362:	5975      	ldr	r5, [r6, r5]
    f364:	9502      	str	r5, [sp, #8]
    f366:	47a8      	blx	r5
    f368:	2800      	cmp	r0, #0
    f36a:	d104      	bne.n	f376 <f_write+0xae>
				fp->flag &= ~FA__DIRTY;
    f36c:	79a3      	ldrb	r3, [r4, #6]
    f36e:	2240      	movs	r2, #64	; 0x40
    f370:	4393      	bics	r3, r2
    f372:	71a3      	strb	r3, [r4, #6]
    f374:	e06d      	b.n	f452 <f_write+0x18a>
					ABORT(fp->fs, FR_DISK_ERR);
    f376:	79a2      	ldrb	r2, [r4, #6]
    f378:	2380      	movs	r3, #128	; 0x80
    f37a:	425b      	negs	r3, r3
    f37c:	4313      	orrs	r3, r2
    f37e:	71a3      	strb	r3, [r4, #6]
    f380:	2301      	movs	r3, #1
    f382:	9300      	str	r3, [sp, #0]
    f384:	e0b6      	b.n	f4f4 <f_write+0x22c>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    f386:	79a2      	ldrb	r2, [r4, #6]
    f388:	2380      	movs	r3, #128	; 0x80
    f38a:	425b      	negs	r3, r3
    f38c:	4313      	orrs	r3, r2
    f38e:	71a3      	strb	r3, [r4, #6]
    f390:	2302      	movs	r3, #2
    f392:	9300      	str	r3, [sp, #0]
    f394:	e0ae      	b.n	f4f4 <f_write+0x22c>
					ABORT(fp->fs, FR_DISK_ERR);
    f396:	79a2      	ldrb	r2, [r4, #6]
    f398:	2380      	movs	r3, #128	; 0x80
    f39a:	425b      	negs	r3, r3
    f39c:	4313      	orrs	r3, r2
    f39e:	71a3      	strb	r3, [r4, #6]
    f3a0:	2301      	movs	r3, #1
    f3a2:	9300      	str	r3, [sp, #0]
    f3a4:	e0a6      	b.n	f4f4 <f_write+0x22c>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    f3a6:	0020      	movs	r0, r4
    f3a8:	3024      	adds	r0, #36	; 0x24
    f3aa:	0249      	lsls	r1, r1, #9
    f3ac:	4441      	add	r1, r8
    f3ae:	2280      	movs	r2, #128	; 0x80
    f3b0:	0092      	lsls	r2, r2, #2
    f3b2:	4b59      	ldr	r3, [pc, #356]	; (f518 <f_write+0x250>)
    f3b4:	447b      	add	r3, pc
    f3b6:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
    f3b8:	79a3      	ldrb	r3, [r4, #6]
    f3ba:	2240      	movs	r2, #64	; 0x40
    f3bc:	4393      	bics	r3, r2
    f3be:	71a3      	strb	r3, [r4, #6]
    f3c0:	e074      	b.n	f4ac <f_write+0x1e4>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    f3c2:	69a3      	ldr	r3, [r4, #24]
    f3c4:	4298      	cmp	r0, r3
    f3c6:	d003      	beq.n	f3d0 <f_write+0x108>
				if (fp->fptr < fp->fsize &&
    f3c8:	68a3      	ldr	r3, [r4, #8]
    f3ca:	68e2      	ldr	r2, [r4, #12]
    f3cc:	4293      	cmp	r3, r2
    f3ce:	d370      	bcc.n	f4b2 <f_write+0x1ea>
			fp->dsect = sect;
    f3d0:	464b      	mov	r3, r9
    f3d2:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    f3d4:	68a3      	ldr	r3, [r4, #8]
    f3d6:	05d8      	lsls	r0, r3, #23
    f3d8:	0dc0      	lsrs	r0, r0, #23
    f3da:	2580      	movs	r5, #128	; 0x80
    f3dc:	00ad      	lsls	r5, r5, #2
    f3de:	1a2d      	subs	r5, r5, r0
		if (wcnt > btw) wcnt = btw;
    f3e0:	42af      	cmp	r7, r5
    f3e2:	d200      	bcs.n	f3e6 <f_write+0x11e>
    f3e4:	003d      	movs	r5, r7
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    f3e6:	3020      	adds	r0, #32
    f3e8:	1820      	adds	r0, r4, r0
    f3ea:	3004      	adds	r0, #4
    f3ec:	002a      	movs	r2, r5
    f3ee:	4641      	mov	r1, r8
    f3f0:	4b4a      	ldr	r3, [pc, #296]	; (f51c <f_write+0x254>)
    f3f2:	447b      	add	r3, pc
    f3f4:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
    f3f6:	79a3      	ldrb	r3, [r4, #6]
    f3f8:	2240      	movs	r2, #64	; 0x40
    f3fa:	4313      	orrs	r3, r2
    f3fc:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    f3fe:	44a8      	add	r8, r5
    f400:	68a3      	ldr	r3, [r4, #8]
    f402:	195b      	adds	r3, r3, r5
    f404:	60a3      	str	r3, [r4, #8]
    f406:	9a01      	ldr	r2, [sp, #4]
    f408:	6813      	ldr	r3, [r2, #0]
    f40a:	195b      	adds	r3, r3, r5
    f40c:	6013      	str	r3, [r2, #0]
    f40e:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
    f410:	2f00      	cmp	r7, #0
    f412:	d063      	beq.n	f4dc <f_write+0x214>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    f414:	68a1      	ldr	r1, [r4, #8]
    f416:	05cb      	lsls	r3, r1, #23
    f418:	d1dc      	bne.n	f3d4 <f_write+0x10c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    f41a:	0a4a      	lsrs	r2, r1, #9
    f41c:	6820      	ldr	r0, [r4, #0]
    f41e:	7883      	ldrb	r3, [r0, #2]
    f420:	3b01      	subs	r3, #1
    f422:	b2db      	uxtb	r3, r3
    f424:	401a      	ands	r2, r3
    f426:	4692      	mov	sl, r2
			if (!csect) {					/* On the cluster boundary? */
    f428:	d10f      	bne.n	f44a <f_write+0x182>
				if (fp->fptr == 0) {		/* On the top of the file? */
    f42a:	2900      	cmp	r1, #0
    f42c:	d000      	beq.n	f430 <f_write+0x168>
    f42e:	e77c      	b.n	f32a <f_write+0x62>
					clst = fp->sclust;		/* Follow from the origin */
    f430:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    f432:	2b00      	cmp	r3, #0
    f434:	d100      	bne.n	f438 <f_write+0x170>
    f436:	e772      	b.n	f31e <f_write+0x56>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    f438:	2b00      	cmp	r3, #0
    f43a:	d04f      	beq.n	f4dc <f_write+0x214>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    f43c:	2b01      	cmp	r3, #1
    f43e:	d100      	bne.n	f442 <f_write+0x17a>
    f440:	e779      	b.n	f336 <f_write+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    f442:	1c5a      	adds	r2, r3, #1
    f444:	d100      	bne.n	f448 <f_write+0x180>
    f446:	e77d      	b.n	f344 <f_write+0x7c>
				fp->clust = clst;			/* Update current cluster */
    f448:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    f44a:	79a3      	ldrb	r3, [r4, #6]
    f44c:	065b      	lsls	r3, r3, #25
    f44e:	d500      	bpl.n	f452 <f_write+0x18a>
    f450:	e77f      	b.n	f352 <f_write+0x8a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    f452:	6823      	ldr	r3, [r4, #0]
    f454:	001d      	movs	r5, r3
    f456:	6961      	ldr	r1, [r4, #20]
    f458:	0018      	movs	r0, r3
    f45a:	4b31      	ldr	r3, [pc, #196]	; (f520 <f_write+0x258>)
    f45c:	447b      	add	r3, pc
    f45e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    f460:	2800      	cmp	r0, #0
    f462:	d090      	beq.n	f386 <f_write+0xbe>
			sect += csect;
    f464:	4450      	add	r0, sl
    f466:	4681      	mov	r9, r0
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    f468:	0a7a      	lsrs	r2, r7, #9
    f46a:	9202      	str	r2, [sp, #8]
			if (cc) {						/* Write maximum contiguous sectors directly */
    f46c:	d0a9      	beq.n	f3c2 <f_write+0xfa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    f46e:	4653      	mov	r3, sl
    f470:	4694      	mov	ip, r2
    f472:	4463      	add	r3, ip
    f474:	78aa      	ldrb	r2, [r5, #2]
    f476:	4293      	cmp	r3, r2
    f478:	d902      	bls.n	f480 <f_write+0x1b8>
					cc = fp->fs->csize - csect;
    f47a:	4653      	mov	r3, sl
    f47c:	1ad3      	subs	r3, r2, r3
    f47e:	9302      	str	r3, [sp, #8]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    f480:	466b      	mov	r3, sp
    f482:	7a1b      	ldrb	r3, [r3, #8]
    f484:	7868      	ldrb	r0, [r5, #1]
    f486:	464a      	mov	r2, r9
    f488:	4641      	mov	r1, r8
    f48a:	4d22      	ldr	r5, [pc, #136]	; (f514 <f_write+0x24c>)
    f48c:	46ac      	mov	ip, r5
    f48e:	465d      	mov	r5, fp
    f490:	4666      	mov	r6, ip
    f492:	59ad      	ldr	r5, [r5, r6]
    f494:	9503      	str	r5, [sp, #12]
    f496:	47a8      	blx	r5
    f498:	2800      	cmp	r0, #0
    f49a:	d000      	beq.n	f49e <f_write+0x1d6>
    f49c:	e77b      	b.n	f396 <f_write+0xce>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    f49e:	69a3      	ldr	r3, [r4, #24]
    f4a0:	464a      	mov	r2, r9
    f4a2:	1a99      	subs	r1, r3, r2
    f4a4:	9b02      	ldr	r3, [sp, #8]
    f4a6:	428b      	cmp	r3, r1
    f4a8:	d900      	bls.n	f4ac <f_write+0x1e4>
    f4aa:	e77c      	b.n	f3a6 <f_write+0xde>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    f4ac:	9b02      	ldr	r3, [sp, #8]
    f4ae:	025d      	lsls	r5, r3, #9
				continue;
    f4b0:	e7a5      	b.n	f3fe <f_write+0x136>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    f4b2:	0021      	movs	r1, r4
    f4b4:	3124      	adds	r1, #36	; 0x24
    f4b6:	7868      	ldrb	r0, [r5, #1]
    f4b8:	2301      	movs	r3, #1
    f4ba:	464a      	mov	r2, r9
    f4bc:	4d19      	ldr	r5, [pc, #100]	; (f524 <f_write+0x25c>)
    f4be:	465e      	mov	r6, fp
    f4c0:	5975      	ldr	r5, [r6, r5]
    f4c2:	9502      	str	r5, [sp, #8]
    f4c4:	47a8      	blx	r5
				if (fp->fptr < fp->fsize &&
    f4c6:	2800      	cmp	r0, #0
    f4c8:	d100      	bne.n	f4cc <f_write+0x204>
    f4ca:	e781      	b.n	f3d0 <f_write+0x108>
						ABORT(fp->fs, FR_DISK_ERR);
    f4cc:	79a2      	ldrb	r2, [r4, #6]
    f4ce:	2380      	movs	r3, #128	; 0x80
    f4d0:	425b      	negs	r3, r3
    f4d2:	4313      	orrs	r3, r2
    f4d4:	71a3      	strb	r3, [r4, #6]
    f4d6:	2301      	movs	r3, #1
    f4d8:	9300      	str	r3, [sp, #0]
    f4da:	e00b      	b.n	f4f4 <f_write+0x22c>
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    f4dc:	68a3      	ldr	r3, [r4, #8]
    f4de:	68e2      	ldr	r2, [r4, #12]
    f4e0:	4293      	cmp	r3, r2
    f4e2:	d900      	bls.n	f4e6 <f_write+0x21e>
    f4e4:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    f4e6:	79a3      	ldrb	r3, [r4, #6]
    f4e8:	2220      	movs	r2, #32
    f4ea:	4313      	orrs	r3, r2
    f4ec:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    f4ee:	e001      	b.n	f4f4 <f_write+0x22c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    f4f0:	2302      	movs	r3, #2
    f4f2:	9300      	str	r3, [sp, #0]
}
    f4f4:	9800      	ldr	r0, [sp, #0]
    f4f6:	b005      	add	sp, #20
    f4f8:	bc3c      	pop	{r2, r3, r4, r5}
    f4fa:	4690      	mov	r8, r2
    f4fc:	4699      	mov	r9, r3
    f4fe:	46a2      	mov	sl, r4
    f500:	46ab      	mov	fp, r5
    f502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f504:	000036aa 	.word	0x000036aa
    f508:	fffff039 	.word	0xfffff039
    f50c:	fffff8b1 	.word	0xfffff8b1
    f510:	fffff8a3 	.word	0xfffff8a3
    f514:	00000444 	.word	0x00000444
    f518:	ffffedc1 	.word	0xffffedc1
    f51c:	ffffed83 	.word	0xffffed83
    f520:	ffffed73 	.word	0xffffed73
    f524:	00000488 	.word	0x00000488

0000f528 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    f528:	b570      	push	{r4, r5, r6, lr}
    f52a:	b082      	sub	sp, #8
    f52c:	0004      	movs	r4, r0
    f52e:	4d2c      	ldr	r5, [pc, #176]	; (f5e0 <f_sync+0xb8>)
    f530:	447d      	add	r5, pc
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    f532:	8881      	ldrh	r1, [r0, #4]
    f534:	6800      	ldr	r0, [r0, #0]
    f536:	4b2b      	ldr	r3, [pc, #172]	; (f5e4 <f_sync+0xbc>)
    f538:	447b      	add	r3, pc
    f53a:	4798      	blx	r3
	if (res == FR_OK) {
    f53c:	2800      	cmp	r0, #0
    f53e:	d11b      	bne.n	f578 <f_sync+0x50>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    f540:	79a3      	ldrb	r3, [r4, #6]
    f542:	069a      	lsls	r2, r3, #26
    f544:	d518      	bpl.n	f578 <f_sync+0x50>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    f546:	065b      	lsls	r3, r3, #25
    f548:	d50f      	bpl.n	f56a <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    f54a:	0021      	movs	r1, r4
    f54c:	3124      	adds	r1, #36	; 0x24
    f54e:	6823      	ldr	r3, [r4, #0]
    f550:	7858      	ldrb	r0, [r3, #1]
    f552:	2301      	movs	r3, #1
    f554:	69a2      	ldr	r2, [r4, #24]
    f556:	4e24      	ldr	r6, [pc, #144]	; (f5e8 <f_sync+0xc0>)
    f558:	59ae      	ldr	r6, [r5, r6]
    f55a:	9601      	str	r6, [sp, #4]
    f55c:	47b0      	blx	r6
    f55e:	2800      	cmp	r0, #0
    f560:	d13c      	bne.n	f5dc <f_sync+0xb4>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    f562:	79a3      	ldrb	r3, [r4, #6]
    f564:	2240      	movs	r2, #64	; 0x40
    f566:	4393      	bics	r3, r2
    f568:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    f56a:	69e1      	ldr	r1, [r4, #28]
    f56c:	6820      	ldr	r0, [r4, #0]
    f56e:	4b1f      	ldr	r3, [pc, #124]	; (f5ec <f_sync+0xc4>)
    f570:	447b      	add	r3, pc
    f572:	4798      	blx	r3
			if (res == FR_OK) {
    f574:	2800      	cmp	r0, #0
    f576:	d001      	beq.n	f57c <f_sync+0x54>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    f578:	b002      	add	sp, #8
    f57a:	bd70      	pop	{r4, r5, r6, pc}
				dir = fp->dir_ptr;
    f57c:	6a26      	ldr	r6, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    f57e:	7af3      	ldrb	r3, [r6, #11]
    f580:	2220      	movs	r2, #32
    f582:	4313      	orrs	r3, r2
    f584:	72f3      	strb	r3, [r6, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    f586:	7b23      	ldrb	r3, [r4, #12]
    f588:	7733      	strb	r3, [r6, #28]
    f58a:	89a3      	ldrh	r3, [r4, #12]
    f58c:	0a1b      	lsrs	r3, r3, #8
    f58e:	7773      	strb	r3, [r6, #29]
    f590:	7ba3      	ldrb	r3, [r4, #14]
    f592:	77b3      	strb	r3, [r6, #30]
    f594:	7be3      	ldrb	r3, [r4, #15]
    f596:	77f3      	strb	r3, [r6, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    f598:	7c23      	ldrb	r3, [r4, #16]
    f59a:	76b3      	strb	r3, [r6, #26]
    f59c:	8a23      	ldrh	r3, [r4, #16]
    f59e:	0a1b      	lsrs	r3, r3, #8
    f5a0:	76f3      	strb	r3, [r6, #27]
    f5a2:	7ca3      	ldrb	r3, [r4, #18]
    f5a4:	7533      	strb	r3, [r6, #20]
    f5a6:	8a63      	ldrh	r3, [r4, #18]
    f5a8:	0a1b      	lsrs	r3, r3, #8
    f5aa:	7573      	strb	r3, [r6, #21]
				tim = get_fattime();						/* Update updated time */
    f5ac:	4b10      	ldr	r3, [pc, #64]	; (f5f0 <f_sync+0xc8>)
    f5ae:	58eb      	ldr	r3, [r5, r3]
    f5b0:	9301      	str	r3, [sp, #4]
    f5b2:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    f5b4:	75b0      	strb	r0, [r6, #22]
    f5b6:	b283      	uxth	r3, r0
    f5b8:	0a1b      	lsrs	r3, r3, #8
    f5ba:	75f3      	strb	r3, [r6, #23]
    f5bc:	0c03      	lsrs	r3, r0, #16
    f5be:	7633      	strb	r3, [r6, #24]
    f5c0:	0e00      	lsrs	r0, r0, #24
    f5c2:	7670      	strb	r0, [r6, #25]
				fp->flag &= ~FA__WRITTEN;
    f5c4:	79a3      	ldrb	r3, [r4, #6]
    f5c6:	2220      	movs	r2, #32
    f5c8:	4393      	bics	r3, r2
    f5ca:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    f5cc:	2301      	movs	r3, #1
    f5ce:	6822      	ldr	r2, [r4, #0]
    f5d0:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    f5d2:	6820      	ldr	r0, [r4, #0]
    f5d4:	4b07      	ldr	r3, [pc, #28]	; (f5f4 <f_sync+0xcc>)
    f5d6:	447b      	add	r3, pc
    f5d8:	4798      	blx	r3
    f5da:	e7cd      	b.n	f578 <f_sync+0x50>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    f5dc:	2001      	movs	r0, #1
    f5de:	e7cb      	b.n	f578 <f_sync+0x50>
    f5e0:	0000345c 	.word	0x0000345c
    f5e4:	ffffedf1 	.word	0xffffedf1
    f5e8:	00000444 	.word	0x00000444
    f5ec:	fffff2a1 	.word	0xfffff2a1
    f5f0:	000002fc 	.word	0x000002fc
    f5f4:	fffff9eb 	.word	0xfffff9eb

0000f5f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    f5f8:	b510      	push	{r4, lr}
    f5fa:	b082      	sub	sp, #8
    f5fc:	0004      	movs	r4, r0
    f5fe:	4b06      	ldr	r3, [pc, #24]	; (f618 <f_close+0x20>)
    f600:	447b      	add	r3, pc
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    f602:	4a06      	ldr	r2, [pc, #24]	; (f61c <f_close+0x24>)
    f604:	589b      	ldr	r3, [r3, r2]
    f606:	9301      	str	r3, [sp, #4]
    f608:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    f60a:	2800      	cmp	r0, #0
    f60c:	d101      	bne.n	f612 <f_close+0x1a>
    f60e:	2300      	movs	r3, #0
    f610:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    f612:	b002      	add	sp, #8
    f614:	bd10      	pop	{r4, pc}
    f616:	46c0      	nop			; (mov r8, r8)
    f618:	0000338c 	.word	0x0000338c
    f61c:	0000033c 	.word	0x0000033c

0000f620 <__gnu_thumb1_case_uqi>:
    f620:	b402      	push	{r1}
    f622:	4671      	mov	r1, lr
    f624:	0849      	lsrs	r1, r1, #1
    f626:	0049      	lsls	r1, r1, #1
    f628:	5c09      	ldrb	r1, [r1, r0]
    f62a:	0049      	lsls	r1, r1, #1
    f62c:	448e      	add	lr, r1
    f62e:	bc02      	pop	{r1}
    f630:	4770      	bx	lr
    f632:	46c0      	nop			; (mov r8, r8)

0000f634 <__gnu_thumb1_case_uhi>:
    f634:	b403      	push	{r0, r1}
    f636:	4671      	mov	r1, lr
    f638:	0849      	lsrs	r1, r1, #1
    f63a:	0040      	lsls	r0, r0, #1
    f63c:	0049      	lsls	r1, r1, #1
    f63e:	5a09      	ldrh	r1, [r1, r0]
    f640:	0049      	lsls	r1, r1, #1
    f642:	448e      	add	lr, r1
    f644:	bc03      	pop	{r0, r1}
    f646:	4770      	bx	lr

0000f648 <__udivsi3>:
    f648:	2200      	movs	r2, #0
    f64a:	0843      	lsrs	r3, r0, #1
    f64c:	428b      	cmp	r3, r1
    f64e:	d374      	bcc.n	f73a <__udivsi3+0xf2>
    f650:	0903      	lsrs	r3, r0, #4
    f652:	428b      	cmp	r3, r1
    f654:	d35f      	bcc.n	f716 <__udivsi3+0xce>
    f656:	0a03      	lsrs	r3, r0, #8
    f658:	428b      	cmp	r3, r1
    f65a:	d344      	bcc.n	f6e6 <__udivsi3+0x9e>
    f65c:	0b03      	lsrs	r3, r0, #12
    f65e:	428b      	cmp	r3, r1
    f660:	d328      	bcc.n	f6b4 <__udivsi3+0x6c>
    f662:	0c03      	lsrs	r3, r0, #16
    f664:	428b      	cmp	r3, r1
    f666:	d30d      	bcc.n	f684 <__udivsi3+0x3c>
    f668:	22ff      	movs	r2, #255	; 0xff
    f66a:	0209      	lsls	r1, r1, #8
    f66c:	ba12      	rev	r2, r2
    f66e:	0c03      	lsrs	r3, r0, #16
    f670:	428b      	cmp	r3, r1
    f672:	d302      	bcc.n	f67a <__udivsi3+0x32>
    f674:	1212      	asrs	r2, r2, #8
    f676:	0209      	lsls	r1, r1, #8
    f678:	d065      	beq.n	f746 <__udivsi3+0xfe>
    f67a:	0b03      	lsrs	r3, r0, #12
    f67c:	428b      	cmp	r3, r1
    f67e:	d319      	bcc.n	f6b4 <__udivsi3+0x6c>
    f680:	e000      	b.n	f684 <__udivsi3+0x3c>
    f682:	0a09      	lsrs	r1, r1, #8
    f684:	0bc3      	lsrs	r3, r0, #15
    f686:	428b      	cmp	r3, r1
    f688:	d301      	bcc.n	f68e <__udivsi3+0x46>
    f68a:	03cb      	lsls	r3, r1, #15
    f68c:	1ac0      	subs	r0, r0, r3
    f68e:	4152      	adcs	r2, r2
    f690:	0b83      	lsrs	r3, r0, #14
    f692:	428b      	cmp	r3, r1
    f694:	d301      	bcc.n	f69a <__udivsi3+0x52>
    f696:	038b      	lsls	r3, r1, #14
    f698:	1ac0      	subs	r0, r0, r3
    f69a:	4152      	adcs	r2, r2
    f69c:	0b43      	lsrs	r3, r0, #13
    f69e:	428b      	cmp	r3, r1
    f6a0:	d301      	bcc.n	f6a6 <__udivsi3+0x5e>
    f6a2:	034b      	lsls	r3, r1, #13
    f6a4:	1ac0      	subs	r0, r0, r3
    f6a6:	4152      	adcs	r2, r2
    f6a8:	0b03      	lsrs	r3, r0, #12
    f6aa:	428b      	cmp	r3, r1
    f6ac:	d301      	bcc.n	f6b2 <__udivsi3+0x6a>
    f6ae:	030b      	lsls	r3, r1, #12
    f6b0:	1ac0      	subs	r0, r0, r3
    f6b2:	4152      	adcs	r2, r2
    f6b4:	0ac3      	lsrs	r3, r0, #11
    f6b6:	428b      	cmp	r3, r1
    f6b8:	d301      	bcc.n	f6be <__udivsi3+0x76>
    f6ba:	02cb      	lsls	r3, r1, #11
    f6bc:	1ac0      	subs	r0, r0, r3
    f6be:	4152      	adcs	r2, r2
    f6c0:	0a83      	lsrs	r3, r0, #10
    f6c2:	428b      	cmp	r3, r1
    f6c4:	d301      	bcc.n	f6ca <__udivsi3+0x82>
    f6c6:	028b      	lsls	r3, r1, #10
    f6c8:	1ac0      	subs	r0, r0, r3
    f6ca:	4152      	adcs	r2, r2
    f6cc:	0a43      	lsrs	r3, r0, #9
    f6ce:	428b      	cmp	r3, r1
    f6d0:	d301      	bcc.n	f6d6 <__udivsi3+0x8e>
    f6d2:	024b      	lsls	r3, r1, #9
    f6d4:	1ac0      	subs	r0, r0, r3
    f6d6:	4152      	adcs	r2, r2
    f6d8:	0a03      	lsrs	r3, r0, #8
    f6da:	428b      	cmp	r3, r1
    f6dc:	d301      	bcc.n	f6e2 <__udivsi3+0x9a>
    f6de:	020b      	lsls	r3, r1, #8
    f6e0:	1ac0      	subs	r0, r0, r3
    f6e2:	4152      	adcs	r2, r2
    f6e4:	d2cd      	bcs.n	f682 <__udivsi3+0x3a>
    f6e6:	09c3      	lsrs	r3, r0, #7
    f6e8:	428b      	cmp	r3, r1
    f6ea:	d301      	bcc.n	f6f0 <__udivsi3+0xa8>
    f6ec:	01cb      	lsls	r3, r1, #7
    f6ee:	1ac0      	subs	r0, r0, r3
    f6f0:	4152      	adcs	r2, r2
    f6f2:	0983      	lsrs	r3, r0, #6
    f6f4:	428b      	cmp	r3, r1
    f6f6:	d301      	bcc.n	f6fc <__udivsi3+0xb4>
    f6f8:	018b      	lsls	r3, r1, #6
    f6fa:	1ac0      	subs	r0, r0, r3
    f6fc:	4152      	adcs	r2, r2
    f6fe:	0943      	lsrs	r3, r0, #5
    f700:	428b      	cmp	r3, r1
    f702:	d301      	bcc.n	f708 <__udivsi3+0xc0>
    f704:	014b      	lsls	r3, r1, #5
    f706:	1ac0      	subs	r0, r0, r3
    f708:	4152      	adcs	r2, r2
    f70a:	0903      	lsrs	r3, r0, #4
    f70c:	428b      	cmp	r3, r1
    f70e:	d301      	bcc.n	f714 <__udivsi3+0xcc>
    f710:	010b      	lsls	r3, r1, #4
    f712:	1ac0      	subs	r0, r0, r3
    f714:	4152      	adcs	r2, r2
    f716:	08c3      	lsrs	r3, r0, #3
    f718:	428b      	cmp	r3, r1
    f71a:	d301      	bcc.n	f720 <__udivsi3+0xd8>
    f71c:	00cb      	lsls	r3, r1, #3
    f71e:	1ac0      	subs	r0, r0, r3
    f720:	4152      	adcs	r2, r2
    f722:	0883      	lsrs	r3, r0, #2
    f724:	428b      	cmp	r3, r1
    f726:	d301      	bcc.n	f72c <__udivsi3+0xe4>
    f728:	008b      	lsls	r3, r1, #2
    f72a:	1ac0      	subs	r0, r0, r3
    f72c:	4152      	adcs	r2, r2
    f72e:	0843      	lsrs	r3, r0, #1
    f730:	428b      	cmp	r3, r1
    f732:	d301      	bcc.n	f738 <__udivsi3+0xf0>
    f734:	004b      	lsls	r3, r1, #1
    f736:	1ac0      	subs	r0, r0, r3
    f738:	4152      	adcs	r2, r2
    f73a:	1a41      	subs	r1, r0, r1
    f73c:	d200      	bcs.n	f740 <__udivsi3+0xf8>
    f73e:	4601      	mov	r1, r0
    f740:	4152      	adcs	r2, r2
    f742:	4610      	mov	r0, r2
    f744:	4770      	bx	lr
    f746:	e7ff      	b.n	f748 <__udivsi3+0x100>
    f748:	b501      	push	{r0, lr}
    f74a:	2000      	movs	r0, #0
    f74c:	f000 f8f0 	bl	f930 <__aeabi_idiv0>
    f750:	bd02      	pop	{r1, pc}
    f752:	46c0      	nop			; (mov r8, r8)

0000f754 <__aeabi_uidivmod>:
    f754:	2900      	cmp	r1, #0
    f756:	d0f7      	beq.n	f748 <__udivsi3+0x100>
    f758:	e776      	b.n	f648 <__udivsi3>
    f75a:	4770      	bx	lr

0000f75c <__divsi3>:
    f75c:	4603      	mov	r3, r0
    f75e:	430b      	orrs	r3, r1
    f760:	d47f      	bmi.n	f862 <__divsi3+0x106>
    f762:	2200      	movs	r2, #0
    f764:	0843      	lsrs	r3, r0, #1
    f766:	428b      	cmp	r3, r1
    f768:	d374      	bcc.n	f854 <__divsi3+0xf8>
    f76a:	0903      	lsrs	r3, r0, #4
    f76c:	428b      	cmp	r3, r1
    f76e:	d35f      	bcc.n	f830 <__divsi3+0xd4>
    f770:	0a03      	lsrs	r3, r0, #8
    f772:	428b      	cmp	r3, r1
    f774:	d344      	bcc.n	f800 <__divsi3+0xa4>
    f776:	0b03      	lsrs	r3, r0, #12
    f778:	428b      	cmp	r3, r1
    f77a:	d328      	bcc.n	f7ce <__divsi3+0x72>
    f77c:	0c03      	lsrs	r3, r0, #16
    f77e:	428b      	cmp	r3, r1
    f780:	d30d      	bcc.n	f79e <__divsi3+0x42>
    f782:	22ff      	movs	r2, #255	; 0xff
    f784:	0209      	lsls	r1, r1, #8
    f786:	ba12      	rev	r2, r2
    f788:	0c03      	lsrs	r3, r0, #16
    f78a:	428b      	cmp	r3, r1
    f78c:	d302      	bcc.n	f794 <__divsi3+0x38>
    f78e:	1212      	asrs	r2, r2, #8
    f790:	0209      	lsls	r1, r1, #8
    f792:	d065      	beq.n	f860 <__divsi3+0x104>
    f794:	0b03      	lsrs	r3, r0, #12
    f796:	428b      	cmp	r3, r1
    f798:	d319      	bcc.n	f7ce <__divsi3+0x72>
    f79a:	e000      	b.n	f79e <__divsi3+0x42>
    f79c:	0a09      	lsrs	r1, r1, #8
    f79e:	0bc3      	lsrs	r3, r0, #15
    f7a0:	428b      	cmp	r3, r1
    f7a2:	d301      	bcc.n	f7a8 <__divsi3+0x4c>
    f7a4:	03cb      	lsls	r3, r1, #15
    f7a6:	1ac0      	subs	r0, r0, r3
    f7a8:	4152      	adcs	r2, r2
    f7aa:	0b83      	lsrs	r3, r0, #14
    f7ac:	428b      	cmp	r3, r1
    f7ae:	d301      	bcc.n	f7b4 <__divsi3+0x58>
    f7b0:	038b      	lsls	r3, r1, #14
    f7b2:	1ac0      	subs	r0, r0, r3
    f7b4:	4152      	adcs	r2, r2
    f7b6:	0b43      	lsrs	r3, r0, #13
    f7b8:	428b      	cmp	r3, r1
    f7ba:	d301      	bcc.n	f7c0 <__divsi3+0x64>
    f7bc:	034b      	lsls	r3, r1, #13
    f7be:	1ac0      	subs	r0, r0, r3
    f7c0:	4152      	adcs	r2, r2
    f7c2:	0b03      	lsrs	r3, r0, #12
    f7c4:	428b      	cmp	r3, r1
    f7c6:	d301      	bcc.n	f7cc <__divsi3+0x70>
    f7c8:	030b      	lsls	r3, r1, #12
    f7ca:	1ac0      	subs	r0, r0, r3
    f7cc:	4152      	adcs	r2, r2
    f7ce:	0ac3      	lsrs	r3, r0, #11
    f7d0:	428b      	cmp	r3, r1
    f7d2:	d301      	bcc.n	f7d8 <__divsi3+0x7c>
    f7d4:	02cb      	lsls	r3, r1, #11
    f7d6:	1ac0      	subs	r0, r0, r3
    f7d8:	4152      	adcs	r2, r2
    f7da:	0a83      	lsrs	r3, r0, #10
    f7dc:	428b      	cmp	r3, r1
    f7de:	d301      	bcc.n	f7e4 <__divsi3+0x88>
    f7e0:	028b      	lsls	r3, r1, #10
    f7e2:	1ac0      	subs	r0, r0, r3
    f7e4:	4152      	adcs	r2, r2
    f7e6:	0a43      	lsrs	r3, r0, #9
    f7e8:	428b      	cmp	r3, r1
    f7ea:	d301      	bcc.n	f7f0 <__divsi3+0x94>
    f7ec:	024b      	lsls	r3, r1, #9
    f7ee:	1ac0      	subs	r0, r0, r3
    f7f0:	4152      	adcs	r2, r2
    f7f2:	0a03      	lsrs	r3, r0, #8
    f7f4:	428b      	cmp	r3, r1
    f7f6:	d301      	bcc.n	f7fc <__divsi3+0xa0>
    f7f8:	020b      	lsls	r3, r1, #8
    f7fa:	1ac0      	subs	r0, r0, r3
    f7fc:	4152      	adcs	r2, r2
    f7fe:	d2cd      	bcs.n	f79c <__divsi3+0x40>
    f800:	09c3      	lsrs	r3, r0, #7
    f802:	428b      	cmp	r3, r1
    f804:	d301      	bcc.n	f80a <__divsi3+0xae>
    f806:	01cb      	lsls	r3, r1, #7
    f808:	1ac0      	subs	r0, r0, r3
    f80a:	4152      	adcs	r2, r2
    f80c:	0983      	lsrs	r3, r0, #6
    f80e:	428b      	cmp	r3, r1
    f810:	d301      	bcc.n	f816 <__divsi3+0xba>
    f812:	018b      	lsls	r3, r1, #6
    f814:	1ac0      	subs	r0, r0, r3
    f816:	4152      	adcs	r2, r2
    f818:	0943      	lsrs	r3, r0, #5
    f81a:	428b      	cmp	r3, r1
    f81c:	d301      	bcc.n	f822 <__divsi3+0xc6>
    f81e:	014b      	lsls	r3, r1, #5
    f820:	1ac0      	subs	r0, r0, r3
    f822:	4152      	adcs	r2, r2
    f824:	0903      	lsrs	r3, r0, #4
    f826:	428b      	cmp	r3, r1
    f828:	d301      	bcc.n	f82e <__divsi3+0xd2>
    f82a:	010b      	lsls	r3, r1, #4
    f82c:	1ac0      	subs	r0, r0, r3
    f82e:	4152      	adcs	r2, r2
    f830:	08c3      	lsrs	r3, r0, #3
    f832:	428b      	cmp	r3, r1
    f834:	d301      	bcc.n	f83a <__divsi3+0xde>
    f836:	00cb      	lsls	r3, r1, #3
    f838:	1ac0      	subs	r0, r0, r3
    f83a:	4152      	adcs	r2, r2
    f83c:	0883      	lsrs	r3, r0, #2
    f83e:	428b      	cmp	r3, r1
    f840:	d301      	bcc.n	f846 <__divsi3+0xea>
    f842:	008b      	lsls	r3, r1, #2
    f844:	1ac0      	subs	r0, r0, r3
    f846:	4152      	adcs	r2, r2
    f848:	0843      	lsrs	r3, r0, #1
    f84a:	428b      	cmp	r3, r1
    f84c:	d301      	bcc.n	f852 <__divsi3+0xf6>
    f84e:	004b      	lsls	r3, r1, #1
    f850:	1ac0      	subs	r0, r0, r3
    f852:	4152      	adcs	r2, r2
    f854:	1a41      	subs	r1, r0, r1
    f856:	d200      	bcs.n	f85a <__divsi3+0xfe>
    f858:	4601      	mov	r1, r0
    f85a:	4152      	adcs	r2, r2
    f85c:	4610      	mov	r0, r2
    f85e:	4770      	bx	lr
    f860:	e05d      	b.n	f91e <__divsi3+0x1c2>
    f862:	0fca      	lsrs	r2, r1, #31
    f864:	d000      	beq.n	f868 <__divsi3+0x10c>
    f866:	4249      	negs	r1, r1
    f868:	1003      	asrs	r3, r0, #32
    f86a:	d300      	bcc.n	f86e <__divsi3+0x112>
    f86c:	4240      	negs	r0, r0
    f86e:	4053      	eors	r3, r2
    f870:	2200      	movs	r2, #0
    f872:	469c      	mov	ip, r3
    f874:	0903      	lsrs	r3, r0, #4
    f876:	428b      	cmp	r3, r1
    f878:	d32d      	bcc.n	f8d6 <__divsi3+0x17a>
    f87a:	0a03      	lsrs	r3, r0, #8
    f87c:	428b      	cmp	r3, r1
    f87e:	d312      	bcc.n	f8a6 <__divsi3+0x14a>
    f880:	22fc      	movs	r2, #252	; 0xfc
    f882:	0189      	lsls	r1, r1, #6
    f884:	ba12      	rev	r2, r2
    f886:	0a03      	lsrs	r3, r0, #8
    f888:	428b      	cmp	r3, r1
    f88a:	d30c      	bcc.n	f8a6 <__divsi3+0x14a>
    f88c:	0189      	lsls	r1, r1, #6
    f88e:	1192      	asrs	r2, r2, #6
    f890:	428b      	cmp	r3, r1
    f892:	d308      	bcc.n	f8a6 <__divsi3+0x14a>
    f894:	0189      	lsls	r1, r1, #6
    f896:	1192      	asrs	r2, r2, #6
    f898:	428b      	cmp	r3, r1
    f89a:	d304      	bcc.n	f8a6 <__divsi3+0x14a>
    f89c:	0189      	lsls	r1, r1, #6
    f89e:	d03a      	beq.n	f916 <__divsi3+0x1ba>
    f8a0:	1192      	asrs	r2, r2, #6
    f8a2:	e000      	b.n	f8a6 <__divsi3+0x14a>
    f8a4:	0989      	lsrs	r1, r1, #6
    f8a6:	09c3      	lsrs	r3, r0, #7
    f8a8:	428b      	cmp	r3, r1
    f8aa:	d301      	bcc.n	f8b0 <__divsi3+0x154>
    f8ac:	01cb      	lsls	r3, r1, #7
    f8ae:	1ac0      	subs	r0, r0, r3
    f8b0:	4152      	adcs	r2, r2
    f8b2:	0983      	lsrs	r3, r0, #6
    f8b4:	428b      	cmp	r3, r1
    f8b6:	d301      	bcc.n	f8bc <__divsi3+0x160>
    f8b8:	018b      	lsls	r3, r1, #6
    f8ba:	1ac0      	subs	r0, r0, r3
    f8bc:	4152      	adcs	r2, r2
    f8be:	0943      	lsrs	r3, r0, #5
    f8c0:	428b      	cmp	r3, r1
    f8c2:	d301      	bcc.n	f8c8 <__divsi3+0x16c>
    f8c4:	014b      	lsls	r3, r1, #5
    f8c6:	1ac0      	subs	r0, r0, r3
    f8c8:	4152      	adcs	r2, r2
    f8ca:	0903      	lsrs	r3, r0, #4
    f8cc:	428b      	cmp	r3, r1
    f8ce:	d301      	bcc.n	f8d4 <__divsi3+0x178>
    f8d0:	010b      	lsls	r3, r1, #4
    f8d2:	1ac0      	subs	r0, r0, r3
    f8d4:	4152      	adcs	r2, r2
    f8d6:	08c3      	lsrs	r3, r0, #3
    f8d8:	428b      	cmp	r3, r1
    f8da:	d301      	bcc.n	f8e0 <__divsi3+0x184>
    f8dc:	00cb      	lsls	r3, r1, #3
    f8de:	1ac0      	subs	r0, r0, r3
    f8e0:	4152      	adcs	r2, r2
    f8e2:	0883      	lsrs	r3, r0, #2
    f8e4:	428b      	cmp	r3, r1
    f8e6:	d301      	bcc.n	f8ec <__divsi3+0x190>
    f8e8:	008b      	lsls	r3, r1, #2
    f8ea:	1ac0      	subs	r0, r0, r3
    f8ec:	4152      	adcs	r2, r2
    f8ee:	d2d9      	bcs.n	f8a4 <__divsi3+0x148>
    f8f0:	0843      	lsrs	r3, r0, #1
    f8f2:	428b      	cmp	r3, r1
    f8f4:	d301      	bcc.n	f8fa <__divsi3+0x19e>
    f8f6:	004b      	lsls	r3, r1, #1
    f8f8:	1ac0      	subs	r0, r0, r3
    f8fa:	4152      	adcs	r2, r2
    f8fc:	1a41      	subs	r1, r0, r1
    f8fe:	d200      	bcs.n	f902 <__divsi3+0x1a6>
    f900:	4601      	mov	r1, r0
    f902:	4663      	mov	r3, ip
    f904:	4152      	adcs	r2, r2
    f906:	105b      	asrs	r3, r3, #1
    f908:	4610      	mov	r0, r2
    f90a:	d301      	bcc.n	f910 <__divsi3+0x1b4>
    f90c:	4240      	negs	r0, r0
    f90e:	2b00      	cmp	r3, #0
    f910:	d500      	bpl.n	f914 <__divsi3+0x1b8>
    f912:	4249      	negs	r1, r1
    f914:	4770      	bx	lr
    f916:	4663      	mov	r3, ip
    f918:	105b      	asrs	r3, r3, #1
    f91a:	d300      	bcc.n	f91e <__divsi3+0x1c2>
    f91c:	4240      	negs	r0, r0
    f91e:	b501      	push	{r0, lr}
    f920:	2000      	movs	r0, #0
    f922:	f000 f805 	bl	f930 <__aeabi_idiv0>
    f926:	bd02      	pop	{r1, pc}

0000f928 <__aeabi_idivmod>:
    f928:	2900      	cmp	r1, #0
    f92a:	d0f8      	beq.n	f91e <__divsi3+0x1c2>
    f92c:	e716      	b.n	f75c <__divsi3>
    f92e:	4770      	bx	lr

0000f930 <__aeabi_idiv0>:
    f930:	4770      	bx	lr
    f932:	46c0      	nop			; (mov r8, r8)

0000f934 <__ctzsi2>:
    f934:	4241      	negs	r1, r0
    f936:	4008      	ands	r0, r1
    f938:	211c      	movs	r1, #28
    f93a:	2301      	movs	r3, #1
    f93c:	041b      	lsls	r3, r3, #16
    f93e:	4298      	cmp	r0, r3
    f940:	d301      	bcc.n	f946 <__ctzsi2+0x12>
    f942:	0c00      	lsrs	r0, r0, #16
    f944:	3910      	subs	r1, #16
    f946:	0a1b      	lsrs	r3, r3, #8
    f948:	4298      	cmp	r0, r3
    f94a:	d301      	bcc.n	f950 <__ctzsi2+0x1c>
    f94c:	0a00      	lsrs	r0, r0, #8
    f94e:	3908      	subs	r1, #8
    f950:	091b      	lsrs	r3, r3, #4
    f952:	4298      	cmp	r0, r3
    f954:	d301      	bcc.n	f95a <__ctzsi2+0x26>
    f956:	0900      	lsrs	r0, r0, #4
    f958:	3904      	subs	r1, #4
    f95a:	a202      	add	r2, pc, #8	; (adr r2, f964 <__ctzsi2+0x30>)
    f95c:	5c10      	ldrb	r0, [r2, r0]
    f95e:	1a40      	subs	r0, r0, r1
    f960:	4770      	bx	lr
    f962:	46c0      	nop			; (mov r8, r8)
    f964:	1d1d1c1b 	.word	0x1d1d1c1b
    f968:	1e1e1e1e 	.word	0x1e1e1e1e
    f96c:	1f1f1f1f 	.word	0x1f1f1f1f
    f970:	1f1f1f1f 	.word	0x1f1f1f1f

0000f974 <atoi>:
    f974:	b510      	push	{r4, lr}
    f976:	220a      	movs	r2, #10
    f978:	2100      	movs	r1, #0
    f97a:	f000 fb93 	bl	100a4 <strtol>
    f97e:	bd10      	pop	{r4, pc}

0000f980 <__libc_init_array>:
    f980:	b570      	push	{r4, r5, r6, lr}
    f982:	2600      	movs	r6, #0
    f984:	4d0c      	ldr	r5, [pc, #48]	; (f9b8 <__libc_init_array+0x38>)
    f986:	4c0d      	ldr	r4, [pc, #52]	; (f9bc <__libc_init_array+0x3c>)
    f988:	1b64      	subs	r4, r4, r5
    f98a:	10a4      	asrs	r4, r4, #2
    f98c:	42a6      	cmp	r6, r4
    f98e:	d109      	bne.n	f9a4 <__libc_init_array+0x24>
    f990:	2600      	movs	r6, #0
    f992:	f002 ffed 	bl	12970 <_init>
    f996:	4d0a      	ldr	r5, [pc, #40]	; (f9c0 <__libc_init_array+0x40>)
    f998:	4c0a      	ldr	r4, [pc, #40]	; (f9c4 <__libc_init_array+0x44>)
    f99a:	1b64      	subs	r4, r4, r5
    f99c:	10a4      	asrs	r4, r4, #2
    f99e:	42a6      	cmp	r6, r4
    f9a0:	d105      	bne.n	f9ae <__libc_init_array+0x2e>
    f9a2:	bd70      	pop	{r4, r5, r6, pc}
    f9a4:	00b3      	lsls	r3, r6, #2
    f9a6:	58eb      	ldr	r3, [r5, r3]
    f9a8:	4798      	blx	r3
    f9aa:	3601      	adds	r6, #1
    f9ac:	e7ee      	b.n	f98c <__libc_init_array+0xc>
    f9ae:	00b3      	lsls	r3, r6, #2
    f9b0:	58eb      	ldr	r3, [r5, r3]
    f9b2:	4798      	blx	r3
    f9b4:	3601      	adds	r6, #1
    f9b6:	e7f2      	b.n	f99e <__libc_init_array+0x1e>
    f9b8:	0001297c 	.word	0x0001297c
    f9bc:	0001297c 	.word	0x0001297c
    f9c0:	0001297c 	.word	0x0001297c
    f9c4:	00012980 	.word	0x00012980

0000f9c8 <malloc>:
    f9c8:	b510      	push	{r4, lr}
    f9ca:	4b03      	ldr	r3, [pc, #12]	; (f9d8 <malloc+0x10>)
    f9cc:	0001      	movs	r1, r0
    f9ce:	6818      	ldr	r0, [r3, #0]
    f9d0:	f000 f87c 	bl	facc <_malloc_r>
    f9d4:	bd10      	pop	{r4, pc}
    f9d6:	46c0      	nop			; (mov r8, r8)
    f9d8:	2000021c 	.word	0x2000021c

0000f9dc <free>:
    f9dc:	b510      	push	{r4, lr}
    f9de:	4b03      	ldr	r3, [pc, #12]	; (f9ec <free+0x10>)
    f9e0:	0001      	movs	r1, r0
    f9e2:	6818      	ldr	r0, [r3, #0]
    f9e4:	f000 f828 	bl	fa38 <_free_r>
    f9e8:	bd10      	pop	{r4, pc}
    f9ea:	46c0      	nop			; (mov r8, r8)
    f9ec:	2000021c 	.word	0x2000021c

0000f9f0 <memcpy>:
    f9f0:	2300      	movs	r3, #0
    f9f2:	b510      	push	{r4, lr}
    f9f4:	429a      	cmp	r2, r3
    f9f6:	d100      	bne.n	f9fa <memcpy+0xa>
    f9f8:	bd10      	pop	{r4, pc}
    f9fa:	5ccc      	ldrb	r4, [r1, r3]
    f9fc:	54c4      	strb	r4, [r0, r3]
    f9fe:	3301      	adds	r3, #1
    fa00:	e7f8      	b.n	f9f4 <memcpy+0x4>

0000fa02 <memmove>:
    fa02:	b510      	push	{r4, lr}
    fa04:	4288      	cmp	r0, r1
    fa06:	d902      	bls.n	fa0e <memmove+0xc>
    fa08:	188b      	adds	r3, r1, r2
    fa0a:	4298      	cmp	r0, r3
    fa0c:	d308      	bcc.n	fa20 <memmove+0x1e>
    fa0e:	2300      	movs	r3, #0
    fa10:	429a      	cmp	r2, r3
    fa12:	d007      	beq.n	fa24 <memmove+0x22>
    fa14:	5ccc      	ldrb	r4, [r1, r3]
    fa16:	54c4      	strb	r4, [r0, r3]
    fa18:	3301      	adds	r3, #1
    fa1a:	e7f9      	b.n	fa10 <memmove+0xe>
    fa1c:	5c8b      	ldrb	r3, [r1, r2]
    fa1e:	5483      	strb	r3, [r0, r2]
    fa20:	3a01      	subs	r2, #1
    fa22:	d2fb      	bcs.n	fa1c <memmove+0x1a>
    fa24:	bd10      	pop	{r4, pc}

0000fa26 <memset>:
    fa26:	0003      	movs	r3, r0
    fa28:	1882      	adds	r2, r0, r2
    fa2a:	4293      	cmp	r3, r2
    fa2c:	d100      	bne.n	fa30 <memset+0xa>
    fa2e:	4770      	bx	lr
    fa30:	7019      	strb	r1, [r3, #0]
    fa32:	3301      	adds	r3, #1
    fa34:	e7f9      	b.n	fa2a <memset+0x4>
	...

0000fa38 <_free_r>:
    fa38:	b570      	push	{r4, r5, r6, lr}
    fa3a:	0005      	movs	r5, r0
    fa3c:	2900      	cmp	r1, #0
    fa3e:	d010      	beq.n	fa62 <_free_r+0x2a>
    fa40:	1f0c      	subs	r4, r1, #4
    fa42:	6823      	ldr	r3, [r4, #0]
    fa44:	2b00      	cmp	r3, #0
    fa46:	da00      	bge.n	fa4a <_free_r+0x12>
    fa48:	18e4      	adds	r4, r4, r3
    fa4a:	0028      	movs	r0, r5
    fa4c:	f000 fe12 	bl	10674 <__malloc_lock>
    fa50:	4a1d      	ldr	r2, [pc, #116]	; (fac8 <_free_r+0x90>)
    fa52:	6813      	ldr	r3, [r2, #0]
    fa54:	2b00      	cmp	r3, #0
    fa56:	d105      	bne.n	fa64 <_free_r+0x2c>
    fa58:	6063      	str	r3, [r4, #4]
    fa5a:	6014      	str	r4, [r2, #0]
    fa5c:	0028      	movs	r0, r5
    fa5e:	f000 fe0a 	bl	10676 <__malloc_unlock>
    fa62:	bd70      	pop	{r4, r5, r6, pc}
    fa64:	42a3      	cmp	r3, r4
    fa66:	d909      	bls.n	fa7c <_free_r+0x44>
    fa68:	6821      	ldr	r1, [r4, #0]
    fa6a:	1860      	adds	r0, r4, r1
    fa6c:	4283      	cmp	r3, r0
    fa6e:	d1f3      	bne.n	fa58 <_free_r+0x20>
    fa70:	6818      	ldr	r0, [r3, #0]
    fa72:	685b      	ldr	r3, [r3, #4]
    fa74:	1841      	adds	r1, r0, r1
    fa76:	6021      	str	r1, [r4, #0]
    fa78:	e7ee      	b.n	fa58 <_free_r+0x20>
    fa7a:	0013      	movs	r3, r2
    fa7c:	685a      	ldr	r2, [r3, #4]
    fa7e:	2a00      	cmp	r2, #0
    fa80:	d001      	beq.n	fa86 <_free_r+0x4e>
    fa82:	42a2      	cmp	r2, r4
    fa84:	d9f9      	bls.n	fa7a <_free_r+0x42>
    fa86:	6819      	ldr	r1, [r3, #0]
    fa88:	1858      	adds	r0, r3, r1
    fa8a:	42a0      	cmp	r0, r4
    fa8c:	d10b      	bne.n	faa6 <_free_r+0x6e>
    fa8e:	6820      	ldr	r0, [r4, #0]
    fa90:	1809      	adds	r1, r1, r0
    fa92:	1858      	adds	r0, r3, r1
    fa94:	6019      	str	r1, [r3, #0]
    fa96:	4282      	cmp	r2, r0
    fa98:	d1e0      	bne.n	fa5c <_free_r+0x24>
    fa9a:	6810      	ldr	r0, [r2, #0]
    fa9c:	6852      	ldr	r2, [r2, #4]
    fa9e:	1841      	adds	r1, r0, r1
    faa0:	6019      	str	r1, [r3, #0]
    faa2:	605a      	str	r2, [r3, #4]
    faa4:	e7da      	b.n	fa5c <_free_r+0x24>
    faa6:	42a0      	cmp	r0, r4
    faa8:	d902      	bls.n	fab0 <_free_r+0x78>
    faaa:	230c      	movs	r3, #12
    faac:	602b      	str	r3, [r5, #0]
    faae:	e7d5      	b.n	fa5c <_free_r+0x24>
    fab0:	6821      	ldr	r1, [r4, #0]
    fab2:	1860      	adds	r0, r4, r1
    fab4:	4282      	cmp	r2, r0
    fab6:	d103      	bne.n	fac0 <_free_r+0x88>
    fab8:	6810      	ldr	r0, [r2, #0]
    faba:	6852      	ldr	r2, [r2, #4]
    fabc:	1841      	adds	r1, r0, r1
    fabe:	6021      	str	r1, [r4, #0]
    fac0:	6062      	str	r2, [r4, #4]
    fac2:	605c      	str	r4, [r3, #4]
    fac4:	e7ca      	b.n	fa5c <_free_r+0x24>
    fac6:	46c0      	nop			; (mov r8, r8)
    fac8:	20000bd0 	.word	0x20000bd0

0000facc <_malloc_r>:
    facc:	2303      	movs	r3, #3
    face:	b570      	push	{r4, r5, r6, lr}
    fad0:	1ccd      	adds	r5, r1, #3
    fad2:	439d      	bics	r5, r3
    fad4:	3508      	adds	r5, #8
    fad6:	0006      	movs	r6, r0
    fad8:	2d0c      	cmp	r5, #12
    fada:	d21e      	bcs.n	fb1a <_malloc_r+0x4e>
    fadc:	250c      	movs	r5, #12
    fade:	42a9      	cmp	r1, r5
    fae0:	d81d      	bhi.n	fb1e <_malloc_r+0x52>
    fae2:	0030      	movs	r0, r6
    fae4:	f000 fdc6 	bl	10674 <__malloc_lock>
    fae8:	4a25      	ldr	r2, [pc, #148]	; (fb80 <_malloc_r+0xb4>)
    faea:	6814      	ldr	r4, [r2, #0]
    faec:	0021      	movs	r1, r4
    faee:	2900      	cmp	r1, #0
    faf0:	d119      	bne.n	fb26 <_malloc_r+0x5a>
    faf2:	4c24      	ldr	r4, [pc, #144]	; (fb84 <_malloc_r+0xb8>)
    faf4:	6823      	ldr	r3, [r4, #0]
    faf6:	2b00      	cmp	r3, #0
    faf8:	d103      	bne.n	fb02 <_malloc_r+0x36>
    fafa:	0030      	movs	r0, r6
    fafc:	f000 f8dc 	bl	fcb8 <_sbrk_r>
    fb00:	6020      	str	r0, [r4, #0]
    fb02:	0029      	movs	r1, r5
    fb04:	0030      	movs	r0, r6
    fb06:	f000 f8d7 	bl	fcb8 <_sbrk_r>
    fb0a:	1c43      	adds	r3, r0, #1
    fb0c:	d12c      	bne.n	fb68 <_malloc_r+0x9c>
    fb0e:	230c      	movs	r3, #12
    fb10:	0030      	movs	r0, r6
    fb12:	6033      	str	r3, [r6, #0]
    fb14:	f000 fdaf 	bl	10676 <__malloc_unlock>
    fb18:	e003      	b.n	fb22 <_malloc_r+0x56>
    fb1a:	2d00      	cmp	r5, #0
    fb1c:	dadf      	bge.n	fade <_malloc_r+0x12>
    fb1e:	230c      	movs	r3, #12
    fb20:	6033      	str	r3, [r6, #0]
    fb22:	2000      	movs	r0, #0
    fb24:	bd70      	pop	{r4, r5, r6, pc}
    fb26:	680b      	ldr	r3, [r1, #0]
    fb28:	1b5b      	subs	r3, r3, r5
    fb2a:	d41a      	bmi.n	fb62 <_malloc_r+0x96>
    fb2c:	2b0b      	cmp	r3, #11
    fb2e:	d903      	bls.n	fb38 <_malloc_r+0x6c>
    fb30:	600b      	str	r3, [r1, #0]
    fb32:	18cc      	adds	r4, r1, r3
    fb34:	6025      	str	r5, [r4, #0]
    fb36:	e003      	b.n	fb40 <_malloc_r+0x74>
    fb38:	428c      	cmp	r4, r1
    fb3a:	d10e      	bne.n	fb5a <_malloc_r+0x8e>
    fb3c:	6863      	ldr	r3, [r4, #4]
    fb3e:	6013      	str	r3, [r2, #0]
    fb40:	0030      	movs	r0, r6
    fb42:	f000 fd98 	bl	10676 <__malloc_unlock>
    fb46:	0020      	movs	r0, r4
    fb48:	2207      	movs	r2, #7
    fb4a:	300b      	adds	r0, #11
    fb4c:	1d23      	adds	r3, r4, #4
    fb4e:	4390      	bics	r0, r2
    fb50:	1ac3      	subs	r3, r0, r3
    fb52:	d0e7      	beq.n	fb24 <_malloc_r+0x58>
    fb54:	425a      	negs	r2, r3
    fb56:	50e2      	str	r2, [r4, r3]
    fb58:	e7e4      	b.n	fb24 <_malloc_r+0x58>
    fb5a:	684b      	ldr	r3, [r1, #4]
    fb5c:	6063      	str	r3, [r4, #4]
    fb5e:	000c      	movs	r4, r1
    fb60:	e7ee      	b.n	fb40 <_malloc_r+0x74>
    fb62:	000c      	movs	r4, r1
    fb64:	6849      	ldr	r1, [r1, #4]
    fb66:	e7c2      	b.n	faee <_malloc_r+0x22>
    fb68:	2303      	movs	r3, #3
    fb6a:	1cc4      	adds	r4, r0, #3
    fb6c:	439c      	bics	r4, r3
    fb6e:	42a0      	cmp	r0, r4
    fb70:	d0e0      	beq.n	fb34 <_malloc_r+0x68>
    fb72:	1a21      	subs	r1, r4, r0
    fb74:	0030      	movs	r0, r6
    fb76:	f000 f89f 	bl	fcb8 <_sbrk_r>
    fb7a:	1c43      	adds	r3, r0, #1
    fb7c:	d1da      	bne.n	fb34 <_malloc_r+0x68>
    fb7e:	e7c6      	b.n	fb0e <_malloc_r+0x42>
    fb80:	20000bd0 	.word	0x20000bd0
    fb84:	20000bd4 	.word	0x20000bd4

0000fb88 <iprintf>:
    fb88:	b40f      	push	{r0, r1, r2, r3}
    fb8a:	4b0b      	ldr	r3, [pc, #44]	; (fbb8 <iprintf+0x30>)
    fb8c:	b513      	push	{r0, r1, r4, lr}
    fb8e:	681c      	ldr	r4, [r3, #0]
    fb90:	2c00      	cmp	r4, #0
    fb92:	d005      	beq.n	fba0 <iprintf+0x18>
    fb94:	69a3      	ldr	r3, [r4, #24]
    fb96:	2b00      	cmp	r3, #0
    fb98:	d102      	bne.n	fba0 <iprintf+0x18>
    fb9a:	0020      	movs	r0, r4
    fb9c:	f000 fc5a 	bl	10454 <__sinit>
    fba0:	ab05      	add	r3, sp, #20
    fba2:	9a04      	ldr	r2, [sp, #16]
    fba4:	68a1      	ldr	r1, [r4, #8]
    fba6:	0020      	movs	r0, r4
    fba8:	9301      	str	r3, [sp, #4]
    fbaa:	f000 fef3 	bl	10994 <_vfiprintf_r>
    fbae:	bc16      	pop	{r1, r2, r4}
    fbb0:	bc08      	pop	{r3}
    fbb2:	b004      	add	sp, #16
    fbb4:	4718      	bx	r3
    fbb6:	46c0      	nop			; (mov r8, r8)
    fbb8:	2000021c 	.word	0x2000021c

0000fbbc <putchar>:
    fbbc:	4b08      	ldr	r3, [pc, #32]	; (fbe0 <putchar+0x24>)
    fbbe:	b570      	push	{r4, r5, r6, lr}
    fbc0:	681c      	ldr	r4, [r3, #0]
    fbc2:	0005      	movs	r5, r0
    fbc4:	2c00      	cmp	r4, #0
    fbc6:	d005      	beq.n	fbd4 <putchar+0x18>
    fbc8:	69a3      	ldr	r3, [r4, #24]
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d102      	bne.n	fbd4 <putchar+0x18>
    fbce:	0020      	movs	r0, r4
    fbd0:	f000 fc40 	bl	10454 <__sinit>
    fbd4:	0029      	movs	r1, r5
    fbd6:	68a2      	ldr	r2, [r4, #8]
    fbd8:	0020      	movs	r0, r4
    fbda:	f001 f97f 	bl	10edc <_putc_r>
    fbde:	bd70      	pop	{r4, r5, r6, pc}
    fbe0:	2000021c 	.word	0x2000021c

0000fbe4 <_puts_r>:
    fbe4:	b570      	push	{r4, r5, r6, lr}
    fbe6:	0005      	movs	r5, r0
    fbe8:	000e      	movs	r6, r1
    fbea:	2800      	cmp	r0, #0
    fbec:	d004      	beq.n	fbf8 <_puts_r+0x14>
    fbee:	6983      	ldr	r3, [r0, #24]
    fbf0:	2b00      	cmp	r3, #0
    fbf2:	d101      	bne.n	fbf8 <_puts_r+0x14>
    fbf4:	f000 fc2e 	bl	10454 <__sinit>
    fbf8:	69ab      	ldr	r3, [r5, #24]
    fbfa:	68ac      	ldr	r4, [r5, #8]
    fbfc:	2b00      	cmp	r3, #0
    fbfe:	d102      	bne.n	fc06 <_puts_r+0x22>
    fc00:	0028      	movs	r0, r5
    fc02:	f000 fc27 	bl	10454 <__sinit>
    fc06:	4b24      	ldr	r3, [pc, #144]	; (fc98 <_puts_r+0xb4>)
    fc08:	429c      	cmp	r4, r3
    fc0a:	d10f      	bne.n	fc2c <_puts_r+0x48>
    fc0c:	686c      	ldr	r4, [r5, #4]
    fc0e:	89a3      	ldrh	r3, [r4, #12]
    fc10:	071b      	lsls	r3, r3, #28
    fc12:	d502      	bpl.n	fc1a <_puts_r+0x36>
    fc14:	6923      	ldr	r3, [r4, #16]
    fc16:	2b00      	cmp	r3, #0
    fc18:	d120      	bne.n	fc5c <_puts_r+0x78>
    fc1a:	0021      	movs	r1, r4
    fc1c:	0028      	movs	r0, r5
    fc1e:	f000 faab 	bl	10178 <__swsetup_r>
    fc22:	2800      	cmp	r0, #0
    fc24:	d01a      	beq.n	fc5c <_puts_r+0x78>
    fc26:	2001      	movs	r0, #1
    fc28:	4240      	negs	r0, r0
    fc2a:	bd70      	pop	{r4, r5, r6, pc}
    fc2c:	4b1b      	ldr	r3, [pc, #108]	; (fc9c <_puts_r+0xb8>)
    fc2e:	429c      	cmp	r4, r3
    fc30:	d101      	bne.n	fc36 <_puts_r+0x52>
    fc32:	68ac      	ldr	r4, [r5, #8]
    fc34:	e7eb      	b.n	fc0e <_puts_r+0x2a>
    fc36:	4b1a      	ldr	r3, [pc, #104]	; (fca0 <_puts_r+0xbc>)
    fc38:	429c      	cmp	r4, r3
    fc3a:	d1e8      	bne.n	fc0e <_puts_r+0x2a>
    fc3c:	68ec      	ldr	r4, [r5, #12]
    fc3e:	e7e6      	b.n	fc0e <_puts_r+0x2a>
    fc40:	3b01      	subs	r3, #1
    fc42:	3601      	adds	r6, #1
    fc44:	60a3      	str	r3, [r4, #8]
    fc46:	2b00      	cmp	r3, #0
    fc48:	da04      	bge.n	fc54 <_puts_r+0x70>
    fc4a:	69a2      	ldr	r2, [r4, #24]
    fc4c:	4293      	cmp	r3, r2
    fc4e:	db16      	blt.n	fc7e <_puts_r+0x9a>
    fc50:	290a      	cmp	r1, #10
    fc52:	d014      	beq.n	fc7e <_puts_r+0x9a>
    fc54:	6823      	ldr	r3, [r4, #0]
    fc56:	1c5a      	adds	r2, r3, #1
    fc58:	6022      	str	r2, [r4, #0]
    fc5a:	7019      	strb	r1, [r3, #0]
    fc5c:	7831      	ldrb	r1, [r6, #0]
    fc5e:	68a3      	ldr	r3, [r4, #8]
    fc60:	2900      	cmp	r1, #0
    fc62:	d1ed      	bne.n	fc40 <_puts_r+0x5c>
    fc64:	3b01      	subs	r3, #1
    fc66:	60a3      	str	r3, [r4, #8]
    fc68:	2b00      	cmp	r3, #0
    fc6a:	da0f      	bge.n	fc8c <_puts_r+0xa8>
    fc6c:	0022      	movs	r2, r4
    fc6e:	310a      	adds	r1, #10
    fc70:	0028      	movs	r0, r5
    fc72:	f000 fa2b 	bl	100cc <__swbuf_r>
    fc76:	1c43      	adds	r3, r0, #1
    fc78:	d0d5      	beq.n	fc26 <_puts_r+0x42>
    fc7a:	200a      	movs	r0, #10
    fc7c:	e7d5      	b.n	fc2a <_puts_r+0x46>
    fc7e:	0022      	movs	r2, r4
    fc80:	0028      	movs	r0, r5
    fc82:	f000 fa23 	bl	100cc <__swbuf_r>
    fc86:	1c43      	adds	r3, r0, #1
    fc88:	d1e8      	bne.n	fc5c <_puts_r+0x78>
    fc8a:	e7cc      	b.n	fc26 <_puts_r+0x42>
    fc8c:	200a      	movs	r0, #10
    fc8e:	6823      	ldr	r3, [r4, #0]
    fc90:	1c5a      	adds	r2, r3, #1
    fc92:	6022      	str	r2, [r4, #0]
    fc94:	7018      	strb	r0, [r3, #0]
    fc96:	e7c8      	b.n	fc2a <_puts_r+0x46>
    fc98:	000127f0 	.word	0x000127f0
    fc9c:	00012810 	.word	0x00012810
    fca0:	000127d0 	.word	0x000127d0

0000fca4 <puts>:
    fca4:	b510      	push	{r4, lr}
    fca6:	4b03      	ldr	r3, [pc, #12]	; (fcb4 <puts+0x10>)
    fca8:	0001      	movs	r1, r0
    fcaa:	6818      	ldr	r0, [r3, #0]
    fcac:	f7ff ff9a 	bl	fbe4 <_puts_r>
    fcb0:	bd10      	pop	{r4, pc}
    fcb2:	46c0      	nop			; (mov r8, r8)
    fcb4:	2000021c 	.word	0x2000021c

0000fcb8 <_sbrk_r>:
    fcb8:	2300      	movs	r3, #0
    fcba:	b570      	push	{r4, r5, r6, lr}
    fcbc:	4c06      	ldr	r4, [pc, #24]	; (fcd8 <_sbrk_r+0x20>)
    fcbe:	0005      	movs	r5, r0
    fcc0:	0008      	movs	r0, r1
    fcc2:	6023      	str	r3, [r4, #0]
    fcc4:	f7fe f884 	bl	ddd0 <_sbrk>
    fcc8:	1c43      	adds	r3, r0, #1
    fcca:	d103      	bne.n	fcd4 <_sbrk_r+0x1c>
    fccc:	6823      	ldr	r3, [r4, #0]
    fcce:	2b00      	cmp	r3, #0
    fcd0:	d000      	beq.n	fcd4 <_sbrk_r+0x1c>
    fcd2:	602b      	str	r3, [r5, #0]
    fcd4:	bd70      	pop	{r4, r5, r6, pc}
    fcd6:	46c0      	nop			; (mov r8, r8)
    fcd8:	200012c0 	.word	0x200012c0

0000fcdc <setbuf>:
    fcdc:	424a      	negs	r2, r1
    fcde:	414a      	adcs	r2, r1
    fce0:	2380      	movs	r3, #128	; 0x80
    fce2:	b510      	push	{r4, lr}
    fce4:	0052      	lsls	r2, r2, #1
    fce6:	00db      	lsls	r3, r3, #3
    fce8:	f000 f802 	bl	fcf0 <setvbuf>
    fcec:	bd10      	pop	{r4, pc}
	...

0000fcf0 <setvbuf>:
    fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcf2:	001d      	movs	r5, r3
    fcf4:	4b4f      	ldr	r3, [pc, #316]	; (fe34 <setvbuf+0x144>)
    fcf6:	b085      	sub	sp, #20
    fcf8:	681e      	ldr	r6, [r3, #0]
    fcfa:	0004      	movs	r4, r0
    fcfc:	000f      	movs	r7, r1
    fcfe:	9200      	str	r2, [sp, #0]
    fd00:	2e00      	cmp	r6, #0
    fd02:	d005      	beq.n	fd10 <setvbuf+0x20>
    fd04:	69b3      	ldr	r3, [r6, #24]
    fd06:	2b00      	cmp	r3, #0
    fd08:	d102      	bne.n	fd10 <setvbuf+0x20>
    fd0a:	0030      	movs	r0, r6
    fd0c:	f000 fba2 	bl	10454 <__sinit>
    fd10:	4b49      	ldr	r3, [pc, #292]	; (fe38 <setvbuf+0x148>)
    fd12:	429c      	cmp	r4, r3
    fd14:	d150      	bne.n	fdb8 <setvbuf+0xc8>
    fd16:	6874      	ldr	r4, [r6, #4]
    fd18:	9b00      	ldr	r3, [sp, #0]
    fd1a:	2b02      	cmp	r3, #2
    fd1c:	d005      	beq.n	fd2a <setvbuf+0x3a>
    fd1e:	2b01      	cmp	r3, #1
    fd20:	d900      	bls.n	fd24 <setvbuf+0x34>
    fd22:	e084      	b.n	fe2e <setvbuf+0x13e>
    fd24:	2d00      	cmp	r5, #0
    fd26:	da00      	bge.n	fd2a <setvbuf+0x3a>
    fd28:	e081      	b.n	fe2e <setvbuf+0x13e>
    fd2a:	0021      	movs	r1, r4
    fd2c:	0030      	movs	r0, r6
    fd2e:	f000 fb23 	bl	10378 <_fflush_r>
    fd32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fd34:	2900      	cmp	r1, #0
    fd36:	d008      	beq.n	fd4a <setvbuf+0x5a>
    fd38:	0023      	movs	r3, r4
    fd3a:	3344      	adds	r3, #68	; 0x44
    fd3c:	4299      	cmp	r1, r3
    fd3e:	d002      	beq.n	fd46 <setvbuf+0x56>
    fd40:	0030      	movs	r0, r6
    fd42:	f7ff fe79 	bl	fa38 <_free_r>
    fd46:	2300      	movs	r3, #0
    fd48:	6363      	str	r3, [r4, #52]	; 0x34
    fd4a:	2300      	movs	r3, #0
    fd4c:	61a3      	str	r3, [r4, #24]
    fd4e:	6063      	str	r3, [r4, #4]
    fd50:	89a3      	ldrh	r3, [r4, #12]
    fd52:	061b      	lsls	r3, r3, #24
    fd54:	d503      	bpl.n	fd5e <setvbuf+0x6e>
    fd56:	6921      	ldr	r1, [r4, #16]
    fd58:	0030      	movs	r0, r6
    fd5a:	f7ff fe6d 	bl	fa38 <_free_r>
    fd5e:	89a3      	ldrh	r3, [r4, #12]
    fd60:	4a36      	ldr	r2, [pc, #216]	; (fe3c <setvbuf+0x14c>)
    fd62:	4013      	ands	r3, r2
    fd64:	81a3      	strh	r3, [r4, #12]
    fd66:	9b00      	ldr	r3, [sp, #0]
    fd68:	2b02      	cmp	r3, #2
    fd6a:	d05a      	beq.n	fe22 <setvbuf+0x132>
    fd6c:	ab03      	add	r3, sp, #12
    fd6e:	aa02      	add	r2, sp, #8
    fd70:	0021      	movs	r1, r4
    fd72:	0030      	movs	r0, r6
    fd74:	f000 fc06 	bl	10584 <__swhatbuf_r>
    fd78:	89a3      	ldrh	r3, [r4, #12]
    fd7a:	4318      	orrs	r0, r3
    fd7c:	81a0      	strh	r0, [r4, #12]
    fd7e:	2d00      	cmp	r5, #0
    fd80:	d124      	bne.n	fdcc <setvbuf+0xdc>
    fd82:	9d02      	ldr	r5, [sp, #8]
    fd84:	0028      	movs	r0, r5
    fd86:	f7ff fe1f 	bl	f9c8 <malloc>
    fd8a:	9501      	str	r5, [sp, #4]
    fd8c:	1e07      	subs	r7, r0, #0
    fd8e:	d142      	bne.n	fe16 <setvbuf+0x126>
    fd90:	9b02      	ldr	r3, [sp, #8]
    fd92:	9301      	str	r3, [sp, #4]
    fd94:	42ab      	cmp	r3, r5
    fd96:	d139      	bne.n	fe0c <setvbuf+0x11c>
    fd98:	2001      	movs	r0, #1
    fd9a:	4240      	negs	r0, r0
    fd9c:	2302      	movs	r3, #2
    fd9e:	89a2      	ldrh	r2, [r4, #12]
    fda0:	4313      	orrs	r3, r2
    fda2:	81a3      	strh	r3, [r4, #12]
    fda4:	2300      	movs	r3, #0
    fda6:	60a3      	str	r3, [r4, #8]
    fda8:	0023      	movs	r3, r4
    fdaa:	3347      	adds	r3, #71	; 0x47
    fdac:	6023      	str	r3, [r4, #0]
    fdae:	6123      	str	r3, [r4, #16]
    fdb0:	2301      	movs	r3, #1
    fdb2:	6163      	str	r3, [r4, #20]
    fdb4:	b005      	add	sp, #20
    fdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdb8:	4b21      	ldr	r3, [pc, #132]	; (fe40 <setvbuf+0x150>)
    fdba:	429c      	cmp	r4, r3
    fdbc:	d101      	bne.n	fdc2 <setvbuf+0xd2>
    fdbe:	68b4      	ldr	r4, [r6, #8]
    fdc0:	e7aa      	b.n	fd18 <setvbuf+0x28>
    fdc2:	4b20      	ldr	r3, [pc, #128]	; (fe44 <setvbuf+0x154>)
    fdc4:	429c      	cmp	r4, r3
    fdc6:	d1a7      	bne.n	fd18 <setvbuf+0x28>
    fdc8:	68f4      	ldr	r4, [r6, #12]
    fdca:	e7a5      	b.n	fd18 <setvbuf+0x28>
    fdcc:	2f00      	cmp	r7, #0
    fdce:	d0d9      	beq.n	fd84 <setvbuf+0x94>
    fdd0:	69b3      	ldr	r3, [r6, #24]
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d102      	bne.n	fddc <setvbuf+0xec>
    fdd6:	0030      	movs	r0, r6
    fdd8:	f000 fb3c 	bl	10454 <__sinit>
    fddc:	9b00      	ldr	r3, [sp, #0]
    fdde:	2b01      	cmp	r3, #1
    fde0:	d103      	bne.n	fdea <setvbuf+0xfa>
    fde2:	89a3      	ldrh	r3, [r4, #12]
    fde4:	9a00      	ldr	r2, [sp, #0]
    fde6:	431a      	orrs	r2, r3
    fde8:	81a2      	strh	r2, [r4, #12]
    fdea:	2008      	movs	r0, #8
    fdec:	89a3      	ldrh	r3, [r4, #12]
    fdee:	6027      	str	r7, [r4, #0]
    fdf0:	6127      	str	r7, [r4, #16]
    fdf2:	6165      	str	r5, [r4, #20]
    fdf4:	4018      	ands	r0, r3
    fdf6:	d018      	beq.n	fe2a <setvbuf+0x13a>
    fdf8:	2001      	movs	r0, #1
    fdfa:	4018      	ands	r0, r3
    fdfc:	2300      	movs	r3, #0
    fdfe:	4298      	cmp	r0, r3
    fe00:	d011      	beq.n	fe26 <setvbuf+0x136>
    fe02:	426d      	negs	r5, r5
    fe04:	60a3      	str	r3, [r4, #8]
    fe06:	61a5      	str	r5, [r4, #24]
    fe08:	0018      	movs	r0, r3
    fe0a:	e7d3      	b.n	fdb4 <setvbuf+0xc4>
    fe0c:	9801      	ldr	r0, [sp, #4]
    fe0e:	f7ff fddb 	bl	f9c8 <malloc>
    fe12:	1e07      	subs	r7, r0, #0
    fe14:	d0c0      	beq.n	fd98 <setvbuf+0xa8>
    fe16:	2380      	movs	r3, #128	; 0x80
    fe18:	89a2      	ldrh	r2, [r4, #12]
    fe1a:	9d01      	ldr	r5, [sp, #4]
    fe1c:	4313      	orrs	r3, r2
    fe1e:	81a3      	strh	r3, [r4, #12]
    fe20:	e7d6      	b.n	fdd0 <setvbuf+0xe0>
    fe22:	2000      	movs	r0, #0
    fe24:	e7ba      	b.n	fd9c <setvbuf+0xac>
    fe26:	60a5      	str	r5, [r4, #8]
    fe28:	e7c4      	b.n	fdb4 <setvbuf+0xc4>
    fe2a:	60a0      	str	r0, [r4, #8]
    fe2c:	e7c2      	b.n	fdb4 <setvbuf+0xc4>
    fe2e:	2001      	movs	r0, #1
    fe30:	4240      	negs	r0, r0
    fe32:	e7bf      	b.n	fdb4 <setvbuf+0xc4>
    fe34:	2000021c 	.word	0x2000021c
    fe38:	000127f0 	.word	0x000127f0
    fe3c:	fffff35c 	.word	0xfffff35c
    fe40:	00012810 	.word	0x00012810
    fe44:	000127d0 	.word	0x000127d0

0000fe48 <siprintf>:
    fe48:	b40e      	push	{r1, r2, r3}
    fe4a:	b510      	push	{r4, lr}
    fe4c:	b09d      	sub	sp, #116	; 0x74
    fe4e:	a902      	add	r1, sp, #8
    fe50:	9002      	str	r0, [sp, #8]
    fe52:	6108      	str	r0, [r1, #16]
    fe54:	480b      	ldr	r0, [pc, #44]	; (fe84 <siprintf+0x3c>)
    fe56:	2482      	movs	r4, #130	; 0x82
    fe58:	6088      	str	r0, [r1, #8]
    fe5a:	6148      	str	r0, [r1, #20]
    fe5c:	2001      	movs	r0, #1
    fe5e:	4240      	negs	r0, r0
    fe60:	ab1f      	add	r3, sp, #124	; 0x7c
    fe62:	81c8      	strh	r0, [r1, #14]
    fe64:	4808      	ldr	r0, [pc, #32]	; (fe88 <siprintf+0x40>)
    fe66:	cb04      	ldmia	r3!, {r2}
    fe68:	00a4      	lsls	r4, r4, #2
    fe6a:	6800      	ldr	r0, [r0, #0]
    fe6c:	9301      	str	r3, [sp, #4]
    fe6e:	818c      	strh	r4, [r1, #12]
    fe70:	f000 fc64 	bl	1073c <_svfiprintf_r>
    fe74:	2300      	movs	r3, #0
    fe76:	9a02      	ldr	r2, [sp, #8]
    fe78:	7013      	strb	r3, [r2, #0]
    fe7a:	b01d      	add	sp, #116	; 0x74
    fe7c:	bc10      	pop	{r4}
    fe7e:	bc08      	pop	{r3}
    fe80:	b003      	add	sp, #12
    fe82:	4718      	bx	r3
    fe84:	7fffffff 	.word	0x7fffffff
    fe88:	2000021c 	.word	0x2000021c

0000fe8c <strcmp>:
    fe8c:	7802      	ldrb	r2, [r0, #0]
    fe8e:	780b      	ldrb	r3, [r1, #0]
    fe90:	2a00      	cmp	r2, #0
    fe92:	d003      	beq.n	fe9c <strcmp+0x10>
    fe94:	3001      	adds	r0, #1
    fe96:	3101      	adds	r1, #1
    fe98:	429a      	cmp	r2, r3
    fe9a:	d0f7      	beq.n	fe8c <strcmp>
    fe9c:	1ad0      	subs	r0, r2, r3
    fe9e:	4770      	bx	lr

0000fea0 <strcpy>:
    fea0:	1c03      	adds	r3, r0, #0
    fea2:	780a      	ldrb	r2, [r1, #0]
    fea4:	3101      	adds	r1, #1
    fea6:	701a      	strb	r2, [r3, #0]
    fea8:	3301      	adds	r3, #1
    feaa:	2a00      	cmp	r2, #0
    feac:	d1f9      	bne.n	fea2 <strcpy+0x2>
    feae:	4770      	bx	lr

0000feb0 <strdup>:
    feb0:	b510      	push	{r4, lr}
    feb2:	4b03      	ldr	r3, [pc, #12]	; (fec0 <strdup+0x10>)
    feb4:	0001      	movs	r1, r0
    feb6:	6818      	ldr	r0, [r3, #0]
    feb8:	f000 f804 	bl	fec4 <_strdup_r>
    febc:	bd10      	pop	{r4, pc}
    febe:	46c0      	nop			; (mov r8, r8)
    fec0:	2000021c 	.word	0x2000021c

0000fec4 <_strdup_r>:
    fec4:	b570      	push	{r4, r5, r6, lr}
    fec6:	0005      	movs	r5, r0
    fec8:	0008      	movs	r0, r1
    feca:	000e      	movs	r6, r1
    fecc:	f000 f80d 	bl	feea <strlen>
    fed0:	1c44      	adds	r4, r0, #1
    fed2:	0021      	movs	r1, r4
    fed4:	0028      	movs	r0, r5
    fed6:	f7ff fdf9 	bl	facc <_malloc_r>
    feda:	1e05      	subs	r5, r0, #0
    fedc:	d003      	beq.n	fee6 <_strdup_r+0x22>
    fede:	0022      	movs	r2, r4
    fee0:	0031      	movs	r1, r6
    fee2:	f7ff fd85 	bl	f9f0 <memcpy>
    fee6:	0028      	movs	r0, r5
    fee8:	bd70      	pop	{r4, r5, r6, pc}

0000feea <strlen>:
    feea:	2300      	movs	r3, #0
    feec:	5cc2      	ldrb	r2, [r0, r3]
    feee:	3301      	adds	r3, #1
    fef0:	2a00      	cmp	r2, #0
    fef2:	d1fb      	bne.n	feec <strlen+0x2>
    fef4:	1e58      	subs	r0, r3, #1
    fef6:	4770      	bx	lr

0000fef8 <strncmp>:
    fef8:	2300      	movs	r3, #0
    fefa:	b530      	push	{r4, r5, lr}
    fefc:	429a      	cmp	r2, r3
    fefe:	d00a      	beq.n	ff16 <strncmp+0x1e>
    ff00:	3a01      	subs	r2, #1
    ff02:	5cc4      	ldrb	r4, [r0, r3]
    ff04:	5ccd      	ldrb	r5, [r1, r3]
    ff06:	42ac      	cmp	r4, r5
    ff08:	d104      	bne.n	ff14 <strncmp+0x1c>
    ff0a:	429a      	cmp	r2, r3
    ff0c:	d002      	beq.n	ff14 <strncmp+0x1c>
    ff0e:	3301      	adds	r3, #1
    ff10:	2c00      	cmp	r4, #0
    ff12:	d1f6      	bne.n	ff02 <strncmp+0xa>
    ff14:	1b63      	subs	r3, r4, r5
    ff16:	0018      	movs	r0, r3
    ff18:	bd30      	pop	{r4, r5, pc}

0000ff1a <strncpy>:
    ff1a:	b570      	push	{r4, r5, r6, lr}
    ff1c:	0004      	movs	r4, r0
    ff1e:	2a00      	cmp	r2, #0
    ff20:	d100      	bne.n	ff24 <strncpy+0xa>
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	780d      	ldrb	r5, [r1, #0]
    ff26:	1e56      	subs	r6, r2, #1
    ff28:	1c63      	adds	r3, r4, #1
    ff2a:	7025      	strb	r5, [r4, #0]
    ff2c:	3101      	adds	r1, #1
    ff2e:	2d00      	cmp	r5, #0
    ff30:	d105      	bne.n	ff3e <strncpy+0x24>
    ff32:	18a4      	adds	r4, r4, r2
    ff34:	429c      	cmp	r4, r3
    ff36:	d0f4      	beq.n	ff22 <strncpy+0x8>
    ff38:	701d      	strb	r5, [r3, #0]
    ff3a:	3301      	adds	r3, #1
    ff3c:	e7fa      	b.n	ff34 <strncpy+0x1a>
    ff3e:	001c      	movs	r4, r3
    ff40:	0032      	movs	r2, r6
    ff42:	e7ec      	b.n	ff1e <strncpy+0x4>

0000ff44 <strrchr>:
    ff44:	b570      	push	{r4, r5, r6, lr}
    ff46:	000d      	movs	r5, r1
    ff48:	2400      	movs	r4, #0
    ff4a:	2900      	cmp	r1, #0
    ff4c:	d105      	bne.n	ff5a <strrchr+0x16>
    ff4e:	f001 f847 	bl	10fe0 <strchr>
    ff52:	0004      	movs	r4, r0
    ff54:	e006      	b.n	ff64 <strrchr+0x20>
    ff56:	001c      	movs	r4, r3
    ff58:	1c58      	adds	r0, r3, #1
    ff5a:	0029      	movs	r1, r5
    ff5c:	f001 f840 	bl	10fe0 <strchr>
    ff60:	1e03      	subs	r3, r0, #0
    ff62:	d1f8      	bne.n	ff56 <strrchr+0x12>
    ff64:	0020      	movs	r0, r4
    ff66:	bd70      	pop	{r4, r5, r6, pc}

0000ff68 <strstr>:
    ff68:	b510      	push	{r4, lr}
    ff6a:	0002      	movs	r2, r0
    ff6c:	7800      	ldrb	r0, [r0, #0]
    ff6e:	2800      	cmp	r0, #0
    ff70:	d104      	bne.n	ff7c <strstr+0x14>
    ff72:	7809      	ldrb	r1, [r1, #0]
    ff74:	2900      	cmp	r1, #0
    ff76:	d00d      	beq.n	ff94 <strstr+0x2c>
    ff78:	bd10      	pop	{r4, pc}
    ff7a:	3201      	adds	r2, #1
    ff7c:	7810      	ldrb	r0, [r2, #0]
    ff7e:	2800      	cmp	r0, #0
    ff80:	d0fa      	beq.n	ff78 <strstr+0x10>
    ff82:	2300      	movs	r3, #0
    ff84:	5cc8      	ldrb	r0, [r1, r3]
    ff86:	2800      	cmp	r0, #0
    ff88:	d004      	beq.n	ff94 <strstr+0x2c>
    ff8a:	5cd4      	ldrb	r4, [r2, r3]
    ff8c:	4284      	cmp	r4, r0
    ff8e:	d1f4      	bne.n	ff7a <strstr+0x12>
    ff90:	3301      	adds	r3, #1
    ff92:	e7f7      	b.n	ff84 <strstr+0x1c>
    ff94:	0010      	movs	r0, r2
    ff96:	e7ef      	b.n	ff78 <strstr+0x10>

0000ff98 <_strtol_l.isra.0>:
    ff98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff9a:	001f      	movs	r7, r3
    ff9c:	000e      	movs	r6, r1
    ff9e:	b087      	sub	sp, #28
    ffa0:	9005      	str	r0, [sp, #20]
    ffa2:	9103      	str	r1, [sp, #12]
    ffa4:	9202      	str	r2, [sp, #8]
    ffa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    ffa8:	7834      	ldrb	r4, [r6, #0]
    ffaa:	f000 fae8 	bl	1057e <__locale_ctype_ptr_l>
    ffae:	2208      	movs	r2, #8
    ffb0:	1900      	adds	r0, r0, r4
    ffb2:	7843      	ldrb	r3, [r0, #1]
    ffb4:	1c75      	adds	r5, r6, #1
    ffb6:	4013      	ands	r3, r2
    ffb8:	d10c      	bne.n	ffd4 <_strtol_l.isra.0+0x3c>
    ffba:	2c2d      	cmp	r4, #45	; 0x2d
    ffbc:	d10c      	bne.n	ffd8 <_strtol_l.isra.0+0x40>
    ffbe:	3301      	adds	r3, #1
    ffc0:	782c      	ldrb	r4, [r5, #0]
    ffc2:	9301      	str	r3, [sp, #4]
    ffc4:	1cb5      	adds	r5, r6, #2
    ffc6:	2f00      	cmp	r7, #0
    ffc8:	d00c      	beq.n	ffe4 <_strtol_l.isra.0+0x4c>
    ffca:	2f10      	cmp	r7, #16
    ffcc:	d114      	bne.n	fff8 <_strtol_l.isra.0+0x60>
    ffce:	2c30      	cmp	r4, #48	; 0x30
    ffd0:	d00a      	beq.n	ffe8 <_strtol_l.isra.0+0x50>
    ffd2:	e011      	b.n	fff8 <_strtol_l.isra.0+0x60>
    ffd4:	002e      	movs	r6, r5
    ffd6:	e7e6      	b.n	ffa6 <_strtol_l.isra.0+0xe>
    ffd8:	9301      	str	r3, [sp, #4]
    ffda:	2c2b      	cmp	r4, #43	; 0x2b
    ffdc:	d1f3      	bne.n	ffc6 <_strtol_l.isra.0+0x2e>
    ffde:	782c      	ldrb	r4, [r5, #0]
    ffe0:	1cb5      	adds	r5, r6, #2
    ffe2:	e7f0      	b.n	ffc6 <_strtol_l.isra.0+0x2e>
    ffe4:	2c30      	cmp	r4, #48	; 0x30
    ffe6:	d12f      	bne.n	10048 <_strtol_l.isra.0+0xb0>
    ffe8:	2220      	movs	r2, #32
    ffea:	782b      	ldrb	r3, [r5, #0]
    ffec:	4393      	bics	r3, r2
    ffee:	2b58      	cmp	r3, #88	; 0x58
    fff0:	d151      	bne.n	10096 <_strtol_l.isra.0+0xfe>
    fff2:	2710      	movs	r7, #16
    fff4:	786c      	ldrb	r4, [r5, #1]
    fff6:	3502      	adds	r5, #2
    fff8:	9b01      	ldr	r3, [sp, #4]
    fffa:	4a29      	ldr	r2, [pc, #164]	; (100a0 <_strtol_l.isra.0+0x108>)
    fffc:	0039      	movs	r1, r7
    fffe:	189e      	adds	r6, r3, r2
   10000:	0030      	movs	r0, r6
   10002:	f7ff fba7 	bl	f754 <__aeabi_uidivmod>
   10006:	0030      	movs	r0, r6
   10008:	9104      	str	r1, [sp, #16]
   1000a:	0039      	movs	r1, r7
   1000c:	f7ff fb1c 	bl	f648 <__udivsi3>
   10010:	2101      	movs	r1, #1
   10012:	2300      	movs	r3, #0
   10014:	4249      	negs	r1, r1
   10016:	0002      	movs	r2, r0
   10018:	468c      	mov	ip, r1
   1001a:	0018      	movs	r0, r3
   1001c:	0021      	movs	r1, r4
   1001e:	3930      	subs	r1, #48	; 0x30
   10020:	2909      	cmp	r1, #9
   10022:	d813      	bhi.n	1004c <_strtol_l.isra.0+0xb4>
   10024:	000c      	movs	r4, r1
   10026:	42a7      	cmp	r7, r4
   10028:	dd1c      	ble.n	10064 <_strtol_l.isra.0+0xcc>
   1002a:	1c59      	adds	r1, r3, #1
   1002c:	d009      	beq.n	10042 <_strtol_l.isra.0+0xaa>
   1002e:	4663      	mov	r3, ip
   10030:	4282      	cmp	r2, r0
   10032:	d306      	bcc.n	10042 <_strtol_l.isra.0+0xaa>
   10034:	d102      	bne.n	1003c <_strtol_l.isra.0+0xa4>
   10036:	9904      	ldr	r1, [sp, #16]
   10038:	42a1      	cmp	r1, r4
   1003a:	db02      	blt.n	10042 <_strtol_l.isra.0+0xaa>
   1003c:	2301      	movs	r3, #1
   1003e:	4378      	muls	r0, r7
   10040:	1820      	adds	r0, r4, r0
   10042:	782c      	ldrb	r4, [r5, #0]
   10044:	3501      	adds	r5, #1
   10046:	e7e9      	b.n	1001c <_strtol_l.isra.0+0x84>
   10048:	270a      	movs	r7, #10
   1004a:	e7d5      	b.n	fff8 <_strtol_l.isra.0+0x60>
   1004c:	0021      	movs	r1, r4
   1004e:	3941      	subs	r1, #65	; 0x41
   10050:	2919      	cmp	r1, #25
   10052:	d801      	bhi.n	10058 <_strtol_l.isra.0+0xc0>
   10054:	3c37      	subs	r4, #55	; 0x37
   10056:	e7e6      	b.n	10026 <_strtol_l.isra.0+0x8e>
   10058:	0021      	movs	r1, r4
   1005a:	3961      	subs	r1, #97	; 0x61
   1005c:	2919      	cmp	r1, #25
   1005e:	d801      	bhi.n	10064 <_strtol_l.isra.0+0xcc>
   10060:	3c57      	subs	r4, #87	; 0x57
   10062:	e7e0      	b.n	10026 <_strtol_l.isra.0+0x8e>
   10064:	1c5a      	adds	r2, r3, #1
   10066:	d108      	bne.n	1007a <_strtol_l.isra.0+0xe2>
   10068:	9a05      	ldr	r2, [sp, #20]
   1006a:	3323      	adds	r3, #35	; 0x23
   1006c:	6013      	str	r3, [r2, #0]
   1006e:	9b02      	ldr	r3, [sp, #8]
   10070:	0030      	movs	r0, r6
   10072:	2b00      	cmp	r3, #0
   10074:	d10b      	bne.n	1008e <_strtol_l.isra.0+0xf6>
   10076:	b007      	add	sp, #28
   10078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1007a:	9a01      	ldr	r2, [sp, #4]
   1007c:	2a00      	cmp	r2, #0
   1007e:	d000      	beq.n	10082 <_strtol_l.isra.0+0xea>
   10080:	4240      	negs	r0, r0
   10082:	9a02      	ldr	r2, [sp, #8]
   10084:	2a00      	cmp	r2, #0
   10086:	d0f6      	beq.n	10076 <_strtol_l.isra.0+0xde>
   10088:	9a03      	ldr	r2, [sp, #12]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d000      	beq.n	10090 <_strtol_l.isra.0+0xf8>
   1008e:	1e6a      	subs	r2, r5, #1
   10090:	9b02      	ldr	r3, [sp, #8]
   10092:	601a      	str	r2, [r3, #0]
   10094:	e7ef      	b.n	10076 <_strtol_l.isra.0+0xde>
   10096:	2430      	movs	r4, #48	; 0x30
   10098:	2f00      	cmp	r7, #0
   1009a:	d1ad      	bne.n	fff8 <_strtol_l.isra.0+0x60>
   1009c:	3708      	adds	r7, #8
   1009e:	e7ab      	b.n	fff8 <_strtol_l.isra.0+0x60>
   100a0:	7fffffff 	.word	0x7fffffff

000100a4 <strtol>:
   100a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   100a6:	0013      	movs	r3, r2
   100a8:	4a06      	ldr	r2, [pc, #24]	; (100c4 <strtol+0x20>)
   100aa:	0005      	movs	r5, r0
   100ac:	6810      	ldr	r0, [r2, #0]
   100ae:	6a04      	ldr	r4, [r0, #32]
   100b0:	2c00      	cmp	r4, #0
   100b2:	d100      	bne.n	100b6 <strtol+0x12>
   100b4:	4c04      	ldr	r4, [pc, #16]	; (100c8 <strtol+0x24>)
   100b6:	000a      	movs	r2, r1
   100b8:	9400      	str	r4, [sp, #0]
   100ba:	0029      	movs	r1, r5
   100bc:	f7ff ff6c 	bl	ff98 <_strtol_l.isra.0>
   100c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   100c2:	46c0      	nop			; (mov r8, r8)
   100c4:	2000021c 	.word	0x2000021c
   100c8:	20000280 	.word	0x20000280

000100cc <__swbuf_r>:
   100cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100ce:	0005      	movs	r5, r0
   100d0:	000e      	movs	r6, r1
   100d2:	0014      	movs	r4, r2
   100d4:	2800      	cmp	r0, #0
   100d6:	d004      	beq.n	100e2 <__swbuf_r+0x16>
   100d8:	6983      	ldr	r3, [r0, #24]
   100da:	2b00      	cmp	r3, #0
   100dc:	d101      	bne.n	100e2 <__swbuf_r+0x16>
   100de:	f000 f9b9 	bl	10454 <__sinit>
   100e2:	4b22      	ldr	r3, [pc, #136]	; (1016c <__swbuf_r+0xa0>)
   100e4:	429c      	cmp	r4, r3
   100e6:	d12d      	bne.n	10144 <__swbuf_r+0x78>
   100e8:	686c      	ldr	r4, [r5, #4]
   100ea:	69a3      	ldr	r3, [r4, #24]
   100ec:	60a3      	str	r3, [r4, #8]
   100ee:	89a3      	ldrh	r3, [r4, #12]
   100f0:	071b      	lsls	r3, r3, #28
   100f2:	d531      	bpl.n	10158 <__swbuf_r+0x8c>
   100f4:	6923      	ldr	r3, [r4, #16]
   100f6:	2b00      	cmp	r3, #0
   100f8:	d02e      	beq.n	10158 <__swbuf_r+0x8c>
   100fa:	6823      	ldr	r3, [r4, #0]
   100fc:	6922      	ldr	r2, [r4, #16]
   100fe:	b2f7      	uxtb	r7, r6
   10100:	1a98      	subs	r0, r3, r2
   10102:	6963      	ldr	r3, [r4, #20]
   10104:	b2f6      	uxtb	r6, r6
   10106:	4298      	cmp	r0, r3
   10108:	db05      	blt.n	10116 <__swbuf_r+0x4a>
   1010a:	0021      	movs	r1, r4
   1010c:	0028      	movs	r0, r5
   1010e:	f000 f933 	bl	10378 <_fflush_r>
   10112:	2800      	cmp	r0, #0
   10114:	d126      	bne.n	10164 <__swbuf_r+0x98>
   10116:	68a3      	ldr	r3, [r4, #8]
   10118:	3001      	adds	r0, #1
   1011a:	3b01      	subs	r3, #1
   1011c:	60a3      	str	r3, [r4, #8]
   1011e:	6823      	ldr	r3, [r4, #0]
   10120:	1c5a      	adds	r2, r3, #1
   10122:	6022      	str	r2, [r4, #0]
   10124:	701f      	strb	r7, [r3, #0]
   10126:	6963      	ldr	r3, [r4, #20]
   10128:	4298      	cmp	r0, r3
   1012a:	d004      	beq.n	10136 <__swbuf_r+0x6a>
   1012c:	89a3      	ldrh	r3, [r4, #12]
   1012e:	07db      	lsls	r3, r3, #31
   10130:	d51a      	bpl.n	10168 <__swbuf_r+0x9c>
   10132:	2e0a      	cmp	r6, #10
   10134:	d118      	bne.n	10168 <__swbuf_r+0x9c>
   10136:	0021      	movs	r1, r4
   10138:	0028      	movs	r0, r5
   1013a:	f000 f91d 	bl	10378 <_fflush_r>
   1013e:	2800      	cmp	r0, #0
   10140:	d012      	beq.n	10168 <__swbuf_r+0x9c>
   10142:	e00f      	b.n	10164 <__swbuf_r+0x98>
   10144:	4b0a      	ldr	r3, [pc, #40]	; (10170 <__swbuf_r+0xa4>)
   10146:	429c      	cmp	r4, r3
   10148:	d101      	bne.n	1014e <__swbuf_r+0x82>
   1014a:	68ac      	ldr	r4, [r5, #8]
   1014c:	e7cd      	b.n	100ea <__swbuf_r+0x1e>
   1014e:	4b09      	ldr	r3, [pc, #36]	; (10174 <__swbuf_r+0xa8>)
   10150:	429c      	cmp	r4, r3
   10152:	d1ca      	bne.n	100ea <__swbuf_r+0x1e>
   10154:	68ec      	ldr	r4, [r5, #12]
   10156:	e7c8      	b.n	100ea <__swbuf_r+0x1e>
   10158:	0021      	movs	r1, r4
   1015a:	0028      	movs	r0, r5
   1015c:	f000 f80c 	bl	10178 <__swsetup_r>
   10160:	2800      	cmp	r0, #0
   10162:	d0ca      	beq.n	100fa <__swbuf_r+0x2e>
   10164:	2601      	movs	r6, #1
   10166:	4276      	negs	r6, r6
   10168:	0030      	movs	r0, r6
   1016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1016c:	000127f0 	.word	0x000127f0
   10170:	00012810 	.word	0x00012810
   10174:	000127d0 	.word	0x000127d0

00010178 <__swsetup_r>:
   10178:	4b36      	ldr	r3, [pc, #216]	; (10254 <__swsetup_r+0xdc>)
   1017a:	b570      	push	{r4, r5, r6, lr}
   1017c:	681d      	ldr	r5, [r3, #0]
   1017e:	0006      	movs	r6, r0
   10180:	000c      	movs	r4, r1
   10182:	2d00      	cmp	r5, #0
   10184:	d005      	beq.n	10192 <__swsetup_r+0x1a>
   10186:	69ab      	ldr	r3, [r5, #24]
   10188:	2b00      	cmp	r3, #0
   1018a:	d102      	bne.n	10192 <__swsetup_r+0x1a>
   1018c:	0028      	movs	r0, r5
   1018e:	f000 f961 	bl	10454 <__sinit>
   10192:	4b31      	ldr	r3, [pc, #196]	; (10258 <__swsetup_r+0xe0>)
   10194:	429c      	cmp	r4, r3
   10196:	d10f      	bne.n	101b8 <__swsetup_r+0x40>
   10198:	686c      	ldr	r4, [r5, #4]
   1019a:	230c      	movs	r3, #12
   1019c:	5ee2      	ldrsh	r2, [r4, r3]
   1019e:	b293      	uxth	r3, r2
   101a0:	0719      	lsls	r1, r3, #28
   101a2:	d42d      	bmi.n	10200 <__swsetup_r+0x88>
   101a4:	06d9      	lsls	r1, r3, #27
   101a6:	d411      	bmi.n	101cc <__swsetup_r+0x54>
   101a8:	2309      	movs	r3, #9
   101aa:	2001      	movs	r0, #1
   101ac:	6033      	str	r3, [r6, #0]
   101ae:	3337      	adds	r3, #55	; 0x37
   101b0:	4313      	orrs	r3, r2
   101b2:	81a3      	strh	r3, [r4, #12]
   101b4:	4240      	negs	r0, r0
   101b6:	bd70      	pop	{r4, r5, r6, pc}
   101b8:	4b28      	ldr	r3, [pc, #160]	; (1025c <__swsetup_r+0xe4>)
   101ba:	429c      	cmp	r4, r3
   101bc:	d101      	bne.n	101c2 <__swsetup_r+0x4a>
   101be:	68ac      	ldr	r4, [r5, #8]
   101c0:	e7eb      	b.n	1019a <__swsetup_r+0x22>
   101c2:	4b27      	ldr	r3, [pc, #156]	; (10260 <__swsetup_r+0xe8>)
   101c4:	429c      	cmp	r4, r3
   101c6:	d1e8      	bne.n	1019a <__swsetup_r+0x22>
   101c8:	68ec      	ldr	r4, [r5, #12]
   101ca:	e7e6      	b.n	1019a <__swsetup_r+0x22>
   101cc:	075b      	lsls	r3, r3, #29
   101ce:	d513      	bpl.n	101f8 <__swsetup_r+0x80>
   101d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   101d2:	2900      	cmp	r1, #0
   101d4:	d008      	beq.n	101e8 <__swsetup_r+0x70>
   101d6:	0023      	movs	r3, r4
   101d8:	3344      	adds	r3, #68	; 0x44
   101da:	4299      	cmp	r1, r3
   101dc:	d002      	beq.n	101e4 <__swsetup_r+0x6c>
   101de:	0030      	movs	r0, r6
   101e0:	f7ff fc2a 	bl	fa38 <_free_r>
   101e4:	2300      	movs	r3, #0
   101e6:	6363      	str	r3, [r4, #52]	; 0x34
   101e8:	2224      	movs	r2, #36	; 0x24
   101ea:	89a3      	ldrh	r3, [r4, #12]
   101ec:	4393      	bics	r3, r2
   101ee:	81a3      	strh	r3, [r4, #12]
   101f0:	2300      	movs	r3, #0
   101f2:	6063      	str	r3, [r4, #4]
   101f4:	6923      	ldr	r3, [r4, #16]
   101f6:	6023      	str	r3, [r4, #0]
   101f8:	2308      	movs	r3, #8
   101fa:	89a2      	ldrh	r2, [r4, #12]
   101fc:	4313      	orrs	r3, r2
   101fe:	81a3      	strh	r3, [r4, #12]
   10200:	6923      	ldr	r3, [r4, #16]
   10202:	2b00      	cmp	r3, #0
   10204:	d10b      	bne.n	1021e <__swsetup_r+0xa6>
   10206:	21a0      	movs	r1, #160	; 0xa0
   10208:	2280      	movs	r2, #128	; 0x80
   1020a:	89a3      	ldrh	r3, [r4, #12]
   1020c:	0089      	lsls	r1, r1, #2
   1020e:	0092      	lsls	r2, r2, #2
   10210:	400b      	ands	r3, r1
   10212:	4293      	cmp	r3, r2
   10214:	d003      	beq.n	1021e <__swsetup_r+0xa6>
   10216:	0021      	movs	r1, r4
   10218:	0030      	movs	r0, r6
   1021a:	f000 f9db 	bl	105d4 <__smakebuf_r>
   1021e:	2301      	movs	r3, #1
   10220:	89a2      	ldrh	r2, [r4, #12]
   10222:	4013      	ands	r3, r2
   10224:	d011      	beq.n	1024a <__swsetup_r+0xd2>
   10226:	2300      	movs	r3, #0
   10228:	60a3      	str	r3, [r4, #8]
   1022a:	6963      	ldr	r3, [r4, #20]
   1022c:	425b      	negs	r3, r3
   1022e:	61a3      	str	r3, [r4, #24]
   10230:	2000      	movs	r0, #0
   10232:	6923      	ldr	r3, [r4, #16]
   10234:	4283      	cmp	r3, r0
   10236:	d1be      	bne.n	101b6 <__swsetup_r+0x3e>
   10238:	230c      	movs	r3, #12
   1023a:	5ee2      	ldrsh	r2, [r4, r3]
   1023c:	0613      	lsls	r3, r2, #24
   1023e:	d5ba      	bpl.n	101b6 <__swsetup_r+0x3e>
   10240:	2340      	movs	r3, #64	; 0x40
   10242:	4313      	orrs	r3, r2
   10244:	81a3      	strh	r3, [r4, #12]
   10246:	3801      	subs	r0, #1
   10248:	e7b5      	b.n	101b6 <__swsetup_r+0x3e>
   1024a:	0792      	lsls	r2, r2, #30
   1024c:	d400      	bmi.n	10250 <__swsetup_r+0xd8>
   1024e:	6963      	ldr	r3, [r4, #20]
   10250:	60a3      	str	r3, [r4, #8]
   10252:	e7ed      	b.n	10230 <__swsetup_r+0xb8>
   10254:	2000021c 	.word	0x2000021c
   10258:	000127f0 	.word	0x000127f0
   1025c:	00012810 	.word	0x00012810
   10260:	000127d0 	.word	0x000127d0

00010264 <__sflush_r>:
   10264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10266:	898a      	ldrh	r2, [r1, #12]
   10268:	0005      	movs	r5, r0
   1026a:	000c      	movs	r4, r1
   1026c:	0713      	lsls	r3, r2, #28
   1026e:	d460      	bmi.n	10332 <__sflush_r+0xce>
   10270:	684b      	ldr	r3, [r1, #4]
   10272:	2b00      	cmp	r3, #0
   10274:	dc04      	bgt.n	10280 <__sflush_r+0x1c>
   10276:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10278:	2b00      	cmp	r3, #0
   1027a:	dc01      	bgt.n	10280 <__sflush_r+0x1c>
   1027c:	2000      	movs	r0, #0
   1027e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10280:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10282:	2f00      	cmp	r7, #0
   10284:	d0fa      	beq.n	1027c <__sflush_r+0x18>
   10286:	2300      	movs	r3, #0
   10288:	682e      	ldr	r6, [r5, #0]
   1028a:	602b      	str	r3, [r5, #0]
   1028c:	2380      	movs	r3, #128	; 0x80
   1028e:	015b      	lsls	r3, r3, #5
   10290:	401a      	ands	r2, r3
   10292:	d034      	beq.n	102fe <__sflush_r+0x9a>
   10294:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10296:	89a3      	ldrh	r3, [r4, #12]
   10298:	075b      	lsls	r3, r3, #29
   1029a:	d506      	bpl.n	102aa <__sflush_r+0x46>
   1029c:	6863      	ldr	r3, [r4, #4]
   1029e:	1ac0      	subs	r0, r0, r3
   102a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   102a2:	2b00      	cmp	r3, #0
   102a4:	d001      	beq.n	102aa <__sflush_r+0x46>
   102a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   102a8:	1ac0      	subs	r0, r0, r3
   102aa:	0002      	movs	r2, r0
   102ac:	6a21      	ldr	r1, [r4, #32]
   102ae:	2300      	movs	r3, #0
   102b0:	0028      	movs	r0, r5
   102b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   102b4:	47b8      	blx	r7
   102b6:	89a1      	ldrh	r1, [r4, #12]
   102b8:	1c43      	adds	r3, r0, #1
   102ba:	d106      	bne.n	102ca <__sflush_r+0x66>
   102bc:	682b      	ldr	r3, [r5, #0]
   102be:	2b1d      	cmp	r3, #29
   102c0:	d831      	bhi.n	10326 <__sflush_r+0xc2>
   102c2:	4a2c      	ldr	r2, [pc, #176]	; (10374 <__sflush_r+0x110>)
   102c4:	40da      	lsrs	r2, r3
   102c6:	07d3      	lsls	r3, r2, #31
   102c8:	d52d      	bpl.n	10326 <__sflush_r+0xc2>
   102ca:	2300      	movs	r3, #0
   102cc:	6063      	str	r3, [r4, #4]
   102ce:	6923      	ldr	r3, [r4, #16]
   102d0:	6023      	str	r3, [r4, #0]
   102d2:	04cb      	lsls	r3, r1, #19
   102d4:	d505      	bpl.n	102e2 <__sflush_r+0x7e>
   102d6:	1c43      	adds	r3, r0, #1
   102d8:	d102      	bne.n	102e0 <__sflush_r+0x7c>
   102da:	682b      	ldr	r3, [r5, #0]
   102dc:	2b00      	cmp	r3, #0
   102de:	d100      	bne.n	102e2 <__sflush_r+0x7e>
   102e0:	6560      	str	r0, [r4, #84]	; 0x54
   102e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   102e4:	602e      	str	r6, [r5, #0]
   102e6:	2900      	cmp	r1, #0
   102e8:	d0c8      	beq.n	1027c <__sflush_r+0x18>
   102ea:	0023      	movs	r3, r4
   102ec:	3344      	adds	r3, #68	; 0x44
   102ee:	4299      	cmp	r1, r3
   102f0:	d002      	beq.n	102f8 <__sflush_r+0x94>
   102f2:	0028      	movs	r0, r5
   102f4:	f7ff fba0 	bl	fa38 <_free_r>
   102f8:	2000      	movs	r0, #0
   102fa:	6360      	str	r0, [r4, #52]	; 0x34
   102fc:	e7bf      	b.n	1027e <__sflush_r+0x1a>
   102fe:	2301      	movs	r3, #1
   10300:	6a21      	ldr	r1, [r4, #32]
   10302:	0028      	movs	r0, r5
   10304:	47b8      	blx	r7
   10306:	1c43      	adds	r3, r0, #1
   10308:	d1c5      	bne.n	10296 <__sflush_r+0x32>
   1030a:	682b      	ldr	r3, [r5, #0]
   1030c:	2b00      	cmp	r3, #0
   1030e:	d0c2      	beq.n	10296 <__sflush_r+0x32>
   10310:	2b1d      	cmp	r3, #29
   10312:	d001      	beq.n	10318 <__sflush_r+0xb4>
   10314:	2b16      	cmp	r3, #22
   10316:	d101      	bne.n	1031c <__sflush_r+0xb8>
   10318:	602e      	str	r6, [r5, #0]
   1031a:	e7af      	b.n	1027c <__sflush_r+0x18>
   1031c:	2340      	movs	r3, #64	; 0x40
   1031e:	89a2      	ldrh	r2, [r4, #12]
   10320:	4313      	orrs	r3, r2
   10322:	81a3      	strh	r3, [r4, #12]
   10324:	e7ab      	b.n	1027e <__sflush_r+0x1a>
   10326:	2340      	movs	r3, #64	; 0x40
   10328:	430b      	orrs	r3, r1
   1032a:	2001      	movs	r0, #1
   1032c:	81a3      	strh	r3, [r4, #12]
   1032e:	4240      	negs	r0, r0
   10330:	e7a5      	b.n	1027e <__sflush_r+0x1a>
   10332:	690f      	ldr	r7, [r1, #16]
   10334:	2f00      	cmp	r7, #0
   10336:	d0a1      	beq.n	1027c <__sflush_r+0x18>
   10338:	680b      	ldr	r3, [r1, #0]
   1033a:	600f      	str	r7, [r1, #0]
   1033c:	1bdb      	subs	r3, r3, r7
   1033e:	9301      	str	r3, [sp, #4]
   10340:	2300      	movs	r3, #0
   10342:	0792      	lsls	r2, r2, #30
   10344:	d100      	bne.n	10348 <__sflush_r+0xe4>
   10346:	694b      	ldr	r3, [r1, #20]
   10348:	60a3      	str	r3, [r4, #8]
   1034a:	9b01      	ldr	r3, [sp, #4]
   1034c:	2b00      	cmp	r3, #0
   1034e:	dc00      	bgt.n	10352 <__sflush_r+0xee>
   10350:	e794      	b.n	1027c <__sflush_r+0x18>
   10352:	9b01      	ldr	r3, [sp, #4]
   10354:	003a      	movs	r2, r7
   10356:	6a21      	ldr	r1, [r4, #32]
   10358:	0028      	movs	r0, r5
   1035a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1035c:	47b0      	blx	r6
   1035e:	2800      	cmp	r0, #0
   10360:	dc03      	bgt.n	1036a <__sflush_r+0x106>
   10362:	2340      	movs	r3, #64	; 0x40
   10364:	89a2      	ldrh	r2, [r4, #12]
   10366:	4313      	orrs	r3, r2
   10368:	e7df      	b.n	1032a <__sflush_r+0xc6>
   1036a:	9b01      	ldr	r3, [sp, #4]
   1036c:	183f      	adds	r7, r7, r0
   1036e:	1a1b      	subs	r3, r3, r0
   10370:	9301      	str	r3, [sp, #4]
   10372:	e7ea      	b.n	1034a <__sflush_r+0xe6>
   10374:	20400001 	.word	0x20400001

00010378 <_fflush_r>:
   10378:	690b      	ldr	r3, [r1, #16]
   1037a:	b570      	push	{r4, r5, r6, lr}
   1037c:	0005      	movs	r5, r0
   1037e:	000c      	movs	r4, r1
   10380:	2b00      	cmp	r3, #0
   10382:	d101      	bne.n	10388 <_fflush_r+0x10>
   10384:	2000      	movs	r0, #0
   10386:	bd70      	pop	{r4, r5, r6, pc}
   10388:	2800      	cmp	r0, #0
   1038a:	d004      	beq.n	10396 <_fflush_r+0x1e>
   1038c:	6983      	ldr	r3, [r0, #24]
   1038e:	2b00      	cmp	r3, #0
   10390:	d101      	bne.n	10396 <_fflush_r+0x1e>
   10392:	f000 f85f 	bl	10454 <__sinit>
   10396:	4b0b      	ldr	r3, [pc, #44]	; (103c4 <_fflush_r+0x4c>)
   10398:	429c      	cmp	r4, r3
   1039a:	d109      	bne.n	103b0 <_fflush_r+0x38>
   1039c:	686c      	ldr	r4, [r5, #4]
   1039e:	220c      	movs	r2, #12
   103a0:	5ea3      	ldrsh	r3, [r4, r2]
   103a2:	2b00      	cmp	r3, #0
   103a4:	d0ee      	beq.n	10384 <_fflush_r+0xc>
   103a6:	0021      	movs	r1, r4
   103a8:	0028      	movs	r0, r5
   103aa:	f7ff ff5b 	bl	10264 <__sflush_r>
   103ae:	e7ea      	b.n	10386 <_fflush_r+0xe>
   103b0:	4b05      	ldr	r3, [pc, #20]	; (103c8 <_fflush_r+0x50>)
   103b2:	429c      	cmp	r4, r3
   103b4:	d101      	bne.n	103ba <_fflush_r+0x42>
   103b6:	68ac      	ldr	r4, [r5, #8]
   103b8:	e7f1      	b.n	1039e <_fflush_r+0x26>
   103ba:	4b04      	ldr	r3, [pc, #16]	; (103cc <_fflush_r+0x54>)
   103bc:	429c      	cmp	r4, r3
   103be:	d1ee      	bne.n	1039e <_fflush_r+0x26>
   103c0:	68ec      	ldr	r4, [r5, #12]
   103c2:	e7ec      	b.n	1039e <_fflush_r+0x26>
   103c4:	000127f0 	.word	0x000127f0
   103c8:	00012810 	.word	0x00012810
   103cc:	000127d0 	.word	0x000127d0

000103d0 <_cleanup_r>:
   103d0:	b510      	push	{r4, lr}
   103d2:	4902      	ldr	r1, [pc, #8]	; (103dc <_cleanup_r+0xc>)
   103d4:	f000 f8b2 	bl	1053c <_fwalk_reent>
   103d8:	bd10      	pop	{r4, pc}
   103da:	46c0      	nop			; (mov r8, r8)
   103dc:	00010379 	.word	0x00010379

000103e0 <std.isra.0>:
   103e0:	2300      	movs	r3, #0
   103e2:	b510      	push	{r4, lr}
   103e4:	0004      	movs	r4, r0
   103e6:	6003      	str	r3, [r0, #0]
   103e8:	6043      	str	r3, [r0, #4]
   103ea:	6083      	str	r3, [r0, #8]
   103ec:	8181      	strh	r1, [r0, #12]
   103ee:	6643      	str	r3, [r0, #100]	; 0x64
   103f0:	81c2      	strh	r2, [r0, #14]
   103f2:	6103      	str	r3, [r0, #16]
   103f4:	6143      	str	r3, [r0, #20]
   103f6:	6183      	str	r3, [r0, #24]
   103f8:	0019      	movs	r1, r3
   103fa:	2208      	movs	r2, #8
   103fc:	305c      	adds	r0, #92	; 0x5c
   103fe:	f7ff fb12 	bl	fa26 <memset>
   10402:	4b05      	ldr	r3, [pc, #20]	; (10418 <std.isra.0+0x38>)
   10404:	6224      	str	r4, [r4, #32]
   10406:	6263      	str	r3, [r4, #36]	; 0x24
   10408:	4b04      	ldr	r3, [pc, #16]	; (1041c <std.isra.0+0x3c>)
   1040a:	62a3      	str	r3, [r4, #40]	; 0x28
   1040c:	4b04      	ldr	r3, [pc, #16]	; (10420 <std.isra.0+0x40>)
   1040e:	62e3      	str	r3, [r4, #44]	; 0x2c
   10410:	4b04      	ldr	r3, [pc, #16]	; (10424 <std.isra.0+0x44>)
   10412:	6323      	str	r3, [r4, #48]	; 0x30
   10414:	bd10      	pop	{r4, pc}
   10416:	46c0      	nop			; (mov r8, r8)
   10418:	00010f49 	.word	0x00010f49
   1041c:	00010f71 	.word	0x00010f71
   10420:	00010fa9 	.word	0x00010fa9
   10424:	00010fd5 	.word	0x00010fd5

00010428 <__sfmoreglue>:
   10428:	b570      	push	{r4, r5, r6, lr}
   1042a:	2568      	movs	r5, #104	; 0x68
   1042c:	1e4a      	subs	r2, r1, #1
   1042e:	4355      	muls	r5, r2
   10430:	000e      	movs	r6, r1
   10432:	0029      	movs	r1, r5
   10434:	3174      	adds	r1, #116	; 0x74
   10436:	f7ff fb49 	bl	facc <_malloc_r>
   1043a:	1e04      	subs	r4, r0, #0
   1043c:	d008      	beq.n	10450 <__sfmoreglue+0x28>
   1043e:	2100      	movs	r1, #0
   10440:	002a      	movs	r2, r5
   10442:	6001      	str	r1, [r0, #0]
   10444:	6046      	str	r6, [r0, #4]
   10446:	300c      	adds	r0, #12
   10448:	60a0      	str	r0, [r4, #8]
   1044a:	3268      	adds	r2, #104	; 0x68
   1044c:	f7ff faeb 	bl	fa26 <memset>
   10450:	0020      	movs	r0, r4
   10452:	bd70      	pop	{r4, r5, r6, pc}

00010454 <__sinit>:
   10454:	6983      	ldr	r3, [r0, #24]
   10456:	b513      	push	{r0, r1, r4, lr}
   10458:	0004      	movs	r4, r0
   1045a:	2b00      	cmp	r3, #0
   1045c:	d128      	bne.n	104b0 <__sinit+0x5c>
   1045e:	6483      	str	r3, [r0, #72]	; 0x48
   10460:	64c3      	str	r3, [r0, #76]	; 0x4c
   10462:	6503      	str	r3, [r0, #80]	; 0x50
   10464:	4b13      	ldr	r3, [pc, #76]	; (104b4 <__sinit+0x60>)
   10466:	4a14      	ldr	r2, [pc, #80]	; (104b8 <__sinit+0x64>)
   10468:	681b      	ldr	r3, [r3, #0]
   1046a:	6282      	str	r2, [r0, #40]	; 0x28
   1046c:	9301      	str	r3, [sp, #4]
   1046e:	4298      	cmp	r0, r3
   10470:	d101      	bne.n	10476 <__sinit+0x22>
   10472:	2301      	movs	r3, #1
   10474:	6183      	str	r3, [r0, #24]
   10476:	0020      	movs	r0, r4
   10478:	f000 f820 	bl	104bc <__sfp>
   1047c:	6060      	str	r0, [r4, #4]
   1047e:	0020      	movs	r0, r4
   10480:	f000 f81c 	bl	104bc <__sfp>
   10484:	60a0      	str	r0, [r4, #8]
   10486:	0020      	movs	r0, r4
   10488:	f000 f818 	bl	104bc <__sfp>
   1048c:	2200      	movs	r2, #0
   1048e:	60e0      	str	r0, [r4, #12]
   10490:	2104      	movs	r1, #4
   10492:	6860      	ldr	r0, [r4, #4]
   10494:	f7ff ffa4 	bl	103e0 <std.isra.0>
   10498:	2201      	movs	r2, #1
   1049a:	2109      	movs	r1, #9
   1049c:	68a0      	ldr	r0, [r4, #8]
   1049e:	f7ff ff9f 	bl	103e0 <std.isra.0>
   104a2:	2202      	movs	r2, #2
   104a4:	2112      	movs	r1, #18
   104a6:	68e0      	ldr	r0, [r4, #12]
   104a8:	f7ff ff9a 	bl	103e0 <std.isra.0>
   104ac:	2301      	movs	r3, #1
   104ae:	61a3      	str	r3, [r4, #24]
   104b0:	bd13      	pop	{r0, r1, r4, pc}
   104b2:	46c0      	nop			; (mov r8, r8)
   104b4:	000127cc 	.word	0x000127cc
   104b8:	000103d1 	.word	0x000103d1

000104bc <__sfp>:
   104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104be:	4b1e      	ldr	r3, [pc, #120]	; (10538 <__sfp+0x7c>)
   104c0:	0007      	movs	r7, r0
   104c2:	681e      	ldr	r6, [r3, #0]
   104c4:	69b3      	ldr	r3, [r6, #24]
   104c6:	2b00      	cmp	r3, #0
   104c8:	d102      	bne.n	104d0 <__sfp+0x14>
   104ca:	0030      	movs	r0, r6
   104cc:	f7ff ffc2 	bl	10454 <__sinit>
   104d0:	3648      	adds	r6, #72	; 0x48
   104d2:	68b4      	ldr	r4, [r6, #8]
   104d4:	6873      	ldr	r3, [r6, #4]
   104d6:	3b01      	subs	r3, #1
   104d8:	d504      	bpl.n	104e4 <__sfp+0x28>
   104da:	6833      	ldr	r3, [r6, #0]
   104dc:	2b00      	cmp	r3, #0
   104de:	d007      	beq.n	104f0 <__sfp+0x34>
   104e0:	6836      	ldr	r6, [r6, #0]
   104e2:	e7f6      	b.n	104d2 <__sfp+0x16>
   104e4:	220c      	movs	r2, #12
   104e6:	5ea5      	ldrsh	r5, [r4, r2]
   104e8:	2d00      	cmp	r5, #0
   104ea:	d00d      	beq.n	10508 <__sfp+0x4c>
   104ec:	3468      	adds	r4, #104	; 0x68
   104ee:	e7f2      	b.n	104d6 <__sfp+0x1a>
   104f0:	2104      	movs	r1, #4
   104f2:	0038      	movs	r0, r7
   104f4:	f7ff ff98 	bl	10428 <__sfmoreglue>
   104f8:	6030      	str	r0, [r6, #0]
   104fa:	2800      	cmp	r0, #0
   104fc:	d1f0      	bne.n	104e0 <__sfp+0x24>
   104fe:	230c      	movs	r3, #12
   10500:	0004      	movs	r4, r0
   10502:	603b      	str	r3, [r7, #0]
   10504:	0020      	movs	r0, r4
   10506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10508:	2301      	movs	r3, #1
   1050a:	0020      	movs	r0, r4
   1050c:	425b      	negs	r3, r3
   1050e:	81e3      	strh	r3, [r4, #14]
   10510:	3302      	adds	r3, #2
   10512:	81a3      	strh	r3, [r4, #12]
   10514:	6665      	str	r5, [r4, #100]	; 0x64
   10516:	6025      	str	r5, [r4, #0]
   10518:	60a5      	str	r5, [r4, #8]
   1051a:	6065      	str	r5, [r4, #4]
   1051c:	6125      	str	r5, [r4, #16]
   1051e:	6165      	str	r5, [r4, #20]
   10520:	61a5      	str	r5, [r4, #24]
   10522:	2208      	movs	r2, #8
   10524:	0029      	movs	r1, r5
   10526:	305c      	adds	r0, #92	; 0x5c
   10528:	f7ff fa7d 	bl	fa26 <memset>
   1052c:	6365      	str	r5, [r4, #52]	; 0x34
   1052e:	63a5      	str	r5, [r4, #56]	; 0x38
   10530:	64a5      	str	r5, [r4, #72]	; 0x48
   10532:	64e5      	str	r5, [r4, #76]	; 0x4c
   10534:	e7e6      	b.n	10504 <__sfp+0x48>
   10536:	46c0      	nop			; (mov r8, r8)
   10538:	000127cc 	.word	0x000127cc

0001053c <_fwalk_reent>:
   1053c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1053e:	0004      	movs	r4, r0
   10540:	0007      	movs	r7, r0
   10542:	2600      	movs	r6, #0
   10544:	9101      	str	r1, [sp, #4]
   10546:	3448      	adds	r4, #72	; 0x48
   10548:	2c00      	cmp	r4, #0
   1054a:	d101      	bne.n	10550 <_fwalk_reent+0x14>
   1054c:	0030      	movs	r0, r6
   1054e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10550:	6863      	ldr	r3, [r4, #4]
   10552:	68a5      	ldr	r5, [r4, #8]
   10554:	9300      	str	r3, [sp, #0]
   10556:	9b00      	ldr	r3, [sp, #0]
   10558:	3b01      	subs	r3, #1
   1055a:	9300      	str	r3, [sp, #0]
   1055c:	d501      	bpl.n	10562 <_fwalk_reent+0x26>
   1055e:	6824      	ldr	r4, [r4, #0]
   10560:	e7f2      	b.n	10548 <_fwalk_reent+0xc>
   10562:	89ab      	ldrh	r3, [r5, #12]
   10564:	2b01      	cmp	r3, #1
   10566:	d908      	bls.n	1057a <_fwalk_reent+0x3e>
   10568:	220e      	movs	r2, #14
   1056a:	5eab      	ldrsh	r3, [r5, r2]
   1056c:	3301      	adds	r3, #1
   1056e:	d004      	beq.n	1057a <_fwalk_reent+0x3e>
   10570:	0029      	movs	r1, r5
   10572:	0038      	movs	r0, r7
   10574:	9b01      	ldr	r3, [sp, #4]
   10576:	4798      	blx	r3
   10578:	4306      	orrs	r6, r0
   1057a:	3568      	adds	r5, #104	; 0x68
   1057c:	e7eb      	b.n	10556 <_fwalk_reent+0x1a>

0001057e <__locale_ctype_ptr_l>:
   1057e:	30ec      	adds	r0, #236	; 0xec
   10580:	6800      	ldr	r0, [r0, #0]
   10582:	4770      	bx	lr

00010584 <__swhatbuf_r>:
   10584:	b570      	push	{r4, r5, r6, lr}
   10586:	000e      	movs	r6, r1
   10588:	001d      	movs	r5, r3
   1058a:	230e      	movs	r3, #14
   1058c:	5ec9      	ldrsh	r1, [r1, r3]
   1058e:	b090      	sub	sp, #64	; 0x40
   10590:	0014      	movs	r4, r2
   10592:	2900      	cmp	r1, #0
   10594:	da07      	bge.n	105a6 <__swhatbuf_r+0x22>
   10596:	2300      	movs	r3, #0
   10598:	602b      	str	r3, [r5, #0]
   1059a:	89b3      	ldrh	r3, [r6, #12]
   1059c:	061b      	lsls	r3, r3, #24
   1059e:	d411      	bmi.n	105c4 <__swhatbuf_r+0x40>
   105a0:	2380      	movs	r3, #128	; 0x80
   105a2:	00db      	lsls	r3, r3, #3
   105a4:	e00f      	b.n	105c6 <__swhatbuf_r+0x42>
   105a6:	aa01      	add	r2, sp, #4
   105a8:	f000 fd5a 	bl	11060 <_fstat_r>
   105ac:	2800      	cmp	r0, #0
   105ae:	dbf2      	blt.n	10596 <__swhatbuf_r+0x12>
   105b0:	22f0      	movs	r2, #240	; 0xf0
   105b2:	9b02      	ldr	r3, [sp, #8]
   105b4:	0212      	lsls	r2, r2, #8
   105b6:	4013      	ands	r3, r2
   105b8:	4a05      	ldr	r2, [pc, #20]	; (105d0 <__swhatbuf_r+0x4c>)
   105ba:	189b      	adds	r3, r3, r2
   105bc:	425a      	negs	r2, r3
   105be:	4153      	adcs	r3, r2
   105c0:	602b      	str	r3, [r5, #0]
   105c2:	e7ed      	b.n	105a0 <__swhatbuf_r+0x1c>
   105c4:	2340      	movs	r3, #64	; 0x40
   105c6:	2000      	movs	r0, #0
   105c8:	6023      	str	r3, [r4, #0]
   105ca:	b010      	add	sp, #64	; 0x40
   105cc:	bd70      	pop	{r4, r5, r6, pc}
   105ce:	46c0      	nop			; (mov r8, r8)
   105d0:	ffffe000 	.word	0xffffe000

000105d4 <__smakebuf_r>:
   105d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   105d6:	2602      	movs	r6, #2
   105d8:	898b      	ldrh	r3, [r1, #12]
   105da:	0005      	movs	r5, r0
   105dc:	000c      	movs	r4, r1
   105de:	4233      	tst	r3, r6
   105e0:	d006      	beq.n	105f0 <__smakebuf_r+0x1c>
   105e2:	0023      	movs	r3, r4
   105e4:	3347      	adds	r3, #71	; 0x47
   105e6:	6023      	str	r3, [r4, #0]
   105e8:	6123      	str	r3, [r4, #16]
   105ea:	2301      	movs	r3, #1
   105ec:	6163      	str	r3, [r4, #20]
   105ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   105f0:	ab01      	add	r3, sp, #4
   105f2:	466a      	mov	r2, sp
   105f4:	f7ff ffc6 	bl	10584 <__swhatbuf_r>
   105f8:	9900      	ldr	r1, [sp, #0]
   105fa:	0007      	movs	r7, r0
   105fc:	0028      	movs	r0, r5
   105fe:	f7ff fa65 	bl	facc <_malloc_r>
   10602:	2800      	cmp	r0, #0
   10604:	d106      	bne.n	10614 <__smakebuf_r+0x40>
   10606:	220c      	movs	r2, #12
   10608:	5ea3      	ldrsh	r3, [r4, r2]
   1060a:	059a      	lsls	r2, r3, #22
   1060c:	d4ef      	bmi.n	105ee <__smakebuf_r+0x1a>
   1060e:	431e      	orrs	r6, r3
   10610:	81a6      	strh	r6, [r4, #12]
   10612:	e7e6      	b.n	105e2 <__smakebuf_r+0xe>
   10614:	4b0d      	ldr	r3, [pc, #52]	; (1064c <__smakebuf_r+0x78>)
   10616:	62ab      	str	r3, [r5, #40]	; 0x28
   10618:	2380      	movs	r3, #128	; 0x80
   1061a:	89a2      	ldrh	r2, [r4, #12]
   1061c:	6020      	str	r0, [r4, #0]
   1061e:	4313      	orrs	r3, r2
   10620:	81a3      	strh	r3, [r4, #12]
   10622:	9b00      	ldr	r3, [sp, #0]
   10624:	6120      	str	r0, [r4, #16]
   10626:	6163      	str	r3, [r4, #20]
   10628:	9b01      	ldr	r3, [sp, #4]
   1062a:	2b00      	cmp	r3, #0
   1062c:	d00a      	beq.n	10644 <__smakebuf_r+0x70>
   1062e:	230e      	movs	r3, #14
   10630:	5ee1      	ldrsh	r1, [r4, r3]
   10632:	0028      	movs	r0, r5
   10634:	f000 fd26 	bl	11084 <_isatty_r>
   10638:	2800      	cmp	r0, #0
   1063a:	d003      	beq.n	10644 <__smakebuf_r+0x70>
   1063c:	2301      	movs	r3, #1
   1063e:	89a2      	ldrh	r2, [r4, #12]
   10640:	4313      	orrs	r3, r2
   10642:	81a3      	strh	r3, [r4, #12]
   10644:	89a0      	ldrh	r0, [r4, #12]
   10646:	4338      	orrs	r0, r7
   10648:	81a0      	strh	r0, [r4, #12]
   1064a:	e7d0      	b.n	105ee <__smakebuf_r+0x1a>
   1064c:	000103d1 	.word	0x000103d1

00010650 <__ascii_mbtowc>:
   10650:	b082      	sub	sp, #8
   10652:	2900      	cmp	r1, #0
   10654:	d100      	bne.n	10658 <__ascii_mbtowc+0x8>
   10656:	a901      	add	r1, sp, #4
   10658:	1e10      	subs	r0, r2, #0
   1065a:	d006      	beq.n	1066a <__ascii_mbtowc+0x1a>
   1065c:	2b00      	cmp	r3, #0
   1065e:	d006      	beq.n	1066e <__ascii_mbtowc+0x1e>
   10660:	7813      	ldrb	r3, [r2, #0]
   10662:	600b      	str	r3, [r1, #0]
   10664:	7810      	ldrb	r0, [r2, #0]
   10666:	1e43      	subs	r3, r0, #1
   10668:	4198      	sbcs	r0, r3
   1066a:	b002      	add	sp, #8
   1066c:	4770      	bx	lr
   1066e:	2002      	movs	r0, #2
   10670:	4240      	negs	r0, r0
   10672:	e7fa      	b.n	1066a <__ascii_mbtowc+0x1a>

00010674 <__malloc_lock>:
   10674:	4770      	bx	lr

00010676 <__malloc_unlock>:
   10676:	4770      	bx	lr

00010678 <__ssputs_r>:
   10678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1067a:	688e      	ldr	r6, [r1, #8]
   1067c:	b085      	sub	sp, #20
   1067e:	0007      	movs	r7, r0
   10680:	000c      	movs	r4, r1
   10682:	9203      	str	r2, [sp, #12]
   10684:	9301      	str	r3, [sp, #4]
   10686:	429e      	cmp	r6, r3
   10688:	d839      	bhi.n	106fe <__ssputs_r+0x86>
   1068a:	2390      	movs	r3, #144	; 0x90
   1068c:	898a      	ldrh	r2, [r1, #12]
   1068e:	00db      	lsls	r3, r3, #3
   10690:	421a      	tst	r2, r3
   10692:	d034      	beq.n	106fe <__ssputs_r+0x86>
   10694:	2503      	movs	r5, #3
   10696:	6909      	ldr	r1, [r1, #16]
   10698:	6823      	ldr	r3, [r4, #0]
   1069a:	1a5b      	subs	r3, r3, r1
   1069c:	9302      	str	r3, [sp, #8]
   1069e:	6963      	ldr	r3, [r4, #20]
   106a0:	9802      	ldr	r0, [sp, #8]
   106a2:	435d      	muls	r5, r3
   106a4:	0feb      	lsrs	r3, r5, #31
   106a6:	195d      	adds	r5, r3, r5
   106a8:	9b01      	ldr	r3, [sp, #4]
   106aa:	106d      	asrs	r5, r5, #1
   106ac:	3301      	adds	r3, #1
   106ae:	181b      	adds	r3, r3, r0
   106b0:	42ab      	cmp	r3, r5
   106b2:	d900      	bls.n	106b6 <__ssputs_r+0x3e>
   106b4:	001d      	movs	r5, r3
   106b6:	0553      	lsls	r3, r2, #21
   106b8:	d532      	bpl.n	10720 <__ssputs_r+0xa8>
   106ba:	0029      	movs	r1, r5
   106bc:	0038      	movs	r0, r7
   106be:	f7ff fa05 	bl	facc <_malloc_r>
   106c2:	1e06      	subs	r6, r0, #0
   106c4:	d109      	bne.n	106da <__ssputs_r+0x62>
   106c6:	230c      	movs	r3, #12
   106c8:	603b      	str	r3, [r7, #0]
   106ca:	2340      	movs	r3, #64	; 0x40
   106cc:	2001      	movs	r0, #1
   106ce:	89a2      	ldrh	r2, [r4, #12]
   106d0:	4240      	negs	r0, r0
   106d2:	4313      	orrs	r3, r2
   106d4:	81a3      	strh	r3, [r4, #12]
   106d6:	b005      	add	sp, #20
   106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106da:	9a02      	ldr	r2, [sp, #8]
   106dc:	6921      	ldr	r1, [r4, #16]
   106de:	f7ff f987 	bl	f9f0 <memcpy>
   106e2:	89a3      	ldrh	r3, [r4, #12]
   106e4:	4a14      	ldr	r2, [pc, #80]	; (10738 <__ssputs_r+0xc0>)
   106e6:	401a      	ands	r2, r3
   106e8:	2380      	movs	r3, #128	; 0x80
   106ea:	4313      	orrs	r3, r2
   106ec:	81a3      	strh	r3, [r4, #12]
   106ee:	9b02      	ldr	r3, [sp, #8]
   106f0:	6126      	str	r6, [r4, #16]
   106f2:	18f6      	adds	r6, r6, r3
   106f4:	6026      	str	r6, [r4, #0]
   106f6:	6165      	str	r5, [r4, #20]
   106f8:	9e01      	ldr	r6, [sp, #4]
   106fa:	1aed      	subs	r5, r5, r3
   106fc:	60a5      	str	r5, [r4, #8]
   106fe:	9b01      	ldr	r3, [sp, #4]
   10700:	42b3      	cmp	r3, r6
   10702:	d200      	bcs.n	10706 <__ssputs_r+0x8e>
   10704:	001e      	movs	r6, r3
   10706:	0032      	movs	r2, r6
   10708:	9903      	ldr	r1, [sp, #12]
   1070a:	6820      	ldr	r0, [r4, #0]
   1070c:	f7ff f979 	bl	fa02 <memmove>
   10710:	68a3      	ldr	r3, [r4, #8]
   10712:	2000      	movs	r0, #0
   10714:	1b9b      	subs	r3, r3, r6
   10716:	60a3      	str	r3, [r4, #8]
   10718:	6823      	ldr	r3, [r4, #0]
   1071a:	199e      	adds	r6, r3, r6
   1071c:	6026      	str	r6, [r4, #0]
   1071e:	e7da      	b.n	106d6 <__ssputs_r+0x5e>
   10720:	002a      	movs	r2, r5
   10722:	0038      	movs	r0, r7
   10724:	f000 fcdf 	bl	110e6 <_realloc_r>
   10728:	1e06      	subs	r6, r0, #0
   1072a:	d1e0      	bne.n	106ee <__ssputs_r+0x76>
   1072c:	6921      	ldr	r1, [r4, #16]
   1072e:	0038      	movs	r0, r7
   10730:	f7ff f982 	bl	fa38 <_free_r>
   10734:	e7c7      	b.n	106c6 <__ssputs_r+0x4e>
   10736:	46c0      	nop			; (mov r8, r8)
   10738:	fffffb7f 	.word	0xfffffb7f

0001073c <_svfiprintf_r>:
   1073c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1073e:	b09f      	sub	sp, #124	; 0x7c
   10740:	9002      	str	r0, [sp, #8]
   10742:	9305      	str	r3, [sp, #20]
   10744:	898b      	ldrh	r3, [r1, #12]
   10746:	000f      	movs	r7, r1
   10748:	0016      	movs	r6, r2
   1074a:	061b      	lsls	r3, r3, #24
   1074c:	d511      	bpl.n	10772 <_svfiprintf_r+0x36>
   1074e:	690b      	ldr	r3, [r1, #16]
   10750:	2b00      	cmp	r3, #0
   10752:	d10e      	bne.n	10772 <_svfiprintf_r+0x36>
   10754:	2140      	movs	r1, #64	; 0x40
   10756:	f7ff f9b9 	bl	facc <_malloc_r>
   1075a:	6038      	str	r0, [r7, #0]
   1075c:	6138      	str	r0, [r7, #16]
   1075e:	2800      	cmp	r0, #0
   10760:	d105      	bne.n	1076e <_svfiprintf_r+0x32>
   10762:	230c      	movs	r3, #12
   10764:	9a02      	ldr	r2, [sp, #8]
   10766:	3801      	subs	r0, #1
   10768:	6013      	str	r3, [r2, #0]
   1076a:	b01f      	add	sp, #124	; 0x7c
   1076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1076e:	2340      	movs	r3, #64	; 0x40
   10770:	617b      	str	r3, [r7, #20]
   10772:	2300      	movs	r3, #0
   10774:	ad06      	add	r5, sp, #24
   10776:	616b      	str	r3, [r5, #20]
   10778:	3320      	adds	r3, #32
   1077a:	766b      	strb	r3, [r5, #25]
   1077c:	3310      	adds	r3, #16
   1077e:	76ab      	strb	r3, [r5, #26]
   10780:	0034      	movs	r4, r6
   10782:	7823      	ldrb	r3, [r4, #0]
   10784:	2b00      	cmp	r3, #0
   10786:	d147      	bne.n	10818 <_svfiprintf_r+0xdc>
   10788:	1ba3      	subs	r3, r4, r6
   1078a:	9304      	str	r3, [sp, #16]
   1078c:	d00d      	beq.n	107aa <_svfiprintf_r+0x6e>
   1078e:	1ba3      	subs	r3, r4, r6
   10790:	0032      	movs	r2, r6
   10792:	0039      	movs	r1, r7
   10794:	9802      	ldr	r0, [sp, #8]
   10796:	f7ff ff6f 	bl	10678 <__ssputs_r>
   1079a:	1c43      	adds	r3, r0, #1
   1079c:	d100      	bne.n	107a0 <_svfiprintf_r+0x64>
   1079e:	e0b5      	b.n	1090c <_svfiprintf_r+0x1d0>
   107a0:	696a      	ldr	r2, [r5, #20]
   107a2:	9b04      	ldr	r3, [sp, #16]
   107a4:	4694      	mov	ip, r2
   107a6:	4463      	add	r3, ip
   107a8:	616b      	str	r3, [r5, #20]
   107aa:	7823      	ldrb	r3, [r4, #0]
   107ac:	2b00      	cmp	r3, #0
   107ae:	d100      	bne.n	107b2 <_svfiprintf_r+0x76>
   107b0:	e0ac      	b.n	1090c <_svfiprintf_r+0x1d0>
   107b2:	2201      	movs	r2, #1
   107b4:	2300      	movs	r3, #0
   107b6:	4252      	negs	r2, r2
   107b8:	606a      	str	r2, [r5, #4]
   107ba:	a902      	add	r1, sp, #8
   107bc:	3254      	adds	r2, #84	; 0x54
   107be:	1852      	adds	r2, r2, r1
   107c0:	3401      	adds	r4, #1
   107c2:	602b      	str	r3, [r5, #0]
   107c4:	60eb      	str	r3, [r5, #12]
   107c6:	60ab      	str	r3, [r5, #8]
   107c8:	7013      	strb	r3, [r2, #0]
   107ca:	65ab      	str	r3, [r5, #88]	; 0x58
   107cc:	4e58      	ldr	r6, [pc, #352]	; (10930 <_svfiprintf_r+0x1f4>)
   107ce:	2205      	movs	r2, #5
   107d0:	7821      	ldrb	r1, [r4, #0]
   107d2:	0030      	movs	r0, r6
   107d4:	f000 fc7c 	bl	110d0 <memchr>
   107d8:	1c62      	adds	r2, r4, #1
   107da:	2800      	cmp	r0, #0
   107dc:	d120      	bne.n	10820 <_svfiprintf_r+0xe4>
   107de:	6829      	ldr	r1, [r5, #0]
   107e0:	06cb      	lsls	r3, r1, #27
   107e2:	d504      	bpl.n	107ee <_svfiprintf_r+0xb2>
   107e4:	2353      	movs	r3, #83	; 0x53
   107e6:	ae02      	add	r6, sp, #8
   107e8:	3020      	adds	r0, #32
   107ea:	199b      	adds	r3, r3, r6
   107ec:	7018      	strb	r0, [r3, #0]
   107ee:	070b      	lsls	r3, r1, #28
   107f0:	d504      	bpl.n	107fc <_svfiprintf_r+0xc0>
   107f2:	2353      	movs	r3, #83	; 0x53
   107f4:	202b      	movs	r0, #43	; 0x2b
   107f6:	ae02      	add	r6, sp, #8
   107f8:	199b      	adds	r3, r3, r6
   107fa:	7018      	strb	r0, [r3, #0]
   107fc:	7823      	ldrb	r3, [r4, #0]
   107fe:	2b2a      	cmp	r3, #42	; 0x2a
   10800:	d016      	beq.n	10830 <_svfiprintf_r+0xf4>
   10802:	2000      	movs	r0, #0
   10804:	210a      	movs	r1, #10
   10806:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10808:	7822      	ldrb	r2, [r4, #0]
   1080a:	3a30      	subs	r2, #48	; 0x30
   1080c:	2a09      	cmp	r2, #9
   1080e:	d955      	bls.n	108bc <_svfiprintf_r+0x180>
   10810:	2800      	cmp	r0, #0
   10812:	d015      	beq.n	10840 <_svfiprintf_r+0x104>
   10814:	9309      	str	r3, [sp, #36]	; 0x24
   10816:	e013      	b.n	10840 <_svfiprintf_r+0x104>
   10818:	2b25      	cmp	r3, #37	; 0x25
   1081a:	d0b5      	beq.n	10788 <_svfiprintf_r+0x4c>
   1081c:	3401      	adds	r4, #1
   1081e:	e7b0      	b.n	10782 <_svfiprintf_r+0x46>
   10820:	2301      	movs	r3, #1
   10822:	1b80      	subs	r0, r0, r6
   10824:	4083      	lsls	r3, r0
   10826:	6829      	ldr	r1, [r5, #0]
   10828:	0014      	movs	r4, r2
   1082a:	430b      	orrs	r3, r1
   1082c:	602b      	str	r3, [r5, #0]
   1082e:	e7cd      	b.n	107cc <_svfiprintf_r+0x90>
   10830:	9b05      	ldr	r3, [sp, #20]
   10832:	1d18      	adds	r0, r3, #4
   10834:	681b      	ldr	r3, [r3, #0]
   10836:	9005      	str	r0, [sp, #20]
   10838:	2b00      	cmp	r3, #0
   1083a:	db39      	blt.n	108b0 <_svfiprintf_r+0x174>
   1083c:	9309      	str	r3, [sp, #36]	; 0x24
   1083e:	0014      	movs	r4, r2
   10840:	7823      	ldrb	r3, [r4, #0]
   10842:	2b2e      	cmp	r3, #46	; 0x2e
   10844:	d10b      	bne.n	1085e <_svfiprintf_r+0x122>
   10846:	7863      	ldrb	r3, [r4, #1]
   10848:	1c62      	adds	r2, r4, #1
   1084a:	2b2a      	cmp	r3, #42	; 0x2a
   1084c:	d13e      	bne.n	108cc <_svfiprintf_r+0x190>
   1084e:	9b05      	ldr	r3, [sp, #20]
   10850:	3402      	adds	r4, #2
   10852:	1d1a      	adds	r2, r3, #4
   10854:	681b      	ldr	r3, [r3, #0]
   10856:	9205      	str	r2, [sp, #20]
   10858:	2b00      	cmp	r3, #0
   1085a:	db34      	blt.n	108c6 <_svfiprintf_r+0x18a>
   1085c:	9307      	str	r3, [sp, #28]
   1085e:	4e35      	ldr	r6, [pc, #212]	; (10934 <_svfiprintf_r+0x1f8>)
   10860:	7821      	ldrb	r1, [r4, #0]
   10862:	2203      	movs	r2, #3
   10864:	0030      	movs	r0, r6
   10866:	f000 fc33 	bl	110d0 <memchr>
   1086a:	2800      	cmp	r0, #0
   1086c:	d006      	beq.n	1087c <_svfiprintf_r+0x140>
   1086e:	2340      	movs	r3, #64	; 0x40
   10870:	1b80      	subs	r0, r0, r6
   10872:	4083      	lsls	r3, r0
   10874:	682a      	ldr	r2, [r5, #0]
   10876:	3401      	adds	r4, #1
   10878:	4313      	orrs	r3, r2
   1087a:	602b      	str	r3, [r5, #0]
   1087c:	7821      	ldrb	r1, [r4, #0]
   1087e:	2206      	movs	r2, #6
   10880:	482d      	ldr	r0, [pc, #180]	; (10938 <_svfiprintf_r+0x1fc>)
   10882:	1c66      	adds	r6, r4, #1
   10884:	7629      	strb	r1, [r5, #24]
   10886:	f000 fc23 	bl	110d0 <memchr>
   1088a:	2800      	cmp	r0, #0
   1088c:	d046      	beq.n	1091c <_svfiprintf_r+0x1e0>
   1088e:	4b2b      	ldr	r3, [pc, #172]	; (1093c <_svfiprintf_r+0x200>)
   10890:	2b00      	cmp	r3, #0
   10892:	d12f      	bne.n	108f4 <_svfiprintf_r+0x1b8>
   10894:	6829      	ldr	r1, [r5, #0]
   10896:	9b05      	ldr	r3, [sp, #20]
   10898:	2207      	movs	r2, #7
   1089a:	05c9      	lsls	r1, r1, #23
   1089c:	d528      	bpl.n	108f0 <_svfiprintf_r+0x1b4>
   1089e:	189b      	adds	r3, r3, r2
   108a0:	4393      	bics	r3, r2
   108a2:	3308      	adds	r3, #8
   108a4:	9305      	str	r3, [sp, #20]
   108a6:	696b      	ldr	r3, [r5, #20]
   108a8:	9a03      	ldr	r2, [sp, #12]
   108aa:	189b      	adds	r3, r3, r2
   108ac:	616b      	str	r3, [r5, #20]
   108ae:	e767      	b.n	10780 <_svfiprintf_r+0x44>
   108b0:	425b      	negs	r3, r3
   108b2:	60eb      	str	r3, [r5, #12]
   108b4:	2302      	movs	r3, #2
   108b6:	430b      	orrs	r3, r1
   108b8:	602b      	str	r3, [r5, #0]
   108ba:	e7c0      	b.n	1083e <_svfiprintf_r+0x102>
   108bc:	434b      	muls	r3, r1
   108be:	3401      	adds	r4, #1
   108c0:	189b      	adds	r3, r3, r2
   108c2:	2001      	movs	r0, #1
   108c4:	e7a0      	b.n	10808 <_svfiprintf_r+0xcc>
   108c6:	2301      	movs	r3, #1
   108c8:	425b      	negs	r3, r3
   108ca:	e7c7      	b.n	1085c <_svfiprintf_r+0x120>
   108cc:	2300      	movs	r3, #0
   108ce:	0014      	movs	r4, r2
   108d0:	200a      	movs	r0, #10
   108d2:	001a      	movs	r2, r3
   108d4:	606b      	str	r3, [r5, #4]
   108d6:	7821      	ldrb	r1, [r4, #0]
   108d8:	3930      	subs	r1, #48	; 0x30
   108da:	2909      	cmp	r1, #9
   108dc:	d903      	bls.n	108e6 <_svfiprintf_r+0x1aa>
   108de:	2b00      	cmp	r3, #0
   108e0:	d0bd      	beq.n	1085e <_svfiprintf_r+0x122>
   108e2:	9207      	str	r2, [sp, #28]
   108e4:	e7bb      	b.n	1085e <_svfiprintf_r+0x122>
   108e6:	4342      	muls	r2, r0
   108e8:	3401      	adds	r4, #1
   108ea:	1852      	adds	r2, r2, r1
   108ec:	2301      	movs	r3, #1
   108ee:	e7f2      	b.n	108d6 <_svfiprintf_r+0x19a>
   108f0:	3307      	adds	r3, #7
   108f2:	e7d5      	b.n	108a0 <_svfiprintf_r+0x164>
   108f4:	ab05      	add	r3, sp, #20
   108f6:	9300      	str	r3, [sp, #0]
   108f8:	003a      	movs	r2, r7
   108fa:	4b11      	ldr	r3, [pc, #68]	; (10940 <_svfiprintf_r+0x204>)
   108fc:	0029      	movs	r1, r5
   108fe:	9802      	ldr	r0, [sp, #8]
   10900:	e000      	b.n	10904 <_svfiprintf_r+0x1c8>
   10902:	bf00      	nop
   10904:	9003      	str	r0, [sp, #12]
   10906:	9b03      	ldr	r3, [sp, #12]
   10908:	3301      	adds	r3, #1
   1090a:	d1cc      	bne.n	108a6 <_svfiprintf_r+0x16a>
   1090c:	89bb      	ldrh	r3, [r7, #12]
   1090e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10910:	065b      	lsls	r3, r3, #25
   10912:	d400      	bmi.n	10916 <_svfiprintf_r+0x1da>
   10914:	e729      	b.n	1076a <_svfiprintf_r+0x2e>
   10916:	2001      	movs	r0, #1
   10918:	4240      	negs	r0, r0
   1091a:	e726      	b.n	1076a <_svfiprintf_r+0x2e>
   1091c:	ab05      	add	r3, sp, #20
   1091e:	9300      	str	r3, [sp, #0]
   10920:	003a      	movs	r2, r7
   10922:	4b07      	ldr	r3, [pc, #28]	; (10940 <_svfiprintf_r+0x204>)
   10924:	0029      	movs	r1, r5
   10926:	9802      	ldr	r0, [sp, #8]
   10928:	f000 f9be 	bl	10ca8 <_printf_i>
   1092c:	e7ea      	b.n	10904 <_svfiprintf_r+0x1c8>
   1092e:	46c0      	nop			; (mov r8, r8)
   10930:	0001283a 	.word	0x0001283a
   10934:	00012840 	.word	0x00012840
   10938:	00012844 	.word	0x00012844
   1093c:	00000000 	.word	0x00000000
   10940:	00010679 	.word	0x00010679

00010944 <__sfputc_r>:
   10944:	6893      	ldr	r3, [r2, #8]
   10946:	b510      	push	{r4, lr}
   10948:	3b01      	subs	r3, #1
   1094a:	6093      	str	r3, [r2, #8]
   1094c:	2b00      	cmp	r3, #0
   1094e:	da05      	bge.n	1095c <__sfputc_r+0x18>
   10950:	6994      	ldr	r4, [r2, #24]
   10952:	42a3      	cmp	r3, r4
   10954:	db08      	blt.n	10968 <__sfputc_r+0x24>
   10956:	b2cb      	uxtb	r3, r1
   10958:	2b0a      	cmp	r3, #10
   1095a:	d005      	beq.n	10968 <__sfputc_r+0x24>
   1095c:	6813      	ldr	r3, [r2, #0]
   1095e:	1c58      	adds	r0, r3, #1
   10960:	6010      	str	r0, [r2, #0]
   10962:	7019      	strb	r1, [r3, #0]
   10964:	b2c8      	uxtb	r0, r1
   10966:	bd10      	pop	{r4, pc}
   10968:	f7ff fbb0 	bl	100cc <__swbuf_r>
   1096c:	e7fb      	b.n	10966 <__sfputc_r+0x22>

0001096e <__sfputs_r>:
   1096e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10970:	0006      	movs	r6, r0
   10972:	000f      	movs	r7, r1
   10974:	0014      	movs	r4, r2
   10976:	18d5      	adds	r5, r2, r3
   10978:	42ac      	cmp	r4, r5
   1097a:	d101      	bne.n	10980 <__sfputs_r+0x12>
   1097c:	2000      	movs	r0, #0
   1097e:	e007      	b.n	10990 <__sfputs_r+0x22>
   10980:	7821      	ldrb	r1, [r4, #0]
   10982:	003a      	movs	r2, r7
   10984:	0030      	movs	r0, r6
   10986:	f7ff ffdd 	bl	10944 <__sfputc_r>
   1098a:	3401      	adds	r4, #1
   1098c:	1c43      	adds	r3, r0, #1
   1098e:	d1f3      	bne.n	10978 <__sfputs_r+0xa>
   10990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010994 <_vfiprintf_r>:
   10994:	b5f0      	push	{r4, r5, r6, r7, lr}
   10996:	b09f      	sub	sp, #124	; 0x7c
   10998:	0006      	movs	r6, r0
   1099a:	000f      	movs	r7, r1
   1099c:	0014      	movs	r4, r2
   1099e:	9305      	str	r3, [sp, #20]
   109a0:	2800      	cmp	r0, #0
   109a2:	d004      	beq.n	109ae <_vfiprintf_r+0x1a>
   109a4:	6983      	ldr	r3, [r0, #24]
   109a6:	2b00      	cmp	r3, #0
   109a8:	d101      	bne.n	109ae <_vfiprintf_r+0x1a>
   109aa:	f7ff fd53 	bl	10454 <__sinit>
   109ae:	4b7f      	ldr	r3, [pc, #508]	; (10bac <_vfiprintf_r+0x218>)
   109b0:	429f      	cmp	r7, r3
   109b2:	d15c      	bne.n	10a6e <_vfiprintf_r+0xda>
   109b4:	6877      	ldr	r7, [r6, #4]
   109b6:	89bb      	ldrh	r3, [r7, #12]
   109b8:	071b      	lsls	r3, r3, #28
   109ba:	d562      	bpl.n	10a82 <_vfiprintf_r+0xee>
   109bc:	693b      	ldr	r3, [r7, #16]
   109be:	2b00      	cmp	r3, #0
   109c0:	d05f      	beq.n	10a82 <_vfiprintf_r+0xee>
   109c2:	2300      	movs	r3, #0
   109c4:	ad06      	add	r5, sp, #24
   109c6:	616b      	str	r3, [r5, #20]
   109c8:	3320      	adds	r3, #32
   109ca:	766b      	strb	r3, [r5, #25]
   109cc:	3310      	adds	r3, #16
   109ce:	76ab      	strb	r3, [r5, #26]
   109d0:	9402      	str	r4, [sp, #8]
   109d2:	9c02      	ldr	r4, [sp, #8]
   109d4:	7823      	ldrb	r3, [r4, #0]
   109d6:	2b00      	cmp	r3, #0
   109d8:	d15d      	bne.n	10a96 <_vfiprintf_r+0x102>
   109da:	9b02      	ldr	r3, [sp, #8]
   109dc:	1ae3      	subs	r3, r4, r3
   109de:	9304      	str	r3, [sp, #16]
   109e0:	d00d      	beq.n	109fe <_vfiprintf_r+0x6a>
   109e2:	9b04      	ldr	r3, [sp, #16]
   109e4:	9a02      	ldr	r2, [sp, #8]
   109e6:	0039      	movs	r1, r7
   109e8:	0030      	movs	r0, r6
   109ea:	f7ff ffc0 	bl	1096e <__sfputs_r>
   109ee:	1c43      	adds	r3, r0, #1
   109f0:	d100      	bne.n	109f4 <_vfiprintf_r+0x60>
   109f2:	e0cc      	b.n	10b8e <_vfiprintf_r+0x1fa>
   109f4:	696a      	ldr	r2, [r5, #20]
   109f6:	9b04      	ldr	r3, [sp, #16]
   109f8:	4694      	mov	ip, r2
   109fa:	4463      	add	r3, ip
   109fc:	616b      	str	r3, [r5, #20]
   109fe:	7823      	ldrb	r3, [r4, #0]
   10a00:	2b00      	cmp	r3, #0
   10a02:	d100      	bne.n	10a06 <_vfiprintf_r+0x72>
   10a04:	e0c3      	b.n	10b8e <_vfiprintf_r+0x1fa>
   10a06:	2201      	movs	r2, #1
   10a08:	2300      	movs	r3, #0
   10a0a:	4252      	negs	r2, r2
   10a0c:	606a      	str	r2, [r5, #4]
   10a0e:	a902      	add	r1, sp, #8
   10a10:	3254      	adds	r2, #84	; 0x54
   10a12:	1852      	adds	r2, r2, r1
   10a14:	3401      	adds	r4, #1
   10a16:	602b      	str	r3, [r5, #0]
   10a18:	60eb      	str	r3, [r5, #12]
   10a1a:	60ab      	str	r3, [r5, #8]
   10a1c:	7013      	strb	r3, [r2, #0]
   10a1e:	65ab      	str	r3, [r5, #88]	; 0x58
   10a20:	7821      	ldrb	r1, [r4, #0]
   10a22:	2205      	movs	r2, #5
   10a24:	4862      	ldr	r0, [pc, #392]	; (10bb0 <_vfiprintf_r+0x21c>)
   10a26:	f000 fb53 	bl	110d0 <memchr>
   10a2a:	1c63      	adds	r3, r4, #1
   10a2c:	469c      	mov	ip, r3
   10a2e:	2800      	cmp	r0, #0
   10a30:	d135      	bne.n	10a9e <_vfiprintf_r+0x10a>
   10a32:	6829      	ldr	r1, [r5, #0]
   10a34:	06cb      	lsls	r3, r1, #27
   10a36:	d504      	bpl.n	10a42 <_vfiprintf_r+0xae>
   10a38:	2353      	movs	r3, #83	; 0x53
   10a3a:	aa02      	add	r2, sp, #8
   10a3c:	3020      	adds	r0, #32
   10a3e:	189b      	adds	r3, r3, r2
   10a40:	7018      	strb	r0, [r3, #0]
   10a42:	070b      	lsls	r3, r1, #28
   10a44:	d504      	bpl.n	10a50 <_vfiprintf_r+0xbc>
   10a46:	2353      	movs	r3, #83	; 0x53
   10a48:	202b      	movs	r0, #43	; 0x2b
   10a4a:	aa02      	add	r2, sp, #8
   10a4c:	189b      	adds	r3, r3, r2
   10a4e:	7018      	strb	r0, [r3, #0]
   10a50:	7823      	ldrb	r3, [r4, #0]
   10a52:	2b2a      	cmp	r3, #42	; 0x2a
   10a54:	d02c      	beq.n	10ab0 <_vfiprintf_r+0x11c>
   10a56:	2000      	movs	r0, #0
   10a58:	210a      	movs	r1, #10
   10a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a5c:	7822      	ldrb	r2, [r4, #0]
   10a5e:	3a30      	subs	r2, #48	; 0x30
   10a60:	2a09      	cmp	r2, #9
   10a62:	d800      	bhi.n	10a66 <_vfiprintf_r+0xd2>
   10a64:	e06b      	b.n	10b3e <_vfiprintf_r+0x1aa>
   10a66:	2800      	cmp	r0, #0
   10a68:	d02a      	beq.n	10ac0 <_vfiprintf_r+0x12c>
   10a6a:	9309      	str	r3, [sp, #36]	; 0x24
   10a6c:	e028      	b.n	10ac0 <_vfiprintf_r+0x12c>
   10a6e:	4b51      	ldr	r3, [pc, #324]	; (10bb4 <_vfiprintf_r+0x220>)
   10a70:	429f      	cmp	r7, r3
   10a72:	d101      	bne.n	10a78 <_vfiprintf_r+0xe4>
   10a74:	68b7      	ldr	r7, [r6, #8]
   10a76:	e79e      	b.n	109b6 <_vfiprintf_r+0x22>
   10a78:	4b4f      	ldr	r3, [pc, #316]	; (10bb8 <_vfiprintf_r+0x224>)
   10a7a:	429f      	cmp	r7, r3
   10a7c:	d19b      	bne.n	109b6 <_vfiprintf_r+0x22>
   10a7e:	68f7      	ldr	r7, [r6, #12]
   10a80:	e799      	b.n	109b6 <_vfiprintf_r+0x22>
   10a82:	0039      	movs	r1, r7
   10a84:	0030      	movs	r0, r6
   10a86:	f7ff fb77 	bl	10178 <__swsetup_r>
   10a8a:	2800      	cmp	r0, #0
   10a8c:	d099      	beq.n	109c2 <_vfiprintf_r+0x2e>
   10a8e:	2001      	movs	r0, #1
   10a90:	4240      	negs	r0, r0
   10a92:	b01f      	add	sp, #124	; 0x7c
   10a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a96:	2b25      	cmp	r3, #37	; 0x25
   10a98:	d09f      	beq.n	109da <_vfiprintf_r+0x46>
   10a9a:	3401      	adds	r4, #1
   10a9c:	e79a      	b.n	109d4 <_vfiprintf_r+0x40>
   10a9e:	4b44      	ldr	r3, [pc, #272]	; (10bb0 <_vfiprintf_r+0x21c>)
   10aa0:	6829      	ldr	r1, [r5, #0]
   10aa2:	1ac0      	subs	r0, r0, r3
   10aa4:	2301      	movs	r3, #1
   10aa6:	4083      	lsls	r3, r0
   10aa8:	430b      	orrs	r3, r1
   10aaa:	602b      	str	r3, [r5, #0]
   10aac:	4664      	mov	r4, ip
   10aae:	e7b7      	b.n	10a20 <_vfiprintf_r+0x8c>
   10ab0:	9b05      	ldr	r3, [sp, #20]
   10ab2:	1d18      	adds	r0, r3, #4
   10ab4:	681b      	ldr	r3, [r3, #0]
   10ab6:	9005      	str	r0, [sp, #20]
   10ab8:	2b00      	cmp	r3, #0
   10aba:	db3a      	blt.n	10b32 <_vfiprintf_r+0x19e>
   10abc:	9309      	str	r3, [sp, #36]	; 0x24
   10abe:	4664      	mov	r4, ip
   10ac0:	7823      	ldrb	r3, [r4, #0]
   10ac2:	2b2e      	cmp	r3, #46	; 0x2e
   10ac4:	d10b      	bne.n	10ade <_vfiprintf_r+0x14a>
   10ac6:	7863      	ldrb	r3, [r4, #1]
   10ac8:	1c62      	adds	r2, r4, #1
   10aca:	2b2a      	cmp	r3, #42	; 0x2a
   10acc:	d13f      	bne.n	10b4e <_vfiprintf_r+0x1ba>
   10ace:	9b05      	ldr	r3, [sp, #20]
   10ad0:	3402      	adds	r4, #2
   10ad2:	1d1a      	adds	r2, r3, #4
   10ad4:	681b      	ldr	r3, [r3, #0]
   10ad6:	9205      	str	r2, [sp, #20]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	db35      	blt.n	10b48 <_vfiprintf_r+0x1b4>
   10adc:	9307      	str	r3, [sp, #28]
   10ade:	7821      	ldrb	r1, [r4, #0]
   10ae0:	2203      	movs	r2, #3
   10ae2:	4836      	ldr	r0, [pc, #216]	; (10bbc <_vfiprintf_r+0x228>)
   10ae4:	f000 faf4 	bl	110d0 <memchr>
   10ae8:	2800      	cmp	r0, #0
   10aea:	d007      	beq.n	10afc <_vfiprintf_r+0x168>
   10aec:	4b33      	ldr	r3, [pc, #204]	; (10bbc <_vfiprintf_r+0x228>)
   10aee:	682a      	ldr	r2, [r5, #0]
   10af0:	1ac0      	subs	r0, r0, r3
   10af2:	2340      	movs	r3, #64	; 0x40
   10af4:	4083      	lsls	r3, r0
   10af6:	4313      	orrs	r3, r2
   10af8:	602b      	str	r3, [r5, #0]
   10afa:	3401      	adds	r4, #1
   10afc:	7821      	ldrb	r1, [r4, #0]
   10afe:	1c63      	adds	r3, r4, #1
   10b00:	2206      	movs	r2, #6
   10b02:	482f      	ldr	r0, [pc, #188]	; (10bc0 <_vfiprintf_r+0x22c>)
   10b04:	9302      	str	r3, [sp, #8]
   10b06:	7629      	strb	r1, [r5, #24]
   10b08:	f000 fae2 	bl	110d0 <memchr>
   10b0c:	2800      	cmp	r0, #0
   10b0e:	d044      	beq.n	10b9a <_vfiprintf_r+0x206>
   10b10:	4b2c      	ldr	r3, [pc, #176]	; (10bc4 <_vfiprintf_r+0x230>)
   10b12:	2b00      	cmp	r3, #0
   10b14:	d12f      	bne.n	10b76 <_vfiprintf_r+0x1e2>
   10b16:	6829      	ldr	r1, [r5, #0]
   10b18:	9b05      	ldr	r3, [sp, #20]
   10b1a:	2207      	movs	r2, #7
   10b1c:	05c9      	lsls	r1, r1, #23
   10b1e:	d528      	bpl.n	10b72 <_vfiprintf_r+0x1de>
   10b20:	189b      	adds	r3, r3, r2
   10b22:	4393      	bics	r3, r2
   10b24:	3308      	adds	r3, #8
   10b26:	9305      	str	r3, [sp, #20]
   10b28:	696b      	ldr	r3, [r5, #20]
   10b2a:	9a03      	ldr	r2, [sp, #12]
   10b2c:	189b      	adds	r3, r3, r2
   10b2e:	616b      	str	r3, [r5, #20]
   10b30:	e74f      	b.n	109d2 <_vfiprintf_r+0x3e>
   10b32:	425b      	negs	r3, r3
   10b34:	60eb      	str	r3, [r5, #12]
   10b36:	2302      	movs	r3, #2
   10b38:	430b      	orrs	r3, r1
   10b3a:	602b      	str	r3, [r5, #0]
   10b3c:	e7bf      	b.n	10abe <_vfiprintf_r+0x12a>
   10b3e:	434b      	muls	r3, r1
   10b40:	3401      	adds	r4, #1
   10b42:	189b      	adds	r3, r3, r2
   10b44:	2001      	movs	r0, #1
   10b46:	e789      	b.n	10a5c <_vfiprintf_r+0xc8>
   10b48:	2301      	movs	r3, #1
   10b4a:	425b      	negs	r3, r3
   10b4c:	e7c6      	b.n	10adc <_vfiprintf_r+0x148>
   10b4e:	2300      	movs	r3, #0
   10b50:	0014      	movs	r4, r2
   10b52:	200a      	movs	r0, #10
   10b54:	001a      	movs	r2, r3
   10b56:	606b      	str	r3, [r5, #4]
   10b58:	7821      	ldrb	r1, [r4, #0]
   10b5a:	3930      	subs	r1, #48	; 0x30
   10b5c:	2909      	cmp	r1, #9
   10b5e:	d903      	bls.n	10b68 <_vfiprintf_r+0x1d4>
   10b60:	2b00      	cmp	r3, #0
   10b62:	d0bc      	beq.n	10ade <_vfiprintf_r+0x14a>
   10b64:	9207      	str	r2, [sp, #28]
   10b66:	e7ba      	b.n	10ade <_vfiprintf_r+0x14a>
   10b68:	4342      	muls	r2, r0
   10b6a:	3401      	adds	r4, #1
   10b6c:	1852      	adds	r2, r2, r1
   10b6e:	2301      	movs	r3, #1
   10b70:	e7f2      	b.n	10b58 <_vfiprintf_r+0x1c4>
   10b72:	3307      	adds	r3, #7
   10b74:	e7d5      	b.n	10b22 <_vfiprintf_r+0x18e>
   10b76:	ab05      	add	r3, sp, #20
   10b78:	9300      	str	r3, [sp, #0]
   10b7a:	003a      	movs	r2, r7
   10b7c:	4b12      	ldr	r3, [pc, #72]	; (10bc8 <_vfiprintf_r+0x234>)
   10b7e:	0029      	movs	r1, r5
   10b80:	0030      	movs	r0, r6
   10b82:	e000      	b.n	10b86 <_vfiprintf_r+0x1f2>
   10b84:	bf00      	nop
   10b86:	9003      	str	r0, [sp, #12]
   10b88:	9b03      	ldr	r3, [sp, #12]
   10b8a:	3301      	adds	r3, #1
   10b8c:	d1cc      	bne.n	10b28 <_vfiprintf_r+0x194>
   10b8e:	89bb      	ldrh	r3, [r7, #12]
   10b90:	065b      	lsls	r3, r3, #25
   10b92:	d500      	bpl.n	10b96 <_vfiprintf_r+0x202>
   10b94:	e77b      	b.n	10a8e <_vfiprintf_r+0xfa>
   10b96:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b98:	e77b      	b.n	10a92 <_vfiprintf_r+0xfe>
   10b9a:	ab05      	add	r3, sp, #20
   10b9c:	9300      	str	r3, [sp, #0]
   10b9e:	003a      	movs	r2, r7
   10ba0:	4b09      	ldr	r3, [pc, #36]	; (10bc8 <_vfiprintf_r+0x234>)
   10ba2:	0029      	movs	r1, r5
   10ba4:	0030      	movs	r0, r6
   10ba6:	f000 f87f 	bl	10ca8 <_printf_i>
   10baa:	e7ec      	b.n	10b86 <_vfiprintf_r+0x1f2>
   10bac:	000127f0 	.word	0x000127f0
   10bb0:	0001283a 	.word	0x0001283a
   10bb4:	00012810 	.word	0x00012810
   10bb8:	000127d0 	.word	0x000127d0
   10bbc:	00012840 	.word	0x00012840
   10bc0:	00012844 	.word	0x00012844
   10bc4:	00000000 	.word	0x00000000
   10bc8:	0001096f 	.word	0x0001096f

00010bcc <_printf_common>:
   10bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bce:	0015      	movs	r5, r2
   10bd0:	9301      	str	r3, [sp, #4]
   10bd2:	688a      	ldr	r2, [r1, #8]
   10bd4:	690b      	ldr	r3, [r1, #16]
   10bd6:	9000      	str	r0, [sp, #0]
   10bd8:	000c      	movs	r4, r1
   10bda:	4293      	cmp	r3, r2
   10bdc:	da00      	bge.n	10be0 <_printf_common+0x14>
   10bde:	0013      	movs	r3, r2
   10be0:	0022      	movs	r2, r4
   10be2:	602b      	str	r3, [r5, #0]
   10be4:	3243      	adds	r2, #67	; 0x43
   10be6:	7812      	ldrb	r2, [r2, #0]
   10be8:	2a00      	cmp	r2, #0
   10bea:	d001      	beq.n	10bf0 <_printf_common+0x24>
   10bec:	3301      	adds	r3, #1
   10bee:	602b      	str	r3, [r5, #0]
   10bf0:	6823      	ldr	r3, [r4, #0]
   10bf2:	069b      	lsls	r3, r3, #26
   10bf4:	d502      	bpl.n	10bfc <_printf_common+0x30>
   10bf6:	682b      	ldr	r3, [r5, #0]
   10bf8:	3302      	adds	r3, #2
   10bfa:	602b      	str	r3, [r5, #0]
   10bfc:	2706      	movs	r7, #6
   10bfe:	6823      	ldr	r3, [r4, #0]
   10c00:	401f      	ands	r7, r3
   10c02:	d027      	beq.n	10c54 <_printf_common+0x88>
   10c04:	0023      	movs	r3, r4
   10c06:	3343      	adds	r3, #67	; 0x43
   10c08:	781b      	ldrb	r3, [r3, #0]
   10c0a:	1e5a      	subs	r2, r3, #1
   10c0c:	4193      	sbcs	r3, r2
   10c0e:	6822      	ldr	r2, [r4, #0]
   10c10:	0692      	lsls	r2, r2, #26
   10c12:	d430      	bmi.n	10c76 <_printf_common+0xaa>
   10c14:	0022      	movs	r2, r4
   10c16:	9901      	ldr	r1, [sp, #4]
   10c18:	3243      	adds	r2, #67	; 0x43
   10c1a:	9800      	ldr	r0, [sp, #0]
   10c1c:	9e08      	ldr	r6, [sp, #32]
   10c1e:	47b0      	blx	r6
   10c20:	1c43      	adds	r3, r0, #1
   10c22:	d025      	beq.n	10c70 <_printf_common+0xa4>
   10c24:	2306      	movs	r3, #6
   10c26:	6820      	ldr	r0, [r4, #0]
   10c28:	682a      	ldr	r2, [r5, #0]
   10c2a:	68e1      	ldr	r1, [r4, #12]
   10c2c:	4003      	ands	r3, r0
   10c2e:	2500      	movs	r5, #0
   10c30:	2b04      	cmp	r3, #4
   10c32:	d103      	bne.n	10c3c <_printf_common+0x70>
   10c34:	1a8d      	subs	r5, r1, r2
   10c36:	43eb      	mvns	r3, r5
   10c38:	17db      	asrs	r3, r3, #31
   10c3a:	401d      	ands	r5, r3
   10c3c:	68a3      	ldr	r3, [r4, #8]
   10c3e:	6922      	ldr	r2, [r4, #16]
   10c40:	4293      	cmp	r3, r2
   10c42:	dd01      	ble.n	10c48 <_printf_common+0x7c>
   10c44:	1a9b      	subs	r3, r3, r2
   10c46:	18ed      	adds	r5, r5, r3
   10c48:	2700      	movs	r7, #0
   10c4a:	42bd      	cmp	r5, r7
   10c4c:	d120      	bne.n	10c90 <_printf_common+0xc4>
   10c4e:	2000      	movs	r0, #0
   10c50:	e010      	b.n	10c74 <_printf_common+0xa8>
   10c52:	3701      	adds	r7, #1
   10c54:	68e3      	ldr	r3, [r4, #12]
   10c56:	682a      	ldr	r2, [r5, #0]
   10c58:	1a9b      	subs	r3, r3, r2
   10c5a:	429f      	cmp	r7, r3
   10c5c:	dad2      	bge.n	10c04 <_printf_common+0x38>
   10c5e:	0022      	movs	r2, r4
   10c60:	2301      	movs	r3, #1
   10c62:	3219      	adds	r2, #25
   10c64:	9901      	ldr	r1, [sp, #4]
   10c66:	9800      	ldr	r0, [sp, #0]
   10c68:	9e08      	ldr	r6, [sp, #32]
   10c6a:	47b0      	blx	r6
   10c6c:	1c43      	adds	r3, r0, #1
   10c6e:	d1f0      	bne.n	10c52 <_printf_common+0x86>
   10c70:	2001      	movs	r0, #1
   10c72:	4240      	negs	r0, r0
   10c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10c76:	2030      	movs	r0, #48	; 0x30
   10c78:	18e1      	adds	r1, r4, r3
   10c7a:	3143      	adds	r1, #67	; 0x43
   10c7c:	7008      	strb	r0, [r1, #0]
   10c7e:	0021      	movs	r1, r4
   10c80:	1c5a      	adds	r2, r3, #1
   10c82:	3145      	adds	r1, #69	; 0x45
   10c84:	7809      	ldrb	r1, [r1, #0]
   10c86:	18a2      	adds	r2, r4, r2
   10c88:	3243      	adds	r2, #67	; 0x43
   10c8a:	3302      	adds	r3, #2
   10c8c:	7011      	strb	r1, [r2, #0]
   10c8e:	e7c1      	b.n	10c14 <_printf_common+0x48>
   10c90:	0022      	movs	r2, r4
   10c92:	2301      	movs	r3, #1
   10c94:	321a      	adds	r2, #26
   10c96:	9901      	ldr	r1, [sp, #4]
   10c98:	9800      	ldr	r0, [sp, #0]
   10c9a:	9e08      	ldr	r6, [sp, #32]
   10c9c:	47b0      	blx	r6
   10c9e:	1c43      	adds	r3, r0, #1
   10ca0:	d0e6      	beq.n	10c70 <_printf_common+0xa4>
   10ca2:	3701      	adds	r7, #1
   10ca4:	e7d1      	b.n	10c4a <_printf_common+0x7e>
	...

00010ca8 <_printf_i>:
   10ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10caa:	b08b      	sub	sp, #44	; 0x2c
   10cac:	9206      	str	r2, [sp, #24]
   10cae:	000a      	movs	r2, r1
   10cb0:	3243      	adds	r2, #67	; 0x43
   10cb2:	9307      	str	r3, [sp, #28]
   10cb4:	9005      	str	r0, [sp, #20]
   10cb6:	9204      	str	r2, [sp, #16]
   10cb8:	7e0a      	ldrb	r2, [r1, #24]
   10cba:	000c      	movs	r4, r1
   10cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10cbe:	2a6e      	cmp	r2, #110	; 0x6e
   10cc0:	d100      	bne.n	10cc4 <_printf_i+0x1c>
   10cc2:	e08f      	b.n	10de4 <_printf_i+0x13c>
   10cc4:	d817      	bhi.n	10cf6 <_printf_i+0x4e>
   10cc6:	2a63      	cmp	r2, #99	; 0x63
   10cc8:	d02c      	beq.n	10d24 <_printf_i+0x7c>
   10cca:	d808      	bhi.n	10cde <_printf_i+0x36>
   10ccc:	2a00      	cmp	r2, #0
   10cce:	d100      	bne.n	10cd2 <_printf_i+0x2a>
   10cd0:	e099      	b.n	10e06 <_printf_i+0x15e>
   10cd2:	2a58      	cmp	r2, #88	; 0x58
   10cd4:	d054      	beq.n	10d80 <_printf_i+0xd8>
   10cd6:	0026      	movs	r6, r4
   10cd8:	3642      	adds	r6, #66	; 0x42
   10cda:	7032      	strb	r2, [r6, #0]
   10cdc:	e029      	b.n	10d32 <_printf_i+0x8a>
   10cde:	2a64      	cmp	r2, #100	; 0x64
   10ce0:	d001      	beq.n	10ce6 <_printf_i+0x3e>
   10ce2:	2a69      	cmp	r2, #105	; 0x69
   10ce4:	d1f7      	bne.n	10cd6 <_printf_i+0x2e>
   10ce6:	6821      	ldr	r1, [r4, #0]
   10ce8:	681a      	ldr	r2, [r3, #0]
   10cea:	0608      	lsls	r0, r1, #24
   10cec:	d523      	bpl.n	10d36 <_printf_i+0x8e>
   10cee:	1d11      	adds	r1, r2, #4
   10cf0:	6019      	str	r1, [r3, #0]
   10cf2:	6815      	ldr	r5, [r2, #0]
   10cf4:	e025      	b.n	10d42 <_printf_i+0x9a>
   10cf6:	2a73      	cmp	r2, #115	; 0x73
   10cf8:	d100      	bne.n	10cfc <_printf_i+0x54>
   10cfa:	e088      	b.n	10e0e <_printf_i+0x166>
   10cfc:	d808      	bhi.n	10d10 <_printf_i+0x68>
   10cfe:	2a6f      	cmp	r2, #111	; 0x6f
   10d00:	d029      	beq.n	10d56 <_printf_i+0xae>
   10d02:	2a70      	cmp	r2, #112	; 0x70
   10d04:	d1e7      	bne.n	10cd6 <_printf_i+0x2e>
   10d06:	2220      	movs	r2, #32
   10d08:	6809      	ldr	r1, [r1, #0]
   10d0a:	430a      	orrs	r2, r1
   10d0c:	6022      	str	r2, [r4, #0]
   10d0e:	e003      	b.n	10d18 <_printf_i+0x70>
   10d10:	2a75      	cmp	r2, #117	; 0x75
   10d12:	d020      	beq.n	10d56 <_printf_i+0xae>
   10d14:	2a78      	cmp	r2, #120	; 0x78
   10d16:	d1de      	bne.n	10cd6 <_printf_i+0x2e>
   10d18:	0022      	movs	r2, r4
   10d1a:	2178      	movs	r1, #120	; 0x78
   10d1c:	3245      	adds	r2, #69	; 0x45
   10d1e:	7011      	strb	r1, [r2, #0]
   10d20:	4a6c      	ldr	r2, [pc, #432]	; (10ed4 <_printf_i+0x22c>)
   10d22:	e030      	b.n	10d86 <_printf_i+0xde>
   10d24:	000e      	movs	r6, r1
   10d26:	681a      	ldr	r2, [r3, #0]
   10d28:	3642      	adds	r6, #66	; 0x42
   10d2a:	1d11      	adds	r1, r2, #4
   10d2c:	6019      	str	r1, [r3, #0]
   10d2e:	6813      	ldr	r3, [r2, #0]
   10d30:	7033      	strb	r3, [r6, #0]
   10d32:	2301      	movs	r3, #1
   10d34:	e079      	b.n	10e2a <_printf_i+0x182>
   10d36:	0649      	lsls	r1, r1, #25
   10d38:	d5d9      	bpl.n	10cee <_printf_i+0x46>
   10d3a:	1d11      	adds	r1, r2, #4
   10d3c:	6019      	str	r1, [r3, #0]
   10d3e:	2300      	movs	r3, #0
   10d40:	5ed5      	ldrsh	r5, [r2, r3]
   10d42:	2d00      	cmp	r5, #0
   10d44:	da03      	bge.n	10d4e <_printf_i+0xa6>
   10d46:	232d      	movs	r3, #45	; 0x2d
   10d48:	9a04      	ldr	r2, [sp, #16]
   10d4a:	426d      	negs	r5, r5
   10d4c:	7013      	strb	r3, [r2, #0]
   10d4e:	4b62      	ldr	r3, [pc, #392]	; (10ed8 <_printf_i+0x230>)
   10d50:	270a      	movs	r7, #10
   10d52:	9303      	str	r3, [sp, #12]
   10d54:	e02f      	b.n	10db6 <_printf_i+0x10e>
   10d56:	6820      	ldr	r0, [r4, #0]
   10d58:	6819      	ldr	r1, [r3, #0]
   10d5a:	0605      	lsls	r5, r0, #24
   10d5c:	d503      	bpl.n	10d66 <_printf_i+0xbe>
   10d5e:	1d08      	adds	r0, r1, #4
   10d60:	6018      	str	r0, [r3, #0]
   10d62:	680d      	ldr	r5, [r1, #0]
   10d64:	e005      	b.n	10d72 <_printf_i+0xca>
   10d66:	0640      	lsls	r0, r0, #25
   10d68:	d5f9      	bpl.n	10d5e <_printf_i+0xb6>
   10d6a:	680d      	ldr	r5, [r1, #0]
   10d6c:	1d08      	adds	r0, r1, #4
   10d6e:	6018      	str	r0, [r3, #0]
   10d70:	b2ad      	uxth	r5, r5
   10d72:	4b59      	ldr	r3, [pc, #356]	; (10ed8 <_printf_i+0x230>)
   10d74:	2708      	movs	r7, #8
   10d76:	9303      	str	r3, [sp, #12]
   10d78:	2a6f      	cmp	r2, #111	; 0x6f
   10d7a:	d018      	beq.n	10dae <_printf_i+0x106>
   10d7c:	270a      	movs	r7, #10
   10d7e:	e016      	b.n	10dae <_printf_i+0x106>
   10d80:	3145      	adds	r1, #69	; 0x45
   10d82:	700a      	strb	r2, [r1, #0]
   10d84:	4a54      	ldr	r2, [pc, #336]	; (10ed8 <_printf_i+0x230>)
   10d86:	9203      	str	r2, [sp, #12]
   10d88:	681a      	ldr	r2, [r3, #0]
   10d8a:	6821      	ldr	r1, [r4, #0]
   10d8c:	1d10      	adds	r0, r2, #4
   10d8e:	6018      	str	r0, [r3, #0]
   10d90:	6815      	ldr	r5, [r2, #0]
   10d92:	0608      	lsls	r0, r1, #24
   10d94:	d522      	bpl.n	10ddc <_printf_i+0x134>
   10d96:	07cb      	lsls	r3, r1, #31
   10d98:	d502      	bpl.n	10da0 <_printf_i+0xf8>
   10d9a:	2320      	movs	r3, #32
   10d9c:	4319      	orrs	r1, r3
   10d9e:	6021      	str	r1, [r4, #0]
   10da0:	2710      	movs	r7, #16
   10da2:	2d00      	cmp	r5, #0
   10da4:	d103      	bne.n	10dae <_printf_i+0x106>
   10da6:	2320      	movs	r3, #32
   10da8:	6822      	ldr	r2, [r4, #0]
   10daa:	439a      	bics	r2, r3
   10dac:	6022      	str	r2, [r4, #0]
   10dae:	0023      	movs	r3, r4
   10db0:	2200      	movs	r2, #0
   10db2:	3343      	adds	r3, #67	; 0x43
   10db4:	701a      	strb	r2, [r3, #0]
   10db6:	6863      	ldr	r3, [r4, #4]
   10db8:	60a3      	str	r3, [r4, #8]
   10dba:	2b00      	cmp	r3, #0
   10dbc:	db5c      	blt.n	10e78 <_printf_i+0x1d0>
   10dbe:	2204      	movs	r2, #4
   10dc0:	6821      	ldr	r1, [r4, #0]
   10dc2:	4391      	bics	r1, r2
   10dc4:	6021      	str	r1, [r4, #0]
   10dc6:	2d00      	cmp	r5, #0
   10dc8:	d158      	bne.n	10e7c <_printf_i+0x1d4>
   10dca:	9e04      	ldr	r6, [sp, #16]
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d064      	beq.n	10e9a <_printf_i+0x1f2>
   10dd0:	0026      	movs	r6, r4
   10dd2:	9b03      	ldr	r3, [sp, #12]
   10dd4:	3642      	adds	r6, #66	; 0x42
   10dd6:	781b      	ldrb	r3, [r3, #0]
   10dd8:	7033      	strb	r3, [r6, #0]
   10dda:	e05e      	b.n	10e9a <_printf_i+0x1f2>
   10ddc:	0648      	lsls	r0, r1, #25
   10dde:	d5da      	bpl.n	10d96 <_printf_i+0xee>
   10de0:	b2ad      	uxth	r5, r5
   10de2:	e7d8      	b.n	10d96 <_printf_i+0xee>
   10de4:	6809      	ldr	r1, [r1, #0]
   10de6:	681a      	ldr	r2, [r3, #0]
   10de8:	0608      	lsls	r0, r1, #24
   10dea:	d505      	bpl.n	10df8 <_printf_i+0x150>
   10dec:	1d11      	adds	r1, r2, #4
   10dee:	6019      	str	r1, [r3, #0]
   10df0:	6813      	ldr	r3, [r2, #0]
   10df2:	6962      	ldr	r2, [r4, #20]
   10df4:	601a      	str	r2, [r3, #0]
   10df6:	e006      	b.n	10e06 <_printf_i+0x15e>
   10df8:	0649      	lsls	r1, r1, #25
   10dfa:	d5f7      	bpl.n	10dec <_printf_i+0x144>
   10dfc:	1d11      	adds	r1, r2, #4
   10dfe:	6019      	str	r1, [r3, #0]
   10e00:	6813      	ldr	r3, [r2, #0]
   10e02:	8aa2      	ldrh	r2, [r4, #20]
   10e04:	801a      	strh	r2, [r3, #0]
   10e06:	2300      	movs	r3, #0
   10e08:	9e04      	ldr	r6, [sp, #16]
   10e0a:	6123      	str	r3, [r4, #16]
   10e0c:	e054      	b.n	10eb8 <_printf_i+0x210>
   10e0e:	681a      	ldr	r2, [r3, #0]
   10e10:	1d11      	adds	r1, r2, #4
   10e12:	6019      	str	r1, [r3, #0]
   10e14:	6816      	ldr	r6, [r2, #0]
   10e16:	2100      	movs	r1, #0
   10e18:	6862      	ldr	r2, [r4, #4]
   10e1a:	0030      	movs	r0, r6
   10e1c:	f000 f958 	bl	110d0 <memchr>
   10e20:	2800      	cmp	r0, #0
   10e22:	d001      	beq.n	10e28 <_printf_i+0x180>
   10e24:	1b80      	subs	r0, r0, r6
   10e26:	6060      	str	r0, [r4, #4]
   10e28:	6863      	ldr	r3, [r4, #4]
   10e2a:	6123      	str	r3, [r4, #16]
   10e2c:	2300      	movs	r3, #0
   10e2e:	9a04      	ldr	r2, [sp, #16]
   10e30:	7013      	strb	r3, [r2, #0]
   10e32:	e041      	b.n	10eb8 <_printf_i+0x210>
   10e34:	6923      	ldr	r3, [r4, #16]
   10e36:	0032      	movs	r2, r6
   10e38:	9906      	ldr	r1, [sp, #24]
   10e3a:	9805      	ldr	r0, [sp, #20]
   10e3c:	9d07      	ldr	r5, [sp, #28]
   10e3e:	47a8      	blx	r5
   10e40:	1c43      	adds	r3, r0, #1
   10e42:	d043      	beq.n	10ecc <_printf_i+0x224>
   10e44:	6823      	ldr	r3, [r4, #0]
   10e46:	2500      	movs	r5, #0
   10e48:	079b      	lsls	r3, r3, #30
   10e4a:	d40f      	bmi.n	10e6c <_printf_i+0x1c4>
   10e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e4e:	68e0      	ldr	r0, [r4, #12]
   10e50:	4298      	cmp	r0, r3
   10e52:	da3d      	bge.n	10ed0 <_printf_i+0x228>
   10e54:	0018      	movs	r0, r3
   10e56:	e03b      	b.n	10ed0 <_printf_i+0x228>
   10e58:	0022      	movs	r2, r4
   10e5a:	2301      	movs	r3, #1
   10e5c:	3219      	adds	r2, #25
   10e5e:	9906      	ldr	r1, [sp, #24]
   10e60:	9805      	ldr	r0, [sp, #20]
   10e62:	9e07      	ldr	r6, [sp, #28]
   10e64:	47b0      	blx	r6
   10e66:	1c43      	adds	r3, r0, #1
   10e68:	d030      	beq.n	10ecc <_printf_i+0x224>
   10e6a:	3501      	adds	r5, #1
   10e6c:	68e3      	ldr	r3, [r4, #12]
   10e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e70:	1a9b      	subs	r3, r3, r2
   10e72:	429d      	cmp	r5, r3
   10e74:	dbf0      	blt.n	10e58 <_printf_i+0x1b0>
   10e76:	e7e9      	b.n	10e4c <_printf_i+0x1a4>
   10e78:	2d00      	cmp	r5, #0
   10e7a:	d0a9      	beq.n	10dd0 <_printf_i+0x128>
   10e7c:	9e04      	ldr	r6, [sp, #16]
   10e7e:	0028      	movs	r0, r5
   10e80:	0039      	movs	r1, r7
   10e82:	f7fe fc67 	bl	f754 <__aeabi_uidivmod>
   10e86:	9b03      	ldr	r3, [sp, #12]
   10e88:	3e01      	subs	r6, #1
   10e8a:	5c5b      	ldrb	r3, [r3, r1]
   10e8c:	0028      	movs	r0, r5
   10e8e:	7033      	strb	r3, [r6, #0]
   10e90:	0039      	movs	r1, r7
   10e92:	f7fe fbd9 	bl	f648 <__udivsi3>
   10e96:	1e05      	subs	r5, r0, #0
   10e98:	d1f1      	bne.n	10e7e <_printf_i+0x1d6>
   10e9a:	2f08      	cmp	r7, #8
   10e9c:	d109      	bne.n	10eb2 <_printf_i+0x20a>
   10e9e:	6823      	ldr	r3, [r4, #0]
   10ea0:	07db      	lsls	r3, r3, #31
   10ea2:	d506      	bpl.n	10eb2 <_printf_i+0x20a>
   10ea4:	6863      	ldr	r3, [r4, #4]
   10ea6:	6922      	ldr	r2, [r4, #16]
   10ea8:	4293      	cmp	r3, r2
   10eaa:	dc02      	bgt.n	10eb2 <_printf_i+0x20a>
   10eac:	2330      	movs	r3, #48	; 0x30
   10eae:	3e01      	subs	r6, #1
   10eb0:	7033      	strb	r3, [r6, #0]
   10eb2:	9b04      	ldr	r3, [sp, #16]
   10eb4:	1b9b      	subs	r3, r3, r6
   10eb6:	6123      	str	r3, [r4, #16]
   10eb8:	9b07      	ldr	r3, [sp, #28]
   10eba:	aa09      	add	r2, sp, #36	; 0x24
   10ebc:	9300      	str	r3, [sp, #0]
   10ebe:	0021      	movs	r1, r4
   10ec0:	9b06      	ldr	r3, [sp, #24]
   10ec2:	9805      	ldr	r0, [sp, #20]
   10ec4:	f7ff fe82 	bl	10bcc <_printf_common>
   10ec8:	1c43      	adds	r3, r0, #1
   10eca:	d1b3      	bne.n	10e34 <_printf_i+0x18c>
   10ecc:	2001      	movs	r0, #1
   10ece:	4240      	negs	r0, r0
   10ed0:	b00b      	add	sp, #44	; 0x2c
   10ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ed4:	0001285c 	.word	0x0001285c
   10ed8:	0001284b 	.word	0x0001284b

00010edc <_putc_r>:
   10edc:	b570      	push	{r4, r5, r6, lr}
   10ede:	0006      	movs	r6, r0
   10ee0:	000d      	movs	r5, r1
   10ee2:	0014      	movs	r4, r2
   10ee4:	2800      	cmp	r0, #0
   10ee6:	d004      	beq.n	10ef2 <_putc_r+0x16>
   10ee8:	6983      	ldr	r3, [r0, #24]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d101      	bne.n	10ef2 <_putc_r+0x16>
   10eee:	f7ff fab1 	bl	10454 <__sinit>
   10ef2:	4b12      	ldr	r3, [pc, #72]	; (10f3c <_putc_r+0x60>)
   10ef4:	429c      	cmp	r4, r3
   10ef6:	d111      	bne.n	10f1c <_putc_r+0x40>
   10ef8:	6874      	ldr	r4, [r6, #4]
   10efa:	68a3      	ldr	r3, [r4, #8]
   10efc:	3b01      	subs	r3, #1
   10efe:	60a3      	str	r3, [r4, #8]
   10f00:	2b00      	cmp	r3, #0
   10f02:	da05      	bge.n	10f10 <_putc_r+0x34>
   10f04:	69a2      	ldr	r2, [r4, #24]
   10f06:	4293      	cmp	r3, r2
   10f08:	db12      	blt.n	10f30 <_putc_r+0x54>
   10f0a:	b2eb      	uxtb	r3, r5
   10f0c:	2b0a      	cmp	r3, #10
   10f0e:	d00f      	beq.n	10f30 <_putc_r+0x54>
   10f10:	6823      	ldr	r3, [r4, #0]
   10f12:	b2e8      	uxtb	r0, r5
   10f14:	1c5a      	adds	r2, r3, #1
   10f16:	6022      	str	r2, [r4, #0]
   10f18:	701d      	strb	r5, [r3, #0]
   10f1a:	bd70      	pop	{r4, r5, r6, pc}
   10f1c:	4b08      	ldr	r3, [pc, #32]	; (10f40 <_putc_r+0x64>)
   10f1e:	429c      	cmp	r4, r3
   10f20:	d101      	bne.n	10f26 <_putc_r+0x4a>
   10f22:	68b4      	ldr	r4, [r6, #8]
   10f24:	e7e9      	b.n	10efa <_putc_r+0x1e>
   10f26:	4b07      	ldr	r3, [pc, #28]	; (10f44 <_putc_r+0x68>)
   10f28:	429c      	cmp	r4, r3
   10f2a:	d1e6      	bne.n	10efa <_putc_r+0x1e>
   10f2c:	68f4      	ldr	r4, [r6, #12]
   10f2e:	e7e4      	b.n	10efa <_putc_r+0x1e>
   10f30:	0022      	movs	r2, r4
   10f32:	0029      	movs	r1, r5
   10f34:	0030      	movs	r0, r6
   10f36:	f7ff f8c9 	bl	100cc <__swbuf_r>
   10f3a:	e7ee      	b.n	10f1a <_putc_r+0x3e>
   10f3c:	000127f0 	.word	0x000127f0
   10f40:	00012810 	.word	0x00012810
   10f44:	000127d0 	.word	0x000127d0

00010f48 <__sread>:
   10f48:	b570      	push	{r4, r5, r6, lr}
   10f4a:	000c      	movs	r4, r1
   10f4c:	250e      	movs	r5, #14
   10f4e:	5f49      	ldrsh	r1, [r1, r5]
   10f50:	f000 f8f0 	bl	11134 <_read_r>
   10f54:	2800      	cmp	r0, #0
   10f56:	db03      	blt.n	10f60 <__sread+0x18>
   10f58:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10f5a:	181b      	adds	r3, r3, r0
   10f5c:	6563      	str	r3, [r4, #84]	; 0x54
   10f5e:	bd70      	pop	{r4, r5, r6, pc}
   10f60:	89a3      	ldrh	r3, [r4, #12]
   10f62:	4a02      	ldr	r2, [pc, #8]	; (10f6c <__sread+0x24>)
   10f64:	4013      	ands	r3, r2
   10f66:	81a3      	strh	r3, [r4, #12]
   10f68:	e7f9      	b.n	10f5e <__sread+0x16>
   10f6a:	46c0      	nop			; (mov r8, r8)
   10f6c:	ffffefff 	.word	0xffffefff

00010f70 <__swrite>:
   10f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f72:	001f      	movs	r7, r3
   10f74:	898b      	ldrh	r3, [r1, #12]
   10f76:	0005      	movs	r5, r0
   10f78:	000c      	movs	r4, r1
   10f7a:	0016      	movs	r6, r2
   10f7c:	05db      	lsls	r3, r3, #23
   10f7e:	d505      	bpl.n	10f8c <__swrite+0x1c>
   10f80:	230e      	movs	r3, #14
   10f82:	5ec9      	ldrsh	r1, [r1, r3]
   10f84:	2200      	movs	r2, #0
   10f86:	2302      	movs	r3, #2
   10f88:	f000 f88e 	bl	110a8 <_lseek_r>
   10f8c:	89a3      	ldrh	r3, [r4, #12]
   10f8e:	4a05      	ldr	r2, [pc, #20]	; (10fa4 <__swrite+0x34>)
   10f90:	0028      	movs	r0, r5
   10f92:	4013      	ands	r3, r2
   10f94:	81a3      	strh	r3, [r4, #12]
   10f96:	0032      	movs	r2, r6
   10f98:	230e      	movs	r3, #14
   10f9a:	5ee1      	ldrsh	r1, [r4, r3]
   10f9c:	003b      	movs	r3, r7
   10f9e:	f000 f839 	bl	11014 <_write_r>
   10fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10fa4:	ffffefff 	.word	0xffffefff

00010fa8 <__sseek>:
   10fa8:	b570      	push	{r4, r5, r6, lr}
   10faa:	000c      	movs	r4, r1
   10fac:	250e      	movs	r5, #14
   10fae:	5f49      	ldrsh	r1, [r1, r5]
   10fb0:	f000 f87a 	bl	110a8 <_lseek_r>
   10fb4:	89a3      	ldrh	r3, [r4, #12]
   10fb6:	1c42      	adds	r2, r0, #1
   10fb8:	d103      	bne.n	10fc2 <__sseek+0x1a>
   10fba:	4a05      	ldr	r2, [pc, #20]	; (10fd0 <__sseek+0x28>)
   10fbc:	4013      	ands	r3, r2
   10fbe:	81a3      	strh	r3, [r4, #12]
   10fc0:	bd70      	pop	{r4, r5, r6, pc}
   10fc2:	2280      	movs	r2, #128	; 0x80
   10fc4:	0152      	lsls	r2, r2, #5
   10fc6:	4313      	orrs	r3, r2
   10fc8:	81a3      	strh	r3, [r4, #12]
   10fca:	6560      	str	r0, [r4, #84]	; 0x54
   10fcc:	e7f8      	b.n	10fc0 <__sseek+0x18>
   10fce:	46c0      	nop			; (mov r8, r8)
   10fd0:	ffffefff 	.word	0xffffefff

00010fd4 <__sclose>:
   10fd4:	b510      	push	{r4, lr}
   10fd6:	230e      	movs	r3, #14
   10fd8:	5ec9      	ldrsh	r1, [r1, r3]
   10fda:	f000 f82f 	bl	1103c <_close_r>
   10fde:	bd10      	pop	{r4, pc}

00010fe0 <strchr>:
   10fe0:	b2c9      	uxtb	r1, r1
   10fe2:	7803      	ldrb	r3, [r0, #0]
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d004      	beq.n	10ff2 <strchr+0x12>
   10fe8:	4299      	cmp	r1, r3
   10fea:	d100      	bne.n	10fee <strchr+0xe>
   10fec:	4770      	bx	lr
   10fee:	3001      	adds	r0, #1
   10ff0:	e7f7      	b.n	10fe2 <strchr+0x2>
   10ff2:	424b      	negs	r3, r1
   10ff4:	4159      	adcs	r1, r3
   10ff6:	4249      	negs	r1, r1
   10ff8:	4008      	ands	r0, r1
   10ffa:	e7f7      	b.n	10fec <strchr+0xc>

00010ffc <__ascii_wctomb>:
   10ffc:	1e0b      	subs	r3, r1, #0
   10ffe:	d004      	beq.n	1100a <__ascii_wctomb+0xe>
   11000:	2aff      	cmp	r2, #255	; 0xff
   11002:	d904      	bls.n	1100e <__ascii_wctomb+0x12>
   11004:	238a      	movs	r3, #138	; 0x8a
   11006:	6003      	str	r3, [r0, #0]
   11008:	3b8b      	subs	r3, #139	; 0x8b
   1100a:	0018      	movs	r0, r3
   1100c:	4770      	bx	lr
   1100e:	700a      	strb	r2, [r1, #0]
   11010:	2301      	movs	r3, #1
   11012:	e7fa      	b.n	1100a <__ascii_wctomb+0xe>

00011014 <_write_r>:
   11014:	b570      	push	{r4, r5, r6, lr}
   11016:	0005      	movs	r5, r0
   11018:	0008      	movs	r0, r1
   1101a:	0011      	movs	r1, r2
   1101c:	2200      	movs	r2, #0
   1101e:	4c06      	ldr	r4, [pc, #24]	; (11038 <_write_r+0x24>)
   11020:	6022      	str	r2, [r4, #0]
   11022:	001a      	movs	r2, r3
   11024:	f7fc feae 	bl	dd84 <_write>
   11028:	1c43      	adds	r3, r0, #1
   1102a:	d103      	bne.n	11034 <_write_r+0x20>
   1102c:	6823      	ldr	r3, [r4, #0]
   1102e:	2b00      	cmp	r3, #0
   11030:	d000      	beq.n	11034 <_write_r+0x20>
   11032:	602b      	str	r3, [r5, #0]
   11034:	bd70      	pop	{r4, r5, r6, pc}
   11036:	46c0      	nop			; (mov r8, r8)
   11038:	200012c0 	.word	0x200012c0

0001103c <_close_r>:
   1103c:	2300      	movs	r3, #0
   1103e:	b570      	push	{r4, r5, r6, lr}
   11040:	4c06      	ldr	r4, [pc, #24]	; (1105c <_close_r+0x20>)
   11042:	0005      	movs	r5, r0
   11044:	0008      	movs	r0, r1
   11046:	6023      	str	r3, [r4, #0]
   11048:	f7fc fee4 	bl	de14 <_close>
   1104c:	1c43      	adds	r3, r0, #1
   1104e:	d103      	bne.n	11058 <_close_r+0x1c>
   11050:	6823      	ldr	r3, [r4, #0]
   11052:	2b00      	cmp	r3, #0
   11054:	d000      	beq.n	11058 <_close_r+0x1c>
   11056:	602b      	str	r3, [r5, #0]
   11058:	bd70      	pop	{r4, r5, r6, pc}
   1105a:	46c0      	nop			; (mov r8, r8)
   1105c:	200012c0 	.word	0x200012c0

00011060 <_fstat_r>:
   11060:	2300      	movs	r3, #0
   11062:	b570      	push	{r4, r5, r6, lr}
   11064:	4c06      	ldr	r4, [pc, #24]	; (11080 <_fstat_r+0x20>)
   11066:	0005      	movs	r5, r0
   11068:	0008      	movs	r0, r1
   1106a:	0011      	movs	r1, r2
   1106c:	6023      	str	r3, [r4, #0]
   1106e:	f7fc fed4 	bl	de1a <_fstat>
   11072:	1c43      	adds	r3, r0, #1
   11074:	d103      	bne.n	1107e <_fstat_r+0x1e>
   11076:	6823      	ldr	r3, [r4, #0]
   11078:	2b00      	cmp	r3, #0
   1107a:	d000      	beq.n	1107e <_fstat_r+0x1e>
   1107c:	602b      	str	r3, [r5, #0]
   1107e:	bd70      	pop	{r4, r5, r6, pc}
   11080:	200012c0 	.word	0x200012c0

00011084 <_isatty_r>:
   11084:	2300      	movs	r3, #0
   11086:	b570      	push	{r4, r5, r6, lr}
   11088:	4c06      	ldr	r4, [pc, #24]	; (110a4 <_isatty_r+0x20>)
   1108a:	0005      	movs	r5, r0
   1108c:	0008      	movs	r0, r1
   1108e:	6023      	str	r3, [r4, #0]
   11090:	f7fc fec8 	bl	de24 <_isatty>
   11094:	1c43      	adds	r3, r0, #1
   11096:	d103      	bne.n	110a0 <_isatty_r+0x1c>
   11098:	6823      	ldr	r3, [r4, #0]
   1109a:	2b00      	cmp	r3, #0
   1109c:	d000      	beq.n	110a0 <_isatty_r+0x1c>
   1109e:	602b      	str	r3, [r5, #0]
   110a0:	bd70      	pop	{r4, r5, r6, pc}
   110a2:	46c0      	nop			; (mov r8, r8)
   110a4:	200012c0 	.word	0x200012c0

000110a8 <_lseek_r>:
   110a8:	b570      	push	{r4, r5, r6, lr}
   110aa:	0005      	movs	r5, r0
   110ac:	0008      	movs	r0, r1
   110ae:	0011      	movs	r1, r2
   110b0:	2200      	movs	r2, #0
   110b2:	4c06      	ldr	r4, [pc, #24]	; (110cc <_lseek_r+0x24>)
   110b4:	6022      	str	r2, [r4, #0]
   110b6:	001a      	movs	r2, r3
   110b8:	f7fc feb6 	bl	de28 <_lseek>
   110bc:	1c43      	adds	r3, r0, #1
   110be:	d103      	bne.n	110c8 <_lseek_r+0x20>
   110c0:	6823      	ldr	r3, [r4, #0]
   110c2:	2b00      	cmp	r3, #0
   110c4:	d000      	beq.n	110c8 <_lseek_r+0x20>
   110c6:	602b      	str	r3, [r5, #0]
   110c8:	bd70      	pop	{r4, r5, r6, pc}
   110ca:	46c0      	nop			; (mov r8, r8)
   110cc:	200012c0 	.word	0x200012c0

000110d0 <memchr>:
   110d0:	b2c9      	uxtb	r1, r1
   110d2:	1882      	adds	r2, r0, r2
   110d4:	4290      	cmp	r0, r2
   110d6:	d101      	bne.n	110dc <memchr+0xc>
   110d8:	2000      	movs	r0, #0
   110da:	4770      	bx	lr
   110dc:	7803      	ldrb	r3, [r0, #0]
   110de:	428b      	cmp	r3, r1
   110e0:	d0fb      	beq.n	110da <memchr+0xa>
   110e2:	3001      	adds	r0, #1
   110e4:	e7f6      	b.n	110d4 <memchr+0x4>

000110e6 <_realloc_r>:
   110e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110e8:	0007      	movs	r7, r0
   110ea:	000d      	movs	r5, r1
   110ec:	0016      	movs	r6, r2
   110ee:	2900      	cmp	r1, #0
   110f0:	d105      	bne.n	110fe <_realloc_r+0x18>
   110f2:	0011      	movs	r1, r2
   110f4:	f7fe fcea 	bl	facc <_malloc_r>
   110f8:	0004      	movs	r4, r0
   110fa:	0020      	movs	r0, r4
   110fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110fe:	2a00      	cmp	r2, #0
   11100:	d103      	bne.n	1110a <_realloc_r+0x24>
   11102:	f7fe fc99 	bl	fa38 <_free_r>
   11106:	0034      	movs	r4, r6
   11108:	e7f7      	b.n	110fa <_realloc_r+0x14>
   1110a:	f000 f827 	bl	1115c <_malloc_usable_size_r>
   1110e:	002c      	movs	r4, r5
   11110:	4286      	cmp	r6, r0
   11112:	d9f2      	bls.n	110fa <_realloc_r+0x14>
   11114:	0031      	movs	r1, r6
   11116:	0038      	movs	r0, r7
   11118:	f7fe fcd8 	bl	facc <_malloc_r>
   1111c:	1e04      	subs	r4, r0, #0
   1111e:	d0ec      	beq.n	110fa <_realloc_r+0x14>
   11120:	0029      	movs	r1, r5
   11122:	0032      	movs	r2, r6
   11124:	f7fe fc64 	bl	f9f0 <memcpy>
   11128:	0029      	movs	r1, r5
   1112a:	0038      	movs	r0, r7
   1112c:	f7fe fc84 	bl	fa38 <_free_r>
   11130:	e7e3      	b.n	110fa <_realloc_r+0x14>
	...

00011134 <_read_r>:
   11134:	b570      	push	{r4, r5, r6, lr}
   11136:	0005      	movs	r5, r0
   11138:	0008      	movs	r0, r1
   1113a:	0011      	movs	r1, r2
   1113c:	2200      	movs	r2, #0
   1113e:	4c06      	ldr	r4, [pc, #24]	; (11158 <_read_r+0x24>)
   11140:	6022      	str	r2, [r4, #0]
   11142:	001a      	movs	r2, r3
   11144:	f7fc fdfe 	bl	dd44 <_read>
   11148:	1c43      	adds	r3, r0, #1
   1114a:	d103      	bne.n	11154 <_read_r+0x20>
   1114c:	6823      	ldr	r3, [r4, #0]
   1114e:	2b00      	cmp	r3, #0
   11150:	d000      	beq.n	11154 <_read_r+0x20>
   11152:	602b      	str	r3, [r5, #0]
   11154:	bd70      	pop	{r4, r5, r6, pc}
   11156:	46c0      	nop			; (mov r8, r8)
   11158:	200012c0 	.word	0x200012c0

0001115c <_malloc_usable_size_r>:
   1115c:	1f0b      	subs	r3, r1, #4
   1115e:	681b      	ldr	r3, [r3, #0]
   11160:	1f18      	subs	r0, r3, #4
   11162:	2b00      	cmp	r3, #0
   11164:	da01      	bge.n	1116a <_malloc_usable_size_r+0xe>
   11166:	580b      	ldr	r3, [r1, r0]
   11168:	18c0      	adds	r0, r0, r3
   1116a:	4770      	bx	lr

0001116c <_tcc_apbcmasks>:
   1116c:	0100 0000 0200 0000 0400 0000               ............

00011178 <_tcc_cc_nums>:
   11178:	0204 0002                                   ....

0001117c <_tcc_gclk_ids>:
   1117c:	1a1a 001b                                   ....

00011180 <_tcc_maxs>:
   11180:	ffff 00ff ffff 00ff ffff 0000               ............

0001118c <_tcc_ow_nums>:
   1118c:	0408 0002                                   ....

00011190 <tcc_modules>:
   11190:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0001119c <_tcc_intflag>:
   1119c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   111ac:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   111bc:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000111cc <tcc_interrupt_vectors.12434>:
   111cc:	100f 0011 3130 3332 3534 3736 3938 6261     ....0123456789ab
   111dc:	6463 6665 0d31 0000 7254 6e61 6673 7265     cdef1...Transfer
   111ec:	452d 636e 646f 6e69 3a67 0020 6f43 6e6e     -Encoding: .Conn
   111fc:	6365 6974 6e6f 203a 0000 0000 5448 5054     ection: ....HTTP
   1120c:	002f 0000 4547 2054 0000 0000 4f50 5453     /...GET ....POST
   1121c:	0020 0000 4544 454c 4554 0020 5550 2054      ...DELETE .PUT 
   1122c:	0000 0000 504f 4954 4e4f 2053 0000 0000     ....OPTIONS ....
   1123c:	4548 4441 0020 0000 4820 5454 2f50 2e31     HEAD ... HTTP/1.
   1124c:	0d31 000a 7355 7265 412d 6567 746e 203a     1...User-Agent: 
   1125c:	0000 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   1126c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   1127c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   1128c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   1129c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   112ac:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   112bc:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   112cc:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   112dc:	654c 676e 6874 203a 0000 0000 7461 656d     Length: ....atme
   112ec:	2f6c 2e31 2e30 0032 7468 7074 2f3a 002f     l/1.0.2.http://.
   112fc:	7468 7074 3a73 2f2f 0000 0000 2000 4200     https://..... .B
   1130c:	2400 4200 2800 4200 6f63 666e 6769 7275     .$.B.(.Bconfigur
   1131c:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   1132c:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   1133c:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   1134c:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   1135c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1136c:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   1137c:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   1138c:	6465 0d2e 0000 0000 7468 7074 635f 696c     ed......http_cli
   1139c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   113ac:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   113bc:	000d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   113cc:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   113dc:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   113ec:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   113fc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1140c:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   1141c:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   1142c:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   1143c:	4320 7261 2064 6e69 7473 6c61 206c 6166      Card install fa
   1144c:	6c69 6465 0d2e 0000 6e69 7469 735f 6f74     iled....init_sto
   1145c:	6172 6567 203a 7274 2079 6e75 6c70 6775     rage: try unplug
   1146c:	6120 646e 7220 2d65 6c70 6775 7420 6568      and re-plug the
   1147c:	6320 7261 2e64 000d 6e69 7469 735f 6f74      card...init_sto
   1148c:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   1149c:	2044 6163 6472 2e2e 0d2e 0000 6e69 7469     D card......init
   114ac:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   114bc:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   114cc:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   114dc:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   114ec:	2064 6f6d 6e75 2074 4b4f 0d2e 0000 0000     d mount OK......
   114fc:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   1150c:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   1151c:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   1152c:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   1153c:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   1154c:	616d 6e69 203a 6c70 6165 6573 7520 706e     main: please unp
   1155c:	756c 2067 6874 2065 4453 4d2f 434d 6320     lug the SD/MMC c
   1156c:	7261 2e64 000d 0000 616d 6e69 203a 6f64     ard.....main: do
   1157c:	656e 0d2e 0000 0000 3025 6433 0000 0000     ne......%03d....
   1158c:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   1159c:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   115ac:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   115bc:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   115cc:	4d4d 2043 7473 726f 6761 2065 6f6e 2074     MMC storage not 
   115dc:	6572 6461 2e79 000d 7473 7261 5f74 6f64     ready...start_do
   115ec:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   115fc:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   1160c:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   1161c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   1162c:	6e65 2074 6c61 6572 6461 2e79 000d 0000     ent already.....
   1163c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1164c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   1165c:	6120 726c 6165 7964 0d2e 0000 7473 7261      already....star
   1166c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   1167c:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   1168c:	2e2e 0d2e 0000 0000 7468 7074 2f3a 772f     ........http://w
   1169c:	7777 732e 6165 2e73 7075 6e65 2e6e 6465     ww.seas.upenn.ed
   116ac:	2f75 707e 7261 6170 6574 2f6c 6473 695f     u/~parpatel/sd_i
   116bc:	616d 6567 622e 6e69 0000 0000 7473 726f     mage.bin....stor
   116cc:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   116dc:	706d 7974 6420 7461 2e61 000d 7473 726f     mpty data...stor
   116ec:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   116fc:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   1170c:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   1171c:	6361 656b 3a74 6620 6c69 2065 616e 656d     acket: file name
   1172c:	6920 2073 6e69 6176 696c 2e64 4420 776f      is invalid. Dow
   1173c:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   1174c:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1175c:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   1176c:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   1177c:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   1178c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   1179c:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   117ac:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   117bc:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   117cc:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   117dc:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   117ec:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   117fc:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   1180c:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   1181c:	7373 7566 6c6c 2e79 000d 0000 6977 6966     ssfully.....wifi
   1182c:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   1183c:	4e4e 4345 4554 0d44 0000 0000 6977 6966     NNECTED.....wifi
   1184c:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   1185c:	4353 4e4f 454e 5443 4445 000d 6f71 706f     SCONNECTED..qoop
   1186c:	6f71 706f 0000 0000 7350 6f70 0074 0000     qoop....Pspot...
   1187c:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   1188c:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   1189c:	7525 0a0d 0000 0000                         %u......

000118a4 <mmc_trans_multipliers>:
   118a4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   118b4:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   118c4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   118d4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000118e4 <sd_mmc_trans_units>:
   118e4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00011900 <sd_trans_multipliers>:
   11900:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   11910:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   11920:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   11930:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00011940 <__FUNCTION__.15306>:
   11940:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   11950:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   11960:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   11970:	746c 6320 646d 0000                         lt cmd..

00011978 <__FUNCTION__.13058>:
   11978:	6968 5f66 6573 646e 0000 0000               hif_send....

00011984 <__FUNCTION__.13068>:
   11984:	6968 5f66 7369 0072                         hif_isr.

0001198c <__FUNCTION__.13074>:
   1198c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0001199c <__FUNCTION__.13086>:
   1199c:	6968 5f66 6572 6563 7669 0065               hif_receive.

000119a8 <__FUNCTION__.13102>:
   119a8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   119b8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   119c8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   119d8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   119e8:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   119f8:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   11a08:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   11a18:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   11a28:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   11a38:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   11a48:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   11a58:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   11a68:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   11a78:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   11a88:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   11a98:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   11aa8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   11ab8:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   11ac8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   11ad8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   11ae8:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   11af8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   11b08:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   11b18:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   11b28:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   11b38:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   11b48:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   11b58:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   11b68:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   11b78:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   11b88:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   11b98:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   11ba8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   11bb8:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   11bc8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   11bd8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   11be8:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   11bf8:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   11c08:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   11c18:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   11c28:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   11c38:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   11c48:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   11c58:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   11c68:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   11c78:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   11c88:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00011c98 <__FUNCTION__.13037>:
   11c98:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00011ca4 <__FUNCTION__.13066>:
   11ca4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00011cb4 <__FUNCTION__.13094>:
   11cb4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   11cc4:	735f 0063 4e49 4156 494c 2044 4f50 4e49     _sc.INVALID POIN
   11cd4:	4554 0052 4e49 4156 494c 2044 6f4e 6f20     TER.INVALID No o
   11ce4:	2066 6373 6e61 7320 6f6c 7374 2021 6425     f scan slots! %d
   11cf4:	000a 0000 4e49 4156 494c 2044 6373 6e61     ....INVALID scan
   11d04:	7320 6f6c 2074 6974 656d 2021 6425 000a      slot time! %d..
   11d14:	4e49 4156 494c 2044 6f4e 6f20 2066 7270     INVALID No of pr
   11d24:	626f 2065 6572 7571 7365 7374 7020 7265     obe requests per
   11d34:	7320 6163 206e 6c73 746f 2520 0a64 0000      scan slot %d...
   11d44:	4e49 4156 494c 2044 5352 4953 7420 7268     INVALID RSSI thr
   11d54:	7365 6f68 646c 2520 2064 000a 6f43 666e     eshold %d ..Conf
   11d64:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   11d74:	2e75 7525 252e 2075 2022 000a 4552 2051     u.%u.%u " ..REQ 
   11d84:	6f4e 2074 6564 6966 656e 2064 6425 000a     Not defined %d..
   11d94:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   11da4:	0000 0000 6e49 6176 696c 2064 654b 0079     ....Invalid Key.
   11db4:	5353 4449 4c20 4e45 4920 564e 4c41 4449     SSID LEN INVALID
   11dc4:	0000 0000 4843 4920 564e 4c41 4449 0000     ....CH INVALID..
   11dd4:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   11de4:	6e69 6564 2078 6425 000a 0000 6e49 6176     index %d....Inva
   11df4:	696c 2064 6557 2070 656b 2079 656c 676e     lid Wep key leng
   11e04:	6874 2520 0a64 0000 6e49 6f63 7272 6365     th %d...Incorrec
   11e14:	2074 5350 204b 656b 2079 656c 676e 6874     t PSK key length
   11e24:	0000 0000 6e75 6564 6966 656e 2064 6573     ....undefined se
   11e34:	2063 7974 6570 0000 6946 6d72 6177 6572     c type..Firmware
   11e44:	7620 7265 2020 3a20 2520 2e75 7525 252e      ver   : %u.%u.%
   11e54:	2075 7653 726e 7665 2520 0a75 0000 0000     u Svnrev %u.....
   11e64:	6946 6d72 6177 6572 4220 6975 646c 2520     Firmware Build %
   11e74:	2073 6954 656d 2520 0a73 0000 6946 6d72     s Time %s...Firm
   11e84:	6177 6572 4d20 6e69 6420 6972 6576 2072     ware Min driver 
   11e94:	6576 2072 203a 7525 252e 2e75 7525 000a     ver : %u.%u.%u..
   11ea4:	7244 7669 7265 7620 7265 203a 7525 252e     Driver ver: %u.%
   11eb4:	2e75 7525 000a 0000 3132 353a 3a39 3332     u.%u....21:59:23
   11ec4:	0000 0000 7041 2072 3831 3220 3130 0037     ....Apr 18 2017.
   11ed4:	7244 7669 7265 6220 6975 746c 6120 2074     Driver built at 
   11ee4:	7325 2509 0a73 0000 694d 6d73 7461 6863     %s.%s...Mismatch
   11ef4:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
   11f04:	006e 0000                                   n...

00011f08 <__FUNCTION__.12900>:
   11f08:	6863 7069 775f 6b61 0065 0000               chip_wake...

00011f14 <__FUNCTION__.12949>:
   11f14:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   11f24:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   11f34:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   11f44:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   11f54:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   11f64:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   11f74:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00011f84 <__FUNCTION__.12947>:
   11f84:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00011f90 <__FUNCTION__.12954>:
   11f90:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   11fa0:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   11fb0:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   11fc0:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   11fd0:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   11fe0:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   11ff0:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   12000:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   12010:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   12020:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   12030:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   12040:	4920 2044 6c25 0a78 0000 0000                ID %lx.....

0001204c <__FUNCTION__.12253>:
   1204c:	7073 5f69 6d63 0064                         spi_cmd.

00012054 <__FUNCTION__.12260>:
   12054:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00012064 <__FUNCTION__.12269>:
   12064:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00012070 <__FUNCTION__.12285>:
   12070:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00012080 <__FUNCTION__.12300>:
   12080:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00012090 <__FUNCTION__.12312>:
   12090:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000120a0 <__FUNCTION__.12323>:
   120a0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000120b0 <__FUNCTION__.12335>:
   120b0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000120c0 <__FUNCTION__.12348>:
   120c0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000120cc <__FUNCTION__.12369>:
   120cc:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

000120d8 <crc7_syndrome_table>:
   120d8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   120e8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   120f8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   12108:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   12118:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   12128:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   12138:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   12148:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   12158:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   12168:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   12178:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   12188:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   12198:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   121a8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   121b8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   121c8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   121d8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   121e8:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   121f8:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   12208:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   12218:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   12228:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   12238:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   12248:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   12258:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   12268:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   12278:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   12288:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   12298:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   122a8:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   122b8:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   122c8:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   122d8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   122e8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   122f8:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   12308:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   12318:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   12328:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   12338:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   12348:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   12358:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   12368:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   12378:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   12388:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   12398:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   123a8:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   123b8:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   123c8:	3a5d 4620 6961 656c 2064 6c62 636f 206b     ]: Failed block 
   123d8:	6164 6174 7720 6972 6574 2e2e 002e 0000     data write......
   123e8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   123f8:	2064 6d63 2064 7277 7469 2c65 6220 7375     d cmd write, bus
   12408:	6520 7272 726f 2e2e 002e 0000 6e5b 696d      error......[nmi
   12418:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   12428:	2064 6572 7073 6e6f 6573 7220 6165 2c64     d response read,
   12438:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   12448:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   12458:	2064 6164 6174 7220 7365 6f70 736e 2065     d data response 
   12468:	6572 6461 202c 7562 2073 7265 6f72 2e72     read, bus error.
   12478:	2e2e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   12488:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   12498:	736e 2065 6572 6461 2e2e 282e 3025 7832     nse read...(%02x
   124a8:	0a29 0000 6e5b 696d 7320 6970 3a5d 4620     )...[nmi spi]: F
   124b8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   124c8:	7220 6165 2c64 6220 7375 6520 7272 726f      read, bus error
   124d8:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   124e8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   124f8:	6320 6372 7220 6165 2c64 6220 7375 6520      crc read, bus e
   12508:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   12518:	3a5d 4620 6961 656c 2064 7562 2073 7265     ]: Failed bus er
   12528:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   12538:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   12548:	7365 6f70 736e 2065 6572 6461 202c 7825     esponse read, %x
   12558:	2520 2078 7825 000a 6e5b 696d 7320 6970      %x %x..[nmi spi
   12568:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   12578:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   12588:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   12598:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   125a8:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   125b8:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   125c8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   125d8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   125e8:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   125f8:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   12608:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   12618:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   12628:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   12638:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   12648:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   12658:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   12668:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   12678:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   12688:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   12698:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   126a8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   126b8:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   126c8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   126d8:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   126e8:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   126f8:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   12708:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   12718:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   12728:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   12738:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   12748:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   12758:	206e 4449 3d20 2520 0d64 000a 5322 2f44     n ID = %d..."SD/
   12768:	4d4d 2043 6143 6472 5320 6f6c 2074 2230     MMC Card Slot 0"
   12778:	0000 0000 3231 2e2e 452e 0046 0800 4200     ....12...EF....B
   12788:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   12798:	1c00 4200 0a09 0c0b 0e0d 0000 0300 0102     ...B............

000127a8 <_usb_device_irq_bits>:
   127a8:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

000127b8 <_usb_endpoint_irq_bits>:
   127b8:	0c03 6010 2a22 2c2b 3b3a 3d3c 3f3e 5d5b     ...`"*+,:;<=>?[]
   127c8:	7f7c 0000                                   |...

000127cc <_global_impure_ptr>:
   127cc:	0220 2000                                    .. 

000127d0 <__sf_fake_stderr>:
	...

000127f0 <__sf_fake_stdin>:
	...

00012810 <__sf_fake_stdout>:
	...
   12830:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   12840:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   12850:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   12860:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0001286d <_ctype_>:
   1286d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1287d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1288d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1289d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   128ad:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   128bd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   128cd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   128dd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   128ed:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00012970 <_init>:
   12970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12972:	46c0      	nop			; (mov r8, r8)
   12974:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12976:	bc08      	pop	{r3}
   12978:	469e      	mov	lr, r3
   1297a:	4770      	bx	lr

0001297c <__init_array_start>:
   1297c:	000000dd 	.word	0x000000dd

00012980 <_fini>:
   12980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12982:	46c0      	nop			; (mov r8, r8)
   12984:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12986:	bc08      	pop	{r3}
   12988:	469e      	mov	lr, r3
   1298a:	4770      	bx	lr

0001298c <__fini_array_start>:
   1298c:	000000b5 	.word	0x000000b5
