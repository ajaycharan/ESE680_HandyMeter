
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001284  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000098  00001284  00001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  0000131c  0000131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     0000000c  20000000  00001328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000098  2000000c  00001334  0002000c  2**2
                  ALLOC
  5 .stack        00002004  200000a4  000013cc  0002000c  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018129  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002790  00000000  00000000  000381b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002852  00000000  00000000  0003a948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000340  00000000  00000000  0003d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0003d4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003a8b  00000000  00000000  0003d842  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000053f6  00000000  00000000  000412cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007e0  00000000  00000000  000466c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 20 00 20 dd 0e 00 00 d9 0e 00 00 d9 0e 00 00     . . ............
	...
      2c:	d9 0e 00 00 00 00 00 00 00 00 00 00 d9 0e 00 00     ................
      3c:	d9 0e 00 00 d9 0e 00 00 d9 0e 00 00 d9 0e 00 00     ................
      4c:	d9 0e 00 00 25 02 00 00 d9 0e 00 00 d9 0e 00 00     ....%...........
      5c:	d9 0e 00 00 d9 0e 00 00 ad 01 00 00 c1 01 00 00     ................
      6c:	d5 01 00 00 e9 01 00 00 fd 01 00 00 11 02 00 00     ................
      7c:	d9 0e 00 00 d9 0e 00 00 d9 0e 00 00 d9 0e 00 00     ................
      8c:	d9 0e 00 00 d9 0e 00 00 00 00 00 00 00 00 00 00     ................
      9c:	d9 0e 00 00 d9 0e 00 00 d9 0e 00 00 d9 0e 00 00     ................
      ac:	d9 0e 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001284 	.word	0x00001284

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001284 	.word	0x00001284
     10c:	00001284 	.word	0x00001284
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4a04      	ldr	r2, [pc, #16]	; (128 <_extint_enable+0x14>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	2102      	movs	r1, #2
     11a:	430b      	orrs	r3, r1
     11c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	7853      	ldrb	r3, [r2, #1]
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     126:	4770      	bx	lr
     128:	40001800 	.word	0x40001800

0000012c <_system_extint_init>:
{
     12c:	b510      	push	{r4, lr}
     12e:	b084      	sub	sp, #16
     130:	4c16      	ldr	r4, [pc, #88]	; (18c <_system_extint_init+0x60>)
     132:	447c      	add	r4, pc
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     134:	4a16      	ldr	r2, [pc, #88]	; (190 <_system_extint_init+0x64>)
     136:	6993      	ldr	r3, [r2, #24]
     138:	2140      	movs	r1, #64	; 0x40
     13a:	430b      	orrs	r3, r1
     13c:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     13e:	2302      	movs	r3, #2
     140:	a903      	add	r1, sp, #12
     142:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     144:	2005      	movs	r0, #5
     146:	4b13      	ldr	r3, [pc, #76]	; (194 <_system_extint_init+0x68>)
     148:	58e3      	ldr	r3, [r4, r3]
     14a:	9301      	str	r3, [sp, #4]
     14c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     14e:	2005      	movs	r0, #5
     150:	4b11      	ldr	r3, [pc, #68]	; (198 <_system_extint_init+0x6c>)
     152:	58e3      	ldr	r3, [r4, r3]
     154:	9301      	str	r3, [sp, #4]
     156:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     158:	4a10      	ldr	r2, [pc, #64]	; (19c <_system_extint_init+0x70>)
     15a:	7813      	ldrb	r3, [r2, #0]
     15c:	2101      	movs	r1, #1
     15e:	430b      	orrs	r3, r1
     160:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     162:	7853      	ldrb	r3, [r2, #1]
     164:	b25b      	sxtb	r3, r3
     166:	2b00      	cmp	r3, #0
     168:	dbfb      	blt.n	162 <_system_extint_init+0x36>
     16a:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <_system_extint_init+0x74>)
     16c:	58e3      	ldr	r3, [r4, r3]
     16e:	0019      	movs	r1, r3
     170:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     172:	2200      	movs	r2, #0
     174:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     176:	4299      	cmp	r1, r3
     178:	d1fc      	bne.n	174 <_system_extint_init+0x48>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17a:	2210      	movs	r2, #16
     17c:	4b09      	ldr	r3, [pc, #36]	; (1a4 <_system_extint_init+0x78>)
     17e:	601a      	str	r2, [r3, #0]
	_extint_enable();
     180:	4b09      	ldr	r3, [pc, #36]	; (1a8 <_system_extint_init+0x7c>)
     182:	447b      	add	r3, pc
     184:	4798      	blx	r3
}
     186:	b004      	add	sp, #16
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	0000114e 	.word	0x0000114e
     190:	40000400 	.word	0x40000400
     194:	0000001c 	.word	0x0000001c
     198:	00000068 	.word	0x00000068
     19c:	40001800 	.word	0x40001800
     1a0:	00000044 	.word	0x00000044
     1a4:	e000e100 	.word	0xe000e100
     1a8:	ffffff8f 	.word	0xffffff8f

000001ac <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     1ac:	b510      	push	{r4, lr}
     1ae:	4b03      	ldr	r3, [pc, #12]	; (1bc <SERCOM0_Handler+0x10>)
     1b0:	447b      	add	r3, pc
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	2000      	movs	r0, #0
     1b6:	4798      	blx	r3
     1b8:	bd10      	pop	{r4, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	1ffffe74 	.word	0x1ffffe74

000001c0 <SERCOM1_Handler>:
     1c0:	b510      	push	{r4, lr}
     1c2:	4b03      	ldr	r3, [pc, #12]	; (1d0 <SERCOM1_Handler+0x10>)
     1c4:	447b      	add	r3, pc
     1c6:	685b      	ldr	r3, [r3, #4]
     1c8:	2001      	movs	r0, #1
     1ca:	4798      	blx	r3
     1cc:	bd10      	pop	{r4, pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	1ffffe60 	.word	0x1ffffe60

000001d4 <SERCOM2_Handler>:
     1d4:	b510      	push	{r4, lr}
     1d6:	4b03      	ldr	r3, [pc, #12]	; (1e4 <SERCOM2_Handler+0x10>)
     1d8:	447b      	add	r3, pc
     1da:	689b      	ldr	r3, [r3, #8]
     1dc:	2002      	movs	r0, #2
     1de:	4798      	blx	r3
     1e0:	bd10      	pop	{r4, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	1ffffe4c 	.word	0x1ffffe4c

000001e8 <SERCOM3_Handler>:
     1e8:	b510      	push	{r4, lr}
     1ea:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SERCOM3_Handler+0x10>)
     1ec:	447b      	add	r3, pc
     1ee:	68db      	ldr	r3, [r3, #12]
     1f0:	2003      	movs	r0, #3
     1f2:	4798      	blx	r3
     1f4:	bd10      	pop	{r4, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	1ffffe38 	.word	0x1ffffe38

000001fc <SERCOM4_Handler>:
     1fc:	b510      	push	{r4, lr}
     1fe:	4b03      	ldr	r3, [pc, #12]	; (20c <SERCOM4_Handler+0x10>)
     200:	447b      	add	r3, pc
     202:	691b      	ldr	r3, [r3, #16]
     204:	2004      	movs	r0, #4
     206:	4798      	blx	r3
     208:	bd10      	pop	{r4, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	1ffffe24 	.word	0x1ffffe24

00000210 <SERCOM5_Handler>:
     210:	b510      	push	{r4, lr}
     212:	4b03      	ldr	r3, [pc, #12]	; (220 <SERCOM5_Handler+0x10>)
     214:	447b      	add	r3, pc
     216:	695b      	ldr	r3, [r3, #20]
     218:	2005      	movs	r0, #5
     21a:	4798      	blx	r3
     21c:	bd10      	pop	{r4, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	1ffffe10 	.word	0x1ffffe10

00000224 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	4d16      	ldr	r5, [pc, #88]	; (284 <EIC_Handler+0x60>)
     22a:	447d      	add	r5, pc
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     22c:	4b16      	ldr	r3, [pc, #88]	; (288 <EIC_Handler+0x64>)
     22e:	58eb      	ldr	r3, [r5, r3]
     230:	9301      	str	r3, [sp, #4]
     232:	2300      	movs	r3, #0
     234:	9a01      	ldr	r2, [sp, #4]
     236:	7013      	strb	r3, [r2, #0]

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     238:	4a14      	ldr	r2, [pc, #80]	; (28c <EIC_Handler+0x68>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     23a:	271f      	movs	r7, #31
     23c:	2601      	movs	r6, #1
		return NULL;
     23e:	2400      	movs	r4, #0
     240:	e00c      	b.n	25c <EIC_Handler+0x38>
		return eics[eic_index];
     242:	4a12      	ldr	r2, [pc, #72]	; (28c <EIC_Handler+0x68>)
     244:	e00a      	b.n	25c <EIC_Handler+0x38>
     246:	4b10      	ldr	r3, [pc, #64]	; (288 <EIC_Handler+0x64>)
     248:	58ea      	ldr	r2, [r5, r3]
     24a:	7813      	ldrb	r3, [r2, #0]
     24c:	3301      	adds	r3, #1
     24e:	b2db      	uxtb	r3, r3
     250:	7013      	strb	r3, [r2, #0]
     252:	2b0f      	cmp	r3, #15
     254:	d814      	bhi.n	280 <EIC_Handler+0x5c>
		return NULL;
     256:	0022      	movs	r2, r4
	if (eic_index < EIC_INST_NUM) {
     258:	2b1f      	cmp	r3, #31
     25a:	d9f2      	bls.n	242 <EIC_Handler+0x1e>
	uint32_t eic_mask   = (1UL << (channel % 32));
     25c:	0039      	movs	r1, r7
     25e:	4019      	ands	r1, r3
     260:	0030      	movs	r0, r6
     262:	4088      	lsls	r0, r1
     264:	0001      	movs	r1, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     266:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
     268:	4208      	tst	r0, r1
     26a:	d0ec      	beq.n	246 <EIC_Handler+0x22>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     26c:	6111      	str	r1, [r2, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     26e:	4a08      	ldr	r2, [pc, #32]	; (290 <EIC_Handler+0x6c>)
     270:	58aa      	ldr	r2, [r5, r2]
     272:	9201      	str	r2, [sp, #4]
     274:	009b      	lsls	r3, r3, #2
     276:	589b      	ldr	r3, [r3, r2]
     278:	2b00      	cmp	r3, #0
     27a:	d0e4      	beq.n	246 <EIC_Handler+0x22>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     27c:	4798      	blx	r3
     27e:	e7e2      	b.n	246 <EIC_Handler+0x22>
			}
		}
	}
}
     280:	b003      	add	sp, #12
     282:	bdf0      	pop	{r4, r5, r6, r7, pc}
     284:	00001056 	.word	0x00001056
     288:	00000054 	.word	0x00000054
     28c:	40001800 	.word	0x40001800
     290:	00000044 	.word	0x00000044

00000294 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     294:	b530      	push	{r4, r5, lr}
     296:	b083      	sub	sp, #12
     298:	4c0d      	ldr	r4, [pc, #52]	; (2d0 <delay_init+0x3c>)
     29a:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
     29c:	2000      	movs	r0, #0
     29e:	4b0d      	ldr	r3, [pc, #52]	; (2d4 <delay_init+0x40>)
     2a0:	58e3      	ldr	r3, [r4, r3]
     2a2:	9301      	str	r3, [sp, #4]
     2a4:	4798      	blx	r3
     2a6:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     2a8:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <delay_init+0x44>)
     2aa:	58e4      	ldr	r4, [r4, r3]
     2ac:	21fa      	movs	r1, #250	; 0xfa
     2ae:	0089      	lsls	r1, r1, #2
     2b0:	47a0      	blx	r4
     2b2:	4b0a      	ldr	r3, [pc, #40]	; (2dc <delay_init+0x48>)
     2b4:	447b      	add	r3, pc
     2b6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     2b8:	4909      	ldr	r1, [pc, #36]	; (2e0 <delay_init+0x4c>)
     2ba:	0028      	movs	r0, r5
     2bc:	47a0      	blx	r4
     2be:	4b09      	ldr	r3, [pc, #36]	; (2e4 <delay_init+0x50>)
     2c0:	447b      	add	r3, pc
     2c2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     2c4:	2205      	movs	r2, #5
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <delay_init+0x54>)
     2c8:	601a      	str	r2, [r3, #0]
}
     2ca:	b003      	add	sp, #12
     2cc:	bd30      	pop	{r4, r5, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	00000fe6 	.word	0x00000fe6
     2d4:	00000028 	.word	0x00000028
     2d8:	0000005c 	.word	0x0000005c
     2dc:	1ffffd48 	.word	0x1ffffd48
     2e0:	000f4240 	.word	0x000f4240
     2e4:	1ffffd40 	.word	0x1ffffd40
     2e8:	e000e010 	.word	0xe000e010

000002ec <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     2ec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     2ee:	4b09      	ldr	r3, [pc, #36]	; (314 <delay_cycles_ms+0x28>)
     2f0:	447b      	add	r3, pc
     2f2:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     2f4:	4a08      	ldr	r2, [pc, #32]	; (318 <delay_cycles_ms+0x2c>)
		SysTick->VAL = 0;
     2f6:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2f8:	2180      	movs	r1, #128	; 0x80
     2fa:	0249      	lsls	r1, r1, #9
	while (n--) {
     2fc:	3801      	subs	r0, #1
     2fe:	d307      	bcc.n	310 <delay_cycles_ms+0x24>
	if (n > 0) {
     300:	2c00      	cmp	r4, #0
     302:	d0fb      	beq.n	2fc <delay_cycles_ms+0x10>
		SysTick->LOAD = n;
     304:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     306:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     308:	6813      	ldr	r3, [r2, #0]
     30a:	420b      	tst	r3, r1
     30c:	d0fc      	beq.n	308 <delay_cycles_ms+0x1c>
     30e:	e7f5      	b.n	2fc <delay_cycles_ms+0x10>
	}
}
     310:	bd30      	pop	{r4, r5, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	1ffffd0c 	.word	0x1ffffd0c
     318:	e000e010 	.word	0xe000e010

0000031c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     31c:	b510      	push	{r4, lr}
     31e:	b084      	sub	sp, #16
     320:	4a08      	ldr	r2, [pc, #32]	; (344 <port_pin_set_config+0x28>)
     322:	447a      	add	r2, pc
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     324:	2480      	movs	r4, #128	; 0x80
     326:	ab03      	add	r3, sp, #12
     328:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     32a:	780c      	ldrb	r4, [r1, #0]
     32c:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     32e:	784c      	ldrb	r4, [r1, #1]
     330:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     332:	7889      	ldrb	r1, [r1, #2]
     334:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     336:	0019      	movs	r1, r3
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <port_pin_set_config+0x2c>)
     33a:	58d3      	ldr	r3, [r2, r3]
     33c:	9301      	str	r3, [sp, #4]
     33e:	4798      	blx	r3
}
     340:	b004      	add	sp, #16
     342:	bd10      	pop	{r4, pc}
     344:	00000f5e 	.word	0x00000f5e
     348:	00000090 	.word	0x00000090

0000034c <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_config(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
     34c:	b5f0      	push	{r4, r5, r6, r7, lr}
     34e:	46ce      	mov	lr, r9
     350:	4647      	mov	r7, r8
     352:	b580      	push	{r7, lr}
     354:	b085      	sub	sp, #20
     356:	4b54      	ldr	r3, [pc, #336]	; (4a8 <system_board_init+0x15c>)
     358:	447b      	add	r3, pc
     35a:	4699      	mov	r9, r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     35c:	2600      	movs	r6, #0
     35e:	ac03      	add	r4, sp, #12
     360:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     362:	2701      	movs	r7, #1
     364:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
     366:	70a6      	strb	r6, [r4, #2]

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
     368:	0021      	movs	r1, r4
     36a:	2013      	movs	r0, #19
     36c:	4b4f      	ldr	r3, [pc, #316]	; (4ac <system_board_init+0x160>)
     36e:	464a      	mov	r2, r9
     370:	58d5      	ldr	r5, [r2, r3]
     372:	47a8      	blx	r5
     374:	0021      	movs	r1, r4
     376:	2010      	movs	r0, #16
     378:	47a8      	blx	r5
     37a:	0021      	movs	r1, r4
     37c:	2011      	movs	r0, #17
     37e:	47a8      	blx	r5
     380:	0021      	movs	r1, r4
     382:	2012      	movs	r0, #18
     384:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
     386:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
     388:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
     38a:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
     38c:	0021      	movs	r1, r4
     38e:	2014      	movs	r0, #20
     390:	47a8      	blx	r5
     392:	0021      	movs	r1, r4
     394:	2015      	movs	r0, #21
     396:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
     398:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
     39a:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
     39c:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
     39e:	0021      	movs	r1, r4
     3a0:	2018      	movs	r0, #24
     3a2:	47a8      	blx	r5
     3a4:	0021      	movs	r1, r4
     3a6:	2019      	movs	r0, #25
     3a8:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
     3aa:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
     3ac:	2302      	movs	r3, #2
     3ae:	4698      	mov	r8, r3
     3b0:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
     3b2:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
     3b4:	0021      	movs	r1, r4
     3b6:	2036      	movs	r0, #54	; 0x36
     3b8:	47a8      	blx	r5
     3ba:	0021      	movs	r1, r4
     3bc:	2022      	movs	r0, #34	; 0x22
     3be:	47a8      	blx	r5
     3c0:	0021      	movs	r1, r4
     3c2:	2037      	movs	r0, #55	; 0x37
     3c4:	47a8      	blx	r5
     3c6:	0021      	movs	r1, r4
     3c8:	2023      	movs	r0, #35	; 0x23
     3ca:	47a8      	blx	r5
     3cc:	0021      	movs	r1, r4
     3ce:	202a      	movs	r0, #42	; 0x2a
     3d0:	47a8      	blx	r5

	// Buttons, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
     3d2:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
     3d4:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
     3d6:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
     3d8:	0021      	movs	r1, r4
     3da:	2003      	movs	r0, #3
     3dc:	47a8      	blx	r5
     3de:	0021      	movs	r1, r4
     3e0:	201f      	movs	r0, #31
     3e2:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
     3e4:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
     3e6:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
     3e8:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
     3ea:	0021      	movs	r1, r4
     3ec:	2002      	movs	r0, #2
     3ee:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
     3f0:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
     3f2:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
     3f4:	70a7      	strb	r7, [r4, #2]
	CFG(LED_PWM_OUT_PIN);
     3f6:	0021      	movs	r1, r4
     3f8:	202b      	movs	r0, #43	; 0x2b
     3fa:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
     3fc:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
     3fe:	4643      	mov	r3, r8
     400:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
     402:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
     404:	0021      	movs	r1, r4
     406:	2004      	movs	r0, #4
     408:	47a8      	blx	r5
     40a:	0021      	movs	r1, r4
     40c:	2005      	movs	r0, #5
     40e:	47a8      	blx	r5
     410:	0021      	movs	r1, r4
     412:	2006      	movs	r0, #6
     414:	47a8      	blx	r5
     416:	0021      	movs	r1, r4
     418:	2007      	movs	r0, #7
     41a:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
     41c:	0021      	movs	r1, r4
     41e:	2008      	movs	r0, #8
     420:	47a8      	blx	r5
     422:	0021      	movs	r1, r4
     424:	2009      	movs	r0, #9
     426:	47a8      	blx	r5
     428:	0021      	movs	r1, r4
     42a:	200a      	movs	r0, #10
     42c:	47a8      	blx	r5
     42e:	0021      	movs	r1, r4
     430:	200b      	movs	r0, #11
     432:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
     434:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
     436:	4643      	mov	r3, r8
     438:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
     43a:	70a7      	strb	r7, [r4, #2]
	CFG(ACCYEN_GP_OUT_PIN);
     43c:	0021      	movs	r1, r4
     43e:	2017      	movs	r0, #23
     440:	47a8      	blx	r5

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
     442:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
     444:	4643      	mov	r3, r8
     446:	7063      	strb	r3, [r4, #1]
	config.powersave	= 1;
     448:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
     44a:	0021      	movs	r1, r4
     44c:	200e      	movs	r0, #14
     44e:	47a8      	blx	r5
     450:	0021      	movs	r1, r4
     452:	200f      	movs	r0, #15
     454:	47a8      	blx	r5
     456:	0021      	movs	r1, r4
     458:	200c      	movs	r0, #12
     45a:	47a8      	blx	r5
     45c:	0021      	movs	r1, r4
     45e:	200d      	movs	r0, #13
     460:	47a8      	blx	r5
     462:	0021      	movs	r1, r4
     464:	2029      	movs	r0, #41	; 0x29
     466:	47a8      	blx	r5
     468:	0021      	movs	r1, r4
     46a:	2016      	movs	r0, #22
     46c:	47a8      	blx	r5
     46e:	0021      	movs	r1, r4
     470:	2028      	movs	r0, #40	; 0x28
     472:	47a8      	blx	r5
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
     474:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
     476:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
     478:	70a6      	strb	r6, [r4, #2]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
     47a:	2100      	movs	r1, #0
     47c:	201b      	movs	r0, #27
     47e:	47a8      	blx	r5
     480:	2100      	movs	r1, #0
     482:	201c      	movs	r0, #28
     484:	47a8      	blx	r5
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
     486:	0021      	movs	r1, r4
     488:	201b      	movs	r0, #27
     48a:	47a8      	blx	r5
     48c:	0021      	movs	r1, r4
     48e:	201c      	movs	r0, #28
     490:	47a8      	blx	r5
	
	// Other initialization
	delay_init();
     492:	4b07      	ldr	r3, [pc, #28]	; (4b0 <system_board_init+0x164>)
     494:	464a      	mov	r2, r9
     496:	58d3      	ldr	r3, [r2, r3]
     498:	9301      	str	r3, [sp, #4]
     49a:	4798      	blx	r3
     49c:	b005      	add	sp, #20
     49e:	bc0c      	pop	{r2, r3}
     4a0:	4690      	mov	r8, r2
     4a2:	4699      	mov	r9, r3
     4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00000f28 	.word	0x00000f28
     4ac:	0000006c 	.word	0x0000006c
     4b0:	00000040 	.word	0x00000040

000004b4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     4b4:	b082      	sub	sp, #8
     4b6:	4b12      	ldr	r3, [pc, #72]	; (500 <cpu_irq_enter_critical+0x4c>)
     4b8:	447b      	add	r3, pc
	if (cpu_irq_critical_section_counter == 0) {
     4ba:	4a12      	ldr	r2, [pc, #72]	; (504 <cpu_irq_enter_critical+0x50>)
     4bc:	447a      	add	r2, pc
     4be:	6812      	ldr	r2, [r2, #0]
     4c0:	2a00      	cmp	r2, #0
     4c2:	d107      	bne.n	4d4 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     4c4:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
     4c8:	2a00      	cmp	r2, #0
     4ca:	d00a      	beq.n	4e2 <cpu_irq_enter_critical+0x2e>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     4cc:	2200      	movs	r2, #0
     4ce:	4b0e      	ldr	r3, [pc, #56]	; (508 <cpu_irq_enter_critical+0x54>)
     4d0:	447b      	add	r3, pc
     4d2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     4d4:	4a0d      	ldr	r2, [pc, #52]	; (50c <cpu_irq_enter_critical+0x58>)
     4d6:	447a      	add	r2, pc
     4d8:	6813      	ldr	r3, [r2, #0]
     4da:	3301      	adds	r3, #1
     4dc:	6013      	str	r3, [r2, #0]
}
     4de:	b002      	add	sp, #8
     4e0:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     4e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     4e4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     4e8:	4a09      	ldr	r2, [pc, #36]	; (510 <cpu_irq_enter_critical+0x5c>)
     4ea:	589b      	ldr	r3, [r3, r2]
     4ec:	9301      	str	r3, [sp, #4]
     4ee:	2300      	movs	r3, #0
     4f0:	9a01      	ldr	r2, [sp, #4]
     4f2:	7013      	strb	r3, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
     4f4:	2201      	movs	r2, #1
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <cpu_irq_enter_critical+0x60>)
     4f8:	447b      	add	r3, pc
     4fa:	701a      	strb	r2, [r3, #0]
     4fc:	e7ea      	b.n	4d4 <cpu_irq_enter_critical+0x20>
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00000dc8 	.word	0x00000dc8
     504:	1ffffb80 	.word	0x1ffffb80
     508:	1ffffb70 	.word	0x1ffffb70
     50c:	1ffffb66 	.word	0x1ffffb66
     510:	0000002c 	.word	0x0000002c
     514:	1ffffb48 	.word	0x1ffffb48

00000518 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     518:	b082      	sub	sp, #8
     51a:	490d      	ldr	r1, [pc, #52]	; (550 <cpu_irq_leave_critical+0x38>)
     51c:	4479      	add	r1, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     51e:	4b0d      	ldr	r3, [pc, #52]	; (554 <cpu_irq_leave_critical+0x3c>)
     520:	447b      	add	r3, pc
     522:	681a      	ldr	r2, [r3, #0]
     524:	3a01      	subs	r2, #1
     526:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     528:	681b      	ldr	r3, [r3, #0]
     52a:	2b00      	cmp	r3, #0
     52c:	d10d      	bne.n	54a <cpu_irq_leave_critical+0x32>
     52e:	4b0a      	ldr	r3, [pc, #40]	; (558 <cpu_irq_leave_critical+0x40>)
     530:	447b      	add	r3, pc
     532:	781b      	ldrb	r3, [r3, #0]
     534:	2b00      	cmp	r3, #0
     536:	d008      	beq.n	54a <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
     538:	4b08      	ldr	r3, [pc, #32]	; (55c <cpu_irq_leave_critical+0x44>)
     53a:	58cb      	ldr	r3, [r1, r3]
     53c:	9301      	str	r3, [sp, #4]
     53e:	2301      	movs	r3, #1
     540:	9a01      	ldr	r2, [sp, #4]
     542:	7013      	strb	r3, [r2, #0]
     544:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     548:	b662      	cpsie	i
	}
}
     54a:	b002      	add	sp, #8
     54c:	4770      	bx	lr
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00000d64 	.word	0x00000d64
     554:	1ffffb1c 	.word	0x1ffffb1c
     558:	1ffffb10 	.word	0x1ffffb10
     55c:	0000002c 	.word	0x0000002c

00000560 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     560:	b500      	push	{lr}
     562:	b083      	sub	sp, #12
     564:	4b23      	ldr	r3, [pc, #140]	; (5f4 <system_clock_source_get_hz+0x94>)
     566:	447b      	add	r3, pc
	switch (clock_source) {
     568:	2808      	cmp	r0, #8
     56a:	d806      	bhi.n	57a <system_clock_source_get_hz+0x1a>
     56c:	f000 fdc0 	bl	10f0 <__gnu_thumb1_case_uqi>
     570:	3e050507 	.word	0x3e050507
     574:	160b123e 	.word	0x160b123e
     578:	34          	.byte	0x34
     579:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     57a:	2000      	movs	r0, #0
     57c:	e038      	b.n	5f0 <system_clock_source_get_hz+0x90>
		return _system_clock_inst.xosc.frequency;
     57e:	4b1e      	ldr	r3, [pc, #120]	; (5f8 <system_clock_source_get_hz+0x98>)
     580:	447b      	add	r3, pc
     582:	6918      	ldr	r0, [r3, #16]
     584:	e034      	b.n	5f0 <system_clock_source_get_hz+0x90>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     586:	4b1d      	ldr	r3, [pc, #116]	; (5fc <system_clock_source_get_hz+0x9c>)
     588:	6a1b      	ldr	r3, [r3, #32]
     58a:	059b      	lsls	r3, r3, #22
     58c:	0f9b      	lsrs	r3, r3, #30
     58e:	481c      	ldr	r0, [pc, #112]	; (600 <system_clock_source_get_hz+0xa0>)
     590:	40d8      	lsrs	r0, r3
     592:	e02d      	b.n	5f0 <system_clock_source_get_hz+0x90>
		return _system_clock_inst.xosc32k.frequency;
     594:	4b1b      	ldr	r3, [pc, #108]	; (604 <system_clock_source_get_hz+0xa4>)
     596:	447b      	add	r3, pc
     598:	6958      	ldr	r0, [r3, #20]
     59a:	e029      	b.n	5f0 <system_clock_source_get_hz+0x90>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     59c:	4a1a      	ldr	r2, [pc, #104]	; (608 <system_clock_source_get_hz+0xa8>)
     59e:	447a      	add	r2, pc
     5a0:	6812      	ldr	r2, [r2, #0]
			return 0;
     5a2:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     5a4:	0792      	lsls	r2, r2, #30
     5a6:	d523      	bpl.n	5f0 <system_clock_source_get_hz+0x90>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     5a8:	4814      	ldr	r0, [pc, #80]	; (5fc <system_clock_source_get_hz+0x9c>)
     5aa:	2110      	movs	r1, #16
     5ac:	68c2      	ldr	r2, [r0, #12]
     5ae:	4211      	tst	r1, r2
     5b0:	d0fc      	beq.n	5ac <system_clock_source_get_hz+0x4c>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     5b2:	4a16      	ldr	r2, [pc, #88]	; (60c <system_clock_source_get_hz+0xac>)
     5b4:	447a      	add	r2, pc
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	0752      	lsls	r2, r2, #29
     5ba:	d401      	bmi.n	5c0 <system_clock_source_get_hz+0x60>
		return 48000000UL;
     5bc:	4814      	ldr	r0, [pc, #80]	; (610 <system_clock_source_get_hz+0xb0>)
     5be:	e017      	b.n	5f0 <system_clock_source_get_hz+0x90>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     5c0:	2000      	movs	r0, #0
     5c2:	4a14      	ldr	r2, [pc, #80]	; (614 <system_clock_source_get_hz+0xb4>)
     5c4:	589b      	ldr	r3, [r3, r2]
     5c6:	9301      	str	r3, [sp, #4]
     5c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     5ca:	4b13      	ldr	r3, [pc, #76]	; (618 <system_clock_source_get_hz+0xb8>)
     5cc:	447b      	add	r3, pc
     5ce:	689b      	ldr	r3, [r3, #8]
     5d0:	041b      	lsls	r3, r3, #16
     5d2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     5d4:	4358      	muls	r0, r3
     5d6:	e00b      	b.n	5f0 <system_clock_source_get_hz+0x90>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     5d8:	2350      	movs	r3, #80	; 0x50
     5da:	4a08      	ldr	r2, [pc, #32]	; (5fc <system_clock_source_get_hz+0x9c>)
     5dc:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     5de:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     5e0:	075b      	lsls	r3, r3, #29
     5e2:	d505      	bpl.n	5f0 <system_clock_source_get_hz+0x90>
		return _system_clock_inst.dpll.frequency;
     5e4:	4b0d      	ldr	r3, [pc, #52]	; (61c <system_clock_source_get_hz+0xbc>)
     5e6:	447b      	add	r3, pc
     5e8:	68d8      	ldr	r0, [r3, #12]
     5ea:	e001      	b.n	5f0 <system_clock_source_get_hz+0x90>
		return 32768UL;
     5ec:	2080      	movs	r0, #128	; 0x80
     5ee:	0200      	lsls	r0, r0, #8
	}
}
     5f0:	b003      	add	sp, #12
     5f2:	bd00      	pop	{pc}
     5f4:	00000d1a 	.word	0x00000d1a
     5f8:	1ffffac4 	.word	0x1ffffac4
     5fc:	40000800 	.word	0x40000800
     600:	007a1200 	.word	0x007a1200
     604:	1ffffaae 	.word	0x1ffffaae
     608:	1ffffaa6 	.word	0x1ffffaa6
     60c:	1ffffa90 	.word	0x1ffffa90
     610:	02dc6c00 	.word	0x02dc6c00
     614:	00000048 	.word	0x00000048
     618:	1ffffa78 	.word	0x1ffffa78
     61c:	1ffffa5e 	.word	0x1ffffa5e

00000620 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     620:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     622:	490c      	ldr	r1, [pc, #48]	; (654 <system_clock_source_osc8m_set_config+0x34>)
     624:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     626:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     628:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     62a:	7840      	ldrb	r0, [r0, #1]
     62c:	2201      	movs	r2, #1
     62e:	4010      	ands	r0, r2
     630:	0180      	lsls	r0, r0, #6
     632:	2640      	movs	r6, #64	; 0x40
     634:	43b3      	bics	r3, r6
     636:	4303      	orrs	r3, r0
     638:	402a      	ands	r2, r5
     63a:	01d2      	lsls	r2, r2, #7
     63c:	2080      	movs	r0, #128	; 0x80
     63e:	4383      	bics	r3, r0
     640:	4313      	orrs	r3, r2
     642:	2203      	movs	r2, #3
     644:	4022      	ands	r2, r4
     646:	0212      	lsls	r2, r2, #8
     648:	4803      	ldr	r0, [pc, #12]	; (658 <system_clock_source_osc8m_set_config+0x38>)
     64a:	4003      	ands	r3, r0
     64c:	4313      	orrs	r3, r2
     64e:	620b      	str	r3, [r1, #32]
}
     650:	bd70      	pop	{r4, r5, r6, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	40000800 	.word	0x40000800
     658:	fffffcff 	.word	0xfffffcff

0000065c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     65c:	b5f0      	push	{r4, r5, r6, r7, lr}
     65e:	46de      	mov	lr, fp
     660:	4657      	mov	r7, sl
     662:	464e      	mov	r6, r9
     664:	4645      	mov	r5, r8
     666:	b5e0      	push	{r5, r6, r7, lr}
     668:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     66a:	4b27      	ldr	r3, [pc, #156]	; (708 <system_clock_source_xosc32k_set_config+0xac>)
     66c:	469b      	mov	fp, r3
     66e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     670:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     672:	7800      	ldrb	r0, [r0, #0]
     674:	4242      	negs	r2, r0
     676:	4142      	adcs	r2, r0
     678:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     67a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     67c:	78ca      	ldrb	r2, [r1, #3]
     67e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     680:	790a      	ldrb	r2, [r1, #4]
     682:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     684:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     686:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     688:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     68a:	688a      	ldr	r2, [r1, #8]
     68c:	491f      	ldr	r1, [pc, #124]	; (70c <system_clock_source_xosc32k_set_config+0xb0>)
     68e:	4479      	add	r1, pc
     690:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     692:	2101      	movs	r1, #1
     694:	464a      	mov	r2, r9
     696:	0092      	lsls	r2, r2, #2
     698:	4691      	mov	r9, r2
     69a:	2204      	movs	r2, #4
     69c:	4393      	bics	r3, r2
     69e:	464a      	mov	r2, r9
     6a0:	4313      	orrs	r3, r2
     6a2:	4642      	mov	r2, r8
     6a4:	400a      	ands	r2, r1
     6a6:	00d2      	lsls	r2, r2, #3
     6a8:	4690      	mov	r8, r2
     6aa:	2208      	movs	r2, #8
     6ac:	4393      	bics	r3, r2
     6ae:	4642      	mov	r2, r8
     6b0:	4313      	orrs	r3, r2
     6b2:	4662      	mov	r2, ip
     6b4:	400a      	ands	r2, r1
     6b6:	0112      	lsls	r2, r2, #4
     6b8:	4694      	mov	ip, r2
     6ba:	2210      	movs	r2, #16
     6bc:	4393      	bics	r3, r2
     6be:	4662      	mov	r2, ip
     6c0:	4313      	orrs	r3, r2
     6c2:	4008      	ands	r0, r1
     6c4:	0140      	lsls	r0, r0, #5
     6c6:	2220      	movs	r2, #32
     6c8:	4393      	bics	r3, r2
     6ca:	4303      	orrs	r3, r0
     6cc:	400f      	ands	r7, r1
     6ce:	01bf      	lsls	r7, r7, #6
     6d0:	2040      	movs	r0, #64	; 0x40
     6d2:	4383      	bics	r3, r0
     6d4:	433b      	orrs	r3, r7
     6d6:	400e      	ands	r6, r1
     6d8:	01f6      	lsls	r6, r6, #7
     6da:	3040      	adds	r0, #64	; 0x40
     6dc:	4383      	bics	r3, r0
     6de:	4333      	orrs	r3, r6
     6e0:	3879      	subs	r0, #121	; 0x79
     6e2:	4005      	ands	r5, r0
     6e4:	022d      	lsls	r5, r5, #8
     6e6:	480a      	ldr	r0, [pc, #40]	; (710 <system_clock_source_xosc32k_set_config+0xb4>)
     6e8:	4003      	ands	r3, r0
     6ea:	432b      	orrs	r3, r5
     6ec:	4021      	ands	r1, r4
     6ee:	0309      	lsls	r1, r1, #12
     6f0:	4808      	ldr	r0, [pc, #32]	; (714 <system_clock_source_xosc32k_set_config+0xb8>)
     6f2:	4003      	ands	r3, r0
     6f4:	430b      	orrs	r3, r1
     6f6:	465a      	mov	r2, fp
     6f8:	8293      	strh	r3, [r2, #20]
}
     6fa:	bc3c      	pop	{r2, r3, r4, r5}
     6fc:	4690      	mov	r8, r2
     6fe:	4699      	mov	r9, r3
     700:	46a2      	mov	sl, r4
     702:	46ab      	mov	fp, r5
     704:	bdf0      	pop	{r4, r5, r6, r7, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	40000800 	.word	0x40000800
     70c:	1ffff9b6 	.word	0x1ffff9b6
     710:	fffff8ff 	.word	0xfffff8ff
     714:	ffffefff 	.word	0xffffefff

00000718 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     718:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     71a:	7a03      	ldrb	r3, [r0, #8]
     71c:	069b      	lsls	r3, r3, #26
     71e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     720:	8942      	ldrh	r2, [r0, #10]
     722:	0592      	lsls	r2, r2, #22
     724:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     726:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     728:	491a      	ldr	r1, [pc, #104]	; (794 <system_clock_source_dfll_set_config+0x7c>)
     72a:	4479      	add	r1, pc
     72c:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     72e:	7983      	ldrb	r3, [r0, #6]
     730:	79c2      	ldrb	r2, [r0, #7]
     732:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     734:	8842      	ldrh	r2, [r0, #2]
     736:	8884      	ldrh	r4, [r0, #4]
     738:	4322      	orrs	r2, r4
     73a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     73c:	7842      	ldrb	r2, [r0, #1]
     73e:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     740:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     742:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     744:	7803      	ldrb	r3, [r0, #0]
     746:	2b04      	cmp	r3, #4
     748:	d012      	beq.n	770 <system_clock_source_dfll_set_config+0x58>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     74a:	2b20      	cmp	r3, #32
     74c:	d10f      	bne.n	76e <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     74e:	7b03      	ldrb	r3, [r0, #12]
     750:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     752:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     754:	4313      	orrs	r3, r2
     756:	89c2      	ldrh	r2, [r0, #14]
     758:	0412      	lsls	r2, r2, #16
     75a:	490f      	ldr	r1, [pc, #60]	; (798 <system_clock_source_dfll_set_config+0x80>)
     75c:	400a      	ands	r2, r1
     75e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     760:	4a0e      	ldr	r2, [pc, #56]	; (79c <system_clock_source_dfll_set_config+0x84>)
     762:	447a      	add	r2, pc
     764:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     766:	6811      	ldr	r1, [r2, #0]
     768:	4b0d      	ldr	r3, [pc, #52]	; (7a0 <system_clock_source_dfll_set_config+0x88>)
     76a:	430b      	orrs	r3, r1
     76c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     76e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     770:	7b03      	ldrb	r3, [r0, #12]
     772:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     774:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     776:	4313      	orrs	r3, r2
     778:	89c2      	ldrh	r2, [r0, #14]
     77a:	0412      	lsls	r2, r2, #16
     77c:	4906      	ldr	r1, [pc, #24]	; (798 <system_clock_source_dfll_set_config+0x80>)
     77e:	400a      	ands	r2, r1
     780:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     782:	4a08      	ldr	r2, [pc, #32]	; (7a4 <system_clock_source_dfll_set_config+0x8c>)
     784:	447a      	add	r2, pc
     786:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     788:	6813      	ldr	r3, [r2, #0]
     78a:	2104      	movs	r1, #4
     78c:	430b      	orrs	r3, r1
     78e:	6013      	str	r3, [r2, #0]
     790:	e7ed      	b.n	76e <system_clock_source_dfll_set_config+0x56>
     792:	46c0      	nop			; (mov r8, r8)
     794:	1ffff91a 	.word	0x1ffff91a
     798:	03ff0000 	.word	0x03ff0000
     79c:	1ffff8e2 	.word	0x1ffff8e2
     7a0:	00000424 	.word	0x00000424
     7a4:	1ffff8c0 	.word	0x1ffff8c0

000007a8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     7a8:	b500      	push	{lr}
	switch (clock_source) {
     7aa:	2808      	cmp	r0, #8
     7ac:	d806      	bhi.n	7bc <system_clock_source_enable+0x14>
     7ae:	f000 fc9f 	bl	10f0 <__gnu_thumb1_case_uqi>
     7b2:	0515      	.short	0x0515
     7b4:	1c0e4e05 	.word	0x1c0e4e05
     7b8:	2307      	.short	0x2307
     7ba:	46          	.byte	0x46
     7bb:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     7bc:	2017      	movs	r0, #23
     7be:	e047      	b.n	850 <system_clock_source_enable+0xa8>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     7c0:	4a24      	ldr	r2, [pc, #144]	; (854 <system_clock_source_enable+0xac>)
     7c2:	6a13      	ldr	r3, [r2, #32]
     7c4:	2102      	movs	r1, #2
     7c6:	430b      	orrs	r3, r1
     7c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     7ca:	2000      	movs	r0, #0
     7cc:	e040      	b.n	850 <system_clock_source_enable+0xa8>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     7ce:	4a21      	ldr	r2, [pc, #132]	; (854 <system_clock_source_enable+0xac>)
     7d0:	6993      	ldr	r3, [r2, #24]
     7d2:	2102      	movs	r1, #2
     7d4:	430b      	orrs	r3, r1
     7d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     7d8:	2000      	movs	r0, #0
		break;
     7da:	e039      	b.n	850 <system_clock_source_enable+0xa8>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     7dc:	4a1d      	ldr	r2, [pc, #116]	; (854 <system_clock_source_enable+0xac>)
     7de:	8a13      	ldrh	r3, [r2, #16]
     7e0:	2102      	movs	r1, #2
     7e2:	430b      	orrs	r3, r1
     7e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     7e6:	2000      	movs	r0, #0
		break;
     7e8:	e032      	b.n	850 <system_clock_source_enable+0xa8>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     7ea:	4a1a      	ldr	r2, [pc, #104]	; (854 <system_clock_source_enable+0xac>)
     7ec:	8a93      	ldrh	r3, [r2, #20]
     7ee:	2102      	movs	r1, #2
     7f0:	430b      	orrs	r3, r1
     7f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     7f4:	2000      	movs	r0, #0
		break;
     7f6:	e02b      	b.n	850 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     7f8:	4917      	ldr	r1, [pc, #92]	; (858 <system_clock_source_enable+0xb0>)
     7fa:	4479      	add	r1, pc
     7fc:	680b      	ldr	r3, [r1, #0]
     7fe:	2202      	movs	r2, #2
     800:	4313      	orrs	r3, r2
     802:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     804:	4b13      	ldr	r3, [pc, #76]	; (854 <system_clock_source_enable+0xac>)
     806:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     808:	0019      	movs	r1, r3
     80a:	320e      	adds	r2, #14
     80c:	68cb      	ldr	r3, [r1, #12]
     80e:	421a      	tst	r2, r3
     810:	d0fc      	beq.n	80c <system_clock_source_enable+0x64>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     812:	4a12      	ldr	r2, [pc, #72]	; (85c <system_clock_source_enable+0xb4>)
     814:	447a      	add	r2, pc
     816:	6891      	ldr	r1, [r2, #8]
     818:	4b0e      	ldr	r3, [pc, #56]	; (854 <system_clock_source_enable+0xac>)
     81a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     81c:	6852      	ldr	r2, [r2, #4]
     81e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     820:	2200      	movs	r2, #0
     822:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     824:	0019      	movs	r1, r3
     826:	3210      	adds	r2, #16
     828:	68cb      	ldr	r3, [r1, #12]
     82a:	421a      	tst	r2, r3
     82c:	d0fc      	beq.n	828 <system_clock_source_enable+0x80>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     82e:	4b0c      	ldr	r3, [pc, #48]	; (860 <system_clock_source_enable+0xb8>)
     830:	447b      	add	r3, pc
     832:	681b      	ldr	r3, [r3, #0]
     834:	b29b      	uxth	r3, r3
     836:	4a07      	ldr	r2, [pc, #28]	; (854 <system_clock_source_enable+0xac>)
     838:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     83a:	2000      	movs	r0, #0
     83c:	e008      	b.n	850 <system_clock_source_enable+0xa8>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     83e:	4905      	ldr	r1, [pc, #20]	; (854 <system_clock_source_enable+0xac>)
     840:	2244      	movs	r2, #68	; 0x44
     842:	5c8b      	ldrb	r3, [r1, r2]
     844:	2002      	movs	r0, #2
     846:	4303      	orrs	r3, r0
     848:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     84a:	2000      	movs	r0, #0
		break;
     84c:	e000      	b.n	850 <system_clock_source_enable+0xa8>
		return STATUS_OK;
     84e:	2000      	movs	r0, #0
}
     850:	bd00      	pop	{pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	40000800 	.word	0x40000800
     858:	1ffff84a 	.word	0x1ffff84a
     85c:	1ffff830 	.word	0x1ffff830
     860:	1ffff814 	.word	0x1ffff814

00000864 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
     864:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
     866:	2808      	cmp	r0, #8
     868:	d808      	bhi.n	87c <system_clock_source_is_ready+0x18>
     86a:	f000 fc41 	bl	10f0 <__gnu_thumb1_case_uqi>
     86e:	0719      	.short	0x0719
     870:	09052207 	.word	0x09052207
     874:	0b17      	.short	0x0b17
     876:	0d          	.byte	0x0d
     877:	00          	.byte	0x00
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
     878:	2304      	movs	r3, #4
     87a:	e012      	b.n	8a2 <system_clock_source_is_ready+0x3e>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
     87c:	2000      	movs	r0, #0
     87e:	e017      	b.n	8b0 <system_clock_source_is_ready+0x4c>
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
     880:	2302      	movs	r3, #2
		break;
     882:	e00e      	b.n	8a2 <system_clock_source_is_ready+0x3e>
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
     884:	23d0      	movs	r3, #208	; 0xd0
		break;
     886:	e00c      	b.n	8a2 <system_clock_source_is_ready+0x3e>
		return ((SYSCTRL->DPLLSTATUS.reg &
     888:	2350      	movs	r3, #80	; 0x50
     88a:	4a0b      	ldr	r2, [pc, #44]	; (8b8 <system_clock_source_is_ready+0x54>)
     88c:	5cd0      	ldrb	r0, [r2, r3]
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
     88e:	3b4d      	subs	r3, #77	; 0x4d
     890:	4018      	ands	r0, r3
     892:	3803      	subs	r0, #3
     894:	4243      	negs	r3, r0
     896:	4158      	adcs	r0, r3
     898:	b2c0      	uxtb	r0, r0
     89a:	e009      	b.n	8b0 <system_clock_source_is_ready+0x4c>
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
     89c:	2308      	movs	r3, #8
     89e:	e000      	b.n	8a2 <system_clock_source_is_ready+0x3e>
		mask = SYSCTRL_PCLKSR_XOSCRDY;
     8a0:	2301      	movs	r3, #1
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     8a2:	4a05      	ldr	r2, [pc, #20]	; (8b8 <system_clock_source_is_ready+0x54>)
     8a4:	68d0      	ldr	r0, [r2, #12]
     8a6:	4018      	ands	r0, r3
     8a8:	1ac0      	subs	r0, r0, r3
     8aa:	4243      	negs	r3, r0
     8ac:	4158      	adcs	r0, r3
     8ae:	b2c0      	uxtb	r0, r0
}
     8b0:	bd00      	pop	{pc}
		return true;
     8b2:	2001      	movs	r0, #1
     8b4:	e7fc      	b.n	8b0 <system_clock_source_is_ready+0x4c>
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	40000800 	.word	0x40000800

000008bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8be:	46c6      	mov	lr, r8
     8c0:	b500      	push	{lr}
     8c2:	b092      	sub	sp, #72	; 0x48
     8c4:	4f63      	ldr	r7, [pc, #396]	; (a54 <system_clock_init+0x198>)
     8c6:	447f      	add	r7, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     8c8:	22c2      	movs	r2, #194	; 0xc2
     8ca:	00d2      	lsls	r2, r2, #3
     8cc:	4b62      	ldr	r3, [pc, #392]	; (a58 <system_clock_init+0x19c>)
     8ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     8d0:	4a62      	ldr	r2, [pc, #392]	; (a5c <system_clock_init+0x1a0>)
     8d2:	6853      	ldr	r3, [r2, #4]
     8d4:	211e      	movs	r1, #30
     8d6:	438b      	bics	r3, r1
     8d8:	391c      	subs	r1, #28
     8da:	430b      	orrs	r3, r1
     8dc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
     8de:	2203      	movs	r2, #3
     8e0:	ab05      	add	r3, sp, #20
     8e2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     8e4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     8e6:	001e      	movs	r6, r3
     8e8:	4b5d      	ldr	r3, [pc, #372]	; (a60 <system_clock_init+0x1a4>)
     8ea:	58fd      	ldr	r5, [r7, r3]
     8ec:	b2e0      	uxtb	r0, r4
     8ee:	0031      	movs	r1, r6
     8f0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     8f2:	3401      	adds	r4, #1
     8f4:	2c25      	cmp	r4, #37	; 0x25
     8f6:	d1f9      	bne.n	8ec <system_clock_init+0x30>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     8f8:	2300      	movs	r3, #0
     8fa:	a80e      	add	r0, sp, #56	; 0x38
     8fc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
     8fe:	2280      	movs	r2, #128	; 0x80
     900:	0212      	lsls	r2, r2, #8
     902:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     904:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     906:	2201      	movs	r2, #1
     908:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
     90a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     90c:	2102      	movs	r1, #2
     90e:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
     910:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     912:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
     914:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     916:	4b53      	ldr	r3, [pc, #332]	; (a64 <system_clock_init+0x1a8>)
     918:	58fb      	ldr	r3, [r7, r3]
     91a:	9301      	str	r3, [sp, #4]
     91c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     91e:	2005      	movs	r0, #5
     920:	4b51      	ldr	r3, [pc, #324]	; (a68 <system_clock_init+0x1ac>)
     922:	58fb      	ldr	r3, [r7, r3]
     924:	9301      	str	r3, [sp, #4]
     926:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     928:	4b50      	ldr	r3, [pc, #320]	; (a6c <system_clock_init+0x1b0>)
     92a:	58fc      	ldr	r4, [r7, r3]
     92c:	2005      	movs	r0, #5
     92e:	47a0      	blx	r4
     930:	2800      	cmp	r0, #0
     932:	d0fb      	beq.n	92c <system_clock_init+0x70>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     934:	4a48      	ldr	r2, [pc, #288]	; (a58 <system_clock_init+0x19c>)
     936:	8a93      	ldrh	r3, [r2, #20]
     938:	2180      	movs	r1, #128	; 0x80
     93a:	430b      	orrs	r3, r1
     93c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     93e:	2100      	movs	r1, #0
     940:	2200      	movs	r2, #0
     942:	ab09      	add	r3, sp, #36	; 0x24
     944:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     946:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     948:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     94a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     94c:	313f      	adds	r1, #63	; 0x3f
     94e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     950:	393b      	subs	r1, #59	; 0x3b
     952:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     954:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     956:	4b46      	ldr	r3, [pc, #280]	; (a70 <system_clock_init+0x1b4>)
     958:	681b      	ldr	r3, [r3, #0]
     95a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     95c:	2b3f      	cmp	r3, #63	; 0x3f
     95e:	d100      	bne.n	962 <system_clock_init+0xa6>
     960:	e076      	b.n	a50 <system_clock_init+0x194>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     962:	a809      	add	r0, sp, #36	; 0x24
     964:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     966:	4b43      	ldr	r3, [pc, #268]	; (a74 <system_clock_init+0x1b8>)
     968:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     96a:	2307      	movs	r3, #7
     96c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     96e:	3338      	adds	r3, #56	; 0x38
     970:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     972:	4b41      	ldr	r3, [pc, #260]	; (a78 <system_clock_init+0x1bc>)
     974:	58fb      	ldr	r3, [r7, r3]
     976:	9301      	str	r3, [sp, #4]
     978:	4798      	blx	r3
	config->run_in_standby  = false;
     97a:	2600      	movs	r6, #0
     97c:	a808      	add	r0, sp, #32
     97e:	7046      	strb	r6, [r0, #1]
	config->on_demand       = true;
     980:	2501      	movs	r5, #1
     982:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     984:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     986:	4b3d      	ldr	r3, [pc, #244]	; (a7c <system_clock_init+0x1c0>)
     988:	58fb      	ldr	r3, [r7, r3]
     98a:	9301      	str	r3, [sp, #4]
     98c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     98e:	2006      	movs	r0, #6
     990:	4b35      	ldr	r3, [pc, #212]	; (a68 <system_clock_init+0x1ac>)
     992:	58fb      	ldr	r3, [r7, r3]
     994:	9301      	str	r3, [sp, #4]
     996:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     998:	4b39      	ldr	r3, [pc, #228]	; (a80 <system_clock_init+0x1c4>)
     99a:	58f9      	ldr	r1, [r7, r3]
     99c:	9102      	str	r1, [sp, #8]
     99e:	4788      	blx	r1
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     9a0:	ac05      	add	r4, sp, #20
     9a2:	9506      	str	r5, [sp, #24]
	config->high_when_disabled = false;
     9a4:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     9a6:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
     9a8:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     9aa:	2105      	movs	r1, #5
     9ac:	4688      	mov	r8, r1
     9ae:	7021      	strb	r1, [r4, #0]
     9b0:	0021      	movs	r1, r4
     9b2:	2001      	movs	r0, #1
     9b4:	4b33      	ldr	r3, [pc, #204]	; (a84 <system_clock_init+0x1c8>)
     9b6:	58fb      	ldr	r3, [r7, r3]
     9b8:	9302      	str	r3, [sp, #8]
     9ba:	469c      	mov	ip, r3
     9bc:	47e0      	blx	ip
     9be:	2001      	movs	r0, #1
     9c0:	4b31      	ldr	r3, [pc, #196]	; (a88 <system_clock_init+0x1cc>)
     9c2:	58f9      	ldr	r1, [r7, r3]
     9c4:	9103      	str	r1, [sp, #12]
     9c6:	4788      	blx	r1
	config->high_when_disabled = false;
     9c8:	7066      	strb	r6, [r4, #1]
	config->output_enable      = false;
     9ca:	7266      	strb	r6, [r4, #9]
     9cc:	4640      	mov	r0, r8
     9ce:	7020      	strb	r0, [r4, #0]
     9d0:	2320      	movs	r3, #32
     9d2:	6063      	str	r3, [r4, #4]
     9d4:	7225      	strb	r5, [r4, #8]
     9d6:	0021      	movs	r1, r4
     9d8:	2002      	movs	r0, #2
     9da:	9e02      	ldr	r6, [sp, #8]
     9dc:	47b0      	blx	r6
     9de:	2002      	movs	r0, #2
     9e0:	9903      	ldr	r1, [sp, #12]
     9e2:	4788      	blx	r1
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     9e4:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     9e6:	0021      	movs	r1, r4
     9e8:	2000      	movs	r0, #0
     9ea:	4b1d      	ldr	r3, [pc, #116]	; (a60 <system_clock_init+0x1a4>)
     9ec:	58fc      	ldr	r4, [r7, r3]
     9ee:	9402      	str	r4, [sp, #8]
     9f0:	47a0      	blx	r4
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     9f2:	2000      	movs	r0, #0
     9f4:	4b25      	ldr	r3, [pc, #148]	; (a8c <system_clock_init+0x1d0>)
     9f6:	58f9      	ldr	r1, [r7, r3]
     9f8:	9102      	str	r1, [sp, #8]
     9fa:	4788      	blx	r1
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     9fc:	2007      	movs	r0, #7
     9fe:	9a01      	ldr	r2, [sp, #4]
     a00:	4790      	blx	r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     a02:	4b1a      	ldr	r3, [pc, #104]	; (a6c <system_clock_init+0x1b0>)
     a04:	58fc      	ldr	r4, [r7, r3]
     a06:	2007      	movs	r0, #7
     a08:	47a0      	blx	r4
     a0a:	2800      	cmp	r0, #0
     a0c:	d0fb      	beq.n	a06 <system_clock_init+0x14a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
     a0e:	4a12      	ldr	r2, [pc, #72]	; (a58 <system_clock_init+0x19c>)
     a10:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     a12:	2180      	movs	r1, #128	; 0x80
     a14:	430b      	orrs	r3, r1
     a16:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
     a18:	4a1d      	ldr	r2, [pc, #116]	; (a90 <system_clock_init+0x1d4>)
     a1a:	2300      	movs	r3, #0
     a1c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     a1e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     a20:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     a22:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     a24:	2201      	movs	r2, #1
     a26:	a905      	add	r1, sp, #20
     a28:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     a2a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
     a2c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     a2e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     a30:	3307      	adds	r3, #7
     a32:	700b      	strb	r3, [r1, #0]
     a34:	2000      	movs	r0, #0
     a36:	4b13      	ldr	r3, [pc, #76]	; (a84 <system_clock_init+0x1c8>)
     a38:	58fb      	ldr	r3, [r7, r3]
     a3a:	9301      	str	r3, [sp, #4]
     a3c:	4798      	blx	r3
     a3e:	2000      	movs	r0, #0
     a40:	4b11      	ldr	r3, [pc, #68]	; (a88 <system_clock_init+0x1cc>)
     a42:	58fb      	ldr	r3, [r7, r3]
     a44:	9301      	str	r3, [sp, #4]
     a46:	4798      	blx	r3
#endif
}
     a48:	b012      	add	sp, #72	; 0x48
     a4a:	bc04      	pop	{r2}
     a4c:	4690      	mov	r8, r2
     a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     a50:	3b20      	subs	r3, #32
     a52:	e786      	b.n	962 <system_clock_init+0xa6>
     a54:	000009ba 	.word	0x000009ba
     a58:	40000800 	.word	0x40000800
     a5c:	41004000 	.word	0x41004000
     a60:	0000001c 	.word	0x0000001c
     a64:	00000064 	.word	0x00000064
     a68:	00000078 	.word	0x00000078
     a6c:	00000084 	.word	0x00000084
     a70:	00806024 	.word	0x00806024
     a74:	000005dc 	.word	0x000005dc
     a78:	0000000c 	.word	0x0000000c
     a7c:	00000038 	.word	0x00000038
     a80:	00000094 	.word	0x00000094
     a84:	00000030 	.word	0x00000030
     a88:	00000050 	.word	0x00000050
     a8c:	00000068 	.word	0x00000068
     a90:	40000400 	.word	0x40000400

00000a94 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     a94:	4a06      	ldr	r2, [pc, #24]	; (ab0 <system_gclk_init+0x1c>)
     a96:	6993      	ldr	r3, [r2, #24]
     a98:	2108      	movs	r1, #8
     a9a:	430b      	orrs	r3, r1
     a9c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     a9e:	2201      	movs	r2, #1
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <system_gclk_init+0x20>)
     aa2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     aa4:	0019      	movs	r1, r3
     aa6:	780b      	ldrb	r3, [r1, #0]
     aa8:	4213      	tst	r3, r2
     aaa:	d1fc      	bne.n	aa6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     aac:	4770      	bx	lr
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	40000400 	.word	0x40000400
     ab4:	40000c00 	.word	0x40000c00

00000ab8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aba:	b083      	sub	sp, #12
     abc:	0007      	movs	r7, r0
     abe:	4e2c      	ldr	r6, [pc, #176]	; (b70 <system_gclk_gen_set_config+0xb8>)
     ac0:	447e      	add	r6, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ac2:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ac4:	780d      	ldrb	r5, [r1, #0]
     ac6:	022d      	lsls	r5, r5, #8
     ac8:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     aca:	784b      	ldrb	r3, [r1, #1]
     acc:	2b00      	cmp	r3, #0
     ace:	d002      	beq.n	ad6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ad0:	2380      	movs	r3, #128	; 0x80
     ad2:	02db      	lsls	r3, r3, #11
     ad4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ad6:	7a4b      	ldrb	r3, [r1, #9]
     ad8:	2b00      	cmp	r3, #0
     ada:	d002      	beq.n	ae2 <system_gclk_gen_set_config+0x2a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     adc:	2380      	movs	r3, #128	; 0x80
     ade:	031b      	lsls	r3, r3, #12
     ae0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ae2:	6848      	ldr	r0, [r1, #4]
     ae4:	2801      	cmp	r0, #1
     ae6:	d910      	bls.n	b0a <system_gclk_gen_set_config+0x52>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ae8:	1e43      	subs	r3, r0, #1
     aea:	4218      	tst	r0, r3
     aec:	d139      	bne.n	b62 <system_gclk_gen_set_config+0xaa>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     aee:	2802      	cmp	r0, #2
     af0:	d935      	bls.n	b5e <system_gclk_gen_set_config+0xa6>
     af2:	2302      	movs	r3, #2
     af4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     af6:	3201      	adds	r2, #1
						mask <<= 1) {
     af8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     afa:	4298      	cmp	r0, r3
     afc:	d8fb      	bhi.n	af6 <system_gclk_gen_set_config+0x3e>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     afe:	0212      	lsls	r2, r2, #8
     b00:	433a      	orrs	r2, r7
     b02:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     b04:	2380      	movs	r3, #128	; 0x80
     b06:	035b      	lsls	r3, r3, #13
     b08:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     b0a:	7a0b      	ldrb	r3, [r1, #8]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d002      	beq.n	b16 <system_gclk_gen_set_config+0x5e>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     b10:	2380      	movs	r3, #128	; 0x80
     b12:	039b      	lsls	r3, r3, #14
     b14:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b16:	4a17      	ldr	r2, [pc, #92]	; (b74 <system_gclk_gen_set_config+0xbc>)
     b18:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     b1a:	b25b      	sxtb	r3, r3
     b1c:	2b00      	cmp	r3, #0
     b1e:	dbfb      	blt.n	b18 <system_gclk_gen_set_config+0x60>
	cpu_irq_enter_critical();
     b20:	4b15      	ldr	r3, [pc, #84]	; (b78 <system_gclk_gen_set_config+0xc0>)
     b22:	58f3      	ldr	r3, [r6, r3]
     b24:	9301      	str	r3, [sp, #4]
     b26:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     b28:	4b14      	ldr	r3, [pc, #80]	; (b7c <system_gclk_gen_set_config+0xc4>)
     b2a:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b2c:	4a11      	ldr	r2, [pc, #68]	; (b74 <system_gclk_gen_set_config+0xbc>)
     b2e:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     b30:	b25b      	sxtb	r3, r3
     b32:	2b00      	cmp	r3, #0
     b34:	dbfb      	blt.n	b2e <system_gclk_gen_set_config+0x76>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     b36:	4b0f      	ldr	r3, [pc, #60]	; (b74 <system_gclk_gen_set_config+0xbc>)
     b38:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b3a:	001a      	movs	r2, r3
     b3c:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     b3e:	b25b      	sxtb	r3, r3
     b40:	2b00      	cmp	r3, #0
     b42:	dbfb      	blt.n	b3c <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     b44:	4a0b      	ldr	r2, [pc, #44]	; (b74 <system_gclk_gen_set_config+0xbc>)
     b46:	6853      	ldr	r3, [r2, #4]
     b48:	2180      	movs	r1, #128	; 0x80
     b4a:	0249      	lsls	r1, r1, #9
     b4c:	400b      	ands	r3, r1
     b4e:	431d      	orrs	r5, r3
     b50:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     b52:	4b0b      	ldr	r3, [pc, #44]	; (b80 <system_gclk_gen_set_config+0xc8>)
     b54:	58f3      	ldr	r3, [r6, r3]
     b56:	9301      	str	r3, [sp, #4]
     b58:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     b5a:	b003      	add	sp, #12
     b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     b5e:	2200      	movs	r2, #0
     b60:	e7cd      	b.n	afe <system_gclk_gen_set_config+0x46>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     b62:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     b64:	433c      	orrs	r4, r7
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     b66:	2380      	movs	r3, #128	; 0x80
     b68:	029b      	lsls	r3, r3, #10
     b6a:	431d      	orrs	r5, r3
     b6c:	e7cd      	b.n	b0a <system_gclk_gen_set_config+0x52>
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	000007c0 	.word	0x000007c0
     b74:	40000c00 	.word	0x40000c00
     b78:	00000024 	.word	0x00000024
     b7c:	40000c08 	.word	0x40000c08
     b80:	00000000 	.word	0x00000000

00000b84 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     b84:	b530      	push	{r4, r5, lr}
     b86:	b083      	sub	sp, #12
     b88:	0005      	movs	r5, r0
     b8a:	4c0f      	ldr	r4, [pc, #60]	; (bc8 <system_gclk_gen_enable+0x44>)
     b8c:	447c      	add	r4, pc
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b8e:	4a0f      	ldr	r2, [pc, #60]	; (bcc <system_gclk_gen_enable+0x48>)
     b90:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     b92:	b25b      	sxtb	r3, r3
     b94:	2b00      	cmp	r3, #0
     b96:	dbfb      	blt.n	b90 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     b98:	4b0d      	ldr	r3, [pc, #52]	; (bd0 <system_gclk_gen_enable+0x4c>)
     b9a:	58e3      	ldr	r3, [r4, r3]
     b9c:	9301      	str	r3, [sp, #4]
     b9e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ba0:	4b0c      	ldr	r3, [pc, #48]	; (bd4 <system_gclk_gen_enable+0x50>)
     ba2:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ba4:	4a09      	ldr	r2, [pc, #36]	; (bcc <system_gclk_gen_enable+0x48>)
     ba6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ba8:	b25b      	sxtb	r3, r3
     baa:	2b00      	cmp	r3, #0
     bac:	dbfb      	blt.n	ba6 <system_gclk_gen_enable+0x22>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     bae:	4a07      	ldr	r2, [pc, #28]	; (bcc <system_gclk_gen_enable+0x48>)
     bb0:	6851      	ldr	r1, [r2, #4]
     bb2:	2380      	movs	r3, #128	; 0x80
     bb4:	025b      	lsls	r3, r3, #9
     bb6:	430b      	orrs	r3, r1
     bb8:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <system_gclk_gen_enable+0x54>)
     bbc:	58e3      	ldr	r3, [r4, r3]
     bbe:	9301      	str	r3, [sp, #4]
     bc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bc2:	b003      	add	sp, #12
     bc4:	bd30      	pop	{r4, r5, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	000006f4 	.word	0x000006f4
     bcc:	40000c00 	.word	0x40000c00
     bd0:	00000024 	.word	0x00000024
     bd4:	40000c04 	.word	0x40000c04
     bd8:	00000000 	.word	0x00000000

00000bdc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bde:	b083      	sub	sp, #12
     be0:	0006      	movs	r6, r0
     be2:	4c20      	ldr	r4, [pc, #128]	; (c64 <system_gclk_gen_get_hz+0x88>)
     be4:	447c      	add	r4, pc
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     be6:	4a20      	ldr	r2, [pc, #128]	; (c68 <system_gclk_gen_get_hz+0x8c>)
     be8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     bea:	b25b      	sxtb	r3, r3
     bec:	2b00      	cmp	r3, #0
     bee:	dbfb      	blt.n	be8 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     bf0:	4b1e      	ldr	r3, [pc, #120]	; (c6c <system_gclk_gen_get_hz+0x90>)
     bf2:	58e3      	ldr	r3, [r4, r3]
     bf4:	9301      	str	r3, [sp, #4]
     bf6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     bf8:	4b1d      	ldr	r3, [pc, #116]	; (c70 <system_gclk_gen_get_hz+0x94>)
     bfa:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bfc:	4a1a      	ldr	r2, [pc, #104]	; (c68 <system_gclk_gen_get_hz+0x8c>)
     bfe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c00:	b25b      	sxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	dbfb      	blt.n	bfe <system_gclk_gen_get_hz+0x22>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     c06:	4f18      	ldr	r7, [pc, #96]	; (c68 <system_gclk_gen_get_hz+0x8c>)
     c08:	6878      	ldr	r0, [r7, #4]
     c0a:	04c0      	lsls	r0, r0, #19
     c0c:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     c0e:	4b19      	ldr	r3, [pc, #100]	; (c74 <system_gclk_gen_get_hz+0x98>)
     c10:	58e3      	ldr	r3, [r4, r3]
     c12:	9301      	str	r3, [sp, #4]
     c14:	4798      	blx	r3
     c16:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c18:	4b15      	ldr	r3, [pc, #84]	; (c70 <system_gclk_gen_get_hz+0x94>)
     c1a:	701e      	strb	r6, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     c1c:	687f      	ldr	r7, [r7, #4]
     c1e:	02ff      	lsls	r7, r7, #11
     c20:	0fff      	lsrs	r7, r7, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     c22:	4b15      	ldr	r3, [pc, #84]	; (c78 <system_gclk_gen_get_hz+0x9c>)
     c24:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c26:	4a10      	ldr	r2, [pc, #64]	; (c68 <system_gclk_gen_get_hz+0x8c>)
     c28:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c2a:	b25b      	sxtb	r3, r3
     c2c:	2b00      	cmp	r3, #0
     c2e:	dbfb      	blt.n	c28 <system_gclk_gen_get_hz+0x4c>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     c30:	4b0d      	ldr	r3, [pc, #52]	; (c68 <system_gclk_gen_get_hz+0x8c>)
     c32:	689e      	ldr	r6, [r3, #8]
     c34:	0236      	lsls	r6, r6, #8
     c36:	0c36      	lsrs	r6, r6, #16
	cpu_irq_leave_critical();
     c38:	4b10      	ldr	r3, [pc, #64]	; (c7c <system_gclk_gen_get_hz+0xa0>)
     c3a:	58e3      	ldr	r3, [r4, r3]
     c3c:	9301      	str	r3, [sp, #4]
     c3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     c40:	2f00      	cmp	r7, #0
     c42:	d109      	bne.n	c58 <system_gclk_gen_get_hz+0x7c>
     c44:	2e01      	cmp	r6, #1
     c46:	d909      	bls.n	c5c <system_gclk_gen_get_hz+0x80>
		gen_input_hz /= divider;
     c48:	4b0d      	ldr	r3, [pc, #52]	; (c80 <system_gclk_gen_get_hz+0xa4>)
     c4a:	58e3      	ldr	r3, [r4, r3]
     c4c:	9301      	str	r3, [sp, #4]
     c4e:	0031      	movs	r1, r6
     c50:	0028      	movs	r0, r5
     c52:	4798      	blx	r3
     c54:	0005      	movs	r5, r0
     c56:	e001      	b.n	c5c <system_gclk_gen_get_hz+0x80>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     c58:	3601      	adds	r6, #1
     c5a:	40f5      	lsrs	r5, r6
	}

	return gen_input_hz;
}
     c5c:	0028      	movs	r0, r5
     c5e:	b003      	add	sp, #12
     c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	0000069c 	.word	0x0000069c
     c68:	40000c00 	.word	0x40000c00
     c6c:	00000024 	.word	0x00000024
     c70:	40000c04 	.word	0x40000c04
     c74:	0000007c 	.word	0x0000007c
     c78:	40000c08 	.word	0x40000c08
     c7c:	00000000 	.word	0x00000000
     c80:	0000005c 	.word	0x0000005c

00000c84 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     c84:	b530      	push	{r4, r5, lr}
     c86:	b083      	sub	sp, #12
     c88:	0005      	movs	r5, r0
     c8a:	4c0a      	ldr	r4, [pc, #40]	; (cb4 <system_gclk_chan_enable+0x30>)
     c8c:	447c      	add	r4, pc
	cpu_irq_enter_critical();
     c8e:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <system_gclk_chan_enable+0x34>)
     c90:	58e3      	ldr	r3, [r4, r3]
     c92:	9301      	str	r3, [sp, #4]
     c94:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     c96:	4b09      	ldr	r3, [pc, #36]	; (cbc <system_gclk_chan_enable+0x38>)
     c98:	701d      	strb	r5, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     c9a:	4a09      	ldr	r2, [pc, #36]	; (cc0 <system_gclk_chan_enable+0x3c>)
     c9c:	8853      	ldrh	r3, [r2, #2]
     c9e:	2180      	movs	r1, #128	; 0x80
     ca0:	01c9      	lsls	r1, r1, #7
     ca2:	430b      	orrs	r3, r1
     ca4:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     ca6:	4b07      	ldr	r3, [pc, #28]	; (cc4 <system_gclk_chan_enable+0x40>)
     ca8:	58e3      	ldr	r3, [r4, r3]
     caa:	9301      	str	r3, [sp, #4]
     cac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     cae:	b003      	add	sp, #12
     cb0:	bd30      	pop	{r4, r5, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	000005f4 	.word	0x000005f4
     cb8:	00000024 	.word	0x00000024
     cbc:	40000c02 	.word	0x40000c02
     cc0:	40000c00 	.word	0x40000c00
     cc4:	00000000 	.word	0x00000000

00000cc8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     cc8:	b530      	push	{r4, r5, lr}
     cca:	b083      	sub	sp, #12
     ccc:	0005      	movs	r5, r0
     cce:	4c13      	ldr	r4, [pc, #76]	; (d1c <system_gclk_chan_disable+0x54>)
     cd0:	447c      	add	r4, pc
	cpu_irq_enter_critical();
     cd2:	4b13      	ldr	r3, [pc, #76]	; (d20 <system_gclk_chan_disable+0x58>)
     cd4:	58e3      	ldr	r3, [r4, r3]
     cd6:	9301      	str	r3, [sp, #4]
     cd8:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     cda:	4b12      	ldr	r3, [pc, #72]	; (d24 <system_gclk_chan_disable+0x5c>)
     cdc:	701d      	strb	r5, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     cde:	4a12      	ldr	r2, [pc, #72]	; (d28 <system_gclk_chan_disable+0x60>)
     ce0:	8850      	ldrh	r0, [r2, #2]
     ce2:	0500      	lsls	r0, r0, #20
     ce4:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     ce6:	8853      	ldrh	r3, [r2, #2]
     ce8:	4910      	ldr	r1, [pc, #64]	; (d2c <system_gclk_chan_disable+0x64>)
     cea:	400b      	ands	r3, r1
     cec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     cee:	8853      	ldrh	r3, [r2, #2]
     cf0:	490f      	ldr	r1, [pc, #60]	; (d30 <system_gclk_chan_disable+0x68>)
     cf2:	400b      	ands	r3, r1
     cf4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     cf6:	0011      	movs	r1, r2
     cf8:	2280      	movs	r2, #128	; 0x80
     cfa:	01d2      	lsls	r2, r2, #7
     cfc:	884b      	ldrh	r3, [r1, #2]
     cfe:	4213      	tst	r3, r2
     d00:	d1fc      	bne.n	cfc <system_gclk_chan_disable+0x34>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     d02:	4909      	ldr	r1, [pc, #36]	; (d28 <system_gclk_chan_disable+0x60>)
     d04:	884b      	ldrh	r3, [r1, #2]
     d06:	0202      	lsls	r2, r0, #8
     d08:	4808      	ldr	r0, [pc, #32]	; (d2c <system_gclk_chan_disable+0x64>)
     d0a:	4003      	ands	r3, r0
     d0c:	4313      	orrs	r3, r2
     d0e:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     d10:	4b08      	ldr	r3, [pc, #32]	; (d34 <system_gclk_chan_disable+0x6c>)
     d12:	58e3      	ldr	r3, [r4, r3]
     d14:	9301      	str	r3, [sp, #4]
     d16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d18:	b003      	add	sp, #12
     d1a:	bd30      	pop	{r4, r5, pc}
     d1c:	000005b0 	.word	0x000005b0
     d20:	00000024 	.word	0x00000024
     d24:	40000c02 	.word	0x40000c02
     d28:	40000c00 	.word	0x40000c00
     d2c:	fffff0ff 	.word	0xfffff0ff
     d30:	ffffbfff 	.word	0xffffbfff
     d34:	00000000 	.word	0x00000000

00000d38 <system_gclk_chan_set_config>:
{
     d38:	b510      	push	{r4, lr}
     d3a:	b082      	sub	sp, #8
     d3c:	4b06      	ldr	r3, [pc, #24]	; (d58 <system_gclk_chan_set_config+0x20>)
     d3e:	447b      	add	r3, pc
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     d40:	780c      	ldrb	r4, [r1, #0]
     d42:	0224      	lsls	r4, r4, #8
     d44:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     d46:	4a05      	ldr	r2, [pc, #20]	; (d5c <system_gclk_chan_set_config+0x24>)
     d48:	589b      	ldr	r3, [r3, r2]
     d4a:	9301      	str	r3, [sp, #4]
     d4c:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     d4e:	b2a4      	uxth	r4, r4
     d50:	4b03      	ldr	r3, [pc, #12]	; (d60 <system_gclk_chan_set_config+0x28>)
     d52:	805c      	strh	r4, [r3, #2]
}
     d54:	b002      	add	sp, #8
     d56:	bd10      	pop	{r4, pc}
     d58:	00000542 	.word	0x00000542
     d5c:	00000088 	.word	0x00000088
     d60:	40000c00 	.word	0x40000c00

00000d64 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     d64:	b530      	push	{r4, r5, lr}
     d66:	b083      	sub	sp, #12
     d68:	0004      	movs	r4, r0
     d6a:	4d0b      	ldr	r5, [pc, #44]	; (d98 <system_gclk_chan_get_hz+0x34>)
     d6c:	447d      	add	r5, pc
	cpu_irq_enter_critical();
     d6e:	4b0b      	ldr	r3, [pc, #44]	; (d9c <system_gclk_chan_get_hz+0x38>)
     d70:	58eb      	ldr	r3, [r5, r3]
     d72:	9301      	str	r3, [sp, #4]
     d74:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d76:	4b0a      	ldr	r3, [pc, #40]	; (da0 <system_gclk_chan_get_hz+0x3c>)
     d78:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     d7a:	4b0a      	ldr	r3, [pc, #40]	; (da4 <system_gclk_chan_get_hz+0x40>)
     d7c:	885c      	ldrh	r4, [r3, #2]
     d7e:	0524      	lsls	r4, r4, #20
     d80:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     d82:	4b09      	ldr	r3, [pc, #36]	; (da8 <system_gclk_chan_get_hz+0x44>)
     d84:	58eb      	ldr	r3, [r5, r3]
     d86:	9301      	str	r3, [sp, #4]
     d88:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     d8a:	0020      	movs	r0, r4
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <system_gclk_chan_get_hz+0x48>)
     d8e:	58eb      	ldr	r3, [r5, r3]
     d90:	9301      	str	r3, [sp, #4]
     d92:	4798      	blx	r3
}
     d94:	b003      	add	sp, #12
     d96:	bd30      	pop	{r4, r5, pc}
     d98:	00000514 	.word	0x00000514
     d9c:	00000024 	.word	0x00000024
     da0:	40000c02 	.word	0x40000c02
     da4:	40000c00 	.word	0x40000c00
     da8:	00000000 	.word	0x00000000
     dac:	00000028 	.word	0x00000028

00000db0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     db0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     db2:	78d3      	ldrb	r3, [r2, #3]
     db4:	2b00      	cmp	r3, #0
     db6:	d135      	bne.n	e24 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     db8:	7813      	ldrb	r3, [r2, #0]
     dba:	2b80      	cmp	r3, #128	; 0x80
     dbc:	d029      	beq.n	e12 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     dbe:	061b      	lsls	r3, r3, #24
     dc0:	2480      	movs	r4, #128	; 0x80
     dc2:	0264      	lsls	r4, r4, #9
     dc4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     dc6:	7854      	ldrb	r4, [r2, #1]
     dc8:	2502      	movs	r5, #2
     dca:	43ac      	bics	r4, r5
     dcc:	d106      	bne.n	ddc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     dce:	7894      	ldrb	r4, [r2, #2]
     dd0:	2c00      	cmp	r4, #0
     dd2:	d120      	bne.n	e16 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     dd4:	2480      	movs	r4, #128	; 0x80
     dd6:	02a4      	lsls	r4, r4, #10
     dd8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     dda:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ddc:	7854      	ldrb	r4, [r2, #1]
     dde:	3c01      	subs	r4, #1
     de0:	2c01      	cmp	r4, #1
     de2:	d91c      	bls.n	e1e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     de4:	040d      	lsls	r5, r1, #16
     de6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     de8:	24a0      	movs	r4, #160	; 0xa0
     dea:	05e4      	lsls	r4, r4, #23
     dec:	432c      	orrs	r4, r5
     dee:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     df0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     df2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     df4:	24d0      	movs	r4, #208	; 0xd0
     df6:	0624      	lsls	r4, r4, #24
     df8:	432c      	orrs	r4, r5
     dfa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     dfc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     dfe:	78d4      	ldrb	r4, [r2, #3]
     e00:	2c00      	cmp	r4, #0
     e02:	d122      	bne.n	e4a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     e04:	035b      	lsls	r3, r3, #13
     e06:	d51c      	bpl.n	e42 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     e08:	7893      	ldrb	r3, [r2, #2]
     e0a:	2b01      	cmp	r3, #1
     e0c:	d01e      	beq.n	e4c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     e0e:	6141      	str	r1, [r0, #20]
     e10:	e017      	b.n	e42 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     e12:	2300      	movs	r3, #0
     e14:	e7d7      	b.n	dc6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     e16:	24c0      	movs	r4, #192	; 0xc0
     e18:	02e4      	lsls	r4, r4, #11
     e1a:	4323      	orrs	r3, r4
     e1c:	e7dd      	b.n	dda <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     e1e:	4c0d      	ldr	r4, [pc, #52]	; (e54 <_system_pinmux_config+0xa4>)
     e20:	4023      	ands	r3, r4
     e22:	e7df      	b.n	de4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     e24:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e26:	040c      	lsls	r4, r1, #16
     e28:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e2a:	23a0      	movs	r3, #160	; 0xa0
     e2c:	05db      	lsls	r3, r3, #23
     e2e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e30:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e32:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e34:	23d0      	movs	r3, #208	; 0xd0
     e36:	061b      	lsls	r3, r3, #24
     e38:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e3a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     e3c:	78d3      	ldrb	r3, [r2, #3]
     e3e:	2b00      	cmp	r3, #0
     e40:	d103      	bne.n	e4a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e42:	7853      	ldrb	r3, [r2, #1]
     e44:	3b01      	subs	r3, #1
     e46:	2b01      	cmp	r3, #1
     e48:	d902      	bls.n	e50 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     e4a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     e4c:	6181      	str	r1, [r0, #24]
     e4e:	e7f8      	b.n	e42 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     e50:	6081      	str	r1, [r0, #8]
}
     e52:	e7fa      	b.n	e4a <_system_pinmux_config+0x9a>
     e54:	fffbffff 	.word	0xfffbffff

00000e58 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     e58:	b510      	push	{r4, lr}
     e5a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e5c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e60:	2900      	cmp	r1, #0
     e62:	d104      	bne.n	e6e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     e64:	0943      	lsrs	r3, r0, #5
     e66:	01db      	lsls	r3, r3, #7
     e68:	4905      	ldr	r1, [pc, #20]	; (e80 <system_pinmux_pin_set_config+0x28>)
     e6a:	468c      	mov	ip, r1
     e6c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     e6e:	241f      	movs	r4, #31
     e70:	4020      	ands	r0, r4
     e72:	2101      	movs	r1, #1
     e74:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     e76:	0018      	movs	r0, r3
     e78:	4b02      	ldr	r3, [pc, #8]	; (e84 <system_pinmux_pin_set_config+0x2c>)
     e7a:	447b      	add	r3, pc
     e7c:	4798      	blx	r3
}
     e7e:	bd10      	pop	{r4, pc}
     e80:	41004400 	.word	0x41004400
     e84:	ffffff33 	.word	0xffffff33

00000e88 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     e88:	4770      	bx	lr
	...

00000e8c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     e8c:	b510      	push	{r4, lr}
     e8e:	b082      	sub	sp, #8
     e90:	4c0b      	ldr	r4, [pc, #44]	; (ec0 <system_init+0x34>)
     e92:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     e94:	4b0b      	ldr	r3, [pc, #44]	; (ec4 <system_init+0x38>)
     e96:	58e3      	ldr	r3, [r4, r3]
     e98:	9301      	str	r3, [sp, #4]
     e9a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     e9c:	4b0a      	ldr	r3, [pc, #40]	; (ec8 <system_init+0x3c>)
     e9e:	58e3      	ldr	r3, [r4, r3]
     ea0:	9301      	str	r3, [sp, #4]
     ea2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     ea4:	4b09      	ldr	r3, [pc, #36]	; (ecc <system_init+0x40>)
     ea6:	58e3      	ldr	r3, [r4, r3]
     ea8:	9301      	str	r3, [sp, #4]
     eaa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     eac:	4b08      	ldr	r3, [pc, #32]	; (ed0 <system_init+0x44>)
     eae:	58e3      	ldr	r3, [r4, r3]
     eb0:	9301      	str	r3, [sp, #4]
     eb2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     eb4:	4b07      	ldr	r3, [pc, #28]	; (ed4 <system_init+0x48>)
     eb6:	58e3      	ldr	r3, [r4, r3]
     eb8:	9301      	str	r3, [sp, #4]
     eba:	4798      	blx	r3
}
     ebc:	b002      	add	sp, #8
     ebe:	bd10      	pop	{r4, pc}
     ec0:	000003ee 	.word	0x000003ee
     ec4:	00000074 	.word	0x00000074
     ec8:	0000004c 	.word	0x0000004c
     ecc:	00000070 	.word	0x00000070
     ed0:	0000003c 	.word	0x0000003c
     ed4:	00000020 	.word	0x00000020

00000ed8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ed8:	e7fe      	b.n	ed8 <Dummy_Handler>
	...

00000edc <Reset_Handler>:
{
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	b083      	sub	sp, #12
     ee0:	4c40      	ldr	r4, [pc, #256]	; (fe4 <Reset_Handler+0x108>)
     ee2:	447c      	add	r4, pc
        if (pSrc != pDest) {
     ee4:	4b40      	ldr	r3, [pc, #256]	; (fe8 <Reset_Handler+0x10c>)
     ee6:	58e3      	ldr	r3, [r4, r3]
     ee8:	9300      	str	r3, [sp, #0]
     eea:	4b40      	ldr	r3, [pc, #256]	; (fec <Reset_Handler+0x110>)
     eec:	58e3      	ldr	r3, [r4, r3]
     eee:	9301      	str	r3, [sp, #4]
     ef0:	9b00      	ldr	r3, [sp, #0]
     ef2:	9a01      	ldr	r2, [sp, #4]
     ef4:	4293      	cmp	r3, r2
     ef6:	d022      	beq.n	f3e <Reset_Handler+0x62>
                for (; pDest < &_erelocate;) {
     ef8:	4b3c      	ldr	r3, [pc, #240]	; (fec <Reset_Handler+0x110>)
     efa:	58e3      	ldr	r3, [r4, r3]
     efc:	9300      	str	r3, [sp, #0]
     efe:	4b3c      	ldr	r3, [pc, #240]	; (ff0 <Reset_Handler+0x114>)
     f00:	58e3      	ldr	r3, [r4, r3]
     f02:	9301      	str	r3, [sp, #4]
     f04:	9b00      	ldr	r3, [sp, #0]
     f06:	9a01      	ldr	r2, [sp, #4]
     f08:	4293      	cmp	r3, r2
     f0a:	d218      	bcs.n	f3e <Reset_Handler+0x62>
     f0c:	4b38      	ldr	r3, [pc, #224]	; (ff0 <Reset_Handler+0x114>)
     f0e:	58e3      	ldr	r3, [r4, r3]
     f10:	9300      	str	r3, [sp, #0]
     f12:	4b36      	ldr	r3, [pc, #216]	; (fec <Reset_Handler+0x110>)
     f14:	58e3      	ldr	r3, [r4, r3]
     f16:	9301      	str	r3, [sp, #4]
     f18:	43db      	mvns	r3, r3
     f1a:	9a00      	ldr	r2, [sp, #0]
     f1c:	4694      	mov	ip, r2
     f1e:	4463      	add	r3, ip
     f20:	089b      	lsrs	r3, r3, #2
     f22:	3301      	adds	r3, #1
     f24:	009b      	lsls	r3, r3, #2
     f26:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     f28:	4930      	ldr	r1, [pc, #192]	; (fec <Reset_Handler+0x110>)
     f2a:	5861      	ldr	r1, [r4, r1]
     f2c:	9100      	str	r1, [sp, #0]
     f2e:	492e      	ldr	r1, [pc, #184]	; (fe8 <Reset_Handler+0x10c>)
     f30:	5861      	ldr	r1, [r4, r1]
     f32:	9800      	ldr	r0, [sp, #0]
     f34:	588d      	ldr	r5, [r1, r2]
     f36:	5085      	str	r5, [r0, r2]
     f38:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     f3a:	429a      	cmp	r2, r3
     f3c:	d1f9      	bne.n	f32 <Reset_Handler+0x56>
        for (pDest = &_szero; pDest < &_ezero;) {
     f3e:	4b2d      	ldr	r3, [pc, #180]	; (ff4 <Reset_Handler+0x118>)
     f40:	58e3      	ldr	r3, [r4, r3]
     f42:	9300      	str	r3, [sp, #0]
     f44:	4b2c      	ldr	r3, [pc, #176]	; (ff8 <Reset_Handler+0x11c>)
     f46:	58e3      	ldr	r3, [r4, r3]
     f48:	9301      	str	r3, [sp, #4]
     f4a:	9b00      	ldr	r3, [sp, #0]
     f4c:	9a01      	ldr	r2, [sp, #4]
     f4e:	4293      	cmp	r3, r2
     f50:	d210      	bcs.n	f74 <Reset_Handler+0x98>
     f52:	4b28      	ldr	r3, [pc, #160]	; (ff4 <Reset_Handler+0x118>)
     f54:	58e2      	ldr	r2, [r4, r3]
     f56:	4b28      	ldr	r3, [pc, #160]	; (ff8 <Reset_Handler+0x11c>)
     f58:	58e3      	ldr	r3, [r4, r3]
     f5a:	9300      	str	r3, [sp, #0]
     f5c:	43d3      	mvns	r3, r2
     f5e:	9900      	ldr	r1, [sp, #0]
     f60:	468c      	mov	ip, r1
     f62:	4463      	add	r3, ip
     f64:	2103      	movs	r1, #3
     f66:	438b      	bics	r3, r1
     f68:	3304      	adds	r3, #4
     f6a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     f6c:	2100      	movs	r1, #0
     f6e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     f70:	4293      	cmp	r3, r2
     f72:	d1fc      	bne.n	f6e <Reset_Handler+0x92>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f74:	4b21      	ldr	r3, [pc, #132]	; (ffc <Reset_Handler+0x120>)
     f76:	58e3      	ldr	r3, [r4, r3]
     f78:	9300      	str	r3, [sp, #0]
     f7a:	23ff      	movs	r3, #255	; 0xff
     f7c:	9a00      	ldr	r2, [sp, #0]
     f7e:	439a      	bics	r2, r3
     f80:	0013      	movs	r3, r2
     f82:	4a1f      	ldr	r2, [pc, #124]	; (1000 <Reset_Handler+0x124>)
     f84:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     f86:	2102      	movs	r1, #2
     f88:	2390      	movs	r3, #144	; 0x90
     f8a:	005b      	lsls	r3, r3, #1
     f8c:	4a1d      	ldr	r2, [pc, #116]	; (1004 <Reset_Handler+0x128>)
     f8e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     f90:	491d      	ldr	r1, [pc, #116]	; (1008 <Reset_Handler+0x12c>)
     f92:	78cb      	ldrb	r3, [r1, #3]
     f94:	2603      	movs	r6, #3
     f96:	43b3      	bics	r3, r6
     f98:	2502      	movs	r5, #2
     f9a:	432b      	orrs	r3, r5
     f9c:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     f9e:	78cb      	ldrb	r3, [r1, #3]
     fa0:	270c      	movs	r7, #12
     fa2:	43bb      	bics	r3, r7
     fa4:	2208      	movs	r2, #8
     fa6:	4313      	orrs	r3, r2
     fa8:	70cb      	strb	r3, [r1, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     faa:	4b18      	ldr	r3, [pc, #96]	; (100c <Reset_Handler+0x130>)
     fac:	7b98      	ldrb	r0, [r3, #14]
     fae:	2130      	movs	r1, #48	; 0x30
     fb0:	4388      	bics	r0, r1
     fb2:	2120      	movs	r1, #32
     fb4:	4308      	orrs	r0, r1
     fb6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     fb8:	7b99      	ldrb	r1, [r3, #14]
     fba:	43b9      	bics	r1, r7
     fbc:	4311      	orrs	r1, r2
     fbe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     fc0:	7b9a      	ldrb	r2, [r3, #14]
     fc2:	43b2      	bics	r2, r6
     fc4:	432a      	orrs	r2, r5
     fc6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     fc8:	4a11      	ldr	r2, [pc, #68]	; (1010 <Reset_Handler+0x134>)
     fca:	6853      	ldr	r3, [r2, #4]
     fcc:	2180      	movs	r1, #128	; 0x80
     fce:	430b      	orrs	r3, r1
     fd0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     fd2:	4b10      	ldr	r3, [pc, #64]	; (1014 <Reset_Handler+0x138>)
     fd4:	58e3      	ldr	r3, [r4, r3]
     fd6:	9300      	str	r3, [sp, #0]
     fd8:	4798      	blx	r3
        main();
     fda:	4b0f      	ldr	r3, [pc, #60]	; (1018 <Reset_Handler+0x13c>)
     fdc:	58e3      	ldr	r3, [r4, r3]
     fde:	9300      	str	r3, [sp, #0]
     fe0:	4798      	blx	r3
     fe2:	e7fe      	b.n	fe2 <Reset_Handler+0x106>
     fe4:	0000039e 	.word	0x0000039e
     fe8:	00000010 	.word	0x00000010
     fec:	00000018 	.word	0x00000018
     ff0:	00000080 	.word	0x00000080
     ff4:	00000014 	.word	0x00000014
     ff8:	00000060 	.word	0x00000060
     ffc:	00000008 	.word	0x00000008
    1000:	e000ed00 	.word	0xe000ed00
    1004:	41007000 	.word	0x41007000
    1008:	41005000 	.word	0x41005000
    100c:	41004800 	.word	0x41004800
    1010:	41004000 	.word	0x41004000
    1014:	00000034 	.word	0x00000034
    1018:	00000058 	.word	0x00000058

0000101c <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
    101c:	b5f0      	push	{r4, r5, r6, r7, lr}
    101e:	46ce      	mov	lr, r9
    1020:	4647      	mov	r7, r8
    1022:	b580      	push	{r7, lr}
    1024:	b085      	sub	sp, #20
    1026:	4f27      	ldr	r7, [pc, #156]	; (10c4 <main+0xa8>)
    1028:	447f      	add	r7, pc
	system_init();
    102a:	4b27      	ldr	r3, [pc, #156]	; (10c8 <main+0xac>)
    102c:	58fb      	ldr	r3, [r7, r3]
    102e:	9301      	str	r3, [sp, #4]
    1030:	4798      	blx	r3
	delay_s(3);
    1032:	4826      	ldr	r0, [pc, #152]	; (10cc <main+0xb0>)
    1034:	4b26      	ldr	r3, [pc, #152]	; (10d0 <main+0xb4>)
    1036:	58fb      	ldr	r3, [r7, r3]
    1038:	9301      	str	r3, [sp, #4]
    103a:	4798      	blx	r3

	while(1) {
		for (int i=1; i<0x26; i++) {
			system_gclk_chan_disable(i);
    103c:	4b25      	ldr	r3, [pc, #148]	; (10d4 <main+0xb8>)
    103e:	58fb      	ldr	r3, [r7, r3]
    1040:	4699      	mov	r9, r3
			struct system_gclk_chan_config cfg;
			cfg.source_generator = GCLK_GENERATOR_7;
    1042:	ae03      	add	r6, sp, #12
    1044:	2307      	movs	r3, #7
    1046:	4698      	mov	r8, r3
    1048:	e010      	b.n	106c <main+0x50>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    104a:	4a23      	ldr	r2, [pc, #140]	; (10d8 <main+0xbc>)
    104c:	6913      	ldr	r3, [r2, #16]
    104e:	2104      	movs	r1, #4
    1050:	430b      	orrs	r3, r1
    1052:	6113      	str	r3, [r2, #16]
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    1054:	4b21      	ldr	r3, [pc, #132]	; (10dc <main+0xc0>)
    1056:	58fb      	ldr	r3, [r7, r3]
    1058:	9301      	str	r3, [sp, #4]
    105a:	2301      	movs	r3, #1
    105c:	9a01      	ldr	r2, [sp, #4]
    105e:	7013      	strb	r3, [r2, #0]
    1060:	f3bf 8f5f 	dmb	sy
    1064:	b662      	cpsie	i
  __ASM volatile ("dsb");
    1066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    106a:	bf30      	wfi
		for (int i=1; i<0x26; i++) {
    106c:	2401      	movs	r4, #1
			system_gclk_chan_disable(i);
    106e:	b2e5      	uxtb	r5, r4
    1070:	0028      	movs	r0, r5
    1072:	47c8      	blx	r9
			cfg.source_generator = GCLK_GENERATOR_7;
    1074:	4643      	mov	r3, r8
    1076:	7033      	strb	r3, [r6, #0]
			system_gclk_chan_set_config(i, &cfg);
    1078:	0031      	movs	r1, r6
    107a:	0028      	movs	r0, r5
    107c:	4b18      	ldr	r3, [pc, #96]	; (10e0 <main+0xc4>)
    107e:	58fb      	ldr	r3, [r7, r3]
    1080:	9301      	str	r3, [sp, #4]
    1082:	4798      	blx	r3
		for (int i=1; i<0x26; i++) {
    1084:	3401      	adds	r4, #1
    1086:	2c26      	cmp	r4, #38	; 0x26
    1088:	d1f1      	bne.n	106e <main+0x52>
			PM->APBAMASK.reg &= ~mask;
    108a:	4b16      	ldr	r3, [pc, #88]	; (10e4 <main+0xc8>)
    108c:	699a      	ldr	r2, [r3, #24]
    108e:	2200      	movs	r2, #0
    1090:	619a      	str	r2, [r3, #24]
			PM->APBBMASK.reg &= ~mask;
    1092:	69d9      	ldr	r1, [r3, #28]
    1094:	61da      	str	r2, [r3, #28]
			PM->APBCMASK.reg &= ~mask;
    1096:	6a19      	ldr	r1, [r3, #32]
    1098:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsid i" : : : "memory");
    109a:	b672      	cpsid	i
  __ASM volatile ("dmb");
    109c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    10a0:	4b0e      	ldr	r3, [pc, #56]	; (10dc <main+0xc0>)
    10a2:	58fb      	ldr	r3, [r7, r3]
    10a4:	9301      	str	r3, [sp, #4]
    10a6:	701a      	strb	r2, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    10a8:	4b0f      	ldr	r3, [pc, #60]	; (10e8 <main+0xcc>)
    10aa:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    10ac:	051b      	lsls	r3, r3, #20
    10ae:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    10b0:	2b02      	cmp	r3, #2
    10b2:	d8ca      	bhi.n	104a <main+0x2e>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    10b4:	4a0d      	ldr	r2, [pc, #52]	; (10ec <main+0xd0>)
    10b6:	6851      	ldr	r1, [r2, #4]
    10b8:	23c0      	movs	r3, #192	; 0xc0
    10ba:	009b      	lsls	r3, r3, #2
    10bc:	430b      	orrs	r3, r1
    10be:	6053      	str	r3, [r2, #4]
    10c0:	e7c3      	b.n	104a <main+0x2e>
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00000258 	.word	0x00000258
    10c8:	00000004 	.word	0x00000004
    10cc:	00000bb8 	.word	0x00000bb8
    10d0:	0000008c 	.word	0x0000008c
    10d4:	00000088 	.word	0x00000088
    10d8:	e000ed00 	.word	0xe000ed00
    10dc:	0000002c 	.word	0x0000002c
    10e0:	0000001c 	.word	0x0000001c
    10e4:	40000400 	.word	0x40000400
    10e8:	41002000 	.word	0x41002000
    10ec:	41004000 	.word	0x41004000

000010f0 <__gnu_thumb1_case_uqi>:
    10f0:	b402      	push	{r1}
    10f2:	4671      	mov	r1, lr
    10f4:	0849      	lsrs	r1, r1, #1
    10f6:	0049      	lsls	r1, r1, #1
    10f8:	5c09      	ldrb	r1, [r1, r0]
    10fa:	0049      	lsls	r1, r1, #1
    10fc:	448e      	add	lr, r1
    10fe:	bc02      	pop	{r1}
    1100:	4770      	bx	lr
    1102:	46c0      	nop			; (mov r8, r8)

00001104 <__udivsi3>:
    1104:	2200      	movs	r2, #0
    1106:	0843      	lsrs	r3, r0, #1
    1108:	428b      	cmp	r3, r1
    110a:	d374      	bcc.n	11f6 <__udivsi3+0xf2>
    110c:	0903      	lsrs	r3, r0, #4
    110e:	428b      	cmp	r3, r1
    1110:	d35f      	bcc.n	11d2 <__udivsi3+0xce>
    1112:	0a03      	lsrs	r3, r0, #8
    1114:	428b      	cmp	r3, r1
    1116:	d344      	bcc.n	11a2 <__udivsi3+0x9e>
    1118:	0b03      	lsrs	r3, r0, #12
    111a:	428b      	cmp	r3, r1
    111c:	d328      	bcc.n	1170 <__udivsi3+0x6c>
    111e:	0c03      	lsrs	r3, r0, #16
    1120:	428b      	cmp	r3, r1
    1122:	d30d      	bcc.n	1140 <__udivsi3+0x3c>
    1124:	22ff      	movs	r2, #255	; 0xff
    1126:	0209      	lsls	r1, r1, #8
    1128:	ba12      	rev	r2, r2
    112a:	0c03      	lsrs	r3, r0, #16
    112c:	428b      	cmp	r3, r1
    112e:	d302      	bcc.n	1136 <__udivsi3+0x32>
    1130:	1212      	asrs	r2, r2, #8
    1132:	0209      	lsls	r1, r1, #8
    1134:	d065      	beq.n	1202 <__udivsi3+0xfe>
    1136:	0b03      	lsrs	r3, r0, #12
    1138:	428b      	cmp	r3, r1
    113a:	d319      	bcc.n	1170 <__udivsi3+0x6c>
    113c:	e000      	b.n	1140 <__udivsi3+0x3c>
    113e:	0a09      	lsrs	r1, r1, #8
    1140:	0bc3      	lsrs	r3, r0, #15
    1142:	428b      	cmp	r3, r1
    1144:	d301      	bcc.n	114a <__udivsi3+0x46>
    1146:	03cb      	lsls	r3, r1, #15
    1148:	1ac0      	subs	r0, r0, r3
    114a:	4152      	adcs	r2, r2
    114c:	0b83      	lsrs	r3, r0, #14
    114e:	428b      	cmp	r3, r1
    1150:	d301      	bcc.n	1156 <__udivsi3+0x52>
    1152:	038b      	lsls	r3, r1, #14
    1154:	1ac0      	subs	r0, r0, r3
    1156:	4152      	adcs	r2, r2
    1158:	0b43      	lsrs	r3, r0, #13
    115a:	428b      	cmp	r3, r1
    115c:	d301      	bcc.n	1162 <__udivsi3+0x5e>
    115e:	034b      	lsls	r3, r1, #13
    1160:	1ac0      	subs	r0, r0, r3
    1162:	4152      	adcs	r2, r2
    1164:	0b03      	lsrs	r3, r0, #12
    1166:	428b      	cmp	r3, r1
    1168:	d301      	bcc.n	116e <__udivsi3+0x6a>
    116a:	030b      	lsls	r3, r1, #12
    116c:	1ac0      	subs	r0, r0, r3
    116e:	4152      	adcs	r2, r2
    1170:	0ac3      	lsrs	r3, r0, #11
    1172:	428b      	cmp	r3, r1
    1174:	d301      	bcc.n	117a <__udivsi3+0x76>
    1176:	02cb      	lsls	r3, r1, #11
    1178:	1ac0      	subs	r0, r0, r3
    117a:	4152      	adcs	r2, r2
    117c:	0a83      	lsrs	r3, r0, #10
    117e:	428b      	cmp	r3, r1
    1180:	d301      	bcc.n	1186 <__udivsi3+0x82>
    1182:	028b      	lsls	r3, r1, #10
    1184:	1ac0      	subs	r0, r0, r3
    1186:	4152      	adcs	r2, r2
    1188:	0a43      	lsrs	r3, r0, #9
    118a:	428b      	cmp	r3, r1
    118c:	d301      	bcc.n	1192 <__udivsi3+0x8e>
    118e:	024b      	lsls	r3, r1, #9
    1190:	1ac0      	subs	r0, r0, r3
    1192:	4152      	adcs	r2, r2
    1194:	0a03      	lsrs	r3, r0, #8
    1196:	428b      	cmp	r3, r1
    1198:	d301      	bcc.n	119e <__udivsi3+0x9a>
    119a:	020b      	lsls	r3, r1, #8
    119c:	1ac0      	subs	r0, r0, r3
    119e:	4152      	adcs	r2, r2
    11a0:	d2cd      	bcs.n	113e <__udivsi3+0x3a>
    11a2:	09c3      	lsrs	r3, r0, #7
    11a4:	428b      	cmp	r3, r1
    11a6:	d301      	bcc.n	11ac <__udivsi3+0xa8>
    11a8:	01cb      	lsls	r3, r1, #7
    11aa:	1ac0      	subs	r0, r0, r3
    11ac:	4152      	adcs	r2, r2
    11ae:	0983      	lsrs	r3, r0, #6
    11b0:	428b      	cmp	r3, r1
    11b2:	d301      	bcc.n	11b8 <__udivsi3+0xb4>
    11b4:	018b      	lsls	r3, r1, #6
    11b6:	1ac0      	subs	r0, r0, r3
    11b8:	4152      	adcs	r2, r2
    11ba:	0943      	lsrs	r3, r0, #5
    11bc:	428b      	cmp	r3, r1
    11be:	d301      	bcc.n	11c4 <__udivsi3+0xc0>
    11c0:	014b      	lsls	r3, r1, #5
    11c2:	1ac0      	subs	r0, r0, r3
    11c4:	4152      	adcs	r2, r2
    11c6:	0903      	lsrs	r3, r0, #4
    11c8:	428b      	cmp	r3, r1
    11ca:	d301      	bcc.n	11d0 <__udivsi3+0xcc>
    11cc:	010b      	lsls	r3, r1, #4
    11ce:	1ac0      	subs	r0, r0, r3
    11d0:	4152      	adcs	r2, r2
    11d2:	08c3      	lsrs	r3, r0, #3
    11d4:	428b      	cmp	r3, r1
    11d6:	d301      	bcc.n	11dc <__udivsi3+0xd8>
    11d8:	00cb      	lsls	r3, r1, #3
    11da:	1ac0      	subs	r0, r0, r3
    11dc:	4152      	adcs	r2, r2
    11de:	0883      	lsrs	r3, r0, #2
    11e0:	428b      	cmp	r3, r1
    11e2:	d301      	bcc.n	11e8 <__udivsi3+0xe4>
    11e4:	008b      	lsls	r3, r1, #2
    11e6:	1ac0      	subs	r0, r0, r3
    11e8:	4152      	adcs	r2, r2
    11ea:	0843      	lsrs	r3, r0, #1
    11ec:	428b      	cmp	r3, r1
    11ee:	d301      	bcc.n	11f4 <__udivsi3+0xf0>
    11f0:	004b      	lsls	r3, r1, #1
    11f2:	1ac0      	subs	r0, r0, r3
    11f4:	4152      	adcs	r2, r2
    11f6:	1a41      	subs	r1, r0, r1
    11f8:	d200      	bcs.n	11fc <__udivsi3+0xf8>
    11fa:	4601      	mov	r1, r0
    11fc:	4152      	adcs	r2, r2
    11fe:	4610      	mov	r0, r2
    1200:	4770      	bx	lr
    1202:	e7ff      	b.n	1204 <__udivsi3+0x100>
    1204:	b501      	push	{r0, lr}
    1206:	2000      	movs	r0, #0
    1208:	f000 f806 	bl	1218 <__aeabi_idiv0>
    120c:	bd02      	pop	{r1, pc}
    120e:	46c0      	nop			; (mov r8, r8)

00001210 <__aeabi_uidivmod>:
    1210:	2900      	cmp	r1, #0
    1212:	d0f7      	beq.n	1204 <__udivsi3+0x100>
    1214:	e776      	b.n	1104 <__udivsi3>
    1216:	4770      	bx	lr

00001218 <__aeabi_idiv0>:
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)

0000121c <__libc_init_array>:
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	2600      	movs	r6, #0
    1220:	4d0c      	ldr	r5, [pc, #48]	; (1254 <__libc_init_array+0x38>)
    1222:	4c0d      	ldr	r4, [pc, #52]	; (1258 <__libc_init_array+0x3c>)
    1224:	1b64      	subs	r4, r4, r5
    1226:	10a4      	asrs	r4, r4, #2
    1228:	42a6      	cmp	r6, r4
    122a:	d109      	bne.n	1240 <__libc_init_array+0x24>
    122c:	2600      	movs	r6, #0
    122e:	f000 f819 	bl	1264 <_init>
    1232:	4d0a      	ldr	r5, [pc, #40]	; (125c <__libc_init_array+0x40>)
    1234:	4c0a      	ldr	r4, [pc, #40]	; (1260 <__libc_init_array+0x44>)
    1236:	1b64      	subs	r4, r4, r5
    1238:	10a4      	asrs	r4, r4, #2
    123a:	42a6      	cmp	r6, r4
    123c:	d105      	bne.n	124a <__libc_init_array+0x2e>
    123e:	bd70      	pop	{r4, r5, r6, pc}
    1240:	00b3      	lsls	r3, r6, #2
    1242:	58eb      	ldr	r3, [r5, r3]
    1244:	4798      	blx	r3
    1246:	3601      	adds	r6, #1
    1248:	e7ee      	b.n	1228 <__libc_init_array+0xc>
    124a:	00b3      	lsls	r3, r6, #2
    124c:	58eb      	ldr	r3, [r5, r3]
    124e:	4798      	blx	r3
    1250:	3601      	adds	r6, #1
    1252:	e7f2      	b.n	123a <__libc_init_array+0x1e>
    1254:	00001270 	.word	0x00001270
    1258:	00001270 	.word	0x00001270
    125c:	00001270 	.word	0x00001270
    1260:	00001274 	.word	0x00001274

00001264 <_init>:
    1264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	bcf8      	pop	{r3, r4, r5, r6, r7}
    126a:	bc08      	pop	{r3}
    126c:	469e      	mov	lr, r3
    126e:	4770      	bx	lr

00001270 <__init_array_start>:
    1270:	000000dd 	.word	0x000000dd

00001274 <_fini>:
    1274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	bcf8      	pop	{r3, r4, r5, r6, r7}
    127a:	bc08      	pop	{r3}
    127c:	469e      	mov	lr, r3
    127e:	4770      	bx	lr

00001280 <__fini_array_start>:
    1280:	000000b5 	.word	0x000000b5
