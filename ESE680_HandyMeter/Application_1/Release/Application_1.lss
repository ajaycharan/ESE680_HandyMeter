
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dae4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000dae4  0000dae4  0001dae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .got          0000034c  0000daec  0000daec  0001daec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .got.plt      0000000c  0000de38  0000de38  0001de38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .relocate     00000ac4  20000000  0000de44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002a04  20000ad0  0000e920  00020ad0  2**4
                  ALLOC
  6 .stack        00002004  200034d4  00011324  00020ad0  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  00020ac4  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020aee  2**0
                  CONTENTS, READONLY
  9 .debug_info   000682dc  00000000  00000000  00020b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000869f  00000000  00000000  00088e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d2f4  00000000  00000000  000914c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f18  00000000  00000000  0009e7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002118  00000000  00000000  0009f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000235b2  00000000  00000000  000a17e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001da88  00000000  00000000  000c4d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000989e7  00000000  00000000  000e2820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003af8  00000000  00000000  0017b208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 54 00 20 e1 64 00 00 dd 64 00 00 dd 64 00 00     .T. .d...d...d..
	...
      2c:	dd 64 00 00 00 00 00 00 00 00 00 00 dd 64 00 00     .d...........d..
      3c:	dd 64 00 00 dd 64 00 00 cd 16 00 00 dd 64 00 00     .d...d.......d..
      4c:	ed 36 00 00 65 33 00 00 dd 64 00 00 c1 2f 00 00     .6..e3...d.../..
      5c:	d9 5c 00 00 e9 10 00 00 e5 39 00 00 f9 39 00 00     .\.......9...9..
      6c:	0d 3a 00 00 21 3a 00 00 35 3a 00 00 49 3a 00 00     .:..!:..5:..I:..
      7c:	91 12 00 00 ad 12 00 00 c9 12 00 00 75 13 00 00     ............u...
      8c:	91 13 00 00 ad 13 00 00 00 00 00 00 00 00 00 00     ................
      9c:	dd 64 00 00 dd 64 00 00 dd 64 00 00 dd 64 00 00     .d...d...d...d..
      ac:	dd 64 00 00 00 00 00 00                             .d......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000ad0 	.word	0x20000ad0
      d4:	00000000 	.word	0x00000000
      d8:	0000daec 	.word	0x0000daec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000ad4 	.word	0x20000ad4
     108:	0000daec 	.word	0x0000daec
     10c:	0000daec 	.word	0x0000daec
     110:	00000000 	.word	0x00000000

00000114 <accy_powerUp>:
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     114:	2301      	movs	r3, #1
	config->powersave  = false;
     116:	2200      	movs	r2, #0
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, loadA);
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, loadB);
}

bool print=0;
void accy_powerUp() {
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
     11a:	b087      	sub	sp, #28
	config->input_pull = PORT_PIN_PULL_UP;
     11c:	ac02      	add	r4, sp, #8
     11e:	7063      	strb	r3, [r4, #1]

	// Power enable
	struct port_config cfg;
	port_get_config_defaults(&cfg);
	cfg.direction = PORT_PIN_DIR_OUTPUT;
     120:	7023      	strb	r3, [r4, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     122:	2380      	movs	r3, #128	; 0x80
	config->powersave  = false;
     124:	70a2      	strb	r2, [r4, #2]
		port_base->OUTSET.reg = pin_mask;
     126:	2280      	movs	r2, #128	; 0x80
     128:	4e36      	ldr	r6, [pc, #216]	; (204 <accy_powerUp+0xf0>)
     12a:	041b      	lsls	r3, r3, #16
     12c:	61b3      	str	r3, [r6, #24]
     12e:	4b36      	ldr	r3, [pc, #216]	; (208 <accy_powerUp+0xf4>)
     130:	03d2      	lsls	r2, r2, #15
void accy_powerUp() {
     132:	4f36      	ldr	r7, [pc, #216]	; (20c <accy_powerUp+0xf8>)
     134:	601a      	str	r2, [r3, #0]
	port_pin_set_output_level(ACCYEN_GP_OUT_PIN, 1);
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
	port_pin_set_config(ACCYEN_GP_OUT_PIN, &cfg);
     136:	4b36      	ldr	r3, [pc, #216]	; (210 <accy_powerUp+0xfc>)
void accy_powerUp() {
     138:	447f      	add	r7, pc
	port_pin_set_config(ACCYEN_GP_OUT_PIN, &cfg);
     13a:	58fd      	ldr	r5, [r7, r3]
     13c:	0021      	movs	r1, r4
     13e:	2017      	movs	r0, #23
     140:	47a8      	blx	r5
	port_pin_set_config(ADC_SPI_CS_PIN, &cfg);
     142:	0021      	movs	r1, r4
     144:	2036      	movs	r0, #54	; 0x36
     146:	47a8      	blx	r5

	// Range switches
	port_pin_set_config(SW1A_GP_OUT_PIN, &cfg);
     148:	0021      	movs	r1, r4
     14a:	2004      	movs	r0, #4
     14c:	47a8      	blx	r5
	port_pin_set_config(SW2A_GP_OUT_PIN, &cfg);
     14e:	0021      	movs	r1, r4
     150:	2005      	movs	r0, #5
     152:	47a8      	blx	r5
	port_pin_set_config(SW3A_GP_OUT_PIN, &cfg);
     154:	0021      	movs	r1, r4
     156:	2006      	movs	r0, #6
     158:	47a8      	blx	r5
	port_pin_set_config(SW4A_GP_OUT_PIN, &cfg);
     15a:	0021      	movs	r1, r4
     15c:	2007      	movs	r0, #7
     15e:	47a8      	blx	r5
	port_pin_set_config(SW1B_GP_OUT_PIN, &cfg);
     160:	0021      	movs	r1, r4
     162:	2008      	movs	r0, #8
     164:	47a8      	blx	r5
	port_pin_set_config(SW2B_GP_OUT_PIN, &cfg);
     166:	0021      	movs	r1, r4
     168:	2009      	movs	r0, #9
     16a:	47a8      	blx	r5
	port_pin_set_config(SW3B_GP_OUT_PIN, &cfg);
     16c:	0021      	movs	r1, r4
     16e:	200a      	movs	r0, #10
     170:	47a8      	blx	r5
	port_pin_set_config(SW4B_GP_OUT_PIN, &cfg);
     172:	0021      	movs	r1, r4
     174:	200b      	movs	r0, #11
     176:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
     178:	2310      	movs	r3, #16
     17a:	6173      	str	r3, [r6, #20]
		port_base->OUTSET.reg = pin_mask;
     17c:	18db      	adds	r3, r3, r3
     17e:	61b3      	str	r3, [r6, #24]
     180:	3320      	adds	r3, #32
     182:	61b3      	str	r3, [r6, #24]
     184:	3340      	adds	r3, #64	; 0x40
     186:	61b3      	str	r3, [r6, #24]
		port_base->OUTCLR.reg = pin_mask;
     188:	3380      	adds	r3, #128	; 0x80
     18a:	6173      	str	r3, [r6, #20]
		port_base->OUTSET.reg = pin_mask;
     18c:	3301      	adds	r3, #1
     18e:	33ff      	adds	r3, #255	; 0xff
     190:	61b3      	str	r3, [r6, #24]
     192:	2380      	movs	r3, #128	; 0x80
     194:	00db      	lsls	r3, r3, #3
     196:	61b3      	str	r3, [r6, #24]
     198:	2380      	movs	r3, #128	; 0x80
     19a:	011b      	lsls	r3, r3, #4
     19c:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(SW2B_GP_OUT_PIN, 1);
	port_pin_set_output_level(SW3B_GP_OUT_PIN, 1);
	port_pin_set_output_level(SW4B_GP_OUT_PIN, 1);

	// Logic channels
	cfg.direction = PORT_PIN_DIR_INPUT;
     19e:	2300      	movs	r3, #0
	port_pin_set_config(LOGIC1_TC_CAP_PIN, &cfg);
     1a0:	0021      	movs	r1, r4
     1a2:	2014      	movs	r0, #20
	cfg.direction = PORT_PIN_DIR_INPUT;
     1a4:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LOGIC1_TC_CAP_PIN, &cfg);
     1a6:	47a8      	blx	r5
	port_pin_set_config(LOGIC2_TC_CAP_PIN, &cfg);
     1a8:	0021      	movs	r1, r4
     1aa:	2015      	movs	r0, #21
     1ac:	47a8      	blx	r5

	adc_init();
     1ae:	4b19      	ldr	r3, [pc, #100]	; (214 <accy_powerUp+0x100>)

	// Testing
	adc_rangeSet(RANGE_1_224, RANGE_1_224);
	int cnt=0;
     1b0:	2400      	movs	r4, #0
	adc_init();
     1b2:	58fb      	ldr	r3, [r7, r3]
     1b4:	9301      	str	r3, [sp, #4]
     1b6:	4798      	blx	r3
	adc_rangeSet(RANGE_1_224, RANGE_1_224);
     1b8:	2100      	movs	r1, #0
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <accy_powerUp+0x104>)
     1bc:	0008      	movs	r0, r1
     1be:	58fb      	ldr	r3, [r7, r3]
     1c0:	9301      	str	r3, [sp, #4]
     1c2:	4798      	blx	r3
	while(1) {
		cnt++;
		int32_t s1=0;
     1c4:	2300      	movs	r3, #0
     1c6:	9303      	str	r3, [sp, #12]
		int32_t s2=0;
     1c8:	9304      	str	r3, [sp, #16]
		int32_t s3=0;
     1ca:	9305      	str	r3, [sp, #20]
		if (adc_fifo_getSample(&s1, &s2, &s3))
     1cc:	4b13      	ldr	r3, [pc, #76]	; (21c <accy_powerUp+0x108>)
     1ce:	aa05      	add	r2, sp, #20
     1d0:	58fb      	ldr	r3, [r7, r3]
     1d2:	a904      	add	r1, sp, #16
     1d4:	a803      	add	r0, sp, #12
		cnt++;
     1d6:	3401      	adds	r4, #1
		if (adc_fifo_getSample(&s1, &s2, &s3))
     1d8:	9301      	str	r3, [sp, #4]
     1da:	4798      	blx	r3
     1dc:	2800      	cmp	r0, #0
     1de:	d0f1      	beq.n	1c4 <accy_powerUp+0xb0>
				if (cnt % 10 == 0)
     1e0:	4b0f      	ldr	r3, [pc, #60]	; (220 <accy_powerUp+0x10c>)
     1e2:	210a      	movs	r1, #10
     1e4:	58fb      	ldr	r3, [r7, r3]
     1e6:	0020      	movs	r0, r4
     1e8:	9301      	str	r3, [sp, #4]
     1ea:	4798      	blx	r3
     1ec:	2900      	cmp	r1, #0
     1ee:	d1e9      	bne.n	1c4 <accy_powerUp+0xb0>
				debug_print("S1: %d S2: %d\n", s1, s2);
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <accy_powerUp+0x110>)
     1f2:	480d      	ldr	r0, [pc, #52]	; (228 <accy_powerUp+0x114>)
     1f4:	58fb      	ldr	r3, [r7, r3]
     1f6:	9a04      	ldr	r2, [sp, #16]
     1f8:	9903      	ldr	r1, [sp, #12]
     1fa:	4478      	add	r0, pc
     1fc:	9301      	str	r3, [sp, #4]
     1fe:	4798      	blx	r3
	while(1) {
     200:	e7e0      	b.n	1c4 <accy_powerUp+0xb0>
     202:	46c0      	nop			; (mov r8, r8)
     204:	41004400 	.word	0x41004400
     208:	41004498 	.word	0x41004498
     20c:	0000d9b0 	.word	0x0000d9b0
     210:	00000280 	.word	0x00000280
     214:	00000298 	.word	0x00000298
     218:	000002e0 	.word	0x000002e0
     21c:	000001dc 	.word	0x000001dc
     220:	00000338 	.word	0x00000338
     224:	0000021c 	.word	0x0000021c
     228:	0000d26a 	.word	0x0000d26a

0000022c <tc_enable_callback.constprop.9>:
 * met. This function will also enable the appropriate interrupts.
 *
 * \param[in]     module        Pointer to TC software instance struct
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
     22c:	b513      	push	{r0, r1, r4, lr}
     22e:	4b0c      	ldr	r3, [pc, #48]	; (260 <tc_enable_callback.constprop.9+0x34>)
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     230:	4a0c      	ldr	r2, [pc, #48]	; (264 <tc_enable_callback.constprop.9+0x38>)
static inline void tc_enable_callback(
     232:	447b      	add	r3, pc
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     234:	589b      	ldr	r3, [r3, r2]
static inline void tc_enable_callback(
     236:	0004      	movs	r4, r0
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     238:	6800      	ldr	r0, [r0, #0]
     23a:	9301      	str	r3, [sp, #4]
     23c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <tc_enable_callback.constprop.9+0x3c>)
     240:	447b      	add	r3, pc
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     242:	5c1a      	ldrb	r2, [r3, r0]
     244:	231f      	movs	r3, #31
     246:	401a      	ands	r2, r3
     248:	3b1e      	subs	r3, #30
     24a:	4093      	lsls	r3, r2
     24c:	4a07      	ldr	r2, [pc, #28]	; (26c <tc_enable_callback.constprop.9+0x40>)
     24e:	6013      	str	r3, [r2, #0]
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
     250:	2220      	movs	r2, #32
     252:	7e63      	ldrb	r3, [r4, #25]
     254:	4313      	orrs	r3, r2
     256:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
     258:	6823      	ldr	r3, [r4, #0]
     25a:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
     25c:	bd13      	pop	{r0, r1, r4, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	0000d8b6 	.word	0x0000d8b6
     264:	00000150 	.word	0x00000150
     268:	0000d37c 	.word	0x0000d37c
     26c:	e000e100 	.word	0xe000e100

00000270 <fifo_init>:
	int first;
	int last;
	int count;
};
void fifo_init(struct FifoBuffer* bf) {
	bf->first = 0;
     270:	2280      	movs	r2, #128	; 0x80
     272:	2300      	movs	r3, #0
     274:	0192      	lsls	r2, r2, #6
     276:	5083      	str	r3, [r0, r2]
	bf->last = FIFO_LENGTH-1;
     278:	4902      	ldr	r1, [pc, #8]	; (284 <fifo_init+0x14>)
     27a:	4a03      	ldr	r2, [pc, #12]	; (288 <fifo_init+0x18>)
     27c:	5081      	str	r1, [r0, r2]
	bf->count = 0;
     27e:	4a03      	ldr	r2, [pc, #12]	; (28c <fifo_init+0x1c>)
     280:	5083      	str	r3, [r0, r2]
}
     282:	4770      	bx	lr
     284:	000003ff 	.word	0x000003ff
     288:	00002004 	.word	0x00002004
     28c:	00002008 	.word	0x00002008

00000290 <fifo_isEmpty>:
int fifo_numItems(struct FifoBuffer* bf) {
	return bf->count;
}
bool fifo_isEmpty(struct FifoBuffer* bf) {
	return (bf->count <= 0);	
     290:	4b02      	ldr	r3, [pc, #8]	; (29c <fifo_isEmpty+0xc>)
     292:	58c0      	ldr	r0, [r0, r3]
     294:	1e43      	subs	r3, r0, #1
     296:	4318      	orrs	r0, r3
     298:	0fc0      	lsrs	r0, r0, #31
}
     29a:	4770      	bx	lr
     29c:	00002008 	.word	0x00002008

000002a0 <fifo_isFull>:
bool fifo_isFull(struct FifoBuffer* bf) {
	return (bf->count >= FIFO_LENGTH);
     2a0:	4904      	ldr	r1, [pc, #16]	; (2b4 <fifo_isFull+0x14>)
     2a2:	4a05      	ldr	r2, [pc, #20]	; (2b8 <fifo_isFull+0x18>)
     2a4:	5841      	ldr	r1, [r0, r1]
     2a6:	2301      	movs	r3, #1
     2a8:	4291      	cmp	r1, r2
     2aa:	dc00      	bgt.n	2ae <fifo_isFull+0xe>
     2ac:	2300      	movs	r3, #0
     2ae:	b2d8      	uxtb	r0, r3
}
     2b0:	4770      	bx	lr
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00002008 	.word	0x00002008
     2b8:	000003ff 	.word	0x000003ff

000002bc <fifo_push>:
bool fifo_push(struct FifoBuffer* bf, int32_t s1, int32_t s2, int32_t s3) {
     2bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     2be:	4b11      	ldr	r3, [pc, #68]	; (304 <fifo_push+0x48>)
     2c0:	0015      	movs	r5, r2
	if (fifo_isFull(bf)) return false;
     2c2:	4a11      	ldr	r2, [pc, #68]	; (308 <fifo_push+0x4c>)
bool fifo_push(struct FifoBuffer* bf, int32_t s1, int32_t s2, int32_t s3) {
     2c4:	447b      	add	r3, pc
	if (fifo_isFull(bf)) return false;
     2c6:	589b      	ldr	r3, [r3, r2]
bool fifo_push(struct FifoBuffer* bf, int32_t s1, int32_t s2, int32_t s3) {
     2c8:	0004      	movs	r4, r0
	if (fifo_isFull(bf)) return false;
     2ca:	9301      	str	r3, [sp, #4]
bool fifo_push(struct FifoBuffer* bf, int32_t s1, int32_t s2, int32_t s3) {
     2cc:	000e      	movs	r6, r1
	if (fifo_isFull(bf)) return false;
     2ce:	4798      	blx	r3
     2d0:	2300      	movs	r3, #0
     2d2:	4298      	cmp	r0, r3
     2d4:	d113      	bne.n	2fe <fifo_push+0x42>
	bf->last = (bf->last + 1) % FIFO_LENGTH;
     2d6:	4a0d      	ldr	r2, [pc, #52]	; (30c <fifo_push+0x50>)
     2d8:	490d      	ldr	r1, [pc, #52]	; (310 <fifo_push+0x54>)
     2da:	58a3      	ldr	r3, [r4, r2]
     2dc:	3301      	adds	r3, #1
     2de:	400b      	ands	r3, r1
     2e0:	d503      	bpl.n	2ea <fifo_push+0x2e>
     2e2:	490c      	ldr	r1, [pc, #48]	; (314 <fifo_push+0x58>)
     2e4:	3b01      	subs	r3, #1
     2e6:	430b      	orrs	r3, r1
     2e8:	3301      	adds	r3, #1
     2ea:	50a3      	str	r3, [r4, r2]
	bf->data[bf->last][0] = s1;
     2ec:	00db      	lsls	r3, r3, #3
	bf->data[bf->last][1] = s2;
#ifdef STORE_FAULT
	bf->data[bf->last][2] = s3;
#endif
	bf->count = bf->count + 1;
     2ee:	4a0a      	ldr	r2, [pc, #40]	; (318 <fifo_push+0x5c>)
	bf->data[bf->last][0] = s1;
     2f0:	511e      	str	r6, [r3, r4]
	bf->data[bf->last][1] = s2;
     2f2:	18e3      	adds	r3, r4, r3
     2f4:	605d      	str	r5, [r3, #4]
	bf->count = bf->count + 1;
     2f6:	58a3      	ldr	r3, [r4, r2]
     2f8:	3301      	adds	r3, #1
     2fa:	50a3      	str	r3, [r4, r2]
     2fc:	2301      	movs	r3, #1
	return true;
}
     2fe:	0018      	movs	r0, r3
     300:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	0000d824 	.word	0x0000d824
     308:	0000011c 	.word	0x0000011c
     30c:	00002004 	.word	0x00002004
     310:	800003ff 	.word	0x800003ff
     314:	fffffc00 	.word	0xfffffc00
     318:	00002008 	.word	0x00002008

0000031c <fifo_pop>:
bool fifo_pop(struct FifoBuffer* bf, int32_t* s1, int32_t* s2, int32_t* s3) {
     31c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     31e:	4b12      	ldr	r3, [pc, #72]	; (368 <fifo_pop+0x4c>)
     320:	0015      	movs	r5, r2
	if (fifo_isEmpty(bf)) return false;
     322:	4a12      	ldr	r2, [pc, #72]	; (36c <fifo_pop+0x50>)
bool fifo_pop(struct FifoBuffer* bf, int32_t* s1, int32_t* s2, int32_t* s3) {
     324:	447b      	add	r3, pc
	if (fifo_isEmpty(bf)) return false;
     326:	589b      	ldr	r3, [r3, r2]
bool fifo_pop(struct FifoBuffer* bf, int32_t* s1, int32_t* s2, int32_t* s3) {
     328:	0004      	movs	r4, r0
	if (fifo_isEmpty(bf)) return false;
     32a:	9301      	str	r3, [sp, #4]
bool fifo_pop(struct FifoBuffer* bf, int32_t* s1, int32_t* s2, int32_t* s3) {
     32c:	000e      	movs	r6, r1
	if (fifo_isEmpty(bf)) return false;
     32e:	4798      	blx	r3
     330:	2300      	movs	r3, #0
     332:	4298      	cmp	r0, r3
     334:	d116      	bne.n	364 <fifo_pop+0x48>
	*s1 = bf->data[bf->first][0];
     336:	2180      	movs	r1, #128	; 0x80
     338:	0189      	lsls	r1, r1, #6
     33a:	5863      	ldr	r3, [r4, r1]
     33c:	00da      	lsls	r2, r3, #3
     33e:	5910      	ldr	r0, [r2, r4]
	*s2 = bf->data[bf->first][1];
     340:	18a2      	adds	r2, r4, r2
	*s1 = bf->data[bf->first][0];
     342:	6030      	str	r0, [r6, #0]
	*s2 = bf->data[bf->first][1];
     344:	6852      	ldr	r2, [r2, #4]
#ifdef STORE_FAULT
	*s3 = bf->data[bf->first][2];
#endif
	bf->first = (bf->first + 1) % FIFO_LENGTH;
     346:	3301      	adds	r3, #1
	*s2 = bf->data[bf->first][1];
     348:	602a      	str	r2, [r5, #0]
	bf->first = (bf->first + 1) % FIFO_LENGTH;
     34a:	4a09      	ldr	r2, [pc, #36]	; (370 <fifo_pop+0x54>)
     34c:	4013      	ands	r3, r2
     34e:	d503      	bpl.n	358 <fifo_pop+0x3c>
     350:	4a08      	ldr	r2, [pc, #32]	; (374 <fifo_pop+0x58>)
     352:	3b01      	subs	r3, #1
     354:	4313      	orrs	r3, r2
     356:	3301      	adds	r3, #1
	bf->count = bf->count - 1;
     358:	4a07      	ldr	r2, [pc, #28]	; (378 <fifo_pop+0x5c>)
	bf->first = (bf->first + 1) % FIFO_LENGTH;
     35a:	5063      	str	r3, [r4, r1]
	bf->count = bf->count - 1;
     35c:	58a3      	ldr	r3, [r4, r2]
     35e:	3b01      	subs	r3, #1
     360:	50a3      	str	r3, [r4, r2]
     362:	2301      	movs	r3, #1
	return true;
}
     364:	0018      	movs	r0, r3
     366:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     368:	0000d7c4 	.word	0x0000d7c4
     36c:	00000140 	.word	0x00000140
     370:	800003ff 	.word	0x800003ff
     374:	fffffc00 	.word	0xfffffc00
     378:	00002008 	.word	0x00002008

0000037c <adc_fifo_getSample>:

bool adc_started=0;
enum AdcSampleRate adc_sampleRate = RATE_1000;
struct FifoBuffer adc_sampleBuffer;

bool adc_fifo_getSample(int32_t* s1, int32_t* s2, int32_t* s3) {
     37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     37e:	4c07      	ldr	r4, [pc, #28]	; (39c <adc_fifo_getSample+0x20>)
     380:	0013      	movs	r3, r2
	return fifo_pop(&adc_sampleBuffer, s1, s2, s3);
     382:	4a07      	ldr	r2, [pc, #28]	; (3a0 <adc_fifo_getSample+0x24>)
bool adc_fifo_getSample(int32_t* s1, int32_t* s2, int32_t* s3) {
     384:	447c      	add	r4, pc
	return fifo_pop(&adc_sampleBuffer, s1, s2, s3);
     386:	58a2      	ldr	r2, [r4, r2]
     388:	4d06      	ldr	r5, [pc, #24]	; (3a4 <adc_fifo_getSample+0x28>)
     38a:	9201      	str	r2, [sp, #4]
     38c:	5964      	ldr	r4, [r4, r5]
     38e:	000a      	movs	r2, r1
     390:	0001      	movs	r1, r0
     392:	9801      	ldr	r0, [sp, #4]
     394:	9401      	str	r4, [sp, #4]
     396:	47a0      	blx	r4
}
     398:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	0000d764 	.word	0x0000d764
     3a0:	000000bc 	.word	0x000000bc
     3a4:	00000100 	.word	0x00000100

000003a8 <adc_fifo_storeSample>:
bool adc_fifo_peekSample(int offset, int32_t* s1, int32_t* s2, int32_t* s3) {
	return fifo_peek(&adc_sampleBuffer, offset, s1, s2, s3);
}
bool adc_fifo_storeSample(int32_t s1, int32_t s2, int32_t s3) {
     3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     3aa:	4c07      	ldr	r4, [pc, #28]	; (3c8 <adc_fifo_storeSample+0x20>)
     3ac:	0013      	movs	r3, r2
	return fifo_push(&adc_sampleBuffer, s1, s2, s3);
     3ae:	4a07      	ldr	r2, [pc, #28]	; (3cc <adc_fifo_storeSample+0x24>)
bool adc_fifo_storeSample(int32_t s1, int32_t s2, int32_t s3) {
     3b0:	447c      	add	r4, pc
	return fifo_push(&adc_sampleBuffer, s1, s2, s3);
     3b2:	58a2      	ldr	r2, [r4, r2]
     3b4:	4d06      	ldr	r5, [pc, #24]	; (3d0 <adc_fifo_storeSample+0x28>)
     3b6:	9201      	str	r2, [sp, #4]
     3b8:	5964      	ldr	r4, [r4, r5]
     3ba:	000a      	movs	r2, r1
     3bc:	0001      	movs	r1, r0
     3be:	9801      	ldr	r0, [sp, #4]
     3c0:	9401      	str	r4, [sp, #4]
     3c2:	47a0      	blx	r4
}
     3c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	0000d738 	.word	0x0000d738
     3cc:	000000bc 	.word	0x000000bc
     3d0:	00000030 	.word	0x00000030

000003d4 <adc_fifo_init>:
int adc_fifo_getCount() {
	return fifo_numItems(&adc_sampleBuffer);
}
void adc_fifo_init() {
     3d4:	b507      	push	{r0, r1, r2, lr}
     3d6:	4b05      	ldr	r3, [pc, #20]	; (3ec <adc_fifo_init+0x18>)
	fifo_init(&adc_sampleBuffer);
     3d8:	4a05      	ldr	r2, [pc, #20]	; (3f0 <adc_fifo_init+0x1c>)
void adc_fifo_init() {
     3da:	447b      	add	r3, pc
	fifo_init(&adc_sampleBuffer);
     3dc:	589a      	ldr	r2, [r3, r2]
     3de:	9201      	str	r2, [sp, #4]
     3e0:	0010      	movs	r0, r2
     3e2:	4a04      	ldr	r2, [pc, #16]	; (3f4 <adc_fifo_init+0x20>)
     3e4:	589b      	ldr	r3, [r3, r2]
     3e6:	9301      	str	r3, [sp, #4]
     3e8:	4798      	blx	r3
}
     3ea:	bd07      	pop	{r0, r1, r2, pc}
     3ec:	0000d70e 	.word	0x0000d70e
     3f0:	000000bc 	.word	0x000000bc
     3f4:	000000e8 	.word	0x000000e8

000003f8 <adc_rangeConvert>:

enum AdcRange current_range_ch1 = RANGE_1_224;
enum AdcRange current_range_ch2 = RANGE_1_224;

// Changes val to be in units of uV, based on current range setting
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t vu1 = *v1 << (32-24);
     3fa:	6803      	ldr	r3, [r0, #0]
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     3fc:	b087      	sub	sp, #28
	uint32_t vu1 = *v1 << (32-24);
     3fe:	021b      	lsls	r3, r3, #8
	uint32_t vu2 = *v2 << (32-24);
	int32_t vs1 = (int32_t)(vu1) >> (32-24);
     400:	121a      	asrs	r2, r3, #8
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     402:	4d1a      	ldr	r5, [pc, #104]	; (46c <adc_rangeConvert+0x74>)
	int32_t vs2 = (int32_t)(vu2) >> (32-24);
	int64_t vl1 = vs1;
     404:	17db      	asrs	r3, r3, #31
     406:	9303      	str	r3, [sp, #12]
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     408:	000f      	movs	r7, r1
	uint32_t vu2 = *v2 << (32-24);
     40a:	680b      	ldr	r3, [r1, #0]
	int64_t vl2 = vs2;
	if (vl1 > 8388607 || vl1 < -8388608) return false;
	if (vl2 > 8388607 || vl2 < -8388608) return false;
	vl1 = vl1 * rangeConversionTable[current_range_ch1];
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     40c:	4918      	ldr	r1, [pc, #96]	; (470 <adc_rangeConvert+0x78>)
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     40e:	447d      	add	r5, pc
	int32_t vs1 = (int32_t)(vu1) >> (32-24);
     410:	9202      	str	r2, [sp, #8]
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     412:	5869      	ldr	r1, [r5, r1]
bool adc_rangeConvert(int32_t* v1, int32_t* v2) {
     414:	0006      	movs	r6, r0
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     416:	9100      	str	r1, [sp, #0]
     418:	4916      	ldr	r1, [pc, #88]	; (474 <adc_rangeConvert+0x7c>)
     41a:	9800      	ldr	r0, [sp, #0]
     41c:	5869      	ldr	r1, [r5, r1]
     41e:	4c16      	ldr	r4, [pc, #88]	; (478 <adc_rangeConvert+0x80>)
     420:	9101      	str	r1, [sp, #4]
     422:	7809      	ldrb	r1, [r1, #0]
     424:	592c      	ldr	r4, [r5, r4]
     426:	0089      	lsls	r1, r1, #2
     428:	5808      	ldr	r0, [r1, r0]
	uint32_t vu2 = *v2 << (32-24);
     42a:	021b      	lsls	r3, r3, #8
	int32_t vs2 = (int32_t)(vu2) >> (32-24);
     42c:	121a      	asrs	r2, r3, #8
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     42e:	9401      	str	r4, [sp, #4]
	int64_t vl2 = vs2;
     430:	17db      	asrs	r3, r3, #31
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     432:	17c1      	asrs	r1, r0, #31
     434:	47a0      	blx	r4
	vl1 = vl1 * rangeConversionTable[current_range_ch1];
     436:	4b11      	ldr	r3, [pc, #68]	; (47c <adc_rangeConvert+0x84>)
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     438:	9105      	str	r1, [sp, #20]
	vl1 = vl1 * rangeConversionTable[current_range_ch1];
     43a:	58eb      	ldr	r3, [r5, r3]
     43c:	9a00      	ldr	r2, [sp, #0]
     43e:	9304      	str	r3, [sp, #16]
     440:	781b      	ldrb	r3, [r3, #0]
	vl2 = vl2 * rangeConversionTable[current_range_ch2];
     442:	0004      	movs	r4, r0
	vl1 = vl1 * rangeConversionTable[current_range_ch1];
     444:	009b      	lsls	r3, r3, #2
     446:	5898      	ldr	r0, [r3, r2]
     448:	9d01      	ldr	r5, [sp, #4]
     44a:	9b03      	ldr	r3, [sp, #12]
     44c:	9a02      	ldr	r2, [sp, #8]
     44e:	17c1      	asrs	r1, r0, #31
     450:	47a8      	blx	r5
	*v1 = (vl1 >> 24);
     452:	0209      	lsls	r1, r1, #8
     454:	0e00      	lsrs	r0, r0, #24
     456:	4308      	orrs	r0, r1
     458:	6030      	str	r0, [r6, #0]
	*v2 = (vl2 >> 24);
	return true;
}
     45a:	2001      	movs	r0, #1
	*v2 = (vl2 >> 24);
     45c:	9b05      	ldr	r3, [sp, #20]
     45e:	0e24      	lsrs	r4, r4, #24
     460:	021e      	lsls	r6, r3, #8
     462:	4334      	orrs	r4, r6
     464:	603c      	str	r4, [r7, #0]
}
     466:	b007      	add	sp, #28
     468:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	0000d6da 	.word	0x0000d6da
     470:	00000124 	.word	0x00000124
     474:	00000208 	.word	0x00000208
     478:	00000130 	.word	0x00000130
     47c:	00000288 	.word	0x00000288

00000480 <adc_rangeSet>:

// Set switches to a new range setting, -1 to skip setting
bool adc_rangeSet(enum AdcRange r1, enum AdcRange r2) {
     480:	b537      	push	{r0, r1, r2, r4, r5, lr}
     482:	4c23      	ldr	r4, [pc, #140]	; (510 <adc_rangeSet+0x90>)
     484:	0002      	movs	r2, r0
     486:	447c      	add	r4, pc
	if (r1 > 8 || r2 > 8) return false;
     488:	2000      	movs	r0, #0
     48a:	2a08      	cmp	r2, #8
     48c:	d82f      	bhi.n	4ee <adc_rangeSet+0x6e>
     48e:	2908      	cmp	r1, #8
     490:	d82d      	bhi.n	4ee <adc_rangeSet+0x6e>
     492:	4b20      	ldr	r3, [pc, #128]	; (514 <adc_rangeSet+0x94>)
     494:	3010      	adds	r0, #16
	if (r1 < -1|| r2 <-1) return false;

	// Set the outputs
	if (r1 != -1) {
		if (r1 & 1)		port_pin_set_output_level(SW1A_GP_OUT_PIN, 0);
     496:	07d5      	lsls	r5, r2, #31
     498:	d52a      	bpl.n	4f0 <adc_rangeSet+0x70>
		port_base->OUTCLR.reg = pin_mask;
     49a:	6158      	str	r0, [r3, #20]
     49c:	2020      	movs	r0, #32
		else			port_pin_set_output_level(SW1A_GP_OUT_PIN, 1);
		if (r1 & 2)		port_pin_set_output_level(SW2A_GP_OUT_PIN, 0);
     49e:	0795      	lsls	r5, r2, #30
     4a0:	d528      	bpl.n	4f4 <adc_rangeSet+0x74>
     4a2:	6158      	str	r0, [r3, #20]
     4a4:	2040      	movs	r0, #64	; 0x40
		else			port_pin_set_output_level(SW2A_GP_OUT_PIN, 1);
		if (r1 & 4)		port_pin_set_output_level(SW3A_GP_OUT_PIN, 0);
     4a6:	0755      	lsls	r5, r2, #29
     4a8:	d526      	bpl.n	4f8 <adc_rangeSet+0x78>
     4aa:	6158      	str	r0, [r3, #20]
     4ac:	2080      	movs	r0, #128	; 0x80
		else			port_pin_set_output_level(SW3A_GP_OUT_PIN, 1);
		if (r1 & 8)		port_pin_set_output_level(SW4A_GP_OUT_PIN, 0);
     4ae:	0715      	lsls	r5, r2, #28
     4b0:	d524      	bpl.n	4fc <adc_rangeSet+0x7c>
     4b2:	6158      	str	r0, [r3, #20]
		else			port_pin_set_output_level(SW4A_GP_OUT_PIN, 1);
		current_range_ch1 = r1;
     4b4:	4818      	ldr	r0, [pc, #96]	; (518 <adc_rangeSet+0x98>)
     4b6:	5820      	ldr	r0, [r4, r0]
     4b8:	7002      	strb	r2, [r0, #0]
     4ba:	2280      	movs	r2, #128	; 0x80
     4bc:	9001      	str	r0, [sp, #4]
     4be:	0052      	lsls	r2, r2, #1
	}
	if (r2 != -1) {
		if (r2 & 1)		port_pin_set_output_level(SW1B_GP_OUT_PIN, 0);
     4c0:	07c8      	lsls	r0, r1, #31
     4c2:	d51d      	bpl.n	500 <adc_rangeSet+0x80>
     4c4:	615a      	str	r2, [r3, #20]
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	0092      	lsls	r2, r2, #2
		else			port_pin_set_output_level(SW1B_GP_OUT_PIN, 1);
		if (r2 & 2)		port_pin_set_output_level(SW2B_GP_OUT_PIN, 0);
     4ca:	0788      	lsls	r0, r1, #30
     4cc:	d51a      	bpl.n	504 <adc_rangeSet+0x84>
     4ce:	615a      	str	r2, [r3, #20]
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	00d2      	lsls	r2, r2, #3
		else			port_pin_set_output_level(SW2B_GP_OUT_PIN, 1);
		if (r2 & 4)		port_pin_set_output_level(SW3B_GP_OUT_PIN, 0);
     4d4:	0748      	lsls	r0, r1, #29
     4d6:	d517      	bpl.n	508 <adc_rangeSet+0x88>
     4d8:	615a      	str	r2, [r3, #20]
     4da:	2280      	movs	r2, #128	; 0x80
     4dc:	0112      	lsls	r2, r2, #4
		else			port_pin_set_output_level(SW3B_GP_OUT_PIN, 1);
		if (r2 & 8)		port_pin_set_output_level(SW4B_GP_OUT_PIN, 0);
     4de:	0708      	lsls	r0, r1, #28
     4e0:	d514      	bpl.n	50c <adc_rangeSet+0x8c>
     4e2:	615a      	str	r2, [r3, #20]
		else			port_pin_set_output_level(SW4B_GP_OUT_PIN, 1);
		current_range_ch2 = r2;
     4e4:	2001      	movs	r0, #1
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <adc_rangeSet+0x9c>)
     4e8:	58e3      	ldr	r3, [r4, r3]
     4ea:	9301      	str	r3, [sp, #4]
     4ec:	7019      	strb	r1, [r3, #0]
	// Special case mV range load resistor
	// if (r1 == 0)	set_winc_gpio(0);
	// if (r2 == 0)	set_winc_gpio(0);

	return true;
}
     4ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		port_base->OUTSET.reg = pin_mask;
     4f0:	6198      	str	r0, [r3, #24]
     4f2:	e7d3      	b.n	49c <adc_rangeSet+0x1c>
     4f4:	6198      	str	r0, [r3, #24]
     4f6:	e7d5      	b.n	4a4 <adc_rangeSet+0x24>
     4f8:	6198      	str	r0, [r3, #24]
     4fa:	e7d7      	b.n	4ac <adc_rangeSet+0x2c>
     4fc:	6198      	str	r0, [r3, #24]
     4fe:	e7d9      	b.n	4b4 <adc_rangeSet+0x34>
     500:	619a      	str	r2, [r3, #24]
     502:	e7e0      	b.n	4c6 <adc_rangeSet+0x46>
     504:	619a      	str	r2, [r3, #24]
     506:	e7e3      	b.n	4d0 <adc_rangeSet+0x50>
     508:	619a      	str	r2, [r3, #24]
     50a:	e7e6      	b.n	4da <adc_rangeSet+0x5a>
     50c:	619a      	str	r2, [r3, #24]
     50e:	e7e9      	b.n	4e4 <adc_rangeSet+0x64>
     510:	0000d662 	.word	0x0000d662
     514:	41004400 	.word	0x41004400
     518:	00000288 	.word	0x00000288
     51c:	00000208 	.word	0x00000208

00000520 <adc_gclk_config>:
int  adc_synchronous_stop();
void adc_transfer_start_callback(struct tc_module* module);
void adc_transfer_complete_callback(struct tc_module* module);

// Setup GCLK generator for ADC master clock to frequency
void adc_gclk_config(int hz) {
     520:	b570      	push	{r4, r5, r6, lr}
     522:	4d12      	ldr	r5, [pc, #72]	; (56c <adc_gclk_config+0x4c>)
	int main_clock = system_gclk_gen_get_hz(GCLK_GENERATOR_0);
     524:	4b12      	ldr	r3, [pc, #72]	; (570 <adc_gclk_config+0x50>)
void adc_gclk_config(int hz) {
     526:	447d      	add	r5, pc
	int main_clock = system_gclk_gen_get_hz(GCLK_GENERATOR_0);
     528:	58eb      	ldr	r3, [r5, r3]
void adc_gclk_config(int hz) {
     52a:	b086      	sub	sp, #24
     52c:	0006      	movs	r6, r0
	int main_clock = system_gclk_gen_get_hz(GCLK_GENERATOR_0);
     52e:	2000      	movs	r0, #0
     530:	9301      	str	r3, [sp, #4]
     532:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     534:	2300      	movs	r3, #0
     536:	ac03      	add	r4, sp, #12
     538:	7063      	strb	r3, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     53a:	7223      	strb	r3, [r4, #8]
	int divider = main_clock / hz;
	struct system_gclk_gen_config gclk_conf;
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_DFLL;
     53c:	3307      	adds	r3, #7
     53e:	7023      	strb	r3, [r4, #0]
	int divider = main_clock / hz;
     540:	4b0c      	ldr	r3, [pc, #48]	; (574 <adc_gclk_config+0x54>)
     542:	0031      	movs	r1, r6
     544:	58eb      	ldr	r3, [r5, r3]
     546:	9301      	str	r3, [sp, #4]
     548:	4798      	blx	r3
	gclk_conf.division_factor = divider;
	gclk_conf.run_in_standby  = false;
	gclk_conf.output_enable   = true;
     54a:	2301      	movs	r3, #1
     54c:	7263      	strb	r3, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_4, &gclk_conf);
     54e:	4b0a      	ldr	r3, [pc, #40]	; (578 <adc_gclk_config+0x58>)
	gclk_conf.division_factor = divider;
     550:	6060      	str	r0, [r4, #4]
	system_gclk_gen_set_config(GCLK_GENERATOR_4, &gclk_conf);
     552:	58eb      	ldr	r3, [r5, r3]
     554:	0021      	movs	r1, r4
     556:	2004      	movs	r0, #4
     558:	9301      	str	r3, [sp, #4]
     55a:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_4);
     55c:	4b07      	ldr	r3, [pc, #28]	; (57c <adc_gclk_config+0x5c>)
     55e:	2004      	movs	r0, #4
     560:	58eb      	ldr	r3, [r5, r3]
     562:	9301      	str	r3, [sp, #4]
     564:	4798      	blx	r3
}
     566:	b006      	add	sp, #24
     568:	bd70      	pop	{r4, r5, r6, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	0000d5c2 	.word	0x0000d5c2
     570:	00000114 	.word	0x00000114
     574:	000001a8 	.word	0x000001a8
     578:	0000012c 	.word	0x0000012c
     57c:	0000020c 	.word	0x0000020c

00000580 <adc_gclk_output_start>:

// Enable output of the GCLK4 on the ADC clock pin
void adc_gclk_output_start() {
     580:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     582:	2200      	movs	r2, #0
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     584:	2001      	movs	r0, #1
     586:	a903      	add	r1, sp, #12
     588:	70ca      	strb	r2, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     58a:	708a      	strb	r2, [r1, #2]
void adc_gclk_output_start() {
     58c:	4b08      	ldr	r3, [pc, #32]	; (5b0 <adc_gclk_output_start+0x30>)
	mcfg.mux_position = MUX_PB10H_GCLK_IO4;
     58e:	3207      	adds	r2, #7
     590:	700a      	strb	r2, [r1, #0]
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
     592:	4a08      	ldr	r2, [pc, #32]	; (5b4 <adc_gclk_output_start+0x34>)
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     594:	7048      	strb	r0, [r1, #1]
void adc_gclk_output_start() {
     596:	447b      	add	r3, pc
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
     598:	589b      	ldr	r3, [r3, r2]
     59a:	3029      	adds	r0, #41	; 0x29
     59c:	9301      	str	r3, [sp, #4]
     59e:	4798      	blx	r3
{
  PortGroup* const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
  uint32_t pin_index = (gpio_pin % 32);

  if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    port->PINCFG[pin_index].reg |=  PORT_PINCFG_DRVSTR;
     5a0:	2340      	movs	r3, #64	; 0x40
     5a2:	4a05      	ldr	r2, [pc, #20]	; (5b8 <adc_gclk_output_start+0x38>)
     5a4:	7811      	ldrb	r1, [r2, #0]
     5a6:	430b      	orrs	r3, r1
     5a8:	7013      	strb	r3, [r2, #0]
	system_pinmux_pin_set_output_strength(ADC_GCLK_MCK_PIN, SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
}
     5aa:	b005      	add	sp, #20
     5ac:	bd00      	pop	{pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	0000d552 	.word	0x0000d552
     5b4:	00000304 	.word	0x00000304
     5b8:	410044ca 	.word	0x410044ca

000005bc <adc_cs_pin_takeover>:
	mcfg.mux_position = SYSTEM_PINMUX_GPIO;
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
}

// Take control of CS pin from SPI port, set to level
void adc_cs_pin_takeover(bool level) {
     5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     5be:	2280      	movs	r2, #128	; 0x80
     5c0:	4b0e      	ldr	r3, [pc, #56]	; (5fc <adc_cs_pin_takeover+0x40>)
     5c2:	03d2      	lsls	r2, r2, #15
     5c4:	447b      	add	r3, pc
	if (level) {
     5c6:	2800      	cmp	r0, #0
     5c8:	d015      	beq.n	5f6 <adc_cs_pin_takeover+0x3a>
		port_base->OUTSET.reg = pin_mask;
     5ca:	490d      	ldr	r1, [pc, #52]	; (600 <adc_cs_pin_takeover+0x44>)
		port_base->OUTCLR.reg = pin_mask;
     5cc:	600a      	str	r2, [r1, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	a903      	add	r1, sp, #12
     5d2:	700a      	strb	r2, [r1, #0]
	config->powersave    = false;
     5d4:	2200      	movs	r2, #0
	port_pin_set_output_level(ADC_SPI_CS_PIN, level);
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5d6:	2001      	movs	r0, #1
     5d8:	70ca      	strb	r2, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     5da:	708a      	strb	r2, [r1, #2]
	mcfg.mux_position = SYSTEM_PINMUX_GPIO;
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     5dc:	4a09      	ldr	r2, [pc, #36]	; (604 <adc_cs_pin_takeover+0x48>)
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5de:	7048      	strb	r0, [r1, #1]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     5e0:	589b      	ldr	r3, [r3, r2]
     5e2:	3035      	adds	r0, #53	; 0x35
     5e4:	9301      	str	r3, [sp, #4]
     5e6:	4798      	blx	r3
    port->PINCFG[pin_index].reg |=  PORT_PINCFG_DRVSTR;
     5e8:	2340      	movs	r3, #64	; 0x40
     5ea:	4a07      	ldr	r2, [pc, #28]	; (608 <adc_cs_pin_takeover+0x4c>)
     5ec:	7811      	ldrb	r1, [r2, #0]
     5ee:	430b      	orrs	r3, r1
     5f0:	7013      	strb	r3, [r2, #0]
	system_pinmux_pin_set_output_strength(ADC_SPI_CS_PIN, SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
}
     5f2:	b005      	add	sp, #20
     5f4:	bd00      	pop	{pc}
     5f6:	4905      	ldr	r1, [pc, #20]	; (60c <adc_cs_pin_takeover+0x50>)
     5f8:	e7e8      	b.n	5cc <adc_cs_pin_takeover+0x10>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	0000d524 	.word	0x0000d524
     600:	41004498 	.word	0x41004498
     604:	00000304 	.word	0x00000304
     608:	410044d6 	.word	0x410044d6
     60c:	41004494 	.word	0x41004494

00000610 <adc_transfer_start_callback>:
	adc_cs_pin_takeover(1);
	return r;
}

// Called by the timer at start of SPI frame
void adc_transfer_start_callback(struct tc_module* module) {
     610:	b507      	push	{r0, r1, r2, lr}
     612:	4b04      	ldr	r3, [pc, #16]	; (624 <adc_transfer_start_callback+0x14>)
	adc_cs_pin_takeover(0);
     614:	4a04      	ldr	r2, [pc, #16]	; (628 <adc_transfer_start_callback+0x18>)
void adc_transfer_start_callback(struct tc_module* module) {
     616:	447b      	add	r3, pc
	adc_cs_pin_takeover(0);
     618:	589b      	ldr	r3, [r3, r2]
     61a:	2000      	movs	r0, #0
     61c:	9301      	str	r3, [sp, #4]
     61e:	4798      	blx	r3
}
     620:	bd07      	pop	{r0, r1, r2, pc}
     622:	46c0      	nop			; (mov r8, r8)
     624:	0000d4d2 	.word	0x0000d4d2
     628:	0000024c 	.word	0x0000024c

0000062c <adc_cs_pin_release>:
void adc_cs_pin_release(bool level) {
     62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     62e:	2280      	movs	r2, #128	; 0x80
     630:	4b0b      	ldr	r3, [pc, #44]	; (660 <adc_cs_pin_release+0x34>)
     632:	03d2      	lsls	r2, r2, #15
     634:	447b      	add	r3, pc
	if (level) {
     636:	2800      	cmp	r0, #0
     638:	d010      	beq.n	65c <adc_cs_pin_release+0x30>
		port_base->OUTSET.reg = pin_mask;
     63a:	490a      	ldr	r1, [pc, #40]	; (664 <adc_cs_pin_release+0x38>)
		port_base->OUTCLR.reg = pin_mask;
     63c:	600a      	str	r2, [r1, #0]
	config->powersave    = false;
     63e:	2200      	movs	r2, #0
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     640:	2001      	movs	r0, #1
     642:	a903      	add	r1, sp, #12
     644:	70ca      	strb	r2, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     646:	708a      	strb	r2, [r1, #2]
	mcfg.mux_position = MUX_PB22D_SERCOM5_PAD2;
     648:	3203      	adds	r2, #3
     64a:	700a      	strb	r2, [r1, #0]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     64c:	4a06      	ldr	r2, [pc, #24]	; (668 <adc_cs_pin_release+0x3c>)
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     64e:	7048      	strb	r0, [r1, #1]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     650:	589b      	ldr	r3, [r3, r2]
     652:	3035      	adds	r0, #53	; 0x35
     654:	9301      	str	r3, [sp, #4]
     656:	4798      	blx	r3
}
     658:	b005      	add	sp, #20
     65a:	bd00      	pop	{pc}
     65c:	4903      	ldr	r1, [pc, #12]	; (66c <adc_cs_pin_release+0x40>)
     65e:	e7ed      	b.n	63c <adc_cs_pin_release+0x10>
     660:	0000d4b4 	.word	0x0000d4b4
     664:	41004498 	.word	0x41004498
     668:	00000304 	.word	0x00000304
     66c:	41004494 	.word	0x41004494

00000670 <adc_transfer_complete_callback>:

// Called by DMA at the end of SPI frame, load results into buffer
void adc_transfer_complete_callback(struct tc_module* module) {
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
     672:	4c1b      	ldr	r4, [pc, #108]	; (6e0 <adc_transfer_complete_callback+0x70>)
	adc_cs_pin_release(1);
     674:	4b1b      	ldr	r3, [pc, #108]	; (6e4 <adc_transfer_complete_callback+0x74>)
void adc_transfer_complete_callback(struct tc_module* module) {
     676:	447c      	add	r4, pc
	adc_cs_pin_release(1);
     678:	58e3      	ldr	r3, [r4, r3]
void adc_transfer_complete_callback(struct tc_module* module) {
     67a:	b085      	sub	sp, #20
	adc_cs_pin_release(1);
     67c:	2001      	movs	r0, #1
     67e:	9301      	str	r3, [sp, #4]
     680:	4798      	blx	r3
     682:	2300      	movs	r3, #0
     684:	0018      	movs	r0, r3

	int32_t s1=0;
	int32_t s2=0;
	int32_t s3=0;
	for (int i=0; i<3; i++) {
     686:	001a      	movs	r2, r3
	int32_t s3=0;
     688:	001d      	movs	r5, r3
		s3 |= rx_buffer[i+0] << ((3-i-1) * 8);
     68a:	4917      	ldr	r1, [pc, #92]	; (6e8 <adc_transfer_complete_callback+0x78>)
     68c:	5866      	ldr	r6, [r4, r1]
     68e:	00d1      	lsls	r1, r2, #3
     690:	5cb7      	ldrb	r7, [r6, r2]
     692:	4249      	negs	r1, r1
     694:	3110      	adds	r1, #16
     696:	408f      	lsls	r7, r1
     698:	433d      	orrs	r5, r7
     69a:	1cd7      	adds	r7, r2, #3
		s1 |= rx_buffer[i+3] << ((3-i-1) * 8);
     69c:	5df7      	ldrb	r7, [r6, r7]
     69e:	408f      	lsls	r7, r1
     6a0:	4338      	orrs	r0, r7
     6a2:	1d97      	adds	r7, r2, #6
		s2 |= rx_buffer[i+6] << ((3-i-1) * 8);
     6a4:	5df7      	ldrb	r7, [r6, r7]
	for (int i=0; i<3; i++) {
     6a6:	3201      	adds	r2, #1
		s2 |= rx_buffer[i+6] << ((3-i-1) * 8);
     6a8:	408f      	lsls	r7, r1
     6aa:	433b      	orrs	r3, r7
	for (int i=0; i<3; i++) {
     6ac:	2a03      	cmp	r2, #3
     6ae:	d1ee      	bne.n	68e <adc_transfer_complete_callback+0x1e>
     6b0:	9002      	str	r0, [sp, #8]
     6b2:	9303      	str	r3, [sp, #12]
	}
	if (s1 != 0 && s2 != 0 && !(s3 & (4<<8))) {
     6b4:	2800      	cmp	r0, #0
     6b6:	d010      	beq.n	6da <adc_transfer_complete_callback+0x6a>
     6b8:	2b00      	cmp	r3, #0
     6ba:	d00e      	beq.n	6da <adc_transfer_complete_callback+0x6a>
     6bc:	056b      	lsls	r3, r5, #21
     6be:	d40c      	bmi.n	6da <adc_transfer_complete_callback+0x6a>
		adc_rangeConvert(&s1, &s2);
     6c0:	4b0a      	ldr	r3, [pc, #40]	; (6ec <adc_transfer_complete_callback+0x7c>)
     6c2:	a903      	add	r1, sp, #12
     6c4:	58e3      	ldr	r3, [r4, r3]
     6c6:	a802      	add	r0, sp, #8
     6c8:	9301      	str	r3, [sp, #4]
     6ca:	4798      	blx	r3
		adc_fifo_storeSample(s1, s2, s3);
     6cc:	4b08      	ldr	r3, [pc, #32]	; (6f0 <adc_transfer_complete_callback+0x80>)
     6ce:	002a      	movs	r2, r5
     6d0:	58e3      	ldr	r3, [r4, r3]
     6d2:	9903      	ldr	r1, [sp, #12]
     6d4:	9802      	ldr	r0, [sp, #8]
     6d6:	9301      	str	r3, [sp, #4]
     6d8:	4798      	blx	r3
	}
}
     6da:	b005      	add	sp, #20
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	0000d472 	.word	0x0000d472
     6e4:	000001b0 	.word	0x000001b0
     6e8:	0000016c 	.word	0x0000016c
     6ec:	0000028c 	.word	0x0000028c
     6f0:	000002e8 	.word	0x000002e8

000006f4 <adc_spi_config>:
int adc_spi_config(int baud) {
     6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     6f8:	ae02      	add	r6, sp, #8
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     6fa:	0033      	movs	r3, r6
	config->data_order       = SPI_DATA_ORDER_MSB;
     6fc:	2100      	movs	r1, #0
	config->mode             = SPI_MODE_MASTER;
     6fe:	2401      	movs	r4, #1
	config->generator_source = GCLK_GENERATOR_0;
     700:	3305      	adds	r3, #5
     702:	4d20      	ldr	r5, [pc, #128]	; (784 <adc_spi_config+0x90>)
     704:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     706:	4b20      	ldr	r3, [pc, #128]	; (788 <adc_spi_config+0x94>)
     708:	447d      	add	r5, pc
	config->mode             = SPI_MODE_MASTER;
     70a:	7034      	strb	r4, [r6, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     70c:	7431      	strb	r1, [r6, #16]
	config->run_in_standby   = false;
     70e:	7471      	strb	r1, [r6, #17]
	config->receiver_enable  = true;
     710:	74b4      	strb	r4, [r6, #18]
	config->select_slave_low_detect_enable= true;
     712:	74f4      	strb	r4, [r6, #19]
	config->data_order       = SPI_DATA_ORDER_MSB;
     714:	9103      	str	r1, [sp, #12]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     716:	58eb      	ldr	r3, [r5, r3]
     718:	0007      	movs	r7, r0
     71a:	220c      	movs	r2, #12
     71c:	a808      	add	r0, sp, #32
     71e:	9300      	str	r3, [sp, #0]
     720:	4798      	blx	r3
	adc_cfg.transfer_mode = SPI_TRANSFER_MODE_1;
     722:	2380      	movs	r3, #128	; 0x80
     724:	055b      	lsls	r3, r3, #21
     726:	60b3      	str	r3, [r6, #8]
	adc_cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
     728:	2380      	movs	r3, #128	; 0x80
     72a:	029b      	lsls	r3, r3, #10
     72c:	60f3      	str	r3, [r6, #12]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
     72e:	4b17      	ldr	r3, [pc, #92]	; (78c <adc_spi_config+0x98>)
	adc_cfg.master_slave_select_enable = 1;
     730:	7534      	strb	r4, [r6, #20]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
     732:	62b3      	str	r3, [r6, #40]	; 0x28
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
     734:	4b16      	ldr	r3, [pc, #88]	; (790 <adc_spi_config+0x9c>)
	adc_cfg.mode_specific.master.baudrate = baud;
     736:	61b7      	str	r7, [r6, #24]
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
     738:	62f3      	str	r3, [r6, #44]	; 0x2c
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
     73a:	4b16      	ldr	r3, [pc, #88]	; (794 <adc_spi_config+0xa0>)
	r |= spi_init(&adc_spi, SERCOM5, &adc_cfg);
     73c:	0032      	movs	r2, r6
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
     73e:	6333      	str	r3, [r6, #48]	; 0x30
	adc_cfg.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// MOSI
     740:	4b15      	ldr	r3, [pc, #84]	; (798 <adc_spi_config+0xa4>)
	r |= spi_init(&adc_spi, SERCOM5, &adc_cfg);
     742:	4916      	ldr	r1, [pc, #88]	; (79c <adc_spi_config+0xa8>)
	adc_cfg.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// MOSI
     744:	6373      	str	r3, [r6, #52]	; 0x34
	r |= spi_init(&adc_spi, SERCOM5, &adc_cfg);
     746:	4b16      	ldr	r3, [pc, #88]	; (7a0 <adc_spi_config+0xac>)
     748:	58ef      	ldr	r7, [r5, r3]
     74a:	4b16      	ldr	r3, [pc, #88]	; (7a4 <adc_spi_config+0xb0>)
     74c:	0038      	movs	r0, r7
     74e:	58eb      	ldr	r3, [r5, r3]
     750:	9300      	str	r3, [sp, #0]
     752:	4798      	blx	r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     754:	4b14      	ldr	r3, [pc, #80]	; (7a8 <adc_spi_config+0xb4>)
     756:	9000      	str	r0, [sp, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     758:	683e      	ldr	r6, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     75a:	58eb      	ldr	r3, [r5, r3]
     75c:	0030      	movs	r0, r6
     75e:	9301      	str	r3, [sp, #4]
     760:	4798      	blx	r3
     762:	231f      	movs	r3, #31
     764:	4018      	ands	r0, r3
     766:	4084      	lsls	r4, r0
     768:	4b10      	ldr	r3, [pc, #64]	; (7ac <adc_spi_config+0xb8>)
	SercomSpi *const spi_module = &(module->hw->SPI);
     76a:	683a      	ldr	r2, [r7, #0]
     76c:	601c      	str	r4, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     76e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     770:	2b00      	cmp	r3, #0
     772:	d1fc      	bne.n	76e <adc_spi_config+0x7a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     774:	6832      	ldr	r2, [r6, #0]
}
     776:	9800      	ldr	r0, [sp, #0]
     778:	3302      	adds	r3, #2
     77a:	4313      	orrs	r3, r2
     77c:	6033      	str	r3, [r6, #0]
     77e:	b011      	add	sp, #68	; 0x44
     780:	bdf0      	pop	{r4, r5, r6, r7, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	0000d3e0 	.word	0x0000d3e0
     788:	0000023c 	.word	0x0000023c
     78c:	00220003 	.word	0x00220003
     790:	00230003 	.word	0x00230003
     794:	00360003 	.word	0x00360003
     798:	00370003 	.word	0x00370003
     79c:	42001c00 	.word	0x42001c00
     7a0:	0000025c 	.word	0x0000025c
     7a4:	000000e0 	.word	0x000000e0
     7a8:	000000d0 	.word	0x000000d0
     7ac:	e000e100 	.word	0xe000e100

000007b0 <adc_timer_config>:
	tcfg.clock_source = GCLK_GENERATOR_4;
     7b0:	2304      	movs	r3, #4
int adc_timer_config(int pulses, int pretrigger) {
     7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b4:	b097      	sub	sp, #92	; 0x5c
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     7b6:	ac09      	add	r4, sp, #36	; 0x24
	tcfg.clock_source = GCLK_GENERATOR_4;
     7b8:	7023      	strb	r3, [r4, #0]
	tcfg.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
     7ba:	331c      	adds	r3, #28
     7bc:	71a3      	strb	r3, [r4, #6]
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     7be:	466b      	mov	r3, sp
int adc_timer_config(int pulses, int pretrigger) {
     7c0:	9003      	str	r0, [sp, #12]
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     7c2:	899b      	ldrh	r3, [r3, #12]
     7c4:	2500      	movs	r5, #0
     7c6:	9302      	str	r3, [sp, #8]
     7c8:	466b      	mov	r3, sp
     7ca:	891b      	ldrh	r3, [r3, #8]
int adc_timer_config(int pulses, int pretrigger) {
     7cc:	4e43      	ldr	r6, [pc, #268]	; (8dc <adc_timer_config+0x12c>)
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     7ce:	8563      	strh	r3, [r4, #42]	; 0x2a
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses - pretrigger;
     7d0:	9b02      	ldr	r3, [sp, #8]
int adc_timer_config(int pulses, int pretrigger) {
     7d2:	447e      	add	r6, pc
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses - pretrigger;
     7d4:	1a59      	subs	r1, r3, r1
	r |= tc_init(&clock_tc, TC3, &tcfg);
     7d6:	4b42      	ldr	r3, [pc, #264]	; (8e0 <adc_timer_config+0x130>)
     7d8:	70a5      	strb	r5, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     7da:	80a5      	strh	r5, [r4, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     7dc:	8125      	strh	r5, [r4, #8]
	config->run_in_standby             = false;
     7de:	7065      	strb	r5, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7e0:	72a5      	strb	r5, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7e2:	72e5      	strb	r5, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7e4:	7325      	strb	r5, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7e6:	73a5      	strb	r5, [r4, #14]
	config->oneshot                    = false;
     7e8:	7365      	strb	r5, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     7ea:	7425      	strb	r5, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     7ec:	6165      	str	r5, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     7ee:	61a5      	str	r5, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     7f0:	7725      	strb	r5, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     7f2:	6225      	str	r5, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     7f4:	6265      	str	r5, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     7f6:	8525      	strh	r5, [r4, #40]	; 0x28
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses - pretrigger;
     7f8:	85a1      	strh	r1, [r4, #44]	; 0x2c
	r |= tc_init(&clock_tc, TC3, &tcfg);
     7fa:	58f3      	ldr	r3, [r6, r3]
     7fc:	0022      	movs	r2, r4
     7fe:	9301      	str	r3, [sp, #4]
     800:	0018      	movs	r0, r3
     802:	4b38      	ldr	r3, [pc, #224]	; (8e4 <adc_timer_config+0x134>)
     804:	4938      	ldr	r1, [pc, #224]	; (8e8 <adc_timer_config+0x138>)
     806:	58f3      	ldr	r3, [r6, r3]
     808:	9304      	str	r3, [sp, #16]
     80a:	4798      	blx	r3
	r |= tc_register_callback(&clock_tc, adc_transfer_start_callback, TC_CALLBACK_CC_CHANNEL1);
     80c:	4b37      	ldr	r3, [pc, #220]	; (8ec <adc_timer_config+0x13c>)
     80e:	2203      	movs	r2, #3
     810:	58f3      	ldr	r3, [r6, r3]
	r |= tc_init(&clock_tc, TC3, &tcfg);
     812:	0007      	movs	r7, r0
	r |= tc_register_callback(&clock_tc, adc_transfer_start_callback, TC_CALLBACK_CC_CHANNEL1);
     814:	9305      	str	r3, [sp, #20]
     816:	0019      	movs	r1, r3
     818:	4b35      	ldr	r3, [pc, #212]	; (8f0 <adc_timer_config+0x140>)
     81a:	9801      	ldr	r0, [sp, #4]
     81c:	58f3      	ldr	r3, [r6, r3]
     81e:	9305      	str	r3, [sp, #20]
     820:	4798      	blx	r3
     822:	4307      	orrs	r7, r0
     824:	b2fb      	uxtb	r3, r7
	tc_enable_callback(&clock_tc, TC_CALLBACK_CC_CHANNEL1);
     826:	4f33      	ldr	r7, [pc, #204]	; (8f4 <adc_timer_config+0x144>)
     828:	9801      	ldr	r0, [sp, #4]
     82a:	447f      	add	r7, pc
     82c:	9307      	str	r3, [sp, #28]
     82e:	47b8      	blx	r7
	r |= system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
     830:	4b31      	ldr	r3, [pc, #196]	; (8f8 <adc_timer_config+0x148>)
     832:	0029      	movs	r1, r5
     834:	58f3      	ldr	r3, [r6, r3]
     836:	2012      	movs	r0, #18
     838:	9306      	str	r3, [sp, #24]
     83a:	4798      	blx	r3
     83c:	9b07      	ldr	r3, [sp, #28]
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses/2;
     83e:	9a03      	ldr	r2, [sp, #12]
     840:	4318      	orrs	r0, r3
     842:	b2c3      	uxtb	r3, r0
     844:	9307      	str	r3, [sp, #28]
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     846:	466b      	mov	r3, sp
     848:	891b      	ldrh	r3, [r3, #8]
	r |= tc_init(&post_tc, TC4, &tcfg);
     84a:	492c      	ldr	r1, [pc, #176]	; (8fc <adc_timer_config+0x14c>)
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     84c:	8563      	strh	r3, [r4, #42]	; 0x2a
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses/2;
     84e:	9b03      	ldr	r3, [sp, #12]
     850:	0fdb      	lsrs	r3, r3, #31
     852:	189b      	adds	r3, r3, r2
     854:	105b      	asrs	r3, r3, #1
     856:	85a3      	strh	r3, [r4, #44]	; 0x2c
	r |= tc_init(&post_tc, TC4, &tcfg);
     858:	4b29      	ldr	r3, [pc, #164]	; (900 <adc_timer_config+0x150>)
     85a:	0022      	movs	r2, r4
     85c:	58f3      	ldr	r3, [r6, r3]
     85e:	9302      	str	r3, [sp, #8]
     860:	0018      	movs	r0, r3
     862:	9b04      	ldr	r3, [sp, #16]
     864:	4798      	blx	r3
     866:	9b07      	ldr	r3, [sp, #28]
	r |= tc_register_callback(&post_tc, adc_transfer_complete_callback, TC_CALLBACK_CC_CHANNEL1);
     868:	2203      	movs	r2, #3
     86a:	4318      	orrs	r0, r3
     86c:	4b25      	ldr	r3, [pc, #148]	; (904 <adc_timer_config+0x154>)
     86e:	b2c4      	uxtb	r4, r0
     870:	58f3      	ldr	r3, [r6, r3]
     872:	9802      	ldr	r0, [sp, #8]
     874:	0019      	movs	r1, r3
     876:	9303      	str	r3, [sp, #12]
     878:	9b05      	ldr	r3, [sp, #20]
     87a:	4798      	blx	r3
     87c:	4304      	orrs	r4, r0
	tc_enable_callback(&post_tc, TC_CALLBACK_CC_CHANNEL1);
     87e:	9802      	ldr	r0, [sp, #8]
     880:	47b8      	blx	r7
	r |= system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC4, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
     882:	0029      	movs	r1, r5
     884:	9b06      	ldr	r3, [sp, #24]
     886:	2013      	movs	r0, #19
     888:	4798      	blx	r3
     88a:	9b01      	ldr	r3, [sp, #4]
	events_get_config_defaults(&ecfg);
     88c:	af08      	add	r7, sp, #32
     88e:	681a      	ldr	r2, [r3, #0]
		if (events->generate_event_on_compare_channel[i] == true) {
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
     890:	2380      	movs	r3, #128	; 0x80
     892:	8951      	ldrh	r1, [r2, #10]
     894:	015b      	lsls	r3, r3, #5
     896:	430b      	orrs	r3, r1
     898:	8153      	strh	r3, [r2, #10]
     89a:	4b1b      	ldr	r3, [pc, #108]	; (908 <adc_timer_config+0x158>)
     89c:	b2e4      	uxtb	r4, r4
     89e:	58f3      	ldr	r3, [r6, r3]
     8a0:	4304      	orrs	r4, r0
     8a2:	0038      	movs	r0, r7
     8a4:	9301      	str	r3, [sp, #4]
     8a6:	4798      	blx	r3
	ecfg.generator = EVSYS_ID_GEN_TC3_MCX_0;
     8a8:	2334      	movs	r3, #52	; 0x34
     8aa:	70bb      	strb	r3, [r7, #2]
	ecfg.path = EVENTS_PATH_RESYNCHRONIZED;
     8ac:	3b33      	subs	r3, #51	; 0x33
     8ae:	707b      	strb	r3, [r7, #1]
	r |= events_allocate(&events, &ecfg);
     8b0:	4b16      	ldr	r3, [pc, #88]	; (90c <adc_timer_config+0x15c>)
     8b2:	0039      	movs	r1, r7
     8b4:	58f3      	ldr	r3, [r6, r3]
     8b6:	b2e4      	uxtb	r4, r4
     8b8:	9301      	str	r3, [sp, #4]
     8ba:	0018      	movs	r0, r3
     8bc:	4b14      	ldr	r3, [pc, #80]	; (910 <adc_timer_config+0x160>)
     8be:	58f3      	ldr	r3, [r6, r3]
     8c0:	9302      	str	r3, [sp, #8]
     8c2:	4798      	blx	r3
	r |= events_attach_user(&events, EVSYS_ID_USER_DMAC_CH_0);
     8c4:	4b13      	ldr	r3, [pc, #76]	; (914 <adc_timer_config+0x164>)
     8c6:	4304      	orrs	r4, r0
     8c8:	58f3      	ldr	r3, [r6, r3]
     8ca:	9801      	ldr	r0, [sp, #4]
     8cc:	0029      	movs	r1, r5
     8ce:	9301      	str	r3, [sp, #4]
     8d0:	4798      	blx	r3
     8d2:	b2e4      	uxtb	r4, r4
     8d4:	4320      	orrs	r0, r4
     8d6:	b2c0      	uxtb	r0, r0
}
     8d8:	b017      	add	sp, #92	; 0x5c
     8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8dc:	0000d316 	.word	0x0000d316
     8e0:	00000094 	.word	0x00000094
     8e4:	00000344 	.word	0x00000344
     8e8:	42002c00 	.word	0x42002c00
     8ec:	0000005c 	.word	0x0000005c
     8f0:	00000184 	.word	0x00000184
     8f4:	fffff9ff 	.word	0xfffff9ff
     8f8:	00000220 	.word	0x00000220
     8fc:	42003000 	.word	0x42003000
     900:	00000050 	.word	0x00000050
     904:	00000118 	.word	0x00000118
     908:	000002a0 	.word	0x000002a0
     90c:	000002ac 	.word	0x000002ac
     910:	00000088 	.word	0x00000088
     914:	00000260 	.word	0x00000260

00000918 <adc_dma_config>:
int adc_dma_config() {
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	4c41      	ldr	r4, [pc, #260]	; (a20 <adc_dma_config+0x108>)
	dma_get_config_defaults(&tx_spi_config);
     91c:	4b41      	ldr	r3, [pc, #260]	; (a24 <adc_dma_config+0x10c>)
int adc_dma_config() {
     91e:	447c      	add	r4, pc
	dma_get_config_defaults(&tx_spi_config);
     920:	58e3      	ldr	r3, [r4, r3]
int adc_dma_config() {
     922:	b08b      	sub	sp, #44	; 0x2c
	dma_get_config_defaults(&tx_spi_config);
     924:	9301      	str	r3, [sp, #4]
     926:	0018      	movs	r0, r3
     928:	4b3f      	ldr	r3, [pc, #252]	; (a28 <adc_dma_config+0x110>)
	rx_spi_config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
     92a:	2700      	movs	r7, #0
	dma_get_config_defaults(&tx_spi_config);
     92c:	58e5      	ldr	r5, [r4, r3]
     92e:	47a8      	blx	r5
	dma_get_config_defaults(&rx_spi_config);
     930:	4b3e      	ldr	r3, [pc, #248]	; (a2c <adc_dma_config+0x114>)
     932:	58e3      	ldr	r3, [r4, r3]
     934:	0018      	movs	r0, r3
     936:	9302      	str	r3, [sp, #8]
     938:	47a8      	blx	r5
	tx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_TX;
     93a:	230c      	movs	r3, #12
     93c:	9a01      	ldr	r2, [sp, #4]
	tx_spi_config.priority = DMA_PRIORITY_LEVEL_3;
     93e:	9901      	ldr	r1, [sp, #4]
	tx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_TX;
     940:	7053      	strb	r3, [r2, #1]
	tx_spi_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     942:	2202      	movs	r2, #2
     944:	9b01      	ldr	r3, [sp, #4]
	rx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
     946:	9802      	ldr	r0, [sp, #8]
	tx_spi_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     948:	709a      	strb	r2, [r3, #2]
	tx_spi_config.priority = DMA_PRIORITY_LEVEL_3;
     94a:	2303      	movs	r3, #3
     94c:	700b      	strb	r3, [r1, #0]
	tx_spi_config.event_config.input_action = DMA_EVENT_INPUT_CBLOCK;
     94e:	70cb      	strb	r3, [r1, #3]
	rx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
     950:	210b      	movs	r1, #11
	rx_spi_config.priority = DMA_PRIORITY_LEVEL_3;
     952:	7003      	strb	r3, [r0, #0]
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
     954:	4b36      	ldr	r3, [pc, #216]	; (a30 <adc_dma_config+0x118>)
	rx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
     956:	7041      	strb	r1, [r0, #1]
	rx_spi_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     958:	7082      	strb	r2, [r0, #2]
	rx_spi_config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
     95a:	70c7      	strb	r7, [r0, #3]
     95c:	58e6      	ldr	r6, [r4, r3]
     95e:	2301      	movs	r3, #1
     960:	4a34      	ldr	r2, [pc, #208]	; (a34 <adc_dma_config+0x11c>)
     962:	7033      	strb	r3, [r6, #0]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
	/* Enable source increment */
	config->src_increment_enable = true;
     964:	7133      	strb	r3, [r6, #4]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
     966:	7077      	strb	r7, [r6, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
     968:	70b7      	strb	r7, [r6, #2]
	config->beat_size = DMA_BEAT_SIZE_BYTE;
     96a:	70f7      	strb	r7, [r6, #3]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
     96c:	71b7      	strb	r7, [r6, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
     96e:	71f7      	strb	r7, [r6, #7]
	config->descriptor_valid = true;
     970:	58a5      	ldr	r5, [r4, r2]
	tx_spi_desc_config.block_transfer_count = NUM_TRANSFER;
     972:	2209      	movs	r2, #9
     974:	702b      	strb	r3, [r5, #0]
	config->dst_increment_enable = true;
     976:	716b      	strb	r3, [r5, #5]
	tx_spi_desc_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
     978:	4b2f      	ldr	r3, [pc, #188]	; (a38 <adc_dma_config+0x120>)
	tx_spi_desc_config.block_transfer_count = NUM_TRANSFER;
     97a:	8132      	strh	r2, [r6, #8]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
     97c:	706f      	strb	r7, [r5, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
     97e:	70af      	strb	r7, [r5, #2]
	config->beat_size = DMA_BEAT_SIZE_BYTE;
     980:	70ef      	strb	r7, [r5, #3]
	config->step_selection = DMA_STEPSEL_DST;
     982:	71af      	strb	r7, [r5, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
     984:	71ef      	strb	r7, [r5, #7]
	tx_spi_desc_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
     986:	58e3      	ldr	r3, [r4, r3]
	tx_spi_desc_config.next_descriptor_address = (uint32_t)(&tx_spi_desc);
     988:	492c      	ldr	r1, [pc, #176]	; (a3c <adc_dma_config+0x124>)
	tx_spi_desc_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
     98a:	9305      	str	r3, [sp, #20]
     98c:	189b      	adds	r3, r3, r2
     98e:	60f3      	str	r3, [r6, #12]
	tx_spi_desc_config.destination_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
     990:	4b2b      	ldr	r3, [pc, #172]	; (a40 <adc_dma_config+0x128>)
     992:	6133      	str	r3, [r6, #16]
	tx_spi_desc_config.dst_increment_enable = 0;
     994:	7177      	strb	r7, [r6, #5]
	tx_spi_desc_config.next_descriptor_address = (uint32_t)(&tx_spi_desc);
     996:	5861      	ldr	r1, [r4, r1]
	rx_spi_desc_config.source_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
     998:	60eb      	str	r3, [r5, #12]
	rx_spi_desc_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
     99a:	4b2a      	ldr	r3, [pc, #168]	; (a44 <adc_dma_config+0x12c>)
	rx_spi_desc_config.block_transfer_count = NUM_TRANSFER;
     99c:	812a      	strh	r2, [r5, #8]
	tx_spi_desc_config.next_descriptor_address = (uint32_t)(&tx_spi_desc);
     99e:	6171      	str	r1, [r6, #20]
     9a0:	9103      	str	r1, [sp, #12]
	rx_spi_desc_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
     9a2:	58e3      	ldr	r3, [r4, r3]
	rx_spi_desc_config.src_increment_enable = 0;
     9a4:	712f      	strb	r7, [r5, #4]
	rx_spi_desc_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
     9a6:	9306      	str	r3, [sp, #24]
     9a8:	189b      	adds	r3, r3, r2
     9aa:	612b      	str	r3, [r5, #16]
	rx_spi_desc_config.next_descriptor_address = (uint32_t)(&rx_spi_desc);
     9ac:	4b26      	ldr	r3, [pc, #152]	; (a48 <adc_dma_config+0x130>)
	r |= dma_allocate(&tx_spi_dma, &tx_spi_config);
     9ae:	9901      	ldr	r1, [sp, #4]
	rx_spi_desc_config.next_descriptor_address = (uint32_t)(&rx_spi_desc);
     9b0:	58e3      	ldr	r3, [r4, r3]
     9b2:	616b      	str	r3, [r5, #20]
     9b4:	9304      	str	r3, [sp, #16]
	r |= dma_allocate(&tx_spi_dma, &tx_spi_config);
     9b6:	4b25      	ldr	r3, [pc, #148]	; (a4c <adc_dma_config+0x134>)
     9b8:	58e3      	ldr	r3, [r4, r3]
     9ba:	9307      	str	r3, [sp, #28]
     9bc:	0018      	movs	r0, r3
     9be:	4b24      	ldr	r3, [pc, #144]	; (a50 <adc_dma_config+0x138>)
     9c0:	58e3      	ldr	r3, [r4, r3]
     9c2:	9301      	str	r3, [sp, #4]
     9c4:	4798      	blx	r3
	r |= dma_allocate(&rx_spi_dma, &rx_spi_config);
     9c6:	4b23      	ldr	r3, [pc, #140]	; (a54 <adc_dma_config+0x13c>)
	r |= dma_allocate(&tx_spi_dma, &tx_spi_config);
     9c8:	9009      	str	r0, [sp, #36]	; 0x24
	r |= dma_allocate(&rx_spi_dma, &rx_spi_config);
     9ca:	58e3      	ldr	r3, [r4, r3]
     9cc:	9902      	ldr	r1, [sp, #8]
     9ce:	9308      	str	r3, [sp, #32]
     9d0:	0018      	movs	r0, r3
     9d2:	9b01      	ldr	r3, [sp, #4]
     9d4:	4798      	blx	r3
     9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	dma_descriptor_create(&tx_spi_desc, &tx_spi_desc_config);
     9d8:	0031      	movs	r1, r6
     9da:	4303      	orrs	r3, r0
     9dc:	b2db      	uxtb	r3, r3
     9de:	9301      	str	r3, [sp, #4]
     9e0:	4b1d      	ldr	r3, [pc, #116]	; (a58 <adc_dma_config+0x140>)
     9e2:	9803      	ldr	r0, [sp, #12]
     9e4:	58e6      	ldr	r6, [r4, r3]
     9e6:	47b0      	blx	r6
	dma_descriptor_create(&rx_spi_desc, &rx_spi_desc_config);
     9e8:	0029      	movs	r1, r5
     9ea:	9804      	ldr	r0, [sp, #16]
     9ec:	47b0      	blx	r6
	r |= dma_add_descriptor(&tx_spi_dma, &tx_spi_desc);
     9ee:	4b1b      	ldr	r3, [pc, #108]	; (a5c <adc_dma_config+0x144>)
     9f0:	9903      	ldr	r1, [sp, #12]
     9f2:	58e5      	ldr	r5, [r4, r3]
     9f4:	9807      	ldr	r0, [sp, #28]
     9f6:	47a8      	blx	r5
     9f8:	9b01      	ldr	r3, [sp, #4]
	r |= dma_add_descriptor(&rx_spi_dma, &rx_spi_desc);
     9fa:	9904      	ldr	r1, [sp, #16]
     9fc:	4303      	orrs	r3, r0
     9fe:	9808      	ldr	r0, [sp, #32]
     a00:	b2dc      	uxtb	r4, r3
     a02:	47a8      	blx	r5
     a04:	0003      	movs	r3, r0
     a06:	4323      	orrs	r3, r4
     a08:	b2d8      	uxtb	r0, r3
		rx_buffer[i] = 0;
     a0a:	003a      	movs	r2, r7
	for(int i=0; i<sizeof(rx_buffer)/sizeof(rx_buffer[0]); i++) {
     a0c:	003b      	movs	r3, r7
		rx_buffer[i] = 0;
     a0e:	9906      	ldr	r1, [sp, #24]
     a10:	54ca      	strb	r2, [r1, r3]
		tx_buffer[i] = 0;
     a12:	9905      	ldr	r1, [sp, #20]
     a14:	54ca      	strb	r2, [r1, r3]
	for(int i=0; i<sizeof(rx_buffer)/sizeof(rx_buffer[0]); i++) {
     a16:	3301      	adds	r3, #1
     a18:	2b09      	cmp	r3, #9
     a1a:	d1f8      	bne.n	a0e <adc_dma_config+0xf6>
}
     a1c:	b00b      	add	sp, #44	; 0x2c
     a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a20:	0000d1ca 	.word	0x0000d1ca
     a24:	000002a4 	.word	0x000002a4
     a28:	000002f8 	.word	0x000002f8
     a2c:	00000038 	.word	0x00000038
     a30:	00000214 	.word	0x00000214
     a34:	00000174 	.word	0x00000174
     a38:	00000188 	.word	0x00000188
     a3c:	00000044 	.word	0x00000044
     a40:	42001c28 	.word	0x42001c28
     a44:	0000016c 	.word	0x0000016c
     a48:	0000009c 	.word	0x0000009c
     a4c:	00000210 	.word	0x00000210
     a50:	00000340 	.word	0x00000340
     a54:	00000314 	.word	0x00000314
     a58:	000000b8 	.word	0x000000b8
     a5c:	00000154 	.word	0x00000154

00000a60 <adc_synchronous_start>:
int adc_synchronous_start() {
     a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a62:	4c18      	ldr	r4, [pc, #96]	; (ac4 <adc_synchronous_start+0x64>)
	adc_cs_pin_release(1);
     a64:	4b18      	ldr	r3, [pc, #96]	; (ac8 <adc_synchronous_start+0x68>)
int adc_synchronous_start() {
     a66:	447c      	add	r4, pc
	adc_cs_pin_release(1);
     a68:	58e3      	ldr	r3, [r4, r3]
     a6a:	2001      	movs	r0, #1
     a6c:	9301      	str	r3, [sp, #4]
     a6e:	4798      	blx	r3
	adc_gclk_output_start();
     a70:	4b16      	ldr	r3, [pc, #88]	; (acc <adc_synchronous_start+0x6c>)
     a72:	58e3      	ldr	r3, [r4, r3]
     a74:	9301      	str	r3, [sp, #4]
     a76:	4798      	blx	r3
	r |= dma_start_transfer_job(&tx_spi_dma);
     a78:	4b15      	ldr	r3, [pc, #84]	; (ad0 <adc_synchronous_start+0x70>)
     a7a:	58e3      	ldr	r3, [r4, r3]
     a7c:	9301      	str	r3, [sp, #4]
     a7e:	0018      	movs	r0, r3
     a80:	4b14      	ldr	r3, [pc, #80]	; (ad4 <adc_synchronous_start+0x74>)
     a82:	58e6      	ldr	r6, [r4, r3]
     a84:	47b0      	blx	r6
	r |= dma_start_transfer_job(&rx_spi_dma);
     a86:	4b14      	ldr	r3, [pc, #80]	; (ad8 <adc_synchronous_start+0x78>)
	r |= dma_start_transfer_job(&tx_spi_dma);
     a88:	0005      	movs	r5, r0
	r |= dma_start_transfer_job(&rx_spi_dma);
     a8a:	58e3      	ldr	r3, [r4, r3]
     a8c:	0018      	movs	r0, r3
     a8e:	9301      	str	r3, [sp, #4]
     a90:	47b0      	blx	r6
     a92:	4b12      	ldr	r3, [pc, #72]	; (adc <adc_synchronous_start+0x7c>)
     a94:	4328      	orrs	r0, r5
     a96:	58e3      	ldr	r3, [r4, r3]
     a98:	b2c0      	uxtb	r0, r0
     a9a:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     a9c:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     a9e:	b252      	sxtb	r2, r2
     aa0:	2a00      	cmp	r2, #0
     aa2:	dbfb      	blt.n	a9c <adc_synchronous_start+0x3c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     aa4:	2202      	movs	r2, #2
     aa6:	8819      	ldrh	r1, [r3, #0]
     aa8:	430a      	orrs	r2, r1
     aaa:	801a      	strh	r2, [r3, #0]
     aac:	4b0c      	ldr	r3, [pc, #48]	; (ae0 <adc_synchronous_start+0x80>)
     aae:	58e3      	ldr	r3, [r4, r3]
     ab0:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ab2:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     ab4:	b252      	sxtb	r2, r2
     ab6:	2a00      	cmp	r2, #0
     ab8:	dbfb      	blt.n	ab2 <adc_synchronous_start+0x52>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     aba:	2202      	movs	r2, #2
     abc:	8819      	ldrh	r1, [r3, #0]
     abe:	430a      	orrs	r2, r1
     ac0:	801a      	strh	r2, [r3, #0]
}
     ac2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     ac4:	0000d082 	.word	0x0000d082
     ac8:	000001b0 	.word	0x000001b0
     acc:	00000104 	.word	0x00000104
     ad0:	00000210 	.word	0x00000210
     ad4:	000000ac 	.word	0x000000ac
     ad8:	00000314 	.word	0x00000314
     adc:	00000094 	.word	0x00000094
     ae0:	00000050 	.word	0x00000050

00000ae4 <adc_peripheralConfig>:

// Configure the hardware peripherals used by ADC sampling process
int adc_peripheralConfig(int gclk_hz, int pretrigger) {
     ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     ae6:	0006      	movs	r6, r0
     ae8:	4c14      	ldr	r4, [pc, #80]	; (b3c <adc_peripheralConfig+0x58>)
	
	int r = 0;
	r |= adc_spi_config(gclk_hz/2);
     aea:	4b15      	ldr	r3, [pc, #84]	; (b40 <adc_peripheralConfig+0x5c>)
int adc_peripheralConfig(int gclk_hz, int pretrigger) {
     aec:	447c      	add	r4, pc
	r |= adc_spi_config(gclk_hz/2);
     aee:	0fc0      	lsrs	r0, r0, #31
     af0:	58e3      	ldr	r3, [r4, r3]
     af2:	1980      	adds	r0, r0, r6
     af4:	1040      	asrs	r0, r0, #1
int adc_peripheralConfig(int gclk_hz, int pretrigger) {
     af6:	000f      	movs	r7, r1
	r |= adc_spi_config(gclk_hz/2);
     af8:	9301      	str	r3, [sp, #4]
     afa:	4798      	blx	r3
	adc_gclk_config(gclk_hz);
     afc:	4b11      	ldr	r3, [pc, #68]	; (b44 <adc_peripheralConfig+0x60>)
	r |= adc_spi_config(gclk_hz/2);
     afe:	0005      	movs	r5, r0
	adc_gclk_config(gclk_hz);
     b00:	58e3      	ldr	r3, [r4, r3]
     b02:	0030      	movs	r0, r6
     b04:	9301      	str	r3, [sp, #4]
     b06:	4798      	blx	r3
	r |= adc_timer_config(gclk_hz/1000-1, pretrigger);
     b08:	21fa      	movs	r1, #250	; 0xfa
     b0a:	4b0f      	ldr	r3, [pc, #60]	; (b48 <adc_peripheralConfig+0x64>)
     b0c:	0030      	movs	r0, r6
     b0e:	58e3      	ldr	r3, [r4, r3]
     b10:	0089      	lsls	r1, r1, #2
     b12:	9301      	str	r3, [sp, #4]
     b14:	4798      	blx	r3
     b16:	4b0d      	ldr	r3, [pc, #52]	; (b4c <adc_peripheralConfig+0x68>)
     b18:	0039      	movs	r1, r7
     b1a:	58e3      	ldr	r3, [r4, r3]
     b1c:	3801      	subs	r0, #1
     b1e:	9301      	str	r3, [sp, #4]
     b20:	4798      	blx	r3
	r |= adc_dma_config();
     b22:	4b0b      	ldr	r3, [pc, #44]	; (b50 <adc_peripheralConfig+0x6c>)
	r |= adc_timer_config(gclk_hz/1000-1, pretrigger);
     b24:	4305      	orrs	r5, r0
	r |= adc_dma_config();
     b26:	58e3      	ldr	r3, [r4, r3]
     b28:	9301      	str	r3, [sp, #4]
     b2a:	4798      	blx	r3
	adc_cs_pin_takeover(1);
     b2c:	4b09      	ldr	r3, [pc, #36]	; (b54 <adc_peripheralConfig+0x70>)
	r |= adc_dma_config();
     b2e:	4305      	orrs	r5, r0
	adc_cs_pin_takeover(1);
     b30:	58e3      	ldr	r3, [r4, r3]
     b32:	2001      	movs	r0, #1
     b34:	9301      	str	r3, [sp, #4]
     b36:	4798      	blx	r3

	return r;
}
     b38:	0028      	movs	r0, r5
     b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     b3c:	0000cffc 	.word	0x0000cffc
     b40:	000002d8 	.word	0x000002d8
     b44:	00000010 	.word	0x00000010
     b48:	000001a8 	.word	0x000001a8
     b4c:	000000f4 	.word	0x000000f4
     b50:	00000070 	.word	0x00000070
     b54:	0000024c 	.word	0x0000024c

00000b58 <adc_spi_command_response>:

#include "adc_ranges.h"
#include "adc_helpers.h"

int adc_spi_command_response(uint16_t command) {
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	4c1e      	ldr	r4, [pc, #120]	; (bd4 <adc_spi_command_response+0x7c>)
	if (adc_started) return -1;
     b5c:	4b1e      	ldr	r3, [pc, #120]	; (bd8 <adc_spi_command_response+0x80>)
int adc_spi_command_response(uint16_t command) {
     b5e:	447c      	add	r4, pc
	if (adc_started) return -1;
     b60:	58e3      	ldr	r3, [r4, r3]
int adc_spi_command_response(uint16_t command) {
     b62:	b087      	sub	sp, #28
	if (adc_started) return -1;
     b64:	781b      	ldrb	r3, [r3, #0]
int adc_spi_command_response(uint16_t command) {
     b66:	0007      	movs	r7, r0
	if (adc_started) return -1;
     b68:	9300      	str	r3, [sp, #0]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d12f      	bne.n	bce <adc_spi_command_response+0x76>

	uint8_t tx[3] = {0};
     b6e:	0019      	movs	r1, r3
     b70:	4b1a      	ldr	r3, [pc, #104]	; (bdc <adc_spi_command_response+0x84>)
     b72:	ad04      	add	r5, sp, #16
     b74:	58e6      	ldr	r6, [r4, r3]
     b76:	2203      	movs	r2, #3
     b78:	0028      	movs	r0, r5
     b7a:	47b0      	blx	r6
	uint8_t rx[3] = {0};
     b7c:	ab05      	add	r3, sp, #20
     b7e:	2203      	movs	r2, #3
     b80:	9900      	ldr	r1, [sp, #0]
     b82:	0018      	movs	r0, r3
     b84:	9301      	str	r3, [sp, #4]
     b86:	47b0      	blx	r6
     b88:	2680      	movs	r6, #128	; 0x80
	tx[0] = command >> 8;
	tx[1] = command >> 0;
     b8a:	706f      	strb	r7, [r5, #1]
	tx[0] = command >> 8;
     b8c:	0a3b      	lsrs	r3, r7, #8
     b8e:	4f14      	ldr	r7, [pc, #80]	; (be0 <adc_spi_command_response+0x88>)
     b90:	702b      	strb	r3, [r5, #0]
     b92:	03f6      	lsls	r6, r6, #15
	tx[2] = 0;
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
	spi_write_buffer_wait(&adc_spi, tx, 3);
     b94:	4b13      	ldr	r3, [pc, #76]	; (be4 <adc_spi_command_response+0x8c>)
     b96:	603e      	str	r6, [r7, #0]
     b98:	58e3      	ldr	r3, [r4, r3]
     b9a:	0029      	movs	r1, r5
     b9c:	9302      	str	r3, [sp, #8]
     b9e:	0018      	movs	r0, r3
     ba0:	4b11      	ldr	r3, [pc, #68]	; (be8 <adc_spi_command_response+0x90>)
		port_base->OUTSET.reg = pin_mask;
     ba2:	4d12      	ldr	r5, [pc, #72]	; (bec <adc_spi_command_response+0x94>)
     ba4:	58e3      	ldr	r3, [r4, r3]
     ba6:	2203      	movs	r2, #3
     ba8:	9303      	str	r3, [sp, #12]
     baa:	4798      	blx	r3
     bac:	602e      	str	r6, [r5, #0]
		port_base->OUTCLR.reg = pin_mask;
     bae:	603e      	str	r6, [r7, #0]
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
	spi_read_buffer_wait(&adc_spi, rx, 3, 0);
     bb0:	4f0f      	ldr	r7, [pc, #60]	; (bf0 <adc_spi_command_response+0x98>)
     bb2:	9b00      	ldr	r3, [sp, #0]
     bb4:	59e4      	ldr	r4, [r4, r7]
     bb6:	2203      	movs	r2, #3
     bb8:	9901      	ldr	r1, [sp, #4]
     bba:	9802      	ldr	r0, [sp, #8]
     bbc:	9400      	str	r4, [sp, #0]
     bbe:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
     bc0:	602e      	str	r6, [r5, #0]
     bc2:	9b01      	ldr	r3, [sp, #4]
     bc4:	8818      	ldrh	r0, [r3, #0]
     bc6:	ba40      	rev16	r0, r0
     bc8:	b280      	uxth	r0, r0
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
	uint32_t ret = (rx[0] << 8) | (rx[1] << 0);
	return (int)(ret);
}
     bca:	b007      	add	sp, #28
     bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (adc_started) return -1;
     bce:	2001      	movs	r0, #1
     bd0:	4240      	negs	r0, r0
     bd2:	e7fa      	b.n	bca <adc_spi_command_response+0x72>
     bd4:	0000cf8a 	.word	0x0000cf8a
     bd8:	0000033c 	.word	0x0000033c
     bdc:	0000023c 	.word	0x0000023c
     be0:	41004494 	.word	0x41004494
     be4:	0000025c 	.word	0x0000025c
     be8:	00000328 	.word	0x00000328
     bec:	41004498 	.word	0x41004498
     bf0:	0000022c 	.word	0x0000022c

00000bf4 <adc_spi_readReg>:

int adc_spi_readReg(uint8_t addr) {
     bf4:	b513      	push	{r0, r1, r4, lr}
     bf6:	4b0d      	ldr	r3, [pc, #52]	; (c2c <adc_spi_readReg+0x38>)
	if (adc_started) return -1;
     bf8:	4a0d      	ldr	r2, [pc, #52]	; (c30 <adc_spi_readReg+0x3c>)
int adc_spi_readReg(uint8_t addr) {
     bfa:	447b      	add	r3, pc
	if (adc_started) return -1;
     bfc:	589a      	ldr	r2, [r3, r2]
     bfe:	9201      	str	r2, [sp, #4]
     c00:	7812      	ldrb	r2, [r2, #0]
     c02:	2a00      	cmp	r2, #0
     c04:	d002      	beq.n	c0c <adc_spi_readReg+0x18>
     c06:	2001      	movs	r0, #1
     c08:	4240      	negs	r0, r0
	uint16_t comm = RREG | (addr << 8);
	int resp;
	resp = adc_spi_command_response(comm);
	if ((resp & ~0xff) != comm) return -1;
	return resp & 0xff;
}
     c0a:	bd16      	pop	{r1, r2, r4, pc}
	uint16_t comm = RREG | (addr << 8);
     c0c:	2480      	movs	r4, #128	; 0x80
	resp = adc_spi_command_response(comm);
     c0e:	4a09      	ldr	r2, [pc, #36]	; (c34 <adc_spi_readReg+0x40>)
	uint16_t comm = RREG | (addr << 8);
     c10:	0200      	lsls	r0, r0, #8
     c12:	01a4      	lsls	r4, r4, #6
	resp = adc_spi_command_response(comm);
     c14:	589b      	ldr	r3, [r3, r2]
	uint16_t comm = RREG | (addr << 8);
     c16:	4304      	orrs	r4, r0
	resp = adc_spi_command_response(comm);
     c18:	0020      	movs	r0, r4
     c1a:	9301      	str	r3, [sp, #4]
     c1c:	4798      	blx	r3
	if ((resp & ~0xff) != comm) return -1;
     c1e:	23ff      	movs	r3, #255	; 0xff
     c20:	0002      	movs	r2, r0
     c22:	439a      	bics	r2, r3
     c24:	42a2      	cmp	r2, r4
     c26:	d1ee      	bne.n	c06 <adc_spi_readReg+0x12>
	return resp & 0xff;
     c28:	4018      	ands	r0, r3
     c2a:	e7ee      	b.n	c0a <adc_spi_readReg+0x16>
     c2c:	0000ceee 	.word	0x0000ceee
     c30:	0000033c 	.word	0x0000033c
     c34:	0000010c 	.word	0x0000010c

00000c38 <adc_spi_writeReg>:

int adc_spi_writeReg(uint8_t addr, uint8_t data) {
     c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
     c3a:	4b11      	ldr	r3, [pc, #68]	; (c80 <adc_spi_writeReg+0x48>)
	if (adc_started) return -1;
     c3c:	4a11      	ldr	r2, [pc, #68]	; (c84 <adc_spi_writeReg+0x4c>)
int adc_spi_writeReg(uint8_t addr, uint8_t data) {
     c3e:	447b      	add	r3, pc
	if (adc_started) return -1;
     c40:	589a      	ldr	r2, [r3, r2]
int adc_spi_writeReg(uint8_t addr, uint8_t data) {
     c42:	000d      	movs	r5, r1
	if (adc_started) return -1;
     c44:	9201      	str	r2, [sp, #4]
     c46:	7812      	ldrb	r2, [r2, #0]
     c48:	2a00      	cmp	r2, #0
     c4a:	d002      	beq.n	c52 <adc_spi_writeReg+0x1a>
     c4c:	2001      	movs	r0, #1

	uint16_t comm = WREG | (addr << 8) | (data << 0);
	int resp;
	resp = adc_spi_command_response(comm);
	if ((resp & 0xff) != data) return -1;
	if ((resp & ~0xff) != (RREG | (addr << 8))) return -1;
     c4e:	4240      	negs	r0, r0
	return 0;
}
     c50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	uint16_t comm = WREG | (addr << 8) | (data << 0);
     c52:	0204      	lsls	r4, r0, #8
     c54:	2080      	movs	r0, #128	; 0x80
	resp = adc_spi_command_response(comm);
     c56:	4a0c      	ldr	r2, [pc, #48]	; (c88 <adc_spi_writeReg+0x50>)
	uint16_t comm = WREG | (addr << 8) | (data << 0);
     c58:	01c0      	lsls	r0, r0, #7
	resp = adc_spi_command_response(comm);
     c5a:	589b      	ldr	r3, [r3, r2]
	uint16_t comm = WREG | (addr << 8) | (data << 0);
     c5c:	4308      	orrs	r0, r1
	resp = adc_spi_command_response(comm);
     c5e:	4320      	orrs	r0, r4
     c60:	9301      	str	r3, [sp, #4]
     c62:	4798      	blx	r3
	if ((resp & 0xff) != data) return -1;
     c64:	23ff      	movs	r3, #255	; 0xff
     c66:	0002      	movs	r2, r0
     c68:	401a      	ands	r2, r3
     c6a:	42aa      	cmp	r2, r5
     c6c:	d1ee      	bne.n	c4c <adc_spi_writeReg+0x14>
	if ((resp & ~0xff) != (RREG | (addr << 8))) return -1;
     c6e:	4398      	bics	r0, r3
     c70:	2380      	movs	r3, #128	; 0x80
     c72:	019b      	lsls	r3, r3, #6
     c74:	431c      	orrs	r4, r3
     c76:	1b00      	subs	r0, r0, r4
     c78:	1e43      	subs	r3, r0, #1
     c7a:	4198      	sbcs	r0, r3
     c7c:	e7e7      	b.n	c4e <adc_spi_writeReg+0x16>
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	0000ceaa 	.word	0x0000ceaa
     c84:	0000033c 	.word	0x0000033c
     c88:	0000010c 	.word	0x0000010c

00000c8c <adc_command>:

int adc_command(uint16_t command) {
     c8c:	b513      	push	{r0, r1, r4, lr}
     c8e:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <adc_command+0x2c>)
	if (adc_started) return -1;
     c90:	4a0a      	ldr	r2, [pc, #40]	; (cbc <adc_command+0x30>)
int adc_command(uint16_t command) {
     c92:	447b      	add	r3, pc
	if (adc_started) return -1;
     c94:	589a      	ldr	r2, [r3, r2]
int adc_command(uint16_t command) {
     c96:	0004      	movs	r4, r0
	if (adc_started) return -1;
     c98:	9201      	str	r2, [sp, #4]
     c9a:	7812      	ldrb	r2, [r2, #0]
     c9c:	2001      	movs	r0, #1
     c9e:	2a00      	cmp	r2, #0
     ca0:	d107      	bne.n	cb2 <adc_command+0x26>

	int resp;
	resp = adc_spi_command_response(command);
     ca2:	4a07      	ldr	r2, [pc, #28]	; (cc0 <adc_command+0x34>)
     ca4:	0020      	movs	r0, r4
     ca6:	589b      	ldr	r3, [r3, r2]
     ca8:	9301      	str	r3, [sp, #4]
     caa:	4798      	blx	r3
	if (resp != command) return -1;
     cac:	1a20      	subs	r0, r4, r0
     cae:	1e44      	subs	r4, r0, #1
     cb0:	41a0      	sbcs	r0, r4
	if (adc_started) return -1;
     cb2:	4240      	negs	r0, r0
	return 0;
}
     cb4:	bd16      	pop	{r1, r2, r4, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	0000ce56 	.word	0x0000ce56
     cbc:	0000033c 	.word	0x0000033c
     cc0:	0000010c 	.word	0x0000010c

00000cc4 <adc_reset>:

int adc_reset() {
     cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
     cc6:	4b0e      	ldr	r3, [pc, #56]	; (d00 <adc_reset+0x3c>)
	if (adc_started) return -1;
     cc8:	4a0e      	ldr	r2, [pc, #56]	; (d04 <adc_reset+0x40>)
int adc_reset() {
     cca:	447b      	add	r3, pc
	if (adc_started) return -1;
     ccc:	589a      	ldr	r2, [r3, r2]
     cce:	9201      	str	r2, [sp, #4]
     cd0:	7812      	ldrb	r2, [r2, #0]
     cd2:	2a00      	cmp	r2, #0
     cd4:	d002      	beq.n	cdc <adc_reset+0x18>
     cd6:	2001      	movs	r0, #1
     cd8:	4240      	negs	r0, r0
		cnt++;
		if (cnt > 500) return -1;
		resp = adc_spi_command_response(COMMAND_NULL);
	}
	return 0;
}
     cda:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	resp = adc_spi_command_response(COMMAND_RESET);
     cdc:	4a0a      	ldr	r2, [pc, #40]	; (d08 <adc_reset+0x44>)
     cde:	2011      	movs	r0, #17
     ce0:	589d      	ldr	r5, [r3, r2]
	while(resp != 0xff02) {
     ce2:	24f6      	movs	r4, #246	; 0xf6
	resp = adc_spi_command_response(COMMAND_RESET);
     ce4:	47a8      	blx	r5
	while(resp != 0xff02) {
     ce6:	34ff      	adds	r4, #255	; 0xff
     ce8:	4b08      	ldr	r3, [pc, #32]	; (d0c <adc_reset+0x48>)
     cea:	4298      	cmp	r0, r3
     cec:	d101      	bne.n	cf2 <adc_reset+0x2e>
	return 0;
     cee:	2000      	movs	r0, #0
     cf0:	e7f3      	b.n	cda <adc_reset+0x16>
     cf2:	3c01      	subs	r4, #1
		if (cnt > 500) return -1;
     cf4:	2c00      	cmp	r4, #0
     cf6:	d0ee      	beq.n	cd6 <adc_reset+0x12>
		resp = adc_spi_command_response(COMMAND_NULL);
     cf8:	2000      	movs	r0, #0
     cfa:	47a8      	blx	r5
     cfc:	e7f4      	b.n	ce8 <adc_reset+0x24>
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	0000ce1e 	.word	0x0000ce1e
     d04:	0000033c 	.word	0x0000033c
     d08:	0000010c 	.word	0x0000010c
     d0c:	0000ff02 	.word	0x0000ff02

00000d10 <adc_fault>:

int adc_fault(union AdcFaultCode* code) {
     d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     d12:	4b40      	ldr	r3, [pc, #256]	; (e14 <adc_fault+0x104>)
	if (adc_started) return -1;
     d14:	4a40      	ldr	r2, [pc, #256]	; (e18 <adc_fault+0x108>)
int adc_fault(union AdcFaultCode* code) {
     d16:	447b      	add	r3, pc
	if (adc_started) return -1;
     d18:	589a      	ldr	r2, [r3, r2]
int adc_fault(union AdcFaultCode* code) {
     d1a:	0005      	movs	r5, r0
	if (adc_started) return -1;
     d1c:	7816      	ldrb	r6, [r2, #0]
     d1e:	9201      	str	r2, [sp, #4]
     d20:	2e00      	cmp	r6, #0
     d22:	d002      	beq.n	d2a <adc_fault+0x1a>
     d24:	2001      	movs	r0, #1
     d26:	4240      	negs	r0, r0
	if (resp == -1) return -1;
	code->b.STARTUP	=  resp & (1 << 2);
	code->b.CS		=  resp & (1 << 1);
	code->b.FRAME	=  resp & (1 << 0);
	return 0;
}
     d28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	resp = adc_spi_readReg(ADDR_STAT_1);
     d2a:	4a3c      	ldr	r2, [pc, #240]	; (e1c <adc_fault+0x10c>)
	code->all = 0;
     d2c:	6006      	str	r6, [r0, #0]
	resp = adc_spi_readReg(ADDR_STAT_1);
     d2e:	589b      	ldr	r3, [r3, r2]
     d30:	2002      	movs	r0, #2
     d32:	9301      	str	r3, [sp, #4]
     d34:	4798      	blx	r3
	if (resp == -1) return -1;
     d36:	1c43      	adds	r3, r0, #1
     d38:	d0f4      	beq.n	d24 <adc_fault+0x14>
	code->b.OPC		= resp & (1 << 6);
     d3a:	2401      	movs	r4, #1
     d3c:	7829      	ldrb	r1, [r5, #0]
	code->b.SPI		= resp & (1 << 5);
     d3e:	0942      	lsrs	r2, r0, #5
	code->b.OPC		= resp & (1 << 6);
     d40:	43a1      	bics	r1, r4
	code->b.SPI		= resp & (1 << 5);
     d42:	4022      	ands	r2, r4
     d44:	0057      	lsls	r7, r2, #1
     d46:	000a      	movs	r2, r1
	code->b.OPC		= resp & (1 << 6);
     d48:	0983      	lsrs	r3, r0, #6
     d4a:	4023      	ands	r3, r4
	code->b.SPI		= resp & (1 << 5);
     d4c:	431a      	orrs	r2, r3
     d4e:	2302      	movs	r3, #2
     d50:	439a      	bics	r2, r3
	code->b.ADCIN	= resp & (1 << 4);
     d52:	0903      	lsrs	r3, r0, #4
     d54:	4023      	ands	r3, r4
     d56:	0099      	lsls	r1, r3, #2
     d58:	2304      	movs	r3, #4
     d5a:	433a      	orrs	r2, r7
     d5c:	439a      	bics	r2, r3
	code->b.WDTR	= resp & (1 << 3);
     d5e:	08c3      	lsrs	r3, r0, #3
     d60:	4023      	ands	r3, r4
     d62:	00df      	lsls	r7, r3, #3
     d64:	2308      	movs	r3, #8
     d66:	430a      	orrs	r2, r1
     d68:	439a      	bics	r2, r3
	code->b.RESYNC	= resp & (1 << 2);
     d6a:	0883      	lsrs	r3, r0, #2
     d6c:	4023      	ands	r3, r4
     d6e:	0119      	lsls	r1, r3, #4
     d70:	0013      	movs	r3, r2
     d72:	2210      	movs	r2, #16
     d74:	433b      	orrs	r3, r7
	code->b.DRDY	= resp & (1 << 1);
     d76:	2720      	movs	r7, #32
	code->b.RESYNC	= resp & (1 << 2);
     d78:	4393      	bics	r3, r2
	code->b.DRDY	= resp & (1 << 1);
     d7a:	0842      	lsrs	r2, r0, #1
     d7c:	4022      	ands	r2, r4
     d7e:	430b      	orrs	r3, r1
     d80:	0152      	lsls	r2, r2, #5
     d82:	43bb      	bics	r3, r7
	code->b.CHECK	= resp & (1 << 0);
     d84:	4313      	orrs	r3, r2
     d86:	2240      	movs	r2, #64	; 0x40
     d88:	4020      	ands	r0, r4
     d8a:	4393      	bics	r3, r2
     d8c:	0180      	lsls	r0, r0, #6
     d8e:	4318      	orrs	r0, r3
     d90:	7028      	strb	r0, [r5, #0]
	resp = adc_spi_readReg(ADDR_STAT_P);
     d92:	9b01      	ldr	r3, [sp, #4]
     d94:	2003      	movs	r0, #3
     d96:	4798      	blx	r3
	if (resp == -1) return -1;
     d98:	1c43      	adds	r3, r0, #1
     d9a:	d0c3      	beq.n	d24 <adc_fault+0x14>
	code->b.IN2P	=  resp & (1 << 1);
     d9c:	217f      	movs	r1, #127	; 0x7f
     d9e:	0843      	lsrs	r3, r0, #1
     da0:	4023      	ands	r3, r4
     da2:	01da      	lsls	r2, r3, #7
     da4:	782b      	ldrb	r3, [r5, #0]
     da6:	400b      	ands	r3, r1
     da8:	4313      	orrs	r3, r2
     daa:	702b      	strb	r3, [r5, #0]
	code->b.IN1P	=  resp & (1 << 0);
     dac:	0003      	movs	r3, r0
     dae:	7868      	ldrb	r0, [r5, #1]
     db0:	4023      	ands	r3, r4
     db2:	43a0      	bics	r0, r4
     db4:	4318      	orrs	r0, r3
     db6:	7068      	strb	r0, [r5, #1]
	resp = adc_spi_readReg(ADDR_STAT_N);
     db8:	9b01      	ldr	r3, [sp, #4]
     dba:	2004      	movs	r0, #4
     dbc:	4798      	blx	r3
	if (resp == -1) return -1;
     dbe:	1c43      	adds	r3, r0, #1
     dc0:	d0b0      	beq.n	d24 <adc_fault+0x14>
	code->b.IN2N	=  resp & (1 << 1);
     dc2:	0841      	lsrs	r1, r0, #1
     dc4:	2202      	movs	r2, #2
     dc6:	4021      	ands	r1, r4
     dc8:	40a1      	lsls	r1, r4
     dca:	786b      	ldrb	r3, [r5, #1]
	code->b.IN1N	=  resp & (1 << 0);
     dcc:	4020      	ands	r0, r4
	code->b.IN2N	=  resp & (1 << 1);
     dce:	4393      	bics	r3, r2
	code->b.IN1N	=  resp & (1 << 0);
     dd0:	430b      	orrs	r3, r1
     dd2:	0082      	lsls	r2, r0, #2
     dd4:	0018      	movs	r0, r3
     dd6:	2304      	movs	r3, #4
     dd8:	4398      	bics	r0, r3
     dda:	4310      	orrs	r0, r2
     ddc:	7068      	strb	r0, [r5, #1]
	resp = adc_spi_readReg(ADDR_STAT_S);
     dde:	9b01      	ldr	r3, [sp, #4]
     de0:	2005      	movs	r0, #5
     de2:	4798      	blx	r3
	if (resp == -1) return -1;
     de4:	1c43      	adds	r3, r0, #1
     de6:	d09d      	beq.n	d24 <adc_fault+0x14>
	code->b.STARTUP	=  resp & (1 << 2);
     de8:	2208      	movs	r2, #8
     dea:	0883      	lsrs	r3, r0, #2
     dec:	4023      	ands	r3, r4
     dee:	00d9      	lsls	r1, r3, #3
     df0:	786b      	ldrb	r3, [r5, #1]
     df2:	4393      	bics	r3, r2
	code->b.CS		=  resp & (1 << 1);
     df4:	430b      	orrs	r3, r1
     df6:	2110      	movs	r1, #16
     df8:	0842      	lsrs	r2, r0, #1
     dfa:	4022      	ands	r2, r4
     dfc:	0112      	lsls	r2, r2, #4
     dfe:	438b      	bics	r3, r1
	code->b.FRAME	=  resp & (1 << 0);
     e00:	4313      	orrs	r3, r2
     e02:	4020      	ands	r0, r4
     e04:	001c      	movs	r4, r3
     e06:	0140      	lsls	r0, r0, #5
     e08:	43bc      	bics	r4, r7
     e0a:	4304      	orrs	r4, r0
     e0c:	706c      	strb	r4, [r5, #1]
	return 0;
     e0e:	0030      	movs	r0, r6
     e10:	e78a      	b.n	d28 <adc_fault+0x18>
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	0000cdd2 	.word	0x0000cdd2
     e18:	0000033c 	.word	0x0000033c
     e1c:	00000000 	.word	0x00000000

00000e20 <adc_configure>:

int adc_configure() {
     e20:	b513      	push	{r0, r1, r4, lr}
     e22:	4b16      	ldr	r3, [pc, #88]	; (e7c <adc_configure+0x5c>)
	if (adc_started) return -1;
     e24:	4a16      	ldr	r2, [pc, #88]	; (e80 <adc_configure+0x60>)
int adc_configure() {
     e26:	447b      	add	r3, pc
	if (adc_started) return -1;
     e28:	589a      	ldr	r2, [r3, r2]
     e2a:	9201      	str	r2, [sp, #4]
     e2c:	7812      	ldrb	r2, [r2, #0]
     e2e:	2a00      	cmp	r2, #0
     e30:	d002      	beq.n	e38 <adc_configure+0x18>
     e32:	2001      	movs	r0, #1
	if (adc_spi_writeReg(ADDR_A_SYS_CFG, a_sys_cfg) == -1) return -1;
	if (adc_spi_writeReg(ADDR_D_SYS_CFG, d_sys_cfg) == -1) return -1;
	if (adc_spi_writeReg(ADDR_CLK1, clk1) == -1) return -1;
	if (adc_spi_writeReg(ADDR_CLK2, clk2) == -1) return -1;
	if (adc_spi_writeReg(ADDR_ADC1, adc1) == -1) return -1;
	if (adc_spi_writeReg(ADDR_ADC2, adc2) == -1) return -1;
     e34:	4240      	negs	r0, r0
	return 0;
}
     e36:	bd16      	pop	{r1, r2, r4, pc}
	if (adc_spi_writeReg(ADDR_A_SYS_CFG, a_sys_cfg) == -1) return -1;
     e38:	4a12      	ldr	r2, [pc, #72]	; (e84 <adc_configure+0x64>)
     e3a:	21e8      	movs	r1, #232	; 0xe8
     e3c:	589c      	ldr	r4, [r3, r2]
     e3e:	200b      	movs	r0, #11
     e40:	47a0      	blx	r4
     e42:	1c43      	adds	r3, r0, #1
     e44:	d0f5      	beq.n	e32 <adc_configure+0x12>
	if (adc_spi_writeReg(ADDR_D_SYS_CFG, d_sys_cfg) == -1) return -1;
     e46:	213c      	movs	r1, #60	; 0x3c
     e48:	200c      	movs	r0, #12
     e4a:	47a0      	blx	r4
     e4c:	1c43      	adds	r3, r0, #1
     e4e:	d0f0      	beq.n	e32 <adc_configure+0x12>
	if (adc_spi_writeReg(ADDR_CLK1, clk1) == -1) return -1;
     e50:	2102      	movs	r1, #2
     e52:	200d      	movs	r0, #13
     e54:	47a0      	blx	r4
     e56:	1c43      	adds	r3, r0, #1
     e58:	d0eb      	beq.n	e32 <adc_configure+0x12>
	if (adc_spi_writeReg(ADDR_CLK2, clk2) == -1) return -1;
     e5a:	2120      	movs	r1, #32
     e5c:	200e      	movs	r0, #14
     e5e:	47a0      	blx	r4
     e60:	1c43      	adds	r3, r0, #1
     e62:	d0e6      	beq.n	e32 <adc_configure+0x12>
	if (adc_spi_writeReg(ADDR_ADC1, adc1) == -1) return -1;
     e64:	2101      	movs	r1, #1
     e66:	2011      	movs	r0, #17
     e68:	47a0      	blx	r4
     e6a:	1c43      	adds	r3, r0, #1
     e6c:	d0e1      	beq.n	e32 <adc_configure+0x12>
	if (adc_spi_writeReg(ADDR_ADC2, adc2) == -1) return -1;
     e6e:	2101      	movs	r1, #1
     e70:	2012      	movs	r0, #18
     e72:	47a0      	blx	r4
     e74:	3001      	adds	r0, #1
     e76:	4243      	negs	r3, r0
     e78:	4158      	adcs	r0, r3
     e7a:	e7db      	b.n	e34 <adc_configure+0x14>
     e7c:	0000ccc2 	.word	0x0000ccc2
     e80:	0000033c 	.word	0x0000033c
     e84:	00000230 	.word	0x00000230

00000e88 <adc_start>:

int adc_start() {
     e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e8a:	4d12      	ldr	r5, [pc, #72]	; (ed4 <adc_start+0x4c>)
	if (adc_started) return -1;
     e8c:	4b12      	ldr	r3, [pc, #72]	; (ed8 <adc_start+0x50>)
int adc_start() {
     e8e:	447d      	add	r5, pc
	if (adc_started) return -1;
     e90:	58ee      	ldr	r6, [r5, r3]
     e92:	7834      	ldrb	r4, [r6, #0]
     e94:	2c00      	cmp	r4, #0
     e96:	d002      	beq.n	e9e <adc_start+0x16>
     e98:	2001      	movs	r0, #1
     e9a:	4240      	negs	r0, r0
	if (adc_spi_writeReg(ADDR_ADC_ENA, 0x3) == -1) return -1;
	if (adc_command(COMMAND_LOCK) == -1) return -1;
	adc_synchronous_start();
	adc_started=1;
	return 0;
}
     e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (adc_command(COMMAND_UNLOCK) == -1) return -1;
     e9e:	4b0f      	ldr	r3, [pc, #60]	; (edc <adc_start+0x54>)
     ea0:	480f      	ldr	r0, [pc, #60]	; (ee0 <adc_start+0x58>)
     ea2:	58ef      	ldr	r7, [r5, r3]
     ea4:	47b8      	blx	r7
     ea6:	1c43      	adds	r3, r0, #1
     ea8:	d0f6      	beq.n	e98 <adc_start+0x10>
	if (adc_spi_writeReg(ADDR_ADC_ENA, 0x3) == -1) return -1;
     eaa:	4b0e      	ldr	r3, [pc, #56]	; (ee4 <adc_start+0x5c>)
     eac:	2103      	movs	r1, #3
     eae:	58eb      	ldr	r3, [r5, r3]
     eb0:	200f      	movs	r0, #15
     eb2:	9301      	str	r3, [sp, #4]
     eb4:	4798      	blx	r3
     eb6:	1c43      	adds	r3, r0, #1
     eb8:	d0ee      	beq.n	e98 <adc_start+0x10>
	if (adc_command(COMMAND_LOCK) == -1) return -1;
     eba:	480b      	ldr	r0, [pc, #44]	; (ee8 <adc_start+0x60>)
     ebc:	47b8      	blx	r7
     ebe:	1c43      	adds	r3, r0, #1
     ec0:	d0ea      	beq.n	e98 <adc_start+0x10>
	adc_synchronous_start();
     ec2:	4b0a      	ldr	r3, [pc, #40]	; (eec <adc_start+0x64>)
     ec4:	58eb      	ldr	r3, [r5, r3]
     ec6:	9301      	str	r3, [sp, #4]
     ec8:	4798      	blx	r3
	adc_started=1;
     eca:	2301      	movs	r3, #1
	return 0;
     ecc:	0020      	movs	r0, r4
	adc_started=1;
     ece:	7033      	strb	r3, [r6, #0]
	return 0;
     ed0:	e7e4      	b.n	e9c <adc_start+0x14>
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	0000cc5a 	.word	0x0000cc5a
     ed8:	0000033c 	.word	0x0000033c
     edc:	000000a8 	.word	0x000000a8
     ee0:	00000655 	.word	0x00000655
     ee4:	00000230 	.word	0x00000230
     ee8:	00000555 	.word	0x00000555
     eec:	000001f8 	.word	0x000001f8

00000ef0 <adc_setSampleRate>:
	if (adc_command(COMMAND_LOCK) == -1) return -1;
	adc_started=0;
	return 0;
}

int adc_setSampleRate(enum AdcSampleRate rate) {
     ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ef2:	4d0d      	ldr	r5, [pc, #52]	; (f28 <adc_setSampleRate+0x38>)
	if (adc_started) return -1;
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <adc_setSampleRate+0x3c>)
int adc_setSampleRate(enum AdcSampleRate rate) {
     ef6:	447d      	add	r5, pc
	if (adc_started) return -1;
     ef8:	58eb      	ldr	r3, [r5, r3]
int adc_setSampleRate(enum AdcSampleRate rate) {
     efa:	0006      	movs	r6, r0
	if (adc_started) return -1;
     efc:	781c      	ldrb	r4, [r3, #0]
     efe:	9301      	str	r3, [sp, #4]
     f00:	2c00      	cmp	r4, #0
     f02:	d002      	beq.n	f0a <adc_setSampleRate+0x1a>
     f04:	2001      	movs	r0, #1
     f06:	4240      	negs	r0, r0
	data |= rate;
	if (adc_spi_writeReg(ADDR_CLK2, data) == -1) return -1;
	adc_sampleRate = rate;
	
	return 0;
}
     f08:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	if (adc_spi_writeReg(ADDR_CLK2, data) == -1) return -1;
     f0a:	2120      	movs	r1, #32
     f0c:	4b08      	ldr	r3, [pc, #32]	; (f30 <adc_setSampleRate+0x40>)
     f0e:	4301      	orrs	r1, r0
     f10:	58eb      	ldr	r3, [r5, r3]
     f12:	200e      	movs	r0, #14
     f14:	9301      	str	r3, [sp, #4]
     f16:	4798      	blx	r3
     f18:	1c43      	adds	r3, r0, #1
     f1a:	d0f3      	beq.n	f04 <adc_setSampleRate+0x14>
	adc_sampleRate = rate;
     f1c:	4b05      	ldr	r3, [pc, #20]	; (f34 <adc_setSampleRate+0x44>)
	return 0;
     f1e:	0020      	movs	r0, r4
	adc_sampleRate = rate;
     f20:	58eb      	ldr	r3, [r5, r3]
     f22:	9301      	str	r3, [sp, #4]
     f24:	701e      	strb	r6, [r3, #0]
	return 0;
     f26:	e7ef      	b.n	f08 <adc_setSampleRate+0x18>
     f28:	0000cbf2 	.word	0x0000cbf2
     f2c:	0000033c 	.word	0x0000033c
     f30:	00000230 	.word	0x00000230
     f34:	00000324 	.word	0x00000324

00000f38 <adc_init>:
	return adc_sampleRate;
};


// startup and configure the adc
int adc_init() {
     f38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     f3a:	4c51      	ldr	r4, [pc, #324]	; (1080 <adc_init+0x148>)

	adc_fifo_init();
     f3c:	4b51      	ldr	r3, [pc, #324]	; (1084 <adc_init+0x14c>)
int adc_init() {
     f3e:	447c      	add	r4, pc
	adc_fifo_init();
     f40:	58e3      	ldr	r3, [r4, r3]
     f42:	9301      	str	r3, [sp, #4]
     f44:	4798      	blx	r3
	adc_rangeSet(RANGE_1_224, RANGE_1_224);
     f46:	2100      	movs	r1, #0
     f48:	4b4f      	ldr	r3, [pc, #316]	; (1088 <adc_init+0x150>)
     f4a:	0008      	movs	r0, r1
     f4c:	58e3      	ldr	r3, [r4, r3]
     f4e:	9301      	str	r3, [sp, #4]
     f50:	4798      	blx	r3
	if (adc_peripheralConfig(8192000, 25))	fatal_error(2,"ADC peripheral config failed.\n");
     f52:	20fa      	movs	r0, #250	; 0xfa
     f54:	4b4d      	ldr	r3, [pc, #308]	; (108c <adc_init+0x154>)
     f56:	2119      	movs	r1, #25
     f58:	58e3      	ldr	r3, [r4, r3]
     f5a:	03c0      	lsls	r0, r0, #15
     f5c:	9301      	str	r3, [sp, #4]
     f5e:	4798      	blx	r3
     f60:	2800      	cmp	r0, #0
     f62:	d006      	beq.n	f72 <adc_init+0x3a>
     f64:	4b4a      	ldr	r3, [pc, #296]	; (1090 <adc_init+0x158>)
     f66:	494b      	ldr	r1, [pc, #300]	; (1094 <adc_init+0x15c>)
     f68:	58e3      	ldr	r3, [r4, r3]
     f6a:	4479      	add	r1, pc
     f6c:	2002      	movs	r0, #2
     f6e:	9301      	str	r3, [sp, #4]
     f70:	4798      	blx	r3

	// Setup procedure
	if (adc_reset())					fatal_error(2,"ADC init reset failed.\n");
     f72:	4b49      	ldr	r3, [pc, #292]	; (1098 <adc_init+0x160>)
     f74:	58e3      	ldr	r3, [r4, r3]
     f76:	9301      	str	r3, [sp, #4]
     f78:	4798      	blx	r3
     f7a:	2800      	cmp	r0, #0
     f7c:	d006      	beq.n	f8c <adc_init+0x54>
     f7e:	4b44      	ldr	r3, [pc, #272]	; (1090 <adc_init+0x158>)
     f80:	4946      	ldr	r1, [pc, #280]	; (109c <adc_init+0x164>)
     f82:	58e3      	ldr	r3, [r4, r3]
     f84:	4479      	add	r1, pc
     f86:	2002      	movs	r0, #2
     f88:	9301      	str	r3, [sp, #4]
     f8a:	4798      	blx	r3
	if (adc_command(COMMAND_UNLOCK))	fatal_error(2,"ADC init unlock failed.\n");
     f8c:	4b44      	ldr	r3, [pc, #272]	; (10a0 <adc_init+0x168>)
     f8e:	4845      	ldr	r0, [pc, #276]	; (10a4 <adc_init+0x16c>)
     f90:	58e5      	ldr	r5, [r4, r3]
     f92:	47a8      	blx	r5
     f94:	2800      	cmp	r0, #0
     f96:	d006      	beq.n	fa6 <adc_init+0x6e>
     f98:	4b3d      	ldr	r3, [pc, #244]	; (1090 <adc_init+0x158>)
     f9a:	4943      	ldr	r1, [pc, #268]	; (10a8 <adc_init+0x170>)
     f9c:	58e3      	ldr	r3, [r4, r3]
     f9e:	4479      	add	r1, pc
     fa0:	2002      	movs	r0, #2
     fa2:	9301      	str	r3, [sp, #4]
     fa4:	4798      	blx	r3
	if (adc_configure())				fatal_error(2,"ADC init config failed.\n");
     fa6:	4b41      	ldr	r3, [pc, #260]	; (10ac <adc_init+0x174>)
     fa8:	58e3      	ldr	r3, [r4, r3]
     faa:	9301      	str	r3, [sp, #4]
     fac:	4798      	blx	r3
     fae:	2800      	cmp	r0, #0
     fb0:	d006      	beq.n	fc0 <adc_init+0x88>
     fb2:	4b37      	ldr	r3, [pc, #220]	; (1090 <adc_init+0x158>)
     fb4:	493e      	ldr	r1, [pc, #248]	; (10b0 <adc_init+0x178>)
     fb6:	58e3      	ldr	r3, [r4, r3]
     fb8:	4479      	add	r1, pc
     fba:	2002      	movs	r0, #2
     fbc:	9301      	str	r3, [sp, #4]
     fbe:	4798      	blx	r3
	if (adc_setSampleRate(RATE_2000))	fatal_error(2,"ADC init sample rate failed.\n");
     fc0:	4b3c      	ldr	r3, [pc, #240]	; (10b4 <adc_init+0x17c>)
     fc2:	2001      	movs	r0, #1
     fc4:	58e3      	ldr	r3, [r4, r3]
     fc6:	9301      	str	r3, [sp, #4]
     fc8:	4798      	blx	r3
     fca:	2800      	cmp	r0, #0
     fcc:	d006      	beq.n	fdc <adc_init+0xa4>
     fce:	4b30      	ldr	r3, [pc, #192]	; (1090 <adc_init+0x158>)
     fd0:	4939      	ldr	r1, [pc, #228]	; (10b8 <adc_init+0x180>)
     fd2:	58e3      	ldr	r3, [r4, r3]
     fd4:	4479      	add	r1, pc
     fd6:	2002      	movs	r0, #2
     fd8:	9301      	str	r3, [sp, #4]
     fda:	4798      	blx	r3
	if (adc_command(COMMAND_WAKEUP))	fatal_error(2,"ADC init wakeup failed.\n");
     fdc:	2033      	movs	r0, #51	; 0x33
     fde:	47a8      	blx	r5
     fe0:	2800      	cmp	r0, #0
     fe2:	d006      	beq.n	ff2 <adc_init+0xba>
     fe4:	4b2a      	ldr	r3, [pc, #168]	; (1090 <adc_init+0x158>)
     fe6:	4935      	ldr	r1, [pc, #212]	; (10bc <adc_init+0x184>)
     fe8:	58e3      	ldr	r3, [r4, r3]
     fea:	4479      	add	r1, pc
     fec:	2002      	movs	r0, #2
     fee:	9301      	str	r3, [sp, #4]
     ff0:	4798      	blx	r3
	if (adc_command(COMMAND_LOCK))		fatal_error(2,"ADC init lock failed.\n");
     ff2:	4833      	ldr	r0, [pc, #204]	; (10c0 <adc_init+0x188>)
     ff4:	47a8      	blx	r5
     ff6:	2800      	cmp	r0, #0
     ff8:	d006      	beq.n	1008 <adc_init+0xd0>
     ffa:	4b25      	ldr	r3, [pc, #148]	; (1090 <adc_init+0x158>)
     ffc:	4931      	ldr	r1, [pc, #196]	; (10c4 <adc_init+0x18c>)
     ffe:	58e3      	ldr	r3, [r4, r3]
    1000:	4479      	add	r1, pc
    1002:	2002      	movs	r0, #2
    1004:	9301      	str	r3, [sp, #4]
    1006:	4798      	blx	r3
	
	// clear and check faults
	union AdcFaultCode fcode;
	fcode.all = 0;
    1008:	2300      	movs	r3, #0
    100a:	9303      	str	r3, [sp, #12]
	if (adc_fault(&fcode))				fatal_error(2,"ADC init fault check failed.\n");
    100c:	4b2e      	ldr	r3, [pc, #184]	; (10c8 <adc_init+0x190>)
    100e:	ae03      	add	r6, sp, #12
    1010:	0030      	movs	r0, r6
    1012:	58e5      	ldr	r5, [r4, r3]
    1014:	47a8      	blx	r5
    1016:	2800      	cmp	r0, #0
    1018:	d006      	beq.n	1028 <adc_init+0xf0>
    101a:	4b1d      	ldr	r3, [pc, #116]	; (1090 <adc_init+0x158>)
    101c:	492b      	ldr	r1, [pc, #172]	; (10cc <adc_init+0x194>)
    101e:	58e3      	ldr	r3, [r4, r3]
    1020:	4479      	add	r1, pc
    1022:	2002      	movs	r0, #2
    1024:	9301      	str	r3, [sp, #4]
    1026:	4798      	blx	r3
	if (adc_fault(&fcode))				fatal_error(2,"ADC init fault check failed.\n");
    1028:	0030      	movs	r0, r6
    102a:	47a8      	blx	r5
    102c:	2800      	cmp	r0, #0
    102e:	d006      	beq.n	103e <adc_init+0x106>
    1030:	4b17      	ldr	r3, [pc, #92]	; (1090 <adc_init+0x158>)
    1032:	4927      	ldr	r1, [pc, #156]	; (10d0 <adc_init+0x198>)
    1034:	58e3      	ldr	r3, [r4, r3]
    1036:	4479      	add	r1, pc
    1038:	2002      	movs	r0, #2
    103a:	9301      	str	r3, [sp, #4]
    103c:	4798      	blx	r3
	if (fcode.all) {
    103e:	9a03      	ldr	r2, [sp, #12]
    1040:	2a00      	cmp	r2, #0
    1042:	d006      	beq.n	1052 <adc_init+0x11a>
		fatal_error(1,"ADC has faults after init: 0x%04x\n", fcode.all);
    1044:	4b12      	ldr	r3, [pc, #72]	; (1090 <adc_init+0x158>)
    1046:	4923      	ldr	r1, [pc, #140]	; (10d4 <adc_init+0x19c>)
    1048:	58e3      	ldr	r3, [r4, r3]
    104a:	4479      	add	r1, pc
    104c:	2001      	movs	r0, #1
    104e:	9301      	str	r3, [sp, #4]
    1050:	4798      	blx	r3
	}
	debug_print("ADC init success.\n");
    1052:	4b21      	ldr	r3, [pc, #132]	; (10d8 <adc_init+0x1a0>)
    1054:	4821      	ldr	r0, [pc, #132]	; (10dc <adc_init+0x1a4>)
    1056:	58e3      	ldr	r3, [r4, r3]
    1058:	4478      	add	r0, pc
    105a:	9301      	str	r3, [sp, #4]
    105c:	4798      	blx	r3
	
	if (adc_start())					fatal_error(2,"ADC init start failed.\n");
    105e:	4b20      	ldr	r3, [pc, #128]	; (10e0 <adc_init+0x1a8>)
    1060:	58e3      	ldr	r3, [r4, r3]
    1062:	9301      	str	r3, [sp, #4]
    1064:	4798      	blx	r3
    1066:	2800      	cmp	r0, #0
    1068:	d006      	beq.n	1078 <adc_init+0x140>
    106a:	4b09      	ldr	r3, [pc, #36]	; (1090 <adc_init+0x158>)
    106c:	491d      	ldr	r1, [pc, #116]	; (10e4 <adc_init+0x1ac>)
    106e:	58e3      	ldr	r3, [r4, r3]
    1070:	4479      	add	r1, pc
    1072:	2002      	movs	r0, #2
    1074:	9301      	str	r3, [sp, #4]
    1076:	4798      	blx	r3

	return 0;
}
    1078:	2000      	movs	r0, #0
    107a:	b004      	add	sp, #16
    107c:	bd70      	pop	{r4, r5, r6, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	0000cbaa 	.word	0x0000cbaa
    1084:	00000238 	.word	0x00000238
    1088:	000002e0 	.word	0x000002e0
    108c:	00000004 	.word	0x00000004
    1090:	00000308 	.word	0x00000308
    1094:	0000c509 	.word	0x0000c509
    1098:	000002b8 	.word	0x000002b8
    109c:	0000c50e 	.word	0x0000c50e
    10a0:	000000a8 	.word	0x000000a8
    10a4:	00000655 	.word	0x00000655
    10a8:	0000c50c 	.word	0x0000c50c
    10ac:	000001a4 	.word	0x000001a4
    10b0:	0000c50b 	.word	0x0000c50b
    10b4:	00000040 	.word	0x00000040
    10b8:	0000c508 	.word	0x0000c508
    10bc:	0000c510 	.word	0x0000c510
    10c0:	00000555 	.word	0x00000555
    10c4:	0000c513 	.word	0x0000c513
    10c8:	000001fc 	.word	0x000001fc
    10cc:	0000c50a 	.word	0x0000c50a
    10d0:	0000c4f4 	.word	0x0000c4f4
    10d4:	0000c4fe 	.word	0x0000c4fe
    10d8:	0000021c 	.word	0x0000021c
    10dc:	0000c513 	.word	0x0000c513
    10e0:	00000190 	.word	0x00000190
    10e4:	0000c50e 	.word	0x0000c50e

000010e8 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	4b0c      	ldr	r3, [pc, #48]	; (111c <EVSYS_Handler+0x34>)
	struct events_hook *current_hook = _events_inst.hook_list;
    10ec:	4a0c      	ldr	r2, [pc, #48]	; (1120 <EVSYS_Handler+0x38>)
{
    10ee:	447b      	add	r3, pc
	struct events_hook *current_hook = _events_inst.hook_list;
    10f0:	589c      	ldr	r4, [r3, r2]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    10f2:	4a0c      	ldr	r2, [pc, #48]	; (1124 <EVSYS_Handler+0x3c>)
	struct events_hook *current_hook = _events_inst.hook_list;
    10f4:	6925      	ldr	r5, [r4, #16]
	flag = EVSYS->INTFLAG.reg;
    10f6:	6993      	ldr	r3, [r2, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    10f8:	68a1      	ldr	r1, [r4, #8]
    10fa:	430b      	orrs	r3, r1
    10fc:	60a3      	str	r3, [r4, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    10fe:	4b0a      	ldr	r3, [pc, #40]	; (1128 <EVSYS_Handler+0x40>)
    1100:	6193      	str	r3, [r2, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    1102:	2d00      	cmp	r5, #0
    1104:	d104      	bne.n	1110 <EVSYS_Handler+0x28>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    1106:	68e2      	ldr	r2, [r4, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    1108:	68a3      	ldr	r3, [r4, #8]
    110a:	4393      	bics	r3, r2
    110c:	60a3      	str	r3, [r4, #8]
}
    110e:	bd70      	pop	{r4, r5, r6, pc}
		current_hook->hook_func(current_hook->resource);
    1110:	6828      	ldr	r0, [r5, #0]
    1112:	686b      	ldr	r3, [r5, #4]
    1114:	4798      	blx	r3
		current_hook = current_hook->next;
    1116:	68ad      	ldr	r5, [r5, #8]
    1118:	e7f3      	b.n	1102 <EVSYS_Handler+0x1a>
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	0000c9fa 	.word	0x0000c9fa
    1120:	00000048 	.word	0x00000048
    1124:	42000400 	.word	0x42000400
    1128:	0f0fffff 	.word	0x0f0fffff

0000112c <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    112c:	2302      	movs	r3, #2
    112e:	4a05      	ldr	r2, [pc, #20]	; (1144 <_system_events_init+0x18>)
    1130:	6a11      	ldr	r1, [r2, #32]
    1132:	430b      	orrs	r3, r1
    1134:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    1136:	2301      	movs	r3, #1
    1138:	4a03      	ldr	r2, [pc, #12]	; (1148 <_system_events_init+0x1c>)
    113a:	7013      	strb	r3, [r2, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    113c:	7811      	ldrb	r1, [r2, #0]
    113e:	4219      	tst	r1, r3
    1140:	d1fc      	bne.n	113c <_system_events_init+0x10>
	}
}
    1142:	4770      	bx	lr
    1144:	40000400 	.word	0x40000400
    1148:	42000400 	.word	0x42000400

0000114c <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    114c:	2301      	movs	r3, #1
    114e:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    1150:	2300      	movs	r3, #0
    1152:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    1154:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    1156:	70c3      	strb	r3, [r0, #3]
}
    1158:	4770      	bx	lr
	...

0000115c <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	4d29      	ldr	r5, [pc, #164]	; (1204 <events_allocate+0xa8>)
	cpu_irq_enter_critical();
    1160:	4b29      	ldr	r3, [pc, #164]	; (1208 <events_allocate+0xac>)
    1162:	447d      	add	r5, pc
    1164:	58eb      	ldr	r3, [r5, r3]
    1166:	b085      	sub	sp, #20
    1168:	000e      	movs	r6, r1
    116a:	9300      	str	r3, [sp, #0]
    116c:	0007      	movs	r7, r0
    116e:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
    1170:	4b26      	ldr	r3, [pc, #152]	; (120c <events_allocate+0xb0>)
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1172:	2400      	movs	r4, #0
	tmp = _events_inst.allocated_channels;
    1174:	58ea      	ldr	r2, [r5, r3]
		if(!(tmp & 0x00000001)) {
    1176:	2301      	movs	r3, #1
	tmp = _events_inst.allocated_channels;
    1178:	6811      	ldr	r1, [r2, #0]
		if(!(tmp & 0x00000001)) {
    117a:	4219      	tst	r1, r3
    117c:	d13a      	bne.n	11f4 <events_allocate+0x98>
			_events_inst.allocated_channels |= 1 << count;
    117e:	40a3      	lsls	r3, r4
    1180:	6811      	ldr	r1, [r2, #0]
    1182:	430b      	orrs	r3, r1
    1184:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
    1186:	7913      	ldrb	r3, [r2, #4]
    1188:	3b01      	subs	r3, #1
    118a:	7113      	strb	r3, [r2, #4]
			allocated = true;
    118c:	2301      	movs	r3, #1
	bool allocated = false;
    118e:	9300      	str	r3, [sp, #0]
	cpu_irq_leave_critical();
    1190:	4b1f      	ldr	r3, [pc, #124]	; (1210 <events_allocate+0xb4>)
    1192:	58eb      	ldr	r3, [r5, r3]
    1194:	9301      	str	r3, [sp, #4]
    1196:	4798      	blx	r3
	if(!allocated) {
    1198:	9b00      	ldr	r3, [sp, #0]
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    119a:	2014      	movs	r0, #20
	if(!allocated) {
    119c:	2b00      	cmp	r3, #0
    119e:	d027      	beq.n	11f0 <events_allocate+0x94>
	}

	resource->channel = new_channel;
    11a0:	703c      	strb	r4, [r7, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    11a2:	7873      	ldrb	r3, [r6, #1]
    11a4:	2b02      	cmp	r3, #2
    11a6:	d00f      	beq.n	11c8 <events_allocate+0x6c>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
    11a8:	78f3      	ldrb	r3, [r6, #3]
    11aa:	a903      	add	r1, sp, #12
    11ac:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    11ae:	1de3      	adds	r3, r4, #7
    11b0:	b2db      	uxtb	r3, r3
    11b2:	9300      	str	r3, [sp, #0]
    11b4:	0018      	movs	r0, r3
    11b6:	4b17      	ldr	r3, [pc, #92]	; (1214 <events_allocate+0xb8>)
    11b8:	58eb      	ldr	r3, [r5, r3]
    11ba:	9301      	str	r3, [sp, #4]
    11bc:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    11be:	4b16      	ldr	r3, [pc, #88]	; (1218 <events_allocate+0xbc>)
    11c0:	9800      	ldr	r0, [sp, #0]
    11c2:	58eb      	ldr	r3, [r5, r3]
    11c4:	9300      	str	r3, [sp, #0]
    11c6:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    11c8:	22fe      	movs	r2, #254	; 0xfe
			     EVSYS_CHANNEL_PATH(config->path)         |
    11ca:	21c0      	movs	r1, #192	; 0xc0
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    11cc:	78b3      	ldrb	r3, [r6, #2]
    11ce:	03d2      	lsls	r2, r2, #15
    11d0:	041b      	lsls	r3, r3, #16
    11d2:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
    11d4:	7872      	ldrb	r2, [r6, #1]
    11d6:	0489      	lsls	r1, r1, #18
    11d8:	0612      	lsls	r2, r2, #24
    11da:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    11dc:	21c0      	movs	r1, #192	; 0xc0


	return STATUS_OK;
    11de:	2000      	movs	r0, #0
			     EVSYS_CHANNEL_PATH(config->path)         |
    11e0:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    11e2:	7832      	ldrb	r2, [r6, #0]
    11e4:	0509      	lsls	r1, r1, #20
    11e6:	0692      	lsls	r2, r2, #26
    11e8:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
    11ea:	4313      	orrs	r3, r2
    11ec:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    11ee:	607c      	str	r4, [r7, #4]
}
    11f0:	b005      	add	sp, #20
    11f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    11f4:	3401      	adds	r4, #1
    11f6:	b2e4      	uxtb	r4, r4
		tmp = tmp >> 1;
    11f8:	0849      	lsrs	r1, r1, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    11fa:	2c0c      	cmp	r4, #12
    11fc:	d1bd      	bne.n	117a <events_allocate+0x1e>
	bool allocated = false;
    11fe:	2300      	movs	r3, #0
    1200:	e7c5      	b.n	118e <events_allocate+0x32>
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	0000c986 	.word	0x0000c986
    1208:	00000110 	.word	0x00000110
    120c:	00000048 	.word	0x00000048
    1210:	00000014 	.word	0x00000014
    1214:	000000d8 	.word	0x000000d8
    1218:	0000027c 	.word	0x0000027c

0000121c <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    121c:	22f8      	movs	r2, #248	; 0xf8
    121e:	7803      	ldrb	r3, [r0, #0]
    1220:	0152      	lsls	r2, r2, #5
    1222:	3301      	adds	r3, #1
    1224:	021b      	lsls	r3, r3, #8
    1226:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
    1228:	221f      	movs	r2, #31
    122a:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    122c:	4a03      	ldr	r2, [pc, #12]	; (123c <events_attach_user+0x20>)
    122e:	430b      	orrs	r3, r1
    1230:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    1232:	6843      	ldr	r3, [r0, #4]

	return STATUS_OK;
}
    1234:	2000      	movs	r0, #0
	EVSYS->CHANNEL.reg = resource->channel_reg;
    1236:	6053      	str	r3, [r2, #4]
}
    1238:	4770      	bx	lr
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	42000400 	.word	0x42000400

00001240 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1242:	2500      	movs	r5, #0
{
    1244:	4e0f      	ldr	r6, [pc, #60]	; (1284 <_tcc_interrupt_handler+0x44>)
	struct tcc_module *module =
    1246:	4b10      	ldr	r3, [pc, #64]	; (1288 <_tcc_interrupt_handler+0x48>)
{
    1248:	447e      	add	r6, pc
	struct tcc_module *module =
    124a:	58f3      	ldr	r3, [r6, r3]
    124c:	0080      	lsls	r0, r0, #2
    124e:	58c4      	ldr	r4, [r0, r3]
    1250:	9300      	str	r3, [sp, #0]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1252:	6823      	ldr	r3, [r4, #0]
    1254:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    125a:	400b      	ands	r3, r1
    125c:	401a      	ands	r2, r3
    125e:	9200      	str	r2, [sp, #0]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1260:	4b0a      	ldr	r3, [pc, #40]	; (128c <_tcc_interrupt_handler+0x4c>)
    1262:	58f3      	ldr	r3, [r6, r3]
    1264:	9301      	str	r3, [sp, #4]
    1266:	595f      	ldr	r7, [r3, r5]
    1268:	9b00      	ldr	r3, [sp, #0]
    126a:	421f      	tst	r7, r3
    126c:	d005      	beq.n	127a <_tcc_interrupt_handler+0x3a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    126e:	1963      	adds	r3, r4, r5
    1270:	685b      	ldr	r3, [r3, #4]
    1272:	0020      	movs	r0, r4
    1274:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1276:	6823      	ldr	r3, [r4, #0]
    1278:	62df      	str	r7, [r3, #44]	; 0x2c
    127a:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    127c:	2d30      	cmp	r5, #48	; 0x30
    127e:	d1ef      	bne.n	1260 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1280:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	0000c8a0 	.word	0x0000c8a0
    1288:	0000000c 	.word	0x0000000c
    128c:	00000054 	.word	0x00000054

00001290 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1290:	b507      	push	{r0, r1, r2, lr}
    1292:	4b04      	ldr	r3, [pc, #16]	; (12a4 <TCC0_Handler+0x14>)
    1294:	4a04      	ldr	r2, [pc, #16]	; (12a8 <TCC0_Handler+0x18>)
    1296:	447b      	add	r3, pc
    1298:	589b      	ldr	r3, [r3, r2]
    129a:	2000      	movs	r0, #0
    129c:	9301      	str	r3, [sp, #4]
    129e:	4798      	blx	r3
    12a0:	bd07      	pop	{r0, r1, r2, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	0000c852 	.word	0x0000c852
    12a8:	00000068 	.word	0x00000068

000012ac <TCC1_Handler>:
    12ac:	b507      	push	{r0, r1, r2, lr}
    12ae:	4b04      	ldr	r3, [pc, #16]	; (12c0 <TCC1_Handler+0x14>)
    12b0:	4a04      	ldr	r2, [pc, #16]	; (12c4 <TCC1_Handler+0x18>)
    12b2:	447b      	add	r3, pc
    12b4:	589b      	ldr	r3, [r3, r2]
    12b6:	2001      	movs	r0, #1
    12b8:	9301      	str	r3, [sp, #4]
    12ba:	4798      	blx	r3
    12bc:	bd07      	pop	{r0, r1, r2, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	0000c836 	.word	0x0000c836
    12c4:	00000068 	.word	0x00000068

000012c8 <TCC2_Handler>:
    12c8:	b507      	push	{r0, r1, r2, lr}
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <TCC2_Handler+0x14>)
    12cc:	4a04      	ldr	r2, [pc, #16]	; (12e0 <TCC2_Handler+0x18>)
    12ce:	447b      	add	r3, pc
    12d0:	589b      	ldr	r3, [r3, r2]
    12d2:	2002      	movs	r0, #2
    12d4:	9301      	str	r3, [sp, #4]
    12d6:	4798      	blx	r3
    12d8:	bd07      	pop	{r0, r1, r2, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	0000c81a 	.word	0x0000c81a
    12e0:	00000068 	.word	0x00000068

000012e4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12e4:	1c93      	adds	r3, r2, #2
    12e6:	009b      	lsls	r3, r3, #2
    12e8:	5019      	str	r1, [r3, r0]
    12ea:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    12ec:	2a02      	cmp	r2, #2
    12ee:	d104      	bne.n	12fa <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    12f0:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    12f2:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    12f4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    12f6:	2000      	movs	r0, #0
    12f8:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    12fa:	2a03      	cmp	r2, #3
    12fc:	d101      	bne.n	1302 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    12fe:	321d      	adds	r2, #29
    1300:	e7f7      	b.n	12f2 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1302:	2101      	movs	r1, #1
    1304:	4091      	lsls	r1, r2
    1306:	430b      	orrs	r3, r1
    1308:	e7f4      	b.n	12f4 <tc_register_callback+0x10>
	...

0000130c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    130c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    130e:	2601      	movs	r6, #1
{
    1310:	4b16      	ldr	r3, [pc, #88]	; (136c <_tc_interrupt_handler+0x60>)
	struct tc_module *module
    1312:	4a17      	ldr	r2, [pc, #92]	; (1370 <_tc_interrupt_handler+0x64>)
{
    1314:	447b      	add	r3, pc
	struct tc_module *module
    1316:	589b      	ldr	r3, [r3, r2]
    1318:	0080      	lsls	r0, r0, #2
    131a:	58c4      	ldr	r4, [r0, r3]
    131c:	9301      	str	r3, [sp, #4]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    131e:	6823      	ldr	r3, [r4, #0]
    1320:	7e22      	ldrb	r2, [r4, #24]
    1322:	7e65      	ldrb	r5, [r4, #25]
    1324:	7b9b      	ldrb	r3, [r3, #14]
    1326:	4015      	ands	r5, r2
    1328:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    132a:	4235      	tst	r5, r6
    132c:	d004      	beq.n	1338 <_tc_interrupt_handler+0x2c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    132e:	68a3      	ldr	r3, [r4, #8]
    1330:	0020      	movs	r0, r4
    1332:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1334:	6823      	ldr	r3, [r4, #0]
    1336:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1338:	2602      	movs	r6, #2
    133a:	4235      	tst	r5, r6
    133c:	d004      	beq.n	1348 <_tc_interrupt_handler+0x3c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    133e:	68e3      	ldr	r3, [r4, #12]
    1340:	0020      	movs	r0, r4
    1342:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1344:	6823      	ldr	r3, [r4, #0]
    1346:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1348:	2610      	movs	r6, #16
    134a:	4235      	tst	r5, r6
    134c:	d004      	beq.n	1358 <_tc_interrupt_handler+0x4c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    134e:	6923      	ldr	r3, [r4, #16]
    1350:	0020      	movs	r0, r4
    1352:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1354:	6823      	ldr	r3, [r4, #0]
    1356:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1358:	2620      	movs	r6, #32
    135a:	4235      	tst	r5, r6
    135c:	d004      	beq.n	1368 <_tc_interrupt_handler+0x5c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    135e:	6963      	ldr	r3, [r4, #20]
    1360:	0020      	movs	r0, r4
    1362:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1364:	6823      	ldr	r3, [r4, #0]
    1366:	739e      	strb	r6, [r3, #14]
	}
}
    1368:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	0000c7d4 	.word	0x0000c7d4
    1370:	00000180 	.word	0x00000180

00001374 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1374:	b507      	push	{r0, r1, r2, lr}
    1376:	4b04      	ldr	r3, [pc, #16]	; (1388 <TC3_Handler+0x14>)
    1378:	4a04      	ldr	r2, [pc, #16]	; (138c <TC3_Handler+0x18>)
    137a:	447b      	add	r3, pc
    137c:	589b      	ldr	r3, [r3, r2]
    137e:	2000      	movs	r0, #0
    1380:	9301      	str	r3, [sp, #4]
    1382:	4798      	blx	r3
    1384:	bd07      	pop	{r0, r1, r2, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	0000c76e 	.word	0x0000c76e
    138c:	000000a4 	.word	0x000000a4

00001390 <TC4_Handler>:
    1390:	b507      	push	{r0, r1, r2, lr}
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <TC4_Handler+0x14>)
    1394:	4a04      	ldr	r2, [pc, #16]	; (13a8 <TC4_Handler+0x18>)
    1396:	447b      	add	r3, pc
    1398:	589b      	ldr	r3, [r3, r2]
    139a:	2001      	movs	r0, #1
    139c:	9301      	str	r3, [sp, #4]
    139e:	4798      	blx	r3
    13a0:	bd07      	pop	{r0, r1, r2, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	0000c752 	.word	0x0000c752
    13a8:	000000a4 	.word	0x000000a4

000013ac <TC5_Handler>:
    13ac:	b507      	push	{r0, r1, r2, lr}
    13ae:	4b04      	ldr	r3, [pc, #16]	; (13c0 <TC5_Handler+0x14>)
    13b0:	4a04      	ldr	r2, [pc, #16]	; (13c4 <TC5_Handler+0x18>)
    13b2:	447b      	add	r3, pc
    13b4:	589b      	ldr	r3, [r3, r2]
    13b6:	2002      	movs	r0, #2
    13b8:	9301      	str	r3, [sp, #4]
    13ba:	4798      	blx	r3
    13bc:	bd07      	pop	{r0, r1, r2, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	0000c736 	.word	0x0000c736
    13c4:	000000a4 	.word	0x000000a4

000013c8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    13c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    13ca:	4b0c      	ldr	r3, [pc, #48]	; (13fc <_tc_get_inst_index+0x34>)
{
    13cc:	0001      	movs	r1, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    13ce:	447b      	add	r3, pc
    13d0:	0018      	movs	r0, r3
    13d2:	aa01      	add	r2, sp, #4
    13d4:	c870      	ldmia	r0!, {r4, r5, r6}
    13d6:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    13d8:	9a01      	ldr	r2, [sp, #4]
    13da:	4291      	cmp	r1, r2
    13dc:	d00a      	beq.n	13f4 <_tc_get_inst_index+0x2c>
    13de:	685a      	ldr	r2, [r3, #4]
    13e0:	4291      	cmp	r1, r2
    13e2:	d009      	beq.n	13f8 <_tc_get_inst_index+0x30>
    13e4:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    13e6:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
    13e8:	428b      	cmp	r3, r1
    13ea:	d101      	bne.n	13f0 <_tc_get_inst_index+0x28>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    13ec:	3002      	adds	r0, #2
			return i;
    13ee:	b2c0      	uxtb	r0, r0
}
    13f0:	b004      	add	sp, #16
    13f2:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    13f4:	2000      	movs	r0, #0
    13f6:	e7fa      	b.n	13ee <_tc_get_inst_index+0x26>
    13f8:	2001      	movs	r0, #1
    13fa:	e7f8      	b.n	13ee <_tc_get_inst_index+0x26>
    13fc:	0000c222 	.word	0x0000c222

00001400 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	4f8c      	ldr	r7, [pc, #560]	; (1634 <tc_init+0x234>)
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1404:	4b8c      	ldr	r3, [pc, #560]	; (1638 <tc_init+0x238>)
{
    1406:	447f      	add	r7, pc
	uint8_t instance = _tc_get_inst_index(hw);
    1408:	58fb      	ldr	r3, [r7, r3]
{
    140a:	b08b      	sub	sp, #44	; 0x2c
    140c:	0006      	movs	r6, r0
	uint8_t instance = _tc_get_inst_index(hw);
    140e:	0008      	movs	r0, r1
{
    1410:	000d      	movs	r5, r1
    1412:	0014      	movs	r4, r2
	uint8_t instance = _tc_get_inst_index(hw);
    1414:	9300      	str	r3, [sp, #0]
    1416:	4798      	blx	r3

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1418:	ab06      	add	r3, sp, #24
    141a:	9301      	str	r3, [sp, #4]
    141c:	231b      	movs	r3, #27
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    141e:	2180      	movs	r1, #128	; 0x80
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1420:	9a01      	ldr	r2, [sp, #4]
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1422:	0149      	lsls	r1, r1, #5
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1424:	7013      	strb	r3, [r2, #0]
    1426:	3301      	adds	r3, #1
    1428:	7053      	strb	r3, [r2, #1]
    142a:	7093      	strb	r3, [r2, #2]
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    142c:	ab08      	add	r3, sp, #32
    142e:	8059      	strh	r1, [r3, #2]
    1430:	2280      	movs	r2, #128	; 0x80
    1432:	2180      	movs	r1, #128	; 0x80
    1434:	0112      	lsls	r2, r2, #4
    1436:	0189      	lsls	r1, r1, #6
    1438:	8099      	strh	r1, [r3, #4]
    143a:	801a      	strh	r2, [r3, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    143c:	2300      	movs	r3, #0
    143e:	60b3      	str	r3, [r6, #8]
    1440:	60f3      	str	r3, [r6, #12]
    1442:	6133      	str	r3, [r6, #16]
    1444:	6173      	str	r3, [r6, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1446:	7633      	strb	r3, [r6, #24]
	module_inst->enable_callback_mask       = 0x00;
    1448:	7673      	strb	r3, [r6, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    144a:	4b7c      	ldr	r3, [pc, #496]	; (163c <tc_init+0x23c>)
	uint8_t instance = _tc_get_inst_index(hw);
    144c:	9000      	str	r0, [sp, #0]
	_tc_instances[instance] = module_inst;
    144e:	58fb      	ldr	r3, [r7, r3]
    1450:	9302      	str	r3, [sp, #8]
    1452:	9902      	ldr	r1, [sp, #8]
    1454:	0083      	lsls	r3, r0, #2
    1456:	505e      	str	r6, [r3, r1]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1458:	6035      	str	r5, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    145a:	78a3      	ldrb	r3, [r4, #2]
    145c:	9203      	str	r2, [sp, #12]
    145e:	2b08      	cmp	r3, #8
    1460:	d104      	bne.n	146c <tc_init+0x6c>
    1462:	9a00      	ldr	r2, [sp, #0]
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1464:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1466:	07d2      	lsls	r2, r2, #31
    1468:	d400      	bmi.n	146c <tc_init+0x6c>
    146a:	e0cd      	b.n	1608 <tc_init+0x208>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    146c:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    146e:	7133      	strb	r3, [r6, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1470:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1472:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1474:	4213      	tst	r3, r2
    1476:	d000      	beq.n	147a <tc_init+0x7a>
    1478:	e0c6      	b.n	1608 <tc_init+0x208>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    147a:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    147c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    147e:	06db      	lsls	r3, r3, #27
    1480:	d500      	bpl.n	1484 <tc_init+0x84>
    1482:	e0c1      	b.n	1608 <tc_init+0x208>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1484:	2102      	movs	r1, #2
    1486:	882b      	ldrh	r3, [r5, #0]
    1488:	400b      	ands	r3, r1
    148a:	d000      	beq.n	148e <tc_init+0x8e>
    148c:	e0bc      	b.n	1608 <tc_init+0x208>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    148e:	7c21      	ldrb	r1, [r4, #16]
    1490:	2900      	cmp	r1, #0
    1492:	d00a      	beq.n	14aa <tc_init+0xaa>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1494:	a907      	add	r1, sp, #28
	config->powersave    = false;
    1496:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1498:	7e23      	ldrb	r3, [r4, #24]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    149a:	708a      	strb	r2, [r1, #2]
    149c:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    149e:	4b68      	ldr	r3, [pc, #416]	; (1640 <tc_init+0x240>)
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14a0:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    14a2:	58fb      	ldr	r3, [r7, r3]
    14a4:	7d20      	ldrb	r0, [r4, #20]
    14a6:	9302      	str	r3, [sp, #8]
    14a8:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    14aa:	7f23      	ldrb	r3, [r4, #28]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d010      	beq.n	14d2 <tc_init+0xd2>
	config->powersave    = false;
    14b0:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14b2:	2301      	movs	r3, #1
    14b4:	a907      	add	r1, sp, #28
	config->powersave    = false;
    14b6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14b8:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14ba:	708b      	strb	r3, [r1, #2]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14bc:	704b      	strb	r3, [r1, #1]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14be:	18a2      	adds	r2, r4, r2
		system_pinmux_pin_set_config(
    14c0:	331f      	adds	r3, #31
    14c2:	18e3      	adds	r3, r4, r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14c4:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    14c6:	7818      	ldrb	r0, [r3, #0]
    14c8:	4b5d      	ldr	r3, [pc, #372]	; (1640 <tc_init+0x240>)
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14ca:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    14cc:	58fb      	ldr	r3, [r7, r3]
    14ce:	9302      	str	r3, [sp, #8]
    14d0:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    14d2:	9900      	ldr	r1, [sp, #0]
    14d4:	4b5b      	ldr	r3, [pc, #364]	; (1644 <tc_init+0x244>)
    14d6:	aa08      	add	r2, sp, #32
    14d8:	0049      	lsls	r1, r1, #1
    14da:	6a18      	ldr	r0, [r3, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    14dc:	5a89      	ldrh	r1, [r1, r2]
    14de:	4301      	orrs	r1, r0
    14e0:	6219      	str	r1, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    14e2:	78a1      	ldrb	r1, [r4, #2]
    14e4:	2908      	cmp	r1, #8
    14e6:	d106      	bne.n	14f6 <tc_init+0xf6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    14e8:	9900      	ldr	r1, [sp, #0]
    14ea:	6a18      	ldr	r0, [r3, #32]
    14ec:	3101      	adds	r1, #1
    14ee:	0049      	lsls	r1, r1, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    14f0:	5a8a      	ldrh	r2, [r1, r2]
    14f2:	4302      	orrs	r2, r0
    14f4:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    14f6:	7823      	ldrb	r3, [r4, #0]
    14f8:	a905      	add	r1, sp, #20
    14fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    14fc:	9a00      	ldr	r2, [sp, #0]
    14fe:	9b01      	ldr	r3, [sp, #4]
    1500:	5c9b      	ldrb	r3, [r3, r2]
    1502:	9300      	str	r3, [sp, #0]
    1504:	0018      	movs	r0, r3
    1506:	4b50      	ldr	r3, [pc, #320]	; (1648 <tc_init+0x248>)
    1508:	58fb      	ldr	r3, [r7, r3]
    150a:	9301      	str	r3, [sp, #4]
    150c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    150e:	4b4f      	ldr	r3, [pc, #316]	; (164c <tc_init+0x24c>)
    1510:	9800      	ldr	r0, [sp, #0]
    1512:	58fb      	ldr	r3, [r7, r3]
    1514:	9300      	str	r3, [sp, #0]
    1516:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1518:	8922      	ldrh	r2, [r4, #8]
    151a:	88a3      	ldrh	r3, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    151c:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    151e:	4313      	orrs	r3, r2
			(uint32_t)config->wave_generation |
    1520:	78a2      	ldrb	r2, [r4, #2]
    1522:	430a      	orrs	r2, r1
	ctrla_tmp =
    1524:	431a      	orrs	r2, r3
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1526:	7863      	ldrb	r3, [r4, #1]
    1528:	2b00      	cmp	r3, #0
    152a:	d002      	beq.n	1532 <tc_init+0x132>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    152c:	9b03      	ldr	r3, [sp, #12]
    152e:	4313      	orrs	r3, r2
    1530:	001a      	movs	r2, r3
    1532:	6833      	ldr	r3, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1534:	7bd9      	ldrb	r1, [r3, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1536:	b249      	sxtb	r1, r1
    1538:	2900      	cmp	r1, #0
    153a:	dbfb      	blt.n	1534 <tc_init+0x134>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    153c:	802a      	strh	r2, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    153e:	7b62      	ldrb	r2, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1540:	1e51      	subs	r1, r2, #1
    1542:	418a      	sbcs	r2, r1
	}

	if (config->count_direction) {
    1544:	7ba1      	ldrb	r1, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1546:	0092      	lsls	r2, r2, #2
	if (config->count_direction) {
    1548:	2900      	cmp	r1, #0
    154a:	d001      	beq.n	1550 <tc_init+0x150>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    154c:	2101      	movs	r1, #1
    154e:	430a      	orrs	r2, r1
    1550:	7bd9      	ldrb	r1, [r3, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1552:	b249      	sxtb	r1, r1
    1554:	2900      	cmp	r1, #0
    1556:	dbfb      	blt.n	1550 <tc_init+0x150>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1558:	21ff      	movs	r1, #255	; 0xff
    155a:	7129      	strb	r1, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    155c:	2a00      	cmp	r2, #0
    155e:	d004      	beq.n	156a <tc_init+0x16a>
    1560:	7bd9      	ldrb	r1, [r3, #15]
		while (tc_is_syncing(module_inst)) {
    1562:	b249      	sxtb	r1, r1
    1564:	2900      	cmp	r1, #0
    1566:	dbfb      	blt.n	1560 <tc_init+0x160>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1568:	716a      	strb	r2, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    156a:	7ae2      	ldrb	r2, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    156c:	7aa1      	ldrb	r1, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    156e:	2a00      	cmp	r2, #0
    1570:	d001      	beq.n	1576 <tc_init+0x176>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1572:	2210      	movs	r2, #16
    1574:	4311      	orrs	r1, r2
		if (config->enable_capture_on_channel[i] == true) {
    1576:	7b22      	ldrb	r2, [r4, #12]
    1578:	2a00      	cmp	r2, #0
    157a:	d001      	beq.n	1580 <tc_init+0x180>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    157c:	2220      	movs	r2, #32
    157e:	4311      	orrs	r1, r2
    1580:	7bda      	ldrb	r2, [r3, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1582:	b252      	sxtb	r2, r2
    1584:	2a00      	cmp	r2, #0
    1586:	dbfb      	blt.n	1580 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1588:	71a9      	strb	r1, [r5, #6]
    158a:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    158c:	b252      	sxtb	r2, r2
    158e:	2a00      	cmp	r2, #0
    1590:	dbfb      	blt.n	158a <tc_init+0x18a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1592:	7932      	ldrb	r2, [r6, #4]
    1594:	2a04      	cmp	r2, #4
    1596:	d017      	beq.n	15c8 <tc_init+0x1c8>
    1598:	2a08      	cmp	r2, #8
    159a:	d037      	beq.n	160c <tc_init+0x20c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    159c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    159e:	2a00      	cmp	r2, #0
    15a0:	d132      	bne.n	1608 <tc_init+0x208>
    15a2:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15a4:	b252      	sxtb	r2, r2
    15a6:	2a00      	cmp	r2, #0
    15a8:	dbfb      	blt.n	15a2 <tc_init+0x1a2>
				= config->counter_16_bit.value;
    15aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    15ac:	822a      	strh	r2, [r5, #16]
    15ae:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15b0:	b252      	sxtb	r2, r2
    15b2:	2a00      	cmp	r2, #0
    15b4:	dbfb      	blt.n	15ae <tc_init+0x1ae>
					config->counter_16_bit.compare_capture_channel[0];
    15b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    15b8:	832a      	strh	r2, [r5, #24]
    15ba:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15bc:	b252      	sxtb	r2, r2
    15be:	2a00      	cmp	r2, #0
    15c0:	dbfb      	blt.n	15ba <tc_init+0x1ba>
					config->counter_16_bit.compare_capture_channel[1];
    15c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    15c4:	836b      	strh	r3, [r5, #26]
    15c6:	e01e      	b.n	1606 <tc_init+0x206>
    15c8:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15ca:	b252      	sxtb	r2, r2
    15cc:	2a00      	cmp	r2, #0
    15ce:	dbfb      	blt.n	15c8 <tc_init+0x1c8>
					config->counter_8_bit.value;
    15d0:	0022      	movs	r2, r4
    15d2:	3228      	adds	r2, #40	; 0x28
    15d4:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.COUNT.reg =
    15d6:	742a      	strb	r2, [r5, #16]
    15d8:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15da:	b252      	sxtb	r2, r2
    15dc:	2a00      	cmp	r2, #0
    15de:	dbfb      	blt.n	15d8 <tc_init+0x1d8>
					config->counter_8_bit.period;
    15e0:	0022      	movs	r2, r4
    15e2:	3229      	adds	r2, #41	; 0x29
    15e4:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.PER.reg =
    15e6:	752a      	strb	r2, [r5, #20]
    15e8:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15ea:	b252      	sxtb	r2, r2
    15ec:	2a00      	cmp	r2, #0
    15ee:	dbfb      	blt.n	15e8 <tc_init+0x1e8>
					config->counter_8_bit.compare_capture_channel[0];
    15f0:	0022      	movs	r2, r4
    15f2:	322a      	adds	r2, #42	; 0x2a
    15f4:	7812      	ldrb	r2, [r2, #0]
			hw->COUNT8.CC[0].reg =
    15f6:	762a      	strb	r2, [r5, #24]
    15f8:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    15fa:	b252      	sxtb	r2, r2
    15fc:	2a00      	cmp	r2, #0
    15fe:	dbfb      	blt.n	15f8 <tc_init+0x1f8>
					config->counter_8_bit.compare_capture_channel[1];
    1600:	342b      	adds	r4, #43	; 0x2b
    1602:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1604:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1606:	2000      	movs	r0, #0
}
    1608:	b00b      	add	sp, #44	; 0x2c
    160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    160c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    160e:	b252      	sxtb	r2, r2
    1610:	2a00      	cmp	r2, #0
    1612:	dbfb      	blt.n	160c <tc_init+0x20c>
				= config->counter_32_bit.value;
    1614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1616:	612a      	str	r2, [r5, #16]
    1618:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    161a:	b252      	sxtb	r2, r2
    161c:	2a00      	cmp	r2, #0
    161e:	dbfb      	blt.n	1618 <tc_init+0x218>
			hw->COUNT32.CC[0].reg =
    1620:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1622:	61aa      	str	r2, [r5, #24]
    1624:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1626:	b252      	sxtb	r2, r2
    1628:	2a00      	cmp	r2, #0
    162a:	dbfb      	blt.n	1624 <tc_init+0x224>
					config->counter_32_bit.compare_capture_channel[1];
    162c:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    162e:	61eb      	str	r3, [r5, #28]
    1630:	e7e9      	b.n	1606 <tc_init+0x206>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	0000c6e2 	.word	0x0000c6e2
    1638:	00000150 	.word	0x00000150
    163c:	00000180 	.word	0x00000180
    1640:	00000304 	.word	0x00000304
    1644:	40000400 	.word	0x40000400
    1648:	000000d8 	.word	0x000000d8
    164c:	0000027c 	.word	0x0000027c

00001650 <transfer_start>:
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	mcfg.mux_position = MUX_PB22D_SERCOM5_PAD2;
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
}
static void transfer_start(struct tc_module* const resource )
{
    1650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Take over the CS pin and hold it low
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1652:	2001      	movs	r0, #1
	config->powersave    = false;
    1654:	a903      	add	r1, sp, #12
    1656:	2300      	movs	r3, #0
    1658:	7048      	strb	r0, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
    165a:	2080      	movs	r0, #128	; 0x80
    165c:	70cb      	strb	r3, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    165e:	708b      	strb	r3, [r1, #2]
	mcfg.mux_position = MUX_PB22A_EIC_EXTINT6;
    1660:	700b      	strb	r3, [r1, #0]
    1662:	4b06      	ldr	r3, [pc, #24]	; (167c <transfer_start+0x2c>)
    1664:	03c0      	lsls	r0, r0, #15
{
    1666:	4a06      	ldr	r2, [pc, #24]	; (1680 <transfer_start+0x30>)
    1668:	6018      	str	r0, [r3, #0]
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    166a:	4b06      	ldr	r3, [pc, #24]	; (1684 <transfer_start+0x34>)
{
    166c:	447a      	add	r2, pc
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    166e:	58d3      	ldr	r3, [r2, r3]
    1670:	2036      	movs	r0, #54	; 0x36
    1672:	9301      	str	r3, [sp, #4]
    1674:	4798      	blx	r3
}
    1676:	b005      	add	sp, #20
    1678:	bd00      	pop	{pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	41004494 	.word	0x41004494
    1680:	0000c47c 	.word	0x0000c47c
    1684:	00000304 	.word	0x00000304

00001688 <transfer_done>:
{
    1688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	transfer_is_done = true;
    168a:	2001      	movs	r0, #1
		port_base->OUTSET.reg = pin_mask;
    168c:	2180      	movs	r1, #128	; 0x80
{
    168e:	4b0b      	ldr	r3, [pc, #44]	; (16bc <transfer_done+0x34>)
	transfer_is_done = true;
    1690:	4a0b      	ldr	r2, [pc, #44]	; (16c0 <transfer_done+0x38>)
{
    1692:	447b      	add	r3, pc
	transfer_is_done = true;
    1694:	589a      	ldr	r2, [r3, r2]
    1696:	03c9      	lsls	r1, r1, #15
    1698:	9201      	str	r2, [sp, #4]
    169a:	7010      	strb	r0, [r2, #0]
    169c:	4a09      	ldr	r2, [pc, #36]	; (16c4 <transfer_done+0x3c>)
    169e:	6011      	str	r1, [r2, #0]
    16a0:	2200      	movs	r2, #0
    16a2:	a903      	add	r1, sp, #12
    16a4:	70ca      	strb	r2, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16a6:	708a      	strb	r2, [r1, #2]
	mcfg.mux_position = MUX_PB22D_SERCOM5_PAD2;
    16a8:	3203      	adds	r2, #3
    16aa:	700a      	strb	r2, [r1, #0]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    16ac:	4a06      	ldr	r2, [pc, #24]	; (16c8 <transfer_done+0x40>)
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    16ae:	7048      	strb	r0, [r1, #1]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    16b0:	589b      	ldr	r3, [r3, r2]
    16b2:	3035      	adds	r0, #53	; 0x35
    16b4:	9301      	str	r3, [sp, #4]
    16b6:	4798      	blx	r3
}
    16b8:	b005      	add	sp, #20
    16ba:	bd00      	pop	{pc}
    16bc:	0000c456 	.word	0x0000c456
    16c0:	000001e4 	.word	0x000001e4
    16c4:	41004498 	.word	0x41004498
    16c8:	00000304 	.word	0x00000304

000016cc <SYSCTRL_Handler>:
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    16cc:	2280      	movs	r2, #128	; 0x80
    16ce:	4b05      	ldr	r3, [pc, #20]	; (16e4 <SYSCTRL_Handler+0x18>)
    16d0:	00d2      	lsls	r2, r2, #3
    16d2:	6899      	ldr	r1, [r3, #8]
    16d4:	4211      	tst	r1, r2
    16d6:	d003      	beq.n	16e0 <SYSCTRL_Handler+0x14>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    16d8:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    16da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    16de:	bf30      	wfi
}
    16e0:	4770      	bx	lr
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	40000800 	.word	0x40000800

000016e8 <debug_print>:
	// Sleep, wakes on button press
	sleepmgr_sleep(SLEEPMGR_STANDBY);
	system_reset();
}

void debug_print(const char* fmt, ...) {
    16e8:	b40f      	push	{r0, r1, r2, r3}
    16ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    16ec:	a906      	add	r1, sp, #24
    16ee:	c901      	ldmia	r1!, {r0}
    16f0:	4b05      	ldr	r3, [pc, #20]	; (1708 <debug_print+0x20>)
	#ifdef ENABLE_USB_DEBUG
	va_list args;
	va_start(args, fmt);
	vprintf(fmt, args);
    16f2:	4a06      	ldr	r2, [pc, #24]	; (170c <debug_print+0x24>)
	va_start(args, fmt);
    16f4:	9103      	str	r1, [sp, #12]
void debug_print(const char* fmt, ...) {
    16f6:	447b      	add	r3, pc
	vprintf(fmt, args);
    16f8:	589b      	ldr	r3, [r3, r2]
    16fa:	9301      	str	r3, [sp, #4]
    16fc:	4798      	blx	r3
	va_end(args);
	#endif
    16fe:	b005      	add	sp, #20
    1700:	bc08      	pop	{r3}
    1702:	b004      	add	sp, #16
    1704:	4718      	bx	r3
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	0000c3f2 	.word	0x0000c3f2
    170c:	00000198 	.word	0x00000198

00001710 <fatal_error>:
void fatal_error(int numBlinks, const char* fmt, ...) {
    1710:	b40e      	push	{r1, r2, r3}
    1712:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    1714:	0007      	movs	r7, r0
	config->direction  = PORT_PIN_DIR_INPUT;
    1716:	2500      	movs	r5, #0
    1718:	a909      	add	r1, sp, #36	; 0x24
    171a:	c901      	ldmia	r1!, {r0}
    171c:	4e2d      	ldr	r6, [pc, #180]	; (17d4 <fatal_error+0xc4>)
	debug_print(fmt, args);
    171e:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <fatal_error+0xc8>)
void fatal_error(int numBlinks, const char* fmt, ...) {
    1720:	447e      	add	r6, pc
	va_start(args, fmt);
    1722:	9103      	str	r1, [sp, #12]
	debug_print(fmt, args);
    1724:	58f3      	ldr	r3, [r6, r3]
    1726:	ac02      	add	r4, sp, #8
    1728:	9301      	str	r3, [sp, #4]
	num_blinks = num_blinks * 2;
    172a:	007f      	lsls	r7, r7, #1
	debug_print(fmt, args);
    172c:	4798      	blx	r3
	config->powersave  = false;
    172e:	70a5      	strb	r5, [r4, #2]
    1730:	4a2a      	ldr	r2, [pc, #168]	; (17dc <fatal_error+0xcc>)
    1732:	4b2b      	ldr	r3, [pc, #172]	; (17e0 <fatal_error+0xd0>)
    1734:	58b2      	ldr	r2, [r6, r2]
    1736:	58f3      	ldr	r3, [r6, r3]
    1738:	9201      	str	r2, [sp, #4]
	while(num_blinks > 0) {
    173a:	2f00      	cmp	r7, #0
    173c:	dc33      	bgt.n	17a6 <fatal_error+0x96>
		port_base->OUTCLR.reg = pin_mask;
    173e:	2180      	movs	r1, #128	; 0x80
	cfg.direction = PORT_PIN_DIR_INPUT;
    1740:	2500      	movs	r5, #0
    1742:	4a28      	ldr	r2, [pc, #160]	; (17e4 <fatal_error+0xd4>)
    1744:	0109      	lsls	r1, r1, #4
    1746:	7025      	strb	r5, [r4, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    1748:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(LED_OUT_PIN, &cfg);
    174a:	202b      	movs	r0, #43	; 0x2b
    174c:	6011      	str	r1, [r2, #0]
    174e:	0021      	movs	r1, r4
    1750:	4798      	blx	r3
	delay_ms(500);
    1752:	20fa      	movs	r0, #250	; 0xfa
    1754:	9b01      	ldr	r3, [sp, #4]
    1756:	0040      	lsls	r0, r0, #1
    1758:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    175a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    175c:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    1760:	4b21      	ldr	r3, [pc, #132]	; (17e8 <fatal_error+0xd8>)
    1762:	58f1      	ldr	r1, [r6, r3]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    1764:	4b21      	ldr	r3, [pc, #132]	; (17ec <fatal_error+0xdc>)
    1766:	700d      	strb	r5, [r1, #0]
    1768:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    176a:	051b      	lsls	r3, r3, #20
    176c:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    176e:	2b02      	cmp	r3, #2
    1770:	d805      	bhi.n	177e <fatal_error+0x6e>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    1772:	23c0      	movs	r3, #192	; 0xc0
    1774:	4a1e      	ldr	r2, [pc, #120]	; (17f0 <fatal_error+0xe0>)
    1776:	009b      	lsls	r3, r3, #2
    1778:	6850      	ldr	r0, [r2, #4]
    177a:	4303      	orrs	r3, r0
    177c:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    177e:	2204      	movs	r2, #4
    1780:	4b1c      	ldr	r3, [pc, #112]	; (17f4 <fatal_error+0xe4>)
    1782:	6918      	ldr	r0, [r3, #16]
    1784:	4302      	orrs	r2, r0
    1786:	611a      	str	r2, [r3, #16]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    1788:	2201      	movs	r2, #1
    178a:	700a      	strb	r2, [r1, #0]
    178c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1790:	b662      	cpsie	i
  __ASM volatile ("dsb");
    1792:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    1796:	bf30      	wfi
  __ASM volatile ("dsb");
    1798:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    179c:	4a16      	ldr	r2, [pc, #88]	; (17f8 <fatal_error+0xe8>)
    179e:	60da      	str	r2, [r3, #12]
    17a0:	f3bf 8f4f 	dsb	sy
    17a4:	e7fe      	b.n	17a4 <fatal_error+0x94>
		state = !state;
    17a6:	2201      	movs	r2, #1
    17a8:	4055      	eors	r5, r2
		if (state) {
    17aa:	d00e      	beq.n	17ca <fatal_error+0xba>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    17ac:	7022      	strb	r2, [r4, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    17ae:	2200      	movs	r2, #0
    17b0:	7062      	strb	r2, [r4, #1]
		port_base->OUTSET.reg = pin_mask;
    17b2:	4a12      	ldr	r2, [pc, #72]	; (17fc <fatal_error+0xec>)
		port_base->OUTCLR.reg = pin_mask;
    17b4:	2180      	movs	r1, #128	; 0x80
    17b6:	0109      	lsls	r1, r1, #4
    17b8:	6011      	str	r1, [r2, #0]
			port_pin_set_config(LED_OUT_PIN, &cfg);
    17ba:	202b      	movs	r0, #43	; 0x2b
    17bc:	0021      	movs	r1, r4
    17be:	4798      	blx	r3
		delay_ms(blink_period_ms/2);
    17c0:	2064      	movs	r0, #100	; 0x64
    17c2:	9b01      	ldr	r3, [sp, #4]
    17c4:	4798      	blx	r3
		num_blinks--;
    17c6:	3f01      	subs	r7, #1
    17c8:	e7b2      	b.n	1730 <fatal_error+0x20>
			cfg.direction = PORT_PIN_DIR_INPUT;
    17ca:	7025      	strb	r5, [r4, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    17cc:	7065      	strb	r5, [r4, #1]
    17ce:	4a05      	ldr	r2, [pc, #20]	; (17e4 <fatal_error+0xd4>)
    17d0:	e7f0      	b.n	17b4 <fatal_error+0xa4>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	0000c3c8 	.word	0x0000c3c8
    17d8:	0000021c 	.word	0x0000021c
    17dc:	000002e4 	.word	0x000002e4
    17e0:	00000280 	.word	0x00000280
    17e4:	41004494 	.word	0x41004494
    17e8:	00000120 	.word	0x00000120
    17ec:	41002000 	.word	0x41002000
    17f0:	41004000 	.word	0x41004000
    17f4:	e000ed00 	.word	0xe000ed00
    17f8:	05fa0004 	.word	0x05fa0004
    17fc:	41004498 	.word	0x41004498

00001800 <main>:
{
    1800:	b5f0      	push	{r4, r5, r6, r7, lr}
    1802:	4fe0      	ldr	r7, [pc, #896]	; (1b84 <main+0x384>)
	system_init();
    1804:	4be0      	ldr	r3, [pc, #896]	; (1b88 <main+0x388>)
{
    1806:	447f      	add	r7, pc
	system_init();
    1808:	58fb      	ldr	r3, [r7, r3]
{
    180a:	b0a9      	sub	sp, #164	; 0xa4
	system_init();
    180c:	9300      	str	r3, [sp, #0]
    180e:	4798      	blx	r3
	delay_init();
    1810:	4bde      	ldr	r3, [pc, #888]	; (1b8c <main+0x38c>)
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    1812:	2600      	movs	r6, #0
    1814:	58fb      	ldr	r3, [r7, r3]
	conf->mode           = BOD_MODE_CONTINUOUS;
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    1816:	2501      	movs	r5, #1
    1818:	9300      	str	r3, [sp, #0]
    181a:	4798      	blx	r3
	config_bod33.action = BOD_ACTION_INTERRUPT;
    181c:	2310      	movs	r3, #16
	conf->prescaler      = BOD_PRESCALE_DIV_2;
    181e:	ac1a      	add	r4, sp, #104	; 0x68
    1820:	7123      	strb	r3, [r4, #4]
	config_bod33.mode = BOD_MODE_SAMPLED;
    1822:	33f0      	adds	r3, #240	; 0xf0
    1824:	8063      	strh	r3, [r4, #2]
	config_bod33.level = 40;						// Set to 2.8V
    1826:	3bd8      	subs	r3, #216	; 0xd8
    1828:	7163      	strb	r3, [r4, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    182a:	4bd9      	ldr	r3, [pc, #868]	; (1b90 <main+0x390>)
    182c:	8026      	strh	r6, [r4, #0]
	conf->hysteresis     = true;
    182e:	71a5      	strb	r5, [r4, #6]
	config_bod33.run_in_standby = 0;
    1830:	71e6      	strb	r6, [r4, #7]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    1832:	58fb      	ldr	r3, [r7, r3]
    1834:	0021      	movs	r1, r4
    1836:	0030      	movs	r0, r6
    1838:	9300      	str	r3, [sp, #0]
    183a:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    183c:	2102      	movs	r1, #2
    183e:	4bd5      	ldr	r3, [pc, #852]	; (1b94 <main+0x394>)
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1840:	2004      	movs	r0, #4
    1842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1844:	430a      	orrs	r2, r1
    1846:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    1848:	2280      	movs	r2, #128	; 0x80
    184a:	00d2      	lsls	r2, r2, #3
    184c:	605a      	str	r2, [r3, #4]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    184e:	4bd2      	ldr	r3, [pc, #840]	; (1b98 <main+0x398>)
	rtc_instance.hw = RTC;
    1850:	4ad2      	ldr	r2, [pc, #840]	; (1b9c <main+0x39c>)
    1852:	6019      	str	r1, [r3, #0]
    1854:	4bd2      	ldr	r3, [pc, #840]	; (1ba0 <main+0x3a0>)
    1856:	58fb      	ldr	r3, [r7, r3]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
	config->clear_on_match      = false;
    1858:	70a6      	strb	r6, [r4, #2]
    185a:	9301      	str	r3, [sp, #4]
    185c:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    185e:	711d      	strb	r5, [r3, #4]
	rtc_instance.year_init_value = 2000;
    1860:	23fa      	movs	r3, #250	; 0xfa
    1862:	9a01      	ldr	r2, [sp, #4]
    1864:	00db      	lsls	r3, r3, #3
    1866:	80d3      	strh	r3, [r2, #6]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1868:	80e3      	strh	r3, [r4, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    186a:	81e3      	strh	r3, [r4, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    186c:	2306      	movs	r3, #6
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    186e:	22a0      	movs	r2, #160	; 0xa0
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1870:	7423      	strb	r3, [r4, #16]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1872:	ab0d      	add	r3, sp, #52	; 0x34
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1874:	0112      	lsls	r2, r2, #4
    1876:	9300      	str	r3, [sp, #0]
    1878:	7019      	strb	r1, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    187a:	0019      	movs	r1, r3
    187c:	4bc9      	ldr	r3, [pc, #804]	; (1ba4 <main+0x3a4>)
    187e:	8022      	strh	r2, [r4, #0]
	config->continuously_update = false;
    1880:	70e6      	strb	r6, [r4, #3]
		config->alarm[i].time = time;
    1882:	7226      	strb	r6, [r4, #8]
    1884:	7266      	strb	r6, [r4, #9]
    1886:	72a6      	strb	r6, [r4, #10]
    1888:	72e6      	strb	r6, [r4, #11]
    188a:	7325      	strb	r5, [r4, #12]
    188c:	7365      	strb	r5, [r4, #13]
	config_rtc_calendar.clock_24h = true;
    188e:	7125      	strb	r5, [r4, #4]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1890:	58fb      	ldr	r3, [r7, r3]
    1892:	9302      	str	r3, [sp, #8]
    1894:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1896:	4bc4      	ldr	r3, [pc, #784]	; (1ba8 <main+0x3a8>)
    1898:	2004      	movs	r0, #4
    189a:	58fb      	ldr	r3, [r7, r3]
    189c:	9302      	str	r3, [sp, #8]
    189e:	4798      	blx	r3
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    18a0:	4bc2      	ldr	r3, [pc, #776]	; (1bac <main+0x3ac>)
    18a2:	0022      	movs	r2, r4
    18a4:	58fb      	ldr	r3, [r7, r3]
    18a6:	49bd      	ldr	r1, [pc, #756]	; (1b9c <main+0x39c>)
    18a8:	9801      	ldr	r0, [sp, #4]
    18aa:	9302      	str	r3, [sp, #8]
    18ac:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    18ae:	4bc0      	ldr	r3, [pc, #768]	; (1bb0 <main+0x3b0>)
    18b0:	9801      	ldr	r0, [sp, #4]
    18b2:	58fb      	ldr	r3, [r7, r3]
    18b4:	9301      	str	r3, [sp, #4]
    18b6:	4798      	blx	r3
	extint_chan_get_config_defaults(&ext_conf);
    18b8:	4bbe      	ldr	r3, [pc, #760]	; (1bb4 <main+0x3b4>)
    18ba:	0020      	movs	r0, r4
    18bc:	58fb      	ldr	r3, [r7, r3]
    18be:	9301      	str	r3, [sp, #4]
    18c0:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    18c2:	2302      	movs	r3, #2
    18c4:	72e3      	strb	r3, [r4, #11]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    18c6:	2303      	movs	r3, #3
    18c8:	931a      	str	r3, [sp, #104]	; 0x68
	extint_chan_set_config(3, &ext_conf);
    18ca:	0018      	movs	r0, r3
    18cc:	4bba      	ldr	r3, [pc, #744]	; (1bb8 <main+0x3b8>)
	ext_conf.filter_input_signal = true;
    18ce:	72a5      	strb	r5, [r4, #10]
	ext_conf.wake_if_sleeping = true;
    18d0:	7265      	strb	r5, [r4, #9]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    18d2:	6066      	str	r6, [r4, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    18d4:	7225      	strb	r5, [r4, #8]
	extint_chan_set_config(3, &ext_conf);
    18d6:	58fb      	ldr	r3, [r7, r3]
    18d8:	0021      	movs	r1, r4
    18da:	9301      	str	r3, [sp, #4]
    18dc:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    18de:	4bb7      	ldr	r3, [pc, #732]	; (1bbc <main+0x3bc>)
    18e0:	0031      	movs	r1, r6
    18e2:	58fb      	ldr	r3, [r7, r3]
    18e4:	2003      	movs	r0, #3
    18e6:	9302      	str	r3, [sp, #8]
    18e8:	4798      	blx	r3
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    18ea:	231f      	movs	r3, #31
	extint_chan_set_config(11, &ext_conf);
    18ec:	0021      	movs	r1, r4
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    18ee:	931a      	str	r3, [sp, #104]	; 0x68
	extint_chan_set_config(11, &ext_conf);
    18f0:	200b      	movs	r0, #11
    18f2:	9b01      	ldr	r3, [sp, #4]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    18f4:	6066      	str	r6, [r4, #4]
	extint_chan_set_config(11, &ext_conf);
    18f6:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    18f8:	0031      	movs	r1, r6
    18fa:	9b02      	ldr	r3, [sp, #8]
    18fc:	200b      	movs	r0, #11
    18fe:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1900:	4baf      	ldr	r3, [pc, #700]	; (1bc0 <main+0x3c0>)
    1902:	58fb      	ldr	r3, [r7, r3]
    1904:	701e      	strb	r6, [r3, #0]
    1906:	705e      	strb	r6, [r3, #1]
    1908:	709e      	strb	r6, [r3, #2]
    190a:	70de      	strb	r6, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    190c:	711d      	strb	r5, [r3, #4]
	stdio_usb_init();
    190e:	4bad      	ldr	r3, [pc, #692]	; (1bc4 <main+0x3c4>)
    1910:	58fb      	ldr	r3, [r7, r3]
    1912:	9301      	str	r3, [sp, #4]
    1914:	4798      	blx	r3
	stdio_usb_enable();
    1916:	4bac      	ldr	r3, [pc, #688]	; (1bc8 <main+0x3c8>)
    1918:	58fb      	ldr	r3, [r7, r3]
    191a:	9301      	str	r3, [sp, #4]
    191c:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    191e:	b672      	cpsid	i
  __ASM volatile ("dmb");
    1920:	f3bf 8f5f 	dmb	sy
	for (int i=0; i<PERIPH_COUNT_IRQn-1; i++) {
    1924:	0035      	movs	r5, r6
	cpu_irq_disable();
    1926:	4ba9      	ldr	r3, [pc, #676]	; (1bcc <main+0x3cc>)
    1928:	58fb      	ldr	r3, [r7, r3]
    192a:	701e      	strb	r6, [r3, #0]
    192c:	4b9a      	ldr	r3, [pc, #616]	; (1b98 <main+0x398>)
    192e:	9301      	str	r3, [sp, #4]
		system_interrupt_set_priority(i, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1930:	4ba7      	ldr	r3, [pc, #668]	; (1bd0 <main+0x3d0>)
    1932:	b268      	sxtb	r0, r5
    1934:	2103      	movs	r1, #3
    1936:	58fe      	ldr	r6, [r7, r3]
	for (int i=0; i<PERIPH_COUNT_IRQn-1; i++) {
    1938:	3501      	adds	r5, #1
		system_interrupt_set_priority(i, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    193a:	47b0      	blx	r6
	for (int i=0; i<PERIPH_COUNT_IRQn-1; i++) {
    193c:	2d1b      	cmp	r5, #27
    193e:	d1f7      	bne.n	1930 <main+0x130>
	system_interrupt_set_priority(SysTick_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1940:	2001      	movs	r0, #1
    1942:	2103      	movs	r1, #3
    1944:	4240      	negs	r0, r0
    1946:	47b0      	blx	r6
	system_interrupt_set_priority(PendSV_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1948:	2002      	movs	r0, #2
    194a:	2103      	movs	r1, #3
    194c:	4240      	negs	r0, r0
    194e:	47b0      	blx	r6
	system_interrupt_set_priority(SVCall_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1950:	2005      	movs	r0, #5
    1952:	2103      	movs	r1, #3
    1954:	4240      	negs	r0, r0
    1956:	47b0      	blx	r6
	system_interrupt_set_priority(HardFault_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1958:	200d      	movs	r0, #13
    195a:	2103      	movs	r1, #3
    195c:	4240      	negs	r0, r0
    195e:	47b0      	blx	r6
	system_interrupt_set_priority(NonMaskableInt_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    1960:	200e      	movs	r0, #14
    1962:	2103      	movs	r1, #3
    1964:	4240      	negs	r0, r0
    1966:	47b0      	blx	r6
	cpu_irq_enable();
    1968:	2601      	movs	r6, #1
    196a:	4b98      	ldr	r3, [pc, #608]	; (1bcc <main+0x3cc>)
    196c:	58fb      	ldr	r3, [r7, r3]
    196e:	9302      	str	r3, [sp, #8]
    1970:	701e      	strb	r6, [r3, #0]
    1972:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1976:	b662      	cpsie	i
	delay_ms(500);
    1978:	20fa      	movs	r0, #250	; 0xfa
    197a:	4b96      	ldr	r3, [pc, #600]	; (1bd4 <main+0x3d4>)
    197c:	0040      	lsls	r0, r0, #1
    197e:	58fb      	ldr	r3, [r7, r3]
	config->powersave  = false;
    1980:	2500      	movs	r5, #0
    1982:	9302      	str	r3, [sp, #8]
    1984:	4798      	blx	r3
	*cpu &= ~3;
    1986:	2203      	movs	r2, #3
	*cpu |= 2;
    1988:	2302      	movs	r3, #2
    198a:	4893      	ldr	r0, [pc, #588]	; (1bd8 <main+0x3d8>)
	*cpu &= ~3;
    198c:	6801      	ldr	r1, [r0, #0]
    198e:	4391      	bics	r1, r2
	*cpu |= 2;
    1990:	430b      	orrs	r3, r1
    1992:	6003      	str	r3, [r0, #0]
	USB->DEVICE.QOSCTRL.bit.DQOS = 0;
    1994:	200c      	movs	r0, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 0;
    1996:	4b91      	ldr	r3, [pc, #580]	; (1bdc <main+0x3dc>)
    1998:	78d9      	ldrb	r1, [r3, #3]
    199a:	4391      	bics	r1, r2
    199c:	70d9      	strb	r1, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 0;
    199e:	78d9      	ldrb	r1, [r3, #3]
    19a0:	4381      	bics	r1, r0
    19a2:	70d9      	strb	r1, [r3, #3]
	DMAC->QOSCTRL.bit.DQOS = 3;
    19a4:	2130      	movs	r1, #48	; 0x30
    19a6:	4b8e      	ldr	r3, [pc, #568]	; (1be0 <main+0x3e0>)
    19a8:	7b98      	ldrb	r0, [r3, #14]
    19aa:	4301      	orrs	r1, r0
	DMAC->QOSCTRL.bit.FQOS = 3;
    19ac:	200c      	movs	r0, #12
	DMAC->QOSCTRL.bit.DQOS = 3;
    19ae:	7399      	strb	r1, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS = 3;
    19b0:	7b99      	ldrb	r1, [r3, #14]
    19b2:	4301      	orrs	r1, r0
    19b4:	7399      	strb	r1, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 3;
    19b6:	7b99      	ldrb	r1, [r3, #14]
    19b8:	430a      	orrs	r2, r1
    19ba:	739a      	strb	r2, [r3, #14]
	accy_powerUp();
    19bc:	4b89      	ldr	r3, [pc, #548]	; (1be4 <main+0x3e4>)
    19be:	58fb      	ldr	r3, [r7, r3]
    19c0:	9302      	str	r3, [sp, #8]
    19c2:	4798      	blx	r3
    19c4:	a904      	add	r1, sp, #16
	port_pin_set_config(ADC_SPI_CS_PIN, &pcfg);
    19c6:	4b88      	ldr	r3, [pc, #544]	; (1be8 <main+0x3e8>)
	pcfg.direction = PORT_PIN_DIR_OUTPUT;
    19c8:	700e      	strb	r6, [r1, #0]
    19ca:	708d      	strb	r5, [r1, #2]
	pcfg.input_pull = PORT_PIN_PULL_NONE;
    19cc:	704d      	strb	r5, [r1, #1]
	port_pin_set_config(ADC_SPI_CS_PIN, &pcfg);
    19ce:	58fb      	ldr	r3, [r7, r3]
    19d0:	2036      	movs	r0, #54	; 0x36
    19d2:	9302      	str	r3, [sp, #8]
    19d4:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    19d6:	2280      	movs	r2, #128	; 0x80
    19d8:	4b84      	ldr	r3, [pc, #528]	; (1bec <main+0x3ec>)
    19da:	03d2      	lsls	r2, r2, #15
    19dc:	601a      	str	r2, [r3, #0]
	config->generator_source = GCLK_GENERATOR_0;
    19de:	235d      	movs	r3, #93	; 0x5d
    19e0:	aa04      	add	r2, sp, #16
    19e2:	189b      	adds	r3, r3, r2
    19e4:	77dd      	strb	r5, [r3, #31]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    19e6:	4b82      	ldr	r3, [pc, #520]	; (1bf0 <main+0x3f0>)
	config->mode             = SPI_MODE_MASTER;
    19e8:	7026      	strb	r6, [r4, #0]
	config->receiver_enable  = true;
    19ea:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    19ec:	74e6      	strb	r6, [r4, #19]
	config->data_order       = SPI_DATA_ORDER_MSB;
    19ee:	6065      	str	r5, [r4, #4]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    19f0:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    19f2:	7465      	strb	r5, [r4, #17]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    19f4:	58fb      	ldr	r3, [r7, r3]
    19f6:	220c      	movs	r2, #12
    19f8:	0029      	movs	r1, r5
    19fa:	a820      	add	r0, sp, #128	; 0x80
    19fc:	9302      	str	r3, [sp, #8]
    19fe:	4798      	blx	r3
	adc_cfg.transfer_mode = SPI_TRANSFER_MODE_1;
    1a00:	2380      	movs	r3, #128	; 0x80
    1a02:	055b      	lsls	r3, r3, #21
    1a04:	60a3      	str	r3, [r4, #8]
	adc_cfg.mode_specific.master.baudrate = 4096000;
    1a06:	23fa      	movs	r3, #250	; 0xfa
    1a08:	039b      	lsls	r3, r3, #14
    1a0a:	61a3      	str	r3, [r4, #24]
	adc_cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    1a0c:	2380      	movs	r3, #128	; 0x80
    1a0e:	029b      	lsls	r3, r3, #10
    1a10:	60e3      	str	r3, [r4, #12]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
    1a12:	4b78      	ldr	r3, [pc, #480]	; (1bf4 <main+0x3f4>)
	adc_cfg.master_slave_select_enable = 1;
    1a14:	7526      	strb	r6, [r4, #20]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
    1a16:	62a3      	str	r3, [r4, #40]	; 0x28
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
    1a18:	4b77      	ldr	r3, [pc, #476]	; (1bf8 <main+0x3f8>)
	enum status_code code = spi_init(&adc_spi, SERCOM5, &adc_cfg);
    1a1a:	0022      	movs	r2, r4
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
    1a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
    1a1e:	4b77      	ldr	r3, [pc, #476]	; (1bfc <main+0x3fc>)
	enum status_code code = spi_init(&adc_spi, SERCOM5, &adc_cfg);
    1a20:	4977      	ldr	r1, [pc, #476]	; (1c00 <main+0x400>)
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
    1a22:	6323      	str	r3, [r4, #48]	; 0x30
	adc_cfg.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// MOSI
    1a24:	4b77      	ldr	r3, [pc, #476]	; (1c04 <main+0x404>)
    1a26:	6363      	str	r3, [r4, #52]	; 0x34
	enum status_code code = spi_init(&adc_spi, SERCOM5, &adc_cfg);
    1a28:	4b77      	ldr	r3, [pc, #476]	; (1c08 <main+0x408>)
    1a2a:	58fe      	ldr	r6, [r7, r3]
    1a2c:	4b77      	ldr	r3, [pc, #476]	; (1c0c <main+0x40c>)
    1a2e:	0030      	movs	r0, r6
    1a30:	58fb      	ldr	r3, [r7, r3]
    1a32:	9302      	str	r3, [sp, #8]
    1a34:	4798      	blx	r3
	if (code != STATUS_OK) fatal_error(0,"ADC spi init failed\n");
    1a36:	42a8      	cmp	r0, r5
    1a38:	d006      	beq.n	1a48 <main+0x248>
    1a3a:	4b75      	ldr	r3, [pc, #468]	; (1c10 <main+0x410>)
    1a3c:	4975      	ldr	r1, [pc, #468]	; (1c14 <main+0x414>)
    1a3e:	58fb      	ldr	r3, [r7, r3]
    1a40:	4479      	add	r1, pc
    1a42:	0028      	movs	r0, r5
    1a44:	9302      	str	r3, [sp, #8]
    1a46:	4798      	blx	r3
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a48:	4b73      	ldr	r3, [pc, #460]	; (1c18 <main+0x418>)
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a4a:	6835      	ldr	r5, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a4c:	58fb      	ldr	r3, [r7, r3]
    1a4e:	0028      	movs	r0, r5
    1a50:	9302      	str	r3, [sp, #8]
    1a52:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a54:	231f      	movs	r3, #31
    1a56:	4018      	ands	r0, r3
    1a58:	3b1e      	subs	r3, #30
    1a5a:	4083      	lsls	r3, r0
    1a5c:	9a01      	ldr	r2, [sp, #4]
    1a5e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a60:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1a62:	69dc      	ldr	r4, [r3, #28]
	while (spi_is_syncing(module)) {
    1a64:	2c00      	cmp	r4, #0
    1a66:	d1fc      	bne.n	1a62 <main+0x262>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1a68:	2302      	movs	r3, #2
    1a6a:	682a      	ldr	r2, [r5, #0]
	tcfg.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    1a6c:	2620      	movs	r6, #32
    1a6e:	4313      	orrs	r3, r2
    1a70:	602b      	str	r3, [r5, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1a72:	9b00      	ldr	r3, [sp, #0]
	tcfg.clock_source = GCLK_GENERATOR_4;
    1a74:	9a00      	ldr	r2, [sp, #0]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1a76:	741c      	strb	r4, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1a78:	615c      	str	r4, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1a7a:	619c      	str	r4, [r3, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1a7c:	771c      	strb	r4, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1a7e:	621c      	str	r4, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1a80:	625c      	str	r4, [r3, #36]	; 0x24
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1a82:	709c      	strb	r4, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1a84:	809c      	strh	r4, [r3, #4]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1a86:	811c      	strh	r4, [r3, #8]
	config->run_in_standby             = false;
    1a88:	705c      	strb	r4, [r3, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1a8a:	729c      	strb	r4, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1a8c:	72dc      	strb	r4, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1a8e:	731c      	strb	r4, [r3, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1a90:	739c      	strb	r4, [r3, #14]
	config->oneshot                    = false;
    1a92:	735c      	strb	r4, [r3, #13]
	config->counter_16_bit.value                   = 0x0000;
    1a94:	851c      	strh	r4, [r3, #40]	; 0x28
    1a96:	2304      	movs	r3, #4
    1a98:	7013      	strb	r3, [r2, #0]
	tcfg.counter_16_bit.compare_capture_channel[0] = 8192;
    1a9a:	2380      	movs	r3, #128	; 0x80
    1a9c:	019b      	lsls	r3, r3, #6
    1a9e:	8553      	strh	r3, [r2, #42]	; 0x2a
	tcfg.counter_16_bit.compare_capture_channel[1] = 8192-23;
    1aa0:	4b5e      	ldr	r3, [pc, #376]	; (1c1c <main+0x41c>)
	tcfg.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    1aa2:	7196      	strb	r6, [r2, #6]
	tcfg.counter_16_bit.compare_capture_channel[1] = 8192-23;
    1aa4:	8593      	strh	r3, [r2, #44]	; 0x2c
	tc_init(&clock_tc, TC3, &tcfg);
    1aa6:	4b5e      	ldr	r3, [pc, #376]	; (1c20 <main+0x420>)
    1aa8:	495e      	ldr	r1, [pc, #376]	; (1c24 <main+0x424>)
    1aaa:	58fd      	ldr	r5, [r7, r3]
    1aac:	4b5e      	ldr	r3, [pc, #376]	; (1c28 <main+0x428>)
    1aae:	0028      	movs	r0, r5
    1ab0:	58fb      	ldr	r3, [r7, r3]
    1ab2:	9300      	str	r3, [sp, #0]
    1ab4:	4798      	blx	r3
	tc_register_callback(&clock_tc, transfer_start, TC_CALLBACK_CC_CHANNEL1);
    1ab6:	4b5d      	ldr	r3, [pc, #372]	; (1c2c <main+0x42c>)
    1ab8:	495d      	ldr	r1, [pc, #372]	; (1c30 <main+0x430>)
    1aba:	58fb      	ldr	r3, [r7, r3]
    1abc:	2203      	movs	r2, #3
    1abe:	4479      	add	r1, pc
    1ac0:	0028      	movs	r0, r5
    1ac2:	9300      	str	r3, [sp, #0]
    1ac4:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1ac6:	4b5b      	ldr	r3, [pc, #364]	; (1c34 <main+0x434>)
    1ac8:	6828      	ldr	r0, [r5, #0]
    1aca:	58fb      	ldr	r3, [r7, r3]
    1acc:	9300      	str	r3, [sp, #0]
    1ace:	4798      	blx	r3
    1ad0:	221f      	movs	r2, #31
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1ad2:	4b59      	ldr	r3, [pc, #356]	; (1c38 <main+0x438>)
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    1ad4:	0021      	movs	r1, r4
    1ad6:	447b      	add	r3, pc
    1ad8:	5c1b      	ldrb	r3, [r3, r0]
    1ada:	2012      	movs	r0, #18
    1adc:	4013      	ands	r3, r2
    1ade:	3a1e      	subs	r2, #30
    1ae0:	409a      	lsls	r2, r3
    1ae2:	0013      	movs	r3, r2
    1ae4:	9a01      	ldr	r2, [sp, #4]
    1ae6:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1ae8:	7e6b      	ldrb	r3, [r5, #25]
    1aea:	4333      	orrs	r3, r6
    1aec:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1aee:	682b      	ldr	r3, [r5, #0]
    1af0:	735e      	strb	r6, [r3, #13]
    1af2:	4b37      	ldr	r3, [pc, #220]	; (1bd0 <main+0x3d0>)
	events_get_config_defaults(&ecfg);
    1af4:	ae05      	add	r6, sp, #20
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    1af6:	58fb      	ldr	r3, [r7, r3]
    1af8:	9300      	str	r3, [sp, #0]
    1afa:	4798      	blx	r3
	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    1afc:	2380      	movs	r3, #128	; 0x80
    1afe:	682a      	ldr	r2, [r5, #0]
    1b00:	015b      	lsls	r3, r3, #5
    1b02:	8951      	ldrh	r1, [r2, #10]
	events_get_config_defaults(&ecfg);
    1b04:	0030      	movs	r0, r6
    1b06:	430b      	orrs	r3, r1
    1b08:	8153      	strh	r3, [r2, #10]
    1b0a:	4b4c      	ldr	r3, [pc, #304]	; (1c3c <main+0x43c>)
    1b0c:	58fb      	ldr	r3, [r7, r3]
    1b0e:	9300      	str	r3, [sp, #0]
    1b10:	4798      	blx	r3
	ecfg.generator = EVSYS_ID_GEN_TC3_MCX_0;
    1b12:	2334      	movs	r3, #52	; 0x34
    1b14:	70b3      	strb	r3, [r6, #2]
	ecfg.path = EVENTS_PATH_RESYNCHRONIZED;
    1b16:	3b33      	subs	r3, #51	; 0x33
    1b18:	7073      	strb	r3, [r6, #1]
	events_allocate(&events, &ecfg);
    1b1a:	4b49      	ldr	r3, [pc, #292]	; (1c40 <main+0x440>)
    1b1c:	0031      	movs	r1, r6
    1b1e:	58fb      	ldr	r3, [r7, r3]
		if (i % 2 == 0)
    1b20:	2601      	movs	r6, #1
	events_allocate(&events, &ecfg);
    1b22:	9300      	str	r3, [sp, #0]
    1b24:	0018      	movs	r0, r3
    1b26:	4b47      	ldr	r3, [pc, #284]	; (1c44 <main+0x444>)
    1b28:	58fb      	ldr	r3, [r7, r3]
    1b2a:	9301      	str	r3, [sp, #4]
    1b2c:	4798      	blx	r3
	events_attach_user(&events, EVSYS_ID_USER_DMAC_CH_0);
    1b2e:	4b46      	ldr	r3, [pc, #280]	; (1c48 <main+0x448>)
    1b30:	0021      	movs	r1, r4
    1b32:	58fb      	ldr	r3, [r7, r3]
    1b34:	9800      	ldr	r0, [sp, #0]
    1b36:	9300      	str	r3, [sp, #0]
    1b38:	4798      	blx	r3
			tx_buffer[i] = 0xc3;
    1b3a:	21c3      	movs	r1, #195	; 0xc3
			tx_buffer[i] = 0x3c;
    1b3c:	203c      	movs	r0, #60	; 0x3c
		rx_buffer[i] = 0x55;
    1b3e:	2255      	movs	r2, #85	; 0x55
    1b40:	4b42      	ldr	r3, [pc, #264]	; (1c4c <main+0x44c>)
    1b42:	58fb      	ldr	r3, [r7, r3]
		if (i % 2 == 0)
    1b44:	4234      	tst	r4, r6
    1b46:	d000      	beq.n	1b4a <main+0x34a>
    1b48:	e126      	b.n	1d98 <main+0x598>
			tx_buffer[i] = 0x3c;
    1b4a:	5518      	strb	r0, [r3, r4]
		rx_buffer[i] = 0x55;
    1b4c:	4b40      	ldr	r3, [pc, #256]	; (1c50 <main+0x450>)
    1b4e:	58fb      	ldr	r3, [r7, r3]
    1b50:	551a      	strb	r2, [r3, r4]
	for (int i=0; i<9;i++) {
    1b52:	3401      	adds	r4, #1
		rx_buffer[i] = 0x55;
    1b54:	9300      	str	r3, [sp, #0]
	for (int i=0; i<9;i++) {
    1b56:	2c09      	cmp	r4, #9
    1b58:	d1f2      	bne.n	1b40 <main+0x340>
    1b5a:	2300      	movs	r3, #0
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b5c:	2201      	movs	r2, #1
    1b5e:	a906      	add	r1, sp, #24
    1b60:	70cb      	strb	r3, [r1, #3]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b62:	708b      	strb	r3, [r1, #2]
	mcfg.mux_position = MUX_PB10H_GCLK_IO4;
    1b64:	3307      	adds	r3, #7
    1b66:	700b      	strb	r3, [r1, #0]
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
    1b68:	4b3a      	ldr	r3, [pc, #232]	; (1c54 <main+0x454>)
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b6a:	704a      	strb	r2, [r1, #1]
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
    1b6c:	58fb      	ldr	r3, [r7, r3]
    1b6e:	202a      	movs	r0, #42	; 0x2a
    1b70:	9300      	str	r3, [sp, #0]
    1b72:	4798      	blx	r3
    port->PINCFG[pin_index].reg |=  PORT_PINCFG_DRVSTR;
    1b74:	2340      	movs	r3, #64	; 0x40
    1b76:	4a38      	ldr	r2, [pc, #224]	; (1c58 <main+0x458>)
    1b78:	7811      	ldrb	r1, [r2, #0]
    1b7a:	430b      	orrs	r3, r1
    1b7c:	7013      	strb	r3, [r2, #0]
    1b7e:	682b      	ldr	r3, [r5, #0]
    1b80:	e06c      	b.n	1c5c <main+0x45c>
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	0000c2e2 	.word	0x0000c2e2
    1b88:	0000006c 	.word	0x0000006c
    1b8c:	000001bc 	.word	0x000001bc
    1b90:	00000268 	.word	0x00000268
    1b94:	40000800 	.word	0x40000800
    1b98:	e000e100 	.word	0xe000e100
    1b9c:	40001400 	.word	0x40001400
    1ba0:	0000003c 	.word	0x0000003c
    1ba4:	000000d8 	.word	0x000000d8
    1ba8:	0000027c 	.word	0x0000027c
    1bac:	000000fc 	.word	0x000000fc
    1bb0:	00000080 	.word	0x00000080
    1bb4:	0000002c 	.word	0x0000002c
    1bb8:	0000015c 	.word	0x0000015c
    1bbc:	000001e8 	.word	0x000001e8
    1bc0:	00000264 	.word	0x00000264
    1bc4:	00000320 	.word	0x00000320
    1bc8:	00000258 	.word	0x00000258
    1bcc:	00000120 	.word	0x00000120
    1bd0:	00000220 	.word	0x00000220
    1bd4:	000002e4 	.word	0x000002e4
    1bd8:	41007110 	.word	0x41007110
    1bdc:	41005000 	.word	0x41005000
    1be0:	41004800 	.word	0x41004800
    1be4:	0000001c 	.word	0x0000001c
    1be8:	00000280 	.word	0x00000280
    1bec:	41004498 	.word	0x41004498
    1bf0:	0000023c 	.word	0x0000023c
    1bf4:	00220003 	.word	0x00220003
    1bf8:	00230003 	.word	0x00230003
    1bfc:	00360003 	.word	0x00360003
    1c00:	42001c00 	.word	0x42001c00
    1c04:	00370003 	.word	0x00370003
    1c08:	0000025c 	.word	0x0000025c
    1c0c:	000000e0 	.word	0x000000e0
    1c10:	00000308 	.word	0x00000308
    1c14:	0000bbbc 	.word	0x0000bbbc
    1c18:	000000d0 	.word	0x000000d0
    1c1c:	00001fe9 	.word	0x00001fe9
    1c20:	00000094 	.word	0x00000094
    1c24:	42002c00 	.word	0x42002c00
    1c28:	00000344 	.word	0x00000344
    1c2c:	00000184 	.word	0x00000184
    1c30:	fffffb8f 	.word	0xfffffb8f
    1c34:	00000150 	.word	0x00000150
    1c38:	0000bb42 	.word	0x0000bb42
    1c3c:	000002a0 	.word	0x000002a0
    1c40:	000002ac 	.word	0x000002ac
    1c44:	00000088 	.word	0x00000088
    1c48:	00000260 	.word	0x00000260
    1c4c:	00000188 	.word	0x00000188
    1c50:	0000016c 	.word	0x0000016c
    1c54:	00000304 	.word	0x00000304
    1c58:	410044ca 	.word	0x410044ca
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c5c:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    1c5e:	b252      	sxtb	r2, r2
    1c60:	2a00      	cmp	r2, #0
    1c62:	dbfb      	blt.n	1c5c <main+0x45c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1c64:	2102      	movs	r1, #2
    1c66:	881a      	ldrh	r2, [r3, #0]
	dma_get_config_defaults(&config);
    1c68:	ac07      	add	r4, sp, #28
    1c6a:	430a      	orrs	r2, r1
    1c6c:	801a      	strh	r2, [r3, #0]
    1c6e:	4b4b      	ldr	r3, [pc, #300]	; (1d9c <main+0x59c>)
    1c70:	0020      	movs	r0, r4
    1c72:	58fb      	ldr	r3, [r7, r3]
	config.priority = DMA_PRIORITY_LEVEL_3;
    1c74:	2503      	movs	r5, #3
	dma_get_config_defaults(&config);
    1c76:	9300      	str	r3, [sp, #0]
    1c78:	4798      	blx	r3
	config.peripheral_trigger = SERCOM5_DMAC_ID_TX;
    1c7a:	230c      	movs	r3, #12
    1c7c:	7063      	strb	r3, [r4, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    1c7e:	3b0a      	subs	r3, #10
    1c80:	70a3      	strb	r3, [r4, #2]
	dma_allocate(&tx_spi_dma, &config);
    1c82:	4b47      	ldr	r3, [pc, #284]	; (1da0 <main+0x5a0>)
	config.priority = DMA_PRIORITY_LEVEL_3;
    1c84:	7025      	strb	r5, [r4, #0]
	config.event_config.input_action = DMA_EVENT_INPUT_CBLOCK;
    1c86:	70e5      	strb	r5, [r4, #3]
	dma_allocate(&tx_spi_dma, &config);
    1c88:	58fe      	ldr	r6, [r7, r3]
    1c8a:	4b46      	ldr	r3, [pc, #280]	; (1da4 <main+0x5a4>)
    1c8c:	0021      	movs	r1, r4
    1c8e:	58fb      	ldr	r3, [r7, r3]
    1c90:	0030      	movs	r0, r6
    1c92:	9301      	str	r3, [sp, #4]
    1c94:	4798      	blx	r3
	config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
    1c96:	230b      	movs	r3, #11
	config.priority = DMA_PRIORITY_LEVEL_3;
    1c98:	7025      	strb	r5, [r4, #0]
	config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
    1c9a:	2500      	movs	r5, #0
	config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
    1c9c:	7063      	strb	r3, [r4, #1]
	dma_allocate(&rx_spi_dma, &config);
    1c9e:	4b42      	ldr	r3, [pc, #264]	; (1da8 <main+0x5a8>)
	config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
    1ca0:	70e5      	strb	r5, [r4, #3]
	dma_allocate(&rx_spi_dma, &config);
    1ca2:	58fb      	ldr	r3, [r7, r3]
    1ca4:	0021      	movs	r1, r4
    1ca6:	9300      	str	r3, [sp, #0]
    1ca8:	0018      	movs	r0, r3
    1caa:	9b01      	ldr	r3, [sp, #4]
    1cac:	4798      	blx	r3
	config->descriptor_valid = true;
    1cae:	2301      	movs	r3, #1
    1cb0:	7023      	strb	r3, [r4, #0]
	config->src_increment_enable = true;
    1cb2:	2301      	movs	r3, #1
    1cb4:	7123      	strb	r3, [r4, #4]
	descriptor_config.block_transfer_count = 9;
    1cb6:	2309      	movs	r3, #9
    1cb8:	8123      	strh	r3, [r4, #8]
	descriptor_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
    1cba:	4b3c      	ldr	r3, [pc, #240]	; (1dac <main+0x5ac>)
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1cbc:	7065      	strb	r5, [r4, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1cbe:	70a5      	strb	r5, [r4, #2]
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1cc0:	70e5      	strb	r5, [r4, #3]
	config->step_selection = DMA_STEPSEL_DST;
    1cc2:	71a5      	strb	r5, [r4, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1cc4:	71e5      	strb	r5, [r4, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    1cc6:	6165      	str	r5, [r4, #20]
    1cc8:	58fb      	ldr	r3, [r7, r3]
	descriptor_config.dst_increment_enable = 0;
    1cca:	7165      	strb	r5, [r4, #5]
	descriptor_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
    1ccc:	9301      	str	r3, [sp, #4]
    1cce:	3309      	adds	r3, #9
    1cd0:	60e3      	str	r3, [r4, #12]
	descriptor_config.destination_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    1cd2:	4b37      	ldr	r3, [pc, #220]	; (1db0 <main+0x5b0>)
	dma_descriptor_create(&tx_spi_desc, &descriptor_config);
    1cd4:	0021      	movs	r1, r4
	descriptor_config.destination_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    1cd6:	6123      	str	r3, [r4, #16]
	dma_descriptor_create(&tx_spi_desc, &descriptor_config);
    1cd8:	4b36      	ldr	r3, [pc, #216]	; (1db4 <main+0x5b4>)
    1cda:	58fb      	ldr	r3, [r7, r3]
    1cdc:	9301      	str	r3, [sp, #4]
    1cde:	0018      	movs	r0, r3
    1ce0:	4b35      	ldr	r3, [pc, #212]	; (1db8 <main+0x5b8>)
    1ce2:	58fb      	ldr	r3, [r7, r3]
    1ce4:	9302      	str	r3, [sp, #8]
    1ce6:	4798      	blx	r3
	descriptor_config.source_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    1ce8:	4b31      	ldr	r3, [pc, #196]	; (1db0 <main+0x5b0>)
	dma_descriptor_create(&rx_spi_desc, &descriptor_config);
    1cea:	0021      	movs	r1, r4
	descriptor_config.source_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    1cec:	60e3      	str	r3, [r4, #12]
	descriptor_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
    1cee:	4b33      	ldr	r3, [pc, #204]	; (1dbc <main+0x5bc>)
    1cf0:	58fb      	ldr	r3, [r7, r3]
	descriptor_config.src_increment_enable = 0;
    1cf2:	7125      	strb	r5, [r4, #4]
	descriptor_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
    1cf4:	9303      	str	r3, [sp, #12]
    1cf6:	3309      	adds	r3, #9
    1cf8:	6123      	str	r3, [r4, #16]
	descriptor_config.dst_increment_enable = 1;
    1cfa:	2301      	movs	r3, #1
    1cfc:	7163      	strb	r3, [r4, #5]
	dma_descriptor_create(&rx_spi_desc, &descriptor_config);
    1cfe:	4b30      	ldr	r3, [pc, #192]	; (1dc0 <main+0x5c0>)
    1d00:	58fb      	ldr	r3, [r7, r3]
    1d02:	0018      	movs	r0, r3
    1d04:	9303      	str	r3, [sp, #12]
    1d06:	9b02      	ldr	r3, [sp, #8]
    1d08:	4798      	blx	r3
	dma_add_descriptor(&tx_spi_dma, &tx_spi_desc);
    1d0a:	4b2e      	ldr	r3, [pc, #184]	; (1dc4 <main+0x5c4>)
    1d0c:	9901      	ldr	r1, [sp, #4]
    1d0e:	58fc      	ldr	r4, [r7, r3]
    1d10:	0030      	movs	r0, r6
    1d12:	47a0      	blx	r4
	dma_add_descriptor(&rx_spi_dma, &rx_spi_desc);
    1d14:	9903      	ldr	r1, [sp, #12]
    1d16:	9800      	ldr	r0, [sp, #0]
    1d18:	47a0      	blx	r4
	resource->callback_enable |= 1 << type;
    1d1a:	2202      	movs	r2, #2
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1d1c:	2002      	movs	r0, #2
	resource->callback[type] = callback;
    1d1e:	4b2a      	ldr	r3, [pc, #168]	; (1dc8 <main+0x5c8>)
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1d20:	7831      	ldrb	r1, [r6, #0]
	resource->callback[type] = callback;
    1d22:	447b      	add	r3, pc
    1d24:	60b3      	str	r3, [r6, #8]
	resource->callback_enable |= 1 << type;
    1d26:	7c33      	ldrb	r3, [r6, #16]
    1d28:	4313      	orrs	r3, r2
    1d2a:	7433      	strb	r3, [r6, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1d2c:	4b27      	ldr	r3, [pc, #156]	; (1dcc <main+0x5cc>)
    1d2e:	58fb      	ldr	r3, [r7, r3]
    1d30:	5c5a      	ldrb	r2, [r3, r1]
    1d32:	4302      	orrs	r2, r0
    1d34:	545a      	strb	r2, [r3, r1]
	resource->callback_enable |= 1 << type;
    1d36:	9a00      	ldr	r2, [sp, #0]
    1d38:	9900      	ldr	r1, [sp, #0]
    1d3a:	7c12      	ldrb	r2, [r2, #16]
    1d3c:	4302      	orrs	r2, r0
    1d3e:	740a      	strb	r2, [r1, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1d40:	780a      	ldrb	r2, [r1, #0]
    1d42:	5c99      	ldrb	r1, [r3, r2]
    1d44:	4301      	orrs	r1, r0
    1d46:	5499      	strb	r1, [r3, r2]
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_DMA, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    1d48:	4b21      	ldr	r3, [pc, #132]	; (1dd0 <main+0x5d0>)
    1d4a:	0029      	movs	r1, r5
    1d4c:	58fb      	ldr	r3, [r7, r3]
    1d4e:	3004      	adds	r0, #4
    1d50:	9301      	str	r3, [sp, #4]
    1d52:	4798      	blx	r3
	dma_start_transfer_job(&tx_spi_dma);
    1d54:	4b1f      	ldr	r3, [pc, #124]	; (1dd4 <main+0x5d4>)
    1d56:	0030      	movs	r0, r6
    1d58:	58fc      	ldr	r4, [r7, r3]
    1d5a:	47a0      	blx	r4
	dma_start_transfer_job(&rx_spi_dma);
    1d5c:	9800      	ldr	r0, [sp, #0]
    1d5e:	47a0      	blx	r4
		transfer_is_done = 0;
    1d60:	2200      	movs	r2, #0
    1d62:	4b1d      	ldr	r3, [pc, #116]	; (1dd8 <main+0x5d8>)
    1d64:	58fb      	ldr	r3, [r7, r3]
    1d66:	701a      	strb	r2, [r3, #0]
		while (!transfer_is_done) {
    1d68:	781a      	ldrb	r2, [r3, #0]
    1d6a:	2a00      	cmp	r2, #0
    1d6c:	d0fc      	beq.n	1d68 <main+0x568>
		dma_start_transfer_job(&tx_spi_dma);
    1d6e:	0030      	movs	r0, r6
    1d70:	47a0      	blx	r4
		dma_start_transfer_job(&rx_spi_dma);
    1d72:	9800      	ldr	r0, [sp, #0]
    1d74:	47a0      	blx	r4
		if (cnt % 100 == 0)
    1d76:	4b19      	ldr	r3, [pc, #100]	; (1ddc <main+0x5dc>)
		cnt++;
    1d78:	3501      	adds	r5, #1
		if (cnt % 100 == 0)
    1d7a:	58fb      	ldr	r3, [r7, r3]
    1d7c:	2164      	movs	r1, #100	; 0x64
    1d7e:	9301      	str	r3, [sp, #4]
    1d80:	0028      	movs	r0, r5
    1d82:	4798      	blx	r3
    1d84:	2900      	cmp	r1, #0
    1d86:	d1eb      	bne.n	1d60 <main+0x560>
			printf("C: %d\n", cnt);
    1d88:	4b15      	ldr	r3, [pc, #84]	; (1de0 <main+0x5e0>)
    1d8a:	4816      	ldr	r0, [pc, #88]	; (1de4 <main+0x5e4>)
    1d8c:	58fb      	ldr	r3, [r7, r3]
    1d8e:	0029      	movs	r1, r5
    1d90:	4478      	add	r0, pc
    1d92:	9301      	str	r3, [sp, #4]
    1d94:	4798      	blx	r3
    1d96:	e7e3      	b.n	1d60 <main+0x560>
			tx_buffer[i] = 0xc3;
    1d98:	5519      	strb	r1, [r3, r4]
    1d9a:	e6d7      	b.n	1b4c <main+0x34c>
    1d9c:	000002f8 	.word	0x000002f8
    1da0:	00000210 	.word	0x00000210
    1da4:	00000340 	.word	0x00000340
    1da8:	00000314 	.word	0x00000314
    1dac:	00000188 	.word	0x00000188
    1db0:	42001c28 	.word	0x42001c28
    1db4:	00000044 	.word	0x00000044
    1db8:	000000b8 	.word	0x000000b8
    1dbc:	0000016c 	.word	0x0000016c
    1dc0:	0000009c 	.word	0x0000009c
    1dc4:	00000154 	.word	0x00000154
    1dc8:	fffff963 	.word	0xfffff963
    1dcc:	00000078 	.word	0x00000078
    1dd0:	00000220 	.word	0x00000220
    1dd4:	000000ac 	.word	0x000000ac
    1dd8:	000001e4 	.word	0x000001e4
    1ddc:	00000338 	.word	0x00000338
    1de0:	00000028 	.word	0x00000028
    1de4:	0000b881 	.word	0x0000b881

00001de8 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    1de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    1dea:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
    1dec:	2701      	movs	r7, #1
    1dee:	4b4f      	ldr	r3, [pc, #316]	; (1f2c <system_board_init+0x144>)
	config->direction  = PORT_PIN_DIR_INPUT;
    1df0:	ac01      	add	r4, sp, #4

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    1df2:	4a4f      	ldr	r2, [pc, #316]	; (1f30 <system_board_init+0x148>)
{
    1df4:	447b      	add	r3, pc
    1df6:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1df8:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    1dfa:	70a6      	strb	r6, [r4, #2]
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    1dfc:	589d      	ldr	r5, [r3, r2]
    1dfe:	0021      	movs	r1, r4
    1e00:	2013      	movs	r0, #19
    1e02:	47a8      	blx	r5
    1e04:	0021      	movs	r1, r4
    1e06:	2010      	movs	r0, #16
    1e08:	47a8      	blx	r5
    1e0a:	0021      	movs	r1, r4
    1e0c:	2011      	movs	r0, #17
    1e0e:	47a8      	blx	r5
    1e10:	0021      	movs	r1, r4
    1e12:	2012      	movs	r0, #18
    1e14:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    1e16:	0021      	movs	r1, r4
    1e18:	2014      	movs	r0, #20
	config.direction	= PORT_PIN_DIR_INPUT;
    1e1a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    1e1c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    1e1e:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    1e20:	47a8      	blx	r5
    1e22:	0021      	movs	r1, r4
    1e24:	2015      	movs	r0, #21
    1e26:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 1;
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    1e28:	0021      	movs	r1, r4
    1e2a:	2018      	movs	r0, #24
	config.direction	= PORT_PIN_DIR_INPUT;
    1e2c:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    1e2e:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
    1e30:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    1e32:	47a8      	blx	r5
    1e34:	0021      	movs	r1, r4
    1e36:	2019      	movs	r0, #25
    1e38:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1e3a:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    1e3c:	0021      	movs	r1, r4
    1e3e:	2036      	movs	r0, #54	; 0x36
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1e40:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    1e42:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    1e44:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    1e46:	47a8      	blx	r5
    1e48:	0021      	movs	r1, r4
    1e4a:	2022      	movs	r0, #34	; 0x22
    1e4c:	47a8      	blx	r5
    1e4e:	0021      	movs	r1, r4
    1e50:	2037      	movs	r0, #55	; 0x37
    1e52:	47a8      	blx	r5
    1e54:	0021      	movs	r1, r4
    1e56:	2023      	movs	r0, #35	; 0x23
    1e58:	47a8      	blx	r5
    1e5a:	0021      	movs	r1, r4
    1e5c:	202a      	movs	r0, #42	; 0x2a
    1e5e:	47a8      	blx	r5

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    1e60:	0021      	movs	r1, r4
    1e62:	2003      	movs	r0, #3
	config.direction	= PORT_PIN_DIR_INPUT;
    1e64:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    1e66:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
    1e68:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    1e6a:	47a8      	blx	r5
    1e6c:	0021      	movs	r1, r4
    1e6e:	201f      	movs	r0, #31
    1e70:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(BATSENSE_ADC_PIN);
    1e72:	0021      	movs	r1, r4
    1e74:	2002      	movs	r0, #2
	config.direction	= PORT_PIN_DIR_INPUT;
    1e76:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    1e78:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    1e7a:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
    1e7c:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LED_OUT_PIN);
    1e7e:	0021      	movs	r1, r4
    1e80:	202b      	movs	r0, #43	; 0x2b
	config.direction	= PORT_PIN_DIR_INPUT;
    1e82:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    1e84:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    1e86:	70a7      	strb	r7, [r4, #2]
	CFG(LED_OUT_PIN);
    1e88:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1e8a:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    1e8c:	0021      	movs	r1, r4
    1e8e:	2004      	movs	r0, #4
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1e90:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    1e92:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    1e94:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    1e96:	47a8      	blx	r5
    1e98:	0021      	movs	r1, r4
    1e9a:	2005      	movs	r0, #5
    1e9c:	47a8      	blx	r5
    1e9e:	0021      	movs	r1, r4
    1ea0:	2006      	movs	r0, #6
    1ea2:	47a8      	blx	r5
    1ea4:	0021      	movs	r1, r4
    1ea6:	2007      	movs	r0, #7
    1ea8:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    1eaa:	0021      	movs	r1, r4
    1eac:	2008      	movs	r0, #8
    1eae:	47a8      	blx	r5
    1eb0:	0021      	movs	r1, r4
    1eb2:	2009      	movs	r0, #9
    1eb4:	47a8      	blx	r5
    1eb6:	0021      	movs	r1, r4
    1eb8:	200a      	movs	r0, #10
    1eba:	47a8      	blx	r5
    1ebc:	0021      	movs	r1, r4
    1ebe:	200b      	movs	r0, #11
    1ec0:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_OUTPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1ec2:	2302      	movs	r3, #2
	config.powersave	= 0;
	CFG(ACCYEN_GP_OUT_PIN); LO(ACCYEN_GP_OUT_PIN);
    1ec4:	0021      	movs	r1, r4
    1ec6:	2017      	movs	r0, #23
	config.direction	= PORT_PIN_DIR_OUTPUT;
    1ec8:	7027      	strb	r7, [r4, #0]
	config.powersave	= 0;
    1eca:	70a6      	strb	r6, [r4, #2]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1ecc:	7063      	strb	r3, [r4, #1]
	CFG(ACCYEN_GP_OUT_PIN); LO(ACCYEN_GP_OUT_PIN);
    1ece:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1ed0:	2380      	movs	r3, #128	; 0x80
    1ed2:	4a18      	ldr	r2, [pc, #96]	; (1f34 <system_board_init+0x14c>)
    1ed4:	041b      	lsls	r3, r3, #16
    1ed6:	6153      	str	r3, [r2, #20]

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1ed8:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    1eda:	0021      	movs	r1, r4
    1edc:	200e      	movs	r0, #14
	config.input_pull	= PORT_PIN_PULL_DOWN;
    1ede:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    1ee0:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    1ee2:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    1ee4:	47a8      	blx	r5
    1ee6:	0021      	movs	r1, r4
    1ee8:	200f      	movs	r0, #15
    1eea:	47a8      	blx	r5
    1eec:	0021      	movs	r1, r4
    1eee:	200c      	movs	r0, #12
    1ef0:	47a8      	blx	r5
    1ef2:	0021      	movs	r1, r4
    1ef4:	200d      	movs	r0, #13
    1ef6:	47a8      	blx	r5
    1ef8:	0021      	movs	r1, r4
    1efa:	2029      	movs	r0, #41	; 0x29
    1efc:	47a8      	blx	r5
    1efe:	0021      	movs	r1, r4
    1f00:	2016      	movs	r0, #22
    1f02:	47a8      	blx	r5
    1f04:	0021      	movs	r1, r4
    1f06:	2028      	movs	r0, #40	; 0x28
    1f08:	47a8      	blx	r5
    1f0a:	2380      	movs	r3, #128	; 0x80
    1f0c:	4a09      	ldr	r2, [pc, #36]	; (1f34 <system_board_init+0x14c>)
    1f0e:	051b      	lsls	r3, r3, #20
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    1f10:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    1f12:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
    1f14:	70a6      	strb	r6, [r4, #2]
    1f16:	6153      	str	r3, [r2, #20]
    1f18:	2380      	movs	r3, #128	; 0x80
    1f1a:	055b      	lsls	r3, r3, #21
    1f1c:	6153      	str	r3, [r2, #20]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    1f1e:	0021      	movs	r1, r4
    1f20:	201b      	movs	r0, #27
    1f22:	47a8      	blx	r5
    1f24:	0021      	movs	r1, r4
    1f26:	201c      	movs	r0, #28
    1f28:	47a8      	blx	r5
	
    1f2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f2c:	0000bcf4 	.word	0x0000bcf4
    1f30:	00000280 	.word	0x00000280
    1f34:	41004400 	.word	0x41004400

00001f38 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1f3a:	4c0d      	ldr	r4, [pc, #52]	; (1f70 <delay_init+0x38>)
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f3c:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <delay_init+0x3c>)
{
    1f3e:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f40:	58e3      	ldr	r3, [r4, r3]
    1f42:	2000      	movs	r0, #0
    1f44:	9301      	str	r3, [sp, #4]
    1f46:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1f48:	21fa      	movs	r1, #250	; 0xfa
    1f4a:	4b0b      	ldr	r3, [pc, #44]	; (1f78 <delay_init+0x40>)
    1f4c:	0089      	lsls	r1, r1, #2
    1f4e:	58e4      	ldr	r4, [r4, r3]
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f50:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1f52:	47a0      	blx	r4
    1f54:	4b09      	ldr	r3, [pc, #36]	; (1f7c <delay_init+0x44>)
	cycles_per_us = cycles_per_ms / 1000;
    1f56:	490a      	ldr	r1, [pc, #40]	; (1f80 <delay_init+0x48>)
	cycles_per_ms /= 1000;
    1f58:	447b      	add	r3, pc
    1f5a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1f5c:	0028      	movs	r0, r5
    1f5e:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1f60:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
    1f62:	4b08      	ldr	r3, [pc, #32]	; (1f84 <delay_init+0x4c>)
    1f64:	447b      	add	r3, pc
    1f66:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1f68:	4b07      	ldr	r3, [pc, #28]	; (1f88 <delay_init+0x50>)
    1f6a:	601a      	str	r2, [r3, #0]
}
    1f6c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	0000bbaa 	.word	0x0000bbaa
    1f74:	00000114 	.word	0x00000114
    1f78:	00000250 	.word	0x00000250
    1f7c:	1fffe0b8 	.word	0x1fffe0b8
    1f80:	000f4240 	.word	0x000f4240
    1f84:	1fffe0b0 	.word	0x1fffe0b0
    1f88:	e000e010 	.word	0xe000e010

00001f8c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1f8c:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f8e:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
    1f90:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1f92:	4b08      	ldr	r3, [pc, #32]	; (1fb4 <delay_cycles_ms+0x28>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f94:	0264      	lsls	r4, r4, #9
    1f96:	447b      	add	r3, pc
    1f98:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
    1f9a:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <delay_cycles_ms+0x2c>)
	while (n--) {
    1f9c:	3801      	subs	r0, #1
    1f9e:	d200      	bcs.n	1fa2 <delay_cycles_ms+0x16>
	}
}
    1fa0:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
    1fa2:	2a00      	cmp	r2, #0
    1fa4:	d0fa      	beq.n	1f9c <delay_cycles_ms+0x10>
		SysTick->LOAD = n;
    1fa6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    1fa8:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1faa:	681d      	ldr	r5, [r3, #0]
    1fac:	4225      	tst	r5, r4
    1fae:	d0fc      	beq.n	1faa <delay_cycles_ms+0x1e>
    1fb0:	e7f4      	b.n	1f9c <delay_cycles_ms+0x10>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	1fffe07a 	.word	0x1fffe07a
    1fb8:	e000e010 	.word	0xe000e010

00001fbc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    1fbc:	4a09      	ldr	r2, [pc, #36]	; (1fe4 <cpu_irq_save+0x28>)
    1fbe:	b084      	sub	sp, #16
    1fc0:	447a      	add	r2, pc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1fc2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1fc6:	4259      	negs	r1, r3
    1fc8:	414b      	adcs	r3, r1
    1fca:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    1fcc:	b672      	cpsid	i
    1fce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1fd2:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <cpu_irq_save+0x2c>)
    1fd4:	58d3      	ldr	r3, [r2, r3]
    1fd6:	9301      	str	r3, [sp, #4]
    1fd8:	2300      	movs	r3, #0
    1fda:	9a01      	ldr	r2, [sp, #4]
    1fdc:	7013      	strb	r3, [r2, #0]
	return flags;
    1fde:	9803      	ldr	r0, [sp, #12]
}
    1fe0:	b004      	add	sp, #16
    1fe2:	4770      	bx	lr
    1fe4:	0000bb28 	.word	0x0000bb28
    1fe8:	00000120 	.word	0x00000120

00001fec <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    1fec:	2200      	movs	r2, #0
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);

	uid_cdc_state_msg[port].header.bmRequestType =
    1fee:	20a1      	movs	r0, #161	; 0xa1
	udi_cdc_nb_comm_enabled = 0;
    1ff0:	490f      	ldr	r1, [pc, #60]	; (2030 <STACK_SIZE+0x30>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
    1ff2:	4b10      	ldr	r3, [pc, #64]	; (2034 <STACK_SIZE+0x34>)
	udi_cdc_nb_comm_enabled = 0;
    1ff4:	4479      	add	r1, pc
	udi_cdc_state[port] = CPU_TO_LE16(0);
    1ff6:	447b      	add	r3, pc
	udi_cdc_nb_comm_enabled = 0;
    1ff8:	700a      	strb	r2, [r1, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
    1ffa:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
    1ffc:	4b0e      	ldr	r3, [pc, #56]	; (2038 <STACK_SIZE+0x38>)
    1ffe:	447b      	add	r3, pc
    2000:	7018      	strb	r0, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    2002:	3881      	subs	r0, #129	; 0x81
    2004:	7058      	strb	r0, [r3, #1]
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    2006:	381e      	subs	r0, #30
    2008:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    200a:	20e1      	movs	r0, #225	; 0xe1
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    200c:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    200e:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    2010:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2014:	0240      	lsls	r0, r0, #9
    2016:	447b      	add	r3, pc
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    2018:	711a      	strb	r2, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    201a:	715a      	strb	r2, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    201c:	3208      	adds	r2, #8
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    201e:	6018      	str	r0, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    2020:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    2022:	780b      	ldrb	r3, [r1, #0]
	return true;
}
    2024:	2001      	movs	r0, #1
	udi_cdc_nb_comm_enabled++;
    2026:	3301      	adds	r3, #1
    2028:	b2db      	uxtb	r3, r3
    202a:	700b      	strb	r3, [r1, #0]
}
    202c:	4770      	bx	lr
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	1fffeb07 	.word	0x1fffeb07
    2034:	1fffeb94 	.word	0x1fffeb94
    2038:	1fffec1e 	.word	0x1fffec1e
    203c:	1fffeade 	.word	0x1fffeade

00002040 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    2040:	4a03      	ldr	r2, [pc, #12]	; (2050 <udi_cdc_comm_disable+0x10>)
    2042:	447a      	add	r2, pc
    2044:	7813      	ldrb	r3, [r2, #0]
    2046:	3b01      	subs	r3, #1
    2048:	b2db      	uxtb	r3, r3
    204a:	7013      	strb	r3, [r2, #0]
}
    204c:	4770      	bx	lr
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	1fffeab9 	.word	0x1fffeab9

00002054 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    2054:	4a05      	ldr	r2, [pc, #20]	; (206c <udi_cdc_data_disable+0x18>)
    2056:	447a      	add	r2, pc
    2058:	7813      	ldrb	r3, [r2, #0]
    205a:	3b01      	subs	r3, #1
    205c:	b2db      	uxtb	r3, r3
    205e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
    2060:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    2062:	2200      	movs	r2, #0
    2064:	4b02      	ldr	r3, [pc, #8]	; (2070 <udi_cdc_data_disable+0x1c>)
    2066:	447b      	add	r3, pc
    2068:	701a      	strb	r2, [r3, #0]
}
    206a:	4770      	bx	lr
    206c:	1fffeaa6 	.word	0x1fffeaa6
    2070:	1fffea8a 	.word	0x1fffea8a

00002074 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    2074:	2000      	movs	r0, #0
    2076:	4770      	bx	lr

00002078 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    2078:	2000      	movs	r0, #0
    207a:	4770      	bx	lr

0000207c <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    207c:	4770      	bx	lr
	...

00002080 <cpu_irq_restore>:
{
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
    2080:	4b07      	ldr	r3, [pc, #28]	; (20a0 <cpu_irq_restore+0x20>)
    2082:	b082      	sub	sp, #8
    2084:	447b      	add	r3, pc
	if (cpu_irq_is_enabled_flags(flags))
    2086:	2800      	cmp	r0, #0
    2088:	d008      	beq.n	209c <cpu_irq_restore+0x1c>
		cpu_irq_enable();
    208a:	4a06      	ldr	r2, [pc, #24]	; (20a4 <cpu_irq_restore+0x24>)
    208c:	589b      	ldr	r3, [r3, r2]
    208e:	9301      	str	r3, [sp, #4]
    2090:	2301      	movs	r3, #1
    2092:	9a01      	ldr	r2, [sp, #4]
    2094:	7013      	strb	r3, [r2, #0]
    2096:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    209a:	b662      	cpsie	i
}
    209c:	b002      	add	sp, #8
    209e:	4770      	bx	lr
    20a0:	0000ba64 	.word	0x0000ba64
    20a4:	00000120 	.word	0x00000120

000020a8 <udi_cdc_comm_setup>:
{
    20a8:	2160      	movs	r1, #96	; 0x60
    20aa:	4b15      	ldr	r3, [pc, #84]	; (2100 <udi_cdc_comm_setup+0x58>)
	if (Udd_setup_is_in()) {
    20ac:	4a15      	ldr	r2, [pc, #84]	; (2104 <udi_cdc_comm_setup+0x5c>)
{
    20ae:	447b      	add	r3, pc
	if (Udd_setup_is_in()) {
    20b0:	589b      	ldr	r3, [r3, r2]
    20b2:	781a      	ldrb	r2, [r3, #0]
    20b4:	b250      	sxtb	r0, r2
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    20b6:	400a      	ands	r2, r1
	if (Udd_setup_is_in()) {
    20b8:	2800      	cmp	r0, #0
    20ba:	da0e      	bge.n	20da <udi_cdc_comm_setup+0x32>
	return false;  // request Not supported
    20bc:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    20be:	2a20      	cmp	r2, #32
    20c0:	d114      	bne.n	20ec <udi_cdc_comm_setup+0x44>
			switch (udd_g_ctrlreq.req.bRequest) {
    20c2:	785a      	ldrb	r2, [r3, #1]
    20c4:	2a21      	cmp	r2, #33	; 0x21
    20c6:	d111      	bne.n	20ec <udi_cdc_comm_setup+0x44>
				if (sizeof(usb_cdc_line_coding_t) !=
    20c8:	88da      	ldrh	r2, [r3, #6]
    20ca:	2a07      	cmp	r2, #7
    20cc:	d10e      	bne.n	20ec <udi_cdc_comm_setup+0x44>
				udd_g_ctrlreq.payload =
    20ce:	490e      	ldr	r1, [pc, #56]	; (2108 <udi_cdc_comm_setup+0x60>)
    20d0:	4479      	add	r1, pc
				udd_g_ctrlreq.payload =
    20d2:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size =
    20d4:	819a      	strh	r2, [r3, #12]
    20d6:	2001      	movs	r0, #1
    20d8:	e008      	b.n	20ec <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
    20da:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    20dc:	2a20      	cmp	r2, #32
    20de:	d105      	bne.n	20ec <udi_cdc_comm_setup+0x44>
			switch (udd_g_ctrlreq.req.bRequest) {
    20e0:	785a      	ldrb	r2, [r3, #1]
    20e2:	2a20      	cmp	r2, #32
    20e4:	d003      	beq.n	20ee <udi_cdc_comm_setup+0x46>
	return false;  // request Not supported
    20e6:	3a22      	subs	r2, #34	; 0x22
    20e8:	4250      	negs	r0, r2
    20ea:	4150      	adcs	r0, r2
}
    20ec:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
    20ee:	88da      	ldrh	r2, [r3, #6]
    20f0:	2a07      	cmp	r2, #7
    20f2:	d1fb      	bne.n	20ec <udi_cdc_comm_setup+0x44>
				udd_g_ctrlreq.callback =
    20f4:	4905      	ldr	r1, [pc, #20]	; (210c <udi_cdc_comm_setup+0x64>)
    20f6:	4479      	add	r1, pc
    20f8:	6119      	str	r1, [r3, #16]
				udd_g_ctrlreq.payload =
    20fa:	4905      	ldr	r1, [pc, #20]	; (2110 <udi_cdc_comm_setup+0x68>)
    20fc:	4479      	add	r1, pc
    20fe:	e7e8      	b.n	20d2 <udi_cdc_comm_setup+0x2a>
    2100:	0000ba3a 	.word	0x0000ba3a
    2104:	00000224 	.word	0x00000224
    2108:	1fffea24 	.word	0x1fffea24
    210c:	ffffff83 	.word	0xffffff83
    2110:	1fffe9f8 	.word	0x1fffe9f8

00002114 <udi_cdc_tx_send.isra.2>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    2116:	4b4b      	ldr	r3, [pc, #300]	; (2244 <udi_cdc_tx_send.isra.2+0x130>)
static void udi_cdc_tx_send(uint8_t port)
    2118:	4d4b      	ldr	r5, [pc, #300]	; (2248 <udi_cdc_tx_send.isra.2+0x134>)
	if (udi_cdc_tx_trans_ongoing[port]) {
    211a:	447b      	add	r3, pc
    211c:	781b      	ldrb	r3, [r3, #0]
static void udi_cdc_tx_send(uint8_t port)
    211e:	447d      	add	r5, pc
    2120:	b085      	sub	sp, #20
	if (udi_cdc_tx_trans_ongoing[port]) {
    2122:	2b00      	cmp	r3, #0
    2124:	d12c      	bne.n	2180 <udi_cdc_tx_send.isra.2+0x6c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    2126:	4b49      	ldr	r3, [pc, #292]	; (224c <udi_cdc_tx_send.isra.2+0x138>)
    2128:	58eb      	ldr	r3, [r5, r3]
    212a:	9302      	str	r3, [sp, #8]
    212c:	4798      	blx	r3
    212e:	2800      	cmp	r0, #0
    2130:	d028      	beq.n	2184 <udi_cdc_tx_send.isra.2+0x70>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    2132:	4b47      	ldr	r3, [pc, #284]	; (2250 <udi_cdc_tx_send.isra.2+0x13c>)
    2134:	447b      	add	r3, pc
    2136:	881c      	ldrh	r4, [r3, #0]
    2138:	4b46      	ldr	r3, [pc, #280]	; (2254 <udi_cdc_tx_send.isra.2+0x140>)
    213a:	58eb      	ldr	r3, [r5, r3]
    213c:	9303      	str	r3, [sp, #12]
    213e:	4798      	blx	r3
    2140:	4284      	cmp	r4, r0
    2142:	d01d      	beq.n	2180 <udi_cdc_tx_send.isra.2+0x6c>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    2144:	4b44      	ldr	r3, [pc, #272]	; (2258 <udi_cdc_tx_send.isra.2+0x144>)
    2146:	447b      	add	r3, pc
    2148:	4798      	blx	r3
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    214a:	4b44      	ldr	r3, [pc, #272]	; (225c <udi_cdc_tx_send.isra.2+0x148>)
	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    214c:	0007      	movs	r7, r0
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    214e:	447b      	add	r3, pc
    2150:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    2152:	4b43      	ldr	r3, [pc, #268]	; (2260 <udi_cdc_tx_send.isra.2+0x14c>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    2154:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    2156:	0062      	lsls	r2, r4, #1
    2158:	447b      	add	r3, pc
    215a:	5ad3      	ldrh	r3, [r2, r3]
    215c:	2b00      	cmp	r3, #0
    215e:	d120      	bne.n	21a2 <udi_cdc_tx_send.isra.2+0x8e>
		sof_zlp_counter++;
    2160:	4e40      	ldr	r6, [pc, #256]	; (2264 <udi_cdc_tx_send.isra.2+0x150>)
    2162:	447e      	add	r6, pc
    2164:	8833      	ldrh	r3, [r6, #0]
    2166:	3301      	adds	r3, #1
    2168:	8033      	strh	r3, [r6, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    216a:	9b02      	ldr	r3, [sp, #8]
    216c:	4798      	blx	r3
    216e:	2800      	cmp	r0, #0
    2170:	d10d      	bne.n	218e <udi_cdc_tx_send.isra.2+0x7a>
    2172:	8833      	ldrh	r3, [r6, #0]
    2174:	2b63      	cmp	r3, #99	; 0x63
    2176:	d80a      	bhi.n	218e <udi_cdc_tx_send.isra.2+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
    2178:	4b3b      	ldr	r3, [pc, #236]	; (2268 <udi_cdc_tx_send.isra.2+0x154>)
    217a:	0038      	movs	r0, r7
    217c:	447b      	add	r3, pc
    217e:	4798      	blx	r3
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    2180:	b005      	add	sp, #20
    2182:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    2184:	4b39      	ldr	r3, [pc, #228]	; (226c <udi_cdc_tx_send.isra.2+0x158>)
    2186:	447b      	add	r3, pc
    2188:	881c      	ldrh	r4, [r3, #0]
    218a:	4b39      	ldr	r3, [pc, #228]	; (2270 <udi_cdc_tx_send.isra.2+0x15c>)
    218c:	e7d5      	b.n	213a <udi_cdc_tx_send.isra.2+0x26>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    218e:	9b02      	ldr	r3, [sp, #8]
    2190:	4798      	blx	r3
    2192:	2800      	cmp	r0, #0
    2194:	d005      	beq.n	21a2 <udi_cdc_tx_send.isra.2+0x8e>
    2196:	4a37      	ldr	r2, [pc, #220]	; (2274 <udi_cdc_tx_send.isra.2+0x160>)
    2198:	4b37      	ldr	r3, [pc, #220]	; (2278 <udi_cdc_tx_send.isra.2+0x164>)
    219a:	447a      	add	r2, pc
    219c:	8812      	ldrh	r2, [r2, #0]
    219e:	429a      	cmp	r2, r3
    21a0:	d9ea      	bls.n	2178 <udi_cdc_tx_send.isra.2+0x64>
	sof_zlp_counter = 0;
    21a2:	2200      	movs	r2, #0
    21a4:	4b35      	ldr	r3, [pc, #212]	; (227c <udi_cdc_tx_send.isra.2+0x168>)
    21a6:	447b      	add	r3, pc
    21a8:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    21aa:	4b35      	ldr	r3, [pc, #212]	; (2280 <udi_cdc_tx_send.isra.2+0x16c>)
    21ac:	447b      	add	r3, pc
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	4293      	cmp	r3, r2
    21b2:	d136      	bne.n	2222 <udi_cdc_tx_send.isra.2+0x10e>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    21b4:	4263      	negs	r3, r4
    21b6:	4163      	adcs	r3, r4
    21b8:	4a32      	ldr	r2, [pc, #200]	; (2284 <udi_cdc_tx_send.isra.2+0x170>)
    21ba:	b2db      	uxtb	r3, r3
    21bc:	447a      	add	r2, pc
    21be:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    21c0:	2201      	movs	r2, #1
    21c2:	4b31      	ldr	r3, [pc, #196]	; (2288 <udi_cdc_tx_send.isra.2+0x174>)
	cpu_irq_restore(flags);
    21c4:	0038      	movs	r0, r7
	udi_cdc_tx_trans_ongoing[port] = true;
    21c6:	447b      	add	r3, pc
    21c8:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
    21ca:	4b30      	ldr	r3, [pc, #192]	; (228c <udi_cdc_tx_send.isra.2+0x178>)
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    21cc:	0067      	lsls	r7, r4, #1
	cpu_irq_restore(flags);
    21ce:	447b      	add	r3, pc
    21d0:	4798      	blx	r3
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    21d2:	4b2f      	ldr	r3, [pc, #188]	; (2290 <udi_cdc_tx_send.isra.2+0x17c>)
    21d4:	447b      	add	r3, pc
    21d6:	5afa      	ldrh	r2, [r7, r3]
    21d8:	0013      	movs	r3, r2
    21da:	3b40      	subs	r3, #64	; 0x40
    21dc:	1e59      	subs	r1, r3, #1
    21de:	418b      	sbcs	r3, r1
    21e0:	b2db      	uxtb	r3, r3
    21e2:	001e      	movs	r6, r3
	if (b_short_packet) {
    21e4:	2a40      	cmp	r2, #64	; 0x40
    21e6:	d027      	beq.n	2238 <udi_cdc_tx_send.isra.2+0x124>
		if (udd_is_high_speed()) {
    21e8:	9b02      	ldr	r3, [sp, #8]
    21ea:	4798      	blx	r3
    21ec:	2800      	cmp	r0, #0
    21ee:	d01c      	beq.n	222a <udi_cdc_tx_send.isra.2+0x116>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    21f0:	4b18      	ldr	r3, [pc, #96]	; (2254 <udi_cdc_tx_send.isra.2+0x140>)
    21f2:	58eb      	ldr	r3, [r5, r3]
    21f4:	9302      	str	r3, [sp, #8]
    21f6:	4798      	blx	r3
    21f8:	4b26      	ldr	r3, [pc, #152]	; (2294 <udi_cdc_tx_send.isra.2+0x180>)
    21fa:	447b      	add	r3, pc
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    21fc:	8018      	strh	r0, [r3, #0]
			udi_cdc_tx_buf[port][buf_sel_trans],
    21fe:	4a26      	ldr	r2, [pc, #152]	; (2298 <udi_cdc_tx_send.isra.2+0x184>)
    2200:	01a4      	lsls	r4, r4, #6
    2202:	447a      	add	r2, pc
    2204:	1914      	adds	r4, r2, r4
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    2206:	4b25      	ldr	r3, [pc, #148]	; (229c <udi_cdc_tx_send.isra.2+0x188>)
	udd_ep_run( ep,
    2208:	4a25      	ldr	r2, [pc, #148]	; (22a0 <udi_cdc_tx_send.isra.2+0x18c>)
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    220a:	447b      	add	r3, pc
	udd_ep_run( ep,
    220c:	447a      	add	r2, pc
    220e:	5bdb      	ldrh	r3, [r3, r7]
    2210:	9200      	str	r2, [sp, #0]
    2212:	0022      	movs	r2, r4
    2214:	4c23      	ldr	r4, [pc, #140]	; (22a4 <udi_cdc_tx_send.isra.2+0x190>)
    2216:	0031      	movs	r1, r6
    2218:	592c      	ldr	r4, [r5, r4]
    221a:	2081      	movs	r0, #129	; 0x81
    221c:	9402      	str	r4, [sp, #8]
    221e:	47a0      	blx	r4
    2220:	e7ae      	b.n	2180 <udi_cdc_tx_send.isra.2+0x6c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    2222:	4262      	negs	r2, r4
    2224:	4154      	adcs	r4, r2
    2226:	b2e4      	uxtb	r4, r4
    2228:	e7ca      	b.n	21c0 <udi_cdc_tx_send.isra.2+0xac>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    222a:	4b11      	ldr	r3, [pc, #68]	; (2270 <udi_cdc_tx_send.isra.2+0x15c>)
    222c:	58eb      	ldr	r3, [r5, r3]
    222e:	9302      	str	r3, [sp, #8]
    2230:	4798      	blx	r3
    2232:	4b1d      	ldr	r3, [pc, #116]	; (22a8 <udi_cdc_tx_send.isra.2+0x194>)
    2234:	447b      	add	r3, pc
    2236:	e7e1      	b.n	21fc <udi_cdc_tx_send.isra.2+0xe8>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    2238:	2200      	movs	r2, #0
    223a:	4b1c      	ldr	r3, [pc, #112]	; (22ac <udi_cdc_tx_send.isra.2+0x198>)
    223c:	447b      	add	r3, pc
    223e:	801a      	strh	r2, [r3, #0]
    2240:	e7dd      	b.n	21fe <udi_cdc_tx_send.isra.2+0xea>
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	1fffeafe 	.word	0x1fffeafe
    2248:	0000b9ca 	.word	0x0000b9ca
    224c:	000001d0 	.word	0x000001d0
    2250:	1fffeae2 	.word	0x1fffeae2
    2254:	00000064 	.word	0x00000064
    2258:	fffffe73 	.word	0xfffffe73
    225c:	1fffeac6 	.word	0x1fffeac6
    2260:	1fffeab8 	.word	0x1fffeab8
    2264:	1fffe98c 	.word	0x1fffe98c
    2268:	ffffff01 	.word	0xffffff01
    226c:	1fffea90 	.word	0x1fffea90
    2270:	000000f8 	.word	0x000000f8
    2274:	1fffe954 	.word	0x1fffe954
    2278:	0000031f 	.word	0x0000031f
    227c:	1fffe948 	.word	0x1fffe948
    2280:	1fffe9e0 	.word	0x1fffe9e0
    2284:	1fffea58 	.word	0x1fffea58
    2288:	1fffea52 	.word	0x1fffea52
    228c:	fffffeaf 	.word	0xfffffeaf
    2290:	1fffea3c 	.word	0x1fffea3c
    2294:	1fffea1c 	.word	0x1fffea1c
    2298:	1fffe98e 	.word	0x1fffe98e
    229c:	1fffea06 	.word	0x1fffea06
    22a0:	000000b1 	.word	0x000000b1
    22a4:	00000098 	.word	0x00000098
    22a8:	1fffe9e2 	.word	0x1fffe9e2
    22ac:	1fffe9da 	.word	0x1fffe9da

000022b0 <udi_cdc_data_sof_notify>:
{
    22b0:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    22b2:	4b02      	ldr	r3, [pc, #8]	; (22bc <udi_cdc_data_sof_notify+0xc>)
    22b4:	447b      	add	r3, pc
    22b6:	4798      	blx	r3
}
    22b8:	bd10      	pop	{r4, pc}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	fffffe5d 	.word	0xfffffe5d

000022c0 <udi_cdc_data_sent>:
{
    22c0:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    22c2:	2800      	cmp	r0, #0
    22c4:	d111      	bne.n	22ea <udi_cdc_data_sent+0x2a>
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    22c6:	4b09      	ldr	r3, [pc, #36]	; (22ec <udi_cdc_data_sent+0x2c>)
    22c8:	447b      	add	r3, pc
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	425a      	negs	r2, r3
    22ce:	4153      	adcs	r3, r2
    22d0:	4a07      	ldr	r2, [pc, #28]	; (22f0 <udi_cdc_data_sent+0x30>)
    22d2:	005b      	lsls	r3, r3, #1
    22d4:	447a      	add	r2, pc
    22d6:	5298      	strh	r0, [r3, r2]
	udi_cdc_tx_both_buf_to_send[port] = false;
    22d8:	4b06      	ldr	r3, [pc, #24]	; (22f4 <udi_cdc_data_sent+0x34>)
    22da:	447b      	add	r3, pc
    22dc:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    22de:	4b06      	ldr	r3, [pc, #24]	; (22f8 <udi_cdc_data_sent+0x38>)
    22e0:	447b      	add	r3, pc
    22e2:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
    22e4:	4b05      	ldr	r3, [pc, #20]	; (22fc <udi_cdc_data_sent+0x3c>)
    22e6:	447b      	add	r3, pc
    22e8:	4798      	blx	r3
}
    22ea:	bd10      	pop	{r4, pc}
    22ec:	1fffe94c 	.word	0x1fffe94c
    22f0:	1fffe93c 	.word	0x1fffe93c
    22f4:	1fffe8b2 	.word	0x1fffe8b2
    22f8:	1fffe938 	.word	0x1fffe938
    22fc:	fffffe2b 	.word	0xfffffe2b

00002300 <udi_cdc_multi_get_nb_received_data>:
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
    2300:	4b0a      	ldr	r3, [pc, #40]	; (232c <udi_cdc_multi_get_nb_received_data+0x2c>)
{
    2302:	b570      	push	{r4, r5, r6, lr}
	flags = cpu_irq_save();
    2304:	447b      	add	r3, pc
    2306:	4798      	blx	r3
	pos = udi_cdc_rx_pos[port];
    2308:	4b09      	ldr	r3, [pc, #36]	; (2330 <udi_cdc_multi_get_nb_received_data+0x30>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    230a:	4a0a      	ldr	r2, [pc, #40]	; (2334 <udi_cdc_multi_get_nb_received_data+0x34>)
	pos = udi_cdc_rx_pos[port];
    230c:	447b      	add	r3, pc
    230e:	881d      	ldrh	r5, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    2310:	4b09      	ldr	r3, [pc, #36]	; (2338 <udi_cdc_multi_get_nb_received_data+0x38>)
    2312:	447a      	add	r2, pc
    2314:	447b      	add	r3, pc
    2316:	781b      	ldrb	r3, [r3, #0]
	pos = udi_cdc_rx_pos[port];
    2318:	b2ad      	uxth	r5, r5
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    231a:	005b      	lsls	r3, r3, #1
    231c:	5a9c      	ldrh	r4, [r3, r2]
	cpu_irq_restore(flags);
    231e:	4b07      	ldr	r3, [pc, #28]	; (233c <udi_cdc_multi_get_nb_received_data+0x3c>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    2320:	b2a4      	uxth	r4, r4
	cpu_irq_restore(flags);
    2322:	447b      	add	r3, pc
    2324:	4798      	blx	r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    2326:	1b60      	subs	r0, r4, r5
	return nb_received;
}
    2328:	bd70      	pop	{r4, r5, r6, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	fffffcb5 	.word	0xfffffcb5
    2330:	1fffe87a 	.word	0x1fffe87a
    2334:	1fffe86e 	.word	0x1fffe86e
    2338:	1fffe870 	.word	0x1fffe870
    233c:	fffffd5b 	.word	0xfffffd5b

00002340 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    2340:	b507      	push	{r0, r1, r2, lr}
    2342:	4b05      	ldr	r3, [pc, #20]	; (2358 <udi_cdc_multi_is_rx_ready+0x18>)
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    2344:	4a05      	ldr	r2, [pc, #20]	; (235c <udi_cdc_multi_is_rx_ready+0x1c>)
{
    2346:	447b      	add	r3, pc
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    2348:	589b      	ldr	r3, [r3, r2]
    234a:	9301      	str	r3, [sp, #4]
    234c:	4798      	blx	r3
    234e:	1e43      	subs	r3, r0, #1
    2350:	4198      	sbcs	r0, r3
    2352:	b2c0      	uxtb	r0, r0
}
    2354:	bd0e      	pop	{r1, r2, r3, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	0000b7a2 	.word	0x0000b7a2
    235c:	00000034 	.word	0x00000034

00002360 <udi_cdc_rx_start.isra.8>:
static bool udi_cdc_rx_start(uint8_t port)
    2360:	b5f0      	push	{r4, r5, r6, r7, lr}
	flags = cpu_irq_save();
    2362:	4b20      	ldr	r3, [pc, #128]	; (23e4 <udi_cdc_rx_start.isra.8+0x84>)
static bool udi_cdc_rx_start(uint8_t port)
    2364:	b085      	sub	sp, #20
	flags = cpu_irq_save();
    2366:	447b      	add	r3, pc
    2368:	4798      	blx	r3
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    236a:	491f      	ldr	r1, [pc, #124]	; (23e8 <udi_cdc_rx_start.isra.8+0x88>)
	if (udi_cdc_rx_trans_ongoing[port] ||
    236c:	4b1f      	ldr	r3, [pc, #124]	; (23ec <udi_cdc_rx_start.isra.8+0x8c>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    236e:	4479      	add	r1, pc
	if (udi_cdc_rx_trans_ongoing[port] ||
    2370:	447b      	add	r3, pc
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    2372:	780c      	ldrb	r4, [r1, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    2374:	781d      	ldrb	r5, [r3, #0]
static bool udi_cdc_rx_start(uint8_t port)
    2376:	4e1e      	ldr	r6, [pc, #120]	; (23f0 <udi_cdc_rx_start.isra.8+0x90>)
	if (udi_cdc_rx_trans_ongoing[port] ||
    2378:	b2ed      	uxtb	r5, r5
static bool udi_cdc_rx_start(uint8_t port)
    237a:	447e      	add	r6, pc
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    237c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    237e:	9302      	str	r3, [sp, #8]
    2380:	2d00      	cmp	r5, #0
    2382:	d10a      	bne.n	239a <udi_cdc_rx_start.isra.8+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    2384:	4f1b      	ldr	r7, [pc, #108]	; (23f4 <udi_cdc_rx_start.isra.8+0x94>)
    2386:	4a1c      	ldr	r2, [pc, #112]	; (23f8 <udi_cdc_rx_start.isra.8+0x98>)
    2388:	447f      	add	r7, pc
    238a:	883b      	ldrh	r3, [r7, #0]
    238c:	447a      	add	r2, pc
    238e:	9303      	str	r3, [sp, #12]
    2390:	0063      	lsls	r3, r4, #1
    2392:	5a9b      	ldrh	r3, [r3, r2]
	if (udi_cdc_rx_trans_ongoing[port] ||
    2394:	9a03      	ldr	r2, [sp, #12]
    2396:	429a      	cmp	r2, r3
    2398:	d205      	bcs.n	23a6 <udi_cdc_rx_start.isra.8+0x46>
		cpu_irq_restore(flags);
    239a:	4b18      	ldr	r3, [pc, #96]	; (23fc <udi_cdc_rx_start.isra.8+0x9c>)
    239c:	447b      	add	r3, pc
    239e:	4798      	blx	r3
		return false;
    23a0:	2000      	movs	r0, #0
}
    23a2:	b005      	add	sp, #20
    23a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_cdc_rx_pos[port] = 0;
    23a6:	803d      	strh	r5, [r7, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    23a8:	4263      	negs	r3, r4
    23aa:	4163      	adcs	r3, r4
	udi_cdc_rx_trans_ongoing[port] = true;
    23ac:	2701      	movs	r7, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    23ae:	b2db      	uxtb	r3, r3
    23b0:	700b      	strb	r3, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    23b2:	9b02      	ldr	r3, [sp, #8]
			udi_cdc_rx_buf[port][buf_sel_trans],
    23b4:	01a4      	lsls	r4, r4, #6
	udi_cdc_rx_trans_ongoing[port] = true;
    23b6:	701f      	strb	r7, [r3, #0]
	cpu_irq_restore(flags);
    23b8:	4b11      	ldr	r3, [pc, #68]	; (2400 <udi_cdc_rx_start.isra.8+0xa0>)
    23ba:	447b      	add	r3, pc
    23bc:	4798      	blx	r3
	if (udi_cdc_multi_is_rx_ready(port)) {
    23be:	4b11      	ldr	r3, [pc, #68]	; (2404 <udi_cdc_rx_start.isra.8+0xa4>)
    23c0:	0028      	movs	r0, r5
    23c2:	58f3      	ldr	r3, [r6, r3]
    23c4:	9302      	str	r3, [sp, #8]
    23c6:	4798      	blx	r3
			udi_cdc_rx_buf[port][buf_sel_trans],
    23c8:	4a0f      	ldr	r2, [pc, #60]	; (2408 <udi_cdc_rx_start.isra.8+0xa8>)
	return udd_ep_run(ep,
    23ca:	4b10      	ldr	r3, [pc, #64]	; (240c <udi_cdc_rx_start.isra.8+0xac>)
			udi_cdc_rx_buf[port][buf_sel_trans],
    23cc:	447a      	add	r2, pc
    23ce:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
    23d0:	447b      	add	r3, pc
    23d2:	4c0f      	ldr	r4, [pc, #60]	; (2410 <udi_cdc_rx_start.isra.8+0xb0>)
    23d4:	9300      	str	r3, [sp, #0]
    23d6:	5934      	ldr	r4, [r6, r4]
    23d8:	2340      	movs	r3, #64	; 0x40
    23da:	0039      	movs	r1, r7
    23dc:	2002      	movs	r0, #2
    23de:	9402      	str	r4, [sp, #8]
    23e0:	47a0      	blx	r4
    23e2:	e7de      	b.n	23a2 <udi_cdc_rx_start.isra.8+0x42>
    23e4:	fffffc53 	.word	0xfffffc53
    23e8:	1fffe816 	.word	0x1fffe816
    23ec:	1fffe818 	.word	0x1fffe818
    23f0:	0000b76e 	.word	0x0000b76e
    23f4:	1fffe7fe 	.word	0x1fffe7fe
    23f8:	1fffe7f4 	.word	0x1fffe7f4
    23fc:	fffffce1 	.word	0xfffffce1
    2400:	fffffcc3 	.word	0xfffffcc3
    2404:	000001ec 	.word	0x000001ec
    2408:	1fffe734 	.word	0x1fffe734
    240c:	000000e1 	.word	0x000000e1
    2410:	00000098 	.word	0x00000098

00002414 <udi_cdc_data_enable>:
{
    2414:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    2416:	2400      	movs	r4, #0
    2418:	4d19      	ldr	r5, [pc, #100]	; (2480 <udi_cdc_data_enable+0x6c>)
	udi_cdc_tx_trans_ongoing[port] = false;
    241a:	4b1a      	ldr	r3, [pc, #104]	; (2484 <udi_cdc_data_enable+0x70>)
	udi_cdc_nb_data_enabled = 0;
    241c:	447d      	add	r5, pc
	udi_cdc_tx_trans_ongoing[port] = false;
    241e:	447b      	add	r3, pc
	udi_cdc_nb_data_enabled = 0;
    2420:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    2422:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    2424:	4b18      	ldr	r3, [pc, #96]	; (2488 <udi_cdc_data_enable+0x74>)
    2426:	447b      	add	r3, pc
    2428:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    242a:	4b18      	ldr	r3, [pc, #96]	; (248c <udi_cdc_data_enable+0x78>)
    242c:	447b      	add	r3, pc
    242e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    2430:	4b17      	ldr	r3, [pc, #92]	; (2490 <udi_cdc_data_enable+0x7c>)
    2432:	447b      	add	r3, pc
    2434:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    2436:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    2438:	4b16      	ldr	r3, [pc, #88]	; (2494 <udi_cdc_data_enable+0x80>)
    243a:	447b      	add	r3, pc
    243c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    243e:	4b16      	ldr	r3, [pc, #88]	; (2498 <udi_cdc_data_enable+0x84>)
    2440:	447b      	add	r3, pc
    2442:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    2444:	4b15      	ldr	r3, [pc, #84]	; (249c <udi_cdc_data_enable+0x88>)
    2446:	447b      	add	r3, pc
    2448:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    244a:	4b15      	ldr	r3, [pc, #84]	; (24a0 <udi_cdc_data_enable+0x8c>)
    244c:	447b      	add	r3, pc
    244e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    2450:	4b14      	ldr	r3, [pc, #80]	; (24a4 <udi_cdc_data_enable+0x90>)
    2452:	447b      	add	r3, pc
    2454:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    2456:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    2458:	4b13      	ldr	r3, [pc, #76]	; (24a8 <udi_cdc_data_enable+0x94>)
    245a:	447b      	add	r3, pc
    245c:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    245e:	4b13      	ldr	r3, [pc, #76]	; (24ac <udi_cdc_data_enable+0x98>)
    2460:	447b      	add	r3, pc
    2462:	4798      	blx	r3
    2464:	42a0      	cmp	r0, r4
    2466:	d00a      	beq.n	247e <udi_cdc_data_enable+0x6a>
	udi_cdc_nb_data_enabled++;
    2468:	782b      	ldrb	r3, [r5, #0]
    246a:	3301      	adds	r3, #1
    246c:	b2db      	uxtb	r3, r3
    246e:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    2470:	782b      	ldrb	r3, [r5, #0]
    2472:	b2db      	uxtb	r3, r3
    2474:	2b01      	cmp	r3, #1
    2476:	d102      	bne.n	247e <udi_cdc_data_enable+0x6a>
		udi_cdc_data_running = true;
    2478:	4a0d      	ldr	r2, [pc, #52]	; (24b0 <udi_cdc_data_enable+0x9c>)
    247a:	447a      	add	r2, pc
    247c:	7013      	strb	r3, [r2, #0]
}
    247e:	bd70      	pop	{r4, r5, r6, pc}
    2480:	1fffe6e0 	.word	0x1fffe6e0
    2484:	1fffe7fa 	.word	0x1fffe7fa
    2488:	1fffe766 	.word	0x1fffe766
    248c:	1fffe7e8 	.word	0x1fffe7e8
    2490:	1fffe7de 	.word	0x1fffe7de
    2494:	1fffe7dc 	.word	0x1fffe7dc
    2498:	fffffcd1 	.word	0xfffffcd1
    249c:	1fffe742 	.word	0x1fffe742
    24a0:	1fffe738 	.word	0x1fffe738
    24a4:	1fffe72e 	.word	0x1fffe72e
    24a8:	1fffe72c 	.word	0x1fffe72c
    24ac:	fffffefd 	.word	0xfffffefd
    24b0:	1fffe676 	.word	0x1fffe676

000024b4 <udi_cdc_data_received>:
{
    24b4:	b530      	push	{r4, r5, lr}
    24b6:	4c15      	ldr	r4, [pc, #84]	; (250c <udi_cdc_data_received+0x58>)
    24b8:	0003      	movs	r3, r0
    24ba:	b085      	sub	sp, #20
    24bc:	0010      	movs	r0, r2
    24be:	447c      	add	r4, pc
	if (UDD_EP_TRANSFER_OK != status) {
    24c0:	2b00      	cmp	r3, #0
    24c2:	d114      	bne.n	24ee <udi_cdc_data_received+0x3a>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    24c4:	4a12      	ldr	r2, [pc, #72]	; (2510 <udi_cdc_data_received+0x5c>)
    24c6:	447a      	add	r2, pc
    24c8:	7812      	ldrb	r2, [r2, #0]
    24ca:	4255      	negs	r5, r2
    24cc:	416a      	adcs	r2, r5
    24ce:	b2d2      	uxtb	r2, r2
	if (!n) {
    24d0:	2900      	cmp	r1, #0
    24d2:	d10e      	bne.n	24f2 <udi_cdc_data_received+0x3e>
				udi_cdc_rx_buf[port][buf_sel_trans],
    24d4:	4b0f      	ldr	r3, [pc, #60]	; (2514 <udi_cdc_data_received+0x60>)
    24d6:	0192      	lsls	r2, r2, #6
    24d8:	447b      	add	r3, pc
    24da:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    24dc:	4b0e      	ldr	r3, [pc, #56]	; (2518 <udi_cdc_data_received+0x64>)
    24de:	4d0f      	ldr	r5, [pc, #60]	; (251c <udi_cdc_data_received+0x68>)
    24e0:	447b      	add	r3, pc
    24e2:	9300      	str	r3, [sp, #0]
    24e4:	5964      	ldr	r4, [r4, r5]
    24e6:	2340      	movs	r3, #64	; 0x40
    24e8:	3101      	adds	r1, #1
    24ea:	9403      	str	r4, [sp, #12]
    24ec:	47a0      	blx	r4
}
    24ee:	b005      	add	sp, #20
    24f0:	bd30      	pop	{r4, r5, pc}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    24f2:	480b      	ldr	r0, [pc, #44]	; (2520 <udi_cdc_data_received+0x6c>)
    24f4:	b289      	uxth	r1, r1
    24f6:	0052      	lsls	r2, r2, #1
    24f8:	4478      	add	r0, pc
    24fa:	5211      	strh	r1, [r2, r0]
	udi_cdc_rx_trans_ongoing[port] = false;
    24fc:	4a09      	ldr	r2, [pc, #36]	; (2524 <udi_cdc_data_received+0x70>)
    24fe:	447a      	add	r2, pc
    2500:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_start(port);
    2502:	4b09      	ldr	r3, [pc, #36]	; (2528 <udi_cdc_data_received+0x74>)
    2504:	447b      	add	r3, pc
    2506:	4798      	blx	r3
    2508:	e7f1      	b.n	24ee <udi_cdc_data_received+0x3a>
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	0000b62a 	.word	0x0000b62a
    2510:	1fffe6be 	.word	0x1fffe6be
    2514:	1fffe628 	.word	0x1fffe628
    2518:	ffffffd1 	.word	0xffffffd1
    251c:	00000098 	.word	0x00000098
    2520:	1fffe688 	.word	0x1fffe688
    2524:	1fffe68a 	.word	0x1fffe68a
    2528:	fffffe59 	.word	0xfffffe59

0000252c <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    252c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    252e:	4b1e      	ldr	r3, [pc, #120]	; (25a8 <udi_cdc_multi_getc+0x7c>)
	int rx_data = 0;
    2530:	2600      	movs	r6, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2532:	447b      	add	r3, pc
    2534:	799b      	ldrb	r3, [r3, #6]
    2536:	3b09      	subs	r3, #9
    2538:	425a      	negs	r2, r3
    253a:	4153      	adcs	r3, r2
    253c:	b2db      	uxtb	r3, r3
    253e:	9300      	str	r3, [sp, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    2540:	4b1a      	ldr	r3, [pc, #104]	; (25ac <udi_cdc_multi_getc+0x80>)
	pos = udi_cdc_rx_pos[port];
    2542:	4f1b      	ldr	r7, [pc, #108]	; (25b0 <udi_cdc_multi_getc+0x84>)
	flags = cpu_irq_save();
    2544:	447b      	add	r3, pc
    2546:	4798      	blx	r3
	buf_sel = udi_cdc_rx_buf_sel[port];
    2548:	4b1a      	ldr	r3, [pc, #104]	; (25b4 <udi_cdc_multi_getc+0x88>)
	pos = udi_cdc_rx_pos[port];
    254a:	447f      	add	r7, pc
	buf_sel = udi_cdc_rx_buf_sel[port];
    254c:	447b      	add	r3, pc
	pos = udi_cdc_rx_pos[port];
    254e:	883c      	ldrh	r4, [r7, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    2550:	781d      	ldrb	r5, [r3, #0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    2552:	4b19      	ldr	r3, [pc, #100]	; (25b8 <udi_cdc_multi_getc+0x8c>)
	buf_sel = udi_cdc_rx_buf_sel[port];
    2554:	b2ed      	uxtb	r5, r5
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    2556:	006a      	lsls	r2, r5, #1
    2558:	447b      	add	r3, pc
    255a:	5ad3      	ldrh	r3, [r2, r3]
	pos = udi_cdc_rx_pos[port];
    255c:	b2a4      	uxth	r4, r4
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    255e:	b29b      	uxth	r3, r3
    2560:	9301      	str	r3, [sp, #4]
	cpu_irq_restore(flags);
    2562:	4b16      	ldr	r3, [pc, #88]	; (25bc <udi_cdc_multi_getc+0x90>)
    2564:	447b      	add	r3, pc
    2566:	4798      	blx	r3
	while (again) {
    2568:	9b01      	ldr	r3, [sp, #4]
    256a:	429c      	cmp	r4, r3
    256c:	d308      	bcc.n	2580 <udi_cdc_multi_getc+0x54>
		if (!udi_cdc_data_running) {
    256e:	4b14      	ldr	r3, [pc, #80]	; (25c0 <udi_cdc_multi_getc+0x94>)
    2570:	447b      	add	r3, pc
    2572:	781b      	ldrb	r3, [r3, #0]
    2574:	b2db      	uxtb	r3, r3
    2576:	2b00      	cmp	r3, #0
    2578:	d1e2      	bne.n	2540 <udi_cdc_multi_getc+0x14>
			return 0;
    257a:	001e      	movs	r6, r3
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    257c:	0030      	movs	r0, r6
    257e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    2580:	4b10      	ldr	r3, [pc, #64]	; (25c4 <udi_cdc_multi_getc+0x98>)
    2582:	01ad      	lsls	r5, r5, #6
    2584:	447b      	add	r3, pc
    2586:	195d      	adds	r5, r3, r5
    2588:	5d2b      	ldrb	r3, [r5, r4]
	udi_cdc_rx_pos[port] = pos+1;
    258a:	3401      	adds	r4, #1
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    258c:	431e      	orrs	r6, r3
	udi_cdc_rx_start(port);
    258e:	4b0e      	ldr	r3, [pc, #56]	; (25c8 <udi_cdc_multi_getc+0x9c>)
	udi_cdc_rx_pos[port] = pos+1;
    2590:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
    2592:	447b      	add	r3, pc
	udi_cdc_rx_pos[port] = pos+1;
    2594:	803c      	strh	r4, [r7, #0]
	udi_cdc_rx_start(port);
    2596:	4798      	blx	r3
	if (b_databit_9) {
    2598:	9b00      	ldr	r3, [sp, #0]
    259a:	2b00      	cmp	r3, #0
    259c:	d0ee      	beq.n	257c <udi_cdc_multi_getc+0x50>
		b_databit_9 = false;
    259e:	2300      	movs	r3, #0
		rx_data = rx_data << 8;
    25a0:	0236      	lsls	r6, r6, #8
		b_databit_9 = false;
    25a2:	9300      	str	r3, [sp, #0]
		goto udi_cdc_getc_process_one_byte;
    25a4:	e7cc      	b.n	2540 <udi_cdc_multi_getc+0x14>
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	1fffe5c2 	.word	0x1fffe5c2
    25ac:	fffffa75 	.word	0xfffffa75
    25b0:	1fffe63c 	.word	0x1fffe63c
    25b4:	1fffe638 	.word	0x1fffe638
    25b8:	1fffe628 	.word	0x1fffe628
    25bc:	fffffb19 	.word	0xfffffb19
    25c0:	1fffe580 	.word	0x1fffe580
    25c4:	1fffe57c 	.word	0x1fffe57c
    25c8:	fffffdcb 	.word	0xfffffdcb

000025cc <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    25cc:	b507      	push	{r0, r1, r2, lr}
    25ce:	4b04      	ldr	r3, [pc, #16]	; (25e0 <udi_cdc_getc+0x14>)
	return udi_cdc_multi_getc(0);
    25d0:	4a04      	ldr	r2, [pc, #16]	; (25e4 <udi_cdc_getc+0x18>)
{
    25d2:	447b      	add	r3, pc
	return udi_cdc_multi_getc(0);
    25d4:	589b      	ldr	r3, [r3, r2]
    25d6:	2000      	movs	r0, #0
    25d8:	9301      	str	r3, [sp, #4]
    25da:	4798      	blx	r3
}
    25dc:	bd0e      	pop	{r1, r2, r3, pc}
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	0000b516 	.word	0x0000b516
    25e4:	00000240 	.word	0x00000240

000025e8 <udi_cdc_multi_get_free_tx_buffer>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
    25e8:	4b12      	ldr	r3, [pc, #72]	; (2634 <udi_cdc_multi_get_free_tx_buffer+0x4c>)
{
    25ea:	b570      	push	{r4, r5, r6, lr}
	flags = cpu_irq_save();
    25ec:	447b      	add	r3, pc
    25ee:	4798      	blx	r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    25f0:	4911      	ldr	r1, [pc, #68]	; (2638 <udi_cdc_multi_get_free_tx_buffer+0x50>)
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    25f2:	4a12      	ldr	r2, [pc, #72]	; (263c <udi_cdc_multi_get_free_tx_buffer+0x54>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    25f4:	4479      	add	r1, pc
    25f6:	780b      	ldrb	r3, [r1, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    25f8:	447a      	add	r2, pc
	buf_sel = udi_cdc_tx_buf_sel[port];
    25fa:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    25fc:	005c      	lsls	r4, r3, #1
    25fe:	5aa4      	ldrh	r4, [r4, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    2600:	2c40      	cmp	r4, #64	; 0x40
    2602:	d111      	bne.n	2628 <udi_cdc_multi_get_free_tx_buffer+0x40>
		if ((!udi_cdc_tx_trans_ongoing[port])
    2604:	4a0e      	ldr	r2, [pc, #56]	; (2640 <udi_cdc_multi_get_free_tx_buffer+0x58>)
    2606:	447a      	add	r2, pc
    2608:	7812      	ldrb	r2, [r2, #0]
    260a:	2a00      	cmp	r2, #0
    260c:	d10c      	bne.n	2628 <udi_cdc_multi_get_free_tx_buffer+0x40>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    260e:	4d0d      	ldr	r5, [pc, #52]	; (2644 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
    2610:	447d      	add	r5, pc
    2612:	782a      	ldrb	r2, [r5, #0]
    2614:	b2d2      	uxtb	r2, r2
    2616:	2a00      	cmp	r2, #0
    2618:	d106      	bne.n	2628 <udi_cdc_multi_get_free_tx_buffer+0x40>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    261a:	3c3f      	subs	r4, #63	; 0x3f
    261c:	702c      	strb	r4, [r5, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    261e:	425c      	negs	r4, r3
    2620:	4163      	adcs	r3, r4
			buf_sel_nb = 0;
    2622:	0014      	movs	r4, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    2624:	b2db      	uxtb	r3, r3
    2626:	700b      	strb	r3, [r1, #0]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
    2628:	4b07      	ldr	r3, [pc, #28]	; (2648 <udi_cdc_multi_get_free_tx_buffer+0x60>)
    262a:	447b      	add	r3, pc
    262c:	4798      	blx	r3
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    262e:	2040      	movs	r0, #64	; 0x40
    2630:	1b00      	subs	r0, r0, r4
	return retval;
}
    2632:	bd70      	pop	{r4, r5, r6, pc}
    2634:	fffff9cd 	.word	0xfffff9cd
    2638:	1fffe620 	.word	0x1fffe620
    263c:	1fffe618 	.word	0x1fffe618
    2640:	1fffe612 	.word	0x1fffe612
    2644:	1fffe57c 	.word	0x1fffe57c
    2648:	fffffa53 	.word	0xfffffa53

0000264c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    264c:	b507      	push	{r0, r1, r2, lr}
    264e:	4b05      	ldr	r3, [pc, #20]	; (2664 <udi_cdc_multi_is_tx_ready+0x18>)
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    2650:	4a05      	ldr	r2, [pc, #20]	; (2668 <udi_cdc_multi_is_tx_ready+0x1c>)
{
    2652:	447b      	add	r3, pc
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    2654:	589b      	ldr	r3, [r3, r2]
    2656:	9301      	str	r3, [sp, #4]
    2658:	4798      	blx	r3
    265a:	1e43      	subs	r3, r0, #1
    265c:	4198      	sbcs	r0, r3
    265e:	b2c0      	uxtb	r0, r0
}
    2660:	bd0e      	pop	{r1, r2, r3, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	0000b496 	.word	0x0000b496
    2668:	00000200 	.word	0x00000200

0000266c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    266e:	4b1b      	ldr	r3, [pc, #108]	; (26dc <udi_cdc_multi_putc+0x70>)
{
    2670:	000d      	movs	r5, r1
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2672:	447b      	add	r3, pc
    2674:	799c      	ldrb	r4, [r3, #6]
{
    2676:	4e1a      	ldr	r6, [pc, #104]	; (26e0 <udi_cdc_multi_putc+0x74>)
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    2678:	3c09      	subs	r4, #9
    267a:	4263      	negs	r3, r4
    267c:	415c      	adcs	r4, r3
    267e:	b2e4      	uxtb	r4, r4
{
    2680:	447e      	add	r6, pc

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    2682:	4b18      	ldr	r3, [pc, #96]	; (26e4 <udi_cdc_multi_putc+0x78>)
    2684:	2000      	movs	r0, #0
    2686:	58f3      	ldr	r3, [r6, r3]
    2688:	9301      	str	r3, [sp, #4]
    268a:	4798      	blx	r3
    268c:	2800      	cmp	r0, #0
    268e:	d106      	bne.n	269e <udi_cdc_multi_putc+0x32>
		if (!udi_cdc_data_running) {
    2690:	4b15      	ldr	r3, [pc, #84]	; (26e8 <udi_cdc_multi_putc+0x7c>)
    2692:	447b      	add	r3, pc
    2694:	7818      	ldrb	r0, [r3, #0]
    2696:	b2c0      	uxtb	r0, r0
    2698:	2800      	cmp	r0, #0
    269a:	d1f2      	bne.n	2682 <udi_cdc_multi_putc+0x16>
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    269c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	flags = cpu_irq_save();
    269e:	4b13      	ldr	r3, [pc, #76]	; (26ec <udi_cdc_multi_putc+0x80>)
    26a0:	447b      	add	r3, pc
    26a2:	4798      	blx	r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    26a4:	4b12      	ldr	r3, [pc, #72]	; (26f0 <udi_cdc_multi_putc+0x84>)
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    26a6:	4a13      	ldr	r2, [pc, #76]	; (26f4 <udi_cdc_multi_putc+0x88>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    26a8:	447b      	add	r3, pc
    26aa:	781b      	ldrb	r3, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    26ac:	447a      	add	r2, pc
	buf_sel = udi_cdc_tx_buf_sel[port];
    26ae:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    26b0:	005f      	lsls	r7, r3, #1
    26b2:	5ab9      	ldrh	r1, [r7, r2]
	flags = cpu_irq_save();
    26b4:	9001      	str	r0, [sp, #4]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    26b6:	1c48      	adds	r0, r1, #1
    26b8:	52b8      	strh	r0, [r7, r2]
    26ba:	4a0f      	ldr	r2, [pc, #60]	; (26f8 <udi_cdc_multi_putc+0x8c>)
    26bc:	019b      	lsls	r3, r3, #6
    26be:	447a      	add	r2, pc
    26c0:	18d3      	adds	r3, r2, r3
    26c2:	545d      	strb	r5, [r3, r1]
	cpu_irq_restore(flags);
    26c4:	4b0d      	ldr	r3, [pc, #52]	; (26fc <udi_cdc_multi_putc+0x90>)
    26c6:	9801      	ldr	r0, [sp, #4]
    26c8:	447b      	add	r3, pc
    26ca:	4798      	blx	r3
	if (b_databit_9) {
    26cc:	2c00      	cmp	r4, #0
    26ce:	d002      	beq.n	26d6 <udi_cdc_multi_putc+0x6a>
		value = value >> 8;
    26d0:	122d      	asrs	r5, r5, #8
		b_databit_9 = false;
    26d2:	2400      	movs	r4, #0
		goto udi_cdc_putc_process_one_byte;
    26d4:	e7d5      	b.n	2682 <udi_cdc_multi_putc+0x16>
	return true;
    26d6:	2001      	movs	r0, #1
    26d8:	e7e0      	b.n	269c <udi_cdc_multi_putc+0x30>
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	1fffe482 	.word	0x1fffe482
    26e0:	0000b468 	.word	0x0000b468
    26e4:	00000330 	.word	0x00000330
    26e8:	1fffe45e 	.word	0x1fffe45e
    26ec:	fffff919 	.word	0xfffff919
    26f0:	1fffe56c 	.word	0x1fffe56c
    26f4:	1fffe564 	.word	0x1fffe564
    26f8:	1fffe4d2 	.word	0x1fffe4d2
    26fc:	fffff9b5 	.word	0xfffff9b5

00002700 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    2700:	b507      	push	{r0, r1, r2, lr}
    2702:	4b04      	ldr	r3, [pc, #16]	; (2714 <udi_cdc_putc+0x14>)
	return udi_cdc_multi_putc(0, value);
    2704:	4a04      	ldr	r2, [pc, #16]	; (2718 <udi_cdc_putc+0x18>)
{
    2706:	447b      	add	r3, pc
	return udi_cdc_multi_putc(0, value);
    2708:	589b      	ldr	r3, [r3, r2]
{
    270a:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
    270c:	2000      	movs	r0, #0
    270e:	9301      	str	r3, [sp, #4]
    2710:	4798      	blx	r3
}
    2712:	bd0e      	pop	{r1, r2, r3, pc}
    2714:	0000b3e2 	.word	0x0000b3e2
    2718:	00000278 	.word	0x00000278

0000271c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    271c:	b507      	push	{r0, r1, r2, lr}
    271e:	4b06      	ldr	r3, [pc, #24]	; (2738 <udc_valid_address+0x1c>)
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    2720:	4a06      	ldr	r2, [pc, #24]	; (273c <udc_valid_address+0x20>)
{
    2722:	447b      	add	r3, pc
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    2724:	589a      	ldr	r2, [r3, r2]
    2726:	9201      	str	r2, [sp, #4]
    2728:	8850      	ldrh	r0, [r2, #2]
    272a:	227f      	movs	r2, #127	; 0x7f
    272c:	4010      	ands	r0, r2
    272e:	4a04      	ldr	r2, [pc, #16]	; (2740 <udc_valid_address+0x24>)
    2730:	589b      	ldr	r3, [r3, r2]
    2732:	9301      	str	r3, [sp, #4]
    2734:	4798      	blx	r3
}
    2736:	bd07      	pop	{r0, r1, r2, pc}
    2738:	0000b3c6 	.word	0x0000b3c6
    273c:	00000224 	.word	0x00000224
    2740:	0000032c 	.word	0x0000032c

00002744 <udc_update_iface_desc>:
{
    2744:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    2746:	4b1a      	ldr	r3, [pc, #104]	; (27b0 <udc_update_iface_desc+0x6c>)
    2748:	447b      	add	r3, pc
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	2b00      	cmp	r3, #0
    274e:	d101      	bne.n	2754 <udc_update_iface_desc+0x10>
		return false;
    2750:	2000      	movs	r0, #0
}
    2752:	bd70      	pop	{r4, r5, r6, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2754:	4b17      	ldr	r3, [pc, #92]	; (27b4 <udc_update_iface_desc+0x70>)
    2756:	447b      	add	r3, pc
    2758:	681b      	ldr	r3, [r3, #0]
    275a:	681b      	ldr	r3, [r3, #0]
    275c:	791a      	ldrb	r2, [r3, #4]
    275e:	4282      	cmp	r2, r0
    2760:	d9f6      	bls.n	2750 <udc_update_iface_desc+0xc>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    2762:	4a15      	ldr	r2, [pc, #84]	; (27b8 <udc_update_iface_desc+0x74>)
    2764:	2501      	movs	r5, #1
    2766:	447a      	add	r2, pc
    2768:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    276a:	78da      	ldrb	r2, [r3, #3]
    276c:	789c      	ldrb	r4, [r3, #2]
    276e:	0212      	lsls	r2, r2, #8
    2770:	4322      	orrs	r2, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    2772:	2400      	movs	r4, #0
    2774:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    2776:	429a      	cmp	r2, r3
    2778:	d805      	bhi.n	2786 <udc_update_iface_desc+0x42>
    277a:	2c00      	cmp	r4, #0
    277c:	d0e8      	beq.n	2750 <udc_update_iface_desc+0xc>
    277e:	4a0f      	ldr	r2, [pc, #60]	; (27bc <udc_update_iface_desc+0x78>)
    2780:	447a      	add	r2, pc
    2782:	6013      	str	r3, [r2, #0]
    2784:	e7e4      	b.n	2750 <udc_update_iface_desc+0xc>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    2786:	785e      	ldrb	r6, [r3, #1]
    2788:	2e04      	cmp	r6, #4
    278a:	d10c      	bne.n	27a6 <udc_update_iface_desc+0x62>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    278c:	789e      	ldrb	r6, [r3, #2]
    278e:	4286      	cmp	r6, r0
    2790:	d109      	bne.n	27a6 <udc_update_iface_desc+0x62>
    2792:	78de      	ldrb	r6, [r3, #3]
    2794:	428e      	cmp	r6, r1
    2796:	d106      	bne.n	27a6 <udc_update_iface_desc+0x62>
    2798:	2c00      	cmp	r4, #0
    279a:	d002      	beq.n	27a2 <udc_update_iface_desc+0x5e>
    279c:	4a08      	ldr	r2, [pc, #32]	; (27c0 <udc_update_iface_desc+0x7c>)
    279e:	447a      	add	r2, pc
    27a0:	6013      	str	r3, [r2, #0]
				return true; // Interface found
    27a2:	2001      	movs	r0, #1
    27a4:	e7d5      	b.n	2752 <udc_update_iface_desc+0xe>
				udc_ptr_iface->bLength);
    27a6:	781c      	ldrb	r4, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    27a8:	191b      	adds	r3, r3, r4
    27aa:	002c      	movs	r4, r5
    27ac:	e7e3      	b.n	2776 <udc_update_iface_desc+0x32>
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	1fffe4e8 	.word	0x1fffe4e8
    27b4:	1fffe4de 	.word	0x1fffe4de
    27b8:	1fffe4d2 	.word	0x1fffe4d2
    27bc:	1fffe4b8 	.word	0x1fffe4b8
    27c0:	1fffe49a 	.word	0x1fffe49a

000027c4 <udc_next_desc_in_iface.constprop.3>:
			udc_ptr_conf->desc +
    27c4:	4b0a      	ldr	r3, [pc, #40]	; (27f0 <udc_next_desc_in_iface.constprop.3+0x2c>)
    27c6:	447b      	add	r3, pc
    27c8:	681b      	ldr	r3, [r3, #0]
    27ca:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    27cc:	78da      	ldrb	r2, [r3, #3]
    27ce:	7899      	ldrb	r1, [r3, #2]
    27d0:	0212      	lsls	r2, r2, #8
    27d2:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    27d4:	189b      	adds	r3, r3, r2
				desc->bLength);
    27d6:	7802      	ldrb	r2, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    27d8:	1880      	adds	r0, r0, r2
	while (ptr_eof_desc > desc) {
    27da:	4298      	cmp	r0, r3
    27dc:	d301      	bcc.n	27e2 <udc_next_desc_in_iface.constprop.3+0x1e>
	return NULL; // No specific descriptor found
    27de:	2000      	movs	r0, #0
    27e0:	e004      	b.n	27ec <udc_next_desc_in_iface.constprop.3+0x28>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    27e2:	7842      	ldrb	r2, [r0, #1]
    27e4:	2a04      	cmp	r2, #4
    27e6:	d0fa      	beq.n	27de <udc_next_desc_in_iface.constprop.3+0x1a>
		if (desc_id == desc->bDescriptorType) {
    27e8:	2a05      	cmp	r2, #5
    27ea:	d1f4      	bne.n	27d6 <udc_next_desc_in_iface.constprop.3+0x12>
}
    27ec:	4770      	bx	lr
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	1fffe46e 	.word	0x1fffe46e

000027f4 <udc_iface_enable>:
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    27f4:	4b14      	ldr	r3, [pc, #80]	; (2848 <udc_iface_enable+0x54>)
{
    27f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    27f8:	4e14      	ldr	r6, [pc, #80]	; (284c <udc_iface_enable+0x58>)
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    27fa:	447b      	add	r3, pc
{
    27fc:	447e      	add	r6, pc
    27fe:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    2800:	4798      	blx	r3
    2802:	2800      	cmp	r0, #0
    2804:	d101      	bne.n	280a <udc_iface_enable+0x16>
		return false;
    2806:	2000      	movs	r0, #0
}
    2808:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    280a:	4b11      	ldr	r3, [pc, #68]	; (2850 <udc_iface_enable+0x5c>)
    280c:	447b      	add	r3, pc
    280e:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    2810:	4b10      	ldr	r3, [pc, #64]	; (2854 <udc_iface_enable+0x60>)
    2812:	0020      	movs	r0, r4
    2814:	447b      	add	r3, pc
    2816:	4798      	blx	r3
    2818:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    281a:	d00c      	beq.n	2836 <udc_iface_enable+0x42>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    281c:	7942      	ldrb	r2, [r0, #5]
    281e:	7903      	ldrb	r3, [r0, #4]
    2820:	0212      	lsls	r2, r2, #8
    2822:	431a      	orrs	r2, r3
    2824:	4b0c      	ldr	r3, [pc, #48]	; (2858 <udc_iface_enable+0x64>)
    2826:	78c1      	ldrb	r1, [r0, #3]
    2828:	58f3      	ldr	r3, [r6, r3]
    282a:	7880      	ldrb	r0, [r0, #2]
    282c:	9301      	str	r3, [sp, #4]
    282e:	4798      	blx	r3
    2830:	2800      	cmp	r0, #0
    2832:	d1ed      	bne.n	2810 <udc_iface_enable+0x1c>
    2834:	e7e7      	b.n	2806 <udc_iface_enable+0x12>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    2836:	4b09      	ldr	r3, [pc, #36]	; (285c <udc_iface_enable+0x68>)
    2838:	00ad      	lsls	r5, r5, #2
    283a:	447b      	add	r3, pc
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	685b      	ldr	r3, [r3, #4]
    2840:	58eb      	ldr	r3, [r5, r3]
    2842:	681b      	ldr	r3, [r3, #0]
    2844:	4798      	blx	r3
    2846:	e7df      	b.n	2808 <udc_iface_enable+0x14>
    2848:	ffffff47 	.word	0xffffff47
    284c:	0000b2ec 	.word	0x0000b2ec
    2850:	1fffe42c 	.word	0x1fffe42c
    2854:	ffffffad 	.word	0xffffffad
    2858:	00000228 	.word	0x00000228
    285c:	1fffe3fa 	.word	0x1fffe3fa

00002860 <udc_iface_disable>:
{
    2860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!udc_update_iface_desc(iface_num, 0)) {
    2862:	4d15      	ldr	r5, [pc, #84]	; (28b8 <udc_iface_disable+0x58>)
{
    2864:	4f15      	ldr	r7, [pc, #84]	; (28bc <udc_iface_disable+0x5c>)
	if (!udc_update_iface_desc(iface_num, 0)) {
    2866:	2100      	movs	r1, #0
    2868:	447d      	add	r5, pc
{
    286a:	447f      	add	r7, pc
    286c:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    286e:	47a8      	blx	r5
    2870:	2800      	cmp	r0, #0
    2872:	d102      	bne.n	287a <udc_iface_disable+0x1a>
		return false;
    2874:	2500      	movs	r5, #0
}
    2876:	0028      	movs	r0, r5
    2878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    287a:	4b11      	ldr	r3, [pc, #68]	; (28c0 <udc_iface_disable+0x60>)
    287c:	00a2      	lsls	r2, r4, #2
    287e:	447b      	add	r3, pc
    2880:	681b      	ldr	r3, [r3, #0]
    2882:	685b      	ldr	r3, [r3, #4]
    2884:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2886:	68f3      	ldr	r3, [r6, #12]
    2888:	4798      	blx	r3
    288a:	0001      	movs	r1, r0
    288c:	0020      	movs	r0, r4
    288e:	47a8      	blx	r5
    2890:	1e05      	subs	r5, r0, #0
    2892:	d0ef      	beq.n	2874 <udc_iface_disable+0x14>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <udc_iface_disable+0x64>)
    2896:	447b      	add	r3, pc
    2898:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    289a:	4b0b      	ldr	r3, [pc, #44]	; (28c8 <udc_iface_disable+0x68>)
    289c:	0020      	movs	r0, r4
    289e:	447b      	add	r3, pc
    28a0:	4798      	blx	r3
    28a2:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    28a4:	d005      	beq.n	28b2 <udc_iface_disable+0x52>
			udd_ep_free(ep_desc->bEndpointAddress);
    28a6:	4b09      	ldr	r3, [pc, #36]	; (28cc <udc_iface_disable+0x6c>)
    28a8:	7880      	ldrb	r0, [r0, #2]
    28aa:	58fb      	ldr	r3, [r7, r3]
    28ac:	9301      	str	r3, [sp, #4]
    28ae:	4798      	blx	r3
    28b0:	e7f3      	b.n	289a <udc_iface_disable+0x3a>
	udi_api->disable();
    28b2:	6873      	ldr	r3, [r6, #4]
    28b4:	4798      	blx	r3
    28b6:	e7de      	b.n	2876 <udc_iface_disable+0x16>
    28b8:	fffffed9 	.word	0xfffffed9
    28bc:	0000b27e 	.word	0x0000b27e
    28c0:	1fffe3b6 	.word	0x1fffe3b6
    28c4:	1fffe3a2 	.word	0x1fffe3a2
    28c8:	ffffff23 	.word	0xffffff23
    28cc:	000001c4 	.word	0x000001c4

000028d0 <udc_start>:
{
    28d0:	b507      	push	{r0, r1, r2, lr}
    28d2:	4b03      	ldr	r3, [pc, #12]	; (28e0 <udc_start+0x10>)
	udd_enable();
    28d4:	4a03      	ldr	r2, [pc, #12]	; (28e4 <udc_start+0x14>)
{
    28d6:	447b      	add	r3, pc
	udd_enable();
    28d8:	589b      	ldr	r3, [r3, r2]
    28da:	9301      	str	r3, [sp, #4]
    28dc:	4798      	blx	r3
}
    28de:	bd07      	pop	{r0, r1, r2, pc}
    28e0:	0000b212 	.word	0x0000b212
    28e4:	000001d4 	.word	0x000001d4

000028e8 <udc_reset>:
{
    28e8:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    28ea:	4b0e      	ldr	r3, [pc, #56]	; (2924 <udc_reset+0x3c>)
    28ec:	2400      	movs	r4, #0
    28ee:	447b      	add	r3, pc
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d10e      	bne.n	2914 <udc_reset+0x2c>
	udc_num_configuration = 0;
    28f6:	2200      	movs	r2, #0
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <udc_reset+0x40>)
    28fa:	447b      	add	r3, pc
    28fc:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    28fe:	4b0b      	ldr	r3, [pc, #44]	; (292c <udc_reset+0x44>)
    2900:	3201      	adds	r2, #1
    2902:	447b      	add	r3, pc
    2904:	801a      	strh	r2, [r3, #0]
}
    2906:	bd10      	pop	{r4, pc}
			udc_iface_disable(iface_num);
    2908:	4b09      	ldr	r3, [pc, #36]	; (2930 <udc_reset+0x48>)
    290a:	0020      	movs	r0, r4
    290c:	447b      	add	r3, pc
    290e:	4798      	blx	r3
				iface_num++) {
    2910:	3401      	adds	r4, #1
    2912:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2914:	4b07      	ldr	r3, [pc, #28]	; (2934 <udc_reset+0x4c>)
    2916:	447b      	add	r3, pc
    2918:	681b      	ldr	r3, [r3, #0]
    291a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    291c:	791b      	ldrb	r3, [r3, #4]
    291e:	42a3      	cmp	r3, r4
    2920:	d8f2      	bhi.n	2908 <udc_reset+0x20>
    2922:	e7e8      	b.n	28f6 <udc_reset+0xe>
    2924:	1fffe342 	.word	0x1fffe342
    2928:	1fffe336 	.word	0x1fffe336
    292c:	1fffe324 	.word	0x1fffe324
    2930:	ffffff51 	.word	0xffffff51
    2934:	1fffe31e 	.word	0x1fffe31e

00002938 <udc_sof_notify>:
{
    2938:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    293a:	4b0c      	ldr	r3, [pc, #48]	; (296c <udc_sof_notify+0x34>)
    293c:	2400      	movs	r4, #0
    293e:	447b      	add	r3, pc
    2940:	781b      	ldrb	r3, [r3, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d109      	bne.n	295a <udc_sof_notify+0x22>
}
    2946:	bd10      	pop	{r4, pc}
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    2948:	685b      	ldr	r3, [r3, #4]
    294a:	00a2      	lsls	r2, r4, #2
    294c:	58d3      	ldr	r3, [r2, r3]
    294e:	691b      	ldr	r3, [r3, #16]
    2950:	2b00      	cmp	r3, #0
    2952:	d000      	beq.n	2956 <udc_sof_notify+0x1e>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    2954:	4798      	blx	r3
				iface_num++) {
    2956:	3401      	adds	r4, #1
    2958:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    295a:	4b05      	ldr	r3, [pc, #20]	; (2970 <udc_sof_notify+0x38>)
    295c:	447b      	add	r3, pc
    295e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2960:	681a      	ldr	r2, [r3, #0]
    2962:	7912      	ldrb	r2, [r2, #4]
    2964:	42a2      	cmp	r2, r4
    2966:	d8ef      	bhi.n	2948 <udc_sof_notify+0x10>
    2968:	e7ed      	b.n	2946 <udc_sof_notify+0xe>
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	1fffe2f2 	.word	0x1fffe2f2
    2970:	1fffe2d8 	.word	0x1fffe2d8

00002974 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    2974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2976:	4e98      	ldr	r6, [pc, #608]	; (2bd8 <udc_process_setup+0x264>)
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    2978:	4b98      	ldr	r3, [pc, #608]	; (2bdc <udc_process_setup+0x268>)
{
    297a:	447e      	add	r6, pc
	udd_g_ctrlreq.payload_size = 0;
    297c:	58f4      	ldr	r4, [r6, r3]
    297e:	2300      	movs	r3, #0
    2980:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    2982:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    2984:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    2986:	7823      	ldrb	r3, [r4, #0]
    2988:	b258      	sxtb	r0, r3
    298a:	2800      	cmp	r0, #0
    298c:	da05      	bge.n	299a <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wLength == 0) {
    298e:	88e2      	ldrh	r2, [r4, #6]
    2990:	2a00      	cmp	r2, #0
    2992:	d102      	bne.n	299a <udc_process_setup+0x26>
			return false; // Error from USB host
    2994:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2996:	0028      	movs	r0, r5
    2998:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    299a:	2160      	movs	r1, #96	; 0x60
    299c:	4019      	ands	r1, r3
    299e:	d123      	bne.n	29e8 <udc_process_setup+0x74>
    29a0:	221f      	movs	r2, #31
	if (Udd_setup_is_in()) {
    29a2:	2800      	cmp	r0, #0
    29a4:	db00      	blt.n	29a8 <udc_process_setup+0x34>
    29a6:	e0ed      	b.n	2b84 <udc_process_setup+0x210>
		if (udd_g_ctrlreq.req.wLength == 0) {
    29a8:	88e5      	ldrh	r5, [r4, #6]
    29aa:	2d00      	cmp	r5, #0
    29ac:	d01c      	beq.n	29e8 <udc_process_setup+0x74>
    29ae:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    29b0:	d000      	beq.n	29b4 <udc_process_setup+0x40>
    29b2:	e0a0      	b.n	2af6 <udc_process_setup+0x182>
			switch (udd_g_ctrlreq.req.bRequest) {
    29b4:	7863      	ldrb	r3, [r4, #1]
    29b6:	2b06      	cmp	r3, #6
    29b8:	d00f      	beq.n	29da <udc_process_setup+0x66>
    29ba:	2b08      	cmp	r3, #8
    29bc:	d100      	bne.n	29c0 <udc_process_setup+0x4c>
    29be:	e08f      	b.n	2ae0 <udc_process_setup+0x16c>
    29c0:	2b00      	cmp	r3, #0
    29c2:	d111      	bne.n	29e8 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    29c4:	2d02      	cmp	r5, #2
    29c6:	d115      	bne.n	29f4 <udc_process_setup+0x80>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    29c8:	4b85      	ldr	r3, [pc, #532]	; (2be0 <udc_process_setup+0x26c>)
    29ca:	4886      	ldr	r0, [pc, #536]	; (2be4 <udc_process_setup+0x270>)
    29cc:	58f3      	ldr	r3, [r6, r3]
    29ce:	0029      	movs	r1, r5
    29d0:	4478      	add	r0, pc
    29d2:	9301      	str	r3, [sp, #4]
    29d4:	4798      	blx	r3
			return true;
    29d6:	2501      	movs	r5, #1
    29d8:	e7dd      	b.n	2996 <udc_process_setup+0x22>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    29da:	8860      	ldrh	r0, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    29dc:	0a05      	lsrs	r5, r0, #8
    29de:	2d02      	cmp	r5, #2
    29e0:	d044      	beq.n	2a6c <udc_process_setup+0xf8>
    29e2:	d82c      	bhi.n	2a3e <udc_process_setup+0xca>
    29e4:	2d01      	cmp	r5, #1
    29e6:	d038      	beq.n	2a5a <udc_process_setup+0xe6>
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    29e8:	221f      	movs	r2, #31
    29ea:	7823      	ldrb	r3, [r4, #0]
    29ec:	4013      	ands	r3, r2
    29ee:	2b01      	cmp	r3, #1
    29f0:	d100      	bne.n	29f4 <udc_process_setup+0x80>
    29f2:	e199      	b.n	2d28 <udc_process_setup+0x3b4>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    29f4:	221f      	movs	r2, #31
    29f6:	7823      	ldrb	r3, [r4, #0]
    29f8:	4013      	ands	r3, r2
    29fa:	2b02      	cmp	r3, #2
    29fc:	d1ca      	bne.n	2994 <udc_process_setup+0x20>
	if (0 == udc_num_configuration) {
    29fe:	4b7a      	ldr	r3, [pc, #488]	; (2be8 <udc_process_setup+0x274>)
    2a00:	2400      	movs	r4, #0
    2a02:	447b      	add	r3, pc
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d0c4      	beq.n	2994 <udc_process_setup+0x20>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a0a:	4b78      	ldr	r3, [pc, #480]	; (2bec <udc_process_setup+0x278>)
    2a0c:	447b      	add	r3, pc
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	681a      	ldr	r2, [r3, #0]
    2a12:	7912      	ldrb	r2, [r2, #4]
    2a14:	42a2      	cmp	r2, r4
    2a16:	d9bd      	bls.n	2994 <udc_process_setup+0x20>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2a18:	685b      	ldr	r3, [r3, #4]
    2a1a:	00a2      	lsls	r2, r4, #2
    2a1c:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2a1e:	68eb      	ldr	r3, [r5, #12]
    2a20:	4798      	blx	r3
    2a22:	4b73      	ldr	r3, [pc, #460]	; (2bf0 <udc_process_setup+0x27c>)
    2a24:	0001      	movs	r1, r0
    2a26:	447b      	add	r3, pc
    2a28:	0020      	movs	r0, r4
    2a2a:	4798      	blx	r3
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d0b1      	beq.n	2994 <udc_process_setup+0x20>
		if (udi_api->setup()) {
    2a30:	68ab      	ldr	r3, [r5, #8]
    2a32:	4798      	blx	r3
    2a34:	2800      	cmp	r0, #0
    2a36:	d1ce      	bne.n	29d6 <udc_process_setup+0x62>
			iface_num++) {
    2a38:	3401      	adds	r4, #1
    2a3a:	b2e4      	uxtb	r4, r4
    2a3c:	e7e5      	b.n	2a0a <udc_process_setup+0x96>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2a3e:	2d03      	cmp	r5, #3
    2a40:	d02e      	beq.n	2aa0 <udc_process_setup+0x12c>
    2a42:	2d0f      	cmp	r5, #15
    2a44:	d1d0      	bne.n	29e8 <udc_process_setup+0x74>
		if (udc_config.conf_bos == NULL) {
    2a46:	4b6b      	ldr	r3, [pc, #428]	; (2bf4 <udc_process_setup+0x280>)
    2a48:	58f3      	ldr	r3, [r6, r3]
    2a4a:	6898      	ldr	r0, [r3, #8]
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d0d1      	beq.n	29f4 <udc_process_setup+0x80>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    2a50:	78c1      	ldrb	r1, [r0, #3]
    2a52:	7883      	ldrb	r3, [r0, #2]
    2a54:	0209      	lsls	r1, r1, #8
    2a56:	4319      	orrs	r1, r3
    2a58:	e003      	b.n	2a62 <udc_process_setup+0xee>
				(uint8_t *) udc_config.confdev_lsfs,
    2a5a:	4b66      	ldr	r3, [pc, #408]	; (2bf4 <udc_process_setup+0x280>)
    2a5c:	58f3      	ldr	r3, [r6, r3]
    2a5e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    2a60:	7801      	ldrb	r1, [r0, #0]
		udd_set_setup_payload(
    2a62:	4b5f      	ldr	r3, [pc, #380]	; (2be0 <udc_process_setup+0x26c>)
    2a64:	58f3      	ldr	r3, [r6, r3]
    2a66:	9301      	str	r3, [sp, #4]
    2a68:	4798      	blx	r3
    2a6a:	e013      	b.n	2a94 <udc_process_setup+0x120>
			if (conf_num >= udc_config.confdev_lsfs->
    2a6c:	4b61      	ldr	r3, [pc, #388]	; (2bf4 <udc_process_setup+0x280>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2a6e:	b2c0      	uxtb	r0, r0
			if (conf_num >= udc_config.confdev_lsfs->
    2a70:	58f3      	ldr	r3, [r6, r3]
    2a72:	681a      	ldr	r2, [r3, #0]
    2a74:	7c52      	ldrb	r2, [r2, #17]
    2a76:	4282      	cmp	r2, r0
    2a78:	d9bc      	bls.n	29f4 <udc_process_setup+0x80>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    2a7a:	685b      	ldr	r3, [r3, #4]
    2a7c:	00c0      	lsls	r0, r0, #3
    2a7e:	58c0      	ldr	r0, [r0, r3]
			udd_set_setup_payload(
    2a80:	78c1      	ldrb	r1, [r0, #3]
    2a82:	7883      	ldrb	r3, [r0, #2]
    2a84:	0209      	lsls	r1, r1, #8
    2a86:	4319      	orrs	r1, r3
    2a88:	4b55      	ldr	r3, [pc, #340]	; (2be0 <udc_process_setup+0x26c>)
    2a8a:	58f3      	ldr	r3, [r6, r3]
    2a8c:	9301      	str	r3, [sp, #4]
    2a8e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2a90:	68a3      	ldr	r3, [r4, #8]
    2a92:	705d      	strb	r5, [r3, #1]
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2a94:	88e3      	ldrh	r3, [r4, #6]
    2a96:	89a2      	ldrh	r2, [r4, #12]
    2a98:	429a      	cmp	r2, r3
    2a9a:	d99c      	bls.n	29d6 <udc_process_setup+0x62>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2a9c:	81a3      	strh	r3, [r4, #12]
    2a9e:	e79a      	b.n	29d6 <udc_process_setup+0x62>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2aa0:	b2c0      	uxtb	r0, r0
    2aa2:	2803      	cmp	r0, #3
    2aa4:	d8a0      	bhi.n	29e8 <udc_process_setup+0x74>
    2aa6:	f003 fe0b 	bl	66c0 <__gnu_thumb1_case_uhi>
    2aaa:	0017      	.short	0x0017
    2aac:	00040167 	.word	0x00040167
    2ab0:	016b      	.short	0x016b
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2ab2:	2110      	movs	r1, #16
		str = udc_string_product_name;
    2ab4:	4a50      	ldr	r2, [pc, #320]	; (2bf8 <udc_process_setup+0x284>)
    2ab6:	447a      	add	r2, pc
{
    2ab8:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    2aba:	4850      	ldr	r0, [pc, #320]	; (2bfc <udc_process_setup+0x288>)
    2abc:	4478      	add	r0, pc
    2abe:	005d      	lsls	r5, r3, #1
    2ac0:	5cd7      	ldrb	r7, [r2, r3]
    2ac2:	1945      	adds	r5, r0, r5
    2ac4:	3301      	adds	r3, #1
    2ac6:	806f      	strh	r7, [r5, #2]
		for(i = 0; i < str_length; i++) {
    2ac8:	b2dd      	uxtb	r5, r3
    2aca:	42a9      	cmp	r1, r5
    2acc:	d8f7      	bhi.n	2abe <udc_process_setup+0x14a>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    2ace:	0049      	lsls	r1, r1, #1
    2ad0:	3102      	adds	r1, #2
    2ad2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    2ad4:	b289      	uxth	r1, r1
    2ad6:	e7c4      	b.n	2a62 <udc_process_setup+0xee>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2ad8:	4849      	ldr	r0, [pc, #292]	; (2c00 <udc_process_setup+0x28c>)
    2ada:	2104      	movs	r1, #4
    2adc:	4478      	add	r0, pc
    2ade:	e7c0      	b.n	2a62 <udc_process_setup+0xee>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2ae0:	2d01      	cmp	r5, #1
    2ae2:	d000      	beq.n	2ae6 <udc_process_setup+0x172>
    2ae4:	e786      	b.n	29f4 <udc_process_setup+0x80>
	udd_set_setup_payload(&udc_num_configuration,1);
    2ae6:	0029      	movs	r1, r5
    2ae8:	4846      	ldr	r0, [pc, #280]	; (2c04 <udc_process_setup+0x290>)
    2aea:	4478      	add	r0, pc
	udd_set_setup_payload(&udc_iface_setting,1);
    2aec:	4b3c      	ldr	r3, [pc, #240]	; (2be0 <udc_process_setup+0x26c>)
    2aee:	58f3      	ldr	r3, [r6, r3]
    2af0:	9301      	str	r3, [sp, #4]
    2af2:	4798      	blx	r3
    2af4:	e74f      	b.n	2996 <udc_process_setup+0x22>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2af6:	2b01      	cmp	r3, #1
    2af8:	d12a      	bne.n	2b50 <udc_process_setup+0x1dc>
			switch (udd_g_ctrlreq.req.bRequest) {
    2afa:	7863      	ldrb	r3, [r4, #1]
    2afc:	2b0a      	cmp	r3, #10
    2afe:	d000      	beq.n	2b02 <udc_process_setup+0x18e>
    2b00:	e772      	b.n	29e8 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2b02:	2d01      	cmp	r5, #1
    2b04:	d000      	beq.n	2b08 <udc_process_setup+0x194>
    2b06:	e10f      	b.n	2d28 <udc_process_setup+0x3b4>
	if (!udc_num_configuration) {
    2b08:	4b3f      	ldr	r3, [pc, #252]	; (2c08 <udc_process_setup+0x294>)
    2b0a:	447b      	add	r3, pc
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d100      	bne.n	2b14 <udc_process_setup+0x1a0>
    2b12:	e109      	b.n	2d28 <udc_process_setup+0x3b4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2b14:	7923      	ldrb	r3, [r4, #4]
    2b16:	9301      	str	r3, [sp, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2b18:	4b3c      	ldr	r3, [pc, #240]	; (2c0c <udc_process_setup+0x298>)
    2b1a:	9a01      	ldr	r2, [sp, #4]
    2b1c:	447b      	add	r3, pc
    2b1e:	681f      	ldr	r7, [r3, #0]
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	791b      	ldrb	r3, [r3, #4]
    2b24:	4293      	cmp	r3, r2
    2b26:	d800      	bhi.n	2b2a <udc_process_setup+0x1b6>
    2b28:	e0fe      	b.n	2d28 <udc_process_setup+0x3b4>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2b2a:	4b39      	ldr	r3, [pc, #228]	; (2c10 <udc_process_setup+0x29c>)
    2b2c:	0010      	movs	r0, r2
    2b2e:	447b      	add	r3, pc
    2b30:	4798      	blx	r3
    2b32:	1e05      	subs	r5, r0, #0
    2b34:	d100      	bne.n	2b38 <udc_process_setup+0x1c4>
    2b36:	e757      	b.n	29e8 <udc_process_setup+0x74>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2b38:	9b01      	ldr	r3, [sp, #4]
    2b3a:	687a      	ldr	r2, [r7, #4]
    2b3c:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    2b3e:	589b      	ldr	r3, [r3, r2]
    2b40:	68db      	ldr	r3, [r3, #12]
    2b42:	4798      	blx	r3
    2b44:	4b33      	ldr	r3, [pc, #204]	; (2c14 <udc_process_setup+0x2a0>)
	udd_set_setup_payload(&udc_iface_setting,1);
    2b46:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    2b48:	447b      	add	r3, pc
    2b4a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    2b4c:	0018      	movs	r0, r3
    2b4e:	e7cd      	b.n	2aec <udc_process_setup+0x178>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2b50:	2b02      	cmp	r3, #2
    2b52:	d000      	beq.n	2b56 <udc_process_setup+0x1e2>
    2b54:	e748      	b.n	29e8 <udc_process_setup+0x74>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b56:	7863      	ldrb	r3, [r4, #1]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d000      	beq.n	2b5e <udc_process_setup+0x1ea>
    2b5c:	e744      	b.n	29e8 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2b5e:	2d02      	cmp	r5, #2
    2b60:	d000      	beq.n	2b64 <udc_process_setup+0x1f0>
    2b62:	e747      	b.n	29f4 <udc_process_setup+0x80>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2b64:	4b2c      	ldr	r3, [pc, #176]	; (2c18 <udc_process_setup+0x2a4>)
    2b66:	7920      	ldrb	r0, [r4, #4]
    2b68:	58f3      	ldr	r3, [r6, r3]
    2b6a:	9301      	str	r3, [sp, #4]
    2b6c:	4798      	blx	r3
    2b6e:	4b2b      	ldr	r3, [pc, #172]	; (2c1c <udc_process_setup+0x2a8>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2b70:	0029      	movs	r1, r5
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2b72:	447b      	add	r3, pc
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    2b74:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2b76:	0018      	movs	r0, r3
    2b78:	4b19      	ldr	r3, [pc, #100]	; (2be0 <udc_process_setup+0x26c>)
			return true;
    2b7a:	3d01      	subs	r5, #1
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2b7c:	58f3      	ldr	r3, [r6, r3]
    2b7e:	9301      	str	r3, [sp, #4]
    2b80:	4798      	blx	r3
    2b82:	e708      	b.n	2996 <udc_process_setup+0x22>
    2b84:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2b86:	d000      	beq.n	2b8a <udc_process_setup+0x216>
    2b88:	e087      	b.n	2c9a <udc_process_setup+0x326>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b8a:	7860      	ldrb	r0, [r4, #1]
    2b8c:	3801      	subs	r0, #1
    2b8e:	2808      	cmp	r0, #8
    2b90:	d900      	bls.n	2b94 <udc_process_setup+0x220>
    2b92:	e729      	b.n	29e8 <udc_process_setup+0x74>
    2b94:	f003 fd8a 	bl	66ac <__gnu_thumb1_case_shi>
    2b98:	ff280011 	.word	0xff280011
    2b9c:	ff28ff28 	.word	0xff28ff28
    2ba0:	ff280009 	.word	0xff280009
    2ba4:	ff28ff28 	.word	0xff28ff28
    2ba8:	0048      	.short	0x0048
	if (udd_g_ctrlreq.req.wLength) {
    2baa:	88e3      	ldrh	r3, [r4, #6]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d000      	beq.n	2bb2 <udc_process_setup+0x23e>
    2bb0:	e720      	b.n	29f4 <udc_process_setup+0x80>
	udd_g_ctrlreq.callback = udc_valid_address;
    2bb2:	4b1b      	ldr	r3, [pc, #108]	; (2c20 <udc_process_setup+0x2ac>)
    2bb4:	447b      	add	r3, pc
    2bb6:	6123      	str	r3, [r4, #16]
    2bb8:	e70d      	b.n	29d6 <udc_process_setup+0x62>
	if (udd_g_ctrlreq.req.wLength) {
    2bba:	88e3      	ldrh	r3, [r4, #6]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d000      	beq.n	2bc2 <udc_process_setup+0x24e>
    2bc0:	e718      	b.n	29f4 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2bc2:	8865      	ldrh	r5, [r4, #2]
    2bc4:	2d01      	cmp	r5, #1
    2bc6:	d000      	beq.n	2bca <udc_process_setup+0x256>
    2bc8:	e714      	b.n	29f4 <udc_process_setup+0x80>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2bca:	2102      	movs	r1, #2
    2bcc:	4a15      	ldr	r2, [pc, #84]	; (2c24 <udc_process_setup+0x2b0>)
    2bce:	447a      	add	r2, pc
    2bd0:	8813      	ldrh	r3, [r2, #0]
    2bd2:	438b      	bics	r3, r1
    2bd4:	8013      	strh	r3, [r2, #0]
    2bd6:	e6de      	b.n	2996 <udc_process_setup+0x22>
    2bd8:	0000b16e 	.word	0x0000b16e
    2bdc:	00000224 	.word	0x00000224
    2be0:	00000084 	.word	0x00000084
    2be4:	1fffe256 	.word	0x1fffe256
    2be8:	1fffe22e 	.word	0x1fffe22e
    2bec:	1fffe228 	.word	0x1fffe228
    2bf0:	fffffd1b 	.word	0xfffffd1b
    2bf4:	00000148 	.word	0x00000148
    2bf8:	1fffd63e 	.word	0x1fffd63e
    2bfc:	1fffd604 	.word	0x1fffd604
    2c00:	1fffd608 	.word	0x1fffd608
    2c04:	1fffe146 	.word	0x1fffe146
    2c08:	1fffe126 	.word	0x1fffe126
    2c0c:	1fffe118 	.word	0x1fffe118
    2c10:	fffffc13 	.word	0xfffffc13
    2c14:	1fffe0e4 	.word	0x1fffe0e4
    2c18:	000001e0 	.word	0x000001e0
    2c1c:	1fffe0b6 	.word	0x1fffe0b6
    2c20:	fffffb65 	.word	0xfffffb65
    2c24:	1fffe058 	.word	0x1fffe058
	if (udd_g_ctrlreq.req.wLength) {
    2c28:	88e5      	ldrh	r5, [r4, #6]
    2c2a:	2d00      	cmp	r5, #0
    2c2c:	d000      	beq.n	2c30 <udc_process_setup+0x2bc>
    2c2e:	e6e1      	b.n	29f4 <udc_process_setup+0x80>
	if (!udd_getaddress()) {
    2c30:	4b55      	ldr	r3, [pc, #340]	; (2d88 <udc_process_setup+0x414>)
    2c32:	58f3      	ldr	r3, [r6, r3]
    2c34:	9301      	str	r3, [sp, #4]
    2c36:	4798      	blx	r3
    2c38:	2800      	cmp	r0, #0
    2c3a:	d100      	bne.n	2c3e <udc_process_setup+0x2ca>
    2c3c:	e6d4      	b.n	29e8 <udc_process_setup+0x74>
				udc_config.confdev_lsfs->bNumConfigurations) {
    2c3e:	4b53      	ldr	r3, [pc, #332]	; (2d8c <udc_process_setup+0x418>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2c40:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    2c42:	58f7      	ldr	r7, [r6, r3]
    2c44:	683b      	ldr	r3, [r7, #0]
    2c46:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2c48:	429a      	cmp	r2, r3
    2c4a:	dd00      	ble.n	2c4e <udc_process_setup+0x2da>
    2c4c:	e6cc      	b.n	29e8 <udc_process_setup+0x74>
	udc_reset();
    2c4e:	4b50      	ldr	r3, [pc, #320]	; (2d90 <udc_process_setup+0x41c>)
    2c50:	58f3      	ldr	r3, [r6, r3]
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2c56:	4a4f      	ldr	r2, [pc, #316]	; (2d94 <udc_process_setup+0x420>)
    2c58:	78a3      	ldrb	r3, [r4, #2]
    2c5a:	447a      	add	r2, pc
    2c5c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d100      	bne.n	2c64 <udc_process_setup+0x2f0>
    2c62:	e6b8      	b.n	29d6 <udc_process_setup+0x62>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2c64:	4a4c      	ldr	r2, [pc, #304]	; (2d98 <udc_process_setup+0x424>)
    2c66:	189b      	adds	r3, r3, r2
    2c68:	687a      	ldr	r2, [r7, #4]
    2c6a:	00db      	lsls	r3, r3, #3
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	4a4b      	ldr	r2, [pc, #300]	; (2d9c <udc_process_setup+0x428>)
    2c70:	447a      	add	r2, pc
    2c72:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c74:	4b4a      	ldr	r3, [pc, #296]	; (2da0 <udc_process_setup+0x42c>)
    2c76:	447b      	add	r3, pc
    2c78:	681b      	ldr	r3, [r3, #0]
    2c7a:	681b      	ldr	r3, [r3, #0]
    2c7c:	791b      	ldrb	r3, [r3, #4]
    2c7e:	42ab      	cmp	r3, r5
    2c80:	d800      	bhi.n	2c84 <udc_process_setup+0x310>
    2c82:	e6a8      	b.n	29d6 <udc_process_setup+0x62>
		if (!udc_iface_enable(iface_num, 0)) {
    2c84:	4b47      	ldr	r3, [pc, #284]	; (2da4 <udc_process_setup+0x430>)
    2c86:	2100      	movs	r1, #0
    2c88:	0028      	movs	r0, r5
    2c8a:	447b      	add	r3, pc
    2c8c:	4798      	blx	r3
    2c8e:	2800      	cmp	r0, #0
    2c90:	d100      	bne.n	2c94 <udc_process_setup+0x320>
    2c92:	e6a9      	b.n	29e8 <udc_process_setup+0x74>
			iface_num++) {
    2c94:	3501      	adds	r5, #1
    2c96:	b2ed      	uxtb	r5, r5
    2c98:	e7ec      	b.n	2c74 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	d11d      	bne.n	2cda <udc_process_setup+0x366>
			switch (udd_g_ctrlreq.req.bRequest) {
    2c9e:	7863      	ldrb	r3, [r4, #1]
    2ca0:	2b0b      	cmp	r3, #11
    2ca2:	d000      	beq.n	2ca6 <udc_process_setup+0x332>
    2ca4:	e6a0      	b.n	29e8 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wLength) {
    2ca6:	88e3      	ldrh	r3, [r4, #6]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d13d      	bne.n	2d28 <udc_process_setup+0x3b4>
	if (!udc_num_configuration) {
    2cac:	4b3e      	ldr	r3, [pc, #248]	; (2da8 <udc_process_setup+0x434>)
    2cae:	447b      	add	r3, pc
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d038      	beq.n	2d28 <udc_process_setup+0x3b4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2cb6:	7926      	ldrb	r6, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
    2cb8:	4b3c      	ldr	r3, [pc, #240]	; (2dac <udc_process_setup+0x438>)
    2cba:	0030      	movs	r0, r6
    2cbc:	447b      	add	r3, pc
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2cbe:	8865      	ldrh	r5, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
    2cc0:	4798      	blx	r3
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d100      	bne.n	2cc8 <udc_process_setup+0x354>
    2cc6:	e68f      	b.n	29e8 <udc_process_setup+0x74>
	return udc_iface_enable(iface_num, setting_num);
    2cc8:	4b39      	ldr	r3, [pc, #228]	; (2db0 <udc_process_setup+0x43c>)
    2cca:	b2e9      	uxtb	r1, r5
    2ccc:	0030      	movs	r0, r6
    2cce:	447b      	add	r3, pc
    2cd0:	4798      	blx	r3
		if (udc_reqstd()) {
    2cd2:	2800      	cmp	r0, #0
    2cd4:	d000      	beq.n	2cd8 <udc_process_setup+0x364>
    2cd6:	e67e      	b.n	29d6 <udc_process_setup+0x62>
    2cd8:	e686      	b.n	29e8 <udc_process_setup+0x74>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2cda:	2b02      	cmp	r3, #2
    2cdc:	d000      	beq.n	2ce0 <udc_process_setup+0x36c>
    2cde:	e683      	b.n	29e8 <udc_process_setup+0x74>
			switch (udd_g_ctrlreq.req.bRequest) {
    2ce0:	7863      	ldrb	r3, [r4, #1]
    2ce2:	2b01      	cmp	r3, #1
    2ce4:	d012      	beq.n	2d0c <udc_process_setup+0x398>
    2ce6:	2b03      	cmp	r3, #3
    2ce8:	d000      	beq.n	2cec <udc_process_setup+0x378>
    2cea:	e67d      	b.n	29e8 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wLength) {
    2cec:	88e3      	ldrh	r3, [r4, #6]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d000      	beq.n	2cf4 <udc_process_setup+0x380>
    2cf2:	e67f      	b.n	29f4 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2cf4:	8863      	ldrh	r3, [r4, #2]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d000      	beq.n	2cfc <udc_process_setup+0x388>
    2cfa:	e67b      	b.n	29f4 <udc_process_setup+0x80>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2cfc:	4b2d      	ldr	r3, [pc, #180]	; (2db4 <udc_process_setup+0x440>)
    2cfe:	7920      	ldrb	r0, [r4, #4]
    2d00:	58f3      	ldr	r3, [r6, r3]
    2d02:	9301      	str	r3, [sp, #4]
    2d04:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2d06:	7920      	ldrb	r0, [r4, #4]
    2d08:	4b2b      	ldr	r3, [pc, #172]	; (2db8 <udc_process_setup+0x444>)
    2d0a:	e009      	b.n	2d20 <udc_process_setup+0x3ac>
	if (udd_g_ctrlreq.req.wLength) {
    2d0c:	88e3      	ldrh	r3, [r4, #6]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d000      	beq.n	2d14 <udc_process_setup+0x3a0>
    2d12:	e66f      	b.n	29f4 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2d14:	8863      	ldrh	r3, [r4, #2]
    2d16:	2b00      	cmp	r3, #0
    2d18:	d000      	beq.n	2d1c <udc_process_setup+0x3a8>
    2d1a:	e66b      	b.n	29f4 <udc_process_setup+0x80>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2d1c:	7920      	ldrb	r0, [r4, #4]
    2d1e:	4b27      	ldr	r3, [pc, #156]	; (2dbc <udc_process_setup+0x448>)
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2d20:	58f3      	ldr	r3, [r6, r3]
    2d22:	9301      	str	r3, [sp, #4]
    2d24:	4798      	blx	r3
    2d26:	e7d4      	b.n	2cd2 <udc_process_setup+0x35e>
	if (0 == udc_num_configuration) {
    2d28:	4b25      	ldr	r3, [pc, #148]	; (2dc0 <udc_process_setup+0x44c>)
    2d2a:	447b      	add	r3, pc
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d100      	bne.n	2d34 <udc_process_setup+0x3c0>
    2d32:	e65f      	b.n	29f4 <udc_process_setup+0x80>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2d34:	4b23      	ldr	r3, [pc, #140]	; (2dc4 <udc_process_setup+0x450>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2d36:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2d38:	447b      	add	r3, pc
    2d3a:	681e      	ldr	r6, [r3, #0]
    2d3c:	6833      	ldr	r3, [r6, #0]
    2d3e:	791b      	ldrb	r3, [r3, #4]
    2d40:	42ab      	cmp	r3, r5
    2d42:	d800      	bhi.n	2d46 <udc_process_setup+0x3d2>
    2d44:	e656      	b.n	29f4 <udc_process_setup+0x80>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2d46:	4f20      	ldr	r7, [pc, #128]	; (2dc8 <udc_process_setup+0x454>)
    2d48:	2100      	movs	r1, #0
    2d4a:	0028      	movs	r0, r5
    2d4c:	447f      	add	r7, pc
    2d4e:	47b8      	blx	r7
    2d50:	2800      	cmp	r0, #0
    2d52:	d100      	bne.n	2d56 <udc_process_setup+0x3e2>
    2d54:	e64e      	b.n	29f4 <udc_process_setup+0x80>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2d56:	6873      	ldr	r3, [r6, #4]
    2d58:	00aa      	lsls	r2, r5, #2
    2d5a:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2d5c:	68f3      	ldr	r3, [r6, #12]
    2d5e:	4798      	blx	r3
    2d60:	0001      	movs	r1, r0
    2d62:	0028      	movs	r0, r5
    2d64:	47b8      	blx	r7
    2d66:	2800      	cmp	r0, #0
    2d68:	d100      	bne.n	2d6c <udc_process_setup+0x3f8>
    2d6a:	e643      	b.n	29f4 <udc_process_setup+0x80>
	return udi_api->setup();
    2d6c:	68b3      	ldr	r3, [r6, #8]
    2d6e:	4798      	blx	r3
		if (udc_req_iface()) {
    2d70:	2800      	cmp	r0, #0
    2d72:	d000      	beq.n	2d76 <udc_process_setup+0x402>
    2d74:	e62f      	b.n	29d6 <udc_process_setup+0x62>
    2d76:	e63d      	b.n	29f4 <udc_process_setup+0x80>
		str = udc_string_manufacturer_name;
    2d78:	4a14      	ldr	r2, [pc, #80]	; (2dcc <udc_process_setup+0x458>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2d7a:	210b      	movs	r1, #11
		str = udc_string_manufacturer_name;
    2d7c:	447a      	add	r2, pc
    2d7e:	e69b      	b.n	2ab8 <udc_process_setup+0x144>
		str = udc_get_string_serial_name();
    2d80:	4a13      	ldr	r2, [pc, #76]	; (2dd0 <udc_process_setup+0x45c>)
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    2d82:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
    2d84:	447a      	add	r2, pc
    2d86:	e697      	b.n	2ab8 <udc_process_setup+0x144>
    2d88:	0000004c 	.word	0x0000004c
    2d8c:	00000148 	.word	0x00000148
    2d90:	000000cc 	.word	0x000000cc
    2d94:	1fffdfd6 	.word	0x1fffdfd6
    2d98:	1fffffff 	.word	0x1fffffff
    2d9c:	1fffdfc4 	.word	0x1fffdfc4
    2da0:	1fffdfbe 	.word	0x1fffdfbe
    2da4:	fffffb67 	.word	0xfffffb67
    2da8:	1fffdf82 	.word	0x1fffdf82
    2dac:	fffffba1 	.word	0xfffffba1
    2db0:	fffffb23 	.word	0xfffffb23
    2db4:	000001f0 	.word	0x000001f0
    2db8:	00000160 	.word	0x00000160
    2dbc:	000001f4 	.word	0x000001f4
    2dc0:	1fffdf06 	.word	0x1fffdf06
    2dc4:	1fffdefc 	.word	0x1fffdefc
    2dc8:	fffff9f5 	.word	0xfffff9f5
    2dcc:	1fffd36c 	.word	0x1fffd36c
    2dd0:	0000a897 	.word	0x0000a897

00002dd4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2dd4:	4b10      	ldr	r3, [pc, #64]	; (2e18 <cpu_irq_enter_critical+0x44>)
{
    2dd6:	4911      	ldr	r1, [pc, #68]	; (2e1c <cpu_irq_enter_critical+0x48>)
	if (cpu_irq_critical_section_counter == 0) {
    2dd8:	447b      	add	r3, pc
    2dda:	681b      	ldr	r3, [r3, #0]
{
    2ddc:	4479      	add	r1, pc
    2dde:	b082      	sub	sp, #8
	if (cpu_irq_critical_section_counter == 0) {
    2de0:	2b00      	cmp	r3, #0
    2de2:	d10e      	bne.n	2e02 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2de4:	f3ef 8210 	mrs	r2, PRIMASK
		if (cpu_irq_is_enabled()) {
    2de8:	2a00      	cmp	r2, #0
    2dea:	d111      	bne.n	2e10 <cpu_irq_enter_critical+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
    2dec:	b672      	cpsid	i
    2dee:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2df2:	4b0b      	ldr	r3, [pc, #44]	; (2e20 <cpu_irq_enter_critical+0x4c>)
    2df4:	58cb      	ldr	r3, [r1, r3]
    2df6:	701a      	strb	r2, [r3, #0]
    2df8:	9301      	str	r3, [sp, #4]
			cpu_irq_prev_interrupt_state = true;
    2dfa:	4b0a      	ldr	r3, [pc, #40]	; (2e24 <cpu_irq_enter_critical+0x50>)
    2dfc:	3201      	adds	r2, #1
    2dfe:	447b      	add	r3, pc
    2e00:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
    2e02:	4a09      	ldr	r2, [pc, #36]	; (2e28 <cpu_irq_enter_critical+0x54>)
    2e04:	447a      	add	r2, pc
    2e06:	6813      	ldr	r3, [r2, #0]
    2e08:	3301      	adds	r3, #1
    2e0a:	6013      	str	r3, [r2, #0]
}
    2e0c:	b002      	add	sp, #8
    2e0e:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
    2e10:	4a06      	ldr	r2, [pc, #24]	; (2e2c <cpu_irq_enter_critical+0x58>)
    2e12:	447a      	add	r2, pc
    2e14:	7013      	strb	r3, [r2, #0]
    2e16:	e7f4      	b.n	2e02 <cpu_irq_enter_critical+0x2e>
    2e18:	1fffde64 	.word	0x1fffde64
    2e1c:	0000ad0c 	.word	0x0000ad0c
    2e20:	00000120 	.word	0x00000120
    2e24:	1fffde42 	.word	0x1fffde42
    2e28:	1fffde38 	.word	0x1fffde38
    2e2c:	1fffde2e 	.word	0x1fffde2e

00002e30 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e30:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <cpu_irq_leave_critical+0x38>)
{
    2e32:	490e      	ldr	r1, [pc, #56]	; (2e6c <cpu_irq_leave_critical+0x3c>)
	cpu_irq_critical_section_counter--;
    2e34:	447b      	add	r3, pc
    2e36:	681a      	ldr	r2, [r3, #0]
{
    2e38:	4479      	add	r1, pc
	cpu_irq_critical_section_counter--;
    2e3a:	3a01      	subs	r2, #1
    2e3c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e3e:	681b      	ldr	r3, [r3, #0]
{
    2e40:	b082      	sub	sp, #8
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e42:	2b00      	cmp	r3, #0
    2e44:	d10d      	bne.n	2e62 <cpu_irq_leave_critical+0x32>
    2e46:	4b0a      	ldr	r3, [pc, #40]	; (2e70 <cpu_irq_leave_critical+0x40>)
    2e48:	447b      	add	r3, pc
    2e4a:	781b      	ldrb	r3, [r3, #0]
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d008      	beq.n	2e62 <cpu_irq_leave_critical+0x32>
		cpu_irq_enable();
    2e50:	4b08      	ldr	r3, [pc, #32]	; (2e74 <cpu_irq_leave_critical+0x44>)
    2e52:	58cb      	ldr	r3, [r1, r3]
    2e54:	9301      	str	r3, [sp, #4]
    2e56:	2301      	movs	r3, #1
    2e58:	9a01      	ldr	r2, [sp, #4]
    2e5a:	7013      	strb	r3, [r2, #0]
    2e5c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e60:	b662      	cpsie	i
	}
}
    2e62:	b002      	add	sp, #8
    2e64:	4770      	bx	lr
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	1fffde08 	.word	0x1fffde08
    2e6c:	0000acb0 	.word	0x0000acb0
    2e70:	1fffddf8 	.word	0x1fffddf8
    2e74:	00000120 	.word	0x00000120

00002e78 <stdio_usb_getchar>:
void stdio_usb_getchar (void volatile * unused, char *data)
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    2e78:	4a08      	ldr	r2, [pc, #32]	; (2e9c <stdio_usb_getchar+0x24>)
{
    2e7a:	4b09      	ldr	r3, [pc, #36]	; (2ea0 <stdio_usb_getchar+0x28>)
	if (!stdio_usb_interface_enable) {
    2e7c:	447a      	add	r2, pc
    2e7e:	7812      	ldrb	r2, [r2, #0]
{
    2e80:	b513      	push	{r0, r1, r4, lr}
    2e82:	447b      	add	r3, pc
    2e84:	000c      	movs	r4, r1
	if (!stdio_usb_interface_enable) {
    2e86:	2a00      	cmp	r2, #0
    2e88:	d101      	bne.n	2e8e <stdio_usb_getchar+0x16>
		*data = 0;  // -1
    2e8a:	700a      	strb	r2, [r1, #0]
		return;
	}

	*data = (char)udi_cdc_getc();
}
    2e8c:	bd13      	pop	{r0, r1, r4, pc}
	*data = (char)udi_cdc_getc();
    2e8e:	4a05      	ldr	r2, [pc, #20]	; (2ea4 <stdio_usb_getchar+0x2c>)
    2e90:	589b      	ldr	r3, [r3, r2]
    2e92:	9301      	str	r3, [sp, #4]
    2e94:	4798      	blx	r3
    2e96:	7020      	strb	r0, [r4, #0]
    2e98:	e7f8      	b.n	2e8c <stdio_usb_getchar+0x14>
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	1fffddc5 	.word	0x1fffddc5
    2ea0:	0000ac66 	.word	0x0000ac66
    2ea4:	000002cc 	.word	0x000002cc

00002ea8 <stdio_usb_putchar>:
{
    2ea8:	b507      	push	{r0, r1, r2, lr}
		return 0;  // -1
    2eaa:	2000      	movs	r0, #0
	if (!stdio_usb_interface_enable) {
    2eac:	4a07      	ldr	r2, [pc, #28]	; (2ecc <stdio_usb_putchar+0x24>)
{
    2eae:	4b08      	ldr	r3, [pc, #32]	; (2ed0 <stdio_usb_putchar+0x28>)
	if (!stdio_usb_interface_enable) {
    2eb0:	447a      	add	r2, pc
    2eb2:	7812      	ldrb	r2, [r2, #0]
{
    2eb4:	447b      	add	r3, pc
	if (!stdio_usb_interface_enable) {
    2eb6:	4282      	cmp	r2, r0
    2eb8:	d007      	beq.n	2eca <stdio_usb_putchar+0x22>
	return udi_cdc_putc(data) ? 0 : -1;
    2eba:	4a06      	ldr	r2, [pc, #24]	; (2ed4 <stdio_usb_putchar+0x2c>)
    2ebc:	0008      	movs	r0, r1
    2ebe:	589b      	ldr	r3, [r3, r2]
    2ec0:	9301      	str	r3, [sp, #4]
    2ec2:	4798      	blx	r3
    2ec4:	4243      	negs	r3, r0
    2ec6:	4158      	adcs	r0, r3
    2ec8:	4240      	negs	r0, r0
}
    2eca:	bd0e      	pop	{r1, r2, r3, pc}
    2ecc:	1fffdd91 	.word	0x1fffdd91
    2ed0:	0000ac34 	.word	0x0000ac34
    2ed4:	000000c8 	.word	0x000000c8

00002ed8 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    2ed8:	2001      	movs	r0, #1
    2eda:	4b02      	ldr	r3, [pc, #8]	; (2ee4 <stdio_usb_enable+0xc>)
    2edc:	447b      	add	r3, pc
    2ede:	7018      	strb	r0, [r3, #0]
	return true;
}
    2ee0:	4770      	bx	lr
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	1fffdd65 	.word	0x1fffdd65

00002ee8 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
    2ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	stdio_base = NULL;
    2eea:	2500      	movs	r5, #0
{
    2eec:	4c10      	ldr	r4, [pc, #64]	; (2f30 <stdio_usb_init+0x48>)
	stdio_base = NULL;
    2eee:	4b11      	ldr	r3, [pc, #68]	; (2f34 <stdio_usb_init+0x4c>)
{
    2ef0:	447c      	add	r4, pc
	stdio_base = NULL;
    2ef2:	58e3      	ldr	r3, [r4, r3]
	ptr_put = stdio_usb_putchar;
    2ef4:	4a10      	ldr	r2, [pc, #64]	; (2f38 <stdio_usb_init+0x50>)
	stdio_base = NULL;
    2ef6:	601d      	str	r5, [r3, #0]
	ptr_put = stdio_usb_putchar;
    2ef8:	4b10      	ldr	r3, [pc, #64]	; (2f3c <stdio_usb_init+0x54>)
    2efa:	58a2      	ldr	r2, [r4, r2]
    2efc:	58e3      	ldr	r3, [r4, r3]
    2efe:	9201      	str	r2, [sp, #4]
    2f00:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    2f02:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <stdio_usb_init+0x58>)
    2f04:	4a0f      	ldr	r2, [pc, #60]	; (2f44 <stdio_usb_init+0x5c>)
    2f06:	58e3      	ldr	r3, [r4, r3]
    2f08:	58a2      	ldr	r2, [r4, r2]
    2f0a:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    2f0c:	4b0e      	ldr	r3, [pc, #56]	; (2f48 <stdio_usb_init+0x60>)
	ptr_get = stdio_usb_getchar;
    2f0e:	9201      	str	r2, [sp, #4]
	udc_start ();
    2f10:	58e3      	ldr	r3, [r4, r3]
    2f12:	9301      	str	r3, [sp, #4]
    2f14:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2f16:	4b0d      	ldr	r3, [pc, #52]	; (2f4c <stdio_usb_init+0x64>)
    2f18:	0029      	movs	r1, r5
    2f1a:	58e6      	ldr	r6, [r4, r3]
    2f1c:	6833      	ldr	r3, [r6, #0]
    2f1e:	6898      	ldr	r0, [r3, #8]
    2f20:	4b0b      	ldr	r3, [pc, #44]	; (2f50 <stdio_usb_init+0x68>)
    2f22:	58e4      	ldr	r4, [r4, r3]
    2f24:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2f26:	6833      	ldr	r3, [r6, #0]
    2f28:	0029      	movs	r1, r5
    2f2a:	6858      	ldr	r0, [r3, #4]
    2f2c:	47a0      	blx	r4
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    2f2e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2f30:	0000abf8 	.word	0x0000abf8
    2f34:	00000248 	.word	0x00000248
    2f38:	0000019c 	.word	0x0000019c
    2f3c:	0000014c 	.word	0x0000014c
    2f40:	00000128 	.word	0x00000128
    2f44:	00000158 	.word	0x00000158
    2f48:	00000318 	.word	0x00000318
    2f4c:	00000294 	.word	0x00000294
    2f50:	000002ec 	.word	0x000002ec

00002f54 <bod_set_config>:
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    2f54:	2202      	movs	r2, #2
{
    2f56:	b530      	push	{r4, r5, lr}
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    2f58:	4c18      	ldr	r4, [pc, #96]	; (2fbc <bod_set_config+0x68>)
    2f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f5c:	4213      	tst	r3, r2
    2f5e:	d002      	beq.n	2f66 <bod_set_config+0x12>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    2f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f62:	4393      	bics	r3, r2
    2f64:	6363      	str	r3, [r4, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f66:	790d      	ldrb	r5, [r1, #4]
    2f68:	880b      	ldrh	r3, [r1, #0]
			(uint32_t)conf->mode;
    2f6a:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f6c:	432b      	orrs	r3, r5

	if (conf->mode == BOD_MODE_SAMPLED) {
    2f6e:	2580      	movs	r5, #128	; 0x80
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f70:	4313      	orrs	r3, r2
	if (conf->mode == BOD_MODE_SAMPLED) {
    2f72:	006d      	lsls	r5, r5, #1
    2f74:	42aa      	cmp	r2, r5
    2f76:	d102      	bne.n	2f7e <bod_set_config+0x2a>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    2f78:	2280      	movs	r2, #128	; 0x80
    2f7a:	0092      	lsls	r2, r2, #2
    2f7c:	4313      	orrs	r3, r2
	}

	if (conf->hysteresis == true) {
    2f7e:	798a      	ldrb	r2, [r1, #6]
    2f80:	2a00      	cmp	r2, #0
    2f82:	d001      	beq.n	2f88 <bod_set_config+0x34>
		temp |= SYSCTRL_BOD33_HYST;
    2f84:	2204      	movs	r2, #4
    2f86:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
    2f88:	79ca      	ldrb	r2, [r1, #7]
    2f8a:	2a00      	cmp	r2, #0
    2f8c:	d001      	beq.n	2f92 <bod_set_config+0x3e>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    2f8e:	2240      	movs	r2, #64	; 0x40
    2f90:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
    2f92:	2800      	cmp	r0, #0
    2f94:	d110      	bne.n	2fb8 <bod_set_config+0x64>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    2f96:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
    2f98:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
    2f9a:	2a3f      	cmp	r2, #63	; 0x3f
    2f9c:	d80b      	bhi.n	2fb6 <bod_set_config+0x62>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    2f9e:	21fc      	movs	r1, #252	; 0xfc
    2fa0:	0412      	lsls	r2, r2, #16
    2fa2:	0389      	lsls	r1, r1, #14
    2fa4:	400a      	ands	r2, r1
    2fa6:	4313      	orrs	r3, r2
    2fa8:	6363      	str	r3, [r4, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    2faa:	2380      	movs	r3, #128	; 0x80
    2fac:	011b      	lsls	r3, r3, #4
    2fae:	68e2      	ldr	r2, [r4, #12]
    2fb0:	421a      	tst	r2, r3
    2fb2:	d0fc      	beq.n	2fae <bod_set_config+0x5a>
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2fb4:	2000      	movs	r0, #0
}
    2fb6:	bd30      	pop	{r4, r5, pc}
			return STATUS_ERR_INVALID_ARG;
    2fb8:	2017      	movs	r0, #23
    2fba:	e7fc      	b.n	2fb6 <bod_set_config+0x62>
    2fbc:	40000800 	.word	0x40000800

00002fc0 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    2fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2fc2:	4c24      	ldr	r4, [pc, #144]	; (3054 <DMAC_Handler+0x94>)
	cpu_irq_enter_critical();
    2fc4:	4b24      	ldr	r3, [pc, #144]	; (3058 <DMAC_Handler+0x98>)
    2fc6:	447c      	add	r4, pc
    2fc8:	58e3      	ldr	r3, [r4, r3]
	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
	isr = DMAC->CHINTFLAG.reg;

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2fca:	4d24      	ldr	r5, [pc, #144]	; (305c <DMAC_Handler+0x9c>)
    2fcc:	9301      	str	r3, [sp, #4]
    2fce:	4798      	blx	r3
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2fd0:	210f      	movs	r1, #15
    2fd2:	4b23      	ldr	r3, [pc, #140]	; (3060 <DMAC_Handler+0xa0>)
	resource = _dma_active_resource[active_channel];
    2fd4:	4a23      	ldr	r2, [pc, #140]	; (3064 <DMAC_Handler+0xa4>)
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    2fd6:	8c1b      	ldrh	r3, [r3, #32]
	resource = _dma_active_resource[active_channel];
    2fd8:	447a      	add	r2, pc
    2fda:	400b      	ands	r3, r1
    2fdc:	009b      	lsls	r3, r3, #2
    2fde:	5898      	ldr	r0, [r3, r2]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2fe0:	4b21      	ldr	r3, [pc, #132]	; (3068 <DMAC_Handler+0xa8>)
    2fe2:	7802      	ldrb	r2, [r0, #0]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2fe4:	4e21      	ldr	r6, [pc, #132]	; (306c <DMAC_Handler+0xac>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    2fe6:	4011      	ands	r1, r2
    2fe8:	7019      	strb	r1, [r3, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2fea:	5965      	ldr	r5, [r4, r5]
	isr = DMAC->CHINTFLAG.reg;
    2fec:	4920      	ldr	r1, [pc, #128]	; (3070 <DMAC_Handler+0xb0>)
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2fee:	0112      	lsls	r2, r2, #4
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2ff0:	447e      	add	r6, pc
	isr = DMAC->CHINTFLAG.reg;
    2ff2:	780b      	ldrb	r3, [r1, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2ff4:	9501      	str	r5, [sp, #4]
    2ff6:	18ad      	adds	r5, r5, r2
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2ff8:	18b2      	adds	r2, r6, r2
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    2ffa:	886d      	ldrh	r5, [r5, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    2ffc:	8852      	ldrh	r2, [r2, #2]
	isr = DMAC->CHINTFLAG.reg;
    2ffe:	b2db      	uxtb	r3, r3
	resource->transfered_size = total_size - write_size;
    3000:	1aaa      	subs	r2, r5, r2
    3002:	6142      	str	r2, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    3004:	001d      	movs	r5, r3
    3006:	2201      	movs	r2, #1
    3008:	4015      	ands	r5, r2
    300a:	d00e      	beq.n	302a <DMAC_Handler+0x6a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    300c:	2310      	movs	r3, #16
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    300e:	700a      	strb	r2, [r1, #0]
		resource->job_status = STATUS_ERR_IO;
    3010:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    3012:	7c03      	ldrb	r3, [r0, #16]
    3014:	4213      	tst	r3, r2
    3016:	d003      	beq.n	3020 <DMAC_Handler+0x60>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    3018:	6843      	ldr	r3, [r0, #4]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    301a:	2b00      	cmp	r3, #0
    301c:	d000      	beq.n	3020 <DMAC_Handler+0x60>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    301e:	4798      	blx	r3
	cpu_irq_leave_critical();
    3020:	4b14      	ldr	r3, [pc, #80]	; (3074 <DMAC_Handler+0xb4>)
    3022:	58e3      	ldr	r3, [r4, r3]
    3024:	9301      	str	r3, [sp, #4]
    3026:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
    3028:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    302a:	2202      	movs	r2, #2
    302c:	4213      	tst	r3, r2
    302e:	d006      	beq.n	303e <DMAC_Handler+0x7e>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    3030:	700a      	strb	r2, [r1, #0]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    3032:	7c03      	ldrb	r3, [r0, #16]
		resource->job_status = STATUS_OK;
    3034:	7445      	strb	r5, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    3036:	4213      	tst	r3, r2
    3038:	d0f2      	beq.n	3020 <DMAC_Handler+0x60>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    303a:	6883      	ldr	r3, [r0, #8]
    303c:	e7ed      	b.n	301a <DMAC_Handler+0x5a>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    303e:	2204      	movs	r2, #4
    3040:	4213      	tst	r3, r2
    3042:	d0ed      	beq.n	3020 <DMAC_Handler+0x60>
		resource->job_status = STATUS_SUSPEND;
    3044:	2306      	movs	r3, #6
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    3046:	700a      	strb	r2, [r1, #0]
		resource->job_status = STATUS_SUSPEND;
    3048:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    304a:	7c03      	ldrb	r3, [r0, #16]
    304c:	4213      	tst	r3, r2
    304e:	d0e7      	beq.n	3020 <DMAC_Handler+0x60>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    3050:	68c3      	ldr	r3, [r0, #12]
    3052:	e7e2      	b.n	301a <DMAC_Handler+0x5a>
    3054:	0000ab22 	.word	0x0000ab22
    3058:	00000110 	.word	0x00000110
    305c:	00000058 	.word	0x00000058
    3060:	41004800 	.word	0x41004800
    3064:	1fffdc6c 	.word	0x1fffdc6c
    3068:	4100483f 	.word	0x4100483f
    306c:	1fffdc6c 	.word	0x1fffdc6c
    3070:	4100484e 	.word	0x4100484e
    3074:	00000014 	.word	0x00000014

00003078 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
    3078:	2300      	movs	r3, #0
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    307a:	2203      	movs	r2, #3
	config->priority = DMA_PRIORITY_LEVEL_0;
    307c:	7003      	strb	r3, [r0, #0]
	config->peripheral_trigger = 0;
    307e:	7043      	strb	r3, [r0, #1]
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    3080:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
    3082:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
    3084:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
    3086:	4770      	bx	lr

00003088 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
    3088:	b5f0      	push	{r4, r5, r6, r7, lr}
    308a:	4e47      	ldr	r6, [pc, #284]	; (31a8 <dma_allocate+0x120>)
    308c:	b085      	sub	sp, #20
	cpu_irq_enter_critical();
    308e:	4b47      	ldr	r3, [pc, #284]	; (31ac <dma_allocate+0x124>)
    3090:	447e      	add	r6, pc
    3092:	9101      	str	r1, [sp, #4]
    3094:	58f3      	ldr	r3, [r6, r3]
    3096:	0007      	movs	r7, r0
    3098:	9302      	str	r3, [sp, #8]
    309a:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
    309c:	4b44      	ldr	r3, [pc, #272]	; (31b0 <dma_allocate+0x128>)
    309e:	58f5      	ldr	r5, [r6, r3]
    30a0:	782b      	ldrb	r3, [r5, #0]
    30a2:	2b00      	cmp	r3, #0
    30a4:	d119      	bne.n	30da <dma_allocate+0x52>
	PM->AHBMASK.reg |= ahb_mask;
    30a6:	2220      	movs	r2, #32
    30a8:	4b42      	ldr	r3, [pc, #264]	; (31b4 <dma_allocate+0x12c>)
    30aa:	6959      	ldr	r1, [r3, #20]
    30ac:	430a      	orrs	r2, r1
    30ae:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
    30b0:	2210      	movs	r2, #16
    30b2:	69d9      	ldr	r1, [r3, #28]
    30b4:	430a      	orrs	r2, r1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    30b6:	2102      	movs	r1, #2
    30b8:	61da      	str	r2, [r3, #28]
    30ba:	4b3f      	ldr	r3, [pc, #252]	; (31b8 <dma_allocate+0x130>)
    30bc:	881a      	ldrh	r2, [r3, #0]
    30be:	438a      	bics	r2, r1
    30c0:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    30c2:	2201      	movs	r2, #1

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    30c4:	493d      	ldr	r1, [pc, #244]	; (31bc <dma_allocate+0x134>)
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    30c6:	801a      	strh	r2, [r3, #0]
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    30c8:	5871      	ldr	r1, [r6, r1]
    30ca:	9103      	str	r1, [sp, #12]
    30cc:	6359      	str	r1, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    30ce:	493c      	ldr	r1, [pc, #240]	; (31c0 <dma_allocate+0x138>)
    30d0:	4479      	add	r1, pc
    30d2:	6399      	str	r1, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    30d4:	493b      	ldr	r1, [pc, #236]	; (31c4 <dma_allocate+0x13c>)
    30d6:	8019      	strh	r1, [r3, #0]

		_dma_inst._dma_init = true;
    30d8:	702a      	strb	r2, [r5, #0]
    30da:	9b02      	ldr	r3, [sp, #8]
    30dc:	4798      	blx	r3
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    30de:	2400      	movs	r4, #0
		if (!(tmp & 0x00000001)) {
    30e0:	2301      	movs	r3, #1
	tmp = _dma_inst.allocated_channels;
    30e2:	686a      	ldr	r2, [r5, #4]
		if (!(tmp & 0x00000001)) {
    30e4:	421a      	tst	r2, r3
    30e6:	d154      	bne.n	3192 <dma_allocate+0x10a>
			_dma_inst.allocated_channels |= 1 << count;
    30e8:	40a3      	lsls	r3, r4
    30ea:	686a      	ldr	r2, [r5, #4]
    30ec:	4313      	orrs	r3, r2
    30ee:	606b      	str	r3, [r5, #4]
			_dma_inst.free_channels--;
    30f0:	7a2b      	ldrb	r3, [r5, #8]
    30f2:	3b01      	subs	r3, #1
    30f4:	722b      	strb	r3, [r5, #8]
			allocated = true;
    30f6:	2501      	movs	r5, #1
	cpu_irq_leave_critical();
    30f8:	4b33      	ldr	r3, [pc, #204]	; (31c8 <dma_allocate+0x140>)
    30fa:	58f3      	ldr	r3, [r6, r3]
    30fc:	9303      	str	r3, [sp, #12]
    30fe:	4798      	blx	r3
	if (!allocated) {
    3100:	2d00      	cmp	r5, #0
    3102:	d04d      	beq.n	31a0 <dma_allocate+0x118>

	/* Set the channel */
	resource->channel_id = new_channel;

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    3104:	4b31      	ldr	r3, [pc, #196]	; (31cc <dma_allocate+0x144>)
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    3106:	2102      	movs	r1, #2
	resource->channel_id = new_channel;
    3108:	703c      	strb	r4, [r7, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    310a:	701c      	strb	r4, [r3, #0]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    310c:	2401      	movs	r4, #1
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    310e:	4b30      	ldr	r3, [pc, #192]	; (31d0 <dma_allocate+0x148>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    3110:	4d29      	ldr	r5, [pc, #164]	; (31b8 <dma_allocate+0x130>)
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    3112:	781a      	ldrb	r2, [r3, #0]
    3114:	438a      	bics	r2, r1
    3116:	701a      	strb	r2, [r3, #0]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    3118:	701c      	strb	r4, [r3, #0]
	cpu_irq_enter_critical();
    311a:	9b02      	ldr	r3, [sp, #8]
    311c:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    311e:	230f      	movs	r3, #15
    3120:	783a      	ldrb	r2, [r7, #0]
    3122:	492a      	ldr	r1, [pc, #168]	; (31cc <dma_allocate+0x144>)
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    3124:	4094      	lsls	r4, r2
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    3126:	4013      	ands	r3, r2
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    3128:	2260      	movs	r2, #96	; 0x60
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    312a:	700b      	strb	r3, [r1, #0]
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    312c:	21fc      	movs	r1, #252	; 0xfc
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    312e:	692b      	ldr	r3, [r5, #16]
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    3130:	0189      	lsls	r1, r1, #6
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    3132:	43a3      	bics	r3, r4
    3134:	612b      	str	r3, [r5, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    3136:	9b01      	ldr	r3, [sp, #4]
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	015b      	lsls	r3, r3, #5
    313c:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    313e:	9a01      	ldr	r2, [sp, #4]
    3140:	7852      	ldrb	r2, [r2, #1]
    3142:	0212      	lsls	r2, r2, #8
    3144:	400a      	ands	r2, r1
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    3146:	21c0      	movs	r1, #192	; 0xc0
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    3148:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    314a:	9a01      	ldr	r2, [sp, #4]
    314c:	0409      	lsls	r1, r1, #16
    314e:	7892      	ldrb	r2, [r2, #2]
    3150:	0592      	lsls	r2, r2, #22
    3152:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    3154:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
    3156:	9a01      	ldr	r2, [sp, #4]
    3158:	78d2      	ldrb	r2, [r2, #3]
    315a:	2a00      	cmp	r2, #0
    315c:	d004      	beq.n	3168 <dma_allocate+0xe0>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
    315e:	2107      	movs	r1, #7
    3160:	400a      	ands	r2, r1
    3162:	3101      	adds	r1, #1
    3164:	430a      	orrs	r2, r1
    3166:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
    3168:	9a01      	ldr	r2, [sp, #4]
    316a:	7912      	ldrb	r2, [r2, #4]
    316c:	2a00      	cmp	r2, #0
    316e:	d001      	beq.n	3174 <dma_allocate+0xec>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
    3170:	2210      	movs	r2, #16
    3172:	4313      	orrs	r3, r2
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
    3174:	2400      	movs	r4, #0
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    3176:	646b      	str	r3, [r5, #68]	; 0x44
	cpu_irq_leave_critical();
    3178:	4b13      	ldr	r3, [pc, #76]	; (31c8 <dma_allocate+0x140>)
    317a:	58f5      	ldr	r5, [r6, r3]
    317c:	47a8      	blx	r5

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
    317e:	783b      	ldrb	r3, [r7, #0]
    3180:	4a14      	ldr	r2, [pc, #80]	; (31d4 <dma_allocate+0x14c>)
    3182:	009b      	lsls	r3, r3, #2
    3184:	447a      	add	r2, pc
	resource->descriptor = NULL;
    3186:	61bc      	str	r4, [r7, #24]
	_dma_active_resource[resource->channel_id] = resource;
    3188:	509f      	str	r7, [r3, r2]
    318a:	47a8      	blx	r5

	system_interrupt_leave_critical_section();

	return STATUS_OK;
    318c:	0020      	movs	r0, r4
}
    318e:	b005      	add	sp, #20
    3190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    3192:	3401      	adds	r4, #1
    3194:	b2e4      	uxtb	r4, r4
		tmp = tmp >> 1;
    3196:	0852      	lsrs	r2, r2, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    3198:	2c05      	cmp	r4, #5
    319a:	d1a3      	bne.n	30e4 <dma_allocate+0x5c>
	bool allocated = false;
    319c:	2500      	movs	r5, #0
    319e:	e7ab      	b.n	30f8 <dma_allocate+0x70>
    31a0:	9b03      	ldr	r3, [sp, #12]
    31a2:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
    31a4:	2014      	movs	r0, #20
    31a6:	e7f2      	b.n	318e <dma_allocate+0x106>
    31a8:	0000aa58 	.word	0x0000aa58
    31ac:	00000110 	.word	0x00000110
    31b0:	00000300 	.word	0x00000300
    31b4:	40000400 	.word	0x40000400
    31b8:	41004800 	.word	0x41004800
    31bc:	00000058 	.word	0x00000058
    31c0:	1fffdb8c 	.word	0x1fffdb8c
    31c4:	00000f02 	.word	0x00000f02
    31c8:	00000014 	.word	0x00000014
    31cc:	4100483f 	.word	0x4100483f
    31d0:	41004840 	.word	0x41004840
    31d4:	1fffdac0 	.word	0x1fffdac0

000031d8 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
    31d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31da:	0007      	movs	r7, r0
    31dc:	4c1c      	ldr	r4, [pc, #112]	; (3250 <dma_start_transfer_job+0x78>)
	cpu_irq_enter_critical();
    31de:	4b1d      	ldr	r3, [pc, #116]	; (3254 <dma_start_transfer_job+0x7c>)
    31e0:	447c      	add	r4, pc
    31e2:	58e3      	ldr	r3, [r4, r3]
    31e4:	9301      	str	r3, [sp, #4]
    31e6:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
    31e8:	7c7e      	ldrb	r6, [r7, #17]
    31ea:	4b1b      	ldr	r3, [pc, #108]	; (3258 <dma_start_transfer_job+0x80>)
    31ec:	b2f6      	uxtb	r6, r6
    31ee:	58e5      	ldr	r5, [r4, r3]
    31f0:	2e05      	cmp	r6, #5
    31f2:	d102      	bne.n	31fa <dma_start_transfer_job+0x22>
	cpu_irq_leave_critical();
    31f4:	47a8      	blx	r5
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    31f6:	0030      	movs	r0, r6
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
    31f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (resource->descriptor->BTCNT.reg == 0) {
    31fa:	69b9      	ldr	r1, [r7, #24]
    31fc:	884b      	ldrh	r3, [r1, #2]
    31fe:	2b00      	cmp	r3, #0
    3200:	d102      	bne.n	3208 <dma_start_transfer_job+0x30>
    3202:	47a8      	blx	r5
		return STATUS_ERR_INVALID_ARG;
    3204:	2017      	movs	r0, #23
    3206:	e7f7      	b.n	31f8 <dma_start_transfer_job+0x20>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3208:	2240      	movs	r2, #64	; 0x40
    320a:	4b14      	ldr	r3, [pc, #80]	; (325c <dma_start_transfer_job+0x84>)
    320c:	601a      	str	r2, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    320e:	230f      	movs	r3, #15
    3210:	7838      	ldrb	r0, [r7, #0]
    3212:	4a13      	ldr	r2, [pc, #76]	; (3260 <dma_start_transfer_job+0x88>)
    3214:	4003      	ands	r3, r0
    3216:	7013      	strb	r3, [r2, #0]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    3218:	2207      	movs	r2, #7
    321a:	4b12      	ldr	r3, [pc, #72]	; (3264 <dma_start_transfer_job+0x8c>)
    321c:	58e3      	ldr	r3, [r4, r3]
    321e:	9301      	str	r3, [sp, #4]
    3220:	5c1b      	ldrb	r3, [r3, r0]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    3222:	0100      	lsls	r0, r0, #4
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    3224:	4013      	ands	r3, r2
    3226:	4a10      	ldr	r2, [pc, #64]	; (3268 <dma_start_transfer_job+0x90>)
    3228:	7013      	strb	r3, [r2, #0]
	resource->job_status = STATUS_BUSY;
    322a:	2305      	movs	r3, #5
    322c:	747b      	strb	r3, [r7, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    322e:	4b0f      	ldr	r3, [pc, #60]	; (326c <dma_start_transfer_job+0x94>)
    3230:	2210      	movs	r2, #16
    3232:	58e3      	ldr	r3, [r4, r3]
    3234:	9301      	str	r3, [sp, #4]
    3236:	18c0      	adds	r0, r0, r3
    3238:	4b0d      	ldr	r3, [pc, #52]	; (3270 <dma_start_transfer_job+0x98>)
    323a:	58e3      	ldr	r3, [r4, r3]
    323c:	9301      	str	r3, [sp, #4]
    323e:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    3240:	2302      	movs	r3, #2
    3242:	4a0c      	ldr	r2, [pc, #48]	; (3274 <dma_start_transfer_job+0x9c>)
    3244:	7811      	ldrb	r1, [r2, #0]
    3246:	430b      	orrs	r3, r1
    3248:	7013      	strb	r3, [r2, #0]
	cpu_irq_leave_critical();
    324a:	47a8      	blx	r5
	return STATUS_OK;
    324c:	2000      	movs	r0, #0
    324e:	e7d3      	b.n	31f8 <dma_start_transfer_job+0x20>
    3250:	0000a908 	.word	0x0000a908
    3254:	00000110 	.word	0x00000110
    3258:	00000014 	.word	0x00000014
    325c:	e000e100 	.word	0xe000e100
    3260:	4100483f 	.word	0x4100483f
    3264:	00000078 	.word	0x00000078
    3268:	4100484d 	.word	0x4100484d
    326c:	00000058 	.word	0x00000058
    3270:	000000c0 	.word	0x000000c0
    3274:	41004840 	.word	0x41004840

00003278 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
    3278:	b570      	push	{r4, r5, r6, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    327a:	2401      	movs	r4, #1
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    327c:	2603      	movs	r6, #3
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    327e:	8803      	ldrh	r3, [r0, #0]
    3280:	780a      	ldrb	r2, [r1, #0]
    3282:	43a3      	bics	r3, r4
    3284:	4022      	ands	r2, r4
    3286:	4313      	orrs	r3, r2
    3288:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    328a:	784a      	ldrb	r2, [r1, #1]
    328c:	2506      	movs	r5, #6
    328e:	4032      	ands	r2, r6
    3290:	40a2      	lsls	r2, r4
    3292:	8803      	ldrh	r3, [r0, #0]
    3294:	43ab      	bics	r3, r5
    3296:	4313      	orrs	r3, r2
    3298:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
    329a:	788b      	ldrb	r3, [r1, #2]
    329c:	2218      	movs	r2, #24
    329e:	4033      	ands	r3, r6
    32a0:	40b3      	lsls	r3, r6
    32a2:	8805      	ldrh	r5, [r0, #0]
    32a4:	4395      	bics	r5, r2
    32a6:	431d      	orrs	r5, r3
    32a8:	8005      	strh	r5, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
    32aa:	78ca      	ldrb	r2, [r1, #3]
    32ac:	8803      	ldrh	r3, [r0, #0]
    32ae:	4d18      	ldr	r5, [pc, #96]	; (3310 <dma_descriptor_create+0x98>)
    32b0:	4032      	ands	r2, r6
    32b2:	0212      	lsls	r2, r2, #8
    32b4:	402b      	ands	r3, r5
    32b6:	4313      	orrs	r3, r2
    32b8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
    32ba:	790a      	ldrb	r2, [r1, #4]
    32bc:	8803      	ldrh	r3, [r0, #0]
    32be:	4d15      	ldr	r5, [pc, #84]	; (3314 <dma_descriptor_create+0x9c>)
    32c0:	4022      	ands	r2, r4
    32c2:	0292      	lsls	r2, r2, #10
    32c4:	402b      	ands	r3, r5
    32c6:	4313      	orrs	r3, r2
    32c8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
    32ca:	794a      	ldrb	r2, [r1, #5]
    32cc:	8803      	ldrh	r3, [r0, #0]
    32ce:	4d12      	ldr	r5, [pc, #72]	; (3318 <dma_descriptor_create+0xa0>)
    32d0:	4022      	ands	r2, r4
    32d2:	402b      	ands	r3, r5
    32d4:	02d2      	lsls	r2, r2, #11
    32d6:	4313      	orrs	r3, r2
    32d8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
    32da:	798a      	ldrb	r2, [r1, #6]
    32dc:	8803      	ldrh	r3, [r0, #0]
    32de:	4022      	ands	r2, r4
    32e0:	4c0e      	ldr	r4, [pc, #56]	; (331c <dma_descriptor_create+0xa4>)
    32e2:	0312      	lsls	r2, r2, #12
    32e4:	4023      	ands	r3, r4
    32e6:	4313      	orrs	r3, r2
    32e8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
    32ea:	2307      	movs	r3, #7
    32ec:	79ca      	ldrb	r2, [r1, #7]
    32ee:	401a      	ands	r2, r3
    32f0:	8803      	ldrh	r3, [r0, #0]
    32f2:	0352      	lsls	r2, r2, #13
    32f4:	04db      	lsls	r3, r3, #19
    32f6:	0cdb      	lsrs	r3, r3, #19
    32f8:	4313      	orrs	r3, r2
    32fa:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    32fc:	890b      	ldrh	r3, [r1, #8]
    32fe:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
    3300:	68cb      	ldr	r3, [r1, #12]
    3302:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    3304:	690b      	ldr	r3, [r1, #16]
    3306:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    3308:	694b      	ldr	r3, [r1, #20]
    330a:	60c3      	str	r3, [r0, #12]
}
    330c:	bd70      	pop	{r4, r5, r6, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	fffffcff 	.word	0xfffffcff
    3314:	fffffbff 	.word	0xfffffbff
    3318:	fffff7ff 	.word	0xfffff7ff
    331c:	ffffefff 	.word	0xffffefff

00003320 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
    3320:	0002      	movs	r2, r0
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
    3322:	7c43      	ldrb	r3, [r0, #17]
		return STATUS_BUSY;
    3324:	2005      	movs	r0, #5
	if (resource->job_status == STATUS_BUSY) {
    3326:	4283      	cmp	r3, r0
    3328:	d004      	beq.n	3334 <dma_add_descriptor+0x14>
	DmacDescriptor* desc = resource->descriptor;
    332a:	6993      	ldr	r3, [r2, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    332c:	2b00      	cmp	r3, #0
    332e:	d103      	bne.n	3338 <dma_add_descriptor+0x18>

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
	}

	return STATUS_OK;
    3330:	0018      	movs	r0, r3
		resource->descriptor = descriptor;
    3332:	6191      	str	r1, [r2, #24]
}
    3334:	4770      	bx	lr
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    3336:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
    3338:	68d8      	ldr	r0, [r3, #12]
    333a:	2800      	cmp	r0, #0
    333c:	d1fb      	bne.n	3336 <dma_add_descriptor+0x16>
		desc->DESCADDR.reg = (uint32_t)descriptor;
    333e:	60d9      	str	r1, [r3, #12]
    3340:	e7f8      	b.n	3334 <dma_add_descriptor+0x14>
	...

00003344 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3344:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3346:	2900      	cmp	r1, #0
    3348:	d106      	bne.n	3358 <extint_chan_enable_callback+0x14>
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    334a:	281f      	cmp	r0, #31
    334c:	d806      	bhi.n	335c <extint_chan_enable_callback+0x18>
		eic->INTENSET.reg = (1UL << channel);
    334e:	3b16      	subs	r3, #22
    3350:	4083      	lsls	r3, r0
    3352:	4a03      	ldr	r2, [pc, #12]	; (3360 <extint_chan_enable_callback+0x1c>)
    3354:	60d3      	str	r3, [r2, #12]
	}

	return STATUS_OK;
    3356:	000b      	movs	r3, r1
}
    3358:	0018      	movs	r0, r3
    335a:	4770      	bx	lr
		eic->INTENSET.reg = (1UL << channel);
    335c:	60c9      	str	r1, [r1, #12]
    335e:	deff      	udf	#255	; 0xff
    3360:	40001800 	.word	0x40001800

00003364 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3366:	4d0f      	ldr	r5, [pc, #60]	; (33a4 <EIC_Handler+0x40>)
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3368:	4b0f      	ldr	r3, [pc, #60]	; (33a8 <EIC_Handler+0x44>)
{
    336a:	447d      	add	r5, pc
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    336c:	58ec      	ldr	r4, [r5, r3]
    336e:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3370:	2601      	movs	r6, #1
    3372:	7023      	strb	r3, [r4, #0]
    3374:	7823      	ldrb	r3, [r4, #0]
    3376:	2b0f      	cmp	r3, #15
    3378:	d900      	bls.n	337c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    337a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    337c:	0031      	movs	r1, r6
    337e:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
    3380:	4a0a      	ldr	r2, [pc, #40]	; (33ac <EIC_Handler+0x48>)
    3382:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3384:	4208      	tst	r0, r1
    3386:	d008      	beq.n	339a <EIC_Handler+0x36>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3388:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    338a:	4a09      	ldr	r2, [pc, #36]	; (33b0 <EIC_Handler+0x4c>)
    338c:	009b      	lsls	r3, r3, #2
    338e:	58aa      	ldr	r2, [r5, r2]
    3390:	589b      	ldr	r3, [r3, r2]
    3392:	9201      	str	r2, [sp, #4]
    3394:	2b00      	cmp	r3, #0
    3396:	d000      	beq.n	339a <EIC_Handler+0x36>
				_extint_dev.callbacks[_current_channel]();
    3398:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    339a:	7823      	ldrb	r3, [r4, #0]
    339c:	3301      	adds	r3, #1
    339e:	7023      	strb	r3, [r4, #0]
    33a0:	e7e8      	b.n	3374 <EIC_Handler+0x10>
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	0000a77e 	.word	0x0000a77e
    33a8:	00000234 	.word	0x00000234
    33ac:	40001800 	.word	0x40001800
    33b0:	000001c0 	.word	0x000001c0

000033b4 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    33b4:	4b01      	ldr	r3, [pc, #4]	; (33bc <extint_is_syncing+0x8>)
    33b6:	7858      	ldrb	r0, [r3, #1]
    33b8:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
    33ba:	4770      	bx	lr
    33bc:	40001800 	.word	0x40001800

000033c0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    33c0:	2302      	movs	r3, #2
    33c2:	4a05      	ldr	r2, [pc, #20]	; (33d8 <_extint_enable+0x18>)
{
    33c4:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    33c6:	7811      	ldrb	r1, [r2, #0]
    33c8:	430b      	orrs	r3, r1
    33ca:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
    33cc:	4b03      	ldr	r3, [pc, #12]	; (33dc <_extint_enable+0x1c>)
    33ce:	447b      	add	r3, pc
    33d0:	4798      	blx	r3
    33d2:	2800      	cmp	r0, #0
    33d4:	d1fa      	bne.n	33cc <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    33d6:	bd10      	pop	{r4, pc}
    33d8:	40001800 	.word	0x40001800
    33dc:	ffffffe3 	.word	0xffffffe3

000033e0 <_system_extint_init>:
{
    33e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
			PM->APBAMASK.reg |= mask;
    33e2:	2340      	movs	r3, #64	; 0x40
    33e4:	4a16      	ldr	r2, [pc, #88]	; (3440 <_system_extint_init+0x60>)
    33e6:	4c17      	ldr	r4, [pc, #92]	; (3444 <_system_extint_init+0x64>)
    33e8:	6991      	ldr	r1, [r2, #24]
    33ea:	447c      	add	r4, pc
    33ec:	430b      	orrs	r3, r1
    33ee:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    33f0:	2302      	movs	r3, #2
    33f2:	a903      	add	r1, sp, #12
    33f4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    33f6:	4b14      	ldr	r3, [pc, #80]	; (3448 <_system_extint_init+0x68>)
    33f8:	2005      	movs	r0, #5
    33fa:	58e3      	ldr	r3, [r4, r3]
    33fc:	9301      	str	r3, [sp, #4]
    33fe:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    3400:	4b12      	ldr	r3, [pc, #72]	; (344c <_system_extint_init+0x6c>)
    3402:	2005      	movs	r0, #5
    3404:	58e3      	ldr	r3, [r4, r3]
    3406:	9301      	str	r3, [sp, #4]
    3408:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    340a:	2301      	movs	r3, #1
    340c:	4a10      	ldr	r2, [pc, #64]	; (3450 <_system_extint_init+0x70>)
    340e:	7811      	ldrb	r1, [r2, #0]
    3410:	430b      	orrs	r3, r1
    3412:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
    3414:	4b0f      	ldr	r3, [pc, #60]	; (3454 <_system_extint_init+0x74>)
    3416:	447b      	add	r3, pc
    3418:	4798      	blx	r3
    341a:	2800      	cmp	r0, #0
    341c:	d1fa      	bne.n	3414 <_system_extint_init+0x34>
		_extint_dev.callbacks[j] = NULL;
    341e:	4b0e      	ldr	r3, [pc, #56]	; (3458 <_system_extint_init+0x78>)
    3420:	58e3      	ldr	r3, [r4, r3]
    3422:	9301      	str	r3, [sp, #4]
    3424:	0003      	movs	r3, r0
    3426:	9a01      	ldr	r2, [sp, #4]
    3428:	5013      	str	r3, [r2, r0]
    342a:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    342c:	2840      	cmp	r0, #64	; 0x40
    342e:	d1fa      	bne.n	3426 <_system_extint_init+0x46>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3430:	2210      	movs	r2, #16
    3432:	4b0a      	ldr	r3, [pc, #40]	; (345c <_system_extint_init+0x7c>)
    3434:	601a      	str	r2, [r3, #0]
	_extint_enable();
    3436:	4b0a      	ldr	r3, [pc, #40]	; (3460 <_system_extint_init+0x80>)
    3438:	447b      	add	r3, pc
    343a:	4798      	blx	r3
}
    343c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	40000400 	.word	0x40000400
    3444:	0000a6fe 	.word	0x0000a6fe
    3448:	000000d8 	.word	0x000000d8
    344c:	0000027c 	.word	0x0000027c
    3450:	40001800 	.word	0x40001800
    3454:	ffffff9b 	.word	0xffffff9b
    3458:	000001c0 	.word	0x000001c0
    345c:	e000e100 	.word	0xe000e100
    3460:	ffffff85 	.word	0xffffff85

00003464 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3464:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3466:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    3468:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    346a:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    346c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    346e:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3470:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    3472:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    3474:	72c3      	strb	r3, [r0, #11]
}
    3476:	4770      	bx	lr

00003478 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3478:	b5f0      	push	{r4, r5, r6, r7, lr}
    347a:	000d      	movs	r5, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    347c:	2600      	movs	r6, #0
    347e:	b085      	sub	sp, #20
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3480:	792a      	ldrb	r2, [r5, #4]
    3482:	a903      	add	r1, sp, #12
    3484:	704e      	strb	r6, [r1, #1]
	config->powersave    = false;
    3486:	70ce      	strb	r6, [r1, #3]
    3488:	700a      	strb	r2, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    348a:	7a2a      	ldrb	r2, [r5, #8]
{
    348c:	4b17      	ldr	r3, [pc, #92]	; (34ec <extint_chan_set_config+0x74>)
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    348e:	708a      	strb	r2, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3490:	4a17      	ldr	r2, [pc, #92]	; (34f0 <extint_chan_set_config+0x78>)
{
    3492:	447b      	add	r3, pc
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3494:	589b      	ldr	r3, [r3, r2]
{
    3496:	0004      	movs	r4, r0
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3498:	7828      	ldrb	r0, [r5, #0]
    349a:	9301      	str	r3, [sp, #4]
    349c:	4798      	blx	r3
		return NULL;
    349e:	0033      	movs	r3, r6
	if (eic_index < EIC_INST_NUM) {
    34a0:	2c1f      	cmp	r4, #31
    34a2:	d800      	bhi.n	34a6 <extint_chan_set_config+0x2e>
		return eics[eic_index];
    34a4:	4b13      	ldr	r3, [pc, #76]	; (34f4 <extint_chan_set_config+0x7c>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    34a6:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    34a8:	7aaa      	ldrb	r2, [r5, #10]
	uint32_t config_pos = (4 * (channel % 8));
    34aa:	4021      	ands	r1, r4
    34ac:	0089      	lsls	r1, r1, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    34ae:	7aee      	ldrb	r6, [r5, #11]
	if (config->filter_input_signal) {
    34b0:	2a00      	cmp	r2, #0
    34b2:	d001      	beq.n	34b8 <extint_chan_set_config+0x40>
    34b4:	2208      	movs	r2, #8
    34b6:	4316      	orrs	r6, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    34b8:	270f      	movs	r7, #15
			(new_config << config_pos);
    34ba:	408e      	lsls	r6, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    34bc:	408f      	lsls	r7, r1
			(new_config << config_pos);
    34be:	0031      	movs	r1, r6
    34c0:	08e2      	lsrs	r2, r4, #3
    34c2:	0092      	lsls	r2, r2, #2
    34c4:	189a      	adds	r2, r3, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    34c6:	6990      	ldr	r0, [r2, #24]
    34c8:	43b8      	bics	r0, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    34ca:	4301      	orrs	r1, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    34cc:	6191      	str	r1, [r2, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    34ce:	7a69      	ldrb	r1, [r5, #9]
    34d0:	2201      	movs	r2, #1
    34d2:	2900      	cmp	r1, #0
    34d4:	d005      	beq.n	34e2 <extint_chan_set_config+0x6a>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    34d6:	40a2      	lsls	r2, r4
    34d8:	6959      	ldr	r1, [r3, #20]
    34da:	430a      	orrs	r2, r1
    34dc:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    34de:	b005      	add	sp, #20
    34e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    34e2:	40a2      	lsls	r2, r4
    34e4:	6959      	ldr	r1, [r3, #20]
    34e6:	4391      	bics	r1, r2
    34e8:	6159      	str	r1, [r3, #20]
}
    34ea:	e7f8      	b.n	34de <extint_chan_set_config+0x66>
    34ec:	0000a656 	.word	0x0000a656
    34f0:	00000304 	.word	0x00000304
    34f4:	40001800 	.word	0x40001800

000034f8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    34f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34fa:	2480      	movs	r4, #128	; 0x80
    34fc:	ab03      	add	r3, sp, #12
    34fe:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3500:	780c      	ldrb	r4, [r1, #0]
{
    3502:	4a06      	ldr	r2, [pc, #24]	; (351c <port_pin_set_config+0x24>)
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3504:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3506:	784c      	ldrb	r4, [r1, #1]
{
    3508:	447a      	add	r2, pc
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    350a:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    350c:	7889      	ldrb	r1, [r1, #2]
    350e:	70d9      	strb	r1, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3510:	0019      	movs	r1, r3
    3512:	4b03      	ldr	r3, [pc, #12]	; (3520 <port_pin_set_config+0x28>)
    3514:	58d3      	ldr	r3, [r2, r3]
    3516:	9301      	str	r3, [sp, #4]
    3518:	4798      	blx	r3
}
    351a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    351c:	0000a5e0 	.word	0x0000a5e0
    3520:	00000304 	.word	0x00000304

00003524 <rtc_calendar_is_syncing>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3524:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3526:	7a98      	ldrb	r0, [r3, #10]
    3528:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
    352a:	4770      	bx	lr

0000352c <rtc_calendar_enable>:
    352c:	2208      	movs	r2, #8
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    352e:	b570      	push	{r4, r5, r6, lr}
    3530:	0005      	movs	r5, r0
    3532:	4b07      	ldr	r3, [pc, #28]	; (3550 <rtc_calendar_enable+0x24>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3534:	6804      	ldr	r4, [r0, #0]
    3536:	601a      	str	r2, [r3, #0]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <rtc_calendar_enable+0x28>)
    353a:	0028      	movs	r0, r5
    353c:	447b      	add	r3, pc
    353e:	4798      	blx	r3
    3540:	2800      	cmp	r0, #0
    3542:	d1f9      	bne.n	3538 <rtc_calendar_enable+0xc>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3544:	2302      	movs	r3, #2
    3546:	8822      	ldrh	r2, [r4, #0]
    3548:	4313      	orrs	r3, r2
    354a:	8023      	strh	r3, [r4, #0]
}
    354c:	bd70      	pop	{r4, r5, r6, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	e000e100 	.word	0xe000e100
    3554:	ffffffe5 	.word	0xffffffe5

00003558 <rtc_calendar_disable>:
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3558:	2208      	movs	r2, #8
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    355a:	b570      	push	{r4, r5, r6, lr}
    355c:	0005      	movs	r5, r0
    355e:	4b08      	ldr	r3, [pc, #32]	; (3580 <rtc_calendar_disable+0x28>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3560:	6804      	ldr	r4, [r0, #0]
    3562:	67da      	str	r2, [r3, #124]	; 0x7c

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3564:	4b07      	ldr	r3, [pc, #28]	; (3584 <rtc_calendar_disable+0x2c>)
    3566:	0028      	movs	r0, r5
    3568:	447b      	add	r3, pc
    356a:	4798      	blx	r3
    356c:	2800      	cmp	r0, #0
    356e:	d1f9      	bne.n	3564 <rtc_calendar_disable+0xc>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3570:	23c1      	movs	r3, #193	; 0xc1
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3572:	2202      	movs	r2, #2
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3574:	71a3      	strb	r3, [r4, #6]
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    3576:	7223      	strb	r3, [r4, #8]
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    3578:	8823      	ldrh	r3, [r4, #0]
    357a:	4393      	bics	r3, r2
    357c:	8023      	strh	r3, [r4, #0]
}
    357e:	bd70      	pop	{r4, r5, r6, pc}
    3580:	e000e104 	.word	0xe000e104
    3584:	ffffffb9 	.word	0xffffffb9

00003588 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3588:	b537      	push	{r0, r1, r2, r4, r5, lr}
    358a:	4b0b      	ldr	r3, [pc, #44]	; (35b8 <rtc_calendar_reset+0x30>)
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    358c:	4a0b      	ldr	r2, [pc, #44]	; (35bc <rtc_calendar_reset+0x34>)
{
    358e:	447b      	add	r3, pc
	rtc_calendar_disable(module);
    3590:	589b      	ldr	r3, [r3, r2]
{
    3592:	0004      	movs	r4, r0
	rtc_calendar_disable(module);
    3594:	9301      	str	r3, [sp, #4]
	Rtc *const rtc_module = module->hw;
    3596:	6805      	ldr	r5, [r0, #0]
	rtc_calendar_disable(module);
    3598:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    359a:	2300      	movs	r3, #0
    359c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    359e:	8263      	strh	r3, [r4, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
    35a0:	4b07      	ldr	r3, [pc, #28]	; (35c0 <rtc_calendar_reset+0x38>)
    35a2:	0020      	movs	r0, r4
    35a4:	447b      	add	r3, pc
    35a6:	4798      	blx	r3
    35a8:	2800      	cmp	r0, #0
    35aa:	d1f9      	bne.n	35a0 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    35ac:	2301      	movs	r3, #1
    35ae:	882a      	ldrh	r2, [r5, #0]
    35b0:	4313      	orrs	r3, r2
    35b2:	802b      	strh	r3, [r5, #0]
}
    35b4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	0000a55a 	.word	0x0000a55a
    35bc:	000001a0 	.word	0x000001a0
    35c0:	ffffff7d 	.word	0xffffff7d

000035c4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    35c4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    35c6:	88cb      	ldrh	r3, [r1, #6]
    35c8:	88c2      	ldrh	r2, [r0, #6]

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    35ca:	790c      	ldrb	r4, [r1, #4]
	register_value = (time->year - module->year_init_value) <<
    35cc:	1a9a      	subs	r2, r3, r2
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    35ce:	794b      	ldrb	r3, [r1, #5]
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    35d0:	0464      	lsls	r4, r4, #17
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    35d2:	059b      	lsls	r3, r3, #22

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    35d4:	4323      	orrs	r3, r4
    35d6:	788c      	ldrb	r4, [r1, #2]
	register_value = (time->year - module->year_init_value) <<
    35d8:	0692      	lsls	r2, r2, #26
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    35da:	0324      	lsls	r4, r4, #12
    35dc:	4323      	orrs	r3, r4
    35de:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    35e0:	7902      	ldrb	r2, [r0, #4]
    35e2:	2a00      	cmp	r2, #0
    35e4:	d105      	bne.n	35f2 <rtc_calendar_time_to_register_value+0x2e>
    35e6:	78ca      	ldrb	r2, [r1, #3]
    35e8:	2a00      	cmp	r2, #0
    35ea:	d002      	beq.n	35f2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    35ec:	2280      	movs	r2, #128	; 0x80
    35ee:	0252      	lsls	r2, r2, #9
    35f0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    35f2:	7848      	ldrb	r0, [r1, #1]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    35f4:	780a      	ldrb	r2, [r1, #0]
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    35f6:	0180      	lsls	r0, r0, #6
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    35f8:	4310      	orrs	r0, r2
    35fa:	4318      	orrs	r0, r3

	return register_value;
}
    35fc:	bd10      	pop	{r4, pc}
	...

00003600 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3600:	4b0e      	ldr	r3, [pc, #56]	; (363c <rtc_calendar_set_alarm+0x3c>)
    3602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3604:	447b      	add	r3, pc
    3606:	0005      	movs	r5, r0
    3608:	000e      	movs	r6, r1
    360a:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    360c:	2017      	movs	r0, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    360e:	2a01      	cmp	r2, #1
    3610:	d813      	bhi.n	363a <rtc_calendar_set_alarm+0x3a>
	Rtc *const rtc_module = module->hw;
    3612:	682a      	ldr	r2, [r5, #0]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3614:	0028      	movs	r0, r5
	Rtc *const rtc_module = module->hw;
    3616:	9200      	str	r2, [sp, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3618:	4a09      	ldr	r2, [pc, #36]	; (3640 <rtc_calendar_set_alarm+0x40>)
    361a:	589b      	ldr	r3, [r3, r2]
    361c:	9301      	str	r3, [sp, #4]
    361e:	4798      	blx	r3
    3620:	0007      	movs	r7, r0

	while (rtc_calendar_is_syncing(module)) {
    3622:	4b08      	ldr	r3, [pc, #32]	; (3644 <rtc_calendar_set_alarm+0x44>)
    3624:	0028      	movs	r0, r5
    3626:	447b      	add	r3, pc
    3628:	4798      	blx	r3
    362a:	2800      	cmp	r0, #0
    362c:	d1f9      	bne.n	3622 <rtc_calendar_set_alarm+0x22>
    362e:	9b00      	ldr	r3, [sp, #0]
    3630:	00e4      	lsls	r4, r4, #3
    3632:	191c      	adds	r4, r3, r4
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3634:	61a7      	str	r7, [r4, #24]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3636:	7a33      	ldrb	r3, [r6, #8]
    3638:	7723      	strb	r3, [r4, #28]

	return STATUS_OK;
}
    363a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    363c:	0000a4e4 	.word	0x0000a4e4
    3640:	000002dc 	.word	0x000002dc
    3644:	fffffefb 	.word	0xfffffefb

00003648 <rtc_calendar_init>:
{
    3648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    364a:	2320      	movs	r3, #32
    364c:	0015      	movs	r5, r2
    364e:	4a20      	ldr	r2, [pc, #128]	; (36d0 <rtc_calendar_init+0x88>)
	module->hw = hw;
    3650:	6001      	str	r1, [r0, #0]
    3652:	6991      	ldr	r1, [r2, #24]
{
    3654:	0004      	movs	r4, r0
    3656:	430b      	orrs	r3, r1
    3658:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    365a:	2302      	movs	r3, #2
    365c:	a903      	add	r1, sp, #12
{
    365e:	4e1d      	ldr	r6, [pc, #116]	; (36d4 <rtc_calendar_init+0x8c>)
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3660:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3662:	4b1d      	ldr	r3, [pc, #116]	; (36d8 <rtc_calendar_init+0x90>)
{
    3664:	447e      	add	r6, pc
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3666:	58f3      	ldr	r3, [r6, r3]
    3668:	2004      	movs	r0, #4
    366a:	9301      	str	r3, [sp, #4]
    366c:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    366e:	4b1b      	ldr	r3, [pc, #108]	; (36dc <rtc_calendar_init+0x94>)
    3670:	2004      	movs	r0, #4
    3672:	58f3      	ldr	r3, [r6, r3]
    3674:	9301      	str	r3, [sp, #4]
    3676:	4798      	blx	r3
	rtc_calendar_reset(module);
    3678:	4b19      	ldr	r3, [pc, #100]	; (36e0 <rtc_calendar_init+0x98>)
    367a:	0020      	movs	r0, r4
    367c:	58f3      	ldr	r3, [r6, r3]
    367e:	9301      	str	r3, [sp, #4]
    3680:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    3682:	7928      	ldrb	r0, [r5, #4]
	Rtc *const rtc_module = module->hw;
    3684:	6822      	ldr	r2, [r4, #0]
	module->clock_24h           = config->clock_24h;
    3686:	7120      	strb	r0, [r4, #4]
	module->continuously_update = config->continuously_update;
    3688:	78e9      	ldrb	r1, [r5, #3]
    368a:	7161      	strb	r1, [r4, #5]
	module->year_init_value     = config->year_init_value;
    368c:	88eb      	ldrh	r3, [r5, #6]
    368e:	80e3      	strh	r3, [r4, #6]
	_rtc_instance[0] = module;
    3690:	4b14      	ldr	r3, [pc, #80]	; (36e4 <rtc_calendar_init+0x9c>)
    3692:	58f3      	ldr	r3, [r6, r3]
    3694:	601c      	str	r4, [r3, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3696:	882b      	ldrh	r3, [r5, #0]
	if (!(config->clock_24h)) {
    3698:	2800      	cmp	r0, #0
    369a:	d017      	beq.n	36cc <rtc_calendar_init+0x84>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    369c:	2008      	movs	r0, #8
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    369e:	4303      	orrs	r3, r0
	if (config->clear_on_match) {
    36a0:	78a8      	ldrb	r0, [r5, #2]
    36a2:	2800      	cmp	r0, #0
    36a4:	d001      	beq.n	36aa <rtc_calendar_init+0x62>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    36a6:	2080      	movs	r0, #128	; 0x80
    36a8:	4303      	orrs	r3, r0
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    36aa:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    36ac:	2900      	cmp	r1, #0
    36ae:	d004      	beq.n	36ba <rtc_calendar_init+0x72>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    36b0:	2380      	movs	r3, #128	; 0x80
    36b2:	8851      	ldrh	r1, [r2, #2]
    36b4:	01db      	lsls	r3, r3, #7
    36b6:	430b      	orrs	r3, r1
    36b8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    36ba:	0029      	movs	r1, r5
    36bc:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <rtc_calendar_init+0xa0>)
    36be:	3108      	adds	r1, #8
    36c0:	58f3      	ldr	r3, [r6, r3]
    36c2:	2200      	movs	r2, #0
    36c4:	0020      	movs	r0, r4
    36c6:	9301      	str	r3, [sp, #4]
    36c8:	4798      	blx	r3
}
    36ca:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    36cc:	2048      	movs	r0, #72	; 0x48
    36ce:	e7e6      	b.n	369e <rtc_calendar_init+0x56>
    36d0:	40000400 	.word	0x40000400
    36d4:	0000a484 	.word	0x0000a484
    36d8:	000000d8 	.word	0x000000d8
    36dc:	0000027c 	.word	0x0000027c
    36e0:	000001cc 	.word	0x000001cc
    36e4:	00000018 	.word	0x00000018
    36e8:	000002f0 	.word	0x000002f0

000036ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    36ec:	b570      	push	{r4, r5, r6, lr}
    36ee:	4b0f      	ldr	r3, [pc, #60]	; (372c <RTC_Handler+0x40>)
	struct rtc_module *module = _rtc_instance[instance_index];
    36f0:	4a0f      	ldr	r2, [pc, #60]	; (3730 <RTC_Handler+0x44>)
{
    36f2:	447b      	add	r3, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    36f4:	589b      	ldr	r3, [r3, r2]
    36f6:	681b      	ldr	r3, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    36f8:	8a59      	ldrh	r1, [r3, #18]
	Rtc *const rtc_module = module->hw;
    36fa:	681c      	ldr	r4, [r3, #0]
	callback_mask &= module->registered_callback;
    36fc:	8a1a      	ldrh	r2, [r3, #16]
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    36fe:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
    3700:	400a      	ands	r2, r1
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    3702:	79e1      	ldrb	r1, [r4, #7]
    3704:	4001      	ands	r1, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    3706:	b248      	sxtb	r0, r1
    3708:	2800      	cmp	r0, #0
    370a:	da06      	bge.n	371a <RTC_Handler+0x2e>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    370c:	0792      	lsls	r2, r2, #30
    370e:	d501      	bpl.n	3714 <RTC_Handler+0x28>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    3710:	68db      	ldr	r3, [r3, #12]
    3712:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    3714:	2380      	movs	r3, #128	; 0x80
    3716:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    3718:	bd70      	pop	{r4, r5, r6, pc}
    371a:	2501      	movs	r5, #1
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    371c:	4229      	tst	r1, r5
    371e:	d0fb      	beq.n	3718 <RTC_Handler+0x2c>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    3720:	422a      	tst	r2, r5
    3722:	d001      	beq.n	3728 <RTC_Handler+0x3c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    3724:	689b      	ldr	r3, [r3, #8]
    3726:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    3728:	7225      	strb	r5, [r4, #8]
}
    372a:	e7f5      	b.n	3718 <RTC_Handler+0x2c>
    372c:	0000a3f6 	.word	0x0000a3f6
    3730:	00000018 	.word	0x00000018

00003734 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3734:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3736:	0849      	lsrs	r1, r1, #1
{
    3738:	0004      	movs	r4, r0
    373a:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    373c:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
    373e:	42a1      	cmp	r1, r4
    3740:	d201      	bcs.n	3746 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3742:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3744:	0003      	movs	r3, r0
    3746:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
    3748:	1b09      	subs	r1, r1, r4
		baud_calculated++;
    374a:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
    374c:	428c      	cmp	r4, r1
    374e:	d9f9      	bls.n	3744 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3750:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3752:	2bff      	cmp	r3, #255	; 0xff
    3754:	d8f5      	bhi.n	3742 <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
    3756:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    3758:	2000      	movs	r0, #0
    375a:	e7f2      	b.n	3742 <_sercom_get_sync_baud_val+0xe>

0000375c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    375c:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    375e:	4b12      	ldr	r3, [pc, #72]	; (37a8 <sercom_set_gclk_generator+0x4c>)
{
    3760:	4d12      	ldr	r5, [pc, #72]	; (37ac <sercom_set_gclk_generator+0x50>)
	if (!_sercom_config.generator_is_set || force_change) {
    3762:	447b      	add	r3, pc
    3764:	781a      	ldrb	r2, [r3, #0]
{
    3766:	447d      	add	r5, pc
    3768:	b085      	sub	sp, #20
    376a:	0004      	movs	r4, r0
	if (!_sercom_config.generator_is_set || force_change) {
    376c:	2a00      	cmp	r2, #0
    376e:	d001      	beq.n	3774 <sercom_set_gclk_generator+0x18>
    3770:	2900      	cmp	r1, #0
    3772:	d013      	beq.n	379c <sercom_set_gclk_generator+0x40>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    3774:	a903      	add	r1, sp, #12
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3776:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <sercom_set_gclk_generator+0x54>)
		gclk_chan_conf.source_generator = generator_source;
    3778:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    377a:	58eb      	ldr	r3, [r5, r3]
    377c:	2013      	movs	r0, #19
    377e:	9301      	str	r3, [sp, #4]
    3780:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3782:	4b0c      	ldr	r3, [pc, #48]	; (37b4 <sercom_set_gclk_generator+0x58>)
    3784:	2013      	movs	r0, #19
    3786:	58eb      	ldr	r3, [r5, r3]
    3788:	9301      	str	r3, [sp, #4]
    378a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    378c:	2201      	movs	r2, #1

		return STATUS_OK;
    378e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    3790:	4b09      	ldr	r3, [pc, #36]	; (37b8 <sercom_set_gclk_generator+0x5c>)
    3792:	447b      	add	r3, pc
    3794:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3796:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3798:	b005      	add	sp, #20
    379a:	bd30      	pop	{r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    379c:	785b      	ldrb	r3, [r3, #1]
		return STATUS_OK;
    379e:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    37a0:	42a3      	cmp	r3, r4
    37a2:	d0f9      	beq.n	3798 <sercom_set_gclk_generator+0x3c>
	return STATUS_ERR_ALREADY_INITIALIZED;
    37a4:	201d      	movs	r0, #29
    37a6:	e7f7      	b.n	3798 <sercom_set_gclk_generator+0x3c>
    37a8:	1fffd54f 	.word	0x1fffd54f
    37ac:	0000a382 	.word	0x0000a382
    37b0:	000000d8 	.word	0x000000d8
    37b4:	0000027c 	.word	0x0000027c
    37b8:	1fffd51f 	.word	0x1fffd51f

000037bc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    37bc:	4a39      	ldr	r2, [pc, #228]	; (38a4 <_sercom_get_default_pad+0xe8>)
{
    37be:	0003      	movs	r3, r0
    37c0:	b500      	push	{lr}
    37c2:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    37c4:	4293      	cmp	r3, r2
    37c6:	d033      	beq.n	3830 <_sercom_get_default_pad+0x74>
    37c8:	d807      	bhi.n	37da <_sercom_get_default_pad+0x1e>
    37ca:	4a37      	ldr	r2, [pc, #220]	; (38a8 <_sercom_get_default_pad+0xec>)
    37cc:	4293      	cmp	r3, r2
    37ce:	d014      	beq.n	37fa <_sercom_get_default_pad+0x3e>
    37d0:	4a36      	ldr	r2, [pc, #216]	; (38ac <_sercom_get_default_pad+0xf0>)
    37d2:	4293      	cmp	r3, r2
    37d4:	d01f      	beq.n	3816 <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    37d6:	2300      	movs	r3, #0
    37d8:	e017      	b.n	380a <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
    37da:	4a35      	ldr	r2, [pc, #212]	; (38b0 <_sercom_get_default_pad+0xf4>)
    37dc:	4293      	cmp	r3, r2
    37de:	d03a      	beq.n	3856 <_sercom_get_default_pad+0x9a>
    37e0:	4a34      	ldr	r2, [pc, #208]	; (38b4 <_sercom_get_default_pad+0xf8>)
    37e2:	4293      	cmp	r3, r2
    37e4:	d044      	beq.n	3870 <_sercom_get_default_pad+0xb4>
    37e6:	4a34      	ldr	r2, [pc, #208]	; (38b8 <_sercom_get_default_pad+0xfc>)
    37e8:	4293      	cmp	r3, r2
    37ea:	d1f4      	bne.n	37d6 <_sercom_get_default_pad+0x1a>
	return 0;
    37ec:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37ee:	2903      	cmp	r1, #3
    37f0:	d80b      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    37f2:	f002 ff51 	bl	6698 <__gnu_thumb1_case_uqi>
    37f6:	2a50      	.short	0x2a50
    37f8:	2e2c      	.short	0x2e2c
	return 0;
    37fa:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    37fc:	2903      	cmp	r1, #3
    37fe:	d804      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    3800:	f002 ff4a 	bl	6698 <__gnu_thumb1_case_uqi>
    3804:	07050243 	.word	0x07050243
    3808:	4b2c      	ldr	r3, [pc, #176]	; (38bc <_sercom_get_default_pad+0x100>)
}
    380a:	0018      	movs	r0, r3
    380c:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    380e:	4b2c      	ldr	r3, [pc, #176]	; (38c0 <_sercom_get_default_pad+0x104>)
    3810:	e7fb      	b.n	380a <_sercom_get_default_pad+0x4e>
    3812:	4b2c      	ldr	r3, [pc, #176]	; (38c4 <_sercom_get_default_pad+0x108>)
    3814:	e7f9      	b.n	380a <_sercom_get_default_pad+0x4e>
	return 0;
    3816:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3818:	2903      	cmp	r1, #3
    381a:	d8f6      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    381c:	f002 ff3c 	bl	6698 <__gnu_thumb1_case_uqi>
    3820:	06040237 	.word	0x06040237
    3824:	4b28      	ldr	r3, [pc, #160]	; (38c8 <_sercom_get_default_pad+0x10c>)
    3826:	e7f0      	b.n	380a <_sercom_get_default_pad+0x4e>
    3828:	4b28      	ldr	r3, [pc, #160]	; (38cc <_sercom_get_default_pad+0x110>)
    382a:	e7ee      	b.n	380a <_sercom_get_default_pad+0x4e>
    382c:	4b28      	ldr	r3, [pc, #160]	; (38d0 <_sercom_get_default_pad+0x114>)
    382e:	e7ec      	b.n	380a <_sercom_get_default_pad+0x4e>
	return 0;
    3830:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3832:	2903      	cmp	r1, #3
    3834:	d8e9      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    3836:	f002 ff2f 	bl	6698 <__gnu_thumb1_case_uqi>
    383a:	022c      	.short	0x022c
    383c:	0604      	.short	0x0604
    383e:	4b25      	ldr	r3, [pc, #148]	; (38d4 <_sercom_get_default_pad+0x118>)
    3840:	e7e3      	b.n	380a <_sercom_get_default_pad+0x4e>
    3842:	4b25      	ldr	r3, [pc, #148]	; (38d8 <_sercom_get_default_pad+0x11c>)
    3844:	e7e1      	b.n	380a <_sercom_get_default_pad+0x4e>
    3846:	4b25      	ldr	r3, [pc, #148]	; (38dc <_sercom_get_default_pad+0x120>)
    3848:	e7df      	b.n	380a <_sercom_get_default_pad+0x4e>
    384a:	4b25      	ldr	r3, [pc, #148]	; (38e0 <_sercom_get_default_pad+0x124>)
    384c:	e7dd      	b.n	380a <_sercom_get_default_pad+0x4e>
    384e:	4b25      	ldr	r3, [pc, #148]	; (38e4 <_sercom_get_default_pad+0x128>)
    3850:	e7db      	b.n	380a <_sercom_get_default_pad+0x4e>
    3852:	4b25      	ldr	r3, [pc, #148]	; (38e8 <_sercom_get_default_pad+0x12c>)
    3854:	e7d9      	b.n	380a <_sercom_get_default_pad+0x4e>
	return 0;
    3856:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3858:	2903      	cmp	r1, #3
    385a:	d8d6      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    385c:	f002 ff1c 	bl	6698 <__gnu_thumb1_case_uqi>
    3860:	0604021d 	.word	0x0604021d
    3864:	4b21      	ldr	r3, [pc, #132]	; (38ec <_sercom_get_default_pad+0x130>)
    3866:	e7d0      	b.n	380a <_sercom_get_default_pad+0x4e>
    3868:	4b21      	ldr	r3, [pc, #132]	; (38f0 <_sercom_get_default_pad+0x134>)
    386a:	e7ce      	b.n	380a <_sercom_get_default_pad+0x4e>
    386c:	4b21      	ldr	r3, [pc, #132]	; (38f4 <_sercom_get_default_pad+0x138>)
    386e:	e7cc      	b.n	380a <_sercom_get_default_pad+0x4e>
	return 0;
    3870:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3872:	2903      	cmp	r1, #3
    3874:	d8c9      	bhi.n	380a <_sercom_get_default_pad+0x4e>
    3876:	f002 ff0f 	bl	6698 <__gnu_thumb1_case_uqi>
    387a:	0212      	.short	0x0212
    387c:	0604      	.short	0x0604
    387e:	4b1e      	ldr	r3, [pc, #120]	; (38f8 <_sercom_get_default_pad+0x13c>)
    3880:	e7c3      	b.n	380a <_sercom_get_default_pad+0x4e>
    3882:	4b1e      	ldr	r3, [pc, #120]	; (38fc <_sercom_get_default_pad+0x140>)
    3884:	e7c1      	b.n	380a <_sercom_get_default_pad+0x4e>
    3886:	4b1e      	ldr	r3, [pc, #120]	; (3900 <_sercom_get_default_pad+0x144>)
    3888:	e7bf      	b.n	380a <_sercom_get_default_pad+0x4e>
    388a:	4b1e      	ldr	r3, [pc, #120]	; (3904 <_sercom_get_default_pad+0x148>)
    388c:	e7bd      	b.n	380a <_sercom_get_default_pad+0x4e>
    388e:	2303      	movs	r3, #3
    3890:	e7bb      	b.n	380a <_sercom_get_default_pad+0x4e>
    3892:	4b1d      	ldr	r3, [pc, #116]	; (3908 <_sercom_get_default_pad+0x14c>)
    3894:	e7b9      	b.n	380a <_sercom_get_default_pad+0x4e>
    3896:	4b1d      	ldr	r3, [pc, #116]	; (390c <_sercom_get_default_pad+0x150>)
    3898:	e7b7      	b.n	380a <_sercom_get_default_pad+0x4e>
    389a:	4b1d      	ldr	r3, [pc, #116]	; (3910 <_sercom_get_default_pad+0x154>)
    389c:	e7b5      	b.n	380a <_sercom_get_default_pad+0x4e>
    389e:	4b1d      	ldr	r3, [pc, #116]	; (3914 <_sercom_get_default_pad+0x158>)
    38a0:	e7b3      	b.n	380a <_sercom_get_default_pad+0x4e>
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	42001000 	.word	0x42001000
    38a8:	42000800 	.word	0x42000800
    38ac:	42000c00 	.word	0x42000c00
    38b0:	42001800 	.word	0x42001800
    38b4:	42001c00 	.word	0x42001c00
    38b8:	42001400 	.word	0x42001400
    38bc:	00050003 	.word	0x00050003
    38c0:	00060003 	.word	0x00060003
    38c4:	00070003 	.word	0x00070003
    38c8:	00010003 	.word	0x00010003
    38cc:	001e0003 	.word	0x001e0003
    38d0:	001f0003 	.word	0x001f0003
    38d4:	00090003 	.word	0x00090003
    38d8:	000a0003 	.word	0x000a0003
    38dc:	000b0003 	.word	0x000b0003
    38e0:	00110003 	.word	0x00110003
    38e4:	00120003 	.word	0x00120003
    38e8:	00130003 	.word	0x00130003
    38ec:	000d0003 	.word	0x000d0003
    38f0:	000e0003 	.word	0x000e0003
    38f4:	000f0003 	.word	0x000f0003
    38f8:	00170003 	.word	0x00170003
    38fc:	00180003 	.word	0x00180003
    3900:	00190003 	.word	0x00190003
    3904:	00040003 	.word	0x00040003
    3908:	00080003 	.word	0x00080003
    390c:	00100003 	.word	0x00100003
    3910:	000c0003 	.word	0x000c0003
    3914:	00160003 	.word	0x00160003

00003918 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3918:	b570      	push	{r4, r5, r6, lr}
    391a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    391c:	4669      	mov	r1, sp
    391e:	4b0a      	ldr	r3, [pc, #40]	; (3948 <_sercom_get_sercom_inst_index+0x30>)
    3920:	466a      	mov	r2, sp
    3922:	447b      	add	r3, pc
    3924:	cb70      	ldmia	r3!, {r4, r5, r6}
    3926:	c170      	stmia	r1!, {r4, r5, r6}
    3928:	cb70      	ldmia	r3!, {r4, r5, r6}
    392a:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    392c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    392e:	0099      	lsls	r1, r3, #2
    3930:	5851      	ldr	r1, [r2, r1]
    3932:	4281      	cmp	r1, r0
    3934:	d102      	bne.n	393c <_sercom_get_sercom_inst_index+0x24>
			return i;
    3936:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    3938:	b006      	add	sp, #24
    393a:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    393c:	3301      	adds	r3, #1
    393e:	2b06      	cmp	r3, #6
    3940:	d1f5      	bne.n	392e <_sercom_get_sercom_inst_index+0x16>
	return 0;
    3942:	2000      	movs	r0, #0
    3944:	e7f8      	b.n	3938 <_sercom_get_sercom_inst_index+0x20>
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	00009d02 	.word	0x00009d02

0000394c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    394c:	4770      	bx	lr
	...

00003950 <_sercom_set_handler>:
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3950:	4b0f      	ldr	r3, [pc, #60]	; (3990 <_sercom_set_handler+0x40>)
{
    3952:	4a10      	ldr	r2, [pc, #64]	; (3994 <_sercom_set_handler+0x44>)
	if (_handler_table_initialized == false) {
    3954:	447b      	add	r3, pc
    3956:	781b      	ldrb	r3, [r3, #0]
{
    3958:	447a      	add	r2, pc
    395a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (_handler_table_initialized == false) {
    395c:	2b00      	cmp	r3, #0
    395e:	d111      	bne.n	3984 <_sercom_set_handler+0x34>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    3960:	4e0d      	ldr	r6, [pc, #52]	; (3998 <_sercom_set_handler+0x48>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3962:	4c0e      	ldr	r4, [pc, #56]	; (399c <_sercom_set_handler+0x4c>)
			_sercom_instances[i] = NULL;
    3964:	5992      	ldr	r2, [r2, r6]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3966:	4d0e      	ldr	r5, [pc, #56]	; (39a0 <_sercom_set_handler+0x50>)
			_sercom_instances[i] = NULL;
    3968:	9201      	str	r2, [sp, #4]
    396a:	001a      	movs	r2, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    396c:	447c      	add	r4, pc
    396e:	447d      	add	r5, pc
			_sercom_instances[i] = NULL;
    3970:	9e01      	ldr	r6, [sp, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3972:	511d      	str	r5, [r3, r4]
			_sercom_instances[i] = NULL;
    3974:	50f2      	str	r2, [r6, r3]
    3976:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3978:	2b18      	cmp	r3, #24
    397a:	d1f9      	bne.n	3970 <_sercom_set_handler+0x20>
		}

		_handler_table_initialized = true;
    397c:	2201      	movs	r2, #1
    397e:	4b09      	ldr	r3, [pc, #36]	; (39a4 <_sercom_set_handler+0x54>)
    3980:	447b      	add	r3, pc
    3982:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3984:	4b08      	ldr	r3, [pc, #32]	; (39a8 <_sercom_set_handler+0x58>)
    3986:	0080      	lsls	r0, r0, #2
    3988:	447b      	add	r3, pc
    398a:	50c1      	str	r1, [r0, r3]
}
    398c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	1fffd35f 	.word	0x1fffd35f
    3994:	0000a190 	.word	0x0000a190
    3998:	00000194 	.word	0x00000194
    399c:	1fffd348 	.word	0x1fffd348
    39a0:	ffffffdb 	.word	0xffffffdb
    39a4:	1fffd333 	.word	0x1fffd333
    39a8:	1fffd32c 	.word	0x1fffd32c

000039ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    39ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39ae:	2209      	movs	r2, #9
    39b0:	ac02      	add	r4, sp, #8
    39b2:	7022      	strb	r2, [r4, #0]
    39b4:	3201      	adds	r2, #1
    39b6:	7062      	strb	r2, [r4, #1]
    39b8:	3201      	adds	r2, #1
    39ba:	70a2      	strb	r2, [r4, #2]
    39bc:	3201      	adds	r2, #1
    39be:	70e2      	strb	r2, [r4, #3]
    39c0:	3201      	adds	r2, #1
    39c2:	7122      	strb	r2, [r4, #4]
{
    39c4:	4b05      	ldr	r3, [pc, #20]	; (39dc <_sercom_get_interrupt_vector+0x30>)
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    39c6:	3201      	adds	r2, #1
    39c8:	7162      	strb	r2, [r4, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39ca:	4a05      	ldr	r2, [pc, #20]	; (39e0 <_sercom_get_interrupt_vector+0x34>)
{
    39cc:	447b      	add	r3, pc
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    39ce:	589b      	ldr	r3, [r3, r2]
    39d0:	9301      	str	r3, [sp, #4]
    39d2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    39d4:	5620      	ldrsb	r0, [r4, r0]
}
    39d6:	b004      	add	sp, #16
    39d8:	bd10      	pop	{r4, pc}
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	0000a11c 	.word	0x0000a11c
    39e0:	000002fc 	.word	0x000002fc

000039e4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39e4:	b510      	push	{r4, lr}
    39e6:	4b03      	ldr	r3, [pc, #12]	; (39f4 <SERCOM0_Handler+0x10>)
    39e8:	2000      	movs	r0, #0
    39ea:	447b      	add	r3, pc
    39ec:	681b      	ldr	r3, [r3, #0]
    39ee:	4798      	blx	r3
    39f0:	bd10      	pop	{r4, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	1fffd2ca 	.word	0x1fffd2ca

000039f8 <SERCOM1_Handler>:
    39f8:	b510      	push	{r4, lr}
    39fa:	4b03      	ldr	r3, [pc, #12]	; (3a08 <SERCOM1_Handler+0x10>)
    39fc:	2001      	movs	r0, #1
    39fe:	447b      	add	r3, pc
    3a00:	685b      	ldr	r3, [r3, #4]
    3a02:	4798      	blx	r3
    3a04:	bd10      	pop	{r4, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	1fffd2b6 	.word	0x1fffd2b6

00003a0c <SERCOM2_Handler>:
    3a0c:	b510      	push	{r4, lr}
    3a0e:	4b03      	ldr	r3, [pc, #12]	; (3a1c <SERCOM2_Handler+0x10>)
    3a10:	2002      	movs	r0, #2
    3a12:	447b      	add	r3, pc
    3a14:	689b      	ldr	r3, [r3, #8]
    3a16:	4798      	blx	r3
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	46c0      	nop			; (mov r8, r8)
    3a1c:	1fffd2a2 	.word	0x1fffd2a2

00003a20 <SERCOM3_Handler>:
    3a20:	b510      	push	{r4, lr}
    3a22:	4b03      	ldr	r3, [pc, #12]	; (3a30 <SERCOM3_Handler+0x10>)
    3a24:	2003      	movs	r0, #3
    3a26:	447b      	add	r3, pc
    3a28:	68db      	ldr	r3, [r3, #12]
    3a2a:	4798      	blx	r3
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	1fffd28e 	.word	0x1fffd28e

00003a34 <SERCOM4_Handler>:
    3a34:	b510      	push	{r4, lr}
    3a36:	4b03      	ldr	r3, [pc, #12]	; (3a44 <SERCOM4_Handler+0x10>)
    3a38:	2004      	movs	r0, #4
    3a3a:	447b      	add	r3, pc
    3a3c:	691b      	ldr	r3, [r3, #16]
    3a3e:	4798      	blx	r3
    3a40:	bd10      	pop	{r4, pc}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	1fffd27a 	.word	0x1fffd27a

00003a48 <SERCOM5_Handler>:
    3a48:	b510      	push	{r4, lr}
    3a4a:	4b03      	ldr	r3, [pc, #12]	; (3a58 <SERCOM5_Handler+0x10>)
    3a4c:	2005      	movs	r0, #5
    3a4e:	447b      	add	r3, pc
    3a50:	695b      	ldr	r3, [r3, #20]
    3a52:	4798      	blx	r3
    3a54:	bd10      	pop	{r4, pc}
    3a56:	46c0      	nop			; (mov r8, r8)
    3a58:	1fffd266 	.word	0x1fffd266

00003a5c <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a5c:	6803      	ldr	r3, [r0, #0]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3a5e:	2005      	movs	r0, #5
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a60:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3a62:	07d2      	lsls	r2, r2, #31
    3a64:	d503      	bpl.n	3a6e <spi_write+0x12>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
    3a66:	2000      	movs	r0, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a68:	05c9      	lsls	r1, r1, #23
    3a6a:	0dc9      	lsrs	r1, r1, #23
    3a6c:	6299      	str	r1, [r3, #40]	; 0x28
}
    3a6e:	4770      	bx	lr

00003a70 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3a70:	b530      	push	{r4, r5, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3a72:	2404      	movs	r4, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    3a74:	6803      	ldr	r3, [r0, #0]
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3a76:	2210      	movs	r2, #16
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a78:	7e1d      	ldrb	r5, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    3a7a:	4225      	tst	r5, r4
    3a7c:	d00c      	beq.n	3a98 <spi_read+0x28>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a7e:	8b5d      	ldrh	r5, [r3, #26]
	enum status_code retval = STATUS_OK;
    3a80:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a82:	4225      	tst	r5, r4
    3a84:	d001      	beq.n	3a8a <spi_read+0x1a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3a86:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    3a88:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a8a:	7980      	ldrb	r0, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a8e:	2801      	cmp	r0, #1
    3a90:	d104      	bne.n	3a9c <spi_read+0x2c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a92:	05db      	lsls	r3, r3, #23
    3a94:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a96:	800b      	strh	r3, [r1, #0]
	}

	return retval;
}
    3a98:	0010      	movs	r0, r2
    3a9a:	bd30      	pop	{r4, r5, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a9c:	b2db      	uxtb	r3, r3
    3a9e:	e7fa      	b.n	3a96 <spi_read+0x26>

00003aa0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa2:	0005      	movs	r5, r0
    3aa4:	4b73      	ldr	r3, [pc, #460]	; (3c74 <spi_init+0x1d4>)
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3aa6:	6029      	str	r1, [r5, #0]
{
    3aa8:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3aaa:	680a      	ldr	r2, [r1, #0]
{
    3aac:	447b      	add	r3, pc
    3aae:	b08b      	sub	sp, #44	; 0x2c
    3ab0:	9300      	str	r3, [sp, #0]
    3ab2:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3ab4:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3ab6:	0792      	lsls	r2, r2, #30
    3ab8:	d500      	bpl.n	3abc <spi_init+0x1c>
    3aba:	e0d8      	b.n	3c6e <spi_init+0x1ce>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3abc:	2701      	movs	r7, #1
    3abe:	680b      	ldr	r3, [r1, #0]
    3ac0:	403b      	ands	r3, r7
    3ac2:	9302      	str	r3, [sp, #8]
    3ac4:	9a02      	ldr	r2, [sp, #8]
		return STATUS_BUSY;
    3ac6:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3ac8:	2a00      	cmp	r2, #0
    3aca:	d000      	beq.n	3ace <spi_init+0x2e>
    3acc:	e0cf      	b.n	3c6e <spi_init+0x1ce>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3ace:	9a00      	ldr	r2, [sp, #0]
    3ad0:	4b69      	ldr	r3, [pc, #420]	; (3c78 <spi_init+0x1d8>)
    3ad2:	0008      	movs	r0, r1
    3ad4:	58d3      	ldr	r3, [r2, r3]
    3ad6:	9301      	str	r3, [sp, #4]
    3ad8:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3ada:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3adc:	408f      	lsls	r7, r1
			PM->APBCMASK.reg |= mask;
    3ade:	4b67      	ldr	r3, [pc, #412]	; (3c7c <spi_init+0x1dc>)
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3ae0:	a904      	add	r1, sp, #16
    3ae2:	6a1a      	ldr	r2, [r3, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3ae4:	3014      	adds	r0, #20
    3ae6:	4317      	orrs	r7, r2
    3ae8:	621f      	str	r7, [r3, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3aea:	1d63      	adds	r3, r4, #5
    3aec:	7fdb      	ldrb	r3, [r3, #31]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3aee:	9a00      	ldr	r2, [sp, #0]
	gclk_chan_conf.source_generator = config->generator_source;
    3af0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3af2:	4b63      	ldr	r3, [pc, #396]	; (3c80 <spi_init+0x1e0>)
    3af4:	b2c7      	uxtb	r7, r0
    3af6:	58d3      	ldr	r3, [r2, r3]
    3af8:	0038      	movs	r0, r7
    3afa:	9303      	str	r3, [sp, #12]
    3afc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3afe:	9a00      	ldr	r2, [sp, #0]
    3b00:	4b60      	ldr	r3, [pc, #384]	; (3c84 <spi_init+0x1e4>)
    3b02:	0038      	movs	r0, r7
    3b04:	58d3      	ldr	r3, [r2, r3]
    3b06:	9303      	str	r3, [sp, #12]
    3b08:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3b0a:	1d63      	adds	r3, r4, #5
    3b0c:	7fd8      	ldrb	r0, [r3, #31]
    3b0e:	9a00      	ldr	r2, [sp, #0]
    3b10:	4b5d      	ldr	r3, [pc, #372]	; (3c88 <spi_init+0x1e8>)
    3b12:	9902      	ldr	r1, [sp, #8]
    3b14:	58d3      	ldr	r3, [r2, r3]
    3b16:	9302      	str	r3, [sp, #8]
    3b18:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3b1a:	7823      	ldrb	r3, [r4, #0]
    3b1c:	2b01      	cmp	r3, #1
    3b1e:	d103      	bne.n	3b28 <spi_init+0x88>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3b20:	6832      	ldr	r2, [r6, #0]
    3b22:	330b      	adds	r3, #11
    3b24:	4313      	orrs	r3, r2
    3b26:	6033      	str	r3, [r6, #0]
    3b28:	002b      	movs	r3, r5
    3b2a:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3b2c:	2600      	movs	r6, #0
    3b2e:	330c      	adds	r3, #12
    3b30:	3228      	adds	r2, #40	; 0x28
    3b32:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3b34:	4293      	cmp	r3, r2
    3b36:	d1fc      	bne.n	3b32 <spi_init+0x92>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
    3b38:	002b      	movs	r3, r5
    3b3a:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    3b3c:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    3b3e:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    3b40:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    3b42:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    3b44:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
    3b46:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
    3b48:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
    3b4a:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b4c:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
    3b4e:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b50:	9b01      	ldr	r3, [sp, #4]
	module->locked                     = false;
    3b52:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b54:	4798      	blx	r3
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3b56:	9a00      	ldr	r2, [sp, #0]
    3b58:	4b4c      	ldr	r3, [pc, #304]	; (3c8c <spi_init+0x1ec>)
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b5a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3b5c:	58d3      	ldr	r3, [r2, r3]
	_sercom_instances[instance_index] = module;
    3b5e:	00bf      	lsls	r7, r7, #2
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3b60:	9302      	str	r3, [sp, #8]
    3b62:	0019      	movs	r1, r3
    3b64:	4b4a      	ldr	r3, [pc, #296]	; (3c90 <spi_init+0x1f0>)
    3b66:	58d3      	ldr	r3, [r2, r3]
    3b68:	9302      	str	r3, [sp, #8]
    3b6a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3b6c:	9a00      	ldr	r2, [sp, #0]
    3b6e:	4b49      	ldr	r3, [pc, #292]	; (3c94 <spi_init+0x1f4>)
    3b70:	58d3      	ldr	r3, [r2, r3]
    3b72:	2280      	movs	r2, #128	; 0x80
    3b74:	50fd      	str	r5, [r7, r3]
    3b76:	9302      	str	r3, [sp, #8]
    3b78:	ab05      	add	r3, sp, #20
    3b7a:	701a      	strb	r2, [r3, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b7c:	3a7f      	subs	r2, #127	; 0x7f
    3b7e:	709a      	strb	r2, [r3, #2]
	if(config->mode == SPI_MODE_SLAVE) {
    3b80:	7822      	ldrb	r2, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b82:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b84:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    3b86:	70de      	strb	r6, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3b88:	2a00      	cmp	r2, #0
    3b8a:	d100      	bne.n	3b8e <spi_init+0xee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3b8c:	709e      	strb	r6, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3b8e:	2600      	movs	r6, #0
    3b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b94:	9207      	str	r2, [sp, #28]
    3b96:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3b98:	9306      	str	r3, [sp, #24]
    3b9a:	9208      	str	r2, [sp, #32]
    3b9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3b9e:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ba0:	00b3      	lsls	r3, r6, #2
    3ba2:	aa06      	add	r2, sp, #24
    3ba4:	5898      	ldr	r0, [r3, r2]
    3ba6:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
    3ba8:	2800      	cmp	r0, #0
    3baa:	d105      	bne.n	3bb8 <spi_init+0x118>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3bac:	4b3a      	ldr	r3, [pc, #232]	; (3c98 <spi_init+0x1f8>)
    3bae:	9a00      	ldr	r2, [sp, #0]
    3bb0:	0038      	movs	r0, r7
    3bb2:	58d3      	ldr	r3, [r2, r3]
    3bb4:	9302      	str	r3, [sp, #8]
    3bb6:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
    3bb8:	1c43      	adds	r3, r0, #1
    3bba:	d008      	beq.n	3bce <spi_init+0x12e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3bbc:	a905      	add	r1, sp, #20
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3bbe:	4b37      	ldr	r3, [pc, #220]	; (3c9c <spi_init+0x1fc>)
    3bc0:	9a00      	ldr	r2, [sp, #0]
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3bc2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3bc4:	58d3      	ldr	r3, [r2, r3]
    3bc6:	0c00      	lsrs	r0, r0, #16
    3bc8:	b2c0      	uxtb	r0, r0
    3bca:	9302      	str	r3, [sp, #8]
    3bcc:	4798      	blx	r3
    3bce:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3bd0:	2e04      	cmp	r6, #4
    3bd2:	d1e5      	bne.n	3ba0 <spi_init+0x100>
	module->mode             = config->mode;
    3bd4:	7823      	ldrb	r3, [r4, #0]
    3bd6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3bd8:	7c22      	ldrb	r2, [r4, #16]
    3bda:	71aa      	strb	r2, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3bdc:	7ca2      	ldrb	r2, [r4, #18]
    3bde:	71ea      	strb	r2, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3be0:	7d22      	ldrb	r2, [r4, #20]
    3be2:	722a      	strb	r2, [r5, #8]
	uint16_t baud = 0;
    3be4:	aa04      	add	r2, sp, #16
    3be6:	1c96      	adds	r6, r2, #2
    3be8:	2200      	movs	r2, #0
    3bea:	8032      	strh	r2, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
    3bec:	2b01      	cmp	r3, #1
    3bee:	d116      	bne.n	3c1e <spi_init+0x17e>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3bf0:	6828      	ldr	r0, [r5, #0]
    3bf2:	9b01      	ldr	r3, [sp, #4]
    3bf4:	4798      	blx	r3
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3bf6:	9a00      	ldr	r2, [sp, #0]
    3bf8:	4b29      	ldr	r3, [pc, #164]	; (3ca0 <spi_init+0x200>)
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3bfa:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3bfc:	58d3      	ldr	r3, [r2, r3]
    3bfe:	b2c0      	uxtb	r0, r0
    3c00:	9301      	str	r3, [sp, #4]
    3c02:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    3c04:	9d00      	ldr	r5, [sp, #0]
    3c06:	4b27      	ldr	r3, [pc, #156]	; (3ca4 <spi_init+0x204>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3c08:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3c0a:	58eb      	ldr	r3, [r5, r3]
    3c0c:	0032      	movs	r2, r6
    3c0e:	69a0      	ldr	r0, [r4, #24]
    3c10:	9300      	str	r3, [sp, #0]
    3c12:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
    3c14:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
    3c16:	2800      	cmp	r0, #0
    3c18:	d129      	bne.n	3c6e <spi_init+0x1ce>
		spi_module->BAUD.reg = (uint8_t)baud;
    3c1a:	7833      	ldrb	r3, [r6, #0]
    3c1c:	733b      	strb	r3, [r7, #12]
	ctrla |= config->transfer_mode;
    3c1e:	68a3      	ldr	r3, [r4, #8]
    3c20:	6862      	ldr	r2, [r4, #4]
	if (config->run_in_standby || system_is_debugger_present()) {
    3c22:	7c61      	ldrb	r1, [r4, #17]
	ctrla |= config->transfer_mode;
    3c24:	431a      	orrs	r2, r3
	ctrla |= config->mux_setting;
    3c26:	68e3      	ldr	r3, [r4, #12]
    3c28:	431a      	orrs	r2, r3
	ctrlb |= config->character_size;
    3c2a:	7c23      	ldrb	r3, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3c2c:	2900      	cmp	r1, #0
    3c2e:	d103      	bne.n	3c38 <spi_init+0x198>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3c30:	491d      	ldr	r1, [pc, #116]	; (3ca8 <spi_init+0x208>)
    3c32:	7889      	ldrb	r1, [r1, #2]
    3c34:	0789      	lsls	r1, r1, #30
    3c36:	d501      	bpl.n	3c3c <spi_init+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3c38:	2180      	movs	r1, #128	; 0x80
    3c3a:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    3c3c:	7ca1      	ldrb	r1, [r4, #18]
    3c3e:	2900      	cmp	r1, #0
    3c40:	d002      	beq.n	3c48 <spi_init+0x1a8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3c42:	2180      	movs	r1, #128	; 0x80
    3c44:	0289      	lsls	r1, r1, #10
    3c46:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    3c48:	7ce1      	ldrb	r1, [r4, #19]
    3c4a:	2900      	cmp	r1, #0
    3c4c:	d002      	beq.n	3c54 <spi_init+0x1b4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3c4e:	2180      	movs	r1, #128	; 0x80
    3c50:	0089      	lsls	r1, r1, #2
    3c52:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    3c54:	7d21      	ldrb	r1, [r4, #20]
    3c56:	2900      	cmp	r1, #0
    3c58:	d002      	beq.n	3c60 <spi_init+0x1c0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3c5a:	2180      	movs	r1, #128	; 0x80
    3c5c:	0189      	lsls	r1, r1, #6
    3c5e:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    3c60:	6839      	ldr	r1, [r7, #0]
    3c62:	430a      	orrs	r2, r1
    3c64:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3c66:	687a      	ldr	r2, [r7, #4]
    3c68:	4313      	orrs	r3, r2
    3c6a:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    3c6c:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3c6e:	0018      	movs	r0, r3
    3c70:	b00b      	add	sp, #44	; 0x2c
    3c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c74:	0000a03c 	.word	0x0000a03c
    3c78:	000002fc 	.word	0x000002fc
    3c7c:	40000400 	.word	0x40000400
    3c80:	000000d8 	.word	0x000000d8
    3c84:	0000027c 	.word	0x0000027c
    3c88:	00000274 	.word	0x00000274
    3c8c:	000000f0 	.word	0x000000f0
    3c90:	000001ac 	.word	0x000001ac
    3c94:	00000194 	.word	0x00000194
    3c98:	0000031c 	.word	0x0000031c
    3c9c:	00000304 	.word	0x00000304
    3ca0:	000001d8 	.word	0x000001d8
    3ca4:	0000013c 	.word	0x0000013c
    3ca8:	41002000 	.word	0x41002000

00003cac <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    3cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cae:	b085      	sub	sp, #20
    3cb0:	9301      	str	r3, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3cb2:	0003      	movs	r3, r0
{
    3cb4:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3cb6:	2005      	movs	r0, #5
{
    3cb8:	9100      	str	r1, [sp, #0]
	if (module->status == STATUS_BUSY) {
    3cba:	3338      	adds	r3, #56	; 0x38
    3cbc:	781b      	ldrb	r3, [r3, #0]
{
    3cbe:	0016      	movs	r6, r2
	if (module->status == STATUS_BUSY) {
    3cc0:	4283      	cmp	r3, r0
    3cc2:	d035      	beq.n	3d30 <spi_read_buffer_wait+0x84>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3cc4:	3012      	adds	r0, #18
	if (length == 0) {
    3cc6:	2a00      	cmp	r2, #0
    3cc8:	d032      	beq.n	3d30 <spi_read_buffer_wait+0x84>
	}

	if (!(module->receiver_enabled)) {
    3cca:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    3ccc:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d02e      	beq.n	3d30 <spi_read_buffer_wait+0x84>
    3cd2:	2500      	movs	r5, #0
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    3cd4:	7963      	ldrb	r3, [r4, #5]
    3cd6:	2b01      	cmp	r3, #1
    3cd8:	d109      	bne.n	3cee <spi_read_buffer_wait+0x42>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cda:	6822      	ldr	r2, [r4, #0]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    3cdc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cde:	7e13      	ldrb	r3, [r2, #24]
    3ce0:	420b      	tst	r3, r1
    3ce2:	d0fb      	beq.n	3cdc <spi_read_buffer_wait+0x30>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    3ce4:	4b14      	ldr	r3, [pc, #80]	; (3d38 <spi_read_buffer_wait+0x8c>)
    3ce6:	9901      	ldr	r1, [sp, #4]
    3ce8:	0020      	movs	r0, r4
    3cea:	447b      	add	r3, pc
    3cec:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cee:	6822      	ldr	r2, [r4, #0]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    3cf0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cf2:	7e13      	ldrb	r3, [r2, #24]
    3cf4:	420b      	tst	r3, r1
    3cf6:	d0fb      	beq.n	3cf0 <spi_read_buffer_wait+0x44>
		}

		uint16_t received_data = 0;
    3cf8:	ab02      	add	r3, sp, #8
    3cfa:	1d9f      	adds	r7, r3, #6
    3cfc:	2300      	movs	r3, #0
    3cfe:	803b      	strh	r3, [r7, #0]
		enum status_code retval = spi_read(module, &received_data);
    3d00:	4b0e      	ldr	r3, [pc, #56]	; (3d3c <spi_read_buffer_wait+0x90>)
    3d02:	0039      	movs	r1, r7
    3d04:	0020      	movs	r0, r4
    3d06:	447b      	add	r3, pc
    3d08:	4798      	blx	r3

		if (retval != STATUS_OK) {
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d110      	bne.n	3d30 <spi_read_buffer_wait+0x84>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3d0e:	9900      	ldr	r1, [sp, #0]
    3d10:	883a      	ldrh	r2, [r7, #0]
    3d12:	1c6b      	adds	r3, r5, #1
    3d14:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d16:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    3d18:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d1a:	2901      	cmp	r1, #1
    3d1c:	d10a      	bne.n	3d34 <spi_read_buffer_wait+0x88>
			rx_data[rx_pos++] = (received_data >> 8);
    3d1e:	9900      	ldr	r1, [sp, #0]
    3d20:	3502      	adds	r5, #2
    3d22:	0a12      	lsrs	r2, r2, #8
    3d24:	b2ad      	uxth	r5, r5
    3d26:	54ca      	strb	r2, [r1, r3]
    3d28:	3e01      	subs	r6, #1
    3d2a:	b2b6      	uxth	r6, r6
	while (length--) {
    3d2c:	2e00      	cmp	r6, #0
    3d2e:	d1d1      	bne.n	3cd4 <spi_read_buffer_wait+0x28>
		}
	}

	return STATUS_OK;
}
    3d30:	b005      	add	sp, #20
    3d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rx_data[rx_pos++] = received_data;
    3d34:	001d      	movs	r5, r3
    3d36:	e7f7      	b.n	3d28 <spi_read_buffer_wait+0x7c>
    3d38:	fffffd6f 	.word	0xfffffd6f
    3d3c:	fffffd67 	.word	0xfffffd67

00003d40 <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3d40:	0003      	movs	r3, r0
{
    3d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d44:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3d46:	2005      	movs	r0, #5
	if (module->status == STATUS_BUSY) {
    3d48:	3338      	adds	r3, #56	; 0x38
    3d4a:	781b      	ldrb	r3, [r3, #0]
{
    3d4c:	000f      	movs	r7, r1
    3d4e:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
    3d50:	4283      	cmp	r3, r0
    3d52:	d003      	beq.n	3d5c <spi_write_buffer_wait+0x1c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3d54:	3012      	adds	r0, #18
    3d56:	2600      	movs	r6, #0
	if (length == 0) {
    3d58:	2a00      	cmp	r2, #0
    3d5a:	d122      	bne.n	3da2 <spi_write_buffer_wait+0x62>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    3d5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		while (!spi_is_ready_to_write(module)) {
    3d5e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d60:	7e1a      	ldrb	r2, [r3, #24]
    3d62:	420a      	tst	r2, r1
    3d64:	d0fb      	beq.n	3d5e <spi_write_buffer_wait+0x1e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d66:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    3d68:	1873      	adds	r3, r6, r1
    3d6a:	b29b      	uxth	r3, r3
    3d6c:	5db9      	ldrb	r1, [r7, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d6e:	2a01      	cmp	r2, #1
    3d70:	d019      	beq.n	3da6 <spi_write_buffer_wait+0x66>
		uint16_t data_to_send = tx_data[tx_pos++];
    3d72:	001e      	movs	r6, r3
    3d74:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    3d76:	4b14      	ldr	r3, [pc, #80]	; (3dc8 <spi_write_buffer_wait+0x88>)
    3d78:	0020      	movs	r0, r4
    3d7a:	447b      	add	r3, pc
    3d7c:	4798      	blx	r3
		if (module->receiver_enabled) {
    3d7e:	79e3      	ldrb	r3, [r4, #7]
    3d80:	2b00      	cmp	r3, #0
    3d82:	d00a      	beq.n	3d9a <spi_write_buffer_wait+0x5a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d84:	6822      	ldr	r2, [r4, #0]
			while (!spi_is_ready_to_read(module)) {
    3d86:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d88:	7e13      	ldrb	r3, [r2, #24]
    3d8a:	420b      	tst	r3, r1
    3d8c:	d0fb      	beq.n	3d86 <spi_write_buffer_wait+0x46>
			spi_read(module, &flush);
    3d8e:	466b      	mov	r3, sp
    3d90:	1d99      	adds	r1, r3, #6
    3d92:	4b0e      	ldr	r3, [pc, #56]	; (3dcc <spi_write_buffer_wait+0x8c>)
    3d94:	0020      	movs	r0, r4
    3d96:	447b      	add	r3, pc
    3d98:	4798      	blx	r3
    3d9a:	3d01      	subs	r5, #1
    3d9c:	b2ad      	uxth	r5, r5
	while (length--) {
    3d9e:	2d00      	cmp	r5, #0
    3da0:	d007      	beq.n	3db2 <spi_write_buffer_wait+0x72>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3da2:	6823      	ldr	r3, [r4, #0]
    3da4:	e7db      	b.n	3d5e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3da6:	5cfb      	ldrb	r3, [r7, r3]
    3da8:	3602      	adds	r6, #2
    3daa:	021b      	lsls	r3, r3, #8
    3dac:	b2b6      	uxth	r6, r6
    3dae:	4319      	orrs	r1, r3
    3db0:	e7e1      	b.n	3d76 <spi_write_buffer_wait+0x36>
	if (module->mode == SPI_MODE_MASTER) {
    3db2:	7963      	ldrb	r3, [r4, #5]
	return STATUS_OK;
    3db4:	0028      	movs	r0, r5
	if (module->mode == SPI_MODE_MASTER) {
    3db6:	2b01      	cmp	r3, #1
    3db8:	d1d0      	bne.n	3d5c <spi_write_buffer_wait+0x1c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3dba:	6821      	ldr	r1, [r4, #0]
		while (!spi_is_write_complete(module)) {
    3dbc:	3301      	adds	r3, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dbe:	7e0a      	ldrb	r2, [r1, #24]
    3dc0:	421a      	tst	r2, r3
    3dc2:	d0fc      	beq.n	3dbe <spi_write_buffer_wait+0x7e>
	return STATUS_OK;
    3dc4:	2000      	movs	r0, #0
    3dc6:	e7c9      	b.n	3d5c <spi_write_buffer_wait+0x1c>
    3dc8:	fffffcdf 	.word	0xfffffcdf
    3dcc:	fffffcd7 	.word	0xfffffcd7

00003dd0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3dd2:	4b69      	ldr	r3, [pc, #420]	; (3f78 <_spi_interrupt_handler+0x1a8>)
	/* Get device instance from the look-up table */
	struct spi_module *module
    3dd4:	4a69      	ldr	r2, [pc, #420]	; (3f7c <_spi_interrupt_handler+0x1ac>)
{
    3dd6:	447b      	add	r3, pc
	struct spi_module *module
    3dd8:	589a      	ldr	r2, [r3, r2]
    3dda:	0080      	lsls	r0, r0, #2
    3ddc:	5884      	ldr	r4, [r0, r2]
    3dde:	9201      	str	r2, [sp, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3de0:	0021      	movs	r1, r4
    3de2:	0022      	movs	r2, r4
    3de4:	3136      	adds	r1, #54	; 0x36
    3de6:	3237      	adds	r2, #55	; 0x37
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3de8:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    3dea:	7812      	ldrb	r2, [r2, #0]
    3dec:	780e      	ldrb	r6, [r1, #0]
    3dee:	4016      	ands	r6, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3df0:	7e2a      	ldrb	r2, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3df2:	7daf      	ldrb	r7, [r5, #22]
    3df4:	4017      	ands	r7, r2

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3df6:	07fa      	lsls	r2, r7, #31
    3df8:	d532      	bpl.n	3e60 <_spi_interrupt_handler+0x90>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3dfa:	7962      	ldrb	r2, [r4, #5]
    3dfc:	2a01      	cmp	r2, #1
    3dfe:	d12f      	bne.n	3e60 <_spi_interrupt_handler+0x90>
			(module->dir == SPI_DIRECTION_READ)) {
    3e00:	7a61      	ldrb	r1, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3e02:	2900      	cmp	r1, #0
    3e04:	d10c      	bne.n	3e20 <_spi_interrupt_handler+0x50>
	spi_hw->DATA.reg = dummy_write;
    3e06:	495e      	ldr	r1, [pc, #376]	; (3f80 <_spi_interrupt_handler+0x1b0>)
    3e08:	585b      	ldr	r3, [r3, r1]
    3e0a:	9301      	str	r3, [sp, #4]
    3e0c:	881b      	ldrh	r3, [r3, #0]
    3e0e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3e10:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e12:	3b01      	subs	r3, #1
    3e14:	b29b      	uxth	r3, r3
    3e16:	8663      	strh	r3, [r4, #50]	; 0x32
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    3e18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d100      	bne.n	3e20 <_spi_interrupt_handler+0x50>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3e1e:	752a      	strb	r2, [r5, #20]
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    3e20:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3e22:	2b00      	cmp	r3, #0
    3e24:	d01c      	beq.n	3e60 <_spi_interrupt_handler+0x90>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	(module->tx_buffer_ptr)++;
    3e28:	1c51      	adds	r1, r2, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e2a:	7813      	ldrb	r3, [r2, #0]
	(module->tx_buffer_ptr)++;
    3e2c:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e2e:	79a1      	ldrb	r1, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e30:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e32:	2901      	cmp	r1, #1
    3e34:	d051      	beq.n	3eda <_spi_interrupt_handler+0x10a>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e36:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3e38:	05db      	lsls	r3, r3, #23
    3e3a:	0ddb      	lsrs	r3, r3, #23
    3e3c:	62ab      	str	r3, [r5, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3e3e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3e40:	3b01      	subs	r3, #1
    3e42:	b29b      	uxth	r3, r3
    3e44:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3e46:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d109      	bne.n	3e60 <_spi_interrupt_handler+0x90>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3e4c:	3301      	adds	r3, #1
    3e4e:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3e50:	7a63      	ldrb	r3, [r4, #9]
    3e52:	2b01      	cmp	r3, #1
    3e54:	d104      	bne.n	3e60 <_spi_interrupt_handler+0x90>
    3e56:	79e3      	ldrb	r3, [r4, #7]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d101      	bne.n	3e60 <_spi_interrupt_handler+0x90>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e5c:	3302      	adds	r3, #2
    3e5e:	75ab      	strb	r3, [r5, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3e60:	2104      	movs	r1, #4
    3e62:	420f      	tst	r7, r1
    3e64:	d015      	beq.n	3e92 <_spi_interrupt_handler+0xc2>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e66:	8b6b      	ldrh	r3, [r5, #26]
    3e68:	420b      	tst	r3, r1
    3e6a:	d03c      	beq.n	3ee6 <_spi_interrupt_handler+0x116>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3e6c:	7a63      	ldrb	r3, [r4, #9]
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d00c      	beq.n	3e8c <_spi_interrupt_handler+0xbc>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3e72:	0023      	movs	r3, r4
    3e74:	221e      	movs	r2, #30
    3e76:	3338      	adds	r3, #56	; 0x38
    3e78:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3e7a:	2303      	movs	r3, #3
    3e7c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3e7e:	3302      	adds	r3, #2
    3e80:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3e82:	0733      	lsls	r3, r6, #28
    3e84:	d502      	bpl.n	3e8c <_spi_interrupt_handler+0xbc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3e86:	0020      	movs	r0, r4
    3e88:	69a3      	ldr	r3, [r4, #24]
    3e8a:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3e8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e8e:	2304      	movs	r3, #4
    3e90:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3e92:	2102      	movs	r1, #2
    3e94:	420f      	tst	r7, r1
    3e96:	d014      	beq.n	3ec2 <_spi_interrupt_handler+0xf2>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e98:	7963      	ldrb	r3, [r4, #5]
    3e9a:	2b01      	cmp	r3, #1
    3e9c:	d111      	bne.n	3ec2 <_spi_interrupt_handler+0xf2>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3e9e:	7a63      	ldrb	r3, [r4, #9]
    3ea0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    3ea2:	2b01      	cmp	r3, #1
    3ea4:	d10d      	bne.n	3ec2 <_spi_interrupt_handler+0xf2>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3ea6:	79e2      	ldrb	r2, [r4, #7]
    3ea8:	2a00      	cmp	r2, #0
    3eaa:	d10a      	bne.n	3ec2 <_spi_interrupt_handler+0xf2>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3eac:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    3eae:	3101      	adds	r1, #1
    3eb0:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    3eb2:	0021      	movs	r1, r4
    3eb4:	3138      	adds	r1, #56	; 0x38
    3eb6:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3eb8:	421e      	tst	r6, r3
    3eba:	d002      	beq.n	3ec2 <_spi_interrupt_handler+0xf2>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3ebc:	0020      	movs	r0, r4
    3ebe:	68e3      	ldr	r3, [r4, #12]
    3ec0:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3ec2:	b27f      	sxtb	r7, r7
    3ec4:	2f00      	cmp	r7, #0
    3ec6:	da07      	bge.n	3ed8 <_spi_interrupt_handler+0x108>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ec8:	2380      	movs	r3, #128	; 0x80
    3eca:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3ecc:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3ece:	0673      	lsls	r3, r6, #25
    3ed0:	d502      	bpl.n	3ed8 <_spi_interrupt_handler+0x108>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ed4:	0020      	movs	r0, r4
    3ed6:	4798      	blx	r3
		}
	}
#  endif
}
    3ed8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3eda:	7851      	ldrb	r1, [r2, #1]
		(module->tx_buffer_ptr)++;
    3edc:	3202      	adds	r2, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3ede:	0209      	lsls	r1, r1, #8
    3ee0:	430b      	orrs	r3, r1
		(module->tx_buffer_ptr)++;
    3ee2:	62e2      	str	r2, [r4, #44]	; 0x2c
    3ee4:	e7a8      	b.n	3e38 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3ee6:	7a62      	ldrb	r2, [r4, #9]
	flush = spi_hw->DATA.reg;
    3ee8:	6aab      	ldr	r3, [r5, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    3eea:	b2d2      	uxtb	r2, r2
    3eec:	2a01      	cmp	r2, #1
    3eee:	d113      	bne.n	3f18 <_spi_interrupt_handler+0x148>
	module->remaining_dummy_buffer_length--;
    3ef0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3ef2:	3b01      	subs	r3, #1
    3ef4:	b29b      	uxth	r3, r3
    3ef6:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3ef8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3efa:	b29b      	uxth	r3, r3
    3efc:	2b00      	cmp	r3, #0
    3efe:	d1c8      	bne.n	3e92 <_spi_interrupt_handler+0xc2>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3f00:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    3f02:	0021      	movs	r1, r4
    3f04:	3138      	adds	r1, #56	; 0x38
    3f06:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    3f08:	3303      	adds	r3, #3
    3f0a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    3f0c:	4216      	tst	r6, r2
    3f0e:	d0c0      	beq.n	3e92 <_spi_interrupt_handler+0xc2>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3f10:	0020      	movs	r0, r4
    3f12:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3f14:	4798      	blx	r3
    3f16:	e7bc      	b.n	3e92 <_spi_interrupt_handler+0xc2>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f18:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3f1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f1c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3f1e:	b2da      	uxtb	r2, r3
    3f20:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    3f22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3f24:	1c51      	adds	r1, r2, #1
    3f26:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f28:	79a1      	ldrb	r1, [r4, #6]
    3f2a:	2901      	cmp	r1, #1
    3f2c:	d104      	bne.n	3f38 <_spi_interrupt_handler+0x168>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3f2e:	0a1b      	lsrs	r3, r3, #8
    3f30:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    3f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f34:	3301      	adds	r3, #1
    3f36:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    3f38:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3f3a:	3b01      	subs	r3, #1
    3f3c:	b29b      	uxth	r3, r3
    3f3e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3f40:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3f42:	b29b      	uxth	r3, r3
    3f44:	2b00      	cmp	r3, #0
    3f46:	d1a4      	bne.n	3e92 <_spi_interrupt_handler+0xc2>
					module->status = STATUS_OK;
    3f48:	0022      	movs	r2, r4
    3f4a:	3238      	adds	r2, #56	; 0x38
    3f4c:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3f4e:	3304      	adds	r3, #4
    3f50:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3f52:	7a62      	ldrb	r2, [r4, #9]
    3f54:	2a02      	cmp	r2, #2
    3f56:	d104      	bne.n	3f62 <_spi_interrupt_handler+0x192>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3f58:	421e      	tst	r6, r3
    3f5a:	d09a      	beq.n	3e92 <_spi_interrupt_handler+0xc2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3f5c:	0020      	movs	r0, r4
    3f5e:	6963      	ldr	r3, [r4, #20]
    3f60:	e7d8      	b.n	3f14 <_spi_interrupt_handler+0x144>
					} else if (module->dir == SPI_DIRECTION_READ) {
    3f62:	7a63      	ldrb	r3, [r4, #9]
    3f64:	2b00      	cmp	r3, #0
    3f66:	d000      	beq.n	3f6a <_spi_interrupt_handler+0x19a>
    3f68:	e793      	b.n	3e92 <_spi_interrupt_handler+0xc2>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3f6a:	07b3      	lsls	r3, r6, #30
    3f6c:	d400      	bmi.n	3f70 <_spi_interrupt_handler+0x1a0>
    3f6e:	e790      	b.n	3e92 <_spi_interrupt_handler+0xc2>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3f70:	0020      	movs	r0, r4
    3f72:	6923      	ldr	r3, [r4, #16]
    3f74:	e7ce      	b.n	3f14 <_spi_interrupt_handler+0x144>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	00009d12 	.word	0x00009d12
    3f7c:	00000194 	.word	0x00000194
    3f80:	00000168 	.word	0x00000168

00003f84 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f84:	2310      	movs	r3, #16
    3f86:	4902      	ldr	r1, [pc, #8]	; (3f90 <_system_dfll_wait_for_sync+0xc>)
    3f88:	68ca      	ldr	r2, [r1, #12]
    3f8a:	421a      	tst	r2, r3
    3f8c:	d0fc      	beq.n	3f88 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    3f8e:	4770      	bx	lr
    3f90:	40000800 	.word	0x40000800

00003f94 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3f96:	4e20      	ldr	r6, [pc, #128]	; (4018 <system_clock_source_get_hz+0x84>)
    3f98:	447e      	add	r6, pc
	switch (clock_source) {
    3f9a:	2808      	cmp	r0, #8
    3f9c:	d806      	bhi.n	3fac <system_clock_source_get_hz+0x18>
    3f9e:	f002 fb7b 	bl	6698 <__gnu_thumb1_case_uqi>
    3fa2:	0508      	.short	0x0508
    3fa4:	13353505 	.word	0x13353505
    3fa8:	170c      	.short	0x170c
    3faa:	2c          	.byte	0x2c
    3fab:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3fac:	2400      	movs	r4, #0
	}
}
    3fae:	0020      	movs	r0, r4
    3fb0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    3fb2:	4b1a      	ldr	r3, [pc, #104]	; (401c <system_clock_source_get_hz+0x88>)
    3fb4:	447b      	add	r3, pc
    3fb6:	691c      	ldr	r4, [r3, #16]
    3fb8:	e7f9      	b.n	3fae <system_clock_source_get_hz+0x1a>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3fba:	4b19      	ldr	r3, [pc, #100]	; (4020 <system_clock_source_get_hz+0x8c>)
    3fbc:	4c19      	ldr	r4, [pc, #100]	; (4024 <system_clock_source_get_hz+0x90>)
    3fbe:	6a1b      	ldr	r3, [r3, #32]
    3fc0:	059b      	lsls	r3, r3, #22
    3fc2:	0f9b      	lsrs	r3, r3, #30
    3fc4:	40dc      	lsrs	r4, r3
    3fc6:	e7f2      	b.n	3fae <system_clock_source_get_hz+0x1a>
		return _system_clock_inst.xosc32k.frequency;
    3fc8:	4b17      	ldr	r3, [pc, #92]	; (4028 <system_clock_source_get_hz+0x94>)
    3fca:	447b      	add	r3, pc
    3fcc:	695c      	ldr	r4, [r3, #20]
    3fce:	e7ee      	b.n	3fae <system_clock_source_get_hz+0x1a>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3fd0:	4d16      	ldr	r5, [pc, #88]	; (402c <system_clock_source_get_hz+0x98>)
			return 0;
    3fd2:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3fd4:	447d      	add	r5, pc
    3fd6:	682b      	ldr	r3, [r5, #0]
    3fd8:	079b      	lsls	r3, r3, #30
    3fda:	d5e8      	bpl.n	3fae <system_clock_source_get_hz+0x1a>
		_system_dfll_wait_for_sync();
    3fdc:	4b14      	ldr	r3, [pc, #80]	; (4030 <system_clock_source_get_hz+0x9c>)
    3fde:	447b      	add	r3, pc
    3fe0:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3fe2:	682b      	ldr	r3, [r5, #0]
    3fe4:	075b      	lsls	r3, r3, #29
    3fe6:	d514      	bpl.n	4012 <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3fe8:	4b12      	ldr	r3, [pc, #72]	; (4034 <system_clock_source_get_hz+0xa0>)
    3fea:	0020      	movs	r0, r4
    3fec:	58f3      	ldr	r3, [r6, r3]
    3fee:	9301      	str	r3, [sp, #4]
    3ff0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3ff2:	68ac      	ldr	r4, [r5, #8]
    3ff4:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3ff6:	4344      	muls	r4, r0
    3ff8:	e7d9      	b.n	3fae <system_clock_source_get_hz+0x1a>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3ffa:	4b0f      	ldr	r3, [pc, #60]	; (4038 <system_clock_source_get_hz+0xa4>)
			return 0;
    3ffc:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	075b      	lsls	r3, r3, #29
    4002:	d5d4      	bpl.n	3fae <system_clock_source_get_hz+0x1a>
		return _system_clock_inst.dpll.frequency;
    4004:	4b0d      	ldr	r3, [pc, #52]	; (403c <system_clock_source_get_hz+0xa8>)
    4006:	447b      	add	r3, pc
    4008:	68dc      	ldr	r4, [r3, #12]
    400a:	e7d0      	b.n	3fae <system_clock_source_get_hz+0x1a>
		return 32768UL;
    400c:	2480      	movs	r4, #128	; 0x80
    400e:	0224      	lsls	r4, r4, #8
    4010:	e7cd      	b.n	3fae <system_clock_source_get_hz+0x1a>
		return 48000000UL;
    4012:	4c0b      	ldr	r4, [pc, #44]	; (4040 <system_clock_source_get_hz+0xac>)
    4014:	e7cb      	b.n	3fae <system_clock_source_get_hz+0x1a>
    4016:	46c0      	nop			; (mov r8, r8)
    4018:	00009b50 	.word	0x00009b50
    401c:	1fffcd18 	.word	0x1fffcd18
    4020:	40000800 	.word	0x40000800
    4024:	007a1200 	.word	0x007a1200
    4028:	1fffcd02 	.word	0x1fffcd02
    402c:	1fffccf8 	.word	0x1fffccf8
    4030:	ffffffa3 	.word	0xffffffa3
    4034:	000001d8 	.word	0x000001d8
    4038:	40000850 	.word	0x40000850
    403c:	1fffccc6 	.word	0x1fffccc6
    4040:	02dc6c00 	.word	0x02dc6c00

00004044 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4044:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4046:	7802      	ldrb	r2, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4048:	7884      	ldrb	r4, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    404a:	7845      	ldrb	r5, [r0, #1]
    404c:	2001      	movs	r0, #1
    404e:	2640      	movs	r6, #64	; 0x40
    4050:	4005      	ands	r5, r0
    4052:	4020      	ands	r0, r4
    4054:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4056:	4908      	ldr	r1, [pc, #32]	; (4078 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    4058:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    405a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    405c:	01c0      	lsls	r0, r0, #7
    405e:	43b3      	bics	r3, r6
    4060:	432b      	orrs	r3, r5
    4062:	43a3      	bics	r3, r4
    4064:	4303      	orrs	r3, r0
    4066:	2003      	movs	r0, #3
    4068:	4002      	ands	r2, r0
    406a:	4804      	ldr	r0, [pc, #16]	; (407c <system_clock_source_osc8m_set_config+0x38>)
    406c:	0212      	lsls	r2, r2, #8
    406e:	4003      	ands	r3, r0
    4070:	4313      	orrs	r3, r2
    4072:	620b      	str	r3, [r1, #32]
}
    4074:	bd70      	pop	{r4, r5, r6, pc}
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	40000800 	.word	0x40000800
    407c:	fffffcff 	.word	0xfffffcff

00004080 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4082:	4b23      	ldr	r3, [pc, #140]	; (4110 <system_clock_source_xosc32k_set_config+0x90>)

	temp.bit.STARTUP = config->startup_time;
    4084:	7842      	ldrb	r2, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4086:	7807      	ldrb	r7, [r0, #0]
{
    4088:	b085      	sub	sp, #20
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    408a:	469c      	mov	ip, r3
    408c:	8a9b      	ldrh	r3, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    408e:	9203      	str	r2, [sp, #12]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4090:	427a      	negs	r2, r7
    4092:	4157      	adcs	r7, r2

	temp.bit.AAMPEN = config->auto_gain_control;
	temp.bit.EN1K = config->enable_1khz_output;
	temp.bit.EN32K = config->enable_32khz_output;

	temp.bit.ONDEMAND = config->on_demand;
    4094:	7b42      	ldrb	r2, [r0, #13]
	temp.bit.AAMPEN = config->auto_gain_control;
    4096:	7884      	ldrb	r4, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    4098:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    409a:	7906      	ldrb	r6, [r0, #4]
	temp.bit.ONDEMAND = config->on_demand;
    409c:	9201      	str	r2, [sp, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    409e:	7b02      	ldrb	r2, [r0, #12]
    40a0:	9202      	str	r2, [sp, #8]
	temp.bit.WRTLOCK  = config->write_once;

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    40a2:	4a1c      	ldr	r2, [pc, #112]	; (4114 <system_clock_source_xosc32k_set_config+0x94>)
	temp.bit.WRTLOCK  = config->write_once;
    40a4:	7b81      	ldrb	r1, [r0, #14]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    40a6:	6880      	ldr	r0, [r0, #8]
    40a8:	447a      	add	r2, pc
    40aa:	6150      	str	r0, [r2, #20]

	SYSCTRL->XOSC32K = temp;
    40ac:	00b8      	lsls	r0, r7, #2
    40ae:	2704      	movs	r7, #4
    40b0:	2201      	movs	r2, #1
    40b2:	43bb      	bics	r3, r7
    40b4:	4318      	orrs	r0, r3
    40b6:	2308      	movs	r3, #8
    40b8:	4015      	ands	r5, r2
    40ba:	40bd      	lsls	r5, r7
    40bc:	4016      	ands	r6, r2
    40be:	4398      	bics	r0, r3
    40c0:	00f6      	lsls	r6, r6, #3
    40c2:	4306      	orrs	r6, r0
    40c4:	18db      	adds	r3, r3, r3
    40c6:	439e      	bics	r6, r3
    40c8:	4335      	orrs	r5, r6
    40ca:	3310      	adds	r3, #16
    40cc:	439d      	bics	r5, r3
    40ce:	002b      	movs	r3, r5
    40d0:	2040      	movs	r0, #64	; 0x40
    40d2:	4014      	ands	r4, r2
    40d4:	0164      	lsls	r4, r4, #5
    40d6:	4323      	orrs	r3, r4
    40d8:	9c02      	ldr	r4, [sp, #8]
    40da:	4383      	bics	r3, r0
    40dc:	4014      	ands	r4, r2
    40de:	01a4      	lsls	r4, r4, #6
    40e0:	4323      	orrs	r3, r4
    40e2:	2480      	movs	r4, #128	; 0x80
    40e4:	9801      	ldr	r0, [sp, #4]
    40e6:	43a3      	bics	r3, r4
    40e8:	4010      	ands	r0, r2
    40ea:	01c0      	lsls	r0, r0, #7
    40ec:	4303      	orrs	r3, r0
    40ee:	2007      	movs	r0, #7
    40f0:	9c03      	ldr	r4, [sp, #12]
    40f2:	4011      	ands	r1, r2
    40f4:	4020      	ands	r0, r4
    40f6:	4c08      	ldr	r4, [pc, #32]	; (4118 <system_clock_source_xosc32k_set_config+0x98>)
    40f8:	0200      	lsls	r0, r0, #8
    40fa:	4023      	ands	r3, r4
    40fc:	4a07      	ldr	r2, [pc, #28]	; (411c <system_clock_source_xosc32k_set_config+0x9c>)
    40fe:	4303      	orrs	r3, r0
    4100:	401a      	ands	r2, r3
    4102:	4663      	mov	r3, ip
    4104:	0309      	lsls	r1, r1, #12
    4106:	430a      	orrs	r2, r1
    4108:	829a      	strh	r2, [r3, #20]
}
    410a:	b005      	add	sp, #20
    410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	40000800 	.word	0x40000800
    4114:	1fffcc24 	.word	0x1fffcc24
    4118:	fffff8ff 	.word	0xfffff8ff
    411c:	ffffefff 	.word	0xffffefff

00004120 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4120:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4122:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4124:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4126:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4128:	059b      	lsls	r3, r3, #22
    412a:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    412c:	0c12      	lsrs	r2, r2, #16
    412e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    4130:	4b17      	ldr	r3, [pc, #92]	; (4190 <system_clock_source_dfll_set_config+0x70>)
    4132:	447b      	add	r3, pc
    4134:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4136:	79c1      	ldrb	r1, [r0, #7]
    4138:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    413a:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    413c:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    413e:	8841      	ldrh	r1, [r0, #2]
    4140:	4321      	orrs	r1, r4
    4142:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4144:	7841      	ldrb	r1, [r0, #1]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4146:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4148:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    414a:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    414c:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    414e:	2c04      	cmp	r4, #4
    4150:	d10d      	bne.n	416e <system_clock_source_dfll_set_config+0x4e>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4152:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4154:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4156:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4158:	430a      	orrs	r2, r1
    415a:	89c1      	ldrh	r1, [r0, #14]
    415c:	480d      	ldr	r0, [pc, #52]	; (4194 <system_clock_source_dfll_set_config+0x74>)
    415e:	0409      	lsls	r1, r1, #16
    4160:	4001      	ands	r1, r0
    4162:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    4164:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4166:	681a      	ldr	r2, [r3, #0]
    4168:	4314      	orrs	r4, r2
    416a:	601c      	str	r4, [r3, #0]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    416c:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    416e:	2c20      	cmp	r4, #32
    4170:	d1fc      	bne.n	416c <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4172:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4174:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4176:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4178:	430a      	orrs	r2, r1
    417a:	89c1      	ldrh	r1, [r0, #14]
    417c:	4805      	ldr	r0, [pc, #20]	; (4194 <system_clock_source_dfll_set_config+0x74>)
    417e:	0409      	lsls	r1, r1, #16
    4180:	4001      	ands	r1, r0
    4182:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    4184:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    4186:	6819      	ldr	r1, [r3, #0]
    4188:	4a03      	ldr	r2, [pc, #12]	; (4198 <system_clock_source_dfll_set_config+0x78>)
    418a:	430a      	orrs	r2, r1
    418c:	601a      	str	r2, [r3, #0]
}
    418e:	e7ed      	b.n	416c <system_clock_source_dfll_set_config+0x4c>
    4190:	1fffcb9a 	.word	0x1fffcb9a
    4194:	03ff0000 	.word	0x03ff0000
    4198:	00000424 	.word	0x00000424

0000419c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    419e:	2808      	cmp	r0, #8
    41a0:	d806      	bhi.n	41b0 <system_clock_source_enable+0x14>
    41a2:	f002 fa79 	bl	6698 <__gnu_thumb1_case_uqi>
    41a6:	0514      	.short	0x0514
    41a8:	1a0e0c05 	.word	0x1a0e0c05
    41ac:	2007      	.short	0x2007
    41ae:	36          	.byte	0x36
    41af:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    41b0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    41b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    41b4:	2302      	movs	r3, #2
    41b6:	4a1a      	ldr	r2, [pc, #104]	; (4220 <system_clock_source_enable+0x84>)
    41b8:	6a11      	ldr	r1, [r2, #32]
    41ba:	430b      	orrs	r3, r1
    41bc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    41be:	2000      	movs	r0, #0
    41c0:	e7f7      	b.n	41b2 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    41c2:	2302      	movs	r3, #2
    41c4:	4a16      	ldr	r2, [pc, #88]	; (4220 <system_clock_source_enable+0x84>)
    41c6:	6991      	ldr	r1, [r2, #24]
    41c8:	430b      	orrs	r3, r1
    41ca:	6193      	str	r3, [r2, #24]
    41cc:	e7f7      	b.n	41be <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    41ce:	2302      	movs	r3, #2
    41d0:	4a13      	ldr	r2, [pc, #76]	; (4220 <system_clock_source_enable+0x84>)
    41d2:	8a11      	ldrh	r1, [r2, #16]
    41d4:	430b      	orrs	r3, r1
    41d6:	8213      	strh	r3, [r2, #16]
    41d8:	e7f1      	b.n	41be <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    41da:	2302      	movs	r3, #2
    41dc:	4a10      	ldr	r2, [pc, #64]	; (4220 <system_clock_source_enable+0x84>)
    41de:	8a91      	ldrh	r1, [r2, #20]
    41e0:	430b      	orrs	r3, r1
    41e2:	8293      	strh	r3, [r2, #20]
    41e4:	e7eb      	b.n	41be <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    41e6:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    41e8:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    41ea:	4e0e      	ldr	r6, [pc, #56]	; (4224 <system_clock_source_enable+0x88>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    41ec:	4d0c      	ldr	r5, [pc, #48]	; (4220 <system_clock_source_enable+0x84>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    41ee:	447e      	add	r6, pc
    41f0:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    41f2:	4f0d      	ldr	r7, [pc, #52]	; (4228 <system_clock_source_enable+0x8c>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    41f4:	4313      	orrs	r3, r2
    41f6:	6033      	str	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    41f8:	447f      	add	r7, pc
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    41fa:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    41fc:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    41fe:	68b3      	ldr	r3, [r6, #8]
    4200:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4202:	6873      	ldr	r3, [r6, #4]
    4204:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4206:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4208:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    420a:	6833      	ldr	r3, [r6, #0]
    420c:	b29b      	uxth	r3, r3
    420e:	84ab      	strh	r3, [r5, #36]	; 0x24
    4210:	e7d5      	b.n	41be <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4212:	2302      	movs	r3, #2
    4214:	4a05      	ldr	r2, [pc, #20]	; (422c <system_clock_source_enable+0x90>)
    4216:	7811      	ldrb	r1, [r2, #0]
    4218:	430b      	orrs	r3, r1
    421a:	7013      	strb	r3, [r2, #0]
    421c:	e7cf      	b.n	41be <system_clock_source_enable+0x22>
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	40000800 	.word	0x40000800
    4224:	1fffcade 	.word	0x1fffcade
    4228:	fffffd89 	.word	0xfffffd89
    422c:	40000844 	.word	0x40000844

00004230 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4230:	b500      	push	{lr}
	uint32_t mask = 0;

	switch (clock_source) {
    4232:	2808      	cmp	r0, #8
    4234:	d80c      	bhi.n	4250 <system_clock_source_is_ready+0x20>
    4236:	f002 fa2f 	bl	6698 <__gnu_thumb1_case_uqi>
    423a:	0b1c      	.short	0x0b1c
    423c:	0d051e0b 	.word	0x0d051e0b
    4240:	0f1a      	.short	0x0f1a
    4242:	11          	.byte	0x11
    4243:	00          	.byte	0x00
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4244:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4246:	4a0d      	ldr	r2, [pc, #52]	; (427c <system_clock_source_is_ready+0x4c>)
    4248:	68d0      	ldr	r0, [r2, #12]
    424a:	4018      	ands	r0, r3
    424c:	1ac0      	subs	r0, r0, r3
    424e:	e00a      	b.n	4266 <system_clock_source_is_ready+0x36>
		return false;
    4250:	2000      	movs	r0, #0
}
    4252:	bd00      	pop	{pc}
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    4254:	2302      	movs	r3, #2
		break;
    4256:	e7f6      	b.n	4246 <system_clock_source_is_ready+0x16>
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    4258:	23d0      	movs	r3, #208	; 0xd0
		break;
    425a:	e7f4      	b.n	4246 <system_clock_source_is_ready+0x16>
		return ((SYSCTRL->DPLLSTATUS.reg &
    425c:	4b08      	ldr	r3, [pc, #32]	; (4280 <system_clock_source_is_ready+0x50>)
    425e:	7818      	ldrb	r0, [r3, #0]
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    4260:	2303      	movs	r3, #3
    4262:	4018      	ands	r0, r3
    4264:	3803      	subs	r0, #3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4266:	4243      	negs	r3, r0
    4268:	4158      	adcs	r0, r3
    426a:	b2c0      	uxtb	r0, r0
    426c:	e7f1      	b.n	4252 <system_clock_source_is_ready+0x22>
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    426e:	2308      	movs	r3, #8
    4270:	e7e9      	b.n	4246 <system_clock_source_is_ready+0x16>
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4272:	2301      	movs	r3, #1
    4274:	e7e7      	b.n	4246 <system_clock_source_is_ready+0x16>
		return true;
    4276:	2001      	movs	r0, #1
    4278:	e7eb      	b.n	4252 <system_clock_source_is_ready+0x22>
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	40000800 	.word	0x40000800
    4280:	40000850 	.word	0x40000850

00004284 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4284:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4286:	221e      	movs	r2, #30
{
    4288:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    428a:	496e      	ldr	r1, [pc, #440]	; (4444 <system_clock_init+0x1c0>)
    428c:	00db      	lsls	r3, r3, #3
    428e:	486e      	ldr	r0, [pc, #440]	; (4448 <system_clock_init+0x1c4>)
    4290:	608b      	str	r3, [r1, #8]
    4292:	6843      	ldr	r3, [r0, #4]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4294:	2600      	movs	r6, #0
    4296:	4393      	bics	r3, r2
    4298:	001a      	movs	r2, r3
    429a:	2302      	movs	r3, #2
    429c:	4313      	orrs	r3, r2
    429e:	6043      	str	r3, [r0, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    42a0:	2303      	movs	r3, #3
{
    42a2:	b095      	sub	sp, #84	; 0x54
    42a4:	4d69      	ldr	r5, [pc, #420]	; (444c <system_clock_init+0x1c8>)
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    42a6:	ac0f      	add	r4, sp, #60	; 0x3c
    42a8:	7023      	strb	r3, [r4, #0]
    42aa:	9103      	str	r1, [sp, #12]
{
    42ac:	447d      	add	r5, pc
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    42ae:	4b68      	ldr	r3, [pc, #416]	; (4450 <system_clock_init+0x1cc>)
    42b0:	b2f0      	uxtb	r0, r6
    42b2:	58eb      	ldr	r3, [r5, r3]
    42b4:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    42b6:	3601      	adds	r6, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    42b8:	9301      	str	r3, [sp, #4]
    42ba:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    42bc:	2e25      	cmp	r6, #37	; 0x25
    42be:	d1f6      	bne.n	42ae <system_clock_init+0x2a>
	config->frequency           = 32768UL;
    42c0:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    42c2:	a80b      	add	r0, sp, #44	; 0x2c
    42c4:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    42c6:	0212      	lsls	r2, r2, #8
    42c8:	6082      	str	r2, [r0, #8]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    42ca:	2102      	movs	r1, #2
	config->enable_32khz_output = true;
    42cc:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    42ce:	7003      	strb	r3, [r0, #0]
	config->enable_1khz_output  = false;
    42d0:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    42d2:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    42d4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    42d6:	4b5f      	ldr	r3, [pc, #380]	; (4454 <system_clock_init+0x1d0>)
	config->enable_32khz_output = true;
    42d8:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    42da:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    42dc:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    42de:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    42e0:	58eb      	ldr	r3, [r5, r3]
    42e2:	9301      	str	r3, [sp, #4]
    42e4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    42e6:	4b5c      	ldr	r3, [pc, #368]	; (4458 <system_clock_init+0x1d4>)
    42e8:	2005      	movs	r0, #5
    42ea:	58eb      	ldr	r3, [r5, r3]
    42ec:	9301      	str	r3, [sp, #4]
    42ee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    42f0:	4b5a      	ldr	r3, [pc, #360]	; (445c <system_clock_init+0x1d8>)
    42f2:	2005      	movs	r0, #5
    42f4:	58eb      	ldr	r3, [r5, r3]
    42f6:	9301      	str	r3, [sp, #4]
    42f8:	4798      	blx	r3
    42fa:	2800      	cmp	r0, #0
    42fc:	d0f8      	beq.n	42f0 <system_clock_init+0x6c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    42fe:	9b03      	ldr	r3, [sp, #12]
    4300:	8a9a      	ldrh	r2, [r3, #20]
    4302:	2380      	movs	r3, #128	; 0x80
    4304:	4313      	orrs	r3, r2
    4306:	9a03      	ldr	r2, [sp, #12]
    4308:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    430a:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    430c:	223f      	movs	r2, #63	; 0x3f
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    430e:	8063      	strh	r3, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4310:	80a3      	strh	r3, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4312:	71a3      	strb	r3, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4314:	71e3      	strb	r3, [r4, #7]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    4316:	7063      	strb	r3, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4318:	4b51      	ldr	r3, [pc, #324]	; (4460 <system_clock_init+0x1dc>)
	config->fine_value      = 0xff / 4; /* Midpoint */
    431a:	8162      	strh	r2, [r4, #10]
    431c:	681b      	ldr	r3, [r3, #0]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    431e:	3a3b      	subs	r2, #59	; 0x3b
    4320:	7022      	strb	r2, [r4, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4322:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4324:	2b3f      	cmp	r3, #63	; 0x3f
    4326:	d100      	bne.n	432a <system_clock_init+0xa6>
		coarse = 0x1f;
    4328:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    432a:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    432c:	4b4d      	ldr	r3, [pc, #308]	; (4464 <system_clock_init+0x1e0>)
	config->run_in_standby  = false;
    432e:	2600      	movs	r6, #0
    4330:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4332:	2307      	movs	r3, #7
    4334:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4336:	233f      	movs	r3, #63	; 0x3f
	config->on_demand       = true;
    4338:	2701      	movs	r7, #1
    433a:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    433c:	4b4a      	ldr	r3, [pc, #296]	; (4468 <system_clock_init+0x1e4>)
    433e:	0020      	movs	r0, r4
    4340:	58eb      	ldr	r3, [r5, r3]
	config->division_factor    = 1;
    4342:	ac08      	add	r4, sp, #32
    4344:	9301      	str	r3, [sp, #4]
    4346:	4798      	blx	r3
	config->run_in_standby  = false;
    4348:	a807      	add	r0, sp, #28

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    434a:	4b48      	ldr	r3, [pc, #288]	; (446c <system_clock_init+0x1e8>)
    434c:	7046      	strb	r6, [r0, #1]
	config->on_demand       = true;
    434e:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4350:	7006      	strb	r6, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    4352:	58eb      	ldr	r3, [r5, r3]
    4354:	9301      	str	r3, [sp, #4]
    4356:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4358:	4b3f      	ldr	r3, [pc, #252]	; (4458 <system_clock_init+0x1d4>)
    435a:	2006      	movs	r0, #6
    435c:	58eb      	ldr	r3, [r5, r3]
    435e:	9304      	str	r3, [sp, #16]
    4360:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4362:	4b43      	ldr	r3, [pc, #268]	; (4470 <system_clock_init+0x1ec>)
    4364:	58eb      	ldr	r3, [r5, r3]
    4366:	9301      	str	r3, [sp, #4]
    4368:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    436a:	2305      	movs	r3, #5
    436c:	7023      	strb	r3, [r4, #0]
    436e:	4b41      	ldr	r3, [pc, #260]	; (4474 <system_clock_init+0x1f0>)
    4370:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    4372:	7066      	strb	r6, [r4, #1]
	config->run_in_standby     = false;
    4374:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    4376:	7266      	strb	r6, [r4, #9]
    4378:	58eb      	ldr	r3, [r5, r3]
    437a:	0021      	movs	r1, r4
    437c:	0038      	movs	r0, r7
    437e:	9301      	str	r3, [sp, #4]
    4380:	4798      	blx	r3
    4382:	4b3d      	ldr	r3, [pc, #244]	; (4478 <system_clock_init+0x1f4>)
    4384:	0038      	movs	r0, r7
    4386:	58eb      	ldr	r3, [r5, r3]
    4388:	9302      	str	r3, [sp, #8]
    438a:	4798      	blx	r3
    438c:	2305      	movs	r3, #5
    438e:	7023      	strb	r3, [r4, #0]
    4390:	2320      	movs	r3, #32
    4392:	0021      	movs	r1, r4
    4394:	6063      	str	r3, [r4, #4]
    4396:	2002      	movs	r0, #2
    4398:	9b01      	ldr	r3, [sp, #4]
	config->high_when_disabled = false;
    439a:	7066      	strb	r6, [r4, #1]
	config->output_enable      = false;
    439c:	7266      	strb	r6, [r4, #9]
    439e:	7227      	strb	r7, [r4, #8]
    43a0:	4798      	blx	r3
    43a2:	2002      	movs	r0, #2
    43a4:	9b02      	ldr	r3, [sp, #8]
    43a6:	4798      	blx	r3
    43a8:	2307      	movs	r3, #7
    43aa:	7023      	strb	r3, [r4, #0]
    43ac:	2306      	movs	r3, #6
    43ae:	0021      	movs	r1, r4
    43b0:	6063      	str	r3, [r4, #4]
    43b2:	2004      	movs	r0, #4
    43b4:	9b01      	ldr	r3, [sp, #4]
	config->high_when_disabled = false;
    43b6:	7066      	strb	r6, [r4, #1]
	config->run_in_standby     = false;
    43b8:	7226      	strb	r6, [r4, #8]
    43ba:	7267      	strb	r7, [r4, #9]
    43bc:	4798      	blx	r3
    43be:	2004      	movs	r0, #4
    43c0:	9b02      	ldr	r3, [sp, #8]
    43c2:	4798      	blx	r3
    43c4:	2305      	movs	r3, #5
    43c6:	0021      	movs	r1, r4
    43c8:	7023      	strb	r3, [r4, #0]
    43ca:	2006      	movs	r0, #6
    43cc:	9b01      	ldr	r3, [sp, #4]
	config->division_factor    = 1;
    43ce:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    43d0:	7066      	strb	r6, [r4, #1]
    43d2:	7227      	strb	r7, [r4, #8]
    43d4:	7267      	strb	r7, [r4, #9]
    43d6:	4798      	blx	r3
    43d8:	2006      	movs	r0, #6
    43da:	9b02      	ldr	r3, [sp, #8]
    43dc:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    43de:	4b1c      	ldr	r3, [pc, #112]	; (4450 <system_clock_init+0x1cc>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    43e0:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    43e2:	58eb      	ldr	r3, [r5, r3]
    43e4:	0021      	movs	r1, r4
    43e6:	0030      	movs	r0, r6
    43e8:	9305      	str	r3, [sp, #20]
    43ea:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    43ec:	4b23      	ldr	r3, [pc, #140]	; (447c <system_clock_init+0x1f8>)
    43ee:	0030      	movs	r0, r6
    43f0:	58eb      	ldr	r3, [r5, r3]
    43f2:	9305      	str	r3, [sp, #20]
    43f4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    43f6:	2007      	movs	r0, #7
    43f8:	9b04      	ldr	r3, [sp, #16]
    43fa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    43fc:	4b17      	ldr	r3, [pc, #92]	; (445c <system_clock_init+0x1d8>)
    43fe:	2007      	movs	r0, #7
    4400:	58eb      	ldr	r3, [r5, r3]
    4402:	9304      	str	r3, [sp, #16]
    4404:	4798      	blx	r3
    4406:	2800      	cmp	r0, #0
    4408:	d0f8      	beq.n	43fc <system_clock_init+0x178>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    440a:	9b03      	ldr	r3, [sp, #12]
	PM->CPUSEL.reg = (uint32_t)divider;
    440c:	2500      	movs	r5, #0
    440e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4410:	2380      	movs	r3, #128	; 0x80
    4412:	4313      	orrs	r3, r2
    4414:	9a03      	ldr	r2, [sp, #12]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4416:	0021      	movs	r1, r4
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    4418:	8493      	strh	r3, [r2, #36]	; 0x24
    441a:	4b19      	ldr	r3, [pc, #100]	; (4480 <system_clock_init+0x1fc>)
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    441c:	0028      	movs	r0, r5
    441e:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4420:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4422:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4424:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    4426:	2301      	movs	r3, #1
    4428:	6063      	str	r3, [r4, #4]
    442a:	3306      	adds	r3, #6
    442c:	7023      	strb	r3, [r4, #0]
    442e:	9b01      	ldr	r3, [sp, #4]
	config->high_when_disabled = false;
    4430:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    4432:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4434:	7265      	strb	r5, [r4, #9]
    4436:	4798      	blx	r3
    4438:	0028      	movs	r0, r5
    443a:	9b02      	ldr	r3, [sp, #8]
    443c:	4798      	blx	r3
#endif
}
    443e:	b015      	add	sp, #84	; 0x54
    4440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	40000800 	.word	0x40000800
    4448:	41004000 	.word	0x41004000
    444c:	0000983c 	.word	0x0000983c
    4450:	000000d8 	.word	0x000000d8
    4454:	00000270 	.word	0x00000270
    4458:	000002a8 	.word	0x000002a8
    445c:	000002c8 	.word	0x000002c8
    4460:	00806024 	.word	0x00806024
    4464:	000005dc 	.word	0x000005dc
    4468:	0000008c 	.word	0x0000008c
    446c:	00000144 	.word	0x00000144
    4470:	00000310 	.word	0x00000310
    4474:	0000012c 	.word	0x0000012c
    4478:	0000020c 	.word	0x0000020c
    447c:	0000027c 	.word	0x0000027c
    4480:	40000400 	.word	0x40000400

00004484 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4484:	4b01      	ldr	r3, [pc, #4]	; (448c <system_gclk_is_syncing+0x8>)
    4486:	7858      	ldrb	r0, [r3, #1]
    4488:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    448a:	4770      	bx	lr
    448c:	40000c00 	.word	0x40000c00

00004490 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4490:	2308      	movs	r3, #8
    4492:	4a05      	ldr	r2, [pc, #20]	; (44a8 <system_gclk_init+0x18>)
    4494:	6991      	ldr	r1, [r2, #24]
    4496:	430b      	orrs	r3, r1
    4498:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    449a:	2301      	movs	r3, #1
    449c:	4a03      	ldr	r2, [pc, #12]	; (44ac <system_gclk_init+0x1c>)
    449e:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    44a0:	7811      	ldrb	r1, [r2, #0]
    44a2:	4219      	tst	r1, r3
    44a4:	d1fc      	bne.n	44a0 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    44a6:	4770      	bx	lr
    44a8:	40000400 	.word	0x40000400
    44ac:	40000c00 	.word	0x40000c00

000044b0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    44b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    44b2:	780c      	ldrb	r4, [r1, #0]
{
    44b4:	4f28      	ldr	r7, [pc, #160]	; (4558 <system_gclk_gen_set_config+0xa8>)

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    44b6:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    44b8:	0224      	lsls	r4, r4, #8
{
    44ba:	447f      	add	r7, pc
    44bc:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    44be:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    44c0:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    44c2:	2b00      	cmp	r3, #0
    44c4:	d002      	beq.n	44cc <system_gclk_gen_set_config+0x1c>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    44c6:	2380      	movs	r3, #128	; 0x80
    44c8:	02db      	lsls	r3, r3, #11
    44ca:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    44cc:	7a4b      	ldrb	r3, [r1, #9]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d002      	beq.n	44d8 <system_gclk_gen_set_config+0x28>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    44d2:	2380      	movs	r3, #128	; 0x80
    44d4:	031b      	lsls	r3, r3, #12
    44d6:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    44d8:	684b      	ldr	r3, [r1, #4]
    44da:	2b01      	cmp	r3, #1
    44dc:	d912      	bls.n	4504 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    44de:	1e5d      	subs	r5, r3, #1
    44e0:	401d      	ands	r5, r3
    44e2:	2202      	movs	r2, #2
    44e4:	2d00      	cmp	r5, #0
    44e6:	d006      	beq.n	44f6 <system_gclk_gen_set_config+0x46>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    44e8:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    44ea:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    44ec:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    44ee:	029b      	lsls	r3, r3, #10
    44f0:	e007      	b.n	4502 <system_gclk_gen_set_config+0x52>
				div2_count++;
    44f2:	3501      	adds	r5, #1
						mask <<= 1) {
    44f4:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    44f6:	429a      	cmp	r2, r3
    44f8:	d3fb      	bcc.n	44f2 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    44fa:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    44fc:	022d      	lsls	r5, r5, #8
    44fe:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4500:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4502:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4504:	7a0b      	ldrb	r3, [r1, #8]
    4506:	2b00      	cmp	r3, #0
    4508:	d002      	beq.n	4510 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    450a:	2380      	movs	r3, #128	; 0x80
    450c:	039b      	lsls	r3, r3, #14
    450e:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    4510:	4b12      	ldr	r3, [pc, #72]	; (455c <system_gclk_gen_set_config+0xac>)
    4512:	447b      	add	r3, pc
    4514:	4798      	blx	r3
    4516:	2800      	cmp	r0, #0
    4518:	d1fa      	bne.n	4510 <system_gclk_gen_set_config+0x60>
	cpu_irq_enter_critical();
    451a:	4b11      	ldr	r3, [pc, #68]	; (4560 <system_gclk_gen_set_config+0xb0>)
    451c:	58fb      	ldr	r3, [r7, r3]
    451e:	9301      	str	r3, [sp, #4]
    4520:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4522:	4b10      	ldr	r3, [pc, #64]	; (4564 <system_gclk_gen_set_config+0xb4>)
    4524:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4526:	4b10      	ldr	r3, [pc, #64]	; (4568 <system_gclk_gen_set_config+0xb8>)
    4528:	447b      	add	r3, pc
    452a:	4798      	blx	r3
    452c:	2800      	cmp	r0, #0
    452e:	d1fa      	bne.n	4526 <system_gclk_gen_set_config+0x76>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4530:	4b0e      	ldr	r3, [pc, #56]	; (456c <system_gclk_gen_set_config+0xbc>)
    4532:	609d      	str	r5, [r3, #8]
    4534:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    4536:	4b0e      	ldr	r3, [pc, #56]	; (4570 <system_gclk_gen_set_config+0xc0>)
    4538:	447b      	add	r3, pc
    453a:	4798      	blx	r3
    453c:	2800      	cmp	r0, #0
    453e:	d1fa      	bne.n	4536 <system_gclk_gen_set_config+0x86>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4540:	2280      	movs	r2, #128	; 0x80
    4542:	686b      	ldr	r3, [r5, #4]
    4544:	0252      	lsls	r2, r2, #9
    4546:	4013      	ands	r3, r2
    4548:	431c      	orrs	r4, r3
	cpu_irq_leave_critical();
    454a:	4b0a      	ldr	r3, [pc, #40]	; (4574 <system_gclk_gen_set_config+0xc4>)
    454c:	606c      	str	r4, [r5, #4]
    454e:	58fb      	ldr	r3, [r7, r3]
    4550:	9301      	str	r3, [sp, #4]
    4552:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4554:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	0000962e 	.word	0x0000962e
    455c:	ffffff6f 	.word	0xffffff6f
    4560:	00000110 	.word	0x00000110
    4564:	40000c08 	.word	0x40000c08
    4568:	ffffff59 	.word	0xffffff59
    456c:	40000c00 	.word	0x40000c00
    4570:	ffffff49 	.word	0xffffff49
    4574:	00000014 	.word	0x00000014

00004578 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4578:	b537      	push	{r0, r1, r2, r4, r5, lr}
    457a:	4c0f      	ldr	r4, [pc, #60]	; (45b8 <system_gclk_gen_enable+0x40>)
    457c:	0005      	movs	r5, r0
    457e:	447c      	add	r4, pc
	while (system_gclk_is_syncing()) {
    4580:	4b0e      	ldr	r3, [pc, #56]	; (45bc <system_gclk_gen_enable+0x44>)
    4582:	447b      	add	r3, pc
    4584:	4798      	blx	r3
    4586:	2800      	cmp	r0, #0
    4588:	d1fa      	bne.n	4580 <system_gclk_gen_enable+0x8>
	cpu_irq_enter_critical();
    458a:	4b0d      	ldr	r3, [pc, #52]	; (45c0 <system_gclk_gen_enable+0x48>)
    458c:	58e3      	ldr	r3, [r4, r3]
    458e:	9301      	str	r3, [sp, #4]
    4590:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4592:	4b0c      	ldr	r3, [pc, #48]	; (45c4 <system_gclk_gen_enable+0x4c>)
    4594:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    4596:	4b0c      	ldr	r3, [pc, #48]	; (45c8 <system_gclk_gen_enable+0x50>)
    4598:	447b      	add	r3, pc
    459a:	4798      	blx	r3
    459c:	2800      	cmp	r0, #0
    459e:	d1fa      	bne.n	4596 <system_gclk_gen_enable+0x1e>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    45a0:	2380      	movs	r3, #128	; 0x80
    45a2:	4a0a      	ldr	r2, [pc, #40]	; (45cc <system_gclk_gen_enable+0x54>)
    45a4:	025b      	lsls	r3, r3, #9
    45a6:	6851      	ldr	r1, [r2, #4]
    45a8:	430b      	orrs	r3, r1
    45aa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    45ac:	4b08      	ldr	r3, [pc, #32]	; (45d0 <system_gclk_gen_enable+0x58>)
    45ae:	58e3      	ldr	r3, [r4, r3]
    45b0:	9301      	str	r3, [sp, #4]
    45b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    45b4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	0000956a 	.word	0x0000956a
    45bc:	fffffeff 	.word	0xfffffeff
    45c0:	00000110 	.word	0x00000110
    45c4:	40000c04 	.word	0x40000c04
    45c8:	fffffee9 	.word	0xfffffee9
    45cc:	40000c00 	.word	0x40000c00
    45d0:	00000014 	.word	0x00000014

000045d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    45d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45d6:	4d21      	ldr	r5, [pc, #132]	; (465c <system_gclk_gen_get_hz+0x88>)
    45d8:	0007      	movs	r7, r0
    45da:	447d      	add	r5, pc
	while (system_gclk_is_syncing()) {
    45dc:	4b20      	ldr	r3, [pc, #128]	; (4660 <system_gclk_gen_get_hz+0x8c>)
    45de:	447b      	add	r3, pc
    45e0:	4798      	blx	r3
    45e2:	2800      	cmp	r0, #0
    45e4:	d1fa      	bne.n	45dc <system_gclk_gen_get_hz+0x8>
	cpu_irq_enter_critical();
    45e6:	4b1f      	ldr	r3, [pc, #124]	; (4664 <system_gclk_gen_get_hz+0x90>)
    45e8:	58eb      	ldr	r3, [r5, r3]
    45ea:	9300      	str	r3, [sp, #0]
    45ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    45ee:	4b1e      	ldr	r3, [pc, #120]	; (4668 <system_gclk_gen_get_hz+0x94>)
    45f0:	701f      	strb	r7, [r3, #0]
    45f2:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    45f4:	4b1d      	ldr	r3, [pc, #116]	; (466c <system_gclk_gen_get_hz+0x98>)
    45f6:	447b      	add	r3, pc
    45f8:	4798      	blx	r3
    45fa:	2800      	cmp	r0, #0
    45fc:	d1fa      	bne.n	45f4 <system_gclk_gen_get_hz+0x20>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    45fe:	4e1c      	ldr	r6, [pc, #112]	; (4670 <system_gclk_gen_get_hz+0x9c>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4600:	4b1c      	ldr	r3, [pc, #112]	; (4674 <system_gclk_gen_get_hz+0xa0>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4602:	6870      	ldr	r0, [r6, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4604:	58eb      	ldr	r3, [r5, r3]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4606:	04c0      	lsls	r0, r0, #19
    4608:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    460a:	9300      	str	r3, [sp, #0]
    460c:	4798      	blx	r3
    460e:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4610:	9b01      	ldr	r3, [sp, #4]
    4612:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4614:	6873      	ldr	r3, [r6, #4]
    4616:	02db      	lsls	r3, r3, #11
    4618:	0fdb      	lsrs	r3, r3, #31
    461a:	9300      	str	r3, [sp, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    461c:	4b16      	ldr	r3, [pc, #88]	; (4678 <system_gclk_gen_get_hz+0xa4>)
    461e:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    4620:	4b16      	ldr	r3, [pc, #88]	; (467c <system_gclk_gen_get_hz+0xa8>)
    4622:	447b      	add	r3, pc
    4624:	4798      	blx	r3
    4626:	2800      	cmp	r0, #0
    4628:	d1fa      	bne.n	4620 <system_gclk_gen_get_hz+0x4c>
	cpu_irq_leave_critical();
    462a:	4b15      	ldr	r3, [pc, #84]	; (4680 <system_gclk_gen_get_hz+0xac>)
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    462c:	68b6      	ldr	r6, [r6, #8]
    462e:	58eb      	ldr	r3, [r5, r3]
    4630:	0236      	lsls	r6, r6, #8
    4632:	9301      	str	r3, [sp, #4]
    4634:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4636:	9b00      	ldr	r3, [sp, #0]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4638:	0c36      	lsrs	r6, r6, #16
	if (!divsel && divider > 1) {
    463a:	2b00      	cmp	r3, #0
    463c:	d10a      	bne.n	4654 <system_gclk_gen_get_hz+0x80>
    463e:	2e01      	cmp	r6, #1
    4640:	d906      	bls.n	4650 <system_gclk_gen_get_hz+0x7c>
		gen_input_hz /= divider;
    4642:	4b10      	ldr	r3, [pc, #64]	; (4684 <system_gclk_gen_get_hz+0xb0>)
    4644:	0020      	movs	r0, r4
    4646:	58eb      	ldr	r3, [r5, r3]
    4648:	0031      	movs	r1, r6
    464a:	9300      	str	r3, [sp, #0]
    464c:	4798      	blx	r3
    464e:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    4650:	0020      	movs	r0, r4
    4652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    4654:	3601      	adds	r6, #1
    4656:	40f4      	lsrs	r4, r6
	return gen_input_hz;
    4658:	e7fa      	b.n	4650 <system_gclk_gen_get_hz+0x7c>
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	0000950e 	.word	0x0000950e
    4660:	fffffea3 	.word	0xfffffea3
    4664:	00000110 	.word	0x00000110
    4668:	40000c04 	.word	0x40000c04
    466c:	fffffe8b 	.word	0xfffffe8b
    4670:	40000c00 	.word	0x40000c00
    4674:	000002b0 	.word	0x000002b0
    4678:	40000c08 	.word	0x40000c08
    467c:	fffffe5f 	.word	0xfffffe5f
    4680:	00000014 	.word	0x00000014
    4684:	00000250 	.word	0x00000250

00004688 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4688:	b537      	push	{r0, r1, r2, r4, r5, lr}
    468a:	0005      	movs	r5, r0
    468c:	4c09      	ldr	r4, [pc, #36]	; (46b4 <system_gclk_chan_enable+0x2c>)
	cpu_irq_enter_critical();
    468e:	4b0a      	ldr	r3, [pc, #40]	; (46b8 <system_gclk_chan_enable+0x30>)
    4690:	447c      	add	r4, pc
    4692:	58e3      	ldr	r3, [r4, r3]
    4694:	9301      	str	r3, [sp, #4]
    4696:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4698:	4b08      	ldr	r3, [pc, #32]	; (46bc <system_gclk_chan_enable+0x34>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    469a:	4a09      	ldr	r2, [pc, #36]	; (46c0 <system_gclk_chan_enable+0x38>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    469c:	701d      	strb	r5, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    469e:	2380      	movs	r3, #128	; 0x80
    46a0:	8851      	ldrh	r1, [r2, #2]
    46a2:	01db      	lsls	r3, r3, #7
    46a4:	430b      	orrs	r3, r1
    46a6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    46a8:	4b06      	ldr	r3, [pc, #24]	; (46c4 <system_gclk_chan_enable+0x3c>)
    46aa:	58e3      	ldr	r3, [r4, r3]
    46ac:	9301      	str	r3, [sp, #4]
    46ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    46b0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	00009458 	.word	0x00009458
    46b8:	00000110 	.word	0x00000110
    46bc:	40000c02 	.word	0x40000c02
    46c0:	40000c00 	.word	0x40000c00
    46c4:	00000014 	.word	0x00000014

000046c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    46c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    46ca:	0005      	movs	r5, r0
    46cc:	4c11      	ldr	r4, [pc, #68]	; (4714 <system_gclk_chan_disable+0x4c>)
	cpu_irq_enter_critical();
    46ce:	4b12      	ldr	r3, [pc, #72]	; (4718 <system_gclk_chan_disable+0x50>)
    46d0:	447c      	add	r4, pc
    46d2:	58e3      	ldr	r3, [r4, r3]
    46d4:	9301      	str	r3, [sp, #4]
    46d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    46d8:	4b10      	ldr	r3, [pc, #64]	; (471c <system_gclk_chan_disable+0x54>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    46da:	4a11      	ldr	r2, [pc, #68]	; (4720 <system_gclk_chan_disable+0x58>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    46dc:	701d      	strb	r5, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    46de:	4b11      	ldr	r3, [pc, #68]	; (4724 <system_gclk_chan_disable+0x5c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    46e0:	4d11      	ldr	r5, [pc, #68]	; (4728 <system_gclk_chan_disable+0x60>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    46e2:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    46e4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    46e6:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    46e8:	4011      	ands	r1, r2
    46ea:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    46ec:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    46ee:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    46f0:	4029      	ands	r1, r5
    46f2:	8059      	strh	r1, [r3, #2]
    46f4:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    46f6:	2280      	movs	r2, #128	; 0x80
    46f8:	01d2      	lsls	r2, r2, #7
    46fa:	885d      	ldrh	r5, [r3, #2]
    46fc:	4215      	tst	r5, r2
    46fe:	d1fc      	bne.n	46fa <system_gclk_chan_disable+0x32>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4700:	885a      	ldrh	r2, [r3, #2]
    4702:	0200      	lsls	r0, r0, #8
    4704:	400a      	ands	r2, r1
    4706:	4302      	orrs	r2, r0
    4708:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    470a:	4b08      	ldr	r3, [pc, #32]	; (472c <system_gclk_chan_disable+0x64>)
    470c:	58e3      	ldr	r3, [r4, r3]
    470e:	9301      	str	r3, [sp, #4]
    4710:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4712:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    4714:	00009418 	.word	0x00009418
    4718:	00000110 	.word	0x00000110
    471c:	40000c02 	.word	0x40000c02
    4720:	fffff0ff 	.word	0xfffff0ff
    4724:	40000c00 	.word	0x40000c00
    4728:	ffffbfff 	.word	0xffffbfff
    472c:	00000014 	.word	0x00000014

00004730 <system_gclk_chan_set_config>:
{
    4730:	b513      	push	{r0, r1, r4, lr}
    4732:	4b06      	ldr	r3, [pc, #24]	; (474c <system_gclk_chan_set_config+0x1c>)
	system_gclk_chan_disable(channel);
    4734:	4a06      	ldr	r2, [pc, #24]	; (4750 <system_gclk_chan_set_config+0x20>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4736:	780c      	ldrb	r4, [r1, #0]
{
    4738:	447b      	add	r3, pc
	system_gclk_chan_disable(channel);
    473a:	589b      	ldr	r3, [r3, r2]
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    473c:	0224      	lsls	r4, r4, #8
    473e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4740:	9301      	str	r3, [sp, #4]
    4742:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <system_gclk_chan_set_config+0x24>)
    4746:	b2a4      	uxth	r4, r4
    4748:	805c      	strh	r4, [r3, #2]
}
    474a:	bd13      	pop	{r0, r1, r4, pc}
    474c:	000093b0 	.word	0x000093b0
    4750:	000002d4 	.word	0x000002d4
    4754:	40000c00 	.word	0x40000c00

00004758 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4758:	b537      	push	{r0, r1, r2, r4, r5, lr}
    475a:	0004      	movs	r4, r0
    475c:	4d0a      	ldr	r5, [pc, #40]	; (4788 <system_gclk_chan_get_hz+0x30>)
	cpu_irq_enter_critical();
    475e:	4b0b      	ldr	r3, [pc, #44]	; (478c <system_gclk_chan_get_hz+0x34>)
    4760:	447d      	add	r5, pc
    4762:	58eb      	ldr	r3, [r5, r3]
    4764:	9301      	str	r3, [sp, #4]
    4766:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4768:	4b09      	ldr	r3, [pc, #36]	; (4790 <system_gclk_chan_get_hz+0x38>)
    476a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    476c:	4b09      	ldr	r3, [pc, #36]	; (4794 <system_gclk_chan_get_hz+0x3c>)
    476e:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    4770:	4b09      	ldr	r3, [pc, #36]	; (4798 <system_gclk_chan_get_hz+0x40>)
    4772:	0524      	lsls	r4, r4, #20
    4774:	58eb      	ldr	r3, [r5, r3]
    4776:	0f24      	lsrs	r4, r4, #28
    4778:	9301      	str	r3, [sp, #4]
    477a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    477c:	4b07      	ldr	r3, [pc, #28]	; (479c <system_gclk_chan_get_hz+0x44>)
    477e:	0020      	movs	r0, r4
    4780:	58eb      	ldr	r3, [r5, r3]
    4782:	9301      	str	r3, [sp, #4]
    4784:	4798      	blx	r3
}
    4786:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4788:	00009388 	.word	0x00009388
    478c:	00000110 	.word	0x00000110
    4790:	40000c02 	.word	0x40000c02
    4794:	40000c00 	.word	0x40000c00
    4798:	00000014 	.word	0x00000014
    479c:	00000114 	.word	0x00000114

000047a0 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    47a0:	b530      	push	{r4, r5, lr}
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    47a2:	2800      	cmp	r0, #0
    47a4:	db12      	blt.n	47cc <system_interrupt_set_priority+0x2c>
		uint8_t register_num = vector / 4;
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    47a6:	2503      	movs	r5, #3
    47a8:	1083      	asrs	r3, r0, #2
    47aa:	4028      	ands	r0, r5
    47ac:	40a8      	lsls	r0, r5

		NVIC->IP[register_num] =
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    47ae:	24c0      	movs	r4, #192	; 0xc0
    47b0:	3006      	adds	r0, #6
    47b2:	4085      	lsls	r5, r0
				(priority_level << priority_pos);
    47b4:	4081      	lsls	r1, r0
    47b6:	4a09      	ldr	r2, [pc, #36]	; (47dc <system_interrupt_set_priority+0x3c>)
    47b8:	009b      	lsls	r3, r3, #2
    47ba:	189b      	adds	r3, r3, r2
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    47bc:	00a4      	lsls	r4, r4, #2
    47be:	591a      	ldr	r2, [r3, r4]
    47c0:	43aa      	bics	r2, r5
    47c2:	4311      	orrs	r1, r2
		NVIC->IP[register_num] =
    47c4:	5119      	str	r1, [r3, r4]
	enum status_code status = STATUS_OK;
    47c6:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    47c8:	0018      	movs	r0, r3
    47ca:	bd30      	pop	{r4, r5, pc}
		status = STATUS_ERR_INVALID_ARG;
    47cc:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    47ce:	1c42      	adds	r2, r0, #1
    47d0:	d1fa      	bne.n	47c8 <system_interrupt_set_priority+0x28>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    47d2:	4b03      	ldr	r3, [pc, #12]	; (47e0 <system_interrupt_set_priority+0x40>)
    47d4:	0789      	lsls	r1, r1, #30
    47d6:	6219      	str	r1, [r3, #32]
    47d8:	e7f5      	b.n	47c6 <system_interrupt_set_priority+0x26>
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	e000e100 	.word	0xe000e100
    47e0:	e000ed00 	.word	0xe000ed00

000047e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    47e4:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    47e6:	78d5      	ldrb	r5, [r2, #3]
    47e8:	2d00      	cmp	r5, #0
    47ea:	d135      	bne.n	4858 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    47ec:	7814      	ldrb	r4, [r2, #0]
	uint32_t pin_cfg = 0;
    47ee:	002b      	movs	r3, r5
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    47f0:	2c80      	cmp	r4, #128	; 0x80
    47f2:	d003      	beq.n	47fc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    47f4:	2380      	movs	r3, #128	; 0x80
    47f6:	0624      	lsls	r4, r4, #24
    47f8:	025b      	lsls	r3, r3, #9
    47fa:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    47fc:	7854      	ldrb	r4, [r2, #1]
    47fe:	2602      	movs	r6, #2
    4800:	0027      	movs	r7, r4
    4802:	43b7      	bics	r7, r6
    4804:	d106      	bne.n	4814 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4806:	7896      	ldrb	r6, [r2, #2]
    4808:	2e00      	cmp	r6, #0
    480a:	d122      	bne.n	4852 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    480c:	2680      	movs	r6, #128	; 0x80
    480e:	02b6      	lsls	r6, r6, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4810:	4333      	orrs	r3, r6
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4812:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4814:	3c01      	subs	r4, #1
    4816:	2c01      	cmp	r4, #1
    4818:	d801      	bhi.n	481e <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    481a:	4c12      	ldr	r4, [pc, #72]	; (4864 <_system_pinmux_config+0x80>)
    481c:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    481e:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4820:	b28e      	uxth	r6, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4822:	05e4      	lsls	r4, r4, #23
    4824:	4334      	orrs	r4, r6
    4826:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4828:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    482a:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    482c:	0c0e      	lsrs	r6, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    482e:	0624      	lsls	r4, r4, #24
    4830:	4334      	orrs	r4, r6
    4832:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4834:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4836:	2d00      	cmp	r5, #0
    4838:	d10a      	bne.n	4850 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    483a:	035b      	lsls	r3, r3, #13
    483c:	d503      	bpl.n	4846 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    483e:	7893      	ldrb	r3, [r2, #2]
    4840:	2b01      	cmp	r3, #1
    4842:	d10c      	bne.n	485e <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    4844:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4846:	7853      	ldrb	r3, [r2, #1]
    4848:	3b01      	subs	r3, #1
    484a:	2b01      	cmp	r3, #1
    484c:	d800      	bhi.n	4850 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    484e:	6081      	str	r1, [r0, #8]
		}
	}
}
    4850:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4852:	26c0      	movs	r6, #192	; 0xc0
    4854:	02f6      	lsls	r6, r6, #11
    4856:	e7db      	b.n	4810 <_system_pinmux_config+0x2c>
		port->DIRCLR.reg = pin_mask;
    4858:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    485a:	2300      	movs	r3, #0
    485c:	e7df      	b.n	481e <_system_pinmux_config+0x3a>
				port->OUTCLR.reg = pin_mask;
    485e:	6141      	str	r1, [r0, #20]
    4860:	e7f1      	b.n	4846 <_system_pinmux_config+0x62>
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	fffbffff 	.word	0xfffbffff

00004868 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4868:	b510      	push	{r4, lr}
    486a:	0003      	movs	r3, r0
    486c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    486e:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    4870:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4872:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    4874:	4281      	cmp	r1, r0
    4876:	d102      	bne.n	487e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4878:	4905      	ldr	r1, [pc, #20]	; (4890 <system_pinmux_pin_set_config+0x28>)
    487a:	01e0      	lsls	r0, r4, #7
    487c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    487e:	211f      	movs	r1, #31
    4880:	400b      	ands	r3, r1
    4882:	391e      	subs	r1, #30
    4884:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4886:	4b03      	ldr	r3, [pc, #12]	; (4894 <system_pinmux_pin_set_config+0x2c>)
    4888:	447b      	add	r3, pc
    488a:	4798      	blx	r3
}
    488c:	bd10      	pop	{r4, pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	41004400 	.word	0x41004400
    4894:	ffffff59 	.word	0xffffff59

00004898 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4898:	4770      	bx	lr
	...

0000489c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    489c:	b513      	push	{r0, r1, r4, lr}
    489e:	4c0b      	ldr	r4, [pc, #44]	; (48cc <system_init+0x30>)
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    48a0:	4b0b      	ldr	r3, [pc, #44]	; (48d0 <system_init+0x34>)
{
    48a2:	447c      	add	r4, pc
	system_clock_init();
    48a4:	58e3      	ldr	r3, [r4, r3]
    48a6:	9301      	str	r3, [sp, #4]
    48a8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    48aa:	4b0a      	ldr	r3, [pc, #40]	; (48d4 <system_init+0x38>)
    48ac:	58e3      	ldr	r3, [r4, r3]
    48ae:	9301      	str	r3, [sp, #4]
    48b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    48b2:	4b09      	ldr	r3, [pc, #36]	; (48d8 <system_init+0x3c>)
    48b4:	58e3      	ldr	r3, [r4, r3]
    48b6:	9301      	str	r3, [sp, #4]
    48b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    48ba:	4b08      	ldr	r3, [pc, #32]	; (48dc <system_init+0x40>)
    48bc:	58e3      	ldr	r3, [r4, r3]
    48be:	9301      	str	r3, [sp, #4]
    48c0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    48c2:	4b07      	ldr	r3, [pc, #28]	; (48e0 <system_init+0x44>)
    48c4:	58e3      	ldr	r3, [r4, r3]
    48c6:	9301      	str	r3, [sp, #4]
    48c8:	4798      	blx	r3
}
    48ca:	bd13      	pop	{r0, r1, r4, pc}
    48cc:	00009246 	.word	0x00009246
    48d0:	0000029c 	.word	0x0000029c
    48d4:	00000204 	.word	0x00000204
    48d8:	00000290 	.word	0x00000290
    48dc:	000001b8 	.word	0x000001b8
    48e0:	00000108 	.word	0x00000108

000048e4 <cpu_irq_save>:
{
    48e4:	4a09      	ldr	r2, [pc, #36]	; (490c <cpu_irq_save+0x28>)
    48e6:	b084      	sub	sp, #16
    48e8:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48ea:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    48ee:	4259      	negs	r1, r3
    48f0:	414b      	adcs	r3, r1
    48f2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    48f4:	b672      	cpsid	i
    48f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    48fa:	4b05      	ldr	r3, [pc, #20]	; (4910 <cpu_irq_save+0x2c>)
    48fc:	58d3      	ldr	r3, [r2, r3]
    48fe:	9301      	str	r3, [sp, #4]
    4900:	2300      	movs	r3, #0
    4902:	9a01      	ldr	r2, [sp, #4]
    4904:	7013      	strb	r3, [r2, #0]
	return flags;
    4906:	9803      	ldr	r0, [sp, #12]
}
    4908:	b004      	add	sp, #16
    490a:	4770      	bx	lr
    490c:	00009200 	.word	0x00009200
    4910:	00000120 	.word	0x00000120

00004914 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    4914:	227f      	movs	r2, #127	; 0x7f
    4916:	4002      	ands	r2, r0
		return NULL;
    4918:	1e13      	subs	r3, r2, #0
	if ((ep == 0) || (ep == 0x80)) {
    491a:	d00a      	beq.n	4932 <udd_ep_get_job+0x1e>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    491c:	230f      	movs	r3, #15
    491e:	4003      	ands	r3, r0
    4920:	005b      	lsls	r3, r3, #1
    4922:	09c0      	lsrs	r0, r0, #7
    4924:	1818      	adds	r0, r3, r0
    4926:	2314      	movs	r3, #20
    4928:	3802      	subs	r0, #2
    492a:	4358      	muls	r0, r3
    492c:	4b02      	ldr	r3, [pc, #8]	; (4938 <udd_ep_get_job+0x24>)
    492e:	447b      	add	r3, pc
    4930:	181b      	adds	r3, r3, r0
	}
}
    4932:	0018      	movs	r0, r3
    4934:	4770      	bx	lr
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	1fffc3be 	.word	0x1fffc3be

0000493c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    493c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    493e:	798d      	ldrb	r5, [r1, #6]
{
    4940:	4f69      	ldr	r7, [pc, #420]	; (4ae8 <udd_ep_transfer_process+0x1ac>)

	if (ep & USB_EP_DIR_IN) {
    4942:	b26b      	sxtb	r3, r5
{
    4944:	447f      	add	r7, pc
    4946:	b087      	sub	sp, #28
    4948:	000e      	movs	r6, r1
	ptr_job = udd_ep_get_job(ep);
    494a:	0028      	movs	r0, r5
	if (ep & USB_EP_DIR_IN) {
    494c:	2b00      	cmp	r3, #0
    494e:	da5a      	bge.n	4a06 <udd_ep_transfer_process+0xca>
	ptr_job = udd_ep_get_job(ep);
    4950:	4b66      	ldr	r3, [pc, #408]	; (4aec <udd_ep_transfer_process+0x1b0>)
    4952:	447b      	add	r3, pc
    4954:	4798      	blx	r3
	ep_num = ep & USB_EP_ADDR_MASK;
    4956:	230f      	movs	r3, #15
    4958:	402b      	ands	r3, r5
    495a:	9302      	str	r3, [sp, #8]
	ep_size = ptr_job->ep_size;
    495c:	8a03      	ldrh	r3, [r0, #16]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    495e:	6881      	ldr	r1, [r0, #8]
	ep_size = ptr_job->ep_size;
    4960:	9303      	str	r3, [sp, #12]
	ptr_job->nb_trans += nb_trans;
    4962:	8876      	ldrh	r6, [r6, #2]
    4964:	68c3      	ldr	r3, [r0, #12]
	ptr_job = udd_ep_get_job(ep);
    4966:	0004      	movs	r4, r0
	ptr_job->nb_trans += nb_trans;
    4968:	18f6      	adds	r6, r6, r3
    496a:	7c83      	ldrb	r3, [r0, #18]
    496c:	60c6      	str	r6, [r0, #12]
    496e:	9301      	str	r3, [sp, #4]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    4970:	428e      	cmp	r6, r1
    4972:	d02f      	beq.n	49d4 <udd_ep_transfer_process+0x98>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4974:	1b8d      	subs	r5, r1, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4976:	4b5e      	ldr	r3, [pc, #376]	; (4af0 <udd_ep_transfer_process+0x1b4>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4978:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    497a:	429d      	cmp	r5, r3
    497c:	d908      	bls.n	4990 <udd_ep_transfer_process+0x54>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    497e:	4b5d      	ldr	r3, [pc, #372]	; (4af4 <udd_ep_transfer_process+0x1b8>)
    4980:	9903      	ldr	r1, [sp, #12]
    4982:	58fb      	ldr	r3, [r7, r3]
    4984:	485a      	ldr	r0, [pc, #360]	; (4af0 <udd_ep_transfer_process+0x1b4>)
    4986:	9304      	str	r3, [sp, #16]
    4988:	4798      	blx	r3
    498a:	4b59      	ldr	r3, [pc, #356]	; (4af0 <udd_ep_transfer_process+0x1b4>)
    498c:	1a5d      	subs	r5, r3, r1
    498e:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    4990:	9b01      	ldr	r3, [sp, #4]
    4992:	2100      	movs	r1, #0
    4994:	079b      	lsls	r3, r3, #30
    4996:	d509      	bpl.n	49ac <udd_ep_transfer_process+0x70>
    4998:	4b57      	ldr	r3, [pc, #348]	; (4af8 <udd_ep_transfer_process+0x1bc>)
    499a:	9903      	ldr	r1, [sp, #12]
    499c:	58fb      	ldr	r3, [r7, r3]
    499e:	0028      	movs	r0, r5
    49a0:	9301      	str	r3, [sp, #4]
    49a2:	4798      	blx	r3
    49a4:	b28b      	uxth	r3, r1
    49a6:	4259      	negs	r1, r3
    49a8:	4159      	adcs	r1, r3
    49aa:	b2c9      	uxtb	r1, r1
    49ac:	2202      	movs	r2, #2
    49ae:	7ca3      	ldrb	r3, [r4, #18]
    49b0:	0049      	lsls	r1, r1, #1
    49b2:	4393      	bics	r3, r2
    49b4:	4319      	orrs	r1, r3
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    49b6:	4b51      	ldr	r3, [pc, #324]	; (4afc <udd_ep_transfer_process+0x1c0>)
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    49b8:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    49ba:	58fb      	ldr	r3, [r7, r3]
    49bc:	6862      	ldr	r2, [r4, #4]
    49be:	9301      	str	r3, [sp, #4]
    49c0:	002b      	movs	r3, r5
    49c2:	1992      	adds	r2, r2, r6
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    49c4:	4c4e      	ldr	r4, [pc, #312]	; (4b00 <udd_ep_transfer_process+0x1c4>)
    49c6:	9801      	ldr	r0, [sp, #4]
    49c8:	593c      	ldr	r4, [r7, r4]
    49ca:	9902      	ldr	r1, [sp, #8]
    49cc:	9401      	str	r4, [sp, #4]
    49ce:	47a0      	blx	r4
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    49d0:	b007      	add	sp, #28
    49d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ptr_job->b_shortpacket) {
    49d4:	2302      	movs	r3, #2
    49d6:	9801      	ldr	r0, [sp, #4]
    49d8:	4018      	ands	r0, r3
    49da:	d009      	beq.n	49f0 <udd_ep_transfer_process+0xb4>
		ptr_job->b_shortpacket = false;
    49dc:	9a01      	ldr	r2, [sp, #4]
    49de:	439a      	bics	r2, r3
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    49e0:	4b46      	ldr	r3, [pc, #280]	; (4afc <udd_ep_transfer_process+0x1c0>)
		ptr_job->b_shortpacket = false;
    49e2:	74a2      	strb	r2, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    49e4:	58fb      	ldr	r3, [r7, r3]
    49e6:	6862      	ldr	r2, [r4, #4]
    49e8:	9301      	str	r3, [sp, #4]
    49ea:	1992      	adds	r2, r2, r6
    49ec:	2300      	movs	r3, #0
    49ee:	e7e9      	b.n	49c4 <udd_ep_transfer_process+0x88>
	ptr_job->busy = false;
    49f0:	2301      	movs	r3, #1
    49f2:	9a01      	ldr	r2, [sp, #4]
    49f4:	439a      	bics	r2, r3
	if (NULL != ptr_job->call_trans) {
    49f6:	6823      	ldr	r3, [r4, #0]
	ptr_job->busy = false;
    49f8:	74a2      	strb	r2, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    49fa:	2b00      	cmp	r3, #0
    49fc:	d0e8      	beq.n	49d0 <udd_ep_transfer_process+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    49fe:	002a      	movs	r2, r5
    4a00:	0031      	movs	r1, r6
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    4a02:	4798      	blx	r3
}
    4a04:	e7e4      	b.n	49d0 <udd_ep_transfer_process+0x94>
	ptr_job = udd_ep_get_job(ep);
    4a06:	4b3f      	ldr	r3, [pc, #252]	; (4b04 <udd_ep_transfer_process+0x1c8>)
    4a08:	447b      	add	r3, pc
    4a0a:	4798      	blx	r3
	ep_num = ep & USB_EP_ADDR_MASK;
    4a0c:	230f      	movs	r3, #15
    4a0e:	402b      	ands	r3, r5
    4a10:	9302      	str	r3, [sp, #8]
	ep_size = ptr_job->ep_size;
    4a12:	8a03      	ldrh	r3, [r0, #16]
	ptr_job = udd_ep_get_job(ep);
    4a14:	0004      	movs	r4, r0
	ep_size = ptr_job->ep_size;
    4a16:	9301      	str	r3, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
    4a18:	8833      	ldrh	r3, [r6, #0]
    4a1a:	9303      	str	r3, [sp, #12]
	if (ptr_job->b_use_out_cache_buffer) {
    4a1c:	7c83      	ldrb	r3, [r0, #18]
    4a1e:	075b      	lsls	r3, r3, #29
    4a20:	d517      	bpl.n	4a52 <udd_ep_transfer_process+0x116>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    4a22:	68c2      	ldr	r2, [r0, #12]
    4a24:	6843      	ldr	r3, [r0, #4]
    4a26:	4694      	mov	ip, r2
    4a28:	4463      	add	r3, ip
    4a2a:	9304      	str	r3, [sp, #16]
    4a2c:	4b32      	ldr	r3, [pc, #200]	; (4af8 <udd_ep_transfer_process+0x1bc>)
    4a2e:	9901      	ldr	r1, [sp, #4]
    4a30:	58fb      	ldr	r3, [r7, r3]
    4a32:	6880      	ldr	r0, [r0, #8]
    4a34:	9305      	str	r3, [sp, #20]
    4a36:	4798      	blx	r3
    4a38:	9b02      	ldr	r3, [sp, #8]
    4a3a:	000a      	movs	r2, r1
    4a3c:	4932      	ldr	r1, [pc, #200]	; (4b08 <udd_ep_transfer_process+0x1cc>)
    4a3e:	3b01      	subs	r3, #1
    4a40:	5879      	ldr	r1, [r7, r1]
    4a42:	019b      	lsls	r3, r3, #6
    4a44:	9105      	str	r1, [sp, #20]
    4a46:	1859      	adds	r1, r3, r1
    4a48:	4b30      	ldr	r3, [pc, #192]	; (4b0c <udd_ep_transfer_process+0x1d0>)
    4a4a:	9804      	ldr	r0, [sp, #16]
    4a4c:	58fb      	ldr	r3, [r7, r3]
    4a4e:	9304      	str	r3, [sp, #16]
    4a50:	4798      	blx	r3
	ptr_job->nb_trans += nb_trans;
    4a52:	9b03      	ldr	r3, [sp, #12]
    4a54:	68e2      	ldr	r2, [r4, #12]
    4a56:	189a      	adds	r2, r3, r2
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    4a58:	68a3      	ldr	r3, [r4, #8]
	ptr_job->nb_trans += nb_trans;
    4a5a:	60e2      	str	r2, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    4a5c:	429a      	cmp	r2, r3
    4a5e:	d900      	bls.n	4a62 <udd_ep_transfer_process+0x126>
		ptr_job->nb_trans = ptr_job->buf_size;
    4a60:	60e3      	str	r3, [r4, #12]
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    4a62:	88b2      	ldrh	r2, [r6, #4]
    4a64:	9903      	ldr	r1, [sp, #12]
    4a66:	428a      	cmp	r2, r1
    4a68:	d132      	bne.n	4ad0 <udd_ep_transfer_process+0x194>
    4a6a:	68e2      	ldr	r2, [r4, #12]
    4a6c:	9203      	str	r2, [sp, #12]
    4a6e:	4293      	cmp	r3, r2
    4a70:	d02e      	beq.n	4ad0 <udd_ep_transfer_process+0x194>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4a72:	1a9d      	subs	r5, r3, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4a74:	4e1e      	ldr	r6, [pc, #120]	; (4af0 <udd_ep_transfer_process+0x1b4>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4a76:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4a78:	42b5      	cmp	r5, r6
    4a7a:	d91d      	bls.n	4ab8 <udd_ep_transfer_process+0x17c>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    4a7c:	4b1d      	ldr	r3, [pc, #116]	; (4af4 <udd_ep_transfer_process+0x1b8>)
    4a7e:	9901      	ldr	r1, [sp, #4]
    4a80:	58fb      	ldr	r3, [r7, r3]
    4a82:	0030      	movs	r0, r6
    4a84:	9304      	str	r3, [sp, #16]
    4a86:	4798      	blx	r3
    4a88:	1a73      	subs	r3, r6, r1
    4a8a:	4a1c      	ldr	r2, [pc, #112]	; (4afc <udd_ep_transfer_process+0x1c0>)
			next_trans -= next_trans % ep_size;
    4a8c:	b29b      	uxth	r3, r3
    4a8e:	58b8      	ldr	r0, [r7, r2]
    4a90:	4a1f      	ldr	r2, [pc, #124]	; (4b10 <udd_ep_transfer_process+0x1d4>)
    4a92:	58be      	ldr	r6, [r7, r2]
		if (next_trans < ep_size) {
    4a94:	9a01      	ldr	r2, [sp, #4]
    4a96:	429a      	cmp	r2, r3
    4a98:	d916      	bls.n	4ac8 <udd_ep_transfer_process+0x18c>
			ptr_job->b_use_out_cache_buffer = true;
    4a9a:	2304      	movs	r3, #4
    4a9c:	7ca2      	ldrb	r2, [r4, #18]
    4a9e:	4313      	orrs	r3, r2
    4aa0:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    4aa2:	9b02      	ldr	r3, [sp, #8]
    4aa4:	1e5a      	subs	r2, r3, #1
    4aa6:	4b18      	ldr	r3, [pc, #96]	; (4b08 <udd_ep_transfer_process+0x1cc>)
    4aa8:	0192      	lsls	r2, r2, #6
    4aaa:	58fb      	ldr	r3, [r7, r3]
    4aac:	9303      	str	r3, [sp, #12]
    4aae:	18d2      	adds	r2, r2, r3
    4ab0:	9b01      	ldr	r3, [sp, #4]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4ab2:	9902      	ldr	r1, [sp, #8]
    4ab4:	47b0      	blx	r6
    4ab6:	e78b      	b.n	49d0 <udd_ep_transfer_process+0x94>
			next_trans -= next_trans % ep_size;
    4ab8:	4b0f      	ldr	r3, [pc, #60]	; (4af8 <udd_ep_transfer_process+0x1bc>)
    4aba:	9901      	ldr	r1, [sp, #4]
    4abc:	58fb      	ldr	r3, [r7, r3]
    4abe:	0028      	movs	r0, r5
    4ac0:	9304      	str	r3, [sp, #16]
    4ac2:	4798      	blx	r3
    4ac4:	1a6b      	subs	r3, r5, r1
    4ac6:	e7e0      	b.n	4a8a <udd_ep_transfer_process+0x14e>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    4ac8:	6862      	ldr	r2, [r4, #4]
    4aca:	9903      	ldr	r1, [sp, #12]
    4acc:	1852      	adds	r2, r2, r1
    4ace:	e7f0      	b.n	4ab2 <udd_ep_transfer_process+0x176>
	ptr_job->busy = false;
    4ad0:	2201      	movs	r2, #1
    4ad2:	7ca3      	ldrb	r3, [r4, #18]
    4ad4:	4393      	bics	r3, r2
    4ad6:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    4ad8:	6823      	ldr	r3, [r4, #0]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d100      	bne.n	4ae0 <udd_ep_transfer_process+0x1a4>
    4ade:	e777      	b.n	49d0 <udd_ep_transfer_process+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    4ae0:	002a      	movs	r2, r5
    4ae2:	68e1      	ldr	r1, [r4, #12]
    4ae4:	2000      	movs	r0, #0
    4ae6:	e78c      	b.n	4a02 <udd_ep_transfer_process+0xc6>
    4ae8:	000091a4 	.word	0x000091a4
    4aec:	ffffffbf 	.word	0xffffffbf
    4af0:	00001fff 	.word	0x00001fff
    4af4:	00000338 	.word	0x00000338
    4af8:	000002b4 	.word	0x000002b4
    4afc:	000000b0 	.word	0x000000b0
    4b00:	00000348 	.word	0x00000348
    4b04:	ffffff09 	.word	0xffffff09
    4b08:	00000020 	.word	0x00000020
    4b0c:	000000c0 	.word	0x000000c0
    4b10:	0000017c 	.word	0x0000017c

00004b14 <udd_ctrl_stall_data>:
/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4b14:	2205      	movs	r2, #5
{
    4b16:	b513      	push	{r0, r1, r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4b18:	4b0a      	ldr	r3, [pc, #40]	; (4b44 <udd_ctrl_stall_data+0x30>)
{
    4b1a:	4c0b      	ldr	r4, [pc, #44]	; (4b48 <udd_ctrl_stall_data+0x34>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4b1c:	447b      	add	r3, pc
    4b1e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    4b20:	4b0a      	ldr	r3, [pc, #40]	; (4b4c <udd_ctrl_stall_data+0x38>)
{
    4b22:	447c      	add	r4, pc
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    4b24:	58e3      	ldr	r3, [r4, r3]
    4b26:	2180      	movs	r1, #128	; 0x80
    4b28:	9300      	str	r3, [sp, #0]
    4b2a:	0018      	movs	r0, r3
    4b2c:	4b08      	ldr	r3, [pc, #32]	; (4b50 <udd_ctrl_stall_data+0x3c>)
    4b2e:	58e3      	ldr	r3, [r4, r3]
    4b30:	9301      	str	r3, [sp, #4]
    4b32:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    4b34:	4b07      	ldr	r3, [pc, #28]	; (4b54 <udd_ctrl_stall_data+0x40>)
    4b36:	9800      	ldr	r0, [sp, #0]
    4b38:	58e3      	ldr	r3, [r4, r3]
    4b3a:	2100      	movs	r1, #0
    4b3c:	9300      	str	r3, [sp, #0]
    4b3e:	4798      	blx	r3
}
    4b40:	bd13      	pop	{r0, r1, r4, pc}
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	1fffc1ce 	.word	0x1fffc1ce
    4b48:	00008fc6 	.word	0x00008fc6
    4b4c:	000000b0 	.word	0x000000b0
    4b50:	000002bc 	.word	0x000002bc
    4b54:	0000026c 	.word	0x0000026c

00004b58 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    4b58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4b5a:	4d28      	ldr	r5, [pc, #160]	; (4bfc <_usb_on_bus_reset+0xa4>)
	// Reset USB Device Stack Core
	udc_reset();
    4b5c:	4b28      	ldr	r3, [pc, #160]	; (4c00 <_usb_on_bus_reset+0xa8>)
{
    4b5e:	447d      	add	r5, pc
    4b60:	0004      	movs	r4, r0
	udc_reset();
    4b62:	58eb      	ldr	r3, [r5, r3]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    4b64:	ae03      	add	r6, sp, #12
	udc_reset();
    4b66:	9301      	str	r3, [sp, #4]
    4b68:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    4b6a:	2380      	movs	r3, #128	; 0x80
    4b6c:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    4b6e:	0030      	movs	r0, r6
    4b70:	7293      	strb	r3, [r2, #10]
    4b72:	4b24      	ldr	r3, [pc, #144]	; (4c04 <_usb_on_bus_reset+0xac>)
    4b74:	58eb      	ldr	r3, [r5, r3]
    4b76:	9301      	str	r3, [sp, #4]
    4b78:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    4b7a:	2303      	movs	r3, #3
    4b7c:	7073      	strb	r3, [r6, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    4b7e:	4b22      	ldr	r3, [pc, #136]	; (4c08 <_usb_on_bus_reset+0xb0>)
    4b80:	0031      	movs	r1, r6
    4b82:	58eb      	ldr	r3, [r5, r3]
    4b84:	0020      	movs	r0, r4
    4b86:	9301      	str	r3, [sp, #4]
    4b88:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    4b8a:	4b20      	ldr	r3, [pc, #128]	; (4c0c <_usb_on_bus_reset+0xb4>)
    4b8c:	0020      	movs	r0, r4
    4b8e:	58eb      	ldr	r3, [r5, r3]
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    4b90:	4e1f      	ldr	r6, [pc, #124]	; (4c10 <_usb_on_bus_reset+0xb8>)
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    4b92:	9301      	str	r3, [sp, #4]
    4b94:	0019      	movs	r1, r3
    4b96:	4b1f      	ldr	r3, [pc, #124]	; (4c14 <_usb_on_bus_reset+0xbc>)
    4b98:	58eb      	ldr	r3, [r5, r3]
    4b9a:	9301      	str	r3, [sp, #4]
    4b9c:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    4b9e:	4b1e      	ldr	r3, [pc, #120]	; (4c18 <_usb_on_bus_reset+0xc0>)
    4ba0:	59ae      	ldr	r6, [r5, r6]
    4ba2:	447b      	add	r3, pc
    4ba4:	2202      	movs	r2, #2
    4ba6:	2100      	movs	r1, #0
    4ba8:	0020      	movs	r0, r4
    4baa:	47b0      	blx	r6
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    4bac:	2200      	movs	r2, #0
    4bae:	4b1b      	ldr	r3, [pc, #108]	; (4c1c <_usb_on_bus_reset+0xc4>)
    4bb0:	0011      	movs	r1, r2
    4bb2:	447b      	add	r3, pc
    4bb4:	0020      	movs	r0, r4
    4bb6:	47b0      	blx	r6
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    4bb8:	4b19      	ldr	r3, [pc, #100]	; (4c20 <_usb_on_bus_reset+0xc8>)
    4bba:	2201      	movs	r2, #1
    4bbc:	447b      	add	r3, pc
    4bbe:	2100      	movs	r1, #0
    4bc0:	0020      	movs	r0, r4
    4bc2:	47b0      	blx	r6
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    4bc4:	4b17      	ldr	r3, [pc, #92]	; (4c24 <_usb_on_bus_reset+0xcc>)
    4bc6:	2202      	movs	r2, #2
    4bc8:	58ed      	ldr	r5, [r5, r3]
    4bca:	2100      	movs	r1, #0
    4bcc:	0020      	movs	r0, r4
    4bce:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    4bd0:	2200      	movs	r2, #0
    4bd2:	0020      	movs	r0, r4
    4bd4:	0011      	movs	r1, r2
    4bd6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    4bd8:	2201      	movs	r2, #1
    4bda:	2100      	movs	r1, #0
    4bdc:	0020      	movs	r0, r4
    4bde:	47a8      	blx	r5
    4be0:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    4be2:	4a11      	ldr	r2, [pc, #68]	; (4c28 <_usb_on_bus_reset+0xd0>)
    4be4:	890b      	ldrh	r3, [r1, #8]
    4be6:	401a      	ands	r2, r3
    4be8:	2380      	movs	r3, #128	; 0x80
    4bea:	00db      	lsls	r3, r3, #3
    4bec:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    4bee:	2200      	movs	r2, #0
    4bf0:	810b      	strh	r3, [r1, #8]
    4bf2:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <_usb_on_bus_reset+0xd4>)
    4bf4:	447b      	add	r3, pc
    4bf6:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    4bf8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	00008f8a 	.word	0x00008f8a
    4c00:	000000cc 	.word	0x000000cc
    4c04:	00000138 	.word	0x00000138
    4c08:	000000a0 	.word	0x000000a0
    4c0c:	0000030c 	.word	0x0000030c
    4c10:	0000018c 	.word	0x0000018c
    4c14:	000000ec 	.word	0x000000ec
    4c18:	0000027b 	.word	0x0000027b
    4c1c:	0000078b 	.word	0x0000078b
    4c20:	000000c9 	.word	0x000000c9
    4c24:	000002f4 	.word	0x000002f4
    4c28:	fffff3ff 	.word	0xfffff3ff
    4c2c:	1fffc0f6 	.word	0x1fffc0f6

00004c30 <udd_ctrl_send_zlp_in>:
{
    4c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4c32:	2203      	movs	r2, #3
    4c34:	4b0d      	ldr	r3, [pc, #52]	; (4c6c <udd_ctrl_send_zlp_in+0x3c>)
{
    4c36:	4c0e      	ldr	r4, [pc, #56]	; (4c70 <udd_ctrl_send_zlp_in+0x40>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4c38:	447b      	add	r3, pc
    4c3a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4c3c:	4b0d      	ldr	r3, [pc, #52]	; (4c74 <udd_ctrl_send_zlp_in+0x44>)
{
    4c3e:	447c      	add	r4, pc
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4c40:	58e3      	ldr	r3, [r4, r3]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    4c42:	4d0d      	ldr	r5, [pc, #52]	; (4c78 <udd_ctrl_send_zlp_in+0x48>)
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4c44:	9301      	str	r3, [sp, #4]
    4c46:	4b0d      	ldr	r3, [pc, #52]	; (4c7c <udd_ctrl_send_zlp_in+0x4c>)
    4c48:	9901      	ldr	r1, [sp, #4]
    4c4a:	58e3      	ldr	r3, [r4, r3]
    4c4c:	9300      	str	r3, [sp, #0]
    4c4e:	0018      	movs	r0, r3
    4c50:	4b0b      	ldr	r3, [pc, #44]	; (4c80 <udd_ctrl_send_zlp_in+0x50>)
    4c52:	58e3      	ldr	r3, [r4, r3]
    4c54:	9301      	str	r3, [sp, #4]
    4c56:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    4c58:	4b0a      	ldr	r3, [pc, #40]	; (4c84 <udd_ctrl_send_zlp_in+0x54>)
    4c5a:	9800      	ldr	r0, [sp, #0]
    4c5c:	58e2      	ldr	r2, [r4, r3]
    4c5e:	2300      	movs	r3, #0
    4c60:	5964      	ldr	r4, [r4, r5]
    4c62:	6892      	ldr	r2, [r2, #8]
    4c64:	0019      	movs	r1, r3
    4c66:	9400      	str	r4, [sp, #0]
    4c68:	47a0      	blx	r4
}
    4c6a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    4c6c:	1fffc0b2 	.word	0x1fffc0b2
    4c70:	00008eaa 	.word	0x00008eaa
    4c74:	0000030c 	.word	0x0000030c
    4c78:	00000348 	.word	0x00000348
    4c7c:	000000b0 	.word	0x000000b0
    4c80:	000000ec 	.word	0x000000ec
    4c84:	00000224 	.word	0x00000224

00004c88 <_usb_ep0_on_tansfer_fail>:
{
    4c88:	b507      	push	{r0, r1, r2, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    4c8a:	7989      	ldrb	r1, [r1, #6]
{
    4c8c:	4b11      	ldr	r3, [pc, #68]	; (4cd4 <_usb_ep0_on_tansfer_fail+0x4c>)
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    4c8e:	b24a      	sxtb	r2, r1
{
    4c90:	447b      	add	r3, pc
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    4c92:	2a00      	cmp	r2, #0
    4c94:	da13      	bge.n	4cbe <_usb_ep0_on_tansfer_fail+0x36>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    4c96:	4a10      	ldr	r2, [pc, #64]	; (4cd8 <_usb_ep0_on_tansfer_fail+0x50>)
    4c98:	447a      	add	r2, pc
    4c9a:	7812      	ldrb	r2, [r2, #0]
    4c9c:	2a01      	cmp	r2, #1
    4c9e:	d103      	bne.n	4ca8 <_usb_ep0_on_tansfer_fail+0x20>
		udd_ctrl_send_zlp_in();
    4ca0:	4b0e      	ldr	r3, [pc, #56]	; (4cdc <_usb_ep0_on_tansfer_fail+0x54>)
    4ca2:	447b      	add	r3, pc
    4ca4:	4798      	blx	r3
}
    4ca6:	bd07      	pop	{r0, r1, r2, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    4ca8:	2a04      	cmp	r2, #4
    4caa:	d1fc      	bne.n	4ca6 <_usb_ep0_on_tansfer_fail+0x1e>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    4cac:	4a0c      	ldr	r2, [pc, #48]	; (4ce0 <_usb_ep0_on_tansfer_fail+0x58>)
    4cae:	589a      	ldr	r2, [r3, r2]
    4cb0:	9201      	str	r2, [sp, #4]
    4cb2:	0010      	movs	r0, r2
    4cb4:	4a0b      	ldr	r2, [pc, #44]	; (4ce4 <_usb_ep0_on_tansfer_fail+0x5c>)
    4cb6:	589b      	ldr	r3, [r3, r2]
    4cb8:	9301      	str	r3, [sp, #4]
    4cba:	4798      	blx	r3
}
    4cbc:	e7f3      	b.n	4ca6 <_usb_ep0_on_tansfer_fail+0x1e>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    4cbe:	480a      	ldr	r0, [pc, #40]	; (4ce8 <_usb_ep0_on_tansfer_fail+0x60>)
    4cc0:	4478      	add	r0, pc
    4cc2:	7802      	ldrb	r2, [r0, #0]
    4cc4:	2a02      	cmp	r2, #2
    4cc6:	d102      	bne.n	4cce <_usb_ep0_on_tansfer_fail+0x46>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4cc8:	2304      	movs	r3, #4
    4cca:	7003      	strb	r3, [r0, #0]
    4ccc:	e7eb      	b.n	4ca6 <_usb_ep0_on_tansfer_fail+0x1e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4cce:	2a03      	cmp	r2, #3
    4cd0:	d1e9      	bne.n	4ca6 <_usb_ep0_on_tansfer_fail+0x1e>
    4cd2:	e7eb      	b.n	4cac <_usb_ep0_on_tansfer_fail+0x24>
    4cd4:	00008e58 	.word	0x00008e58
    4cd8:	1fffc052 	.word	0x1fffc052
    4cdc:	ffffff8b 	.word	0xffffff8b
    4ce0:	000000b0 	.word	0x000000b0
    4ce4:	000002bc 	.word	0x000002bc
    4ce8:	1fffc02a 	.word	0x1fffc02a

00004cec <udd_ctrl_in_sent>:
{
    4cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4cee:	4d27      	ldr	r5, [pc, #156]	; (4d8c <udd_ctrl_in_sent+0xa0>)
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4cf0:	4a27      	ldr	r2, [pc, #156]	; (4d90 <udd_ctrl_in_sent+0xa4>)
{
    4cf2:	447d      	add	r5, pc
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4cf4:	4f27      	ldr	r7, [pc, #156]	; (4d94 <udd_ctrl_in_sent+0xa8>)
    4cf6:	58ae      	ldr	r6, [r5, r2]
    4cf8:	447f      	add	r7, pc
    4cfa:	89b4      	ldrh	r4, [r6, #12]
    4cfc:	883b      	ldrh	r3, [r7, #0]
    4cfe:	4a26      	ldr	r2, [pc, #152]	; (4d98 <udd_ctrl_in_sent+0xac>)
    4d00:	1ae4      	subs	r4, r4, r3
    4d02:	58aa      	ldr	r2, [r5, r2]
    4d04:	b2a4      	uxth	r4, r4
    4d06:	9200      	str	r2, [sp, #0]
	if (0 == nb_remain) {
    4d08:	2c00      	cmp	r4, #0
    4d0a:	d123      	bne.n	4d54 <udd_ctrl_in_sent+0x68>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    4d0c:	4a23      	ldr	r2, [pc, #140]	; (4d9c <udd_ctrl_in_sent+0xb0>)
    4d0e:	447a      	add	r2, pc
    4d10:	8811      	ldrh	r1, [r2, #0]
    4d12:	185b      	adds	r3, r3, r1
    4d14:	b29b      	uxth	r3, r3
    4d16:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    4d18:	88f2      	ldrh	r2, [r6, #6]
    4d1a:	429a      	cmp	r2, r3
    4d1c:	d004      	beq.n	4d28 <udd_ctrl_in_sent+0x3c>
    4d1e:	4b20      	ldr	r3, [pc, #128]	; (4da0 <udd_ctrl_in_sent+0xb4>)
    4d20:	447b      	add	r3, pc
    4d22:	781b      	ldrb	r3, [r3, #0]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d00d      	beq.n	4d44 <udd_ctrl_in_sent+0x58>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4d28:	2204      	movs	r2, #4
    4d2a:	4b1e      	ldr	r3, [pc, #120]	; (4da4 <udd_ctrl_in_sent+0xb8>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4d2c:	9800      	ldr	r0, [sp, #0]
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4d2e:	447b      	add	r3, pc
    4d30:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    4d32:	4b1d      	ldr	r3, [pc, #116]	; (4da8 <udd_ctrl_in_sent+0xbc>)
    4d34:	58eb      	ldr	r3, [r5, r3]
    4d36:	9301      	str	r3, [sp, #4]
    4d38:	0019      	movs	r1, r3
    4d3a:	4b1c      	ldr	r3, [pc, #112]	; (4dac <udd_ctrl_in_sent+0xc0>)
    4d3c:	58eb      	ldr	r3, [r5, r3]
    4d3e:	9300      	str	r3, [sp, #0]
    4d40:	4798      	blx	r3
}
    4d42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    4d44:	6973      	ldr	r3, [r6, #20]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d01b      	beq.n	4d82 <udd_ctrl_in_sent+0x96>
    4d4a:	4798      	blx	r3
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d018      	beq.n	4d82 <udd_ctrl_in_sent+0x96>
			udd_ctrl_payload_nb_trans = 0;
    4d50:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    4d52:	89b4      	ldrh	r4, [r6, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    4d54:	2c3f      	cmp	r4, #63	; 0x3f
    4d56:	d914      	bls.n	4d82 <udd_ctrl_in_sent+0x96>
		b_shortpacket = false;
    4d58:	2200      	movs	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    4d5a:	2440      	movs	r4, #64	; 0x40
		b_shortpacket = false;
    4d5c:	4b14      	ldr	r3, [pc, #80]	; (4db0 <udd_ctrl_in_sent+0xc4>)
    4d5e:	447b      	add	r3, pc
    4d60:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    4d62:	4f14      	ldr	r7, [pc, #80]	; (4db4 <udd_ctrl_in_sent+0xc8>)
    4d64:	68b2      	ldr	r2, [r6, #8]
    4d66:	447f      	add	r7, pc
    4d68:	4e13      	ldr	r6, [pc, #76]	; (4db8 <udd_ctrl_in_sent+0xcc>)
    4d6a:	883b      	ldrh	r3, [r7, #0]
    4d6c:	59ad      	ldr	r5, [r5, r6]
    4d6e:	18d2      	adds	r2, r2, r3
    4d70:	9800      	ldr	r0, [sp, #0]
    4d72:	0023      	movs	r3, r4
    4d74:	2100      	movs	r1, #0
    4d76:	9500      	str	r5, [sp, #0]
    4d78:	47a8      	blx	r5
	udd_ctrl_payload_nb_trans += nb_remain;
    4d7a:	883b      	ldrh	r3, [r7, #0]
    4d7c:	18e4      	adds	r4, r4, r3
    4d7e:	803c      	strh	r4, [r7, #0]
    4d80:	e7df      	b.n	4d42 <udd_ctrl_in_sent+0x56>
		b_shortpacket = true;
    4d82:	2201      	movs	r2, #1
    4d84:	4b0d      	ldr	r3, [pc, #52]	; (4dbc <udd_ctrl_in_sent+0xd0>)
    4d86:	447b      	add	r3, pc
    4d88:	701a      	strb	r2, [r3, #0]
    4d8a:	e7ea      	b.n	4d62 <udd_ctrl_in_sent+0x76>
    4d8c:	00008df6 	.word	0x00008df6
    4d90:	00000224 	.word	0x00000224
    4d94:	1fffbfee 	.word	0x1fffbfee
    4d98:	000000b0 	.word	0x000000b0
    4d9c:	1fffbfda 	.word	0x1fffbfda
    4da0:	1fffbfc4 	.word	0x1fffbfc4
    4da4:	1fffbfbc 	.word	0x1fffbfbc
    4da8:	0000030c 	.word	0x0000030c
    4dac:	000000ec 	.word	0x000000ec
    4db0:	1fffbf86 	.word	0x1fffbf86
    4db4:	1fffbf80 	.word	0x1fffbf80
    4db8:	00000348 	.word	0x00000348
    4dbc:	1fffbf5e 	.word	0x1fffbf5e

00004dc0 <_usb_on_sof_notify>:
{
    4dc0:	b507      	push	{r0, r1, r2, lr}
    4dc2:	4b03      	ldr	r3, [pc, #12]	; (4dd0 <_usb_on_sof_notify+0x10>)
	udc_sof_notify();
    4dc4:	4a03      	ldr	r2, [pc, #12]	; (4dd4 <_usb_on_sof_notify+0x14>)
{
    4dc6:	447b      	add	r3, pc
	udc_sof_notify();
    4dc8:	589b      	ldr	r3, [r3, r2]
    4dca:	9301      	str	r3, [sp, #4]
    4dcc:	4798      	blx	r3
}
    4dce:	bd07      	pop	{r0, r1, r2, pc}
    4dd0:	00008d22 	.word	0x00008d22
    4dd4:	000001c8 	.word	0x000001c8

00004dd8 <cpu_irq_restore.part.0>:
static inline void cpu_irq_restore(irqflags_t flags)
    4dd8:	4b06      	ldr	r3, [pc, #24]	; (4df4 <cpu_irq_restore.part.0+0x1c>)
		cpu_irq_enable();
    4dda:	4a07      	ldr	r2, [pc, #28]	; (4df8 <cpu_irq_restore.part.0+0x20>)
static inline void cpu_irq_restore(irqflags_t flags)
    4ddc:	447b      	add	r3, pc
		cpu_irq_enable();
    4dde:	589b      	ldr	r3, [r3, r2]
static inline void cpu_irq_restore(irqflags_t flags)
    4de0:	b082      	sub	sp, #8
		cpu_irq_enable();
    4de2:	9301      	str	r3, [sp, #4]
    4de4:	2301      	movs	r3, #1
    4de6:	9a01      	ldr	r2, [sp, #4]
    4de8:	7013      	strb	r3, [r2, #0]
    4dea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4dee:	b662      	cpsie	i
}
    4df0:	b002      	add	sp, #8
    4df2:	4770      	bx	lr
    4df4:	00008d0c 	.word	0x00008d0c
    4df8:	00000120 	.word	0x00000120

00004dfc <udd_wait_clock_ready>:
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    4dfc:	4b07      	ldr	r3, [pc, #28]	; (4e1c <udd_wait_clock_ready+0x20>)
    4dfe:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4e00:	0692      	lsls	r2, r2, #26
    4e02:	d405      	bmi.n	4e10 <udd_wait_clock_ready+0x14>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4e04:	21d0      	movs	r1, #208	; 0xd0
    4e06:	68da      	ldr	r2, [r3, #12]
    4e08:	400a      	ands	r2, r1
    4e0a:	2ad0      	cmp	r2, #208	; 0xd0
    4e0c:	d1fb      	bne.n	4e06 <udd_wait_clock_ready+0xa>
}
    4e0e:	4770      	bx	lr
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    4e10:	2210      	movs	r2, #16
    4e12:	68d9      	ldr	r1, [r3, #12]
    4e14:	4211      	tst	r1, r2
    4e16:	d0fc      	beq.n	4e12 <udd_wait_clock_ready+0x16>
    4e18:	e7f9      	b.n	4e0e <udd_wait_clock_ready+0x12>
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	40000800 	.word	0x40000800

00004e20 <_usb_ep0_on_setup>:
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4e20:	4b36      	ldr	r3, [pc, #216]	; (4efc <_usb_ep0_on_setup+0xdc>)
{
    4e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4e24:	447b      	add	r3, pc
{
    4e26:	4d36      	ldr	r5, [pc, #216]	; (4f00 <_usb_ep0_on_setup+0xe0>)
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4e28:	781b      	ldrb	r3, [r3, #0]
{
    4e2a:	447d      	add	r5, pc
    4e2c:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d009      	beq.n	4e46 <_usb_ep0_on_setup+0x26>
		if (NULL != udd_g_ctrlreq.callback) {
    4e32:	4b34      	ldr	r3, [pc, #208]	; (4f04 <_usb_ep0_on_setup+0xe4>)
    4e34:	58eb      	ldr	r3, [r5, r3]
    4e36:	691b      	ldr	r3, [r3, #16]
    4e38:	2b00      	cmp	r3, #0
    4e3a:	d000      	beq.n	4e3e <_usb_ep0_on_setup+0x1e>
			udd_g_ctrlreq.callback();
    4e3c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    4e3e:	2200      	movs	r2, #0
    4e40:	4b31      	ldr	r3, [pc, #196]	; (4f08 <_usb_ep0_on_setup+0xe8>)
    4e42:	447b      	add	r3, pc
    4e44:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    4e46:	8823      	ldrh	r3, [r4, #0]
    4e48:	2b08      	cmp	r3, #8
    4e4a:	d003      	beq.n	4e54 <_usb_ep0_on_setup+0x34>
		udd_ctrl_stall_data();
    4e4c:	4b2f      	ldr	r3, [pc, #188]	; (4f0c <_usb_ep0_on_setup+0xec>)
    4e4e:	447b      	add	r3, pc
				udd_ctrl_send_zlp_in();
    4e50:	4798      	blx	r3
}
    4e52:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    4e54:	4b2b      	ldr	r3, [pc, #172]	; (4f04 <_usb_ep0_on_setup+0xe4>)
    4e56:	58ee      	ldr	r6, [r5, r3]
    4e58:	4b2d      	ldr	r3, [pc, #180]	; (4f10 <_usb_ep0_on_setup+0xf0>)
    4e5a:	58ec      	ldr	r4, [r5, r3]
    4e5c:	7823      	ldrb	r3, [r4, #0]
    4e5e:	7033      	strb	r3, [r6, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    4e60:	7863      	ldrb	r3, [r4, #1]
    4e62:	7073      	strb	r3, [r6, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    4e64:	78e2      	ldrb	r2, [r4, #3]
    4e66:	78a3      	ldrb	r3, [r4, #2]
    4e68:	0212      	lsls	r2, r2, #8
    4e6a:	189b      	adds	r3, r3, r2
    4e6c:	8073      	strh	r3, [r6, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    4e6e:	7962      	ldrb	r2, [r4, #5]
    4e70:	7923      	ldrb	r3, [r4, #4]
    4e72:	0212      	lsls	r2, r2, #8
    4e74:	189b      	adds	r3, r3, r2
    4e76:	80b3      	strh	r3, [r6, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    4e78:	79e2      	ldrb	r2, [r4, #7]
    4e7a:	79a3      	ldrb	r3, [r4, #6]
    4e7c:	0212      	lsls	r2, r2, #8
    4e7e:	189b      	adds	r3, r3, r2
    4e80:	80f3      	strh	r3, [r6, #6]
		if (false == udc_process_setup()) {
    4e82:	4b24      	ldr	r3, [pc, #144]	; (4f14 <_usb_ep0_on_setup+0xf4>)
    4e84:	58eb      	ldr	r3, [r5, r3]
    4e86:	9301      	str	r3, [sp, #4]
    4e88:	4798      	blx	r3
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d0de      	beq.n	4e4c <_usb_ep0_on_setup+0x2c>
		} else if (Udd_setup_is_in()) {
    4e8e:	7833      	ldrb	r3, [r6, #0]
    4e90:	2b7f      	cmp	r3, #127	; 0x7f
    4e92:	d917      	bls.n	4ec4 <_usb_ep0_on_setup+0xa4>
			udd_ctrl_prev_payload_nb_trans = 0;
    4e94:	2100      	movs	r1, #0
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    4e96:	2202      	movs	r2, #2
			udd_ctrl_prev_payload_nb_trans = 0;
    4e98:	4b1f      	ldr	r3, [pc, #124]	; (4f18 <_usb_ep0_on_setup+0xf8>)
    4e9a:	447b      	add	r3, pc
    4e9c:	8019      	strh	r1, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    4e9e:	4b1f      	ldr	r3, [pc, #124]	; (4f1c <_usb_ep0_on_setup+0xfc>)
    4ea0:	447b      	add	r3, pc
    4ea2:	8019      	strh	r1, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    4ea4:	4b1e      	ldr	r3, [pc, #120]	; (4f20 <_usb_ep0_on_setup+0x100>)
    4ea6:	447b      	add	r3, pc
    4ea8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4eaa:	4b1e      	ldr	r3, [pc, #120]	; (4f24 <_usb_ep0_on_setup+0x104>)
    4eac:	0022      	movs	r2, r4
    4eae:	58eb      	ldr	r3, [r5, r3]
    4eb0:	4c1d      	ldr	r4, [pc, #116]	; (4f28 <_usb_ep0_on_setup+0x108>)
    4eb2:	9301      	str	r3, [sp, #4]
    4eb4:	592c      	ldr	r4, [r5, r4]
    4eb6:	2340      	movs	r3, #64	; 0x40
    4eb8:	9801      	ldr	r0, [sp, #4]
    4eba:	9401      	str	r4, [sp, #4]
    4ebc:	47a0      	blx	r4
			udd_ctrl_in_sent();
    4ebe:	4b1b      	ldr	r3, [pc, #108]	; (4f2c <_usb_ep0_on_setup+0x10c>)
    4ec0:	447b      	add	r3, pc
    4ec2:	e7c5      	b.n	4e50 <_usb_ep0_on_setup+0x30>
			if(0 == udd_g_ctrlreq.req.wLength) {
    4ec4:	88f3      	ldrh	r3, [r6, #6]
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	d102      	bne.n	4ed0 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_send_zlp_in();
    4eca:	4b19      	ldr	r3, [pc, #100]	; (4f30 <_usb_ep0_on_setup+0x110>)
    4ecc:	447b      	add	r3, pc
    4ece:	e7bf      	b.n	4e50 <_usb_ep0_on_setup+0x30>
				udd_ctrl_prev_payload_nb_trans = 0;
    4ed0:	2100      	movs	r1, #0
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    4ed2:	2201      	movs	r2, #1
				udd_ctrl_prev_payload_nb_trans = 0;
    4ed4:	4b17      	ldr	r3, [pc, #92]	; (4f34 <_usb_ep0_on_setup+0x114>)
    4ed6:	447b      	add	r3, pc
    4ed8:	8019      	strh	r1, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    4eda:	4b17      	ldr	r3, [pc, #92]	; (4f38 <_usb_ep0_on_setup+0x118>)
    4edc:	447b      	add	r3, pc
    4ede:	8019      	strh	r1, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    4ee0:	4b16      	ldr	r3, [pc, #88]	; (4f3c <_usb_ep0_on_setup+0x11c>)
    4ee2:	447b      	add	r3, pc
    4ee4:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4ee6:	4b0f      	ldr	r3, [pc, #60]	; (4f24 <_usb_ep0_on_setup+0x104>)
    4ee8:	0022      	movs	r2, r4
    4eea:	58eb      	ldr	r3, [r5, r3]
    4eec:	4c0e      	ldr	r4, [pc, #56]	; (4f28 <_usb_ep0_on_setup+0x108>)
    4eee:	9301      	str	r3, [sp, #4]
    4ef0:	592c      	ldr	r4, [r5, r4]
    4ef2:	9801      	ldr	r0, [sp, #4]
    4ef4:	2340      	movs	r3, #64	; 0x40
    4ef6:	9401      	str	r4, [sp, #4]
    4ef8:	47a0      	blx	r4
    4efa:	e7aa      	b.n	4e52 <_usb_ep0_on_setup+0x32>
    4efc:	1fffbec6 	.word	0x1fffbec6
    4f00:	00008cbe 	.word	0x00008cbe
    4f04:	00000224 	.word	0x00000224
    4f08:	1fffbea8 	.word	0x1fffbea8
    4f0c:	fffffcc3 	.word	0xfffffcc3
    4f10:	0000030c 	.word	0x0000030c
    4f14:	00000170 	.word	0x00000170
    4f18:	1fffbe4e 	.word	0x1fffbe4e
    4f1c:	1fffbe46 	.word	0x1fffbe46
    4f20:	1fffbe44 	.word	0x1fffbe44
    4f24:	000000b0 	.word	0x000000b0
    4f28:	0000017c 	.word	0x0000017c
    4f2c:	fffffe29 	.word	0xfffffe29
    4f30:	fffffd61 	.word	0xfffffd61
    4f34:	1fffbe12 	.word	0x1fffbe12
    4f38:	1fffbe0a 	.word	0x1fffbe0a
    4f3c:	1fffbe08 	.word	0x1fffbe08

00004f40 <udd_sleep_mode>:
	enum sleepmgr_mode sleep_mode[] = {
    4f40:	2300      	movs	r3, #0
{
    4f42:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f44:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
    4f46:	ac03      	add	r4, sp, #12
    4f48:	7023      	strb	r3, [r4, #0]
    4f4a:	3303      	adds	r3, #3
    4f4c:	7063      	strb	r3, [r4, #1]
    4f4e:	3b01      	subs	r3, #1
    4f50:	70a3      	strb	r3, [r4, #2]
    4f52:	3b01      	subs	r3, #1
    4f54:	70e3      	strb	r3, [r4, #3]
	if (udd_state == new_state) {
    4f56:	4b1e      	ldr	r3, [pc, #120]	; (4fd0 <udd_sleep_mode+0x90>)
{
    4f58:	4e1e      	ldr	r6, [pc, #120]	; (4fd4 <udd_sleep_mode+0x94>)
	if (udd_state == new_state) {
    4f5a:	447b      	add	r3, pc
    4f5c:	781f      	ldrb	r7, [r3, #0]
{
    4f5e:	447e      	add	r6, pc
    4f60:	0005      	movs	r5, r0
	if (udd_state == new_state) {
    4f62:	4287      	cmp	r7, r0
    4f64:	d031      	beq.n	4fca <udd_sleep_mode+0x8a>
	if (new_state != UDD_STATE_OFF) {
    4f66:	2800      	cmp	r0, #0
    4f68:	d018      	beq.n	4f9c <udd_sleep_mode+0x5c>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4f6a:	5c23      	ldrb	r3, [r4, r0]
    4f6c:	9300      	str	r3, [sp, #0]
    4f6e:	4b1a      	ldr	r3, [pc, #104]	; (4fd8 <udd_sleep_mode+0x98>)
    4f70:	9a00      	ldr	r2, [sp, #0]
    4f72:	58f3      	ldr	r3, [r6, r3]
    4f74:	9301      	str	r3, [sp, #4]
    4f76:	5c9b      	ldrb	r3, [r3, r2]
    4f78:	2bff      	cmp	r3, #255	; 0xff
    4f7a:	d100      	bne.n	4f7e <udd_sleep_mode+0x3e>
    4f7c:	e7fe      	b.n	4f7c <udd_sleep_mode+0x3c>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    4f7e:	4b17      	ldr	r3, [pc, #92]	; (4fdc <udd_sleep_mode+0x9c>)
    4f80:	447b      	add	r3, pc
    4f82:	4798      	blx	r3

	++sleepmgr_locks[mode];
    4f84:	9a00      	ldr	r2, [sp, #0]
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	9900      	ldr	r1, [sp, #0]
    4f8a:	5c9b      	ldrb	r3, [r3, r2]
    4f8c:	9a01      	ldr	r2, [sp, #4]
    4f8e:	3301      	adds	r3, #1
    4f90:	5453      	strb	r3, [r2, r1]
	if (cpu_irq_is_enabled_flags(flags))
    4f92:	2800      	cmp	r0, #0
    4f94:	d002      	beq.n	4f9c <udd_sleep_mode+0x5c>
    4f96:	4b12      	ldr	r3, [pc, #72]	; (4fe0 <udd_sleep_mode+0xa0>)
    4f98:	447b      	add	r3, pc
    4f9a:	4798      	blx	r3
	if (udd_state != UDD_STATE_OFF) {
    4f9c:	2f00      	cmp	r7, #0
    4f9e:	d011      	beq.n	4fc4 <udd_sleep_mode+0x84>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4fa0:	4b0d      	ldr	r3, [pc, #52]	; (4fd8 <udd_sleep_mode+0x98>)
    4fa2:	5de4      	ldrb	r4, [r4, r7]
    4fa4:	58f6      	ldr	r6, [r6, r3]
    4fa6:	5d33      	ldrb	r3, [r6, r4]
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d100      	bne.n	4fae <udd_sleep_mode+0x6e>
    4fac:	e7fe      	b.n	4fac <udd_sleep_mode+0x6c>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    4fae:	4b0d      	ldr	r3, [pc, #52]	; (4fe4 <udd_sleep_mode+0xa4>)
    4fb0:	447b      	add	r3, pc
    4fb2:	4798      	blx	r3

	--sleepmgr_locks[mode];
    4fb4:	5d33      	ldrb	r3, [r6, r4]
    4fb6:	3b01      	subs	r3, #1
    4fb8:	5533      	strb	r3, [r6, r4]
    4fba:	2800      	cmp	r0, #0
    4fbc:	d002      	beq.n	4fc4 <udd_sleep_mode+0x84>
    4fbe:	4b0a      	ldr	r3, [pc, #40]	; (4fe8 <udd_sleep_mode+0xa8>)
    4fc0:	447b      	add	r3, pc
    4fc2:	4798      	blx	r3
	udd_state = new_state;
    4fc4:	4b09      	ldr	r3, [pc, #36]	; (4fec <udd_sleep_mode+0xac>)
    4fc6:	447b      	add	r3, pc
    4fc8:	701d      	strb	r5, [r3, #0]
}
    4fca:	b005      	add	sp, #20
    4fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	1fffbe0a 	.word	0x1fffbe0a
    4fd4:	00008b8a 	.word	0x00008b8a
    4fd8:	00000264 	.word	0x00000264
    4fdc:	fffff961 	.word	0xfffff961
    4fe0:	fffffe3d 	.word	0xfffffe3d
    4fe4:	fffff931 	.word	0xfffff931
    4fe8:	fffffe15 	.word	0xfffffe15
    4fec:	1fffbd9e 	.word	0x1fffbd9e

00004ff0 <_usb_device_lpm_suspend>:
{
    4ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4ff2:	4c0c      	ldr	r4, [pc, #48]	; (5024 <_usb_device_lpm_suspend+0x34>)
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    4ff4:	4b0c      	ldr	r3, [pc, #48]	; (5028 <_usb_device_lpm_suspend+0x38>)
{
    4ff6:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    4ff8:	58e3      	ldr	r3, [r4, r3]
    4ffa:	2106      	movs	r1, #6
    4ffc:	9301      	str	r3, [sp, #4]
    4ffe:	0018      	movs	r0, r3
    5000:	4b0a      	ldr	r3, [pc, #40]	; (502c <_usb_device_lpm_suspend+0x3c>)
    5002:	58e5      	ldr	r5, [r4, r3]
    5004:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5006:	2104      	movs	r1, #4
    5008:	9801      	ldr	r0, [sp, #4]
    500a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    500c:	4b08      	ldr	r3, [pc, #32]	; (5030 <_usb_device_lpm_suspend+0x40>)
    500e:	2102      	movs	r1, #2
    5010:	58e3      	ldr	r3, [r4, r3]
    5012:	9801      	ldr	r0, [sp, #4]
    5014:	9301      	str	r3, [sp, #4]
    5016:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    5018:	4b06      	ldr	r3, [pc, #24]	; (5034 <_usb_device_lpm_suspend+0x44>)
    501a:	2002      	movs	r0, #2
    501c:	447b      	add	r3, pc
    501e:	4798      	blx	r3
}
    5020:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	00008af2 	.word	0x00008af2
    5028:	000000b0 	.word	0x000000b0
    502c:	0000007c 	.word	0x0000007c
    5030:	000001b4 	.word	0x000001b4
    5034:	ffffff21 	.word	0xffffff21

00005038 <_usb_on_wakeup>:
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();
    5038:	4b11      	ldr	r3, [pc, #68]	; (5080 <_usb_on_wakeup+0x48>)
{
    503a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	udd_wait_clock_ready();
    503c:	447b      	add	r3, pc
{
    503e:	4c11      	ldr	r4, [pc, #68]	; (5084 <_usb_on_wakeup+0x4c>)
	udd_wait_clock_ready();
    5040:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5042:	4b11      	ldr	r3, [pc, #68]	; (5088 <_usb_on_wakeup+0x50>)
{
    5044:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5046:	58e3      	ldr	r3, [r4, r3]
    5048:	2102      	movs	r1, #2
    504a:	9300      	str	r3, [sp, #0]
    504c:	0018      	movs	r0, r3
    504e:	4b0f      	ldr	r3, [pc, #60]	; (508c <_usb_on_wakeup+0x54>)
    5050:	58e3      	ldr	r3, [r4, r3]
    5052:	9301      	str	r3, [sp, #4]
    5054:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5056:	4b0e      	ldr	r3, [pc, #56]	; (5090 <_usb_on_wakeup+0x58>)
    5058:	2104      	movs	r1, #4
    505a:	58e5      	ldr	r5, [r4, r3]
    505c:	9800      	ldr	r0, [sp, #0]
    505e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5060:	4b0c      	ldr	r3, [pc, #48]	; (5094 <_usb_on_wakeup+0x5c>)
    5062:	4a0d      	ldr	r2, [pc, #52]	; (5098 <_usb_on_wakeup+0x60>)
    5064:	58e3      	ldr	r3, [r4, r3]
    5066:	447a      	add	r2, pc
    5068:	2106      	movs	r1, #6
    506a:	9800      	ldr	r0, [sp, #0]
    506c:	9301      	str	r3, [sp, #4]
    506e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5070:	2106      	movs	r1, #6
    5072:	9800      	ldr	r0, [sp, #0]
    5074:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    5076:	4b09      	ldr	r3, [pc, #36]	; (509c <_usb_on_wakeup+0x64>)
    5078:	2003      	movs	r0, #3
    507a:	447b      	add	r3, pc
    507c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    507e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5080:	fffffdbd 	.word	0xfffffdbd
    5084:	00008aa4 	.word	0x00008aa4
    5088:	000000b0 	.word	0x000000b0
    508c:	0000007c 	.word	0x0000007c
    5090:	000001b4 	.word	0x000001b4
    5094:	00000060 	.word	0x00000060
    5098:	ffffff87 	.word	0xffffff87
    509c:	fffffec3 	.word	0xfffffec3

000050a0 <_usb_on_suspend>:
{
    50a0:	b513      	push	{r0, r1, r4, lr}
    50a2:	4c0b      	ldr	r4, [pc, #44]	; (50d0 <_usb_on_suspend+0x30>)
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    50a4:	4b0b      	ldr	r3, [pc, #44]	; (50d4 <_usb_on_suspend+0x34>)
{
    50a6:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    50a8:	58e3      	ldr	r3, [r4, r3]
    50aa:	2104      	movs	r1, #4
    50ac:	9300      	str	r3, [sp, #0]
    50ae:	0018      	movs	r0, r3
    50b0:	4b09      	ldr	r3, [pc, #36]	; (50d8 <_usb_on_suspend+0x38>)
    50b2:	58e3      	ldr	r3, [r4, r3]
    50b4:	9301      	str	r3, [sp, #4]
    50b6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    50b8:	4b08      	ldr	r3, [pc, #32]	; (50dc <_usb_on_suspend+0x3c>)
    50ba:	2102      	movs	r1, #2
    50bc:	58e3      	ldr	r3, [r4, r3]
    50be:	9800      	ldr	r0, [sp, #0]
    50c0:	9300      	str	r3, [sp, #0]
    50c2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    50c4:	4b06      	ldr	r3, [pc, #24]	; (50e0 <_usb_on_suspend+0x40>)
    50c6:	2001      	movs	r0, #1
    50c8:	447b      	add	r3, pc
    50ca:	4798      	blx	r3
}
    50cc:	bd13      	pop	{r0, r1, r4, pc}
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	00008a42 	.word	0x00008a42
    50d4:	000000b0 	.word	0x000000b0
    50d8:	0000007c 	.word	0x0000007c
    50dc:	000001b4 	.word	0x000001b4
    50e0:	fffffe75 	.word	0xfffffe75

000050e4 <udd_ep_abort>:
{
    50e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    50e6:	0004      	movs	r4, r0
    50e8:	4b0e      	ldr	r3, [pc, #56]	; (5124 <udd_ep_abort+0x40>)
	usb_device_endpoint_abort_job(&usb_device, ep);
    50ea:	4a0f      	ldr	r2, [pc, #60]	; (5128 <udd_ep_abort+0x44>)
{
    50ec:	447b      	add	r3, pc
	usb_device_endpoint_abort_job(&usb_device, ep);
    50ee:	589a      	ldr	r2, [r3, r2]
    50f0:	0001      	movs	r1, r0
    50f2:	9201      	str	r2, [sp, #4]
    50f4:	0010      	movs	r0, r2
    50f6:	4a0d      	ldr	r2, [pc, #52]	; (512c <udd_ep_abort+0x48>)
    50f8:	589b      	ldr	r3, [r3, r2]
    50fa:	9301      	str	r3, [sp, #4]
    50fc:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    50fe:	4b0c      	ldr	r3, [pc, #48]	; (5130 <udd_ep_abort+0x4c>)
    5100:	0020      	movs	r0, r4
    5102:	447b      	add	r3, pc
    5104:	4798      	blx	r3
    5106:	0003      	movs	r3, r0
	if (!ptr_job->busy) {
    5108:	7c82      	ldrb	r2, [r0, #18]
    510a:	2001      	movs	r0, #1
    510c:	4202      	tst	r2, r0
    510e:	d007      	beq.n	5120 <udd_ep_abort+0x3c>
	if (NULL != ptr_job->call_trans) {
    5110:	681d      	ldr	r5, [r3, #0]
	ptr_job->busy = false;
    5112:	4382      	bics	r2, r0
    5114:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    5116:	2d00      	cmp	r5, #0
    5118:	d002      	beq.n	5120 <udd_ep_abort+0x3c>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    511a:	0022      	movs	r2, r4
    511c:	68d9      	ldr	r1, [r3, #12]
    511e:	47a8      	blx	r5
}
    5120:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	000089fc 	.word	0x000089fc
    5128:	000000b0 	.word	0x000000b0
    512c:	00000008 	.word	0x00000008
    5130:	fffff80f 	.word	0xfffff80f

00005134 <udd_is_high_speed>:
    5134:	2000      	movs	r0, #0
    5136:	4770      	bx	lr

00005138 <udd_get_frame_number>:
{
    5138:	4b04      	ldr	r3, [pc, #16]	; (514c <udd_get_frame_number+0x14>)
    513a:	4a05      	ldr	r2, [pc, #20]	; (5150 <udd_get_frame_number+0x18>)
    513c:	447b      	add	r3, pc
    513e:	589b      	ldr	r3, [r3, r2]
}
    5140:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    5142:	8a18      	ldrh	r0, [r3, #16]
    5144:	0480      	lsls	r0, r0, #18
    5146:	0d40      	lsrs	r0, r0, #21
    5148:	4770      	bx	lr
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	000089ac 	.word	0x000089ac
    5150:	000000b0 	.word	0x000000b0

00005154 <udd_get_micro_frame_number>:
{
    5154:	4b03      	ldr	r3, [pc, #12]	; (5164 <udd_get_micro_frame_number+0x10>)
    5156:	4a04      	ldr	r2, [pc, #16]	; (5168 <udd_get_micro_frame_number+0x14>)
    5158:	447b      	add	r3, pc
    515a:	589b      	ldr	r3, [r3, r2]
}
    515c:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    515e:	8a18      	ldrh	r0, [r3, #16]
    5160:	b280      	uxth	r0, r0
    5162:	4770      	bx	lr
    5164:	00008990 	.word	0x00008990
    5168:	000000b0 	.word	0x000000b0

0000516c <udd_ep_free>:
{
    516c:	b5f0      	push	{r4, r5, r6, r7, lr}
    516e:	0005      	movs	r5, r0
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    5170:	2700      	movs	r7, #0
{
    5172:	4c15      	ldr	r4, [pc, #84]	; (51c8 <udd_ep_free+0x5c>)
	usb_device_endpoint_get_config_defaults(&config_ep);
    5174:	4b15      	ldr	r3, [pc, #84]	; (51cc <udd_ep_free+0x60>)
{
    5176:	b085      	sub	sp, #20
    5178:	447c      	add	r4, pc
	usb_device_endpoint_get_config_defaults(&config_ep);
    517a:	ae03      	add	r6, sp, #12
    517c:	58e3      	ldr	r3, [r4, r3]
    517e:	0030      	movs	r0, r6
    5180:	9300      	str	r3, [sp, #0]
    5182:	4798      	blx	r3
	udd_ep_abort(ep);
    5184:	4b12      	ldr	r3, [pc, #72]	; (51d0 <udd_ep_free+0x64>)
    5186:	0028      	movs	r0, r5
    5188:	58e3      	ldr	r3, [r4, r3]
    518a:	9300      	str	r3, [sp, #0]
    518c:	4798      	blx	r3
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    518e:	4b11      	ldr	r3, [pc, #68]	; (51d4 <udd_ep_free+0x68>)
	config_ep.ep_address = ep;
    5190:	7035      	strb	r5, [r6, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    5192:	70f7      	strb	r7, [r6, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    5194:	58e3      	ldr	r3, [r4, r3]
    5196:	0031      	movs	r1, r6
    5198:	9300      	str	r3, [sp, #0]
    519a:	0018      	movs	r0, r3
    519c:	4b0e      	ldr	r3, [pc, #56]	; (51d8 <udd_ep_free+0x6c>)
    519e:	58e3      	ldr	r3, [r4, r3]
    51a0:	9301      	str	r3, [sp, #4]
    51a2:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    51a4:	210f      	movs	r1, #15
    51a6:	4b0d      	ldr	r3, [pc, #52]	; (51dc <udd_ep_free+0x70>)
    51a8:	4029      	ands	r1, r5
    51aa:	58e3      	ldr	r3, [r4, r3]
    51ac:	003a      	movs	r2, r7
    51ae:	9800      	ldr	r0, [sp, #0]
    51b0:	9301      	str	r3, [sp, #4]
    51b2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    51b4:	4b0a      	ldr	r3, [pc, #40]	; (51e0 <udd_ep_free+0x74>)
    51b6:	9800      	ldr	r0, [sp, #0]
    51b8:	58e3      	ldr	r3, [r4, r3]
    51ba:	003a      	movs	r2, r7
    51bc:	0029      	movs	r1, r5
    51be:	9300      	str	r3, [sp, #0]
    51c0:	4798      	blx	r3
}
    51c2:	b005      	add	sp, #20
    51c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	00008970 	.word	0x00008970
    51cc:	00000138 	.word	0x00000138
    51d0:	000001f0 	.word	0x000001f0
    51d4:	000000b0 	.word	0x000000b0
    51d8:	000000a0 	.word	0x000000a0
    51dc:	00000178 	.word	0x00000178
    51e0:	00000218 	.word	0x00000218

000051e4 <udd_ep_alloc>:
{
    51e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51e6:	0007      	movs	r7, r0
    51e8:	4e31      	ldr	r6, [pc, #196]	; (52b0 <udd_ep_alloc+0xcc>)
    51ea:	b085      	sub	sp, #20
	usb_device_endpoint_get_config_defaults(&config_ep);
    51ec:	4b31      	ldr	r3, [pc, #196]	; (52b4 <udd_ep_alloc+0xd0>)
{
    51ee:	9100      	str	r1, [sp, #0]
    51f0:	447e      	add	r6, pc
	usb_device_endpoint_get_config_defaults(&config_ep);
    51f2:	58f3      	ldr	r3, [r6, r3]
    51f4:	ac03      	add	r4, sp, #12
    51f6:	0020      	movs	r0, r4
    51f8:	9301      	str	r3, [sp, #4]
{
    51fa:	0015      	movs	r5, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    51fc:	4798      	blx	r3
	config_ep.ep_address = ep;
    51fe:	7027      	strb	r7, [r4, #0]
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5200:	2300      	movs	r3, #0
	if(MaxEndpointSize <= 8) {
    5202:	2d08      	cmp	r5, #8
    5204:	d910      	bls.n	5228 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    5206:	2301      	movs	r3, #1
	} else if(MaxEndpointSize <= 16) {
    5208:	2d10      	cmp	r5, #16
    520a:	d90d      	bls.n	5228 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    520c:	2302      	movs	r3, #2
	} else if(MaxEndpointSize <= 32) {
    520e:	2d20      	cmp	r5, #32
    5210:	d90a      	bls.n	5228 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5212:	2303      	movs	r3, #3
	} else if(MaxEndpointSize <= 64) {
    5214:	2d40      	cmp	r5, #64	; 0x40
    5216:	d907      	bls.n	5228 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5218:	2304      	movs	r3, #4
	} else if(MaxEndpointSize <= 128) {
    521a:	2d80      	cmp	r5, #128	; 0x80
    521c:	d904      	bls.n	5228 <udd_ep_alloc+0x44>
	} else if(MaxEndpointSize <= 256) {
    521e:	2380      	movs	r3, #128	; 0x80
    5220:	005b      	lsls	r3, r3, #1
    5222:	429d      	cmp	r5, r3
    5224:	d80e      	bhi.n	5244 <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5226:	3bfb      	subs	r3, #251	; 0xfb
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5228:	7063      	strb	r3, [r4, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    522a:	4b23      	ldr	r3, [pc, #140]	; (52b8 <udd_ep_alloc+0xd4>)
    522c:	0038      	movs	r0, r7
    522e:	447b      	add	r3, pc
    5230:	4798      	blx	r3
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5232:	2203      	movs	r2, #3
    5234:	9b00      	ldr	r3, [sp, #0]
	ptr_job->ep_size = MaxEndpointSize;
    5236:	8205      	strh	r5, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    5238:	4013      	ands	r3, r2
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    523a:	2b01      	cmp	r3, #1
    523c:	d111      	bne.n	5262 <udd_ep_alloc+0x7e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    523e:	3301      	adds	r3, #1
    5240:	70e3      	strb	r3, [r4, #3]
    5242:	e011      	b.n	5268 <udd_ep_alloc+0x84>
	} else if(MaxEndpointSize <= 512) {
    5244:	2380      	movs	r3, #128	; 0x80
    5246:	009b      	lsls	r3, r3, #2
    5248:	429d      	cmp	r5, r3
    524a:	d802      	bhi.n	5252 <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    524c:	3bfb      	subs	r3, #251	; 0xfb
    524e:	3bff      	subs	r3, #255	; 0xff
    5250:	e7ea      	b.n	5228 <udd_ep_alloc+0x44>
	} else if(MaxEndpointSize <= 1023) {
    5252:	4b1a      	ldr	r3, [pc, #104]	; (52bc <udd_ep_alloc+0xd8>)
    5254:	429d      	cmp	r5, r3
    5256:	d902      	bls.n	525e <udd_ep_alloc+0x7a>
		return false;
    5258:	2000      	movs	r0, #0
}
    525a:	b005      	add	sp, #20
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    525e:	2307      	movs	r3, #7
    5260:	e7e2      	b.n	5228 <udd_ep_alloc+0x44>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    5262:	2b02      	cmp	r3, #2
    5264:	d121      	bne.n	52aa <udd_ep_alloc+0xc6>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    5266:	70e2      	strb	r2, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    5268:	4b15      	ldr	r3, [pc, #84]	; (52c0 <udd_ep_alloc+0xdc>)
    526a:	0021      	movs	r1, r4
    526c:	58f3      	ldr	r3, [r6, r3]
    526e:	9300      	str	r3, [sp, #0]
    5270:	0018      	movs	r0, r3
    5272:	4b14      	ldr	r3, [pc, #80]	; (52c4 <udd_ep_alloc+0xe0>)
    5274:	58f3      	ldr	r3, [r6, r3]
    5276:	9301      	str	r3, [sp, #4]
    5278:	4798      	blx	r3
    527a:	1e04      	subs	r4, r0, #0
    527c:	d1ec      	bne.n	5258 <udd_ep_alloc+0x74>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    527e:	210f      	movs	r1, #15
    5280:	4d11      	ldr	r5, [pc, #68]	; (52c8 <udd_ep_alloc+0xe4>)
    5282:	4b12      	ldr	r3, [pc, #72]	; (52cc <udd_ep_alloc+0xe8>)
    5284:	5975      	ldr	r5, [r6, r5]
    5286:	0002      	movs	r2, r0
    5288:	4039      	ands	r1, r7
    528a:	447b      	add	r3, pc
    528c:	9800      	ldr	r0, [sp, #0]
    528e:	9501      	str	r5, [sp, #4]
    5290:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5292:	4b0f      	ldr	r3, [pc, #60]	; (52d0 <udd_ep_alloc+0xec>)
    5294:	0022      	movs	r2, r4
    5296:	0039      	movs	r1, r7
    5298:	58f4      	ldr	r4, [r6, r3]
    529a:	9800      	ldr	r0, [sp, #0]
    529c:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    529e:	2201      	movs	r2, #1
    52a0:	0039      	movs	r1, r7
    52a2:	9800      	ldr	r0, [sp, #0]
    52a4:	47a0      	blx	r4
	return true;
    52a6:	2001      	movs	r0, #1
    52a8:	e7d7      	b.n	525a <udd_ep_alloc+0x76>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    52aa:	2b03      	cmp	r3, #3
    52ac:	d1d4      	bne.n	5258 <udd_ep_alloc+0x74>
    52ae:	e7c6      	b.n	523e <udd_ep_alloc+0x5a>
    52b0:	000088f8 	.word	0x000088f8
    52b4:	00000138 	.word	0x00000138
    52b8:	fffff6e3 	.word	0xfffff6e3
    52bc:	000003ff 	.word	0x000003ff
    52c0:	000000b0 	.word	0x000000b0
    52c4:	000000a0 	.word	0x000000a0
    52c8:	0000018c 	.word	0x0000018c
    52cc:	fffff6af 	.word	0xfffff6af
    52d0:	000002f4 	.word	0x000002f4

000052d4 <udd_ep_is_halted>:
{
    52d4:	b507      	push	{r0, r1, r2, lr}
    52d6:	4b06      	ldr	r3, [pc, #24]	; (52f0 <udd_ep_is_halted+0x1c>)
	return usb_device_endpoint_is_halted(&usb_device, ep);
    52d8:	4a06      	ldr	r2, [pc, #24]	; (52f4 <udd_ep_is_halted+0x20>)
{
    52da:	447b      	add	r3, pc
	return usb_device_endpoint_is_halted(&usb_device, ep);
    52dc:	589a      	ldr	r2, [r3, r2]
{
    52de:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    52e0:	9201      	str	r2, [sp, #4]
    52e2:	0010      	movs	r0, r2
    52e4:	4a04      	ldr	r2, [pc, #16]	; (52f8 <udd_ep_is_halted+0x24>)
    52e6:	589b      	ldr	r3, [r3, r2]
    52e8:	9301      	str	r3, [sp, #4]
    52ea:	4798      	blx	r3
}
    52ec:	bd0e      	pop	{r1, r2, r3, pc}
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	0000880e 	.word	0x0000880e
    52f4:	000000b0 	.word	0x000000b0
    52f8:	00000164 	.word	0x00000164

000052fc <udd_ep_set_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
    52fc:	230f      	movs	r3, #15
{
    52fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5300:	4c0b      	ldr	r4, [pc, #44]	; (5330 <udd_ep_set_halt+0x34>)
    5302:	0005      	movs	r5, r0
    5304:	447c      	add	r4, pc
	if (USB_DEVICE_MAX_EP < ep_num) {
    5306:	4003      	ands	r3, r0
		return false;
    5308:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    530a:	2b03      	cmp	r3, #3
    530c:	d80e      	bhi.n	532c <udd_ep_set_halt+0x30>
	usb_device_endpoint_set_halt(&usb_device, ep);
    530e:	4b09      	ldr	r3, [pc, #36]	; (5334 <udd_ep_set_halt+0x38>)
    5310:	0029      	movs	r1, r5
    5312:	58e3      	ldr	r3, [r4, r3]
    5314:	9301      	str	r3, [sp, #4]
    5316:	0018      	movs	r0, r3
    5318:	4b07      	ldr	r3, [pc, #28]	; (5338 <udd_ep_set_halt+0x3c>)
    531a:	58e3      	ldr	r3, [r4, r3]
    531c:	9301      	str	r3, [sp, #4]
    531e:	4798      	blx	r3
	udd_ep_abort(ep);
    5320:	4b06      	ldr	r3, [pc, #24]	; (533c <udd_ep_set_halt+0x40>)
    5322:	0028      	movs	r0, r5
    5324:	58e3      	ldr	r3, [r4, r3]
    5326:	9301      	str	r3, [sp, #4]
    5328:	4798      	blx	r3
    532a:	2001      	movs	r0, #1
}
    532c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	000087e4 	.word	0x000087e4
    5334:	000000b0 	.word	0x000000b0
    5338:	000002bc 	.word	0x000002bc
    533c:	000001f0 	.word	0x000001f0

00005340 <_usb_ep0_on_tansfer_ok>:
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    5340:	4b36      	ldr	r3, [pc, #216]	; (541c <_usb_ep0_on_tansfer_ok+0xdc>)
{
    5342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    5344:	447b      	add	r3, pc
{
    5346:	4d36      	ldr	r5, [pc, #216]	; (5420 <_usb_ep0_on_tansfer_ok+0xe0>)
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    5348:	781b      	ldrb	r3, [r3, #0]
{
    534a:	447d      	add	r5, pc
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    534c:	2b01      	cmp	r3, #1
    534e:	d154      	bne.n	53fa <_usb_ep0_on_tansfer_ok+0xba>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5350:	4b34      	ldr	r3, [pc, #208]	; (5424 <_usb_ep0_on_tansfer_ok+0xe4>)
    5352:	4a35      	ldr	r2, [pc, #212]	; (5428 <_usb_ep0_on_tansfer_ok+0xe8>)
    5354:	58ee      	ldr	r6, [r5, r3]
    5356:	447a      	add	r2, pc
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    5358:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    535a:	8814      	ldrh	r4, [r2, #0]
    535c:	89b3      	ldrh	r3, [r6, #12]
    535e:	19e2      	adds	r2, r4, r7
    5360:	4293      	cmp	r3, r2
    5362:	da01      	bge.n	5368 <_usb_ep0_on_tansfer_ok+0x28>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5364:	1b1f      	subs	r7, r3, r4
    5366:	b2bf      	uxth	r7, r7
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    5368:	68b3      	ldr	r3, [r6, #8]
    536a:	003a      	movs	r2, r7
    536c:	1918      	adds	r0, r3, r4
    536e:	4b2f      	ldr	r3, [pc, #188]	; (542c <_usb_ep0_on_tansfer_ok+0xec>)
	udd_ctrl_payload_nb_trans += nb_data;
    5370:	19e4      	adds	r4, r4, r7
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    5372:	58eb      	ldr	r3, [r5, r3]
    5374:	9300      	str	r3, [sp, #0]
    5376:	0019      	movs	r1, r3
    5378:	4b2d      	ldr	r3, [pc, #180]	; (5430 <_usb_ep0_on_tansfer_ok+0xf0>)
    537a:	58eb      	ldr	r3, [r5, r3]
    537c:	9301      	str	r3, [sp, #4]
    537e:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    5380:	b2a3      	uxth	r3, r4
    5382:	4c2c      	ldr	r4, [pc, #176]	; (5434 <_usb_ep0_on_tansfer_ok+0xf4>)
    5384:	447c      	add	r4, pc
    5386:	8023      	strh	r3, [r4, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5388:	2f40      	cmp	r7, #64	; 0x40
    538a:	d106      	bne.n	539a <_usb_ep0_on_tansfer_ok+0x5a>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    538c:	4f2a      	ldr	r7, [pc, #168]	; (5438 <_usb_ep0_on_tansfer_ok+0xf8>)
    538e:	88f1      	ldrh	r1, [r6, #6]
    5390:	447f      	add	r7, pc
    5392:	883a      	ldrh	r2, [r7, #0]
    5394:	18d2      	adds	r2, r2, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5396:	4291      	cmp	r1, r2
    5398:	dc14      	bgt.n	53c4 <_usb_ep0_on_tansfer_ok+0x84>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    539a:	81b3      	strh	r3, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    539c:	6973      	ldr	r3, [r6, #20]
    539e:	2b00      	cmp	r3, #0
    53a0:	d00c      	beq.n	53bc <_usb_ep0_on_tansfer_ok+0x7c>
			if (!udd_g_ctrlreq.over_under_run()) {
    53a2:	4798      	blx	r3
    53a4:	2800      	cmp	r0, #0
    53a6:	d109      	bne.n	53bc <_usb_ep0_on_tansfer_ok+0x7c>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    53a8:	2205      	movs	r2, #5
    53aa:	4b24      	ldr	r3, [pc, #144]	; (543c <_usb_ep0_on_tansfer_ok+0xfc>)
				udd_ep_set_halt(0);
    53ac:	2000      	movs	r0, #0
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    53ae:	447b      	add	r3, pc
    53b0:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    53b2:	4b23      	ldr	r3, [pc, #140]	; (5440 <_usb_ep0_on_tansfer_ok+0x100>)
    53b4:	58eb      	ldr	r3, [r5, r3]
    53b6:	9300      	str	r3, [sp, #0]
    53b8:	4798      	blx	r3
}
    53ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		udd_ctrl_send_zlp_in();
    53bc:	4b21      	ldr	r3, [pc, #132]	; (5444 <_usb_ep0_on_tansfer_ok+0x104>)
    53be:	447b      	add	r3, pc
			udd_ctrl_in_sent();
    53c0:	4798      	blx	r3
    53c2:	e7fa      	b.n	53ba <_usb_ep0_on_tansfer_ok+0x7a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    53c4:	89b2      	ldrh	r2, [r6, #12]
    53c6:	429a      	cmp	r2, r3
    53c8:	d10b      	bne.n	53e2 <_usb_ep0_on_tansfer_ok+0xa2>
		if (!udd_g_ctrlreq.over_under_run) {
    53ca:	6973      	ldr	r3, [r6, #20]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d0eb      	beq.n	53a8 <_usb_ep0_on_tansfer_ok+0x68>
		if (!udd_g_ctrlreq.over_under_run()) {
    53d0:	4798      	blx	r3
    53d2:	2800      	cmp	r0, #0
    53d4:	d0e8      	beq.n	53a8 <_usb_ep0_on_tansfer_ok+0x68>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    53d6:	883b      	ldrh	r3, [r7, #0]
    53d8:	8822      	ldrh	r2, [r4, #0]
    53da:	189b      	adds	r3, r3, r2
    53dc:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
    53de:	2300      	movs	r3, #0
    53e0:	8023      	strh	r3, [r4, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    53e2:	4b19      	ldr	r3, [pc, #100]	; (5448 <_usb_ep0_on_tansfer_ok+0x108>)
    53e4:	4c19      	ldr	r4, [pc, #100]	; (544c <_usb_ep0_on_tansfer_ok+0x10c>)
    53e6:	58eb      	ldr	r3, [r5, r3]
    53e8:	9a00      	ldr	r2, [sp, #0]
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	592c      	ldr	r4, [r5, r4]
    53ee:	2340      	movs	r3, #64	; 0x40
    53f0:	2100      	movs	r1, #0
    53f2:	9801      	ldr	r0, [sp, #4]
    53f4:	9400      	str	r4, [sp, #0]
    53f6:	47a0      	blx	r4
    53f8:	e7df      	b.n	53ba <_usb_ep0_on_tansfer_ok+0x7a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    53fa:	2b02      	cmp	r3, #2
    53fc:	d102      	bne.n	5404 <_usb_ep0_on_tansfer_ok+0xc4>
			udd_ctrl_in_sent();
    53fe:	4b14      	ldr	r3, [pc, #80]	; (5450 <_usb_ep0_on_tansfer_ok+0x110>)
    5400:	447b      	add	r3, pc
    5402:	e7dd      	b.n	53c0 <_usb_ep0_on_tansfer_ok+0x80>
			if (NULL != udd_g_ctrlreq.callback) {
    5404:	4b07      	ldr	r3, [pc, #28]	; (5424 <_usb_ep0_on_tansfer_ok+0xe4>)
    5406:	58eb      	ldr	r3, [r5, r3]
    5408:	691b      	ldr	r3, [r3, #16]
    540a:	2b00      	cmp	r3, #0
    540c:	d000      	beq.n	5410 <_usb_ep0_on_tansfer_ok+0xd0>
				udd_g_ctrlreq.callback();
    540e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    5410:	2200      	movs	r2, #0
    5412:	4b10      	ldr	r3, [pc, #64]	; (5454 <_usb_ep0_on_tansfer_ok+0x114>)
    5414:	447b      	add	r3, pc
    5416:	701a      	strb	r2, [r3, #0]
}
    5418:	e7cf      	b.n	53ba <_usb_ep0_on_tansfer_ok+0x7a>
    541a:	46c0      	nop			; (mov r8, r8)
    541c:	1fffb9a6 	.word	0x1fffb9a6
    5420:	0000879e 	.word	0x0000879e
    5424:	00000224 	.word	0x00000224
    5428:	1fffb990 	.word	0x1fffb990
    542c:	0000030c 	.word	0x0000030c
    5430:	000000c0 	.word	0x000000c0
    5434:	1fffb962 	.word	0x1fffb962
    5438:	1fffb958 	.word	0x1fffb958
    543c:	1fffb93c 	.word	0x1fffb93c
    5440:	00000160 	.word	0x00000160
    5444:	fffff86f 	.word	0xfffff86f
    5448:	000000b0 	.word	0x000000b0
    544c:	0000017c 	.word	0x0000017c
    5450:	fffff8e9 	.word	0xfffff8e9
    5454:	1fffb8d6 	.word	0x1fffb8d6

00005458 <udd_ep_clear_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
    5458:	230f      	movs	r3, #15
{
    545a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    545c:	4e0e      	ldr	r6, [pc, #56]	; (5498 <udd_ep_clear_halt+0x40>)
    545e:	0007      	movs	r7, r0
    5460:	447e      	add	r6, pc
	if (USB_DEVICE_MAX_EP < ep_num) {
    5462:	4003      	ands	r3, r0
		return false;
    5464:	2400      	movs	r4, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5466:	2b03      	cmp	r3, #3
    5468:	d814      	bhi.n	5494 <udd_ep_clear_halt+0x3c>
	ptr_job = udd_ep_get_job(ep);
    546a:	4b0c      	ldr	r3, [pc, #48]	; (549c <udd_ep_clear_halt+0x44>)
	return true;
    546c:	3401      	adds	r4, #1
	ptr_job = udd_ep_get_job(ep);
    546e:	447b      	add	r3, pc
    5470:	4798      	blx	r3
    5472:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    5474:	4b0a      	ldr	r3, [pc, #40]	; (54a0 <udd_ep_clear_halt+0x48>)
    5476:	0039      	movs	r1, r7
    5478:	58f3      	ldr	r3, [r6, r3]
    547a:	9301      	str	r3, [sp, #4]
    547c:	0018      	movs	r0, r3
    547e:	4b09      	ldr	r3, [pc, #36]	; (54a4 <udd_ep_clear_halt+0x4c>)
    5480:	58f3      	ldr	r3, [r6, r3]
    5482:	9301      	str	r3, [sp, #4]
    5484:	4798      	blx	r3
	if (ptr_job->busy == true) {
    5486:	7cab      	ldrb	r3, [r5, #18]
    5488:	4223      	tst	r3, r4
    548a:	d003      	beq.n	5494 <udd_ep_clear_halt+0x3c>
		ptr_job->busy = false;
    548c:	43a3      	bics	r3, r4
    548e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    5490:	682b      	ldr	r3, [r5, #0]
    5492:	4798      	blx	r3
}
    5494:	0020      	movs	r0, r4
    5496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5498:	00008688 	.word	0x00008688
    549c:	fffff4a3 	.word	0xfffff4a3
    54a0:	000000b0 	.word	0x000000b0
    54a4:	0000026c 	.word	0x0000026c

000054a8 <udd_ep_run>:
{
    54a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54aa:	b085      	sub	sp, #20
    54ac:	9203      	str	r2, [sp, #12]
    54ae:	001d      	movs	r5, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    54b0:	0002      	movs	r2, r0
    54b2:	230f      	movs	r3, #15
{
    54b4:	4f5f      	ldr	r7, [pc, #380]	; (5634 <udd_ep_run+0x18c>)
	ep_num = ep & USB_EP_ADDR_MASK;
    54b6:	401a      	ands	r2, r3
{
    54b8:	447f      	add	r7, pc
    54ba:	9002      	str	r0, [sp, #8]
    54bc:	000e      	movs	r6, r1
	ep_num = ep & USB_EP_ADDR_MASK;
    54be:	9201      	str	r2, [sp, #4]
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    54c0:	2a03      	cmp	r2, #3
    54c2:	d902      	bls.n	54ca <udd_ep_run+0x22>
		return false;
    54c4:	2300      	movs	r3, #0
			return true;
    54c6:	9300      	str	r3, [sp, #0]
    54c8:	e018      	b.n	54fc <udd_ep_run+0x54>
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    54ca:	4b5b      	ldr	r3, [pc, #364]	; (5638 <udd_ep_run+0x190>)
    54cc:	9802      	ldr	r0, [sp, #8]
    54ce:	58fb      	ldr	r3, [r7, r3]
    54d0:	9300      	str	r3, [sp, #0]
    54d2:	4798      	blx	r3
    54d4:	9000      	str	r0, [sp, #0]
    54d6:	2800      	cmp	r0, #0
    54d8:	d1f4      	bne.n	54c4 <udd_ep_run+0x1c>
	ptr_job = udd_ep_get_job(ep);
    54da:	4b58      	ldr	r3, [pc, #352]	; (563c <udd_ep_run+0x194>)
    54dc:	9802      	ldr	r0, [sp, #8]
    54de:	447b      	add	r3, pc
    54e0:	4798      	blx	r3
	flags = cpu_irq_save();
    54e2:	4b57      	ldr	r3, [pc, #348]	; (5640 <udd_ep_run+0x198>)
	ptr_job = udd_ep_get_job(ep);
    54e4:	0004      	movs	r4, r0
	flags = cpu_irq_save();
    54e6:	447b      	add	r3, pc
    54e8:	4798      	blx	r3
	if (ptr_job->busy == true) {
    54ea:	2301      	movs	r3, #1
    54ec:	7ca2      	ldrb	r2, [r4, #18]
    54ee:	421a      	tst	r2, r3
    54f0:	d007      	beq.n	5502 <udd_ep_run+0x5a>
    54f2:	2800      	cmp	r0, #0
    54f4:	d0e6      	beq.n	54c4 <udd_ep_run+0x1c>
    54f6:	4b53      	ldr	r3, [pc, #332]	; (5644 <udd_ep_run+0x19c>)
    54f8:	447b      	add	r3, pc
    54fa:	4798      	blx	r3
}
    54fc:	9800      	ldr	r0, [sp, #0]
    54fe:	b005      	add	sp, #20
    5500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->busy = true;
    5502:	4313      	orrs	r3, r2
    5504:	74a3      	strb	r3, [r4, #18]
    5506:	2800      	cmp	r0, #0
    5508:	d002      	beq.n	5510 <udd_ep_run+0x68>
    550a:	4b4f      	ldr	r3, [pc, #316]	; (5648 <udd_ep_run+0x1a0>)
    550c:	447b      	add	r3, pc
    550e:	4798      	blx	r3
	ptr_job->buf = buf;
    5510:	9b03      	ldr	r3, [sp, #12]
	ptr_job->b_shortpacket = b_shortpacket;
    5512:	2202      	movs	r2, #2
	ptr_job->buf = buf;
    5514:	6063      	str	r3, [r4, #4]
	ptr_job->nb_trans = 0;
    5516:	2300      	movs	r3, #0
    5518:	60e3      	str	r3, [r4, #12]
	ptr_job->call_trans = callback;
    551a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ptr_job->buf_size = buf_size;
    551c:	60a5      	str	r5, [r4, #8]
	ptr_job->call_trans = callback;
    551e:	6023      	str	r3, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5520:	2301      	movs	r3, #1
    5522:	401e      	ands	r6, r3
    5524:	0071      	lsls	r1, r6, #1
    5526:	7ca6      	ldrb	r6, [r4, #18]
    5528:	4396      	bics	r6, r2
	ptr_job->b_use_out_cache_buffer = false;
    552a:	430e      	orrs	r6, r1
    552c:	2104      	movs	r1, #4
    552e:	438e      	bics	r6, r1
	if (ep & USB_EP_DIR_IN) {
    5530:	4669      	mov	r1, sp
    5532:	7a09      	ldrb	r1, [r1, #8]
	ptr_job->b_use_out_cache_buffer = false;
    5534:	74a6      	strb	r6, [r4, #18]
	if (ep & USB_EP_DIR_IN) {
    5536:	b249      	sxtb	r1, r1
    5538:	2900      	cmp	r1, #0
    553a:	da46      	bge.n	55ca <udd_ep_run+0x122>
    553c:	b2f6      	uxtb	r6, r6
		if (0 != ptr_job->buf_size) {
    553e:	2d00      	cmp	r5, #0
    5540:	d031      	beq.n	55a6 <udd_ep_run+0xfe>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5542:	4b42      	ldr	r3, [pc, #264]	; (564c <udd_ep_run+0x1a4>)
			next_trans = ptr_job->buf_size;
    5544:	b2ad      	uxth	r5, r5
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5546:	429d      	cmp	r5, r3
    5548:	d908      	bls.n	555c <udd_ep_run+0xb4>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    554a:	4b41      	ldr	r3, [pc, #260]	; (5650 <udd_ep_run+0x1a8>)
    554c:	8a21      	ldrh	r1, [r4, #16]
    554e:	58fb      	ldr	r3, [r7, r3]
    5550:	483e      	ldr	r0, [pc, #248]	; (564c <udd_ep_run+0x1a4>)
    5552:	9302      	str	r3, [sp, #8]
    5554:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5556:	4b3d      	ldr	r3, [pc, #244]	; (564c <udd_ep_run+0x1a4>)
    5558:	1a5d      	subs	r5, r3, r1
    555a:	b2ad      	uxth	r5, r5
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    555c:	07b3      	lsls	r3, r6, #30
    555e:	d50a      	bpl.n	5576 <udd_ep_run+0xce>
					(0 == (next_trans % ptr_job->ep_size));
    5560:	4b3c      	ldr	r3, [pc, #240]	; (5654 <udd_ep_run+0x1ac>)
    5562:	8a21      	ldrh	r1, [r4, #16]
    5564:	58fb      	ldr	r3, [r7, r3]
    5566:	0028      	movs	r0, r5
    5568:	9300      	str	r3, [sp, #0]
    556a:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    556c:	b289      	uxth	r1, r1
    556e:	4248      	negs	r0, r1
    5570:	4148      	adcs	r0, r1
    5572:	b2c3      	uxtb	r3, r0
    5574:	9300      	str	r3, [sp, #0]
    5576:	2001      	movs	r0, #1
    5578:	9b00      	ldr	r3, [sp, #0]
    557a:	4003      	ands	r3, r0
    557c:	0059      	lsls	r1, r3, #1
    557e:	2302      	movs	r3, #2
    5580:	7ca0      	ldrb	r0, [r4, #18]
    5582:	4398      	bics	r0, r3
    5584:	4308      	orrs	r0, r1
    5586:	74a0      	strb	r0, [r4, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    5588:	4b33      	ldr	r3, [pc, #204]	; (5658 <udd_ep_run+0x1b0>)
    558a:	4c34      	ldr	r4, [pc, #208]	; (565c <udd_ep_run+0x1b4>)
    558c:	58fb      	ldr	r3, [r7, r3]
    558e:	9a03      	ldr	r2, [sp, #12]
    5590:	9300      	str	r3, [sp, #0]
    5592:	593c      	ldr	r4, [r7, r4]
    5594:	9800      	ldr	r0, [sp, #0]
    5596:	002b      	movs	r3, r5
    5598:	9901      	ldr	r1, [sp, #4]
    559a:	9400      	str	r4, [sp, #0]
    559c:	47a0      	blx	r4
				return (STATUS_OK ==
    559e:	4243      	negs	r3, r0
    55a0:	4158      	adcs	r0, r3
    55a2:	b2c3      	uxtb	r3, r0
    55a4:	e78f      	b.n	54c6 <udd_ep_run+0x1e>
		} else if (true == ptr_job->b_shortpacket) {
    55a6:	4216      	tst	r6, r2
    55a8:	d002      	beq.n	55b0 <udd_ep_run+0x108>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    55aa:	4396      	bics	r6, r2
    55ac:	74a6      	strb	r6, [r4, #18]
    55ae:	e7eb      	b.n	5588 <udd_ep_run+0xe0>
			ptr_job->busy = false;
    55b0:	439e      	bics	r6, r3
    55b2:	74a6      	strb	r6, [r4, #18]
			if (NULL != ptr_job->call_trans) {
    55b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55b6:	2b00      	cmp	r3, #0
    55b8:	d101      	bne.n	55be <udd_ep_run+0x116>
			return true;
    55ba:	2301      	movs	r3, #1
    55bc:	e783      	b.n	54c6 <udd_ep_run+0x1e>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    55be:	2100      	movs	r1, #0
    55c0:	9a02      	ldr	r2, [sp, #8]
    55c2:	0008      	movs	r0, r1
    55c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55c6:	4798      	blx	r3
    55c8:	e7f7      	b.n	55ba <udd_ep_run+0x112>
		if (0 != ptr_job->buf_size) {
    55ca:	2d00      	cmp	r5, #0
    55cc:	d02d      	beq.n	562a <udd_ep_run+0x182>
    55ce:	8a23      	ldrh	r3, [r4, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    55d0:	4e1e      	ldr	r6, [pc, #120]	; (564c <udd_ep_run+0x1a4>)
			next_trans = ptr_job->buf_size;
    55d2:	b2ad      	uxth	r5, r5
    55d4:	9300      	str	r3, [sp, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    55d6:	42b5      	cmp	r5, r6
    55d8:	d91d      	bls.n	5616 <udd_ep_run+0x16e>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    55da:	4b1d      	ldr	r3, [pc, #116]	; (5650 <udd_ep_run+0x1a8>)
    55dc:	9900      	ldr	r1, [sp, #0]
    55de:	58fb      	ldr	r3, [r7, r3]
    55e0:	0030      	movs	r0, r6
    55e2:	9302      	str	r3, [sp, #8]
    55e4:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    55e6:	1a73      	subs	r3, r6, r1
    55e8:	4a1b      	ldr	r2, [pc, #108]	; (5658 <udd_ep_run+0x1b0>)
				next_trans -= next_trans % ptr_job->ep_size;
    55ea:	b29b      	uxth	r3, r3
    55ec:	58b8      	ldr	r0, [r7, r2]
    55ee:	4a1c      	ldr	r2, [pc, #112]	; (5660 <udd_ep_run+0x1b8>)
    55f0:	58be      	ldr	r6, [r7, r2]
			if (next_trans < ptr_job->ep_size) {
    55f2:	9a00      	ldr	r2, [sp, #0]
    55f4:	4293      	cmp	r3, r2
    55f6:	d216      	bcs.n	5626 <udd_ep_run+0x17e>
				ptr_job->b_use_out_cache_buffer = true;
    55f8:	2304      	movs	r3, #4
    55fa:	7ca2      	ldrb	r2, [r4, #18]
    55fc:	4313      	orrs	r3, r2
    55fe:	74a3      	strb	r3, [r4, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    5600:	9b01      	ldr	r3, [sp, #4]
    5602:	1e5a      	subs	r2, r3, #1
    5604:	4b17      	ldr	r3, [pc, #92]	; (5664 <udd_ep_run+0x1bc>)
    5606:	0192      	lsls	r2, r2, #6
    5608:	58fb      	ldr	r3, [r7, r3]
    560a:	9302      	str	r3, [sp, #8]
    560c:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    560e:	9b00      	ldr	r3, [sp, #0]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5610:	9901      	ldr	r1, [sp, #4]
    5612:	47b0      	blx	r6
    5614:	e7c3      	b.n	559e <udd_ep_run+0xf6>
				next_trans -= next_trans % ptr_job->ep_size;
    5616:	4b0f      	ldr	r3, [pc, #60]	; (5654 <udd_ep_run+0x1ac>)
    5618:	9900      	ldr	r1, [sp, #0]
    561a:	58fb      	ldr	r3, [r7, r3]
    561c:	0028      	movs	r0, r5
    561e:	9302      	str	r3, [sp, #8]
    5620:	4798      	blx	r3
    5622:	1a6b      	subs	r3, r5, r1
    5624:	e7e0      	b.n	55e8 <udd_ep_run+0x140>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5626:	9a03      	ldr	r2, [sp, #12]
    5628:	e7f2      	b.n	5610 <udd_ep_run+0x168>
			ptr_job->busy = false;
    562a:	7ca2      	ldrb	r2, [r4, #18]
    562c:	439a      	bics	r2, r3
    562e:	74a2      	strb	r2, [r4, #18]
    5630:	e7c0      	b.n	55b4 <udd_ep_run+0x10c>
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	00008630 	.word	0x00008630
    5638:	000001e0 	.word	0x000001e0
    563c:	fffff433 	.word	0xfffff433
    5640:	fffff3fb 	.word	0xfffff3fb
    5644:	fffff8dd 	.word	0xfffff8dd
    5648:	fffff8c9 	.word	0xfffff8c9
    564c:	00001fff 	.word	0x00001fff
    5650:	00000338 	.word	0x00000338
    5654:	000002b4 	.word	0x000002b4
    5658:	000000b0 	.word	0x000000b0
    565c:	00000348 	.word	0x00000348
    5660:	0000017c 	.word	0x0000017c
    5664:	00000020 	.word	0x00000020

00005668 <udd_set_address>:
{
    5668:	4b04      	ldr	r3, [pc, #16]	; (567c <udd_set_address+0x14>)
    566a:	4a05      	ldr	r2, [pc, #20]	; (5680 <udd_set_address+0x18>)
    566c:	447b      	add	r3, pc
    566e:	589b      	ldr	r3, [r3, r2]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5670:	2280      	movs	r2, #128	; 0x80
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	4310      	orrs	r0, r2
    5676:	7298      	strb	r0, [r3, #10]
}
    5678:	4770      	bx	lr
    567a:	46c0      	nop			; (mov r8, r8)
    567c:	0000847c 	.word	0x0000847c
    5680:	000000b0 	.word	0x000000b0

00005684 <udd_getaddress>:
{
    5684:	4b04      	ldr	r3, [pc, #16]	; (5698 <udd_getaddress+0x14>)
    5686:	4a05      	ldr	r2, [pc, #20]	; (569c <udd_getaddress+0x18>)
    5688:	447b      	add	r3, pc
    568a:	589b      	ldr	r3, [r3, r2]
}
    568c:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    568e:	7a98      	ldrb	r0, [r3, #10]
    5690:	0640      	lsls	r0, r0, #25
    5692:	0e40      	lsrs	r0, r0, #25
    5694:	4770      	bx	lr
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	00008460 	.word	0x00008460
    569c:	000000b0 	.word	0x000000b0

000056a0 <udd_set_setup_payload>:
{
    56a0:	4b03      	ldr	r3, [pc, #12]	; (56b0 <udd_set_setup_payload+0x10>)
	udd_g_ctrlreq.payload = payload;
    56a2:	4a04      	ldr	r2, [pc, #16]	; (56b4 <udd_set_setup_payload+0x14>)
{
    56a4:	447b      	add	r3, pc
	udd_g_ctrlreq.payload = payload;
    56a6:	589b      	ldr	r3, [r3, r2]
    56a8:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    56aa:	8199      	strh	r1, [r3, #12]
}
    56ac:	4770      	bx	lr
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	00008444 	.word	0x00008444
    56b4:	00000224 	.word	0x00000224

000056b8 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    56b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    56ba:	2701      	movs	r7, #1
	udd_sleep_mode(UDD_STATE_IDLE);
    56bc:	4b1c      	ldr	r3, [pc, #112]	; (5730 <udd_attach+0x78>)
    56be:	2003      	movs	r0, #3
    56c0:	447b      	add	r3, pc
{
    56c2:	4d1c      	ldr	r5, [pc, #112]	; (5734 <udd_attach+0x7c>)
	udd_sleep_mode(UDD_STATE_IDLE);
    56c4:	4798      	blx	r3
    56c6:	4b1c      	ldr	r3, [pc, #112]	; (5738 <udd_attach+0x80>)
{
    56c8:	447d      	add	r5, pc
    56ca:	58ec      	ldr	r4, [r5, r3]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    56cc:	2104      	movs	r1, #4
    56ce:	6822      	ldr	r2, [r4, #0]
    56d0:	0020      	movs	r0, r4
    56d2:	8913      	ldrh	r3, [r2, #8]
    56d4:	43bb      	bics	r3, r7
    56d6:	8113      	strh	r3, [r2, #8]
    56d8:	4b18      	ldr	r3, [pc, #96]	; (573c <udd_attach+0x84>)
    56da:	4a19      	ldr	r2, [pc, #100]	; (5740 <udd_attach+0x88>)
    56dc:	58ee      	ldr	r6, [r5, r3]
    56de:	447a      	add	r2, pc
    56e0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    56e2:	4a18      	ldr	r2, [pc, #96]	; (5744 <udd_attach+0x8c>)
    56e4:	2100      	movs	r1, #0
    56e6:	447a      	add	r2, pc
    56e8:	0020      	movs	r0, r4
    56ea:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    56ec:	4a16      	ldr	r2, [pc, #88]	; (5748 <udd_attach+0x90>)
    56ee:	0039      	movs	r1, r7
    56f0:	447a      	add	r2, pc
    56f2:	0020      	movs	r0, r4
    56f4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    56f6:	4a15      	ldr	r2, [pc, #84]	; (574c <udd_attach+0x94>)
    56f8:	2102      	movs	r1, #2
    56fa:	447a      	add	r2, pc
    56fc:	0020      	movs	r0, r4
    56fe:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5700:	4b13      	ldr	r3, [pc, #76]	; (5750 <udd_attach+0x98>)
    5702:	2104      	movs	r1, #4
    5704:	58ed      	ldr	r5, [r5, r3]
    5706:	0020      	movs	r0, r4
    5708:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    570a:	2100      	movs	r1, #0
    570c:	0020      	movs	r0, r4
    570e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    5710:	0039      	movs	r1, r7
    5712:	0020      	movs	r0, r4
    5714:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5716:	2102      	movs	r1, #2
    5718:	0020      	movs	r0, r4
    571a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    571c:	4a0d      	ldr	r2, [pc, #52]	; (5754 <udd_attach+0x9c>)
    571e:	2106      	movs	r1, #6
    5720:	447a      	add	r2, pc
    5722:	0020      	movs	r0, r4
    5724:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5726:	2106      	movs	r1, #6
    5728:	0020      	movs	r0, r4
    572a:	47a8      	blx	r5
#endif
}
    572c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	fffff87d 	.word	0xfffff87d
    5734:	00008420 	.word	0x00008420
    5738:	000000b0 	.word	0x000000b0
    573c:	00000060 	.word	0x00000060
    5740:	fffff9bf 	.word	0xfffff9bf
    5744:	fffff6d7 	.word	0xfffff6d7
    5748:	fffff465 	.word	0xfffff465
    574c:	fffff93b 	.word	0xfffff93b
    5750:	000001b4 	.word	0x000001b4
    5754:	fffff8cd 	.word	0xfffff8cd

00005758 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    5758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    575a:	4b17      	ldr	r3, [pc, #92]	; (57b8 <udd_enable+0x60>)
{
    575c:	4c17      	ldr	r4, [pc, #92]	; (57bc <udd_enable+0x64>)
	flags = cpu_irq_save();
    575e:	447b      	add	r3, pc
    5760:	4798      	blx	r3
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    5762:	4b17      	ldr	r3, [pc, #92]	; (57c0 <udd_enable+0x68>)
{
    5764:	447c      	add	r4, pc
	usb_get_config_defaults(&config_usb);
    5766:	ad03      	add	r5, sp, #12
    5768:	58e3      	ldr	r3, [r4, r3]
	flags = cpu_irq_save();
    576a:	0006      	movs	r6, r0
	usb_get_config_defaults(&config_usb);
    576c:	0028      	movs	r0, r5
    576e:	9300      	str	r3, [sp, #0]
    5770:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5772:	2300      	movs	r3, #0
    5774:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    5776:	4b13      	ldr	r3, [pc, #76]	; (57c4 <udd_enable+0x6c>)
    5778:	002a      	movs	r2, r5
    577a:	58e3      	ldr	r3, [r4, r3]
    577c:	4912      	ldr	r1, [pc, #72]	; (57c8 <udd_enable+0x70>)
    577e:	9300      	str	r3, [sp, #0]
    5780:	0018      	movs	r0, r3
    5782:	4b12      	ldr	r3, [pc, #72]	; (57cc <udd_enable+0x74>)
    5784:	58e3      	ldr	r3, [r4, r3]
    5786:	9301      	str	r3, [sp, #4]
    5788:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    578a:	4b11      	ldr	r3, [pc, #68]	; (57d0 <udd_enable+0x78>)
    578c:	9800      	ldr	r0, [sp, #0]
    578e:	58e3      	ldr	r3, [r4, r3]
    5790:	9300      	str	r3, [sp, #0]
    5792:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    5794:	4b0f      	ldr	r3, [pc, #60]	; (57d4 <udd_enable+0x7c>)
    5796:	447b      	add	r3, pc
    5798:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    579a:	4b0f      	ldr	r3, [pc, #60]	; (57d8 <udd_enable+0x80>)
    579c:	2001      	movs	r0, #1
    579e:	447b      	add	r3, pc
    57a0:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    57a2:	4b0e      	ldr	r3, [pc, #56]	; (57dc <udd_enable+0x84>)
    57a4:	58e3      	ldr	r3, [r4, r3]
    57a6:	9300      	str	r3, [sp, #0]
    57a8:	4798      	blx	r3
    57aa:	2e00      	cmp	r6, #0
    57ac:	d002      	beq.n	57b4 <udd_enable+0x5c>
    57ae:	4b0c      	ldr	r3, [pc, #48]	; (57e0 <udd_enable+0x88>)
    57b0:	447b      	add	r3, pc
    57b2:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
}
    57b4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    57b6:	46c0      	nop			; (mov r8, r8)
    57b8:	fffff183 	.word	0xfffff183
    57bc:	00008384 	.word	0x00008384
    57c0:	000000dc 	.word	0x000000dc
    57c4:	000000b0 	.word	0x000000b0
    57c8:	41005000 	.word	0x41005000
    57cc:	000000e4 	.word	0x000000e4
    57d0:	00000334 	.word	0x00000334
    57d4:	fffff663 	.word	0xfffff663
    57d8:	fffff79f 	.word	0xfffff79f
    57dc:	00000284 	.word	0x00000284
    57e0:	fffff625 	.word	0xfffff625

000057e4 <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    57e4:	000b      	movs	r3, r1
    57e6:	332e      	adds	r3, #46	; 0x2e
    57e8:	009b      	lsls	r3, r3, #2
{
    57ea:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    57ec:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    57ee:	22aa      	movs	r2, #170	; 0xaa
    57f0:	4c04      	ldr	r4, [pc, #16]	; (5804 <usb_device_register_callback+0x20>)
    57f2:	0052      	lsls	r2, r2, #1
    57f4:	447c      	add	r4, pc
    57f6:	0049      	lsls	r1, r1, #1
    57f8:	5a83      	ldrh	r3, [r0, r2]
    57fa:	5b09      	ldrh	r1, [r1, r4]
    57fc:	430b      	orrs	r3, r1
    57fe:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    5800:	2000      	movs	r0, #0
    5802:	bd10      	pop	{r4, pc}
    5804:	00007e48 	.word	0x00007e48

00005808 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5808:	4b07      	ldr	r3, [pc, #28]	; (5828 <usb_device_enable_callback+0x20>)
    580a:	0049      	lsls	r1, r1, #1
    580c:	447b      	add	r3, pc
    580e:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    5810:	21ab      	movs	r1, #171	; 0xab
{
    5812:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5814:	6804      	ldr	r4, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    5816:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5818:	83a3      	strh	r3, [r4, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    581a:	5a42      	ldrh	r2, [r0, r1]
    581c:	431a      	orrs	r2, r3
    581e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];

	return STATUS_OK;
}
    5820:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    5822:	8323      	strh	r3, [r4, #24]
}
    5824:	bd10      	pop	{r4, pc}
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	00007e30 	.word	0x00007e30

0000582c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    582c:	4b06      	ldr	r3, [pc, #24]	; (5848 <usb_device_disable_callback+0x1c>)
    582e:	0049      	lsls	r1, r1, #1
    5830:	447b      	add	r3, pc
    5832:	5aca      	ldrh	r2, [r1, r3]
    5834:	21ab      	movs	r1, #171	; 0xab
    5836:	0049      	lsls	r1, r1, #1
    5838:	5a43      	ldrh	r3, [r0, r1]
    583a:	4393      	bics	r3, r2
    583c:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    583e:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    5840:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    5842:	829a      	strh	r2, [r3, #20]
}
    5844:	4770      	bx	lr
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	00007e0c 	.word	0x00007e0c

0000584c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    584c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    584e:	008c      	lsls	r4, r1, #2
    5850:	18a4      	adds	r4, r4, r2
    5852:	3434      	adds	r4, #52	; 0x34
    5854:	00a4      	lsls	r4, r4, #2
    5856:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5858:	1840      	adds	r0, r0, r1
    585a:	4905      	ldr	r1, [pc, #20]	; (5870 <usb_device_endpoint_register_callback+0x24>)
    585c:	3059      	adds	r0, #89	; 0x59
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    585e:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5860:	30ff      	adds	r0, #255	; 0xff
    5862:	4479      	add	r1, pc
    5864:	7803      	ldrb	r3, [r0, #0]
    5866:	5c8a      	ldrb	r2, [r1, r2]
    5868:	4313      	orrs	r3, r2
    586a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    586c:	2000      	movs	r0, #0
    586e:	bd10      	pop	{r4, pc}
    5870:	00007de8 	.word	0x00007de8

00005874 <usb_device_endpoint_unregister_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    5874:	008b      	lsls	r3, r1, #2
    5876:	189b      	adds	r3, r3, r2
    5878:	3334      	adds	r3, #52	; 0x34
    587a:	009b      	lsls	r3, r3, #2
{
    587c:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    587e:	18c3      	adds	r3, r0, r3
{
    5880:	0004      	movs	r4, r0
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    5882:	2000      	movs	r0, #0
    5884:	6058      	str	r0, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5886:	1864      	adds	r4, r4, r1
    5888:	4b04      	ldr	r3, [pc, #16]	; (589c <usb_device_endpoint_unregister_callback+0x28>)
    588a:	3459      	adds	r4, #89	; 0x59
    588c:	34ff      	adds	r4, #255	; 0xff
    588e:	447b      	add	r3, pc
    5890:	5c9a      	ldrb	r2, [r3, r2]
    5892:	7823      	ldrb	r3, [r4, #0]
    5894:	4393      	bics	r3, r2
    5896:	7023      	strb	r3, [r4, #0]

	return STATUS_OK;
}
    5898:	bd10      	pop	{r4, pc}
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	00007dbc 	.word	0x00007dbc

000058a0 <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    58a0:	230f      	movs	r3, #15
    58a2:	400b      	ands	r3, r1
{
    58a4:	b570      	push	{r4, r5, r6, lr}
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    58a6:	18c4      	adds	r4, r0, r3
    58a8:	4e20      	ldr	r6, [pc, #128]	; (592c <usb_device_endpoint_enable_callback+0x8c>)
    58aa:	3461      	adds	r4, #97	; 0x61
    58ac:	34ff      	adds	r4, #255	; 0xff
    58ae:	447e      	add	r6, pc
    58b0:	7825      	ldrb	r5, [r4, #0]
    58b2:	5cb6      	ldrb	r6, [r6, r2]
    58b4:	4335      	orrs	r5, r6
    58b6:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    58b8:	2a00      	cmp	r2, #0
    58ba:	d10f      	bne.n	58dc <usb_device_endpoint_enable_callback+0x3c>
    58bc:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    58be:	2b00      	cmp	r3, #0
    58c0:	d103      	bne.n	58ca <usb_device_endpoint_enable_callback+0x2a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    58c2:	32ff      	adds	r2, #255	; 0xff
    58c4:	3303      	adds	r3, #3

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
		if (ep & USB_EP_DIR_IN) {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    58c6:	7293      	strb	r3, [r2, #10]
    58c8:	e021      	b.n	590e <usb_device_endpoint_enable_callback+0x6e>
    58ca:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    58cc:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    58ce:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    58d0:	32ff      	adds	r2, #255	; 0xff
    58d2:	2302      	movs	r3, #2
		} else if (ep & USB_EP_DIR_IN) {
    58d4:	2900      	cmp	r1, #0
    58d6:	dbf6      	blt.n	58c6 <usb_device_endpoint_enable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    58d8:	2301      	movs	r3, #1
    58da:	e7f4      	b.n	58c6 <usb_device_endpoint_enable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    58dc:	2a01      	cmp	r2, #1
    58de:	d10e      	bne.n	58fe <usb_device_endpoint_enable_callback+0x5e>
    58e0:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    58e2:	2b00      	cmp	r3, #0
    58e4:	d102      	bne.n	58ec <usb_device_endpoint_enable_callback+0x4c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    58e6:	32ff      	adds	r2, #255	; 0xff
    58e8:	330c      	adds	r3, #12
    58ea:	e7ec      	b.n	58c6 <usb_device_endpoint_enable_callback+0x26>
    58ec:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    58ee:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    58f0:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    58f2:	32ff      	adds	r2, #255	; 0xff
    58f4:	2308      	movs	r3, #8
		} else if (ep & USB_EP_DIR_IN) {
    58f6:	2900      	cmp	r1, #0
    58f8:	dbe5      	blt.n	58c6 <usb_device_endpoint_enable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    58fa:	2304      	movs	r3, #4
    58fc:	e7e3      	b.n	58c6 <usb_device_endpoint_enable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    58fe:	2a02      	cmp	r2, #2
    5900:	d107      	bne.n	5912 <usb_device_endpoint_enable_callback+0x72>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    5902:	6802      	ldr	r2, [r0, #0]
    5904:	015b      	lsls	r3, r3, #5
    5906:	18d3      	adds	r3, r2, r3
    5908:	2210      	movs	r2, #16
    590a:	33ff      	adds	r3, #255	; 0xff
    590c:	729a      	strb	r2, [r3, #10]
		}
	}

	return STATUS_OK;
}
    590e:	2000      	movs	r0, #0
    5910:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5912:	2a03      	cmp	r2, #3
    5914:	d1fb      	bne.n	590e <usb_device_endpoint_enable_callback+0x6e>
    5916:	6802      	ldr	r2, [r0, #0]
    5918:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    591a:	18d2      	adds	r2, r2, r3
		if (ep & USB_EP_DIR_IN) {
    591c:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    591e:	32ff      	adds	r2, #255	; 0xff
    5920:	2340      	movs	r3, #64	; 0x40
		if (ep & USB_EP_DIR_IN) {
    5922:	2900      	cmp	r1, #0
    5924:	dbcf      	blt.n	58c6 <usb_device_endpoint_enable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    5926:	2320      	movs	r3, #32
    5928:	e7cd      	b.n	58c6 <usb_device_endpoint_enable_callback+0x26>
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	00007d9c 	.word	0x00007d9c

00005930 <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5930:	230f      	movs	r3, #15
    5932:	400b      	ands	r3, r1
{
    5934:	b570      	push	{r4, r5, r6, lr}
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5936:	18c4      	adds	r4, r0, r3
    5938:	4d20      	ldr	r5, [pc, #128]	; (59bc <usb_device_endpoint_disable_callback+0x8c>)
    593a:	3461      	adds	r4, #97	; 0x61
    593c:	34ff      	adds	r4, #255	; 0xff
    593e:	447d      	add	r5, pc
    5940:	5cae      	ldrb	r6, [r5, r2]
    5942:	7825      	ldrb	r5, [r4, #0]
    5944:	43b5      	bics	r5, r6
    5946:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5948:	2a00      	cmp	r2, #0
    594a:	d10f      	bne.n	596c <usb_device_endpoint_disable_callback+0x3c>
    594c:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    594e:	2b00      	cmp	r3, #0
    5950:	d103      	bne.n	595a <usb_device_endpoint_disable_callback+0x2a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    5952:	32ff      	adds	r2, #255	; 0xff
    5954:	3303      	adds	r3, #3

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
		if (ep & USB_EP_DIR_IN) {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    5956:	7253      	strb	r3, [r2, #9]
    5958:	e021      	b.n	599e <usb_device_endpoint_disable_callback+0x6e>
    595a:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    595c:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    595e:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    5960:	32ff      	adds	r2, #255	; 0xff
    5962:	2302      	movs	r3, #2
		} else if (ep & USB_EP_DIR_IN) {
    5964:	2900      	cmp	r1, #0
    5966:	dbf6      	blt.n	5956 <usb_device_endpoint_disable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    5968:	2301      	movs	r3, #1
    596a:	e7f4      	b.n	5956 <usb_device_endpoint_disable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    596c:	2a01      	cmp	r2, #1
    596e:	d10e      	bne.n	598e <usb_device_endpoint_disable_callback+0x5e>
    5970:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    5972:	2b00      	cmp	r3, #0
    5974:	d102      	bne.n	597c <usb_device_endpoint_disable_callback+0x4c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    5976:	32ff      	adds	r2, #255	; 0xff
    5978:	330c      	adds	r3, #12
    597a:	e7ec      	b.n	5956 <usb_device_endpoint_disable_callback+0x26>
    597c:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    597e:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    5980:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    5982:	32ff      	adds	r2, #255	; 0xff
    5984:	2308      	movs	r3, #8
		} else if (ep & USB_EP_DIR_IN) {
    5986:	2900      	cmp	r1, #0
    5988:	dbe5      	blt.n	5956 <usb_device_endpoint_disable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    598a:	2304      	movs	r3, #4
    598c:	e7e3      	b.n	5956 <usb_device_endpoint_disable_callback+0x26>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    598e:	2a02      	cmp	r2, #2
    5990:	d107      	bne.n	59a2 <usb_device_endpoint_disable_callback+0x72>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    5992:	6802      	ldr	r2, [r0, #0]
    5994:	015b      	lsls	r3, r3, #5
    5996:	18d3      	adds	r3, r2, r3
    5998:	2210      	movs	r2, #16
    599a:	33ff      	adds	r3, #255	; 0xff
    599c:	725a      	strb	r2, [r3, #9]
		}
	}

	return STATUS_OK;
}
    599e:	2000      	movs	r0, #0
    59a0:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    59a2:	2a03      	cmp	r2, #3
    59a4:	d1fb      	bne.n	599e <usb_device_endpoint_disable_callback+0x6e>
    59a6:	6802      	ldr	r2, [r0, #0]
    59a8:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    59aa:	18d2      	adds	r2, r2, r3
		if (ep & USB_EP_DIR_IN) {
    59ac:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    59ae:	32ff      	adds	r2, #255	; 0xff
    59b0:	2340      	movs	r3, #64	; 0x40
		if (ep & USB_EP_DIR_IN) {
    59b2:	2900      	cmp	r1, #0
    59b4:	dbcf      	blt.n	5956 <usb_device_endpoint_disable_callback+0x26>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    59b6:	2320      	movs	r3, #32
    59b8:	e7cd      	b.n	5956 <usb_device_endpoint_disable_callback+0x26>
    59ba:	46c0      	nop			; (mov r8, r8)
    59bc:	00007d0c 	.word	0x00007d0c

000059c0 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    59c0:	2300      	movs	r3, #0
    59c2:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    59c4:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    59c6:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    59c8:	3301      	adds	r3, #1
    59ca:	70c3      	strb	r3, [r0, #3]
}
    59cc:	4770      	bx	lr
	...

000059d0 <usb_device_endpoint_set_config>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    59d0:	230f      	movs	r3, #15
{
    59d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    59d4:	780c      	ldrb	r4, [r1, #0]
{
    59d6:	0002      	movs	r2, r0
    59d8:	4d58      	ldr	r5, [pc, #352]	; (5b3c <usb_device_endpoint_set_config+0x16c>)
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    59da:	78c8      	ldrb	r0, [r1, #3]
{
    59dc:	447d      	add	r5, pc
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    59de:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    59e0:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
    59e2:	2804      	cmp	r0, #4
    59e4:	d853      	bhi.n	5a8e <usb_device_endpoint_set_config+0xbe>
    59e6:	6812      	ldr	r2, [r2, #0]
    59e8:	f000 fe56 	bl	6698 <__gnu_thumb1_case_uqi>
    59ec:	76410803 	.word	0x76410803
    59f0:	8c          	.byte	0x8c
    59f1:	00          	.byte	0x00
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    59f2:	2000      	movs	r0, #0
    59f4:	3308      	adds	r3, #8
    59f6:	015b      	lsls	r3, r3, #5
    59f8:	54d0      	strb	r0, [r2, r3]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
}
    59fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    59fc:	015c      	lsls	r4, r3, #5
    59fe:	1912      	adds	r2, r2, r4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5a00:	32ff      	adds	r2, #255	; 0xff
    5a02:	7853      	ldrb	r3, [r2, #1]
				return STATUS_ERR_DENIED;
    5a04:	201c      	movs	r0, #28
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5a06:	075b      	lsls	r3, r3, #29
    5a08:	d1f7      	bne.n	59fa <usb_device_endpoint_set_config+0x2a>
    5a0a:	2370      	movs	r3, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    5a0c:	7856      	ldrb	r6, [r2, #1]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5a0e:	421e      	tst	r6, r3
    5a10:	d1f3      	bne.n	59fa <usb_device_endpoint_set_config+0x2a>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    5a12:	3b5f      	subs	r3, #95	; 0x5f
    5a14:	7053      	strb	r3, [r2, #1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    5a16:	332f      	adds	r3, #47	; 0x2f
    5a18:	7193      	strb	r3, [r2, #6]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5a1a:	3340      	adds	r3, #64	; 0x40
    5a1c:	7153      	strb	r3, [r2, #5]
			if (true == ep_config->auto_zlp) {
    5a1e:	788a      	ldrb	r2, [r1, #2]
    5a20:	4b47      	ldr	r3, [pc, #284]	; (5b40 <usb_device_endpoint_set_config+0x170>)
    5a22:	58eb      	ldr	r3, [r5, r3]
    5a24:	2a00      	cmp	r2, #0
    5a26:	d018      	beq.n	5a5a <usb_device_endpoint_set_config+0x8a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5a28:	2080      	movs	r0, #128	; 0x80
    5a2a:	191a      	adds	r2, r3, r4
    5a2c:	6855      	ldr	r5, [r2, #4]
    5a2e:	0600      	lsls	r0, r0, #24
    5a30:	4305      	orrs	r5, r0
    5a32:	6055      	str	r5, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5a34:	6955      	ldr	r5, [r2, #20]
    5a36:	4328      	orrs	r0, r5
    5a38:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    5a3a:	784a      	ldrb	r2, [r1, #1]
    5a3c:	2107      	movs	r1, #7
    5a3e:	191b      	adds	r3, r3, r4
    5a40:	6858      	ldr	r0, [r3, #4]
    5a42:	4c40      	ldr	r4, [pc, #256]	; (5b44 <usb_device_endpoint_set_config+0x174>)
    5a44:	400a      	ands	r2, r1
    5a46:	0712      	lsls	r2, r2, #28
    5a48:	4020      	ands	r0, r4
    5a4a:	4310      	orrs	r0, r2
    5a4c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    5a4e:	6959      	ldr	r1, [r3, #20]
    5a50:	4021      	ands	r1, r4
    5a52:	430a      	orrs	r2, r1
    5a54:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5a56:	2000      	movs	r0, #0
    5a58:	e7cf      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5a5a:	1918      	adds	r0, r3, r4
    5a5c:	6842      	ldr	r2, [r0, #4]
    5a5e:	0052      	lsls	r2, r2, #1
    5a60:	0852      	lsrs	r2, r2, #1
    5a62:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5a64:	6942      	ldr	r2, [r0, #20]
    5a66:	0052      	lsls	r2, r2, #1
    5a68:	0852      	lsrs	r2, r2, #1
    5a6a:	6142      	str	r2, [r0, #20]
    5a6c:	e7e5      	b.n	5a3a <usb_device_endpoint_set_config+0x6a>
    5a6e:	0158      	lsls	r0, r3, #5
    5a70:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5a72:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    5a74:	2c00      	cmp	r4, #0
    5a76:	da24      	bge.n	5ac2 <usb_device_endpoint_set_config+0xf2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5a78:	2670      	movs	r6, #112	; 0x70
    5a7a:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    5a7c:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5a7e:	4237      	tst	r7, r6
    5a80:	d1bb      	bne.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    5a82:	7856      	ldrb	r6, [r2, #1]
    5a84:	3004      	adds	r0, #4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    5a86:	4330      	orrs	r0, r6
    5a88:	7050      	strb	r0, [r2, #1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5a8a:	2080      	movs	r0, #128	; 0x80
    5a8c:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    5a8e:	0fe4      	lsrs	r4, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    5a90:	005b      	lsls	r3, r3, #1
    5a92:	191b      	adds	r3, r3, r4
    5a94:	2407      	movs	r4, #7
    5a96:	4a2a      	ldr	r2, [pc, #168]	; (5b40 <usb_device_endpoint_set_config+0x170>)
    5a98:	7848      	ldrb	r0, [r1, #1]
    5a9a:	58aa      	ldr	r2, [r5, r2]
    5a9c:	011b      	lsls	r3, r3, #4
    5a9e:	9201      	str	r2, [sp, #4]
    5aa0:	18d3      	adds	r3, r2, r3
    5aa2:	685a      	ldr	r2, [r3, #4]
    5aa4:	4020      	ands	r0, r4
    5aa6:	4c27      	ldr	r4, [pc, #156]	; (5b44 <usb_device_endpoint_set_config+0x174>)
    5aa8:	0700      	lsls	r0, r0, #28
    5aaa:	4022      	ands	r2, r4
    5aac:	4302      	orrs	r2, r0
    5aae:	605a      	str	r2, [r3, #4]
	if (true == ep_config->auto_zlp) {
    5ab0:	7888      	ldrb	r0, [r1, #2]
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d03c      	beq.n	5b30 <usb_device_endpoint_set_config+0x160>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5ab6:	2280      	movs	r2, #128	; 0x80
    5ab8:	6859      	ldr	r1, [r3, #4]
    5aba:	0612      	lsls	r2, r2, #24
    5abc:	430a      	orrs	r2, r1
    5abe:	605a      	str	r2, [r3, #4]
    5ac0:	e7c9      	b.n	5a56 <usb_device_endpoint_set_config+0x86>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5ac2:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    5ac4:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5ac6:	0776      	lsls	r6, r6, #29
    5ac8:	d197      	bne.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    5aca:	7856      	ldrb	r6, [r2, #1]
    5acc:	381a      	subs	r0, #26
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    5ace:	4330      	orrs	r0, r6
    5ad0:	7050      	strb	r0, [r2, #1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    5ad2:	2040      	movs	r0, #64	; 0x40
    5ad4:	7190      	strb	r0, [r2, #6]
    5ad6:	e7da      	b.n	5a8e <usb_device_endpoint_set_config+0xbe>
    5ad8:	0158      	lsls	r0, r3, #5
    5ada:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5adc:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    5ade:	2c00      	cmp	r4, #0
    5ae0:	da08      	bge.n	5af4 <usb_device_endpoint_set_config+0x124>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5ae2:	2670      	movs	r6, #112	; 0x70
    5ae4:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    5ae6:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5ae8:	4237      	tst	r7, r6
    5aea:	d000      	beq.n	5aee <usb_device_endpoint_set_config+0x11e>
    5aec:	e785      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    5aee:	7856      	ldrb	r6, [r2, #1]
    5af0:	3014      	adds	r0, #20
    5af2:	e7c8      	b.n	5a86 <usb_device_endpoint_set_config+0xb6>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5af4:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    5af6:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5af8:	0776      	lsls	r6, r6, #29
    5afa:	d000      	beq.n	5afe <usb_device_endpoint_set_config+0x12e>
    5afc:	e77d      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    5afe:	7856      	ldrb	r6, [r2, #1]
    5b00:	3819      	subs	r0, #25
    5b02:	e7e4      	b.n	5ace <usb_device_endpoint_set_config+0xfe>
    5b04:	0158      	lsls	r0, r3, #5
    5b06:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5b08:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    5b0a:	2c00      	cmp	r4, #0
    5b0c:	da08      	bge.n	5b20 <usb_device_endpoint_set_config+0x150>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5b0e:	2670      	movs	r6, #112	; 0x70
    5b10:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    5b12:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    5b14:	4237      	tst	r7, r6
    5b16:	d000      	beq.n	5b1a <usb_device_endpoint_set_config+0x14a>
    5b18:	e76f      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    5b1a:	7856      	ldrb	r6, [r2, #1]
    5b1c:	3024      	adds	r0, #36	; 0x24
    5b1e:	e7b2      	b.n	5a86 <usb_device_endpoint_set_config+0xb6>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5b20:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    5b22:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5b24:	0776      	lsls	r6, r6, #29
    5b26:	d000      	beq.n	5b2a <usb_device_endpoint_set_config+0x15a>
    5b28:	e767      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    5b2a:	7856      	ldrb	r6, [r2, #1]
    5b2c:	3818      	subs	r0, #24
    5b2e:	e7ce      	b.n	5ace <usb_device_endpoint_set_config+0xfe>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5b30:	685a      	ldr	r2, [r3, #4]
    5b32:	0052      	lsls	r2, r2, #1
    5b34:	0852      	lsrs	r2, r2, #1
    5b36:	605a      	str	r2, [r3, #4]
    5b38:	e75f      	b.n	59fa <usb_device_endpoint_set_config+0x2a>
    5b3a:	46c0      	nop			; (mov r8, r8)
    5b3c:	0000810c 	.word	0x0000810c
    5b40:	00000024 	.word	0x00000024
    5b44:	8fffffff 	.word	0x8fffffff

00005b48 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    5b48:	230f      	movs	r3, #15
    5b4a:	400b      	ands	r3, r1
    5b4c:	015a      	lsls	r2, r3, #5
    5b4e:	6803      	ldr	r3, [r0, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    5b50:	b249      	sxtb	r1, r1
    5b52:	189b      	adds	r3, r3, r2
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5b54:	33ff      	adds	r3, #255	; 0xff
	if (ep & USB_EP_DIR_IN) {
    5b56:	2900      	cmp	r1, #0
    5b58:	da04      	bge.n	5b64 <usb_device_endpoint_abort_job+0x1c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5b5a:	2280      	movs	r2, #128	; 0x80
    5b5c:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    5b5e:	3a7e      	subs	r2, #126	; 0x7e
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    5b60:	721a      	strb	r2, [r3, #8]
	}
}
    5b62:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    5b64:	2240      	movs	r2, #64	; 0x40
    5b66:	719a      	strb	r2, [r3, #6]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    5b68:	3a3f      	subs	r2, #63	; 0x3f
    5b6a:	e7f9      	b.n	5b60 <usb_device_endpoint_abort_job+0x18>

00005b6c <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5b6c:	230f      	movs	r3, #15
    5b6e:	400b      	ands	r3, r1
    5b70:	6800      	ldr	r0, [r0, #0]
    5b72:	3308      	adds	r3, #8

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    5b74:	015b      	lsls	r3, r3, #5
    5b76:	18c3      	adds	r3, r0, r3
	if (ep & USB_EP_DIR_IN) {
    5b78:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    5b7a:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    5b7c:	2900      	cmp	r1, #0
    5b7e:	da02      	bge.n	5b86 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    5b80:	0680      	lsls	r0, r0, #26
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    5b82:	0fc0      	lsrs	r0, r0, #31
	}
}
    5b84:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    5b86:	06c0      	lsls	r0, r0, #27
    5b88:	e7fb      	b.n	5b82 <usb_device_endpoint_is_halted+0x16>

00005b8a <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5b8a:	230f      	movs	r3, #15
    5b8c:	400b      	ands	r3, r1
    5b8e:	6800      	ldr	r0, [r0, #0]
    5b90:	3308      	adds	r3, #8

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    5b92:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    5b94:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    5b96:	18c3      	adds	r3, r0, r3
    5b98:	2220      	movs	r2, #32
	if (ep & USB_EP_DIR_IN) {
    5b9a:	2900      	cmp	r1, #0
    5b9c:	db00      	blt.n	5ba0 <usb_device_endpoint_set_halt+0x16>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    5b9e:	2210      	movs	r2, #16
    5ba0:	715a      	strb	r2, [r3, #5]
	}
}
    5ba2:	4770      	bx	lr

00005ba4 <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5ba4:	230f      	movs	r3, #15
    5ba6:	400b      	ands	r3, r1
    5ba8:	015a      	lsls	r2, r3, #5
    5baa:	6803      	ldr	r3, [r0, #0]

	if (ep & USB_EP_DIR_IN) {
    5bac:	b249      	sxtb	r1, r1
    5bae:	189b      	adds	r3, r3, r2
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    5bb0:	33ff      	adds	r3, #255	; 0xff
	if (ep & USB_EP_DIR_IN) {
    5bb2:	2900      	cmp	r1, #0
    5bb4:	da0c      	bge.n	5bd0 <usb_device_endpoint_clear_halt+0x2c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    5bb6:	2220      	movs	r2, #32
    5bb8:	79d9      	ldrb	r1, [r3, #7]
    5bba:	4211      	tst	r1, r2
    5bbc:	d007      	beq.n	5bce <usb_device_endpoint_clear_halt+0x2a>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    5bbe:	715a      	strb	r2, [r3, #5]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    5bc0:	7a19      	ldrb	r1, [r3, #8]
    5bc2:	1892      	adds	r2, r2, r2
    5bc4:	4211      	tst	r1, r2
    5bc6:	d002      	beq.n	5bce <usb_device_endpoint_clear_halt+0x2a>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    5bc8:	721a      	strb	r2, [r3, #8]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    5bca:	3a3e      	subs	r2, #62	; 0x3e
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    5bcc:	715a      	strb	r2, [r3, #5]
			}
		}
	}
}
    5bce:	4770      	bx	lr
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    5bd0:	2210      	movs	r2, #16
    5bd2:	79d9      	ldrb	r1, [r3, #7]
    5bd4:	4211      	tst	r1, r2
    5bd6:	d0fa      	beq.n	5bce <usb_device_endpoint_clear_halt+0x2a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    5bd8:	715a      	strb	r2, [r3, #5]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    5bda:	7a19      	ldrb	r1, [r3, #8]
    5bdc:	1892      	adds	r2, r2, r2
    5bde:	4211      	tst	r1, r2
    5be0:	d0f5      	beq.n	5bce <usb_device_endpoint_clear_halt+0x2a>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    5be2:	721a      	strb	r2, [r3, #8]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    5be4:	3a1f      	subs	r2, #31
    5be6:	e7f1      	b.n	5bcc <usb_device_endpoint_clear_halt+0x28>

00005be8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    5be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    5bea:	000d      	movs	r5, r1
    5bec:	6804      	ldr	r4, [r0, #0]
    5bee:	3508      	adds	r5, #8
    5bf0:	016d      	lsls	r5, r5, #5
    5bf2:	5d2e      	ldrb	r6, [r5, r4]
{
    5bf4:	4f0e      	ldr	r7, [pc, #56]	; (5c30 <usb_device_endpoint_write_buffer_job+0x48>)
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    5bf6:	0676      	lsls	r6, r6, #25
{
    5bf8:	447f      	add	r7, pc
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    5bfa:	0f76      	lsrs	r6, r6, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    5bfc:	201c      	movs	r0, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    5bfe:	2e00      	cmp	r6, #0
    5c00:	d015      	beq.n	5c2e <usb_device_endpoint_write_buffer_job+0x46>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    5c02:	480c      	ldr	r0, [pc, #48]	; (5c34 <usb_device_endpoint_write_buffer_job+0x4c>)
    5c04:	0149      	lsls	r1, r1, #5
    5c06:	5838      	ldr	r0, [r7, r0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    5c08:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    5c0a:	1841      	adds	r1, r0, r1
    5c0c:	9001      	str	r0, [sp, #4]
    5c0e:	0008      	movs	r0, r1
    5c10:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5c12:	694a      	ldr	r2, [r1, #20]
    5c14:	4908      	ldr	r1, [pc, #32]	; (5c38 <usb_device_endpoint_write_buffer_job+0x50>)
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    5c16:	1964      	adds	r4, r4, r5
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5c18:	400a      	ands	r2, r1
    5c1a:	6142      	str	r2, [r0, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    5c1c:	6942      	ldr	r2, [r0, #20]
    5c1e:	0c99      	lsrs	r1, r3, #18
    5c20:	0b93      	lsrs	r3, r2, #14
    5c22:	039b      	lsls	r3, r3, #14
    5c24:	430b      	orrs	r3, r1
    5c26:	6143      	str	r3, [r0, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    5c28:	2380      	movs	r3, #128	; 0x80

	return STATUS_OK;
    5c2a:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    5c2c:	7163      	strb	r3, [r4, #5]
}
    5c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5c30:	00007ef0 	.word	0x00007ef0
    5c34:	00000024 	.word	0x00000024
    5c38:	f0003fff 	.word	0xf0003fff

00005c3c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    5c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    5c3e:	000d      	movs	r5, r1
    5c40:	6804      	ldr	r4, [r0, #0]
    5c42:	3508      	adds	r5, #8
    5c44:	016d      	lsls	r5, r5, #5
{
    5c46:	4f0e      	ldr	r7, [pc, #56]	; (5c80 <usb_device_endpoint_read_buffer_job+0x44>)
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    5c48:	5d2e      	ldrb	r6, [r5, r4]
{
    5c4a:	447f      	add	r7, pc
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    5c4c:	0776      	lsls	r6, r6, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    5c4e:	201c      	movs	r0, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    5c50:	2e00      	cmp	r6, #0
    5c52:	d013      	beq.n	5c7c <usb_device_endpoint_read_buffer_job+0x40>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    5c54:	480b      	ldr	r0, [pc, #44]	; (5c84 <usb_device_endpoint_read_buffer_job+0x48>)
    5c56:	0149      	lsls	r1, r1, #5
    5c58:	5838      	ldr	r0, [r7, r0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    5c5a:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    5c5c:	500a      	str	r2, [r1, r0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    5c5e:	1841      	adds	r1, r0, r1
    5c60:	684a      	ldr	r2, [r1, #4]
    5c62:	0918      	lsrs	r0, r3, #4
    5c64:	4b08      	ldr	r3, [pc, #32]	; (5c88 <usb_device_endpoint_read_buffer_job+0x4c>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    5c66:	1964      	adds	r4, r4, r5
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    5c68:	4013      	ands	r3, r2
    5c6a:	4303      	orrs	r3, r0
    5c6c:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    5c6e:	684b      	ldr	r3, [r1, #4]

	return STATUS_OK;
    5c70:	2000      	movs	r0, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    5c72:	0b9b      	lsrs	r3, r3, #14
    5c74:	039b      	lsls	r3, r3, #14
    5c76:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    5c78:	2340      	movs	r3, #64	; 0x40
    5c7a:	7123      	strb	r3, [r4, #4]
}
    5c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7e:	46c0      	nop			; (mov r8, r8)
    5c80:	00007e9e 	.word	0x00007e9e
    5c84:	00000024 	.word	0x00000024
    5c88:	f0003fff 	.word	0xf0003fff

00005c8c <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    5c8c:	4b0a      	ldr	r3, [pc, #40]	; (5cb8 <usb_device_endpoint_setup_buffer_job+0x2c>)
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    5c8e:	4a0b      	ldr	r2, [pc, #44]	; (5cbc <usb_device_endpoint_setup_buffer_job+0x30>)
{
    5c90:	447b      	add	r3, pc
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    5c92:	589b      	ldr	r3, [r3, r2]
    5c94:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    5c96:	685a      	ldr	r2, [r3, #4]
    5c98:	4909      	ldr	r1, [pc, #36]	; (5cc0 <usb_device_endpoint_setup_buffer_job+0x34>)
    5c9a:	4011      	ands	r1, r2
    5c9c:	2280      	movs	r2, #128	; 0x80
    5c9e:	0292      	lsls	r2, r2, #10
    5ca0:	430a      	orrs	r2, r1
    5ca2:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    5ca4:	685a      	ldr	r2, [r3, #4]
    5ca6:	0b92      	lsrs	r2, r2, #14
    5ca8:	0392      	lsls	r2, r2, #14
    5caa:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    5cac:	2240      	movs	r2, #64	; 0x40
    5cae:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    5cb0:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    5cb2:	33ff      	adds	r3, #255	; 0xff
    5cb4:	715a      	strb	r2, [r3, #5]
}
    5cb6:	4770      	bx	lr
    5cb8:	00007e58 	.word	0x00007e58
    5cbc:	00000024 	.word	0x00000024
    5cc0:	f0003fff 	.word	0xf0003fff

00005cc4 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    5cc4:	2202      	movs	r2, #2
    5cc6:	6803      	ldr	r3, [r0, #0]
    5cc8:	7819      	ldrb	r1, [r3, #0]
    5cca:	430a      	orrs	r2, r1
    5ccc:	701a      	strb	r2, [r3, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    5cce:	789a      	ldrb	r2, [r3, #2]
    5cd0:	2a02      	cmp	r2, #2
    5cd2:	d0fc      	beq.n	5cce <usb_enable+0xa>
}
    5cd4:	4770      	bx	lr
	...

00005cd8 <USB_Handler>:
/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5cd8:	4bc7      	ldr	r3, [pc, #796]	; (5ff8 <USB_Handler+0x320>)
{
    5cda:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5cdc:	447b      	add	r3, pc
    5cde:	681f      	ldr	r7, [r3, #0]
{
    5ce0:	4ec6      	ldr	r6, [pc, #792]	; (5ffc <USB_Handler+0x324>)
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5ce2:	683d      	ldr	r5, [r7, #0]
{
    5ce4:	447e      	add	r6, pc
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5ce6:	782b      	ldrb	r3, [r5, #0]
{
    5ce8:	b085      	sub	sp, #20
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    5cea:	09db      	lsrs	r3, r3, #7
    5cec:	d100      	bne.n	5cf0 <USB_Handler+0x18>
    5cee:	e0ed      	b.n	5ecc <USB_Handler+0x1f4>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    5cf0:	8c2b      	ldrh	r3, [r5, #32]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d100      	bne.n	5cf8 <USB_Handler+0x20>
    5cf6:	e237      	b.n	6168 <USB_Handler+0x490>
    5cf8:	4bc1      	ldr	r3, [pc, #772]	; (6000 <USB_Handler+0x328>)
    5cfa:	8c28      	ldrh	r0, [r5, #32]
    5cfc:	58f3      	ldr	r3, [r6, r3]
    5cfe:	b280      	uxth	r0, r0
    5d00:	9301      	str	r3, [sp, #4]
    5d02:	4798      	blx	r3
    5d04:	0143      	lsls	r3, r0, #5
    5d06:	0004      	movs	r4, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    5d08:	2003      	movs	r0, #3
    5d0a:	9301      	str	r3, [sp, #4]
    5d0c:	18eb      	adds	r3, r5, r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    5d0e:	33ff      	adds	r3, #255	; 0xff
    5d10:	7a1a      	ldrb	r2, [r3, #8]
    5d12:	b2d2      	uxtb	r2, r2
    5d14:	9201      	str	r2, [sp, #4]
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    5d16:	4202      	tst	r2, r0
    5d18:	d035      	beq.n	5d86 <USB_Handler+0xae>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5d1a:	4aba      	ldr	r2, [pc, #744]	; (6004 <USB_Handler+0x32c>)
    5d1c:	58b2      	ldr	r2, [r6, r2]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5d1e:	7218      	strb	r0, [r3, #8]
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5d20:	4694      	mov	ip, r2
    5d22:	2201      	movs	r2, #1
    5d24:	4661      	mov	r1, ip
    5d26:	40a2      	lsls	r2, r4
    5d28:	6809      	ldr	r1, [r1, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5d2a:	193b      	adds	r3, r7, r4
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5d2c:	4391      	bics	r1, r2
    5d2e:	000a      	movs	r2, r1
    5d30:	4661      	mov	r1, ip
    5d32:	600a      	str	r2, [r1, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5d34:	2201      	movs	r2, #1
    5d36:	33ae      	adds	r3, #174	; 0xae
    5d38:	781b      	ldrb	r3, [r3, #0]
    5d3a:	4213      	tst	r3, r2
    5d3c:	d023      	beq.n	5d86 <USB_Handler+0xae>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    5d3e:	0023      	movs	r3, r4
				pipe_callback_para.pipe_num = pipe_int;
    5d40:	4ab1      	ldr	r2, [pc, #708]	; (6008 <USB_Handler+0x330>)
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    5d42:	3308      	adds	r3, #8
				pipe_callback_para.pipe_num = pipe_int;
    5d44:	447a      	add	r2, pc
    5d46:	7014      	strb	r4, [r2, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    5d48:	015b      	lsls	r3, r3, #5
    5d4a:	5d59      	ldrb	r1, [r3, r5]
    5d4c:	4baf      	ldr	r3, [pc, #700]	; (600c <USB_Handler+0x334>)
    5d4e:	0789      	lsls	r1, r1, #30
    5d50:	0f89      	lsrs	r1, r1, #30
    5d52:	58f3      	ldr	r3, [r6, r3]
    5d54:	2901      	cmp	r1, #1
    5d56:	d000      	beq.n	5d5a <USB_Handler+0x82>
    5d58:	e0a1      	b.n	5e9e <USB_Handler+0x1c6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5d5a:	0161      	lsls	r1, r4, #5
    5d5c:	185b      	adds	r3, r3, r1
    5d5e:	6859      	ldr	r1, [r3, #4]
    5d60:	0489      	lsls	r1, r1, #18
    5d62:	0c89      	lsrs	r1, r1, #18
    5d64:	8051      	strh	r1, [r2, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5d66:	6859      	ldr	r1, [r3, #4]
    5d68:	0109      	lsls	r1, r1, #4
    5d6a:	0c89      	lsrs	r1, r1, #18
    5d6c:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    5d6e:	685a      	ldr	r2, [r3, #4]
    5d70:	0b92      	lsrs	r2, r2, #14
    5d72:	0392      	lsls	r2, r2, #14
    5d74:	605a      	str	r2, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    5d76:	1ca3      	adds	r3, r4, #2
    5d78:	011b      	lsls	r3, r3, #4
    5d7a:	49a5      	ldr	r1, [pc, #660]	; (6010 <USB_Handler+0x338>)
    5d7c:	18fb      	adds	r3, r7, r3
    5d7e:	685b      	ldr	r3, [r3, #4]
    5d80:	4479      	add	r1, pc
    5d82:	0038      	movs	r0, r7
    5d84:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    5d86:	2104      	movs	r1, #4
    5d88:	9b01      	ldr	r3, [sp, #4]
    5d8a:	420b      	tst	r3, r1
    5d8c:	d00f      	beq.n	5dae <USB_Handler+0xd6>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5d8e:	4b9d      	ldr	r3, [pc, #628]	; (6004 <USB_Handler+0x32c>)
    5d90:	58f2      	ldr	r2, [r6, r3]
    5d92:	2301      	movs	r3, #1
    5d94:	40a3      	lsls	r3, r4
    5d96:	6810      	ldr	r0, [r2, #0]
    5d98:	4398      	bics	r0, r3
    5d9a:	6010      	str	r0, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5d9c:	0022      	movs	r2, r4
    5d9e:	4b9d      	ldr	r3, [pc, #628]	; (6014 <USB_Handler+0x33c>)
    5da0:	3208      	adds	r2, #8
    5da2:	447b      	add	r3, pc
    5da4:	681b      	ldr	r3, [r3, #0]
    5da6:	0152      	lsls	r2, r2, #5
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	189b      	adds	r3, r3, r2
    5dac:	71d9      	strb	r1, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    5dae:	2208      	movs	r2, #8
    5db0:	9b01      	ldr	r3, [sp, #4]
    5db2:	4213      	tst	r3, r2
    5db4:	d025      	beq.n	5e02 <USB_Handler+0x12a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5db6:	4b93      	ldr	r3, [pc, #588]	; (6004 <USB_Handler+0x32c>)
    5db8:	58f1      	ldr	r1, [r6, r3]
    5dba:	2301      	movs	r3, #1
    5dbc:	40a3      	lsls	r3, r4
    5dbe:	6808      	ldr	r0, [r1, #0]
    5dc0:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5dc2:	4b95      	ldr	r3, [pc, #596]	; (6018 <USB_Handler+0x340>)
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5dc4:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5dc6:	447b      	add	r3, pc
    5dc8:	6818      	ldr	r0, [r3, #0]
    5dca:	18a3      	adds	r3, r4, r2
    5dcc:	6801      	ldr	r1, [r0, #0]
    5dce:	015b      	lsls	r3, r3, #5
    5dd0:	18cb      	adds	r3, r1, r3
    5dd2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5dd4:	1903      	adds	r3, r0, r4
    5dd6:	33ae      	adds	r3, #174	; 0xae
    5dd8:	781b      	ldrb	r3, [r3, #0]
    5dda:	079b      	lsls	r3, r3, #30
    5ddc:	d511      	bpl.n	5e02 <USB_Handler+0x12a>
				pipe_callback_para.pipe_num = pipe_int;
    5dde:	498f      	ldr	r1, [pc, #572]	; (601c <USB_Handler+0x344>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    5de0:	4b8a      	ldr	r3, [pc, #552]	; (600c <USB_Handler+0x334>)
				pipe_callback_para.pipe_num = pipe_int;
    5de2:	4479      	add	r1, pc
    5de4:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    5de6:	58f3      	ldr	r3, [r6, r3]
    5de8:	9302      	str	r3, [sp, #8]
    5dea:	9a02      	ldr	r2, [sp, #8]
    5dec:	0163      	lsls	r3, r4, #5
    5dee:	4694      	mov	ip, r2
    5df0:	221f      	movs	r2, #31
    5df2:	4463      	add	r3, ip
    5df4:	89db      	ldrh	r3, [r3, #14]
    5df6:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    5df8:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    5dfa:	0123      	lsls	r3, r4, #4
    5dfc:	18c3      	adds	r3, r0, r3
    5dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e00:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    5e02:	2210      	movs	r2, #16
    5e04:	9b01      	ldr	r3, [sp, #4]
    5e06:	4213      	tst	r3, r2
    5e08:	d026      	beq.n	5e58 <USB_Handler+0x180>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5e0a:	4b7e      	ldr	r3, [pc, #504]	; (6004 <USB_Handler+0x32c>)
    5e0c:	58f1      	ldr	r1, [r6, r3]
    5e0e:	2301      	movs	r3, #1
    5e10:	40a3      	lsls	r3, r4
    5e12:	6808      	ldr	r0, [r1, #0]
    5e14:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5e16:	4b82      	ldr	r3, [pc, #520]	; (6020 <USB_Handler+0x348>)
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5e18:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5e1a:	447b      	add	r3, pc
    5e1c:	6818      	ldr	r0, [r3, #0]
    5e1e:	0023      	movs	r3, r4
    5e20:	6801      	ldr	r1, [r0, #0]
    5e22:	3308      	adds	r3, #8
    5e24:	015b      	lsls	r3, r3, #5
    5e26:	18cb      	adds	r3, r1, r3
    5e28:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5e2a:	1903      	adds	r3, r0, r4
    5e2c:	33ae      	adds	r3, #174	; 0xae
    5e2e:	781b      	ldrb	r3, [r3, #0]
    5e30:	075b      	lsls	r3, r3, #29
    5e32:	d511      	bpl.n	5e58 <USB_Handler+0x180>
				pipe_callback_para.pipe_num = pipe_int;
    5e34:	4a7b      	ldr	r2, [pc, #492]	; (6024 <USB_Handler+0x34c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5e36:	4b75      	ldr	r3, [pc, #468]	; (600c <USB_Handler+0x334>)
				pipe_callback_para.pipe_num = pipe_int;
    5e38:	447a      	add	r2, pc
    5e3a:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5e3c:	58f3      	ldr	r3, [r6, r3]
    5e3e:	9302      	str	r3, [sp, #8]
    5e40:	9902      	ldr	r1, [sp, #8]
    5e42:	0163      	lsls	r3, r4, #5
    5e44:	18cb      	adds	r3, r1, r3
    5e46:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    5e48:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5e4a:	011b      	lsls	r3, r3, #4
    5e4c:	0c9b      	lsrs	r3, r3, #18
    5e4e:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    5e50:	0123      	lsls	r3, r4, #4
    5e52:	18c3      	adds	r3, r0, r3
    5e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5e56:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_STALL) {
    5e58:	2220      	movs	r2, #32
    5e5a:	9b01      	ldr	r3, [sp, #4]
    5e5c:	4213      	tst	r3, r2
    5e5e:	d100      	bne.n	5e62 <USB_Handler+0x18a>
    5e60:	e20b      	b.n	627a <USB_Handler+0x5a2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5e62:	4b68      	ldr	r3, [pc, #416]	; (6004 <USB_Handler+0x32c>)
    5e64:	58f1      	ldr	r1, [r6, r3]
    5e66:	2301      	movs	r3, #1
    5e68:	40a3      	lsls	r3, r4
    5e6a:	6808      	ldr	r0, [r1, #0]
    5e6c:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5e6e:	4b6e      	ldr	r3, [pc, #440]	; (6028 <USB_Handler+0x350>)
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    5e70:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5e72:	447b      	add	r3, pc
    5e74:	6818      	ldr	r0, [r3, #0]
    5e76:	0023      	movs	r3, r4
    5e78:	6801      	ldr	r1, [r0, #0]
    5e7a:	3308      	adds	r3, #8
    5e7c:	015b      	lsls	r3, r3, #5
    5e7e:	18cb      	adds	r3, r1, r3
    5e80:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5e82:	1903      	adds	r3, r0, r4
    5e84:	33ae      	adds	r3, #174	; 0xae
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	071b      	lsls	r3, r3, #28
    5e8a:	d400      	bmi.n	5e8e <USB_Handler+0x1b6>
    5e8c:	e1f5      	b.n	627a <USB_Handler+0x5a2>
				pipe_callback_para.pipe_num = pipe_int;
    5e8e:	4967      	ldr	r1, [pc, #412]	; (602c <USB_Handler+0x354>)
    5e90:	4479      	add	r1, pc
    5e92:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    5e94:	0124      	lsls	r4, r4, #4
    5e96:	1904      	adds	r4, r0, r4
    5e98:	6b23      	ldr	r3, [r4, #48]	; 0x30
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    5e9a:	4798      	blx	r3
    5e9c:	e1ed      	b.n	627a <USB_Handler+0x5a2>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5e9e:	0161      	lsls	r1, r4, #5
    5ea0:	185b      	adds	r3, r3, r1
    5ea2:	6859      	ldr	r1, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5ea4:	4d62      	ldr	r5, [pc, #392]	; (6030 <USB_Handler+0x358>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    5ea6:	0109      	lsls	r1, r1, #4
    5ea8:	0c89      	lsrs	r1, r1, #18
    5eaa:	8051      	strh	r1, [r2, #2]
    5eac:	b288      	uxth	r0, r1
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5eae:	6859      	ldr	r1, [r3, #4]
    5eb0:	0489      	lsls	r1, r1, #18
    5eb2:	0c89      	lsrs	r1, r1, #18
    5eb4:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    5eb6:	6859      	ldr	r1, [r3, #4]
    5eb8:	4029      	ands	r1, r5
    5eba:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    5ebc:	2800      	cmp	r0, #0
    5ebe:	d000      	beq.n	5ec2 <USB_Handler+0x1ea>
    5ec0:	e759      	b.n	5d76 <USB_Handler+0x9e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    5ec2:	685b      	ldr	r3, [r3, #4]
    5ec4:	049b      	lsls	r3, r3, #18
    5ec6:	0c9b      	lsrs	r3, r3, #18
    5ec8:	8053      	strh	r3, [r2, #2]
    5eca:	e754      	b.n	5d76 <USB_Handler+0x9e>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    5ecc:	8c2c      	ldrh	r4, [r5, #32]
    5ece:	b2a2      	uxth	r2, r4
    5ed0:	9201      	str	r2, [sp, #4]
	if (0 == ep_inst) {
    5ed2:	2a00      	cmp	r2, #0
    5ed4:	d135      	bne.n	5f42 <USB_Handler+0x26a>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    5ed6:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
    5ed8:	3255      	adds	r2, #85	; 0x55
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    5eda:	b29b      	uxth	r3, r3
    5edc:	9302      	str	r3, [sp, #8]
				_usb_instances->device_enabled_callback_mask &
    5ede:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    5ee0:	32ff      	adds	r2, #255	; 0xff
				_usb_instances->device_enabled_callback_mask &
    5ee2:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    5ee4:	5afb      	ldrh	r3, [r7, r3]
    5ee6:	5abd      	ldrh	r5, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5ee8:	2780      	movs	r7, #128	; 0x80
		flags_run = flags &
    5eea:	401d      	ands	r5, r3
    5eec:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5eee:	9c01      	ldr	r4, [sp, #4]
		flags_run = flags &
    5ef0:	401d      	ands	r5, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5ef2:	007f      	lsls	r7, r7, #1
			if (flags & _usb_device_irq_bits[i]) {
    5ef4:	4a4f      	ldr	r2, [pc, #316]	; (6034 <USB_Handler+0x35c>)
    5ef6:	0063      	lsls	r3, r4, #1
    5ef8:	447a      	add	r2, pc
    5efa:	5a9b      	ldrh	r3, [r3, r2]
    5efc:	9a02      	ldr	r2, [sp, #8]
    5efe:	4213      	tst	r3, r2
    5f00:	d004      	beq.n	5f0c <USB_Handler+0x234>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    5f02:	4a4d      	ldr	r2, [pc, #308]	; (6038 <USB_Handler+0x360>)
    5f04:	447a      	add	r2, pc
    5f06:	6812      	ldr	r2, [r2, #0]
    5f08:	6812      	ldr	r2, [r2, #0]
    5f0a:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    5f0c:	422b      	tst	r3, r5
    5f0e:	d014      	beq.n	5f3a <USB_Handler+0x262>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    5f10:	2c06      	cmp	r4, #6
    5f12:	d108      	bne.n	5f26 <USB_Handler+0x24e>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5f14:	4b3d      	ldr	r3, [pc, #244]	; (600c <USB_Handler+0x334>)
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5f16:	4a49      	ldr	r2, [pc, #292]	; (603c <USB_Handler+0x364>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5f18:	58f3      	ldr	r3, [r6, r3]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5f1a:	447a      	add	r2, pc
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    5f1c:	9301      	str	r3, [sp, #4]
    5f1e:	891b      	ldrh	r3, [r3, #8]
    5f20:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5f22:	403b      	ands	r3, r7
    5f24:	6013      	str	r3, [r2, #0]
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    5f26:	4b46      	ldr	r3, [pc, #280]	; (6040 <USB_Handler+0x368>)
    5f28:	4946      	ldr	r1, [pc, #280]	; (6044 <USB_Handler+0x36c>)
    5f2a:	447b      	add	r3, pc
    5f2c:	6818      	ldr	r0, [r3, #0]
    5f2e:	0023      	movs	r3, r4
    5f30:	332e      	adds	r3, #46	; 0x2e
    5f32:	009b      	lsls	r3, r3, #2
    5f34:	581b      	ldr	r3, [r3, r0]
    5f36:	4479      	add	r1, pc
    5f38:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5f3a:	3401      	adds	r4, #1
    5f3c:	2c07      	cmp	r4, #7
    5f3e:	d1d9      	bne.n	5ef4 <USB_Handler+0x21c>
    5f40:	e19b      	b.n	627a <USB_Handler+0x5a2>
    5f42:	003c      	movs	r4, r7
    5f44:	3459      	adds	r4, #89	; 0x59
    5f46:	34ff      	adds	r4, #255	; 0xff
    5f48:	b2da      	uxtb	r2, r3
    5f4a:	4694      	mov	ip, r2
			if (ep_inst & (1 << i)) {
    5f4c:	9a01      	ldr	r2, [sp, #4]
    5f4e:	2101      	movs	r1, #1
    5f50:	411a      	asrs	r2, r3
    5f52:	420a      	tst	r2, r1
    5f54:	d100      	bne.n	5f58 <USB_Handler+0x280>
    5f56:	e101      	b.n	615c <USB_Handler+0x484>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    5f58:	001a      	movs	r2, r3
    5f5a:	3208      	adds	r2, #8
    5f5c:	0152      	lsls	r2, r2, #5
    5f5e:	18aa      	adds	r2, r5, r2
    5f60:	1dd1      	adds	r1, r2, #7
    5f62:	9103      	str	r1, [sp, #12]
    5f64:	79d1      	ldrb	r1, [r2, #7]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    5f66:	7a22      	ldrb	r2, [r4, #8]
    5f68:	7820      	ldrb	r0, [r4, #0]
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    5f6a:	b2c9      	uxtb	r1, r1
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    5f6c:	9202      	str	r2, [sp, #8]
    5f6e:	400a      	ands	r2, r1
    5f70:	4002      	ands	r2, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5f72:	2060      	movs	r0, #96	; 0x60
    5f74:	4201      	tst	r1, r0
    5f76:	d024      	beq.n	5fc2 <USB_Handler+0x2ea>
    5f78:	0159      	lsls	r1, r3, #5
    5f7a:	1869      	adds	r1, r5, r1
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    5f7c:	31ff      	adds	r1, #255	; 0xff
    5f7e:	7a0c      	ldrb	r4, [r1, #8]
    5f80:	3820      	subs	r0, #32
    5f82:	4204      	tst	r4, r0
    5f84:	d013      	beq.n	5fae <USB_Handler+0x2d6>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    5f86:	7208      	strb	r0, [r1, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5f88:	2180      	movs	r1, #128	; 0x80
    5f8a:	4660      	mov	r0, ip
    5f8c:	4249      	negs	r1, r1
    5f8e:	4301      	orrs	r1, r0
    5f90:	482d      	ldr	r0, [pc, #180]	; (6048 <USB_Handler+0x370>)
    5f92:	4478      	add	r0, pc
    5f94:	7181      	strb	r1, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5f96:	2160      	movs	r1, #96	; 0x60
    5f98:	420a      	tst	r2, r1
    5f9a:	d100      	bne.n	5f9e <USB_Handler+0x2c6>
    5f9c:	e16d      	b.n	627a <USB_Handler+0x5a2>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    5f9e:	011b      	lsls	r3, r3, #4
    5fa0:	18fb      	adds	r3, r7, r3
    5fa2:	33e0      	adds	r3, #224	; 0xe0
    5fa4:	4929      	ldr	r1, [pc, #164]	; (604c <USB_Handler+0x374>)
    5fa6:	681b      	ldr	r3, [r3, #0]
    5fa8:	4479      	add	r1, pc
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    5faa:	0038      	movs	r0, r7
    5fac:	e775      	b.n	5e9a <USB_Handler+0x1c2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    5fae:	2020      	movs	r0, #32
    5fb0:	7a0c      	ldrb	r4, [r1, #8]
    5fb2:	4204      	tst	r4, r0
    5fb4:	d0ef      	beq.n	5f96 <USB_Handler+0x2be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    5fb6:	7208      	strb	r0, [r1, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5fb8:	4660      	mov	r0, ip
    5fba:	4925      	ldr	r1, [pc, #148]	; (6050 <USB_Handler+0x378>)
    5fbc:	4479      	add	r1, pc
    5fbe:	7188      	strb	r0, [r1, #6]
    5fc0:	e7e9      	b.n	5f96 <USB_Handler+0x2be>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5fc2:	2010      	movs	r0, #16
    5fc4:	4201      	tst	r1, r0
    5fc6:	d047      	beq.n	6058 <USB_Handler+0x380>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    5fc8:	9a03      	ldr	r2, [sp, #12]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    5fca:	9902      	ldr	r1, [sp, #8]
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    5fcc:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    5fce:	4201      	tst	r1, r0
    5fd0:	d100      	bne.n	5fd4 <USB_Handler+0x2fc>
    5fd2:	e152      	b.n	627a <USB_Handler+0x5a2>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5fd4:	4a0d      	ldr	r2, [pc, #52]	; (600c <USB_Handler+0x334>)
    5fd6:	58b2      	ldr	r2, [r6, r2]
    5fd8:	9201      	str	r2, [sp, #4]
    5fda:	9901      	ldr	r1, [sp, #4]
    5fdc:	015a      	lsls	r2, r3, #5
    5fde:	188a      	adds	r2, r1, r2
    5fe0:	6852      	ldr	r2, [r2, #4]
    5fe2:	491c      	ldr	r1, [pc, #112]	; (6054 <USB_Handler+0x37c>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5fe4:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5fe6:	0492      	lsls	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5fe8:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5fea:	0c92      	lsrs	r2, r2, #18
    5fec:	4479      	add	r1, pc
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5fee:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5ff0:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	e7d9      	b.n	5faa <USB_Handler+0x2d2>
    5ff6:	46c0      	nop			; (mov r8, r8)
    5ff8:	1fffb08c 	.word	0x1fffb08c
    5ffc:	00007e04 	.word	0x00007e04
    6000:	000002c0 	.word	0x000002c0
    6004:	000000d4 	.word	0x000000d4
    6008:	1fffb038 	.word	0x1fffb038
    600c:	00000024 	.word	0x00000024
    6010:	1fffaffc 	.word	0x1fffaffc
    6014:	1fffafc6 	.word	0x1fffafc6
    6018:	1fffafa2 	.word	0x1fffafa2
    601c:	1fffaf9a 	.word	0x1fffaf9a
    6020:	1fffaf4e 	.word	0x1fffaf4e
    6024:	1fffaf44 	.word	0x1fffaf44
    6028:	1fffaef6 	.word	0x1fffaef6
    602c:	1fffaeec 	.word	0x1fffaeec
    6030:	f0003fff 	.word	0xf0003fff
    6034:	00007744 	.word	0x00007744
    6038:	1fffae64 	.word	0x1fffae64
    603c:	1fffae52 	.word	0x1fffae52
    6040:	1fffae3e 	.word	0x1fffae3e
    6044:	1fffae36 	.word	0x1fffae36
    6048:	1fffadde 	.word	0x1fffadde
    604c:	1fffadc8 	.word	0x1fffadc8
    6050:	1fffadb4 	.word	0x1fffadb4
    6054:	1fffad84 	.word	0x1fffad84
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6058:	2003      	movs	r0, #3
    605a:	4201      	tst	r1, r0
    605c:	d036      	beq.n	60cc <USB_Handler+0x3f4>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    605e:	2402      	movs	r4, #2
    6060:	0158      	lsls	r0, r3, #5
    6062:	1829      	adds	r1, r5, r0
    6064:	31ff      	adds	r1, #255	; 0xff
    6066:	7a0d      	ldrb	r5, [r1, #8]
    6068:	4225      	tst	r5, r4
    606a:	d019      	beq.n	60a0 <USB_Handler+0x3c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    606c:	720c      	strb	r4, [r1, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    606e:	2180      	movs	r1, #128	; 0x80
    6070:	4665      	mov	r5, ip
    6072:	4c83      	ldr	r4, [pc, #524]	; (6280 <USB_Handler+0x5a8>)
    6074:	4249      	negs	r1, r1
    6076:	447c      	add	r4, pc
    6078:	4329      	orrs	r1, r5
    607a:	71a1      	strb	r1, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    607c:	4981      	ldr	r1, [pc, #516]	; (6284 <USB_Handler+0x5ac>)
    607e:	5871      	ldr	r1, [r6, r1]
    6080:	9101      	str	r1, [sp, #4]
    6082:	1808      	adds	r0, r1, r0
    6084:	6941      	ldr	r1, [r0, #20]
    6086:	0489      	lsls	r1, r1, #18
    6088:	0c89      	lsrs	r1, r1, #18
    608a:	8061      	strh	r1, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    608c:	0792      	lsls	r2, r2, #30
    608e:	d100      	bne.n	6092 <USB_Handler+0x3ba>
    6090:	e0f3      	b.n	627a <USB_Handler+0x5a2>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6092:	330d      	adds	r3, #13
    6094:	011b      	lsls	r3, r3, #4
    6096:	497c      	ldr	r1, [pc, #496]	; (6288 <USB_Handler+0x5b0>)
    6098:	18fb      	adds	r3, r7, r3
    609a:	685b      	ldr	r3, [r3, #4]
    609c:	4479      	add	r1, pc
    609e:	e784      	b.n	5faa <USB_Handler+0x2d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    60a0:	2501      	movs	r5, #1
    60a2:	7a0c      	ldrb	r4, [r1, #8]
    60a4:	422c      	tst	r4, r5
    60a6:	d0f1      	beq.n	608c <USB_Handler+0x3b4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    60a8:	720d      	strb	r5, [r1, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    60aa:	4661      	mov	r1, ip
    60ac:	4c77      	ldr	r4, [pc, #476]	; (628c <USB_Handler+0x5b4>)
    60ae:	447c      	add	r4, pc
    60b0:	71a1      	strb	r1, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    60b2:	4974      	ldr	r1, [pc, #464]	; (6284 <USB_Handler+0x5ac>)
    60b4:	5871      	ldr	r1, [r6, r1]
    60b6:	9101      	str	r1, [sp, #4]
    60b8:	1808      	adds	r0, r1, r0
    60ba:	6841      	ldr	r1, [r0, #4]
    60bc:	0489      	lsls	r1, r1, #18
    60be:	0c89      	lsrs	r1, r1, #18
    60c0:	8021      	strh	r1, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    60c2:	6841      	ldr	r1, [r0, #4]
    60c4:	0109      	lsls	r1, r1, #4
    60c6:	0c89      	lsrs	r1, r1, #18
    60c8:	80a1      	strh	r1, [r4, #4]
    60ca:	e7df      	b.n	608c <USB_Handler+0x3b4>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    60cc:	200c      	movs	r0, #12
    60ce:	4201      	tst	r1, r0
    60d0:	d044      	beq.n	615c <USB_Handler+0x484>
    60d2:	015c      	lsls	r4, r3, #5
    60d4:	1929      	adds	r1, r5, r4
    60d6:	9101      	str	r1, [sp, #4]
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    60d8:	31ff      	adds	r1, #255	; 0xff
    60da:	7a0d      	ldrb	r5, [r1, #8]
    60dc:	0028      	movs	r0, r5
    60de:	2508      	movs	r5, #8
    60e0:	4228      	tst	r0, r5
    60e2:	d021      	beq.n	6128 <USB_Handler+0x450>
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    60e4:	4867      	ldr	r0, [pc, #412]	; (6284 <USB_Handler+0x5ac>)
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    60e6:	720d      	strb	r5, [r1, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    60e8:	5830      	ldr	r0, [r6, r0]
    60ea:	3d06      	subs	r5, #6
    60ec:	1904      	adds	r4, r0, r4
    60ee:	9001      	str	r0, [sp, #4]
    60f0:	7ea0      	ldrb	r0, [r4, #26]
    60f2:	4228      	tst	r0, r5
    60f4:	d002      	beq.n	60fc <USB_Handler+0x424>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    60f6:	7ea0      	ldrb	r0, [r4, #26]
    60f8:	43a8      	bics	r0, r5
    60fa:	76a0      	strb	r0, [r4, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    60fc:	2080      	movs	r0, #128	; 0x80
    60fe:	4664      	mov	r4, ip
    6100:	4240      	negs	r0, r0
    6102:	4320      	orrs	r0, r4
    6104:	4c62      	ldr	r4, [pc, #392]	; (6290 <USB_Handler+0x5b8>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6106:	7a09      	ldrb	r1, [r1, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6108:	447c      	add	r4, pc
    610a:	71a0      	strb	r0, [r4, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    610c:	0789      	lsls	r1, r1, #30
    610e:	d500      	bpl.n	6112 <USB_Handler+0x43a>
    6110:	e0b3      	b.n	627a <USB_Handler+0x5a2>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6112:	210c      	movs	r1, #12
    6114:	420a      	tst	r2, r1
    6116:	d100      	bne.n	611a <USB_Handler+0x442>
    6118:	e0af      	b.n	627a <USB_Handler+0x5a2>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    611a:	011b      	lsls	r3, r3, #4
    611c:	18fb      	adds	r3, r7, r3
    611e:	495d      	ldr	r1, [pc, #372]	; (6294 <USB_Handler+0x5bc>)
    6120:	33d8      	adds	r3, #216	; 0xd8
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	4479      	add	r1, pc
    6126:	e740      	b.n	5faa <USB_Handler+0x2d2>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6128:	2504      	movs	r5, #4
    612a:	7a08      	ldrb	r0, [r1, #8]
    612c:	4228      	tst	r0, r5
    612e:	d0f0      	beq.n	6112 <USB_Handler+0x43a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6130:	720d      	strb	r5, [r1, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6132:	4954      	ldr	r1, [pc, #336]	; (6284 <USB_Handler+0x5ac>)
    6134:	3d02      	subs	r5, #2
    6136:	5871      	ldr	r1, [r6, r1]
    6138:	190c      	adds	r4, r1, r4
    613a:	9102      	str	r1, [sp, #8]
    613c:	7aa1      	ldrb	r1, [r4, #10]
    613e:	4229      	tst	r1, r5
    6140:	d002      	beq.n	6148 <USB_Handler+0x470>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6142:	7aa1      	ldrb	r1, [r4, #10]
    6144:	43a9      	bics	r1, r5
    6146:	72a1      	strb	r1, [r4, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6148:	4660      	mov	r0, ip
    614a:	4953      	ldr	r1, [pc, #332]	; (6298 <USB_Handler+0x5c0>)
    614c:	4479      	add	r1, pc
    614e:	7188      	strb	r0, [r1, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6150:	9801      	ldr	r0, [sp, #4]
    6152:	30ff      	adds	r0, #255	; 0xff
    6154:	7a01      	ldrb	r1, [r0, #8]
    6156:	07c9      	lsls	r1, r1, #31
    6158:	d5db      	bpl.n	6112 <USB_Handler+0x43a>
    615a:	e08e      	b.n	627a <USB_Handler+0x5a2>
    615c:	3301      	adds	r3, #1
    615e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6160:	2b08      	cmp	r3, #8
    6162:	d000      	beq.n	6166 <USB_Handler+0x48e>
    6164:	e6f0      	b.n	5f48 <USB_Handler+0x270>
    6166:	e088      	b.n	627a <USB_Handler+0x5a2>
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6168:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    616a:	8bac      	ldrh	r4, [r5, #28]
    616c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    616e:	421c      	tst	r4, r3
    6170:	d008      	beq.n	6184 <USB_Handler+0x4ac>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6172:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6174:	003b      	movs	r3, r7
    6176:	33a5      	adds	r3, #165	; 0xa5
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	07db      	lsls	r3, r3, #31
    617c:	d502      	bpl.n	6184 <USB_Handler+0x4ac>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    617e:	687b      	ldr	r3, [r7, #4]
    6180:	0038      	movs	r0, r7
    6182:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RST) {
    6184:	2308      	movs	r3, #8
    6186:	421c      	tst	r4, r3
    6188:	d00f      	beq.n	61aa <USB_Handler+0x4d2>
			host_pipe_job_busy_status = 0;
    618a:	2100      	movs	r1, #0
    618c:	4a43      	ldr	r2, [pc, #268]	; (629c <USB_Handler+0x5c4>)
    618e:	58b2      	ldr	r2, [r6, r2]
    6190:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6192:	4a43      	ldr	r2, [pc, #268]	; (62a0 <USB_Handler+0x5c8>)
    6194:	447a      	add	r2, pc
    6196:	6810      	ldr	r0, [r2, #0]
    6198:	6802      	ldr	r2, [r0, #0]
    619a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    619c:	0003      	movs	r3, r0
    619e:	33a5      	adds	r3, #165	; 0xa5
    61a0:	781b      	ldrb	r3, [r3, #0]
    61a2:	079b      	lsls	r3, r3, #30
    61a4:	d501      	bpl.n	61aa <USB_Handler+0x4d2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    61a6:	6883      	ldr	r3, [r0, #8]
    61a8:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    61aa:	2340      	movs	r3, #64	; 0x40
    61ac:	421c      	tst	r4, r3
    61ae:	d00b      	beq.n	61c8 <USB_Handler+0x4f0>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    61b0:	4a3c      	ldr	r2, [pc, #240]	; (62a4 <USB_Handler+0x5cc>)
    61b2:	447a      	add	r2, pc
    61b4:	6810      	ldr	r0, [r2, #0]
    61b6:	6802      	ldr	r2, [r0, #0]
    61b8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    61ba:	0003      	movs	r3, r0
    61bc:	33a5      	adds	r3, #165	; 0xa5
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	06db      	lsls	r3, r3, #27
    61c2:	d501      	bpl.n	61c8 <USB_Handler+0x4f0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    61c4:	6943      	ldr	r3, [r0, #20]
    61c6:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    61c8:	2320      	movs	r3, #32
    61ca:	421c      	tst	r4, r3
    61cc:	d00b      	beq.n	61e6 <USB_Handler+0x50e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    61ce:	4a36      	ldr	r2, [pc, #216]	; (62a8 <USB_Handler+0x5d0>)
    61d0:	447a      	add	r2, pc
    61d2:	6810      	ldr	r0, [r2, #0]
    61d4:	6802      	ldr	r2, [r0, #0]
    61d6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    61d8:	0003      	movs	r3, r0
    61da:	33a5      	adds	r3, #165	; 0xa5
    61dc:	781b      	ldrb	r3, [r3, #0]
    61de:	071b      	lsls	r3, r3, #28
    61e0:	d501      	bpl.n	61e6 <USB_Handler+0x50e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    61e2:	6903      	ldr	r3, [r0, #16]
    61e4:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    61e6:	2310      	movs	r3, #16
    61e8:	421c      	tst	r4, r3
    61ea:	d00b      	beq.n	6204 <USB_Handler+0x52c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    61ec:	4a2f      	ldr	r2, [pc, #188]	; (62ac <USB_Handler+0x5d4>)
    61ee:	447a      	add	r2, pc
    61f0:	6810      	ldr	r0, [r2, #0]
    61f2:	6802      	ldr	r2, [r0, #0]
    61f4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    61f6:	0003      	movs	r3, r0
    61f8:	33a5      	adds	r3, #165	; 0xa5
    61fa:	781b      	ldrb	r3, [r3, #0]
    61fc:	075b      	lsls	r3, r3, #29
    61fe:	d501      	bpl.n	6204 <USB_Handler+0x52c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6200:	68c3      	ldr	r3, [r0, #12]
    6202:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6204:	2380      	movs	r3, #128	; 0x80
    6206:	421c      	tst	r4, r3
    6208:	d00f      	beq.n	622a <USB_Handler+0x552>
			host_pipe_job_busy_status = 0;
    620a:	2100      	movs	r1, #0
    620c:	4a23      	ldr	r2, [pc, #140]	; (629c <USB_Handler+0x5c4>)
    620e:	58b2      	ldr	r2, [r6, r2]
    6210:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6212:	4a27      	ldr	r2, [pc, #156]	; (62b0 <USB_Handler+0x5d8>)
    6214:	447a      	add	r2, pc
    6216:	6810      	ldr	r0, [r2, #0]
    6218:	6802      	ldr	r2, [r0, #0]
    621a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    621c:	0003      	movs	r3, r0
    621e:	33a5      	adds	r3, #165	; 0xa5
    6220:	781b      	ldrb	r3, [r3, #0]
    6222:	069b      	lsls	r3, r3, #26
    6224:	d501      	bpl.n	622a <USB_Handler+0x552>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6226:	6983      	ldr	r3, [r0, #24]
    6228:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DCONN) {
    622a:	2380      	movs	r3, #128	; 0x80
    622c:	005b      	lsls	r3, r3, #1
    622e:	421c      	tst	r4, r3
    6230:	d00f      	beq.n	6252 <USB_Handler+0x57a>
			host_pipe_job_busy_status = 0;
    6232:	2100      	movs	r1, #0
    6234:	4a19      	ldr	r2, [pc, #100]	; (629c <USB_Handler+0x5c4>)
    6236:	58b2      	ldr	r2, [r6, r2]
    6238:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    623a:	4a1e      	ldr	r2, [pc, #120]	; (62b4 <USB_Handler+0x5dc>)
    623c:	447a      	add	r2, pc
    623e:	6810      	ldr	r0, [r2, #0]
    6240:	6802      	ldr	r2, [r0, #0]
    6242:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6244:	0003      	movs	r3, r0
    6246:	33a5      	adds	r3, #165	; 0xa5
    6248:	781b      	ldrb	r3, [r3, #0]
    624a:	065b      	lsls	r3, r3, #25
    624c:	d501      	bpl.n	6252 <USB_Handler+0x57a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    624e:	69c3      	ldr	r3, [r0, #28]
    6250:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6252:	2380      	movs	r3, #128	; 0x80
    6254:	009b      	lsls	r3, r3, #2
    6256:	421c      	tst	r4, r3
    6258:	d00f      	beq.n	627a <USB_Handler+0x5a2>
			host_pipe_job_busy_status = 0;
    625a:	2100      	movs	r1, #0
    625c:	4a0f      	ldr	r2, [pc, #60]	; (629c <USB_Handler+0x5c4>)
    625e:	58b2      	ldr	r2, [r6, r2]
    6260:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6262:	4a15      	ldr	r2, [pc, #84]	; (62b8 <USB_Handler+0x5e0>)
    6264:	447a      	add	r2, pc
    6266:	6810      	ldr	r0, [r2, #0]
    6268:	6802      	ldr	r2, [r0, #0]
    626a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    626c:	0003      	movs	r3, r0
    626e:	33a5      	adds	r3, #165	; 0xa5
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	2b7f      	cmp	r3, #127	; 0x7f
    6274:	d901      	bls.n	627a <USB_Handler+0x5a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6276:	6a03      	ldr	r3, [r0, #32]
    6278:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    627a:	b005      	add	sp, #20
    627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    627e:	46c0      	nop			; (mov r8, r8)
    6280:	1fffacfa 	.word	0x1fffacfa
    6284:	00000024 	.word	0x00000024
    6288:	1fffacd4 	.word	0x1fffacd4
    628c:	1fffacc2 	.word	0x1fffacc2
    6290:	1fffac68 	.word	0x1fffac68
    6294:	1fffac4c 	.word	0x1fffac4c
    6298:	1fffac24 	.word	0x1fffac24
    629c:	000000d4 	.word	0x000000d4
    62a0:	1fffabd4 	.word	0x1fffabd4
    62a4:	1fffabb6 	.word	0x1fffabb6
    62a8:	1fffab98 	.word	0x1fffab98
    62ac:	1fffab7a 	.word	0x1fffab7a
    62b0:	1fffab54 	.word	0x1fffab54
    62b4:	1fffab2c 	.word	0x1fffab2c
    62b8:	1fffab04 	.word	0x1fffab04

000062bc <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    62bc:	2200      	movs	r2, #0
	module_config->run_in_standby = 1;
    62be:	2301      	movs	r3, #1
	module_config->select_host_mode = 0;
    62c0:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    62c2:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    62c4:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    62c6:	70c3      	strb	r3, [r0, #3]
}
    62c8:	4770      	bx	lr
	...

000062cc <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    62cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ce:	4e75      	ldr	r6, [pc, #468]	; (64a4 <usb_init+0x1d8>)
    62d0:	b085      	sub	sp, #20
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    62d2:	4b75      	ldr	r3, [pc, #468]	; (64a8 <usb_init+0x1dc>)
{
    62d4:	9200      	str	r2, [sp, #0]
    62d6:	447e      	add	r6, pc
	host_pipe_job_busy_status = 0;
    62d8:	58f2      	ldr	r2, [r6, r3]
    62da:	2300      	movs	r3, #0
{
    62dc:	0004      	movs	r4, r0
	host_pipe_job_busy_status = 0;
    62de:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    62e0:	4a72      	ldr	r2, [pc, #456]	; (64ac <usb_init+0x1e0>)

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    62e2:	6021      	str	r1, [r4, #0]
	_usb_instances = module_inst;
    62e4:	447a      	add	r2, pc
    62e6:	6010      	str	r0, [r2, #0]
			PM->APBBMASK.reg |= mask;
    62e8:	2220      	movs	r2, #32
{
    62ea:	000d      	movs	r5, r1
    62ec:	4970      	ldr	r1, [pc, #448]	; (64b0 <usb_init+0x1e4>)
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    62ee:	af03      	add	r7, sp, #12
    62f0:	69c8      	ldr	r0, [r1, #28]
    62f2:	4302      	orrs	r2, r0
    62f4:	61ca      	str	r2, [r1, #28]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    62f6:	2201      	movs	r2, #1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    62f8:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
    62fa:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    62fc:	3306      	adds	r3, #6
    62fe:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6300:	4b6c      	ldr	r3, [pc, #432]	; (64b4 <usb_init+0x1e8>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6302:	70ba      	strb	r2, [r7, #2]
    6304:	58f3      	ldr	r3, [r6, r3]
    6306:	0039      	movs	r1, r7
    6308:	2018      	movs	r0, #24
    630a:	9301      	str	r3, [sp, #4]
    630c:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    630e:	2306      	movs	r3, #6
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6310:	0039      	movs	r1, r7
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6312:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6314:	2019      	movs	r0, #25
    6316:	9b01      	ldr	r3, [sp, #4]
    6318:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    631a:	9b00      	ldr	r3, [sp, #0]
    631c:	a902      	add	r1, sp, #8
    631e:	789b      	ldrb	r3, [r3, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6320:	2006      	movs	r0, #6
	gclk_chan_config.source_generator = module_config->source_generator;
    6322:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6324:	4b64      	ldr	r3, [pc, #400]	; (64b8 <usb_init+0x1ec>)
    6326:	58f3      	ldr	r3, [r6, r3]
    6328:	9301      	str	r3, [sp, #4]
    632a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    632c:	4b63      	ldr	r3, [pc, #396]	; (64bc <usb_init+0x1f0>)
    632e:	2006      	movs	r0, #6
    6330:	58f3      	ldr	r3, [r6, r3]
    6332:	9301      	str	r3, [sp, #4]
    6334:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6336:	2201      	movs	r2, #1
    6338:	782b      	ldrb	r3, [r5, #0]
    633a:	4313      	orrs	r3, r2
    633c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    633e:	78ab      	ldrb	r3, [r5, #2]
    6340:	07db      	lsls	r3, r3, #31
    6342:	d4fc      	bmi.n	633e <usb_init+0x72>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6344:	2103      	movs	r1, #3
    6346:	4b5e      	ldr	r3, [pc, #376]	; (64c0 <usb_init+0x1f4>)
    6348:	78da      	ldrb	r2, [r3, #3]
    634a:	438a      	bics	r2, r1
    634c:	0011      	movs	r1, r2
    634e:	2202      	movs	r2, #2
    6350:	430a      	orrs	r2, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6352:	210c      	movs	r1, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6354:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6356:	78da      	ldrb	r2, [r3, #3]
    6358:	438a      	bics	r2, r1
    635a:	0011      	movs	r1, r2
    635c:	2208      	movs	r2, #8
    635e:	430a      	orrs	r2, r1

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6360:	211f      	movs	r1, #31
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6362:	70da      	strb	r2, [r3, #3]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6364:	4a57      	ldr	r2, [pc, #348]	; (64c4 <usb_init+0x1f8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6366:	6813      	ldr	r3, [r2, #0]
    6368:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    636a:	400b      	ands	r3, r1
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    636c:	428b      	cmp	r3, r1
    636e:	d100      	bne.n	6372 <usb_init+0xa6>
		pad_transn = 5;
    6370:	2305      	movs	r3, #5
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6372:	8d28      	ldrh	r0, [r5, #40]	; 0x28
    6374:	4f54      	ldr	r7, [pc, #336]	; (64c8 <usb_init+0x1fc>)
    6376:	400b      	ands	r3, r1
    6378:	019b      	lsls	r3, r3, #6
    637a:	4038      	ands	r0, r7
    637c:	4303      	orrs	r3, r0
    637e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6380:	6813      	ldr	r3, [r2, #0]
    6382:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6384:	400b      	ands	r3, r1
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6386:	2b1f      	cmp	r3, #31
    6388:	d100      	bne.n	638c <usb_init+0xc0>
		pad_transp = 29;
    638a:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    638c:	201f      	movs	r0, #31
    638e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    6390:	4003      	ands	r3, r0
    6392:	4381      	bics	r1, r0
    6394:	430b      	orrs	r3, r1

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6396:	2107      	movs	r1, #7
	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6398:	852b      	strh	r3, [r5, #40]	; 0x28
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    639a:	6813      	ldr	r3, [r2, #0]
    639c:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    639e:	400b      	ands	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    63a0:	428b      	cmp	r3, r1
    63a2:	d100      	bne.n	63a6 <usb_init+0xda>
		pad_trim = 3;
    63a4:	2303      	movs	r3, #3
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    63a6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    63a8:	400b      	ands	r3, r1
    63aa:	4948      	ldr	r1, [pc, #288]	; (64cc <usb_init+0x200>)
    63ac:	031b      	lsls	r3, r3, #12
    63ae:	400a      	ands	r2, r1

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    63b0:	217f      	movs	r1, #127	; 0x7f
	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    63b2:	4313      	orrs	r3, r2
    63b4:	852b      	strh	r3, [r5, #40]	; 0x28
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    63b6:	9b00      	ldr	r3, [sp, #0]
    63b8:	781a      	ldrb	r2, [r3, #0]
    63ba:	782b      	ldrb	r3, [r5, #0]
    63bc:	01d2      	lsls	r2, r2, #7
    63be:	400b      	ands	r3, r1
    63c0:	4313      	orrs	r3, r2
    63c2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    63c4:	9b00      	ldr	r3, [sp, #0]
    63c6:	397e      	subs	r1, #126	; 0x7e
    63c8:	785a      	ldrb	r2, [r3, #1]
    63ca:	782b      	ldrb	r3, [r5, #0]
    63cc:	400a      	ands	r2, r1
    63ce:	3103      	adds	r1, #3
    63d0:	0092      	lsls	r2, r2, #2
    63d2:	438b      	bics	r3, r1
    63d4:	4313      	orrs	r3, r2
    63d6:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    63d8:	4b3d      	ldr	r3, [pc, #244]	; (64d0 <usb_init+0x204>)
    63da:	58f3      	ldr	r3, [r6, r3]
    63dc:	9301      	str	r3, [sp, #4]
    63de:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    63e0:	9b00      	ldr	r3, [sp, #0]
    63e2:	78db      	ldrb	r3, [r3, #3]
    63e4:	2b01      	cmp	r3, #1
    63e6:	d153      	bne.n	6490 <usb_init+0x1c4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    63e8:	6822      	ldr	r2, [r4, #0]
    63ea:	3108      	adds	r1, #8
    63ec:	8913      	ldrh	r3, [r2, #8]
    63ee:	438b      	bics	r3, r1
    63f0:	8113      	strh	r3, [r2, #8]
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    63f2:	2280      	movs	r2, #128	; 0x80
    63f4:	4b37      	ldr	r3, [pc, #220]	; (64d4 <usb_init+0x208>)
    63f6:	0052      	lsls	r2, r2, #1
    63f8:	58f3      	ldr	r3, [r6, r3]
    63fa:	2100      	movs	r1, #0
    63fc:	9801      	ldr	r0, [sp, #4]
    63fe:	9300      	str	r3, [sp, #0]
    6400:	4798      	blx	r3
    6402:	0022      	movs	r2, r4
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    6404:	2100      	movs	r1, #0
    6406:	1d23      	adds	r3, r4, #4
    6408:	3224      	adds	r2, #36	; 0x24
    640a:	c302      	stmia	r3!, {r1}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    640c:	4293      	cmp	r3, r2
    640e:	d1fc      	bne.n	640a <usb_init+0x13e>
    6410:	0021      	movs	r1, r4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    6412:	2200      	movs	r2, #0
    6414:	31a4      	adds	r1, #164	; 0xa4
    6416:	601a      	str	r2, [r3, #0]
    6418:	605a      	str	r2, [r3, #4]
    641a:	609a      	str	r2, [r3, #8]
    641c:	60da      	str	r2, [r3, #12]
    641e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6420:	428b      	cmp	r3, r1
    6422:	d1f8      	bne.n	6416 <usb_init+0x14a>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    6424:	701a      	strb	r2, [r3, #0]
	module_inst->host_enabled_callback_mask = 0;
    6426:	0023      	movs	r3, r4
    6428:	0021      	movs	r1, r4
    642a:	33a5      	adds	r3, #165	; 0xa5
    642c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    642e:	2200      	movs	r2, #0
    6430:	3301      	adds	r3, #1
    6432:	31ae      	adds	r1, #174	; 0xae
    6434:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    6436:	721a      	strb	r2, [r3, #8]
    6438:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    643a:	428b      	cmp	r3, r1
    643c:	d1fa      	bne.n	6434 <usb_init+0x168>
    643e:	0023      	movs	r3, r4
    6440:	0022      	movs	r2, r4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    6442:	2100      	movs	r1, #0
    6444:	33b8      	adds	r3, #184	; 0xb8
    6446:	32d4      	adds	r2, #212	; 0xd4
    6448:	c302      	stmia	r3!, {r1}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    644a:	4293      	cmp	r3, r2
    644c:	d1fc      	bne.n	6448 <usb_init+0x17c>
    644e:	0021      	movs	r1, r4
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    6450:	2200      	movs	r2, #0
    6452:	3155      	adds	r1, #85	; 0x55
    6454:	31ff      	adds	r1, #255	; 0xff
    6456:	601a      	str	r2, [r3, #0]
    6458:	605a      	str	r2, [r3, #4]
    645a:	609a      	str	r2, [r3, #8]
    645c:	60da      	str	r2, [r3, #12]
    645e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    6460:	4299      	cmp	r1, r3
    6462:	d1f8      	bne.n	6456 <usb_init+0x18a>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    6464:	23aa      	movs	r3, #170	; 0xaa
    6466:	005b      	lsls	r3, r3, #1
    6468:	52e2      	strh	r2, [r4, r3]
	module_inst->device_enabled_callback_mask = 0;
    646a:	3302      	adds	r3, #2
    646c:	52e2      	strh	r2, [r4, r3]
    646e:	0023      	movs	r3, r4
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    6470:	2200      	movs	r2, #0
    6472:	3359      	adds	r3, #89	; 0x59
    6474:	3461      	adds	r4, #97	; 0x61
    6476:	33ff      	adds	r3, #255	; 0xff
    6478:	34ff      	adds	r4, #255	; 0xff
    647a:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    647c:	721a      	strb	r2, [r3, #8]
    647e:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    6480:	429c      	cmp	r4, r3
    6482:	d1fa      	bne.n	647a <usb_init+0x1ae>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6484:	2280      	movs	r2, #128	; 0x80

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    6486:	2000      	movs	r0, #0
    6488:	4b13      	ldr	r3, [pc, #76]	; (64d8 <usb_init+0x20c>)
    648a:	601a      	str	r2, [r3, #0]
    648c:	b005      	add	sp, #20
    648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    6490:	2b00      	cmp	r3, #0
    6492:	d1ae      	bne.n	63f2 <usb_init+0x126>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6494:	200c      	movs	r0, #12
    6496:	6822      	ldr	r2, [r4, #0]
    6498:	8913      	ldrh	r3, [r2, #8]
    649a:	4383      	bics	r3, r0
    649c:	4319      	orrs	r1, r3
    649e:	8111      	strh	r1, [r2, #8]
    64a0:	e7a7      	b.n	63f2 <usb_init+0x126>
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	00007812 	.word	0x00007812
    64a8:	000000d4 	.word	0x000000d4
    64ac:	1fffaa84 	.word	0x1fffaa84
    64b0:	40000400 	.word	0x40000400
    64b4:	00000304 	.word	0x00000304
    64b8:	000000d8 	.word	0x000000d8
    64bc:	0000027c 	.word	0x0000027c
    64c0:	41005000 	.word	0x41005000
    64c4:	00806024 	.word	0x00806024
    64c8:	fffff83f 	.word	0xfffff83f
    64cc:	ffff8fff 	.word	0xffff8fff
    64d0:	00000024 	.word	0x00000024
    64d4:	0000023c 	.word	0x0000023c
    64d8:	e000e100 	.word	0xe000e100

000064dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    64dc:	e7fe      	b.n	64dc <Dummy_Handler>
	...

000064e0 <Reset_Handler>:
{
    64e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64e2:	4c2a      	ldr	r4, [pc, #168]	; (658c <Reset_Handler+0xac>)
        if (pSrc != pDest) {
    64e4:	4b2a      	ldr	r3, [pc, #168]	; (6590 <Reset_Handler+0xb0>)
{
    64e6:	447c      	add	r4, pc
        if (pSrc != pDest) {
    64e8:	58e0      	ldr	r0, [r4, r3]
    64ea:	4b2a      	ldr	r3, [pc, #168]	; (6594 <Reset_Handler+0xb4>)
    64ec:	58e1      	ldr	r1, [r4, r3]
    64ee:	4288      	cmp	r0, r1
    64f0:	d007      	beq.n	6502 <Reset_Handler+0x22>
    64f2:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    64f4:	4a28      	ldr	r2, [pc, #160]	; (6598 <Reset_Handler+0xb8>)
    64f6:	58a2      	ldr	r2, [r4, r2]
    64f8:	9201      	str	r2, [sp, #4]
    64fa:	9d01      	ldr	r5, [sp, #4]
    64fc:	18ca      	adds	r2, r1, r3
    64fe:	42aa      	cmp	r2, r5
    6500:	d33e      	bcc.n	6580 <Reset_Handler+0xa0>
        for (pDest = &_szero; pDest < &_ezero;) {
    6502:	4a26      	ldr	r2, [pc, #152]	; (659c <Reset_Handler+0xbc>)
    6504:	4b26      	ldr	r3, [pc, #152]	; (65a0 <Reset_Handler+0xc0>)
    6506:	58a2      	ldr	r2, [r4, r2]
    6508:	58e3      	ldr	r3, [r4, r3]
    650a:	9201      	str	r2, [sp, #4]
                *pDest++ = 0;
    650c:	2200      	movs	r2, #0
        for (pDest = &_szero; pDest < &_ezero;) {
    650e:	9901      	ldr	r1, [sp, #4]
    6510:	428b      	cmp	r3, r1
    6512:	d339      	bcc.n	6588 <Reset_Handler+0xa8>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6514:	4b23      	ldr	r3, [pc, #140]	; (65a4 <Reset_Handler+0xc4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6516:	2103      	movs	r1, #3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6518:	58e3      	ldr	r3, [r4, r3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    651a:	250c      	movs	r5, #12
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    651c:	9301      	str	r3, [sp, #4]
    651e:	23ff      	movs	r3, #255	; 0xff
    6520:	9a01      	ldr	r2, [sp, #4]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6522:	2608      	movs	r6, #8
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6524:	439a      	bics	r2, r3
    6526:	0013      	movs	r3, r2
    6528:	4a1f      	ldr	r2, [pc, #124]	; (65a8 <Reset_Handler+0xc8>)
        DMAC->QOSCTRL.bit.DQOS = 2;
    652a:	2730      	movs	r7, #48	; 0x30
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    652c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    652e:	2202      	movs	r2, #2
    6530:	4b1e      	ldr	r3, [pc, #120]	; (65ac <Reset_Handler+0xcc>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6532:	481f      	ldr	r0, [pc, #124]	; (65b0 <Reset_Handler+0xd0>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6534:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6536:	78c3      	ldrb	r3, [r0, #3]
    6538:	438b      	bics	r3, r1
    653a:	4313      	orrs	r3, r2
    653c:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    653e:	78c3      	ldrb	r3, [r0, #3]
    6540:	43ab      	bics	r3, r5
    6542:	4333      	orrs	r3, r6
    6544:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6546:	4b1b      	ldr	r3, [pc, #108]	; (65b4 <Reset_Handler+0xd4>)
    6548:	7b98      	ldrb	r0, [r3, #14]
    654a:	43b8      	bics	r0, r7
    654c:	0007      	movs	r7, r0
    654e:	2020      	movs	r0, #32
    6550:	4338      	orrs	r0, r7
    6552:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6554:	7b98      	ldrb	r0, [r3, #14]
    6556:	43a8      	bics	r0, r5
    6558:	4306      	orrs	r6, r0
    655a:	739e      	strb	r6, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    655c:	7b98      	ldrb	r0, [r3, #14]
    655e:	4388      	bics	r0, r1
    6560:	4302      	orrs	r2, r0
    6562:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6564:	2380      	movs	r3, #128	; 0x80
    6566:	4a14      	ldr	r2, [pc, #80]	; (65b8 <Reset_Handler+0xd8>)
    6568:	6851      	ldr	r1, [r2, #4]
    656a:	430b      	orrs	r3, r1
    656c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    656e:	4b13      	ldr	r3, [pc, #76]	; (65bc <Reset_Handler+0xdc>)
    6570:	58e3      	ldr	r3, [r4, r3]
    6572:	9301      	str	r3, [sp, #4]
    6574:	4798      	blx	r3
        main();
    6576:	4b12      	ldr	r3, [pc, #72]	; (65c0 <Reset_Handler+0xe0>)
    6578:	58e3      	ldr	r3, [r4, r3]
    657a:	9301      	str	r3, [sp, #4]
    657c:	4798      	blx	r3
    657e:	e7fe      	b.n	657e <Reset_Handler+0x9e>
                        *pDest++ = *pSrc++;
    6580:	58c5      	ldr	r5, [r0, r3]
    6582:	3304      	adds	r3, #4
    6584:	6015      	str	r5, [r2, #0]
    6586:	e7b8      	b.n	64fa <Reset_Handler+0x1a>
                *pDest++ = 0;
    6588:	c304      	stmia	r3!, {r2}
    658a:	e7c0      	b.n	650e <Reset_Handler+0x2e>
    658c:	00007602 	.word	0x00007602
    6590:	00000090 	.word	0x00000090
    6594:	000000c4 	.word	0x000000c4
    6598:	000002c4 	.word	0x000002c4
    659c:	00000254 	.word	0x00000254
    65a0:	000000b4 	.word	0x000000b4
    65a4:	00000074 	.word	0x00000074
    65a8:	e000ed00 	.word	0xe000ed00
    65ac:	410070fc 	.word	0x410070fc
    65b0:	41005000 	.word	0x41005000
    65b4:	41004800 	.word	0x41004800
    65b8:	41004000 	.word	0x41004000
    65bc:	00000134 	.word	0x00000134
    65c0:	00000244 	.word	0x00000244

000065c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    65c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65c6:	4e0d      	ldr	r6, [pc, #52]	; (65fc <_read+0x38>)
    65c8:	000f      	movs	r7, r1
    65ca:	447e      	add	r6, pc
    65cc:	0014      	movs	r4, r2
    65ce:	0015      	movs	r5, r2
	int nChars = 0;

	if (file != 0) {
    65d0:	2800      	cmp	r0, #0
    65d2:	d00a      	beq.n	65ea <_read+0x26>
		return -1;
    65d4:	2001      	movs	r0, #1
    65d6:	4240      	negs	r0, r0
    65d8:	e00e      	b.n	65f8 <_read+0x34>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    65da:	4b09      	ldr	r3, [pc, #36]	; (6600 <_read+0x3c>)
	for (; len > 0; --len) {
    65dc:	3d01      	subs	r5, #1
		ptr_get(stdio_base, ptr);
    65de:	58f3      	ldr	r3, [r6, r3]
    65e0:	6818      	ldr	r0, [r3, #0]
    65e2:	4b08      	ldr	r3, [pc, #32]	; (6604 <_read+0x40>)
    65e4:	58f3      	ldr	r3, [r6, r3]
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	4798      	blx	r3
    65ea:	1b61      	subs	r1, r4, r5
    65ec:	1879      	adds	r1, r7, r1
	for (; len > 0; --len) {
    65ee:	2d00      	cmp	r5, #0
    65f0:	dcf3      	bgt.n	65da <_read+0x16>
    65f2:	43e0      	mvns	r0, r4
    65f4:	17c0      	asrs	r0, r0, #31
    65f6:	4020      	ands	r0, r4
		ptr++;
		nChars++;
	}
	return nChars;
}
    65f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65fa:	46c0      	nop			; (mov r8, r8)
    65fc:	0000751e 	.word	0x0000751e
    6600:	00000248 	.word	0x00000248
    6604:	00000128 	.word	0x00000128

00006608 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    660a:	4f0c      	ldr	r7, [pc, #48]	; (663c <_write+0x34>)
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    660c:	3801      	subs	r0, #1
{
    660e:	447f      	add	r7, pc
    6610:	000e      	movs	r6, r1
	if ((file != 1) && (file != 2) && (file!=3)) {
    6612:	2802      	cmp	r0, #2
    6614:	d80f      	bhi.n	6636 <_write+0x2e>
    6616:	000c      	movs	r4, r1
    6618:	188d      	adds	r5, r1, r2
    661a:	1ba0      	subs	r0, r4, r6
		return -1;
	}

	for (; len != 0; --len) {
    661c:	42ac      	cmp	r4, r5
    661e:	d00c      	beq.n	663a <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6620:	4b07      	ldr	r3, [pc, #28]	; (6640 <_write+0x38>)
    6622:	7821      	ldrb	r1, [r4, #0]
    6624:	58fb      	ldr	r3, [r7, r3]
    6626:	3401      	adds	r4, #1
    6628:	6818      	ldr	r0, [r3, #0]
    662a:	4b06      	ldr	r3, [pc, #24]	; (6644 <_write+0x3c>)
    662c:	58fb      	ldr	r3, [r7, r3]
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	4798      	blx	r3
    6632:	2800      	cmp	r0, #0
    6634:	daf1      	bge.n	661a <_write+0x12>
		return -1;
    6636:	2001      	movs	r0, #1
    6638:	4240      	negs	r0, r0
			return -1;
		}
		++nChars;
	}
	return nChars;
}
    663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    663c:	000074da 	.word	0x000074da
    6640:	00000248 	.word	0x00000248
    6644:	0000014c 	.word	0x0000014c

00006648 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6648:	4a09      	ldr	r2, [pc, #36]	; (6670 <_sbrk+0x28>)
{
    664a:	0003      	movs	r3, r0
	if (heap == NULL) {
    664c:	447a      	add	r2, pc
{
    664e:	4909      	ldr	r1, [pc, #36]	; (6674 <_sbrk+0x2c>)
	if (heap == NULL) {
    6650:	6810      	ldr	r0, [r2, #0]
{
    6652:	4479      	add	r1, pc
    6654:	b082      	sub	sp, #8
	if (heap == NULL) {
    6656:	2800      	cmp	r0, #0
    6658:	d103      	bne.n	6662 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
    665a:	4807      	ldr	r0, [pc, #28]	; (6678 <_sbrk+0x30>)
    665c:	5809      	ldr	r1, [r1, r0]
    665e:	9101      	str	r1, [sp, #4]
    6660:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    6662:	4a06      	ldr	r2, [pc, #24]	; (667c <_sbrk+0x34>)
    6664:	447a      	add	r2, pc
    6666:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6668:	18c3      	adds	r3, r0, r3
    666a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    666c:	b002      	add	sp, #8
    666e:	4770      	bx	lr
    6670:	1fffa738 	.word	0x1fffa738
    6674:	00007496 	.word	0x00007496
    6678:	000002d0 	.word	0x000002d0
    667c:	1fffa720 	.word	0x1fffa720

00006680 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6680:	2001      	movs	r0, #1
    6682:	4240      	negs	r0, r0
    6684:	4770      	bx	lr

00006686 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6686:	2380      	movs	r3, #128	; 0x80
    6688:	019b      	lsls	r3, r3, #6

	return 0;
}
    668a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    668c:	604b      	str	r3, [r1, #4]
}
    668e:	4770      	bx	lr

00006690 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6690:	2001      	movs	r0, #1
    6692:	4770      	bx	lr

00006694 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6694:	2000      	movs	r0, #0
    6696:	4770      	bx	lr

00006698 <__gnu_thumb1_case_uqi>:
    6698:	b402      	push	{r1}
    669a:	4671      	mov	r1, lr
    669c:	0849      	lsrs	r1, r1, #1
    669e:	0049      	lsls	r1, r1, #1
    66a0:	5c09      	ldrb	r1, [r1, r0]
    66a2:	0049      	lsls	r1, r1, #1
    66a4:	448e      	add	lr, r1
    66a6:	bc02      	pop	{r1}
    66a8:	4770      	bx	lr
    66aa:	46c0      	nop			; (mov r8, r8)

000066ac <__gnu_thumb1_case_shi>:
    66ac:	b403      	push	{r0, r1}
    66ae:	4671      	mov	r1, lr
    66b0:	0849      	lsrs	r1, r1, #1
    66b2:	0040      	lsls	r0, r0, #1
    66b4:	0049      	lsls	r1, r1, #1
    66b6:	5e09      	ldrsh	r1, [r1, r0]
    66b8:	0049      	lsls	r1, r1, #1
    66ba:	448e      	add	lr, r1
    66bc:	bc03      	pop	{r0, r1}
    66be:	4770      	bx	lr

000066c0 <__gnu_thumb1_case_uhi>:
    66c0:	b403      	push	{r0, r1}
    66c2:	4671      	mov	r1, lr
    66c4:	0849      	lsrs	r1, r1, #1
    66c6:	0040      	lsls	r0, r0, #1
    66c8:	0049      	lsls	r1, r1, #1
    66ca:	5a09      	ldrh	r1, [r1, r0]
    66cc:	0049      	lsls	r1, r1, #1
    66ce:	448e      	add	lr, r1
    66d0:	bc03      	pop	{r0, r1}
    66d2:	4770      	bx	lr

000066d4 <__udivsi3>:
    66d4:	2200      	movs	r2, #0
    66d6:	0843      	lsrs	r3, r0, #1
    66d8:	428b      	cmp	r3, r1
    66da:	d374      	bcc.n	67c6 <__udivsi3+0xf2>
    66dc:	0903      	lsrs	r3, r0, #4
    66de:	428b      	cmp	r3, r1
    66e0:	d35f      	bcc.n	67a2 <__udivsi3+0xce>
    66e2:	0a03      	lsrs	r3, r0, #8
    66e4:	428b      	cmp	r3, r1
    66e6:	d344      	bcc.n	6772 <__udivsi3+0x9e>
    66e8:	0b03      	lsrs	r3, r0, #12
    66ea:	428b      	cmp	r3, r1
    66ec:	d328      	bcc.n	6740 <__udivsi3+0x6c>
    66ee:	0c03      	lsrs	r3, r0, #16
    66f0:	428b      	cmp	r3, r1
    66f2:	d30d      	bcc.n	6710 <__udivsi3+0x3c>
    66f4:	22ff      	movs	r2, #255	; 0xff
    66f6:	0209      	lsls	r1, r1, #8
    66f8:	ba12      	rev	r2, r2
    66fa:	0c03      	lsrs	r3, r0, #16
    66fc:	428b      	cmp	r3, r1
    66fe:	d302      	bcc.n	6706 <__udivsi3+0x32>
    6700:	1212      	asrs	r2, r2, #8
    6702:	0209      	lsls	r1, r1, #8
    6704:	d065      	beq.n	67d2 <__udivsi3+0xfe>
    6706:	0b03      	lsrs	r3, r0, #12
    6708:	428b      	cmp	r3, r1
    670a:	d319      	bcc.n	6740 <__udivsi3+0x6c>
    670c:	e000      	b.n	6710 <__udivsi3+0x3c>
    670e:	0a09      	lsrs	r1, r1, #8
    6710:	0bc3      	lsrs	r3, r0, #15
    6712:	428b      	cmp	r3, r1
    6714:	d301      	bcc.n	671a <__udivsi3+0x46>
    6716:	03cb      	lsls	r3, r1, #15
    6718:	1ac0      	subs	r0, r0, r3
    671a:	4152      	adcs	r2, r2
    671c:	0b83      	lsrs	r3, r0, #14
    671e:	428b      	cmp	r3, r1
    6720:	d301      	bcc.n	6726 <__udivsi3+0x52>
    6722:	038b      	lsls	r3, r1, #14
    6724:	1ac0      	subs	r0, r0, r3
    6726:	4152      	adcs	r2, r2
    6728:	0b43      	lsrs	r3, r0, #13
    672a:	428b      	cmp	r3, r1
    672c:	d301      	bcc.n	6732 <__udivsi3+0x5e>
    672e:	034b      	lsls	r3, r1, #13
    6730:	1ac0      	subs	r0, r0, r3
    6732:	4152      	adcs	r2, r2
    6734:	0b03      	lsrs	r3, r0, #12
    6736:	428b      	cmp	r3, r1
    6738:	d301      	bcc.n	673e <__udivsi3+0x6a>
    673a:	030b      	lsls	r3, r1, #12
    673c:	1ac0      	subs	r0, r0, r3
    673e:	4152      	adcs	r2, r2
    6740:	0ac3      	lsrs	r3, r0, #11
    6742:	428b      	cmp	r3, r1
    6744:	d301      	bcc.n	674a <__udivsi3+0x76>
    6746:	02cb      	lsls	r3, r1, #11
    6748:	1ac0      	subs	r0, r0, r3
    674a:	4152      	adcs	r2, r2
    674c:	0a83      	lsrs	r3, r0, #10
    674e:	428b      	cmp	r3, r1
    6750:	d301      	bcc.n	6756 <__udivsi3+0x82>
    6752:	028b      	lsls	r3, r1, #10
    6754:	1ac0      	subs	r0, r0, r3
    6756:	4152      	adcs	r2, r2
    6758:	0a43      	lsrs	r3, r0, #9
    675a:	428b      	cmp	r3, r1
    675c:	d301      	bcc.n	6762 <__udivsi3+0x8e>
    675e:	024b      	lsls	r3, r1, #9
    6760:	1ac0      	subs	r0, r0, r3
    6762:	4152      	adcs	r2, r2
    6764:	0a03      	lsrs	r3, r0, #8
    6766:	428b      	cmp	r3, r1
    6768:	d301      	bcc.n	676e <__udivsi3+0x9a>
    676a:	020b      	lsls	r3, r1, #8
    676c:	1ac0      	subs	r0, r0, r3
    676e:	4152      	adcs	r2, r2
    6770:	d2cd      	bcs.n	670e <__udivsi3+0x3a>
    6772:	09c3      	lsrs	r3, r0, #7
    6774:	428b      	cmp	r3, r1
    6776:	d301      	bcc.n	677c <__udivsi3+0xa8>
    6778:	01cb      	lsls	r3, r1, #7
    677a:	1ac0      	subs	r0, r0, r3
    677c:	4152      	adcs	r2, r2
    677e:	0983      	lsrs	r3, r0, #6
    6780:	428b      	cmp	r3, r1
    6782:	d301      	bcc.n	6788 <__udivsi3+0xb4>
    6784:	018b      	lsls	r3, r1, #6
    6786:	1ac0      	subs	r0, r0, r3
    6788:	4152      	adcs	r2, r2
    678a:	0943      	lsrs	r3, r0, #5
    678c:	428b      	cmp	r3, r1
    678e:	d301      	bcc.n	6794 <__udivsi3+0xc0>
    6790:	014b      	lsls	r3, r1, #5
    6792:	1ac0      	subs	r0, r0, r3
    6794:	4152      	adcs	r2, r2
    6796:	0903      	lsrs	r3, r0, #4
    6798:	428b      	cmp	r3, r1
    679a:	d301      	bcc.n	67a0 <__udivsi3+0xcc>
    679c:	010b      	lsls	r3, r1, #4
    679e:	1ac0      	subs	r0, r0, r3
    67a0:	4152      	adcs	r2, r2
    67a2:	08c3      	lsrs	r3, r0, #3
    67a4:	428b      	cmp	r3, r1
    67a6:	d301      	bcc.n	67ac <__udivsi3+0xd8>
    67a8:	00cb      	lsls	r3, r1, #3
    67aa:	1ac0      	subs	r0, r0, r3
    67ac:	4152      	adcs	r2, r2
    67ae:	0883      	lsrs	r3, r0, #2
    67b0:	428b      	cmp	r3, r1
    67b2:	d301      	bcc.n	67b8 <__udivsi3+0xe4>
    67b4:	008b      	lsls	r3, r1, #2
    67b6:	1ac0      	subs	r0, r0, r3
    67b8:	4152      	adcs	r2, r2
    67ba:	0843      	lsrs	r3, r0, #1
    67bc:	428b      	cmp	r3, r1
    67be:	d301      	bcc.n	67c4 <__udivsi3+0xf0>
    67c0:	004b      	lsls	r3, r1, #1
    67c2:	1ac0      	subs	r0, r0, r3
    67c4:	4152      	adcs	r2, r2
    67c6:	1a41      	subs	r1, r0, r1
    67c8:	d200      	bcs.n	67cc <__udivsi3+0xf8>
    67ca:	4601      	mov	r1, r0
    67cc:	4152      	adcs	r2, r2
    67ce:	4610      	mov	r0, r2
    67d0:	4770      	bx	lr
    67d2:	e7ff      	b.n	67d4 <__udivsi3+0x100>
    67d4:	b501      	push	{r0, lr}
    67d6:	2000      	movs	r0, #0
    67d8:	f000 f8f0 	bl	69bc <__aeabi_idiv0>
    67dc:	bd02      	pop	{r1, pc}
    67de:	46c0      	nop			; (mov r8, r8)

000067e0 <__aeabi_uidivmod>:
    67e0:	2900      	cmp	r1, #0
    67e2:	d0f7      	beq.n	67d4 <__udivsi3+0x100>
    67e4:	e776      	b.n	66d4 <__udivsi3>
    67e6:	4770      	bx	lr

000067e8 <__divsi3>:
    67e8:	4603      	mov	r3, r0
    67ea:	430b      	orrs	r3, r1
    67ec:	d47f      	bmi.n	68ee <__divsi3+0x106>
    67ee:	2200      	movs	r2, #0
    67f0:	0843      	lsrs	r3, r0, #1
    67f2:	428b      	cmp	r3, r1
    67f4:	d374      	bcc.n	68e0 <__divsi3+0xf8>
    67f6:	0903      	lsrs	r3, r0, #4
    67f8:	428b      	cmp	r3, r1
    67fa:	d35f      	bcc.n	68bc <__divsi3+0xd4>
    67fc:	0a03      	lsrs	r3, r0, #8
    67fe:	428b      	cmp	r3, r1
    6800:	d344      	bcc.n	688c <__divsi3+0xa4>
    6802:	0b03      	lsrs	r3, r0, #12
    6804:	428b      	cmp	r3, r1
    6806:	d328      	bcc.n	685a <__divsi3+0x72>
    6808:	0c03      	lsrs	r3, r0, #16
    680a:	428b      	cmp	r3, r1
    680c:	d30d      	bcc.n	682a <__divsi3+0x42>
    680e:	22ff      	movs	r2, #255	; 0xff
    6810:	0209      	lsls	r1, r1, #8
    6812:	ba12      	rev	r2, r2
    6814:	0c03      	lsrs	r3, r0, #16
    6816:	428b      	cmp	r3, r1
    6818:	d302      	bcc.n	6820 <__divsi3+0x38>
    681a:	1212      	asrs	r2, r2, #8
    681c:	0209      	lsls	r1, r1, #8
    681e:	d065      	beq.n	68ec <__divsi3+0x104>
    6820:	0b03      	lsrs	r3, r0, #12
    6822:	428b      	cmp	r3, r1
    6824:	d319      	bcc.n	685a <__divsi3+0x72>
    6826:	e000      	b.n	682a <__divsi3+0x42>
    6828:	0a09      	lsrs	r1, r1, #8
    682a:	0bc3      	lsrs	r3, r0, #15
    682c:	428b      	cmp	r3, r1
    682e:	d301      	bcc.n	6834 <__divsi3+0x4c>
    6830:	03cb      	lsls	r3, r1, #15
    6832:	1ac0      	subs	r0, r0, r3
    6834:	4152      	adcs	r2, r2
    6836:	0b83      	lsrs	r3, r0, #14
    6838:	428b      	cmp	r3, r1
    683a:	d301      	bcc.n	6840 <__divsi3+0x58>
    683c:	038b      	lsls	r3, r1, #14
    683e:	1ac0      	subs	r0, r0, r3
    6840:	4152      	adcs	r2, r2
    6842:	0b43      	lsrs	r3, r0, #13
    6844:	428b      	cmp	r3, r1
    6846:	d301      	bcc.n	684c <__divsi3+0x64>
    6848:	034b      	lsls	r3, r1, #13
    684a:	1ac0      	subs	r0, r0, r3
    684c:	4152      	adcs	r2, r2
    684e:	0b03      	lsrs	r3, r0, #12
    6850:	428b      	cmp	r3, r1
    6852:	d301      	bcc.n	6858 <__divsi3+0x70>
    6854:	030b      	lsls	r3, r1, #12
    6856:	1ac0      	subs	r0, r0, r3
    6858:	4152      	adcs	r2, r2
    685a:	0ac3      	lsrs	r3, r0, #11
    685c:	428b      	cmp	r3, r1
    685e:	d301      	bcc.n	6864 <__divsi3+0x7c>
    6860:	02cb      	lsls	r3, r1, #11
    6862:	1ac0      	subs	r0, r0, r3
    6864:	4152      	adcs	r2, r2
    6866:	0a83      	lsrs	r3, r0, #10
    6868:	428b      	cmp	r3, r1
    686a:	d301      	bcc.n	6870 <__divsi3+0x88>
    686c:	028b      	lsls	r3, r1, #10
    686e:	1ac0      	subs	r0, r0, r3
    6870:	4152      	adcs	r2, r2
    6872:	0a43      	lsrs	r3, r0, #9
    6874:	428b      	cmp	r3, r1
    6876:	d301      	bcc.n	687c <__divsi3+0x94>
    6878:	024b      	lsls	r3, r1, #9
    687a:	1ac0      	subs	r0, r0, r3
    687c:	4152      	adcs	r2, r2
    687e:	0a03      	lsrs	r3, r0, #8
    6880:	428b      	cmp	r3, r1
    6882:	d301      	bcc.n	6888 <__divsi3+0xa0>
    6884:	020b      	lsls	r3, r1, #8
    6886:	1ac0      	subs	r0, r0, r3
    6888:	4152      	adcs	r2, r2
    688a:	d2cd      	bcs.n	6828 <__divsi3+0x40>
    688c:	09c3      	lsrs	r3, r0, #7
    688e:	428b      	cmp	r3, r1
    6890:	d301      	bcc.n	6896 <__divsi3+0xae>
    6892:	01cb      	lsls	r3, r1, #7
    6894:	1ac0      	subs	r0, r0, r3
    6896:	4152      	adcs	r2, r2
    6898:	0983      	lsrs	r3, r0, #6
    689a:	428b      	cmp	r3, r1
    689c:	d301      	bcc.n	68a2 <__divsi3+0xba>
    689e:	018b      	lsls	r3, r1, #6
    68a0:	1ac0      	subs	r0, r0, r3
    68a2:	4152      	adcs	r2, r2
    68a4:	0943      	lsrs	r3, r0, #5
    68a6:	428b      	cmp	r3, r1
    68a8:	d301      	bcc.n	68ae <__divsi3+0xc6>
    68aa:	014b      	lsls	r3, r1, #5
    68ac:	1ac0      	subs	r0, r0, r3
    68ae:	4152      	adcs	r2, r2
    68b0:	0903      	lsrs	r3, r0, #4
    68b2:	428b      	cmp	r3, r1
    68b4:	d301      	bcc.n	68ba <__divsi3+0xd2>
    68b6:	010b      	lsls	r3, r1, #4
    68b8:	1ac0      	subs	r0, r0, r3
    68ba:	4152      	adcs	r2, r2
    68bc:	08c3      	lsrs	r3, r0, #3
    68be:	428b      	cmp	r3, r1
    68c0:	d301      	bcc.n	68c6 <__divsi3+0xde>
    68c2:	00cb      	lsls	r3, r1, #3
    68c4:	1ac0      	subs	r0, r0, r3
    68c6:	4152      	adcs	r2, r2
    68c8:	0883      	lsrs	r3, r0, #2
    68ca:	428b      	cmp	r3, r1
    68cc:	d301      	bcc.n	68d2 <__divsi3+0xea>
    68ce:	008b      	lsls	r3, r1, #2
    68d0:	1ac0      	subs	r0, r0, r3
    68d2:	4152      	adcs	r2, r2
    68d4:	0843      	lsrs	r3, r0, #1
    68d6:	428b      	cmp	r3, r1
    68d8:	d301      	bcc.n	68de <__divsi3+0xf6>
    68da:	004b      	lsls	r3, r1, #1
    68dc:	1ac0      	subs	r0, r0, r3
    68de:	4152      	adcs	r2, r2
    68e0:	1a41      	subs	r1, r0, r1
    68e2:	d200      	bcs.n	68e6 <__divsi3+0xfe>
    68e4:	4601      	mov	r1, r0
    68e6:	4152      	adcs	r2, r2
    68e8:	4610      	mov	r0, r2
    68ea:	4770      	bx	lr
    68ec:	e05d      	b.n	69aa <__divsi3+0x1c2>
    68ee:	0fca      	lsrs	r2, r1, #31
    68f0:	d000      	beq.n	68f4 <__divsi3+0x10c>
    68f2:	4249      	negs	r1, r1
    68f4:	1003      	asrs	r3, r0, #32
    68f6:	d300      	bcc.n	68fa <__divsi3+0x112>
    68f8:	4240      	negs	r0, r0
    68fa:	4053      	eors	r3, r2
    68fc:	2200      	movs	r2, #0
    68fe:	469c      	mov	ip, r3
    6900:	0903      	lsrs	r3, r0, #4
    6902:	428b      	cmp	r3, r1
    6904:	d32d      	bcc.n	6962 <__divsi3+0x17a>
    6906:	0a03      	lsrs	r3, r0, #8
    6908:	428b      	cmp	r3, r1
    690a:	d312      	bcc.n	6932 <__divsi3+0x14a>
    690c:	22fc      	movs	r2, #252	; 0xfc
    690e:	0189      	lsls	r1, r1, #6
    6910:	ba12      	rev	r2, r2
    6912:	0a03      	lsrs	r3, r0, #8
    6914:	428b      	cmp	r3, r1
    6916:	d30c      	bcc.n	6932 <__divsi3+0x14a>
    6918:	0189      	lsls	r1, r1, #6
    691a:	1192      	asrs	r2, r2, #6
    691c:	428b      	cmp	r3, r1
    691e:	d308      	bcc.n	6932 <__divsi3+0x14a>
    6920:	0189      	lsls	r1, r1, #6
    6922:	1192      	asrs	r2, r2, #6
    6924:	428b      	cmp	r3, r1
    6926:	d304      	bcc.n	6932 <__divsi3+0x14a>
    6928:	0189      	lsls	r1, r1, #6
    692a:	d03a      	beq.n	69a2 <__divsi3+0x1ba>
    692c:	1192      	asrs	r2, r2, #6
    692e:	e000      	b.n	6932 <__divsi3+0x14a>
    6930:	0989      	lsrs	r1, r1, #6
    6932:	09c3      	lsrs	r3, r0, #7
    6934:	428b      	cmp	r3, r1
    6936:	d301      	bcc.n	693c <__divsi3+0x154>
    6938:	01cb      	lsls	r3, r1, #7
    693a:	1ac0      	subs	r0, r0, r3
    693c:	4152      	adcs	r2, r2
    693e:	0983      	lsrs	r3, r0, #6
    6940:	428b      	cmp	r3, r1
    6942:	d301      	bcc.n	6948 <__divsi3+0x160>
    6944:	018b      	lsls	r3, r1, #6
    6946:	1ac0      	subs	r0, r0, r3
    6948:	4152      	adcs	r2, r2
    694a:	0943      	lsrs	r3, r0, #5
    694c:	428b      	cmp	r3, r1
    694e:	d301      	bcc.n	6954 <__divsi3+0x16c>
    6950:	014b      	lsls	r3, r1, #5
    6952:	1ac0      	subs	r0, r0, r3
    6954:	4152      	adcs	r2, r2
    6956:	0903      	lsrs	r3, r0, #4
    6958:	428b      	cmp	r3, r1
    695a:	d301      	bcc.n	6960 <__divsi3+0x178>
    695c:	010b      	lsls	r3, r1, #4
    695e:	1ac0      	subs	r0, r0, r3
    6960:	4152      	adcs	r2, r2
    6962:	08c3      	lsrs	r3, r0, #3
    6964:	428b      	cmp	r3, r1
    6966:	d301      	bcc.n	696c <__divsi3+0x184>
    6968:	00cb      	lsls	r3, r1, #3
    696a:	1ac0      	subs	r0, r0, r3
    696c:	4152      	adcs	r2, r2
    696e:	0883      	lsrs	r3, r0, #2
    6970:	428b      	cmp	r3, r1
    6972:	d301      	bcc.n	6978 <__divsi3+0x190>
    6974:	008b      	lsls	r3, r1, #2
    6976:	1ac0      	subs	r0, r0, r3
    6978:	4152      	adcs	r2, r2
    697a:	d2d9      	bcs.n	6930 <__divsi3+0x148>
    697c:	0843      	lsrs	r3, r0, #1
    697e:	428b      	cmp	r3, r1
    6980:	d301      	bcc.n	6986 <__divsi3+0x19e>
    6982:	004b      	lsls	r3, r1, #1
    6984:	1ac0      	subs	r0, r0, r3
    6986:	4152      	adcs	r2, r2
    6988:	1a41      	subs	r1, r0, r1
    698a:	d200      	bcs.n	698e <__divsi3+0x1a6>
    698c:	4601      	mov	r1, r0
    698e:	4663      	mov	r3, ip
    6990:	4152      	adcs	r2, r2
    6992:	105b      	asrs	r3, r3, #1
    6994:	4610      	mov	r0, r2
    6996:	d301      	bcc.n	699c <__divsi3+0x1b4>
    6998:	4240      	negs	r0, r0
    699a:	2b00      	cmp	r3, #0
    699c:	d500      	bpl.n	69a0 <__divsi3+0x1b8>
    699e:	4249      	negs	r1, r1
    69a0:	4770      	bx	lr
    69a2:	4663      	mov	r3, ip
    69a4:	105b      	asrs	r3, r3, #1
    69a6:	d300      	bcc.n	69aa <__divsi3+0x1c2>
    69a8:	4240      	negs	r0, r0
    69aa:	b501      	push	{r0, lr}
    69ac:	2000      	movs	r0, #0
    69ae:	f000 f805 	bl	69bc <__aeabi_idiv0>
    69b2:	bd02      	pop	{r1, pc}

000069b4 <__aeabi_idivmod>:
    69b4:	2900      	cmp	r1, #0
    69b6:	d0f8      	beq.n	69aa <__divsi3+0x1c2>
    69b8:	e716      	b.n	67e8 <__divsi3>
    69ba:	4770      	bx	lr

000069bc <__aeabi_idiv0>:
    69bc:	4770      	bx	lr
    69be:	46c0      	nop			; (mov r8, r8)

000069c0 <__clzsi2>:
    69c0:	211c      	movs	r1, #28
    69c2:	2301      	movs	r3, #1
    69c4:	041b      	lsls	r3, r3, #16
    69c6:	4298      	cmp	r0, r3
    69c8:	d301      	bcc.n	69ce <__clzsi2+0xe>
    69ca:	0c00      	lsrs	r0, r0, #16
    69cc:	3910      	subs	r1, #16
    69ce:	0a1b      	lsrs	r3, r3, #8
    69d0:	4298      	cmp	r0, r3
    69d2:	d301      	bcc.n	69d8 <__clzsi2+0x18>
    69d4:	0a00      	lsrs	r0, r0, #8
    69d6:	3908      	subs	r1, #8
    69d8:	091b      	lsrs	r3, r3, #4
    69da:	4298      	cmp	r0, r3
    69dc:	d301      	bcc.n	69e2 <__clzsi2+0x22>
    69de:	0900      	lsrs	r0, r0, #4
    69e0:	3904      	subs	r1, #4
    69e2:	a202      	add	r2, pc, #8	; (adr r2, 69ec <__clzsi2+0x2c>)
    69e4:	5c10      	ldrb	r0, [r2, r0]
    69e6:	1840      	adds	r0, r0, r1
    69e8:	4770      	bx	lr
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	02020304 	.word	0x02020304
    69f0:	01010101 	.word	0x01010101
	...

000069fc <__ctzsi2>:
    69fc:	4241      	negs	r1, r0
    69fe:	4008      	ands	r0, r1
    6a00:	211c      	movs	r1, #28
    6a02:	2301      	movs	r3, #1
    6a04:	041b      	lsls	r3, r3, #16
    6a06:	4298      	cmp	r0, r3
    6a08:	d301      	bcc.n	6a0e <__ctzsi2+0x12>
    6a0a:	0c00      	lsrs	r0, r0, #16
    6a0c:	3910      	subs	r1, #16
    6a0e:	0a1b      	lsrs	r3, r3, #8
    6a10:	4298      	cmp	r0, r3
    6a12:	d301      	bcc.n	6a18 <__ctzsi2+0x1c>
    6a14:	0a00      	lsrs	r0, r0, #8
    6a16:	3908      	subs	r1, #8
    6a18:	091b      	lsrs	r3, r3, #4
    6a1a:	4298      	cmp	r0, r3
    6a1c:	d301      	bcc.n	6a22 <__ctzsi2+0x26>
    6a1e:	0900      	lsrs	r0, r0, #4
    6a20:	3904      	subs	r1, #4
    6a22:	a202      	add	r2, pc, #8	; (adr r2, 6a2c <__ctzsi2+0x30>)
    6a24:	5c10      	ldrb	r0, [r2, r0]
    6a26:	1a40      	subs	r0, r0, r1
    6a28:	4770      	bx	lr
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	1d1d1c1b 	.word	0x1d1d1c1b
    6a30:	1e1e1e1e 	.word	0x1e1e1e1e
    6a34:	1f1f1f1f 	.word	0x1f1f1f1f
    6a38:	1f1f1f1f 	.word	0x1f1f1f1f

00006a3c <__muldi3>:
    6a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a3e:	46ce      	mov	lr, r9
    6a40:	4647      	mov	r7, r8
    6a42:	0415      	lsls	r5, r2, #16
    6a44:	0c2d      	lsrs	r5, r5, #16
    6a46:	002e      	movs	r6, r5
    6a48:	b580      	push	{r7, lr}
    6a4a:	0407      	lsls	r7, r0, #16
    6a4c:	0c14      	lsrs	r4, r2, #16
    6a4e:	0c3f      	lsrs	r7, r7, #16
    6a50:	4699      	mov	r9, r3
    6a52:	0c03      	lsrs	r3, r0, #16
    6a54:	437e      	muls	r6, r7
    6a56:	435d      	muls	r5, r3
    6a58:	4367      	muls	r7, r4
    6a5a:	4363      	muls	r3, r4
    6a5c:	197f      	adds	r7, r7, r5
    6a5e:	0c34      	lsrs	r4, r6, #16
    6a60:	19e4      	adds	r4, r4, r7
    6a62:	469c      	mov	ip, r3
    6a64:	42a5      	cmp	r5, r4
    6a66:	d903      	bls.n	6a70 <__muldi3+0x34>
    6a68:	2380      	movs	r3, #128	; 0x80
    6a6a:	025b      	lsls	r3, r3, #9
    6a6c:	4698      	mov	r8, r3
    6a6e:	44c4      	add	ip, r8
    6a70:	464b      	mov	r3, r9
    6a72:	4351      	muls	r1, r2
    6a74:	4343      	muls	r3, r0
    6a76:	0436      	lsls	r6, r6, #16
    6a78:	0c36      	lsrs	r6, r6, #16
    6a7a:	0c25      	lsrs	r5, r4, #16
    6a7c:	0424      	lsls	r4, r4, #16
    6a7e:	4465      	add	r5, ip
    6a80:	19a4      	adds	r4, r4, r6
    6a82:	1859      	adds	r1, r3, r1
    6a84:	1949      	adds	r1, r1, r5
    6a86:	0020      	movs	r0, r4
    6a88:	bc0c      	pop	{r2, r3}
    6a8a:	4690      	mov	r8, r2
    6a8c:	4699      	mov	r9, r3
    6a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a90 <__libc_init_array>:
    6a90:	b570      	push	{r4, r5, r6, lr}
    6a92:	4e0d      	ldr	r6, [pc, #52]	; (6ac8 <__libc_init_array+0x38>)
    6a94:	4d0d      	ldr	r5, [pc, #52]	; (6acc <__libc_init_array+0x3c>)
    6a96:	2400      	movs	r4, #0
    6a98:	1bad      	subs	r5, r5, r6
    6a9a:	10ad      	asrs	r5, r5, #2
    6a9c:	d005      	beq.n	6aaa <__libc_init_array+0x1a>
    6a9e:	00a3      	lsls	r3, r4, #2
    6aa0:	58f3      	ldr	r3, [r6, r3]
    6aa2:	3401      	adds	r4, #1
    6aa4:	4798      	blx	r3
    6aa6:	42a5      	cmp	r5, r4
    6aa8:	d1f9      	bne.n	6a9e <__libc_init_array+0xe>
    6aaa:	f007 f809 	bl	dac0 <_init>
    6aae:	4e08      	ldr	r6, [pc, #32]	; (6ad0 <__libc_init_array+0x40>)
    6ab0:	4d08      	ldr	r5, [pc, #32]	; (6ad4 <__libc_init_array+0x44>)
    6ab2:	2400      	movs	r4, #0
    6ab4:	1bad      	subs	r5, r5, r6
    6ab6:	10ad      	asrs	r5, r5, #2
    6ab8:	d005      	beq.n	6ac6 <__libc_init_array+0x36>
    6aba:	00a3      	lsls	r3, r4, #2
    6abc:	58f3      	ldr	r3, [r6, r3]
    6abe:	3401      	adds	r4, #1
    6ac0:	4798      	blx	r3
    6ac2:	42a5      	cmp	r5, r4
    6ac4:	d1f9      	bne.n	6aba <__libc_init_array+0x2a>
    6ac6:	bd70      	pop	{r4, r5, r6, pc}
    6ac8:	0000dacc 	.word	0x0000dacc
    6acc:	0000dacc 	.word	0x0000dacc
    6ad0:	0000dacc 	.word	0x0000dacc
    6ad4:	0000dad4 	.word	0x0000dad4

00006ad8 <malloc>:
    6ad8:	b510      	push	{r4, lr}
    6ada:	4b03      	ldr	r3, [pc, #12]	; (6ae8 <malloc+0x10>)
    6adc:	0001      	movs	r1, r0
    6ade:	6818      	ldr	r0, [r3, #0]
    6ae0:	f000 f804 	bl	6aec <_malloc_r>
    6ae4:	bd10      	pop	{r4, pc}
    6ae6:	46c0      	nop			; (mov r8, r8)
    6ae8:	20000118 	.word	0x20000118

00006aec <_malloc_r>:
    6aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aee:	4657      	mov	r7, sl
    6af0:	4645      	mov	r5, r8
    6af2:	46de      	mov	lr, fp
    6af4:	464e      	mov	r6, r9
    6af6:	b5e0      	push	{r5, r6, r7, lr}
    6af8:	000d      	movs	r5, r1
    6afa:	350b      	adds	r5, #11
    6afc:	b083      	sub	sp, #12
    6afe:	0007      	movs	r7, r0
    6b00:	2d16      	cmp	r5, #22
    6b02:	d800      	bhi.n	6b06 <_malloc_r+0x1a>
    6b04:	e09f      	b.n	6c46 <_malloc_r+0x15a>
    6b06:	2307      	movs	r3, #7
    6b08:	439d      	bics	r5, r3
    6b0a:	d500      	bpl.n	6b0e <_malloc_r+0x22>
    6b0c:	e0c4      	b.n	6c98 <_malloc_r+0x1ac>
    6b0e:	42a9      	cmp	r1, r5
    6b10:	d900      	bls.n	6b14 <_malloc_r+0x28>
    6b12:	e0c1      	b.n	6c98 <_malloc_r+0x1ac>
    6b14:	f000 fb7a 	bl	720c <__malloc_lock>
    6b18:	23f8      	movs	r3, #248	; 0xf8
    6b1a:	33ff      	adds	r3, #255	; 0xff
    6b1c:	429d      	cmp	r5, r3
    6b1e:	d800      	bhi.n	6b22 <_malloc_r+0x36>
    6b20:	e28f      	b.n	7042 <_malloc_r+0x556>
    6b22:	0a68      	lsrs	r0, r5, #9
    6b24:	d100      	bne.n	6b28 <_malloc_r+0x3c>
    6b26:	e0bb      	b.n	6ca0 <_malloc_r+0x1b4>
    6b28:	2804      	cmp	r0, #4
    6b2a:	d900      	bls.n	6b2e <_malloc_r+0x42>
    6b2c:	e162      	b.n	6df4 <_malloc_r+0x308>
    6b2e:	2338      	movs	r3, #56	; 0x38
    6b30:	4698      	mov	r8, r3
    6b32:	09a8      	lsrs	r0, r5, #6
    6b34:	4480      	add	r8, r0
    6b36:	3039      	adds	r0, #57	; 0x39
    6b38:	00c1      	lsls	r1, r0, #3
    6b3a:	4ed2      	ldr	r6, [pc, #840]	; (6e84 <_malloc_r+0x398>)
    6b3c:	1871      	adds	r1, r6, r1
    6b3e:	3908      	subs	r1, #8
    6b40:	68cc      	ldr	r4, [r1, #12]
    6b42:	42a1      	cmp	r1, r4
    6b44:	d019      	beq.n	6b7a <_malloc_r+0x8e>
    6b46:	2303      	movs	r3, #3
    6b48:	6862      	ldr	r2, [r4, #4]
    6b4a:	439a      	bics	r2, r3
    6b4c:	0013      	movs	r3, r2
    6b4e:	1b52      	subs	r2, r2, r5
    6b50:	2a0f      	cmp	r2, #15
    6b52:	dd00      	ble.n	6b56 <_malloc_r+0x6a>
    6b54:	e0aa      	b.n	6cac <_malloc_r+0x1c0>
    6b56:	2a00      	cmp	r2, #0
    6b58:	db00      	blt.n	6b5c <_malloc_r+0x70>
    6b5a:	e088      	b.n	6c6e <_malloc_r+0x182>
    6b5c:	2303      	movs	r3, #3
    6b5e:	469c      	mov	ip, r3
    6b60:	e008      	b.n	6b74 <_malloc_r+0x88>
    6b62:	4662      	mov	r2, ip
    6b64:	6863      	ldr	r3, [r4, #4]
    6b66:	4393      	bics	r3, r2
    6b68:	1b5a      	subs	r2, r3, r5
    6b6a:	2a0f      	cmp	r2, #15
    6b6c:	dd00      	ble.n	6b70 <_malloc_r+0x84>
    6b6e:	e09d      	b.n	6cac <_malloc_r+0x1c0>
    6b70:	2a00      	cmp	r2, #0
    6b72:	da7c      	bge.n	6c6e <_malloc_r+0x182>
    6b74:	68e4      	ldr	r4, [r4, #12]
    6b76:	42a1      	cmp	r1, r4
    6b78:	d1f3      	bne.n	6b62 <_malloc_r+0x76>
    6b7a:	0032      	movs	r2, r6
    6b7c:	6934      	ldr	r4, [r6, #16]
    6b7e:	3208      	adds	r2, #8
    6b80:	4294      	cmp	r4, r2
    6b82:	d100      	bne.n	6b86 <_malloc_r+0x9a>
    6b84:	e190      	b.n	6ea8 <_malloc_r+0x3bc>
    6b86:	2303      	movs	r3, #3
    6b88:	6861      	ldr	r1, [r4, #4]
    6b8a:	4399      	bics	r1, r3
    6b8c:	4689      	mov	r9, r1
    6b8e:	1b49      	subs	r1, r1, r5
    6b90:	290f      	cmp	r1, #15
    6b92:	dd00      	ble.n	6b96 <_malloc_r+0xaa>
    6b94:	e162      	b.n	6e5c <_malloc_r+0x370>
    6b96:	6172      	str	r2, [r6, #20]
    6b98:	6132      	str	r2, [r6, #16]
    6b9a:	2900      	cmp	r1, #0
    6b9c:	db00      	blt.n	6ba0 <_malloc_r+0xb4>
    6b9e:	e087      	b.n	6cb0 <_malloc_r+0x1c4>
    6ba0:	4ab9      	ldr	r2, [pc, #740]	; (6e88 <_malloc_r+0x39c>)
    6ba2:	464b      	mov	r3, r9
    6ba4:	4591      	cmp	r9, r2
    6ba6:	d900      	bls.n	6baa <_malloc_r+0xbe>
    6ba8:	e130      	b.n	6e0c <_malloc_r+0x320>
    6baa:	08db      	lsrs	r3, r3, #3
    6bac:	3aff      	subs	r2, #255	; 0xff
    6bae:	1099      	asrs	r1, r3, #2
    6bb0:	3aff      	subs	r2, #255	; 0xff
    6bb2:	408a      	lsls	r2, r1
    6bb4:	00db      	lsls	r3, r3, #3
    6bb6:	6871      	ldr	r1, [r6, #4]
    6bb8:	199b      	adds	r3, r3, r6
    6bba:	430a      	orrs	r2, r1
    6bbc:	6899      	ldr	r1, [r3, #8]
    6bbe:	6072      	str	r2, [r6, #4]
    6bc0:	60e3      	str	r3, [r4, #12]
    6bc2:	60a1      	str	r1, [r4, #8]
    6bc4:	609c      	str	r4, [r3, #8]
    6bc6:	0013      	movs	r3, r2
    6bc8:	60cc      	str	r4, [r1, #12]
    6bca:	2101      	movs	r1, #1
    6bcc:	1082      	asrs	r2, r0, #2
    6bce:	4091      	lsls	r1, r2
    6bd0:	4299      	cmp	r1, r3
    6bd2:	d86f      	bhi.n	6cb4 <_malloc_r+0x1c8>
    6bd4:	420b      	tst	r3, r1
    6bd6:	d105      	bne.n	6be4 <_malloc_r+0xf8>
    6bd8:	2203      	movs	r2, #3
    6bda:	4390      	bics	r0, r2
    6bdc:	0049      	lsls	r1, r1, #1
    6bde:	3004      	adds	r0, #4
    6be0:	420b      	tst	r3, r1
    6be2:	d0fb      	beq.n	6bdc <_malloc_r+0xf0>
    6be4:	2303      	movs	r3, #3
    6be6:	4698      	mov	r8, r3
    6be8:	00c3      	lsls	r3, r0, #3
    6bea:	4699      	mov	r9, r3
    6bec:	44b1      	add	r9, r6
    6bee:	46cc      	mov	ip, r9
    6bf0:	4682      	mov	sl, r0
    6bf2:	4663      	mov	r3, ip
    6bf4:	68dc      	ldr	r4, [r3, #12]
    6bf6:	45a4      	cmp	ip, r4
    6bf8:	d107      	bne.n	6c0a <_malloc_r+0x11e>
    6bfa:	e157      	b.n	6eac <_malloc_r+0x3c0>
    6bfc:	2a00      	cmp	r2, #0
    6bfe:	db00      	blt.n	6c02 <_malloc_r+0x116>
    6c00:	e166      	b.n	6ed0 <_malloc_r+0x3e4>
    6c02:	68e4      	ldr	r4, [r4, #12]
    6c04:	45a4      	cmp	ip, r4
    6c06:	d100      	bne.n	6c0a <_malloc_r+0x11e>
    6c08:	e150      	b.n	6eac <_malloc_r+0x3c0>
    6c0a:	4642      	mov	r2, r8
    6c0c:	6863      	ldr	r3, [r4, #4]
    6c0e:	4393      	bics	r3, r2
    6c10:	1b5a      	subs	r2, r3, r5
    6c12:	2a0f      	cmp	r2, #15
    6c14:	ddf2      	ble.n	6bfc <_malloc_r+0x110>
    6c16:	2001      	movs	r0, #1
    6c18:	4680      	mov	r8, r0
    6c1a:	1961      	adds	r1, r4, r5
    6c1c:	4305      	orrs	r5, r0
    6c1e:	6065      	str	r5, [r4, #4]
    6c20:	68a0      	ldr	r0, [r4, #8]
    6c22:	68e5      	ldr	r5, [r4, #12]
    6c24:	3608      	adds	r6, #8
    6c26:	60c5      	str	r5, [r0, #12]
    6c28:	60a8      	str	r0, [r5, #8]
    6c2a:	4640      	mov	r0, r8
    6c2c:	60f1      	str	r1, [r6, #12]
    6c2e:	60b1      	str	r1, [r6, #8]
    6c30:	4310      	orrs	r0, r2
    6c32:	6048      	str	r0, [r1, #4]
    6c34:	60ce      	str	r6, [r1, #12]
    6c36:	608e      	str	r6, [r1, #8]
    6c38:	0038      	movs	r0, r7
    6c3a:	50e2      	str	r2, [r4, r3]
    6c3c:	f000 fae8 	bl	7210 <__malloc_unlock>
    6c40:	0020      	movs	r0, r4
    6c42:	3008      	adds	r0, #8
    6c44:	e021      	b.n	6c8a <_malloc_r+0x19e>
    6c46:	2910      	cmp	r1, #16
    6c48:	d826      	bhi.n	6c98 <_malloc_r+0x1ac>
    6c4a:	0038      	movs	r0, r7
    6c4c:	f000 fade 	bl	720c <__malloc_lock>
    6c50:	2510      	movs	r5, #16
    6c52:	2318      	movs	r3, #24
    6c54:	2002      	movs	r0, #2
    6c56:	4e8b      	ldr	r6, [pc, #556]	; (6e84 <_malloc_r+0x398>)
    6c58:	18f3      	adds	r3, r6, r3
    6c5a:	001a      	movs	r2, r3
    6c5c:	685c      	ldr	r4, [r3, #4]
    6c5e:	3a08      	subs	r2, #8
    6c60:	4294      	cmp	r4, r2
    6c62:	d100      	bne.n	6c66 <_malloc_r+0x17a>
    6c64:	e12e      	b.n	6ec4 <_malloc_r+0x3d8>
    6c66:	2303      	movs	r3, #3
    6c68:	6862      	ldr	r2, [r4, #4]
    6c6a:	439a      	bics	r2, r3
    6c6c:	0013      	movs	r3, r2
    6c6e:	68e2      	ldr	r2, [r4, #12]
    6c70:	68a1      	ldr	r1, [r4, #8]
    6c72:	60ca      	str	r2, [r1, #12]
    6c74:	6091      	str	r1, [r2, #8]
    6c76:	2201      	movs	r2, #1
    6c78:	18e3      	adds	r3, r4, r3
    6c7a:	6859      	ldr	r1, [r3, #4]
    6c7c:	0038      	movs	r0, r7
    6c7e:	430a      	orrs	r2, r1
    6c80:	605a      	str	r2, [r3, #4]
    6c82:	f000 fac5 	bl	7210 <__malloc_unlock>
    6c86:	0020      	movs	r0, r4
    6c88:	3008      	adds	r0, #8
    6c8a:	b003      	add	sp, #12
    6c8c:	bc3c      	pop	{r2, r3, r4, r5}
    6c8e:	4690      	mov	r8, r2
    6c90:	4699      	mov	r9, r3
    6c92:	46a2      	mov	sl, r4
    6c94:	46ab      	mov	fp, r5
    6c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c98:	230c      	movs	r3, #12
    6c9a:	2000      	movs	r0, #0
    6c9c:	603b      	str	r3, [r7, #0]
    6c9e:	e7f4      	b.n	6c8a <_malloc_r+0x19e>
    6ca0:	2180      	movs	r1, #128	; 0x80
    6ca2:	233f      	movs	r3, #63	; 0x3f
    6ca4:	2040      	movs	r0, #64	; 0x40
    6ca6:	0089      	lsls	r1, r1, #2
    6ca8:	4698      	mov	r8, r3
    6caa:	e746      	b.n	6b3a <_malloc_r+0x4e>
    6cac:	4640      	mov	r0, r8
    6cae:	e764      	b.n	6b7a <_malloc_r+0x8e>
    6cb0:	464b      	mov	r3, r9
    6cb2:	e7e0      	b.n	6c76 <_malloc_r+0x18a>
    6cb4:	2303      	movs	r3, #3
    6cb6:	68b4      	ldr	r4, [r6, #8]
    6cb8:	6862      	ldr	r2, [r4, #4]
    6cba:	439a      	bics	r2, r3
    6cbc:	4690      	mov	r8, r2
    6cbe:	42aa      	cmp	r2, r5
    6cc0:	d303      	bcc.n	6cca <_malloc_r+0x1de>
    6cc2:	1b53      	subs	r3, r2, r5
    6cc4:	2b0f      	cmp	r3, #15
    6cc6:	dd00      	ble.n	6cca <_malloc_r+0x1de>
    6cc8:	e086      	b.n	6dd8 <_malloc_r+0x2ec>
    6cca:	0023      	movs	r3, r4
    6ccc:	4443      	add	r3, r8
    6cce:	4a6f      	ldr	r2, [pc, #444]	; (6e8c <_malloc_r+0x3a0>)
    6cd0:	9301      	str	r3, [sp, #4]
    6cd2:	4b6f      	ldr	r3, [pc, #444]	; (6e90 <_malloc_r+0x3a4>)
    6cd4:	4693      	mov	fp, r2
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	6812      	ldr	r2, [r2, #0]
    6cda:	18eb      	adds	r3, r5, r3
    6cdc:	3201      	adds	r2, #1
    6cde:	d100      	bne.n	6ce2 <_malloc_r+0x1f6>
    6ce0:	e168      	b.n	6fb4 <_malloc_r+0x4c8>
    6ce2:	4a6c      	ldr	r2, [pc, #432]	; (6e94 <_malloc_r+0x3a8>)
    6ce4:	4694      	mov	ip, r2
    6ce6:	4463      	add	r3, ip
    6ce8:	0b1b      	lsrs	r3, r3, #12
    6cea:	031b      	lsls	r3, r3, #12
    6cec:	9300      	str	r3, [sp, #0]
    6cee:	9900      	ldr	r1, [sp, #0]
    6cf0:	0038      	movs	r0, r7
    6cf2:	f000 faa1 	bl	7238 <_sbrk_r>
    6cf6:	0003      	movs	r3, r0
    6cf8:	4681      	mov	r9, r0
    6cfa:	3301      	adds	r3, #1
    6cfc:	d061      	beq.n	6dc2 <_malloc_r+0x2d6>
    6cfe:	9b01      	ldr	r3, [sp, #4]
    6d00:	4283      	cmp	r3, r0
    6d02:	d900      	bls.n	6d06 <_malloc_r+0x21a>
    6d04:	e0ff      	b.n	6f06 <_malloc_r+0x41a>
    6d06:	4b64      	ldr	r3, [pc, #400]	; (6e98 <_malloc_r+0x3ac>)
    6d08:	9a00      	ldr	r2, [sp, #0]
    6d0a:	469a      	mov	sl, r3
    6d0c:	681b      	ldr	r3, [r3, #0]
    6d0e:	469c      	mov	ip, r3
    6d10:	4653      	mov	r3, sl
    6d12:	4462      	add	r2, ip
    6d14:	601a      	str	r2, [r3, #0]
    6d16:	9b01      	ldr	r3, [sp, #4]
    6d18:	0011      	movs	r1, r2
    6d1a:	4283      	cmp	r3, r0
    6d1c:	d100      	bne.n	6d20 <_malloc_r+0x234>
    6d1e:	e155      	b.n	6fcc <_malloc_r+0x4e0>
    6d20:	465b      	mov	r3, fp
    6d22:	681b      	ldr	r3, [r3, #0]
    6d24:	3301      	adds	r3, #1
    6d26:	d100      	bne.n	6d2a <_malloc_r+0x23e>
    6d28:	e16c      	b.n	7004 <_malloc_r+0x518>
    6d2a:	464b      	mov	r3, r9
    6d2c:	9a01      	ldr	r2, [sp, #4]
    6d2e:	1a9b      	subs	r3, r3, r2
    6d30:	1859      	adds	r1, r3, r1
    6d32:	4653      	mov	r3, sl
    6d34:	6019      	str	r1, [r3, #0]
    6d36:	2307      	movs	r3, #7
    6d38:	464a      	mov	r2, r9
    6d3a:	4013      	ands	r3, r2
    6d3c:	d100      	bne.n	6d40 <_malloc_r+0x254>
    6d3e:	e124      	b.n	6f8a <_malloc_r+0x49e>
    6d40:	2108      	movs	r1, #8
    6d42:	4689      	mov	r9, r1
    6d44:	4955      	ldr	r1, [pc, #340]	; (6e9c <_malloc_r+0x3b0>)
    6d46:	1ad2      	subs	r2, r2, r3
    6d48:	4491      	add	r9, r2
    6d4a:	1acb      	subs	r3, r1, r3
    6d4c:	9a00      	ldr	r2, [sp, #0]
    6d4e:	0038      	movs	r0, r7
    6d50:	444a      	add	r2, r9
    6d52:	0511      	lsls	r1, r2, #20
    6d54:	0d09      	lsrs	r1, r1, #20
    6d56:	1a5b      	subs	r3, r3, r1
    6d58:	0019      	movs	r1, r3
    6d5a:	469b      	mov	fp, r3
    6d5c:	f000 fa6c 	bl	7238 <_sbrk_r>
    6d60:	1c43      	adds	r3, r0, #1
    6d62:	d100      	bne.n	6d66 <_malloc_r+0x27a>
    6d64:	e142      	b.n	6fec <_malloc_r+0x500>
    6d66:	464b      	mov	r3, r9
    6d68:	1ac0      	subs	r0, r0, r3
    6d6a:	2301      	movs	r3, #1
    6d6c:	4458      	add	r0, fp
    6d6e:	4318      	orrs	r0, r3
    6d70:	4653      	mov	r3, sl
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	445b      	add	r3, fp
    6d76:	0019      	movs	r1, r3
    6d78:	4653      	mov	r3, sl
    6d7a:	6019      	str	r1, [r3, #0]
    6d7c:	464b      	mov	r3, r9
    6d7e:	60b3      	str	r3, [r6, #8]
    6d80:	6058      	str	r0, [r3, #4]
    6d82:	42b4      	cmp	r4, r6
    6d84:	d013      	beq.n	6dae <_malloc_r+0x2c2>
    6d86:	4643      	mov	r3, r8
    6d88:	2b0f      	cmp	r3, #15
    6d8a:	d800      	bhi.n	6d8e <_malloc_r+0x2a2>
    6d8c:	e0e8      	b.n	6f60 <_malloc_r+0x474>
    6d8e:	4643      	mov	r3, r8
    6d90:	2207      	movs	r2, #7
    6d92:	6860      	ldr	r0, [r4, #4]
    6d94:	3b0c      	subs	r3, #12
    6d96:	4393      	bics	r3, r2
    6d98:	3a06      	subs	r2, #6
    6d9a:	4002      	ands	r2, r0
    6d9c:	2005      	movs	r0, #5
    6d9e:	431a      	orrs	r2, r3
    6da0:	6062      	str	r2, [r4, #4]
    6da2:	18e2      	adds	r2, r4, r3
    6da4:	6050      	str	r0, [r2, #4]
    6da6:	6090      	str	r0, [r2, #8]
    6da8:	2b0f      	cmp	r3, #15
    6daa:	d900      	bls.n	6dae <_malloc_r+0x2c2>
    6dac:	e122      	b.n	6ff4 <_malloc_r+0x508>
    6dae:	4b3c      	ldr	r3, [pc, #240]	; (6ea0 <_malloc_r+0x3b4>)
    6db0:	681a      	ldr	r2, [r3, #0]
    6db2:	4291      	cmp	r1, r2
    6db4:	d900      	bls.n	6db8 <_malloc_r+0x2cc>
    6db6:	6019      	str	r1, [r3, #0]
    6db8:	4b3a      	ldr	r3, [pc, #232]	; (6ea4 <_malloc_r+0x3b8>)
    6dba:	681a      	ldr	r2, [r3, #0]
    6dbc:	4291      	cmp	r1, r2
    6dbe:	d900      	bls.n	6dc2 <_malloc_r+0x2d6>
    6dc0:	6019      	str	r1, [r3, #0]
    6dc2:	2303      	movs	r3, #3
    6dc4:	68b4      	ldr	r4, [r6, #8]
    6dc6:	6862      	ldr	r2, [r4, #4]
    6dc8:	439a      	bics	r2, r3
    6dca:	1b53      	subs	r3, r2, r5
    6dcc:	4295      	cmp	r5, r2
    6dce:	d900      	bls.n	6dd2 <_malloc_r+0x2e6>
    6dd0:	e0c9      	b.n	6f66 <_malloc_r+0x47a>
    6dd2:	2b0f      	cmp	r3, #15
    6dd4:	dc00      	bgt.n	6dd8 <_malloc_r+0x2ec>
    6dd6:	e0c6      	b.n	6f66 <_malloc_r+0x47a>
    6dd8:	2201      	movs	r2, #1
    6dda:	0029      	movs	r1, r5
    6ddc:	4313      	orrs	r3, r2
    6dde:	4311      	orrs	r1, r2
    6de0:	1965      	adds	r5, r4, r5
    6de2:	6061      	str	r1, [r4, #4]
    6de4:	0038      	movs	r0, r7
    6de6:	60b5      	str	r5, [r6, #8]
    6de8:	606b      	str	r3, [r5, #4]
    6dea:	f000 fa11 	bl	7210 <__malloc_unlock>
    6dee:	0020      	movs	r0, r4
    6df0:	3008      	adds	r0, #8
    6df2:	e74a      	b.n	6c8a <_malloc_r+0x19e>
    6df4:	2814      	cmp	r0, #20
    6df6:	d97a      	bls.n	6eee <_malloc_r+0x402>
    6df8:	2854      	cmp	r0, #84	; 0x54
    6dfa:	d900      	bls.n	6dfe <_malloc_r+0x312>
    6dfc:	e0ba      	b.n	6f74 <_malloc_r+0x488>
    6dfe:	236e      	movs	r3, #110	; 0x6e
    6e00:	4698      	mov	r8, r3
    6e02:	0b28      	lsrs	r0, r5, #12
    6e04:	4480      	add	r8, r0
    6e06:	306f      	adds	r0, #111	; 0x6f
    6e08:	00c1      	lsls	r1, r0, #3
    6e0a:	e696      	b.n	6b3a <_malloc_r+0x4e>
    6e0c:	0a5a      	lsrs	r2, r3, #9
    6e0e:	2a04      	cmp	r2, #4
    6e10:	d973      	bls.n	6efa <_malloc_r+0x40e>
    6e12:	2a14      	cmp	r2, #20
    6e14:	d900      	bls.n	6e18 <_malloc_r+0x32c>
    6e16:	e0d0      	b.n	6fba <_malloc_r+0x4ce>
    6e18:	0011      	movs	r1, r2
    6e1a:	325c      	adds	r2, #92	; 0x5c
    6e1c:	315b      	adds	r1, #91	; 0x5b
    6e1e:	00d2      	lsls	r2, r2, #3
    6e20:	2308      	movs	r3, #8
    6e22:	425b      	negs	r3, r3
    6e24:	469c      	mov	ip, r3
    6e26:	18b2      	adds	r2, r6, r2
    6e28:	4494      	add	ip, r2
    6e2a:	4663      	mov	r3, ip
    6e2c:	689a      	ldr	r2, [r3, #8]
    6e2e:	2303      	movs	r3, #3
    6e30:	4698      	mov	r8, r3
    6e32:	4594      	cmp	ip, r2
    6e34:	d100      	bne.n	6e38 <_malloc_r+0x34c>
    6e36:	e0ab      	b.n	6f90 <_malloc_r+0x4a4>
    6e38:	4643      	mov	r3, r8
    6e3a:	6851      	ldr	r1, [r2, #4]
    6e3c:	4399      	bics	r1, r3
    6e3e:	4589      	cmp	r9, r1
    6e40:	d300      	bcc.n	6e44 <_malloc_r+0x358>
    6e42:	e095      	b.n	6f70 <_malloc_r+0x484>
    6e44:	6892      	ldr	r2, [r2, #8]
    6e46:	4594      	cmp	ip, r2
    6e48:	d1f6      	bne.n	6e38 <_malloc_r+0x34c>
    6e4a:	4663      	mov	r3, ip
    6e4c:	68da      	ldr	r2, [r3, #12]
    6e4e:	6873      	ldr	r3, [r6, #4]
    6e50:	4661      	mov	r1, ip
    6e52:	60e2      	str	r2, [r4, #12]
    6e54:	60a1      	str	r1, [r4, #8]
    6e56:	6094      	str	r4, [r2, #8]
    6e58:	60cc      	str	r4, [r1, #12]
    6e5a:	e6b6      	b.n	6bca <_malloc_r+0xde>
    6e5c:	2301      	movs	r3, #1
    6e5e:	1960      	adds	r0, r4, r5
    6e60:	431d      	orrs	r5, r3
    6e62:	6065      	str	r5, [r4, #4]
    6e64:	6170      	str	r0, [r6, #20]
    6e66:	6130      	str	r0, [r6, #16]
    6e68:	60c2      	str	r2, [r0, #12]
    6e6a:	6082      	str	r2, [r0, #8]
    6e6c:	001a      	movs	r2, r3
    6e6e:	464b      	mov	r3, r9
    6e70:	430a      	orrs	r2, r1
    6e72:	6042      	str	r2, [r0, #4]
    6e74:	0038      	movs	r0, r7
    6e76:	50e1      	str	r1, [r4, r3]
    6e78:	f000 f9ca 	bl	7210 <__malloc_unlock>
    6e7c:	0020      	movs	r0, r4
    6e7e:	3008      	adds	r0, #8
    6e80:	e703      	b.n	6c8a <_malloc_r+0x19e>
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	20000548 	.word	0x20000548
    6e88:	000001ff 	.word	0x000001ff
    6e8c:	20000950 	.word	0x20000950
    6e90:	20000dbc 	.word	0x20000dbc
    6e94:	0000100f 	.word	0x0000100f
    6e98:	20000d8c 	.word	0x20000d8c
    6e9c:	00001008 	.word	0x00001008
    6ea0:	20000db4 	.word	0x20000db4
    6ea4:	20000db8 	.word	0x20000db8
    6ea8:	6873      	ldr	r3, [r6, #4]
    6eaa:	e68e      	b.n	6bca <_malloc_r+0xde>
    6eac:	2308      	movs	r3, #8
    6eae:	469b      	mov	fp, r3
    6eb0:	3b07      	subs	r3, #7
    6eb2:	44dc      	add	ip, fp
    6eb4:	469b      	mov	fp, r3
    6eb6:	44da      	add	sl, fp
    6eb8:	4643      	mov	r3, r8
    6eba:	4652      	mov	r2, sl
    6ebc:	4213      	tst	r3, r2
    6ebe:	d000      	beq.n	6ec2 <_malloc_r+0x3d6>
    6ec0:	e697      	b.n	6bf2 <_malloc_r+0x106>
    6ec2:	e037      	b.n	6f34 <_malloc_r+0x448>
    6ec4:	68dc      	ldr	r4, [r3, #12]
    6ec6:	3002      	adds	r0, #2
    6ec8:	42a3      	cmp	r3, r4
    6eca:	d100      	bne.n	6ece <_malloc_r+0x3e2>
    6ecc:	e655      	b.n	6b7a <_malloc_r+0x8e>
    6ece:	e6ca      	b.n	6c66 <_malloc_r+0x17a>
    6ed0:	2201      	movs	r2, #1
    6ed2:	18e3      	adds	r3, r4, r3
    6ed4:	6859      	ldr	r1, [r3, #4]
    6ed6:	0038      	movs	r0, r7
    6ed8:	430a      	orrs	r2, r1
    6eda:	605a      	str	r2, [r3, #4]
    6edc:	68e3      	ldr	r3, [r4, #12]
    6ede:	68a2      	ldr	r2, [r4, #8]
    6ee0:	60d3      	str	r3, [r2, #12]
    6ee2:	609a      	str	r2, [r3, #8]
    6ee4:	f000 f994 	bl	7210 <__malloc_unlock>
    6ee8:	0020      	movs	r0, r4
    6eea:	3008      	adds	r0, #8
    6eec:	e6cd      	b.n	6c8a <_malloc_r+0x19e>
    6eee:	235b      	movs	r3, #91	; 0x5b
    6ef0:	4698      	mov	r8, r3
    6ef2:	4480      	add	r8, r0
    6ef4:	305c      	adds	r0, #92	; 0x5c
    6ef6:	00c1      	lsls	r1, r0, #3
    6ef8:	e61f      	b.n	6b3a <_malloc_r+0x4e>
    6efa:	099a      	lsrs	r2, r3, #6
    6efc:	0011      	movs	r1, r2
    6efe:	3239      	adds	r2, #57	; 0x39
    6f00:	3138      	adds	r1, #56	; 0x38
    6f02:	00d2      	lsls	r2, r2, #3
    6f04:	e78c      	b.n	6e20 <_malloc_r+0x334>
    6f06:	42b4      	cmp	r4, r6
    6f08:	d000      	beq.n	6f0c <_malloc_r+0x420>
    6f0a:	e75a      	b.n	6dc2 <_malloc_r+0x2d6>
    6f0c:	4b4f      	ldr	r3, [pc, #316]	; (704c <_malloc_r+0x560>)
    6f0e:	9a00      	ldr	r2, [sp, #0]
    6f10:	469a      	mov	sl, r3
    6f12:	681b      	ldr	r3, [r3, #0]
    6f14:	469c      	mov	ip, r3
    6f16:	4653      	mov	r3, sl
    6f18:	4462      	add	r2, ip
    6f1a:	0011      	movs	r1, r2
    6f1c:	601a      	str	r2, [r3, #0]
    6f1e:	e6ff      	b.n	6d20 <_malloc_r+0x234>
    6f20:	2308      	movs	r3, #8
    6f22:	425b      	negs	r3, r3
    6f24:	469c      	mov	ip, r3
    6f26:	44e1      	add	r9, ip
    6f28:	464b      	mov	r3, r9
    6f2a:	689b      	ldr	r3, [r3, #8]
    6f2c:	3801      	subs	r0, #1
    6f2e:	4599      	cmp	r9, r3
    6f30:	d000      	beq.n	6f34 <_malloc_r+0x448>
    6f32:	e084      	b.n	703e <_malloc_r+0x552>
    6f34:	4643      	mov	r3, r8
    6f36:	4203      	tst	r3, r0
    6f38:	d1f2      	bne.n	6f20 <_malloc_r+0x434>
    6f3a:	6873      	ldr	r3, [r6, #4]
    6f3c:	438b      	bics	r3, r1
    6f3e:	6073      	str	r3, [r6, #4]
    6f40:	0049      	lsls	r1, r1, #1
    6f42:	4299      	cmp	r1, r3
    6f44:	d900      	bls.n	6f48 <_malloc_r+0x45c>
    6f46:	e6b5      	b.n	6cb4 <_malloc_r+0x1c8>
    6f48:	2900      	cmp	r1, #0
    6f4a:	d100      	bne.n	6f4e <_malloc_r+0x462>
    6f4c:	e6b2      	b.n	6cb4 <_malloc_r+0x1c8>
    6f4e:	4650      	mov	r0, sl
    6f50:	420b      	tst	r3, r1
    6f52:	d000      	beq.n	6f56 <_malloc_r+0x46a>
    6f54:	e648      	b.n	6be8 <_malloc_r+0xfc>
    6f56:	0049      	lsls	r1, r1, #1
    6f58:	3004      	adds	r0, #4
    6f5a:	420b      	tst	r3, r1
    6f5c:	d0fb      	beq.n	6f56 <_malloc_r+0x46a>
    6f5e:	e643      	b.n	6be8 <_malloc_r+0xfc>
    6f60:	2301      	movs	r3, #1
    6f62:	464a      	mov	r2, r9
    6f64:	6053      	str	r3, [r2, #4]
    6f66:	0038      	movs	r0, r7
    6f68:	f000 f952 	bl	7210 <__malloc_unlock>
    6f6c:	2000      	movs	r0, #0
    6f6e:	e68c      	b.n	6c8a <_malloc_r+0x19e>
    6f70:	4694      	mov	ip, r2
    6f72:	e76a      	b.n	6e4a <_malloc_r+0x35e>
    6f74:	23aa      	movs	r3, #170	; 0xaa
    6f76:	005b      	lsls	r3, r3, #1
    6f78:	4298      	cmp	r0, r3
    6f7a:	d811      	bhi.n	6fa0 <_malloc_r+0x4b4>
    6f7c:	3bdd      	subs	r3, #221	; 0xdd
    6f7e:	4698      	mov	r8, r3
    6f80:	0be8      	lsrs	r0, r5, #15
    6f82:	4480      	add	r8, r0
    6f84:	3078      	adds	r0, #120	; 0x78
    6f86:	00c1      	lsls	r1, r0, #3
    6f88:	e5d7      	b.n	6b3a <_malloc_r+0x4e>
    6f8a:	2380      	movs	r3, #128	; 0x80
    6f8c:	015b      	lsls	r3, r3, #5
    6f8e:	e6dd      	b.n	6d4c <_malloc_r+0x260>
    6f90:	1089      	asrs	r1, r1, #2
    6f92:	3b02      	subs	r3, #2
    6f94:	408b      	lsls	r3, r1
    6f96:	6872      	ldr	r2, [r6, #4]
    6f98:	4313      	orrs	r3, r2
    6f9a:	6073      	str	r3, [r6, #4]
    6f9c:	4662      	mov	r2, ip
    6f9e:	e757      	b.n	6e50 <_malloc_r+0x364>
    6fa0:	4b2b      	ldr	r3, [pc, #172]	; (7050 <_malloc_r+0x564>)
    6fa2:	4298      	cmp	r0, r3
    6fa4:	d81c      	bhi.n	6fe0 <_malloc_r+0x4f4>
    6fa6:	237c      	movs	r3, #124	; 0x7c
    6fa8:	4698      	mov	r8, r3
    6faa:	0ca8      	lsrs	r0, r5, #18
    6fac:	4480      	add	r8, r0
    6fae:	307d      	adds	r0, #125	; 0x7d
    6fb0:	00c1      	lsls	r1, r0, #3
    6fb2:	e5c2      	b.n	6b3a <_malloc_r+0x4e>
    6fb4:	3310      	adds	r3, #16
    6fb6:	9300      	str	r3, [sp, #0]
    6fb8:	e699      	b.n	6cee <_malloc_r+0x202>
    6fba:	2a54      	cmp	r2, #84	; 0x54
    6fbc:	d826      	bhi.n	700c <_malloc_r+0x520>
    6fbe:	464b      	mov	r3, r9
    6fc0:	0b1a      	lsrs	r2, r3, #12
    6fc2:	0011      	movs	r1, r2
    6fc4:	326f      	adds	r2, #111	; 0x6f
    6fc6:	316e      	adds	r1, #110	; 0x6e
    6fc8:	00d2      	lsls	r2, r2, #3
    6fca:	e729      	b.n	6e20 <_malloc_r+0x334>
    6fcc:	051b      	lsls	r3, r3, #20
    6fce:	d000      	beq.n	6fd2 <_malloc_r+0x4e6>
    6fd0:	e6a6      	b.n	6d20 <_malloc_r+0x234>
    6fd2:	2001      	movs	r0, #1
    6fd4:	9b00      	ldr	r3, [sp, #0]
    6fd6:	68b2      	ldr	r2, [r6, #8]
    6fd8:	4443      	add	r3, r8
    6fda:	4303      	orrs	r3, r0
    6fdc:	6053      	str	r3, [r2, #4]
    6fde:	e6e6      	b.n	6dae <_malloc_r+0x2c2>
    6fe0:	21fe      	movs	r1, #254	; 0xfe
    6fe2:	237e      	movs	r3, #126	; 0x7e
    6fe4:	207f      	movs	r0, #127	; 0x7f
    6fe6:	0089      	lsls	r1, r1, #2
    6fe8:	4698      	mov	r8, r3
    6fea:	e5a6      	b.n	6b3a <_malloc_r+0x4e>
    6fec:	2300      	movs	r3, #0
    6fee:	2001      	movs	r0, #1
    6ff0:	469b      	mov	fp, r3
    6ff2:	e6bd      	b.n	6d70 <_malloc_r+0x284>
    6ff4:	0021      	movs	r1, r4
    6ff6:	0038      	movs	r0, r7
    6ff8:	3108      	adds	r1, #8
    6ffa:	f003 f813 	bl	a024 <_free_r>
    6ffe:	4653      	mov	r3, sl
    7000:	6819      	ldr	r1, [r3, #0]
    7002:	e6d4      	b.n	6dae <_malloc_r+0x2c2>
    7004:	465b      	mov	r3, fp
    7006:	464a      	mov	r2, r9
    7008:	601a      	str	r2, [r3, #0]
    700a:	e694      	b.n	6d36 <_malloc_r+0x24a>
    700c:	21aa      	movs	r1, #170	; 0xaa
    700e:	0049      	lsls	r1, r1, #1
    7010:	428a      	cmp	r2, r1
    7012:	d806      	bhi.n	7022 <_malloc_r+0x536>
    7014:	464b      	mov	r3, r9
    7016:	0bda      	lsrs	r2, r3, #15
    7018:	0011      	movs	r1, r2
    701a:	3278      	adds	r2, #120	; 0x78
    701c:	3177      	adds	r1, #119	; 0x77
    701e:	00d2      	lsls	r2, r2, #3
    7020:	e6fe      	b.n	6e20 <_malloc_r+0x334>
    7022:	490b      	ldr	r1, [pc, #44]	; (7050 <_malloc_r+0x564>)
    7024:	428a      	cmp	r2, r1
    7026:	d806      	bhi.n	7036 <_malloc_r+0x54a>
    7028:	464b      	mov	r3, r9
    702a:	0c9a      	lsrs	r2, r3, #18
    702c:	0011      	movs	r1, r2
    702e:	327d      	adds	r2, #125	; 0x7d
    7030:	317c      	adds	r1, #124	; 0x7c
    7032:	00d2      	lsls	r2, r2, #3
    7034:	e6f4      	b.n	6e20 <_malloc_r+0x334>
    7036:	22fe      	movs	r2, #254	; 0xfe
    7038:	217e      	movs	r1, #126	; 0x7e
    703a:	0092      	lsls	r2, r2, #2
    703c:	e6f0      	b.n	6e20 <_malloc_r+0x334>
    703e:	6873      	ldr	r3, [r6, #4]
    7040:	e77e      	b.n	6f40 <_malloc_r+0x454>
    7042:	002b      	movs	r3, r5
    7044:	08e8      	lsrs	r0, r5, #3
    7046:	3308      	adds	r3, #8
    7048:	e605      	b.n	6c56 <_malloc_r+0x16a>
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	20000d8c 	.word	0x20000d8c
    7050:	00000554 	.word	0x00000554

00007054 <memcpy>:
    7054:	b5f0      	push	{r4, r5, r6, r7, lr}
    7056:	0005      	movs	r5, r0
    7058:	2a0f      	cmp	r2, #15
    705a:	d92f      	bls.n	70bc <memcpy+0x68>
    705c:	000b      	movs	r3, r1
    705e:	4303      	orrs	r3, r0
    7060:	079b      	lsls	r3, r3, #30
    7062:	d134      	bne.n	70ce <memcpy+0x7a>
    7064:	0016      	movs	r6, r2
    7066:	000c      	movs	r4, r1
    7068:	0003      	movs	r3, r0
    706a:	3e10      	subs	r6, #16
    706c:	0935      	lsrs	r5, r6, #4
    706e:	3501      	adds	r5, #1
    7070:	012d      	lsls	r5, r5, #4
    7072:	1945      	adds	r5, r0, r5
    7074:	6827      	ldr	r7, [r4, #0]
    7076:	601f      	str	r7, [r3, #0]
    7078:	6867      	ldr	r7, [r4, #4]
    707a:	605f      	str	r7, [r3, #4]
    707c:	68a7      	ldr	r7, [r4, #8]
    707e:	609f      	str	r7, [r3, #8]
    7080:	68e7      	ldr	r7, [r4, #12]
    7082:	3410      	adds	r4, #16
    7084:	60df      	str	r7, [r3, #12]
    7086:	3310      	adds	r3, #16
    7088:	429d      	cmp	r5, r3
    708a:	d1f3      	bne.n	7074 <memcpy+0x20>
    708c:	230f      	movs	r3, #15
    708e:	439e      	bics	r6, r3
    7090:	3610      	adds	r6, #16
    7092:	1985      	adds	r5, r0, r6
    7094:	1989      	adds	r1, r1, r6
    7096:	4013      	ands	r3, r2
    7098:	2b03      	cmp	r3, #3
    709a:	d91a      	bls.n	70d2 <memcpy+0x7e>
    709c:	1f1e      	subs	r6, r3, #4
    709e:	2300      	movs	r3, #0
    70a0:	08b4      	lsrs	r4, r6, #2
    70a2:	3401      	adds	r4, #1
    70a4:	00a4      	lsls	r4, r4, #2
    70a6:	58cf      	ldr	r7, [r1, r3]
    70a8:	50ef      	str	r7, [r5, r3]
    70aa:	3304      	adds	r3, #4
    70ac:	42a3      	cmp	r3, r4
    70ae:	d1fa      	bne.n	70a6 <memcpy+0x52>
    70b0:	2403      	movs	r4, #3
    70b2:	43a6      	bics	r6, r4
    70b4:	1d33      	adds	r3, r6, #4
    70b6:	4022      	ands	r2, r4
    70b8:	18c9      	adds	r1, r1, r3
    70ba:	18ed      	adds	r5, r5, r3
    70bc:	2a00      	cmp	r2, #0
    70be:	d005      	beq.n	70cc <memcpy+0x78>
    70c0:	2300      	movs	r3, #0
    70c2:	5ccc      	ldrb	r4, [r1, r3]
    70c4:	54ec      	strb	r4, [r5, r3]
    70c6:	3301      	adds	r3, #1
    70c8:	4293      	cmp	r3, r2
    70ca:	d1fa      	bne.n	70c2 <memcpy+0x6e>
    70cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ce:	0005      	movs	r5, r0
    70d0:	e7f6      	b.n	70c0 <memcpy+0x6c>
    70d2:	001a      	movs	r2, r3
    70d4:	e7f2      	b.n	70bc <memcpy+0x68>
    70d6:	46c0      	nop			; (mov r8, r8)

000070d8 <memmove>:
    70d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70da:	4288      	cmp	r0, r1
    70dc:	d90a      	bls.n	70f4 <memmove+0x1c>
    70de:	188b      	adds	r3, r1, r2
    70e0:	4298      	cmp	r0, r3
    70e2:	d207      	bcs.n	70f4 <memmove+0x1c>
    70e4:	1e53      	subs	r3, r2, #1
    70e6:	2a00      	cmp	r2, #0
    70e8:	d003      	beq.n	70f2 <memmove+0x1a>
    70ea:	5cca      	ldrb	r2, [r1, r3]
    70ec:	54c2      	strb	r2, [r0, r3]
    70ee:	3b01      	subs	r3, #1
    70f0:	d2fb      	bcs.n	70ea <memmove+0x12>
    70f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70f4:	0005      	movs	r5, r0
    70f6:	2a0f      	cmp	r2, #15
    70f8:	d808      	bhi.n	710c <memmove+0x34>
    70fa:	2a00      	cmp	r2, #0
    70fc:	d0f9      	beq.n	70f2 <memmove+0x1a>
    70fe:	2300      	movs	r3, #0
    7100:	5ccc      	ldrb	r4, [r1, r3]
    7102:	54ec      	strb	r4, [r5, r3]
    7104:	3301      	adds	r3, #1
    7106:	4293      	cmp	r3, r2
    7108:	d1fa      	bne.n	7100 <memmove+0x28>
    710a:	e7f2      	b.n	70f2 <memmove+0x1a>
    710c:	000b      	movs	r3, r1
    710e:	4303      	orrs	r3, r0
    7110:	079b      	lsls	r3, r3, #30
    7112:	d12d      	bne.n	7170 <memmove+0x98>
    7114:	0015      	movs	r5, r2
    7116:	000c      	movs	r4, r1
    7118:	0003      	movs	r3, r0
    711a:	3d10      	subs	r5, #16
    711c:	092f      	lsrs	r7, r5, #4
    711e:	3701      	adds	r7, #1
    7120:	013f      	lsls	r7, r7, #4
    7122:	19c7      	adds	r7, r0, r7
    7124:	6826      	ldr	r6, [r4, #0]
    7126:	601e      	str	r6, [r3, #0]
    7128:	6866      	ldr	r6, [r4, #4]
    712a:	605e      	str	r6, [r3, #4]
    712c:	68a6      	ldr	r6, [r4, #8]
    712e:	609e      	str	r6, [r3, #8]
    7130:	68e6      	ldr	r6, [r4, #12]
    7132:	3410      	adds	r4, #16
    7134:	60de      	str	r6, [r3, #12]
    7136:	3310      	adds	r3, #16
    7138:	429f      	cmp	r7, r3
    713a:	d1f3      	bne.n	7124 <memmove+0x4c>
    713c:	240f      	movs	r4, #15
    713e:	43a5      	bics	r5, r4
    7140:	3510      	adds	r5, #16
    7142:	1949      	adds	r1, r1, r5
    7144:	4014      	ands	r4, r2
    7146:	1945      	adds	r5, r0, r5
    7148:	2c03      	cmp	r4, #3
    714a:	d913      	bls.n	7174 <memmove+0x9c>
    714c:	2300      	movs	r3, #0
    714e:	1f27      	subs	r7, r4, #4
    7150:	08be      	lsrs	r6, r7, #2
    7152:	3601      	adds	r6, #1
    7154:	00b6      	lsls	r6, r6, #2
    7156:	58cc      	ldr	r4, [r1, r3]
    7158:	50ec      	str	r4, [r5, r3]
    715a:	3304      	adds	r3, #4
    715c:	42b3      	cmp	r3, r6
    715e:	d1fa      	bne.n	7156 <memmove+0x7e>
    7160:	2603      	movs	r6, #3
    7162:	43b7      	bics	r7, r6
    7164:	1d3c      	adds	r4, r7, #4
    7166:	1909      	adds	r1, r1, r4
    7168:	192d      	adds	r5, r5, r4
    716a:	4032      	ands	r2, r6
    716c:	d1c7      	bne.n	70fe <memmove+0x26>
    716e:	e7c0      	b.n	70f2 <memmove+0x1a>
    7170:	0005      	movs	r5, r0
    7172:	e7c4      	b.n	70fe <memmove+0x26>
    7174:	0022      	movs	r2, r4
    7176:	e7c0      	b.n	70fa <memmove+0x22>

00007178 <memset>:
    7178:	b5f0      	push	{r4, r5, r6, r7, lr}
    717a:	0783      	lsls	r3, r0, #30
    717c:	d043      	beq.n	7206 <memset+0x8e>
    717e:	1e54      	subs	r4, r2, #1
    7180:	2a00      	cmp	r2, #0
    7182:	d03f      	beq.n	7204 <memset+0x8c>
    7184:	b2ce      	uxtb	r6, r1
    7186:	0002      	movs	r2, r0
    7188:	2503      	movs	r5, #3
    718a:	e002      	b.n	7192 <memset+0x1a>
    718c:	001a      	movs	r2, r3
    718e:	3c01      	subs	r4, #1
    7190:	d338      	bcc.n	7204 <memset+0x8c>
    7192:	1c53      	adds	r3, r2, #1
    7194:	7016      	strb	r6, [r2, #0]
    7196:	422b      	tst	r3, r5
    7198:	d1f8      	bne.n	718c <memset+0x14>
    719a:	2c03      	cmp	r4, #3
    719c:	d92a      	bls.n	71f4 <memset+0x7c>
    719e:	22ff      	movs	r2, #255	; 0xff
    71a0:	400a      	ands	r2, r1
    71a2:	0215      	lsls	r5, r2, #8
    71a4:	4315      	orrs	r5, r2
    71a6:	042a      	lsls	r2, r5, #16
    71a8:	4315      	orrs	r5, r2
    71aa:	2c0f      	cmp	r4, #15
    71ac:	d914      	bls.n	71d8 <memset+0x60>
    71ae:	0027      	movs	r7, r4
    71b0:	001a      	movs	r2, r3
    71b2:	3f10      	subs	r7, #16
    71b4:	093e      	lsrs	r6, r7, #4
    71b6:	3601      	adds	r6, #1
    71b8:	0136      	lsls	r6, r6, #4
    71ba:	199e      	adds	r6, r3, r6
    71bc:	6015      	str	r5, [r2, #0]
    71be:	6055      	str	r5, [r2, #4]
    71c0:	6095      	str	r5, [r2, #8]
    71c2:	60d5      	str	r5, [r2, #12]
    71c4:	3210      	adds	r2, #16
    71c6:	4296      	cmp	r6, r2
    71c8:	d1f8      	bne.n	71bc <memset+0x44>
    71ca:	220f      	movs	r2, #15
    71cc:	4397      	bics	r7, r2
    71ce:	3710      	adds	r7, #16
    71d0:	19db      	adds	r3, r3, r7
    71d2:	4014      	ands	r4, r2
    71d4:	2c03      	cmp	r4, #3
    71d6:	d90d      	bls.n	71f4 <memset+0x7c>
    71d8:	001a      	movs	r2, r3
    71da:	1f27      	subs	r7, r4, #4
    71dc:	08be      	lsrs	r6, r7, #2
    71de:	3601      	adds	r6, #1
    71e0:	00b6      	lsls	r6, r6, #2
    71e2:	199e      	adds	r6, r3, r6
    71e4:	c220      	stmia	r2!, {r5}
    71e6:	42b2      	cmp	r2, r6
    71e8:	d1fc      	bne.n	71e4 <memset+0x6c>
    71ea:	2203      	movs	r2, #3
    71ec:	4397      	bics	r7, r2
    71ee:	3704      	adds	r7, #4
    71f0:	19db      	adds	r3, r3, r7
    71f2:	4014      	ands	r4, r2
    71f4:	2c00      	cmp	r4, #0
    71f6:	d005      	beq.n	7204 <memset+0x8c>
    71f8:	b2c9      	uxtb	r1, r1
    71fa:	191c      	adds	r4, r3, r4
    71fc:	7019      	strb	r1, [r3, #0]
    71fe:	3301      	adds	r3, #1
    7200:	429c      	cmp	r4, r3
    7202:	d1fb      	bne.n	71fc <memset+0x84>
    7204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7206:	0014      	movs	r4, r2
    7208:	0003      	movs	r3, r0
    720a:	e7c6      	b.n	719a <memset+0x22>

0000720c <__malloc_lock>:
    720c:	4770      	bx	lr
    720e:	46c0      	nop			; (mov r8, r8)

00007210 <__malloc_unlock>:
    7210:	4770      	bx	lr
    7212:	46c0      	nop			; (mov r8, r8)

00007214 <printf>:
    7214:	b40f      	push	{r0, r1, r2, r3}
    7216:	b500      	push	{lr}
    7218:	4906      	ldr	r1, [pc, #24]	; (7234 <printf+0x20>)
    721a:	b083      	sub	sp, #12
    721c:	ab04      	add	r3, sp, #16
    721e:	6808      	ldr	r0, [r1, #0]
    7220:	cb04      	ldmia	r3!, {r2}
    7222:	6881      	ldr	r1, [r0, #8]
    7224:	9301      	str	r3, [sp, #4]
    7226:	f000 f909 	bl	743c <_vfprintf_r>
    722a:	b003      	add	sp, #12
    722c:	bc08      	pop	{r3}
    722e:	b004      	add	sp, #16
    7230:	4718      	bx	r3
    7232:	46c0      	nop			; (mov r8, r8)
    7234:	20000118 	.word	0x20000118

00007238 <_sbrk_r>:
    7238:	2300      	movs	r3, #0
    723a:	b570      	push	{r4, r5, r6, lr}
    723c:	4c06      	ldr	r4, [pc, #24]	; (7258 <_sbrk_r+0x20>)
    723e:	0005      	movs	r5, r0
    7240:	0008      	movs	r0, r1
    7242:	6023      	str	r3, [r4, #0]
    7244:	f7ff fa00 	bl	6648 <_sbrk>
    7248:	1c43      	adds	r3, r0, #1
    724a:	d000      	beq.n	724e <_sbrk_r+0x16>
    724c:	bd70      	pop	{r4, r5, r6, pc}
    724e:	6823      	ldr	r3, [r4, #0]
    7250:	2b00      	cmp	r3, #0
    7252:	d0fb      	beq.n	724c <_sbrk_r+0x14>
    7254:	602b      	str	r3, [r5, #0]
    7256:	e7f9      	b.n	724c <_sbrk_r+0x14>
    7258:	200034d0 	.word	0x200034d0

0000725c <setbuf>:
    725c:	424a      	negs	r2, r1
    725e:	414a      	adcs	r2, r1
    7260:	2380      	movs	r3, #128	; 0x80
    7262:	b510      	push	{r4, lr}
    7264:	0052      	lsls	r2, r2, #1
    7266:	00db      	lsls	r3, r3, #3
    7268:	f000 f802 	bl	7270 <setvbuf>
    726c:	bd10      	pop	{r4, pc}
    726e:	46c0      	nop			; (mov r8, r8)

00007270 <setvbuf>:
    7270:	b5f0      	push	{r4, r5, r6, r7, lr}
    7272:	4647      	mov	r7, r8
    7274:	46ce      	mov	lr, r9
    7276:	b580      	push	{r7, lr}
    7278:	001e      	movs	r6, r3
    727a:	4b55      	ldr	r3, [pc, #340]	; (73d0 <setvbuf+0x160>)
    727c:	b083      	sub	sp, #12
    727e:	681d      	ldr	r5, [r3, #0]
    7280:	0004      	movs	r4, r0
    7282:	4688      	mov	r8, r1
    7284:	0017      	movs	r7, r2
    7286:	2d00      	cmp	r5, #0
    7288:	d003      	beq.n	7292 <setvbuf+0x22>
    728a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    728c:	2b00      	cmp	r3, #0
    728e:	d100      	bne.n	7292 <setvbuf+0x22>
    7290:	e076      	b.n	7380 <setvbuf+0x110>
    7292:	2f02      	cmp	r7, #2
    7294:	d005      	beq.n	72a2 <setvbuf+0x32>
    7296:	2f01      	cmp	r7, #1
    7298:	d900      	bls.n	729c <setvbuf+0x2c>
    729a:	e086      	b.n	73aa <setvbuf+0x13a>
    729c:	2e00      	cmp	r6, #0
    729e:	da00      	bge.n	72a2 <setvbuf+0x32>
    72a0:	e083      	b.n	73aa <setvbuf+0x13a>
    72a2:	0021      	movs	r1, r4
    72a4:	0028      	movs	r0, r5
    72a6:	f002 fdb1 	bl	9e0c <_fflush_r>
    72aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    72ac:	2900      	cmp	r1, #0
    72ae:	d008      	beq.n	72c2 <setvbuf+0x52>
    72b0:	0023      	movs	r3, r4
    72b2:	3340      	adds	r3, #64	; 0x40
    72b4:	4299      	cmp	r1, r3
    72b6:	d002      	beq.n	72be <setvbuf+0x4e>
    72b8:	0028      	movs	r0, r5
    72ba:	f002 feb3 	bl	a024 <_free_r>
    72be:	2300      	movs	r3, #0
    72c0:	6323      	str	r3, [r4, #48]	; 0x30
    72c2:	2300      	movs	r3, #0
    72c4:	61a3      	str	r3, [r4, #24]
    72c6:	6063      	str	r3, [r4, #4]
    72c8:	220c      	movs	r2, #12
    72ca:	5ea3      	ldrsh	r3, [r4, r2]
    72cc:	061a      	lsls	r2, r3, #24
    72ce:	d450      	bmi.n	7372 <setvbuf+0x102>
    72d0:	4a40      	ldr	r2, [pc, #256]	; (73d4 <setvbuf+0x164>)
    72d2:	4013      	ands	r3, r2
    72d4:	81a3      	strh	r3, [r4, #12]
    72d6:	2f02      	cmp	r7, #2
    72d8:	d037      	beq.n	734a <setvbuf+0xda>
    72da:	ab01      	add	r3, sp, #4
    72dc:	466a      	mov	r2, sp
    72de:	0021      	movs	r1, r4
    72e0:	0028      	movs	r0, r5
    72e2:	f003 f943 	bl	a56c <__swhatbuf_r>
    72e6:	89a3      	ldrh	r3, [r4, #12]
    72e8:	4318      	orrs	r0, r3
    72ea:	81a0      	strh	r0, [r4, #12]
    72ec:	2e00      	cmp	r6, #0
    72ee:	d020      	beq.n	7332 <setvbuf+0xc2>
    72f0:	4643      	mov	r3, r8
    72f2:	2b00      	cmp	r3, #0
    72f4:	d01e      	beq.n	7334 <setvbuf+0xc4>
    72f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
    72f8:	2b00      	cmp	r3, #0
    72fa:	d048      	beq.n	738e <setvbuf+0x11e>
    72fc:	9b00      	ldr	r3, [sp, #0]
    72fe:	429e      	cmp	r6, r3
    7300:	d04b      	beq.n	739a <setvbuf+0x12a>
    7302:	2380      	movs	r3, #128	; 0x80
    7304:	89a2      	ldrh	r2, [r4, #12]
    7306:	011b      	lsls	r3, r3, #4
    7308:	4313      	orrs	r3, r2
    730a:	b21b      	sxth	r3, r3
    730c:	81a3      	strh	r3, [r4, #12]
    730e:	2f01      	cmp	r7, #1
    7310:	d047      	beq.n	73a2 <setvbuf+0x132>
    7312:	4642      	mov	r2, r8
    7314:	6022      	str	r2, [r4, #0]
    7316:	6122      	str	r2, [r4, #16]
    7318:	2208      	movs	r2, #8
    731a:	b29b      	uxth	r3, r3
    731c:	6166      	str	r6, [r4, #20]
    731e:	401a      	ands	r2, r3
    7320:	d024      	beq.n	736c <setvbuf+0xfc>
    7322:	07db      	lsls	r3, r3, #31
    7324:	d530      	bpl.n	7388 <setvbuf+0x118>
    7326:	2300      	movs	r3, #0
    7328:	4276      	negs	r6, r6
    732a:	60a3      	str	r3, [r4, #8]
    732c:	61a6      	str	r6, [r4, #24]
    732e:	2000      	movs	r0, #0
    7330:	e017      	b.n	7362 <setvbuf+0xf2>
    7332:	9e00      	ldr	r6, [sp, #0]
    7334:	0030      	movs	r0, r6
    7336:	f7ff fbcf 	bl	6ad8 <malloc>
    733a:	4680      	mov	r8, r0
    733c:	2800      	cmp	r0, #0
    733e:	d037      	beq.n	73b0 <setvbuf+0x140>
    7340:	2280      	movs	r2, #128	; 0x80
    7342:	89a3      	ldrh	r3, [r4, #12]
    7344:	4313      	orrs	r3, r2
    7346:	81a3      	strh	r3, [r4, #12]
    7348:	e7d5      	b.n	72f6 <setvbuf+0x86>
    734a:	2000      	movs	r0, #0
    734c:	2202      	movs	r2, #2
    734e:	4313      	orrs	r3, r2
    7350:	81a3      	strh	r3, [r4, #12]
    7352:	2300      	movs	r3, #0
    7354:	60a3      	str	r3, [r4, #8]
    7356:	0023      	movs	r3, r4
    7358:	3343      	adds	r3, #67	; 0x43
    735a:	6023      	str	r3, [r4, #0]
    735c:	6123      	str	r3, [r4, #16]
    735e:	2301      	movs	r3, #1
    7360:	6163      	str	r3, [r4, #20]
    7362:	b003      	add	sp, #12
    7364:	bc0c      	pop	{r2, r3}
    7366:	4690      	mov	r8, r2
    7368:	4699      	mov	r9, r3
    736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    736c:	60a2      	str	r2, [r4, #8]
    736e:	2000      	movs	r0, #0
    7370:	e7f7      	b.n	7362 <setvbuf+0xf2>
    7372:	6921      	ldr	r1, [r4, #16]
    7374:	0028      	movs	r0, r5
    7376:	f002 fe55 	bl	a024 <_free_r>
    737a:	220c      	movs	r2, #12
    737c:	5ea3      	ldrsh	r3, [r4, r2]
    737e:	e7a7      	b.n	72d0 <setvbuf+0x60>
    7380:	0028      	movs	r0, r5
    7382:	f002 fdd9 	bl	9f38 <__sinit>
    7386:	e784      	b.n	7292 <setvbuf+0x22>
    7388:	60a6      	str	r6, [r4, #8]
    738a:	2000      	movs	r0, #0
    738c:	e7e9      	b.n	7362 <setvbuf+0xf2>
    738e:	0028      	movs	r0, r5
    7390:	f002 fdd2 	bl	9f38 <__sinit>
    7394:	9b00      	ldr	r3, [sp, #0]
    7396:	429e      	cmp	r6, r3
    7398:	d1b3      	bne.n	7302 <setvbuf+0x92>
    739a:	220c      	movs	r2, #12
    739c:	5ea3      	ldrsh	r3, [r4, r2]
    739e:	2f01      	cmp	r7, #1
    73a0:	d1b7      	bne.n	7312 <setvbuf+0xa2>
    73a2:	2201      	movs	r2, #1
    73a4:	4313      	orrs	r3, r2
    73a6:	81a3      	strh	r3, [r4, #12]
    73a8:	e7b3      	b.n	7312 <setvbuf+0xa2>
    73aa:	2001      	movs	r0, #1
    73ac:	4240      	negs	r0, r0
    73ae:	e7d8      	b.n	7362 <setvbuf+0xf2>
    73b0:	9b00      	ldr	r3, [sp, #0]
    73b2:	4699      	mov	r9, r3
    73b4:	42b3      	cmp	r3, r6
    73b6:	d006      	beq.n	73c6 <setvbuf+0x156>
    73b8:	0018      	movs	r0, r3
    73ba:	f7ff fb8d 	bl	6ad8 <malloc>
    73be:	464e      	mov	r6, r9
    73c0:	4680      	mov	r8, r0
    73c2:	2800      	cmp	r0, #0
    73c4:	d1bc      	bne.n	7340 <setvbuf+0xd0>
    73c6:	2001      	movs	r0, #1
    73c8:	220c      	movs	r2, #12
    73ca:	5ea3      	ldrsh	r3, [r4, r2]
    73cc:	4240      	negs	r0, r0
    73ce:	e7bd      	b.n	734c <setvbuf+0xdc>
    73d0:	20000118 	.word	0x20000118
    73d4:	fffff35c 	.word	0xfffff35c

000073d8 <strlen>:
    73d8:	b510      	push	{r4, lr}
    73da:	0783      	lsls	r3, r0, #30
    73dc:	d025      	beq.n	742a <strlen+0x52>
    73de:	7803      	ldrb	r3, [r0, #0]
    73e0:	2b00      	cmp	r3, #0
    73e2:	d024      	beq.n	742e <strlen+0x56>
    73e4:	0003      	movs	r3, r0
    73e6:	2103      	movs	r1, #3
    73e8:	e002      	b.n	73f0 <strlen+0x18>
    73ea:	781a      	ldrb	r2, [r3, #0]
    73ec:	2a00      	cmp	r2, #0
    73ee:	d01a      	beq.n	7426 <strlen+0x4e>
    73f0:	3301      	adds	r3, #1
    73f2:	420b      	tst	r3, r1
    73f4:	d1f9      	bne.n	73ea <strlen+0x12>
    73f6:	6819      	ldr	r1, [r3, #0]
    73f8:	4a0e      	ldr	r2, [pc, #56]	; (7434 <strlen+0x5c>)
    73fa:	4c0f      	ldr	r4, [pc, #60]	; (7438 <strlen+0x60>)
    73fc:	188a      	adds	r2, r1, r2
    73fe:	438a      	bics	r2, r1
    7400:	4222      	tst	r2, r4
    7402:	d106      	bne.n	7412 <strlen+0x3a>
    7404:	3304      	adds	r3, #4
    7406:	6819      	ldr	r1, [r3, #0]
    7408:	4a0a      	ldr	r2, [pc, #40]	; (7434 <strlen+0x5c>)
    740a:	188a      	adds	r2, r1, r2
    740c:	438a      	bics	r2, r1
    740e:	4222      	tst	r2, r4
    7410:	d0f8      	beq.n	7404 <strlen+0x2c>
    7412:	001a      	movs	r2, r3
    7414:	781b      	ldrb	r3, [r3, #0]
    7416:	2b00      	cmp	r3, #0
    7418:	d003      	beq.n	7422 <strlen+0x4a>
    741a:	3201      	adds	r2, #1
    741c:	7811      	ldrb	r1, [r2, #0]
    741e:	2900      	cmp	r1, #0
    7420:	d1fb      	bne.n	741a <strlen+0x42>
    7422:	1a10      	subs	r0, r2, r0
    7424:	bd10      	pop	{r4, pc}
    7426:	1a18      	subs	r0, r3, r0
    7428:	e7fc      	b.n	7424 <strlen+0x4c>
    742a:	0003      	movs	r3, r0
    742c:	e7e3      	b.n	73f6 <strlen+0x1e>
    742e:	2000      	movs	r0, #0
    7430:	e7f8      	b.n	7424 <strlen+0x4c>
    7432:	46c0      	nop			; (mov r8, r8)
    7434:	fefefeff 	.word	0xfefefeff
    7438:	80808080 	.word	0x80808080

0000743c <_vfprintf_r>:
    743c:	b5f0      	push	{r4, r5, r6, r7, lr}
    743e:	46de      	mov	lr, fp
    7440:	464e      	mov	r6, r9
    7442:	4645      	mov	r5, r8
    7444:	4657      	mov	r7, sl
    7446:	b5e0      	push	{r5, r6, r7, lr}
    7448:	b0c3      	sub	sp, #268	; 0x10c
    744a:	4689      	mov	r9, r1
    744c:	0014      	movs	r4, r2
    744e:	001d      	movs	r5, r3
    7450:	930f      	str	r3, [sp, #60]	; 0x3c
    7452:	0006      	movs	r6, r0
    7454:	9006      	str	r0, [sp, #24]
    7456:	f003 f87b 	bl	a550 <_localeconv_r>
    745a:	6803      	ldr	r3, [r0, #0]
    745c:	0018      	movs	r0, r3
    745e:	9319      	str	r3, [sp, #100]	; 0x64
    7460:	f7ff ffba 	bl	73d8 <strlen>
    7464:	9017      	str	r0, [sp, #92]	; 0x5c
    7466:	2e00      	cmp	r6, #0
    7468:	d004      	beq.n	7474 <_vfprintf_r+0x38>
    746a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    746c:	9307      	str	r3, [sp, #28]
    746e:	2b00      	cmp	r3, #0
    7470:	d100      	bne.n	7474 <_vfprintf_r+0x38>
    7472:	e0a5      	b.n	75c0 <_vfprintf_r+0x184>
    7474:	464b      	mov	r3, r9
    7476:	2280      	movs	r2, #128	; 0x80
    7478:	210c      	movs	r1, #12
    747a:	5e59      	ldrsh	r1, [r3, r1]
    747c:	0192      	lsls	r2, r2, #6
    747e:	b28b      	uxth	r3, r1
    7480:	4213      	tst	r3, r2
    7482:	d109      	bne.n	7498 <_vfprintf_r+0x5c>
    7484:	430a      	orrs	r2, r1
    7486:	464b      	mov	r3, r9
    7488:	4649      	mov	r1, r9
    748a:	819a      	strh	r2, [r3, #12]
    748c:	6e49      	ldr	r1, [r1, #100]	; 0x64
    748e:	4bba      	ldr	r3, [pc, #744]	; (7778 <_vfprintf_r+0x33c>)
    7490:	400b      	ands	r3, r1
    7492:	4649      	mov	r1, r9
    7494:	664b      	str	r3, [r1, #100]	; 0x64
    7496:	b293      	uxth	r3, r2
    7498:	071a      	lsls	r2, r3, #28
    749a:	d564      	bpl.n	7566 <_vfprintf_r+0x12a>
    749c:	464a      	mov	r2, r9
    749e:	6912      	ldr	r2, [r2, #16]
    74a0:	2a00      	cmp	r2, #0
    74a2:	d060      	beq.n	7566 <_vfprintf_r+0x12a>
    74a4:	221a      	movs	r2, #26
    74a6:	4013      	ands	r3, r2
    74a8:	2b0a      	cmp	r3, #10
    74aa:	d06a      	beq.n	7582 <_vfprintf_r+0x146>
    74ac:	ab32      	add	r3, sp, #200	; 0xc8
    74ae:	9325      	str	r3, [sp, #148]	; 0x94
    74b0:	2300      	movs	r3, #0
    74b2:	46cb      	mov	fp, r9
    74b4:	af25      	add	r7, sp, #148	; 0x94
    74b6:	60bb      	str	r3, [r7, #8]
    74b8:	607b      	str	r3, [r7, #4]
    74ba:	9407      	str	r4, [sp, #28]
    74bc:	9314      	str	r3, [sp, #80]	; 0x50
    74be:	9315      	str	r3, [sp, #84]	; 0x54
    74c0:	9316      	str	r3, [sp, #88]	; 0x58
    74c2:	ae32      	add	r6, sp, #200	; 0xc8
    74c4:	9318      	str	r3, [sp, #96]	; 0x60
    74c6:	931a      	str	r3, [sp, #104]	; 0x68
    74c8:	930a      	str	r3, [sp, #40]	; 0x28
    74ca:	9c07      	ldr	r4, [sp, #28]
    74cc:	7823      	ldrb	r3, [r4, #0]
    74ce:	2b00      	cmp	r3, #0
    74d0:	d100      	bne.n	74d4 <_vfprintf_r+0x98>
    74d2:	e079      	b.n	75c8 <_vfprintf_r+0x18c>
    74d4:	2b25      	cmp	r3, #37	; 0x25
    74d6:	d102      	bne.n	74de <_vfprintf_r+0xa2>
    74d8:	e076      	b.n	75c8 <_vfprintf_r+0x18c>
    74da:	2b25      	cmp	r3, #37	; 0x25
    74dc:	d003      	beq.n	74e6 <_vfprintf_r+0xaa>
    74de:	3401      	adds	r4, #1
    74e0:	7823      	ldrb	r3, [r4, #0]
    74e2:	2b00      	cmp	r3, #0
    74e4:	d1f9      	bne.n	74da <_vfprintf_r+0x9e>
    74e6:	9b07      	ldr	r3, [sp, #28]
    74e8:	1ae5      	subs	r5, r4, r3
    74ea:	d010      	beq.n	750e <_vfprintf_r+0xd2>
    74ec:	9b07      	ldr	r3, [sp, #28]
    74ee:	6075      	str	r5, [r6, #4]
    74f0:	6033      	str	r3, [r6, #0]
    74f2:	68bb      	ldr	r3, [r7, #8]
    74f4:	195b      	adds	r3, r3, r5
    74f6:	60bb      	str	r3, [r7, #8]
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	3301      	adds	r3, #1
    74fc:	607b      	str	r3, [r7, #4]
    74fe:	2b07      	cmp	r3, #7
    7500:	dc53      	bgt.n	75aa <_vfprintf_r+0x16e>
    7502:	3608      	adds	r6, #8
    7504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7506:	469c      	mov	ip, r3
    7508:	44ac      	add	ip, r5
    750a:	4663      	mov	r3, ip
    750c:	930a      	str	r3, [sp, #40]	; 0x28
    750e:	7823      	ldrb	r3, [r4, #0]
    7510:	2b00      	cmp	r3, #0
    7512:	d101      	bne.n	7518 <_vfprintf_r+0xdc>
    7514:	f001 f809 	bl	852a <_vfprintf_r+0x10ee>
    7518:	1c63      	adds	r3, r4, #1
    751a:	9307      	str	r3, [sp, #28]
    751c:	2300      	movs	r3, #0
    751e:	aa16      	add	r2, sp, #88	; 0x58
    7520:	77d3      	strb	r3, [r2, #31]
    7522:	2201      	movs	r2, #1
    7524:	4252      	negs	r2, r2
    7526:	4692      	mov	sl, r2
    7528:	2200      	movs	r2, #0
    752a:	920b      	str	r2, [sp, #44]	; 0x2c
    752c:	3220      	adds	r2, #32
    752e:	4691      	mov	r9, r2
    7530:	3220      	adds	r2, #32
    7532:	7863      	ldrb	r3, [r4, #1]
    7534:	2100      	movs	r1, #0
    7536:	2000      	movs	r0, #0
    7538:	2400      	movs	r4, #0
    753a:	4694      	mov	ip, r2
    753c:	9a07      	ldr	r2, [sp, #28]
    753e:	3201      	adds	r2, #1
    7540:	9207      	str	r2, [sp, #28]
    7542:	001a      	movs	r2, r3
    7544:	3a20      	subs	r2, #32
    7546:	2a58      	cmp	r2, #88	; 0x58
    7548:	d900      	bls.n	754c <_vfprintf_r+0x110>
    754a:	e2c9      	b.n	7ae0 <_vfprintf_r+0x6a4>
    754c:	4d8b      	ldr	r5, [pc, #556]	; (777c <_vfprintf_r+0x340>)
    754e:	0092      	lsls	r2, r2, #2
    7550:	58aa      	ldr	r2, [r5, r2]
    7552:	4697      	mov	pc, r2
    7554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7556:	920f      	str	r2, [sp, #60]	; 0x3c
    7558:	425b      	negs	r3, r3
    755a:	930b      	str	r3, [sp, #44]	; 0x2c
    755c:	2304      	movs	r3, #4
    755e:	431c      	orrs	r4, r3
    7560:	9b07      	ldr	r3, [sp, #28]
    7562:	781b      	ldrb	r3, [r3, #0]
    7564:	e7ea      	b.n	753c <_vfprintf_r+0x100>
    7566:	4649      	mov	r1, r9
    7568:	9806      	ldr	r0, [sp, #24]
    756a:	f001 fabb 	bl	8ae4 <__swsetup_r>
    756e:	2800      	cmp	r0, #0
    7570:	d001      	beq.n	7576 <_vfprintf_r+0x13a>
    7572:	f000 fc54 	bl	7e1e <_vfprintf_r+0x9e2>
    7576:	464b      	mov	r3, r9
    7578:	221a      	movs	r2, #26
    757a:	899b      	ldrh	r3, [r3, #12]
    757c:	4013      	ands	r3, r2
    757e:	2b0a      	cmp	r3, #10
    7580:	d194      	bne.n	74ac <_vfprintf_r+0x70>
    7582:	464b      	mov	r3, r9
    7584:	220e      	movs	r2, #14
    7586:	5e9b      	ldrsh	r3, [r3, r2]
    7588:	2b00      	cmp	r3, #0
    758a:	db8f      	blt.n	74ac <_vfprintf_r+0x70>
    758c:	002b      	movs	r3, r5
    758e:	0022      	movs	r2, r4
    7590:	4649      	mov	r1, r9
    7592:	9806      	ldr	r0, [sp, #24]
    7594:	f001 fa60 	bl	8a58 <__sbprintf>
    7598:	900a      	str	r0, [sp, #40]	; 0x28
    759a:	980a      	ldr	r0, [sp, #40]	; 0x28
    759c:	b043      	add	sp, #268	; 0x10c
    759e:	bc3c      	pop	{r2, r3, r4, r5}
    75a0:	4690      	mov	r8, r2
    75a2:	4699      	mov	r9, r3
    75a4:	46a2      	mov	sl, r4
    75a6:	46ab      	mov	fp, r5
    75a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75aa:	003a      	movs	r2, r7
    75ac:	4659      	mov	r1, fp
    75ae:	9806      	ldr	r0, [sp, #24]
    75b0:	f003 fe3c 	bl	b22c <__sprint_r>
    75b4:	2800      	cmp	r0, #0
    75b6:	d001      	beq.n	75bc <_vfprintf_r+0x180>
    75b8:	f000 fc5b 	bl	7e72 <_vfprintf_r+0xa36>
    75bc:	ae32      	add	r6, sp, #200	; 0xc8
    75be:	e7a1      	b.n	7504 <_vfprintf_r+0xc8>
    75c0:	9806      	ldr	r0, [sp, #24]
    75c2:	f002 fcb9 	bl	9f38 <__sinit>
    75c6:	e755      	b.n	7474 <_vfprintf_r+0x38>
    75c8:	9c07      	ldr	r4, [sp, #28]
    75ca:	e7a0      	b.n	750e <_vfprintf_r+0xd2>
    75cc:	9b07      	ldr	r3, [sp, #28]
    75ce:	2101      	movs	r1, #1
    75d0:	781b      	ldrb	r3, [r3, #0]
    75d2:	202b      	movs	r0, #43	; 0x2b
    75d4:	e7b2      	b.n	753c <_vfprintf_r+0x100>
    75d6:	9b07      	ldr	r3, [sp, #28]
    75d8:	1c5a      	adds	r2, r3, #1
    75da:	781b      	ldrb	r3, [r3, #0]
    75dc:	4690      	mov	r8, r2
    75de:	2b2a      	cmp	r3, #42	; 0x2a
    75e0:	d101      	bne.n	75e6 <_vfprintf_r+0x1aa>
    75e2:	f001 f9f5 	bl	89d0 <_vfprintf_r+0x1594>
    75e6:	001a      	movs	r2, r3
    75e8:	2500      	movs	r5, #0
    75ea:	3a30      	subs	r2, #48	; 0x30
    75ec:	46aa      	mov	sl, r5
    75ee:	2a09      	cmp	r2, #9
    75f0:	d901      	bls.n	75f6 <_vfprintf_r+0x1ba>
    75f2:	f001 f97e 	bl	88f2 <_vfprintf_r+0x14b6>
    75f6:	0025      	movs	r5, r4
    75f8:	4653      	mov	r3, sl
    75fa:	4644      	mov	r4, r8
    75fc:	468a      	mov	sl, r1
    75fe:	4680      	mov	r8, r0
    7600:	0099      	lsls	r1, r3, #2
    7602:	18cb      	adds	r3, r1, r3
    7604:	7820      	ldrb	r0, [r4, #0]
    7606:	005b      	lsls	r3, r3, #1
    7608:	189b      	adds	r3, r3, r2
    760a:	0002      	movs	r2, r0
    760c:	1c61      	adds	r1, r4, #1
    760e:	3a30      	subs	r2, #48	; 0x30
    7610:	000c      	movs	r4, r1
    7612:	2a09      	cmp	r2, #9
    7614:	d9f4      	bls.n	7600 <_vfprintf_r+0x1c4>
    7616:	9107      	str	r1, [sp, #28]
    7618:	002c      	movs	r4, r5
    761a:	4651      	mov	r1, sl
    761c:	469a      	mov	sl, r3
    761e:	0003      	movs	r3, r0
    7620:	4640      	mov	r0, r8
    7622:	e78e      	b.n	7542 <_vfprintf_r+0x106>
    7624:	2380      	movs	r3, #128	; 0x80
    7626:	431c      	orrs	r4, r3
    7628:	9b07      	ldr	r3, [sp, #28]
    762a:	781b      	ldrb	r3, [r3, #0]
    762c:	e786      	b.n	753c <_vfprintf_r+0x100>
    762e:	9312      	str	r3, [sp, #72]	; 0x48
    7630:	2900      	cmp	r1, #0
    7632:	d001      	beq.n	7638 <_vfprintf_r+0x1fc>
    7634:	f001 f9f6 	bl	8a24 <_vfprintf_r+0x15e8>
    7638:	2310      	movs	r3, #16
    763a:	431c      	orrs	r4, r3
    763c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    763e:	06a3      	lsls	r3, r4, #26
    7640:	d501      	bpl.n	7646 <_vfprintf_r+0x20a>
    7642:	f000 fe5f 	bl	8304 <_vfprintf_r+0xec8>
    7646:	06e3      	lsls	r3, r4, #27
    7648:	d501      	bpl.n	764e <_vfprintf_r+0x212>
    764a:	f000 fd38 	bl	80be <_vfprintf_r+0xc82>
    764e:	0663      	lsls	r3, r4, #25
    7650:	d401      	bmi.n	7656 <_vfprintf_r+0x21a>
    7652:	f000 fd34 	bl	80be <_vfprintf_r+0xc82>
    7656:	2100      	movs	r1, #0
    7658:	5e53      	ldrsh	r3, [r2, r1]
    765a:	930c      	str	r3, [sp, #48]	; 0x30
    765c:	3204      	adds	r2, #4
    765e:	17db      	asrs	r3, r3, #31
    7660:	930d      	str	r3, [sp, #52]	; 0x34
    7662:	920f      	str	r2, [sp, #60]	; 0x3c
    7664:	2b00      	cmp	r3, #0
    7666:	da01      	bge.n	766c <_vfprintf_r+0x230>
    7668:	f000 fe7b 	bl	8362 <_vfprintf_r+0xf26>
    766c:	990c      	ldr	r1, [sp, #48]	; 0x30
    766e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7670:	0008      	movs	r0, r1
    7672:	ab16      	add	r3, sp, #88	; 0x58
    7674:	7fdb      	ldrb	r3, [r3, #31]
    7676:	4310      	orrs	r0, r2
    7678:	4698      	mov	r8, r3
    767a:	0002      	movs	r2, r0
    767c:	2301      	movs	r3, #1
    767e:	4651      	mov	r1, sl
    7680:	3101      	adds	r1, #1
    7682:	d100      	bne.n	7686 <_vfprintf_r+0x24a>
    7684:	e122      	b.n	78cc <_vfprintf_r+0x490>
    7686:	2180      	movs	r1, #128	; 0x80
    7688:	0020      	movs	r0, r4
    768a:	4388      	bics	r0, r1
    768c:	9009      	str	r0, [sp, #36]	; 0x24
    768e:	2a00      	cmp	r2, #0
    7690:	d000      	beq.n	7694 <_vfprintf_r+0x258>
    7692:	e11f      	b.n	78d4 <_vfprintf_r+0x498>
    7694:	4652      	mov	r2, sl
    7696:	2a00      	cmp	r2, #0
    7698:	d000      	beq.n	769c <_vfprintf_r+0x260>
    769a:	e3ec      	b.n	7e76 <_vfprintf_r+0xa3a>
    769c:	2b00      	cmp	r3, #0
    769e:	d001      	beq.n	76a4 <_vfprintf_r+0x268>
    76a0:	f000 fcbe 	bl	8020 <_vfprintf_r+0xbe4>
    76a4:	2001      	movs	r0, #1
    76a6:	ab32      	add	r3, sp, #200	; 0xc8
    76a8:	4020      	ands	r0, r4
    76aa:	900e      	str	r0, [sp, #56]	; 0x38
    76ac:	9311      	str	r3, [sp, #68]	; 0x44
    76ae:	d008      	beq.n	76c2 <_vfprintf_r+0x286>
    76b0:	2327      	movs	r3, #39	; 0x27
    76b2:	2130      	movs	r1, #48	; 0x30
    76b4:	aa28      	add	r2, sp, #160	; 0xa0
    76b6:	54d1      	strb	r1, [r2, r3]
    76b8:	aa16      	add	r2, sp, #88	; 0x58
    76ba:	4694      	mov	ip, r2
    76bc:	3348      	adds	r3, #72	; 0x48
    76be:	4463      	add	r3, ip
    76c0:	9311      	str	r3, [sp, #68]	; 0x44
    76c2:	4653      	mov	r3, sl
    76c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    76c6:	9308      	str	r3, [sp, #32]
    76c8:	4592      	cmp	sl, r2
    76ca:	da00      	bge.n	76ce <_vfprintf_r+0x292>
    76cc:	9208      	str	r2, [sp, #32]
    76ce:	2300      	movs	r3, #0
    76d0:	9313      	str	r3, [sp, #76]	; 0x4c
    76d2:	4643      	mov	r3, r8
    76d4:	2b00      	cmp	r3, #0
    76d6:	d002      	beq.n	76de <_vfprintf_r+0x2a2>
    76d8:	9b08      	ldr	r3, [sp, #32]
    76da:	3301      	adds	r3, #1
    76dc:	9308      	str	r3, [sp, #32]
    76de:	2302      	movs	r3, #2
    76e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    76e2:	401a      	ands	r2, r3
    76e4:	4691      	mov	r9, r2
    76e6:	d002      	beq.n	76ee <_vfprintf_r+0x2b2>
    76e8:	9b08      	ldr	r3, [sp, #32]
    76ea:	3302      	adds	r3, #2
    76ec:	9308      	str	r3, [sp, #32]
    76ee:	2384      	movs	r3, #132	; 0x84
    76f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    76f2:	401a      	ands	r2, r3
    76f4:	9210      	str	r2, [sp, #64]	; 0x40
    76f6:	d000      	beq.n	76fa <_vfprintf_r+0x2be>
    76f8:	e214      	b.n	7b24 <_vfprintf_r+0x6e8>
    76fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    76fc:	9a08      	ldr	r2, [sp, #32]
    76fe:	1a9c      	subs	r4, r3, r2
    7700:	2c00      	cmp	r4, #0
    7702:	dc00      	bgt.n	7706 <_vfprintf_r+0x2ca>
    7704:	e20e      	b.n	7b24 <_vfprintf_r+0x6e8>
    7706:	491e      	ldr	r1, [pc, #120]	; (7780 <_vfprintf_r+0x344>)
    7708:	68ba      	ldr	r2, [r7, #8]
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	4688      	mov	r8, r1
    770e:	2c10      	cmp	r4, #16
    7710:	dd21      	ble.n	7756 <_vfprintf_r+0x31a>
    7712:	0031      	movs	r1, r6
    7714:	2510      	movs	r5, #16
    7716:	465e      	mov	r6, fp
    7718:	e003      	b.n	7722 <_vfprintf_r+0x2e6>
    771a:	3c10      	subs	r4, #16
    771c:	3108      	adds	r1, #8
    771e:	2c10      	cmp	r4, #16
    7720:	dd17      	ble.n	7752 <_vfprintf_r+0x316>
    7722:	4640      	mov	r0, r8
    7724:	3210      	adds	r2, #16
    7726:	3301      	adds	r3, #1
    7728:	6008      	str	r0, [r1, #0]
    772a:	604d      	str	r5, [r1, #4]
    772c:	60ba      	str	r2, [r7, #8]
    772e:	607b      	str	r3, [r7, #4]
    7730:	2b07      	cmp	r3, #7
    7732:	ddf2      	ble.n	771a <_vfprintf_r+0x2de>
    7734:	003a      	movs	r2, r7
    7736:	0031      	movs	r1, r6
    7738:	9806      	ldr	r0, [sp, #24]
    773a:	f003 fd77 	bl	b22c <__sprint_r>
    773e:	2800      	cmp	r0, #0
    7740:	d001      	beq.n	7746 <_vfprintf_r+0x30a>
    7742:	f000 fc81 	bl	8048 <_vfprintf_r+0xc0c>
    7746:	3c10      	subs	r4, #16
    7748:	68ba      	ldr	r2, [r7, #8]
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	a932      	add	r1, sp, #200	; 0xc8
    774e:	2c10      	cmp	r4, #16
    7750:	dce7      	bgt.n	7722 <_vfprintf_r+0x2e6>
    7752:	46b3      	mov	fp, r6
    7754:	000e      	movs	r6, r1
    7756:	4641      	mov	r1, r8
    7758:	6074      	str	r4, [r6, #4]
    775a:	3301      	adds	r3, #1
    775c:	18a4      	adds	r4, r4, r2
    775e:	6031      	str	r1, [r6, #0]
    7760:	60bc      	str	r4, [r7, #8]
    7762:	607b      	str	r3, [r7, #4]
    7764:	2b07      	cmp	r3, #7
    7766:	dd01      	ble.n	776c <_vfprintf_r+0x330>
    7768:	f000 fc60 	bl	802c <_vfprintf_r+0xbf0>
    776c:	ab16      	add	r3, sp, #88	; 0x58
    776e:	7fdb      	ldrb	r3, [r3, #31]
    7770:	3608      	adds	r6, #8
    7772:	4698      	mov	r8, r3
    7774:	e1d7      	b.n	7b26 <_vfprintf_r+0x6ea>
    7776:	46c0      	nop			; (mov r8, r8)
    7778:	ffffdfff 	.word	0xffffdfff
    777c:	0000d658 	.word	0x0000d658
    7780:	0000d800 	.word	0x0000d800
    7784:	9312      	str	r3, [sp, #72]	; 0x48
    7786:	2900      	cmp	r1, #0
    7788:	d001      	beq.n	778e <_vfprintf_r+0x352>
    778a:	f001 f947 	bl	8a1c <_vfprintf_r+0x15e0>
    778e:	2207      	movs	r2, #7
    7790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7792:	3307      	adds	r3, #7
    7794:	4393      	bics	r3, r2
    7796:	3201      	adds	r2, #1
    7798:	4694      	mov	ip, r2
    779a:	449c      	add	ip, r3
    779c:	4662      	mov	r2, ip
    779e:	920f      	str	r2, [sp, #60]	; 0x3c
    77a0:	681a      	ldr	r2, [r3, #0]
    77a2:	9215      	str	r2, [sp, #84]	; 0x54
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	2201      	movs	r2, #1
    77a8:	9316      	str	r3, [sp, #88]	; 0x58
    77aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    77ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
    77ae:	005b      	lsls	r3, r3, #1
    77b0:	085b      	lsrs	r3, r3, #1
    77b2:	4698      	mov	r8, r3
    77b4:	4252      	negs	r2, r2
    77b6:	4bd7      	ldr	r3, [pc, #860]	; (7b14 <_vfprintf_r+0x6d8>)
    77b8:	0028      	movs	r0, r5
    77ba:	4641      	mov	r1, r8
    77bc:	f005 fd7a 	bl	d2b4 <__aeabi_dcmpun>
    77c0:	2800      	cmp	r0, #0
    77c2:	d001      	beq.n	77c8 <_vfprintf_r+0x38c>
    77c4:	f000 fde0 	bl	8388 <_vfprintf_r+0xf4c>
    77c8:	2201      	movs	r2, #1
    77ca:	4bd2      	ldr	r3, [pc, #840]	; (7b14 <_vfprintf_r+0x6d8>)
    77cc:	4252      	negs	r2, r2
    77ce:	0028      	movs	r0, r5
    77d0:	4641      	mov	r1, r8
    77d2:	f003 ff97 	bl	b704 <__aeabi_dcmple>
    77d6:	2800      	cmp	r0, #0
    77d8:	d001      	beq.n	77de <_vfprintf_r+0x3a2>
    77da:	f000 fdd5 	bl	8388 <_vfprintf_r+0xf4c>
    77de:	2200      	movs	r2, #0
    77e0:	2300      	movs	r3, #0
    77e2:	9815      	ldr	r0, [sp, #84]	; 0x54
    77e4:	9916      	ldr	r1, [sp, #88]	; 0x58
    77e6:	f003 ff83 	bl	b6f0 <__aeabi_dcmplt>
    77ea:	2800      	cmp	r0, #0
    77ec:	d001      	beq.n	77f2 <_vfprintf_r+0x3b6>
    77ee:	f000 fffa 	bl	87e6 <_vfprintf_r+0x13aa>
    77f2:	ab16      	add	r3, sp, #88	; 0x58
    77f4:	7fdb      	ldrb	r3, [r3, #31]
    77f6:	4698      	mov	r8, r3
    77f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77fa:	2b47      	cmp	r3, #71	; 0x47
    77fc:	dc01      	bgt.n	7802 <_vfprintf_r+0x3c6>
    77fe:	f000 feaa 	bl	8556 <_vfprintf_r+0x111a>
    7802:	4bc5      	ldr	r3, [pc, #788]	; (7b18 <_vfprintf_r+0x6dc>)
    7804:	9311      	str	r3, [sp, #68]	; 0x44
    7806:	2380      	movs	r3, #128	; 0x80
    7808:	439c      	bics	r4, r3
    780a:	9409      	str	r4, [sp, #36]	; 0x24
    780c:	2303      	movs	r3, #3
    780e:	9308      	str	r3, [sp, #32]
    7810:	930e      	str	r3, [sp, #56]	; 0x38
    7812:	2300      	movs	r3, #0
    7814:	469a      	mov	sl, r3
    7816:	9313      	str	r3, [sp, #76]	; 0x4c
    7818:	e75b      	b.n	76d2 <_vfprintf_r+0x296>
    781a:	2308      	movs	r3, #8
    781c:	431c      	orrs	r4, r3
    781e:	9b07      	ldr	r3, [sp, #28]
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	e68b      	b.n	753c <_vfprintf_r+0x100>
    7824:	2200      	movs	r2, #0
    7826:	9d07      	ldr	r5, [sp, #28]
    7828:	3b30      	subs	r3, #48	; 0x30
    782a:	46a8      	mov	r8, r5
    782c:	920b      	str	r2, [sp, #44]	; 0x2c
    782e:	001a      	movs	r2, r3
    7830:	0003      	movs	r3, r0
    7832:	9408      	str	r4, [sp, #32]
    7834:	4640      	mov	r0, r8
    7836:	002c      	movs	r4, r5
    7838:	4698      	mov	r8, r3
    783a:	4655      	mov	r5, sl
    783c:	468a      	mov	sl, r1
    783e:	0011      	movs	r1, r2
    7840:	2200      	movs	r2, #0
    7842:	0093      	lsls	r3, r2, #2
    7844:	189a      	adds	r2, r3, r2
    7846:	7803      	ldrb	r3, [r0, #0]
    7848:	0052      	lsls	r2, r2, #1
    784a:	188a      	adds	r2, r1, r2
    784c:	0019      	movs	r1, r3
    784e:	3401      	adds	r4, #1
    7850:	3930      	subs	r1, #48	; 0x30
    7852:	0020      	movs	r0, r4
    7854:	2909      	cmp	r1, #9
    7856:	d9f4      	bls.n	7842 <_vfprintf_r+0x406>
    7858:	9407      	str	r4, [sp, #28]
    785a:	4651      	mov	r1, sl
    785c:	9c08      	ldr	r4, [sp, #32]
    785e:	920b      	str	r2, [sp, #44]	; 0x2c
    7860:	4640      	mov	r0, r8
    7862:	46aa      	mov	sl, r5
    7864:	e66d      	b.n	7542 <_vfprintf_r+0x106>
    7866:	2900      	cmp	r1, #0
    7868:	d001      	beq.n	786e <_vfprintf_r+0x432>
    786a:	f001 f8ce 	bl	8a0a <_vfprintf_r+0x15ce>
    786e:	06a3      	lsls	r3, r4, #26
    7870:	d501      	bpl.n	7876 <_vfprintf_r+0x43a>
    7872:	f000 fe65 	bl	8540 <_vfprintf_r+0x1104>
    7876:	06e3      	lsls	r3, r4, #27
    7878:	d500      	bpl.n	787c <_vfprintf_r+0x440>
    787a:	e142      	b.n	7b02 <_vfprintf_r+0x6c6>
    787c:	0663      	lsls	r3, r4, #25
    787e:	d400      	bmi.n	7882 <_vfprintf_r+0x446>
    7880:	e13f      	b.n	7b02 <_vfprintf_r+0x6c6>
    7882:	4669      	mov	r1, sp
    7884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7886:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    7888:	681a      	ldr	r2, [r3, #0]
    788a:	3304      	adds	r3, #4
    788c:	9208      	str	r2, [sp, #32]
    788e:	8011      	strh	r1, [r2, #0]
    7890:	930f      	str	r3, [sp, #60]	; 0x3c
    7892:	e61a      	b.n	74ca <_vfprintf_r+0x8e>
    7894:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7896:	2230      	movs	r2, #48	; 0x30
    7898:	680b      	ldr	r3, [r1, #0]
    789a:	930c      	str	r3, [sp, #48]	; 0x30
    789c:	2300      	movs	r3, #0
    789e:	930d      	str	r3, [sp, #52]	; 0x34
    78a0:	3302      	adds	r3, #2
    78a2:	431c      	orrs	r4, r3
    78a4:	ab1e      	add	r3, sp, #120	; 0x78
    78a6:	701a      	strb	r2, [r3, #0]
    78a8:	3248      	adds	r2, #72	; 0x48
    78aa:	705a      	strb	r2, [r3, #1]
    78ac:	000b      	movs	r3, r1
    78ae:	3304      	adds	r3, #4
    78b0:	930f      	str	r3, [sp, #60]	; 0x3c
    78b2:	4b9a      	ldr	r3, [pc, #616]	; (7b1c <_vfprintf_r+0x6e0>)
    78b4:	9212      	str	r2, [sp, #72]	; 0x48
    78b6:	9318      	str	r3, [sp, #96]	; 0x60
    78b8:	2302      	movs	r3, #2
    78ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    78bc:	2100      	movs	r1, #0
    78be:	a816      	add	r0, sp, #88	; 0x58
    78c0:	77c1      	strb	r1, [r0, #31]
    78c2:	4688      	mov	r8, r1
    78c4:	4651      	mov	r1, sl
    78c6:	3101      	adds	r1, #1
    78c8:	d000      	beq.n	78cc <_vfprintf_r+0x490>
    78ca:	e6dc      	b.n	7686 <_vfprintf_r+0x24a>
    78cc:	2a00      	cmp	r2, #0
    78ce:	d100      	bne.n	78d2 <_vfprintf_r+0x496>
    78d0:	e2d2      	b.n	7e78 <_vfprintf_r+0xa3c>
    78d2:	9409      	str	r4, [sp, #36]	; 0x24
    78d4:	2b01      	cmp	r3, #1
    78d6:	d100      	bne.n	78da <_vfprintf_r+0x49e>
    78d8:	e37b      	b.n	7fd2 <_vfprintf_r+0xb96>
    78da:	2b02      	cmp	r3, #2
    78dc:	d000      	beq.n	78e0 <_vfprintf_r+0x4a4>
    78de:	e300      	b.n	7ee2 <_vfprintf_r+0xaa6>
    78e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
    78e2:	200f      	movs	r0, #15
    78e4:	46a1      	mov	r9, r4
    78e6:	46b4      	mov	ip, r6
    78e8:	ab32      	add	r3, sp, #200	; 0xc8
    78ea:	0019      	movs	r1, r3
    78ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    78ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    78f0:	0004      	movs	r4, r0
    78f2:	464d      	mov	r5, r9
    78f4:	4014      	ands	r4, r2
    78f6:	5d2c      	ldrb	r4, [r5, r4]
    78f8:	071e      	lsls	r6, r3, #28
    78fa:	0915      	lsrs	r5, r2, #4
    78fc:	3901      	subs	r1, #1
    78fe:	432e      	orrs	r6, r5
    7900:	700c      	strb	r4, [r1, #0]
    7902:	091c      	lsrs	r4, r3, #4
    7904:	0023      	movs	r3, r4
    7906:	0034      	movs	r4, r6
    7908:	0032      	movs	r2, r6
    790a:	431c      	orrs	r4, r3
    790c:	d1f0      	bne.n	78f0 <_vfprintf_r+0x4b4>
    790e:	920c      	str	r2, [sp, #48]	; 0x30
    7910:	930d      	str	r3, [sp, #52]	; 0x34
    7912:	ab32      	add	r3, sp, #200	; 0xc8
    7914:	1a5b      	subs	r3, r3, r1
    7916:	9111      	str	r1, [sp, #68]	; 0x44
    7918:	4666      	mov	r6, ip
    791a:	930e      	str	r3, [sp, #56]	; 0x38
    791c:	e6d1      	b.n	76c2 <_vfprintf_r+0x286>
    791e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7920:	9312      	str	r3, [sp, #72]	; 0x48
    7922:	6813      	ldr	r3, [r2, #0]
    7924:	2120      	movs	r1, #32
    7926:	9308      	str	r3, [sp, #32]
    7928:	466b      	mov	r3, sp
    792a:	185b      	adds	r3, r3, r1
    792c:	781b      	ldrb	r3, [r3, #0]
    792e:	ad28      	add	r5, sp, #160	; 0xa0
    7930:	702b      	strb	r3, [r5, #0]
    7932:	2300      	movs	r3, #0
    7934:	a916      	add	r1, sp, #88	; 0x58
    7936:	77cb      	strb	r3, [r1, #31]
    7938:	0013      	movs	r3, r2
    793a:	3304      	adds	r3, #4
    793c:	930f      	str	r3, [sp, #60]	; 0x3c
    793e:	2300      	movs	r3, #0
    7940:	9409      	str	r4, [sp, #36]	; 0x24
    7942:	4698      	mov	r8, r3
    7944:	3301      	adds	r3, #1
    7946:	9308      	str	r3, [sp, #32]
    7948:	930e      	str	r3, [sp, #56]	; 0x38
    794a:	2300      	movs	r3, #0
    794c:	9511      	str	r5, [sp, #68]	; 0x44
    794e:	469a      	mov	sl, r3
    7950:	9313      	str	r3, [sp, #76]	; 0x4c
    7952:	e6c4      	b.n	76de <_vfprintf_r+0x2a2>
    7954:	9312      	str	r3, [sp, #72]	; 0x48
    7956:	2900      	cmp	r1, #0
    7958:	d100      	bne.n	795c <_vfprintf_r+0x520>
    795a:	e66f      	b.n	763c <_vfprintf_r+0x200>
    795c:	ab16      	add	r3, sp, #88	; 0x58
    795e:	77d8      	strb	r0, [r3, #31]
    7960:	e66c      	b.n	763c <_vfprintf_r+0x200>
    7962:	4663      	mov	r3, ip
    7964:	431c      	orrs	r4, r3
    7966:	9b07      	ldr	r3, [sp, #28]
    7968:	781b      	ldrb	r3, [r3, #0]
    796a:	e5e7      	b.n	753c <_vfprintf_r+0x100>
    796c:	9b07      	ldr	r3, [sp, #28]
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	2b6c      	cmp	r3, #108	; 0x6c
    7972:	d101      	bne.n	7978 <_vfprintf_r+0x53c>
    7974:	f000 fe33 	bl	85de <_vfprintf_r+0x11a2>
    7978:	2210      	movs	r2, #16
    797a:	4314      	orrs	r4, r2
    797c:	e5de      	b.n	753c <_vfprintf_r+0x100>
    797e:	9312      	str	r3, [sp, #72]	; 0x48
    7980:	2310      	movs	r3, #16
    7982:	431c      	orrs	r4, r3
    7984:	06a3      	lsls	r3, r4, #26
    7986:	d501      	bpl.n	798c <_vfprintf_r+0x550>
    7988:	f000 fc9c 	bl	82c4 <_vfprintf_r+0xe88>
    798c:	06e3      	lsls	r3, r4, #27
    798e:	d500      	bpl.n	7992 <_vfprintf_r+0x556>
    7990:	e392      	b.n	80b8 <_vfprintf_r+0xc7c>
    7992:	0663      	lsls	r3, r4, #25
    7994:	d400      	bmi.n	7998 <_vfprintf_r+0x55c>
    7996:	e38f      	b.n	80b8 <_vfprintf_r+0xc7c>
    7998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    799a:	881a      	ldrh	r2, [r3, #0]
    799c:	920c      	str	r2, [sp, #48]	; 0x30
    799e:	2200      	movs	r2, #0
    79a0:	3304      	adds	r3, #4
    79a2:	920d      	str	r2, [sp, #52]	; 0x34
    79a4:	930f      	str	r3, [sp, #60]	; 0x3c
    79a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79a8:	2301      	movs	r3, #1
    79aa:	e787      	b.n	78bc <_vfprintf_r+0x480>
    79ac:	9312      	str	r3, [sp, #72]	; 0x48
    79ae:	2900      	cmp	r1, #0
    79b0:	d001      	beq.n	79b6 <_vfprintf_r+0x57a>
    79b2:	f001 f83f 	bl	8a34 <_vfprintf_r+0x15f8>
    79b6:	4b5a      	ldr	r3, [pc, #360]	; (7b20 <_vfprintf_r+0x6e4>)
    79b8:	9318      	str	r3, [sp, #96]	; 0x60
    79ba:	06a3      	lsls	r3, r4, #26
    79bc:	d501      	bpl.n	79c2 <_vfprintf_r+0x586>
    79be:	f000 fc72 	bl	82a6 <_vfprintf_r+0xe6a>
    79c2:	06e3      	lsls	r3, r4, #27
    79c4:	d500      	bpl.n	79c8 <_vfprintf_r+0x58c>
    79c6:	e374      	b.n	80b2 <_vfprintf_r+0xc76>
    79c8:	0663      	lsls	r3, r4, #25
    79ca:	d400      	bmi.n	79ce <_vfprintf_r+0x592>
    79cc:	e371      	b.n	80b2 <_vfprintf_r+0xc76>
    79ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    79d0:	881a      	ldrh	r2, [r3, #0]
    79d2:	920c      	str	r2, [sp, #48]	; 0x30
    79d4:	2200      	movs	r2, #0
    79d6:	3304      	adds	r3, #4
    79d8:	920d      	str	r2, [sp, #52]	; 0x34
    79da:	930f      	str	r3, [sp, #60]	; 0x3c
    79dc:	07e3      	lsls	r3, r4, #31
    79de:	d400      	bmi.n	79e2 <_vfprintf_r+0x5a6>
    79e0:	e35f      	b.n	80a2 <_vfprintf_r+0xc66>
    79e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    79e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    79e6:	000b      	movs	r3, r1
    79e8:	4313      	orrs	r3, r2
    79ea:	001a      	movs	r2, r3
    79ec:	2302      	movs	r3, #2
    79ee:	2a00      	cmp	r2, #0
    79f0:	d100      	bne.n	79f4 <_vfprintf_r+0x5b8>
    79f2:	e763      	b.n	78bc <_vfprintf_r+0x480>
    79f4:	2030      	movs	r0, #48	; 0x30
    79f6:	a91e      	add	r1, sp, #120	; 0x78
    79f8:	7008      	strb	r0, [r1, #0]
    79fa:	2548      	movs	r5, #72	; 0x48
    79fc:	4668      	mov	r0, sp
    79fe:	1940      	adds	r0, r0, r5
    7a00:	7800      	ldrb	r0, [r0, #0]
    7a02:	431c      	orrs	r4, r3
    7a04:	7048      	strb	r0, [r1, #1]
    7a06:	e759      	b.n	78bc <_vfprintf_r+0x480>
    7a08:	9312      	str	r3, [sp, #72]	; 0x48
    7a0a:	2310      	movs	r3, #16
    7a0c:	431c      	orrs	r4, r3
    7a0e:	06a3      	lsls	r3, r4, #26
    7a10:	d501      	bpl.n	7a16 <_vfprintf_r+0x5da>
    7a12:	f000 fc85 	bl	8320 <_vfprintf_r+0xee4>
    7a16:	06e3      	lsls	r3, r4, #27
    7a18:	d500      	bpl.n	7a1c <_vfprintf_r+0x5e0>
    7a1a:	e354      	b.n	80c6 <_vfprintf_r+0xc8a>
    7a1c:	0663      	lsls	r3, r4, #25
    7a1e:	d400      	bmi.n	7a22 <_vfprintf_r+0x5e6>
    7a20:	e351      	b.n	80c6 <_vfprintf_r+0xc8a>
    7a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a24:	881a      	ldrh	r2, [r3, #0]
    7a26:	920c      	str	r2, [sp, #48]	; 0x30
    7a28:	2200      	movs	r2, #0
    7a2a:	3304      	adds	r3, #4
    7a2c:	920d      	str	r2, [sp, #52]	; 0x34
    7a2e:	930f      	str	r3, [sp, #60]	; 0x3c
    7a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7a32:	2300      	movs	r3, #0
    7a34:	e742      	b.n	78bc <_vfprintf_r+0x480>
    7a36:	9312      	str	r3, [sp, #72]	; 0x48
    7a38:	2900      	cmp	r1, #0
    7a3a:	d001      	beq.n	7a40 <_vfprintf_r+0x604>
    7a3c:	f000 fff6 	bl	8a2c <_vfprintf_r+0x15f0>
    7a40:	4b36      	ldr	r3, [pc, #216]	; (7b1c <_vfprintf_r+0x6e0>)
    7a42:	9318      	str	r3, [sp, #96]	; 0x60
    7a44:	e7b9      	b.n	79ba <_vfprintf_r+0x57e>
    7a46:	9b07      	ldr	r3, [sp, #28]
    7a48:	781b      	ldrb	r3, [r3, #0]
    7a4a:	2800      	cmp	r0, #0
    7a4c:	d000      	beq.n	7a50 <_vfprintf_r+0x614>
    7a4e:	e575      	b.n	753c <_vfprintf_r+0x100>
    7a50:	2101      	movs	r1, #1
    7a52:	3020      	adds	r0, #32
    7a54:	e572      	b.n	753c <_vfprintf_r+0x100>
    7a56:	464b      	mov	r3, r9
    7a58:	431c      	orrs	r4, r3
    7a5a:	9b07      	ldr	r3, [sp, #28]
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	e56d      	b.n	753c <_vfprintf_r+0x100>
    7a60:	9312      	str	r3, [sp, #72]	; 0x48
    7a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7a64:	a916      	add	r1, sp, #88	; 0x58
    7a66:	1d1d      	adds	r5, r3, #4
    7a68:	681b      	ldr	r3, [r3, #0]
    7a6a:	001a      	movs	r2, r3
    7a6c:	9311      	str	r3, [sp, #68]	; 0x44
    7a6e:	2300      	movs	r3, #0
    7a70:	77cb      	strb	r3, [r1, #31]
    7a72:	2a00      	cmp	r2, #0
    7a74:	d101      	bne.n	7a7a <_vfprintf_r+0x63e>
    7a76:	f000 fe78 	bl	876a <_vfprintf_r+0x132e>
    7a7a:	4653      	mov	r3, sl
    7a7c:	3301      	adds	r3, #1
    7a7e:	d101      	bne.n	7a84 <_vfprintf_r+0x648>
    7a80:	f000 fdc6 	bl	8610 <_vfprintf_r+0x11d4>
    7a84:	4652      	mov	r2, sl
    7a86:	2100      	movs	r1, #0
    7a88:	9811      	ldr	r0, [sp, #68]	; 0x44
    7a8a:	f002 fdf9 	bl	a680 <memchr>
    7a8e:	2800      	cmp	r0, #0
    7a90:	d101      	bne.n	7a96 <_vfprintf_r+0x65a>
    7a92:	f000 fef2 	bl	887a <_vfprintf_r+0x143e>
    7a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7a98:	1ac3      	subs	r3, r0, r3
    7a9a:	001a      	movs	r2, r3
    7a9c:	930e      	str	r3, [sp, #56]	; 0x38
    7a9e:	43db      	mvns	r3, r3
    7aa0:	17db      	asrs	r3, r3, #31
    7aa2:	401a      	ands	r2, r3
    7aa4:	ab16      	add	r3, sp, #88	; 0x58
    7aa6:	7fdb      	ldrb	r3, [r3, #31]
    7aa8:	9208      	str	r2, [sp, #32]
    7aaa:	4698      	mov	r8, r3
    7aac:	2300      	movs	r3, #0
    7aae:	950f      	str	r5, [sp, #60]	; 0x3c
    7ab0:	9409      	str	r4, [sp, #36]	; 0x24
    7ab2:	469a      	mov	sl, r3
    7ab4:	9313      	str	r3, [sp, #76]	; 0x4c
    7ab6:	e60c      	b.n	76d2 <_vfprintf_r+0x296>
    7ab8:	2301      	movs	r3, #1
    7aba:	431c      	orrs	r4, r3
    7abc:	9b07      	ldr	r3, [sp, #28]
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	e53c      	b.n	753c <_vfprintf_r+0x100>
    7ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ac4:	1d1a      	adds	r2, r3, #4
    7ac6:	681b      	ldr	r3, [r3, #0]
    7ac8:	930b      	str	r3, [sp, #44]	; 0x2c
    7aca:	2b00      	cmp	r3, #0
    7acc:	da00      	bge.n	7ad0 <_vfprintf_r+0x694>
    7ace:	e541      	b.n	7554 <_vfprintf_r+0x118>
    7ad0:	9b07      	ldr	r3, [sp, #28]
    7ad2:	920f      	str	r2, [sp, #60]	; 0x3c
    7ad4:	781b      	ldrb	r3, [r3, #0]
    7ad6:	e531      	b.n	753c <_vfprintf_r+0x100>
    7ad8:	9312      	str	r3, [sp, #72]	; 0x48
    7ada:	e798      	b.n	7a0e <_vfprintf_r+0x5d2>
    7adc:	9312      	str	r3, [sp, #72]	; 0x48
    7ade:	e751      	b.n	7984 <_vfprintf_r+0x548>
    7ae0:	9312      	str	r3, [sp, #72]	; 0x48
    7ae2:	2900      	cmp	r1, #0
    7ae4:	d001      	beq.n	7aea <_vfprintf_r+0x6ae>
    7ae6:	f000 ff8c 	bl	8a02 <_vfprintf_r+0x15c6>
    7aea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7aec:	2b00      	cmp	r3, #0
    7aee:	d101      	bne.n	7af4 <_vfprintf_r+0x6b8>
    7af0:	f000 fd1b 	bl	852a <_vfprintf_r+0x10ee>
    7af4:	ad28      	add	r5, sp, #160	; 0xa0
    7af6:	702b      	strb	r3, [r5, #0]
    7af8:	2300      	movs	r3, #0
    7afa:	aa16      	add	r2, sp, #88	; 0x58
    7afc:	77d3      	strb	r3, [r2, #31]
    7afe:	9409      	str	r4, [sp, #36]	; 0x24
    7b00:	e71f      	b.n	7942 <_vfprintf_r+0x506>
    7b02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7b04:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b06:	6813      	ldr	r3, [r2, #0]
    7b08:	6019      	str	r1, [r3, #0]
    7b0a:	0013      	movs	r3, r2
    7b0c:	3304      	adds	r3, #4
    7b0e:	930f      	str	r3, [sp, #60]	; 0x3c
    7b10:	e4db      	b.n	74ca <_vfprintf_r+0x8e>
    7b12:	46c0      	nop			; (mov r8, r8)
    7b14:	7fefffff 	.word	0x7fefffff
    7b18:	0000d7c0 	.word	0x0000d7c0
    7b1c:	0000d7e0 	.word	0x0000d7e0
    7b20:	0000d7cc 	.word	0x0000d7cc
    7b24:	68bc      	ldr	r4, [r7, #8]
    7b26:	4643      	mov	r3, r8
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d00f      	beq.n	7b4c <_vfprintf_r+0x710>
    7b2c:	aa16      	add	r2, sp, #88	; 0x58
    7b2e:	231f      	movs	r3, #31
    7b30:	4694      	mov	ip, r2
    7b32:	4463      	add	r3, ip
    7b34:	6033      	str	r3, [r6, #0]
    7b36:	2301      	movs	r3, #1
    7b38:	6073      	str	r3, [r6, #4]
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	3401      	adds	r4, #1
    7b3e:	3301      	adds	r3, #1
    7b40:	60bc      	str	r4, [r7, #8]
    7b42:	607b      	str	r3, [r7, #4]
    7b44:	2b07      	cmp	r3, #7
    7b46:	dd00      	ble.n	7b4a <_vfprintf_r+0x70e>
    7b48:	e1ab      	b.n	7ea2 <_vfprintf_r+0xa66>
    7b4a:	3608      	adds	r6, #8
    7b4c:	464b      	mov	r3, r9
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d00c      	beq.n	7b6c <_vfprintf_r+0x730>
    7b52:	ab1e      	add	r3, sp, #120	; 0x78
    7b54:	6033      	str	r3, [r6, #0]
    7b56:	2302      	movs	r3, #2
    7b58:	6073      	str	r3, [r6, #4]
    7b5a:	687b      	ldr	r3, [r7, #4]
    7b5c:	3402      	adds	r4, #2
    7b5e:	3301      	adds	r3, #1
    7b60:	60bc      	str	r4, [r7, #8]
    7b62:	607b      	str	r3, [r7, #4]
    7b64:	2b07      	cmp	r3, #7
    7b66:	dd00      	ble.n	7b6a <_vfprintf_r+0x72e>
    7b68:	e1a5      	b.n	7eb6 <_vfprintf_r+0xa7a>
    7b6a:	3608      	adds	r6, #8
    7b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b6e:	2b80      	cmp	r3, #128	; 0x80
    7b70:	d100      	bne.n	7b74 <_vfprintf_r+0x738>
    7b72:	e111      	b.n	7d98 <_vfprintf_r+0x95c>
    7b74:	4653      	mov	r3, sl
    7b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7b78:	1a9d      	subs	r5, r3, r2
    7b7a:	2d00      	cmp	r5, #0
    7b7c:	dd32      	ble.n	7be4 <_vfprintf_r+0x7a8>
    7b7e:	4ad3      	ldr	r2, [pc, #844]	; (7ecc <_vfprintf_r+0xa90>)
    7b80:	687b      	ldr	r3, [r7, #4]
    7b82:	4691      	mov	r9, r2
    7b84:	2d10      	cmp	r5, #16
    7b86:	dd22      	ble.n	7bce <_vfprintf_r+0x792>
    7b88:	2210      	movs	r2, #16
    7b8a:	4692      	mov	sl, r2
    7b8c:	0022      	movs	r2, r4
    7b8e:	465c      	mov	r4, fp
    7b90:	e003      	b.n	7b9a <_vfprintf_r+0x75e>
    7b92:	3d10      	subs	r5, #16
    7b94:	3608      	adds	r6, #8
    7b96:	2d10      	cmp	r5, #16
    7b98:	dd17      	ble.n	7bca <_vfprintf_r+0x78e>
    7b9a:	4649      	mov	r1, r9
    7b9c:	6031      	str	r1, [r6, #0]
    7b9e:	4651      	mov	r1, sl
    7ba0:	3210      	adds	r2, #16
    7ba2:	3301      	adds	r3, #1
    7ba4:	6071      	str	r1, [r6, #4]
    7ba6:	60ba      	str	r2, [r7, #8]
    7ba8:	607b      	str	r3, [r7, #4]
    7baa:	2b07      	cmp	r3, #7
    7bac:	ddf1      	ble.n	7b92 <_vfprintf_r+0x756>
    7bae:	003a      	movs	r2, r7
    7bb0:	0021      	movs	r1, r4
    7bb2:	9806      	ldr	r0, [sp, #24]
    7bb4:	f003 fb3a 	bl	b22c <__sprint_r>
    7bb8:	2800      	cmp	r0, #0
    7bba:	d000      	beq.n	7bbe <_vfprintf_r+0x782>
    7bbc:	e128      	b.n	7e10 <_vfprintf_r+0x9d4>
    7bbe:	3d10      	subs	r5, #16
    7bc0:	68ba      	ldr	r2, [r7, #8]
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	ae32      	add	r6, sp, #200	; 0xc8
    7bc6:	2d10      	cmp	r5, #16
    7bc8:	dce7      	bgt.n	7b9a <_vfprintf_r+0x75e>
    7bca:	46a3      	mov	fp, r4
    7bcc:	0014      	movs	r4, r2
    7bce:	464a      	mov	r2, r9
    7bd0:	1964      	adds	r4, r4, r5
    7bd2:	3301      	adds	r3, #1
    7bd4:	6032      	str	r2, [r6, #0]
    7bd6:	6075      	str	r5, [r6, #4]
    7bd8:	60bc      	str	r4, [r7, #8]
    7bda:	607b      	str	r3, [r7, #4]
    7bdc:	2b07      	cmp	r3, #7
    7bde:	dd00      	ble.n	7be2 <_vfprintf_r+0x7a6>
    7be0:	e155      	b.n	7e8e <_vfprintf_r+0xa52>
    7be2:	3608      	adds	r6, #8
    7be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7be6:	05db      	lsls	r3, r3, #23
    7be8:	d500      	bpl.n	7bec <_vfprintf_r+0x7b0>
    7bea:	e0b1      	b.n	7d50 <_vfprintf_r+0x914>
    7bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7bee:	6033      	str	r3, [r6, #0]
    7bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7bf2:	469c      	mov	ip, r3
    7bf4:	6073      	str	r3, [r6, #4]
    7bf6:	687b      	ldr	r3, [r7, #4]
    7bf8:	4464      	add	r4, ip
    7bfa:	3301      	adds	r3, #1
    7bfc:	60bc      	str	r4, [r7, #8]
    7bfe:	607b      	str	r3, [r7, #4]
    7c00:	2b07      	cmp	r3, #7
    7c02:	dd00      	ble.n	7c06 <_vfprintf_r+0x7ca>
    7c04:	e099      	b.n	7d3a <_vfprintf_r+0x8fe>
    7c06:	3608      	adds	r6, #8
    7c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c0a:	075b      	lsls	r3, r3, #29
    7c0c:	d53d      	bpl.n	7c8a <_vfprintf_r+0x84e>
    7c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c10:	9a08      	ldr	r2, [sp, #32]
    7c12:	1a9d      	subs	r5, r3, r2
    7c14:	2d00      	cmp	r5, #0
    7c16:	dd38      	ble.n	7c8a <_vfprintf_r+0x84e>
    7c18:	4aad      	ldr	r2, [pc, #692]	; (7ed0 <_vfprintf_r+0xa94>)
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	4690      	mov	r8, r2
    7c1e:	2d10      	cmp	r5, #16
    7c20:	dd22      	ble.n	7c68 <_vfprintf_r+0x82c>
    7c22:	2210      	movs	r2, #16
    7c24:	4691      	mov	r9, r2
    7c26:	0022      	movs	r2, r4
    7c28:	465c      	mov	r4, fp
    7c2a:	e003      	b.n	7c34 <_vfprintf_r+0x7f8>
    7c2c:	3d10      	subs	r5, #16
    7c2e:	3608      	adds	r6, #8
    7c30:	2d10      	cmp	r5, #16
    7c32:	dd17      	ble.n	7c64 <_vfprintf_r+0x828>
    7c34:	49a6      	ldr	r1, [pc, #664]	; (7ed0 <_vfprintf_r+0xa94>)
    7c36:	3210      	adds	r2, #16
    7c38:	6031      	str	r1, [r6, #0]
    7c3a:	4649      	mov	r1, r9
    7c3c:	3301      	adds	r3, #1
    7c3e:	6071      	str	r1, [r6, #4]
    7c40:	60ba      	str	r2, [r7, #8]
    7c42:	607b      	str	r3, [r7, #4]
    7c44:	2b07      	cmp	r3, #7
    7c46:	ddf1      	ble.n	7c2c <_vfprintf_r+0x7f0>
    7c48:	003a      	movs	r2, r7
    7c4a:	0021      	movs	r1, r4
    7c4c:	9806      	ldr	r0, [sp, #24]
    7c4e:	f003 faed 	bl	b22c <__sprint_r>
    7c52:	2800      	cmp	r0, #0
    7c54:	d000      	beq.n	7c58 <_vfprintf_r+0x81c>
    7c56:	e0db      	b.n	7e10 <_vfprintf_r+0x9d4>
    7c58:	3d10      	subs	r5, #16
    7c5a:	68ba      	ldr	r2, [r7, #8]
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	ae32      	add	r6, sp, #200	; 0xc8
    7c60:	2d10      	cmp	r5, #16
    7c62:	dce7      	bgt.n	7c34 <_vfprintf_r+0x7f8>
    7c64:	46a3      	mov	fp, r4
    7c66:	0014      	movs	r4, r2
    7c68:	4642      	mov	r2, r8
    7c6a:	1964      	adds	r4, r4, r5
    7c6c:	3301      	adds	r3, #1
    7c6e:	c624      	stmia	r6!, {r2, r5}
    7c70:	60bc      	str	r4, [r7, #8]
    7c72:	607b      	str	r3, [r7, #4]
    7c74:	2b07      	cmp	r3, #7
    7c76:	dd08      	ble.n	7c8a <_vfprintf_r+0x84e>
    7c78:	003a      	movs	r2, r7
    7c7a:	4659      	mov	r1, fp
    7c7c:	9806      	ldr	r0, [sp, #24]
    7c7e:	f003 fad5 	bl	b22c <__sprint_r>
    7c82:	2800      	cmp	r0, #0
    7c84:	d000      	beq.n	7c88 <_vfprintf_r+0x84c>
    7c86:	e0f4      	b.n	7e72 <_vfprintf_r+0xa36>
    7c88:	68bc      	ldr	r4, [r7, #8]
    7c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c8c:	9908      	ldr	r1, [sp, #32]
    7c8e:	428b      	cmp	r3, r1
    7c90:	da00      	bge.n	7c94 <_vfprintf_r+0x858>
    7c92:	000b      	movs	r3, r1
    7c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c96:	4694      	mov	ip, r2
    7c98:	449c      	add	ip, r3
    7c9a:	4663      	mov	r3, ip
    7c9c:	930a      	str	r3, [sp, #40]	; 0x28
    7c9e:	2c00      	cmp	r4, #0
    7ca0:	d000      	beq.n	7ca4 <_vfprintf_r+0x868>
    7ca2:	e0de      	b.n	7e62 <_vfprintf_r+0xa26>
    7ca4:	2300      	movs	r3, #0
    7ca6:	ae32      	add	r6, sp, #200	; 0xc8
    7ca8:	607b      	str	r3, [r7, #4]
    7caa:	f7ff fc0e 	bl	74ca <_vfprintf_r+0x8e>
    7cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7cb0:	2b01      	cmp	r3, #1
    7cb2:	dc00      	bgt.n	7cb6 <_vfprintf_r+0x87a>
    7cb4:	e0b8      	b.n	7e28 <_vfprintf_r+0x9ec>
    7cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7cb8:	3401      	adds	r4, #1
    7cba:	6033      	str	r3, [r6, #0]
    7cbc:	2301      	movs	r3, #1
    7cbe:	6073      	str	r3, [r6, #4]
    7cc0:	687b      	ldr	r3, [r7, #4]
    7cc2:	60bc      	str	r4, [r7, #8]
    7cc4:	3301      	adds	r3, #1
    7cc6:	607b      	str	r3, [r7, #4]
    7cc8:	2b07      	cmp	r3, #7
    7cca:	dd00      	ble.n	7cce <_vfprintf_r+0x892>
    7ccc:	e2d2      	b.n	8274 <_vfprintf_r+0xe38>
    7cce:	3608      	adds	r6, #8
    7cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7cd2:	3301      	adds	r3, #1
    7cd4:	6032      	str	r2, [r6, #0]
    7cd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7cd8:	4698      	mov	r8, r3
    7cda:	4694      	mov	ip, r2
    7cdc:	4464      	add	r4, ip
    7cde:	6072      	str	r2, [r6, #4]
    7ce0:	60bc      	str	r4, [r7, #8]
    7ce2:	607b      	str	r3, [r7, #4]
    7ce4:	2b07      	cmp	r3, #7
    7ce6:	dd00      	ble.n	7cea <_vfprintf_r+0x8ae>
    7ce8:	e2d0      	b.n	828c <_vfprintf_r+0xe50>
    7cea:	3608      	adds	r6, #8
    7cec:	2200      	movs	r2, #0
    7cee:	2300      	movs	r3, #0
    7cf0:	9815      	ldr	r0, [sp, #84]	; 0x54
    7cf2:	9916      	ldr	r1, [sp, #88]	; 0x58
    7cf4:	f003 fcf6 	bl	b6e4 <__aeabi_dcmpeq>
    7cf8:	2800      	cmp	r0, #0
    7cfa:	d000      	beq.n	7cfe <_vfprintf_r+0x8c2>
    7cfc:	e1a6      	b.n	804c <_vfprintf_r+0xc10>
    7cfe:	9d11      	ldr	r5, [sp, #68]	; 0x44
    7d00:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7d02:	3501      	adds	r5, #1
    7d04:	3b01      	subs	r3, #1
    7d06:	6035      	str	r5, [r6, #0]
    7d08:	6073      	str	r3, [r6, #4]
    7d0a:	18e4      	adds	r4, r4, r3
    7d0c:	2301      	movs	r3, #1
    7d0e:	469c      	mov	ip, r3
    7d10:	44e0      	add	r8, ip
    7d12:	4643      	mov	r3, r8
    7d14:	60bc      	str	r4, [r7, #8]
    7d16:	607b      	str	r3, [r7, #4]
    7d18:	2b07      	cmp	r3, #7
    7d1a:	dd00      	ble.n	7d1e <_vfprintf_r+0x8e2>
    7d1c:	e095      	b.n	7e4a <_vfprintf_r+0xa0e>
    7d1e:	3608      	adds	r6, #8
    7d20:	ab21      	add	r3, sp, #132	; 0x84
    7d22:	6033      	str	r3, [r6, #0]
    7d24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7d26:	469c      	mov	ip, r3
    7d28:	6073      	str	r3, [r6, #4]
    7d2a:	4643      	mov	r3, r8
    7d2c:	4464      	add	r4, ip
    7d2e:	3301      	adds	r3, #1
    7d30:	60bc      	str	r4, [r7, #8]
    7d32:	607b      	str	r3, [r7, #4]
    7d34:	2b07      	cmp	r3, #7
    7d36:	dc00      	bgt.n	7d3a <_vfprintf_r+0x8fe>
    7d38:	e765      	b.n	7c06 <_vfprintf_r+0x7ca>
    7d3a:	003a      	movs	r2, r7
    7d3c:	4659      	mov	r1, fp
    7d3e:	9806      	ldr	r0, [sp, #24]
    7d40:	f003 fa74 	bl	b22c <__sprint_r>
    7d44:	2800      	cmp	r0, #0
    7d46:	d000      	beq.n	7d4a <_vfprintf_r+0x90e>
    7d48:	e093      	b.n	7e72 <_vfprintf_r+0xa36>
    7d4a:	68bc      	ldr	r4, [r7, #8]
    7d4c:	ae32      	add	r6, sp, #200	; 0xc8
    7d4e:	e75b      	b.n	7c08 <_vfprintf_r+0x7cc>
    7d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7d52:	2b65      	cmp	r3, #101	; 0x65
    7d54:	ddab      	ble.n	7cae <_vfprintf_r+0x872>
    7d56:	2200      	movs	r2, #0
    7d58:	2300      	movs	r3, #0
    7d5a:	9815      	ldr	r0, [sp, #84]	; 0x54
    7d5c:	9916      	ldr	r1, [sp, #88]	; 0x58
    7d5e:	f003 fcc1 	bl	b6e4 <__aeabi_dcmpeq>
    7d62:	2800      	cmp	r0, #0
    7d64:	d100      	bne.n	7d68 <_vfprintf_r+0x92c>
    7d66:	e0e6      	b.n	7f36 <_vfprintf_r+0xafa>
    7d68:	4b5a      	ldr	r3, [pc, #360]	; (7ed4 <_vfprintf_r+0xa98>)
    7d6a:	3401      	adds	r4, #1
    7d6c:	6033      	str	r3, [r6, #0]
    7d6e:	2301      	movs	r3, #1
    7d70:	6073      	str	r3, [r6, #4]
    7d72:	687b      	ldr	r3, [r7, #4]
    7d74:	60bc      	str	r4, [r7, #8]
    7d76:	3301      	adds	r3, #1
    7d78:	607b      	str	r3, [r7, #4]
    7d7a:	2b07      	cmp	r3, #7
    7d7c:	dd00      	ble.n	7d80 <_vfprintf_r+0x944>
    7d7e:	e393      	b.n	84a8 <_vfprintf_r+0x106c>
    7d80:	3608      	adds	r6, #8
    7d82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7d86:	4293      	cmp	r3, r2
    7d88:	da00      	bge.n	7d8c <_vfprintf_r+0x950>
    7d8a:	e19f      	b.n	80cc <_vfprintf_r+0xc90>
    7d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d8e:	07db      	lsls	r3, r3, #31
    7d90:	d500      	bpl.n	7d94 <_vfprintf_r+0x958>
    7d92:	e19b      	b.n	80cc <_vfprintf_r+0xc90>
    7d94:	68bc      	ldr	r4, [r7, #8]
    7d96:	e737      	b.n	7c08 <_vfprintf_r+0x7cc>
    7d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d9a:	9a08      	ldr	r2, [sp, #32]
    7d9c:	1a9d      	subs	r5, r3, r2
    7d9e:	2d00      	cmp	r5, #0
    7da0:	dc00      	bgt.n	7da4 <_vfprintf_r+0x968>
    7da2:	e6e7      	b.n	7b74 <_vfprintf_r+0x738>
    7da4:	4a49      	ldr	r2, [pc, #292]	; (7ecc <_vfprintf_r+0xa90>)
    7da6:	687b      	ldr	r3, [r7, #4]
    7da8:	4691      	mov	r9, r2
    7daa:	2d10      	cmp	r5, #16
    7dac:	dd24      	ble.n	7df8 <_vfprintf_r+0x9bc>
    7dae:	2210      	movs	r2, #16
    7db0:	0021      	movs	r1, r4
    7db2:	4690      	mov	r8, r2
    7db4:	465c      	mov	r4, fp
    7db6:	0032      	movs	r2, r6
    7db8:	464e      	mov	r6, r9
    7dba:	e003      	b.n	7dc4 <_vfprintf_r+0x988>
    7dbc:	3d10      	subs	r5, #16
    7dbe:	3208      	adds	r2, #8
    7dc0:	2d10      	cmp	r5, #16
    7dc2:	dd15      	ble.n	7df0 <_vfprintf_r+0x9b4>
    7dc4:	4640      	mov	r0, r8
    7dc6:	3110      	adds	r1, #16
    7dc8:	3301      	adds	r3, #1
    7dca:	6016      	str	r6, [r2, #0]
    7dcc:	6050      	str	r0, [r2, #4]
    7dce:	60b9      	str	r1, [r7, #8]
    7dd0:	607b      	str	r3, [r7, #4]
    7dd2:	2b07      	cmp	r3, #7
    7dd4:	ddf2      	ble.n	7dbc <_vfprintf_r+0x980>
    7dd6:	003a      	movs	r2, r7
    7dd8:	0021      	movs	r1, r4
    7dda:	9806      	ldr	r0, [sp, #24]
    7ddc:	f003 fa26 	bl	b22c <__sprint_r>
    7de0:	2800      	cmp	r0, #0
    7de2:	d115      	bne.n	7e10 <_vfprintf_r+0x9d4>
    7de4:	3d10      	subs	r5, #16
    7de6:	68b9      	ldr	r1, [r7, #8]
    7de8:	687b      	ldr	r3, [r7, #4]
    7dea:	aa32      	add	r2, sp, #200	; 0xc8
    7dec:	2d10      	cmp	r5, #16
    7dee:	dce9      	bgt.n	7dc4 <_vfprintf_r+0x988>
    7df0:	46a3      	mov	fp, r4
    7df2:	46b1      	mov	r9, r6
    7df4:	000c      	movs	r4, r1
    7df6:	0016      	movs	r6, r2
    7df8:	464a      	mov	r2, r9
    7dfa:	1964      	adds	r4, r4, r5
    7dfc:	3301      	adds	r3, #1
    7dfe:	6032      	str	r2, [r6, #0]
    7e00:	6075      	str	r5, [r6, #4]
    7e02:	60bc      	str	r4, [r7, #8]
    7e04:	607b      	str	r3, [r7, #4]
    7e06:	2b07      	cmp	r3, #7
    7e08:	dd00      	ble.n	7e0c <_vfprintf_r+0x9d0>
    7e0a:	e29e      	b.n	834a <_vfprintf_r+0xf0e>
    7e0c:	3608      	adds	r6, #8
    7e0e:	e6b1      	b.n	7b74 <_vfprintf_r+0x738>
    7e10:	46a1      	mov	r9, r4
    7e12:	464b      	mov	r3, r9
    7e14:	899b      	ldrh	r3, [r3, #12]
    7e16:	065b      	lsls	r3, r3, #25
    7e18:	d401      	bmi.n	7e1e <_vfprintf_r+0x9e2>
    7e1a:	f7ff fbbe 	bl	759a <_vfprintf_r+0x15e>
    7e1e:	2301      	movs	r3, #1
    7e20:	425b      	negs	r3, r3
    7e22:	930a      	str	r3, [sp, #40]	; 0x28
    7e24:	f7ff fbb9 	bl	759a <_vfprintf_r+0x15e>
    7e28:	2301      	movs	r3, #1
    7e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e2c:	4213      	tst	r3, r2
    7e2e:	d000      	beq.n	7e32 <_vfprintf_r+0x9f6>
    7e30:	e741      	b.n	7cb6 <_vfprintf_r+0x87a>
    7e32:	6073      	str	r3, [r6, #4]
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7e38:	3301      	adds	r3, #1
    7e3a:	3401      	adds	r4, #1
    7e3c:	6032      	str	r2, [r6, #0]
    7e3e:	60bc      	str	r4, [r7, #8]
    7e40:	4698      	mov	r8, r3
    7e42:	607b      	str	r3, [r7, #4]
    7e44:	2b07      	cmp	r3, #7
    7e46:	dc00      	bgt.n	7e4a <_vfprintf_r+0xa0e>
    7e48:	e769      	b.n	7d1e <_vfprintf_r+0x8e2>
    7e4a:	003a      	movs	r2, r7
    7e4c:	4659      	mov	r1, fp
    7e4e:	9806      	ldr	r0, [sp, #24]
    7e50:	f003 f9ec 	bl	b22c <__sprint_r>
    7e54:	2800      	cmp	r0, #0
    7e56:	d10c      	bne.n	7e72 <_vfprintf_r+0xa36>
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	68bc      	ldr	r4, [r7, #8]
    7e5c:	4698      	mov	r8, r3
    7e5e:	ae32      	add	r6, sp, #200	; 0xc8
    7e60:	e75e      	b.n	7d20 <_vfprintf_r+0x8e4>
    7e62:	003a      	movs	r2, r7
    7e64:	4659      	mov	r1, fp
    7e66:	9806      	ldr	r0, [sp, #24]
    7e68:	f003 f9e0 	bl	b22c <__sprint_r>
    7e6c:	2800      	cmp	r0, #0
    7e6e:	d100      	bne.n	7e72 <_vfprintf_r+0xa36>
    7e70:	e718      	b.n	7ca4 <_vfprintf_r+0x868>
    7e72:	46d9      	mov	r9, fp
    7e74:	e7cd      	b.n	7e12 <_vfprintf_r+0x9d6>
    7e76:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7e78:	2b01      	cmp	r3, #1
    7e7a:	d100      	bne.n	7e7e <_vfprintf_r+0xa42>
    7e7c:	e17e      	b.n	817c <_vfprintf_r+0xd40>
    7e7e:	2b02      	cmp	r3, #2
    7e80:	d12a      	bne.n	7ed8 <_vfprintf_r+0xa9c>
    7e82:	9409      	str	r4, [sp, #36]	; 0x24
    7e84:	2300      	movs	r3, #0
    7e86:	2400      	movs	r4, #0
    7e88:	930c      	str	r3, [sp, #48]	; 0x30
    7e8a:	940d      	str	r4, [sp, #52]	; 0x34
    7e8c:	e528      	b.n	78e0 <_vfprintf_r+0x4a4>
    7e8e:	003a      	movs	r2, r7
    7e90:	4659      	mov	r1, fp
    7e92:	9806      	ldr	r0, [sp, #24]
    7e94:	f003 f9ca 	bl	b22c <__sprint_r>
    7e98:	2800      	cmp	r0, #0
    7e9a:	d1ea      	bne.n	7e72 <_vfprintf_r+0xa36>
    7e9c:	68bc      	ldr	r4, [r7, #8]
    7e9e:	ae32      	add	r6, sp, #200	; 0xc8
    7ea0:	e6a0      	b.n	7be4 <_vfprintf_r+0x7a8>
    7ea2:	003a      	movs	r2, r7
    7ea4:	4659      	mov	r1, fp
    7ea6:	9806      	ldr	r0, [sp, #24]
    7ea8:	f003 f9c0 	bl	b22c <__sprint_r>
    7eac:	2800      	cmp	r0, #0
    7eae:	d1e0      	bne.n	7e72 <_vfprintf_r+0xa36>
    7eb0:	68bc      	ldr	r4, [r7, #8]
    7eb2:	ae32      	add	r6, sp, #200	; 0xc8
    7eb4:	e64a      	b.n	7b4c <_vfprintf_r+0x710>
    7eb6:	003a      	movs	r2, r7
    7eb8:	4659      	mov	r1, fp
    7eba:	9806      	ldr	r0, [sp, #24]
    7ebc:	f003 f9b6 	bl	b22c <__sprint_r>
    7ec0:	2800      	cmp	r0, #0
    7ec2:	d1d6      	bne.n	7e72 <_vfprintf_r+0xa36>
    7ec4:	68bc      	ldr	r4, [r7, #8]
    7ec6:	ae32      	add	r6, sp, #200	; 0xc8
    7ec8:	e650      	b.n	7b6c <_vfprintf_r+0x730>
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	0000d810 	.word	0x0000d810
    7ed0:	0000d800 	.word	0x0000d800
    7ed4:	0000d7fc 	.word	0x0000d7fc
    7ed8:	9409      	str	r4, [sp, #36]	; 0x24
    7eda:	2300      	movs	r3, #0
    7edc:	2400      	movs	r4, #0
    7ede:	930c      	str	r3, [sp, #48]	; 0x30
    7ee0:	940d      	str	r4, [sp, #52]	; 0x34
    7ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
    7ee4:	990d      	ldr	r1, [sp, #52]	; 0x34
    7ee6:	4653      	mov	r3, sl
    7ee8:	aa32      	add	r2, sp, #200	; 0xc8
    7eea:	4691      	mov	r9, r2
    7eec:	9308      	str	r3, [sp, #32]
    7eee:	46b2      	mov	sl, r6
    7ef0:	e000      	b.n	7ef4 <_vfprintf_r+0xab8>
    7ef2:	46a1      	mov	r9, r4
    7ef4:	074a      	lsls	r2, r1, #29
    7ef6:	4694      	mov	ip, r2
    7ef8:	464b      	mov	r3, r9
    7efa:	4665      	mov	r5, ip
    7efc:	1e5c      	subs	r4, r3, #1
    7efe:	08c6      	lsrs	r6, r0, #3
    7f00:	2307      	movs	r3, #7
    7f02:	08ca      	lsrs	r2, r1, #3
    7f04:	4335      	orrs	r5, r6
    7f06:	0011      	movs	r1, r2
    7f08:	002a      	movs	r2, r5
    7f0a:	4003      	ands	r3, r0
    7f0c:	3330      	adds	r3, #48	; 0x30
    7f0e:	7023      	strb	r3, [r4, #0]
    7f10:	0028      	movs	r0, r5
    7f12:	430a      	orrs	r2, r1
    7f14:	d1ed      	bne.n	7ef2 <_vfprintf_r+0xab6>
    7f16:	900c      	str	r0, [sp, #48]	; 0x30
    7f18:	910d      	str	r1, [sp, #52]	; 0x34
    7f1a:	9908      	ldr	r1, [sp, #32]
    7f1c:	4656      	mov	r6, sl
    7f1e:	468a      	mov	sl, r1
    7f20:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f22:	464a      	mov	r2, r9
    7f24:	9411      	str	r4, [sp, #68]	; 0x44
    7f26:	07c9      	lsls	r1, r1, #31
    7f28:	d500      	bpl.n	7f2c <_vfprintf_r+0xaf0>
    7f2a:	e116      	b.n	815a <_vfprintf_r+0xd1e>
    7f2c:	ab32      	add	r3, sp, #200	; 0xc8
    7f2e:	1b1b      	subs	r3, r3, r4
    7f30:	930e      	str	r3, [sp, #56]	; 0x38
    7f32:	f7ff fbc6 	bl	76c2 <_vfprintf_r+0x286>
    7f36:	981f      	ldr	r0, [sp, #124]	; 0x7c
    7f38:	2800      	cmp	r0, #0
    7f3a:	dc00      	bgt.n	7f3e <_vfprintf_r+0xb02>
    7f3c:	e2be      	b.n	84bc <_vfprintf_r+0x1080>
    7f3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7f40:	9914      	ldr	r1, [sp, #80]	; 0x50
    7f42:	0013      	movs	r3, r2
    7f44:	4690      	mov	r8, r2
    7f46:	428b      	cmp	r3, r1
    7f48:	dd00      	ble.n	7f4c <_vfprintf_r+0xb10>
    7f4a:	4688      	mov	r8, r1
    7f4c:	4643      	mov	r3, r8
    7f4e:	2b00      	cmp	r3, #0
    7f50:	dd0c      	ble.n	7f6c <_vfprintf_r+0xb30>
    7f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f54:	4444      	add	r4, r8
    7f56:	6033      	str	r3, [r6, #0]
    7f58:	4643      	mov	r3, r8
    7f5a:	6073      	str	r3, [r6, #4]
    7f5c:	687b      	ldr	r3, [r7, #4]
    7f5e:	60bc      	str	r4, [r7, #8]
    7f60:	3301      	adds	r3, #1
    7f62:	607b      	str	r3, [r7, #4]
    7f64:	2b07      	cmp	r3, #7
    7f66:	dd00      	ble.n	7f6a <_vfprintf_r+0xb2e>
    7f68:	e3d7      	b.n	871a <_vfprintf_r+0x12de>
    7f6a:	3608      	adds	r6, #8
    7f6c:	4643      	mov	r3, r8
    7f6e:	43db      	mvns	r3, r3
    7f70:	4642      	mov	r2, r8
    7f72:	17db      	asrs	r3, r3, #31
    7f74:	4013      	ands	r3, r2
    7f76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7f78:	1ad3      	subs	r3, r2, r3
    7f7a:	4698      	mov	r8, r3
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	dc00      	bgt.n	7f82 <_vfprintf_r+0xb46>
    7f80:	e11b      	b.n	81ba <_vfprintf_r+0xd7e>
    7f82:	2b10      	cmp	r3, #16
    7f84:	dc01      	bgt.n	7f8a <_vfprintf_r+0xb4e>
    7f86:	f000 fd00 	bl	898a <_vfprintf_r+0x154e>
    7f8a:	4ad9      	ldr	r2, [pc, #868]	; (82f0 <_vfprintf_r+0xeb4>)
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	4691      	mov	r9, r2
    7f90:	2210      	movs	r2, #16
    7f92:	464d      	mov	r5, r9
    7f94:	4692      	mov	sl, r2
    7f96:	0022      	movs	r2, r4
    7f98:	4644      	mov	r4, r8
    7f9a:	46d8      	mov	r8, fp
    7f9c:	e004      	b.n	7fa8 <_vfprintf_r+0xb6c>
    7f9e:	3608      	adds	r6, #8
    7fa0:	3c10      	subs	r4, #16
    7fa2:	2c10      	cmp	r4, #16
    7fa4:	dc00      	bgt.n	7fa8 <_vfprintf_r+0xb6c>
    7fa6:	e0f8      	b.n	819a <_vfprintf_r+0xd5e>
    7fa8:	4651      	mov	r1, sl
    7faa:	3210      	adds	r2, #16
    7fac:	3301      	adds	r3, #1
    7fae:	6035      	str	r5, [r6, #0]
    7fb0:	6071      	str	r1, [r6, #4]
    7fb2:	60ba      	str	r2, [r7, #8]
    7fb4:	607b      	str	r3, [r7, #4]
    7fb6:	2b07      	cmp	r3, #7
    7fb8:	ddf1      	ble.n	7f9e <_vfprintf_r+0xb62>
    7fba:	003a      	movs	r2, r7
    7fbc:	4641      	mov	r1, r8
    7fbe:	9806      	ldr	r0, [sp, #24]
    7fc0:	f003 f934 	bl	b22c <__sprint_r>
    7fc4:	2800      	cmp	r0, #0
    7fc6:	d000      	beq.n	7fca <_vfprintf_r+0xb8e>
    7fc8:	e3f4      	b.n	87b4 <_vfprintf_r+0x1378>
    7fca:	68ba      	ldr	r2, [r7, #8]
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	ae32      	add	r6, sp, #200	; 0xc8
    7fd0:	e7e6      	b.n	7fa0 <_vfprintf_r+0xb64>
    7fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d100      	bne.n	7fda <_vfprintf_r+0xb9e>
    7fd8:	e0cb      	b.n	8172 <_vfprintf_r+0xd36>
    7fda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7fdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7fde:	ab32      	add	r3, sp, #200	; 0xc8
    7fe0:	46b1      	mov	r9, r6
    7fe2:	001e      	movs	r6, r3
    7fe4:	0020      	movs	r0, r4
    7fe6:	0029      	movs	r1, r5
    7fe8:	220a      	movs	r2, #10
    7fea:	2300      	movs	r3, #0
    7fec:	f003 fba8 	bl	b740 <__aeabi_uldivmod>
    7ff0:	3e01      	subs	r6, #1
    7ff2:	3230      	adds	r2, #48	; 0x30
    7ff4:	7032      	strb	r2, [r6, #0]
    7ff6:	2300      	movs	r3, #0
    7ff8:	0020      	movs	r0, r4
    7ffa:	0029      	movs	r1, r5
    7ffc:	220a      	movs	r2, #10
    7ffe:	f003 fb9f 	bl	b740 <__aeabi_uldivmod>
    8002:	0003      	movs	r3, r0
    8004:	0004      	movs	r4, r0
    8006:	000d      	movs	r5, r1
    8008:	430b      	orrs	r3, r1
    800a:	d1eb      	bne.n	7fe4 <_vfprintf_r+0xba8>
    800c:	0032      	movs	r2, r6
    800e:	ab32      	add	r3, sp, #200	; 0xc8
    8010:	1a9b      	subs	r3, r3, r2
    8012:	9611      	str	r6, [sp, #68]	; 0x44
    8014:	940c      	str	r4, [sp, #48]	; 0x30
    8016:	950d      	str	r5, [sp, #52]	; 0x34
    8018:	464e      	mov	r6, r9
    801a:	930e      	str	r3, [sp, #56]	; 0x38
    801c:	f7ff fb51 	bl	76c2 <_vfprintf_r+0x286>
    8020:	2300      	movs	r3, #0
    8022:	930e      	str	r3, [sp, #56]	; 0x38
    8024:	ab32      	add	r3, sp, #200	; 0xc8
    8026:	9311      	str	r3, [sp, #68]	; 0x44
    8028:	f7ff fb4b 	bl	76c2 <_vfprintf_r+0x286>
    802c:	003a      	movs	r2, r7
    802e:	4659      	mov	r1, fp
    8030:	9806      	ldr	r0, [sp, #24]
    8032:	f003 f8fb 	bl	b22c <__sprint_r>
    8036:	2800      	cmp	r0, #0
    8038:	d000      	beq.n	803c <_vfprintf_r+0xc00>
    803a:	e71a      	b.n	7e72 <_vfprintf_r+0xa36>
    803c:	ab16      	add	r3, sp, #88	; 0x58
    803e:	7fdb      	ldrb	r3, [r3, #31]
    8040:	68bc      	ldr	r4, [r7, #8]
    8042:	4698      	mov	r8, r3
    8044:	ae32      	add	r6, sp, #200	; 0xc8
    8046:	e56e      	b.n	7b26 <_vfprintf_r+0x6ea>
    8048:	46b1      	mov	r9, r6
    804a:	e6e2      	b.n	7e12 <_vfprintf_r+0x9d6>
    804c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    804e:	1e5d      	subs	r5, r3, #1
    8050:	2d00      	cmp	r5, #0
    8052:	dc00      	bgt.n	8056 <_vfprintf_r+0xc1a>
    8054:	e664      	b.n	7d20 <_vfprintf_r+0x8e4>
    8056:	4ba6      	ldr	r3, [pc, #664]	; (82f0 <_vfprintf_r+0xeb4>)
    8058:	4699      	mov	r9, r3
    805a:	2d10      	cmp	r5, #16
    805c:	dc00      	bgt.n	8060 <_vfprintf_r+0xc24>
    805e:	e14c      	b.n	82fa <_vfprintf_r+0xebe>
    8060:	2310      	movs	r3, #16
    8062:	0022      	movs	r2, r4
    8064:	469a      	mov	sl, r3
    8066:	465c      	mov	r4, fp
    8068:	4643      	mov	r3, r8
    806a:	e004      	b.n	8076 <_vfprintf_r+0xc3a>
    806c:	3608      	adds	r6, #8
    806e:	3d10      	subs	r5, #16
    8070:	2d10      	cmp	r5, #16
    8072:	dc00      	bgt.n	8076 <_vfprintf_r+0xc3a>
    8074:	e13e      	b.n	82f4 <_vfprintf_r+0xeb8>
    8076:	4649      	mov	r1, r9
    8078:	6031      	str	r1, [r6, #0]
    807a:	4651      	mov	r1, sl
    807c:	3210      	adds	r2, #16
    807e:	3301      	adds	r3, #1
    8080:	6071      	str	r1, [r6, #4]
    8082:	60ba      	str	r2, [r7, #8]
    8084:	607b      	str	r3, [r7, #4]
    8086:	2b07      	cmp	r3, #7
    8088:	ddf0      	ble.n	806c <_vfprintf_r+0xc30>
    808a:	003a      	movs	r2, r7
    808c:	0021      	movs	r1, r4
    808e:	9806      	ldr	r0, [sp, #24]
    8090:	f003 f8cc 	bl	b22c <__sprint_r>
    8094:	2800      	cmp	r0, #0
    8096:	d000      	beq.n	809a <_vfprintf_r+0xc5e>
    8098:	e6ba      	b.n	7e10 <_vfprintf_r+0x9d4>
    809a:	68ba      	ldr	r2, [r7, #8]
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	ae32      	add	r6, sp, #200	; 0xc8
    80a0:	e7e5      	b.n	806e <_vfprintf_r+0xc32>
    80a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    80a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    80a6:	0008      	movs	r0, r1
    80a8:	4310      	orrs	r0, r2
    80aa:	2302      	movs	r3, #2
    80ac:	0002      	movs	r2, r0
    80ae:	f7ff fc05 	bl	78bc <_vfprintf_r+0x480>
    80b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80b4:	681a      	ldr	r2, [r3, #0]
    80b6:	e48c      	b.n	79d2 <_vfprintf_r+0x596>
    80b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80ba:	681a      	ldr	r2, [r3, #0]
    80bc:	e46e      	b.n	799c <_vfprintf_r+0x560>
    80be:	6813      	ldr	r3, [r2, #0]
    80c0:	9308      	str	r3, [sp, #32]
    80c2:	f7ff faca 	bl	765a <_vfprintf_r+0x21e>
    80c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80c8:	681a      	ldr	r2, [r3, #0]
    80ca:	e4ac      	b.n	7a26 <_vfprintf_r+0x5ea>
    80cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    80ce:	68ba      	ldr	r2, [r7, #8]
    80d0:	6033      	str	r3, [r6, #0]
    80d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    80d4:	469c      	mov	ip, r3
    80d6:	6073      	str	r3, [r6, #4]
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	4462      	add	r2, ip
    80dc:	3301      	adds	r3, #1
    80de:	0014      	movs	r4, r2
    80e0:	60ba      	str	r2, [r7, #8]
    80e2:	607b      	str	r3, [r7, #4]
    80e4:	2b07      	cmp	r3, #7
    80e6:	dd00      	ble.n	80ea <_vfprintf_r+0xcae>
    80e8:	e281      	b.n	85ee <_vfprintf_r+0x11b2>
    80ea:	3608      	adds	r6, #8
    80ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
    80ee:	1e5d      	subs	r5, r3, #1
    80f0:	2d00      	cmp	r5, #0
    80f2:	dc00      	bgt.n	80f6 <_vfprintf_r+0xcba>
    80f4:	e588      	b.n	7c08 <_vfprintf_r+0x7cc>
    80f6:	4a7e      	ldr	r2, [pc, #504]	; (82f0 <_vfprintf_r+0xeb4>)
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	4691      	mov	r9, r2
    80fc:	2d10      	cmp	r5, #16
    80fe:	dd21      	ble.n	8144 <_vfprintf_r+0xd08>
    8100:	2210      	movs	r2, #16
    8102:	4690      	mov	r8, r2
    8104:	0022      	movs	r2, r4
    8106:	464c      	mov	r4, r9
    8108:	46d9      	mov	r9, fp
    810a:	e004      	b.n	8116 <_vfprintf_r+0xcda>
    810c:	3608      	adds	r6, #8
    810e:	3d10      	subs	r5, #16
    8110:	2d10      	cmp	r5, #16
    8112:	dc00      	bgt.n	8116 <_vfprintf_r+0xcda>
    8114:	e1c4      	b.n	84a0 <_vfprintf_r+0x1064>
    8116:	4641      	mov	r1, r8
    8118:	3210      	adds	r2, #16
    811a:	3301      	adds	r3, #1
    811c:	6034      	str	r4, [r6, #0]
    811e:	6071      	str	r1, [r6, #4]
    8120:	60ba      	str	r2, [r7, #8]
    8122:	607b      	str	r3, [r7, #4]
    8124:	2b07      	cmp	r3, #7
    8126:	ddf1      	ble.n	810c <_vfprintf_r+0xcd0>
    8128:	003a      	movs	r2, r7
    812a:	4649      	mov	r1, r9
    812c:	9806      	ldr	r0, [sp, #24]
    812e:	f003 f87d 	bl	b22c <__sprint_r>
    8132:	2800      	cmp	r0, #0
    8134:	d000      	beq.n	8138 <_vfprintf_r+0xcfc>
    8136:	e66c      	b.n	7e12 <_vfprintf_r+0x9d6>
    8138:	68ba      	ldr	r2, [r7, #8]
    813a:	687b      	ldr	r3, [r7, #4]
    813c:	ae32      	add	r6, sp, #200	; 0xc8
    813e:	e7e6      	b.n	810e <_vfprintf_r+0xcd2>
    8140:	46a3      	mov	fp, r4
    8142:	0014      	movs	r4, r2
    8144:	464a      	mov	r2, r9
    8146:	1964      	adds	r4, r4, r5
    8148:	3301      	adds	r3, #1
    814a:	6032      	str	r2, [r6, #0]
    814c:	6075      	str	r5, [r6, #4]
    814e:	60bc      	str	r4, [r7, #8]
    8150:	607b      	str	r3, [r7, #4]
    8152:	2b07      	cmp	r3, #7
    8154:	dc00      	bgt.n	8158 <_vfprintf_r+0xd1c>
    8156:	e556      	b.n	7c06 <_vfprintf_r+0x7ca>
    8158:	e5ef      	b.n	7d3a <_vfprintf_r+0x8fe>
    815a:	2b30      	cmp	r3, #48	; 0x30
    815c:	d100      	bne.n	8160 <_vfprintf_r+0xd24>
    815e:	e251      	b.n	8604 <_vfprintf_r+0x11c8>
    8160:	2330      	movs	r3, #48	; 0x30
    8162:	3a02      	subs	r2, #2
    8164:	7013      	strb	r3, [r2, #0]
    8166:	ab32      	add	r3, sp, #200	; 0xc8
    8168:	1a9b      	subs	r3, r3, r2
    816a:	930e      	str	r3, [sp, #56]	; 0x38
    816c:	9211      	str	r2, [sp, #68]	; 0x44
    816e:	f7ff faa8 	bl	76c2 <_vfprintf_r+0x286>
    8172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8174:	2b09      	cmp	r3, #9
    8176:	d900      	bls.n	817a <_vfprintf_r+0xd3e>
    8178:	e72f      	b.n	7fda <_vfprintf_r+0xb9e>
    817a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    817c:	2227      	movs	r2, #39	; 0x27
    817e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8180:	a928      	add	r1, sp, #160	; 0xa0
    8182:	3330      	adds	r3, #48	; 0x30
    8184:	548b      	strb	r3, [r1, r2]
    8186:	2301      	movs	r3, #1
    8188:	aa16      	add	r2, sp, #88	; 0x58
    818a:	4694      	mov	ip, r2
    818c:	930e      	str	r3, [sp, #56]	; 0x38
    818e:	336e      	adds	r3, #110	; 0x6e
    8190:	4463      	add	r3, ip
    8192:	9409      	str	r4, [sp, #36]	; 0x24
    8194:	9311      	str	r3, [sp, #68]	; 0x44
    8196:	f7ff fa94 	bl	76c2 <_vfprintf_r+0x286>
    819a:	46c3      	mov	fp, r8
    819c:	46a9      	mov	r9, r5
    819e:	46a0      	mov	r8, r4
    81a0:	0014      	movs	r4, r2
    81a2:	464a      	mov	r2, r9
    81a4:	6032      	str	r2, [r6, #0]
    81a6:	4642      	mov	r2, r8
    81a8:	4444      	add	r4, r8
    81aa:	3301      	adds	r3, #1
    81ac:	6072      	str	r2, [r6, #4]
    81ae:	60bc      	str	r4, [r7, #8]
    81b0:	607b      	str	r3, [r7, #4]
    81b2:	2b07      	cmp	r3, #7
    81b4:	dd00      	ble.n	81b8 <_vfprintf_r+0xd7c>
    81b6:	e2ea      	b.n	878e <_vfprintf_r+0x1352>
    81b8:	3608      	adds	r6, #8
    81ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    81bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    81be:	4293      	cmp	r3, r2
    81c0:	db49      	blt.n	8256 <_vfprintf_r+0xe1a>
    81c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    81c4:	07d2      	lsls	r2, r2, #31
    81c6:	d446      	bmi.n	8256 <_vfprintf_r+0xe1a>
    81c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    81ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
    81cc:	1ad3      	subs	r3, r2, r3
    81ce:	1a52      	subs	r2, r2, r1
    81d0:	4690      	mov	r8, r2
    81d2:	429a      	cmp	r2, r3
    81d4:	dd00      	ble.n	81d8 <_vfprintf_r+0xd9c>
    81d6:	4698      	mov	r8, r3
    81d8:	4642      	mov	r2, r8
    81da:	2a00      	cmp	r2, #0
    81dc:	dd0f      	ble.n	81fe <_vfprintf_r+0xdc2>
    81de:	9913      	ldr	r1, [sp, #76]	; 0x4c
    81e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    81e2:	468c      	mov	ip, r1
    81e4:	4462      	add	r2, ip
    81e6:	6032      	str	r2, [r6, #0]
    81e8:	4642      	mov	r2, r8
    81ea:	6072      	str	r2, [r6, #4]
    81ec:	687a      	ldr	r2, [r7, #4]
    81ee:	4444      	add	r4, r8
    81f0:	3201      	adds	r2, #1
    81f2:	60bc      	str	r4, [r7, #8]
    81f4:	607a      	str	r2, [r7, #4]
    81f6:	2a07      	cmp	r2, #7
    81f8:	dd00      	ble.n	81fc <_vfprintf_r+0xdc0>
    81fa:	e2a7      	b.n	874c <_vfprintf_r+0x1310>
    81fc:	3608      	adds	r6, #8
    81fe:	4642      	mov	r2, r8
    8200:	43d5      	mvns	r5, r2
    8202:	17ed      	asrs	r5, r5, #31
    8204:	4015      	ands	r5, r2
    8206:	1b5d      	subs	r5, r3, r5
    8208:	2d00      	cmp	r5, #0
    820a:	dc00      	bgt.n	820e <_vfprintf_r+0xdd2>
    820c:	e4fc      	b.n	7c08 <_vfprintf_r+0x7cc>
    820e:	4a38      	ldr	r2, [pc, #224]	; (82f0 <_vfprintf_r+0xeb4>)
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	4691      	mov	r9, r2
    8214:	2d10      	cmp	r5, #16
    8216:	dd95      	ble.n	8144 <_vfprintf_r+0xd08>
    8218:	2210      	movs	r2, #16
    821a:	4690      	mov	r8, r2
    821c:	0022      	movs	r2, r4
    821e:	465c      	mov	r4, fp
    8220:	e003      	b.n	822a <_vfprintf_r+0xdee>
    8222:	3608      	adds	r6, #8
    8224:	3d10      	subs	r5, #16
    8226:	2d10      	cmp	r5, #16
    8228:	dd8a      	ble.n	8140 <_vfprintf_r+0xd04>
    822a:	4649      	mov	r1, r9
    822c:	6031      	str	r1, [r6, #0]
    822e:	4641      	mov	r1, r8
    8230:	3210      	adds	r2, #16
    8232:	3301      	adds	r3, #1
    8234:	6071      	str	r1, [r6, #4]
    8236:	60ba      	str	r2, [r7, #8]
    8238:	607b      	str	r3, [r7, #4]
    823a:	2b07      	cmp	r3, #7
    823c:	ddf1      	ble.n	8222 <_vfprintf_r+0xde6>
    823e:	003a      	movs	r2, r7
    8240:	0021      	movs	r1, r4
    8242:	9806      	ldr	r0, [sp, #24]
    8244:	f002 fff2 	bl	b22c <__sprint_r>
    8248:	2800      	cmp	r0, #0
    824a:	d000      	beq.n	824e <_vfprintf_r+0xe12>
    824c:	e5e0      	b.n	7e10 <_vfprintf_r+0x9d4>
    824e:	68ba      	ldr	r2, [r7, #8]
    8250:	687b      	ldr	r3, [r7, #4]
    8252:	ae32      	add	r6, sp, #200	; 0xc8
    8254:	e7e6      	b.n	8224 <_vfprintf_r+0xde8>
    8256:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8258:	6032      	str	r2, [r6, #0]
    825a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    825c:	4694      	mov	ip, r2
    825e:	6072      	str	r2, [r6, #4]
    8260:	687a      	ldr	r2, [r7, #4]
    8262:	4464      	add	r4, ip
    8264:	3201      	adds	r2, #1
    8266:	60bc      	str	r4, [r7, #8]
    8268:	607a      	str	r2, [r7, #4]
    826a:	2a07      	cmp	r2, #7
    826c:	dd00      	ble.n	8270 <_vfprintf_r+0xe34>
    826e:	e260      	b.n	8732 <_vfprintf_r+0x12f6>
    8270:	3608      	adds	r6, #8
    8272:	e7a9      	b.n	81c8 <_vfprintf_r+0xd8c>
    8274:	003a      	movs	r2, r7
    8276:	4659      	mov	r1, fp
    8278:	9806      	ldr	r0, [sp, #24]
    827a:	f002 ffd7 	bl	b22c <__sprint_r>
    827e:	2800      	cmp	r0, #0
    8280:	d000      	beq.n	8284 <_vfprintf_r+0xe48>
    8282:	e5f6      	b.n	7e72 <_vfprintf_r+0xa36>
    8284:	68bc      	ldr	r4, [r7, #8]
    8286:	687b      	ldr	r3, [r7, #4]
    8288:	ae32      	add	r6, sp, #200	; 0xc8
    828a:	e521      	b.n	7cd0 <_vfprintf_r+0x894>
    828c:	003a      	movs	r2, r7
    828e:	4659      	mov	r1, fp
    8290:	9806      	ldr	r0, [sp, #24]
    8292:	f002 ffcb 	bl	b22c <__sprint_r>
    8296:	2800      	cmp	r0, #0
    8298:	d000      	beq.n	829c <_vfprintf_r+0xe60>
    829a:	e5ea      	b.n	7e72 <_vfprintf_r+0xa36>
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	68bc      	ldr	r4, [r7, #8]
    82a0:	4698      	mov	r8, r3
    82a2:	ae32      	add	r6, sp, #200	; 0xc8
    82a4:	e522      	b.n	7cec <_vfprintf_r+0x8b0>
    82a6:	2207      	movs	r2, #7
    82a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82aa:	3307      	adds	r3, #7
    82ac:	4393      	bics	r3, r2
    82ae:	3201      	adds	r2, #1
    82b0:	4694      	mov	ip, r2
    82b2:	449c      	add	ip, r3
    82b4:	4662      	mov	r2, ip
    82b6:	920f      	str	r2, [sp, #60]	; 0x3c
    82b8:	681a      	ldr	r2, [r3, #0]
    82ba:	685b      	ldr	r3, [r3, #4]
    82bc:	920c      	str	r2, [sp, #48]	; 0x30
    82be:	930d      	str	r3, [sp, #52]	; 0x34
    82c0:	f7ff fb8c 	bl	79dc <_vfprintf_r+0x5a0>
    82c4:	2207      	movs	r2, #7
    82c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82c8:	3307      	adds	r3, #7
    82ca:	4393      	bics	r3, r2
    82cc:	3201      	adds	r2, #1
    82ce:	4694      	mov	ip, r2
    82d0:	449c      	add	ip, r3
    82d2:	4662      	mov	r2, ip
    82d4:	920f      	str	r2, [sp, #60]	; 0x3c
    82d6:	681a      	ldr	r2, [r3, #0]
    82d8:	685b      	ldr	r3, [r3, #4]
    82da:	0011      	movs	r1, r2
    82dc:	001a      	movs	r2, r3
    82de:	0008      	movs	r0, r1
    82e0:	4310      	orrs	r0, r2
    82e2:	910c      	str	r1, [sp, #48]	; 0x30
    82e4:	920d      	str	r2, [sp, #52]	; 0x34
    82e6:	2301      	movs	r3, #1
    82e8:	0002      	movs	r2, r0
    82ea:	f7ff fae7 	bl	78bc <_vfprintf_r+0x480>
    82ee:	46c0      	nop			; (mov r8, r8)
    82f0:	0000d810 	.word	0x0000d810
    82f4:	46a3      	mov	fp, r4
    82f6:	4698      	mov	r8, r3
    82f8:	0014      	movs	r4, r2
    82fa:	464b      	mov	r3, r9
    82fc:	6075      	str	r5, [r6, #4]
    82fe:	6033      	str	r3, [r6, #0]
    8300:	1964      	adds	r4, r4, r5
    8302:	e503      	b.n	7d0c <_vfprintf_r+0x8d0>
    8304:	2307      	movs	r3, #7
    8306:	3207      	adds	r2, #7
    8308:	439a      	bics	r2, r3
    830a:	3301      	adds	r3, #1
    830c:	469c      	mov	ip, r3
    830e:	4494      	add	ip, r2
    8310:	4663      	mov	r3, ip
    8312:	930f      	str	r3, [sp, #60]	; 0x3c
    8314:	6853      	ldr	r3, [r2, #4]
    8316:	6812      	ldr	r2, [r2, #0]
    8318:	930d      	str	r3, [sp, #52]	; 0x34
    831a:	920c      	str	r2, [sp, #48]	; 0x30
    831c:	f7ff f9a2 	bl	7664 <_vfprintf_r+0x228>
    8320:	2207      	movs	r2, #7
    8322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8324:	3307      	adds	r3, #7
    8326:	4393      	bics	r3, r2
    8328:	3201      	adds	r2, #1
    832a:	4694      	mov	ip, r2
    832c:	449c      	add	ip, r3
    832e:	4662      	mov	r2, ip
    8330:	920f      	str	r2, [sp, #60]	; 0x3c
    8332:	681a      	ldr	r2, [r3, #0]
    8334:	685b      	ldr	r3, [r3, #4]
    8336:	0011      	movs	r1, r2
    8338:	001a      	movs	r2, r3
    833a:	0008      	movs	r0, r1
    833c:	4310      	orrs	r0, r2
    833e:	910c      	str	r1, [sp, #48]	; 0x30
    8340:	920d      	str	r2, [sp, #52]	; 0x34
    8342:	2300      	movs	r3, #0
    8344:	0002      	movs	r2, r0
    8346:	f7ff fab9 	bl	78bc <_vfprintf_r+0x480>
    834a:	003a      	movs	r2, r7
    834c:	4659      	mov	r1, fp
    834e:	9806      	ldr	r0, [sp, #24]
    8350:	f002 ff6c 	bl	b22c <__sprint_r>
    8354:	2800      	cmp	r0, #0
    8356:	d000      	beq.n	835a <_vfprintf_r+0xf1e>
    8358:	e58b      	b.n	7e72 <_vfprintf_r+0xa36>
    835a:	68bc      	ldr	r4, [r7, #8]
    835c:	ae32      	add	r6, sp, #200	; 0xc8
    835e:	f7ff fc09 	bl	7b74 <_vfprintf_r+0x738>
    8362:	980c      	ldr	r0, [sp, #48]	; 0x30
    8364:	990d      	ldr	r1, [sp, #52]	; 0x34
    8366:	2300      	movs	r3, #0
    8368:	4242      	negs	r2, r0
    836a:	418b      	sbcs	r3, r1
    836c:	0011      	movs	r1, r2
    836e:	001a      	movs	r2, r3
    8370:	232d      	movs	r3, #45	; 0x2d
    8372:	a816      	add	r0, sp, #88	; 0x58
    8374:	77c3      	strb	r3, [r0, #31]
    8376:	0008      	movs	r0, r1
    8378:	4310      	orrs	r0, r2
    837a:	910c      	str	r1, [sp, #48]	; 0x30
    837c:	920d      	str	r2, [sp, #52]	; 0x34
    837e:	4698      	mov	r8, r3
    8380:	0002      	movs	r2, r0
    8382:	3b2c      	subs	r3, #44	; 0x2c
    8384:	f7ff f97b 	bl	767e <_vfprintf_r+0x242>
    8388:	9915      	ldr	r1, [sp, #84]	; 0x54
    838a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    838c:	000a      	movs	r2, r1
    838e:	0008      	movs	r0, r1
    8390:	002b      	movs	r3, r5
    8392:	0029      	movs	r1, r5
    8394:	f004 ff8e 	bl	d2b4 <__aeabi_dcmpun>
    8398:	2800      	cmp	r0, #0
    839a:	d000      	beq.n	839e <_vfprintf_r+0xf62>
    839c:	e2e8      	b.n	8970 <_vfprintf_r+0x1534>
    839e:	4653      	mov	r3, sl
    83a0:	3301      	adds	r3, #1
    83a2:	d100      	bne.n	83a6 <_vfprintf_r+0xf6a>
    83a4:	e1ff      	b.n	87a6 <_vfprintf_r+0x136a>
    83a6:	2320      	movs	r3, #32
    83a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    83aa:	439a      	bics	r2, r3
    83ac:	920e      	str	r2, [sp, #56]	; 0x38
    83ae:	2a47      	cmp	r2, #71	; 0x47
    83b0:	d100      	bne.n	83b4 <_vfprintf_r+0xf78>
    83b2:	e100      	b.n	85b6 <_vfprintf_r+0x117a>
    83b4:	2380      	movs	r3, #128	; 0x80
    83b6:	005b      	lsls	r3, r3, #1
    83b8:	4323      	orrs	r3, r4
    83ba:	9309      	str	r3, [sp, #36]	; 0x24
    83bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    83be:	2b00      	cmp	r3, #0
    83c0:	da00      	bge.n	83c4 <_vfprintf_r+0xf88>
    83c2:	e216      	b.n	87f2 <_vfprintf_r+0x13b6>
    83c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    83c6:	9308      	str	r3, [sp, #32]
    83c8:	2300      	movs	r3, #0
    83ca:	4691      	mov	r9, r2
    83cc:	9310      	str	r3, [sp, #64]	; 0x40
    83ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
    83d0:	2b66      	cmp	r3, #102	; 0x66
    83d2:	d100      	bne.n	83d6 <_vfprintf_r+0xf9a>
    83d4:	e1f1      	b.n	87ba <_vfprintf_r+0x137e>
    83d6:	2b46      	cmp	r3, #70	; 0x46
    83d8:	d100      	bne.n	83dc <_vfprintf_r+0xfa0>
    83da:	e0c0      	b.n	855e <_vfprintf_r+0x1122>
    83dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    83de:	9806      	ldr	r0, [sp, #24]
    83e0:	3a45      	subs	r2, #69	; 0x45
    83e2:	0013      	movs	r3, r2
    83e4:	4259      	negs	r1, r3
    83e6:	4159      	adcs	r1, r3
    83e8:	ab20      	add	r3, sp, #128	; 0x80
    83ea:	000d      	movs	r5, r1
    83ec:	9303      	str	r3, [sp, #12]
    83ee:	ab1f      	add	r3, sp, #124	; 0x7c
    83f0:	9302      	str	r3, [sp, #8]
    83f2:	2302      	movs	r3, #2
    83f4:	aa23      	add	r2, sp, #140	; 0x8c
    83f6:	4455      	add	r5, sl
    83f8:	921b      	str	r2, [sp, #108]	; 0x6c
    83fa:	9204      	str	r2, [sp, #16]
    83fc:	9300      	str	r3, [sp, #0]
    83fe:	9501      	str	r5, [sp, #4]
    8400:	9b08      	ldr	r3, [sp, #32]
    8402:	464a      	mov	r2, r9
    8404:	f000 fc96 	bl	8d34 <_dtoa_r>
    8408:	9b12      	ldr	r3, [sp, #72]	; 0x48
    840a:	9011      	str	r0, [sp, #68]	; 0x44
    840c:	2b67      	cmp	r3, #103	; 0x67
    840e:	d000      	beq.n	8412 <_vfprintf_r+0xfd6>
    8410:	e21e      	b.n	8850 <_vfprintf_r+0x1414>
    8412:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8414:	4698      	mov	r8, r3
    8416:	44a8      	add	r8, r5
    8418:	07e3      	lsls	r3, r4, #31
    841a:	d400      	bmi.n	841e <_vfprintf_r+0xfe2>
    841c:	e27a      	b.n	8914 <_vfprintf_r+0x14d8>
    841e:	2300      	movs	r3, #0
    8420:	2200      	movs	r2, #0
    8422:	4648      	mov	r0, r9
    8424:	9908      	ldr	r1, [sp, #32]
    8426:	f003 f95d 	bl	b6e4 <__aeabi_dcmpeq>
    842a:	4643      	mov	r3, r8
    842c:	2800      	cmp	r0, #0
    842e:	d10a      	bne.n	8446 <_vfprintf_r+0x100a>
    8430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8432:	4543      	cmp	r3, r8
    8434:	d207      	bcs.n	8446 <_vfprintf_r+0x100a>
    8436:	2130      	movs	r1, #48	; 0x30
    8438:	4640      	mov	r0, r8
    843a:	1c5a      	adds	r2, r3, #1
    843c:	9223      	str	r2, [sp, #140]	; 0x8c
    843e:	7019      	strb	r1, [r3, #0]
    8440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8442:	4298      	cmp	r0, r3
    8444:	d8f9      	bhi.n	843a <_vfprintf_r+0xffe>
    8446:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8448:	1a9b      	subs	r3, r3, r2
    844a:	9314      	str	r3, [sp, #80]	; 0x50
    844c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    844e:	2b47      	cmp	r3, #71	; 0x47
    8450:	d100      	bne.n	8454 <_vfprintf_r+0x1018>
    8452:	e0ed      	b.n	8630 <_vfprintf_r+0x11f4>
    8454:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8456:	2b65      	cmp	r3, #101	; 0x65
    8458:	dc00      	bgt.n	845c <_vfprintf_r+0x1020>
    845a:	e20b      	b.n	8874 <_vfprintf_r+0x1438>
    845c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    845e:	2b66      	cmp	r3, #102	; 0x66
    8460:	d100      	bne.n	8464 <_vfprintf_r+0x1028>
    8462:	e1e2      	b.n	882a <_vfprintf_r+0x13ee>
    8464:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8466:	9313      	str	r3, [sp, #76]	; 0x4c
    8468:	9b14      	ldr	r3, [sp, #80]	; 0x50
    846a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    846c:	0019      	movs	r1, r3
    846e:	4291      	cmp	r1, r2
    8470:	dd00      	ble.n	8474 <_vfprintf_r+0x1038>
    8472:	e1c9      	b.n	8808 <_vfprintf_r+0x13cc>
    8474:	07e3      	lsls	r3, r4, #31
    8476:	d500      	bpl.n	847a <_vfprintf_r+0x103e>
    8478:	e24e      	b.n	8918 <_vfprintf_r+0x14dc>
    847a:	43d3      	mvns	r3, r2
    847c:	17db      	asrs	r3, r3, #31
    847e:	0011      	movs	r1, r2
    8480:	401a      	ands	r2, r3
    8482:	2367      	movs	r3, #103	; 0x67
    8484:	9208      	str	r2, [sp, #32]
    8486:	910e      	str	r1, [sp, #56]	; 0x38
    8488:	9312      	str	r3, [sp, #72]	; 0x48
    848a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    848c:	2b00      	cmp	r3, #0
    848e:	d000      	beq.n	8492 <_vfprintf_r+0x1056>
    8490:	e0c6      	b.n	8620 <_vfprintf_r+0x11e4>
    8492:	ab16      	add	r3, sp, #88	; 0x58
    8494:	7fdb      	ldrb	r3, [r3, #31]
    8496:	4698      	mov	r8, r3
    8498:	2300      	movs	r3, #0
    849a:	469a      	mov	sl, r3
    849c:	f7ff f919 	bl	76d2 <_vfprintf_r+0x296>
    84a0:	46cb      	mov	fp, r9
    84a2:	46a1      	mov	r9, r4
    84a4:	0014      	movs	r4, r2
    84a6:	e64d      	b.n	8144 <_vfprintf_r+0xd08>
    84a8:	003a      	movs	r2, r7
    84aa:	4659      	mov	r1, fp
    84ac:	9806      	ldr	r0, [sp, #24]
    84ae:	f002 febd 	bl	b22c <__sprint_r>
    84b2:	2800      	cmp	r0, #0
    84b4:	d000      	beq.n	84b8 <_vfprintf_r+0x107c>
    84b6:	e4dc      	b.n	7e72 <_vfprintf_r+0xa36>
    84b8:	ae32      	add	r6, sp, #200	; 0xc8
    84ba:	e462      	b.n	7d82 <_vfprintf_r+0x946>
    84bc:	4be1      	ldr	r3, [pc, #900]	; (8844 <_vfprintf_r+0x1408>)
    84be:	3401      	adds	r4, #1
    84c0:	6033      	str	r3, [r6, #0]
    84c2:	2301      	movs	r3, #1
    84c4:	6073      	str	r3, [r6, #4]
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	60bc      	str	r4, [r7, #8]
    84ca:	3301      	adds	r3, #1
    84cc:	607b      	str	r3, [r7, #4]
    84ce:	2b07      	cmp	r3, #7
    84d0:	dc65      	bgt.n	859e <_vfprintf_r+0x1162>
    84d2:	3608      	adds	r6, #8
    84d4:	2800      	cmp	r0, #0
    84d6:	d107      	bne.n	84e8 <_vfprintf_r+0x10ac>
    84d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    84da:	2b00      	cmp	r3, #0
    84dc:	d104      	bne.n	84e8 <_vfprintf_r+0x10ac>
    84de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84e0:	07db      	lsls	r3, r3, #31
    84e2:	d401      	bmi.n	84e8 <_vfprintf_r+0x10ac>
    84e4:	f7ff fb90 	bl	7c08 <_vfprintf_r+0x7cc>
    84e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    84ea:	6033      	str	r3, [r6, #0]
    84ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    84ee:	1919      	adds	r1, r3, r4
    84f0:	6073      	str	r3, [r6, #4]
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	60b9      	str	r1, [r7, #8]
    84f6:	3301      	adds	r3, #1
    84f8:	607b      	str	r3, [r7, #4]
    84fa:	2b07      	cmp	r3, #7
    84fc:	dd00      	ble.n	8500 <_vfprintf_r+0x10c4>
    84fe:	e1ea      	b.n	88d6 <_vfprintf_r+0x149a>
    8500:	0032      	movs	r2, r6
    8502:	3208      	adds	r2, #8
    8504:	2800      	cmp	r0, #0
    8506:	da00      	bge.n	850a <_vfprintf_r+0x10ce>
    8508:	e1c4      	b.n	8894 <_vfprintf_r+0x1458>
    850a:	9811      	ldr	r0, [sp, #68]	; 0x44
    850c:	3301      	adds	r3, #1
    850e:	6010      	str	r0, [r2, #0]
    8510:	9814      	ldr	r0, [sp, #80]	; 0x50
    8512:	607b      	str	r3, [r7, #4]
    8514:	1844      	adds	r4, r0, r1
    8516:	6050      	str	r0, [r2, #4]
    8518:	60bc      	str	r4, [r7, #8]
    851a:	2b07      	cmp	r3, #7
    851c:	dd01      	ble.n	8522 <_vfprintf_r+0x10e6>
    851e:	f7ff fc0c 	bl	7d3a <_vfprintf_r+0x8fe>
    8522:	3208      	adds	r2, #8
    8524:	0016      	movs	r6, r2
    8526:	f7ff fb6f 	bl	7c08 <_vfprintf_r+0x7cc>
    852a:	68bb      	ldr	r3, [r7, #8]
    852c:	46d9      	mov	r9, fp
    852e:	2b00      	cmp	r3, #0
    8530:	d100      	bne.n	8534 <_vfprintf_r+0x10f8>
    8532:	e46e      	b.n	7e12 <_vfprintf_r+0x9d6>
    8534:	003a      	movs	r2, r7
    8536:	4659      	mov	r1, fp
    8538:	9806      	ldr	r0, [sp, #24]
    853a:	f002 fe77 	bl	b22c <__sprint_r>
    853e:	e468      	b.n	7e12 <_vfprintf_r+0x9d6>
    8540:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8544:	680b      	ldr	r3, [r1, #0]
    8546:	601a      	str	r2, [r3, #0]
    8548:	17d2      	asrs	r2, r2, #31
    854a:	605a      	str	r2, [r3, #4]
    854c:	000b      	movs	r3, r1
    854e:	3304      	adds	r3, #4
    8550:	930f      	str	r3, [sp, #60]	; 0x3c
    8552:	f7fe ffba 	bl	74ca <_vfprintf_r+0x8e>
    8556:	4bbc      	ldr	r3, [pc, #752]	; (8848 <_vfprintf_r+0x140c>)
    8558:	9311      	str	r3, [sp, #68]	; 0x44
    855a:	f7ff f954 	bl	7806 <_vfprintf_r+0x3ca>
    855e:	ab23      	add	r3, sp, #140	; 0x8c
    8560:	931b      	str	r3, [sp, #108]	; 0x6c
    8562:	9304      	str	r3, [sp, #16]
    8564:	ab20      	add	r3, sp, #128	; 0x80
    8566:	9303      	str	r3, [sp, #12]
    8568:	ab1f      	add	r3, sp, #124	; 0x7c
    856a:	9302      	str	r3, [sp, #8]
    856c:	4653      	mov	r3, sl
    856e:	9301      	str	r3, [sp, #4]
    8570:	2303      	movs	r3, #3
    8572:	464a      	mov	r2, r9
    8574:	9300      	str	r3, [sp, #0]
    8576:	9806      	ldr	r0, [sp, #24]
    8578:	9b08      	ldr	r3, [sp, #32]
    857a:	f000 fbdb 	bl	8d34 <_dtoa_r>
    857e:	4655      	mov	r5, sl
    8580:	9011      	str	r0, [sp, #68]	; 0x44
    8582:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8584:	4698      	mov	r8, r3
    8586:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8588:	44a8      	add	r8, r5
    858a:	2b46      	cmp	r3, #70	; 0x46
    858c:	d000      	beq.n	8590 <_vfprintf_r+0x1154>
    858e:	e746      	b.n	841e <_vfprintf_r+0xfe2>
    8590:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8592:	781b      	ldrb	r3, [r3, #0]
    8594:	2b30      	cmp	r3, #48	; 0x30
    8596:	d015      	beq.n	85c4 <_vfprintf_r+0x1188>
    8598:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    859a:	4498      	add	r8, r3
    859c:	e73f      	b.n	841e <_vfprintf_r+0xfe2>
    859e:	003a      	movs	r2, r7
    85a0:	4659      	mov	r1, fp
    85a2:	9806      	ldr	r0, [sp, #24]
    85a4:	f002 fe42 	bl	b22c <__sprint_r>
    85a8:	2800      	cmp	r0, #0
    85aa:	d000      	beq.n	85ae <_vfprintf_r+0x1172>
    85ac:	e461      	b.n	7e72 <_vfprintf_r+0xa36>
    85ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
    85b0:	68bc      	ldr	r4, [r7, #8]
    85b2:	ae32      	add	r6, sp, #200	; 0xc8
    85b4:	e78e      	b.n	84d4 <_vfprintf_r+0x1098>
    85b6:	4653      	mov	r3, sl
    85b8:	2b00      	cmp	r3, #0
    85ba:	d000      	beq.n	85be <_vfprintf_r+0x1182>
    85bc:	e6fa      	b.n	83b4 <_vfprintf_r+0xf78>
    85be:	3301      	adds	r3, #1
    85c0:	469a      	mov	sl, r3
    85c2:	e6f7      	b.n	83b4 <_vfprintf_r+0xf78>
    85c4:	2200      	movs	r2, #0
    85c6:	2300      	movs	r3, #0
    85c8:	4648      	mov	r0, r9
    85ca:	9908      	ldr	r1, [sp, #32]
    85cc:	f003 f88a 	bl	b6e4 <__aeabi_dcmpeq>
    85d0:	2800      	cmp	r0, #0
    85d2:	d1e1      	bne.n	8598 <_vfprintf_r+0x115c>
    85d4:	2301      	movs	r3, #1
    85d6:	1b5b      	subs	r3, r3, r5
    85d8:	931f      	str	r3, [sp, #124]	; 0x7c
    85da:	4498      	add	r8, r3
    85dc:	e71f      	b.n	841e <_vfprintf_r+0xfe2>
    85de:	464b      	mov	r3, r9
    85e0:	9a07      	ldr	r2, [sp, #28]
    85e2:	431c      	orrs	r4, r3
    85e4:	3201      	adds	r2, #1
    85e6:	7813      	ldrb	r3, [r2, #0]
    85e8:	9207      	str	r2, [sp, #28]
    85ea:	f7fe ffa7 	bl	753c <_vfprintf_r+0x100>
    85ee:	003a      	movs	r2, r7
    85f0:	4659      	mov	r1, fp
    85f2:	9806      	ldr	r0, [sp, #24]
    85f4:	f002 fe1a 	bl	b22c <__sprint_r>
    85f8:	2800      	cmp	r0, #0
    85fa:	d000      	beq.n	85fe <_vfprintf_r+0x11c2>
    85fc:	e439      	b.n	7e72 <_vfprintf_r+0xa36>
    85fe:	68bc      	ldr	r4, [r7, #8]
    8600:	ae32      	add	r6, sp, #200	; 0xc8
    8602:	e573      	b.n	80ec <_vfprintf_r+0xcb0>
    8604:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8606:	ab32      	add	r3, sp, #200	; 0xc8
    8608:	1a9b      	subs	r3, r3, r2
    860a:	930e      	str	r3, [sp, #56]	; 0x38
    860c:	f7ff f859 	bl	76c2 <_vfprintf_r+0x286>
    8610:	9811      	ldr	r0, [sp, #68]	; 0x44
    8612:	f7fe fee1 	bl	73d8 <strlen>
    8616:	0002      	movs	r2, r0
    8618:	900e      	str	r0, [sp, #56]	; 0x38
    861a:	0003      	movs	r3, r0
    861c:	f7ff fa3f 	bl	7a9e <_vfprintf_r+0x662>
    8620:	232d      	movs	r3, #45	; 0x2d
    8622:	aa16      	add	r2, sp, #88	; 0x58
    8624:	77d3      	strb	r3, [r2, #31]
    8626:	4698      	mov	r8, r3
    8628:	2300      	movs	r3, #0
    862a:	469a      	mov	sl, r3
    862c:	f7ff f854 	bl	76d8 <_vfprintf_r+0x29c>
    8630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8632:	9313      	str	r3, [sp, #76]	; 0x4c
    8634:	1cda      	adds	r2, r3, #3
    8636:	db02      	blt.n	863e <_vfprintf_r+0x1202>
    8638:	459a      	cmp	sl, r3
    863a:	db00      	blt.n	863e <_vfprintf_r+0x1202>
    863c:	e714      	b.n	8468 <_vfprintf_r+0x102c>
    863e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8640:	3b02      	subs	r3, #2
    8642:	9312      	str	r3, [sp, #72]	; 0x48
    8644:	222c      	movs	r2, #44	; 0x2c
    8646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8648:	2148      	movs	r1, #72	; 0x48
    864a:	1e5d      	subs	r5, r3, #1
    864c:	ab16      	add	r3, sp, #88	; 0x58
    864e:	189b      	adds	r3, r3, r2
    8650:	466a      	mov	r2, sp
    8652:	1852      	adds	r2, r2, r1
    8654:	7812      	ldrb	r2, [r2, #0]
    8656:	951f      	str	r5, [sp, #124]	; 0x7c
    8658:	701a      	strb	r2, [r3, #0]
    865a:	2d00      	cmp	r5, #0
    865c:	da00      	bge.n	8660 <_vfprintf_r+0x1224>
    865e:	e19c      	b.n	899a <_vfprintf_r+0x155e>
    8660:	212d      	movs	r1, #45	; 0x2d
    8662:	232b      	movs	r3, #43	; 0x2b
    8664:	aa16      	add	r2, sp, #88	; 0x58
    8666:	1852      	adds	r2, r2, r1
    8668:	7013      	strb	r3, [r2, #0]
    866a:	2d09      	cmp	r5, #9
    866c:	dc00      	bgt.n	8670 <_vfprintf_r+0x1234>
    866e:	e144      	b.n	88fa <_vfprintf_r+0x14be>
    8670:	aa16      	add	r2, sp, #88	; 0x58
    8672:	233b      	movs	r3, #59	; 0x3b
    8674:	4694      	mov	ip, r2
    8676:	4463      	add	r3, ip
    8678:	469a      	mov	sl, r3
    867a:	46b1      	mov	r9, r6
    867c:	46a0      	mov	r8, r4
    867e:	4656      	mov	r6, sl
    8680:	e000      	b.n	8684 <_vfprintf_r+0x1248>
    8682:	0026      	movs	r6, r4
    8684:	0028      	movs	r0, r5
    8686:	210a      	movs	r1, #10
    8688:	f7fe f994 	bl	69b4 <__aeabi_idivmod>
    868c:	1e74      	subs	r4, r6, #1
    868e:	3130      	adds	r1, #48	; 0x30
    8690:	7021      	strb	r1, [r4, #0]
    8692:	0028      	movs	r0, r5
    8694:	210a      	movs	r1, #10
    8696:	f7fe f8a7 	bl	67e8 <__divsi3>
    869a:	0005      	movs	r5, r0
    869c:	2809      	cmp	r0, #9
    869e:	dcf0      	bgt.n	8682 <_vfprintf_r+0x1246>
    86a0:	0023      	movs	r3, r4
    86a2:	4644      	mov	r4, r8
    86a4:	46b0      	mov	r8, r6
    86a6:	464e      	mov	r6, r9
    86a8:	4699      	mov	r9, r3
    86aa:	0003      	movs	r3, r0
    86ac:	3330      	adds	r3, #48	; 0x30
    86ae:	b2d8      	uxtb	r0, r3
    86b0:	4643      	mov	r3, r8
    86b2:	3b02      	subs	r3, #2
    86b4:	7018      	strb	r0, [r3, #0]
    86b6:	459a      	cmp	sl, r3
    86b8:	d800      	bhi.n	86bc <_vfprintf_r+0x1280>
    86ba:	e1aa      	b.n	8a12 <_vfprintf_r+0x15d6>
    86bc:	4642      	mov	r2, r8
    86be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    86c0:	4645      	mov	r5, r8
    86c2:	1a99      	subs	r1, r3, r2
    86c4:	2301      	movs	r3, #1
    86c6:	3107      	adds	r1, #7
    86c8:	425b      	negs	r3, r3
    86ca:	e001      	b.n	86d0 <_vfprintf_r+0x1294>
    86cc:	5ce8      	ldrb	r0, [r5, r3]
    86ce:	3301      	adds	r3, #1
    86d0:	aa21      	add	r2, sp, #132	; 0x84
    86d2:	18d2      	adds	r2, r2, r3
    86d4:	70d0      	strb	r0, [r2, #3]
    86d6:	428b      	cmp	r3, r1
    86d8:	d1f8      	bne.n	86cc <_vfprintf_r+0x1290>
    86da:	a916      	add	r1, sp, #88	; 0x58
    86dc:	468c      	mov	ip, r1
    86de:	222e      	movs	r2, #46	; 0x2e
    86e0:	464b      	mov	r3, r9
    86e2:	4462      	add	r2, ip
    86e4:	4694      	mov	ip, r2
    86e6:	1afb      	subs	r3, r7, r3
    86e8:	4463      	add	r3, ip
    86ea:	aa21      	add	r2, sp, #132	; 0x84
    86ec:	9914      	ldr	r1, [sp, #80]	; 0x50
    86ee:	1a9b      	subs	r3, r3, r2
    86f0:	469c      	mov	ip, r3
    86f2:	000a      	movs	r2, r1
    86f4:	4462      	add	r2, ip
    86f6:	931a      	str	r3, [sp, #104]	; 0x68
    86f8:	920e      	str	r2, [sp, #56]	; 0x38
    86fa:	2901      	cmp	r1, #1
    86fc:	dc00      	bgt.n	8700 <_vfprintf_r+0x12c4>
    86fe:	e15c      	b.n	89ba <_vfprintf_r+0x157e>
    8700:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8704:	4694      	mov	ip, r2
    8706:	4463      	add	r3, ip
    8708:	001a      	movs	r2, r3
    870a:	930e      	str	r3, [sp, #56]	; 0x38
    870c:	43db      	mvns	r3, r3
    870e:	17db      	asrs	r3, r3, #31
    8710:	401a      	ands	r2, r3
    8712:	2300      	movs	r3, #0
    8714:	9208      	str	r2, [sp, #32]
    8716:	9313      	str	r3, [sp, #76]	; 0x4c
    8718:	e6b7      	b.n	848a <_vfprintf_r+0x104e>
    871a:	003a      	movs	r2, r7
    871c:	4659      	mov	r1, fp
    871e:	9806      	ldr	r0, [sp, #24]
    8720:	f002 fd84 	bl	b22c <__sprint_r>
    8724:	2800      	cmp	r0, #0
    8726:	d001      	beq.n	872c <_vfprintf_r+0x12f0>
    8728:	f7ff fba3 	bl	7e72 <_vfprintf_r+0xa36>
    872c:	68bc      	ldr	r4, [r7, #8]
    872e:	ae32      	add	r6, sp, #200	; 0xc8
    8730:	e41c      	b.n	7f6c <_vfprintf_r+0xb30>
    8732:	003a      	movs	r2, r7
    8734:	4659      	mov	r1, fp
    8736:	9806      	ldr	r0, [sp, #24]
    8738:	f002 fd78 	bl	b22c <__sprint_r>
    873c:	2800      	cmp	r0, #0
    873e:	d001      	beq.n	8744 <_vfprintf_r+0x1308>
    8740:	f7ff fb97 	bl	7e72 <_vfprintf_r+0xa36>
    8744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8746:	68bc      	ldr	r4, [r7, #8]
    8748:	ae32      	add	r6, sp, #200	; 0xc8
    874a:	e53d      	b.n	81c8 <_vfprintf_r+0xd8c>
    874c:	003a      	movs	r2, r7
    874e:	4659      	mov	r1, fp
    8750:	9806      	ldr	r0, [sp, #24]
    8752:	f002 fd6b 	bl	b22c <__sprint_r>
    8756:	2800      	cmp	r0, #0
    8758:	d001      	beq.n	875e <_vfprintf_r+0x1322>
    875a:	f7ff fb8a 	bl	7e72 <_vfprintf_r+0xa36>
    875e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8760:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8762:	68bc      	ldr	r4, [r7, #8]
    8764:	1a9b      	subs	r3, r3, r2
    8766:	ae32      	add	r6, sp, #200	; 0xc8
    8768:	e549      	b.n	81fe <_vfprintf_r+0xdc2>
    876a:	4653      	mov	r3, sl
    876c:	9308      	str	r3, [sp, #32]
    876e:	2b06      	cmp	r3, #6
    8770:	d901      	bls.n	8776 <_vfprintf_r+0x133a>
    8772:	2306      	movs	r3, #6
    8774:	9308      	str	r3, [sp, #32]
    8776:	9b08      	ldr	r3, [sp, #32]
    8778:	950f      	str	r5, [sp, #60]	; 0x3c
    877a:	930e      	str	r3, [sp, #56]	; 0x38
    877c:	2300      	movs	r3, #0
    877e:	4698      	mov	r8, r3
    8780:	469a      	mov	sl, r3
    8782:	9313      	str	r3, [sp, #76]	; 0x4c
    8784:	4b31      	ldr	r3, [pc, #196]	; (884c <_vfprintf_r+0x1410>)
    8786:	9409      	str	r4, [sp, #36]	; 0x24
    8788:	9311      	str	r3, [sp, #68]	; 0x44
    878a:	f7fe ffa8 	bl	76de <_vfprintf_r+0x2a2>
    878e:	003a      	movs	r2, r7
    8790:	4659      	mov	r1, fp
    8792:	9806      	ldr	r0, [sp, #24]
    8794:	f002 fd4a 	bl	b22c <__sprint_r>
    8798:	2800      	cmp	r0, #0
    879a:	d001      	beq.n	87a0 <_vfprintf_r+0x1364>
    879c:	f7ff fb69 	bl	7e72 <_vfprintf_r+0xa36>
    87a0:	68bc      	ldr	r4, [r7, #8]
    87a2:	ae32      	add	r6, sp, #200	; 0xc8
    87a4:	e509      	b.n	81ba <_vfprintf_r+0xd7e>
    87a6:	2320      	movs	r3, #32
    87a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    87aa:	439a      	bics	r2, r3
    87ac:	3b1a      	subs	r3, #26
    87ae:	920e      	str	r2, [sp, #56]	; 0x38
    87b0:	469a      	mov	sl, r3
    87b2:	e5ff      	b.n	83b4 <_vfprintf_r+0xf78>
    87b4:	46c1      	mov	r9, r8
    87b6:	f7ff fb2c 	bl	7e12 <_vfprintf_r+0x9d6>
    87ba:	ab23      	add	r3, sp, #140	; 0x8c
    87bc:	931b      	str	r3, [sp, #108]	; 0x6c
    87be:	9304      	str	r3, [sp, #16]
    87c0:	ab20      	add	r3, sp, #128	; 0x80
    87c2:	9303      	str	r3, [sp, #12]
    87c4:	ab1f      	add	r3, sp, #124	; 0x7c
    87c6:	9302      	str	r3, [sp, #8]
    87c8:	4653      	mov	r3, sl
    87ca:	9301      	str	r3, [sp, #4]
    87cc:	2303      	movs	r3, #3
    87ce:	464a      	mov	r2, r9
    87d0:	9300      	str	r3, [sp, #0]
    87d2:	9806      	ldr	r0, [sp, #24]
    87d4:	9b08      	ldr	r3, [sp, #32]
    87d6:	f000 faad 	bl	8d34 <_dtoa_r>
    87da:	0003      	movs	r3, r0
    87dc:	4453      	add	r3, sl
    87de:	9011      	str	r0, [sp, #68]	; 0x44
    87e0:	4698      	mov	r8, r3
    87e2:	4655      	mov	r5, sl
    87e4:	e6d4      	b.n	8590 <_vfprintf_r+0x1154>
    87e6:	232d      	movs	r3, #45	; 0x2d
    87e8:	aa16      	add	r2, sp, #88	; 0x58
    87ea:	77d3      	strb	r3, [r2, #31]
    87ec:	4698      	mov	r8, r3
    87ee:	f7ff f803 	bl	77f8 <_vfprintf_r+0x3bc>
    87f2:	2280      	movs	r2, #128	; 0x80
    87f4:	0612      	lsls	r2, r2, #24
    87f6:	4694      	mov	ip, r2
    87f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87fa:	4699      	mov	r9, r3
    87fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    87fe:	4463      	add	r3, ip
    8800:	9308      	str	r3, [sp, #32]
    8802:	232d      	movs	r3, #45	; 0x2d
    8804:	9310      	str	r3, [sp, #64]	; 0x40
    8806:	e5e2      	b.n	83ce <_vfprintf_r+0xf92>
    8808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    880a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    880c:	4694      	mov	ip, r2
    880e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8810:	4463      	add	r3, ip
    8812:	930e      	str	r3, [sp, #56]	; 0x38
    8814:	2a00      	cmp	r2, #0
    8816:	dc00      	bgt.n	881a <_vfprintf_r+0x13de>
    8818:	e0c8      	b.n	89ac <_vfprintf_r+0x1570>
    881a:	001a      	movs	r2, r3
    881c:	43db      	mvns	r3, r3
    881e:	17db      	asrs	r3, r3, #31
    8820:	401a      	ands	r2, r3
    8822:	2367      	movs	r3, #103	; 0x67
    8824:	9208      	str	r2, [sp, #32]
    8826:	9312      	str	r3, [sp, #72]	; 0x48
    8828:	e62f      	b.n	848a <_vfprintf_r+0x104e>
    882a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    882c:	9313      	str	r3, [sp, #76]	; 0x4c
    882e:	2b00      	cmp	r3, #0
    8830:	dc00      	bgt.n	8834 <_vfprintf_r+0x13f8>
    8832:	e0db      	b.n	89ec <_vfprintf_r+0x15b0>
    8834:	4652      	mov	r2, sl
    8836:	2a00      	cmp	r2, #0
    8838:	d175      	bne.n	8926 <_vfprintf_r+0x14ea>
    883a:	07e2      	lsls	r2, r4, #31
    883c:	d473      	bmi.n	8926 <_vfprintf_r+0x14ea>
    883e:	9308      	str	r3, [sp, #32]
    8840:	930e      	str	r3, [sp, #56]	; 0x38
    8842:	e622      	b.n	848a <_vfprintf_r+0x104e>
    8844:	0000d7fc 	.word	0x0000d7fc
    8848:	0000d7bc 	.word	0x0000d7bc
    884c:	0000d7f4 	.word	0x0000d7f4
    8850:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8852:	4698      	mov	r8, r3
    8854:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8856:	44a8      	add	r8, r5
    8858:	2b47      	cmp	r3, #71	; 0x47
    885a:	d000      	beq.n	885e <_vfprintf_r+0x1422>
    885c:	e5df      	b.n	841e <_vfprintf_r+0xfe2>
    885e:	07e3      	lsls	r3, r4, #31
    8860:	d500      	bpl.n	8864 <_vfprintf_r+0x1428>
    8862:	e68e      	b.n	8582 <_vfprintf_r+0x1146>
    8864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8866:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8868:	1a9b      	subs	r3, r3, r2
    886a:	9314      	str	r3, [sp, #80]	; 0x50
    886c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    886e:	2b47      	cmp	r3, #71	; 0x47
    8870:	d100      	bne.n	8874 <_vfprintf_r+0x1438>
    8872:	e6dd      	b.n	8630 <_vfprintf_r+0x11f4>
    8874:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8876:	9313      	str	r3, [sp, #76]	; 0x4c
    8878:	e6e4      	b.n	8644 <_vfprintf_r+0x1208>
    887a:	ab16      	add	r3, sp, #88	; 0x58
    887c:	7fdb      	ldrb	r3, [r3, #31]
    887e:	950f      	str	r5, [sp, #60]	; 0x3c
    8880:	4698      	mov	r8, r3
    8882:	4653      	mov	r3, sl
    8884:	9308      	str	r3, [sp, #32]
    8886:	930e      	str	r3, [sp, #56]	; 0x38
    8888:	2300      	movs	r3, #0
    888a:	9409      	str	r4, [sp, #36]	; 0x24
    888c:	469a      	mov	sl, r3
    888e:	9313      	str	r3, [sp, #76]	; 0x4c
    8890:	f7fe ff1f 	bl	76d2 <_vfprintf_r+0x296>
    8894:	4244      	negs	r4, r0
    8896:	3010      	adds	r0, #16
    8898:	db00      	blt.n	889c <_vfprintf_r+0x1460>
    889a:	e0cf      	b.n	8a3c <_vfprintf_r+0x1600>
    889c:	486b      	ldr	r0, [pc, #428]	; (8a4c <_vfprintf_r+0x1610>)
    889e:	2610      	movs	r6, #16
    88a0:	0005      	movs	r5, r0
    88a2:	e003      	b.n	88ac <_vfprintf_r+0x1470>
    88a4:	3208      	adds	r2, #8
    88a6:	3c10      	subs	r4, #16
    88a8:	2c10      	cmp	r4, #16
    88aa:	dd48      	ble.n	893e <_vfprintf_r+0x1502>
    88ac:	3110      	adds	r1, #16
    88ae:	3301      	adds	r3, #1
    88b0:	6015      	str	r5, [r2, #0]
    88b2:	6056      	str	r6, [r2, #4]
    88b4:	60b9      	str	r1, [r7, #8]
    88b6:	607b      	str	r3, [r7, #4]
    88b8:	2b07      	cmp	r3, #7
    88ba:	ddf3      	ble.n	88a4 <_vfprintf_r+0x1468>
    88bc:	003a      	movs	r2, r7
    88be:	4659      	mov	r1, fp
    88c0:	9806      	ldr	r0, [sp, #24]
    88c2:	f002 fcb3 	bl	b22c <__sprint_r>
    88c6:	2800      	cmp	r0, #0
    88c8:	d001      	beq.n	88ce <_vfprintf_r+0x1492>
    88ca:	f7ff fad2 	bl	7e72 <_vfprintf_r+0xa36>
    88ce:	68b9      	ldr	r1, [r7, #8]
    88d0:	687b      	ldr	r3, [r7, #4]
    88d2:	aa32      	add	r2, sp, #200	; 0xc8
    88d4:	e7e7      	b.n	88a6 <_vfprintf_r+0x146a>
    88d6:	003a      	movs	r2, r7
    88d8:	4659      	mov	r1, fp
    88da:	9806      	ldr	r0, [sp, #24]
    88dc:	f002 fca6 	bl	b22c <__sprint_r>
    88e0:	2800      	cmp	r0, #0
    88e2:	d001      	beq.n	88e8 <_vfprintf_r+0x14ac>
    88e4:	f7ff fac5 	bl	7e72 <_vfprintf_r+0xa36>
    88e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    88ea:	68b9      	ldr	r1, [r7, #8]
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	aa32      	add	r2, sp, #200	; 0xc8
    88f0:	e608      	b.n	8504 <_vfprintf_r+0x10c8>
    88f2:	4642      	mov	r2, r8
    88f4:	9207      	str	r2, [sp, #28]
    88f6:	f7fe fe24 	bl	7542 <_vfprintf_r+0x106>
    88fa:	212e      	movs	r1, #46	; 0x2e
    88fc:	2330      	movs	r3, #48	; 0x30
    88fe:	aa16      	add	r2, sp, #88	; 0x58
    8900:	1852      	adds	r2, r2, r1
    8902:	7013      	strb	r3, [r2, #0]
    8904:	002b      	movs	r3, r5
    8906:	aa16      	add	r2, sp, #88	; 0x58
    8908:	3101      	adds	r1, #1
    890a:	3330      	adds	r3, #48	; 0x30
    890c:	1852      	adds	r2, r2, r1
    890e:	7013      	strb	r3, [r2, #0]
    8910:	ab22      	add	r3, sp, #136	; 0x88
    8912:	e6ea      	b.n	86ea <_vfprintf_r+0x12ae>
    8914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8916:	e596      	b.n	8446 <_vfprintf_r+0x100a>
    8918:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    891a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    891c:	4694      	mov	ip, r2
    891e:	4463      	add	r3, ip
    8920:	001a      	movs	r2, r3
    8922:	930e      	str	r3, [sp, #56]	; 0x38
    8924:	e77a      	b.n	881c <_vfprintf_r+0x13e0>
    8926:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8928:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    892a:	4694      	mov	ip, r2
    892c:	4463      	add	r3, ip
    892e:	4453      	add	r3, sl
    8930:	001a      	movs	r2, r3
    8932:	930e      	str	r3, [sp, #56]	; 0x38
    8934:	43db      	mvns	r3, r3
    8936:	17db      	asrs	r3, r3, #31
    8938:	401a      	ands	r2, r3
    893a:	9208      	str	r2, [sp, #32]
    893c:	e5a5      	b.n	848a <_vfprintf_r+0x104e>
    893e:	46a9      	mov	r9, r5
    8940:	4648      	mov	r0, r9
    8942:	1909      	adds	r1, r1, r4
    8944:	3301      	adds	r3, #1
    8946:	6010      	str	r0, [r2, #0]
    8948:	6054      	str	r4, [r2, #4]
    894a:	60b9      	str	r1, [r7, #8]
    894c:	3208      	adds	r2, #8
    894e:	607b      	str	r3, [r7, #4]
    8950:	2b07      	cmp	r3, #7
    8952:	dc00      	bgt.n	8956 <_vfprintf_r+0x151a>
    8954:	e5d9      	b.n	850a <_vfprintf_r+0x10ce>
    8956:	003a      	movs	r2, r7
    8958:	4659      	mov	r1, fp
    895a:	9806      	ldr	r0, [sp, #24]
    895c:	f002 fc66 	bl	b22c <__sprint_r>
    8960:	2800      	cmp	r0, #0
    8962:	d001      	beq.n	8968 <_vfprintf_r+0x152c>
    8964:	f7ff fa85 	bl	7e72 <_vfprintf_r+0xa36>
    8968:	68b9      	ldr	r1, [r7, #8]
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	aa32      	add	r2, sp, #200	; 0xc8
    896e:	e5cc      	b.n	850a <_vfprintf_r+0x10ce>
    8970:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8972:	2b47      	cmp	r3, #71	; 0x47
    8974:	dc0e      	bgt.n	8994 <_vfprintf_r+0x1558>
    8976:	4b36      	ldr	r3, [pc, #216]	; (8a50 <_vfprintf_r+0x1614>)
    8978:	9311      	str	r3, [sp, #68]	; 0x44
    897a:	2380      	movs	r3, #128	; 0x80
    897c:	439c      	bics	r4, r3
    897e:	ab16      	add	r3, sp, #88	; 0x58
    8980:	7fdb      	ldrb	r3, [r3, #31]
    8982:	9409      	str	r4, [sp, #36]	; 0x24
    8984:	4698      	mov	r8, r3
    8986:	f7fe ff41 	bl	780c <_vfprintf_r+0x3d0>
    898a:	4a30      	ldr	r2, [pc, #192]	; (8a4c <_vfprintf_r+0x1610>)
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	4691      	mov	r9, r2
    8990:	f7ff fc07 	bl	81a2 <_vfprintf_r+0xd66>
    8994:	4b2f      	ldr	r3, [pc, #188]	; (8a54 <_vfprintf_r+0x1618>)
    8996:	9311      	str	r3, [sp, #68]	; 0x44
    8998:	e7ef      	b.n	897a <_vfprintf_r+0x153e>
    899a:	2301      	movs	r3, #1
    899c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    899e:	391b      	subs	r1, #27
    89a0:	1a9d      	subs	r5, r3, r2
    89a2:	aa16      	add	r2, sp, #88	; 0x58
    89a4:	332c      	adds	r3, #44	; 0x2c
    89a6:	1852      	adds	r2, r2, r1
    89a8:	7013      	strb	r3, [r2, #0]
    89aa:	e65e      	b.n	866a <_vfprintf_r+0x122e>
    89ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    89ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    89b0:	1a98      	subs	r0, r3, r2
    89b2:	1c43      	adds	r3, r0, #1
    89b4:	001a      	movs	r2, r3
    89b6:	930e      	str	r3, [sp, #56]	; 0x38
    89b8:	e730      	b.n	881c <_vfprintf_r+0x13e0>
    89ba:	2301      	movs	r3, #1
    89bc:	4023      	ands	r3, r4
    89be:	9313      	str	r3, [sp, #76]	; 0x4c
    89c0:	d000      	beq.n	89c4 <_vfprintf_r+0x1588>
    89c2:	e69d      	b.n	8700 <_vfprintf_r+0x12c4>
    89c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    89c6:	43d3      	mvns	r3, r2
    89c8:	17db      	asrs	r3, r3, #31
    89ca:	401a      	ands	r2, r3
    89cc:	9208      	str	r2, [sp, #32]
    89ce:	e55c      	b.n	848a <_vfprintf_r+0x104e>
    89d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    89d2:	1d1d      	adds	r5, r3, #4
    89d4:	681b      	ldr	r3, [r3, #0]
    89d6:	46a8      	mov	r8, r5
    89d8:	469a      	mov	sl, r3
    89da:	2b00      	cmp	r3, #0
    89dc:	db31      	blt.n	8a42 <_vfprintf_r+0x1606>
    89de:	4645      	mov	r5, r8
    89e0:	9b07      	ldr	r3, [sp, #28]
    89e2:	950f      	str	r5, [sp, #60]	; 0x3c
    89e4:	785b      	ldrb	r3, [r3, #1]
    89e6:	9207      	str	r2, [sp, #28]
    89e8:	f7fe fda8 	bl	753c <_vfprintf_r+0x100>
    89ec:	4653      	mov	r3, sl
    89ee:	2b00      	cmp	r3, #0
    89f0:	d101      	bne.n	89f6 <_vfprintf_r+0x15ba>
    89f2:	07e3      	lsls	r3, r4, #31
    89f4:	d503      	bpl.n	89fe <_vfprintf_r+0x15c2>
    89f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    89f8:	1c58      	adds	r0, r3, #1
    89fa:	0003      	movs	r3, r0
    89fc:	e797      	b.n	892e <_vfprintf_r+0x14f2>
    89fe:	2301      	movs	r3, #1
    8a00:	e71d      	b.n	883e <_vfprintf_r+0x1402>
    8a02:	ab16      	add	r3, sp, #88	; 0x58
    8a04:	77d8      	strb	r0, [r3, #31]
    8a06:	f7ff f870 	bl	7aea <_vfprintf_r+0x6ae>
    8a0a:	ab16      	add	r3, sp, #88	; 0x58
    8a0c:	77d8      	strb	r0, [r3, #31]
    8a0e:	f7fe ff2e 	bl	786e <_vfprintf_r+0x432>
    8a12:	aa16      	add	r2, sp, #88	; 0x58
    8a14:	232e      	movs	r3, #46	; 0x2e
    8a16:	4694      	mov	ip, r2
    8a18:	4463      	add	r3, ip
    8a1a:	e666      	b.n	86ea <_vfprintf_r+0x12ae>
    8a1c:	ab16      	add	r3, sp, #88	; 0x58
    8a1e:	77d8      	strb	r0, [r3, #31]
    8a20:	f7fe feb5 	bl	778e <_vfprintf_r+0x352>
    8a24:	ab16      	add	r3, sp, #88	; 0x58
    8a26:	77d8      	strb	r0, [r3, #31]
    8a28:	f7fe fe06 	bl	7638 <_vfprintf_r+0x1fc>
    8a2c:	ab16      	add	r3, sp, #88	; 0x58
    8a2e:	77d8      	strb	r0, [r3, #31]
    8a30:	f7ff f806 	bl	7a40 <_vfprintf_r+0x604>
    8a34:	ab16      	add	r3, sp, #88	; 0x58
    8a36:	77d8      	strb	r0, [r3, #31]
    8a38:	f7fe ffbd 	bl	79b6 <_vfprintf_r+0x57a>
    8a3c:	4803      	ldr	r0, [pc, #12]	; (8a4c <_vfprintf_r+0x1610>)
    8a3e:	4681      	mov	r9, r0
    8a40:	e77e      	b.n	8940 <_vfprintf_r+0x1504>
    8a42:	2301      	movs	r3, #1
    8a44:	425b      	negs	r3, r3
    8a46:	469a      	mov	sl, r3
    8a48:	e7c9      	b.n	89de <_vfprintf_r+0x15a2>
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	0000d810 	.word	0x0000d810
    8a50:	0000d7c4 	.word	0x0000d7c4
    8a54:	0000d7c8 	.word	0x0000d7c8

00008a58 <__sbprintf>:
    8a58:	b570      	push	{r4, r5, r6, lr}
    8a5a:	0006      	movs	r6, r0
    8a5c:	2002      	movs	r0, #2
    8a5e:	4c1a      	ldr	r4, [pc, #104]	; (8ac8 <__sbprintf+0x70>)
    8a60:	44a5      	add	sp, r4
    8a62:	000c      	movs	r4, r1
    8a64:	8989      	ldrh	r1, [r1, #12]
    8a66:	4381      	bics	r1, r0
    8a68:	4668      	mov	r0, sp
    8a6a:	8181      	strh	r1, [r0, #12]
    8a6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    8a6e:	9119      	str	r1, [sp, #100]	; 0x64
    8a70:	89e1      	ldrh	r1, [r4, #14]
    8a72:	81c1      	strh	r1, [r0, #14]
    8a74:	69e1      	ldr	r1, [r4, #28]
    8a76:	0030      	movs	r0, r6
    8a78:	9107      	str	r1, [sp, #28]
    8a7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8a7c:	9109      	str	r1, [sp, #36]	; 0x24
    8a7e:	a91a      	add	r1, sp, #104	; 0x68
    8a80:	9100      	str	r1, [sp, #0]
    8a82:	9104      	str	r1, [sp, #16]
    8a84:	2180      	movs	r1, #128	; 0x80
    8a86:	00c9      	lsls	r1, r1, #3
    8a88:	9102      	str	r1, [sp, #8]
    8a8a:	9105      	str	r1, [sp, #20]
    8a8c:	2100      	movs	r1, #0
    8a8e:	9106      	str	r1, [sp, #24]
    8a90:	4669      	mov	r1, sp
    8a92:	f7fe fcd3 	bl	743c <_vfprintf_r>
    8a96:	1e05      	subs	r5, r0, #0
    8a98:	db05      	blt.n	8aa6 <__sbprintf+0x4e>
    8a9a:	4669      	mov	r1, sp
    8a9c:	0030      	movs	r0, r6
    8a9e:	f001 f9b5 	bl	9e0c <_fflush_r>
    8aa2:	2800      	cmp	r0, #0
    8aa4:	d10c      	bne.n	8ac0 <__sbprintf+0x68>
    8aa6:	466b      	mov	r3, sp
    8aa8:	899b      	ldrh	r3, [r3, #12]
    8aaa:	065b      	lsls	r3, r3, #25
    8aac:	d503      	bpl.n	8ab6 <__sbprintf+0x5e>
    8aae:	2240      	movs	r2, #64	; 0x40
    8ab0:	89a3      	ldrh	r3, [r4, #12]
    8ab2:	4313      	orrs	r3, r2
    8ab4:	81a3      	strh	r3, [r4, #12]
    8ab6:	0028      	movs	r0, r5
    8ab8:	238d      	movs	r3, #141	; 0x8d
    8aba:	00db      	lsls	r3, r3, #3
    8abc:	449d      	add	sp, r3
    8abe:	bd70      	pop	{r4, r5, r6, pc}
    8ac0:	2501      	movs	r5, #1
    8ac2:	426d      	negs	r5, r5
    8ac4:	e7ef      	b.n	8aa6 <__sbprintf+0x4e>
    8ac6:	46c0      	nop			; (mov r8, r8)
    8ac8:	fffffb98 	.word	0xfffffb98

00008acc <vprintf>:
    8acc:	b510      	push	{r4, lr}
    8ace:	000b      	movs	r3, r1
    8ad0:	4903      	ldr	r1, [pc, #12]	; (8ae0 <vprintf+0x14>)
    8ad2:	0002      	movs	r2, r0
    8ad4:	6808      	ldr	r0, [r1, #0]
    8ad6:	6881      	ldr	r1, [r0, #8]
    8ad8:	f7fe fcb0 	bl	743c <_vfprintf_r>
    8adc:	bd10      	pop	{r4, pc}
    8ade:	46c0      	nop			; (mov r8, r8)
    8ae0:	20000118 	.word	0x20000118

00008ae4 <__swsetup_r>:
    8ae4:	4b33      	ldr	r3, [pc, #204]	; (8bb4 <__swsetup_r+0xd0>)
    8ae6:	b570      	push	{r4, r5, r6, lr}
    8ae8:	0005      	movs	r5, r0
    8aea:	6818      	ldr	r0, [r3, #0]
    8aec:	000c      	movs	r4, r1
    8aee:	2800      	cmp	r0, #0
    8af0:	d002      	beq.n	8af8 <__swsetup_r+0x14>
    8af2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8af4:	2b00      	cmp	r3, #0
    8af6:	d03c      	beq.n	8b72 <__swsetup_r+0x8e>
    8af8:	230c      	movs	r3, #12
    8afa:	5ee2      	ldrsh	r2, [r4, r3]
    8afc:	b293      	uxth	r3, r2
    8afe:	0719      	lsls	r1, r3, #28
    8b00:	d50d      	bpl.n	8b1e <__swsetup_r+0x3a>
    8b02:	6921      	ldr	r1, [r4, #16]
    8b04:	2900      	cmp	r1, #0
    8b06:	d015      	beq.n	8b34 <__swsetup_r+0x50>
    8b08:	07da      	lsls	r2, r3, #31
    8b0a:	d521      	bpl.n	8b50 <__swsetup_r+0x6c>
    8b0c:	2300      	movs	r3, #0
    8b0e:	60a3      	str	r3, [r4, #8]
    8b10:	6963      	ldr	r3, [r4, #20]
    8b12:	2000      	movs	r0, #0
    8b14:	425b      	negs	r3, r3
    8b16:	61a3      	str	r3, [r4, #24]
    8b18:	2900      	cmp	r1, #0
    8b1a:	d021      	beq.n	8b60 <__swsetup_r+0x7c>
    8b1c:	bd70      	pop	{r4, r5, r6, pc}
    8b1e:	06d9      	lsls	r1, r3, #27
    8b20:	d53f      	bpl.n	8ba2 <__swsetup_r+0xbe>
    8b22:	075b      	lsls	r3, r3, #29
    8b24:	d428      	bmi.n	8b78 <__swsetup_r+0x94>
    8b26:	6921      	ldr	r1, [r4, #16]
    8b28:	2308      	movs	r3, #8
    8b2a:	4313      	orrs	r3, r2
    8b2c:	81a3      	strh	r3, [r4, #12]
    8b2e:	b29b      	uxth	r3, r3
    8b30:	2900      	cmp	r1, #0
    8b32:	d1e9      	bne.n	8b08 <__swsetup_r+0x24>
    8b34:	22a0      	movs	r2, #160	; 0xa0
    8b36:	2080      	movs	r0, #128	; 0x80
    8b38:	0092      	lsls	r2, r2, #2
    8b3a:	0080      	lsls	r0, r0, #2
    8b3c:	401a      	ands	r2, r3
    8b3e:	4282      	cmp	r2, r0
    8b40:	d0e2      	beq.n	8b08 <__swsetup_r+0x24>
    8b42:	0021      	movs	r1, r4
    8b44:	0028      	movs	r0, r5
    8b46:	f001 fd41 	bl	a5cc <__smakebuf_r>
    8b4a:	89a3      	ldrh	r3, [r4, #12]
    8b4c:	6921      	ldr	r1, [r4, #16]
    8b4e:	e7db      	b.n	8b08 <__swsetup_r+0x24>
    8b50:	2200      	movs	r2, #0
    8b52:	079b      	lsls	r3, r3, #30
    8b54:	d400      	bmi.n	8b58 <__swsetup_r+0x74>
    8b56:	6962      	ldr	r2, [r4, #20]
    8b58:	60a2      	str	r2, [r4, #8]
    8b5a:	2000      	movs	r0, #0
    8b5c:	2900      	cmp	r1, #0
    8b5e:	d1dd      	bne.n	8b1c <__swsetup_r+0x38>
    8b60:	220c      	movs	r2, #12
    8b62:	5ea3      	ldrsh	r3, [r4, r2]
    8b64:	061a      	lsls	r2, r3, #24
    8b66:	d5d9      	bpl.n	8b1c <__swsetup_r+0x38>
    8b68:	2240      	movs	r2, #64	; 0x40
    8b6a:	4313      	orrs	r3, r2
    8b6c:	81a3      	strh	r3, [r4, #12]
    8b6e:	3801      	subs	r0, #1
    8b70:	e7d4      	b.n	8b1c <__swsetup_r+0x38>
    8b72:	f001 f9e1 	bl	9f38 <__sinit>
    8b76:	e7bf      	b.n	8af8 <__swsetup_r+0x14>
    8b78:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8b7a:	2900      	cmp	r1, #0
    8b7c:	d00a      	beq.n	8b94 <__swsetup_r+0xb0>
    8b7e:	0023      	movs	r3, r4
    8b80:	3340      	adds	r3, #64	; 0x40
    8b82:	4299      	cmp	r1, r3
    8b84:	d004      	beq.n	8b90 <__swsetup_r+0xac>
    8b86:	0028      	movs	r0, r5
    8b88:	f001 fa4c 	bl	a024 <_free_r>
    8b8c:	230c      	movs	r3, #12
    8b8e:	5ee2      	ldrsh	r2, [r4, r3]
    8b90:	2300      	movs	r3, #0
    8b92:	6323      	str	r3, [r4, #48]	; 0x30
    8b94:	2324      	movs	r3, #36	; 0x24
    8b96:	439a      	bics	r2, r3
    8b98:	2300      	movs	r3, #0
    8b9a:	6921      	ldr	r1, [r4, #16]
    8b9c:	6063      	str	r3, [r4, #4]
    8b9e:	6021      	str	r1, [r4, #0]
    8ba0:	e7c2      	b.n	8b28 <__swsetup_r+0x44>
    8ba2:	2309      	movs	r3, #9
    8ba4:	602b      	str	r3, [r5, #0]
    8ba6:	2340      	movs	r3, #64	; 0x40
    8ba8:	2001      	movs	r0, #1
    8baa:	431a      	orrs	r2, r3
    8bac:	81a2      	strh	r2, [r4, #12]
    8bae:	4240      	negs	r0, r0
    8bb0:	e7b4      	b.n	8b1c <__swsetup_r+0x38>
    8bb2:	46c0      	nop			; (mov r8, r8)
    8bb4:	20000118 	.word	0x20000118

00008bb8 <register_fini>:
    8bb8:	4b03      	ldr	r3, [pc, #12]	; (8bc8 <register_fini+0x10>)
    8bba:	b510      	push	{r4, lr}
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d002      	beq.n	8bc6 <register_fini+0xe>
    8bc0:	4802      	ldr	r0, [pc, #8]	; (8bcc <register_fini+0x14>)
    8bc2:	f000 f805 	bl	8bd0 <atexit>
    8bc6:	bd10      	pop	{r4, pc}
    8bc8:	00000000 	.word	0x00000000
    8bcc:	00009f51 	.word	0x00009f51

00008bd0 <atexit>:
    8bd0:	b510      	push	{r4, lr}
    8bd2:	0001      	movs	r1, r0
    8bd4:	2300      	movs	r3, #0
    8bd6:	2200      	movs	r2, #0
    8bd8:	2000      	movs	r0, #0
    8bda:	f002 fbb1 	bl	b340 <__register_exitproc>
    8bde:	bd10      	pop	{r4, pc}

00008be0 <quorem>:
    8be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8be2:	4645      	mov	r5, r8
    8be4:	4680      	mov	r8, r0
    8be6:	46de      	mov	lr, fp
    8be8:	4657      	mov	r7, sl
    8bea:	464e      	mov	r6, r9
    8bec:	4642      	mov	r2, r8
    8bee:	b5e0      	push	{r5, r6, r7, lr}
    8bf0:	690c      	ldr	r4, [r1, #16]
    8bf2:	6912      	ldr	r2, [r2, #16]
    8bf4:	b085      	sub	sp, #20
    8bf6:	000b      	movs	r3, r1
    8bf8:	9102      	str	r1, [sp, #8]
    8bfa:	2000      	movs	r0, #0
    8bfc:	4294      	cmp	r4, r2
    8bfe:	dd00      	ble.n	8c02 <quorem+0x22>
    8c00:	e090      	b.n	8d24 <quorem+0x144>
    8c02:	2214      	movs	r2, #20
    8c04:	4694      	mov	ip, r2
    8c06:	4463      	add	r3, ip
    8c08:	4699      	mov	r9, r3
    8c0a:	464a      	mov	r2, r9
    8c0c:	3c01      	subs	r4, #1
    8c0e:	00a3      	lsls	r3, r4, #2
    8c10:	18d6      	adds	r6, r2, r3
    8c12:	2214      	movs	r2, #20
    8c14:	4442      	add	r2, r8
    8c16:	4693      	mov	fp, r2
    8c18:	449b      	add	fp, r3
    8c1a:	6833      	ldr	r3, [r6, #0]
    8c1c:	0015      	movs	r5, r2
    8c1e:	1c59      	adds	r1, r3, #1
    8c20:	465b      	mov	r3, fp
    8c22:	6818      	ldr	r0, [r3, #0]
    8c24:	9201      	str	r2, [sp, #4]
    8c26:	f7fd fd55 	bl	66d4 <__udivsi3>
    8c2a:	1e03      	subs	r3, r0, #0
    8c2c:	9000      	str	r0, [sp, #0]
    8c2e:	d042      	beq.n	8cb6 <quorem+0xd6>
    8c30:	0029      	movs	r1, r5
    8c32:	2700      	movs	r7, #0
    8c34:	464d      	mov	r5, r9
    8c36:	2000      	movs	r0, #0
    8c38:	46b1      	mov	r9, r6
    8c3a:	46a2      	mov	sl, r4
    8c3c:	003e      	movs	r6, r7
    8c3e:	0004      	movs	r4, r0
    8c40:	469c      	mov	ip, r3
    8c42:	002f      	movs	r7, r5
    8c44:	0008      	movs	r0, r1
    8c46:	9503      	str	r5, [sp, #12]
    8c48:	4663      	mov	r3, ip
    8c4a:	cf04      	ldmia	r7!, {r2}
    8c4c:	0415      	lsls	r5, r2, #16
    8c4e:	0c2d      	lsrs	r5, r5, #16
    8c50:	435d      	muls	r5, r3
    8c52:	0c12      	lsrs	r2, r2, #16
    8c54:	435a      	muls	r2, r3
    8c56:	19ad      	adds	r5, r5, r6
    8c58:	0c2b      	lsrs	r3, r5, #16
    8c5a:	18d2      	adds	r2, r2, r3
    8c5c:	6803      	ldr	r3, [r0, #0]
    8c5e:	042d      	lsls	r5, r5, #16
    8c60:	0419      	lsls	r1, r3, #16
    8c62:	0c09      	lsrs	r1, r1, #16
    8c64:	1909      	adds	r1, r1, r4
    8c66:	0c16      	lsrs	r6, r2, #16
    8c68:	0c2d      	lsrs	r5, r5, #16
    8c6a:	0412      	lsls	r2, r2, #16
    8c6c:	1b49      	subs	r1, r1, r5
    8c6e:	0c12      	lsrs	r2, r2, #16
    8c70:	0c1b      	lsrs	r3, r3, #16
    8c72:	1a9b      	subs	r3, r3, r2
    8c74:	140a      	asrs	r2, r1, #16
    8c76:	189b      	adds	r3, r3, r2
    8c78:	0409      	lsls	r1, r1, #16
    8c7a:	141c      	asrs	r4, r3, #16
    8c7c:	0c09      	lsrs	r1, r1, #16
    8c7e:	041b      	lsls	r3, r3, #16
    8c80:	4319      	orrs	r1, r3
    8c82:	c002      	stmia	r0!, {r1}
    8c84:	45b9      	cmp	r9, r7
    8c86:	d2df      	bcs.n	8c48 <quorem+0x68>
    8c88:	9b03      	ldr	r3, [sp, #12]
    8c8a:	464e      	mov	r6, r9
    8c8c:	4699      	mov	r9, r3
    8c8e:	465b      	mov	r3, fp
    8c90:	681b      	ldr	r3, [r3, #0]
    8c92:	4654      	mov	r4, sl
    8c94:	2b00      	cmp	r3, #0
    8c96:	d10e      	bne.n	8cb6 <quorem+0xd6>
    8c98:	465b      	mov	r3, fp
    8c9a:	9a01      	ldr	r2, [sp, #4]
    8c9c:	3b04      	subs	r3, #4
    8c9e:	429a      	cmp	r2, r3
    8ca0:	d304      	bcc.n	8cac <quorem+0xcc>
    8ca2:	e006      	b.n	8cb2 <quorem+0xd2>
    8ca4:	3b04      	subs	r3, #4
    8ca6:	3c01      	subs	r4, #1
    8ca8:	429a      	cmp	r2, r3
    8caa:	d202      	bcs.n	8cb2 <quorem+0xd2>
    8cac:	6819      	ldr	r1, [r3, #0]
    8cae:	2900      	cmp	r1, #0
    8cb0:	d0f8      	beq.n	8ca4 <quorem+0xc4>
    8cb2:	4643      	mov	r3, r8
    8cb4:	611c      	str	r4, [r3, #16]
    8cb6:	9902      	ldr	r1, [sp, #8]
    8cb8:	4640      	mov	r0, r8
    8cba:	f001 ff55 	bl	ab68 <__mcmp>
    8cbe:	2800      	cmp	r0, #0
    8cc0:	db2f      	blt.n	8d22 <quorem+0x142>
    8cc2:	464f      	mov	r7, r9
    8cc4:	2000      	movs	r0, #0
    8cc6:	9b00      	ldr	r3, [sp, #0]
    8cc8:	9d01      	ldr	r5, [sp, #4]
    8cca:	3301      	adds	r3, #1
    8ccc:	9300      	str	r3, [sp, #0]
    8cce:	682b      	ldr	r3, [r5, #0]
    8cd0:	cf02      	ldmia	r7!, {r1}
    8cd2:	041a      	lsls	r2, r3, #16
    8cd4:	0c12      	lsrs	r2, r2, #16
    8cd6:	1810      	adds	r0, r2, r0
    8cd8:	040a      	lsls	r2, r1, #16
    8cda:	0c12      	lsrs	r2, r2, #16
    8cdc:	1a82      	subs	r2, r0, r2
    8cde:	0c09      	lsrs	r1, r1, #16
    8ce0:	0c1b      	lsrs	r3, r3, #16
    8ce2:	1a5b      	subs	r3, r3, r1
    8ce4:	1411      	asrs	r1, r2, #16
    8ce6:	185b      	adds	r3, r3, r1
    8ce8:	0412      	lsls	r2, r2, #16
    8cea:	1418      	asrs	r0, r3, #16
    8cec:	0c12      	lsrs	r2, r2, #16
    8cee:	041b      	lsls	r3, r3, #16
    8cf0:	4313      	orrs	r3, r2
    8cf2:	c508      	stmia	r5!, {r3}
    8cf4:	42be      	cmp	r6, r7
    8cf6:	d2ea      	bcs.n	8cce <quorem+0xee>
    8cf8:	9901      	ldr	r1, [sp, #4]
    8cfa:	00a3      	lsls	r3, r4, #2
    8cfc:	468c      	mov	ip, r1
    8cfe:	4463      	add	r3, ip
    8d00:	681a      	ldr	r2, [r3, #0]
    8d02:	2a00      	cmp	r2, #0
    8d04:	d10d      	bne.n	8d22 <quorem+0x142>
    8d06:	3b04      	subs	r3, #4
    8d08:	000a      	movs	r2, r1
    8d0a:	4299      	cmp	r1, r3
    8d0c:	d304      	bcc.n	8d18 <quorem+0x138>
    8d0e:	e006      	b.n	8d1e <quorem+0x13e>
    8d10:	3b04      	subs	r3, #4
    8d12:	3c01      	subs	r4, #1
    8d14:	429a      	cmp	r2, r3
    8d16:	d202      	bcs.n	8d1e <quorem+0x13e>
    8d18:	6819      	ldr	r1, [r3, #0]
    8d1a:	2900      	cmp	r1, #0
    8d1c:	d0f8      	beq.n	8d10 <quorem+0x130>
    8d1e:	4643      	mov	r3, r8
    8d20:	611c      	str	r4, [r3, #16]
    8d22:	9800      	ldr	r0, [sp, #0]
    8d24:	b005      	add	sp, #20
    8d26:	bc3c      	pop	{r2, r3, r4, r5}
    8d28:	4690      	mov	r8, r2
    8d2a:	4699      	mov	r9, r3
    8d2c:	46a2      	mov	sl, r4
    8d2e:	46ab      	mov	fp, r5
    8d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d32:	46c0      	nop			; (mov r8, r8)

00008d34 <_dtoa_r>:
    8d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d36:	4657      	mov	r7, sl
    8d38:	464e      	mov	r6, r9
    8d3a:	4645      	mov	r5, r8
    8d3c:	46de      	mov	lr, fp
    8d3e:	b5e0      	push	{r5, r6, r7, lr}
    8d40:	6c01      	ldr	r1, [r0, #64]	; 0x40
    8d42:	b099      	sub	sp, #100	; 0x64
    8d44:	4682      	mov	sl, r0
    8d46:	001d      	movs	r5, r3
    8d48:	0016      	movs	r6, r2
    8d4a:	001f      	movs	r7, r3
    8d4c:	2900      	cmp	r1, #0
    8d4e:	d009      	beq.n	8d64 <_dtoa_r+0x30>
    8d50:	2301      	movs	r3, #1
    8d52:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8d54:	4093      	lsls	r3, r2
    8d56:	604a      	str	r2, [r1, #4]
    8d58:	608b      	str	r3, [r1, #8]
    8d5a:	f001 fcf9 	bl	a750 <_Bfree>
    8d5e:	2300      	movs	r3, #0
    8d60:	4652      	mov	r2, sl
    8d62:	6413      	str	r3, [r2, #64]	; 0x40
    8d64:	46b8      	mov	r8, r7
    8d66:	2f00      	cmp	r7, #0
    8d68:	db37      	blt.n	8dda <_dtoa_r+0xa6>
    8d6a:	2300      	movs	r3, #0
    8d6c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8d6e:	6013      	str	r3, [r2, #0]
    8d70:	4642      	mov	r2, r8
    8d72:	4bd6      	ldr	r3, [pc, #856]	; (90cc <_dtoa_r+0x398>)
    8d74:	401a      	ands	r2, r3
    8d76:	429a      	cmp	r2, r3
    8d78:	d018      	beq.n	8dac <_dtoa_r+0x78>
    8d7a:	2200      	movs	r2, #0
    8d7c:	2300      	movs	r3, #0
    8d7e:	0030      	movs	r0, r6
    8d80:	0039      	movs	r1, r7
    8d82:	f002 fcaf 	bl	b6e4 <__aeabi_dcmpeq>
    8d86:	2800      	cmp	r0, #0
    8d88:	d02f      	beq.n	8dea <_dtoa_r+0xb6>
    8d8a:	2301      	movs	r3, #1
    8d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8d8e:	6013      	str	r3, [r2, #0]
    8d90:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8d92:	2b00      	cmp	r3, #0
    8d94:	d100      	bne.n	8d98 <_dtoa_r+0x64>
    8d96:	e22a      	b.n	91ee <_dtoa_r+0x4ba>
    8d98:	48cd      	ldr	r0, [pc, #820]	; (90d0 <_dtoa_r+0x39c>)
    8d9a:	6018      	str	r0, [r3, #0]
    8d9c:	3801      	subs	r0, #1
    8d9e:	b019      	add	sp, #100	; 0x64
    8da0:	bc3c      	pop	{r2, r3, r4, r5}
    8da2:	4690      	mov	r8, r2
    8da4:	4699      	mov	r9, r3
    8da6:	46a2      	mov	sl, r4
    8da8:	46ab      	mov	fp, r5
    8daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dac:	4bc9      	ldr	r3, [pc, #804]	; (90d4 <_dtoa_r+0x3a0>)
    8dae:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8db0:	6013      	str	r3, [r2, #0]
    8db2:	2e00      	cmp	r6, #0
    8db4:	d10b      	bne.n	8dce <_dtoa_r+0x9a>
    8db6:	4643      	mov	r3, r8
    8db8:	0318      	lsls	r0, r3, #12
    8dba:	d108      	bne.n	8dce <_dtoa_r+0x9a>
    8dbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8dbe:	48c6      	ldr	r0, [pc, #792]	; (90d8 <_dtoa_r+0x3a4>)
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d0ec      	beq.n	8d9e <_dtoa_r+0x6a>
    8dc4:	0003      	movs	r3, r0
    8dc6:	3308      	adds	r3, #8
    8dc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8dca:	6013      	str	r3, [r2, #0]
    8dcc:	e7e7      	b.n	8d9e <_dtoa_r+0x6a>
    8dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8dd0:	48c2      	ldr	r0, [pc, #776]	; (90dc <_dtoa_r+0x3a8>)
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d0e3      	beq.n	8d9e <_dtoa_r+0x6a>
    8dd6:	1cc3      	adds	r3, r0, #3
    8dd8:	e7f6      	b.n	8dc8 <_dtoa_r+0x94>
    8dda:	2301      	movs	r3, #1
    8ddc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8dde:	0068      	lsls	r0, r5, #1
    8de0:	6013      	str	r3, [r2, #0]
    8de2:	0843      	lsrs	r3, r0, #1
    8de4:	4698      	mov	r8, r3
    8de6:	001f      	movs	r7, r3
    8de8:	e7c2      	b.n	8d70 <_dtoa_r+0x3c>
    8dea:	ab16      	add	r3, sp, #88	; 0x58
    8dec:	9301      	str	r3, [sp, #4]
    8dee:	ab17      	add	r3, sp, #92	; 0x5c
    8df0:	9300      	str	r3, [sp, #0]
    8df2:	0032      	movs	r2, r6
    8df4:	003b      	movs	r3, r7
    8df6:	4650      	mov	r0, sl
    8df8:	f001 ff6c 	bl	acd4 <__d2b>
    8dfc:	4643      	mov	r3, r8
    8dfe:	4683      	mov	fp, r0
    8e00:	0d1a      	lsrs	r2, r3, #20
    8e02:	d100      	bne.n	8e06 <_dtoa_r+0xd2>
    8e04:	e1d6      	b.n	91b4 <_dtoa_r+0x480>
    8e06:	033b      	lsls	r3, r7, #12
    8e08:	4cb5      	ldr	r4, [pc, #724]	; (90e0 <_dtoa_r+0x3ac>)
    8e0a:	0b1b      	lsrs	r3, r3, #12
    8e0c:	431c      	orrs	r4, r3
    8e0e:	4bb5      	ldr	r3, [pc, #724]	; (90e4 <_dtoa_r+0x3b0>)
    8e10:	0030      	movs	r0, r6
    8e12:	4698      	mov	r8, r3
    8e14:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8e16:	0021      	movs	r1, r4
    8e18:	4699      	mov	r9, r3
    8e1a:	2300      	movs	r3, #0
    8e1c:	4490      	add	r8, r2
    8e1e:	930f      	str	r3, [sp, #60]	; 0x3c
    8e20:	2200      	movs	r2, #0
    8e22:	4bb1      	ldr	r3, [pc, #708]	; (90e8 <_dtoa_r+0x3b4>)
    8e24:	f003 ff30 	bl	cc88 <__aeabi_dsub>
    8e28:	4ab0      	ldr	r2, [pc, #704]	; (90ec <_dtoa_r+0x3b8>)
    8e2a:	4bb1      	ldr	r3, [pc, #708]	; (90f0 <_dtoa_r+0x3bc>)
    8e2c:	f003 fcac 	bl	c788 <__aeabi_dmul>
    8e30:	4ab0      	ldr	r2, [pc, #704]	; (90f4 <_dtoa_r+0x3c0>)
    8e32:	4bb1      	ldr	r3, [pc, #708]	; (90f8 <_dtoa_r+0x3c4>)
    8e34:	f002 fd64 	bl	b900 <__aeabi_dadd>
    8e38:	0004      	movs	r4, r0
    8e3a:	4640      	mov	r0, r8
    8e3c:	000d      	movs	r5, r1
    8e3e:	f004 fa8d 	bl	d35c <__aeabi_i2d>
    8e42:	4aae      	ldr	r2, [pc, #696]	; (90fc <_dtoa_r+0x3c8>)
    8e44:	4bae      	ldr	r3, [pc, #696]	; (9100 <_dtoa_r+0x3cc>)
    8e46:	f003 fc9f 	bl	c788 <__aeabi_dmul>
    8e4a:	0002      	movs	r2, r0
    8e4c:	000b      	movs	r3, r1
    8e4e:	0020      	movs	r0, r4
    8e50:	0029      	movs	r1, r5
    8e52:	f002 fd55 	bl	b900 <__aeabi_dadd>
    8e56:	0004      	movs	r4, r0
    8e58:	000d      	movs	r5, r1
    8e5a:	f004 fa4b 	bl	d2f4 <__aeabi_d2iz>
    8e5e:	2200      	movs	r2, #0
    8e60:	9003      	str	r0, [sp, #12]
    8e62:	2300      	movs	r3, #0
    8e64:	0020      	movs	r0, r4
    8e66:	0029      	movs	r1, r5
    8e68:	f002 fc42 	bl	b6f0 <__aeabi_dcmplt>
    8e6c:	2800      	cmp	r0, #0
    8e6e:	d000      	beq.n	8e72 <_dtoa_r+0x13e>
    8e70:	e2b1      	b.n	93d6 <_dtoa_r+0x6a2>
    8e72:	2301      	movs	r3, #1
    8e74:	9c03      	ldr	r4, [sp, #12]
    8e76:	930c      	str	r3, [sp, #48]	; 0x30
    8e78:	2c16      	cmp	r4, #22
    8e7a:	d810      	bhi.n	8e9e <_dtoa_r+0x16a>
    8e7c:	49a1      	ldr	r1, [pc, #644]	; (9104 <_dtoa_r+0x3d0>)
    8e7e:	00e3      	lsls	r3, r4, #3
    8e80:	18c9      	adds	r1, r1, r3
    8e82:	0032      	movs	r2, r6
    8e84:	6808      	ldr	r0, [r1, #0]
    8e86:	6849      	ldr	r1, [r1, #4]
    8e88:	003b      	movs	r3, r7
    8e8a:	f002 fc45 	bl	b718 <__aeabi_dcmpgt>
    8e8e:	2800      	cmp	r0, #0
    8e90:	d100      	bne.n	8e94 <_dtoa_r+0x160>
    8e92:	e31d      	b.n	94d0 <_dtoa_r+0x79c>
    8e94:	0023      	movs	r3, r4
    8e96:	3b01      	subs	r3, #1
    8e98:	9303      	str	r3, [sp, #12]
    8e9a:	2300      	movs	r3, #0
    8e9c:	930c      	str	r3, [sp, #48]	; 0x30
    8e9e:	464b      	mov	r3, r9
    8ea0:	4642      	mov	r2, r8
    8ea2:	1a9a      	subs	r2, r3, r2
    8ea4:	2300      	movs	r3, #0
    8ea6:	9306      	str	r3, [sp, #24]
    8ea8:	0013      	movs	r3, r2
    8eaa:	3b01      	subs	r3, #1
    8eac:	9304      	str	r3, [sp, #16]
    8eae:	d500      	bpl.n	8eb2 <_dtoa_r+0x17e>
    8eb0:	e2a1      	b.n	93f6 <_dtoa_r+0x6c2>
    8eb2:	9b03      	ldr	r3, [sp, #12]
    8eb4:	2b00      	cmp	r3, #0
    8eb6:	da00      	bge.n	8eba <_dtoa_r+0x186>
    8eb8:	e284      	b.n	93c4 <_dtoa_r+0x690>
    8eba:	469c      	mov	ip, r3
    8ebc:	930d      	str	r3, [sp, #52]	; 0x34
    8ebe:	2300      	movs	r3, #0
    8ec0:	9a04      	ldr	r2, [sp, #16]
    8ec2:	4699      	mov	r9, r3
    8ec4:	0011      	movs	r1, r2
    8ec6:	4461      	add	r1, ip
    8ec8:	9104      	str	r1, [sp, #16]
    8eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8ecc:	2b09      	cmp	r3, #9
    8ece:	d900      	bls.n	8ed2 <_dtoa_r+0x19e>
    8ed0:	e18f      	b.n	91f2 <_dtoa_r+0x4be>
    8ed2:	2401      	movs	r4, #1
    8ed4:	2b05      	cmp	r3, #5
    8ed6:	dd02      	ble.n	8ede <_dtoa_r+0x1aa>
    8ed8:	2400      	movs	r4, #0
    8eda:	3b04      	subs	r3, #4
    8edc:	9322      	str	r3, [sp, #136]	; 0x88
    8ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8ee0:	2b03      	cmp	r3, #3
    8ee2:	d101      	bne.n	8ee8 <_dtoa_r+0x1b4>
    8ee4:	f000 fcce 	bl	9884 <_dtoa_r+0xb50>
    8ee8:	dc01      	bgt.n	8eee <_dtoa_r+0x1ba>
    8eea:	f000 fc92 	bl	9812 <_dtoa_r+0xade>
    8eee:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8ef0:	2b04      	cmp	r3, #4
    8ef2:	d101      	bne.n	8ef8 <_dtoa_r+0x1c4>
    8ef4:	f000 fc40 	bl	9778 <_dtoa_r+0xa44>
    8ef8:	2301      	movs	r3, #1
    8efa:	930b      	str	r3, [sp, #44]	; 0x2c
    8efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8efe:	2b05      	cmp	r3, #5
    8f00:	d001      	beq.n	8f06 <_dtoa_r+0x1d2>
    8f02:	f000 fc8b 	bl	981c <_dtoa_r+0xae8>
    8f06:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8f08:	9b03      	ldr	r3, [sp, #12]
    8f0a:	4694      	mov	ip, r2
    8f0c:	4463      	add	r3, ip
    8f0e:	930e      	str	r3, [sp, #56]	; 0x38
    8f10:	3301      	adds	r3, #1
    8f12:	9307      	str	r3, [sp, #28]
    8f14:	1e1d      	subs	r5, r3, #0
    8f16:	dc01      	bgt.n	8f1c <_dtoa_r+0x1e8>
    8f18:	f000 fd49 	bl	99ae <_dtoa_r+0xc7a>
    8f1c:	9b07      	ldr	r3, [sp, #28]
    8f1e:	4698      	mov	r8, r3
    8f20:	2300      	movs	r3, #0
    8f22:	4652      	mov	r2, sl
    8f24:	2100      	movs	r1, #0
    8f26:	6453      	str	r3, [r2, #68]	; 0x44
    8f28:	2d17      	cmp	r5, #23
    8f2a:	d90a      	bls.n	8f42 <_dtoa_r+0x20e>
    8f2c:	2201      	movs	r2, #1
    8f2e:	3304      	adds	r3, #4
    8f30:	005b      	lsls	r3, r3, #1
    8f32:	0018      	movs	r0, r3
    8f34:	3014      	adds	r0, #20
    8f36:	0011      	movs	r1, r2
    8f38:	3201      	adds	r2, #1
    8f3a:	4285      	cmp	r5, r0
    8f3c:	d2f8      	bcs.n	8f30 <_dtoa_r+0x1fc>
    8f3e:	4653      	mov	r3, sl
    8f40:	6459      	str	r1, [r3, #68]	; 0x44
    8f42:	4650      	mov	r0, sl
    8f44:	f001 fbdc 	bl	a700 <_Balloc>
    8f48:	4653      	mov	r3, sl
    8f4a:	6418      	str	r0, [r3, #64]	; 0x40
    8f4c:	4643      	mov	r3, r8
    8f4e:	900a      	str	r0, [sp, #40]	; 0x28
    8f50:	2b0e      	cmp	r3, #14
    8f52:	d900      	bls.n	8f56 <_dtoa_r+0x222>
    8f54:	e161      	b.n	921a <_dtoa_r+0x4e6>
    8f56:	2c00      	cmp	r4, #0
    8f58:	d100      	bne.n	8f5c <_dtoa_r+0x228>
    8f5a:	e15e      	b.n	921a <_dtoa_r+0x4e6>
    8f5c:	9610      	str	r6, [sp, #64]	; 0x40
    8f5e:	9711      	str	r7, [sp, #68]	; 0x44
    8f60:	9e03      	ldr	r6, [sp, #12]
    8f62:	2e00      	cmp	r6, #0
    8f64:	dc01      	bgt.n	8f6a <_dtoa_r+0x236>
    8f66:	f000 fd25 	bl	99b4 <_dtoa_r+0xc80>
    8f6a:	0032      	movs	r2, r6
    8f6c:	210f      	movs	r1, #15
    8f6e:	4b65      	ldr	r3, [pc, #404]	; (9104 <_dtoa_r+0x3d0>)
    8f70:	400a      	ands	r2, r1
    8f72:	00d2      	lsls	r2, r2, #3
    8f74:	189b      	adds	r3, r3, r2
    8f76:	1136      	asrs	r6, r6, #4
    8f78:	681c      	ldr	r4, [r3, #0]
    8f7a:	685d      	ldr	r5, [r3, #4]
    8f7c:	06f3      	lsls	r3, r6, #27
    8f7e:	d401      	bmi.n	8f84 <_dtoa_r+0x250>
    8f80:	f000 fcca 	bl	9918 <_dtoa_r+0xbe4>
    8f84:	4b60      	ldr	r3, [pc, #384]	; (9108 <_dtoa_r+0x3d4>)
    8f86:	400e      	ands	r6, r1
    8f88:	6a1a      	ldr	r2, [r3, #32]
    8f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f8c:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f8e:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f90:	f002 ffc6 	bl	bf20 <__aeabi_ddiv>
    8f94:	2303      	movs	r3, #3
    8f96:	4698      	mov	r8, r3
    8f98:	9008      	str	r0, [sp, #32]
    8f9a:	9109      	str	r1, [sp, #36]	; 0x24
    8f9c:	2e00      	cmp	r6, #0
    8f9e:	d011      	beq.n	8fc4 <_dtoa_r+0x290>
    8fa0:	4f59      	ldr	r7, [pc, #356]	; (9108 <_dtoa_r+0x3d4>)
    8fa2:	2301      	movs	r3, #1
    8fa4:	4233      	tst	r3, r6
    8fa6:	d009      	beq.n	8fbc <_dtoa_r+0x288>
    8fa8:	469c      	mov	ip, r3
    8faa:	683a      	ldr	r2, [r7, #0]
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	0020      	movs	r0, r4
    8fb0:	0029      	movs	r1, r5
    8fb2:	44e0      	add	r8, ip
    8fb4:	f003 fbe8 	bl	c788 <__aeabi_dmul>
    8fb8:	0004      	movs	r4, r0
    8fba:	000d      	movs	r5, r1
    8fbc:	1076      	asrs	r6, r6, #1
    8fbe:	3708      	adds	r7, #8
    8fc0:	2e00      	cmp	r6, #0
    8fc2:	d1ee      	bne.n	8fa2 <_dtoa_r+0x26e>
    8fc4:	0022      	movs	r2, r4
    8fc6:	9808      	ldr	r0, [sp, #32]
    8fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
    8fca:	002b      	movs	r3, r5
    8fcc:	f002 ffa8 	bl	bf20 <__aeabi_ddiv>
    8fd0:	0006      	movs	r6, r0
    8fd2:	000f      	movs	r7, r1
    8fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d009      	beq.n	8fee <_dtoa_r+0x2ba>
    8fda:	2200      	movs	r2, #0
    8fdc:	4b40      	ldr	r3, [pc, #256]	; (90e0 <_dtoa_r+0x3ac>)
    8fde:	0030      	movs	r0, r6
    8fe0:	0039      	movs	r1, r7
    8fe2:	f002 fb85 	bl	b6f0 <__aeabi_dcmplt>
    8fe6:	2800      	cmp	r0, #0
    8fe8:	d001      	beq.n	8fee <_dtoa_r+0x2ba>
    8fea:	f000 fdc2 	bl	9b72 <_dtoa_r+0xe3e>
    8fee:	4640      	mov	r0, r8
    8ff0:	f004 f9b4 	bl	d35c <__aeabi_i2d>
    8ff4:	0032      	movs	r2, r6
    8ff6:	003b      	movs	r3, r7
    8ff8:	f003 fbc6 	bl	c788 <__aeabi_dmul>
    8ffc:	2200      	movs	r2, #0
    8ffe:	4b43      	ldr	r3, [pc, #268]	; (910c <_dtoa_r+0x3d8>)
    9000:	f002 fc7e 	bl	b900 <__aeabi_dadd>
    9004:	4a42      	ldr	r2, [pc, #264]	; (9110 <_dtoa_r+0x3dc>)
    9006:	000b      	movs	r3, r1
    9008:	4694      	mov	ip, r2
    900a:	4463      	add	r3, ip
    900c:	9008      	str	r0, [sp, #32]
    900e:	9109      	str	r1, [sp, #36]	; 0x24
    9010:	9309      	str	r3, [sp, #36]	; 0x24
    9012:	9b07      	ldr	r3, [sp, #28]
    9014:	2b00      	cmp	r3, #0
    9016:	d101      	bne.n	901c <_dtoa_r+0x2e8>
    9018:	f000 fc50 	bl	98bc <_dtoa_r+0xb88>
    901c:	9b03      	ldr	r3, [sp, #12]
    901e:	9313      	str	r3, [sp, #76]	; 0x4c
    9020:	9b07      	ldr	r3, [sp, #28]
    9022:	9312      	str	r3, [sp, #72]	; 0x48
    9024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9026:	2b00      	cmp	r3, #0
    9028:	d101      	bne.n	902e <_dtoa_r+0x2fa>
    902a:	f000 fd1d 	bl	9a68 <_dtoa_r+0xd34>
    902e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9030:	2000      	movs	r0, #0
    9032:	1e5a      	subs	r2, r3, #1
    9034:	4b33      	ldr	r3, [pc, #204]	; (9104 <_dtoa_r+0x3d0>)
    9036:	00d2      	lsls	r2, r2, #3
    9038:	189b      	adds	r3, r3, r2
    903a:	681a      	ldr	r2, [r3, #0]
    903c:	685b      	ldr	r3, [r3, #4]
    903e:	4935      	ldr	r1, [pc, #212]	; (9114 <_dtoa_r+0x3e0>)
    9040:	f002 ff6e 	bl	bf20 <__aeabi_ddiv>
    9044:	9a08      	ldr	r2, [sp, #32]
    9046:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9048:	f003 fe1e 	bl	cc88 <__aeabi_dsub>
    904c:	9008      	str	r0, [sp, #32]
    904e:	9109      	str	r1, [sp, #36]	; 0x24
    9050:	0039      	movs	r1, r7
    9052:	0030      	movs	r0, r6
    9054:	f004 f94e 	bl	d2f4 <__aeabi_d2iz>
    9058:	0004      	movs	r4, r0
    905a:	f004 f97f 	bl	d35c <__aeabi_i2d>
    905e:	0002      	movs	r2, r0
    9060:	000b      	movs	r3, r1
    9062:	0030      	movs	r0, r6
    9064:	0039      	movs	r1, r7
    9066:	f003 fe0f 	bl	cc88 <__aeabi_dsub>
    906a:	0005      	movs	r5, r0
    906c:	000e      	movs	r6, r1
    906e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9070:	3430      	adds	r4, #48	; 0x30
    9072:	1c51      	adds	r1, r2, #1
    9074:	b2e7      	uxtb	r7, r4
    9076:	9114      	str	r1, [sp, #80]	; 0x50
    9078:	7017      	strb	r7, [r2, #0]
    907a:	0033      	movs	r3, r6
    907c:	9808      	ldr	r0, [sp, #32]
    907e:	9909      	ldr	r1, [sp, #36]	; 0x24
    9080:	002a      	movs	r2, r5
    9082:	f002 fb49 	bl	b718 <__aeabi_dcmpgt>
    9086:	2800      	cmp	r0, #0
    9088:	d001      	beq.n	908e <_dtoa_r+0x35a>
    908a:	f000 fdfe 	bl	9c8a <_dtoa_r+0xf56>
    908e:	002a      	movs	r2, r5
    9090:	0033      	movs	r3, r6
    9092:	2000      	movs	r0, #0
    9094:	4912      	ldr	r1, [pc, #72]	; (90e0 <_dtoa_r+0x3ac>)
    9096:	f003 fdf7 	bl	cc88 <__aeabi_dsub>
    909a:	0002      	movs	r2, r0
    909c:	000b      	movs	r3, r1
    909e:	9808      	ldr	r0, [sp, #32]
    90a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    90a2:	f002 fb39 	bl	b718 <__aeabi_dcmpgt>
    90a6:	2800      	cmp	r0, #0
    90a8:	d001      	beq.n	90ae <_dtoa_r+0x37a>
    90aa:	f000 fde7 	bl	9c7c <_dtoa_r+0xf48>
    90ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    90b0:	2b01      	cmp	r3, #1
    90b2:	d101      	bne.n	90b8 <_dtoa_r+0x384>
    90b4:	f000 fc78 	bl	99a8 <_dtoa_r+0xc74>
    90b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    90ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    90bc:	4694      	mov	ip, r2
    90be:	4463      	add	r3, ip
    90c0:	4698      	mov	r8, r3
    90c2:	464b      	mov	r3, r9
    90c4:	9312      	str	r3, [sp, #72]	; 0x48
    90c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    90c8:	4699      	mov	r9, r3
    90ca:	e038      	b.n	913e <_dtoa_r+0x40a>
    90cc:	7ff00000 	.word	0x7ff00000
    90d0:	0000d7fd 	.word	0x0000d7fd
    90d4:	0000270f 	.word	0x0000270f
    90d8:	0000d820 	.word	0x0000d820
    90dc:	0000d82c 	.word	0x0000d82c
    90e0:	3ff00000 	.word	0x3ff00000
    90e4:	fffffc01 	.word	0xfffffc01
    90e8:	3ff80000 	.word	0x3ff80000
    90ec:	636f4361 	.word	0x636f4361
    90f0:	3fd287a7 	.word	0x3fd287a7
    90f4:	8b60c8b3 	.word	0x8b60c8b3
    90f8:	3fc68a28 	.word	0x3fc68a28
    90fc:	509f79fb 	.word	0x509f79fb
    9100:	3fd34413 	.word	0x3fd34413
    9104:	0000d868 	.word	0x0000d868
    9108:	0000d840 	.word	0x0000d840
    910c:	401c0000 	.word	0x401c0000
    9110:	fcc00000 	.word	0xfcc00000
    9114:	3fe00000 	.word	0x3fe00000
    9118:	002a      	movs	r2, r5
    911a:	0033      	movs	r3, r6
    911c:	2000      	movs	r0, #0
    911e:	49b9      	ldr	r1, [pc, #740]	; (9404 <_dtoa_r+0x6d0>)
    9120:	f003 fdb2 	bl	cc88 <__aeabi_dsub>
    9124:	9a08      	ldr	r2, [sp, #32]
    9126:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9128:	f002 fae2 	bl	b6f0 <__aeabi_dcmplt>
    912c:	2800      	cmp	r0, #0
    912e:	d001      	beq.n	9134 <_dtoa_r+0x400>
    9130:	f000 fd74 	bl	9c1c <_dtoa_r+0xee8>
    9134:	46a1      	mov	r9, r4
    9136:	4544      	cmp	r4, r8
    9138:	d101      	bne.n	913e <_dtoa_r+0x40a>
    913a:	f000 fc33 	bl	99a4 <_dtoa_r+0xc70>
    913e:	9808      	ldr	r0, [sp, #32]
    9140:	9909      	ldr	r1, [sp, #36]	; 0x24
    9142:	2200      	movs	r2, #0
    9144:	4bb0      	ldr	r3, [pc, #704]	; (9408 <_dtoa_r+0x6d4>)
    9146:	f003 fb1f 	bl	c788 <__aeabi_dmul>
    914a:	2200      	movs	r2, #0
    914c:	4bae      	ldr	r3, [pc, #696]	; (9408 <_dtoa_r+0x6d4>)
    914e:	9008      	str	r0, [sp, #32]
    9150:	9109      	str	r1, [sp, #36]	; 0x24
    9152:	0028      	movs	r0, r5
    9154:	0031      	movs	r1, r6
    9156:	f003 fb17 	bl	c788 <__aeabi_dmul>
    915a:	000d      	movs	r5, r1
    915c:	0004      	movs	r4, r0
    915e:	f004 f8c9 	bl	d2f4 <__aeabi_d2iz>
    9162:	0007      	movs	r7, r0
    9164:	f004 f8fa 	bl	d35c <__aeabi_i2d>
    9168:	0002      	movs	r2, r0
    916a:	000b      	movs	r3, r1
    916c:	0020      	movs	r0, r4
    916e:	0029      	movs	r1, r5
    9170:	f003 fd8a 	bl	cc88 <__aeabi_dsub>
    9174:	464b      	mov	r3, r9
    9176:	3730      	adds	r7, #48	; 0x30
    9178:	b2ff      	uxtb	r7, r7
    917a:	1c5c      	adds	r4, r3, #1
    917c:	701f      	strb	r7, [r3, #0]
    917e:	9a08      	ldr	r2, [sp, #32]
    9180:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9182:	0005      	movs	r5, r0
    9184:	000e      	movs	r6, r1
    9186:	f002 fab3 	bl	b6f0 <__aeabi_dcmplt>
    918a:	2800      	cmp	r0, #0
    918c:	d0c4      	beq.n	9118 <_dtoa_r+0x3e4>
    918e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9190:	9303      	str	r3, [sp, #12]
    9192:	4659      	mov	r1, fp
    9194:	4650      	mov	r0, sl
    9196:	f001 fadb 	bl	a750 <_Bfree>
    919a:	2300      	movs	r3, #0
    919c:	7023      	strb	r3, [r4, #0]
    919e:	9b03      	ldr	r3, [sp, #12]
    91a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    91a2:	3301      	adds	r3, #1
    91a4:	6013      	str	r3, [r2, #0]
    91a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    91a8:	2b00      	cmp	r3, #0
    91aa:	d100      	bne.n	91ae <_dtoa_r+0x47a>
    91ac:	e3a8      	b.n	9900 <_dtoa_r+0xbcc>
    91ae:	601c      	str	r4, [r3, #0]
    91b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    91b2:	e5f4      	b.n	8d9e <_dtoa_r+0x6a>
    91b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    91b6:	4699      	mov	r9, r3
    91b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    91ba:	444b      	add	r3, r9
    91bc:	001c      	movs	r4, r3
    91be:	4b93      	ldr	r3, [pc, #588]	; (940c <_dtoa_r+0x6d8>)
    91c0:	18e3      	adds	r3, r4, r3
    91c2:	2b20      	cmp	r3, #32
    91c4:	dc00      	bgt.n	91c8 <_dtoa_r+0x494>
    91c6:	e17e      	b.n	94c6 <_dtoa_r+0x792>
    91c8:	0031      	movs	r1, r6
    91ca:	4a91      	ldr	r2, [pc, #580]	; (9410 <_dtoa_r+0x6dc>)
    91cc:	4640      	mov	r0, r8
    91ce:	18a2      	adds	r2, r4, r2
    91d0:	40d1      	lsrs	r1, r2
    91d2:	000a      	movs	r2, r1
    91d4:	2140      	movs	r1, #64	; 0x40
    91d6:	1acb      	subs	r3, r1, r3
    91d8:	4098      	lsls	r0, r3
    91da:	4310      	orrs	r0, r2
    91dc:	f004 f900 	bl	d3e0 <__aeabi_ui2d>
    91e0:	1e63      	subs	r3, r4, #1
    91e2:	4698      	mov	r8, r3
    91e4:	2301      	movs	r3, #1
    91e6:	4d8b      	ldr	r5, [pc, #556]	; (9414 <_dtoa_r+0x6e0>)
    91e8:	930f      	str	r3, [sp, #60]	; 0x3c
    91ea:	1949      	adds	r1, r1, r5
    91ec:	e618      	b.n	8e20 <_dtoa_r+0xec>
    91ee:	488a      	ldr	r0, [pc, #552]	; (9418 <_dtoa_r+0x6e4>)
    91f0:	e5d5      	b.n	8d9e <_dtoa_r+0x6a>
    91f2:	2300      	movs	r3, #0
    91f4:	4652      	mov	r2, sl
    91f6:	2100      	movs	r1, #0
    91f8:	6453      	str	r3, [r2, #68]	; 0x44
    91fa:	4650      	mov	r0, sl
    91fc:	f001 fa80 	bl	a700 <_Balloc>
    9200:	4653      	mov	r3, sl
    9202:	6418      	str	r0, [r3, #64]	; 0x40
    9204:	2301      	movs	r3, #1
    9206:	425b      	negs	r3, r3
    9208:	9307      	str	r3, [sp, #28]
    920a:	930e      	str	r3, [sp, #56]	; 0x38
    920c:	3302      	adds	r3, #2
    920e:	2200      	movs	r2, #0
    9210:	930b      	str	r3, [sp, #44]	; 0x2c
    9212:	2300      	movs	r3, #0
    9214:	900a      	str	r0, [sp, #40]	; 0x28
    9216:	9223      	str	r2, [sp, #140]	; 0x8c
    9218:	9322      	str	r3, [sp, #136]	; 0x88
    921a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    921c:	2b00      	cmp	r3, #0
    921e:	da00      	bge.n	9222 <_dtoa_r+0x4ee>
    9220:	e0ab      	b.n	937a <_dtoa_r+0x646>
    9222:	9a03      	ldr	r2, [sp, #12]
    9224:	2a0e      	cmp	r2, #14
    9226:	dd00      	ble.n	922a <_dtoa_r+0x4f6>
    9228:	e0a7      	b.n	937a <_dtoa_r+0x646>
    922a:	4b7c      	ldr	r3, [pc, #496]	; (941c <_dtoa_r+0x6e8>)
    922c:	00d2      	lsls	r2, r2, #3
    922e:	189b      	adds	r3, r3, r2
    9230:	685c      	ldr	r4, [r3, #4]
    9232:	681b      	ldr	r3, [r3, #0]
    9234:	9304      	str	r3, [sp, #16]
    9236:	9405      	str	r4, [sp, #20]
    9238:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    923a:	2b00      	cmp	r3, #0
    923c:	da00      	bge.n	9240 <_dtoa_r+0x50c>
    923e:	e2a7      	b.n	9790 <_dtoa_r+0xa5c>
    9240:	9c04      	ldr	r4, [sp, #16]
    9242:	9d05      	ldr	r5, [sp, #20]
    9244:	0030      	movs	r0, r6
    9246:	0022      	movs	r2, r4
    9248:	002b      	movs	r3, r5
    924a:	0039      	movs	r1, r7
    924c:	f002 fe68 	bl	bf20 <__aeabi_ddiv>
    9250:	f004 f850 	bl	d2f4 <__aeabi_d2iz>
    9254:	4680      	mov	r8, r0
    9256:	f004 f881 	bl	d35c <__aeabi_i2d>
    925a:	0022      	movs	r2, r4
    925c:	002b      	movs	r3, r5
    925e:	f003 fa93 	bl	c788 <__aeabi_dmul>
    9262:	0002      	movs	r2, r0
    9264:	000b      	movs	r3, r1
    9266:	0030      	movs	r0, r6
    9268:	0039      	movs	r1, r7
    926a:	f003 fd0d 	bl	cc88 <__aeabi_dsub>
    926e:	4643      	mov	r3, r8
    9270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9272:	3330      	adds	r3, #48	; 0x30
    9274:	7013      	strb	r3, [r2, #0]
    9276:	9b07      	ldr	r3, [sp, #28]
    9278:	0006      	movs	r6, r0
    927a:	000f      	movs	r7, r1
    927c:	1c54      	adds	r4, r2, #1
    927e:	2b01      	cmp	r3, #1
    9280:	d04e      	beq.n	9320 <_dtoa_r+0x5ec>
    9282:	2200      	movs	r2, #0
    9284:	4b60      	ldr	r3, [pc, #384]	; (9408 <_dtoa_r+0x6d4>)
    9286:	f003 fa7f 	bl	c788 <__aeabi_dmul>
    928a:	2200      	movs	r2, #0
    928c:	2300      	movs	r3, #0
    928e:	0006      	movs	r6, r0
    9290:	000f      	movs	r7, r1
    9292:	f002 fa27 	bl	b6e4 <__aeabi_dcmpeq>
    9296:	2800      	cmp	r0, #0
    9298:	d000      	beq.n	929c <_dtoa_r+0x568>
    929a:	e77a      	b.n	9192 <_dtoa_r+0x45e>
    929c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    929e:	9a07      	ldr	r2, [sp, #28]
    92a0:	1c9d      	adds	r5, r3, #2
    92a2:	469c      	mov	ip, r3
    92a4:	465b      	mov	r3, fp
    92a6:	9306      	str	r3, [sp, #24]
    92a8:	4653      	mov	r3, sl
    92aa:	4462      	add	r2, ip
    92ac:	46aa      	mov	sl, r5
    92ae:	9c04      	ldr	r4, [sp, #16]
    92b0:	9d05      	ldr	r5, [sp, #20]
    92b2:	4691      	mov	r9, r2
    92b4:	9307      	str	r3, [sp, #28]
    92b6:	e00f      	b.n	92d8 <_dtoa_r+0x5a4>
    92b8:	2200      	movs	r2, #0
    92ba:	4b53      	ldr	r3, [pc, #332]	; (9408 <_dtoa_r+0x6d4>)
    92bc:	f003 fa64 	bl	c788 <__aeabi_dmul>
    92c0:	2301      	movs	r3, #1
    92c2:	469c      	mov	ip, r3
    92c4:	2200      	movs	r2, #0
    92c6:	2300      	movs	r3, #0
    92c8:	0006      	movs	r6, r0
    92ca:	000f      	movs	r7, r1
    92cc:	44e2      	add	sl, ip
    92ce:	f002 fa09 	bl	b6e4 <__aeabi_dcmpeq>
    92d2:	2800      	cmp	r0, #0
    92d4:	d000      	beq.n	92d8 <_dtoa_r+0x5a4>
    92d6:	e2d9      	b.n	988c <_dtoa_r+0xb58>
    92d8:	0022      	movs	r2, r4
    92da:	002b      	movs	r3, r5
    92dc:	0030      	movs	r0, r6
    92de:	0039      	movs	r1, r7
    92e0:	f002 fe1e 	bl	bf20 <__aeabi_ddiv>
    92e4:	f004 f806 	bl	d2f4 <__aeabi_d2iz>
    92e8:	4680      	mov	r8, r0
    92ea:	f004 f837 	bl	d35c <__aeabi_i2d>
    92ee:	0022      	movs	r2, r4
    92f0:	002b      	movs	r3, r5
    92f2:	f003 fa49 	bl	c788 <__aeabi_dmul>
    92f6:	0002      	movs	r2, r0
    92f8:	000b      	movs	r3, r1
    92fa:	0030      	movs	r0, r6
    92fc:	0039      	movs	r1, r7
    92fe:	f003 fcc3 	bl	cc88 <__aeabi_dsub>
    9302:	4653      	mov	r3, sl
    9304:	4642      	mov	r2, r8
    9306:	3b01      	subs	r3, #1
    9308:	3230      	adds	r2, #48	; 0x30
    930a:	0006      	movs	r6, r0
    930c:	000f      	movs	r7, r1
    930e:	46d3      	mov	fp, sl
    9310:	701a      	strb	r2, [r3, #0]
    9312:	45d1      	cmp	r9, sl
    9314:	d1d0      	bne.n	92b8 <_dtoa_r+0x584>
    9316:	9b06      	ldr	r3, [sp, #24]
    9318:	4654      	mov	r4, sl
    931a:	469b      	mov	fp, r3
    931c:	9b07      	ldr	r3, [sp, #28]
    931e:	469a      	mov	sl, r3
    9320:	0032      	movs	r2, r6
    9322:	003b      	movs	r3, r7
    9324:	0030      	movs	r0, r6
    9326:	0039      	movs	r1, r7
    9328:	f002 faea 	bl	b900 <__aeabi_dadd>
    932c:	0006      	movs	r6, r0
    932e:	000f      	movs	r7, r1
    9330:	0002      	movs	r2, r0
    9332:	000b      	movs	r3, r1
    9334:	9804      	ldr	r0, [sp, #16]
    9336:	9905      	ldr	r1, [sp, #20]
    9338:	f002 f9da 	bl	b6f0 <__aeabi_dcmplt>
    933c:	2800      	cmp	r0, #0
    933e:	d10c      	bne.n	935a <_dtoa_r+0x626>
    9340:	9804      	ldr	r0, [sp, #16]
    9342:	9905      	ldr	r1, [sp, #20]
    9344:	0032      	movs	r2, r6
    9346:	003b      	movs	r3, r7
    9348:	f002 f9cc 	bl	b6e4 <__aeabi_dcmpeq>
    934c:	2800      	cmp	r0, #0
    934e:	d100      	bne.n	9352 <_dtoa_r+0x61e>
    9350:	e71f      	b.n	9192 <_dtoa_r+0x45e>
    9352:	4643      	mov	r3, r8
    9354:	07db      	lsls	r3, r3, #31
    9356:	d400      	bmi.n	935a <_dtoa_r+0x626>
    9358:	e71b      	b.n	9192 <_dtoa_r+0x45e>
    935a:	1e65      	subs	r5, r4, #1
    935c:	782f      	ldrb	r7, [r5, #0]
    935e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9360:	e006      	b.n	9370 <_dtoa_r+0x63c>
    9362:	429d      	cmp	r5, r3
    9364:	d100      	bne.n	9368 <_dtoa_r+0x634>
    9366:	e351      	b.n	9a0c <_dtoa_r+0xcd8>
    9368:	3c02      	subs	r4, #2
    936a:	7827      	ldrb	r7, [r4, #0]
    936c:	002c      	movs	r4, r5
    936e:	3d01      	subs	r5, #1
    9370:	2f39      	cmp	r7, #57	; 0x39
    9372:	d0f6      	beq.n	9362 <_dtoa_r+0x62e>
    9374:	3701      	adds	r7, #1
    9376:	702f      	strb	r7, [r5, #0]
    9378:	e70b      	b.n	9192 <_dtoa_r+0x45e>
    937a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    937c:	2a00      	cmp	r2, #0
    937e:	d04f      	beq.n	9420 <_dtoa_r+0x6ec>
    9380:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9382:	2a01      	cmp	r2, #1
    9384:	dc00      	bgt.n	9388 <_dtoa_r+0x654>
    9386:	e22c      	b.n	97e2 <_dtoa_r+0xaae>
    9388:	9b07      	ldr	r3, [sp, #28]
    938a:	1e5c      	subs	r4, r3, #1
    938c:	464b      	mov	r3, r9
    938e:	45a1      	cmp	r9, r4
    9390:	da00      	bge.n	9394 <_dtoa_r+0x660>
    9392:	e2b8      	b.n	9906 <_dtoa_r+0xbd2>
    9394:	1b1c      	subs	r4, r3, r4
    9396:	9b07      	ldr	r3, [sp, #28]
    9398:	2b00      	cmp	r3, #0
    939a:	da00      	bge.n	939e <_dtoa_r+0x66a>
    939c:	e3d4      	b.n	9b48 <_dtoa_r+0xe14>
    939e:	9b06      	ldr	r3, [sp, #24]
    93a0:	9308      	str	r3, [sp, #32]
    93a2:	9b07      	ldr	r3, [sp, #28]
    93a4:	9a06      	ldr	r2, [sp, #24]
    93a6:	2101      	movs	r1, #1
    93a8:	4694      	mov	ip, r2
    93aa:	449c      	add	ip, r3
    93ac:	4662      	mov	r2, ip
    93ae:	9206      	str	r2, [sp, #24]
    93b0:	9a04      	ldr	r2, [sp, #16]
    93b2:	4650      	mov	r0, sl
    93b4:	4694      	mov	ip, r2
    93b6:	449c      	add	ip, r3
    93b8:	4663      	mov	r3, ip
    93ba:	9304      	str	r3, [sp, #16]
    93bc:	f001 fa60 	bl	a880 <__i2b>
    93c0:	4680      	mov	r8, r0
    93c2:	e032      	b.n	942a <_dtoa_r+0x6f6>
    93c4:	9a06      	ldr	r2, [sp, #24]
    93c6:	9b03      	ldr	r3, [sp, #12]
    93c8:	1ad2      	subs	r2, r2, r3
    93ca:	425b      	negs	r3, r3
    93cc:	4699      	mov	r9, r3
    93ce:	2300      	movs	r3, #0
    93d0:	9206      	str	r2, [sp, #24]
    93d2:	930d      	str	r3, [sp, #52]	; 0x34
    93d4:	e579      	b.n	8eca <_dtoa_r+0x196>
    93d6:	9803      	ldr	r0, [sp, #12]
    93d8:	f003 ffc0 	bl	d35c <__aeabi_i2d>
    93dc:	000b      	movs	r3, r1
    93de:	0002      	movs	r2, r0
    93e0:	0029      	movs	r1, r5
    93e2:	0020      	movs	r0, r4
    93e4:	f002 f97e 	bl	b6e4 <__aeabi_dcmpeq>
    93e8:	0002      	movs	r2, r0
    93ea:	4250      	negs	r0, r2
    93ec:	4150      	adcs	r0, r2
    93ee:	9b03      	ldr	r3, [sp, #12]
    93f0:	1a1b      	subs	r3, r3, r0
    93f2:	9303      	str	r3, [sp, #12]
    93f4:	e53d      	b.n	8e72 <_dtoa_r+0x13e>
    93f6:	2301      	movs	r3, #1
    93f8:	1a9b      	subs	r3, r3, r2
    93fa:	9306      	str	r3, [sp, #24]
    93fc:	2300      	movs	r3, #0
    93fe:	9304      	str	r3, [sp, #16]
    9400:	e557      	b.n	8eb2 <_dtoa_r+0x17e>
    9402:	46c0      	nop			; (mov r8, r8)
    9404:	3ff00000 	.word	0x3ff00000
    9408:	40240000 	.word	0x40240000
    940c:	00000432 	.word	0x00000432
    9410:	00000412 	.word	0x00000412
    9414:	fe100000 	.word	0xfe100000
    9418:	0000d7fc 	.word	0x0000d7fc
    941c:	0000d868 	.word	0x0000d868
    9420:	9b06      	ldr	r3, [sp, #24]
    9422:	464c      	mov	r4, r9
    9424:	9308      	str	r3, [sp, #32]
    9426:	2300      	movs	r3, #0
    9428:	4698      	mov	r8, r3
    942a:	9908      	ldr	r1, [sp, #32]
    942c:	1e0b      	subs	r3, r1, #0
    942e:	dd0e      	ble.n	944e <_dtoa_r+0x71a>
    9430:	9a04      	ldr	r2, [sp, #16]
    9432:	2a00      	cmp	r2, #0
    9434:	dd0b      	ble.n	944e <_dtoa_r+0x71a>
    9436:	4293      	cmp	r3, r2
    9438:	dd00      	ble.n	943c <_dtoa_r+0x708>
    943a:	e187      	b.n	974c <_dtoa_r+0xa18>
    943c:	9a06      	ldr	r2, [sp, #24]
    943e:	1ad2      	subs	r2, r2, r3
    9440:	9206      	str	r2, [sp, #24]
    9442:	9a08      	ldr	r2, [sp, #32]
    9444:	1ad2      	subs	r2, r2, r3
    9446:	9208      	str	r2, [sp, #32]
    9448:	9a04      	ldr	r2, [sp, #16]
    944a:	1ad3      	subs	r3, r2, r3
    944c:	9304      	str	r3, [sp, #16]
    944e:	464b      	mov	r3, r9
    9450:	2b00      	cmp	r3, #0
    9452:	d01a      	beq.n	948a <_dtoa_r+0x756>
    9454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9456:	2b00      	cmp	r3, #0
    9458:	d100      	bne.n	945c <_dtoa_r+0x728>
    945a:	e1bb      	b.n	97d4 <_dtoa_r+0xaa0>
    945c:	2c00      	cmp	r4, #0
    945e:	dd10      	ble.n	9482 <_dtoa_r+0x74e>
    9460:	4641      	mov	r1, r8
    9462:	0022      	movs	r2, r4
    9464:	4650      	mov	r0, sl
    9466:	f001 fabf 	bl	a9e8 <__pow5mult>
    946a:	465a      	mov	r2, fp
    946c:	0001      	movs	r1, r0
    946e:	4680      	mov	r8, r0
    9470:	4650      	mov	r0, sl
    9472:	f001 fa0f 	bl	a894 <__multiply>
    9476:	0005      	movs	r5, r0
    9478:	4659      	mov	r1, fp
    947a:	4650      	mov	r0, sl
    947c:	f001 f968 	bl	a750 <_Bfree>
    9480:	46ab      	mov	fp, r5
    9482:	464b      	mov	r3, r9
    9484:	1b1a      	subs	r2, r3, r4
    9486:	d000      	beq.n	948a <_dtoa_r+0x756>
    9488:	e1a5      	b.n	97d6 <_dtoa_r+0xaa2>
    948a:	2101      	movs	r1, #1
    948c:	4650      	mov	r0, sl
    948e:	f001 f9f7 	bl	a880 <__i2b>
    9492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9494:	4681      	mov	r9, r0
    9496:	2b00      	cmp	r3, #0
    9498:	dd1d      	ble.n	94d6 <_dtoa_r+0x7a2>
    949a:	001a      	movs	r2, r3
    949c:	0001      	movs	r1, r0
    949e:	4650      	mov	r0, sl
    94a0:	f001 faa2 	bl	a9e8 <__pow5mult>
    94a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    94a6:	4681      	mov	r9, r0
    94a8:	2b01      	cmp	r3, #1
    94aa:	dc00      	bgt.n	94ae <_dtoa_r+0x77a>
    94ac:	e150      	b.n	9750 <_dtoa_r+0xa1c>
    94ae:	2400      	movs	r4, #0
    94b0:	464b      	mov	r3, r9
    94b2:	691b      	ldr	r3, [r3, #16]
    94b4:	3303      	adds	r3, #3
    94b6:	009b      	lsls	r3, r3, #2
    94b8:	444b      	add	r3, r9
    94ba:	6858      	ldr	r0, [r3, #4]
    94bc:	f001 f998 	bl	a7f0 <__hi0bits>
    94c0:	2320      	movs	r3, #32
    94c2:	1a1b      	subs	r3, r3, r0
    94c4:	e010      	b.n	94e8 <_dtoa_r+0x7b4>
    94c6:	2220      	movs	r2, #32
    94c8:	0030      	movs	r0, r6
    94ca:	1ad3      	subs	r3, r2, r3
    94cc:	4098      	lsls	r0, r3
    94ce:	e685      	b.n	91dc <_dtoa_r+0x4a8>
    94d0:	2300      	movs	r3, #0
    94d2:	930c      	str	r3, [sp, #48]	; 0x30
    94d4:	e4e3      	b.n	8e9e <_dtoa_r+0x16a>
    94d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    94d8:	2400      	movs	r4, #0
    94da:	2b01      	cmp	r3, #1
    94dc:	dc00      	bgt.n	94e0 <_dtoa_r+0x7ac>
    94de:	e18b      	b.n	97f8 <_dtoa_r+0xac4>
    94e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    94e2:	2301      	movs	r3, #1
    94e4:	2a00      	cmp	r2, #0
    94e6:	d1e3      	bne.n	94b0 <_dtoa_r+0x77c>
    94e8:	9904      	ldr	r1, [sp, #16]
    94ea:	201f      	movs	r0, #31
    94ec:	468c      	mov	ip, r1
    94ee:	4463      	add	r3, ip
    94f0:	4018      	ands	r0, r3
    94f2:	d100      	bne.n	94f6 <_dtoa_r+0x7c2>
    94f4:	e0ae      	b.n	9654 <_dtoa_r+0x920>
    94f6:	2320      	movs	r3, #32
    94f8:	1a1b      	subs	r3, r3, r0
    94fa:	2b04      	cmp	r3, #4
    94fc:	dc00      	bgt.n	9500 <_dtoa_r+0x7cc>
    94fe:	e3cc      	b.n	9c9a <_dtoa_r+0xf66>
    9500:	231c      	movs	r3, #28
    9502:	1a18      	subs	r0, r3, r0
    9504:	9b06      	ldr	r3, [sp, #24]
    9506:	469c      	mov	ip, r3
    9508:	4484      	add	ip, r0
    950a:	4663      	mov	r3, ip
    950c:	9306      	str	r3, [sp, #24]
    950e:	9b08      	ldr	r3, [sp, #32]
    9510:	469c      	mov	ip, r3
    9512:	4484      	add	ip, r0
    9514:	4663      	mov	r3, ip
    9516:	468c      	mov	ip, r1
    9518:	4484      	add	ip, r0
    951a:	9308      	str	r3, [sp, #32]
    951c:	4663      	mov	r3, ip
    951e:	9304      	str	r3, [sp, #16]
    9520:	9b06      	ldr	r3, [sp, #24]
    9522:	2b00      	cmp	r3, #0
    9524:	dd05      	ble.n	9532 <_dtoa_r+0x7fe>
    9526:	4659      	mov	r1, fp
    9528:	001a      	movs	r2, r3
    952a:	4650      	mov	r0, sl
    952c:	f001 fabc 	bl	aaa8 <__lshift>
    9530:	4683      	mov	fp, r0
    9532:	9b04      	ldr	r3, [sp, #16]
    9534:	2b00      	cmp	r3, #0
    9536:	dd05      	ble.n	9544 <_dtoa_r+0x810>
    9538:	4649      	mov	r1, r9
    953a:	001a      	movs	r2, r3
    953c:	4650      	mov	r0, sl
    953e:	f001 fab3 	bl	aaa8 <__lshift>
    9542:	4681      	mov	r9, r0
    9544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9546:	2b00      	cmp	r3, #0
    9548:	d000      	beq.n	954c <_dtoa_r+0x818>
    954a:	e094      	b.n	9676 <_dtoa_r+0x942>
    954c:	9b07      	ldr	r3, [sp, #28]
    954e:	2b00      	cmp	r3, #0
    9550:	dc00      	bgt.n	9554 <_dtoa_r+0x820>
    9552:	e175      	b.n	9840 <_dtoa_r+0xb0c>
    9554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9556:	2b00      	cmp	r3, #0
    9558:	d100      	bne.n	955c <_dtoa_r+0x828>
    955a:	e0a6      	b.n	96aa <_dtoa_r+0x976>
    955c:	9b08      	ldr	r3, [sp, #32]
    955e:	2b00      	cmp	r3, #0
    9560:	dd05      	ble.n	956e <_dtoa_r+0x83a>
    9562:	4641      	mov	r1, r8
    9564:	001a      	movs	r2, r3
    9566:	4650      	mov	r0, sl
    9568:	f001 fa9e 	bl	aaa8 <__lshift>
    956c:	4680      	mov	r8, r0
    956e:	4643      	mov	r3, r8
    9570:	930c      	str	r3, [sp, #48]	; 0x30
    9572:	2c00      	cmp	r4, #0
    9574:	d000      	beq.n	9578 <_dtoa_r+0x844>
    9576:	e250      	b.n	9a1a <_dtoa_r+0xce6>
    9578:	9c07      	ldr	r4, [sp, #28]
    957a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    957c:	3c01      	subs	r4, #1
    957e:	0023      	movs	r3, r4
    9580:	4694      	mov	ip, r2
    9582:	4463      	add	r3, ip
    9584:	9308      	str	r3, [sp, #32]
    9586:	2301      	movs	r3, #1
    9588:	4033      	ands	r3, r6
    958a:	9307      	str	r3, [sp, #28]
    958c:	464b      	mov	r3, r9
    958e:	9306      	str	r3, [sp, #24]
    9590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9592:	4657      	mov	r7, sl
    9594:	4645      	mov	r5, r8
    9596:	465e      	mov	r6, fp
    9598:	4692      	mov	sl, r2
    959a:	4698      	mov	r8, r3
    959c:	9b06      	ldr	r3, [sp, #24]
    959e:	0030      	movs	r0, r6
    95a0:	0019      	movs	r1, r3
    95a2:	4699      	mov	r9, r3
    95a4:	f7ff fb1c 	bl	8be0 <quorem>
    95a8:	0003      	movs	r3, r0
    95aa:	900b      	str	r0, [sp, #44]	; 0x2c
    95ac:	3330      	adds	r3, #48	; 0x30
    95ae:	0029      	movs	r1, r5
    95b0:	0030      	movs	r0, r6
    95b2:	9304      	str	r3, [sp, #16]
    95b4:	f001 fad8 	bl	ab68 <__mcmp>
    95b8:	4649      	mov	r1, r9
    95ba:	0004      	movs	r4, r0
    95bc:	4642      	mov	r2, r8
    95be:	0038      	movs	r0, r7
    95c0:	f001 faec 	bl	ab9c <__mdiff>
    95c4:	68c3      	ldr	r3, [r0, #12]
    95c6:	4681      	mov	r9, r0
    95c8:	2b00      	cmp	r3, #0
    95ca:	d000      	beq.n	95ce <_dtoa_r+0x89a>
    95cc:	e11e      	b.n	980c <_dtoa_r+0xad8>
    95ce:	0001      	movs	r1, r0
    95d0:	0030      	movs	r0, r6
    95d2:	f001 fac9 	bl	ab68 <__mcmp>
    95d6:	4683      	mov	fp, r0
    95d8:	4649      	mov	r1, r9
    95da:	0038      	movs	r0, r7
    95dc:	f001 f8b8 	bl	a750 <_Bfree>
    95e0:	465b      	mov	r3, fp
    95e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    95e4:	4313      	orrs	r3, r2
    95e6:	d103      	bne.n	95f0 <_dtoa_r+0x8bc>
    95e8:	9b07      	ldr	r3, [sp, #28]
    95ea:	2b00      	cmp	r3, #0
    95ec:	d100      	bne.n	95f0 <_dtoa_r+0x8bc>
    95ee:	e306      	b.n	9bfe <_dtoa_r+0xeca>
    95f0:	2c00      	cmp	r4, #0
    95f2:	da00      	bge.n	95f6 <_dtoa_r+0x8c2>
    95f4:	e1a8      	b.n	9948 <_dtoa_r+0xc14>
    95f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    95f8:	431c      	orrs	r4, r3
    95fa:	d103      	bne.n	9604 <_dtoa_r+0x8d0>
    95fc:	9b07      	ldr	r3, [sp, #28]
    95fe:	2b00      	cmp	r3, #0
    9600:	d100      	bne.n	9604 <_dtoa_r+0x8d0>
    9602:	e1a1      	b.n	9948 <_dtoa_r+0xc14>
    9604:	465b      	mov	r3, fp
    9606:	2b00      	cmp	r3, #0
    9608:	dd00      	ble.n	960c <_dtoa_r+0x8d8>
    960a:	e282      	b.n	9b12 <_dtoa_r+0xdde>
    960c:	4669      	mov	r1, sp
    960e:	4652      	mov	r2, sl
    9610:	4653      	mov	r3, sl
    9612:	7c09      	ldrb	r1, [r1, #16]
    9614:	1c5c      	adds	r4, r3, #1
    9616:	7011      	strb	r1, [r2, #0]
    9618:	9a08      	ldr	r2, [sp, #32]
    961a:	4552      	cmp	r2, sl
    961c:	d100      	bne.n	9620 <_dtoa_r+0x8ec>
    961e:	e28a      	b.n	9b36 <_dtoa_r+0xe02>
    9620:	0031      	movs	r1, r6
    9622:	2300      	movs	r3, #0
    9624:	220a      	movs	r2, #10
    9626:	0038      	movs	r0, r7
    9628:	f001 f89c 	bl	a764 <__multadd>
    962c:	2300      	movs	r3, #0
    962e:	0006      	movs	r6, r0
    9630:	220a      	movs	r2, #10
    9632:	0029      	movs	r1, r5
    9634:	0038      	movs	r0, r7
    9636:	4545      	cmp	r5, r8
    9638:	d100      	bne.n	963c <_dtoa_r+0x908>
    963a:	e0e1      	b.n	9800 <_dtoa_r+0xacc>
    963c:	f001 f892 	bl	a764 <__multadd>
    9640:	4641      	mov	r1, r8
    9642:	0005      	movs	r5, r0
    9644:	2300      	movs	r3, #0
    9646:	220a      	movs	r2, #10
    9648:	0038      	movs	r0, r7
    964a:	f001 f88b 	bl	a764 <__multadd>
    964e:	46a2      	mov	sl, r4
    9650:	4680      	mov	r8, r0
    9652:	e7a3      	b.n	959c <_dtoa_r+0x868>
    9654:	201c      	movs	r0, #28
    9656:	9b06      	ldr	r3, [sp, #24]
    9658:	469c      	mov	ip, r3
    965a:	4484      	add	ip, r0
    965c:	4663      	mov	r3, ip
    965e:	9306      	str	r3, [sp, #24]
    9660:	9b08      	ldr	r3, [sp, #32]
    9662:	469c      	mov	ip, r3
    9664:	4484      	add	ip, r0
    9666:	4663      	mov	r3, ip
    9668:	9308      	str	r3, [sp, #32]
    966a:	9b04      	ldr	r3, [sp, #16]
    966c:	469c      	mov	ip, r3
    966e:	4484      	add	ip, r0
    9670:	4663      	mov	r3, ip
    9672:	9304      	str	r3, [sp, #16]
    9674:	e754      	b.n	9520 <_dtoa_r+0x7ec>
    9676:	4649      	mov	r1, r9
    9678:	4658      	mov	r0, fp
    967a:	f001 fa75 	bl	ab68 <__mcmp>
    967e:	2800      	cmp	r0, #0
    9680:	db00      	blt.n	9684 <_dtoa_r+0x950>
    9682:	e763      	b.n	954c <_dtoa_r+0x818>
    9684:	9b03      	ldr	r3, [sp, #12]
    9686:	4659      	mov	r1, fp
    9688:	3b01      	subs	r3, #1
    968a:	9303      	str	r3, [sp, #12]
    968c:	220a      	movs	r2, #10
    968e:	2300      	movs	r3, #0
    9690:	4650      	mov	r0, sl
    9692:	f001 f867 	bl	a764 <__multadd>
    9696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9698:	4683      	mov	fp, r0
    969a:	2b00      	cmp	r3, #0
    969c:	d000      	beq.n	96a0 <_dtoa_r+0x96c>
    969e:	e2ca      	b.n	9c36 <_dtoa_r+0xf02>
    96a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    96a2:	2b00      	cmp	r3, #0
    96a4:	dc00      	bgt.n	96a8 <_dtoa_r+0x974>
    96a6:	e2d8      	b.n	9c5a <_dtoa_r+0xf26>
    96a8:	9307      	str	r3, [sp, #28]
    96aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96ac:	465d      	mov	r5, fp
    96ae:	2400      	movs	r4, #0
    96b0:	9f07      	ldr	r7, [sp, #28]
    96b2:	469b      	mov	fp, r3
    96b4:	e006      	b.n	96c4 <_dtoa_r+0x990>
    96b6:	0029      	movs	r1, r5
    96b8:	2300      	movs	r3, #0
    96ba:	220a      	movs	r2, #10
    96bc:	4650      	mov	r0, sl
    96be:	f001 f851 	bl	a764 <__multadd>
    96c2:	0005      	movs	r5, r0
    96c4:	4649      	mov	r1, r9
    96c6:	0028      	movs	r0, r5
    96c8:	f7ff fa8a 	bl	8be0 <quorem>
    96cc:	465b      	mov	r3, fp
    96ce:	3030      	adds	r0, #48	; 0x30
    96d0:	5518      	strb	r0, [r3, r4]
    96d2:	3401      	adds	r4, #1
    96d4:	42bc      	cmp	r4, r7
    96d6:	dbee      	blt.n	96b6 <_dtoa_r+0x982>
    96d8:	46ab      	mov	fp, r5
    96da:	0006      	movs	r6, r0
    96dc:	9c07      	ldr	r4, [sp, #28]
    96de:	2c00      	cmp	r4, #0
    96e0:	dc00      	bgt.n	96e4 <_dtoa_r+0x9b0>
    96e2:	e237      	b.n	9b54 <_dtoa_r+0xe20>
    96e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96e6:	2700      	movs	r7, #0
    96e8:	469c      	mov	ip, r3
    96ea:	4464      	add	r4, ip
    96ec:	4659      	mov	r1, fp
    96ee:	2201      	movs	r2, #1
    96f0:	4650      	mov	r0, sl
    96f2:	f001 f9d9 	bl	aaa8 <__lshift>
    96f6:	4649      	mov	r1, r9
    96f8:	4683      	mov	fp, r0
    96fa:	f001 fa35 	bl	ab68 <__mcmp>
    96fe:	2800      	cmp	r0, #0
    9700:	dc00      	bgt.n	9704 <_dtoa_r+0x9d0>
    9702:	e144      	b.n	998e <_dtoa_r+0xc5a>
    9704:	1e65      	subs	r5, r4, #1
    9706:	782b      	ldrb	r3, [r5, #0]
    9708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    970a:	e006      	b.n	971a <_dtoa_r+0x9e6>
    970c:	4295      	cmp	r5, r2
    970e:	d100      	bne.n	9712 <_dtoa_r+0x9de>
    9710:	e0b1      	b.n	9876 <_dtoa_r+0xb42>
    9712:	3c02      	subs	r4, #2
    9714:	7823      	ldrb	r3, [r4, #0]
    9716:	002c      	movs	r4, r5
    9718:	3d01      	subs	r5, #1
    971a:	2b39      	cmp	r3, #57	; 0x39
    971c:	d0f6      	beq.n	970c <_dtoa_r+0x9d8>
    971e:	3301      	adds	r3, #1
    9720:	702b      	strb	r3, [r5, #0]
    9722:	4649      	mov	r1, r9
    9724:	4650      	mov	r0, sl
    9726:	f001 f813 	bl	a750 <_Bfree>
    972a:	4643      	mov	r3, r8
    972c:	2b00      	cmp	r3, #0
    972e:	d100      	bne.n	9732 <_dtoa_r+0x9fe>
    9730:	e52f      	b.n	9192 <_dtoa_r+0x45e>
    9732:	2f00      	cmp	r7, #0
    9734:	d005      	beq.n	9742 <_dtoa_r+0xa0e>
    9736:	4547      	cmp	r7, r8
    9738:	d003      	beq.n	9742 <_dtoa_r+0xa0e>
    973a:	0039      	movs	r1, r7
    973c:	4650      	mov	r0, sl
    973e:	f001 f807 	bl	a750 <_Bfree>
    9742:	4641      	mov	r1, r8
    9744:	4650      	mov	r0, sl
    9746:	f001 f803 	bl	a750 <_Bfree>
    974a:	e522      	b.n	9192 <_dtoa_r+0x45e>
    974c:	0013      	movs	r3, r2
    974e:	e675      	b.n	943c <_dtoa_r+0x708>
    9750:	2e00      	cmp	r6, #0
    9752:	d000      	beq.n	9756 <_dtoa_r+0xa22>
    9754:	e6ab      	b.n	94ae <_dtoa_r+0x77a>
    9756:	033b      	lsls	r3, r7, #12
    9758:	2400      	movs	r4, #0
    975a:	2b00      	cmp	r3, #0
    975c:	d000      	beq.n	9760 <_dtoa_r+0xa2c>
    975e:	e6bf      	b.n	94e0 <_dtoa_r+0x7ac>
    9760:	4bba      	ldr	r3, [pc, #744]	; (9a4c <_dtoa_r+0xd18>)
    9762:	423b      	tst	r3, r7
    9764:	d100      	bne.n	9768 <_dtoa_r+0xa34>
    9766:	e6bb      	b.n	94e0 <_dtoa_r+0x7ac>
    9768:	9b06      	ldr	r3, [sp, #24]
    976a:	3401      	adds	r4, #1
    976c:	3301      	adds	r3, #1
    976e:	9306      	str	r3, [sp, #24]
    9770:	9b04      	ldr	r3, [sp, #16]
    9772:	3301      	adds	r3, #1
    9774:	9304      	str	r3, [sp, #16]
    9776:	e6b3      	b.n	94e0 <_dtoa_r+0x7ac>
    9778:	2301      	movs	r3, #1
    977a:	930b      	str	r3, [sp, #44]	; 0x2c
    977c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    977e:	2b00      	cmp	r3, #0
    9780:	dc00      	bgt.n	9784 <_dtoa_r+0xa50>
    9782:	e0d1      	b.n	9928 <_dtoa_r+0xbf4>
    9784:	001d      	movs	r5, r3
    9786:	4698      	mov	r8, r3
    9788:	930e      	str	r3, [sp, #56]	; 0x38
    978a:	9307      	str	r3, [sp, #28]
    978c:	f7ff fbc8 	bl	8f20 <_dtoa_r+0x1ec>
    9790:	9b07      	ldr	r3, [sp, #28]
    9792:	2b00      	cmp	r3, #0
    9794:	dd00      	ble.n	9798 <_dtoa_r+0xa64>
    9796:	e553      	b.n	9240 <_dtoa_r+0x50c>
    9798:	d000      	beq.n	979c <_dtoa_r+0xa68>
    979a:	e0ad      	b.n	98f8 <_dtoa_r+0xbc4>
    979c:	9804      	ldr	r0, [sp, #16]
    979e:	9905      	ldr	r1, [sp, #20]
    97a0:	2200      	movs	r2, #0
    97a2:	4bab      	ldr	r3, [pc, #684]	; (9a50 <_dtoa_r+0xd1c>)
    97a4:	f002 fff0 	bl	c788 <__aeabi_dmul>
    97a8:	003b      	movs	r3, r7
    97aa:	0032      	movs	r2, r6
    97ac:	f001 ffbe 	bl	b72c <__aeabi_dcmpge>
    97b0:	2300      	movs	r3, #0
    97b2:	4699      	mov	r9, r3
    97b4:	4698      	mov	r8, r3
    97b6:	2800      	cmp	r0, #0
    97b8:	d055      	beq.n	9866 <_dtoa_r+0xb32>
    97ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    97bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    97be:	43db      	mvns	r3, r3
    97c0:	9303      	str	r3, [sp, #12]
    97c2:	4649      	mov	r1, r9
    97c4:	4650      	mov	r0, sl
    97c6:	f000 ffc3 	bl	a750 <_Bfree>
    97ca:	4643      	mov	r3, r8
    97cc:	2b00      	cmp	r3, #0
    97ce:	d100      	bne.n	97d2 <_dtoa_r+0xa9e>
    97d0:	e4df      	b.n	9192 <_dtoa_r+0x45e>
    97d2:	e7b6      	b.n	9742 <_dtoa_r+0xa0e>
    97d4:	464a      	mov	r2, r9
    97d6:	4659      	mov	r1, fp
    97d8:	4650      	mov	r0, sl
    97da:	f001 f905 	bl	a9e8 <__pow5mult>
    97de:	4683      	mov	fp, r0
    97e0:	e653      	b.n	948a <_dtoa_r+0x756>
    97e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    97e4:	2a00      	cmp	r2, #0
    97e6:	d100      	bne.n	97ea <_dtoa_r+0xab6>
    97e8:	e1b6      	b.n	9b58 <_dtoa_r+0xe24>
    97ea:	4a9a      	ldr	r2, [pc, #616]	; (9a54 <_dtoa_r+0xd20>)
    97ec:	464c      	mov	r4, r9
    97ee:	4694      	mov	ip, r2
    97f0:	9a06      	ldr	r2, [sp, #24]
    97f2:	4463      	add	r3, ip
    97f4:	9208      	str	r2, [sp, #32]
    97f6:	e5d5      	b.n	93a4 <_dtoa_r+0x670>
    97f8:	2e00      	cmp	r6, #0
    97fa:	d000      	beq.n	97fe <_dtoa_r+0xaca>
    97fc:	e670      	b.n	94e0 <_dtoa_r+0x7ac>
    97fe:	e7aa      	b.n	9756 <_dtoa_r+0xa22>
    9800:	f000 ffb0 	bl	a764 <__multadd>
    9804:	46a2      	mov	sl, r4
    9806:	0005      	movs	r5, r0
    9808:	4680      	mov	r8, r0
    980a:	e6c7      	b.n	959c <_dtoa_r+0x868>
    980c:	2301      	movs	r3, #1
    980e:	469b      	mov	fp, r3
    9810:	e6e2      	b.n	95d8 <_dtoa_r+0x8a4>
    9812:	2300      	movs	r3, #0
    9814:	930b      	str	r3, [sp, #44]	; 0x2c
    9816:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9818:	2b02      	cmp	r3, #2
    981a:	d0af      	beq.n	977c <_dtoa_r+0xa48>
    981c:	2400      	movs	r4, #0
    981e:	4653      	mov	r3, sl
    9820:	0021      	movs	r1, r4
    9822:	645c      	str	r4, [r3, #68]	; 0x44
    9824:	4650      	mov	r0, sl
    9826:	f000 ff6b 	bl	a700 <_Balloc>
    982a:	4653      	mov	r3, sl
    982c:	6418      	str	r0, [r3, #64]	; 0x40
    982e:	2301      	movs	r3, #1
    9830:	425b      	negs	r3, r3
    9832:	9307      	str	r3, [sp, #28]
    9834:	930e      	str	r3, [sp, #56]	; 0x38
    9836:	3302      	adds	r3, #2
    9838:	900a      	str	r0, [sp, #40]	; 0x28
    983a:	9423      	str	r4, [sp, #140]	; 0x8c
    983c:	930b      	str	r3, [sp, #44]	; 0x2c
    983e:	e4ec      	b.n	921a <_dtoa_r+0x4e6>
    9840:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9842:	2b02      	cmp	r3, #2
    9844:	dc00      	bgt.n	9848 <_dtoa_r+0xb14>
    9846:	e685      	b.n	9554 <_dtoa_r+0x820>
    9848:	9b07      	ldr	r3, [sp, #28]
    984a:	2b00      	cmp	r3, #0
    984c:	d1b5      	bne.n	97ba <_dtoa_r+0xa86>
    984e:	4649      	mov	r1, r9
    9850:	2205      	movs	r2, #5
    9852:	4650      	mov	r0, sl
    9854:	f000 ff86 	bl	a764 <__multadd>
    9858:	4681      	mov	r9, r0
    985a:	0001      	movs	r1, r0
    985c:	4658      	mov	r0, fp
    985e:	f001 f983 	bl	ab68 <__mcmp>
    9862:	2800      	cmp	r0, #0
    9864:	dda9      	ble.n	97ba <_dtoa_r+0xa86>
    9866:	2331      	movs	r3, #49	; 0x31
    9868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    986a:	7013      	strb	r3, [r2, #0]
    986c:	9b03      	ldr	r3, [sp, #12]
    986e:	1c54      	adds	r4, r2, #1
    9870:	3301      	adds	r3, #1
    9872:	9303      	str	r3, [sp, #12]
    9874:	e7a5      	b.n	97c2 <_dtoa_r+0xa8e>
    9876:	9b03      	ldr	r3, [sp, #12]
    9878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    987a:	3301      	adds	r3, #1
    987c:	9303      	str	r3, [sp, #12]
    987e:	2331      	movs	r3, #49	; 0x31
    9880:	7013      	strb	r3, [r2, #0]
    9882:	e74e      	b.n	9722 <_dtoa_r+0x9ee>
    9884:	2300      	movs	r3, #0
    9886:	930b      	str	r3, [sp, #44]	; 0x2c
    9888:	f7ff fb3d 	bl	8f06 <_dtoa_r+0x1d2>
    988c:	9b06      	ldr	r3, [sp, #24]
    988e:	465c      	mov	r4, fp
    9890:	469b      	mov	fp, r3
    9892:	9b07      	ldr	r3, [sp, #28]
    9894:	469a      	mov	sl, r3
    9896:	e47c      	b.n	9192 <_dtoa_r+0x45e>
    9898:	4640      	mov	r0, r8
    989a:	f003 fd5f 	bl	d35c <__aeabi_i2d>
    989e:	0032      	movs	r2, r6
    98a0:	003b      	movs	r3, r7
    98a2:	f002 ff71 	bl	c788 <__aeabi_dmul>
    98a6:	2200      	movs	r2, #0
    98a8:	4b6b      	ldr	r3, [pc, #428]	; (9a58 <_dtoa_r+0xd24>)
    98aa:	f002 f829 	bl	b900 <__aeabi_dadd>
    98ae:	4a6b      	ldr	r2, [pc, #428]	; (9a5c <_dtoa_r+0xd28>)
    98b0:	000b      	movs	r3, r1
    98b2:	4694      	mov	ip, r2
    98b4:	4463      	add	r3, ip
    98b6:	9008      	str	r0, [sp, #32]
    98b8:	9109      	str	r1, [sp, #36]	; 0x24
    98ba:	9309      	str	r3, [sp, #36]	; 0x24
    98bc:	2200      	movs	r2, #0
    98be:	4b64      	ldr	r3, [pc, #400]	; (9a50 <_dtoa_r+0xd1c>)
    98c0:	0030      	movs	r0, r6
    98c2:	0039      	movs	r1, r7
    98c4:	f003 f9e0 	bl	cc88 <__aeabi_dsub>
    98c8:	9e08      	ldr	r6, [sp, #32]
    98ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
    98cc:	0032      	movs	r2, r6
    98ce:	003b      	movs	r3, r7
    98d0:	0004      	movs	r4, r0
    98d2:	000d      	movs	r5, r1
    98d4:	f001 ff20 	bl	b718 <__aeabi_dcmpgt>
    98d8:	2800      	cmp	r0, #0
    98da:	d000      	beq.n	98de <_dtoa_r+0xbaa>
    98dc:	e0b2      	b.n	9a44 <_dtoa_r+0xd10>
    98de:	2080      	movs	r0, #128	; 0x80
    98e0:	0600      	lsls	r0, r0, #24
    98e2:	4684      	mov	ip, r0
    98e4:	0039      	movs	r1, r7
    98e6:	4461      	add	r1, ip
    98e8:	000b      	movs	r3, r1
    98ea:	0032      	movs	r2, r6
    98ec:	0020      	movs	r0, r4
    98ee:	0029      	movs	r1, r5
    98f0:	f001 fefe 	bl	b6f0 <__aeabi_dcmplt>
    98f4:	2800      	cmp	r0, #0
    98f6:	d057      	beq.n	99a8 <_dtoa_r+0xc74>
    98f8:	2300      	movs	r3, #0
    98fa:	4699      	mov	r9, r3
    98fc:	4698      	mov	r8, r3
    98fe:	e75c      	b.n	97ba <_dtoa_r+0xa86>
    9900:	980a      	ldr	r0, [sp, #40]	; 0x28
    9902:	f7ff fa4c 	bl	8d9e <_dtoa_r+0x6a>
    9906:	1ae2      	subs	r2, r4, r3
    9908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    990a:	46a1      	mov	r9, r4
    990c:	469c      	mov	ip, r3
    990e:	4494      	add	ip, r2
    9910:	4663      	mov	r3, ip
    9912:	2400      	movs	r4, #0
    9914:	930d      	str	r3, [sp, #52]	; 0x34
    9916:	e53e      	b.n	9396 <_dtoa_r+0x662>
    9918:	9a10      	ldr	r2, [sp, #64]	; 0x40
    991a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    991c:	9208      	str	r2, [sp, #32]
    991e:	9309      	str	r3, [sp, #36]	; 0x24
    9920:	2302      	movs	r3, #2
    9922:	4698      	mov	r8, r3
    9924:	f7ff fb3a 	bl	8f9c <_dtoa_r+0x268>
    9928:	2300      	movs	r3, #0
    992a:	4652      	mov	r2, sl
    992c:	2100      	movs	r1, #0
    992e:	6453      	str	r3, [r2, #68]	; 0x44
    9930:	4650      	mov	r0, sl
    9932:	f000 fee5 	bl	a700 <_Balloc>
    9936:	4653      	mov	r3, sl
    9938:	6418      	str	r0, [r3, #64]	; 0x40
    993a:	2301      	movs	r3, #1
    993c:	900a      	str	r0, [sp, #40]	; 0x28
    993e:	9307      	str	r3, [sp, #28]
    9940:	9323      	str	r3, [sp, #140]	; 0x8c
    9942:	930e      	str	r3, [sp, #56]	; 0x38
    9944:	f7ff fb07 	bl	8f56 <_dtoa_r+0x222>
    9948:	4643      	mov	r3, r8
    994a:	930c      	str	r3, [sp, #48]	; 0x30
    994c:	465b      	mov	r3, fp
    994e:	9a06      	ldr	r2, [sp, #24]
    9950:	46a8      	mov	r8, r5
    9952:	46b3      	mov	fp, r6
    9954:	4655      	mov	r5, sl
    9956:	9e04      	ldr	r6, [sp, #16]
    9958:	4691      	mov	r9, r2
    995a:	46ba      	mov	sl, r7
    995c:	2b00      	cmp	r3, #0
    995e:	dd10      	ble.n	9982 <_dtoa_r+0xc4e>
    9960:	4659      	mov	r1, fp
    9962:	2201      	movs	r2, #1
    9964:	0038      	movs	r0, r7
    9966:	f001 f89f 	bl	aaa8 <__lshift>
    996a:	4649      	mov	r1, r9
    996c:	4683      	mov	fp, r0
    996e:	f001 f8fb 	bl	ab68 <__mcmp>
    9972:	2800      	cmp	r0, #0
    9974:	dc00      	bgt.n	9978 <_dtoa_r+0xc44>
    9976:	e157      	b.n	9c28 <_dtoa_r+0xef4>
    9978:	2e39      	cmp	r6, #57	; 0x39
    997a:	d100      	bne.n	997e <_dtoa_r+0xc4a>
    997c:	e122      	b.n	9bc4 <_dtoa_r+0xe90>
    997e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9980:	3631      	adds	r6, #49	; 0x31
    9982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9984:	4647      	mov	r7, r8
    9986:	1c6c      	adds	r4, r5, #1
    9988:	702e      	strb	r6, [r5, #0]
    998a:	4698      	mov	r8, r3
    998c:	e6c9      	b.n	9722 <_dtoa_r+0x9ee>
    998e:	2800      	cmp	r0, #0
    9990:	d103      	bne.n	999a <_dtoa_r+0xc66>
    9992:	07f3      	lsls	r3, r6, #31
    9994:	d501      	bpl.n	999a <_dtoa_r+0xc66>
    9996:	e6b5      	b.n	9704 <_dtoa_r+0x9d0>
    9998:	001c      	movs	r4, r3
    999a:	1e63      	subs	r3, r4, #1
    999c:	781a      	ldrb	r2, [r3, #0]
    999e:	2a30      	cmp	r2, #48	; 0x30
    99a0:	d0fa      	beq.n	9998 <_dtoa_r+0xc64>
    99a2:	e6be      	b.n	9722 <_dtoa_r+0x9ee>
    99a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    99a6:	4699      	mov	r9, r3
    99a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
    99aa:	9f11      	ldr	r7, [sp, #68]	; 0x44
    99ac:	e435      	b.n	921a <_dtoa_r+0x4e6>
    99ae:	2501      	movs	r5, #1
    99b0:	f7ff fab4 	bl	8f1c <_dtoa_r+0x1e8>
    99b4:	9b03      	ldr	r3, [sp, #12]
    99b6:	2b00      	cmp	r3, #0
    99b8:	d100      	bne.n	99bc <_dtoa_r+0xc88>
    99ba:	e0d4      	b.n	9b66 <_dtoa_r+0xe32>
    99bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    99be:	9911      	ldr	r1, [sp, #68]	; 0x44
    99c0:	425c      	negs	r4, r3
    99c2:	230f      	movs	r3, #15
    99c4:	4a26      	ldr	r2, [pc, #152]	; (9a60 <_dtoa_r+0xd2c>)
    99c6:	4023      	ands	r3, r4
    99c8:	00db      	lsls	r3, r3, #3
    99ca:	18d3      	adds	r3, r2, r3
    99cc:	681a      	ldr	r2, [r3, #0]
    99ce:	685b      	ldr	r3, [r3, #4]
    99d0:	f002 feda 	bl	c788 <__aeabi_dmul>
    99d4:	1124      	asrs	r4, r4, #4
    99d6:	0006      	movs	r6, r0
    99d8:	000f      	movs	r7, r1
    99da:	2c00      	cmp	r4, #0
    99dc:	d100      	bne.n	99e0 <_dtoa_r+0xcac>
    99de:	e149      	b.n	9c74 <_dtoa_r+0xf40>
    99e0:	2302      	movs	r3, #2
    99e2:	4698      	mov	r8, r3
    99e4:	4d1f      	ldr	r5, [pc, #124]	; (9a64 <_dtoa_r+0xd30>)
    99e6:	2301      	movs	r3, #1
    99e8:	4223      	tst	r3, r4
    99ea:	d009      	beq.n	9a00 <_dtoa_r+0xccc>
    99ec:	469c      	mov	ip, r3
    99ee:	682a      	ldr	r2, [r5, #0]
    99f0:	686b      	ldr	r3, [r5, #4]
    99f2:	0030      	movs	r0, r6
    99f4:	0039      	movs	r1, r7
    99f6:	44e0      	add	r8, ip
    99f8:	f002 fec6 	bl	c788 <__aeabi_dmul>
    99fc:	0006      	movs	r6, r0
    99fe:	000f      	movs	r7, r1
    9a00:	1064      	asrs	r4, r4, #1
    9a02:	3508      	adds	r5, #8
    9a04:	2c00      	cmp	r4, #0
    9a06:	d1ee      	bne.n	99e6 <_dtoa_r+0xcb2>
    9a08:	f7ff fae4 	bl	8fd4 <_dtoa_r+0x2a0>
    9a0c:	9b03      	ldr	r3, [sp, #12]
    9a0e:	2730      	movs	r7, #48	; 0x30
    9a10:	3301      	adds	r3, #1
    9a12:	9303      	str	r3, [sp, #12]
    9a14:	2330      	movs	r3, #48	; 0x30
    9a16:	702b      	strb	r3, [r5, #0]
    9a18:	e4ac      	b.n	9374 <_dtoa_r+0x640>
    9a1a:	6859      	ldr	r1, [r3, #4]
    9a1c:	4650      	mov	r0, sl
    9a1e:	f000 fe6f 	bl	a700 <_Balloc>
    9a22:	4643      	mov	r3, r8
    9a24:	4641      	mov	r1, r8
    9a26:	0004      	movs	r4, r0
    9a28:	691b      	ldr	r3, [r3, #16]
    9a2a:	310c      	adds	r1, #12
    9a2c:	1c9a      	adds	r2, r3, #2
    9a2e:	0092      	lsls	r2, r2, #2
    9a30:	300c      	adds	r0, #12
    9a32:	f7fd fb0f 	bl	7054 <memcpy>
    9a36:	2201      	movs	r2, #1
    9a38:	0021      	movs	r1, r4
    9a3a:	4650      	mov	r0, sl
    9a3c:	f001 f834 	bl	aaa8 <__lshift>
    9a40:	900c      	str	r0, [sp, #48]	; 0x30
    9a42:	e599      	b.n	9578 <_dtoa_r+0x844>
    9a44:	2300      	movs	r3, #0
    9a46:	4699      	mov	r9, r3
    9a48:	4698      	mov	r8, r3
    9a4a:	e70c      	b.n	9866 <_dtoa_r+0xb32>
    9a4c:	7ff00000 	.word	0x7ff00000
    9a50:	40140000 	.word	0x40140000
    9a54:	00000433 	.word	0x00000433
    9a58:	401c0000 	.word	0x401c0000
    9a5c:	fcc00000 	.word	0xfcc00000
    9a60:	0000d868 	.word	0x0000d868
    9a64:	0000d840 	.word	0x0000d840
    9a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9a6a:	498f      	ldr	r1, [pc, #572]	; (9ca8 <_dtoa_r+0xf74>)
    9a6c:	3b01      	subs	r3, #1
    9a6e:	00db      	lsls	r3, r3, #3
    9a70:	18c9      	adds	r1, r1, r3
    9a72:	6808      	ldr	r0, [r1, #0]
    9a74:	6849      	ldr	r1, [r1, #4]
    9a76:	9a08      	ldr	r2, [sp, #32]
    9a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a7a:	f002 fe85 	bl	c788 <__aeabi_dmul>
    9a7e:	9014      	str	r0, [sp, #80]	; 0x50
    9a80:	9115      	str	r1, [sp, #84]	; 0x54
    9a82:	0039      	movs	r1, r7
    9a84:	0030      	movs	r0, r6
    9a86:	f003 fc35 	bl	d2f4 <__aeabi_d2iz>
    9a8a:	0005      	movs	r5, r0
    9a8c:	f003 fc66 	bl	d35c <__aeabi_i2d>
    9a90:	0002      	movs	r2, r0
    9a92:	000b      	movs	r3, r1
    9a94:	0030      	movs	r0, r6
    9a96:	0039      	movs	r1, r7
    9a98:	f003 f8f6 	bl	cc88 <__aeabi_dsub>
    9a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9a9e:	9008      	str	r0, [sp, #32]
    9aa0:	9109      	str	r1, [sp, #36]	; 0x24
    9aa2:	990a      	ldr	r1, [sp, #40]	; 0x28
    9aa4:	001a      	movs	r2, r3
    9aa6:	468c      	mov	ip, r1
    9aa8:	3530      	adds	r5, #48	; 0x30
    9aaa:	4462      	add	r2, ip
    9aac:	1c4c      	adds	r4, r1, #1
    9aae:	700d      	strb	r5, [r1, #0]
    9ab0:	4690      	mov	r8, r2
    9ab2:	2b01      	cmp	r3, #1
    9ab4:	d01b      	beq.n	9aee <_dtoa_r+0xdba>
    9ab6:	9808      	ldr	r0, [sp, #32]
    9ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
    9aba:	0025      	movs	r5, r4
    9abc:	2200      	movs	r2, #0
    9abe:	4b7b      	ldr	r3, [pc, #492]	; (9cac <_dtoa_r+0xf78>)
    9ac0:	f002 fe62 	bl	c788 <__aeabi_dmul>
    9ac4:	000f      	movs	r7, r1
    9ac6:	0006      	movs	r6, r0
    9ac8:	f003 fc14 	bl	d2f4 <__aeabi_d2iz>
    9acc:	0004      	movs	r4, r0
    9ace:	f003 fc45 	bl	d35c <__aeabi_i2d>
    9ad2:	3430      	adds	r4, #48	; 0x30
    9ad4:	0002      	movs	r2, r0
    9ad6:	000b      	movs	r3, r1
    9ad8:	0030      	movs	r0, r6
    9ada:	0039      	movs	r1, r7
    9adc:	f003 f8d4 	bl	cc88 <__aeabi_dsub>
    9ae0:	702c      	strb	r4, [r5, #0]
    9ae2:	3501      	adds	r5, #1
    9ae4:	45a8      	cmp	r8, r5
    9ae6:	d1e9      	bne.n	9abc <_dtoa_r+0xd88>
    9ae8:	4644      	mov	r4, r8
    9aea:	9008      	str	r0, [sp, #32]
    9aec:	9109      	str	r1, [sp, #36]	; 0x24
    9aee:	9814      	ldr	r0, [sp, #80]	; 0x50
    9af0:	9915      	ldr	r1, [sp, #84]	; 0x54
    9af2:	2200      	movs	r2, #0
    9af4:	4b6e      	ldr	r3, [pc, #440]	; (9cb0 <_dtoa_r+0xf7c>)
    9af6:	f001 ff03 	bl	b900 <__aeabi_dadd>
    9afa:	9a08      	ldr	r2, [sp, #32]
    9afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9afe:	f001 fdf7 	bl	b6f0 <__aeabi_dcmplt>
    9b02:	2800      	cmp	r0, #0
    9b04:	d067      	beq.n	9bd6 <_dtoa_r+0xea2>
    9b06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9b08:	1e65      	subs	r5, r4, #1
    9b0a:	9303      	str	r3, [sp, #12]
    9b0c:	782f      	ldrb	r7, [r5, #0]
    9b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b10:	e42e      	b.n	9370 <_dtoa_r+0x63c>
    9b12:	4643      	mov	r3, r8
    9b14:	46b3      	mov	fp, r6
    9b16:	930c      	str	r3, [sp, #48]	; 0x30
    9b18:	9e04      	ldr	r6, [sp, #16]
    9b1a:	9b06      	ldr	r3, [sp, #24]
    9b1c:	46a8      	mov	r8, r5
    9b1e:	4699      	mov	r9, r3
    9b20:	4655      	mov	r5, sl
    9b22:	46ba      	mov	sl, r7
    9b24:	2e39      	cmp	r6, #57	; 0x39
    9b26:	d04d      	beq.n	9bc4 <_dtoa_r+0xe90>
    9b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b2a:	3601      	adds	r6, #1
    9b2c:	4647      	mov	r7, r8
    9b2e:	1c6c      	adds	r4, r5, #1
    9b30:	702e      	strb	r6, [r5, #0]
    9b32:	4698      	mov	r8, r3
    9b34:	e5f5      	b.n	9722 <_dtoa_r+0x9ee>
    9b36:	4642      	mov	r2, r8
    9b38:	9b06      	ldr	r3, [sp, #24]
    9b3a:	46b3      	mov	fp, r6
    9b3c:	46ba      	mov	sl, r7
    9b3e:	9e04      	ldr	r6, [sp, #16]
    9b40:	4699      	mov	r9, r3
    9b42:	002f      	movs	r7, r5
    9b44:	4690      	mov	r8, r2
    9b46:	e5d1      	b.n	96ec <_dtoa_r+0x9b8>
    9b48:	9b06      	ldr	r3, [sp, #24]
    9b4a:	9a07      	ldr	r2, [sp, #28]
    9b4c:	1a9b      	subs	r3, r3, r2
    9b4e:	9308      	str	r3, [sp, #32]
    9b50:	2300      	movs	r3, #0
    9b52:	e427      	b.n	93a4 <_dtoa_r+0x670>
    9b54:	2401      	movs	r4, #1
    9b56:	e5c5      	b.n	96e4 <_dtoa_r+0x9b0>
    9b58:	2336      	movs	r3, #54	; 0x36
    9b5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9b5c:	464c      	mov	r4, r9
    9b5e:	1a9b      	subs	r3, r3, r2
    9b60:	9a06      	ldr	r2, [sp, #24]
    9b62:	9208      	str	r2, [sp, #32]
    9b64:	e41e      	b.n	93a4 <_dtoa_r+0x670>
    9b66:	2302      	movs	r3, #2
    9b68:	9e10      	ldr	r6, [sp, #64]	; 0x40
    9b6a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    9b6c:	4698      	mov	r8, r3
    9b6e:	f7ff fa31 	bl	8fd4 <_dtoa_r+0x2a0>
    9b72:	9b07      	ldr	r3, [sp, #28]
    9b74:	2b00      	cmp	r3, #0
    9b76:	d100      	bne.n	9b7a <_dtoa_r+0xe46>
    9b78:	e68e      	b.n	9898 <_dtoa_r+0xb64>
    9b7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9b7c:	2c00      	cmp	r4, #0
    9b7e:	dc00      	bgt.n	9b82 <_dtoa_r+0xe4e>
    9b80:	e712      	b.n	99a8 <_dtoa_r+0xc74>
    9b82:	9b03      	ldr	r3, [sp, #12]
    9b84:	2200      	movs	r2, #0
    9b86:	3b01      	subs	r3, #1
    9b88:	9313      	str	r3, [sp, #76]	; 0x4c
    9b8a:	0030      	movs	r0, r6
    9b8c:	4b47      	ldr	r3, [pc, #284]	; (9cac <_dtoa_r+0xf78>)
    9b8e:	0039      	movs	r1, r7
    9b90:	f002 fdfa 	bl	c788 <__aeabi_dmul>
    9b94:	0006      	movs	r6, r0
    9b96:	4640      	mov	r0, r8
    9b98:	000f      	movs	r7, r1
    9b9a:	3001      	adds	r0, #1
    9b9c:	f003 fbde 	bl	d35c <__aeabi_i2d>
    9ba0:	0032      	movs	r2, r6
    9ba2:	003b      	movs	r3, r7
    9ba4:	f002 fdf0 	bl	c788 <__aeabi_dmul>
    9ba8:	2200      	movs	r2, #0
    9baa:	4b42      	ldr	r3, [pc, #264]	; (9cb4 <_dtoa_r+0xf80>)
    9bac:	f001 fea8 	bl	b900 <__aeabi_dadd>
    9bb0:	4a41      	ldr	r2, [pc, #260]	; (9cb8 <_dtoa_r+0xf84>)
    9bb2:	000b      	movs	r3, r1
    9bb4:	4694      	mov	ip, r2
    9bb6:	4463      	add	r3, ip
    9bb8:	9008      	str	r0, [sp, #32]
    9bba:	9109      	str	r1, [sp, #36]	; 0x24
    9bbc:	9412      	str	r4, [sp, #72]	; 0x48
    9bbe:	9309      	str	r3, [sp, #36]	; 0x24
    9bc0:	f7ff fa30 	bl	9024 <_dtoa_r+0x2f0>
    9bc4:	2339      	movs	r3, #57	; 0x39
    9bc6:	702b      	strb	r3, [r5, #0]
    9bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9bca:	4647      	mov	r7, r8
    9bcc:	1c6c      	adds	r4, r5, #1
    9bce:	4698      	mov	r8, r3
    9bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9bd2:	2339      	movs	r3, #57	; 0x39
    9bd4:	e5a1      	b.n	971a <_dtoa_r+0x9e6>
    9bd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9bda:	2000      	movs	r0, #0
    9bdc:	4934      	ldr	r1, [pc, #208]	; (9cb0 <_dtoa_r+0xf7c>)
    9bde:	f003 f853 	bl	cc88 <__aeabi_dsub>
    9be2:	9a08      	ldr	r2, [sp, #32]
    9be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9be6:	f001 fd97 	bl	b718 <__aeabi_dcmpgt>
    9bea:	2800      	cmp	r0, #0
    9bec:	d101      	bne.n	9bf2 <_dtoa_r+0xebe>
    9bee:	e6db      	b.n	99a8 <_dtoa_r+0xc74>
    9bf0:	001c      	movs	r4, r3
    9bf2:	1e63      	subs	r3, r4, #1
    9bf4:	781a      	ldrb	r2, [r3, #0]
    9bf6:	2a30      	cmp	r2, #48	; 0x30
    9bf8:	d0fa      	beq.n	9bf0 <_dtoa_r+0xebc>
    9bfa:	f7ff fac8 	bl	918e <_dtoa_r+0x45a>
    9bfe:	4643      	mov	r3, r8
    9c00:	46b3      	mov	fp, r6
    9c02:	930c      	str	r3, [sp, #48]	; 0x30
    9c04:	9e04      	ldr	r6, [sp, #16]
    9c06:	9b06      	ldr	r3, [sp, #24]
    9c08:	46a8      	mov	r8, r5
    9c0a:	4699      	mov	r9, r3
    9c0c:	4655      	mov	r5, sl
    9c0e:	46ba      	mov	sl, r7
    9c10:	2e39      	cmp	r6, #57	; 0x39
    9c12:	d0d7      	beq.n	9bc4 <_dtoa_r+0xe90>
    9c14:	2c00      	cmp	r4, #0
    9c16:	dd00      	ble.n	9c1a <_dtoa_r+0xee6>
    9c18:	e6b1      	b.n	997e <_dtoa_r+0xc4a>
    9c1a:	e6b2      	b.n	9982 <_dtoa_r+0xc4e>
    9c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9c1e:	464d      	mov	r5, r9
    9c20:	9203      	str	r2, [sp, #12]
    9c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c24:	f7ff fba4 	bl	9370 <_dtoa_r+0x63c>
    9c28:	2800      	cmp	r0, #0
    9c2a:	d000      	beq.n	9c2e <_dtoa_r+0xefa>
    9c2c:	e6a9      	b.n	9982 <_dtoa_r+0xc4e>
    9c2e:	07f3      	lsls	r3, r6, #31
    9c30:	d400      	bmi.n	9c34 <_dtoa_r+0xf00>
    9c32:	e6a6      	b.n	9982 <_dtoa_r+0xc4e>
    9c34:	e6a0      	b.n	9978 <_dtoa_r+0xc44>
    9c36:	2300      	movs	r3, #0
    9c38:	4641      	mov	r1, r8
    9c3a:	220a      	movs	r2, #10
    9c3c:	4650      	mov	r0, sl
    9c3e:	f000 fd91 	bl	a764 <__multadd>
    9c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c44:	4680      	mov	r8, r0
    9c46:	2b00      	cmp	r3, #0
    9c48:	dd01      	ble.n	9c4e <_dtoa_r+0xf1a>
    9c4a:	9307      	str	r3, [sp, #28]
    9c4c:	e486      	b.n	955c <_dtoa_r+0x828>
    9c4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c50:	2b02      	cmp	r3, #2
    9c52:	dc1f      	bgt.n	9c94 <_dtoa_r+0xf60>
    9c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c56:	9307      	str	r3, [sp, #28]
    9c58:	e480      	b.n	955c <_dtoa_r+0x828>
    9c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9c5c:	2b02      	cmp	r3, #2
    9c5e:	dc19      	bgt.n	9c94 <_dtoa_r+0xf60>
    9c60:	4649      	mov	r1, r9
    9c62:	f7fe ffbd 	bl	8be0 <quorem>
    9c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c68:	3030      	adds	r0, #48	; 0x30
    9c6a:	7018      	strb	r0, [r3, #0]
    9c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c6e:	0006      	movs	r6, r0
    9c70:	9307      	str	r3, [sp, #28]
    9c72:	e533      	b.n	96dc <_dtoa_r+0x9a8>
    9c74:	2302      	movs	r3, #2
    9c76:	4698      	mov	r8, r3
    9c78:	f7ff f9ac 	bl	8fd4 <_dtoa_r+0x2a0>
    9c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
    9c80:	9303      	str	r3, [sp, #12]
    9c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9c84:	001d      	movs	r5, r3
    9c86:	f7ff fb73 	bl	9370 <_dtoa_r+0x63c>
    9c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
    9c8e:	9303      	str	r3, [sp, #12]
    9c90:	f7ff fa7f 	bl	9192 <_dtoa_r+0x45e>
    9c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c96:	9307      	str	r3, [sp, #28]
    9c98:	e5d6      	b.n	9848 <_dtoa_r+0xb14>
    9c9a:	2b04      	cmp	r3, #4
    9c9c:	d100      	bne.n	9ca0 <_dtoa_r+0xf6c>
    9c9e:	e43f      	b.n	9520 <_dtoa_r+0x7ec>
    9ca0:	233c      	movs	r3, #60	; 0x3c
    9ca2:	1a18      	subs	r0, r3, r0
    9ca4:	e4d7      	b.n	9656 <_dtoa_r+0x922>
    9ca6:	46c0      	nop			; (mov r8, r8)
    9ca8:	0000d868 	.word	0x0000d868
    9cac:	40240000 	.word	0x40240000
    9cb0:	3fe00000 	.word	0x3fe00000
    9cb4:	401c0000 	.word	0x401c0000
    9cb8:	fcc00000 	.word	0xfcc00000

00009cbc <__sflush_r>:
    9cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cbe:	46c6      	mov	lr, r8
    9cc0:	b500      	push	{lr}
    9cc2:	230c      	movs	r3, #12
    9cc4:	5eca      	ldrsh	r2, [r1, r3]
    9cc6:	4680      	mov	r8, r0
    9cc8:	b293      	uxth	r3, r2
    9cca:	000c      	movs	r4, r1
    9ccc:	0719      	lsls	r1, r3, #28
    9cce:	d440      	bmi.n	9d52 <__sflush_r+0x96>
    9cd0:	2380      	movs	r3, #128	; 0x80
    9cd2:	011b      	lsls	r3, r3, #4
    9cd4:	4313      	orrs	r3, r2
    9cd6:	6862      	ldr	r2, [r4, #4]
    9cd8:	81a3      	strh	r3, [r4, #12]
    9cda:	2a00      	cmp	r2, #0
    9cdc:	dc00      	bgt.n	9ce0 <__sflush_r+0x24>
    9cde:	e070      	b.n	9dc2 <__sflush_r+0x106>
    9ce0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9ce2:	2e00      	cmp	r6, #0
    9ce4:	d031      	beq.n	9d4a <__sflush_r+0x8e>
    9ce6:	4642      	mov	r2, r8
    9ce8:	4641      	mov	r1, r8
    9cea:	6815      	ldr	r5, [r2, #0]
    9cec:	2200      	movs	r2, #0
    9cee:	b29b      	uxth	r3, r3
    9cf0:	600a      	str	r2, [r1, #0]
    9cf2:	04da      	lsls	r2, r3, #19
    9cf4:	d400      	bmi.n	9cf8 <__sflush_r+0x3c>
    9cf6:	e069      	b.n	9dcc <__sflush_r+0x110>
    9cf8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    9cfa:	075b      	lsls	r3, r3, #29
    9cfc:	d506      	bpl.n	9d0c <__sflush_r+0x50>
    9cfe:	6863      	ldr	r3, [r4, #4]
    9d00:	1ad2      	subs	r2, r2, r3
    9d02:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9d04:	2b00      	cmp	r3, #0
    9d06:	d001      	beq.n	9d0c <__sflush_r+0x50>
    9d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9d0a:	1ad2      	subs	r2, r2, r3
    9d0c:	2300      	movs	r3, #0
    9d0e:	69e1      	ldr	r1, [r4, #28]
    9d10:	4640      	mov	r0, r8
    9d12:	47b0      	blx	r6
    9d14:	1c43      	adds	r3, r0, #1
    9d16:	d03d      	beq.n	9d94 <__sflush_r+0xd8>
    9d18:	89a3      	ldrh	r3, [r4, #12]
    9d1a:	4a3a      	ldr	r2, [pc, #232]	; (9e04 <__sflush_r+0x148>)
    9d1c:	4013      	ands	r3, r2
    9d1e:	2200      	movs	r2, #0
    9d20:	6062      	str	r2, [r4, #4]
    9d22:	6922      	ldr	r2, [r4, #16]
    9d24:	b21b      	sxth	r3, r3
    9d26:	81a3      	strh	r3, [r4, #12]
    9d28:	6022      	str	r2, [r4, #0]
    9d2a:	04db      	lsls	r3, r3, #19
    9d2c:	d447      	bmi.n	9dbe <__sflush_r+0x102>
    9d2e:	4643      	mov	r3, r8
    9d30:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9d32:	601d      	str	r5, [r3, #0]
    9d34:	2900      	cmp	r1, #0
    9d36:	d008      	beq.n	9d4a <__sflush_r+0x8e>
    9d38:	0023      	movs	r3, r4
    9d3a:	3340      	adds	r3, #64	; 0x40
    9d3c:	4299      	cmp	r1, r3
    9d3e:	d002      	beq.n	9d46 <__sflush_r+0x8a>
    9d40:	4640      	mov	r0, r8
    9d42:	f000 f96f 	bl	a024 <_free_r>
    9d46:	2300      	movs	r3, #0
    9d48:	6323      	str	r3, [r4, #48]	; 0x30
    9d4a:	2000      	movs	r0, #0
    9d4c:	bc04      	pop	{r2}
    9d4e:	4690      	mov	r8, r2
    9d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d52:	6926      	ldr	r6, [r4, #16]
    9d54:	2e00      	cmp	r6, #0
    9d56:	d0f8      	beq.n	9d4a <__sflush_r+0x8e>
    9d58:	6822      	ldr	r2, [r4, #0]
    9d5a:	6026      	str	r6, [r4, #0]
    9d5c:	1b95      	subs	r5, r2, r6
    9d5e:	2200      	movs	r2, #0
    9d60:	079b      	lsls	r3, r3, #30
    9d62:	d100      	bne.n	9d66 <__sflush_r+0xaa>
    9d64:	6962      	ldr	r2, [r4, #20]
    9d66:	60a2      	str	r2, [r4, #8]
    9d68:	2d00      	cmp	r5, #0
    9d6a:	dc04      	bgt.n	9d76 <__sflush_r+0xba>
    9d6c:	e7ed      	b.n	9d4a <__sflush_r+0x8e>
    9d6e:	1836      	adds	r6, r6, r0
    9d70:	1a2d      	subs	r5, r5, r0
    9d72:	2d00      	cmp	r5, #0
    9d74:	dde9      	ble.n	9d4a <__sflush_r+0x8e>
    9d76:	002b      	movs	r3, r5
    9d78:	0032      	movs	r2, r6
    9d7a:	69e1      	ldr	r1, [r4, #28]
    9d7c:	4640      	mov	r0, r8
    9d7e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9d80:	47b8      	blx	r7
    9d82:	2800      	cmp	r0, #0
    9d84:	dcf3      	bgt.n	9d6e <__sflush_r+0xb2>
    9d86:	2240      	movs	r2, #64	; 0x40
    9d88:	2001      	movs	r0, #1
    9d8a:	89a3      	ldrh	r3, [r4, #12]
    9d8c:	4240      	negs	r0, r0
    9d8e:	4313      	orrs	r3, r2
    9d90:	81a3      	strh	r3, [r4, #12]
    9d92:	e7db      	b.n	9d4c <__sflush_r+0x90>
    9d94:	4643      	mov	r3, r8
    9d96:	6819      	ldr	r1, [r3, #0]
    9d98:	291d      	cmp	r1, #29
    9d9a:	d8f4      	bhi.n	9d86 <__sflush_r+0xca>
    9d9c:	4b1a      	ldr	r3, [pc, #104]	; (9e08 <__sflush_r+0x14c>)
    9d9e:	2201      	movs	r2, #1
    9da0:	40cb      	lsrs	r3, r1
    9da2:	439a      	bics	r2, r3
    9da4:	d1ef      	bne.n	9d86 <__sflush_r+0xca>
    9da6:	89a3      	ldrh	r3, [r4, #12]
    9da8:	4e16      	ldr	r6, [pc, #88]	; (9e04 <__sflush_r+0x148>)
    9daa:	6062      	str	r2, [r4, #4]
    9dac:	4033      	ands	r3, r6
    9dae:	6922      	ldr	r2, [r4, #16]
    9db0:	b21b      	sxth	r3, r3
    9db2:	81a3      	strh	r3, [r4, #12]
    9db4:	6022      	str	r2, [r4, #0]
    9db6:	04db      	lsls	r3, r3, #19
    9db8:	d5b9      	bpl.n	9d2e <__sflush_r+0x72>
    9dba:	2900      	cmp	r1, #0
    9dbc:	d1b7      	bne.n	9d2e <__sflush_r+0x72>
    9dbe:	6520      	str	r0, [r4, #80]	; 0x50
    9dc0:	e7b5      	b.n	9d2e <__sflush_r+0x72>
    9dc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9dc4:	2a00      	cmp	r2, #0
    9dc6:	dd00      	ble.n	9dca <__sflush_r+0x10e>
    9dc8:	e78a      	b.n	9ce0 <__sflush_r+0x24>
    9dca:	e7be      	b.n	9d4a <__sflush_r+0x8e>
    9dcc:	2200      	movs	r2, #0
    9dce:	2301      	movs	r3, #1
    9dd0:	69e1      	ldr	r1, [r4, #28]
    9dd2:	4640      	mov	r0, r8
    9dd4:	47b0      	blx	r6
    9dd6:	0002      	movs	r2, r0
    9dd8:	1c43      	adds	r3, r0, #1
    9dda:	d002      	beq.n	9de2 <__sflush_r+0x126>
    9ddc:	89a3      	ldrh	r3, [r4, #12]
    9dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9de0:	e78b      	b.n	9cfa <__sflush_r+0x3e>
    9de2:	4643      	mov	r3, r8
    9de4:	681b      	ldr	r3, [r3, #0]
    9de6:	2b00      	cmp	r3, #0
    9de8:	d0f8      	beq.n	9ddc <__sflush_r+0x120>
    9dea:	2b1d      	cmp	r3, #29
    9dec:	d001      	beq.n	9df2 <__sflush_r+0x136>
    9dee:	2b16      	cmp	r3, #22
    9df0:	d103      	bne.n	9dfa <__sflush_r+0x13e>
    9df2:	4643      	mov	r3, r8
    9df4:	2000      	movs	r0, #0
    9df6:	601d      	str	r5, [r3, #0]
    9df8:	e7a8      	b.n	9d4c <__sflush_r+0x90>
    9dfa:	2140      	movs	r1, #64	; 0x40
    9dfc:	89a3      	ldrh	r3, [r4, #12]
    9dfe:	430b      	orrs	r3, r1
    9e00:	81a3      	strh	r3, [r4, #12]
    9e02:	e7a3      	b.n	9d4c <__sflush_r+0x90>
    9e04:	fffff7ff 	.word	0xfffff7ff
    9e08:	20400001 	.word	0x20400001

00009e0c <_fflush_r>:
    9e0c:	b570      	push	{r4, r5, r6, lr}
    9e0e:	0004      	movs	r4, r0
    9e10:	000d      	movs	r5, r1
    9e12:	2800      	cmp	r0, #0
    9e14:	d002      	beq.n	9e1c <_fflush_r+0x10>
    9e16:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d009      	beq.n	9e30 <_fflush_r+0x24>
    9e1c:	220c      	movs	r2, #12
    9e1e:	5eab      	ldrsh	r3, [r5, r2]
    9e20:	2000      	movs	r0, #0
    9e22:	2b00      	cmp	r3, #0
    9e24:	d003      	beq.n	9e2e <_fflush_r+0x22>
    9e26:	0029      	movs	r1, r5
    9e28:	0020      	movs	r0, r4
    9e2a:	f7ff ff47 	bl	9cbc <__sflush_r>
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	f000 f882 	bl	9f38 <__sinit>
    9e34:	e7f2      	b.n	9e1c <_fflush_r+0x10>
    9e36:	46c0      	nop			; (mov r8, r8)

00009e38 <_cleanup_r>:
    9e38:	b510      	push	{r4, lr}
    9e3a:	4902      	ldr	r1, [pc, #8]	; (9e44 <_cleanup_r+0xc>)
    9e3c:	f000 fb52 	bl	a4e4 <_fwalk_reent>
    9e40:	bd10      	pop	{r4, pc}
    9e42:	46c0      	nop			; (mov r8, r8)
    9e44:	0000b491 	.word	0x0000b491

00009e48 <__sinit.part.1>:
    9e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e4a:	46de      	mov	lr, fp
    9e4c:	4657      	mov	r7, sl
    9e4e:	464e      	mov	r6, r9
    9e50:	4645      	mov	r5, r8
    9e52:	4b34      	ldr	r3, [pc, #208]	; (9f24 <__sinit.part.1+0xdc>)
    9e54:	b5e0      	push	{r5, r6, r7, lr}
    9e56:	63c3      	str	r3, [r0, #60]	; 0x3c
    9e58:	23b8      	movs	r3, #184	; 0xb8
    9e5a:	2400      	movs	r4, #0
    9e5c:	2203      	movs	r2, #3
    9e5e:	009b      	lsls	r3, r3, #2
    9e60:	50c4      	str	r4, [r0, r3]
    9e62:	3304      	adds	r3, #4
    9e64:	6845      	ldr	r5, [r0, #4]
    9e66:	50c2      	str	r2, [r0, r3]
    9e68:	3308      	adds	r3, #8
    9e6a:	18c2      	adds	r2, r0, r3
    9e6c:	3b04      	subs	r3, #4
    9e6e:	50c2      	str	r2, [r0, r3]
    9e70:	0006      	movs	r6, r0
    9e72:	2304      	movs	r3, #4
    9e74:	0028      	movs	r0, r5
    9e76:	602c      	str	r4, [r5, #0]
    9e78:	606c      	str	r4, [r5, #4]
    9e7a:	60ac      	str	r4, [r5, #8]
    9e7c:	81ab      	strh	r3, [r5, #12]
    9e7e:	666c      	str	r4, [r5, #100]	; 0x64
    9e80:	81ec      	strh	r4, [r5, #14]
    9e82:	612c      	str	r4, [r5, #16]
    9e84:	616c      	str	r4, [r5, #20]
    9e86:	61ac      	str	r4, [r5, #24]
    9e88:	2208      	movs	r2, #8
    9e8a:	2100      	movs	r1, #0
    9e8c:	305c      	adds	r0, #92	; 0x5c
    9e8e:	f7fd f973 	bl	7178 <memset>
    9e92:	4b25      	ldr	r3, [pc, #148]	; (9f28 <__sinit.part.1+0xe0>)
    9e94:	4f25      	ldr	r7, [pc, #148]	; (9f2c <__sinit.part.1+0xe4>)
    9e96:	469a      	mov	sl, r3
    9e98:	622b      	str	r3, [r5, #32]
    9e9a:	4b25      	ldr	r3, [pc, #148]	; (9f30 <__sinit.part.1+0xe8>)
    9e9c:	62ef      	str	r7, [r5, #44]	; 0x2c
    9e9e:	4699      	mov	r9, r3
    9ea0:	626b      	str	r3, [r5, #36]	; 0x24
    9ea2:	4b24      	ldr	r3, [pc, #144]	; (9f34 <__sinit.part.1+0xec>)
    9ea4:	61ed      	str	r5, [r5, #28]
    9ea6:	62ab      	str	r3, [r5, #40]	; 0x28
    9ea8:	68b5      	ldr	r5, [r6, #8]
    9eaa:	4698      	mov	r8, r3
    9eac:	2309      	movs	r3, #9
    9eae:	0028      	movs	r0, r5
    9eb0:	81ab      	strh	r3, [r5, #12]
    9eb2:	3b08      	subs	r3, #8
    9eb4:	602c      	str	r4, [r5, #0]
    9eb6:	606c      	str	r4, [r5, #4]
    9eb8:	60ac      	str	r4, [r5, #8]
    9eba:	666c      	str	r4, [r5, #100]	; 0x64
    9ebc:	81eb      	strh	r3, [r5, #14]
    9ebe:	612c      	str	r4, [r5, #16]
    9ec0:	616c      	str	r4, [r5, #20]
    9ec2:	61ac      	str	r4, [r5, #24]
    9ec4:	2208      	movs	r2, #8
    9ec6:	2100      	movs	r1, #0
    9ec8:	305c      	adds	r0, #92	; 0x5c
    9eca:	469b      	mov	fp, r3
    9ecc:	f7fd f954 	bl	7178 <memset>
    9ed0:	4653      	mov	r3, sl
    9ed2:	622b      	str	r3, [r5, #32]
    9ed4:	464b      	mov	r3, r9
    9ed6:	626b      	str	r3, [r5, #36]	; 0x24
    9ed8:	4643      	mov	r3, r8
    9eda:	62ef      	str	r7, [r5, #44]	; 0x2c
    9edc:	62ab      	str	r3, [r5, #40]	; 0x28
    9ede:	61ed      	str	r5, [r5, #28]
    9ee0:	68f5      	ldr	r5, [r6, #12]
    9ee2:	2312      	movs	r3, #18
    9ee4:	0028      	movs	r0, r5
    9ee6:	81ab      	strh	r3, [r5, #12]
    9ee8:	3b10      	subs	r3, #16
    9eea:	81eb      	strh	r3, [r5, #14]
    9eec:	602c      	str	r4, [r5, #0]
    9eee:	606c      	str	r4, [r5, #4]
    9ef0:	60ac      	str	r4, [r5, #8]
    9ef2:	666c      	str	r4, [r5, #100]	; 0x64
    9ef4:	612c      	str	r4, [r5, #16]
    9ef6:	616c      	str	r4, [r5, #20]
    9ef8:	61ac      	str	r4, [r5, #24]
    9efa:	2208      	movs	r2, #8
    9efc:	2100      	movs	r1, #0
    9efe:	305c      	adds	r0, #92	; 0x5c
    9f00:	f7fd f93a 	bl	7178 <memset>
    9f04:	4653      	mov	r3, sl
    9f06:	622b      	str	r3, [r5, #32]
    9f08:	464b      	mov	r3, r9
    9f0a:	626b      	str	r3, [r5, #36]	; 0x24
    9f0c:	4643      	mov	r3, r8
    9f0e:	62ab      	str	r3, [r5, #40]	; 0x28
    9f10:	465b      	mov	r3, fp
    9f12:	62ef      	str	r7, [r5, #44]	; 0x2c
    9f14:	61ed      	str	r5, [r5, #28]
    9f16:	63b3      	str	r3, [r6, #56]	; 0x38
    9f18:	bc3c      	pop	{r2, r3, r4, r5}
    9f1a:	4690      	mov	r8, r2
    9f1c:	4699      	mov	r9, r3
    9f1e:	46a2      	mov	sl, r4
    9f20:	46ab      	mov	fp, r5
    9f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f24:	00009e39 	.word	0x00009e39
    9f28:	0000b10d 	.word	0x0000b10d
    9f2c:	0000b19d 	.word	0x0000b19d
    9f30:	0000b135 	.word	0x0000b135
    9f34:	0000b171 	.word	0x0000b171

00009f38 <__sinit>:
    9f38:	6b83      	ldr	r3, [r0, #56]	; 0x38
    9f3a:	b510      	push	{r4, lr}
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d101      	bne.n	9f44 <__sinit+0xc>
    9f40:	f7ff ff82 	bl	9e48 <__sinit.part.1>
    9f44:	bd10      	pop	{r4, pc}
    9f46:	46c0      	nop			; (mov r8, r8)

00009f48 <__sfp_lock_acquire>:
    9f48:	4770      	bx	lr
    9f4a:	46c0      	nop			; (mov r8, r8)

00009f4c <__sfp_lock_release>:
    9f4c:	4770      	bx	lr
    9f4e:	46c0      	nop			; (mov r8, r8)

00009f50 <__libc_fini_array>:
    9f50:	b570      	push	{r4, r5, r6, lr}
    9f52:	4b09      	ldr	r3, [pc, #36]	; (9f78 <__libc_fini_array+0x28>)
    9f54:	4c09      	ldr	r4, [pc, #36]	; (9f7c <__libc_fini_array+0x2c>)
    9f56:	1ae4      	subs	r4, r4, r3
    9f58:	10a4      	asrs	r4, r4, #2
    9f5a:	d009      	beq.n	9f70 <__libc_fini_array+0x20>
    9f5c:	4a08      	ldr	r2, [pc, #32]	; (9f80 <__libc_fini_array+0x30>)
    9f5e:	18a5      	adds	r5, r4, r2
    9f60:	00ad      	lsls	r5, r5, #2
    9f62:	18ed      	adds	r5, r5, r3
    9f64:	682b      	ldr	r3, [r5, #0]
    9f66:	3c01      	subs	r4, #1
    9f68:	4798      	blx	r3
    9f6a:	3d04      	subs	r5, #4
    9f6c:	2c00      	cmp	r4, #0
    9f6e:	d1f9      	bne.n	9f64 <__libc_fini_array+0x14>
    9f70:	f003 fdb0 	bl	dad4 <_fini>
    9f74:	bd70      	pop	{r4, r5, r6, pc}
    9f76:	46c0      	nop			; (mov r8, r8)
    9f78:	0000dae0 	.word	0x0000dae0
    9f7c:	0000dae4 	.word	0x0000dae4
    9f80:	3fffffff 	.word	0x3fffffff

00009f84 <_malloc_trim_r>:
    9f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f86:	000c      	movs	r4, r1
    9f88:	0006      	movs	r6, r0
    9f8a:	f7fd f93f 	bl	720c <__malloc_lock>
    9f8e:	4f20      	ldr	r7, [pc, #128]	; (a010 <_malloc_trim_r+0x8c>)
    9f90:	68bb      	ldr	r3, [r7, #8]
    9f92:	685d      	ldr	r5, [r3, #4]
    9f94:	2303      	movs	r3, #3
    9f96:	439d      	bics	r5, r3
    9f98:	4b1e      	ldr	r3, [pc, #120]	; (a014 <_malloc_trim_r+0x90>)
    9f9a:	1b2c      	subs	r4, r5, r4
    9f9c:	469c      	mov	ip, r3
    9f9e:	4464      	add	r4, ip
    9fa0:	0b24      	lsrs	r4, r4, #12
    9fa2:	4b1d      	ldr	r3, [pc, #116]	; (a018 <_malloc_trim_r+0x94>)
    9fa4:	3c01      	subs	r4, #1
    9fa6:	0324      	lsls	r4, r4, #12
    9fa8:	429c      	cmp	r4, r3
    9faa:	dd07      	ble.n	9fbc <_malloc_trim_r+0x38>
    9fac:	2100      	movs	r1, #0
    9fae:	0030      	movs	r0, r6
    9fb0:	f7fd f942 	bl	7238 <_sbrk_r>
    9fb4:	68bb      	ldr	r3, [r7, #8]
    9fb6:	195b      	adds	r3, r3, r5
    9fb8:	4298      	cmp	r0, r3
    9fba:	d004      	beq.n	9fc6 <_malloc_trim_r+0x42>
    9fbc:	0030      	movs	r0, r6
    9fbe:	f7fd f927 	bl	7210 <__malloc_unlock>
    9fc2:	2000      	movs	r0, #0
    9fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fc6:	4261      	negs	r1, r4
    9fc8:	0030      	movs	r0, r6
    9fca:	f7fd f935 	bl	7238 <_sbrk_r>
    9fce:	1c43      	adds	r3, r0, #1
    9fd0:	d00d      	beq.n	9fee <_malloc_trim_r+0x6a>
    9fd2:	2201      	movs	r2, #1
    9fd4:	68bb      	ldr	r3, [r7, #8]
    9fd6:	1b2d      	subs	r5, r5, r4
    9fd8:	4315      	orrs	r5, r2
    9fda:	605d      	str	r5, [r3, #4]
    9fdc:	4b0f      	ldr	r3, [pc, #60]	; (a01c <_malloc_trim_r+0x98>)
    9fde:	0030      	movs	r0, r6
    9fe0:	681a      	ldr	r2, [r3, #0]
    9fe2:	1b14      	subs	r4, r2, r4
    9fe4:	601c      	str	r4, [r3, #0]
    9fe6:	f7fd f913 	bl	7210 <__malloc_unlock>
    9fea:	2001      	movs	r0, #1
    9fec:	e7ea      	b.n	9fc4 <_malloc_trim_r+0x40>
    9fee:	2100      	movs	r1, #0
    9ff0:	0030      	movs	r0, r6
    9ff2:	f7fd f921 	bl	7238 <_sbrk_r>
    9ff6:	68ba      	ldr	r2, [r7, #8]
    9ff8:	1a83      	subs	r3, r0, r2
    9ffa:	2b0f      	cmp	r3, #15
    9ffc:	ddde      	ble.n	9fbc <_malloc_trim_r+0x38>
    9ffe:	4908      	ldr	r1, [pc, #32]	; (a020 <_malloc_trim_r+0x9c>)
    a000:	6809      	ldr	r1, [r1, #0]
    a002:	1a40      	subs	r0, r0, r1
    a004:	4905      	ldr	r1, [pc, #20]	; (a01c <_malloc_trim_r+0x98>)
    a006:	6008      	str	r0, [r1, #0]
    a008:	2101      	movs	r1, #1
    a00a:	430b      	orrs	r3, r1
    a00c:	6053      	str	r3, [r2, #4]
    a00e:	e7d5      	b.n	9fbc <_malloc_trim_r+0x38>
    a010:	20000548 	.word	0x20000548
    a014:	00000fef 	.word	0x00000fef
    a018:	00000fff 	.word	0x00000fff
    a01c:	20000d8c 	.word	0x20000d8c
    a020:	20000950 	.word	0x20000950

0000a024 <_free_r>:
    a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a026:	0004      	movs	r4, r0
    a028:	1e0d      	subs	r5, r1, #0
    a02a:	d03c      	beq.n	a0a6 <_free_r+0x82>
    a02c:	f7fd f8ee 	bl	720c <__malloc_lock>
    a030:	0029      	movs	r1, r5
    a032:	3908      	subs	r1, #8
    a034:	6848      	ldr	r0, [r1, #4]
    a036:	2301      	movs	r3, #1
    a038:	0005      	movs	r5, r0
    a03a:	2603      	movs	r6, #3
    a03c:	439d      	bics	r5, r3
    a03e:	194a      	adds	r2, r1, r5
    a040:	469c      	mov	ip, r3
    a042:	4f61      	ldr	r7, [pc, #388]	; (a1c8 <_free_r+0x1a4>)
    a044:	6853      	ldr	r3, [r2, #4]
    a046:	43b3      	bics	r3, r6
    a048:	68be      	ldr	r6, [r7, #8]
    a04a:	42b2      	cmp	r2, r6
    a04c:	d056      	beq.n	a0fc <_free_r+0xd8>
    a04e:	4666      	mov	r6, ip
    a050:	6053      	str	r3, [r2, #4]
    a052:	4206      	tst	r6, r0
    a054:	d10a      	bne.n	a06c <_free_r+0x48>
    a056:	003e      	movs	r6, r7
    a058:	6808      	ldr	r0, [r1, #0]
    a05a:	3608      	adds	r6, #8
    a05c:	1a09      	subs	r1, r1, r0
    a05e:	182d      	adds	r5, r5, r0
    a060:	6888      	ldr	r0, [r1, #8]
    a062:	42b0      	cmp	r0, r6
    a064:	d065      	beq.n	a132 <_free_r+0x10e>
    a066:	68ce      	ldr	r6, [r1, #12]
    a068:	60c6      	str	r6, [r0, #12]
    a06a:	60b0      	str	r0, [r6, #8]
    a06c:	2001      	movs	r0, #1
    a06e:	18d6      	adds	r6, r2, r3
    a070:	6876      	ldr	r6, [r6, #4]
    a072:	4206      	tst	r6, r0
    a074:	d033      	beq.n	a0de <_free_r+0xba>
    a076:	4b55      	ldr	r3, [pc, #340]	; (a1cc <_free_r+0x1a8>)
    a078:	4328      	orrs	r0, r5
    a07a:	6048      	str	r0, [r1, #4]
    a07c:	514d      	str	r5, [r1, r5]
    a07e:	429d      	cmp	r5, r3
    a080:	d812      	bhi.n	a0a8 <_free_r+0x84>
    a082:	08ed      	lsrs	r5, r5, #3
    a084:	3bff      	subs	r3, #255	; 0xff
    a086:	10aa      	asrs	r2, r5, #2
    a088:	3bff      	subs	r3, #255	; 0xff
    a08a:	4093      	lsls	r3, r2
    a08c:	687a      	ldr	r2, [r7, #4]
    a08e:	00ed      	lsls	r5, r5, #3
    a090:	4313      	orrs	r3, r2
    a092:	607b      	str	r3, [r7, #4]
    a094:	19ef      	adds	r7, r5, r7
    a096:	68bb      	ldr	r3, [r7, #8]
    a098:	60cf      	str	r7, [r1, #12]
    a09a:	608b      	str	r3, [r1, #8]
    a09c:	60b9      	str	r1, [r7, #8]
    a09e:	60d9      	str	r1, [r3, #12]
    a0a0:	0020      	movs	r0, r4
    a0a2:	f7fd f8b5 	bl	7210 <__malloc_unlock>
    a0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0a8:	0a68      	lsrs	r0, r5, #9
    a0aa:	2804      	cmp	r0, #4
    a0ac:	d850      	bhi.n	a150 <_free_r+0x12c>
    a0ae:	09a8      	lsrs	r0, r5, #6
    a0b0:	0002      	movs	r2, r0
    a0b2:	3039      	adds	r0, #57	; 0x39
    a0b4:	3238      	adds	r2, #56	; 0x38
    a0b6:	00c0      	lsls	r0, r0, #3
    a0b8:	1838      	adds	r0, r7, r0
    a0ba:	3808      	subs	r0, #8
    a0bc:	6883      	ldr	r3, [r0, #8]
    a0be:	2603      	movs	r6, #3
    a0c0:	4298      	cmp	r0, r3
    a0c2:	d04c      	beq.n	a15e <_free_r+0x13a>
    a0c4:	685a      	ldr	r2, [r3, #4]
    a0c6:	43b2      	bics	r2, r6
    a0c8:	4295      	cmp	r5, r2
    a0ca:	d230      	bcs.n	a12e <_free_r+0x10a>
    a0cc:	689b      	ldr	r3, [r3, #8]
    a0ce:	4298      	cmp	r0, r3
    a0d0:	d1f8      	bne.n	a0c4 <_free_r+0xa0>
    a0d2:	68c3      	ldr	r3, [r0, #12]
    a0d4:	60cb      	str	r3, [r1, #12]
    a0d6:	6088      	str	r0, [r1, #8]
    a0d8:	6099      	str	r1, [r3, #8]
    a0da:	60c1      	str	r1, [r0, #12]
    a0dc:	e7e0      	b.n	a0a0 <_free_r+0x7c>
    a0de:	18ed      	adds	r5, r5, r3
    a0e0:	4e3b      	ldr	r6, [pc, #236]	; (a1d0 <_free_r+0x1ac>)
    a0e2:	6893      	ldr	r3, [r2, #8]
    a0e4:	42b3      	cmp	r3, r6
    a0e6:	d042      	beq.n	a16e <_free_r+0x14a>
    a0e8:	68d2      	ldr	r2, [r2, #12]
    a0ea:	4328      	orrs	r0, r5
    a0ec:	60da      	str	r2, [r3, #12]
    a0ee:	6093      	str	r3, [r2, #8]
    a0f0:	4b36      	ldr	r3, [pc, #216]	; (a1cc <_free_r+0x1a8>)
    a0f2:	6048      	str	r0, [r1, #4]
    a0f4:	514d      	str	r5, [r1, r5]
    a0f6:	429d      	cmp	r5, r3
    a0f8:	d8d6      	bhi.n	a0a8 <_free_r+0x84>
    a0fa:	e7c2      	b.n	a082 <_free_r+0x5e>
    a0fc:	4662      	mov	r2, ip
    a0fe:	18eb      	adds	r3, r5, r3
    a100:	4202      	tst	r2, r0
    a102:	d106      	bne.n	a112 <_free_r+0xee>
    a104:	680a      	ldr	r2, [r1, #0]
    a106:	1a89      	subs	r1, r1, r2
    a108:	6888      	ldr	r0, [r1, #8]
    a10a:	189b      	adds	r3, r3, r2
    a10c:	68ca      	ldr	r2, [r1, #12]
    a10e:	60c2      	str	r2, [r0, #12]
    a110:	6090      	str	r0, [r2, #8]
    a112:	2201      	movs	r2, #1
    a114:	431a      	orrs	r2, r3
    a116:	604a      	str	r2, [r1, #4]
    a118:	4a2e      	ldr	r2, [pc, #184]	; (a1d4 <_free_r+0x1b0>)
    a11a:	60b9      	str	r1, [r7, #8]
    a11c:	6812      	ldr	r2, [r2, #0]
    a11e:	4293      	cmp	r3, r2
    a120:	d3be      	bcc.n	a0a0 <_free_r+0x7c>
    a122:	4b2d      	ldr	r3, [pc, #180]	; (a1d8 <_free_r+0x1b4>)
    a124:	0020      	movs	r0, r4
    a126:	6819      	ldr	r1, [r3, #0]
    a128:	f7ff ff2c 	bl	9f84 <_malloc_trim_r>
    a12c:	e7b8      	b.n	a0a0 <_free_r+0x7c>
    a12e:	0018      	movs	r0, r3
    a130:	e7cf      	b.n	a0d2 <_free_r+0xae>
    a132:	4666      	mov	r6, ip
    a134:	18d0      	adds	r0, r2, r3
    a136:	6840      	ldr	r0, [r0, #4]
    a138:	4230      	tst	r0, r6
    a13a:	d13f      	bne.n	a1bc <_free_r+0x198>
    a13c:	6890      	ldr	r0, [r2, #8]
    a13e:	195d      	adds	r5, r3, r5
    a140:	68d3      	ldr	r3, [r2, #12]
    a142:	60c3      	str	r3, [r0, #12]
    a144:	6098      	str	r0, [r3, #8]
    a146:	4663      	mov	r3, ip
    a148:	432b      	orrs	r3, r5
    a14a:	604b      	str	r3, [r1, #4]
    a14c:	514d      	str	r5, [r1, r5]
    a14e:	e7a7      	b.n	a0a0 <_free_r+0x7c>
    a150:	2814      	cmp	r0, #20
    a152:	d814      	bhi.n	a17e <_free_r+0x15a>
    a154:	0002      	movs	r2, r0
    a156:	305c      	adds	r0, #92	; 0x5c
    a158:	325b      	adds	r2, #91	; 0x5b
    a15a:	00c0      	lsls	r0, r0, #3
    a15c:	e7ac      	b.n	a0b8 <_free_r+0x94>
    a15e:	2301      	movs	r3, #1
    a160:	1092      	asrs	r2, r2, #2
    a162:	4093      	lsls	r3, r2
    a164:	687a      	ldr	r2, [r7, #4]
    a166:	4313      	orrs	r3, r2
    a168:	607b      	str	r3, [r7, #4]
    a16a:	0003      	movs	r3, r0
    a16c:	e7b2      	b.n	a0d4 <_free_r+0xb0>
    a16e:	4328      	orrs	r0, r5
    a170:	60d9      	str	r1, [r3, #12]
    a172:	6099      	str	r1, [r3, #8]
    a174:	60cb      	str	r3, [r1, #12]
    a176:	608b      	str	r3, [r1, #8]
    a178:	6048      	str	r0, [r1, #4]
    a17a:	514d      	str	r5, [r1, r5]
    a17c:	e790      	b.n	a0a0 <_free_r+0x7c>
    a17e:	2854      	cmp	r0, #84	; 0x54
    a180:	d805      	bhi.n	a18e <_free_r+0x16a>
    a182:	0b28      	lsrs	r0, r5, #12
    a184:	0002      	movs	r2, r0
    a186:	306f      	adds	r0, #111	; 0x6f
    a188:	326e      	adds	r2, #110	; 0x6e
    a18a:	00c0      	lsls	r0, r0, #3
    a18c:	e794      	b.n	a0b8 <_free_r+0x94>
    a18e:	22aa      	movs	r2, #170	; 0xaa
    a190:	0052      	lsls	r2, r2, #1
    a192:	4290      	cmp	r0, r2
    a194:	d805      	bhi.n	a1a2 <_free_r+0x17e>
    a196:	0be8      	lsrs	r0, r5, #15
    a198:	0002      	movs	r2, r0
    a19a:	3078      	adds	r0, #120	; 0x78
    a19c:	3277      	adds	r2, #119	; 0x77
    a19e:	00c0      	lsls	r0, r0, #3
    a1a0:	e78a      	b.n	a0b8 <_free_r+0x94>
    a1a2:	4a0e      	ldr	r2, [pc, #56]	; (a1dc <_free_r+0x1b8>)
    a1a4:	4290      	cmp	r0, r2
    a1a6:	d805      	bhi.n	a1b4 <_free_r+0x190>
    a1a8:	0ca8      	lsrs	r0, r5, #18
    a1aa:	0002      	movs	r2, r0
    a1ac:	307d      	adds	r0, #125	; 0x7d
    a1ae:	327c      	adds	r2, #124	; 0x7c
    a1b0:	00c0      	lsls	r0, r0, #3
    a1b2:	e781      	b.n	a0b8 <_free_r+0x94>
    a1b4:	20fe      	movs	r0, #254	; 0xfe
    a1b6:	227e      	movs	r2, #126	; 0x7e
    a1b8:	0080      	lsls	r0, r0, #2
    a1ba:	e77d      	b.n	a0b8 <_free_r+0x94>
    a1bc:	4663      	mov	r3, ip
    a1be:	432b      	orrs	r3, r5
    a1c0:	604b      	str	r3, [r1, #4]
    a1c2:	6015      	str	r5, [r2, #0]
    a1c4:	e76c      	b.n	a0a0 <_free_r+0x7c>
    a1c6:	46c0      	nop			; (mov r8, r8)
    a1c8:	20000548 	.word	0x20000548
    a1cc:	000001ff 	.word	0x000001ff
    a1d0:	20000550 	.word	0x20000550
    a1d4:	20000954 	.word	0x20000954
    a1d8:	20000dbc 	.word	0x20000dbc
    a1dc:	00000554 	.word	0x00000554

0000a1e0 <__sfvwrite_r>:
    a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1e2:	464e      	mov	r6, r9
    a1e4:	46de      	mov	lr, fp
    a1e6:	4657      	mov	r7, sl
    a1e8:	4645      	mov	r5, r8
    a1ea:	b5e0      	push	{r5, r6, r7, lr}
    a1ec:	6893      	ldr	r3, [r2, #8]
    a1ee:	b083      	sub	sp, #12
    a1f0:	9000      	str	r0, [sp, #0]
    a1f2:	000c      	movs	r4, r1
    a1f4:	0016      	movs	r6, r2
    a1f6:	2b00      	cmp	r3, #0
    a1f8:	d025      	beq.n	a246 <__sfvwrite_r+0x66>
    a1fa:	898b      	ldrh	r3, [r1, #12]
    a1fc:	071a      	lsls	r2, r3, #28
    a1fe:	d52a      	bpl.n	a256 <__sfvwrite_r+0x76>
    a200:	690a      	ldr	r2, [r1, #16]
    a202:	2a00      	cmp	r2, #0
    a204:	d027      	beq.n	a256 <__sfvwrite_r+0x76>
    a206:	6832      	ldr	r2, [r6, #0]
    a208:	4693      	mov	fp, r2
    a20a:	079a      	lsls	r2, r3, #30
    a20c:	d52f      	bpl.n	a26e <__sfvwrite_r+0x8e>
    a20e:	4bb2      	ldr	r3, [pc, #712]	; (a4d8 <__sfvwrite_r+0x2f8>)
    a210:	2700      	movs	r7, #0
    a212:	2500      	movs	r5, #0
    a214:	4698      	mov	r8, r3
    a216:	46b1      	mov	r9, r6
    a218:	2d00      	cmp	r5, #0
    a21a:	d100      	bne.n	a21e <__sfvwrite_r+0x3e>
    a21c:	e072      	b.n	a304 <__sfvwrite_r+0x124>
    a21e:	002b      	movs	r3, r5
    a220:	4545      	cmp	r5, r8
    a222:	d900      	bls.n	a226 <__sfvwrite_r+0x46>
    a224:	4bac      	ldr	r3, [pc, #688]	; (a4d8 <__sfvwrite_r+0x2f8>)
    a226:	003a      	movs	r2, r7
    a228:	69e1      	ldr	r1, [r4, #28]
    a22a:	9800      	ldr	r0, [sp, #0]
    a22c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    a22e:	47b0      	blx	r6
    a230:	2800      	cmp	r0, #0
    a232:	dc00      	bgt.n	a236 <__sfvwrite_r+0x56>
    a234:	e073      	b.n	a31e <__sfvwrite_r+0x13e>
    a236:	464b      	mov	r3, r9
    a238:	689b      	ldr	r3, [r3, #8]
    a23a:	183f      	adds	r7, r7, r0
    a23c:	1a2d      	subs	r5, r5, r0
    a23e:	1a18      	subs	r0, r3, r0
    a240:	464b      	mov	r3, r9
    a242:	6098      	str	r0, [r3, #8]
    a244:	d1e8      	bne.n	a218 <__sfvwrite_r+0x38>
    a246:	2000      	movs	r0, #0
    a248:	b003      	add	sp, #12
    a24a:	bc3c      	pop	{r2, r3, r4, r5}
    a24c:	4690      	mov	r8, r2
    a24e:	4699      	mov	r9, r3
    a250:	46a2      	mov	sl, r4
    a252:	46ab      	mov	fp, r5
    a254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a256:	0021      	movs	r1, r4
    a258:	9800      	ldr	r0, [sp, #0]
    a25a:	f7fe fc43 	bl	8ae4 <__swsetup_r>
    a25e:	2800      	cmp	r0, #0
    a260:	d000      	beq.n	a264 <__sfvwrite_r+0x84>
    a262:	e130      	b.n	a4c6 <__sfvwrite_r+0x2e6>
    a264:	6832      	ldr	r2, [r6, #0]
    a266:	89a3      	ldrh	r3, [r4, #12]
    a268:	4693      	mov	fp, r2
    a26a:	079a      	lsls	r2, r3, #30
    a26c:	d4cf      	bmi.n	a20e <__sfvwrite_r+0x2e>
    a26e:	07da      	lsls	r2, r3, #31
    a270:	d55d      	bpl.n	a32e <__sfvwrite_r+0x14e>
    a272:	2300      	movs	r3, #0
    a274:	2000      	movs	r0, #0
    a276:	469a      	mov	sl, r3
    a278:	2700      	movs	r7, #0
    a27a:	001d      	movs	r5, r3
    a27c:	46b1      	mov	r9, r6
    a27e:	e029      	b.n	a2d4 <__sfvwrite_r+0xf4>
    a280:	2800      	cmp	r0, #0
    a282:	d033      	beq.n	a2ec <__sfvwrite_r+0x10c>
    a284:	46a8      	mov	r8, r5
    a286:	42bd      	cmp	r5, r7
    a288:	d900      	bls.n	a28c <__sfvwrite_r+0xac>
    a28a:	46b8      	mov	r8, r7
    a28c:	6820      	ldr	r0, [r4, #0]
    a28e:	6922      	ldr	r2, [r4, #16]
    a290:	4646      	mov	r6, r8
    a292:	6963      	ldr	r3, [r4, #20]
    a294:	4290      	cmp	r0, r2
    a296:	d907      	bls.n	a2a8 <__sfvwrite_r+0xc8>
    a298:	68a2      	ldr	r2, [r4, #8]
    a29a:	4694      	mov	ip, r2
    a29c:	449c      	add	ip, r3
    a29e:	4662      	mov	r2, ip
    a2a0:	9201      	str	r2, [sp, #4]
    a2a2:	45e0      	cmp	r8, ip
    a2a4:	dd00      	ble.n	a2a8 <__sfvwrite_r+0xc8>
    a2a6:	e0e9      	b.n	a47c <__sfvwrite_r+0x29c>
    a2a8:	4598      	cmp	r8, r3
    a2aa:	da00      	bge.n	a2ae <__sfvwrite_r+0xce>
    a2ac:	e08f      	b.n	a3ce <__sfvwrite_r+0x1ee>
    a2ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
    a2b0:	4652      	mov	r2, sl
    a2b2:	69e1      	ldr	r1, [r4, #28]
    a2b4:	9800      	ldr	r0, [sp, #0]
    a2b6:	47b0      	blx	r6
    a2b8:	1e06      	subs	r6, r0, #0
    a2ba:	dd30      	ble.n	a31e <__sfvwrite_r+0x13e>
    a2bc:	1bad      	subs	r5, r5, r6
    a2be:	2001      	movs	r0, #1
    a2c0:	2d00      	cmp	r5, #0
    a2c2:	d026      	beq.n	a312 <__sfvwrite_r+0x132>
    a2c4:	464b      	mov	r3, r9
    a2c6:	689b      	ldr	r3, [r3, #8]
    a2c8:	44b2      	add	sl, r6
    a2ca:	1bbf      	subs	r7, r7, r6
    a2cc:	1b9e      	subs	r6, r3, r6
    a2ce:	464b      	mov	r3, r9
    a2d0:	609e      	str	r6, [r3, #8]
    a2d2:	d0b8      	beq.n	a246 <__sfvwrite_r+0x66>
    a2d4:	2f00      	cmp	r7, #0
    a2d6:	d1d3      	bne.n	a280 <__sfvwrite_r+0xa0>
    a2d8:	465b      	mov	r3, fp
    a2da:	681b      	ldr	r3, [r3, #0]
    a2dc:	469a      	mov	sl, r3
    a2de:	465b      	mov	r3, fp
    a2e0:	685f      	ldr	r7, [r3, #4]
    a2e2:	2308      	movs	r3, #8
    a2e4:	469c      	mov	ip, r3
    a2e6:	44e3      	add	fp, ip
    a2e8:	2f00      	cmp	r7, #0
    a2ea:	d0f5      	beq.n	a2d8 <__sfvwrite_r+0xf8>
    a2ec:	003a      	movs	r2, r7
    a2ee:	210a      	movs	r1, #10
    a2f0:	4650      	mov	r0, sl
    a2f2:	f000 f9c5 	bl	a680 <memchr>
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d100      	bne.n	a2fc <__sfvwrite_r+0x11c>
    a2fa:	e0e2      	b.n	a4c2 <__sfvwrite_r+0x2e2>
    a2fc:	4653      	mov	r3, sl
    a2fe:	3001      	adds	r0, #1
    a300:	1ac5      	subs	r5, r0, r3
    a302:	e7bf      	b.n	a284 <__sfvwrite_r+0xa4>
    a304:	465b      	mov	r3, fp
    a306:	681f      	ldr	r7, [r3, #0]
    a308:	685d      	ldr	r5, [r3, #4]
    a30a:	2308      	movs	r3, #8
    a30c:	469c      	mov	ip, r3
    a30e:	44e3      	add	fp, ip
    a310:	e782      	b.n	a218 <__sfvwrite_r+0x38>
    a312:	0021      	movs	r1, r4
    a314:	9800      	ldr	r0, [sp, #0]
    a316:	f7ff fd79 	bl	9e0c <_fflush_r>
    a31a:	2800      	cmp	r0, #0
    a31c:	d0d2      	beq.n	a2c4 <__sfvwrite_r+0xe4>
    a31e:	220c      	movs	r2, #12
    a320:	5ea3      	ldrsh	r3, [r4, r2]
    a322:	2240      	movs	r2, #64	; 0x40
    a324:	2001      	movs	r0, #1
    a326:	4313      	orrs	r3, r2
    a328:	81a3      	strh	r3, [r4, #12]
    a32a:	4240      	negs	r0, r0
    a32c:	e78c      	b.n	a248 <__sfvwrite_r+0x68>
    a32e:	2200      	movs	r2, #0
    a330:	4691      	mov	r9, r2
    a332:	464d      	mov	r5, r9
    a334:	2d00      	cmp	r5, #0
    a336:	d023      	beq.n	a380 <__sfvwrite_r+0x1a0>
    a338:	68a2      	ldr	r2, [r4, #8]
    a33a:	4690      	mov	r8, r2
    a33c:	2280      	movs	r2, #128	; 0x80
    a33e:	0092      	lsls	r2, r2, #2
    a340:	4213      	tst	r3, r2
    a342:	d026      	beq.n	a392 <__sfvwrite_r+0x1b2>
    a344:	46c2      	mov	sl, r8
    a346:	4545      	cmp	r5, r8
    a348:	d34d      	bcc.n	a3e6 <__sfvwrite_r+0x206>
    a34a:	2290      	movs	r2, #144	; 0x90
    a34c:	00d2      	lsls	r2, r2, #3
    a34e:	4213      	tst	r3, r2
    a350:	d14e      	bne.n	a3f0 <__sfvwrite_r+0x210>
    a352:	002f      	movs	r7, r5
    a354:	6820      	ldr	r0, [r4, #0]
    a356:	4652      	mov	r2, sl
    a358:	4649      	mov	r1, r9
    a35a:	f7fc febd 	bl	70d8 <memmove>
    a35e:	4642      	mov	r2, r8
    a360:	68a3      	ldr	r3, [r4, #8]
    a362:	1a98      	subs	r0, r3, r2
    a364:	6823      	ldr	r3, [r4, #0]
    a366:	60a0      	str	r0, [r4, #8]
    a368:	4453      	add	r3, sl
    a36a:	6023      	str	r3, [r4, #0]
    a36c:	68b3      	ldr	r3, [r6, #8]
    a36e:	44b9      	add	r9, r7
    a370:	1bed      	subs	r5, r5, r7
    a372:	1bdf      	subs	r7, r3, r7
    a374:	60b7      	str	r7, [r6, #8]
    a376:	d100      	bne.n	a37a <__sfvwrite_r+0x19a>
    a378:	e765      	b.n	a246 <__sfvwrite_r+0x66>
    a37a:	89a3      	ldrh	r3, [r4, #12]
    a37c:	2d00      	cmp	r5, #0
    a37e:	d1db      	bne.n	a338 <__sfvwrite_r+0x158>
    a380:	465a      	mov	r2, fp
    a382:	6812      	ldr	r2, [r2, #0]
    a384:	4691      	mov	r9, r2
    a386:	465a      	mov	r2, fp
    a388:	6855      	ldr	r5, [r2, #4]
    a38a:	2208      	movs	r2, #8
    a38c:	4694      	mov	ip, r2
    a38e:	44e3      	add	fp, ip
    a390:	e7d0      	b.n	a334 <__sfvwrite_r+0x154>
    a392:	6820      	ldr	r0, [r4, #0]
    a394:	6923      	ldr	r3, [r4, #16]
    a396:	4298      	cmp	r0, r3
    a398:	d802      	bhi.n	a3a0 <__sfvwrite_r+0x1c0>
    a39a:	6967      	ldr	r7, [r4, #20]
    a39c:	42bd      	cmp	r5, r7
    a39e:	d259      	bcs.n	a454 <__sfvwrite_r+0x274>
    a3a0:	4647      	mov	r7, r8
    a3a2:	42af      	cmp	r7, r5
    a3a4:	d900      	bls.n	a3a8 <__sfvwrite_r+0x1c8>
    a3a6:	002f      	movs	r7, r5
    a3a8:	003a      	movs	r2, r7
    a3aa:	4649      	mov	r1, r9
    a3ac:	f7fc fe94 	bl	70d8 <memmove>
    a3b0:	68a3      	ldr	r3, [r4, #8]
    a3b2:	6822      	ldr	r2, [r4, #0]
    a3b4:	1bdb      	subs	r3, r3, r7
    a3b6:	19d2      	adds	r2, r2, r7
    a3b8:	60a3      	str	r3, [r4, #8]
    a3ba:	6022      	str	r2, [r4, #0]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d1d5      	bne.n	a36c <__sfvwrite_r+0x18c>
    a3c0:	0021      	movs	r1, r4
    a3c2:	9800      	ldr	r0, [sp, #0]
    a3c4:	f7ff fd22 	bl	9e0c <_fflush_r>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d0cf      	beq.n	a36c <__sfvwrite_r+0x18c>
    a3cc:	e7a7      	b.n	a31e <__sfvwrite_r+0x13e>
    a3ce:	4642      	mov	r2, r8
    a3d0:	4651      	mov	r1, sl
    a3d2:	f7fc fe81 	bl	70d8 <memmove>
    a3d6:	4642      	mov	r2, r8
    a3d8:	68a3      	ldr	r3, [r4, #8]
    a3da:	1a9b      	subs	r3, r3, r2
    a3dc:	60a3      	str	r3, [r4, #8]
    a3de:	6823      	ldr	r3, [r4, #0]
    a3e0:	4443      	add	r3, r8
    a3e2:	6023      	str	r3, [r4, #0]
    a3e4:	e76a      	b.n	a2bc <__sfvwrite_r+0xdc>
    a3e6:	46a8      	mov	r8, r5
    a3e8:	6820      	ldr	r0, [r4, #0]
    a3ea:	002f      	movs	r7, r5
    a3ec:	46aa      	mov	sl, r5
    a3ee:	e7b2      	b.n	a356 <__sfvwrite_r+0x176>
    a3f0:	6921      	ldr	r1, [r4, #16]
    a3f2:	6822      	ldr	r2, [r4, #0]
    a3f4:	1a52      	subs	r2, r2, r1
    a3f6:	4692      	mov	sl, r2
    a3f8:	6962      	ldr	r2, [r4, #20]
    a3fa:	0057      	lsls	r7, r2, #1
    a3fc:	18bf      	adds	r7, r7, r2
    a3fe:	0ffa      	lsrs	r2, r7, #31
    a400:	19d7      	adds	r7, r2, r7
    a402:	4652      	mov	r2, sl
    a404:	1c50      	adds	r0, r2, #1
    a406:	107f      	asrs	r7, r7, #1
    a408:	1940      	adds	r0, r0, r5
    a40a:	003a      	movs	r2, r7
    a40c:	42b8      	cmp	r0, r7
    a40e:	d901      	bls.n	a414 <__sfvwrite_r+0x234>
    a410:	0007      	movs	r7, r0
    a412:	0002      	movs	r2, r0
    a414:	055b      	lsls	r3, r3, #21
    a416:	d542      	bpl.n	a49e <__sfvwrite_r+0x2be>
    a418:	0011      	movs	r1, r2
    a41a:	9800      	ldr	r0, [sp, #0]
    a41c:	f7fc fb66 	bl	6aec <_malloc_r>
    a420:	4680      	mov	r8, r0
    a422:	1e03      	subs	r3, r0, #0
    a424:	d052      	beq.n	a4cc <__sfvwrite_r+0x2ec>
    a426:	4652      	mov	r2, sl
    a428:	6921      	ldr	r1, [r4, #16]
    a42a:	f7fc fe13 	bl	7054 <memcpy>
    a42e:	89a3      	ldrh	r3, [r4, #12]
    a430:	4a2a      	ldr	r2, [pc, #168]	; (a4dc <__sfvwrite_r+0x2fc>)
    a432:	4013      	ands	r3, r2
    a434:	2280      	movs	r2, #128	; 0x80
    a436:	4313      	orrs	r3, r2
    a438:	81a3      	strh	r3, [r4, #12]
    a43a:	4643      	mov	r3, r8
    a43c:	4640      	mov	r0, r8
    a43e:	6123      	str	r3, [r4, #16]
    a440:	4653      	mov	r3, sl
    a442:	4450      	add	r0, sl
    a444:	6167      	str	r7, [r4, #20]
    a446:	1aff      	subs	r7, r7, r3
    a448:	60a7      	str	r7, [r4, #8]
    a44a:	6020      	str	r0, [r4, #0]
    a44c:	46a8      	mov	r8, r5
    a44e:	002f      	movs	r7, r5
    a450:	46aa      	mov	sl, r5
    a452:	e780      	b.n	a356 <__sfvwrite_r+0x176>
    a454:	4b22      	ldr	r3, [pc, #136]	; (a4e0 <__sfvwrite_r+0x300>)
    a456:	0028      	movs	r0, r5
    a458:	429d      	cmp	r5, r3
    a45a:	d900      	bls.n	a45e <__sfvwrite_r+0x27e>
    a45c:	0018      	movs	r0, r3
    a45e:	0039      	movs	r1, r7
    a460:	f7fc f9c2 	bl	67e8 <__divsi3>
    a464:	003b      	movs	r3, r7
    a466:	464a      	mov	r2, r9
    a468:	4343      	muls	r3, r0
    a46a:	69e1      	ldr	r1, [r4, #28]
    a46c:	9800      	ldr	r0, [sp, #0]
    a46e:	6a67      	ldr	r7, [r4, #36]	; 0x24
    a470:	47b8      	blx	r7
    a472:	2800      	cmp	r0, #0
    a474:	dc00      	bgt.n	a478 <__sfvwrite_r+0x298>
    a476:	e752      	b.n	a31e <__sfvwrite_r+0x13e>
    a478:	0007      	movs	r7, r0
    a47a:	e777      	b.n	a36c <__sfvwrite_r+0x18c>
    a47c:	4666      	mov	r6, ip
    a47e:	4651      	mov	r1, sl
    a480:	f7fc fe2a 	bl	70d8 <memmove>
    a484:	46b4      	mov	ip, r6
    a486:	6823      	ldr	r3, [r4, #0]
    a488:	0021      	movs	r1, r4
    a48a:	4463      	add	r3, ip
    a48c:	6023      	str	r3, [r4, #0]
    a48e:	9800      	ldr	r0, [sp, #0]
    a490:	f7ff fcbc 	bl	9e0c <_fflush_r>
    a494:	2800      	cmp	r0, #0
    a496:	d000      	beq.n	a49a <__sfvwrite_r+0x2ba>
    a498:	e741      	b.n	a31e <__sfvwrite_r+0x13e>
    a49a:	9e01      	ldr	r6, [sp, #4]
    a49c:	e70e      	b.n	a2bc <__sfvwrite_r+0xdc>
    a49e:	9800      	ldr	r0, [sp, #0]
    a4a0:	f000 fc76 	bl	ad90 <_realloc_r>
    a4a4:	4680      	mov	r8, r0
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d1c7      	bne.n	a43a <__sfvwrite_r+0x25a>
    a4aa:	9d00      	ldr	r5, [sp, #0]
    a4ac:	6921      	ldr	r1, [r4, #16]
    a4ae:	0028      	movs	r0, r5
    a4b0:	f7ff fdb8 	bl	a024 <_free_r>
    a4b4:	2280      	movs	r2, #128	; 0x80
    a4b6:	89a3      	ldrh	r3, [r4, #12]
    a4b8:	4393      	bics	r3, r2
    a4ba:	3a74      	subs	r2, #116	; 0x74
    a4bc:	b21b      	sxth	r3, r3
    a4be:	602a      	str	r2, [r5, #0]
    a4c0:	e72f      	b.n	a322 <__sfvwrite_r+0x142>
    a4c2:	1c7d      	adds	r5, r7, #1
    a4c4:	e6de      	b.n	a284 <__sfvwrite_r+0xa4>
    a4c6:	2001      	movs	r0, #1
    a4c8:	4240      	negs	r0, r0
    a4ca:	e6bd      	b.n	a248 <__sfvwrite_r+0x68>
    a4cc:	9a00      	ldr	r2, [sp, #0]
    a4ce:	330c      	adds	r3, #12
    a4d0:	6013      	str	r3, [r2, #0]
    a4d2:	220c      	movs	r2, #12
    a4d4:	5ea3      	ldrsh	r3, [r4, r2]
    a4d6:	e724      	b.n	a322 <__sfvwrite_r+0x142>
    a4d8:	7ffffc00 	.word	0x7ffffc00
    a4dc:	fffffb7f 	.word	0xfffffb7f
    a4e0:	7fffffff 	.word	0x7fffffff

0000a4e4 <_fwalk_reent>:
    a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4e6:	4647      	mov	r7, r8
    a4e8:	46ce      	mov	lr, r9
    a4ea:	b580      	push	{r7, lr}
    a4ec:	27b8      	movs	r7, #184	; 0xb8
    a4ee:	4680      	mov	r8, r0
    a4f0:	00bf      	lsls	r7, r7, #2
    a4f2:	4447      	add	r7, r8
    a4f4:	4689      	mov	r9, r1
    a4f6:	2600      	movs	r6, #0
    a4f8:	2f00      	cmp	r7, #0
    a4fa:	d014      	beq.n	a526 <_fwalk_reent+0x42>
    a4fc:	687b      	ldr	r3, [r7, #4]
    a4fe:	68bc      	ldr	r4, [r7, #8]
    a500:	1e5d      	subs	r5, r3, #1
    a502:	d40d      	bmi.n	a520 <_fwalk_reent+0x3c>
    a504:	89a3      	ldrh	r3, [r4, #12]
    a506:	2b01      	cmp	r3, #1
    a508:	d907      	bls.n	a51a <_fwalk_reent+0x36>
    a50a:	220e      	movs	r2, #14
    a50c:	5ea3      	ldrsh	r3, [r4, r2]
    a50e:	3301      	adds	r3, #1
    a510:	d003      	beq.n	a51a <_fwalk_reent+0x36>
    a512:	0021      	movs	r1, r4
    a514:	4640      	mov	r0, r8
    a516:	47c8      	blx	r9
    a518:	4306      	orrs	r6, r0
    a51a:	3468      	adds	r4, #104	; 0x68
    a51c:	3d01      	subs	r5, #1
    a51e:	d2f1      	bcs.n	a504 <_fwalk_reent+0x20>
    a520:	683f      	ldr	r7, [r7, #0]
    a522:	2f00      	cmp	r7, #0
    a524:	d1ea      	bne.n	a4fc <_fwalk_reent+0x18>
    a526:	0030      	movs	r0, r6
    a528:	bc0c      	pop	{r2, r3}
    a52a:	4690      	mov	r8, r2
    a52c:	4699      	mov	r9, r3
    a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a530 <__locale_mb_cur_max>:
    a530:	4b05      	ldr	r3, [pc, #20]	; (a548 <__locale_mb_cur_max+0x18>)
    a532:	681b      	ldr	r3, [r3, #0]
    a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a536:	2b00      	cmp	r3, #0
    a538:	d003      	beq.n	a542 <__locale_mb_cur_max+0x12>
    a53a:	2294      	movs	r2, #148	; 0x94
    a53c:	0052      	lsls	r2, r2, #1
    a53e:	5c98      	ldrb	r0, [r3, r2]
    a540:	4770      	bx	lr
    a542:	4b02      	ldr	r3, [pc, #8]	; (a54c <__locale_mb_cur_max+0x1c>)
    a544:	e7f9      	b.n	a53a <__locale_mb_cur_max+0xa>
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	20000118 	.word	0x20000118
    a54c:	20000958 	.word	0x20000958

0000a550 <_localeconv_r>:
    a550:	4b04      	ldr	r3, [pc, #16]	; (a564 <_localeconv_r+0x14>)
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	6b58      	ldr	r0, [r3, #52]	; 0x34
    a556:	2800      	cmp	r0, #0
    a558:	d001      	beq.n	a55e <_localeconv_r+0xe>
    a55a:	30f0      	adds	r0, #240	; 0xf0
    a55c:	4770      	bx	lr
    a55e:	4802      	ldr	r0, [pc, #8]	; (a568 <_localeconv_r+0x18>)
    a560:	e7fb      	b.n	a55a <_localeconv_r+0xa>
    a562:	46c0      	nop			; (mov r8, r8)
    a564:	20000118 	.word	0x20000118
    a568:	20000958 	.word	0x20000958

0000a56c <__swhatbuf_r>:
    a56c:	b570      	push	{r4, r5, r6, lr}
    a56e:	000c      	movs	r4, r1
    a570:	001e      	movs	r6, r3
    a572:	230e      	movs	r3, #14
    a574:	5ec9      	ldrsh	r1, [r1, r3]
    a576:	b090      	sub	sp, #64	; 0x40
    a578:	0015      	movs	r5, r2
    a57a:	2900      	cmp	r1, #0
    a57c:	db15      	blt.n	a5aa <__swhatbuf_r+0x3e>
    a57e:	aa01      	add	r2, sp, #4
    a580:	f001 f828 	bl	b5d4 <_fstat_r>
    a584:	2800      	cmp	r0, #0
    a586:	db10      	blt.n	a5aa <__swhatbuf_r+0x3e>
    a588:	22f0      	movs	r2, #240	; 0xf0
    a58a:	9b02      	ldr	r3, [sp, #8]
    a58c:	0212      	lsls	r2, r2, #8
    a58e:	4013      	ands	r3, r2
    a590:	4a0d      	ldr	r2, [pc, #52]	; (a5c8 <__swhatbuf_r+0x5c>)
    a592:	2080      	movs	r0, #128	; 0x80
    a594:	4694      	mov	ip, r2
    a596:	4463      	add	r3, ip
    a598:	425a      	negs	r2, r3
    a59a:	4153      	adcs	r3, r2
    a59c:	6033      	str	r3, [r6, #0]
    a59e:	2380      	movs	r3, #128	; 0x80
    a5a0:	00db      	lsls	r3, r3, #3
    a5a2:	602b      	str	r3, [r5, #0]
    a5a4:	0100      	lsls	r0, r0, #4
    a5a6:	b010      	add	sp, #64	; 0x40
    a5a8:	bd70      	pop	{r4, r5, r6, pc}
    a5aa:	2300      	movs	r3, #0
    a5ac:	6033      	str	r3, [r6, #0]
    a5ae:	89a3      	ldrh	r3, [r4, #12]
    a5b0:	061b      	lsls	r3, r3, #24
    a5b2:	d503      	bpl.n	a5bc <__swhatbuf_r+0x50>
    a5b4:	2340      	movs	r3, #64	; 0x40
    a5b6:	2000      	movs	r0, #0
    a5b8:	602b      	str	r3, [r5, #0]
    a5ba:	e7f4      	b.n	a5a6 <__swhatbuf_r+0x3a>
    a5bc:	2380      	movs	r3, #128	; 0x80
    a5be:	00db      	lsls	r3, r3, #3
    a5c0:	602b      	str	r3, [r5, #0]
    a5c2:	2000      	movs	r0, #0
    a5c4:	e7ef      	b.n	a5a6 <__swhatbuf_r+0x3a>
    a5c6:	46c0      	nop			; (mov r8, r8)
    a5c8:	ffffe000 	.word	0xffffe000

0000a5cc <__smakebuf_r>:
    a5cc:	b570      	push	{r4, r5, r6, lr}
    a5ce:	898b      	ldrh	r3, [r1, #12]
    a5d0:	b082      	sub	sp, #8
    a5d2:	0005      	movs	r5, r0
    a5d4:	000c      	movs	r4, r1
    a5d6:	079b      	lsls	r3, r3, #30
    a5d8:	d507      	bpl.n	a5ea <__smakebuf_r+0x1e>
    a5da:	0023      	movs	r3, r4
    a5dc:	3343      	adds	r3, #67	; 0x43
    a5de:	6023      	str	r3, [r4, #0]
    a5e0:	6123      	str	r3, [r4, #16]
    a5e2:	2301      	movs	r3, #1
    a5e4:	6163      	str	r3, [r4, #20]
    a5e6:	b002      	add	sp, #8
    a5e8:	bd70      	pop	{r4, r5, r6, pc}
    a5ea:	ab01      	add	r3, sp, #4
    a5ec:	466a      	mov	r2, sp
    a5ee:	f7ff ffbd 	bl	a56c <__swhatbuf_r>
    a5f2:	9900      	ldr	r1, [sp, #0]
    a5f4:	0006      	movs	r6, r0
    a5f6:	0028      	movs	r0, r5
    a5f8:	f7fc fa78 	bl	6aec <_malloc_r>
    a5fc:	2800      	cmp	r0, #0
    a5fe:	d01c      	beq.n	a63a <__smakebuf_r+0x6e>
    a600:	2280      	movs	r2, #128	; 0x80
    a602:	4b13      	ldr	r3, [pc, #76]	; (a650 <__smakebuf_r+0x84>)
    a604:	63eb      	str	r3, [r5, #60]	; 0x3c
    a606:	89a3      	ldrh	r3, [r4, #12]
    a608:	6020      	str	r0, [r4, #0]
    a60a:	4313      	orrs	r3, r2
    a60c:	9a00      	ldr	r2, [sp, #0]
    a60e:	b21b      	sxth	r3, r3
    a610:	6162      	str	r2, [r4, #20]
    a612:	9a01      	ldr	r2, [sp, #4]
    a614:	81a3      	strh	r3, [r4, #12]
    a616:	6120      	str	r0, [r4, #16]
    a618:	2a00      	cmp	r2, #0
    a61a:	d102      	bne.n	a622 <__smakebuf_r+0x56>
    a61c:	4333      	orrs	r3, r6
    a61e:	81a3      	strh	r3, [r4, #12]
    a620:	e7e1      	b.n	a5e6 <__smakebuf_r+0x1a>
    a622:	230e      	movs	r3, #14
    a624:	5ee1      	ldrsh	r1, [r4, r3]
    a626:	0028      	movs	r0, r5
    a628:	f000 ffe8 	bl	b5fc <_isatty_r>
    a62c:	2800      	cmp	r0, #0
    a62e:	d00c      	beq.n	a64a <__smakebuf_r+0x7e>
    a630:	2201      	movs	r2, #1
    a632:	89a3      	ldrh	r3, [r4, #12]
    a634:	4313      	orrs	r3, r2
    a636:	b21b      	sxth	r3, r3
    a638:	e7f0      	b.n	a61c <__smakebuf_r+0x50>
    a63a:	220c      	movs	r2, #12
    a63c:	5ea3      	ldrsh	r3, [r4, r2]
    a63e:	059a      	lsls	r2, r3, #22
    a640:	d4d1      	bmi.n	a5e6 <__smakebuf_r+0x1a>
    a642:	2202      	movs	r2, #2
    a644:	4313      	orrs	r3, r2
    a646:	81a3      	strh	r3, [r4, #12]
    a648:	e7c7      	b.n	a5da <__smakebuf_r+0xe>
    a64a:	220c      	movs	r2, #12
    a64c:	5ea3      	ldrsh	r3, [r4, r2]
    a64e:	e7e5      	b.n	a61c <__smakebuf_r+0x50>
    a650:	00009e39 	.word	0x00009e39

0000a654 <__ascii_mbtowc>:
    a654:	b082      	sub	sp, #8
    a656:	2900      	cmp	r1, #0
    a658:	d00a      	beq.n	a670 <__ascii_mbtowc+0x1c>
    a65a:	2a00      	cmp	r2, #0
    a65c:	d00b      	beq.n	a676 <__ascii_mbtowc+0x22>
    a65e:	2b00      	cmp	r3, #0
    a660:	d00b      	beq.n	a67a <__ascii_mbtowc+0x26>
    a662:	7813      	ldrb	r3, [r2, #0]
    a664:	600b      	str	r3, [r1, #0]
    a666:	7810      	ldrb	r0, [r2, #0]
    a668:	1e43      	subs	r3, r0, #1
    a66a:	4198      	sbcs	r0, r3
    a66c:	b002      	add	sp, #8
    a66e:	4770      	bx	lr
    a670:	a901      	add	r1, sp, #4
    a672:	2a00      	cmp	r2, #0
    a674:	d1f3      	bne.n	a65e <__ascii_mbtowc+0xa>
    a676:	2000      	movs	r0, #0
    a678:	e7f8      	b.n	a66c <__ascii_mbtowc+0x18>
    a67a:	2002      	movs	r0, #2
    a67c:	4240      	negs	r0, r0
    a67e:	e7f5      	b.n	a66c <__ascii_mbtowc+0x18>

0000a680 <memchr>:
    a680:	b570      	push	{r4, r5, r6, lr}
    a682:	b2cd      	uxtb	r5, r1
    a684:	0783      	lsls	r3, r0, #30
    a686:	d034      	beq.n	a6f2 <memchr+0x72>
    a688:	1e54      	subs	r4, r2, #1
    a68a:	2a00      	cmp	r2, #0
    a68c:	d01b      	beq.n	a6c6 <memchr+0x46>
    a68e:	7803      	ldrb	r3, [r0, #0]
    a690:	42ab      	cmp	r3, r5
    a692:	d019      	beq.n	a6c8 <memchr+0x48>
    a694:	2203      	movs	r2, #3
    a696:	e004      	b.n	a6a2 <memchr+0x22>
    a698:	3c01      	subs	r4, #1
    a69a:	d314      	bcc.n	a6c6 <memchr+0x46>
    a69c:	7803      	ldrb	r3, [r0, #0]
    a69e:	42ab      	cmp	r3, r5
    a6a0:	d012      	beq.n	a6c8 <memchr+0x48>
    a6a2:	3001      	adds	r0, #1
    a6a4:	4210      	tst	r0, r2
    a6a6:	d1f7      	bne.n	a698 <memchr+0x18>
    a6a8:	2c03      	cmp	r4, #3
    a6aa:	d80e      	bhi.n	a6ca <memchr+0x4a>
    a6ac:	2c00      	cmp	r4, #0
    a6ae:	d00a      	beq.n	a6c6 <memchr+0x46>
    a6b0:	7803      	ldrb	r3, [r0, #0]
    a6b2:	42ab      	cmp	r3, r5
    a6b4:	d008      	beq.n	a6c8 <memchr+0x48>
    a6b6:	1904      	adds	r4, r0, r4
    a6b8:	e002      	b.n	a6c0 <memchr+0x40>
    a6ba:	7803      	ldrb	r3, [r0, #0]
    a6bc:	42ab      	cmp	r3, r5
    a6be:	d003      	beq.n	a6c8 <memchr+0x48>
    a6c0:	3001      	adds	r0, #1
    a6c2:	4284      	cmp	r4, r0
    a6c4:	d1f9      	bne.n	a6ba <memchr+0x3a>
    a6c6:	2000      	movs	r0, #0
    a6c8:	bd70      	pop	{r4, r5, r6, pc}
    a6ca:	22ff      	movs	r2, #255	; 0xff
    a6cc:	060b      	lsls	r3, r1, #24
    a6ce:	0c1b      	lsrs	r3, r3, #16
    a6d0:	4011      	ands	r1, r2
    a6d2:	4319      	orrs	r1, r3
    a6d4:	040b      	lsls	r3, r1, #16
    a6d6:	4e08      	ldr	r6, [pc, #32]	; (a6f8 <memchr+0x78>)
    a6d8:	4319      	orrs	r1, r3
    a6da:	6803      	ldr	r3, [r0, #0]
    a6dc:	4a07      	ldr	r2, [pc, #28]	; (a6fc <memchr+0x7c>)
    a6de:	404b      	eors	r3, r1
    a6e0:	189a      	adds	r2, r3, r2
    a6e2:	439a      	bics	r2, r3
    a6e4:	4232      	tst	r2, r6
    a6e6:	d1e3      	bne.n	a6b0 <memchr+0x30>
    a6e8:	3c04      	subs	r4, #4
    a6ea:	3004      	adds	r0, #4
    a6ec:	2c03      	cmp	r4, #3
    a6ee:	d8f4      	bhi.n	a6da <memchr+0x5a>
    a6f0:	e7dc      	b.n	a6ac <memchr+0x2c>
    a6f2:	0014      	movs	r4, r2
    a6f4:	e7d8      	b.n	a6a8 <memchr+0x28>
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	80808080 	.word	0x80808080
    a6fc:	fefefeff 	.word	0xfefefeff

0000a700 <_Balloc>:
    a700:	b570      	push	{r4, r5, r6, lr}
    a702:	0004      	movs	r4, r0
    a704:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    a706:	000d      	movs	r5, r1
    a708:	2800      	cmp	r0, #0
    a70a:	d00a      	beq.n	a722 <_Balloc+0x22>
    a70c:	00ab      	lsls	r3, r5, #2
    a70e:	18c3      	adds	r3, r0, r3
    a710:	6818      	ldr	r0, [r3, #0]
    a712:	2800      	cmp	r0, #0
    a714:	d00f      	beq.n	a736 <_Balloc+0x36>
    a716:	6802      	ldr	r2, [r0, #0]
    a718:	601a      	str	r2, [r3, #0]
    a71a:	2300      	movs	r3, #0
    a71c:	6103      	str	r3, [r0, #16]
    a71e:	60c3      	str	r3, [r0, #12]
    a720:	bd70      	pop	{r4, r5, r6, pc}
    a722:	2221      	movs	r2, #33	; 0x21
    a724:	2104      	movs	r1, #4
    a726:	0020      	movs	r0, r4
    a728:	f000 fe74 	bl	b414 <_calloc_r>
    a72c:	64e0      	str	r0, [r4, #76]	; 0x4c
    a72e:	2800      	cmp	r0, #0
    a730:	d1ec      	bne.n	a70c <_Balloc+0xc>
    a732:	2000      	movs	r0, #0
    a734:	e7f4      	b.n	a720 <_Balloc+0x20>
    a736:	2601      	movs	r6, #1
    a738:	40ae      	lsls	r6, r5
    a73a:	1d72      	adds	r2, r6, #5
    a73c:	0092      	lsls	r2, r2, #2
    a73e:	2101      	movs	r1, #1
    a740:	0020      	movs	r0, r4
    a742:	f000 fe67 	bl	b414 <_calloc_r>
    a746:	2800      	cmp	r0, #0
    a748:	d0f3      	beq.n	a732 <_Balloc+0x32>
    a74a:	6045      	str	r5, [r0, #4]
    a74c:	6086      	str	r6, [r0, #8]
    a74e:	e7e4      	b.n	a71a <_Balloc+0x1a>

0000a750 <_Bfree>:
    a750:	2900      	cmp	r1, #0
    a752:	d006      	beq.n	a762 <_Bfree+0x12>
    a754:	684b      	ldr	r3, [r1, #4]
    a756:	009a      	lsls	r2, r3, #2
    a758:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a75a:	189b      	adds	r3, r3, r2
    a75c:	681a      	ldr	r2, [r3, #0]
    a75e:	600a      	str	r2, [r1, #0]
    a760:	6019      	str	r1, [r3, #0]
    a762:	4770      	bx	lr

0000a764 <__multadd>:
    a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a766:	46ce      	mov	lr, r9
    a768:	4647      	mov	r7, r8
    a76a:	4681      	mov	r9, r0
    a76c:	0008      	movs	r0, r1
    a76e:	b580      	push	{r7, lr}
    a770:	000d      	movs	r5, r1
    a772:	690c      	ldr	r4, [r1, #16]
    a774:	001f      	movs	r7, r3
    a776:	2100      	movs	r1, #0
    a778:	3014      	adds	r0, #20
    a77a:	6803      	ldr	r3, [r0, #0]
    a77c:	3101      	adds	r1, #1
    a77e:	041e      	lsls	r6, r3, #16
    a780:	0c36      	lsrs	r6, r6, #16
    a782:	4356      	muls	r6, r2
    a784:	0c1b      	lsrs	r3, r3, #16
    a786:	4353      	muls	r3, r2
    a788:	19f6      	adds	r6, r6, r7
    a78a:	0c37      	lsrs	r7, r6, #16
    a78c:	19db      	adds	r3, r3, r7
    a78e:	0436      	lsls	r6, r6, #16
    a790:	0c1f      	lsrs	r7, r3, #16
    a792:	0c36      	lsrs	r6, r6, #16
    a794:	041b      	lsls	r3, r3, #16
    a796:	199b      	adds	r3, r3, r6
    a798:	c008      	stmia	r0!, {r3}
    a79a:	428c      	cmp	r4, r1
    a79c:	dced      	bgt.n	a77a <__multadd+0x16>
    a79e:	2f00      	cmp	r7, #0
    a7a0:	d008      	beq.n	a7b4 <__multadd+0x50>
    a7a2:	68ab      	ldr	r3, [r5, #8]
    a7a4:	429c      	cmp	r4, r3
    a7a6:	da0a      	bge.n	a7be <__multadd+0x5a>
    a7a8:	1d23      	adds	r3, r4, #4
    a7aa:	009b      	lsls	r3, r3, #2
    a7ac:	18eb      	adds	r3, r5, r3
    a7ae:	3401      	adds	r4, #1
    a7b0:	605f      	str	r7, [r3, #4]
    a7b2:	612c      	str	r4, [r5, #16]
    a7b4:	0028      	movs	r0, r5
    a7b6:	bc0c      	pop	{r2, r3}
    a7b8:	4690      	mov	r8, r2
    a7ba:	4699      	mov	r9, r3
    a7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7be:	686b      	ldr	r3, [r5, #4]
    a7c0:	4648      	mov	r0, r9
    a7c2:	1c59      	adds	r1, r3, #1
    a7c4:	f7ff ff9c 	bl	a700 <_Balloc>
    a7c8:	0029      	movs	r1, r5
    a7ca:	692b      	ldr	r3, [r5, #16]
    a7cc:	4680      	mov	r8, r0
    a7ce:	1c9a      	adds	r2, r3, #2
    a7d0:	0092      	lsls	r2, r2, #2
    a7d2:	310c      	adds	r1, #12
    a7d4:	300c      	adds	r0, #12
    a7d6:	f7fc fc3d 	bl	7054 <memcpy>
    a7da:	686b      	ldr	r3, [r5, #4]
    a7dc:	009a      	lsls	r2, r3, #2
    a7de:	464b      	mov	r3, r9
    a7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a7e2:	189b      	adds	r3, r3, r2
    a7e4:	681a      	ldr	r2, [r3, #0]
    a7e6:	602a      	str	r2, [r5, #0]
    a7e8:	601d      	str	r5, [r3, #0]
    a7ea:	4645      	mov	r5, r8
    a7ec:	e7dc      	b.n	a7a8 <__multadd+0x44>
    a7ee:	46c0      	nop			; (mov r8, r8)

0000a7f0 <__hi0bits>:
    a7f0:	0003      	movs	r3, r0
    a7f2:	0c02      	lsrs	r2, r0, #16
    a7f4:	2000      	movs	r0, #0
    a7f6:	2a00      	cmp	r2, #0
    a7f8:	d101      	bne.n	a7fe <__hi0bits+0xe>
    a7fa:	041b      	lsls	r3, r3, #16
    a7fc:	3010      	adds	r0, #16
    a7fe:	0e1a      	lsrs	r2, r3, #24
    a800:	d101      	bne.n	a806 <__hi0bits+0x16>
    a802:	3008      	adds	r0, #8
    a804:	021b      	lsls	r3, r3, #8
    a806:	0f1a      	lsrs	r2, r3, #28
    a808:	d101      	bne.n	a80e <__hi0bits+0x1e>
    a80a:	3004      	adds	r0, #4
    a80c:	011b      	lsls	r3, r3, #4
    a80e:	0f9a      	lsrs	r2, r3, #30
    a810:	d101      	bne.n	a816 <__hi0bits+0x26>
    a812:	3002      	adds	r0, #2
    a814:	009b      	lsls	r3, r3, #2
    a816:	2b00      	cmp	r3, #0
    a818:	db03      	blt.n	a822 <__hi0bits+0x32>
    a81a:	3001      	adds	r0, #1
    a81c:	005b      	lsls	r3, r3, #1
    a81e:	d400      	bmi.n	a822 <__hi0bits+0x32>
    a820:	2020      	movs	r0, #32
    a822:	4770      	bx	lr

0000a824 <__lo0bits>:
    a824:	6803      	ldr	r3, [r0, #0]
    a826:	075a      	lsls	r2, r3, #29
    a828:	d009      	beq.n	a83e <__lo0bits+0x1a>
    a82a:	2200      	movs	r2, #0
    a82c:	07d9      	lsls	r1, r3, #31
    a82e:	d404      	bmi.n	a83a <__lo0bits+0x16>
    a830:	079a      	lsls	r2, r3, #30
    a832:	d420      	bmi.n	a876 <__lo0bits+0x52>
    a834:	2202      	movs	r2, #2
    a836:	089b      	lsrs	r3, r3, #2
    a838:	6003      	str	r3, [r0, #0]
    a83a:	0010      	movs	r0, r2
    a83c:	4770      	bx	lr
    a83e:	0419      	lsls	r1, r3, #16
    a840:	2200      	movs	r2, #0
    a842:	2900      	cmp	r1, #0
    a844:	d101      	bne.n	a84a <__lo0bits+0x26>
    a846:	0c1b      	lsrs	r3, r3, #16
    a848:	3210      	adds	r2, #16
    a84a:	21ff      	movs	r1, #255	; 0xff
    a84c:	4219      	tst	r1, r3
    a84e:	d101      	bne.n	a854 <__lo0bits+0x30>
    a850:	3208      	adds	r2, #8
    a852:	0a1b      	lsrs	r3, r3, #8
    a854:	0719      	lsls	r1, r3, #28
    a856:	d101      	bne.n	a85c <__lo0bits+0x38>
    a858:	3204      	adds	r2, #4
    a85a:	091b      	lsrs	r3, r3, #4
    a85c:	0799      	lsls	r1, r3, #30
    a85e:	d101      	bne.n	a864 <__lo0bits+0x40>
    a860:	3202      	adds	r2, #2
    a862:	089b      	lsrs	r3, r3, #2
    a864:	07d9      	lsls	r1, r3, #31
    a866:	d404      	bmi.n	a872 <__lo0bits+0x4e>
    a868:	085b      	lsrs	r3, r3, #1
    a86a:	d101      	bne.n	a870 <__lo0bits+0x4c>
    a86c:	2220      	movs	r2, #32
    a86e:	e7e4      	b.n	a83a <__lo0bits+0x16>
    a870:	3201      	adds	r2, #1
    a872:	6003      	str	r3, [r0, #0]
    a874:	e7e1      	b.n	a83a <__lo0bits+0x16>
    a876:	085b      	lsrs	r3, r3, #1
    a878:	6003      	str	r3, [r0, #0]
    a87a:	2201      	movs	r2, #1
    a87c:	e7dd      	b.n	a83a <__lo0bits+0x16>
    a87e:	46c0      	nop			; (mov r8, r8)

0000a880 <__i2b>:
    a880:	b510      	push	{r4, lr}
    a882:	000c      	movs	r4, r1
    a884:	2101      	movs	r1, #1
    a886:	f7ff ff3b 	bl	a700 <_Balloc>
    a88a:	2301      	movs	r3, #1
    a88c:	6144      	str	r4, [r0, #20]
    a88e:	6103      	str	r3, [r0, #16]
    a890:	bd10      	pop	{r4, pc}
    a892:	46c0      	nop			; (mov r8, r8)

0000a894 <__multiply>:
    a894:	b5f0      	push	{r4, r5, r6, r7, lr}
    a896:	4657      	mov	r7, sl
    a898:	464e      	mov	r6, r9
    a89a:	4645      	mov	r5, r8
    a89c:	46de      	mov	lr, fp
    a89e:	b5e0      	push	{r5, r6, r7, lr}
    a8a0:	6914      	ldr	r4, [r2, #16]
    a8a2:	690e      	ldr	r6, [r1, #16]
    a8a4:	b085      	sub	sp, #20
    a8a6:	000f      	movs	r7, r1
    a8a8:	0015      	movs	r5, r2
    a8aa:	42a6      	cmp	r6, r4
    a8ac:	da04      	bge.n	a8b8 <__multiply+0x24>
    a8ae:	0033      	movs	r3, r6
    a8b0:	0017      	movs	r7, r2
    a8b2:	0026      	movs	r6, r4
    a8b4:	000d      	movs	r5, r1
    a8b6:	001c      	movs	r4, r3
    a8b8:	1933      	adds	r3, r6, r4
    a8ba:	4698      	mov	r8, r3
    a8bc:	68bb      	ldr	r3, [r7, #8]
    a8be:	6879      	ldr	r1, [r7, #4]
    a8c0:	4598      	cmp	r8, r3
    a8c2:	dd00      	ble.n	a8c6 <__multiply+0x32>
    a8c4:	3101      	adds	r1, #1
    a8c6:	f7ff ff1b 	bl	a700 <_Balloc>
    a8ca:	2214      	movs	r2, #20
    a8cc:	0003      	movs	r3, r0
    a8ce:	4694      	mov	ip, r2
    a8d0:	4463      	add	r3, ip
    a8d2:	469b      	mov	fp, r3
    a8d4:	4643      	mov	r3, r8
    a8d6:	009b      	lsls	r3, r3, #2
    a8d8:	445b      	add	r3, fp
    a8da:	0019      	movs	r1, r3
    a8dc:	9302      	str	r3, [sp, #8]
    a8de:	9003      	str	r0, [sp, #12]
    a8e0:	465b      	mov	r3, fp
    a8e2:	2200      	movs	r2, #0
    a8e4:	458b      	cmp	fp, r1
    a8e6:	d203      	bcs.n	a8f0 <__multiply+0x5c>
    a8e8:	9902      	ldr	r1, [sp, #8]
    a8ea:	c304      	stmia	r3!, {r2}
    a8ec:	4299      	cmp	r1, r3
    a8ee:	d8fc      	bhi.n	a8ea <__multiply+0x56>
    a8f0:	2314      	movs	r3, #20
    a8f2:	00a4      	lsls	r4, r4, #2
    a8f4:	469a      	mov	sl, r3
    a8f6:	3714      	adds	r7, #20
    a8f8:	0023      	movs	r3, r4
    a8fa:	46bc      	mov	ip, r7
    a8fc:	44aa      	add	sl, r5
    a8fe:	00b6      	lsls	r6, r6, #2
    a900:	4453      	add	r3, sl
    a902:	9700      	str	r7, [sp, #0]
    a904:	44b4      	add	ip, r6
    a906:	9301      	str	r3, [sp, #4]
    a908:	459a      	cmp	sl, r3
    a90a:	d24f      	bcs.n	a9ac <__multiply+0x118>
    a90c:	4653      	mov	r3, sl
    a90e:	681b      	ldr	r3, [r3, #0]
    a910:	041e      	lsls	r6, r3, #16
    a912:	0c36      	lsrs	r6, r6, #16
    a914:	d020      	beq.n	a958 <__multiply+0xc4>
    a916:	465c      	mov	r4, fp
    a918:	2700      	movs	r7, #0
    a91a:	9d00      	ldr	r5, [sp, #0]
    a91c:	0021      	movs	r1, r4
    a91e:	cc08      	ldmia	r4!, {r3}
    a920:	cd04      	ldmia	r5!, {r2}
    a922:	4699      	mov	r9, r3
    a924:	4648      	mov	r0, r9
    a926:	0413      	lsls	r3, r2, #16
    a928:	0c1b      	lsrs	r3, r3, #16
    a92a:	4373      	muls	r3, r6
    a92c:	0400      	lsls	r0, r0, #16
    a92e:	0c00      	lsrs	r0, r0, #16
    a930:	181b      	adds	r3, r3, r0
    a932:	19d8      	adds	r0, r3, r7
    a934:	0c13      	lsrs	r3, r2, #16
    a936:	464a      	mov	r2, r9
    a938:	4373      	muls	r3, r6
    a93a:	0c12      	lsrs	r2, r2, #16
    a93c:	189b      	adds	r3, r3, r2
    a93e:	0c02      	lsrs	r2, r0, #16
    a940:	189b      	adds	r3, r3, r2
    a942:	0402      	lsls	r2, r0, #16
    a944:	0c1f      	lsrs	r7, r3, #16
    a946:	0c12      	lsrs	r2, r2, #16
    a948:	041b      	lsls	r3, r3, #16
    a94a:	4313      	orrs	r3, r2
    a94c:	600b      	str	r3, [r1, #0]
    a94e:	45ac      	cmp	ip, r5
    a950:	d8e4      	bhi.n	a91c <__multiply+0x88>
    a952:	4653      	mov	r3, sl
    a954:	6027      	str	r7, [r4, #0]
    a956:	681b      	ldr	r3, [r3, #0]
    a958:	0c1e      	lsrs	r6, r3, #16
    a95a:	d020      	beq.n	a99e <__multiply+0x10a>
    a95c:	465b      	mov	r3, fp
    a95e:	2100      	movs	r1, #0
    a960:	681b      	ldr	r3, [r3, #0]
    a962:	465c      	mov	r4, fp
    a964:	0018      	movs	r0, r3
    a966:	000f      	movs	r7, r1
    a968:	4662      	mov	r2, ip
    a96a:	9d00      	ldr	r5, [sp, #0]
    a96c:	8829      	ldrh	r1, [r5, #0]
    a96e:	0c00      	lsrs	r0, r0, #16
    a970:	4371      	muls	r1, r6
    a972:	1809      	adds	r1, r1, r0
    a974:	19c9      	adds	r1, r1, r7
    a976:	041b      	lsls	r3, r3, #16
    a978:	0408      	lsls	r0, r1, #16
    a97a:	0c1b      	lsrs	r3, r3, #16
    a97c:	4303      	orrs	r3, r0
    a97e:	6023      	str	r3, [r4, #0]
    a980:	cd08      	ldmia	r5!, {r3}
    a982:	6860      	ldr	r0, [r4, #4]
    a984:	0c1b      	lsrs	r3, r3, #16
    a986:	4373      	muls	r3, r6
    a988:	0407      	lsls	r7, r0, #16
    a98a:	0c3f      	lsrs	r7, r7, #16
    a98c:	19db      	adds	r3, r3, r7
    a98e:	0c09      	lsrs	r1, r1, #16
    a990:	185b      	adds	r3, r3, r1
    a992:	0c1f      	lsrs	r7, r3, #16
    a994:	3404      	adds	r4, #4
    a996:	42aa      	cmp	r2, r5
    a998:	d8e8      	bhi.n	a96c <__multiply+0xd8>
    a99a:	4694      	mov	ip, r2
    a99c:	6023      	str	r3, [r4, #0]
    a99e:	2304      	movs	r3, #4
    a9a0:	4699      	mov	r9, r3
    a9a2:	9b01      	ldr	r3, [sp, #4]
    a9a4:	44ca      	add	sl, r9
    a9a6:	44cb      	add	fp, r9
    a9a8:	4553      	cmp	r3, sl
    a9aa:	d8af      	bhi.n	a90c <__multiply+0x78>
    a9ac:	4643      	mov	r3, r8
    a9ae:	2b00      	cmp	r3, #0
    a9b0:	dd0e      	ble.n	a9d0 <__multiply+0x13c>
    a9b2:	9b02      	ldr	r3, [sp, #8]
    a9b4:	3b04      	subs	r3, #4
    a9b6:	681a      	ldr	r2, [r3, #0]
    a9b8:	2a00      	cmp	r2, #0
    a9ba:	d109      	bne.n	a9d0 <__multiply+0x13c>
    a9bc:	4642      	mov	r2, r8
    a9be:	e003      	b.n	a9c8 <__multiply+0x134>
    a9c0:	3b04      	subs	r3, #4
    a9c2:	6819      	ldr	r1, [r3, #0]
    a9c4:	2900      	cmp	r1, #0
    a9c6:	d102      	bne.n	a9ce <__multiply+0x13a>
    a9c8:	3a01      	subs	r2, #1
    a9ca:	2a00      	cmp	r2, #0
    a9cc:	d1f8      	bne.n	a9c0 <__multiply+0x12c>
    a9ce:	4690      	mov	r8, r2
    a9d0:	9b03      	ldr	r3, [sp, #12]
    a9d2:	4642      	mov	r2, r8
    a9d4:	0018      	movs	r0, r3
    a9d6:	611a      	str	r2, [r3, #16]
    a9d8:	b005      	add	sp, #20
    a9da:	bc3c      	pop	{r2, r3, r4, r5}
    a9dc:	4690      	mov	r8, r2
    a9de:	4699      	mov	r9, r3
    a9e0:	46a2      	mov	sl, r4
    a9e2:	46ab      	mov	fp, r5
    a9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9e6:	46c0      	nop			; (mov r8, r8)

0000a9e8 <__pow5mult>:
    a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9ea:	4647      	mov	r7, r8
    a9ec:	46ce      	mov	lr, r9
    a9ee:	2303      	movs	r3, #3
    a9f0:	b580      	push	{r7, lr}
    a9f2:	4680      	mov	r8, r0
    a9f4:	000f      	movs	r7, r1
    a9f6:	0014      	movs	r4, r2
    a9f8:	4013      	ands	r3, r2
    a9fa:	d13a      	bne.n	aa72 <__pow5mult+0x8a>
    a9fc:	10a4      	asrs	r4, r4, #2
    a9fe:	003e      	movs	r6, r7
    aa00:	2c00      	cmp	r4, #0
    aa02:	d025      	beq.n	aa50 <__pow5mult+0x68>
    aa04:	4643      	mov	r3, r8
    aa06:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    aa08:	2d00      	cmp	r5, #0
    aa0a:	d03b      	beq.n	aa84 <__pow5mult+0x9c>
    aa0c:	003e      	movs	r6, r7
    aa0e:	2300      	movs	r3, #0
    aa10:	2701      	movs	r7, #1
    aa12:	4699      	mov	r9, r3
    aa14:	4227      	tst	r7, r4
    aa16:	d107      	bne.n	aa28 <__pow5mult+0x40>
    aa18:	1064      	asrs	r4, r4, #1
    aa1a:	d019      	beq.n	aa50 <__pow5mult+0x68>
    aa1c:	6828      	ldr	r0, [r5, #0]
    aa1e:	2800      	cmp	r0, #0
    aa20:	d01b      	beq.n	aa5a <__pow5mult+0x72>
    aa22:	0005      	movs	r5, r0
    aa24:	4227      	tst	r7, r4
    aa26:	d0f7      	beq.n	aa18 <__pow5mult+0x30>
    aa28:	002a      	movs	r2, r5
    aa2a:	0031      	movs	r1, r6
    aa2c:	4640      	mov	r0, r8
    aa2e:	f7ff ff31 	bl	a894 <__multiply>
    aa32:	2e00      	cmp	r6, #0
    aa34:	d01b      	beq.n	aa6e <__pow5mult+0x86>
    aa36:	4642      	mov	r2, r8
    aa38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    aa3a:	6873      	ldr	r3, [r6, #4]
    aa3c:	4694      	mov	ip, r2
    aa3e:	009b      	lsls	r3, r3, #2
    aa40:	4463      	add	r3, ip
    aa42:	681a      	ldr	r2, [r3, #0]
    aa44:	1064      	asrs	r4, r4, #1
    aa46:	6032      	str	r2, [r6, #0]
    aa48:	601e      	str	r6, [r3, #0]
    aa4a:	0006      	movs	r6, r0
    aa4c:	2c00      	cmp	r4, #0
    aa4e:	d1e5      	bne.n	aa1c <__pow5mult+0x34>
    aa50:	0030      	movs	r0, r6
    aa52:	bc0c      	pop	{r2, r3}
    aa54:	4690      	mov	r8, r2
    aa56:	4699      	mov	r9, r3
    aa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa5a:	002a      	movs	r2, r5
    aa5c:	0029      	movs	r1, r5
    aa5e:	4640      	mov	r0, r8
    aa60:	f7ff ff18 	bl	a894 <__multiply>
    aa64:	464b      	mov	r3, r9
    aa66:	6028      	str	r0, [r5, #0]
    aa68:	6003      	str	r3, [r0, #0]
    aa6a:	0005      	movs	r5, r0
    aa6c:	e7da      	b.n	aa24 <__pow5mult+0x3c>
    aa6e:	0006      	movs	r6, r0
    aa70:	e7d2      	b.n	aa18 <__pow5mult+0x30>
    aa72:	4a0b      	ldr	r2, [pc, #44]	; (aaa0 <__pow5mult+0xb8>)
    aa74:	3b01      	subs	r3, #1
    aa76:	009b      	lsls	r3, r3, #2
    aa78:	589a      	ldr	r2, [r3, r2]
    aa7a:	2300      	movs	r3, #0
    aa7c:	f7ff fe72 	bl	a764 <__multadd>
    aa80:	0007      	movs	r7, r0
    aa82:	e7bb      	b.n	a9fc <__pow5mult+0x14>
    aa84:	2101      	movs	r1, #1
    aa86:	4640      	mov	r0, r8
    aa88:	f7ff fe3a 	bl	a700 <_Balloc>
    aa8c:	4b05      	ldr	r3, [pc, #20]	; (aaa4 <__pow5mult+0xbc>)
    aa8e:	0005      	movs	r5, r0
    aa90:	6143      	str	r3, [r0, #20]
    aa92:	2301      	movs	r3, #1
    aa94:	6103      	str	r3, [r0, #16]
    aa96:	4643      	mov	r3, r8
    aa98:	6498      	str	r0, [r3, #72]	; 0x48
    aa9a:	2300      	movs	r3, #0
    aa9c:	6003      	str	r3, [r0, #0]
    aa9e:	e7b5      	b.n	aa0c <__pow5mult+0x24>
    aaa0:	0000d930 	.word	0x0000d930
    aaa4:	00000271 	.word	0x00000271

0000aaa8 <__lshift>:
    aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaaa:	464e      	mov	r6, r9
    aaac:	4645      	mov	r5, r8
    aaae:	46de      	mov	lr, fp
    aab0:	4657      	mov	r7, sl
    aab2:	b5e0      	push	{r5, r6, r7, lr}
    aab4:	000e      	movs	r6, r1
    aab6:	6933      	ldr	r3, [r6, #16]
    aab8:	1154      	asrs	r4, r2, #5
    aaba:	4698      	mov	r8, r3
    aabc:	44a0      	add	r8, r4
    aabe:	4643      	mov	r3, r8
    aac0:	1c5d      	adds	r5, r3, #1
    aac2:	68b3      	ldr	r3, [r6, #8]
    aac4:	4683      	mov	fp, r0
    aac6:	4691      	mov	r9, r2
    aac8:	6849      	ldr	r1, [r1, #4]
    aaca:	429d      	cmp	r5, r3
    aacc:	dd03      	ble.n	aad6 <__lshift+0x2e>
    aace:	3101      	adds	r1, #1
    aad0:	005b      	lsls	r3, r3, #1
    aad2:	429d      	cmp	r5, r3
    aad4:	dcfb      	bgt.n	aace <__lshift+0x26>
    aad6:	4658      	mov	r0, fp
    aad8:	f7ff fe12 	bl	a700 <_Balloc>
    aadc:	0003      	movs	r3, r0
    aade:	4684      	mov	ip, r0
    aae0:	3314      	adds	r3, #20
    aae2:	2c00      	cmp	r4, #0
    aae4:	dd06      	ble.n	aaf4 <__lshift+0x4c>
    aae6:	2100      	movs	r1, #0
    aae8:	00a4      	lsls	r4, r4, #2
    aaea:	001a      	movs	r2, r3
    aaec:	191b      	adds	r3, r3, r4
    aaee:	c202      	stmia	r2!, {r1}
    aaf0:	4293      	cmp	r3, r2
    aaf2:	d1fc      	bne.n	aaee <__lshift+0x46>
    aaf4:	6932      	ldr	r2, [r6, #16]
    aaf6:	4648      	mov	r0, r9
    aaf8:	0097      	lsls	r7, r2, #2
    aafa:	0031      	movs	r1, r6
    aafc:	221f      	movs	r2, #31
    aafe:	3114      	adds	r1, #20
    ab00:	4010      	ands	r0, r2
    ab02:	19cf      	adds	r7, r1, r7
    ab04:	4681      	mov	r9, r0
    ab06:	2800      	cmp	r0, #0
    ab08:	d025      	beq.n	ab56 <__lshift+0xae>
    ab0a:	2220      	movs	r2, #32
    ab0c:	1a12      	subs	r2, r2, r0
    ab0e:	4692      	mov	sl, r2
    ab10:	2200      	movs	r2, #0
    ab12:	4648      	mov	r0, r9
    ab14:	680c      	ldr	r4, [r1, #0]
    ab16:	4084      	lsls	r4, r0
    ab18:	4650      	mov	r0, sl
    ab1a:	4314      	orrs	r4, r2
    ab1c:	601c      	str	r4, [r3, #0]
    ab1e:	c904      	ldmia	r1!, {r2}
    ab20:	3304      	adds	r3, #4
    ab22:	40c2      	lsrs	r2, r0
    ab24:	428f      	cmp	r7, r1
    ab26:	d8f4      	bhi.n	ab12 <__lshift+0x6a>
    ab28:	601a      	str	r2, [r3, #0]
    ab2a:	2a00      	cmp	r2, #0
    ab2c:	d001      	beq.n	ab32 <__lshift+0x8a>
    ab2e:	4645      	mov	r5, r8
    ab30:	3502      	adds	r5, #2
    ab32:	4663      	mov	r3, ip
    ab34:	3d01      	subs	r5, #1
    ab36:	611d      	str	r5, [r3, #16]
    ab38:	6873      	ldr	r3, [r6, #4]
    ab3a:	4660      	mov	r0, ip
    ab3c:	009a      	lsls	r2, r3, #2
    ab3e:	465b      	mov	r3, fp
    ab40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ab42:	189b      	adds	r3, r3, r2
    ab44:	681a      	ldr	r2, [r3, #0]
    ab46:	6032      	str	r2, [r6, #0]
    ab48:	601e      	str	r6, [r3, #0]
    ab4a:	bc3c      	pop	{r2, r3, r4, r5}
    ab4c:	4690      	mov	r8, r2
    ab4e:	4699      	mov	r9, r3
    ab50:	46a2      	mov	sl, r4
    ab52:	46ab      	mov	fp, r5
    ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab56:	c904      	ldmia	r1!, {r2}
    ab58:	c304      	stmia	r3!, {r2}
    ab5a:	428f      	cmp	r7, r1
    ab5c:	d9e9      	bls.n	ab32 <__lshift+0x8a>
    ab5e:	c904      	ldmia	r1!, {r2}
    ab60:	c304      	stmia	r3!, {r2}
    ab62:	428f      	cmp	r7, r1
    ab64:	d8f7      	bhi.n	ab56 <__lshift+0xae>
    ab66:	e7e4      	b.n	ab32 <__lshift+0x8a>

0000ab68 <__mcmp>:
    ab68:	690a      	ldr	r2, [r1, #16]
    ab6a:	6903      	ldr	r3, [r0, #16]
    ab6c:	b530      	push	{r4, r5, lr}
    ab6e:	0005      	movs	r5, r0
    ab70:	1a98      	subs	r0, r3, r2
    ab72:	d111      	bne.n	ab98 <__mcmp+0x30>
    ab74:	0092      	lsls	r2, r2, #2
    ab76:	3514      	adds	r5, #20
    ab78:	3114      	adds	r1, #20
    ab7a:	18ab      	adds	r3, r5, r2
    ab7c:	1889      	adds	r1, r1, r2
    ab7e:	e001      	b.n	ab84 <__mcmp+0x1c>
    ab80:	429d      	cmp	r5, r3
    ab82:	d209      	bcs.n	ab98 <__mcmp+0x30>
    ab84:	3b04      	subs	r3, #4
    ab86:	3904      	subs	r1, #4
    ab88:	681c      	ldr	r4, [r3, #0]
    ab8a:	680a      	ldr	r2, [r1, #0]
    ab8c:	4294      	cmp	r4, r2
    ab8e:	d0f7      	beq.n	ab80 <__mcmp+0x18>
    ab90:	4294      	cmp	r4, r2
    ab92:	4180      	sbcs	r0, r0
    ab94:	2201      	movs	r2, #1
    ab96:	4310      	orrs	r0, r2
    ab98:	bd30      	pop	{r4, r5, pc}
    ab9a:	46c0      	nop			; (mov r8, r8)

0000ab9c <__mdiff>:
    ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab9e:	4645      	mov	r5, r8
    aba0:	46de      	mov	lr, fp
    aba2:	4657      	mov	r7, sl
    aba4:	464e      	mov	r6, r9
    aba6:	0014      	movs	r4, r2
    aba8:	690b      	ldr	r3, [r1, #16]
    abaa:	6912      	ldr	r2, [r2, #16]
    abac:	b5e0      	push	{r5, r6, r7, lr}
    abae:	4688      	mov	r8, r1
    abb0:	1a9d      	subs	r5, r3, r2
    abb2:	d11a      	bne.n	abea <__mdiff+0x4e>
    abb4:	000f      	movs	r7, r1
    abb6:	2114      	movs	r1, #20
    abb8:	468c      	mov	ip, r1
    abba:	0092      	lsls	r2, r2, #2
    abbc:	3714      	adds	r7, #20
    abbe:	44a4      	add	ip, r4
    abc0:	18bb      	adds	r3, r7, r2
    abc2:	4462      	add	r2, ip
    abc4:	e002      	b.n	abcc <__mdiff+0x30>
    abc6:	429f      	cmp	r7, r3
    abc8:	d300      	bcc.n	abcc <__mdiff+0x30>
    abca:	e070      	b.n	acae <__mdiff+0x112>
    abcc:	3b04      	subs	r3, #4
    abce:	3a04      	subs	r2, #4
    abd0:	681e      	ldr	r6, [r3, #0]
    abd2:	6811      	ldr	r1, [r2, #0]
    abd4:	428e      	cmp	r6, r1
    abd6:	d0f6      	beq.n	abc6 <__mdiff+0x2a>
    abd8:	d300      	bcc.n	abdc <__mdiff+0x40>
    abda:	e071      	b.n	acc0 <__mdiff+0x124>
    abdc:	4643      	mov	r3, r8
    abde:	003e      	movs	r6, r7
    abe0:	46a0      	mov	r8, r4
    abe2:	4667      	mov	r7, ip
    abe4:	001c      	movs	r4, r3
    abe6:	2501      	movs	r5, #1
    abe8:	e006      	b.n	abf8 <__mdiff+0x5c>
    abea:	2d00      	cmp	r5, #0
    abec:	db6a      	blt.n	acc4 <__mdiff+0x128>
    abee:	4647      	mov	r7, r8
    abf0:	0026      	movs	r6, r4
    abf2:	2500      	movs	r5, #0
    abf4:	3714      	adds	r7, #20
    abf6:	3614      	adds	r6, #20
    abf8:	4643      	mov	r3, r8
    abfa:	6859      	ldr	r1, [r3, #4]
    abfc:	f7ff fd80 	bl	a700 <_Balloc>
    ac00:	4643      	mov	r3, r8
    ac02:	4681      	mov	r9, r0
    ac04:	60c5      	str	r5, [r0, #12]
    ac06:	6918      	ldr	r0, [r3, #16]
    ac08:	464d      	mov	r5, r9
    ac0a:	0083      	lsls	r3, r0, #2
    ac0c:	469c      	mov	ip, r3
    ac0e:	6923      	ldr	r3, [r4, #16]
    ac10:	44bc      	add	ip, r7
    ac12:	009b      	lsls	r3, r3, #2
    ac14:	4698      	mov	r8, r3
    ac16:	2300      	movs	r3, #0
    ac18:	44b0      	add	r8, r6
    ac1a:	3514      	adds	r5, #20
    ac1c:	469a      	mov	sl, r3
    ac1e:	e000      	b.n	ac22 <__mdiff+0x86>
    ac20:	0027      	movs	r7, r4
    ac22:	ce04      	ldmia	r6!, {r2}
    ac24:	003c      	movs	r4, r7
    ac26:	4693      	mov	fp, r2
    ac28:	4659      	mov	r1, fp
    ac2a:	cc08      	ldmia	r4!, {r3}
    ac2c:	0409      	lsls	r1, r1, #16
    ac2e:	041a      	lsls	r2, r3, #16
    ac30:	0c12      	lsrs	r2, r2, #16
    ac32:	4452      	add	r2, sl
    ac34:	0c09      	lsrs	r1, r1, #16
    ac36:	1a52      	subs	r2, r2, r1
    ac38:	0c19      	lsrs	r1, r3, #16
    ac3a:	465b      	mov	r3, fp
    ac3c:	0c1b      	lsrs	r3, r3, #16
    ac3e:	1acb      	subs	r3, r1, r3
    ac40:	1411      	asrs	r1, r2, #16
    ac42:	185b      	adds	r3, r3, r1
    ac44:	0412      	lsls	r2, r2, #16
    ac46:	1419      	asrs	r1, r3, #16
    ac48:	0c12      	lsrs	r2, r2, #16
    ac4a:	041b      	lsls	r3, r3, #16
    ac4c:	468a      	mov	sl, r1
    ac4e:	4313      	orrs	r3, r2
    ac50:	1d29      	adds	r1, r5, #4
    ac52:	602b      	str	r3, [r5, #0]
    ac54:	000d      	movs	r5, r1
    ac56:	45b0      	cmp	r8, r6
    ac58:	d8e2      	bhi.n	ac20 <__mdiff+0x84>
    ac5a:	45a4      	cmp	ip, r4
    ac5c:	d916      	bls.n	ac8c <__mdiff+0xf0>
    ac5e:	cc08      	ldmia	r4!, {r3}
    ac60:	041a      	lsls	r2, r3, #16
    ac62:	0c12      	lsrs	r2, r2, #16
    ac64:	4452      	add	r2, sl
    ac66:	1416      	asrs	r6, r2, #16
    ac68:	0c1b      	lsrs	r3, r3, #16
    ac6a:	199b      	adds	r3, r3, r6
    ac6c:	0412      	lsls	r2, r2, #16
    ac6e:	141e      	asrs	r6, r3, #16
    ac70:	0c12      	lsrs	r2, r2, #16
    ac72:	041b      	lsls	r3, r3, #16
    ac74:	4313      	orrs	r3, r2
    ac76:	46b2      	mov	sl, r6
    ac78:	c508      	stmia	r5!, {r3}
    ac7a:	45a4      	cmp	ip, r4
    ac7c:	d8ef      	bhi.n	ac5e <__mdiff+0xc2>
    ac7e:	4662      	mov	r2, ip
    ac80:	2403      	movs	r4, #3
    ac82:	1bd2      	subs	r2, r2, r7
    ac84:	3a05      	subs	r2, #5
    ac86:	43a2      	bics	r2, r4
    ac88:	3204      	adds	r2, #4
    ac8a:	1889      	adds	r1, r1, r2
    ac8c:	3904      	subs	r1, #4
    ac8e:	2b00      	cmp	r3, #0
    ac90:	d104      	bne.n	ac9c <__mdiff+0x100>
    ac92:	3904      	subs	r1, #4
    ac94:	680b      	ldr	r3, [r1, #0]
    ac96:	3801      	subs	r0, #1
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d0fa      	beq.n	ac92 <__mdiff+0xf6>
    ac9c:	464b      	mov	r3, r9
    ac9e:	6118      	str	r0, [r3, #16]
    aca0:	4648      	mov	r0, r9
    aca2:	bc3c      	pop	{r2, r3, r4, r5}
    aca4:	4690      	mov	r8, r2
    aca6:	4699      	mov	r9, r3
    aca8:	46a2      	mov	sl, r4
    acaa:	46ab      	mov	fp, r5
    acac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acae:	2100      	movs	r1, #0
    acb0:	f7ff fd26 	bl	a700 <_Balloc>
    acb4:	2301      	movs	r3, #1
    acb6:	6103      	str	r3, [r0, #16]
    acb8:	2300      	movs	r3, #0
    acba:	4681      	mov	r9, r0
    acbc:	6143      	str	r3, [r0, #20]
    acbe:	e7ef      	b.n	aca0 <__mdiff+0x104>
    acc0:	4666      	mov	r6, ip
    acc2:	e799      	b.n	abf8 <__mdiff+0x5c>
    acc4:	0027      	movs	r7, r4
    acc6:	000e      	movs	r6, r1
    acc8:	46a0      	mov	r8, r4
    acca:	3714      	adds	r7, #20
    accc:	3614      	adds	r6, #20
    acce:	000c      	movs	r4, r1
    acd0:	2501      	movs	r5, #1
    acd2:	e791      	b.n	abf8 <__mdiff+0x5c>

0000acd4 <__d2b>:
    acd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    acd6:	2101      	movs	r1, #1
    acd8:	001c      	movs	r4, r3
    acda:	b083      	sub	sp, #12
    acdc:	9e08      	ldr	r6, [sp, #32]
    acde:	0015      	movs	r5, r2
    ace0:	f7ff fd0e 	bl	a700 <_Balloc>
    ace4:	0323      	lsls	r3, r4, #12
    ace6:	0064      	lsls	r4, r4, #1
    ace8:	0007      	movs	r7, r0
    acea:	0b1b      	lsrs	r3, r3, #12
    acec:	0d64      	lsrs	r4, r4, #21
    acee:	d002      	beq.n	acf6 <__d2b+0x22>
    acf0:	2280      	movs	r2, #128	; 0x80
    acf2:	0352      	lsls	r2, r2, #13
    acf4:	4313      	orrs	r3, r2
    acf6:	9301      	str	r3, [sp, #4]
    acf8:	2d00      	cmp	r5, #0
    acfa:	d019      	beq.n	ad30 <__d2b+0x5c>
    acfc:	4668      	mov	r0, sp
    acfe:	9500      	str	r5, [sp, #0]
    ad00:	f7ff fd90 	bl	a824 <__lo0bits>
    ad04:	2800      	cmp	r0, #0
    ad06:	d130      	bne.n	ad6a <__d2b+0x96>
    ad08:	9b00      	ldr	r3, [sp, #0]
    ad0a:	617b      	str	r3, [r7, #20]
    ad0c:	9b01      	ldr	r3, [sp, #4]
    ad0e:	61bb      	str	r3, [r7, #24]
    ad10:	1e5a      	subs	r2, r3, #1
    ad12:	4193      	sbcs	r3, r2
    ad14:	1c5d      	adds	r5, r3, #1
    ad16:	613d      	str	r5, [r7, #16]
    ad18:	2c00      	cmp	r4, #0
    ad1a:	d014      	beq.n	ad46 <__d2b+0x72>
    ad1c:	4b19      	ldr	r3, [pc, #100]	; (ad84 <__d2b+0xb0>)
    ad1e:	469c      	mov	ip, r3
    ad20:	2335      	movs	r3, #53	; 0x35
    ad22:	4464      	add	r4, ip
    ad24:	1824      	adds	r4, r4, r0
    ad26:	1a18      	subs	r0, r3, r0
    ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad2a:	6034      	str	r4, [r6, #0]
    ad2c:	6018      	str	r0, [r3, #0]
    ad2e:	e019      	b.n	ad64 <__d2b+0x90>
    ad30:	a801      	add	r0, sp, #4
    ad32:	f7ff fd77 	bl	a824 <__lo0bits>
    ad36:	9b01      	ldr	r3, [sp, #4]
    ad38:	3020      	adds	r0, #32
    ad3a:	617b      	str	r3, [r7, #20]
    ad3c:	2301      	movs	r3, #1
    ad3e:	2501      	movs	r5, #1
    ad40:	613b      	str	r3, [r7, #16]
    ad42:	2c00      	cmp	r4, #0
    ad44:	d1ea      	bne.n	ad1c <__d2b+0x48>
    ad46:	4b10      	ldr	r3, [pc, #64]	; (ad88 <__d2b+0xb4>)
    ad48:	469c      	mov	ip, r3
    ad4a:	4b10      	ldr	r3, [pc, #64]	; (ad8c <__d2b+0xb8>)
    ad4c:	4460      	add	r0, ip
    ad4e:	18eb      	adds	r3, r5, r3
    ad50:	009b      	lsls	r3, r3, #2
    ad52:	18fb      	adds	r3, r7, r3
    ad54:	6030      	str	r0, [r6, #0]
    ad56:	6958      	ldr	r0, [r3, #20]
    ad58:	f7ff fd4a 	bl	a7f0 <__hi0bits>
    ad5c:	016b      	lsls	r3, r5, #5
    ad5e:	1a18      	subs	r0, r3, r0
    ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad62:	6018      	str	r0, [r3, #0]
    ad64:	0038      	movs	r0, r7
    ad66:	b003      	add	sp, #12
    ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad6a:	9b01      	ldr	r3, [sp, #4]
    ad6c:	2220      	movs	r2, #32
    ad6e:	0019      	movs	r1, r3
    ad70:	1a12      	subs	r2, r2, r0
    ad72:	4091      	lsls	r1, r2
    ad74:	000a      	movs	r2, r1
    ad76:	40c3      	lsrs	r3, r0
    ad78:	9900      	ldr	r1, [sp, #0]
    ad7a:	9301      	str	r3, [sp, #4]
    ad7c:	430a      	orrs	r2, r1
    ad7e:	617a      	str	r2, [r7, #20]
    ad80:	e7c5      	b.n	ad0e <__d2b+0x3a>
    ad82:	46c0      	nop			; (mov r8, r8)
    ad84:	fffffbcd 	.word	0xfffffbcd
    ad88:	fffffbce 	.word	0xfffffbce
    ad8c:	3fffffff 	.word	0x3fffffff

0000ad90 <_realloc_r>:
    ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad92:	464e      	mov	r6, r9
    ad94:	4645      	mov	r5, r8
    ad96:	46de      	mov	lr, fp
    ad98:	4657      	mov	r7, sl
    ad9a:	b5e0      	push	{r5, r6, r7, lr}
    ad9c:	b085      	sub	sp, #20
    ad9e:	9001      	str	r0, [sp, #4]
    ada0:	000e      	movs	r6, r1
    ada2:	0015      	movs	r5, r2
    ada4:	2900      	cmp	r1, #0
    ada6:	d100      	bne.n	adaa <_realloc_r+0x1a>
    ada8:	e09e      	b.n	aee8 <_realloc_r+0x158>
    adaa:	0037      	movs	r7, r6
    adac:	9801      	ldr	r0, [sp, #4]
    adae:	3f08      	subs	r7, #8
    adb0:	f7fc fa2c 	bl	720c <__malloc_lock>
    adb4:	687a      	ldr	r2, [r7, #4]
    adb6:	2303      	movs	r3, #3
    adb8:	0014      	movs	r4, r2
    adba:	439c      	bics	r4, r3
    adbc:	002b      	movs	r3, r5
    adbe:	330b      	adds	r3, #11
    adc0:	46b9      	mov	r9, r7
    adc2:	2b16      	cmp	r3, #22
    adc4:	d847      	bhi.n	ae56 <_realloc_r+0xc6>
    adc6:	2110      	movs	r1, #16
    adc8:	2310      	movs	r3, #16
    adca:	4688      	mov	r8, r1
    adcc:	4545      	cmp	r5, r8
    adce:	d846      	bhi.n	ae5e <_realloc_r+0xce>
    add0:	429c      	cmp	r4, r3
    add2:	da49      	bge.n	ae68 <_realloc_r+0xd8>
    add4:	49cc      	ldr	r1, [pc, #816]	; (b108 <_realloc_r+0x378>)
    add6:	1938      	adds	r0, r7, r4
    add8:	468b      	mov	fp, r1
    adda:	6889      	ldr	r1, [r1, #8]
    addc:	9002      	str	r0, [sp, #8]
    adde:	4288      	cmp	r0, r1
    ade0:	d100      	bne.n	ade4 <_realloc_r+0x54>
    ade2:	e0c2      	b.n	af6a <_realloc_r+0x1da>
    ade4:	2101      	movs	r1, #1
    ade6:	468a      	mov	sl, r1
    ade8:	6840      	ldr	r0, [r0, #4]
    adea:	0001      	movs	r1, r0
    adec:	9003      	str	r0, [sp, #12]
    adee:	4650      	mov	r0, sl
    adf0:	4381      	bics	r1, r0
    adf2:	468c      	mov	ip, r1
    adf4:	9902      	ldr	r1, [sp, #8]
    adf6:	468b      	mov	fp, r1
    adf8:	44dc      	add	ip, fp
    adfa:	4661      	mov	r1, ip
    adfc:	6849      	ldr	r1, [r1, #4]
    adfe:	4201      	tst	r1, r0
    ae00:	d04d      	beq.n	ae9e <_realloc_r+0x10e>
    ae02:	4210      	tst	r0, r2
    ae04:	d100      	bne.n	ae08 <_realloc_r+0x78>
    ae06:	e0a2      	b.n	af4e <_realloc_r+0x1be>
    ae08:	0029      	movs	r1, r5
    ae0a:	9801      	ldr	r0, [sp, #4]
    ae0c:	f7fb fe6e 	bl	6aec <_malloc_r>
    ae10:	1e05      	subs	r5, r0, #0
    ae12:	d039      	beq.n	ae88 <_realloc_r+0xf8>
    ae14:	2301      	movs	r3, #1
    ae16:	0002      	movs	r2, r0
    ae18:	6879      	ldr	r1, [r7, #4]
    ae1a:	3a08      	subs	r2, #8
    ae1c:	4399      	bics	r1, r3
    ae1e:	187f      	adds	r7, r7, r1
    ae20:	42ba      	cmp	r2, r7
    ae22:	d100      	bne.n	ae26 <_realloc_r+0x96>
    ae24:	e12e      	b.n	b084 <_realloc_r+0x2f4>
    ae26:	1f22      	subs	r2, r4, #4
    ae28:	2a24      	cmp	r2, #36	; 0x24
    ae2a:	d900      	bls.n	ae2e <_realloc_r+0x9e>
    ae2c:	e114      	b.n	b058 <_realloc_r+0x2c8>
    ae2e:	2a13      	cmp	r2, #19
    ae30:	d900      	bls.n	ae34 <_realloc_r+0xa4>
    ae32:	e0e8      	b.n	b006 <_realloc_r+0x276>
    ae34:	0003      	movs	r3, r0
    ae36:	0032      	movs	r2, r6
    ae38:	6811      	ldr	r1, [r2, #0]
    ae3a:	6019      	str	r1, [r3, #0]
    ae3c:	6851      	ldr	r1, [r2, #4]
    ae3e:	6059      	str	r1, [r3, #4]
    ae40:	6892      	ldr	r2, [r2, #8]
    ae42:	609a      	str	r2, [r3, #8]
    ae44:	9c01      	ldr	r4, [sp, #4]
    ae46:	0031      	movs	r1, r6
    ae48:	0020      	movs	r0, r4
    ae4a:	f7ff f8eb 	bl	a024 <_free_r>
    ae4e:	0020      	movs	r0, r4
    ae50:	f7fc f9de 	bl	7210 <__malloc_unlock>
    ae54:	e01b      	b.n	ae8e <_realloc_r+0xfe>
    ae56:	2107      	movs	r1, #7
    ae58:	438b      	bics	r3, r1
    ae5a:	4698      	mov	r8, r3
    ae5c:	d5b6      	bpl.n	adcc <_realloc_r+0x3c>
    ae5e:	230c      	movs	r3, #12
    ae60:	9a01      	ldr	r2, [sp, #4]
    ae62:	2500      	movs	r5, #0
    ae64:	6013      	str	r3, [r2, #0]
    ae66:	e012      	b.n	ae8e <_realloc_r+0xfe>
    ae68:	0035      	movs	r5, r6
    ae6a:	4643      	mov	r3, r8
    ae6c:	1ae3      	subs	r3, r4, r3
    ae6e:	2b0f      	cmp	r3, #15
    ae70:	d825      	bhi.n	aebe <_realloc_r+0x12e>
    ae72:	464b      	mov	r3, r9
    ae74:	2201      	movs	r2, #1
    ae76:	4649      	mov	r1, r9
    ae78:	685b      	ldr	r3, [r3, #4]
    ae7a:	4013      	ands	r3, r2
    ae7c:	4323      	orrs	r3, r4
    ae7e:	604b      	str	r3, [r1, #4]
    ae80:	444c      	add	r4, r9
    ae82:	6863      	ldr	r3, [r4, #4]
    ae84:	431a      	orrs	r2, r3
    ae86:	6062      	str	r2, [r4, #4]
    ae88:	9801      	ldr	r0, [sp, #4]
    ae8a:	f7fc f9c1 	bl	7210 <__malloc_unlock>
    ae8e:	0028      	movs	r0, r5
    ae90:	b005      	add	sp, #20
    ae92:	bc3c      	pop	{r2, r3, r4, r5}
    ae94:	4690      	mov	r8, r2
    ae96:	4699      	mov	r9, r3
    ae98:	46a2      	mov	sl, r4
    ae9a:	46ab      	mov	fp, r5
    ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae9e:	2103      	movs	r1, #3
    aea0:	9803      	ldr	r0, [sp, #12]
    aea2:	468c      	mov	ip, r1
    aea4:	4388      	bics	r0, r1
    aea6:	1821      	adds	r1, r4, r0
    aea8:	468b      	mov	fp, r1
    aeaa:	4299      	cmp	r1, r3
    aeac:	db21      	blt.n	aef2 <_realloc_r+0x162>
    aeae:	9a02      	ldr	r2, [sp, #8]
    aeb0:	0035      	movs	r5, r6
    aeb2:	68d3      	ldr	r3, [r2, #12]
    aeb4:	6892      	ldr	r2, [r2, #8]
    aeb6:	465c      	mov	r4, fp
    aeb8:	60d3      	str	r3, [r2, #12]
    aeba:	609a      	str	r2, [r3, #8]
    aebc:	e7d5      	b.n	ae6a <_realloc_r+0xda>
    aebe:	464a      	mov	r2, r9
    aec0:	2001      	movs	r0, #1
    aec2:	4646      	mov	r6, r8
    aec4:	6852      	ldr	r2, [r2, #4]
    aec6:	4649      	mov	r1, r9
    aec8:	4002      	ands	r2, r0
    aeca:	4332      	orrs	r2, r6
    aecc:	464e      	mov	r6, r9
    aece:	4441      	add	r1, r8
    aed0:	4303      	orrs	r3, r0
    aed2:	6072      	str	r2, [r6, #4]
    aed4:	444c      	add	r4, r9
    aed6:	604b      	str	r3, [r1, #4]
    aed8:	6863      	ldr	r3, [r4, #4]
    aeda:	3108      	adds	r1, #8
    aedc:	4318      	orrs	r0, r3
    aede:	6060      	str	r0, [r4, #4]
    aee0:	9801      	ldr	r0, [sp, #4]
    aee2:	f7ff f89f 	bl	a024 <_free_r>
    aee6:	e7cf      	b.n	ae88 <_realloc_r+0xf8>
    aee8:	0011      	movs	r1, r2
    aeea:	f7fb fdff 	bl	6aec <_malloc_r>
    aeee:	0005      	movs	r5, r0
    aef0:	e7cd      	b.n	ae8e <_realloc_r+0xfe>
    aef2:	4651      	mov	r1, sl
    aef4:	4211      	tst	r1, r2
    aef6:	d000      	beq.n	aefa <_realloc_r+0x16a>
    aef8:	e786      	b.n	ae08 <_realloc_r+0x78>
    aefa:	4661      	mov	r1, ip
    aefc:	683a      	ldr	r2, [r7, #0]
    aefe:	1aba      	subs	r2, r7, r2
    af00:	4692      	mov	sl, r2
    af02:	6852      	ldr	r2, [r2, #4]
    af04:	438a      	bics	r2, r1
    af06:	1880      	adds	r0, r0, r2
    af08:	4683      	mov	fp, r0
    af0a:	44a3      	add	fp, r4
    af0c:	459b      	cmp	fp, r3
    af0e:	db26      	blt.n	af5e <_realloc_r+0x1ce>
    af10:	9a02      	ldr	r2, [sp, #8]
    af12:	68d3      	ldr	r3, [r2, #12]
    af14:	6892      	ldr	r2, [r2, #8]
    af16:	60d3      	str	r3, [r2, #12]
    af18:	609a      	str	r2, [r3, #8]
    af1a:	4653      	mov	r3, sl
    af1c:	4652      	mov	r2, sl
    af1e:	4655      	mov	r5, sl
    af20:	6892      	ldr	r2, [r2, #8]
    af22:	68db      	ldr	r3, [r3, #12]
    af24:	3508      	adds	r5, #8
    af26:	60d3      	str	r3, [r2, #12]
    af28:	609a      	str	r2, [r3, #8]
    af2a:	1f22      	subs	r2, r4, #4
    af2c:	2a24      	cmp	r2, #36	; 0x24
    af2e:	d900      	bls.n	af32 <_realloc_r+0x1a2>
    af30:	e096      	b.n	b060 <_realloc_r+0x2d0>
    af32:	2a13      	cmp	r2, #19
    af34:	d972      	bls.n	b01c <_realloc_r+0x28c>
    af36:	4653      	mov	r3, sl
    af38:	6831      	ldr	r1, [r6, #0]
    af3a:	6099      	str	r1, [r3, #8]
    af3c:	6871      	ldr	r1, [r6, #4]
    af3e:	60d9      	str	r1, [r3, #12]
    af40:	2a1b      	cmp	r2, #27
    af42:	d900      	bls.n	af46 <_realloc_r+0x1b6>
    af44:	e0a4      	b.n	b090 <_realloc_r+0x300>
    af46:	0032      	movs	r2, r6
    af48:	3310      	adds	r3, #16
    af4a:	3208      	adds	r2, #8
    af4c:	e068      	b.n	b020 <_realloc_r+0x290>
    af4e:	683a      	ldr	r2, [r7, #0]
    af50:	1aba      	subs	r2, r7, r2
    af52:	4692      	mov	sl, r2
    af54:	4651      	mov	r1, sl
    af56:	2203      	movs	r2, #3
    af58:	6849      	ldr	r1, [r1, #4]
    af5a:	4391      	bics	r1, r2
    af5c:	000a      	movs	r2, r1
    af5e:	4693      	mov	fp, r2
    af60:	44a3      	add	fp, r4
    af62:	459b      	cmp	fp, r3
    af64:	da00      	bge.n	af68 <_realloc_r+0x1d8>
    af66:	e74f      	b.n	ae08 <_realloc_r+0x78>
    af68:	e7d7      	b.n	af1a <_realloc_r+0x18a>
    af6a:	2003      	movs	r0, #3
    af6c:	9902      	ldr	r1, [sp, #8]
    af6e:	4684      	mov	ip, r0
    af70:	6849      	ldr	r1, [r1, #4]
    af72:	4381      	bics	r1, r0
    af74:	4640      	mov	r0, r8
    af76:	1909      	adds	r1, r1, r4
    af78:	3010      	adds	r0, #16
    af7a:	9002      	str	r0, [sp, #8]
    af7c:	4281      	cmp	r1, r0
    af7e:	da58      	bge.n	b032 <_realloc_r+0x2a2>
    af80:	07d2      	lsls	r2, r2, #31
    af82:	d500      	bpl.n	af86 <_realloc_r+0x1f6>
    af84:	e740      	b.n	ae08 <_realloc_r+0x78>
    af86:	4660      	mov	r0, ip
    af88:	683a      	ldr	r2, [r7, #0]
    af8a:	1aba      	subs	r2, r7, r2
    af8c:	4692      	mov	sl, r2
    af8e:	6852      	ldr	r2, [r2, #4]
    af90:	4382      	bics	r2, r0
    af92:	9802      	ldr	r0, [sp, #8]
    af94:	1851      	adds	r1, r2, r1
    af96:	9103      	str	r1, [sp, #12]
    af98:	4288      	cmp	r0, r1
    af9a:	dce0      	bgt.n	af5e <_realloc_r+0x1ce>
    af9c:	4653      	mov	r3, sl
    af9e:	4652      	mov	r2, sl
    afa0:	4655      	mov	r5, sl
    afa2:	6892      	ldr	r2, [r2, #8]
    afa4:	68db      	ldr	r3, [r3, #12]
    afa6:	3508      	adds	r5, #8
    afa8:	60d3      	str	r3, [r2, #12]
    afaa:	609a      	str	r2, [r3, #8]
    afac:	1f22      	subs	r2, r4, #4
    afae:	2a24      	cmp	r2, #36	; 0x24
    afb0:	d900      	bls.n	afb4 <_realloc_r+0x224>
    afb2:	e08e      	b.n	b0d2 <_realloc_r+0x342>
    afb4:	2a13      	cmp	r2, #19
    afb6:	d800      	bhi.n	afba <_realloc_r+0x22a>
    afb8:	e088      	b.n	b0cc <_realloc_r+0x33c>
    afba:	4653      	mov	r3, sl
    afbc:	6831      	ldr	r1, [r6, #0]
    afbe:	6099      	str	r1, [r3, #8]
    afc0:	6871      	ldr	r1, [r6, #4]
    afc2:	60d9      	str	r1, [r3, #12]
    afc4:	2a1b      	cmp	r2, #27
    afc6:	d900      	bls.n	afca <_realloc_r+0x23a>
    afc8:	e088      	b.n	b0dc <_realloc_r+0x34c>
    afca:	0032      	movs	r2, r6
    afcc:	3310      	adds	r3, #16
    afce:	3208      	adds	r2, #8
    afd0:	6811      	ldr	r1, [r2, #0]
    afd2:	6019      	str	r1, [r3, #0]
    afd4:	6851      	ldr	r1, [r2, #4]
    afd6:	6059      	str	r1, [r3, #4]
    afd8:	6892      	ldr	r2, [r2, #8]
    afda:	609a      	str	r2, [r3, #8]
    afdc:	4651      	mov	r1, sl
    afde:	465b      	mov	r3, fp
    afe0:	4642      	mov	r2, r8
    afe2:	4441      	add	r1, r8
    afe4:	6099      	str	r1, [r3, #8]
    afe6:	9b03      	ldr	r3, [sp, #12]
    afe8:	9801      	ldr	r0, [sp, #4]
    afea:	1a9a      	subs	r2, r3, r2
    afec:	2301      	movs	r3, #1
    afee:	431a      	orrs	r2, r3
    aff0:	604a      	str	r2, [r1, #4]
    aff2:	4652      	mov	r2, sl
    aff4:	6852      	ldr	r2, [r2, #4]
    aff6:	4013      	ands	r3, r2
    aff8:	4642      	mov	r2, r8
    affa:	4313      	orrs	r3, r2
    affc:	4652      	mov	r2, sl
    affe:	6053      	str	r3, [r2, #4]
    b000:	f7fc f906 	bl	7210 <__malloc_unlock>
    b004:	e743      	b.n	ae8e <_realloc_r+0xfe>
    b006:	6833      	ldr	r3, [r6, #0]
    b008:	6003      	str	r3, [r0, #0]
    b00a:	6873      	ldr	r3, [r6, #4]
    b00c:	6043      	str	r3, [r0, #4]
    b00e:	2a1b      	cmp	r2, #27
    b010:	d82d      	bhi.n	b06e <_realloc_r+0x2de>
    b012:	0003      	movs	r3, r0
    b014:	0032      	movs	r2, r6
    b016:	3308      	adds	r3, #8
    b018:	3208      	adds	r2, #8
    b01a:	e70d      	b.n	ae38 <_realloc_r+0xa8>
    b01c:	002b      	movs	r3, r5
    b01e:	0032      	movs	r2, r6
    b020:	6811      	ldr	r1, [r2, #0]
    b022:	465c      	mov	r4, fp
    b024:	6019      	str	r1, [r3, #0]
    b026:	6851      	ldr	r1, [r2, #4]
    b028:	46d1      	mov	r9, sl
    b02a:	6059      	str	r1, [r3, #4]
    b02c:	6892      	ldr	r2, [r2, #8]
    b02e:	609a      	str	r2, [r3, #8]
    b030:	e71b      	b.n	ae6a <_realloc_r+0xda>
    b032:	4643      	mov	r3, r8
    b034:	18fa      	adds	r2, r7, r3
    b036:	465b      	mov	r3, fp
    b038:	609a      	str	r2, [r3, #8]
    b03a:	4643      	mov	r3, r8
    b03c:	1ac9      	subs	r1, r1, r3
    b03e:	2301      	movs	r3, #1
    b040:	4319      	orrs	r1, r3
    b042:	6051      	str	r1, [r2, #4]
    b044:	687a      	ldr	r2, [r7, #4]
    b046:	9801      	ldr	r0, [sp, #4]
    b048:	4013      	ands	r3, r2
    b04a:	4642      	mov	r2, r8
    b04c:	4313      	orrs	r3, r2
    b04e:	607b      	str	r3, [r7, #4]
    b050:	f7fc f8de 	bl	7210 <__malloc_unlock>
    b054:	0035      	movs	r5, r6
    b056:	e71a      	b.n	ae8e <_realloc_r+0xfe>
    b058:	0031      	movs	r1, r6
    b05a:	f7fc f83d 	bl	70d8 <memmove>
    b05e:	e6f1      	b.n	ae44 <_realloc_r+0xb4>
    b060:	0031      	movs	r1, r6
    b062:	0028      	movs	r0, r5
    b064:	f7fc f838 	bl	70d8 <memmove>
    b068:	465c      	mov	r4, fp
    b06a:	46d1      	mov	r9, sl
    b06c:	e6fd      	b.n	ae6a <_realloc_r+0xda>
    b06e:	68b3      	ldr	r3, [r6, #8]
    b070:	6083      	str	r3, [r0, #8]
    b072:	68f3      	ldr	r3, [r6, #12]
    b074:	60c3      	str	r3, [r0, #12]
    b076:	2a24      	cmp	r2, #36	; 0x24
    b078:	d015      	beq.n	b0a6 <_realloc_r+0x316>
    b07a:	0003      	movs	r3, r0
    b07c:	0032      	movs	r2, r6
    b07e:	3310      	adds	r3, #16
    b080:	3210      	adds	r2, #16
    b082:	e6d9      	b.n	ae38 <_realloc_r+0xa8>
    b084:	6853      	ldr	r3, [r2, #4]
    b086:	2203      	movs	r2, #3
    b088:	4393      	bics	r3, r2
    b08a:	18e4      	adds	r4, r4, r3
    b08c:	0035      	movs	r5, r6
    b08e:	e6ec      	b.n	ae6a <_realloc_r+0xda>
    b090:	4653      	mov	r3, sl
    b092:	68b1      	ldr	r1, [r6, #8]
    b094:	6119      	str	r1, [r3, #16]
    b096:	68f1      	ldr	r1, [r6, #12]
    b098:	6159      	str	r1, [r3, #20]
    b09a:	2a24      	cmp	r2, #36	; 0x24
    b09c:	d00c      	beq.n	b0b8 <_realloc_r+0x328>
    b09e:	0032      	movs	r2, r6
    b0a0:	3318      	adds	r3, #24
    b0a2:	3210      	adds	r2, #16
    b0a4:	e7bc      	b.n	b020 <_realloc_r+0x290>
    b0a6:	6933      	ldr	r3, [r6, #16]
    b0a8:	0032      	movs	r2, r6
    b0aa:	6103      	str	r3, [r0, #16]
    b0ac:	0003      	movs	r3, r0
    b0ae:	6971      	ldr	r1, [r6, #20]
    b0b0:	3318      	adds	r3, #24
    b0b2:	3218      	adds	r2, #24
    b0b4:	6141      	str	r1, [r0, #20]
    b0b6:	e6bf      	b.n	ae38 <_realloc_r+0xa8>
    b0b8:	4653      	mov	r3, sl
    b0ba:	6932      	ldr	r2, [r6, #16]
    b0bc:	4651      	mov	r1, sl
    b0be:	619a      	str	r2, [r3, #24]
    b0c0:	0032      	movs	r2, r6
    b0c2:	6970      	ldr	r0, [r6, #20]
    b0c4:	3320      	adds	r3, #32
    b0c6:	3218      	adds	r2, #24
    b0c8:	61c8      	str	r0, [r1, #28]
    b0ca:	e7a9      	b.n	b020 <_realloc_r+0x290>
    b0cc:	002b      	movs	r3, r5
    b0ce:	0032      	movs	r2, r6
    b0d0:	e77e      	b.n	afd0 <_realloc_r+0x240>
    b0d2:	0031      	movs	r1, r6
    b0d4:	0028      	movs	r0, r5
    b0d6:	f7fb ffff 	bl	70d8 <memmove>
    b0da:	e77f      	b.n	afdc <_realloc_r+0x24c>
    b0dc:	4653      	mov	r3, sl
    b0de:	68b1      	ldr	r1, [r6, #8]
    b0e0:	6119      	str	r1, [r3, #16]
    b0e2:	68f1      	ldr	r1, [r6, #12]
    b0e4:	6159      	str	r1, [r3, #20]
    b0e6:	2a24      	cmp	r2, #36	; 0x24
    b0e8:	d003      	beq.n	b0f2 <_realloc_r+0x362>
    b0ea:	0032      	movs	r2, r6
    b0ec:	3318      	adds	r3, #24
    b0ee:	3210      	adds	r2, #16
    b0f0:	e76e      	b.n	afd0 <_realloc_r+0x240>
    b0f2:	4653      	mov	r3, sl
    b0f4:	6932      	ldr	r2, [r6, #16]
    b0f6:	4651      	mov	r1, sl
    b0f8:	619a      	str	r2, [r3, #24]
    b0fa:	0032      	movs	r2, r6
    b0fc:	6970      	ldr	r0, [r6, #20]
    b0fe:	3320      	adds	r3, #32
    b100:	3218      	adds	r2, #24
    b102:	61c8      	str	r0, [r1, #28]
    b104:	e764      	b.n	afd0 <_realloc_r+0x240>
    b106:	46c0      	nop			; (mov r8, r8)
    b108:	20000548 	.word	0x20000548

0000b10c <__sread>:
    b10c:	b570      	push	{r4, r5, r6, lr}
    b10e:	000c      	movs	r4, r1
    b110:	250e      	movs	r5, #14
    b112:	5f49      	ldrsh	r1, [r1, r5]
    b114:	f000 fa98 	bl	b648 <_read_r>
    b118:	2800      	cmp	r0, #0
    b11a:	db03      	blt.n	b124 <__sread+0x18>
    b11c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b11e:	181b      	adds	r3, r3, r0
    b120:	6523      	str	r3, [r4, #80]	; 0x50
    b122:	bd70      	pop	{r4, r5, r6, pc}
    b124:	89a3      	ldrh	r3, [r4, #12]
    b126:	4a02      	ldr	r2, [pc, #8]	; (b130 <__sread+0x24>)
    b128:	4013      	ands	r3, r2
    b12a:	81a3      	strh	r3, [r4, #12]
    b12c:	e7f9      	b.n	b122 <__sread+0x16>
    b12e:	46c0      	nop			; (mov r8, r8)
    b130:	ffffefff 	.word	0xffffefff

0000b134 <__swrite>:
    b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b136:	0016      	movs	r6, r2
    b138:	001f      	movs	r7, r3
    b13a:	220c      	movs	r2, #12
    b13c:	5e8b      	ldrsh	r3, [r1, r2]
    b13e:	0005      	movs	r5, r0
    b140:	000c      	movs	r4, r1
    b142:	05da      	lsls	r2, r3, #23
    b144:	d507      	bpl.n	b156 <__swrite+0x22>
    b146:	230e      	movs	r3, #14
    b148:	5ec9      	ldrsh	r1, [r1, r3]
    b14a:	2200      	movs	r2, #0
    b14c:	2302      	movs	r3, #2
    b14e:	f000 fa67 	bl	b620 <_lseek_r>
    b152:	220c      	movs	r2, #12
    b154:	5ea3      	ldrsh	r3, [r4, r2]
    b156:	4a05      	ldr	r2, [pc, #20]	; (b16c <__swrite+0x38>)
    b158:	0028      	movs	r0, r5
    b15a:	4013      	ands	r3, r2
    b15c:	81a3      	strh	r3, [r4, #12]
    b15e:	0032      	movs	r2, r6
    b160:	230e      	movs	r3, #14
    b162:	5ee1      	ldrsh	r1, [r4, r3]
    b164:	003b      	movs	r3, r7
    b166:	f000 f8d7 	bl	b318 <_write_r>
    b16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b16c:	ffffefff 	.word	0xffffefff

0000b170 <__sseek>:
    b170:	b570      	push	{r4, r5, r6, lr}
    b172:	000c      	movs	r4, r1
    b174:	250e      	movs	r5, #14
    b176:	5f49      	ldrsh	r1, [r1, r5]
    b178:	f000 fa52 	bl	b620 <_lseek_r>
    b17c:	1c43      	adds	r3, r0, #1
    b17e:	d006      	beq.n	b18e <__sseek+0x1e>
    b180:	2380      	movs	r3, #128	; 0x80
    b182:	89a2      	ldrh	r2, [r4, #12]
    b184:	015b      	lsls	r3, r3, #5
    b186:	4313      	orrs	r3, r2
    b188:	81a3      	strh	r3, [r4, #12]
    b18a:	6520      	str	r0, [r4, #80]	; 0x50
    b18c:	bd70      	pop	{r4, r5, r6, pc}
    b18e:	89a3      	ldrh	r3, [r4, #12]
    b190:	4a01      	ldr	r2, [pc, #4]	; (b198 <__sseek+0x28>)
    b192:	4013      	ands	r3, r2
    b194:	81a3      	strh	r3, [r4, #12]
    b196:	e7f9      	b.n	b18c <__sseek+0x1c>
    b198:	ffffefff 	.word	0xffffefff

0000b19c <__sclose>:
    b19c:	b510      	push	{r4, lr}
    b19e:	230e      	movs	r3, #14
    b1a0:	5ec9      	ldrsh	r1, [r1, r3]
    b1a2:	f000 f963 	bl	b46c <_close_r>
    b1a6:	bd10      	pop	{r4, pc}

0000b1a8 <__sprint_r.part.0>:
    b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1aa:	464e      	mov	r6, r9
    b1ac:	4645      	mov	r5, r8
    b1ae:	46de      	mov	lr, fp
    b1b0:	4657      	mov	r7, sl
    b1b2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b1b4:	b5e0      	push	{r5, r6, r7, lr}
    b1b6:	4680      	mov	r8, r0
    b1b8:	000e      	movs	r6, r1
    b1ba:	4691      	mov	r9, r2
    b1bc:	049b      	lsls	r3, r3, #18
    b1be:	d531      	bpl.n	b224 <__sprint_r.part.0+0x7c>
    b1c0:	6813      	ldr	r3, [r2, #0]
    b1c2:	469a      	mov	sl, r3
    b1c4:	6893      	ldr	r3, [r2, #8]
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d02a      	beq.n	b220 <__sprint_r.part.0+0x78>
    b1ca:	4652      	mov	r2, sl
    b1cc:	6852      	ldr	r2, [r2, #4]
    b1ce:	2500      	movs	r5, #0
    b1d0:	4693      	mov	fp, r2
    b1d2:	0897      	lsrs	r7, r2, #2
    b1d4:	4652      	mov	r2, sl
    b1d6:	6814      	ldr	r4, [r2, #0]
    b1d8:	d104      	bne.n	b1e4 <__sprint_r.part.0+0x3c>
    b1da:	e016      	b.n	b20a <__sprint_r.part.0+0x62>
    b1dc:	3501      	adds	r5, #1
    b1de:	3404      	adds	r4, #4
    b1e0:	42af      	cmp	r7, r5
    b1e2:	d010      	beq.n	b206 <__sprint_r.part.0+0x5e>
    b1e4:	0032      	movs	r2, r6
    b1e6:	6821      	ldr	r1, [r4, #0]
    b1e8:	4640      	mov	r0, r8
    b1ea:	f000 f9e3 	bl	b5b4 <_fputwc_r>
    b1ee:	1c43      	adds	r3, r0, #1
    b1f0:	d1f4      	bne.n	b1dc <__sprint_r.part.0+0x34>
    b1f2:	464a      	mov	r2, r9
    b1f4:	2300      	movs	r3, #0
    b1f6:	6093      	str	r3, [r2, #8]
    b1f8:	6053      	str	r3, [r2, #4]
    b1fa:	bc3c      	pop	{r2, r3, r4, r5}
    b1fc:	4690      	mov	r8, r2
    b1fe:	4699      	mov	r9, r3
    b200:	46a2      	mov	sl, r4
    b202:	46ab      	mov	fp, r5
    b204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b206:	464b      	mov	r3, r9
    b208:	689b      	ldr	r3, [r3, #8]
    b20a:	465a      	mov	r2, fp
    b20c:	2103      	movs	r1, #3
    b20e:	438a      	bics	r2, r1
    b210:	1a9b      	subs	r3, r3, r2
    b212:	464a      	mov	r2, r9
    b214:	6093      	str	r3, [r2, #8]
    b216:	2208      	movs	r2, #8
    b218:	4694      	mov	ip, r2
    b21a:	44e2      	add	sl, ip
    b21c:	2b00      	cmp	r3, #0
    b21e:	d1d4      	bne.n	b1ca <__sprint_r.part.0+0x22>
    b220:	2000      	movs	r0, #0
    b222:	e7e6      	b.n	b1f2 <__sprint_r.part.0+0x4a>
    b224:	f7fe ffdc 	bl	a1e0 <__sfvwrite_r>
    b228:	e7e3      	b.n	b1f2 <__sprint_r.part.0+0x4a>
    b22a:	46c0      	nop			; (mov r8, r8)

0000b22c <__sprint_r>:
    b22c:	6893      	ldr	r3, [r2, #8]
    b22e:	b510      	push	{r4, lr}
    b230:	2b00      	cmp	r3, #0
    b232:	d002      	beq.n	b23a <__sprint_r+0xe>
    b234:	f7ff ffb8 	bl	b1a8 <__sprint_r.part.0>
    b238:	bd10      	pop	{r4, pc}
    b23a:	6053      	str	r3, [r2, #4]
    b23c:	2000      	movs	r0, #0
    b23e:	e7fb      	b.n	b238 <__sprint_r+0xc>

0000b240 <__swbuf_r>:
    b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b242:	0006      	movs	r6, r0
    b244:	000d      	movs	r5, r1
    b246:	0014      	movs	r4, r2
    b248:	2800      	cmp	r0, #0
    b24a:	d002      	beq.n	b252 <__swbuf_r+0x12>
    b24c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b24e:	2b00      	cmp	r3, #0
    b250:	d04e      	beq.n	b2f0 <__swbuf_r+0xb0>
    b252:	69a3      	ldr	r3, [r4, #24]
    b254:	60a3      	str	r3, [r4, #8]
    b256:	230c      	movs	r3, #12
    b258:	5ee0      	ldrsh	r0, [r4, r3]
    b25a:	b281      	uxth	r1, r0
    b25c:	070b      	lsls	r3, r1, #28
    b25e:	d53c      	bpl.n	b2da <__swbuf_r+0x9a>
    b260:	6923      	ldr	r3, [r4, #16]
    b262:	2b00      	cmp	r3, #0
    b264:	d039      	beq.n	b2da <__swbuf_r+0x9a>
    b266:	22ff      	movs	r2, #255	; 0xff
    b268:	b2ef      	uxtb	r7, r5
    b26a:	4015      	ands	r5, r2
    b26c:	2280      	movs	r2, #128	; 0x80
    b26e:	0192      	lsls	r2, r2, #6
    b270:	4211      	tst	r1, r2
    b272:	d015      	beq.n	b2a0 <__swbuf_r+0x60>
    b274:	6822      	ldr	r2, [r4, #0]
    b276:	6961      	ldr	r1, [r4, #20]
    b278:	1ad3      	subs	r3, r2, r3
    b27a:	428b      	cmp	r3, r1
    b27c:	da1b      	bge.n	b2b6 <__swbuf_r+0x76>
    b27e:	3301      	adds	r3, #1
    b280:	68a1      	ldr	r1, [r4, #8]
    b282:	3901      	subs	r1, #1
    b284:	60a1      	str	r1, [r4, #8]
    b286:	1c51      	adds	r1, r2, #1
    b288:	6021      	str	r1, [r4, #0]
    b28a:	7017      	strb	r7, [r2, #0]
    b28c:	6962      	ldr	r2, [r4, #20]
    b28e:	429a      	cmp	r2, r3
    b290:	d01a      	beq.n	b2c8 <__swbuf_r+0x88>
    b292:	89a3      	ldrh	r3, [r4, #12]
    b294:	07db      	lsls	r3, r3, #31
    b296:	d501      	bpl.n	b29c <__swbuf_r+0x5c>
    b298:	2d0a      	cmp	r5, #10
    b29a:	d015      	beq.n	b2c8 <__swbuf_r+0x88>
    b29c:	0028      	movs	r0, r5
    b29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2a0:	4302      	orrs	r2, r0
    b2a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    b2a4:	81a2      	strh	r2, [r4, #12]
    b2a6:	4a14      	ldr	r2, [pc, #80]	; (b2f8 <__swbuf_r+0xb8>)
    b2a8:	400a      	ands	r2, r1
    b2aa:	6662      	str	r2, [r4, #100]	; 0x64
    b2ac:	6961      	ldr	r1, [r4, #20]
    b2ae:	6822      	ldr	r2, [r4, #0]
    b2b0:	1ad3      	subs	r3, r2, r3
    b2b2:	428b      	cmp	r3, r1
    b2b4:	dbe3      	blt.n	b27e <__swbuf_r+0x3e>
    b2b6:	0021      	movs	r1, r4
    b2b8:	0030      	movs	r0, r6
    b2ba:	f7fe fda7 	bl	9e0c <_fflush_r>
    b2be:	2800      	cmp	r0, #0
    b2c0:	d108      	bne.n	b2d4 <__swbuf_r+0x94>
    b2c2:	6822      	ldr	r2, [r4, #0]
    b2c4:	2301      	movs	r3, #1
    b2c6:	e7db      	b.n	b280 <__swbuf_r+0x40>
    b2c8:	0021      	movs	r1, r4
    b2ca:	0030      	movs	r0, r6
    b2cc:	f7fe fd9e 	bl	9e0c <_fflush_r>
    b2d0:	2800      	cmp	r0, #0
    b2d2:	d0e3      	beq.n	b29c <__swbuf_r+0x5c>
    b2d4:	2501      	movs	r5, #1
    b2d6:	426d      	negs	r5, r5
    b2d8:	e7e0      	b.n	b29c <__swbuf_r+0x5c>
    b2da:	0021      	movs	r1, r4
    b2dc:	0030      	movs	r0, r6
    b2de:	f7fd fc01 	bl	8ae4 <__swsetup_r>
    b2e2:	2800      	cmp	r0, #0
    b2e4:	d1f6      	bne.n	b2d4 <__swbuf_r+0x94>
    b2e6:	230c      	movs	r3, #12
    b2e8:	5ee0      	ldrsh	r0, [r4, r3]
    b2ea:	6923      	ldr	r3, [r4, #16]
    b2ec:	b281      	uxth	r1, r0
    b2ee:	e7ba      	b.n	b266 <__swbuf_r+0x26>
    b2f0:	f7fe fe22 	bl	9f38 <__sinit>
    b2f4:	e7ad      	b.n	b252 <__swbuf_r+0x12>
    b2f6:	46c0      	nop			; (mov r8, r8)
    b2f8:	ffffdfff 	.word	0xffffdfff

0000b2fc <__ascii_wctomb>:
    b2fc:	2900      	cmp	r1, #0
    b2fe:	d004      	beq.n	b30a <__ascii_wctomb+0xe>
    b300:	2aff      	cmp	r2, #255	; 0xff
    b302:	d804      	bhi.n	b30e <__ascii_wctomb+0x12>
    b304:	2001      	movs	r0, #1
    b306:	700a      	strb	r2, [r1, #0]
    b308:	4770      	bx	lr
    b30a:	2000      	movs	r0, #0
    b30c:	e7fc      	b.n	b308 <__ascii_wctomb+0xc>
    b30e:	238a      	movs	r3, #138	; 0x8a
    b310:	6003      	str	r3, [r0, #0]
    b312:	2001      	movs	r0, #1
    b314:	4240      	negs	r0, r0
    b316:	e7f7      	b.n	b308 <__ascii_wctomb+0xc>

0000b318 <_write_r>:
    b318:	b570      	push	{r4, r5, r6, lr}
    b31a:	0005      	movs	r5, r0
    b31c:	0008      	movs	r0, r1
    b31e:	0011      	movs	r1, r2
    b320:	2200      	movs	r2, #0
    b322:	4c06      	ldr	r4, [pc, #24]	; (b33c <_write_r+0x24>)
    b324:	6022      	str	r2, [r4, #0]
    b326:	001a      	movs	r2, r3
    b328:	f7fb f96e 	bl	6608 <_write>
    b32c:	1c43      	adds	r3, r0, #1
    b32e:	d000      	beq.n	b332 <_write_r+0x1a>
    b330:	bd70      	pop	{r4, r5, r6, pc}
    b332:	6823      	ldr	r3, [r4, #0]
    b334:	2b00      	cmp	r3, #0
    b336:	d0fb      	beq.n	b330 <_write_r+0x18>
    b338:	602b      	str	r3, [r5, #0]
    b33a:	e7f9      	b.n	b330 <_write_r+0x18>
    b33c:	200034d0 	.word	0x200034d0

0000b340 <__register_exitproc>:
    b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b342:	46de      	mov	lr, fp
    b344:	469b      	mov	fp, r3
    b346:	4b31      	ldr	r3, [pc, #196]	; (b40c <__register_exitproc+0xcc>)
    b348:	4645      	mov	r5, r8
    b34a:	681c      	ldr	r4, [r3, #0]
    b34c:	23a4      	movs	r3, #164	; 0xa4
    b34e:	464e      	mov	r6, r9
    b350:	4657      	mov	r7, sl
    b352:	005b      	lsls	r3, r3, #1
    b354:	b5e0      	push	{r5, r6, r7, lr}
    b356:	0005      	movs	r5, r0
    b358:	58e0      	ldr	r0, [r4, r3]
    b35a:	000e      	movs	r6, r1
    b35c:	4690      	mov	r8, r2
    b35e:	2800      	cmp	r0, #0
    b360:	d04b      	beq.n	b3fa <__register_exitproc+0xba>
    b362:	6843      	ldr	r3, [r0, #4]
    b364:	2b1f      	cmp	r3, #31
    b366:	dc0d      	bgt.n	b384 <__register_exitproc+0x44>
    b368:	1c5c      	adds	r4, r3, #1
    b36a:	2d00      	cmp	r5, #0
    b36c:	d121      	bne.n	b3b2 <__register_exitproc+0x72>
    b36e:	3302      	adds	r3, #2
    b370:	009b      	lsls	r3, r3, #2
    b372:	6044      	str	r4, [r0, #4]
    b374:	501e      	str	r6, [r3, r0]
    b376:	2000      	movs	r0, #0
    b378:	bc3c      	pop	{r2, r3, r4, r5}
    b37a:	4690      	mov	r8, r2
    b37c:	4699      	mov	r9, r3
    b37e:	46a2      	mov	sl, r4
    b380:	46ab      	mov	fp, r5
    b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b384:	4b22      	ldr	r3, [pc, #136]	; (b410 <__register_exitproc+0xd0>)
    b386:	2b00      	cmp	r3, #0
    b388:	d03c      	beq.n	b404 <__register_exitproc+0xc4>
    b38a:	20c8      	movs	r0, #200	; 0xc8
    b38c:	0040      	lsls	r0, r0, #1
    b38e:	f7fb fba3 	bl	6ad8 <malloc>
    b392:	2800      	cmp	r0, #0
    b394:	d036      	beq.n	b404 <__register_exitproc+0xc4>
    b396:	22a4      	movs	r2, #164	; 0xa4
    b398:	2300      	movs	r3, #0
    b39a:	0052      	lsls	r2, r2, #1
    b39c:	58a1      	ldr	r1, [r4, r2]
    b39e:	6043      	str	r3, [r0, #4]
    b3a0:	6001      	str	r1, [r0, #0]
    b3a2:	50a0      	str	r0, [r4, r2]
    b3a4:	3240      	adds	r2, #64	; 0x40
    b3a6:	5083      	str	r3, [r0, r2]
    b3a8:	3204      	adds	r2, #4
    b3aa:	5083      	str	r3, [r0, r2]
    b3ac:	2401      	movs	r4, #1
    b3ae:	2d00      	cmp	r5, #0
    b3b0:	d0dd      	beq.n	b36e <__register_exitproc+0x2e>
    b3b2:	009a      	lsls	r2, r3, #2
    b3b4:	4691      	mov	r9, r2
    b3b6:	4481      	add	r9, r0
    b3b8:	4642      	mov	r2, r8
    b3ba:	2188      	movs	r1, #136	; 0x88
    b3bc:	464f      	mov	r7, r9
    b3be:	507a      	str	r2, [r7, r1]
    b3c0:	22c4      	movs	r2, #196	; 0xc4
    b3c2:	0052      	lsls	r2, r2, #1
    b3c4:	4690      	mov	r8, r2
    b3c6:	4480      	add	r8, r0
    b3c8:	4642      	mov	r2, r8
    b3ca:	3987      	subs	r1, #135	; 0x87
    b3cc:	4099      	lsls	r1, r3
    b3ce:	6812      	ldr	r2, [r2, #0]
    b3d0:	468a      	mov	sl, r1
    b3d2:	430a      	orrs	r2, r1
    b3d4:	4694      	mov	ip, r2
    b3d6:	4642      	mov	r2, r8
    b3d8:	4661      	mov	r1, ip
    b3da:	6011      	str	r1, [r2, #0]
    b3dc:	2284      	movs	r2, #132	; 0x84
    b3de:	4649      	mov	r1, r9
    b3e0:	465f      	mov	r7, fp
    b3e2:	0052      	lsls	r2, r2, #1
    b3e4:	508f      	str	r7, [r1, r2]
    b3e6:	2d02      	cmp	r5, #2
    b3e8:	d1c1      	bne.n	b36e <__register_exitproc+0x2e>
    b3ea:	0002      	movs	r2, r0
    b3ec:	4655      	mov	r5, sl
    b3ee:	328d      	adds	r2, #141	; 0x8d
    b3f0:	32ff      	adds	r2, #255	; 0xff
    b3f2:	6811      	ldr	r1, [r2, #0]
    b3f4:	430d      	orrs	r5, r1
    b3f6:	6015      	str	r5, [r2, #0]
    b3f8:	e7b9      	b.n	b36e <__register_exitproc+0x2e>
    b3fa:	0020      	movs	r0, r4
    b3fc:	304d      	adds	r0, #77	; 0x4d
    b3fe:	30ff      	adds	r0, #255	; 0xff
    b400:	50e0      	str	r0, [r4, r3]
    b402:	e7ae      	b.n	b362 <__register_exitproc+0x22>
    b404:	2001      	movs	r0, #1
    b406:	4240      	negs	r0, r0
    b408:	e7b6      	b.n	b378 <__register_exitproc+0x38>
    b40a:	46c0      	nop			; (mov r8, r8)
    b40c:	0000d654 	.word	0x0000d654
    b410:	00006ad9 	.word	0x00006ad9

0000b414 <_calloc_r>:
    b414:	b510      	push	{r4, lr}
    b416:	4351      	muls	r1, r2
    b418:	f7fb fb68 	bl	6aec <_malloc_r>
    b41c:	1e04      	subs	r4, r0, #0
    b41e:	d01c      	beq.n	b45a <_calloc_r+0x46>
    b420:	0003      	movs	r3, r0
    b422:	3b08      	subs	r3, #8
    b424:	685a      	ldr	r2, [r3, #4]
    b426:	2303      	movs	r3, #3
    b428:	439a      	bics	r2, r3
    b42a:	3a04      	subs	r2, #4
    b42c:	2a24      	cmp	r2, #36	; 0x24
    b42e:	d816      	bhi.n	b45e <_calloc_r+0x4a>
    b430:	0003      	movs	r3, r0
    b432:	2a13      	cmp	r2, #19
    b434:	d90d      	bls.n	b452 <_calloc_r+0x3e>
    b436:	2100      	movs	r1, #0
    b438:	3308      	adds	r3, #8
    b43a:	6001      	str	r1, [r0, #0]
    b43c:	6041      	str	r1, [r0, #4]
    b43e:	2a1b      	cmp	r2, #27
    b440:	d907      	bls.n	b452 <_calloc_r+0x3e>
    b442:	6081      	str	r1, [r0, #8]
    b444:	60c1      	str	r1, [r0, #12]
    b446:	2a24      	cmp	r2, #36	; 0x24
    b448:	d10d      	bne.n	b466 <_calloc_r+0x52>
    b44a:	0003      	movs	r3, r0
    b44c:	6101      	str	r1, [r0, #16]
    b44e:	3318      	adds	r3, #24
    b450:	6141      	str	r1, [r0, #20]
    b452:	2200      	movs	r2, #0
    b454:	601a      	str	r2, [r3, #0]
    b456:	605a      	str	r2, [r3, #4]
    b458:	609a      	str	r2, [r3, #8]
    b45a:	0020      	movs	r0, r4
    b45c:	bd10      	pop	{r4, pc}
    b45e:	2100      	movs	r1, #0
    b460:	f7fb fe8a 	bl	7178 <memset>
    b464:	e7f9      	b.n	b45a <_calloc_r+0x46>
    b466:	0003      	movs	r3, r0
    b468:	3310      	adds	r3, #16
    b46a:	e7f2      	b.n	b452 <_calloc_r+0x3e>

0000b46c <_close_r>:
    b46c:	2300      	movs	r3, #0
    b46e:	b570      	push	{r4, r5, r6, lr}
    b470:	4c06      	ldr	r4, [pc, #24]	; (b48c <_close_r+0x20>)
    b472:	0005      	movs	r5, r0
    b474:	0008      	movs	r0, r1
    b476:	6023      	str	r3, [r4, #0]
    b478:	f7fb f902 	bl	6680 <_close>
    b47c:	1c43      	adds	r3, r0, #1
    b47e:	d000      	beq.n	b482 <_close_r+0x16>
    b480:	bd70      	pop	{r4, r5, r6, pc}
    b482:	6823      	ldr	r3, [r4, #0]
    b484:	2b00      	cmp	r3, #0
    b486:	d0fb      	beq.n	b480 <_close_r+0x14>
    b488:	602b      	str	r3, [r5, #0]
    b48a:	e7f9      	b.n	b480 <_close_r+0x14>
    b48c:	200034d0 	.word	0x200034d0

0000b490 <_fclose_r>:
    b490:	b570      	push	{r4, r5, r6, lr}
    b492:	0005      	movs	r5, r0
    b494:	1e0c      	subs	r4, r1, #0
    b496:	d008      	beq.n	b4aa <_fclose_r+0x1a>
    b498:	2800      	cmp	r0, #0
    b49a:	d002      	beq.n	b4a2 <_fclose_r+0x12>
    b49c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d031      	beq.n	b506 <_fclose_r+0x76>
    b4a2:	220c      	movs	r2, #12
    b4a4:	5ea3      	ldrsh	r3, [r4, r2]
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d102      	bne.n	b4b0 <_fclose_r+0x20>
    b4aa:	2600      	movs	r6, #0
    b4ac:	0030      	movs	r0, r6
    b4ae:	bd70      	pop	{r4, r5, r6, pc}
    b4b0:	0021      	movs	r1, r4
    b4b2:	0028      	movs	r0, r5
    b4b4:	f7fe fc02 	bl	9cbc <__sflush_r>
    b4b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b4ba:	0006      	movs	r6, r0
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d004      	beq.n	b4ca <_fclose_r+0x3a>
    b4c0:	69e1      	ldr	r1, [r4, #28]
    b4c2:	0028      	movs	r0, r5
    b4c4:	4798      	blx	r3
    b4c6:	2800      	cmp	r0, #0
    b4c8:	db20      	blt.n	b50c <_fclose_r+0x7c>
    b4ca:	89a3      	ldrh	r3, [r4, #12]
    b4cc:	061b      	lsls	r3, r3, #24
    b4ce:	d420      	bmi.n	b512 <_fclose_r+0x82>
    b4d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b4d2:	2900      	cmp	r1, #0
    b4d4:	d008      	beq.n	b4e8 <_fclose_r+0x58>
    b4d6:	0023      	movs	r3, r4
    b4d8:	3340      	adds	r3, #64	; 0x40
    b4da:	4299      	cmp	r1, r3
    b4dc:	d002      	beq.n	b4e4 <_fclose_r+0x54>
    b4de:	0028      	movs	r0, r5
    b4e0:	f7fe fda0 	bl	a024 <_free_r>
    b4e4:	2300      	movs	r3, #0
    b4e6:	6323      	str	r3, [r4, #48]	; 0x30
    b4e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b4ea:	2900      	cmp	r1, #0
    b4ec:	d004      	beq.n	b4f8 <_fclose_r+0x68>
    b4ee:	0028      	movs	r0, r5
    b4f0:	f7fe fd98 	bl	a024 <_free_r>
    b4f4:	2300      	movs	r3, #0
    b4f6:	6463      	str	r3, [r4, #68]	; 0x44
    b4f8:	f7fe fd26 	bl	9f48 <__sfp_lock_acquire>
    b4fc:	2300      	movs	r3, #0
    b4fe:	81a3      	strh	r3, [r4, #12]
    b500:	f7fe fd24 	bl	9f4c <__sfp_lock_release>
    b504:	e7d2      	b.n	b4ac <_fclose_r+0x1c>
    b506:	f7fe fd17 	bl	9f38 <__sinit>
    b50a:	e7ca      	b.n	b4a2 <_fclose_r+0x12>
    b50c:	2601      	movs	r6, #1
    b50e:	4276      	negs	r6, r6
    b510:	e7db      	b.n	b4ca <_fclose_r+0x3a>
    b512:	6921      	ldr	r1, [r4, #16]
    b514:	0028      	movs	r0, r5
    b516:	f7fe fd85 	bl	a024 <_free_r>
    b51a:	e7d9      	b.n	b4d0 <_fclose_r+0x40>

0000b51c <__fputwc>:
    b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b51e:	46ce      	mov	lr, r9
    b520:	4647      	mov	r7, r8
    b522:	b580      	push	{r7, lr}
    b524:	b085      	sub	sp, #20
    b526:	4680      	mov	r8, r0
    b528:	4689      	mov	r9, r1
    b52a:	0014      	movs	r4, r2
    b52c:	f7ff f800 	bl	a530 <__locale_mb_cur_max>
    b530:	2801      	cmp	r0, #1
    b532:	d031      	beq.n	b598 <__fputwc+0x7c>
    b534:	0023      	movs	r3, r4
    b536:	af03      	add	r7, sp, #12
    b538:	335c      	adds	r3, #92	; 0x5c
    b53a:	464a      	mov	r2, r9
    b53c:	0039      	movs	r1, r7
    b53e:	4640      	mov	r0, r8
    b540:	f000 f896 	bl	b670 <_wcrtomb_r>
    b544:	0006      	movs	r6, r0
    b546:	1c43      	adds	r3, r0, #1
    b548:	d021      	beq.n	b58e <__fputwc+0x72>
    b54a:	2800      	cmp	r0, #0
    b54c:	d030      	beq.n	b5b0 <__fputwc+0x94>
    b54e:	7839      	ldrb	r1, [r7, #0]
    b550:	2500      	movs	r5, #0
    b552:	e007      	b.n	b564 <__fputwc+0x48>
    b554:	6823      	ldr	r3, [r4, #0]
    b556:	1c5a      	adds	r2, r3, #1
    b558:	6022      	str	r2, [r4, #0]
    b55a:	7019      	strb	r1, [r3, #0]
    b55c:	3501      	adds	r5, #1
    b55e:	42b5      	cmp	r5, r6
    b560:	d226      	bcs.n	b5b0 <__fputwc+0x94>
    b562:	5d79      	ldrb	r1, [r7, r5]
    b564:	68a3      	ldr	r3, [r4, #8]
    b566:	3b01      	subs	r3, #1
    b568:	60a3      	str	r3, [r4, #8]
    b56a:	2b00      	cmp	r3, #0
    b56c:	daf2      	bge.n	b554 <__fputwc+0x38>
    b56e:	69a2      	ldr	r2, [r4, #24]
    b570:	4293      	cmp	r3, r2
    b572:	db01      	blt.n	b578 <__fputwc+0x5c>
    b574:	290a      	cmp	r1, #10
    b576:	d1ed      	bne.n	b554 <__fputwc+0x38>
    b578:	0022      	movs	r2, r4
    b57a:	4640      	mov	r0, r8
    b57c:	f7ff fe60 	bl	b240 <__swbuf_r>
    b580:	1c43      	adds	r3, r0, #1
    b582:	d1eb      	bne.n	b55c <__fputwc+0x40>
    b584:	b005      	add	sp, #20
    b586:	bc0c      	pop	{r2, r3}
    b588:	4690      	mov	r8, r2
    b58a:	4699      	mov	r9, r3
    b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b58e:	2240      	movs	r2, #64	; 0x40
    b590:	89a3      	ldrh	r3, [r4, #12]
    b592:	4313      	orrs	r3, r2
    b594:	81a3      	strh	r3, [r4, #12]
    b596:	e7f5      	b.n	b584 <__fputwc+0x68>
    b598:	464b      	mov	r3, r9
    b59a:	3b01      	subs	r3, #1
    b59c:	2bfe      	cmp	r3, #254	; 0xfe
    b59e:	d8c9      	bhi.n	b534 <__fputwc+0x18>
    b5a0:	466a      	mov	r2, sp
    b5a2:	464b      	mov	r3, r9
    b5a4:	71d3      	strb	r3, [r2, #7]
    b5a6:	79d1      	ldrb	r1, [r2, #7]
    b5a8:	af03      	add	r7, sp, #12
    b5aa:	7039      	strb	r1, [r7, #0]
    b5ac:	2601      	movs	r6, #1
    b5ae:	e7cf      	b.n	b550 <__fputwc+0x34>
    b5b0:	4648      	mov	r0, r9
    b5b2:	e7e7      	b.n	b584 <__fputwc+0x68>

0000b5b4 <_fputwc_r>:
    b5b4:	b510      	push	{r4, lr}
    b5b6:	230c      	movs	r3, #12
    b5b8:	5ed4      	ldrsh	r4, [r2, r3]
    b5ba:	2380      	movs	r3, #128	; 0x80
    b5bc:	019b      	lsls	r3, r3, #6
    b5be:	421c      	tst	r4, r3
    b5c0:	d104      	bne.n	b5cc <_fputwc_r+0x18>
    b5c2:	431c      	orrs	r4, r3
    b5c4:	8194      	strh	r4, [r2, #12]
    b5c6:	6e54      	ldr	r4, [r2, #100]	; 0x64
    b5c8:	4323      	orrs	r3, r4
    b5ca:	6653      	str	r3, [r2, #100]	; 0x64
    b5cc:	f7ff ffa6 	bl	b51c <__fputwc>
    b5d0:	bd10      	pop	{r4, pc}
    b5d2:	46c0      	nop			; (mov r8, r8)

0000b5d4 <_fstat_r>:
    b5d4:	2300      	movs	r3, #0
    b5d6:	b570      	push	{r4, r5, r6, lr}
    b5d8:	4c07      	ldr	r4, [pc, #28]	; (b5f8 <_fstat_r+0x24>)
    b5da:	0005      	movs	r5, r0
    b5dc:	0008      	movs	r0, r1
    b5de:	0011      	movs	r1, r2
    b5e0:	6023      	str	r3, [r4, #0]
    b5e2:	f7fb f850 	bl	6686 <_fstat>
    b5e6:	1c43      	adds	r3, r0, #1
    b5e8:	d000      	beq.n	b5ec <_fstat_r+0x18>
    b5ea:	bd70      	pop	{r4, r5, r6, pc}
    b5ec:	6823      	ldr	r3, [r4, #0]
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d0fb      	beq.n	b5ea <_fstat_r+0x16>
    b5f2:	602b      	str	r3, [r5, #0]
    b5f4:	e7f9      	b.n	b5ea <_fstat_r+0x16>
    b5f6:	46c0      	nop			; (mov r8, r8)
    b5f8:	200034d0 	.word	0x200034d0

0000b5fc <_isatty_r>:
    b5fc:	2300      	movs	r3, #0
    b5fe:	b570      	push	{r4, r5, r6, lr}
    b600:	4c06      	ldr	r4, [pc, #24]	; (b61c <_isatty_r+0x20>)
    b602:	0005      	movs	r5, r0
    b604:	0008      	movs	r0, r1
    b606:	6023      	str	r3, [r4, #0]
    b608:	f7fb f842 	bl	6690 <_isatty>
    b60c:	1c43      	adds	r3, r0, #1
    b60e:	d000      	beq.n	b612 <_isatty_r+0x16>
    b610:	bd70      	pop	{r4, r5, r6, pc}
    b612:	6823      	ldr	r3, [r4, #0]
    b614:	2b00      	cmp	r3, #0
    b616:	d0fb      	beq.n	b610 <_isatty_r+0x14>
    b618:	602b      	str	r3, [r5, #0]
    b61a:	e7f9      	b.n	b610 <_isatty_r+0x14>
    b61c:	200034d0 	.word	0x200034d0

0000b620 <_lseek_r>:
    b620:	b570      	push	{r4, r5, r6, lr}
    b622:	0005      	movs	r5, r0
    b624:	0008      	movs	r0, r1
    b626:	0011      	movs	r1, r2
    b628:	2200      	movs	r2, #0
    b62a:	4c06      	ldr	r4, [pc, #24]	; (b644 <_lseek_r+0x24>)
    b62c:	6022      	str	r2, [r4, #0]
    b62e:	001a      	movs	r2, r3
    b630:	f7fb f830 	bl	6694 <_lseek>
    b634:	1c43      	adds	r3, r0, #1
    b636:	d000      	beq.n	b63a <_lseek_r+0x1a>
    b638:	bd70      	pop	{r4, r5, r6, pc}
    b63a:	6823      	ldr	r3, [r4, #0]
    b63c:	2b00      	cmp	r3, #0
    b63e:	d0fb      	beq.n	b638 <_lseek_r+0x18>
    b640:	602b      	str	r3, [r5, #0]
    b642:	e7f9      	b.n	b638 <_lseek_r+0x18>
    b644:	200034d0 	.word	0x200034d0

0000b648 <_read_r>:
    b648:	b570      	push	{r4, r5, r6, lr}
    b64a:	0005      	movs	r5, r0
    b64c:	0008      	movs	r0, r1
    b64e:	0011      	movs	r1, r2
    b650:	2200      	movs	r2, #0
    b652:	4c06      	ldr	r4, [pc, #24]	; (b66c <_read_r+0x24>)
    b654:	6022      	str	r2, [r4, #0]
    b656:	001a      	movs	r2, r3
    b658:	f7fa ffb4 	bl	65c4 <_read>
    b65c:	1c43      	adds	r3, r0, #1
    b65e:	d000      	beq.n	b662 <_read_r+0x1a>
    b660:	bd70      	pop	{r4, r5, r6, pc}
    b662:	6823      	ldr	r3, [r4, #0]
    b664:	2b00      	cmp	r3, #0
    b666:	d0fb      	beq.n	b660 <_read_r+0x18>
    b668:	602b      	str	r3, [r5, #0]
    b66a:	e7f9      	b.n	b660 <_read_r+0x18>
    b66c:	200034d0 	.word	0x200034d0

0000b670 <_wcrtomb_r>:
    b670:	b570      	push	{r4, r5, r6, lr}
    b672:	001d      	movs	r5, r3
    b674:	4b11      	ldr	r3, [pc, #68]	; (b6bc <_wcrtomb_r+0x4c>)
    b676:	b084      	sub	sp, #16
    b678:	681b      	ldr	r3, [r3, #0]
    b67a:	0004      	movs	r4, r0
    b67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b67e:	2900      	cmp	r1, #0
    b680:	d00e      	beq.n	b6a0 <_wcrtomb_r+0x30>
    b682:	2b00      	cmp	r3, #0
    b684:	d016      	beq.n	b6b4 <_wcrtomb_r+0x44>
    b686:	20e0      	movs	r0, #224	; 0xe0
    b688:	581e      	ldr	r6, [r3, r0]
    b68a:	002b      	movs	r3, r5
    b68c:	0020      	movs	r0, r4
    b68e:	47b0      	blx	r6
    b690:	1c43      	adds	r3, r0, #1
    b692:	d103      	bne.n	b69c <_wcrtomb_r+0x2c>
    b694:	2300      	movs	r3, #0
    b696:	602b      	str	r3, [r5, #0]
    b698:	338a      	adds	r3, #138	; 0x8a
    b69a:	6023      	str	r3, [r4, #0]
    b69c:	b004      	add	sp, #16
    b69e:	bd70      	pop	{r4, r5, r6, pc}
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d009      	beq.n	b6b8 <_wcrtomb_r+0x48>
    b6a4:	22e0      	movs	r2, #224	; 0xe0
    b6a6:	a901      	add	r1, sp, #4
    b6a8:	589e      	ldr	r6, [r3, r2]
    b6aa:	0020      	movs	r0, r4
    b6ac:	002b      	movs	r3, r5
    b6ae:	2200      	movs	r2, #0
    b6b0:	47b0      	blx	r6
    b6b2:	e7ed      	b.n	b690 <_wcrtomb_r+0x20>
    b6b4:	4b02      	ldr	r3, [pc, #8]	; (b6c0 <_wcrtomb_r+0x50>)
    b6b6:	e7e6      	b.n	b686 <_wcrtomb_r+0x16>
    b6b8:	4b01      	ldr	r3, [pc, #4]	; (b6c0 <_wcrtomb_r+0x50>)
    b6ba:	e7f3      	b.n	b6a4 <_wcrtomb_r+0x34>
    b6bc:	20000118 	.word	0x20000118
    b6c0:	20000958 	.word	0x20000958

0000b6c4 <__aeabi_cdrcmple>:
    b6c4:	4684      	mov	ip, r0
    b6c6:	1c10      	adds	r0, r2, #0
    b6c8:	4662      	mov	r2, ip
    b6ca:	468c      	mov	ip, r1
    b6cc:	1c19      	adds	r1, r3, #0
    b6ce:	4663      	mov	r3, ip
    b6d0:	e000      	b.n	b6d4 <__aeabi_cdcmpeq>
    b6d2:	46c0      	nop			; (mov r8, r8)

0000b6d4 <__aeabi_cdcmpeq>:
    b6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b6d6:	f000 fff5 	bl	c6c4 <__ledf2>
    b6da:	2800      	cmp	r0, #0
    b6dc:	d401      	bmi.n	b6e2 <__aeabi_cdcmpeq+0xe>
    b6de:	2100      	movs	r1, #0
    b6e0:	42c8      	cmn	r0, r1
    b6e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000b6e4 <__aeabi_dcmpeq>:
    b6e4:	b510      	push	{r4, lr}
    b6e6:	f000 ff4f 	bl	c588 <__eqdf2>
    b6ea:	4240      	negs	r0, r0
    b6ec:	3001      	adds	r0, #1
    b6ee:	bd10      	pop	{r4, pc}

0000b6f0 <__aeabi_dcmplt>:
    b6f0:	b510      	push	{r4, lr}
    b6f2:	f000 ffe7 	bl	c6c4 <__ledf2>
    b6f6:	2800      	cmp	r0, #0
    b6f8:	db01      	blt.n	b6fe <__aeabi_dcmplt+0xe>
    b6fa:	2000      	movs	r0, #0
    b6fc:	bd10      	pop	{r4, pc}
    b6fe:	2001      	movs	r0, #1
    b700:	bd10      	pop	{r4, pc}
    b702:	46c0      	nop			; (mov r8, r8)

0000b704 <__aeabi_dcmple>:
    b704:	b510      	push	{r4, lr}
    b706:	f000 ffdd 	bl	c6c4 <__ledf2>
    b70a:	2800      	cmp	r0, #0
    b70c:	dd01      	ble.n	b712 <__aeabi_dcmple+0xe>
    b70e:	2000      	movs	r0, #0
    b710:	bd10      	pop	{r4, pc}
    b712:	2001      	movs	r0, #1
    b714:	bd10      	pop	{r4, pc}
    b716:	46c0      	nop			; (mov r8, r8)

0000b718 <__aeabi_dcmpgt>:
    b718:	b510      	push	{r4, lr}
    b71a:	f000 ff6f 	bl	c5fc <__gedf2>
    b71e:	2800      	cmp	r0, #0
    b720:	dc01      	bgt.n	b726 <__aeabi_dcmpgt+0xe>
    b722:	2000      	movs	r0, #0
    b724:	bd10      	pop	{r4, pc}
    b726:	2001      	movs	r0, #1
    b728:	bd10      	pop	{r4, pc}
    b72a:	46c0      	nop			; (mov r8, r8)

0000b72c <__aeabi_dcmpge>:
    b72c:	b510      	push	{r4, lr}
    b72e:	f000 ff65 	bl	c5fc <__gedf2>
    b732:	2800      	cmp	r0, #0
    b734:	da01      	bge.n	b73a <__aeabi_dcmpge+0xe>
    b736:	2000      	movs	r0, #0
    b738:	bd10      	pop	{r4, pc}
    b73a:	2001      	movs	r0, #1
    b73c:	bd10      	pop	{r4, pc}
    b73e:	46c0      	nop			; (mov r8, r8)

0000b740 <__aeabi_uldivmod>:
    b740:	2b00      	cmp	r3, #0
    b742:	d111      	bne.n	b768 <__aeabi_uldivmod+0x28>
    b744:	2a00      	cmp	r2, #0
    b746:	d10f      	bne.n	b768 <__aeabi_uldivmod+0x28>
    b748:	2900      	cmp	r1, #0
    b74a:	d100      	bne.n	b74e <__aeabi_uldivmod+0xe>
    b74c:	2800      	cmp	r0, #0
    b74e:	d002      	beq.n	b756 <__aeabi_uldivmod+0x16>
    b750:	2100      	movs	r1, #0
    b752:	43c9      	mvns	r1, r1
    b754:	1c08      	adds	r0, r1, #0
    b756:	b407      	push	{r0, r1, r2}
    b758:	4802      	ldr	r0, [pc, #8]	; (b764 <__aeabi_uldivmod+0x24>)
    b75a:	a102      	add	r1, pc, #8	; (adr r1, b764 <__aeabi_uldivmod+0x24>)
    b75c:	1840      	adds	r0, r0, r1
    b75e:	9002      	str	r0, [sp, #8]
    b760:	bd03      	pop	{r0, r1, pc}
    b762:	46c0      	nop			; (mov r8, r8)
    b764:	ffffb259 	.word	0xffffb259
    b768:	b403      	push	{r0, r1}
    b76a:	4668      	mov	r0, sp
    b76c:	b501      	push	{r0, lr}
    b76e:	9802      	ldr	r0, [sp, #8]
    b770:	f000 f806 	bl	b780 <__udivmoddi4>
    b774:	9b01      	ldr	r3, [sp, #4]
    b776:	469e      	mov	lr, r3
    b778:	b002      	add	sp, #8
    b77a:	bc0c      	pop	{r2, r3}
    b77c:	4770      	bx	lr
    b77e:	46c0      	nop			; (mov r8, r8)

0000b780 <__udivmoddi4>:
    b780:	b5f0      	push	{r4, r5, r6, r7, lr}
    b782:	4657      	mov	r7, sl
    b784:	464e      	mov	r6, r9
    b786:	4645      	mov	r5, r8
    b788:	46de      	mov	lr, fp
    b78a:	b5e0      	push	{r5, r6, r7, lr}
    b78c:	0004      	movs	r4, r0
    b78e:	b083      	sub	sp, #12
    b790:	000d      	movs	r5, r1
    b792:	4692      	mov	sl, r2
    b794:	4699      	mov	r9, r3
    b796:	428b      	cmp	r3, r1
    b798:	d82f      	bhi.n	b7fa <__udivmoddi4+0x7a>
    b79a:	d02c      	beq.n	b7f6 <__udivmoddi4+0x76>
    b79c:	4649      	mov	r1, r9
    b79e:	4650      	mov	r0, sl
    b7a0:	f001 fe56 	bl	d450 <__clzdi2>
    b7a4:	0029      	movs	r1, r5
    b7a6:	0006      	movs	r6, r0
    b7a8:	0020      	movs	r0, r4
    b7aa:	f001 fe51 	bl	d450 <__clzdi2>
    b7ae:	1a33      	subs	r3, r6, r0
    b7b0:	4698      	mov	r8, r3
    b7b2:	3b20      	subs	r3, #32
    b7b4:	469b      	mov	fp, r3
    b7b6:	d500      	bpl.n	b7ba <__udivmoddi4+0x3a>
    b7b8:	e074      	b.n	b8a4 <__udivmoddi4+0x124>
    b7ba:	4653      	mov	r3, sl
    b7bc:	465a      	mov	r2, fp
    b7be:	4093      	lsls	r3, r2
    b7c0:	001f      	movs	r7, r3
    b7c2:	4653      	mov	r3, sl
    b7c4:	4642      	mov	r2, r8
    b7c6:	4093      	lsls	r3, r2
    b7c8:	001e      	movs	r6, r3
    b7ca:	42af      	cmp	r7, r5
    b7cc:	d829      	bhi.n	b822 <__udivmoddi4+0xa2>
    b7ce:	d026      	beq.n	b81e <__udivmoddi4+0x9e>
    b7d0:	465b      	mov	r3, fp
    b7d2:	1ba4      	subs	r4, r4, r6
    b7d4:	41bd      	sbcs	r5, r7
    b7d6:	2b00      	cmp	r3, #0
    b7d8:	da00      	bge.n	b7dc <__udivmoddi4+0x5c>
    b7da:	e079      	b.n	b8d0 <__udivmoddi4+0x150>
    b7dc:	2200      	movs	r2, #0
    b7de:	2300      	movs	r3, #0
    b7e0:	9200      	str	r2, [sp, #0]
    b7e2:	9301      	str	r3, [sp, #4]
    b7e4:	2301      	movs	r3, #1
    b7e6:	465a      	mov	r2, fp
    b7e8:	4093      	lsls	r3, r2
    b7ea:	9301      	str	r3, [sp, #4]
    b7ec:	2301      	movs	r3, #1
    b7ee:	4642      	mov	r2, r8
    b7f0:	4093      	lsls	r3, r2
    b7f2:	9300      	str	r3, [sp, #0]
    b7f4:	e019      	b.n	b82a <__udivmoddi4+0xaa>
    b7f6:	4282      	cmp	r2, r0
    b7f8:	d9d0      	bls.n	b79c <__udivmoddi4+0x1c>
    b7fa:	2200      	movs	r2, #0
    b7fc:	2300      	movs	r3, #0
    b7fe:	9200      	str	r2, [sp, #0]
    b800:	9301      	str	r3, [sp, #4]
    b802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b804:	2b00      	cmp	r3, #0
    b806:	d001      	beq.n	b80c <__udivmoddi4+0x8c>
    b808:	601c      	str	r4, [r3, #0]
    b80a:	605d      	str	r5, [r3, #4]
    b80c:	9800      	ldr	r0, [sp, #0]
    b80e:	9901      	ldr	r1, [sp, #4]
    b810:	b003      	add	sp, #12
    b812:	bc3c      	pop	{r2, r3, r4, r5}
    b814:	4690      	mov	r8, r2
    b816:	4699      	mov	r9, r3
    b818:	46a2      	mov	sl, r4
    b81a:	46ab      	mov	fp, r5
    b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b81e:	42a3      	cmp	r3, r4
    b820:	d9d6      	bls.n	b7d0 <__udivmoddi4+0x50>
    b822:	2200      	movs	r2, #0
    b824:	2300      	movs	r3, #0
    b826:	9200      	str	r2, [sp, #0]
    b828:	9301      	str	r3, [sp, #4]
    b82a:	4643      	mov	r3, r8
    b82c:	2b00      	cmp	r3, #0
    b82e:	d0e8      	beq.n	b802 <__udivmoddi4+0x82>
    b830:	07fb      	lsls	r3, r7, #31
    b832:	0872      	lsrs	r2, r6, #1
    b834:	431a      	orrs	r2, r3
    b836:	4646      	mov	r6, r8
    b838:	087b      	lsrs	r3, r7, #1
    b83a:	e00e      	b.n	b85a <__udivmoddi4+0xda>
    b83c:	42ab      	cmp	r3, r5
    b83e:	d101      	bne.n	b844 <__udivmoddi4+0xc4>
    b840:	42a2      	cmp	r2, r4
    b842:	d80c      	bhi.n	b85e <__udivmoddi4+0xde>
    b844:	1aa4      	subs	r4, r4, r2
    b846:	419d      	sbcs	r5, r3
    b848:	2001      	movs	r0, #1
    b84a:	1924      	adds	r4, r4, r4
    b84c:	416d      	adcs	r5, r5
    b84e:	2100      	movs	r1, #0
    b850:	3e01      	subs	r6, #1
    b852:	1824      	adds	r4, r4, r0
    b854:	414d      	adcs	r5, r1
    b856:	2e00      	cmp	r6, #0
    b858:	d006      	beq.n	b868 <__udivmoddi4+0xe8>
    b85a:	42ab      	cmp	r3, r5
    b85c:	d9ee      	bls.n	b83c <__udivmoddi4+0xbc>
    b85e:	3e01      	subs	r6, #1
    b860:	1924      	adds	r4, r4, r4
    b862:	416d      	adcs	r5, r5
    b864:	2e00      	cmp	r6, #0
    b866:	d1f8      	bne.n	b85a <__udivmoddi4+0xda>
    b868:	465b      	mov	r3, fp
    b86a:	9800      	ldr	r0, [sp, #0]
    b86c:	9901      	ldr	r1, [sp, #4]
    b86e:	1900      	adds	r0, r0, r4
    b870:	4169      	adcs	r1, r5
    b872:	2b00      	cmp	r3, #0
    b874:	db22      	blt.n	b8bc <__udivmoddi4+0x13c>
    b876:	002b      	movs	r3, r5
    b878:	465a      	mov	r2, fp
    b87a:	40d3      	lsrs	r3, r2
    b87c:	002a      	movs	r2, r5
    b87e:	4644      	mov	r4, r8
    b880:	40e2      	lsrs	r2, r4
    b882:	001c      	movs	r4, r3
    b884:	465b      	mov	r3, fp
    b886:	0015      	movs	r5, r2
    b888:	2b00      	cmp	r3, #0
    b88a:	db2c      	blt.n	b8e6 <__udivmoddi4+0x166>
    b88c:	0026      	movs	r6, r4
    b88e:	409e      	lsls	r6, r3
    b890:	0033      	movs	r3, r6
    b892:	0026      	movs	r6, r4
    b894:	4647      	mov	r7, r8
    b896:	40be      	lsls	r6, r7
    b898:	0032      	movs	r2, r6
    b89a:	1a80      	subs	r0, r0, r2
    b89c:	4199      	sbcs	r1, r3
    b89e:	9000      	str	r0, [sp, #0]
    b8a0:	9101      	str	r1, [sp, #4]
    b8a2:	e7ae      	b.n	b802 <__udivmoddi4+0x82>
    b8a4:	4642      	mov	r2, r8
    b8a6:	2320      	movs	r3, #32
    b8a8:	1a9b      	subs	r3, r3, r2
    b8aa:	4652      	mov	r2, sl
    b8ac:	40da      	lsrs	r2, r3
    b8ae:	4641      	mov	r1, r8
    b8b0:	0013      	movs	r3, r2
    b8b2:	464a      	mov	r2, r9
    b8b4:	408a      	lsls	r2, r1
    b8b6:	0017      	movs	r7, r2
    b8b8:	431f      	orrs	r7, r3
    b8ba:	e782      	b.n	b7c2 <__udivmoddi4+0x42>
    b8bc:	4642      	mov	r2, r8
    b8be:	2320      	movs	r3, #32
    b8c0:	1a9b      	subs	r3, r3, r2
    b8c2:	002a      	movs	r2, r5
    b8c4:	4646      	mov	r6, r8
    b8c6:	409a      	lsls	r2, r3
    b8c8:	0023      	movs	r3, r4
    b8ca:	40f3      	lsrs	r3, r6
    b8cc:	4313      	orrs	r3, r2
    b8ce:	e7d5      	b.n	b87c <__udivmoddi4+0xfc>
    b8d0:	4642      	mov	r2, r8
    b8d2:	2320      	movs	r3, #32
    b8d4:	2100      	movs	r1, #0
    b8d6:	1a9b      	subs	r3, r3, r2
    b8d8:	2200      	movs	r2, #0
    b8da:	9100      	str	r1, [sp, #0]
    b8dc:	9201      	str	r2, [sp, #4]
    b8de:	2201      	movs	r2, #1
    b8e0:	40da      	lsrs	r2, r3
    b8e2:	9201      	str	r2, [sp, #4]
    b8e4:	e782      	b.n	b7ec <__udivmoddi4+0x6c>
    b8e6:	4642      	mov	r2, r8
    b8e8:	2320      	movs	r3, #32
    b8ea:	0026      	movs	r6, r4
    b8ec:	1a9b      	subs	r3, r3, r2
    b8ee:	40de      	lsrs	r6, r3
    b8f0:	002f      	movs	r7, r5
    b8f2:	46b4      	mov	ip, r6
    b8f4:	4097      	lsls	r7, r2
    b8f6:	4666      	mov	r6, ip
    b8f8:	003b      	movs	r3, r7
    b8fa:	4333      	orrs	r3, r6
    b8fc:	e7c9      	b.n	b892 <__udivmoddi4+0x112>
    b8fe:	46c0      	nop			; (mov r8, r8)

0000b900 <__aeabi_dadd>:
    b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b902:	4645      	mov	r5, r8
    b904:	46de      	mov	lr, fp
    b906:	4657      	mov	r7, sl
    b908:	464e      	mov	r6, r9
    b90a:	030c      	lsls	r4, r1, #12
    b90c:	b5e0      	push	{r5, r6, r7, lr}
    b90e:	004e      	lsls	r6, r1, #1
    b910:	0fc9      	lsrs	r1, r1, #31
    b912:	4688      	mov	r8, r1
    b914:	000d      	movs	r5, r1
    b916:	0a61      	lsrs	r1, r4, #9
    b918:	0f44      	lsrs	r4, r0, #29
    b91a:	430c      	orrs	r4, r1
    b91c:	00c7      	lsls	r7, r0, #3
    b91e:	0319      	lsls	r1, r3, #12
    b920:	0058      	lsls	r0, r3, #1
    b922:	0fdb      	lsrs	r3, r3, #31
    b924:	469b      	mov	fp, r3
    b926:	0a4b      	lsrs	r3, r1, #9
    b928:	0f51      	lsrs	r1, r2, #29
    b92a:	430b      	orrs	r3, r1
    b92c:	0d76      	lsrs	r6, r6, #21
    b92e:	0d40      	lsrs	r0, r0, #21
    b930:	0019      	movs	r1, r3
    b932:	00d2      	lsls	r2, r2, #3
    b934:	45d8      	cmp	r8, fp
    b936:	d100      	bne.n	b93a <__aeabi_dadd+0x3a>
    b938:	e0ae      	b.n	ba98 <__aeabi_dadd+0x198>
    b93a:	1a35      	subs	r5, r6, r0
    b93c:	2d00      	cmp	r5, #0
    b93e:	dc00      	bgt.n	b942 <__aeabi_dadd+0x42>
    b940:	e0f6      	b.n	bb30 <__aeabi_dadd+0x230>
    b942:	2800      	cmp	r0, #0
    b944:	d10f      	bne.n	b966 <__aeabi_dadd+0x66>
    b946:	4313      	orrs	r3, r2
    b948:	d100      	bne.n	b94c <__aeabi_dadd+0x4c>
    b94a:	e0db      	b.n	bb04 <__aeabi_dadd+0x204>
    b94c:	1e6b      	subs	r3, r5, #1
    b94e:	2b00      	cmp	r3, #0
    b950:	d000      	beq.n	b954 <__aeabi_dadd+0x54>
    b952:	e137      	b.n	bbc4 <__aeabi_dadd+0x2c4>
    b954:	1aba      	subs	r2, r7, r2
    b956:	4297      	cmp	r7, r2
    b958:	41bf      	sbcs	r7, r7
    b95a:	1a64      	subs	r4, r4, r1
    b95c:	427f      	negs	r7, r7
    b95e:	1be4      	subs	r4, r4, r7
    b960:	2601      	movs	r6, #1
    b962:	0017      	movs	r7, r2
    b964:	e024      	b.n	b9b0 <__aeabi_dadd+0xb0>
    b966:	4bc6      	ldr	r3, [pc, #792]	; (bc80 <__aeabi_dadd+0x380>)
    b968:	429e      	cmp	r6, r3
    b96a:	d04d      	beq.n	ba08 <__aeabi_dadd+0x108>
    b96c:	2380      	movs	r3, #128	; 0x80
    b96e:	041b      	lsls	r3, r3, #16
    b970:	4319      	orrs	r1, r3
    b972:	2d38      	cmp	r5, #56	; 0x38
    b974:	dd00      	ble.n	b978 <__aeabi_dadd+0x78>
    b976:	e107      	b.n	bb88 <__aeabi_dadd+0x288>
    b978:	2d1f      	cmp	r5, #31
    b97a:	dd00      	ble.n	b97e <__aeabi_dadd+0x7e>
    b97c:	e138      	b.n	bbf0 <__aeabi_dadd+0x2f0>
    b97e:	2020      	movs	r0, #32
    b980:	1b43      	subs	r3, r0, r5
    b982:	469a      	mov	sl, r3
    b984:	000b      	movs	r3, r1
    b986:	4650      	mov	r0, sl
    b988:	4083      	lsls	r3, r0
    b98a:	4699      	mov	r9, r3
    b98c:	0013      	movs	r3, r2
    b98e:	4648      	mov	r0, r9
    b990:	40eb      	lsrs	r3, r5
    b992:	4318      	orrs	r0, r3
    b994:	0003      	movs	r3, r0
    b996:	4650      	mov	r0, sl
    b998:	4082      	lsls	r2, r0
    b99a:	1e50      	subs	r0, r2, #1
    b99c:	4182      	sbcs	r2, r0
    b99e:	40e9      	lsrs	r1, r5
    b9a0:	431a      	orrs	r2, r3
    b9a2:	1aba      	subs	r2, r7, r2
    b9a4:	1a61      	subs	r1, r4, r1
    b9a6:	4297      	cmp	r7, r2
    b9a8:	41a4      	sbcs	r4, r4
    b9aa:	0017      	movs	r7, r2
    b9ac:	4264      	negs	r4, r4
    b9ae:	1b0c      	subs	r4, r1, r4
    b9b0:	0223      	lsls	r3, r4, #8
    b9b2:	d562      	bpl.n	ba7a <__aeabi_dadd+0x17a>
    b9b4:	0264      	lsls	r4, r4, #9
    b9b6:	0a65      	lsrs	r5, r4, #9
    b9b8:	2d00      	cmp	r5, #0
    b9ba:	d100      	bne.n	b9be <__aeabi_dadd+0xbe>
    b9bc:	e0df      	b.n	bb7e <__aeabi_dadd+0x27e>
    b9be:	0028      	movs	r0, r5
    b9c0:	f7fa fffe 	bl	69c0 <__clzsi2>
    b9c4:	0003      	movs	r3, r0
    b9c6:	3b08      	subs	r3, #8
    b9c8:	2b1f      	cmp	r3, #31
    b9ca:	dd00      	ble.n	b9ce <__aeabi_dadd+0xce>
    b9cc:	e0d2      	b.n	bb74 <__aeabi_dadd+0x274>
    b9ce:	2220      	movs	r2, #32
    b9d0:	003c      	movs	r4, r7
    b9d2:	1ad2      	subs	r2, r2, r3
    b9d4:	409d      	lsls	r5, r3
    b9d6:	40d4      	lsrs	r4, r2
    b9d8:	409f      	lsls	r7, r3
    b9da:	4325      	orrs	r5, r4
    b9dc:	429e      	cmp	r6, r3
    b9de:	dd00      	ble.n	b9e2 <__aeabi_dadd+0xe2>
    b9e0:	e0c4      	b.n	bb6c <__aeabi_dadd+0x26c>
    b9e2:	1b9e      	subs	r6, r3, r6
    b9e4:	1c73      	adds	r3, r6, #1
    b9e6:	2b1f      	cmp	r3, #31
    b9e8:	dd00      	ble.n	b9ec <__aeabi_dadd+0xec>
    b9ea:	e0f1      	b.n	bbd0 <__aeabi_dadd+0x2d0>
    b9ec:	2220      	movs	r2, #32
    b9ee:	0038      	movs	r0, r7
    b9f0:	0029      	movs	r1, r5
    b9f2:	1ad2      	subs	r2, r2, r3
    b9f4:	40d8      	lsrs	r0, r3
    b9f6:	4091      	lsls	r1, r2
    b9f8:	4097      	lsls	r7, r2
    b9fa:	002c      	movs	r4, r5
    b9fc:	4301      	orrs	r1, r0
    b9fe:	1e78      	subs	r0, r7, #1
    ba00:	4187      	sbcs	r7, r0
    ba02:	40dc      	lsrs	r4, r3
    ba04:	2600      	movs	r6, #0
    ba06:	430f      	orrs	r7, r1
    ba08:	077b      	lsls	r3, r7, #29
    ba0a:	d009      	beq.n	ba20 <__aeabi_dadd+0x120>
    ba0c:	230f      	movs	r3, #15
    ba0e:	403b      	ands	r3, r7
    ba10:	2b04      	cmp	r3, #4
    ba12:	d005      	beq.n	ba20 <__aeabi_dadd+0x120>
    ba14:	1d3b      	adds	r3, r7, #4
    ba16:	42bb      	cmp	r3, r7
    ba18:	41bf      	sbcs	r7, r7
    ba1a:	427f      	negs	r7, r7
    ba1c:	19e4      	adds	r4, r4, r7
    ba1e:	001f      	movs	r7, r3
    ba20:	0223      	lsls	r3, r4, #8
    ba22:	d52c      	bpl.n	ba7e <__aeabi_dadd+0x17e>
    ba24:	4b96      	ldr	r3, [pc, #600]	; (bc80 <__aeabi_dadd+0x380>)
    ba26:	3601      	adds	r6, #1
    ba28:	429e      	cmp	r6, r3
    ba2a:	d100      	bne.n	ba2e <__aeabi_dadd+0x12e>
    ba2c:	e09a      	b.n	bb64 <__aeabi_dadd+0x264>
    ba2e:	4645      	mov	r5, r8
    ba30:	4b94      	ldr	r3, [pc, #592]	; (bc84 <__aeabi_dadd+0x384>)
    ba32:	08ff      	lsrs	r7, r7, #3
    ba34:	401c      	ands	r4, r3
    ba36:	0760      	lsls	r0, r4, #29
    ba38:	0576      	lsls	r6, r6, #21
    ba3a:	0264      	lsls	r4, r4, #9
    ba3c:	4307      	orrs	r7, r0
    ba3e:	0b24      	lsrs	r4, r4, #12
    ba40:	0d76      	lsrs	r6, r6, #21
    ba42:	2100      	movs	r1, #0
    ba44:	0324      	lsls	r4, r4, #12
    ba46:	0b23      	lsrs	r3, r4, #12
    ba48:	0d0c      	lsrs	r4, r1, #20
    ba4a:	4a8f      	ldr	r2, [pc, #572]	; (bc88 <__aeabi_dadd+0x388>)
    ba4c:	0524      	lsls	r4, r4, #20
    ba4e:	431c      	orrs	r4, r3
    ba50:	4014      	ands	r4, r2
    ba52:	0533      	lsls	r3, r6, #20
    ba54:	4323      	orrs	r3, r4
    ba56:	005b      	lsls	r3, r3, #1
    ba58:	07ed      	lsls	r5, r5, #31
    ba5a:	085b      	lsrs	r3, r3, #1
    ba5c:	432b      	orrs	r3, r5
    ba5e:	0038      	movs	r0, r7
    ba60:	0019      	movs	r1, r3
    ba62:	bc3c      	pop	{r2, r3, r4, r5}
    ba64:	4690      	mov	r8, r2
    ba66:	4699      	mov	r9, r3
    ba68:	46a2      	mov	sl, r4
    ba6a:	46ab      	mov	fp, r5
    ba6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba6e:	4664      	mov	r4, ip
    ba70:	4304      	orrs	r4, r0
    ba72:	d100      	bne.n	ba76 <__aeabi_dadd+0x176>
    ba74:	e211      	b.n	be9a <__aeabi_dadd+0x59a>
    ba76:	0004      	movs	r4, r0
    ba78:	4667      	mov	r7, ip
    ba7a:	077b      	lsls	r3, r7, #29
    ba7c:	d1c6      	bne.n	ba0c <__aeabi_dadd+0x10c>
    ba7e:	4645      	mov	r5, r8
    ba80:	0760      	lsls	r0, r4, #29
    ba82:	08ff      	lsrs	r7, r7, #3
    ba84:	4307      	orrs	r7, r0
    ba86:	08e4      	lsrs	r4, r4, #3
    ba88:	4b7d      	ldr	r3, [pc, #500]	; (bc80 <__aeabi_dadd+0x380>)
    ba8a:	429e      	cmp	r6, r3
    ba8c:	d030      	beq.n	baf0 <__aeabi_dadd+0x1f0>
    ba8e:	0324      	lsls	r4, r4, #12
    ba90:	0576      	lsls	r6, r6, #21
    ba92:	0b24      	lsrs	r4, r4, #12
    ba94:	0d76      	lsrs	r6, r6, #21
    ba96:	e7d4      	b.n	ba42 <__aeabi_dadd+0x142>
    ba98:	1a33      	subs	r3, r6, r0
    ba9a:	469a      	mov	sl, r3
    ba9c:	2b00      	cmp	r3, #0
    ba9e:	dd78      	ble.n	bb92 <__aeabi_dadd+0x292>
    baa0:	2800      	cmp	r0, #0
    baa2:	d031      	beq.n	bb08 <__aeabi_dadd+0x208>
    baa4:	4876      	ldr	r0, [pc, #472]	; (bc80 <__aeabi_dadd+0x380>)
    baa6:	4286      	cmp	r6, r0
    baa8:	d0ae      	beq.n	ba08 <__aeabi_dadd+0x108>
    baaa:	2080      	movs	r0, #128	; 0x80
    baac:	0400      	lsls	r0, r0, #16
    baae:	4301      	orrs	r1, r0
    bab0:	4653      	mov	r3, sl
    bab2:	2b38      	cmp	r3, #56	; 0x38
    bab4:	dc00      	bgt.n	bab8 <__aeabi_dadd+0x1b8>
    bab6:	e0e9      	b.n	bc8c <__aeabi_dadd+0x38c>
    bab8:	430a      	orrs	r2, r1
    baba:	1e51      	subs	r1, r2, #1
    babc:	418a      	sbcs	r2, r1
    babe:	2100      	movs	r1, #0
    bac0:	19d2      	adds	r2, r2, r7
    bac2:	42ba      	cmp	r2, r7
    bac4:	41bf      	sbcs	r7, r7
    bac6:	1909      	adds	r1, r1, r4
    bac8:	427c      	negs	r4, r7
    baca:	0017      	movs	r7, r2
    bacc:	190c      	adds	r4, r1, r4
    bace:	0223      	lsls	r3, r4, #8
    bad0:	d5d3      	bpl.n	ba7a <__aeabi_dadd+0x17a>
    bad2:	4b6b      	ldr	r3, [pc, #428]	; (bc80 <__aeabi_dadd+0x380>)
    bad4:	3601      	adds	r6, #1
    bad6:	429e      	cmp	r6, r3
    bad8:	d100      	bne.n	badc <__aeabi_dadd+0x1dc>
    bada:	e13a      	b.n	bd52 <__aeabi_dadd+0x452>
    badc:	2001      	movs	r0, #1
    bade:	4b69      	ldr	r3, [pc, #420]	; (bc84 <__aeabi_dadd+0x384>)
    bae0:	401c      	ands	r4, r3
    bae2:	087b      	lsrs	r3, r7, #1
    bae4:	4007      	ands	r7, r0
    bae6:	431f      	orrs	r7, r3
    bae8:	07e0      	lsls	r0, r4, #31
    baea:	4307      	orrs	r7, r0
    baec:	0864      	lsrs	r4, r4, #1
    baee:	e78b      	b.n	ba08 <__aeabi_dadd+0x108>
    baf0:	0023      	movs	r3, r4
    baf2:	433b      	orrs	r3, r7
    baf4:	d100      	bne.n	baf8 <__aeabi_dadd+0x1f8>
    baf6:	e1cb      	b.n	be90 <__aeabi_dadd+0x590>
    baf8:	2280      	movs	r2, #128	; 0x80
    bafa:	0312      	lsls	r2, r2, #12
    bafc:	4314      	orrs	r4, r2
    bafe:	0324      	lsls	r4, r4, #12
    bb00:	0b24      	lsrs	r4, r4, #12
    bb02:	e79e      	b.n	ba42 <__aeabi_dadd+0x142>
    bb04:	002e      	movs	r6, r5
    bb06:	e77f      	b.n	ba08 <__aeabi_dadd+0x108>
    bb08:	0008      	movs	r0, r1
    bb0a:	4310      	orrs	r0, r2
    bb0c:	d100      	bne.n	bb10 <__aeabi_dadd+0x210>
    bb0e:	e0b4      	b.n	bc7a <__aeabi_dadd+0x37a>
    bb10:	1e58      	subs	r0, r3, #1
    bb12:	2800      	cmp	r0, #0
    bb14:	d000      	beq.n	bb18 <__aeabi_dadd+0x218>
    bb16:	e0de      	b.n	bcd6 <__aeabi_dadd+0x3d6>
    bb18:	18ba      	adds	r2, r7, r2
    bb1a:	42ba      	cmp	r2, r7
    bb1c:	419b      	sbcs	r3, r3
    bb1e:	1864      	adds	r4, r4, r1
    bb20:	425b      	negs	r3, r3
    bb22:	18e4      	adds	r4, r4, r3
    bb24:	0017      	movs	r7, r2
    bb26:	2601      	movs	r6, #1
    bb28:	0223      	lsls	r3, r4, #8
    bb2a:	d5a6      	bpl.n	ba7a <__aeabi_dadd+0x17a>
    bb2c:	2602      	movs	r6, #2
    bb2e:	e7d5      	b.n	badc <__aeabi_dadd+0x1dc>
    bb30:	2d00      	cmp	r5, #0
    bb32:	d16e      	bne.n	bc12 <__aeabi_dadd+0x312>
    bb34:	1c70      	adds	r0, r6, #1
    bb36:	0540      	lsls	r0, r0, #21
    bb38:	0d40      	lsrs	r0, r0, #21
    bb3a:	2801      	cmp	r0, #1
    bb3c:	dc00      	bgt.n	bb40 <__aeabi_dadd+0x240>
    bb3e:	e0f9      	b.n	bd34 <__aeabi_dadd+0x434>
    bb40:	1ab8      	subs	r0, r7, r2
    bb42:	4684      	mov	ip, r0
    bb44:	4287      	cmp	r7, r0
    bb46:	4180      	sbcs	r0, r0
    bb48:	1ae5      	subs	r5, r4, r3
    bb4a:	4240      	negs	r0, r0
    bb4c:	1a2d      	subs	r5, r5, r0
    bb4e:	0228      	lsls	r0, r5, #8
    bb50:	d400      	bmi.n	bb54 <__aeabi_dadd+0x254>
    bb52:	e089      	b.n	bc68 <__aeabi_dadd+0x368>
    bb54:	1bd7      	subs	r7, r2, r7
    bb56:	42ba      	cmp	r2, r7
    bb58:	4192      	sbcs	r2, r2
    bb5a:	1b1c      	subs	r4, r3, r4
    bb5c:	4252      	negs	r2, r2
    bb5e:	1aa5      	subs	r5, r4, r2
    bb60:	46d8      	mov	r8, fp
    bb62:	e729      	b.n	b9b8 <__aeabi_dadd+0xb8>
    bb64:	4645      	mov	r5, r8
    bb66:	2400      	movs	r4, #0
    bb68:	2700      	movs	r7, #0
    bb6a:	e76a      	b.n	ba42 <__aeabi_dadd+0x142>
    bb6c:	4c45      	ldr	r4, [pc, #276]	; (bc84 <__aeabi_dadd+0x384>)
    bb6e:	1af6      	subs	r6, r6, r3
    bb70:	402c      	ands	r4, r5
    bb72:	e749      	b.n	ba08 <__aeabi_dadd+0x108>
    bb74:	003d      	movs	r5, r7
    bb76:	3828      	subs	r0, #40	; 0x28
    bb78:	4085      	lsls	r5, r0
    bb7a:	2700      	movs	r7, #0
    bb7c:	e72e      	b.n	b9dc <__aeabi_dadd+0xdc>
    bb7e:	0038      	movs	r0, r7
    bb80:	f7fa ff1e 	bl	69c0 <__clzsi2>
    bb84:	3020      	adds	r0, #32
    bb86:	e71d      	b.n	b9c4 <__aeabi_dadd+0xc4>
    bb88:	430a      	orrs	r2, r1
    bb8a:	1e51      	subs	r1, r2, #1
    bb8c:	418a      	sbcs	r2, r1
    bb8e:	2100      	movs	r1, #0
    bb90:	e707      	b.n	b9a2 <__aeabi_dadd+0xa2>
    bb92:	2b00      	cmp	r3, #0
    bb94:	d000      	beq.n	bb98 <__aeabi_dadd+0x298>
    bb96:	e0f3      	b.n	bd80 <__aeabi_dadd+0x480>
    bb98:	1c70      	adds	r0, r6, #1
    bb9a:	0543      	lsls	r3, r0, #21
    bb9c:	0d5b      	lsrs	r3, r3, #21
    bb9e:	2b01      	cmp	r3, #1
    bba0:	dc00      	bgt.n	bba4 <__aeabi_dadd+0x2a4>
    bba2:	e0ad      	b.n	bd00 <__aeabi_dadd+0x400>
    bba4:	4b36      	ldr	r3, [pc, #216]	; (bc80 <__aeabi_dadd+0x380>)
    bba6:	4298      	cmp	r0, r3
    bba8:	d100      	bne.n	bbac <__aeabi_dadd+0x2ac>
    bbaa:	e0d1      	b.n	bd50 <__aeabi_dadd+0x450>
    bbac:	18ba      	adds	r2, r7, r2
    bbae:	42ba      	cmp	r2, r7
    bbb0:	41bf      	sbcs	r7, r7
    bbb2:	1864      	adds	r4, r4, r1
    bbb4:	427f      	negs	r7, r7
    bbb6:	19e4      	adds	r4, r4, r7
    bbb8:	07e7      	lsls	r7, r4, #31
    bbba:	0852      	lsrs	r2, r2, #1
    bbbc:	4317      	orrs	r7, r2
    bbbe:	0864      	lsrs	r4, r4, #1
    bbc0:	0006      	movs	r6, r0
    bbc2:	e721      	b.n	ba08 <__aeabi_dadd+0x108>
    bbc4:	482e      	ldr	r0, [pc, #184]	; (bc80 <__aeabi_dadd+0x380>)
    bbc6:	4285      	cmp	r5, r0
    bbc8:	d100      	bne.n	bbcc <__aeabi_dadd+0x2cc>
    bbca:	e093      	b.n	bcf4 <__aeabi_dadd+0x3f4>
    bbcc:	001d      	movs	r5, r3
    bbce:	e6d0      	b.n	b972 <__aeabi_dadd+0x72>
    bbd0:	0029      	movs	r1, r5
    bbd2:	3e1f      	subs	r6, #31
    bbd4:	40f1      	lsrs	r1, r6
    bbd6:	2b20      	cmp	r3, #32
    bbd8:	d100      	bne.n	bbdc <__aeabi_dadd+0x2dc>
    bbda:	e08d      	b.n	bcf8 <__aeabi_dadd+0x3f8>
    bbdc:	2240      	movs	r2, #64	; 0x40
    bbde:	1ad3      	subs	r3, r2, r3
    bbe0:	409d      	lsls	r5, r3
    bbe2:	432f      	orrs	r7, r5
    bbe4:	1e7d      	subs	r5, r7, #1
    bbe6:	41af      	sbcs	r7, r5
    bbe8:	2400      	movs	r4, #0
    bbea:	430f      	orrs	r7, r1
    bbec:	2600      	movs	r6, #0
    bbee:	e744      	b.n	ba7a <__aeabi_dadd+0x17a>
    bbf0:	002b      	movs	r3, r5
    bbf2:	0008      	movs	r0, r1
    bbf4:	3b20      	subs	r3, #32
    bbf6:	40d8      	lsrs	r0, r3
    bbf8:	0003      	movs	r3, r0
    bbfa:	2d20      	cmp	r5, #32
    bbfc:	d100      	bne.n	bc00 <__aeabi_dadd+0x300>
    bbfe:	e07d      	b.n	bcfc <__aeabi_dadd+0x3fc>
    bc00:	2040      	movs	r0, #64	; 0x40
    bc02:	1b45      	subs	r5, r0, r5
    bc04:	40a9      	lsls	r1, r5
    bc06:	430a      	orrs	r2, r1
    bc08:	1e51      	subs	r1, r2, #1
    bc0a:	418a      	sbcs	r2, r1
    bc0c:	2100      	movs	r1, #0
    bc0e:	431a      	orrs	r2, r3
    bc10:	e6c7      	b.n	b9a2 <__aeabi_dadd+0xa2>
    bc12:	2e00      	cmp	r6, #0
    bc14:	d050      	beq.n	bcb8 <__aeabi_dadd+0x3b8>
    bc16:	4e1a      	ldr	r6, [pc, #104]	; (bc80 <__aeabi_dadd+0x380>)
    bc18:	42b0      	cmp	r0, r6
    bc1a:	d057      	beq.n	bccc <__aeabi_dadd+0x3cc>
    bc1c:	2680      	movs	r6, #128	; 0x80
    bc1e:	426b      	negs	r3, r5
    bc20:	4699      	mov	r9, r3
    bc22:	0436      	lsls	r6, r6, #16
    bc24:	4334      	orrs	r4, r6
    bc26:	464b      	mov	r3, r9
    bc28:	2b38      	cmp	r3, #56	; 0x38
    bc2a:	dd00      	ble.n	bc2e <__aeabi_dadd+0x32e>
    bc2c:	e0d6      	b.n	bddc <__aeabi_dadd+0x4dc>
    bc2e:	2b1f      	cmp	r3, #31
    bc30:	dd00      	ble.n	bc34 <__aeabi_dadd+0x334>
    bc32:	e135      	b.n	bea0 <__aeabi_dadd+0x5a0>
    bc34:	2620      	movs	r6, #32
    bc36:	1af5      	subs	r5, r6, r3
    bc38:	0026      	movs	r6, r4
    bc3a:	40ae      	lsls	r6, r5
    bc3c:	46b2      	mov	sl, r6
    bc3e:	003e      	movs	r6, r7
    bc40:	40de      	lsrs	r6, r3
    bc42:	46ac      	mov	ip, r5
    bc44:	0035      	movs	r5, r6
    bc46:	4656      	mov	r6, sl
    bc48:	432e      	orrs	r6, r5
    bc4a:	4665      	mov	r5, ip
    bc4c:	40af      	lsls	r7, r5
    bc4e:	1e7d      	subs	r5, r7, #1
    bc50:	41af      	sbcs	r7, r5
    bc52:	40dc      	lsrs	r4, r3
    bc54:	4337      	orrs	r7, r6
    bc56:	1bd7      	subs	r7, r2, r7
    bc58:	42ba      	cmp	r2, r7
    bc5a:	4192      	sbcs	r2, r2
    bc5c:	1b0c      	subs	r4, r1, r4
    bc5e:	4252      	negs	r2, r2
    bc60:	1aa4      	subs	r4, r4, r2
    bc62:	0006      	movs	r6, r0
    bc64:	46d8      	mov	r8, fp
    bc66:	e6a3      	b.n	b9b0 <__aeabi_dadd+0xb0>
    bc68:	4664      	mov	r4, ip
    bc6a:	4667      	mov	r7, ip
    bc6c:	432c      	orrs	r4, r5
    bc6e:	d000      	beq.n	bc72 <__aeabi_dadd+0x372>
    bc70:	e6a2      	b.n	b9b8 <__aeabi_dadd+0xb8>
    bc72:	2500      	movs	r5, #0
    bc74:	2600      	movs	r6, #0
    bc76:	2700      	movs	r7, #0
    bc78:	e706      	b.n	ba88 <__aeabi_dadd+0x188>
    bc7a:	001e      	movs	r6, r3
    bc7c:	e6c4      	b.n	ba08 <__aeabi_dadd+0x108>
    bc7e:	46c0      	nop			; (mov r8, r8)
    bc80:	000007ff 	.word	0x000007ff
    bc84:	ff7fffff 	.word	0xff7fffff
    bc88:	800fffff 	.word	0x800fffff
    bc8c:	2b1f      	cmp	r3, #31
    bc8e:	dc63      	bgt.n	bd58 <__aeabi_dadd+0x458>
    bc90:	2020      	movs	r0, #32
    bc92:	1ac3      	subs	r3, r0, r3
    bc94:	0008      	movs	r0, r1
    bc96:	4098      	lsls	r0, r3
    bc98:	469c      	mov	ip, r3
    bc9a:	4683      	mov	fp, r0
    bc9c:	4653      	mov	r3, sl
    bc9e:	0010      	movs	r0, r2
    bca0:	40d8      	lsrs	r0, r3
    bca2:	0003      	movs	r3, r0
    bca4:	4658      	mov	r0, fp
    bca6:	4318      	orrs	r0, r3
    bca8:	4663      	mov	r3, ip
    bcaa:	409a      	lsls	r2, r3
    bcac:	1e53      	subs	r3, r2, #1
    bcae:	419a      	sbcs	r2, r3
    bcb0:	4653      	mov	r3, sl
    bcb2:	4302      	orrs	r2, r0
    bcb4:	40d9      	lsrs	r1, r3
    bcb6:	e703      	b.n	bac0 <__aeabi_dadd+0x1c0>
    bcb8:	0026      	movs	r6, r4
    bcba:	433e      	orrs	r6, r7
    bcbc:	d006      	beq.n	bccc <__aeabi_dadd+0x3cc>
    bcbe:	43eb      	mvns	r3, r5
    bcc0:	4699      	mov	r9, r3
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d0c7      	beq.n	bc56 <__aeabi_dadd+0x356>
    bcc6:	4e94      	ldr	r6, [pc, #592]	; (bf18 <__aeabi_dadd+0x618>)
    bcc8:	42b0      	cmp	r0, r6
    bcca:	d1ac      	bne.n	bc26 <__aeabi_dadd+0x326>
    bccc:	000c      	movs	r4, r1
    bcce:	0017      	movs	r7, r2
    bcd0:	0006      	movs	r6, r0
    bcd2:	46d8      	mov	r8, fp
    bcd4:	e698      	b.n	ba08 <__aeabi_dadd+0x108>
    bcd6:	4b90      	ldr	r3, [pc, #576]	; (bf18 <__aeabi_dadd+0x618>)
    bcd8:	459a      	cmp	sl, r3
    bcda:	d00b      	beq.n	bcf4 <__aeabi_dadd+0x3f4>
    bcdc:	4682      	mov	sl, r0
    bcde:	e6e7      	b.n	bab0 <__aeabi_dadd+0x1b0>
    bce0:	2800      	cmp	r0, #0
    bce2:	d000      	beq.n	bce6 <__aeabi_dadd+0x3e6>
    bce4:	e09e      	b.n	be24 <__aeabi_dadd+0x524>
    bce6:	0018      	movs	r0, r3
    bce8:	4310      	orrs	r0, r2
    bcea:	d100      	bne.n	bcee <__aeabi_dadd+0x3ee>
    bcec:	e0e9      	b.n	bec2 <__aeabi_dadd+0x5c2>
    bcee:	001c      	movs	r4, r3
    bcf0:	0017      	movs	r7, r2
    bcf2:	46d8      	mov	r8, fp
    bcf4:	4e88      	ldr	r6, [pc, #544]	; (bf18 <__aeabi_dadd+0x618>)
    bcf6:	e687      	b.n	ba08 <__aeabi_dadd+0x108>
    bcf8:	2500      	movs	r5, #0
    bcfa:	e772      	b.n	bbe2 <__aeabi_dadd+0x2e2>
    bcfc:	2100      	movs	r1, #0
    bcfe:	e782      	b.n	bc06 <__aeabi_dadd+0x306>
    bd00:	0023      	movs	r3, r4
    bd02:	433b      	orrs	r3, r7
    bd04:	2e00      	cmp	r6, #0
    bd06:	d000      	beq.n	bd0a <__aeabi_dadd+0x40a>
    bd08:	e0ab      	b.n	be62 <__aeabi_dadd+0x562>
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d100      	bne.n	bd10 <__aeabi_dadd+0x410>
    bd0e:	e0e7      	b.n	bee0 <__aeabi_dadd+0x5e0>
    bd10:	000b      	movs	r3, r1
    bd12:	4313      	orrs	r3, r2
    bd14:	d100      	bne.n	bd18 <__aeabi_dadd+0x418>
    bd16:	e677      	b.n	ba08 <__aeabi_dadd+0x108>
    bd18:	18ba      	adds	r2, r7, r2
    bd1a:	42ba      	cmp	r2, r7
    bd1c:	41bf      	sbcs	r7, r7
    bd1e:	1864      	adds	r4, r4, r1
    bd20:	427f      	negs	r7, r7
    bd22:	19e4      	adds	r4, r4, r7
    bd24:	0223      	lsls	r3, r4, #8
    bd26:	d400      	bmi.n	bd2a <__aeabi_dadd+0x42a>
    bd28:	e0f2      	b.n	bf10 <__aeabi_dadd+0x610>
    bd2a:	4b7c      	ldr	r3, [pc, #496]	; (bf1c <__aeabi_dadd+0x61c>)
    bd2c:	0017      	movs	r7, r2
    bd2e:	401c      	ands	r4, r3
    bd30:	0006      	movs	r6, r0
    bd32:	e669      	b.n	ba08 <__aeabi_dadd+0x108>
    bd34:	0020      	movs	r0, r4
    bd36:	4338      	orrs	r0, r7
    bd38:	2e00      	cmp	r6, #0
    bd3a:	d1d1      	bne.n	bce0 <__aeabi_dadd+0x3e0>
    bd3c:	2800      	cmp	r0, #0
    bd3e:	d15b      	bne.n	bdf8 <__aeabi_dadd+0x4f8>
    bd40:	001c      	movs	r4, r3
    bd42:	4314      	orrs	r4, r2
    bd44:	d100      	bne.n	bd48 <__aeabi_dadd+0x448>
    bd46:	e0a8      	b.n	be9a <__aeabi_dadd+0x59a>
    bd48:	001c      	movs	r4, r3
    bd4a:	0017      	movs	r7, r2
    bd4c:	46d8      	mov	r8, fp
    bd4e:	e65b      	b.n	ba08 <__aeabi_dadd+0x108>
    bd50:	0006      	movs	r6, r0
    bd52:	2400      	movs	r4, #0
    bd54:	2700      	movs	r7, #0
    bd56:	e697      	b.n	ba88 <__aeabi_dadd+0x188>
    bd58:	4650      	mov	r0, sl
    bd5a:	000b      	movs	r3, r1
    bd5c:	3820      	subs	r0, #32
    bd5e:	40c3      	lsrs	r3, r0
    bd60:	4699      	mov	r9, r3
    bd62:	4653      	mov	r3, sl
    bd64:	2b20      	cmp	r3, #32
    bd66:	d100      	bne.n	bd6a <__aeabi_dadd+0x46a>
    bd68:	e095      	b.n	be96 <__aeabi_dadd+0x596>
    bd6a:	2340      	movs	r3, #64	; 0x40
    bd6c:	4650      	mov	r0, sl
    bd6e:	1a1b      	subs	r3, r3, r0
    bd70:	4099      	lsls	r1, r3
    bd72:	430a      	orrs	r2, r1
    bd74:	1e51      	subs	r1, r2, #1
    bd76:	418a      	sbcs	r2, r1
    bd78:	464b      	mov	r3, r9
    bd7a:	2100      	movs	r1, #0
    bd7c:	431a      	orrs	r2, r3
    bd7e:	e69f      	b.n	bac0 <__aeabi_dadd+0x1c0>
    bd80:	2e00      	cmp	r6, #0
    bd82:	d130      	bne.n	bde6 <__aeabi_dadd+0x4e6>
    bd84:	0026      	movs	r6, r4
    bd86:	433e      	orrs	r6, r7
    bd88:	d067      	beq.n	be5a <__aeabi_dadd+0x55a>
    bd8a:	43db      	mvns	r3, r3
    bd8c:	469a      	mov	sl, r3
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d01c      	beq.n	bdcc <__aeabi_dadd+0x4cc>
    bd92:	4e61      	ldr	r6, [pc, #388]	; (bf18 <__aeabi_dadd+0x618>)
    bd94:	42b0      	cmp	r0, r6
    bd96:	d060      	beq.n	be5a <__aeabi_dadd+0x55a>
    bd98:	4653      	mov	r3, sl
    bd9a:	2b38      	cmp	r3, #56	; 0x38
    bd9c:	dd00      	ble.n	bda0 <__aeabi_dadd+0x4a0>
    bd9e:	e096      	b.n	bece <__aeabi_dadd+0x5ce>
    bda0:	2b1f      	cmp	r3, #31
    bda2:	dd00      	ble.n	bda6 <__aeabi_dadd+0x4a6>
    bda4:	e09f      	b.n	bee6 <__aeabi_dadd+0x5e6>
    bda6:	2620      	movs	r6, #32
    bda8:	1af3      	subs	r3, r6, r3
    bdaa:	0026      	movs	r6, r4
    bdac:	409e      	lsls	r6, r3
    bdae:	469c      	mov	ip, r3
    bdb0:	46b3      	mov	fp, r6
    bdb2:	4653      	mov	r3, sl
    bdb4:	003e      	movs	r6, r7
    bdb6:	40de      	lsrs	r6, r3
    bdb8:	0033      	movs	r3, r6
    bdba:	465e      	mov	r6, fp
    bdbc:	431e      	orrs	r6, r3
    bdbe:	4663      	mov	r3, ip
    bdc0:	409f      	lsls	r7, r3
    bdc2:	1e7b      	subs	r3, r7, #1
    bdc4:	419f      	sbcs	r7, r3
    bdc6:	4653      	mov	r3, sl
    bdc8:	40dc      	lsrs	r4, r3
    bdca:	4337      	orrs	r7, r6
    bdcc:	18bf      	adds	r7, r7, r2
    bdce:	4297      	cmp	r7, r2
    bdd0:	4192      	sbcs	r2, r2
    bdd2:	1864      	adds	r4, r4, r1
    bdd4:	4252      	negs	r2, r2
    bdd6:	18a4      	adds	r4, r4, r2
    bdd8:	0006      	movs	r6, r0
    bdda:	e678      	b.n	bace <__aeabi_dadd+0x1ce>
    bddc:	4327      	orrs	r7, r4
    bdde:	1e7c      	subs	r4, r7, #1
    bde0:	41a7      	sbcs	r7, r4
    bde2:	2400      	movs	r4, #0
    bde4:	e737      	b.n	bc56 <__aeabi_dadd+0x356>
    bde6:	4e4c      	ldr	r6, [pc, #304]	; (bf18 <__aeabi_dadd+0x618>)
    bde8:	42b0      	cmp	r0, r6
    bdea:	d036      	beq.n	be5a <__aeabi_dadd+0x55a>
    bdec:	2680      	movs	r6, #128	; 0x80
    bdee:	425b      	negs	r3, r3
    bdf0:	0436      	lsls	r6, r6, #16
    bdf2:	469a      	mov	sl, r3
    bdf4:	4334      	orrs	r4, r6
    bdf6:	e7cf      	b.n	bd98 <__aeabi_dadd+0x498>
    bdf8:	0018      	movs	r0, r3
    bdfa:	4310      	orrs	r0, r2
    bdfc:	d100      	bne.n	be00 <__aeabi_dadd+0x500>
    bdfe:	e603      	b.n	ba08 <__aeabi_dadd+0x108>
    be00:	1ab8      	subs	r0, r7, r2
    be02:	4684      	mov	ip, r0
    be04:	4567      	cmp	r7, ip
    be06:	41ad      	sbcs	r5, r5
    be08:	1ae0      	subs	r0, r4, r3
    be0a:	426d      	negs	r5, r5
    be0c:	1b40      	subs	r0, r0, r5
    be0e:	0205      	lsls	r5, r0, #8
    be10:	d400      	bmi.n	be14 <__aeabi_dadd+0x514>
    be12:	e62c      	b.n	ba6e <__aeabi_dadd+0x16e>
    be14:	1bd7      	subs	r7, r2, r7
    be16:	42ba      	cmp	r2, r7
    be18:	4192      	sbcs	r2, r2
    be1a:	1b1c      	subs	r4, r3, r4
    be1c:	4252      	negs	r2, r2
    be1e:	1aa4      	subs	r4, r4, r2
    be20:	46d8      	mov	r8, fp
    be22:	e5f1      	b.n	ba08 <__aeabi_dadd+0x108>
    be24:	0018      	movs	r0, r3
    be26:	4310      	orrs	r0, r2
    be28:	d100      	bne.n	be2c <__aeabi_dadd+0x52c>
    be2a:	e763      	b.n	bcf4 <__aeabi_dadd+0x3f4>
    be2c:	08f8      	lsrs	r0, r7, #3
    be2e:	0767      	lsls	r7, r4, #29
    be30:	4307      	orrs	r7, r0
    be32:	2080      	movs	r0, #128	; 0x80
    be34:	08e4      	lsrs	r4, r4, #3
    be36:	0300      	lsls	r0, r0, #12
    be38:	4204      	tst	r4, r0
    be3a:	d008      	beq.n	be4e <__aeabi_dadd+0x54e>
    be3c:	08dd      	lsrs	r5, r3, #3
    be3e:	4205      	tst	r5, r0
    be40:	d105      	bne.n	be4e <__aeabi_dadd+0x54e>
    be42:	08d2      	lsrs	r2, r2, #3
    be44:	0759      	lsls	r1, r3, #29
    be46:	4311      	orrs	r1, r2
    be48:	000f      	movs	r7, r1
    be4a:	002c      	movs	r4, r5
    be4c:	46d8      	mov	r8, fp
    be4e:	0f7b      	lsrs	r3, r7, #29
    be50:	00e4      	lsls	r4, r4, #3
    be52:	431c      	orrs	r4, r3
    be54:	00ff      	lsls	r7, r7, #3
    be56:	4e30      	ldr	r6, [pc, #192]	; (bf18 <__aeabi_dadd+0x618>)
    be58:	e5d6      	b.n	ba08 <__aeabi_dadd+0x108>
    be5a:	000c      	movs	r4, r1
    be5c:	0017      	movs	r7, r2
    be5e:	0006      	movs	r6, r0
    be60:	e5d2      	b.n	ba08 <__aeabi_dadd+0x108>
    be62:	2b00      	cmp	r3, #0
    be64:	d038      	beq.n	bed8 <__aeabi_dadd+0x5d8>
    be66:	000b      	movs	r3, r1
    be68:	4313      	orrs	r3, r2
    be6a:	d100      	bne.n	be6e <__aeabi_dadd+0x56e>
    be6c:	e742      	b.n	bcf4 <__aeabi_dadd+0x3f4>
    be6e:	08f8      	lsrs	r0, r7, #3
    be70:	0767      	lsls	r7, r4, #29
    be72:	4307      	orrs	r7, r0
    be74:	2080      	movs	r0, #128	; 0x80
    be76:	08e4      	lsrs	r4, r4, #3
    be78:	0300      	lsls	r0, r0, #12
    be7a:	4204      	tst	r4, r0
    be7c:	d0e7      	beq.n	be4e <__aeabi_dadd+0x54e>
    be7e:	08cb      	lsrs	r3, r1, #3
    be80:	4203      	tst	r3, r0
    be82:	d1e4      	bne.n	be4e <__aeabi_dadd+0x54e>
    be84:	08d2      	lsrs	r2, r2, #3
    be86:	0749      	lsls	r1, r1, #29
    be88:	4311      	orrs	r1, r2
    be8a:	000f      	movs	r7, r1
    be8c:	001c      	movs	r4, r3
    be8e:	e7de      	b.n	be4e <__aeabi_dadd+0x54e>
    be90:	2700      	movs	r7, #0
    be92:	2400      	movs	r4, #0
    be94:	e5d5      	b.n	ba42 <__aeabi_dadd+0x142>
    be96:	2100      	movs	r1, #0
    be98:	e76b      	b.n	bd72 <__aeabi_dadd+0x472>
    be9a:	2500      	movs	r5, #0
    be9c:	2700      	movs	r7, #0
    be9e:	e5f3      	b.n	ba88 <__aeabi_dadd+0x188>
    bea0:	464e      	mov	r6, r9
    bea2:	0025      	movs	r5, r4
    bea4:	3e20      	subs	r6, #32
    bea6:	40f5      	lsrs	r5, r6
    bea8:	464b      	mov	r3, r9
    beaa:	002e      	movs	r6, r5
    beac:	2b20      	cmp	r3, #32
    beae:	d02d      	beq.n	bf0c <__aeabi_dadd+0x60c>
    beb0:	2540      	movs	r5, #64	; 0x40
    beb2:	1aed      	subs	r5, r5, r3
    beb4:	40ac      	lsls	r4, r5
    beb6:	4327      	orrs	r7, r4
    beb8:	1e7c      	subs	r4, r7, #1
    beba:	41a7      	sbcs	r7, r4
    bebc:	2400      	movs	r4, #0
    bebe:	4337      	orrs	r7, r6
    bec0:	e6c9      	b.n	bc56 <__aeabi_dadd+0x356>
    bec2:	2480      	movs	r4, #128	; 0x80
    bec4:	2500      	movs	r5, #0
    bec6:	0324      	lsls	r4, r4, #12
    bec8:	4e13      	ldr	r6, [pc, #76]	; (bf18 <__aeabi_dadd+0x618>)
    beca:	2700      	movs	r7, #0
    becc:	e5dc      	b.n	ba88 <__aeabi_dadd+0x188>
    bece:	4327      	orrs	r7, r4
    bed0:	1e7c      	subs	r4, r7, #1
    bed2:	41a7      	sbcs	r7, r4
    bed4:	2400      	movs	r4, #0
    bed6:	e779      	b.n	bdcc <__aeabi_dadd+0x4cc>
    bed8:	000c      	movs	r4, r1
    beda:	0017      	movs	r7, r2
    bedc:	4e0e      	ldr	r6, [pc, #56]	; (bf18 <__aeabi_dadd+0x618>)
    bede:	e593      	b.n	ba08 <__aeabi_dadd+0x108>
    bee0:	000c      	movs	r4, r1
    bee2:	0017      	movs	r7, r2
    bee4:	e590      	b.n	ba08 <__aeabi_dadd+0x108>
    bee6:	4656      	mov	r6, sl
    bee8:	0023      	movs	r3, r4
    beea:	3e20      	subs	r6, #32
    beec:	40f3      	lsrs	r3, r6
    beee:	4699      	mov	r9, r3
    bef0:	4653      	mov	r3, sl
    bef2:	2b20      	cmp	r3, #32
    bef4:	d00e      	beq.n	bf14 <__aeabi_dadd+0x614>
    bef6:	2340      	movs	r3, #64	; 0x40
    bef8:	4656      	mov	r6, sl
    befa:	1b9b      	subs	r3, r3, r6
    befc:	409c      	lsls	r4, r3
    befe:	4327      	orrs	r7, r4
    bf00:	1e7c      	subs	r4, r7, #1
    bf02:	41a7      	sbcs	r7, r4
    bf04:	464b      	mov	r3, r9
    bf06:	2400      	movs	r4, #0
    bf08:	431f      	orrs	r7, r3
    bf0a:	e75f      	b.n	bdcc <__aeabi_dadd+0x4cc>
    bf0c:	2400      	movs	r4, #0
    bf0e:	e7d2      	b.n	beb6 <__aeabi_dadd+0x5b6>
    bf10:	0017      	movs	r7, r2
    bf12:	e5b2      	b.n	ba7a <__aeabi_dadd+0x17a>
    bf14:	2400      	movs	r4, #0
    bf16:	e7f2      	b.n	befe <__aeabi_dadd+0x5fe>
    bf18:	000007ff 	.word	0x000007ff
    bf1c:	ff7fffff 	.word	0xff7fffff

0000bf20 <__aeabi_ddiv>:
    bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf22:	4657      	mov	r7, sl
    bf24:	4645      	mov	r5, r8
    bf26:	46de      	mov	lr, fp
    bf28:	464e      	mov	r6, r9
    bf2a:	b5e0      	push	{r5, r6, r7, lr}
    bf2c:	004c      	lsls	r4, r1, #1
    bf2e:	030e      	lsls	r6, r1, #12
    bf30:	b087      	sub	sp, #28
    bf32:	4683      	mov	fp, r0
    bf34:	4692      	mov	sl, r2
    bf36:	001d      	movs	r5, r3
    bf38:	4680      	mov	r8, r0
    bf3a:	0b36      	lsrs	r6, r6, #12
    bf3c:	0d64      	lsrs	r4, r4, #21
    bf3e:	0fcf      	lsrs	r7, r1, #31
    bf40:	2c00      	cmp	r4, #0
    bf42:	d04f      	beq.n	bfe4 <__aeabi_ddiv+0xc4>
    bf44:	4b6f      	ldr	r3, [pc, #444]	; (c104 <__aeabi_ddiv+0x1e4>)
    bf46:	429c      	cmp	r4, r3
    bf48:	d035      	beq.n	bfb6 <__aeabi_ddiv+0x96>
    bf4a:	2380      	movs	r3, #128	; 0x80
    bf4c:	0f42      	lsrs	r2, r0, #29
    bf4e:	041b      	lsls	r3, r3, #16
    bf50:	00f6      	lsls	r6, r6, #3
    bf52:	4313      	orrs	r3, r2
    bf54:	4333      	orrs	r3, r6
    bf56:	4699      	mov	r9, r3
    bf58:	00c3      	lsls	r3, r0, #3
    bf5a:	4698      	mov	r8, r3
    bf5c:	4b6a      	ldr	r3, [pc, #424]	; (c108 <__aeabi_ddiv+0x1e8>)
    bf5e:	2600      	movs	r6, #0
    bf60:	469c      	mov	ip, r3
    bf62:	2300      	movs	r3, #0
    bf64:	4464      	add	r4, ip
    bf66:	9303      	str	r3, [sp, #12]
    bf68:	032b      	lsls	r3, r5, #12
    bf6a:	0b1b      	lsrs	r3, r3, #12
    bf6c:	469b      	mov	fp, r3
    bf6e:	006b      	lsls	r3, r5, #1
    bf70:	0fed      	lsrs	r5, r5, #31
    bf72:	4650      	mov	r0, sl
    bf74:	0d5b      	lsrs	r3, r3, #21
    bf76:	9501      	str	r5, [sp, #4]
    bf78:	d05e      	beq.n	c038 <__aeabi_ddiv+0x118>
    bf7a:	4a62      	ldr	r2, [pc, #392]	; (c104 <__aeabi_ddiv+0x1e4>)
    bf7c:	4293      	cmp	r3, r2
    bf7e:	d053      	beq.n	c028 <__aeabi_ddiv+0x108>
    bf80:	465a      	mov	r2, fp
    bf82:	00d1      	lsls	r1, r2, #3
    bf84:	2280      	movs	r2, #128	; 0x80
    bf86:	0f40      	lsrs	r0, r0, #29
    bf88:	0412      	lsls	r2, r2, #16
    bf8a:	4302      	orrs	r2, r0
    bf8c:	430a      	orrs	r2, r1
    bf8e:	4693      	mov	fp, r2
    bf90:	4652      	mov	r2, sl
    bf92:	00d1      	lsls	r1, r2, #3
    bf94:	4a5c      	ldr	r2, [pc, #368]	; (c108 <__aeabi_ddiv+0x1e8>)
    bf96:	4694      	mov	ip, r2
    bf98:	2200      	movs	r2, #0
    bf9a:	4463      	add	r3, ip
    bf9c:	0038      	movs	r0, r7
    bf9e:	4068      	eors	r0, r5
    bfa0:	4684      	mov	ip, r0
    bfa2:	9002      	str	r0, [sp, #8]
    bfa4:	1ae4      	subs	r4, r4, r3
    bfa6:	4316      	orrs	r6, r2
    bfa8:	2e0f      	cmp	r6, #15
    bfaa:	d900      	bls.n	bfae <__aeabi_ddiv+0x8e>
    bfac:	e0b4      	b.n	c118 <__aeabi_ddiv+0x1f8>
    bfae:	4b57      	ldr	r3, [pc, #348]	; (c10c <__aeabi_ddiv+0x1ec>)
    bfb0:	00b6      	lsls	r6, r6, #2
    bfb2:	599b      	ldr	r3, [r3, r6]
    bfb4:	469f      	mov	pc, r3
    bfb6:	0003      	movs	r3, r0
    bfb8:	4333      	orrs	r3, r6
    bfba:	4699      	mov	r9, r3
    bfbc:	d16c      	bne.n	c098 <__aeabi_ddiv+0x178>
    bfbe:	2300      	movs	r3, #0
    bfc0:	4698      	mov	r8, r3
    bfc2:	3302      	adds	r3, #2
    bfc4:	2608      	movs	r6, #8
    bfc6:	9303      	str	r3, [sp, #12]
    bfc8:	e7ce      	b.n	bf68 <__aeabi_ddiv+0x48>
    bfca:	46cb      	mov	fp, r9
    bfcc:	4641      	mov	r1, r8
    bfce:	9a03      	ldr	r2, [sp, #12]
    bfd0:	9701      	str	r7, [sp, #4]
    bfd2:	2a02      	cmp	r2, #2
    bfd4:	d165      	bne.n	c0a2 <__aeabi_ddiv+0x182>
    bfd6:	9b01      	ldr	r3, [sp, #4]
    bfd8:	4c4a      	ldr	r4, [pc, #296]	; (c104 <__aeabi_ddiv+0x1e4>)
    bfda:	469c      	mov	ip, r3
    bfdc:	2300      	movs	r3, #0
    bfde:	2200      	movs	r2, #0
    bfe0:	4698      	mov	r8, r3
    bfe2:	e06b      	b.n	c0bc <__aeabi_ddiv+0x19c>
    bfe4:	0003      	movs	r3, r0
    bfe6:	4333      	orrs	r3, r6
    bfe8:	4699      	mov	r9, r3
    bfea:	d04e      	beq.n	c08a <__aeabi_ddiv+0x16a>
    bfec:	2e00      	cmp	r6, #0
    bfee:	d100      	bne.n	bff2 <__aeabi_ddiv+0xd2>
    bff0:	e1bc      	b.n	c36c <__aeabi_ddiv+0x44c>
    bff2:	0030      	movs	r0, r6
    bff4:	f7fa fce4 	bl	69c0 <__clzsi2>
    bff8:	0003      	movs	r3, r0
    bffa:	3b0b      	subs	r3, #11
    bffc:	2b1c      	cmp	r3, #28
    bffe:	dd00      	ble.n	c002 <__aeabi_ddiv+0xe2>
    c000:	e1ac      	b.n	c35c <__aeabi_ddiv+0x43c>
    c002:	221d      	movs	r2, #29
    c004:	1ad3      	subs	r3, r2, r3
    c006:	465a      	mov	r2, fp
    c008:	0001      	movs	r1, r0
    c00a:	40da      	lsrs	r2, r3
    c00c:	3908      	subs	r1, #8
    c00e:	408e      	lsls	r6, r1
    c010:	0013      	movs	r3, r2
    c012:	4333      	orrs	r3, r6
    c014:	4699      	mov	r9, r3
    c016:	465b      	mov	r3, fp
    c018:	408b      	lsls	r3, r1
    c01a:	4698      	mov	r8, r3
    c01c:	2300      	movs	r3, #0
    c01e:	4c3c      	ldr	r4, [pc, #240]	; (c110 <__aeabi_ddiv+0x1f0>)
    c020:	2600      	movs	r6, #0
    c022:	1a24      	subs	r4, r4, r0
    c024:	9303      	str	r3, [sp, #12]
    c026:	e79f      	b.n	bf68 <__aeabi_ddiv+0x48>
    c028:	4651      	mov	r1, sl
    c02a:	465a      	mov	r2, fp
    c02c:	4311      	orrs	r1, r2
    c02e:	d129      	bne.n	c084 <__aeabi_ddiv+0x164>
    c030:	2200      	movs	r2, #0
    c032:	4693      	mov	fp, r2
    c034:	3202      	adds	r2, #2
    c036:	e7b1      	b.n	bf9c <__aeabi_ddiv+0x7c>
    c038:	4659      	mov	r1, fp
    c03a:	4301      	orrs	r1, r0
    c03c:	d01e      	beq.n	c07c <__aeabi_ddiv+0x15c>
    c03e:	465b      	mov	r3, fp
    c040:	2b00      	cmp	r3, #0
    c042:	d100      	bne.n	c046 <__aeabi_ddiv+0x126>
    c044:	e19e      	b.n	c384 <__aeabi_ddiv+0x464>
    c046:	4658      	mov	r0, fp
    c048:	f7fa fcba 	bl	69c0 <__clzsi2>
    c04c:	0003      	movs	r3, r0
    c04e:	3b0b      	subs	r3, #11
    c050:	2b1c      	cmp	r3, #28
    c052:	dd00      	ble.n	c056 <__aeabi_ddiv+0x136>
    c054:	e18f      	b.n	c376 <__aeabi_ddiv+0x456>
    c056:	0002      	movs	r2, r0
    c058:	4659      	mov	r1, fp
    c05a:	3a08      	subs	r2, #8
    c05c:	4091      	lsls	r1, r2
    c05e:	468b      	mov	fp, r1
    c060:	211d      	movs	r1, #29
    c062:	1acb      	subs	r3, r1, r3
    c064:	4651      	mov	r1, sl
    c066:	40d9      	lsrs	r1, r3
    c068:	000b      	movs	r3, r1
    c06a:	4659      	mov	r1, fp
    c06c:	430b      	orrs	r3, r1
    c06e:	4651      	mov	r1, sl
    c070:	469b      	mov	fp, r3
    c072:	4091      	lsls	r1, r2
    c074:	4b26      	ldr	r3, [pc, #152]	; (c110 <__aeabi_ddiv+0x1f0>)
    c076:	2200      	movs	r2, #0
    c078:	1a1b      	subs	r3, r3, r0
    c07a:	e78f      	b.n	bf9c <__aeabi_ddiv+0x7c>
    c07c:	2300      	movs	r3, #0
    c07e:	2201      	movs	r2, #1
    c080:	469b      	mov	fp, r3
    c082:	e78b      	b.n	bf9c <__aeabi_ddiv+0x7c>
    c084:	4651      	mov	r1, sl
    c086:	2203      	movs	r2, #3
    c088:	e788      	b.n	bf9c <__aeabi_ddiv+0x7c>
    c08a:	2300      	movs	r3, #0
    c08c:	4698      	mov	r8, r3
    c08e:	3301      	adds	r3, #1
    c090:	2604      	movs	r6, #4
    c092:	2400      	movs	r4, #0
    c094:	9303      	str	r3, [sp, #12]
    c096:	e767      	b.n	bf68 <__aeabi_ddiv+0x48>
    c098:	2303      	movs	r3, #3
    c09a:	46b1      	mov	r9, r6
    c09c:	9303      	str	r3, [sp, #12]
    c09e:	260c      	movs	r6, #12
    c0a0:	e762      	b.n	bf68 <__aeabi_ddiv+0x48>
    c0a2:	2a03      	cmp	r2, #3
    c0a4:	d100      	bne.n	c0a8 <__aeabi_ddiv+0x188>
    c0a6:	e25c      	b.n	c562 <__aeabi_ddiv+0x642>
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	2a01      	cmp	r2, #1
    c0ac:	d000      	beq.n	c0b0 <__aeabi_ddiv+0x190>
    c0ae:	e1e4      	b.n	c47a <__aeabi_ddiv+0x55a>
    c0b0:	4013      	ands	r3, r2
    c0b2:	469c      	mov	ip, r3
    c0b4:	2300      	movs	r3, #0
    c0b6:	2400      	movs	r4, #0
    c0b8:	2200      	movs	r2, #0
    c0ba:	4698      	mov	r8, r3
    c0bc:	2100      	movs	r1, #0
    c0be:	0312      	lsls	r2, r2, #12
    c0c0:	0b13      	lsrs	r3, r2, #12
    c0c2:	0d0a      	lsrs	r2, r1, #20
    c0c4:	0512      	lsls	r2, r2, #20
    c0c6:	431a      	orrs	r2, r3
    c0c8:	0523      	lsls	r3, r4, #20
    c0ca:	4c12      	ldr	r4, [pc, #72]	; (c114 <__aeabi_ddiv+0x1f4>)
    c0cc:	4640      	mov	r0, r8
    c0ce:	4022      	ands	r2, r4
    c0d0:	4313      	orrs	r3, r2
    c0d2:	4662      	mov	r2, ip
    c0d4:	005b      	lsls	r3, r3, #1
    c0d6:	07d2      	lsls	r2, r2, #31
    c0d8:	085b      	lsrs	r3, r3, #1
    c0da:	4313      	orrs	r3, r2
    c0dc:	0019      	movs	r1, r3
    c0de:	b007      	add	sp, #28
    c0e0:	bc3c      	pop	{r2, r3, r4, r5}
    c0e2:	4690      	mov	r8, r2
    c0e4:	4699      	mov	r9, r3
    c0e6:	46a2      	mov	sl, r4
    c0e8:	46ab      	mov	fp, r5
    c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0ec:	2300      	movs	r3, #0
    c0ee:	2280      	movs	r2, #128	; 0x80
    c0f0:	469c      	mov	ip, r3
    c0f2:	0312      	lsls	r2, r2, #12
    c0f4:	4698      	mov	r8, r3
    c0f6:	4c03      	ldr	r4, [pc, #12]	; (c104 <__aeabi_ddiv+0x1e4>)
    c0f8:	e7e0      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c0fa:	2300      	movs	r3, #0
    c0fc:	4c01      	ldr	r4, [pc, #4]	; (c104 <__aeabi_ddiv+0x1e4>)
    c0fe:	2200      	movs	r2, #0
    c100:	4698      	mov	r8, r3
    c102:	e7db      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c104:	000007ff 	.word	0x000007ff
    c108:	fffffc01 	.word	0xfffffc01
    c10c:	0000da40 	.word	0x0000da40
    c110:	fffffc0d 	.word	0xfffffc0d
    c114:	800fffff 	.word	0x800fffff
    c118:	45d9      	cmp	r9, fp
    c11a:	d900      	bls.n	c11e <__aeabi_ddiv+0x1fe>
    c11c:	e139      	b.n	c392 <__aeabi_ddiv+0x472>
    c11e:	d100      	bne.n	c122 <__aeabi_ddiv+0x202>
    c120:	e134      	b.n	c38c <__aeabi_ddiv+0x46c>
    c122:	2300      	movs	r3, #0
    c124:	4646      	mov	r6, r8
    c126:	464d      	mov	r5, r9
    c128:	469a      	mov	sl, r3
    c12a:	3c01      	subs	r4, #1
    c12c:	465b      	mov	r3, fp
    c12e:	0e0a      	lsrs	r2, r1, #24
    c130:	021b      	lsls	r3, r3, #8
    c132:	431a      	orrs	r2, r3
    c134:	020b      	lsls	r3, r1, #8
    c136:	0c17      	lsrs	r7, r2, #16
    c138:	9303      	str	r3, [sp, #12]
    c13a:	0413      	lsls	r3, r2, #16
    c13c:	0c1b      	lsrs	r3, r3, #16
    c13e:	0039      	movs	r1, r7
    c140:	0028      	movs	r0, r5
    c142:	4690      	mov	r8, r2
    c144:	9301      	str	r3, [sp, #4]
    c146:	f7fa fac5 	bl	66d4 <__udivsi3>
    c14a:	0002      	movs	r2, r0
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	4683      	mov	fp, r0
    c150:	435a      	muls	r2, r3
    c152:	0028      	movs	r0, r5
    c154:	0039      	movs	r1, r7
    c156:	4691      	mov	r9, r2
    c158:	f7fa fb42 	bl	67e0 <__aeabi_uidivmod>
    c15c:	0c35      	lsrs	r5, r6, #16
    c15e:	0409      	lsls	r1, r1, #16
    c160:	430d      	orrs	r5, r1
    c162:	45a9      	cmp	r9, r5
    c164:	d90d      	bls.n	c182 <__aeabi_ddiv+0x262>
    c166:	465b      	mov	r3, fp
    c168:	4445      	add	r5, r8
    c16a:	3b01      	subs	r3, #1
    c16c:	45a8      	cmp	r8, r5
    c16e:	d900      	bls.n	c172 <__aeabi_ddiv+0x252>
    c170:	e13a      	b.n	c3e8 <__aeabi_ddiv+0x4c8>
    c172:	45a9      	cmp	r9, r5
    c174:	d800      	bhi.n	c178 <__aeabi_ddiv+0x258>
    c176:	e137      	b.n	c3e8 <__aeabi_ddiv+0x4c8>
    c178:	2302      	movs	r3, #2
    c17a:	425b      	negs	r3, r3
    c17c:	469c      	mov	ip, r3
    c17e:	4445      	add	r5, r8
    c180:	44e3      	add	fp, ip
    c182:	464b      	mov	r3, r9
    c184:	1aeb      	subs	r3, r5, r3
    c186:	0039      	movs	r1, r7
    c188:	0018      	movs	r0, r3
    c18a:	9304      	str	r3, [sp, #16]
    c18c:	f7fa faa2 	bl	66d4 <__udivsi3>
    c190:	9b01      	ldr	r3, [sp, #4]
    c192:	0005      	movs	r5, r0
    c194:	4343      	muls	r3, r0
    c196:	0039      	movs	r1, r7
    c198:	9804      	ldr	r0, [sp, #16]
    c19a:	4699      	mov	r9, r3
    c19c:	f7fa fb20 	bl	67e0 <__aeabi_uidivmod>
    c1a0:	0433      	lsls	r3, r6, #16
    c1a2:	0409      	lsls	r1, r1, #16
    c1a4:	0c1b      	lsrs	r3, r3, #16
    c1a6:	430b      	orrs	r3, r1
    c1a8:	4599      	cmp	r9, r3
    c1aa:	d909      	bls.n	c1c0 <__aeabi_ddiv+0x2a0>
    c1ac:	4443      	add	r3, r8
    c1ae:	1e6a      	subs	r2, r5, #1
    c1b0:	4598      	cmp	r8, r3
    c1b2:	d900      	bls.n	c1b6 <__aeabi_ddiv+0x296>
    c1b4:	e11a      	b.n	c3ec <__aeabi_ddiv+0x4cc>
    c1b6:	4599      	cmp	r9, r3
    c1b8:	d800      	bhi.n	c1bc <__aeabi_ddiv+0x29c>
    c1ba:	e117      	b.n	c3ec <__aeabi_ddiv+0x4cc>
    c1bc:	3d02      	subs	r5, #2
    c1be:	4443      	add	r3, r8
    c1c0:	464a      	mov	r2, r9
    c1c2:	1a9b      	subs	r3, r3, r2
    c1c4:	465a      	mov	r2, fp
    c1c6:	0412      	lsls	r2, r2, #16
    c1c8:	432a      	orrs	r2, r5
    c1ca:	9903      	ldr	r1, [sp, #12]
    c1cc:	4693      	mov	fp, r2
    c1ce:	0c10      	lsrs	r0, r2, #16
    c1d0:	0c0a      	lsrs	r2, r1, #16
    c1d2:	4691      	mov	r9, r2
    c1d4:	0409      	lsls	r1, r1, #16
    c1d6:	465a      	mov	r2, fp
    c1d8:	0c09      	lsrs	r1, r1, #16
    c1da:	464e      	mov	r6, r9
    c1dc:	000d      	movs	r5, r1
    c1de:	0412      	lsls	r2, r2, #16
    c1e0:	0c12      	lsrs	r2, r2, #16
    c1e2:	4345      	muls	r5, r0
    c1e4:	9105      	str	r1, [sp, #20]
    c1e6:	4351      	muls	r1, r2
    c1e8:	4372      	muls	r2, r6
    c1ea:	4370      	muls	r0, r6
    c1ec:	1952      	adds	r2, r2, r5
    c1ee:	0c0e      	lsrs	r6, r1, #16
    c1f0:	18b2      	adds	r2, r6, r2
    c1f2:	4295      	cmp	r5, r2
    c1f4:	d903      	bls.n	c1fe <__aeabi_ddiv+0x2de>
    c1f6:	2580      	movs	r5, #128	; 0x80
    c1f8:	026d      	lsls	r5, r5, #9
    c1fa:	46ac      	mov	ip, r5
    c1fc:	4460      	add	r0, ip
    c1fe:	0c15      	lsrs	r5, r2, #16
    c200:	0409      	lsls	r1, r1, #16
    c202:	0412      	lsls	r2, r2, #16
    c204:	0c09      	lsrs	r1, r1, #16
    c206:	1828      	adds	r0, r5, r0
    c208:	1852      	adds	r2, r2, r1
    c20a:	4283      	cmp	r3, r0
    c20c:	d200      	bcs.n	c210 <__aeabi_ddiv+0x2f0>
    c20e:	e0ce      	b.n	c3ae <__aeabi_ddiv+0x48e>
    c210:	d100      	bne.n	c214 <__aeabi_ddiv+0x2f4>
    c212:	e0c8      	b.n	c3a6 <__aeabi_ddiv+0x486>
    c214:	1a1d      	subs	r5, r3, r0
    c216:	4653      	mov	r3, sl
    c218:	1a9e      	subs	r6, r3, r2
    c21a:	45b2      	cmp	sl, r6
    c21c:	4192      	sbcs	r2, r2
    c21e:	4252      	negs	r2, r2
    c220:	1aab      	subs	r3, r5, r2
    c222:	469a      	mov	sl, r3
    c224:	4598      	cmp	r8, r3
    c226:	d100      	bne.n	c22a <__aeabi_ddiv+0x30a>
    c228:	e117      	b.n	c45a <__aeabi_ddiv+0x53a>
    c22a:	0039      	movs	r1, r7
    c22c:	0018      	movs	r0, r3
    c22e:	f7fa fa51 	bl	66d4 <__udivsi3>
    c232:	9b01      	ldr	r3, [sp, #4]
    c234:	0005      	movs	r5, r0
    c236:	4343      	muls	r3, r0
    c238:	0039      	movs	r1, r7
    c23a:	4650      	mov	r0, sl
    c23c:	9304      	str	r3, [sp, #16]
    c23e:	f7fa facf 	bl	67e0 <__aeabi_uidivmod>
    c242:	9804      	ldr	r0, [sp, #16]
    c244:	040b      	lsls	r3, r1, #16
    c246:	0c31      	lsrs	r1, r6, #16
    c248:	4319      	orrs	r1, r3
    c24a:	4288      	cmp	r0, r1
    c24c:	d909      	bls.n	c262 <__aeabi_ddiv+0x342>
    c24e:	4441      	add	r1, r8
    c250:	1e6b      	subs	r3, r5, #1
    c252:	4588      	cmp	r8, r1
    c254:	d900      	bls.n	c258 <__aeabi_ddiv+0x338>
    c256:	e107      	b.n	c468 <__aeabi_ddiv+0x548>
    c258:	4288      	cmp	r0, r1
    c25a:	d800      	bhi.n	c25e <__aeabi_ddiv+0x33e>
    c25c:	e104      	b.n	c468 <__aeabi_ddiv+0x548>
    c25e:	3d02      	subs	r5, #2
    c260:	4441      	add	r1, r8
    c262:	9b04      	ldr	r3, [sp, #16]
    c264:	1acb      	subs	r3, r1, r3
    c266:	0018      	movs	r0, r3
    c268:	0039      	movs	r1, r7
    c26a:	9304      	str	r3, [sp, #16]
    c26c:	f7fa fa32 	bl	66d4 <__udivsi3>
    c270:	9b01      	ldr	r3, [sp, #4]
    c272:	4682      	mov	sl, r0
    c274:	4343      	muls	r3, r0
    c276:	0039      	movs	r1, r7
    c278:	9804      	ldr	r0, [sp, #16]
    c27a:	9301      	str	r3, [sp, #4]
    c27c:	f7fa fab0 	bl	67e0 <__aeabi_uidivmod>
    c280:	9801      	ldr	r0, [sp, #4]
    c282:	040b      	lsls	r3, r1, #16
    c284:	0431      	lsls	r1, r6, #16
    c286:	0c09      	lsrs	r1, r1, #16
    c288:	4319      	orrs	r1, r3
    c28a:	4288      	cmp	r0, r1
    c28c:	d90d      	bls.n	c2aa <__aeabi_ddiv+0x38a>
    c28e:	4653      	mov	r3, sl
    c290:	4441      	add	r1, r8
    c292:	3b01      	subs	r3, #1
    c294:	4588      	cmp	r8, r1
    c296:	d900      	bls.n	c29a <__aeabi_ddiv+0x37a>
    c298:	e0e8      	b.n	c46c <__aeabi_ddiv+0x54c>
    c29a:	4288      	cmp	r0, r1
    c29c:	d800      	bhi.n	c2a0 <__aeabi_ddiv+0x380>
    c29e:	e0e5      	b.n	c46c <__aeabi_ddiv+0x54c>
    c2a0:	2302      	movs	r3, #2
    c2a2:	425b      	negs	r3, r3
    c2a4:	469c      	mov	ip, r3
    c2a6:	4441      	add	r1, r8
    c2a8:	44e2      	add	sl, ip
    c2aa:	9b01      	ldr	r3, [sp, #4]
    c2ac:	042d      	lsls	r5, r5, #16
    c2ae:	1ace      	subs	r6, r1, r3
    c2b0:	4651      	mov	r1, sl
    c2b2:	4329      	orrs	r1, r5
    c2b4:	9d05      	ldr	r5, [sp, #20]
    c2b6:	464f      	mov	r7, r9
    c2b8:	002a      	movs	r2, r5
    c2ba:	040b      	lsls	r3, r1, #16
    c2bc:	0c08      	lsrs	r0, r1, #16
    c2be:	0c1b      	lsrs	r3, r3, #16
    c2c0:	435a      	muls	r2, r3
    c2c2:	4345      	muls	r5, r0
    c2c4:	437b      	muls	r3, r7
    c2c6:	4378      	muls	r0, r7
    c2c8:	195b      	adds	r3, r3, r5
    c2ca:	0c17      	lsrs	r7, r2, #16
    c2cc:	18fb      	adds	r3, r7, r3
    c2ce:	429d      	cmp	r5, r3
    c2d0:	d903      	bls.n	c2da <__aeabi_ddiv+0x3ba>
    c2d2:	2580      	movs	r5, #128	; 0x80
    c2d4:	026d      	lsls	r5, r5, #9
    c2d6:	46ac      	mov	ip, r5
    c2d8:	4460      	add	r0, ip
    c2da:	0c1d      	lsrs	r5, r3, #16
    c2dc:	0412      	lsls	r2, r2, #16
    c2de:	041b      	lsls	r3, r3, #16
    c2e0:	0c12      	lsrs	r2, r2, #16
    c2e2:	1828      	adds	r0, r5, r0
    c2e4:	189b      	adds	r3, r3, r2
    c2e6:	4286      	cmp	r6, r0
    c2e8:	d200      	bcs.n	c2ec <__aeabi_ddiv+0x3cc>
    c2ea:	e093      	b.n	c414 <__aeabi_ddiv+0x4f4>
    c2ec:	d100      	bne.n	c2f0 <__aeabi_ddiv+0x3d0>
    c2ee:	e08e      	b.n	c40e <__aeabi_ddiv+0x4ee>
    c2f0:	2301      	movs	r3, #1
    c2f2:	4319      	orrs	r1, r3
    c2f4:	4ba0      	ldr	r3, [pc, #640]	; (c578 <__aeabi_ddiv+0x658>)
    c2f6:	18e3      	adds	r3, r4, r3
    c2f8:	2b00      	cmp	r3, #0
    c2fa:	dc00      	bgt.n	c2fe <__aeabi_ddiv+0x3de>
    c2fc:	e099      	b.n	c432 <__aeabi_ddiv+0x512>
    c2fe:	074a      	lsls	r2, r1, #29
    c300:	d000      	beq.n	c304 <__aeabi_ddiv+0x3e4>
    c302:	e09e      	b.n	c442 <__aeabi_ddiv+0x522>
    c304:	465a      	mov	r2, fp
    c306:	01d2      	lsls	r2, r2, #7
    c308:	d506      	bpl.n	c318 <__aeabi_ddiv+0x3f8>
    c30a:	465a      	mov	r2, fp
    c30c:	4b9b      	ldr	r3, [pc, #620]	; (c57c <__aeabi_ddiv+0x65c>)
    c30e:	401a      	ands	r2, r3
    c310:	2380      	movs	r3, #128	; 0x80
    c312:	4693      	mov	fp, r2
    c314:	00db      	lsls	r3, r3, #3
    c316:	18e3      	adds	r3, r4, r3
    c318:	4a99      	ldr	r2, [pc, #612]	; (c580 <__aeabi_ddiv+0x660>)
    c31a:	4293      	cmp	r3, r2
    c31c:	dd68      	ble.n	c3f0 <__aeabi_ddiv+0x4d0>
    c31e:	2301      	movs	r3, #1
    c320:	9a02      	ldr	r2, [sp, #8]
    c322:	4c98      	ldr	r4, [pc, #608]	; (c584 <__aeabi_ddiv+0x664>)
    c324:	401a      	ands	r2, r3
    c326:	2300      	movs	r3, #0
    c328:	4694      	mov	ip, r2
    c32a:	4698      	mov	r8, r3
    c32c:	2200      	movs	r2, #0
    c32e:	e6c5      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c330:	2280      	movs	r2, #128	; 0x80
    c332:	464b      	mov	r3, r9
    c334:	0312      	lsls	r2, r2, #12
    c336:	4213      	tst	r3, r2
    c338:	d00a      	beq.n	c350 <__aeabi_ddiv+0x430>
    c33a:	465b      	mov	r3, fp
    c33c:	4213      	tst	r3, r2
    c33e:	d106      	bne.n	c34e <__aeabi_ddiv+0x42e>
    c340:	431a      	orrs	r2, r3
    c342:	0312      	lsls	r2, r2, #12
    c344:	0b12      	lsrs	r2, r2, #12
    c346:	46ac      	mov	ip, r5
    c348:	4688      	mov	r8, r1
    c34a:	4c8e      	ldr	r4, [pc, #568]	; (c584 <__aeabi_ddiv+0x664>)
    c34c:	e6b6      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c34e:	464b      	mov	r3, r9
    c350:	431a      	orrs	r2, r3
    c352:	0312      	lsls	r2, r2, #12
    c354:	0b12      	lsrs	r2, r2, #12
    c356:	46bc      	mov	ip, r7
    c358:	4c8a      	ldr	r4, [pc, #552]	; (c584 <__aeabi_ddiv+0x664>)
    c35a:	e6af      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c35c:	0003      	movs	r3, r0
    c35e:	465a      	mov	r2, fp
    c360:	3b28      	subs	r3, #40	; 0x28
    c362:	409a      	lsls	r2, r3
    c364:	2300      	movs	r3, #0
    c366:	4691      	mov	r9, r2
    c368:	4698      	mov	r8, r3
    c36a:	e657      	b.n	c01c <__aeabi_ddiv+0xfc>
    c36c:	4658      	mov	r0, fp
    c36e:	f7fa fb27 	bl	69c0 <__clzsi2>
    c372:	3020      	adds	r0, #32
    c374:	e640      	b.n	bff8 <__aeabi_ddiv+0xd8>
    c376:	0003      	movs	r3, r0
    c378:	4652      	mov	r2, sl
    c37a:	3b28      	subs	r3, #40	; 0x28
    c37c:	409a      	lsls	r2, r3
    c37e:	2100      	movs	r1, #0
    c380:	4693      	mov	fp, r2
    c382:	e677      	b.n	c074 <__aeabi_ddiv+0x154>
    c384:	f7fa fb1c 	bl	69c0 <__clzsi2>
    c388:	3020      	adds	r0, #32
    c38a:	e65f      	b.n	c04c <__aeabi_ddiv+0x12c>
    c38c:	4588      	cmp	r8, r1
    c38e:	d200      	bcs.n	c392 <__aeabi_ddiv+0x472>
    c390:	e6c7      	b.n	c122 <__aeabi_ddiv+0x202>
    c392:	464b      	mov	r3, r9
    c394:	07de      	lsls	r6, r3, #31
    c396:	085d      	lsrs	r5, r3, #1
    c398:	4643      	mov	r3, r8
    c39a:	085b      	lsrs	r3, r3, #1
    c39c:	431e      	orrs	r6, r3
    c39e:	4643      	mov	r3, r8
    c3a0:	07db      	lsls	r3, r3, #31
    c3a2:	469a      	mov	sl, r3
    c3a4:	e6c2      	b.n	c12c <__aeabi_ddiv+0x20c>
    c3a6:	2500      	movs	r5, #0
    c3a8:	4592      	cmp	sl, r2
    c3aa:	d300      	bcc.n	c3ae <__aeabi_ddiv+0x48e>
    c3ac:	e733      	b.n	c216 <__aeabi_ddiv+0x2f6>
    c3ae:	9e03      	ldr	r6, [sp, #12]
    c3b0:	4659      	mov	r1, fp
    c3b2:	46b4      	mov	ip, r6
    c3b4:	44e2      	add	sl, ip
    c3b6:	45b2      	cmp	sl, r6
    c3b8:	41ad      	sbcs	r5, r5
    c3ba:	426d      	negs	r5, r5
    c3bc:	4445      	add	r5, r8
    c3be:	18eb      	adds	r3, r5, r3
    c3c0:	3901      	subs	r1, #1
    c3c2:	4598      	cmp	r8, r3
    c3c4:	d207      	bcs.n	c3d6 <__aeabi_ddiv+0x4b6>
    c3c6:	4298      	cmp	r0, r3
    c3c8:	d900      	bls.n	c3cc <__aeabi_ddiv+0x4ac>
    c3ca:	e07f      	b.n	c4cc <__aeabi_ddiv+0x5ac>
    c3cc:	d100      	bne.n	c3d0 <__aeabi_ddiv+0x4b0>
    c3ce:	e0bc      	b.n	c54a <__aeabi_ddiv+0x62a>
    c3d0:	1a1d      	subs	r5, r3, r0
    c3d2:	468b      	mov	fp, r1
    c3d4:	e71f      	b.n	c216 <__aeabi_ddiv+0x2f6>
    c3d6:	4598      	cmp	r8, r3
    c3d8:	d1fa      	bne.n	c3d0 <__aeabi_ddiv+0x4b0>
    c3da:	9d03      	ldr	r5, [sp, #12]
    c3dc:	4555      	cmp	r5, sl
    c3de:	d9f2      	bls.n	c3c6 <__aeabi_ddiv+0x4a6>
    c3e0:	4643      	mov	r3, r8
    c3e2:	468b      	mov	fp, r1
    c3e4:	1a1d      	subs	r5, r3, r0
    c3e6:	e716      	b.n	c216 <__aeabi_ddiv+0x2f6>
    c3e8:	469b      	mov	fp, r3
    c3ea:	e6ca      	b.n	c182 <__aeabi_ddiv+0x262>
    c3ec:	0015      	movs	r5, r2
    c3ee:	e6e7      	b.n	c1c0 <__aeabi_ddiv+0x2a0>
    c3f0:	465a      	mov	r2, fp
    c3f2:	08c9      	lsrs	r1, r1, #3
    c3f4:	0752      	lsls	r2, r2, #29
    c3f6:	430a      	orrs	r2, r1
    c3f8:	055b      	lsls	r3, r3, #21
    c3fa:	4690      	mov	r8, r2
    c3fc:	0d5c      	lsrs	r4, r3, #21
    c3fe:	465a      	mov	r2, fp
    c400:	2301      	movs	r3, #1
    c402:	9902      	ldr	r1, [sp, #8]
    c404:	0252      	lsls	r2, r2, #9
    c406:	4019      	ands	r1, r3
    c408:	0b12      	lsrs	r2, r2, #12
    c40a:	468c      	mov	ip, r1
    c40c:	e656      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c40e:	2b00      	cmp	r3, #0
    c410:	d100      	bne.n	c414 <__aeabi_ddiv+0x4f4>
    c412:	e76f      	b.n	c2f4 <__aeabi_ddiv+0x3d4>
    c414:	4446      	add	r6, r8
    c416:	1e4a      	subs	r2, r1, #1
    c418:	45b0      	cmp	r8, r6
    c41a:	d929      	bls.n	c470 <__aeabi_ddiv+0x550>
    c41c:	0011      	movs	r1, r2
    c41e:	4286      	cmp	r6, r0
    c420:	d000      	beq.n	c424 <__aeabi_ddiv+0x504>
    c422:	e765      	b.n	c2f0 <__aeabi_ddiv+0x3d0>
    c424:	9a03      	ldr	r2, [sp, #12]
    c426:	4293      	cmp	r3, r2
    c428:	d000      	beq.n	c42c <__aeabi_ddiv+0x50c>
    c42a:	e761      	b.n	c2f0 <__aeabi_ddiv+0x3d0>
    c42c:	e762      	b.n	c2f4 <__aeabi_ddiv+0x3d4>
    c42e:	2101      	movs	r1, #1
    c430:	4249      	negs	r1, r1
    c432:	2001      	movs	r0, #1
    c434:	1ac2      	subs	r2, r0, r3
    c436:	2a38      	cmp	r2, #56	; 0x38
    c438:	dd21      	ble.n	c47e <__aeabi_ddiv+0x55e>
    c43a:	9b02      	ldr	r3, [sp, #8]
    c43c:	4003      	ands	r3, r0
    c43e:	469c      	mov	ip, r3
    c440:	e638      	b.n	c0b4 <__aeabi_ddiv+0x194>
    c442:	220f      	movs	r2, #15
    c444:	400a      	ands	r2, r1
    c446:	2a04      	cmp	r2, #4
    c448:	d100      	bne.n	c44c <__aeabi_ddiv+0x52c>
    c44a:	e75b      	b.n	c304 <__aeabi_ddiv+0x3e4>
    c44c:	000a      	movs	r2, r1
    c44e:	1d11      	adds	r1, r2, #4
    c450:	4291      	cmp	r1, r2
    c452:	4192      	sbcs	r2, r2
    c454:	4252      	negs	r2, r2
    c456:	4493      	add	fp, r2
    c458:	e754      	b.n	c304 <__aeabi_ddiv+0x3e4>
    c45a:	4b47      	ldr	r3, [pc, #284]	; (c578 <__aeabi_ddiv+0x658>)
    c45c:	18e3      	adds	r3, r4, r3
    c45e:	2b00      	cmp	r3, #0
    c460:	dde5      	ble.n	c42e <__aeabi_ddiv+0x50e>
    c462:	2201      	movs	r2, #1
    c464:	4252      	negs	r2, r2
    c466:	e7f2      	b.n	c44e <__aeabi_ddiv+0x52e>
    c468:	001d      	movs	r5, r3
    c46a:	e6fa      	b.n	c262 <__aeabi_ddiv+0x342>
    c46c:	469a      	mov	sl, r3
    c46e:	e71c      	b.n	c2aa <__aeabi_ddiv+0x38a>
    c470:	42b0      	cmp	r0, r6
    c472:	d839      	bhi.n	c4e8 <__aeabi_ddiv+0x5c8>
    c474:	d06e      	beq.n	c554 <__aeabi_ddiv+0x634>
    c476:	0011      	movs	r1, r2
    c478:	e73a      	b.n	c2f0 <__aeabi_ddiv+0x3d0>
    c47a:	9302      	str	r3, [sp, #8]
    c47c:	e73a      	b.n	c2f4 <__aeabi_ddiv+0x3d4>
    c47e:	2a1f      	cmp	r2, #31
    c480:	dc3c      	bgt.n	c4fc <__aeabi_ddiv+0x5dc>
    c482:	2320      	movs	r3, #32
    c484:	1a9b      	subs	r3, r3, r2
    c486:	000c      	movs	r4, r1
    c488:	4658      	mov	r0, fp
    c48a:	4099      	lsls	r1, r3
    c48c:	4098      	lsls	r0, r3
    c48e:	1e4b      	subs	r3, r1, #1
    c490:	4199      	sbcs	r1, r3
    c492:	465b      	mov	r3, fp
    c494:	40d4      	lsrs	r4, r2
    c496:	40d3      	lsrs	r3, r2
    c498:	4320      	orrs	r0, r4
    c49a:	4308      	orrs	r0, r1
    c49c:	001a      	movs	r2, r3
    c49e:	0743      	lsls	r3, r0, #29
    c4a0:	d009      	beq.n	c4b6 <__aeabi_ddiv+0x596>
    c4a2:	230f      	movs	r3, #15
    c4a4:	4003      	ands	r3, r0
    c4a6:	2b04      	cmp	r3, #4
    c4a8:	d005      	beq.n	c4b6 <__aeabi_ddiv+0x596>
    c4aa:	0001      	movs	r1, r0
    c4ac:	1d08      	adds	r0, r1, #4
    c4ae:	4288      	cmp	r0, r1
    c4b0:	419b      	sbcs	r3, r3
    c4b2:	425b      	negs	r3, r3
    c4b4:	18d2      	adds	r2, r2, r3
    c4b6:	0213      	lsls	r3, r2, #8
    c4b8:	d53a      	bpl.n	c530 <__aeabi_ddiv+0x610>
    c4ba:	2301      	movs	r3, #1
    c4bc:	9a02      	ldr	r2, [sp, #8]
    c4be:	2401      	movs	r4, #1
    c4c0:	401a      	ands	r2, r3
    c4c2:	2300      	movs	r3, #0
    c4c4:	4694      	mov	ip, r2
    c4c6:	4698      	mov	r8, r3
    c4c8:	2200      	movs	r2, #0
    c4ca:	e5f7      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c4cc:	2102      	movs	r1, #2
    c4ce:	4249      	negs	r1, r1
    c4d0:	468c      	mov	ip, r1
    c4d2:	9d03      	ldr	r5, [sp, #12]
    c4d4:	44e3      	add	fp, ip
    c4d6:	46ac      	mov	ip, r5
    c4d8:	44e2      	add	sl, ip
    c4da:	45aa      	cmp	sl, r5
    c4dc:	41ad      	sbcs	r5, r5
    c4de:	426d      	negs	r5, r5
    c4e0:	4445      	add	r5, r8
    c4e2:	18ed      	adds	r5, r5, r3
    c4e4:	1a2d      	subs	r5, r5, r0
    c4e6:	e696      	b.n	c216 <__aeabi_ddiv+0x2f6>
    c4e8:	1e8a      	subs	r2, r1, #2
    c4ea:	9903      	ldr	r1, [sp, #12]
    c4ec:	004d      	lsls	r5, r1, #1
    c4ee:	428d      	cmp	r5, r1
    c4f0:	4189      	sbcs	r1, r1
    c4f2:	4249      	negs	r1, r1
    c4f4:	4441      	add	r1, r8
    c4f6:	1876      	adds	r6, r6, r1
    c4f8:	9503      	str	r5, [sp, #12]
    c4fa:	e78f      	b.n	c41c <__aeabi_ddiv+0x4fc>
    c4fc:	201f      	movs	r0, #31
    c4fe:	4240      	negs	r0, r0
    c500:	1ac3      	subs	r3, r0, r3
    c502:	4658      	mov	r0, fp
    c504:	40d8      	lsrs	r0, r3
    c506:	0003      	movs	r3, r0
    c508:	2a20      	cmp	r2, #32
    c50a:	d028      	beq.n	c55e <__aeabi_ddiv+0x63e>
    c50c:	2040      	movs	r0, #64	; 0x40
    c50e:	465d      	mov	r5, fp
    c510:	1a82      	subs	r2, r0, r2
    c512:	4095      	lsls	r5, r2
    c514:	4329      	orrs	r1, r5
    c516:	1e4a      	subs	r2, r1, #1
    c518:	4191      	sbcs	r1, r2
    c51a:	4319      	orrs	r1, r3
    c51c:	2307      	movs	r3, #7
    c51e:	2200      	movs	r2, #0
    c520:	400b      	ands	r3, r1
    c522:	d009      	beq.n	c538 <__aeabi_ddiv+0x618>
    c524:	230f      	movs	r3, #15
    c526:	2200      	movs	r2, #0
    c528:	400b      	ands	r3, r1
    c52a:	0008      	movs	r0, r1
    c52c:	2b04      	cmp	r3, #4
    c52e:	d1bd      	bne.n	c4ac <__aeabi_ddiv+0x58c>
    c530:	0001      	movs	r1, r0
    c532:	0753      	lsls	r3, r2, #29
    c534:	0252      	lsls	r2, r2, #9
    c536:	0b12      	lsrs	r2, r2, #12
    c538:	08c9      	lsrs	r1, r1, #3
    c53a:	4319      	orrs	r1, r3
    c53c:	2301      	movs	r3, #1
    c53e:	4688      	mov	r8, r1
    c540:	9902      	ldr	r1, [sp, #8]
    c542:	2400      	movs	r4, #0
    c544:	4019      	ands	r1, r3
    c546:	468c      	mov	ip, r1
    c548:	e5b8      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c54a:	4552      	cmp	r2, sl
    c54c:	d8be      	bhi.n	c4cc <__aeabi_ddiv+0x5ac>
    c54e:	468b      	mov	fp, r1
    c550:	2500      	movs	r5, #0
    c552:	e660      	b.n	c216 <__aeabi_ddiv+0x2f6>
    c554:	9d03      	ldr	r5, [sp, #12]
    c556:	429d      	cmp	r5, r3
    c558:	d3c6      	bcc.n	c4e8 <__aeabi_ddiv+0x5c8>
    c55a:	0011      	movs	r1, r2
    c55c:	e762      	b.n	c424 <__aeabi_ddiv+0x504>
    c55e:	2500      	movs	r5, #0
    c560:	e7d8      	b.n	c514 <__aeabi_ddiv+0x5f4>
    c562:	2280      	movs	r2, #128	; 0x80
    c564:	465b      	mov	r3, fp
    c566:	0312      	lsls	r2, r2, #12
    c568:	431a      	orrs	r2, r3
    c56a:	9b01      	ldr	r3, [sp, #4]
    c56c:	0312      	lsls	r2, r2, #12
    c56e:	0b12      	lsrs	r2, r2, #12
    c570:	469c      	mov	ip, r3
    c572:	4688      	mov	r8, r1
    c574:	4c03      	ldr	r4, [pc, #12]	; (c584 <__aeabi_ddiv+0x664>)
    c576:	e5a1      	b.n	c0bc <__aeabi_ddiv+0x19c>
    c578:	000003ff 	.word	0x000003ff
    c57c:	feffffff 	.word	0xfeffffff
    c580:	000007fe 	.word	0x000007fe
    c584:	000007ff 	.word	0x000007ff

0000c588 <__eqdf2>:
    c588:	b5f0      	push	{r4, r5, r6, r7, lr}
    c58a:	464f      	mov	r7, r9
    c58c:	4646      	mov	r6, r8
    c58e:	46d6      	mov	lr, sl
    c590:	005c      	lsls	r4, r3, #1
    c592:	b5c0      	push	{r6, r7, lr}
    c594:	031f      	lsls	r7, r3, #12
    c596:	0fdb      	lsrs	r3, r3, #31
    c598:	469a      	mov	sl, r3
    c59a:	4b17      	ldr	r3, [pc, #92]	; (c5f8 <__eqdf2+0x70>)
    c59c:	030e      	lsls	r6, r1, #12
    c59e:	004d      	lsls	r5, r1, #1
    c5a0:	4684      	mov	ip, r0
    c5a2:	4680      	mov	r8, r0
    c5a4:	0b36      	lsrs	r6, r6, #12
    c5a6:	0d6d      	lsrs	r5, r5, #21
    c5a8:	0fc9      	lsrs	r1, r1, #31
    c5aa:	4691      	mov	r9, r2
    c5ac:	0b3f      	lsrs	r7, r7, #12
    c5ae:	0d64      	lsrs	r4, r4, #21
    c5b0:	2001      	movs	r0, #1
    c5b2:	429d      	cmp	r5, r3
    c5b4:	d008      	beq.n	c5c8 <__eqdf2+0x40>
    c5b6:	429c      	cmp	r4, r3
    c5b8:	d001      	beq.n	c5be <__eqdf2+0x36>
    c5ba:	42a5      	cmp	r5, r4
    c5bc:	d00b      	beq.n	c5d6 <__eqdf2+0x4e>
    c5be:	bc1c      	pop	{r2, r3, r4}
    c5c0:	4690      	mov	r8, r2
    c5c2:	4699      	mov	r9, r3
    c5c4:	46a2      	mov	sl, r4
    c5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5c8:	4663      	mov	r3, ip
    c5ca:	4333      	orrs	r3, r6
    c5cc:	d1f7      	bne.n	c5be <__eqdf2+0x36>
    c5ce:	42ac      	cmp	r4, r5
    c5d0:	d1f5      	bne.n	c5be <__eqdf2+0x36>
    c5d2:	433a      	orrs	r2, r7
    c5d4:	d1f3      	bne.n	c5be <__eqdf2+0x36>
    c5d6:	2001      	movs	r0, #1
    c5d8:	42be      	cmp	r6, r7
    c5da:	d1f0      	bne.n	c5be <__eqdf2+0x36>
    c5dc:	45c8      	cmp	r8, r9
    c5de:	d1ee      	bne.n	c5be <__eqdf2+0x36>
    c5e0:	4551      	cmp	r1, sl
    c5e2:	d007      	beq.n	c5f4 <__eqdf2+0x6c>
    c5e4:	2d00      	cmp	r5, #0
    c5e6:	d1ea      	bne.n	c5be <__eqdf2+0x36>
    c5e8:	4663      	mov	r3, ip
    c5ea:	431e      	orrs	r6, r3
    c5ec:	0030      	movs	r0, r6
    c5ee:	1e46      	subs	r6, r0, #1
    c5f0:	41b0      	sbcs	r0, r6
    c5f2:	e7e4      	b.n	c5be <__eqdf2+0x36>
    c5f4:	2000      	movs	r0, #0
    c5f6:	e7e2      	b.n	c5be <__eqdf2+0x36>
    c5f8:	000007ff 	.word	0x000007ff

0000c5fc <__gedf2>:
    c5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5fe:	4645      	mov	r5, r8
    c600:	46de      	mov	lr, fp
    c602:	4657      	mov	r7, sl
    c604:	464e      	mov	r6, r9
    c606:	b5e0      	push	{r5, r6, r7, lr}
    c608:	031f      	lsls	r7, r3, #12
    c60a:	0b3d      	lsrs	r5, r7, #12
    c60c:	4f2c      	ldr	r7, [pc, #176]	; (c6c0 <__gedf2+0xc4>)
    c60e:	030e      	lsls	r6, r1, #12
    c610:	004c      	lsls	r4, r1, #1
    c612:	46ab      	mov	fp, r5
    c614:	005d      	lsls	r5, r3, #1
    c616:	4684      	mov	ip, r0
    c618:	0b36      	lsrs	r6, r6, #12
    c61a:	0d64      	lsrs	r4, r4, #21
    c61c:	0fc9      	lsrs	r1, r1, #31
    c61e:	4690      	mov	r8, r2
    c620:	0d6d      	lsrs	r5, r5, #21
    c622:	0fdb      	lsrs	r3, r3, #31
    c624:	42bc      	cmp	r4, r7
    c626:	d02a      	beq.n	c67e <__gedf2+0x82>
    c628:	4f25      	ldr	r7, [pc, #148]	; (c6c0 <__gedf2+0xc4>)
    c62a:	42bd      	cmp	r5, r7
    c62c:	d02d      	beq.n	c68a <__gedf2+0x8e>
    c62e:	2c00      	cmp	r4, #0
    c630:	d10f      	bne.n	c652 <__gedf2+0x56>
    c632:	4330      	orrs	r0, r6
    c634:	0007      	movs	r7, r0
    c636:	4681      	mov	r9, r0
    c638:	4278      	negs	r0, r7
    c63a:	4178      	adcs	r0, r7
    c63c:	b2c0      	uxtb	r0, r0
    c63e:	2d00      	cmp	r5, #0
    c640:	d117      	bne.n	c672 <__gedf2+0x76>
    c642:	465f      	mov	r7, fp
    c644:	433a      	orrs	r2, r7
    c646:	d114      	bne.n	c672 <__gedf2+0x76>
    c648:	464b      	mov	r3, r9
    c64a:	2000      	movs	r0, #0
    c64c:	2b00      	cmp	r3, #0
    c64e:	d00a      	beq.n	c666 <__gedf2+0x6a>
    c650:	e006      	b.n	c660 <__gedf2+0x64>
    c652:	2d00      	cmp	r5, #0
    c654:	d102      	bne.n	c65c <__gedf2+0x60>
    c656:	4658      	mov	r0, fp
    c658:	4302      	orrs	r2, r0
    c65a:	d001      	beq.n	c660 <__gedf2+0x64>
    c65c:	4299      	cmp	r1, r3
    c65e:	d018      	beq.n	c692 <__gedf2+0x96>
    c660:	4248      	negs	r0, r1
    c662:	2101      	movs	r1, #1
    c664:	4308      	orrs	r0, r1
    c666:	bc3c      	pop	{r2, r3, r4, r5}
    c668:	4690      	mov	r8, r2
    c66a:	4699      	mov	r9, r3
    c66c:	46a2      	mov	sl, r4
    c66e:	46ab      	mov	fp, r5
    c670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c672:	2800      	cmp	r0, #0
    c674:	d0f2      	beq.n	c65c <__gedf2+0x60>
    c676:	2001      	movs	r0, #1
    c678:	3b01      	subs	r3, #1
    c67a:	4318      	orrs	r0, r3
    c67c:	e7f3      	b.n	c666 <__gedf2+0x6a>
    c67e:	0037      	movs	r7, r6
    c680:	4307      	orrs	r7, r0
    c682:	d0d1      	beq.n	c628 <__gedf2+0x2c>
    c684:	2002      	movs	r0, #2
    c686:	4240      	negs	r0, r0
    c688:	e7ed      	b.n	c666 <__gedf2+0x6a>
    c68a:	465f      	mov	r7, fp
    c68c:	4317      	orrs	r7, r2
    c68e:	d0ce      	beq.n	c62e <__gedf2+0x32>
    c690:	e7f8      	b.n	c684 <__gedf2+0x88>
    c692:	42ac      	cmp	r4, r5
    c694:	dce4      	bgt.n	c660 <__gedf2+0x64>
    c696:	da03      	bge.n	c6a0 <__gedf2+0xa4>
    c698:	1e48      	subs	r0, r1, #1
    c69a:	2101      	movs	r1, #1
    c69c:	4308      	orrs	r0, r1
    c69e:	e7e2      	b.n	c666 <__gedf2+0x6a>
    c6a0:	455e      	cmp	r6, fp
    c6a2:	d8dd      	bhi.n	c660 <__gedf2+0x64>
    c6a4:	d006      	beq.n	c6b4 <__gedf2+0xb8>
    c6a6:	2000      	movs	r0, #0
    c6a8:	455e      	cmp	r6, fp
    c6aa:	d2dc      	bcs.n	c666 <__gedf2+0x6a>
    c6ac:	2301      	movs	r3, #1
    c6ae:	1e48      	subs	r0, r1, #1
    c6b0:	4318      	orrs	r0, r3
    c6b2:	e7d8      	b.n	c666 <__gedf2+0x6a>
    c6b4:	45c4      	cmp	ip, r8
    c6b6:	d8d3      	bhi.n	c660 <__gedf2+0x64>
    c6b8:	2000      	movs	r0, #0
    c6ba:	45c4      	cmp	ip, r8
    c6bc:	d3f6      	bcc.n	c6ac <__gedf2+0xb0>
    c6be:	e7d2      	b.n	c666 <__gedf2+0x6a>
    c6c0:	000007ff 	.word	0x000007ff

0000c6c4 <__ledf2>:
    c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6c6:	464e      	mov	r6, r9
    c6c8:	4645      	mov	r5, r8
    c6ca:	46de      	mov	lr, fp
    c6cc:	4657      	mov	r7, sl
    c6ce:	005c      	lsls	r4, r3, #1
    c6d0:	b5e0      	push	{r5, r6, r7, lr}
    c6d2:	031f      	lsls	r7, r3, #12
    c6d4:	0fdb      	lsrs	r3, r3, #31
    c6d6:	4699      	mov	r9, r3
    c6d8:	4b2a      	ldr	r3, [pc, #168]	; (c784 <__ledf2+0xc0>)
    c6da:	030e      	lsls	r6, r1, #12
    c6dc:	004d      	lsls	r5, r1, #1
    c6de:	0fc9      	lsrs	r1, r1, #31
    c6e0:	4684      	mov	ip, r0
    c6e2:	0b36      	lsrs	r6, r6, #12
    c6e4:	0d6d      	lsrs	r5, r5, #21
    c6e6:	468b      	mov	fp, r1
    c6e8:	4690      	mov	r8, r2
    c6ea:	0b3f      	lsrs	r7, r7, #12
    c6ec:	0d64      	lsrs	r4, r4, #21
    c6ee:	429d      	cmp	r5, r3
    c6f0:	d020      	beq.n	c734 <__ledf2+0x70>
    c6f2:	4b24      	ldr	r3, [pc, #144]	; (c784 <__ledf2+0xc0>)
    c6f4:	429c      	cmp	r4, r3
    c6f6:	d022      	beq.n	c73e <__ledf2+0x7a>
    c6f8:	2d00      	cmp	r5, #0
    c6fa:	d112      	bne.n	c722 <__ledf2+0x5e>
    c6fc:	4330      	orrs	r0, r6
    c6fe:	4243      	negs	r3, r0
    c700:	4143      	adcs	r3, r0
    c702:	b2db      	uxtb	r3, r3
    c704:	2c00      	cmp	r4, #0
    c706:	d01f      	beq.n	c748 <__ledf2+0x84>
    c708:	2b00      	cmp	r3, #0
    c70a:	d00c      	beq.n	c726 <__ledf2+0x62>
    c70c:	464b      	mov	r3, r9
    c70e:	2001      	movs	r0, #1
    c710:	3b01      	subs	r3, #1
    c712:	4303      	orrs	r3, r0
    c714:	0018      	movs	r0, r3
    c716:	bc3c      	pop	{r2, r3, r4, r5}
    c718:	4690      	mov	r8, r2
    c71a:	4699      	mov	r9, r3
    c71c:	46a2      	mov	sl, r4
    c71e:	46ab      	mov	fp, r5
    c720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c722:	2c00      	cmp	r4, #0
    c724:	d016      	beq.n	c754 <__ledf2+0x90>
    c726:	45cb      	cmp	fp, r9
    c728:	d017      	beq.n	c75a <__ledf2+0x96>
    c72a:	465b      	mov	r3, fp
    c72c:	4259      	negs	r1, r3
    c72e:	2301      	movs	r3, #1
    c730:	430b      	orrs	r3, r1
    c732:	e7ef      	b.n	c714 <__ledf2+0x50>
    c734:	0031      	movs	r1, r6
    c736:	2302      	movs	r3, #2
    c738:	4301      	orrs	r1, r0
    c73a:	d1eb      	bne.n	c714 <__ledf2+0x50>
    c73c:	e7d9      	b.n	c6f2 <__ledf2+0x2e>
    c73e:	0039      	movs	r1, r7
    c740:	2302      	movs	r3, #2
    c742:	4311      	orrs	r1, r2
    c744:	d1e6      	bne.n	c714 <__ledf2+0x50>
    c746:	e7d7      	b.n	c6f8 <__ledf2+0x34>
    c748:	433a      	orrs	r2, r7
    c74a:	d1dd      	bne.n	c708 <__ledf2+0x44>
    c74c:	2300      	movs	r3, #0
    c74e:	2800      	cmp	r0, #0
    c750:	d0e0      	beq.n	c714 <__ledf2+0x50>
    c752:	e7ea      	b.n	c72a <__ledf2+0x66>
    c754:	433a      	orrs	r2, r7
    c756:	d1e6      	bne.n	c726 <__ledf2+0x62>
    c758:	e7e7      	b.n	c72a <__ledf2+0x66>
    c75a:	42a5      	cmp	r5, r4
    c75c:	dce5      	bgt.n	c72a <__ledf2+0x66>
    c75e:	db05      	blt.n	c76c <__ledf2+0xa8>
    c760:	42be      	cmp	r6, r7
    c762:	d8e2      	bhi.n	c72a <__ledf2+0x66>
    c764:	d007      	beq.n	c776 <__ledf2+0xb2>
    c766:	2300      	movs	r3, #0
    c768:	42be      	cmp	r6, r7
    c76a:	d2d3      	bcs.n	c714 <__ledf2+0x50>
    c76c:	4659      	mov	r1, fp
    c76e:	2301      	movs	r3, #1
    c770:	3901      	subs	r1, #1
    c772:	430b      	orrs	r3, r1
    c774:	e7ce      	b.n	c714 <__ledf2+0x50>
    c776:	45c4      	cmp	ip, r8
    c778:	d8d7      	bhi.n	c72a <__ledf2+0x66>
    c77a:	2300      	movs	r3, #0
    c77c:	45c4      	cmp	ip, r8
    c77e:	d3f5      	bcc.n	c76c <__ledf2+0xa8>
    c780:	e7c8      	b.n	c714 <__ledf2+0x50>
    c782:	46c0      	nop			; (mov r8, r8)
    c784:	000007ff 	.word	0x000007ff

0000c788 <__aeabi_dmul>:
    c788:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78a:	4657      	mov	r7, sl
    c78c:	4645      	mov	r5, r8
    c78e:	46de      	mov	lr, fp
    c790:	464e      	mov	r6, r9
    c792:	b5e0      	push	{r5, r6, r7, lr}
    c794:	030c      	lsls	r4, r1, #12
    c796:	4698      	mov	r8, r3
    c798:	004e      	lsls	r6, r1, #1
    c79a:	0b23      	lsrs	r3, r4, #12
    c79c:	b087      	sub	sp, #28
    c79e:	0007      	movs	r7, r0
    c7a0:	4692      	mov	sl, r2
    c7a2:	469b      	mov	fp, r3
    c7a4:	0d76      	lsrs	r6, r6, #21
    c7a6:	0fcd      	lsrs	r5, r1, #31
    c7a8:	2e00      	cmp	r6, #0
    c7aa:	d06b      	beq.n	c884 <__aeabi_dmul+0xfc>
    c7ac:	4b6d      	ldr	r3, [pc, #436]	; (c964 <__aeabi_dmul+0x1dc>)
    c7ae:	429e      	cmp	r6, r3
    c7b0:	d035      	beq.n	c81e <__aeabi_dmul+0x96>
    c7b2:	2480      	movs	r4, #128	; 0x80
    c7b4:	465b      	mov	r3, fp
    c7b6:	0f42      	lsrs	r2, r0, #29
    c7b8:	0424      	lsls	r4, r4, #16
    c7ba:	00db      	lsls	r3, r3, #3
    c7bc:	4314      	orrs	r4, r2
    c7be:	431c      	orrs	r4, r3
    c7c0:	00c3      	lsls	r3, r0, #3
    c7c2:	4699      	mov	r9, r3
    c7c4:	4b68      	ldr	r3, [pc, #416]	; (c968 <__aeabi_dmul+0x1e0>)
    c7c6:	46a3      	mov	fp, r4
    c7c8:	469c      	mov	ip, r3
    c7ca:	2300      	movs	r3, #0
    c7cc:	2700      	movs	r7, #0
    c7ce:	4466      	add	r6, ip
    c7d0:	9302      	str	r3, [sp, #8]
    c7d2:	4643      	mov	r3, r8
    c7d4:	031c      	lsls	r4, r3, #12
    c7d6:	005a      	lsls	r2, r3, #1
    c7d8:	0fdb      	lsrs	r3, r3, #31
    c7da:	4650      	mov	r0, sl
    c7dc:	0b24      	lsrs	r4, r4, #12
    c7de:	0d52      	lsrs	r2, r2, #21
    c7e0:	4698      	mov	r8, r3
    c7e2:	d100      	bne.n	c7e6 <__aeabi_dmul+0x5e>
    c7e4:	e076      	b.n	c8d4 <__aeabi_dmul+0x14c>
    c7e6:	4b5f      	ldr	r3, [pc, #380]	; (c964 <__aeabi_dmul+0x1dc>)
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d06d      	beq.n	c8c8 <__aeabi_dmul+0x140>
    c7ec:	2380      	movs	r3, #128	; 0x80
    c7ee:	0f41      	lsrs	r1, r0, #29
    c7f0:	041b      	lsls	r3, r3, #16
    c7f2:	430b      	orrs	r3, r1
    c7f4:	495c      	ldr	r1, [pc, #368]	; (c968 <__aeabi_dmul+0x1e0>)
    c7f6:	00e4      	lsls	r4, r4, #3
    c7f8:	468c      	mov	ip, r1
    c7fa:	431c      	orrs	r4, r3
    c7fc:	00c3      	lsls	r3, r0, #3
    c7fe:	2000      	movs	r0, #0
    c800:	4462      	add	r2, ip
    c802:	4641      	mov	r1, r8
    c804:	18b6      	adds	r6, r6, r2
    c806:	4069      	eors	r1, r5
    c808:	1c72      	adds	r2, r6, #1
    c80a:	9101      	str	r1, [sp, #4]
    c80c:	4694      	mov	ip, r2
    c80e:	4307      	orrs	r7, r0
    c810:	2f0f      	cmp	r7, #15
    c812:	d900      	bls.n	c816 <__aeabi_dmul+0x8e>
    c814:	e0b0      	b.n	c978 <__aeabi_dmul+0x1f0>
    c816:	4a55      	ldr	r2, [pc, #340]	; (c96c <__aeabi_dmul+0x1e4>)
    c818:	00bf      	lsls	r7, r7, #2
    c81a:	59d2      	ldr	r2, [r2, r7]
    c81c:	4697      	mov	pc, r2
    c81e:	465b      	mov	r3, fp
    c820:	4303      	orrs	r3, r0
    c822:	4699      	mov	r9, r3
    c824:	d000      	beq.n	c828 <__aeabi_dmul+0xa0>
    c826:	e087      	b.n	c938 <__aeabi_dmul+0x1b0>
    c828:	2300      	movs	r3, #0
    c82a:	469b      	mov	fp, r3
    c82c:	3302      	adds	r3, #2
    c82e:	2708      	movs	r7, #8
    c830:	9302      	str	r3, [sp, #8]
    c832:	e7ce      	b.n	c7d2 <__aeabi_dmul+0x4a>
    c834:	4642      	mov	r2, r8
    c836:	9201      	str	r2, [sp, #4]
    c838:	2802      	cmp	r0, #2
    c83a:	d067      	beq.n	c90c <__aeabi_dmul+0x184>
    c83c:	2803      	cmp	r0, #3
    c83e:	d100      	bne.n	c842 <__aeabi_dmul+0xba>
    c840:	e20e      	b.n	cc60 <__aeabi_dmul+0x4d8>
    c842:	2801      	cmp	r0, #1
    c844:	d000      	beq.n	c848 <__aeabi_dmul+0xc0>
    c846:	e162      	b.n	cb0e <__aeabi_dmul+0x386>
    c848:	2300      	movs	r3, #0
    c84a:	2400      	movs	r4, #0
    c84c:	2200      	movs	r2, #0
    c84e:	4699      	mov	r9, r3
    c850:	9901      	ldr	r1, [sp, #4]
    c852:	4001      	ands	r1, r0
    c854:	b2cd      	uxtb	r5, r1
    c856:	2100      	movs	r1, #0
    c858:	0312      	lsls	r2, r2, #12
    c85a:	0d0b      	lsrs	r3, r1, #20
    c85c:	0b12      	lsrs	r2, r2, #12
    c85e:	051b      	lsls	r3, r3, #20
    c860:	4313      	orrs	r3, r2
    c862:	4a43      	ldr	r2, [pc, #268]	; (c970 <__aeabi_dmul+0x1e8>)
    c864:	0524      	lsls	r4, r4, #20
    c866:	4013      	ands	r3, r2
    c868:	431c      	orrs	r4, r3
    c86a:	0064      	lsls	r4, r4, #1
    c86c:	07ed      	lsls	r5, r5, #31
    c86e:	0864      	lsrs	r4, r4, #1
    c870:	432c      	orrs	r4, r5
    c872:	4648      	mov	r0, r9
    c874:	0021      	movs	r1, r4
    c876:	b007      	add	sp, #28
    c878:	bc3c      	pop	{r2, r3, r4, r5}
    c87a:	4690      	mov	r8, r2
    c87c:	4699      	mov	r9, r3
    c87e:	46a2      	mov	sl, r4
    c880:	46ab      	mov	fp, r5
    c882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c884:	4303      	orrs	r3, r0
    c886:	4699      	mov	r9, r3
    c888:	d04f      	beq.n	c92a <__aeabi_dmul+0x1a2>
    c88a:	465b      	mov	r3, fp
    c88c:	2b00      	cmp	r3, #0
    c88e:	d100      	bne.n	c892 <__aeabi_dmul+0x10a>
    c890:	e189      	b.n	cba6 <__aeabi_dmul+0x41e>
    c892:	4658      	mov	r0, fp
    c894:	f7fa f894 	bl	69c0 <__clzsi2>
    c898:	0003      	movs	r3, r0
    c89a:	3b0b      	subs	r3, #11
    c89c:	2b1c      	cmp	r3, #28
    c89e:	dd00      	ble.n	c8a2 <__aeabi_dmul+0x11a>
    c8a0:	e17a      	b.n	cb98 <__aeabi_dmul+0x410>
    c8a2:	221d      	movs	r2, #29
    c8a4:	1ad3      	subs	r3, r2, r3
    c8a6:	003a      	movs	r2, r7
    c8a8:	0001      	movs	r1, r0
    c8aa:	465c      	mov	r4, fp
    c8ac:	40da      	lsrs	r2, r3
    c8ae:	3908      	subs	r1, #8
    c8b0:	408c      	lsls	r4, r1
    c8b2:	0013      	movs	r3, r2
    c8b4:	408f      	lsls	r7, r1
    c8b6:	4323      	orrs	r3, r4
    c8b8:	469b      	mov	fp, r3
    c8ba:	46b9      	mov	r9, r7
    c8bc:	2300      	movs	r3, #0
    c8be:	4e2d      	ldr	r6, [pc, #180]	; (c974 <__aeabi_dmul+0x1ec>)
    c8c0:	2700      	movs	r7, #0
    c8c2:	1a36      	subs	r6, r6, r0
    c8c4:	9302      	str	r3, [sp, #8]
    c8c6:	e784      	b.n	c7d2 <__aeabi_dmul+0x4a>
    c8c8:	4653      	mov	r3, sl
    c8ca:	4323      	orrs	r3, r4
    c8cc:	d12a      	bne.n	c924 <__aeabi_dmul+0x19c>
    c8ce:	2400      	movs	r4, #0
    c8d0:	2002      	movs	r0, #2
    c8d2:	e796      	b.n	c802 <__aeabi_dmul+0x7a>
    c8d4:	4653      	mov	r3, sl
    c8d6:	4323      	orrs	r3, r4
    c8d8:	d020      	beq.n	c91c <__aeabi_dmul+0x194>
    c8da:	2c00      	cmp	r4, #0
    c8dc:	d100      	bne.n	c8e0 <__aeabi_dmul+0x158>
    c8de:	e157      	b.n	cb90 <__aeabi_dmul+0x408>
    c8e0:	0020      	movs	r0, r4
    c8e2:	f7fa f86d 	bl	69c0 <__clzsi2>
    c8e6:	0003      	movs	r3, r0
    c8e8:	3b0b      	subs	r3, #11
    c8ea:	2b1c      	cmp	r3, #28
    c8ec:	dd00      	ble.n	c8f0 <__aeabi_dmul+0x168>
    c8ee:	e149      	b.n	cb84 <__aeabi_dmul+0x3fc>
    c8f0:	211d      	movs	r1, #29
    c8f2:	1acb      	subs	r3, r1, r3
    c8f4:	4651      	mov	r1, sl
    c8f6:	0002      	movs	r2, r0
    c8f8:	40d9      	lsrs	r1, r3
    c8fa:	4653      	mov	r3, sl
    c8fc:	3a08      	subs	r2, #8
    c8fe:	4094      	lsls	r4, r2
    c900:	4093      	lsls	r3, r2
    c902:	430c      	orrs	r4, r1
    c904:	4a1b      	ldr	r2, [pc, #108]	; (c974 <__aeabi_dmul+0x1ec>)
    c906:	1a12      	subs	r2, r2, r0
    c908:	2000      	movs	r0, #0
    c90a:	e77a      	b.n	c802 <__aeabi_dmul+0x7a>
    c90c:	2501      	movs	r5, #1
    c90e:	9b01      	ldr	r3, [sp, #4]
    c910:	4c14      	ldr	r4, [pc, #80]	; (c964 <__aeabi_dmul+0x1dc>)
    c912:	401d      	ands	r5, r3
    c914:	2300      	movs	r3, #0
    c916:	2200      	movs	r2, #0
    c918:	4699      	mov	r9, r3
    c91a:	e79c      	b.n	c856 <__aeabi_dmul+0xce>
    c91c:	2400      	movs	r4, #0
    c91e:	2200      	movs	r2, #0
    c920:	2001      	movs	r0, #1
    c922:	e76e      	b.n	c802 <__aeabi_dmul+0x7a>
    c924:	4653      	mov	r3, sl
    c926:	2003      	movs	r0, #3
    c928:	e76b      	b.n	c802 <__aeabi_dmul+0x7a>
    c92a:	2300      	movs	r3, #0
    c92c:	469b      	mov	fp, r3
    c92e:	3301      	adds	r3, #1
    c930:	2704      	movs	r7, #4
    c932:	2600      	movs	r6, #0
    c934:	9302      	str	r3, [sp, #8]
    c936:	e74c      	b.n	c7d2 <__aeabi_dmul+0x4a>
    c938:	2303      	movs	r3, #3
    c93a:	4681      	mov	r9, r0
    c93c:	270c      	movs	r7, #12
    c93e:	9302      	str	r3, [sp, #8]
    c940:	e747      	b.n	c7d2 <__aeabi_dmul+0x4a>
    c942:	2280      	movs	r2, #128	; 0x80
    c944:	2300      	movs	r3, #0
    c946:	2500      	movs	r5, #0
    c948:	0312      	lsls	r2, r2, #12
    c94a:	4699      	mov	r9, r3
    c94c:	4c05      	ldr	r4, [pc, #20]	; (c964 <__aeabi_dmul+0x1dc>)
    c94e:	e782      	b.n	c856 <__aeabi_dmul+0xce>
    c950:	465c      	mov	r4, fp
    c952:	464b      	mov	r3, r9
    c954:	9802      	ldr	r0, [sp, #8]
    c956:	e76f      	b.n	c838 <__aeabi_dmul+0xb0>
    c958:	465c      	mov	r4, fp
    c95a:	464b      	mov	r3, r9
    c95c:	9501      	str	r5, [sp, #4]
    c95e:	9802      	ldr	r0, [sp, #8]
    c960:	e76a      	b.n	c838 <__aeabi_dmul+0xb0>
    c962:	46c0      	nop			; (mov r8, r8)
    c964:	000007ff 	.word	0x000007ff
    c968:	fffffc01 	.word	0xfffffc01
    c96c:	0000da80 	.word	0x0000da80
    c970:	800fffff 	.word	0x800fffff
    c974:	fffffc0d 	.word	0xfffffc0d
    c978:	464a      	mov	r2, r9
    c97a:	4649      	mov	r1, r9
    c97c:	0c17      	lsrs	r7, r2, #16
    c97e:	0c1a      	lsrs	r2, r3, #16
    c980:	041b      	lsls	r3, r3, #16
    c982:	0c1b      	lsrs	r3, r3, #16
    c984:	0408      	lsls	r0, r1, #16
    c986:	0019      	movs	r1, r3
    c988:	0c00      	lsrs	r0, r0, #16
    c98a:	4341      	muls	r1, r0
    c98c:	0015      	movs	r5, r2
    c98e:	4688      	mov	r8, r1
    c990:	0019      	movs	r1, r3
    c992:	437d      	muls	r5, r7
    c994:	4379      	muls	r1, r7
    c996:	9503      	str	r5, [sp, #12]
    c998:	4689      	mov	r9, r1
    c99a:	0029      	movs	r1, r5
    c99c:	0015      	movs	r5, r2
    c99e:	4345      	muls	r5, r0
    c9a0:	444d      	add	r5, r9
    c9a2:	9502      	str	r5, [sp, #8]
    c9a4:	4645      	mov	r5, r8
    c9a6:	0c2d      	lsrs	r5, r5, #16
    c9a8:	46aa      	mov	sl, r5
    c9aa:	9d02      	ldr	r5, [sp, #8]
    c9ac:	4455      	add	r5, sl
    c9ae:	45a9      	cmp	r9, r5
    c9b0:	d906      	bls.n	c9c0 <__aeabi_dmul+0x238>
    c9b2:	468a      	mov	sl, r1
    c9b4:	2180      	movs	r1, #128	; 0x80
    c9b6:	0249      	lsls	r1, r1, #9
    c9b8:	4689      	mov	r9, r1
    c9ba:	44ca      	add	sl, r9
    c9bc:	4651      	mov	r1, sl
    c9be:	9103      	str	r1, [sp, #12]
    c9c0:	0c29      	lsrs	r1, r5, #16
    c9c2:	9104      	str	r1, [sp, #16]
    c9c4:	4641      	mov	r1, r8
    c9c6:	0409      	lsls	r1, r1, #16
    c9c8:	042d      	lsls	r5, r5, #16
    c9ca:	0c09      	lsrs	r1, r1, #16
    c9cc:	4688      	mov	r8, r1
    c9ce:	0029      	movs	r1, r5
    c9d0:	0c25      	lsrs	r5, r4, #16
    c9d2:	0424      	lsls	r4, r4, #16
    c9d4:	4441      	add	r1, r8
    c9d6:	0c24      	lsrs	r4, r4, #16
    c9d8:	9105      	str	r1, [sp, #20]
    c9da:	0021      	movs	r1, r4
    c9dc:	4341      	muls	r1, r0
    c9de:	4688      	mov	r8, r1
    c9e0:	0021      	movs	r1, r4
    c9e2:	4379      	muls	r1, r7
    c9e4:	468a      	mov	sl, r1
    c9e6:	4368      	muls	r0, r5
    c9e8:	4641      	mov	r1, r8
    c9ea:	4450      	add	r0, sl
    c9ec:	4681      	mov	r9, r0
    c9ee:	0c08      	lsrs	r0, r1, #16
    c9f0:	4448      	add	r0, r9
    c9f2:	436f      	muls	r7, r5
    c9f4:	4582      	cmp	sl, r0
    c9f6:	d903      	bls.n	ca00 <__aeabi_dmul+0x278>
    c9f8:	2180      	movs	r1, #128	; 0x80
    c9fa:	0249      	lsls	r1, r1, #9
    c9fc:	4689      	mov	r9, r1
    c9fe:	444f      	add	r7, r9
    ca00:	0c01      	lsrs	r1, r0, #16
    ca02:	4689      	mov	r9, r1
    ca04:	0039      	movs	r1, r7
    ca06:	4449      	add	r1, r9
    ca08:	9102      	str	r1, [sp, #8]
    ca0a:	4641      	mov	r1, r8
    ca0c:	040f      	lsls	r7, r1, #16
    ca0e:	9904      	ldr	r1, [sp, #16]
    ca10:	0c3f      	lsrs	r7, r7, #16
    ca12:	4688      	mov	r8, r1
    ca14:	0400      	lsls	r0, r0, #16
    ca16:	19c0      	adds	r0, r0, r7
    ca18:	4480      	add	r8, r0
    ca1a:	4641      	mov	r1, r8
    ca1c:	9104      	str	r1, [sp, #16]
    ca1e:	4659      	mov	r1, fp
    ca20:	0c0f      	lsrs	r7, r1, #16
    ca22:	0409      	lsls	r1, r1, #16
    ca24:	0c09      	lsrs	r1, r1, #16
    ca26:	4688      	mov	r8, r1
    ca28:	4359      	muls	r1, r3
    ca2a:	468a      	mov	sl, r1
    ca2c:	0039      	movs	r1, r7
    ca2e:	4351      	muls	r1, r2
    ca30:	4689      	mov	r9, r1
    ca32:	4641      	mov	r1, r8
    ca34:	434a      	muls	r2, r1
    ca36:	4651      	mov	r1, sl
    ca38:	0c09      	lsrs	r1, r1, #16
    ca3a:	468b      	mov	fp, r1
    ca3c:	437b      	muls	r3, r7
    ca3e:	18d2      	adds	r2, r2, r3
    ca40:	445a      	add	r2, fp
    ca42:	4293      	cmp	r3, r2
    ca44:	d903      	bls.n	ca4e <__aeabi_dmul+0x2c6>
    ca46:	2380      	movs	r3, #128	; 0x80
    ca48:	025b      	lsls	r3, r3, #9
    ca4a:	469b      	mov	fp, r3
    ca4c:	44d9      	add	r9, fp
    ca4e:	4651      	mov	r1, sl
    ca50:	0409      	lsls	r1, r1, #16
    ca52:	0c09      	lsrs	r1, r1, #16
    ca54:	468a      	mov	sl, r1
    ca56:	4641      	mov	r1, r8
    ca58:	4361      	muls	r1, r4
    ca5a:	437c      	muls	r4, r7
    ca5c:	0c13      	lsrs	r3, r2, #16
    ca5e:	0412      	lsls	r2, r2, #16
    ca60:	444b      	add	r3, r9
    ca62:	4452      	add	r2, sl
    ca64:	46a1      	mov	r9, r4
    ca66:	468a      	mov	sl, r1
    ca68:	003c      	movs	r4, r7
    ca6a:	4641      	mov	r1, r8
    ca6c:	436c      	muls	r4, r5
    ca6e:	434d      	muls	r5, r1
    ca70:	4651      	mov	r1, sl
    ca72:	444d      	add	r5, r9
    ca74:	0c0f      	lsrs	r7, r1, #16
    ca76:	197d      	adds	r5, r7, r5
    ca78:	45a9      	cmp	r9, r5
    ca7a:	d903      	bls.n	ca84 <__aeabi_dmul+0x2fc>
    ca7c:	2180      	movs	r1, #128	; 0x80
    ca7e:	0249      	lsls	r1, r1, #9
    ca80:	4688      	mov	r8, r1
    ca82:	4444      	add	r4, r8
    ca84:	9f04      	ldr	r7, [sp, #16]
    ca86:	9903      	ldr	r1, [sp, #12]
    ca88:	46b8      	mov	r8, r7
    ca8a:	4441      	add	r1, r8
    ca8c:	468b      	mov	fp, r1
    ca8e:	4583      	cmp	fp, r0
    ca90:	4180      	sbcs	r0, r0
    ca92:	4241      	negs	r1, r0
    ca94:	4688      	mov	r8, r1
    ca96:	4651      	mov	r1, sl
    ca98:	0408      	lsls	r0, r1, #16
    ca9a:	042f      	lsls	r7, r5, #16
    ca9c:	0c00      	lsrs	r0, r0, #16
    ca9e:	183f      	adds	r7, r7, r0
    caa0:	4658      	mov	r0, fp
    caa2:	9902      	ldr	r1, [sp, #8]
    caa4:	1810      	adds	r0, r2, r0
    caa6:	4689      	mov	r9, r1
    caa8:	4290      	cmp	r0, r2
    caaa:	4192      	sbcs	r2, r2
    caac:	444f      	add	r7, r9
    caae:	46ba      	mov	sl, r7
    cab0:	4252      	negs	r2, r2
    cab2:	4699      	mov	r9, r3
    cab4:	4693      	mov	fp, r2
    cab6:	44c2      	add	sl, r8
    cab8:	44d1      	add	r9, sl
    caba:	44cb      	add	fp, r9
    cabc:	428f      	cmp	r7, r1
    cabe:	41bf      	sbcs	r7, r7
    cac0:	45c2      	cmp	sl, r8
    cac2:	4189      	sbcs	r1, r1
    cac4:	4599      	cmp	r9, r3
    cac6:	419b      	sbcs	r3, r3
    cac8:	4593      	cmp	fp, r2
    caca:	4192      	sbcs	r2, r2
    cacc:	427f      	negs	r7, r7
    cace:	4249      	negs	r1, r1
    cad0:	0c2d      	lsrs	r5, r5, #16
    cad2:	4252      	negs	r2, r2
    cad4:	430f      	orrs	r7, r1
    cad6:	425b      	negs	r3, r3
    cad8:	4313      	orrs	r3, r2
    cada:	197f      	adds	r7, r7, r5
    cadc:	18ff      	adds	r7, r7, r3
    cade:	465b      	mov	r3, fp
    cae0:	193c      	adds	r4, r7, r4
    cae2:	0ddb      	lsrs	r3, r3, #23
    cae4:	9a05      	ldr	r2, [sp, #20]
    cae6:	0264      	lsls	r4, r4, #9
    cae8:	431c      	orrs	r4, r3
    caea:	0243      	lsls	r3, r0, #9
    caec:	4313      	orrs	r3, r2
    caee:	1e5d      	subs	r5, r3, #1
    caf0:	41ab      	sbcs	r3, r5
    caf2:	465a      	mov	r2, fp
    caf4:	0dc0      	lsrs	r0, r0, #23
    caf6:	4303      	orrs	r3, r0
    caf8:	0252      	lsls	r2, r2, #9
    cafa:	4313      	orrs	r3, r2
    cafc:	01e2      	lsls	r2, r4, #7
    cafe:	d556      	bpl.n	cbae <__aeabi_dmul+0x426>
    cb00:	2001      	movs	r0, #1
    cb02:	085a      	lsrs	r2, r3, #1
    cb04:	4003      	ands	r3, r0
    cb06:	4313      	orrs	r3, r2
    cb08:	07e2      	lsls	r2, r4, #31
    cb0a:	4313      	orrs	r3, r2
    cb0c:	0864      	lsrs	r4, r4, #1
    cb0e:	485a      	ldr	r0, [pc, #360]	; (cc78 <__aeabi_dmul+0x4f0>)
    cb10:	4460      	add	r0, ip
    cb12:	2800      	cmp	r0, #0
    cb14:	dd4d      	ble.n	cbb2 <__aeabi_dmul+0x42a>
    cb16:	075a      	lsls	r2, r3, #29
    cb18:	d009      	beq.n	cb2e <__aeabi_dmul+0x3a6>
    cb1a:	220f      	movs	r2, #15
    cb1c:	401a      	ands	r2, r3
    cb1e:	2a04      	cmp	r2, #4
    cb20:	d005      	beq.n	cb2e <__aeabi_dmul+0x3a6>
    cb22:	1d1a      	adds	r2, r3, #4
    cb24:	429a      	cmp	r2, r3
    cb26:	419b      	sbcs	r3, r3
    cb28:	425b      	negs	r3, r3
    cb2a:	18e4      	adds	r4, r4, r3
    cb2c:	0013      	movs	r3, r2
    cb2e:	01e2      	lsls	r2, r4, #7
    cb30:	d504      	bpl.n	cb3c <__aeabi_dmul+0x3b4>
    cb32:	2080      	movs	r0, #128	; 0x80
    cb34:	4a51      	ldr	r2, [pc, #324]	; (cc7c <__aeabi_dmul+0x4f4>)
    cb36:	00c0      	lsls	r0, r0, #3
    cb38:	4014      	ands	r4, r2
    cb3a:	4460      	add	r0, ip
    cb3c:	4a50      	ldr	r2, [pc, #320]	; (cc80 <__aeabi_dmul+0x4f8>)
    cb3e:	4290      	cmp	r0, r2
    cb40:	dd00      	ble.n	cb44 <__aeabi_dmul+0x3bc>
    cb42:	e6e3      	b.n	c90c <__aeabi_dmul+0x184>
    cb44:	2501      	movs	r5, #1
    cb46:	08db      	lsrs	r3, r3, #3
    cb48:	0762      	lsls	r2, r4, #29
    cb4a:	431a      	orrs	r2, r3
    cb4c:	0264      	lsls	r4, r4, #9
    cb4e:	9b01      	ldr	r3, [sp, #4]
    cb50:	4691      	mov	r9, r2
    cb52:	0b22      	lsrs	r2, r4, #12
    cb54:	0544      	lsls	r4, r0, #21
    cb56:	0d64      	lsrs	r4, r4, #21
    cb58:	401d      	ands	r5, r3
    cb5a:	e67c      	b.n	c856 <__aeabi_dmul+0xce>
    cb5c:	2280      	movs	r2, #128	; 0x80
    cb5e:	4659      	mov	r1, fp
    cb60:	0312      	lsls	r2, r2, #12
    cb62:	4211      	tst	r1, r2
    cb64:	d008      	beq.n	cb78 <__aeabi_dmul+0x3f0>
    cb66:	4214      	tst	r4, r2
    cb68:	d106      	bne.n	cb78 <__aeabi_dmul+0x3f0>
    cb6a:	4322      	orrs	r2, r4
    cb6c:	0312      	lsls	r2, r2, #12
    cb6e:	0b12      	lsrs	r2, r2, #12
    cb70:	4645      	mov	r5, r8
    cb72:	4699      	mov	r9, r3
    cb74:	4c43      	ldr	r4, [pc, #268]	; (cc84 <__aeabi_dmul+0x4fc>)
    cb76:	e66e      	b.n	c856 <__aeabi_dmul+0xce>
    cb78:	465b      	mov	r3, fp
    cb7a:	431a      	orrs	r2, r3
    cb7c:	0312      	lsls	r2, r2, #12
    cb7e:	0b12      	lsrs	r2, r2, #12
    cb80:	4c40      	ldr	r4, [pc, #256]	; (cc84 <__aeabi_dmul+0x4fc>)
    cb82:	e668      	b.n	c856 <__aeabi_dmul+0xce>
    cb84:	0003      	movs	r3, r0
    cb86:	4654      	mov	r4, sl
    cb88:	3b28      	subs	r3, #40	; 0x28
    cb8a:	409c      	lsls	r4, r3
    cb8c:	2300      	movs	r3, #0
    cb8e:	e6b9      	b.n	c904 <__aeabi_dmul+0x17c>
    cb90:	f7f9 ff16 	bl	69c0 <__clzsi2>
    cb94:	3020      	adds	r0, #32
    cb96:	e6a6      	b.n	c8e6 <__aeabi_dmul+0x15e>
    cb98:	0003      	movs	r3, r0
    cb9a:	3b28      	subs	r3, #40	; 0x28
    cb9c:	409f      	lsls	r7, r3
    cb9e:	2300      	movs	r3, #0
    cba0:	46bb      	mov	fp, r7
    cba2:	4699      	mov	r9, r3
    cba4:	e68a      	b.n	c8bc <__aeabi_dmul+0x134>
    cba6:	f7f9 ff0b 	bl	69c0 <__clzsi2>
    cbaa:	3020      	adds	r0, #32
    cbac:	e674      	b.n	c898 <__aeabi_dmul+0x110>
    cbae:	46b4      	mov	ip, r6
    cbb0:	e7ad      	b.n	cb0e <__aeabi_dmul+0x386>
    cbb2:	2501      	movs	r5, #1
    cbb4:	1a2a      	subs	r2, r5, r0
    cbb6:	2a38      	cmp	r2, #56	; 0x38
    cbb8:	dd06      	ble.n	cbc8 <__aeabi_dmul+0x440>
    cbba:	9b01      	ldr	r3, [sp, #4]
    cbbc:	2400      	movs	r4, #0
    cbbe:	401d      	ands	r5, r3
    cbc0:	2300      	movs	r3, #0
    cbc2:	2200      	movs	r2, #0
    cbc4:	4699      	mov	r9, r3
    cbc6:	e646      	b.n	c856 <__aeabi_dmul+0xce>
    cbc8:	2a1f      	cmp	r2, #31
    cbca:	dc21      	bgt.n	cc10 <__aeabi_dmul+0x488>
    cbcc:	2520      	movs	r5, #32
    cbce:	0020      	movs	r0, r4
    cbd0:	1aad      	subs	r5, r5, r2
    cbd2:	001e      	movs	r6, r3
    cbd4:	40ab      	lsls	r3, r5
    cbd6:	40a8      	lsls	r0, r5
    cbd8:	40d6      	lsrs	r6, r2
    cbda:	1e5d      	subs	r5, r3, #1
    cbdc:	41ab      	sbcs	r3, r5
    cbde:	4330      	orrs	r0, r6
    cbe0:	4318      	orrs	r0, r3
    cbe2:	40d4      	lsrs	r4, r2
    cbe4:	0743      	lsls	r3, r0, #29
    cbe6:	d009      	beq.n	cbfc <__aeabi_dmul+0x474>
    cbe8:	230f      	movs	r3, #15
    cbea:	4003      	ands	r3, r0
    cbec:	2b04      	cmp	r3, #4
    cbee:	d005      	beq.n	cbfc <__aeabi_dmul+0x474>
    cbf0:	0003      	movs	r3, r0
    cbf2:	1d18      	adds	r0, r3, #4
    cbf4:	4298      	cmp	r0, r3
    cbf6:	419b      	sbcs	r3, r3
    cbf8:	425b      	negs	r3, r3
    cbfa:	18e4      	adds	r4, r4, r3
    cbfc:	0223      	lsls	r3, r4, #8
    cbfe:	d521      	bpl.n	cc44 <__aeabi_dmul+0x4bc>
    cc00:	2501      	movs	r5, #1
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	2401      	movs	r4, #1
    cc06:	401d      	ands	r5, r3
    cc08:	2300      	movs	r3, #0
    cc0a:	2200      	movs	r2, #0
    cc0c:	4699      	mov	r9, r3
    cc0e:	e622      	b.n	c856 <__aeabi_dmul+0xce>
    cc10:	251f      	movs	r5, #31
    cc12:	0021      	movs	r1, r4
    cc14:	426d      	negs	r5, r5
    cc16:	1a28      	subs	r0, r5, r0
    cc18:	40c1      	lsrs	r1, r0
    cc1a:	0008      	movs	r0, r1
    cc1c:	2a20      	cmp	r2, #32
    cc1e:	d01d      	beq.n	cc5c <__aeabi_dmul+0x4d4>
    cc20:	355f      	adds	r5, #95	; 0x5f
    cc22:	1aaa      	subs	r2, r5, r2
    cc24:	4094      	lsls	r4, r2
    cc26:	4323      	orrs	r3, r4
    cc28:	1e5c      	subs	r4, r3, #1
    cc2a:	41a3      	sbcs	r3, r4
    cc2c:	2507      	movs	r5, #7
    cc2e:	4303      	orrs	r3, r0
    cc30:	401d      	ands	r5, r3
    cc32:	2200      	movs	r2, #0
    cc34:	2d00      	cmp	r5, #0
    cc36:	d009      	beq.n	cc4c <__aeabi_dmul+0x4c4>
    cc38:	220f      	movs	r2, #15
    cc3a:	2400      	movs	r4, #0
    cc3c:	401a      	ands	r2, r3
    cc3e:	0018      	movs	r0, r3
    cc40:	2a04      	cmp	r2, #4
    cc42:	d1d6      	bne.n	cbf2 <__aeabi_dmul+0x46a>
    cc44:	0003      	movs	r3, r0
    cc46:	0765      	lsls	r5, r4, #29
    cc48:	0264      	lsls	r4, r4, #9
    cc4a:	0b22      	lsrs	r2, r4, #12
    cc4c:	08db      	lsrs	r3, r3, #3
    cc4e:	432b      	orrs	r3, r5
    cc50:	2501      	movs	r5, #1
    cc52:	4699      	mov	r9, r3
    cc54:	9b01      	ldr	r3, [sp, #4]
    cc56:	2400      	movs	r4, #0
    cc58:	401d      	ands	r5, r3
    cc5a:	e5fc      	b.n	c856 <__aeabi_dmul+0xce>
    cc5c:	2400      	movs	r4, #0
    cc5e:	e7e2      	b.n	cc26 <__aeabi_dmul+0x49e>
    cc60:	2280      	movs	r2, #128	; 0x80
    cc62:	2501      	movs	r5, #1
    cc64:	0312      	lsls	r2, r2, #12
    cc66:	4322      	orrs	r2, r4
    cc68:	9901      	ldr	r1, [sp, #4]
    cc6a:	0312      	lsls	r2, r2, #12
    cc6c:	0b12      	lsrs	r2, r2, #12
    cc6e:	400d      	ands	r5, r1
    cc70:	4699      	mov	r9, r3
    cc72:	4c04      	ldr	r4, [pc, #16]	; (cc84 <__aeabi_dmul+0x4fc>)
    cc74:	e5ef      	b.n	c856 <__aeabi_dmul+0xce>
    cc76:	46c0      	nop			; (mov r8, r8)
    cc78:	000003ff 	.word	0x000003ff
    cc7c:	feffffff 	.word	0xfeffffff
    cc80:	000007fe 	.word	0x000007fe
    cc84:	000007ff 	.word	0x000007ff

0000cc88 <__aeabi_dsub>:
    cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc8a:	4646      	mov	r6, r8
    cc8c:	46d6      	mov	lr, sl
    cc8e:	464f      	mov	r7, r9
    cc90:	030c      	lsls	r4, r1, #12
    cc92:	b5c0      	push	{r6, r7, lr}
    cc94:	0fcd      	lsrs	r5, r1, #31
    cc96:	004e      	lsls	r6, r1, #1
    cc98:	0a61      	lsrs	r1, r4, #9
    cc9a:	0f44      	lsrs	r4, r0, #29
    cc9c:	430c      	orrs	r4, r1
    cc9e:	00c1      	lsls	r1, r0, #3
    cca0:	0058      	lsls	r0, r3, #1
    cca2:	0d40      	lsrs	r0, r0, #21
    cca4:	4684      	mov	ip, r0
    cca6:	468a      	mov	sl, r1
    cca8:	000f      	movs	r7, r1
    ccaa:	0319      	lsls	r1, r3, #12
    ccac:	0f50      	lsrs	r0, r2, #29
    ccae:	0a49      	lsrs	r1, r1, #9
    ccb0:	4301      	orrs	r1, r0
    ccb2:	48c6      	ldr	r0, [pc, #792]	; (cfcc <__aeabi_dsub+0x344>)
    ccb4:	0d76      	lsrs	r6, r6, #21
    ccb6:	46a8      	mov	r8, r5
    ccb8:	0fdb      	lsrs	r3, r3, #31
    ccba:	00d2      	lsls	r2, r2, #3
    ccbc:	4584      	cmp	ip, r0
    ccbe:	d100      	bne.n	ccc2 <__aeabi_dsub+0x3a>
    ccc0:	e0d8      	b.n	ce74 <__aeabi_dsub+0x1ec>
    ccc2:	2001      	movs	r0, #1
    ccc4:	4043      	eors	r3, r0
    ccc6:	42ab      	cmp	r3, r5
    ccc8:	d100      	bne.n	cccc <__aeabi_dsub+0x44>
    ccca:	e0a6      	b.n	ce1a <__aeabi_dsub+0x192>
    cccc:	4660      	mov	r0, ip
    ccce:	1a35      	subs	r5, r6, r0
    ccd0:	2d00      	cmp	r5, #0
    ccd2:	dc00      	bgt.n	ccd6 <__aeabi_dsub+0x4e>
    ccd4:	e105      	b.n	cee2 <__aeabi_dsub+0x25a>
    ccd6:	2800      	cmp	r0, #0
    ccd8:	d110      	bne.n	ccfc <__aeabi_dsub+0x74>
    ccda:	000b      	movs	r3, r1
    ccdc:	4313      	orrs	r3, r2
    ccde:	d100      	bne.n	cce2 <__aeabi_dsub+0x5a>
    cce0:	e0d7      	b.n	ce92 <__aeabi_dsub+0x20a>
    cce2:	1e6b      	subs	r3, r5, #1
    cce4:	2b00      	cmp	r3, #0
    cce6:	d000      	beq.n	ccea <__aeabi_dsub+0x62>
    cce8:	e14b      	b.n	cf82 <__aeabi_dsub+0x2fa>
    ccea:	4653      	mov	r3, sl
    ccec:	1a9f      	subs	r7, r3, r2
    ccee:	45ba      	cmp	sl, r7
    ccf0:	4180      	sbcs	r0, r0
    ccf2:	1a64      	subs	r4, r4, r1
    ccf4:	4240      	negs	r0, r0
    ccf6:	1a24      	subs	r4, r4, r0
    ccf8:	2601      	movs	r6, #1
    ccfa:	e01e      	b.n	cd3a <__aeabi_dsub+0xb2>
    ccfc:	4bb3      	ldr	r3, [pc, #716]	; (cfcc <__aeabi_dsub+0x344>)
    ccfe:	429e      	cmp	r6, r3
    cd00:	d048      	beq.n	cd94 <__aeabi_dsub+0x10c>
    cd02:	2380      	movs	r3, #128	; 0x80
    cd04:	041b      	lsls	r3, r3, #16
    cd06:	4319      	orrs	r1, r3
    cd08:	2d38      	cmp	r5, #56	; 0x38
    cd0a:	dd00      	ble.n	cd0e <__aeabi_dsub+0x86>
    cd0c:	e119      	b.n	cf42 <__aeabi_dsub+0x2ba>
    cd0e:	2d1f      	cmp	r5, #31
    cd10:	dd00      	ble.n	cd14 <__aeabi_dsub+0x8c>
    cd12:	e14c      	b.n	cfae <__aeabi_dsub+0x326>
    cd14:	2320      	movs	r3, #32
    cd16:	000f      	movs	r7, r1
    cd18:	1b5b      	subs	r3, r3, r5
    cd1a:	0010      	movs	r0, r2
    cd1c:	409a      	lsls	r2, r3
    cd1e:	409f      	lsls	r7, r3
    cd20:	40e8      	lsrs	r0, r5
    cd22:	1e53      	subs	r3, r2, #1
    cd24:	419a      	sbcs	r2, r3
    cd26:	40e9      	lsrs	r1, r5
    cd28:	4307      	orrs	r7, r0
    cd2a:	4317      	orrs	r7, r2
    cd2c:	4653      	mov	r3, sl
    cd2e:	1bdf      	subs	r7, r3, r7
    cd30:	1a61      	subs	r1, r4, r1
    cd32:	45ba      	cmp	sl, r7
    cd34:	41a4      	sbcs	r4, r4
    cd36:	4264      	negs	r4, r4
    cd38:	1b0c      	subs	r4, r1, r4
    cd3a:	0223      	lsls	r3, r4, #8
    cd3c:	d400      	bmi.n	cd40 <__aeabi_dsub+0xb8>
    cd3e:	e0c5      	b.n	cecc <__aeabi_dsub+0x244>
    cd40:	0264      	lsls	r4, r4, #9
    cd42:	0a65      	lsrs	r5, r4, #9
    cd44:	2d00      	cmp	r5, #0
    cd46:	d100      	bne.n	cd4a <__aeabi_dsub+0xc2>
    cd48:	e0f6      	b.n	cf38 <__aeabi_dsub+0x2b0>
    cd4a:	0028      	movs	r0, r5
    cd4c:	f7f9 fe38 	bl	69c0 <__clzsi2>
    cd50:	0003      	movs	r3, r0
    cd52:	3b08      	subs	r3, #8
    cd54:	2b1f      	cmp	r3, #31
    cd56:	dd00      	ble.n	cd5a <__aeabi_dsub+0xd2>
    cd58:	e0e9      	b.n	cf2e <__aeabi_dsub+0x2a6>
    cd5a:	2220      	movs	r2, #32
    cd5c:	003c      	movs	r4, r7
    cd5e:	1ad2      	subs	r2, r2, r3
    cd60:	409d      	lsls	r5, r3
    cd62:	40d4      	lsrs	r4, r2
    cd64:	409f      	lsls	r7, r3
    cd66:	4325      	orrs	r5, r4
    cd68:	429e      	cmp	r6, r3
    cd6a:	dd00      	ble.n	cd6e <__aeabi_dsub+0xe6>
    cd6c:	e0db      	b.n	cf26 <__aeabi_dsub+0x29e>
    cd6e:	1b9e      	subs	r6, r3, r6
    cd70:	1c73      	adds	r3, r6, #1
    cd72:	2b1f      	cmp	r3, #31
    cd74:	dd00      	ble.n	cd78 <__aeabi_dsub+0xf0>
    cd76:	e10a      	b.n	cf8e <__aeabi_dsub+0x306>
    cd78:	2220      	movs	r2, #32
    cd7a:	0038      	movs	r0, r7
    cd7c:	1ad2      	subs	r2, r2, r3
    cd7e:	0029      	movs	r1, r5
    cd80:	4097      	lsls	r7, r2
    cd82:	002c      	movs	r4, r5
    cd84:	4091      	lsls	r1, r2
    cd86:	40d8      	lsrs	r0, r3
    cd88:	1e7a      	subs	r2, r7, #1
    cd8a:	4197      	sbcs	r7, r2
    cd8c:	40dc      	lsrs	r4, r3
    cd8e:	2600      	movs	r6, #0
    cd90:	4301      	orrs	r1, r0
    cd92:	430f      	orrs	r7, r1
    cd94:	077b      	lsls	r3, r7, #29
    cd96:	d009      	beq.n	cdac <__aeabi_dsub+0x124>
    cd98:	230f      	movs	r3, #15
    cd9a:	403b      	ands	r3, r7
    cd9c:	2b04      	cmp	r3, #4
    cd9e:	d005      	beq.n	cdac <__aeabi_dsub+0x124>
    cda0:	1d3b      	adds	r3, r7, #4
    cda2:	42bb      	cmp	r3, r7
    cda4:	41bf      	sbcs	r7, r7
    cda6:	427f      	negs	r7, r7
    cda8:	19e4      	adds	r4, r4, r7
    cdaa:	001f      	movs	r7, r3
    cdac:	0223      	lsls	r3, r4, #8
    cdae:	d525      	bpl.n	cdfc <__aeabi_dsub+0x174>
    cdb0:	4b86      	ldr	r3, [pc, #536]	; (cfcc <__aeabi_dsub+0x344>)
    cdb2:	3601      	adds	r6, #1
    cdb4:	429e      	cmp	r6, r3
    cdb6:	d100      	bne.n	cdba <__aeabi_dsub+0x132>
    cdb8:	e0af      	b.n	cf1a <__aeabi_dsub+0x292>
    cdba:	4b85      	ldr	r3, [pc, #532]	; (cfd0 <__aeabi_dsub+0x348>)
    cdbc:	2501      	movs	r5, #1
    cdbe:	401c      	ands	r4, r3
    cdc0:	4643      	mov	r3, r8
    cdc2:	0762      	lsls	r2, r4, #29
    cdc4:	08ff      	lsrs	r7, r7, #3
    cdc6:	0264      	lsls	r4, r4, #9
    cdc8:	0576      	lsls	r6, r6, #21
    cdca:	4317      	orrs	r7, r2
    cdcc:	0b24      	lsrs	r4, r4, #12
    cdce:	0d76      	lsrs	r6, r6, #21
    cdd0:	401d      	ands	r5, r3
    cdd2:	2100      	movs	r1, #0
    cdd4:	0324      	lsls	r4, r4, #12
    cdd6:	0b23      	lsrs	r3, r4, #12
    cdd8:	0d0c      	lsrs	r4, r1, #20
    cdda:	4a7e      	ldr	r2, [pc, #504]	; (cfd4 <__aeabi_dsub+0x34c>)
    cddc:	0524      	lsls	r4, r4, #20
    cdde:	431c      	orrs	r4, r3
    cde0:	4014      	ands	r4, r2
    cde2:	0533      	lsls	r3, r6, #20
    cde4:	4323      	orrs	r3, r4
    cde6:	005b      	lsls	r3, r3, #1
    cde8:	07ed      	lsls	r5, r5, #31
    cdea:	085b      	lsrs	r3, r3, #1
    cdec:	432b      	orrs	r3, r5
    cdee:	0038      	movs	r0, r7
    cdf0:	0019      	movs	r1, r3
    cdf2:	bc1c      	pop	{r2, r3, r4}
    cdf4:	4690      	mov	r8, r2
    cdf6:	4699      	mov	r9, r3
    cdf8:	46a2      	mov	sl, r4
    cdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdfc:	2501      	movs	r5, #1
    cdfe:	4643      	mov	r3, r8
    ce00:	0762      	lsls	r2, r4, #29
    ce02:	08ff      	lsrs	r7, r7, #3
    ce04:	4317      	orrs	r7, r2
    ce06:	08e4      	lsrs	r4, r4, #3
    ce08:	401d      	ands	r5, r3
    ce0a:	4b70      	ldr	r3, [pc, #448]	; (cfcc <__aeabi_dsub+0x344>)
    ce0c:	429e      	cmp	r6, r3
    ce0e:	d036      	beq.n	ce7e <__aeabi_dsub+0x1f6>
    ce10:	0324      	lsls	r4, r4, #12
    ce12:	0576      	lsls	r6, r6, #21
    ce14:	0b24      	lsrs	r4, r4, #12
    ce16:	0d76      	lsrs	r6, r6, #21
    ce18:	e7db      	b.n	cdd2 <__aeabi_dsub+0x14a>
    ce1a:	4663      	mov	r3, ip
    ce1c:	1af3      	subs	r3, r6, r3
    ce1e:	2b00      	cmp	r3, #0
    ce20:	dc00      	bgt.n	ce24 <__aeabi_dsub+0x19c>
    ce22:	e094      	b.n	cf4e <__aeabi_dsub+0x2c6>
    ce24:	4660      	mov	r0, ip
    ce26:	2800      	cmp	r0, #0
    ce28:	d035      	beq.n	ce96 <__aeabi_dsub+0x20e>
    ce2a:	4868      	ldr	r0, [pc, #416]	; (cfcc <__aeabi_dsub+0x344>)
    ce2c:	4286      	cmp	r6, r0
    ce2e:	d0b1      	beq.n	cd94 <__aeabi_dsub+0x10c>
    ce30:	2780      	movs	r7, #128	; 0x80
    ce32:	043f      	lsls	r7, r7, #16
    ce34:	4339      	orrs	r1, r7
    ce36:	2b38      	cmp	r3, #56	; 0x38
    ce38:	dc00      	bgt.n	ce3c <__aeabi_dsub+0x1b4>
    ce3a:	e0fd      	b.n	d038 <__aeabi_dsub+0x3b0>
    ce3c:	430a      	orrs	r2, r1
    ce3e:	0017      	movs	r7, r2
    ce40:	2100      	movs	r1, #0
    ce42:	1e7a      	subs	r2, r7, #1
    ce44:	4197      	sbcs	r7, r2
    ce46:	4457      	add	r7, sl
    ce48:	4557      	cmp	r7, sl
    ce4a:	4180      	sbcs	r0, r0
    ce4c:	1909      	adds	r1, r1, r4
    ce4e:	4244      	negs	r4, r0
    ce50:	190c      	adds	r4, r1, r4
    ce52:	0223      	lsls	r3, r4, #8
    ce54:	d53a      	bpl.n	cecc <__aeabi_dsub+0x244>
    ce56:	4b5d      	ldr	r3, [pc, #372]	; (cfcc <__aeabi_dsub+0x344>)
    ce58:	3601      	adds	r6, #1
    ce5a:	429e      	cmp	r6, r3
    ce5c:	d100      	bne.n	ce60 <__aeabi_dsub+0x1d8>
    ce5e:	e14b      	b.n	d0f8 <__aeabi_dsub+0x470>
    ce60:	2201      	movs	r2, #1
    ce62:	4b5b      	ldr	r3, [pc, #364]	; (cfd0 <__aeabi_dsub+0x348>)
    ce64:	401c      	ands	r4, r3
    ce66:	087b      	lsrs	r3, r7, #1
    ce68:	4017      	ands	r7, r2
    ce6a:	431f      	orrs	r7, r3
    ce6c:	07e2      	lsls	r2, r4, #31
    ce6e:	4317      	orrs	r7, r2
    ce70:	0864      	lsrs	r4, r4, #1
    ce72:	e78f      	b.n	cd94 <__aeabi_dsub+0x10c>
    ce74:	0008      	movs	r0, r1
    ce76:	4310      	orrs	r0, r2
    ce78:	d000      	beq.n	ce7c <__aeabi_dsub+0x1f4>
    ce7a:	e724      	b.n	ccc6 <__aeabi_dsub+0x3e>
    ce7c:	e721      	b.n	ccc2 <__aeabi_dsub+0x3a>
    ce7e:	0023      	movs	r3, r4
    ce80:	433b      	orrs	r3, r7
    ce82:	d100      	bne.n	ce86 <__aeabi_dsub+0x1fe>
    ce84:	e1b9      	b.n	d1fa <__aeabi_dsub+0x572>
    ce86:	2280      	movs	r2, #128	; 0x80
    ce88:	0312      	lsls	r2, r2, #12
    ce8a:	4314      	orrs	r4, r2
    ce8c:	0324      	lsls	r4, r4, #12
    ce8e:	0b24      	lsrs	r4, r4, #12
    ce90:	e79f      	b.n	cdd2 <__aeabi_dsub+0x14a>
    ce92:	002e      	movs	r6, r5
    ce94:	e77e      	b.n	cd94 <__aeabi_dsub+0x10c>
    ce96:	0008      	movs	r0, r1
    ce98:	4310      	orrs	r0, r2
    ce9a:	d100      	bne.n	ce9e <__aeabi_dsub+0x216>
    ce9c:	e0ca      	b.n	d034 <__aeabi_dsub+0x3ac>
    ce9e:	1e58      	subs	r0, r3, #1
    cea0:	4684      	mov	ip, r0
    cea2:	2800      	cmp	r0, #0
    cea4:	d000      	beq.n	cea8 <__aeabi_dsub+0x220>
    cea6:	e0e7      	b.n	d078 <__aeabi_dsub+0x3f0>
    cea8:	4452      	add	r2, sl
    ceaa:	4552      	cmp	r2, sl
    ceac:	4180      	sbcs	r0, r0
    ceae:	1864      	adds	r4, r4, r1
    ceb0:	4240      	negs	r0, r0
    ceb2:	1824      	adds	r4, r4, r0
    ceb4:	0017      	movs	r7, r2
    ceb6:	2601      	movs	r6, #1
    ceb8:	0223      	lsls	r3, r4, #8
    ceba:	d507      	bpl.n	cecc <__aeabi_dsub+0x244>
    cebc:	2602      	movs	r6, #2
    cebe:	e7cf      	b.n	ce60 <__aeabi_dsub+0x1d8>
    cec0:	4664      	mov	r4, ip
    cec2:	432c      	orrs	r4, r5
    cec4:	d100      	bne.n	cec8 <__aeabi_dsub+0x240>
    cec6:	e1b3      	b.n	d230 <__aeabi_dsub+0x5a8>
    cec8:	002c      	movs	r4, r5
    ceca:	4667      	mov	r7, ip
    cecc:	077b      	lsls	r3, r7, #29
    cece:	d000      	beq.n	ced2 <__aeabi_dsub+0x24a>
    ced0:	e762      	b.n	cd98 <__aeabi_dsub+0x110>
    ced2:	0763      	lsls	r3, r4, #29
    ced4:	08ff      	lsrs	r7, r7, #3
    ced6:	431f      	orrs	r7, r3
    ced8:	2501      	movs	r5, #1
    ceda:	4643      	mov	r3, r8
    cedc:	08e4      	lsrs	r4, r4, #3
    cede:	401d      	ands	r5, r3
    cee0:	e793      	b.n	ce0a <__aeabi_dsub+0x182>
    cee2:	2d00      	cmp	r5, #0
    cee4:	d178      	bne.n	cfd8 <__aeabi_dsub+0x350>
    cee6:	1c75      	adds	r5, r6, #1
    cee8:	056d      	lsls	r5, r5, #21
    ceea:	0d6d      	lsrs	r5, r5, #21
    ceec:	2d01      	cmp	r5, #1
    ceee:	dc00      	bgt.n	cef2 <__aeabi_dsub+0x26a>
    cef0:	e0f2      	b.n	d0d8 <__aeabi_dsub+0x450>
    cef2:	4650      	mov	r0, sl
    cef4:	1a80      	subs	r0, r0, r2
    cef6:	4582      	cmp	sl, r0
    cef8:	41bf      	sbcs	r7, r7
    cefa:	1a65      	subs	r5, r4, r1
    cefc:	427f      	negs	r7, r7
    cefe:	1bed      	subs	r5, r5, r7
    cf00:	4684      	mov	ip, r0
    cf02:	0228      	lsls	r0, r5, #8
    cf04:	d400      	bmi.n	cf08 <__aeabi_dsub+0x280>
    cf06:	e08c      	b.n	d022 <__aeabi_dsub+0x39a>
    cf08:	4650      	mov	r0, sl
    cf0a:	1a17      	subs	r7, r2, r0
    cf0c:	42ba      	cmp	r2, r7
    cf0e:	4192      	sbcs	r2, r2
    cf10:	1b0c      	subs	r4, r1, r4
    cf12:	4255      	negs	r5, r2
    cf14:	1b65      	subs	r5, r4, r5
    cf16:	4698      	mov	r8, r3
    cf18:	e714      	b.n	cd44 <__aeabi_dsub+0xbc>
    cf1a:	2501      	movs	r5, #1
    cf1c:	4643      	mov	r3, r8
    cf1e:	2400      	movs	r4, #0
    cf20:	401d      	ands	r5, r3
    cf22:	2700      	movs	r7, #0
    cf24:	e755      	b.n	cdd2 <__aeabi_dsub+0x14a>
    cf26:	4c2a      	ldr	r4, [pc, #168]	; (cfd0 <__aeabi_dsub+0x348>)
    cf28:	1af6      	subs	r6, r6, r3
    cf2a:	402c      	ands	r4, r5
    cf2c:	e732      	b.n	cd94 <__aeabi_dsub+0x10c>
    cf2e:	003d      	movs	r5, r7
    cf30:	3828      	subs	r0, #40	; 0x28
    cf32:	4085      	lsls	r5, r0
    cf34:	2700      	movs	r7, #0
    cf36:	e717      	b.n	cd68 <__aeabi_dsub+0xe0>
    cf38:	0038      	movs	r0, r7
    cf3a:	f7f9 fd41 	bl	69c0 <__clzsi2>
    cf3e:	3020      	adds	r0, #32
    cf40:	e706      	b.n	cd50 <__aeabi_dsub+0xc8>
    cf42:	430a      	orrs	r2, r1
    cf44:	0017      	movs	r7, r2
    cf46:	2100      	movs	r1, #0
    cf48:	1e7a      	subs	r2, r7, #1
    cf4a:	4197      	sbcs	r7, r2
    cf4c:	e6ee      	b.n	cd2c <__aeabi_dsub+0xa4>
    cf4e:	2b00      	cmp	r3, #0
    cf50:	d000      	beq.n	cf54 <__aeabi_dsub+0x2cc>
    cf52:	e0e5      	b.n	d120 <__aeabi_dsub+0x498>
    cf54:	1c73      	adds	r3, r6, #1
    cf56:	469c      	mov	ip, r3
    cf58:	055b      	lsls	r3, r3, #21
    cf5a:	0d5b      	lsrs	r3, r3, #21
    cf5c:	2b01      	cmp	r3, #1
    cf5e:	dc00      	bgt.n	cf62 <__aeabi_dsub+0x2da>
    cf60:	e09f      	b.n	d0a2 <__aeabi_dsub+0x41a>
    cf62:	4b1a      	ldr	r3, [pc, #104]	; (cfcc <__aeabi_dsub+0x344>)
    cf64:	459c      	cmp	ip, r3
    cf66:	d100      	bne.n	cf6a <__aeabi_dsub+0x2e2>
    cf68:	e0c5      	b.n	d0f6 <__aeabi_dsub+0x46e>
    cf6a:	4452      	add	r2, sl
    cf6c:	4552      	cmp	r2, sl
    cf6e:	4180      	sbcs	r0, r0
    cf70:	1864      	adds	r4, r4, r1
    cf72:	4240      	negs	r0, r0
    cf74:	1824      	adds	r4, r4, r0
    cf76:	07e7      	lsls	r7, r4, #31
    cf78:	0852      	lsrs	r2, r2, #1
    cf7a:	4317      	orrs	r7, r2
    cf7c:	0864      	lsrs	r4, r4, #1
    cf7e:	4666      	mov	r6, ip
    cf80:	e708      	b.n	cd94 <__aeabi_dsub+0x10c>
    cf82:	4812      	ldr	r0, [pc, #72]	; (cfcc <__aeabi_dsub+0x344>)
    cf84:	4285      	cmp	r5, r0
    cf86:	d100      	bne.n	cf8a <__aeabi_dsub+0x302>
    cf88:	e085      	b.n	d096 <__aeabi_dsub+0x40e>
    cf8a:	001d      	movs	r5, r3
    cf8c:	e6bc      	b.n	cd08 <__aeabi_dsub+0x80>
    cf8e:	0029      	movs	r1, r5
    cf90:	3e1f      	subs	r6, #31
    cf92:	40f1      	lsrs	r1, r6
    cf94:	2b20      	cmp	r3, #32
    cf96:	d100      	bne.n	cf9a <__aeabi_dsub+0x312>
    cf98:	e07f      	b.n	d09a <__aeabi_dsub+0x412>
    cf9a:	2240      	movs	r2, #64	; 0x40
    cf9c:	1ad3      	subs	r3, r2, r3
    cf9e:	409d      	lsls	r5, r3
    cfa0:	432f      	orrs	r7, r5
    cfa2:	1e7d      	subs	r5, r7, #1
    cfa4:	41af      	sbcs	r7, r5
    cfa6:	2400      	movs	r4, #0
    cfa8:	430f      	orrs	r7, r1
    cfaa:	2600      	movs	r6, #0
    cfac:	e78e      	b.n	cecc <__aeabi_dsub+0x244>
    cfae:	002b      	movs	r3, r5
    cfb0:	000f      	movs	r7, r1
    cfb2:	3b20      	subs	r3, #32
    cfb4:	40df      	lsrs	r7, r3
    cfb6:	2d20      	cmp	r5, #32
    cfb8:	d071      	beq.n	d09e <__aeabi_dsub+0x416>
    cfba:	2340      	movs	r3, #64	; 0x40
    cfbc:	1b5d      	subs	r5, r3, r5
    cfbe:	40a9      	lsls	r1, r5
    cfc0:	430a      	orrs	r2, r1
    cfc2:	1e51      	subs	r1, r2, #1
    cfc4:	418a      	sbcs	r2, r1
    cfc6:	2100      	movs	r1, #0
    cfc8:	4317      	orrs	r7, r2
    cfca:	e6af      	b.n	cd2c <__aeabi_dsub+0xa4>
    cfcc:	000007ff 	.word	0x000007ff
    cfd0:	ff7fffff 	.word	0xff7fffff
    cfd4:	800fffff 	.word	0x800fffff
    cfd8:	2e00      	cmp	r6, #0
    cfda:	d03e      	beq.n	d05a <__aeabi_dsub+0x3d2>
    cfdc:	4eb3      	ldr	r6, [pc, #716]	; (d2ac <__aeabi_dsub+0x624>)
    cfde:	45b4      	cmp	ip, r6
    cfe0:	d045      	beq.n	d06e <__aeabi_dsub+0x3e6>
    cfe2:	2680      	movs	r6, #128	; 0x80
    cfe4:	0436      	lsls	r6, r6, #16
    cfe6:	426d      	negs	r5, r5
    cfe8:	4334      	orrs	r4, r6
    cfea:	2d38      	cmp	r5, #56	; 0x38
    cfec:	dd00      	ble.n	cff0 <__aeabi_dsub+0x368>
    cfee:	e0a8      	b.n	d142 <__aeabi_dsub+0x4ba>
    cff0:	2d1f      	cmp	r5, #31
    cff2:	dd00      	ble.n	cff6 <__aeabi_dsub+0x36e>
    cff4:	e11f      	b.n	d236 <__aeabi_dsub+0x5ae>
    cff6:	2620      	movs	r6, #32
    cff8:	0027      	movs	r7, r4
    cffa:	4650      	mov	r0, sl
    cffc:	1b76      	subs	r6, r6, r5
    cffe:	40b7      	lsls	r7, r6
    d000:	40e8      	lsrs	r0, r5
    d002:	4307      	orrs	r7, r0
    d004:	4650      	mov	r0, sl
    d006:	40b0      	lsls	r0, r6
    d008:	1e46      	subs	r6, r0, #1
    d00a:	41b0      	sbcs	r0, r6
    d00c:	40ec      	lsrs	r4, r5
    d00e:	4338      	orrs	r0, r7
    d010:	1a17      	subs	r7, r2, r0
    d012:	42ba      	cmp	r2, r7
    d014:	4192      	sbcs	r2, r2
    d016:	1b0c      	subs	r4, r1, r4
    d018:	4252      	negs	r2, r2
    d01a:	1aa4      	subs	r4, r4, r2
    d01c:	4666      	mov	r6, ip
    d01e:	4698      	mov	r8, r3
    d020:	e68b      	b.n	cd3a <__aeabi_dsub+0xb2>
    d022:	4664      	mov	r4, ip
    d024:	4667      	mov	r7, ip
    d026:	432c      	orrs	r4, r5
    d028:	d000      	beq.n	d02c <__aeabi_dsub+0x3a4>
    d02a:	e68b      	b.n	cd44 <__aeabi_dsub+0xbc>
    d02c:	2500      	movs	r5, #0
    d02e:	2600      	movs	r6, #0
    d030:	2700      	movs	r7, #0
    d032:	e6ea      	b.n	ce0a <__aeabi_dsub+0x182>
    d034:	001e      	movs	r6, r3
    d036:	e6ad      	b.n	cd94 <__aeabi_dsub+0x10c>
    d038:	2b1f      	cmp	r3, #31
    d03a:	dc60      	bgt.n	d0fe <__aeabi_dsub+0x476>
    d03c:	2720      	movs	r7, #32
    d03e:	1af8      	subs	r0, r7, r3
    d040:	000f      	movs	r7, r1
    d042:	4684      	mov	ip, r0
    d044:	4087      	lsls	r7, r0
    d046:	0010      	movs	r0, r2
    d048:	40d8      	lsrs	r0, r3
    d04a:	4307      	orrs	r7, r0
    d04c:	4660      	mov	r0, ip
    d04e:	4082      	lsls	r2, r0
    d050:	1e50      	subs	r0, r2, #1
    d052:	4182      	sbcs	r2, r0
    d054:	40d9      	lsrs	r1, r3
    d056:	4317      	orrs	r7, r2
    d058:	e6f5      	b.n	ce46 <__aeabi_dsub+0x1be>
    d05a:	0026      	movs	r6, r4
    d05c:	4650      	mov	r0, sl
    d05e:	4306      	orrs	r6, r0
    d060:	d005      	beq.n	d06e <__aeabi_dsub+0x3e6>
    d062:	43ed      	mvns	r5, r5
    d064:	2d00      	cmp	r5, #0
    d066:	d0d3      	beq.n	d010 <__aeabi_dsub+0x388>
    d068:	4e90      	ldr	r6, [pc, #576]	; (d2ac <__aeabi_dsub+0x624>)
    d06a:	45b4      	cmp	ip, r6
    d06c:	d1bd      	bne.n	cfea <__aeabi_dsub+0x362>
    d06e:	000c      	movs	r4, r1
    d070:	0017      	movs	r7, r2
    d072:	4666      	mov	r6, ip
    d074:	4698      	mov	r8, r3
    d076:	e68d      	b.n	cd94 <__aeabi_dsub+0x10c>
    d078:	488c      	ldr	r0, [pc, #560]	; (d2ac <__aeabi_dsub+0x624>)
    d07a:	4283      	cmp	r3, r0
    d07c:	d00b      	beq.n	d096 <__aeabi_dsub+0x40e>
    d07e:	4663      	mov	r3, ip
    d080:	e6d9      	b.n	ce36 <__aeabi_dsub+0x1ae>
    d082:	2d00      	cmp	r5, #0
    d084:	d000      	beq.n	d088 <__aeabi_dsub+0x400>
    d086:	e096      	b.n	d1b6 <__aeabi_dsub+0x52e>
    d088:	0008      	movs	r0, r1
    d08a:	4310      	orrs	r0, r2
    d08c:	d100      	bne.n	d090 <__aeabi_dsub+0x408>
    d08e:	e0e2      	b.n	d256 <__aeabi_dsub+0x5ce>
    d090:	000c      	movs	r4, r1
    d092:	0017      	movs	r7, r2
    d094:	4698      	mov	r8, r3
    d096:	4e85      	ldr	r6, [pc, #532]	; (d2ac <__aeabi_dsub+0x624>)
    d098:	e67c      	b.n	cd94 <__aeabi_dsub+0x10c>
    d09a:	2500      	movs	r5, #0
    d09c:	e780      	b.n	cfa0 <__aeabi_dsub+0x318>
    d09e:	2100      	movs	r1, #0
    d0a0:	e78e      	b.n	cfc0 <__aeabi_dsub+0x338>
    d0a2:	0023      	movs	r3, r4
    d0a4:	4650      	mov	r0, sl
    d0a6:	4303      	orrs	r3, r0
    d0a8:	2e00      	cmp	r6, #0
    d0aa:	d000      	beq.n	d0ae <__aeabi_dsub+0x426>
    d0ac:	e0a8      	b.n	d200 <__aeabi_dsub+0x578>
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d100      	bne.n	d0b4 <__aeabi_dsub+0x42c>
    d0b2:	e0de      	b.n	d272 <__aeabi_dsub+0x5ea>
    d0b4:	000b      	movs	r3, r1
    d0b6:	4313      	orrs	r3, r2
    d0b8:	d100      	bne.n	d0bc <__aeabi_dsub+0x434>
    d0ba:	e66b      	b.n	cd94 <__aeabi_dsub+0x10c>
    d0bc:	4452      	add	r2, sl
    d0be:	4552      	cmp	r2, sl
    d0c0:	4180      	sbcs	r0, r0
    d0c2:	1864      	adds	r4, r4, r1
    d0c4:	4240      	negs	r0, r0
    d0c6:	1824      	adds	r4, r4, r0
    d0c8:	0017      	movs	r7, r2
    d0ca:	0223      	lsls	r3, r4, #8
    d0cc:	d400      	bmi.n	d0d0 <__aeabi_dsub+0x448>
    d0ce:	e6fd      	b.n	cecc <__aeabi_dsub+0x244>
    d0d0:	4b77      	ldr	r3, [pc, #476]	; (d2b0 <__aeabi_dsub+0x628>)
    d0d2:	4666      	mov	r6, ip
    d0d4:	401c      	ands	r4, r3
    d0d6:	e65d      	b.n	cd94 <__aeabi_dsub+0x10c>
    d0d8:	0025      	movs	r5, r4
    d0da:	4650      	mov	r0, sl
    d0dc:	4305      	orrs	r5, r0
    d0de:	2e00      	cmp	r6, #0
    d0e0:	d1cf      	bne.n	d082 <__aeabi_dsub+0x3fa>
    d0e2:	2d00      	cmp	r5, #0
    d0e4:	d14f      	bne.n	d186 <__aeabi_dsub+0x4fe>
    d0e6:	000c      	movs	r4, r1
    d0e8:	4314      	orrs	r4, r2
    d0ea:	d100      	bne.n	d0ee <__aeabi_dsub+0x466>
    d0ec:	e0a0      	b.n	d230 <__aeabi_dsub+0x5a8>
    d0ee:	000c      	movs	r4, r1
    d0f0:	0017      	movs	r7, r2
    d0f2:	4698      	mov	r8, r3
    d0f4:	e64e      	b.n	cd94 <__aeabi_dsub+0x10c>
    d0f6:	4666      	mov	r6, ip
    d0f8:	2400      	movs	r4, #0
    d0fa:	2700      	movs	r7, #0
    d0fc:	e685      	b.n	ce0a <__aeabi_dsub+0x182>
    d0fe:	001f      	movs	r7, r3
    d100:	0008      	movs	r0, r1
    d102:	3f20      	subs	r7, #32
    d104:	40f8      	lsrs	r0, r7
    d106:	0007      	movs	r7, r0
    d108:	2b20      	cmp	r3, #32
    d10a:	d100      	bne.n	d10e <__aeabi_dsub+0x486>
    d10c:	e08e      	b.n	d22c <__aeabi_dsub+0x5a4>
    d10e:	2040      	movs	r0, #64	; 0x40
    d110:	1ac3      	subs	r3, r0, r3
    d112:	4099      	lsls	r1, r3
    d114:	430a      	orrs	r2, r1
    d116:	1e51      	subs	r1, r2, #1
    d118:	418a      	sbcs	r2, r1
    d11a:	2100      	movs	r1, #0
    d11c:	4317      	orrs	r7, r2
    d11e:	e692      	b.n	ce46 <__aeabi_dsub+0x1be>
    d120:	2e00      	cmp	r6, #0
    d122:	d114      	bne.n	d14e <__aeabi_dsub+0x4c6>
    d124:	0026      	movs	r6, r4
    d126:	4650      	mov	r0, sl
    d128:	4306      	orrs	r6, r0
    d12a:	d062      	beq.n	d1f2 <__aeabi_dsub+0x56a>
    d12c:	43db      	mvns	r3, r3
    d12e:	2b00      	cmp	r3, #0
    d130:	d15c      	bne.n	d1ec <__aeabi_dsub+0x564>
    d132:	1887      	adds	r7, r0, r2
    d134:	4297      	cmp	r7, r2
    d136:	4192      	sbcs	r2, r2
    d138:	1864      	adds	r4, r4, r1
    d13a:	4252      	negs	r2, r2
    d13c:	18a4      	adds	r4, r4, r2
    d13e:	4666      	mov	r6, ip
    d140:	e687      	b.n	ce52 <__aeabi_dsub+0x1ca>
    d142:	4650      	mov	r0, sl
    d144:	4320      	orrs	r0, r4
    d146:	1e44      	subs	r4, r0, #1
    d148:	41a0      	sbcs	r0, r4
    d14a:	2400      	movs	r4, #0
    d14c:	e760      	b.n	d010 <__aeabi_dsub+0x388>
    d14e:	4e57      	ldr	r6, [pc, #348]	; (d2ac <__aeabi_dsub+0x624>)
    d150:	45b4      	cmp	ip, r6
    d152:	d04e      	beq.n	d1f2 <__aeabi_dsub+0x56a>
    d154:	2680      	movs	r6, #128	; 0x80
    d156:	0436      	lsls	r6, r6, #16
    d158:	425b      	negs	r3, r3
    d15a:	4334      	orrs	r4, r6
    d15c:	2b38      	cmp	r3, #56	; 0x38
    d15e:	dd00      	ble.n	d162 <__aeabi_dsub+0x4da>
    d160:	e07f      	b.n	d262 <__aeabi_dsub+0x5da>
    d162:	2b1f      	cmp	r3, #31
    d164:	dd00      	ble.n	d168 <__aeabi_dsub+0x4e0>
    d166:	e08b      	b.n	d280 <__aeabi_dsub+0x5f8>
    d168:	2620      	movs	r6, #32
    d16a:	0027      	movs	r7, r4
    d16c:	4650      	mov	r0, sl
    d16e:	1af6      	subs	r6, r6, r3
    d170:	40b7      	lsls	r7, r6
    d172:	40d8      	lsrs	r0, r3
    d174:	4307      	orrs	r7, r0
    d176:	4650      	mov	r0, sl
    d178:	40b0      	lsls	r0, r6
    d17a:	1e46      	subs	r6, r0, #1
    d17c:	41b0      	sbcs	r0, r6
    d17e:	4307      	orrs	r7, r0
    d180:	40dc      	lsrs	r4, r3
    d182:	18bf      	adds	r7, r7, r2
    d184:	e7d6      	b.n	d134 <__aeabi_dsub+0x4ac>
    d186:	000d      	movs	r5, r1
    d188:	4315      	orrs	r5, r2
    d18a:	d100      	bne.n	d18e <__aeabi_dsub+0x506>
    d18c:	e602      	b.n	cd94 <__aeabi_dsub+0x10c>
    d18e:	4650      	mov	r0, sl
    d190:	1a80      	subs	r0, r0, r2
    d192:	4582      	cmp	sl, r0
    d194:	41bf      	sbcs	r7, r7
    d196:	1a65      	subs	r5, r4, r1
    d198:	427f      	negs	r7, r7
    d19a:	1bed      	subs	r5, r5, r7
    d19c:	4684      	mov	ip, r0
    d19e:	0228      	lsls	r0, r5, #8
    d1a0:	d400      	bmi.n	d1a4 <__aeabi_dsub+0x51c>
    d1a2:	e68d      	b.n	cec0 <__aeabi_dsub+0x238>
    d1a4:	4650      	mov	r0, sl
    d1a6:	1a17      	subs	r7, r2, r0
    d1a8:	42ba      	cmp	r2, r7
    d1aa:	4192      	sbcs	r2, r2
    d1ac:	1b0c      	subs	r4, r1, r4
    d1ae:	4252      	negs	r2, r2
    d1b0:	1aa4      	subs	r4, r4, r2
    d1b2:	4698      	mov	r8, r3
    d1b4:	e5ee      	b.n	cd94 <__aeabi_dsub+0x10c>
    d1b6:	000d      	movs	r5, r1
    d1b8:	4315      	orrs	r5, r2
    d1ba:	d100      	bne.n	d1be <__aeabi_dsub+0x536>
    d1bc:	e76b      	b.n	d096 <__aeabi_dsub+0x40e>
    d1be:	4650      	mov	r0, sl
    d1c0:	0767      	lsls	r7, r4, #29
    d1c2:	08c0      	lsrs	r0, r0, #3
    d1c4:	4307      	orrs	r7, r0
    d1c6:	2080      	movs	r0, #128	; 0x80
    d1c8:	08e4      	lsrs	r4, r4, #3
    d1ca:	0300      	lsls	r0, r0, #12
    d1cc:	4204      	tst	r4, r0
    d1ce:	d007      	beq.n	d1e0 <__aeabi_dsub+0x558>
    d1d0:	08cd      	lsrs	r5, r1, #3
    d1d2:	4205      	tst	r5, r0
    d1d4:	d104      	bne.n	d1e0 <__aeabi_dsub+0x558>
    d1d6:	002c      	movs	r4, r5
    d1d8:	4698      	mov	r8, r3
    d1da:	08d7      	lsrs	r7, r2, #3
    d1dc:	0749      	lsls	r1, r1, #29
    d1de:	430f      	orrs	r7, r1
    d1e0:	0f7b      	lsrs	r3, r7, #29
    d1e2:	00e4      	lsls	r4, r4, #3
    d1e4:	431c      	orrs	r4, r3
    d1e6:	00ff      	lsls	r7, r7, #3
    d1e8:	4e30      	ldr	r6, [pc, #192]	; (d2ac <__aeabi_dsub+0x624>)
    d1ea:	e5d3      	b.n	cd94 <__aeabi_dsub+0x10c>
    d1ec:	4e2f      	ldr	r6, [pc, #188]	; (d2ac <__aeabi_dsub+0x624>)
    d1ee:	45b4      	cmp	ip, r6
    d1f0:	d1b4      	bne.n	d15c <__aeabi_dsub+0x4d4>
    d1f2:	000c      	movs	r4, r1
    d1f4:	0017      	movs	r7, r2
    d1f6:	4666      	mov	r6, ip
    d1f8:	e5cc      	b.n	cd94 <__aeabi_dsub+0x10c>
    d1fa:	2700      	movs	r7, #0
    d1fc:	2400      	movs	r4, #0
    d1fe:	e5e8      	b.n	cdd2 <__aeabi_dsub+0x14a>
    d200:	2b00      	cmp	r3, #0
    d202:	d039      	beq.n	d278 <__aeabi_dsub+0x5f0>
    d204:	000b      	movs	r3, r1
    d206:	4313      	orrs	r3, r2
    d208:	d100      	bne.n	d20c <__aeabi_dsub+0x584>
    d20a:	e744      	b.n	d096 <__aeabi_dsub+0x40e>
    d20c:	08c0      	lsrs	r0, r0, #3
    d20e:	0767      	lsls	r7, r4, #29
    d210:	4307      	orrs	r7, r0
    d212:	2080      	movs	r0, #128	; 0x80
    d214:	08e4      	lsrs	r4, r4, #3
    d216:	0300      	lsls	r0, r0, #12
    d218:	4204      	tst	r4, r0
    d21a:	d0e1      	beq.n	d1e0 <__aeabi_dsub+0x558>
    d21c:	08cb      	lsrs	r3, r1, #3
    d21e:	4203      	tst	r3, r0
    d220:	d1de      	bne.n	d1e0 <__aeabi_dsub+0x558>
    d222:	08d7      	lsrs	r7, r2, #3
    d224:	0749      	lsls	r1, r1, #29
    d226:	430f      	orrs	r7, r1
    d228:	001c      	movs	r4, r3
    d22a:	e7d9      	b.n	d1e0 <__aeabi_dsub+0x558>
    d22c:	2100      	movs	r1, #0
    d22e:	e771      	b.n	d114 <__aeabi_dsub+0x48c>
    d230:	2500      	movs	r5, #0
    d232:	2700      	movs	r7, #0
    d234:	e5e9      	b.n	ce0a <__aeabi_dsub+0x182>
    d236:	002e      	movs	r6, r5
    d238:	0027      	movs	r7, r4
    d23a:	3e20      	subs	r6, #32
    d23c:	40f7      	lsrs	r7, r6
    d23e:	2d20      	cmp	r5, #32
    d240:	d02f      	beq.n	d2a2 <__aeabi_dsub+0x61a>
    d242:	2640      	movs	r6, #64	; 0x40
    d244:	1b75      	subs	r5, r6, r5
    d246:	40ac      	lsls	r4, r5
    d248:	4650      	mov	r0, sl
    d24a:	4320      	orrs	r0, r4
    d24c:	1e44      	subs	r4, r0, #1
    d24e:	41a0      	sbcs	r0, r4
    d250:	2400      	movs	r4, #0
    d252:	4338      	orrs	r0, r7
    d254:	e6dc      	b.n	d010 <__aeabi_dsub+0x388>
    d256:	2480      	movs	r4, #128	; 0x80
    d258:	2500      	movs	r5, #0
    d25a:	0324      	lsls	r4, r4, #12
    d25c:	4e13      	ldr	r6, [pc, #76]	; (d2ac <__aeabi_dsub+0x624>)
    d25e:	2700      	movs	r7, #0
    d260:	e5d3      	b.n	ce0a <__aeabi_dsub+0x182>
    d262:	4650      	mov	r0, sl
    d264:	4320      	orrs	r0, r4
    d266:	0007      	movs	r7, r0
    d268:	1e78      	subs	r0, r7, #1
    d26a:	4187      	sbcs	r7, r0
    d26c:	2400      	movs	r4, #0
    d26e:	18bf      	adds	r7, r7, r2
    d270:	e760      	b.n	d134 <__aeabi_dsub+0x4ac>
    d272:	000c      	movs	r4, r1
    d274:	0017      	movs	r7, r2
    d276:	e58d      	b.n	cd94 <__aeabi_dsub+0x10c>
    d278:	000c      	movs	r4, r1
    d27a:	0017      	movs	r7, r2
    d27c:	4e0b      	ldr	r6, [pc, #44]	; (d2ac <__aeabi_dsub+0x624>)
    d27e:	e589      	b.n	cd94 <__aeabi_dsub+0x10c>
    d280:	001e      	movs	r6, r3
    d282:	0027      	movs	r7, r4
    d284:	3e20      	subs	r6, #32
    d286:	40f7      	lsrs	r7, r6
    d288:	2b20      	cmp	r3, #32
    d28a:	d00c      	beq.n	d2a6 <__aeabi_dsub+0x61e>
    d28c:	2640      	movs	r6, #64	; 0x40
    d28e:	1af3      	subs	r3, r6, r3
    d290:	409c      	lsls	r4, r3
    d292:	4650      	mov	r0, sl
    d294:	4320      	orrs	r0, r4
    d296:	1e44      	subs	r4, r0, #1
    d298:	41a0      	sbcs	r0, r4
    d29a:	4307      	orrs	r7, r0
    d29c:	2400      	movs	r4, #0
    d29e:	18bf      	adds	r7, r7, r2
    d2a0:	e748      	b.n	d134 <__aeabi_dsub+0x4ac>
    d2a2:	2400      	movs	r4, #0
    d2a4:	e7d0      	b.n	d248 <__aeabi_dsub+0x5c0>
    d2a6:	2400      	movs	r4, #0
    d2a8:	e7f3      	b.n	d292 <__aeabi_dsub+0x60a>
    d2aa:	46c0      	nop			; (mov r8, r8)
    d2ac:	000007ff 	.word	0x000007ff
    d2b0:	ff7fffff 	.word	0xff7fffff

0000d2b4 <__aeabi_dcmpun>:
    d2b4:	b570      	push	{r4, r5, r6, lr}
    d2b6:	4e0e      	ldr	r6, [pc, #56]	; (d2f0 <__aeabi_dcmpun+0x3c>)
    d2b8:	030d      	lsls	r5, r1, #12
    d2ba:	031c      	lsls	r4, r3, #12
    d2bc:	0049      	lsls	r1, r1, #1
    d2be:	005b      	lsls	r3, r3, #1
    d2c0:	0b2d      	lsrs	r5, r5, #12
    d2c2:	0d49      	lsrs	r1, r1, #21
    d2c4:	0b24      	lsrs	r4, r4, #12
    d2c6:	0d5b      	lsrs	r3, r3, #21
    d2c8:	42b1      	cmp	r1, r6
    d2ca:	d004      	beq.n	d2d6 <__aeabi_dcmpun+0x22>
    d2cc:	4908      	ldr	r1, [pc, #32]	; (d2f0 <__aeabi_dcmpun+0x3c>)
    d2ce:	2000      	movs	r0, #0
    d2d0:	428b      	cmp	r3, r1
    d2d2:	d008      	beq.n	d2e6 <__aeabi_dcmpun+0x32>
    d2d4:	bd70      	pop	{r4, r5, r6, pc}
    d2d6:	4305      	orrs	r5, r0
    d2d8:	2001      	movs	r0, #1
    d2da:	2d00      	cmp	r5, #0
    d2dc:	d1fa      	bne.n	d2d4 <__aeabi_dcmpun+0x20>
    d2de:	4904      	ldr	r1, [pc, #16]	; (d2f0 <__aeabi_dcmpun+0x3c>)
    d2e0:	2000      	movs	r0, #0
    d2e2:	428b      	cmp	r3, r1
    d2e4:	d1f6      	bne.n	d2d4 <__aeabi_dcmpun+0x20>
    d2e6:	4314      	orrs	r4, r2
    d2e8:	0020      	movs	r0, r4
    d2ea:	1e44      	subs	r4, r0, #1
    d2ec:	41a0      	sbcs	r0, r4
    d2ee:	e7f1      	b.n	d2d4 <__aeabi_dcmpun+0x20>
    d2f0:	000007ff 	.word	0x000007ff

0000d2f4 <__aeabi_d2iz>:
    d2f4:	b530      	push	{r4, r5, lr}
    d2f6:	4d13      	ldr	r5, [pc, #76]	; (d344 <__aeabi_d2iz+0x50>)
    d2f8:	030a      	lsls	r2, r1, #12
    d2fa:	004b      	lsls	r3, r1, #1
    d2fc:	0b12      	lsrs	r2, r2, #12
    d2fe:	0d5b      	lsrs	r3, r3, #21
    d300:	0fc9      	lsrs	r1, r1, #31
    d302:	2400      	movs	r4, #0
    d304:	42ab      	cmp	r3, r5
    d306:	dd10      	ble.n	d32a <__aeabi_d2iz+0x36>
    d308:	4c0f      	ldr	r4, [pc, #60]	; (d348 <__aeabi_d2iz+0x54>)
    d30a:	42a3      	cmp	r3, r4
    d30c:	dc0f      	bgt.n	d32e <__aeabi_d2iz+0x3a>
    d30e:	2480      	movs	r4, #128	; 0x80
    d310:	4d0e      	ldr	r5, [pc, #56]	; (d34c <__aeabi_d2iz+0x58>)
    d312:	0364      	lsls	r4, r4, #13
    d314:	4322      	orrs	r2, r4
    d316:	1aed      	subs	r5, r5, r3
    d318:	2d1f      	cmp	r5, #31
    d31a:	dd0b      	ble.n	d334 <__aeabi_d2iz+0x40>
    d31c:	480c      	ldr	r0, [pc, #48]	; (d350 <__aeabi_d2iz+0x5c>)
    d31e:	1ac3      	subs	r3, r0, r3
    d320:	40da      	lsrs	r2, r3
    d322:	4254      	negs	r4, r2
    d324:	2900      	cmp	r1, #0
    d326:	d100      	bne.n	d32a <__aeabi_d2iz+0x36>
    d328:	0014      	movs	r4, r2
    d32a:	0020      	movs	r0, r4
    d32c:	bd30      	pop	{r4, r5, pc}
    d32e:	4b09      	ldr	r3, [pc, #36]	; (d354 <__aeabi_d2iz+0x60>)
    d330:	18cc      	adds	r4, r1, r3
    d332:	e7fa      	b.n	d32a <__aeabi_d2iz+0x36>
    d334:	4c08      	ldr	r4, [pc, #32]	; (d358 <__aeabi_d2iz+0x64>)
    d336:	40e8      	lsrs	r0, r5
    d338:	46a4      	mov	ip, r4
    d33a:	4463      	add	r3, ip
    d33c:	409a      	lsls	r2, r3
    d33e:	4302      	orrs	r2, r0
    d340:	e7ef      	b.n	d322 <__aeabi_d2iz+0x2e>
    d342:	46c0      	nop			; (mov r8, r8)
    d344:	000003fe 	.word	0x000003fe
    d348:	0000041d 	.word	0x0000041d
    d34c:	00000433 	.word	0x00000433
    d350:	00000413 	.word	0x00000413
    d354:	7fffffff 	.word	0x7fffffff
    d358:	fffffbed 	.word	0xfffffbed

0000d35c <__aeabi_i2d>:
    d35c:	b570      	push	{r4, r5, r6, lr}
    d35e:	2800      	cmp	r0, #0
    d360:	d030      	beq.n	d3c4 <__aeabi_i2d+0x68>
    d362:	17c3      	asrs	r3, r0, #31
    d364:	18c4      	adds	r4, r0, r3
    d366:	405c      	eors	r4, r3
    d368:	0fc5      	lsrs	r5, r0, #31
    d36a:	0020      	movs	r0, r4
    d36c:	f7f9 fb28 	bl	69c0 <__clzsi2>
    d370:	4b17      	ldr	r3, [pc, #92]	; (d3d0 <__aeabi_i2d+0x74>)
    d372:	4a18      	ldr	r2, [pc, #96]	; (d3d4 <__aeabi_i2d+0x78>)
    d374:	1a1b      	subs	r3, r3, r0
    d376:	1ad2      	subs	r2, r2, r3
    d378:	2a1f      	cmp	r2, #31
    d37a:	dd18      	ble.n	d3ae <__aeabi_i2d+0x52>
    d37c:	4a16      	ldr	r2, [pc, #88]	; (d3d8 <__aeabi_i2d+0x7c>)
    d37e:	1ad2      	subs	r2, r2, r3
    d380:	4094      	lsls	r4, r2
    d382:	2200      	movs	r2, #0
    d384:	0324      	lsls	r4, r4, #12
    d386:	055b      	lsls	r3, r3, #21
    d388:	0b24      	lsrs	r4, r4, #12
    d38a:	0d5b      	lsrs	r3, r3, #21
    d38c:	2100      	movs	r1, #0
    d38e:	0010      	movs	r0, r2
    d390:	0324      	lsls	r4, r4, #12
    d392:	0d0a      	lsrs	r2, r1, #20
    d394:	0b24      	lsrs	r4, r4, #12
    d396:	0512      	lsls	r2, r2, #20
    d398:	4322      	orrs	r2, r4
    d39a:	4c10      	ldr	r4, [pc, #64]	; (d3dc <__aeabi_i2d+0x80>)
    d39c:	051b      	lsls	r3, r3, #20
    d39e:	4022      	ands	r2, r4
    d3a0:	4313      	orrs	r3, r2
    d3a2:	005b      	lsls	r3, r3, #1
    d3a4:	07ed      	lsls	r5, r5, #31
    d3a6:	085b      	lsrs	r3, r3, #1
    d3a8:	432b      	orrs	r3, r5
    d3aa:	0019      	movs	r1, r3
    d3ac:	bd70      	pop	{r4, r5, r6, pc}
    d3ae:	0021      	movs	r1, r4
    d3b0:	4091      	lsls	r1, r2
    d3b2:	000a      	movs	r2, r1
    d3b4:	210b      	movs	r1, #11
    d3b6:	1a08      	subs	r0, r1, r0
    d3b8:	40c4      	lsrs	r4, r0
    d3ba:	055b      	lsls	r3, r3, #21
    d3bc:	0324      	lsls	r4, r4, #12
    d3be:	0b24      	lsrs	r4, r4, #12
    d3c0:	0d5b      	lsrs	r3, r3, #21
    d3c2:	e7e3      	b.n	d38c <__aeabi_i2d+0x30>
    d3c4:	2500      	movs	r5, #0
    d3c6:	2300      	movs	r3, #0
    d3c8:	2400      	movs	r4, #0
    d3ca:	2200      	movs	r2, #0
    d3cc:	e7de      	b.n	d38c <__aeabi_i2d+0x30>
    d3ce:	46c0      	nop			; (mov r8, r8)
    d3d0:	0000041e 	.word	0x0000041e
    d3d4:	00000433 	.word	0x00000433
    d3d8:	00000413 	.word	0x00000413
    d3dc:	800fffff 	.word	0x800fffff

0000d3e0 <__aeabi_ui2d>:
    d3e0:	b510      	push	{r4, lr}
    d3e2:	1e04      	subs	r4, r0, #0
    d3e4:	d028      	beq.n	d438 <__aeabi_ui2d+0x58>
    d3e6:	f7f9 faeb 	bl	69c0 <__clzsi2>
    d3ea:	4b15      	ldr	r3, [pc, #84]	; (d440 <__aeabi_ui2d+0x60>)
    d3ec:	4a15      	ldr	r2, [pc, #84]	; (d444 <__aeabi_ui2d+0x64>)
    d3ee:	1a1b      	subs	r3, r3, r0
    d3f0:	1ad2      	subs	r2, r2, r3
    d3f2:	2a1f      	cmp	r2, #31
    d3f4:	dd15      	ble.n	d422 <__aeabi_ui2d+0x42>
    d3f6:	4a14      	ldr	r2, [pc, #80]	; (d448 <__aeabi_ui2d+0x68>)
    d3f8:	1ad2      	subs	r2, r2, r3
    d3fa:	4094      	lsls	r4, r2
    d3fc:	2200      	movs	r2, #0
    d3fe:	0324      	lsls	r4, r4, #12
    d400:	055b      	lsls	r3, r3, #21
    d402:	0b24      	lsrs	r4, r4, #12
    d404:	0d5b      	lsrs	r3, r3, #21
    d406:	2100      	movs	r1, #0
    d408:	0010      	movs	r0, r2
    d40a:	0324      	lsls	r4, r4, #12
    d40c:	0d0a      	lsrs	r2, r1, #20
    d40e:	0b24      	lsrs	r4, r4, #12
    d410:	0512      	lsls	r2, r2, #20
    d412:	4322      	orrs	r2, r4
    d414:	4c0d      	ldr	r4, [pc, #52]	; (d44c <__aeabi_ui2d+0x6c>)
    d416:	051b      	lsls	r3, r3, #20
    d418:	4022      	ands	r2, r4
    d41a:	4313      	orrs	r3, r2
    d41c:	005b      	lsls	r3, r3, #1
    d41e:	0859      	lsrs	r1, r3, #1
    d420:	bd10      	pop	{r4, pc}
    d422:	0021      	movs	r1, r4
    d424:	4091      	lsls	r1, r2
    d426:	000a      	movs	r2, r1
    d428:	210b      	movs	r1, #11
    d42a:	1a08      	subs	r0, r1, r0
    d42c:	40c4      	lsrs	r4, r0
    d42e:	055b      	lsls	r3, r3, #21
    d430:	0324      	lsls	r4, r4, #12
    d432:	0b24      	lsrs	r4, r4, #12
    d434:	0d5b      	lsrs	r3, r3, #21
    d436:	e7e6      	b.n	d406 <__aeabi_ui2d+0x26>
    d438:	2300      	movs	r3, #0
    d43a:	2400      	movs	r4, #0
    d43c:	2200      	movs	r2, #0
    d43e:	e7e2      	b.n	d406 <__aeabi_ui2d+0x26>
    d440:	0000041e 	.word	0x0000041e
    d444:	00000433 	.word	0x00000433
    d448:	00000413 	.word	0x00000413
    d44c:	800fffff 	.word	0x800fffff

0000d450 <__clzdi2>:
    d450:	b510      	push	{r4, lr}
    d452:	2900      	cmp	r1, #0
    d454:	d103      	bne.n	d45e <__clzdi2+0xe>
    d456:	f7f9 fab3 	bl	69c0 <__clzsi2>
    d45a:	3020      	adds	r0, #32
    d45c:	e002      	b.n	d464 <__clzdi2+0x14>
    d45e:	1c08      	adds	r0, r1, #0
    d460:	f7f9 faae 	bl	69c0 <__clzsi2>
    d464:	bd10      	pop	{r4, pc}
    d466:	46c0      	nop			; (mov r8, r8)
    d468:	203a3153 	.word	0x203a3153
    d46c:	53206425 	.word	0x53206425
    d470:	25203a32 	.word	0x25203a32
    d474:	0a64      	.short	0x0a64
    d476:	00          	.byte	0x00
    d477:	41          	.byte	0x41
    d478:	70204344 	.word	0x70204344
    d47c:	70697265 	.word	0x70697265
    d480:	61726568 	.word	0x61726568
    d484:	6f63206c 	.word	0x6f63206c
    d488:	6769666e 	.word	0x6769666e
    d48c:	69616620 	.word	0x69616620
    d490:	2e64656c 	.word	0x2e64656c
    d494:	4441000a 	.word	0x4441000a
    d498:	6e692043 	.word	0x6e692043
    d49c:	72207469 	.word	0x72207469
    d4a0:	74657365 	.word	0x74657365
    d4a4:	69616620 	.word	0x69616620
    d4a8:	2e64656c 	.word	0x2e64656c
    d4ac:	4441000a 	.word	0x4441000a
    d4b0:	6e692043 	.word	0x6e692043
    d4b4:	75207469 	.word	0x75207469
    d4b8:	636f6c6e 	.word	0x636f6c6e
    d4bc:	6166206b 	.word	0x6166206b
    d4c0:	64656c69 	.word	0x64656c69
    d4c4:	41000a2e 	.word	0x41000a2e
    d4c8:	69204344 	.word	0x69204344
    d4cc:	2074696e 	.word	0x2074696e
    d4d0:	666e6f63 	.word	0x666e6f63
    d4d4:	66206769 	.word	0x66206769
    d4d8:	656c6961 	.word	0x656c6961
    d4dc:	000a2e64 	.word	0x000a2e64
    d4e0:	20434441 	.word	0x20434441
    d4e4:	74696e69 	.word	0x74696e69
    d4e8:	6d617320 	.word	0x6d617320
    d4ec:	20656c70 	.word	0x20656c70
    d4f0:	65746172 	.word	0x65746172
    d4f4:	69616620 	.word	0x69616620
    d4f8:	2e64656c 	.word	0x2e64656c
    d4fc:	4441000a 	.word	0x4441000a
    d500:	6e692043 	.word	0x6e692043
    d504:	77207469 	.word	0x77207469
    d508:	75656b61 	.word	0x75656b61
    d50c:	61662070 	.word	0x61662070
    d510:	64656c69 	.word	0x64656c69
    d514:	41000a2e 	.word	0x41000a2e
    d518:	69204344 	.word	0x69204344
    d51c:	2074696e 	.word	0x2074696e
    d520:	6b636f6c 	.word	0x6b636f6c
    d524:	69616620 	.word	0x69616620
    d528:	2e64656c 	.word	0x2e64656c
    d52c:	4441000a 	.word	0x4441000a
    d530:	6e692043 	.word	0x6e692043
    d534:	66207469 	.word	0x66207469
    d538:	746c7561 	.word	0x746c7561
    d53c:	65686320 	.word	0x65686320
    d540:	66206b63 	.word	0x66206b63
    d544:	656c6961 	.word	0x656c6961
    d548:	000a2e64 	.word	0x000a2e64
    d54c:	20434441 	.word	0x20434441
    d550:	20736168 	.word	0x20736168
    d554:	6c756166 	.word	0x6c756166
    d558:	61207374 	.word	0x61207374
    d55c:	72657466 	.word	0x72657466
    d560:	696e6920 	.word	0x696e6920
    d564:	30203a74 	.word	0x30203a74
    d568:	34302578 	.word	0x34302578
    d56c:	41000a78 	.word	0x41000a78
    d570:	69204344 	.word	0x69204344
    d574:	2074696e 	.word	0x2074696e
    d578:	63637573 	.word	0x63637573
    d57c:	2e737365 	.word	0x2e737365
    d580:	4441000a 	.word	0x4441000a
    d584:	6e692043 	.word	0x6e692043
    d588:	73207469 	.word	0x73207469
    d58c:	74726174 	.word	0x74726174
    d590:	69616620 	.word	0x69616620
    d594:	2e64656c 	.word	0x2e64656c
    d598:	0000000a 	.word	0x0000000a

0000d59c <rangeConversionTable>:
    d59c:	00255a80 019ac440 09b55a00 120c5c80     .Z%.@....Z...\..
    d5ac:	1a278e80 229b40c0 2ab36580 330ba080     ..'..@.".e.*...3
    d5bc:	3b26d280                                ..&;

0000d5c0 <tc_interrupt_vectors.13746>:
    d5c0:	00141312                                ....

0000d5c4 <_tcc_intflag>:
    d5c4:	00000001 00000002 00000004 00000008     ................
    d5d4:	00001000 00002000 00004000 00008000     ..... ...@......
    d5e4:	00010000 00020000 00040000 00080000     ................
    d5f4:	42002c00 42003000 42003400 20434441     .,.B.0.B.4.BADC 
    d604:	20697073 74696e69 69616620 0a64656c     spi init failed.
    d614:	203a4300 000a6425                       .C: %d..

0000d61c <tc_interrupt_vectors.13762>:
    d61c:	31141312 2e2e2e32 00004645 42000800     ...12...EF.....B
    d62c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    d63c:	42001c00                                ...B

0000d640 <_usb_device_irq_bits>:
    d640:	00080004 00800070 01000001 0c030200              ....p.........

0000d64e <_usb_endpoint_irq_bits>:
    d64e:	60100c03 01200000                                ...`..

0000d654 <_global_impure_ptr>:
    d654:	20000120 00007a46 00007ae0 00007ae0      .. Fz...z...z..
    d664:	00007ab8 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d674:	00007ae0 00007ae0 00007ae0 00007ac2     .z...z...z...z..
    d684:	000075cc 00007ae0 0000755c 000075d6     .u...z..\u...u..
    d694:	00007ae0 00007624 00007824 00007824     .z..$v..$x..$x..
    d6a4:	00007824 00007824 00007824 00007824     $x..$x..$x..$x..
    d6b4:	00007824 00007824 00007824 00007ae0     $x..$x..$x...z..
    d6c4:	00007ae0 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d6d4:	00007ae0 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d6e4:	00007ae0 0000762e 00007784 00007ae0     .z...v...w...z..
    d6f4:	00007784 00007ae0 00007ae0 00007ae0     .w...z...z...z..
    d704:	00007ae0 0000781a 00007ae0 00007ae0     .z...x...z...z..
    d714:	00007a08 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d724:	00007ae0 00007ae0 0000797e 00007ae0     .z...z..~y...z..
    d734:	00007ae0 000079ac 00007ae0 00007ae0     .z...y...z...z..
    d744:	00007ae0 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d754:	00007ae0 00007ae0 00007ae0 00007ae0     .z...z...z...z..
    d764:	0000791e 00007954 00007784 00007784     .y..Ty...w...w..
    d774:	00007784 00007962 00007954 00007ae0     .w..by..Ty...z..
    d784:	00007ae0 0000796c 00007ae0 00007866     .z..ly...z..fx..
    d794:	00007ad8 00007894 00007a56 00007ae0     .z...x..Vz...z..
    d7a4:	00007a60 00007ae0 00007adc 00007ae0     `z...z...z...z..
    d7b4:	00007ae0 00007a36 00464e49 00666e69     .z..6z..INF.inf.
    d7c4:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    d7d4:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    d7e4:	37363534 62613938 66656463 00000000     456789abcdef....
    d7f4:	6c756e28 0000296c 00000030              (null)..0...

0000d800 <blanks.7223>:
    d800:	20202020 20202020 20202020 20202020                     

0000d810 <zeroes.7224>:
    d810:	30303030 30303030 30303030 30303030     0000000000000000
    d820:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
    d830:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0000d840 <__mprec_bigtens>:
    d840:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    d850:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    d860:	7f73bf3c 75154fdd                       <.s..O.u

0000d868 <__mprec_tens>:
    d868:	00000000 3ff00000 00000000 40240000     .......?......$@
    d878:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    d888:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    d898:	00000000 412e8480 00000000 416312d0     .......A......cA
    d8a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    d8b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    d8c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    d8d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    d8e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    d8f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    d908:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    d918:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    d928:	79d99db4 44ea7843                       ...yCx.D

0000d930 <p05.6040>:
    d930:	00000005 00000019 0000007d              ........}...

0000d93c <_ctype_>:
    d93c:	20202000 20202020 28282020 20282828     .         ((((( 
    d94c:	20202020 20202020 20202020 20202020                     
    d95c:	10108820 10101010 10101010 10101010      ...............
    d96c:	04040410 04040404 10040404 10101010     ................
    d97c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    d98c:	01010101 01010101 01010101 10101010     ................
    d99c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    d9ac:	02020202 02020202 02020202 10101010     ................
    d9bc:	00000020 00000000 00000000 00000000      ...............
	...
    da40:	0000c118 0000c0fa 0000c0b4 0000bfd2     ................
    da50:	0000c0b4 0000c0ec 0000c0b4 0000bfd2     ................
    da60:	0000c0fa 0000c0fa 0000c0ec 0000bfd2     ................
    da70:	0000bfca 0000bfca 0000bfca 0000c330     ............0...
    da80:	0000c978 0000c838 0000c838 0000c834     x...8...8...4...
    da90:	0000c950 0000c950 0000c942 0000c834     P...P...B...4...
    daa0:	0000c950 0000c942 0000c950 0000c834     P...B...P...4...
    dab0:	0000c958 0000c958 0000c958 0000cb5c     X...X...X...\...

0000dac0 <_init>:
    dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dac2:	46c0      	nop			; (mov r8, r8)
    dac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dac6:	bc08      	pop	{r3}
    dac8:	469e      	mov	lr, r3
    daca:	4770      	bx	lr

0000dacc <__init_array_start>:
    dacc:	00008bb9 	.word	0x00008bb9

0000dad0 <__frame_dummy_init_array_entry>:
    dad0:	000000dd                                ....

0000dad4 <_fini>:
    dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dad6:	46c0      	nop			; (mov r8, r8)
    dad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dada:	bc08      	pop	{r3}
    dadc:	469e      	mov	lr, r3
    dade:	4770      	bx	lr

0000dae0 <__fini_array_start>:
    dae0:	000000b5 	.word	0x000000b5
