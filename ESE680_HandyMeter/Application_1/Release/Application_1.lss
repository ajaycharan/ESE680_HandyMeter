
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ecd0  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003cc  20000000  00016cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ed4  200003d0  000170a0  000203cc  2**4
                  ALLOC
  3 .stack        00002004  200012a4  00017f74  000203cc  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000203f6  2**0
                  CONTENTS, READONLY
  6 .debug_info   000074b1  00000000  00000000  0002044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023fd  00000000  00000000  00027900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000025f3  00000000  00000000  00029cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001778  00000000  00000000  0002c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000034e0  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009dd8  00000000  00000000  00030f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004931  00000000  00000000  0003ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000502c  00000000  00000000  0003f654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	a8 32 00 20 ed 22 01 00 e9 22 01 00 e9 22 01 00     .2. ."..."..."..
	...
    802c:	e9 22 01 00 00 00 00 00 00 00 00 00 e9 22 01 00     ."..........."..
    803c:	e9 22 01 00 e9 22 01 00 cd 9f 00 00 e9 22 01 00     ."..."......."..
    804c:	fd f6 00 00 a9 f3 00 00 e9 22 01 00 91 f2 00 00     ........."......
    805c:	59 1b 01 00 e9 22 01 00 bd f9 00 00 cd f9 00 00     Y...."..........
    806c:	dd f9 00 00 ed f9 00 00 fd f9 00 00 0d fa 00 00     ................
    807c:	81 88 00 00 91 88 00 00 a1 88 00 00 e9 22 01 00     ............."..
    808c:	e9 22 01 00 e9 22 01 00 00 00 00 00 00 00 00 00     ."..."..........
    809c:	e9 22 01 00 e9 22 01 00 e9 22 01 00 e9 22 01 00     ."..."..."..."..
    80ac:	e9 22 01 00 00 00 00 00                             ."......

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200003d0 	.word	0x200003d0
    80d4:	00000000 	.word	0x00000000
    80d8:	00016cd0 	.word	0x00016cd0

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200003d4 	.word	0x200003d4
    8108:	00016cd0 	.word	0x00016cd0
    810c:	00016cd0 	.word	0x00016cd0
    8110:	00000000 	.word	0x00000000

00008114 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    8114:	b510      	push	{r4, lr}
	switch (sd_mmc_check(slot))
    8116:	4b0e      	ldr	r3, [pc, #56]	; (8150 <sd_mmc_test_unit_ready+0x3c>)
{
    8118:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    811a:	4798      	blx	r3
    811c:	2801      	cmp	r0, #1
    811e:	d015      	beq.n	814c <sd_mmc_test_unit_ready+0x38>
    8120:	2800      	cmp	r0, #0
    8122:	d008      	beq.n	8136 <sd_mmc_test_unit_ready+0x22>
    8124:	2802      	cmp	r0, #2
    8126:	d001      	beq.n	812c <sd_mmc_test_unit_ready+0x18>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    8128:	2001      	movs	r0, #1
	}
}
    812a:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
    812c:	2200      	movs	r2, #0
    812e:	4b09      	ldr	r3, [pc, #36]	; (8154 <sd_mmc_test_unit_ready+0x40>)
    8130:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    8132:	2002      	movs	r0, #2
    8134:	e7f9      	b.n	812a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_ejected[slot]) {
    8136:	4b07      	ldr	r3, [pc, #28]	; (8154 <sd_mmc_test_unit_ready+0x40>)
    8138:	5d1b      	ldrb	r3, [r3, r4]
    813a:	2b00      	cmp	r3, #0
    813c:	d1f9      	bne.n	8132 <sd_mmc_test_unit_ready+0x1e>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    813e:	4b06      	ldr	r3, [pc, #24]	; (8158 <sd_mmc_test_unit_ready+0x44>)
    8140:	0020      	movs	r0, r4
    8142:	4798      	blx	r3
    8144:	0783      	lsls	r3, r0, #30
    8146:	d0f4      	beq.n	8132 <sd_mmc_test_unit_ready+0x1e>
			return CTRL_GOOD;
    8148:	2000      	movs	r0, #0
    814a:	e7ee      	b.n	812a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    814c:	2003      	movs	r0, #3
    814e:	e7ec      	b.n	812a <sd_mmc_test_unit_ready+0x16>
    8150:	0000a5ad 	.word	0x0000a5ad
    8154:	200003ec 	.word	0x200003ec
    8158:	0000aa35 	.word	0x0000aa35

0000815c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    815c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    815e:	2000      	movs	r0, #0
    8160:	4b01      	ldr	r3, [pc, #4]	; (8168 <sd_mmc_test_unit_ready_0+0xc>)
    8162:	4798      	blx	r3
}
    8164:	bd10      	pop	{r4, pc}
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	00008115 	.word	0x00008115

0000816c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    816c:	b570      	push	{r4, r5, r6, lr}
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    816e:	4b05      	ldr	r3, [pc, #20]	; (8184 <sd_mmc_read_capacity+0x18>)
{
    8170:	000d      	movs	r5, r1
    8172:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    8174:	4798      	blx	r3
    8176:	0040      	lsls	r0, r0, #1
    8178:	3801      	subs	r0, #1
    817a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    817c:	4b02      	ldr	r3, [pc, #8]	; (8188 <sd_mmc_read_capacity+0x1c>)
    817e:	0020      	movs	r0, r4
    8180:	4798      	blx	r3
}
    8182:	bd70      	pop	{r4, r5, r6, pc}
    8184:	0000aa71 	.word	0x0000aa71
    8188:	00008115 	.word	0x00008115

0000818c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    818c:	b510      	push	{r4, lr}
    818e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    8190:	4b01      	ldr	r3, [pc, #4]	; (8198 <sd_mmc_read_capacity_0+0xc>)
    8192:	2000      	movs	r0, #0
    8194:	4798      	blx	r3
}
    8196:	bd10      	pop	{r4, pc}
    8198:	0000816d 	.word	0x0000816d

0000819c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    819c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    819e:	2000      	movs	r0, #0
    81a0:	4b01      	ldr	r3, [pc, #4]	; (81a8 <sd_mmc_wr_protect_0+0xc>)
    81a2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    81a4:	bd10      	pop	{r4, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	0000aaad 	.word	0x0000aaad

000081ac <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    81ac:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    81ae:	4b0d      	ldr	r3, [pc, #52]	; (81e4 <sd_mmc_mem_2_ram+0x38>)
{
    81b0:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    81b2:	2201      	movs	r2, #1
    81b4:	4798      	blx	r3
    81b6:	2800      	cmp	r0, #0
    81b8:	d004      	beq.n	81c4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    81ba:	3802      	subs	r0, #2
    81bc:	4243      	negs	r3, r0
    81be:	4158      	adcs	r0, r3
    81c0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    81c2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    81c4:	4b08      	ldr	r3, [pc, #32]	; (81e8 <sd_mmc_mem_2_ram+0x3c>)
    81c6:	2101      	movs	r1, #1
    81c8:	0020      	movs	r0, r4
    81ca:	4798      	blx	r3
    81cc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    81ce:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    81d0:	2b00      	cmp	r3, #0
    81d2:	d1f6      	bne.n	81c2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    81d4:	4b05      	ldr	r3, [pc, #20]	; (81ec <sd_mmc_mem_2_ram+0x40>)
    81d6:	2000      	movs	r0, #0
    81d8:	4798      	blx	r3
    81da:	1e43      	subs	r3, r0, #1
    81dc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    81de:	b2c0      	uxtb	r0, r0
    81e0:	e7ef      	b.n	81c2 <sd_mmc_mem_2_ram+0x16>
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	0000aab1 	.word	0x0000aab1
    81e8:	0000ab49 	.word	0x0000ab49
    81ec:	0000ab71 	.word	0x0000ab71

000081f0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    81f0:	b510      	push	{r4, lr}
    81f2:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    81f4:	4b02      	ldr	r3, [pc, #8]	; (8200 <sd_mmc_mem_2_ram_0+0x10>)
    81f6:	0001      	movs	r1, r0
    81f8:	2000      	movs	r0, #0
    81fa:	4798      	blx	r3
}
    81fc:	bd10      	pop	{r4, pc}
    81fe:	46c0      	nop			; (mov r8, r8)
    8200:	000081ad 	.word	0x000081ad

00008204 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    8204:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    8206:	4b0d      	ldr	r3, [pc, #52]	; (823c <sd_mmc_ram_2_mem+0x38>)
{
    8208:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    820a:	2201      	movs	r2, #1
    820c:	4798      	blx	r3
    820e:	2800      	cmp	r0, #0
    8210:	d004      	beq.n	821c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    8212:	3802      	subs	r0, #2
    8214:	4243      	negs	r3, r0
    8216:	4158      	adcs	r0, r3
    8218:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    821a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    821c:	4b08      	ldr	r3, [pc, #32]	; (8240 <sd_mmc_ram_2_mem+0x3c>)
    821e:	2101      	movs	r1, #1
    8220:	0020      	movs	r0, r4
    8222:	4798      	blx	r3
    8224:	0003      	movs	r3, r0
		return CTRL_FAIL;
    8226:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    8228:	2b00      	cmp	r3, #0
    822a:	d1f6      	bne.n	821a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    822c:	4b05      	ldr	r3, [pc, #20]	; (8244 <sd_mmc_ram_2_mem+0x40>)
    822e:	2000      	movs	r0, #0
    8230:	4798      	blx	r3
    8232:	1e43      	subs	r3, r0, #1
    8234:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    8236:	b2c0      	uxtb	r0, r0
    8238:	e7ef      	b.n	821a <sd_mmc_ram_2_mem+0x16>
    823a:	46c0      	nop			; (mov r8, r8)
    823c:	0000abe5 	.word	0x0000abe5
    8240:	0000ac69 	.word	0x0000ac69
    8244:	0000ac91 	.word	0x0000ac91

00008248 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    8248:	b510      	push	{r4, lr}
    824a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    824c:	4b02      	ldr	r3, [pc, #8]	; (8258 <sd_mmc_ram_2_mem_0+0x10>)
    824e:	0001      	movs	r1, r0
    8250:	2000      	movs	r0, #0
    8252:	4798      	blx	r3
}
    8254:	bd10      	pop	{r4, pc}
    8256:	46c0      	nop			; (mov r8, r8)
    8258:	00008205 	.word	0x00008205

0000825c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    825c:	4b08      	ldr	r3, [pc, #32]	; (8280 <_tcc_get_inst_index+0x24>)
    825e:	4298      	cmp	r0, r3
    8260:	d009      	beq.n	8276 <_tcc_get_inst_index+0x1a>
    8262:	4b08      	ldr	r3, [pc, #32]	; (8284 <_tcc_get_inst_index+0x28>)
    8264:	4298      	cmp	r0, r3
    8266:	d008      	beq.n	827a <_tcc_get_inst_index+0x1e>
    8268:	4b07      	ldr	r3, [pc, #28]	; (8288 <_tcc_get_inst_index+0x2c>)
    826a:	469c      	mov	ip, r3
    826c:	4460      	add	r0, ip
    826e:	4243      	negs	r3, r0
    8270:	4158      	adcs	r0, r3
    8272:	0040      	lsls	r0, r0, #1
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    8274:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    8276:	2000      	movs	r0, #0
    8278:	e7fc      	b.n	8274 <_tcc_get_inst_index+0x18>
    827a:	2001      	movs	r0, #1
			return i;
    827c:	e7fa      	b.n	8274 <_tcc_get_inst_index+0x18>
    827e:	46c0      	nop			; (mov r8, r8)
    8280:	42002000 	.word	0x42002000
    8284:	42002400 	.word	0x42002400
    8288:	bdffd800 	.word	0xbdffd800

0000828c <tcc_get_config_defaults>:
		if (hw == tcc_modules[i]) {
    828c:	4b53      	ldr	r3, [pc, #332]	; (83dc <tcc_get_config_defaults+0x150>)
    828e:	4299      	cmp	r1, r3
    8290:	d006      	beq.n	82a0 <tcc_get_config_defaults+0x14>
    8292:	4b53      	ldr	r3, [pc, #332]	; (83e0 <tcc_get_config_defaults+0x154>)
    8294:	4299      	cmp	r1, r3
    8296:	d003      	beq.n	82a0 <tcc_get_config_defaults+0x14>
    8298:	4b52      	ldr	r3, [pc, #328]	; (83e4 <tcc_get_config_defaults+0x158>)
    829a:	4299      	cmp	r1, r3
    829c:	d100      	bne.n	82a0 <tcc_get_config_defaults+0x14>
    829e:	e09a      	b.n	83d6 <tcc_get_config_defaults+0x14a>
    82a0:	4a51      	ldr	r2, [pc, #324]	; (83e8 <tcc_get_config_defaults+0x15c>)
{
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);

	/* Base counter defaults */
	config->counter.count                  = 0;
    82a2:	2300      	movs	r3, #0

	config->counter.period                 = _tcc_maxs[module_index];
    82a4:	6042      	str	r2, [r0, #4]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    82a6:	222c      	movs	r2, #44	; 0x2c
	config->counter.count                  = 0;
    82a8:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    82aa:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    82ac:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    82ae:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    82b0:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    82b2:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    82b4:	61c3      	str	r3, [r0, #28]
    82b6:	6203      	str	r3, [r0, #32]
    82b8:	6243      	str	r3, [r0, #36]	; 0x24
    82ba:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    82bc:	7503      	strb	r3, [r0, #20]
    82be:	7543      	strb	r3, [r0, #21]
    82c0:	7583      	strb	r3, [r0, #22]
    82c2:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    82c4:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    82c6:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    82c8:	7403      	strb	r3, [r0, #16]
    82ca:	7443      	strb	r3, [r0, #17]
    82cc:	7483      	strb	r3, [r0, #18]
    82ce:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    82d0:	5483      	strb	r3, [r0, r2]
    82d2:	3201      	adds	r2, #1
    82d4:	5483      	strb	r3, [r0, r2]
    82d6:	3201      	adds	r2, #1
    82d8:	5483      	strb	r3, [r0, r2]
    82da:	3201      	adds	r2, #1
    82dc:	5483      	strb	r3, [r0, r2]
    82de:	3201      	adds	r2, #1
    82e0:	5483      	strb	r3, [r0, r2]
    82e2:	3201      	adds	r2, #1
    82e4:	5483      	strb	r3, [r0, r2]
    82e6:	3201      	adds	r2, #1
    82e8:	5483      	strb	r3, [r0, r2]
    82ea:	3201      	adds	r2, #1
    82ec:	5483      	strb	r3, [r0, r2]
    82ee:	3201      	adds	r2, #1
    82f0:	5483      	strb	r3, [r0, r2]
    82f2:	3201      	adds	r2, #1
    82f4:	5483      	strb	r3, [r0, r2]
    82f6:	3201      	adds	r2, #1
    82f8:	5483      	strb	r3, [r0, r2]
    82fa:	3201      	adds	r2, #1
    82fc:	5483      	strb	r3, [r0, r2]
    82fe:	3201      	adds	r2, #1
    8300:	5483      	strb	r3, [r0, r2]
    8302:	3201      	adds	r2, #1
    8304:	5483      	strb	r3, [r0, r2]
    8306:	3201      	adds	r2, #1
    8308:	5483      	strb	r3, [r0, r2]
    830a:	3201      	adds	r2, #1
    830c:	5483      	strb	r3, [r0, r2]
    830e:	3201      	adds	r2, #1
    8310:	5483      	strb	r3, [r0, r2]
    8312:	3201      	adds	r2, #1
    8314:	5483      	strb	r3, [r0, r2]
    8316:	3201      	adds	r2, #1
    8318:	5483      	strb	r3, [r0, r2]
    831a:	3201      	adds	r2, #1
    831c:	5483      	strb	r3, [r0, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    831e:	3201      	adds	r2, #1
    8320:	5483      	strb	r3, [r0, r2]
    8322:	3201      	adds	r2, #1
    8324:	5483      	strb	r3, [r0, r2]
    8326:	3201      	adds	r2, #1
    8328:	5483      	strb	r3, [r0, r2]
    832a:	3201      	adds	r2, #1
    832c:	5483      	strb	r3, [r0, r2]
    832e:	3201      	adds	r2, #1
    8330:	5483      	strb	r3, [r0, r2]
    8332:	3201      	adds	r2, #1
    8334:	5483      	strb	r3, [r0, r2]
    8336:	3201      	adds	r2, #1
    8338:	5483      	strb	r3, [r0, r2]
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    833a:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    833c:	3201      	adds	r2, #1
    833e:	5483      	strb	r3, [r0, r2]
    8340:	3201      	adds	r2, #1
    8342:	5483      	strb	r3, [r0, r2]
    8344:	3201      	adds	r2, #1
    8346:	5483      	strb	r3, [r0, r2]
    8348:	3201      	adds	r2, #1
    834a:	5483      	strb	r3, [r0, r2]
    834c:	3201      	adds	r2, #1
    834e:	5483      	strb	r3, [r0, r2]
    8350:	3201      	adds	r2, #1
    8352:	5483      	strb	r3, [r0, r2]
    8354:	3201      	adds	r2, #1
    8356:	5483      	strb	r3, [r0, r2]
    8358:	3201      	adds	r2, #1
    835a:	5483      	strb	r3, [r0, r2]
    835c:	3201      	adds	r2, #1
    835e:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    8360:	3201      	adds	r2, #1
    8362:	5483      	strb	r3, [r0, r2]
    8364:	3201      	adds	r2, #1
    8366:	5483      	strb	r3, [r0, r2]
    8368:	3201      	adds	r2, #1
    836a:	5483      	strb	r3, [r0, r2]
    836c:	3201      	adds	r2, #1
    836e:	5483      	strb	r3, [r0, r2]
    8370:	3201      	adds	r2, #1
    8372:	5483      	strb	r3, [r0, r2]
    8374:	3201      	adds	r2, #1
    8376:	5483      	strb	r3, [r0, r2]
    8378:	3201      	adds	r2, #1
    837a:	5483      	strb	r3, [r0, r2]
    837c:	3201      	adds	r2, #1
    837e:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    8380:	3241      	adds	r2, #65	; 0x41
    8382:	5483      	strb	r3, [r0, r2]
    8384:	3201      	adds	r2, #1
    8386:	6583      	str	r3, [r0, #88]	; 0x58
    8388:	6783      	str	r3, [r0, #120]	; 0x78
    838a:	5483      	strb	r3, [r0, r2]
    838c:	3201      	adds	r2, #1
    838e:	65c3      	str	r3, [r0, #92]	; 0x5c
    8390:	67c3      	str	r3, [r0, #124]	; 0x7c
    8392:	5483      	strb	r3, [r0, r2]
    8394:	3a1a      	subs	r2, #26
    8396:	6603      	str	r3, [r0, #96]	; 0x60
    8398:	5083      	str	r3, [r0, r2]
    839a:	321b      	adds	r2, #27
    839c:	5483      	strb	r3, [r0, r2]
    839e:	3a17      	subs	r2, #23
    83a0:	6643      	str	r3, [r0, #100]	; 0x64
    83a2:	5083      	str	r3, [r0, r2]
    83a4:	3218      	adds	r2, #24
    83a6:	5483      	strb	r3, [r0, r2]
    83a8:	3a14      	subs	r2, #20
    83aa:	6683      	str	r3, [r0, #104]	; 0x68
    83ac:	5083      	str	r3, [r0, r2]
    83ae:	3215      	adds	r2, #21
    83b0:	5483      	strb	r3, [r0, r2]
    83b2:	3a11      	subs	r2, #17
    83b4:	66c3      	str	r3, [r0, #108]	; 0x6c
    83b6:	5083      	str	r3, [r0, r2]
    83b8:	3212      	adds	r2, #18
    83ba:	5483      	strb	r3, [r0, r2]
    83bc:	3a0e      	subs	r2, #14
    83be:	6703      	str	r3, [r0, #112]	; 0x70
    83c0:	5083      	str	r3, [r0, r2]
    83c2:	320f      	adds	r2, #15
    83c4:	5483      	strb	r3, [r0, r2]
    83c6:	3a0b      	subs	r2, #11
    83c8:	6743      	str	r3, [r0, #116]	; 0x74
    83ca:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    83cc:	320c      	adds	r2, #12
    83ce:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    83d0:	3201      	adds	r2, #1
    83d2:	5483      	strb	r3, [r0, r2]
}
    83d4:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    83d6:	4a05      	ldr	r2, [pc, #20]	; (83ec <tcc_get_config_defaults+0x160>)
    83d8:	e763      	b.n	82a2 <tcc_get_config_defaults+0x16>
    83da:	46c0      	nop			; (mov r8, r8)
    83dc:	42002000 	.word	0x42002000
    83e0:	42002400 	.word	0x42002400
    83e4:	42002800 	.word	0x42002800
    83e8:	00ffffff 	.word	0x00ffffff
    83ec:	0000ffff 	.word	0x0000ffff

000083f0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    83f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f2:	4645      	mov	r5, r8
    83f4:	46de      	mov	lr, fp
    83f6:	4657      	mov	r7, sl
    83f8:	464e      	mov	r6, r9
    83fa:	b5e0      	push	{r5, r6, r7, lr}
		if (hw == tcc_modules[i]) {
    83fc:	4bc4      	ldr	r3, [pc, #784]	; (8710 <tcc_init+0x320>)
{
    83fe:	b08f      	sub	sp, #60	; 0x3c
    8400:	000c      	movs	r4, r1
    8402:	0015      	movs	r5, r2
		if (hw == tcc_modules[i]) {
    8404:	4299      	cmp	r1, r3
    8406:	d100      	bne.n	840a <tcc_init+0x1a>
    8408:	e0fb      	b.n	8602 <tcc_init+0x212>
    840a:	4bc2      	ldr	r3, [pc, #776]	; (8714 <tcc_init+0x324>)
    840c:	4299      	cmp	r1, r3
    840e:	d100      	bne.n	8412 <tcc_init+0x22>
    8410:	e0fb      	b.n	860a <tcc_init+0x21a>
    8412:	4bc1      	ldr	r3, [pc, #772]	; (8718 <tcc_init+0x328>)
    8414:	2680      	movs	r6, #128	; 0x80
    8416:	4299      	cmp	r1, r3
    8418:	d100      	bne.n	841c <tcc_init+0x2c>
    841a:	e0fa      	b.n	8612 <tcc_init+0x222>
    841c:	2300      	movs	r3, #0
    841e:	0076      	lsls	r6, r6, #1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8420:	49be      	ldr	r1, [pc, #760]	; (871c <tcc_init+0x32c>)
    8422:	6a0a      	ldr	r2, [r1, #32]
    8424:	4332      	orrs	r2, r6
    8426:	620a      	str	r2, [r1, #32]
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    8428:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    842a:	221c      	movs	r2, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    842c:	0789      	lsls	r1, r1, #30
    842e:	d507      	bpl.n	8440 <tcc_init+0x50>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    8430:	0010      	movs	r0, r2
    8432:	b00f      	add	sp, #60	; 0x3c
    8434:	bc3c      	pop	{r2, r3, r4, r5}
    8436:	4690      	mov	r8, r2
    8438:	4699      	mov	r9, r3
    843a:	46a2      	mov	sl, r4
    843c:	46ab      	mov	fp, r5
    843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    8440:	6821      	ldr	r1, [r4, #0]
    8442:	07c9      	lsls	r1, r1, #31
    8444:	d4f4      	bmi.n	8430 <tcc_init+0x40>
	uint32_t count_max  = _tcc_maxs[module_index];
    8446:	4ab6      	ldr	r2, [pc, #728]	; (8720 <tcc_init+0x330>)
    8448:	0099      	lsls	r1, r3, #2
    844a:	5856      	ldr	r6, [r2, r1]
	if ((config->counter.count > count_max)
    844c:	682a      	ldr	r2, [r5, #0]
    844e:	4296      	cmp	r6, r2
    8450:	d201      	bcs.n	8456 <tcc_init+0x66>
		return STATUS_ERR_INVALID_ARG;
    8452:	2217      	movs	r2, #23
    8454:	e7ec      	b.n	8430 <tcc_init+0x40>
		|| (config->counter.period > count_max)
    8456:	686a      	ldr	r2, [r5, #4]
    8458:	4296      	cmp	r6, r2
    845a:	d3fa      	bcc.n	8452 <tcc_init+0x62>
    845c:	221c      	movs	r2, #28
    845e:	4694      	mov	ip, r2
    8460:	44ac      	add	ip, r5
    8462:	4662      	mov	r2, ip
    8464:	002f      	movs	r7, r5
    8466:	469c      	mov	ip, r3
    8468:	9204      	str	r2, [sp, #16]
    846a:	372c      	adds	r7, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    846c:	6813      	ldr	r3, [r2, #0]
    846e:	429e      	cmp	r6, r3
    8470:	d3ef      	bcc.n	8452 <tcc_init+0x62>
    8472:	3204      	adds	r2, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    8474:	42ba      	cmp	r2, r7
    8476:	d1f9      	bne.n	846c <tcc_init+0x7c>
    8478:	2698      	movs	r6, #152	; 0x98
    847a:	4663      	mov	r3, ip
    847c:	46b4      	mov	ip, r6
    847e:	44ac      	add	ip, r5
    8480:	4666      	mov	r6, ip
    8482:	9605      	str	r6, [sp, #20]
    8484:	2600      	movs	r6, #0
    8486:	4667      	mov	r7, ip
    8488:	46b4      	mov	ip, r6
		if (i >= _tcc_ow_nums[module_index]) {
    848a:	4ea6      	ldr	r6, [pc, #664]	; (8724 <tcc_init+0x334>)
    848c:	46b1      	mov	r9, r6
    848e:	4666      	mov	r6, ip
    8490:	4694      	mov	ip, r2
    8492:	001a      	movs	r2, r3
		if (!config->pins.enable_wave_out_pin[i]) {
    8494:	783b      	ldrb	r3, [r7, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	d003      	beq.n	84a2 <tcc_init+0xb2>
		if (i >= _tcc_ow_nums[module_index]) {
    849a:	464b      	mov	r3, r9
    849c:	5c9b      	ldrb	r3, [r3, r2]
    849e:	42b3      	cmp	r3, r6
    84a0:	ddd7      	ble.n	8452 <tcc_init+0x62>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    84a2:	3601      	adds	r6, #1
    84a4:	3701      	adds	r7, #1
    84a6:	2e08      	cmp	r6, #8
    84a8:	d1f4      	bne.n	8494 <tcc_init+0xa4>
    84aa:	0013      	movs	r3, r2
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    84ac:	2780      	movs	r7, #128	; 0x80
    84ae:	4e9e      	ldr	r6, [pc, #632]	; (8728 <tcc_init+0x338>)
    84b0:	047f      	lsls	r7, r7, #17
    84b2:	5cf6      	ldrb	r6, [r6, r3]
    84b4:	4662      	mov	r2, ip
    84b6:	9602      	str	r6, [sp, #8]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    84b8:	2600      	movs	r6, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    84ba:	46b8      	mov	r8, r7
    84bc:	469c      	mov	ip, r3
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    84be:	9601      	str	r6, [sp, #4]
		if (config->capture.channel_function[i] ==
    84c0:	19af      	adds	r7, r5, r6
    84c2:	7c3f      	ldrb	r7, [r7, #16]
    84c4:	2f01      	cmp	r7, #1
    84c6:	d100      	bne.n	84ca <tcc_init+0xda>
    84c8:	e0a6      	b.n	8618 <tcc_init+0x228>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    84ca:	3601      	adds	r6, #1
    84cc:	2e04      	cmp	r6, #4
    84ce:	d1f7      	bne.n	84c0 <tcc_init+0xd0>
	if (config->run_in_standby) {
    84d0:	369d      	adds	r6, #157	; 0x9d
    84d2:	5dae      	ldrb	r6, [r5, r6]
    84d4:	4663      	mov	r3, ip
    84d6:	2e00      	cmp	r6, #0
    84d8:	d004      	beq.n	84e4 <tcc_init+0xf4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    84da:	2680      	movs	r6, #128	; 0x80
    84dc:	9f01      	ldr	r7, [sp, #4]
    84de:	0136      	lsls	r6, r6, #4
    84e0:	4337      	orrs	r7, r6
    84e2:	9701      	str	r7, [sp, #4]
	if (config->counter.oneshot) {
    84e4:	7a2e      	ldrb	r6, [r5, #8]
	uint8_t ctrlb = 0;
    84e6:	1e77      	subs	r7, r6, #1
    84e8:	41be      	sbcs	r6, r7
    84ea:	00b6      	lsls	r6, r6, #2
    84ec:	9603      	str	r6, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    84ee:	7a6e      	ldrb	r6, [r5, #9]
    84f0:	2e01      	cmp	r6, #1
    84f2:	d100      	bne.n	84f6 <tcc_init+0x106>
    84f4:	e107      	b.n	8706 <tcc_init+0x316>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    84f6:	7b2e      	ldrb	r6, [r5, #12]
    84f8:	9606      	str	r6, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    84fa:	7aee      	ldrb	r6, [r5, #11]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    84fc:	9308      	str	r3, [sp, #32]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    84fe:	9607      	str	r6, [sp, #28]
    8500:	2600      	movs	r6, #0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    8502:	0037      	movs	r7, r6
    8504:	9109      	str	r1, [sp, #36]	; 0x24
		if (cfg->capture_channel >= cc_num) {
    8506:	7a53      	ldrb	r3, [r2, #9]
    8508:	469a      	mov	sl, r3
    850a:	9b02      	ldr	r3, [sp, #8]
    850c:	459a      	cmp	sl, r3
    850e:	d2a0      	bcs.n	8452 <tcc_init+0x62>
		if (cfg->filter_value > 0xF) {
    8510:	7816      	ldrb	r6, [r2, #0]
    8512:	2e0f      	cmp	r6, #15
    8514:	d89d      	bhi.n	8452 <tcc_init+0x62>
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    8516:	7853      	ldrb	r3, [r2, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8518:	0636      	lsls	r6, r6, #24
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    851a:	041b      	lsls	r3, r3, #16
    851c:	469b      	mov	fp, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    851e:	23f0      	movs	r3, #240	; 0xf0
    8520:	051b      	lsls	r3, r3, #20
    8522:	401e      	ands	r6, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    8524:	465b      	mov	r3, fp
    8526:	4333      	orrs	r3, r6
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    8528:	7896      	ldrb	r6, [r2, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    852a:	469b      	mov	fp, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    852c:	1e73      	subs	r3, r6, #1
    852e:	419e      	sbcs	r6, r3
    8530:	01f3      	lsls	r3, r6, #7
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    8532:	78d6      	ldrb	r6, [r2, #3]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    8534:	4699      	mov	r9, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    8536:	1e73      	subs	r3, r6, #1
    8538:	419e      	sbcs	r6, r3
    853a:	00f3      	lsls	r3, r6, #3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    853c:	7916      	ldrb	r6, [r2, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    853e:	4698      	mov	r8, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    8540:	1e73      	subs	r3, r6, #1
    8542:	419e      	sbcs	r6, r3
    8544:	0133      	lsls	r3, r6, #4
    8546:	469c      	mov	ip, r3
				| TCC_FCTRLA_SRC(cfg->source)
    8548:	2303      	movs	r3, #3
    854a:	7956      	ldrb	r6, [r2, #5]
				| TCC_FCTRLA_HALT(cfg->halt_action)
    854c:	21c0      	movs	r1, #192	; 0xc0
				| TCC_FCTRLA_SRC(cfg->source)
    854e:	401e      	ands	r6, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8550:	465b      	mov	r3, fp
    8552:	4333      	orrs	r3, r6
    8554:	469b      	mov	fp, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    8556:	2360      	movs	r3, #96	; 0x60
    8558:	7996      	ldrb	r6, [r2, #6]
				| TCC_FCTRLA_HALT(cfg->halt_action)
    855a:	0089      	lsls	r1, r1, #2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    855c:	0176      	lsls	r6, r6, #5
    855e:	401e      	ands	r6, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8560:	465b      	mov	r3, fp
    8562:	431e      	orrs	r6, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    8564:	79d3      	ldrb	r3, [r2, #7]
    8566:	021b      	lsls	r3, r3, #8
    8568:	400b      	ands	r3, r1
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    856a:	21e0      	movs	r1, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    856c:	431e      	orrs	r6, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    856e:	7a13      	ldrb	r3, [r2, #8]
    8570:	01c9      	lsls	r1, r1, #7
    8572:	031b      	lsls	r3, r3, #12
    8574:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8576:	431e      	orrs	r6, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    8578:	21c0      	movs	r1, #192	; 0xc0
    857a:	4653      	mov	r3, sl
    857c:	0109      	lsls	r1, r1, #4
    857e:	029b      	lsls	r3, r3, #10
    8580:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8582:	431e      	orrs	r6, r3
    8584:	464b      	mov	r3, r9
    8586:	431e      	orrs	r6, r3
    8588:	4643      	mov	r3, r8
    858a:	431e      	orrs	r6, r3
    858c:	4663      	mov	r3, ip
		value_buffer[i] = fault;
    858e:	2108      	movs	r1, #8
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    8590:	431e      	orrs	r6, r3
		value_buffer[i] = fault;
    8592:	ab0a      	add	r3, sp, #40	; 0x28
    8594:	185b      	adds	r3, r3, r1
    8596:	51de      	str	r6, [r3, r7]
    8598:	3704      	adds	r7, #4
    859a:	320a      	adds	r2, #10
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    859c:	2f08      	cmp	r7, #8
    859e:	d1b2      	bne.n	8506 <tcc_init+0x116>
    85a0:	9b08      	ldr	r3, [sp, #32]
	uint8_t ow_num = _tcc_ow_nums[module_index];
    85a2:	4a60      	ldr	r2, [pc, #384]	; (8724 <tcc_init+0x334>)
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    85a4:	2701      	movs	r7, #1
	uint8_t ow_num = _tcc_ow_nums[module_index];
    85a6:	5cd2      	ldrb	r2, [r2, r3]
    85a8:	002e      	movs	r6, r5
    85aa:	4692      	mov	sl, r2
    85ac:	2241      	movs	r2, #65	; 0x41
    85ae:	4694      	mov	ip, r2
	drvctrl = 0;
    85b0:	2200      	movs	r2, #0
    85b2:	9909      	ldr	r1, [sp, #36]	; 0x24
    85b4:	44ac      	add	ip, r5
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    85b6:	46bb      	mov	fp, r7
    85b8:	3650      	adds	r6, #80	; 0x50
    85ba:	4667      	mov	r7, ip
    85bc:	4688      	mov	r8, r1
    85be:	469c      	mov	ip, r3
    85c0:	0013      	movs	r3, r2
    85c2:	e014      	b.n	85ee <tcc_init+0x1fe>
			if (i >= ow_num) {
    85c4:	4592      	cmp	sl, r2
    85c6:	d800      	bhi.n	85ca <tcc_init+0x1da>
    85c8:	e743      	b.n	8452 <tcc_init+0x62>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    85ca:	2180      	movs	r1, #128	; 0x80
    85cc:	0249      	lsls	r1, r1, #9
    85ce:	4091      	lsls	r1, r2
    85d0:	430b      	orrs	r3, r1
		if (config->wave_ext.non_recoverable_fault[i].output !=
    85d2:	7839      	ldrb	r1, [r7, #0]
    85d4:	2900      	cmp	r1, #0
    85d6:	d005      	beq.n	85e4 <tcc_init+0x1f4>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    85d8:	2902      	cmp	r1, #2
    85da:	d100      	bne.n	85de <tcc_init+0x1ee>
    85dc:	e08e      	b.n	86fc <tcc_init+0x30c>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    85de:	4659      	mov	r1, fp
    85e0:	4091      	lsls	r1, r2
    85e2:	430b      	orrs	r3, r1
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    85e4:	3201      	adds	r2, #1
    85e6:	3601      	adds	r6, #1
    85e8:	3702      	adds	r7, #2
    85ea:	2a08      	cmp	r2, #8
    85ec:	d01e      	beq.n	862c <tcc_init+0x23c>
		if (config->wave_ext.invert[i]) {
    85ee:	7831      	ldrb	r1, [r6, #0]
    85f0:	2900      	cmp	r1, #0
    85f2:	d1e7      	bne.n	85c4 <tcc_init+0x1d4>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    85f4:	7839      	ldrb	r1, [r7, #0]
    85f6:	2900      	cmp	r1, #0
    85f8:	d0f4      	beq.n	85e4 <tcc_init+0x1f4>
			if (i >= ow_num) {
    85fa:	4592      	cmp	sl, r2
    85fc:	d8ec      	bhi.n	85d8 <tcc_init+0x1e8>
		return STATUS_ERR_INVALID_ARG;
    85fe:	2217      	movs	r2, #23
    8600:	e716      	b.n	8430 <tcc_init+0x40>
		if (hw == tcc_modules[i]) {
    8602:	2680      	movs	r6, #128	; 0x80
    8604:	2300      	movs	r3, #0
    8606:	0076      	lsls	r6, r6, #1
    8608:	e70a      	b.n	8420 <tcc_init+0x30>
    860a:	2680      	movs	r6, #128	; 0x80
    860c:	2301      	movs	r3, #1
    860e:	00b6      	lsls	r6, r6, #2
    8610:	e706      	b.n	8420 <tcc_init+0x30>
    8612:	00f6      	lsls	r6, r6, #3
    8614:	2302      	movs	r3, #2
    8616:	e703      	b.n	8420 <tcc_init+0x30>
			if (i > _tcc_cc_nums[module_index]) {
    8618:	9b02      	ldr	r3, [sp, #8]
    861a:	42b3      	cmp	r3, r6
    861c:	da00      	bge.n	8620 <tcc_init+0x230>
    861e:	e718      	b.n	8452 <tcc_init+0x62>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    8620:	4647      	mov	r7, r8
    8622:	40b7      	lsls	r7, r6
    8624:	9b01      	ldr	r3, [sp, #4]
    8626:	433b      	orrs	r3, r7
    8628:	9301      	str	r3, [sp, #4]
    862a:	e74e      	b.n	84ca <tcc_init+0xda>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    862c:	2630      	movs	r6, #48	; 0x30
    862e:	7e6a      	ldrb	r2, [r5, #25]
    8630:	4641      	mov	r1, r8
    8632:	0112      	lsls	r2, r2, #4
    8634:	4016      	ands	r6, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    8636:	7e2a      	ldrb	r2, [r5, #24]
    8638:	4698      	mov	r8, r3
    863a:	4663      	mov	r3, ip
    863c:	4694      	mov	ip, r2
    863e:	2207      	movs	r2, #7
    8640:	4667      	mov	r7, ip
    8642:	403a      	ands	r2, r7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    8644:	4316      	orrs	r6, r2
    8646:	46b3      	mov	fp, r6
			wave |= (TCC_WAVE_POL0 << n);
    8648:	2680      	movs	r6, #128	; 0x80
    864a:	0276      	lsls	r6, r6, #9
    864c:	46b4      	mov	ip, r6
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    864e:	2200      	movs	r2, #0
    8650:	465e      	mov	r6, fp
		if (wav_cfg->wave_polarity[n]) {
    8652:	18af      	adds	r7, r5, r2
    8654:	7d3f      	ldrb	r7, [r7, #20]
    8656:	2f00      	cmp	r7, #0
    8658:	d006      	beq.n	8668 <tcc_init+0x278>
			if (n >= cc_num) {
    865a:	9f02      	ldr	r7, [sp, #8]
    865c:	4297      	cmp	r7, r2
    865e:	dc00      	bgt.n	8662 <tcc_init+0x272>
    8660:	e6f7      	b.n	8452 <tcc_init+0x62>
			wave |= (TCC_WAVE_POL0 << n);
    8662:	4667      	mov	r7, ip
    8664:	4097      	lsls	r7, r2
    8666:	433e      	orrs	r6, r7
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    8668:	3201      	adds	r2, #1
    866a:	2a04      	cmp	r2, #4
    866c:	d1f1      	bne.n	8652 <tcc_init+0x262>
    866e:	46b3      	mov	fp, r6
    8670:	2634      	movs	r6, #52	; 0x34
    8672:	46b4      	mov	ip, r6
    8674:	4484      	add	ip, r0
		module_inst->callback[i] = NULL;
    8676:	2600      	movs	r6, #0
    8678:	4667      	mov	r7, ip
    867a:	1d02      	adds	r2, r0, #4
    867c:	c240      	stmia	r2!, {r6}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    867e:	42ba      	cmp	r2, r7
    8680:	d1fc      	bne.n	867c <tcc_init+0x28c>
	_tcc_instances[module_index] = module_inst;
    8682:	4a2a      	ldr	r2, [pc, #168]	; (872c <tcc_init+0x33c>)
	module_inst->register_callback_mask = 0;
    8684:	6346      	str	r6, [r0, #52]	; 0x34
	_tcc_instances[module_index] = module_inst;
    8686:	5050      	str	r0, [r2, r1]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    8688:	22a0      	movs	r2, #160	; 0xa0
	module_inst->enable_callback_mask = 0;
    868a:	6386      	str	r6, [r0, #56]	; 0x38
	module_inst->hw = hw;
    868c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    868e:	5ca9      	ldrb	r1, [r5, r2]
    8690:	3a64      	subs	r2, #100	; 0x64
    8692:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    8694:	7aaa      	ldrb	r2, [r5, #10]
    8696:	a90a      	add	r1, sp, #40	; 0x28
    8698:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    869a:	4a25      	ldr	r2, [pc, #148]	; (8730 <tcc_init+0x340>)
    869c:	5cd6      	ldrb	r6, [r2, r3]
    869e:	4b25      	ldr	r3, [pc, #148]	; (8734 <tcc_init+0x344>)
    86a0:	0030      	movs	r0, r6
    86a2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    86a4:	4b24      	ldr	r3, [pc, #144]	; (8738 <tcc_init+0x348>)
    86a6:	0030      	movs	r0, r6
    86a8:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    86aa:	4653      	mov	r3, sl
    86ac:	2b00      	cmp	r3, #0
    86ae:	d048      	beq.n	8742 <tcc_init+0x352>
    86b0:	2358      	movs	r3, #88	; 0x58
    86b2:	4699      	mov	r9, r3
    86b4:	4653      	mov	r3, sl
    86b6:	3398      	adds	r3, #152	; 0x98
    86b8:	18eb      	adds	r3, r5, r3
    86ba:	9308      	str	r3, [sp, #32]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    86bc:	2301      	movs	r3, #1
    86be:	469a      	mov	sl, r3
		system_pinmux_pin_set_config(
    86c0:	0023      	movs	r3, r4
    86c2:	44a9      	add	r9, r5
    86c4:	464c      	mov	r4, r9
    86c6:	ae0b      	add	r6, sp, #44	; 0x2c
    86c8:	9f05      	ldr	r7, [sp, #20]
    86ca:	4699      	mov	r9, r3
    86cc:	e004      	b.n	86d8 <tcc_init+0x2e8>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    86ce:	9b08      	ldr	r3, [sp, #32]
    86d0:	3701      	adds	r7, #1
    86d2:	3404      	adds	r4, #4
    86d4:	429f      	cmp	r7, r3
    86d6:	d033      	beq.n	8740 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    86d8:	783b      	ldrb	r3, [r7, #0]
    86da:	2b00      	cmp	r3, #0
    86dc:	d0f7      	beq.n	86ce <tcc_init+0x2de>
    86de:	4653      	mov	r3, sl
    86e0:	70b3      	strb	r3, [r6, #2]
	config->powersave    = false;
    86e2:	2300      	movs	r3, #0
    86e4:	70f3      	strb	r3, [r6, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    86e6:	3320      	adds	r3, #32
    86e8:	18e3      	adds	r3, r4, r3
    86ea:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    86ec:	7820      	ldrb	r0, [r4, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    86ee:	7033      	strb	r3, [r6, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    86f0:	4653      	mov	r3, sl
		system_pinmux_pin_set_config(
    86f2:	0031      	movs	r1, r6
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    86f4:	7073      	strb	r3, [r6, #1]
		system_pinmux_pin_set_config(
    86f6:	4b11      	ldr	r3, [pc, #68]	; (873c <tcc_init+0x34c>)
    86f8:	4798      	blx	r3
    86fa:	e7e8      	b.n	86ce <tcc_init+0x2de>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    86fc:	2102      	movs	r1, #2
    86fe:	31ff      	adds	r1, #255	; 0xff
    8700:	4091      	lsls	r1, r2
    8702:	430b      	orrs	r3, r1
    8704:	e76e      	b.n	85e4 <tcc_init+0x1f4>
		ctrlb |= TCC_CTRLBSET_DIR;
    8706:	9f03      	ldr	r7, [sp, #12]
    8708:	4337      	orrs	r7, r6
    870a:	9703      	str	r7, [sp, #12]
    870c:	e6f3      	b.n	84f6 <tcc_init+0x106>
    870e:	46c0      	nop			; (mov r8, r8)
    8710:	42002000 	.word	0x42002000
    8714:	42002400 	.word	0x42002400
    8718:	42002800 	.word	0x42002800
    871c:	40000400 	.word	0x40000400
    8720:	000153d4 	.word	0x000153d4
    8724:	000153e0 	.word	0x000153e0
    8728:	000153cc 	.word	0x000153cc
    872c:	20000bb8 	.word	0x20000bb8
    8730:	000153d0 	.word	0x000153d0
    8734:	000106c5 	.word	0x000106c5
    8738:	0001063d 	.word	0x0001063d
    873c:	000107c5 	.word	0x000107c5
    8740:	464c      	mov	r4, r9
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8742:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    8744:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    8746:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    8748:	0212      	lsls	r2, r2, #8
    874a:	4313      	orrs	r3, r2
    874c:	9a01      	ldr	r2, [sp, #4]
    874e:	4313      	orrs	r3, r2
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    8750:	2204      	movs	r2, #4
	hw->CTRLA.reg = ctrla;
    8752:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    8754:	68a3      	ldr	r3, [r4, #8]
    8756:	421a      	tst	r2, r3
    8758:	d1fc      	bne.n	8754 <tcc_init+0x364>
	hw->CTRLBCLR.reg = 0xFF;
    875a:	23ff      	movs	r3, #255	; 0xff
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    875c:	2204      	movs	r2, #4
	hw->CTRLBCLR.reg = 0xFF;
    875e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    8760:	68a3      	ldr	r3, [r4, #8]
    8762:	421a      	tst	r2, r3
    8764:	d1fc      	bne.n	8760 <tcc_init+0x370>
	hw->CTRLBSET.reg = ctrlb;
    8766:	466b      	mov	r3, sp
    8768:	7b1b      	ldrb	r3, [r3, #12]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    876a:	4a18      	ldr	r2, [pc, #96]	; (87cc <tcc_init+0x3dc>)
	hw->CTRLBSET.reg = ctrlb;
    876c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    876e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8770:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    8772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8774:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    8776:	4643      	mov	r3, r8
    8778:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    877a:	68a3      	ldr	r3, [r4, #8]
    877c:	4213      	tst	r3, r2
    877e:	d1fc      	bne.n	877a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    8780:	465b      	mov	r3, fp
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    8782:	2210      	movs	r2, #16
	hw->WAVE.reg = waves[0];
    8784:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    8786:	68a3      	ldr	r3, [r4, #8]
    8788:	421a      	tst	r2, r3
    878a:	d1fc      	bne.n	8786 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    878c:	682b      	ldr	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    878e:	4a10      	ldr	r2, [pc, #64]	; (87d0 <tcc_init+0x3e0>)
	hw->COUNT.reg = config->counter.count;
    8790:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    8792:	68a3      	ldr	r3, [r4, #8]
    8794:	4213      	tst	r3, r2
    8796:	d1fc      	bne.n	8792 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    8798:	686b      	ldr	r3, [r5, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    879a:	2100      	movs	r1, #0
	hw->PER.reg = (config->counter.period);
    879c:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    879e:	9b02      	ldr	r3, [sp, #8]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d010      	beq.n	87c6 <tcc_init+0x3d6>
    87a4:	480b      	ldr	r0, [pc, #44]	; (87d4 <tcc_init+0x3e4>)
    87a6:	9d04      	ldr	r5, [sp, #16]
    87a8:	0002      	movs	r2, r0
    87aa:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    87ac:	68a3      	ldr	r3, [r4, #8]
    87ae:	421a      	tst	r2, r3
    87b0:	d1fc      	bne.n	87ac <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    87b2:	000b      	movs	r3, r1
    87b4:	3310      	adds	r3, #16
    87b6:	cd04      	ldmia	r5!, {r2}
    87b8:	009b      	lsls	r3, r3, #2
    87ba:	18e3      	adds	r3, r4, r3
    87bc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    87be:	9b02      	ldr	r3, [sp, #8]
    87c0:	3101      	adds	r1, #1
    87c2:	4299      	cmp	r1, r3
    87c4:	dbf0      	blt.n	87a8 <tcc_init+0x3b8>
	return STATUS_OK;
    87c6:	2200      	movs	r2, #0
    87c8:	e632      	b.n	8430 <tcc_init+0x40>
    87ca:	46c0      	nop			; (mov r8, r8)
    87cc:	00020040 	.word	0x00020040
    87d0:	00040080 	.word	0x00040080
    87d4:	00080100 	.word	0x00080100

000087d8 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    87d8:	0092      	lsls	r2, r2, #2
    87da:	1883      	adds	r3, r0, r2
    87dc:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    87de:	4b03      	ldr	r3, [pc, #12]	; (87ec <tcc_register_callback+0x14>)
    87e0:	58d3      	ldr	r3, [r2, r3]
    87e2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    87e4:	4313      	orrs	r3, r2
    87e6:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    87e8:	2000      	movs	r0, #0
    87ea:	4770      	bx	lr
    87ec:	000153e4 	.word	0x000153e4

000087f0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    87f0:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    87f2:	4b0b      	ldr	r3, [pc, #44]	; (8820 <tcc_enable_callback+0x30>)
{
    87f4:	0004      	movs	r4, r0
			_tcc_get_inst_index(module->hw)));
    87f6:	6800      	ldr	r0, [r0, #0]
{
    87f8:	000d      	movs	r5, r1
			_tcc_get_inst_index(module->hw)));
    87fa:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    87fc:	221f      	movs	r2, #31
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    87fe:	4b09      	ldr	r3, [pc, #36]	; (8824 <tcc_enable_callback+0x34>)

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    8800:	00ad      	lsls	r5, r5, #2
    8802:	5c1b      	ldrb	r3, [r3, r0]
    8804:	401a      	ands	r2, r3
    8806:	2301      	movs	r3, #1
    8808:	4093      	lsls	r3, r2
    880a:	4a07      	ldr	r2, [pc, #28]	; (8828 <tcc_enable_callback+0x38>)
    880c:	6013      	str	r3, [r2, #0]
    880e:	4b07      	ldr	r3, [pc, #28]	; (882c <tcc_enable_callback+0x3c>)
    8810:	58ea      	ldr	r2, [r5, r3]
    8812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8814:	4313      	orrs	r3, r2
    8816:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    8818:	6823      	ldr	r3, [r4, #0]
    881a:	629a      	str	r2, [r3, #40]	; 0x28
}
    881c:	bd70      	pop	{r4, r5, r6, pc}
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	0000825d 	.word	0x0000825d
    8824:	00015414 	.word	0x00015414
    8828:	e000e100 	.word	0xe000e100
    882c:	000153e4 	.word	0x000153e4

00008830 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    8830:	b5f0      	push	{r4, r5, r6, r7, lr}
    8832:	46c6      	mov	lr, r8
    8834:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    8836:	4b10      	ldr	r3, [pc, #64]	; (8878 <_tcc_interrupt_handler+0x48>)
    8838:	0080      	lsls	r0, r0, #2
    883a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    883c:	2404      	movs	r4, #4
    883e:	683b      	ldr	r3, [r7, #0]
    8840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8842:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8846:	2501      	movs	r5, #1
    8848:	4013      	ands	r3, r2
    884a:	401e      	ands	r6, r3
    884c:	4b0b      	ldr	r3, [pc, #44]	; (887c <_tcc_interrupt_handler+0x4c>)
    884e:	4698      	mov	r8, r3
    8850:	e005      	b.n	885e <_tcc_interrupt_handler+0x2e>
    8852:	1d23      	adds	r3, r4, #4
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    8854:	2b34      	cmp	r3, #52	; 0x34
    8856:	d00c      	beq.n	8872 <_tcc_interrupt_handler+0x42>
    8858:	4642      	mov	r2, r8
    885a:	5915      	ldr	r5, [r2, r4]
    885c:	001c      	movs	r4, r3
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    885e:	4235      	tst	r5, r6
    8860:	d0f7      	beq.n	8852 <_tcc_interrupt_handler+0x22>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    8862:	593b      	ldr	r3, [r7, r4]
    8864:	0038      	movs	r0, r7
    8866:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    8868:	683b      	ldr	r3, [r7, #0]
    886a:	62dd      	str	r5, [r3, #44]	; 0x2c
    886c:	1d23      	adds	r3, r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    886e:	2b34      	cmp	r3, #52	; 0x34
    8870:	d1f2      	bne.n	8858 <_tcc_interrupt_handler+0x28>
		}
	}
}
    8872:	bc04      	pop	{r2}
    8874:	4690      	mov	r8, r2
    8876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8878:	20000bb8 	.word	0x20000bb8
    887c:	000153e4 	.word	0x000153e4

00008880 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8880:	b510      	push	{r4, lr}
    8882:	2000      	movs	r0, #0
    8884:	4b01      	ldr	r3, [pc, #4]	; (888c <TCC0_Handler+0xc>)
    8886:	4798      	blx	r3
    8888:	bd10      	pop	{r4, pc}
    888a:	46c0      	nop			; (mov r8, r8)
    888c:	00008831 	.word	0x00008831

00008890 <TCC1_Handler>:
    8890:	b510      	push	{r4, lr}
    8892:	2001      	movs	r0, #1
    8894:	4b01      	ldr	r3, [pc, #4]	; (889c <TCC1_Handler+0xc>)
    8896:	4798      	blx	r3
    8898:	bd10      	pop	{r4, pc}
    889a:	46c0      	nop			; (mov r8, r8)
    889c:	00008831 	.word	0x00008831

000088a0 <TCC2_Handler>:
    88a0:	b510      	push	{r4, lr}
    88a2:	2002      	movs	r0, #2
    88a4:	4b01      	ldr	r3, [pc, #4]	; (88ac <TCC2_Handler+0xc>)
    88a6:	4798      	blx	r3
    88a8:	bd10      	pop	{r4, pc}
    88aa:	46c0      	nop			; (mov r8, r8)
    88ac:	00008831 	.word	0x00008831

000088b0 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    88b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    88b2:	46c6      	mov	lr, r8
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    88b4:	2541      	movs	r5, #65	; 0x41
{
    88b6:	b500      	push	{lr}
    88b8:	0004      	movs	r4, r0
	module->sending = 1;
    88ba:	5d43      	ldrb	r3, [r0, r5]
    88bc:	2001      	movs	r0, #1
    88be:	4303      	orrs	r3, r0

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    88c0:	2000      	movs	r0, #0
	module->sending = 1;
    88c2:	5563      	strb	r3, [r4, r5]
	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    88c4:	b292      	uxth	r2, r2
    88c6:	2300      	movs	r3, #0
    88c8:	5620      	ldrsb	r0, [r4, r0]
    88ca:	4f11      	ldr	r7, [pc, #68]	; (8910 <_http_client_send_wait+0x60>)
    88cc:	47b8      	blx	r7
	module->sending = 1;
    88ce:	2601      	movs	r6, #1
		module->sending = 0;
    88d0:	5d63      	ldrb	r3, [r4, r5]
	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    88d2:	2800      	cmp	r0, #0
    88d4:	db18      	blt.n	8908 <_http_client_send_wait+0x58>
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    88d6:	421e      	tst	r6, r3
    88d8:	d012      	beq.n	8900 <_http_client_send_wait+0x50>
    88da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    88dc:	2b02      	cmp	r3, #2
    88de:	d90f      	bls.n	8900 <_http_client_send_wait+0x50>
    88e0:	4b0c      	ldr	r3, [pc, #48]	; (8914 <_http_client_send_wait+0x64>)
    88e2:	4f0d      	ldr	r7, [pc, #52]	; (8918 <_http_client_send_wait+0x68>)
    88e4:	4698      	mov	r8, r3
    88e6:	2641      	movs	r6, #65	; 0x41
    88e8:	2501      	movs	r5, #1
    88ea:	e002      	b.n	88f2 <_http_client_send_wait+0x42>
    88ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    88ee:	2b02      	cmp	r3, #2
    88f0:	d906      	bls.n	8900 <_http_client_send_wait+0x50>
		m2m_wifi_handle_events(NULL);
    88f2:	2000      	movs	r0, #0
    88f4:	47c0      	blx	r8
		sw_timer_task(module->config.timer_inst);
    88f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    88f8:	47b8      	blx	r7
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    88fa:	5da3      	ldrb	r3, [r4, r6]
    88fc:	421d      	tst	r5, r3
    88fe:	d1f5      	bne.n	88ec <_http_client_send_wait+0x3c>
{
    8900:	2000      	movs	r0, #0
	}

	return 0;
}
    8902:	bc04      	pop	{r2}
    8904:	4690      	mov	r8, r2
    8906:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module->sending = 0;
    8908:	43b3      	bics	r3, r6
    890a:	5563      	strb	r3, [r4, r5]
		return result;
    890c:	e7f9      	b.n	8902 <_http_client_send_wait+0x52>
    890e:	46c0      	nop			; (mov r8, r8)
    8910:	0000e0c5 	.word	0x0000e0c5
    8914:	0000c4a9 	.word	0x0000c4a9
    8918:	000099e1 	.word	0x000099e1

0000891c <http_client_get_config_defaults>:
	config->port = 80;
    891c:	2350      	movs	r3, #80	; 0x50
    891e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8920:	2300      	movs	r3, #0
    8922:	7083      	strb	r3, [r0, #2]
	config->timer_inst = NULL;
    8924:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    8926:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    8928:	3301      	adds	r3, #1
    892a:	33ff      	adds	r3, #255	; 0xff
    892c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    892e:	3bae      	subs	r3, #174	; 0xae
	config->timeout = 20000;
    8930:	4a02      	ldr	r2, [pc, #8]	; (893c <http_client_get_config_defaults+0x20>)
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    8932:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    8934:	4b02      	ldr	r3, [pc, #8]	; (8940 <http_client_get_config_defaults+0x24>)
	config->timeout = 20000;
    8936:	8102      	strh	r2, [r0, #8]
	config->user_agent = DEFAULT_USER_AGENT;
    8938:	6183      	str	r3, [r0, #24]
}
    893a:	4770      	bx	lr
    893c:	00004e20 	.word	0x00004e20
    8940:	000155dc 	.word	0x000155dc

00008944 <http_client_init>:
{
    8944:	b570      	push	{r4, r5, r6, lr}
    8946:	0004      	movs	r4, r0
    8948:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    894a:	2800      	cmp	r0, #0
    894c:	d02c      	beq.n	89a8 <http_client_init+0x64>
    894e:	2900      	cmp	r1, #0
    8950:	d02a      	beq.n	89a8 <http_client_init+0x64>
	if (config->recv_buffer_size == 0) {
    8952:	690b      	ldr	r3, [r1, #16]
    8954:	2b00      	cmp	r3, #0
    8956:	d027      	beq.n	89a8 <http_client_init+0x64>
	if (config->timer_inst == NULL) {
    8958:	684b      	ldr	r3, [r1, #4]
    895a:	2b00      	cmp	r3, #0
    895c:	d024      	beq.n	89a8 <http_client_init+0x64>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    895e:	694b      	ldr	r3, [r1, #20]
    8960:	2b51      	cmp	r3, #81	; 0x51
    8962:	d921      	bls.n	89a8 <http_client_init+0x64>
	memset(module, 0, sizeof(struct http_client_module));
    8964:	22e8      	movs	r2, #232	; 0xe8
    8966:	2100      	movs	r1, #0
    8968:	4b18      	ldr	r3, [pc, #96]	; (89cc <http_client_init+0x88>)
    896a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    896c:	0020      	movs	r0, r4
    896e:	4b18      	ldr	r3, [pc, #96]	; (89d0 <http_client_init+0x8c>)
    8970:	221c      	movs	r2, #28
    8972:	0029      	movs	r1, r5
    8974:	3050      	adds	r0, #80	; 0x50
    8976:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    8978:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    897a:	2b00      	cmp	r3, #0
    897c:	d017      	beq.n	89ae <http_client_init+0x6a>
	if (config->timeout > 0) {
    897e:	892b      	ldrh	r3, [r5, #8]
    8980:	2b00      	cmp	r3, #0
    8982:	d105      	bne.n	8990 <http_client_init+0x4c>
	module->req.state = STATE_INIT;
    8984:	2300      	movs	r3, #0
	module->resp.state = STATE_PARSE_HEADER;
    8986:	22d8      	movs	r2, #216	; 0xd8
	return 0;
    8988:	2000      	movs	r0, #0
	module->req.state = STATE_INIT;
    898a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    898c:	50a3      	str	r3, [r4, r2]
}
    898e:	bd70      	pop	{r4, r5, r6, pc}
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    8990:	6868      	ldr	r0, [r5, #4]
    8992:	2300      	movs	r3, #0
    8994:	0022      	movs	r2, r4
    8996:	490f      	ldr	r1, [pc, #60]	; (89d4 <http_client_init+0x90>)
    8998:	4d0f      	ldr	r5, [pc, #60]	; (89d8 <http_client_init+0x94>)
    899a:	47a8      	blx	r5
    899c:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    899e:	2800      	cmp	r0, #0
    89a0:	daf0      	bge.n	8984 <http_client_init+0x40>
			return -ENOSPC;
    89a2:	201c      	movs	r0, #28
    89a4:	4240      	negs	r0, r0
    89a6:	e7f2      	b.n	898e <http_client_init+0x4a>
		return -EINVAL;
    89a8:	2016      	movs	r0, #22
    89aa:	4240      	negs	r0, r0
    89ac:	e7ef      	b.n	898e <http_client_init+0x4a>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    89ae:	6928      	ldr	r0, [r5, #16]
    89b0:	4b0a      	ldr	r3, [pc, #40]	; (89dc <http_client_init+0x98>)
    89b2:	4798      	blx	r3
    89b4:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    89b6:	2800      	cmp	r0, #0
    89b8:	d005      	beq.n	89c6 <http_client_init+0x82>
		module->alloc_buffer = 1;
    89ba:	2241      	movs	r2, #65	; 0x41
    89bc:	2104      	movs	r1, #4
    89be:	5ca3      	ldrb	r3, [r4, r2]
    89c0:	430b      	orrs	r3, r1
    89c2:	54a3      	strb	r3, [r4, r2]
    89c4:	e7db      	b.n	897e <http_client_init+0x3a>
			return -ENOMEM;
    89c6:	200c      	movs	r0, #12
    89c8:	4240      	negs	r0, r0
    89ca:	e7e0      	b.n	898e <http_client_init+0x4a>
    89cc:	00013c87 	.word	0x00013c87
    89d0:	00013c51 	.word	0x00013c51
    89d4:	00008af9 	.word	0x00008af9
    89d8:	00009959 	.word	0x00009959
    89dc:	00013c29 	.word	0x00013c29

000089e0 <http_client_register_callback>:
	if (module == NULL) {
    89e0:	2800      	cmp	r0, #0
    89e2:	d002      	beq.n	89ea <http_client_register_callback+0xa>
	module->cb = callback;
    89e4:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    89e6:	2000      	movs	r0, #0
}
    89e8:	4770      	bx	lr
		return -EINVAL;
    89ea:	2016      	movs	r0, #22
    89ec:	4240      	negs	r0, r0
    89ee:	e7fb      	b.n	89e8 <http_client_register_callback+0x8>

000089f0 <_http_client_clear_conn>:
	if (module->req.entity.close) {
    89f0:	23c0      	movs	r3, #192	; 0xc0
{
    89f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (module->req.entity.close) {
    89f4:	58c3      	ldr	r3, [r0, r3]
{
    89f6:	b085      	sub	sp, #20
    89f8:	0004      	movs	r4, r0
    89fa:	000f      	movs	r7, r1
	if (module->req.entity.close) {
    89fc:	2b00      	cmp	r3, #0
    89fe:	d002      	beq.n	8a06 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    8a00:	22c4      	movs	r2, #196	; 0xc4
    8a02:	5880      	ldr	r0, [r0, r2]
    8a04:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    8a06:	0020      	movs	r0, r4
    8a08:	2218      	movs	r2, #24
    8a0a:	2100      	movs	r1, #0
    8a0c:	30b0      	adds	r0, #176	; 0xb0
    8a0e:	4e16      	ldr	r6, [pc, #88]	; (8a68 <_http_client_clear_conn+0x78>)
    8a10:	47b0      	blx	r6
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    8a12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8a14:	2b00      	cmp	r3, #0
    8a16:	d121      	bne.n	8a5c <_http_client_clear_conn+0x6c>
	module_ref_inst[module->sock] = NULL;
    8a18:	2300      	movs	r3, #0
    8a1a:	2500      	movs	r5, #0
	memset(&module->req, 0, sizeof(struct http_client_req));
    8a1c:	0020      	movs	r0, r4
	module_ref_inst[module->sock] = NULL;
    8a1e:	56e3      	ldrsb	r3, [r4, r3]
    8a20:	4a12      	ldr	r2, [pc, #72]	; (8a6c <_http_client_clear_conn+0x7c>)
    8a22:	009b      	lsls	r3, r3, #2
    8a24:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    8a26:	2100      	movs	r1, #0
    8a28:	226c      	movs	r2, #108	; 0x6c
    8a2a:	306c      	adds	r0, #108	; 0x6c
    8a2c:	47b0      	blx	r6
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    8a2e:	0020      	movs	r0, r4
    8a30:	2210      	movs	r2, #16
    8a32:	2100      	movs	r1, #0
    8a34:	30d8      	adds	r0, #216	; 0xd8
    8a36:	47b0      	blx	r6
	module->resp.state = STATE_PARSE_HEADER;
    8a38:	23d8      	movs	r3, #216	; 0xd8
	module->sending = 0;
    8a3a:	2241      	movs	r2, #65	; 0x41
	module->permanent = 0;
    8a3c:	21fc      	movs	r1, #252	; 0xfc
	module->req.state = STATE_INIT;
    8a3e:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    8a40:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    8a42:	5ca3      	ldrb	r3, [r4, r2]
	data.disconnected.reason = reason;
    8a44:	9701      	str	r7, [sp, #4]
	module->permanent = 0;
    8a46:	400b      	ands	r3, r1
    8a48:	54a3      	strb	r3, [r4, r2]
	if (module->cb) {
    8a4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d003      	beq.n	8a58 <_http_client_clear_conn+0x68>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    8a50:	aa01      	add	r2, sp, #4
    8a52:	39f8      	subs	r1, #248	; 0xf8
    8a54:	0020      	movs	r0, r4
    8a56:	4798      	blx	r3
}
    8a58:	b005      	add	sp, #20
    8a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    8a5c:	2000      	movs	r0, #0
    8a5e:	4b04      	ldr	r3, [pc, #16]	; (8a70 <_http_client_clear_conn+0x80>)
    8a60:	5620      	ldrsb	r0, [r4, r0]
    8a62:	4798      	blx	r3
    8a64:	e7d8      	b.n	8a18 <_http_client_clear_conn+0x28>
    8a66:	46c0      	nop			; (mov r8, r8)
    8a68:	00013c87 	.word	0x00013c87
    8a6c:	200003f0 	.word	0x200003f0
    8a70:	0000e1bd 	.word	0x0000e1bd

00008a74 <http_client_socket_resolve_handler>:
{
    8a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a76:	4647      	mov	r7, r8
    8a78:	46ce      	mov	lr, r9
    8a7a:	4c1b      	ldr	r4, [pc, #108]	; (8ae8 <http_client_socket_resolve_handler+0x74>)
    8a7c:	4680      	mov	r8, r0
    8a7e:	0026      	movs	r6, r4
    8a80:	4689      	mov	r9, r1
    8a82:	b580      	push	{r7, lr}
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    8a84:	4f19      	ldr	r7, [pc, #100]	; (8aec <http_client_socket_resolve_handler+0x78>)
{
    8a86:	b085      	sub	sp, #20
    8a88:	361c      	adds	r6, #28
		if (module_ref_inst[i] != NULL) {
    8a8a:	6825      	ldr	r5, [r4, #0]
    8a8c:	2d00      	cmp	r5, #0
    8a8e:	d007      	beq.n	8aa0 <http_client_socket_resolve_handler+0x2c>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    8a90:	1c69      	adds	r1, r5, #1
    8a92:	4640      	mov	r0, r8
    8a94:	47b8      	blx	r7
    8a96:	2800      	cmp	r0, #0
    8a98:	d102      	bne.n	8aa0 <http_client_socket_resolve_handler+0x2c>
    8a9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8a9c:	2b01      	cmp	r3, #1
    8a9e:	d007      	beq.n	8ab0 <http_client_socket_resolve_handler+0x3c>
    8aa0:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    8aa2:	42b4      	cmp	r4, r6
    8aa4:	d1f1      	bne.n	8a8a <http_client_socket_resolve_handler+0x16>
}
    8aa6:	b005      	add	sp, #20
    8aa8:	bc0c      	pop	{r2, r3}
    8aaa:	4690      	mov	r8, r2
    8aac:	4699      	mov	r9, r3
    8aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    8ab0:	464b      	mov	r3, r9
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d105      	bne.n	8ac2 <http_client_socket_resolve_handler+0x4e>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    8ab6:	2176      	movs	r1, #118	; 0x76
    8ab8:	0028      	movs	r0, r5
    8aba:	4249      	negs	r1, r1
    8abc:	4b0c      	ldr	r3, [pc, #48]	; (8af0 <http_client_socket_resolve_handler+0x7c>)
    8abe:	4798      	blx	r3
					return;
    8ac0:	e7f1      	b.n	8aa6 <http_client_socket_resolve_handler+0x32>
				addr_in.sin_family = AF_INET;
    8ac2:	466a      	mov	r2, sp
    8ac4:	2302      	movs	r3, #2
    8ac6:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    8ac8:	334e      	adds	r3, #78	; 0x4e
    8aca:	5aeb      	ldrh	r3, [r5, r3]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8acc:	2000      	movs	r0, #0
				addr_in.sin_port = _htons(module->config.port);
    8ace:	021a      	lsls	r2, r3, #8
    8ad0:	0a1b      	lsrs	r3, r3, #8
    8ad2:	4313      	orrs	r3, r2
    8ad4:	466a      	mov	r2, sp
    8ad6:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    8ad8:	464b      	mov	r3, r9
    8ada:	9301      	str	r3, [sp, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8adc:	5628      	ldrsb	r0, [r5, r0]
    8ade:	2210      	movs	r2, #16
    8ae0:	4669      	mov	r1, sp
    8ae2:	4b04      	ldr	r3, [pc, #16]	; (8af4 <http_client_socket_resolve_handler+0x80>)
    8ae4:	4798      	blx	r3
				return;
    8ae6:	e7de      	b.n	8aa6 <http_client_socket_resolve_handler+0x32>
    8ae8:	200003f0 	.word	0x200003f0
    8aec:	000140ed 	.word	0x000140ed
    8af0:	000089f1 	.word	0x000089f1
    8af4:	0000e051 	.word	0x0000e051

00008af8 <http_client_timer_callback>:
{
    8af8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    8afa:	2a00      	cmp	r2, #0
    8afc:	d004      	beq.n	8b08 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    8afe:	213e      	movs	r1, #62	; 0x3e
    8b00:	0010      	movs	r0, r2
    8b02:	4249      	negs	r1, r1
    8b04:	4b01      	ldr	r3, [pc, #4]	; (8b0c <http_client_timer_callback+0x14>)
    8b06:	4798      	blx	r3
}
    8b08:	bd10      	pop	{r4, pc}
    8b0a:	46c0      	nop			; (mov r8, r8)
    8b0c:	000089f1 	.word	0x000089f1

00008b10 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b12:	4645      	mov	r5, r8
    8b14:	46de      	mov	lr, fp
    8b16:	4657      	mov	r7, sl
    8b18:	464e      	mov	r6, r9
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8b1a:	231c      	movs	r3, #28
{
    8b1c:	b5e0      	push	{r5, r6, r7, lr}
    8b1e:	0004      	movs	r4, r0
    8b20:	b093      	sub	sp, #76	; 0x4c
    8b22:	af02      	add	r7, sp, #8
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8b24:	2210      	movs	r2, #16
    8b26:	49c6      	ldr	r1, [pc, #792]	; (8e40 <_http_client_request+0x330>)
    8b28:	18f8      	adds	r0, r7, r3
    8b2a:	4bc6      	ldr	r3, [pc, #792]	; (8e44 <_http_client_request+0x334>)
    8b2c:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    8b2e:	4669      	mov	r1, sp
    8b30:	6e62      	ldr	r2, [r4, #100]	; 0x64
{
    8b32:	46e8      	mov	r8, sp
	char buffer[module->config.send_buffer_size];
    8b34:	1dd3      	adds	r3, r2, #7
    8b36:	08db      	lsrs	r3, r3, #3
    8b38:	00db      	lsls	r3, r3, #3
    8b3a:	1acb      	subs	r3, r1, r3
    8b3c:	469d      	mov	sp, r3

	if (module == NULL) {
		return;
	}

	if (module->sending != 0) {
    8b3e:	2341      	movs	r3, #65	; 0x41
    8b40:	5ce1      	ldrb	r1, [r4, r3]
    8b42:	3b40      	subs	r3, #64	; 0x40
	char buffer[module->config.send_buffer_size];
    8b44:	ad02      	add	r5, sp, #8
	if (module->sending != 0) {
    8b46:	400b      	ands	r3, r1
    8b48:	d127      	bne.n	8b9a <_http_client_request+0x8a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    8b4a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    8b4c:	2903      	cmp	r1, #3
    8b4e:	d02d      	beq.n	8bac <_http_client_request+0x9c>
    8b50:	2904      	cmp	r1, #4
    8b52:	d122      	bne.n	8b9a <_http_client_request+0x8a>
		stream_writer_send_remain(&writer);

		module->req.state = STATE_REQ_SEND_ENTITY;
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    8b54:	26cc      	movs	r6, #204	; 0xcc
    8b56:	59a2      	ldr	r2, [r4, r6]
    8b58:	2a00      	cmp	r2, #0
    8b5a:	da00      	bge.n	8b5e <_http_client_request+0x4e>
    8b5c:	e0d0      	b.n	8d00 <_http_client_request+0x1f0>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    8b5e:	d012      	beq.n	8b86 <_http_client_request+0x76>
    8b60:	0021      	movs	r1, r4
    8b62:	31b0      	adds	r1, #176	; 0xb0
    8b64:	68cb      	ldr	r3, [r1, #12]
    8b66:	4699      	mov	r9, r3
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d00c      	beq.n	8b86 <_http_client_request+0x76>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    8b6c:	23d0      	movs	r3, #208	; 0xd0
    8b6e:	469a      	mov	sl, r3
    8b70:	58e3      	ldr	r3, [r4, r3]
    8b72:	429a      	cmp	r2, r3
    8b74:	dd00      	ble.n	8b78 <_http_client_request+0x68>
    8b76:	e10d      	b.n	8d94 <_http_client_request+0x284>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    8b78:	23c0      	movs	r3, #192	; 0xc0
    8b7a:	58e3      	ldr	r3, [r4, r3]
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d002      	beq.n	8b86 <_http_client_request+0x76>
					module->req.entity.close(module->req.entity.priv_data);
    8b80:	22c4      	movs	r2, #196	; 0xc4
    8b82:	58a0      	ldr	r0, [r4, r2]
    8b84:	4798      	blx	r3
				}
				module->req.sent_length += size;
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    8b86:	2302      	movs	r3, #2
    8b88:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    8b8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d004      	beq.n	8b9a <_http_client_request+0x8a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    8b90:	2210      	movs	r2, #16
    8b92:	2101      	movs	r1, #1
    8b94:	18ba      	adds	r2, r7, r2
    8b96:	0020      	movs	r0, r4
    8b98:	4798      	blx	r3
    8b9a:	46c5      	mov	sp, r8
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    8b9c:	46bd      	mov	sp, r7
    8b9e:	b011      	add	sp, #68	; 0x44
    8ba0:	bc3c      	pop	{r2, r3, r4, r5}
    8ba2:	4690      	mov	r8, r2
    8ba4:	4699      	mov	r9, r3
    8ba6:	46a2      	mov	sl, r4
    8ba8:	46ab      	mov	fp, r5
    8baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module->req.content_length = 0;
    8bac:	21cc      	movs	r1, #204	; 0xcc
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    8bae:	202c      	movs	r0, #44	; 0x2c
		module->req.content_length = 0;
    8bb0:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    8bb2:	3104      	adds	r1, #4
    8bb4:	5063      	str	r3, [r4, r1]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    8bb6:	1838      	adds	r0, r7, r0
    8bb8:	4ba3      	ldr	r3, [pc, #652]	; (8e48 <_http_client_request+0x338>)
    8bba:	9400      	str	r4, [sp, #0]
    8bbc:	0029      	movs	r1, r5
    8bbe:	4ea3      	ldr	r6, [pc, #652]	; (8e4c <_http_client_request+0x33c>)
    8bc0:	47b0      	blx	r6
		if (module->req.method == HTTP_METHOD_GET) {
    8bc2:	23c8      	movs	r3, #200	; 0xc8
    8bc4:	5ce3      	ldrb	r3, [r4, r3]
    8bc6:	2b01      	cmp	r3, #1
    8bc8:	d100      	bne.n	8bcc <_http_client_request+0xbc>
    8bca:	e109      	b.n	8de0 <_http_client_request+0x2d0>
		} else if (module->req.method == HTTP_METHOD_POST) {
    8bcc:	2b02      	cmp	r3, #2
    8bce:	d100      	bne.n	8bd2 <_http_client_request+0xc2>
    8bd0:	e113      	b.n	8dfa <_http_client_request+0x2ea>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    8bd2:	2b03      	cmp	r3, #3
    8bd4:	d100      	bne.n	8bd8 <_http_client_request+0xc8>
    8bd6:	e117      	b.n	8e08 <_http_client_request+0x2f8>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    8bd8:	2b04      	cmp	r3, #4
    8bda:	d100      	bne.n	8bde <_http_client_request+0xce>
    8bdc:	e11b      	b.n	8e16 <_http_client_request+0x306>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    8bde:	2b05      	cmp	r3, #5
    8be0:	d100      	bne.n	8be4 <_http_client_request+0xd4>
    8be2:	e11f      	b.n	8e24 <_http_client_request+0x314>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    8be4:	2b06      	cmp	r3, #6
    8be6:	d100      	bne.n	8bea <_http_client_request+0xda>
    8be8:	e123      	b.n	8e32 <_http_client_request+0x322>
    8bea:	4e99      	ldr	r6, [pc, #612]	; (8e50 <_http_client_request+0x340>)
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    8bec:	2370      	movs	r3, #112	; 0x70
    8bee:	469a      	mov	sl, r3
    8bf0:	4b98      	ldr	r3, [pc, #608]	; (8e54 <_http_client_request+0x344>)
    8bf2:	44a2      	add	sl, r4
    8bf4:	4650      	mov	r0, sl
    8bf6:	4699      	mov	r9, r3
    8bf8:	4798      	blx	r3
    8bfa:	232c      	movs	r3, #44	; 0x2c
    8bfc:	0002      	movs	r2, r0
    8bfe:	4651      	mov	r1, sl
    8c00:	18f8      	adds	r0, r7, r3
    8c02:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    8c04:	232c      	movs	r3, #44	; 0x2c
    8c06:	220b      	movs	r2, #11
    8c08:	18f8      	adds	r0, r7, r3
    8c0a:	4993      	ldr	r1, [pc, #588]	; (8e58 <_http_client_request+0x348>)
    8c0c:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    8c0e:	232c      	movs	r3, #44	; 0x2c
    8c10:	220c      	movs	r2, #12
    8c12:	4992      	ldr	r1, [pc, #584]	; (8e5c <_http_client_request+0x34c>)
    8c14:	18f8      	adds	r0, r7, r3
    8c16:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    8c18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8c1a:	0018      	movs	r0, r3
    8c1c:	469a      	mov	sl, r3
    8c1e:	47c8      	blx	r9
    8c20:	232c      	movs	r3, #44	; 0x2c
    8c22:	0002      	movs	r2, r0
    8c24:	4651      	mov	r1, sl
    8c26:	18f8      	adds	r0, r7, r3
    8c28:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8c2a:	4b8d      	ldr	r3, [pc, #564]	; (8e60 <_http_client_request+0x350>)
    8c2c:	2202      	movs	r2, #2
    8c2e:	0019      	movs	r1, r3
    8c30:	469a      	mov	sl, r3
    8c32:	232c      	movs	r3, #44	; 0x2c
    8c34:	18f8      	adds	r0, r7, r3
    8c36:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    8c38:	232c      	movs	r3, #44	; 0x2c
    8c3a:	2206      	movs	r2, #6
    8c3c:	4989      	ldr	r1, [pc, #548]	; (8e64 <_http_client_request+0x354>)
    8c3e:	18f8      	adds	r0, r7, r3
    8c40:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    8c42:	1c63      	adds	r3, r4, #1
    8c44:	0018      	movs	r0, r3
    8c46:	469b      	mov	fp, r3
    8c48:	47c8      	blx	r9
    8c4a:	232c      	movs	r3, #44	; 0x2c
    8c4c:	0002      	movs	r2, r0
    8c4e:	4659      	mov	r1, fp
    8c50:	18f8      	adds	r0, r7, r3
    8c52:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8c54:	232c      	movs	r3, #44	; 0x2c
    8c56:	2202      	movs	r2, #2
    8c58:	18f8      	adds	r0, r7, r3
    8c5a:	4651      	mov	r1, sl
    8c5c:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    8c5e:	232c      	movs	r3, #44	; 0x2c
    8c60:	2218      	movs	r2, #24
    8c62:	18f8      	adds	r0, r7, r3
    8c64:	4980      	ldr	r1, [pc, #512]	; (8e68 <_http_client_request+0x358>)
    8c66:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    8c68:	232c      	movs	r3, #44	; 0x2c
    8c6a:	2213      	movs	r2, #19
    8c6c:	18f8      	adds	r0, r7, r3
    8c6e:	497f      	ldr	r1, [pc, #508]	; (8e6c <_http_client_request+0x35c>)
    8c70:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    8c72:	232c      	movs	r3, #44	; 0x2c
    8c74:	2217      	movs	r2, #23
    8c76:	18f8      	adds	r0, r7, r3
    8c78:	497d      	ldr	r1, [pc, #500]	; (8e70 <_http_client_request+0x360>)
    8c7a:	47b0      	blx	r6
		if (entity->read != NULL) {
    8c7c:	0023      	movs	r3, r4
    8c7e:	33b0      	adds	r3, #176	; 0xb0
    8c80:	68da      	ldr	r2, [r3, #12]
    8c82:	2a00      	cmp	r2, #0
    8c84:	d024      	beq.n	8cd0 <_http_client_request+0x1c0>
			if (entity->is_chunked) {
    8c86:	22b0      	movs	r2, #176	; 0xb0
    8c88:	5ca2      	ldrb	r2, [r4, r2]
    8c8a:	4693      	mov	fp, r2
    8c8c:	2a00      	cmp	r2, #0
    8c8e:	d000      	beq.n	8c92 <_http_client_request+0x182>
    8c90:	e09c      	b.n	8dcc <_http_client_request+0x2bc>
			} else if(entity->get_contents_length) {
    8c92:	689a      	ldr	r2, [r3, #8]
    8c94:	2a00      	cmp	r2, #0
    8c96:	d01b      	beq.n	8cd0 <_http_client_request+0x1c0>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    8c98:	6958      	ldr	r0, [r3, #20]
    8c9a:	4790      	blx	r2
    8c9c:	23cc      	movs	r3, #204	; 0xcc
    8c9e:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    8ca0:	2800      	cmp	r0, #0
    8ca2:	db63      	blt.n	8d6c <_http_client_request+0x25c>
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    8ca4:	0002      	movs	r2, r0
    8ca6:	4973      	ldr	r1, [pc, #460]	; (8e74 <_http_client_request+0x364>)
    8ca8:	4b73      	ldr	r3, [pc, #460]	; (8e78 <_http_client_request+0x368>)
    8caa:	1d38      	adds	r0, r7, #4
    8cac:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    8cae:	232c      	movs	r3, #44	; 0x2c
    8cb0:	2210      	movs	r2, #16
    8cb2:	18f8      	adds	r0, r7, r3
    8cb4:	4971      	ldr	r1, [pc, #452]	; (8e7c <_http_client_request+0x36c>)
    8cb6:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, length, strlen(length));
    8cb8:	1d38      	adds	r0, r7, #4
    8cba:	47c8      	blx	r9
    8cbc:	232c      	movs	r3, #44	; 0x2c
    8cbe:	0002      	movs	r2, r0
    8cc0:	1d39      	adds	r1, r7, #4
    8cc2:	18f8      	adds	r0, r7, r3
    8cc4:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8cc6:	232c      	movs	r3, #44	; 0x2c
    8cc8:	2202      	movs	r2, #2
    8cca:	4651      	mov	r1, sl
    8ccc:	18f8      	adds	r0, r7, r3
    8cce:	47b0      	blx	r6
		if (module->req.ext_header != NULL ) {
    8cd0:	23d4      	movs	r3, #212	; 0xd4
    8cd2:	58e3      	ldr	r3, [r4, r3]
    8cd4:	469b      	mov	fp, r3
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d006      	beq.n	8ce8 <_http_client_request+0x1d8>
			stream_writer_send_buffer(&writer,
    8cda:	0018      	movs	r0, r3
    8cdc:	47c8      	blx	r9
    8cde:	232c      	movs	r3, #44	; 0x2c
    8ce0:	0002      	movs	r2, r0
    8ce2:	4659      	mov	r1, fp
    8ce4:	18f8      	adds	r0, r7, r3
    8ce6:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8ce8:	232c      	movs	r3, #44	; 0x2c
    8cea:	2202      	movs	r2, #2
    8cec:	18f8      	adds	r0, r7, r3
    8cee:	4651      	mov	r1, sl
    8cf0:	47b0      	blx	r6
		stream_writer_send_remain(&writer);
    8cf2:	232c      	movs	r3, #44	; 0x2c
    8cf4:	18f8      	adds	r0, r7, r3
    8cf6:	4b62      	ldr	r3, [pc, #392]	; (8e80 <_http_client_request+0x370>)
    8cf8:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    8cfa:	2304      	movs	r3, #4
    8cfc:	66e3      	str	r3, [r4, #108]	; 0x6c
    8cfe:	e729      	b.n	8b54 <_http_client_request+0x44>
		if (module->req.content_length < 0 && entity->read) {
    8d00:	0020      	movs	r0, r4
    8d02:	30b0      	adds	r0, #176	; 0xb0
    8d04:	68c6      	ldr	r6, [r0, #12]
    8d06:	2e00      	cmp	r6, #0
    8d08:	d100      	bne.n	8d0c <_http_client_request+0x1fc>
    8d0a:	e73c      	b.n	8b86 <_http_client_request+0x76>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    8d0c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    8d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8d10:	58e3      	ldr	r3, [r4, r3]
    8d12:	3a07      	subs	r2, #7
    8d14:	1d69      	adds	r1, r5, #5
    8d16:	6940      	ldr	r0, [r0, #20]
    8d18:	47b0      	blx	r6
    8d1a:	43c3      	mvns	r3, r0
    8d1c:	0006      	movs	r6, r0
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    8d1e:	220a      	movs	r2, #10
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    8d20:	210d      	movs	r1, #13
    8d22:	17db      	asrs	r3, r3, #31
    8d24:	401e      	ands	r6, r3
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    8d26:	19ab      	adds	r3, r5, r6
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    8d28:	712a      	strb	r2, [r5, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    8d2a:	70e9      	strb	r1, [r5, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    8d2c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    8d2e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    8d30:	230f      	movs	r3, #15
    8d32:	001a      	movs	r2, r3
    8d34:	310f      	adds	r1, #15
    8d36:	1879      	adds	r1, r7, r1
    8d38:	4032      	ands	r2, r6
    8d3a:	5c8a      	ldrb	r2, [r1, r2]
				ptr = buffer + 2;
    8d3c:	1ca9      	adds	r1, r5, #2
				*ptr = CH_LUT[size % 16];
    8d3e:	70aa      	strb	r2, [r5, #2]
			if (size >= 0x10) {
    8d40:	2e0f      	cmp	r6, #15
    8d42:	dc16      	bgt.n	8d72 <_http_client_request+0x262>
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    8d44:	2000      	movs	r0, #0
    8d46:	1cca      	adds	r2, r1, #3
    8d48:	1b52      	subs	r2, r2, r5
    8d4a:	1d33      	adds	r3, r6, #4
    8d4c:	18d2      	adds	r2, r2, r3
    8d4e:	b292      	uxth	r2, r2
    8d50:	5620      	ldrsb	r0, [r4, r0]
    8d52:	2300      	movs	r3, #0
    8d54:	4d4b      	ldr	r5, [pc, #300]	; (8e84 <_http_client_request+0x374>)
    8d56:	47a8      	blx	r5
    8d58:	2800      	cmp	r0, #0
    8d5a:	db48      	blt.n	8dee <_http_client_request+0x2de>
			module->req.sent_length += size;
    8d5c:	22d0      	movs	r2, #208	; 0xd0
    8d5e:	58a3      	ldr	r3, [r4, r2]
    8d60:	199b      	adds	r3, r3, r6
    8d62:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    8d64:	2e00      	cmp	r6, #0
    8d66:	d100      	bne.n	8d6a <_http_client_request+0x25a>
    8d68:	e706      	b.n	8b78 <_http_client_request+0x68>
    8d6a:	e716      	b.n	8b9a <_http_client_request+0x8a>
					module->req.content_length = 0;
    8d6c:	465a      	mov	r2, fp
    8d6e:	50e2      	str	r2, [r4, r3]
    8d70:	e7ae      	b.n	8cd0 <_http_client_request+0x1c0>
				*ptr = CH_LUT[(size / 0x10) % 16];
    8d72:	211c      	movs	r1, #28
    8d74:	1132      	asrs	r2, r6, #4
    8d76:	1879      	adds	r1, r7, r1
    8d78:	401a      	ands	r2, r3
    8d7a:	5c8a      	ldrb	r2, [r1, r2]
				ptr = buffer + 1;
    8d7c:	1c69      	adds	r1, r5, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    8d7e:	706a      	strb	r2, [r5, #1]
			if (size >= 0x100) {
    8d80:	2eff      	cmp	r6, #255	; 0xff
    8d82:	dddf      	ble.n	8d44 <_http_client_request+0x234>
				*ptr = CH_LUT[(size / 0x100) % 16];
    8d84:	1232      	asrs	r2, r6, #8
    8d86:	4013      	ands	r3, r2
    8d88:	221c      	movs	r2, #28
    8d8a:	18ba      	adds	r2, r7, r2
    8d8c:	5cd3      	ldrb	r3, [r2, r3]
    8d8e:	0029      	movs	r1, r5
    8d90:	702b      	strb	r3, [r5, #0]
    8d92:	e7d7      	b.n	8d44 <_http_client_request+0x234>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    8d94:	6948      	ldr	r0, [r1, #20]
    8d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8d98:	0029      	movs	r1, r5
    8d9a:	47c8      	blx	r9
			if (size < 0) {
    8d9c:	2800      	cmp	r0, #0
    8d9e:	db26      	blt.n	8dee <_http_client_request+0x2de>
				if (size > module->req.content_length - module->req.sent_length) {
    8da0:	4653      	mov	r3, sl
    8da2:	59a6      	ldr	r6, [r4, r6]
    8da4:	58e3      	ldr	r3, [r4, r3]
    8da6:	1af6      	subs	r6, r6, r3
    8da8:	4286      	cmp	r6, r0
    8daa:	dd00      	ble.n	8dae <_http_client_request+0x29e>
    8dac:	0006      	movs	r6, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    8dae:	2000      	movs	r0, #0
    8db0:	0029      	movs	r1, r5
    8db2:	b2b2      	uxth	r2, r6
    8db4:	5620      	ldrsb	r0, [r4, r0]
    8db6:	2300      	movs	r3, #0
    8db8:	4d32      	ldr	r5, [pc, #200]	; (8e84 <_http_client_request+0x374>)
    8dba:	47a8      	blx	r5
    8dbc:	2800      	cmp	r0, #0
    8dbe:	db16      	blt.n	8dee <_http_client_request+0x2de>
				module->req.sent_length += size;
    8dc0:	23d0      	movs	r3, #208	; 0xd0
    8dc2:	58e2      	ldr	r2, [r4, r3]
    8dc4:	4694      	mov	ip, r2
    8dc6:	4466      	add	r6, ip
    8dc8:	50e6      	str	r6, [r4, r3]
    8dca:	e6e6      	b.n	8b9a <_http_client_request+0x8a>
				module->req.content_length = -1;
    8dcc:	2201      	movs	r2, #1
    8dce:	23cc      	movs	r3, #204	; 0xcc
    8dd0:	4252      	negs	r2, r2
    8dd2:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    8dd4:	3ba0      	subs	r3, #160	; 0xa0
    8dd6:	321d      	adds	r2, #29
    8dd8:	492b      	ldr	r1, [pc, #172]	; (8e88 <_http_client_request+0x378>)
    8dda:	18f8      	adds	r0, r7, r3
    8ddc:	47b0      	blx	r6
    8dde:	e777      	b.n	8cd0 <_http_client_request+0x1c0>
			stream_writer_send_buffer(&writer, "GET ", 4);
    8de0:	332b      	adds	r3, #43	; 0x2b
    8de2:	2204      	movs	r2, #4
    8de4:	4929      	ldr	r1, [pc, #164]	; (8e8c <_http_client_request+0x37c>)
    8de6:	18f8      	adds	r0, r7, r3
    8de8:	4e19      	ldr	r6, [pc, #100]	; (8e50 <_http_client_request+0x340>)
    8dea:	47b0      	blx	r6
    8dec:	e6fe      	b.n	8bec <_http_client_request+0xdc>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    8dee:	2105      	movs	r1, #5
    8df0:	0020      	movs	r0, r4
    8df2:	4249      	negs	r1, r1
    8df4:	4b26      	ldr	r3, [pc, #152]	; (8e90 <_http_client_request+0x380>)
    8df6:	4798      	blx	r3
    8df8:	e6cf      	b.n	8b9a <_http_client_request+0x8a>
			stream_writer_send_buffer(&writer, "POST ", 5);
    8dfa:	332a      	adds	r3, #42	; 0x2a
    8dfc:	2205      	movs	r2, #5
    8dfe:	4925      	ldr	r1, [pc, #148]	; (8e94 <_http_client_request+0x384>)
    8e00:	18f8      	adds	r0, r7, r3
    8e02:	4e13      	ldr	r6, [pc, #76]	; (8e50 <_http_client_request+0x340>)
    8e04:	47b0      	blx	r6
    8e06:	e6f1      	b.n	8bec <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    8e08:	3329      	adds	r3, #41	; 0x29
    8e0a:	2207      	movs	r2, #7
    8e0c:	4922      	ldr	r1, [pc, #136]	; (8e98 <_http_client_request+0x388>)
    8e0e:	18f8      	adds	r0, r7, r3
    8e10:	4e0f      	ldr	r6, [pc, #60]	; (8e50 <_http_client_request+0x340>)
    8e12:	47b0      	blx	r6
    8e14:	e6ea      	b.n	8bec <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    8e16:	3328      	adds	r3, #40	; 0x28
    8e18:	2204      	movs	r2, #4
    8e1a:	4920      	ldr	r1, [pc, #128]	; (8e9c <_http_client_request+0x38c>)
    8e1c:	18f8      	adds	r0, r7, r3
    8e1e:	4e0c      	ldr	r6, [pc, #48]	; (8e50 <_http_client_request+0x340>)
    8e20:	47b0      	blx	r6
    8e22:	e6e3      	b.n	8bec <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    8e24:	3327      	adds	r3, #39	; 0x27
    8e26:	2208      	movs	r2, #8
    8e28:	491d      	ldr	r1, [pc, #116]	; (8ea0 <_http_client_request+0x390>)
    8e2a:	18f8      	adds	r0, r7, r3
    8e2c:	4e08      	ldr	r6, [pc, #32]	; (8e50 <_http_client_request+0x340>)
    8e2e:	47b0      	blx	r6
    8e30:	e6dc      	b.n	8bec <_http_client_request+0xdc>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    8e32:	232c      	movs	r3, #44	; 0x2c
    8e34:	2205      	movs	r2, #5
    8e36:	491b      	ldr	r1, [pc, #108]	; (8ea4 <_http_client_request+0x394>)
    8e38:	18f8      	adds	r0, r7, r3
    8e3a:	4e05      	ldr	r6, [pc, #20]	; (8e50 <_http_client_request+0x340>)
    8e3c:	47b0      	blx	r6
    8e3e:	e6d5      	b.n	8bec <_http_client_request+0xdc>
    8e40:	000154c4 	.word	0x000154c4
    8e44:	00013c51 	.word	0x00013c51
    8e48:	000088b1 	.word	0x000088b1
    8e4c:	00009809 	.word	0x00009809
    8e50:	00009845 	.word	0x00009845
    8e54:	0001414b 	.word	0x0001414b
    8e58:	00015538 	.word	0x00015538
    8e5c:	00015544 	.word	0x00015544
    8e60:	00015830 	.word	0x00015830
    8e64:	00015554 	.word	0x00015554
    8e68:	0001555c 	.word	0x0001555c
    8e6c:	00015578 	.word	0x00015578
    8e70:	0001558c 	.word	0x0001558c
    8e74:	000155c4 	.word	0x000155c4
    8e78:	000140a9 	.word	0x000140a9
    8e7c:	000155c8 	.word	0x000155c8
    8e80:	00009869 	.word	0x00009869
    8e84:	0000e0c5 	.word	0x0000e0c5
    8e88:	000155a4 	.word	0x000155a4
    8e8c:	00015504 	.word	0x00015504
    8e90:	000089f1 	.word	0x000089f1
    8e94:	0001550c 	.word	0x0001550c
    8e98:	00015514 	.word	0x00015514
    8e9c:	0001551c 	.word	0x0001551c
    8ea0:	00015524 	.word	0x00015524
    8ea4:	00015530 	.word	0x00015530

00008ea8 <http_client_send_request>:
{
    8ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eaa:	464e      	mov	r6, r9
    8eac:	4645      	mov	r5, r8
    8eae:	46de      	mov	lr, fp
    8eb0:	4657      	mov	r7, sl
    8eb2:	b5e0      	push	{r5, r6, r7, lr}
    8eb4:	b087      	sub	sp, #28
    8eb6:	0005      	movs	r5, r0
    8eb8:	000c      	movs	r4, r1
    8eba:	9200      	str	r2, [sp, #0]
    8ebc:	4699      	mov	r9, r3
	if (module == NULL) {
    8ebe:	2800      	cmp	r0, #0
    8ec0:	d100      	bne.n	8ec4 <http_client_send_request+0x1c>
    8ec2:	e104      	b.n	90ce <http_client_send_request+0x226>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    8ec4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    8ec6:	2b02      	cmp	r3, #2
    8ec8:	d900      	bls.n	8ecc <http_client_send_request+0x24>
    8eca:	e104      	b.n	90d6 <http_client_send_request+0x22e>
	if (!strncmp(url, "http://", 7)) {
    8ecc:	4b8a      	ldr	r3, [pc, #552]	; (90f8 <http_client_send_request+0x250>)
    8ece:	2207      	movs	r2, #7
    8ed0:	498a      	ldr	r1, [pc, #552]	; (90fc <http_client_send_request+0x254>)
    8ed2:	0020      	movs	r0, r4
    8ed4:	4698      	mov	r8, r3
    8ed6:	4798      	blx	r3
    8ed8:	2800      	cmp	r0, #0
    8eda:	d078      	beq.n	8fce <http_client_send_request+0x126>
	} else if (!strncmp(url, "https://", 8)) {
    8edc:	2208      	movs	r2, #8
    8ede:	4988      	ldr	r1, [pc, #544]	; (9100 <http_client_send_request+0x258>)
    8ee0:	0020      	movs	r0, r4
    8ee2:	47c0      	blx	r8
    8ee4:	2800      	cmp	r0, #0
    8ee6:	d100      	bne.n	8eea <http_client_send_request+0x42>
    8ee8:	e0d1      	b.n	908e <http_client_send_request+0x1e6>
	int i = 0, j = 0, reconnect = 0;
    8eea:	2300      	movs	r3, #0
	} else if (!strncmp(url, "https://", 8)) {
    8eec:	2600      	movs	r6, #0
	int i = 0, j = 0, reconnect = 0;
    8eee:	9301      	str	r3, [sp, #4]
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8ef0:	4b84      	ldr	r3, [pc, #528]	; (9104 <http_client_send_request+0x25c>)
    8ef2:	1c6f      	adds	r7, r5, #1
    8ef4:	0038      	movs	r0, r7
    8ef6:	469b      	mov	fp, r3
    8ef8:	4798      	blx	r3
    8efa:	19a6      	adds	r6, r4, r6
    8efc:	0002      	movs	r2, r0
    8efe:	0031      	movs	r1, r6
    8f00:	0038      	movs	r0, r7
    8f02:	47c0      	blx	r8
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8f04:	7833      	ldrb	r3, [r6, #0]
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8f06:	4682      	mov	sl, r0
    8f08:	4680      	mov	r8, r0
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d100      	bne.n	8f10 <http_client_send_request+0x68>
    8f0e:	e0dc      	b.n	90ca <http_client_send_request+0x222>
    8f10:	2b2f      	cmp	r3, #47	; 0x2f
    8f12:	d100      	bne.n	8f16 <http_client_send_request+0x6e>
    8f14:	e0d9      	b.n	90ca <http_client_send_request+0x222>
    8f16:	9a01      	ldr	r2, [sp, #4]
    8f18:	3201      	adds	r2, #1
    8f1a:	18a4      	adds	r4, r4, r2
    8f1c:	2200      	movs	r2, #0
    8f1e:	e002      	b.n	8f26 <http_client_send_request+0x7e>
    8f20:	3401      	adds	r4, #1
    8f22:	2b2f      	cmp	r3, #47	; 0x2f
    8f24:	d005      	beq.n	8f32 <http_client_send_request+0x8a>
		module->host[j++] = url[i];
    8f26:	3201      	adds	r2, #1
    8f28:	54ab      	strb	r3, [r5, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8f2a:	7823      	ldrb	r3, [r4, #0]
    8f2c:	0026      	movs	r6, r4
    8f2e:	2b00      	cmp	r3, #0
    8f30:	d1f6      	bne.n	8f20 <http_client_send_request+0x78>
	module->host[j] = '\0';
    8f32:	2300      	movs	r3, #0
    8f34:	18aa      	adds	r2, r5, r2
    8f36:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    8f38:	786b      	ldrb	r3, [r5, #1]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d100      	bne.n	8f40 <http_client_send_request+0x98>
    8f3e:	e0c6      	b.n	90ce <http_client_send_request+0x226>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    8f40:	0030      	movs	r0, r6
    8f42:	47d8      	blx	fp
    8f44:	283f      	cmp	r0, #63	; 0x3f
    8f46:	d900      	bls.n	8f4a <http_client_send_request+0xa2>
    8f48:	e0c9      	b.n	90de <http_client_send_request+0x236>
	if (module->req.ext_header != NULL) {
    8f4a:	23d4      	movs	r3, #212	; 0xd4
    8f4c:	58e8      	ldr	r0, [r5, r3]
    8f4e:	2800      	cmp	r0, #0
    8f50:	d001      	beq.n	8f56 <http_client_send_request+0xae>
		free(module->req.ext_header);
    8f52:	4b6d      	ldr	r3, [pc, #436]	; (9108 <http_client_send_request+0x260>)
    8f54:	4798      	blx	r3
	if (ext_header != NULL) {
    8f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d100      	bne.n	8f5e <http_client_send_request+0xb6>
    8f5c:	e093      	b.n	9086 <http_client_send_request+0x1de>
		module->req.ext_header = strdup(ext_header);
    8f5e:	0018      	movs	r0, r3
    8f60:	4b6a      	ldr	r3, [pc, #424]	; (910c <http_client_send_request+0x264>)
    8f62:	4798      	blx	r3
    8f64:	23d4      	movs	r3, #212	; 0xd4
    8f66:	50e8      	str	r0, [r5, r3]
		if (module->req.ext_header == NULL) {
    8f68:	2800      	cmp	r0, #0
    8f6a:	d100      	bne.n	8f6e <http_client_send_request+0xc6>
    8f6c:	e0bf      	b.n	90ee <http_client_send_request+0x246>
	module->sending = 0;
    8f6e:	2241      	movs	r2, #65	; 0x41
    8f70:	2101      	movs	r1, #1
    8f72:	5cab      	ldrb	r3, [r5, r2]
    8f74:	438b      	bics	r3, r1
    8f76:	54ab      	strb	r3, [r5, r2]
	module->recved_size = 0;
    8f78:	2300      	movs	r3, #0
    8f7a:	646b      	str	r3, [r5, #68]	; 0x44
	if (uri[0] == '/') {
    8f7c:	7833      	ldrb	r3, [r6, #0]
    8f7e:	2b2f      	cmp	r3, #47	; 0x2f
    8f80:	d100      	bne.n	8f84 <http_client_send_request+0xdc>
    8f82:	e09c      	b.n	90be <http_client_send_request+0x216>
		module->req.uri[0] = '/';
    8f84:	2370      	movs	r3, #112	; 0x70
    8f86:	222f      	movs	r2, #47	; 0x2f
    8f88:	54ea      	strb	r2, [r5, r3]
		if (uri[0] != 0) {
    8f8a:	7833      	ldrb	r3, [r6, #0]
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d000      	beq.n	8f92 <http_client_send_request+0xea>
    8f90:	e085      	b.n	909e <http_client_send_request+0x1f6>
	if (entity != NULL) {
    8f92:	464b      	mov	r3, r9
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8f94:	2218      	movs	r2, #24
	if (entity != NULL) {
    8f96:	2b00      	cmp	r3, #0
    8f98:	d100      	bne.n	8f9c <http_client_send_request+0xf4>
    8f9a:	e08a      	b.n	90b2 <http_client_send_request+0x20a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8f9c:	0028      	movs	r0, r5
    8f9e:	4649      	mov	r1, r9
    8fa0:	30b0      	adds	r0, #176	; 0xb0
    8fa2:	4b5b      	ldr	r3, [pc, #364]	; (9110 <http_client_send_request+0x268>)
    8fa4:	4798      	blx	r3
	module->req.method = method;
    8fa6:	466a      	mov	r2, sp
    8fa8:	23c8      	movs	r3, #200	; 0xc8
    8faa:	7812      	ldrb	r2, [r2, #0]
    8fac:	54ea      	strb	r2, [r5, r3]
	switch (module->req.state) {
    8fae:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8fb0:	2b01      	cmp	r3, #1
    8fb2:	d010      	beq.n	8fd6 <http_client_send_request+0x12e>
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d015      	beq.n	8fe4 <http_client_send_request+0x13c>
    8fb8:	2b02      	cmp	r3, #2
    8fba:	d16c      	bne.n	9096 <http_client_send_request+0x1ee>
		if (!reconnect) {
    8fbc:	4653      	mov	r3, sl
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d10c      	bne.n	8fdc <http_client_send_request+0x134>
			module->req.state = STATE_REQ_SEND_HEADER;
    8fc2:	3303      	adds	r3, #3
    8fc4:	66eb      	str	r3, [r5, #108]	; 0x6c
			_http_client_request(module);
    8fc6:	0028      	movs	r0, r5
    8fc8:	4b52      	ldr	r3, [pc, #328]	; (9114 <http_client_send_request+0x26c>)
    8fca:	4798      	blx	r3
			break;
    8fcc:	e037      	b.n	903e <http_client_send_request+0x196>
		i = 7;
    8fce:	2307      	movs	r3, #7
    8fd0:	2607      	movs	r6, #7
    8fd2:	9301      	str	r3, [sp, #4]
    8fd4:	e78c      	b.n	8ef0 <http_client_send_request+0x48>
		if (!reconnect) {
    8fd6:	4653      	mov	r3, sl
    8fd8:	2b00      	cmp	r3, #0
    8fda:	d030      	beq.n	903e <http_client_send_request+0x196>
			_http_client_clear_conn(module, 0);
    8fdc:	2100      	movs	r1, #0
    8fde:	0028      	movs	r0, r5
    8fe0:	4b4d      	ldr	r3, [pc, #308]	; (9118 <http_client_send_request+0x270>)
    8fe2:	4798      	blx	r3
		if (module->config.tls) {
    8fe4:	2352      	movs	r3, #82	; 0x52
    8fe6:	5cea      	ldrb	r2, [r5, r3]
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8fe8:	2101      	movs	r1, #1
		if (module->config.tls) {
    8fea:	1e53      	subs	r3, r2, #1
    8fec:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8fee:	2002      	movs	r0, #2
    8ff0:	b2d2      	uxtb	r2, r2
    8ff2:	4b4a      	ldr	r3, [pc, #296]	; (911c <http_client_send_request+0x274>)
    8ff4:	4798      	blx	r3
    8ff6:	7028      	strb	r0, [r5, #0]
		if (module->sock >= 0) {
    8ff8:	2800      	cmp	r0, #0
    8ffa:	da00      	bge.n	8ffe <http_client_send_request+0x156>
    8ffc:	e073      	b.n	90e6 <http_client_send_request+0x23e>
			module_ref_inst[module->sock] = module;
    8ffe:	4b48      	ldr	r3, [pc, #288]	; (9120 <http_client_send_request+0x278>)
    9000:	0080      	lsls	r0, r0, #2
    9002:	50c5      	str	r5, [r0, r3]
    9004:	0039      	movs	r1, r7
	uint32_t isv6 = 0;
    9006:	2400      	movs	r4, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    9008:	2020      	movs	r0, #32
		} else if ((ch & 0x30) != 0x30) {
    900a:	2630      	movs	r6, #48	; 0x30
	while (*host != '\0') {
    900c:	780a      	ldrb	r2, [r1, #0]
    900e:	2a00      	cmp	r2, #0
    9010:	d021      	beq.n	9056 <http_client_send_request+0x1ae>
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    9012:	0013      	movs	r3, r2
    9014:	4383      	bics	r3, r0
    9016:	3b41      	subs	r3, #65	; 0x41
		ch = *host++;
    9018:	3101      	adds	r1, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    901a:	2b05      	cmp	r3, #5
    901c:	d917      	bls.n	904e <http_client_send_request+0x1a6>
    901e:	2a3a      	cmp	r2, #58	; 0x3a
    9020:	d015      	beq.n	904e <http_client_send_request+0x1a6>
    9022:	2a2f      	cmp	r2, #47	; 0x2f
    9024:	d013      	beq.n	904e <http_client_send_request+0x1a6>
		} else if (ch == '.') {
    9026:	2a2e      	cmp	r2, #46	; 0x2e
    9028:	d02a      	beq.n	9080 <http_client_send_request+0x1d8>
		} else if ((ch & 0x30) != 0x30) {
    902a:	4032      	ands	r2, r6
    902c:	2a30      	cmp	r2, #48	; 0x30
    902e:	d0ed      	beq.n	900c <http_client_send_request+0x164>
				gethostbyname((uint8*)module->host);
    9030:	0038      	movs	r0, r7
    9032:	4b3c      	ldr	r3, [pc, #240]	; (9124 <http_client_send_request+0x27c>)
    9034:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    9036:	2301      	movs	r3, #1
    9038:	66eb      	str	r3, [r5, #108]	; 0x6c
	return 0;
    903a:	2300      	movs	r3, #0
    903c:	4698      	mov	r8, r3
}
    903e:	4640      	mov	r0, r8
    9040:	b007      	add	sp, #28
    9042:	bc3c      	pop	{r2, r3, r4, r5}
    9044:	4690      	mov	r8, r2
    9046:	4699      	mov	r9, r3
    9048:	46a2      	mov	sl, r4
    904a:	46ab      	mov	fp, r5
    904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (*host != '\0') {
    904e:	780a      	ldrb	r2, [r1, #0]
			isv6 = 1;
    9050:	2401      	movs	r4, #1
	while (*host != '\0') {
    9052:	2a00      	cmp	r2, #0
    9054:	d1dd      	bne.n	9012 <http_client_send_request+0x16a>
				addr_in.sin_family = AF_INET;
    9056:	2302      	movs	r3, #2
    9058:	aa02      	add	r2, sp, #8
    905a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    905c:	334e      	adds	r3, #78	; 0x4e
    905e:	5aeb      	ldrh	r3, [r5, r3]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    9060:	0038      	movs	r0, r7
				addr_in.sin_port = _htons(module->config.port);
    9062:	021a      	lsls	r2, r3, #8
    9064:	0a1b      	lsrs	r3, r3, #8
    9066:	4313      	orrs	r3, r2
    9068:	aa02      	add	r2, sp, #8
    906a:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    906c:	4b2e      	ldr	r3, [pc, #184]	; (9128 <http_client_send_request+0x280>)
    906e:	4798      	blx	r3
    9070:	9003      	str	r0, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    9072:	2000      	movs	r0, #0
    9074:	2210      	movs	r2, #16
    9076:	5628      	ldrsb	r0, [r5, r0]
    9078:	a902      	add	r1, sp, #8
    907a:	4b2c      	ldr	r3, [pc, #176]	; (912c <http_client_send_request+0x284>)
    907c:	4798      	blx	r3
    907e:	e7da      	b.n	9036 <http_client_send_request+0x18e>
			if (isv6) {
    9080:	2c00      	cmp	r4, #0
    9082:	d0c3      	beq.n	900c <http_client_send_request+0x164>
    9084:	e7d4      	b.n	9030 <http_client_send_request+0x188>
		module->req.ext_header = NULL;
    9086:	23d4      	movs	r3, #212	; 0xd4
    9088:	9a10      	ldr	r2, [sp, #64]	; 0x40
    908a:	50ea      	str	r2, [r5, r3]
    908c:	e76f      	b.n	8f6e <http_client_send_request+0xc6>
		i = 8;
    908e:	2308      	movs	r3, #8
    9090:	2608      	movs	r6, #8
    9092:	9301      	str	r3, [sp, #4]
    9094:	e72c      	b.n	8ef0 <http_client_send_request+0x48>
		return -EAGAIN;
    9096:	230b      	movs	r3, #11
    9098:	425b      	negs	r3, r3
    909a:	4698      	mov	r8, r3
    909c:	e7cf      	b.n	903e <http_client_send_request+0x196>
			strcpy(module->req.uri + 1, uri);
    909e:	0028      	movs	r0, r5
    90a0:	4b23      	ldr	r3, [pc, #140]	; (9130 <http_client_send_request+0x288>)
    90a2:	0031      	movs	r1, r6
    90a4:	3071      	adds	r0, #113	; 0x71
    90a6:	4798      	blx	r3
	if (entity != NULL) {
    90a8:	464b      	mov	r3, r9
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    90aa:	2218      	movs	r2, #24
	if (entity != NULL) {
    90ac:	2b00      	cmp	r3, #0
    90ae:	d000      	beq.n	90b2 <http_client_send_request+0x20a>
    90b0:	e774      	b.n	8f9c <http_client_send_request+0xf4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    90b2:	0028      	movs	r0, r5
    90b4:	2100      	movs	r1, #0
    90b6:	4b1f      	ldr	r3, [pc, #124]	; (9134 <http_client_send_request+0x28c>)
    90b8:	30b0      	adds	r0, #176	; 0xb0
    90ba:	4798      	blx	r3
    90bc:	e773      	b.n	8fa6 <http_client_send_request+0xfe>
		strcpy(module->req.uri, uri);
    90be:	0028      	movs	r0, r5
    90c0:	0031      	movs	r1, r6
    90c2:	4b1b      	ldr	r3, [pc, #108]	; (9130 <http_client_send_request+0x288>)
    90c4:	3070      	adds	r0, #112	; 0x70
    90c6:	4798      	blx	r3
    90c8:	e763      	b.n	8f92 <http_client_send_request+0xea>
	int i = 0, j = 0, reconnect = 0;
    90ca:	2200      	movs	r2, #0
    90cc:	e731      	b.n	8f32 <http_client_send_request+0x8a>
		return -EINVAL;
    90ce:	2316      	movs	r3, #22
    90d0:	425b      	negs	r3, r3
    90d2:	4698      	mov	r8, r3
    90d4:	e7b3      	b.n	903e <http_client_send_request+0x196>
		return -EBUSY;
    90d6:	2310      	movs	r3, #16
    90d8:	425b      	negs	r3, r3
    90da:	4698      	mov	r8, r3
    90dc:	e7af      	b.n	903e <http_client_send_request+0x196>
		return -ENAMETOOLONG;
    90de:	235b      	movs	r3, #91	; 0x5b
    90e0:	425b      	negs	r3, r3
    90e2:	4698      	mov	r8, r3
    90e4:	e7ab      	b.n	903e <http_client_send_request+0x196>
			return -ENOSPC;
    90e6:	231c      	movs	r3, #28
    90e8:	425b      	negs	r3, r3
    90ea:	4698      	mov	r8, r3
    90ec:	e7a7      	b.n	903e <http_client_send_request+0x196>
			return -ENOMEM;
    90ee:	230c      	movs	r3, #12
    90f0:	425b      	negs	r3, r3
    90f2:	4698      	mov	r8, r3
    90f4:	e7a3      	b.n	903e <http_client_send_request+0x196>
    90f6:	46c0      	nop			; (mov r8, r8)
    90f8:	00014159 	.word	0x00014159
    90fc:	000155e8 	.word	0x000155e8
    9100:	000155f0 	.word	0x000155f0
    9104:	0001414b 	.word	0x0001414b
    9108:	00013c3d 	.word	0x00013c3d
    910c:	00014111 	.word	0x00014111
    9110:	00013c51 	.word	0x00013c51
    9114:	00008b11 	.word	0x00008b11
    9118:	000089f1 	.word	0x000089f1
    911c:	0000df29 	.word	0x0000df29
    9120:	200003f0 	.word	0x200003f0
    9124:	0000e2a5 	.word	0x0000e2a5
    9128:	0000e24d 	.word	0x0000e24d
    912c:	0000e051 	.word	0x0000e051
    9130:	00014101 	.word	0x00014101
    9134:	00013c87 	.word	0x00013c87

00009138 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    9138:	b510      	push	{r4, lr}
	if (module == NULL) {
    913a:	2800      	cmp	r0, #0
    913c:	d00d      	beq.n	915a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    913e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    9140:	6e02      	ldr	r2, [r0, #96]	; 0x60
    9142:	4291      	cmp	r1, r2
    9144:	d20a      	bcs.n	915c <_http_client_recv_packet+0x24>
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
		module->config.recv_buffer + module->recved_size,
    9146:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	recv(module->sock,
    9148:	7800      	ldrb	r0, [r0, #0]
		module->config.recv_buffer + module->recved_size,
    914a:	469c      	mov	ip, r3
	recv(module->sock,
    914c:	1a52      	subs	r2, r2, r1
    914e:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    9150:	4461      	add	r1, ip
	recv(module->sock,
    9152:	b240      	sxtb	r0, r0
    9154:	2300      	movs	r3, #0
    9156:	4c04      	ldr	r4, [pc, #16]	; (9168 <_http_client_recv_packet+0x30>)
    9158:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    915a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    915c:	218b      	movs	r1, #139	; 0x8b
    915e:	4b03      	ldr	r3, [pc, #12]	; (916c <_http_client_recv_packet+0x34>)
    9160:	4249      	negs	r1, r1
    9162:	4798      	blx	r3
		return;
    9164:	e7f9      	b.n	915a <_http_client_recv_packet+0x22>
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	0000e141 	.word	0x0000e141
    916c:	000089f1 	.word	0x000089f1

00009170 <_http_client_handle_header>:
	}
	return 0;
}

int _http_client_handle_header(struct http_client_module *const module)
{
    9170:	b5f0      	push	{r4, r5, r6, r7, lr}
    9172:	4657      	mov	r7, sl
    9174:	464e      	mov	r6, r9
    9176:	4645      	mov	r5, r8
    9178:	46de      	mov	lr, fp
    917a:	b5e0      	push	{r5, r6, r7, lr}
    917c:	6c43      	ldr	r3, [r0, #68]	; 0x44
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    917e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    9180:	4699      	mov	r9, r3
    9182:	4b79      	ldr	r3, [pc, #484]	; (9368 <_http_client_handle_header+0x1f8>)
{
    9184:	b085      	sub	sp, #20
    9186:	4698      	mov	r8, r3
    9188:	0007      	movs	r7, r0
		ptr_line_end = strstr(ptr, new_line);
    918a:	4641      	mov	r1, r8
    918c:	0020      	movs	r0, r4
    918e:	4b77      	ldr	r3, [pc, #476]	; (936c <_http_client_handle_header+0x1fc>)
    9190:	4798      	blx	r3
	for (ptr = module->config.recv_buffer ; ; ) {
    9192:	46a2      	mov	sl, r4
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
			return 0;
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    9194:	4e76      	ldr	r6, [pc, #472]	; (9370 <_http_client_handle_header+0x200>)
		ptr_line_end = strstr(ptr, new_line);
    9196:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    9198:	d043      	beq.n	9222 <_http_client_handle_header+0xb2>
    919a:	4653      	mov	r3, sl
    919c:	444b      	add	r3, r9
    919e:	4298      	cmp	r0, r3
    91a0:	d23f      	bcs.n	9222 <_http_client_handle_header+0xb2>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    91a2:	2202      	movs	r2, #2
    91a4:	4641      	mov	r1, r8
    91a6:	0020      	movs	r0, r4
    91a8:	47b0      	blx	r6
    91aa:	2800      	cmp	r0, #0
    91ac:	d100      	bne.n	91b0 <_http_client_handle_header+0x40>
    91ae:	e0a4      	b.n	92fa <_http_client_handle_header+0x18a>
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
			return 1;
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    91b0:	2210      	movs	r2, #16
    91b2:	4970      	ldr	r1, [pc, #448]	; (9374 <_http_client_handle_header+0x204>)
    91b4:	0020      	movs	r0, r4
    91b6:	47b0      	blx	r6
    91b8:	2800      	cmp	r0, #0
    91ba:	d069      	beq.n	9290 <_http_client_handle_header+0x120>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    91bc:	2213      	movs	r2, #19
    91be:	496e      	ldr	r1, [pc, #440]	; (9378 <_http_client_handle_header+0x208>)
    91c0:	0020      	movs	r0, r4
    91c2:	47b0      	blx	r6
    91c4:	2800      	cmp	r0, #0
    91c6:	d13a      	bne.n	923e <_http_client_handle_header+0xce>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    91c8:	0022      	movs	r2, r4
    91ca:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    91cc:	4295      	cmp	r5, r2
    91ce:	d921      	bls.n	9214 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    91d0:	7ce3      	ldrb	r3, [r4, #19]
    91d2:	2b20      	cmp	r3, #32
    91d4:	d011      	beq.n	91fa <_http_client_handle_header+0x8a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    91d6:	2220      	movs	r2, #32
    91d8:	4393      	bics	r3, r2
    91da:	2b43      	cmp	r3, #67	; 0x43
    91dc:	d017      	beq.n	920e <_http_client_handle_header+0x9e>
					/* Chunked transfer */
					module->req.content_length = -1;
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
    91de:	2186      	movs	r1, #134	; 0x86
    91e0:	4683      	mov	fp, r0
    91e2:	4249      	negs	r1, r1
    91e4:	0038      	movs	r0, r7
    91e6:	4b65      	ldr	r3, [pc, #404]	; (937c <_http_client_handle_header+0x20c>)
    91e8:	4798      	blx	r3
			}
		}

		ptr = ptr_line_end + strlen(new_line);
	}
}
    91ea:	4658      	mov	r0, fp
    91ec:	b005      	add	sp, #20
    91ee:	bc3c      	pop	{r2, r3, r4, r5}
    91f0:	4690      	mov	r8, r2
    91f2:	4699      	mov	r9, r3
    91f4:	46a2      	mov	sl, r4
    91f6:	46ab      	mov	fp, r5
    91f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (; ptr_line_end > type_ptr; type_ptr++) {
    91fa:	3201      	adds	r2, #1
    91fc:	4295      	cmp	r5, r2
    91fe:	d009      	beq.n	9214 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    9200:	7813      	ldrb	r3, [r2, #0]
    9202:	2b20      	cmp	r3, #32
    9204:	d0f9      	beq.n	91fa <_http_client_handle_header+0x8a>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    9206:	2220      	movs	r2, #32
    9208:	4393      	bics	r3, r2
    920a:	2b43      	cmp	r3, #67	; 0x43
    920c:	d1e7      	bne.n	91de <_http_client_handle_header+0x6e>
					module->req.content_length = -1;
    920e:	3a21      	subs	r2, #33	; 0x21
    9210:	3389      	adds	r3, #137	; 0x89
    9212:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    9214:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    9216:	4641      	mov	r1, r8
    9218:	0020      	movs	r0, r4
    921a:	4b54      	ldr	r3, [pc, #336]	; (936c <_http_client_handle_header+0x1fc>)
    921c:	4798      	blx	r3
    921e:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    9220:	d1bb      	bne.n	919a <_http_client_handle_header+0x2a>
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
	char *buffer = module->config.recv_buffer;
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9222:	464b      	mov	r3, r9
    9224:	1b1d      	subs	r5, r3, r4
    9226:	4455      	add	r5, sl

	if (remain > 0) {
    9228:	2d00      	cmp	r5, #0
    922a:	dd62      	ble.n	92f2 <_http_client_handle_header+0x182>
		memmove(buffer, base, remain);
    922c:	4b54      	ldr	r3, [pc, #336]	; (9380 <_http_client_handle_header+0x210>)
    922e:	002a      	movs	r2, r5
    9230:	0021      	movs	r1, r4
    9232:	4650      	mov	r0, sl
    9234:	4798      	blx	r3
			return 0;
    9236:	2300      	movs	r3, #0
		module->recved_size = remain;
    9238:	647d      	str	r5, [r7, #68]	; 0x44
			return 0;
    923a:	469b      	mov	fp, r3
    923c:	e7d5      	b.n	91ea <_http_client_handle_header+0x7a>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    923e:	220c      	movs	r2, #12
    9240:	4950      	ldr	r1, [pc, #320]	; (9384 <_http_client_handle_header+0x214>)
    9242:	0020      	movs	r0, r4
    9244:	47b0      	blx	r6
    9246:	2800      	cmp	r0, #0
    9248:	d12e      	bne.n	92a8 <_http_client_handle_header+0x138>
			char *type_ptr = ptr + strlen("Connection: ");
    924a:	0022      	movs	r2, r4
    924c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    924e:	4295      	cmp	r5, r2
    9250:	d9e0      	bls.n	9214 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    9252:	7b23      	ldrb	r3, [r4, #12]
    9254:	2b20      	cmp	r3, #32
    9256:	d00a      	beq.n	926e <_http_client_handle_header+0xfe>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    9258:	2220      	movs	r2, #32
    925a:	4393      	bics	r3, r2
    925c:	2b4b      	cmp	r3, #75	; 0x4b
    925e:	d010      	beq.n	9282 <_http_client_handle_header+0x112>
					module->permanent = 0;
    9260:	2241      	movs	r2, #65	; 0x41
    9262:	2102      	movs	r1, #2
    9264:	5cbb      	ldrb	r3, [r7, r2]
		ptr = ptr_line_end + strlen(new_line);
    9266:	1cac      	adds	r4, r5, #2
					module->permanent = 0;
    9268:	438b      	bics	r3, r1
    926a:	54bb      	strb	r3, [r7, r2]
    926c:	e7d3      	b.n	9216 <_http_client_handle_header+0xa6>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    926e:	3201      	adds	r2, #1
    9270:	4295      	cmp	r5, r2
    9272:	d0cf      	beq.n	9214 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    9274:	7813      	ldrb	r3, [r2, #0]
    9276:	2b20      	cmp	r3, #32
    9278:	d0f9      	beq.n	926e <_http_client_handle_header+0xfe>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    927a:	2220      	movs	r2, #32
    927c:	4393      	bics	r3, r2
    927e:	2b4b      	cmp	r3, #75	; 0x4b
    9280:	d1ee      	bne.n	9260 <_http_client_handle_header+0xf0>
					module->permanent = 1;
    9282:	2102      	movs	r1, #2
    9284:	3221      	adds	r2, #33	; 0x21
    9286:	5cbb      	ldrb	r3, [r7, r2]
		ptr = ptr_line_end + strlen(new_line);
    9288:	1cac      	adds	r4, r5, #2
					module->permanent = 1;
    928a:	430b      	orrs	r3, r1
    928c:	54bb      	strb	r3, [r7, r2]
    928e:	e7c2      	b.n	9216 <_http_client_handle_header+0xa6>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    9290:	0020      	movs	r0, r4
    9292:	4b3d      	ldr	r3, [pc, #244]	; (9388 <_http_client_handle_header+0x218>)
    9294:	3010      	adds	r0, #16
    9296:	4798      	blx	r3
    9298:	23dc      	movs	r3, #220	; 0xdc
    929a:	50f8      	str	r0, [r7, r3]
    929c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		ptr = ptr_line_end + strlen(new_line);
    929e:	1cac      	adds	r4, r5, #2
    92a0:	469a      	mov	sl, r3
    92a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    92a4:	4699      	mov	r9, r3
    92a6:	e7b6      	b.n	9216 <_http_client_handle_header+0xa6>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    92a8:	2205      	movs	r2, #5
    92aa:	4938      	ldr	r1, [pc, #224]	; (938c <_http_client_handle_header+0x21c>)
    92ac:	0020      	movs	r0, r4
    92ae:	47b0      	blx	r6
    92b0:	4683      	mov	fp, r0
    92b2:	2800      	cmp	r0, #0
    92b4:	d1ae      	bne.n	9214 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    92b6:	0020      	movs	r0, r4
    92b8:	4b33      	ldr	r3, [pc, #204]	; (9388 <_http_client_handle_header+0x218>)
    92ba:	3009      	adds	r0, #9
    92bc:	4798      	blx	r3
    92be:	23e4      	movs	r3, #228	; 0xe4
			module->resp.content_length = 0;
    92c0:	465a      	mov	r2, fp
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    92c2:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    92c4:	3b08      	subs	r3, #8
    92c6:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    92c8:	7963      	ldrb	r3, [r4, #5]
				module->permanent = 1;
    92ca:	2241      	movs	r2, #65	; 0x41
			if (ptr [5] > '1' || ptr[7] > '0') {
    92cc:	2b31      	cmp	r3, #49	; 0x31
    92ce:	d909      	bls.n	92e4 <_http_client_handle_header+0x174>
				module->permanent = 1;
    92d0:	2102      	movs	r1, #2
    92d2:	5cbb      	ldrb	r3, [r7, r2]
    92d4:	430b      	orrs	r3, r1
				module->permanent = 0;
    92d6:	54bb      	strb	r3, [r7, r2]
    92d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		ptr = ptr_line_end + strlen(new_line);
    92da:	1cac      	adds	r4, r5, #2
    92dc:	469a      	mov	sl, r3
    92de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    92e0:	4699      	mov	r9, r3
    92e2:	e798      	b.n	9216 <_http_client_handle_header+0xa6>
			if (ptr [5] > '1' || ptr[7] > '0') {
    92e4:	79e3      	ldrb	r3, [r4, #7]
    92e6:	2b30      	cmp	r3, #48	; 0x30
    92e8:	d8f2      	bhi.n	92d0 <_http_client_handle_header+0x160>
				module->permanent = 0;
    92ea:	2102      	movs	r1, #2
    92ec:	5cbb      	ldrb	r3, [r7, r2]
    92ee:	438b      	bics	r3, r1
    92f0:	e7f1      	b.n	92d6 <_http_client_handle_header+0x166>
	} else {
		module->recved_size = 0;
    92f2:	2300      	movs	r3, #0
    92f4:	647b      	str	r3, [r7, #68]	; 0x44
			return 0;
    92f6:	469b      	mov	fp, r3
    92f8:	e777      	b.n	91ea <_http_client_handle_header+0x7a>
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    92fa:	464b      	mov	r3, r9
			_http_client_move_buffer(module, ptr + strlen(new_line));
    92fc:	1ca1      	adds	r1, r4, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    92fe:	1a5c      	subs	r4, r3, r1
    9300:	4454      	add	r4, sl
	if (remain > 0) {
    9302:	2c00      	cmp	r4, #0
    9304:	dd22      	ble.n	934c <_http_client_handle_header+0x1dc>
		memmove(buffer, base, remain);
    9306:	0022      	movs	r2, r4
    9308:	4650      	mov	r0, sl
    930a:	4b1d      	ldr	r3, [pc, #116]	; (9380 <_http_client_handle_header+0x210>)
    930c:	4798      	blx	r3
		module->recved_size = remain;
    930e:	647c      	str	r4, [r7, #68]	; 0x44
			if (module->cb && module->resp.response_code) {
    9310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9312:	2b00      	cmp	r3, #0
    9314:	d014      	beq.n	9340 <_http_client_handle_header+0x1d0>
    9316:	22e4      	movs	r2, #228	; 0xe4
    9318:	5ab9      	ldrh	r1, [r7, r2]
    931a:	2900      	cmp	r1, #0
    931c:	d010      	beq.n	9340 <_http_client_handle_header+0x1d0>
				if (module->resp.content_length < 0) {
    931e:	3a08      	subs	r2, #8
    9320:	58b8      	ldr	r0, [r7, r2]
    9322:	2800      	cmp	r0, #0
    9324:	db14      	blt.n	9350 <_http_client_handle_header+0x1e0>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    9326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    9328:	4290      	cmp	r0, r2
    932a:	dd09      	ble.n	9340 <_http_client_handle_header+0x1d0>
					data.recv_response.response_code = module->resp.response_code;
    932c:	aa01      	add	r2, sp, #4
    932e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    9330:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    9332:	2100      	movs	r1, #0
					module->resp.read_length = 0;
    9334:	20e0      	movs	r0, #224	; 0xe0
					data.recv_response.content = NULL;
    9336:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    9338:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    933a:	3102      	adds	r1, #2
    933c:	0038      	movs	r0, r7
    933e:	4798      	blx	r3
			module->resp.state = STATE_PARSE_ENTITY;
    9340:	23d8      	movs	r3, #216	; 0xd8
    9342:	2201      	movs	r2, #1
    9344:	50fa      	str	r2, [r7, r3]
			return 1;
    9346:	3bd7      	subs	r3, #215	; 0xd7
    9348:	469b      	mov	fp, r3
    934a:	e74e      	b.n	91ea <_http_client_handle_header+0x7a>
		module->recved_size = 0;
    934c:	6478      	str	r0, [r7, #68]	; 0x44
    934e:	e7df      	b.n	9310 <_http_client_handle_header+0x1a0>
					data.recv_response.response_code = module->resp.response_code;
    9350:	aa01      	add	r2, sp, #4
    9352:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    9354:	2101      	movs	r1, #1
					module->resp.read_length = 0;
    9356:	20e0      	movs	r0, #224	; 0xe0
					data.recv_response.is_chunked = 1;
    9358:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    935a:	2100      	movs	r1, #0
    935c:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    935e:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    9360:	0038      	movs	r0, r7
    9362:	3102      	adds	r1, #2
    9364:	4798      	blx	r3
    9366:	e7eb      	b.n	9340 <_http_client_handle_header+0x1d0>
    9368:	00015830 	.word	0x00015830
    936c:	000141c9 	.word	0x000141c9
    9370:	00014159 	.word	0x00014159
    9374:	000155c8 	.word	0x000155c8
    9378:	000154d8 	.word	0x000154d8
    937c:	000089f1 	.word	0x000089f1
    9380:	00013c63 	.word	0x00013c63
    9384:	000154ec 	.word	0x000154ec
    9388:	00013bd5 	.word	0x00013bd5
    938c:	000154fc 	.word	0x000154fc

00009390 <_http_client_handle_entity>:
{
    9390:	b5f0      	push	{r4, r5, r6, r7, lr}
    9392:	46d6      	mov	lr, sl
    9394:	464f      	mov	r7, r9
    9396:	4646      	mov	r6, r8
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    9398:	23dc      	movs	r3, #220	; 0xdc
{
    939a:	b5c0      	push	{r6, r7, lr}
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    939c:	58c3      	ldr	r3, [r0, r3]
{
    939e:	b084      	sub	sp, #16
    93a0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    93a2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    93a4:	2b00      	cmp	r3, #0
    93a6:	da00      	bge.n	93aa <_http_client_handle_entity+0x1a>
    93a8:	e071      	b.n	948e <_http_client_handle_entity+0xfe>
    93aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
    93ac:	4293      	cmp	r3, r2
    93ae:	dc28      	bgt.n	9402 <_http_client_handle_entity+0x72>
		if ((int)module->recved_size >= module->resp.content_length) {
    93b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
	return 0;
    93b2:	2600      	movs	r6, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    93b4:	4293      	cmp	r3, r2
    93b6:	dc47      	bgt.n	9448 <_http_client_handle_entity+0xb8>
			if (module->cb && module->resp.response_code) {
    93b8:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    93ba:	2f00      	cmp	r7, #0
    93bc:	d00a      	beq.n	93d4 <_http_client_handle_entity+0x44>
    93be:	22e4      	movs	r2, #228	; 0xe4
    93c0:	5a81      	ldrh	r1, [r0, r2]
    93c2:	2900      	cmp	r1, #0
    93c4:	d006      	beq.n	93d4 <_http_client_handle_entity+0x44>
				data.recv_response.response_code = module->resp.response_code;
    93c6:	aa01      	add	r2, sp, #4
    93c8:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    93ca:	7096      	strb	r6, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    93cc:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    93ce:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    93d0:	2102      	movs	r1, #2
    93d2:	47b8      	blx	r7
			module->resp.state = STATE_PARSE_HEADER;
    93d4:	2300      	movs	r3, #0
    93d6:	22d8      	movs	r2, #216	; 0xd8
    93d8:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    93da:	320c      	adds	r2, #12
    93dc:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    93de:	3aa3      	subs	r2, #163	; 0xa3
    93e0:	5ca2      	ldrb	r2, [r4, r2]
    93e2:	0792      	lsls	r2, r2, #30
    93e4:	d549      	bpl.n	947a <_http_client_handle_entity+0xea>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    93e6:	22dc      	movs	r2, #220	; 0xdc
    93e8:	58a1      	ldr	r1, [r4, r2]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    93ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    93ec:	1869      	adds	r1, r5, r1
	char *buffer = module->config.recv_buffer;
    93ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    93f0:	1a56      	subs	r6, r2, r1
    93f2:	1986      	adds	r6, r0, r6
	if (remain > 0) {
    93f4:	2e00      	cmp	r6, #0
    93f6:	dd47      	ble.n	9488 <_http_client_handle_entity+0xf8>
		memmove(buffer, base, remain);
    93f8:	0032      	movs	r2, r6
    93fa:	4b81      	ldr	r3, [pc, #516]	; (9600 <_http_client_handle_entity+0x270>)
    93fc:	4798      	blx	r3
		module->recved_size = remain;
    93fe:	6466      	str	r6, [r4, #68]	; 0x44
    9400:	e022      	b.n	9448 <_http_client_handle_entity+0xb8>
			data.recv_chunked_data.length = module->recved_size;
    9402:	6c41      	ldr	r1, [r0, #68]	; 0x44
			module->resp.read_length += (int)module->recved_size;
    9404:	20e0      	movs	r0, #224	; 0xe0
    9406:	5822      	ldr	r2, [r4, r0]
			data.recv_chunked_data.length = module->recved_size;
    9408:	9101      	str	r1, [sp, #4]
			module->resp.read_length += (int)module->recved_size;
    940a:	188a      	adds	r2, r1, r2
			data.recv_chunked_data.data = buffer;
    940c:	9502      	str	r5, [sp, #8]
			module->resp.read_length += (int)module->recved_size;
    940e:	5022      	str	r2, [r4, r0]
			if (module->resp.content_length <= module->resp.read_length) {
    9410:	4293      	cmp	r3, r2
    9412:	dd20      	ble.n	9456 <_http_client_handle_entity+0xc6>
				data.recv_chunked_data.is_complete = 0;
    9414:	2300      	movs	r3, #0
    9416:	466a      	mov	r2, sp
    9418:	7313      	strb	r3, [r2, #12]
			if (module->cb) {
    941a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    941c:	2b00      	cmp	r3, #0
    941e:	d100      	bne.n	9422 <_http_client_handle_entity+0x92>
    9420:	e0ec      	b.n	95fc <_http_client_handle_entity+0x26c>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    9422:	aa01      	add	r2, sp, #4
    9424:	2103      	movs	r1, #3
    9426:	0020      	movs	r0, r4
    9428:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    942a:	466b      	mov	r3, sp
    942c:	7b1b      	ldrb	r3, [r3, #12]
    942e:	2b01      	cmp	r3, #1
    9430:	d01c      	beq.n	946c <_http_client_handle_entity+0xdc>
    9432:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9434:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9436:	1869      	adds	r1, r5, r1
    9438:	1b45      	subs	r5, r0, r5
	if (remain > 0) {
    943a:	2d00      	cmp	r5, #0
    943c:	dd23      	ble.n	9486 <_http_client_handle_entity+0xf6>
	return 0;
    943e:	2600      	movs	r6, #0
		memmove(buffer, base, remain);
    9440:	002a      	movs	r2, r5
    9442:	4b6f      	ldr	r3, [pc, #444]	; (9600 <_http_client_handle_entity+0x270>)
    9444:	4798      	blx	r3
		module->recved_size = remain;
    9446:	6465      	str	r5, [r4, #68]	; 0x44
}
    9448:	0030      	movs	r0, r6
    944a:	b004      	add	sp, #16
    944c:	bc1c      	pop	{r2, r3, r4}
    944e:	4690      	mov	r8, r2
    9450:	4699      	mov	r9, r3
    9452:	46a2      	mov	sl, r4
    9454:	bdf0      	pop	{r4, r5, r6, r7, pc}
				module->resp.state = STATE_PARSE_HEADER;
    9456:	2300      	movs	r3, #0
    9458:	22d8      	movs	r2, #216	; 0xd8
    945a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    945c:	320c      	adds	r2, #12
    945e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    9460:	466a      	mov	r2, sp
    9462:	3301      	adds	r3, #1
    9464:	7313      	strb	r3, [r2, #12]
			if (module->cb) {
    9466:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9468:	2b00      	cmp	r3, #0
    946a:	d1da      	bne.n	9422 <_http_client_handle_entity+0x92>
				if (module->permanent == 0) {
    946c:	2341      	movs	r3, #65	; 0x41
    946e:	5ce3      	ldrb	r3, [r4, r3]
    9470:	079b      	lsls	r3, r3, #30
    9472:	d4de      	bmi.n	9432 <_http_client_handle_entity+0xa2>
					printf("1\r\n");
    9474:	4863      	ldr	r0, [pc, #396]	; (9604 <_http_client_handle_entity+0x274>)
    9476:	4b64      	ldr	r3, [pc, #400]	; (9608 <_http_client_handle_entity+0x278>)
    9478:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    947a:	2100      	movs	r1, #0
    947c:	0020      	movs	r0, r4
    947e:	4b63      	ldr	r3, [pc, #396]	; (960c <_http_client_handle_entity+0x27c>)
    9480:	4798      	blx	r3
					return 0;
    9482:	2600      	movs	r6, #0
    9484:	e7e0      	b.n	9448 <_http_client_handle_entity+0xb8>
		module->recved_size = 0;
    9486:	2300      	movs	r3, #0
    9488:	6463      	str	r3, [r4, #68]	; 0x44
	return 0;
    948a:	2600      	movs	r6, #0
    948c:	e7dc      	b.n	9448 <_http_client_handle_entity+0xb8>
		if (module->resp.read_length >= 0) {
    948e:	23e0      	movs	r3, #224	; 0xe0
    9490:	4698      	mov	r8, r3
		memmove(buffer, base, remain);
    9492:	4b5b      	ldr	r3, [pc, #364]	; (9600 <_http_client_handle_entity+0x270>)
	int extension = 0;
    9494:	2700      	movs	r7, #0
		memmove(buffer, base, remain);
    9496:	4699      	mov	r9, r3
	int length = (int)module->recved_size;
    9498:	6c46      	ldr	r6, [r0, #68]	; 0x44
		if (module->resp.read_length >= 0) {
    949a:	4643      	mov	r3, r8
    949c:	58e1      	ldr	r1, [r4, r3]
    949e:	2900      	cmp	r1, #0
    94a0:	db27      	blt.n	94f2 <_http_client_handle_entity+0x162>
			if (module->resp.read_length == 0) {
    94a2:	2900      	cmp	r1, #0
    94a4:	d157      	bne.n	9556 <_http_client_handle_entity+0x1c6>
				module->resp.state = STATE_PARSE_HEADER;
    94a6:	23d8      	movs	r3, #216	; 0xd8
    94a8:	50e1      	str	r1, [r4, r3]
				module->resp.response_code = 0;
    94aa:	330c      	adds	r3, #12
    94ac:	52e1      	strh	r1, [r4, r3]
				data.recv_chunked_data.is_complete = 1;
    94ae:	aa01      	add	r2, sp, #4
    94b0:	3be3      	subs	r3, #227	; 0xe3
    94b2:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    94b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
				data.recv_chunked_data.length = 0;
    94b6:	9101      	str	r1, [sp, #4]
				data.recv_chunked_data.data = NULL;
    94b8:	6051      	str	r1, [r2, #4]
				if (module->cb) {
    94ba:	2b00      	cmp	r3, #0
    94bc:	d002      	beq.n	94c4 <_http_client_handle_entity+0x134>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    94be:	3103      	adds	r1, #3
    94c0:	0020      	movs	r0, r4
    94c2:	4798      	blx	r3
				if (module->permanent == 0) {
    94c4:	2341      	movs	r3, #65	; 0x41
    94c6:	5ce3      	ldrb	r3, [r4, r3]
    94c8:	079b      	lsls	r3, r3, #30
    94ca:	d400      	bmi.n	94ce <_http_client_handle_entity+0x13e>
    94cc:	e08b      	b.n	95e6 <_http_client_handle_entity+0x256>
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    94ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + 2);
    94d0:	1ca9      	adds	r1, r5, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    94d2:	1a5b      	subs	r3, r3, r1
    94d4:	469a      	mov	sl, r3
	char *buffer = module->config.recv_buffer;
    94d6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    94d8:	4482      	add	sl, r0
	if (remain > 0) {
    94da:	4653      	mov	r3, sl
    94dc:	2b00      	cmp	r3, #0
    94de:	dd7d      	ble.n	95dc <_http_client_handle_entity+0x24c>
		memmove(buffer, base, remain);
    94e0:	4b47      	ldr	r3, [pc, #284]	; (9600 <_http_client_handle_entity+0x270>)
    94e2:	4652      	mov	r2, sl
    94e4:	4798      	blx	r3
		module->recved_size = remain;
    94e6:	4653      	mov	r3, sl
    94e8:	6463      	str	r3, [r4, #68]	; 0x44
		if (module->resp.read_length >= 0) {
    94ea:	4643      	mov	r3, r8
    94ec:	58e1      	ldr	r1, [r4, r3]
    94ee:	2900      	cmp	r1, #0
    94f0:	dad7      	bge.n	94a2 <_http_client_handle_entity+0x112>
			module->resp.read_length = 0;
    94f2:	2300      	movs	r3, #0
    94f4:	4642      	mov	r2, r8
    94f6:	50a3      	str	r3, [r4, r2]
			for (; length > 0; buffer++, length--) {
    94f8:	2e00      	cmp	r6, #0
    94fa:	dd72      	ble.n	95e2 <_http_client_handle_entity+0x252>
				if (*buffer == '\n') {
    94fc:	782b      	ldrb	r3, [r5, #0]
    94fe:	2200      	movs	r2, #0
    9500:	2b0a      	cmp	r3, #10
    9502:	d10c      	bne.n	951e <_http_client_handle_entity+0x18e>
    9504:	e047      	b.n	9596 <_http_client_handle_entity+0x206>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    9506:	0112      	lsls	r2, r2, #4
    9508:	18d2      	adds	r2, r2, r3
    950a:	4643      	mov	r3, r8
    950c:	3a30      	subs	r2, #48	; 0x30
    950e:	50e2      	str	r2, [r4, r3]
			for (; length > 0; buffer++, length--) {
    9510:	3e01      	subs	r6, #1
    9512:	3501      	adds	r5, #1
    9514:	2e00      	cmp	r6, #0
    9516:	d015      	beq.n	9544 <_http_client_handle_entity+0x1b4>
				if (*buffer == '\n') {
    9518:	782b      	ldrb	r3, [r5, #0]
    951a:	2b0a      	cmp	r3, #10
    951c:	d03b      	beq.n	9596 <_http_client_handle_entity+0x206>
				if (extension != 0) {
    951e:	2f00      	cmp	r7, #0
    9520:	d1f6      	bne.n	9510 <_http_client_handle_entity+0x180>
				if (*buffer >= '0' && *buffer <= '9') {
    9522:	0019      	movs	r1, r3
    9524:	3930      	subs	r1, #48	; 0x30
    9526:	2909      	cmp	r1, #9
    9528:	d9ed      	bls.n	9506 <_http_client_handle_entity+0x176>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    952a:	0019      	movs	r1, r3
    952c:	3961      	subs	r1, #97	; 0x61
    952e:	2905      	cmp	r1, #5
    9530:	d846      	bhi.n	95c0 <_http_client_handle_entity+0x230>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    9532:	0112      	lsls	r2, r2, #4
    9534:	18d2      	adds	r2, r2, r3
    9536:	4643      	mov	r3, r8
    9538:	3a61      	subs	r2, #97	; 0x61
			for (; length > 0; buffer++, length--) {
    953a:	3e01      	subs	r6, #1
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    953c:	50e2      	str	r2, [r4, r3]
			for (; length > 0; buffer++, length--) {
    953e:	3501      	adds	r5, #1
    9540:	2e00      	cmp	r6, #0
    9542:	d1e9      	bne.n	9518 <_http_client_handle_entity+0x188>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    9544:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9546:	4293      	cmp	r3, r2
    9548:	db52      	blt.n	95f0 <_http_client_handle_entity+0x260>
				module->resp.read_length = -1;
    954a:	2201      	movs	r2, #1
    954c:	23e0      	movs	r3, #224	; 0xe0
    954e:	4252      	negs	r2, r2
    9550:	50e2      	str	r2, [r4, r3]
	return 0;
    9552:	2600      	movs	r6, #0
    9554:	e778      	b.n	9448 <_http_client_handle_entity+0xb8>
			} else if (module->resp.read_length <= length) {
    9556:	42b1      	cmp	r1, r6
    9558:	dc24      	bgt.n	95a4 <_http_client_handle_entity+0x214>
				data.recv_chunked_data.is_complete = 0;
    955a:	2300      	movs	r3, #0
				data.recv_chunked_data.length = module->resp.read_length;
    955c:	aa01      	add	r2, sp, #4
				data.recv_chunked_data.is_complete = 0;
    955e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    9560:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
				data.recv_chunked_data.length = module->resp.read_length;
    9562:	9101      	str	r1, [sp, #4]
				data.recv_chunked_data.data = buffer;
    9564:	6055      	str	r5, [r2, #4]
				if (module->cb) {
    9566:	2b00      	cmp	r3, #0
    9568:	d004      	beq.n	9574 <_http_client_handle_entity+0x1e4>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    956a:	2103      	movs	r1, #3
    956c:	0020      	movs	r0, r4
    956e:	4798      	blx	r3
    9570:	4643      	mov	r3, r8
    9572:	58e1      	ldr	r1, [r4, r3]
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    9574:	3102      	adds	r1, #2
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    9576:	6c63      	ldr	r3, [r4, #68]	; 0x44
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    9578:	1869      	adds	r1, r5, r1
	char *buffer = module->config.recv_buffer;
    957a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    957c:	1a5e      	subs	r6, r3, r1
    957e:	1986      	adds	r6, r0, r6
	if (remain > 0) {
    9580:	2e00      	cmp	r6, #0
    9582:	dd15      	ble.n	95b0 <_http_client_handle_entity+0x220>
		memmove(buffer, base, remain);
    9584:	0032      	movs	r2, r6
    9586:	47c8      	blx	r9
				module->resp.read_length = -1;
    9588:	2301      	movs	r3, #1
    958a:	4642      	mov	r2, r8
    958c:	425b      	negs	r3, r3
		module->recved_size = remain;
    958e:	6466      	str	r6, [r4, #68]	; 0x44
    9590:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    9592:	50a3      	str	r3, [r4, r2]
    9594:	e781      	b.n	949a <_http_client_handle_entity+0x10a>
					buffer++;
    9596:	3501      	adds	r5, #1
					length--;
    9598:	3e01      	subs	r6, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    959a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    959c:	4293      	cmp	r3, r2
    959e:	db27      	blt.n	95f0 <_http_client_handle_entity+0x260>
			if (length  == 0) {
    95a0:	2e00      	cmp	r6, #0
    95a2:	d0d2      	beq.n	954a <_http_client_handle_entity+0x1ba>
    95a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
	} while(module->recved_size > 0);
    95a6:	2b00      	cmp	r3, #0
    95a8:	d000      	beq.n	95ac <_http_client_handle_entity+0x21c>
    95aa:	e776      	b.n	949a <_http_client_handle_entity+0x10a>
	return 0;
    95ac:	2600      	movs	r6, #0
    95ae:	e74b      	b.n	9448 <_http_client_handle_entity+0xb8>
		module->recved_size = 0;
    95b0:	2300      	movs	r3, #0
				module->resp.read_length = -1;
    95b2:	2201      	movs	r2, #1
		module->recved_size = 0;
    95b4:	6463      	str	r3, [r4, #68]	; 0x44
				module->resp.read_length = -1;
    95b6:	4252      	negs	r2, r2
    95b8:	33e0      	adds	r3, #224	; 0xe0
    95ba:	50e2      	str	r2, [r4, r3]
	return 0;
    95bc:	2600      	movs	r6, #0
    95be:	e743      	b.n	9448 <_http_client_handle_entity+0xb8>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    95c0:	0019      	movs	r1, r3
    95c2:	3941      	subs	r1, #65	; 0x41
    95c4:	2905      	cmp	r1, #5
    95c6:	d805      	bhi.n	95d4 <_http_client_handle_entity+0x244>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    95c8:	0112      	lsls	r2, r2, #4
    95ca:	18d2      	adds	r2, r2, r3
    95cc:	4643      	mov	r3, r8
    95ce:	3a41      	subs	r2, #65	; 0x41
    95d0:	50e2      	str	r2, [r4, r3]
    95d2:	e79d      	b.n	9510 <_http_client_handle_entity+0x180>
				} else if (*buffer == ';') {
    95d4:	3b3b      	subs	r3, #59	; 0x3b
    95d6:	425f      	negs	r7, r3
    95d8:	415f      	adcs	r7, r3
    95da:	e799      	b.n	9510 <_http_client_handle_entity+0x180>
		module->recved_size = 0;
    95dc:	2300      	movs	r3, #0
    95de:	6463      	str	r3, [r4, #68]	; 0x44
    95e0:	e7b7      	b.n	9552 <_http_client_handle_entity+0x1c2>
			for (; length > 0; buffer++, length--) {
    95e2:	2200      	movs	r2, #0
    95e4:	e7d9      	b.n	959a <_http_client_handle_entity+0x20a>
					_http_client_clear_conn(module, 0);
    95e6:	2100      	movs	r1, #0
    95e8:	0020      	movs	r0, r4
    95ea:	4b08      	ldr	r3, [pc, #32]	; (960c <_http_client_handle_entity+0x27c>)
    95ec:	4798      	blx	r3
    95ee:	e7b0      	b.n	9552 <_http_client_handle_entity+0x1c2>
				_http_client_clear_conn(module, -EOVERFLOW);
    95f0:	218b      	movs	r1, #139	; 0x8b
    95f2:	0020      	movs	r0, r4
    95f4:	4249      	negs	r1, r1
    95f6:	4b05      	ldr	r3, [pc, #20]	; (960c <_http_client_handle_entity+0x27c>)
    95f8:	4798      	blx	r3
    95fa:	e7aa      	b.n	9552 <_http_client_handle_entity+0x1c2>
			if (module->cb) {
    95fc:	0028      	movs	r0, r5
    95fe:	e71a      	b.n	9436 <_http_client_handle_entity+0xa6>
    9600:	00013c63 	.word	0x00013c63
    9604:	000154d4 	.word	0x000154d4
    9608:	00013f05 	.word	0x00013f05
    960c:	000089f1 	.word	0x000089f1

00009610 <_http_client_handle_response>:
	switch(module->resp.state) {
    9610:	23d8      	movs	r3, #216	; 0xd8
{
    9612:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    9614:	58c3      	ldr	r3, [r0, r3]
    9616:	2b00      	cmp	r3, #0
    9618:	d006      	beq.n	9628 <_http_client_handle_response+0x18>
    961a:	2b01      	cmp	r3, #1
    961c:	d001      	beq.n	9622 <_http_client_handle_response+0x12>
	return 0;
    961e:	2000      	movs	r0, #0
}
    9620:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    9622:	4b03      	ldr	r3, [pc, #12]	; (9630 <_http_client_handle_response+0x20>)
    9624:	4798      	blx	r3
    9626:	e7fb      	b.n	9620 <_http_client_handle_response+0x10>
		return _http_client_handle_header(module);
    9628:	4b02      	ldr	r3, [pc, #8]	; (9634 <_http_client_handle_response+0x24>)
    962a:	4798      	blx	r3
    962c:	e7f8      	b.n	9620 <_http_client_handle_response+0x10>
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	00009391 	.word	0x00009391
    9634:	00009171 	.word	0x00009171

00009638 <_http_client_recved_packet>:
{
    9638:	b570      	push	{r4, r5, r6, lr}
	module->recved_size += read_len;
    963a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    963c:	0004      	movs	r4, r0
	module->recved_size += read_len;
    963e:	469c      	mov	ip, r3
	if (module->config.timeout > 0) {
    9640:	2358      	movs	r3, #88	; 0x58
	module->recved_size += read_len;
    9642:	4461      	add	r1, ip
    9644:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    9646:	5ac3      	ldrh	r3, [r0, r3]
    9648:	2b00      	cmp	r3, #0
    964a:	d105      	bne.n	9658 <_http_client_recved_packet+0x20>
    964c:	4d05      	ldr	r5, [pc, #20]	; (9664 <_http_client_recved_packet+0x2c>)
	while(_http_client_handle_response(module) != 0);
    964e:	0020      	movs	r0, r4
    9650:	47a8      	blx	r5
    9652:	2800      	cmp	r0, #0
    9654:	d1fb      	bne.n	964e <_http_client_recved_packet+0x16>
}
    9656:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    9658:	6c81      	ldr	r1, [r0, #72]	; 0x48
    965a:	4b03      	ldr	r3, [pc, #12]	; (9668 <_http_client_recved_packet+0x30>)
    965c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    965e:	4798      	blx	r3
    9660:	e7f4      	b.n	964c <_http_client_recved_packet+0x14>
    9662:	46c0      	nop			; (mov r8, r8)
    9664:	00009611 	.word	0x00009611
    9668:	000099d1 	.word	0x000099d1

0000966c <http_client_socket_event_handler>:
{
    966c:	b510      	push	{r4, lr}
	struct http_client_module *module = module_ref_inst[sock];
    966e:	4b5d      	ldr	r3, [pc, #372]	; (97e4 <http_client_socket_event_handler+0x178>)
    9670:	0080      	lsls	r0, r0, #2
    9672:	58c4      	ldr	r4, [r0, r3]
{
    9674:	b084      	sub	sp, #16
	if (module == NULL) {
    9676:	2c00      	cmp	r4, #0
    9678:	d005      	beq.n	9686 <http_client_socket_event_handler+0x1a>
	switch (msg_type) {
    967a:	2906      	cmp	r1, #6
    967c:	d02d      	beq.n	96da <http_client_socket_event_handler+0x6e>
    967e:	2907      	cmp	r1, #7
    9680:	d003      	beq.n	968a <http_client_socket_event_handler+0x1e>
    9682:	2905      	cmp	r1, #5
    9684:	d00e      	beq.n	96a4 <http_client_socket_event_handler+0x38>
}
    9686:	b004      	add	sp, #16
    9688:	bd10      	pop	{r4, pc}
		send_ret = *(int16_t*)msg_data;
    968a:	2300      	movs	r3, #0
    968c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    968e:	2b00      	cmp	r3, #0
    9690:	db37      	blt.n	9702 <http_client_socket_event_handler+0x96>
    		_http_client_request(module);
    9692:	0020      	movs	r0, r4
    9694:	4b54      	ldr	r3, [pc, #336]	; (97e8 <http_client_socket_event_handler+0x17c>)
    9696:	4798      	blx	r3
		module->sending = 0;
    9698:	2241      	movs	r2, #65	; 0x41
    969a:	2101      	movs	r1, #1
    969c:	5ca3      	ldrb	r3, [r4, r2]
    969e:	438b      	bics	r3, r1
    96a0:	54a3      	strb	r3, [r4, r2]
    	break;
    96a2:	e7f0      	b.n	9686 <http_client_socket_event_handler+0x1a>
    	data.sock_connected.result = msg_connect->s8Error;
    96a4:	2301      	movs	r3, #1
    96a6:	56d3      	ldrsb	r3, [r2, r3]
    96a8:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    96aa:	2b00      	cmp	r3, #0
    96ac:	db31      	blt.n	9712 <http_client_socket_event_handler+0xa6>
			if (module->cb != NULL) {
    96ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    96b0:	2b00      	cmp	r3, #0
    96b2:	d003      	beq.n	96bc <http_client_socket_event_handler+0x50>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    96b4:	aa01      	add	r2, sp, #4
    96b6:	2100      	movs	r1, #0
    96b8:	0020      	movs	r0, r4
    96ba:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    96bc:	2303      	movs	r3, #3
    96be:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    96c0:	3355      	adds	r3, #85	; 0x55
    96c2:	5ae2      	ldrh	r2, [r4, r3]
    96c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    96c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    96c8:	4b48      	ldr	r3, [pc, #288]	; (97ec <http_client_socket_event_handler+0x180>)
    96ca:	4798      	blx	r3
    		_http_client_recv_packet(module);
    96cc:	0020      	movs	r0, r4
    96ce:	4b48      	ldr	r3, [pc, #288]	; (97f0 <http_client_socket_event_handler+0x184>)
    96d0:	4798      	blx	r3
			_http_client_request(module);
    96d2:	0020      	movs	r0, r4
    96d4:	4b44      	ldr	r3, [pc, #272]	; (97e8 <http_client_socket_event_handler+0x17c>)
    96d6:	4798      	blx	r3
    96d8:	e7d5      	b.n	9686 <http_client_socket_event_handler+0x1a>
    	if (msg_recv->s16BufferSize > 0) {
    96da:	2304      	movs	r3, #4
    96dc:	5ed1      	ldrsh	r1, [r2, r3]
    96de:	2900      	cmp	r1, #0
    96e0:	dd06      	ble.n	96f0 <http_client_socket_event_handler+0x84>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    96e2:	0020      	movs	r0, r4
    96e4:	4b43      	ldr	r3, [pc, #268]	; (97f4 <http_client_socket_event_handler+0x188>)
    96e6:	4798      	blx	r3
		_http_client_recv_packet(module);
    96e8:	0020      	movs	r0, r4
    96ea:	4b41      	ldr	r3, [pc, #260]	; (97f0 <http_client_socket_event_handler+0x184>)
    96ec:	4798      	blx	r3
		break;
    96ee:	e7ca      	b.n	9686 <http_client_socket_event_handler+0x1a>
	switch (err) {
    96f0:	000b      	movs	r3, r1
    96f2:	330e      	adds	r3, #14
    96f4:	b29b      	uxth	r3, r3
    96f6:	2b0e      	cmp	r3, #14
    96f8:	d823      	bhi.n	9742 <http_client_socket_event_handler+0xd6>
    96fa:	4a3f      	ldr	r2, [pc, #252]	; (97f8 <http_client_socket_event_handler+0x18c>)
    96fc:	009b      	lsls	r3, r3, #2
    96fe:	58d3      	ldr	r3, [r2, r3]
    9700:	469f      	mov	pc, r3
    9702:	330e      	adds	r3, #14
    9704:	b29b      	uxth	r3, r3
    9706:	2b0d      	cmp	r3, #13
    9708:	d80c      	bhi.n	9724 <http_client_socket_event_handler+0xb8>
    970a:	4a3c      	ldr	r2, [pc, #240]	; (97fc <http_client_socket_event_handler+0x190>)
    970c:	009b      	lsls	r3, r3, #2
    970e:	58d3      	ldr	r3, [r2, r3]
    9710:	469f      	mov	pc, r3
    9712:	001a      	movs	r2, r3
    9714:	320e      	adds	r2, #14
    9716:	b2d2      	uxtb	r2, r2
    9718:	2a0d      	cmp	r2, #13
    971a:	d85f      	bhi.n	97dc <http_client_socket_event_handler+0x170>
    971c:	4938      	ldr	r1, [pc, #224]	; (9800 <http_client_socket_event_handler+0x194>)
    971e:	0092      	lsls	r2, r2, #2
    9720:	588a      	ldr	r2, [r1, r2]
    9722:	4697      	mov	pc, r2
			return -EIO;
    9724:	2105      	movs	r1, #5
    9726:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    9728:	0020      	movs	r0, r4
    972a:	4b36      	ldr	r3, [pc, #216]	; (9804 <http_client_socket_event_handler+0x198>)
    972c:	4798      	blx	r3
    972e:	e7b3      	b.n	9698 <http_client_socket_event_handler+0x2c>
			return -ENOMEM;
    9730:	210c      	movs	r1, #12
    9732:	4249      	negs	r1, r1
    9734:	e7f8      	b.n	9728 <http_client_socket_event_handler+0xbc>
    9736:	210c      	movs	r1, #12
    9738:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    973a:	0020      	movs	r0, r4
    973c:	4b31      	ldr	r3, [pc, #196]	; (9804 <http_client_socket_event_handler+0x198>)
    973e:	4798      	blx	r3
    9740:	e7d2      	b.n	96e8 <http_client_socket_event_handler+0x7c>
			if (err < 0) {
    9742:	2900      	cmp	r1, #0
    9744:	d0f9      	beq.n	973a <http_client_socket_event_handler+0xce>
				return -EIO;
    9746:	2105      	movs	r1, #5
    9748:	4249      	negs	r1, r1
    974a:	e7f6      	b.n	973a <http_client_socket_event_handler+0xce>
			return -EDESTADDRREQ;
    974c:	2179      	movs	r1, #121	; 0x79
    974e:	4249      	negs	r1, r1
    9750:	e7f3      	b.n	973a <http_client_socket_event_handler+0xce>
			return -EADDRINUSE;
    9752:	2170      	movs	r1, #112	; 0x70
    9754:	4249      	negs	r1, r1
    9756:	e7e7      	b.n	9728 <http_client_socket_event_handler+0xbc>
			return -EINVAL;
    9758:	2116      	movs	r1, #22
    975a:	4249      	negs	r1, r1
    975c:	e7e4      	b.n	9728 <http_client_socket_event_handler+0xbc>
    975e:	2116      	movs	r1, #22
    9760:	4249      	negs	r1, r1
    9762:	e7ea      	b.n	973a <http_client_socket_event_handler+0xce>
			return -ECONNRESET;
    9764:	2168      	movs	r1, #104	; 0x68
    9766:	4249      	negs	r1, r1
    9768:	e7e7      	b.n	973a <http_client_socket_event_handler+0xce>
			return -EAGAIN;
    976a:	210b      	movs	r1, #11
    976c:	4249      	negs	r1, r1
    976e:	e7e4      	b.n	973a <http_client_socket_event_handler+0xce>
			return -EBUSY; /* HW error occurred. Retry it*/
    9770:	2110      	movs	r1, #16
    9772:	4249      	negs	r1, r1
    9774:	e7e1      	b.n	973a <http_client_socket_event_handler+0xce>
			return -EDESTADDRREQ;
    9776:	2179      	movs	r1, #121	; 0x79
    9778:	4249      	negs	r1, r1
    977a:	e7d5      	b.n	9728 <http_client_socket_event_handler+0xbc>
			return -ECONNRESET;
    977c:	2168      	movs	r1, #104	; 0x68
    977e:	4249      	negs	r1, r1
    9780:	e7d2      	b.n	9728 <http_client_socket_event_handler+0xbc>
			return -EAGAIN;
    9782:	210b      	movs	r1, #11
    9784:	4249      	negs	r1, r1
    9786:	e7cf      	b.n	9728 <http_client_socket_event_handler+0xbc>
			return -EBUSY; /* HW error occurred. Retry it*/
    9788:	2110      	movs	r1, #16
    978a:	4249      	negs	r1, r1
    978c:	e7cc      	b.n	9728 <http_client_socket_event_handler+0xbc>
			return -EADDRINUSE;
    978e:	2170      	movs	r1, #112	; 0x70
    9790:	4249      	negs	r1, r1
    9792:	e7d2      	b.n	973a <http_client_socket_event_handler+0xce>
			return -ENOENT;
    9794:	2102      	movs	r1, #2
    9796:	4249      	negs	r1, r1
    9798:	e7cf      	b.n	973a <http_client_socket_event_handler+0xce>
			return -ENOMEM;
    979a:	210c      	movs	r1, #12
    979c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    979e:	0020      	movs	r0, r4
    97a0:	4b18      	ldr	r3, [pc, #96]	; (9804 <http_client_socket_event_handler+0x198>)
    97a2:	4798      	blx	r3
    97a4:	e76f      	b.n	9686 <http_client_socket_event_handler+0x1a>
			return -ENOENT;
    97a6:	2102      	movs	r1, #2
    97a8:	4249      	negs	r1, r1
    97aa:	e7bd      	b.n	9728 <http_client_socket_event_handler+0xbc>
				return -EIO;
    97ac:	2105      	movs	r1, #5
    97ae:	4249      	negs	r1, r1
    97b0:	e7f5      	b.n	979e <http_client_socket_event_handler+0x132>
			return -EINVAL;
    97b2:	2116      	movs	r1, #22
    97b4:	4249      	negs	r1, r1
    97b6:	e7f2      	b.n	979e <http_client_socket_event_handler+0x132>
			return -EDESTADDRREQ;
    97b8:	2179      	movs	r1, #121	; 0x79
    97ba:	4249      	negs	r1, r1
    97bc:	e7ef      	b.n	979e <http_client_socket_event_handler+0x132>
			return -EADDRINUSE;
    97be:	2170      	movs	r1, #112	; 0x70
    97c0:	4249      	negs	r1, r1
    97c2:	e7ec      	b.n	979e <http_client_socket_event_handler+0x132>
			return -ENOENT;
    97c4:	2102      	movs	r1, #2
    97c6:	4249      	negs	r1, r1
    97c8:	e7e9      	b.n	979e <http_client_socket_event_handler+0x132>
			return -ECONNRESET;
    97ca:	2168      	movs	r1, #104	; 0x68
    97cc:	4249      	negs	r1, r1
    97ce:	e7e6      	b.n	979e <http_client_socket_event_handler+0x132>
			return -EAGAIN;
    97d0:	210b      	movs	r1, #11
    97d2:	4249      	negs	r1, r1
    97d4:	e7e3      	b.n	979e <http_client_socket_event_handler+0x132>
			return -EBUSY; /* HW error occurred. Retry it*/
    97d6:	2110      	movs	r1, #16
    97d8:	4249      	negs	r1, r1
    97da:	e7e0      	b.n	979e <http_client_socket_event_handler+0x132>
			if (err < 0) {
    97dc:	2b00      	cmp	r3, #0
    97de:	dbe5      	blt.n	97ac <http_client_socket_event_handler+0x140>
			return 0;
    97e0:	2100      	movs	r1, #0
    97e2:	e7dc      	b.n	979e <http_client_socket_event_handler+0x132>
    97e4:	200003f0 	.word	0x200003f0
    97e8:	00008b11 	.word	0x00008b11
    97ec:	000099a5 	.word	0x000099a5
    97f0:	00009139 	.word	0x00009139
    97f4:	00009639 	.word	0x00009639
    97f8:	00015418 	.word	0x00015418
    97fc:	00015454 	.word	0x00015454
    9800:	0001548c 	.word	0x0001548c
    9804:	000089f1 	.word	0x000089f1

00009808 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    9808:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
	writer->written = 0;
    980a:	2200      	movs	r2, #0
	writer->write_func = func;
    980c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    980e:	9b00      	ldr	r3, [sp, #0]
	writer->buffer = buffer;
    9810:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    9812:	6042      	str	r2, [r0, #4]
	writer->priv_data = priv_data;
    9814:	60c3      	str	r3, [r0, #12]
}
    9816:	4770      	bx	lr

00009818 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    9818:	b570      	push	{r4, r5, r6, lr}
	int remain = writer->max_size - writer->written;
    981a:	6842      	ldr	r2, [r0, #4]
    981c:	6803      	ldr	r3, [r0, #0]
{
    981e:	0004      	movs	r4, r0
    9820:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    9822:	1a9b      	subs	r3, r3, r2
	
	if (remain < 1) {
    9824:	2b00      	cmp	r3, #0
    9826:	dd04      	ble.n	9832 <stream_writer_send_8+0x1a>
    9828:	1c56      	adds	r6, r2, #1
		stream_writer_send_remain(writer);
	}
	
	writer->buffer[writer->written++] = (char)value;
    982a:	6923      	ldr	r3, [r4, #16]
    982c:	6066      	str	r6, [r4, #4]
    982e:	549d      	strb	r5, [r3, r2]
}
    9830:	bd70      	pop	{r4, r5, r6, pc}
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
	if(writer->written > 0) {
    9832:	2601      	movs	r6, #1
    9834:	2a00      	cmp	r2, #0
    9836:	d0f8      	beq.n	982a <stream_writer_send_8+0x12>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    9838:	6901      	ldr	r1, [r0, #16]
    983a:	68a3      	ldr	r3, [r4, #8]
    983c:	68c0      	ldr	r0, [r0, #12]
    983e:	4798      	blx	r3
    9840:	2200      	movs	r2, #0
    9842:	e7f2      	b.n	982a <stream_writer_send_8+0x12>

00009844 <stream_writer_send_buffer>:
{
    9844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9846:	0006      	movs	r6, r0
    9848:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    984a:	2a00      	cmp	r2, #0
    984c:	d008      	beq.n	9860 <stream_writer_send_buffer+0x1c>
    984e:	4f05      	ldr	r7, [pc, #20]	; (9864 <stream_writer_send_buffer+0x20>)
    9850:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    9852:	2100      	movs	r1, #0
    9854:	0030      	movs	r0, r6
    9856:	5661      	ldrsb	r1, [r4, r1]
	for (; length > 0; length--, buffer++) {
    9858:	3401      	adds	r4, #1
		stream_writer_send_8(writer, *buffer);
    985a:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    985c:	42a5      	cmp	r5, r4
    985e:	d1f8      	bne.n	9852 <stream_writer_send_buffer+0xe>
}
    9860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	00009819 	.word	0x00009819

00009868 <stream_writer_send_remain>:
{
    9868:	b510      	push	{r4, lr}
	if(writer->written > 0) {
    986a:	6842      	ldr	r2, [r0, #4]
{
    986c:	0004      	movs	r4, r0
	if(writer->written > 0) {
    986e:	2a00      	cmp	r2, #0
    9870:	d005      	beq.n	987e <stream_writer_send_remain+0x16>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    9872:	6901      	ldr	r1, [r0, #16]
    9874:	68a3      	ldr	r3, [r4, #8]
    9876:	68c0      	ldr	r0, [r0, #12]
    9878:	4798      	blx	r3
		writer->written = 0;
    987a:	2300      	movs	r3, #0
    987c:	6063      	str	r3, [r4, #4]
	}
}
    987e:	bd10      	pop	{r4, pc}

00009880 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    9880:	4a02      	ldr	r2, [pc, #8]	; (988c <sw_timer_tcc_callback+0xc>)
    9882:	6813      	ldr	r3, [r2, #0]
    9884:	3301      	adds	r3, #1
    9886:	6013      	str	r3, [r2, #0]
}
    9888:	4770      	bx	lr
    988a:	46c0      	nop			; (mov r8, r8)
    988c:	2000040c 	.word	0x2000040c

00009890 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    9890:	2364      	movs	r3, #100	; 0x64
    9892:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    9894:	2300      	movs	r3, #0
    9896:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    9898:	7043      	strb	r3, [r0, #1]
}
    989a:	4770      	bx	lr

0000989c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    989c:	b5f0      	push	{r4, r5, r6, r7, lr}
    989e:	46c6      	mov	lr, r8
    98a0:	b500      	push	{lr}
    98a2:	b0ac      	sub	sp, #176	; 0xb0
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    98a4:	466a      	mov	r2, sp
{
    98a6:	000d      	movs	r5, r1
	Tcc *hw[] = TCC_INSTS;
    98a8:	466e      	mov	r6, sp
    98aa:	4b1c      	ldr	r3, [pc, #112]	; (991c <sw_timer_init+0x80>)
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    98ac:	3028      	adds	r0, #40	; 0x28
	Tcc *hw[] = TCC_INSTS;
    98ae:	cb92      	ldmia	r3!, {r1, r4, r7}
    98b0:	c292      	stmia	r2!, {r1, r4, r7}
	module_inst->accuracy = config->accuracy;
    98b2:	886b      	ldrh	r3, [r5, #2]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    98b4:	0017      	movs	r7, r2
	module_inst->accuracy = config->accuracy;
    98b6:	6403      	str	r3, [r0, #64]	; 0x40
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    98b8:	782b      	ldrb	r3, [r5, #0]
	tcc_module = &module_inst->tcc_inst;
    98ba:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    98bc:	009b      	lsls	r3, r3, #2
    98be:	0010      	movs	r0, r2
    98c0:	5999      	ldr	r1, [r3, r6]
    98c2:	4b17      	ldr	r3, [pc, #92]	; (9920 <sw_timer_init+0x84>)
    98c4:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    98c6:	4b17      	ldr	r3, [pc, #92]	; (9924 <sw_timer_init+0x88>)
    98c8:	2000      	movs	r0, #0
    98ca:	4798      	blx	r3
    98cc:	4b16      	ldr	r3, [pc, #88]	; (9928 <sw_timer_init+0x8c>)
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    98ce:	8869      	ldrh	r1, [r5, #2]
    98d0:	7a1b      	ldrb	r3, [r3, #8]
    98d2:	40d8      	lsrs	r0, r3
    98d4:	4680      	mov	r8, r0
    98d6:	20fa      	movs	r0, #250	; 0xfa
    98d8:	4b14      	ldr	r3, [pc, #80]	; (992c <sw_timer_init+0x90>)
    98da:	0200      	lsls	r0, r0, #8
    98dc:	4798      	blx	r3
    98de:	4b14      	ldr	r3, [pc, #80]	; (9930 <sw_timer_init+0x94>)
    98e0:	0001      	movs	r1, r0
    98e2:	4640      	mov	r0, r8
    98e4:	4798      	blx	r3
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    98e6:	2305      	movs	r3, #5
    98e8:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    98ea:	782b      	ldrb	r3, [r5, #0]
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    98ec:	6078      	str	r0, [r7, #4]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    98ee:	009b      	lsls	r3, r3, #2
    98f0:	5999      	ldr	r1, [r3, r6]
    98f2:	003a      	movs	r2, r7
    98f4:	0020      	movs	r0, r4
    98f6:	4b0f      	ldr	r3, [pc, #60]	; (9934 <sw_timer_init+0x98>)
    98f8:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    98fa:	786a      	ldrb	r2, [r5, #1]
    98fc:	490e      	ldr	r1, [pc, #56]	; (9938 <sw_timer_init+0x9c>)
    98fe:	3208      	adds	r2, #8
    9900:	b2d2      	uxtb	r2, r2
    9902:	0020      	movs	r0, r4
    9904:	4b0d      	ldr	r3, [pc, #52]	; (993c <sw_timer_init+0xa0>)
    9906:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    9908:	7869      	ldrb	r1, [r5, #1]
    990a:	0020      	movs	r0, r4
    990c:	3108      	adds	r1, #8
    990e:	b2c9      	uxtb	r1, r1
    9910:	4b0b      	ldr	r3, [pc, #44]	; (9940 <sw_timer_init+0xa4>)
    9912:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    9914:	b02c      	add	sp, #176	; 0xb0
    9916:	bc04      	pop	{r2}
    9918:	4690      	mov	r8, r2
    991a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    991c:	000155fc 	.word	0x000155fc
    9920:	0000828d 	.word	0x0000828d
    9924:	000105b5 	.word	0x000105b5
    9928:	40000400 	.word	0x40000400
    992c:	000139bd 	.word	0x000139bd
    9930:	000138a9 	.word	0x000138a9
    9934:	000083f1 	.word	0x000083f1
    9938:	00009881 	.word	0x00009881
    993c:	000087d9 	.word	0x000087d9
    9940:	000087f1 	.word	0x000087f1

00009944 <sw_timer_enable>:
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    9944:	2102      	movs	r1, #2
    9946:	6a82      	ldr	r2, [r0, #40]	; 0x28
    9948:	6893      	ldr	r3, [r2, #8]
    994a:	4219      	tst	r1, r3
    994c:	d1fc      	bne.n	9948 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    994e:	6813      	ldr	r3, [r2, #0]
    9950:	4319      	orrs	r1, r3
    9952:	6011      	str	r1, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    9954:	4770      	bx	lr
    9956:	46c0      	nop			; (mov r8, r8)

00009958 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    9958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    995a:	7805      	ldrb	r5, [r0, #0]
{
    995c:	0004      	movs	r4, r0
		if (module_inst->handler[index].used == 0) {
    995e:	07e8      	lsls	r0, r5, #31
    9960:	d506      	bpl.n	9970 <sw_timer_register_callback+0x18>
    9962:	7d25      	ldrb	r5, [r4, #20]
    9964:	07e8      	lsls	r0, r5, #31
    9966:	d518      	bpl.n	999a <sw_timer_register_callback+0x42>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    9968:	2501      	movs	r5, #1
    996a:	426d      	negs	r5, r5
}
    996c:	0028      	movs	r0, r5
    996e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    9970:	2500      	movs	r5, #0
			handler->callback_enable = 0;
    9972:	2002      	movs	r0, #2
			handler->callback = callback;
    9974:	00ae      	lsls	r6, r5, #2
    9976:	1976      	adds	r6, r6, r5
    9978:	00b6      	lsls	r6, r6, #2
    997a:	19a7      	adds	r7, r4, r6
    997c:	6079      	str	r1, [r7, #4]
			handler->callback_enable = 0;
    997e:	5da1      	ldrb	r1, [r4, r6]
    9980:	4381      	bics	r1, r0
    9982:	55a1      	strb	r1, [r4, r6]
			handler->context = context;
    9984:	60ba      	str	r2, [r7, #8]
			handler->period = period / module_inst->accuracy;
    9986:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    9988:	0018      	movs	r0, r3
    998a:	4b05      	ldr	r3, [pc, #20]	; (99a0 <sw_timer_register_callback+0x48>)
    998c:	4798      	blx	r3
			handler->used = 1;
    998e:	2201      	movs	r2, #1
			handler->period = period / module_inst->accuracy;
    9990:	60f8      	str	r0, [r7, #12]
			handler->used = 1;
    9992:	5da3      	ldrb	r3, [r4, r6]
    9994:	4313      	orrs	r3, r2
    9996:	55a3      	strb	r3, [r4, r6]
			return index;
    9998:	e7e8      	b.n	996c <sw_timer_register_callback+0x14>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    999a:	2501      	movs	r5, #1
    999c:	e7e9      	b.n	9972 <sw_timer_register_callback+0x1a>
    999e:	46c0      	nop			; (mov r8, r8)
    99a0:	000138a9 	.word	0x000138a9

000099a4 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    99a4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    99a6:	2402      	movs	r4, #2
    99a8:	008b      	lsls	r3, r1, #2
    99aa:	1859      	adds	r1, r3, r1
    99ac:	0089      	lsls	r1, r1, #2
    99ae:	5c0b      	ldrb	r3, [r1, r0]
    99b0:	4323      	orrs	r3, r4
    99b2:	540b      	strb	r3, [r1, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    99b4:	1844      	adds	r4, r0, r1
    99b6:	4b04      	ldr	r3, [pc, #16]	; (99c8 <sw_timer_enable_callback+0x24>)
    99b8:	6e81      	ldr	r1, [r0, #104]	; 0x68
    99ba:	0010      	movs	r0, r2
    99bc:	4798      	blx	r3
    99be:	4b03      	ldr	r3, [pc, #12]	; (99cc <sw_timer_enable_callback+0x28>)
    99c0:	681b      	ldr	r3, [r3, #0]
    99c2:	18c0      	adds	r0, r0, r3
    99c4:	6120      	str	r0, [r4, #16]
}
    99c6:	bd10      	pop	{r4, pc}
    99c8:	000138a9 	.word	0x000138a9
    99cc:	2000040c 	.word	0x2000040c

000099d0 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    99d0:	2202      	movs	r2, #2
    99d2:	008b      	lsls	r3, r1, #2
    99d4:	1859      	adds	r1, r3, r1
    99d6:	0089      	lsls	r1, r1, #2
    99d8:	5c0b      	ldrb	r3, [r1, r0]
    99da:	4393      	bics	r3, r2
    99dc:	540b      	strb	r3, [r1, r0]
}
    99de:	4770      	bx	lr

000099e0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    99e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    99e2:	4b22      	ldr	r3, [pc, #136]	; (9a6c <sw_timer_task+0x8c>)
{
    99e4:	4645      	mov	r5, r8
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    99e6:	4698      	mov	r8, r3
    99e8:	2304      	movs	r3, #4
{
    99ea:	4657      	mov	r7, sl
    99ec:	464e      	mov	r6, r9
    99ee:	46de      	mov	lr, fp
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    99f0:	469a      	mov	sl, r3
    99f2:	2304      	movs	r3, #4
{
    99f4:	b5e0      	push	{r5, r6, r7, lr}
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    99f6:	2400      	movs	r4, #0
{
    99f8:	0007      	movs	r7, r0
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    99fa:	4699      	mov	r9, r3
    99fc:	1d05      	adds	r5, r0, #4
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    99fe:	00a3      	lsls	r3, r4, #2
    9a00:	191a      	adds	r2, r3, r4
    9a02:	0092      	lsls	r2, r2, #2
    9a04:	469b      	mov	fp, r3
    9a06:	5dd3      	ldrb	r3, [r2, r7]
    9a08:	07d9      	lsls	r1, r3, #31
    9a0a:	d506      	bpl.n	9a1a <sw_timer_task+0x3a>
    9a0c:	0799      	lsls	r1, r3, #30
    9a0e:	d504      	bpl.n	9a1a <sw_timer_task+0x3a>
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9a10:	4641      	mov	r1, r8
    9a12:	6808      	ldr	r0, [r1, #0]
    9a14:	68e9      	ldr	r1, [r5, #12]
    9a16:	1a09      	subs	r1, r1, r0
    9a18:	d409      	bmi.n	9a2e <sw_timer_task+0x4e>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    9a1a:	3401      	adds	r4, #1
    9a1c:	3514      	adds	r5, #20
    9a1e:	2c02      	cmp	r4, #2
    9a20:	d1ed      	bne.n	99fe <sw_timer_task+0x1e>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    9a22:	bc3c      	pop	{r2, r3, r4, r5}
    9a24:	4690      	mov	r8, r2
    9a26:	4699      	mov	r9, r3
    9a28:	46a2      	mov	sl, r4
    9a2a:	46ab      	mov	fp, r5
    9a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    9a2e:	4649      	mov	r1, r9
    9a30:	4219      	tst	r1, r3
    9a32:	d1f2      	bne.n	9a1a <sw_timer_task+0x3a>
				handler->busy = 1;
    9a34:	4651      	mov	r1, sl
    9a36:	430b      	orrs	r3, r1
    9a38:	55d3      	strb	r3, [r2, r7]
				if (handler->period > 0) {
    9a3a:	68ab      	ldr	r3, [r5, #8]
    9a3c:	2b00      	cmp	r3, #0
    9a3e:	d111      	bne.n	9a64 <sw_timer_task+0x84>
					handler->callback_enable = 0;
    9a40:	2102      	movs	r1, #2
    9a42:	5dd3      	ldrb	r3, [r2, r7]
    9a44:	438b      	bics	r3, r1
    9a46:	55d3      	strb	r3, [r2, r7]
    9a48:	68ab      	ldr	r3, [r5, #8]
				handler->callback(module_inst, index, handler->context, handler->period);
    9a4a:	686a      	ldr	r2, [r5, #4]
    9a4c:	682e      	ldr	r6, [r5, #0]
    9a4e:	0021      	movs	r1, r4
    9a50:	0038      	movs	r0, r7
    9a52:	47b0      	blx	r6
				handler->busy = 0;
    9a54:	465b      	mov	r3, fp
    9a56:	464a      	mov	r2, r9
    9a58:	191e      	adds	r6, r3, r4
    9a5a:	00b6      	lsls	r6, r6, #2
    9a5c:	5df3      	ldrb	r3, [r6, r7]
    9a5e:	4393      	bics	r3, r2
    9a60:	55f3      	strb	r3, [r6, r7]
    9a62:	e7da      	b.n	9a1a <sw_timer_task+0x3a>
					handler->expire_time = sw_timer_tick + handler->period;
    9a64:	18c0      	adds	r0, r0, r3
    9a66:	60e8      	str	r0, [r5, #12]
    9a68:	e7ef      	b.n	9a4a <sw_timer_task+0x6a>
    9a6a:	46c0      	nop			; (mov r8, r8)
    9a6c:	2000040c 	.word	0x2000040c

00009a70 <resolve_cb>:
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}


static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    9a70:	b570      	push	{r4, r5, r6, lr}
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    9a72:	0a0b      	lsrs	r3, r1, #8
{
    9a74:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9a76:	21ff      	movs	r1, #255	; 0xff
{
    9a78:	0005      	movs	r5, r0
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9a7a:	000a      	movs	r2, r1
{
    9a7c:	b082      	sub	sp, #8
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    9a7e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9a80:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    9a82:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9a84:	400b      	ands	r3, r1
    9a86:	4001      	ands	r1, r0
    9a88:	4022      	ands	r2, r4
    9a8a:	9100      	str	r1, [sp, #0]
    9a8c:	4e04      	ldr	r6, [pc, #16]	; (9aa0 <resolve_cb+0x30>)
    9a8e:	0029      	movs	r1, r5
    9a90:	4804      	ldr	r0, [pc, #16]	; (9aa4 <resolve_cb+0x34>)
    9a92:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    9a94:	0021      	movs	r1, r4
    9a96:	0028      	movs	r0, r5
    9a98:	4b03      	ldr	r3, [pc, #12]	; (9aa8 <resolve_cb+0x38>)
    9a9a:	4798      	blx	r3
}
    9a9c:	b002      	add	sp, #8
    9a9e:	bd70      	pop	{r4, r5, r6, pc}
    9aa0:	00013de9 	.word	0x00013de9
    9aa4:	0001590c 	.word	0x0001590c
    9aa8:	00008a75 	.word	0x00008a75

00009aac <socket_cb>:
{
    9aac:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    9aae:	4b01      	ldr	r3, [pc, #4]	; (9ab4 <socket_cb+0x8>)
    9ab0:	4798      	blx	r3
}
    9ab2:	bd10      	pop	{r4, pc}
    9ab4:	0000966d 	.word	0x0000966d

00009ab8 <start_download>:
{
    9ab8:	b510      	push	{r4, lr}
	return ((down_state & mask) != 0);
    9aba:	4b14      	ldr	r3, [pc, #80]	; (9b0c <start_download+0x54>)
{
    9abc:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    9abe:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    9ac0:	07da      	lsls	r2, r3, #31
    9ac2:	d512      	bpl.n	9aea <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
    9ac4:	079a      	lsls	r2, r3, #30
    9ac6:	d51c      	bpl.n	9b02 <start_download+0x4a>
	if (is_state_set(GET_REQUESTED)) {
    9ac8:	075a      	lsls	r2, r3, #29
    9aca:	d412      	bmi.n	9af2 <start_download+0x3a>
	if (is_state_set(DOWNLOADING)) {
    9acc:	2408      	movs	r4, #8
    9ace:	401c      	ands	r4, r3
    9ad0:	d113      	bne.n	9afa <start_download+0x42>
	printf("start_download: sending HTTP request...\r\n");
    9ad2:	4b0f      	ldr	r3, [pc, #60]	; (9b10 <start_download+0x58>)
    9ad4:	480f      	ldr	r0, [pc, #60]	; (9b14 <start_download+0x5c>)
    9ad6:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    9ad8:	9400      	str	r4, [sp, #0]
    9ada:	2300      	movs	r3, #0
    9adc:	2201      	movs	r2, #1
    9ade:	490e      	ldr	r1, [pc, #56]	; (9b18 <start_download+0x60>)
    9ae0:	480e      	ldr	r0, [pc, #56]	; (9b1c <start_download+0x64>)
    9ae2:	4c0f      	ldr	r4, [pc, #60]	; (9b20 <start_download+0x68>)
    9ae4:	47a0      	blx	r4
}
    9ae6:	b002      	add	sp, #8
    9ae8:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    9aea:	4b09      	ldr	r3, [pc, #36]	; (9b10 <start_download+0x58>)
    9aec:	480d      	ldr	r0, [pc, #52]	; (9b24 <start_download+0x6c>)
    9aee:	4798      	blx	r3
		return;
    9af0:	e7f9      	b.n	9ae6 <start_download+0x2e>
		printf("start_download: request is sent already.\r\n");
    9af2:	4b07      	ldr	r3, [pc, #28]	; (9b10 <start_download+0x58>)
    9af4:	480c      	ldr	r0, [pc, #48]	; (9b28 <start_download+0x70>)
    9af6:	4798      	blx	r3
		return;
    9af8:	e7f5      	b.n	9ae6 <start_download+0x2e>
		printf("start_download: running download already.\r\n");
    9afa:	4b05      	ldr	r3, [pc, #20]	; (9b10 <start_download+0x58>)
    9afc:	480b      	ldr	r0, [pc, #44]	; (9b2c <start_download+0x74>)
    9afe:	4798      	blx	r3
		return;
    9b00:	e7f1      	b.n	9ae6 <start_download+0x2e>
		printf("start_download: Wi-Fi is not connected.\r\n");
    9b02:	4b03      	ldr	r3, [pc, #12]	; (9b10 <start_download+0x58>)
    9b04:	480a      	ldr	r0, [pc, #40]	; (9b30 <start_download+0x78>)
    9b06:	4798      	blx	r3
		return;
    9b08:	e7ed      	b.n	9ae6 <start_download+0x2e>
    9b0a:	46c0      	nop			; (mov r8, r8)
    9b0c:	20000410 	.word	0x20000410
    9b10:	00013f05 	.word	0x00013f05
    9b14:	000159e8 	.word	0x000159e8
    9b18:	00015a14 	.word	0x00015a14
    9b1c:	20000c44 	.word	0x20000c44
    9b20:	00008ea9 	.word	0x00008ea9
    9b24:	0001593c 	.word	0x0001593c
    9b28:	00015990 	.word	0x00015990
    9b2c:	000159bc 	.word	0x000159bc
    9b30:	00015964 	.word	0x00015964

00009b34 <wifi_cb>:


static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    9b34:	b530      	push	{r4, r5, lr}
    9b36:	b083      	sub	sp, #12
	switch (u8MsgType) {
    9b38:	282c      	cmp	r0, #44	; 0x2c
    9b3a:	d013      	beq.n	9b64 <wifi_cb+0x30>
    9b3c:	2832      	cmp	r0, #50	; 0x32
    9b3e:	d10f      	bne.n	9b60 <wifi_cb+0x2c>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    9b40:	7808      	ldrb	r0, [r1, #0]
    9b42:	788b      	ldrb	r3, [r1, #2]
    9b44:	784a      	ldrb	r2, [r1, #1]
    9b46:	78c9      	ldrb	r1, [r1, #3]
    9b48:	4c1c      	ldr	r4, [pc, #112]	; (9bbc <wifi_cb+0x88>)
    9b4a:	9100      	str	r1, [sp, #0]
    9b4c:	0001      	movs	r1, r0
    9b4e:	481c      	ldr	r0, [pc, #112]	; (9bc0 <wifi_cb+0x8c>)
    9b50:	47a0      	blx	r4
	down_state |= mask;
    9b52:	2102      	movs	r1, #2
    9b54:	4a1b      	ldr	r2, [pc, #108]	; (9bc4 <wifi_cb+0x90>)
    9b56:	7813      	ldrb	r3, [r2, #0]
    9b58:	430b      	orrs	r3, r1
    9b5a:	7013      	strb	r3, [r2, #0]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		add_state(WIFI_CONNECTED);
		start_download();
    9b5c:	4b1a      	ldr	r3, [pc, #104]	; (9bc8 <wifi_cb+0x94>)
    9b5e:	4798      	blx	r3
	}

	default:
		break;
	}
}
    9b60:	b003      	add	sp, #12
    9b62:	bd30      	pop	{r4, r5, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    9b64:	780b      	ldrb	r3, [r1, #0]
    9b66:	2b01      	cmp	r3, #1
    9b68:	d021      	beq.n	9bae <wifi_cb+0x7a>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d1f8      	bne.n	9b60 <wifi_cb+0x2c>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    9b6e:	4b17      	ldr	r3, [pc, #92]	; (9bcc <wifi_cb+0x98>)
    9b70:	4817      	ldr	r0, [pc, #92]	; (9bd0 <wifi_cb+0x9c>)
    9b72:	4798      	blx	r3
	down_state &= ~mask;
    9b74:	2202      	movs	r2, #2
	return ((down_state & mask) != 0);
    9b76:	2508      	movs	r5, #8
	down_state &= ~mask;
    9b78:	4c12      	ldr	r4, [pc, #72]	; (9bc4 <wifi_cb+0x90>)
    9b7a:	7823      	ldrb	r3, [r4, #0]
    9b7c:	4393      	bics	r3, r2
    9b7e:	7023      	strb	r3, [r4, #0]
			if (is_state_set(DOWNLOADING)) {
    9b80:	421d      	tst	r5, r3
    9b82:	d10d      	bne.n	9ba0 <wifi_cb+0x6c>
	return ((down_state & mask) != 0);
    9b84:	2204      	movs	r2, #4
			if (is_state_set(GET_REQUESTED)) {
    9b86:	421a      	tst	r2, r3
    9b88:	d001      	beq.n	9b8e <wifi_cb+0x5a>
	down_state &= ~mask;
    9b8a:	4393      	bics	r3, r2
    9b8c:	7023      	strb	r3, [r4, #0]
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    9b8e:	23ff      	movs	r3, #255	; 0xff
    9b90:	2202      	movs	r2, #2
    9b92:	9300      	str	r3, [sp, #0]
    9b94:	2106      	movs	r1, #6
    9b96:	4b0f      	ldr	r3, [pc, #60]	; (9bd4 <wifi_cb+0xa0>)
    9b98:	4c0f      	ldr	r4, [pc, #60]	; (9bd8 <wifi_cb+0xa4>)
    9b9a:	4810      	ldr	r0, [pc, #64]	; (9bdc <wifi_cb+0xa8>)
    9b9c:	47a0      	blx	r4
    9b9e:	e7df      	b.n	9b60 <wifi_cb+0x2c>
				f_close(&file_object);
    9ba0:	4b0f      	ldr	r3, [pc, #60]	; (9be0 <wifi_cb+0xac>)
    9ba2:	4810      	ldr	r0, [pc, #64]	; (9be4 <wifi_cb+0xb0>)
    9ba4:	4798      	blx	r3
	down_state &= ~mask;
    9ba6:	7823      	ldrb	r3, [r4, #0]
    9ba8:	43ab      	bics	r3, r5
    9baa:	7023      	strb	r3, [r4, #0]
    9bac:	e7ea      	b.n	9b84 <wifi_cb+0x50>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    9bae:	4b07      	ldr	r3, [pc, #28]	; (9bcc <wifi_cb+0x98>)
    9bb0:	480d      	ldr	r0, [pc, #52]	; (9be8 <wifi_cb+0xb4>)
    9bb2:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    9bb4:	4b0d      	ldr	r3, [pc, #52]	; (9bec <wifi_cb+0xb8>)
    9bb6:	4798      	blx	r3
    9bb8:	e7d2      	b.n	9b60 <wifi_cb+0x2c>
    9bba:	46c0      	nop			; (mov r8, r8)
    9bbc:	00013de9 	.word	0x00013de9
    9bc0:	00015bdc 	.word	0x00015bdc
    9bc4:	20000410 	.word	0x20000410
    9bc8:	00009ab9 	.word	0x00009ab9
    9bcc:	00013f05 	.word	0x00013f05
    9bd0:	00015ba8 	.word	0x00015ba8
    9bd4:	00015bc8 	.word	0x00015bc8
    9bd8:	0000c6c9 	.word	0x0000c6c9
    9bdc:	00015bd4 	.word	0x00015bd4
    9be0:	00013895 	.word	0x00013895
    9be4:	20000644 	.word	0x20000644
    9be8:	00015b88 	.word	0x00015b88
    9bec:	0000c6e5 	.word	0x0000c6e5

00009bf0 <rename_to_unique.constprop.3>:
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
    9bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bf2:	46de      	mov	lr, fp
    9bf4:	4645      	mov	r5, r8
    9bf6:	4657      	mov	r7, sl
    9bf8:	464e      	mov	r6, r9
    9bfa:	b5e0      	push	{r5, r6, r7, lr}
    9bfc:	b0c7      	sub	sp, #284	; 0x11c
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    9bfe:	22fb      	movs	r2, #251	; 0xfb
    9c00:	2100      	movs	r1, #0
    9c02:	4b53      	ldr	r3, [pc, #332]	; (9d50 <rename_to_unique.constprop.3+0x160>)
    9c04:	a807      	add	r0, sp, #28
    9c06:	4798      	blx	r3
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    9c08:	2209      	movs	r2, #9
    9c0a:	2100      	movs	r1, #0
    9c0c:	4b50      	ldr	r3, [pc, #320]	; (9d50 <rename_to_unique.constprop.3+0x160>)
    9c0e:	a804      	add	r0, sp, #16
    9c10:	4798      	blx	r3
	char numbering[NUMBRING_MAX + 1] = {0};
    9c12:	2300      	movs	r3, #0
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9c14:	4d4f      	ldr	r5, [pc, #316]	; (9d54 <rename_to_unique.constprop.3+0x164>)
    9c16:	2200      	movs	r2, #0
    9c18:	494f      	ldr	r1, [pc, #316]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9c1a:	0028      	movs	r0, r5
    9c1c:	4f4f      	ldr	r7, [pc, #316]	; (9d5c <rename_to_unique.constprop.3+0x16c>)
	char numbering[NUMBRING_MAX + 1] = {0};
    9c1e:	9303      	str	r3, [sp, #12]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9c20:	47b8      	blx	r7
	f_close(&file_object);
    9c22:	4b4f      	ldr	r3, [pc, #316]	; (9d60 <rename_to_unique.constprop.3+0x170>)
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9c24:	0004      	movs	r4, r0
	f_close(&file_object);
    9c26:	0028      	movs	r0, r5
    9c28:	4698      	mov	r8, r3
    9c2a:	4798      	blx	r3
		return true;
    9c2c:	2001      	movs	r0, #1
	if (!is_exist_file(fp, file_path_name)) {
    9c2e:	2c00      	cmp	r4, #0
    9c30:	d14f      	bne.n	9cd2 <rename_to_unique.constprop.3+0xe2>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    9c32:	4b4c      	ldr	r3, [pc, #304]	; (9d64 <rename_to_unique.constprop.3+0x174>)
    9c34:	4848      	ldr	r0, [pc, #288]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9c36:	4699      	mov	r9, r3
    9c38:	4798      	blx	r3
    9c3a:	0006      	movs	r6, r0
    9c3c:	28fa      	cmp	r0, #250	; 0xfa
    9c3e:	d847      	bhi.n	9cd0 <rename_to_unique.constprop.3+0xe0>
	p = strrchr(file_path_name, '.');
    9c40:	212e      	movs	r1, #46	; 0x2e
    9c42:	4845      	ldr	r0, [pc, #276]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9c44:	4b48      	ldr	r3, [pc, #288]	; (9d68 <rename_to_unique.constprop.3+0x178>)
    9c46:	4798      	blx	r3
    9c48:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
    9c4a:	d007      	beq.n	9c5c <rename_to_unique.constprop.3+0x6c>
		ext_len = strlen(p);
    9c4c:	47c8      	blx	r9
    9c4e:	466a      	mov	r2, sp
    9c50:	8010      	strh	r0, [r2, #0]
    9c52:	8813      	ldrh	r3, [r2, #0]
    9c54:	4682      	mov	sl, r0
    9c56:	4699      	mov	r9, r3
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    9c58:	2b07      	cmp	r3, #7
    9c5a:	d941      	bls.n	9ce0 <rename_to_unique.constprop.3+0xf0>
			strncpy(name, file_path_name, name_len);
    9c5c:	4b43      	ldr	r3, [pc, #268]	; (9d6c <rename_to_unique.constprop.3+0x17c>)
    9c5e:	22f6      	movs	r2, #246	; 0xf6
    9c60:	493d      	ldr	r1, [pc, #244]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9c62:	a807      	add	r0, sp, #28
    9c64:	469a      	mov	sl, r3
    9c66:	4798      	blx	r3
	bool valid_ext = false;
    9c68:	2200      	movs	r2, #0
			strncpy(name, file_path_name, name_len);
    9c6a:	23f7      	movs	r3, #247	; 0xf7
    9c6c:	21f7      	movs	r1, #247	; 0xf7
    9c6e:	26f6      	movs	r6, #246	; 0xf6
	bool valid_ext = false;
    9c70:	9200      	str	r2, [sp, #0]
	name[name_len++] = '-';
    9c72:	2414      	movs	r4, #20
    9c74:	222d      	movs	r2, #45	; 0x2d
    9c76:	a802      	add	r0, sp, #8
    9c78:	1900      	adds	r0, r0, r4
    9c7a:	5582      	strb	r2, [r0, r6]
    9c7c:	aa07      	add	r2, sp, #28
    9c7e:	4691      	mov	r9, r2
    9c80:	4a3b      	ldr	r2, [pc, #236]	; (9d70 <rename_to_unique.constprop.3+0x180>)
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9c82:	3303      	adds	r3, #3
    9c84:	4693      	mov	fp, r2
    9c86:	aa07      	add	r2, sp, #28
    9c88:	4694      	mov	ip, r2
    9c8a:	4463      	add	r3, ip
    9c8c:	4489      	add	r9, r1
	name[name_len++] = '-';
    9c8e:	3c13      	subs	r4, #19
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9c90:	9301      	str	r3, [sp, #4]
    9c92:	e00d      	b.n	9cb0 <rename_to_unique.constprop.3+0xc0>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9c94:	2200      	movs	r2, #0
    9c96:	a907      	add	r1, sp, #28
    9c98:	0028      	movs	r0, r5
    9c9a:	47b8      	blx	r7
    9c9c:	0006      	movs	r6, r0
	f_close(&file_object);
    9c9e:	0028      	movs	r0, r5
    9ca0:	47c0      	blx	r8
		if (!is_exist_file(fp, name)) {
    9ca2:	2e00      	cmp	r6, #0
    9ca4:	d139      	bne.n	9d1a <rename_to_unique.constprop.3+0x12a>
	for (i = 1; i < count; i++) {
    9ca6:	23fa      	movs	r3, #250	; 0xfa
    9ca8:	3401      	adds	r4, #1
    9caa:	009b      	lsls	r3, r3, #2
    9cac:	429c      	cmp	r4, r3
    9cae:	d00f      	beq.n	9cd0 <rename_to_unique.constprop.3+0xe0>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    9cb0:	0022      	movs	r2, r4
    9cb2:	4930      	ldr	r1, [pc, #192]	; (9d74 <rename_to_unique.constprop.3+0x184>)
    9cb4:	a803      	add	r0, sp, #12
    9cb6:	47d8      	blx	fp
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    9cb8:	2203      	movs	r2, #3
    9cba:	a903      	add	r1, sp, #12
    9cbc:	4648      	mov	r0, r9
    9cbe:	47d0      	blx	sl
		if (valid_ext) {
    9cc0:	9b00      	ldr	r3, [sp, #0]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d0e6      	beq.n	9c94 <rename_to_unique.constprop.3+0xa4>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9cc6:	a904      	add	r1, sp, #16
    9cc8:	9801      	ldr	r0, [sp, #4]
    9cca:	4b2b      	ldr	r3, [pc, #172]	; (9d78 <rename_to_unique.constprop.3+0x188>)
    9ccc:	4798      	blx	r3
    9cce:	e7e1      	b.n	9c94 <rename_to_unique.constprop.3+0xa4>
		return false;
    9cd0:	2000      	movs	r0, #0
}
    9cd2:	b047      	add	sp, #284	; 0x11c
    9cd4:	bc3c      	pop	{r2, r3, r4, r5}
    9cd6:	4690      	mov	r8, r2
    9cd8:	4699      	mov	r9, r3
    9cda:	46a2      	mov	sl, r4
    9cdc:	46ab      	mov	fp, r5
    9cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(ext, p);
    9ce0:	1c42      	adds	r2, r0, #1
    9ce2:	4b26      	ldr	r3, [pc, #152]	; (9d7c <rename_to_unique.constprop.3+0x18c>)
    9ce4:	0021      	movs	r1, r4
    9ce6:	a804      	add	r0, sp, #16
    9ce8:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    9cea:	4653      	mov	r3, sl
    9cec:	041b      	lsls	r3, r3, #16
    9cee:	0c1b      	lsrs	r3, r3, #16
    9cf0:	1af6      	subs	r6, r6, r3
    9cf2:	2ef6      	cmp	r6, #246	; 0xf6
    9cf4:	d91c      	bls.n	9d30 <rename_to_unique.constprop.3+0x140>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    9cf6:	464b      	mov	r3, r9
    9cf8:	26f6      	movs	r6, #246	; 0xf6
    9cfa:	1af6      	subs	r6, r6, r3
    9cfc:	b2b6      	uxth	r6, r6
				strncpy(name, file_path_name, name_len);
    9cfe:	4b1b      	ldr	r3, [pc, #108]	; (9d6c <rename_to_unique.constprop.3+0x17c>)
    9d00:	0032      	movs	r2, r6
    9d02:	4915      	ldr	r1, [pc, #84]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9d04:	a807      	add	r0, sp, #28
    9d06:	469a      	mov	sl, r3
    9d08:	4798      	blx	r3
    9d0a:	464a      	mov	r2, r9
    9d0c:	23f7      	movs	r3, #247	; 0xf7
    9d0e:	1a9b      	subs	r3, r3, r2
			valid_ext = true;
    9d10:	2201      	movs	r2, #1
    9d12:	b29b      	uxth	r3, r3
    9d14:	0019      	movs	r1, r3
    9d16:	9200      	str	r2, [sp, #0]
    9d18:	e7ab      	b.n	9c72 <rename_to_unique.constprop.3+0x82>
			memset(file_path_name, 0, max_len);
    9d1a:	22fa      	movs	r2, #250	; 0xfa
    9d1c:	2100      	movs	r1, #0
    9d1e:	4b0c      	ldr	r3, [pc, #48]	; (9d50 <rename_to_unique.constprop.3+0x160>)
    9d20:	480d      	ldr	r0, [pc, #52]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9d22:	4798      	blx	r3
			strcpy(file_path_name, name);
    9d24:	a907      	add	r1, sp, #28
    9d26:	480c      	ldr	r0, [pc, #48]	; (9d58 <rename_to_unique.constprop.3+0x168>)
    9d28:	4b13      	ldr	r3, [pc, #76]	; (9d78 <rename_to_unique.constprop.3+0x188>)
    9d2a:	4798      	blx	r3
			return true;
    9d2c:	2001      	movs	r0, #1
    9d2e:	e7d0      	b.n	9cd2 <rename_to_unique.constprop.3+0xe2>
				name_len = (p - file_path_name);
    9d30:	4b09      	ldr	r3, [pc, #36]	; (9d58 <rename_to_unique.constprop.3+0x168>)
				strncpy(name, file_path_name, name_len);
    9d32:	a807      	add	r0, sp, #28
				name_len = (p - file_path_name);
    9d34:	1ae4      	subs	r4, r4, r3
				strncpy(name, file_path_name, name_len);
    9d36:	0426      	lsls	r6, r4, #16
    9d38:	0019      	movs	r1, r3
    9d3a:	0c36      	lsrs	r6, r6, #16
    9d3c:	4b0b      	ldr	r3, [pc, #44]	; (9d6c <rename_to_unique.constprop.3+0x17c>)
    9d3e:	0032      	movs	r2, r6
    9d40:	469a      	mov	sl, r3
    9d42:	4798      	blx	r3
			valid_ext = true;
    9d44:	2201      	movs	r2, #1
    9d46:	3401      	adds	r4, #1
    9d48:	b2a3      	uxth	r3, r4
    9d4a:	0019      	movs	r1, r3
    9d4c:	9200      	str	r2, [sp, #0]
    9d4e:	e790      	b.n	9c72 <rename_to_unique.constprop.3+0x82>
    9d50:	00013c87 	.word	0x00013c87
    9d54:	20000644 	.word	0x20000644
    9d58:	20000000 	.word	0x20000000
    9d5c:	000133e9 	.word	0x000133e9
    9d60:	00013895 	.word	0x00013895
    9d64:	0001414b 	.word	0x0001414b
    9d68:	000141a5 	.word	0x000141a5
    9d6c:	0001417b 	.word	0x0001417b
    9d70:	000140a9 	.word	0x000140a9
    9d74:	00015904 	.word	0x00015904
    9d78:	00014101 	.word	0x00014101
    9d7c:	00013c51 	.word	0x00013c51

00009d80 <store_file_packet.part.2>:
static void store_file_packet(char *data, uint32_t length)
    9d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d82:	4647      	mov	r7, r8
    9d84:	46ce      	mov	lr, r9
    9d86:	b580      	push	{r7, lr}
	return ((down_state & mask) != 0);
    9d88:	4d38      	ldr	r5, [pc, #224]	; (9e6c <store_file_packet.part.2+0xec>)
static void store_file_packet(char *data, uint32_t length)
    9d8a:	b083      	sub	sp, #12
	return ((down_state & mask) != 0);
    9d8c:	782b      	ldrb	r3, [r5, #0]
static void store_file_packet(char *data, uint32_t length)
    9d8e:	4680      	mov	r8, r0
    9d90:	000f      	movs	r7, r1
	if (!is_state_set(DOWNLOADING)) {
    9d92:	071b      	lsls	r3, r3, #28
    9d94:	d45b      	bmi.n	9e4e <store_file_packet.part.2+0xce>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    9d96:	2330      	movs	r3, #48	; 0x30
    9d98:	4e35      	ldr	r6, [pc, #212]	; (9e70 <store_file_packet.part.2+0xf0>)
		save_file_name[1] = ':';
    9d9a:	4c36      	ldr	r4, [pc, #216]	; (9e74 <store_file_packet.part.2+0xf4>)
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    9d9c:	7033      	strb	r3, [r6, #0]
		save_file_name[1] = ':';
    9d9e:	330a      	adds	r3, #10
    9da0:	7073      	strb	r3, [r6, #1]
    9da2:	e000      	b.n	9da6 <store_file_packet.part.2+0x26>
		while (*cp != '/') {
    9da4:	0004      	movs	r4, r0
			cp--;
    9da6:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    9da8:	7803      	ldrb	r3, [r0, #0]
    9daa:	2b2f      	cmp	r3, #47	; 0x2f
    9dac:	d1fa      	bne.n	9da4 <store_file_packet.part.2+0x24>
		if (strlen(cp) > 1) {
    9dae:	4b32      	ldr	r3, [pc, #200]	; (9e78 <store_file_packet.part.2+0xf8>)
    9db0:	4798      	blx	r3
    9db2:	2801      	cmp	r0, #1
    9db4:	d951      	bls.n	9e5a <store_file_packet.part.2+0xda>
			strcpy(&save_file_name[2], cp);
    9db6:	0021      	movs	r1, r4
    9db8:	4b30      	ldr	r3, [pc, #192]	; (9e7c <store_file_packet.part.2+0xfc>)
    9dba:	1cb0      	adds	r0, r6, #2
    9dbc:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    9dbe:	4b30      	ldr	r3, [pc, #192]	; (9e80 <store_file_packet.part.2+0x100>)
    9dc0:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    9dc2:	4b30      	ldr	r3, [pc, #192]	; (9e84 <store_file_packet.part.2+0x104>)
    9dc4:	0031      	movs	r1, r6
    9dc6:	4830      	ldr	r0, [pc, #192]	; (9e88 <store_file_packet.part.2+0x108>)
    9dc8:	4699      	mov	r9, r3
    9dca:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    9dcc:	4c2f      	ldr	r4, [pc, #188]	; (9e8c <store_file_packet.part.2+0x10c>)
    9dce:	220a      	movs	r2, #10
    9dd0:	0031      	movs	r1, r6
    9dd2:	0020      	movs	r0, r4
    9dd4:	4b2e      	ldr	r3, [pc, #184]	; (9e90 <store_file_packet.part.2+0x110>)
    9dd6:	4798      	blx	r3
		if (ret != FR_OK) {
    9dd8:	2800      	cmp	r0, #0
    9dda:	d13a      	bne.n	9e52 <store_file_packet.part.2+0xd2>
	down_state |= mask;
    9ddc:	2208      	movs	r2, #8
		received_file_size = 0;
    9dde:	4b2d      	ldr	r3, [pc, #180]	; (9e94 <store_file_packet.part.2+0x114>)
    9de0:	6018      	str	r0, [r3, #0]
	down_state |= mask;
    9de2:	782b      	ldrb	r3, [r5, #0]
    9de4:	4313      	orrs	r3, r2
    9de6:	702b      	strb	r3, [r5, #0]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    9de8:	ab01      	add	r3, sp, #4
    9dea:	003a      	movs	r2, r7
    9dec:	4641      	mov	r1, r8
    9dee:	0020      	movs	r0, r4
    9df0:	4e29      	ldr	r6, [pc, #164]	; (9e98 <store_file_packet.part.2+0x118>)
		UINT wsize = length;
    9df2:	9701      	str	r7, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    9df4:	47b0      	blx	r6
		if (ret != FR_OK) {
    9df6:	2800      	cmp	r0, #0
    9df8:	d00e      	beq.n	9e18 <store_file_packet.part.2+0x98>
			f_close(&file_object);
    9dfa:	4b28      	ldr	r3, [pc, #160]	; (9e9c <store_file_packet.part.2+0x11c>)
    9dfc:	0020      	movs	r0, r4
    9dfe:	4798      	blx	r3
	down_state |= mask;
    9e00:	2220      	movs	r2, #32
    9e02:	782b      	ldrb	r3, [r5, #0]
			printf("store_file_packet: file write error, download canceled.\r\n");
    9e04:	4826      	ldr	r0, [pc, #152]	; (9ea0 <store_file_packet.part.2+0x120>)
	down_state |= mask;
    9e06:	4313      	orrs	r3, r2
    9e08:	702b      	strb	r3, [r5, #0]
			printf("store_file_packet: file write error, download canceled.\r\n");
    9e0a:	4b26      	ldr	r3, [pc, #152]	; (9ea4 <store_file_packet.part.2+0x124>)
    9e0c:	4798      	blx	r3
}
    9e0e:	b003      	add	sp, #12
    9e10:	bc0c      	pop	{r2, r3}
    9e12:	4690      	mov	r8, r2
    9e14:	4699      	mov	r9, r3
    9e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		received_file_size += wsize;
    9e18:	9a01      	ldr	r2, [sp, #4]
    9e1a:	4e1e      	ldr	r6, [pc, #120]	; (9e94 <store_file_packet.part.2+0x114>)
    9e1c:	4694      	mov	ip, r2
    9e1e:	6833      	ldr	r3, [r6, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    9e20:	4f21      	ldr	r7, [pc, #132]	; (9ea8 <store_file_packet.part.2+0x128>)
		received_file_size += wsize;
    9e22:	4463      	add	r3, ip
    9e24:	0019      	movs	r1, r3
    9e26:	6033      	str	r3, [r6, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    9e28:	683a      	ldr	r2, [r7, #0]
    9e2a:	4b16      	ldr	r3, [pc, #88]	; (9e84 <store_file_packet.part.2+0x104>)
    9e2c:	481f      	ldr	r0, [pc, #124]	; (9eac <store_file_packet.part.2+0x12c>)
    9e2e:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    9e30:	6832      	ldr	r2, [r6, #0]
    9e32:	683b      	ldr	r3, [r7, #0]
    9e34:	429a      	cmp	r2, r3
    9e36:	d3ea      	bcc.n	9e0e <store_file_packet.part.2+0x8e>
			f_close(&file_object);
    9e38:	4b18      	ldr	r3, [pc, #96]	; (9e9c <store_file_packet.part.2+0x11c>)
    9e3a:	0020      	movs	r0, r4
    9e3c:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    9e3e:	4b19      	ldr	r3, [pc, #100]	; (9ea4 <store_file_packet.part.2+0x124>)
    9e40:	481b      	ldr	r0, [pc, #108]	; (9eb0 <store_file_packet.part.2+0x130>)
    9e42:	4798      	blx	r3
	down_state |= mask;
    9e44:	2210      	movs	r2, #16
    9e46:	782b      	ldrb	r3, [r5, #0]
    9e48:	4313      	orrs	r3, r2
    9e4a:	702b      	strb	r3, [r5, #0]
    9e4c:	e7df      	b.n	9e0e <store_file_packet.part.2+0x8e>
    9e4e:	4c0f      	ldr	r4, [pc, #60]	; (9e8c <store_file_packet.part.2+0x10c>)
    9e50:	e7ca      	b.n	9de8 <store_file_packet.part.2+0x68>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    9e52:	0001      	movs	r1, r0
    9e54:	4817      	ldr	r0, [pc, #92]	; (9eb4 <store_file_packet.part.2+0x134>)
    9e56:	47c8      	blx	r9
    9e58:	e7d9      	b.n	9e0e <store_file_packet.part.2+0x8e>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    9e5a:	4b12      	ldr	r3, [pc, #72]	; (9ea4 <store_file_packet.part.2+0x124>)
    9e5c:	4816      	ldr	r0, [pc, #88]	; (9eb8 <store_file_packet.part.2+0x138>)
    9e5e:	4798      	blx	r3
	down_state |= mask;
    9e60:	2220      	movs	r2, #32
    9e62:	782b      	ldrb	r3, [r5, #0]
    9e64:	4313      	orrs	r3, r2
    9e66:	702b      	strb	r3, [r5, #0]
    9e68:	e7d1      	b.n	9e0e <store_file_packet.part.2+0x8e>
    9e6a:	46c0      	nop			; (mov r8, r8)
    9e6c:	20000410 	.word	0x20000410
    9e70:	20000000 	.word	0x20000000
    9e74:	00015a44 	.word	0x00015a44
    9e78:	0001414b 	.word	0x0001414b
    9e7c:	00014101 	.word	0x00014101
    9e80:	00009bf1 	.word	0x00009bf1
    9e84:	00013de9 	.word	0x00013de9
    9e88:	00015a48 	.word	0x00015a48
    9e8c:	20000644 	.word	0x20000644
    9e90:	000133e9 	.word	0x000133e9
    9e94:	2000086c 	.word	0x2000086c
    9e98:	00013565 	.word	0x00013565
    9e9c:	00013895 	.word	0x00013895
    9ea0:	00015ae4 	.word	0x00015ae4
    9ea4:	00013f05 	.word	0x00013f05
    9ea8:	20000868 	.word	0x20000868
    9eac:	00015b20 	.word	0x00015b20
    9eb0:	00015b54 	.word	0x00015b54
    9eb4:	00015ab0 	.word	0x00015ab0
    9eb8:	00015a70 	.word	0x00015a70

00009ebc <http_client_callback>:
{
    9ebc:	b570      	push	{r4, r5, r6, lr}
    9ebe:	0014      	movs	r4, r2
	switch (type) {
    9ec0:	2904      	cmp	r1, #4
    9ec2:	d813      	bhi.n	9eec <http_client_callback+0x30>
    9ec4:	4b32      	ldr	r3, [pc, #200]	; (9f90 <http_client_callback+0xd4>)
    9ec6:	0089      	lsls	r1, r1, #2
    9ec8:	585b      	ldr	r3, [r3, r1]
    9eca:	469f      	mov	pc, r3
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    9ecc:	6850      	ldr	r0, [r2, #4]
    9ece:	6811      	ldr	r1, [r2, #0]
	if ((data == NULL) || (length < 1)) {
    9ed0:	2800      	cmp	r0, #0
    9ed2:	d03b      	beq.n	9f4c <http_client_callback+0x90>
    9ed4:	2900      	cmp	r1, #0
    9ed6:	d039      	beq.n	9f4c <http_client_callback+0x90>
    9ed8:	4b2e      	ldr	r3, [pc, #184]	; (9f94 <http_client_callback+0xd8>)
    9eda:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    9edc:	7a23      	ldrb	r3, [r4, #8]
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d004      	beq.n	9eec <http_client_callback+0x30>
	down_state |= mask;
    9ee2:	2110      	movs	r1, #16
    9ee4:	4a2c      	ldr	r2, [pc, #176]	; (9f98 <http_client_callback+0xdc>)
    9ee6:	7813      	ldrb	r3, [r2, #0]
    9ee8:	430b      	orrs	r3, r1
    9eea:	7013      	strb	r3, [r2, #0]
}
    9eec:	bd70      	pop	{r4, r5, r6, pc}
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    9eee:	4b2b      	ldr	r3, [pc, #172]	; (9f9c <http_client_callback+0xe0>)
    9ef0:	6811      	ldr	r1, [r2, #0]
    9ef2:	482b      	ldr	r0, [pc, #172]	; (9fa0 <http_client_callback+0xe4>)
    9ef4:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    9ef6:	6823      	ldr	r3, [r4, #0]
    9ef8:	330b      	adds	r3, #11
    9efa:	d1f7      	bne.n	9eec <http_client_callback+0x30>
	return ((down_state & mask) != 0);
    9efc:	2508      	movs	r5, #8
    9efe:	4c26      	ldr	r4, [pc, #152]	; (9f98 <http_client_callback+0xdc>)
    9f00:	7823      	ldrb	r3, [r4, #0]
			if (is_state_set(DOWNLOADING)) {
    9f02:	421d      	tst	r5, r3
    9f04:	d138      	bne.n	9f78 <http_client_callback+0xbc>
	return ((down_state & mask) != 0);
    9f06:	2204      	movs	r2, #4
			if (is_state_set(GET_REQUESTED)) {
    9f08:	421a      	tst	r2, r3
    9f0a:	d001      	beq.n	9f10 <http_client_callback+0x54>
	down_state &= ~mask;
    9f0c:	4393      	bics	r3, r2
    9f0e:	7023      	strb	r3, [r4, #0]
			start_download();
    9f10:	4b24      	ldr	r3, [pc, #144]	; (9fa4 <http_client_callback+0xe8>)
    9f12:	4798      	blx	r3
    9f14:	e7ea      	b.n	9eec <http_client_callback+0x30>
		printf("http_client_callback: request completed.\r\n");
    9f16:	4b24      	ldr	r3, [pc, #144]	; (9fa8 <http_client_callback+0xec>)
    9f18:	4824      	ldr	r0, [pc, #144]	; (9fac <http_client_callback+0xf0>)
    9f1a:	4798      	blx	r3
	down_state |= mask;
    9f1c:	2104      	movs	r1, #4
    9f1e:	4a1e      	ldr	r2, [pc, #120]	; (9f98 <http_client_callback+0xdc>)
    9f20:	7813      	ldrb	r3, [r2, #0]
    9f22:	430b      	orrs	r3, r1
    9f24:	7013      	strb	r3, [r2, #0]
    9f26:	e7e1      	b.n	9eec <http_client_callback+0x30>
		printf("http_client_callback: HTTP client socket connected.\r\n");
    9f28:	4b1f      	ldr	r3, [pc, #124]	; (9fa8 <http_client_callback+0xec>)
    9f2a:	4821      	ldr	r0, [pc, #132]	; (9fb0 <http_client_callback+0xf4>)
    9f2c:	4798      	blx	r3
		break;
    9f2e:	e7dd      	b.n	9eec <http_client_callback+0x30>
		printf("http_client_callback: received response %u data size %u\r\n",
    9f30:	8811      	ldrh	r1, [r2, #0]
    9f32:	4b1a      	ldr	r3, [pc, #104]	; (9f9c <http_client_callback+0xe0>)
    9f34:	6852      	ldr	r2, [r2, #4]
    9f36:	481f      	ldr	r0, [pc, #124]	; (9fb4 <http_client_callback+0xf8>)
    9f38:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    9f3a:	8823      	ldrh	r3, [r4, #0]
    9f3c:	2bc8      	cmp	r3, #200	; 0xc8
    9f3e:	d009      	beq.n	9f54 <http_client_callback+0x98>
	down_state |= mask;
    9f40:	2120      	movs	r1, #32
    9f42:	4a15      	ldr	r2, [pc, #84]	; (9f98 <http_client_callback+0xdc>)
    9f44:	7813      	ldrb	r3, [r2, #0]
    9f46:	430b      	orrs	r3, r1
    9f48:	7013      	strb	r3, [r2, #0]
    9f4a:	e7cf      	b.n	9eec <http_client_callback+0x30>
		printf("store_file_packet: empty data.\r\n");
    9f4c:	4b16      	ldr	r3, [pc, #88]	; (9fa8 <http_client_callback+0xec>)
    9f4e:	481a      	ldr	r0, [pc, #104]	; (9fb8 <http_client_callback+0xfc>)
    9f50:	4798      	blx	r3
    9f52:	e7c3      	b.n	9edc <http_client_callback+0x20>
			received_file_size = 0;
    9f54:	2200      	movs	r2, #0
			http_file_size = data->recv_response.content_length;
    9f56:	4b19      	ldr	r3, [pc, #100]	; (9fbc <http_client_callback+0x100>)
    9f58:	6861      	ldr	r1, [r4, #4]
    9f5a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    9f5c:	4b18      	ldr	r3, [pc, #96]	; (9fc0 <http_client_callback+0x104>)
    9f5e:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    9f60:	2380      	movs	r3, #128	; 0x80
    9f62:	00db      	lsls	r3, r3, #3
    9f64:	4299      	cmp	r1, r3
    9f66:	d8c1      	bhi.n	9eec <http_client_callback+0x30>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    9f68:	68a0      	ldr	r0, [r4, #8]
	if ((data == NULL) || (length < 1)) {
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d00b      	beq.n	9f86 <http_client_callback+0xca>
    9f6e:	2900      	cmp	r1, #0
    9f70:	d009      	beq.n	9f86 <http_client_callback+0xca>
    9f72:	4b08      	ldr	r3, [pc, #32]	; (9f94 <http_client_callback+0xd8>)
    9f74:	4798      	blx	r3
    9f76:	e7b4      	b.n	9ee2 <http_client_callback+0x26>
				f_close(&file_object);
    9f78:	4b12      	ldr	r3, [pc, #72]	; (9fc4 <http_client_callback+0x108>)
    9f7a:	4813      	ldr	r0, [pc, #76]	; (9fc8 <http_client_callback+0x10c>)
    9f7c:	4798      	blx	r3
	down_state &= ~mask;
    9f7e:	7823      	ldrb	r3, [r4, #0]
    9f80:	43ab      	bics	r3, r5
    9f82:	7023      	strb	r3, [r4, #0]
    9f84:	e7bf      	b.n	9f06 <http_client_callback+0x4a>
		printf("store_file_packet: empty data.\r\n");
    9f86:	4b08      	ldr	r3, [pc, #32]	; (9fa8 <http_client_callback+0xec>)
    9f88:	480b      	ldr	r0, [pc, #44]	; (9fb8 <http_client_callback+0xfc>)
    9f8a:	4798      	blx	r3
    9f8c:	e7a9      	b.n	9ee2 <http_client_callback+0x26>
    9f8e:	46c0      	nop			; (mov r8, r8)
    9f90:	00015608 	.word	0x00015608
    9f94:	00009d81 	.word	0x00009d81
    9f98:	20000410 	.word	0x20000410
    9f9c:	00013de9 	.word	0x00013de9
    9fa0:	000156dc 	.word	0x000156dc
    9fa4:	00009ab9 	.word	0x00009ab9
    9fa8:	00013f05 	.word	0x00013f05
    9fac:	00015654 	.word	0x00015654
    9fb0:	0001561c 	.word	0x0001561c
    9fb4:	00015680 	.word	0x00015680
    9fb8:	000156bc 	.word	0x000156bc
    9fbc:	20000868 	.word	0x20000868
    9fc0:	2000086c 	.word	0x2000086c
    9fc4:	00013895 	.word	0x00013895
    9fc8:	20000644 	.word	0x20000644

00009fcc <SYSCTRL_Handler>:
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    9fcc:	2280      	movs	r2, #128	; 0x80
    9fce:	4b05      	ldr	r3, [pc, #20]	; (9fe4 <SYSCTRL_Handler+0x18>)
    9fd0:	00d2      	lsls	r2, r2, #3
    9fd2:	6899      	ldr	r1, [r3, #8]
    9fd4:	4211      	tst	r1, r2
    9fd6:	d003      	beq.n	9fe0 <SYSCTRL_Handler+0x14>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    9fd8:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    9fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    9fde:	bf30      	wfi
}
    9fe0:	4770      	bx	lr
    9fe2:	46c0      	nop			; (mov r8, r8)
    9fe4:	40000800 	.word	0x40000800

00009fe8 <main>:
		return;
	}
}

int main(void)
{
    9fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fea:	46de      	mov	lr, fp
    9fec:	4657      	mov	r7, sl
    9fee:	464e      	mov	r6, r9
    9ff0:	4645      	mov	r5, r8
    9ff2:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
    9ff4:	4b91      	ldr	r3, [pc, #580]	; (a23c <main+0x254>)
{
    9ff6:	b08b      	sub	sp, #44	; 0x2c
	system_init();
    9ff8:	4798      	blx	r3
	delay_init();
    9ffa:	4b91      	ldr	r3, [pc, #580]	; (a240 <main+0x258>)
    9ffc:	4798      	blx	r3
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    9ffe:	2300      	movs	r3, #0
    a000:	ac03      	add	r4, sp, #12
    a002:	469a      	mov	sl, r3
    a004:	8023      	strh	r3, [r4, #0]
	config_bod33.action = BOD_ACTION_INTERRUPT;
    a006:	2310      	movs	r3, #16
    a008:	2700      	movs	r7, #0
	conf->mode           = BOD_MODE_CONTINUOUS;
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    a00a:	2501      	movs	r5, #1
    a00c:	7123      	strb	r3, [r4, #4]
	config_bod33.mode = BOD_MODE_SAMPLED;
    a00e:	33f0      	adds	r3, #240	; 0xf0
    a010:	8063      	strh	r3, [r4, #2]
	config_bod33.level = 40;						// Set to 2.8V
    a012:	3bd8      	subs	r3, #216	; 0xd8
    a014:	7163      	strb	r3, [r4, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    a016:	0021      	movs	r1, r4
    a018:	4b8a      	ldr	r3, [pc, #552]	; (a244 <main+0x25c>)
    a01a:	2000      	movs	r0, #0
    a01c:	71a5      	strb	r5, [r4, #6]
	config_bod33.run_in_standby = 0;
    a01e:	71e7      	strb	r7, [r4, #7]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    a020:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    a022:	2102      	movs	r1, #2
    a024:	4b88      	ldr	r3, [pc, #544]	; (a248 <main+0x260>)
	rtc_instance.hw = RTC;
    a026:	4e89      	ldr	r6, [pc, #548]	; (a24c <main+0x264>)
    a028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a02a:	4688      	mov	r8, r1
    a02c:	430a      	orrs	r2, r1
    a02e:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    a030:	2280      	movs	r2, #128	; 0x80
    a032:	00d2      	lsls	r2, r2, #3
    a034:	605a      	str	r2, [r3, #4]
    a036:	4b86      	ldr	r3, [pc, #536]	; (a250 <main+0x268>)
    a038:	4691      	mov	r9, r2
    a03a:	6019      	str	r1, [r3, #0]
	rtc_instance.hw = RTC;
    a03c:	4b85      	ldr	r3, [pc, #532]	; (a254 <main+0x26c>)
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    a03e:	22a0      	movs	r2, #160	; 0xa0
    a040:	469b      	mov	fp, r3
    a042:	6033      	str	r3, [r6, #0]
	rtc_instance.year_init_value = 2000;
    a044:	23fa      	movs	r3, #250	; 0xfa
    a046:	00db      	lsls	r3, r3, #3
    a048:	80f3      	strh	r3, [r6, #6]
	config->clear_on_match      = false;
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    a04a:	80e3      	strh	r3, [r4, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    a04c:	81e3      	strh	r3, [r4, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    a04e:	2306      	movs	r3, #6
    a050:	7423      	strb	r3, [r4, #16]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    a052:	4643      	mov	r3, r8
    a054:	a902      	add	r1, sp, #8
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    a056:	0112      	lsls	r2, r2, #4
    a058:	700b      	strb	r3, [r1, #0]
		config->alarm[i].time = time;
    a05a:	7227      	strb	r7, [r4, #8]
    a05c:	7267      	strb	r7, [r4, #9]
    a05e:	72a7      	strb	r7, [r4, #10]
    a060:	72e7      	strb	r7, [r4, #11]
    a062:	7325      	strb	r5, [r4, #12]
    a064:	7365      	strb	r5, [r4, #13]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    a066:	2004      	movs	r0, #4
    a068:	4b7b      	ldr	r3, [pc, #492]	; (a258 <main+0x270>)
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    a06a:	8022      	strh	r2, [r4, #0]
	rtc_instance.clock_24h = 1;
    a06c:	7135      	strb	r5, [r6, #4]
	config->clear_on_match      = false;
    a06e:	70a7      	strb	r7, [r4, #2]
	config->continuously_update = false;
    a070:	70e7      	strb	r7, [r4, #3]
	config_rtc_calendar.clock_24h = true;
    a072:	7125      	strb	r5, [r4, #4]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    a074:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    a076:	2004      	movs	r0, #4
    a078:	4b78      	ldr	r3, [pc, #480]	; (a25c <main+0x274>)
    a07a:	4798      	blx	r3
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    a07c:	0022      	movs	r2, r4
    a07e:	4659      	mov	r1, fp
    a080:	0030      	movs	r0, r6
    a082:	4b77      	ldr	r3, [pc, #476]	; (a260 <main+0x278>)
    a084:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    a086:	0030      	movs	r0, r6
    a088:	4b76      	ldr	r3, [pc, #472]	; (a264 <main+0x27c>)
    a08a:	4798      	blx	r3
	extint_chan_get_config_defaults(&ext_conf);
    a08c:	0020      	movs	r0, r4
    a08e:	4b76      	ldr	r3, [pc, #472]	; (a268 <main+0x280>)
    a090:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    a092:	4643      	mov	r3, r8
    a094:	72e3      	strb	r3, [r4, #11]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    a096:	2303      	movs	r3, #3
    a098:	9303      	str	r3, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    a09a:	4653      	mov	r3, sl
    a09c:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(3, &ext_conf);
    a09e:	4b73      	ldr	r3, [pc, #460]	; (a26c <main+0x284>)
    a0a0:	0021      	movs	r1, r4
    a0a2:	2003      	movs	r0, #3
    a0a4:	4698      	mov	r8, r3
	ext_conf.filter_input_signal = true;
    a0a6:	72a5      	strb	r5, [r4, #10]
	ext_conf.wake_if_sleeping = true;
    a0a8:	7265      	strb	r5, [r4, #9]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    a0aa:	7225      	strb	r5, [r4, #8]
	extint_chan_set_config(3, &ext_conf);
    a0ac:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    a0ae:	4e70      	ldr	r6, [pc, #448]	; (a270 <main+0x288>)
    a0b0:	2100      	movs	r1, #0
    a0b2:	2003      	movs	r0, #3
    a0b4:	47b0      	blx	r6
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    a0b6:	231f      	movs	r3, #31
    a0b8:	9303      	str	r3, [sp, #12]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    a0ba:	4653      	mov	r3, sl
	extint_chan_set_config(11, &ext_conf);
    a0bc:	0021      	movs	r1, r4
    a0be:	200b      	movs	r0, #11
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    a0c0:	6063      	str	r3, [r4, #4]
	extint_chan_set_config(11, &ext_conf);
    a0c2:	47c0      	blx	r8
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    a0c4:	2100      	movs	r1, #0
    a0c6:	200b      	movs	r0, #11
    a0c8:	47b0      	blx	r6
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    a0ca:	4b6a      	ldr	r3, [pc, #424]	; (a274 <main+0x28c>)
    a0cc:	701f      	strb	r7, [r3, #0]
    a0ce:	705f      	strb	r7, [r3, #1]
    a0d0:	709f      	strb	r7, [r3, #2]
    a0d2:	70df      	strb	r7, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    a0d4:	711d      	strb	r5, [r3, #4]
	configure_bod();
	configure_rtc();
	configure_wakeup();
	sleepmgr_init();
	stdio_usb_init();
    a0d6:	4b68      	ldr	r3, [pc, #416]	; (a278 <main+0x290>)
    a0d8:	4798      	blx	r3
	stdio_usb_enable();
    a0da:	4b68      	ldr	r3, [pc, #416]	; (a27c <main+0x294>)
    a0dc:	4798      	blx	r3
	cpu_irq_enable();
    a0de:	4b68      	ldr	r3, [pc, #416]	; (a280 <main+0x298>)
    a0e0:	701d      	strb	r5, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    a0e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    a0e6:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_ms(500);
    a0e8:	20fa      	movs	r0, #250	; 0xfa
    a0ea:	4b66      	ldr	r3, [pc, #408]	; (a284 <main+0x29c>)
    a0ec:	0040      	lsls	r0, r0, #1
    a0ee:	4698      	mov	r8, r3
    a0f0:	4798      	blx	r3
	printf("\n\n\n---Started OTAFU file downloader application---\n");
    a0f2:	4865      	ldr	r0, [pc, #404]	; (a288 <main+0x2a0>)
    a0f4:	4d65      	ldr	r5, [pc, #404]	; (a28c <main+0x2a4>)
    a0f6:	47a8      	blx	r5
	down_state = NOT_READY;
    a0f8:	4e65      	ldr	r6, [pc, #404]	; (a290 <main+0x2a8>)
	sw_timer_get_config_defaults(&swt_conf);
    a0fa:	0020      	movs	r0, r4
    a0fc:	4b65      	ldr	r3, [pc, #404]	; (a294 <main+0x2ac>)
	down_state = NOT_READY;
    a0fe:	7037      	strb	r7, [r6, #0]
	sw_timer_get_config_defaults(&swt_conf);
    a100:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    a102:	4f65      	ldr	r7, [pc, #404]	; (a298 <main+0x2b0>)
    a104:	0021      	movs	r1, r4
    a106:	0038      	movs	r0, r7
    a108:	4b64      	ldr	r3, [pc, #400]	; (a29c <main+0x2b4>)
    a10a:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    a10c:	0038      	movs	r0, r7
    a10e:	4b64      	ldr	r3, [pc, #400]	; (a2a0 <main+0x2b8>)
    a110:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    a112:	0020      	movs	r0, r4
    a114:	4b63      	ldr	r3, [pc, #396]	; (a2a4 <main+0x2bc>)
    a116:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    a118:	464b      	mov	r3, r9
    a11a:	6123      	str	r3, [r4, #16]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    a11c:	4b62      	ldr	r3, [pc, #392]	; (a2a8 <main+0x2c0>)
    a11e:	0021      	movs	r1, r4
    a120:	0018      	movs	r0, r3
    a122:	4699      	mov	r9, r3
    a124:	4b61      	ldr	r3, [pc, #388]	; (a2ac <main+0x2c4>)
	httpc_conf.timer_inst = &swt_module_inst;
    a126:	6067      	str	r7, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    a128:	4798      	blx	r3
    a12a:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    a12c:	db7c      	blt.n	a228 <main+0x240>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    a12e:	4960      	ldr	r1, [pc, #384]	; (a2b0 <main+0x2c8>)
    a130:	4648      	mov	r0, r9
    a132:	4b60      	ldr	r3, [pc, #384]	; (a2b4 <main+0x2cc>)
    a134:	4798      	blx	r3
	sd_mmc_init();
    a136:	4b60      	ldr	r3, [pc, #384]	; (a2b8 <main+0x2d0>)
    a138:	4798      	blx	r3
    a13a:	4b60      	ldr	r3, [pc, #384]	; (a2bc <main+0x2d4>)
    a13c:	469b      	mov	fp, r3
    a13e:	4b60      	ldr	r3, [pc, #384]	; (a2c0 <main+0x2d8>)
    a140:	469a      	mov	sl, r3
    a142:	4b60      	ldr	r3, [pc, #384]	; (a2c4 <main+0x2dc>)
    a144:	4699      	mov	r9, r3
			status = sd_mmc_test_unit_ready(0);
    a146:	2000      	movs	r0, #0
    a148:	47d8      	blx	fp
			if (CTRL_FAIL == status) {
    a14a:	2801      	cmp	r0, #1
    a14c:	d035      	beq.n	a1ba <main+0x1d2>
		} while (CTRL_GOOD != status);
    a14e:	2800      	cmp	r0, #0
    a150:	d1f9      	bne.n	a146 <main+0x15e>
		printf("init_storage: mounting SD card...\r\n");
    a152:	485d      	ldr	r0, [pc, #372]	; (a2c8 <main+0x2e0>)
    a154:	47a8      	blx	r5
		memset(&fatfs, 0, sizeof(FATFS));
    a156:	4b5d      	ldr	r3, [pc, #372]	; (a2cc <main+0x2e4>)
    a158:	228c      	movs	r2, #140	; 0x8c
    a15a:	4699      	mov	r9, r3
    a15c:	2100      	movs	r1, #0
    a15e:	0018      	movs	r0, r3
    a160:	0092      	lsls	r2, r2, #2
    a162:	4b5b      	ldr	r3, [pc, #364]	; (a2d0 <main+0x2e8>)
    a164:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    a166:	4649      	mov	r1, r9
    a168:	2000      	movs	r0, #0
    a16a:	4b5a      	ldr	r3, [pc, #360]	; (a2d4 <main+0x2ec>)
    a16c:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    a16e:	280b      	cmp	r0, #11
    a170:	d05e      	beq.n	a230 <main+0x248>
		printf("init_storage: SD card mount OK.\r\n");
    a172:	4859      	ldr	r0, [pc, #356]	; (a2d8 <main+0x2f0>)
    a174:	47a8      	blx	r5
	down_state |= mask;
    a176:	2301      	movs	r3, #1
    a178:	7832      	ldrb	r2, [r6, #0]
    a17a:	4313      	orrs	r3, r2
    a17c:	7033      	strb	r3, [r6, #0]
    a17e:	4b57      	ldr	r3, [pc, #348]	; (a2dc <main+0x2f4>)
    a180:	4699      	mov	r9, r3

	init_state();
	configure_iot_sw_timer();
	configure_http_client();
	init_storage();
	nm_bsp_init();
    a182:	4b57      	ldr	r3, [pc, #348]	; (a2e0 <main+0x2f8>)
    a184:	4798      	blx	r3
	}*/
	
	tstrWifiInitParam param;
	int8_t ret;
	
	printf("...Paused. Press button to continue...\n");
    a186:	4857      	ldr	r0, [pc, #348]	; (a2e4 <main+0x2fc>)
    a188:	47a8      	blx	r5
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    a18a:	4b57      	ldr	r3, [pc, #348]	; (a2e8 <main+0x300>)
	while(1) {
		bool b1 = !port_pin_get_input_level(BUT1_IRQ_IN_PIN);
    a18c:	2101      	movs	r1, #1
    a18e:	469c      	mov	ip, r3
    a190:	e001      	b.n	a196 <main+0x1ae>
		bool b2 = !port_pin_get_input_level(BUT2_IRQ_IN_PIN);
		if (b1 || b2) break;
    a192:	2800      	cmp	r0, #0
    a194:	da07      	bge.n	a1a6 <main+0x1be>
    a196:	4662      	mov	r2, ip
    a198:	4663      	mov	r3, ip
    a19a:	6a1b      	ldr	r3, [r3, #32]
    a19c:	6a10      	ldr	r0, [r2, #32]
    a19e:	000a      	movs	r2, r1
		bool b1 = !port_pin_get_input_level(BUT1_IRQ_IN_PIN);
    a1a0:	08db      	lsrs	r3, r3, #3
		if (b1 || b2) break;
    a1a2:	439a      	bics	r2, r3
    a1a4:	d0f5      	beq.n	a192 <main+0x1aa>
	}
	param.pfAppWifiCb = wifi_cb;
    a1a6:	4b51      	ldr	r3, [pc, #324]	; (a2ec <main+0x304>)
	ret = m2m_wifi_init(&param);
    a1a8:	0020      	movs	r0, r4
	param.pfAppWifiCb = wifi_cb;
    a1aa:	9303      	str	r3, [sp, #12]
	ret = m2m_wifi_init(&param);
    a1ac:	4b50      	ldr	r3, [pc, #320]	; (a2f0 <main+0x308>)
    a1ae:	4798      	blx	r3
    a1b0:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    a1b2:	d00b      	beq.n	a1cc <main+0x1e4>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    a1b4:	484f      	ldr	r0, [pc, #316]	; (a2f4 <main+0x30c>)
    a1b6:	47c8      	blx	r9
    a1b8:	e7fe      	b.n	a1b8 <main+0x1d0>
				printf("init_storage: SD Card install failed.\r\n");
    a1ba:	4650      	mov	r0, sl
    a1bc:	47a8      	blx	r5
				printf("init_storage: try unplug and re-plug the card.\r\n");
    a1be:	484e      	ldr	r0, [pc, #312]	; (a2f8 <main+0x310>)
    a1c0:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    a1c2:	2000      	movs	r0, #0
    a1c4:	47c8      	blx	r9
    a1c6:	2802      	cmp	r0, #2
    a1c8:	d1fb      	bne.n	a1c2 <main+0x1da>
    a1ca:	e7bc      	b.n	a146 <main+0x15e>
		while (1) {
		}
	}
	
	socketInit();
    a1cc:	4b4b      	ldr	r3, [pc, #300]	; (a2fc <main+0x314>)
    a1ce:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
    a1d0:	4b4b      	ldr	r3, [pc, #300]	; (a300 <main+0x318>)
    a1d2:	494c      	ldr	r1, [pc, #304]	; (a304 <main+0x31c>)
    a1d4:	484c      	ldr	r0, [pc, #304]	; (a308 <main+0x320>)
    a1d6:	4798      	blx	r3

	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    a1d8:	4c4c      	ldr	r4, [pc, #304]	; (a30c <main+0x324>)
    a1da:	484d      	ldr	r0, [pc, #308]	; (a310 <main+0x328>)
    a1dc:	0021      	movs	r1, r4
    a1de:	47c8      	blx	r9
	ret = m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    a1e0:	23ff      	movs	r3, #255	; 0xff
    a1e2:	2202      	movs	r2, #2
    a1e4:	9300      	str	r3, [sp, #0]
    a1e6:	2106      	movs	r1, #6
    a1e8:	4b4a      	ldr	r3, [pc, #296]	; (a314 <main+0x32c>)
    a1ea:	0020      	movs	r0, r4
    a1ec:	4c4a      	ldr	r4, [pc, #296]	; (a318 <main+0x330>)
    a1ee:	47a0      	blx	r4
		
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    a1f0:	2330      	movs	r3, #48	; 0x30
    a1f2:	494a      	ldr	r1, [pc, #296]	; (a31c <main+0x334>)
    a1f4:	7832      	ldrb	r2, [r6, #0]
    a1f6:	468a      	mov	sl, r1
    a1f8:	4949      	ldr	r1, [pc, #292]	; (a320 <main+0x338>)
    a1fa:	001c      	movs	r4, r3
    a1fc:	4689      	mov	r9, r1
    a1fe:	421a      	tst	r2, r3
    a200:	d106      	bne.n	a210 <main+0x228>
		m2m_wifi_handle_events(NULL);
    a202:	2000      	movs	r0, #0
    a204:	47d0      	blx	sl
		sw_timer_task(&swt_module_inst);
    a206:	0038      	movs	r0, r7
    a208:	47c8      	blx	r9
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    a20a:	7833      	ldrb	r3, [r6, #0]
    a20c:	421c      	tst	r4, r3
    a20e:	d0f8      	beq.n	a202 <main+0x21a>
	}
	printf("Downloader complete.  Performing bootloader reset.\n");
    a210:	4844      	ldr	r0, [pc, #272]	; (a324 <main+0x33c>)
    a212:	47a8      	blx	r5
	delay_ms(100);
    a214:	2064      	movs	r0, #100	; 0x64
    a216:	47c0      	blx	r8
  __ASM volatile ("dsb");
    a218:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    a21c:	4a42      	ldr	r2, [pc, #264]	; (a328 <main+0x340>)
    a21e:	4b43      	ldr	r3, [pc, #268]	; (a32c <main+0x344>)
    a220:	60da      	str	r2, [r3, #12]
    a222:	f3bf 8f4f 	dsb	sy
    a226:	e7fe      	b.n	a226 <main+0x23e>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    a228:	4841      	ldr	r0, [pc, #260]	; (a330 <main+0x348>)
    a22a:	4b2c      	ldr	r3, [pc, #176]	; (a2dc <main+0x2f4>)
    a22c:	4798      	blx	r3
    a22e:	e7fe      	b.n	a22e <main+0x246>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    a230:	4b2a      	ldr	r3, [pc, #168]	; (a2dc <main+0x2f4>)
    a232:	210b      	movs	r1, #11
    a234:	483f      	ldr	r0, [pc, #252]	; (a334 <main+0x34c>)
    a236:	4699      	mov	r9, r3
    a238:	4798      	blx	r3
    a23a:	e7a2      	b.n	a182 <main+0x19a>
    a23c:	000107f9 	.word	0x000107f9
    a240:	0000b3f9 	.word	0x0000b3f9
    a244:	0000f221 	.word	0x0000f221
    a248:	40000800 	.word	0x40000800
    a24c:	20000bc4 	.word	0x20000bc4
    a250:	e000e100 	.word	0xe000e100
    a254:	40001400 	.word	0x40001400
    a258:	000106c5 	.word	0x000106c5
    a25c:	0001063d 	.word	0x0001063d
    a260:	0000f669 	.word	0x0000f669
    a264:	0000f50d 	.word	0x0000f50d
    a268:	0000f45d 	.word	0x0000f45d
    a26c:	0000f471 	.word	0x0000f471
    a270:	0000f361 	.word	0x0000f361
    a274:	20000e54 	.word	0x20000e54
    a278:	0000f1d1 	.word	0x0000f1d1
    a27c:	0000f1c1 	.word	0x0000f1c1
    a280:	200001f9 	.word	0x200001f9
    a284:	0000b439 	.word	0x0000b439
    a288:	0001570c 	.word	0x0001570c
    a28c:	00013f05 	.word	0x00013f05
    a290:	20000410 	.word	0x20000410
    a294:	00009891 	.word	0x00009891
    a298:	20000bd8 	.word	0x20000bd8
    a29c:	0000989d 	.word	0x0000989d
    a2a0:	00009945 	.word	0x00009945
    a2a4:	0000891d 	.word	0x0000891d
    a2a8:	20000c44 	.word	0x20000c44
    a2ac:	00008945 	.word	0x00008945
    a2b0:	00009ebd 	.word	0x00009ebd
    a2b4:	000089e1 	.word	0x000089e1
    a2b8:	0000a58d 	.word	0x0000a58d
    a2bc:	00008115 	.word	0x00008115
    a2c0:	00015788 	.word	0x00015788
    a2c4:	0000a5ad 	.word	0x0000a5ad
    a2c8:	000157e0 	.word	0x000157e0
    a2cc:	20000414 	.word	0x20000414
    a2d0:	00013c87 	.word	0x00013c87
    a2d4:	000133c1 	.word	0x000133c1
    a2d8:	00015834 	.word	0x00015834
    a2dc:	00013de9 	.word	0x00013de9
    a2e0:	0000b4cd 	.word	0x0000b4cd
    a2e4:	00015858 	.word	0x00015858
    a2e8:	41004400 	.word	0x41004400
    a2ec:	00009b35 	.word	0x00009b35
    a2f0:	0000c371 	.word	0x0000c371
    a2f4:	00015880 	.word	0x00015880
    a2f8:	000157b0 	.word	0x000157b0
    a2fc:	0000ded5 	.word	0x0000ded5
    a300:	0000df15 	.word	0x0000df15
    a304:	00009a71 	.word	0x00009a71
    a308:	00009aad 	.word	0x00009aad
    a30c:	00015bd4 	.word	0x00015bd4
    a310:	000158ac 	.word	0x000158ac
    a314:	00015bc8 	.word	0x00015bc8
    a318:	0000c6c9 	.word	0x0000c6c9
    a31c:	0000c4a9 	.word	0x0000c4a9
    a320:	000099e1 	.word	0x000099e1
    a324:	000158d0 	.word	0x000158d0
    a328:	05fa0004 	.word	0x05fa0004
    a32c:	e000ed00 	.word	0xe000ed00
    a330:	00015740 	.word	0x00015740
    a334:	00015804 	.word	0x00015804

0000a338 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    a338:	b5f0      	push	{r4, r5, r6, r7, lr}
    a33a:	46c6      	mov	lr, r8
	config->direction  = PORT_PIN_DIR_INPUT;
    a33c:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
    a33e:	2701      	movs	r7, #1
    a340:	b500      	push	{lr}
    a342:	b082      	sub	sp, #8
	config->direction  = PORT_PIN_DIR_INPUT;
    a344:	ac01      	add	r4, sp, #4

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    a346:	4d4d      	ldr	r5, [pc, #308]	; (a47c <system_board_init+0x144>)
    a348:	0021      	movs	r1, r4
    a34a:	2013      	movs	r0, #19
    a34c:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    a34e:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    a350:	70a6      	strb	r6, [r4, #2]
    a352:	47a8      	blx	r5
    a354:	0021      	movs	r1, r4
    a356:	2010      	movs	r0, #16
    a358:	47a8      	blx	r5
    a35a:	0021      	movs	r1, r4
    a35c:	2011      	movs	r0, #17
    a35e:	47a8      	blx	r5
    a360:	0021      	movs	r1, r4
    a362:	2012      	movs	r0, #18
    a364:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    a366:	0021      	movs	r1, r4
    a368:	2014      	movs	r0, #20
	config.direction	= PORT_PIN_DIR_INPUT;
    a36a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a36c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a36e:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    a370:	47a8      	blx	r5
    a372:	0021      	movs	r1, r4
    a374:	2015      	movs	r0, #21
    a376:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 1;
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    a378:	0021      	movs	r1, r4
    a37a:	2018      	movs	r0, #24
	config.direction	= PORT_PIN_DIR_INPUT;
    a37c:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    a37e:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
    a380:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    a382:	47a8      	blx	r5
    a384:	0021      	movs	r1, r4
    a386:	2019      	movs	r0, #25
    a388:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a38a:	2302      	movs	r3, #2
    a38c:	4698      	mov	r8, r3
	config.powersave	= 1;
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    a38e:	0021      	movs	r1, r4
    a390:	2036      	movs	r0, #54	; 0x36
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a392:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a394:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a396:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    a398:	47a8      	blx	r5
    a39a:	0021      	movs	r1, r4
    a39c:	2022      	movs	r0, #34	; 0x22
    a39e:	47a8      	blx	r5
    a3a0:	0021      	movs	r1, r4
    a3a2:	2037      	movs	r0, #55	; 0x37
    a3a4:	47a8      	blx	r5
    a3a6:	0021      	movs	r1, r4
    a3a8:	2023      	movs	r0, #35	; 0x23
    a3aa:	47a8      	blx	r5
    a3ac:	0021      	movs	r1, r4
    a3ae:	202a      	movs	r0, #42	; 0x2a
    a3b0:	47a8      	blx	r5

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    a3b2:	0021      	movs	r1, r4
    a3b4:	2003      	movs	r0, #3
	config.direction	= PORT_PIN_DIR_INPUT;
    a3b6:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    a3b8:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
    a3ba:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    a3bc:	47a8      	blx	r5
    a3be:	0021      	movs	r1, r4
    a3c0:	201f      	movs	r0, #31
    a3c2:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(BATSENSE_ADC_PIN);
    a3c4:	0021      	movs	r1, r4
    a3c6:	2002      	movs	r0, #2
	config.direction	= PORT_PIN_DIR_INPUT;
    a3c8:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a3ca:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a3cc:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
    a3ce:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LED_OUT_PIN);
    a3d0:	0021      	movs	r1, r4
    a3d2:	202b      	movs	r0, #43	; 0x2b
	config.direction	= PORT_PIN_DIR_INPUT;
    a3d4:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a3d6:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    a3d8:	70a7      	strb	r7, [r4, #2]
	CFG(LED_OUT_PIN);
    a3da:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a3dc:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    a3de:	0021      	movs	r1, r4
    a3e0:	2004      	movs	r0, #4
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a3e2:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a3e4:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a3e6:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    a3e8:	47a8      	blx	r5
    a3ea:	0021      	movs	r1, r4
    a3ec:	2005      	movs	r0, #5
    a3ee:	47a8      	blx	r5
    a3f0:	0021      	movs	r1, r4
    a3f2:	2006      	movs	r0, #6
    a3f4:	47a8      	blx	r5
    a3f6:	0021      	movs	r1, r4
    a3f8:	2007      	movs	r0, #7
    a3fa:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    a3fc:	0021      	movs	r1, r4
    a3fe:	2008      	movs	r0, #8
    a400:	47a8      	blx	r5
    a402:	0021      	movs	r1, r4
    a404:	2009      	movs	r0, #9
    a406:	47a8      	blx	r5
    a408:	0021      	movs	r1, r4
    a40a:	200a      	movs	r0, #10
    a40c:	47a8      	blx	r5
    a40e:	0021      	movs	r1, r4
    a410:	200b      	movs	r0, #11
    a412:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a414:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(ACCYEN_GP_OUT_PIN);
    a416:	0021      	movs	r1, r4
    a418:	2017      	movs	r0, #23
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a41a:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a41c:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a41e:	70a7      	strb	r7, [r4, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    a420:	47a8      	blx	r5

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a422:	4643      	mov	r3, r8
	config.powersave	= 1;
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    a424:	0021      	movs	r1, r4
    a426:	200e      	movs	r0, #14
	config.input_pull	= PORT_PIN_PULL_DOWN;
    a428:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    a42a:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    a42c:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    a42e:	47a8      	blx	r5
    a430:	0021      	movs	r1, r4
    a432:	200f      	movs	r0, #15
    a434:	47a8      	blx	r5
    a436:	0021      	movs	r1, r4
    a438:	200c      	movs	r0, #12
    a43a:	47a8      	blx	r5
    a43c:	0021      	movs	r1, r4
    a43e:	200d      	movs	r0, #13
    a440:	47a8      	blx	r5
    a442:	0021      	movs	r1, r4
    a444:	2029      	movs	r0, #41	; 0x29
    a446:	47a8      	blx	r5
    a448:	0021      	movs	r1, r4
    a44a:	2016      	movs	r0, #22
    a44c:	47a8      	blx	r5
    a44e:	0021      	movs	r1, r4
    a450:	2028      	movs	r0, #40	; 0x28
    a452:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    a454:	2280      	movs	r2, #128	; 0x80
    a456:	4b0a      	ldr	r3, [pc, #40]	; (a480 <system_board_init+0x148>)
    a458:	0512      	lsls	r2, r2, #20
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    a45a:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    a45c:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
    a45e:	70a6      	strb	r6, [r4, #2]
    a460:	615a      	str	r2, [r3, #20]
    a462:	2280      	movs	r2, #128	; 0x80
    a464:	0552      	lsls	r2, r2, #21
    a466:	615a      	str	r2, [r3, #20]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    a468:	0021      	movs	r1, r4
    a46a:	201b      	movs	r0, #27
    a46c:	47a8      	blx	r5
    a46e:	0021      	movs	r1, r4
    a470:	201c      	movs	r0, #28
    a472:	47a8      	blx	r5
	
    a474:	b002      	add	sp, #8
    a476:	bc04      	pop	{r2}
    a478:	4690      	mov	r8, r2
    a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a47c:	0000f4e9 	.word	0x0000f4e9
    a480:	41004400 	.word	0x41004400

0000a484 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    a484:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a486:	4b06      	ldr	r3, [pc, #24]	; (a4a0 <sd_mmc_configure_slot+0x1c>)
    a488:	4806      	ldr	r0, [pc, #24]	; (a4a4 <sd_mmc_configure_slot+0x20>)
    a48a:	6819      	ldr	r1, [r3, #0]
    a48c:	7800      	ldrb	r0, [r0, #0]
    a48e:	7f8b      	ldrb	r3, [r1, #30]
    a490:	4c05      	ldr	r4, [pc, #20]	; (a4a8 <sd_mmc_configure_slot+0x24>)
    a492:	1e5a      	subs	r2, r3, #1
    a494:	4193      	sbcs	r3, r2
    a496:	7b4a      	ldrb	r2, [r1, #13]
    a498:	b2db      	uxtb	r3, r3
    a49a:	6809      	ldr	r1, [r1, #0]
    a49c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    a49e:	bd10      	pop	{r4, pc}
    a4a0:	20000870 	.word	0x20000870
    a4a4:	20000898 	.word	0x20000898
    a4a8:	0000afd5 	.word	0x0000afd5

0000a4ac <sd_mmc_cmd13>:
{
    a4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ae:	46c6      	mov	lr, r8
			if (!(driver_get_response() & 0xFF)) {
    a4b0:	4b0b      	ldr	r3, [pc, #44]	; (a4e0 <sd_mmc_cmd13+0x34>)
{
    a4b2:	b500      	push	{lr}
    a4b4:	4c0b      	ldr	r4, [pc, #44]	; (a4e4 <sd_mmc_cmd13+0x38>)
    a4b6:	4e0c      	ldr	r6, [pc, #48]	; (a4e8 <sd_mmc_cmd13+0x3c>)
			if (!(driver_get_response() & 0xFF)) {
    a4b8:	4698      	mov	r8, r3
    a4ba:	27ff      	movs	r7, #255	; 0xff
    a4bc:	e005      	b.n	a4ca <sd_mmc_cmd13+0x1e>
    a4be:	47c0      	blx	r8
    a4c0:	4207      	tst	r7, r0
    a4c2:	d008      	beq.n	a4d6 <sd_mmc_cmd13+0x2a>
    a4c4:	3c01      	subs	r4, #1
		if (nec_timeout-- == 0) {
    a4c6:	2c00      	cmp	r4, #0
    a4c8:	d004      	beq.n	a4d4 <sd_mmc_cmd13+0x28>
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a4ca:	2100      	movs	r1, #0
    a4cc:	4807      	ldr	r0, [pc, #28]	; (a4ec <sd_mmc_cmd13+0x40>)
    a4ce:	47b0      	blx	r6
    a4d0:	1e05      	subs	r5, r0, #0
    a4d2:	d1f4      	bne.n	a4be <sd_mmc_cmd13+0x12>
				return false;
    a4d4:	2500      	movs	r5, #0
}
    a4d6:	0028      	movs	r0, r5
    a4d8:	bc04      	pop	{r2}
    a4da:	4690      	mov	r8, r2
    a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4de:	46c0      	nop			; (mov r8, r8)
    a4e0:	0000b22d 	.word	0x0000b22d
    a4e4:	00030d41 	.word	0x00030d41
    a4e8:	0000b215 	.word	0x0000b215
    a4ec:	00001b0d 	.word	0x00001b0d

0000a4f0 <sd_mmc_select_slot.part.0>:
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
    a4f0:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a4f2:	4b0e      	ldr	r3, [pc, #56]	; (a52c <sd_mmc_select_slot.part.0+0x3c>)
    a4f4:	0144      	lsls	r4, r0, #5
    a4f6:	1919      	adds	r1, r3, r4
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a4f8:	7a8a      	ldrb	r2, [r1, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a4fa:	3a03      	subs	r2, #3
    a4fc:	2a01      	cmp	r2, #1
    a4fe:	d90c      	bls.n	a51a <sd_mmc_select_slot.part.0+0x2a>
	sd_mmc_card = &sd_mmc_cards[slot];
    a500:	191c      	adds	r4, r3, r4
    a502:	4b0b      	ldr	r3, [pc, #44]	; (a530 <sd_mmc_select_slot.part.0+0x40>)
	sd_mmc_slot_sel = slot;
    a504:	4a0b      	ldr	r2, [pc, #44]	; (a534 <sd_mmc_select_slot.part.0+0x44>)
	sd_mmc_card = &sd_mmc_cards[slot];
    a506:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    a508:	4b0b      	ldr	r3, [pc, #44]	; (a538 <sd_mmc_select_slot.part.0+0x48>)
	sd_mmc_slot_sel = slot;
    a50a:	7010      	strb	r0, [r2, #0]
	sd_mmc_configure_slot();
    a50c:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    a50e:	7aa0      	ldrb	r0, [r4, #10]
    a510:	3802      	subs	r0, #2
    a512:	4243      	negs	r3, r0
    a514:	4158      	adcs	r0, r3
    a516:	b2c0      	uxtb	r0, r0
}
    a518:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a51a:	2202      	movs	r2, #2
    a51c:	728a      	strb	r2, [r1, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a51e:	4a07      	ldr	r2, [pc, #28]	; (a53c <sd_mmc_select_slot.part.0+0x4c>)
    a520:	511a      	str	r2, [r3, r4]
		sd_mmc_cards[slot].bus_width = 1;
    a522:	2201      	movs	r2, #1
    a524:	734a      	strb	r2, [r1, #13]
		sd_mmc_cards[slot].high_speed = 0;
    a526:	2200      	movs	r2, #0
    a528:	778a      	strb	r2, [r1, #30]
    a52a:	e7e9      	b.n	a500 <sd_mmc_select_slot.part.0+0x10>
    a52c:	20000874 	.word	0x20000874
    a530:	20000870 	.word	0x20000870
    a534:	20000898 	.word	0x20000898
    a538:	0000a485 	.word	0x0000a485
    a53c:	00061a80 	.word	0x00061a80

0000a540 <sd_mmc_cmd9_spi>:
{
    a540:	b530      	push	{r4, r5, lr}
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a542:	4c0d      	ldr	r4, [pc, #52]	; (a578 <sd_mmc_cmd9_spi+0x38>)
{
    a544:	b083      	sub	sp, #12
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a546:	6823      	ldr	r3, [r4, #0]
    a548:	2210      	movs	r2, #16
    a54a:	8919      	ldrh	r1, [r3, #8]
    a54c:	2301      	movs	r3, #1
    a54e:	0409      	lsls	r1, r1, #16
    a550:	9300      	str	r3, [sp, #0]
    a552:	480a      	ldr	r0, [pc, #40]	; (a57c <sd_mmc_cmd9_spi+0x3c>)
    a554:	4d0a      	ldr	r5, [pc, #40]	; (a580 <sd_mmc_cmd9_spi+0x40>)
    a556:	47a8      	blx	r5
    a558:	2800      	cmp	r0, #0
    a55a:	d102      	bne.n	a562 <sd_mmc_cmd9_spi+0x22>
		return false;
    a55c:	2000      	movs	r0, #0
}
    a55e:	b003      	add	sp, #12
    a560:	bd30      	pop	{r4, r5, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    a562:	6820      	ldr	r0, [r4, #0]
    a564:	2101      	movs	r1, #1
    a566:	300e      	adds	r0, #14
    a568:	4b06      	ldr	r3, [pc, #24]	; (a584 <sd_mmc_cmd9_spi+0x44>)
    a56a:	4798      	blx	r3
    a56c:	2800      	cmp	r0, #0
    a56e:	d0f5      	beq.n	a55c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    a570:	4b05      	ldr	r3, [pc, #20]	; (a588 <sd_mmc_cmd9_spi+0x48>)
    a572:	4798      	blx	r3
    a574:	e7f3      	b.n	a55e <sd_mmc_cmd9_spi+0x1e>
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	20000870 	.word	0x20000870
    a57c:	00081109 	.word	0x00081109
    a580:	0000b089 	.word	0x0000b089
    a584:	0000b2b1 	.word	0x0000b2b1
    a588:	0000b341 	.word	0x0000b341

0000a58c <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a58c:	2204      	movs	r2, #4
{
    a58e:	b510      	push	{r4, lr}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a590:	4b03      	ldr	r3, [pc, #12]	; (a5a0 <sd_mmc_init+0x14>)
    a592:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    a594:	4b03      	ldr	r3, [pc, #12]	; (a5a4 <sd_mmc_init+0x18>)
    a596:	32fb      	adds	r2, #251	; 0xfb
    a598:	701a      	strb	r2, [r3, #0]
	driver_init();
    a59a:	4b03      	ldr	r3, [pc, #12]	; (a5a8 <sd_mmc_init+0x1c>)
    a59c:	4798      	blx	r3
}
    a59e:	bd10      	pop	{r4, pc}
    a5a0:	20000874 	.word	0x20000874
    a5a4:	20000898 	.word	0x20000898
    a5a8:	0000aed9 	.word	0x0000aed9

0000a5ac <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    a5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5ae:	46ce      	mov	lr, r9
    a5b0:	4647      	mov	r7, r8
    a5b2:	b580      	push	{r7, lr}
    a5b4:	0005      	movs	r5, r0
    a5b6:	b087      	sub	sp, #28
		return SD_MMC_ERR_SLOT;
    a5b8:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    a5ba:	2800      	cmp	r0, #0
    a5bc:	d009      	beq.n	a5d2 <sd_mmc_check+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a5be:	4b96      	ldr	r3, [pc, #600]	; (a818 <sd_mmc_check+0x26c>)
    a5c0:	781b      	ldrb	r3, [r3, #0]
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d021      	beq.n	a60a <sd_mmc_check+0x5e>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    a5c6:	0020      	movs	r0, r4
    a5c8:	b007      	add	sp, #28
    a5ca:	bc0c      	pop	{r2, r3}
    a5cc:	4690      	mov	r8, r2
    a5ce:	4699      	mov	r9, r3
    a5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5d2:	2000      	movs	r0, #0
    a5d4:	4b91      	ldr	r3, [pc, #580]	; (a81c <sd_mmc_check+0x270>)
    a5d6:	4798      	blx	r3
    a5d8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    a5da:	2801      	cmp	r0, #1
    a5dc:	d1ef      	bne.n	a5be <sd_mmc_check+0x12>
	sd_mmc_card->type = CARD_TYPE_SD;
    a5de:	4f90      	ldr	r7, [pc, #576]	; (a820 <sd_mmc_check+0x274>)
    a5e0:	683b      	ldr	r3, [r7, #0]
    a5e2:	72d8      	strb	r0, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    a5e4:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
    a5e6:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
    a5e8:	4b8e      	ldr	r3, [pc, #568]	; (a824 <sd_mmc_check+0x278>)
    a5ea:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a5ec:	2088      	movs	r0, #136	; 0x88
    a5ee:	2100      	movs	r1, #0
    a5f0:	0140      	lsls	r0, r0, #5
    a5f2:	4e8d      	ldr	r6, [pc, #564]	; (a828 <sd_mmc_check+0x27c>)
    a5f4:	47b0      	blx	r6
    a5f6:	2800      	cmp	r0, #0
    a5f8:	d10b      	bne.n	a612 <sd_mmc_check+0x66>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a5fa:	2203      	movs	r2, #3
    a5fc:	683b      	ldr	r3, [r7, #0]
	return SD_MMC_ERR_UNUSABLE;
    a5fe:	2403      	movs	r4, #3
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a600:	729a      	strb	r2, [r3, #10]
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a602:	4b85      	ldr	r3, [pc, #532]	; (a818 <sd_mmc_check+0x26c>)
    a604:	781b      	ldrb	r3, [r3, #0]
    a606:	2b00      	cmp	r3, #0
    a608:	d1dd      	bne.n	a5c6 <sd_mmc_check+0x1a>
		driver_deselect_device(sd_mmc_slot_sel);
    a60a:	2000      	movs	r0, #0
    a60c:	4b87      	ldr	r3, [pc, #540]	; (a82c <sd_mmc_check+0x280>)
    a60e:	4798      	blx	r3
    a610:	e7d9      	b.n	a5c6 <sd_mmc_check+0x1a>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a612:	23d5      	movs	r3, #213	; 0xd5
    a614:	005b      	lsls	r3, r3, #1
    a616:	0019      	movs	r1, r3
    a618:	4885      	ldr	r0, [pc, #532]	; (a830 <sd_mmc_check+0x284>)
    a61a:	4698      	mov	r8, r3
    a61c:	47b0      	blx	r6
    a61e:	2800      	cmp	r0, #0
    a620:	d11b      	bne.n	a65a <sd_mmc_check+0xae>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a622:	683b      	ldr	r3, [r7, #0]
    a624:	7ada      	ldrb	r2, [r3, #11]
    a626:	07d3      	lsls	r3, r2, #31
    a628:	d421      	bmi.n	a66e <sd_mmc_check+0xc2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a62a:	2309      	movs	r3, #9
    a62c:	4013      	ands	r3, r2
    a62e:	2b01      	cmp	r3, #1
    a630:	d10d      	bne.n	a64e <sd_mmc_check+0xa2>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a632:	2180      	movs	r1, #128	; 0x80
    a634:	487f      	ldr	r0, [pc, #508]	; (a834 <sd_mmc_check+0x288>)
    a636:	0089      	lsls	r1, r1, #2
    a638:	47b0      	blx	r6
    a63a:	2800      	cmp	r0, #0
    a63c:	d0dd      	beq.n	a5fa <sd_mmc_check+0x4e>
    a63e:	683b      	ldr	r3, [r7, #0]
    a640:	7adb      	ldrb	r3, [r3, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a642:	07db      	lsls	r3, r3, #31
    a644:	d503      	bpl.n	a64e <sd_mmc_check+0xa2>
	if (!sd_mmc_cmd13()) {
    a646:	4b7c      	ldr	r3, [pc, #496]	; (a838 <sd_mmc_check+0x28c>)
    a648:	4798      	blx	r3
    a64a:	2800      	cmp	r0, #0
    a64c:	d0d5      	beq.n	a5fa <sd_mmc_check+0x4e>
	sd_mmc_configure_slot();
    a64e:	4b7b      	ldr	r3, [pc, #492]	; (a83c <sd_mmc_check+0x290>)
    a650:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    a652:	2200      	movs	r2, #0
    a654:	683b      	ldr	r3, [r7, #0]
    a656:	729a      	strb	r2, [r3, #10]
    a658:	e7b1      	b.n	a5be <sd_mmc_check+0x12>
	resp = driver_get_response();
    a65a:	4b79      	ldr	r3, [pc, #484]	; (a840 <sd_mmc_check+0x294>)
    a65c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    a65e:	1c43      	adds	r3, r0, #1
    a660:	d0df      	beq.n	a622 <sd_mmc_check+0x76>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a662:	0500      	lsls	r0, r0, #20
    a664:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
    a666:	2501      	movs	r5, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a668:	4540      	cmp	r0, r8
    a66a:	d1c6      	bne.n	a5fa <sd_mmc_check+0x4e>
    a66c:	e7d9      	b.n	a622 <sd_mmc_check+0x76>
    a66e:	1e6b      	subs	r3, r5, #1
    a670:	419d      	sbcs	r5, r3
    a672:	07ab      	lsls	r3, r5, #30
    a674:	4698      	mov	r8, r3
		resp = driver_get_response();
    a676:	4b72      	ldr	r3, [pc, #456]	; (a840 <sd_mmc_check+0x294>)
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a678:	4d72      	ldr	r5, [pc, #456]	; (a844 <sd_mmc_check+0x298>)
		resp = driver_get_response();
    a67a:	4699      	mov	r9, r3
    a67c:	e00b      	b.n	a696 <sd_mmc_check+0xea>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a67e:	4641      	mov	r1, r8
    a680:	4871      	ldr	r0, [pc, #452]	; (a848 <sd_mmc_check+0x29c>)
    a682:	47b0      	blx	r6
    a684:	2800      	cmp	r0, #0
    a686:	d00b      	beq.n	a6a0 <sd_mmc_check+0xf4>
		resp = driver_get_response();
    a688:	47c8      	blx	r9
		if (!(resp & R1_SPI_IDLE)) {
    a68a:	07c3      	lsls	r3, r0, #31
    a68c:	d400      	bmi.n	a690 <sd_mmc_check+0xe4>
    a68e:	e0f3      	b.n	a878 <sd_mmc_check+0x2cc>
    a690:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a692:	2d00      	cmp	r5, #0
    a694:	d004      	beq.n	a6a0 <sd_mmc_check+0xf4>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a696:	2100      	movs	r1, #0
    a698:	486c      	ldr	r0, [pc, #432]	; (a84c <sd_mmc_check+0x2a0>)
    a69a:	47b0      	blx	r6
    a69c:	2800      	cmp	r0, #0
    a69e:	d1ee      	bne.n	a67e <sd_mmc_check+0xd2>
			sd_mmc_card->type = CARD_TYPE_MMC;
    a6a0:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a6a2:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
    a6a4:	683a      	ldr	r2, [r7, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a6a6:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
    a6a8:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a6aa:	0140      	lsls	r0, r0, #5
    a6ac:	47b0      	blx	r6
    a6ae:	2800      	cmp	r0, #0
    a6b0:	d0a3      	beq.n	a5fa <sd_mmc_check+0x4e>
		resp = driver_get_response();
    a6b2:	4b63      	ldr	r3, [pc, #396]	; (a840 <sd_mmc_check+0x294>)
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a6b4:	4d63      	ldr	r5, [pc, #396]	; (a844 <sd_mmc_check+0x298>)
		resp = driver_get_response();
    a6b6:	4698      	mov	r8, r3
		if (!(resp & R1_SPI_IDLE)) {
    a6b8:	2301      	movs	r3, #1
    a6ba:	4699      	mov	r9, r3
    a6bc:	e002      	b.n	a6c4 <sd_mmc_check+0x118>
    a6be:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a6c0:	2d00      	cmp	r5, #0
    a6c2:	d09a      	beq.n	a5fa <sd_mmc_check+0x4e>
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a6c4:	2100      	movs	r1, #0
    a6c6:	4862      	ldr	r0, [pc, #392]	; (a850 <sd_mmc_check+0x2a4>)
    a6c8:	47b0      	blx	r6
    a6ca:	2800      	cmp	r0, #0
    a6cc:	d095      	beq.n	a5fa <sd_mmc_check+0x4e>
		resp = driver_get_response();
    a6ce:	47c0      	blx	r8
		if (!(resp & R1_SPI_IDLE)) {
    a6d0:	464b      	mov	r3, r9
    a6d2:	4203      	tst	r3, r0
    a6d4:	d1f3      	bne.n	a6be <sd_mmc_check+0x112>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a6d6:	2100      	movs	r1, #0
    a6d8:	485e      	ldr	r0, [pc, #376]	; (a854 <sd_mmc_check+0x2a8>)
    a6da:	47b0      	blx	r6
    a6dc:	2800      	cmp	r0, #0
    a6de:	d08c      	beq.n	a5fa <sd_mmc_check+0x4e>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a6e0:	47c0      	blx	r8
    a6e2:	23c0      	movs	r3, #192	; 0xc0
    a6e4:	05db      	lsls	r3, r3, #23
    a6e6:	4018      	ands	r0, r3
    a6e8:	2380      	movs	r3, #128	; 0x80
    a6ea:	05db      	lsls	r3, r3, #23
    a6ec:	4298      	cmp	r0, r3
    a6ee:	d104      	bne.n	a6fa <sd_mmc_check+0x14e>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a6f0:	2308      	movs	r3, #8
    a6f2:	683a      	ldr	r2, [r7, #0]
    a6f4:	7ad1      	ldrb	r1, [r2, #11]
    a6f6:	430b      	orrs	r3, r1
    a6f8:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a6fa:	2100      	movs	r1, #0
    a6fc:	4856      	ldr	r0, [pc, #344]	; (a858 <sd_mmc_check+0x2ac>)
    a6fe:	47b0      	blx	r6
    a700:	2800      	cmp	r0, #0
    a702:	d100      	bne.n	a706 <sd_mmc_check+0x15a>
    a704:	e779      	b.n	a5fa <sd_mmc_check+0x4e>
	if (!sd_mmc_cmd9_spi()) {
    a706:	4b55      	ldr	r3, [pc, #340]	; (a85c <sd_mmc_check+0x2b0>)
    a708:	4798      	blx	r3
    a70a:	2800      	cmp	r0, #0
    a70c:	d100      	bne.n	a710 <sd_mmc_check+0x164>
    a70e:	e774      	b.n	a5fa <sd_mmc_check+0x4e>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a710:	683a      	ldr	r2, [r7, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a712:	7b93      	ldrb	r3, [r2, #14]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
    a714:	069b      	lsls	r3, r3, #26
    a716:	0f1b      	lsrs	r3, r3, #28
    a718:	2b02      	cmp	r3, #2
    a71a:	d100      	bne.n	a71e <sd_mmc_check+0x172>
    a71c:	e148      	b.n	a9b0 <sd_mmc_check+0x404>
    a71e:	d800      	bhi.n	a722 <sd_mmc_check+0x176>
    a720:	e154      	b.n	a9cc <sd_mmc_check+0x420>
    a722:	2b03      	cmp	r3, #3
    a724:	d100      	bne.n	a728 <sd_mmc_check+0x17c>
    a726:	e14e      	b.n	a9c6 <sd_mmc_check+0x41a>
    a728:	2b04      	cmp	r3, #4
    a72a:	d000      	beq.n	a72e <sd_mmc_check+0x182>
    a72c:	e13d      	b.n	a9aa <sd_mmc_check+0x3fe>
		sd_mmc_card->version = CARD_VER_MMC_4;
    a72e:	2340      	movs	r3, #64	; 0x40
    a730:	7313      	strb	r3, [r2, #12]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a732:	210f      	movs	r1, #15
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a734:	2507      	movs	r5, #7
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a736:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a738:	4688      	mov	r8, r1
    a73a:	08d8      	lsrs	r0, r3, #3
    a73c:	4008      	ands	r0, r1
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a73e:	402b      	ands	r3, r5
	sd_mmc_card->clock = unit * mul * 1000;
    a740:	4947      	ldr	r1, [pc, #284]	; (a860 <sd_mmc_check+0x2b4>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a742:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a744:	585b      	ldr	r3, [r3, r1]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a746:	0080      	lsls	r0, r0, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a748:	469c      	mov	ip, r3
    a74a:	23fa      	movs	r3, #250	; 0xfa
    a74c:	4661      	mov	r1, ip
    a74e:	009b      	lsls	r3, r3, #2
    a750:	434b      	muls	r3, r1
    a752:	4944      	ldr	r1, [pc, #272]	; (a864 <sd_mmc_check+0x2b8>)
    a754:	5840      	ldr	r0, [r0, r1]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a756:	7d11      	ldrb	r1, [r2, #20]
    a758:	4343      	muls	r3, r0
    a75a:	6013      	str	r3, [r2, #0]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a75c:	7d53      	ldrb	r3, [r2, #21]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a75e:	7d90      	ldrb	r0, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a760:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a762:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a764:	1180      	asrs	r0, r0, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a766:	430b      	orrs	r3, r1
    a768:	4303      	orrs	r3, r0
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    a76a:	483f      	ldr	r0, [pc, #252]	; (a868 <sd_mmc_check+0x2bc>)
	value &=  ((uint32_t)1 << size) - 1;
    a76c:	051b      	lsls	r3, r3, #20
    a76e:	0d1b      	lsrs	r3, r3, #20
    a770:	4283      	cmp	r3, r0
    a772:	d00e      	beq.n	a792 <sd_mmc_check+0x1e6>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a774:	7e10      	ldrb	r0, [r2, #24]
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a776:	3301      	adds	r3, #1
    a778:	11c1      	asrs	r1, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a77a:	7dd0      	ldrb	r0, [r2, #23]
    a77c:	0040      	lsls	r0, r0, #1
    a77e:	4308      	orrs	r0, r1
	value &=  ((uint32_t)1 << size) - 1;
    a780:	4028      	ands	r0, r5
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a782:	3002      	adds	r0, #2
    a784:	4641      	mov	r1, r8
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a786:	4083      	lsls	r3, r0
    a788:	7cd0      	ldrb	r0, [r2, #19]
    a78a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a78c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a78e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a790:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    a792:	7b13      	ldrb	r3, [r2, #12]
    a794:	2b3f      	cmp	r3, #63	; 0x3f
    a796:	d936      	bls.n	a806 <sd_mmc_check+0x25a>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a798:	2100      	movs	r1, #0
    a79a:	2280      	movs	r2, #128	; 0x80
    a79c:	9100      	str	r1, [sp, #0]
    a79e:	2301      	movs	r3, #1
    a7a0:	0092      	lsls	r2, r2, #2
    a7a2:	4832      	ldr	r0, [pc, #200]	; (a86c <sd_mmc_check+0x2c0>)
    a7a4:	4d32      	ldr	r5, [pc, #200]	; (a870 <sd_mmc_check+0x2c4>)
    a7a6:	47a8      	blx	r5
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d100      	bne.n	a7ae <sd_mmc_check+0x202>
    a7ac:	e725      	b.n	a5fa <sd_mmc_check+0x4e>
    a7ae:	2332      	movs	r3, #50	; 0x32
    a7b0:	4698      	mov	r8, r3
    a7b2:	4d30      	ldr	r5, [pc, #192]	; (a874 <sd_mmc_check+0x2c8>)
		if (!driver_read_word(&ext_csd)) {
    a7b4:	a803      	add	r0, sp, #12
    a7b6:	47a8      	blx	r5
    a7b8:	2800      	cmp	r0, #0
    a7ba:	d100      	bne.n	a7be <sd_mmc_check+0x212>
    a7bc:	e71d      	b.n	a5fa <sd_mmc_check+0x4e>
    a7be:	4643      	mov	r3, r8
    a7c0:	3b01      	subs	r3, #1
    a7c2:	b29b      	uxth	r3, r3
    a7c4:	4698      	mov	r8, r3
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d1f4      	bne.n	a7b4 <sd_mmc_check+0x208>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a7ca:	6839      	ldr	r1, [r7, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7cc:	7d8a      	ldrb	r2, [r1, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7ce:	7d4b      	ldrb	r3, [r1, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7d0:	7d09      	ldrb	r1, [r1, #20]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a7d2:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7d4:	0289      	lsls	r1, r1, #10
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a7d6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a7d8:	430b      	orrs	r3, r1
    a7da:	4313      	orrs	r3, r2
    a7dc:	4a22      	ldr	r2, [pc, #136]	; (a868 <sd_mmc_check+0x2bc>)
	value &=  ((uint32_t)1 << size) - 1;
    a7de:	051b      	lsls	r3, r3, #20
    a7e0:	0d1b      	lsrs	r3, r3, #20
    a7e2:	4293      	cmp	r3, r2
    a7e4:	d100      	bne.n	a7e8 <sd_mmc_check+0x23c>
    a7e6:	e0fa      	b.n	a9de <sd_mmc_check+0x432>
    a7e8:	2332      	movs	r3, #50	; 0x32
    a7ea:	4698      	mov	r8, r3
    a7ec:	ab04      	add	r3, sp, #16
    a7ee:	4699      	mov	r9, r3
		if (!driver_read_word(&sec_count)) {
    a7f0:	4648      	mov	r0, r9
    a7f2:	47a8      	blx	r5
    a7f4:	2800      	cmp	r0, #0
    a7f6:	d100      	bne.n	a7fa <sd_mmc_check+0x24e>
    a7f8:	e6ff      	b.n	a5fa <sd_mmc_check+0x4e>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a7fa:	4643      	mov	r3, r8
    a7fc:	3301      	adds	r3, #1
    a7fe:	b29b      	uxth	r3, r3
    a800:	4698      	mov	r8, r3
    a802:	2b80      	cmp	r3, #128	; 0x80
    a804:	d1f4      	bne.n	a7f0 <sd_mmc_check+0x244>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a806:	2180      	movs	r1, #128	; 0x80
    a808:	480a      	ldr	r0, [pc, #40]	; (a834 <sd_mmc_check+0x288>)
    a80a:	0089      	lsls	r1, r1, #2
    a80c:	47b0      	blx	r6
    a80e:	2800      	cmp	r0, #0
    a810:	d100      	bne.n	a814 <sd_mmc_check+0x268>
    a812:	e6f2      	b.n	a5fa <sd_mmc_check+0x4e>
    a814:	e717      	b.n	a646 <sd_mmc_check+0x9a>
    a816:	46c0      	nop			; (mov r8, r8)
    a818:	20000898 	.word	0x20000898
    a81c:	0000a4f1 	.word	0x0000a4f1
    a820:	20000870 	.word	0x20000870
    a824:	0000b051 	.word	0x0000b051
    a828:	0000b215 	.word	0x0000b215
    a82c:	0000b029 	.word	0x0000b029
    a830:	00005508 	.word	0x00005508
    a834:	00001110 	.word	0x00001110
    a838:	0000a4ad 	.word	0x0000a4ad
    a83c:	0000a485 	.word	0x0000a485
    a840:	0000b22d 	.word	0x0000b22d
    a844:	00001bef 	.word	0x00001bef
    a848:	00001129 	.word	0x00001129
    a84c:	00001137 	.word	0x00001137
    a850:	00001101 	.word	0x00001101
    a854:	0000053a 	.word	0x0000053a
    a858:	0000113b 	.word	0x0000113b
    a85c:	0000a541 	.word	0x0000a541
    a860:	00015c44 	.word	0x00015c44
    a864:	00015c04 	.word	0x00015c04
    a868:	00000fff 	.word	0x00000fff
    a86c:	00081108 	.word	0x00081108
    a870:	0000b089 	.word	0x0000b089
    a874:	0000b239 	.word	0x0000b239
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a878:	2100      	movs	r1, #0
    a87a:	4864      	ldr	r0, [pc, #400]	; (aa0c <sd_mmc_check+0x460>)
    a87c:	47b0      	blx	r6
    a87e:	2800      	cmp	r0, #0
    a880:	d100      	bne.n	a884 <sd_mmc_check+0x2d8>
    a882:	e70d      	b.n	a6a0 <sd_mmc_check+0xf4>
	if ((driver_get_response() & OCR_CCS) != 0) {
    a884:	47c8      	blx	r9
    a886:	0043      	lsls	r3, r0, #1
    a888:	d504      	bpl.n	a894 <sd_mmc_check+0x2e8>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a88a:	2308      	movs	r3, #8
    a88c:	683a      	ldr	r2, [r7, #0]
    a88e:	7ad1      	ldrb	r1, [r2, #11]
    a890:	430b      	orrs	r3, r1
    a892:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a894:	2100      	movs	r1, #0
    a896:	485e      	ldr	r0, [pc, #376]	; (aa10 <sd_mmc_check+0x464>)
    a898:	47b0      	blx	r6
    a89a:	2800      	cmp	r0, #0
    a89c:	d100      	bne.n	a8a0 <sd_mmc_check+0x2f4>
    a89e:	e6ac      	b.n	a5fa <sd_mmc_check+0x4e>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a8a0:	683b      	ldr	r3, [r7, #0]
    a8a2:	7adb      	ldrb	r3, [r3, #11]
    a8a4:	07da      	lsls	r2, r3, #31
    a8a6:	d57a      	bpl.n	a99e <sd_mmc_check+0x3f2>
		if (!sd_mmc_cmd9_spi()) {
    a8a8:	4b5a      	ldr	r3, [pc, #360]	; (aa14 <sd_mmc_check+0x468>)
    a8aa:	4798      	blx	r3
    a8ac:	2800      	cmp	r0, #0
    a8ae:	d100      	bne.n	a8b2 <sd_mmc_check+0x306>
    a8b0:	e6a3      	b.n	a5fa <sd_mmc_check+0x4e>
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a8b2:	210f      	movs	r1, #15
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a8b4:	2007      	movs	r0, #7
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    a8b6:	683b      	ldr	r3, [r7, #0]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a8b8:	4688      	mov	r8, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a8ba:	7c5a      	ldrb	r2, [r3, #17]
    a8bc:	08d5      	lsrs	r5, r2, #3
    a8be:	400d      	ands	r5, r1
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a8c0:	4002      	ands	r2, r0
	sd_mmc_card->clock = unit * mul * 1000;
    a8c2:	4955      	ldr	r1, [pc, #340]	; (aa18 <sd_mmc_check+0x46c>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a8c4:	0092      	lsls	r2, r2, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a8c6:	5852      	ldr	r2, [r2, r1]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a8c8:	00ad      	lsls	r5, r5, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a8ca:	4694      	mov	ip, r2
    a8cc:	22fa      	movs	r2, #250	; 0xfa
    a8ce:	4661      	mov	r1, ip
    a8d0:	0092      	lsls	r2, r2, #2
    a8d2:	434a      	muls	r2, r1
    a8d4:	4951      	ldr	r1, [pc, #324]	; (aa1c <sd_mmc_check+0x470>)
    a8d6:	586d      	ldr	r5, [r5, r1]
    a8d8:	436a      	muls	r2, r5
    a8da:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    a8dc:	7b9a      	ldrb	r2, [r3, #14]
    a8de:	0992      	lsrs	r2, r2, #6
    a8e0:	d14e      	bne.n	a980 <sd_mmc_check+0x3d4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a8e2:	7d5a      	ldrb	r2, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a8e4:	7d19      	ldrb	r1, [r3, #20]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a8e6:	7d9d      	ldrb	r5, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a8e8:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a8ea:	0092      	lsls	r2, r2, #2
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a8ec:	11ad      	asrs	r5, r5, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a8ee:	430a      	orrs	r2, r1
    a8f0:	432a      	orrs	r2, r5
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a8f2:	7e1d      	ldrb	r5, [r3, #24]
	value &=  ((uint32_t)1 << size) - 1;
    a8f4:	0512      	lsls	r2, r2, #20
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a8f6:	11e9      	asrs	r1, r5, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a8f8:	7ddd      	ldrb	r5, [r3, #23]
	value &=  ((uint32_t)1 << size) - 1;
    a8fa:	0d12      	lsrs	r2, r2, #20
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a8fc:	006d      	lsls	r5, r5, #1
    a8fe:	430d      	orrs	r5, r1
	value &=  ((uint32_t)1 << size) - 1;
    a900:	4028      	ands	r0, r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a902:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a904:	3201      	adds	r2, #1
    a906:	4641      	mov	r1, r8
    a908:	4082      	lsls	r2, r0
    a90a:	7cd8      	ldrb	r0, [r3, #19]
    a90c:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a90e:	408a      	lsls	r2, r1
				/ 1024;
    a910:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
    a912:	605a      	str	r2, [r3, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    a914:	8919      	ldrh	r1, [r3, #8]
    a916:	4842      	ldr	r0, [pc, #264]	; (aa20 <sd_mmc_check+0x474>)
    a918:	0409      	lsls	r1, r1, #16
    a91a:	47b0      	blx	r6
    a91c:	2800      	cmp	r0, #0
    a91e:	d100      	bne.n	a922 <sd_mmc_check+0x376>
    a920:	e66b      	b.n	a5fa <sd_mmc_check+0x4e>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a922:	2301      	movs	r3, #1
    a924:	2208      	movs	r2, #8
    a926:	9300      	str	r3, [sp, #0]
    a928:	2100      	movs	r1, #0
    a92a:	483e      	ldr	r0, [pc, #248]	; (aa24 <sd_mmc_check+0x478>)
    a92c:	4d3e      	ldr	r5, [pc, #248]	; (aa28 <sd_mmc_check+0x47c>)
    a92e:	47a8      	blx	r5
    a930:	2800      	cmp	r0, #0
    a932:	d100      	bne.n	a936 <sd_mmc_check+0x38a>
    a934:	e661      	b.n	a5fa <sd_mmc_check+0x4e>
	if (!driver_start_read_blocks(scr, 1)) {
    a936:	ad04      	add	r5, sp, #16
    a938:	2101      	movs	r1, #1
    a93a:	0028      	movs	r0, r5
    a93c:	4b3b      	ldr	r3, [pc, #236]	; (aa2c <sd_mmc_check+0x480>)
    a93e:	4798      	blx	r3
    a940:	2800      	cmp	r0, #0
    a942:	d100      	bne.n	a946 <sd_mmc_check+0x39a>
    a944:	e659      	b.n	a5fa <sd_mmc_check+0x4e>
	if (!driver_wait_end_of_read_blocks()) {
    a946:	4b3a      	ldr	r3, [pc, #232]	; (aa30 <sd_mmc_check+0x484>)
    a948:	4798      	blx	r3
    a94a:	2800      	cmp	r0, #0
    a94c:	d100      	bne.n	a950 <sd_mmc_check+0x3a4>
    a94e:	e654      	b.n	a5fa <sd_mmc_check+0x4e>
	switch (SD_SCR_SD_SPEC(scr)) {
    a950:	220f      	movs	r2, #15
    a952:	782b      	ldrb	r3, [r5, #0]
    a954:	4013      	ands	r3, r2
    a956:	2b01      	cmp	r3, #1
    a958:	d031      	beq.n	a9be <sd_mmc_check+0x412>
    a95a:	2b00      	cmp	r3, #0
    a95c:	d02b      	beq.n	a9b6 <sd_mmc_check+0x40a>
    a95e:	2b02      	cmp	r3, #2
    a960:	d129      	bne.n	a9b6 <sd_mmc_check+0x40a>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    a962:	78ab      	ldrb	r3, [r5, #2]
    a964:	09db      	lsrs	r3, r3, #7
    a966:	2b01      	cmp	r3, #1
    a968:	d035      	beq.n	a9d6 <sd_mmc_check+0x42a>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    a96a:	2320      	movs	r3, #32
    a96c:	683a      	ldr	r2, [r7, #0]
    a96e:	7313      	strb	r3, [r2, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a970:	2209      	movs	r2, #9
    a972:	683b      	ldr	r3, [r7, #0]
    a974:	7adb      	ldrb	r3, [r3, #11]
    a976:	401a      	ands	r2, r3
    a978:	2a01      	cmp	r2, #1
    a97a:	d000      	beq.n	a97e <sd_mmc_check+0x3d2>
    a97c:	e661      	b.n	a642 <sd_mmc_check+0x96>
    a97e:	e658      	b.n	a632 <sd_mmc_check+0x86>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a980:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a982:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a984:	0212      	lsls	r2, r2, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a986:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a988:	430a      	orrs	r2, r1
				* 512;
    a98a:	2180      	movs	r1, #128	; 0x80
    a98c:	0089      	lsls	r1, r1, #2
    a98e:	468c      	mov	ip, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a990:	7dd8      	ldrb	r0, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a992:	4302      	orrs	r2, r0
	value &=  ((uint32_t)1 << size) - 1;
    a994:	0292      	lsls	r2, r2, #10
    a996:	0852      	lsrs	r2, r2, #1
    a998:	4462      	add	r2, ip
		sd_mmc_card->capacity =
    a99a:	605a      	str	r2, [r3, #4]
    a99c:	e7ba      	b.n	a914 <sd_mmc_check+0x368>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a99e:	2209      	movs	r2, #9
    a9a0:	4013      	ands	r3, r2
    a9a2:	2b01      	cmp	r3, #1
    a9a4:	d000      	beq.n	a9a8 <sd_mmc_check+0x3fc>
    a9a6:	e652      	b.n	a64e <sd_mmc_check+0xa2>
    a9a8:	e643      	b.n	a632 <sd_mmc_check+0x86>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    a9aa:	2312      	movs	r3, #18
    a9ac:	7313      	strb	r3, [r2, #12]
    a9ae:	e6c0      	b.n	a732 <sd_mmc_check+0x186>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    a9b0:	2322      	movs	r3, #34	; 0x22
    a9b2:	7313      	strb	r3, [r2, #12]
    a9b4:	e6bd      	b.n	a732 <sd_mmc_check+0x186>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a9b6:	2310      	movs	r3, #16
    a9b8:	683a      	ldr	r2, [r7, #0]
    a9ba:	7313      	strb	r3, [r2, #12]
    a9bc:	e7d8      	b.n	a970 <sd_mmc_check+0x3c4>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a9be:	231a      	movs	r3, #26
    a9c0:	683a      	ldr	r2, [r7, #0]
    a9c2:	7313      	strb	r3, [r2, #12]
    a9c4:	e7d4      	b.n	a970 <sd_mmc_check+0x3c4>
		sd_mmc_card->version = CARD_VER_MMC_3;
    a9c6:	2330      	movs	r3, #48	; 0x30
    a9c8:	7313      	strb	r3, [r2, #12]
    a9ca:	e6b2      	b.n	a732 <sd_mmc_check+0x186>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a9cc:	2b01      	cmp	r3, #1
    a9ce:	d1ec      	bne.n	a9aa <sd_mmc_check+0x3fe>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a9d0:	2314      	movs	r3, #20
    a9d2:	7313      	strb	r3, [r2, #12]
    a9d4:	e6ad      	b.n	a732 <sd_mmc_check+0x186>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a9d6:	683a      	ldr	r2, [r7, #0]
    a9d8:	332f      	adds	r3, #47	; 0x2f
    a9da:	7313      	strb	r3, [r2, #12]
    a9dc:	e7c8      	b.n	a970 <sd_mmc_check+0x3c4>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a9de:	2304      	movs	r3, #4
    a9e0:	4698      	mov	r8, r3
    a9e2:	ab04      	add	r3, sp, #16
    a9e4:	4699      	mov	r9, r3
			if (!driver_read_word(&sec_count)) {
    a9e6:	4648      	mov	r0, r9
    a9e8:	47a8      	blx	r5
    a9ea:	2800      	cmp	r0, #0
    a9ec:	d100      	bne.n	a9f0 <sd_mmc_check+0x444>
    a9ee:	e604      	b.n	a5fa <sd_mmc_check+0x4e>
    a9f0:	4643      	mov	r3, r8
    a9f2:	3b01      	subs	r3, #1
    a9f4:	b29b      	uxth	r3, r3
    a9f6:	4698      	mov	r8, r3
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d1f4      	bne.n	a9e6 <sd_mmc_check+0x43a>
		sd_mmc_card->capacity = sec_count / 2;
    a9fc:	9b04      	ldr	r3, [sp, #16]
    a9fe:	683a      	ldr	r2, [r7, #0]
    aa00:	085b      	lsrs	r3, r3, #1
    aa02:	6053      	str	r3, [r2, #4]
    aa04:	2336      	movs	r3, #54	; 0x36
    aa06:	4698      	mov	r8, r3
    aa08:	e6f2      	b.n	a7f0 <sd_mmc_check+0x244>
    aa0a:	46c0      	nop			; (mov r8, r8)
    aa0c:	0000053a 	.word	0x0000053a
    aa10:	0000113b 	.word	0x0000113b
    aa14:	0000a541 	.word	0x0000a541
    aa18:	00015c44 	.word	0x00015c44
    aa1c:	00015c60 	.word	0x00015c60
    aa20:	00001137 	.word	0x00001137
    aa24:	00081133 	.word	0x00081133
    aa28:	0000b089 	.word	0x0000b089
    aa2c:	0000b2b1 	.word	0x0000b2b1
    aa30:	0000b341 	.word	0x0000b341

0000aa34 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    aa34:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    aa36:	2800      	cmp	r0, #0
    aa38:	d001      	beq.n	aa3e <sd_mmc_get_type+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
    aa3a:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    aa3c:	bd10      	pop	{r4, pc}
    aa3e:	2000      	movs	r0, #0
    aa40:	4b07      	ldr	r3, [pc, #28]	; (aa60 <sd_mmc_get_type+0x2c>)
    aa42:	4798      	blx	r3
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    aa44:	2800      	cmp	r0, #0
    aa46:	d1f8      	bne.n	aa3a <sd_mmc_get_type+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    aa48:	4b06      	ldr	r3, [pc, #24]	; (aa64 <sd_mmc_get_type+0x30>)
    aa4a:	781b      	ldrb	r3, [r3, #0]
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d003      	beq.n	aa58 <sd_mmc_get_type+0x24>
	return sd_mmc_card->type;
    aa50:	4b05      	ldr	r3, [pc, #20]	; (aa68 <sd_mmc_get_type+0x34>)
    aa52:	681b      	ldr	r3, [r3, #0]
    aa54:	7ad8      	ldrb	r0, [r3, #11]
    aa56:	e7f1      	b.n	aa3c <sd_mmc_get_type+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    aa58:	4b04      	ldr	r3, [pc, #16]	; (aa6c <sd_mmc_get_type+0x38>)
    aa5a:	4798      	blx	r3
    aa5c:	e7f8      	b.n	aa50 <sd_mmc_get_type+0x1c>
    aa5e:	46c0      	nop			; (mov r8, r8)
    aa60:	0000a4f1 	.word	0x0000a4f1
    aa64:	20000898 	.word	0x20000898
    aa68:	20000870 	.word	0x20000870
    aa6c:	0000b029 	.word	0x0000b029

0000aa70 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    aa70:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
    aa72:	2800      	cmp	r0, #0
    aa74:	d001      	beq.n	aa7a <sd_mmc_get_capacity+0xa>
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
    aa76:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    aa78:	bd10      	pop	{r4, pc}
    aa7a:	2000      	movs	r0, #0
    aa7c:	4b07      	ldr	r3, [pc, #28]	; (aa9c <sd_mmc_get_capacity+0x2c>)
    aa7e:	4798      	blx	r3
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    aa80:	2800      	cmp	r0, #0
    aa82:	d1f8      	bne.n	aa76 <sd_mmc_get_capacity+0x6>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    aa84:	4b06      	ldr	r3, [pc, #24]	; (aaa0 <sd_mmc_get_capacity+0x30>)
    aa86:	781b      	ldrb	r3, [r3, #0]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d003      	beq.n	aa94 <sd_mmc_get_capacity+0x24>
	return sd_mmc_card->capacity;
    aa8c:	4b05      	ldr	r3, [pc, #20]	; (aaa4 <sd_mmc_get_capacity+0x34>)
    aa8e:	681b      	ldr	r3, [r3, #0]
    aa90:	6858      	ldr	r0, [r3, #4]
    aa92:	e7f1      	b.n	aa78 <sd_mmc_get_capacity+0x8>
		driver_deselect_device(sd_mmc_slot_sel);
    aa94:	4b04      	ldr	r3, [pc, #16]	; (aaa8 <sd_mmc_get_capacity+0x38>)
    aa96:	4798      	blx	r3
    aa98:	e7f8      	b.n	aa8c <sd_mmc_get_capacity+0x1c>
    aa9a:	46c0      	nop			; (mov r8, r8)
    aa9c:	0000a4f1 	.word	0x0000a4f1
    aaa0:	20000898 	.word	0x20000898
    aaa4:	20000870 	.word	0x20000870
    aaa8:	0000b029 	.word	0x0000b029

0000aaac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    aaac:	2000      	movs	r0, #0
    aaae:	4770      	bx	lr

0000aab0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    aab0:	b570      	push	{r4, r5, r6, lr}
    aab2:	000e      	movs	r6, r1
    aab4:	b082      	sub	sp, #8
    aab6:	0015      	movs	r5, r2
		return SD_MMC_ERR_SLOT;
    aab8:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    aaba:	2800      	cmp	r0, #0
    aabc:	d002      	beq.n	aac4 <sd_mmc_init_read_blocks+0x14>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    aabe:	0020      	movs	r0, r4
    aac0:	b002      	add	sp, #8
    aac2:	bd70      	pop	{r4, r5, r6, pc}
    aac4:	4b16      	ldr	r3, [pc, #88]	; (ab20 <sd_mmc_init_read_blocks+0x70>)
    aac6:	4798      	blx	r3
    aac8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    aaca:	d1f8      	bne.n	aabe <sd_mmc_init_read_blocks+0xe>
	if (!sd_mmc_cmd13()) {
    aacc:	4b15      	ldr	r3, [pc, #84]	; (ab24 <sd_mmc_init_read_blocks+0x74>)
    aace:	4798      	blx	r3
    aad0:	2800      	cmp	r0, #0
    aad2:	d017      	beq.n	ab04 <sd_mmc_init_read_blocks+0x54>
	if (nb_block > 1) {
    aad4:	2d01      	cmp	r5, #1
    aad6:	d920      	bls.n	ab1a <sd_mmc_init_read_blocks+0x6a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    aad8:	4813      	ldr	r0, [pc, #76]	; (ab28 <sd_mmc_init_read_blocks+0x78>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    aada:	4b14      	ldr	r3, [pc, #80]	; (ab2c <sd_mmc_init_read_blocks+0x7c>)
    aadc:	681b      	ldr	r3, [r3, #0]
    aade:	7adb      	ldrb	r3, [r3, #11]
    aae0:	071b      	lsls	r3, r3, #28
    aae2:	d400      	bmi.n	aae6 <sd_mmc_init_read_blocks+0x36>
		arg = (start * SD_MMC_BLOCK_SIZE);
    aae4:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    aae6:	2301      	movs	r3, #1
    aae8:	2280      	movs	r2, #128	; 0x80
    aaea:	9300      	str	r3, [sp, #0]
    aaec:	0031      	movs	r1, r6
    aaee:	002b      	movs	r3, r5
    aaf0:	0092      	lsls	r2, r2, #2
    aaf2:	4e0f      	ldr	r6, [pc, #60]	; (ab30 <sd_mmc_init_read_blocks+0x80>)
    aaf4:	47b0      	blx	r6
    aaf6:	2800      	cmp	r0, #0
    aaf8:	d004      	beq.n	ab04 <sd_mmc_init_read_blocks+0x54>
	sd_mmc_nb_block_remaining = nb_block;
    aafa:	4b0e      	ldr	r3, [pc, #56]	; (ab34 <sd_mmc_init_read_blocks+0x84>)
    aafc:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    aafe:	4b0e      	ldr	r3, [pc, #56]	; (ab38 <sd_mmc_init_read_blocks+0x88>)
    ab00:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    ab02:	e7dc      	b.n	aabe <sd_mmc_init_read_blocks+0xe>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    ab04:	4b0d      	ldr	r3, [pc, #52]	; (ab3c <sd_mmc_init_read_blocks+0x8c>)
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d001      	beq.n	ab10 <sd_mmc_init_read_blocks+0x60>
		return SD_MMC_ERR_COMM;
    ab0c:	2405      	movs	r4, #5
    ab0e:	e7d6      	b.n	aabe <sd_mmc_init_read_blocks+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
    ab10:	2000      	movs	r0, #0
    ab12:	4b0b      	ldr	r3, [pc, #44]	; (ab40 <sd_mmc_init_read_blocks+0x90>)
    ab14:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ab16:	2405      	movs	r4, #5
    ab18:	e7d1      	b.n	aabe <sd_mmc_init_read_blocks+0xe>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    ab1a:	480a      	ldr	r0, [pc, #40]	; (ab44 <sd_mmc_init_read_blocks+0x94>)
    ab1c:	e7dd      	b.n	aada <sd_mmc_init_read_blocks+0x2a>
    ab1e:	46c0      	nop			; (mov r8, r8)
    ab20:	0000a4f1 	.word	0x0000a4f1
    ab24:	0000a4ad 	.word	0x0000a4ad
    ab28:	00101112 	.word	0x00101112
    ab2c:	20000870 	.word	0x20000870
    ab30:	0000b089 	.word	0x0000b089
    ab34:	20000894 	.word	0x20000894
    ab38:	20000896 	.word	0x20000896
    ab3c:	20000898 	.word	0x20000898
    ab40:	0000b029 	.word	0x0000b029
    ab44:	00081111 	.word	0x00081111

0000ab48 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    ab48:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    ab4a:	4b07      	ldr	r3, [pc, #28]	; (ab68 <sd_mmc_start_read_blocks+0x20>)
{
    ab4c:	000c      	movs	r4, r1
	if (!driver_start_read_blocks(dest, nb_block)) {
    ab4e:	4798      	blx	r3
    ab50:	2800      	cmp	r0, #0
    ab52:	d103      	bne.n	ab5c <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
    ab54:	4b05      	ldr	r3, [pc, #20]	; (ab6c <sd_mmc_start_read_blocks+0x24>)
    ab56:	8018      	strh	r0, [r3, #0]
		return SD_MMC_ERR_COMM;
    ab58:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    ab5a:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    ab5c:	4a03      	ldr	r2, [pc, #12]	; (ab6c <sd_mmc_start_read_blocks+0x24>)
	return SD_MMC_OK;
    ab5e:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    ab60:	8813      	ldrh	r3, [r2, #0]
    ab62:	1b1c      	subs	r4, r3, r4
    ab64:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    ab66:	e7f8      	b.n	ab5a <sd_mmc_start_read_blocks+0x12>
    ab68:	0000b2b1 	.word	0x0000b2b1
    ab6c:	20000894 	.word	0x20000894

0000ab70 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    ab70:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
    ab72:	4b15      	ldr	r3, [pc, #84]	; (abc8 <sd_mmc_wait_end_of_read_blocks+0x58>)
{
    ab74:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    ab76:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ab78:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    ab7a:	2800      	cmp	r0, #0
    ab7c:	d101      	bne.n	ab82 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    ab7e:	0018      	movs	r0, r3
    ab80:	bd10      	pop	{r4, pc}
	if (abort) {
    ab82:	2c00      	cmp	r4, #0
    ab84:	d113      	bne.n	abae <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    ab86:	4b11      	ldr	r3, [pc, #68]	; (abcc <sd_mmc_wait_end_of_read_blocks+0x5c>)
    ab88:	881b      	ldrh	r3, [r3, #0]
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d10d      	bne.n	abaa <sd_mmc_wait_end_of_read_blocks+0x3a>
	if (sd_mmc_nb_block_to_tranfer == 1) {
    ab8e:	4b10      	ldr	r3, [pc, #64]	; (abd0 <sd_mmc_wait_end_of_read_blocks+0x60>)
    ab90:	881b      	ldrh	r3, [r3, #0]
    ab92:	2b01      	cmp	r3, #1
    ab94:	d005      	beq.n	aba2 <sd_mmc_wait_end_of_read_blocks+0x32>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    ab96:	2100      	movs	r1, #0
    ab98:	480e      	ldr	r0, [pc, #56]	; (abd4 <sd_mmc_wait_end_of_read_blocks+0x64>)
    ab9a:	4c0f      	ldr	r4, [pc, #60]	; (abd8 <sd_mmc_wait_end_of_read_blocks+0x68>)
    ab9c:	47a0      	blx	r4
    ab9e:	2800      	cmp	r0, #0
    aba0:	d00e      	beq.n	abc0 <sd_mmc_wait_end_of_read_blocks+0x50>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    aba2:	4b0e      	ldr	r3, [pc, #56]	; (abdc <sd_mmc_wait_end_of_read_blocks+0x6c>)
    aba4:	781b      	ldrb	r3, [r3, #0]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d005      	beq.n	abb6 <sd_mmc_wait_end_of_read_blocks+0x46>
		return SD_MMC_OK;
    abaa:	2300      	movs	r3, #0
    abac:	e7e7      	b.n	ab7e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    abae:	2200      	movs	r2, #0
    abb0:	4b06      	ldr	r3, [pc, #24]	; (abcc <sd_mmc_wait_end_of_read_blocks+0x5c>)
    abb2:	801a      	strh	r2, [r3, #0]
    abb4:	e7eb      	b.n	ab8e <sd_mmc_wait_end_of_read_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    abb6:	4b0a      	ldr	r3, [pc, #40]	; (abe0 <sd_mmc_wait_end_of_read_blocks+0x70>)
    abb8:	2000      	movs	r0, #0
    abba:	4798      	blx	r3
		return SD_MMC_OK;
    abbc:	2300      	movs	r3, #0
    abbe:	e7de      	b.n	ab7e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    abc0:	2100      	movs	r1, #0
    abc2:	4804      	ldr	r0, [pc, #16]	; (abd4 <sd_mmc_wait_end_of_read_blocks+0x64>)
    abc4:	47a0      	blx	r4
    abc6:	e7ec      	b.n	aba2 <sd_mmc_wait_end_of_read_blocks+0x32>
    abc8:	0000b341 	.word	0x0000b341
    abcc:	20000894 	.word	0x20000894
    abd0:	20000896 	.word	0x20000896
    abd4:	0000310c 	.word	0x0000310c
    abd8:	0000b215 	.word	0x0000b215
    abdc:	20000898 	.word	0x20000898
    abe0:	0000b029 	.word	0x0000b029

0000abe4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    abe4:	b570      	push	{r4, r5, r6, lr}
    abe6:	000e      	movs	r6, r1
    abe8:	b082      	sub	sp, #8
    abea:	0015      	movs	r5, r2
		return SD_MMC_ERR_SLOT;
    abec:	2404      	movs	r4, #4
	if (slot >= SD_MMC_MEM_CNT) {
    abee:	2800      	cmp	r0, #0
    abf0:	d002      	beq.n	abf8 <sd_mmc_init_write_blocks+0x14>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    abf2:	0020      	movs	r0, r4
    abf4:	b002      	add	sp, #8
    abf6:	bd70      	pop	{r4, r5, r6, pc}
    abf8:	4b12      	ldr	r3, [pc, #72]	; (ac44 <sd_mmc_init_write_blocks+0x60>)
    abfa:	4798      	blx	r3
    abfc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    abfe:	d1f8      	bne.n	abf2 <sd_mmc_init_write_blocks+0xe>
	if (nb_block > 1) {
    ac00:	2d01      	cmp	r5, #1
    ac02:	d91d      	bls.n	ac40 <sd_mmc_init_write_blocks+0x5c>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    ac04:	4810      	ldr	r0, [pc, #64]	; (ac48 <sd_mmc_init_write_blocks+0x64>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    ac06:	4b11      	ldr	r3, [pc, #68]	; (ac4c <sd_mmc_init_write_blocks+0x68>)
    ac08:	681b      	ldr	r3, [r3, #0]
    ac0a:	7adb      	ldrb	r3, [r3, #11]
    ac0c:	071b      	lsls	r3, r3, #28
    ac0e:	d400      	bmi.n	ac12 <sd_mmc_init_write_blocks+0x2e>
		arg = (start * SD_MMC_BLOCK_SIZE);
    ac10:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    ac12:	2301      	movs	r3, #1
    ac14:	2280      	movs	r2, #128	; 0x80
    ac16:	9300      	str	r3, [sp, #0]
    ac18:	0031      	movs	r1, r6
    ac1a:	002b      	movs	r3, r5
    ac1c:	0092      	lsls	r2, r2, #2
    ac1e:	4e0c      	ldr	r6, [pc, #48]	; (ac50 <sd_mmc_init_write_blocks+0x6c>)
    ac20:	47b0      	blx	r6
    ac22:	2800      	cmp	r0, #0
    ac24:	d107      	bne.n	ac36 <sd_mmc_init_write_blocks+0x52>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    ac26:	4b0b      	ldr	r3, [pc, #44]	; (ac54 <sd_mmc_init_write_blocks+0x70>)
		return SD_MMC_ERR_COMM;
    ac28:	2405      	movs	r4, #5
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    ac2a:	781b      	ldrb	r3, [r3, #0]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d1e0      	bne.n	abf2 <sd_mmc_init_write_blocks+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
    ac30:	4b09      	ldr	r3, [pc, #36]	; (ac58 <sd_mmc_init_write_blocks+0x74>)
    ac32:	4798      	blx	r3
    ac34:	e7dd      	b.n	abf2 <sd_mmc_init_write_blocks+0xe>
	sd_mmc_nb_block_remaining = nb_block;
    ac36:	4b09      	ldr	r3, [pc, #36]	; (ac5c <sd_mmc_init_write_blocks+0x78>)
    ac38:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    ac3a:	4b09      	ldr	r3, [pc, #36]	; (ac60 <sd_mmc_init_write_blocks+0x7c>)
    ac3c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    ac3e:	e7d8      	b.n	abf2 <sd_mmc_init_write_blocks+0xe>
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    ac40:	4808      	ldr	r0, [pc, #32]	; (ac64 <sd_mmc_init_write_blocks+0x80>)
    ac42:	e7e0      	b.n	ac06 <sd_mmc_init_write_blocks+0x22>
    ac44:	0000a4f1 	.word	0x0000a4f1
    ac48:	00109119 	.word	0x00109119
    ac4c:	20000870 	.word	0x20000870
    ac50:	0000b089 	.word	0x0000b089
    ac54:	20000898 	.word	0x20000898
    ac58:	0000b029 	.word	0x0000b029
    ac5c:	20000894 	.word	0x20000894
    ac60:	20000896 	.word	0x20000896
    ac64:	00089118 	.word	0x00089118

0000ac68 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    ac68:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    ac6a:	4b07      	ldr	r3, [pc, #28]	; (ac88 <sd_mmc_start_write_blocks+0x20>)
{
    ac6c:	000c      	movs	r4, r1
	if (!driver_start_write_blocks(src, nb_block)) {
    ac6e:	4798      	blx	r3
    ac70:	2800      	cmp	r0, #0
    ac72:	d103      	bne.n	ac7c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
    ac74:	4b05      	ldr	r3, [pc, #20]	; (ac8c <sd_mmc_start_write_blocks+0x24>)
    ac76:	8018      	strh	r0, [r3, #0]
		return SD_MMC_ERR_COMM;
    ac78:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    ac7a:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    ac7c:	4a03      	ldr	r2, [pc, #12]	; (ac8c <sd_mmc_start_write_blocks+0x24>)
	return SD_MMC_OK;
    ac7e:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
    ac80:	8813      	ldrh	r3, [r2, #0]
    ac82:	1b1c      	subs	r4, r3, r4
    ac84:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    ac86:	e7f8      	b.n	ac7a <sd_mmc_start_write_blocks+0x12>
    ac88:	0000b345 	.word	0x0000b345
    ac8c:	20000894 	.word	0x20000894

0000ac90 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    ac90:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
    ac92:	4b0e      	ldr	r3, [pc, #56]	; (accc <sd_mmc_wait_end_of_write_blocks+0x3c>)
{
    ac94:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    ac96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ac98:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    ac9a:	2800      	cmp	r0, #0
    ac9c:	d101      	bne.n	aca2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    ac9e:	0018      	movs	r0, r3
    aca0:	bd10      	pop	{r4, pc}
	if (abort) {
    aca2:	2c00      	cmp	r4, #0
    aca4:	d109      	bne.n	acba <sd_mmc_wait_end_of_write_blocks+0x2a>
	} else if (sd_mmc_nb_block_remaining) {
    aca6:	4b0a      	ldr	r3, [pc, #40]	; (acd0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    aca8:	881b      	ldrh	r3, [r3, #0]
    acaa:	2b00      	cmp	r3, #0
    acac:	d103      	bne.n	acb6 <sd_mmc_wait_end_of_write_blocks+0x26>
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    acae:	4b09      	ldr	r3, [pc, #36]	; (acd4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    acb0:	781b      	ldrb	r3, [r3, #0]
    acb2:	2b00      	cmp	r3, #0
    acb4:	d005      	beq.n	acc2 <sd_mmc_wait_end_of_write_blocks+0x32>
		return SD_MMC_OK;
    acb6:	2300      	movs	r3, #0
    acb8:	e7f1      	b.n	ac9e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_nb_block_remaining = 0;
    acba:	2200      	movs	r2, #0
    acbc:	4b04      	ldr	r3, [pc, #16]	; (acd0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    acbe:	801a      	strh	r2, [r3, #0]
    acc0:	e7f5      	b.n	acae <sd_mmc_wait_end_of_write_blocks+0x1e>
		driver_deselect_device(sd_mmc_slot_sel);
    acc2:	4b05      	ldr	r3, [pc, #20]	; (acd8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    acc4:	2000      	movs	r0, #0
    acc6:	4798      	blx	r3
		return SD_MMC_OK;
    acc8:	2300      	movs	r3, #0
    acca:	e7e8      	b.n	ac9e <sd_mmc_wait_end_of_write_blocks+0xe>
    accc:	0000b3d5 	.word	0x0000b3d5
    acd0:	20000894 	.word	0x20000894
    acd4:	20000898 	.word	0x20000898
    acd8:	0000b029 	.word	0x0000b029

0000acdc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    acdc:	b530      	push	{r4, r5, lr}
    acde:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    ace0:	466b      	mov	r3, sp
    ace2:	1d99      	adds	r1, r3, #6
    ace4:	23ff      	movs	r3, #255	; 0xff
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    ace6:	4d0c      	ldr	r5, [pc, #48]	; (ad18 <sd_mmc_spi_start_write_block+0x3c>)
    ace8:	2201      	movs	r2, #1
    acea:	0028      	movs	r0, r5
    acec:	4c0b      	ldr	r4, [pc, #44]	; (ad1c <sd_mmc_spi_start_write_block+0x40>)
	uint8_t dummy = 0xFF;
    acee:	700b      	strb	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    acf0:	47a0      	blx	r4
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    acf2:	4b0b      	ldr	r3, [pc, #44]	; (ad20 <sd_mmc_spi_start_write_block+0x44>)
    acf4:	881b      	ldrh	r3, [r3, #0]
    acf6:	2b01      	cmp	r3, #1
    acf8:	d008      	beq.n	ad0c <sd_mmc_spi_start_write_block+0x30>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    acfa:	466b      	mov	r3, sp
    acfc:	1dd9      	adds	r1, r3, #7
    acfe:	23fc      	movs	r3, #252	; 0xfc
    ad00:	700b      	strb	r3, [r1, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    ad02:	2201      	movs	r2, #1
    ad04:	0028      	movs	r0, r5
    ad06:	47a0      	blx	r4
}
    ad08:	b003      	add	sp, #12
    ad0a:	bd30      	pop	{r4, r5, pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    ad0c:	466b      	mov	r3, sp
    ad0e:	1dd9      	adds	r1, r3, #7
    ad10:	23fe      	movs	r3, #254	; 0xfe
    ad12:	700b      	strb	r3, [r1, #0]
    ad14:	e7f5      	b.n	ad02 <sd_mmc_spi_start_write_block+0x26>
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	2000089c 	.word	0x2000089c
    ad1c:	0000fe6d 	.word	0x0000fe6d
    ad20:	200008e0 	.word	0x200008e0

0000ad24 <sd_mmc_spi_wait_busy>:
{
    ad24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad26:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    ad28:	466b      	mov	r3, sp
    ad2a:	1ddd      	adds	r5, r3, #7
    ad2c:	23ff      	movs	r3, #255	; 0xff
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ad2e:	4f11      	ldr	r7, [pc, #68]	; (ad74 <sd_mmc_spi_wait_busy+0x50>)
    ad30:	4e11      	ldr	r6, [pc, #68]	; (ad78 <sd_mmc_spi_wait_busy+0x54>)
    ad32:	2201      	movs	r2, #1
    ad34:	0029      	movs	r1, r5
    ad36:	0038      	movs	r0, r7
	uint8_t line = 0xFF;
    ad38:	702b      	strb	r3, [r5, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ad3a:	47b0      	blx	r6
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ad3c:	23ff      	movs	r3, #255	; 0xff
    ad3e:	2201      	movs	r2, #1
    ad40:	0029      	movs	r1, r5
    ad42:	0038      	movs	r0, r7
    ad44:	47b0      	blx	r6
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    ad46:	23ff      	movs	r3, #255	; 0xff
    ad48:	2201      	movs	r2, #1
    ad4a:	0029      	movs	r1, r5
    ad4c:	0038      	movs	r0, r7
    ad4e:	47b0      	blx	r6
    ad50:	4c0a      	ldr	r4, [pc, #40]	; (ad7c <sd_mmc_spi_wait_busy+0x58>)
    ad52:	e007      	b.n	ad64 <sd_mmc_spi_wait_busy+0x40>
    ad54:	23ff      	movs	r3, #255	; 0xff
    ad56:	2201      	movs	r2, #1
    ad58:	0029      	movs	r1, r5
    ad5a:	0038      	movs	r0, r7
    ad5c:	3c01      	subs	r4, #1
    ad5e:	47b0      	blx	r6
		if (!(nec_timeout--)) {
    ad60:	2c00      	cmp	r4, #0
    ad62:	d005      	beq.n	ad70 <sd_mmc_spi_wait_busy+0x4c>
	} while (line != 0xFF);
    ad64:	782b      	ldrb	r3, [r5, #0]
    ad66:	2bff      	cmp	r3, #255	; 0xff
    ad68:	d1f4      	bne.n	ad54 <sd_mmc_spi_wait_busy+0x30>
	return true;
    ad6a:	2001      	movs	r0, #1
}
    ad6c:	b003      	add	sp, #12
    ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
    ad70:	2000      	movs	r0, #0
    ad72:	e7fb      	b.n	ad6c <sd_mmc_spi_wait_busy+0x48>
    ad74:	2000089c 	.word	0x2000089c
    ad78:	0000fcc9 	.word	0x0000fcc9
    ad7c:	00030d40 	.word	0x00030d40

0000ad80 <sd_mmc_spi_start_read_block>:
{
    ad80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad82:	46c6      	mov	lr, r8
    ad84:	b500      	push	{lr}
    ad86:	b082      	sub	sp, #8
	token = 0;
    ad88:	466b      	mov	r3, sp
    ad8a:	1ddd      	adds	r5, r3, #7
    ad8c:	2300      	movs	r3, #0
    ad8e:	702b      	strb	r3, [r5, #0]
    ad90:	4b12      	ldr	r3, [pc, #72]	; (addc <sd_mmc_spi_start_read_block+0x5c>)
    ad92:	4c13      	ldr	r4, [pc, #76]	; (ade0 <sd_mmc_spi_start_read_block+0x60>)
    ad94:	4698      	mov	r8, r3
    ad96:	4f13      	ldr	r7, [pc, #76]	; (ade4 <sd_mmc_spi_start_read_block+0x64>)
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    ad98:	260f      	movs	r6, #15
    ad9a:	e004      	b.n	ada6 <sd_mmc_spi_start_read_block+0x26>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    ad9c:	2bfe      	cmp	r3, #254	; 0xfe
    ad9e:	d016      	beq.n	adce <sd_mmc_spi_start_read_block+0x4e>
    ada0:	3c01      	subs	r4, #1
		if (i-- == 0) {
    ada2:	2c00      	cmp	r4, #0
    ada4:	d015      	beq.n	add2 <sd_mmc_spi_start_read_block+0x52>
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    ada6:	23ff      	movs	r3, #255	; 0xff
    ada8:	2201      	movs	r2, #1
    adaa:	0029      	movs	r1, r5
    adac:	4640      	mov	r0, r8
    adae:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    adb0:	782b      	ldrb	r3, [r5, #0]
    adb2:	001a      	movs	r2, r3
    adb4:	43b2      	bics	r2, r6
    adb6:	d1f1      	bne.n	ad9c <sd_mmc_spi_start_read_block+0x1c>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    adb8:	3207      	adds	r2, #7
    adba:	421a      	tst	r2, r3
    adbc:	d100      	bne.n	adc0 <sd_mmc_spi_start_read_block+0x40>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    adbe:	220b      	movs	r2, #11
			return false;
    adc0:	2000      	movs	r0, #0
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    adc2:	4b09      	ldr	r3, [pc, #36]	; (ade8 <sd_mmc_spi_start_read_block+0x68>)
    adc4:	701a      	strb	r2, [r3, #0]
}
    adc6:	b002      	add	sp, #8
    adc8:	bc04      	pop	{r2}
    adca:	4690      	mov	r8, r2
    adcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    adce:	2001      	movs	r0, #1
    add0:	e7f9      	b.n	adc6 <sd_mmc_spi_start_read_block+0x46>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    add2:	2204      	movs	r2, #4
    add4:	4b04      	ldr	r3, [pc, #16]	; (ade8 <sd_mmc_spi_start_read_block+0x68>)
			return false;
    add6:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    add8:	701a      	strb	r2, [r3, #0]
			return false;
    adda:	e7f4      	b.n	adc6 <sd_mmc_spi_start_read_block+0x46>
    addc:	2000089c 	.word	0x2000089c
    ade0:	0007a120 	.word	0x0007a120
    ade4:	0000fcc9 	.word	0x0000fcc9
    ade8:	200008df 	.word	0x200008df

0000adec <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    adec:	b530      	push	{r4, r5, lr}
    adee:	b083      	sub	sp, #12
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    adf0:	466b      	mov	r3, sp
    adf2:	1d99      	adds	r1, r3, #6
    adf4:	2301      	movs	r3, #1
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    adf6:	4d16      	ldr	r5, [pc, #88]	; (ae50 <sd_mmc_spi_stop_write_block+0x64>)
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    adf8:	425b      	negs	r3, r3
    adfa:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    adfc:	2202      	movs	r2, #2
    adfe:	0028      	movs	r0, r5
    ae00:	4b14      	ldr	r3, [pc, #80]	; (ae54 <sd_mmc_spi_stop_write_block+0x68>)
    ae02:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    ae04:	466b      	mov	r3, sp
    ae06:	1d5c      	adds	r4, r3, #5
    ae08:	2201      	movs	r2, #1
    ae0a:	23ff      	movs	r3, #255	; 0xff
    ae0c:	0028      	movs	r0, r5
    ae0e:	0021      	movs	r1, r4
    ae10:	4d11      	ldr	r5, [pc, #68]	; (ae58 <sd_mmc_spi_stop_write_block+0x6c>)
    ae12:	47a8      	blx	r5
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    ae14:	2311      	movs	r3, #17
    ae16:	7822      	ldrb	r2, [r4, #0]
    ae18:	4013      	ands	r3, r2
    ae1a:	2b01      	cmp	r3, #1
    ae1c:	d005      	beq.n	ae2a <sd_mmc_spi_stop_write_block+0x3e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ae1e:	2201      	movs	r2, #1
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    ae20:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ae22:	4b0e      	ldr	r3, [pc, #56]	; (ae5c <sd_mmc_spi_stop_write_block+0x70>)
    ae24:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
	}
	return true;
}
    ae26:	b003      	add	sp, #12
    ae28:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    ae2a:	231e      	movs	r3, #30
    ae2c:	401a      	ands	r2, r3
    ae2e:	2a04      	cmp	r2, #4
    ae30:	d00b      	beq.n	ae4a <sd_mmc_spi_stop_write_block+0x5e>
    ae32:	2a0a      	cmp	r2, #10
    ae34:	d104      	bne.n	ae40 <sd_mmc_spi_stop_write_block+0x54>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    ae36:	4b09      	ldr	r3, [pc, #36]	; (ae5c <sd_mmc_spi_stop_write_block+0x70>)
    ae38:	3a02      	subs	r2, #2
    ae3a:	701a      	strb	r2, [r3, #0]
		return false;
    ae3c:	2000      	movs	r0, #0
    ae3e:	e7f2      	b.n	ae26 <sd_mmc_spi_stop_write_block+0x3a>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    ae40:	220a      	movs	r2, #10
    ae42:	4b06      	ldr	r3, [pc, #24]	; (ae5c <sd_mmc_spi_stop_write_block+0x70>)
		return false;
    ae44:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    ae46:	701a      	strb	r2, [r3, #0]
		return false;
    ae48:	e7ed      	b.n	ae26 <sd_mmc_spi_stop_write_block+0x3a>
	return true;
    ae4a:	2001      	movs	r0, #1
    ae4c:	e7eb      	b.n	ae26 <sd_mmc_spi_stop_write_block+0x3a>
    ae4e:	46c0      	nop			; (mov r8, r8)
    ae50:	2000089c 	.word	0x2000089c
    ae54:	0000fe6d 	.word	0x0000fe6d
    ae58:	0000fcc9 	.word	0x0000fcc9
    ae5c:	200008df 	.word	0x200008df

0000ae60 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    ae60:	b570      	push	{r4, r5, r6, lr}
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    ae62:	4b15      	ldr	r3, [pc, #84]	; (aeb8 <sd_mmc_spi_stop_multiwrite_block+0x58>)
{
    ae64:	b082      	sub	sp, #8
	if (1 == sd_mmc_spi_nb_block) {
    ae66:	881c      	ldrh	r4, [r3, #0]
    ae68:	2c01      	cmp	r4, #1
    ae6a:	d023      	beq.n	aeb4 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    ae6c:	4b13      	ldr	r3, [pc, #76]	; (aebc <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    ae6e:	8819      	ldrh	r1, [r3, #0]
    ae70:	4b13      	ldr	r3, [pc, #76]	; (aec0 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    ae72:	6818      	ldr	r0, [r3, #0]
    ae74:	4b13      	ldr	r3, [pc, #76]	; (aec4 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    ae76:	4798      	blx	r3
    ae78:	0003      	movs	r3, r0
		return true; // Single block write
    ae7a:	2001      	movs	r0, #1
	if (sd_mmc_spi_nb_block >
    ae7c:	429c      	cmp	r4, r3
    ae7e:	d901      	bls.n	ae84 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    ae80:	b002      	add	sp, #8
    ae82:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    ae84:	466b      	mov	r3, sp
    ae86:	1ddc      	adds	r4, r3, #7
    ae88:	23ff      	movs	r3, #255	; 0xff
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    ae8a:	4e0f      	ldr	r6, [pc, #60]	; (aec8 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    ae8c:	2201      	movs	r2, #1
    ae8e:	0021      	movs	r1, r4
    ae90:	4d0e      	ldr	r5, [pc, #56]	; (aecc <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    ae92:	0030      	movs	r0, r6
	value = 0xFF;
    ae94:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    ae96:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    ae98:	23fd      	movs	r3, #253	; 0xfd
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    ae9a:	2201      	movs	r2, #1
    ae9c:	0021      	movs	r1, r4
    ae9e:	0030      	movs	r0, r6
	value = SPI_TOKEN_STOP_TRAN;
    aea0:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    aea2:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    aea4:	4b0a      	ldr	r3, [pc, #40]	; (aed0 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    aea6:	4798      	blx	r3
    aea8:	2800      	cmp	r0, #0
    aeaa:	d1e9      	bne.n	ae80 <sd_mmc_spi_stop_multiwrite_block+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    aeac:	2205      	movs	r2, #5
    aeae:	4b09      	ldr	r3, [pc, #36]	; (aed4 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    aeb0:	701a      	strb	r2, [r3, #0]
    aeb2:	e7e5      	b.n	ae80 <sd_mmc_spi_stop_multiwrite_block+0x20>
		return true; // Single block write
    aeb4:	2001      	movs	r0, #1
    aeb6:	e7e3      	b.n	ae80 <sd_mmc_spi_stop_multiwrite_block+0x20>
    aeb8:	200008e0 	.word	0x200008e0
    aebc:	200008d8 	.word	0x200008d8
    aec0:	200008e8 	.word	0x200008e8
    aec4:	000138a9 	.word	0x000138a9
    aec8:	2000089c 	.word	0x2000089c
    aecc:	0000fe6d 	.word	0x0000fe6d
    aed0:	0000ad25 	.word	0x0000ad25
    aed4:	200008df 	.word	0x200008df

0000aed8 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aed8:	2300      	movs	r3, #0
    aeda:	4a2d      	ldr	r2, [pc, #180]	; (af90 <sd_mmc_spi_init+0xb8>)
{
    aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aede:	7013      	strb	r3, [r2, #0]
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    aee0:	2224      	movs	r2, #36	; 0x24
	config->mode             = SPI_MODE_MASTER;
    aee2:	2501      	movs	r5, #1
{
    aee4:	b091      	sub	sp, #68	; 0x44
    aee6:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
    aee8:	54a3      	strb	r3, [r4, r2]
	config->data_order       = SPI_DATA_ORDER_MSB;
    aeea:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    aeec:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    aeee:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    aef0:	7463      	strb	r3, [r4, #17]
	config->master_slave_select_enable= false;
    aef2:	7523      	strb	r3, [r4, #20]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    aef4:	3a18      	subs	r2, #24
    aef6:	2100      	movs	r1, #0
    aef8:	4b26      	ldr	r3, [pc, #152]	; (af94 <sd_mmc_spi_init+0xbc>)
    aefa:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
    aefc:	7025      	strb	r5, [r4, #0]
	config->receiver_enable  = true;
    aefe:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    af00:	74e5      	strb	r5, [r4, #19]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    af02:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    af04:	2380      	movs	r3, #128	; 0x80
    af06:	029b      	lsls	r3, r3, #10
    af08:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    af0a:	4b23      	ldr	r3, [pc, #140]	; (af98 <sd_mmc_spi_init+0xc0>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    af0c:	4f23      	ldr	r7, [pc, #140]	; (af9c <sd_mmc_spi_init+0xc4>)
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    af0e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    af10:	4b23      	ldr	r3, [pc, #140]	; (afa0 <sd_mmc_spi_init+0xc8>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    af12:	0022      	movs	r2, r4
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    af14:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    af16:	4b23      	ldr	r3, [pc, #140]	; (afa4 <sd_mmc_spi_init+0xcc>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    af18:	4923      	ldr	r1, [pc, #140]	; (afa8 <sd_mmc_spi_init+0xd0>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    af1a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    af1c:	4b23      	ldr	r3, [pc, #140]	; (afac <sd_mmc_spi_init+0xd4>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    af1e:	0038      	movs	r0, r7
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    af20:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    af22:	4b23      	ldr	r3, [pc, #140]	; (afb0 <sd_mmc_spi_init+0xd8>)
    af24:	61a3      	str	r3, [r4, #24]
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    af26:	4b23      	ldr	r3, [pc, #140]	; (afb4 <sd_mmc_spi_init+0xdc>)
    af28:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    af2a:	683e      	ldr	r6, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    af2c:	4b22      	ldr	r3, [pc, #136]	; (afb8 <sd_mmc_spi_init+0xe0>)
    af2e:	0030      	movs	r0, r6
    af30:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    af32:	231f      	movs	r3, #31
    af34:	4018      	ands	r0, r3
    af36:	4085      	lsls	r5, r0
    af38:	4b20      	ldr	r3, [pc, #128]	; (afbc <sd_mmc_spi_init+0xe4>)
    af3a:	601d      	str	r5, [r3, #0]
    af3c:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    af3e:	69dc      	ldr	r4, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    af40:	2c00      	cmp	r4, #0
    af42:	d1fc      	bne.n	af3e <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    af44:	2202      	movs	r2, #2
	config->input_pull = PORT_PIN_PULL_UP;
    af46:	2501      	movs	r5, #1
    af48:	6833      	ldr	r3, [r6, #0]
    af4a:	a901      	add	r1, sp, #4
    af4c:	4313      	orrs	r3, r2
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    af4e:	4a1c      	ldr	r2, [pc, #112]	; (afc0 <sd_mmc_spi_init+0xe8>)
    af50:	6033      	str	r3, [r6, #0]
    af52:	7810      	ldrb	r0, [r2, #0]
	config->address_enabled = false;
    af54:	4b1b      	ldr	r3, [pc, #108]	; (afc4 <sd_mmc_spi_init+0xec>)
	slave->ss_pin          = config->ss_pin;
    af56:	4e1c      	ldr	r6, [pc, #112]	; (afc8 <sd_mmc_spi_init+0xf0>)
	config->address_enabled = false;
    af58:	705c      	strb	r4, [r3, #1]
	config->address         = 0;
    af5a:	709c      	strb	r4, [r3, #2]
    af5c:	7018      	strb	r0, [r3, #0]
	slave->ss_pin          = config->ss_pin;
    af5e:	7030      	strb	r0, [r6, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    af60:	4b1a      	ldr	r3, [pc, #104]	; (afcc <sd_mmc_spi_init+0xf4>)
	slave->address_enabled = config->address_enabled;
    af62:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    af64:	70b4      	strb	r4, [r6, #2]
    af66:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    af68:	708c      	strb	r4, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    af6a:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    af6c:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    af6e:	7831      	ldrb	r1, [r6, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    af70:	094b      	lsrs	r3, r1, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    af72:	09ca      	lsrs	r2, r1, #7
    af74:	d109      	bne.n	af8a <sd_mmc_spi_init+0xb2>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    af76:	321f      	adds	r2, #31
    af78:	400a      	ands	r2, r1
    af7a:	4095      	lsls	r5, r2
		port_base->OUTSET.reg = pin_mask;
    af7c:	4a14      	ldr	r2, [pc, #80]	; (afd0 <sd_mmc_spi_init+0xf8>)
    af7e:	01db      	lsls	r3, r3, #7
    af80:	4694      	mov	ip, r2
    af82:	4463      	add	r3, ip
    af84:	619d      	str	r5, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    af86:	b011      	add	sp, #68	; 0x44
    af88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af8a:	61a4      	str	r4, [r4, #24]
    af8c:	deff      	udf	#255	; 0xff
    af8e:	46c0      	nop			; (mov r8, r8)
    af90:	200008df 	.word	0x200008df
    af94:	00013c87 	.word	0x00013c87
    af98:	00100002 	.word	0x00100002
    af9c:	2000089c 	.word	0x2000089c
    afa0:	00110002 	.word	0x00110002
    afa4:	00120002 	.word	0x00120002
    afa8:	42000c00 	.word	0x42000c00
    afac:	00130002 	.word	0x00130002
    afb0:	00061a80 	.word	0x00061a80
    afb4:	0000fad1 	.word	0x0000fad1
    afb8:	0000f98d 	.word	0x0000f98d
    afbc:	e000e100 	.word	0xe000e100
    afc0:	200000fc 	.word	0x200000fc
    afc4:	200008ec 	.word	0x200008ec
    afc8:	200008dc 	.word	0x200008dc
    afcc:	0000f4e9 	.word	0x0000f4e9
    afd0:	41004400 	.word	0x41004400

0000afd4 <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    afd4:	2200      	movs	r2, #0
{
    afd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    afd8:	4b0d      	ldr	r3, [pc, #52]	; (b010 <sd_mmc_spi_select_device+0x3c>)
{
    afda:	0007      	movs	r7, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    afdc:	701a      	strb	r2, [r3, #0]
    afde:	4b0d      	ldr	r3, [pc, #52]	; (b014 <sd_mmc_spi_select_device+0x40>)
    afe0:	000c      	movs	r4, r1
    afe2:	4299      	cmp	r1, r3
    afe4:	d900      	bls.n	afe8 <sd_mmc_spi_select_device+0x14>
    afe6:	001c      	movs	r4, r3
    afe8:	4d0b      	ldr	r5, [pc, #44]	; (b018 <sd_mmc_spi_select_device+0x44>)
    afea:	4e0c      	ldr	r6, [pc, #48]	; (b01c <sd_mmc_spi_select_device+0x48>)
    afec:	e001      	b.n	aff2 <sd_mmc_spi_select_device+0x1e>
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
		clock -= clock / 8;
    afee:	08e3      	lsrs	r3, r4, #3
    aff0:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    aff2:	0021      	movs	r1, r4
    aff4:	0028      	movs	r0, r5
    aff6:	47b0      	blx	r6
    aff8:	2817      	cmp	r0, #23
    affa:	d0f8      	beq.n	afee <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    affc:	0079      	lsls	r1, r7, #1
    affe:	19cf      	adds	r7, r1, r7
    b000:	4907      	ldr	r1, [pc, #28]	; (b020 <sd_mmc_spi_select_device+0x4c>)
    b002:	0028      	movs	r0, r5
    b004:	19c9      	adds	r1, r1, r7
    b006:	2201      	movs	r2, #1
    b008:	4b06      	ldr	r3, [pc, #24]	; (b024 <sd_mmc_spi_select_device+0x50>)
    b00a:	4798      	blx	r3
}
    b00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b00e:	46c0      	nop			; (mov r8, r8)
    b010:	200008df 	.word	0x200008df
    b014:	003d0900 	.word	0x003d0900
    b018:	2000089c 	.word	0x2000089c
    b01c:	0000fa1d 	.word	0x0000fa1d
    b020:	200008dc 	.word	0x200008dc
    b024:	0000fd99 	.word	0x0000fd99

0000b028 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b028:	2200      	movs	r2, #0
{
    b02a:	b510      	push	{r4, lr}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    b02c:	0041      	lsls	r1, r0, #1
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b02e:	4b04      	ldr	r3, [pc, #16]	; (b040 <sd_mmc_spi_deselect_device+0x18>)
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    b030:	1808      	adds	r0, r1, r0
    b032:	4904      	ldr	r1, [pc, #16]	; (b044 <sd_mmc_spi_deselect_device+0x1c>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b034:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    b036:	1809      	adds	r1, r1, r0
    b038:	4b03      	ldr	r3, [pc, #12]	; (b048 <sd_mmc_spi_deselect_device+0x20>)
    b03a:	4804      	ldr	r0, [pc, #16]	; (b04c <sd_mmc_spi_deselect_device+0x24>)
    b03c:	4798      	blx	r3
}
    b03e:	bd10      	pop	{r4, pc}
    b040:	200008df 	.word	0x200008df
    b044:	200008dc 	.word	0x200008dc
    b048:	0000fd99 	.word	0x0000fd99
    b04c:	2000089c 	.word	0x2000089c

0000b050 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    b050:	b5f0      	push	{r4, r5, r6, r7, lr}
    b052:	b083      	sub	sp, #12
	uint8_t i;
	uint8_t dummy = 0xFF;
    b054:	466b      	mov	r3, sp
    b056:	1ddd      	adds	r5, r3, #7
    b058:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b05a:	2200      	movs	r2, #0
    b05c:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
    b05e:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b060:	4b06      	ldr	r3, [pc, #24]	; (b07c <sd_mmc_spi_send_clock+0x2c>)
    b062:	4f07      	ldr	r7, [pc, #28]	; (b080 <sd_mmc_spi_send_clock+0x30>)
    b064:	4e07      	ldr	r6, [pc, #28]	; (b084 <sd_mmc_spi_send_clock+0x34>)
    b066:	701a      	strb	r2, [r3, #0]
    b068:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    b06a:	2201      	movs	r2, #1
    b06c:	0029      	movs	r1, r5
    b06e:	0038      	movs	r0, r7
    b070:	b2e4      	uxtb	r4, r4
    b072:	47b0      	blx	r6
	for (i = 0; i < 10; i++) {
    b074:	2c00      	cmp	r4, #0
    b076:	d1f7      	bne.n	b068 <sd_mmc_spi_send_clock+0x18>
	}
}
    b078:	b003      	add	sp, #12
    b07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b07c:	200008df 	.word	0x200008df
    b080:	2000089c 	.word	0x2000089c
    b084:	0000fe6d 	.word	0x0000fe6d

0000b088 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    b088:	b5f0      	push	{r4, r5, r6, r7, lr}
    b08a:	464e      	mov	r6, r9
    b08c:	4645      	mov	r5, r8
    b08e:	46de      	mov	lr, fp
    b090:	4657      	mov	r7, sl
    b092:	b5e0      	push	{r5, r6, r7, lr}
    b094:	b085      	sub	sp, #20
    b096:	4699      	mov	r9, r3
	uint8_t dummy = 0xFF;
    b098:	466b      	mov	r3, sp
{
    b09a:	4683      	mov	fp, r0
    b09c:	0008      	movs	r0, r1
	uint8_t dummy = 0xFF;
    b09e:	1d99      	adds	r1, r3, #6
    b0a0:	23ff      	movs	r3, #255	; 0xff
    b0a2:	700b      	strb	r3, [r1, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b0a4:	4b52      	ldr	r3, [pc, #328]	; (b1f0 <sd_mmc_spi_adtc_start+0x168>)
{
    b0a6:	4690      	mov	r8, r2
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b0a8:	469a      	mov	sl, r3
    b0aa:	2300      	movs	r3, #0
    b0ac:	4652      	mov	r2, sl
    b0ae:	7013      	strb	r3, [r2, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    b0b0:	465b      	mov	r3, fp
    b0b2:	223f      	movs	r2, #63	; 0x3f
    b0b4:	401a      	ands	r2, r3
    b0b6:	2340      	movs	r3, #64	; 0x40
    b0b8:	ac02      	add	r4, sp, #8
    b0ba:	431a      	orrs	r2, r3
	cmd_token[1] = arg >> 24;
    b0bc:	0e03      	lsrs	r3, r0, #24
    b0be:	7063      	strb	r3, [r4, #1]
	cmd_token[2] = arg >> 16;
    b0c0:	0c03      	lsrs	r3, r0, #16
    b0c2:	70a3      	strb	r3, [r4, #2]
	cmd_token[3] = arg >> 8;
    b0c4:	0a03      	lsrs	r3, r0, #8
    b0c6:	70e3      	strb	r3, [r4, #3]
	cmd_token[4] = arg;
    b0c8:	2600      	movs	r6, #0
	crc = 0;
    b0ca:	2300      	movs	r3, #0
				crc ^= 0x09;
    b0cc:	2509      	movs	r5, #9
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    b0ce:	7022      	strb	r2, [r4, #0]
	cmd_token[4] = arg;
    b0d0:	7120      	strb	r0, [r4, #4]
	crc = 0;
    b0d2:	2008      	movs	r0, #8
    b0d4:	e005      	b.n	b0e2 <sd_mmc_spi_adtc_start+0x5a>
    b0d6:	3801      	subs	r0, #1
			value <<= 1;
    b0d8:	0052      	lsls	r2, r2, #1
    b0da:	b2c0      	uxtb	r0, r0
    b0dc:	b2d2      	uxtb	r2, r2
		for (i = 0; i < 8; i++) {
    b0de:	2800      	cmp	r0, #0
    b0e0:	d00d      	beq.n	b0fe <sd_mmc_spi_adtc_start+0x76>
			crc <<= 1;
    b0e2:	005b      	lsls	r3, r3, #1
    b0e4:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    b0e6:	001f      	movs	r7, r3
    b0e8:	4057      	eors	r7, r2
    b0ea:	063f      	lsls	r7, r7, #24
    b0ec:	d5f3      	bpl.n	b0d6 <sd_mmc_spi_adtc_start+0x4e>
    b0ee:	3801      	subs	r0, #1
				crc ^= 0x09;
    b0f0:	406b      	eors	r3, r5
			value <<= 1;
    b0f2:	0052      	lsls	r2, r2, #1
    b0f4:	b2c0      	uxtb	r0, r0
				crc ^= 0x09;
    b0f6:	b2db      	uxtb	r3, r3
			value <<= 1;
    b0f8:	b2d2      	uxtb	r2, r2
		for (i = 0; i < 8; i++) {
    b0fa:	2800      	cmp	r0, #0
    b0fc:	d1f1      	bne.n	b0e2 <sd_mmc_spi_adtc_start+0x5a>
    b0fe:	3601      	adds	r6, #1
	while (size--) {
    b100:	2e05      	cmp	r6, #5
    b102:	d001      	beq.n	b108 <sd_mmc_spi_adtc_start+0x80>
    b104:	5da2      	ldrb	r2, [r4, r6]
    b106:	e7e4      	b.n	b0d2 <sd_mmc_spi_adtc_start+0x4a>
	crc = (crc << 1) | 1;
    b108:	2201      	movs	r2, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    b10a:	4e3a      	ldr	r6, [pc, #232]	; (b1f4 <sd_mmc_spi_adtc_start+0x16c>)
	crc = (crc << 1) | 1;
    b10c:	005b      	lsls	r3, r3, #1
    b10e:	4313      	orrs	r3, r2
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    b110:	4d39      	ldr	r5, [pc, #228]	; (b1f8 <sd_mmc_spi_adtc_start+0x170>)
    b112:	2201      	movs	r2, #1
    b114:	0030      	movs	r0, r6
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    b116:	7163      	strb	r3, [r4, #5]
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    b118:	47a8      	blx	r5
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    b11a:	0021      	movs	r1, r4
    b11c:	2206      	movs	r2, #6
    b11e:	0030      	movs	r0, r6
    b120:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    b122:	466b      	mov	r3, sp
    b124:	1ddc      	adds	r4, r3, #7
    b126:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b128:	2201      	movs	r2, #1
    b12a:	0021      	movs	r1, r4
    b12c:	0030      	movs	r0, r6
    b12e:	4f33      	ldr	r7, [pc, #204]	; (b1fc <sd_mmc_spi_adtc_start+0x174>)
	r1 = 0xFF;
    b130:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b132:	2507      	movs	r5, #7
    b134:	47b8      	blx	r7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b136:	23ff      	movs	r3, #255	; 0xff
    b138:	2201      	movs	r2, #1
    b13a:	0021      	movs	r1, r4
    b13c:	0030      	movs	r0, r6
    b13e:	47b8      	blx	r7
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    b140:	7823      	ldrb	r3, [r4, #0]
    b142:	b25a      	sxtb	r2, r3
    b144:	2a00      	cmp	r2, #0
    b146:	da0e      	bge.n	b166 <sd_mmc_spi_adtc_start+0xde>
    b148:	3d01      	subs	r5, #1
    b14a:	b2ed      	uxtb	r5, r5
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    b14c:	2d00      	cmp	r5, #0
    b14e:	d1f2      	bne.n	b136 <sd_mmc_spi_adtc_start+0xae>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    b150:	2302      	movs	r3, #2
    b152:	4652      	mov	r2, sl
			return false;
    b154:	2000      	movs	r0, #0
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    b156:	7013      	strb	r3, [r2, #0]

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    b158:	b005      	add	sp, #20
    b15a:	bc3c      	pop	{r2, r3, r4, r5}
    b15c:	4690      	mov	r8, r2
    b15e:	4699      	mov	r9, r3
    b160:	46a2      	mov	sl, r4
    b162:	46ab      	mov	fp, r5
    b164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    b166:	4c26      	ldr	r4, [pc, #152]	; (b200 <sd_mmc_spi_adtc_start+0x178>)
    b168:	6023      	str	r3, [r4, #0]
	if (r1 & R1_SPI_COM_CRC) {
    b16a:	071a      	lsls	r2, r3, #28
    b16c:	d418      	bmi.n	b1a0 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    b16e:	075a      	lsls	r2, r3, #29
    b170:	d41b      	bmi.n	b1aa <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    b172:	2201      	movs	r2, #1
    b174:	4393      	bics	r3, r2
    b176:	d136      	bne.n	b1e6 <sd_mmc_spi_adtc_start+0x15e>
	if (cmd & SDMMC_RESP_BUSY) {
    b178:	465b      	mov	r3, fp
    b17a:	049b      	lsls	r3, r3, #18
    b17c:	d41a      	bmi.n	b1b4 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_8) {
    b17e:	465b      	mov	r3, fp
    b180:	059b      	lsls	r3, r3, #22
    b182:	d428      	bmi.n	b1d6 <sd_mmc_spi_adtc_start+0x14e>
	if (cmd & SDMMC_RESP_32) {
    b184:	465b      	mov	r3, fp
    b186:	055b      	lsls	r3, r3, #21
    b188:	d41c      	bmi.n	b1c4 <sd_mmc_spi_adtc_start+0x13c>
	sd_mmc_spi_block_size = block_size;
    b18a:	4642      	mov	r2, r8
    b18c:	4b1d      	ldr	r3, [pc, #116]	; (b204 <sd_mmc_spi_adtc_start+0x17c>)
	return true; // Command complete
    b18e:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
    b190:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    b192:	464a      	mov	r2, r9
    b194:	4b1c      	ldr	r3, [pc, #112]	; (b208 <sd_mmc_spi_adtc_start+0x180>)
    b196:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    b198:	2200      	movs	r2, #0
    b19a:	4b1c      	ldr	r3, [pc, #112]	; (b20c <sd_mmc_spi_adtc_start+0x184>)
    b19c:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    b19e:	e7db      	b.n	b158 <sd_mmc_spi_adtc_start+0xd0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    b1a0:	2306      	movs	r3, #6
    b1a2:	4652      	mov	r2, sl
		return false;
    b1a4:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    b1a6:	7013      	strb	r3, [r2, #0]
		return false;
    b1a8:	e7d6      	b.n	b158 <sd_mmc_spi_adtc_start+0xd0>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    b1aa:	2309      	movs	r3, #9
    b1ac:	4652      	mov	r2, sl
		return false;
    b1ae:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    b1b0:	7013      	strb	r3, [r2, #0]
		return false;
    b1b2:	e7d1      	b.n	b158 <sd_mmc_spi_adtc_start+0xd0>
		if (!sd_mmc_spi_wait_busy()) {
    b1b4:	4b16      	ldr	r3, [pc, #88]	; (b210 <sd_mmc_spi_adtc_start+0x188>)
    b1b6:	4798      	blx	r3
    b1b8:	2800      	cmp	r0, #0
    b1ba:	d1e0      	bne.n	b17e <sd_mmc_spi_adtc_start+0xf6>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    b1bc:	2303      	movs	r3, #3
    b1be:	4652      	mov	r2, sl
    b1c0:	7013      	strb	r3, [r2, #0]
			return false;
    b1c2:	e7c9      	b.n	b158 <sd_mmc_spi_adtc_start+0xd0>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    b1c4:	23ff      	movs	r3, #255	; 0xff
    b1c6:	2204      	movs	r2, #4
    b1c8:	0021      	movs	r1, r4
    b1ca:	0030      	movs	r0, r6
    b1cc:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    b1ce:	6823      	ldr	r3, [r4, #0]
    b1d0:	ba1b      	rev	r3, r3
    b1d2:	6023      	str	r3, [r4, #0]
    b1d4:	e7d9      	b.n	b18a <sd_mmc_spi_adtc_start+0x102>
		sd_mmc_spi_response_32 = 0;
    b1d6:	2300      	movs	r3, #0
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    b1d8:	2201      	movs	r2, #1
		sd_mmc_spi_response_32 = 0;
    b1da:	6023      	str	r3, [r4, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    b1dc:	0021      	movs	r1, r4
    b1de:	33ff      	adds	r3, #255	; 0xff
    b1e0:	0030      	movs	r0, r6
    b1e2:	47b8      	blx	r7
    b1e4:	e7ce      	b.n	b184 <sd_mmc_spi_adtc_start+0xfc>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b1e6:	4653      	mov	r3, sl
		return false;
    b1e8:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b1ea:	701a      	strb	r2, [r3, #0]
		return false;
    b1ec:	e7b4      	b.n	b158 <sd_mmc_spi_adtc_start+0xd0>
    b1ee:	46c0      	nop			; (mov r8, r8)
    b1f0:	200008df 	.word	0x200008df
    b1f4:	2000089c 	.word	0x2000089c
    b1f8:	0000fe6d 	.word	0x0000fe6d
    b1fc:	0000fcc9 	.word	0x0000fcc9
    b200:	200008e4 	.word	0x200008e4
    b204:	200008d8 	.word	0x200008d8
    b208:	200008e0 	.word	0x200008e0
    b20c:	200008e8 	.word	0x200008e8
    b210:	0000ad25 	.word	0x0000ad25

0000b214 <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    b214:	2300      	movs	r3, #0
{
    b216:	b510      	push	{r4, lr}
    b218:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    b21a:	9300      	str	r3, [sp, #0]
    b21c:	2200      	movs	r2, #0
    b21e:	4c02      	ldr	r4, [pc, #8]	; (b228 <sd_mmc_spi_send_cmd+0x14>)
    b220:	47a0      	blx	r4
}
    b222:	b002      	add	sp, #8
    b224:	bd10      	pop	{r4, pc}
    b226:	46c0      	nop			; (mov r8, r8)
    b228:	0000b089 	.word	0x0000b089

0000b22c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    b22c:	4b01      	ldr	r3, [pc, #4]	; (b234 <sd_mmc_spi_get_response+0x8>)
    b22e:	6818      	ldr	r0, [r3, #0]
}
    b230:	4770      	bx	lr
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	200008e4 	.word	0x200008e4

0000b238 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    b238:	b5f0      	push	{r4, r5, r6, r7, lr}
    b23a:	46c6      	mov	lr, r8
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b23c:	2200      	movs	r2, #0
{
    b23e:	b500      	push	{lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b240:	4b14      	ldr	r3, [pc, #80]	; (b294 <sd_mmc_spi_read_word+0x5c>)
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b242:	4c15      	ldr	r4, [pc, #84]	; (b298 <sd_mmc_spi_read_word+0x60>)
    b244:	4d15      	ldr	r5, [pc, #84]	; (b29c <sd_mmc_spi_read_word+0x64>)
{
    b246:	b084      	sub	sp, #16
    b248:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b24a:	701a      	strb	r2, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b24c:	8829      	ldrh	r1, [r5, #0]
    b24e:	4e14      	ldr	r6, [pc, #80]	; (b2a0 <sd_mmc_spi_read_word+0x68>)
    b250:	6820      	ldr	r0, [r4, #0]
    b252:	47b0      	blx	r6
    b254:	2900      	cmp	r1, #0
    b256:	d103      	bne.n	b260 <sd_mmc_spi_read_word+0x28>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    b258:	4b12      	ldr	r3, [pc, #72]	; (b2a4 <sd_mmc_spi_read_word+0x6c>)
    b25a:	4798      	blx	r3
    b25c:	2800      	cmp	r0, #0
    b25e:	d00f      	beq.n	b280 <sd_mmc_spi_read_word+0x48>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    b260:	4b11      	ldr	r3, [pc, #68]	; (b2a8 <sd_mmc_spi_read_word+0x70>)
    b262:	a901      	add	r1, sp, #4
    b264:	4698      	mov	r8, r3
    b266:	2204      	movs	r2, #4
    b268:	23ff      	movs	r3, #255	; 0xff
    b26a:	4640      	mov	r0, r8
    b26c:	4f0f      	ldr	r7, [pc, #60]	; (b2ac <sd_mmc_spi_read_word+0x74>)
    b26e:	47b8      	blx	r7
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    b270:	6823      	ldr	r3, [r4, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b272:	8829      	ldrh	r1, [r5, #0]
	sd_mmc_spi_transfert_pos += 4;
    b274:	1d18      	adds	r0, r3, #4
    b276:	6020      	str	r0, [r4, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b278:	47b0      	blx	r6
    b27a:	2900      	cmp	r1, #0
    b27c:	d004      	beq.n	b288 <sd_mmc_spi_read_word+0x50>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    b27e:	2001      	movs	r0, #1
}
    b280:	b004      	add	sp, #16
    b282:	bc04      	pop	{r2}
    b284:	4690      	mov	r8, r2
    b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    b288:	23ff      	movs	r3, #255	; 0xff
    b28a:	2202      	movs	r2, #2
    b28c:	a903      	add	r1, sp, #12
    b28e:	4640      	mov	r0, r8
    b290:	47b8      	blx	r7
    b292:	e7f4      	b.n	b27e <sd_mmc_spi_read_word+0x46>
    b294:	200008df 	.word	0x200008df
    b298:	200008e8 	.word	0x200008e8
    b29c:	200008d8 	.word	0x200008d8
    b2a0:	000139b5 	.word	0x000139b5
    b2a4:	0000ad81 	.word	0x0000ad81
    b2a8:	2000089c 	.word	0x2000089c
    b2ac:	0000fcc9 	.word	0x0000fcc9

0000b2b0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2b2:	46d6      	mov	lr, sl
    b2b4:	464f      	mov	r7, r9
    b2b6:	4646      	mov	r6, r8
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b2b8:	2200      	movs	r2, #0
{
    b2ba:	b5c0      	push	{r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b2bc:	4b19      	ldr	r3, [pc, #100]	; (b324 <sd_mmc_spi_start_read_blocks+0x74>)
	pos = 0;
	while (nb_block--) {
    b2be:	1e4c      	subs	r4, r1, #1
{
    b2c0:	b082      	sub	sp, #8
    b2c2:	4682      	mov	sl, r0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b2c4:	701a      	strb	r2, [r3, #0]
	while (nb_block--) {
    b2c6:	b2a4      	uxth	r4, r4
    b2c8:	2900      	cmp	r1, #0
    b2ca:	d029      	beq.n	b320 <sd_mmc_spi_start_read_blocks+0x70>
    b2cc:	4b16      	ldr	r3, [pc, #88]	; (b328 <sd_mmc_spi_start_read_blocks+0x78>)
    b2ce:	2500      	movs	r5, #0
    b2d0:	4699      	mov	r9, r3
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    b2d2:	4b16      	ldr	r3, [pc, #88]	; (b32c <sd_mmc_spi_start_read_blocks+0x7c>)
    b2d4:	4f16      	ldr	r7, [pc, #88]	; (b330 <sd_mmc_spi_start_read_blocks+0x80>)
    b2d6:	4698      	mov	r8, r3
    b2d8:	4e16      	ldr	r6, [pc, #88]	; (b334 <sd_mmc_spi_start_read_blocks+0x84>)
    b2da:	e018      	b.n	b30e <sd_mmc_spi_start_read_blocks+0x5e>
    b2dc:	4643      	mov	r3, r8
    b2de:	881a      	ldrh	r2, [r3, #0]
    b2e0:	4653      	mov	r3, sl
    b2e2:	0038      	movs	r0, r7
    b2e4:	1959      	adds	r1, r3, r5
    b2e6:	23ff      	movs	r3, #255	; 0xff
    b2e8:	47b0      	blx	r6
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b2ea:	4a13      	ldr	r2, [pc, #76]	; (b338 <sd_mmc_spi_start_read_blocks+0x88>)
		pos += sd_mmc_spi_block_size;
    b2ec:	4643      	mov	r3, r8
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b2ee:	6811      	ldr	r1, [r2, #0]
		pos += sd_mmc_spi_block_size;
    b2f0:	881b      	ldrh	r3, [r3, #0]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b2f2:	468c      	mov	ip, r1
		pos += sd_mmc_spi_block_size;
    b2f4:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b2f6:	4463      	add	r3, ip
    b2f8:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    b2fa:	a901      	add	r1, sp, #4
    b2fc:	23ff      	movs	r3, #255	; 0xff
    b2fe:	2202      	movs	r2, #2
    b300:	0038      	movs	r0, r7
    b302:	47b0      	blx	r6
	while (nb_block--) {
    b304:	3c01      	subs	r4, #1
    b306:	4b0d      	ldr	r3, [pc, #52]	; (b33c <sd_mmc_spi_start_read_blocks+0x8c>)
    b308:	b2a4      	uxth	r4, r4
    b30a:	429c      	cmp	r4, r3
    b30c:	d008      	beq.n	b320 <sd_mmc_spi_start_read_blocks+0x70>
		if (!sd_mmc_spi_start_read_block()) {
    b30e:	47c8      	blx	r9
    b310:	2800      	cmp	r0, #0
    b312:	d1e3      	bne.n	b2dc <sd_mmc_spi_start_read_blocks+0x2c>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    b314:	b002      	add	sp, #8
    b316:	bc1c      	pop	{r2, r3, r4}
    b318:	4690      	mov	r8, r2
    b31a:	4699      	mov	r9, r3
    b31c:	46a2      	mov	sl, r4
    b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    b320:	2001      	movs	r0, #1
    b322:	e7f7      	b.n	b314 <sd_mmc_spi_start_read_blocks+0x64>
    b324:	200008df 	.word	0x200008df
    b328:	0000ad81 	.word	0x0000ad81
    b32c:	200008d8 	.word	0x200008d8
    b330:	2000089c 	.word	0x2000089c
    b334:	0000fcc9 	.word	0x0000fcc9
    b338:	200008e8 	.word	0x200008e8
    b33c:	0000ffff 	.word	0x0000ffff

0000b340 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    b340:	2001      	movs	r0, #1
    b342:	4770      	bx	lr

0000b344 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b344:	4b1b      	ldr	r3, [pc, #108]	; (b3b4 <sd_mmc_spi_start_write_blocks+0x70>)
{
    b346:	b5f0      	push	{r4, r5, r6, r7, lr}
    b348:	46d6      	mov	lr, sl
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b34a:	469a      	mov	sl, r3
{
    b34c:	464f      	mov	r7, r9
    b34e:	4646      	mov	r6, r8
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b350:	2300      	movs	r3, #0
    b352:	4652      	mov	r2, sl
{
    b354:	b5c0      	push	{r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b356:	7013      	strb	r3, [r2, #0]
	pos = 0;
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    b358:	4b17      	ldr	r3, [pc, #92]	; (b3b8 <sd_mmc_spi_start_write_blocks+0x74>)
{
    b35a:	4681      	mov	r9, r0
    b35c:	000d      	movs	r5, r1
	pos = 0;
    b35e:	2400      	movs	r4, #0
		sd_mmc_spi_start_write_block();
    b360:	4698      	mov	r8, r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    b362:	4e16      	ldr	r6, [pc, #88]	; (b3bc <sd_mmc_spi_start_write_blocks+0x78>)
    b364:	4f16      	ldr	r7, [pc, #88]	; (b3c0 <sd_mmc_spi_start_write_blocks+0x7c>)
	while (nb_block--) {
    b366:	2d00      	cmp	r5, #0
    b368:	d013      	beq.n	b392 <sd_mmc_spi_start_write_blocks+0x4e>
		sd_mmc_spi_start_write_block();
    b36a:	47c0      	blx	r8
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    b36c:	464b      	mov	r3, r9
    b36e:	8832      	ldrh	r2, [r6, #0]
    b370:	1919      	adds	r1, r3, r4
    b372:	0038      	movs	r0, r7
    b374:	4b13      	ldr	r3, [pc, #76]	; (b3c4 <sd_mmc_spi_start_write_blocks+0x80>)
    b376:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b378:	4a13      	ldr	r2, [pc, #76]	; (b3c8 <sd_mmc_spi_start_write_blocks+0x84>)
		pos += sd_mmc_spi_block_size;
    b37a:	8833      	ldrh	r3, [r6, #0]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b37c:	6811      	ldr	r1, [r2, #0]
		pos += sd_mmc_spi_block_size;
    b37e:	18e4      	adds	r4, r4, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b380:	468c      	mov	ip, r1
    b382:	4463      	add	r3, ip
    b384:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    b386:	4b11      	ldr	r3, [pc, #68]	; (b3cc <sd_mmc_spi_start_write_blocks+0x88>)
    b388:	4798      	blx	r3
    b38a:	2800      	cmp	r0, #0
    b38c:	d002      	beq.n	b394 <sd_mmc_spi_start_write_blocks+0x50>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    b38e:	2d01      	cmp	r5, #1
    b390:	d105      	bne.n	b39e <sd_mmc_spi_start_write_blocks+0x5a>
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
			}
		}
	}
	return true;
    b392:	2001      	movs	r0, #1
}
    b394:	bc1c      	pop	{r2, r3, r4}
    b396:	4690      	mov	r8, r2
    b398:	4699      	mov	r9, r3
    b39a:	46a2      	mov	sl, r4
    b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!sd_mmc_spi_wait_busy()) {
    b39e:	4b0c      	ldr	r3, [pc, #48]	; (b3d0 <sd_mmc_spi_start_write_blocks+0x8c>)
    b3a0:	4798      	blx	r3
    b3a2:	3d01      	subs	r5, #1
    b3a4:	b2ad      	uxth	r5, r5
    b3a6:	2800      	cmp	r0, #0
    b3a8:	d1dd      	bne.n	b366 <sd_mmc_spi_start_write_blocks+0x22>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b3aa:	2305      	movs	r3, #5
    b3ac:	4652      	mov	r2, sl
    b3ae:	7013      	strb	r3, [r2, #0]
				return false;
    b3b0:	e7f0      	b.n	b394 <sd_mmc_spi_start_write_blocks+0x50>
    b3b2:	46c0      	nop			; (mov r8, r8)
    b3b4:	200008df 	.word	0x200008df
    b3b8:	0000acdd 	.word	0x0000acdd
    b3bc:	200008d8 	.word	0x200008d8
    b3c0:	2000089c 	.word	0x2000089c
    b3c4:	0000fe6d 	.word	0x0000fe6d
    b3c8:	200008e8 	.word	0x200008e8
    b3cc:	0000aded 	.word	0x0000aded
    b3d0:	0000ad25 	.word	0x0000ad25

0000b3d4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    b3d4:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    b3d6:	4b05      	ldr	r3, [pc, #20]	; (b3ec <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    b3d8:	4798      	blx	r3
    b3da:	2800      	cmp	r0, #0
    b3dc:	d103      	bne.n	b3e6 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b3de:	2205      	movs	r2, #5
    b3e0:	4b03      	ldr	r3, [pc, #12]	; (b3f0 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    b3e2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    b3e4:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    b3e6:	4b03      	ldr	r3, [pc, #12]	; (b3f4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    b3e8:	4798      	blx	r3
    b3ea:	e7fb      	b.n	b3e4 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    b3ec:	0000ad25 	.word	0x0000ad25
    b3f0:	200008df 	.word	0x200008df
    b3f4:	0000ae61 	.word	0x0000ae61

0000b3f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    b3f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    b3fa:	4b09      	ldr	r3, [pc, #36]	; (b420 <delay_init+0x28>)
    b3fc:	2000      	movs	r0, #0
    b3fe:	4798      	blx	r3
	cycles_per_ms /= 1000;
    b400:	21fa      	movs	r1, #250	; 0xfa
    b402:	4c08      	ldr	r4, [pc, #32]	; (b424 <delay_init+0x2c>)
    b404:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
    b406:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    b408:	47a0      	blx	r4
    b40a:	4b07      	ldr	r3, [pc, #28]	; (b428 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
    b40c:	4907      	ldr	r1, [pc, #28]	; (b42c <delay_init+0x34>)
	cycles_per_ms /= 1000;
    b40e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    b410:	0028      	movs	r0, r5
    b412:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    b414:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
    b416:	4b06      	ldr	r3, [pc, #24]	; (b430 <delay_init+0x38>)
    b418:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    b41a:	4b06      	ldr	r3, [pc, #24]	; (b434 <delay_init+0x3c>)
    b41c:	601a      	str	r2, [r3, #0]
}
    b41e:	bd70      	pop	{r4, r5, r6, pc}
    b420:	000105b5 	.word	0x000105b5
    b424:	000138a9 	.word	0x000138a9
    b428:	20000100 	.word	0x20000100
    b42c:	000f4240 	.word	0x000f4240
    b430:	20000104 	.word	0x20000104
    b434:	e000e010 	.word	0xe000e010

0000b438 <delay_cycles_ms>:
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    b438:	2180      	movs	r1, #128	; 0x80
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    b43a:	b530      	push	{r4, r5, lr}
		SysTick->VAL = 0;
    b43c:	2500      	movs	r5, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    b43e:	4b08      	ldr	r3, [pc, #32]	; (b460 <delay_cycles_ms+0x28>)
		SysTick->LOAD = n;
    b440:	4a08      	ldr	r2, [pc, #32]	; (b464 <delay_cycles_ms+0x2c>)
    b442:	681c      	ldr	r4, [r3, #0]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    b444:	0249      	lsls	r1, r1, #9
	while (n--) {
    b446:	3801      	subs	r0, #1
    b448:	d308      	bcc.n	b45c <delay_cycles_ms+0x24>
	if (n > 0) {
    b44a:	2c00      	cmp	r4, #0
    b44c:	d0fb      	beq.n	b446 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    b44e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    b450:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    b452:	6813      	ldr	r3, [r2, #0]
    b454:	420b      	tst	r3, r1
    b456:	d0fc      	beq.n	b452 <delay_cycles_ms+0x1a>
    b458:	3801      	subs	r0, #1
    b45a:	d2f6      	bcs.n	b44a <delay_cycles_ms+0x12>
	}
}
    b45c:	bd30      	pop	{r4, r5, pc}
    b45e:	46c0      	nop			; (mov r8, r8)
    b460:	20000100 	.word	0x20000100
    b464:	e000e010 	.word	0xe000e010

0000b468 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    b468:	b510      	push	{r4, lr}
	if (gpfIsr) {
    b46a:	4b03      	ldr	r3, [pc, #12]	; (b478 <chip_isr+0x10>)
    b46c:	681b      	ldr	r3, [r3, #0]
    b46e:	2b00      	cmp	r3, #0
    b470:	d000      	beq.n	b474 <chip_isr+0xc>
		gpfIsr();
    b472:	4798      	blx	r3
	}
}
    b474:	bd10      	pop	{r4, pc}
    b476:	46c0      	nop			; (mov r8, r8)
    b478:	200008f0 	.word	0x200008f0

0000b47c <nm_bsp_reset>:
		port_base->OUTCLR.reg = pin_mask;
    b47c:	2280      	movs	r2, #128	; 0x80
    b47e:	4b11      	ldr	r3, [pc, #68]	; (b4c4 <nm_bsp_reset+0x48>)
    b480:	0552      	lsls	r2, r2, #21
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    b482:	b570      	push	{r4, r5, r6, lr}
    b484:	615a      	str	r2, [r3, #20]
    b486:	2280      	movs	r2, #128	; 0x80
    b488:	2464      	movs	r4, #100	; 0x64
    b48a:	0512      	lsls	r2, r2, #20
    b48c:	4d0e      	ldr	r5, [pc, #56]	; (b4c8 <nm_bsp_reset+0x4c>)
    b48e:	615a      	str	r2, [r3, #20]
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
		delay_ms(1);
    b490:	2001      	movs	r0, #1
    b492:	3c01      	subs	r4, #1
    b494:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b496:	2c00      	cmp	r4, #0
    b498:	d1fa      	bne.n	b490 <nm_bsp_reset+0x14>
		port_base->OUTSET.reg = pin_mask;
    b49a:	2280      	movs	r2, #128	; 0x80
    b49c:	4b09      	ldr	r3, [pc, #36]	; (b4c4 <nm_bsp_reset+0x48>)
    b49e:	0552      	lsls	r2, r2, #21
    b4a0:	619a      	str	r2, [r3, #24]
    b4a2:	3464      	adds	r4, #100	; 0x64
		delay_ms(1);
    b4a4:	2001      	movs	r0, #1
    b4a6:	3c01      	subs	r4, #1
    b4a8:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b4aa:	2c00      	cmp	r4, #0
    b4ac:	d1fa      	bne.n	b4a4 <nm_bsp_reset+0x28>
    b4ae:	2280      	movs	r2, #128	; 0x80
    b4b0:	4b04      	ldr	r3, [pc, #16]	; (b4c4 <nm_bsp_reset+0x48>)
    b4b2:	0512      	lsls	r2, r2, #20
    b4b4:	619a      	str	r2, [r3, #24]
    b4b6:	3464      	adds	r4, #100	; 0x64
		delay_ms(1);
    b4b8:	2001      	movs	r0, #1
    b4ba:	3c01      	subs	r4, #1
    b4bc:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b4be:	2c00      	cmp	r4, #0
    b4c0:	d1fa      	bne.n	b4b8 <nm_bsp_reset+0x3c>
}
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
    b4c4:	41004400 	.word	0x41004400
    b4c8:	0000b439 	.word	0x0000b439

0000b4cc <nm_bsp_init>:
{
    b4cc:	b570      	push	{r4, r5, r6, lr}
	gpfIsr = NULL;
    b4ce:	2300      	movs	r3, #0
	config->input_pull = PORT_PIN_PULL_UP;
    b4d0:	2501      	movs	r5, #1
{
    b4d2:	b082      	sub	sp, #8
    b4d4:	ac01      	add	r4, sp, #4
	gpfIsr = NULL;
    b4d6:	4a15      	ldr	r2, [pc, #84]	; (b52c <nm_bsp_init+0x60>)
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    b4d8:	4e15      	ldr	r6, [pc, #84]	; (b530 <nm_bsp_init+0x64>)
    b4da:	0021      	movs	r1, r4
    b4dc:	201b      	movs	r0, #27
	gpfIsr = NULL;
    b4de:	6013      	str	r3, [r2, #0]
	config->powersave  = false;
    b4e0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    b4e2:	7065      	strb	r5, [r4, #1]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b4e4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    b4e6:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    b4e8:	0021      	movs	r1, r4
    b4ea:	201c      	movs	r0, #28
    b4ec:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    b4ee:	0021      	movs	r1, r4
    b4f0:	2028      	movs	r0, #40	; 0x28
    b4f2:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    b4f4:	2280      	movs	r2, #128	; 0x80
    b4f6:	4b0f      	ldr	r3, [pc, #60]	; (b534 <nm_bsp_init+0x68>)
    b4f8:	0552      	lsls	r2, r2, #21
    b4fa:	615a      	str	r2, [r3, #20]
    b4fc:	2280      	movs	r2, #128	; 0x80
    b4fe:	0512      	lsls	r2, r2, #20
    b500:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    b502:	4b0d      	ldr	r3, [pc, #52]	; (b538 <nm_bsp_init+0x6c>)
    b504:	681a      	ldr	r2, [r3, #0]
    b506:	4215      	tst	r5, r2
    b508:	d002      	beq.n	b510 <nm_bsp_init+0x44>
    b50a:	681b      	ldr	r3, [r3, #0]
    b50c:	079b      	lsls	r3, r3, #30
    b50e:	d401      	bmi.n	b514 <nm_bsp_init+0x48>
	    delay_init();
    b510:	4b0a      	ldr	r3, [pc, #40]	; (b53c <nm_bsp_init+0x70>)
    b512:	4798      	blx	r3
	nm_bsp_reset();
    b514:	4b0a      	ldr	r3, [pc, #40]	; (b540 <nm_bsp_init+0x74>)
    b516:	4798      	blx	r3
	cpu_irq_enable();
    b518:	2201      	movs	r2, #1
    b51a:	4b0a      	ldr	r3, [pc, #40]	; (b544 <nm_bsp_init+0x78>)
    b51c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    b51e:	f3bf 8f5f 	dmb	sy
    b522:	b662      	cpsie	i
}
    b524:	2000      	movs	r0, #0
    b526:	b002      	add	sp, #8
    b528:	bd70      	pop	{r4, r5, r6, pc}
    b52a:	46c0      	nop			; (mov r8, r8)
    b52c:	200008f0 	.word	0x200008f0
    b530:	0000f4e9 	.word	0x0000f4e9
    b534:	41004400 	.word	0x41004400
    b538:	e000e010 	.word	0xe000e010
    b53c:	0000b3f9 	.word	0x0000b3f9
    b540:	0000b47d 	.word	0x0000b47d
    b544:	200001f9 	.word	0x200001f9

0000b548 <nm_bsp_sleep>:
{
    b548:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    b54a:	1e44      	subs	r4, r0, #1
    b54c:	2800      	cmp	r0, #0
    b54e:	d004      	beq.n	b55a <nm_bsp_sleep+0x12>
    b550:	4d02      	ldr	r5, [pc, #8]	; (b55c <nm_bsp_sleep+0x14>)
		delay_ms(1);
    b552:	2001      	movs	r0, #1
    b554:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b556:	3c01      	subs	r4, #1
    b558:	d2fb      	bcs.n	b552 <nm_bsp_sleep+0xa>
	}
}
    b55a:	bd70      	pop	{r4, r5, r6, pc}
    b55c:	0000b439 	.word	0x0000b439

0000b560 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    b560:	b510      	push	{r4, lr}
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    b562:	4b0f      	ldr	r3, [pc, #60]	; (b5a0 <nm_bsp_register_isr+0x40>)
{
    b564:	b084      	sub	sp, #16

	extint_chan_get_config_defaults(&config_extint_chan);
    b566:	ac01      	add	r4, sp, #4
	gpfIsr = pfIsr;
    b568:	6018      	str	r0, [r3, #0]
	extint_chan_get_config_defaults(&config_extint_chan);
    b56a:	0020      	movs	r0, r4
    b56c:	4b0d      	ldr	r3, [pc, #52]	; (b5a4 <nm_bsp_register_isr+0x44>)
    b56e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    b570:	2329      	movs	r3, #41	; 0x29
    b572:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    b574:	2300      	movs	r3, #0
    b576:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b578:	3301      	adds	r3, #1
    b57a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b57c:	3301      	adds	r3, #1
    b57e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    b580:	0021      	movs	r1, r4
    b582:	2009      	movs	r0, #9
    b584:	4b08      	ldr	r3, [pc, #32]	; (b5a8 <nm_bsp_register_isr+0x48>)
    b586:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    b588:	2200      	movs	r2, #0
    b58a:	2109      	movs	r1, #9
    b58c:	4b07      	ldr	r3, [pc, #28]	; (b5ac <nm_bsp_register_isr+0x4c>)
    b58e:	4808      	ldr	r0, [pc, #32]	; (b5b0 <nm_bsp_register_isr+0x50>)
    b590:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b592:	2100      	movs	r1, #0
    b594:	4b07      	ldr	r3, [pc, #28]	; (b5b4 <nm_bsp_register_isr+0x54>)
    b596:	2009      	movs	r0, #9
    b598:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    b59a:	b004      	add	sp, #16
    b59c:	bd10      	pop	{r4, pc}
    b59e:	46c0      	nop			; (mov r8, r8)
    b5a0:	200008f0 	.word	0x200008f0
    b5a4:	0000f45d 	.word	0x0000f45d
    b5a8:	0000f471 	.word	0x0000f471
    b5ac:	0000f339 	.word	0x0000f339
    b5b0:	0000b469 	.word	0x0000b469
    b5b4:	0000f361 	.word	0x0000f361

0000b5b8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    b5b8:	b510      	push	{r4, lr}
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b5ba:	2100      	movs	r1, #0
	if (u8Enable) {
    b5bc:	2800      	cmp	r0, #0
    b5be:	d103      	bne.n	b5c8 <nm_bsp_interrupt_ctrl+0x10>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    b5c0:	2009      	movs	r0, #9
    b5c2:	4b03      	ldr	r3, [pc, #12]	; (b5d0 <nm_bsp_interrupt_ctrl+0x18>)
    b5c4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    b5c6:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b5c8:	4b02      	ldr	r3, [pc, #8]	; (b5d4 <nm_bsp_interrupt_ctrl+0x1c>)
    b5ca:	2009      	movs	r0, #9
    b5cc:	4798      	blx	r3
    b5ce:	e7fa      	b.n	b5c6 <nm_bsp_interrupt_ctrl+0xe>
    b5d0:	0000f385 	.word	0x0000f385
    b5d4:	0000f361 	.word	0x0000f361

0000b5d8 <nm_bus_init>:
	slave->ss_pin          = config->ss_pin;
    b5d8:	230e      	movs	r3, #14
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    b5da:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5dc:	4e30      	ldr	r6, [pc, #192]	; (b6a0 <nm_bus_init+0xc8>)
    b5de:	b08f      	sub	sp, #60	; 0x3c
	slave->address_enabled = config->address_enabled;
    b5e0:	2500      	movs	r5, #0
	slave->ss_pin          = config->ss_pin;
    b5e2:	7033      	strb	r3, [r6, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b5e4:	2401      	movs	r4, #1
    b5e6:	466b      	mov	r3, sp
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b5e8:	4669      	mov	r1, sp
    b5ea:	705c      	strb	r4, [r3, #1]
	config->powersave  = false;
    b5ec:	709d      	strb	r5, [r3, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    b5ee:	701c      	strb	r4, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b5f0:	200e      	movs	r0, #14
    b5f2:	4b2c      	ldr	r3, [pc, #176]	; (b6a4 <nm_bus_init+0xcc>)
	slave->address_enabled = config->address_enabled;
    b5f4:	7075      	strb	r5, [r6, #1]
	slave->address         = config->address;
    b5f6:	70b5      	strb	r5, [r6, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b5f8:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    b5fa:	7831      	ldrb	r1, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
    b5fc:	094a      	lsrs	r2, r1, #5
	if (port_index < PORT_INST_NUM) {
    b5fe:	09cb      	lsrs	r3, r1, #7
    b600:	d148      	bne.n	b694 <nm_bus_init+0xbc>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b602:	0020      	movs	r0, r4
    b604:	351f      	adds	r5, #31
    b606:	4029      	ands	r1, r5
    b608:	4088      	lsls	r0, r1
    b60a:	0001      	movs	r1, r0
		port_base->OUTSET.reg = pin_mask;
    b60c:	4826      	ldr	r0, [pc, #152]	; (b6a8 <nm_bus_init+0xd0>)
    b60e:	01d2      	lsls	r2, r2, #7
    b610:	4684      	mov	ip, r0
    b612:	4462      	add	r2, ip
    b614:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    b616:	466a      	mov	r2, sp
    b618:	7014      	strb	r4, [r2, #0]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    b61a:	22c0      	movs	r2, #192	; 0xc0
    b61c:	0392      	lsls	r2, r2, #14
    b61e:	9203      	str	r2, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b620:	466a      	mov	r2, sp
	config->generator_source = GCLK_GENERATOR_0;
    b622:	4669      	mov	r1, sp
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b624:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    b626:	7453      	strb	r3, [r2, #17]
	config->master_slave_select_enable= false;
    b628:	7513      	strb	r3, [r2, #20]
	config->receiver_enable  = true;
    b62a:	7494      	strb	r4, [r2, #18]
	config->select_slave_low_detect_enable= true;
    b62c:	74d4      	strb	r4, [r2, #19]
	config->generator_source = GCLK_GENERATOR_0;
    b62e:	2224      	movs	r2, #36	; 0x24
	config->data_order       = SPI_DATA_ORDER_MSB;
    b630:	9301      	str	r3, [sp, #4]
	config->generator_source = GCLK_GENERATOR_0;
    b632:	548b      	strb	r3, [r1, r2]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b634:	9302      	str	r3, [sp, #8]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b636:	3a18      	subs	r2, #24
    b638:	2100      	movs	r1, #0
    b63a:	4b1c      	ldr	r3, [pc, #112]	; (b6ac <nm_bus_init+0xd4>)
    b63c:	a806      	add	r0, sp, #24
    b63e:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    b640:	4b1b      	ldr	r3, [pc, #108]	; (b6b0 <nm_bus_init+0xd8>)
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b642:	4e1c      	ldr	r6, [pc, #112]	; (b6b4 <nm_bus_init+0xdc>)
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    b644:	930a      	str	r3, [sp, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    b646:	4b1c      	ldr	r3, [pc, #112]	; (b6b8 <nm_bus_init+0xe0>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b648:	466a      	mov	r2, sp
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    b64a:	930b      	str	r3, [sp, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    b64c:	4b1b      	ldr	r3, [pc, #108]	; (b6bc <nm_bus_init+0xe4>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b64e:	491c      	ldr	r1, [pc, #112]	; (b6c0 <nm_bus_init+0xe8>)
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    b650:	930c      	str	r3, [sp, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    b652:	4b1c      	ldr	r3, [pc, #112]	; (b6c4 <nm_bus_init+0xec>)
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b654:	0030      	movs	r0, r6
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    b656:	930d      	str	r3, [sp, #52]	; 0x34
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    b658:	4b1b      	ldr	r3, [pc, #108]	; (b6c8 <nm_bus_init+0xf0>)
    b65a:	9306      	str	r3, [sp, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b65c:	4b1b      	ldr	r3, [pc, #108]	; (b6cc <nm_bus_init+0xf4>)
    b65e:	4798      	blx	r3
    b660:	2800      	cmp	r0, #0
    b662:	d119      	bne.n	b698 <nm_bus_init+0xc0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b664:	6837      	ldr	r7, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b666:	4b1a      	ldr	r3, [pc, #104]	; (b6d0 <nm_bus_init+0xf8>)
    b668:	0038      	movs	r0, r7
    b66a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b66c:	4005      	ands	r5, r0
    b66e:	40ac      	lsls	r4, r5
    b670:	4b18      	ldr	r3, [pc, #96]	; (b6d4 <nm_bus_init+0xfc>)
    b672:	601c      	str	r4, [r3, #0]
    b674:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b676:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b678:	2b00      	cmp	r3, #0
    b67a:	d1fc      	bne.n	b676 <nm_bus_init+0x9e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b67c:	2202      	movs	r2, #2
    b67e:	683b      	ldr	r3, [r7, #0]
    b680:	4313      	orrs	r3, r2
    b682:	603b      	str	r3, [r7, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    b684:	4b14      	ldr	r3, [pc, #80]	; (b6d8 <nm_bus_init+0x100>)
    b686:	4798      	blx	r3
	nm_bsp_sleep(1);
    b688:	2001      	movs	r0, #1
    b68a:	4b14      	ldr	r3, [pc, #80]	; (b6dc <nm_bus_init+0x104>)
    b68c:	4798      	blx	r3
#endif
	return result;
    b68e:	2000      	movs	r0, #0
}
    b690:	b00f      	add	sp, #60	; 0x3c
    b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b694:	61ad      	str	r5, [r5, #24]
    b696:	deff      	udf	#255	; 0xff
		return M2M_ERR_BUS_FAIL;
    b698:	2006      	movs	r0, #6
    b69a:	4240      	negs	r0, r0
    b69c:	e7f8      	b.n	b690 <nm_bus_init+0xb8>
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	20000d2c 	.word	0x20000d2c
    b6a4:	0000f4e9 	.word	0x0000f4e9
    b6a8:	41004400 	.word	0x41004400
    b6ac:	00013c87 	.word	0x00013c87
    b6b0:	000c0002 	.word	0x000c0002
    b6b4:	20000d30 	.word	0x20000d30
    b6b8:	000d0002 	.word	0x000d0002
    b6bc:	000e0002 	.word	0x000e0002
    b6c0:	42001000 	.word	0x42001000
    b6c4:	000f0002 	.word	0x000f0002
    b6c8:	00b71b00 	.word	0x00b71b00
    b6cc:	0000fad1 	.word	0x0000fad1
    b6d0:	0000f98d 	.word	0x0000f98d
    b6d4:	e000e100 	.word	0xe000e100
    b6d8:	0000b47d 	.word	0x0000b47d
    b6dc:	0000b549 	.word	0x0000b549

0000b6e0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6e2:	46de      	mov	lr, fp
    b6e4:	4657      	mov	r7, sl
    b6e6:	464e      	mov	r6, r9
    b6e8:	4645      	mov	r5, r8
    b6ea:	b5e0      	push	{r5, r6, r7, lr}
    b6ec:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
    b6ee:	2803      	cmp	r0, #3
    b6f0:	d000      	beq.n	b6f4 <nm_bus_ioctl+0x14>
    b6f2:	e074      	b.n	b7de <nm_bus_ioctl+0xfe>
	uint8 u8Dummy = 0;
    b6f4:	2200      	movs	r2, #0
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b6f6:	680b      	ldr	r3, [r1, #0]
    b6f8:	684e      	ldr	r6, [r1, #4]
    b6fa:	9301      	str	r3, [sp, #4]
	uint8 u8Dummy = 0;
    b6fc:	ab02      	add	r3, sp, #8
    b6fe:	3307      	adds	r3, #7
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b700:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    b702:	701a      	strb	r2, [r3, #0]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b704:	2e00      	cmp	r6, #0
    b706:	d058      	beq.n	b7ba <nm_bus_ioctl+0xda>
    b708:	2c00      	cmp	r4, #0
    b70a:	d065      	beq.n	b7d8 <nm_bus_ioctl+0xf8>
	if (pu8Mosi == NULL) {
    b70c:	9a01      	ldr	r2, [sp, #4]
    b70e:	2a00      	cmp	r2, #0
    b710:	d05e      	beq.n	b7d0 <nm_bus_ioctl+0xf0>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b712:	2300      	movs	r3, #0
    b714:	469b      	mov	fp, r3
    b716:	2300      	movs	r3, #0
    b718:	469a      	mov	sl, r3
	spi_select_slave(&master, &slave_inst, true);
    b71a:	4b38      	ldr	r3, [pc, #224]	; (b7fc <nm_bus_ioctl+0x11c>)
    b71c:	4d38      	ldr	r5, [pc, #224]	; (b800 <nm_bus_ioctl+0x120>)
    b71e:	0019      	movs	r1, r3
    b720:	4699      	mov	r9, r3
    b722:	4b38      	ldr	r3, [pc, #224]	; (b804 <nm_bus_ioctl+0x124>)
    b724:	2201      	movs	r2, #1
    b726:	0028      	movs	r0, r5
    b728:	4698      	mov	r8, r3
    b72a:	4798      	blx	r3
			pu8Miso++;
    b72c:	4650      	mov	r0, sl
    b72e:	4243      	negs	r3, r0
    b730:	4158      	adcs	r0, r3
    b732:	4682      	mov	sl, r0
			pu8Mosi++;
    b734:	4658      	mov	r0, fp
    b736:	4243      	negs	r3, r0
    b738:	4158      	adcs	r0, r3
		while (!spi_is_ready_to_write(&master))
    b73a:	2101      	movs	r1, #1
		while (!spi_is_ready_to_read(&master))
    b73c:	2204      	movs	r2, #4
			pu8Mosi++;
    b73e:	4683      	mov	fp, r0
		txd_data = *pu8Mosi;
    b740:	9b01      	ldr	r3, [sp, #4]
    b742:	7818      	ldrb	r0, [r3, #0]
    b744:	682b      	ldr	r3, [r5, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    b746:	7e1f      	ldrb	r7, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    b748:	4239      	tst	r1, r7
    b74a:	d0fc      	beq.n	b746 <nm_bus_ioctl+0x66>
    b74c:	7e1f      	ldrb	r7, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    b74e:	4239      	tst	r1, r7
    b750:	d0fc      	beq.n	b74c <nm_bus_ioctl+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    b752:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b754:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    b756:	4202      	tst	r2, r0
    b758:	d0fc      	beq.n	b754 <nm_bus_ioctl+0x74>
    b75a:	79a8      	ldrb	r0, [r5, #6]
    b75c:	7e1f      	ldrb	r7, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    b75e:	423a      	tst	r2, r7
    b760:	d0fc      	beq.n	b75c <nm_bus_ioctl+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b762:	8b5f      	ldrh	r7, [r3, #26]
    b764:	423a      	tst	r2, r7
    b766:	d007      	beq.n	b778 <nm_bus_ioctl+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    b768:	835a      	strh	r2, [r3, #26]

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b76a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b76c:	7e1f      	ldrb	r7, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    b76e:	423a      	tst	r2, r7
    b770:	d0f4      	beq.n	b75c <nm_bus_ioctl+0x7c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b772:	8b5f      	ldrh	r7, [r3, #26]
    b774:	423a      	tst	r2, r7
    b776:	d1f7      	bne.n	b768 <nm_bus_ioctl+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b77a:	2801      	cmp	r0, #1
    b77c:	d01a      	beq.n	b7b4 <nm_bus_ioctl+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b77e:	b2db      	uxtb	r3, r3
		*pu8Miso = rxd_data;
    b780:	7033      	strb	r3, [r6, #0]
			pu8Mosi++;
    b782:	9b01      	ldr	r3, [sp, #4]
		u16Sz--;
    b784:	3c01      	subs	r4, #1
			pu8Mosi++;
    b786:	445b      	add	r3, fp
		u16Sz--;
    b788:	b2a4      	uxth	r4, r4
			pu8Miso++;
    b78a:	4456      	add	r6, sl
			pu8Mosi++;
    b78c:	9301      	str	r3, [sp, #4]
	while (u16Sz) {
    b78e:	2c00      	cmp	r4, #0
    b790:	d1d6      	bne.n	b740 <nm_bus_ioctl+0x60>
	while (!spi_is_write_complete(&master))
    b792:	2202      	movs	r2, #2
    b794:	6829      	ldr	r1, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    b796:	7e0b      	ldrb	r3, [r1, #24]
    b798:	421a      	tst	r2, r3
    b79a:	d0fc      	beq.n	b796 <nm_bus_ioctl+0xb6>
	spi_select_slave(&master, &slave_inst, false);
    b79c:	2200      	movs	r2, #0
    b79e:	4649      	mov	r1, r9
    b7a0:	0028      	movs	r0, r5
    b7a2:	47c0      	blx	r8
	return M2M_SUCCESS;
    b7a4:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    b7a6:	b005      	add	sp, #20
    b7a8:	bc3c      	pop	{r2, r3, r4, r5}
    b7aa:	4690      	mov	r8, r2
    b7ac:	4699      	mov	r9, r3
    b7ae:	46a2      	mov	sl, r4
    b7b0:	46ab      	mov	fp, r5
    b7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b7b4:	05db      	lsls	r3, r3, #23
    b7b6:	0ddb      	lsrs	r3, r3, #23
    b7b8:	e7e2      	b.n	b780 <nm_bus_ioctl+0xa0>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b7ba:	9a01      	ldr	r2, [sp, #4]
    b7bc:	2a00      	cmp	r2, #0
    b7be:	d00b      	beq.n	b7d8 <nm_bus_ioctl+0xf8>
    b7c0:	2c00      	cmp	r4, #0
    b7c2:	d009      	beq.n	b7d8 <nm_bus_ioctl+0xf8>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b7c4:	2200      	movs	r2, #0
    b7c6:	4693      	mov	fp, r2
		u8SkipMiso = 1;
    b7c8:	3201      	adds	r2, #1
    b7ca:	4692      	mov	sl, r2
		pu8Miso = &u8Dummy;
    b7cc:	001e      	movs	r6, r3
    b7ce:	e7a4      	b.n	b71a <nm_bus_ioctl+0x3a>
		u8SkipMosi = 1;
    b7d0:	2201      	movs	r2, #1
		pu8Mosi = &u8Dummy;
    b7d2:	9301      	str	r3, [sp, #4]
		u8SkipMosi = 1;
    b7d4:	4693      	mov	fp, r2
    b7d6:	e79e      	b.n	b716 <nm_bus_ioctl+0x36>
		return M2M_ERR_INVALID_ARG;
    b7d8:	200f      	movs	r0, #15
    b7da:	4240      	negs	r0, r0
		break;
    b7dc:	e7e3      	b.n	b7a6 <nm_bus_ioctl+0xc6>
			M2M_ERR("invalide ioclt cmd\n");
    b7de:	220e      	movs	r2, #14
    b7e0:	4909      	ldr	r1, [pc, #36]	; (b808 <nm_bus_ioctl+0x128>)
    b7e2:	32ff      	adds	r2, #255	; 0xff
    b7e4:	4b09      	ldr	r3, [pc, #36]	; (b80c <nm_bus_ioctl+0x12c>)
    b7e6:	480a      	ldr	r0, [pc, #40]	; (b810 <nm_bus_ioctl+0x130>)
    b7e8:	4798      	blx	r3
    b7ea:	4b0a      	ldr	r3, [pc, #40]	; (b814 <nm_bus_ioctl+0x134>)
    b7ec:	480a      	ldr	r0, [pc, #40]	; (b818 <nm_bus_ioctl+0x138>)
    b7ee:	4798      	blx	r3
    b7f0:	200d      	movs	r0, #13
    b7f2:	4b0a      	ldr	r3, [pc, #40]	; (b81c <nm_bus_ioctl+0x13c>)
    b7f4:	4798      	blx	r3
			s8Ret = -1;
    b7f6:	2001      	movs	r0, #1
    b7f8:	4240      	negs	r0, r0
	return s8Ret;
    b7fa:	e7d4      	b.n	b7a6 <nm_bus_ioctl+0xc6>
    b7fc:	20000d2c 	.word	0x20000d2c
    b800:	20000d30 	.word	0x20000d30
    b804:	0000fd99 	.word	0x0000fd99
    b808:	00015ca0 	.word	0x00015ca0
    b80c:	00013de9 	.word	0x00013de9
    b810:	00015cb0 	.word	0x00015cb0
    b814:	00013f05 	.word	0x00013f05
    b818:	00015cc4 	.word	0x00015cc4
    b81c:	00013e1d 	.word	0x00013e1d

0000b820 <nm_bus_deinit>:
	config->direction  = PORT_PIN_DIR_INPUT;
    b820:	2300      	movs	r3, #0
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    b822:	b570      	push	{r4, r5, r6, lr}
	SercomSpi *const spi_module = &(module->hw->SPI);
    b824:	4e15      	ldr	r6, [pc, #84]	; (b87c <nm_bus_deinit+0x5c>)
    b826:	b082      	sub	sp, #8
    b828:	6835      	ldr	r5, [r6, #0]
    b82a:	ac01      	add	r4, sp, #4
    b82c:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    b82e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    b830:	7063      	strb	r3, [r4, #1]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    b832:	0028      	movs	r0, r5
    b834:	4b12      	ldr	r3, [pc, #72]	; (b880 <nm_bus_deinit+0x60>)
    b836:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b838:	231f      	movs	r3, #31
    b83a:	4018      	ands	r0, r3
    b83c:	3b1e      	subs	r3, #30
    b83e:	2280      	movs	r2, #128	; 0x80
    b840:	4083      	lsls	r3, r0
    b842:	4910      	ldr	r1, [pc, #64]	; (b884 <nm_bus_deinit+0x64>)
    b844:	508b      	str	r3, [r1, r2]
    b846:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b848:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b84a:	2b00      	cmp	r3, #0
    b84c:	d1fc      	bne.n	b848 <nm_bus_deinit+0x28>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b84e:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    b850:	338f      	adds	r3, #143	; 0x8f
    b852:	752b      	strb	r3, [r5, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    b854:	762b      	strb	r3, [r5, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b856:	682b      	ldr	r3, [r5, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    b858:	0021      	movs	r1, r4
    b85a:	4393      	bics	r3, r2
    b85c:	602b      	str	r3, [r5, #0]
    b85e:	200c      	movs	r0, #12
    b860:	4d09      	ldr	r5, [pc, #36]	; (b888 <nm_bus_deinit+0x68>)
    b862:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    b864:	0021      	movs	r1, r4
    b866:	200f      	movs	r0, #15
    b868:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    b86a:	0021      	movs	r1, r4
    b86c:	200d      	movs	r0, #13
    b86e:	47a8      	blx	r5
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    b870:	0021      	movs	r1, r4
    b872:	200e      	movs	r0, #14
    b874:	47a8      	blx	r5
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    b876:	2000      	movs	r0, #0
    b878:	b002      	add	sp, #8
    b87a:	bd70      	pop	{r4, r5, r6, pc}
    b87c:	20000d30 	.word	0x20000d30
    b880:	0000f98d 	.word	0x0000f98d
    b884:	e000e100 	.word	0xe000e100
    b888:	0000f4e9 	.word	0x0000f4e9

0000b88c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    b88c:	b510      	push	{r4, lr}
    b88e:	1884      	adds	r4, r0, r2
	if(sz == 0) return;
    b890:	2a00      	cmp	r2, #0
    b892:	d005      	beq.n	b8a0 <m2m_memcpy+0x14>
	do
	{
		*pDst = *pSrc;
    b894:	780b      	ldrb	r3, [r1, #0]
		pDst++;
		pSrc++;
    b896:	3101      	adds	r1, #1
		*pDst = *pSrc;
    b898:	7003      	strb	r3, [r0, #0]
		pDst++;
    b89a:	3001      	adds	r0, #1
	}while(--sz);
    b89c:	42a0      	cmp	r0, r4
    b89e:	d1f9      	bne.n	b894 <m2m_memcpy+0x8>
}
    b8a0:	bd10      	pop	{r4, pc}
    b8a2:	46c0      	nop			; (mov r8, r8)

0000b8a4 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    b8a4:	1883      	adds	r3, r0, r2
	if(sz == 0) return;
    b8a6:	2a00      	cmp	r2, #0
    b8a8:	d003      	beq.n	b8b2 <m2m_memset+0xe>
	do
	{
		*pBuf = val;
    b8aa:	7001      	strb	r1, [r0, #0]
		pBuf++;
    b8ac:	3001      	adds	r0, #1
	}while(--sz);
    b8ae:	4298      	cmp	r0, r3
    b8b0:	d1fb      	bne.n	b8aa <m2m_memset+0x6>
}
    b8b2:	4770      	bx	lr

0000b8b4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    b8b4:	7802      	ldrb	r2, [r0, #0]
{
    b8b6:	0003      	movs	r3, r0
	while(*pcStr)
    b8b8:	2000      	movs	r0, #0
    b8ba:	2a00      	cmp	r2, #0
    b8bc:	d005      	beq.n	b8ca <m2m_strlen+0x16>
	{
		u16StrLen ++;
		pcStr++;
    b8be:	3301      	adds	r3, #1
	while(*pcStr)
    b8c0:	781a      	ldrb	r2, [r3, #0]
		u16StrLen ++;
    b8c2:	3001      	adds	r0, #1
    b8c4:	b280      	uxth	r0, r0
	while(*pcStr)
    b8c6:	2a00      	cmp	r2, #0
    b8c8:	d1f9      	bne.n	b8be <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    b8ca:	4770      	bx	lr

0000b8cc <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    b8cc:	4a02      	ldr	r2, [pc, #8]	; (b8d8 <isr+0xc>)
    b8ce:	78d3      	ldrb	r3, [r2, #3]
    b8d0:	3301      	adds	r3, #1
    b8d2:	b2db      	uxtb	r3, r3
    b8d4:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    b8d6:	4770      	bx	lr
    b8d8:	20000d6c 	.word	0x20000d6c

0000b8dc <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    b8dc:	4770      	bx	lr
    b8de:	46c0      	nop			; (mov r8, r8)

0000b8e0 <hif_set_rx_done>:
	gstrHifCxt.u8HifRXDone = 0;
    b8e0:	2200      	movs	r2, #0
{
    b8e2:	b500      	push	{lr}
	gstrHifCxt.u8HifRXDone = 0;
    b8e4:	4b0a      	ldr	r3, [pc, #40]	; (b910 <hif_set_rx_done+0x30>)
{
    b8e6:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    b8e8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    b8ea:	2001      	movs	r0, #1
    b8ec:	4b09      	ldr	r3, [pc, #36]	; (b914 <hif_set_rx_done+0x34>)
    b8ee:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    b8f0:	a901      	add	r1, sp, #4
    b8f2:	4809      	ldr	r0, [pc, #36]	; (b918 <hif_set_rx_done+0x38>)
    b8f4:	4b09      	ldr	r3, [pc, #36]	; (b91c <hif_set_rx_done+0x3c>)
    b8f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d106      	bne.n	b90a <hif_set_rx_done+0x2a>
	reg |= NBIT1;
    b8fc:	2102      	movs	r1, #2
    b8fe:	9b01      	ldr	r3, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b900:	4805      	ldr	r0, [pc, #20]	; (b918 <hif_set_rx_done+0x38>)
	reg |= NBIT1;
    b902:	4319      	orrs	r1, r3
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b904:	4b06      	ldr	r3, [pc, #24]	; (b920 <hif_set_rx_done+0x40>)
	reg |= NBIT1;
    b906:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b908:	4798      	blx	r3
}
    b90a:	b003      	add	sp, #12
    b90c:	bd00      	pop	{pc}
    b90e:	46c0      	nop			; (mov r8, r8)
    b910:	20000d6c 	.word	0x20000d6c
    b914:	0000b5b9 	.word	0x0000b5b9
    b918:	00001070 	.word	0x00001070
    b91c:	0000cba1 	.word	0x0000cba1
    b920:	0000cbad 	.word	0x0000cbad

0000b924 <hif_chip_wake.part.0>:
*	@fn		NMI_API sint8 hif_chip_wake(void);
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
    b924:	b510      	push	{r4, lr}
	if(gstrHifCxt.u8HifRXDone)
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    b926:	4c09      	ldr	r4, [pc, #36]	; (b94c <hif_chip_wake.part.0+0x28>)
    b928:	7863      	ldrb	r3, [r4, #1]
    b92a:	2b00      	cmp	r3, #0
    b92c:	d102      	bne.n	b934 <hif_chip_wake.part.0+0x10>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b92e:	7823      	ldrb	r3, [r4, #0]
    b930:	2b00      	cmp	r3, #0
    b932:	d105      	bne.n	b940 <hif_chip_wake.part.0+0x1c>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    b934:	2000      	movs	r0, #0
    b936:	7863      	ldrb	r3, [r4, #1]
    b938:	3301      	adds	r3, #1
    b93a:	b2db      	uxtb	r3, r3
    b93c:	7063      	strb	r3, [r4, #1]
ERR1:
	return ret;
}
    b93e:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    b940:	4b03      	ldr	r3, [pc, #12]	; (b950 <hif_chip_wake.part.0+0x2c>)
    b942:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    b944:	2800      	cmp	r0, #0
    b946:	d0f5      	beq.n	b934 <hif_chip_wake.part.0+0x10>
    b948:	e7f9      	b.n	b93e <hif_chip_wake.part.0+0x1a>
    b94a:	46c0      	nop			; (mov r8, r8)
    b94c:	20000d6c 	.word	0x20000d6c
    b950:	0000c8a1 	.word	0x0000c8a1

0000b954 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    b954:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    b956:	4b09      	ldr	r3, [pc, #36]	; (b97c <hif_chip_sleep+0x28>)
    b958:	785a      	ldrb	r2, [r3, #1]
    b95a:	2a00      	cmp	r2, #0
    b95c:	d003      	beq.n	b966 <hif_chip_sleep+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    b95e:	785a      	ldrb	r2, [r3, #1]
    b960:	3a01      	subs	r2, #1
    b962:	b2d2      	uxtb	r2, r2
    b964:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    b966:	785a      	ldrb	r2, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    b968:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    b96a:	2a00      	cmp	r2, #0
    b96c:	d102      	bne.n	b974 <hif_chip_sleep+0x20>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b96e:	781b      	ldrb	r3, [r3, #0]
    b970:	2b00      	cmp	r3, #0
    b972:	d100      	bne.n	b976 <hif_chip_sleep+0x22>
		{
		}
	}
ERR1:
	return ret;
}
    b974:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    b976:	4b02      	ldr	r3, [pc, #8]	; (b980 <hif_chip_sleep+0x2c>)
    b978:	4798      	blx	r3
    b97a:	e7fb      	b.n	b974 <hif_chip_sleep+0x20>
    b97c:	20000d6c 	.word	0x20000d6c
    b980:	0000c83d 	.word	0x0000c83d

0000b984 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    b984:	b5f0      	push	{r4, r5, r6, r7, lr}
    b986:	464e      	mov	r6, r9
    b988:	46de      	mov	lr, fp
    b98a:	4657      	mov	r7, sl
    b98c:	4645      	mov	r5, r8
    b98e:	b5e0      	push	{r5, r6, r7, lr}
    b990:	b08b      	sub	sp, #44	; 0x2c
    b992:	9301      	str	r3, [sp, #4]
    b994:	ab14      	add	r3, sp, #80	; 0x50
    b996:	9202      	str	r2, [sp, #8]
    b998:	cb04      	ldmia	r3!, {r2}
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b99a:	ac06      	add	r4, sp, #24
{
    b99c:	881b      	ldrh	r3, [r3, #0]
    b99e:	4692      	mov	sl, r2
    b9a0:	469b      	mov	fp, r3
    b9a2:	ab16      	add	r3, sp, #88	; 0x58
    b9a4:	881b      	ldrh	r3, [r3, #0]
    b9a6:	4681      	mov	r9, r0
    b9a8:	001a      	movs	r2, r3
    b9aa:	9303      	str	r3, [sp, #12]
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b9ac:	237f      	movs	r3, #127	; 0x7f
    b9ae:	400b      	ands	r3, r1
    b9b0:	7063      	strb	r3, [r4, #1]
	strHif.u8Gid		= u8Gid;
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    b9b2:	2308      	movs	r3, #8
	strHif.u8Gid		= u8Gid;
    b9b4:	7020      	strb	r0, [r4, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    b9b6:	8063      	strh	r3, [r4, #2]
	if(pu8DataBuf != NULL)
    b9b8:	4653      	mov	r3, sl
{
    b9ba:	000e      	movs	r6, r1
	if(pu8DataBuf != NULL)
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d100      	bne.n	b9c2 <hif_send+0x3e>
    b9c0:	e081      	b.n	bac6 <hif_send+0x142>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    b9c2:	4694      	mov	ip, r2
    b9c4:	8863      	ldrh	r3, [r4, #2]
    b9c6:	445b      	add	r3, fp
    b9c8:	4463      	add	r3, ip
    b9ca:	b29b      	uxth	r3, r3
    b9cc:	8063      	strh	r3, [r4, #2]
	if(gstrHifCxt.u8HifRXDone)
    b9ce:	4f6d      	ldr	r7, [pc, #436]	; (bb84 <hif_send+0x200>)
    b9d0:	78bb      	ldrb	r3, [r7, #2]
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d02a      	beq.n	ba2c <hif_send+0xa8>
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
	if(ret == M2M_SUCCESS)
	{
		volatile uint32 reg, dma_addr = 0;
    b9d6:	2300      	movs	r3, #0
		volatile uint16 cnt = 0;
    b9d8:	aa04      	add	r2, sp, #16
    b9da:	1d95      	adds	r5, r2, #6
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
		reg |= (uint32)u8Gid;
    b9dc:	464a      	mov	r2, r9
		volatile uint32 reg, dma_addr = 0;
    b9de:	9308      	str	r3, [sp, #32]
		volatile uint16 cnt = 0;
    b9e0:	802b      	strh	r3, [r5, #0]
		reg = 0UL;
    b9e2:	9307      	str	r3, [sp, #28]
		reg |= (uint32)u8Gid;
    b9e4:	9b07      	ldr	r3, [sp, #28]
		reg |= ((uint32)u8Opcode<<8);
    b9e6:	0236      	lsls	r6, r6, #8
		reg |= (uint32)u8Gid;
    b9e8:	431a      	orrs	r2, r3
    b9ea:	9207      	str	r2, [sp, #28]
		reg |= ((uint32)u8Opcode<<8);
    b9ec:	9b07      	ldr	r3, [sp, #28]
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b9ee:	4866      	ldr	r0, [pc, #408]	; (bb88 <hif_send+0x204>)
		reg |= ((uint32)u8Opcode<<8);
    b9f0:	431e      	orrs	r6, r3
    b9f2:	9607      	str	r6, [sp, #28]
		reg |= ((uint32)strHif.u16Length<<16);
    b9f4:	8863      	ldrh	r3, [r4, #2]
    b9f6:	9a07      	ldr	r2, [sp, #28]
    b9f8:	041b      	lsls	r3, r3, #16
    b9fa:	4313      	orrs	r3, r2
    b9fc:	9307      	str	r3, [sp, #28]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b9fe:	4b63      	ldr	r3, [pc, #396]	; (bb8c <hif_send+0x208>)
    ba00:	9907      	ldr	r1, [sp, #28]
    ba02:	4699      	mov	r9, r3
    ba04:	4798      	blx	r3
    ba06:	4680      	mov	r8, r0
		if(M2M_SUCCESS != ret) goto ERR1;
    ba08:	2800      	cmp	r0, #0
    ba0a:	d021      	beq.n	ba50 <hif_send+0xcc>
	if(gstrHifCxt.u8ChipSleep >= 1)
    ba0c:	787b      	ldrb	r3, [r7, #1]
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d107      	bne.n	ba22 <hif_send+0x9e>
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
}
    ba12:	4640      	mov	r0, r8
    ba14:	b00b      	add	sp, #44	; 0x2c
    ba16:	bc3c      	pop	{r2, r3, r4, r5}
    ba18:	4690      	mov	r8, r2
    ba1a:	4699      	mov	r9, r3
    ba1c:	46a2      	mov	sl, r4
    ba1e:	46ab      	mov	fp, r5
    ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gstrHifCxt.u8ChipSleep--;
    ba22:	787b      	ldrb	r3, [r7, #1]
    ba24:	3b01      	subs	r3, #1
    ba26:	b2db      	uxtb	r3, r3
    ba28:	707b      	strb	r3, [r7, #1]
    ba2a:	e7f2      	b.n	ba12 <hif_send+0x8e>
    ba2c:	4b58      	ldr	r3, [pc, #352]	; (bb90 <hif_send+0x20c>)
    ba2e:	4798      	blx	r3
    ba30:	4680      	mov	r8, r0
	if(ret == M2M_SUCCESS)
    ba32:	2800      	cmp	r0, #0
    ba34:	d0cf      	beq.n	b9d6 <hif_send+0x52>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    ba36:	22cb      	movs	r2, #203	; 0xcb
    ba38:	4956      	ldr	r1, [pc, #344]	; (bb94 <hif_send+0x210>)
    ba3a:	0052      	lsls	r2, r2, #1
    ba3c:	4b56      	ldr	r3, [pc, #344]	; (bb98 <hif_send+0x214>)
    ba3e:	4857      	ldr	r0, [pc, #348]	; (bb9c <hif_send+0x218>)
    ba40:	4798      	blx	r3
    ba42:	4b57      	ldr	r3, [pc, #348]	; (bba0 <hif_send+0x21c>)
    ba44:	4857      	ldr	r0, [pc, #348]	; (bba4 <hif_send+0x220>)
    ba46:	4798      	blx	r3
    ba48:	4b57      	ldr	r3, [pc, #348]	; (bba8 <hif_send+0x224>)
    ba4a:	200d      	movs	r0, #13
    ba4c:	4798      	blx	r3
		goto ERR2;
    ba4e:	e7e0      	b.n	ba12 <hif_send+0x8e>
		reg |= NBIT1;
    ba50:	2202      	movs	r2, #2
		reg = 0UL;
    ba52:	9007      	str	r0, [sp, #28]
		reg |= NBIT1;
    ba54:	9b07      	ldr	r3, [sp, #28]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    ba56:	4855      	ldr	r0, [pc, #340]	; (bbac <hif_send+0x228>)
		reg |= NBIT1;
    ba58:	4313      	orrs	r3, r2
    ba5a:	9307      	str	r3, [sp, #28]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    ba5c:	9907      	ldr	r1, [sp, #28]
    ba5e:	47c8      	blx	r9
    ba60:	4680      	mov	r8, r0
		if(M2M_SUCCESS != ret) goto ERR1;
    ba62:	2800      	cmp	r0, #0
    ba64:	d1d2      	bne.n	ba0c <hif_send+0x88>
		dma_addr = 0;
    ba66:	9008      	str	r0, [sp, #32]
		for(cnt = 0; cnt < 1000; cnt ++)
    ba68:	8028      	strh	r0, [r5, #0]
    ba6a:	882a      	ldrh	r2, [r5, #0]
    ba6c:	4b50      	ldr	r3, [pc, #320]	; (bbb0 <hif_send+0x22c>)
    ba6e:	429a      	cmp	r2, r3
    ba70:	d830      	bhi.n	bad4 <hif_send+0x150>
    ba72:	4b50      	ldr	r3, [pc, #320]	; (bbb4 <hif_send+0x230>)
    ba74:	4698      	mov	r8, r3
    ba76:	e00e      	b.n	ba96 <hif_send+0x112>
				nm_bsp_sleep(1);
    ba78:	2001      	movs	r0, #1
    ba7a:	4b4f      	ldr	r3, [pc, #316]	; (bbb8 <hif_send+0x234>)
    ba7c:	4798      	blx	r3
			if (!(reg & NBIT1))
    ba7e:	2602      	movs	r6, #2
    ba80:	9b07      	ldr	r3, [sp, #28]
    ba82:	401e      	ands	r6, r3
    ba84:	d070      	beq.n	bb68 <hif_send+0x1e4>
		for(cnt = 0; cnt < 1000; cnt ++)
    ba86:	882b      	ldrh	r3, [r5, #0]
    ba88:	3301      	adds	r3, #1
    ba8a:	b29b      	uxth	r3, r3
    ba8c:	802b      	strh	r3, [r5, #0]
    ba8e:	882a      	ldrh	r2, [r5, #0]
    ba90:	4b47      	ldr	r3, [pc, #284]	; (bbb0 <hif_send+0x22c>)
    ba92:	429a      	cmp	r2, r3
    ba94:	d81e      	bhi.n	bad4 <hif_send+0x150>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    ba96:	a907      	add	r1, sp, #28
    ba98:	4844      	ldr	r0, [pc, #272]	; (bbac <hif_send+0x228>)
    ba9a:	47c0      	blx	r8
			if(ret != M2M_SUCCESS) break;
    ba9c:	2800      	cmp	r0, #0
    ba9e:	d119      	bne.n	bad4 <hif_send+0x150>
			if(cnt >= 500) {
    baa0:	23f4      	movs	r3, #244	; 0xf4
    baa2:	882a      	ldrh	r2, [r5, #0]
    baa4:	33ff      	adds	r3, #255	; 0xff
    baa6:	429a      	cmp	r2, r3
    baa8:	d9e9      	bls.n	ba7e <hif_send+0xfa>
				if(cnt < 501) {
    baaa:	882a      	ldrh	r2, [r5, #0]
    baac:	3301      	adds	r3, #1
    baae:	429a      	cmp	r2, r3
    bab0:	d8e2      	bhi.n	ba78 <hif_send+0xf4>
					M2M_INFO("Slowing down...\n");
    bab2:	4b39      	ldr	r3, [pc, #228]	; (bb98 <hif_send+0x214>)
    bab4:	4841      	ldr	r0, [pc, #260]	; (bbbc <hif_send+0x238>)
    bab6:	4798      	blx	r3
    bab8:	4b39      	ldr	r3, [pc, #228]	; (bba0 <hif_send+0x21c>)
    baba:	4841      	ldr	r0, [pc, #260]	; (bbc0 <hif_send+0x23c>)
    babc:	4798      	blx	r3
    babe:	4b3a      	ldr	r3, [pc, #232]	; (bba8 <hif_send+0x224>)
    bac0:	200d      	movs	r0, #13
    bac2:	4798      	blx	r3
    bac4:	e7d8      	b.n	ba78 <hif_send+0xf4>
		strHif.u16Length += u16CtrlBufSize;
    bac6:	9a01      	ldr	r2, [sp, #4]
    bac8:	8863      	ldrh	r3, [r4, #2]
    baca:	4694      	mov	ip, r2
    bacc:	4463      	add	r3, ip
    bace:	b29b      	uxth	r3, r3
    bad0:	8063      	strh	r3, [r4, #2]
    bad2:	e77c      	b.n	b9ce <hif_send+0x4a>
		if (dma_addr != 0)
    bad4:	9b08      	ldr	r3, [sp, #32]
    bad6:	2b00      	cmp	r3, #0
    bad8:	d04e      	beq.n	bb78 <hif_send+0x1f4>
			u32CurrAddr = dma_addr;
    bada:	9b08      	ldr	r3, [sp, #32]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    badc:	0021      	movs	r1, r4
			u32CurrAddr = dma_addr;
    bade:	9309      	str	r3, [sp, #36]	; 0x24
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    bae0:	8863      	ldrh	r3, [r4, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    bae2:	2208      	movs	r2, #8
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    bae4:	b29b      	uxth	r3, r3
    bae6:	8063      	strh	r3, [r4, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    bae8:	9809      	ldr	r0, [sp, #36]	; 0x24
    baea:	4c36      	ldr	r4, [pc, #216]	; (bbc4 <hif_send+0x240>)
    baec:	47a0      	blx	r4
    baee:	4680      	mov	r8, r0
			if(M2M_SUCCESS != ret) goto ERR1;
    baf0:	2800      	cmp	r0, #0
    baf2:	d000      	beq.n	baf6 <hif_send+0x172>
    baf4:	e78a      	b.n	ba0c <hif_send+0x88>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baf8:	3308      	adds	r3, #8
    bafa:	9309      	str	r3, [sp, #36]	; 0x24
			if(pu8CtrlBuf != NULL)
    bafc:	9b02      	ldr	r3, [sp, #8]
    bafe:	2b00      	cmp	r3, #0
    bb00:	d00c      	beq.n	bb1c <hif_send+0x198>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    bb02:	9d01      	ldr	r5, [sp, #4]
    bb04:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb06:	002a      	movs	r2, r5
    bb08:	0019      	movs	r1, r3
    bb0a:	47a0      	blx	r4
    bb0c:	4680      	mov	r8, r0
				if(M2M_SUCCESS != ret) goto ERR1;
    bb0e:	2800      	cmp	r0, #0
    bb10:	d000      	beq.n	bb14 <hif_send+0x190>
    bb12:	e77b      	b.n	ba0c <hif_send+0x88>
				u32CurrAddr += u16CtrlBufSize;
    bb14:	46ac      	mov	ip, r5
    bb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb18:	4463      	add	r3, ip
    bb1a:	9309      	str	r3, [sp, #36]	; 0x24
			if(pu8DataBuf != NULL)
    bb1c:	4653      	mov	r3, sl
    bb1e:	2b00      	cmp	r3, #0
    bb20:	d010      	beq.n	bb44 <hif_send+0x1c0>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    bb22:	9901      	ldr	r1, [sp, #4]
    bb24:	9b03      	ldr	r3, [sp, #12]
    bb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb28:	1a5b      	subs	r3, r3, r1
    bb2a:	189b      	adds	r3, r3, r2
    bb2c:	9309      	str	r3, [sp, #36]	; 0x24
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    bb2e:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb30:	465a      	mov	r2, fp
    bb32:	4651      	mov	r1, sl
    bb34:	47a0      	blx	r4
    bb36:	4680      	mov	r8, r0
				if(M2M_SUCCESS != ret) goto ERR1;
    bb38:	2800      	cmp	r0, #0
    bb3a:	d000      	beq.n	bb3e <hif_send+0x1ba>
    bb3c:	e766      	b.n	ba0c <hif_send+0x88>
				u32CurrAddr += u16DataSize;
    bb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb40:	445b      	add	r3, fp
    bb42:	9309      	str	r3, [sp, #36]	; 0x24
			reg |= NBIT1;
    bb44:	2202      	movs	r2, #2
			reg = dma_addr << 2;
    bb46:	9b08      	ldr	r3, [sp, #32]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    bb48:	481f      	ldr	r0, [pc, #124]	; (bbc8 <hif_send+0x244>)
			reg = dma_addr << 2;
    bb4a:	009b      	lsls	r3, r3, #2
    bb4c:	9307      	str	r3, [sp, #28]
			reg |= NBIT1;
    bb4e:	9b07      	ldr	r3, [sp, #28]
    bb50:	4313      	orrs	r3, r2
    bb52:	9307      	str	r3, [sp, #28]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    bb54:	9907      	ldr	r1, [sp, #28]
    bb56:	47c8      	blx	r9
    bb58:	4680      	mov	r8, r0
			if(M2M_SUCCESS != ret) goto ERR1;
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d000      	beq.n	bb60 <hif_send+0x1dc>
    bb5e:	e755      	b.n	ba0c <hif_send+0x88>
 	ret = hif_chip_sleep();
    bb60:	4b1a      	ldr	r3, [pc, #104]	; (bbcc <hif_send+0x248>)
    bb62:	4798      	blx	r3
    bb64:	4680      	mov	r8, r0
	return ret;
    bb66:	e754      	b.n	ba12 <hif_send+0x8e>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    bb68:	a908      	add	r1, sp, #32
    bb6a:	4819      	ldr	r0, [pc, #100]	; (bbd0 <hif_send+0x24c>)
    bb6c:	47c0      	blx	r8
    bb6e:	4680      	mov	r8, r0
				if(ret != M2M_SUCCESS) {
    bb70:	2800      	cmp	r0, #0
    bb72:	d0af      	beq.n	bad4 <hif_send+0x150>
					dma_addr = 0;
    bb74:	9608      	str	r6, [sp, #32]
					goto ERR1;
    bb76:	e749      	b.n	ba0c <hif_send+0x88>
			ret = hif_chip_sleep();
    bb78:	4b14      	ldr	r3, [pc, #80]	; (bbcc <hif_send+0x248>)
    bb7a:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    bb7c:	2303      	movs	r3, #3
    bb7e:	425b      	negs	r3, r3
    bb80:	4698      	mov	r8, r3
			goto ERR2;
    bb82:	e746      	b.n	ba12 <hif_send+0x8e>
    bb84:	20000d6c 	.word	0x20000d6c
    bb88:	0000108c 	.word	0x0000108c
    bb8c:	0000cbad 	.word	0x0000cbad
    bb90:	0000b925 	.word	0x0000b925
    bb94:	00015cf8 	.word	0x00015cf8
    bb98:	00013de9 	.word	0x00013de9
    bb9c:	00015cb0 	.word	0x00015cb0
    bba0:	00013f05 	.word	0x00013f05
    bba4:	00015ffc 	.word	0x00015ffc
    bba8:	00013e1d 	.word	0x00013e1d
    bbac:	00001078 	.word	0x00001078
    bbb0:	000003e7 	.word	0x000003e7
    bbb4:	0000cba1 	.word	0x0000cba1
    bbb8:	0000b549 	.word	0x0000b549
    bbbc:	00015fe0 	.word	0x00015fe0
    bbc0:	00015fec 	.word	0x00015fec
    bbc4:	0000cc1d 	.word	0x0000cc1d
    bbc8:	0000106c 	.word	0x0000106c
    bbcc:	0000b955 	.word	0x0000b955
    bbd0:	00150400 	.word	0x00150400

0000bbd4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    bbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbd6:	4657      	mov	r7, sl
    bbd8:	46de      	mov	lr, fp
    bbda:	464e      	mov	r6, r9
    bbdc:	4645      	mov	r5, r8
    bbde:	b5e0      	push	{r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    bbe0:	4bb5      	ldr	r3, [pc, #724]	; (beb8 <hif_handle_isr+0x2e4>)
{
    bbe2:	b087      	sub	sp, #28
	while (gstrHifCxt.u8Interrupt) {
    bbe4:	469a      	mov	sl, r3
    bbe6:	78db      	ldrb	r3, [r3, #3]
    bbe8:	2b00      	cmp	r3, #0
    bbea:	d100      	bne.n	bbee <hif_handle_isr+0x1a>
    bbec:	e09d      	b.n	bd2a <hif_handle_isr+0x156>
    bbee:	4bb3      	ldr	r3, [pc, #716]	; (bebc <hif_handle_isr+0x2e8>)
    bbf0:	ae04      	add	r6, sp, #16
    bbf2:	4699      	mov	r9, r3
    bbf4:	4bb2      	ldr	r3, [pc, #712]	; (bec0 <hif_handle_isr+0x2ec>)
    bbf6:	469b      	mov	fp, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    bbf8:	4653      	mov	r3, sl
    bbfa:	4652      	mov	r2, sl
    bbfc:	78db      	ldrb	r3, [r3, #3]
    bbfe:	3b01      	subs	r3, #1
    bc00:	b2db      	uxtb	r3, r3
    bc02:	70d3      	strb	r3, [r2, #3]
    bc04:	e034      	b.n	bc70 <hif_handle_isr+0x9c>
		if(reg & 0x1)	/* New interrupt has been received */
    bc06:	9b03      	ldr	r3, [sp, #12]
    bc08:	3401      	adds	r4, #1
    bc0a:	4223      	tst	r3, r4
    bc0c:	d100      	bne.n	bc10 <hif_handle_isr+0x3c>
    bc0e:	e0d4      	b.n	bdba <hif_handle_isr+0x1e6>
			nm_bsp_interrupt_ctrl(0);
    bc10:	2000      	movs	r0, #0
    bc12:	47d8      	blx	fp
			reg &= ~NBIT0;
    bc14:	9903      	ldr	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    bc16:	48ab      	ldr	r0, [pc, #684]	; (bec4 <hif_handle_isr+0x2f0>)
			reg &= ~NBIT0;
    bc18:	43a1      	bics	r1, r4
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    bc1a:	4bab      	ldr	r3, [pc, #684]	; (bec8 <hif_handle_isr+0x2f4>)
			reg &= ~NBIT0;
    bc1c:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    bc1e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    bc20:	2800      	cmp	r0, #0
    bc22:	d138      	bne.n	bc96 <hif_handle_isr+0xc2>
			gstrHifCxt.u8HifRXDone = 1;
    bc24:	4653      	mov	r3, sl
    bc26:	709c      	strb	r4, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    bc28:	9b03      	ldr	r3, [sp, #12]
    bc2a:	049f      	lsls	r7, r3, #18
    bc2c:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
    bc2e:	d100      	bne.n	bc32 <hif_handle_isr+0x5e>
    bc30:	e0db      	b.n	bdea <hif_handle_isr+0x216>
				uint32 address = 0;
    bc32:	9005      	str	r0, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    bc34:	a905      	add	r1, sp, #20
    bc36:	48a5      	ldr	r0, [pc, #660]	; (becc <hif_handle_isr+0x2f8>)
    bc38:	47c8      	blx	r9
    bc3a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    bc3c:	d031      	beq.n	bca2 <hif_handle_isr+0xce>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    bc3e:	22c8      	movs	r2, #200	; 0xc8
    bc40:	4ba3      	ldr	r3, [pc, #652]	; (bed0 <hif_handle_isr+0x2fc>)
    bc42:	32ff      	adds	r2, #255	; 0xff
    bc44:	49a3      	ldr	r1, [pc, #652]	; (bed4 <hif_handle_isr+0x300>)
    bc46:	0018      	movs	r0, r3
    bc48:	4da3      	ldr	r5, [pc, #652]	; (bed8 <hif_handle_isr+0x304>)
    bc4a:	4698      	mov	r8, r3
    bc4c:	47a8      	blx	r5
    bc4e:	48a3      	ldr	r0, [pc, #652]	; (bedc <hif_handle_isr+0x308>)
					M2M_ERR("(hif) address bus fail\n");
    bc50:	4ba3      	ldr	r3, [pc, #652]	; (bee0 <hif_handle_isr+0x30c>)
    bc52:	4798      	blx	r3
    bc54:	200d      	movs	r0, #13
    bc56:	4fa3      	ldr	r7, [pc, #652]	; (bee4 <hif_handle_isr+0x310>)
    bc58:	47b8      	blx	r7
					nm_bsp_interrupt_ctrl(1);
    bc5a:	2001      	movs	r0, #1
    bc5c:	47d8      	blx	fp
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    bc5e:	4aa2      	ldr	r2, [pc, #648]	; (bee8 <hif_handle_isr+0x314>)
    bc60:	49a2      	ldr	r1, [pc, #648]	; (beec <hif_handle_isr+0x318>)
    bc62:	4640      	mov	r0, r8
    bc64:	47a8      	blx	r5
    bc66:	0021      	movs	r1, r4
    bc68:	48a1      	ldr	r0, [pc, #644]	; (bef0 <hif_handle_isr+0x31c>)
    bc6a:	47a8      	blx	r5
    bc6c:	200d      	movs	r0, #13
    bc6e:	47b8      	blx	r7
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    bc70:	a903      	add	r1, sp, #12
    bc72:	4894      	ldr	r0, [pc, #592]	; (bec4 <hif_handle_isr+0x2f0>)
    bc74:	47c8      	blx	r9
    bc76:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    bc78:	d0c5      	beq.n	bc06 <hif_handle_isr+0x32>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    bc7a:	4b95      	ldr	r3, [pc, #596]	; (bed0 <hif_handle_isr+0x2fc>)
    bc7c:	4a9d      	ldr	r2, [pc, #628]	; (bef4 <hif_handle_isr+0x320>)
    bc7e:	4995      	ldr	r1, [pc, #596]	; (bed4 <hif_handle_isr+0x300>)
    bc80:	0018      	movs	r0, r3
    bc82:	4d95      	ldr	r5, [pc, #596]	; (bed8 <hif_handle_isr+0x304>)
    bc84:	4698      	mov	r8, r3
    bc86:	47a8      	blx	r5
    bc88:	4b95      	ldr	r3, [pc, #596]	; (bee0 <hif_handle_isr+0x30c>)
    bc8a:	489b      	ldr	r0, [pc, #620]	; (bef8 <hif_handle_isr+0x324>)
    bc8c:	4798      	blx	r3
    bc8e:	4f95      	ldr	r7, [pc, #596]	; (bee4 <hif_handle_isr+0x310>)
    bc90:	200d      	movs	r0, #13
    bc92:	47b8      	blx	r7
    bc94:	e7e3      	b.n	bc5e <hif_handle_isr+0x8a>
    bc96:	4b8e      	ldr	r3, [pc, #568]	; (bed0 <hif_handle_isr+0x2fc>)
    bc98:	0004      	movs	r4, r0
    bc9a:	4698      	mov	r8, r3
    bc9c:	4d8e      	ldr	r5, [pc, #568]	; (bed8 <hif_handle_isr+0x304>)
    bc9e:	4f91      	ldr	r7, [pc, #580]	; (bee4 <hif_handle_isr+0x310>)
    bca0:	e7dd      	b.n	bc5e <hif_handle_isr+0x8a>
				gstrHifCxt.u32RxAddr = address;
    bca2:	4653      	mov	r3, sl
    bca4:	9a05      	ldr	r2, [sp, #20]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    bca6:	0031      	movs	r1, r6
				gstrHifCxt.u32RxAddr = address;
    bca8:	605a      	str	r2, [r3, #4]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    bcaa:	9805      	ldr	r0, [sp, #20]
				gstrHifCxt.u32RxSize = size;
    bcac:	609f      	str	r7, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    bcae:	2204      	movs	r2, #4
    bcb0:	4b92      	ldr	r3, [pc, #584]	; (befc <hif_handle_isr+0x328>)
    bcb2:	4798      	blx	r3
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    bcb4:	8873      	ldrh	r3, [r6, #2]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    bcb6:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    bcb8:	b29b      	uxth	r3, r3
    bcba:	8073      	strh	r3, [r6, #2]
				if(M2M_SUCCESS != ret)
    bcbc:	2800      	cmp	r0, #0
    bcbe:	d13c      	bne.n	bd3a <hif_handle_isr+0x166>
				if(strHif.u16Length != size)
    bcc0:	8873      	ldrh	r3, [r6, #2]
    bcc2:	429f      	cmp	r7, r3
    bcc4:	d003      	beq.n	bcce <hif_handle_isr+0xfa>
					if((size - strHif.u16Length) > 4)
    bcc6:	8873      	ldrh	r3, [r6, #2]
    bcc8:	1afb      	subs	r3, r7, r3
    bcca:	2b04      	cmp	r3, #4
    bccc:	dc5c      	bgt.n	bd88 <hif_handle_isr+0x1b4>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    bcce:	7833      	ldrb	r3, [r6, #0]
    bcd0:	2b01      	cmp	r3, #1
    bcd2:	d052      	beq.n	bd7a <hif_handle_isr+0x1a6>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    bcd4:	7833      	ldrb	r3, [r6, #0]
    bcd6:	2b02      	cmp	r3, #2
    bcd8:	d100      	bne.n	bcdc <hif_handle_isr+0x108>
    bcda:	e07f      	b.n	bddc <hif_handle_isr+0x208>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    bcdc:	7833      	ldrb	r3, [r6, #0]
    bcde:	2b04      	cmp	r3, #4
    bce0:	d100      	bne.n	bce4 <hif_handle_isr+0x110>
    bce2:	e093      	b.n	be0c <hif_handle_isr+0x238>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    bce4:	7833      	ldrb	r3, [r6, #0]
    bce6:	2b06      	cmp	r3, #6
    bce8:	d100      	bne.n	bcec <hif_handle_isr+0x118>
    bcea:	e096      	b.n	be1a <hif_handle_isr+0x246>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    bcec:	7833      	ldrb	r3, [r6, #0]
    bcee:	2b07      	cmp	r3, #7
    bcf0:	d100      	bne.n	bcf4 <hif_handle_isr+0x120>
    bcf2:	e0a9      	b.n	be48 <hif_handle_isr+0x274>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    bcf4:	7833      	ldrb	r3, [r6, #0]
    bcf6:	2b05      	cmp	r3, #5
    bcf8:	d000      	beq.n	bcfc <hif_handle_isr+0x128>
    bcfa:	e095      	b.n	be28 <hif_handle_isr+0x254>
				    if(gstrHifCxt.pfSslCb)
    bcfc:	4653      	mov	r3, sl
    bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd00:	2b00      	cmp	r3, #0
    bd02:	d009      	beq.n	bd18 <hif_handle_isr+0x144>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    bd04:	4653      	mov	r3, sl
    bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    bd08:	7870      	ldrb	r0, [r6, #1]
    bd0a:	8871      	ldrh	r1, [r6, #2]
    bd0c:	9a05      	ldr	r2, [sp, #20]
    bd0e:	3908      	subs	r1, #8
    bd10:	b2c0      	uxtb	r0, r0
    bd12:	3208      	adds	r2, #8
    bd14:	b289      	uxth	r1, r1
    bd16:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    bd18:	4653      	mov	r3, sl
    bd1a:	789b      	ldrb	r3, [r3, #2]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d116      	bne.n	bd4e <hif_handle_isr+0x17a>
	while (gstrHifCxt.u8Interrupt) {
    bd20:	4653      	mov	r3, sl
    bd22:	78db      	ldrb	r3, [r3, #3]
    bd24:	2b00      	cmp	r3, #0
    bd26:	d000      	beq.n	bd2a <hif_handle_isr+0x156>
    bd28:	e766      	b.n	bbf8 <hif_handle_isr+0x24>
			}
		}
	}

	return ret;
}
    bd2a:	2000      	movs	r0, #0
    bd2c:	b007      	add	sp, #28
    bd2e:	bc3c      	pop	{r2, r3, r4, r5}
    bd30:	4690      	mov	r8, r2
    bd32:	4699      	mov	r9, r3
    bd34:	46a2      	mov	sl, r4
    bd36:	46ab      	mov	fp, r5
    bd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
					M2M_ERR("(hif) address bus fail\n");
    bd3a:	22d2      	movs	r2, #210	; 0xd2
    bd3c:	4b64      	ldr	r3, [pc, #400]	; (bed0 <hif_handle_isr+0x2fc>)
    bd3e:	32ff      	adds	r2, #255	; 0xff
    bd40:	4964      	ldr	r1, [pc, #400]	; (bed4 <hif_handle_isr+0x300>)
    bd42:	0018      	movs	r0, r3
    bd44:	4d64      	ldr	r5, [pc, #400]	; (bed8 <hif_handle_isr+0x304>)
    bd46:	4698      	mov	r8, r3
    bd48:	47a8      	blx	r5
    bd4a:	486d      	ldr	r0, [pc, #436]	; (bf00 <hif_handle_isr+0x32c>)
    bd4c:	e780      	b.n	bc50 <hif_handle_isr+0x7c>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    bd4e:	4b60      	ldr	r3, [pc, #384]	; (bed0 <hif_handle_isr+0x2fc>)
    bd50:	4a6c      	ldr	r2, [pc, #432]	; (bf04 <hif_handle_isr+0x330>)
    bd52:	0018      	movs	r0, r3
    bd54:	495f      	ldr	r1, [pc, #380]	; (bed4 <hif_handle_isr+0x300>)
    bd56:	4d60      	ldr	r5, [pc, #384]	; (bed8 <hif_handle_isr+0x304>)
    bd58:	4698      	mov	r8, r3
    bd5a:	47a8      	blx	r5
    bd5c:	7831      	ldrb	r1, [r6, #0]
    bd5e:	7872      	ldrb	r2, [r6, #1]
    bd60:	b2c9      	uxtb	r1, r1
    bd62:	b2d2      	uxtb	r2, r2
    bd64:	4868      	ldr	r0, [pc, #416]	; (bf08 <hif_handle_isr+0x334>)
    bd66:	47a8      	blx	r5
    bd68:	200d      	movs	r0, #13
    bd6a:	4f5e      	ldr	r7, [pc, #376]	; (bee4 <hif_handle_isr+0x310>)
    bd6c:	47b8      	blx	r7
					ret = hif_set_rx_done();
    bd6e:	4b67      	ldr	r3, [pc, #412]	; (bf0c <hif_handle_isr+0x338>)
    bd70:	4798      	blx	r3
					if(ret != M2M_SUCCESS) goto ERR1;
    bd72:	2800      	cmp	r0, #0
    bd74:	d0d4      	beq.n	bd20 <hif_handle_isr+0x14c>
    bd76:	0004      	movs	r4, r0
    bd78:	e771      	b.n	bc5e <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfWifiCb)
    bd7a:	4653      	mov	r3, sl
    bd7c:	68db      	ldr	r3, [r3, #12]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d069      	beq.n	be56 <hif_handle_isr+0x282>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    bd82:	4653      	mov	r3, sl
    bd84:	68db      	ldr	r3, [r3, #12]
    bd86:	e7bf      	b.n	bd08 <hif_handle_isr+0x134>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    bd88:	22ed      	movs	r2, #237	; 0xed
						nm_bsp_interrupt_ctrl(1);
    bd8a:	2406      	movs	r4, #6
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    bd8c:	4b50      	ldr	r3, [pc, #320]	; (bed0 <hif_handle_isr+0x2fc>)
    bd8e:	0052      	lsls	r2, r2, #1
    bd90:	4950      	ldr	r1, [pc, #320]	; (bed4 <hif_handle_isr+0x300>)
    bd92:	0018      	movs	r0, r3
    bd94:	4d50      	ldr	r5, [pc, #320]	; (bed8 <hif_handle_isr+0x304>)
    bd96:	4698      	mov	r8, r3
    bd98:	47a8      	blx	r5
    bd9a:	8872      	ldrh	r2, [r6, #2]
    bd9c:	7833      	ldrb	r3, [r6, #0]
    bd9e:	7871      	ldrb	r1, [r6, #1]
    bda0:	b292      	uxth	r2, r2
    bda2:	b2db      	uxtb	r3, r3
    bda4:	9100      	str	r1, [sp, #0]
    bda6:	485a      	ldr	r0, [pc, #360]	; (bf10 <hif_handle_isr+0x33c>)
    bda8:	0039      	movs	r1, r7
    bdaa:	47a8      	blx	r5
    bdac:	200d      	movs	r0, #13
    bdae:	4f4d      	ldr	r7, [pc, #308]	; (bee4 <hif_handle_isr+0x310>)
    bdb0:	47b8      	blx	r7
						nm_bsp_interrupt_ctrl(1);
    bdb2:	2001      	movs	r0, #1
    bdb4:	47d8      	blx	fp
    bdb6:	4264      	negs	r4, r4
    bdb8:	e751      	b.n	bc5e <hif_handle_isr+0x8a>
			M2M_ERR("(hif) False interrupt %lx",reg);
    bdba:	2289      	movs	r2, #137	; 0x89
    bdbc:	240c      	movs	r4, #12
    bdbe:	4b44      	ldr	r3, [pc, #272]	; (bed0 <hif_handle_isr+0x2fc>)
    bdc0:	0092      	lsls	r2, r2, #2
    bdc2:	0018      	movs	r0, r3
    bdc4:	4943      	ldr	r1, [pc, #268]	; (bed4 <hif_handle_isr+0x300>)
    bdc6:	4d44      	ldr	r5, [pc, #272]	; (bed8 <hif_handle_isr+0x304>)
    bdc8:	4698      	mov	r8, r3
    bdca:	47a8      	blx	r5
    bdcc:	9903      	ldr	r1, [sp, #12]
    bdce:	4851      	ldr	r0, [pc, #324]	; (bf14 <hif_handle_isr+0x340>)
    bdd0:	47a8      	blx	r5
    bdd2:	200d      	movs	r0, #13
    bdd4:	4f43      	ldr	r7, [pc, #268]	; (bee4 <hif_handle_isr+0x310>)
    bdd6:	47b8      	blx	r7
    bdd8:	4264      	negs	r4, r4
    bdda:	e740      	b.n	bc5e <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfIpCb)
    bddc:	4653      	mov	r3, sl
    bdde:	691b      	ldr	r3, [r3, #16]
    bde0:	2b00      	cmp	r3, #0
    bde2:	d046      	beq.n	be72 <hif_handle_isr+0x29e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    bde4:	4653      	mov	r3, sl
    bde6:	691b      	ldr	r3, [r3, #16]
    bde8:	e78e      	b.n	bd08 <hif_handle_isr+0x134>
				M2M_ERR("(hif) Wrong Size\n");
    bdea:	2287      	movs	r2, #135	; 0x87
    bdec:	2402      	movs	r4, #2
    bdee:	4b38      	ldr	r3, [pc, #224]	; (bed0 <hif_handle_isr+0x2fc>)
    bdf0:	0092      	lsls	r2, r2, #2
    bdf2:	4938      	ldr	r1, [pc, #224]	; (bed4 <hif_handle_isr+0x300>)
    bdf4:	0018      	movs	r0, r3
    bdf6:	4d38      	ldr	r5, [pc, #224]	; (bed8 <hif_handle_isr+0x304>)
    bdf8:	4698      	mov	r8, r3
    bdfa:	47a8      	blx	r5
    bdfc:	4b38      	ldr	r3, [pc, #224]	; (bee0 <hif_handle_isr+0x30c>)
    bdfe:	4846      	ldr	r0, [pc, #280]	; (bf18 <hif_handle_isr+0x344>)
    be00:	4798      	blx	r3
    be02:	200d      	movs	r0, #13
    be04:	4f37      	ldr	r7, [pc, #220]	; (bee4 <hif_handle_isr+0x310>)
    be06:	47b8      	blx	r7
    be08:	4264      	negs	r4, r4
    be0a:	e728      	b.n	bc5e <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfOtaCb)
    be0c:	4653      	mov	r3, sl
    be0e:	695b      	ldr	r3, [r3, #20]
    be10:	2b00      	cmp	r3, #0
    be12:	d037      	beq.n	be84 <hif_handle_isr+0x2b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    be14:	4653      	mov	r3, sl
    be16:	695b      	ldr	r3, [r3, #20]
    be18:	e776      	b.n	bd08 <hif_handle_isr+0x134>
					if(gstrHifCxt.pfCryptoCb)
    be1a:	4653      	mov	r3, sl
    be1c:	6a1b      	ldr	r3, [r3, #32]
    be1e:	2b00      	cmp	r3, #0
    be20:	d039      	beq.n	be96 <hif_handle_isr+0x2c2>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    be22:	4653      	mov	r3, sl
    be24:	6a1b      	ldr	r3, [r3, #32]
    be26:	e76f      	b.n	bd08 <hif_handle_isr+0x134>
					M2M_ERR("(hif) invalid group ID\n");
    be28:	2406      	movs	r4, #6
    be2a:	4b29      	ldr	r3, [pc, #164]	; (bed0 <hif_handle_isr+0x2fc>)
    be2c:	4a3b      	ldr	r2, [pc, #236]	; (bf1c <hif_handle_isr+0x348>)
    be2e:	4929      	ldr	r1, [pc, #164]	; (bed4 <hif_handle_isr+0x300>)
    be30:	0018      	movs	r0, r3
    be32:	4d29      	ldr	r5, [pc, #164]	; (bed8 <hif_handle_isr+0x304>)
    be34:	4698      	mov	r8, r3
    be36:	47a8      	blx	r5
    be38:	4b29      	ldr	r3, [pc, #164]	; (bee0 <hif_handle_isr+0x30c>)
    be3a:	4839      	ldr	r0, [pc, #228]	; (bf20 <hif_handle_isr+0x34c>)
    be3c:	4798      	blx	r3
    be3e:	200d      	movs	r0, #13
    be40:	4f28      	ldr	r7, [pc, #160]	; (bee4 <hif_handle_isr+0x310>)
    be42:	47b8      	blx	r7
    be44:	4264      	negs	r4, r4
    be46:	e70a      	b.n	bc5e <hif_handle_isr+0x8a>
					if(gstrHifCxt.pfSigmaCb)
    be48:	4653      	mov	r3, sl
    be4a:	699b      	ldr	r3, [r3, #24]
    be4c:	2b00      	cmp	r3, #0
    be4e:	d02a      	beq.n	bea6 <hif_handle_isr+0x2d2>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    be50:	4653      	mov	r3, sl
    be52:	699b      	ldr	r3, [r3, #24]
    be54:	e758      	b.n	bd08 <hif_handle_isr+0x134>
						M2M_ERR("WIFI callback is not registered\n");
    be56:	22f3      	movs	r2, #243	; 0xf3
    be58:	4b1d      	ldr	r3, [pc, #116]	; (bed0 <hif_handle_isr+0x2fc>)
    be5a:	0052      	lsls	r2, r2, #1
    be5c:	491d      	ldr	r1, [pc, #116]	; (bed4 <hif_handle_isr+0x300>)
    be5e:	0018      	movs	r0, r3
    be60:	4d1d      	ldr	r5, [pc, #116]	; (bed8 <hif_handle_isr+0x304>)
    be62:	47a8      	blx	r5
    be64:	482f      	ldr	r0, [pc, #188]	; (bf24 <hif_handle_isr+0x350>)
						M2M_ERR("Sigma callback is not registered\n");
    be66:	4b1e      	ldr	r3, [pc, #120]	; (bee0 <hif_handle_isr+0x30c>)
    be68:	4798      	blx	r3
    be6a:	4f1e      	ldr	r7, [pc, #120]	; (bee4 <hif_handle_isr+0x310>)
    be6c:	200d      	movs	r0, #13
    be6e:	47b8      	blx	r7
    be70:	e752      	b.n	bd18 <hif_handle_isr+0x144>
						M2M_ERR("Scoket callback is not registered\n");
    be72:	22f7      	movs	r2, #247	; 0xf7
    be74:	4b16      	ldr	r3, [pc, #88]	; (bed0 <hif_handle_isr+0x2fc>)
    be76:	0052      	lsls	r2, r2, #1
    be78:	4916      	ldr	r1, [pc, #88]	; (bed4 <hif_handle_isr+0x300>)
    be7a:	0018      	movs	r0, r3
    be7c:	4d16      	ldr	r5, [pc, #88]	; (bed8 <hif_handle_isr+0x304>)
    be7e:	47a8      	blx	r5
    be80:	4829      	ldr	r0, [pc, #164]	; (bf28 <hif_handle_isr+0x354>)
    be82:	e7f0      	b.n	be66 <hif_handle_isr+0x292>
						M2M_ERR("Ota callback is not registered\n");
    be84:	22fb      	movs	r2, #251	; 0xfb
    be86:	4b12      	ldr	r3, [pc, #72]	; (bed0 <hif_handle_isr+0x2fc>)
    be88:	0052      	lsls	r2, r2, #1
    be8a:	4912      	ldr	r1, [pc, #72]	; (bed4 <hif_handle_isr+0x300>)
    be8c:	0018      	movs	r0, r3
    be8e:	4d12      	ldr	r5, [pc, #72]	; (bed8 <hif_handle_isr+0x304>)
    be90:	47a8      	blx	r5
    be92:	4826      	ldr	r0, [pc, #152]	; (bf2c <hif_handle_isr+0x358>)
    be94:	e7e7      	b.n	be66 <hif_handle_isr+0x292>
						M2M_ERR("Crypto callback is not registered\n");
    be96:	4b0e      	ldr	r3, [pc, #56]	; (bed0 <hif_handle_isr+0x2fc>)
    be98:	4a25      	ldr	r2, [pc, #148]	; (bf30 <hif_handle_isr+0x35c>)
    be9a:	490e      	ldr	r1, [pc, #56]	; (bed4 <hif_handle_isr+0x300>)
    be9c:	0018      	movs	r0, r3
    be9e:	4d0e      	ldr	r5, [pc, #56]	; (bed8 <hif_handle_isr+0x304>)
    bea0:	47a8      	blx	r5
    bea2:	4824      	ldr	r0, [pc, #144]	; (bf34 <hif_handle_isr+0x360>)
    bea4:	e7df      	b.n	be66 <hif_handle_isr+0x292>
						M2M_ERR("Sigma callback is not registered\n");
    bea6:	4b0a      	ldr	r3, [pc, #40]	; (bed0 <hif_handle_isr+0x2fc>)
    bea8:	4a23      	ldr	r2, [pc, #140]	; (bf38 <hif_handle_isr+0x364>)
    beaa:	490a      	ldr	r1, [pc, #40]	; (bed4 <hif_handle_isr+0x300>)
    beac:	0018      	movs	r0, r3
    beae:	4d0a      	ldr	r5, [pc, #40]	; (bed8 <hif_handle_isr+0x304>)
    beb0:	47a8      	blx	r5
    beb2:	4822      	ldr	r0, [pc, #136]	; (bf3c <hif_handle_isr+0x368>)
    beb4:	e7d7      	b.n	be66 <hif_handle_isr+0x292>
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	20000d6c 	.word	0x20000d6c
    bebc:	0000cba1 	.word	0x0000cba1
    bec0:	0000b5b9 	.word	0x0000b5b9
    bec4:	00001070 	.word	0x00001070
    bec8:	0000cbad 	.word	0x0000cbad
    becc:	00001084 	.word	0x00001084
    bed0:	00015cb0 	.word	0x00015cb0
    bed4:	00015d04 	.word	0x00015d04
    bed8:	00013de9 	.word	0x00013de9
    bedc:	00015d38 	.word	0x00015d38
    bee0:	00013f05 	.word	0x00013f05
    bee4:	00013e1d 	.word	0x00013e1d
    bee8:	0000024a 	.word	0x0000024a
    beec:	00015d0c 	.word	0x00015d0c
    bef0:	00015ef8 	.word	0x00015ef8
    bef4:	0000022d 	.word	0x0000022d
    bef8:	00015ed4 	.word	0x00015ed4
    befc:	0000cbb9 	.word	0x0000cbb9
    bf00:	00015d5c 	.word	0x00015d5c
    bf04:	00000215 	.word	0x00000215
    bf08:	00015e78 	.word	0x00015e78
    bf0c:	0000b8e1 	.word	0x0000b8e1
    bf10:	00015d74 	.word	0x00015d74
    bf14:	00015eb8 	.word	0x00015eb8
    bf18:	00015ea4 	.word	0x00015ea4
    bf1c:	0000020f 	.word	0x0000020f
    bf20:	00015e60 	.word	0x00015e60
    bf24:	00015db4 	.word	0x00015db4
    bf28:	00015dd4 	.word	0x00015dd4
    bf2c:	00015df8 	.word	0x00015df8
    bf30:	000001ff 	.word	0x000001ff
    bf34:	00015e18 	.word	0x00015e18
    bf38:	00000206 	.word	0x00000206
    bf3c:	00015e3c 	.word	0x00015e3c

0000bf40 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf42:	0014      	movs	r4, r2
    bf44:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    bf46:	2800      	cmp	r0, #0
    bf48:	d01d      	beq.n	bf86 <hif_receive+0x46>
    bf4a:	2900      	cmp	r1, #0
    bf4c:	d01b      	beq.n	bf86 <hif_receive+0x46>
    bf4e:	2a00      	cmp	r2, #0
    bf50:	d019      	beq.n	bf86 <hif_receive+0x46>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    bf52:	4e1f      	ldr	r6, [pc, #124]	; (bfd0 <hif_receive+0x90>)
    bf54:	68b3      	ldr	r3, [r6, #8]
    bf56:	429a      	cmp	r2, r3
    bf58:	d82f      	bhi.n	bfba <hif_receive+0x7a>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    bf5a:	6873      	ldr	r3, [r6, #4]
    bf5c:	4298      	cmp	r0, r3
    bf5e:	d317      	bcc.n	bf90 <hif_receive+0x50>
    bf60:	6873      	ldr	r3, [r6, #4]
    bf62:	1887      	adds	r7, r0, r2
    bf64:	68b2      	ldr	r2, [r6, #8]
    bf66:	189b      	adds	r3, r3, r2
    bf68:	429f      	cmp	r7, r3
    bf6a:	d811      	bhi.n	bf90 <hif_receive+0x50>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    bf6c:	0022      	movs	r2, r4
    bf6e:	4b19      	ldr	r3, [pc, #100]	; (bfd4 <hif_receive+0x94>)
    bf70:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    bf72:	2800      	cmp	r0, #0
    bf74:	d10b      	bne.n	bf8e <hif_receive+0x4e>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    bf76:	6873      	ldr	r3, [r6, #4]
    bf78:	68b2      	ldr	r2, [r6, #8]
    bf7a:	189b      	adds	r3, r3, r2
    bf7c:	429f      	cmp	r7, r3
    bf7e:	d004      	beq.n	bf8a <hif_receive+0x4a>
    bf80:	2d00      	cmp	r5, #0
    bf82:	d102      	bne.n	bf8a <hif_receive+0x4a>
    bf84:	e003      	b.n	bf8e <hif_receive+0x4e>
		if(isDone)
    bf86:	2d00      	cmp	r5, #0
    bf88:	d010      	beq.n	bfac <hif_receive+0x6c>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    bf8a:	4b13      	ldr	r3, [pc, #76]	; (bfd8 <hif_receive+0x98>)
    bf8c:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    bf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    bf90:	4a12      	ldr	r2, [pc, #72]	; (bfdc <hif_receive+0x9c>)
    bf92:	4913      	ldr	r1, [pc, #76]	; (bfe0 <hif_receive+0xa0>)
    bf94:	4813      	ldr	r0, [pc, #76]	; (bfe4 <hif_receive+0xa4>)
    bf96:	4b14      	ldr	r3, [pc, #80]	; (bfe8 <hif_receive+0xa8>)
    bf98:	4798      	blx	r3
    bf9a:	4814      	ldr	r0, [pc, #80]	; (bfec <hif_receive+0xac>)
    bf9c:	4b14      	ldr	r3, [pc, #80]	; (bff0 <hif_receive+0xb0>)
    bf9e:	4798      	blx	r3
    bfa0:	200d      	movs	r0, #13
    bfa2:	4b14      	ldr	r3, [pc, #80]	; (bff4 <hif_receive+0xb4>)
    bfa4:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    bfa6:	200c      	movs	r0, #12
    bfa8:	4240      	negs	r0, r0
		goto ERR1;
    bfaa:	e7f0      	b.n	bf8e <hif_receive+0x4e>
			M2M_ERR(" hif_receive: Invalid argument\n");
    bfac:	4a12      	ldr	r2, [pc, #72]	; (bff8 <hif_receive+0xb8>)
    bfae:	490c      	ldr	r1, [pc, #48]	; (bfe0 <hif_receive+0xa0>)
    bfb0:	480c      	ldr	r0, [pc, #48]	; (bfe4 <hif_receive+0xa4>)
    bfb2:	4b0d      	ldr	r3, [pc, #52]	; (bfe8 <hif_receive+0xa8>)
    bfb4:	4798      	blx	r3
    bfb6:	4811      	ldr	r0, [pc, #68]	; (bffc <hif_receive+0xbc>)
    bfb8:	e7f0      	b.n	bf9c <hif_receive+0x5c>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    bfba:	4a11      	ldr	r2, [pc, #68]	; (c000 <hif_receive+0xc0>)
    bfbc:	4908      	ldr	r1, [pc, #32]	; (bfe0 <hif_receive+0xa0>)
    bfbe:	4d0a      	ldr	r5, [pc, #40]	; (bfe8 <hif_receive+0xa8>)
    bfc0:	4808      	ldr	r0, [pc, #32]	; (bfe4 <hif_receive+0xa4>)
    bfc2:	47a8      	blx	r5
    bfc4:	68b2      	ldr	r2, [r6, #8]
    bfc6:	0021      	movs	r1, r4
    bfc8:	480e      	ldr	r0, [pc, #56]	; (c004 <hif_receive+0xc4>)
    bfca:	47a8      	blx	r5
    bfcc:	e7e8      	b.n	bfa0 <hif_receive+0x60>
    bfce:	46c0      	nop			; (mov r8, r8)
    bfd0:	20000d6c 	.word	0x20000d6c
    bfd4:	0000cbb9 	.word	0x0000cbb9
    bfd8:	0000b8e1 	.word	0x0000b8e1
    bfdc:	00000279 	.word	0x00000279
    bfe0:	00015d1c 	.word	0x00015d1c
    bfe4:	00015cb0 	.word	0x00015cb0
    bfe8:	00013de9 	.word	0x00013de9
    bfec:	00015f90 	.word	0x00015f90
    bff0:	00013f05 	.word	0x00013f05
    bff4:	00013e1d 	.word	0x00013e1d
    bff8:	0000026b 	.word	0x0000026b
    bffc:	00015f28 	.word	0x00015f28
    c000:	00000273 	.word	0x00000273
    c004:	00015f48 	.word	0x00015f48

0000c008 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    c008:	b570      	push	{r4, r5, r6, lr}
    c00a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    c00c:	2807      	cmp	r0, #7
    c00e:	d81f      	bhi.n	c050 <hif_register_cb+0x48>
    c010:	4a16      	ldr	r2, [pc, #88]	; (c06c <hif_register_cb+0x64>)
    c012:	0083      	lsls	r3, r0, #2
    c014:	58d3      	ldr	r3, [r2, r3]
    c016:	469f      	mov	pc, r3
	sint8 ret = M2M_SUCCESS;
    c018:	2000      	movs	r0, #0
			break;
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    c01a:	4b15      	ldr	r3, [pc, #84]	; (c070 <hif_register_cb+0x68>)
    c01c:	6199      	str	r1, [r3, #24]
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    c01e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    c020:	4b13      	ldr	r3, [pc, #76]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c022:	2000      	movs	r0, #0
			gstrHifCxt.pfWifiCb = fn;
    c024:	60d9      	str	r1, [r3, #12]
			break;
    c026:	e7fa      	b.n	c01e <hif_register_cb+0x16>
			gstrHifCxt.pfIpCb = fn;
    c028:	4b11      	ldr	r3, [pc, #68]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c02a:	2000      	movs	r0, #0
			gstrHifCxt.pfIpCb = fn;
    c02c:	6119      	str	r1, [r3, #16]
			break;
    c02e:	e7f6      	b.n	c01e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    c030:	4b0f      	ldr	r3, [pc, #60]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c032:	2000      	movs	r0, #0
			gstrHifCxt.pfHifCb = fn;
    c034:	61d9      	str	r1, [r3, #28]
			break;
    c036:	e7f2      	b.n	c01e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    c038:	4b0d      	ldr	r3, [pc, #52]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c03a:	2000      	movs	r0, #0
			gstrHifCxt.pfOtaCb = fn;
    c03c:	6159      	str	r1, [r3, #20]
			break;
    c03e:	e7ee      	b.n	c01e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    c040:	4b0b      	ldr	r3, [pc, #44]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c042:	2000      	movs	r0, #0
			gstrHifCxt.pfSslCb = fn;
    c044:	6259      	str	r1, [r3, #36]	; 0x24
			break;
    c046:	e7ea      	b.n	c01e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    c048:	4b09      	ldr	r3, [pc, #36]	; (c070 <hif_register_cb+0x68>)
	sint8 ret = M2M_SUCCESS;
    c04a:	2000      	movs	r0, #0
			gstrHifCxt.pfCryptoCb = fn;
    c04c:	6219      	str	r1, [r3, #32]
			break;
    c04e:	e7e6      	b.n	c01e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    c050:	4a08      	ldr	r2, [pc, #32]	; (c074 <hif_register_cb+0x6c>)
    c052:	4909      	ldr	r1, [pc, #36]	; (c078 <hif_register_cb+0x70>)
    c054:	4d09      	ldr	r5, [pc, #36]	; (c07c <hif_register_cb+0x74>)
    c056:	480a      	ldr	r0, [pc, #40]	; (c080 <hif_register_cb+0x78>)
    c058:	47a8      	blx	r5
    c05a:	0021      	movs	r1, r4
    c05c:	4809      	ldr	r0, [pc, #36]	; (c084 <hif_register_cb+0x7c>)
    c05e:	47a8      	blx	r5
    c060:	200d      	movs	r0, #13
    c062:	4b09      	ldr	r3, [pc, #36]	; (c088 <hif_register_cb+0x80>)
    c064:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c066:	200c      	movs	r0, #12
    c068:	4240      	negs	r0, r0
			break;
    c06a:	e7d8      	b.n	c01e <hif_register_cb+0x16>
    c06c:	00015cd8 	.word	0x00015cd8
    c070:	20000d6c 	.word	0x20000d6c
    c074:	000002b1 	.word	0x000002b1
    c078:	00015d28 	.word	0x00015d28
    c07c:	00013de9 	.word	0x00013de9
    c080:	00015cb0 	.word	0x00015cb0
    c084:	00015fd4 	.word	0x00015fd4
    c088:	00013e1d 	.word	0x00013e1d

0000c08c <hif_init>:
{
    c08c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    c08e:	2228      	movs	r2, #40	; 0x28
    c090:	2100      	movs	r1, #0
    c092:	4806      	ldr	r0, [pc, #24]	; (c0ac <hif_init+0x20>)
    c094:	4b06      	ldr	r3, [pc, #24]	; (c0b0 <hif_init+0x24>)
    c096:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    c098:	4806      	ldr	r0, [pc, #24]	; (c0b4 <hif_init+0x28>)
    c09a:	4b07      	ldr	r3, [pc, #28]	; (c0b8 <hif_init+0x2c>)
    c09c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    c09e:	4907      	ldr	r1, [pc, #28]	; (c0bc <hif_init+0x30>)
    c0a0:	2003      	movs	r0, #3
    c0a2:	4b07      	ldr	r3, [pc, #28]	; (c0c0 <hif_init+0x34>)
    c0a4:	4798      	blx	r3
}
    c0a6:	2000      	movs	r0, #0
    c0a8:	bd10      	pop	{r4, pc}
    c0aa:	46c0      	nop			; (mov r8, r8)
    c0ac:	20000d6c 	.word	0x20000d6c
    c0b0:	0000b8a5 	.word	0x0000b8a5
    c0b4:	0000b8cd 	.word	0x0000b8cd
    c0b8:	0000b561 	.word	0x0000b561
    c0bc:	0000b8dd 	.word	0x0000b8dd
    c0c0:	0000c009 	.word	0x0000c009

0000c0c4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    c0c4:	b530      	push	{r4, r5, lr}
    c0c6:	0004      	movs	r4, r0
    c0c8:	b09d      	sub	sp, #116	; 0x74
    c0ca:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    c0cc:	282c      	cmp	r0, #44	; 0x2c
    c0ce:	d03f      	beq.n	c150 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    c0d0:	281b      	cmp	r0, #27
    c0d2:	d04d      	beq.n	c170 <m2m_wifi_cb+0xac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    c0d4:	2806      	cmp	r0, #6
    c0d6:	d05b      	beq.n	c190 <m2m_wifi_cb+0xcc>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    c0d8:	280e      	cmp	r0, #14
    c0da:	d027      	beq.n	c12c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    c0dc:	2832      	cmp	r0, #50	; 0x32
    c0de:	d027      	beq.n	c130 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    c0e0:	282f      	cmp	r0, #47	; 0x2f
    c0e2:	d065      	beq.n	c1b0 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    c0e4:	2834      	cmp	r0, #52	; 0x34
    c0e6:	d100      	bne.n	c0ea <m2m_wifi_cb+0x26>
    c0e8:	e077      	b.n	c1da <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    c0ea:	2811      	cmp	r0, #17
    c0ec:	d100      	bne.n	c0f0 <m2m_wifi_cb+0x2c>
    c0ee:	e0a8      	b.n	c242 <m2m_wifi_cb+0x17e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    c0f0:	2813      	cmp	r0, #19
    c0f2:	d100      	bne.n	c0f6 <m2m_wifi_cb+0x32>
    c0f4:	e0be      	b.n	c274 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    c0f6:	2804      	cmp	r0, #4
    c0f8:	d100      	bne.n	c0fc <m2m_wifi_cb+0x38>
    c0fa:	e0ea      	b.n	c2d2 <m2m_wifi_cb+0x20e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    c0fc:	2865      	cmp	r0, #101	; 0x65
    c0fe:	d100      	bne.n	c102 <m2m_wifi_cb+0x3e>
    c100:	e08d      	b.n	c21e <m2m_wifi_cb+0x15a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    c102:	2809      	cmp	r0, #9
    c104:	d100      	bne.n	c108 <m2m_wifi_cb+0x44>
    c106:	e0f6      	b.n	c2f6 <m2m_wifi_cb+0x232>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    c108:	282a      	cmp	r0, #42	; 0x2a
    c10a:	d100      	bne.n	c10e <m2m_wifi_cb+0x4a>
    c10c:	e105      	b.n	c31a <m2m_wifi_cb+0x256>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    c10e:	2820      	cmp	r0, #32
    c110:	d100      	bne.n	c114 <m2m_wifi_cb+0x50>
    c112:	e0c2      	b.n	c29a <m2m_wifi_cb+0x1d6>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    c114:	2292      	movs	r2, #146	; 0x92
    c116:	498a      	ldr	r1, [pc, #552]	; (c340 <m2m_wifi_cb+0x27c>)
    c118:	0052      	lsls	r2, r2, #1
    c11a:	4d8a      	ldr	r5, [pc, #552]	; (c344 <m2m_wifi_cb+0x280>)
    c11c:	488a      	ldr	r0, [pc, #552]	; (c348 <m2m_wifi_cb+0x284>)
    c11e:	47a8      	blx	r5
    c120:	0021      	movs	r1, r4
    c122:	488a      	ldr	r0, [pc, #552]	; (c34c <m2m_wifi_cb+0x288>)
    c124:	47a8      	blx	r5
    c126:	200d      	movs	r0, #13
    c128:	4b89      	ldr	r3, [pc, #548]	; (c350 <m2m_wifi_cb+0x28c>)
    c12a:	4798      	blx	r3
	}
}
    c12c:	b01d      	add	sp, #116	; 0x74
    c12e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    c130:	2300      	movs	r3, #0
    c132:	2214      	movs	r2, #20
    c134:	a903      	add	r1, sp, #12
    c136:	0028      	movs	r0, r5
    c138:	4c86      	ldr	r4, [pc, #536]	; (c354 <m2m_wifi_cb+0x290>)
    c13a:	47a0      	blx	r4
    c13c:	2800      	cmp	r0, #0
    c13e:	d1f5      	bne.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c140:	4b85      	ldr	r3, [pc, #532]	; (c358 <m2m_wifi_cb+0x294>)
    c142:	681b      	ldr	r3, [r3, #0]
    c144:	2b00      	cmp	r3, #0
    c146:	d0f1      	beq.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    c148:	a903      	add	r1, sp, #12
    c14a:	3032      	adds	r0, #50	; 0x32
    c14c:	4798      	blx	r3
    c14e:	e7ed      	b.n	c12c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    c150:	2300      	movs	r3, #0
    c152:	2204      	movs	r2, #4
    c154:	a903      	add	r1, sp, #12
    c156:	0028      	movs	r0, r5
    c158:	4c7e      	ldr	r4, [pc, #504]	; (c354 <m2m_wifi_cb+0x290>)
    c15a:	47a0      	blx	r4
    c15c:	2800      	cmp	r0, #0
    c15e:	d1e5      	bne.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c160:	4b7d      	ldr	r3, [pc, #500]	; (c358 <m2m_wifi_cb+0x294>)
    c162:	681b      	ldr	r3, [r3, #0]
    c164:	2b00      	cmp	r3, #0
    c166:	d0e1      	beq.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    c168:	a903      	add	r1, sp, #12
    c16a:	302c      	adds	r0, #44	; 0x2c
    c16c:	4798      	blx	r3
    c16e:	e7dd      	b.n	c12c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    c170:	2300      	movs	r3, #0
    c172:	2208      	movs	r2, #8
    c174:	a903      	add	r1, sp, #12
    c176:	0028      	movs	r0, r5
    c178:	4c76      	ldr	r4, [pc, #472]	; (c354 <m2m_wifi_cb+0x290>)
    c17a:	47a0      	blx	r4
    c17c:	2800      	cmp	r0, #0
    c17e:	d1d5      	bne.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c180:	4b75      	ldr	r3, [pc, #468]	; (c358 <m2m_wifi_cb+0x294>)
    c182:	681b      	ldr	r3, [r3, #0]
    c184:	2b00      	cmp	r3, #0
    c186:	d0d1      	beq.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    c188:	a903      	add	r1, sp, #12
    c18a:	301b      	adds	r0, #27
    c18c:	4798      	blx	r3
    c18e:	e7cd      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    c190:	2301      	movs	r3, #1
    c192:	2230      	movs	r2, #48	; 0x30
    c194:	a903      	add	r1, sp, #12
    c196:	0028      	movs	r0, r5
    c198:	4c6e      	ldr	r4, [pc, #440]	; (c354 <m2m_wifi_cb+0x290>)
    c19a:	47a0      	blx	r4
    c19c:	2800      	cmp	r0, #0
    c19e:	d1c5      	bne.n	c12c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c1a0:	4b6d      	ldr	r3, [pc, #436]	; (c358 <m2m_wifi_cb+0x294>)
    c1a2:	681b      	ldr	r3, [r3, #0]
    c1a4:	2b00      	cmp	r3, #0
    c1a6:	d0c1      	beq.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    c1a8:	a903      	add	r1, sp, #12
    c1aa:	3006      	adds	r0, #6
    c1ac:	4798      	blx	r3
    c1ae:	e7bd      	b.n	c12c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    c1b0:	2264      	movs	r2, #100	; 0x64
    c1b2:	2100      	movs	r1, #0
    c1b4:	a803      	add	r0, sp, #12
    c1b6:	4b69      	ldr	r3, [pc, #420]	; (c35c <m2m_wifi_cb+0x298>)
    c1b8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    c1ba:	2300      	movs	r3, #0
    c1bc:	2264      	movs	r2, #100	; 0x64
    c1be:	a903      	add	r1, sp, #12
    c1c0:	0028      	movs	r0, r5
    c1c2:	4c64      	ldr	r4, [pc, #400]	; (c354 <m2m_wifi_cb+0x290>)
    c1c4:	47a0      	blx	r4
    c1c6:	2800      	cmp	r0, #0
    c1c8:	d1b0      	bne.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c1ca:	4b63      	ldr	r3, [pc, #396]	; (c358 <m2m_wifi_cb+0x294>)
    c1cc:	681b      	ldr	r3, [r3, #0]
    c1ce:	2b00      	cmp	r3, #0
    c1d0:	d0ac      	beq.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    c1d2:	a903      	add	r1, sp, #12
    c1d4:	302f      	adds	r0, #47	; 0x2f
    c1d6:	4798      	blx	r3
    c1d8:	e7a8      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    c1da:	2300      	movs	r3, #0
    c1dc:	2204      	movs	r2, #4
    c1de:	a903      	add	r1, sp, #12
    c1e0:	0028      	movs	r0, r5
    c1e2:	4c5c      	ldr	r4, [pc, #368]	; (c354 <m2m_wifi_cb+0x290>)
    c1e4:	47a0      	blx	r4
    c1e6:	2800      	cmp	r0, #0
    c1e8:	d1a0      	bne.n	c12c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    c1ea:	4d56      	ldr	r5, [pc, #344]	; (c344 <m2m_wifi_cb+0x280>)
    c1ec:	485c      	ldr	r0, [pc, #368]	; (c360 <m2m_wifi_cb+0x29c>)
    c1ee:	47a8      	blx	r5
    c1f0:	20ff      	movs	r0, #255	; 0xff
    c1f2:	9c03      	ldr	r4, [sp, #12]
    c1f4:	0a23      	lsrs	r3, r4, #8
    c1f6:	0c22      	lsrs	r2, r4, #16
    c1f8:	4003      	ands	r3, r0
    c1fa:	4002      	ands	r2, r0
    c1fc:	4020      	ands	r0, r4
    c1fe:	0e21      	lsrs	r1, r4, #24
    c200:	9000      	str	r0, [sp, #0]
    c202:	4858      	ldr	r0, [pc, #352]	; (c364 <m2m_wifi_cb+0x2a0>)
    c204:	47a8      	blx	r5
    c206:	4b52      	ldr	r3, [pc, #328]	; (c350 <m2m_wifi_cb+0x28c>)
    c208:	200d      	movs	r0, #13
    c20a:	4798      	blx	r3
			if (gpfAppWifiCb)
    c20c:	4b52      	ldr	r3, [pc, #328]	; (c358 <m2m_wifi_cb+0x294>)
    c20e:	681b      	ldr	r3, [r3, #0]
    c210:	2b00      	cmp	r3, #0
    c212:	d100      	bne.n	c216 <m2m_wifi_cb+0x152>
    c214:	e78a      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    c216:	2100      	movs	r1, #0
    c218:	2034      	movs	r0, #52	; 0x34
    c21a:	4798      	blx	r3
    c21c:	e786      	b.n	c12c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    c21e:	2300      	movs	r3, #0
    c220:	2204      	movs	r2, #4
    c222:	a903      	add	r1, sp, #12
    c224:	0028      	movs	r0, r5
    c226:	4c4b      	ldr	r4, [pc, #300]	; (c354 <m2m_wifi_cb+0x290>)
    c228:	47a0      	blx	r4
    c22a:	2800      	cmp	r0, #0
    c22c:	d000      	beq.n	c230 <m2m_wifi_cb+0x16c>
    c22e:	e77d      	b.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c230:	4b49      	ldr	r3, [pc, #292]	; (c358 <m2m_wifi_cb+0x294>)
    c232:	681b      	ldr	r3, [r3, #0]
    c234:	2b00      	cmp	r3, #0
    c236:	d100      	bne.n	c23a <m2m_wifi_cb+0x176>
    c238:	e778      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    c23a:	a903      	add	r1, sp, #12
    c23c:	3065      	adds	r0, #101	; 0x65
    c23e:	4798      	blx	r3
    c240:	e774      	b.n	c12c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    c242:	2200      	movs	r2, #0
    c244:	4b48      	ldr	r3, [pc, #288]	; (c368 <m2m_wifi_cb+0x2a4>)
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    c246:	ac03      	add	r4, sp, #12
		gu8scanInProgress = 0;
    c248:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    c24a:	0028      	movs	r0, r5
    c24c:	2300      	movs	r3, #0
    c24e:	3204      	adds	r2, #4
    c250:	0021      	movs	r1, r4
    c252:	4d40      	ldr	r5, [pc, #256]	; (c354 <m2m_wifi_cb+0x290>)
    c254:	47a8      	blx	r5
    c256:	2800      	cmp	r0, #0
    c258:	d000      	beq.n	c25c <m2m_wifi_cb+0x198>
    c25a:	e767      	b.n	c12c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    c25c:	4b43      	ldr	r3, [pc, #268]	; (c36c <m2m_wifi_cb+0x2a8>)
    c25e:	7822      	ldrb	r2, [r4, #0]
    c260:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    c262:	4b3d      	ldr	r3, [pc, #244]	; (c358 <m2m_wifi_cb+0x294>)
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	2b00      	cmp	r3, #0
    c268:	d100      	bne.n	c26c <m2m_wifi_cb+0x1a8>
    c26a:	e75f      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    c26c:	0021      	movs	r1, r4
    c26e:	3011      	adds	r0, #17
    c270:	4798      	blx	r3
    c272:	e75b      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    c274:	ac03      	add	r4, sp, #12
    c276:	0028      	movs	r0, r5
    c278:	2300      	movs	r3, #0
    c27a:	222c      	movs	r2, #44	; 0x2c
    c27c:	0021      	movs	r1, r4
    c27e:	4d35      	ldr	r5, [pc, #212]	; (c354 <m2m_wifi_cb+0x290>)
    c280:	47a8      	blx	r5
    c282:	2800      	cmp	r0, #0
    c284:	d000      	beq.n	c288 <m2m_wifi_cb+0x1c4>
    c286:	e751      	b.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c288:	4b33      	ldr	r3, [pc, #204]	; (c358 <m2m_wifi_cb+0x294>)
    c28a:	681b      	ldr	r3, [r3, #0]
    c28c:	2b00      	cmp	r3, #0
    c28e:	d100      	bne.n	c292 <m2m_wifi_cb+0x1ce>
    c290:	e74c      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    c292:	0021      	movs	r1, r4
    c294:	3013      	adds	r0, #19
    c296:	4798      	blx	r3
    c298:	e748      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    c29a:	2300      	movs	r3, #0
    c29c:	2208      	movs	r2, #8
    c29e:	a903      	add	r1, sp, #12
    c2a0:	0028      	movs	r0, r5
    c2a2:	4c2c      	ldr	r4, [pc, #176]	; (c354 <m2m_wifi_cb+0x290>)
    c2a4:	47a0      	blx	r4
    c2a6:	2800      	cmp	r0, #0
    c2a8:	d000      	beq.n	c2ac <m2m_wifi_cb+0x1e8>
    c2aa:	e73f      	b.n	c12c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    c2ac:	466b      	mov	r3, sp
    c2ae:	0028      	movs	r0, r5
    c2b0:	8a1a      	ldrh	r2, [r3, #16]
    c2b2:	3008      	adds	r0, #8
    c2b4:	2301      	movs	r3, #1
    c2b6:	9903      	ldr	r1, [sp, #12]
    c2b8:	47a0      	blx	r4
    c2ba:	2800      	cmp	r0, #0
    c2bc:	d000      	beq.n	c2c0 <m2m_wifi_cb+0x1fc>
    c2be:	e735      	b.n	c12c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    c2c0:	4b25      	ldr	r3, [pc, #148]	; (c358 <m2m_wifi_cb+0x294>)
    c2c2:	681b      	ldr	r3, [r3, #0]
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d100      	bne.n	c2ca <m2m_wifi_cb+0x206>
    c2c8:	e730      	b.n	c12c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    c2ca:	a903      	add	r1, sp, #12
    c2cc:	3020      	adds	r0, #32
    c2ce:	4798      	blx	r3
    c2d0:	e72c      	b.n	c12c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    c2d2:	2300      	movs	r3, #0
    c2d4:	2204      	movs	r2, #4
    c2d6:	a903      	add	r1, sp, #12
    c2d8:	0028      	movs	r0, r5
    c2da:	4c1e      	ldr	r4, [pc, #120]	; (c354 <m2m_wifi_cb+0x290>)
    c2dc:	47a0      	blx	r4
    c2de:	2800      	cmp	r0, #0
    c2e0:	d000      	beq.n	c2e4 <m2m_wifi_cb+0x220>
    c2e2:	e723      	b.n	c12c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c2e4:	4b1c      	ldr	r3, [pc, #112]	; (c358 <m2m_wifi_cb+0x294>)
    c2e6:	681b      	ldr	r3, [r3, #0]
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d100      	bne.n	c2ee <m2m_wifi_cb+0x22a>
    c2ec:	e71e      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    c2ee:	a903      	add	r1, sp, #12
    c2f0:	3004      	adds	r0, #4
    c2f2:	4798      	blx	r3
    c2f4:	e71a      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    c2f6:	2301      	movs	r3, #1
    c2f8:	2264      	movs	r2, #100	; 0x64
    c2fa:	a903      	add	r1, sp, #12
    c2fc:	0028      	movs	r0, r5
    c2fe:	4c15      	ldr	r4, [pc, #84]	; (c354 <m2m_wifi_cb+0x290>)
    c300:	47a0      	blx	r4
    c302:	2800      	cmp	r0, #0
    c304:	d000      	beq.n	c308 <m2m_wifi_cb+0x244>
    c306:	e711      	b.n	c12c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c308:	4b13      	ldr	r3, [pc, #76]	; (c358 <m2m_wifi_cb+0x294>)
    c30a:	681b      	ldr	r3, [r3, #0]
    c30c:	2b00      	cmp	r3, #0
    c30e:	d100      	bne.n	c312 <m2m_wifi_cb+0x24e>
    c310:	e70c      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    c312:	a903      	add	r1, sp, #12
    c314:	3009      	adds	r0, #9
    c316:	4798      	blx	r3
    c318:	e708      	b.n	c12c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    c31a:	2301      	movs	r3, #1
    c31c:	2204      	movs	r2, #4
    c31e:	a903      	add	r1, sp, #12
    c320:	0028      	movs	r0, r5
    c322:	4c0c      	ldr	r4, [pc, #48]	; (c354 <m2m_wifi_cb+0x290>)
    c324:	47a0      	blx	r4
    c326:	2800      	cmp	r0, #0
    c328:	d000      	beq.n	c32c <m2m_wifi_cb+0x268>
    c32a:	e6ff      	b.n	c12c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c32c:	4b0a      	ldr	r3, [pc, #40]	; (c358 <m2m_wifi_cb+0x294>)
    c32e:	681b      	ldr	r3, [r3, #0]
    c330:	2b00      	cmp	r3, #0
    c332:	d100      	bne.n	c336 <m2m_wifi_cb+0x272>
    c334:	e6fa      	b.n	c12c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    c336:	a903      	add	r1, sp, #12
    c338:	302a      	adds	r0, #42	; 0x2a
    c33a:	4798      	blx	r3
    c33c:	e6f6      	b.n	c12c <m2m_wifi_cb+0x68>
    c33e:	46c0      	nop			; (mov r8, r8)
    c340:	00016018 	.word	0x00016018
    c344:	00013de9 	.word	0x00013de9
    c348:	00015cb0 	.word	0x00015cb0
    c34c:	00016068 	.word	0x00016068
    c350:	00013e1d 	.word	0x00013e1d
    c354:	0000bf41 	.word	0x0000bf41
    c358:	200008f4 	.word	0x200008f4
    c35c:	0000b8a5 	.word	0x0000b8a5
    c360:	00015fe0 	.word	0x00015fe0
    c364:	00016048 	.word	0x00016048
    c368:	200008f9 	.word	0x200008f9
    c36c:	200008f8 	.word	0x200008f8

0000c370 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    c370:	b5f0      	push	{r4, r5, r6, r7, lr}
    c372:	46c6      	mov	lr, r8
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    c374:	230f      	movs	r3, #15
    c376:	2201      	movs	r2, #1
{
    c378:	b500      	push	{lr}
    c37a:	b08e      	sub	sp, #56	; 0x38
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    c37c:	446b      	add	r3, sp
    c37e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    c380:	2800      	cmp	r0, #0
    c382:	d062      	beq.n	c44a <m2m_wifi_init+0xda>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    c384:	6801      	ldr	r1, [r0, #0]
    c386:	4a32      	ldr	r2, [pc, #200]	; (c450 <m2m_wifi_init+0xe0>)
#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    c388:	0018      	movs	r0, r3
	gpfAppWifiCb = param->pfAppWifiCb;
    c38a:	6011      	str	r1, [r2, #0]
	gu8scanInProgress = 0;
    c38c:	2100      	movs	r1, #0
    c38e:	4a31      	ldr	r2, [pc, #196]	; (c454 <m2m_wifi_init+0xe4>)
	ret = nm_drv_init(&u8WifiMode);
    c390:	4b31      	ldr	r3, [pc, #196]	; (c458 <m2m_wifi_init+0xe8>)
	gu8scanInProgress = 0;
    c392:	7011      	strb	r1, [r2, #0]
	ret = nm_drv_init(&u8WifiMode);
    c394:	4798      	blx	r3
    c396:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    c398:	d004      	beq.n	c3a4 <m2m_wifi_init+0x34>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    c39a:	0020      	movs	r0, r4
    c39c:	b00e      	add	sp, #56	; 0x38
    c39e:	bc04      	pop	{r2}
    c3a0:	4690      	mov	r8, r2
    c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    c3a4:	2000      	movs	r0, #0
    c3a6:	4b2d      	ldr	r3, [pc, #180]	; (c45c <m2m_wifi_init+0xec>)
    c3a8:	4798      	blx	r3
    c3aa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    c3ac:	d003      	beq.n	c3b6 <m2m_wifi_init+0x46>
	nm_drv_deinit(NULL);
    c3ae:	4b2c      	ldr	r3, [pc, #176]	; (c460 <m2m_wifi_init+0xf0>)
    c3b0:	2000      	movs	r0, #0
    c3b2:	4798      	blx	r3
    c3b4:	e7f1      	b.n	c39a <m2m_wifi_init+0x2a>
	ret = nm_get_firmware_full_info(&strtmp);
    c3b6:	ae04      	add	r6, sp, #16
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    c3b8:	492a      	ldr	r1, [pc, #168]	; (c464 <m2m_wifi_init+0xf4>)
    c3ba:	4b2b      	ldr	r3, [pc, #172]	; (c468 <m2m_wifi_init+0xf8>)
    c3bc:	2001      	movs	r0, #1
    c3be:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    c3c0:	4b2a      	ldr	r3, [pc, #168]	; (c46c <m2m_wifi_init+0xfc>)
    c3c2:	0030      	movs	r0, r6
    c3c4:	4798      	blx	r3
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    c3c6:	4b2a      	ldr	r3, [pc, #168]	; (c470 <m2m_wifi_init+0x100>)
    c3c8:	4d2a      	ldr	r5, [pc, #168]	; (c474 <m2m_wifi_init+0x104>)
    c3ca:	4698      	mov	r8, r3
	ret = nm_get_firmware_full_info(&strtmp);
    c3cc:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    c3ce:	0018      	movs	r0, r3
    c3d0:	47a8      	blx	r5
    c3d2:	8c30      	ldrh	r0, [r6, #32]
    c3d4:	79b3      	ldrb	r3, [r6, #6]
    c3d6:	7972      	ldrb	r2, [r6, #5]
    c3d8:	7931      	ldrb	r1, [r6, #4]
    c3da:	9000      	str	r0, [sp, #0]
    c3dc:	4826      	ldr	r0, [pc, #152]	; (c478 <m2m_wifi_init+0x108>)
    c3de:	47a8      	blx	r5
    c3e0:	4f26      	ldr	r7, [pc, #152]	; (c47c <m2m_wifi_init+0x10c>)
    c3e2:	200d      	movs	r0, #13
    c3e4:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    c3e6:	4640      	mov	r0, r8
    c3e8:	47a8      	blx	r5
    c3ea:	2226      	movs	r2, #38	; 0x26
    c3ec:	211a      	movs	r1, #26
    c3ee:	446a      	add	r2, sp
    c3f0:	4469      	add	r1, sp
    c3f2:	4823      	ldr	r0, [pc, #140]	; (c480 <m2m_wifi_init+0x110>)
    c3f4:	47a8      	blx	r5
    c3f6:	200d      	movs	r0, #13
    c3f8:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    c3fa:	4640      	mov	r0, r8
    c3fc:	47a8      	blx	r5
    c3fe:	7a73      	ldrb	r3, [r6, #9]
    c400:	7a32      	ldrb	r2, [r6, #8]
    c402:	79f1      	ldrb	r1, [r6, #7]
    c404:	481f      	ldr	r0, [pc, #124]	; (c484 <m2m_wifi_init+0x114>)
    c406:	47a8      	blx	r5
    c408:	200d      	movs	r0, #13
    c40a:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    c40c:	4640      	mov	r0, r8
    c40e:	47a8      	blx	r5
    c410:	2302      	movs	r3, #2
    c412:	2205      	movs	r2, #5
    c414:	2113      	movs	r1, #19
    c416:	481c      	ldr	r0, [pc, #112]	; (c488 <m2m_wifi_init+0x118>)
    c418:	47a8      	blx	r5
    c41a:	200d      	movs	r0, #13
    c41c:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    c41e:	4640      	mov	r0, r8
    c420:	47a8      	blx	r5
    c422:	4a1a      	ldr	r2, [pc, #104]	; (c48c <m2m_wifi_init+0x11c>)
    c424:	491a      	ldr	r1, [pc, #104]	; (c490 <m2m_wifi_init+0x120>)
    c426:	481b      	ldr	r0, [pc, #108]	; (c494 <m2m_wifi_init+0x124>)
    c428:	47a8      	blx	r5
    c42a:	200d      	movs	r0, #13
    c42c:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    c42e:	0023      	movs	r3, r4
    c430:	330d      	adds	r3, #13
    c432:	d1b2      	bne.n	c39a <m2m_wifi_init+0x2a>
		M2M_ERR("Mismatch Firmawre Version\n");
    c434:	22e8      	movs	r2, #232	; 0xe8
    c436:	4918      	ldr	r1, [pc, #96]	; (c498 <m2m_wifi_init+0x128>)
    c438:	32ff      	adds	r2, #255	; 0xff
    c43a:	4818      	ldr	r0, [pc, #96]	; (c49c <m2m_wifi_init+0x12c>)
    c43c:	47a8      	blx	r5
    c43e:	4b18      	ldr	r3, [pc, #96]	; (c4a0 <m2m_wifi_init+0x130>)
    c440:	4818      	ldr	r0, [pc, #96]	; (c4a4 <m2m_wifi_init+0x134>)
    c442:	4798      	blx	r3
    c444:	200d      	movs	r0, #13
    c446:	47b8      	blx	r7
    c448:	e7a7      	b.n	c39a <m2m_wifi_init+0x2a>
		ret = M2M_ERR_FAIL;
    c44a:	240c      	movs	r4, #12
    c44c:	4264      	negs	r4, r4
    c44e:	e7a4      	b.n	c39a <m2m_wifi_init+0x2a>
    c450:	200008f4 	.word	0x200008f4
    c454:	200008f9 	.word	0x200008f9
    c458:	0000cd49 	.word	0x0000cd49
    c45c:	0000c08d 	.word	0x0000c08d
    c460:	0000ce25 	.word	0x0000ce25
    c464:	0000c0c5 	.word	0x0000c0c5
    c468:	0000c009 	.word	0x0000c009
    c46c:	0000cc81 	.word	0x0000cc81
    c470:	00015fe0 	.word	0x00015fe0
    c474:	00013de9 	.word	0x00013de9
    c478:	00016124 	.word	0x00016124
    c47c:	00013e1d 	.word	0x00013e1d
    c480:	0001614c 	.word	0x0001614c
    c484:	00016168 	.word	0x00016168
    c488:	0001618c 	.word	0x0001618c
    c48c:	000161a4 	.word	0x000161a4
    c490:	000161b0 	.word	0x000161b0
    c494:	000161bc 	.word	0x000161bc
    c498:	00016024 	.word	0x00016024
    c49c:	00015cb0 	.word	0x00015cb0
    c4a0:	00013f05 	.word	0x00013f05
    c4a4:	000161d4 	.word	0x000161d4

0000c4a8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    c4a8:	b510      	push	{r4, lr}
	return hif_handle_isr();
    c4aa:	4b01      	ldr	r3, [pc, #4]	; (c4b0 <m2m_wifi_handle_events+0x8>)
    c4ac:	4798      	blx	r3
}
    c4ae:	bd10      	pop	{r4, pc}
    c4b0:	0000bbd5 	.word	0x0000bbd5

0000c4b4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b6:	4657      	mov	r7, sl
    c4b8:	464e      	mov	r6, r9
    c4ba:	4645      	mov	r5, r8
    c4bc:	46de      	mov	lr, fp
    c4be:	b5e0      	push	{r5, r6, r7, lr}
    c4c0:	b0a1      	sub	sp, #132	; 0x84
    c4c2:	4699      	mov	r9, r3
    c4c4:	ab2a      	add	r3, sp, #168	; 0xa8
    c4c6:	881b      	ldrh	r3, [r3, #0]
    c4c8:	4682      	mov	sl, r0
    c4ca:	4698      	mov	r8, r3
    c4cc:	ab2b      	add	r3, sp, #172	; 0xac
    c4ce:	000c      	movs	r4, r1
    c4d0:	0016      	movs	r6, r2
    c4d2:	781f      	ldrb	r7, [r3, #0]
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    c4d4:	2a01      	cmp	r2, #1
    c4d6:	d005      	beq.n	c4e4 <m2m_wifi_connect_sc+0x30>
	{
		if(pvAuthInfo == NULL)
    c4d8:	464b      	mov	r3, r9
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d100      	bne.n	c4e0 <m2m_wifi_connect_sc+0x2c>
    c4de:	e0be      	b.n	c65e <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c4e0:	2a02      	cmp	r2, #2
    c4e2:	d069      	beq.n	c5b8 <m2m_wifi_connect_sc+0x104>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    c4e4:	1e63      	subs	r3, r4, #1
    c4e6:	2b1f      	cmp	r3, #31
    c4e8:	d900      	bls.n	c4ec <m2m_wifi_connect_sc+0x38>
    c4ea:	e0a1      	b.n	c630 <m2m_wifi_connect_sc+0x17c>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    c4ec:	4643      	mov	r3, r8
    c4ee:	3b01      	subs	r3, #1
    c4f0:	2b0d      	cmp	r3, #13
    c4f2:	d903      	bls.n	c4fc <m2m_wifi_connect_sc+0x48>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    c4f4:	4643      	mov	r3, r8
    c4f6:	2bff      	cmp	r3, #255	; 0xff
    c4f8:	d000      	beq.n	c4fc <m2m_wifi_connect_sc+0x48>
    c4fa:	e08a      	b.n	c612 <m2m_wifi_connect_sc+0x15e>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    c4fc:	205a      	movs	r0, #90	; 0x5a
    c4fe:	4b5b      	ldr	r3, [pc, #364]	; (c66c <m2m_wifi_connect_sc+0x1b8>)
    c500:	0022      	movs	r2, r4
    c502:	4651      	mov	r1, sl
    c504:	4468      	add	r0, sp
    c506:	469a      	mov	sl, r3
    c508:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    c50a:	2300      	movs	r3, #0
	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    c50c:	ad05      	add	r5, sp, #20
	strConnect.au8SSID[u8SsidLen]	= 0;
    c50e:	192c      	adds	r4, r5, r4
    c510:	3446      	adds	r4, #70	; 0x46
    c512:	469b      	mov	fp, r3
    c514:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    c516:	4642      	mov	r2, r8
    c518:	2344      	movs	r3, #68	; 0x44
    c51a:	52ea      	strh	r2, [r5, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    c51c:	1e7b      	subs	r3, r7, #1
    c51e:	419f      	sbcs	r7, r3
    c520:	2367      	movs	r3, #103	; 0x67
    c522:	54ef      	strb	r7, [r5, r3]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    c524:	3b26      	subs	r3, #38	; 0x26
    c526:	54ee      	strb	r6, [r5, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    c528:	2e03      	cmp	r6, #3
    c52a:	d017      	beq.n	c55c <m2m_wifi_connect_sc+0xa8>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    c52c:	2e02      	cmp	r6, #2
    c52e:	d064      	beq.n	c5fa <m2m_wifi_connect_sc+0x146>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    c530:	2e04      	cmp	r6, #4
    c532:	d03c      	beq.n	c5ae <m2m_wifi_connect_sc+0xfa>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    c534:	2e01      	cmp	r6, #1
    c536:	d000      	beq.n	c53a <m2m_wifi_connect_sc+0x86>
    c538:	e073      	b.n	c622 <m2m_wifi_connect_sc+0x16e>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    c53a:	2300      	movs	r3, #0
    c53c:	002a      	movs	r2, r5
    c53e:	9302      	str	r3, [sp, #8]
    c540:	9301      	str	r3, [sp, #4]
    c542:	9300      	str	r3, [sp, #0]
    c544:	2128      	movs	r1, #40	; 0x28
    c546:	336c      	adds	r3, #108	; 0x6c
    c548:	2001      	movs	r0, #1
    c54a:	4c49      	ldr	r4, [pc, #292]	; (c670 <m2m_wifi_connect_sc+0x1bc>)
    c54c:	47a0      	blx	r4

ERR1:
	return ret;
}
    c54e:	b021      	add	sp, #132	; 0x84
    c550:	bc3c      	pop	{r2, r3, r4, r5}
    c552:	4690      	mov	r8, r2
    c554:	4699      	mov	r9, r3
    c556:	46a2      	mov	sl, r4
    c558:	46ab      	mov	fp, r5
    c55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    c55c:	464b      	mov	r3, r9
    c55e:	781b      	ldrb	r3, [r3, #0]
    c560:	3b01      	subs	r3, #1
    c562:	b2db      	uxtb	r3, r3
    c564:	702b      	strb	r3, [r5, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    c566:	2b03      	cmp	r3, #3
    c568:	d869      	bhi.n	c63e <m2m_wifi_connect_sc+0x18a>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    c56a:	464b      	mov	r3, r9
    c56c:	785a      	ldrb	r2, [r3, #1]
    c56e:	1e53      	subs	r3, r2, #1
    c570:	706b      	strb	r3, [r5, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    c572:	0011      	movs	r1, r2
    c574:	2310      	movs	r3, #16
    c576:	4399      	bics	r1, r3
    c578:	290b      	cmp	r1, #11
    c57a:	d00d      	beq.n	c598 <m2m_wifi_connect_sc+0xe4>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    c57c:	493d      	ldr	r1, [pc, #244]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c57e:	4a3e      	ldr	r2, [pc, #248]	; (c678 <m2m_wifi_connect_sc+0x1c4>)
    c580:	483e      	ldr	r0, [pc, #248]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c582:	4c3f      	ldr	r4, [pc, #252]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c584:	47a0      	blx	r4
    c586:	7869      	ldrb	r1, [r5, #1]
    c588:	483e      	ldr	r0, [pc, #248]	; (c684 <m2m_wifi_connect_sc+0x1d0>)
    c58a:	47a0      	blx	r4
					M2M_ERR("Invalid Key\n");
    c58c:	200d      	movs	r0, #13
    c58e:	4b3e      	ldr	r3, [pc, #248]	; (c688 <m2m_wifi_connect_sc+0x1d4>)
    c590:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    c592:	200c      	movs	r0, #12
    c594:	4240      	negs	r0, r0
					goto ERR1;
    c596:	e7da      	b.n	c54e <m2m_wifi_connect_sc+0x9a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    c598:	464b      	mov	r3, r9
    c59a:	2016      	movs	r0, #22
    c59c:	1c99      	adds	r1, r3, #2
    c59e:	4468      	add	r0, sp
    c5a0:	47d0      	blx	sl
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    c5a2:	464b      	mov	r3, r9
    c5a4:	465a      	mov	r2, fp
    c5a6:	785b      	ldrb	r3, [r3, #1]
    c5a8:	18eb      	adds	r3, r5, r3
    c5aa:	709a      	strb	r2, [r3, #2]
    c5ac:	e7c5      	b.n	c53a <m2m_wifi_connect_sc+0x86>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    c5ae:	223e      	movs	r2, #62	; 0x3e
    c5b0:	4649      	mov	r1, r9
    c5b2:	0028      	movs	r0, r5
    c5b4:	47d0      	blx	sl
    c5b6:	e7c0      	b.n	c53a <m2m_wifi_connect_sc+0x86>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c5b8:	4648      	mov	r0, r9
    c5ba:	4b34      	ldr	r3, [pc, #208]	; (c68c <m2m_wifi_connect_sc+0x1d8>)
    c5bc:	4798      	blx	r3
    c5be:	2840      	cmp	r0, #64	; 0x40
    c5c0:	d190      	bne.n	c4e4 <m2m_wifi_connect_sc+0x30>
    c5c2:	4648      	mov	r0, r9
    c5c4:	464a      	mov	r2, r9
    c5c6:	3040      	adds	r0, #64	; 0x40
    c5c8:	e009      	b.n	c5de <m2m_wifi_connect_sc+0x12a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c5ca:	390a      	subs	r1, #10
    c5cc:	2906      	cmp	r1, #6
    c5ce:	d90b      	bls.n	c5e8 <m2m_wifi_connect_sc+0x134>
    c5d0:	3b47      	subs	r3, #71	; 0x47
    c5d2:	2b19      	cmp	r3, #25
    c5d4:	d908      	bls.n	c5e8 <m2m_wifi_connect_sc+0x134>
    c5d6:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    c5d8:	4282      	cmp	r2, r0
    c5da:	d100      	bne.n	c5de <m2m_wifi_connect_sc+0x12a>
    c5dc:	e782      	b.n	c4e4 <m2m_wifi_connect_sc+0x30>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c5de:	7813      	ldrb	r3, [r2, #0]
    c5e0:	0019      	movs	r1, r3
    c5e2:	3930      	subs	r1, #48	; 0x30
    c5e4:	2936      	cmp	r1, #54	; 0x36
    c5e6:	d9f0      	bls.n	c5ca <m2m_wifi_connect_sc+0x116>
					M2M_ERR("Invalid Key\n");
    c5e8:	4a29      	ldr	r2, [pc, #164]	; (c690 <m2m_wifi_connect_sc+0x1dc>)
    c5ea:	4922      	ldr	r1, [pc, #136]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c5ec:	4823      	ldr	r0, [pc, #140]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c5ee:	4b24      	ldr	r3, [pc, #144]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c5f0:	4798      	blx	r3
    c5f2:	4828      	ldr	r0, [pc, #160]	; (c694 <m2m_wifi_connect_sc+0x1e0>)
    c5f4:	4b28      	ldr	r3, [pc, #160]	; (c698 <m2m_wifi_connect_sc+0x1e4>)
    c5f6:	4798      	blx	r3
    c5f8:	e7c8      	b.n	c58c <m2m_wifi_connect_sc+0xd8>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    c5fa:	4b24      	ldr	r3, [pc, #144]	; (c68c <m2m_wifi_connect_sc+0x1d8>)
    c5fc:	4648      	mov	r0, r9
    c5fe:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    c600:	1e43      	subs	r3, r0, #1
    c602:	b29b      	uxth	r3, r3
    c604:	2b3f      	cmp	r3, #63	; 0x3f
    c606:	d823      	bhi.n	c650 <m2m_wifi_connect_sc+0x19c>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    c608:	1c42      	adds	r2, r0, #1
    c60a:	4649      	mov	r1, r9
    c60c:	0028      	movs	r0, r5
    c60e:	47d0      	blx	sl
    c610:	e793      	b.n	c53a <m2m_wifi_connect_sc+0x86>
			M2M_ERR("CH INVALID\n");
    c612:	228d      	movs	r2, #141	; 0x8d
    c614:	4917      	ldr	r1, [pc, #92]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c616:	0092      	lsls	r2, r2, #2
    c618:	4818      	ldr	r0, [pc, #96]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c61a:	4b19      	ldr	r3, [pc, #100]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c61c:	4798      	blx	r3
    c61e:	481f      	ldr	r0, [pc, #124]	; (c69c <m2m_wifi_connect_sc+0x1e8>)
    c620:	e7e8      	b.n	c5f4 <m2m_wifi_connect_sc+0x140>
		M2M_ERR("undefined sec type\n");
    c622:	4a1f      	ldr	r2, [pc, #124]	; (c6a0 <m2m_wifi_connect_sc+0x1ec>)
    c624:	4913      	ldr	r1, [pc, #76]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c626:	4815      	ldr	r0, [pc, #84]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c628:	4b15      	ldr	r3, [pc, #84]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c62a:	4798      	blx	r3
    c62c:	481d      	ldr	r0, [pc, #116]	; (c6a4 <m2m_wifi_connect_sc+0x1f0>)
    c62e:	e7e1      	b.n	c5f4 <m2m_wifi_connect_sc+0x140>
		M2M_ERR("SSID LEN INVALID\n");
    c630:	4a1d      	ldr	r2, [pc, #116]	; (c6a8 <m2m_wifi_connect_sc+0x1f4>)
    c632:	4910      	ldr	r1, [pc, #64]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c634:	4811      	ldr	r0, [pc, #68]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c636:	4b12      	ldr	r3, [pc, #72]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c638:	4798      	blx	r3
    c63a:	481c      	ldr	r0, [pc, #112]	; (c6ac <m2m_wifi_connect_sc+0x1f8>)
    c63c:	e7da      	b.n	c5f4 <m2m_wifi_connect_sc+0x140>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    c63e:	4a1c      	ldr	r2, [pc, #112]	; (c6b0 <m2m_wifi_connect_sc+0x1fc>)
    c640:	490c      	ldr	r1, [pc, #48]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c642:	4c0f      	ldr	r4, [pc, #60]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c644:	480d      	ldr	r0, [pc, #52]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c646:	47a0      	blx	r4
    c648:	7829      	ldrb	r1, [r5, #0]
    c64a:	481a      	ldr	r0, [pc, #104]	; (c6b4 <m2m_wifi_connect_sc+0x200>)
    c64c:	47a0      	blx	r4
    c64e:	e79d      	b.n	c58c <m2m_wifi_connect_sc+0xd8>
			M2M_ERR("Incorrect PSK key length\n");
    c650:	4a19      	ldr	r2, [pc, #100]	; (c6b8 <m2m_wifi_connect_sc+0x204>)
    c652:	4908      	ldr	r1, [pc, #32]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c654:	4809      	ldr	r0, [pc, #36]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c656:	4b0a      	ldr	r3, [pc, #40]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c658:	4798      	blx	r3
    c65a:	4818      	ldr	r0, [pc, #96]	; (c6bc <m2m_wifi_connect_sc+0x208>)
    c65c:	e7ca      	b.n	c5f4 <m2m_wifi_connect_sc+0x140>
			M2M_ERR("Key is not valid\n");
    c65e:	4a18      	ldr	r2, [pc, #96]	; (c6c0 <m2m_wifi_connect_sc+0x20c>)
    c660:	4904      	ldr	r1, [pc, #16]	; (c674 <m2m_wifi_connect_sc+0x1c0>)
    c662:	4806      	ldr	r0, [pc, #24]	; (c67c <m2m_wifi_connect_sc+0x1c8>)
    c664:	4b06      	ldr	r3, [pc, #24]	; (c680 <m2m_wifi_connect_sc+0x1cc>)
    c666:	4798      	blx	r3
    c668:	4816      	ldr	r0, [pc, #88]	; (c6c4 <m2m_wifi_connect_sc+0x210>)
    c66a:	e7c3      	b.n	c5f4 <m2m_wifi_connect_sc+0x140>
    c66c:	0000b88d 	.word	0x0000b88d
    c670:	0000b985 	.word	0x0000b985
    c674:	00016034 	.word	0x00016034
    c678:	00000252 	.word	0x00000252
    c67c:	00015cb0 	.word	0x00015cb0
    c680:	00013de9 	.word	0x00013de9
    c684:	000160d8 	.word	0x000160d8
    c688:	00013e1d 	.word	0x00013e1d
    c68c:	0000b8b5 	.word	0x0000b8b5
    c690:	00000221 	.word	0x00000221
    c694:	00016090 	.word	0x00016090
    c698:	00013f05 	.word	0x00013f05
    c69c:	000160b0 	.word	0x000160b0
    c6a0:	00000271 	.word	0x00000271
    c6a4:	00016110 	.word	0x00016110
    c6a8:	0000022b 	.word	0x0000022b
    c6ac:	0001609c 	.word	0x0001609c
    c6b0:	0000024b 	.word	0x0000024b
    c6b4:	000160bc 	.word	0x000160bc
    c6b8:	00000261 	.word	0x00000261
    c6bc:	000160f4 	.word	0x000160f4
    c6c0:	00000215 	.word	0x00000215
    c6c4:	0001607c 	.word	0x0001607c

0000c6c8 <m2m_wifi_connect>:
{
    c6c8:	b530      	push	{r4, r5, lr}
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c6ca:	2500      	movs	r5, #0
{
    c6cc:	b083      	sub	sp, #12
    c6ce:	ac06      	add	r4, sp, #24
    c6d0:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c6d2:	9501      	str	r5, [sp, #4]
    c6d4:	9400      	str	r4, [sp, #0]
    c6d6:	4c02      	ldr	r4, [pc, #8]	; (c6e0 <m2m_wifi_connect+0x18>)
    c6d8:	47a0      	blx	r4
}
    c6da:	b003      	add	sp, #12
    c6dc:	bd30      	pop	{r4, r5, pc}
    c6de:	46c0      	nop			; (mov r8, r8)
    c6e0:	0000c4b5 	.word	0x0000c4b5

0000c6e4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    c6e4:	2000      	movs	r0, #0
    c6e6:	4770      	bx	lr

0000c6e8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    c6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    c6ea:	2480      	movs	r4, #128	; 0x80
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
		if(val32 != 0) {		
			uint32 reg = 0;
    c6ec:	2500      	movs	r5, #0
	val32 |= rHAVE_RESERVED1_BIT;
    c6ee:	0064      	lsls	r4, r4, #1
    c6f0:	4f09      	ldr	r7, [pc, #36]	; (c718 <chip_apply_conf+0x30>)
    c6f2:	4e0a      	ldr	r6, [pc, #40]	; (c71c <chip_apply_conf+0x34>)
{
    c6f4:	b083      	sub	sp, #12
	val32 |= rHAVE_RESERVED1_BIT;
    c6f6:	4304      	orrs	r4, r0
		nm_write_reg(rNMI_GP_REG_1, val32);
    c6f8:	20a5      	movs	r0, #165	; 0xa5
    c6fa:	0021      	movs	r1, r4
    c6fc:	0140      	lsls	r0, r0, #5
    c6fe:	47b8      	blx	r7
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c700:	20a5      	movs	r0, #165	; 0xa5
    c702:	a901      	add	r1, sp, #4
    c704:	0140      	lsls	r0, r0, #5
			uint32 reg = 0;
    c706:	9501      	str	r5, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c708:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    c70a:	2800      	cmp	r0, #0
    c70c:	d1f4      	bne.n	c6f8 <chip_apply_conf+0x10>
				if(reg == val32)
    c70e:	9b01      	ldr	r3, [sp, #4]
    c710:	429c      	cmp	r4, r3
    c712:	d1f1      	bne.n	c6f8 <chip_apply_conf+0x10>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    c714:	b003      	add	sp, #12
    c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c718:	0000cbad 	.word	0x0000cbad
    c71c:	0000cba1 	.word	0x0000cba1

0000c720 <enable_interrupts>:
	}
}

sint8 enable_interrupts(void)
{
	uint32 reg = 0;
    c720:	2300      	movs	r3, #0
{
    c722:	b530      	push	{r4, r5, lr}
    c724:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c726:	a901      	add	r1, sp, #4
    c728:	4810      	ldr	r0, [pc, #64]	; (c76c <enable_interrupts+0x4c>)
    c72a:	4c11      	ldr	r4, [pc, #68]	; (c770 <enable_interrupts+0x50>)
	uint32 reg = 0;
    c72c:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c72e:	47a0      	blx	r4
	if (M2M_SUCCESS != ret) goto ERR1;
    c730:	2800      	cmp	r0, #0
    c732:	d001      	beq.n	c738 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    c734:	b003      	add	sp, #12
    c736:	bd30      	pop	{r4, r5, pc}
	reg |= ((uint32) 1 << 8);
    c738:	2180      	movs	r1, #128	; 0x80
    c73a:	9b01      	ldr	r3, [sp, #4]
    c73c:	0049      	lsls	r1, r1, #1
    c73e:	4319      	orrs	r1, r3
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c740:	480a      	ldr	r0, [pc, #40]	; (c76c <enable_interrupts+0x4c>)
    c742:	4d0c      	ldr	r5, [pc, #48]	; (c774 <enable_interrupts+0x54>)
	reg |= ((uint32) 1 << 8);
    c744:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c746:	47a8      	blx	r5
	if (M2M_SUCCESS != ret) goto ERR1;
    c748:	2800      	cmp	r0, #0
    c74a:	d1f3      	bne.n	c734 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    c74c:	20d0      	movs	r0, #208	; 0xd0
    c74e:	a901      	add	r1, sp, #4
    c750:	0140      	lsls	r0, r0, #5
    c752:	47a0      	blx	r4
	if (M2M_SUCCESS != ret) goto ERR1;
    c754:	2800      	cmp	r0, #0
    c756:	d1ed      	bne.n	c734 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    c758:	2180      	movs	r1, #128	; 0x80
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c75a:	20d0      	movs	r0, #208	; 0xd0
	reg |= ((uint32) 1 << 16);
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	0249      	lsls	r1, r1, #9
    c760:	4319      	orrs	r1, r3
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c762:	0140      	lsls	r0, r0, #5
	reg |= ((uint32) 1 << 16);
    c764:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c766:	47a8      	blx	r5
    c768:	e7e4      	b.n	c734 <enable_interrupts+0x14>
    c76a:	46c0      	nop			; (mov r8, r8)
    c76c:	00001408 	.word	0x00001408
    c770:	0000cba1 	.word	0x0000cba1
    c774:	0000cbad 	.word	0x0000cbad

0000c778 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    c778:	b570      	push	{r4, r5, r6, lr}
	static uint32 chipid = 0;

	if (chipid == 0) {
    c77a:	4d26      	ldr	r5, [pc, #152]	; (c814 <nmi_get_chipid+0x9c>)
{
    c77c:	b082      	sub	sp, #8
	if (chipid == 0) {
    c77e:	682c      	ldr	r4, [r5, #0]
    c780:	2c00      	cmp	r4, #0
    c782:	d002      	beq.n	c78a <nmi_get_chipid+0x12>
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
}
    c784:	0020      	movs	r0, r4
    c786:	b002      	add	sp, #8
    c788:	bd70      	pop	{r4, r5, r6, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    c78a:	2080      	movs	r0, #128	; 0x80
    c78c:	0029      	movs	r1, r5
    c78e:	0140      	lsls	r0, r0, #5
    c790:	4e21      	ldr	r6, [pc, #132]	; (c818 <nmi_get_chipid+0xa0>)
    c792:	47b0      	blx	r6
    c794:	2800      	cmp	r0, #0
    c796:	d002      	beq.n	c79e <nmi_get_chipid+0x26>
			chipid = 0;
    c798:	2300      	movs	r3, #0
    c79a:	602b      	str	r3, [r5, #0]
    c79c:	e7f2      	b.n	c784 <nmi_get_chipid+0xc>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    c79e:	a901      	add	r1, sp, #4
    c7a0:	481e      	ldr	r0, [pc, #120]	; (c81c <nmi_get_chipid+0xa4>)
    c7a2:	47b0      	blx	r6
    c7a4:	2800      	cmp	r0, #0
    c7a6:	d1f7      	bne.n	c798 <nmi_get_chipid+0x20>
		if (chipid == 0x1002a0)  {
    c7a8:	682b      	ldr	r3, [r5, #0]
    c7aa:	4a1d      	ldr	r2, [pc, #116]	; (c820 <nmi_get_chipid+0xa8>)
    c7ac:	4293      	cmp	r3, r2
    c7ae:	d00c      	beq.n	c7ca <nmi_get_chipid+0x52>
		} else if(chipid == 0x1002b0) {
    c7b0:	4a1c      	ldr	r2, [pc, #112]	; (c824 <nmi_get_chipid+0xac>)
    c7b2:	4293      	cmp	r3, r2
    c7b4:	d012      	beq.n	c7dc <nmi_get_chipid+0x64>
		}else if(chipid == 0x1000F0) { 
    c7b6:	4a1c      	ldr	r2, [pc, #112]	; (c828 <nmi_get_chipid+0xb0>)
    c7b8:	4293      	cmp	r3, r2
    c7ba:	d01a      	beq.n	c7f2 <nmi_get_chipid+0x7a>
    c7bc:	4c1b      	ldr	r4, [pc, #108]	; (c82c <nmi_get_chipid+0xb4>)
    c7be:	4023      	ands	r3, r4
    c7c0:	24a0      	movs	r4, #160	; 0xa0
    c7c2:	02e4      	lsls	r4, r4, #11
    c7c4:	431c      	orrs	r4, r3
		chipid |= 0x050000;
    c7c6:	602c      	str	r4, [r5, #0]
	return chipid;
    c7c8:	e7dc      	b.n	c784 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    c7ca:	9b01      	ldr	r3, [sp, #4]
    c7cc:	1e5c      	subs	r4, r3, #1
    c7ce:	1e63      	subs	r3, r4, #1
    c7d0:	419c      	sbcs	r4, r3
    c7d2:	4b17      	ldr	r3, [pc, #92]	; (c830 <nmi_get_chipid+0xb8>)
    c7d4:	469c      	mov	ip, r3
    c7d6:	4464      	add	r4, ip
		chipid |= 0x050000;
    c7d8:	602c      	str	r4, [r5, #0]
    c7da:	e7d3      	b.n	c784 <nmi_get_chipid+0xc>
			if(rfrevid == 3) { /* 1002B0 */
    c7dc:	9c01      	ldr	r4, [sp, #4]
    c7de:	2c03      	cmp	r4, #3
    c7e0:	d015      	beq.n	c80e <nmi_get_chipid+0x96>
			} else if(rfrevid == 4) { /* 1002B1 */
    c7e2:	3c04      	subs	r4, #4
    c7e4:	1e63      	subs	r3, r4, #1
    c7e6:	419c      	sbcs	r4, r3
    c7e8:	4b12      	ldr	r3, [pc, #72]	; (c834 <nmi_get_chipid+0xbc>)
    c7ea:	469c      	mov	ip, r3
    c7ec:	4464      	add	r4, ip
		chipid |= 0x050000;
    c7ee:	602c      	str	r4, [r5, #0]
    c7f0:	e7c8      	b.n	c784 <nmi_get_chipid+0xc>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    c7f2:	20ec      	movs	r0, #236	; 0xec
    c7f4:	0029      	movs	r1, r5
    c7f6:	0380      	lsls	r0, r0, #14
    c7f8:	47b0      	blx	r6
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d1cc      	bne.n	c798 <nmi_get_chipid+0x20>
    c7fe:	24a0      	movs	r4, #160	; 0xa0
    c800:	682a      	ldr	r2, [r5, #0]
    c802:	4b0a      	ldr	r3, [pc, #40]	; (c82c <nmi_get_chipid+0xb4>)
    c804:	02e4      	lsls	r4, r4, #11
    c806:	4013      	ands	r3, r2
    c808:	431c      	orrs	r4, r3
		chipid |= 0x050000;
    c80a:	602c      	str	r4, [r5, #0]
    c80c:	e7ba      	b.n	c784 <nmi_get_chipid+0xc>
    c80e:	4c0a      	ldr	r4, [pc, #40]	; (c838 <nmi_get_chipid+0xc0>)
    c810:	602c      	str	r4, [r5, #0]
    c812:	e7b7      	b.n	c784 <nmi_get_chipid+0xc>
    c814:	200008fc 	.word	0x200008fc
    c818:	0000cba1 	.word	0x0000cba1
    c81c:	000013f4 	.word	0x000013f4
    c820:	001002a0 	.word	0x001002a0
    c824:	001002b0 	.word	0x001002b0
    c828:	001000f0 	.word	0x001000f0
    c82c:	fff0ffff 	.word	0xfff0ffff
    c830:	001502a0 	.word	0x001502a0
    c834:	001502b1 	.word	0x001502b1
    c838:	001502b0 	.word	0x001502b0

0000c83c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    c83c:	b530      	push	{r4, r5, lr}
    c83e:	4c16      	ldr	r4, [pc, #88]	; (c898 <chip_sleep+0x5c>)
    c840:	b083      	sub	sp, #12
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    c842:	2501      	movs	r5, #1
    c844:	e002      	b.n	c84c <chip_sleep+0x10>
    c846:	9b01      	ldr	r3, [sp, #4]
    c848:	422b      	tst	r3, r5
    c84a:	d006      	beq.n	c85a <chip_sleep+0x1e>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c84c:	a901      	add	r1, sp, #4
    c84e:	2010      	movs	r0, #16
    c850:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    c852:	2800      	cmp	r0, #0
    c854:	d0f7      	beq.n	c846 <chip_sleep+0xa>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    c856:	b003      	add	sp, #12
    c858:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c85a:	a901      	add	r1, sp, #4
    c85c:	3001      	adds	r0, #1
    c85e:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;
    c860:	2800      	cmp	r0, #0
    c862:	d1f8      	bne.n	c856 <chip_sleep+0x1a>
	if(reg & NBIT1)
    c864:	2302      	movs	r3, #2
    c866:	9901      	ldr	r1, [sp, #4]
    c868:	420b      	tst	r3, r1
    c86a:	d006      	beq.n	c87a <chip_sleep+0x3e>
		reg &=~NBIT1;
    c86c:	4399      	bics	r1, r3
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c86e:	2001      	movs	r0, #1
    c870:	4b0a      	ldr	r3, [pc, #40]	; (c89c <chip_sleep+0x60>)
		reg &=~NBIT1;
    c872:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c874:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    c876:	2800      	cmp	r0, #0
    c878:	d1ed      	bne.n	c856 <chip_sleep+0x1a>
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c87a:	a901      	add	r1, sp, #4
    c87c:	200b      	movs	r0, #11
    c87e:	47a0      	blx	r4
	if(ret != M2M_SUCCESS)goto ERR1;
    c880:	2800      	cmp	r0, #0
    c882:	d1e8      	bne.n	c856 <chip_sleep+0x1a>
	if(reg & NBIT0)
    c884:	2301      	movs	r3, #1
    c886:	9901      	ldr	r1, [sp, #4]
    c888:	420b      	tst	r3, r1
    c88a:	d0e4      	beq.n	c856 <chip_sleep+0x1a>
		reg &= ~NBIT0;
    c88c:	4399      	bics	r1, r3
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c88e:	200b      	movs	r0, #11
    c890:	4b02      	ldr	r3, [pc, #8]	; (c89c <chip_sleep+0x60>)
		reg &= ~NBIT0;
    c892:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c894:	4798      	blx	r3
    c896:	e7de      	b.n	c856 <chip_sleep+0x1a>
    c898:	0000cba1 	.word	0x0000cba1
    c89c:	0000cbad 	.word	0x0000cbad

0000c8a0 <chip_wake>:
sint8 chip_wake(void)
{
    c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8a2:	46c6      	mov	lr, r8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c8a4:	2300      	movs	r3, #0
{
    c8a6:	b500      	push	{lr}
    c8a8:	b082      	sub	sp, #8

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c8aa:	4669      	mov	r1, sp
    c8ac:	200b      	movs	r0, #11
    c8ae:	4d2b      	ldr	r5, [pc, #172]	; (c95c <chip_wake+0xbc>)
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c8b0:	9300      	str	r3, [sp, #0]
    c8b2:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c8b4:	47a8      	blx	r5
    c8b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c8b8:	d12b      	bne.n	c912 <chip_wake+0x72>
	
	if(!(reg & NBIT0))
    c8ba:	2301      	movs	r3, #1
    c8bc:	9900      	ldr	r1, [sp, #0]
    c8be:	420b      	tst	r3, r1
    c8c0:	d02c      	beq.n	c91c <chip_wake+0x7c>
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c8c2:	4669      	mov	r1, sp
    c8c4:	2001      	movs	r0, #1
    c8c6:	47a8      	blx	r5
    c8c8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c8ca:	d122      	bne.n	c912 <chip_wake+0x72>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    c8cc:	2302      	movs	r3, #2
    c8ce:	9900      	ldr	r1, [sp, #0]
    c8d0:	420b      	tst	r3, r1
    c8d2:	d02a      	beq.n	c92a <chip_wake+0x8a>
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    c8d4:	4b22      	ldr	r3, [pc, #136]	; (c960 <chip_wake+0xc0>)
{
    c8d6:	2605      	movs	r6, #5
		if(clk_status_reg & NBIT2) {
    c8d8:	2704      	movs	r7, #4
		nm_bsp_sleep(2);
    c8da:	4698      	mov	r8, r3
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c8dc:	a901      	add	r1, sp, #4
    c8de:	200f      	movs	r0, #15
    c8e0:	47a8      	blx	r5
    c8e2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    c8e4:	d128      	bne.n	c938 <chip_wake+0x98>
		if(clk_status_reg & NBIT2) {
    c8e6:	9b01      	ldr	r3, [sp, #4]
    c8e8:	423b      	tst	r3, r7
    c8ea:	d133      	bne.n	c954 <chip_wake+0xb4>
		nm_bsp_sleep(2);
    c8ec:	2002      	movs	r0, #2
    c8ee:	3e01      	subs	r6, #1
    c8f0:	47c0      	blx	r8
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    c8f2:	2e00      	cmp	r6, #0
    c8f4:	d1f2      	bne.n	c8dc <chip_wake+0x3c>
		{
			M2M_ERR("Failed to wakup the chip\n");
    c8f6:	22af      	movs	r2, #175	; 0xaf
    c8f8:	491a      	ldr	r1, [pc, #104]	; (c964 <chip_wake+0xc4>)
    c8fa:	0052      	lsls	r2, r2, #1
    c8fc:	4b1a      	ldr	r3, [pc, #104]	; (c968 <chip_wake+0xc8>)
    c8fe:	481b      	ldr	r0, [pc, #108]	; (c96c <chip_wake+0xcc>)
    c900:	4798      	blx	r3
    c902:	4b1b      	ldr	r3, [pc, #108]	; (c970 <chip_wake+0xd0>)
    c904:	481b      	ldr	r0, [pc, #108]	; (c974 <chip_wake+0xd4>)
    c906:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c908:	2404      	movs	r4, #4
			M2M_ERR("Failed to wakup the chip\n");
    c90a:	200d      	movs	r0, #13
    c90c:	4b1a      	ldr	r3, [pc, #104]	; (c978 <chip_wake+0xd8>)
    c90e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c910:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    c912:	0020      	movs	r0, r4
    c914:	b002      	add	sp, #8
    c916:	bc04      	pop	{r2}
    c918:	4690      	mov	r8, r2
    c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    c91c:	4319      	orrs	r1, r3
    c91e:	200b      	movs	r0, #11
    c920:	4b16      	ldr	r3, [pc, #88]	; (c97c <chip_wake+0xdc>)
    c922:	4798      	blx	r3
    c924:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c926:	d0cc      	beq.n	c8c2 <chip_wake+0x22>
    c928:	e7f3      	b.n	c912 <chip_wake+0x72>
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    c92a:	4319      	orrs	r1, r3
    c92c:	2001      	movs	r0, #1
    c92e:	4b13      	ldr	r3, [pc, #76]	; (c97c <chip_wake+0xdc>)
    c930:	4798      	blx	r3
    c932:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    c934:	d0ce      	beq.n	c8d4 <chip_wake+0x34>
    c936:	e7ec      	b.n	c912 <chip_wake+0x72>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    c938:	22aa      	movs	r2, #170	; 0xaa
    c93a:	4d0b      	ldr	r5, [pc, #44]	; (c968 <chip_wake+0xc8>)
    c93c:	0052      	lsls	r2, r2, #1
    c93e:	4909      	ldr	r1, [pc, #36]	; (c964 <chip_wake+0xc4>)
    c940:	480a      	ldr	r0, [pc, #40]	; (c96c <chip_wake+0xcc>)
    c942:	47a8      	blx	r5
    c944:	9a01      	ldr	r2, [sp, #4]
    c946:	0021      	movs	r1, r4
    c948:	480d      	ldr	r0, [pc, #52]	; (c980 <chip_wake+0xe0>)
    c94a:	47a8      	blx	r5
    c94c:	4b0a      	ldr	r3, [pc, #40]	; (c978 <chip_wake+0xd8>)
    c94e:	200d      	movs	r0, #13
    c950:	4798      	blx	r3
			goto _WAKE_EXIT;
    c952:	e7de      	b.n	c912 <chip_wake+0x72>
	nm_bus_reset();
    c954:	4b0b      	ldr	r3, [pc, #44]	; (c984 <chip_wake+0xe4>)
    c956:	4798      	blx	r3
    c958:	e7db      	b.n	c912 <chip_wake+0x72>
    c95a:	46c0      	nop			; (mov r8, r8)
    c95c:	0000cba1 	.word	0x0000cba1
    c960:	0000b549 	.word	0x0000b549
    c964:	000161f0 	.word	0x000161f0
    c968:	00013de9 	.word	0x00013de9
    c96c:	00015cb0 	.word	0x00015cb0
    c970:	00013f05 	.word	0x00013f05
    c974:	00016238 	.word	0x00016238
    c978:	00013e1d 	.word	0x00013e1d
    c97c:	0000cbad 	.word	0x0000cbad
    c980:	00016220 	.word	0x00016220
    c984:	0000cb89 	.word	0x0000cb89

0000c988 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c98a:	0007      	movs	r7, r0
    c98c:	4c29      	ldr	r4, [pc, #164]	; (ca34 <wait_for_bootrom+0xac>)
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c98e:	4d2a      	ldr	r5, [pc, #168]	; (ca38 <wait_for_bootrom+0xb0>)
    c990:	e001      	b.n	c996 <wait_for_bootrom+0xe>
    c992:	2001      	movs	r0, #1
    c994:	47a8      	blx	r5
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c996:	4829      	ldr	r0, [pc, #164]	; (ca3c <wait_for_bootrom+0xb4>)
    c998:	47a0      	blx	r4
		if (reg & 0x80000000) {
    c99a:	2800      	cmp	r0, #0
    c99c:	daf9      	bge.n	c992 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    c99e:	4828      	ldr	r0, [pc, #160]	; (ca40 <wait_for_bootrom+0xb8>)
    c9a0:	47a0      	blx	r4
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    c9a2:	07c3      	lsls	r3, r0, #31
    c9a4:	d407      	bmi.n	c9b6 <wait_for_bootrom+0x2e>
    c9a6:	4e24      	ldr	r6, [pc, #144]	; (ca38 <wait_for_bootrom+0xb0>)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    c9a8:	4d26      	ldr	r5, [pc, #152]	; (ca44 <wait_for_bootrom+0xbc>)
		{
			nm_bsp_sleep(1);
    c9aa:	2001      	movs	r0, #1
    c9ac:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    c9ae:	4826      	ldr	r0, [pc, #152]	; (ca48 <wait_for_bootrom+0xc0>)
    c9b0:	47a0      	blx	r4
		while(reg != M2M_FINISH_BOOT_ROM)
    c9b2:	42a8      	cmp	r0, r5
    c9b4:	d1f9      	bne.n	c9aa <wait_for_bootrom+0x22>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    c9b6:	2f02      	cmp	r7, #2
    c9b8:	d028      	beq.n	ca0c <wait_for_bootrom+0x84>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    c9ba:	2f03      	cmp	r7, #3
    c9bc:	d030      	beq.n	ca20 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c9be:	4923      	ldr	r1, [pc, #140]	; (ca4c <wait_for_bootrom+0xc4>)
    c9c0:	4823      	ldr	r0, [pc, #140]	; (ca50 <wait_for_bootrom+0xc8>)
    c9c2:	4c24      	ldr	r4, [pc, #144]	; (ca54 <wait_for_bootrom+0xcc>)
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    c9c4:	2f04      	cmp	r7, #4
    c9c6:	d01e      	beq.n	ca06 <wait_for_bootrom+0x7e>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c9c8:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c9ca:	2500      	movs	r5, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    c9cc:	4b22      	ldr	r3, [pc, #136]	; (ca58 <wait_for_bootrom+0xd0>)
    c9ce:	4798      	blx	r3
    c9d0:	4b22      	ldr	r3, [pc, #136]	; (ca5c <wait_for_bootrom+0xd4>)
    c9d2:	0500      	lsls	r0, r0, #20
    c9d4:	0d00      	lsrs	r0, r0, #20
    c9d6:	4298      	cmp	r0, r3
    c9d8:	d810      	bhi.n	c9fc <wait_for_bootrom+0x74>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    c9da:	0028      	movs	r0, r5
    c9dc:	4b20      	ldr	r3, [pc, #128]	; (ca60 <wait_for_bootrom+0xd8>)
    c9de:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    c9e0:	4d20      	ldr	r5, [pc, #128]	; (ca64 <wait_for_bootrom+0xdc>)
    c9e2:	4821      	ldr	r0, [pc, #132]	; (ca68 <wait_for_bootrom+0xe0>)
    c9e4:	47a8      	blx	r5
    c9e6:	4919      	ldr	r1, [pc, #100]	; (ca4c <wait_for_bootrom+0xc4>)
    c9e8:	4820      	ldr	r0, [pc, #128]	; (ca6c <wait_for_bootrom+0xe4>)
    c9ea:	47a8      	blx	r5
    c9ec:	4b20      	ldr	r3, [pc, #128]	; (ca70 <wait_for_bootrom+0xe8>)
    c9ee:	200d      	movs	r0, #13
    c9f0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    c9f2:	4920      	ldr	r1, [pc, #128]	; (ca74 <wait_for_bootrom+0xec>)
    c9f4:	4814      	ldr	r0, [pc, #80]	; (ca48 <wait_for_bootrom+0xc0>)
    c9f6:	47a0      	blx	r4
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    c9f8:	2000      	movs	r0, #0
    c9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    c9fc:	2002      	movs	r0, #2
    c9fe:	4b18      	ldr	r3, [pc, #96]	; (ca60 <wait_for_bootrom+0xd8>)
    ca00:	4328      	orrs	r0, r5
    ca02:	4798      	blx	r3
    ca04:	e7ec      	b.n	c9e0 <wait_for_bootrom+0x58>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    ca06:	47a0      	blx	r4
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    ca08:	2580      	movs	r5, #128	; 0x80
    ca0a:	e7df      	b.n	c9cc <wait_for_bootrom+0x44>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ca0c:	491a      	ldr	r1, [pc, #104]	; (ca78 <wait_for_bootrom+0xf0>)
    ca0e:	4c11      	ldr	r4, [pc, #68]	; (ca54 <wait_for_bootrom+0xcc>)
    ca10:	481a      	ldr	r0, [pc, #104]	; (ca7c <wait_for_bootrom+0xf4>)
    ca12:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    ca14:	2180      	movs	r1, #128	; 0x80
    ca16:	480e      	ldr	r0, [pc, #56]	; (ca50 <wait_for_bootrom+0xc8>)
    ca18:	0349      	lsls	r1, r1, #13
    ca1a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ca1c:	2500      	movs	r5, #0
    ca1e:	e7d5      	b.n	c9cc <wait_for_bootrom+0x44>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ca20:	4915      	ldr	r1, [pc, #84]	; (ca78 <wait_for_bootrom+0xf0>)
    ca22:	4c0c      	ldr	r4, [pc, #48]	; (ca54 <wait_for_bootrom+0xcc>)
    ca24:	4815      	ldr	r0, [pc, #84]	; (ca7c <wait_for_bootrom+0xf4>)
    ca26:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    ca28:	2100      	movs	r1, #0
    ca2a:	4809      	ldr	r0, [pc, #36]	; (ca50 <wait_for_bootrom+0xc8>)
    ca2c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    ca2e:	2500      	movs	r5, #0
    ca30:	e7cc      	b.n	c9cc <wait_for_bootrom+0x44>
    ca32:	46c0      	nop			; (mov r8, r8)
    ca34:	0000cb95 	.word	0x0000cb95
    ca38:	0000b549 	.word	0x0000b549
    ca3c:	00001014 	.word	0x00001014
    ca40:	000207bc 	.word	0x000207bc
    ca44:	10add09e 	.word	0x10add09e
    ca48:	000c000c 	.word	0x000c000c
    ca4c:	13521352 	.word	0x13521352
    ca50:	0000108c 	.word	0x0000108c
    ca54:	0000cbad 	.word	0x0000cbad
    ca58:	0000c779 	.word	0x0000c779
    ca5c:	0000039f 	.word	0x0000039f
    ca60:	0000c6e9 	.word	0x0000c6e9
    ca64:	00013de9 	.word	0x00013de9
    ca68:	00015fe0 	.word	0x00015fe0
    ca6c:	00016254 	.word	0x00016254
    ca70:	00013e1d 	.word	0x00013e1d
    ca74:	ef522f61 	.word	0xef522f61
    ca78:	3c1cd57d 	.word	0x3c1cd57d
    ca7c:	000207ac 	.word	0x000207ac

0000ca80 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    ca80:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    ca82:	4b16      	ldr	r3, [pc, #88]	; (cadc <wait_for_firmware_start+0x5c>)
{
    ca84:	b082      	sub	sp, #8
	volatile uint32 regAddress = NMI_STATE_REG;
    ca86:	9300      	str	r3, [sp, #0]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    ca88:	4b15      	ldr	r3, [pc, #84]	; (cae0 <wait_for_firmware_start+0x60>)
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    ca8a:	3802      	subs	r0, #2
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    ca8c:	9301      	str	r3, [sp, #4]
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    ca8e:	2801      	cmp	r0, #1
    ca90:	d917      	bls.n	cac2 <wait_for_firmware_start+0x42>
{
    ca92:	2401      	movs	r4, #1
    ca94:	2000      	movs	r0, #0
    ca96:	4264      	negs	r4, r4
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    ca98:	4e12      	ldr	r6, [pc, #72]	; (cae4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    ca9a:	4d13      	ldr	r5, [pc, #76]	; (cae8 <wait_for_firmware_start+0x68>)
    ca9c:	e006      	b.n	caac <wait_for_firmware_start+0x2c>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    ca9e:	2002      	movs	r0, #2
    caa0:	47b0      	blx	r6
    caa2:	3c01      	subs	r4, #1
		reg = nm_read_reg(regAddress);
    caa4:	9800      	ldr	r0, [sp, #0]
    caa6:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
    caa8:	2c00      	cmp	r4, #0
    caaa:	d00f      	beq.n	cacc <wait_for_firmware_start+0x4c>
	while (checkValue != reg)
    caac:	9b01      	ldr	r3, [sp, #4]
    caae:	4298      	cmp	r0, r3
    cab0:	d1f5      	bne.n	ca9e <wait_for_firmware_start+0x1e>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    cab2:	9a01      	ldr	r2, [sp, #4]
    cab4:	4b0a      	ldr	r3, [pc, #40]	; (cae0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    cab6:	2400      	movs	r4, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    cab8:	429a      	cmp	r2, r3
    caba:	d00a      	beq.n	cad2 <wait_for_firmware_start+0x52>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    cabc:	0020      	movs	r0, r4
    cabe:	b002      	add	sp, #8
    cac0:	bd70      	pop	{r4, r5, r6, pc}
		regAddress = NMI_REV_REG;
    cac2:	4b0a      	ldr	r3, [pc, #40]	; (caec <wait_for_firmware_start+0x6c>)
    cac4:	9300      	str	r3, [sp, #0]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    cac6:	4b0a      	ldr	r3, [pc, #40]	; (caf0 <wait_for_firmware_start+0x70>)
    cac8:	9301      	str	r3, [sp, #4]
    caca:	e7e2      	b.n	ca92 <wait_for_firmware_start+0x12>
			ret = M2M_ERR_INIT;
    cacc:	2405      	movs	r4, #5
    cace:	4264      	negs	r4, r4
    cad0:	e7f4      	b.n	cabc <wait_for_firmware_start+0x3c>
		nm_write_reg(NMI_STATE_REG, 0);
    cad2:	2100      	movs	r1, #0
    cad4:	4b07      	ldr	r3, [pc, #28]	; (caf4 <wait_for_firmware_start+0x74>)
    cad6:	4801      	ldr	r0, [pc, #4]	; (cadc <wait_for_firmware_start+0x5c>)
    cad8:	4798      	blx	r3
    cada:	e7ef      	b.n	cabc <wait_for_firmware_start+0x3c>
    cadc:	0000108c 	.word	0x0000108c
    cae0:	02532636 	.word	0x02532636
    cae4:	0000b549 	.word	0x0000b549
    cae8:	0000cb95 	.word	0x0000cb95
    caec:	000207ac 	.word	0x000207ac
    caf0:	d75dc1c3 	.word	0xd75dc1c3
    caf4:	0000cbad 	.word	0x0000cbad

0000caf8 <chip_deinit>:

sint8 chip_deinit(void)
{
	uint32 reg = 0;
    caf8:	2300      	movs	r3, #0
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    cafa:	20a0      	movs	r0, #160	; 0xa0
{
    cafc:	b510      	push	{r4, lr}
    cafe:	b082      	sub	sp, #8
	uint32 reg = 0;
    cb00:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    cb02:	a901      	add	r1, sp, #4
    cb04:	0140      	lsls	r0, r0, #5
    cb06:	4b0f      	ldr	r3, [pc, #60]	; (cb44 <chip_deinit+0x4c>)
    cb08:	4798      	blx	r3
    cb0a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    cb0c:	d118      	bne.n	cb40 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    cb0e:	20a0      	movs	r0, #160	; 0xa0
	reg &= ~(1 << 10);
    cb10:	9b01      	ldr	r3, [sp, #4]
    cb12:	490d      	ldr	r1, [pc, #52]	; (cb48 <chip_deinit+0x50>)
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    cb14:	0140      	lsls	r0, r0, #5
	reg &= ~(1 << 10);
    cb16:	4019      	ands	r1, r3
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    cb18:	4b0c      	ldr	r3, [pc, #48]	; (cb4c <chip_deinit+0x54>)
	reg &= ~(1 << 10);
    cb1a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    cb1c:	4798      	blx	r3
    cb1e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    cb20:	d102      	bne.n	cb28 <chip_deinit+0x30>
		goto ERR1;
	}

ERR1:
	return ret;
}
    cb22:	0020      	movs	r0, r4
    cb24:	b002      	add	sp, #8
    cb26:	bd10      	pop	{r4, pc}
		M2M_ERR("failed to de-initialize\n");
    cb28:	4a09      	ldr	r2, [pc, #36]	; (cb50 <chip_deinit+0x58>)
    cb2a:	490a      	ldr	r1, [pc, #40]	; (cb54 <chip_deinit+0x5c>)
    cb2c:	4b0a      	ldr	r3, [pc, #40]	; (cb58 <chip_deinit+0x60>)
    cb2e:	480b      	ldr	r0, [pc, #44]	; (cb5c <chip_deinit+0x64>)
    cb30:	4798      	blx	r3
    cb32:	4b0b      	ldr	r3, [pc, #44]	; (cb60 <chip_deinit+0x68>)
    cb34:	480b      	ldr	r0, [pc, #44]	; (cb64 <chip_deinit+0x6c>)
    cb36:	4798      	blx	r3
    cb38:	4b0b      	ldr	r3, [pc, #44]	; (cb68 <chip_deinit+0x70>)
    cb3a:	200d      	movs	r0, #13
    cb3c:	4798      	blx	r3
		goto ERR1;
    cb3e:	e7f0      	b.n	cb22 <chip_deinit+0x2a>
		M2M_ERR("failed to de-initialize\n");
    cb40:	4a0a      	ldr	r2, [pc, #40]	; (cb6c <chip_deinit+0x74>)
    cb42:	e7f2      	b.n	cb2a <chip_deinit+0x32>
    cb44:	0000cba1 	.word	0x0000cba1
    cb48:	fffffbff 	.word	0xfffffbff
    cb4c:	0000cbad 	.word	0x0000cbad
    cb50:	0000020b 	.word	0x0000020b
    cb54:	000161fc 	.word	0x000161fc
    cb58:	00013de9 	.word	0x00013de9
    cb5c:	00015cb0 	.word	0x00015cb0
    cb60:	00013f05 	.word	0x00013f05
    cb64:	00016208 	.word	0x00016208
    cb68:	00013e1d 	.word	0x00013e1d
    cb6c:	00000205 	.word	0x00000205

0000cb70 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    cb70:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    cb72:	4b01      	ldr	r3, [pc, #4]	; (cb78 <nm_bus_iface_init+0x8>)
    cb74:	4798      	blx	r3
	return ret;
}
    cb76:	bd10      	pop	{r4, pc}
    cb78:	0000b5d9 	.word	0x0000b5d9

0000cb7c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    cb7c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    cb7e:	4b01      	ldr	r3, [pc, #4]	; (cb84 <nm_bus_iface_deinit+0x8>)
    cb80:	4798      	blx	r3

	return ret;
}
    cb82:	bd10      	pop	{r4, pc}
    cb84:	0000b821 	.word	0x0000b821

0000cb88 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    cb88:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    cb8a:	4b01      	ldr	r3, [pc, #4]	; (cb90 <nm_bus_reset+0x8>)
    cb8c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    cb8e:	bd10      	pop	{r4, pc}
    cb90:	0000d4f9 	.word	0x0000d4f9

0000cb94 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    cb94:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    cb96:	4b01      	ldr	r3, [pc, #4]	; (cb9c <nm_read_reg+0x8>)
    cb98:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    cb9a:	bd10      	pop	{r4, pc}
    cb9c:	0000d665 	.word	0x0000d665

0000cba0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    cba0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    cba2:	4b01      	ldr	r3, [pc, #4]	; (cba8 <nm_read_reg_with_ret+0x8>)
    cba4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    cba6:	bd10      	pop	{r4, pc}
    cba8:	0000d679 	.word	0x0000d679

0000cbac <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    cbac:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    cbae:	4b01      	ldr	r3, [pc, #4]	; (cbb4 <nm_write_reg+0x8>)
    cbb0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    cbb2:	bd10      	pop	{r4, pc}
    cbb4:	0000d691 	.word	0x0000d691

0000cbb8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbba:	4646      	mov	r6, r8
    cbbc:	464f      	mov	r7, r9
    cbbe:	46d6      	mov	lr, sl
    cbc0:	b5c0      	push	{r6, r7, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cbc2:	4b14      	ldr	r3, [pc, #80]	; (cc14 <nm_read_block+0x5c>)
{
    cbc4:	0007      	movs	r7, r0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cbc6:	881d      	ldrh	r5, [r3, #0]
{
    cbc8:	4688      	mov	r8, r1
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cbca:	3d08      	subs	r5, #8
    cbcc:	b2ad      	uxth	r5, r5
{
    cbce:	0016      	movs	r6, r2
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    cbd0:	0004      	movs	r4, r0
    cbd2:	42aa      	cmp	r2, r5
    cbd4:	d916      	bls.n	cc04 <nm_read_block+0x4c>
    cbd6:	4b10      	ldr	r3, [pc, #64]	; (cc18 <nm_read_block+0x60>)
    cbd8:	4699      	mov	r9, r3
    cbda:	1a2b      	subs	r3, r5, r0
    cbdc:	469a      	mov	sl, r3
    cbde:	e005      	b.n	cbec <nm_read_block+0x34>
    cbe0:	4653      	mov	r3, sl
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    cbe2:	1b76      	subs	r6, r6, r5
    cbe4:	1919      	adds	r1, r3, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    cbe6:	1964      	adds	r4, r4, r5
		if(u32Sz <= u16MaxTrxSz)
    cbe8:	42ae      	cmp	r6, r5
    cbea:	d90e      	bls.n	cc0a <nm_read_block+0x52>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    cbec:	1be1      	subs	r1, r4, r7
    cbee:	4441      	add	r1, r8
    cbf0:	002a      	movs	r2, r5
    cbf2:	0020      	movs	r0, r4
    cbf4:	47c8      	blx	r9
			if(M2M_SUCCESS != s8Ret) break;
    cbf6:	2800      	cmp	r0, #0
    cbf8:	d0f2      	beq.n	cbe0 <nm_read_block+0x28>
		}
	}

	return s8Ret;
}
    cbfa:	bc1c      	pop	{r2, r3, r4}
    cbfc:	4690      	mov	r8, r2
    cbfe:	4699      	mov	r9, r3
    cc00:	46a2      	mov	sl, r4
    cc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc04:	4b04      	ldr	r3, [pc, #16]	; (cc18 <nm_read_block+0x60>)
	uint32 off = 0;
    cc06:	2100      	movs	r1, #0
    cc08:	4699      	mov	r9, r3
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    cc0a:	b2b2      	uxth	r2, r6
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    cc0c:	4441      	add	r1, r8
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    cc0e:	0020      	movs	r0, r4
    cc10:	47c8      	blx	r9
			break;
    cc12:	e7f2      	b.n	cbfa <nm_read_block+0x42>
    cc14:	20000108 	.word	0x20000108
    cc18:	0000d6a9 	.word	0x0000d6a9

0000cc1c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    cc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc1e:	4646      	mov	r6, r8
    cc20:	464f      	mov	r7, r9
    cc22:	46d6      	mov	lr, sl
    cc24:	b5c0      	push	{r6, r7, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cc26:	4b14      	ldr	r3, [pc, #80]	; (cc78 <nm_write_block+0x5c>)
{
    cc28:	0007      	movs	r7, r0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cc2a:	881d      	ldrh	r5, [r3, #0]
{
    cc2c:	4688      	mov	r8, r1
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    cc2e:	3d08      	subs	r5, #8
    cc30:	b2ad      	uxth	r5, r5
{
    cc32:	0016      	movs	r6, r2
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    cc34:	0004      	movs	r4, r0
    cc36:	42aa      	cmp	r2, r5
    cc38:	d916      	bls.n	cc68 <nm_write_block+0x4c>
    cc3a:	4b10      	ldr	r3, [pc, #64]	; (cc7c <nm_write_block+0x60>)
    cc3c:	4699      	mov	r9, r3
    cc3e:	1a2b      	subs	r3, r5, r0
    cc40:	469a      	mov	sl, r3
    cc42:	e005      	b.n	cc50 <nm_write_block+0x34>
    cc44:	4653      	mov	r3, sl
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    cc46:	1b76      	subs	r6, r6, r5
    cc48:	1919      	adds	r1, r3, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    cc4a:	1964      	adds	r4, r4, r5
		if(u32Sz <= u16MaxTrxSz)
    cc4c:	42ae      	cmp	r6, r5
    cc4e:	d90e      	bls.n	cc6e <nm_write_block+0x52>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    cc50:	1be1      	subs	r1, r4, r7
    cc52:	4441      	add	r1, r8
    cc54:	002a      	movs	r2, r5
    cc56:	0020      	movs	r0, r4
    cc58:	47c8      	blx	r9
			if(M2M_SUCCESS != s8Ret) break;
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d0f2      	beq.n	cc44 <nm_write_block+0x28>
		}
	}

	return s8Ret;
}
    cc5e:	bc1c      	pop	{r2, r3, r4}
    cc60:	4690      	mov	r8, r2
    cc62:	4699      	mov	r9, r3
    cc64:	46a2      	mov	sl, r4
    cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc68:	4b04      	ldr	r3, [pc, #16]	; (cc7c <nm_write_block+0x60>)
	uint32 off = 0;
    cc6a:	2100      	movs	r1, #0
    cc6c:	4699      	mov	r9, r3
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    cc6e:	b2b2      	uxth	r2, r6
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    cc70:	4441      	add	r1, r8
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    cc72:	0020      	movs	r0, r4
    cc74:	47c8      	blx	r9
			break;
    cc76:	e7f2      	b.n	cc5e <nm_write_block+0x42>
    cc78:	20000108 	.word	0x20000108
    cc7c:	0000d809 	.word	0x0000d809

0000cc80 <nm_get_firmware_full_info>:
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    cc80:	2300      	movs	r3, #0
{
    cc82:	b570      	push	{r4, r5, r6, lr}
    cc84:	b084      	sub	sp, #16
    cc86:	0004      	movs	r4, r0
	uint32	reg = 0;
    cc88:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    cc8a:	2208      	movs	r2, #8
    cc8c:	2100      	movs	r1, #0
    cc8e:	a802      	add	r0, sp, #8
    cc90:	4b26      	ldr	r3, [pc, #152]	; (cd2c <nm_get_firmware_full_info+0xac>)
    cc92:	4798      	blx	r3
	if (pstrRev != NULL)
    cc94:	2c00      	cmp	r4, #0
    cc96:	d03f      	beq.n	cd18 <nm_get_firmware_full_info+0x98>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    cc98:	2100      	movs	r1, #0
    cc9a:	0020      	movs	r0, r4
    cc9c:	4b24      	ldr	r3, [pc, #144]	; (cd30 <nm_get_firmware_full_info+0xb0>)
    cc9e:	2228      	movs	r2, #40	; 0x28
    cca0:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    cca2:	a901      	add	r1, sp, #4
    cca4:	4823      	ldr	r0, [pc, #140]	; (cd34 <nm_get_firmware_full_info+0xb4>)
    cca6:	4b24      	ldr	r3, [pc, #144]	; (cd38 <nm_get_firmware_full_info+0xb8>)
    cca8:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    ccaa:	2800      	cmp	r0, #0
    ccac:	d135      	bne.n	cd1a <nm_get_firmware_full_info+0x9a>
		{
			if(reg != 0)
    ccae:	9801      	ldr	r0, [sp, #4]
    ccb0:	2800      	cmp	r0, #0
    ccb2:	d034      	beq.n	cd1e <nm_get_firmware_full_info+0x9e>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    ccb4:	25c0      	movs	r5, #192	; 0xc0
    ccb6:	02ad      	lsls	r5, r5, #10
    ccb8:	4328      	orrs	r0, r5
    ccba:	2208      	movs	r2, #8
    ccbc:	a902      	add	r1, sp, #8
    ccbe:	4e1f      	ldr	r6, [pc, #124]	; (cd3c <nm_get_firmware_full_info+0xbc>)
    ccc0:	47b0      	blx	r6
				if(ret == M2M_SUCCESS)
    ccc2:	2800      	cmp	r0, #0
    ccc4:	d129      	bne.n	cd1a <nm_get_firmware_full_info+0x9a>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    ccc6:	466b      	mov	r3, sp
    ccc8:	8998      	ldrh	r0, [r3, #12]
    ccca:	9001      	str	r0, [sp, #4]
					if(reg != 0)
    cccc:	2800      	cmp	r0, #0
    ccce:	d026      	beq.n	cd1e <nm_get_firmware_full_info+0x9e>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    ccd0:	4328      	orrs	r0, r5
    ccd2:	2228      	movs	r2, #40	; 0x28
    ccd4:	0021      	movs	r1, r4
    ccd6:	47b0      	blx	r6
						if(ret == M2M_SUCCESS)
    ccd8:	2800      	cmp	r0, #0
    ccda:	d11e      	bne.n	cd1a <nm_get_firmware_full_info+0x9a>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    ccdc:	230f      	movs	r3, #15
    ccde:	7921      	ldrb	r1, [r4, #4]
    cce0:	79a2      	ldrb	r2, [r4, #6]
    cce2:	0209      	lsls	r1, r1, #8
    cce4:	401a      	ands	r2, r3
    cce6:	430a      	orrs	r2, r1
    cce8:	7961      	ldrb	r1, [r4, #5]
    ccea:	30ff      	adds	r0, #255	; 0xff
    ccec:	0109      	lsls	r1, r1, #4
    ccee:	4001      	ands	r1, r0
    ccf0:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    ccf2:	7a65      	ldrb	r5, [r4, #9]
    ccf4:	79e1      	ldrb	r1, [r4, #7]
    ccf6:	402b      	ands	r3, r5
    ccf8:	0209      	lsls	r1, r1, #8
    ccfa:	430b      	orrs	r3, r1
    ccfc:	7a21      	ldrb	r1, [r4, #8]
    ccfe:	0109      	lsls	r1, r1, #4
    cd00:	4008      	ands	r0, r1
    cd02:	4303      	orrs	r3, r0
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    cd04:	2a00      	cmp	r2, #0
    cd06:	d00a      	beq.n	cd1e <nm_get_firmware_full_info+0x9e>
    cd08:	2b00      	cmp	r3, #0
    cd0a:	d008      	beq.n	cd1e <nm_get_firmware_full_info+0x9e>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    cd0c:	490c      	ldr	r1, [pc, #48]	; (cd40 <nm_get_firmware_full_info+0xc0>)
    cd0e:	428b      	cmp	r3, r1
    cd10:	d808      	bhi.n	cd24 <nm_get_firmware_full_info+0xa4>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    cd12:	4b0c      	ldr	r3, [pc, #48]	; (cd44 <nm_get_firmware_full_info+0xc4>)
    cd14:	429a      	cmp	r2, r3
    cd16:	d905      	bls.n	cd24 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    cd18:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    cd1a:	b004      	add	sp, #16
    cd1c:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    cd1e:	200c      	movs	r0, #12
    cd20:	4240      	negs	r0, r0
    cd22:	e7fa      	b.n	cd1a <nm_get_firmware_full_info+0x9a>
								ret = M2M_ERR_FW_VER_MISMATCH;
    cd24:	200d      	movs	r0, #13
    cd26:	4240      	negs	r0, r0
    cd28:	e7f7      	b.n	cd1a <nm_get_firmware_full_info+0x9a>
    cd2a:	46c0      	nop			; (mov r8, r8)
    cd2c:	00013c87 	.word	0x00013c87
    cd30:	0000b8a5 	.word	0x0000b8a5
    cd34:	000c0008 	.word	0x000c0008
    cd38:	0000cba1 	.word	0x0000cba1
    cd3c:	0000cbb9 	.word	0x0000cbb9
    cd40:	00001352 	.word	0x00001352
    cd44:	00001351 	.word	0x00001351

0000cd48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    cd4a:	2800      	cmp	r0, #0
    cd4c:	d01e      	beq.n	cd8c <nm_drv_init+0x44>
		u8Mode = *((uint8 *)arg);
    cd4e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    cd50:	1e6b      	subs	r3, r5, #1
    cd52:	2b03      	cmp	r3, #3
    cd54:	d81a      	bhi.n	cd8c <nm_drv_init+0x44>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    cd56:	2000      	movs	r0, #0
    cd58:	4b22      	ldr	r3, [pc, #136]	; (cde4 <nm_drv_init+0x9c>)
    cd5a:	4798      	blx	r3
    cd5c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    cd5e:	d11b      	bne.n	cd98 <nm_drv_init+0x50>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    cd60:	4e21      	ldr	r6, [pc, #132]	; (cde8 <nm_drv_init+0xa0>)
    cd62:	4822      	ldr	r0, [pc, #136]	; (cdec <nm_drv_init+0xa4>)
    cd64:	47b0      	blx	r6
    cd66:	4b22      	ldr	r3, [pc, #136]	; (cdf0 <nm_drv_init+0xa8>)
    cd68:	4798      	blx	r3
    cd6a:	0001      	movs	r1, r0
    cd6c:	4821      	ldr	r0, [pc, #132]	; (cdf4 <nm_drv_init+0xac>)
    cd6e:	47b0      	blx	r6
    cd70:	200d      	movs	r0, #13
    cd72:	4f21      	ldr	r7, [pc, #132]	; (cdf8 <nm_drv_init+0xb0>)
    cd74:	47b8      	blx	r7
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    cd76:	4b21      	ldr	r3, [pc, #132]	; (cdfc <nm_drv_init+0xb4>)
    cd78:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    cd7a:	0028      	movs	r0, r5
    cd7c:	4b20      	ldr	r3, [pc, #128]	; (ce00 <nm_drv_init+0xb8>)
    cd7e:	4798      	blx	r3
    cd80:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    cd82:	d016      	beq.n	cdb2 <nm_drv_init+0x6a>
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    cd84:	4b1f      	ldr	r3, [pc, #124]	; (ce04 <nm_drv_init+0xbc>)
    cd86:	4798      	blx	r3
ERR1:
	return ret;
}
    cd88:	0020      	movs	r0, r4
    cd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = nm_bus_iface_init(NULL);
    cd8c:	2000      	movs	r0, #0
    cd8e:	4b15      	ldr	r3, [pc, #84]	; (cde4 <nm_drv_init+0x9c>)
    cd90:	4798      	blx	r3
		u8Mode = M2M_WIFI_MODE_NORMAL;
    cd92:	2501      	movs	r5, #1
	ret = nm_bus_iface_init(NULL);
    cd94:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    cd96:	d0e3      	beq.n	cd60 <nm_drv_init+0x18>
		M2M_ERR("[nmi start]: fail init bus\n");
    cd98:	2228      	movs	r2, #40	; 0x28
    cd9a:	491b      	ldr	r1, [pc, #108]	; (ce08 <nm_drv_init+0xc0>)
    cd9c:	32ff      	adds	r2, #255	; 0xff
    cd9e:	4b12      	ldr	r3, [pc, #72]	; (cde8 <nm_drv_init+0xa0>)
    cda0:	481a      	ldr	r0, [pc, #104]	; (ce0c <nm_drv_init+0xc4>)
    cda2:	4798      	blx	r3
    cda4:	4b1a      	ldr	r3, [pc, #104]	; (ce10 <nm_drv_init+0xc8>)
    cda6:	481b      	ldr	r0, [pc, #108]	; (ce14 <nm_drv_init+0xcc>)
    cda8:	4798      	blx	r3
    cdaa:	4b13      	ldr	r3, [pc, #76]	; (cdf8 <nm_drv_init+0xb0>)
    cdac:	200d      	movs	r0, #13
    cdae:	4798      	blx	r3
		goto ERR1;
    cdb0:	e7ea      	b.n	cd88 <nm_drv_init+0x40>
	ret = wait_for_firmware_start(u8Mode);
    cdb2:	0028      	movs	r0, r5
    cdb4:	4b18      	ldr	r3, [pc, #96]	; (ce18 <nm_drv_init+0xd0>)
    cdb6:	4798      	blx	r3
    cdb8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    cdba:	d1e3      	bne.n	cd84 <nm_drv_init+0x3c>
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    cdbc:	3d02      	subs	r5, #2
    cdbe:	2d01      	cmp	r5, #1
    cdc0:	d9e2      	bls.n	cd88 <nm_drv_init+0x40>
	ret = enable_interrupts();
    cdc2:	4b16      	ldr	r3, [pc, #88]	; (ce1c <nm_drv_init+0xd4>)
    cdc4:	4798      	blx	r3
    cdc6:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    cdc8:	d0de      	beq.n	cd88 <nm_drv_init+0x40>
		M2M_ERR("failed to enable interrupts..\n");
    cdca:	2256      	movs	r2, #86	; 0x56
    cdcc:	490e      	ldr	r1, [pc, #56]	; (ce08 <nm_drv_init+0xc0>)
    cdce:	32ff      	adds	r2, #255	; 0xff
    cdd0:	480e      	ldr	r0, [pc, #56]	; (ce0c <nm_drv_init+0xc4>)
    cdd2:	47b0      	blx	r6
    cdd4:	4b0e      	ldr	r3, [pc, #56]	; (ce10 <nm_drv_init+0xc8>)
    cdd6:	4812      	ldr	r0, [pc, #72]	; (ce20 <nm_drv_init+0xd8>)
    cdd8:	4798      	blx	r3
    cdda:	200d      	movs	r0, #13
    cddc:	47b8      	blx	r7
		goto ERR2;
    cdde:	002c      	movs	r4, r5
    cde0:	e7d0      	b.n	cd84 <nm_drv_init+0x3c>
    cde2:	46c0      	nop			; (mov r8, r8)
    cde4:	0000cb71 	.word	0x0000cb71
    cde8:	00013de9 	.word	0x00013de9
    cdec:	00015fe0 	.word	0x00015fe0
    cdf0:	0000c779 	.word	0x0000c779
    cdf4:	00016324 	.word	0x00016324
    cdf8:	00013e1d 	.word	0x00013e1d
    cdfc:	0000d521 	.word	0x0000d521
    ce00:	0000c989 	.word	0x0000c989
    ce04:	0000cb7d 	.word	0x0000cb7d
    ce08:	0001626c 	.word	0x0001626c
    ce0c:	00015cb0 	.word	0x00015cb0
    ce10:	00013f05 	.word	0x00013f05
    ce14:	00016308 	.word	0x00016308
    ce18:	0000ca81 	.word	0x0000ca81
    ce1c:	0000c721 	.word	0x0000c721
    ce20:	000162e8 	.word	0x000162e8

0000ce24 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    ce24:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    ce26:	4b17      	ldr	r3, [pc, #92]	; (ce84 <nm_drv_deinit+0x60>)
    ce28:	4798      	blx	r3
    ce2a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    ce2c:	d119      	bne.n	ce62 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    ce2e:	2000      	movs	r0, #0
    ce30:	4b15      	ldr	r3, [pc, #84]	; (ce88 <nm_drv_deinit+0x64>)
    ce32:	4798      	blx	r3
    ce34:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    ce36:	d107      	bne.n	ce48 <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    ce38:	4b14      	ldr	r3, [pc, #80]	; (ce8c <nm_drv_deinit+0x68>)
    ce3a:	4798      	blx	r3
    ce3c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    ce3e:	d118      	bne.n	ce72 <nm_drv_deinit+0x4e>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    ce40:	4b13      	ldr	r3, [pc, #76]	; (ce90 <nm_drv_deinit+0x6c>)
    ce42:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    ce44:	0020      	movs	r0, r4
    ce46:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    ce48:	2274      	movs	r2, #116	; 0x74
    ce4a:	4912      	ldr	r1, [pc, #72]	; (ce94 <nm_drv_deinit+0x70>)
    ce4c:	32ff      	adds	r2, #255	; 0xff
    ce4e:	4812      	ldr	r0, [pc, #72]	; (ce98 <nm_drv_deinit+0x74>)
    ce50:	4b12      	ldr	r3, [pc, #72]	; (ce9c <nm_drv_deinit+0x78>)
    ce52:	4798      	blx	r3
    ce54:	4812      	ldr	r0, [pc, #72]	; (cea0 <nm_drv_deinit+0x7c>)
    ce56:	4b13      	ldr	r3, [pc, #76]	; (cea4 <nm_drv_deinit+0x80>)
    ce58:	4798      	blx	r3
    ce5a:	4b13      	ldr	r3, [pc, #76]	; (cea8 <nm_drv_deinit+0x84>)
    ce5c:	200d      	movs	r0, #13
    ce5e:	4798      	blx	r3
		goto ERR1;
    ce60:	e7f0      	b.n	ce44 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    ce62:	22b6      	movs	r2, #182	; 0xb6
    ce64:	490b      	ldr	r1, [pc, #44]	; (ce94 <nm_drv_deinit+0x70>)
    ce66:	0052      	lsls	r2, r2, #1
    ce68:	480b      	ldr	r0, [pc, #44]	; (ce98 <nm_drv_deinit+0x74>)
    ce6a:	4b0c      	ldr	r3, [pc, #48]	; (ce9c <nm_drv_deinit+0x78>)
    ce6c:	4798      	blx	r3
    ce6e:	480f      	ldr	r0, [pc, #60]	; (ceac <nm_drv_deinit+0x88>)
    ce70:	e7f1      	b.n	ce56 <nm_drv_deinit+0x32>
		M2M_ERR("[nmi stop]: fail init bus\n");
    ce72:	227a      	movs	r2, #122	; 0x7a
    ce74:	4907      	ldr	r1, [pc, #28]	; (ce94 <nm_drv_deinit+0x70>)
    ce76:	32ff      	adds	r2, #255	; 0xff
    ce78:	4807      	ldr	r0, [pc, #28]	; (ce98 <nm_drv_deinit+0x74>)
    ce7a:	4b08      	ldr	r3, [pc, #32]	; (ce9c <nm_drv_deinit+0x78>)
    ce7c:	4798      	blx	r3
    ce7e:	480c      	ldr	r0, [pc, #48]	; (ceb0 <nm_drv_deinit+0x8c>)
    ce80:	e7e9      	b.n	ce56 <nm_drv_deinit+0x32>
    ce82:	46c0      	nop			; (mov r8, r8)
    ce84:	0000caf9 	.word	0x0000caf9
    ce88:	0000e2e1 	.word	0x0000e2e1
    ce8c:	0000cb7d 	.word	0x0000cb7d
    ce90:	0000d655 	.word	0x0000d655
    ce94:	00016278 	.word	0x00016278
    ce98:	00015cb0 	.word	0x00015cb0
    ce9c:	00013de9 	.word	0x00013de9
    cea0:	000162a8 	.word	0x000162a8
    cea4:	00013f05 	.word	0x00013f05
    cea8:	00013e1d 	.word	0x00013e1d
    ceac:	00016288 	.word	0x00016288
    ceb0:	000162cc 	.word	0x000162cc

0000ceb4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    ceb4:	b570      	push	{r4, r5, r6, lr}
    ceb6:	b086      	sub	sp, #24
    ceb8:	ac0a      	add	r4, sp, #40	; 0x28
    ceba:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    cebc:	466c      	mov	r4, sp
    cebe:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    cec0:	303f      	adds	r0, #63	; 0x3f
    cec2:	b2c0      	uxtb	r0, r0
    cec4:	280e      	cmp	r0, #14
    cec6:	d900      	bls.n	ceca <spi_cmd+0x16>
    cec8:	e08f      	b.n	cfea <spi_cmd+0x136>
    ceca:	4c49      	ldr	r4, [pc, #292]	; (cff0 <spi_cmd+0x13c>)
    cecc:	0080      	lsls	r0, r0, #2
    cece:	5820      	ldr	r0, [r4, r0]
    ced0:	4687      	mov	pc, r0
		bc[2] = 0x00;
		bc[3] = 0x00;
		len = 5;
		break;
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    ced2:	2300      	movs	r3, #0
		bc[2] = 0x00;
		bc[3] = 0x00;
		len = 5;
		break;
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    ced4:	466a      	mov	r2, sp
		bc[2] = 0xff;
		bc[3] = 0xff;
		len = 5;
    ced6:	2505      	movs	r5, #5
		bc[1] = 0xff;
    ced8:	7053      	strb	r3, [r2, #1]
		bc[2] = 0xff;
    ceda:	7093      	strb	r3, [r2, #2]
		bc[3] = 0xff;
    cedc:	70d3      	strb	r3, [r2, #3]
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    cede:	4b45      	ldr	r3, [pc, #276]	; (cff4 <spi_cmd+0x140>)
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	2b00      	cmp	r3, #0
    cee4:	d01d      	beq.n	cf22 <spi_cmd+0x6e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    cee6:	3d01      	subs	r5, #1
    cee8:	b2ed      	uxtb	r5, r5
	spi.pu8InBuf = b;
    ceea:	466b      	mov	r3, sp
    ceec:	9303      	str	r3, [sp, #12]
	spi.pu8OutBuf = NULL;
    ceee:	2300      	movs	r3, #0
	spi.pu8InBuf = b;
    cef0:	a903      	add	r1, sp, #12
	spi.pu8OutBuf = NULL;
    cef2:	604b      	str	r3, [r1, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cef4:	2003      	movs	r0, #3
    cef6:	4b40      	ldr	r3, [pc, #256]	; (cff8 <spi_cmd+0x144>)
	spi.u16Sz = sz;
    cef8:	810d      	strh	r5, [r1, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cefa:	4798      	blx	r3
    cefc:	0003      	movs	r3, r0
    cefe:	2001      	movs	r0, #1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    cf00:	2b00      	cmp	r3, #0
    cf02:	d00c      	beq.n	cf1e <spi_cmd+0x6a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    cf04:	2228      	movs	r2, #40	; 0x28
    cf06:	493d      	ldr	r1, [pc, #244]	; (cffc <spi_cmd+0x148>)
    cf08:	32ff      	adds	r2, #255	; 0xff
    cf0a:	4b3d      	ldr	r3, [pc, #244]	; (d000 <spi_cmd+0x14c>)
    cf0c:	483d      	ldr	r0, [pc, #244]	; (d004 <spi_cmd+0x150>)
    cf0e:	4798      	blx	r3
    cf10:	4b3d      	ldr	r3, [pc, #244]	; (d008 <spi_cmd+0x154>)
    cf12:	483e      	ldr	r0, [pc, #248]	; (d00c <spi_cmd+0x158>)
    cf14:	4798      	blx	r3
    cf16:	200d      	movs	r0, #13
    cf18:	4b3d      	ldr	r3, [pc, #244]	; (d010 <spi_cmd+0x15c>)
    cf1a:	4798      	blx	r3
			result = N_FAIL;
    cf1c:	2000      	movs	r0, #0
		}
	}

	return result;
}
    cf1e:	b006      	add	sp, #24
    cf20:	bd70      	pop	{r4, r5, r6, pc}
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cf22:	1e6e      	subs	r6, r5, #1
    cf24:	0034      	movs	r4, r6
    cf26:	466a      	mov	r2, sp
    cf28:	237f      	movs	r3, #127	; 0x7f
    cf2a:	483a      	ldr	r0, [pc, #232]	; (d014 <spi_cmd+0x160>)
    cf2c:	446c      	add	r4, sp
	return crc7_syndrome_table[(crc << 1) ^ data];
    cf2e:	7811      	ldrb	r1, [r2, #0]
    cf30:	005b      	lsls	r3, r3, #1
    cf32:	404b      	eors	r3, r1
    cf34:	3201      	adds	r2, #1
    cf36:	5cc3      	ldrb	r3, [r0, r3]
	while (len--)
    cf38:	4294      	cmp	r4, r2
    cf3a:	d1f8      	bne.n	cf2e <spi_cmd+0x7a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cf3c:	466a      	mov	r2, sp
    cf3e:	005b      	lsls	r3, r3, #1
    cf40:	5593      	strb	r3, [r2, r6]
    cf42:	e7d2      	b.n	ceea <spi_cmd+0x36>
		bc[1] = 0xff;
    cf44:	23ff      	movs	r3, #255	; 0xff
    cf46:	e7c5      	b.n	ced4 <spi_cmd+0x20>
		bc[1] = (uint8)(adr >> 16);
    cf48:	4668      	mov	r0, sp
    cf4a:	0c0a      	lsrs	r2, r1, #16
    cf4c:	7042      	strb	r2, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    cf4e:	0a0a      	lsrs	r2, r1, #8
    cf50:	7082      	strb	r2, [r0, #2]
		bc[4] = (uint8)(sz >> 16);
    cf52:	0c1a      	lsrs	r2, r3, #16
    cf54:	7102      	strb	r2, [r0, #4]
		bc[5] = (uint8)(sz >> 8);
    cf56:	0a1a      	lsrs	r2, r3, #8
		bc[3] = (uint8)adr;
    cf58:	70c1      	strb	r1, [r0, #3]
		bc[5] = (uint8)(sz >> 8);
    cf5a:	7142      	strb	r2, [r0, #5]
		bc[6] = (uint8)(sz);
    cf5c:	7183      	strb	r3, [r0, #6]
		len = 8;
    cf5e:	2508      	movs	r5, #8
		break;
    cf60:	e7bd      	b.n	cede <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    cf62:	4668      	mov	r0, sp
    cf64:	0c0b      	lsrs	r3, r1, #16
    cf66:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    cf68:	0a0b      	lsrs	r3, r1, #8
    cf6a:	7083      	strb	r3, [r0, #2]
		bc[4] = (uint8)(u32data >> 24);
    cf6c:	0e13      	lsrs	r3, r2, #24
    cf6e:	7103      	strb	r3, [r0, #4]
		bc[5] = (uint8)(u32data >> 16);
    cf70:	0c13      	lsrs	r3, r2, #16
    cf72:	7143      	strb	r3, [r0, #5]
		bc[6] = (uint8)(u32data >> 8);
    cf74:	0a13      	lsrs	r3, r2, #8
		bc[3] = (uint8)(adr);
    cf76:	70c1      	strb	r1, [r0, #3]
		bc[6] = (uint8)(u32data >> 8);
    cf78:	7183      	strb	r3, [r0, #6]
		bc[7] = (uint8)(u32data);
    cf7a:	71c2      	strb	r2, [r0, #7]
		len = 9;
    cf7c:	2509      	movs	r5, #9
		break;
    cf7e:	e7ae      	b.n	cede <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    cf80:	466a      	mov	r2, sp
    cf82:	0c0b      	lsrs	r3, r1, #16
    cf84:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    cf86:	0a0b      	lsrs	r3, r1, #8
    cf88:	7093      	strb	r3, [r2, #2]
		bc[3] = (uint8)adr;
    cf8a:	70d1      	strb	r1, [r2, #3]
		len = 5;
    cf8c:	2505      	movs	r5, #5
		break;
    cf8e:	e7a6      	b.n	cede <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 16);
    cf90:	4668      	mov	r0, sp
    cf92:	0c0a      	lsrs	r2, r1, #16
    cf94:	7042      	strb	r2, [r0, #1]
		bc[2] = (uint8)(adr >> 8);
    cf96:	0a0a      	lsrs	r2, r1, #8
    cf98:	7082      	strb	r2, [r0, #2]
		bc[4] = (uint8)(sz >> 8);
    cf9a:	0a1a      	lsrs	r2, r3, #8
		bc[3] = (uint8)adr;
    cf9c:	70c1      	strb	r1, [r0, #3]
		bc[4] = (uint8)(sz >> 8);
    cf9e:	7102      	strb	r2, [r0, #4]
		bc[5] = (uint8)(sz);
    cfa0:	7143      	strb	r3, [r0, #5]
		len = 7;
    cfa2:	2507      	movs	r5, #7
		break;
    cfa4:	e79b      	b.n	cede <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 8);
    cfa6:	0a0b      	lsrs	r3, r1, #8
    cfa8:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    cfaa:	2d00      	cmp	r5, #0
    cfac:	d002      	beq.n	cfb4 <spi_cmd+0x100>
    cfae:	2080      	movs	r0, #128	; 0x80
    cfb0:	4240      	negs	r0, r0
    cfb2:	4303      	orrs	r3, r0
    cfb4:	4668      	mov	r0, sp
    cfb6:	7043      	strb	r3, [r0, #1]
		bc[3] = (uint8)(u32data >> 24);
    cfb8:	0e13      	lsrs	r3, r2, #24
    cfba:	70c3      	strb	r3, [r0, #3]
		bc[4] = (uint8)(u32data >> 16);
    cfbc:	0c13      	lsrs	r3, r2, #16
    cfbe:	7103      	strb	r3, [r0, #4]
		bc[5] = (uint8)(u32data >> 8);
    cfc0:	0a13      	lsrs	r3, r2, #8
		bc[2] = (uint8)(adr);
    cfc2:	7081      	strb	r1, [r0, #2]
		bc[5] = (uint8)(u32data >> 8);
    cfc4:	7143      	strb	r3, [r0, #5]
		bc[6] = (uint8)(u32data);
    cfc6:	7182      	strb	r2, [r0, #6]
		len = 8;
    cfc8:	2508      	movs	r5, #8
		break;
    cfca:	e788      	b.n	cede <spi_cmd+0x2a>
		bc[1] = (uint8)(adr >> 8);
    cfcc:	0a0b      	lsrs	r3, r1, #8
    cfce:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    cfd0:	2d00      	cmp	r5, #0
    cfd2:	d002      	beq.n	cfda <spi_cmd+0x126>
    cfd4:	2280      	movs	r2, #128	; 0x80
    cfd6:	4252      	negs	r2, r2
    cfd8:	4313      	orrs	r3, r2
    cfda:	466a      	mov	r2, sp
    cfdc:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    cfde:	7091      	strb	r1, [r2, #2]
		bc[3] = 0x00;
    cfe0:	2300      	movs	r3, #0
    cfe2:	466a      	mov	r2, sp
		len = 5;
    cfe4:	2505      	movs	r5, #5
		bc[3] = 0x00;
    cfe6:	70d3      	strb	r3, [r2, #3]
		break;
    cfe8:	e779      	b.n	cede <spi_cmd+0x2a>
	switch (cmd) {
    cfea:	2000      	movs	r0, #0
    cfec:	e797      	b.n	cf1e <spi_cmd+0x6a>
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	00016334 	.word	0x00016334
    cff4:	20000900 	.word	0x20000900
    cff8:	0000b6e1 	.word	0x0000b6e1
    cffc:	00016378 	.word	0x00016378
    d000:	00013de9 	.word	0x00013de9
    d004:	00015cb0 	.word	0x00015cb0
    d008:	00013f05 	.word	0x00013f05
    d00c:	00016808 	.word	0x00016808
    d010:	00013e1d 	.word	0x00013e1d
    d014:	00016404 	.word	0x00016404

0000d018 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    d018:	b5f0      	push	{r4, r5, r6, r7, lr}
    d01a:	464e      	mov	r6, r9
    d01c:	46de      	mov	lr, fp
    d01e:	4657      	mov	r7, sl
    d020:	4645      	mov	r5, r8
    d022:	b5e0      	push	{r5, r6, r7, lr}
    d024:	b085      	sub	sp, #20
    d026:	4681      	mov	r9, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    d028:	0003      	movs	r3, r0
	spi.pu8InBuf = NULL;
    d02a:	ac01      	add	r4, sp, #4
	if ((cmd == CMD_RESET) ||
    d02c:	28cf      	cmp	r0, #207	; 0xcf
    d02e:	d03c      	beq.n	d0aa <spi_cmd_rsp+0x92>
    d030:	333b      	adds	r3, #59	; 0x3b
    d032:	b2db      	uxtb	r3, r3
    d034:	2b01      	cmp	r3, #1
    d036:	d938      	bls.n	d0aa <spi_cmd_rsp+0x92>
    d038:	466b      	mov	r3, sp
    d03a:	1cde      	adds	r6, r3, #3
    d03c:	4b30      	ldr	r3, [pc, #192]	; (d100 <spi_cmd_rsp+0xe8>)
    d03e:	4698      	mov	r8, r3
	spi.pu8InBuf = NULL;
    d040:	2300      	movs	r3, #0
    d042:	469b      	mov	fp, r3
	spi.u16Sz = sz;
    d044:	3301      	adds	r3, #1
{
    d046:	250b      	movs	r5, #11
	spi.u16Sz = sz;
    d048:	469a      	mov	sl, r3
	spi.pu8InBuf = NULL;
    d04a:	465b      	mov	r3, fp
    d04c:	6023      	str	r3, [r4, #0]
	spi.u16Sz = sz;
    d04e:	4653      	mov	r3, sl
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d050:	0021      	movs	r1, r4
    d052:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d054:	6066      	str	r6, [r4, #4]
	spi.u16Sz = sz;
    d056:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d058:	47c0      	blx	r8
    d05a:	1e07      	subs	r7, r0, #0

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d05c:	d135      	bne.n	d0ca <spi_cmd_rsp+0xb2>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    d05e:	7833      	ldrb	r3, [r6, #0]
    d060:	454b      	cmp	r3, r9
    d062:	d003      	beq.n	d06c <spi_cmd_rsp+0x54>
    d064:	3d01      	subs	r5, #1
    d066:	b2ed      	uxtb	r5, r5
    d068:	2d00      	cmp	r5, #0
    d06a:	d1ee      	bne.n	d04a <spi_cmd_rsp+0x32>
	spi.pu8InBuf = NULL;
    d06c:	2300      	movs	r3, #0
    d06e:	469a      	mov	sl, r3
	spi.u16Sz = sz;
    d070:	3301      	adds	r3, #1
    d072:	250b      	movs	r5, #11
    d074:	4699      	mov	r9, r3
	spi.pu8InBuf = NULL;
    d076:	4653      	mov	r3, sl
    d078:	6023      	str	r3, [r4, #0]
	spi.u16Sz = sz;
    d07a:	464b      	mov	r3, r9
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d07c:	0021      	movs	r1, r4
    d07e:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d080:	6066      	str	r6, [r4, #4]
	spi.u16Sz = sz;
    d082:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d084:	47c0      	blx	r8
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d086:	2800      	cmp	r0, #0
    d088:	d12d      	bne.n	d0e6 <spi_cmd_rsp+0xce>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    d08a:	7833      	ldrb	r3, [r6, #0]
    d08c:	2b00      	cmp	r3, #0
    d08e:	d003      	beq.n	d098 <spi_cmd_rsp+0x80>
    d090:	3d01      	subs	r5, #1
    d092:	b2ed      	uxtb	r5, r5
    d094:	2d00      	cmp	r5, #0
    d096:	d1ee      	bne.n	d076 <spi_cmd_rsp+0x5e>
	sint8 result = N_OK;
    d098:	2701      	movs	r7, #1

_fail_:

	return result;
}
    d09a:	0038      	movs	r0, r7
    d09c:	b005      	add	sp, #20
    d09e:	bc3c      	pop	{r2, r3, r4, r5}
    d0a0:	4690      	mov	r8, r2
    d0a2:	4699      	mov	r9, r3
    d0a4:	46a2      	mov	sl, r4
    d0a6:	46ab      	mov	fp, r5
    d0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi.pu8InBuf = NULL;
    d0aa:	2300      	movs	r3, #0
    d0ac:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
    d0ae:	466b      	mov	r3, sp
    d0b0:	1cde      	adds	r6, r3, #3
	spi.u16Sz = sz;
    d0b2:	2301      	movs	r3, #1
    d0b4:	8123      	strh	r3, [r4, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d0b6:	4b12      	ldr	r3, [pc, #72]	; (d100 <spi_cmd_rsp+0xe8>)
    d0b8:	0021      	movs	r1, r4
    d0ba:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d0bc:	6066      	str	r6, [r4, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d0be:	4698      	mov	r8, r3
    d0c0:	4798      	blx	r3
			result = N_FAIL;
    d0c2:	2700      	movs	r7, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d0c4:	2800      	cmp	r0, #0
    d0c6:	d0bb      	beq.n	d040 <spi_cmd_rsp+0x28>
    d0c8:	e7e7      	b.n	d09a <spi_cmd_rsp+0x82>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    d0ca:	22b1      	movs	r2, #177	; 0xb1
    d0cc:	490d      	ldr	r1, [pc, #52]	; (d104 <spi_cmd_rsp+0xec>)
    d0ce:	0052      	lsls	r2, r2, #1
    d0d0:	4b0d      	ldr	r3, [pc, #52]	; (d108 <spi_cmd_rsp+0xf0>)
    d0d2:	480e      	ldr	r0, [pc, #56]	; (d10c <spi_cmd_rsp+0xf4>)
    d0d4:	4798      	blx	r3
    d0d6:	4b0e      	ldr	r3, [pc, #56]	; (d110 <spi_cmd_rsp+0xf8>)
    d0d8:	480e      	ldr	r0, [pc, #56]	; (d114 <spi_cmd_rsp+0xfc>)
    d0da:	4798      	blx	r3
    d0dc:	200d      	movs	r0, #13
    d0de:	4b0e      	ldr	r3, [pc, #56]	; (d118 <spi_cmd_rsp+0x100>)
    d0e0:	4798      	blx	r3
			result = N_FAIL;
    d0e2:	2700      	movs	r7, #0
			goto _fail_;
    d0e4:	e7d9      	b.n	d09a <spi_cmd_rsp+0x82>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    d0e6:	22b8      	movs	r2, #184	; 0xb8
    d0e8:	4906      	ldr	r1, [pc, #24]	; (d104 <spi_cmd_rsp+0xec>)
    d0ea:	0052      	lsls	r2, r2, #1
    d0ec:	4b06      	ldr	r3, [pc, #24]	; (d108 <spi_cmd_rsp+0xf0>)
    d0ee:	4807      	ldr	r0, [pc, #28]	; (d10c <spi_cmd_rsp+0xf4>)
    d0f0:	4798      	blx	r3
    d0f2:	4b07      	ldr	r3, [pc, #28]	; (d110 <spi_cmd_rsp+0xf8>)
    d0f4:	4807      	ldr	r0, [pc, #28]	; (d114 <spi_cmd_rsp+0xfc>)
    d0f6:	4798      	blx	r3
    d0f8:	4b07      	ldr	r3, [pc, #28]	; (d118 <spi_cmd_rsp+0x100>)
    d0fa:	200d      	movs	r0, #13
    d0fc:	4798      	blx	r3
			goto _fail_;
    d0fe:	e7cc      	b.n	d09a <spi_cmd_rsp+0x82>
    d100:	0000b6e1 	.word	0x0000b6e1
    d104:	00016390 	.word	0x00016390
    d108:	00013de9 	.word	0x00013de9
    d10c:	00015cb0 	.word	0x00015cb0
    d110:	00013f05 	.word	0x00013f05
    d114:	00016834 	.word	0x00016834
    d118:	00013e1d 	.word	0x00013e1d

0000d11c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d11e:	4645      	mov	r5, r8
    d120:	4657      	mov	r7, sl
    d122:	464e      	mov	r6, r9
    d124:	46de      	mov	lr, fp
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    d126:	2300      	movs	r3, #0
{
    d128:	b5e0      	push	{r5, r6, r7, lr}
    d12a:	b08b      	sub	sp, #44	; 0x2c
	ix = 0;
    d12c:	9300      	str	r3, [sp, #0]
    d12e:	ab04      	add	r3, sp, #16
    d130:	1ddf      	adds	r7, r3, #7
    d132:	4b46      	ldr	r3, [pc, #280]	; (d24c <spi_data_read+0x130>)
{
    d134:	4688      	mov	r8, r1
    d136:	4699      	mov	r9, r3
    d138:	9003      	str	r0, [sp, #12]
    d13a:	9202      	str	r2, [sp, #8]
    d13c:	ad07      	add	r5, sp, #28
    d13e:	2280      	movs	r2, #128	; 0x80
    d140:	4643      	mov	r3, r8
    d142:	0192      	lsls	r2, r2, #6
    d144:	4590      	cmp	r8, r2
    d146:	d901      	bls.n	d14c <spi_data_read+0x30>
    d148:	4b41      	ldr	r3, [pc, #260]	; (d250 <spi_data_read+0x134>)
    d14a:	881b      	ldrh	r3, [r3, #0]
    d14c:	b29b      	uxth	r3, r3
    d14e:	9301      	str	r3, [sp, #4]
	spi.pu8InBuf = NULL;
    d150:	2300      	movs	r3, #0
    d152:	469b      	mov	fp, r3
	spi.u16Sz = sz;
    d154:	3301      	adds	r3, #1
			nbytes = DATA_PKT_SZ;

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    d156:	240a      	movs	r4, #10
	spi.u16Sz = sz;
    d158:	469a      	mov	sl, r3
	spi.pu8InBuf = NULL;
    d15a:	465b      	mov	r3, fp
    d15c:	602b      	str	r3, [r5, #0]
	spi.u16Sz = sz;
    d15e:	4653      	mov	r3, sl
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d160:	0029      	movs	r1, r5
    d162:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d164:	606f      	str	r7, [r5, #4]
	spi.u16Sz = sz;
    d166:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d168:	47c8      	blx	r9
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d16a:	2800      	cmp	r0, #0
    d16c:	d141      	bne.n	d1f2 <spi_data_read+0xd6>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    d16e:	783b      	ldrb	r3, [r7, #0]
    d170:	091b      	lsrs	r3, r3, #4
    d172:	2b0f      	cmp	r3, #15
    d174:	d017      	beq.n	d1a6 <spi_data_read+0x8a>
    d176:	3c01      	subs	r4, #1
    d178:	b224      	sxth	r4, r4
				break;
		} while (retry--);
    d17a:	1c63      	adds	r3, r4, #1
    d17c:	d1ed      	bne.n	d15a <spi_data_read+0x3e>
    d17e:	0006      	movs	r6, r0

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    d180:	4a34      	ldr	r2, [pc, #208]	; (d254 <spi_data_read+0x138>)
    d182:	4935      	ldr	r1, [pc, #212]	; (d258 <spi_data_read+0x13c>)
    d184:	4c35      	ldr	r4, [pc, #212]	; (d25c <spi_data_read+0x140>)
    d186:	4836      	ldr	r0, [pc, #216]	; (d260 <spi_data_read+0x144>)
    d188:	47a0      	blx	r4
    d18a:	7839      	ldrb	r1, [r7, #0]
    d18c:	4835      	ldr	r0, [pc, #212]	; (d264 <spi_data_read+0x148>)
    d18e:	47a0      	blx	r4
    d190:	200d      	movs	r0, #13
    d192:	4b35      	ldr	r3, [pc, #212]	; (d268 <spi_data_read+0x14c>)
    d194:	4798      	blx	r3
		sz -= nbytes;

	} while (sz);

	return result;
}
    d196:	0030      	movs	r0, r6
    d198:	b00b      	add	sp, #44	; 0x2c
    d19a:	bc3c      	pop	{r2, r3, r4, r5}
    d19c:	4690      	mov	r8, r2
    d19e:	4699      	mov	r9, r3
    d1a0:	46a2      	mov	sl, r4
    d1a2:	46ab      	mov	fp, r5
    d1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1a6:	0006      	movs	r6, r0
		if (retry <= 0) {
    d1a8:	2c00      	cmp	r4, #0
    d1aa:	d0e9      	beq.n	d180 <spi_data_read+0x64>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    d1ac:	9a00      	ldr	r2, [sp, #0]
    d1ae:	9b03      	ldr	r3, [sp, #12]
    d1b0:	4694      	mov	ip, r2
    d1b2:	4463      	add	r3, ip
	spi.pu8OutBuf = b;
    d1b4:	606b      	str	r3, [r5, #4]
	spi.u16Sz = sz;
    d1b6:	466b      	mov	r3, sp
    d1b8:	889b      	ldrh	r3, [r3, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d1ba:	0029      	movs	r1, r5
    d1bc:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    d1be:	602e      	str	r6, [r5, #0]
	spi.u16Sz = sz;
    d1c0:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d1c2:	47c8      	blx	r9
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    d1c4:	2800      	cmp	r0, #0
    d1c6:	d133      	bne.n	d230 <spi_data_read+0x114>
		if(!clockless)
    d1c8:	9b02      	ldr	r3, [sp, #8]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d103      	bne.n	d1d6 <spi_data_read+0xba>
			if (!gu8Crc_off) {
    d1ce:	4b27      	ldr	r3, [pc, #156]	; (d26c <spi_data_read+0x150>)
    d1d0:	781b      	ldrb	r3, [r3, #0]
    d1d2:	2b00      	cmp	r3, #0
    d1d4:	d01a      	beq.n	d20c <spi_data_read+0xf0>
		ix += nbytes;
    d1d6:	9901      	ldr	r1, [sp, #4]
    d1d8:	9b00      	ldr	r3, [sp, #0]
    d1da:	468c      	mov	ip, r1
    d1dc:	4463      	add	r3, ip
    d1de:	b21b      	sxth	r3, r3
    d1e0:	9300      	str	r3, [sp, #0]
		sz -= nbytes;
    d1e2:	4643      	mov	r3, r8
    d1e4:	1a5b      	subs	r3, r3, r1
    d1e6:	b29b      	uxth	r3, r3
    d1e8:	4698      	mov	r8, r3
	} while (sz);
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	d1a7      	bne.n	d13e <spi_data_read+0x22>
    d1ee:	2601      	movs	r6, #1
	return result;
    d1f0:	e7d1      	b.n	d196 <spi_data_read+0x7a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    d1f2:	4a1f      	ldr	r2, [pc, #124]	; (d270 <spi_data_read+0x154>)
    d1f4:	4918      	ldr	r1, [pc, #96]	; (d258 <spi_data_read+0x13c>)
    d1f6:	481a      	ldr	r0, [pc, #104]	; (d260 <spi_data_read+0x144>)
    d1f8:	4b18      	ldr	r3, [pc, #96]	; (d25c <spi_data_read+0x140>)
    d1fa:	4798      	blx	r3
    d1fc:	481d      	ldr	r0, [pc, #116]	; (d274 <spi_data_read+0x158>)
    d1fe:	4b1e      	ldr	r3, [pc, #120]	; (d278 <spi_data_read+0x15c>)
    d200:	4798      	blx	r3
    d202:	200d      	movs	r0, #13
    d204:	4b18      	ldr	r3, [pc, #96]	; (d268 <spi_data_read+0x14c>)
    d206:	4798      	blx	r3
    d208:	2600      	movs	r6, #0
    d20a:	e7c4      	b.n	d196 <spi_data_read+0x7a>
	spi.pu8InBuf = NULL;
    d20c:	9b02      	ldr	r3, [sp, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d20e:	0029      	movs	r1, r5
	spi.pu8InBuf = NULL;
    d210:	602b      	str	r3, [r5, #0]
	spi.pu8OutBuf = b;
    d212:	ab06      	add	r3, sp, #24
    d214:	606b      	str	r3, [r5, #4]
	spi.u16Sz = sz;
    d216:	2302      	movs	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d218:	2003      	movs	r0, #3
	spi.u16Sz = sz;
    d21a:	812b      	strh	r3, [r5, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d21c:	47c8      	blx	r9
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    d21e:	2800      	cmp	r0, #0
    d220:	d0d9      	beq.n	d1d6 <spi_data_read+0xba>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    d222:	4a16      	ldr	r2, [pc, #88]	; (d27c <spi_data_read+0x160>)
    d224:	490c      	ldr	r1, [pc, #48]	; (d258 <spi_data_read+0x13c>)
    d226:	480e      	ldr	r0, [pc, #56]	; (d260 <spi_data_read+0x144>)
    d228:	4b0c      	ldr	r3, [pc, #48]	; (d25c <spi_data_read+0x140>)
    d22a:	4798      	blx	r3
    d22c:	4814      	ldr	r0, [pc, #80]	; (d280 <spi_data_read+0x164>)
    d22e:	e7e6      	b.n	d1fe <spi_data_read+0xe2>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    d230:	22c5      	movs	r2, #197	; 0xc5
    d232:	4909      	ldr	r1, [pc, #36]	; (d258 <spi_data_read+0x13c>)
    d234:	0092      	lsls	r2, r2, #2
    d236:	4b09      	ldr	r3, [pc, #36]	; (d25c <spi_data_read+0x140>)
    d238:	4809      	ldr	r0, [pc, #36]	; (d260 <spi_data_read+0x144>)
    d23a:	4798      	blx	r3
    d23c:	4b0e      	ldr	r3, [pc, #56]	; (d278 <spi_data_read+0x15c>)
    d23e:	4811      	ldr	r0, [pc, #68]	; (d284 <spi_data_read+0x168>)
    d240:	4798      	blx	r3
    d242:	4b09      	ldr	r3, [pc, #36]	; (d268 <spi_data_read+0x14c>)
    d244:	200d      	movs	r0, #13
    d246:	4798      	blx	r3
			break;
    d248:	e7a5      	b.n	d196 <spi_data_read+0x7a>
    d24a:	46c0      	nop			; (mov r8, r8)
    d24c:	0000b6e1 	.word	0x0000b6e1
    d250:	00016370 	.word	0x00016370
    d254:	0000030b 	.word	0x0000030b
    d258:	0001639c 	.word	0x0001639c
    d25c:	00013de9 	.word	0x00013de9
    d260:	00015cb0 	.word	0x00015cb0
    d264:	0001689c 	.word	0x0001689c
    d268:	00013e1d 	.word	0x00013e1d
    d26c:	20000900 	.word	0x20000900
    d270:	000002ff 	.word	0x000002ff
    d274:	00016868 	.word	0x00016868
    d278:	00013f05 	.word	0x00013f05
    d27c:	0000031f 	.word	0x0000031f
    d280:	000168fc 	.word	0x000168fc
    d284:	000168cc 	.word	0x000168cc

0000d288 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    d288:	b5f0      	push	{r4, r5, r6, r7, lr}
    d28a:	464e      	mov	r6, r9
    d28c:	46de      	mov	lr, fp
    d28e:	4657      	mov	r7, sl
    d290:	4645      	mov	r5, r8
    d292:	b5e0      	push	{r5, r6, r7, lr}
    d294:	b087      	sub	sp, #28
    d296:	0006      	movs	r6, r0
    d298:	9103      	str	r1, [sp, #12]
    d29a:	2830      	cmp	r0, #48	; 0x30
    d29c:	d85e      	bhi.n	d35c <spi_write_reg+0xd4>
    d29e:	4b31      	ldr	r3, [pc, #196]	; (d364 <spi_write_reg+0xdc>)
    d2a0:	781b      	ldrb	r3, [r3, #0]
    d2a2:	b2db      	uxtb	r3, r3
    d2a4:	9304      	str	r3, [sp, #16]
    d2a6:	2230      	movs	r2, #48	; 0x30
    d2a8:	2300      	movs	r3, #0
    d2aa:	42b2      	cmp	r2, r6
    d2ac:	415b      	adcs	r3, r3
    d2ae:	250a      	movs	r5, #10
    d2b0:	b2db      	uxtb	r3, r3
    d2b2:	9305      	str	r3, [sp, #20]
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    d2b4:	9b05      	ldr	r3, [sp, #20]
    d2b6:	9a03      	ldr	r2, [sp, #12]
    d2b8:	9300      	str	r3, [sp, #0]
    d2ba:	0031      	movs	r1, r6
    d2bc:	2304      	movs	r3, #4
    d2be:	9804      	ldr	r0, [sp, #16]
    d2c0:	4c29      	ldr	r4, [pc, #164]	; (d368 <spi_write_reg+0xe0>)
    d2c2:	47a0      	blx	r4
    d2c4:	4680      	mov	r8, r0
	if (result != N_OK) {
    d2c6:	2801      	cmp	r0, #1
    d2c8:	d035      	beq.n	d336 <spi_write_reg+0xae>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    d2ca:	4b28      	ldr	r3, [pc, #160]	; (d36c <spi_write_reg+0xe4>)
    d2cc:	4a28      	ldr	r2, [pc, #160]	; (d370 <spi_write_reg+0xe8>)
    d2ce:	469b      	mov	fp, r3
    d2d0:	4b28      	ldr	r3, [pc, #160]	; (d374 <spi_write_reg+0xec>)
    d2d2:	4659      	mov	r1, fp
    d2d4:	0018      	movs	r0, r3
    d2d6:	4c28      	ldr	r4, [pc, #160]	; (d378 <spi_write_reg+0xf0>)
    d2d8:	469a      	mov	sl, r3
    d2da:	47a0      	blx	r4
    d2dc:	0031      	movs	r1, r6
    d2de:	4827      	ldr	r0, [pc, #156]	; (d37c <spi_write_reg+0xf4>)
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    d2e0:	47a0      	blx	r4
    d2e2:	4b27      	ldr	r3, [pc, #156]	; (d380 <spi_write_reg+0xf8>)
    d2e4:	200d      	movs	r0, #13
    d2e6:	4699      	mov	r9, r3
    d2e8:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    d2ea:	2001      	movs	r0, #1
    d2ec:	4b25      	ldr	r3, [pc, #148]	; (d384 <spi_write_reg+0xfc>)
    d2ee:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d2f0:	2300      	movs	r3, #0
    d2f2:	2200      	movs	r2, #0
    d2f4:	2100      	movs	r1, #0
    d2f6:	9300      	str	r3, [sp, #0]
    d2f8:	20cf      	movs	r0, #207	; 0xcf
    d2fa:	4f1b      	ldr	r7, [pc, #108]	; (d368 <spi_write_reg+0xe0>)
    d2fc:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d2fe:	4b22      	ldr	r3, [pc, #136]	; (d388 <spi_write_reg+0x100>)
    d300:	20cf      	movs	r0, #207	; 0xcf
    d302:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    d304:	4a21      	ldr	r2, [pc, #132]	; (d38c <spi_write_reg+0x104>)
    d306:	4659      	mov	r1, fp
    d308:	4650      	mov	r0, sl
    d30a:	47a0      	blx	r4
    d30c:	0029      	movs	r1, r5
    d30e:	9b03      	ldr	r3, [sp, #12]
    d310:	0032      	movs	r2, r6
    d312:	481f      	ldr	r0, [pc, #124]	; (d390 <spi_write_reg+0x108>)
    d314:	47a0      	blx	r4
    d316:	200d      	movs	r0, #13
    d318:	47c8      	blx	r9
    d31a:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    d31c:	2001      	movs	r0, #1
    d31e:	4b19      	ldr	r3, [pc, #100]	; (d384 <spi_write_reg+0xfc>)
    d320:	4798      	blx	r3
		retry--;
		if(retry) goto _RETRY_;
    d322:	2d00      	cmp	r5, #0
    d324:	d1c6      	bne.n	d2b4 <spi_write_reg+0x2c>
	}

	return result;
}
    d326:	4640      	mov	r0, r8
    d328:	b007      	add	sp, #28
    d32a:	bc3c      	pop	{r2, r3, r4, r5}
    d32c:	4690      	mov	r8, r2
    d32e:	4699      	mov	r9, r3
    d330:	46a2      	mov	sl, r4
    d332:	46ab      	mov	fp, r5
    d334:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
    d336:	9804      	ldr	r0, [sp, #16]
    d338:	4b13      	ldr	r3, [pc, #76]	; (d388 <spi_write_reg+0x100>)
    d33a:	4798      	blx	r3
    d33c:	4680      	mov	r8, r0
	if (result != N_OK) {
    d33e:	2801      	cmp	r0, #1
    d340:	d0f1      	beq.n	d326 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    d342:	4b0a      	ldr	r3, [pc, #40]	; (d36c <spi_write_reg+0xe4>)
    d344:	22e7      	movs	r2, #231	; 0xe7
    d346:	469b      	mov	fp, r3
    d348:	4b0a      	ldr	r3, [pc, #40]	; (d374 <spi_write_reg+0xec>)
    d34a:	4659      	mov	r1, fp
    d34c:	0092      	lsls	r2, r2, #2
    d34e:	0018      	movs	r0, r3
    d350:	4c09      	ldr	r4, [pc, #36]	; (d378 <spi_write_reg+0xf0>)
    d352:	469a      	mov	sl, r3
    d354:	47a0      	blx	r4
    d356:	0031      	movs	r1, r6
    d358:	480e      	ldr	r0, [pc, #56]	; (d394 <spi_write_reg+0x10c>)
    d35a:	e7c1      	b.n	d2e0 <spi_write_reg+0x58>
    d35c:	4b0e      	ldr	r3, [pc, #56]	; (d398 <spi_write_reg+0x110>)
    d35e:	781b      	ldrb	r3, [r3, #0]
    d360:	e79f      	b.n	d2a2 <spi_write_reg+0x1a>
    d362:	46c0      	nop			; (mov r8, r8)
    d364:	00016372 	.word	0x00016372
    d368:	0000ceb5 	.word	0x0000ceb5
    d36c:	000163bc 	.word	0x000163bc
    d370:	00000396 	.word	0x00000396
    d374:	00015cb0 	.word	0x00015cb0
    d378:	00013de9 	.word	0x00013de9
    d37c:	000169c8 	.word	0x000169c8
    d380:	00013e1d 	.word	0x00013e1d
    d384:	0000b549 	.word	0x0000b549
    d388:	0000d019 	.word	0x0000d019
    d38c:	000003af 	.word	0x000003af
    d390:	00016a2c 	.word	0x00016a2c
    d394:	000169f4 	.word	0x000169f4
    d398:	00016373 	.word	0x00016373

0000d39c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    d39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d39e:	464e      	mov	r6, r9
    d3a0:	46de      	mov	lr, fp
    d3a2:	4657      	mov	r7, sl
    d3a4:	4645      	mov	r5, r8
    d3a6:	b5e0      	push	{r5, r6, r7, lr}
    d3a8:	b089      	sub	sp, #36	; 0x24
    d3aa:	0006      	movs	r6, r0
    d3ac:	9105      	str	r1, [sp, #20]
    d3ae:	28ff      	cmp	r0, #255	; 0xff
    d3b0:	d868      	bhi.n	d484 <spi_read_reg+0xe8>
    d3b2:	4b3e      	ldr	r3, [pc, #248]	; (d4ac <spi_read_reg+0x110>)
    d3b4:	781b      	ldrb	r3, [r3, #0]
    d3b6:	b2db      	uxtb	r3, r3
    d3b8:	9303      	str	r3, [sp, #12]
    d3ba:	22ff      	movs	r2, #255	; 0xff
    d3bc:	2300      	movs	r3, #0
    d3be:	42b2      	cmp	r2, r6
    d3c0:	415b      	adcs	r3, r3
    d3c2:	b2db      	uxtb	r3, r3
    d3c4:	9304      	str	r3, [sp, #16]
    d3c6:	250a      	movs	r5, #10
    d3c8:	e02c      	b.n	d424 <spi_read_reg+0x88>
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    d3ca:	4b39      	ldr	r3, [pc, #228]	; (d4b0 <spi_read_reg+0x114>)
    d3cc:	4a39      	ldr	r2, [pc, #228]	; (d4b4 <spi_read_reg+0x118>)
    d3ce:	469b      	mov	fp, r3
    d3d0:	4b39      	ldr	r3, [pc, #228]	; (d4b8 <spi_read_reg+0x11c>)
    d3d2:	4659      	mov	r1, fp
    d3d4:	0018      	movs	r0, r3
    d3d6:	4c39      	ldr	r4, [pc, #228]	; (d4bc <spi_read_reg+0x120>)
    d3d8:	4699      	mov	r9, r3
    d3da:	47a0      	blx	r4
    d3dc:	0031      	movs	r1, r6
    d3de:	4838      	ldr	r0, [pc, #224]	; (d4c0 <spi_read_reg+0x124>)
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    d3e0:	47a0      	blx	r4
    d3e2:	4b38      	ldr	r3, [pc, #224]	; (d4c4 <spi_read_reg+0x128>)
    d3e4:	200d      	movs	r0, #13
    d3e6:	4698      	mov	r8, r3
    d3e8:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    d3ea:	2001      	movs	r0, #1
    d3ec:	4b36      	ldr	r3, [pc, #216]	; (d4c8 <spi_read_reg+0x12c>)
    d3ee:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d3f0:	2300      	movs	r3, #0
    d3f2:	2200      	movs	r2, #0
    d3f4:	2100      	movs	r1, #0
    d3f6:	9300      	str	r3, [sp, #0]
    d3f8:	20cf      	movs	r0, #207	; 0xcf
    d3fa:	4f34      	ldr	r7, [pc, #208]	; (d4cc <spi_read_reg+0x130>)
    d3fc:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d3fe:	4b34      	ldr	r3, [pc, #208]	; (d4d0 <spi_read_reg+0x134>)
    d400:	20cf      	movs	r0, #207	; 0xcf
    d402:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    d404:	4a33      	ldr	r2, [pc, #204]	; (d4d4 <spi_read_reg+0x138>)
    d406:	4659      	mov	r1, fp
    d408:	4648      	mov	r0, r9
    d40a:	47a0      	blx	r4
    d40c:	0029      	movs	r1, r5
    d40e:	0032      	movs	r2, r6
    d410:	4831      	ldr	r0, [pc, #196]	; (d4d8 <spi_read_reg+0x13c>)
    d412:	47a0      	blx	r4
    d414:	200d      	movs	r0, #13
    d416:	47c0      	blx	r8
    d418:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    d41a:	2001      	movs	r0, #1
    d41c:	4b2a      	ldr	r3, [pc, #168]	; (d4c8 <spi_read_reg+0x12c>)
    d41e:	4798      	blx	r3
		retry--;
		if(retry) goto _RETRY_;
    d420:	2d00      	cmp	r5, #0
    d422:	d027      	beq.n	d474 <spi_read_reg+0xd8>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    d424:	9b04      	ldr	r3, [sp, #16]
    d426:	2200      	movs	r2, #0
    d428:	9300      	str	r3, [sp, #0]
    d42a:	0031      	movs	r1, r6
    d42c:	2304      	movs	r3, #4
    d42e:	9803      	ldr	r0, [sp, #12]
    d430:	4c26      	ldr	r4, [pc, #152]	; (d4cc <spi_read_reg+0x130>)
    d432:	47a0      	blx	r4
    d434:	4682      	mov	sl, r0
	if (result != N_OK) {
    d436:	2801      	cmp	r0, #1
    d438:	d1c7      	bne.n	d3ca <spi_read_reg+0x2e>
	result = spi_cmd_rsp(cmd);
    d43a:	9803      	ldr	r0, [sp, #12]
    d43c:	4b24      	ldr	r3, [pc, #144]	; (d4d0 <spi_read_reg+0x134>)
    d43e:	4798      	blx	r3
    d440:	4682      	mov	sl, r0
	if (result != N_OK) {
    d442:	2801      	cmp	r0, #1
    d444:	d00b      	beq.n	d45e <spi_read_reg+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    d446:	4b1a      	ldr	r3, [pc, #104]	; (d4b0 <spi_read_reg+0x114>)
    d448:	4a24      	ldr	r2, [pc, #144]	; (d4dc <spi_read_reg+0x140>)
    d44a:	469b      	mov	fp, r3
    d44c:	4b1a      	ldr	r3, [pc, #104]	; (d4b8 <spi_read_reg+0x11c>)
    d44e:	4659      	mov	r1, fp
    d450:	0018      	movs	r0, r3
    d452:	4c1a      	ldr	r4, [pc, #104]	; (d4bc <spi_read_reg+0x120>)
    d454:	4699      	mov	r9, r3
    d456:	47a0      	blx	r4
    d458:	0031      	movs	r1, r6
    d45a:	4821      	ldr	r0, [pc, #132]	; (d4e0 <spi_read_reg+0x144>)
    d45c:	e7c0      	b.n	d3e0 <spi_read_reg+0x44>
	result = spi_data_read(&tmp[0], 4, clockless);
    d45e:	9a04      	ldr	r2, [sp, #16]
    d460:	2104      	movs	r1, #4
    d462:	a807      	add	r0, sp, #28
    d464:	4b1f      	ldr	r3, [pc, #124]	; (d4e4 <spi_read_reg+0x148>)
    d466:	4798      	blx	r3
    d468:	4682      	mov	sl, r0
	if (result != N_OK) {
    d46a:	2801      	cmp	r0, #1
    d46c:	d10d      	bne.n	d48a <spi_read_reg+0xee>
	*u32data = tmp[0] |
    d46e:	9b05      	ldr	r3, [sp, #20]
    d470:	9a07      	ldr	r2, [sp, #28]
    d472:	601a      	str	r2, [r3, #0]
	}
		
	return result;
}
    d474:	4650      	mov	r0, sl
    d476:	b009      	add	sp, #36	; 0x24
    d478:	bc3c      	pop	{r2, r3, r4, r5}
    d47a:	4690      	mov	r8, r2
    d47c:	4699      	mov	r9, r3
    d47e:	46a2      	mov	sl, r4
    d480:	46ab      	mov	fp, r5
    d482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d484:	4b18      	ldr	r3, [pc, #96]	; (d4e8 <spi_read_reg+0x14c>)
    d486:	781b      	ldrb	r3, [r3, #0]
    d488:	e795      	b.n	d3b6 <spi_read_reg+0x1a>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    d48a:	4b09      	ldr	r3, [pc, #36]	; (d4b0 <spi_read_reg+0x114>)
    d48c:	4a17      	ldr	r2, [pc, #92]	; (d4ec <spi_read_reg+0x150>)
    d48e:	469b      	mov	fp, r3
    d490:	4b09      	ldr	r3, [pc, #36]	; (d4b8 <spi_read_reg+0x11c>)
    d492:	4659      	mov	r1, fp
    d494:	0018      	movs	r0, r3
    d496:	4c09      	ldr	r4, [pc, #36]	; (d4bc <spi_read_reg+0x120>)
    d498:	4699      	mov	r9, r3
    d49a:	47a0      	blx	r4
    d49c:	4b14      	ldr	r3, [pc, #80]	; (d4f0 <spi_read_reg+0x154>)
    d49e:	4815      	ldr	r0, [pc, #84]	; (d4f4 <spi_read_reg+0x158>)
    d4a0:	4798      	blx	r3
    d4a2:	4b08      	ldr	r3, [pc, #32]	; (d4c4 <spi_read_reg+0x128>)
    d4a4:	200d      	movs	r0, #13
    d4a6:	4698      	mov	r8, r3
    d4a8:	4798      	blx	r3
		goto _FAIL_;
    d4aa:	e79e      	b.n	d3ea <spi_read_reg+0x4e>
    d4ac:	00016374 	.word	0x00016374
    d4b0:	000163dc 	.word	0x000163dc
    d4b4:	00000417 	.word	0x00000417
    d4b8:	00015cb0 	.word	0x00015cb0
    d4bc:	00013de9 	.word	0x00013de9
    d4c0:	00016930 	.word	0x00016930
    d4c4:	00013e1d 	.word	0x00013e1d
    d4c8:	0000b549 	.word	0x0000b549
    d4cc:	0000ceb5 	.word	0x0000ceb5
    d4d0:	0000d019 	.word	0x0000d019
    d4d4:	0000043c 	.word	0x0000043c
    d4d8:	000169b0 	.word	0x000169b0
    d4dc:	0000041d 	.word	0x0000041d
    d4e0:	0001695c 	.word	0x0001695c
    d4e4:	0000d11d 	.word	0x0000d11d
    d4e8:	00016375 	.word	0x00016375
    d4ec:	00000424 	.word	0x00000424
    d4f0:	00013f05 	.word	0x00013f05
    d4f4:	00016990 	.word	0x00016990

0000d4f8 <nm_spi_reset>:
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d4f8:	2300      	movs	r3, #0
{
    d4fa:	b510      	push	{r4, lr}
    d4fc:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d4fe:	9300      	str	r3, [sp, #0]
    d500:	2200      	movs	r2, #0
    d502:	2100      	movs	r1, #0
    d504:	4c04      	ldr	r4, [pc, #16]	; (d518 <nm_spi_reset+0x20>)
    d506:	20cf      	movs	r0, #207	; 0xcf
    d508:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    d50a:	4b04      	ldr	r3, [pc, #16]	; (d51c <nm_spi_reset+0x24>)
    d50c:	20cf      	movs	r0, #207	; 0xcf
    d50e:	4798      	blx	r3
	return M2M_SUCCESS;
}
    d510:	2000      	movs	r0, #0
    d512:	b002      	add	sp, #8
    d514:	bd10      	pop	{r4, pc}
    d516:	46c0      	nop			; (mov r8, r8)
    d518:	0000ceb5 	.word	0x0000ceb5
    d51c:	0000d019 	.word	0x0000d019

0000d520 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    d520:	b5f0      	push	{r4, r5, r6, r7, lr}
    d522:	4645      	mov	r5, r8
    d524:	46de      	mov	lr, fp
    d526:	4657      	mov	r7, sl
    d528:	464e      	mov	r6, r9
	uint32 chipid;
	uint32 reg = 0;
    d52a:	2300      	movs	r3, #0
{
    d52c:	b5e0      	push	{r5, r6, r7, lr}
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    d52e:	4d38      	ldr	r5, [pc, #224]	; (d610 <nm_spi_init+0xf0>)
{
    d530:	b085      	sub	sp, #20

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d532:	a902      	add	r1, sp, #8
    d534:	4837      	ldr	r0, [pc, #220]	; (d614 <nm_spi_init+0xf4>)
    d536:	4c38      	ldr	r4, [pc, #224]	; (d618 <nm_spi_init+0xf8>)
	uint32 reg = 0;
    d538:	9302      	str	r3, [sp, #8]
	gu8Crc_off = 0;
    d53a:	702b      	strb	r3, [r5, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d53c:	47a0      	blx	r4
    d53e:	2800      	cmp	r0, #0
    d540:	d02a      	beq.n	d598 <nm_spi_init+0x78>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    d542:	782b      	ldrb	r3, [r5, #0]
    d544:	2b00      	cmp	r3, #0
    d546:	d019      	beq.n	d57c <nm_spi_init+0x5c>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    d548:	2080      	movs	r0, #128	; 0x80
    d54a:	a901      	add	r1, sp, #4
    d54c:	0140      	lsls	r0, r0, #5
    d54e:	47a0      	blx	r4
    d550:	2800      	cmp	r0, #0
    d552:	d04e      	beq.n	d5f2 <nm_spi_init+0xd2>
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    d554:	a903      	add	r1, sp, #12
    d556:	482f      	ldr	r0, [pc, #188]	; (d614 <nm_spi_init+0xf4>)
    d558:	47a0      	blx	r4
	val32 &= ~(0x7 << 4);
    d55a:	2370      	movs	r3, #112	; 0x70
    d55c:	9903      	ldr	r1, [sp, #12]
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    d55e:	482d      	ldr	r0, [pc, #180]	; (d614 <nm_spi_init+0xf4>)
	val32 &= ~(0x7 << 4);
    d560:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    d562:	3b20      	subs	r3, #32
    d564:	4319      	orrs	r1, r3
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d566:	4b2d      	ldr	r3, [pc, #180]	; (d61c <nm_spi_init+0xfc>)
    d568:	4798      	blx	r3
	return M2M_SUCCESS;
    d56a:	2600      	movs	r6, #0
}
    d56c:	0030      	movs	r0, r6
    d56e:	b005      	add	sp, #20
    d570:	bc3c      	pop	{r2, r3, r4, r5}
    d572:	4690      	mov	r8, r2
    d574:	4699      	mov	r9, r3
    d576:	46a2      	mov	sl, r4
    d578:	46ab      	mov	fp, r5
    d57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		reg &= ~0x70;
    d57c:	9902      	ldr	r1, [sp, #8]
    d57e:	337c      	adds	r3, #124	; 0x7c
    d580:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    d582:	3b2c      	subs	r3, #44	; 0x2c
    d584:	4319      	orrs	r1, r3
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d586:	4823      	ldr	r0, [pc, #140]	; (d614 <nm_spi_init+0xf4>)
    d588:	4b24      	ldr	r3, [pc, #144]	; (d61c <nm_spi_init+0xfc>)
		reg |= (0x5 << 4);
    d58a:	9102      	str	r1, [sp, #8]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d58c:	4798      	blx	r3
    d58e:	1e06      	subs	r6, r0, #0
    d590:	d023      	beq.n	d5da <nm_spi_init+0xba>
		gu8Crc_off = 1;
    d592:	2301      	movs	r3, #1
    d594:	702b      	strb	r3, [r5, #0]
    d596:	e7d7      	b.n	d548 <nm_spi_init+0x28>
		gu8Crc_off = 1;
    d598:	2301      	movs	r3, #1
    d59a:	702b      	strb	r3, [r5, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    d59c:	4b20      	ldr	r3, [pc, #128]	; (d620 <nm_spi_init+0x100>)
    d59e:	4a21      	ldr	r2, [pc, #132]	; (d624 <nm_spi_init+0x104>)
    d5a0:	469b      	mov	fp, r3
    d5a2:	4b21      	ldr	r3, [pc, #132]	; (d628 <nm_spi_init+0x108>)
    d5a4:	4659      	mov	r1, fp
    d5a6:	0018      	movs	r0, r3
    d5a8:	469a      	mov	sl, r3
    d5aa:	4b20      	ldr	r3, [pc, #128]	; (d62c <nm_spi_init+0x10c>)
    d5ac:	4699      	mov	r9, r3
    d5ae:	4798      	blx	r3
    d5b0:	4b1f      	ldr	r3, [pc, #124]	; (d630 <nm_spi_init+0x110>)
    d5b2:	4820      	ldr	r0, [pc, #128]	; (d634 <nm_spi_init+0x114>)
    d5b4:	4698      	mov	r8, r3
    d5b6:	4798      	blx	r3
    d5b8:	200d      	movs	r0, #13
    d5ba:	4f1f      	ldr	r7, [pc, #124]	; (d638 <nm_spi_init+0x118>)
    d5bc:	47b8      	blx	r7
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    d5be:	a902      	add	r1, sp, #8
    d5c0:	4814      	ldr	r0, [pc, #80]	; (d614 <nm_spi_init+0xf4>)
    d5c2:	47a0      	blx	r4
    d5c4:	1e06      	subs	r6, r0, #0
    d5c6:	d1bc      	bne.n	d542 <nm_spi_init+0x22>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    d5c8:	4a1c      	ldr	r2, [pc, #112]	; (d63c <nm_spi_init+0x11c>)
    d5ca:	4659      	mov	r1, fp
    d5cc:	4650      	mov	r0, sl
    d5ce:	47c8      	blx	r9
    d5d0:	481b      	ldr	r0, [pc, #108]	; (d640 <nm_spi_init+0x120>)
    d5d2:	47c0      	blx	r8
    d5d4:	200d      	movs	r0, #13
    d5d6:	47b8      	blx	r7
			return 0;
    d5d8:	e7c8      	b.n	d56c <nm_spi_init+0x4c>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    d5da:	4a1a      	ldr	r2, [pc, #104]	; (d644 <nm_spi_init+0x124>)
    d5dc:	4910      	ldr	r1, [pc, #64]	; (d620 <nm_spi_init+0x100>)
    d5de:	4b13      	ldr	r3, [pc, #76]	; (d62c <nm_spi_init+0x10c>)
    d5e0:	4811      	ldr	r0, [pc, #68]	; (d628 <nm_spi_init+0x108>)
    d5e2:	4798      	blx	r3
    d5e4:	4b12      	ldr	r3, [pc, #72]	; (d630 <nm_spi_init+0x110>)
    d5e6:	4818      	ldr	r0, [pc, #96]	; (d648 <nm_spi_init+0x128>)
    d5e8:	4798      	blx	r3
    d5ea:	4b13      	ldr	r3, [pc, #76]	; (d638 <nm_spi_init+0x118>)
    d5ec:	200d      	movs	r0, #13
    d5ee:	4798      	blx	r3
			return 0;
    d5f0:	e7bc      	b.n	d56c <nm_spi_init+0x4c>
		return M2M_ERR_BUS_FAIL;
    d5f2:	2606      	movs	r6, #6
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    d5f4:	4a15      	ldr	r2, [pc, #84]	; (d64c <nm_spi_init+0x12c>)
    d5f6:	490a      	ldr	r1, [pc, #40]	; (d620 <nm_spi_init+0x100>)
    d5f8:	4b0c      	ldr	r3, [pc, #48]	; (d62c <nm_spi_init+0x10c>)
    d5fa:	480b      	ldr	r0, [pc, #44]	; (d628 <nm_spi_init+0x108>)
    d5fc:	4798      	blx	r3
    d5fe:	4b0c      	ldr	r3, [pc, #48]	; (d630 <nm_spi_init+0x110>)
    d600:	4813      	ldr	r0, [pc, #76]	; (d650 <nm_spi_init+0x130>)
    d602:	4798      	blx	r3
    d604:	200d      	movs	r0, #13
    d606:	4b0c      	ldr	r3, [pc, #48]	; (d638 <nm_spi_init+0x118>)
    d608:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    d60a:	4276      	negs	r6, r6
    d60c:	e7ae      	b.n	d56c <nm_spi_init+0x4c>
    d60e:	46c0      	nop			; (mov r8, r8)
    d610:	20000900 	.word	0x20000900
    d614:	0000e824 	.word	0x0000e824
    d618:	0000d39d 	.word	0x0000d39d
    d61c:	0000d289 	.word	0x0000d289
    d620:	000163f8 	.word	0x000163f8
    d624:	000004c7 	.word	0x000004c7
    d628:	00015cb0 	.word	0x00015cb0
    d62c:	00013de9 	.word	0x00013de9
    d630:	00013f05 	.word	0x00013f05
    d634:	00016504 	.word	0x00016504
    d638:	00013e1d 	.word	0x00013e1d
    d63c:	000004ca 	.word	0x000004ca
    d640:	00016554 	.word	0x00016554
    d644:	000004d4 	.word	0x000004d4
    d648:	00016580 	.word	0x00016580
    d64c:	000004de 	.word	0x000004de
    d650:	000165b4 	.word	0x000165b4

0000d654 <nm_spi_deinit>:
	gu8Crc_off = 0;
    d654:	2200      	movs	r2, #0
    d656:	4b02      	ldr	r3, [pc, #8]	; (d660 <nm_spi_deinit+0xc>)
}
    d658:	2000      	movs	r0, #0
	gu8Crc_off = 0;
    d65a:	701a      	strb	r2, [r3, #0]
}
    d65c:	4770      	bx	lr
    d65e:	46c0      	nop			; (mov r8, r8)
    d660:	20000900 	.word	0x20000900

0000d664 <nm_spi_read_reg>:
{
    d664:	b500      	push	{lr}
    d666:	b083      	sub	sp, #12
	spi_read_reg(u32Addr, &u32Val);
    d668:	a901      	add	r1, sp, #4
    d66a:	4b02      	ldr	r3, [pc, #8]	; (d674 <nm_spi_read_reg+0x10>)
    d66c:	4798      	blx	r3
}
    d66e:	9801      	ldr	r0, [sp, #4]
    d670:	b003      	add	sp, #12
    d672:	bd00      	pop	{pc}
    d674:	0000d39d 	.word	0x0000d39d

0000d678 <nm_spi_read_reg_with_ret>:
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d678:	4b04      	ldr	r3, [pc, #16]	; (d68c <nm_spi_read_reg_with_ret+0x14>)
{
    d67a:	b510      	push	{r4, lr}
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d67c:	4798      	blx	r3
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d67e:	2300      	movs	r3, #0
    d680:	2801      	cmp	r0, #1
    d682:	d101      	bne.n	d688 <nm_spi_read_reg_with_ret+0x10>
}
    d684:	0018      	movs	r0, r3
    d686:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d688:	3b06      	subs	r3, #6
    d68a:	e7fb      	b.n	d684 <nm_spi_read_reg_with_ret+0xc>
    d68c:	0000d39d 	.word	0x0000d39d

0000d690 <nm_spi_write_reg>:
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d690:	4b04      	ldr	r3, [pc, #16]	; (d6a4 <nm_spi_write_reg+0x14>)
{
    d692:	b510      	push	{r4, lr}
	s8Ret = spi_write_reg(u32Addr, u32Val);
    d694:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d696:	2300      	movs	r3, #0
    d698:	2801      	cmp	r0, #1
    d69a:	d101      	bne.n	d6a0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d69c:	0018      	movs	r0, r3
    d69e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d6a0:	3b06      	subs	r3, #6
    d6a2:	e7fb      	b.n	d69c <nm_spi_write_reg+0xc>
    d6a4:	0000d289 	.word	0x0000d289

0000d6a8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6aa:	4657      	mov	r7, sl
    d6ac:	464e      	mov	r6, r9
    d6ae:	4645      	mov	r5, r8
    d6b0:	46de      	mov	lr, fp
	uint8 single_byte_workaround = 0;
    d6b2:	2300      	movs	r3, #0
{
    d6b4:	b5e0      	push	{r5, r6, r7, lr}
    d6b6:	b087      	sub	sp, #28
    d6b8:	9103      	str	r1, [sp, #12]
    d6ba:	0016      	movs	r6, r2
    d6bc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    d6be:	9302      	str	r3, [sp, #8]
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d6c0:	4682      	mov	sl, r0
    d6c2:	e02d      	b.n	d720 <nm_spi_read_block+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    d6c4:	4b3f      	ldr	r3, [pc, #252]	; (d7c4 <nm_spi_read_block+0x11c>)
    d6c6:	4a40      	ldr	r2, [pc, #256]	; (d7c8 <nm_spi_read_block+0x120>)
    d6c8:	469b      	mov	fp, r3
    d6ca:	4b40      	ldr	r3, [pc, #256]	; (d7cc <nm_spi_read_block+0x124>)
    d6cc:	4659      	mov	r1, fp
    d6ce:	0018      	movs	r0, r3
    d6d0:	4c3f      	ldr	r4, [pc, #252]	; (d7d0 <nm_spi_read_block+0x128>)
    d6d2:	4699      	mov	r9, r3
    d6d4:	47a0      	blx	r4
    d6d6:	4651      	mov	r1, sl
    d6d8:	483e      	ldr	r0, [pc, #248]	; (d7d4 <nm_spi_read_block+0x12c>)
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d6da:	47a0      	blx	r4
    d6dc:	4b3e      	ldr	r3, [pc, #248]	; (d7d8 <nm_spi_read_block+0x130>)
    d6de:	200d      	movs	r0, #13
    d6e0:	4698      	mov	r8, r3
    d6e2:	4798      	blx	r3
		nm_bsp_sleep(1);
    d6e4:	2001      	movs	r0, #1
    d6e6:	4b3d      	ldr	r3, [pc, #244]	; (d7dc <nm_spi_read_block+0x134>)
    d6e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d6ea:	2300      	movs	r3, #0
    d6ec:	2200      	movs	r2, #0
    d6ee:	2100      	movs	r1, #0
    d6f0:	9300      	str	r3, [sp, #0]
    d6f2:	20cf      	movs	r0, #207	; 0xcf
    d6f4:	4f3a      	ldr	r7, [pc, #232]	; (d7e0 <nm_spi_read_block+0x138>)
    d6f6:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d6f8:	4b3a      	ldr	r3, [pc, #232]	; (d7e4 <nm_spi_read_block+0x13c>)
    d6fa:	20cf      	movs	r0, #207	; 0xcf
    d6fc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d6fe:	4a3a      	ldr	r2, [pc, #232]	; (d7e8 <nm_spi_read_block+0x140>)
    d700:	4659      	mov	r1, fp
    d702:	4648      	mov	r0, r9
    d704:	47a0      	blx	r4
    d706:	0029      	movs	r1, r5
    d708:	0033      	movs	r3, r6
    d70a:	4652      	mov	r2, sl
    d70c:	4837      	ldr	r0, [pc, #220]	; (d7ec <nm_spi_read_block+0x144>)
    d70e:	47a0      	blx	r4
    d710:	200d      	movs	r0, #13
    d712:	47c0      	blx	r8
    d714:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    d716:	2001      	movs	r0, #1
    d718:	4b30      	ldr	r3, [pc, #192]	; (d7dc <nm_spi_read_block+0x134>)
    d71a:	4798      	blx	r3
		if(retry) goto _RETRY_;
    d71c:	2d00      	cmp	r5, #0
    d71e:	d02c      	beq.n	d77a <nm_spi_read_block+0xd2>
	if (size == 1)
    d720:	2e01      	cmp	r6, #1
    d722:	d019      	beq.n	d758 <nm_spi_read_block+0xb0>
    d724:	0033      	movs	r3, r6
	result = spi_cmd(cmd, addr, 0, size,0);
    d726:	2200      	movs	r2, #0
    d728:	4651      	mov	r1, sl
    d72a:	9200      	str	r2, [sp, #0]
    d72c:	20c8      	movs	r0, #200	; 0xc8
    d72e:	4c2c      	ldr	r4, [pc, #176]	; (d7e0 <nm_spi_read_block+0x138>)
    d730:	47a0      	blx	r4
	if (result != N_OK) {
    d732:	2801      	cmp	r0, #1
    d734:	d1c6      	bne.n	d6c4 <nm_spi_read_block+0x1c>
	result = spi_cmd_rsp(cmd);
    d736:	20c8      	movs	r0, #200	; 0xc8
    d738:	4b2a      	ldr	r3, [pc, #168]	; (d7e4 <nm_spi_read_block+0x13c>)
    d73a:	4798      	blx	r3
	if (result != N_OK) {
    d73c:	2801      	cmp	r0, #1
    d73e:	d010      	beq.n	d762 <nm_spi_read_block+0xba>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d740:	4b20      	ldr	r3, [pc, #128]	; (d7c4 <nm_spi_read_block+0x11c>)
    d742:	4a2b      	ldr	r2, [pc, #172]	; (d7f0 <nm_spi_read_block+0x148>)
    d744:	469b      	mov	fp, r3
    d746:	4b21      	ldr	r3, [pc, #132]	; (d7cc <nm_spi_read_block+0x124>)
    d748:	4659      	mov	r1, fp
    d74a:	0018      	movs	r0, r3
    d74c:	4c20      	ldr	r4, [pc, #128]	; (d7d0 <nm_spi_read_block+0x128>)
    d74e:	4699      	mov	r9, r3
    d750:	47a0      	blx	r4
    d752:	4651      	mov	r1, sl
    d754:	4827      	ldr	r0, [pc, #156]	; (d7f4 <nm_spi_read_block+0x14c>)
    d756:	e7c0      	b.n	d6da <nm_spi_read_block+0x32>
		single_byte_workaround = 1;
    d758:	2201      	movs	r2, #1
	if (size == 1)
    d75a:	2302      	movs	r3, #2
		single_byte_workaround = 1;
    d75c:	9202      	str	r2, [sp, #8]
		size = 2;
    d75e:	2602      	movs	r6, #2
    d760:	e7e1      	b.n	d726 <nm_spi_read_block+0x7e>
	if (single_byte_workaround)
    d762:	9b02      	ldr	r3, [sp, #8]
    d764:	2b00      	cmp	r3, #0
    d766:	d111      	bne.n	d78c <nm_spi_read_block+0xe4>
		result = spi_data_read(buf, size,0);
    d768:	2200      	movs	r2, #0
    d76a:	0031      	movs	r1, r6
    d76c:	9803      	ldr	r0, [sp, #12]
    d76e:	4b22      	ldr	r3, [pc, #136]	; (d7f8 <nm_spi_read_block+0x150>)
    d770:	4798      	blx	r3
	if (result != N_OK) {
    d772:	2801      	cmp	r0, #1
    d774:	d115      	bne.n	d7a2 <nm_spi_read_block+0xfa>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d776:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    d778:	e001      	b.n	d77e <nm_spi_read_block+0xd6>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d77a:	2006      	movs	r0, #6
    d77c:	4240      	negs	r0, r0
}
    d77e:	b007      	add	sp, #28
    d780:	bc3c      	pop	{r2, r3, r4, r5}
    d782:	4690      	mov	r8, r2
    d784:	4699      	mov	r9, r3
    d786:	46a2      	mov	sl, r4
    d788:	46ab      	mov	fp, r5
    d78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = spi_data_read(tmp, size,0);
    d78c:	ac05      	add	r4, sp, #20
    d78e:	2200      	movs	r2, #0
    d790:	4b19      	ldr	r3, [pc, #100]	; (d7f8 <nm_spi_read_block+0x150>)
    d792:	0031      	movs	r1, r6
    d794:	0020      	movs	r0, r4
    d796:	4798      	blx	r3
		buf[0] = tmp[0];
    d798:	7823      	ldrb	r3, [r4, #0]
    d79a:	9a03      	ldr	r2, [sp, #12]
    d79c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    d79e:	2801      	cmp	r0, #1
    d7a0:	d0e9      	beq.n	d776 <nm_spi_read_block+0xce>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d7a2:	4b08      	ldr	r3, [pc, #32]	; (d7c4 <nm_spi_read_block+0x11c>)
    d7a4:	4a15      	ldr	r2, [pc, #84]	; (d7fc <nm_spi_read_block+0x154>)
    d7a6:	469b      	mov	fp, r3
    d7a8:	4b08      	ldr	r3, [pc, #32]	; (d7cc <nm_spi_read_block+0x124>)
    d7aa:	4659      	mov	r1, fp
    d7ac:	0018      	movs	r0, r3
    d7ae:	4c08      	ldr	r4, [pc, #32]	; (d7d0 <nm_spi_read_block+0x128>)
    d7b0:	4699      	mov	r9, r3
    d7b2:	47a0      	blx	r4
    d7b4:	4b12      	ldr	r3, [pc, #72]	; (d800 <nm_spi_read_block+0x158>)
    d7b6:	4813      	ldr	r0, [pc, #76]	; (d804 <nm_spi_read_block+0x15c>)
    d7b8:	4798      	blx	r3
    d7ba:	4b07      	ldr	r3, [pc, #28]	; (d7d8 <nm_spi_read_block+0x130>)
    d7bc:	200d      	movs	r0, #13
    d7be:	4698      	mov	r8, r3
    d7c0:	4798      	blx	r3
    d7c2:	e78f      	b.n	d6e4 <nm_spi_read_block+0x3c>
    d7c4:	000163ec 	.word	0x000163ec
    d7c8:	0000045d 	.word	0x0000045d
    d7cc:	00015cb0 	.word	0x00015cb0
    d7d0:	00013de9 	.word	0x00013de9
    d7d4:	000165d8 	.word	0x000165d8
    d7d8:	00013e1d 	.word	0x00013e1d
    d7dc:	0000b549 	.word	0x0000b549
    d7e0:	0000ceb5 	.word	0x0000ceb5
    d7e4:	0000d019 	.word	0x0000d019
    d7e8:	00000484 	.word	0x00000484
    d7ec:	00016668 	.word	0x00016668
    d7f0:	00000463 	.word	0x00000463
    d7f4:	00016608 	.word	0x00016608
    d7f8:	0000d11d 	.word	0x0000d11d
    d7fc:	00000473 	.word	0x00000473
    d800:	00013f05 	.word	0x00013f05
    d804:	00016640 	.word	0x00016640

0000d808 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d808:	230a      	movs	r3, #10
    d80a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d80c:	46de      	mov	lr, fp
    d80e:	4657      	mov	r7, sl
    d810:	464e      	mov	r6, r9
    d812:	4645      	mov	r5, r8
    d814:	469a      	mov	sl, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    d816:	2300      	movs	r3, #0
{
    d818:	b5e0      	push	{r5, r6, r7, lr}
    d81a:	b08d      	sub	sp, #52	; 0x34
    d81c:	9003      	str	r0, [sp, #12]
    d81e:	9105      	str	r1, [sp, #20]
    d820:	4691      	mov	r9, r2
	result = spi_cmd(cmd, addr, 0, size,0);
    d822:	469b      	mov	fp, r3
    d824:	e030      	b.n	d888 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    d826:	4b90      	ldr	r3, [pc, #576]	; (da68 <nm_spi_write_block+0x260>)
    d828:	4e90      	ldr	r6, [pc, #576]	; (da6c <nm_spi_write_block+0x264>)
    d82a:	0019      	movs	r1, r3
    d82c:	4a90      	ldr	r2, [pc, #576]	; (da70 <nm_spi_write_block+0x268>)
    d82e:	4c91      	ldr	r4, [pc, #580]	; (da74 <nm_spi_write_block+0x26c>)
    d830:	0030      	movs	r0, r6
    d832:	9304      	str	r3, [sp, #16]
    d834:	47a0      	blx	r4
    d836:	0029      	movs	r1, r5
    d838:	488f      	ldr	r0, [pc, #572]	; (da78 <nm_spi_write_block+0x270>)
    d83a:	47a0      	blx	r4
    d83c:	200d      	movs	r0, #13
    d83e:	4d8f      	ldr	r5, [pc, #572]	; (da7c <nm_spi_write_block+0x274>)
    d840:	47a8      	blx	r5
		nm_bsp_sleep(1);
    d842:	4b8f      	ldr	r3, [pc, #572]	; (da80 <nm_spi_write_block+0x278>)
    d844:	2001      	movs	r0, #1
    d846:	4698      	mov	r8, r3
    d848:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d84a:	465b      	mov	r3, fp
    d84c:	2200      	movs	r2, #0
    d84e:	2100      	movs	r1, #0
    d850:	9300      	str	r3, [sp, #0]
    d852:	20cf      	movs	r0, #207	; 0xcf
    d854:	2300      	movs	r3, #0
    d856:	4f8b      	ldr	r7, [pc, #556]	; (da84 <nm_spi_write_block+0x27c>)
    d858:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d85a:	4b8b      	ldr	r3, [pc, #556]	; (da88 <nm_spi_write_block+0x280>)
    d85c:	20cf      	movs	r0, #207	; 0xcf
    d85e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d860:	4a8a      	ldr	r2, [pc, #552]	; (da8c <nm_spi_write_block+0x284>)
    d862:	9904      	ldr	r1, [sp, #16]
    d864:	0030      	movs	r0, r6
    d866:	47a0      	blx	r4
    d868:	464b      	mov	r3, r9
    d86a:	4651      	mov	r1, sl
    d86c:	9a03      	ldr	r2, [sp, #12]
    d86e:	4888      	ldr	r0, [pc, #544]	; (da90 <nm_spi_write_block+0x288>)
    d870:	47a0      	blx	r4
    d872:	200d      	movs	r0, #13
    d874:	47a8      	blx	r5
		nm_bsp_sleep(1);
    d876:	2001      	movs	r0, #1
    d878:	47c0      	blx	r8
    d87a:	2301      	movs	r3, #1
    d87c:	425b      	negs	r3, r3
    d87e:	469c      	mov	ip, r3
    d880:	44e2      	add	sl, ip
		if(retry) goto _RETRY_;
    d882:	4653      	mov	r3, sl
    d884:	2b00      	cmp	r3, #0
    d886:	d025      	beq.n	d8d4 <nm_spi_write_block+0xcc>
	if (size == 1)
    d888:	464b      	mov	r3, r9
    d88a:	2b01      	cmp	r3, #1
    d88c:	d01e      	beq.n	d8cc <nm_spi_write_block+0xc4>
	result = spi_cmd(cmd, addr, 0, size,0);
    d88e:	465a      	mov	r2, fp
    d890:	9d03      	ldr	r5, [sp, #12]
    d892:	9200      	str	r2, [sp, #0]
    d894:	0029      	movs	r1, r5
    d896:	2200      	movs	r2, #0
    d898:	20c7      	movs	r0, #199	; 0xc7
    d89a:	4c7a      	ldr	r4, [pc, #488]	; (da84 <nm_spi_write_block+0x27c>)
    d89c:	47a0      	blx	r4
	if (result != N_OK) {
    d89e:	2801      	cmp	r0, #1
    d8a0:	d1c1      	bne.n	d826 <nm_spi_write_block+0x1e>
	result = spi_cmd_rsp(cmd);
    d8a2:	20c7      	movs	r0, #199	; 0xc7
    d8a4:	4b78      	ldr	r3, [pc, #480]	; (da88 <nm_spi_write_block+0x280>)
    d8a6:	4798      	blx	r3
	if (result != N_OK) {
    d8a8:	2801      	cmp	r0, #1
    d8aa:	d01c      	beq.n	d8e6 <nm_spi_write_block+0xde>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    d8ac:	22f4      	movs	r2, #244	; 0xf4
    d8ae:	4b6e      	ldr	r3, [pc, #440]	; (da68 <nm_spi_write_block+0x260>)
    d8b0:	4e6e      	ldr	r6, [pc, #440]	; (da6c <nm_spi_write_block+0x264>)
    d8b2:	0019      	movs	r1, r3
    d8b4:	0092      	lsls	r2, r2, #2
    d8b6:	4c6f      	ldr	r4, [pc, #444]	; (da74 <nm_spi_write_block+0x26c>)
    d8b8:	0030      	movs	r0, r6
    d8ba:	9304      	str	r3, [sp, #16]
    d8bc:	47a0      	blx	r4
    d8be:	9903      	ldr	r1, [sp, #12]
    d8c0:	4874      	ldr	r0, [pc, #464]	; (da94 <nm_spi_write_block+0x28c>)
    d8c2:	47a0      	blx	r4
    d8c4:	4d6d      	ldr	r5, [pc, #436]	; (da7c <nm_spi_write_block+0x274>)
    d8c6:	200d      	movs	r0, #13
    d8c8:	47a8      	blx	r5
    d8ca:	e7ba      	b.n	d842 <nm_spi_write_block+0x3a>
		size = 2;
    d8cc:	2202      	movs	r2, #2
	if (size == 1)
    d8ce:	2302      	movs	r3, #2
		size = 2;
    d8d0:	4691      	mov	r9, r2
    d8d2:	e7dc      	b.n	d88e <nm_spi_write_block+0x86>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    d8d4:	2006      	movs	r0, #6
    d8d6:	4240      	negs	r0, r0

	return s8Ret;
}
    d8d8:	b00d      	add	sp, #52	; 0x34
    d8da:	bc3c      	pop	{r2, r3, r4, r5}
    d8dc:	4690      	mov	r8, r2
    d8de:	4699      	mov	r9, r3
    d8e0:	46a2      	mov	sl, r4
    d8e2:	46ab      	mov	fp, r5
    d8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8 cmd, order, crc[2] = {0};
    d8e6:	465a      	mov	r2, fp
    d8e8:	ab04      	add	r3, sp, #16
    d8ea:	821a      	strh	r2, [r3, #16]
	ix = 0;
    d8ec:	2300      	movs	r3, #0
	uint8 cmd, order, crc[2] = {0};
    d8ee:	464c      	mov	r4, r9
	ix = 0;
    d8f0:	4698      	mov	r8, r3
    d8f2:	ae09      	add	r6, sp, #36	; 0x24
    d8f4:	4f68      	ldr	r7, [pc, #416]	; (da98 <nm_spi_write_block+0x290>)
    d8f6:	e02a      	b.n	d94e <nm_spi_write_block+0x146>
			if (sz <= DATA_PKT_SZ)
    d8f8:	2280      	movs	r2, #128	; 0x80
    d8fa:	33f1      	adds	r3, #241	; 0xf1
    d8fc:	0192      	lsls	r2, r2, #6
    d8fe:	4294      	cmp	r4, r2
    d900:	d800      	bhi.n	d904 <nm_spi_write_block+0xfc>
    d902:	3302      	adds	r3, #2
		cmd |= order;
    d904:	aa04      	add	r2, sp, #16
    d906:	73d3      	strb	r3, [r2, #15]
	spi.pu8InBuf = b;
    d908:	4694      	mov	ip, r2
    d90a:	230f      	movs	r3, #15
    d90c:	4463      	add	r3, ip
    d90e:	6033      	str	r3, [r6, #0]
	spi.pu8OutBuf = NULL;
    d910:	465b      	mov	r3, fp
    d912:	6073      	str	r3, [r6, #4]
	spi.u16Sz = sz;
    d914:	2301      	movs	r3, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d916:	0031      	movs	r1, r6
    d918:	2003      	movs	r0, #3
	spi.u16Sz = sz;
    d91a:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d91c:	47b8      	blx	r7
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    d91e:	2800      	cmp	r0, #0
    d920:	d139      	bne.n	d996 <nm_spi_write_block+0x18e>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d922:	9b05      	ldr	r3, [sp, #20]
	spi.pu8OutBuf = NULL;
    d924:	6070      	str	r0, [r6, #4]
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d926:	4443      	add	r3, r8
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d928:	0031      	movs	r1, r6
    d92a:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    d92c:	6033      	str	r3, [r6, #0]
	spi.u16Sz = sz;
    d92e:	8135      	strh	r5, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d930:	47b8      	blx	r7
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d932:	2800      	cmp	r0, #0
    d934:	d149      	bne.n	d9ca <nm_spi_write_block+0x1c2>
		if (!gu8Crc_off) {
    d936:	4b59      	ldr	r3, [pc, #356]	; (da9c <nm_spi_write_block+0x294>)
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	2b00      	cmp	r3, #0
    d93c:	d019      	beq.n	d972 <nm_spi_write_block+0x16a>
		ix += nbytes;
    d93e:	4643      	mov	r3, r8
		sz -= nbytes;
    d940:	1b64      	subs	r4, r4, r5
		ix += nbytes;
    d942:	18eb      	adds	r3, r5, r3
    d944:	b21b      	sxth	r3, r3
		sz -= nbytes;
    d946:	b2a4      	uxth	r4, r4
		ix += nbytes;
    d948:	4698      	mov	r8, r3
	} while (sz);
    d94a:	2c00      	cmp	r4, #0
    d94c:	d045      	beq.n	d9da <nm_spi_write_block+0x1d2>
    d94e:	2380      	movs	r3, #128	; 0x80
    d950:	1c25      	adds	r5, r4, #0
    d952:	019b      	lsls	r3, r3, #6
    d954:	429c      	cmp	r4, r3
    d956:	d901      	bls.n	d95c <nm_spi_write_block+0x154>
    d958:	4b51      	ldr	r3, [pc, #324]	; (daa0 <nm_spi_write_block+0x298>)
    d95a:	881d      	ldrh	r5, [r3, #0]
		if (ix == 0)  {
    d95c:	4643      	mov	r3, r8
    d95e:	b2ad      	uxth	r5, r5
    d960:	2b00      	cmp	r3, #0
    d962:	d0c9      	beq.n	d8f8 <nm_spi_write_block+0xf0>
			if (sz <= DATA_PKT_SZ)
    d964:	2180      	movs	r1, #128	; 0x80
    d966:	465b      	mov	r3, fp
    d968:	0189      	lsls	r1, r1, #6
    d96a:	42a1      	cmp	r1, r4
    d96c:	415b      	adcs	r3, r3
    d96e:	33f2      	adds	r3, #242	; 0xf2
    d970:	e7c8      	b.n	d904 <nm_spi_write_block+0xfc>
	spi.pu8InBuf = b;
    d972:	aa08      	add	r2, sp, #32
	spi.pu8OutBuf = NULL;
    d974:	6073      	str	r3, [r6, #4]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d976:	0031      	movs	r1, r6
	spi.u16Sz = sz;
    d978:	3302      	adds	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d97a:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    d97c:	6032      	str	r2, [r6, #0]
	spi.u16Sz = sz;
    d97e:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d980:	47b8      	blx	r7
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    d982:	2800      	cmp	r0, #0
    d984:	d0db      	beq.n	d93e <nm_spi_write_block+0x136>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d986:	4e39      	ldr	r6, [pc, #228]	; (da6c <nm_spi_write_block+0x264>)
    d988:	4a46      	ldr	r2, [pc, #280]	; (daa4 <nm_spi_write_block+0x29c>)
    d98a:	4947      	ldr	r1, [pc, #284]	; (daa8 <nm_spi_write_block+0x2a0>)
    d98c:	0030      	movs	r0, r6
    d98e:	4c39      	ldr	r4, [pc, #228]	; (da74 <nm_spi_write_block+0x26c>)
    d990:	47a0      	blx	r4
    d992:	4846      	ldr	r0, [pc, #280]	; (daac <nm_spi_write_block+0x2a4>)
    d994:	e007      	b.n	d9a6 <nm_spi_write_block+0x19e>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    d996:	22d4      	movs	r2, #212	; 0xd4
    d998:	4e34      	ldr	r6, [pc, #208]	; (da6c <nm_spi_write_block+0x264>)
    d99a:	0092      	lsls	r2, r2, #2
    d99c:	4942      	ldr	r1, [pc, #264]	; (daa8 <nm_spi_write_block+0x2a0>)
    d99e:	0030      	movs	r0, r6
    d9a0:	4c34      	ldr	r4, [pc, #208]	; (da74 <nm_spi_write_block+0x26c>)
    d9a2:	47a0      	blx	r4
    d9a4:	4842      	ldr	r0, [pc, #264]	; (dab0 <nm_spi_write_block+0x2a8>)
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d9a6:	4b43      	ldr	r3, [pc, #268]	; (dab4 <nm_spi_write_block+0x2ac>)
    d9a8:	4698      	mov	r8, r3
    d9aa:	4798      	blx	r3
    d9ac:	200d      	movs	r0, #13
    d9ae:	4d33      	ldr	r5, [pc, #204]	; (da7c <nm_spi_write_block+0x274>)
    d9b0:	47a8      	blx	r5
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d9b2:	22f8      	movs	r2, #248	; 0xf8
    d9b4:	4b2c      	ldr	r3, [pc, #176]	; (da68 <nm_spi_write_block+0x260>)
    d9b6:	9304      	str	r3, [sp, #16]
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d9b8:	0092      	lsls	r2, r2, #2
    d9ba:	0019      	movs	r1, r3
    d9bc:	0030      	movs	r0, r6
    d9be:	47a0      	blx	r4
    d9c0:	483d      	ldr	r0, [pc, #244]	; (dab8 <nm_spi_write_block+0x2b0>)
    d9c2:	47c0      	blx	r8
    d9c4:	200d      	movs	r0, #13
    d9c6:	47a8      	blx	r5
    d9c8:	e73b      	b.n	d842 <nm_spi_write_block+0x3a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    d9ca:	4e28      	ldr	r6, [pc, #160]	; (da6c <nm_spi_write_block+0x264>)
    d9cc:	4a3b      	ldr	r2, [pc, #236]	; (dabc <nm_spi_write_block+0x2b4>)
    d9ce:	4936      	ldr	r1, [pc, #216]	; (daa8 <nm_spi_write_block+0x2a0>)
    d9d0:	0030      	movs	r0, r6
    d9d2:	4c28      	ldr	r4, [pc, #160]	; (da74 <nm_spi_write_block+0x26c>)
    d9d4:	47a0      	blx	r4
    d9d6:	483a      	ldr	r0, [pc, #232]	; (dac0 <nm_spi_write_block+0x2b8>)
    d9d8:	e7e5      	b.n	d9a6 <nm_spi_write_block+0x19e>
    if (!gu8Crc_off)
    d9da:	4b30      	ldr	r3, [pc, #192]	; (da9c <nm_spi_write_block+0x294>)
    d9dc:	781b      	ldrb	r3, [r3, #0]
    d9de:	2b00      	cmp	r3, #0
    d9e0:	d12e      	bne.n	da40 <nm_spi_write_block+0x238>
		len = 2;
    d9e2:	2402      	movs	r4, #2
    if (!gu8Crc_off)
    d9e4:	3302      	adds	r3, #2
	spi.pu8InBuf = NULL;
    d9e6:	465a      	mov	r2, fp
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d9e8:	0031      	movs	r1, r6
	spi.pu8InBuf = NULL;
    d9ea:	6032      	str	r2, [r6, #0]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d9ec:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    d9ee:	aa08      	add	r2, sp, #32
    d9f0:	6072      	str	r2, [r6, #4]
	spi.u16Sz = sz;
    d9f2:	8133      	strh	r3, [r6, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d9f4:	47b8      	blx	r7
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    d9f6:	2800      	cmp	r0, #0
    d9f8:	d127      	bne.n	da4a <nm_spi_write_block+0x242>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    d9fa:	ab08      	add	r3, sp, #32
    d9fc:	469c      	mov	ip, r3
    d9fe:	4464      	add	r4, ip
    da00:	1e63      	subs	r3, r4, #1
    da02:	781b      	ldrb	r3, [r3, #0]
    da04:	2b00      	cmp	r3, #0
    da06:	d103      	bne.n	da10 <nm_spi_write_block+0x208>
    da08:	3c02      	subs	r4, #2
    da0a:	7823      	ldrb	r3, [r4, #0]
    da0c:	2bc3      	cmp	r3, #195	; 0xc3
    da0e:	d01a      	beq.n	da46 <nm_spi_write_block+0x23e>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    da10:	22a1      	movs	r2, #161	; 0xa1
    da12:	4e16      	ldr	r6, [pc, #88]	; (da6c <nm_spi_write_block+0x264>)
    da14:	0052      	lsls	r2, r2, #1
    da16:	492b      	ldr	r1, [pc, #172]	; (dac4 <nm_spi_write_block+0x2bc>)
    da18:	4c16      	ldr	r4, [pc, #88]	; (da74 <nm_spi_write_block+0x26c>)
    da1a:	0030      	movs	r0, r6
    da1c:	47a0      	blx	r4
    da1e:	ab04      	add	r3, sp, #16
    da20:	aa04      	add	r2, sp, #16
    da22:	a904      	add	r1, sp, #16
    da24:	7c9b      	ldrb	r3, [r3, #18]
    da26:	7c52      	ldrb	r2, [r2, #17]
    da28:	7c09      	ldrb	r1, [r1, #16]
    da2a:	4827      	ldr	r0, [pc, #156]	; (dac8 <nm_spi_write_block+0x2c0>)
    da2c:	47a0      	blx	r4
    da2e:	200d      	movs	r0, #13
    da30:	4d12      	ldr	r5, [pc, #72]	; (da7c <nm_spi_write_block+0x274>)
    da32:	47a8      	blx	r5
    da34:	4b1f      	ldr	r3, [pc, #124]	; (dab4 <nm_spi_write_block+0x2ac>)
    da36:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    da38:	4b0b      	ldr	r3, [pc, #44]	; (da68 <nm_spi_write_block+0x260>)
    da3a:	22fa      	movs	r2, #250	; 0xfa
    da3c:	9304      	str	r3, [sp, #16]
    da3e:	e7bb      	b.n	d9b8 <nm_spi_write_block+0x1b0>
    if (!gu8Crc_off)
    da40:	2303      	movs	r3, #3
		len = 3;
    da42:	2403      	movs	r4, #3
    da44:	e7cf      	b.n	d9e6 <nm_spi_write_block+0x1de>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    da46:	2000      	movs	r0, #0
    da48:	e746      	b.n	d8d8 <nm_spi_write_block+0xd0>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    da4a:	223c      	movs	r2, #60	; 0x3c
    da4c:	4e07      	ldr	r6, [pc, #28]	; (da6c <nm_spi_write_block+0x264>)
    da4e:	32ff      	adds	r2, #255	; 0xff
    da50:	491c      	ldr	r1, [pc, #112]	; (dac4 <nm_spi_write_block+0x2bc>)
    da52:	0030      	movs	r0, r6
    da54:	4c07      	ldr	r4, [pc, #28]	; (da74 <nm_spi_write_block+0x26c>)
    da56:	47a0      	blx	r4
    da58:	4b16      	ldr	r3, [pc, #88]	; (dab4 <nm_spi_write_block+0x2ac>)
    da5a:	481c      	ldr	r0, [pc, #112]	; (dacc <nm_spi_write_block+0x2c4>)
    da5c:	4698      	mov	r8, r3
    da5e:	4798      	blx	r3
    da60:	4d06      	ldr	r5, [pc, #24]	; (da7c <nm_spi_write_block+0x274>)
    da62:	200d      	movs	r0, #13
    da64:	47a8      	blx	r5
    da66:	e7e7      	b.n	da38 <nm_spi_write_block+0x230>
    da68:	000163cc 	.word	0x000163cc
    da6c:	00015cb0 	.word	0x00015cb0
    da70:	000003ca 	.word	0x000003ca
    da74:	00013de9 	.word	0x00013de9
    da78:	00016684 	.word	0x00016684
    da7c:	00013e1d 	.word	0x00013e1d
    da80:	0000b549 	.word	0x0000b549
    da84:	0000ceb5 	.word	0x0000ceb5
    da88:	0000d019 	.word	0x0000d019
    da8c:	000003f2 	.word	0x000003f2
    da90:	00016668 	.word	0x00016668
    da94:	000166b4 	.word	0x000166b4
    da98:	0000b6e1 	.word	0x0000b6e1
    da9c:	20000900 	.word	0x20000900
    daa0:	00016370 	.word	0x00016370
    daa4:	00000363 	.word	0x00000363
    daa8:	000163ac 	.word	0x000163ac
    daac:	00016758 	.word	0x00016758
    dab0:	000166ec 	.word	0x000166ec
    dab4:	00013f05 	.word	0x00013f05
    dab8:	000167e0 	.word	0x000167e0
    dabc:	00000359 	.word	0x00000359
    dac0:	00016724 	.word	0x00016724
    dac4:	00016380 	.word	0x00016380
    dac8:	000167b0 	.word	0x000167b0
    dacc:	00016790 	.word	0x00016790

0000dad0 <Socket_ReadSocketData.part.0>:
		1.0

Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    dad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dad2:	464e      	mov	r6, r9
    dad4:	4645      	mov	r5, r8
    dad6:	4657      	mov	r7, sl
    dad8:	46de      	mov	lr, fp
    dada:	b5e0      	push	{r5, r6, r7, lr}
    dadc:	b085      	sub	sp, #20
    dade:	001f      	movs	r7, r3
    dae0:	ab0e      	add	r3, sp, #56	; 0x38
    dae2:	881d      	ldrh	r5, [r3, #0]
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    dae4:	4b38      	ldr	r3, [pc, #224]	; (dbc8 <Socket_ReadSocketData.part.0+0xf8>)
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    dae6:	9203      	str	r2, [sp, #12]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    dae8:	4699      	mov	r9, r3
    daea:	0103      	lsls	r3, r0, #4
    daec:	4698      	mov	r8, r3
    daee:	464b      	mov	r3, r9
    daf0:	4642      	mov	r2, r8
    daf2:	589b      	ldr	r3, [r3, r2]
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
    daf4:	9002      	str	r0, [sp, #8]
    daf6:	000e      	movs	r6, r1
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    daf8:	2b00      	cmp	r3, #0
    dafa:	d007      	beq.n	db0c <Socket_ReadSocketData.part.0+0x3c>
    dafc:	464b      	mov	r3, r9
    dafe:	4443      	add	r3, r8
    db00:	889a      	ldrh	r2, [r3, #4]
    db02:	2a00      	cmp	r2, #0
    db04:	d002      	beq.n	db0c <Socket_ReadSocketData.part.0+0x3c>
    db06:	7a9a      	ldrb	r2, [r3, #10]
    db08:	2a01      	cmp	r2, #1
    db0a:	d006      	beq.n	db1a <Socket_ReadSocketData.part.0+0x4a>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    db0c:	b005      	add	sp, #20
    db0e:	bc3c      	pop	{r2, r3, r4, r5}
    db10:	4690      	mov	r8, r2
    db12:	4699      	mov	r9, r3
    db14:	46a2      	mov	sl, r4
    db16:	46ab      	mov	fp, r5
    db18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    db1a:	469a      	mov	sl, r3
				if (gpfAppSocketCb)
    db1c:	4b2b      	ldr	r3, [pc, #172]	; (dbcc <Socket_ReadSocketData.part.0+0xfc>)
		pstrRecv->u16RemainingSize = u16ReadCount;
    db1e:	80cd      	strh	r5, [r1, #6]
				if (gpfAppSocketCb)
    db20:	469b      	mov	fp, r3
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    db22:	230a      	movs	r3, #10
    db24:	4453      	add	r3, sl
    db26:	9301      	str	r3, [sp, #4]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    db28:	4653      	mov	r3, sl
    db2a:	889b      	ldrh	r3, [r3, #4]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    db2c:	9700      	str	r7, [sp, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    db2e:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    db30:	b21b      	sxth	r3, r3
    db32:	2b00      	cmp	r3, #0
    db34:	dd3a      	ble.n	dbac <Socket_ReadSocketData.part.0+0xdc>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    db36:	4653      	mov	r3, sl
    db38:	889c      	ldrh	r4, [r3, #4]
				u8SetRxDone = 0;
    db3a:	2300      	movs	r3, #0
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    db3c:	b2a4      	uxth	r4, r4
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    db3e:	464a      	mov	r2, r9
    db40:	4641      	mov	r1, r8
    db42:	9800      	ldr	r0, [sp, #0]
    db44:	5851      	ldr	r1, [r2, r1]
    db46:	4f22      	ldr	r7, [pc, #136]	; (dbd0 <Socket_ReadSocketData.part.0+0x100>)
    db48:	0022      	movs	r2, r4
    db4a:	47b8      	blx	r7
    db4c:	2800      	cmp	r0, #0
    db4e:	d130      	bne.n	dbb2 <Socket_ReadSocketData.part.0+0xe2>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    db50:	464b      	mov	r3, r9
    db52:	4642      	mov	r2, r8
    db54:	589b      	ldr	r3, [r3, r2]
				pstrRecv->s16BufferSize		= u16Read;
    db56:	80b4      	strh	r4, [r6, #4]
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    db58:	6033      	str	r3, [r6, #0]
				pstrRecv->u16RemainingSize	-= u16Read;
    db5a:	88f3      	ldrh	r3, [r6, #6]
    db5c:	1b1b      	subs	r3, r3, r4
    db5e:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    db60:	465b      	mov	r3, fp
    db62:	681b      	ldr	r3, [r3, #0]
    db64:	2b00      	cmp	r3, #0
    db66:	d005      	beq.n	db74 <Socket_ReadSocketData.part.0+0xa4>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    db68:	465b      	mov	r3, fp
    db6a:	0032      	movs	r2, r6
    db6c:	681b      	ldr	r3, [r3, #0]
    db6e:	9903      	ldr	r1, [sp, #12]
    db70:	9802      	ldr	r0, [sp, #8]
    db72:	4798      	blx	r3
				u32Address += u16Read;
    db74:	9b00      	ldr	r3, [sp, #0]
				u16ReadCount -= u16Read;
    db76:	1b2d      	subs	r5, r5, r4
				u32Address += u16Read;
    db78:	469c      	mov	ip, r3
    db7a:	44a4      	add	ip, r4
    db7c:	4663      	mov	r3, ip
    db7e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    db80:	9b01      	ldr	r3, [sp, #4]
				u16ReadCount -= u16Read;
    db82:	b2ad      	uxth	r5, r5
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    db84:	781b      	ldrb	r3, [r3, #0]
    db86:	2b00      	cmp	r3, #0
    db88:	d108      	bne.n	db9c <Socket_ReadSocketData.part.0+0xcc>
    db8a:	2d00      	cmp	r5, #0
    db8c:	d0be      	beq.n	db0c <Socket_ReadSocketData.part.0+0x3c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    db8e:	3301      	adds	r3, #1
    db90:	2200      	movs	r2, #0
    db92:	2100      	movs	r1, #0
    db94:	4c0e      	ldr	r4, [pc, #56]	; (dbd0 <Socket_ReadSocketData.part.0+0x100>)
    db96:	2000      	movs	r0, #0
    db98:	47a0      	blx	r4
    db9a:	e7b7      	b.n	db0c <Socket_ReadSocketData.part.0+0x3c>
		}while(u16ReadCount != 0);
    db9c:	2d00      	cmp	r5, #0
    db9e:	d0b5      	beq.n	db0c <Socket_ReadSocketData.part.0+0x3c>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    dba0:	4653      	mov	r3, sl
    dba2:	889b      	ldrh	r3, [r3, #4]
    dba4:	1aeb      	subs	r3, r5, r3
			if(s16Diff > 0)
    dba6:	b21b      	sxth	r3, r3
    dba8:	2b00      	cmp	r3, #0
    dbaa:	dcc4      	bgt.n	db36 <Socket_ReadSocketData.part.0+0x66>
    dbac:	002c      	movs	r4, r5
			u8SetRxDone = 1;
    dbae:	2301      	movs	r3, #1
    dbb0:	e7c5      	b.n	db3e <Socket_ReadSocketData.part.0+0x6e>
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    dbb2:	4c08      	ldr	r4, [pc, #32]	; (dbd4 <Socket_ReadSocketData.part.0+0x104>)
    dbb4:	4808      	ldr	r0, [pc, #32]	; (dbd8 <Socket_ReadSocketData.part.0+0x108>)
    dbb6:	47a0      	blx	r4
    dbb8:	0029      	movs	r1, r5
    dbba:	4808      	ldr	r0, [pc, #32]	; (dbdc <Socket_ReadSocketData.part.0+0x10c>)
    dbbc:	47a0      	blx	r4
    dbbe:	4b08      	ldr	r3, [pc, #32]	; (dbe0 <Socket_ReadSocketData.part.0+0x110>)
    dbc0:	200d      	movs	r0, #13
    dbc2:	4798      	blx	r3
    dbc4:	e7a2      	b.n	db0c <Socket_ReadSocketData.part.0+0x3c>
    dbc6:	46c0      	nop			; (mov r8, r8)
    dbc8:	20000d98 	.word	0x20000d98
    dbcc:	20000e48 	.word	0x20000e48
    dbd0:	0000bf41 	.word	0x0000bf41
    dbd4:	00013de9 	.word	0x00013de9
    dbd8:	00015fe0 	.word	0x00015fe0
    dbdc:	00016a48 	.word	0x00016a48
    dbe0:	00013e1d 	.word	0x00013e1d

0000dbe4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    dbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbe6:	46d6      	mov	lr, sl
    dbe8:	464f      	mov	r7, r9
    dbea:	4646      	mov	r6, r8
    dbec:	b5c0      	push	{r6, r7, lr}
    dbee:	000d      	movs	r5, r1
    dbf0:	b09a      	sub	sp, #104	; 0x68
    dbf2:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    dbf4:	2841      	cmp	r0, #65	; 0x41
    dbf6:	d041      	beq.n	dc7c <m2m_ip_cb+0x98>
    dbf8:	2854      	cmp	r0, #84	; 0x54
    dbfa:	d03f      	beq.n	dc7c <m2m_ip_cb+0x98>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    dbfc:	2842      	cmp	r0, #66	; 0x42
    dbfe:	d100      	bne.n	dc02 <m2m_ip_cb+0x1e>
    dc00:	e0e3      	b.n	ddca <m2m_ip_cb+0x1e6>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    dc02:	2843      	cmp	r0, #67	; 0x43
    dc04:	d051      	beq.n	dcaa <m2m_ip_cb+0xc6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    dc06:	2844      	cmp	r0, #68	; 0x44
    dc08:	d100      	bne.n	dc0c <m2m_ip_cb+0x28>
    dc0a:	e0b9      	b.n	dd80 <m2m_ip_cb+0x19c>
    dc0c:	284b      	cmp	r0, #75	; 0x4b
    dc0e:	d100      	bne.n	dc12 <m2m_ip_cb+0x2e>
    dc10:	e0b6      	b.n	dd80 <m2m_ip_cb+0x19c>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    dc12:	284a      	cmp	r0, #74	; 0x4a
    dc14:	d100      	bne.n	dc18 <m2m_ip_cb+0x34>
    dc16:	e115      	b.n	de44 <m2m_ip_cb+0x260>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    dc18:	2846      	cmp	r0, #70	; 0x46
    dc1a:	d100      	bne.n	dc1e <m2m_ip_cb+0x3a>
    dc1c:	e084      	b.n	dd28 <m2m_ip_cb+0x144>
    dc1e:	2848      	cmp	r0, #72	; 0x48
    dc20:	d100      	bne.n	dc24 <m2m_ip_cb+0x40>
    dc22:	e0eb      	b.n	ddfc <m2m_ip_cb+0x218>
    dc24:	284d      	cmp	r0, #77	; 0x4d
    dc26:	d100      	bne.n	dc2a <m2m_ip_cb+0x46>
    dc28:	e07e      	b.n	dd28 <m2m_ip_cb+0x144>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    dc2a:	2845      	cmp	r0, #69	; 0x45
    dc2c:	d100      	bne.n	dc30 <m2m_ip_cb+0x4c>
    dc2e:	e11e      	b.n	de6e <m2m_ip_cb+0x28a>
    dc30:	2847      	cmp	r0, #71	; 0x47
    dc32:	d100      	bne.n	dc36 <m2m_ip_cb+0x52>
    dc34:	e0e5      	b.n	de02 <m2m_ip_cb+0x21e>
    dc36:	284c      	cmp	r0, #76	; 0x4c
    dc38:	d100      	bne.n	dc3c <m2m_ip_cb+0x58>
    dc3a:	e118      	b.n	de6e <m2m_ip_cb+0x28a>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    dc3c:	2852      	cmp	r0, #82	; 0x52
    dc3e:	d117      	bne.n	dc70 <m2m_ip_cb+0x8c>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    dc40:	0020      	movs	r0, r4
    dc42:	2301      	movs	r3, #1
    dc44:	2214      	movs	r2, #20
    dc46:	a909      	add	r1, sp, #36	; 0x24
    dc48:	4c9b      	ldr	r4, [pc, #620]	; (deb8 <m2m_ip_cb+0x2d4>)
    dc4a:	47a0      	blx	r4
    dc4c:	2800      	cmp	r0, #0
    dc4e:	d10f      	bne.n	dc70 <m2m_ip_cb+0x8c>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    dc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc52:	9303      	str	r3, [sp, #12]
    dc54:	9a03      	ldr	r2, [sp, #12]
    dc56:	4b99      	ldr	r3, [pc, #612]	; (debc <m2m_ip_cb+0x2d8>)
    dc58:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    dc5a:	681a      	ldr	r2, [r3, #0]
    dc5c:	2a00      	cmp	r2, #0
    dc5e:	d007      	beq.n	dc70 <m2m_ip_cb+0x8c>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    dc60:	212c      	movs	r1, #44	; 0x2c
    dc62:	aa02      	add	r2, sp, #8
    dc64:	1852      	adds	r2, r2, r1
    dc66:	681b      	ldr	r3, [r3, #0]
    dc68:	7812      	ldrb	r2, [r2, #0]
    dc6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
    dc6e:	4798      	blx	r3
			}
		}
	}
}
    dc70:	b01a      	add	sp, #104	; 0x68
    dc72:	bc1c      	pop	{r2, r3, r4}
    dc74:	4690      	mov	r8, r2
    dc76:	4699      	mov	r9, r3
    dc78:	46a2      	mov	sl, r4
    dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    dc7c:	0020      	movs	r0, r4
    dc7e:	2300      	movs	r3, #0
    dc80:	2204      	movs	r2, #4
    dc82:	a909      	add	r1, sp, #36	; 0x24
    dc84:	4c8c      	ldr	r4, [pc, #560]	; (deb8 <m2m_ip_cb+0x2d4>)
    dc86:	47a0      	blx	r4
    dc88:	2800      	cmp	r0, #0
    dc8a:	d1f1      	bne.n	dc70 <m2m_ip_cb+0x8c>
			strBind.status = strBindReply.s8Status;
    dc8c:	ab02      	add	r3, sp, #8
    dc8e:	7f5b      	ldrb	r3, [r3, #29]
    dc90:	aa05      	add	r2, sp, #20
    dc92:	7013      	strb	r3, [r2, #0]
			if(gpfAppSocketCb)
    dc94:	4b8a      	ldr	r3, [pc, #552]	; (dec0 <m2m_ip_cb+0x2dc>)
    dc96:	6819      	ldr	r1, [r3, #0]
    dc98:	2900      	cmp	r1, #0
    dc9a:	d0e9      	beq.n	dc70 <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    dc9c:	201c      	movs	r0, #28
    dc9e:	a902      	add	r1, sp, #8
    dca0:	5608      	ldrsb	r0, [r1, r0]
    dca2:	681b      	ldr	r3, [r3, #0]
    dca4:	2101      	movs	r1, #1
    dca6:	4798      	blx	r3
	{
    dca8:	e7e2      	b.n	dc70 <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    dcaa:	ad05      	add	r5, sp, #20
    dcac:	0020      	movs	r0, r4
    dcae:	2300      	movs	r3, #0
    dcb0:	220c      	movs	r2, #12
    dcb2:	0029      	movs	r1, r5
    dcb4:	4c80      	ldr	r4, [pc, #512]	; (deb8 <m2m_ip_cb+0x2d4>)
    dcb6:	47a0      	blx	r4
    dcb8:	2800      	cmp	r0, #0
    dcba:	d1d9      	bne.n	dc70 <m2m_ip_cb+0x8c>
			if(strAcceptReply.sConnectedSock >= 0)
    dcbc:	2009      	movs	r0, #9
    dcbe:	5628      	ldrsb	r0, [r5, r0]
    dcc0:	2800      	cmp	r0, #0
    dcc2:	db1f      	blt.n	dd04 <m2m_ip_cb+0x120>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    dcc4:	2208      	movs	r2, #8
    dcc6:	56aa      	ldrsb	r2, [r5, r2]
    dcc8:	4b7e      	ldr	r3, [pc, #504]	; (dec4 <m2m_ip_cb+0x2e0>)
    dcca:	0112      	lsls	r2, r2, #4
    dccc:	189a      	adds	r2, r3, r2
    dcce:	7ad2      	ldrb	r2, [r2, #11]
    dcd0:	0104      	lsls	r4, r0, #4
    dcd2:	1919      	adds	r1, r3, r4
    dcd4:	b2d2      	uxtb	r2, r2
    dcd6:	72ca      	strb	r2, [r1, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    dcd8:	2201      	movs	r2, #1
    dcda:	728a      	strb	r2, [r1, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    dcdc:	896a      	ldrh	r2, [r5, #10]
    dcde:	3a08      	subs	r2, #8
    dce0:	b292      	uxth	r2, r2
    dce2:	810a      	strh	r2, [r1, #8]
				++gu16SessionID;
    dce4:	4a78      	ldr	r2, [pc, #480]	; (dec8 <m2m_ip_cb+0x2e4>)
    dce6:	8811      	ldrh	r1, [r2, #0]
    dce8:	3101      	adds	r1, #1
    dcea:	b289      	uxth	r1, r1
    dcec:	8011      	strh	r1, [r2, #0]
				if(gu16SessionID == 0)
    dcee:	8811      	ldrh	r1, [r2, #0]
    dcf0:	2900      	cmp	r1, #0
    dcf2:	d103      	bne.n	dcfc <m2m_ip_cb+0x118>
					++gu16SessionID;
    dcf4:	8811      	ldrh	r1, [r2, #0]
    dcf6:	3101      	adds	r1, #1
    dcf8:	b289      	uxth	r1, r1
    dcfa:	8011      	strh	r1, [r2, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    dcfc:	8812      	ldrh	r2, [r2, #0]
    dcfe:	191b      	adds	r3, r3, r4
    dd00:	b292      	uxth	r2, r2
    dd02:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_family		= AF_INET;
    dd04:	2302      	movs	r3, #2
			strAccept.sock = strAcceptReply.sConnectedSock;
    dd06:	aa09      	add	r2, sp, #36	; 0x24
    dd08:	7010      	strb	r0, [r2, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    dd0a:	8093      	strh	r3, [r2, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    dd0c:	886b      	ldrh	r3, [r5, #2]
    dd0e:	80d3      	strh	r3, [r2, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    dd10:	686b      	ldr	r3, [r5, #4]
    dd12:	6093      	str	r3, [r2, #8]
			if(gpfAppSocketCb)
    dd14:	4b6a      	ldr	r3, [pc, #424]	; (dec0 <m2m_ip_cb+0x2dc>)
    dd16:	6819      	ldr	r1, [r3, #0]
    dd18:	2900      	cmp	r1, #0
    dd1a:	d0a9      	beq.n	dc70 <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    dd1c:	2008      	movs	r0, #8
    dd1e:	681b      	ldr	r3, [r3, #0]
    dd20:	5628      	ldrsb	r0, [r5, r0]
    dd22:	2104      	movs	r1, #4
    dd24:	4798      	blx	r3
    dd26:	e7a3      	b.n	dc70 <m2m_ip_cb+0x8c>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    dd28:	2306      	movs	r3, #6
    dd2a:	4698      	mov	r8, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    dd2c:	ae05      	add	r6, sp, #20
    dd2e:	2300      	movs	r3, #0
    dd30:	2210      	movs	r2, #16
    dd32:	0031      	movs	r1, r6
    dd34:	0020      	movs	r0, r4
    dd36:	4f60      	ldr	r7, [pc, #384]	; (deb8 <m2m_ip_cb+0x2d4>)
    dd38:	47b8      	blx	r7
    dd3a:	2800      	cmp	r0, #0
    dd3c:	d000      	beq.n	dd40 <m2m_ip_cb+0x15c>
    dd3e:	e797      	b.n	dc70 <m2m_ip_cb+0x8c>
			sock			= strRecvReply.sock;
    dd40:	230c      	movs	r3, #12
    dd42:	56f3      	ldrsb	r3, [r6, r3]
			gastrSockets[sock].bIsRecvPending = 0;
    dd44:	4a5f      	ldr	r2, [pc, #380]	; (dec4 <m2m_ip_cb+0x2e0>)
			sock			= strRecvReply.sock;
    dd46:	469c      	mov	ip, r3
			gastrSockets[sock].bIsRecvPending = 0;
    dd48:	011b      	lsls	r3, r3, #4
    dd4a:	18d2      	adds	r2, r2, r3
			u16SessionID = strRecvReply.u16SessionID;
    dd4c:	89f1      	ldrh	r1, [r6, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    dd4e:	7310      	strb	r0, [r2, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    dd50:	2308      	movs	r3, #8
    dd52:	5ef0      	ldrsh	r0, [r6, r3]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    dd54:	ab02      	add	r3, sp, #8
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    dd56:	4682      	mov	sl, r0
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    dd58:	8970      	ldrh	r0, [r6, #10]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    dd5a:	88d2      	ldrh	r2, [r2, #6]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    dd5c:	4681      	mov	r9, r0
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    dd5e:	8870      	ldrh	r0, [r6, #2]
    dd60:	84d8      	strh	r0, [r3, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    dd62:	6873      	ldr	r3, [r6, #4]
    dd64:	9303      	str	r3, [sp, #12]
    dd66:	930c      	str	r3, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    dd68:	4291      	cmp	r1, r2
    dd6a:	d100      	bne.n	dd6e <m2m_ip_cb+0x18a>
    dd6c:	e081      	b.n	de72 <m2m_ip_cb+0x28e>
				if(u16ReadSize < u16BufferSize)
    dd6e:	2d10      	cmp	r5, #16
    dd70:	d800      	bhi.n	dd74 <m2m_ip_cb+0x190>
    dd72:	e77d      	b.n	dc70 <m2m_ip_cb+0x8c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    dd74:	2301      	movs	r3, #1
    dd76:	2200      	movs	r2, #0
    dd78:	2100      	movs	r1, #0
    dd7a:	2000      	movs	r0, #0
    dd7c:	47b8      	blx	r7
    dd7e:	e777      	b.n	dc70 <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    dd80:	0020      	movs	r0, r4
    dd82:	2300      	movs	r3, #0
    dd84:	2204      	movs	r2, #4
    dd86:	a909      	add	r1, sp, #36	; 0x24
    dd88:	4c4b      	ldr	r4, [pc, #300]	; (deb8 <m2m_ip_cb+0x2d4>)
    dd8a:	47a0      	blx	r4
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d000      	beq.n	dd92 <m2m_ip_cb+0x1ae>
    dd90:	e76e      	b.n	dc70 <m2m_ip_cb+0x8c>
			strConnMsg.sock		= strConnectReply.sock;
    dd92:	201c      	movs	r0, #28
    dd94:	ab02      	add	r3, sp, #8
    dd96:	5618      	ldrsb	r0, [r3, r0]
    dd98:	ad05      	add	r5, sp, #20
    dd9a:	7028      	strb	r0, [r5, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    dd9c:	7f5b      	ldrb	r3, [r3, #29]
    dd9e:	b25b      	sxtb	r3, r3
    dda0:	706b      	strb	r3, [r5, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    dda2:	2b00      	cmp	r3, #0
    dda4:	d107      	bne.n	ddb6 <m2m_ip_cb+0x1d2>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    dda6:	ab02      	add	r3, sp, #8
    dda8:	8bdb      	ldrh	r3, [r3, #30]
    ddaa:	4a46      	ldr	r2, [pc, #280]	; (dec4 <m2m_ip_cb+0x2e0>)
    ddac:	3b08      	subs	r3, #8
    ddae:	0101      	lsls	r1, r0, #4
    ddb0:	b29b      	uxth	r3, r3
    ddb2:	1852      	adds	r2, r2, r1
    ddb4:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    ddb6:	4b42      	ldr	r3, [pc, #264]	; (dec0 <m2m_ip_cb+0x2dc>)
    ddb8:	681a      	ldr	r2, [r3, #0]
    ddba:	2a00      	cmp	r2, #0
    ddbc:	d100      	bne.n	ddc0 <m2m_ip_cb+0x1dc>
    ddbe:	e757      	b.n	dc70 <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    ddc0:	681b      	ldr	r3, [r3, #0]
    ddc2:	002a      	movs	r2, r5
    ddc4:	2105      	movs	r1, #5
    ddc6:	4798      	blx	r3
    ddc8:	e752      	b.n	dc70 <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    ddca:	0020      	movs	r0, r4
    ddcc:	2300      	movs	r3, #0
    ddce:	2204      	movs	r2, #4
    ddd0:	a909      	add	r1, sp, #36	; 0x24
    ddd2:	4c39      	ldr	r4, [pc, #228]	; (deb8 <m2m_ip_cb+0x2d4>)
    ddd4:	47a0      	blx	r4
    ddd6:	2800      	cmp	r0, #0
    ddd8:	d000      	beq.n	dddc <m2m_ip_cb+0x1f8>
    ddda:	e749      	b.n	dc70 <m2m_ip_cb+0x8c>
			strListen.status = strListenReply.s8Status;
    dddc:	ab02      	add	r3, sp, #8
    ddde:	7f5b      	ldrb	r3, [r3, #29]
    dde0:	aa05      	add	r2, sp, #20
    dde2:	7013      	strb	r3, [r2, #0]
			if(gpfAppSocketCb)
    dde4:	4b36      	ldr	r3, [pc, #216]	; (dec0 <m2m_ip_cb+0x2dc>)
    dde6:	6819      	ldr	r1, [r3, #0]
    dde8:	2900      	cmp	r1, #0
    ddea:	d100      	bne.n	ddee <m2m_ip_cb+0x20a>
    ddec:	e740      	b.n	dc70 <m2m_ip_cb+0x8c>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    ddee:	201c      	movs	r0, #28
    ddf0:	a902      	add	r1, sp, #8
    ddf2:	5608      	ldrsb	r0, [r1, r0]
    ddf4:	681b      	ldr	r3, [r3, #0]
    ddf6:	2102      	movs	r1, #2
    ddf8:	4798      	blx	r3
    ddfa:	e739      	b.n	dc70 <m2m_ip_cb+0x8c>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    ddfc:	2309      	movs	r3, #9
    ddfe:	4698      	mov	r8, r3
    de00:	e794      	b.n	dd2c <m2m_ip_cb+0x148>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    de02:	2508      	movs	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    de04:	0020      	movs	r0, r4
    de06:	2300      	movs	r3, #0
    de08:	2208      	movs	r2, #8
    de0a:	a909      	add	r1, sp, #36	; 0x24
    de0c:	4c2a      	ldr	r4, [pc, #168]	; (deb8 <m2m_ip_cb+0x2d4>)
    de0e:	47a0      	blx	r4
    de10:	2800      	cmp	r0, #0
    de12:	d000      	beq.n	de16 <m2m_ip_cb+0x232>
    de14:	e72c      	b.n	dc70 <m2m_ip_cb+0x8c>
			sock = strReply.sock;
    de16:	201c      	movs	r0, #28
    de18:	ab02      	add	r3, sp, #8
    de1a:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    de1c:	8c19      	ldrh	r1, [r3, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    de1e:	8bdb      	ldrh	r3, [r3, #30]
    de20:	aa05      	add	r2, sp, #20
    de22:	8013      	strh	r3, [r2, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    de24:	4b27      	ldr	r3, [pc, #156]	; (dec4 <m2m_ip_cb+0x2e0>)
    de26:	0104      	lsls	r4, r0, #4
    de28:	191b      	adds	r3, r3, r4
    de2a:	88db      	ldrh	r3, [r3, #6]
    de2c:	4299      	cmp	r1, r3
    de2e:	d000      	beq.n	de32 <m2m_ip_cb+0x24e>
    de30:	e71e      	b.n	dc70 <m2m_ip_cb+0x8c>
				if(gpfAppSocketCb)
    de32:	4b23      	ldr	r3, [pc, #140]	; (dec0 <m2m_ip_cb+0x2dc>)
    de34:	6819      	ldr	r1, [r3, #0]
    de36:	2900      	cmp	r1, #0
    de38:	d100      	bne.n	de3c <m2m_ip_cb+0x258>
    de3a:	e719      	b.n	dc70 <m2m_ip_cb+0x8c>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    de3c:	681b      	ldr	r3, [r3, #0]
    de3e:	0029      	movs	r1, r5
    de40:	4798      	blx	r3
    de42:	e715      	b.n	dc70 <m2m_ip_cb+0x8c>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    de44:	0020      	movs	r0, r4
    de46:	2300      	movs	r3, #0
    de48:	2244      	movs	r2, #68	; 0x44
    de4a:	a909      	add	r1, sp, #36	; 0x24
    de4c:	4c1a      	ldr	r4, [pc, #104]	; (deb8 <m2m_ip_cb+0x2d4>)
    de4e:	47a0      	blx	r4
    de50:	2800      	cmp	r0, #0
    de52:	d000      	beq.n	de56 <m2m_ip_cb+0x272>
    de54:	e70c      	b.n	dc70 <m2m_ip_cb+0x8c>
			if(gpfAppResolveCb)
    de56:	4b1d      	ldr	r3, [pc, #116]	; (decc <m2m_ip_cb+0x2e8>)
    de58:	681a      	ldr	r2, [r3, #0]
    de5a:	2a00      	cmp	r2, #0
    de5c:	d100      	bne.n	de60 <m2m_ip_cb+0x27c>
    de5e:	e707      	b.n	dc70 <m2m_ip_cb+0x8c>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    de60:	9a19      	ldr	r2, [sp, #100]	; 0x64
    de62:	681b      	ldr	r3, [r3, #0]
    de64:	0011      	movs	r1, r2
    de66:	a809      	add	r0, sp, #36	; 0x24
    de68:	9203      	str	r2, [sp, #12]
    de6a:	4798      	blx	r3
    de6c:	e700      	b.n	dc70 <m2m_ip_cb+0x8c>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    de6e:	2507      	movs	r5, #7
    de70:	e7c8      	b.n	de04 <m2m_ip_cb+0x220>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    de72:	4653      	mov	r3, sl
    de74:	2b00      	cmp	r3, #0
    de76:	dd0e      	ble.n	de96 <m2m_ip_cb+0x2b2>
    de78:	45aa      	cmp	sl, r5
    de7a:	da0c      	bge.n	de96 <m2m_ip_cb+0x2b2>
    de7c:	466a      	mov	r2, sp
    de7e:	4653      	mov	r3, sl
    de80:	8193      	strh	r3, [r2, #12]
    de82:	8993      	ldrh	r3, [r2, #12]
					u32Address += u16DataOffset;
    de84:	444c      	add	r4, r9
    de86:	9300      	str	r3, [sp, #0]
    de88:	4642      	mov	r2, r8
    de8a:	0023      	movs	r3, r4
    de8c:	a909      	add	r1, sp, #36	; 0x24
    de8e:	4660      	mov	r0, ip
    de90:	4c0f      	ldr	r4, [pc, #60]	; (ded0 <m2m_ip_cb+0x2ec>)
    de92:	47a0      	blx	r4
    de94:	e6ec      	b.n	dc70 <m2m_ip_cb+0x8c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    de96:	4652      	mov	r2, sl
    de98:	ab02      	add	r3, sp, #8
    de9a:	841a      	strh	r2, [r3, #32]
					strRecvMsg.pu8Buffer		= NULL;
    de9c:	2300      	movs	r3, #0
    de9e:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    dea0:	4b07      	ldr	r3, [pc, #28]	; (dec0 <m2m_ip_cb+0x2dc>)
    dea2:	681a      	ldr	r2, [r3, #0]
    dea4:	2a00      	cmp	r2, #0
    dea6:	d100      	bne.n	deaa <m2m_ip_cb+0x2c6>
    dea8:	e6e2      	b.n	dc70 <m2m_ip_cb+0x8c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    deaa:	681b      	ldr	r3, [r3, #0]
    deac:	aa09      	add	r2, sp, #36	; 0x24
    deae:	4641      	mov	r1, r8
    deb0:	4660      	mov	r0, ip
    deb2:	4798      	blx	r3
    deb4:	e6dc      	b.n	dc70 <m2m_ip_cb+0x8c>
    deb6:	46c0      	nop			; (mov r8, r8)
    deb8:	0000bf41 	.word	0x0000bf41
    debc:	20000e4c 	.word	0x20000e4c
    dec0:	20000e48 	.word	0x20000e48
    dec4:	20000d98 	.word	0x20000d98
    dec8:	20000902 	.word	0x20000902
    decc:	20000e50 	.word	0x20000e50
    ded0:	0000dad1 	.word	0x0000dad1

0000ded4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    ded4:	b570      	push	{r4, r5, r6, lr}
	if(gbSocketInit == 0)
    ded6:	4d09      	ldr	r5, [pc, #36]	; (defc <socketInit+0x28>)
    ded8:	782c      	ldrb	r4, [r5, #0]
    deda:	b2e4      	uxtb	r4, r4
    dedc:	2c00      	cmp	r4, #0
    dede:	d10c      	bne.n	defa <socketInit+0x26>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    dee0:	22b0      	movs	r2, #176	; 0xb0
    dee2:	2100      	movs	r1, #0
    dee4:	4806      	ldr	r0, [pc, #24]	; (df00 <socketInit+0x2c>)
    dee6:	4b07      	ldr	r3, [pc, #28]	; (df04 <socketInit+0x30>)
    dee8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    deea:	4b07      	ldr	r3, [pc, #28]	; (df08 <socketInit+0x34>)
    deec:	4907      	ldr	r1, [pc, #28]	; (df0c <socketInit+0x38>)
    deee:	2002      	movs	r0, #2
    def0:	4798      	blx	r3
		gbSocketInit	= 1;
    def2:	2301      	movs	r3, #1
    def4:	702b      	strb	r3, [r5, #0]
		gu16SessionID	= 0;
    def6:	4b06      	ldr	r3, [pc, #24]	; (df10 <socketInit+0x3c>)
    def8:	801c      	strh	r4, [r3, #0]
	}
}
    defa:	bd70      	pop	{r4, r5, r6, pc}
    defc:	20000901 	.word	0x20000901
    df00:	20000d98 	.word	0x20000d98
    df04:	0000b8a5 	.word	0x0000b8a5
    df08:	0000c009 	.word	0x0000c009
    df0c:	0000dbe5 	.word	0x0000dbe5
    df10:	20000902 	.word	0x20000902

0000df14 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    df14:	4b02      	ldr	r3, [pc, #8]	; (df20 <registerSocketCallback+0xc>)
    df16:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    df18:	4b02      	ldr	r3, [pc, #8]	; (df24 <registerSocketCallback+0x10>)
    df1a:	6019      	str	r1, [r3, #0]
}
    df1c:	4770      	bx	lr
    df1e:	46c0      	nop			; (mov r8, r8)
    df20:	20000e48 	.word	0x20000e48
    df24:	20000e50 	.word	0x20000e50

0000df28 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    df28:	b5f0      	push	{r4, r5, r6, r7, lr}
    df2a:	464f      	mov	r7, r9
    df2c:	46d6      	mov	lr, sl
    df2e:	4646      	mov	r6, r8
    df30:	b5c0      	push	{r6, r7, lr}
    df32:	4691      	mov	r9, r2
    df34:	b086      	sub	sp, #24
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    df36:	2802      	cmp	r0, #2
    df38:	d103      	bne.n	df42 <socket+0x1a>
	{
		if(u8Type == SOCK_STREAM)
    df3a:	2901      	cmp	r1, #1
    df3c:	d00a      	beq.n	df54 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    df3e:	2902      	cmp	r1, #2
    df40:	d022      	beq.n	df88 <socket+0x60>
	SOCKET					sock = -1;
    df42:	2501      	movs	r5, #1
    df44:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    df46:	0028      	movs	r0, r5
    df48:	b006      	add	sp, #24
    df4a:	bc1c      	pop	{r2, r3, r4}
    df4c:	4690      	mov	r8, r2
    df4e:	4699      	mov	r9, r3
    df50:	46a2      	mov	sl, r4
    df52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df54:	4b32      	ldr	r3, [pc, #200]	; (e020 <socket+0xf8>)
    df56:	2607      	movs	r6, #7
    df58:	469a      	mov	sl, r3
    df5a:	4b32      	ldr	r3, [pc, #200]	; (e024 <socket+0xfc>)
    df5c:	4f32      	ldr	r7, [pc, #200]	; (e028 <socket+0x100>)
    df5e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    df60:	783d      	ldrb	r5, [r7, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    df62:	783c      	ldrb	r4, [r7, #0]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    df64:	7838      	ldrb	r0, [r7, #0]
    df66:	2107      	movs	r1, #7
    df68:	3001      	adds	r0, #1
    df6a:	47d0      	blx	sl
				pstrSock	= &gastrSockets[u8NextTcpSock];
    df6c:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    df6e:	b2c9      	uxtb	r1, r1
				if(!pstrSock->bIsUsed)
    df70:	0124      	lsls	r4, r4, #4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    df72:	7039      	strb	r1, [r7, #0]
				if(!pstrSock->bIsUsed)
    df74:	4444      	add	r4, r8
    df76:	7aa3      	ldrb	r3, [r4, #10]
				u8SockID	= u8NextTcpSock;
    df78:	b2ed      	uxtb	r5, r5
				if(!pstrSock->bIsUsed)
    df7a:	2b00      	cmp	r3, #0
    df7c:	d01a      	beq.n	dfb4 <socket+0x8c>
    df7e:	3e01      	subs	r6, #1
    df80:	b2f6      	uxtb	r6, r6
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    df82:	2e00      	cmp	r6, #0
    df84:	d1ec      	bne.n	df60 <socket+0x38>
    df86:	e7dc      	b.n	df42 <socket+0x1a>
    df88:	2204      	movs	r2, #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    df8a:	2003      	movs	r0, #3
    df8c:	4927      	ldr	r1, [pc, #156]	; (e02c <socket+0x104>)
    df8e:	4e28      	ldr	r6, [pc, #160]	; (e030 <socket+0x108>)
				u8SockID		= u8NextUdpSock;
    df90:	780d      	ldrb	r5, [r1, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    df92:	780c      	ldrb	r4, [r1, #0]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    df94:	780b      	ldrb	r3, [r1, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    df96:	0124      	lsls	r4, r4, #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    df98:	3301      	adds	r3, #1
    df9a:	4003      	ands	r3, r0
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    df9c:	1934      	adds	r4, r6, r4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    df9e:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    dfa0:	7aa3      	ldrb	r3, [r4, #10]
				u8SockID		= u8NextUdpSock;
    dfa2:	b2ed      	uxtb	r5, r5
				if(!pstrSock->bIsUsed)
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d004      	beq.n	dfb2 <socket+0x8a>
    dfa8:	3a01      	subs	r2, #1
    dfaa:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    dfac:	2a00      	cmp	r2, #0
    dfae:	d1ef      	bne.n	df90 <socket+0x68>
    dfb0:	e7c7      	b.n	df42 <socket+0x1a>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    dfb2:	3507      	adds	r5, #7
    dfb4:	b26d      	sxtb	r5, r5
		if(sock >= 0)
    dfb6:	2d00      	cmp	r5, #0
    dfb8:	dbc5      	blt.n	df46 <socket+0x1e>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    dfba:	4b1e      	ldr	r3, [pc, #120]	; (e034 <socket+0x10c>)
    dfbc:	2210      	movs	r2, #16
    dfbe:	2100      	movs	r1, #0
    dfc0:	0020      	movs	r0, r4
    dfc2:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    dfc4:	2301      	movs	r3, #1
			++gu16SessionID;
    dfc6:	4e1c      	ldr	r6, [pc, #112]	; (e038 <socket+0x110>)
			pstrSock->bIsUsed = 1;
    dfc8:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    dfca:	8833      	ldrh	r3, [r6, #0]
    dfcc:	3301      	adds	r3, #1
    dfce:	b29b      	uxth	r3, r3
    dfd0:	8033      	strh	r3, [r6, #0]
			if(gu16SessionID == 0)
    dfd2:	8833      	ldrh	r3, [r6, #0]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d103      	bne.n	dfe0 <socket+0xb8>
				++gu16SessionID;
    dfd8:	8833      	ldrh	r3, [r6, #0]
    dfda:	3301      	adds	r3, #1
    dfdc:	b29b      	uxth	r3, r3
    dfde:	8033      	strh	r3, [r6, #0]
			pstrSock->u16SessionID = gu16SessionID;
    dfe0:	8833      	ldrh	r3, [r6, #0]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    dfe2:	4f16      	ldr	r7, [pc, #88]	; (e03c <socket+0x114>)
			pstrSock->u16SessionID = gu16SessionID;
    dfe4:	b29b      	uxth	r3, r3
    dfe6:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    dfe8:	4815      	ldr	r0, [pc, #84]	; (e040 <socket+0x118>)
    dfea:	47b8      	blx	r7
    dfec:	8832      	ldrh	r2, [r6, #0]
    dfee:	0029      	movs	r1, r5
    dff0:	b292      	uxth	r2, r2
    dff2:	4814      	ldr	r0, [pc, #80]	; (e044 <socket+0x11c>)
    dff4:	47b8      	blx	r7
    dff6:	4b14      	ldr	r3, [pc, #80]	; (e048 <socket+0x120>)
    dff8:	200d      	movs	r0, #13
    dffa:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    dffc:	464b      	mov	r3, r9
    dffe:	07db      	lsls	r3, r3, #31
    e000:	d5a1      	bpl.n	df46 <socket+0x1e>
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    e002:	2321      	movs	r3, #33	; 0x21
    e004:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    e006:	2300      	movs	r3, #0
				strSSLCreate.sslSock = sock;
    e008:	aa05      	add	r2, sp, #20
    e00a:	7015      	strb	r5, [r2, #0]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    e00c:	2150      	movs	r1, #80	; 0x50
    e00e:	9302      	str	r3, [sp, #8]
    e010:	9301      	str	r3, [sp, #4]
    e012:	9300      	str	r3, [sp, #0]
    e014:	4c0d      	ldr	r4, [pc, #52]	; (e04c <socket+0x124>)
    e016:	3304      	adds	r3, #4
    e018:	2002      	movs	r0, #2
    e01a:	47a0      	blx	r4
    e01c:	e793      	b.n	df46 <socket+0x1e>
    e01e:	46c0      	nop			; (mov r8, r8)
    e020:	00013b89 	.word	0x00013b89
    e024:	20000d98 	.word	0x20000d98
    e028:	20000904 	.word	0x20000904
    e02c:	20000905 	.word	0x20000905
    e030:	20000e08 	.word	0x20000e08
    e034:	0000b8a5 	.word	0x0000b8a5
    e038:	20000902 	.word	0x20000902
    e03c:	00013de9 	.word	0x00013de9
    e040:	00015fe0 	.word	0x00015fe0
    e044:	00016a74 	.word	0x00016a74
    e048:	00013e1d 	.word	0x00013e1d
    e04c:	0000b985 	.word	0x0000b985

0000e050 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    e050:	b5f0      	push	{r4, r5, r6, r7, lr}
    e052:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    e054:	2800      	cmp	r0, #0
    e056:	db2c      	blt.n	e0b2 <connect+0x62>
    e058:	2900      	cmp	r1, #0
    e05a:	d02a      	beq.n	e0b2 <connect+0x62>
    e05c:	4d16      	ldr	r5, [pc, #88]	; (e0b8 <connect+0x68>)
    e05e:	0106      	lsls	r6, r0, #4
    e060:	19ac      	adds	r4, r5, r6
    e062:	7aa3      	ldrb	r3, [r4, #10]
    e064:	b2db      	uxtb	r3, r3
    e066:	2b01      	cmp	r3, #1
    e068:	d123      	bne.n	e0b2 <connect+0x62>
    e06a:	2a00      	cmp	r2, #0
    e06c:	d021      	beq.n	e0b2 <connect+0x62>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    e06e:	7ae2      	ldrb	r2, [r4, #11]
    e070:	4213      	tst	r3, r2
    e072:	d119      	bne.n	e0a8 <connect+0x58>
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    e074:	2744      	movs	r7, #68	; 0x44
    e076:	ac05      	add	r4, sp, #20
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    e078:	7220      	strb	r0, [r4, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    e07a:	2208      	movs	r2, #8
    e07c:	0020      	movs	r0, r4
    e07e:	4b0f      	ldr	r3, [pc, #60]	; (e0bc <connect+0x6c>)

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    e080:	19ad      	adds	r5, r5, r6
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    e082:	4798      	blx	r3
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    e084:	88eb      	ldrh	r3, [r5, #6]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    e086:	0022      	movs	r2, r4
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    e088:	8163      	strh	r3, [r4, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    e08a:	2300      	movs	r3, #0
    e08c:	0039      	movs	r1, r7
    e08e:	9302      	str	r3, [sp, #8]
    e090:	9301      	str	r3, [sp, #4]
    e092:	9300      	str	r3, [sp, #0]
    e094:	2002      	movs	r0, #2
    e096:	330c      	adds	r3, #12
    e098:	4c09      	ldr	r4, [pc, #36]	; (e0c0 <connect+0x70>)
    e09a:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    e09c:	2800      	cmp	r0, #0
    e09e:	d001      	beq.n	e0a4 <connect+0x54>
		{
			s8Ret = SOCK_ERR_INVALID;
    e0a0:	2009      	movs	r0, #9
    e0a2:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    e0a4:	b009      	add	sp, #36	; 0x24
    e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    e0a8:	7ae3      	ldrb	r3, [r4, #11]
    e0aa:	ac05      	add	r4, sp, #20
    e0ac:	7263      	strb	r3, [r4, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    e0ae:	274b      	movs	r7, #75	; 0x4b
    e0b0:	e7e2      	b.n	e078 <connect+0x28>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    e0b2:	2006      	movs	r0, #6
    e0b4:	4240      	negs	r0, r0
    e0b6:	e7f5      	b.n	e0a4 <connect+0x54>
    e0b8:	20000d98 	.word	0x20000d98
    e0bc:	0000b88d 	.word	0x0000b88d
    e0c0:	0000b985 	.word	0x0000b985

0000e0c4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    e0c4:	b570      	push	{r4, r5, r6, lr}
    e0c6:	b088      	sub	sp, #32
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    e0c8:	2800      	cmp	r0, #0
    e0ca:	db32      	blt.n	e132 <send+0x6e>
    e0cc:	2900      	cmp	r1, #0
    e0ce:	d030      	beq.n	e132 <send+0x6e>
    e0d0:	23af      	movs	r3, #175	; 0xaf
    e0d2:	00db      	lsls	r3, r3, #3
    e0d4:	429a      	cmp	r2, r3
    e0d6:	d82c      	bhi.n	e132 <send+0x6e>
    e0d8:	4b17      	ldr	r3, [pc, #92]	; (e138 <send+0x74>)
    e0da:	0106      	lsls	r6, r0, #4
    e0dc:	199d      	adds	r5, r3, r6
    e0de:	7aac      	ldrb	r4, [r5, #10]
    e0e0:	2c01      	cmp	r4, #1
    e0e2:	d126      	bne.n	e132 <send+0x6e>
		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    e0e4:	88ed      	ldrh	r5, [r5, #6]
		strSend.sock			= sock;
    e0e6:	ac04      	add	r4, sp, #16
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    e0e8:	81a5      	strh	r5, [r4, #12]
		strSend.sock			= sock;
    e0ea:	7020      	strb	r0, [r4, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    e0ec:	8062      	strh	r2, [r4, #2]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    e0ee:	2544      	movs	r5, #68	; 0x44
		if(sock >= TCP_SOCK_MAX)
    e0f0:	2806      	cmp	r0, #6
    e0f2:	dd17      	ble.n	e124 <send+0x60>
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e0f4:	199b      	adds	r3, r3, r6
    e0f6:	7ade      	ldrb	r6, [r3, #11]
    e0f8:	20c5      	movs	r0, #197	; 0xc5
    e0fa:	07f6      	lsls	r6, r6, #31
    e0fc:	d502      	bpl.n	e104 <send+0x40>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    e0fe:	891d      	ldrh	r5, [r3, #8]
    e100:	3007      	adds	r0, #7
    e102:	b2ad      	uxth	r5, r5
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    e104:	9201      	str	r2, [sp, #4]
    e106:	9100      	str	r1, [sp, #0]
    e108:	2310      	movs	r3, #16
    e10a:	0022      	movs	r2, r4
    e10c:	0001      	movs	r1, r0
    e10e:	9502      	str	r5, [sp, #8]
    e110:	2002      	movs	r0, #2
    e112:	4c0a      	ldr	r4, [pc, #40]	; (e13c <send+0x78>)
    e114:	47a0      	blx	r4
    e116:	0003      	movs	r3, r0
    e118:	2000      	movs	r0, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    e11a:	2b00      	cmp	r3, #0
    e11c:	d000      	beq.n	e120 <send+0x5c>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    e11e:	380e      	subs	r0, #14
		}
	}
	return s16Ret;
}
    e120:	b008      	add	sp, #32
    e122:	bd70      	pop	{r4, r5, r6, pc}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e124:	199b      	adds	r3, r3, r6
    e126:	7ade      	ldrb	r6, [r3, #11]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    e128:	350c      	adds	r5, #12
    e12a:	20c5      	movs	r0, #197	; 0xc5
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e12c:	07f6      	lsls	r6, r6, #31
    e12e:	d5e9      	bpl.n	e104 <send+0x40>
    e130:	e7e5      	b.n	e0fe <send+0x3a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    e132:	2006      	movs	r0, #6
    e134:	4240      	negs	r0, r0
    e136:	e7f3      	b.n	e120 <send+0x5c>
    e138:	20000d98 	.word	0x20000d98
    e13c:	0000b985 	.word	0x0000b985

0000e140 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    e140:	b5f0      	push	{r4, r5, r6, r7, lr}
    e142:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    e144:	2800      	cmp	r0, #0
    e146:	db31      	blt.n	e1ac <recv+0x6c>
    e148:	2900      	cmp	r1, #0
    e14a:	d02f      	beq.n	e1ac <recv+0x6c>
    e14c:	2a00      	cmp	r2, #0
    e14e:	d02d      	beq.n	e1ac <recv+0x6c>
    e150:	4e18      	ldr	r6, [pc, #96]	; (e1b4 <recv+0x74>)
    e152:	0107      	lsls	r7, r0, #4
    e154:	19f5      	adds	r5, r6, r7
    e156:	7aac      	ldrb	r4, [r5, #10]
    e158:	b2e4      	uxtb	r4, r4
    e15a:	2c01      	cmp	r4, #1
    e15c:	d126      	bne.n	e1ac <recv+0x6c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    e15e:	51f1      	str	r1, [r6, r7]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    e160:	80aa      	strh	r2, [r5, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    e162:	7b29      	ldrb	r1, [r5, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    e164:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    e166:	2900      	cmp	r1, #0
    e168:	d11a      	bne.n	e1a0 <recv+0x60>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    e16a:	732c      	strb	r4, [r5, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e16c:	7aea      	ldrb	r2, [r5, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    e16e:	3146      	adds	r1, #70	; 0x46
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e170:	4214      	tst	r4, r2
    e172:	d000      	beq.n	e176 <recv+0x36>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    e174:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    e176:	2b00      	cmp	r3, #0
    e178:	d015      	beq.n	e1a6 <recv+0x66>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    e17a:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    e17c:	19f6      	adds	r6, r6, r7
    e17e:	88f3      	ldrh	r3, [r6, #6]
			strRecv.sock = sock;
    e180:	aa04      	add	r2, sp, #16
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    e182:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    e184:	2300      	movs	r3, #0
			strRecv.sock = sock;
    e186:	7110      	strb	r0, [r2, #4]
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    e188:	4c0b      	ldr	r4, [pc, #44]	; (e1b8 <recv+0x78>)
    e18a:	9302      	str	r3, [sp, #8]
    e18c:	9301      	str	r3, [sp, #4]
    e18e:	9300      	str	r3, [sp, #0]
    e190:	2002      	movs	r0, #2
    e192:	3308      	adds	r3, #8
    e194:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
    e196:	2200      	movs	r2, #0
    e198:	2800      	cmp	r0, #0
    e19a:	d001      	beq.n	e1a0 <recv+0x60>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    e19c:	220e      	movs	r2, #14
    e19e:	4252      	negs	r2, r2
			}
		}
	}
	return s16Ret;
}
    e1a0:	0010      	movs	r0, r2
    e1a2:	b007      	add	sp, #28
    e1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    e1a6:	3b01      	subs	r3, #1
    e1a8:	9304      	str	r3, [sp, #16]
    e1aa:	e7e7      	b.n	e17c <recv+0x3c>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    e1ac:	2206      	movs	r2, #6
    e1ae:	4252      	negs	r2, r2
    e1b0:	e7f6      	b.n	e1a0 <recv+0x60>
    e1b2:	46c0      	nop			; (mov r8, r8)
    e1b4:	20000d98 	.word	0x20000d98
    e1b8:	0000b985 	.word	0x0000b985

0000e1bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    e1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1be:	0004      	movs	r4, r0
    e1c0:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    e1c2:	4d1b      	ldr	r5, [pc, #108]	; (e230 <close+0x74>)
    e1c4:	481b      	ldr	r0, [pc, #108]	; (e234 <close+0x78>)
    e1c6:	47a8      	blx	r5
    e1c8:	0021      	movs	r1, r4
    e1ca:	481b      	ldr	r0, [pc, #108]	; (e238 <close+0x7c>)
    e1cc:	47a8      	blx	r5
    e1ce:	200d      	movs	r0, #13
    e1d0:	4b1a      	ldr	r3, [pc, #104]	; (e23c <close+0x80>)
    e1d2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    e1d4:	2c00      	cmp	r4, #0
    e1d6:	db27      	blt.n	e228 <close+0x6c>
    e1d8:	4e19      	ldr	r6, [pc, #100]	; (e240 <close+0x84>)
    e1da:	0127      	lsls	r7, r4, #4
    e1dc:	19f3      	adds	r3, r6, r7
    e1de:	7a9d      	ldrb	r5, [r3, #10]
    e1e0:	b2ed      	uxtb	r5, r5
    e1e2:	2d01      	cmp	r5, #1
    e1e4:	d120      	bne.n	e228 <close+0x6c>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    e1e6:	88d9      	ldrh	r1, [r3, #6]
		strclose.sock = sock; 
    e1e8:	aa05      	add	r2, sp, #20
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    e1ea:	8051      	strh	r1, [r2, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    e1ec:	2100      	movs	r1, #0
    e1ee:	7299      	strb	r1, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    e1f0:	80d9      	strh	r1, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e1f2:	7adb      	ldrb	r3, [r3, #11]
		strclose.sock = sock; 
    e1f4:	7014      	strb	r4, [r2, #0]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    e1f6:	3149      	adds	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e1f8:	421d      	tst	r5, r3
    e1fa:	d000      	beq.n	e1fe <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    e1fc:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    e1fe:	2300      	movs	r3, #0
    e200:	4c10      	ldr	r4, [pc, #64]	; (e244 <close+0x88>)
    e202:	9302      	str	r3, [sp, #8]
    e204:	9301      	str	r3, [sp, #4]
    e206:	9300      	str	r3, [sp, #0]
    e208:	2002      	movs	r0, #2
    e20a:	3304      	adds	r3, #4
    e20c:	47a0      	blx	r4
    e20e:	1e04      	subs	r4, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    e210:	d107      	bne.n	e222 <close+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    e212:	19f0      	adds	r0, r6, r7
    e214:	2210      	movs	r2, #16
    e216:	2100      	movs	r1, #0
    e218:	4b0b      	ldr	r3, [pc, #44]	; (e248 <close+0x8c>)
    e21a:	4798      	blx	r3
	}
	return s8Ret;
}
    e21c:	0020      	movs	r0, r4
    e21e:	b007      	add	sp, #28
    e220:	bdf0      	pop	{r4, r5, r6, r7, pc}
			s8Ret = SOCK_ERR_INVALID;
    e222:	2409      	movs	r4, #9
    e224:	4264      	negs	r4, r4
    e226:	e7f4      	b.n	e212 <close+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    e228:	2406      	movs	r4, #6
    e22a:	4264      	negs	r4, r4
    e22c:	e7f6      	b.n	e21c <close+0x60>
    e22e:	46c0      	nop			; (mov r8, r8)
    e230:	00013de9 	.word	0x00013de9
    e234:	00015fe0 	.word	0x00015fe0
    e238:	00016a5c 	.word	0x00016a5c
    e23c:	00013e1d 	.word	0x00013e1d
    e240:	20000d98 	.word	0x20000d98
    e244:	0000b985 	.word	0x0000b985
    e248:	0000b8a5 	.word	0x0000b8a5

0000e24c <nmi_inet_addr>:
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
	uint8	tmp;
	uint32	u32IP = 0;
    e24c:	2300      	movs	r3, #0
{
    e24e:	b570      	push	{r4, r5, r6, lr}
	uint32	u32IP = 0;
    e250:	2500      	movs	r5, #0
{
    e252:	b082      	sub	sp, #8
	uint32	u32IP = 0;
    e254:	9300      	str	r3, [sp, #0]
			{
				return 0;
			}
			if(c == '.' || c == 0)
			{
				au8IP[i] = tmp;
    e256:	a901      	add	r1, sp, #4
			c = *pcIpAddr;
    e258:	7802      	ldrb	r2, [r0, #0]
    e25a:	1cc6      	adds	r6, r0, #3
    e25c:	2300      	movs	r3, #0
			if(c == '.' || c == 0)
    e25e:	2a2e      	cmp	r2, #46	; 0x2e
    e260:	d010      	beq.n	e284 <nmi_inet_addr+0x38>
    e262:	2a00      	cmp	r2, #0
    e264:	d00e      	beq.n	e284 <nmi_inet_addr+0x38>
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
    e266:	3a30      	subs	r2, #48	; 0x30
    e268:	b2d2      	uxtb	r2, r2
    e26a:	2a09      	cmp	r2, #9
    e26c:	d816      	bhi.n	e29c <nmi_inet_addr+0x50>
			if(j > 4)
    e26e:	42b0      	cmp	r0, r6
    e270:	d014      	beq.n	e29c <nmi_inet_addr+0x50>
			{
				tmp = (tmp * 10) + (c - '0');
    e272:	009c      	lsls	r4, r3, #2
    e274:	191b      	adds	r3, r3, r4
    e276:	005b      	lsls	r3, r3, #1
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    e278:	3001      	adds	r0, #1
				tmp = (tmp * 10) + (c - '0');
    e27a:	189b      	adds	r3, r3, r2
			c = *pcIpAddr;
    e27c:	7802      	ldrb	r2, [r0, #0]
				tmp = (tmp * 10) + (c - '0');
    e27e:	b2db      	uxtb	r3, r3
			if(c == '.' || c == 0)
    e280:	2a2e      	cmp	r2, #46	; 0x2e
    e282:	d1ee      	bne.n	e262 <nmi_inet_addr+0x16>
				au8IP[i] = tmp;
    e284:	554b      	strb	r3, [r1, r5]
    e286:	3501      	adds	r5, #1
			++pcIpAddr;
    e288:	3001      	adds	r0, #1
	for(i = 0; i < 4; ++i)
    e28a:	2d04      	cmp	r5, #4
    e28c:	d1e4      	bne.n	e258 <nmi_inet_addr+0xc>
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    e28e:	4668      	mov	r0, sp
    e290:	2204      	movs	r2, #4
    e292:	4b03      	ldr	r3, [pc, #12]	; (e2a0 <nmi_inet_addr+0x54>)
    e294:	4798      	blx	r3
	return u32IP;
    e296:	9800      	ldr	r0, [sp, #0]
}
    e298:	b002      	add	sp, #8
    e29a:	bd70      	pop	{r4, r5, r6, pc}
				return 0;
    e29c:	2000      	movs	r0, #0
    e29e:	e7fb      	b.n	e298 <nmi_inet_addr+0x4c>
    e2a0:	0000b88d 	.word	0x0000b88d

0000e2a4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    e2a4:	b510      	push	{r4, lr}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    e2a6:	4b0c      	ldr	r3, [pc, #48]	; (e2d8 <gethostbyname+0x34>)
{
    e2a8:	b084      	sub	sp, #16
    e2aa:	0004      	movs	r4, r0
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    e2ac:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    e2ae:	b2c3      	uxtb	r3, r0
    e2b0:	2b40      	cmp	r3, #64	; 0x40
    e2b2:	d80d      	bhi.n	e2d0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    e2b4:	23ff      	movs	r3, #255	; 0xff
    e2b6:	2200      	movs	r2, #0
    e2b8:	4003      	ands	r3, r0
    e2ba:	9202      	str	r2, [sp, #8]
    e2bc:	9201      	str	r2, [sp, #4]
    e2be:	9200      	str	r2, [sp, #0]
    e2c0:	3301      	adds	r3, #1
    e2c2:	0022      	movs	r2, r4
    e2c4:	214a      	movs	r1, #74	; 0x4a
    e2c6:	2002      	movs	r0, #2
    e2c8:	4c04      	ldr	r4, [pc, #16]	; (e2dc <gethostbyname+0x38>)
    e2ca:	47a0      	blx	r4
	}
	return s8Err;
}
    e2cc:	b004      	add	sp, #16
    e2ce:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    e2d0:	2006      	movs	r0, #6
    e2d2:	4240      	negs	r0, r0
    e2d4:	e7fa      	b.n	e2cc <gethostbyname+0x28>
    e2d6:	46c0      	nop			; (mov r8, r8)
    e2d8:	0000b8b5 	.word	0x0000b8b5
    e2dc:	0000b985 	.word	0x0000b985

0000e2e0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    e2e0:	b570      	push	{r4, r5, r6, lr}
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    e2e2:	4b27      	ldr	r3, [pc, #156]	; (e380 <spi_flash_enable+0xa0>)
{
    e2e4:	b082      	sub	sp, #8
    e2e6:	0005      	movs	r5, r0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    e2e8:	4798      	blx	r3
    e2ea:	4b26      	ldr	r3, [pc, #152]	; (e384 <spi_flash_enable+0xa4>)
    e2ec:	0500      	lsls	r0, r0, #20
    e2ee:	0d00      	lsrs	r0, r0, #20
	sint8 s8Ret = M2M_SUCCESS;
    e2f0:	2400      	movs	r4, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    e2f2:	4298      	cmp	r0, r3
    e2f4:	d802      	bhi.n	e2fc <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    e2f6:	0020      	movs	r0, r4
    e2f8:	b002      	add	sp, #8
    e2fa:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    e2fc:	a901      	add	r1, sp, #4
    e2fe:	4822      	ldr	r0, [pc, #136]	; (e388 <spi_flash_enable+0xa8>)
    e300:	4b22      	ldr	r3, [pc, #136]	; (e38c <spi_flash_enable+0xac>)
    e302:	4798      	blx	r3
    e304:	1e04      	subs	r4, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    e306:	d1f6      	bne.n	e2f6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    e308:	9a01      	ldr	r2, [sp, #4]
    e30a:	4b21      	ldr	r3, [pc, #132]	; (e390 <spi_flash_enable+0xb0>)
		u32Val |= ((0x1111ul) << 12);
    e30c:	4921      	ldr	r1, [pc, #132]	; (e394 <spi_flash_enable+0xb4>)
		u32Val &= ~((0x7777ul) << 12);
    e30e:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    e310:	4319      	orrs	r1, r3
		nm_write_reg(0x1410, u32Val);
    e312:	481d      	ldr	r0, [pc, #116]	; (e388 <spi_flash_enable+0xa8>)
    e314:	4e20      	ldr	r6, [pc, #128]	; (e398 <spi_flash_enable+0xb8>)
		u32Val |= ((0x1111ul) << 12);
    e316:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    e318:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e31a:	2100      	movs	r1, #0
    e31c:	481f      	ldr	r0, [pc, #124]	; (e39c <spi_flash_enable+0xbc>)
		if(enable) {
    e31e:	2d00      	cmp	r5, #0
    e320:	d01b      	beq.n	e35a <spi_flash_enable+0x7a>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e322:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    e324:	21ab      	movs	r1, #171	; 0xab
    e326:	481e      	ldr	r0, [pc, #120]	; (e3a0 <spi_flash_enable+0xc0>)
    e328:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    e32a:	2101      	movs	r1, #1
    e32c:	481d      	ldr	r0, [pc, #116]	; (e3a4 <spi_flash_enable+0xc4>)
    e32e:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    e330:	2100      	movs	r1, #0
    e332:	481d      	ldr	r0, [pc, #116]	; (e3a8 <spi_flash_enable+0xc8>)
    e334:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    e336:	2181      	movs	r1, #129	; 0x81
    e338:	481c      	ldr	r0, [pc, #112]	; (e3ac <spi_flash_enable+0xcc>)
    e33a:	47b0      	blx	r6
    e33c:	4d1c      	ldr	r5, [pc, #112]	; (e3b0 <spi_flash_enable+0xd0>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    e33e:	481d      	ldr	r0, [pc, #116]	; (e3b4 <spi_flash_enable+0xd4>)
    e340:	47a8      	blx	r5
    e342:	2801      	cmp	r0, #1
    e344:	d1fb      	bne.n	e33e <spi_flash_enable+0x5e>
		u32Val |= ((0x0010ul) << 12);
    e346:	2180      	movs	r1, #128	; 0x80
		u32Val &= ~((0x7777ul) << 12);
    e348:	9a01      	ldr	r2, [sp, #4]
    e34a:	4b11      	ldr	r3, [pc, #68]	; (e390 <spi_flash_enable+0xb0>)
		u32Val |= ((0x0010ul) << 12);
    e34c:	0249      	lsls	r1, r1, #9
		u32Val &= ~((0x7777ul) << 12);
    e34e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    e350:	4319      	orrs	r1, r3
		nm_write_reg(0x1410, u32Val);
    e352:	480d      	ldr	r0, [pc, #52]	; (e388 <spi_flash_enable+0xa8>)
		u32Val |= ((0x0010ul) << 12);
    e354:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    e356:	47b0      	blx	r6
    e358:	e7cd      	b.n	e2f6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e35a:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    e35c:	21b9      	movs	r1, #185	; 0xb9
    e35e:	4810      	ldr	r0, [pc, #64]	; (e3a0 <spi_flash_enable+0xc0>)
    e360:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    e362:	2101      	movs	r1, #1
    e364:	480f      	ldr	r0, [pc, #60]	; (e3a4 <spi_flash_enable+0xc4>)
    e366:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    e368:	2100      	movs	r1, #0
    e36a:	480f      	ldr	r0, [pc, #60]	; (e3a8 <spi_flash_enable+0xc8>)
    e36c:	47b0      	blx	r6
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    e36e:	2181      	movs	r1, #129	; 0x81
    e370:	480e      	ldr	r0, [pc, #56]	; (e3ac <spi_flash_enable+0xcc>)
    e372:	47b0      	blx	r6
    e374:	4d0e      	ldr	r5, [pc, #56]	; (e3b0 <spi_flash_enable+0xd0>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    e376:	480f      	ldr	r0, [pc, #60]	; (e3b4 <spi_flash_enable+0xd4>)
    e378:	47a8      	blx	r5
    e37a:	2801      	cmp	r0, #1
    e37c:	d1fb      	bne.n	e376 <spi_flash_enable+0x96>
    e37e:	e7e2      	b.n	e346 <spi_flash_enable+0x66>
    e380:	0000c779 	.word	0x0000c779
    e384:	0000039f 	.word	0x0000039f
    e388:	00001410 	.word	0x00001410
    e38c:	0000cba1 	.word	0x0000cba1
    e390:	f8888fff 	.word	0xf8888fff
    e394:	01111000 	.word	0x01111000
    e398:	0000cbad 	.word	0x0000cbad
    e39c:	00010208 	.word	0x00010208
    e3a0:	0001020c 	.word	0x0001020c
    e3a4:	00010214 	.word	0x00010214
    e3a8:	0001021c 	.word	0x0001021c
    e3ac:	00010204 	.word	0x00010204
    e3b0:	0000cb95 	.word	0x0000cb95
    e3b4:	00010218 	.word	0x00010218

0000e3b8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    e3b8:	0003      	movs	r3, r0
    e3ba:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    e3bc:	2001      	movs	r0, #1
    e3be:	2b00      	cmp	r3, #0
    e3c0:	d101      	bne.n	e3c6 <mem_test_unit_ready+0xe>
    e3c2:	4b01      	ldr	r3, [pc, #4]	; (e3c8 <mem_test_unit_ready+0x10>)
    e3c4:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
    e3c6:	bd10      	pop	{r4, pc}
    e3c8:	0000815d 	.word	0x0000815d

0000e3cc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    e3cc:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    e3ce:	2301      	movs	r3, #1
    e3d0:	2800      	cmp	r0, #0
    e3d2:	d103      	bne.n	e3dc <mem_read_capacity+0x10>
    e3d4:	4b02      	ldr	r3, [pc, #8]	; (e3e0 <mem_read_capacity+0x14>)
    e3d6:	0008      	movs	r0, r1
    e3d8:	4798      	blx	r3
    e3da:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
    e3dc:	0018      	movs	r0, r3
    e3de:	bd10      	pop	{r4, pc}
    e3e0:	0000818d 	.word	0x0000818d

0000e3e4 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    e3e4:	4243      	negs	r3, r0
    e3e6:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    e3e8:	b2c0      	uxtb	r0, r0
    e3ea:	4770      	bx	lr

0000e3ec <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    e3ec:	0003      	movs	r3, r0
    e3ee:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    e3f0:	2001      	movs	r0, #1
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d101      	bne.n	e3fa <mem_wr_protect+0xe>
    e3f6:	4b01      	ldr	r3, [pc, #4]	; (e3fc <mem_wr_protect+0x10>)
    e3f8:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    e3fa:	bd10      	pop	{r4, pc}
    e3fc:	0000819d 	.word	0x0000819d

0000e400 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    e400:	b510      	push	{r4, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    e402:	2301      	movs	r3, #1
{
    e404:	000c      	movs	r4, r1
  status =
    e406:	2800      	cmp	r0, #0
    e408:	d104      	bne.n	e414 <memory_2_ram+0x14>
    e40a:	4b03      	ldr	r3, [pc, #12]	; (e418 <memory_2_ram+0x18>)
    e40c:	0011      	movs	r1, r2
    e40e:	0020      	movs	r0, r4
    e410:	4798      	blx	r3
    e412:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    e414:	0018      	movs	r0, r3
    e416:	bd10      	pop	{r4, pc}
    e418:	000081f1 	.word	0x000081f1

0000e41c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    e41c:	b510      	push	{r4, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    e41e:	2301      	movs	r3, #1
{
    e420:	000c      	movs	r4, r1
  status =
    e422:	2800      	cmp	r0, #0
    e424:	d104      	bne.n	e430 <ram_2_memory+0x14>
    e426:	4b03      	ldr	r3, [pc, #12]	; (e434 <ram_2_memory+0x18>)
    e428:	0011      	movs	r1, r2
    e42a:	0020      	movs	r0, r4
    e42c:	4798      	blx	r3
    e42e:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    e430:	0018      	movs	r0, r3
    e432:	bd10      	pop	{r4, pc}
    e434:	00008249 	.word	0x00008249

0000e438 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    e438:	2200      	movs	r2, #0
    e43a:	490f      	ldr	r1, [pc, #60]	; (e478 <udi_cdc_comm_enable+0x40>)
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    e43c:	4b0f      	ldr	r3, [pc, #60]	; (e47c <udi_cdc_comm_enable+0x44>)
{
    e43e:	b510      	push	{r4, lr}

	uid_cdc_state_msg[port].header.bmRequestType =
    e440:	24a1      	movs	r4, #161	; 0xa1
	udi_cdc_nb_comm_enabled = 0;
    e442:	700a      	strb	r2, [r1, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
    e444:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
    e446:	4b0e      	ldr	r3, [pc, #56]	; (e480 <udi_cdc_comm_enable+0x48>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
    e448:	2000      	movs	r0, #0
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    e44a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    e44c:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    e44e:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    e450:	22e1      	movs	r2, #225	; 0xe1
	uid_cdc_state_msg[port].header.bmRequestType =
    e452:	701c      	strb	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    e454:	3c81      	subs	r4, #129	; 0x81
    e456:	705c      	strb	r4, [r3, #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    e458:	3c1e      	subs	r4, #30
    e45a:	80dc      	strh	r4, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    e45c:	4b09      	ldr	r3, [pc, #36]	; (e484 <udi_cdc_comm_enable+0x4c>)
    e45e:	0252      	lsls	r2, r2, #9
    e460:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    e462:	2208      	movs	r2, #8
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    e464:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    e466:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    e468:	719a      	strb	r2, [r3, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    e46a:	780b      	ldrb	r3, [r1, #0]
	return true;
}
    e46c:	2001      	movs	r0, #1
	udi_cdc_nb_comm_enabled++;
    e46e:	3301      	adds	r3, #1
    e470:	b2db      	uxtb	r3, r3
    e472:	700b      	strb	r3, [r1, #0]
}
    e474:	bd10      	pop	{r4, pc}
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	20000913 	.word	0x20000913
    e47c:	200009a8 	.word	0x200009a8
    e480:	20000a40 	.word	0x20000a40
    e484:	2000090c 	.word	0x2000090c

0000e488 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    e488:	4a02      	ldr	r2, [pc, #8]	; (e494 <udi_cdc_comm_disable+0xc>)
    e48a:	7813      	ldrb	r3, [r2, #0]
    e48c:	3b01      	subs	r3, #1
    e48e:	b2db      	uxtb	r3, r3
    e490:	7013      	strb	r3, [r2, #0]
}
    e492:	4770      	bx	lr
    e494:	20000913 	.word	0x20000913

0000e498 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    e498:	4a04      	ldr	r2, [pc, #16]	; (e4ac <udi_cdc_data_disable+0x14>)
    e49a:	7813      	ldrb	r3, [r2, #0]
    e49c:	3b01      	subs	r3, #1
    e49e:	b2db      	uxtb	r3, r3
    e4a0:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
    e4a2:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    e4a4:	2200      	movs	r2, #0
    e4a6:	4b02      	ldr	r3, [pc, #8]	; (e4b0 <udi_cdc_data_disable+0x18>)
    e4a8:	701a      	strb	r2, [r3, #0]
}
    e4aa:	4770      	bx	lr
    e4ac:	20000914 	.word	0x20000914
    e4b0:	20000908 	.word	0x20000908

0000e4b4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    e4b4:	2000      	movs	r0, #0
    e4b6:	4770      	bx	lr

0000e4b8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    e4b8:	2000      	movs	r0, #0
    e4ba:	4770      	bx	lr

0000e4bc <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    e4bc:	4770      	bx	lr
    e4be:	46c0      	nop			; (mov r8, r8)

0000e4c0 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
    e4c0:	4913      	ldr	r1, [pc, #76]	; (e510 <udi_cdc_comm_setup+0x50>)
    e4c2:	780b      	ldrb	r3, [r1, #0]
    e4c4:	b25a      	sxtb	r2, r3
    e4c6:	2a00      	cmp	r2, #0
    e4c8:	db05      	blt.n	e4d6 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    e4ca:	2260      	movs	r2, #96	; 0x60
	return false;  // request Not supported
    e4cc:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    e4ce:	4013      	ands	r3, r2
    e4d0:	2b20      	cmp	r3, #32
    e4d2:	d010      	beq.n	e4f6 <udi_cdc_comm_setup+0x36>
}
    e4d4:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    e4d6:	2260      	movs	r2, #96	; 0x60
	return false;  // request Not supported
    e4d8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    e4da:	4013      	ands	r3, r2
    e4dc:	2b20      	cmp	r3, #32
    e4de:	d1f9      	bne.n	e4d4 <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
    e4e0:	784b      	ldrb	r3, [r1, #1]
    e4e2:	2b21      	cmp	r3, #33	; 0x21
    e4e4:	d1f6      	bne.n	e4d4 <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
    e4e6:	88cb      	ldrh	r3, [r1, #6]
    e4e8:	2b07      	cmp	r3, #7
    e4ea:	d1f3      	bne.n	e4d4 <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.payload =
    e4ec:	4a09      	ldr	r2, [pc, #36]	; (e514 <udi_cdc_comm_setup+0x54>)
				udd_g_ctrlreq.payload_size =
    e4ee:	818b      	strh	r3, [r1, #12]
				udd_g_ctrlreq.payload =
    e4f0:	608a      	str	r2, [r1, #8]
				udd_g_ctrlreq.payload_size =
    e4f2:	2001      	movs	r0, #1
    e4f4:	e7ee      	b.n	e4d4 <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
    e4f6:	784b      	ldrb	r3, [r1, #1]
    e4f8:	2b20      	cmp	r3, #32
    e4fa:	d003      	beq.n	e504 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
    e4fc:	3b22      	subs	r3, #34	; 0x22
    e4fe:	4258      	negs	r0, r3
    e500:	4158      	adcs	r0, r3
    e502:	e7e7      	b.n	e4d4 <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
    e504:	88cb      	ldrh	r3, [r1, #6]
    e506:	2b07      	cmp	r3, #7
    e508:	d1e4      	bne.n	e4d4 <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.callback =
    e50a:	4a03      	ldr	r2, [pc, #12]	; (e518 <udi_cdc_comm_setup+0x58>)
    e50c:	610a      	str	r2, [r1, #16]
    e50e:	e7ed      	b.n	e4ec <udi_cdc_comm_setup+0x2c>
    e510:	2000113c 	.word	0x2000113c
    e514:	2000090c 	.word	0x2000090c
    e518:	0000e4bd 	.word	0x0000e4bd

0000e51c <udi_cdc_tx_send.isra.2>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
    e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e51e:	4645      	mov	r5, r8
    e520:	46de      	mov	lr, fp
    e522:	4657      	mov	r7, sl
    e524:	464e      	mov	r6, r9
    e526:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    e528:	4d4a      	ldr	r5, [pc, #296]	; (e654 <udi_cdc_tx_send.isra.2+0x138>)
static void udi_cdc_tx_send(uint8_t port)
    e52a:	b087      	sub	sp, #28
	if (udi_cdc_tx_trans_ongoing[port]) {
    e52c:	782b      	ldrb	r3, [r5, #0]
    e52e:	2b00      	cmp	r3, #0
    e530:	d006      	beq.n	e540 <udi_cdc_tx_send.isra.2+0x24>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    e532:	b007      	add	sp, #28
    e534:	bc3c      	pop	{r2, r3, r4, r5}
    e536:	4690      	mov	r8, r2
    e538:	4699      	mov	r9, r3
    e53a:	46a2      	mov	sl, r4
    e53c:	46ab      	mov	fp, r5
    e53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (udd_is_high_speed()) {
    e540:	4f45      	ldr	r7, [pc, #276]	; (e658 <udi_cdc_tx_send.isra.2+0x13c>)
    e542:	47b8      	blx	r7
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    e544:	4b45      	ldr	r3, [pc, #276]	; (e65c <udi_cdc_tx_send.isra.2+0x140>)
    e546:	4698      	mov	r8, r3
    e548:	881c      	ldrh	r4, [r3, #0]
	if (udd_is_high_speed()) {
    e54a:	2800      	cmp	r0, #0
    e54c:	d14d      	bne.n	e5ea <udi_cdc_tx_send.isra.2+0xce>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    e54e:	4b44      	ldr	r3, [pc, #272]	; (e660 <udi_cdc_tx_send.isra.2+0x144>)
    e550:	4798      	blx	r3
    e552:	4284      	cmp	r4, r0
    e554:	d0ed      	beq.n	e532 <udi_cdc_tx_send.isra.2+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e556:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e55a:	425a      	negs	r2, r3
    e55c:	4153      	adcs	r3, r2
    e55e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    e560:	b672      	cpsid	i
    e562:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e566:	2300      	movs	r3, #0
    e568:	4a3e      	ldr	r2, [pc, #248]	; (e664 <udi_cdc_tx_send.isra.2+0x148>)
    e56a:	7013      	strb	r3, [r2, #0]
	return flags;
    e56c:	9b05      	ldr	r3, [sp, #20]
    e56e:	9303      	str	r3, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    e570:	4b3d      	ldr	r3, [pc, #244]	; (e668 <udi_cdc_tx_send.isra.2+0x14c>)
    e572:	781c      	ldrb	r4, [r3, #0]
    e574:	469b      	mov	fp, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    e576:	4b3d      	ldr	r3, [pc, #244]	; (e66c <udi_cdc_tx_send.isra.2+0x150>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    e578:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    e57a:	4699      	mov	r9, r3
    e57c:	464a      	mov	r2, r9
    e57e:	0063      	lsls	r3, r4, #1
    e580:	5ad3      	ldrh	r3, [r2, r3]
    e582:	0026      	movs	r6, r4
    e584:	2b00      	cmp	r3, #0
    e586:	d03c      	beq.n	e602 <udi_cdc_tx_send.isra.2+0xe6>
    e588:	4b39      	ldr	r3, [pc, #228]	; (e670 <udi_cdc_tx_send.isra.2+0x154>)
    e58a:	469a      	mov	sl, r3
	sof_zlp_counter = 0;
    e58c:	2300      	movs	r3, #0
    e58e:	4652      	mov	r2, sl
    e590:	8013      	strh	r3, [r2, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    e592:	4b38      	ldr	r3, [pc, #224]	; (e674 <udi_cdc_tx_send.isra.2+0x158>)
    e594:	781b      	ldrb	r3, [r3, #0]
    e596:	2b00      	cmp	r3, #0
    e598:	d12c      	bne.n	e5f4 <udi_cdc_tx_send.isra.2+0xd8>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    e59a:	4263      	negs	r3, r4
    e59c:	415c      	adcs	r4, r3
    e59e:	465b      	mov	r3, fp
    e5a0:	b2e4      	uxtb	r4, r4
    e5a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    e5a4:	2301      	movs	r3, #1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    e5a6:	9a03      	ldr	r2, [sp, #12]
    e5a8:	702b      	strb	r3, [r5, #0]
    e5aa:	2a00      	cmp	r2, #0
    e5ac:	d14a      	bne.n	e644 <udi_cdc_tx_send.isra.2+0x128>
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    e5ae:	464b      	mov	r3, r9
    e5b0:	0075      	lsls	r5, r6, #1
    e5b2:	5b5b      	ldrh	r3, [r3, r5]
    e5b4:	001c      	movs	r4, r3
    e5b6:	3c40      	subs	r4, #64	; 0x40
    e5b8:	1e62      	subs	r2, r4, #1
    e5ba:	4194      	sbcs	r4, r2
    e5bc:	b2e4      	uxtb	r4, r4
	if (b_short_packet) {
    e5be:	2b40      	cmp	r3, #64	; 0x40
    e5c0:	d01b      	beq.n	e5fa <udi_cdc_tx_send.isra.2+0xde>
		if (udd_is_high_speed()) {
    e5c2:	47b8      	blx	r7
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d043      	beq.n	e650 <udi_cdc_tx_send.isra.2+0x134>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    e5c8:	4b2b      	ldr	r3, [pc, #172]	; (e678 <udi_cdc_tx_send.isra.2+0x15c>)
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    e5ca:	4798      	blx	r3
    e5cc:	4643      	mov	r3, r8
    e5ce:	8018      	strh	r0, [r3, #0]
    e5d0:	464b      	mov	r3, r9
    e5d2:	5b5b      	ldrh	r3, [r3, r5]
			udi_cdc_tx_buf[port][buf_sel_trans],
    e5d4:	4a29      	ldr	r2, [pc, #164]	; (e67c <udi_cdc_tx_send.isra.2+0x160>)
    e5d6:	01b6      	lsls	r6, r6, #6
    e5d8:	1996      	adds	r6, r2, r6
	udd_ep_run( ep,
    e5da:	4a29      	ldr	r2, [pc, #164]	; (e680 <udi_cdc_tx_send.isra.2+0x164>)
    e5dc:	0021      	movs	r1, r4
    e5de:	9200      	str	r2, [sp, #0]
    e5e0:	4c28      	ldr	r4, [pc, #160]	; (e684 <udi_cdc_tx_send.isra.2+0x168>)
    e5e2:	0032      	movs	r2, r6
    e5e4:	2081      	movs	r0, #129	; 0x81
    e5e6:	47a0      	blx	r4
    e5e8:	e7a3      	b.n	e532 <udi_cdc_tx_send.isra.2+0x16>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    e5ea:	4b23      	ldr	r3, [pc, #140]	; (e678 <udi_cdc_tx_send.isra.2+0x15c>)
    e5ec:	4798      	blx	r3
    e5ee:	4284      	cmp	r4, r0
    e5f0:	d1b1      	bne.n	e556 <udi_cdc_tx_send.isra.2+0x3a>
    e5f2:	e79e      	b.n	e532 <udi_cdc_tx_send.isra.2+0x16>
    e5f4:	4266      	negs	r6, r4
    e5f6:	4166      	adcs	r6, r4
    e5f8:	e7d4      	b.n	e5a4 <udi_cdc_tx_send.isra.2+0x88>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    e5fa:	2200      	movs	r2, #0
    e5fc:	4641      	mov	r1, r8
    e5fe:	800a      	strh	r2, [r1, #0]
    e600:	e7e8      	b.n	e5d4 <udi_cdc_tx_send.isra.2+0xb8>
		sof_zlp_counter++;
    e602:	4b1b      	ldr	r3, [pc, #108]	; (e670 <udi_cdc_tx_send.isra.2+0x154>)
    e604:	469a      	mov	sl, r3
    e606:	4652      	mov	r2, sl
    e608:	881b      	ldrh	r3, [r3, #0]
    e60a:	3301      	adds	r3, #1
    e60c:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    e60e:	47b8      	blx	r7
    e610:	2800      	cmp	r0, #0
    e612:	d10e      	bne.n	e632 <udi_cdc_tx_send.isra.2+0x116>
    e614:	4653      	mov	r3, sl
    e616:	881b      	ldrh	r3, [r3, #0]
    e618:	2b63      	cmp	r3, #99	; 0x63
    e61a:	d80a      	bhi.n	e632 <udi_cdc_tx_send.isra.2+0x116>
    e61c:	9b03      	ldr	r3, [sp, #12]
    e61e:	2b00      	cmp	r3, #0
    e620:	d100      	bne.n	e624 <udi_cdc_tx_send.isra.2+0x108>
    e622:	e786      	b.n	e532 <udi_cdc_tx_send.isra.2+0x16>
		cpu_irq_enable();
    e624:	2301      	movs	r3, #1
    e626:	4a0f      	ldr	r2, [pc, #60]	; (e664 <udi_cdc_tx_send.isra.2+0x148>)
    e628:	7013      	strb	r3, [r2, #0]
    e62a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e62e:	b662      	cpsie	i
    e630:	e77f      	b.n	e532 <udi_cdc_tx_send.isra.2+0x16>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    e632:	47b8      	blx	r7
    e634:	2800      	cmp	r0, #0
    e636:	d0a9      	beq.n	e58c <udi_cdc_tx_send.isra.2+0x70>
    e638:	4652      	mov	r2, sl
    e63a:	4b13      	ldr	r3, [pc, #76]	; (e688 <udi_cdc_tx_send.isra.2+0x16c>)
    e63c:	8812      	ldrh	r2, [r2, #0]
    e63e:	429a      	cmp	r2, r3
    e640:	d9ec      	bls.n	e61c <udi_cdc_tx_send.isra.2+0x100>
    e642:	e7a3      	b.n	e58c <udi_cdc_tx_send.isra.2+0x70>
    e644:	4a07      	ldr	r2, [pc, #28]	; (e664 <udi_cdc_tx_send.isra.2+0x148>)
    e646:	7013      	strb	r3, [r2, #0]
    e648:	f3bf 8f5f 	dmb	sy
    e64c:	b662      	cpsie	i
    e64e:	e7ae      	b.n	e5ae <udi_cdc_tx_send.isra.2+0x92>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    e650:	4b03      	ldr	r3, [pc, #12]	; (e660 <udi_cdc_tx_send.isra.2+0x144>)
    e652:	e7ba      	b.n	e5ca <udi_cdc_tx_send.isra.2+0xae>
    e654:	20000a3c 	.word	0x20000a3c
    e658:	00010ffd 	.word	0x00010ffd
    e65c:	20000a38 	.word	0x20000a38
    e660:	00011001 	.word	0x00011001
    e664:	200001f9 	.word	0x200001f9
    e668:	20000a34 	.word	0x20000a34
    e66c:	20000a30 	.word	0x20000a30
    e670:	20000906 	.word	0x20000906
    e674:	200009ac 	.word	0x200009ac
    e678:	00011011 	.word	0x00011011
    e67c:	200009b0 	.word	0x200009b0
    e680:	0000e68d 	.word	0x0000e68d
    e684:	00011211 	.word	0x00011211
    e688:	0000031f 	.word	0x0000031f

0000e68c <udi_cdc_data_sent>:
{
    e68c:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    e68e:	2800      	cmp	r0, #0
    e690:	d10d      	bne.n	e6ae <udi_cdc_data_sent+0x22>
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    e692:	4b07      	ldr	r3, [pc, #28]	; (e6b0 <udi_cdc_data_sent+0x24>)
    e694:	4907      	ldr	r1, [pc, #28]	; (e6b4 <udi_cdc_data_sent+0x28>)
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	425a      	negs	r2, r3
    e69a:	4153      	adcs	r3, r2
    e69c:	2200      	movs	r2, #0
    e69e:	005b      	lsls	r3, r3, #1
    e6a0:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
    e6a2:	4b05      	ldr	r3, [pc, #20]	; (e6b8 <udi_cdc_data_sent+0x2c>)
    e6a4:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    e6a6:	4b05      	ldr	r3, [pc, #20]	; (e6bc <udi_cdc_data_sent+0x30>)
    e6a8:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
    e6aa:	4b05      	ldr	r3, [pc, #20]	; (e6c0 <udi_cdc_data_sent+0x34>)
    e6ac:	4798      	blx	r3
}
    e6ae:	bd10      	pop	{r4, pc}
    e6b0:	20000a34 	.word	0x20000a34
    e6b4:	20000a30 	.word	0x20000a30
    e6b8:	200009ac 	.word	0x200009ac
    e6bc:	20000a3c 	.word	0x20000a3c
    e6c0:	0000e51d 	.word	0x0000e51d

0000e6c4 <udi_cdc_data_sof_notify>:
{
    e6c4:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    e6c6:	4b01      	ldr	r3, [pc, #4]	; (e6cc <udi_cdc_data_sof_notify+0x8>)
    e6c8:	4798      	blx	r3
}
    e6ca:	bd10      	pop	{r4, pc}
    e6cc:	0000e51d 	.word	0x0000e51d

0000e6d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    e6d0:	b510      	push	{r4, lr}
    e6d2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e6d4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e6d8:	425a      	negs	r2, r3
    e6da:	4153      	adcs	r3, r2
    e6dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e6de:	b672      	cpsid	i
    e6e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e6e4:	2300      	movs	r3, #0
    e6e6:	4a0a      	ldr	r2, [pc, #40]	; (e710 <udi_cdc_multi_get_nb_received_data+0x40>)
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    e6e8:	480a      	ldr	r0, [pc, #40]	; (e714 <udi_cdc_multi_get_nb_received_data+0x44>)
    e6ea:	7013      	strb	r3, [r2, #0]
	pos = udi_cdc_rx_pos[port];
    e6ec:	4b0a      	ldr	r3, [pc, #40]	; (e718 <udi_cdc_multi_get_nb_received_data+0x48>)
	return flags;
    e6ee:	9901      	ldr	r1, [sp, #4]
    e6f0:	881c      	ldrh	r4, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    e6f2:	4b0a      	ldr	r3, [pc, #40]	; (e71c <udi_cdc_multi_get_nb_received_data+0x4c>)
    e6f4:	781b      	ldrb	r3, [r3, #0]
    e6f6:	005b      	lsls	r3, r3, #1
    e6f8:	5a18      	ldrh	r0, [r3, r0]
    e6fa:	1b00      	subs	r0, r0, r4
	if (cpu_irq_is_enabled_flags(flags))
    e6fc:	2900      	cmp	r1, #0
    e6fe:	d004      	beq.n	e70a <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
    e700:	2301      	movs	r3, #1
    e702:	7013      	strb	r3, [r2, #0]
    e704:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e708:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
    e70a:	b002      	add	sp, #8
    e70c:	bd10      	pop	{r4, pc}
    e70e:	46c0      	nop			; (mov r8, r8)
    e710:	200001f9 	.word	0x200001f9
    e714:	20000998 	.word	0x20000998
    e718:	200009a0 	.word	0x200009a0
    e71c:	2000099c 	.word	0x2000099c

0000e720 <udi_cdc_rx_start.isra.9>:
static bool udi_cdc_rx_start(uint8_t port)
    e720:	b5f0      	push	{r4, r5, r6, r7, lr}
    e722:	46ce      	mov	lr, r9
    e724:	4647      	mov	r7, r8
    e726:	b580      	push	{r7, lr}
    e728:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e72a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e72e:	425a      	negs	r2, r3
    e730:	4153      	adcs	r3, r2
    e732:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    e734:	b672      	cpsid	i
    e736:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e73a:	2300      	movs	r3, #0
    e73c:	491f      	ldr	r1, [pc, #124]	; (e7bc <udi_cdc_rx_start.isra.9+0x9c>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e73e:	4820      	ldr	r0, [pc, #128]	; (e7c0 <udi_cdc_rx_start.isra.9+0xa0>)
	if (udi_cdc_rx_trans_ongoing[port] ||
    e740:	4a20      	ldr	r2, [pc, #128]	; (e7c4 <udi_cdc_rx_start.isra.9+0xa4>)
    e742:	700b      	strb	r3, [r1, #0]
	return flags;
    e744:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e746:	7804      	ldrb	r4, [r0, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    e748:	7813      	ldrb	r3, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    e74a:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    e74c:	b2db      	uxtb	r3, r3
    e74e:	2b00      	cmp	r3, #0
    e750:	d108      	bne.n	e764 <udi_cdc_rx_start.isra.9+0x44>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    e752:	4e1d      	ldr	r6, [pc, #116]	; (e7c8 <udi_cdc_rx_start.isra.9+0xa8>)
    e754:	4f1d      	ldr	r7, [pc, #116]	; (e7cc <udi_cdc_rx_start.isra.9+0xac>)
    e756:	46b1      	mov	r9, r6
    e758:	8836      	ldrh	r6, [r6, #0]
    e75a:	46b4      	mov	ip, r6
    e75c:	0066      	lsls	r6, r4, #1
    e75e:	5bf6      	ldrh	r6, [r6, r7]
	if (udi_cdc_rx_trans_ongoing[port] ||
    e760:	45b4      	cmp	ip, r6
    e762:	d207      	bcs.n	e774 <udi_cdc_rx_start.isra.9+0x54>
		return false;
    e764:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
    e766:	2d00      	cmp	r5, #0
    e768:	d11c      	bne.n	e7a4 <udi_cdc_rx_start.isra.9+0x84>
}
    e76a:	b005      	add	sp, #20
    e76c:	bc0c      	pop	{r2, r3}
    e76e:	4690      	mov	r8, r2
    e770:	4699      	mov	r9, r3
    e772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_cdc_rx_pos[port] = 0;
    e774:	464e      	mov	r6, r9
    e776:	8033      	strh	r3, [r6, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    e778:	4263      	negs	r3, r4
    e77a:	4163      	adcs	r3, r4
    e77c:	b2db      	uxtb	r3, r3
    e77e:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    e780:	2301      	movs	r3, #1
    e782:	7013      	strb	r3, [r2, #0]
    e784:	2d00      	cmp	r5, #0
    e786:	d113      	bne.n	e7b0 <udi_cdc_rx_start.isra.9+0x90>
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    e788:	4b11      	ldr	r3, [pc, #68]	; (e7d0 <udi_cdc_rx_start.isra.9+0xb0>)
    e78a:	2000      	movs	r0, #0
    e78c:	4798      	blx	r3
	return udd_ep_run(ep,
    e78e:	4b11      	ldr	r3, [pc, #68]	; (e7d4 <udi_cdc_rx_start.isra.9+0xb4>)
			udi_cdc_rx_buf[port][buf_sel_trans],
    e790:	4a11      	ldr	r2, [pc, #68]	; (e7d8 <udi_cdc_rx_start.isra.9+0xb8>)
    e792:	01a4      	lsls	r4, r4, #6
    e794:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
    e796:	9300      	str	r3, [sp, #0]
    e798:	2101      	movs	r1, #1
    e79a:	2340      	movs	r3, #64	; 0x40
    e79c:	4c0f      	ldr	r4, [pc, #60]	; (e7dc <udi_cdc_rx_start.isra.9+0xbc>)
    e79e:	2002      	movs	r0, #2
    e7a0:	47a0      	blx	r4
    e7a2:	e7e2      	b.n	e76a <udi_cdc_rx_start.isra.9+0x4a>
		cpu_irq_enable();
    e7a4:	2301      	movs	r3, #1
    e7a6:	700b      	strb	r3, [r1, #0]
    e7a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e7ac:	b662      	cpsie	i
    e7ae:	e7dc      	b.n	e76a <udi_cdc_rx_start.isra.9+0x4a>
    e7b0:	700b      	strb	r3, [r1, #0]
    e7b2:	f3bf 8f5f 	dmb	sy
    e7b6:	b662      	cpsie	i
    e7b8:	e7e6      	b.n	e788 <udi_cdc_rx_start.isra.9+0x68>
    e7ba:	46c0      	nop			; (mov r8, r8)
    e7bc:	200001f9 	.word	0x200001f9
    e7c0:	2000099c 	.word	0x2000099c
    e7c4:	200009a4 	.word	0x200009a4
    e7c8:	200009a0 	.word	0x200009a0
    e7cc:	20000998 	.word	0x20000998
    e7d0:	0000e6d1 	.word	0x0000e6d1
    e7d4:	0000e86d 	.word	0x0000e86d
    e7d8:	20000918 	.word	0x20000918
    e7dc:	00011211 	.word	0x00011211

0000e7e0 <udi_cdc_data_enable>:
{
    e7e0:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    e7e2:	2400      	movs	r4, #0
	udi_cdc_tx_buf_nb[port][0] = 0;
    e7e4:	2600      	movs	r6, #0
	udi_cdc_tx_trans_ongoing[port] = false;
    e7e6:	4b14      	ldr	r3, [pc, #80]	; (e838 <udi_cdc_data_enable+0x58>)
	udi_cdc_nb_data_enabled = 0;
    e7e8:	4d14      	ldr	r5, [pc, #80]	; (e83c <udi_cdc_data_enable+0x5c>)
    e7ea:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    e7ec:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    e7ee:	4b14      	ldr	r3, [pc, #80]	; (e840 <udi_cdc_data_enable+0x60>)
    e7f0:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    e7f2:	4b14      	ldr	r3, [pc, #80]	; (e844 <udi_cdc_data_enable+0x64>)
    e7f4:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    e7f6:	4b14      	ldr	r3, [pc, #80]	; (e848 <udi_cdc_data_enable+0x68>)
    e7f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    e7fa:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    e7fc:	4b13      	ldr	r3, [pc, #76]	; (e84c <udi_cdc_data_enable+0x6c>)
    e7fe:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    e800:	4b13      	ldr	r3, [pc, #76]	; (e850 <udi_cdc_data_enable+0x70>)
    e802:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    e804:	4b13      	ldr	r3, [pc, #76]	; (e854 <udi_cdc_data_enable+0x74>)
    e806:	701e      	strb	r6, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    e808:	4b13      	ldr	r3, [pc, #76]	; (e858 <udi_cdc_data_enable+0x78>)
    e80a:	701e      	strb	r6, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    e80c:	4b13      	ldr	r3, [pc, #76]	; (e85c <udi_cdc_data_enable+0x7c>)
    e80e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    e810:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    e812:	4b13      	ldr	r3, [pc, #76]	; (e860 <udi_cdc_data_enable+0x80>)
    e814:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    e816:	4b13      	ldr	r3, [pc, #76]	; (e864 <udi_cdc_data_enable+0x84>)
    e818:	4798      	blx	r3
    e81a:	2800      	cmp	r0, #0
    e81c:	d007      	beq.n	e82e <udi_cdc_data_enable+0x4e>
	udi_cdc_nb_data_enabled++;
    e81e:	782b      	ldrb	r3, [r5, #0]
    e820:	3301      	adds	r3, #1
    e822:	b2db      	uxtb	r3, r3
    e824:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    e826:	782b      	ldrb	r3, [r5, #0]
    e828:	b2db      	uxtb	r3, r3
    e82a:	2b01      	cmp	r3, #1
    e82c:	d000      	beq.n	e830 <udi_cdc_data_enable+0x50>
}
    e82e:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
    e830:	4a0d      	ldr	r2, [pc, #52]	; (e868 <udi_cdc_data_enable+0x88>)
    e832:	7013      	strb	r3, [r2, #0]
    e834:	e7fb      	b.n	e82e <udi_cdc_data_enable+0x4e>
    e836:	46c0      	nop			; (mov r8, r8)
    e838:	20000a3c 	.word	0x20000a3c
    e83c:	20000914 	.word	0x20000914
    e840:	200009ac 	.word	0x200009ac
    e844:	20000a34 	.word	0x20000a34
    e848:	20000a30 	.word	0x20000a30
    e84c:	20000a38 	.word	0x20000a38
    e850:	0000e51d 	.word	0x0000e51d
    e854:	200009a4 	.word	0x200009a4
    e858:	2000099c 	.word	0x2000099c
    e85c:	20000998 	.word	0x20000998
    e860:	200009a0 	.word	0x200009a0
    e864:	0000e721 	.word	0x0000e721
    e868:	20000908 	.word	0x20000908

0000e86c <udi_cdc_data_received>:
{
    e86c:	b510      	push	{r4, lr}
    e86e:	0014      	movs	r4, r2
    e870:	b082      	sub	sp, #8
	if (UDD_EP_TRANSFER_OK != status) {
    e872:	2800      	cmp	r0, #0
    e874:	d10e      	bne.n	e894 <udi_cdc_data_received+0x28>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    e876:	4b0e      	ldr	r3, [pc, #56]	; (e8b0 <udi_cdc_data_received+0x44>)
    e878:	781a      	ldrb	r2, [r3, #0]
    e87a:	4253      	negs	r3, r2
    e87c:	415a      	adcs	r2, r3
    e87e:	b2d2      	uxtb	r2, r2
	if (!n) {
    e880:	2900      	cmp	r1, #0
    e882:	d009      	beq.n	e898 <udi_cdc_data_received+0x2c>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    e884:	4b0b      	ldr	r3, [pc, #44]	; (e8b4 <udi_cdc_data_received+0x48>)
    e886:	b289      	uxth	r1, r1
    e888:	0052      	lsls	r2, r2, #1
    e88a:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    e88c:	4b0a      	ldr	r3, [pc, #40]	; (e8b8 <udi_cdc_data_received+0x4c>)
    e88e:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
    e890:	4b0a      	ldr	r3, [pc, #40]	; (e8bc <udi_cdc_data_received+0x50>)
    e892:	4798      	blx	r3
}
    e894:	b002      	add	sp, #8
    e896:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
    e898:	4b09      	ldr	r3, [pc, #36]	; (e8c0 <udi_cdc_data_received+0x54>)
    e89a:	0192      	lsls	r2, r2, #6
    e89c:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    e89e:	4b09      	ldr	r3, [pc, #36]	; (e8c4 <udi_cdc_data_received+0x58>)
    e8a0:	3101      	adds	r1, #1
    e8a2:	9300      	str	r3, [sp, #0]
    e8a4:	0020      	movs	r0, r4
    e8a6:	2340      	movs	r3, #64	; 0x40
    e8a8:	4c07      	ldr	r4, [pc, #28]	; (e8c8 <udi_cdc_data_received+0x5c>)
    e8aa:	47a0      	blx	r4
    e8ac:	e7f2      	b.n	e894 <udi_cdc_data_received+0x28>
    e8ae:	46c0      	nop			; (mov r8, r8)
    e8b0:	2000099c 	.word	0x2000099c
    e8b4:	20000998 	.word	0x20000998
    e8b8:	200009a4 	.word	0x200009a4
    e8bc:	0000e721 	.word	0x0000e721
    e8c0:	20000918 	.word	0x20000918
    e8c4:	0000e86d 	.word	0x0000e86d
    e8c8:	00011211 	.word	0x00011211

0000e8cc <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    e8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8ce:	4657      	mov	r7, sl
    e8d0:	464e      	mov	r6, r9
    e8d2:	4645      	mov	r5, r8
    e8d4:	46de      	mov	lr, fp
    e8d6:	b5e0      	push	{r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e8d8:	4b25      	ldr	r3, [pc, #148]	; (e970 <udi_cdc_multi_getc+0xa4>)
	int rx_data = 0;
    e8da:	2600      	movs	r6, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    e8dc:	799b      	ldrb	r3, [r3, #6]
    e8de:	4d25      	ldr	r5, [pc, #148]	; (e974 <udi_cdc_multi_getc+0xa8>)
    e8e0:	3b09      	subs	r3, #9
    e8e2:	425a      	negs	r2, r3
    e8e4:	4153      	adcs	r3, r2
    e8e6:	b2db      	uxtb	r3, r3
    e8e8:	4699      	mov	r9, r3
    e8ea:	4b23      	ldr	r3, [pc, #140]	; (e978 <udi_cdc_multi_getc+0xac>)
    e8ec:	4c23      	ldr	r4, [pc, #140]	; (e97c <udi_cdc_multi_getc+0xb0>)
    e8ee:	4698      	mov	r8, r3
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e8f0:	4b23      	ldr	r3, [pc, #140]	; (e980 <udi_cdc_multi_getc+0xb4>)
    e8f2:	4f24      	ldr	r7, [pc, #144]	; (e984 <udi_cdc_multi_getc+0xb8>)
    e8f4:	469b      	mov	fp, r3
		if (!udi_cdc_data_running) {
    e8f6:	4b24      	ldr	r3, [pc, #144]	; (e988 <udi_cdc_multi_getc+0xbc>)
{
    e8f8:	b083      	sub	sp, #12
		if (!udi_cdc_data_running) {
    e8fa:	469a      	mov	sl, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e8fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e900:	425a      	negs	r2, r3
    e902:	4153      	adcs	r3, r2
    e904:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e906:	b672      	cpsid	i
    e908:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e90c:	2300      	movs	r3, #0
	buf_sel = udi_cdc_rx_buf_sel[port];
    e90e:	4642      	mov	r2, r8
    e910:	702b      	strb	r3, [r5, #0]
	return flags;
    e912:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
    e914:	8823      	ldrh	r3, [r4, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    e916:	7812      	ldrb	r2, [r2, #0]
	pos = udi_cdc_rx_pos[port];
    e918:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
    e91a:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    e91c:	0051      	lsls	r1, r2, #1
    e91e:	5a79      	ldrh	r1, [r7, r1]
    e920:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
    e922:	2800      	cmp	r0, #0
    e924:	d11e      	bne.n	e964 <udi_cdc_multi_getc+0x98>
	while (again) {
    e926:	428b      	cmp	r3, r1
    e928:	d30c      	bcc.n	e944 <udi_cdc_multi_getc+0x78>
		if (!udi_cdc_data_running) {
    e92a:	4653      	mov	r3, sl
    e92c:	781b      	ldrb	r3, [r3, #0]
    e92e:	2b00      	cmp	r3, #0
    e930:	d1e4      	bne.n	e8fc <udi_cdc_multi_getc+0x30>
			return 0;
    e932:	2600      	movs	r6, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    e934:	0030      	movs	r0, r6
    e936:	b003      	add	sp, #12
    e938:	bc3c      	pop	{r2, r3, r4, r5}
    e93a:	4690      	mov	r8, r2
    e93c:	4699      	mov	r9, r3
    e93e:	46a2      	mov	sl, r4
    e940:	46ab      	mov	fp, r5
    e942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e944:	0192      	lsls	r2, r2, #6
    e946:	445a      	add	r2, fp
    e948:	5cd2      	ldrb	r2, [r2, r3]
	udi_cdc_rx_pos[port] = pos+1;
    e94a:	3301      	adds	r3, #1
    e94c:	b29b      	uxth	r3, r3
    e94e:	8023      	strh	r3, [r4, #0]
	udi_cdc_rx_start(port);
    e950:	4b0e      	ldr	r3, [pc, #56]	; (e98c <udi_cdc_multi_getc+0xc0>)
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    e952:	4316      	orrs	r6, r2
	udi_cdc_rx_start(port);
    e954:	4798      	blx	r3
	if (b_databit_9) {
    e956:	464b      	mov	r3, r9
    e958:	2b00      	cmp	r3, #0
    e95a:	d0eb      	beq.n	e934 <udi_cdc_multi_getc+0x68>
		b_databit_9 = false;
    e95c:	2300      	movs	r3, #0
		rx_data = rx_data << 8;
    e95e:	0236      	lsls	r6, r6, #8
		b_databit_9 = false;
    e960:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
    e962:	e7cb      	b.n	e8fc <udi_cdc_multi_getc+0x30>
		cpu_irq_enable();
    e964:	2001      	movs	r0, #1
    e966:	7028      	strb	r0, [r5, #0]
    e968:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e96c:	b662      	cpsie	i
    e96e:	e7da      	b.n	e926 <udi_cdc_multi_getc+0x5a>
    e970:	2000090c 	.word	0x2000090c
    e974:	200001f9 	.word	0x200001f9
    e978:	2000099c 	.word	0x2000099c
    e97c:	200009a0 	.word	0x200009a0
    e980:	20000918 	.word	0x20000918
    e984:	20000998 	.word	0x20000998
    e988:	20000908 	.word	0x20000908
    e98c:	0000e721 	.word	0x0000e721

0000e990 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    e990:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
    e992:	2000      	movs	r0, #0
    e994:	4b01      	ldr	r3, [pc, #4]	; (e99c <udi_cdc_getc+0xc>)
    e996:	4798      	blx	r3
}
    e998:	bd10      	pop	{r4, pc}
    e99a:	46c0      	nop			; (mov r8, r8)
    e99c:	0000e8cd 	.word	0x0000e8cd

0000e9a0 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    e9a0:	b570      	push	{r4, r5, r6, lr}
    e9a2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e9a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e9a8:	425a      	negs	r2, r3
    e9aa:	4153      	adcs	r3, r2
    e9ac:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e9ae:	b672      	cpsid	i
    e9b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e9b4:	2300      	movs	r3, #0
    e9b6:	4a13      	ldr	r2, [pc, #76]	; (ea04 <udi_cdc_multi_get_free_tx_buffer+0x64>)
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    e9b8:	4913      	ldr	r1, [pc, #76]	; (ea08 <udi_cdc_multi_get_free_tx_buffer+0x68>)
    e9ba:	7013      	strb	r3, [r2, #0]
	return flags;
    e9bc:	9c01      	ldr	r4, [sp, #4]
    e9be:	780b      	ldrb	r3, [r1, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    e9c0:	4812      	ldr	r0, [pc, #72]	; (ea0c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    e9c2:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    e9c4:	005d      	lsls	r5, r3, #1
    e9c6:	5a28      	ldrh	r0, [r5, r0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    e9c8:	2840      	cmp	r0, #64	; 0x40
    e9ca:	d00a      	beq.n	e9e2 <udi_cdc_multi_get_free_tx_buffer+0x42>
    e9cc:	2340      	movs	r3, #64	; 0x40
    e9ce:	1a18      	subs	r0, r3, r0
	if (cpu_irq_is_enabled_flags(flags))
    e9d0:	2c00      	cmp	r4, #0
    e9d2:	d004      	beq.n	e9de <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
    e9d4:	2301      	movs	r3, #1
    e9d6:	7013      	strb	r3, [r2, #0]
    e9d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e9dc:	b662      	cpsie	i
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
    e9de:	b002      	add	sp, #8
    e9e0:	bd70      	pop	{r4, r5, r6, pc}
		if ((!udi_cdc_tx_trans_ongoing[port])
    e9e2:	4d0b      	ldr	r5, [pc, #44]	; (ea10 <udi_cdc_multi_get_free_tx_buffer+0x70>)
    e9e4:	782d      	ldrb	r5, [r5, #0]
    e9e6:	2d00      	cmp	r5, #0
    e9e8:	d10a      	bne.n	ea00 <udi_cdc_multi_get_free_tx_buffer+0x60>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    e9ea:	4d0a      	ldr	r5, [pc, #40]	; (ea14 <udi_cdc_multi_get_free_tx_buffer+0x74>)
    e9ec:	782e      	ldrb	r6, [r5, #0]
    e9ee:	2e00      	cmp	r6, #0
    e9f0:	d106      	bne.n	ea00 <udi_cdc_multi_get_free_tx_buffer+0x60>
			udi_cdc_tx_both_buf_to_send[port] = true;
    e9f2:	3601      	adds	r6, #1
    e9f4:	702e      	strb	r6, [r5, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    e9f6:	425d      	negs	r5, r3
    e9f8:	416b      	adcs	r3, r5
    e9fa:	b2db      	uxtb	r3, r3
    e9fc:	700b      	strb	r3, [r1, #0]
    e9fe:	e7e7      	b.n	e9d0 <udi_cdc_multi_get_free_tx_buffer+0x30>
    ea00:	2000      	movs	r0, #0
    ea02:	e7e5      	b.n	e9d0 <udi_cdc_multi_get_free_tx_buffer+0x30>
    ea04:	200001f9 	.word	0x200001f9
    ea08:	20000a34 	.word	0x20000a34
    ea0c:	20000a30 	.word	0x20000a30
    ea10:	20000a3c 	.word	0x20000a3c
    ea14:	200009ac 	.word	0x200009ac

0000ea18 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    ea18:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea1a:	464f      	mov	r7, r9
    ea1c:	4646      	mov	r6, r8
    ea1e:	46d6      	mov	lr, sl
    ea20:	b5c0      	push	{r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    ea22:	4b23      	ldr	r3, [pc, #140]	; (eab0 <udi_cdc_multi_putc+0x98>)
{
    ea24:	000c      	movs	r4, r1
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    ea26:	799d      	ldrb	r5, [r3, #6]
    ea28:	4f22      	ldr	r7, [pc, #136]	; (eab4 <udi_cdc_multi_putc+0x9c>)
    ea2a:	3d09      	subs	r5, #9
    ea2c:	426b      	negs	r3, r5
    ea2e:	415d      	adcs	r5, r3
	cpu_irq_disable();
    ea30:	4b21      	ldr	r3, [pc, #132]	; (eab8 <udi_cdc_multi_putc+0xa0>)
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    ea32:	4e22      	ldr	r6, [pc, #136]	; (eabc <udi_cdc_multi_putc+0xa4>)
    ea34:	4698      	mov	r8, r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    ea36:	4b22      	ldr	r3, [pc, #136]	; (eac0 <udi_cdc_multi_putc+0xa8>)
{
    ea38:	b082      	sub	sp, #8
	buf_sel = udi_cdc_tx_buf_sel[port];
    ea3a:	4699      	mov	r9, r3
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    ea3c:	b2ed      	uxtb	r5, r5
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    ea3e:	2000      	movs	r0, #0
    ea40:	47b8      	blx	r7
	if (!udi_cdc_multi_is_tx_ready(port)) {
    ea42:	2800      	cmp	r0, #0
    ea44:	d109      	bne.n	ea5a <udi_cdc_multi_putc+0x42>
		if (!udi_cdc_data_running) {
    ea46:	4b1f      	ldr	r3, [pc, #124]	; (eac4 <udi_cdc_multi_putc+0xac>)
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d1f7      	bne.n	ea3e <udi_cdc_multi_putc+0x26>
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    ea4e:	b002      	add	sp, #8
    ea50:	bc1c      	pop	{r2, r3, r4}
    ea52:	4690      	mov	r8, r2
    ea54:	4699      	mov	r9, r3
    ea56:	46a2      	mov	sl, r4
    ea58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ea5a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ea5e:	425a      	negs	r2, r3
    ea60:	4153      	adcs	r3, r2
    ea62:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ea64:	b672      	cpsid	i
    ea66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ea6a:	2300      	movs	r3, #0
    ea6c:	4642      	mov	r2, r8
    ea6e:	7013      	strb	r3, [r2, #0]
	return flags;
    ea70:	9b01      	ldr	r3, [sp, #4]
    ea72:	469a      	mov	sl, r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    ea74:	464b      	mov	r3, r9
    ea76:	781b      	ldrb	r3, [r3, #0]
    ea78:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    ea7a:	005a      	lsls	r2, r3, #1
    ea7c:	5b91      	ldrh	r1, [r2, r6]
    ea7e:	019b      	lsls	r3, r3, #6
    ea80:	1c48      	adds	r0, r1, #1
    ea82:	5390      	strh	r0, [r2, r6]
    ea84:	4a10      	ldr	r2, [pc, #64]	; (eac8 <udi_cdc_multi_putc+0xb0>)
    ea86:	18d3      	adds	r3, r2, r3
    ea88:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
    ea8a:	4653      	mov	r3, sl
    ea8c:	2b00      	cmp	r3, #0
    ea8e:	d104      	bne.n	ea9a <udi_cdc_multi_putc+0x82>
	if (b_databit_9) {
    ea90:	2d00      	cmp	r5, #0
    ea92:	d00a      	beq.n	eaaa <udi_cdc_multi_putc+0x92>
		value = value >> 8;
    ea94:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
    ea96:	2500      	movs	r5, #0
		goto udi_cdc_putc_process_one_byte;
    ea98:	e7d1      	b.n	ea3e <udi_cdc_multi_putc+0x26>
		cpu_irq_enable();
    ea9a:	2301      	movs	r3, #1
    ea9c:	4642      	mov	r2, r8
    ea9e:	7013      	strb	r3, [r2, #0]
    eaa0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    eaa4:	b662      	cpsie	i
	if (b_databit_9) {
    eaa6:	2d00      	cmp	r5, #0
    eaa8:	d1f4      	bne.n	ea94 <udi_cdc_multi_putc+0x7c>
	return true;
    eaaa:	2001      	movs	r0, #1
    eaac:	e7cf      	b.n	ea4e <udi_cdc_multi_putc+0x36>
    eaae:	46c0      	nop			; (mov r8, r8)
    eab0:	2000090c 	.word	0x2000090c
    eab4:	0000e9a1 	.word	0x0000e9a1
    eab8:	200001f9 	.word	0x200001f9
    eabc:	20000a30 	.word	0x20000a30
    eac0:	20000a34 	.word	0x20000a34
    eac4:	20000908 	.word	0x20000908
    eac8:	200009b0 	.word	0x200009b0

0000eacc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    eacc:	b510      	push	{r4, lr}
    eace:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
    ead0:	4b01      	ldr	r3, [pc, #4]	; (ead8 <udi_cdc_putc+0xc>)
    ead2:	2000      	movs	r0, #0
    ead4:	4798      	blx	r3
}
    ead6:	bd10      	pop	{r4, pc}
    ead8:	0000ea19 	.word	0x0000ea19

0000eadc <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    eadc:	207f      	movs	r0, #127	; 0x7f
{
    eade:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    eae0:	4b02      	ldr	r3, [pc, #8]	; (eaec <udc_valid_address+0x10>)
    eae2:	885b      	ldrh	r3, [r3, #2]
    eae4:	4018      	ands	r0, r3
    eae6:	4b02      	ldr	r3, [pc, #8]	; (eaf0 <udc_valid_address+0x14>)
    eae8:	4798      	blx	r3
}
    eaea:	bd10      	pop	{r4, pc}
    eaec:	2000113c 	.word	0x2000113c
    eaf0:	00011441 	.word	0x00011441

0000eaf4 <udc_update_iface_desc.part.0>:
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
    eaf4:	b570      	push	{r4, r5, r6, lr}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    eaf6:	4b14      	ldr	r3, [pc, #80]	; (eb48 <udc_update_iface_desc.part.0+0x54>)
    eaf8:	681b      	ldr	r3, [r3, #0]
    eafa:	681b      	ldr	r3, [r3, #0]
    eafc:	791a      	ldrb	r2, [r3, #4]
    eafe:	4282      	cmp	r2, r0
    eb00:	d91d      	bls.n	eb3e <udc_update_iface_desc.part.0+0x4a>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    eb02:	4e12      	ldr	r6, [pc, #72]	; (eb4c <udc_update_iface_desc.part.0+0x58>)
    eb04:	6033      	str	r3, [r6, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    eb06:	78dc      	ldrb	r4, [r3, #3]
    eb08:	789a      	ldrb	r2, [r3, #2]
    eb0a:	0224      	lsls	r4, r4, #8
    eb0c:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    eb0e:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    eb10:	42a3      	cmp	r3, r4
    eb12:	d214      	bcs.n	eb3e <udc_update_iface_desc.part.0+0x4a>
    eb14:	2500      	movs	r5, #0
    eb16:	e004      	b.n	eb22 <udc_update_iface_desc.part.0+0x2e>
				udc_ptr_iface->bLength);
    eb18:	781a      	ldrb	r2, [r3, #0]
    eb1a:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    eb1c:	189b      	adds	r3, r3, r2
	while (ptr_end_desc >
    eb1e:	429c      	cmp	r4, r3
    eb20:	d90c      	bls.n	eb3c <udc_update_iface_desc.part.0+0x48>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    eb22:	785a      	ldrb	r2, [r3, #1]
    eb24:	2a04      	cmp	r2, #4
    eb26:	d1f7      	bne.n	eb18 <udc_update_iface_desc.part.0+0x24>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    eb28:	789a      	ldrb	r2, [r3, #2]
    eb2a:	4282      	cmp	r2, r0
    eb2c:	d1f4      	bne.n	eb18 <udc_update_iface_desc.part.0+0x24>
    eb2e:	78da      	ldrb	r2, [r3, #3]
    eb30:	428a      	cmp	r2, r1
    eb32:	d1f1      	bne.n	eb18 <udc_update_iface_desc.part.0+0x24>
    eb34:	2d00      	cmp	r5, #0
    eb36:	d104      	bne.n	eb42 <udc_update_iface_desc.part.0+0x4e>
				return true; // Interface found
    eb38:	2001      	movs	r0, #1
    eb3a:	e001      	b.n	eb40 <udc_update_iface_desc.part.0+0x4c>
    eb3c:	6033      	str	r3, [r6, #0]
		return false;
    eb3e:	2000      	movs	r0, #0
}
    eb40:	bd70      	pop	{r4, r5, r6, pc}
    eb42:	6033      	str	r3, [r6, #0]
				return true; // Interface found
    eb44:	2001      	movs	r0, #1
    eb46:	e7fb      	b.n	eb40 <udc_update_iface_desc.part.0+0x4c>
    eb48:	20000a58 	.word	0x20000a58
    eb4c:	20000a5c 	.word	0x20000a5c

0000eb50 <udc_iface_disable>:
{
    eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb52:	46c6      	mov	lr, r8
    eb54:	b500      	push	{lr}
	if (0 == udc_num_configuration) {
    eb56:	4c1d      	ldr	r4, [pc, #116]	; (ebcc <udc_iface_disable+0x7c>)
{
    eb58:	0006      	movs	r6, r0
	if (0 == udc_num_configuration) {
    eb5a:	7823      	ldrb	r3, [r4, #0]
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d105      	bne.n	eb6c <udc_iface_disable+0x1c>
		return false;
    eb60:	2300      	movs	r3, #0
    eb62:	4698      	mov	r8, r3
}
    eb64:	4640      	mov	r0, r8
    eb66:	bc04      	pop	{r2}
    eb68:	4690      	mov	r8, r2
    eb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb6c:	4b18      	ldr	r3, [pc, #96]	; (ebd0 <udc_iface_disable+0x80>)
    eb6e:	2100      	movs	r1, #0
    eb70:	4698      	mov	r8, r3
    eb72:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    eb74:	2800      	cmp	r0, #0
    eb76:	d0f3      	beq.n	eb60 <udc_iface_disable+0x10>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    eb78:	4d16      	ldr	r5, [pc, #88]	; (ebd4 <udc_iface_disable+0x84>)
    eb7a:	00b2      	lsls	r2, r6, #2
    eb7c:	682b      	ldr	r3, [r5, #0]
    eb7e:	685b      	ldr	r3, [r3, #4]
    eb80:	58d7      	ldr	r7, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    eb82:	68fb      	ldr	r3, [r7, #12]
    eb84:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    eb86:	7823      	ldrb	r3, [r4, #0]
    eb88:	2b00      	cmp	r3, #0
    eb8a:	d0e9      	beq.n	eb60 <udc_iface_disable+0x10>
    eb8c:	0001      	movs	r1, r0
    eb8e:	0030      	movs	r0, r6
    eb90:	47c0      	blx	r8
    eb92:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    eb94:	2800      	cmp	r0, #0
    eb96:	d0e3      	beq.n	eb60 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    eb98:	4b0f      	ldr	r3, [pc, #60]	; (ebd8 <udc_iface_disable+0x88>)
			udd_ep_free(ep_desc->bEndpointAddress);
    eb9a:	4e10      	ldr	r6, [pc, #64]	; (ebdc <udc_iface_disable+0x8c>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    eb9c:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
    eb9e:	682b      	ldr	r3, [r5, #0]
    eba0:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    eba2:	78d3      	ldrb	r3, [r2, #3]
    eba4:	7891      	ldrb	r1, [r2, #2]
    eba6:	021b      	lsls	r3, r3, #8
    eba8:	430b      	orrs	r3, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    ebaa:	18d2      	adds	r2, r2, r3
    ebac:	e004      	b.n	ebb8 <udc_iface_disable+0x68>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    ebae:	7863      	ldrb	r3, [r4, #1]
    ebb0:	2b04      	cmp	r3, #4
    ebb2:	d005      	beq.n	ebc0 <udc_iface_disable+0x70>
		if (desc_id == desc->bDescriptorType) {
    ebb4:	2b05      	cmp	r3, #5
    ebb6:	d006      	beq.n	ebc6 <udc_iface_disable+0x76>
			desc->bLength);
    ebb8:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    ebba:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    ebbc:	42a2      	cmp	r2, r4
    ebbe:	d8f6      	bhi.n	ebae <udc_iface_disable+0x5e>
	udi_api->disable();
    ebc0:	687b      	ldr	r3, [r7, #4]
    ebc2:	4798      	blx	r3
    ebc4:	e7ce      	b.n	eb64 <udc_iface_disable+0x14>
			udd_ep_free(ep_desc->bEndpointAddress);
    ebc6:	78a0      	ldrb	r0, [r4, #2]
    ebc8:	47b0      	blx	r6
    ebca:	e7e8      	b.n	eb9e <udc_iface_disable+0x4e>
    ebcc:	20000a54 	.word	0x20000a54
    ebd0:	0000eaf5 	.word	0x0000eaf5
    ebd4:	20000a58 	.word	0x20000a58
    ebd8:	20000a5c 	.word	0x20000a5c
    ebdc:	00011021 	.word	0x00011021

0000ebe0 <udc_iface_enable>:
{
    ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (0 == udc_num_configuration) {
    ebe2:	4b18      	ldr	r3, [pc, #96]	; (ec44 <udc_iface_enable+0x64>)
{
    ebe4:	0005      	movs	r5, r0
	if (0 == udc_num_configuration) {
    ebe6:	781b      	ldrb	r3, [r3, #0]
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d101      	bne.n	ebf0 <udc_iface_enable+0x10>
		return false;
    ebec:	2000      	movs	r0, #0
}
    ebee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebf0:	4b15      	ldr	r3, [pc, #84]	; (ec48 <udc_iface_enable+0x68>)
    ebf2:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    ebf4:	2800      	cmp	r0, #0
    ebf6:	d0f9      	beq.n	ebec <udc_iface_enable+0xc>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    ebf8:	4b14      	ldr	r3, [pc, #80]	; (ec4c <udc_iface_enable+0x6c>)
    ebfa:	4e15      	ldr	r6, [pc, #84]	; (ec50 <udc_iface_enable+0x70>)
    ebfc:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    ebfe:	4f15      	ldr	r7, [pc, #84]	; (ec54 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
    ec00:	6831      	ldr	r1, [r6, #0]
    ec02:	680b      	ldr	r3, [r1, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    ec04:	78da      	ldrb	r2, [r3, #3]
    ec06:	7898      	ldrb	r0, [r3, #2]
    ec08:	0212      	lsls	r2, r2, #8
    ec0a:	4302      	orrs	r2, r0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    ec0c:	189a      	adds	r2, r3, r2
    ec0e:	e004      	b.n	ec1a <udc_iface_enable+0x3a>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    ec10:	7863      	ldrb	r3, [r4, #1]
    ec12:	2b04      	cmp	r3, #4
    ec14:	d005      	beq.n	ec22 <udc_iface_enable+0x42>
		if (desc_id == desc->bDescriptorType) {
    ec16:	2b05      	cmp	r3, #5
    ec18:	d009      	beq.n	ec2e <udc_iface_enable+0x4e>
			desc->bLength);
    ec1a:	7823      	ldrb	r3, [r4, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    ec1c:	18e4      	adds	r4, r4, r3
	while (ptr_eof_desc > desc) {
    ec1e:	42a2      	cmp	r2, r4
    ec20:	d8f6      	bhi.n	ec10 <udc_iface_enable+0x30>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    ec22:	684b      	ldr	r3, [r1, #4]
    ec24:	00ad      	lsls	r5, r5, #2
    ec26:	58eb      	ldr	r3, [r5, r3]
    ec28:	681b      	ldr	r3, [r3, #0]
    ec2a:	4798      	blx	r3
    ec2c:	e7df      	b.n	ebee <udc_iface_enable+0xe>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    ec2e:	7962      	ldrb	r2, [r4, #5]
    ec30:	7923      	ldrb	r3, [r4, #4]
    ec32:	0212      	lsls	r2, r2, #8
    ec34:	431a      	orrs	r2, r3
    ec36:	78e1      	ldrb	r1, [r4, #3]
    ec38:	78a0      	ldrb	r0, [r4, #2]
    ec3a:	47b8      	blx	r7
    ec3c:	2800      	cmp	r0, #0
    ec3e:	d1df      	bne.n	ec00 <udc_iface_enable+0x20>
    ec40:	e7d4      	b.n	ebec <udc_iface_enable+0xc>
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	20000a54 	.word	0x20000a54
    ec48:	0000eaf5 	.word	0x0000eaf5
    ec4c:	20000a5c 	.word	0x20000a5c
    ec50:	20000a58 	.word	0x20000a58
    ec54:	00011079 	.word	0x00011079

0000ec58 <udc_start>:
{
    ec58:	b510      	push	{r4, lr}
	udd_enable();
    ec5a:	4b01      	ldr	r3, [pc, #4]	; (ec60 <udc_start+0x8>)
    ec5c:	4798      	blx	r3
}
    ec5e:	bd10      	pop	{r4, pc}
    ec60:	000114f1 	.word	0x000114f1

0000ec64 <udc_reset>:
{
    ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
    ec66:	4f0d      	ldr	r7, [pc, #52]	; (ec9c <udc_reset+0x38>)
    ec68:	783b      	ldrb	r3, [r7, #0]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d010      	beq.n	ec90 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ec6e:	4d0c      	ldr	r5, [pc, #48]	; (eca0 <udc_reset+0x3c>)
    ec70:	682b      	ldr	r3, [r5, #0]
    ec72:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    ec74:	791b      	ldrb	r3, [r3, #4]
    ec76:	2b00      	cmp	r3, #0
    ec78:	d00a      	beq.n	ec90 <udc_reset+0x2c>
    ec7a:	2400      	movs	r4, #0
    ec7c:	4e09      	ldr	r6, [pc, #36]	; (eca4 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    ec7e:	0020      	movs	r0, r4
    ec80:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ec82:	682b      	ldr	r3, [r5, #0]
				iface_num++) {
    ec84:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ec86:	681b      	ldr	r3, [r3, #0]
				iface_num++) {
    ec88:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    ec8a:	791b      	ldrb	r3, [r3, #4]
    ec8c:	42a3      	cmp	r3, r4
    ec8e:	d8f6      	bhi.n	ec7e <udc_reset+0x1a>
	udc_num_configuration = 0;
    ec90:	2300      	movs	r3, #0
	udc_device_status =
    ec92:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    ec94:	703b      	strb	r3, [r7, #0]
	udc_device_status =
    ec96:	4b04      	ldr	r3, [pc, #16]	; (eca8 <udc_reset+0x44>)
    ec98:	801a      	strh	r2, [r3, #0]
}
    ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec9c:	20000a54 	.word	0x20000a54
    eca0:	20000a58 	.word	0x20000a58
    eca4:	0000eb51 	.word	0x0000eb51
    eca8:	20000a4a 	.word	0x20000a4a

0000ecac <udc_sof_notify>:
{
    ecac:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    ecae:	4b0d      	ldr	r3, [pc, #52]	; (ece4 <udc_sof_notify+0x38>)
    ecb0:	781b      	ldrb	r3, [r3, #0]
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	d014      	beq.n	ece0 <udc_sof_notify+0x34>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ecb6:	4d0c      	ldr	r5, [pc, #48]	; (ece8 <udc_sof_notify+0x3c>)
    ecb8:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    ecba:	681a      	ldr	r2, [r3, #0]
    ecbc:	7912      	ldrb	r2, [r2, #4]
    ecbe:	2a00      	cmp	r2, #0
    ecc0:	d00e      	beq.n	ece0 <udc_sof_notify+0x34>
    ecc2:	2400      	movs	r4, #0
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    ecc4:	685b      	ldr	r3, [r3, #4]
    ecc6:	00a2      	lsls	r2, r4, #2
    ecc8:	58d3      	ldr	r3, [r2, r3]
    ecca:	691b      	ldr	r3, [r3, #16]
    eccc:	2b00      	cmp	r3, #0
    ecce:	d000      	beq.n	ecd2 <udc_sof_notify+0x26>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    ecd0:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ecd2:	682b      	ldr	r3, [r5, #0]
				iface_num++) {
    ecd4:	3401      	adds	r4, #1
		for (iface_num = 0;
    ecd6:	681a      	ldr	r2, [r3, #0]
				iface_num++) {
    ecd8:	b2e4      	uxtb	r4, r4
		for (iface_num = 0;
    ecda:	7912      	ldrb	r2, [r2, #4]
    ecdc:	42a2      	cmp	r2, r4
    ecde:	d8f1      	bhi.n	ecc4 <udc_sof_notify+0x18>
}
    ece0:	bd70      	pop	{r4, r5, r6, pc}
    ece2:	46c0      	nop			; (mov r8, r8)
    ece4:	20000a54 	.word	0x20000a54
    ece8:	20000a58 	.word	0x20000a58

0000ecec <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    ecec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecee:	46ce      	mov	lr, r9
    ecf0:	4647      	mov	r7, r8
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    ecf2:	2300      	movs	r3, #0
{
    ecf4:	b580      	push	{r7, lr}
	udd_g_ctrlreq.payload_size = 0;
    ecf6:	4ca3      	ldr	r4, [pc, #652]	; (ef84 <udc_process_setup+0x298>)
    ecf8:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    ecfa:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    ecfc:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    ecfe:	7823      	ldrb	r3, [r4, #0]
    ed00:	b25a      	sxtb	r2, r3
    ed02:	2a00      	cmp	r2, #0
    ed04:	db0e      	blt.n	ed24 <udc_process_setup+0x38>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    ed06:	2260      	movs	r2, #96	; 0x60
    ed08:	421a      	tst	r2, r3
    ed0a:	d04d      	beq.n	eda8 <udc_process_setup+0xbc>
    ed0c:	221f      	movs	r2, #31
    ed0e:	4013      	ands	r3, r2
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    ed10:	2b01      	cmp	r3, #1
    ed12:	d067      	beq.n	ede4 <udc_process_setup+0xf8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    ed14:	2b02      	cmp	r3, #2
    ed16:	d020      	beq.n	ed5a <udc_process_setup+0x6e>
			return false; // Error from USB host
    ed18:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    ed1a:	0028      	movs	r0, r5
    ed1c:	bc0c      	pop	{r2, r3}
    ed1e:	4690      	mov	r8, r2
    ed20:	4699      	mov	r9, r3
    ed22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    ed24:	88e2      	ldrh	r2, [r4, #6]
    ed26:	2a00      	cmp	r2, #0
    ed28:	d0f6      	beq.n	ed18 <udc_process_setup+0x2c>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    ed2a:	2160      	movs	r1, #96	; 0x60
    ed2c:	4219      	tst	r1, r3
    ed2e:	d1ed      	bne.n	ed0c <udc_process_setup+0x20>
    ed30:	211f      	movs	r1, #31
    ed32:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    ed34:	d000      	beq.n	ed38 <udc_process_setup+0x4c>
    ed36:	e099      	b.n	ee6c <udc_process_setup+0x180>
			switch (udd_g_ctrlreq.req.bRequest) {
    ed38:	7863      	ldrb	r3, [r4, #1]
    ed3a:	2b06      	cmp	r3, #6
    ed3c:	d100      	bne.n	ed40 <udc_process_setup+0x54>
    ed3e:	e141      	b.n	efc4 <udc_process_setup+0x2d8>
    ed40:	2b08      	cmp	r3, #8
    ed42:	d100      	bne.n	ed46 <udc_process_setup+0x5a>
    ed44:	e114      	b.n	ef70 <udc_process_setup+0x284>
    ed46:	2b00      	cmp	r3, #0
    ed48:	d1e6      	bne.n	ed18 <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    ed4a:	2a02      	cmp	r2, #2
    ed4c:	d1e4      	bne.n	ed18 <udc_process_setup+0x2c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    ed4e:	391d      	subs	r1, #29
    ed50:	488d      	ldr	r0, [pc, #564]	; (ef88 <udc_process_setup+0x29c>)
    ed52:	4b8e      	ldr	r3, [pc, #568]	; (ef8c <udc_process_setup+0x2a0>)
    ed54:	4798      	blx	r3
			return true;
    ed56:	2501      	movs	r5, #1
    ed58:	e7df      	b.n	ed1a <udc_process_setup+0x2e>
	if (0 == udc_num_configuration) {
    ed5a:	4e8d      	ldr	r6, [pc, #564]	; (ef90 <udc_process_setup+0x2a4>)
    ed5c:	7833      	ldrb	r3, [r6, #0]
    ed5e:	2b00      	cmp	r3, #0
    ed60:	d0da      	beq.n	ed18 <udc_process_setup+0x2c>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ed62:	4f8c      	ldr	r7, [pc, #560]	; (ef94 <udc_process_setup+0x2a8>)
    ed64:	683b      	ldr	r3, [r7, #0]
    ed66:	681a      	ldr	r2, [r3, #0]
    ed68:	7912      	ldrb	r2, [r2, #4]
    ed6a:	2a00      	cmp	r2, #0
    ed6c:	d0d4      	beq.n	ed18 <udc_process_setup+0x2c>
    ed6e:	4a8a      	ldr	r2, [pc, #552]	; (ef98 <udc_process_setup+0x2ac>)
    ed70:	2400      	movs	r4, #0
    ed72:	4690      	mov	r8, r2
    ed74:	e00f      	b.n	ed96 <udc_process_setup+0xaa>
    ed76:	0001      	movs	r1, r0
    ed78:	0020      	movs	r0, r4
    ed7a:	47c0      	blx	r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    ed7c:	2800      	cmp	r0, #0
    ed7e:	d0cb      	beq.n	ed18 <udc_process_setup+0x2c>
		if (udi_api->setup()) {
    ed80:	68ab      	ldr	r3, [r5, #8]
    ed82:	4798      	blx	r3
    ed84:	2800      	cmp	r0, #0
    ed86:	d15d      	bne.n	ee44 <udc_process_setup+0x158>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ed88:	683b      	ldr	r3, [r7, #0]
			iface_num++) {
    ed8a:	3401      	adds	r4, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ed8c:	681a      	ldr	r2, [r3, #0]
			iface_num++) {
    ed8e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    ed90:	7912      	ldrb	r2, [r2, #4]
    ed92:	42a2      	cmp	r2, r4
    ed94:	d9c0      	bls.n	ed18 <udc_process_setup+0x2c>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    ed96:	685b      	ldr	r3, [r3, #4]
    ed98:	00a2      	lsls	r2, r4, #2
    ed9a:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    ed9c:	68eb      	ldr	r3, [r5, #12]
    ed9e:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    eda0:	7833      	ldrb	r3, [r6, #0]
    eda2:	2b00      	cmp	r3, #0
    eda4:	d1e7      	bne.n	ed76 <udc_process_setup+0x8a>
    eda6:	e7b7      	b.n	ed18 <udc_process_setup+0x2c>
    eda8:	251f      	movs	r5, #31
    edaa:	402b      	ands	r3, r5
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    edac:	d132      	bne.n	ee14 <udc_process_setup+0x128>
			switch (udd_g_ctrlreq.req.bRequest) {
    edae:	7863      	ldrb	r3, [r4, #1]
    edb0:	2b03      	cmp	r3, #3
    edb2:	d0b1      	beq.n	ed18 <udc_process_setup+0x2c>
    edb4:	d948      	bls.n	ee48 <udc_process_setup+0x15c>
    edb6:	2b05      	cmp	r3, #5
    edb8:	d100      	bne.n	edbc <udc_process_setup+0xd0>
    edba:	e086      	b.n	eeca <udc_process_setup+0x1de>
    edbc:	2b09      	cmp	r3, #9
    edbe:	d1ab      	bne.n	ed18 <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength) {
    edc0:	88e3      	ldrh	r3, [r4, #6]
    edc2:	2b00      	cmp	r3, #0
    edc4:	d1a8      	bne.n	ed18 <udc_process_setup+0x2c>
	if (!udd_getaddress()) {
    edc6:	4b75      	ldr	r3, [pc, #468]	; (ef9c <udc_process_setup+0x2b0>)
    edc8:	4798      	blx	r3
    edca:	2800      	cmp	r0, #0
    edcc:	d006      	beq.n	eddc <udc_process_setup+0xf0>
				udc_config.confdev_lsfs->bNumConfigurations) {
    edce:	4d74      	ldr	r5, [pc, #464]	; (efa0 <udc_process_setup+0x2b4>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    edd0:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    edd2:	682b      	ldr	r3, [r5, #0]
    edd4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    edd6:	429a      	cmp	r2, r3
    edd8:	dc00      	bgt.n	eddc <udc_process_setup+0xf0>
    edda:	e110      	b.n	effe <udc_process_setup+0x312>
    eddc:	231f      	movs	r3, #31
    edde:	7822      	ldrb	r2, [r4, #0]
    ede0:	4013      	ands	r3, r2
    ede2:	e795      	b.n	ed10 <udc_process_setup+0x24>
    ede4:	4e6a      	ldr	r6, [pc, #424]	; (ef90 <udc_process_setup+0x2a4>)
    ede6:	7833      	ldrb	r3, [r6, #0]
	if (0 == udc_num_configuration) {
    ede8:	2b00      	cmp	r3, #0
    edea:	d100      	bne.n	edee <udc_process_setup+0x102>
    edec:	e794      	b.n	ed18 <udc_process_setup+0x2c>
    edee:	4f69      	ldr	r7, [pc, #420]	; (ef94 <udc_process_setup+0x2a8>)
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    edf0:	683f      	ldr	r7, [r7, #0]
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    edf2:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    edf4:	683b      	ldr	r3, [r7, #0]
    edf6:	791b      	ldrb	r3, [r3, #4]
    edf8:	42ab      	cmp	r3, r5
    edfa:	d800      	bhi.n	edfe <udc_process_setup+0x112>
    edfc:	e78c      	b.n	ed18 <udc_process_setup+0x2c>
    edfe:	4b66      	ldr	r3, [pc, #408]	; (ef98 <udc_process_setup+0x2ac>)
    ee00:	2100      	movs	r1, #0
    ee02:	0028      	movs	r0, r5
    ee04:	4698      	mov	r8, r3
    ee06:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
    ee08:	2800      	cmp	r0, #0
    ee0a:	d172      	bne.n	eef2 <udc_process_setup+0x206>
    ee0c:	231f      	movs	r3, #31
    ee0e:	7822      	ldrb	r2, [r4, #0]
    ee10:	4013      	ands	r3, r2
    ee12:	e77f      	b.n	ed14 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    ee14:	2b01      	cmp	r3, #1
    ee16:	d040      	beq.n	ee9a <udc_process_setup+0x1ae>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    ee18:	2b02      	cmp	r3, #2
    ee1a:	d000      	beq.n	ee1e <udc_process_setup+0x132>
    ee1c:	e77c      	b.n	ed18 <udc_process_setup+0x2c>
			switch (udd_g_ctrlreq.req.bRequest) {
    ee1e:	7863      	ldrb	r3, [r4, #1]
    ee20:	2b01      	cmp	r3, #1
    ee22:	d05a      	beq.n	eeda <udc_process_setup+0x1ee>
    ee24:	2b03      	cmp	r3, #3
    ee26:	d198      	bne.n	ed5a <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wLength) {
    ee28:	88e3      	ldrh	r3, [r4, #6]
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d195      	bne.n	ed5a <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    ee2e:	8863      	ldrh	r3, [r4, #2]
    ee30:	2b00      	cmp	r3, #0
    ee32:	d192      	bne.n	ed5a <udc_process_setup+0x6e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    ee34:	7920      	ldrb	r0, [r4, #4]
    ee36:	4b5b      	ldr	r3, [pc, #364]	; (efa4 <udc_process_setup+0x2b8>)
    ee38:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    ee3a:	7920      	ldrb	r0, [r4, #4]
    ee3c:	4b5a      	ldr	r3, [pc, #360]	; (efa8 <udc_process_setup+0x2bc>)
    ee3e:	4798      	blx	r3
		if (udc_reqstd()) {
    ee40:	2800      	cmp	r0, #0
    ee42:	d02d      	beq.n	eea0 <udc_process_setup+0x1b4>
			return true;
    ee44:	2501      	movs	r5, #1
    ee46:	e768      	b.n	ed1a <udc_process_setup+0x2e>
			switch (udd_g_ctrlreq.req.bRequest) {
    ee48:	2b01      	cmp	r3, #1
    ee4a:	d000      	beq.n	ee4e <udc_process_setup+0x162>
    ee4c:	e764      	b.n	ed18 <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wLength) {
    ee4e:	88e3      	ldrh	r3, [r4, #6]
    ee50:	2b00      	cmp	r3, #0
    ee52:	d000      	beq.n	ee56 <udc_process_setup+0x16a>
    ee54:	e760      	b.n	ed18 <udc_process_setup+0x2c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    ee56:	8863      	ldrh	r3, [r4, #2]
    ee58:	2b01      	cmp	r3, #1
    ee5a:	d000      	beq.n	ee5e <udc_process_setup+0x172>
    ee5c:	e75c      	b.n	ed18 <udc_process_setup+0x2c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    ee5e:	2102      	movs	r1, #2
    ee60:	4a49      	ldr	r2, [pc, #292]	; (ef88 <udc_process_setup+0x29c>)
			return true;
    ee62:	2501      	movs	r5, #1
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    ee64:	8813      	ldrh	r3, [r2, #0]
    ee66:	438b      	bics	r3, r1
    ee68:	8013      	strh	r3, [r2, #0]
    ee6a:	e756      	b.n	ed1a <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    ee6c:	2b01      	cmp	r3, #1
    ee6e:	d056      	beq.n	ef1e <udc_process_setup+0x232>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    ee70:	2b02      	cmp	r3, #2
    ee72:	d000      	beq.n	ee76 <udc_process_setup+0x18a>
    ee74:	e750      	b.n	ed18 <udc_process_setup+0x2c>
			switch (udd_g_ctrlreq.req.bRequest) {
    ee76:	7863      	ldrb	r3, [r4, #1]
    ee78:	2b00      	cmp	r3, #0
    ee7a:	d000      	beq.n	ee7e <udc_process_setup+0x192>
    ee7c:	e76d      	b.n	ed5a <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    ee7e:	2a02      	cmp	r2, #2
    ee80:	d000      	beq.n	ee84 <udc_process_setup+0x198>
    ee82:	e76a      	b.n	ed5a <udc_process_setup+0x6e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    ee84:	4b49      	ldr	r3, [pc, #292]	; (efac <udc_process_setup+0x2c0>)
    ee86:	7920      	ldrb	r0, [r4, #4]
    ee88:	4798      	blx	r3
    ee8a:	4b49      	ldr	r3, [pc, #292]	; (efb0 <udc_process_setup+0x2c4>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    ee8c:	2102      	movs	r1, #2
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    ee8e:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    ee90:	0018      	movs	r0, r3
    ee92:	4b3e      	ldr	r3, [pc, #248]	; (ef8c <udc_process_setup+0x2a0>)
    ee94:	4798      	blx	r3
			return true;
    ee96:	2501      	movs	r5, #1
    ee98:	e73f      	b.n	ed1a <udc_process_setup+0x2e>
			switch (udd_g_ctrlreq.req.bRequest) {
    ee9a:	7863      	ldrb	r3, [r4, #1]
    ee9c:	2b0b      	cmp	r3, #11
    ee9e:	d001      	beq.n	eea4 <udc_process_setup+0x1b8>
    eea0:	7823      	ldrb	r3, [r4, #0]
    eea2:	e733      	b.n	ed0c <udc_process_setup+0x20>
	if (udd_g_ctrlreq.req.wLength) {
    eea4:	88e3      	ldrh	r3, [r4, #6]
    eea6:	2b00      	cmp	r3, #0
    eea8:	d19c      	bne.n	ede4 <udc_process_setup+0xf8>
	if (!udc_num_configuration) {
    eeaa:	4b39      	ldr	r3, [pc, #228]	; (ef90 <udc_process_setup+0x2a4>)
    eeac:	781b      	ldrb	r3, [r3, #0]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d100      	bne.n	eeb4 <udc_process_setup+0x1c8>
    eeb2:	e731      	b.n	ed18 <udc_process_setup+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    eeb4:	7927      	ldrb	r7, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
    eeb6:	4b3f      	ldr	r3, [pc, #252]	; (efb4 <udc_process_setup+0x2c8>)
    eeb8:	0038      	movs	r0, r7
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    eeba:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
    eebc:	4798      	blx	r3
    eebe:	2800      	cmp	r0, #0
    eec0:	d000      	beq.n	eec4 <udc_process_setup+0x1d8>
    eec2:	e0fd      	b.n	f0c0 <udc_process_setup+0x3d4>
    eec4:	7823      	ldrb	r3, [r4, #0]
    eec6:	402b      	ands	r3, r5
    eec8:	e722      	b.n	ed10 <udc_process_setup+0x24>
	if (udd_g_ctrlreq.req.wLength) {
    eeca:	88e3      	ldrh	r3, [r4, #6]
    eecc:	2b00      	cmp	r3, #0
    eece:	d000      	beq.n	eed2 <udc_process_setup+0x1e6>
    eed0:	e722      	b.n	ed18 <udc_process_setup+0x2c>
	udd_g_ctrlreq.callback = udc_valid_address;
    eed2:	4b39      	ldr	r3, [pc, #228]	; (efb8 <udc_process_setup+0x2cc>)
			return true;
    eed4:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
    eed6:	6123      	str	r3, [r4, #16]
    eed8:	e71f      	b.n	ed1a <udc_process_setup+0x2e>
	if (udd_g_ctrlreq.req.wLength) {
    eeda:	88e3      	ldrh	r3, [r4, #6]
    eedc:	2b00      	cmp	r3, #0
    eede:	d000      	beq.n	eee2 <udc_process_setup+0x1f6>
    eee0:	e73b      	b.n	ed5a <udc_process_setup+0x6e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    eee2:	8863      	ldrh	r3, [r4, #2]
    eee4:	2b00      	cmp	r3, #0
    eee6:	d000      	beq.n	eeea <udc_process_setup+0x1fe>
    eee8:	e737      	b.n	ed5a <udc_process_setup+0x6e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    eeea:	7920      	ldrb	r0, [r4, #4]
    eeec:	4b33      	ldr	r3, [pc, #204]	; (efbc <udc_process_setup+0x2d0>)
    eeee:	4798      	blx	r3
    eef0:	e7a6      	b.n	ee40 <udc_process_setup+0x154>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    eef2:	687b      	ldr	r3, [r7, #4]
    eef4:	00aa      	lsls	r2, r5, #2
    eef6:	58d7      	ldr	r7, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    eef8:	68fb      	ldr	r3, [r7, #12]
    eefa:	4798      	blx	r3
	if (0 == udc_num_configuration) {
    eefc:	7833      	ldrb	r3, [r6, #0]
    eefe:	2b00      	cmp	r3, #0
    ef00:	d100      	bne.n	ef04 <udc_process_setup+0x218>
    ef02:	e709      	b.n	ed18 <udc_process_setup+0x2c>
    ef04:	0001      	movs	r1, r0
    ef06:	0028      	movs	r0, r5
    ef08:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    ef0a:	2800      	cmp	r0, #0
    ef0c:	d003      	beq.n	ef16 <udc_process_setup+0x22a>
	return udi_api->setup();
    ef0e:	68bb      	ldr	r3, [r7, #8]
    ef10:	4798      	blx	r3
		if (udc_req_iface()) {
    ef12:	2800      	cmp	r0, #0
    ef14:	d196      	bne.n	ee44 <udc_process_setup+0x158>
    ef16:	221f      	movs	r2, #31
    ef18:	7823      	ldrb	r3, [r4, #0]
    ef1a:	4013      	ands	r3, r2
    ef1c:	e6fa      	b.n	ed14 <udc_process_setup+0x28>
			switch (udd_g_ctrlreq.req.bRequest) {
    ef1e:	7863      	ldrb	r3, [r4, #1]
    ef20:	2b0a      	cmp	r3, #10
    ef22:	d1bd      	bne.n	eea0 <udc_process_setup+0x1b4>
	if (udd_g_ctrlreq.req.wLength != 1) {
    ef24:	2a01      	cmp	r2, #1
    ef26:	d000      	beq.n	ef2a <udc_process_setup+0x23e>
    ef28:	e75c      	b.n	ede4 <udc_process_setup+0xf8>
	if (!udc_num_configuration) {
    ef2a:	4e19      	ldr	r6, [pc, #100]	; (ef90 <udc_process_setup+0x2a4>)
    ef2c:	7833      	ldrb	r3, [r6, #0]
    ef2e:	2b00      	cmp	r3, #0
    ef30:	d100      	bne.n	ef34 <udc_process_setup+0x248>
    ef32:	e6f1      	b.n	ed18 <udc_process_setup+0x2c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    ef34:	7923      	ldrb	r3, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    ef36:	4f17      	ldr	r7, [pc, #92]	; (ef94 <udc_process_setup+0x2a8>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    ef38:	4698      	mov	r8, r3
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    ef3a:	683b      	ldr	r3, [r7, #0]
    ef3c:	4699      	mov	r9, r3
    ef3e:	681b      	ldr	r3, [r3, #0]
    ef40:	791b      	ldrb	r3, [r3, #4]
    ef42:	4543      	cmp	r3, r8
    ef44:	d800      	bhi.n	ef48 <udc_process_setup+0x25c>
    ef46:	e753      	b.n	edf0 <udc_process_setup+0x104>
    ef48:	2100      	movs	r1, #0
    ef4a:	4640      	mov	r0, r8
    ef4c:	4b12      	ldr	r3, [pc, #72]	; (ef98 <udc_process_setup+0x2ac>)
    ef4e:	4798      	blx	r3
    ef50:	1e05      	subs	r5, r0, #0
	if (!udc_update_iface_desc(iface_num, 0)) {
    ef52:	d0a5      	beq.n	eea0 <udc_process_setup+0x1b4>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    ef54:	464b      	mov	r3, r9
    ef56:	685a      	ldr	r2, [r3, #4]
    ef58:	4643      	mov	r3, r8
    ef5a:	009b      	lsls	r3, r3, #2
	udc_iface_setting = udi_api->getsetting();
    ef5c:	589b      	ldr	r3, [r3, r2]
    ef5e:	68db      	ldr	r3, [r3, #12]
    ef60:	4798      	blx	r3
    ef62:	4b17      	ldr	r3, [pc, #92]	; (efc0 <udc_process_setup+0x2d4>)
	udd_set_setup_payload(&udc_iface_setting,1);
    ef64:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    ef66:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    ef68:	0018      	movs	r0, r3
    ef6a:	4b08      	ldr	r3, [pc, #32]	; (ef8c <udc_process_setup+0x2a0>)
    ef6c:	4798      	blx	r3
    ef6e:	e6d4      	b.n	ed1a <udc_process_setup+0x2e>
	if (udd_g_ctrlreq.req.wLength != 1) {
    ef70:	2a01      	cmp	r2, #1
    ef72:	d000      	beq.n	ef76 <udc_process_setup+0x28a>
    ef74:	e6d0      	b.n	ed18 <udc_process_setup+0x2c>
	udd_set_setup_payload(&udc_num_configuration,1);
    ef76:	2101      	movs	r1, #1
    ef78:	4805      	ldr	r0, [pc, #20]	; (ef90 <udc_process_setup+0x2a4>)
    ef7a:	4b04      	ldr	r3, [pc, #16]	; (ef8c <udc_process_setup+0x2a0>)
    ef7c:	4798      	blx	r3
			return true;
    ef7e:	2501      	movs	r5, #1
    ef80:	e6cb      	b.n	ed1a <udc_process_setup+0x2e>
    ef82:	46c0      	nop			; (mov r8, r8)
    ef84:	2000113c 	.word	0x2000113c
    ef88:	20000a4a 	.word	0x20000a4a
    ef8c:	00011461 	.word	0x00011461
    ef90:	20000a54 	.word	0x20000a54
    ef94:	20000a58 	.word	0x20000a58
    ef98:	0000eaf5 	.word	0x0000eaf5
    ef9c:	00011451 	.word	0x00011451
    efa0:	20000134 	.word	0x20000134
    efa4:	00010e95 	.word	0x00010e95
    efa8:	00011199 	.word	0x00011199
    efac:	00011185 	.word	0x00011185
    efb0:	20000a4c 	.word	0x20000a4c
    efb4:	0000eb51 	.word	0x0000eb51
    efb8:	0000eadd 	.word	0x0000eadd
    efbc:	000111b5 	.word	0x000111b5
    efc0:	20000a50 	.word	0x20000a50
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    efc4:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    efc6:	0a1d      	lsrs	r5, r3, #8
    efc8:	2d02      	cmp	r5, #2
    efca:	d048      	beq.n	f05e <udc_process_setup+0x372>
    efcc:	d93e      	bls.n	f04c <udc_process_setup+0x360>
    efce:	2d03      	cmp	r5, #3
    efd0:	d058      	beq.n	f084 <udc_process_setup+0x398>
    efd2:	2d0f      	cmp	r5, #15
    efd4:	d000      	beq.n	efd8 <udc_process_setup+0x2ec>
    efd6:	e69f      	b.n	ed18 <udc_process_setup+0x2c>
		if (udc_config.conf_bos == NULL) {
    efd8:	4b41      	ldr	r3, [pc, #260]	; (f0e0 <udc_process_setup+0x3f4>)
    efda:	6898      	ldr	r0, [r3, #8]
    efdc:	2800      	cmp	r0, #0
    efde:	d100      	bne.n	efe2 <udc_process_setup+0x2f6>
    efe0:	e69a      	b.n	ed18 <udc_process_setup+0x2c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    efe2:	78c1      	ldrb	r1, [r0, #3]
    efe4:	7883      	ldrb	r3, [r0, #2]
    efe6:	0209      	lsls	r1, r1, #8
    efe8:	4319      	orrs	r1, r3
    efea:	4b3e      	ldr	r3, [pc, #248]	; (f0e4 <udc_process_setup+0x3f8>)
    efec:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    efee:	88e3      	ldrh	r3, [r4, #6]
    eff0:	89a2      	ldrh	r2, [r4, #12]
    eff2:	429a      	cmp	r2, r3
    eff4:	d800      	bhi.n	eff8 <udc_process_setup+0x30c>
    eff6:	e725      	b.n	ee44 <udc_process_setup+0x158>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    eff8:	81a3      	strh	r3, [r4, #12]
			return true;
    effa:	2501      	movs	r5, #1
    effc:	e68d      	b.n	ed1a <udc_process_setup+0x2e>
	udc_reset();
    effe:	4b3a      	ldr	r3, [pc, #232]	; (f0e8 <udc_process_setup+0x3fc>)
    f000:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    f002:	78a3      	ldrb	r3, [r4, #2]
    f004:	4a39      	ldr	r2, [pc, #228]	; (f0ec <udc_process_setup+0x400>)
    f006:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    f008:	2b00      	cmp	r3, #0
    f00a:	d100      	bne.n	f00e <udc_process_setup+0x322>
    f00c:	e71a      	b.n	ee44 <udc_process_setup+0x158>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    f00e:	4a38      	ldr	r2, [pc, #224]	; (f0f0 <udc_process_setup+0x404>)
    f010:	4f38      	ldr	r7, [pc, #224]	; (f0f4 <udc_process_setup+0x408>)
    f012:	4694      	mov	ip, r2
    f014:	686a      	ldr	r2, [r5, #4]
    f016:	4463      	add	r3, ip
    f018:	00db      	lsls	r3, r3, #3
    f01a:	18d3      	adds	r3, r2, r3
    f01c:	603b      	str	r3, [r7, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f01e:	681b      	ldr	r3, [r3, #0]
    f020:	791b      	ldrb	r3, [r3, #4]
    f022:	2b00      	cmp	r3, #0
    f024:	d100      	bne.n	f028 <udc_process_setup+0x33c>
    f026:	e70d      	b.n	ee44 <udc_process_setup+0x158>
    f028:	2500      	movs	r5, #0
    f02a:	4e33      	ldr	r6, [pc, #204]	; (f0f8 <udc_process_setup+0x40c>)
    f02c:	e007      	b.n	f03e <udc_process_setup+0x352>
    f02e:	683b      	ldr	r3, [r7, #0]
			iface_num++) {
    f030:	3501      	adds	r5, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f032:	681b      	ldr	r3, [r3, #0]
			iface_num++) {
    f034:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    f036:	791b      	ldrb	r3, [r3, #4]
    f038:	42ab      	cmp	r3, r5
    f03a:	d800      	bhi.n	f03e <udc_process_setup+0x352>
    f03c:	e702      	b.n	ee44 <udc_process_setup+0x158>
		if (!udc_iface_enable(iface_num, 0)) {
    f03e:	2100      	movs	r1, #0
    f040:	0028      	movs	r0, r5
    f042:	47b0      	blx	r6
    f044:	2800      	cmp	r0, #0
    f046:	d1f2      	bne.n	f02e <udc_process_setup+0x342>
    f048:	7823      	ldrb	r3, [r4, #0]
    f04a:	e65f      	b.n	ed0c <udc_process_setup+0x20>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    f04c:	2d01      	cmp	r5, #1
    f04e:	d000      	beq.n	f052 <udc_process_setup+0x366>
    f050:	e662      	b.n	ed18 <udc_process_setup+0x2c>
				(uint8_t *) udc_config.confdev_lsfs,
    f052:	4b23      	ldr	r3, [pc, #140]	; (f0e0 <udc_process_setup+0x3f4>)
    f054:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    f056:	4b23      	ldr	r3, [pc, #140]	; (f0e4 <udc_process_setup+0x3f8>)
    f058:	7801      	ldrb	r1, [r0, #0]
    f05a:	4798      	blx	r3
    f05c:	e7c7      	b.n	efee <udc_process_setup+0x302>
			if (conf_num >= udc_config.confdev_lsfs->
    f05e:	4a20      	ldr	r2, [pc, #128]	; (f0e0 <udc_process_setup+0x3f4>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    f060:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    f062:	6811      	ldr	r1, [r2, #0]
    f064:	7c49      	ldrb	r1, [r1, #17]
    f066:	4299      	cmp	r1, r3
    f068:	d800      	bhi.n	f06c <udc_process_setup+0x380>
    f06a:	e655      	b.n	ed18 <udc_process_setup+0x2c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    f06c:	6852      	ldr	r2, [r2, #4]
    f06e:	00db      	lsls	r3, r3, #3
    f070:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    f072:	78c1      	ldrb	r1, [r0, #3]
    f074:	7883      	ldrb	r3, [r0, #2]
    f076:	0209      	lsls	r1, r1, #8
    f078:	4319      	orrs	r1, r3
    f07a:	4b1a      	ldr	r3, [pc, #104]	; (f0e4 <udc_process_setup+0x3f8>)
    f07c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    f07e:	68a3      	ldr	r3, [r4, #8]
    f080:	705d      	strb	r5, [r3, #1]
    f082:	e7b4      	b.n	efee <udc_process_setup+0x302>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    f084:	22ff      	movs	r2, #255	; 0xff
    f086:	4013      	ands	r3, r2
    f088:	2b01      	cmp	r3, #1
    f08a:	d023      	beq.n	f0d4 <udc_process_setup+0x3e8>
    f08c:	2b00      	cmp	r3, #0
    f08e:	d01c      	beq.n	f0ca <udc_process_setup+0x3de>
    f090:	2b02      	cmp	r3, #2
    f092:	d022      	beq.n	f0da <udc_process_setup+0x3ee>
    f094:	2b03      	cmp	r3, #3
    f096:	d000      	beq.n	f09a <udc_process_setup+0x3ae>
    f098:	e702      	b.n	eea0 <udc_process_setup+0x1b4>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    f09a:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
    f09c:	4e17      	ldr	r6, [pc, #92]	; (f0fc <udc_process_setup+0x410>)
    f09e:	4818      	ldr	r0, [pc, #96]	; (f100 <udc_process_setup+0x414>)
{
    f0a0:	2300      	movs	r3, #0
    f0a2:	0002      	movs	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    f0a4:	5cf5      	ldrb	r5, [r6, r3]
    f0a6:	3301      	adds	r3, #1
    f0a8:	8055      	strh	r5, [r2, #2]
		for(i = 0; i < str_length; i++) {
    f0aa:	b2dd      	uxtb	r5, r3
    f0ac:	3202      	adds	r2, #2
    f0ae:	42a9      	cmp	r1, r5
    f0b0:	d8f8      	bhi.n	f0a4 <udc_process_setup+0x3b8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    f0b2:	0049      	lsls	r1, r1, #1
    f0b4:	3102      	adds	r1, #2
    f0b6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    f0b8:	4b0a      	ldr	r3, [pc, #40]	; (f0e4 <udc_process_setup+0x3f8>)
    f0ba:	b289      	uxth	r1, r1
    f0bc:	4798      	blx	r3
    f0be:	e796      	b.n	efee <udc_process_setup+0x302>
	return udc_iface_enable(iface_num, setting_num);
    f0c0:	b2f1      	uxtb	r1, r6
    f0c2:	0038      	movs	r0, r7
    f0c4:	4b0c      	ldr	r3, [pc, #48]	; (f0f8 <udc_process_setup+0x40c>)
    f0c6:	4798      	blx	r3
    f0c8:	e6ba      	b.n	ee40 <udc_process_setup+0x154>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    f0ca:	2104      	movs	r1, #4
    f0cc:	480d      	ldr	r0, [pc, #52]	; (f104 <udc_process_setup+0x418>)
    f0ce:	4b05      	ldr	r3, [pc, #20]	; (f0e4 <udc_process_setup+0x3f8>)
    f0d0:	4798      	blx	r3
    f0d2:	e78c      	b.n	efee <udc_process_setup+0x302>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    f0d4:	210b      	movs	r1, #11
		str = udc_string_manufacturer_name;
    f0d6:	4e0c      	ldr	r6, [pc, #48]	; (f108 <udc_process_setup+0x41c>)
    f0d8:	e7e1      	b.n	f09e <udc_process_setup+0x3b2>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    f0da:	2110      	movs	r1, #16
		str = udc_string_product_name;
    f0dc:	4e0b      	ldr	r6, [pc, #44]	; (f10c <udc_process_setup+0x420>)
    f0de:	e7de      	b.n	f09e <udc_process_setup+0x3b2>
    f0e0:	20000134 	.word	0x20000134
    f0e4:	00011461 	.word	0x00011461
    f0e8:	0000ec65 	.word	0x0000ec65
    f0ec:	20000a54 	.word	0x20000a54
    f0f0:	1fffffff 	.word	0x1fffffff
    f0f4:	20000a58 	.word	0x20000a58
    f0f8:	0000ebe1 	.word	0x0000ebe1
    f0fc:	00016a90 	.word	0x00016a90
    f100:	200001b4 	.word	0x200001b4
    f104:	200001d8 	.word	0x200001d8
    f108:	200001dc 	.word	0x200001dc
    f10c:	200001e8 	.word	0x200001e8

0000f110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    f110:	4b0b      	ldr	r3, [pc, #44]	; (f140 <cpu_irq_enter_critical+0x30>)
    f112:	681a      	ldr	r2, [r3, #0]
    f114:	2a00      	cmp	r2, #0
    f116:	d105      	bne.n	f124 <cpu_irq_enter_critical+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f118:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
    f11c:	2900      	cmp	r1, #0
    f11e:	d005      	beq.n	f12c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    f120:	4908      	ldr	r1, [pc, #32]	; (f144 <cpu_irq_enter_critical+0x34>)
    f122:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    f124:	681a      	ldr	r2, [r3, #0]
    f126:	3201      	adds	r2, #1
    f128:	601a      	str	r2, [r3, #0]
}
    f12a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    f12c:	b672      	cpsid	i
    f12e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    f132:	4a05      	ldr	r2, [pc, #20]	; (f148 <cpu_irq_enter_critical+0x38>)
    f134:	7011      	strb	r1, [r2, #0]
			cpu_irq_prev_interrupt_state = true;
    f136:	4a03      	ldr	r2, [pc, #12]	; (f144 <cpu_irq_enter_critical+0x34>)
    f138:	3101      	adds	r1, #1
    f13a:	7011      	strb	r1, [r2, #0]
    f13c:	e7f2      	b.n	f124 <cpu_irq_enter_critical+0x14>
    f13e:	46c0      	nop			; (mov r8, r8)
    f140:	20000a60 	.word	0x20000a60
    f144:	20000a64 	.word	0x20000a64
    f148:	200001f9 	.word	0x200001f9

0000f14c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    f14c:	4b08      	ldr	r3, [pc, #32]	; (f170 <cpu_irq_leave_critical+0x24>)
    f14e:	681a      	ldr	r2, [r3, #0]
    f150:	3a01      	subs	r2, #1
    f152:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    f154:	681b      	ldr	r3, [r3, #0]
    f156:	2b00      	cmp	r3, #0
    f158:	d109      	bne.n	f16e <cpu_irq_leave_critical+0x22>
    f15a:	4b06      	ldr	r3, [pc, #24]	; (f174 <cpu_irq_leave_critical+0x28>)
    f15c:	781b      	ldrb	r3, [r3, #0]
    f15e:	2b00      	cmp	r3, #0
    f160:	d005      	beq.n	f16e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    f162:	2201      	movs	r2, #1
    f164:	4b04      	ldr	r3, [pc, #16]	; (f178 <cpu_irq_leave_critical+0x2c>)
    f166:	701a      	strb	r2, [r3, #0]
    f168:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f16c:	b662      	cpsie	i
	}
}
    f16e:	4770      	bx	lr
    f170:	20000a60 	.word	0x20000a60
    f174:	20000a64 	.word	0x20000a64
    f178:	200001f9 	.word	0x200001f9

0000f17c <stdio_usb_getchar>:

	return udi_cdc_putc(data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * unused, char *data)
{
    f17c:	b510      	push	{r4, lr}
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    f17e:	4b05      	ldr	r3, [pc, #20]	; (f194 <stdio_usb_getchar+0x18>)
{
    f180:	000c      	movs	r4, r1
	if (!stdio_usb_interface_enable) {
    f182:	781b      	ldrb	r3, [r3, #0]
    f184:	2b00      	cmp	r3, #0
    f186:	d101      	bne.n	f18c <stdio_usb_getchar+0x10>
		*data = 0;  // -1
    f188:	700b      	strb	r3, [r1, #0]
		return;
	}

	*data = (char)udi_cdc_getc();
}
    f18a:	bd10      	pop	{r4, pc}
	*data = (char)udi_cdc_getc();
    f18c:	4b02      	ldr	r3, [pc, #8]	; (f198 <stdio_usb_getchar+0x1c>)
    f18e:	4798      	blx	r3
    f190:	7020      	strb	r0, [r4, #0]
    f192:	e7fa      	b.n	f18a <stdio_usb_getchar+0xe>
    f194:	20000a65 	.word	0x20000a65
    f198:	0000e991 	.word	0x0000e991

0000f19c <stdio_usb_putchar>:
{
    f19c:	b510      	push	{r4, lr}
	if (!stdio_usb_interface_enable) {
    f19e:	4b06      	ldr	r3, [pc, #24]	; (f1b8 <stdio_usb_putchar+0x1c>)
		return 0;  // -1
    f1a0:	2000      	movs	r0, #0
	if (!stdio_usb_interface_enable) {
    f1a2:	781b      	ldrb	r3, [r3, #0]
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	d005      	beq.n	f1b4 <stdio_usb_putchar+0x18>
	return udi_cdc_putc(data) ? 0 : -1;
    f1a8:	4b04      	ldr	r3, [pc, #16]	; (f1bc <stdio_usb_putchar+0x20>)
    f1aa:	0008      	movs	r0, r1
    f1ac:	4798      	blx	r3
    f1ae:	4243      	negs	r3, r0
    f1b0:	4158      	adcs	r0, r3
    f1b2:	4240      	negs	r0, r0
}
    f1b4:	bd10      	pop	{r4, pc}
    f1b6:	46c0      	nop			; (mov r8, r8)
    f1b8:	20000a65 	.word	0x20000a65
    f1bc:	0000eacd 	.word	0x0000eacd

0000f1c0 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
    f1c0:	2201      	movs	r2, #1
    f1c2:	4b02      	ldr	r3, [pc, #8]	; (f1cc <stdio_usb_enable+0xc>)
	return true;
}
    f1c4:	2001      	movs	r0, #1
	stdio_usb_interface_enable = true;
    f1c6:	701a      	strb	r2, [r3, #0]
}
    f1c8:	4770      	bx	lr
    f1ca:	46c0      	nop			; (mov r8, r8)
    f1cc:	20000a65 	.word	0x20000a65

0000f1d0 <stdio_usb_init>:
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
	stdio_base = NULL;
    f1d0:	2200      	movs	r2, #0
    f1d2:	4b0b      	ldr	r3, [pc, #44]	; (f200 <stdio_usb_init+0x30>)
{
    f1d4:	b570      	push	{r4, r5, r6, lr}
	stdio_base = NULL;
    f1d6:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    f1d8:	4a0a      	ldr	r2, [pc, #40]	; (f204 <stdio_usb_init+0x34>)
    f1da:	4b0b      	ldr	r3, [pc, #44]	; (f208 <stdio_usb_init+0x38>)
    f1dc:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    f1de:	4a0b      	ldr	r2, [pc, #44]	; (f20c <stdio_usb_init+0x3c>)
    f1e0:	4b0b      	ldr	r3, [pc, #44]	; (f210 <stdio_usb_init+0x40>)
    f1e2:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    f1e4:	4b0b      	ldr	r3, [pc, #44]	; (f214 <stdio_usb_init+0x44>)
    f1e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    f1e8:	4d0b      	ldr	r5, [pc, #44]	; (f218 <stdio_usb_init+0x48>)
    f1ea:	4c0c      	ldr	r4, [pc, #48]	; (f21c <stdio_usb_init+0x4c>)
    f1ec:	682b      	ldr	r3, [r5, #0]
    f1ee:	2100      	movs	r1, #0
    f1f0:	6898      	ldr	r0, [r3, #8]
    f1f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    f1f4:	682b      	ldr	r3, [r5, #0]
    f1f6:	2100      	movs	r1, #0
    f1f8:	6858      	ldr	r0, [r3, #4]
    f1fa:	47a0      	blx	r4
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    f1fc:	bd70      	pop	{r4, r5, r6, pc}
    f1fe:	46c0      	nop			; (mov r8, r8)
    f200:	2000129c 	.word	0x2000129c
    f204:	0000f19d 	.word	0x0000f19d
    f208:	20001298 	.word	0x20001298
    f20c:	0000f17d 	.word	0x0000f17d
    f210:	20001294 	.word	0x20001294
    f214:	0000ec59 	.word	0x0000ec59
    f218:	200001fc 	.word	0x200001fc
    f21c:	00013f3d 	.word	0x00013f3d

0000f220 <bod_set_config>:
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    f220:	2202      	movs	r2, #2
{
    f222:	b510      	push	{r4, lr}
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    f224:	4b19      	ldr	r3, [pc, #100]	; (f28c <bod_set_config+0x6c>)
    f226:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    f228:	4222      	tst	r2, r4
    f22a:	d002      	beq.n	f232 <bod_set_config+0x12>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    f22c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    f22e:	4394      	bics	r4, r2
    f230:	635c      	str	r4, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    f232:	790c      	ldrb	r4, [r1, #4]
    f234:	880b      	ldrh	r3, [r1, #0]
			(uint32_t)conf->mode;
    f236:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    f238:	4323      	orrs	r3, r4

	if (conf->mode == BOD_MODE_SAMPLED) {
    f23a:	2480      	movs	r4, #128	; 0x80
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    f23c:	4313      	orrs	r3, r2
	if (conf->mode == BOD_MODE_SAMPLED) {
    f23e:	0064      	lsls	r4, r4, #1
    f240:	42a2      	cmp	r2, r4
    f242:	d01f      	beq.n	f284 <bod_set_config+0x64>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
    f244:	798a      	ldrb	r2, [r1, #6]
    f246:	2a00      	cmp	r2, #0
    f248:	d001      	beq.n	f24e <bod_set_config+0x2e>
		temp |= SYSCTRL_BOD33_HYST;
    f24a:	2204      	movs	r2, #4
    f24c:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
    f24e:	79ca      	ldrb	r2, [r1, #7]
    f250:	2a00      	cmp	r2, #0
    f252:	d001      	beq.n	f258 <bod_set_config+0x38>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    f254:	2240      	movs	r2, #64	; 0x40
    f256:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
    f258:	2800      	cmp	r0, #0
    f25a:	d001      	beq.n	f260 <bod_set_config+0x40>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
    f25c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    f25e:	bd10      	pop	{r4, pc}
			if (conf->level > 0x3F) {
    f260:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
    f262:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
    f264:	2a3f      	cmp	r2, #63	; 0x3f
    f266:	d8fa      	bhi.n	f25e <bod_set_config+0x3e>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    f268:	21fc      	movs	r1, #252	; 0xfc
    f26a:	0412      	lsls	r2, r2, #16
    f26c:	0389      	lsls	r1, r1, #14
    f26e:	400a      	ands	r2, r1
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    f270:	2180      	movs	r1, #128	; 0x80
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    f272:	4313      	orrs	r3, r2
    f274:	4a05      	ldr	r2, [pc, #20]	; (f28c <bod_set_config+0x6c>)
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    f276:	0109      	lsls	r1, r1, #4
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    f278:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    f27a:	68d3      	ldr	r3, [r2, #12]
    f27c:	420b      	tst	r3, r1
    f27e:	d0fc      	beq.n	f27a <bod_set_config+0x5a>
	return STATUS_OK;
    f280:	2000      	movs	r0, #0
    f282:	e7ec      	b.n	f25e <bod_set_config+0x3e>
		temp |= SYSCTRL_BOD33_CEN;
    f284:	2280      	movs	r2, #128	; 0x80
    f286:	0092      	lsls	r2, r2, #2
    f288:	4313      	orrs	r3, r2
    f28a:	e7db      	b.n	f244 <bod_set_config+0x24>
    f28c:	40000800 	.word	0x40000800

0000f290 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    f290:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
    f292:	4b23      	ldr	r3, [pc, #140]	; (f320 <DMAC_Handler+0x90>)
    f294:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    f296:	220f      	movs	r2, #15
    f298:	4922      	ldr	r1, [pc, #136]	; (f324 <DMAC_Handler+0x94>)

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    f29a:	4823      	ldr	r0, [pc, #140]	; (f328 <DMAC_Handler+0x98>)
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    f29c:	8c0b      	ldrh	r3, [r1, #32]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
	isr = DMAC->CHINTFLAG.reg;
    f29e:	264e      	movs	r6, #78	; 0x4e
	resource = _dma_active_resource[active_channel];
    f2a0:	4013      	ands	r3, r2
    f2a2:	009b      	lsls	r3, r3, #2
    f2a4:	5818      	ldr	r0, [r3, r0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    f2a6:	4c21      	ldr	r4, [pc, #132]	; (f32c <DMAC_Handler+0x9c>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    f2a8:	7803      	ldrb	r3, [r0, #0]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    f2aa:	4d21      	ldr	r5, [pc, #132]	; (f330 <DMAC_Handler+0xa0>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    f2ac:	401a      	ands	r2, r3
    f2ae:	233f      	movs	r3, #63	; 0x3f
    f2b0:	54ca      	strb	r2, [r1, r3]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    f2b2:	7803      	ldrb	r3, [r0, #0]
	isr = DMAC->CHINTFLAG.reg;
    f2b4:	5d8a      	ldrb	r2, [r1, r6]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    f2b6:	011b      	lsls	r3, r3, #4
    f2b8:	18e4      	adds	r4, r4, r3
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    f2ba:	18eb      	adds	r3, r5, r3
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    f2bc:	8864      	ldrh	r4, [r4, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    f2be:	885b      	ldrh	r3, [r3, #2]
	isr = DMAC->CHINTFLAG.reg;
    f2c0:	b2d2      	uxtb	r2, r2
	resource->transfered_size = total_size - write_size;
    f2c2:	1ae3      	subs	r3, r4, r3
    f2c4:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    f2c6:	2301      	movs	r3, #1
    f2c8:	001c      	movs	r4, r3
    f2ca:	4014      	ands	r4, r2
    f2cc:	d00c      	beq.n	f2e8 <DMAC_Handler+0x58>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    f2ce:	2210      	movs	r2, #16
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    f2d0:	558b      	strb	r3, [r1, r6]
		resource->job_status = STATUS_ERR_IO;
    f2d2:	7442      	strb	r2, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    f2d4:	7c02      	ldrb	r2, [r0, #16]
    f2d6:	4213      	tst	r3, r2
    f2d8:	d003      	beq.n	f2e2 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    f2da:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d000      	beq.n	f2e2 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    f2e0:	4798      	blx	r3
	cpu_irq_leave_critical();
    f2e2:	4b14      	ldr	r3, [pc, #80]	; (f334 <DMAC_Handler+0xa4>)
    f2e4:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
    f2e6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    f2e8:	2302      	movs	r3, #2
    f2ea:	4213      	tst	r3, r2
    f2ec:	d009      	beq.n	f302 <DMAC_Handler+0x72>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    f2ee:	558b      	strb	r3, [r1, r6]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    f2f0:	7c02      	ldrb	r2, [r0, #16]
		resource->job_status = STATUS_OK;
    f2f2:	7444      	strb	r4, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    f2f4:	4213      	tst	r3, r2
    f2f6:	d0f4      	beq.n	f2e2 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    f2f8:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d0f1      	beq.n	f2e2 <DMAC_Handler+0x52>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    f2fe:	4798      	blx	r3
    f300:	e7ef      	b.n	f2e2 <DMAC_Handler+0x52>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    f302:	2304      	movs	r3, #4
    f304:	4213      	tst	r3, r2
    f306:	d0ec      	beq.n	f2e2 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;
    f308:	2206      	movs	r2, #6
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    f30a:	558b      	strb	r3, [r1, r6]
		resource->job_status = STATUS_SUSPEND;
    f30c:	7442      	strb	r2, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    f30e:	7c02      	ldrb	r2, [r0, #16]
    f310:	4213      	tst	r3, r2
    f312:	d0e6      	beq.n	f2e2 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    f314:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    f316:	2b00      	cmp	r3, #0
    f318:	d0e3      	beq.n	f2e2 <DMAC_Handler+0x52>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    f31a:	4798      	blx	r3
    f31c:	e7e1      	b.n	f2e2 <DMAC_Handler+0x52>
    f31e:	46c0      	nop			; (mov r8, r8)
    f320:	0000f111 	.word	0x0000f111
    f324:	41004800 	.word	0x41004800
    f328:	20000a68 	.word	0x20000a68
    f32c:	20000e60 	.word	0x20000e60
    f330:	20000a80 	.word	0x20000a80
    f334:	0000f14d 	.word	0x0000f14d

0000f338 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f338:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    f33a:	2a00      	cmp	r2, #0
    f33c:	d001      	beq.n	f342 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    f33e:	0018      	movs	r0, r3
    f340:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    f342:	4a06      	ldr	r2, [pc, #24]	; (f35c <extint_register_callback+0x24>)
    f344:	0089      	lsls	r1, r1, #2
    f346:	588b      	ldr	r3, [r1, r2]
    f348:	2b00      	cmp	r3, #0
    f34a:	d003      	beq.n	f354 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    f34c:	4283      	cmp	r3, r0
    f34e:	d003      	beq.n	f358 <extint_register_callback+0x20>
	return STATUS_ERR_ALREADY_INITIALIZED;
    f350:	231d      	movs	r3, #29
    f352:	e7f4      	b.n	f33e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    f354:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    f356:	e7f2      	b.n	f33e <extint_register_callback+0x6>
		return STATUS_OK;
    f358:	2300      	movs	r3, #0
    f35a:	e7f0      	b.n	f33e <extint_register_callback+0x6>
    f35c:	20000eb4 	.word	0x20000eb4

0000f360 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f360:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f362:	2900      	cmp	r1, #0
    f364:	d001      	beq.n	f36a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    f366:	0018      	movs	r0, r3
    f368:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    f36a:	281f      	cmp	r0, #31
    f36c:	d805      	bhi.n	f37a <extint_chan_enable_callback+0x1a>
		eic->INTENSET.reg = (1UL << channel);
    f36e:	3b16      	subs	r3, #22
    f370:	4083      	lsls	r3, r0
    f372:	4a03      	ldr	r2, [pc, #12]	; (f380 <extint_chan_enable_callback+0x20>)
    f374:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    f376:	2300      	movs	r3, #0
    f378:	e7f5      	b.n	f366 <extint_chan_enable_callback+0x6>
		eic->INTENSET.reg = (1UL << channel);
    f37a:	60c9      	str	r1, [r1, #12]
    f37c:	deff      	udf	#255	; 0xff
    f37e:	46c0      	nop			; (mov r8, r8)
    f380:	40001800 	.word	0x40001800

0000f384 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f384:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    f386:	2900      	cmp	r1, #0
    f388:	d001      	beq.n	f38e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    f38a:	0018      	movs	r0, r3
    f38c:	4770      	bx	lr
    f38e:	281f      	cmp	r0, #31
    f390:	d805      	bhi.n	f39e <extint_chan_disable_callback+0x1a>
		eic->INTENCLR.reg = (1UL << channel);
    f392:	3b16      	subs	r3, #22
    f394:	4083      	lsls	r3, r0
    f396:	4a03      	ldr	r2, [pc, #12]	; (f3a4 <extint_chan_disable_callback+0x20>)
    f398:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    f39a:	2300      	movs	r3, #0
    f39c:	e7f5      	b.n	f38a <extint_chan_disable_callback+0x6>
		eic->INTENCLR.reg = (1UL << channel);
    f39e:	6089      	str	r1, [r1, #8]
    f3a0:	deff      	udf	#255	; 0xff
    f3a2:	46c0      	nop			; (mov r8, r8)
    f3a4:	40001800 	.word	0x40001800

0000f3a8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f3aa:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    f3ac:	2601      	movs	r6, #1
    f3ae:	4c0b      	ldr	r4, [pc, #44]	; (f3dc <EIC_Handler+0x34>)

	return (eic_module->INTFLAG.reg & eic_mask);
    f3b0:	4d0b      	ldr	r5, [pc, #44]	; (f3e0 <EIC_Handler+0x38>)
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f3b2:	4f0c      	ldr	r7, [pc, #48]	; (f3e4 <EIC_Handler+0x3c>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f3b4:	7023      	strb	r3, [r4, #0]
	uint32_t eic_mask   = (1UL << (channel % 32));
    f3b6:	0032      	movs	r2, r6
    f3b8:	409a      	lsls	r2, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    f3ba:	6929      	ldr	r1, [r5, #16]
		if (extint_chan_is_detected(_current_channel)) {
    f3bc:	4211      	tst	r1, r2
    f3be:	d005      	beq.n	f3cc <EIC_Handler+0x24>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    f3c0:	612a      	str	r2, [r5, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    f3c2:	009b      	lsls	r3, r3, #2
    f3c4:	59db      	ldr	r3, [r3, r7]
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d000      	beq.n	f3cc <EIC_Handler+0x24>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    f3ca:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    f3cc:	7823      	ldrb	r3, [r4, #0]
    f3ce:	3301      	adds	r3, #1
    f3d0:	b2db      	uxtb	r3, r3
    f3d2:	7023      	strb	r3, [r4, #0]
    f3d4:	2b0f      	cmp	r3, #15
    f3d6:	d9ee      	bls.n	f3b6 <EIC_Handler+0xe>
			}
		}
	}
}
    f3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3da:	46c0      	nop			; (mov r8, r8)
    f3dc:	20000eb0 	.word	0x20000eb0
    f3e0:	40001800 	.word	0x40001800
    f3e4:	20000eb4 	.word	0x20000eb4

0000f3e8 <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
    f3e8:	2140      	movs	r1, #64	; 0x40
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    f3ea:	b500      	push	{lr}
    f3ec:	4a15      	ldr	r2, [pc, #84]	; (f444 <_system_extint_init+0x5c>)
    f3ee:	b083      	sub	sp, #12
    f3f0:	6993      	ldr	r3, [r2, #24]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    f3f2:	2005      	movs	r0, #5
    f3f4:	430b      	orrs	r3, r1
    f3f6:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    f3f8:	2302      	movs	r3, #2
    f3fa:	a901      	add	r1, sp, #4
    f3fc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    f3fe:	4b12      	ldr	r3, [pc, #72]	; (f448 <_system_extint_init+0x60>)
    f400:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    f402:	4b12      	ldr	r3, [pc, #72]	; (f44c <_system_extint_init+0x64>)
    f404:	2005      	movs	r0, #5
    f406:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    f408:	2101      	movs	r1, #1
    f40a:	4a11      	ldr	r2, [pc, #68]	; (f450 <_system_extint_init+0x68>)
    f40c:	7813      	ldrb	r3, [r2, #0]
    f40e:	430b      	orrs	r3, r1
    f410:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f412:	7853      	ldrb	r3, [r2, #1]
    f414:	b25b      	sxtb	r3, r3
    f416:	2b00      	cmp	r3, #0
    f418:	dbfb      	blt.n	f412 <_system_extint_init+0x2a>
    f41a:	4b0e      	ldr	r3, [pc, #56]	; (f454 <_system_extint_init+0x6c>)

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    f41c:	2200      	movs	r2, #0
    f41e:	0019      	movs	r1, r3
    f420:	3140      	adds	r1, #64	; 0x40
    f422:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    f424:	4299      	cmp	r1, r3
    f426:	d1fc      	bne.n	f422 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f428:	2210      	movs	r2, #16
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    f42a:	2102      	movs	r1, #2
    f42c:	4b0a      	ldr	r3, [pc, #40]	; (f458 <_system_extint_init+0x70>)
    f42e:	601a      	str	r2, [r3, #0]
    f430:	4a07      	ldr	r2, [pc, #28]	; (f450 <_system_extint_init+0x68>)
    f432:	7813      	ldrb	r3, [r2, #0]
    f434:	430b      	orrs	r3, r1
    f436:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    f438:	7853      	ldrb	r3, [r2, #1]
    f43a:	b25b      	sxtb	r3, r3
    f43c:	2b00      	cmp	r3, #0
    f43e:	dbfb      	blt.n	f438 <_system_extint_init+0x50>
}
    f440:	b003      	add	sp, #12
    f442:	bd00      	pop	{pc}
    f444:	40000400 	.word	0x40000400
    f448:	000106c5 	.word	0x000106c5
    f44c:	0001063d 	.word	0x0001063d
    f450:	40001800 	.word	0x40001800
    f454:	20000eb4 	.word	0x20000eb4
    f458:	e000e100 	.word	0xe000e100

0000f45c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    f45c:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f45e:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    f460:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    f462:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    f464:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f466:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    f468:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    f46a:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    f46c:	72c3      	strb	r3, [r0, #11]
}
    f46e:	4770      	bx	lr

0000f470 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    f470:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f472:	2300      	movs	r3, #0
    f474:	000c      	movs	r4, r1
    f476:	b083      	sub	sp, #12
    f478:	a901      	add	r1, sp, #4
    f47a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    f47c:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    f47e:	7923      	ldrb	r3, [r4, #4]
{
    f480:	0005      	movs	r5, r0
	pinmux_config.mux_position = config->gpio_pin_mux;
    f482:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    f484:	7a23      	ldrb	r3, [r4, #8]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    f486:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    f488:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    f48a:	4b15      	ldr	r3, [pc, #84]	; (f4e0 <extint_chan_set_config+0x70>)
    f48c:	4798      	blx	r3
		return NULL;
    f48e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    f490:	2d1f      	cmp	r5, #31
    f492:	d800      	bhi.n	f496 <extint_chan_set_config+0x26>
		return eics[eic_index];
    f494:	4813      	ldr	r0, [pc, #76]	; (f4e4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    f496:	2207      	movs	r2, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    f498:	7aa3      	ldrb	r3, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    f49a:	402a      	ands	r2, r5
    f49c:	0092      	lsls	r2, r2, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    f49e:	7ae7      	ldrb	r7, [r4, #11]
	if (config->filter_input_signal) {
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	d001      	beq.n	f4a8 <extint_chan_set_config+0x38>
    f4a4:	2308      	movs	r3, #8
    f4a6:	431f      	orrs	r7, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f4a8:	260f      	movs	r6, #15
			(new_config << config_pos);
    f4aa:	4097      	lsls	r7, r2
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f4ac:	4096      	lsls	r6, r2
			(new_config << config_pos);
    f4ae:	003a      	movs	r2, r7
    f4b0:	08eb      	lsrs	r3, r5, #3
    f4b2:	009b      	lsls	r3, r3, #2
    f4b4:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    f4b6:	6999      	ldr	r1, [r3, #24]
    f4b8:	43b1      	bics	r1, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    f4ba:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    f4bc:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    f4be:	7a63      	ldrb	r3, [r4, #9]
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d106      	bne.n	f4d2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    f4c4:	2201      	movs	r2, #1
    f4c6:	40aa      	lsls	r2, r5
    f4c8:	6943      	ldr	r3, [r0, #20]
    f4ca:	4393      	bics	r3, r2
    f4cc:	6143      	str	r3, [r0, #20]
	}
}
    f4ce:	b003      	add	sp, #12
    f4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    f4d2:	2301      	movs	r3, #1
    f4d4:	40ab      	lsls	r3, r5
    f4d6:	6942      	ldr	r2, [r0, #20]
    f4d8:	4313      	orrs	r3, r2
    f4da:	6143      	str	r3, [r0, #20]
    f4dc:	e7f7      	b.n	f4ce <extint_chan_set_config+0x5e>
    f4de:	46c0      	nop			; (mov r8, r8)
    f4e0:	000107c5 	.word	0x000107c5
    f4e4:	40001800 	.word	0x40001800

0000f4e8 <port_pin_set_config>:
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f4e8:	2280      	movs	r2, #128	; 0x80
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    f4ea:	b500      	push	{lr}
    f4ec:	b083      	sub	sp, #12
    f4ee:	ab01      	add	r3, sp, #4
    f4f0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    f4f2:	780a      	ldrb	r2, [r1, #0]
    f4f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    f4f6:	784a      	ldrb	r2, [r1, #1]
    f4f8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    f4fa:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    f4fc:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    f4fe:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    f500:	4b01      	ldr	r3, [pc, #4]	; (f508 <port_pin_set_config+0x20>)
    f502:	4798      	blx	r3
}
    f504:	b003      	add	sp, #12
    f506:	bd00      	pop	{pc}
    f508:	000107c5 	.word	0x000107c5

0000f50c <rtc_calendar_enable>:
    f50c:	2108      	movs	r1, #8
    f50e:	4b06      	ldr	r3, [pc, #24]	; (f528 <rtc_calendar_enable+0x1c>)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f510:	6802      	ldr	r2, [r0, #0]
    f512:	6019      	str	r1, [r3, #0]
    f514:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f516:	7a8b      	ldrb	r3, [r1, #10]
    f518:	b25b      	sxtb	r3, r3
    f51a:	2b00      	cmp	r3, #0
    f51c:	dbfb      	blt.n	f516 <rtc_calendar_enable+0xa>
	while (rtc_calendar_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    f51e:	2102      	movs	r1, #2
    f520:	8813      	ldrh	r3, [r2, #0]
    f522:	430b      	orrs	r3, r1
    f524:	8013      	strh	r3, [r2, #0]
}
    f526:	4770      	bx	lr
    f528:	e000e100 	.word	0xe000e100

0000f52c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    f52c:	b510      	push	{r4, lr}
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f52e:	2280      	movs	r2, #128	; 0x80
    f530:	2408      	movs	r4, #8
    f532:	490e      	ldr	r1, [pc, #56]	; (f56c <rtc_calendar_reset+0x40>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f534:	6803      	ldr	r3, [r0, #0]
    f536:	508c      	str	r4, [r1, r2]
    f538:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f53a:	7a8a      	ldrb	r2, [r1, #10]
    f53c:	b252      	sxtb	r2, r2
    f53e:	2a00      	cmp	r2, #0
    f540:	dbfb      	blt.n	f53a <rtc_calendar_reset+0xe>
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    f542:	22c1      	movs	r2, #193	; 0xc1
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    f544:	2102      	movs	r1, #2
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    f546:	719a      	strb	r2, [r3, #6]
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    f548:	721a      	strb	r2, [r3, #8]
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    f54a:	881a      	ldrh	r2, [r3, #0]
    f54c:	438a      	bics	r2, r1
    f54e:	801a      	strh	r2, [r3, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    f550:	2200      	movs	r2, #0
    f552:	6801      	ldr	r1, [r0, #0]
    f554:	8202      	strh	r2, [r0, #16]
	module->enabled_callback    = 0;
    f556:	8242      	strh	r2, [r0, #18]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f558:	7a8a      	ldrb	r2, [r1, #10]
    f55a:	b252      	sxtb	r2, r2
    f55c:	2a00      	cmp	r2, #0
    f55e:	dbfb      	blt.n	f558 <rtc_calendar_reset+0x2c>
	while (rtc_calendar_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    f560:	2101      	movs	r1, #1
    f562:	881a      	ldrh	r2, [r3, #0]
    f564:	430a      	orrs	r2, r1
    f566:	801a      	strh	r2, [r3, #0]
}
    f568:	bd10      	pop	{r4, pc}
    f56a:	46c0      	nop			; (mov r8, r8)
    f56c:	e000e100 	.word	0xe000e100

0000f570 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    f570:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    f572:	88cb      	ldrh	r3, [r1, #6]
    f574:	88c2      	ldrh	r2, [r0, #6]

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    f576:	790c      	ldrb	r4, [r1, #4]
	register_value = (time->year - module->year_init_value) <<
    f578:	1a9a      	subs	r2, r3, r2
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    f57a:	794b      	ldrb	r3, [r1, #5]
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    f57c:	0464      	lsls	r4, r4, #17
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    f57e:	059b      	lsls	r3, r3, #22

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    f580:	4323      	orrs	r3, r4
    f582:	788c      	ldrb	r4, [r1, #2]
	register_value = (time->year - module->year_init_value) <<
    f584:	0692      	lsls	r2, r2, #26
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    f586:	0324      	lsls	r4, r4, #12
    f588:	4323      	orrs	r3, r4
    f58a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    f58c:	7902      	ldrb	r2, [r0, #4]
    f58e:	2a00      	cmp	r2, #0
    f590:	d105      	bne.n	f59e <rtc_calendar_time_to_register_value+0x2e>
    f592:	78ca      	ldrb	r2, [r1, #3]
    f594:	2a00      	cmp	r2, #0
    f596:	d002      	beq.n	f59e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    f598:	2280      	movs	r2, #128	; 0x80
    f59a:	0252      	lsls	r2, r2, #9
    f59c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    f59e:	7848      	ldrb	r0, [r1, #1]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    f5a0:	780a      	ldrb	r2, [r1, #0]
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    f5a2:	0180      	lsls	r0, r0, #6
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    f5a4:	4310      	orrs	r0, r2
    f5a6:	4318      	orrs	r0, r3

	return register_value;
}
    f5a8:	bd10      	pop	{r4, pc}
    f5aa:	46c0      	nop			; (mov r8, r8)

0000f5ac <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    f5ac:	b530      	push	{r4, r5, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    f5ae:	88c4      	ldrh	r4, [r0, #6]
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f5b0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    f5b2:	191b      	adds	r3, r3, r4

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    f5b4:	240f      	movs	r4, #15
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    f5b6:	251f      	movs	r5, #31
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f5b8:	80d3      	strh	r3, [r2, #6]
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    f5ba:	0d8b      	lsrs	r3, r1, #22
    f5bc:	4023      	ands	r3, r4
    f5be:	7153      	strb	r3, [r2, #5]
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    f5c0:	0c4b      	lsrs	r3, r1, #17
    f5c2:	402b      	ands	r3, r5
    f5c4:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    f5c6:	7903      	ldrb	r3, [r0, #4]
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	d10c      	bne.n	f5e6 <rtc_calendar_register_value_to_time+0x3a>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    f5cc:	0b0b      	lsrs	r3, r1, #12
    f5ce:	401c      	ands	r4, r3
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    f5d0:	03cb      	lsls	r3, r1, #15
    f5d2:	0fdb      	lsrs	r3, r3, #31
		time->hour = ((register_value &
    f5d4:	7094      	strb	r4, [r2, #2]
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    f5d6:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    f5d8:	233f      	movs	r3, #63	; 0x3f
    f5da:	0988      	lsrs	r0, r1, #6
    f5dc:	4018      	ands	r0, r3
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    f5de:	4019      	ands	r1, r3
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    f5e0:	7050      	strb	r0, [r2, #1]
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    f5e2:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    f5e4:	bd30      	pop	{r4, r5, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    f5e6:	0b0b      	lsrs	r3, r1, #12
    f5e8:	401d      	ands	r5, r3
    f5ea:	7095      	strb	r5, [r2, #2]
    f5ec:	e7f4      	b.n	f5d8 <rtc_calendar_register_value_to_time+0x2c>
    f5ee:	46c0      	nop			; (mov r8, r8)

0000f5f0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    f5f0:	000a      	movs	r2, r1

	Rtc *const rtc_module = module->hw;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    f5f2:	7941      	ldrb	r1, [r0, #5]
{
    f5f4:	b510      	push	{r4, lr}
	Rtc *const rtc_module = module->hw;
    f5f6:	6803      	ldr	r3, [r0, #0]
	if (!(module->continuously_update)) {
    f5f8:	2900      	cmp	r1, #0
    f5fa:	d006      	beq.n	f60a <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    f5fc:	8859      	ldrh	r1, [r3, #2]
    f5fe:	0449      	lsls	r1, r1, #17
    f600:	d50b      	bpl.n	f61a <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    f602:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    f604:	4b0a      	ldr	r3, [pc, #40]	; (f630 <rtc_calendar_get_time+0x40>)
    f606:	4798      	blx	r3
}
    f608:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    f60a:	490a      	ldr	r1, [pc, #40]	; (f634 <rtc_calendar_get_time+0x44>)
    f60c:	8059      	strh	r1, [r3, #2]
    f60e:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f610:	7aa1      	ldrb	r1, [r4, #10]
    f612:	b249      	sxtb	r1, r1
    f614:	2900      	cmp	r1, #0
    f616:	daf4      	bge.n	f602 <rtc_calendar_get_time+0x12>
    f618:	e7fa      	b.n	f610 <rtc_calendar_get_time+0x20>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    f61a:	24c0      	movs	r4, #192	; 0xc0
    f61c:	8859      	ldrh	r1, [r3, #2]
    f61e:	0224      	lsls	r4, r4, #8
    f620:	4321      	orrs	r1, r4
    f622:	8059      	strh	r1, [r3, #2]
    f624:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f626:	7aa1      	ldrb	r1, [r4, #10]
    f628:	b249      	sxtb	r1, r1
    f62a:	2900      	cmp	r1, #0
    f62c:	dae9      	bge.n	f602 <rtc_calendar_get_time+0x12>
    f62e:	e7fa      	b.n	f626 <rtc_calendar_get_time+0x36>
    f630:	0000f5ad 	.word	0x0000f5ad
    f634:	ffff8000 	.word	0xffff8000

0000f638 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    f638:	b570      	push	{r4, r5, r6, lr}

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    f63a:	2317      	movs	r3, #23
{
    f63c:	000d      	movs	r5, r1
    f63e:	0014      	movs	r4, r2
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    f640:	2a01      	cmp	r2, #1
    f642:	d901      	bls.n	f648 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    f644:	0018      	movs	r0, r3
    f646:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    f648:	4b06      	ldr	r3, [pc, #24]	; (f664 <rtc_calendar_set_alarm+0x2c>)
	Rtc *const rtc_module = module->hw;
    f64a:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    f64c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f64e:	7ab3      	ldrb	r3, [r6, #10]
    f650:	b25b      	sxtb	r3, r3
    f652:	2b00      	cmp	r3, #0
    f654:	dbfb      	blt.n	f64e <rtc_calendar_set_alarm+0x16>
    f656:	00e4      	lsls	r4, r4, #3
    f658:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    f65a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    f65c:	7a2b      	ldrb	r3, [r5, #8]
    f65e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    f660:	2300      	movs	r3, #0
    f662:	e7ef      	b.n	f644 <rtc_calendar_set_alarm+0xc>
    f664:	0000f571 	.word	0x0000f571

0000f668 <rtc_calendar_init>:
{
    f668:	b530      	push	{r4, r5, lr}
	module->hw = hw;
    f66a:	6001      	str	r1, [r0, #0]
    f66c:	2120      	movs	r1, #32
{
    f66e:	0014      	movs	r4, r2
    f670:	4a1c      	ldr	r2, [pc, #112]	; (f6e4 <rtc_calendar_init+0x7c>)
    f672:	0005      	movs	r5, r0
    f674:	6993      	ldr	r3, [r2, #24]
    f676:	b083      	sub	sp, #12
    f678:	430b      	orrs	r3, r1
    f67a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    f67c:	2302      	movs	r3, #2
    f67e:	a901      	add	r1, sp, #4
    f680:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    f682:	2004      	movs	r0, #4
    f684:	4b18      	ldr	r3, [pc, #96]	; (f6e8 <rtc_calendar_init+0x80>)
    f686:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    f688:	2004      	movs	r0, #4
    f68a:	4b18      	ldr	r3, [pc, #96]	; (f6ec <rtc_calendar_init+0x84>)
    f68c:	4798      	blx	r3
	rtc_calendar_reset(module);
    f68e:	4b18      	ldr	r3, [pc, #96]	; (f6f0 <rtc_calendar_init+0x88>)
    f690:	0028      	movs	r0, r5
    f692:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    f694:	7923      	ldrb	r3, [r4, #4]
    f696:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    f698:	78e3      	ldrb	r3, [r4, #3]
    f69a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    f69c:	88e3      	ldrh	r3, [r4, #6]
    f69e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    f6a0:	4b14      	ldr	r3, [pc, #80]	; (f6f4 <rtc_calendar_init+0x8c>)
    f6a2:	601d      	str	r5, [r3, #0]
	if (!(config->clock_24h)) {
    f6a4:	7921      	ldrb	r1, [r4, #4]
	Rtc *const rtc_module = module->hw;
    f6a6:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f6a8:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    f6aa:	2900      	cmp	r1, #0
    f6ac:	d017      	beq.n	f6de <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f6ae:	2108      	movs	r1, #8
    f6b0:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    f6b2:	78a1      	ldrb	r1, [r4, #2]
    f6b4:	2900      	cmp	r1, #0
    f6b6:	d001      	beq.n	f6bc <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    f6b8:	2180      	movs	r1, #128	; 0x80
    f6ba:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    f6bc:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    f6be:	78e3      	ldrb	r3, [r4, #3]
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d004      	beq.n	f6ce <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    f6c4:	2380      	movs	r3, #128	; 0x80
    f6c6:	8851      	ldrh	r1, [r2, #2]
    f6c8:	01db      	lsls	r3, r3, #7
    f6ca:	430b      	orrs	r3, r1
    f6cc:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    f6ce:	0021      	movs	r1, r4
    f6d0:	2200      	movs	r2, #0
    f6d2:	3108      	adds	r1, #8
    f6d4:	0028      	movs	r0, r5
    f6d6:	4b08      	ldr	r3, [pc, #32]	; (f6f8 <rtc_calendar_init+0x90>)
    f6d8:	4798      	blx	r3
}
    f6da:	b003      	add	sp, #12
    f6dc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    f6de:	2148      	movs	r1, #72	; 0x48
    f6e0:	430b      	orrs	r3, r1
    f6e2:	e7e6      	b.n	f6b2 <rtc_calendar_init+0x4a>
    f6e4:	40000400 	.word	0x40000400
    f6e8:	000106c5 	.word	0x000106c5
    f6ec:	0001063d 	.word	0x0001063d
    f6f0:	0000f52d 	.word	0x0000f52d
    f6f4:	20000ef4 	.word	0x20000ef4
    f6f8:	0000f639 	.word	0x0000f639

0000f6fc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    f6fc:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    f6fe:	4b10      	ldr	r3, [pc, #64]	; (f740 <RTC_Handler+0x44>)
    f700:	681a      	ldr	r2, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    f702:	8a51      	ldrh	r1, [r2, #18]
	Rtc *const rtc_module = module->hw;
    f704:	6814      	ldr	r4, [r2, #0]
	callback_mask &= module->registered_callback;
    f706:	8a13      	ldrh	r3, [r2, #16]
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    f708:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
    f70a:	4019      	ands	r1, r3
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    f70c:	79e3      	ldrb	r3, [r4, #7]
    f70e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    f710:	b258      	sxtb	r0, r3
    f712:	2800      	cmp	r0, #0
    f714:	db07      	blt.n	f726 <RTC_Handler+0x2a>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    f716:	2001      	movs	r0, #1
    f718:	4218      	tst	r0, r3
    f71a:	d003      	beq.n	f724 <RTC_Handler+0x28>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    f71c:	4208      	tst	r0, r1
    f71e:	d10c      	bne.n	f73a <RTC_Handler+0x3e>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    f720:	2301      	movs	r3, #1
    f722:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    f724:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    f726:	078b      	lsls	r3, r1, #30
    f728:	d402      	bmi.n	f730 <RTC_Handler+0x34>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    f72a:	2380      	movs	r3, #128	; 0x80
    f72c:	7223      	strb	r3, [r4, #8]
    f72e:	e7f9      	b.n	f724 <RTC_Handler+0x28>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    f730:	68d3      	ldr	r3, [r2, #12]
    f732:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    f734:	2380      	movs	r3, #128	; 0x80
    f736:	7223      	strb	r3, [r4, #8]
    f738:	e7f4      	b.n	f724 <RTC_Handler+0x28>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    f73a:	6893      	ldr	r3, [r2, #8]
    f73c:	4798      	blx	r3
    f73e:	e7ef      	b.n	f720 <RTC_Handler+0x24>
    f740:	20000ef4 	.word	0x20000ef4

0000f744 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    f744:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    f746:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f748:	2340      	movs	r3, #64	; 0x40
    f74a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    f74c:	4281      	cmp	r1, r0
    f74e:	d202      	bcs.n	f756 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    f750:	0018      	movs	r0, r3
    f752:	bd10      	pop	{r4, pc}
		baud_calculated++;
    f754:	001c      	movs	r4, r3
    f756:	1c63      	adds	r3, r4, #1
		clock_value = clock_value - baudrate;
    f758:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    f75a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    f75c:	4288      	cmp	r0, r1
    f75e:	d9f9      	bls.n	f754 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f760:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    f762:	2cff      	cmp	r4, #255	; 0xff
    f764:	d8f4      	bhi.n	f750 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    f766:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    f768:	2300      	movs	r3, #0
    f76a:	e7f1      	b.n	f750 <_sercom_get_sync_baud_val+0xc>

0000f76c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    f76c:	b530      	push	{r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    f76e:	4c0e      	ldr	r4, [pc, #56]	; (f7a8 <sercom_set_gclk_generator+0x3c>)
{
    f770:	b083      	sub	sp, #12
	if (!_sercom_config.generator_is_set || force_change) {
    f772:	7823      	ldrb	r3, [r4, #0]
{
    f774:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    f776:	2b00      	cmp	r3, #0
    f778:	d006      	beq.n	f788 <sercom_set_gclk_generator+0x1c>
    f77a:	2900      	cmp	r1, #0
    f77c:	d104      	bne.n	f788 <sercom_set_gclk_generator+0x1c>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    f77e:	7863      	ldrb	r3, [r4, #1]
    f780:	4283      	cmp	r3, r0
    f782:	d00f      	beq.n	f7a4 <sercom_set_gclk_generator+0x38>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    f784:	201d      	movs	r0, #29
    f786:	e00b      	b.n	f7a0 <sercom_set_gclk_generator+0x34>
		gclk_chan_conf.source_generator = generator_source;
    f788:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f78a:	2013      	movs	r0, #19
    f78c:	4b07      	ldr	r3, [pc, #28]	; (f7ac <sercom_set_gclk_generator+0x40>)
		gclk_chan_conf.source_generator = generator_source;
    f78e:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f790:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    f792:	2013      	movs	r0, #19
    f794:	4b06      	ldr	r3, [pc, #24]	; (f7b0 <sercom_set_gclk_generator+0x44>)
    f796:	4798      	blx	r3
		_sercom_config.generator_is_set = true;
    f798:	2301      	movs	r3, #1
		return STATUS_OK;
    f79a:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    f79c:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    f79e:	7023      	strb	r3, [r4, #0]
}
    f7a0:	b003      	add	sp, #12
    f7a2:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    f7a4:	2000      	movs	r0, #0
    f7a6:	e7fb      	b.n	f7a0 <sercom_set_gclk_generator+0x34>
    f7a8:	20000ad0 	.word	0x20000ad0
    f7ac:	000106c5 	.word	0x000106c5
    f7b0:	0001063d 	.word	0x0001063d

0000f7b4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    f7b4:	4b3a      	ldr	r3, [pc, #232]	; (f8a0 <_sercom_get_default_pad+0xec>)
    f7b6:	4298      	cmp	r0, r3
    f7b8:	d043      	beq.n	f842 <_sercom_get_default_pad+0x8e>
    f7ba:	d90a      	bls.n	f7d2 <_sercom_get_default_pad+0x1e>
    f7bc:	4b39      	ldr	r3, [pc, #228]	; (f8a4 <_sercom_get_default_pad+0xf0>)
    f7be:	4298      	cmp	r0, r3
    f7c0:	d017      	beq.n	f7f2 <_sercom_get_default_pad+0x3e>
    f7c2:	4b39      	ldr	r3, [pc, #228]	; (f8a8 <_sercom_get_default_pad+0xf4>)
    f7c4:	4298      	cmp	r0, r3
    f7c6:	d032      	beq.n	f82e <_sercom_get_default_pad+0x7a>
    f7c8:	4b38      	ldr	r3, [pc, #224]	; (f8ac <_sercom_get_default_pad+0xf8>)
    f7ca:	4298      	cmp	r0, r3
    f7cc:	d01b      	beq.n	f806 <_sercom_get_default_pad+0x52>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    f7ce:	2000      	movs	r0, #0
}
    f7d0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    f7d2:	4b37      	ldr	r3, [pc, #220]	; (f8b0 <_sercom_get_default_pad+0xfc>)
    f7d4:	4298      	cmp	r0, r3
    f7d6:	d020      	beq.n	f81a <_sercom_get_default_pad+0x66>
    f7d8:	4b36      	ldr	r3, [pc, #216]	; (f8b4 <_sercom_get_default_pad+0x100>)
    f7da:	4298      	cmp	r0, r3
    f7dc:	d1f7      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f7de:	2901      	cmp	r1, #1
    f7e0:	d043      	beq.n	f86a <_sercom_get_default_pad+0xb6>
    f7e2:	2900      	cmp	r1, #0
    f7e4:	d03f      	beq.n	f866 <_sercom_get_default_pad+0xb2>
    f7e6:	2902      	cmp	r1, #2
    f7e8:	d03b      	beq.n	f862 <_sercom_get_default_pad+0xae>
    f7ea:	2903      	cmp	r1, #3
    f7ec:	d1ef      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f7ee:	4832      	ldr	r0, [pc, #200]	; (f8b8 <_sercom_get_default_pad+0x104>)
    f7f0:	e7ee      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f7f2:	2901      	cmp	r1, #1
    f7f4:	d031      	beq.n	f85a <_sercom_get_default_pad+0xa6>
    f7f6:	2900      	cmp	r1, #0
    f7f8:	d02d      	beq.n	f856 <_sercom_get_default_pad+0xa2>
    f7fa:	2902      	cmp	r1, #2
    f7fc:	d02f      	beq.n	f85e <_sercom_get_default_pad+0xaa>
    f7fe:	2903      	cmp	r1, #3
    f800:	d1e5      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f802:	482e      	ldr	r0, [pc, #184]	; (f8bc <_sercom_get_default_pad+0x108>)
    f804:	e7e4      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f806:	2901      	cmp	r1, #1
    f808:	d03f      	beq.n	f88a <_sercom_get_default_pad+0xd6>
    f80a:	2900      	cmp	r1, #0
    f80c:	d03b      	beq.n	f886 <_sercom_get_default_pad+0xd2>
    f80e:	2902      	cmp	r1, #2
    f810:	d037      	beq.n	f882 <_sercom_get_default_pad+0xce>
    f812:	2903      	cmp	r1, #3
    f814:	d1db      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f816:	482a      	ldr	r0, [pc, #168]	; (f8c0 <_sercom_get_default_pad+0x10c>)
    f818:	e7da      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f81a:	2901      	cmp	r1, #1
    f81c:	d03d      	beq.n	f89a <_sercom_get_default_pad+0xe6>
    f81e:	2900      	cmp	r1, #0
    f820:	d039      	beq.n	f896 <_sercom_get_default_pad+0xe2>
    f822:	2902      	cmp	r1, #2
    f824:	d02b      	beq.n	f87e <_sercom_get_default_pad+0xca>
    f826:	2903      	cmp	r1, #3
    f828:	d1d1      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f82a:	4826      	ldr	r0, [pc, #152]	; (f8c4 <_sercom_get_default_pad+0x110>)
    f82c:	e7d0      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f82e:	2901      	cmp	r1, #1
    f830:	d023      	beq.n	f87a <_sercom_get_default_pad+0xc6>
    f832:	2900      	cmp	r1, #0
    f834:	d01f      	beq.n	f876 <_sercom_get_default_pad+0xc2>
    f836:	2902      	cmp	r1, #2
    f838:	d01b      	beq.n	f872 <_sercom_get_default_pad+0xbe>
    f83a:	2903      	cmp	r1, #3
    f83c:	d1c7      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f83e:	4822      	ldr	r0, [pc, #136]	; (f8c8 <_sercom_get_default_pad+0x114>)
    f840:	e7c6      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f842:	2901      	cmp	r1, #1
    f844:	d025      	beq.n	f892 <_sercom_get_default_pad+0xde>
    f846:	2900      	cmp	r1, #0
    f848:	d021      	beq.n	f88e <_sercom_get_default_pad+0xda>
    f84a:	2902      	cmp	r1, #2
    f84c:	d00f      	beq.n	f86e <_sercom_get_default_pad+0xba>
    f84e:	2903      	cmp	r1, #3
    f850:	d1bd      	bne.n	f7ce <_sercom_get_default_pad+0x1a>
    f852:	481e      	ldr	r0, [pc, #120]	; (f8cc <_sercom_get_default_pad+0x118>)
    f854:	e7bc      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f856:	481e      	ldr	r0, [pc, #120]	; (f8d0 <_sercom_get_default_pad+0x11c>)
    f858:	e7ba      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f85a:	481e      	ldr	r0, [pc, #120]	; (f8d4 <_sercom_get_default_pad+0x120>)
    f85c:	e7b8      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f85e:	481e      	ldr	r0, [pc, #120]	; (f8d8 <_sercom_get_default_pad+0x124>)
    f860:	e7b6      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f862:	481e      	ldr	r0, [pc, #120]	; (f8dc <_sercom_get_default_pad+0x128>)
    f864:	e7b4      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f866:	2003      	movs	r0, #3
    f868:	e7b2      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f86a:	481d      	ldr	r0, [pc, #116]	; (f8e0 <_sercom_get_default_pad+0x12c>)
    f86c:	e7b0      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f86e:	481d      	ldr	r0, [pc, #116]	; (f8e4 <_sercom_get_default_pad+0x130>)
    f870:	e7ae      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f872:	481d      	ldr	r0, [pc, #116]	; (f8e8 <_sercom_get_default_pad+0x134>)
    f874:	e7ac      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f876:	481d      	ldr	r0, [pc, #116]	; (f8ec <_sercom_get_default_pad+0x138>)
    f878:	e7aa      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f87a:	481d      	ldr	r0, [pc, #116]	; (f8f0 <_sercom_get_default_pad+0x13c>)
    f87c:	e7a8      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f87e:	481d      	ldr	r0, [pc, #116]	; (f8f4 <_sercom_get_default_pad+0x140>)
    f880:	e7a6      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f882:	481d      	ldr	r0, [pc, #116]	; (f8f8 <_sercom_get_default_pad+0x144>)
    f884:	e7a4      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f886:	481d      	ldr	r0, [pc, #116]	; (f8fc <_sercom_get_default_pad+0x148>)
    f888:	e7a2      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f88a:	481d      	ldr	r0, [pc, #116]	; (f900 <_sercom_get_default_pad+0x14c>)
    f88c:	e7a0      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f88e:	481d      	ldr	r0, [pc, #116]	; (f904 <_sercom_get_default_pad+0x150>)
    f890:	e79e      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f892:	481d      	ldr	r0, [pc, #116]	; (f908 <_sercom_get_default_pad+0x154>)
    f894:	e79c      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f896:	481d      	ldr	r0, [pc, #116]	; (f90c <_sercom_get_default_pad+0x158>)
    f898:	e79a      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f89a:	481d      	ldr	r0, [pc, #116]	; (f910 <_sercom_get_default_pad+0x15c>)
    f89c:	e798      	b.n	f7d0 <_sercom_get_default_pad+0x1c>
    f89e:	46c0      	nop			; (mov r8, r8)
    f8a0:	42001000 	.word	0x42001000
    f8a4:	42001800 	.word	0x42001800
    f8a8:	42001c00 	.word	0x42001c00
    f8ac:	42001400 	.word	0x42001400
    f8b0:	42000800 	.word	0x42000800
    f8b4:	42000c00 	.word	0x42000c00
    f8b8:	001f0003 	.word	0x001f0003
    f8bc:	000f0003 	.word	0x000f0003
    f8c0:	00130003 	.word	0x00130003
    f8c4:	00070003 	.word	0x00070003
    f8c8:	00190003 	.word	0x00190003
    f8cc:	000b0003 	.word	0x000b0003
    f8d0:	000c0003 	.word	0x000c0003
    f8d4:	000d0003 	.word	0x000d0003
    f8d8:	000e0003 	.word	0x000e0003
    f8dc:	001e0003 	.word	0x001e0003
    f8e0:	00010003 	.word	0x00010003
    f8e4:	000a0003 	.word	0x000a0003
    f8e8:	00180003 	.word	0x00180003
    f8ec:	00160003 	.word	0x00160003
    f8f0:	00170003 	.word	0x00170003
    f8f4:	00060003 	.word	0x00060003
    f8f8:	00120003 	.word	0x00120003
    f8fc:	00100003 	.word	0x00100003
    f900:	00110003 	.word	0x00110003
    f904:	00080003 	.word	0x00080003
    f908:	00090003 	.word	0x00090003
    f90c:	00040003 	.word	0x00040003
    f910:	00050003 	.word	0x00050003

0000f914 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    f914:	b570      	push	{r4, r5, r6, lr}
    f916:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    f918:	4669      	mov	r1, sp
    f91a:	4b09      	ldr	r3, [pc, #36]	; (f940 <_sercom_get_sercom_inst_index+0x2c>)
    f91c:	466a      	mov	r2, sp
    f91e:	cb70      	ldmia	r3!, {r4, r5, r6}
    f920:	c170      	stmia	r1!, {r4, r5, r6}
    f922:	cb70      	ldmia	r3!, {r4, r5, r6}
    f924:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f926:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    f928:	0099      	lsls	r1, r3, #2
    f92a:	5851      	ldr	r1, [r2, r1]
    f92c:	4281      	cmp	r1, r0
    f92e:	d005      	beq.n	f93c <_sercom_get_sercom_inst_index+0x28>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f930:	3301      	adds	r3, #1
    f932:	2b06      	cmp	r3, #6
    f934:	d1f8      	bne.n	f928 <_sercom_get_sercom_inst_index+0x14>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    f936:	2000      	movs	r0, #0
}
    f938:	b006      	add	sp, #24
    f93a:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    f93c:	b2d8      	uxtb	r0, r3
    f93e:	e7fb      	b.n	f938 <_sercom_get_sercom_inst_index+0x24>
    f940:	00016a98 	.word	0x00016a98

0000f944 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    f944:	4770      	bx	lr
    f946:	46c0      	nop			; (mov r8, r8)

0000f948 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    f948:	b5f0      	push	{r4, r5, r6, r7, lr}
    f94a:	468c      	mov	ip, r1
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    f94c:	490b      	ldr	r1, [pc, #44]	; (f97c <_sercom_set_handler+0x34>)
    f94e:	780b      	ldrb	r3, [r1, #0]
    f950:	2b00      	cmp	r3, #0
    f952:	d110      	bne.n	f976 <_sercom_set_handler+0x2e>
    f954:	2300      	movs	r3, #0
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    f956:	2500      	movs	r5, #0
    f958:	4c09      	ldr	r4, [pc, #36]	; (f980 <_sercom_set_handler+0x38>)
    f95a:	4f0a      	ldr	r7, [pc, #40]	; (f984 <_sercom_set_handler+0x3c>)
    f95c:	4e0a      	ldr	r6, [pc, #40]	; (f988 <_sercom_set_handler+0x40>)
    f95e:	18f2      	adds	r2, r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    f960:	50e7      	str	r7, [r4, r3]
    f962:	3304      	adds	r3, #4
			_sercom_instances[i] = NULL;
    f964:	6015      	str	r5, [r2, #0]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f966:	2b18      	cmp	r3, #24
    f968:	d1f9      	bne.n	f95e <_sercom_set_handler+0x16>
		}

		_handler_table_initialized = true;
    f96a:	3b17      	subs	r3, #23
    f96c:	700b      	strb	r3, [r1, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    f96e:	4663      	mov	r3, ip
    f970:	0080      	lsls	r0, r0, #2
    f972:	5023      	str	r3, [r4, r0]
}
    f974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f976:	4c02      	ldr	r4, [pc, #8]	; (f980 <_sercom_set_handler+0x38>)
    f978:	e7f9      	b.n	f96e <_sercom_set_handler+0x26>
    f97a:	46c0      	nop			; (mov r8, r8)
    f97c:	20000ad2 	.word	0x20000ad2
    f980:	20000ad4 	.word	0x20000ad4
    f984:	0000f945 	.word	0x0000f945
    f988:	20000ef8 	.word	0x20000ef8

0000f98c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    f98c:	b500      	push	{lr}
    f98e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    f990:	466a      	mov	r2, sp
    f992:	2309      	movs	r3, #9
    f994:	7013      	strb	r3, [r2, #0]
    f996:	3301      	adds	r3, #1
    f998:	7053      	strb	r3, [r2, #1]
    f99a:	3301      	adds	r3, #1
    f99c:	7093      	strb	r3, [r2, #2]
    f99e:	3301      	adds	r3, #1
    f9a0:	70d3      	strb	r3, [r2, #3]
    f9a2:	3301      	adds	r3, #1
    f9a4:	7113      	strb	r3, [r2, #4]
    f9a6:	3301      	adds	r3, #1
    f9a8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    f9aa:	4b03      	ldr	r3, [pc, #12]	; (f9b8 <_sercom_get_interrupt_vector+0x2c>)
    f9ac:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    f9ae:	466b      	mov	r3, sp
    f9b0:	5618      	ldrsb	r0, [r3, r0]
}
    f9b2:	b003      	add	sp, #12
    f9b4:	bd00      	pop	{pc}
    f9b6:	46c0      	nop			; (mov r8, r8)
    f9b8:	0000f915 	.word	0x0000f915

0000f9bc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    f9bc:	b510      	push	{r4, lr}
    f9be:	4b02      	ldr	r3, [pc, #8]	; (f9c8 <SERCOM0_Handler+0xc>)
    f9c0:	2000      	movs	r0, #0
    f9c2:	681b      	ldr	r3, [r3, #0]
    f9c4:	4798      	blx	r3
    f9c6:	bd10      	pop	{r4, pc}
    f9c8:	20000ad4 	.word	0x20000ad4

0000f9cc <SERCOM1_Handler>:
    f9cc:	b510      	push	{r4, lr}
    f9ce:	4b02      	ldr	r3, [pc, #8]	; (f9d8 <SERCOM1_Handler+0xc>)
    f9d0:	2001      	movs	r0, #1
    f9d2:	685b      	ldr	r3, [r3, #4]
    f9d4:	4798      	blx	r3
    f9d6:	bd10      	pop	{r4, pc}
    f9d8:	20000ad4 	.word	0x20000ad4

0000f9dc <SERCOM2_Handler>:
    f9dc:	b510      	push	{r4, lr}
    f9de:	4b02      	ldr	r3, [pc, #8]	; (f9e8 <SERCOM2_Handler+0xc>)
    f9e0:	2002      	movs	r0, #2
    f9e2:	689b      	ldr	r3, [r3, #8]
    f9e4:	4798      	blx	r3
    f9e6:	bd10      	pop	{r4, pc}
    f9e8:	20000ad4 	.word	0x20000ad4

0000f9ec <SERCOM3_Handler>:
    f9ec:	b510      	push	{r4, lr}
    f9ee:	4b02      	ldr	r3, [pc, #8]	; (f9f8 <SERCOM3_Handler+0xc>)
    f9f0:	2003      	movs	r0, #3
    f9f2:	68db      	ldr	r3, [r3, #12]
    f9f4:	4798      	blx	r3
    f9f6:	bd10      	pop	{r4, pc}
    f9f8:	20000ad4 	.word	0x20000ad4

0000f9fc <SERCOM4_Handler>:
    f9fc:	b510      	push	{r4, lr}
    f9fe:	4b02      	ldr	r3, [pc, #8]	; (fa08 <SERCOM4_Handler+0xc>)
    fa00:	2004      	movs	r0, #4
    fa02:	691b      	ldr	r3, [r3, #16]
    fa04:	4798      	blx	r3
    fa06:	bd10      	pop	{r4, pc}
    fa08:	20000ad4 	.word	0x20000ad4

0000fa0c <SERCOM5_Handler>:
    fa0c:	b510      	push	{r4, lr}
    fa0e:	4b02      	ldr	r3, [pc, #8]	; (fa18 <SERCOM5_Handler+0xc>)
    fa10:	2005      	movs	r0, #5
    fa12:	695b      	ldr	r3, [r3, #20]
    fa14:	4798      	blx	r3
    fa16:	bd10      	pop	{r4, pc}
    fa18:	20000ad4 	.word	0x20000ad4

0000fa1c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    fa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa1e:	b083      	sub	sp, #12
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    fa20:	2300      	movs	r3, #0
    fa22:	466a      	mov	r2, sp

	SercomSpi *const spi_module = &(module->hw->SPI);
    fa24:	6804      	ldr	r4, [r0, #0]
{
    fa26:	0005      	movs	r5, r0
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    fa28:	4e24      	ldr	r6, [pc, #144]	; (fabc <spi_set_baudrate+0xa0>)
    fa2a:	0020      	movs	r0, r4
	uint16_t baud = 0;
    fa2c:	80d3      	strh	r3, [r2, #6]
{
    fa2e:	000f      	movs	r7, r1
    fa30:	47b0      	blx	r6
    fa32:	231f      	movs	r3, #31
    fa34:	4018      	ands	r0, r3
    fa36:	3b1e      	subs	r3, #30
    fa38:	2280      	movs	r2, #128	; 0x80
    fa3a:	4083      	lsls	r3, r0
    fa3c:	4920      	ldr	r1, [pc, #128]	; (fac0 <spi_set_baudrate+0xa4>)
    fa3e:	508b      	str	r3, [r1, r2]
    fa40:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    fa42:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    fa44:	2b00      	cmp	r3, #0
    fa46:	d1fc      	bne.n	fa42 <spi_set_baudrate+0x26>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    fa48:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    fa4a:	338f      	adds	r3, #143	; 0x8f
    fa4c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    fa4e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    fa50:	6823      	ldr	r3, [r4, #0]
    fa52:	4393      	bics	r3, r2
    fa54:	6023      	str	r3, [r4, #0]
    fa56:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    fa58:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    fa5a:	2b00      	cmp	r3, #0
    fa5c:	d1fc      	bne.n	fa58 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fa5e:	4b19      	ldr	r3, [pc, #100]	; (fac4 <spi_set_baudrate+0xa8>)
    fa60:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fa62:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    fa64:	4b18      	ldr	r3, [pc, #96]	; (fac8 <spi_set_baudrate+0xac>)
    fa66:	b2c0      	uxtb	r0, r0
    fa68:	4798      	blx	r3

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    fa6a:	466b      	mov	r3, sp
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    fa6c:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
    fa6e:	1d9a      	adds	r2, r3, #6
    fa70:	0038      	movs	r0, r7
    fa72:	4b16      	ldr	r3, [pc, #88]	; (facc <spi_set_baudrate+0xb0>)
    fa74:	4798      	blx	r3
    fa76:	1e07      	subs	r7, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    fa78:	d003      	beq.n	fa82 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    fa7a:	2717      	movs	r7, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    fa7c:	0038      	movs	r0, r7
    fa7e:	b003      	add	sp, #12
    fa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    fa82:	466b      	mov	r3, sp
    fa84:	799b      	ldrb	r3, [r3, #6]
    fa86:	7323      	strb	r3, [r4, #12]
    fa88:	682c      	ldr	r4, [r5, #0]
    fa8a:	69e3      	ldr	r3, [r4, #28]
	while (spi_is_syncing(module)) {
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	d1fc      	bne.n	fa8a <spi_set_baudrate+0x6e>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fa90:	0020      	movs	r0, r4
    fa92:	47b0      	blx	r6
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    fa94:	231f      	movs	r3, #31
    fa96:	4018      	ands	r0, r3
    fa98:	3b1e      	subs	r3, #30
    fa9a:	4083      	lsls	r3, r0
    fa9c:	4a08      	ldr	r2, [pc, #32]	; (fac0 <spi_set_baudrate+0xa4>)
    fa9e:	6013      	str	r3, [r2, #0]
    faa0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    faa2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    faa4:	2b00      	cmp	r3, #0
    faa6:	d1fc      	bne.n	faa2 <spi_set_baudrate+0x86>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    faa8:	2202      	movs	r2, #2
    faaa:	6823      	ldr	r3, [r4, #0]
    faac:	4313      	orrs	r3, r2
    faae:	6023      	str	r3, [r4, #0]
    fab0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    fab2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    fab4:	2b00      	cmp	r3, #0
    fab6:	d1fc      	bne.n	fab2 <spi_set_baudrate+0x96>
    fab8:	e7e0      	b.n	fa7c <spi_set_baudrate+0x60>
    faba:	46c0      	nop			; (mov r8, r8)
    fabc:	0000f98d 	.word	0x0000f98d
    fac0:	e000e100 	.word	0xe000e100
    fac4:	0000f915 	.word	0x0000f915
    fac8:	000106e1 	.word	0x000106e1
    facc:	0000f745 	.word	0x0000f745

0000fad0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fad2:	464e      	mov	r6, r9
    fad4:	4645      	mov	r5, r8
    fad6:	46de      	mov	lr, fp
    fad8:	4657      	mov	r7, sl
    fada:	0004      	movs	r4, r0
    fadc:	b5e0      	push	{r5, r6, r7, lr}
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    fade:	6021      	str	r1, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    fae0:	680b      	ldr	r3, [r1, #0]
{
    fae2:	b087      	sub	sp, #28
    fae4:	000e      	movs	r6, r1
    fae6:	0015      	movs	r5, r2
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    fae8:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    faea:	079b      	lsls	r3, r3, #30
    faec:	d506      	bpl.n	fafc <spi_init+0x2c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    faee:	b007      	add	sp, #28
    faf0:	bc3c      	pop	{r2, r3, r4, r5}
    faf2:	4690      	mov	r8, r2
    faf4:	4699      	mov	r9, r3
    faf6:	46a2      	mov	sl, r4
    faf8:	46ab      	mov	fp, r5
    fafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    fafc:	2701      	movs	r7, #1
    fafe:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    fb00:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    fb02:	421f      	tst	r7, r3
    fb04:	d1f3      	bne.n	faee <spi_init+0x1e>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fb06:	4b63      	ldr	r3, [pc, #396]	; (fc94 <spi_init+0x1c4>)
    fb08:	0008      	movs	r0, r1
    fb0a:	469a      	mov	sl, r3
    fb0c:	4798      	blx	r3
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    fb0e:	1c81      	adds	r1, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    fb10:	408f      	lsls	r7, r1
			PM->APBCMASK.reg |= mask;
    fb12:	4b61      	ldr	r3, [pc, #388]	; (fc98 <spi_init+0x1c8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fb14:	3014      	adds	r0, #20
    fb16:	6a1a      	ldr	r2, [r3, #32]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    fb18:	4669      	mov	r1, sp
    fb1a:	4317      	orrs	r7, r2
    fb1c:	621f      	str	r7, [r3, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    fb1e:	2324      	movs	r3, #36	; 0x24
    fb20:	466a      	mov	r2, sp
    fb22:	4698      	mov	r8, r3
    fb24:	5ceb      	ldrb	r3, [r5, r3]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    fb26:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    fb28:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    fb2a:	0038      	movs	r0, r7
    fb2c:	4b5b      	ldr	r3, [pc, #364]	; (fc9c <spi_init+0x1cc>)
    fb2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    fb30:	0038      	movs	r0, r7
    fb32:	4b5b      	ldr	r3, [pc, #364]	; (fca0 <spi_init+0x1d0>)
    fb34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    fb36:	4643      	mov	r3, r8
    fb38:	2100      	movs	r1, #0
    fb3a:	5ce8      	ldrb	r0, [r5, r3]
    fb3c:	4b59      	ldr	r3, [pc, #356]	; (fca4 <spi_init+0x1d4>)
    fb3e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    fb40:	782b      	ldrb	r3, [r5, #0]
    fb42:	2b01      	cmp	r3, #1
    fb44:	d100      	bne.n	fb48 <spi_init+0x78>
    fb46:	e08a      	b.n	fc5e <spi_init+0x18e>
    fb48:	0023      	movs	r3, r4
    fb4a:	0021      	movs	r1, r4
		module->callback[i]        = NULL;
    fb4c:	2200      	movs	r2, #0
    fb4e:	330c      	adds	r3, #12
    fb50:	3128      	adds	r1, #40	; 0x28
    fb52:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    fb54:	428b      	cmp	r3, r1
    fb56:	d1fc      	bne.n	fb52 <spi_init+0x82>
	module->remaining_tx_buffer_length = 0x0000;
    fb58:	2700      	movs	r7, #0
	module->registered_callback        = 0x00;
    fb5a:	2336      	movs	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    fb5c:	86a2      	strh	r2, [r4, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    fb5e:	62e2      	str	r2, [r4, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    fb60:	8622      	strh	r2, [r4, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    fb62:	62a2      	str	r2, [r4, #40]	; 0x28
	module->registered_callback        = 0x00;
    fb64:	54e7      	strb	r7, [r4, r3]
	module->enabled_callback           = 0x00;
    fb66:	3301      	adds	r3, #1
    fb68:	54e7      	strb	r7, [r4, r3]
	module->status                     = STATUS_OK;
    fb6a:	3301      	adds	r3, #1
    fb6c:	54e7      	strb	r7, [r4, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    fb6e:	3b35      	subs	r3, #53	; 0x35
    fb70:	7263      	strb	r3, [r4, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    fb72:	6820      	ldr	r0, [r4, #0]
	module->locked                     = false;
    fb74:	7127      	strb	r7, [r4, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    fb76:	47d0      	blx	sl
    fb78:	0006      	movs	r6, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    fb7a:	4b4b      	ldr	r3, [pc, #300]	; (fca8 <spi_init+0x1d8>)
    fb7c:	494b      	ldr	r1, [pc, #300]	; (fcac <spi_init+0x1dc>)
    fb7e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    fb80:	4b4b      	ldr	r3, [pc, #300]	; (fcb0 <spi_init+0x1e0>)
    fb82:	00b6      	lsls	r6, r6, #2
    fb84:	50f4      	str	r4, [r6, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fb86:	6823      	ldr	r3, [r4, #0]
    fb88:	ae01      	add	r6, sp, #4
    fb8a:	4699      	mov	r9, r3
    fb8c:	2380      	movs	r3, #128	; 0x80
    fb8e:	7033      	strb	r3, [r6, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    fb90:	3b7f      	subs	r3, #127	; 0x7f
    fb92:	70b3      	strb	r3, [r6, #2]
	if(config->mode == SPI_MODE_SLAVE) {
    fb94:	782b      	ldrb	r3, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    fb96:	7077      	strb	r7, [r6, #1]
	config->powersave    = false;
    fb98:	70f7      	strb	r7, [r6, #3]
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	d058      	beq.n	fc50 <spi_init+0x180>
	uint32_t pad_pinmuxes[] = {
    fb9e:	2700      	movs	r7, #0
    fba0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			config->pinmux_pad0, config->pinmux_pad1,
    fba2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    fba4:	9303      	str	r3, [sp, #12]
    fba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    fba8:	9002      	str	r0, [sp, #8]
    fbaa:	9304      	str	r3, [sp, #16]
    fbac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    fbae:	b2f9      	uxtb	r1, r7
    fbb0:	9305      	str	r3, [sp, #20]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    fbb2:	4b40      	ldr	r3, [pc, #256]	; (fcb4 <spi_init+0x1e4>)
    fbb4:	469b      	mov	fp, r3
		if (current_pinmux == PINMUX_DEFAULT) {
    fbb6:	2800      	cmp	r0, #0
    fbb8:	d011      	beq.n	fbde <spi_init+0x10e>
		if (current_pinmux != PINMUX_UNUSED) {
    fbba:	1c43      	adds	r3, r0, #1
    fbbc:	d004      	beq.n	fbc8 <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    fbbe:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    fbc0:	0c00      	lsrs	r0, r0, #16
    fbc2:	b2c0      	uxtb	r0, r0
    fbc4:	0031      	movs	r1, r6
    fbc6:	47d8      	blx	fp
    fbc8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    fbca:	2f04      	cmp	r7, #4
    fbcc:	d00b      	beq.n	fbe6 <spi_init+0x116>
    fbce:	2108      	movs	r1, #8
    fbd0:	466a      	mov	r2, sp
    fbd2:	00bb      	lsls	r3, r7, #2
    fbd4:	1852      	adds	r2, r2, r1
    fbd6:	58d0      	ldr	r0, [r2, r3]
    fbd8:	b2f9      	uxtb	r1, r7
		if (current_pinmux == PINMUX_DEFAULT) {
    fbda:	2800      	cmp	r0, #0
    fbdc:	d1ed      	bne.n	fbba <spi_init+0xea>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    fbde:	4648      	mov	r0, r9
    fbe0:	4b35      	ldr	r3, [pc, #212]	; (fcb8 <spi_init+0x1e8>)
    fbe2:	4798      	blx	r3
    fbe4:	e7e9      	b.n	fbba <spi_init+0xea>
	module->mode             = config->mode;
    fbe6:	782b      	ldrb	r3, [r5, #0]
	uint16_t baud = 0;
    fbe8:	466a      	mov	r2, sp
	module->mode             = config->mode;
    fbea:	7163      	strb	r3, [r4, #5]
	module->character_size   = config->character_size;
    fbec:	7c2b      	ldrb	r3, [r5, #16]
    fbee:	71a3      	strb	r3, [r4, #6]
	module->receiver_enabled = config->receiver_enable;
    fbf0:	7cab      	ldrb	r3, [r5, #18]
    fbf2:	71e3      	strb	r3, [r4, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    fbf4:	7d2b      	ldrb	r3, [r5, #20]
    fbf6:	7223      	strb	r3, [r4, #8]
	uint16_t baud = 0;
    fbf8:	2300      	movs	r3, #0
    fbfa:	8053      	strh	r3, [r2, #2]
	if (config->mode == SPI_MODE_MASTER) {
    fbfc:	782b      	ldrb	r3, [r5, #0]
    fbfe:	2b01      	cmp	r3, #1
    fc00:	d032      	beq.n	fc68 <spi_init+0x198>
	ctrla |= config->transfer_mode;
    fc02:	68aa      	ldr	r2, [r5, #8]
    fc04:	686b      	ldr	r3, [r5, #4]
	ctrlb |= config->character_size;
    fc06:	7c29      	ldrb	r1, [r5, #16]
	ctrla |= config->transfer_mode;
    fc08:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    fc0a:	68ea      	ldr	r2, [r5, #12]
    fc0c:	4313      	orrs	r3, r2
	if (config->run_in_standby || system_is_debugger_present()) {
    fc0e:	7c6a      	ldrb	r2, [r5, #17]
    fc10:	2a00      	cmp	r2, #0
    fc12:	d01f      	beq.n	fc54 <spi_init+0x184>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    fc14:	2280      	movs	r2, #128	; 0x80
    fc16:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    fc18:	7caa      	ldrb	r2, [r5, #18]
    fc1a:	2a00      	cmp	r2, #0
    fc1c:	d002      	beq.n	fc24 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    fc1e:	2280      	movs	r2, #128	; 0x80
    fc20:	0292      	lsls	r2, r2, #10
    fc22:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    fc24:	7cea      	ldrb	r2, [r5, #19]
    fc26:	2a00      	cmp	r2, #0
    fc28:	d002      	beq.n	fc30 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    fc2a:	2280      	movs	r2, #128	; 0x80
    fc2c:	0092      	lsls	r2, r2, #2
    fc2e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    fc30:	7d2a      	ldrb	r2, [r5, #20]
    fc32:	2a00      	cmp	r2, #0
    fc34:	d002      	beq.n	fc3c <spi_init+0x16c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    fc36:	2280      	movs	r2, #128	; 0x80
    fc38:	0192      	lsls	r2, r2, #6
    fc3a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    fc3c:	464a      	mov	r2, r9
    fc3e:	6812      	ldr	r2, [r2, #0]
	return STATUS_OK;
    fc40:	2000      	movs	r0, #0
	spi_module->CTRLA.reg |= ctrla;
    fc42:	4313      	orrs	r3, r2
    fc44:	464a      	mov	r2, r9
    fc46:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    fc48:	6853      	ldr	r3, [r2, #4]
    fc4a:	430b      	orrs	r3, r1
    fc4c:	6053      	str	r3, [r2, #4]
    fc4e:	e74e      	b.n	faee <spi_init+0x1e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    fc50:	70b7      	strb	r7, [r6, #2]
    fc52:	e7a4      	b.n	fb9e <spi_init+0xce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    fc54:	4a19      	ldr	r2, [pc, #100]	; (fcbc <spi_init+0x1ec>)
    fc56:	7892      	ldrb	r2, [r2, #2]
	if (config->run_in_standby || system_is_debugger_present()) {
    fc58:	0792      	lsls	r2, r2, #30
    fc5a:	d5dd      	bpl.n	fc18 <spi_init+0x148>
    fc5c:	e7da      	b.n	fc14 <spi_init+0x144>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    fc5e:	220c      	movs	r2, #12
    fc60:	6833      	ldr	r3, [r6, #0]
    fc62:	4313      	orrs	r3, r2
    fc64:	6033      	str	r3, [r6, #0]
    fc66:	e76f      	b.n	fb48 <spi_init+0x78>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fc68:	6820      	ldr	r0, [r4, #0]
    fc6a:	47d0      	blx	sl
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fc6c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    fc6e:	4b14      	ldr	r3, [pc, #80]	; (fcc0 <spi_init+0x1f0>)
    fc70:	b2c0      	uxtb	r0, r0
    fc72:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    fc74:	466b      	mov	r3, sp
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    fc76:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    fc78:	1c9a      	adds	r2, r3, #2
    fc7a:	69a8      	ldr	r0, [r5, #24]
    fc7c:	4b11      	ldr	r3, [pc, #68]	; (fcc4 <spi_init+0x1f4>)
    fc7e:	4798      	blx	r3
    fc80:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    fc82:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    fc84:	2b00      	cmp	r3, #0
    fc86:	d000      	beq.n	fc8a <spi_init+0x1ba>
    fc88:	e731      	b.n	faee <spi_init+0x1e>
		spi_module->BAUD.reg = (uint8_t)baud;
    fc8a:	466b      	mov	r3, sp
    fc8c:	464a      	mov	r2, r9
    fc8e:	789b      	ldrb	r3, [r3, #2]
    fc90:	7313      	strb	r3, [r2, #12]
    fc92:	e7b6      	b.n	fc02 <spi_init+0x132>
    fc94:	0000f915 	.word	0x0000f915
    fc98:	40000400 	.word	0x40000400
    fc9c:	000106c5 	.word	0x000106c5
    fca0:	0001063d 	.word	0x0001063d
    fca4:	0000f76d 	.word	0x0000f76d
    fca8:	0000f949 	.word	0x0000f949
    fcac:	0000ff31 	.word	0x0000ff31
    fcb0:	20000ef8 	.word	0x20000ef8
    fcb4:	000107c5 	.word	0x000107c5
    fcb8:	0000f7b5 	.word	0x0000f7b5
    fcbc:	41002000 	.word	0x41002000
    fcc0:	000106e1 	.word	0x000106e1
    fcc4:	0000f745 	.word	0x0000f745

0000fcc8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcca:	46de      	mov	lr, fp
    fccc:	464e      	mov	r6, r9
    fcce:	4657      	mov	r7, sl
    fcd0:	4645      	mov	r5, r8
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    fcd2:	2438      	movs	r4, #56	; 0x38
{
    fcd4:	b5e0      	push	{r5, r6, r7, lr}
	if (module->status == STATUS_BUSY) {
    fcd6:	5d06      	ldrb	r6, [r0, r4]
{
    fcd8:	468b      	mov	fp, r1
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    fcda:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    fcdc:	2e05      	cmp	r6, #5
    fcde:	d002      	beq.n	fce6 <spi_read_buffer_wait+0x1e>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    fce0:	3412      	adds	r4, #18
	if (length == 0) {
    fce2:	2a00      	cmp	r2, #0
    fce4:	d106      	bne.n	fcf4 <spi_read_buffer_wait+0x2c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    fce6:	0020      	movs	r0, r4
    fce8:	bc3c      	pop	{r2, r3, r4, r5}
    fcea:	4690      	mov	r8, r2
    fcec:	4699      	mov	r9, r3
    fcee:	46a2      	mov	sl, r4
    fcf0:	46ab      	mov	fp, r5
    fcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    fcf4:	79c4      	ldrb	r4, [r0, #7]
    fcf6:	2c00      	cmp	r4, #0
    fcf8:	d101      	bne.n	fcfe <spi_read_buffer_wait+0x36>
		return STATUS_ERR_DENIED;
    fcfa:	341c      	adds	r4, #28
    fcfc:	e7f3      	b.n	fce6 <spi_read_buffer_wait+0x1e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fcfe:	05db      	lsls	r3, r3, #23
    fd00:	0ddb      	lsrs	r3, r3, #23
    fd02:	469c      	mov	ip, r3
		while (!spi_is_ready_to_read(module)) {
    fd04:	2304      	movs	r3, #4
    fd06:	4698      	mov	r8, r3
	while (length--) {
    fd08:	4b22      	ldr	r3, [pc, #136]	; (fd94 <spi_read_buffer_wait+0xcc>)
    fd0a:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    fd0c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(module)) {
    fd0e:	2404      	movs	r4, #4
	while (length--) {
    fd10:	4699      	mov	r9, r3
    fd12:	3a01      	subs	r2, #1
    fd14:	b295      	uxth	r5, r2
		if (module->mode == SPI_MODE_MASTER) {
    fd16:	7943      	ldrb	r3, [r0, #5]
    fd18:	6802      	ldr	r2, [r0, #0]
    fd1a:	2b01      	cmp	r3, #1
    fd1c:	d01e      	beq.n	fd5c <spi_read_buffer_wait+0x94>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fd1e:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_read(module)) {
    fd20:	421c      	tst	r4, r3
    fd22:	d0fc      	beq.n	fd1e <spi_read_buffer_wait+0x56>
	if (!spi_is_ready_to_read(module)) {
    fd24:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fd26:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    fd28:	4219      	tst	r1, r3
    fd2a:	d021      	beq.n	fd70 <spi_read_buffer_wait+0xa8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fd2c:	8b53      	ldrh	r3, [r2, #26]
    fd2e:	421c      	tst	r4, r3
    fd30:	d126      	bne.n	fd80 <spi_read_buffer_wait+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fd32:	7983      	ldrb	r3, [r0, #6]
    fd34:	2b01      	cmp	r3, #1
    fd36:	d027      	beq.n	fd88 <spi_read_buffer_wait+0xc0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fd38:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fd3a:	b2db      	uxtb	r3, r3
    fd3c:	469a      	mov	sl, r3
		rx_data[rx_pos++] = received_data;
    fd3e:	4652      	mov	r2, sl
    fd40:	4659      	mov	r1, fp
    fd42:	558a      	strb	r2, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fd44:	7982      	ldrb	r2, [r0, #6]
		rx_data[rx_pos++] = received_data;
    fd46:	1c73      	adds	r3, r6, #1
    fd48:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fd4a:	2a01      	cmp	r2, #1
    fd4c:	d012      	beq.n	fd74 <spi_read_buffer_wait+0xac>
		rx_data[rx_pos++] = received_data;
    fd4e:	001e      	movs	r6, r3
	while (length--) {
    fd50:	3d01      	subs	r5, #1
    fd52:	b2ad      	uxth	r5, r5
    fd54:	454d      	cmp	r5, r9
    fd56:	d1de      	bne.n	fd16 <spi_read_buffer_wait+0x4e>
	return STATUS_OK;
    fd58:	2400      	movs	r4, #0
    fd5a:	e7c4      	b.n	fce6 <spi_read_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fd5c:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_write(module)) {
    fd5e:	421f      	tst	r7, r3
    fd60:	d0fc      	beq.n	fd5c <spi_read_buffer_wait+0x94>
    fd62:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    fd64:	421f      	tst	r7, r3
    fd66:	d0da      	beq.n	fd1e <spi_read_buffer_wait+0x56>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fd68:	4663      	mov	r3, ip
    fd6a:	6293      	str	r3, [r2, #40]	; 0x28
    fd6c:	6802      	ldr	r2, [r0, #0]
    fd6e:	e7d6      	b.n	fd1e <spi_read_buffer_wait+0x56>
		return STATUS_ERR_IO;
    fd70:	2410      	movs	r4, #16
    fd72:	e7b8      	b.n	fce6 <spi_read_buffer_wait+0x1e>
			rx_data[rx_pos++] = (received_data >> 8);
    fd74:	4652      	mov	r2, sl
    fd76:	3602      	adds	r6, #2
    fd78:	0a12      	lsrs	r2, r2, #8
    fd7a:	b2b6      	uxth	r6, r6
    fd7c:	54ca      	strb	r2, [r1, r3]
    fd7e:	e7e7      	b.n	fd50 <spi_read_buffer_wait+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fd80:	8354      	strh	r4, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fd82:	6a93      	ldr	r3, [r2, #40]	; 0x28
		retval = STATUS_ERR_OVERFLOW;
    fd84:	241e      	movs	r4, #30
    fd86:	e7ae      	b.n	fce6 <spi_read_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fd88:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fd8a:	05db      	lsls	r3, r3, #23
    fd8c:	0ddb      	lsrs	r3, r3, #23
    fd8e:	469a      	mov	sl, r3
    fd90:	e7d5      	b.n	fd3e <spi_read_buffer_wait+0x76>
    fd92:	46c0      	nop			; (mov r8, r8)
    fd94:	0000ffff 	.word	0x0000ffff

0000fd98 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    fd98:	b570      	push	{r4, r5, r6, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    fd9a:	7943      	ldrb	r3, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    fd9c:	2415      	movs	r4, #21
	if (module->mode != SPI_MODE_MASTER) {
    fd9e:	2b01      	cmp	r3, #1
    fda0:	d001      	beq.n	fda6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    fda2:	0020      	movs	r0, r4
    fda4:	bd70      	pop	{r4, r5, r6, pc}
	if(!(module->master_slave_select_enable))
    fda6:	7a04      	ldrb	r4, [r0, #8]
    fda8:	2c00      	cmp	r4, #0
    fdaa:	d13a      	bne.n	fe22 <spi_select_slave+0x8a>
		if (select) {
    fdac:	2a00      	cmp	r2, #0
    fdae:	d03a      	beq.n	fe26 <spi_select_slave+0x8e>
			if (slave->address_enabled) {
    fdb0:	784a      	ldrb	r2, [r1, #1]
    fdb2:	2a00      	cmp	r2, #0
    fdb4:	d046      	beq.n	fe44 <spi_select_slave+0xac>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fdb6:	6802      	ldr	r2, [r0, #0]
    fdb8:	7e12      	ldrb	r2, [r2, #24]
				if (!spi_is_ready_to_write(module)) {
    fdba:	401a      	ands	r2, r3
    fdbc:	d10d      	bne.n	fdda <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
    fdbe:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    fdc0:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    fdc2:	09c4      	lsrs	r4, r0, #7
    fdc4:	d13c      	bne.n	fe40 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fdc6:	321f      	adds	r2, #31
    fdc8:	4002      	ands	r2, r0
    fdca:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    fdcc:	01ca      	lsls	r2, r1, #7
    fdce:	4926      	ldr	r1, [pc, #152]	; (fe68 <spi_select_slave+0xd0>)
					return STATUS_BUSY;
    fdd0:	3405      	adds	r4, #5
    fdd2:	468c      	mov	ip, r1
    fdd4:	4462      	add	r2, ip
    fdd6:	6193      	str	r3, [r2, #24]
    fdd8:	e7e3      	b.n	fda2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    fdda:	780d      	ldrb	r5, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    fddc:	096a      	lsrs	r2, r5, #5
	if (port_index < PORT_INST_NUM) {
    fdde:	09ee      	lsrs	r6, r5, #7
    fde0:	d13f      	bne.n	fe62 <spi_select_slave+0xca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fde2:	241f      	movs	r4, #31
    fde4:	402c      	ands	r4, r5
    fde6:	001d      	movs	r5, r3
    fde8:	40a5      	lsls	r5, r4
    fdea:	002c      	movs	r4, r5
		port_base->OUTCLR.reg = pin_mask;
    fdec:	4d1e      	ldr	r5, [pc, #120]	; (fe68 <spi_select_slave+0xd0>)
    fdee:	01d2      	lsls	r2, r2, #7
    fdf0:	46ac      	mov	ip, r5
    fdf2:	4462      	add	r2, ip
    fdf4:	6154      	str	r4, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fdf6:	6802      	ldr	r2, [r0, #0]
				spi_write(module, slave->address);
    fdf8:	788c      	ldrb	r4, [r1, #2]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fdfa:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    fdfc:	420b      	tst	r3, r1
    fdfe:	d000      	beq.n	fe02 <spi_select_slave+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fe00:	6294      	str	r4, [r2, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    fe02:	79c3      	ldrb	r3, [r0, #7]
    fe04:	2b00      	cmp	r3, #0
    fe06:	d10c      	bne.n	fe22 <spi_select_slave+0x8a>
					while (!spi_is_ready_to_read(module)) {
    fe08:	2104      	movs	r1, #4
    fe0a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fe0c:	7e13      	ldrb	r3, [r2, #24]
    fe0e:	4219      	tst	r1, r3
    fe10:	d0fc      	beq.n	fe0c <spi_select_slave+0x74>
    fe12:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    fe14:	4219      	tst	r1, r3
    fe16:	d004      	beq.n	fe22 <spi_select_slave+0x8a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fe18:	8b53      	ldrh	r3, [r2, #26]
    fe1a:	075b      	lsls	r3, r3, #29
    fe1c:	d500      	bpl.n	fe20 <spi_select_slave+0x88>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fe1e:	8351      	strh	r1, [r2, #26]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fe20:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    fe22:	2400      	movs	r4, #0
    fe24:	e7bd      	b.n	fda2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    fe26:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    fe28:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    fe2a:	09c4      	lsrs	r4, r0, #7
    fe2c:	d108      	bne.n	fe40 <spi_select_slave+0xa8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fe2e:	221f      	movs	r2, #31
    fe30:	4002      	ands	r2, r0
    fe32:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    fe34:	01ca      	lsls	r2, r1, #7
    fe36:	490c      	ldr	r1, [pc, #48]	; (fe68 <spi_select_slave+0xd0>)
    fe38:	468c      	mov	ip, r1
    fe3a:	4462      	add	r2, ip
    fe3c:	6193      	str	r3, [r2, #24]
    fe3e:	e7b0      	b.n	fda2 <spi_select_slave+0xa>
    fe40:	6192      	str	r2, [r2, #24]
    fe42:	deff      	udf	#255	; 0xff
				port_pin_set_output_level(slave->ss_pin, false);
    fe44:	7808      	ldrb	r0, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);
    fe46:	0941      	lsrs	r1, r0, #5
	if (port_index < PORT_INST_NUM) {
    fe48:	09c4      	lsrs	r4, r0, #7
    fe4a:	d108      	bne.n	fe5e <spi_select_slave+0xc6>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fe4c:	221f      	movs	r2, #31
    fe4e:	4002      	ands	r2, r0
    fe50:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    fe52:	01ca      	lsls	r2, r1, #7
    fe54:	4904      	ldr	r1, [pc, #16]	; (fe68 <spi_select_slave+0xd0>)
    fe56:	468c      	mov	ip, r1
    fe58:	4462      	add	r2, ip
    fe5a:	6153      	str	r3, [r2, #20]
    fe5c:	e7a1      	b.n	fda2 <spi_select_slave+0xa>
    fe5e:	6152      	str	r2, [r2, #20]
    fe60:	deff      	udf	#255	; 0xff
    fe62:	6164      	str	r4, [r4, #20]
    fe64:	deff      	udf	#255	; 0xff
    fe66:	46c0      	nop			; (mov r8, r8)
    fe68:	41004400 	.word	0x41004400

0000fe6c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    fe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe6e:	46de      	mov	lr, fp
    fe70:	4657      	mov	r7, sl
    fe72:	464e      	mov	r6, r9
    fe74:	4645      	mov	r5, r8
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    fe76:	2338      	movs	r3, #56	; 0x38
{
    fe78:	b5e0      	push	{r5, r6, r7, lr}
	if (module->status == STATUS_BUSY) {
    fe7a:	5cc4      	ldrb	r4, [r0, r3]
{
    fe7c:	b083      	sub	sp, #12
    fe7e:	468b      	mov	fp, r1
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    fe80:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    fe82:	2c05      	cmp	r4, #5
    fe84:	d002      	beq.n	fe8c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    fe86:	3312      	adds	r3, #18
	if (length == 0) {
    fe88:	2a00      	cmp	r2, #0
    fe8a:	d107      	bne.n	fe9c <spi_write_buffer_wait+0x30>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    fe8c:	0018      	movs	r0, r3
    fe8e:	b003      	add	sp, #12
    fe90:	bc3c      	pop	{r2, r3, r4, r5}
    fe92:	4690      	mov	r8, r2
    fe94:	4699      	mov	r9, r3
    fe96:	46a2      	mov	sl, r4
    fe98:	46ab      	mov	fp, r5
    fe9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (!spi_is_ready_to_read(module)) {
    fe9c:	2304      	movs	r3, #4
    fe9e:	4698      	mov	r8, r3
	while (length--) {
    fea0:	4b22      	ldr	r3, [pc, #136]	; (ff2c <spi_write_buffer_wait+0xc0>)
    fea2:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    fea4:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    fea6:	2604      	movs	r6, #4
	while (length--) {
    fea8:	469c      	mov	ip, r3
    feaa:	3a01      	subs	r2, #1
    feac:	b295      	uxth	r5, r2
    feae:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    feb0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    feb2:	421c      	tst	r4, r3
    feb4:	d0fc      	beq.n	feb0 <spi_write_buffer_wait+0x44>
		uint16_t data_to_send = tx_data[tx_pos++];
    feb6:	1c7b      	adds	r3, r7, #1
    feb8:	b29b      	uxth	r3, r3
    feba:	469a      	mov	sl, r3
    febc:	465b      	mov	r3, fp
    febe:	5ddb      	ldrb	r3, [r3, r7]
    fec0:	9301      	str	r3, [sp, #4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fec2:	7981      	ldrb	r1, [r0, #6]
    fec4:	2901      	cmp	r1, #1
    fec6:	d027      	beq.n	ff18 <spi_write_buffer_wait+0xac>
		uint16_t data_to_send = tx_data[tx_pos++];
    fec8:	466b      	mov	r3, sp
    feca:	4657      	mov	r7, sl
    fecc:	889b      	ldrh	r3, [r3, #4]
    fece:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    fed0:	420c      	tst	r4, r1
    fed2:	d002      	beq.n	feda <spi_write_buffer_wait+0x6e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fed4:	05db      	lsls	r3, r3, #23
    fed6:	0ddb      	lsrs	r3, r3, #23
    fed8:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    feda:	79c3      	ldrb	r3, [r0, #7]
    fedc:	2b00      	cmp	r3, #0
    fede:	d00c      	beq.n	fefa <spi_write_buffer_wait+0x8e>
    fee0:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fee2:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    fee4:	421e      	tst	r6, r3
    fee6:	d0fc      	beq.n	fee2 <spi_write_buffer_wait+0x76>
	if (!spi_is_ready_to_read(module)) {
    fee8:	4641      	mov	r1, r8
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    feea:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    feec:	4219      	tst	r1, r3
    feee:	d004      	beq.n	fefa <spi_write_buffer_wait+0x8e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fef0:	8b53      	ldrh	r3, [r2, #26]
    fef2:	421e      	tst	r6, r3
    fef4:	d000      	beq.n	fef8 <spi_write_buffer_wait+0x8c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fef6:	8356      	strh	r6, [r2, #26]
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fef8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    fefa:	3d01      	subs	r5, #1
    fefc:	b2ad      	uxth	r5, r5
    fefe:	4565      	cmp	r5, ip
    ff00:	d1d5      	bne.n	feae <spi_write_buffer_wait+0x42>
	if (module->mode == SPI_MODE_MASTER) {
    ff02:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    ff04:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    ff06:	2a01      	cmp	r2, #1
    ff08:	d1c0      	bne.n	fe8c <spi_write_buffer_wait+0x20>
    ff0a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    ff0c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ff0e:	7e0b      	ldrb	r3, [r1, #24]
    ff10:	421a      	tst	r2, r3
    ff12:	d0fc      	beq.n	ff0e <spi_write_buffer_wait+0xa2>
	return STATUS_OK;
    ff14:	2300      	movs	r3, #0
    ff16:	e7b9      	b.n	fe8c <spi_write_buffer_wait+0x20>
			data_to_send |= (tx_data[tx_pos++] << 8);
    ff18:	465b      	mov	r3, fp
    ff1a:	4651      	mov	r1, sl
    ff1c:	5c59      	ldrb	r1, [r3, r1]
    ff1e:	9b01      	ldr	r3, [sp, #4]
    ff20:	3702      	adds	r7, #2
    ff22:	0209      	lsls	r1, r1, #8
    ff24:	b2bf      	uxth	r7, r7
    ff26:	430b      	orrs	r3, r1
    ff28:	e7d1      	b.n	fece <spi_write_buffer_wait+0x62>
    ff2a:	46c0      	nop			; (mov r8, r8)
    ff2c:	0000ffff 	.word	0x0000ffff

0000ff30 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    ff32:	4b6e      	ldr	r3, [pc, #440]	; (100ec <_spi_interrupt_handler+0x1bc>)
    ff34:	0080      	lsls	r0, r0, #2
    ff36:	58c4      	ldr	r4, [r0, r3]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    ff38:	2236      	movs	r2, #54	; 0x36
			module->enabled_callback & module->registered_callback;
    ff3a:	2337      	movs	r3, #55	; 0x37
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ff3c:	6826      	ldr	r6, [r4, #0]
	uint8_t callback_mask =
    ff3e:	5ce3      	ldrb	r3, [r4, r3]
    ff40:	5ca7      	ldrb	r7, [r4, r2]
    ff42:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    ff44:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    ff46:	7db5      	ldrb	r5, [r6, #22]
    ff48:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    ff4a:	07eb      	lsls	r3, r5, #31
    ff4c:	d502      	bpl.n	ff54 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    ff4e:	7963      	ldrb	r3, [r4, #5]
    ff50:	2b01      	cmp	r3, #1
    ff52:	d067      	beq.n	10024 <_spi_interrupt_handler+0xf4>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    ff54:	2304      	movs	r3, #4
    ff56:	422b      	tst	r3, r5
    ff58:	d014      	beq.n	ff84 <_spi_interrupt_handler+0x54>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ff5a:	8b72      	ldrh	r2, [r6, #26]
    ff5c:	4213      	tst	r3, r2
    ff5e:	d01b      	beq.n	ff98 <_spi_interrupt_handler+0x68>
			if (module->dir != SPI_DIRECTION_WRITE) {
    ff60:	7a63      	ldrb	r3, [r4, #9]
    ff62:	2b01      	cmp	r3, #1
    ff64:	d00b      	beq.n	ff7e <_spi_interrupt_handler+0x4e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    ff66:	2338      	movs	r3, #56	; 0x38
    ff68:	221e      	movs	r2, #30
    ff6a:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    ff6c:	3b35      	subs	r3, #53	; 0x35
    ff6e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    ff70:	3302      	adds	r3, #2
    ff72:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    ff74:	073b      	lsls	r3, r7, #28
    ff76:	d502      	bpl.n	ff7e <_spi_interrupt_handler+0x4e>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    ff78:	0020      	movs	r0, r4
    ff7a:	69a3      	ldr	r3, [r4, #24]
    ff7c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    ff7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ff80:	2304      	movs	r3, #4
    ff82:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    ff84:	2302      	movs	r3, #2
    ff86:	422b      	tst	r3, r5
    ff88:	d002      	beq.n	ff90 <_spi_interrupt_handler+0x60>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    ff8a:	7962      	ldrb	r2, [r4, #5]
    ff8c:	2a01      	cmp	r2, #1
    ff8e:	d037      	beq.n	10000 <_spi_interrupt_handler+0xd0>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    ff90:	b26d      	sxtb	r5, r5
    ff92:	2d00      	cmp	r5, #0
    ff94:	db2b      	blt.n	ffee <_spi_interrupt_handler+0xbe>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    ff96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (module->dir == SPI_DIRECTION_WRITE) {
    ff98:	7a63      	ldrb	r3, [r4, #9]
    ff9a:	b2db      	uxtb	r3, r3
    ff9c:	2b01      	cmp	r3, #1
    ff9e:	d078      	beq.n	10092 <_spi_interrupt_handler+0x162>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ffa0:	6823      	ldr	r3, [r4, #0]
	*(module->rx_buffer_ptr) = received_data;
    ffa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    ffa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ffa6:	05db      	lsls	r3, r3, #23
    ffa8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    ffaa:	b2da      	uxtb	r2, r3
    ffac:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    ffae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ffb0:	1c51      	adds	r1, r2, #1
    ffb2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ffb4:	79a1      	ldrb	r1, [r4, #6]
    ffb6:	2901      	cmp	r1, #1
    ffb8:	d100      	bne.n	ffbc <_spi_interrupt_handler+0x8c>
    ffba:	e082      	b.n	100c2 <_spi_interrupt_handler+0x192>
	module->remaining_rx_buffer_length--;
    ffbc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ffbe:	3b01      	subs	r3, #1
    ffc0:	b29b      	uxth	r3, r3
    ffc2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    ffc4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ffc6:	b29b      	uxth	r3, r3
    ffc8:	2b00      	cmp	r3, #0
    ffca:	d1db      	bne.n	ff84 <_spi_interrupt_handler+0x54>
					module->status = STATUS_OK;
    ffcc:	2238      	movs	r2, #56	; 0x38
    ffce:	54a3      	strb	r3, [r4, r2]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    ffd0:	3304      	adds	r3, #4
    ffd2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    ffd4:	7a62      	ldrb	r2, [r4, #9]
    ffd6:	2a02      	cmp	r2, #2
    ffd8:	d100      	bne.n	ffdc <_spi_interrupt_handler+0xac>
    ffda:	e07a      	b.n	100d2 <_spi_interrupt_handler+0x1a2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    ffdc:	7a63      	ldrb	r3, [r4, #9]
    ffde:	2b00      	cmp	r3, #0
    ffe0:	d1d0      	bne.n	ff84 <_spi_interrupt_handler+0x54>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    ffe2:	07bb      	lsls	r3, r7, #30
    ffe4:	d5ce      	bpl.n	ff84 <_spi_interrupt_handler+0x54>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    ffe6:	0020      	movs	r0, r4
    ffe8:	6923      	ldr	r3, [r4, #16]
    ffea:	4798      	blx	r3
    ffec:	e7ca      	b.n	ff84 <_spi_interrupt_handler+0x54>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    ffee:	2380      	movs	r3, #128	; 0x80
    fff0:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    fff2:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    fff4:	067b      	lsls	r3, r7, #25
    fff6:	d5ce      	bpl.n	ff96 <_spi_interrupt_handler+0x66>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    fff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fffa:	0020      	movs	r0, r4
    fffc:	4798      	blx	r3
}
    fffe:	e7ca      	b.n	ff96 <_spi_interrupt_handler+0x66>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10000:	7a62      	ldrb	r2, [r4, #9]
   10002:	b2d2      	uxtb	r2, r2
		if ((module->mode == SPI_MODE_MASTER) &&
   10004:	2a01      	cmp	r2, #1
   10006:	d1c3      	bne.n	ff90 <_spi_interrupt_handler+0x60>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   10008:	79e1      	ldrb	r1, [r4, #7]
   1000a:	2900      	cmp	r1, #0
   1000c:	d1c0      	bne.n	ff90 <_spi_interrupt_handler+0x60>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1000e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   10010:	3301      	adds	r3, #1
   10012:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   10014:	3335      	adds	r3, #53	; 0x35
   10016:	54e1      	strb	r1, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   10018:	423a      	tst	r2, r7
   1001a:	d0b9      	beq.n	ff90 <_spi_interrupt_handler+0x60>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1001c:	0020      	movs	r0, r4
   1001e:	68e3      	ldr	r3, [r4, #12]
   10020:	4798      	blx	r3
   10022:	e7b5      	b.n	ff90 <_spi_interrupt_handler+0x60>
			(module->dir == SPI_DIRECTION_READ)) {
   10024:	7a62      	ldrb	r2, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   10026:	2a00      	cmp	r2, #0
   10028:	d10d      	bne.n	10046 <_spi_interrupt_handler+0x116>
	spi_hw->DATA.reg = dummy_write;
   1002a:	4a31      	ldr	r2, [pc, #196]	; (100f0 <_spi_interrupt_handler+0x1c0>)
   1002c:	8812      	ldrh	r2, [r2, #0]
   1002e:	62b2      	str	r2, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10030:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   10032:	3a01      	subs	r2, #1
   10034:	b292      	uxth	r2, r2
   10036:	8662      	strh	r2, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   10038:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1003a:	2a00      	cmp	r2, #0
   1003c:	d047      	beq.n	100ce <_spi_interrupt_handler+0x19e>
		if (0
   1003e:	7963      	ldrb	r3, [r4, #5]
   10040:	2b01      	cmp	r3, #1
   10042:	d000      	beq.n	10046 <_spi_interrupt_handler+0x116>
   10044:	e786      	b.n	ff54 <_spi_interrupt_handler+0x24>
			(module->dir != SPI_DIRECTION_READ))
   10046:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   10048:	2b00      	cmp	r3, #0
   1004a:	d100      	bne.n	1004e <_spi_interrupt_handler+0x11e>
   1004c:	e782      	b.n	ff54 <_spi_interrupt_handler+0x24>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1004e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10050:	6821      	ldr	r1, [r4, #0]
	(module->tx_buffer_ptr)++;
   10052:	1c50      	adds	r0, r2, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   10054:	7813      	ldrb	r3, [r2, #0]
	(module->tx_buffer_ptr)++;
   10056:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10058:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1005a:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1005c:	2801      	cmp	r0, #1
   1005e:	d03f      	beq.n	100e0 <_spi_interrupt_handler+0x1b0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   10060:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   10062:	05db      	lsls	r3, r3, #23
   10064:	0ddb      	lsrs	r3, r3, #23
   10066:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   10068:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1006a:	3b01      	subs	r3, #1
   1006c:	b29b      	uxth	r3, r3
   1006e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   10070:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10072:	2b00      	cmp	r3, #0
   10074:	d000      	beq.n	10078 <_spi_interrupt_handler+0x148>
   10076:	e76d      	b.n	ff54 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   10078:	3301      	adds	r3, #1
   1007a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   1007c:	7a63      	ldrb	r3, [r4, #9]
   1007e:	2b01      	cmp	r3, #1
   10080:	d000      	beq.n	10084 <_spi_interrupt_handler+0x154>
   10082:	e767      	b.n	ff54 <_spi_interrupt_handler+0x24>
   10084:	79e3      	ldrb	r3, [r4, #7]
   10086:	2b00      	cmp	r3, #0
   10088:	d000      	beq.n	1008c <_spi_interrupt_handler+0x15c>
   1008a:	e763      	b.n	ff54 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1008c:	3302      	adds	r3, #2
   1008e:	75b3      	strb	r3, [r6, #22]
   10090:	e760      	b.n	ff54 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   10092:	6822      	ldr	r2, [r4, #0]
	flush = spi_hw->DATA.reg;
   10094:	6a92      	ldr	r2, [r2, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   10096:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   10098:	3a01      	subs	r2, #1
   1009a:	b292      	uxth	r2, r2
   1009c:	8662      	strh	r2, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   1009e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   100a0:	b292      	uxth	r2, r2
   100a2:	2a00      	cmp	r2, #0
   100a4:	d000      	beq.n	100a8 <_spi_interrupt_handler+0x178>
   100a6:	e76d      	b.n	ff84 <_spi_interrupt_handler+0x54>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   100a8:	2104      	movs	r1, #4
   100aa:	7531      	strb	r1, [r6, #20]
					module->status = STATUS_OK;
   100ac:	2138      	movs	r1, #56	; 0x38
   100ae:	5462      	strb	r2, [r4, r1]
					module->dir = SPI_DIRECTION_IDLE;
   100b0:	3203      	adds	r2, #3
   100b2:	7262      	strb	r2, [r4, #9]
					if (callback_mask &
   100b4:	423b      	tst	r3, r7
   100b6:	d100      	bne.n	100ba <_spi_interrupt_handler+0x18a>
   100b8:	e764      	b.n	ff84 <_spi_interrupt_handler+0x54>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   100ba:	0020      	movs	r0, r4
   100bc:	68e3      	ldr	r3, [r4, #12]
   100be:	4798      	blx	r3
   100c0:	e760      	b.n	ff84 <_spi_interrupt_handler+0x54>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   100c2:	0a1b      	lsrs	r3, r3, #8
   100c4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   100c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   100c8:	3301      	adds	r3, #1
   100ca:	62a3      	str	r3, [r4, #40]	; 0x28
   100cc:	e776      	b.n	ffbc <_spi_interrupt_handler+0x8c>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   100ce:	7533      	strb	r3, [r6, #20]
   100d0:	e7b5      	b.n	1003e <_spi_interrupt_handler+0x10e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   100d2:	423b      	tst	r3, r7
   100d4:	d100      	bne.n	100d8 <_spi_interrupt_handler+0x1a8>
   100d6:	e755      	b.n	ff84 <_spi_interrupt_handler+0x54>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   100d8:	0020      	movs	r0, r4
   100da:	6963      	ldr	r3, [r4, #20]
   100dc:	4798      	blx	r3
   100de:	e751      	b.n	ff84 <_spi_interrupt_handler+0x54>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   100e0:	7850      	ldrb	r0, [r2, #1]
		(module->tx_buffer_ptr)++;
   100e2:	3202      	adds	r2, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   100e4:	0200      	lsls	r0, r0, #8
   100e6:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   100e8:	62e2      	str	r2, [r4, #44]	; 0x2c
   100ea:	e7ba      	b.n	10062 <_spi_interrupt_handler+0x132>
   100ec:	20000ef8 	.word	0x20000ef8
   100f0:	20000f10 	.word	0x20000f10

000100f4 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   100f4:	2102      	movs	r1, #2
   100f6:	480d      	ldr	r0, [pc, #52]	; (1012c <system_clock_source_enable.part.0+0x38>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   100f8:	4a0d      	ldr	r2, [pc, #52]	; (10130 <system_clock_source_enable.part.0+0x3c>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   100fa:	6803      	ldr	r3, [r0, #0]
   100fc:	430b      	orrs	r3, r1
   100fe:	6003      	str	r3, [r0, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   10100:	8491      	strh	r1, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10102:	310e      	adds	r1, #14
   10104:	68d3      	ldr	r3, [r2, #12]
   10106:	4219      	tst	r1, r3
   10108:	d0fc      	beq.n	10104 <system_clock_source_enable.part.0+0x10>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1010a:	6883      	ldr	r3, [r0, #8]
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1010c:	2110      	movs	r1, #16
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1010e:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   10110:	6843      	ldr	r3, [r0, #4]
   10112:	6293      	str	r3, [r2, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   10114:	2300      	movs	r3, #0
   10116:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10118:	4a05      	ldr	r2, [pc, #20]	; (10130 <system_clock_source_enable.part.0+0x3c>)
   1011a:	68d3      	ldr	r3, [r2, #12]
   1011c:	4219      	tst	r1, r3
   1011e:	d0fc      	beq.n	1011a <system_clock_source_enable.part.0+0x26>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   10120:	6803      	ldr	r3, [r0, #0]
   10122:	b29b      	uxth	r3, r3
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
   10124:	2000      	movs	r0, #0
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   10126:	8493      	strh	r3, [r2, #36]	; 0x24
}
   10128:	4770      	bx	lr
   1012a:	46c0      	nop			; (mov r8, r8)
   1012c:	20000aec 	.word	0x20000aec
   10130:	40000800 	.word	0x40000800

00010134 <system_clock_source_get_hz>:
{
   10134:	b510      	push	{r4, lr}
	switch (clock_source) {
   10136:	2808      	cmp	r0, #8
   10138:	d82b      	bhi.n	10192 <system_clock_source_get_hz+0x5e>
   1013a:	4b1b      	ldr	r3, [pc, #108]	; (101a8 <system_clock_source_get_hz+0x74>)
   1013c:	0080      	lsls	r0, r0, #2
   1013e:	581b      	ldr	r3, [r3, r0]
   10140:	469f      	mov	pc, r3
		return 32768UL;
   10142:	2080      	movs	r0, #128	; 0x80
   10144:	0200      	lsls	r0, r0, #8
}
   10146:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc32k.frequency;
   10148:	4b18      	ldr	r3, [pc, #96]	; (101ac <system_clock_source_get_hz+0x78>)
   1014a:	6958      	ldr	r0, [r3, #20]
   1014c:	e7fb      	b.n	10146 <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1014e:	4b18      	ldr	r3, [pc, #96]	; (101b0 <system_clock_source_get_hz+0x7c>)
   10150:	4818      	ldr	r0, [pc, #96]	; (101b4 <system_clock_source_get_hz+0x80>)
   10152:	6a1b      	ldr	r3, [r3, #32]
   10154:	059b      	lsls	r3, r3, #22
   10156:	0f9b      	lsrs	r3, r3, #30
   10158:	40d8      	lsrs	r0, r3
   1015a:	e7f4      	b.n	10146 <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1015c:	4c13      	ldr	r4, [pc, #76]	; (101ac <system_clock_source_get_hz+0x78>)
			return 0;
   1015e:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   10160:	6823      	ldr	r3, [r4, #0]
   10162:	079b      	lsls	r3, r3, #30
   10164:	d5ef      	bpl.n	10146 <system_clock_source_get_hz+0x12>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   10166:	2210      	movs	r2, #16
   10168:	4911      	ldr	r1, [pc, #68]	; (101b0 <system_clock_source_get_hz+0x7c>)
   1016a:	68cb      	ldr	r3, [r1, #12]
   1016c:	421a      	tst	r2, r3
   1016e:	d0fc      	beq.n	1016a <system_clock_source_get_hz+0x36>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   10170:	6823      	ldr	r3, [r4, #0]
   10172:	075b      	lsls	r3, r3, #29
   10174:	d40f      	bmi.n	10196 <system_clock_source_get_hz+0x62>
		return 48000000UL;
   10176:	4810      	ldr	r0, [pc, #64]	; (101b8 <system_clock_source_get_hz+0x84>)
   10178:	e7e5      	b.n	10146 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc.frequency;
   1017a:	4b0c      	ldr	r3, [pc, #48]	; (101ac <system_clock_source_get_hz+0x78>)
   1017c:	6918      	ldr	r0, [r3, #16]
   1017e:	e7e2      	b.n	10146 <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10180:	2350      	movs	r3, #80	; 0x50
   10182:	4a0b      	ldr	r2, [pc, #44]	; (101b0 <system_clock_source_get_hz+0x7c>)
			return 0;
   10184:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   10186:	5cd3      	ldrb	r3, [r2, r3]
   10188:	075b      	lsls	r3, r3, #29
   1018a:	d5dc      	bpl.n	10146 <system_clock_source_get_hz+0x12>
		return _system_clock_inst.dpll.frequency;
   1018c:	4b07      	ldr	r3, [pc, #28]	; (101ac <system_clock_source_get_hz+0x78>)
   1018e:	68d8      	ldr	r0, [r3, #12]
   10190:	e7d9      	b.n	10146 <system_clock_source_get_hz+0x12>
		return 0;
   10192:	2000      	movs	r0, #0
   10194:	e7d7      	b.n	10146 <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   10196:	4b09      	ldr	r3, [pc, #36]	; (101bc <system_clock_source_get_hz+0x88>)
   10198:	2000      	movs	r0, #0
   1019a:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1019c:	68a3      	ldr	r3, [r4, #8]
   1019e:	041b      	lsls	r3, r3, #16
   101a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   101a2:	4358      	muls	r0, r3
   101a4:	e7cf      	b.n	10146 <system_clock_source_get_hz+0x12>
   101a6:	46c0      	nop			; (mov r8, r8)
   101a8:	00016ab0 	.word	0x00016ab0
   101ac:	20000aec 	.word	0x20000aec
   101b0:	40000800 	.word	0x40000800
   101b4:	007a1200 	.word	0x007a1200
   101b8:	02dc6c00 	.word	0x02dc6c00
   101bc:	000106e1 	.word	0x000106e1

000101c0 <system_clock_source_xosc32k_set_config>:
{
   101c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   101c2:	46de      	mov	lr, fp
   101c4:	4657      	mov	r7, sl
   101c6:	464e      	mov	r6, r9
   101c8:	4645      	mov	r5, r8
   101ca:	b5e0      	push	{r5, r6, r7, lr}
   101cc:	0001      	movs	r1, r0
	temp.bit.STARTUP = config->startup_time;
   101ce:	7845      	ldrb	r5, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   101d0:	7800      	ldrb	r0, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   101d2:	7b4e      	ldrb	r6, [r1, #13]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   101d4:	4242      	negs	r2, r0
   101d6:	4142      	adcs	r2, r0
   101d8:	4691      	mov	r9, r2
	temp.bit.EN1K = config->enable_1khz_output;
   101da:	78ca      	ldrb	r2, [r1, #3]
	temp.bit.AAMPEN = config->auto_gain_control;
   101dc:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   101de:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   101e0:	790a      	ldrb	r2, [r1, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
   101e2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   101e4:	7b8c      	ldrb	r4, [r1, #14]
	temp.bit.EN32K = config->enable_32khz_output;
   101e6:	4690      	mov	r8, r2
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   101e8:	4b1f      	ldr	r3, [pc, #124]	; (10268 <system_clock_source_xosc32k_set_config+0xa8>)
	_system_clock_inst.xosc32k.frequency = config->frequency;
   101ea:	688a      	ldr	r2, [r1, #8]
   101ec:	491f      	ldr	r1, [pc, #124]	; (1026c <system_clock_source_xosc32k_set_config+0xac>)
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   101ee:	469b      	mov	fp, r3
   101f0:	8a9b      	ldrh	r3, [r3, #20]
	_system_clock_inst.xosc32k.frequency = config->frequency;
   101f2:	614a      	str	r2, [r1, #20]
	SYSCTRL->XOSC32K = temp;
   101f4:	464a      	mov	r2, r9
   101f6:	0092      	lsls	r2, r2, #2
   101f8:	4691      	mov	r9, r2
   101fa:	2204      	movs	r2, #4
   101fc:	4393      	bics	r3, r2
   101fe:	464a      	mov	r2, r9
   10200:	2101      	movs	r1, #1
   10202:	4313      	orrs	r3, r2
   10204:	4642      	mov	r2, r8
   10206:	400a      	ands	r2, r1
   10208:	00d2      	lsls	r2, r2, #3
   1020a:	4690      	mov	r8, r2
   1020c:	2208      	movs	r2, #8
   1020e:	4393      	bics	r3, r2
   10210:	4642      	mov	r2, r8
   10212:	4313      	orrs	r3, r2
   10214:	4662      	mov	r2, ip
   10216:	400a      	ands	r2, r1
   10218:	0112      	lsls	r2, r2, #4
   1021a:	4694      	mov	ip, r2
   1021c:	2210      	movs	r2, #16
   1021e:	4393      	bics	r3, r2
   10220:	4662      	mov	r2, ip
   10222:	4313      	orrs	r3, r2
   10224:	2220      	movs	r2, #32
   10226:	4008      	ands	r0, r1
   10228:	0140      	lsls	r0, r0, #5
   1022a:	4393      	bics	r3, r2
   1022c:	4303      	orrs	r3, r0
   1022e:	2040      	movs	r0, #64	; 0x40
   10230:	465a      	mov	r2, fp
   10232:	400f      	ands	r7, r1
   10234:	01bf      	lsls	r7, r7, #6
   10236:	4383      	bics	r3, r0
   10238:	433b      	orrs	r3, r7
   1023a:	3040      	adds	r0, #64	; 0x40
   1023c:	400e      	ands	r6, r1
   1023e:	4383      	bics	r3, r0
   10240:	3879      	subs	r0, #121	; 0x79
   10242:	01f6      	lsls	r6, r6, #7
   10244:	4005      	ands	r5, r0
   10246:	480a      	ldr	r0, [pc, #40]	; (10270 <system_clock_source_xosc32k_set_config+0xb0>)
   10248:	4333      	orrs	r3, r6
   1024a:	022d      	lsls	r5, r5, #8
   1024c:	4003      	ands	r3, r0
   1024e:	4809      	ldr	r0, [pc, #36]	; (10274 <system_clock_source_xosc32k_set_config+0xb4>)
   10250:	432b      	orrs	r3, r5
   10252:	4021      	ands	r1, r4
   10254:	0309      	lsls	r1, r1, #12
   10256:	4003      	ands	r3, r0
   10258:	430b      	orrs	r3, r1
   1025a:	8293      	strh	r3, [r2, #20]
}
   1025c:	bc3c      	pop	{r2, r3, r4, r5}
   1025e:	4690      	mov	r8, r2
   10260:	4699      	mov	r9, r3
   10262:	46a2      	mov	sl, r4
   10264:	46ab      	mov	fp, r5
   10266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10268:	40000800 	.word	0x40000800
   1026c:	20000aec 	.word	0x20000aec
   10270:	fffff8ff 	.word	0xfffff8ff
   10274:	ffffefff 	.word	0xffffefff

00010278 <system_clock_source_dfll_set_config>:
{
   10278:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1027a:	7a03      	ldrb	r3, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   1027c:	8942      	ldrh	r2, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1027e:	069b      	lsls	r3, r3, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   10280:	0592      	lsls	r2, r2, #22
   10282:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10284:	0c1b      	lsrs	r3, r3, #16
   10286:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   10288:	4a17      	ldr	r2, [pc, #92]	; (102e8 <system_clock_source_dfll_set_config+0x70>)
   1028a:	6053      	str	r3, [r2, #4]
			(uint32_t)config->wakeup_lock     |
   1028c:	79c1      	ldrb	r1, [r0, #7]
   1028e:	7983      	ldrb	r3, [r0, #6]
			(uint32_t)config->quick_lock      |
   10290:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
   10292:	430b      	orrs	r3, r1
			(uint32_t)config->quick_lock      |
   10294:	8841      	ldrh	r1, [r0, #2]
   10296:	4321      	orrs	r1, r4
   10298:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   1029a:	7841      	ldrb	r1, [r0, #1]
   1029c:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
   1029e:	430b      	orrs	r3, r1
	_system_clock_inst.dfll.control =
   102a0:	6013      	str	r3, [r2, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   102a2:	7803      	ldrb	r3, [r0, #0]
   102a4:	2b04      	cmp	r3, #4
   102a6:	d010      	beq.n	102ca <system_clock_source_dfll_set_config+0x52>
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   102a8:	2b20      	cmp	r3, #32
   102aa:	d10d      	bne.n	102c8 <system_clock_source_dfll_set_config+0x50>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   102ac:	7b03      	ldrb	r3, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   102ae:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   102b0:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   102b2:	430b      	orrs	r3, r1
   102b4:	89c1      	ldrh	r1, [r0, #14]
   102b6:	480d      	ldr	r0, [pc, #52]	; (102ec <system_clock_source_dfll_set_config+0x74>)
   102b8:	0409      	lsls	r1, r1, #16
   102ba:	4001      	ands	r1, r0
   102bc:	430b      	orrs	r3, r1
		_system_clock_inst.dfll.mul =
   102be:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
   102c0:	6811      	ldr	r1, [r2, #0]
   102c2:	4b0b      	ldr	r3, [pc, #44]	; (102f0 <system_clock_source_dfll_set_config+0x78>)
   102c4:	430b      	orrs	r3, r1
   102c6:	6013      	str	r3, [r2, #0]
}
   102c8:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   102ca:	7b01      	ldrb	r1, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   102cc:	8a04      	ldrh	r4, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   102ce:	0689      	lsls	r1, r1, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   102d0:	89c0      	ldrh	r0, [r0, #14]
   102d2:	4321      	orrs	r1, r4
   102d4:	4c05      	ldr	r4, [pc, #20]	; (102ec <system_clock_source_dfll_set_config+0x74>)
   102d6:	0400      	lsls	r0, r0, #16
   102d8:	4020      	ands	r0, r4
   102da:	4301      	orrs	r1, r0
		_system_clock_inst.dfll.mul =
   102dc:	6091      	str	r1, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   102de:	6811      	ldr	r1, [r2, #0]
   102e0:	430b      	orrs	r3, r1
   102e2:	6013      	str	r3, [r2, #0]
   102e4:	e7f0      	b.n	102c8 <system_clock_source_dfll_set_config+0x50>
   102e6:	46c0      	nop			; (mov r8, r8)
   102e8:	20000aec 	.word	0x20000aec
   102ec:	03ff0000 	.word	0x03ff0000
   102f0:	00000424 	.word	0x00000424

000102f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   102f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   102f6:	4646      	mov	r6, r8
   102f8:	46d6      	mov	lr, sl
   102fa:	464f      	mov	r7, r9
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   102fc:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   102fe:	211e      	movs	r1, #30
{
   10300:	b5c0      	push	{r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   10302:	4b58      	ldr	r3, [pc, #352]	; (10464 <system_clock_init+0x170>)
   10304:	00d2      	lsls	r2, r2, #3
   10306:	609a      	str	r2, [r3, #8]
   10308:	4a57      	ldr	r2, [pc, #348]	; (10468 <system_clock_init+0x174>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1030a:	2400      	movs	r4, #0
   1030c:	6853      	ldr	r3, [r2, #4]
{
   1030e:	b08c      	sub	sp, #48	; 0x30
   10310:	438b      	bics	r3, r1
   10312:	391c      	subs	r1, #28
   10314:	430b      	orrs	r3, r1
   10316:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   10318:	2303      	movs	r3, #3
   1031a:	ad07      	add	r5, sp, #28
   1031c:	4e53      	ldr	r6, [pc, #332]	; (1046c <system_clock_init+0x178>)
   1031e:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   10320:	b2e0      	uxtb	r0, r4
   10322:	0029      	movs	r1, r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   10324:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   10326:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   10328:	2c25      	cmp	r4, #37	; 0x25
   1032a:	d1f9      	bne.n	10320 <system_clock_init+0x2c>
	config->frequency           = 32768UL;
   1032c:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   1032e:	a803      	add	r0, sp, #12
   10330:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
   10332:	0212      	lsls	r2, r2, #8
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   10334:	2102      	movs	r1, #2
   10336:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
   10338:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   1033a:	7003      	strb	r3, [r0, #0]
	config->enable_1khz_output  = false;
   1033c:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
   1033e:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   10340:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   10342:	4b4b      	ldr	r3, [pc, #300]	; (10470 <system_clock_init+0x17c>)
	config->enable_32khz_output = true;
   10344:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   10346:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   10348:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   1034a:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1034c:	4798      	blx	r3
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1034e:	2102      	movs	r1, #2
   10350:	4a44      	ldr	r2, [pc, #272]	; (10464 <system_clock_init+0x170>)
   10352:	8a93      	ldrh	r3, [r2, #20]
   10354:	430b      	orrs	r3, r1
   10356:	8293      	strh	r3, [r2, #20]
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   10358:	68d3      	ldr	r3, [r2, #12]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   1035a:	4219      	tst	r1, r3
   1035c:	d0fc      	beq.n	10358 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   1035e:	2180      	movs	r1, #128	; 0x80
   10360:	8a93      	ldrh	r3, [r2, #20]
   10362:	430b      	orrs	r3, r1
   10364:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   10366:	2200      	movs	r2, #0
   10368:	2300      	movs	r3, #0
   1036a:	806a      	strh	r2, [r5, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   1036c:	80aa      	strh	r2, [r5, #4]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1036e:	323f      	adds	r2, #63	; 0x3f
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   10370:	71ab      	strb	r3, [r5, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   10372:	71eb      	strb	r3, [r5, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   10374:	816a      	strh	r2, [r5, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
   10376:	706b      	strb	r3, [r5, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   10378:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   1037a:	4b3e      	ldr	r3, [pc, #248]	; (10474 <system_clock_init+0x180>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1037c:	702a      	strb	r2, [r5, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   1037e:	681b      	ldr	r3, [r3, #0]
   10380:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   10382:	2b3f      	cmp	r3, #63	; 0x3f
   10384:	d06b      	beq.n	1045e <system_clock_init+0x16a>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   10386:	722b      	strb	r3, [r5, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   10388:	4b3b      	ldr	r3, [pc, #236]	; (10478 <system_clock_init+0x184>)
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   1038a:	0028      	movs	r0, r5
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   1038c:	822b      	strh	r3, [r5, #16]
	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1038e:	2307      	movs	r3, #7
   10390:	732b      	strb	r3, [r5, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   10392:	3338      	adds	r3, #56	; 0x38
   10394:	81eb      	strh	r3, [r5, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
   10396:	4b39      	ldr	r3, [pc, #228]	; (1047c <system_clock_init+0x188>)
   10398:	4798      	blx	r3
	SYSCTRL->OSC8M = temp;
   1039a:	2240      	movs	r2, #64	; 0x40
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1039c:	4c31      	ldr	r4, [pc, #196]	; (10464 <system_clock_init+0x170>)
   1039e:	6a23      	ldr	r3, [r4, #32]
	SYSCTRL->OSC8M = temp;
   103a0:	4393      	bics	r3, r2
   103a2:	3240      	adds	r2, #64	; 0x40
   103a4:	4313      	orrs	r3, r2
   103a6:	4a36      	ldr	r2, [pc, #216]	; (10480 <system_clock_init+0x18c>)
   103a8:	4013      	ands	r3, r2
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   103aa:	2202      	movs	r2, #2
	SYSCTRL->OSC8M = temp;
   103ac:	6223      	str	r3, [r4, #32]
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   103ae:	6a23      	ldr	r3, [r4, #32]
   103b0:	4313      	orrs	r3, r2
   103b2:	6223      	str	r3, [r4, #32]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   103b4:	4b33      	ldr	r3, [pc, #204]	; (10484 <system_clock_init+0x190>)
   103b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   103b8:	2301      	movs	r3, #1
   103ba:	4699      	mov	r9, r3
   103bc:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
   103be:	2300      	movs	r3, #0
   103c0:	4698      	mov	r8, r3
   103c2:	466b      	mov	r3, sp
   103c4:	4642      	mov	r2, r8
   103c6:	705a      	strb	r2, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
   103c8:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   103ca:	725a      	strb	r2, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   103cc:	2305      	movs	r3, #5
   103ce:	469a      	mov	sl, r3
   103d0:	466b      	mov	r3, sp
   103d2:	4652      	mov	r2, sl
   103d4:	4669      	mov	r1, sp
   103d6:	2001      	movs	r0, #1
   103d8:	4f2b      	ldr	r7, [pc, #172]	; (10488 <system_clock_init+0x194>)
   103da:	701a      	strb	r2, [r3, #0]
   103dc:	47b8      	blx	r7
   103de:	2001      	movs	r0, #1
   103e0:	4d2a      	ldr	r5, [pc, #168]	; (1048c <system_clock_init+0x198>)
   103e2:	47a8      	blx	r5
	config->high_when_disabled = false;
   103e4:	466b      	mov	r3, sp
   103e6:	4642      	mov	r2, r8
   103e8:	705a      	strb	r2, [r3, #1]
	config->output_enable      = false;
   103ea:	725a      	strb	r2, [r3, #9]
   103ec:	4652      	mov	r2, sl
   103ee:	701a      	strb	r2, [r3, #0]
   103f0:	2320      	movs	r3, #32
   103f2:	464a      	mov	r2, r9
   103f4:	9301      	str	r3, [sp, #4]
   103f6:	466b      	mov	r3, sp
   103f8:	4669      	mov	r1, sp
   103fa:	2002      	movs	r0, #2
   103fc:	721a      	strb	r2, [r3, #8]
   103fe:	47b8      	blx	r7
   10400:	2002      	movs	r0, #2
   10402:	47a8      	blx	r5
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   10404:	464a      	mov	r2, r9
   10406:	466b      	mov	r3, sp
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   10408:	4669      	mov	r1, sp
   1040a:	2000      	movs	r0, #0
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   1040c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   1040e:	47b0      	blx	r6
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   10410:	2000      	movs	r0, #0
   10412:	4b1f      	ldr	r3, [pc, #124]	; (10490 <system_clock_init+0x19c>)
   10414:	4798      	blx	r3
   10416:	4b1f      	ldr	r3, [pc, #124]	; (10494 <system_clock_init+0x1a0>)
   10418:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1041a:	21d0      	movs	r1, #208	; 0xd0
   1041c:	68e3      	ldr	r3, [r4, #12]
   1041e:	400b      	ands	r3, r1


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   10420:	2bd0      	cmp	r3, #208	; 0xd0
   10422:	d1fb      	bne.n	1041c <system_clock_init+0x128>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
   10424:	2180      	movs	r1, #128	; 0x80
   10426:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
   10428:	4a1b      	ldr	r2, [pc, #108]	; (10498 <system_clock_init+0x1a4>)
   1042a:	430b      	orrs	r3, r1
   1042c:	84a3      	strh	r3, [r4, #36]	; 0x24
   1042e:	2300      	movs	r3, #0
   10430:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   10432:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   10434:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   10436:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   10438:	2201      	movs	r2, #1
   1043a:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
   1043c:	466a      	mov	r2, sp
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1043e:	4669      	mov	r1, sp
   10440:	7053      	strb	r3, [r2, #1]
	config->run_in_standby     = false;
   10442:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
   10444:	7253      	strb	r3, [r2, #9]
   10446:	2000      	movs	r0, #0
   10448:	3307      	adds	r3, #7
   1044a:	7013      	strb	r3, [r2, #0]
   1044c:	47b8      	blx	r7
   1044e:	2000      	movs	r0, #0
   10450:	47a8      	blx	r5
#endif
}
   10452:	b00c      	add	sp, #48	; 0x30
   10454:	bc1c      	pop	{r2, r3, r4}
   10456:	4690      	mov	r8, r2
   10458:	4699      	mov	r9, r3
   1045a:	46a2      	mov	sl, r4
   1045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (coarse == 0x3f) {
   1045e:	3b20      	subs	r3, #32
   10460:	e791      	b.n	10386 <system_clock_init+0x92>
   10462:	46c0      	nop			; (mov r8, r8)
   10464:	40000800 	.word	0x40000800
   10468:	41004000 	.word	0x41004000
   1046c:	000106c5 	.word	0x000106c5
   10470:	000101c1 	.word	0x000101c1
   10474:	00806024 	.word	0x00806024
   10478:	000005dc 	.word	0x000005dc
   1047c:	00010279 	.word	0x00010279
   10480:	fffffcff 	.word	0xfffffcff
   10484:	0001049d 	.word	0x0001049d
   10488:	000104c1 	.word	0x000104c1
   1048c:	00010575 	.word	0x00010575
   10490:	0001063d 	.word	0x0001063d
   10494:	000100f5 	.word	0x000100f5
   10498:	40000400 	.word	0x40000400

0001049c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1049c:	2108      	movs	r1, #8
   1049e:	4a06      	ldr	r2, [pc, #24]	; (104b8 <system_gclk_init+0x1c>)
   104a0:	6993      	ldr	r3, [r2, #24]
   104a2:	430b      	orrs	r3, r1
   104a4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   104a6:	2301      	movs	r3, #1
   104a8:	4a04      	ldr	r2, [pc, #16]	; (104bc <system_gclk_init+0x20>)
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   104aa:	3907      	subs	r1, #7
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   104ac:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   104ae:	7813      	ldrb	r3, [r2, #0]
   104b0:	4219      	tst	r1, r3
   104b2:	d1fc      	bne.n	104ae <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   104b4:	4770      	bx	lr
   104b6:	46c0      	nop			; (mov r8, r8)
   104b8:	40000400 	.word	0x40000400
   104bc:	40000c00 	.word	0x40000c00

000104c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   104c0:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   104c2:	780b      	ldrb	r3, [r1, #0]
{
   104c4:	0006      	movs	r6, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   104c6:	021b      	lsls	r3, r3, #8
   104c8:	4303      	orrs	r3, r0
   104ca:	001d      	movs	r5, r3

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   104cc:	784b      	ldrb	r3, [r1, #1]
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   104ce:	0004      	movs	r4, r0
	if (config->high_when_disabled) {
   104d0:	2b00      	cmp	r3, #0
   104d2:	d002      	beq.n	104da <system_gclk_gen_set_config+0x1a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   104d4:	2380      	movs	r3, #128	; 0x80
   104d6:	02db      	lsls	r3, r3, #11
   104d8:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   104da:	7a4b      	ldrb	r3, [r1, #9]
   104dc:	2b00      	cmp	r3, #0
   104de:	d002      	beq.n	104e6 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   104e0:	2380      	movs	r3, #128	; 0x80
   104e2:	031b      	lsls	r3, r3, #12
   104e4:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   104e6:	6848      	ldr	r0, [r1, #4]
   104e8:	2801      	cmp	r0, #1
   104ea:	d90f      	bls.n	1050c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   104ec:	1e43      	subs	r3, r0, #1
   104ee:	4218      	tst	r0, r3
   104f0:	d12f      	bne.n	10552 <system_gclk_gen_set_config+0x92>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   104f2:	2802      	cmp	r0, #2
   104f4:	d033      	beq.n	1055e <system_gclk_gen_set_config+0x9e>
   104f6:	2302      	movs	r3, #2
   104f8:	2400      	movs	r4, #0
						mask <<= 1) {
				div2_count++;
   104fa:	3401      	adds	r4, #1
						mask <<= 1) {
   104fc:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   104fe:	4298      	cmp	r0, r3
   10500:	d8fb      	bhi.n	104fa <system_gclk_gen_set_config+0x3a>
   10502:	0224      	lsls	r4, r4, #8
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   10504:	2380      	movs	r3, #128	; 0x80
   10506:	035b      	lsls	r3, r3, #13
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   10508:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1050a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1050c:	7a0b      	ldrb	r3, [r1, #8]
   1050e:	2b00      	cmp	r3, #0
   10510:	d002      	beq.n	10518 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   10512:	2380      	movs	r3, #128	; 0x80
   10514:	039b      	lsls	r3, r3, #14
   10516:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10518:	4a12      	ldr	r2, [pc, #72]	; (10564 <system_gclk_gen_set_config+0xa4>)
   1051a:	7853      	ldrb	r3, [r2, #1]
   1051c:	b25b      	sxtb	r3, r3
   1051e:	2b00      	cmp	r3, #0
   10520:	dbfb      	blt.n	1051a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   10522:	4b11      	ldr	r3, [pc, #68]	; (10568 <system_gclk_gen_set_config+0xa8>)
   10524:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10526:	4b11      	ldr	r3, [pc, #68]	; (1056c <system_gclk_gen_set_config+0xac>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10528:	4a0e      	ldr	r2, [pc, #56]	; (10564 <system_gclk_gen_set_config+0xa4>)
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1052a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1052c:	7853      	ldrb	r3, [r2, #1]
   1052e:	b25b      	sxtb	r3, r3
   10530:	2b00      	cmp	r3, #0
   10532:	dbfb      	blt.n	1052c <system_gclk_gen_set_config+0x6c>
   10534:	490b      	ldr	r1, [pc, #44]	; (10564 <system_gclk_gen_set_config+0xa4>)

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   10536:	6094      	str	r4, [r2, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10538:	784a      	ldrb	r2, [r1, #1]
   1053a:	b252      	sxtb	r2, r2
   1053c:	2a00      	cmp	r2, #0
   1053e:	dbfb      	blt.n	10538 <system_gclk_gen_set_config+0x78>

	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   10540:	2280      	movs	r2, #128	; 0x80
   10542:	684b      	ldr	r3, [r1, #4]
   10544:	0252      	lsls	r2, r2, #9
   10546:	4013      	ands	r3, r2
   10548:	432b      	orrs	r3, r5
   1054a:	604b      	str	r3, [r1, #4]
	cpu_irq_leave_critical();
   1054c:	4b08      	ldr	r3, [pc, #32]	; (10570 <system_gclk_gen_set_config+0xb0>)
   1054e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10550:	bd70      	pop	{r4, r5, r6, pc}
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   10552:	2380      	movs	r3, #128	; 0x80
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   10554:	0204      	lsls	r4, r0, #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   10556:	029b      	lsls	r3, r3, #10
			new_gendiv_config  |=
   10558:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1055a:	431d      	orrs	r5, r3
   1055c:	e7d6      	b.n	1050c <system_gclk_gen_set_config+0x4c>
			for (mask = (1UL << 1); mask < config->division_factor;
   1055e:	2400      	movs	r4, #0
   10560:	e7d0      	b.n	10504 <system_gclk_gen_set_config+0x44>
   10562:	46c0      	nop			; (mov r8, r8)
   10564:	40000c00 	.word	0x40000c00
   10568:	0000f111 	.word	0x0000f111
   1056c:	40000c08 	.word	0x40000c08
   10570:	0000f14d 	.word	0x0000f14d

00010574 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   10574:	b510      	push	{r4, lr}
   10576:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10578:	4a0a      	ldr	r2, [pc, #40]	; (105a4 <system_gclk_gen_enable+0x30>)
   1057a:	7853      	ldrb	r3, [r2, #1]
   1057c:	b25b      	sxtb	r3, r3
   1057e:	2b00      	cmp	r3, #0
   10580:	dbfb      	blt.n	1057a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   10582:	4b09      	ldr	r3, [pc, #36]	; (105a8 <system_gclk_gen_enable+0x34>)
   10584:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10586:	4b09      	ldr	r3, [pc, #36]	; (105ac <system_gclk_gen_enable+0x38>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10588:	4a06      	ldr	r2, [pc, #24]	; (105a4 <system_gclk_gen_enable+0x30>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1058a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1058c:	7853      	ldrb	r3, [r2, #1]
   1058e:	b25b      	sxtb	r3, r3
   10590:	2b00      	cmp	r3, #0
   10592:	dbfb      	blt.n	1058c <system_gclk_gen_enable+0x18>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   10594:	2380      	movs	r3, #128	; 0x80
   10596:	6851      	ldr	r1, [r2, #4]
   10598:	025b      	lsls	r3, r3, #9
   1059a:	430b      	orrs	r3, r1
   1059c:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1059e:	4b04      	ldr	r3, [pc, #16]	; (105b0 <system_gclk_gen_enable+0x3c>)
   105a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   105a2:	bd10      	pop	{r4, pc}
   105a4:	40000c00 	.word	0x40000c00
   105a8:	0000f111 	.word	0x0000f111
   105ac:	40000c04 	.word	0x40000c04
   105b0:	0000f14d 	.word	0x0000f14d

000105b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   105b4:	b570      	push	{r4, r5, r6, lr}
   105b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   105b8:	4a19      	ldr	r2, [pc, #100]	; (10620 <system_gclk_gen_get_hz+0x6c>)
   105ba:	7853      	ldrb	r3, [r2, #1]
   105bc:	b25b      	sxtb	r3, r3
   105be:	2b00      	cmp	r3, #0
   105c0:	dbfb      	blt.n	105ba <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   105c2:	4b18      	ldr	r3, [pc, #96]	; (10624 <system_gclk_gen_get_hz+0x70>)
   105c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   105c6:	4b18      	ldr	r3, [pc, #96]	; (10628 <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   105c8:	4d15      	ldr	r5, [pc, #84]	; (10620 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   105ca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   105cc:	786b      	ldrb	r3, [r5, #1]
   105ce:	b25b      	sxtb	r3, r3
   105d0:	2b00      	cmp	r3, #0
   105d2:	dbfb      	blt.n	105cc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   105d4:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
   105d6:	4b15      	ldr	r3, [pc, #84]	; (1062c <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   105d8:	04c0      	lsls	r0, r0, #19
   105da:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   105dc:	4798      	blx	r3
   105de:	0006      	movs	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   105e0:	4b11      	ldr	r3, [pc, #68]	; (10628 <system_gclk_gen_get_hz+0x74>)
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   105e2:	4a0f      	ldr	r2, [pc, #60]	; (10620 <system_gclk_gen_get_hz+0x6c>)
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   105e4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   105e6:	686d      	ldr	r5, [r5, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   105e8:	4b11      	ldr	r3, [pc, #68]	; (10630 <system_gclk_gen_get_hz+0x7c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   105ea:	02ed      	lsls	r5, r5, #11
   105ec:	0fed      	lsrs	r5, r5, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   105ee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   105f0:	7853      	ldrb	r3, [r2, #1]
   105f2:	b25b      	sxtb	r3, r3
   105f4:	2b00      	cmp	r3, #0
   105f6:	dbfb      	blt.n	105f0 <system_gclk_gen_get_hz+0x3c>
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   105f8:	6891      	ldr	r1, [r2, #8]
	cpu_irq_leave_critical();
   105fa:	4b0e      	ldr	r3, [pc, #56]	; (10634 <system_gclk_gen_get_hz+0x80>)
   105fc:	0209      	lsls	r1, r1, #8
   105fe:	0c0c      	lsrs	r4, r1, #16
   10600:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   10602:	2d00      	cmp	r5, #0
   10604:	d003      	beq.n	1060e <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   10606:	3401      	adds	r4, #1
   10608:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
   1060a:	0030      	movs	r0, r6
   1060c:	bd70      	pop	{r4, r5, r6, pc}
	if (!divsel && divider > 1) {
   1060e:	2c01      	cmp	r4, #1
   10610:	d9fb      	bls.n	1060a <system_gclk_gen_get_hz+0x56>
		gen_input_hz /= divider;
   10612:	0030      	movs	r0, r6
   10614:	0021      	movs	r1, r4
   10616:	4b08      	ldr	r3, [pc, #32]	; (10638 <system_gclk_gen_get_hz+0x84>)
   10618:	4798      	blx	r3
   1061a:	0006      	movs	r6, r0
   1061c:	e7f5      	b.n	1060a <system_gclk_gen_get_hz+0x56>
   1061e:	46c0      	nop			; (mov r8, r8)
   10620:	40000c00 	.word	0x40000c00
   10624:	0000f111 	.word	0x0000f111
   10628:	40000c04 	.word	0x40000c04
   1062c:	00010135 	.word	0x00010135
   10630:	40000c08 	.word	0x40000c08
   10634:	0000f14d 	.word	0x0000f14d
   10638:	000138a9 	.word	0x000138a9

0001063c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1063c:	b510      	push	{r4, lr}
   1063e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10640:	4b06      	ldr	r3, [pc, #24]	; (1065c <system_gclk_chan_enable+0x20>)
   10642:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10644:	4b06      	ldr	r3, [pc, #24]	; (10660 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   10646:	4a07      	ldr	r2, [pc, #28]	; (10664 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10648:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1064a:	2380      	movs	r3, #128	; 0x80
   1064c:	8851      	ldrh	r1, [r2, #2]
   1064e:	01db      	lsls	r3, r3, #7
   10650:	430b      	orrs	r3, r1
   10652:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   10654:	4b04      	ldr	r3, [pc, #16]	; (10668 <system_gclk_chan_enable+0x2c>)
   10656:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10658:	bd10      	pop	{r4, pc}
   1065a:	46c0      	nop			; (mov r8, r8)
   1065c:	0000f111 	.word	0x0000f111
   10660:	40000c02 	.word	0x40000c02
   10664:	40000c00 	.word	0x40000c00
   10668:	0000f14d 	.word	0x0000f14d

0001066c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1066c:	b510      	push	{r4, lr}
   1066e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10670:	4b0e      	ldr	r3, [pc, #56]	; (106ac <system_gclk_chan_disable+0x40>)
   10672:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10674:	4b0e      	ldr	r3, [pc, #56]	; (106b0 <system_gclk_chan_disable+0x44>)

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   10676:	4a0f      	ldr	r2, [pc, #60]	; (106b4 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10678:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1067a:	8853      	ldrh	r3, [r2, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
   1067c:	490e      	ldr	r1, [pc, #56]	; (106b8 <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1067e:	051b      	lsls	r3, r3, #20
   10680:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   10682:	8853      	ldrh	r3, [r2, #2]
   10684:	400b      	ands	r3, r1
   10686:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10688:	8853      	ldrh	r3, [r2, #2]
   1068a:	490c      	ldr	r1, [pc, #48]	; (106bc <system_gclk_chan_disable+0x50>)
   1068c:	400b      	ands	r3, r1
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1068e:	2180      	movs	r1, #128	; 0x80
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10690:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10692:	01c9      	lsls	r1, r1, #7
   10694:	8853      	ldrh	r3, [r2, #2]
   10696:	420b      	tst	r3, r1
   10698:	d1fc      	bne.n	10694 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1069a:	8851      	ldrh	r1, [r2, #2]
   1069c:	0203      	lsls	r3, r0, #8
   1069e:	4806      	ldr	r0, [pc, #24]	; (106b8 <system_gclk_chan_disable+0x4c>)
   106a0:	4001      	ands	r1, r0
   106a2:	430b      	orrs	r3, r1
   106a4:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   106a6:	4b06      	ldr	r3, [pc, #24]	; (106c0 <system_gclk_chan_disable+0x54>)
   106a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   106aa:	bd10      	pop	{r4, pc}
   106ac:	0000f111 	.word	0x0000f111
   106b0:	40000c02 	.word	0x40000c02
   106b4:	40000c00 	.word	0x40000c00
   106b8:	fffff0ff 	.word	0xfffff0ff
   106bc:	ffffbfff 	.word	0xffffbfff
   106c0:	0000f14d 	.word	0x0000f14d

000106c4 <system_gclk_chan_set_config>:
{
   106c4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   106c6:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
   106c8:	4b03      	ldr	r3, [pc, #12]	; (106d8 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   106ca:	0224      	lsls	r4, r4, #8
   106cc:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   106ce:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   106d0:	4b02      	ldr	r3, [pc, #8]	; (106dc <system_gclk_chan_set_config+0x18>)
   106d2:	b2a4      	uxth	r4, r4
   106d4:	805c      	strh	r4, [r3, #2]
}
   106d6:	bd10      	pop	{r4, pc}
   106d8:	0001066d 	.word	0x0001066d
   106dc:	40000c00 	.word	0x40000c00

000106e0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   106e0:	b510      	push	{r4, lr}
   106e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   106e4:	4b06      	ldr	r3, [pc, #24]	; (10700 <system_gclk_chan_get_hz+0x20>)
   106e6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   106e8:	4b06      	ldr	r3, [pc, #24]	; (10704 <system_gclk_chan_get_hz+0x24>)
   106ea:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   106ec:	4b06      	ldr	r3, [pc, #24]	; (10708 <system_gclk_chan_get_hz+0x28>)
   106ee:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
   106f0:	4b06      	ldr	r3, [pc, #24]	; (1070c <system_gclk_chan_get_hz+0x2c>)
   106f2:	0524      	lsls	r4, r4, #20
   106f4:	0f24      	lsrs	r4, r4, #28
   106f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   106f8:	0020      	movs	r0, r4
   106fa:	4b05      	ldr	r3, [pc, #20]	; (10710 <system_gclk_chan_get_hz+0x30>)
   106fc:	4798      	blx	r3
}
   106fe:	bd10      	pop	{r4, pc}
   10700:	0000f111 	.word	0x0000f111
   10704:	40000c02 	.word	0x40000c02
   10708:	40000c00 	.word	0x40000c00
   1070c:	0000f14d 	.word	0x0000f14d
   10710:	000105b5 	.word	0x000105b5

00010714 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   10714:	78d3      	ldrb	r3, [r2, #3]
{
   10716:	b570      	push	{r4, r5, r6, lr}
	if (!config->powersave) {
   10718:	2b00      	cmp	r3, #0
   1071a:	d131      	bne.n	10780 <_system_pinmux_config+0x6c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1071c:	7813      	ldrb	r3, [r2, #0]
   1071e:	2b80      	cmp	r3, #128	; 0x80
   10720:	d047      	beq.n	107b2 <_system_pinmux_config+0x9e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   10722:	2480      	movs	r4, #128	; 0x80
   10724:	061b      	lsls	r3, r3, #24
   10726:	0264      	lsls	r4, r4, #9
   10728:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1072a:	7854      	ldrb	r4, [r2, #1]
   1072c:	2502      	movs	r5, #2
   1072e:	0026      	movs	r6, r4
   10730:	43ae      	bics	r6, r5
   10732:	d107      	bne.n	10744 <_system_pinmux_config+0x30>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   10734:	7894      	ldrb	r4, [r2, #2]
   10736:	2c00      	cmp	r4, #0
   10738:	d137      	bne.n	107aa <_system_pinmux_config+0x96>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1073a:	2480      	movs	r4, #128	; 0x80
   1073c:	02a4      	lsls	r4, r4, #10
   1073e:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   10740:	6041      	str	r1, [r0, #4]
   10742:	7854      	ldrb	r4, [r2, #1]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10744:	3c01      	subs	r4, #1
   10746:	2c01      	cmp	r4, #1
   10748:	d935      	bls.n	107b6 <_system_pinmux_config+0xa2>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1074a:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1074c:	040d      	lsls	r5, r1, #16
   1074e:	0c2d      	lsrs	r5, r5, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10750:	05e4      	lsls	r4, r4, #23
   10752:	432c      	orrs	r4, r5
   10754:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10756:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10758:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1075a:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1075c:	0624      	lsls	r4, r4, #24
   1075e:	432c      	orrs	r4, r5
   10760:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10762:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   10764:	78d4      	ldrb	r4, [r2, #3]
   10766:	2c00      	cmp	r4, #0
   10768:	d109      	bne.n	1077e <_system_pinmux_config+0x6a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1076a:	035b      	lsls	r3, r3, #13
   1076c:	d503      	bpl.n	10776 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1076e:	7893      	ldrb	r3, [r2, #2]
   10770:	2b01      	cmp	r3, #1
   10772:	d023      	beq.n	107bc <_system_pinmux_config+0xa8>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   10774:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10776:	7853      	ldrb	r3, [r2, #1]
   10778:	3b01      	subs	r3, #1
   1077a:	2b01      	cmp	r3, #1
   1077c:	d913      	bls.n	107a6 <_system_pinmux_config+0x92>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1077e:	bd70      	pop	{r4, r5, r6, pc}
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10780:	23a0      	movs	r3, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   10782:	040c      	lsls	r4, r1, #16
   10784:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10786:	05db      	lsls	r3, r3, #23
   10788:	4323      	orrs	r3, r4
		port->DIRCLR.reg = pin_mask;
   1078a:	6041      	str	r1, [r0, #4]
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1078c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1078e:	23d0      	movs	r3, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10790:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10792:	061b      	lsls	r3, r3, #24
   10794:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10796:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   10798:	78d3      	ldrb	r3, [r2, #3]
   1079a:	2b00      	cmp	r3, #0
   1079c:	d1ef      	bne.n	1077e <_system_pinmux_config+0x6a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1079e:	7853      	ldrb	r3, [r2, #1]
   107a0:	3b01      	subs	r3, #1
   107a2:	2b01      	cmp	r3, #1
   107a4:	d8eb      	bhi.n	1077e <_system_pinmux_config+0x6a>
			port->DIRSET.reg = pin_mask;
   107a6:	6081      	str	r1, [r0, #8]
}
   107a8:	e7e9      	b.n	1077e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   107aa:	24c0      	movs	r4, #192	; 0xc0
   107ac:	02e4      	lsls	r4, r4, #11
   107ae:	4323      	orrs	r3, r4
   107b0:	e7c6      	b.n	10740 <_system_pinmux_config+0x2c>
	uint32_t pin_cfg = 0;
   107b2:	2300      	movs	r3, #0
   107b4:	e7b9      	b.n	1072a <_system_pinmux_config+0x16>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   107b6:	4c02      	ldr	r4, [pc, #8]	; (107c0 <_system_pinmux_config+0xac>)
   107b8:	4023      	ands	r3, r4
   107ba:	e7c6      	b.n	1074a <_system_pinmux_config+0x36>
				port->OUTSET.reg = pin_mask;
   107bc:	6181      	str	r1, [r0, #24]
   107be:	e7da      	b.n	10776 <_system_pinmux_config+0x62>
   107c0:	fffbffff 	.word	0xfffbffff

000107c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   107c4:	000a      	movs	r2, r1
   107c6:	b510      	push	{r4, lr}
   107c8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   107ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   107cc:	2900      	cmp	r1, #0
   107ce:	d104      	bne.n	107da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   107d0:	4906      	ldr	r1, [pc, #24]	; (107ec <system_pinmux_pin_set_config+0x28>)
   107d2:	0943      	lsrs	r3, r0, #5
   107d4:	468c      	mov	ip, r1
   107d6:	01db      	lsls	r3, r3, #7
   107d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   107da:	241f      	movs	r4, #31
   107dc:	2101      	movs	r1, #1
   107de:	4020      	ands	r0, r4
   107e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   107e2:	0018      	movs	r0, r3
   107e4:	4b02      	ldr	r3, [pc, #8]	; (107f0 <system_pinmux_pin_set_config+0x2c>)
   107e6:	4798      	blx	r3
}
   107e8:	bd10      	pop	{r4, pc}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	41004400 	.word	0x41004400
   107f0:	00010715 	.word	0x00010715

000107f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   107f4:	4770      	bx	lr
   107f6:	46c0      	nop			; (mov r8, r8)

000107f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   107f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   107fa:	4b05      	ldr	r3, [pc, #20]	; (10810 <system_init+0x18>)
   107fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   107fe:	4b05      	ldr	r3, [pc, #20]	; (10814 <system_init+0x1c>)
   10800:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   10802:	4b05      	ldr	r3, [pc, #20]	; (10818 <system_init+0x20>)
   10804:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   10806:	4b05      	ldr	r3, [pc, #20]	; (1081c <system_init+0x24>)
   10808:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1080a:	4b05      	ldr	r3, [pc, #20]	; (10820 <system_init+0x28>)
   1080c:	4798      	blx	r3
}
   1080e:	bd10      	pop	{r4, pc}
   10810:	000102f5 	.word	0x000102f5
   10814:	0000a339 	.word	0x0000a339
   10818:	000107f5 	.word	0x000107f5
   1081c:	0000f3e9 	.word	0x0000f3e9
   10820:	000107f5 	.word	0x000107f5

00010824 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
   10824:	b5f0      	push	{r4, r5, r6, r7, lr}
   10826:	4657      	mov	r7, sl
   10828:	464e      	mov	r6, r9
   1082a:	46de      	mov	lr, fp
   1082c:	4645      	mov	r5, r8
   1082e:	b5e0      	push	{r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
   10830:	798e      	ldrb	r6, [r1, #6]
{
   10832:	b083      	sub	sp, #12

	if (ep & USB_EP_DIR_IN) {
   10834:	b273      	sxtb	r3, r6
{
   10836:	468a      	mov	sl, r1
	if (ep & USB_EP_DIR_IN) {
   10838:	2b00      	cmp	r3, #0
   1083a:	da00      	bge.n	1083e <udd_ep_transfer_process+0x1a>
   1083c:	e071      	b.n	10922 <udd_ep_transfer_process+0xfe>
	if ((ep == 0) || (ep == 0x80)) {
   1083e:	2e00      	cmp	r6, #0
   10840:	d033      	beq.n	108aa <udd_ep_transfer_process+0x86>
   10842:	230f      	movs	r3, #15
   10844:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10846:	005c      	lsls	r4, r3, #1
   10848:	3c02      	subs	r4, #2
	ep_size = ptr_job->ep_size;
   1084a:	00a5      	lsls	r5, r4, #2
   1084c:	4699      	mov	r9, r3
   1084e:	4f6f      	ldr	r7, [pc, #444]	; (10a0c <udd_ep_transfer_process+0x1e8>)
   10850:	192b      	adds	r3, r5, r4
   10852:	009b      	lsls	r3, r3, #2
   10854:	18fb      	adds	r3, r7, r3
   10856:	8a1a      	ldrh	r2, [r3, #16]
   10858:	9201      	str	r2, [sp, #4]
	nb_trans = ep_callback_para->received_bytes;
   1085a:	880a      	ldrh	r2, [r1, #0]
   1085c:	4693      	mov	fp, r2
	if (ptr_job->b_use_out_cache_buffer) {
   1085e:	7c9a      	ldrb	r2, [r3, #18]
   10860:	0752      	lsls	r2, r2, #29
   10862:	d426      	bmi.n	108b2 <udd_ep_transfer_process+0x8e>
	ptr_job->nb_trans += nb_trans;
   10864:	192b      	adds	r3, r5, r4
   10866:	009b      	lsls	r3, r3, #2
   10868:	18fb      	adds	r3, r7, r3
   1086a:	68da      	ldr	r2, [r3, #12]
   1086c:	445a      	add	r2, fp
   1086e:	4690      	mov	r8, r2
   10870:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
   10872:	689a      	ldr	r2, [r3, #8]
   10874:	4590      	cmp	r8, r2
   10876:	d81a      	bhi.n	108ae <udd_ep_transfer_process+0x8a>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
   10878:	4653      	mov	r3, sl
   1087a:	889b      	ldrh	r3, [r3, #4]
   1087c:	455b      	cmp	r3, fp
   1087e:	d02b      	beq.n	108d8 <udd_ep_transfer_process+0xb4>
	ptr_job->busy = false;
   10880:	2001      	movs	r0, #1
   10882:	192c      	adds	r4, r5, r4
   10884:	00a4      	lsls	r4, r4, #2
   10886:	1939      	adds	r1, r7, r4
   10888:	7c8b      	ldrb	r3, [r1, #18]
   1088a:	4383      	bics	r3, r0
   1088c:	748b      	strb	r3, [r1, #18]
	if (NULL != ptr_job->call_trans) {
   1088e:	593b      	ldr	r3, [r7, r4]
   10890:	2b00      	cmp	r3, #0
   10892:	d003      	beq.n	1089c <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
   10894:	68c9      	ldr	r1, [r1, #12]
   10896:	0032      	movs	r2, r6
   10898:	2000      	movs	r0, #0
   1089a:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
   1089c:	b003      	add	sp, #12
   1089e:	bc3c      	pop	{r2, r3, r4, r5}
   108a0:	4690      	mov	r8, r2
   108a2:	4699      	mov	r9, r3
   108a4:	46a2      	mov	sl, r4
   108a6:	46ab      	mov	fp, r5
   108a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ep_size = ptr_job->ep_size;
   108aa:	8a33      	ldrh	r3, [r6, #16]
   108ac:	deff      	udf	#255	; 0xff
		ptr_job->nb_trans = ptr_job->buf_size;
   108ae:	60da      	str	r2, [r3, #12]
   108b0:	e7e6      	b.n	10880 <udd_ep_transfer_process+0x5c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
   108b2:	68d9      	ldr	r1, [r3, #12]
   108b4:	685a      	ldr	r2, [r3, #4]
   108b6:	468c      	mov	ip, r1
   108b8:	6898      	ldr	r0, [r3, #8]
   108ba:	4462      	add	r2, ip
   108bc:	9901      	ldr	r1, [sp, #4]
   108be:	4b54      	ldr	r3, [pc, #336]	; (10a10 <udd_ep_transfer_process+0x1ec>)
   108c0:	4690      	mov	r8, r2
   108c2:	4798      	blx	r3
   108c4:	464b      	mov	r3, r9
   108c6:	000a      	movs	r2, r1
   108c8:	3b01      	subs	r3, #1
   108ca:	4952      	ldr	r1, [pc, #328]	; (10a14 <udd_ep_transfer_process+0x1f0>)
   108cc:	019b      	lsls	r3, r3, #6
   108ce:	1859      	adds	r1, r3, r1
   108d0:	4640      	mov	r0, r8
   108d2:	4b51      	ldr	r3, [pc, #324]	; (10a18 <udd_ep_transfer_process+0x1f4>)
   108d4:	4798      	blx	r3
   108d6:	e7c5      	b.n	10864 <udd_ep_transfer_process+0x40>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
   108d8:	4590      	cmp	r8, r2
   108da:	d0d1      	beq.n	10880 <udd_ep_transfer_process+0x5c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   108dc:	4643      	mov	r3, r8
   108de:	1ad2      	subs	r2, r2, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   108e0:	4b4e      	ldr	r3, [pc, #312]	; (10a1c <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   108e2:	b296      	uxth	r6, r2
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   108e4:	469a      	mov	sl, r3
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
   108e6:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   108e8:	429e      	cmp	r6, r3
   108ea:	d96c      	bls.n	109c6 <udd_ep_transfer_process+0x1a2>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
   108ec:	0018      	movs	r0, r3
   108ee:	4b4c      	ldr	r3, [pc, #304]	; (10a20 <udd_ep_transfer_process+0x1fc>)
   108f0:	4798      	blx	r3
   108f2:	4653      	mov	r3, sl
   108f4:	1a5b      	subs	r3, r3, r1
   108f6:	b29b      	uxth	r3, r3
			ptr_job->b_use_out_cache_buffer = true;
   108f8:	192c      	adds	r4, r5, r4
		if (next_trans < ep_size) {
   108fa:	9901      	ldr	r1, [sp, #4]
			ptr_job->b_use_out_cache_buffer = true;
   108fc:	00a4      	lsls	r4, r4, #2
   108fe:	193f      	adds	r7, r7, r4
		if (next_trans < ep_size) {
   10900:	4299      	cmp	r1, r3
   10902:	d959      	bls.n	109b8 <udd_ep_transfer_process+0x194>
			ptr_job->b_use_out_cache_buffer = true;
   10904:	2204      	movs	r2, #4
   10906:	7cbb      	ldrb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
   10908:	4c46      	ldr	r4, [pc, #280]	; (10a24 <udd_ep_transfer_process+0x200>)
			ptr_job->b_use_out_cache_buffer = true;
   1090a:	4313      	orrs	r3, r2
   1090c:	74bb      	strb	r3, [r7, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
   1090e:	464b      	mov	r3, r9
   10910:	1e5a      	subs	r2, r3, #1
   10912:	4b40      	ldr	r3, [pc, #256]	; (10a14 <udd_ep_transfer_process+0x1f0>)
   10914:	0192      	lsls	r2, r2, #6
   10916:	18d2      	adds	r2, r2, r3
   10918:	4843      	ldr	r0, [pc, #268]	; (10a28 <udd_ep_transfer_process+0x204>)
   1091a:	000b      	movs	r3, r1
   1091c:	4649      	mov	r1, r9
   1091e:	47a0      	blx	r4
   10920:	e7bc      	b.n	1089c <udd_ep_transfer_process+0x78>
	if ((ep == 0) || (ep == 0x80)) {
   10922:	2e80      	cmp	r6, #128	; 0x80
   10924:	d045      	beq.n	109b2 <udd_ep_transfer_process+0x18e>
   10926:	230f      	movs	r3, #15
   10928:	4033      	ands	r3, r6
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   1092a:	005c      	lsls	r4, r3, #1
   1092c:	4699      	mov	r9, r3
   1092e:	1e63      	subs	r3, r4, #1
	ep_size = ptr_job->ep_size;
   10930:	009c      	lsls	r4, r3, #2
   10932:	18e0      	adds	r0, r4, r3
   10934:	4f35      	ldr	r7, [pc, #212]	; (10a0c <udd_ep_transfer_process+0x1e8>)
   10936:	0080      	lsls	r0, r0, #2
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10938:	4698      	mov	r8, r3
	ep_size = ptr_job->ep_size;
   1093a:	183b      	adds	r3, r7, r0
   1093c:	8a19      	ldrh	r1, [r3, #16]
   1093e:	001a      	movs	r2, r3
   10940:	468b      	mov	fp, r1
	ptr_job->nb_trans += nb_trans;
   10942:	4651      	mov	r1, sl
   10944:	884d      	ldrh	r5, [r1, #2]
   10946:	68d9      	ldr	r1, [r3, #12]
	ep_size = ptr_job->ep_size;
   10948:	3210      	adds	r2, #16
	ptr_job->nb_trans += nb_trans;
   1094a:	468c      	mov	ip, r1
	if (ptr_job->nb_trans != ptr_job->buf_size) {
   1094c:	6899      	ldr	r1, [r3, #8]
	ptr_job->nb_trans += nb_trans;
   1094e:	4465      	add	r5, ip
   10950:	60dd      	str	r5, [r3, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
   10952:	428d      	cmp	r5, r1
   10954:	d03d      	beq.n	109d2 <udd_ep_transfer_process+0x1ae>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   10956:	1b4e      	subs	r6, r1, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   10958:	4b30      	ldr	r3, [pc, #192]	; (10a1c <udd_ep_transfer_process+0x1f8>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
   1095a:	b2b6      	uxth	r6, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   1095c:	469a      	mov	sl, r3
   1095e:	429e      	cmp	r6, r3
   10960:	d906      	bls.n	10970 <udd_ep_transfer_process+0x14c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
   10962:	0018      	movs	r0, r3
   10964:	4659      	mov	r1, fp
   10966:	4b2e      	ldr	r3, [pc, #184]	; (10a20 <udd_ep_transfer_process+0x1fc>)
   10968:	4798      	blx	r3
   1096a:	4653      	mov	r3, sl
   1096c:	1a5e      	subs	r6, r3, r1
   1096e:	b2b6      	uxth	r6, r6
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
   10970:	4643      	mov	r3, r8
   10972:	18e3      	adds	r3, r4, r3
   10974:	009b      	lsls	r3, r3, #2
   10976:	18fb      	adds	r3, r7, r3
   10978:	7c9a      	ldrb	r2, [r3, #18]
   1097a:	2300      	movs	r3, #0
   1097c:	0792      	lsls	r2, r2, #30
   1097e:	d507      	bpl.n	10990 <udd_ep_transfer_process+0x16c>
   10980:	4b23      	ldr	r3, [pc, #140]	; (10a10 <udd_ep_transfer_process+0x1ec>)
   10982:	4659      	mov	r1, fp
   10984:	0030      	movs	r0, r6
   10986:	4798      	blx	r3
   10988:	b289      	uxth	r1, r1
   1098a:	424b      	negs	r3, r1
   1098c:	414b      	adcs	r3, r1
   1098e:	b2db      	uxtb	r3, r3
   10990:	2002      	movs	r0, #2
   10992:	4444      	add	r4, r8
   10994:	00a4      	lsls	r4, r4, #2
   10996:	193f      	adds	r7, r7, r4
   10998:	7cba      	ldrb	r2, [r7, #18]
   1099a:	005b      	lsls	r3, r3, #1
   1099c:	4382      	bics	r2, r0
   1099e:	4313      	orrs	r3, r2
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   109a0:	687a      	ldr	r2, [r7, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
   109a2:	74bb      	strb	r3, [r7, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   109a4:	1952      	adds	r2, r2, r5
   109a6:	0033      	movs	r3, r6
   109a8:	4649      	mov	r1, r9
   109aa:	4c20      	ldr	r4, [pc, #128]	; (10a2c <udd_ep_transfer_process+0x208>)
   109ac:	481e      	ldr	r0, [pc, #120]	; (10a28 <udd_ep_transfer_process+0x204>)
   109ae:	47a0      	blx	r4
   109b0:	e774      	b.n	1089c <udd_ep_transfer_process+0x78>
	ep_size = ptr_job->ep_size;
   109b2:	2300      	movs	r3, #0
   109b4:	8a1b      	ldrh	r3, [r3, #16]
   109b6:	deff      	udf	#255	; 0xff
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
   109b8:	687a      	ldr	r2, [r7, #4]
   109ba:	4649      	mov	r1, r9
   109bc:	4442      	add	r2, r8
   109be:	4c19      	ldr	r4, [pc, #100]	; (10a24 <udd_ep_transfer_process+0x200>)
   109c0:	4819      	ldr	r0, [pc, #100]	; (10a28 <udd_ep_transfer_process+0x204>)
   109c2:	47a0      	blx	r4
   109c4:	e76a      	b.n	1089c <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
   109c6:	4b12      	ldr	r3, [pc, #72]	; (10a10 <udd_ep_transfer_process+0x1ec>)
   109c8:	0030      	movs	r0, r6
   109ca:	4798      	blx	r3
   109cc:	1a73      	subs	r3, r6, r1
   109ce:	b29b      	uxth	r3, r3
   109d0:	e792      	b.n	108f8 <udd_ep_transfer_process+0xd4>
	if (ptr_job->b_shortpacket) {
   109d2:	2102      	movs	r1, #2
   109d4:	7c9c      	ldrb	r4, [r3, #18]
   109d6:	4221      	tst	r1, r4
   109d8:	d10c      	bne.n	109f4 <udd_ep_transfer_process+0x1d0>
	ptr_job->busy = false;
   109da:	2101      	movs	r1, #1
   109dc:	7893      	ldrb	r3, [r2, #2]
   109de:	438b      	bics	r3, r1
   109e0:	7093      	strb	r3, [r2, #2]
	if (NULL != ptr_job->call_trans) {
   109e2:	583b      	ldr	r3, [r7, r0]
   109e4:	2b00      	cmp	r3, #0
   109e6:	d100      	bne.n	109ea <udd_ep_transfer_process+0x1c6>
   109e8:	e758      	b.n	1089c <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
   109ea:	0032      	movs	r2, r6
   109ec:	0029      	movs	r1, r5
   109ee:	2000      	movs	r0, #0
   109f0:	4798      	blx	r3
   109f2:	e753      	b.n	1089c <udd_ep_transfer_process+0x78>
		ptr_job->b_shortpacket = false;
   109f4:	7890      	ldrb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
   109f6:	4c0d      	ldr	r4, [pc, #52]	; (10a2c <udd_ep_transfer_process+0x208>)
		ptr_job->b_shortpacket = false;
   109f8:	4388      	bics	r0, r1
   109fa:	7090      	strb	r0, [r2, #2]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
   109fc:	685a      	ldr	r2, [r3, #4]
   109fe:	4649      	mov	r1, r9
   10a00:	1952      	adds	r2, r2, r5
   10a02:	2300      	movs	r3, #0
   10a04:	4808      	ldr	r0, [pc, #32]	; (10a28 <udd_ep_transfer_process+0x204>)
   10a06:	47a0      	blx	r4
   10a08:	e748      	b.n	1089c <udd_ep_transfer_process+0x78>
   10a0a:	46c0      	nop			; (mov r8, r8)
   10a0c:	20000b0c 	.word	0x20000b0c
   10a10:	000139b5 	.word	0x000139b5
   10a14:	20000f14 	.word	0x20000f14
   10a18:	00013c51 	.word	0x00013c51
   10a1c:	00001fff 	.word	0x00001fff
   10a20:	00013b89 	.word	0x00013b89
   10a24:	00011acd 	.word	0x00011acd
   10a28:	20000fd4 	.word	0x20000fd4
   10a2c:	00011a81 	.word	0x00011a81

00010a30 <udd_ctrl_stall_data>:
/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   10a30:	2205      	movs	r2, #5
{
   10a32:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   10a34:	4b05      	ldr	r3, [pc, #20]	; (10a4c <udd_ctrl_stall_data+0x1c>)

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
   10a36:	4c06      	ldr	r4, [pc, #24]	; (10a50 <udd_ctrl_stall_data+0x20>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   10a38:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
   10a3a:	0020      	movs	r0, r4
   10a3c:	2180      	movs	r1, #128	; 0x80
   10a3e:	4b05      	ldr	r3, [pc, #20]	; (10a54 <udd_ctrl_stall_data+0x24>)
   10a40:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
   10a42:	2100      	movs	r1, #0
   10a44:	0020      	movs	r0, r4
   10a46:	4b04      	ldr	r3, [pc, #16]	; (10a58 <udd_ctrl_stall_data+0x28>)
   10a48:	4798      	blx	r3
}
   10a4a:	bd10      	pop	{r4, pc}
   10a4c:	20000b0a 	.word	0x20000b0a
   10a50:	20000fd4 	.word	0x20000fd4
   10a54:	000119e5 	.word	0x000119e5
   10a58:	00011a05 	.word	0x00011a05

00010a5c <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
   10a5c:	b530      	push	{r4, r5, lr}
   10a5e:	0004      	movs	r4, r0
   10a60:	b083      	sub	sp, #12
	// Reset USB Device Stack Core
	udc_reset();
   10a62:	4b1e      	ldr	r3, [pc, #120]	; (10adc <_usb_on_bus_reset+0x80>)
   10a64:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
   10a66:	2380      	movs	r3, #128	; 0x80
   10a68:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
   10a6a:	ad01      	add	r5, sp, #4
   10a6c:	7293      	strb	r3, [r2, #10]
   10a6e:	0028      	movs	r0, r5
   10a70:	4b1b      	ldr	r3, [pc, #108]	; (10ae0 <_usb_on_bus_reset+0x84>)
   10a72:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
   10a74:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
   10a76:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
   10a78:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
   10a7a:	0020      	movs	r0, r4
   10a7c:	4b19      	ldr	r3, [pc, #100]	; (10ae4 <_usb_on_bus_reset+0x88>)
   10a7e:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
   10a80:	4919      	ldr	r1, [pc, #100]	; (10ae8 <_usb_on_bus_reset+0x8c>)
   10a82:	0020      	movs	r0, r4
   10a84:	4b19      	ldr	r3, [pc, #100]	; (10aec <_usb_on_bus_reset+0x90>)
   10a86:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
   10a88:	4d19      	ldr	r5, [pc, #100]	; (10af0 <_usb_on_bus_reset+0x94>)
   10a8a:	4b1a      	ldr	r3, [pc, #104]	; (10af4 <_usb_on_bus_reset+0x98>)
   10a8c:	2202      	movs	r2, #2
   10a8e:	2100      	movs	r1, #0
   10a90:	0020      	movs	r0, r4
   10a92:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
   10a94:	4b18      	ldr	r3, [pc, #96]	; (10af8 <_usb_on_bus_reset+0x9c>)
   10a96:	2200      	movs	r2, #0
   10a98:	2100      	movs	r1, #0
   10a9a:	0020      	movs	r0, r4
   10a9c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
   10a9e:	4b17      	ldr	r3, [pc, #92]	; (10afc <_usb_on_bus_reset+0xa0>)
   10aa0:	2201      	movs	r2, #1
   10aa2:	2100      	movs	r1, #0
   10aa4:	0020      	movs	r0, r4
   10aa6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
   10aa8:	4d15      	ldr	r5, [pc, #84]	; (10b00 <_usb_on_bus_reset+0xa4>)
   10aaa:	2202      	movs	r2, #2
   10aac:	2100      	movs	r1, #0
   10aae:	0020      	movs	r0, r4
   10ab0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   10ab2:	2200      	movs	r2, #0
   10ab4:	2100      	movs	r1, #0
   10ab6:	0020      	movs	r0, r4
   10ab8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
   10aba:	2201      	movs	r2, #1
   10abc:	2100      	movs	r1, #0
   10abe:	0020      	movs	r0, r4
   10ac0:	47a8      	blx	r5
   10ac2:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
   10ac4:	4a0f      	ldr	r2, [pc, #60]	; (10b04 <_usb_on_bus_reset+0xa8>)
   10ac6:	890b      	ldrh	r3, [r1, #8]
   10ac8:	401a      	ands	r2, r3
   10aca:	2380      	movs	r3, #128	; 0x80
   10acc:	00db      	lsls	r3, r3, #3
   10ace:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
   10ad0:	2200      	movs	r2, #0
   10ad2:	810b      	strh	r3, [r1, #8]
   10ad4:	4b0c      	ldr	r3, [pc, #48]	; (10b08 <_usb_on_bus_reset+0xac>)
   10ad6:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
   10ad8:	b003      	add	sp, #12
   10ada:	bd30      	pop	{r4, r5, pc}
   10adc:	0000ec65 	.word	0x0000ec65
   10ae0:	00011799 	.word	0x00011799
   10ae4:	000117a9 	.word	0x000117a9
   10ae8:	20001154 	.word	0x20001154
   10aec:	00011b15 	.word	0x00011b15
   10af0:	000115e9 	.word	0x000115e9
   10af4:	00010c41 	.word	0x00010c41
   10af8:	00010f0d 	.word	0x00010f0d
   10afc:	00010b49 	.word	0x00010b49
   10b00:	00011639 	.word	0x00011639
   10b04:	fffff3ff 	.word	0xfffff3ff
   10b08:	20000b0a 	.word	0x20000b0a

00010b0c <udd_ctrl_send_zlp_in>:
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   10b0c:	2203      	movs	r2, #3
{
   10b0e:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   10b10:	4b07      	ldr	r3, [pc, #28]	; (10b30 <udd_ctrl_send_zlp_in+0x24>)
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   10b12:	4c08      	ldr	r4, [pc, #32]	; (10b34 <udd_ctrl_send_zlp_in+0x28>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   10b14:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   10b16:	4908      	ldr	r1, [pc, #32]	; (10b38 <udd_ctrl_send_zlp_in+0x2c>)
   10b18:	0020      	movs	r0, r4
   10b1a:	4b08      	ldr	r3, [pc, #32]	; (10b3c <udd_ctrl_send_zlp_in+0x30>)
   10b1c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
   10b1e:	4b08      	ldr	r3, [pc, #32]	; (10b40 <udd_ctrl_send_zlp_in+0x34>)
   10b20:	2100      	movs	r1, #0
   10b22:	689a      	ldr	r2, [r3, #8]
   10b24:	0020      	movs	r0, r4
   10b26:	2300      	movs	r3, #0
   10b28:	4c06      	ldr	r4, [pc, #24]	; (10b44 <udd_ctrl_send_zlp_in+0x38>)
   10b2a:	47a0      	blx	r4
}
   10b2c:	bd10      	pop	{r4, pc}
   10b2e:	46c0      	nop			; (mov r8, r8)
   10b30:	20000b0a 	.word	0x20000b0a
   10b34:	20000fd4 	.word	0x20000fd4
   10b38:	20001154 	.word	0x20001154
   10b3c:	00011b15 	.word	0x00011b15
   10b40:	2000113c 	.word	0x2000113c
   10b44:	00011a81 	.word	0x00011a81

00010b48 <_usb_ep0_on_tansfer_fail>:
{
   10b48:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
   10b4a:	7989      	ldrb	r1, [r1, #6]
   10b4c:	b24b      	sxtb	r3, r1
   10b4e:	2b00      	cmp	r3, #0
   10b50:	db06      	blt.n	10b60 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
   10b52:	4a0b      	ldr	r2, [pc, #44]	; (10b80 <_usb_ep0_on_tansfer_fail+0x38>)
   10b54:	7813      	ldrb	r3, [r2, #0]
   10b56:	2b02      	cmp	r3, #2
   10b58:	d00c      	beq.n	10b74 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   10b5a:	2b03      	cmp	r3, #3
   10b5c:	d006      	beq.n	10b6c <_usb_ep0_on_tansfer_fail+0x24>
}
   10b5e:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   10b60:	4b07      	ldr	r3, [pc, #28]	; (10b80 <_usb_ep0_on_tansfer_fail+0x38>)
   10b62:	781b      	ldrb	r3, [r3, #0]
   10b64:	2b01      	cmp	r3, #1
   10b66:	d008      	beq.n	10b7a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   10b68:	2b04      	cmp	r3, #4
   10b6a:	d1f8      	bne.n	10b5e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
   10b6c:	4805      	ldr	r0, [pc, #20]	; (10b84 <_usb_ep0_on_tansfer_fail+0x3c>)
   10b6e:	4b06      	ldr	r3, [pc, #24]	; (10b88 <_usb_ep0_on_tansfer_fail+0x40>)
   10b70:	4798      	blx	r3
}
   10b72:	e7f4      	b.n	10b5e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   10b74:	3302      	adds	r3, #2
   10b76:	7013      	strb	r3, [r2, #0]
   10b78:	e7f1      	b.n	10b5e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
   10b7a:	4b04      	ldr	r3, [pc, #16]	; (10b8c <_usb_ep0_on_tansfer_fail+0x44>)
   10b7c:	4798      	blx	r3
   10b7e:	e7ee      	b.n	10b5e <_usb_ep0_on_tansfer_fail+0x16>
   10b80:	20000b0a 	.word	0x20000b0a
   10b84:	20000fd4 	.word	0x20000fd4
   10b88:	000119e5 	.word	0x000119e5
   10b8c:	00010b0d 	.word	0x00010b0d

00010b90 <udd_ctrl_in_sent>:
{
   10b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
   10b92:	4d1f      	ldr	r5, [pc, #124]	; (10c10 <udd_ctrl_in_sent+0x80>)
   10b94:	4e1f      	ldr	r6, [pc, #124]	; (10c14 <udd_ctrl_in_sent+0x84>)
   10b96:	882a      	ldrh	r2, [r5, #0]
   10b98:	89b4      	ldrh	r4, [r6, #12]
   10b9a:	1aa4      	subs	r4, r4, r2
   10b9c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   10b9e:	2c00      	cmp	r4, #0
   10ba0:	d011      	beq.n	10bc6 <udd_ctrl_in_sent+0x36>
   10ba2:	4f1d      	ldr	r7, [pc, #116]	; (10c18 <udd_ctrl_in_sent+0x88>)
   10ba4:	0023      	movs	r3, r4
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   10ba6:	2c3f      	cmp	r4, #63	; 0x3f
   10ba8:	d921      	bls.n	10bee <udd_ctrl_in_sent+0x5e>
		b_shortpacket = false;
   10baa:	2300      	movs	r3, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   10bac:	2440      	movs	r4, #64	; 0x40
		b_shortpacket = false;
   10bae:	703b      	strb	r3, [r7, #0]
   10bb0:	3340      	adds	r3, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
   10bb2:	68b1      	ldr	r1, [r6, #8]
   10bb4:	4819      	ldr	r0, [pc, #100]	; (10c1c <udd_ctrl_in_sent+0x8c>)
   10bb6:	188a      	adds	r2, r1, r2
   10bb8:	4e19      	ldr	r6, [pc, #100]	; (10c20 <udd_ctrl_in_sent+0x90>)
   10bba:	2100      	movs	r1, #0
   10bbc:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
   10bbe:	882b      	ldrh	r3, [r5, #0]
   10bc0:	18e4      	adds	r4, r4, r3
   10bc2:	802c      	strh	r4, [r5, #0]
}
   10bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
   10bc6:	4917      	ldr	r1, [pc, #92]	; (10c24 <udd_ctrl_in_sent+0x94>)
   10bc8:	880b      	ldrh	r3, [r1, #0]
   10bca:	18d3      	adds	r3, r2, r3
   10bcc:	b29b      	uxth	r3, r3
   10bce:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
   10bd0:	88f1      	ldrh	r1, [r6, #6]
   10bd2:	4299      	cmp	r1, r3
   10bd4:	d00e      	beq.n	10bf4 <udd_ctrl_in_sent+0x64>
   10bd6:	4f10      	ldr	r7, [pc, #64]	; (10c18 <udd_ctrl_in_sent+0x88>)
   10bd8:	783b      	ldrb	r3, [r7, #0]
   10bda:	2b00      	cmp	r3, #0
   10bdc:	d10a      	bne.n	10bf4 <udd_ctrl_in_sent+0x64>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
   10bde:	6973      	ldr	r3, [r6, #20]
   10be0:	2b00      	cmp	r3, #0
   10be2:	d00f      	beq.n	10c04 <udd_ctrl_in_sent+0x74>
   10be4:	4798      	blx	r3
   10be6:	2800      	cmp	r0, #0
   10be8:	d10e      	bne.n	10c08 <udd_ctrl_in_sent+0x78>
   10bea:	2300      	movs	r3, #0
   10bec:	882a      	ldrh	r2, [r5, #0]
		b_shortpacket = true;
   10bee:	2101      	movs	r1, #1
   10bf0:	7039      	strb	r1, [r7, #0]
   10bf2:	e7de      	b.n	10bb2 <udd_ctrl_in_sent+0x22>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   10bf4:	2204      	movs	r2, #4
   10bf6:	4b0c      	ldr	r3, [pc, #48]	; (10c28 <udd_ctrl_in_sent+0x98>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   10bf8:	490c      	ldr	r1, [pc, #48]	; (10c2c <udd_ctrl_in_sent+0x9c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   10bfa:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
   10bfc:	4807      	ldr	r0, [pc, #28]	; (10c1c <udd_ctrl_in_sent+0x8c>)
   10bfe:	4b0c      	ldr	r3, [pc, #48]	; (10c30 <udd_ctrl_in_sent+0xa0>)
   10c00:	4798      	blx	r3
			return;
   10c02:	e7df      	b.n	10bc4 <udd_ctrl_in_sent+0x34>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
   10c04:	2300      	movs	r3, #0
   10c06:	e7f2      	b.n	10bee <udd_ctrl_in_sent+0x5e>
			udd_ctrl_payload_nb_trans = 0;
   10c08:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   10c0a:	89b4      	ldrh	r4, [r6, #12]
   10c0c:	2200      	movs	r2, #0
   10c0e:	e7c9      	b.n	10ba4 <udd_ctrl_in_sent+0x14>
   10c10:	20000b06 	.word	0x20000b06
   10c14:	2000113c 	.word	0x2000113c
   10c18:	20000b04 	.word	0x20000b04
   10c1c:	20000fd4 	.word	0x20000fd4
   10c20:	00011a81 	.word	0x00011a81
   10c24:	20000b08 	.word	0x20000b08
   10c28:	20000b0a 	.word	0x20000b0a
   10c2c:	20001154 	.word	0x20001154
   10c30:	00011b15 	.word	0x00011b15

00010c34 <_usb_on_sof_notify>:
{
   10c34:	b510      	push	{r4, lr}
	udc_sof_notify();
   10c36:	4b01      	ldr	r3, [pc, #4]	; (10c3c <_usb_on_sof_notify+0x8>)
   10c38:	4798      	blx	r3
}
   10c3a:	bd10      	pop	{r4, pc}
   10c3c:	0000ecad 	.word	0x0000ecad

00010c40 <_usb_ep0_on_setup>:
{
   10c40:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   10c42:	4e29      	ldr	r6, [pc, #164]	; (10ce8 <_usb_ep0_on_setup+0xa8>)
{
   10c44:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   10c46:	7833      	ldrb	r3, [r6, #0]
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d006      	beq.n	10c5a <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
   10c4c:	4b27      	ldr	r3, [pc, #156]	; (10cec <_usb_ep0_on_setup+0xac>)
   10c4e:	691b      	ldr	r3, [r3, #16]
   10c50:	2b00      	cmp	r3, #0
   10c52:	d000      	beq.n	10c56 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
   10c54:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
   10c56:	2300      	movs	r3, #0
   10c58:	7033      	strb	r3, [r6, #0]
	if ( 8 != ep_callback_para->received_bytes) {
   10c5a:	8823      	ldrh	r3, [r4, #0]
   10c5c:	2b08      	cmp	r3, #8
   10c5e:	d002      	beq.n	10c66 <_usb_ep0_on_setup+0x26>
		udd_ctrl_stall_data();
   10c60:	4b23      	ldr	r3, [pc, #140]	; (10cf0 <_usb_ep0_on_setup+0xb0>)
   10c62:	4798      	blx	r3
}
   10c64:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
   10c66:	4c23      	ldr	r4, [pc, #140]	; (10cf4 <_usb_ep0_on_setup+0xb4>)
   10c68:	4d20      	ldr	r5, [pc, #128]	; (10cec <_usb_ep0_on_setup+0xac>)
   10c6a:	7823      	ldrb	r3, [r4, #0]
   10c6c:	702b      	strb	r3, [r5, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
   10c6e:	7863      	ldrb	r3, [r4, #1]
   10c70:	706b      	strb	r3, [r5, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
   10c72:	78e2      	ldrb	r2, [r4, #3]
   10c74:	78a3      	ldrb	r3, [r4, #2]
   10c76:	0212      	lsls	r2, r2, #8
   10c78:	189b      	adds	r3, r3, r2
   10c7a:	806b      	strh	r3, [r5, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
   10c7c:	7962      	ldrb	r2, [r4, #5]
   10c7e:	7923      	ldrb	r3, [r4, #4]
   10c80:	0212      	lsls	r2, r2, #8
   10c82:	189b      	adds	r3, r3, r2
   10c84:	80ab      	strh	r3, [r5, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
   10c86:	79e2      	ldrb	r2, [r4, #7]
   10c88:	79a3      	ldrb	r3, [r4, #6]
   10c8a:	0212      	lsls	r2, r2, #8
   10c8c:	189b      	adds	r3, r3, r2
   10c8e:	80eb      	strh	r3, [r5, #6]
		if (false == udc_process_setup()) {
   10c90:	4b19      	ldr	r3, [pc, #100]	; (10cf8 <_usb_ep0_on_setup+0xb8>)
   10c92:	4798      	blx	r3
   10c94:	2800      	cmp	r0, #0
   10c96:	d0e3      	beq.n	10c60 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
   10c98:	782b      	ldrb	r3, [r5, #0]
   10c9a:	2b7f      	cmp	r3, #127	; 0x7f
   10c9c:	d813      	bhi.n	10cc6 <_usb_ep0_on_setup+0x86>
			if(0 == udd_g_ctrlreq.req.wLength) {
   10c9e:	88eb      	ldrh	r3, [r5, #6]
   10ca0:	2b00      	cmp	r3, #0
   10ca2:	d00d      	beq.n	10cc0 <_usb_ep0_on_setup+0x80>
				udd_ctrl_prev_payload_nb_trans = 0;
   10ca4:	2300      	movs	r3, #0
   10ca6:	4a15      	ldr	r2, [pc, #84]	; (10cfc <_usb_ep0_on_setup+0xbc>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10ca8:	2100      	movs	r1, #0
				udd_ctrl_prev_payload_nb_trans = 0;
   10caa:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
   10cac:	4a14      	ldr	r2, [pc, #80]	; (10d00 <_usb_ep0_on_setup+0xc0>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10cae:	4815      	ldr	r0, [pc, #84]	; (10d04 <_usb_ep0_on_setup+0xc4>)
				udd_ctrl_payload_nb_trans = 0;
   10cb0:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   10cb2:	3301      	adds	r3, #1
   10cb4:	7033      	strb	r3, [r6, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10cb6:	0022      	movs	r2, r4
   10cb8:	333f      	adds	r3, #63	; 0x3f
   10cba:	4c13      	ldr	r4, [pc, #76]	; (10d08 <_usb_ep0_on_setup+0xc8>)
   10cbc:	47a0      	blx	r4
   10cbe:	e7d1      	b.n	10c64 <_usb_ep0_on_setup+0x24>
				udd_ctrl_send_zlp_in();
   10cc0:	4b12      	ldr	r3, [pc, #72]	; (10d0c <_usb_ep0_on_setup+0xcc>)
   10cc2:	4798      	blx	r3
				return;
   10cc4:	e7ce      	b.n	10c64 <_usb_ep0_on_setup+0x24>
			udd_ctrl_prev_payload_nb_trans = 0;
   10cc6:	2300      	movs	r3, #0
   10cc8:	4a0c      	ldr	r2, [pc, #48]	; (10cfc <_usb_ep0_on_setup+0xbc>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10cca:	2100      	movs	r1, #0
			udd_ctrl_prev_payload_nb_trans = 0;
   10ccc:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
   10cce:	4a0c      	ldr	r2, [pc, #48]	; (10d00 <_usb_ep0_on_setup+0xc0>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10cd0:	480c      	ldr	r0, [pc, #48]	; (10d04 <_usb_ep0_on_setup+0xc4>)
			udd_ctrl_payload_nb_trans = 0;
   10cd2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   10cd4:	3302      	adds	r3, #2
   10cd6:	7033      	strb	r3, [r6, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10cd8:	0022      	movs	r2, r4
   10cda:	333e      	adds	r3, #62	; 0x3e
   10cdc:	4c0a      	ldr	r4, [pc, #40]	; (10d08 <_usb_ep0_on_setup+0xc8>)
   10cde:	47a0      	blx	r4
			udd_ctrl_in_sent();
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <_usb_ep0_on_setup+0xd0>)
   10ce2:	4798      	blx	r3
   10ce4:	e7be      	b.n	10c64 <_usb_ep0_on_setup+0x24>
   10ce6:	46c0      	nop			; (mov r8, r8)
   10ce8:	20000b0a 	.word	0x20000b0a
   10cec:	2000113c 	.word	0x2000113c
   10cf0:	00010a31 	.word	0x00010a31
   10cf4:	20001154 	.word	0x20001154
   10cf8:	0000eced 	.word	0x0000eced
   10cfc:	20000b08 	.word	0x20000b08
   10d00:	20000b06 	.word	0x20000b06
   10d04:	20000fd4 	.word	0x20000fd4
   10d08:	00011acd 	.word	0x00011acd
   10d0c:	00010b0d 	.word	0x00010b0d
   10d10:	00010b91 	.word	0x00010b91

00010d14 <udd_sleep_mode>:
	enum sleepmgr_mode sleep_mode[] = {
   10d14:	2200      	movs	r2, #0
{
   10d16:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d18:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
   10d1a:	ab01      	add	r3, sp, #4
   10d1c:	4694      	mov	ip, r2
   10d1e:	701a      	strb	r2, [r3, #0]
   10d20:	2203      	movs	r2, #3
   10d22:	2701      	movs	r7, #1
	if (udd_state == new_state) {
   10d24:	4926      	ldr	r1, [pc, #152]	; (10dc0 <udd_sleep_mode+0xac>)
	enum sleepmgr_mode sleep_mode[] = {
   10d26:	705a      	strb	r2, [r3, #1]
   10d28:	3a01      	subs	r2, #1
   10d2a:	709a      	strb	r2, [r3, #2]
	if (udd_state == new_state) {
   10d2c:	780a      	ldrb	r2, [r1, #0]
	enum sleepmgr_mode sleep_mode[] = {
   10d2e:	70df      	strb	r7, [r3, #3]
	if (udd_state == new_state) {
   10d30:	4282      	cmp	r2, r0
   10d32:	d004      	beq.n	10d3e <udd_sleep_mode+0x2a>
	if (new_state != UDD_STATE_OFF) {
   10d34:	2800      	cmp	r0, #0
   10d36:	d121      	bne.n	10d7c <udd_sleep_mode+0x68>
	if (udd_state != UDD_STATE_OFF) {
   10d38:	2a00      	cmp	r2, #0
   10d3a:	d102      	bne.n	10d42 <udd_sleep_mode+0x2e>
	udd_state = new_state;
   10d3c:	7008      	strb	r0, [r1, #0]
}
   10d3e:	b005      	add	sp, #20
   10d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   10d42:	5c9b      	ldrb	r3, [r3, r2]
   10d44:	4a1f      	ldr	r2, [pc, #124]	; (10dc4 <udd_sleep_mode+0xb0>)
   10d46:	5cd4      	ldrb	r4, [r2, r3]
   10d48:	2c00      	cmp	r4, #0
   10d4a:	d016      	beq.n	10d7a <udd_sleep_mode+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10d4c:	f3ef 8410 	mrs	r4, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10d50:	4265      	negs	r5, r4
   10d52:	416c      	adcs	r4, r5
   10d54:	9403      	str	r4, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
   10d56:	b672      	cpsid	i
   10d58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10d5c:	2400      	movs	r4, #0
   10d5e:	4d1a      	ldr	r5, [pc, #104]	; (10dc8 <udd_sleep_mode+0xb4>)
   10d60:	702c      	strb	r4, [r5, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   10d62:	5cd4      	ldrb	r4, [r2, r3]
	return flags;
   10d64:	9e03      	ldr	r6, [sp, #12]
   10d66:	3c01      	subs	r4, #1
   10d68:	54d4      	strb	r4, [r2, r3]
	if (cpu_irq_is_enabled_flags(flags))
   10d6a:	2e00      	cmp	r6, #0
   10d6c:	d0e6      	beq.n	10d3c <udd_sleep_mode+0x28>
		cpu_irq_enable();
   10d6e:	2301      	movs	r3, #1
   10d70:	702b      	strb	r3, [r5, #0]
   10d72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10d76:	b662      	cpsie	i
   10d78:	e7e0      	b.n	10d3c <udd_sleep_mode+0x28>
   10d7a:	e7fe      	b.n	10d7a <udd_sleep_mode+0x66>
	if(sleepmgr_locks[mode] >= 0xff) {
   10d7c:	5c1a      	ldrb	r2, [r3, r0]
   10d7e:	4c11      	ldr	r4, [pc, #68]	; (10dc4 <udd_sleep_mode+0xb0>)
   10d80:	5ca5      	ldrb	r5, [r4, r2]
   10d82:	2dff      	cmp	r5, #255	; 0xff
   10d84:	d014      	beq.n	10db0 <udd_sleep_mode+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10d86:	f3ef 8510 	mrs	r5, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   10d8a:	426e      	negs	r6, r5
   10d8c:	4175      	adcs	r5, r6
   10d8e:	9502      	str	r5, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   10d90:	b672      	cpsid	i
   10d92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   10d96:	4665      	mov	r5, ip
   10d98:	4e0b      	ldr	r6, [pc, #44]	; (10dc8 <udd_sleep_mode+0xb4>)
   10d9a:	7035      	strb	r5, [r6, #0]
	return flags;
   10d9c:	9d02      	ldr	r5, [sp, #8]
   10d9e:	46ac      	mov	ip, r5
	++sleepmgr_locks[mode];
   10da0:	5ca5      	ldrb	r5, [r4, r2]
   10da2:	3501      	adds	r5, #1
   10da4:	54a5      	strb	r5, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
   10da6:	4662      	mov	r2, ip
   10da8:	2a00      	cmp	r2, #0
   10daa:	d102      	bne.n	10db2 <udd_sleep_mode+0x9e>
   10dac:	780a      	ldrb	r2, [r1, #0]
   10dae:	e7c3      	b.n	10d38 <udd_sleep_mode+0x24>
   10db0:	e7fe      	b.n	10db0 <udd_sleep_mode+0x9c>
		cpu_irq_enable();
   10db2:	7037      	strb	r7, [r6, #0]
   10db4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10db8:	b662      	cpsie	i
   10dba:	780a      	ldrb	r2, [r1, #0]
   10dbc:	e7bc      	b.n	10d38 <udd_sleep_mode+0x24>
   10dbe:	46c0      	nop			; (mov r8, r8)
   10dc0:	20000b84 	.word	0x20000b84
   10dc4:	20000e54 	.word	0x20000e54
   10dc8:	200001f9 	.word	0x200001f9

00010dcc <_usb_device_lpm_suspend>:
{
   10dcc:	b570      	push	{r4, r5, r6, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   10dce:	4c08      	ldr	r4, [pc, #32]	; (10df0 <_usb_device_lpm_suspend+0x24>)
   10dd0:	4d08      	ldr	r5, [pc, #32]	; (10df4 <_usb_device_lpm_suspend+0x28>)
   10dd2:	2106      	movs	r1, #6
   10dd4:	0020      	movs	r0, r4
   10dd6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   10dd8:	2104      	movs	r1, #4
   10dda:	0020      	movs	r0, r4
   10ddc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   10dde:	2102      	movs	r1, #2
   10de0:	0020      	movs	r0, r4
   10de2:	4b05      	ldr	r3, [pc, #20]	; (10df8 <_usb_device_lpm_suspend+0x2c>)
   10de4:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
   10de6:	2002      	movs	r0, #2
   10de8:	4b04      	ldr	r3, [pc, #16]	; (10dfc <_usb_device_lpm_suspend+0x30>)
   10dea:	4798      	blx	r3
}
   10dec:	bd70      	pop	{r4, r5, r6, pc}
   10dee:	46c0      	nop			; (mov r8, r8)
   10df0:	20000fd4 	.word	0x20000fd4
   10df4:	000115cd 	.word	0x000115cd
   10df8:	000115ad 	.word	0x000115ad
   10dfc:	00010d15 	.word	0x00010d15

00010e00 <_usb_on_suspend>:
{
   10e00:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   10e02:	4c06      	ldr	r4, [pc, #24]	; (10e1c <_usb_on_suspend+0x1c>)
   10e04:	2104      	movs	r1, #4
   10e06:	0020      	movs	r0, r4
   10e08:	4b05      	ldr	r3, [pc, #20]	; (10e20 <_usb_on_suspend+0x20>)
   10e0a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   10e0c:	2102      	movs	r1, #2
   10e0e:	0020      	movs	r0, r4
   10e10:	4b04      	ldr	r3, [pc, #16]	; (10e24 <_usb_on_suspend+0x24>)
   10e12:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
   10e14:	2001      	movs	r0, #1
   10e16:	4b04      	ldr	r3, [pc, #16]	; (10e28 <_usb_on_suspend+0x28>)
   10e18:	4798      	blx	r3
}
   10e1a:	bd10      	pop	{r4, pc}
   10e1c:	20000fd4 	.word	0x20000fd4
   10e20:	000115cd 	.word	0x000115cd
   10e24:	000115ad 	.word	0x000115ad
   10e28:	00010d15 	.word	0x00010d15

00010e2c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
   10e2c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
   10e2e:	4b12      	ldr	r3, [pc, #72]	; (10e78 <_usb_on_wakeup+0x4c>)
   10e30:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   10e32:	0692      	lsls	r2, r2, #26
   10e34:	d41a      	bmi.n	10e6c <_usb_on_wakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
   10e36:	001a      	movs	r2, r3
   10e38:	21d0      	movs	r1, #208	; 0xd0
   10e3a:	68d3      	ldr	r3, [r2, #12]
   10e3c:	400b      	ands	r3, r1
   10e3e:	2bd0      	cmp	r3, #208	; 0xd0
   10e40:	d1fb      	bne.n	10e3a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   10e42:	4c0e      	ldr	r4, [pc, #56]	; (10e7c <_usb_on_wakeup+0x50>)
   10e44:	4b0e      	ldr	r3, [pc, #56]	; (10e80 <_usb_on_wakeup+0x54>)
   10e46:	2102      	movs	r1, #2
   10e48:	0020      	movs	r0, r4
   10e4a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   10e4c:	4d0d      	ldr	r5, [pc, #52]	; (10e84 <_usb_on_wakeup+0x58>)
   10e4e:	2104      	movs	r1, #4
   10e50:	0020      	movs	r0, r4
   10e52:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
   10e54:	4a0c      	ldr	r2, [pc, #48]	; (10e88 <_usb_on_wakeup+0x5c>)
   10e56:	4b0d      	ldr	r3, [pc, #52]	; (10e8c <_usb_on_wakeup+0x60>)
   10e58:	2106      	movs	r1, #6
   10e5a:	0020      	movs	r0, r4
   10e5c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   10e5e:	2106      	movs	r1, #6
   10e60:	0020      	movs	r0, r4
   10e62:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
   10e64:	2003      	movs	r0, #3
   10e66:	4b0a      	ldr	r3, [pc, #40]	; (10e90 <_usb_on_wakeup+0x64>)
   10e68:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
   10e6a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
   10e6c:	2110      	movs	r1, #16
   10e6e:	68da      	ldr	r2, [r3, #12]
   10e70:	4211      	tst	r1, r2
   10e72:	d0fc      	beq.n	10e6e <_usb_on_wakeup+0x42>
   10e74:	e7e5      	b.n	10e42 <_usb_on_wakeup+0x16>
   10e76:	46c0      	nop			; (mov r8, r8)
   10e78:	40000800 	.word	0x40000800
   10e7c:	20000fd4 	.word	0x20000fd4
   10e80:	000115cd 	.word	0x000115cd
   10e84:	000115ad 	.word	0x000115ad
   10e88:	00010dcd 	.word	0x00010dcd
   10e8c:	00011589 	.word	0x00011589
   10e90:	00010d15 	.word	0x00010d15

00010e94 <udd_ep_abort>:
{
   10e94:	b570      	push	{r4, r5, r6, lr}
	usb_device_endpoint_abort_job(&usb_device, ep);
   10e96:	0001      	movs	r1, r0
{
   10e98:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
   10e9a:	4b10      	ldr	r3, [pc, #64]	; (10edc <udd_ep_abort+0x48>)
   10e9c:	4810      	ldr	r0, [pc, #64]	; (10ee0 <udd_ep_abort+0x4c>)
   10e9e:	4798      	blx	r3
	if ((ep == 0) || (ep == 0x80)) {
   10ea0:	237f      	movs	r3, #127	; 0x7f
   10ea2:	4023      	ands	r3, r4
   10ea4:	d017      	beq.n	10ed6 <udd_ep_abort+0x42>
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10ea6:	230f      	movs	r3, #15
	if (!ptr_job->busy) {
   10ea8:	2001      	movs	r0, #1
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   10eaa:	4023      	ands	r3, r4
   10eac:	09e2      	lsrs	r2, r4, #7
   10eae:	005b      	lsls	r3, r3, #1
   10eb0:	189b      	adds	r3, r3, r2
   10eb2:	3b02      	subs	r3, #2
	if (!ptr_job->busy) {
   10eb4:	009a      	lsls	r2, r3, #2
   10eb6:	18d3      	adds	r3, r2, r3
   10eb8:	490a      	ldr	r1, [pc, #40]	; (10ee4 <udd_ep_abort+0x50>)
   10eba:	009b      	lsls	r3, r3, #2
   10ebc:	18ca      	adds	r2, r1, r3
   10ebe:	7c95      	ldrb	r5, [r2, #18]
   10ec0:	4228      	tst	r0, r5
   10ec2:	d007      	beq.n	10ed4 <udd_ep_abort+0x40>
	if (NULL != ptr_job->call_trans) {
   10ec4:	585b      	ldr	r3, [r3, r1]
	ptr_job->busy = false;
   10ec6:	4385      	bics	r5, r0
   10ec8:	7495      	strb	r5, [r2, #18]
	if (NULL != ptr_job->call_trans) {
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d002      	beq.n	10ed4 <udd_ep_abort+0x40>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
   10ece:	68d1      	ldr	r1, [r2, #12]
   10ed0:	0022      	movs	r2, r4
   10ed2:	4798      	blx	r3
}
   10ed4:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptr_job->busy) {
   10ed6:	7c9b      	ldrb	r3, [r3, #18]
   10ed8:	deff      	udf	#255	; 0xff
   10eda:	46c0      	nop			; (mov r8, r8)
   10edc:	00011995 	.word	0x00011995
   10ee0:	20000fd4 	.word	0x20000fd4
   10ee4:	20000b0c 	.word	0x20000b0c

00010ee8 <udd_ep_set_halt.part.12>:
bool udd_ep_set_halt(udd_ep_id_t ep)
   10ee8:	b510      	push	{r4, lr}
   10eea:	0004      	movs	r4, r0
	usb_device_endpoint_set_halt(&usb_device, ep);
   10eec:	0001      	movs	r1, r0
   10eee:	4b04      	ldr	r3, [pc, #16]	; (10f00 <udd_ep_set_halt.part.12+0x18>)
   10ef0:	4804      	ldr	r0, [pc, #16]	; (10f04 <udd_ep_set_halt.part.12+0x1c>)
   10ef2:	4798      	blx	r3
	udd_ep_abort(ep);
   10ef4:	0020      	movs	r0, r4
   10ef6:	4b04      	ldr	r3, [pc, #16]	; (10f08 <udd_ep_set_halt.part.12+0x20>)
   10ef8:	4798      	blx	r3
}
   10efa:	2001      	movs	r0, #1
   10efc:	bd10      	pop	{r4, pc}
   10efe:	46c0      	nop			; (mov r8, r8)
   10f00:	000119e5 	.word	0x000119e5
   10f04:	20000fd4 	.word	0x20000fd4
   10f08:	00010e95 	.word	0x00010e95

00010f0c <_usb_ep0_on_tansfer_ok>:
{
   10f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f0e:	46ce      	mov	lr, r9
   10f10:	4647      	mov	r7, r8
   10f12:	b580      	push	{r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
   10f14:	4c2e      	ldr	r4, [pc, #184]	; (10fd0 <_usb_ep0_on_tansfer_ok+0xc4>)
   10f16:	7823      	ldrb	r3, [r4, #0]
   10f18:	2b01      	cmp	r3, #1
   10f1a:	d00c      	beq.n	10f36 <_usb_ep0_on_tansfer_ok+0x2a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
   10f1c:	2b02      	cmp	r3, #2
   10f1e:	d02b      	beq.n	10f78 <_usb_ep0_on_tansfer_ok+0x6c>
			if (NULL != udd_g_ctrlreq.callback) {
   10f20:	4b2c      	ldr	r3, [pc, #176]	; (10fd4 <_usb_ep0_on_tansfer_ok+0xc8>)
   10f22:	691b      	ldr	r3, [r3, #16]
   10f24:	2b00      	cmp	r3, #0
   10f26:	d000      	beq.n	10f2a <_usb_ep0_on_tansfer_ok+0x1e>
				udd_g_ctrlreq.callback();
   10f28:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
   10f2a:	2300      	movs	r3, #0
   10f2c:	7023      	strb	r3, [r4, #0]
}
   10f2e:	bc0c      	pop	{r2, r3}
   10f30:	4690      	mov	r8, r2
   10f32:	4699      	mov	r9, r3
   10f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
   10f36:	4a28      	ldr	r2, [pc, #160]	; (10fd8 <_usb_ep0_on_tansfer_ok+0xcc>)
   10f38:	4e26      	ldr	r6, [pc, #152]	; (10fd4 <_usb_ep0_on_tansfer_ok+0xc8>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
   10f3a:	880f      	ldrh	r7, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
   10f3c:	8810      	ldrh	r0, [r2, #0]
   10f3e:	89b3      	ldrh	r3, [r6, #12]
   10f40:	19c5      	adds	r5, r0, r7
   10f42:	4690      	mov	r8, r2
   10f44:	42ab      	cmp	r3, r5
   10f46:	db1a      	blt.n	10f7e <_usb_ep0_on_tansfer_ok+0x72>
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
   10f48:	68b3      	ldr	r3, [r6, #8]
   10f4a:	003a      	movs	r2, r7
   10f4c:	469c      	mov	ip, r3
   10f4e:	4b23      	ldr	r3, [pc, #140]	; (10fdc <_usb_ep0_on_tansfer_ok+0xd0>)
   10f50:	4460      	add	r0, ip
   10f52:	0019      	movs	r1, r3
   10f54:	4699      	mov	r9, r3
   10f56:	4b22      	ldr	r3, [pc, #136]	; (10fe0 <_usb_ep0_on_tansfer_ok+0xd4>)
   10f58:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
   10f5a:	4643      	mov	r3, r8
   10f5c:	b2ad      	uxth	r5, r5
   10f5e:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
   10f60:	2f40      	cmp	r7, #64	; 0x40
   10f62:	d010      	beq.n	10f86 <_usb_ep0_on_tansfer_ok+0x7a>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   10f64:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
   10f66:	81b5      	strh	r5, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d002      	beq.n	10f72 <_usb_ep0_on_tansfer_ok+0x66>
			if (!udd_g_ctrlreq.over_under_run()) {
   10f6c:	4798      	blx	r3
   10f6e:	2800      	cmp	r0, #0
   10f70:	d027      	beq.n	10fc2 <_usb_ep0_on_tansfer_ok+0xb6>
		udd_ctrl_send_zlp_in();
   10f72:	4b1c      	ldr	r3, [pc, #112]	; (10fe4 <_usb_ep0_on_tansfer_ok+0xd8>)
   10f74:	4798      	blx	r3
   10f76:	e7da      	b.n	10f2e <_usb_ep0_on_tansfer_ok+0x22>
			udd_ctrl_in_sent();
   10f78:	4b1b      	ldr	r3, [pc, #108]	; (10fe8 <_usb_ep0_on_tansfer_ok+0xdc>)
   10f7a:	4798      	blx	r3
   10f7c:	e7d7      	b.n	10f2e <_usb_ep0_on_tansfer_ok+0x22>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
   10f7e:	1a1f      	subs	r7, r3, r0
   10f80:	b2bf      	uxth	r7, r7
   10f82:	19c5      	adds	r5, r0, r7
   10f84:	e7e0      	b.n	10f48 <_usb_ep0_on_tansfer_ok+0x3c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
   10f86:	4f19      	ldr	r7, [pc, #100]	; (10fec <_usb_ep0_on_tansfer_ok+0xe0>)
   10f88:	88f2      	ldrh	r2, [r6, #6]
   10f8a:	883b      	ldrh	r3, [r7, #0]
   10f8c:	195b      	adds	r3, r3, r5
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
   10f8e:	429a      	cmp	r2, r3
   10f90:	dde8      	ble.n	10f64 <_usb_ep0_on_tansfer_ok+0x58>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
   10f92:	89b3      	ldrh	r3, [r6, #12]
   10f94:	42ab      	cmp	r3, r5
   10f96:	d10d      	bne.n	10fb4 <_usb_ep0_on_tansfer_ok+0xa8>
		if (!udd_g_ctrlreq.over_under_run) {
   10f98:	6973      	ldr	r3, [r6, #20]
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	d011      	beq.n	10fc2 <_usb_ep0_on_tansfer_ok+0xb6>
		if (!udd_g_ctrlreq.over_under_run()) {
   10f9e:	4798      	blx	r3
   10fa0:	2800      	cmp	r0, #0
   10fa2:	d00e      	beq.n	10fc2 <_usb_ep0_on_tansfer_ok+0xb6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
   10fa4:	4642      	mov	r2, r8
   10fa6:	883b      	ldrh	r3, [r7, #0]
   10fa8:	8812      	ldrh	r2, [r2, #0]
   10faa:	189b      	adds	r3, r3, r2
   10fac:	803b      	strh	r3, [r7, #0]
		udd_ctrl_payload_nb_trans = 0;
   10fae:	4642      	mov	r2, r8
   10fb0:	2300      	movs	r3, #0
   10fb2:	8013      	strh	r3, [r2, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
   10fb4:	2340      	movs	r3, #64	; 0x40
   10fb6:	464a      	mov	r2, r9
   10fb8:	2100      	movs	r1, #0
   10fba:	4c0d      	ldr	r4, [pc, #52]	; (10ff0 <_usb_ep0_on_tansfer_ok+0xe4>)
   10fbc:	480d      	ldr	r0, [pc, #52]	; (10ff4 <_usb_ep0_on_tansfer_ok+0xe8>)
   10fbe:	47a0      	blx	r4
   10fc0:	e7b5      	b.n	10f2e <_usb_ep0_on_tansfer_ok+0x22>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   10fc2:	2305      	movs	r3, #5
   10fc4:	2000      	movs	r0, #0
   10fc6:	7023      	strb	r3, [r4, #0]
   10fc8:	4b0b      	ldr	r3, [pc, #44]	; (10ff8 <_usb_ep0_on_tansfer_ok+0xec>)
   10fca:	4798      	blx	r3
   10fcc:	e7af      	b.n	10f2e <_usb_ep0_on_tansfer_ok+0x22>
   10fce:	46c0      	nop			; (mov r8, r8)
   10fd0:	20000b0a 	.word	0x20000b0a
   10fd4:	2000113c 	.word	0x2000113c
   10fd8:	20000b06 	.word	0x20000b06
   10fdc:	20001154 	.word	0x20001154
   10fe0:	00013c51 	.word	0x00013c51
   10fe4:	00010b0d 	.word	0x00010b0d
   10fe8:	00010b91 	.word	0x00010b91
   10fec:	20000b08 	.word	0x20000b08
   10ff0:	00011acd 	.word	0x00011acd
   10ff4:	20000fd4 	.word	0x20000fd4
   10ff8:	00010ee9 	.word	0x00010ee9

00010ffc <udd_is_high_speed>:
   10ffc:	2000      	movs	r0, #0
   10ffe:	4770      	bx	lr

00011000 <udd_get_frame_number>:
{
   11000:	4b02      	ldr	r3, [pc, #8]	; (1100c <udd_get_frame_number+0xc>)
}
   11002:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
   11004:	8a18      	ldrh	r0, [r3, #16]
   11006:	0480      	lsls	r0, r0, #18
   11008:	0d40      	lsrs	r0, r0, #21
   1100a:	4770      	bx	lr
   1100c:	20000fd4 	.word	0x20000fd4

00011010 <udd_get_micro_frame_number>:
{
   11010:	4b02      	ldr	r3, [pc, #8]	; (1101c <udd_get_micro_frame_number+0xc>)
}
   11012:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
   11014:	8a18      	ldrh	r0, [r3, #16]
   11016:	b280      	uxth	r0, r0
   11018:	4770      	bx	lr
   1101a:	46c0      	nop			; (mov r8, r8)
   1101c:	20000fd4 	.word	0x20000fd4

00011020 <udd_ep_free>:
{
   11020:	b570      	push	{r4, r5, r6, lr}
   11022:	0004      	movs	r4, r0
   11024:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
   11026:	ad01      	add	r5, sp, #4
   11028:	0028      	movs	r0, r5
   1102a:	4b0d      	ldr	r3, [pc, #52]	; (11060 <udd_ep_free+0x40>)
   1102c:	4798      	blx	r3
	udd_ep_abort(ep);
   1102e:	0020      	movs	r0, r4
   11030:	4b0c      	ldr	r3, [pc, #48]	; (11064 <udd_ep_free+0x44>)
   11032:	4798      	blx	r3
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
   11034:	2300      	movs	r3, #0
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   11036:	4e0c      	ldr	r6, [pc, #48]	; (11068 <udd_ep_free+0x48>)
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
   11038:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   1103a:	0029      	movs	r1, r5
   1103c:	0030      	movs	r0, r6
   1103e:	4b0b      	ldr	r3, [pc, #44]	; (1106c <udd_ep_free+0x4c>)
	config_ep.ep_address = ep;
   11040:	702c      	strb	r4, [r5, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
   11042:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   11044:	210f      	movs	r1, #15
   11046:	2200      	movs	r2, #0
   11048:	4021      	ands	r1, r4
   1104a:	0030      	movs	r0, r6
   1104c:	4b08      	ldr	r3, [pc, #32]	; (11070 <udd_ep_free+0x50>)
   1104e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   11050:	2200      	movs	r2, #0
   11052:	0021      	movs	r1, r4
   11054:	0030      	movs	r0, r6
   11056:	4b07      	ldr	r3, [pc, #28]	; (11074 <udd_ep_free+0x54>)
   11058:	4798      	blx	r3
}
   1105a:	b002      	add	sp, #8
   1105c:	bd70      	pop	{r4, r5, r6, pc}
   1105e:	46c0      	nop			; (mov r8, r8)
   11060:	00011799 	.word	0x00011799
   11064:	00010e95 	.word	0x00010e95
   11068:	20000fd4 	.word	0x20000fd4
   1106c:	000117a9 	.word	0x000117a9
   11070:	00011611 	.word	0x00011611
   11074:	000116e9 	.word	0x000116e9

00011078 <udd_ep_alloc>:
{
   11078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1107a:	46c6      	mov	lr, r8
   1107c:	0005      	movs	r5, r0
   1107e:	b500      	push	{lr}
   11080:	b082      	sub	sp, #8
	usb_device_endpoint_get_config_defaults(&config_ep);
   11082:	ac01      	add	r4, sp, #4
   11084:	0020      	movs	r0, r4
   11086:	4b37      	ldr	r3, [pc, #220]	; (11164 <udd_ep_alloc+0xec>)
{
   11088:	000e      	movs	r6, r1
   1108a:	0017      	movs	r7, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
   1108c:	4798      	blx	r3
	config_ep.ep_address = ep;
   1108e:	7025      	strb	r5, [r4, #0]
	if(MaxEndpointSize <= 8) {
   11090:	2f08      	cmp	r7, #8
   11092:	d820      	bhi.n	110d6 <udd_ep_alloc+0x5e>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
   11094:	2300      	movs	r3, #0
   11096:	7063      	strb	r3, [r4, #1]
	if ((ep == 0) || (ep == 0x80)) {
   11098:	237f      	movs	r3, #127	; 0x7f
   1109a:	402b      	ands	r3, r5
   1109c:	d019      	beq.n	110d2 <udd_ep_alloc+0x5a>
   1109e:	230f      	movs	r3, #15
   110a0:	402b      	ands	r3, r5
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   110a2:	09ea      	lsrs	r2, r5, #7
   110a4:	4698      	mov	r8, r3
	ptr_job->ep_size = MaxEndpointSize;
   110a6:	005b      	lsls	r3, r3, #1
   110a8:	189b      	adds	r3, r3, r2
   110aa:	3b02      	subs	r3, #2
   110ac:	009a      	lsls	r2, r3, #2
   110ae:	18d3      	adds	r3, r2, r3
   110b0:	4a2d      	ldr	r2, [pc, #180]	; (11168 <udd_ep_alloc+0xf0>)
   110b2:	009b      	lsls	r3, r3, #2
   110b4:	18d3      	adds	r3, r2, r3
   110b6:	821f      	strh	r7, [r3, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
   110b8:	2303      	movs	r3, #3
   110ba:	401e      	ands	r6, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
   110bc:	2e01      	cmp	r6, #1
   110be:	d030      	beq.n	11122 <udd_ep_alloc+0xaa>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
   110c0:	2e02      	cmp	r6, #2
   110c2:	d015      	beq.n	110f0 <udd_ep_alloc+0x78>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
   110c4:	2e03      	cmp	r6, #3
   110c6:	d012      	beq.n	110ee <udd_ep_alloc+0x76>
		return false;
   110c8:	2000      	movs	r0, #0
}
   110ca:	b002      	add	sp, #8
   110cc:	bc04      	pop	{r2}
   110ce:	4690      	mov	r8, r2
   110d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job->ep_size = MaxEndpointSize;
   110d2:	821b      	strh	r3, [r3, #16]
   110d4:	deff      	udf	#255	; 0xff
	} else if(MaxEndpointSize <= 16) {
   110d6:	2f10      	cmp	r7, #16
   110d8:	d802      	bhi.n	110e0 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
   110da:	2301      	movs	r3, #1
   110dc:	7063      	strb	r3, [r4, #1]
   110de:	e7db      	b.n	11098 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 32) {
   110e0:	2f20      	cmp	r7, #32
   110e2:	d921      	bls.n	11128 <udd_ep_alloc+0xb0>
	} else if(MaxEndpointSize <= 64) {
   110e4:	2f40      	cmp	r7, #64	; 0x40
   110e6:	d822      	bhi.n	1112e <udd_ep_alloc+0xb6>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
   110e8:	2303      	movs	r3, #3
   110ea:	7063      	strb	r3, [r4, #1]
   110ec:	e7d4      	b.n	11098 <udd_ep_alloc+0x20>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
   110ee:	2304      	movs	r3, #4
   110f0:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
   110f2:	4e1e      	ldr	r6, [pc, #120]	; (1116c <udd_ep_alloc+0xf4>)
   110f4:	0021      	movs	r1, r4
   110f6:	0030      	movs	r0, r6
   110f8:	4b1d      	ldr	r3, [pc, #116]	; (11170 <udd_ep_alloc+0xf8>)
   110fa:	4798      	blx	r3
   110fc:	2800      	cmp	r0, #0
   110fe:	d1e3      	bne.n	110c8 <udd_ep_alloc+0x50>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
   11100:	4b1c      	ldr	r3, [pc, #112]	; (11174 <udd_ep_alloc+0xfc>)
   11102:	2200      	movs	r2, #0
   11104:	4641      	mov	r1, r8
   11106:	4c1c      	ldr	r4, [pc, #112]	; (11178 <udd_ep_alloc+0x100>)
   11108:	0030      	movs	r0, r6
   1110a:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
   1110c:	2200      	movs	r2, #0
   1110e:	0029      	movs	r1, r5
   11110:	4c1a      	ldr	r4, [pc, #104]	; (1117c <udd_ep_alloc+0x104>)
   11112:	0030      	movs	r0, r6
   11114:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
   11116:	2201      	movs	r2, #1
   11118:	0029      	movs	r1, r5
   1111a:	0030      	movs	r0, r6
   1111c:	47a0      	blx	r4
	return true;
   1111e:	2001      	movs	r0, #1
   11120:	e7d3      	b.n	110ca <udd_ep_alloc+0x52>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
   11122:	3b01      	subs	r3, #1
   11124:	70e3      	strb	r3, [r4, #3]
   11126:	e7e4      	b.n	110f2 <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
   11128:	2302      	movs	r3, #2
   1112a:	7063      	strb	r3, [r4, #1]
   1112c:	e7b4      	b.n	11098 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 128) {
   1112e:	2f80      	cmp	r7, #128	; 0x80
   11130:	d906      	bls.n	11140 <udd_ep_alloc+0xc8>
	} else if(MaxEndpointSize <= 256) {
   11132:	2380      	movs	r3, #128	; 0x80
   11134:	005b      	lsls	r3, r3, #1
   11136:	429f      	cmp	r7, r3
   11138:	d805      	bhi.n	11146 <udd_ep_alloc+0xce>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
   1113a:	3bfb      	subs	r3, #251	; 0xfb
   1113c:	7063      	strb	r3, [r4, #1]
   1113e:	e7ab      	b.n	11098 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
   11140:	2304      	movs	r3, #4
   11142:	7063      	strb	r3, [r4, #1]
   11144:	e7a8      	b.n	11098 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 512) {
   11146:	2380      	movs	r3, #128	; 0x80
   11148:	009b      	lsls	r3, r3, #2
   1114a:	429f      	cmp	r7, r3
   1114c:	d803      	bhi.n	11156 <udd_ep_alloc+0xde>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
   1114e:	3bfb      	subs	r3, #251	; 0xfb
   11150:	3bff      	subs	r3, #255	; 0xff
   11152:	7063      	strb	r3, [r4, #1]
   11154:	e7a0      	b.n	11098 <udd_ep_alloc+0x20>
	} else if(MaxEndpointSize <= 1023) {
   11156:	4b0a      	ldr	r3, [pc, #40]	; (11180 <udd_ep_alloc+0x108>)
   11158:	429f      	cmp	r7, r3
   1115a:	d8b5      	bhi.n	110c8 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
   1115c:	2307      	movs	r3, #7
   1115e:	7063      	strb	r3, [r4, #1]
   11160:	e79a      	b.n	11098 <udd_ep_alloc+0x20>
   11162:	46c0      	nop			; (mov r8, r8)
   11164:	00011799 	.word	0x00011799
   11168:	20000b0c 	.word	0x20000b0c
   1116c:	20000fd4 	.word	0x20000fd4
   11170:	000117a9 	.word	0x000117a9
   11174:	00010825 	.word	0x00010825
   11178:	000115e9 	.word	0x000115e9
   1117c:	00011639 	.word	0x00011639
   11180:	000003ff 	.word	0x000003ff

00011184 <udd_ep_is_halted>:
{
   11184:	b510      	push	{r4, lr}
   11186:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
   11188:	4b01      	ldr	r3, [pc, #4]	; (11190 <udd_ep_is_halted+0xc>)
   1118a:	4802      	ldr	r0, [pc, #8]	; (11194 <udd_ep_is_halted+0x10>)
   1118c:	4798      	blx	r3
}
   1118e:	bd10      	pop	{r4, pc}
   11190:	000119c5 	.word	0x000119c5
   11194:	20000fd4 	.word	0x20000fd4

00011198 <udd_ep_set_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
   11198:	230f      	movs	r3, #15
{
   1119a:	b510      	push	{r4, lr}
	if (USB_DEVICE_MAX_EP < ep_num) {
   1119c:	4003      	ands	r3, r0
		return false;
   1119e:	2200      	movs	r2, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
   111a0:	2b03      	cmp	r3, #3
   111a2:	d802      	bhi.n	111aa <udd_ep_set_halt+0x12>
   111a4:	4b02      	ldr	r3, [pc, #8]	; (111b0 <udd_ep_set_halt+0x18>)
   111a6:	4798      	blx	r3
   111a8:	0002      	movs	r2, r0
}
   111aa:	0010      	movs	r0, r2
   111ac:	bd10      	pop	{r4, pc}
   111ae:	46c0      	nop			; (mov r8, r8)
   111b0:	00010ee9 	.word	0x00010ee9

000111b4 <udd_ep_clear_halt>:
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   111b4:	230f      	movs	r3, #15
{
   111b6:	b570      	push	{r4, r5, r6, lr}
   111b8:	0001      	movs	r1, r0
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   111ba:	4003      	ands	r3, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
   111bc:	2b03      	cmp	r3, #3
   111be:	d81f      	bhi.n	11200 <udd_ep_clear_halt+0x4c>
	if ((ep == 0) || (ep == 0x80)) {
   111c0:	247f      	movs	r4, #127	; 0x7f
   111c2:	4004      	ands	r4, r0
   111c4:	d104      	bne.n	111d0 <udd_ep_clear_halt+0x1c>
	usb_device_endpoint_clear_halt(&usb_device, ep);
   111c6:	480f      	ldr	r0, [pc, #60]	; (11204 <udd_ep_clear_halt+0x50>)
   111c8:	4b0f      	ldr	r3, [pc, #60]	; (11208 <udd_ep_clear_halt+0x54>)
   111ca:	4798      	blx	r3
	if (ptr_job->busy == true) {
   111cc:	7ca3      	ldrb	r3, [r4, #18]
   111ce:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   111d0:	005c      	lsls	r4, r3, #1
   111d2:	09c3      	lsrs	r3, r0, #7
   111d4:	18e4      	adds	r4, r4, r3
   111d6:	3c02      	subs	r4, #2
	usb_device_endpoint_clear_halt(&usb_device, ep);
   111d8:	4b0b      	ldr	r3, [pc, #44]	; (11208 <udd_ep_clear_halt+0x54>)
   111da:	480a      	ldr	r0, [pc, #40]	; (11204 <udd_ep_clear_halt+0x50>)
   111dc:	4798      	blx	r3
	if (ptr_job->busy == true) {
   111de:	00a3      	lsls	r3, r4, #2
   111e0:	191c      	adds	r4, r3, r4
   111e2:	4a0a      	ldr	r2, [pc, #40]	; (1120c <udd_ep_clear_halt+0x58>)
   111e4:	00a4      	lsls	r4, r4, #2
   111e6:	1913      	adds	r3, r2, r4
   111e8:	7c99      	ldrb	r1, [r3, #18]
	return true;
   111ea:	2501      	movs	r5, #1
	if (ptr_job->busy == true) {
   111ec:	07c9      	lsls	r1, r1, #31
   111ee:	d401      	bmi.n	111f4 <udd_ep_clear_halt+0x40>
}
   111f0:	0028      	movs	r0, r5
   111f2:	bd70      	pop	{r4, r5, r6, pc}
		ptr_job->busy = false;
   111f4:	7c99      	ldrb	r1, [r3, #18]
   111f6:	43a9      	bics	r1, r5
   111f8:	7499      	strb	r1, [r3, #18]
		ptr_job->call_nohalt();
   111fa:	58a3      	ldr	r3, [r4, r2]
   111fc:	4798      	blx	r3
   111fe:	e7f7      	b.n	111f0 <udd_ep_clear_halt+0x3c>
		return false;
   11200:	2500      	movs	r5, #0
   11202:	e7f5      	b.n	111f0 <udd_ep_clear_halt+0x3c>
   11204:	20000fd4 	.word	0x20000fd4
   11208:	00011a05 	.word	0x00011a05
   1120c:	20000b0c 	.word	0x20000b0c

00011210 <udd_ep_run>:
{
   11210:	b5f0      	push	{r4, r5, r6, r7, lr}
   11212:	4645      	mov	r5, r8
   11214:	4657      	mov	r7, sl
   11216:	464e      	mov	r6, r9
   11218:	46de      	mov	lr, fp
	ep_num = ep & USB_EP_ADDR_MASK;
   1121a:	240f      	movs	r4, #15
{
   1121c:	b5e0      	push	{r5, r6, r7, lr}
   1121e:	4688      	mov	r8, r1
   11220:	b087      	sub	sp, #28
   11222:	0005      	movs	r5, r0
   11224:	4691      	mov	r9, r2
   11226:	001f      	movs	r7, r3
	ep_num = ep & USB_EP_ADDR_MASK;
   11228:	4004      	ands	r4, r0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
   1122a:	2c03      	cmp	r4, #3
   1122c:	d907      	bls.n	1123e <udd_ep_run+0x2e>
		return false;
   1122e:	2000      	movs	r0, #0
}
   11230:	b007      	add	sp, #28
   11232:	bc3c      	pop	{r2, r3, r4, r5}
   11234:	4690      	mov	r8, r2
   11236:	4699      	mov	r9, r3
   11238:	46a2      	mov	sl, r4
   1123a:	46ab      	mov	fp, r5
   1123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return usb_device_endpoint_is_halted(&usb_device, ep);
   1123e:	4b76      	ldr	r3, [pc, #472]	; (11418 <udd_ep_run+0x208>)
   11240:	0001      	movs	r1, r0
   11242:	469b      	mov	fp, r3
   11244:	0018      	movs	r0, r3
   11246:	4b75      	ldr	r3, [pc, #468]	; (1141c <udd_ep_run+0x20c>)
   11248:	4798      	blx	r3
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
   1124a:	2800      	cmp	r0, #0
   1124c:	d1ef      	bne.n	1122e <udd_ep_run+0x1e>
	if ((ep == 0) || (ep == 0x80)) {
   1124e:	237f      	movs	r3, #127	; 0x7f
   11250:	402b      	ands	r3, r5
   11252:	d10c      	bne.n	1126e <udd_ep_run+0x5e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   11254:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   11258:	4251      	negs	r1, r2
   1125a:	414a      	adcs	r2, r1
   1125c:	9205      	str	r2, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   1125e:	b672      	cpsid	i
   11260:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   11264:	4a6e      	ldr	r2, [pc, #440]	; (11420 <udd_ep_run+0x210>)
   11266:	7013      	strb	r3, [r2, #0]
	return flags;
   11268:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
   1126a:	7c9b      	ldrb	r3, [r3, #18]
   1126c:	deff      	udf	#255	; 0xff
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
   1126e:	b26b      	sxtb	r3, r5
   11270:	001a      	movs	r2, r3
   11272:	9303      	str	r3, [sp, #12]
   11274:	0fd2      	lsrs	r2, r2, #31
   11276:	0063      	lsls	r3, r4, #1
   11278:	189e      	adds	r6, r3, r2
   1127a:	1eb1      	subs	r1, r6, #2
   1127c:	000e      	movs	r6, r1
   1127e:	9101      	str	r1, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   11280:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   11284:	425a      	negs	r2, r3
   11286:	4153      	adcs	r3, r2
   11288:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   1128a:	b672      	cpsid	i
   1128c:	f3bf 8f5f 	dmb	sy
	if (ptr_job->busy == true) {
   11290:	4964      	ldr	r1, [pc, #400]	; (11424 <udd_ep_run+0x214>)
   11292:	46b4      	mov	ip, r6
   11294:	468a      	mov	sl, r1
   11296:	2101      	movs	r1, #1
	cpu_irq_disable();
   11298:	4a61      	ldr	r2, [pc, #388]	; (11420 <udd_ep_run+0x210>)
   1129a:	7010      	strb	r0, [r2, #0]
	return flags;
   1129c:	9b05      	ldr	r3, [sp, #20]
   1129e:	9300      	str	r3, [sp, #0]
   112a0:	00b3      	lsls	r3, r6, #2
   112a2:	9302      	str	r3, [sp, #8]
   112a4:	4463      	add	r3, ip
   112a6:	009b      	lsls	r3, r3, #2
   112a8:	4453      	add	r3, sl
   112aa:	7c9e      	ldrb	r6, [r3, #18]
   112ac:	4231      	tst	r1, r6
   112ae:	d153      	bne.n	11358 <udd_ep_run+0x148>
	ptr_job->busy = true;
   112b0:	2601      	movs	r6, #1
   112b2:	46b4      	mov	ip, r6
   112b4:	4666      	mov	r6, ip
   112b6:	7c98      	ldrb	r0, [r3, #18]
   112b8:	4330      	orrs	r0, r6
   112ba:	7498      	strb	r0, [r3, #18]
	if (cpu_irq_is_enabled_flags(flags))
   112bc:	9b00      	ldr	r3, [sp, #0]
   112be:	2b00      	cmp	r3, #0
   112c0:	d161      	bne.n	11386 <udd_ep_run+0x176>
	ptr_job->buf = buf;
   112c2:	9a01      	ldr	r2, [sp, #4]
   112c4:	4649      	mov	r1, r9
   112c6:	4694      	mov	ip, r2
   112c8:	4652      	mov	r2, sl
   112ca:	9b02      	ldr	r3, [sp, #8]
	ptr_job->call_trans = callback;
   112cc:	9810      	ldr	r0, [sp, #64]	; 0x40
	ptr_job->buf = buf;
   112ce:	4463      	add	r3, ip
   112d0:	009b      	lsls	r3, r3, #2
   112d2:	18d2      	adds	r2, r2, r3
   112d4:	6051      	str	r1, [r2, #4]
	ptr_job->nb_trans = 0;
   112d6:	2100      	movs	r1, #0
   112d8:	60d1      	str	r1, [r2, #12]
	ptr_job->call_trans = callback;
   112da:	4651      	mov	r1, sl
   112dc:	50c8      	str	r0, [r1, r3]
	ptr_job->b_shortpacket = b_shortpacket;
   112de:	0011      	movs	r1, r2
   112e0:	3110      	adds	r1, #16
   112e2:	788e      	ldrb	r6, [r1, #2]
   112e4:	4643      	mov	r3, r8
   112e6:	46b0      	mov	r8, r6
   112e8:	2602      	movs	r6, #2
   112ea:	2001      	movs	r0, #1
   112ec:	46b4      	mov	ip, r6
   112ee:	4003      	ands	r3, r0
   112f0:	4646      	mov	r6, r8
   112f2:	4660      	mov	r0, ip
   112f4:	4386      	bics	r6, r0
	ptr_job->b_use_out_cache_buffer = false;
   112f6:	2004      	movs	r0, #4
	ptr_job->b_shortpacket = b_shortpacket;
   112f8:	005b      	lsls	r3, r3, #1
	ptr_job->b_use_out_cache_buffer = false;
   112fa:	4333      	orrs	r3, r6
   112fc:	4383      	bics	r3, r0
   112fe:	708b      	strb	r3, [r1, #2]
	if (ep & USB_EP_DIR_IN) {
   11300:	9b03      	ldr	r3, [sp, #12]
	ptr_job->buf_size = buf_size;
   11302:	6097      	str	r7, [r2, #8]
	if (ep & USB_EP_DIR_IN) {
   11304:	2b00      	cmp	r3, #0
   11306:	db43      	blt.n	11390 <udd_ep_run+0x180>
		if (0 != ptr_job->buf_size) {
   11308:	2f00      	cmp	r7, #0
   1130a:	d02e      	beq.n	1136a <udd_ep_run+0x15a>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   1130c:	8a13      	ldrh	r3, [r2, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   1130e:	4d46      	ldr	r5, [pc, #280]	; (11428 <udd_ep_run+0x218>)
			next_trans = ptr_job->buf_size;
   11310:	b2bf      	uxth	r7, r7
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   11312:	4698      	mov	r8, r3
   11314:	0019      	movs	r1, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   11316:	42af      	cmp	r7, r5
   11318:	d96e      	bls.n	113f8 <udd_ep_run+0x1e8>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   1131a:	4b44      	ldr	r3, [pc, #272]	; (1142c <udd_ep_run+0x21c>)
   1131c:	0028      	movs	r0, r5
   1131e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
   11320:	1a6b      	subs	r3, r5, r1
   11322:	b29b      	uxth	r3, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   11324:	464a      	mov	r2, r9
			if (next_trans < ptr_job->ep_size) {
   11326:	4543      	cmp	r3, r8
   11328:	d20e      	bcs.n	11348 <udd_ep_run+0x138>
				ptr_job->b_use_out_cache_buffer = true;
   1132a:	9b02      	ldr	r3, [sp, #8]
   1132c:	2104      	movs	r1, #4
   1132e:	469c      	mov	ip, r3
   11330:	9b01      	ldr	r3, [sp, #4]
   11332:	4463      	add	r3, ip
   11334:	009e      	lsls	r6, r3, #2
   11336:	4456      	add	r6, sl
   11338:	7cb2      	ldrb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
   1133a:	4b3d      	ldr	r3, [pc, #244]	; (11430 <udd_ep_run+0x220>)
				ptr_job->b_use_out_cache_buffer = true;
   1133c:	430a      	orrs	r2, r1
   1133e:	74b2      	strb	r2, [r6, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
   11340:	1e62      	subs	r2, r4, #1
   11342:	0192      	lsls	r2, r2, #6
   11344:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   11346:	4643      	mov	r3, r8
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
   11348:	0021      	movs	r1, r4
   1134a:	4658      	mov	r0, fp
   1134c:	4c39      	ldr	r4, [pc, #228]	; (11434 <udd_ep_run+0x224>)
   1134e:	47a0      	blx	r4
				return (STATUS_OK ==
   11350:	4243      	negs	r3, r0
   11352:	4158      	adcs	r0, r3
   11354:	b2c0      	uxtb	r0, r0
   11356:	e76b      	b.n	11230 <udd_ep_run+0x20>
   11358:	9b00      	ldr	r3, [sp, #0]
   1135a:	2b00      	cmp	r3, #0
   1135c:	d100      	bne.n	11360 <udd_ep_run+0x150>
   1135e:	e766      	b.n	1122e <udd_ep_run+0x1e>
		cpu_irq_enable();
   11360:	7011      	strb	r1, [r2, #0]
   11362:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11366:	b662      	cpsie	i
   11368:	e762      	b.n	11230 <udd_ep_run+0x20>
			ptr_job->busy = false;
   1136a:	2201      	movs	r2, #1
   1136c:	788b      	ldrb	r3, [r1, #2]
   1136e:	4393      	bics	r3, r2
   11370:	708b      	strb	r3, [r1, #2]
			if (NULL != ptr_job->call_trans) {
   11372:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11374:	2b00      	cmp	r3, #0
   11376:	d004      	beq.n	11382 <udd_ep_run+0x172>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
   11378:	002a      	movs	r2, r5
   1137a:	2100      	movs	r1, #0
   1137c:	2000      	movs	r0, #0
   1137e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11380:	4798      	blx	r3
			return true;
   11382:	2001      	movs	r0, #1
   11384:	e754      	b.n	11230 <udd_ep_run+0x20>
   11386:	7011      	strb	r1, [r2, #0]
   11388:	f3bf 8f5f 	dmb	sy
   1138c:	b662      	cpsie	i
   1138e:	e798      	b.n	112c2 <udd_ep_run+0xb2>
		if (0 != ptr_job->buf_size) {
   11390:	2f00      	cmp	r7, #0
   11392:	d037      	beq.n	11404 <udd_ep_run+0x1f4>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   11394:	4d24      	ldr	r5, [pc, #144]	; (11428 <udd_ep_run+0x218>)
			next_trans = ptr_job->buf_size;
   11396:	b2bf      	uxth	r7, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   11398:	42af      	cmp	r7, r5
   1139a:	d905      	bls.n	113a8 <udd_ep_run+0x198>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
   1139c:	8a11      	ldrh	r1, [r2, #16]
   1139e:	0028      	movs	r0, r5
   113a0:	4b22      	ldr	r3, [pc, #136]	; (1142c <udd_ep_run+0x21c>)
   113a2:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
   113a4:	1a6f      	subs	r7, r5, r1
   113a6:	b2bf      	uxth	r7, r7
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
   113a8:	9a01      	ldr	r2, [sp, #4]
   113aa:	9b02      	ldr	r3, [sp, #8]
   113ac:	4694      	mov	ip, r2
   113ae:	4463      	add	r3, ip
   113b0:	009b      	lsls	r3, r3, #2
   113b2:	4453      	add	r3, sl
   113b4:	7c99      	ldrb	r1, [r3, #18]
   113b6:	2200      	movs	r2, #0
   113b8:	0789      	lsls	r1, r1, #30
   113ba:	d507      	bpl.n	113cc <udd_ep_run+0x1bc>
					(0 == (next_trans % ptr_job->ep_size));
   113bc:	8a19      	ldrh	r1, [r3, #16]
   113be:	0038      	movs	r0, r7
   113c0:	4b1d      	ldr	r3, [pc, #116]	; (11438 <udd_ep_run+0x228>)
   113c2:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
   113c4:	b289      	uxth	r1, r1
   113c6:	424a      	negs	r2, r1
   113c8:	414a      	adcs	r2, r1
   113ca:	b2d2      	uxtb	r2, r2
   113cc:	9901      	ldr	r1, [sp, #4]
   113ce:	2002      	movs	r0, #2
   113d0:	468c      	mov	ip, r1
   113d2:	9b02      	ldr	r3, [sp, #8]
   113d4:	0051      	lsls	r1, r2, #1
   113d6:	4463      	add	r3, ip
   113d8:	009b      	lsls	r3, r3, #2
   113da:	4453      	add	r3, sl
   113dc:	7c9a      	ldrb	r2, [r3, #18]
   113de:	4382      	bics	r2, r0
   113e0:	430a      	orrs	r2, r1
   113e2:	749a      	strb	r2, [r3, #18]
   113e4:	003b      	movs	r3, r7
				usb_device_endpoint_write_buffer_job(&usb_device,
   113e6:	0021      	movs	r1, r4
   113e8:	464a      	mov	r2, r9
   113ea:	4658      	mov	r0, fp
   113ec:	4c13      	ldr	r4, [pc, #76]	; (1143c <udd_ep_run+0x22c>)
   113ee:	47a0      	blx	r4
		return (STATUS_OK ==
   113f0:	4243      	negs	r3, r0
   113f2:	4158      	adcs	r0, r3
   113f4:	b2c0      	uxtb	r0, r0
   113f6:	e71b      	b.n	11230 <udd_ep_run+0x20>
				next_trans -= next_trans % ptr_job->ep_size;
   113f8:	0038      	movs	r0, r7
   113fa:	4b0f      	ldr	r3, [pc, #60]	; (11438 <udd_ep_run+0x228>)
   113fc:	4798      	blx	r3
   113fe:	1a7f      	subs	r7, r7, r1
   11400:	b2bb      	uxth	r3, r7
   11402:	e78f      	b.n	11324 <udd_ep_run+0x114>
		} else if (true == ptr_job->b_shortpacket) {
   11404:	7c93      	ldrb	r3, [r2, #18]
   11406:	4662      	mov	r2, ip
   11408:	421a      	tst	r2, r3
   1140a:	d0ae      	beq.n	1136a <udd_ep_run+0x15a>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
   1140c:	788b      	ldrb	r3, [r1, #2]
   1140e:	4393      	bics	r3, r2
   11410:	708b      	strb	r3, [r1, #2]
   11412:	2300      	movs	r3, #0
   11414:	e7e7      	b.n	113e6 <udd_ep_run+0x1d6>
   11416:	46c0      	nop			; (mov r8, r8)
   11418:	20000fd4 	.word	0x20000fd4
   1141c:	000119c5 	.word	0x000119c5
   11420:	200001f9 	.word	0x200001f9
   11424:	20000b0c 	.word	0x20000b0c
   11428:	00001fff 	.word	0x00001fff
   1142c:	00013b89 	.word	0x00013b89
   11430:	20000f14 	.word	0x20000f14
   11434:	00011acd 	.word	0x00011acd
   11438:	000139b5 	.word	0x000139b5
   1143c:	00011a81 	.word	0x00011a81

00011440 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
   11440:	2280      	movs	r2, #128	; 0x80
   11442:	4b02      	ldr	r3, [pc, #8]	; (1144c <udd_set_address+0xc>)
   11444:	4310      	orrs	r0, r2
   11446:	681b      	ldr	r3, [r3, #0]
   11448:	7298      	strb	r0, [r3, #10]
}
   1144a:	4770      	bx	lr
   1144c:	20000fd4 	.word	0x20000fd4

00011450 <udd_getaddress>:
{
   11450:	4b02      	ldr	r3, [pc, #8]	; (1145c <udd_getaddress+0xc>)
}
   11452:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
   11454:	7a98      	ldrb	r0, [r3, #10]
   11456:	0640      	lsls	r0, r0, #25
   11458:	0e40      	lsrs	r0, r0, #25
   1145a:	4770      	bx	lr
   1145c:	20000fd4 	.word	0x20000fd4

00011460 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   11460:	4b01      	ldr	r3, [pc, #4]	; (11468 <udd_set_setup_payload+0x8>)
   11462:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   11464:	8199      	strh	r1, [r3, #12]
}
   11466:	4770      	bx	lr
   11468:	2000113c 	.word	0x2000113c

0001146c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
   1146c:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
   1146e:	2003      	movs	r0, #3
   11470:	4b16      	ldr	r3, [pc, #88]	; (114cc <udd_attach+0x60>)
   11472:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
   11474:	2101      	movs	r1, #1
   11476:	4c16      	ldr	r4, [pc, #88]	; (114d0 <udd_attach+0x64>)
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
   11478:	4e16      	ldr	r6, [pc, #88]	; (114d4 <udd_attach+0x68>)
   1147a:	6822      	ldr	r2, [r4, #0]
   1147c:	0020      	movs	r0, r4
   1147e:	8913      	ldrh	r3, [r2, #8]
   11480:	438b      	bics	r3, r1
   11482:	8113      	strh	r3, [r2, #8]
   11484:	3103      	adds	r1, #3
   11486:	4a14      	ldr	r2, [pc, #80]	; (114d8 <udd_attach+0x6c>)
   11488:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
   1148a:	4a14      	ldr	r2, [pc, #80]	; (114dc <udd_attach+0x70>)
   1148c:	2100      	movs	r1, #0
   1148e:	0020      	movs	r0, r4
   11490:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
   11492:	4a13      	ldr	r2, [pc, #76]	; (114e0 <udd_attach+0x74>)
   11494:	2101      	movs	r1, #1
   11496:	0020      	movs	r0, r4
   11498:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
   1149a:	4a12      	ldr	r2, [pc, #72]	; (114e4 <udd_attach+0x78>)
   1149c:	2102      	movs	r1, #2
   1149e:	0020      	movs	r0, r4
   114a0:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
   114a2:	4d11      	ldr	r5, [pc, #68]	; (114e8 <udd_attach+0x7c>)
   114a4:	2104      	movs	r1, #4
   114a6:	0020      	movs	r0, r4
   114a8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
   114aa:	2100      	movs	r1, #0
   114ac:	0020      	movs	r0, r4
   114ae:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
   114b0:	2101      	movs	r1, #1
   114b2:	0020      	movs	r0, r4
   114b4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
   114b6:	2102      	movs	r1, #2
   114b8:	0020      	movs	r0, r4
   114ba:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
   114bc:	4a0b      	ldr	r2, [pc, #44]	; (114ec <udd_attach+0x80>)
   114be:	2106      	movs	r1, #6
   114c0:	0020      	movs	r0, r4
   114c2:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
   114c4:	2106      	movs	r1, #6
   114c6:	0020      	movs	r0, r4
   114c8:	47a8      	blx	r5
#endif
}
   114ca:	bd70      	pop	{r4, r5, r6, pc}
   114cc:	00010d15 	.word	0x00010d15
   114d0:	20000fd4 	.word	0x20000fd4
   114d4:	00011589 	.word	0x00011589
   114d8:	00010e01 	.word	0x00010e01
   114dc:	00010c35 	.word	0x00010c35
   114e0:	00010a5d 	.word	0x00010a5d
   114e4:	00010e2d 	.word	0x00010e2d
   114e8:	000115ad 	.word	0x000115ad
   114ec:	00010dcd 	.word	0x00010dcd

000114f0 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
   114f0:	b570      	push	{r4, r5, r6, lr}
   114f2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   114f4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
   114f8:	425a      	negs	r2, r3
   114fa:	4153      	adcs	r3, r2
   114fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   114fe:	b672      	cpsid	i
   11500:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   11504:	2600      	movs	r6, #0
   11506:	4c17      	ldr	r4, [pc, #92]	; (11564 <udd_enable+0x74>)
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
   11508:	4668      	mov	r0, sp
   1150a:	7026      	strb	r6, [r4, #0]
   1150c:	4b16      	ldr	r3, [pc, #88]	; (11568 <udd_enable+0x78>)
	return flags;
   1150e:	9d01      	ldr	r5, [sp, #4]
   11510:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
   11512:	466b      	mov	r3, sp
   11514:	709e      	strb	r6, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
   11516:	4e15      	ldr	r6, [pc, #84]	; (1156c <udd_enable+0x7c>)
   11518:	466a      	mov	r2, sp
   1151a:	4915      	ldr	r1, [pc, #84]	; (11570 <udd_enable+0x80>)
   1151c:	4b15      	ldr	r3, [pc, #84]	; (11574 <udd_enable+0x84>)
   1151e:	0030      	movs	r0, r6
   11520:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
   11522:	4b15      	ldr	r3, [pc, #84]	; (11578 <udd_enable+0x88>)
   11524:	0030      	movs	r0, r6
   11526:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
   11528:	4b14      	ldr	r3, [pc, #80]	; (1157c <udd_enable+0x8c>)
   1152a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   1152c:	0692      	lsls	r2, r2, #26
   1152e:	d413      	bmi.n	11558 <udd_enable+0x68>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
   11530:	001a      	movs	r2, r3
   11532:	21d0      	movs	r1, #208	; 0xd0
   11534:	68d3      	ldr	r3, [r2, #12]
   11536:	400b      	ands	r3, r1
   11538:	2bd0      	cmp	r3, #208	; 0xd0
   1153a:	d1fb      	bne.n	11534 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
   1153c:	4b10      	ldr	r3, [pc, #64]	; (11580 <udd_enable+0x90>)
   1153e:	2001      	movs	r0, #1
   11540:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   11542:	4b10      	ldr	r3, [pc, #64]	; (11584 <udd_enable+0x94>)
   11544:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   11546:	2d00      	cmp	r5, #0
   11548:	d004      	beq.n	11554 <udd_enable+0x64>
		cpu_irq_enable();
   1154a:	2301      	movs	r3, #1
   1154c:	7023      	strb	r3, [r4, #0]
   1154e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11552:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
   11554:	b002      	add	sp, #8
   11556:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
   11558:	2110      	movs	r1, #16
   1155a:	68da      	ldr	r2, [r3, #12]
   1155c:	4211      	tst	r1, r2
   1155e:	d0fc      	beq.n	1155a <udd_enable+0x6a>
   11560:	e7ec      	b.n	1153c <udd_enable+0x4c>
   11562:	46c0      	nop			; (mov r8, r8)
   11564:	200001f9 	.word	0x200001f9
   11568:	000120d1 	.word	0x000120d1
   1156c:	20000fd4 	.word	0x20000fd4
   11570:	41005000 	.word	0x41005000
   11574:	000120e1 	.word	0x000120e1
   11578:	00011b45 	.word	0x00011b45
   1157c:	40000800 	.word	0x40000800
   11580:	00010d15 	.word	0x00010d15
   11584:	0001146d 	.word	0x0001146d

00011588 <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
   11588:	000b      	movs	r3, r1
   1158a:	332e      	adds	r3, #46	; 0x2e
   1158c:	009b      	lsls	r3, r3, #2
{
   1158e:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
   11590:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
   11592:	22aa      	movs	r2, #170	; 0xaa
   11594:	4c04      	ldr	r4, [pc, #16]	; (115a8 <usb_device_register_callback+0x20>)
   11596:	0052      	lsls	r2, r2, #1
   11598:	0049      	lsls	r1, r1, #1
   1159a:	5a83      	ldrh	r3, [r0, r2]
   1159c:	5b09      	ldrh	r1, [r1, r4]
   1159e:	430b      	orrs	r3, r1
   115a0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
   115a2:	2000      	movs	r0, #0
   115a4:	bd10      	pop	{r4, pc}
   115a6:	46c0      	nop			; (mov r8, r8)
   115a8:	00016ae8 	.word	0x00016ae8

000115ac <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   115ac:	4b06      	ldr	r3, [pc, #24]	; (115c8 <usb_device_enable_callback+0x1c>)
   115ae:	0049      	lsls	r1, r1, #1
   115b0:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   115b2:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   115b4:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   115b6:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
   115b8:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
   115ba:	5a42      	ldrh	r2, [r0, r1]
   115bc:	431a      	orrs	r2, r3
   115be:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
   115c0:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
   115c2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
   115c4:	8313      	strh	r3, [r2, #24]
}
   115c6:	4770      	bx	lr
   115c8:	00016ae8 	.word	0x00016ae8

000115cc <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
   115cc:	4b05      	ldr	r3, [pc, #20]	; (115e4 <usb_device_disable_callback+0x18>)
   115ce:	0049      	lsls	r1, r1, #1
   115d0:	5aca      	ldrh	r2, [r1, r3]
   115d2:	21ab      	movs	r1, #171	; 0xab
   115d4:	0049      	lsls	r1, r1, #1
   115d6:	5a43      	ldrh	r3, [r0, r1]
   115d8:	4393      	bics	r3, r2
   115da:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
   115dc:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
   115de:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
   115e0:	829a      	strh	r2, [r3, #20]
}
   115e2:	4770      	bx	lr
   115e4:	00016ae8 	.word	0x00016ae8

000115e8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
   115e8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
   115ea:	008c      	lsls	r4, r1, #2
   115ec:	18a4      	adds	r4, r4, r2
   115ee:	3434      	adds	r4, #52	; 0x34
   115f0:	00a4      	lsls	r4, r4, #2
   115f2:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   115f4:	1840      	adds	r0, r0, r1
   115f6:	3059      	adds	r0, #89	; 0x59
   115f8:	4904      	ldr	r1, [pc, #16]	; (1160c <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
   115fa:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   115fc:	30ff      	adds	r0, #255	; 0xff
   115fe:	7803      	ldrb	r3, [r0, #0]
   11600:	5c8a      	ldrb	r2, [r1, r2]
   11602:	4313      	orrs	r3, r2
   11604:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
   11606:	2000      	movs	r0, #0
   11608:	bd10      	pop	{r4, pc}
   1160a:	46c0      	nop			; (mov r8, r8)
   1160c:	00016af8 	.word	0x00016af8

00011610 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
   11610:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
   11612:	2400      	movs	r4, #0
   11614:	008b      	lsls	r3, r1, #2
   11616:	189b      	adds	r3, r3, r2
   11618:	3334      	adds	r3, #52	; 0x34
   1161a:	009b      	lsls	r3, r3, #2
   1161c:	18c3      	adds	r3, r0, r3

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   1161e:	1840      	adds	r0, r0, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
   11620:	605c      	str	r4, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   11622:	3059      	adds	r0, #89	; 0x59
   11624:	4b03      	ldr	r3, [pc, #12]	; (11634 <usb_device_endpoint_unregister_callback+0x24>)
   11626:	30ff      	adds	r0, #255	; 0xff
   11628:	5c9a      	ldrb	r2, [r3, r2]
   1162a:	7803      	ldrb	r3, [r0, #0]
   1162c:	4393      	bics	r3, r2
   1162e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
   11630:	2000      	movs	r0, #0
   11632:	bd10      	pop	{r4, pc}
   11634:	00016af8 	.word	0x00016af8

00011638 <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   11638:	230f      	movs	r3, #15
{
   1163a:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   1163c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
   1163e:	18c4      	adds	r4, r0, r3
   11640:	3461      	adds	r4, #97	; 0x61
   11642:	4e28      	ldr	r6, [pc, #160]	; (116e4 <usb_device_endpoint_enable_callback+0xac>)
   11644:	34ff      	adds	r4, #255	; 0xff
   11646:	7825      	ldrb	r5, [r4, #0]
   11648:	5cb6      	ldrb	r6, [r6, r2]
   1164a:	4335      	orrs	r5, r6
   1164c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
   1164e:	2a00      	cmp	r2, #0
   11650:	d108      	bne.n	11664 <usb_device_endpoint_enable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
   11652:	2b00      	cmp	r3, #0
   11654:	d115      	bne.n	11682 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
   11656:	230a      	movs	r3, #10
   11658:	2103      	movs	r1, #3
   1165a:	6802      	ldr	r2, [r0, #0]
   1165c:	33ff      	adds	r3, #255	; 0xff
   1165e:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
		}
	}

	return STATUS_OK;
}
   11660:	2000      	movs	r0, #0
   11662:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
   11664:	2a01      	cmp	r2, #1
   11666:	d117      	bne.n	11698 <usb_device_endpoint_enable_callback+0x60>
		if (ep_num == 0) { // control endpoint
   11668:	2b00      	cmp	r3, #0
   1166a:	d01f      	beq.n	116ac <usb_device_endpoint_enable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   1166c:	6802      	ldr	r2, [r0, #0]
   1166e:	015b      	lsls	r3, r3, #5
   11670:	18d3      	adds	r3, r2, r3
   11672:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
   11674:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   11676:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   11678:	2900      	cmp	r1, #0
   1167a:	db20      	blt.n	116be <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
   1167c:	2204      	movs	r2, #4
   1167e:	701a      	strb	r2, [r3, #0]
   11680:	e7ee      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   11682:	6802      	ldr	r2, [r0, #0]
   11684:	015b      	lsls	r3, r3, #5
   11686:	18d3      	adds	r3, r2, r3
   11688:	330a      	adds	r3, #10
		} else if (ep & USB_EP_DIR_IN) {
   1168a:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   1168c:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   1168e:	2900      	cmp	r1, #0
   11690:	db12      	blt.n	116b8 <usb_device_endpoint_enable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
   11692:	2201      	movs	r2, #1
   11694:	701a      	strb	r2, [r3, #0]
   11696:	e7e3      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
   11698:	2a02      	cmp	r2, #2
   1169a:	d113      	bne.n	116c4 <usb_device_endpoint_enable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
   1169c:	6802      	ldr	r2, [r0, #0]
   1169e:	015b      	lsls	r3, r3, #5
   116a0:	18d3      	adds	r3, r2, r3
   116a2:	2210      	movs	r2, #16
   116a4:	330a      	adds	r3, #10
   116a6:	33ff      	adds	r3, #255	; 0xff
   116a8:	701a      	strb	r2, [r3, #0]
   116aa:	e7d9      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
   116ac:	230a      	movs	r3, #10
   116ae:	210c      	movs	r1, #12
   116b0:	6802      	ldr	r2, [r0, #0]
   116b2:	33ff      	adds	r3, #255	; 0xff
   116b4:	54d1      	strb	r1, [r2, r3]
   116b6:	e7d3      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
   116b8:	2202      	movs	r2, #2
   116ba:	701a      	strb	r2, [r3, #0]
   116bc:	e7d0      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
   116be:	2208      	movs	r2, #8
   116c0:	701a      	strb	r2, [r3, #0]
   116c2:	e7cd      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
   116c4:	2a03      	cmp	r2, #3
   116c6:	d1cb      	bne.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   116c8:	6802      	ldr	r2, [r0, #0]
   116ca:	015b      	lsls	r3, r3, #5
   116cc:	18d3      	adds	r3, r2, r3
   116ce:	330a      	adds	r3, #10
		if (ep & USB_EP_DIR_IN) {
   116d0:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   116d2:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
   116d4:	2900      	cmp	r1, #0
   116d6:	db02      	blt.n	116de <usb_device_endpoint_enable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
   116d8:	2220      	movs	r2, #32
   116da:	701a      	strb	r2, [r3, #0]
   116dc:	e7c0      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
   116de:	2240      	movs	r2, #64	; 0x40
   116e0:	701a      	strb	r2, [r3, #0]
   116e2:	e7bd      	b.n	11660 <usb_device_endpoint_enable_callback+0x28>
   116e4:	00016af8 	.word	0x00016af8

000116e8 <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   116e8:	230f      	movs	r3, #15
{
   116ea:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   116ec:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
   116ee:	18c4      	adds	r4, r0, r3
   116f0:	4d28      	ldr	r5, [pc, #160]	; (11794 <usb_device_endpoint_disable_callback+0xac>)
   116f2:	3461      	adds	r4, #97	; 0x61
   116f4:	34ff      	adds	r4, #255	; 0xff
   116f6:	5cae      	ldrb	r6, [r5, r2]
   116f8:	7825      	ldrb	r5, [r4, #0]
   116fa:	43b5      	bics	r5, r6
   116fc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
   116fe:	2a00      	cmp	r2, #0
   11700:	d108      	bne.n	11714 <usb_device_endpoint_disable_callback+0x2c>
		if (ep_num == 0) { // control endpoint
   11702:	2b00      	cmp	r3, #0
   11704:	d115      	bne.n	11732 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
   11706:	2103      	movs	r1, #3
   11708:	6802      	ldr	r2, [r0, #0]
   1170a:	3309      	adds	r3, #9
   1170c:	33ff      	adds	r3, #255	; 0xff
   1170e:	54d1      	strb	r1, [r2, r3]
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
		}
	}

	return STATUS_OK;
}
   11710:	2000      	movs	r0, #0
   11712:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
   11714:	2a01      	cmp	r2, #1
   11716:	d117      	bne.n	11748 <usb_device_endpoint_disable_callback+0x60>
		if (ep_num == 0) { // control endpoint
   11718:	2b00      	cmp	r3, #0
   1171a:	d01f      	beq.n	1175c <usb_device_endpoint_disable_callback+0x74>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   1171c:	6802      	ldr	r2, [r0, #0]
   1171e:	015b      	lsls	r3, r3, #5
   11720:	18d3      	adds	r3, r2, r3
   11722:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
   11724:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   11726:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   11728:	2900      	cmp	r1, #0
   1172a:	db20      	blt.n	1176e <usb_device_endpoint_disable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
   1172c:	2204      	movs	r2, #4
   1172e:	701a      	strb	r2, [r3, #0]
   11730:	e7ee      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   11732:	6802      	ldr	r2, [r0, #0]
   11734:	015b      	lsls	r3, r3, #5
   11736:	18d3      	adds	r3, r2, r3
   11738:	3309      	adds	r3, #9
		} else if (ep & USB_EP_DIR_IN) {
   1173a:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   1173c:	33ff      	adds	r3, #255	; 0xff
		} else if (ep & USB_EP_DIR_IN) {
   1173e:	2900      	cmp	r1, #0
   11740:	db12      	blt.n	11768 <usb_device_endpoint_disable_callback+0x80>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
   11742:	2201      	movs	r2, #1
   11744:	701a      	strb	r2, [r3, #0]
   11746:	e7e3      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
   11748:	2a02      	cmp	r2, #2
   1174a:	d113      	bne.n	11774 <usb_device_endpoint_disable_callback+0x8c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
   1174c:	6802      	ldr	r2, [r0, #0]
   1174e:	015b      	lsls	r3, r3, #5
   11750:	18d3      	adds	r3, r2, r3
   11752:	2210      	movs	r2, #16
   11754:	3309      	adds	r3, #9
   11756:	33ff      	adds	r3, #255	; 0xff
   11758:	701a      	strb	r2, [r3, #0]
   1175a:	e7d9      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
   1175c:	210c      	movs	r1, #12
   1175e:	6802      	ldr	r2, [r0, #0]
   11760:	3309      	adds	r3, #9
   11762:	33ff      	adds	r3, #255	; 0xff
   11764:	54d1      	strb	r1, [r2, r3]
   11766:	e7d3      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
   11768:	2202      	movs	r2, #2
   1176a:	701a      	strb	r2, [r3, #0]
   1176c:	e7d0      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
   1176e:	2208      	movs	r2, #8
   11770:	701a      	strb	r2, [r3, #0]
   11772:	e7cd      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
   11774:	2a03      	cmp	r2, #3
   11776:	d1cb      	bne.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   11778:	6802      	ldr	r2, [r0, #0]
   1177a:	015b      	lsls	r3, r3, #5
   1177c:	18d3      	adds	r3, r2, r3
   1177e:	3309      	adds	r3, #9
		if (ep & USB_EP_DIR_IN) {
   11780:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   11782:	33ff      	adds	r3, #255	; 0xff
		if (ep & USB_EP_DIR_IN) {
   11784:	2900      	cmp	r1, #0
   11786:	db02      	blt.n	1178e <usb_device_endpoint_disable_callback+0xa6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
   11788:	2220      	movs	r2, #32
   1178a:	701a      	strb	r2, [r3, #0]
   1178c:	e7c0      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
   1178e:	2240      	movs	r2, #64	; 0x40
   11790:	701a      	strb	r2, [r3, #0]
   11792:	e7bd      	b.n	11710 <usb_device_endpoint_disable_callback+0x28>
   11794:	00016af8 	.word	0x00016af8

00011798 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
   11798:	2300      	movs	r3, #0
   1179a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
   1179c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
   1179e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
   117a0:	3301      	adds	r3, #1
   117a2:	70c3      	strb	r3, [r0, #3]
}
   117a4:	4770      	bx	lr
   117a6:	46c0      	nop			; (mov r8, r8)

000117a8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
   117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   117aa:	46ce      	mov	lr, r9
   117ac:	4647      	mov	r7, r8
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   117ae:	230f      	movs	r3, #15
{
   117b0:	b580      	push	{r7, lr}
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   117b2:	780c      	ldrb	r4, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
   117b4:	78ca      	ldrb	r2, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
   117b6:	4023      	ands	r3, r4
{
   117b8:	0006      	movs	r6, r0
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
   117ba:	b264      	sxtb	r4, r4
	switch (ep_config->ep_type) {
   117bc:	2a04      	cmp	r2, #4
   117be:	d81a      	bhi.n	117f6 <usb_device_endpoint_set_config+0x4e>
   117c0:	4d71      	ldr	r5, [pc, #452]	; (11988 <usb_device_endpoint_set_config+0x1e0>)
   117c2:	0092      	lsls	r2, r2, #2
   117c4:	58aa      	ldr	r2, [r5, r2]
   117c6:	4697      	mov	pc, r2
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   117c8:	2080      	movs	r0, #128	; 0x80
   117ca:	0040      	lsls	r0, r0, #1
   117cc:	4680      	mov	r8, r0
   117ce:	5c17      	ldrb	r7, [r2, r0]
   117d0:	3890      	subs	r0, #144	; 0x90
   117d2:	4684      	mov	ip, r0
   117d4:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   117d6:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   117d8:	423d      	tst	r5, r7
   117da:	d124      	bne.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
   117dc:	4640      	mov	r0, r8
   117de:	2720      	movs	r7, #32
   117e0:	5c10      	ldrb	r0, [r2, r0]
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
   117e2:	4645      	mov	r5, r8
   117e4:	4338      	orrs	r0, r7
   117e6:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   117e8:	0018      	movs	r0, r3
   117ea:	6832      	ldr	r2, [r6, #0]
   117ec:	3008      	adds	r0, #8
   117ee:	0140      	lsls	r0, r0, #5
   117f0:	1812      	adds	r2, r2, r0
   117f2:	2080      	movs	r0, #128	; 0x80
   117f4:	7110      	strb	r0, [r2, #4]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
   117f6:	2007      	movs	r0, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
   117f8:	0fe2      	lsrs	r2, r4, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
   117fa:	005b      	lsls	r3, r3, #1
   117fc:	189b      	adds	r3, r3, r2
   117fe:	4a63      	ldr	r2, [pc, #396]	; (1198c <usb_device_endpoint_set_config+0x1e4>)
   11800:	784c      	ldrb	r4, [r1, #1]
   11802:	011b      	lsls	r3, r3, #4
   11804:	18d3      	adds	r3, r2, r3
   11806:	685a      	ldr	r2, [r3, #4]
   11808:	4020      	ands	r0, r4
   1180a:	4c61      	ldr	r4, [pc, #388]	; (11990 <usb_device_endpoint_set_config+0x1e8>)
   1180c:	0700      	lsls	r0, r0, #28
   1180e:	4022      	ands	r2, r4
   11810:	4302      	orrs	r2, r0
   11812:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
   11814:	788a      	ldrb	r2, [r1, #2]
   11816:	2a00      	cmp	r2, #0
   11818:	d000      	beq.n	1181c <usb_device_endpoint_set_config+0x74>
   1181a:	e084      	b.n	11926 <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
   1181c:	2000      	movs	r0, #0
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   1181e:	685a      	ldr	r2, [r3, #4]
   11820:	0052      	lsls	r2, r2, #1
   11822:	0852      	lsrs	r2, r2, #1
   11824:	605a      	str	r2, [r3, #4]
}
   11826:	bc0c      	pop	{r2, r3}
   11828:	4690      	mov	r8, r2
   1182a:	4699      	mov	r9, r3
   1182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1182e:	6800      	ldr	r0, [r0, #0]
   11830:	015a      	lsls	r2, r3, #5
   11832:	4684      	mov	ip, r0
   11834:	4462      	add	r2, ip
			if (ep_bank) {
   11836:	2c00      	cmp	r4, #0
   11838:	da00      	bge.n	1183c <usb_device_endpoint_set_config+0x94>
   1183a:	e08a      	b.n	11952 <usb_device_endpoint_set_config+0x1aa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   1183c:	2580      	movs	r5, #128	; 0x80
   1183e:	006d      	lsls	r5, r5, #1
   11840:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   11842:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   11844:	077f      	lsls	r7, r7, #29
   11846:	d1ee      	bne.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
   11848:	5d50      	ldrb	r0, [r2, r5]
   1184a:	2703      	movs	r7, #3
   1184c:	e061      	b.n	11912 <usb_device_endpoint_set_config+0x16a>
   1184e:	6800      	ldr	r0, [r0, #0]
   11850:	015a      	lsls	r2, r3, #5
   11852:	4684      	mov	ip, r0
   11854:	4462      	add	r2, ip
			if (ep_bank) {
   11856:	2c00      	cmp	r4, #0
   11858:	db6c      	blt.n	11934 <usb_device_endpoint_set_config+0x18c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   1185a:	2580      	movs	r5, #128	; 0x80
   1185c:	006d      	lsls	r5, r5, #1
   1185e:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   11860:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   11862:	077f      	lsls	r7, r7, #29
   11864:	d1df      	bne.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
   11866:	5d50      	ldrb	r0, [r2, r5]
   11868:	2704      	movs	r7, #4
   1186a:	e052      	b.n	11912 <usb_device_endpoint_set_config+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
   1186c:	2100      	movs	r1, #0
   1186e:	6802      	ldr	r2, [r0, #0]
   11870:	3308      	adds	r3, #8
   11872:	015b      	lsls	r3, r3, #5
   11874:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
   11876:	2000      	movs	r0, #0
   11878:	e7d5      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
   1187a:	6802      	ldr	r2, [r0, #0]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   1187c:	2080      	movs	r0, #128	; 0x80
   1187e:	015d      	lsls	r5, r3, #5
   11880:	0040      	lsls	r0, r0, #1
   11882:	1952      	adds	r2, r2, r5
   11884:	5c17      	ldrb	r7, [r2, r0]
   11886:	4681      	mov	r9, r0
				return STATUS_ERR_DENIED;
   11888:	38e4      	subs	r0, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   1188a:	077f      	lsls	r7, r7, #29
   1188c:	d1cb      	bne.n	11826 <usb_device_endpoint_set_config+0x7e>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
   1188e:	464c      	mov	r4, r9
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   11890:	2770      	movs	r7, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
   11892:	5d14      	ldrb	r4, [r2, r4]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
   11894:	4227      	tst	r7, r4
   11896:	d1c6      	bne.n	11826 <usb_device_endpoint_set_config+0x7e>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
   11898:	464c      	mov	r4, r9
   1189a:	380b      	subs	r0, #11
   1189c:	5510      	strb	r0, [r2, r4]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   1189e:	6832      	ldr	r2, [r6, #0]
   118a0:	3308      	adds	r3, #8
   118a2:	015b      	lsls	r3, r3, #5
   118a4:	18d2      	adds	r2, r2, r3
   118a6:	302f      	adds	r0, #47	; 0x2f
   118a8:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   118aa:	6832      	ldr	r2, [r6, #0]
   118ac:	18d3      	adds	r3, r2, r3
   118ae:	2280      	movs	r2, #128	; 0x80
   118b0:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
   118b2:	788b      	ldrb	r3, [r1, #2]
   118b4:	2b00      	cmp	r3, #0
   118b6:	d05b      	beq.n	11970 <usb_device_endpoint_set_config+0x1c8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   118b8:	2080      	movs	r0, #128	; 0x80
   118ba:	4b34      	ldr	r3, [pc, #208]	; (1198c <usb_device_endpoint_set_config+0x1e4>)
   118bc:	0600      	lsls	r0, r0, #24
   118be:	195a      	adds	r2, r3, r5
   118c0:	6854      	ldr	r4, [r2, #4]
   118c2:	4304      	orrs	r4, r0
   118c4:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   118c6:	6954      	ldr	r4, [r2, #20]
   118c8:	4320      	orrs	r0, r4
   118ca:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
   118cc:	2207      	movs	r2, #7
   118ce:	784c      	ldrb	r4, [r1, #1]
   118d0:	195d      	adds	r5, r3, r5
   118d2:	6868      	ldr	r0, [r5, #4]
   118d4:	4e2e      	ldr	r6, [pc, #184]	; (11990 <usb_device_endpoint_set_config+0x1e8>)
   118d6:	4014      	ands	r4, r2
   118d8:	0724      	lsls	r4, r4, #28
   118da:	4030      	ands	r0, r6
   118dc:	4320      	orrs	r0, r4
   118de:	6068      	str	r0, [r5, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
   118e0:	7849      	ldrb	r1, [r1, #1]
   118e2:	696b      	ldr	r3, [r5, #20]
   118e4:	400a      	ands	r2, r1
   118e6:	0712      	lsls	r2, r2, #28
   118e8:	4033      	ands	r3, r6
   118ea:	431a      	orrs	r2, r3
   118ec:	616a      	str	r2, [r5, #20]
			return STATUS_OK;
   118ee:	2000      	movs	r0, #0
   118f0:	e799      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
   118f2:	6800      	ldr	r0, [r0, #0]
   118f4:	015a      	lsls	r2, r3, #5
   118f6:	4684      	mov	ip, r0
   118f8:	4462      	add	r2, ip
			if (ep_bank) {
   118fa:	2c00      	cmp	r4, #0
   118fc:	da00      	bge.n	11900 <usb_device_endpoint_set_config+0x158>
   118fe:	e763      	b.n	117c8 <usb_device_endpoint_set_config+0x20>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   11900:	2580      	movs	r5, #128	; 0x80
   11902:	006d      	lsls	r5, r5, #1
   11904:	5d57      	ldrb	r7, [r2, r5]
				return STATUS_ERR_DENIED;
   11906:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
   11908:	077f      	lsls	r7, r7, #29
   1190a:	d000      	beq.n	1190e <usb_device_endpoint_set_config+0x166>
   1190c:	e78b      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
   1190e:	2702      	movs	r7, #2
   11910:	5d50      	ldrb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
   11912:	4338      	orrs	r0, r7
   11914:	5550      	strb	r0, [r2, r5]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   11916:	0018      	movs	r0, r3
   11918:	6832      	ldr	r2, [r6, #0]
   1191a:	3008      	adds	r0, #8
   1191c:	0140      	lsls	r0, r0, #5
   1191e:	1812      	adds	r2, r2, r0
   11920:	2040      	movs	r0, #64	; 0x40
   11922:	7150      	strb	r0, [r2, #5]
   11924:	e767      	b.n	117f6 <usb_device_endpoint_set_config+0x4e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
   11926:	2280      	movs	r2, #128	; 0x80
   11928:	6859      	ldr	r1, [r3, #4]
   1192a:	0612      	lsls	r2, r2, #24
   1192c:	430a      	orrs	r2, r1
   1192e:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
   11930:	2000      	movs	r0, #0
   11932:	e778      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   11934:	2080      	movs	r0, #128	; 0x80
   11936:	0040      	lsls	r0, r0, #1
   11938:	4680      	mov	r8, r0
   1193a:	5c17      	ldrb	r7, [r2, r0]
   1193c:	3890      	subs	r0, #144	; 0x90
   1193e:	4684      	mov	ip, r0
   11940:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   11942:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   11944:	423d      	tst	r5, r7
   11946:	d000      	beq.n	1194a <usb_device_endpoint_set_config+0x1a2>
   11948:	e76d      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
   1194a:	4640      	mov	r0, r8
   1194c:	2740      	movs	r7, #64	; 0x40
   1194e:	5c10      	ldrb	r0, [r2, r0]
   11950:	e747      	b.n	117e2 <usb_device_endpoint_set_config+0x3a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   11952:	2080      	movs	r0, #128	; 0x80
   11954:	0040      	lsls	r0, r0, #1
   11956:	4680      	mov	r8, r0
   11958:	5c17      	ldrb	r7, [r2, r0]
   1195a:	3890      	subs	r0, #144	; 0x90
   1195c:	4684      	mov	ip, r0
   1195e:	4665      	mov	r5, ip
				return STATUS_ERR_DENIED;
   11960:	3854      	subs	r0, #84	; 0x54
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
   11962:	423d      	tst	r5, r7
   11964:	d000      	beq.n	11968 <usb_device_endpoint_set_config+0x1c0>
   11966:	e75e      	b.n	11826 <usb_device_endpoint_set_config+0x7e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
   11968:	4640      	mov	r0, r8
   1196a:	2730      	movs	r7, #48	; 0x30
   1196c:	5c10      	ldrb	r0, [r2, r0]
   1196e:	e738      	b.n	117e2 <usb_device_endpoint_set_config+0x3a>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <usb_device_endpoint_set_config+0x1e4>)
   11972:	1958      	adds	r0, r3, r5
   11974:	6842      	ldr	r2, [r0, #4]
   11976:	0052      	lsls	r2, r2, #1
   11978:	0852      	lsrs	r2, r2, #1
   1197a:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
   1197c:	6942      	ldr	r2, [r0, #20]
   1197e:	0052      	lsls	r2, r2, #1
   11980:	0852      	lsrs	r2, r2, #1
   11982:	6142      	str	r2, [r0, #20]
   11984:	e7a2      	b.n	118cc <usb_device_endpoint_set_config+0x124>
   11986:	46c0      	nop			; (mov r8, r8)
   11988:	00016ad4 	.word	0x00016ad4
   1198c:	20001194 	.word	0x20001194
   11990:	8fffffff 	.word	0x8fffffff

00011994 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
   11994:	230f      	movs	r3, #15
   11996:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   11998:	3308      	adds	r3, #8
   1199a:	6802      	ldr	r2, [r0, #0]
   1199c:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
   1199e:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   119a0:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
   119a2:	2900      	cmp	r1, #0
   119a4:	db06      	blt.n	119b4 <usb_device_endpoint_abort_job+0x20>
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
   119a6:	2140      	movs	r1, #64	; 0x40
   119a8:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
   119aa:	6802      	ldr	r2, [r0, #0]
   119ac:	18d3      	adds	r3, r2, r3
   119ae:	2201      	movs	r2, #1
   119b0:	71da      	strb	r2, [r3, #7]
	}
}
   119b2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
   119b4:	2180      	movs	r1, #128	; 0x80
   119b6:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
   119b8:	6802      	ldr	r2, [r0, #0]
   119ba:	18d3      	adds	r3, r2, r3
   119bc:	2202      	movs	r2, #2
   119be:	71da      	strb	r2, [r3, #7]
   119c0:	e7f7      	b.n	119b2 <usb_device_endpoint_abort_job+0x1e>
   119c2:	46c0      	nop			; (mov r8, r8)

000119c4 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   119c4:	230f      	movs	r3, #15
   119c6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   119c8:	6802      	ldr	r2, [r0, #0]
   119ca:	3308      	adds	r3, #8
   119cc:	015b      	lsls	r3, r3, #5
   119ce:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
   119d0:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   119d2:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
   119d4:	2900      	cmp	r1, #0
   119d6:	db02      	blt.n	119de <usb_device_endpoint_is_halted+0x1a>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
   119d8:	06c0      	lsls	r0, r0, #27
   119da:	0fc0      	lsrs	r0, r0, #31
	}
}
   119dc:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
   119de:	0680      	lsls	r0, r0, #26
   119e0:	0fc0      	lsrs	r0, r0, #31
   119e2:	e7fb      	b.n	119dc <usb_device_endpoint_is_halted+0x18>

000119e4 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   119e4:	230f      	movs	r3, #15
   119e6:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   119e8:	6802      	ldr	r2, [r0, #0]
   119ea:	3308      	adds	r3, #8
   119ec:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
   119ee:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   119f0:	18d3      	adds	r3, r2, r3
	if (ep & USB_EP_DIR_IN) {
   119f2:	2900      	cmp	r1, #0
   119f4:	db02      	blt.n	119fc <usb_device_endpoint_set_halt+0x18>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
   119f6:	2210      	movs	r2, #16
   119f8:	715a      	strb	r2, [r3, #5]
	}
}
   119fa:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
   119fc:	2220      	movs	r2, #32
   119fe:	715a      	strb	r2, [r3, #5]
   11a00:	e7fb      	b.n	119fa <usb_device_endpoint_set_halt+0x16>
   11a02:	46c0      	nop			; (mov r8, r8)

00011a04 <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
   11a04:	230f      	movs	r3, #15
   11a06:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
   11a08:	b249      	sxtb	r1, r1
{
   11a0a:	b530      	push	{r4, r5, lr}
	if (ep & USB_EP_DIR_IN) {
   11a0c:	2900      	cmp	r1, #0
   11a0e:	db1b      	blt.n	11a48 <usb_device_endpoint_clear_halt+0x44>
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
   11a10:	2483      	movs	r4, #131	; 0x83
   11a12:	6802      	ldr	r2, [r0, #0]
   11a14:	0159      	lsls	r1, r3, #5
   11a16:	0064      	lsls	r4, r4, #1
   11a18:	1852      	adds	r2, r2, r1
   11a1a:	5d15      	ldrb	r5, [r2, r4]
   11a1c:	3cf6      	subs	r4, #246	; 0xf6
   11a1e:	422c      	tst	r4, r5
   11a20:	d011      	beq.n	11a46 <usb_device_endpoint_clear_halt+0x42>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
   11a22:	2582      	movs	r5, #130	; 0x82
   11a24:	006d      	lsls	r5, r5, #1
   11a26:	5554      	strb	r4, [r2, r5]
   11a28:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
   11a2a:	3410      	adds	r4, #16
   11a2c:	1852      	adds	r2, r2, r1
   11a2e:	2108      	movs	r1, #8
   11a30:	31ff      	adds	r1, #255	; 0xff
   11a32:	5c55      	ldrb	r5, [r2, r1]
   11a34:	422c      	tst	r4, r5
   11a36:	d006      	beq.n	11a46 <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
   11a38:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
   11a3a:	6802      	ldr	r2, [r0, #0]
   11a3c:	3308      	adds	r3, #8
   11a3e:	015b      	lsls	r3, r3, #5
   11a40:	18d3      	adds	r3, r2, r3
   11a42:	2201      	movs	r2, #1
   11a44:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
   11a46:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
   11a48:	2483      	movs	r4, #131	; 0x83
   11a4a:	6802      	ldr	r2, [r0, #0]
   11a4c:	0159      	lsls	r1, r3, #5
   11a4e:	0064      	lsls	r4, r4, #1
   11a50:	1852      	adds	r2, r2, r1
   11a52:	5d15      	ldrb	r5, [r2, r4]
   11a54:	3ce6      	subs	r4, #230	; 0xe6
   11a56:	422c      	tst	r4, r5
   11a58:	d0f5      	beq.n	11a46 <usb_device_endpoint_clear_halt+0x42>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
   11a5a:	2582      	movs	r5, #130	; 0x82
   11a5c:	006d      	lsls	r5, r5, #1
   11a5e:	5554      	strb	r4, [r2, r5]
   11a60:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
   11a62:	3420      	adds	r4, #32
   11a64:	1852      	adds	r2, r2, r1
   11a66:	2108      	movs	r1, #8
   11a68:	31ff      	adds	r1, #255	; 0xff
   11a6a:	5c55      	ldrb	r5, [r2, r1]
   11a6c:	422c      	tst	r4, r5
   11a6e:	d0ea      	beq.n	11a46 <usb_device_endpoint_clear_halt+0x42>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
   11a70:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
   11a72:	6802      	ldr	r2, [r0, #0]
   11a74:	3308      	adds	r3, #8
   11a76:	015b      	lsls	r3, r3, #5
   11a78:	18d3      	adds	r3, r2, r3
   11a7a:	2202      	movs	r2, #2
   11a7c:	711a      	strb	r2, [r3, #4]
   11a7e:	e7e2      	b.n	11a46 <usb_device_endpoint_clear_halt+0x42>

00011a80 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
   11a80:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
   11a82:	000d      	movs	r5, r1
   11a84:	6804      	ldr	r4, [r0, #0]
   11a86:	3508      	adds	r5, #8
   11a88:	016d      	lsls	r5, r5, #5
   11a8a:	5d2c      	ldrb	r4, [r5, r4]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
   11a8c:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
   11a8e:	0664      	lsls	r4, r4, #25
   11a90:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
   11a92:	d101      	bne.n	11a98 <usb_device_endpoint_write_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
   11a94:	0030      	movs	r0, r6
   11a96:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
   11a98:	4c0a      	ldr	r4, [pc, #40]	; (11ac4 <usb_device_endpoint_write_buffer_job+0x44>)
   11a9a:	0149      	lsls	r1, r1, #5
   11a9c:	1861      	adds	r1, r4, r1
   11a9e:	000c      	movs	r4, r1
   11aa0:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11aa2:	694a      	ldr	r2, [r1, #20]
   11aa4:	4908      	ldr	r1, [pc, #32]	; (11ac8 <usb_device_endpoint_write_buffer_job+0x48>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
   11aa6:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11aa8:	400a      	ands	r2, r1
   11aaa:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
   11aac:	6962      	ldr	r2, [r4, #20]
   11aae:	0c9b      	lsrs	r3, r3, #18
   11ab0:	0b92      	lsrs	r2, r2, #14
   11ab2:	0392      	lsls	r2, r2, #14
   11ab4:	4313      	orrs	r3, r2
   11ab6:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
   11ab8:	6803      	ldr	r3, [r0, #0]
	return STATUS_OK;
   11aba:	2600      	movs	r6, #0
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
   11abc:	195d      	adds	r5, r3, r5
   11abe:	2380      	movs	r3, #128	; 0x80
   11ac0:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
   11ac2:	e7e7      	b.n	11a94 <usb_device_endpoint_write_buffer_job+0x14>
   11ac4:	20001194 	.word	0x20001194
   11ac8:	f0003fff 	.word	0xf0003fff

00011acc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
   11acc:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
   11ace:	000c      	movs	r4, r1
   11ad0:	6805      	ldr	r5, [r0, #0]
   11ad2:	3408      	adds	r4, #8
   11ad4:	0164      	lsls	r4, r4, #5
   11ad6:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
   11ad8:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
   11ada:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
   11adc:	d101      	bne.n	11ae2 <usb_device_endpoint_read_buffer_job+0x16>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
   11ade:	0030      	movs	r0, r6
   11ae0:	bd70      	pop	{r4, r5, r6, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
   11ae2:	4d0a      	ldr	r5, [pc, #40]	; (11b0c <usb_device_endpoint_read_buffer_job+0x40>)
   11ae4:	0149      	lsls	r1, r1, #5
   11ae6:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
   11ae8:	1869      	adds	r1, r5, r1
   11aea:	684a      	ldr	r2, [r1, #4]
   11aec:	4d08      	ldr	r5, [pc, #32]	; (11b10 <usb_device_endpoint_read_buffer_job+0x44>)
   11aee:	049b      	lsls	r3, r3, #18
   11af0:	091b      	lsrs	r3, r3, #4
   11af2:	402a      	ands	r2, r5
   11af4:	4313      	orrs	r3, r2
   11af6:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   11af8:	684b      	ldr	r3, [r1, #4]
	return STATUS_OK;
   11afa:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   11afc:	0b9b      	lsrs	r3, r3, #14
   11afe:	039b      	lsls	r3, r3, #14
   11b00:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   11b02:	6803      	ldr	r3, [r0, #0]
   11b04:	191c      	adds	r4, r3, r4
   11b06:	2340      	movs	r3, #64	; 0x40
   11b08:	7123      	strb	r3, [r4, #4]
	return STATUS_OK;
   11b0a:	e7e8      	b.n	11ade <usb_device_endpoint_read_buffer_job+0x12>
   11b0c:	20001194 	.word	0x20001194
   11b10:	f0003fff 	.word	0xf0003fff

00011b14 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
   11b14:	4b09      	ldr	r3, [pc, #36]	; (11b3c <usb_device_endpoint_setup_buffer_job+0x28>)
   11b16:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
   11b18:	685a      	ldr	r2, [r3, #4]
   11b1a:	4909      	ldr	r1, [pc, #36]	; (11b40 <usb_device_endpoint_setup_buffer_job+0x2c>)
   11b1c:	4011      	ands	r1, r2
   11b1e:	2280      	movs	r2, #128	; 0x80
   11b20:	0292      	lsls	r2, r2, #10
   11b22:	430a      	orrs	r2, r1
   11b24:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   11b26:	685a      	ldr	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   11b28:	2140      	movs	r1, #64	; 0x40
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   11b2a:	0b92      	lsrs	r2, r2, #14
   11b2c:	0392      	lsls	r2, r2, #14
   11b2e:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   11b30:	2382      	movs	r3, #130	; 0x82
   11b32:	6802      	ldr	r2, [r0, #0]
   11b34:	005b      	lsls	r3, r3, #1

	return STATUS_OK;
}
   11b36:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
   11b38:	54d1      	strb	r1, [r2, r3]
}
   11b3a:	4770      	bx	lr
   11b3c:	20001194 	.word	0x20001194
   11b40:	f0003fff 	.word	0xf0003fff

00011b44 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
   11b44:	2102      	movs	r1, #2
   11b46:	6802      	ldr	r2, [r0, #0]
   11b48:	7813      	ldrb	r3, [r2, #0]
   11b4a:	430b      	orrs	r3, r1
   11b4c:	7013      	strb	r3, [r2, #0]
   11b4e:	6802      	ldr	r2, [r0, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
   11b50:	7893      	ldrb	r3, [r2, #2]
   11b52:	2b02      	cmp	r3, #2
   11b54:	d0fc      	beq.n	11b50 <usb_enable+0xc>
}
   11b56:	4770      	bx	lr

00011b58 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
   11b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b5a:	4645      	mov	r5, r8
   11b5c:	4657      	mov	r7, sl
   11b5e:	46de      	mov	lr, fp
   11b60:	464e      	mov	r6, r9
   11b62:	b5e0      	push	{r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
   11b64:	4bcc      	ldr	r3, [pc, #816]	; (11e98 <USB_Handler+0x340>)
{
   11b66:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
   11b68:	681f      	ldr	r7, [r3, #0]
   11b6a:	4698      	mov	r8, r3
   11b6c:	683d      	ldr	r5, [r7, #0]
   11b6e:	782b      	ldrb	r3, [r5, #0]
   11b70:	09db      	lsrs	r3, r3, #7
   11b72:	d169      	bne.n	11c48 <USB_Handler+0xf0>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
   11b74:	8c2e      	ldrh	r6, [r5, #32]
   11b76:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
   11b78:	2e00      	cmp	r6, #0
   11b7a:	d132      	bne.n	11be2 <USB_Handler+0x8a>
				_usb_instances->device_enabled_callback_mask &
   11b7c:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
   11b7e:	22aa      	movs	r2, #170	; 0xaa
				_usb_instances->device_enabled_callback_mask &
   11b80:	005b      	lsls	r3, r3, #1
		flags_run = flags &
   11b82:	0052      	lsls	r2, r2, #1
   11b84:	5afb      	ldrh	r3, [r7, r3]
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
   11b86:	8bae      	ldrh	r6, [r5, #28]
		flags_run = flags &
   11b88:	5abd      	ldrh	r5, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   11b8a:	3a54      	subs	r2, #84	; 0x54
   11b8c:	4692      	mov	sl, r2
   11b8e:	4ac3      	ldr	r2, [pc, #780]	; (11e9c <USB_Handler+0x344>)
		flags_run = flags &
   11b90:	401d      	ands	r5, r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
   11b92:	b2b6      	uxth	r6, r6
		flags_run = flags &
   11b94:	4035      	ands	r5, r6
   11b96:	2304      	movs	r3, #4
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
   11b98:	2400      	movs	r4, #0
   11b9a:	4691      	mov	r9, r2
   11b9c:	4fc0      	ldr	r7, [pc, #768]	; (11ea0 <USB_Handler+0x348>)
   11b9e:	e001      	b.n	11ba4 <USB_Handler+0x4c>
   11ba0:	0063      	lsls	r3, r4, #1
   11ba2:	5bdb      	ldrh	r3, [r3, r7]
			if (flags & _usb_device_irq_bits[i]) {
   11ba4:	421e      	tst	r6, r3
   11ba6:	d003      	beq.n	11bb0 <USB_Handler+0x58>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
   11ba8:	4642      	mov	r2, r8
   11baa:	6812      	ldr	r2, [r2, #0]
   11bac:	6812      	ldr	r2, [r2, #0]
   11bae:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
   11bb0:	421d      	tst	r5, r3
   11bb2:	d00c      	beq.n	11bce <USB_Handler+0x76>
   11bb4:	4649      	mov	r1, r9
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
   11bb6:	2c06      	cmp	r4, #6
   11bb8:	d100      	bne.n	11bbc <USB_Handler+0x64>
   11bba:	e278      	b.n	120ae <USB_Handler+0x556>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
   11bbc:	0023      	movs	r3, r4
   11bbe:	4642      	mov	r2, r8
   11bc0:	332e      	adds	r3, #46	; 0x2e
   11bc2:	6812      	ldr	r2, [r2, #0]
   11bc4:	009b      	lsls	r3, r3, #2
   11bc6:	589b      	ldr	r3, [r3, r2]
   11bc8:	4642      	mov	r2, r8
   11bca:	6810      	ldr	r0, [r2, #0]
   11bcc:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
   11bce:	3401      	adds	r4, #1
   11bd0:	2c07      	cmp	r4, #7
   11bd2:	d1e5      	bne.n	11ba0 <USB_Handler+0x48>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
   11bd4:	b003      	add	sp, #12
   11bd6:	bc3c      	pop	{r2, r3, r4, r5}
   11bd8:	4690      	mov	r8, r2
   11bda:	4699      	mov	r9, r3
   11bdc:	46a2      	mov	sl, r4
   11bde:	46ab      	mov	fp, r5
   11be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ep_inst & (1 << i)) {
   11be2:	2201      	movs	r2, #1
   11be4:	003c      	movs	r4, r7
   11be6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   11be8:	325f      	adds	r2, #95	; 0x5f
   11bea:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11bec:	3a50      	subs	r2, #80	; 0x50
	if (0 == ep_inst) {
   11bee:	2300      	movs	r3, #0
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11bf0:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   11bf2:	46b9      	mov	r9, r7
   11bf4:	46a8      	mov	r8, r5
   11bf6:	3459      	adds	r4, #89	; 0x59
   11bf8:	34ff      	adds	r4, #255	; 0xff
			if (ep_inst & (1 << i)) {
   11bfa:	0032      	movs	r2, r6
   11bfc:	4661      	mov	r1, ip
   11bfe:	411a      	asrs	r2, r3
   11c00:	b2dd      	uxtb	r5, r3
   11c02:	4211      	tst	r1, r2
   11c04:	d01b      	beq.n	11c3e <USB_Handler+0xe6>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
   11c06:	001f      	movs	r7, r3
   11c08:	3708      	adds	r7, #8
   11c0a:	017a      	lsls	r2, r7, #5
   11c0c:	4442      	add	r2, r8
   11c0e:	1dd1      	adds	r1, r2, #7
   11c10:	79d2      	ldrb	r2, [r2, #7]
   11c12:	9101      	str	r1, [sp, #4]
   11c14:	7a21      	ldrb	r1, [r4, #8]
   11c16:	7820      	ldrb	r0, [r4, #0]
   11c18:	b2d2      	uxtb	r2, r2
   11c1a:	4011      	ands	r1, r2
   11c1c:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   11c1e:	4658      	mov	r0, fp
   11c20:	4210      	tst	r0, r2
   11c22:	d000      	beq.n	11c26 <USB_Handler+0xce>
   11c24:	e16c      	b.n	11f00 <USB_Handler+0x3a8>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
   11c26:	4650      	mov	r0, sl
   11c28:	4210      	tst	r0, r2
   11c2a:	d000      	beq.n	11c2e <USB_Handler+0xd6>
   11c2c:	e188      	b.n	11f40 <USB_Handler+0x3e8>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
   11c2e:	2003      	movs	r0, #3
   11c30:	4210      	tst	r0, r2
   11c32:	d000      	beq.n	11c36 <USB_Handler+0xde>
   11c34:	e19d      	b.n	11f72 <USB_Handler+0x41a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   11c36:	200c      	movs	r0, #12
   11c38:	4210      	tst	r0, r2
   11c3a:	d000      	beq.n	11c3e <USB_Handler+0xe6>
   11c3c:	e1bd      	b.n	11fba <USB_Handler+0x462>
   11c3e:	3301      	adds	r3, #1
   11c40:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
   11c42:	2b08      	cmp	r3, #8
   11c44:	d1d9      	bne.n	11bfa <USB_Handler+0xa2>
   11c46:	e7c5      	b.n	11bd4 <USB_Handler+0x7c>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   11c48:	8c2b      	ldrh	r3, [r5, #32]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d171      	bne.n	11d32 <USB_Handler+0x1da>
		if (flags & USB_HOST_INTFLAG_HSOF) {
   11c4e:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
   11c50:	8bac      	ldrh	r4, [r5, #28]
   11c52:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
   11c54:	4223      	tst	r3, r4
   11c56:	d005      	beq.n	11c64 <USB_Handler+0x10c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
   11c58:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
   11c5a:	23a5      	movs	r3, #165	; 0xa5
   11c5c:	5cfb      	ldrb	r3, [r7, r3]
   11c5e:	07db      	lsls	r3, r3, #31
   11c60:	d500      	bpl.n	11c64 <USB_Handler+0x10c>
   11c62:	e12c      	b.n	11ebe <USB_Handler+0x366>
		if (flags & USB_HOST_INTFLAG_RST) {
   11c64:	2308      	movs	r3, #8
   11c66:	4223      	tst	r3, r4
   11c68:	d00b      	beq.n	11c82 <USB_Handler+0x12a>
			host_pipe_job_busy_status = 0;
   11c6a:	2100      	movs	r1, #0
   11c6c:	4a8d      	ldr	r2, [pc, #564]	; (11ea4 <USB_Handler+0x34c>)
   11c6e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
   11c70:	4642      	mov	r2, r8
   11c72:	6810      	ldr	r0, [r2, #0]
   11c74:	6802      	ldr	r2, [r0, #0]
   11c76:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
   11c78:	339d      	adds	r3, #157	; 0x9d
   11c7a:	5cc3      	ldrb	r3, [r0, r3]
   11c7c:	079b      	lsls	r3, r3, #30
   11c7e:	d500      	bpl.n	11c82 <USB_Handler+0x12a>
   11c80:	e11a      	b.n	11eb8 <USB_Handler+0x360>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
   11c82:	2340      	movs	r3, #64	; 0x40
   11c84:	4223      	tst	r3, r4
   11c86:	d008      	beq.n	11c9a <USB_Handler+0x142>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
   11c88:	4642      	mov	r2, r8
   11c8a:	6810      	ldr	r0, [r2, #0]
   11c8c:	6802      	ldr	r2, [r0, #0]
   11c8e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
   11c90:	3365      	adds	r3, #101	; 0x65
   11c92:	5cc3      	ldrb	r3, [r0, r3]
   11c94:	06db      	lsls	r3, r3, #27
   11c96:	d500      	bpl.n	11c9a <USB_Handler+0x142>
   11c98:	e0fb      	b.n	11e92 <USB_Handler+0x33a>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
   11c9a:	2320      	movs	r3, #32
   11c9c:	4223      	tst	r3, r4
   11c9e:	d008      	beq.n	11cb2 <USB_Handler+0x15a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
   11ca0:	4642      	mov	r2, r8
   11ca2:	6810      	ldr	r0, [r2, #0]
   11ca4:	6802      	ldr	r2, [r0, #0]
   11ca6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
   11ca8:	3385      	adds	r3, #133	; 0x85
   11caa:	5cc3      	ldrb	r3, [r0, r3]
   11cac:	071b      	lsls	r3, r3, #28
   11cae:	d500      	bpl.n	11cb2 <USB_Handler+0x15a>
   11cb0:	e0ec      	b.n	11e8c <USB_Handler+0x334>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
   11cb2:	2310      	movs	r3, #16
   11cb4:	4223      	tst	r3, r4
   11cb6:	d008      	beq.n	11cca <USB_Handler+0x172>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
   11cb8:	4642      	mov	r2, r8
   11cba:	6810      	ldr	r0, [r2, #0]
   11cbc:	6802      	ldr	r2, [r0, #0]
   11cbe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
   11cc0:	3395      	adds	r3, #149	; 0x95
   11cc2:	5cc3      	ldrb	r3, [r0, r3]
   11cc4:	075b      	lsls	r3, r3, #29
   11cc6:	d500      	bpl.n	11cca <USB_Handler+0x172>
   11cc8:	e0dd      	b.n	11e86 <USB_Handler+0x32e>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
   11cca:	2380      	movs	r3, #128	; 0x80
   11ccc:	4223      	tst	r3, r4
   11cce:	d00b      	beq.n	11ce8 <USB_Handler+0x190>
			host_pipe_job_busy_status = 0;
   11cd0:	2100      	movs	r1, #0
   11cd2:	4a74      	ldr	r2, [pc, #464]	; (11ea4 <USB_Handler+0x34c>)
   11cd4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
   11cd6:	4642      	mov	r2, r8
   11cd8:	6810      	ldr	r0, [r2, #0]
   11cda:	6802      	ldr	r2, [r0, #0]
   11cdc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
   11cde:	3325      	adds	r3, #37	; 0x25
   11ce0:	5cc3      	ldrb	r3, [r0, r3]
   11ce2:	069b      	lsls	r3, r3, #26
   11ce4:	d500      	bpl.n	11ce8 <USB_Handler+0x190>
   11ce6:	e0cb      	b.n	11e80 <USB_Handler+0x328>
		if (flags & USB_HOST_INTFLAG_DCONN) {
   11ce8:	2380      	movs	r3, #128	; 0x80
   11cea:	005b      	lsls	r3, r3, #1
   11cec:	421c      	tst	r4, r3
   11cee:	d00b      	beq.n	11d08 <USB_Handler+0x1b0>
			host_pipe_job_busy_status = 0;
   11cf0:	2100      	movs	r1, #0
   11cf2:	4a6c      	ldr	r2, [pc, #432]	; (11ea4 <USB_Handler+0x34c>)
   11cf4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
   11cf6:	4642      	mov	r2, r8
   11cf8:	6810      	ldr	r0, [r2, #0]
   11cfa:	6802      	ldr	r2, [r0, #0]
   11cfc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
   11cfe:	3b5b      	subs	r3, #91	; 0x5b
   11d00:	5cc3      	ldrb	r3, [r0, r3]
   11d02:	065b      	lsls	r3, r3, #25
   11d04:	d500      	bpl.n	11d08 <USB_Handler+0x1b0>
   11d06:	e0b8      	b.n	11e7a <USB_Handler+0x322>
		if (flags & USB_HOST_INTFLAG_DDISC) {
   11d08:	2380      	movs	r3, #128	; 0x80
   11d0a:	009b      	lsls	r3, r3, #2
   11d0c:	421c      	tst	r4, r3
   11d0e:	d100      	bne.n	11d12 <USB_Handler+0x1ba>
   11d10:	e760      	b.n	11bd4 <USB_Handler+0x7c>
			host_pipe_job_busy_status = 0;
   11d12:	2100      	movs	r1, #0
   11d14:	4a63      	ldr	r2, [pc, #396]	; (11ea4 <USB_Handler+0x34c>)
   11d16:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
   11d18:	4642      	mov	r2, r8
   11d1a:	6810      	ldr	r0, [r2, #0]
   11d1c:	6802      	ldr	r2, [r0, #0]
   11d1e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
   11d20:	3b5c      	subs	r3, #92	; 0x5c
   11d22:	3bff      	subs	r3, #255	; 0xff
   11d24:	5cc3      	ldrb	r3, [r0, r3]
   11d26:	2b7f      	cmp	r3, #127	; 0x7f
   11d28:	d800      	bhi.n	11d2c <USB_Handler+0x1d4>
   11d2a:	e753      	b.n	11bd4 <USB_Handler+0x7c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
   11d2c:	6a03      	ldr	r3, [r0, #32]
   11d2e:	4798      	blx	r3
   11d30:	e750      	b.n	11bd4 <USB_Handler+0x7c>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   11d32:	8c28      	ldrh	r0, [r5, #32]
   11d34:	4b5c      	ldr	r3, [pc, #368]	; (11ea8 <USB_Handler+0x350>)
   11d36:	b280      	uxth	r0, r0
   11d38:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   11d3a:	0006      	movs	r6, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
   11d3c:	2203      	movs	r2, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   11d3e:	3608      	adds	r6, #8
   11d40:	0173      	lsls	r3, r6, #5
   11d42:	18ed      	adds	r5, r5, r3
   11d44:	79ed      	ldrb	r5, [r5, #7]
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
   11d46:	0004      	movs	r4, r0
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
   11d48:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
   11d4a:	422a      	tst	r2, r5
   11d4c:	d013      	beq.n	11d76 <USB_Handler+0x21e>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11d4e:	4955      	ldr	r1, [pc, #340]	; (11ea4 <USB_Handler+0x34c>)
   11d50:	468c      	mov	ip, r1
   11d52:	2101      	movs	r1, #1
   11d54:	4689      	mov	r9, r1
   11d56:	4081      	lsls	r1, r0
   11d58:	4660      	mov	r0, ip
   11d5a:	6800      	ldr	r0, [r0, #0]
   11d5c:	4388      	bics	r0, r1
   11d5e:	0001      	movs	r1, r0
   11d60:	4660      	mov	r0, ip
   11d62:	6001      	str	r1, [r0, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11d64:	6839      	ldr	r1, [r7, #0]
   11d66:	18c9      	adds	r1, r1, r3
   11d68:	71ca      	strb	r2, [r1, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11d6a:	4649      	mov	r1, r9
   11d6c:	193a      	adds	r2, r7, r4
   11d6e:	32ae      	adds	r2, #174	; 0xae
   11d70:	7812      	ldrb	r2, [r2, #0]
   11d72:	4211      	tst	r1, r2
   11d74:	d157      	bne.n	11e26 <USB_Handler+0x2ce>
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
   11d76:	2304      	movs	r3, #4
   11d78:	422b      	tst	r3, r5
   11d7a:	d00b      	beq.n	11d94 <USB_Handler+0x23c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11d7c:	2201      	movs	r2, #1
   11d7e:	40a2      	lsls	r2, r4
   11d80:	4948      	ldr	r1, [pc, #288]	; (11ea4 <USB_Handler+0x34c>)
   11d82:	6808      	ldr	r0, [r1, #0]
   11d84:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11d86:	4642      	mov	r2, r8
   11d88:	6812      	ldr	r2, [r2, #0]
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11d8a:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11d8c:	6812      	ldr	r2, [r2, #0]
   11d8e:	0171      	lsls	r1, r6, #5
   11d90:	1852      	adds	r2, r2, r1
   11d92:	71d3      	strb	r3, [r2, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
   11d94:	2308      	movs	r3, #8
   11d96:	422b      	tst	r3, r5
   11d98:	d012      	beq.n	11dc0 <USB_Handler+0x268>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11d9a:	2201      	movs	r2, #1
   11d9c:	40a2      	lsls	r2, r4
   11d9e:	4941      	ldr	r1, [pc, #260]	; (11ea4 <USB_Handler+0x34c>)
   11da0:	6808      	ldr	r0, [r1, #0]
   11da2:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11da4:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11da6:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11da8:	6810      	ldr	r0, [r2, #0]
   11daa:	0172      	lsls	r2, r6, #5
   11dac:	6801      	ldr	r1, [r0, #0]
   11dae:	468c      	mov	ip, r1
   11db0:	4462      	add	r2, ip
   11db2:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11db4:	1903      	adds	r3, r0, r4
   11db6:	33ae      	adds	r3, #174	; 0xae
   11db8:	781b      	ldrb	r3, [r3, #0]
   11dba:	079b      	lsls	r3, r3, #30
   11dbc:	d500      	bpl.n	11dc0 <USB_Handler+0x268>
   11dbe:	e091      	b.n	11ee4 <USB_Handler+0x38c>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
   11dc0:	2310      	movs	r3, #16
   11dc2:	422b      	tst	r3, r5
   11dc4:	d011      	beq.n	11dea <USB_Handler+0x292>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11dc6:	2201      	movs	r2, #1
   11dc8:	40a2      	lsls	r2, r4
   11dca:	4936      	ldr	r1, [pc, #216]	; (11ea4 <USB_Handler+0x34c>)
   11dcc:	6808      	ldr	r0, [r1, #0]
   11dce:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11dd0:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11dd2:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11dd4:	6810      	ldr	r0, [r2, #0]
   11dd6:	0172      	lsls	r2, r6, #5
   11dd8:	6801      	ldr	r1, [r0, #0]
   11dda:	468c      	mov	ip, r1
   11ddc:	4462      	add	r2, ip
   11dde:	71d3      	strb	r3, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11de0:	1903      	adds	r3, r0, r4
   11de2:	33ae      	adds	r3, #174	; 0xae
   11de4:	781b      	ldrb	r3, [r3, #0]
   11de6:	075b      	lsls	r3, r3, #29
   11de8:	d46d      	bmi.n	11ec6 <USB_Handler+0x36e>
		if (flags & USB_HOST_PINTFLAG_STALL) {
   11dea:	2320      	movs	r3, #32
   11dec:	422b      	tst	r3, r5
   11dee:	d100      	bne.n	11df2 <USB_Handler+0x29a>
   11df0:	e6f0      	b.n	11bd4 <USB_Handler+0x7c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11df2:	2201      	movs	r2, #1
   11df4:	40a2      	lsls	r2, r4
   11df6:	492b      	ldr	r1, [pc, #172]	; (11ea4 <USB_Handler+0x34c>)
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11df8:	0176      	lsls	r6, r6, #5
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11dfa:	6808      	ldr	r0, [r1, #0]
   11dfc:	4390      	bics	r0, r2
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11dfe:	4642      	mov	r2, r8
			host_pipe_job_busy_status &= ~(1 << pipe_int);
   11e00:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
   11e02:	6810      	ldr	r0, [r2, #0]
   11e04:	6802      	ldr	r2, [r0, #0]
   11e06:	4694      	mov	ip, r2
   11e08:	4466      	add	r6, ip
   11e0a:	71f3      	strb	r3, [r6, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
   11e0c:	1903      	adds	r3, r0, r4
   11e0e:	33ae      	adds	r3, #174	; 0xae
   11e10:	781b      	ldrb	r3, [r3, #0]
   11e12:	071b      	lsls	r3, r3, #28
   11e14:	d400      	bmi.n	11e18 <USB_Handler+0x2c0>
   11e16:	e6dd      	b.n	11bd4 <USB_Handler+0x7c>
				pipe_callback_para.pipe_num = pipe_int;
   11e18:	4924      	ldr	r1, [pc, #144]	; (11eac <USB_Handler+0x354>)
   11e1a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
   11e1c:	0124      	lsls	r4, r4, #4
   11e1e:	1904      	adds	r4, r0, r4
   11e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11e22:	4798      	blx	r3
   11e24:	e6d6      	b.n	11bd4 <USB_Handler+0x7c>
				pipe_callback_para.pipe_num = pipe_int;
   11e26:	4921      	ldr	r1, [pc, #132]	; (11eac <USB_Handler+0x354>)
   11e28:	700c      	strb	r4, [r1, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
   11e2a:	683a      	ldr	r2, [r7, #0]
   11e2c:	5c9b      	ldrb	r3, [r3, r2]
   11e2e:	079b      	lsls	r3, r3, #30
   11e30:	0f9b      	lsrs	r3, r3, #30
   11e32:	2b01      	cmp	r3, #1
   11e34:	d100      	bne.n	11e38 <USB_Handler+0x2e0>
   11e36:	e0f3      	b.n	12020 <USB_Handler+0x4c8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11e38:	4a1d      	ldr	r2, [pc, #116]	; (11eb0 <USB_Handler+0x358>)
   11e3a:	0163      	lsls	r3, r4, #5
   11e3c:	18d3      	adds	r3, r2, r3
   11e3e:	685a      	ldr	r2, [r3, #4]
   11e40:	0112      	lsls	r2, r2, #4
   11e42:	0c92      	lsrs	r2, r2, #18
   11e44:	804a      	strh	r2, [r1, #2]
   11e46:	b290      	uxth	r0, r2
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   11e48:	685a      	ldr	r2, [r3, #4]
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11e4a:	4682      	mov	sl, r0
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   11e4c:	0492      	lsls	r2, r2, #18
   11e4e:	0c92      	lsrs	r2, r2, #18
   11e50:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11e52:	685a      	ldr	r2, [r3, #4]
   11e54:	4691      	mov	r9, r2
   11e56:	4648      	mov	r0, r9
   11e58:	4a16      	ldr	r2, [pc, #88]	; (11eb4 <USB_Handler+0x35c>)
   11e5a:	4010      	ands	r0, r2
					if (0 == pipe_callback_para.transfered_size) {
   11e5c:	4652      	mov	r2, sl
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
   11e5e:	6058      	str	r0, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
   11e60:	2a00      	cmp	r2, #0
   11e62:	d103      	bne.n	11e6c <USB_Handler+0x314>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   11e64:	685b      	ldr	r3, [r3, #4]
   11e66:	049b      	lsls	r3, r3, #18
   11e68:	0c9b      	lsrs	r3, r3, #18
   11e6a:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
   11e6c:	1ca3      	adds	r3, r4, #2
   11e6e:	011b      	lsls	r3, r3, #4
   11e70:	18fb      	adds	r3, r7, r3
   11e72:	685b      	ldr	r3, [r3, #4]
   11e74:	0038      	movs	r0, r7
   11e76:	4798      	blx	r3
   11e78:	e77d      	b.n	11d76 <USB_Handler+0x21e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
   11e7a:	69c3      	ldr	r3, [r0, #28]
   11e7c:	4798      	blx	r3
   11e7e:	e743      	b.n	11d08 <USB_Handler+0x1b0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
   11e80:	6983      	ldr	r3, [r0, #24]
   11e82:	4798      	blx	r3
   11e84:	e730      	b.n	11ce8 <USB_Handler+0x190>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
   11e86:	68c3      	ldr	r3, [r0, #12]
   11e88:	4798      	blx	r3
   11e8a:	e71e      	b.n	11cca <USB_Handler+0x172>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
   11e8c:	6903      	ldr	r3, [r0, #16]
   11e8e:	4798      	blx	r3
   11e90:	e70f      	b.n	11cb2 <USB_Handler+0x15a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
   11e92:	6943      	ldr	r3, [r0, #20]
   11e94:	4798      	blx	r3
   11e96:	e700      	b.n	11c9a <USB_Handler+0x142>
   11e98:	20000b88 	.word	0x20000b88
   11e9c:	20000b8c 	.word	0x20000b8c
   11ea0:	00016ae8 	.word	0x00016ae8
   11ea4:	20000b98 	.word	0x20000b98
   11ea8:	00013b95 	.word	0x00013b95
   11eac:	20000b9c 	.word	0x20000b9c
   11eb0:	20001194 	.word	0x20001194
   11eb4:	f0003fff 	.word	0xf0003fff
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
   11eb8:	6883      	ldr	r3, [r0, #8]
   11eba:	4798      	blx	r3
   11ebc:	e6e1      	b.n	11c82 <USB_Handler+0x12a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	0038      	movs	r0, r7
   11ec2:	4798      	blx	r3
   11ec4:	e6ce      	b.n	11c64 <USB_Handler+0x10c>
				pipe_callback_para.pipe_num = pipe_int;
   11ec6:	4a7e      	ldr	r2, [pc, #504]	; (120c0 <USB_Handler+0x568>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11ec8:	4b7e      	ldr	r3, [pc, #504]	; (120c4 <USB_Handler+0x56c>)
   11eca:	0161      	lsls	r1, r4, #5
				pipe_callback_para.pipe_num = pipe_int;
   11ecc:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11ece:	185b      	adds	r3, r3, r1
   11ed0:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
   11ed2:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   11ed4:	011b      	lsls	r3, r3, #4
   11ed6:	0c9b      	lsrs	r3, r3, #18
   11ed8:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
   11eda:	0123      	lsls	r3, r4, #4
   11edc:	18c3      	adds	r3, r0, r3
   11ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11ee0:	4798      	blx	r3
   11ee2:	e782      	b.n	11dea <USB_Handler+0x292>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
   11ee4:	4b77      	ldr	r3, [pc, #476]	; (120c4 <USB_Handler+0x56c>)
   11ee6:	0162      	lsls	r2, r4, #5
   11ee8:	189b      	adds	r3, r3, r2
   11eea:	89da      	ldrh	r2, [r3, #14]
   11eec:	231f      	movs	r3, #31
				pipe_callback_para.pipe_num = pipe_int;
   11eee:	4974      	ldr	r1, [pc, #464]	; (120c0 <USB_Handler+0x568>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
   11ef0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
   11ef2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
   11ef4:	0123      	lsls	r3, r4, #4
   11ef6:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
   11ef8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
   11efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11efc:	4798      	blx	r3
   11efe:	e75f      	b.n	11dc0 <USB_Handler+0x268>
   11f00:	002a      	movs	r2, r5
   11f02:	4645      	mov	r5, r8
   11f04:	4690      	mov	r8, r2
   11f06:	015a      	lsls	r2, r3, #5
   11f08:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
   11f0a:	2208      	movs	r2, #8
   11f0c:	2040      	movs	r0, #64	; 0x40
   11f0e:	32ff      	adds	r2, #255	; 0xff
   11f10:	5cac      	ldrb	r4, [r5, r2]
   11f12:	464f      	mov	r7, r9
   11f14:	4220      	tst	r0, r4
   11f16:	d100      	bne.n	11f1a <USB_Handler+0x3c2>
   11f18:	e092      	b.n	12040 <USB_Handler+0x4e8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
   11f1a:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   11f1c:	4640      	mov	r0, r8
   11f1e:	3a88      	subs	r2, #136	; 0x88
   11f20:	3aff      	subs	r2, #255	; 0xff
   11f22:	4302      	orrs	r2, r0
   11f24:	4868      	ldr	r0, [pc, #416]	; (120c8 <USB_Handler+0x570>)
   11f26:	7182      	strb	r2, [r0, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
   11f28:	2260      	movs	r2, #96	; 0x60
   11f2a:	420a      	tst	r2, r1
   11f2c:	d100      	bne.n	11f30 <USB_Handler+0x3d8>
   11f2e:	e651      	b.n	11bd4 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
   11f30:	011b      	lsls	r3, r3, #4
   11f32:	18fb      	adds	r3, r7, r3
   11f34:	33e0      	adds	r3, #224	; 0xe0
   11f36:	681b      	ldr	r3, [r3, #0]
   11f38:	4963      	ldr	r1, [pc, #396]	; (120c8 <USB_Handler+0x570>)
   11f3a:	0038      	movs	r0, r7
   11f3c:	4798      	blx	r3
   11f3e:	e649      	b.n	11bd4 <USB_Handler+0x7c>
   11f40:	464f      	mov	r7, r9
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
   11f42:	9a01      	ldr	r2, [sp, #4]
   11f44:	7010      	strb	r0, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
   11f46:	18fa      	adds	r2, r7, r3
   11f48:	3261      	adds	r2, #97	; 0x61
   11f4a:	32ff      	adds	r2, #255	; 0xff
   11f4c:	7812      	ldrb	r2, [r2, #0]
   11f4e:	4210      	tst	r0, r2
   11f50:	d100      	bne.n	11f54 <USB_Handler+0x3fc>
   11f52:	e63f      	b.n	11bd4 <USB_Handler+0x7c>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11f54:	4a5b      	ldr	r2, [pc, #364]	; (120c4 <USB_Handler+0x56c>)
   11f56:	0159      	lsls	r1, r3, #5
   11f58:	1852      	adds	r2, r2, r1
   11f5a:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11f5c:	011b      	lsls	r3, r3, #4
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11f5e:	495a      	ldr	r1, [pc, #360]	; (120c8 <USB_Handler+0x570>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11f60:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11f62:	0492      	lsls	r2, r2, #18
   11f64:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11f66:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   11f68:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
   11f6a:	681b      	ldr	r3, [r3, #0]
   11f6c:	4648      	mov	r0, r9
   11f6e:	4798      	blx	r3
   11f70:	e630      	b.n	11bd4 <USB_Handler+0x7c>
   11f72:	002a      	movs	r2, r5
   11f74:	4645      	mov	r5, r8
   11f76:	4690      	mov	r8, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11f78:	2208      	movs	r2, #8
   11f7a:	2402      	movs	r4, #2
   11f7c:	0158      	lsls	r0, r3, #5
   11f7e:	182d      	adds	r5, r5, r0
   11f80:	32ff      	adds	r2, #255	; 0xff
   11f82:	5cae      	ldrb	r6, [r5, r2]
   11f84:	464f      	mov	r7, r9
   11f86:	4234      	tst	r4, r6
   11f88:	d064      	beq.n	12054 <USB_Handler+0x4fc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
   11f8a:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   11f8c:	4645      	mov	r5, r8
   11f8e:	3a88      	subs	r2, #136	; 0x88
   11f90:	4c4d      	ldr	r4, [pc, #308]	; (120c8 <USB_Handler+0x570>)
   11f92:	3aff      	subs	r2, #255	; 0xff
   11f94:	432a      	orrs	r2, r5
   11f96:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
   11f98:	4a4a      	ldr	r2, [pc, #296]	; (120c4 <USB_Handler+0x56c>)
   11f9a:	1810      	adds	r0, r2, r0
   11f9c:	6942      	ldr	r2, [r0, #20]
   11f9e:	0492      	lsls	r2, r2, #18
   11fa0:	0c92      	lsrs	r2, r2, #18
   11fa2:	8062      	strh	r2, [r4, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
   11fa4:	078a      	lsls	r2, r1, #30
   11fa6:	d100      	bne.n	11faa <USB_Handler+0x452>
   11fa8:	e614      	b.n	11bd4 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
   11faa:	330d      	adds	r3, #13
   11fac:	011b      	lsls	r3, r3, #4
   11fae:	18fb      	adds	r3, r7, r3
   11fb0:	685b      	ldr	r3, [r3, #4]
   11fb2:	4945      	ldr	r1, [pc, #276]	; (120c8 <USB_Handler+0x570>)
   11fb4:	0038      	movs	r0, r7
   11fb6:	4798      	blx	r3
   11fb8:	e60c      	b.n	11bd4 <USB_Handler+0x7c>
   11fba:	003a      	movs	r2, r7
   11fbc:	0028      	movs	r0, r5
   11fbe:	464f      	mov	r7, r9
   11fc0:	4645      	mov	r5, r8
   11fc2:	4691      	mov	r9, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
   11fc4:	2208      	movs	r2, #8
   11fc6:	2408      	movs	r4, #8
   11fc8:	4680      	mov	r8, r0
   11fca:	0158      	lsls	r0, r3, #5
   11fcc:	182d      	adds	r5, r5, r0
   11fce:	32ff      	adds	r2, #255	; 0xff
   11fd0:	5cae      	ldrb	r6, [r5, r2]
   11fd2:	4234      	tst	r4, r6
   11fd4:	d051      	beq.n	1207a <USB_Handler+0x522>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
   11fd6:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
   11fd8:	4a3a      	ldr	r2, [pc, #232]	; (120c4 <USB_Handler+0x56c>)
   11fda:	1810      	adds	r0, r2, r0
   11fdc:	2202      	movs	r2, #2
   11fde:	7e84      	ldrb	r4, [r0, #26]
   11fe0:	4222      	tst	r2, r4
   11fe2:	d002      	beq.n	11fea <USB_Handler+0x492>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
   11fe4:	7e84      	ldrb	r4, [r0, #26]
   11fe6:	4394      	bics	r4, r2
   11fe8:	7684      	strb	r4, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
   11fea:	2280      	movs	r2, #128	; 0x80
   11fec:	4640      	mov	r0, r8
   11fee:	4252      	negs	r2, r2
   11ff0:	4302      	orrs	r2, r0
   11ff2:	4835      	ldr	r0, [pc, #212]	; (120c8 <USB_Handler+0x570>)
   11ff4:	7182      	strb	r2, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
   11ff6:	6838      	ldr	r0, [r7, #0]
   11ff8:	464a      	mov	r2, r9
   11ffa:	4684      	mov	ip, r0
   11ffc:	0152      	lsls	r2, r2, #5
   11ffe:	4462      	add	r2, ip
   12000:	79d2      	ldrb	r2, [r2, #7]
   12002:	0792      	lsls	r2, r2, #30
   12004:	d500      	bpl.n	12008 <USB_Handler+0x4b0>
   12006:	e5e5      	b.n	11bd4 <USB_Handler+0x7c>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
   12008:	220c      	movs	r2, #12
   1200a:	420a      	tst	r2, r1
   1200c:	d100      	bne.n	12010 <USB_Handler+0x4b8>
   1200e:	e5e1      	b.n	11bd4 <USB_Handler+0x7c>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
   12010:	011b      	lsls	r3, r3, #4
   12012:	18fb      	adds	r3, r7, r3
   12014:	33d8      	adds	r3, #216	; 0xd8
   12016:	681b      	ldr	r3, [r3, #0]
   12018:	492b      	ldr	r1, [pc, #172]	; (120c8 <USB_Handler+0x570>)
   1201a:	0038      	movs	r0, r7
   1201c:	4798      	blx	r3
   1201e:	e5d9      	b.n	11bd4 <USB_Handler+0x7c>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
   12020:	4a28      	ldr	r2, [pc, #160]	; (120c4 <USB_Handler+0x56c>)
   12022:	0163      	lsls	r3, r4, #5
   12024:	18d3      	adds	r3, r2, r3
   12026:	685a      	ldr	r2, [r3, #4]
   12028:	0492      	lsls	r2, r2, #18
   1202a:	0c92      	lsrs	r2, r2, #18
   1202c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
   1202e:	685a      	ldr	r2, [r3, #4]
   12030:	0112      	lsls	r2, r2, #4
   12032:	0c92      	lsrs	r2, r2, #18
   12034:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
   12036:	685a      	ldr	r2, [r3, #4]
   12038:	0b92      	lsrs	r2, r2, #14
   1203a:	0392      	lsls	r2, r2, #14
   1203c:	605a      	str	r2, [r3, #4]
   1203e:	e715      	b.n	11e6c <USB_Handler+0x314>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
   12040:	2020      	movs	r0, #32
   12042:	5cac      	ldrb	r4, [r5, r2]
   12044:	4220      	tst	r0, r4
   12046:	d100      	bne.n	1204a <USB_Handler+0x4f2>
   12048:	e76e      	b.n	11f28 <USB_Handler+0x3d0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
   1204a:	54a8      	strb	r0, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   1204c:	4640      	mov	r0, r8
   1204e:	4a1e      	ldr	r2, [pc, #120]	; (120c8 <USB_Handler+0x570>)
   12050:	7190      	strb	r0, [r2, #6]
   12052:	e769      	b.n	11f28 <USB_Handler+0x3d0>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
   12054:	5cac      	ldrb	r4, [r5, r2]
   12056:	07e4      	lsls	r4, r4, #31
   12058:	d5a4      	bpl.n	11fa4 <USB_Handler+0x44c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
   1205a:	4664      	mov	r4, ip
   1205c:	54ac      	strb	r4, [r5, r2]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   1205e:	4642      	mov	r2, r8
   12060:	4c19      	ldr	r4, [pc, #100]	; (120c8 <USB_Handler+0x570>)
   12062:	71a2      	strb	r2, [r4, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
   12064:	4a17      	ldr	r2, [pc, #92]	; (120c4 <USB_Handler+0x56c>)
   12066:	1810      	adds	r0, r2, r0
   12068:	6842      	ldr	r2, [r0, #4]
   1206a:	0492      	lsls	r2, r2, #18
   1206c:	0c92      	lsrs	r2, r2, #18
   1206e:	8022      	strh	r2, [r4, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
   12070:	6842      	ldr	r2, [r0, #4]
   12072:	0112      	lsls	r2, r2, #4
   12074:	0c92      	lsrs	r2, r2, #18
   12076:	80a2      	strh	r2, [r4, #4]
   12078:	e794      	b.n	11fa4 <USB_Handler+0x44c>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
   1207a:	2404      	movs	r4, #4
   1207c:	5cae      	ldrb	r6, [r5, r2]
   1207e:	4234      	tst	r4, r6
   12080:	d0c2      	beq.n	12008 <USB_Handler+0x4b0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
   12082:	54ac      	strb	r4, [r5, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
   12084:	4a0f      	ldr	r2, [pc, #60]	; (120c4 <USB_Handler+0x56c>)
   12086:	3c02      	subs	r4, #2
   12088:	1810      	adds	r0, r2, r0
   1208a:	7a82      	ldrb	r2, [r0, #10]
   1208c:	4214      	tst	r4, r2
   1208e:	d002      	beq.n	12096 <USB_Handler+0x53e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
   12090:	7a82      	ldrb	r2, [r0, #10]
   12092:	43a2      	bics	r2, r4
   12094:	7282      	strb	r2, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
   12096:	4640      	mov	r0, r8
   12098:	4a0b      	ldr	r2, [pc, #44]	; (120c8 <USB_Handler+0x570>)
   1209a:	7190      	strb	r0, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
   1209c:	6838      	ldr	r0, [r7, #0]
   1209e:	464a      	mov	r2, r9
   120a0:	4684      	mov	ip, r0
   120a2:	0152      	lsls	r2, r2, #5
   120a4:	4462      	add	r2, ip
   120a6:	79d2      	ldrb	r2, [r2, #7]
   120a8:	07d2      	lsls	r2, r2, #31
   120aa:	d5ad      	bpl.n	12008 <USB_Handler+0x4b0>
   120ac:	e592      	b.n	11bd4 <USB_Handler+0x7c>
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   120ae:	4652      	mov	r2, sl
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
   120b0:	4b04      	ldr	r3, [pc, #16]	; (120c4 <USB_Handler+0x56c>)
					device_callback_lpm_wakeup_enable =
   120b2:	4906      	ldr	r1, [pc, #24]	; (120cc <USB_Handler+0x574>)
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
   120b4:	891b      	ldrh	r3, [r3, #8]
   120b6:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
   120b8:	4013      	ands	r3, r2
   120ba:	600b      	str	r3, [r1, #0]
   120bc:	e57e      	b.n	11bbc <USB_Handler+0x64>
   120be:	46c0      	nop			; (mov r8, r8)
   120c0:	20000b9c 	.word	0x20000b9c
   120c4:	20001194 	.word	0x20001194
   120c8:	20000b90 	.word	0x20000b90
   120cc:	20000b8c 	.word	0x20000b8c

000120d0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
   120d0:	2200      	movs	r2, #0
	module_config->run_in_standby = 1;
   120d2:	2301      	movs	r3, #1
	module_config->select_host_mode = 0;
   120d4:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
   120d6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
   120d8:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
   120da:	70c3      	strb	r3, [r0, #3]
}
   120dc:	4770      	bx	lr
   120de:	46c0      	nop			; (mov r8, r8)

000120e0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
   120e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
   120e2:	2300      	movs	r3, #0
{
   120e4:	46ce      	mov	lr, r9
   120e6:	4647      	mov	r7, r8
   120e8:	0004      	movs	r4, r0
   120ea:	0016      	movs	r6, r2
	host_pipe_job_busy_status = 0;
   120ec:	4a71      	ldr	r2, [pc, #452]	; (122b4 <usb_init+0x1d4>)
{
   120ee:	b580      	push	{r7, lr}
	host_pipe_job_busy_status = 0;
   120f0:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
   120f2:	4a71      	ldr	r2, [pc, #452]	; (122b8 <usb_init+0x1d8>)

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   120f4:	6021      	str	r1, [r4, #0]
	_usb_instances = module_inst;
   120f6:	6010      	str	r0, [r2, #0]
			PM->APBBMASK.reg |= mask;
   120f8:	2020      	movs	r0, #32
{
   120fa:	000d      	movs	r5, r1
   120fc:	496f      	ldr	r1, [pc, #444]	; (122bc <usb_init+0x1dc>)
   120fe:	b083      	sub	sp, #12
   12100:	69ca      	ldr	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12102:	af01      	add	r7, sp, #4
   12104:	4302      	orrs	r2, r0
   12106:	61ca      	str	r2, [r1, #28]
   12108:	707b      	strb	r3, [r7, #1]
	config->powersave    = false;
   1210a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
   1210c:	3306      	adds	r3, #6
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1210e:	2201      	movs	r2, #1
   12110:	4699      	mov	r9, r3
   12112:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
   12114:	4b6a      	ldr	r3, [pc, #424]	; (122c0 <usb_init+0x1e0>)
   12116:	0039      	movs	r1, r7
   12118:	3808      	subs	r0, #8
   1211a:	70ba      	strb	r2, [r7, #2]
   1211c:	4698      	mov	r8, r3
   1211e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
   12120:	464b      	mov	r3, r9
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
   12122:	0039      	movs	r1, r7
   12124:	2019      	movs	r0, #25
	pin_config.mux_position = MUX_PA25G_USB_DP;
   12126:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
   12128:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
   1212a:	466a      	mov	r2, sp
   1212c:	78b3      	ldrb	r3, [r6, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
   1212e:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
   12130:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
   12132:	2006      	movs	r0, #6
   12134:	4b63      	ldr	r3, [pc, #396]	; (122c4 <usb_init+0x1e4>)
   12136:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
   12138:	4b63      	ldr	r3, [pc, #396]	; (122c8 <usb_init+0x1e8>)
   1213a:	2006      	movs	r0, #6
   1213c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
   1213e:	2201      	movs	r2, #1
   12140:	782b      	ldrb	r3, [r5, #0]
   12142:	4313      	orrs	r3, r2
   12144:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
   12146:	78ab      	ldrb	r3, [r5, #2]
   12148:	07db      	lsls	r3, r3, #31
   1214a:	d4fc      	bmi.n	12146 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1214c:	2103      	movs	r1, #3
   1214e:	4a5f      	ldr	r2, [pc, #380]	; (122cc <usb_init+0x1ec>)
   12150:	78d3      	ldrb	r3, [r2, #3]
   12152:	438b      	bics	r3, r1
   12154:	2102      	movs	r1, #2
   12156:	430b      	orrs	r3, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   12158:	210c      	movs	r1, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1215a:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1215c:	78d3      	ldrb	r3, [r2, #3]
   1215e:	438b      	bics	r3, r1
   12160:	2108      	movs	r1, #8
   12162:	430b      	orrs	r3, r1
   12164:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
   12166:	4b5a      	ldr	r3, [pc, #360]	; (122d0 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
   12168:	681b      	ldr	r3, [r3, #0]
   1216a:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
   1216c:	43da      	mvns	r2, r3
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
   1216e:	06d2      	lsls	r2, r2, #27
   12170:	d100      	bne.n	12174 <usb_init+0x94>
   12172:	e09c      	b.n	122ae <usb_init+0x1ce>
   12174:	211f      	movs	r1, #31
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
   12176:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
   12178:	4856      	ldr	r0, [pc, #344]	; (122d4 <usb_init+0x1f4>)
   1217a:	400b      	ands	r3, r1
   1217c:	019b      	lsls	r3, r3, #6
   1217e:	4002      	ands	r2, r0
   12180:	4313      	orrs	r3, r2
   12182:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
   12184:	4b52      	ldr	r3, [pc, #328]	; (122d0 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
   1218a:	4019      	ands	r1, r3
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
   1218c:	291f      	cmp	r1, #31
   1218e:	d100      	bne.n	12192 <usb_init+0xb2>
   12190:	e08b      	b.n	122aa <usb_init+0x1ca>
   12192:	211f      	movs	r1, #31
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
   12194:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
   12196:	400b      	ands	r3, r1
   12198:	438a      	bics	r2, r1
   1219a:	4313      	orrs	r3, r2
   1219c:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
   1219e:	4b4c      	ldr	r3, [pc, #304]	; (122d0 <usb_init+0x1f0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
   121a0:	6819      	ldr	r1, [r3, #0]
   121a2:	0dc9      	lsrs	r1, r1, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
   121a4:	43cb      	mvns	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
   121a6:	075b      	lsls	r3, r3, #29
   121a8:	d100      	bne.n	121ac <usb_init+0xcc>
   121aa:	e07c      	b.n	122a6 <usb_init+0x1c6>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
   121ac:	2207      	movs	r2, #7
   121ae:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   121b0:	400a      	ands	r2, r1
   121b2:	4949      	ldr	r1, [pc, #292]	; (122d8 <usb_init+0x1f8>)
   121b4:	0312      	lsls	r2, r2, #12
   121b6:	400b      	ands	r3, r1
   121b8:	4313      	orrs	r3, r2
   121ba:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
   121bc:	237f      	movs	r3, #127	; 0x7f
   121be:	7829      	ldrb	r1, [r5, #0]
   121c0:	7832      	ldrb	r2, [r6, #0]
   121c2:	400b      	ands	r3, r1
   121c4:	01d2      	lsls	r2, r2, #7
   121c6:	4313      	orrs	r3, r2
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   121c8:	2201      	movs	r2, #1
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
   121ca:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   121cc:	7871      	ldrb	r1, [r6, #1]
   121ce:	782b      	ldrb	r3, [r5, #0]
   121d0:	400a      	ands	r2, r1
   121d2:	2104      	movs	r1, #4
   121d4:	0092      	lsls	r2, r2, #2
   121d6:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
   121d8:	4840      	ldr	r0, [pc, #256]	; (122dc <usb_init+0x1fc>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
   121da:	4313      	orrs	r3, r2
   121dc:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
   121de:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
   121e0:	78f3      	ldrb	r3, [r6, #3]
   121e2:	2b01      	cmp	r3, #1
   121e4:	d059      	beq.n	1229a <usb_init+0x1ba>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
   121e6:	2b00      	cmp	r3, #0
   121e8:	d04f      	beq.n	1228a <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
   121ea:	2280      	movs	r2, #128	; 0x80
   121ec:	2100      	movs	r1, #0
   121ee:	0052      	lsls	r2, r2, #1
   121f0:	4b3b      	ldr	r3, [pc, #236]	; (122e0 <usb_init+0x200>)
   121f2:	4798      	blx	r3
   121f4:	0021      	movs	r1, r4
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
   121f6:	2200      	movs	r2, #0
   121f8:	1d23      	adds	r3, r4, #4
   121fa:	3124      	adds	r1, #36	; 0x24
   121fc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
   121fe:	428b      	cmp	r3, r1
   12200:	d1fc      	bne.n	121fc <usb_init+0x11c>
   12202:	0021      	movs	r1, r4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
   12204:	2200      	movs	r2, #0
   12206:	31a4      	adds	r1, #164	; 0xa4
   12208:	601a      	str	r2, [r3, #0]
   1220a:	605a      	str	r2, [r3, #4]
   1220c:	609a      	str	r2, [r3, #8]
   1220e:	60da      	str	r2, [r3, #12]
   12210:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
   12212:	428b      	cmp	r3, r1
   12214:	d1f8      	bne.n	12208 <usb_init+0x128>
		}
	};
	module_inst->host_registered_callback_mask = 0;
   12216:	23a4      	movs	r3, #164	; 0xa4
   12218:	54e2      	strb	r2, [r4, r3]
	module_inst->host_enabled_callback_mask = 0;
   1221a:	3301      	adds	r3, #1
   1221c:	54e2      	strb	r2, [r4, r3]
   1221e:	0021      	movs	r1, r4
   12220:	0023      	movs	r3, r4
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
   12222:	2200      	movs	r2, #0
   12224:	33a6      	adds	r3, #166	; 0xa6
   12226:	31ae      	adds	r1, #174	; 0xae
   12228:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
   1222a:	721a      	strb	r2, [r3, #8]
   1222c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
   1222e:	428b      	cmp	r3, r1
   12230:	d1fa      	bne.n	12228 <usb_init+0x148>
   12232:	0023      	movs	r3, r4
   12234:	0021      	movs	r1, r4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
   12236:	2200      	movs	r2, #0
   12238:	33b8      	adds	r3, #184	; 0xb8
   1223a:	31d4      	adds	r1, #212	; 0xd4
   1223c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
   1223e:	428b      	cmp	r3, r1
   12240:	d1fc      	bne.n	1223c <usb_init+0x15c>
   12242:	0021      	movs	r1, r4
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
   12244:	2200      	movs	r2, #0
   12246:	3155      	adds	r1, #85	; 0x55
   12248:	31ff      	adds	r1, #255	; 0xff
   1224a:	601a      	str	r2, [r3, #0]
   1224c:	605a      	str	r2, [r3, #4]
   1224e:	609a      	str	r2, [r3, #8]
   12250:	60da      	str	r2, [r3, #12]
   12252:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
   12254:	4299      	cmp	r1, r3
   12256:	d1f8      	bne.n	1224a <usb_init+0x16a>
		}
	}
	module_inst->device_registered_callback_mask = 0;
   12258:	23aa      	movs	r3, #170	; 0xaa
   1225a:	005b      	lsls	r3, r3, #1
   1225c:	52e2      	strh	r2, [r4, r3]
	module_inst->device_enabled_callback_mask = 0;
   1225e:	3302      	adds	r3, #2
   12260:	52e2      	strh	r2, [r4, r3]
   12262:	0023      	movs	r3, r4
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
   12264:	2200      	movs	r2, #0
   12266:	3359      	adds	r3, #89	; 0x59
   12268:	3461      	adds	r4, #97	; 0x61
   1226a:	33ff      	adds	r3, #255	; 0xff
   1226c:	34ff      	adds	r4, #255	; 0xff
   1226e:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
   12270:	721a      	strb	r2, [r3, #8]
   12272:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
   12274:	429c      	cmp	r4, r3
   12276:	d1fa      	bne.n	1226e <usb_init+0x18e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12278:	2280      	movs	r2, #128	; 0x80

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
   1227a:	2000      	movs	r0, #0
   1227c:	4b19      	ldr	r3, [pc, #100]	; (122e4 <usb_init+0x204>)
   1227e:	601a      	str	r2, [r3, #0]
   12280:	b003      	add	sp, #12
   12282:	bc0c      	pop	{r2, r3}
   12284:	4690      	mov	r8, r2
   12286:	4699      	mov	r9, r3
   12288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
   1228a:	210c      	movs	r1, #12
   1228c:	6822      	ldr	r2, [r4, #0]
   1228e:	8913      	ldrh	r3, [r2, #8]
   12290:	438b      	bics	r3, r1
   12292:	2104      	movs	r1, #4
   12294:	430b      	orrs	r3, r1
   12296:	8113      	strh	r3, [r2, #8]
   12298:	e7a7      	b.n	121ea <usb_init+0x10a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
   1229a:	6822      	ldr	r2, [r4, #0]
   1229c:	3108      	adds	r1, #8
   1229e:	8913      	ldrh	r3, [r2, #8]
   122a0:	438b      	bics	r3, r1
   122a2:	8113      	strh	r3, [r2, #8]
   122a4:	e7a1      	b.n	121ea <usb_init+0x10a>
	if (pad_trim == 0x7) {
   122a6:	2103      	movs	r1, #3
   122a8:	e780      	b.n	121ac <usb_init+0xcc>
	if (pad_transp == 0x1F) {
   122aa:	231d      	movs	r3, #29
   122ac:	e771      	b.n	12192 <usb_init+0xb2>
	if (pad_transn == 0x1F) {
   122ae:	2305      	movs	r3, #5
   122b0:	e760      	b.n	12174 <usb_init+0x94>
   122b2:	46c0      	nop			; (mov r8, r8)
   122b4:	20000b98 	.word	0x20000b98
   122b8:	20000b88 	.word	0x20000b88
   122bc:	40000400 	.word	0x40000400
   122c0:	000107c5 	.word	0x000107c5
   122c4:	000106c5 	.word	0x000106c5
   122c8:	0001063d 	.word	0x0001063d
   122cc:	41005000 	.word	0x41005000
   122d0:	00806024 	.word	0x00806024
   122d4:	fffff83f 	.word	0xfffff83f
   122d8:	ffff8fff 	.word	0xffff8fff
   122dc:	20001194 	.word	0x20001194
   122e0:	00013c87 	.word	0x00013c87
   122e4:	e000e100 	.word	0xe000e100

000122e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   122e8:	e7fe      	b.n	122e8 <Dummy_Handler>
   122ea:	46c0      	nop			; (mov r8, r8)

000122ec <Reset_Handler>:
        if (pSrc != pDest) {
   122ec:	4828      	ldr	r0, [pc, #160]	; (12390 <Reset_Handler+0xa4>)
   122ee:	4929      	ldr	r1, [pc, #164]	; (12394 <Reset_Handler+0xa8>)
{
   122f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   122f2:	4288      	cmp	r0, r1
   122f4:	d00d      	beq.n	12312 <Reset_Handler+0x26>
                for (; pDest < &_erelocate;) {
   122f6:	4a28      	ldr	r2, [pc, #160]	; (12398 <Reset_Handler+0xac>)
   122f8:	4291      	cmp	r1, r2
   122fa:	d20a      	bcs.n	12312 <Reset_Handler+0x26>
   122fc:	43cb      	mvns	r3, r1
   122fe:	189b      	adds	r3, r3, r2
   12300:	2200      	movs	r2, #0
   12302:	089b      	lsrs	r3, r3, #2
   12304:	3301      	adds	r3, #1
   12306:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
   12308:	5884      	ldr	r4, [r0, r2]
   1230a:	508c      	str	r4, [r1, r2]
   1230c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1230e:	429a      	cmp	r2, r3
   12310:	d1fa      	bne.n	12308 <Reset_Handler+0x1c>
        for (pDest = &_szero; pDest < &_ezero;) {
   12312:	4a22      	ldr	r2, [pc, #136]	; (1239c <Reset_Handler+0xb0>)
   12314:	4922      	ldr	r1, [pc, #136]	; (123a0 <Reset_Handler+0xb4>)
   12316:	428a      	cmp	r2, r1
   12318:	d209      	bcs.n	1232e <Reset_Handler+0x42>
   1231a:	43d3      	mvns	r3, r2
   1231c:	185b      	adds	r3, r3, r1
   1231e:	2103      	movs	r1, #3
   12320:	438b      	bics	r3, r1
                *pDest++ = 0;
   12322:	2100      	movs	r1, #0
   12324:	3304      	adds	r3, #4
   12326:	18d3      	adds	r3, r2, r3
   12328:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1232a:	429a      	cmp	r2, r3
   1232c:	d1fc      	bne.n	12328 <Reset_Handler+0x3c>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1232e:	21ff      	movs	r1, #255	; 0xff
   12330:	4b1c      	ldr	r3, [pc, #112]	; (123a4 <Reset_Handler+0xb8>)
   12332:	4a1d      	ldr	r2, [pc, #116]	; (123a8 <Reset_Handler+0xbc>)
   12334:	438b      	bics	r3, r1
   12336:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   12338:	2390      	movs	r3, #144	; 0x90
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1233a:	2503      	movs	r5, #3
   1233c:	2402      	movs	r4, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1233e:	270c      	movs	r7, #12
   12340:	2608      	movs	r6, #8
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   12342:	4a1a      	ldr	r2, [pc, #104]	; (123ac <Reset_Handler+0xc0>)
   12344:	39fd      	subs	r1, #253	; 0xfd
   12346:	005b      	lsls	r3, r3, #1
   12348:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1234a:	4a19      	ldr	r2, [pc, #100]	; (123b0 <Reset_Handler+0xc4>)
   1234c:	78d3      	ldrb	r3, [r2, #3]
   1234e:	43ab      	bics	r3, r5
   12350:	4323      	orrs	r3, r4
   12352:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   12354:	78d3      	ldrb	r3, [r2, #3]
   12356:	43bb      	bics	r3, r7
   12358:	4333      	orrs	r3, r6
   1235a:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1235c:	2230      	movs	r2, #48	; 0x30
   1235e:	4b15      	ldr	r3, [pc, #84]	; (123b4 <Reset_Handler+0xc8>)
   12360:	7b98      	ldrb	r0, [r3, #14]
   12362:	4390      	bics	r0, r2
   12364:	2220      	movs	r2, #32
   12366:	4310      	orrs	r0, r2
   12368:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1236a:	7b99      	ldrb	r1, [r3, #14]
   1236c:	43b9      	bics	r1, r7
   1236e:	4331      	orrs	r1, r6
   12370:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   12372:	2180      	movs	r1, #128	; 0x80
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   12374:	7b9a      	ldrb	r2, [r3, #14]
   12376:	43aa      	bics	r2, r5
   12378:	4322      	orrs	r2, r4
   1237a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1237c:	4a0e      	ldr	r2, [pc, #56]	; (123b8 <Reset_Handler+0xcc>)
   1237e:	6853      	ldr	r3, [r2, #4]
   12380:	430b      	orrs	r3, r1
   12382:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   12384:	4b0d      	ldr	r3, [pc, #52]	; (123bc <Reset_Handler+0xd0>)
   12386:	4798      	blx	r3
        main();
   12388:	4b0d      	ldr	r3, [pc, #52]	; (123c0 <Reset_Handler+0xd4>)
   1238a:	4798      	blx	r3
   1238c:	e7fe      	b.n	1238c <Reset_Handler+0xa0>
   1238e:	46c0      	nop			; (mov r8, r8)
   12390:	00016cd0 	.word	0x00016cd0
   12394:	20000000 	.word	0x20000000
   12398:	200003cc 	.word	0x200003cc
   1239c:	200003d0 	.word	0x200003d0
   123a0:	200012a4 	.word	0x200012a4
   123a4:	00008000 	.word	0x00008000
   123a8:	e000ed00 	.word	0xe000ed00
   123ac:	41007000 	.word	0x41007000
   123b0:	41005000 	.word	0x41005000
   123b4:	41004800 	.word	0x41004800
   123b8:	41004000 	.word	0x41004000
   123bc:	00013be1 	.word	0x00013be1
   123c0:	00009fe9 	.word	0x00009fe9

000123c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   123c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123c6:	46c6      	mov	lr, r8
   123c8:	000c      	movs	r4, r1
   123ca:	b500      	push	{lr}
   123cc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   123ce:	2800      	cmp	r0, #0
   123d0:	d112      	bne.n	123f8 <_read+0x34>
		return -1;
	}

	for (; len > 0; --len) {
   123d2:	2a00      	cmp	r2, #0
   123d4:	dd0d      	ble.n	123f2 <_read+0x2e>
   123d6:	4e0a      	ldr	r6, [pc, #40]	; (12400 <_read+0x3c>)
   123d8:	4d0a      	ldr	r5, [pc, #40]	; (12404 <_read+0x40>)
   123da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   123dc:	0021      	movs	r1, r4
   123de:	6830      	ldr	r0, [r6, #0]
   123e0:	682b      	ldr	r3, [r5, #0]
		ptr++;
   123e2:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   123e4:	4798      	blx	r3
	for (; len > 0; --len) {
   123e6:	42bc      	cmp	r4, r7
   123e8:	d1f8      	bne.n	123dc <_read+0x18>
		nChars++;
	}
	return nChars;
}
   123ea:	4640      	mov	r0, r8
   123ec:	bc04      	pop	{r2}
   123ee:	4690      	mov	r8, r2
   123f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (; len > 0; --len) {
   123f2:	2300      	movs	r3, #0
   123f4:	4698      	mov	r8, r3
   123f6:	e7f8      	b.n	123ea <_read+0x26>
		return -1;
   123f8:	2301      	movs	r3, #1
   123fa:	425b      	negs	r3, r3
   123fc:	4698      	mov	r8, r3
   123fe:	e7f4      	b.n	123ea <_read+0x26>
   12400:	2000129c 	.word	0x2000129c
   12404:	20001294 	.word	0x20001294

00012408 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   12408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1240a:	46c6      	mov	lr, r8
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1240c:	3801      	subs	r0, #1
{
   1240e:	b500      	push	{lr}
   12410:	000e      	movs	r6, r1
   12412:	0015      	movs	r5, r2
	if ((file != 1) && (file != 2) && (file!=3)) {
   12414:	2802      	cmp	r0, #2
   12416:	d810      	bhi.n	1243a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   12418:	2400      	movs	r4, #0
   1241a:	2a00      	cmp	r2, #0
   1241c:	d00f      	beq.n	1243e <_write+0x36>
   1241e:	4b0a      	ldr	r3, [pc, #40]	; (12448 <_write+0x40>)
   12420:	4f0a      	ldr	r7, [pc, #40]	; (1244c <_write+0x44>)
   12422:	4698      	mov	r8, r3
   12424:	e002      	b.n	1242c <_write+0x24>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
   12426:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   12428:	42a5      	cmp	r5, r4
   1242a:	d008      	beq.n	1243e <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1242c:	4643      	mov	r3, r8
   1242e:	5d31      	ldrb	r1, [r6, r4]
   12430:	6818      	ldr	r0, [r3, #0]
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	4798      	blx	r3
   12436:	2800      	cmp	r0, #0
   12438:	daf5      	bge.n	12426 <_write+0x1e>
		return -1;
   1243a:	2401      	movs	r4, #1
   1243c:	4264      	negs	r4, r4
	}
	return nChars;
}
   1243e:	0020      	movs	r0, r4
   12440:	bc04      	pop	{r2}
   12442:	4690      	mov	r8, r2
   12444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	2000129c 	.word	0x2000129c
   1244c:	20001298 	.word	0x20001298

00012450 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   12450:	4a04      	ldr	r2, [pc, #16]	; (12464 <_sbrk+0x14>)
   12452:	6813      	ldr	r3, [r2, #0]
   12454:	2b00      	cmp	r3, #0
   12456:	d003      	beq.n	12460 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
   12458:	1818      	adds	r0, r3, r0
   1245a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
   1245c:	0018      	movs	r0, r3
   1245e:	4770      	bx	lr
   12460:	4b01      	ldr	r3, [pc, #4]	; (12468 <_sbrk+0x18>)
   12462:	e7f9      	b.n	12458 <_sbrk+0x8>
   12464:	20000ba4 	.word	0x20000ba4
   12468:	200032a8 	.word	0x200032a8

0001246c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1246c:	2001      	movs	r0, #1
   1246e:	4240      	negs	r0, r0
   12470:	4770      	bx	lr
   12472:	46c0      	nop			; (mov r8, r8)

00012474 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   12474:	2380      	movs	r3, #128	; 0x80
   12476:	019b      	lsls	r3, r3, #6

	return 0;
}
   12478:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   1247a:	604b      	str	r3, [r1, #4]
}
   1247c:	4770      	bx	lr
   1247e:	46c0      	nop			; (mov r8, r8)

00012480 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   12480:	2001      	movs	r0, #1
   12482:	4770      	bx	lr

00012484 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   12484:	2000      	movs	r0, #0
   12486:	4770      	bx	lr

00012488 <disk_initialize>:
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   12488:	23a0      	movs	r3, #160	; 0xa0
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1248a:	b530      	push	{r4, r5, lr}
   1248c:	b087      	sub	sp, #28
   1248e:	aa01      	add	r2, sp, #4
   12490:	011b      	lsls	r3, r3, #4
   12492:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   12494:	2300      	movs	r3, #0
	config->year_init_value     = 2000;
   12496:	21fa      	movs	r1, #250	; 0xfa
	config->clear_on_match      = false;
   12498:	7093      	strb	r3, [r2, #2]
	config->continuously_update = false;
   1249a:	70d3      	strb	r3, [r2, #3]
	config_rtc_calendar.alarm[0].time = init_time;
   1249c:	7253      	strb	r3, [r2, #9]
   1249e:	7293      	strb	r3, [r2, #10]
   124a0:	72d3      	strb	r3, [r2, #11]
   124a2:	4b15      	ldr	r3, [pc, #84]	; (124f8 <disk_initialize+0x70>)
	config->year_init_value     = 2000;
   124a4:	00c9      	lsls	r1, r1, #3
{
   124a6:	0005      	movs	r5, r0
   124a8:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.alarm[0].time = init_time;
   124aa:	2004      	movs	r0, #4
	config_rtc_calendar.clock_24h     = true;
   124ac:	2101      	movs	r1, #1
	config_rtc_calendar.alarm[0].time = init_time;
   124ae:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   124b0:	2306      	movs	r3, #6
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   124b2:	4c12      	ldr	r4, [pc, #72]	; (124fc <disk_initialize+0x74>)
	config_rtc_calendar.clock_24h     = true;
   124b4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   124b6:	7210      	strb	r0, [r2, #8]
   124b8:	7311      	strb	r1, [r2, #12]
   124ba:	7351      	strb	r1, [r2, #13]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   124bc:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   124be:	0020      	movs	r0, r4
   124c0:	4b0f      	ldr	r3, [pc, #60]	; (12500 <disk_initialize+0x78>)
   124c2:	4910      	ldr	r1, [pc, #64]	; (12504 <disk_initialize+0x7c>)
   124c4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   124c6:	0020      	movs	r0, r4
   124c8:	4b0f      	ldr	r3, [pc, #60]	; (12508 <disk_initialize+0x80>)
   124ca:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   124cc:	2d01      	cmp	r5, #1
   124ce:	d902      	bls.n	124d6 <disk_initialize+0x4e>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   124d0:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   124d2:	b007      	add	sp, #28
   124d4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   124d6:	0028      	movs	r0, r5
   124d8:	4c0c      	ldr	r4, [pc, #48]	; (1250c <disk_initialize+0x84>)
   124da:	47a0      	blx	r4
		if (CTRL_BUSY != mem_status) {
   124dc:	2803      	cmp	r0, #3
   124de:	d101      	bne.n	124e4 <disk_initialize+0x5c>
		mem_status = mem_test_unit_ready(drv);
   124e0:	0028      	movs	r0, r5
   124e2:	47a0      	blx	r4
	if (mem_status != CTRL_GOOD) {
   124e4:	2800      	cmp	r0, #0
   124e6:	d1f3      	bne.n	124d0 <disk_initialize+0x48>
	if (mem_wr_protect(drv)) {
   124e8:	4b09      	ldr	r3, [pc, #36]	; (12510 <disk_initialize+0x88>)
   124ea:	0028      	movs	r0, r5
   124ec:	4798      	blx	r3
	return 0;
   124ee:	1e43      	subs	r3, r0, #1
   124f0:	4198      	sbcs	r0, r3
   124f2:	0080      	lsls	r0, r0, #2
   124f4:	e7ed      	b.n	124d2 <disk_initialize+0x4a>
   124f6:	46c0      	nop			; (mov r8, r8)
   124f8:	000007de 	.word	0x000007de
   124fc:	20000bc4 	.word	0x20000bc4
   12500:	0000f669 	.word	0x0000f669
   12504:	40001400 	.word	0x40001400
   12508:	0000f50d 	.word	0x0000f50d
   1250c:	0000e3b9 	.word	0x0000e3b9
   12510:	0000e3ed 	.word	0x0000e3ed

00012514 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   12514:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   12516:	4b06      	ldr	r3, [pc, #24]	; (12530 <disk_status+0x1c>)
   12518:	4798      	blx	r3
   1251a:	2800      	cmp	r0, #0
   1251c:	d006      	beq.n	1252c <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1251e:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
   12520:	2802      	cmp	r0, #2
   12522:	d101      	bne.n	12528 <disk_status+0x14>
	default:
		return STA_NOINIT;
	}
}
   12524:	0018      	movs	r0, r3
   12526:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
   12528:	3b02      	subs	r3, #2
   1252a:	e7fb      	b.n	12524 <disk_status+0x10>
		return 0;
   1252c:	2300      	movs	r3, #0
   1252e:	e7f9      	b.n	12524 <disk_status+0x10>
   12530:	0000e3b9 	.word	0x0000e3b9

00012534 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   12534:	b5f0      	push	{r4, r5, r6, r7, lr}
   12536:	4645      	mov	r5, r8
   12538:	46de      	mov	lr, fp
   1253a:	4657      	mov	r7, sl
   1253c:	464e      	mov	r6, r9
   1253e:	b5e0      	push	{r5, r6, r7, lr}
   12540:	001f      	movs	r7, r3
   12542:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   12544:	4b19      	ldr	r3, [pc, #100]	; (125ac <disk_read+0x78>)
{
   12546:	4680      	mov	r8, r0
   12548:	000d      	movs	r5, r1
   1254a:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
   1254c:	4798      	blx	r3
   1254e:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   12550:	d107      	bne.n	12562 <disk_read+0x2e>
		return RES_ERROR;
   12552:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   12554:	b003      	add	sp, #12
   12556:	bc3c      	pop	{r2, r3, r4, r5}
   12558:	4690      	mov	r8, r2
   1255a:	4699      	mov	r9, r3
   1255c:	46a2      	mov	sl, r4
   1255e:	46ab      	mov	fp, r5
   12560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   12562:	4b13      	ldr	r3, [pc, #76]	; (125b0 <disk_read+0x7c>)
   12564:	a901      	add	r1, sp, #4
   12566:	4640      	mov	r0, r8
   12568:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1256a:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
   1256c:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
   1256e:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
   12570:	3301      	adds	r3, #1
   12572:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
   12574:	1912      	adds	r2, r2, r4
		return RES_PARERR;
   12576:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   12578:	429a      	cmp	r2, r3
   1257a:	d8eb      	bhi.n	12554 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1257c:	2f00      	cmp	r7, #0
   1257e:	d013      	beq.n	125a8 <disk_read+0x74>
   12580:	0273      	lsls	r3, r6, #9
   12582:	469b      	mov	fp, r3
   12584:	1c7b      	adds	r3, r7, #1
   12586:	4699      	mov	r9, r3
   12588:	4b0a      	ldr	r3, [pc, #40]	; (125b4 <disk_read+0x80>)
   1258a:	2701      	movs	r7, #1
   1258c:	469a      	mov	sl, r3
   1258e:	e004      	b.n	1259a <disk_read+0x66>
   12590:	3701      	adds	r7, #1
   12592:	19a4      	adds	r4, r4, r6
   12594:	445d      	add	r5, fp
   12596:	454f      	cmp	r7, r9
   12598:	d006      	beq.n	125a8 <disk_read+0x74>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1259a:	002a      	movs	r2, r5
   1259c:	0021      	movs	r1, r4
   1259e:	4640      	mov	r0, r8
   125a0:	47d0      	blx	sl
   125a2:	2800      	cmp	r0, #0
   125a4:	d0f4      	beq.n	12590 <disk_read+0x5c>
   125a6:	e7d4      	b.n	12552 <disk_read+0x1e>
	return RES_OK;
   125a8:	2000      	movs	r0, #0
   125aa:	e7d3      	b.n	12554 <disk_read+0x20>
   125ac:	0000e3e5 	.word	0x0000e3e5
   125b0:	0000e3cd 	.word	0x0000e3cd
   125b4:	0000e401 	.word	0x0000e401

000125b8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   125b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   125ba:	4645      	mov	r5, r8
   125bc:	46de      	mov	lr, fp
   125be:	4657      	mov	r7, sl
   125c0:	464e      	mov	r6, r9
   125c2:	b5e0      	push	{r5, r6, r7, lr}
   125c4:	001f      	movs	r7, r3
   125c6:	b083      	sub	sp, #12
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   125c8:	4b19      	ldr	r3, [pc, #100]	; (12630 <disk_write+0x78>)
{
   125ca:	4680      	mov	r8, r0
   125cc:	000d      	movs	r5, r1
   125ce:	0014      	movs	r4, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
   125d0:	4798      	blx	r3
   125d2:	1e06      	subs	r6, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   125d4:	d107      	bne.n	125e6 <disk_write+0x2e>
		return RES_ERROR;
   125d6:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   125d8:	b003      	add	sp, #12
   125da:	bc3c      	pop	{r2, r3, r4, r5}
   125dc:	4690      	mov	r8, r2
   125de:	4699      	mov	r9, r3
   125e0:	46a2      	mov	sl, r4
   125e2:	46ab      	mov	fp, r5
   125e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   125e6:	4b13      	ldr	r3, [pc, #76]	; (12634 <disk_write+0x7c>)
   125e8:	a901      	add	r1, sp, #4
   125ea:	4640      	mov	r0, r8
   125ec:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   125ee:	0032      	movs	r2, r6
			(ul_last_sector_num + 1) * uc_sector_size) {
   125f0:	9b01      	ldr	r3, [sp, #4]
	if ((sector + count * uc_sector_size) >
   125f2:	437a      	muls	r2, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
   125f4:	3301      	adds	r3, #1
   125f6:	4373      	muls	r3, r6
	if ((sector + count * uc_sector_size) >
   125f8:	1912      	adds	r2, r2, r4
		return RES_PARERR;
   125fa:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   125fc:	429a      	cmp	r2, r3
   125fe:	d8eb      	bhi.n	125d8 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   12600:	2f00      	cmp	r7, #0
   12602:	d013      	beq.n	1262c <disk_write+0x74>
   12604:	0273      	lsls	r3, r6, #9
   12606:	469b      	mov	fp, r3
   12608:	1c7b      	adds	r3, r7, #1
   1260a:	4699      	mov	r9, r3
   1260c:	4b0a      	ldr	r3, [pc, #40]	; (12638 <disk_write+0x80>)
   1260e:	2701      	movs	r7, #1
   12610:	469a      	mov	sl, r3
   12612:	e004      	b.n	1261e <disk_write+0x66>
   12614:	3701      	adds	r7, #1
   12616:	19a4      	adds	r4, r4, r6
   12618:	445d      	add	r5, fp
   1261a:	454f      	cmp	r7, r9
   1261c:	d006      	beq.n	1262c <disk_write+0x74>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1261e:	002a      	movs	r2, r5
   12620:	0021      	movs	r1, r4
   12622:	4640      	mov	r0, r8
   12624:	47d0      	blx	sl
   12626:	2800      	cmp	r0, #0
   12628:	d0f4      	beq.n	12614 <disk_write+0x5c>
   1262a:	e7d4      	b.n	125d6 <disk_write+0x1e>
	return RES_OK;
   1262c:	2000      	movs	r0, #0
   1262e:	e7d3      	b.n	125d8 <disk_write+0x20>
   12630:	0000e3e5 	.word	0x0000e3e5
   12634:	0000e3cd 	.word	0x0000e3cd
   12638:	0000e41d 	.word	0x0000e41d

0001263c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1263c:	b510      	push	{r4, lr}
   1263e:	0014      	movs	r4, r2
   12640:	b082      	sub	sp, #8
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   12642:	2901      	cmp	r1, #1
   12644:	d020      	beq.n	12688 <disk_ioctl+0x4c>
   12646:	2900      	cmp	r1, #0
   12648:	d018      	beq.n	1267c <disk_ioctl+0x40>
   1264a:	2902      	cmp	r1, #2
   1264c:	d007      	beq.n	1265e <disk_ioctl+0x22>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1264e:	2004      	movs	r0, #4
	switch (ctrl) {
   12650:	2903      	cmp	r1, #3
   12652:	d102      	bne.n	1265a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   12654:	2301      	movs	r3, #1
		res = RES_OK;
   12656:	2000      	movs	r0, #0
		*(DWORD *)buff = 1;
   12658:	6013      	str	r3, [r2, #0]
	}

	return res;
}
   1265a:	b002      	add	sp, #8
   1265c:	bd10      	pop	{r4, pc}
		uint8_t uc_sector_size = mem_sector_size(drv);
   1265e:	4b0f      	ldr	r3, [pc, #60]	; (1269c <disk_ioctl+0x60>)
   12660:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   12662:	1e43      	subs	r3, r0, #1
   12664:	b2db      	uxtb	r3, r3
   12666:	2b01      	cmp	r3, #1
   12668:	d904      	bls.n	12674 <disk_ioctl+0x38>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1266a:	22fb      	movs	r2, #251	; 0xfb
   1266c:	1f03      	subs	r3, r0, #4
			return RES_ERROR;
   1266e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   12670:	4213      	tst	r3, r2
   12672:	d1f2      	bne.n	1265a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   12674:	2300      	movs	r3, #0
		res = RES_OK;
   12676:	2000      	movs	r0, #0
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   12678:	7023      	strb	r3, [r4, #0]
	break;
   1267a:	e7ee      	b.n	1265a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1267c:	4b08      	ldr	r3, [pc, #32]	; (126a0 <disk_ioctl+0x64>)
   1267e:	4798      	blx	r3
   12680:	2800      	cmp	r0, #0
   12682:	d009      	beq.n	12698 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   12684:	2003      	movs	r0, #3
   12686:	e7e8      	b.n	1265a <disk_ioctl+0x1e>
		mem_read_capacity(drv, &ul_last_sector_num);
   12688:	4b06      	ldr	r3, [pc, #24]	; (126a4 <disk_ioctl+0x68>)
   1268a:	a901      	add	r1, sp, #4
   1268c:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1268e:	9b01      	ldr	r3, [sp, #4]
		res = RES_OK;
   12690:	2000      	movs	r0, #0
		*(DWORD *)buff = ul_last_sector_num + 1;
   12692:	3301      	adds	r3, #1
   12694:	6023      	str	r3, [r4, #0]
	break;
   12696:	e7e0      	b.n	1265a <disk_ioctl+0x1e>
			res = RES_OK;
   12698:	2000      	movs	r0, #0
   1269a:	e7de      	b.n	1265a <disk_ioctl+0x1e>
   1269c:	0000e3e5 	.word	0x0000e3e5
   126a0:	0000e3b9 	.word	0x0000e3b9
   126a4:	0000e3cd 	.word	0x0000e3cd

000126a8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   126a8:	b500      	push	{lr}
   126aa:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   126ac:	4669      	mov	r1, sp
   126ae:	480f      	ldr	r0, [pc, #60]	; (126ec <get_fattime+0x44>)
   126b0:	4b0f      	ldr	r3, [pc, #60]	; (126f0 <get_fattime+0x48>)
   126b2:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   126b4:	466b      	mov	r3, sp
   126b6:	7958      	ldrb	r0, [r3, #5]
			| (current_time.day << 16)
   126b8:	791b      	ldrb	r3, [r3, #4]
			| (current_time.month << 21)
   126ba:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   126bc:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   126be:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   126c0:	466b      	mov	r3, sp
   126c2:	789b      	ldrb	r3, [r3, #2]
	ul_time = ((current_time.year - 1980) << 25)
   126c4:	4a0b      	ldr	r2, [pc, #44]	; (126f4 <get_fattime+0x4c>)
			| (current_time.hour << 11)
   126c6:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   126c8:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   126ca:	466b      	mov	r3, sp
   126cc:	785b      	ldrb	r3, [r3, #1]
	ul_time = ((current_time.year - 1980) << 25)
   126ce:	4694      	mov	ip, r2
			| (current_time.minute << 5)
   126d0:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   126d2:	4318      	orrs	r0, r3
   126d4:	466b      	mov	r3, sp
   126d6:	781b      	ldrb	r3, [r3, #0]
   126d8:	085b      	lsrs	r3, r3, #1
   126da:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   126dc:	466b      	mov	r3, sp
   126de:	88db      	ldrh	r3, [r3, #6]
   126e0:	4463      	add	r3, ip
   126e2:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   126e4:	4318      	orrs	r0, r3

	return ul_time;
}
   126e6:	b003      	add	sp, #12
   126e8:	bd00      	pop	{pc}
   126ea:	46c0      	nop			; (mov r8, r8)
   126ec:	20000bc4 	.word	0x20000bc4
   126f0:	0000f5f1 	.word	0x0000f5f1
   126f4:	fffff844 	.word	0xfffff844

000126f8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126fa:	4647      	mov	r7, r8
   126fc:	46ce      	mov	lr, r9
   126fe:	b580      	push	{r7, lr}
	DWORD wsect;


	wsect = fs->winsect;
   12700:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   12702:	0004      	movs	r4, r0
   12704:	000f      	movs	r7, r1
	if (wsect != sector) {	/* Changed current window */
   12706:	428d      	cmp	r5, r1
   12708:	d004      	beq.n	12714 <move_window+0x1c>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   1270a:	7903      	ldrb	r3, [r0, #4]
   1270c:	2b00      	cmp	r3, #0
   1270e:	d111      	bne.n	12734 <move_window+0x3c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
   12710:	2f00      	cmp	r7, #0
   12712:	d104      	bne.n	1271e <move_window+0x26>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
   12714:	2000      	movs	r0, #0
}
   12716:	bc0c      	pop	{r2, r3}
   12718:	4690      	mov	r8, r2
   1271a:	4699      	mov	r9, r3
   1271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1271e:	0021      	movs	r1, r4
   12720:	7860      	ldrb	r0, [r4, #1]
   12722:	2301      	movs	r3, #1
   12724:	003a      	movs	r2, r7
   12726:	3130      	adds	r1, #48	; 0x30
   12728:	4d14      	ldr	r5, [pc, #80]	; (1277c <move_window+0x84>)
   1272a:	47a8      	blx	r5
   1272c:	2800      	cmp	r0, #0
   1272e:	d123      	bne.n	12778 <move_window+0x80>
			fs->winsect = sector;
   12730:	62e7      	str	r7, [r4, #44]	; 0x2c
   12732:	e7f0      	b.n	12716 <move_window+0x1e>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   12734:	2330      	movs	r3, #48	; 0x30
   12736:	4698      	mov	r8, r3
   12738:	4e11      	ldr	r6, [pc, #68]	; (12780 <move_window+0x88>)
   1273a:	4480      	add	r8, r0
   1273c:	3b2f      	subs	r3, #47	; 0x2f
   1273e:	7840      	ldrb	r0, [r0, #1]
   12740:	002a      	movs	r2, r5
   12742:	4641      	mov	r1, r8
   12744:	46b1      	mov	r9, r6
   12746:	47b0      	blx	r6
   12748:	2800      	cmp	r0, #0
   1274a:	d115      	bne.n	12778 <move_window+0x80>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1274c:	69e3      	ldr	r3, [r4, #28]
   1274e:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
   12750:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   12752:	189a      	adds	r2, r3, r2
   12754:	4295      	cmp	r5, r2
   12756:	d2db      	bcs.n	12710 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12758:	78e6      	ldrb	r6, [r4, #3]
   1275a:	2e01      	cmp	r6, #1
   1275c:	d801      	bhi.n	12762 <move_window+0x6a>
   1275e:	e7d7      	b.n	12710 <move_window+0x18>
   12760:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
   12762:	18ed      	adds	r5, r5, r3
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12764:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
   12766:	7860      	ldrb	r0, [r4, #1]
   12768:	2301      	movs	r3, #1
   1276a:	002a      	movs	r2, r5
   1276c:	4641      	mov	r1, r8
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   1276e:	b2f6      	uxtb	r6, r6
					disk_write(fs->drv, fs->win, wsect, 1);
   12770:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   12772:	2e01      	cmp	r6, #1
   12774:	d1f4      	bne.n	12760 <move_window+0x68>
   12776:	e7cb      	b.n	12710 <move_window+0x18>
				return FR_DISK_ERR;
   12778:	2001      	movs	r0, #1
   1277a:	e7cc      	b.n	12716 <move_window+0x1e>
   1277c:	00012535 	.word	0x00012535
   12780:	000125b9 	.word	0x000125b9

00012784 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   12784:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;


	res = move_window(fs, 0);
   12786:	2100      	movs	r1, #0
   12788:	4b2d      	ldr	r3, [pc, #180]	; (12840 <sync+0xbc>)
{
   1278a:	0005      	movs	r5, r0
	res = move_window(fs, 0);
   1278c:	4798      	blx	r3
	if (res == FR_OK) {
   1278e:	2800      	cmp	r0, #0
   12790:	d10a      	bne.n	127a8 <sync+0x24>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   12792:	782a      	ldrb	r2, [r5, #0]
   12794:	2a03      	cmp	r2, #3
   12796:	d008      	beq.n	127aa <sync+0x26>
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   12798:	4b2a      	ldr	r3, [pc, #168]	; (12844 <sync+0xc0>)
   1279a:	7868      	ldrb	r0, [r5, #1]
   1279c:	2200      	movs	r2, #0
   1279e:	2100      	movs	r1, #0
   127a0:	4798      	blx	r3
   127a2:	1e43      	subs	r3, r0, #1
   127a4:	4198      	sbcs	r0, r3
   127a6:	b2c0      	uxtb	r0, r0
			res = FR_DISK_ERR;
	}

	return res;
}
   127a8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   127aa:	796a      	ldrb	r2, [r5, #5]
   127ac:	2a00      	cmp	r2, #0
   127ae:	d0f3      	beq.n	12798 <sync+0x14>
			mem_set(fs->win, 0, 512);
   127b0:	0029      	movs	r1, r5
   127b2:	228c      	movs	r2, #140	; 0x8c
   127b4:	3130      	adds	r1, #48	; 0x30
   127b6:	000b      	movs	r3, r1
		*d++ = (BYTE)val;
   127b8:	2400      	movs	r4, #0
   127ba:	0092      	lsls	r2, r2, #2
			fs->winsect = 0;
   127bc:	62e8      	str	r0, [r5, #44]	; 0x2c
   127be:	18aa      	adds	r2, r5, r2
		*d++ = (BYTE)val;
   127c0:	701c      	strb	r4, [r3, #0]
   127c2:	3301      	adds	r3, #1
	while (cnt--)
   127c4:	4293      	cmp	r3, r2
   127c6:	d1fb      	bne.n	127c0 <sync+0x3c>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   127c8:	2255      	movs	r2, #85	; 0x55
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   127ca:	2033      	movs	r0, #51	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   127cc:	2685      	movs	r6, #133	; 0x85
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   127ce:	4b1e      	ldr	r3, [pc, #120]	; (12848 <sync+0xc4>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   127d0:	00b6      	lsls	r6, r6, #2
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   127d2:	54ea      	strb	r2, [r5, r3]
   127d4:	4b1d      	ldr	r3, [pc, #116]	; (1284c <sync+0xc8>)
   127d6:	3255      	adds	r2, #85	; 0x55
   127d8:	54ea      	strb	r2, [r5, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   127da:	3bde      	subs	r3, #222	; 0xde
   127dc:	3bff      	subs	r3, #255	; 0xff
   127de:	3a7a      	subs	r2, #122	; 0x7a
   127e0:	54ab      	strb	r3, [r5, r2]
   127e2:	3201      	adds	r2, #1
   127e4:	54ab      	strb	r3, [r5, r2]
   127e6:	330f      	adds	r3, #15
   127e8:	3201      	adds	r2, #1
   127ea:	54ab      	strb	r3, [r5, r2]
   127ec:	320f      	adds	r2, #15
   127ee:	542a      	strb	r2, [r5, r0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   127f0:	303f      	adds	r0, #63	; 0x3f
   127f2:	55a8      	strb	r0, [r5, r6]
   127f4:	4e16      	ldr	r6, [pc, #88]	; (12850 <sync+0xcc>)
   127f6:	55a8      	strb	r0, [r5, r6]
   127f8:	4816      	ldr	r0, [pc, #88]	; (12854 <sync+0xd0>)
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   127fa:	4e17      	ldr	r6, [pc, #92]	; (12858 <sync+0xd4>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   127fc:	542a      	strb	r2, [r5, r0]
   127fe:	4a17      	ldr	r2, [pc, #92]	; (1285c <sync+0xd8>)
   12800:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   12802:	692b      	ldr	r3, [r5, #16]
   12804:	3201      	adds	r2, #1
   12806:	54ab      	strb	r3, [r5, r2]
   12808:	4a15      	ldr	r2, [pc, #84]	; (12860 <sync+0xdc>)
   1280a:	0a18      	lsrs	r0, r3, #8
   1280c:	54a8      	strb	r0, [r5, r2]
   1280e:	4a15      	ldr	r2, [pc, #84]	; (12864 <sync+0xe0>)
   12810:	0c18      	lsrs	r0, r3, #16
   12812:	54a8      	strb	r0, [r5, r2]
   12814:	4a14      	ldr	r2, [pc, #80]	; (12868 <sync+0xe4>)
   12816:	0e1b      	lsrs	r3, r3, #24
   12818:	54ab      	strb	r3, [r5, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   1281a:	68eb      	ldr	r3, [r5, #12]
   1281c:	3201      	adds	r2, #1
   1281e:	54ab      	strb	r3, [r5, r2]
   12820:	4a12      	ldr	r2, [pc, #72]	; (1286c <sync+0xe8>)
   12822:	0a18      	lsrs	r0, r3, #8
   12824:	54a8      	strb	r0, [r5, r2]
   12826:	4a12      	ldr	r2, [pc, #72]	; (12870 <sync+0xec>)
   12828:	0c18      	lsrs	r0, r3, #16
   1282a:	54a8      	strb	r0, [r5, r2]
   1282c:	4a11      	ldr	r2, [pc, #68]	; (12874 <sync+0xf0>)
   1282e:	0e1b      	lsrs	r3, r3, #24
   12830:	54ab      	strb	r3, [r5, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   12832:	7868      	ldrb	r0, [r5, #1]
   12834:	2301      	movs	r3, #1
   12836:	696a      	ldr	r2, [r5, #20]
   12838:	47b0      	blx	r6
			fs->fsi_flag = 0;
   1283a:	716c      	strb	r4, [r5, #5]
   1283c:	e7ac      	b.n	12798 <sync+0x14>
   1283e:	46c0      	nop			; (mov r8, r8)
   12840:	000126f9 	.word	0x000126f9
   12844:	0001263d 	.word	0x0001263d
   12848:	0000022e 	.word	0x0000022e
   1284c:	0000022f 	.word	0x0000022f
   12850:	00000215 	.word	0x00000215
   12854:	00000216 	.word	0x00000216
   12858:	000125b9 	.word	0x000125b9
   1285c:	00000217 	.word	0x00000217
   12860:	00000219 	.word	0x00000219
   12864:	0000021a 	.word	0x0000021a
   12868:	0000021b 	.word	0x0000021b
   1286c:	0000021d 	.word	0x0000021d
   12870:	0000021e 	.word	0x0000021e
   12874:	0000021f 	.word	0x0000021f

00012878 <validate.part.2>:
/*-----------------------------------------------------------------------*/
/* Check if the file/dir object is valid or not                          */
/*-----------------------------------------------------------------------*/

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   12878:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   1287a:	4b04      	ldr	r3, [pc, #16]	; (1288c <validate.part.2+0x14>)
   1287c:	7840      	ldrb	r0, [r0, #1]
   1287e:	4798      	blx	r3
   12880:	0003      	movs	r3, r0
		return FR_NOT_READY;
   12882:	2003      	movs	r0, #3

	return FR_OK;
   12884:	07db      	lsls	r3, r3, #31
   12886:	17db      	asrs	r3, r3, #31
   12888:	4018      	ands	r0, r3
}
   1288a:	bd10      	pop	{r4, pc}
   1288c:	00012515 	.word	0x00012515

00012890 <check_fs>:
{
   12890:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12892:	0001      	movs	r1, r0
{
   12894:	b570      	push	{r4, r5, r6, lr}
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   12896:	2301      	movs	r3, #1
{
   12898:	0004      	movs	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1289a:	3130      	adds	r1, #48	; 0x30
   1289c:	7840      	ldrb	r0, [r0, #1]
   1289e:	4d17      	ldr	r5, [pc, #92]	; (128fc <check_fs+0x6c>)
   128a0:	47a8      	blx	r5
		return 3;
   128a2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   128a4:	2800      	cmp	r0, #0
   128a6:	d001      	beq.n	128ac <check_fs+0x1c>
}
   128a8:	0018      	movs	r0, r3
   128aa:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   128ac:	4b14      	ldr	r3, [pc, #80]	; (12900 <check_fs+0x70>)
   128ae:	4a15      	ldr	r2, [pc, #84]	; (12904 <check_fs+0x74>)
   128b0:	5ce3      	ldrb	r3, [r4, r3]
   128b2:	5ca2      	ldrb	r2, [r4, r2]
   128b4:	021b      	lsls	r3, r3, #8
   128b6:	431a      	orrs	r2, r3
   128b8:	4913      	ldr	r1, [pc, #76]	; (12908 <check_fs+0x78>)
   128ba:	b212      	sxth	r2, r2
		return 2;
   128bc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   128be:	428a      	cmp	r2, r1
   128c0:	d1f2      	bne.n	128a8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   128c2:	0022      	movs	r2, r4
   128c4:	3266      	adds	r2, #102	; 0x66
   128c6:	8853      	ldrh	r3, [r2, #2]
   128c8:	8811      	ldrh	r1, [r2, #0]
   128ca:	041b      	lsls	r3, r3, #16
   128cc:	430b      	orrs	r3, r1
   128ce:	4a0f      	ldr	r2, [pc, #60]	; (1290c <check_fs+0x7c>)
   128d0:	021b      	lsls	r3, r3, #8
   128d2:	0a1b      	lsrs	r3, r3, #8
   128d4:	4293      	cmp	r3, r2
   128d6:	d00e      	beq.n	128f6 <check_fs+0x66>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   128d8:	2382      	movs	r3, #130	; 0x82
   128da:	5ae2      	ldrh	r2, [r4, r3]
   128dc:	3482      	adds	r4, #130	; 0x82
   128de:	8863      	ldrh	r3, [r4, #2]
   128e0:	041b      	lsls	r3, r3, #16
   128e2:	4313      	orrs	r3, r2
   128e4:	4a0a      	ldr	r2, [pc, #40]	; (12910 <check_fs+0x80>)
   128e6:	021b      	lsls	r3, r3, #8
   128e8:	4694      	mov	ip, r2
   128ea:	0a1b      	lsrs	r3, r3, #8
   128ec:	4463      	add	r3, ip
   128ee:	1e58      	subs	r0, r3, #1
   128f0:	4183      	sbcs	r3, r0
		return 3;
   128f2:	b2db      	uxtb	r3, r3
   128f4:	e7d8      	b.n	128a8 <check_fs+0x18>
		return 0;
   128f6:	2300      	movs	r3, #0
   128f8:	e7d6      	b.n	128a8 <check_fs+0x18>
   128fa:	46c0      	nop			; (mov r8, r8)
   128fc:	00012535 	.word	0x00012535
   12900:	0000022f 	.word	0x0000022f
   12904:	0000022e 	.word	0x0000022e
   12908:	ffffaa55 	.word	0xffffaa55
   1290c:	00544146 	.word	0x00544146
   12910:	ffabbeba 	.word	0xffabbeba

00012914 <chk_mounted>:
{
   12914:	b5f0      	push	{r4, r5, r6, r7, lr}
   12916:	46d6      	mov	lr, sl
   12918:	464f      	mov	r7, r9
   1291a:	4646      	mov	r6, r8
   1291c:	b5c0      	push	{r6, r7, lr}
   1291e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   12920:	6802      	ldr	r2, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   12922:	7813      	ldrb	r3, [r2, #0]
   12924:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   12926:	2b09      	cmp	r3, #9
   12928:	d802      	bhi.n	12930 <chk_mounted+0x1c>
   1292a:	7854      	ldrb	r4, [r2, #1]
   1292c:	2c3a      	cmp	r4, #58	; 0x3a
   1292e:	d01a      	beq.n	12966 <chk_mounted+0x52>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   12930:	4b9b      	ldr	r3, [pc, #620]	; (12ba0 <chk_mounted+0x28c>)
   12932:	681c      	ldr	r4, [r3, #0]
   12934:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   12936:	2c00      	cmp	r4, #0
   12938:	d00f      	beq.n	1295a <chk_mounted+0x46>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1293a:	7823      	ldrb	r3, [r4, #0]
   1293c:	2b00      	cmp	r3, #0
   1293e:	d018      	beq.n	12972 <chk_mounted+0x5e>
		stat = disk_status(fs->drv);
   12940:	4b98      	ldr	r3, [pc, #608]	; (12ba4 <chk_mounted+0x290>)
   12942:	7860      	ldrb	r0, [r4, #1]
   12944:	4798      	blx	r3
   12946:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   12948:	07c2      	lsls	r2, r0, #31
   1294a:	d412      	bmi.n	12972 <chk_mounted+0x5e>
			return FR_OK;				/* The file system object is valid */
   1294c:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1294e:	2d00      	cmp	r5, #0
   12950:	d004      	beq.n	1295c <chk_mounted+0x48>
   12952:	075b      	lsls	r3, r3, #29
   12954:	d502      	bpl.n	1295c <chk_mounted+0x48>
				return FR_WRITE_PROTECTED;
   12956:	200a      	movs	r0, #10
   12958:	e000      	b.n	1295c <chk_mounted+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1295a:	200c      	movs	r0, #12
}
   1295c:	bc1c      	pop	{r2, r3, r4}
   1295e:	4690      	mov	r8, r2
   12960:	4699      	mov	r9, r3
   12962:	46a2      	mov	sl, r4
   12964:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
   12966:	3202      	adds	r2, #2
   12968:	6002      	str	r2, [r0, #0]
		return FR_INVALID_DRIVE;
   1296a:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1296c:	2b00      	cmp	r3, #0
   1296e:	d1f5      	bne.n	1295c <chk_mounted+0x48>
   12970:	e7de      	b.n	12930 <chk_mounted+0x1c>
	fs->fs_type = 0;					/* Clear the file system object */
   12972:	2300      	movs	r3, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   12974:	2000      	movs	r0, #0
	fs->fs_type = 0;					/* Clear the file system object */
   12976:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   12978:	7063      	strb	r3, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1297a:	4b8b      	ldr	r3, [pc, #556]	; (12ba8 <chk_mounted+0x294>)
   1297c:	4798      	blx	r3
   1297e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   12980:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   12982:	07da      	lsls	r2, r3, #31
   12984:	d4ea      	bmi.n	1295c <chk_mounted+0x48>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   12986:	2d00      	cmp	r5, #0
   12988:	d001      	beq.n	1298e <chk_mounted+0x7a>
   1298a:	075b      	lsls	r3, r3, #29
   1298c:	d4e3      	bmi.n	12956 <chk_mounted+0x42>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1298e:	2100      	movs	r1, #0
   12990:	0020      	movs	r0, r4
   12992:	4d86      	ldr	r5, [pc, #536]	; (12bac <chk_mounted+0x298>)
   12994:	47a8      	blx	r5
   12996:	2600      	movs	r6, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   12998:	2801      	cmp	r0, #1
   1299a:	d100      	bne.n	1299e <chk_mounted+0x8a>
   1299c:	e08d      	b.n	12aba <chk_mounted+0x1a6>
	if (fmt == 3) return FR_DISK_ERR;
   1299e:	2803      	cmp	r0, #3
   129a0:	d100      	bne.n	129a4 <chk_mounted+0x90>
   129a2:	e0a1      	b.n	12ae8 <chk_mounted+0x1d4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   129a4:	2800      	cmp	r0, #0
   129a6:	d001      	beq.n	129ac <chk_mounted+0x98>
   129a8:	200d      	movs	r0, #13
   129aa:	e7d7      	b.n	1295c <chk_mounted+0x48>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   129ac:	233c      	movs	r3, #60	; 0x3c
   129ae:	5ce2      	ldrb	r2, [r4, r3]
   129b0:	3b01      	subs	r3, #1
   129b2:	5ce3      	ldrb	r3, [r4, r3]
   129b4:	0212      	lsls	r2, r2, #8
   129b6:	4313      	orrs	r3, r2
   129b8:	2280      	movs	r2, #128	; 0x80
   129ba:	b21b      	sxth	r3, r3
   129bc:	0092      	lsls	r2, r2, #2
   129be:	4293      	cmp	r3, r2
   129c0:	d1f2      	bne.n	129a8 <chk_mounted+0x94>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   129c2:	2347      	movs	r3, #71	; 0x47
   129c4:	3abb      	subs	r2, #187	; 0xbb
   129c6:	5ce3      	ldrb	r3, [r4, r3]
   129c8:	3aff      	subs	r2, #255	; 0xff
   129ca:	5ca7      	ldrb	r7, [r4, r2]
   129cc:	021b      	lsls	r3, r3, #8
   129ce:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   129d0:	d100      	bne.n	129d4 <chk_mounted+0xc0>
   129d2:	6d67      	ldr	r7, [r4, #84]	; 0x54
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   129d4:	2340      	movs	r3, #64	; 0x40
	fs->fsize = fasize;
   129d6:	61e7      	str	r7, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   129d8:	5ce3      	ldrb	r3, [r4, r3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   129da:	1e5a      	subs	r2, r3, #1
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   129dc:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   129de:	2a01      	cmp	r2, #1
   129e0:	d8e2      	bhi.n	129a8 <chk_mounted+0x94>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   129e2:	223d      	movs	r2, #61	; 0x3d
   129e4:	5ca1      	ldrb	r1, [r4, r2]
   129e6:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   129e8:	2900      	cmp	r1, #0
   129ea:	d0dd      	beq.n	129a8 <chk_mounted+0x94>
   129ec:	1e4a      	subs	r2, r1, #1
   129ee:	4211      	tst	r1, r2
   129f0:	d1da      	bne.n	129a8 <chk_mounted+0x94>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   129f2:	2242      	movs	r2, #66	; 0x42
   129f4:	2041      	movs	r0, #65	; 0x41
   129f6:	5ca2      	ldrb	r2, [r4, r2]
   129f8:	5c20      	ldrb	r0, [r4, r0]
   129fa:	0212      	lsls	r2, r2, #8
   129fc:	4310      	orrs	r0, r2
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   129fe:	0002      	movs	r2, r0
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   12a00:	4680      	mov	r8, r0
   12a02:	8120      	strh	r0, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   12a04:	0712      	lsls	r2, r2, #28
   12a06:	d1cf      	bne.n	129a8 <chk_mounted+0x94>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   12a08:	2244      	movs	r2, #68	; 0x44
   12a0a:	2043      	movs	r0, #67	; 0x43
   12a0c:	5ca2      	ldrb	r2, [r4, r2]
   12a0e:	5c20      	ldrb	r0, [r4, r0]
   12a10:	0212      	lsls	r2, r2, #8
   12a12:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   12a14:	d100      	bne.n	12a18 <chk_mounted+0x104>
   12a16:	6d20      	ldr	r0, [r4, #80]	; 0x50
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   12a18:	223f      	movs	r2, #63	; 0x3f
   12a1a:	253e      	movs	r5, #62	; 0x3e
   12a1c:	5ca2      	ldrb	r2, [r4, r2]
   12a1e:	5d65      	ldrb	r5, [r4, r5]
   12a20:	0212      	lsls	r2, r2, #8
   12a22:	4315      	orrs	r5, r2
   12a24:	46aa      	mov	sl, r5
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   12a26:	d0bf      	beq.n	129a8 <chk_mounted+0x94>
	fasize *= b;										/* Number of sectors for FAT area */
   12a28:	437b      	muls	r3, r7
   12a2a:	4699      	mov	r9, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   12a2c:	4643      	mov	r3, r8
   12a2e:	091d      	lsrs	r5, r3, #4
   12a30:	4455      	add	r5, sl
   12a32:	444d      	add	r5, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   12a34:	42a8      	cmp	r0, r5
   12a36:	d3b7      	bcc.n	129a8 <chk_mounted+0x94>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   12a38:	1b40      	subs	r0, r0, r5
   12a3a:	4b5d      	ldr	r3, [pc, #372]	; (12bb0 <chk_mounted+0x29c>)
   12a3c:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   12a3e:	2800      	cmp	r0, #0
   12a40:	d0b2      	beq.n	129a8 <chk_mounted+0x94>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   12a42:	4b5c      	ldr	r3, [pc, #368]	; (12bb4 <chk_mounted+0x2a0>)
   12a44:	4298      	cmp	r0, r3
   12a46:	d800      	bhi.n	12a4a <chk_mounted+0x136>
   12a48:	e089      	b.n	12b5e <chk_mounted+0x24a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   12a4a:	4b5b      	ldr	r3, [pc, #364]	; (12bb8 <chk_mounted+0x2a4>)
   12a4c:	4298      	cmp	r0, r3
   12a4e:	d96c      	bls.n	12b2a <chk_mounted+0x216>
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12a50:	4653      	mov	r3, sl
   12a52:	18f3      	adds	r3, r6, r3
   12a54:	6223      	str	r3, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12a56:	4643      	mov	r3, r8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12a58:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
   12a5a:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12a5c:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12a5e:	62a5      	str	r5, [r4, #40]	; 0x28
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   12a60:	2b00      	cmp	r3, #0
   12a62:	d1a1      	bne.n	129a8 <chk_mounted+0x94>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   12a64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   12a66:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   12a68:	6263      	str	r3, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12a6a:	4b54      	ldr	r3, [pc, #336]	; (12bbc <chk_mounted+0x2a8>)
   12a6c:	18c3      	adds	r3, r0, r3
   12a6e:	0a5b      	lsrs	r3, r3, #9
   12a70:	429f      	cmp	r7, r3
   12a72:	d399      	bcc.n	129a8 <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   12a74:	2301      	movs	r3, #1
   12a76:	425b      	negs	r3, r3
   12a78:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
   12a7a:	4643      	mov	r3, r8
   12a7c:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
   12a7e:	4643      	mov	r3, r8
   12a80:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   12a82:	2361      	movs	r3, #97	; 0x61
   12a84:	2260      	movs	r2, #96	; 0x60
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12a86:	0021      	movs	r1, r4
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   12a88:	5ce3      	ldrb	r3, [r4, r3]
   12a8a:	5ca2      	ldrb	r2, [r4, r2]
   12a8c:	021b      	lsls	r3, r3, #8
   12a8e:	431a      	orrs	r2, r3
   12a90:	1992      	adds	r2, r2, r6
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12a92:	2301      	movs	r3, #1
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   12a94:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12a96:	7860      	ldrb	r0, [r4, #1]
   12a98:	3130      	adds	r1, #48	; 0x30
   12a9a:	4d49      	ldr	r5, [pc, #292]	; (12bc0 <chk_mounted+0x2ac>)
   12a9c:	47a8      	blx	r5
   12a9e:	2303      	movs	r3, #3
   12aa0:	2800      	cmp	r0, #0
   12aa2:	d023      	beq.n	12aec <chk_mounted+0x1d8>
	fs->winsect = 0;		/* Invalidate sector cache */
   12aa4:	2000      	movs	r0, #0
	fs->id = ++Fsid;		/* File system mount ID */
   12aa6:	4a47      	ldr	r2, [pc, #284]	; (12bc4 <chk_mounted+0x2b0>)
	fs->fs_type = fmt;		/* FAT sub-type */
   12aa8:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   12aaa:	8813      	ldrh	r3, [r2, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
   12aac:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->id = ++Fsid;		/* File system mount ID */
   12aae:	3301      	adds	r3, #1
   12ab0:	b29b      	uxth	r3, r3
   12ab2:	8013      	strh	r3, [r2, #0]
   12ab4:	80e3      	strh	r3, [r4, #6]
	fs->wflag = 0;
   12ab6:	7120      	strb	r0, [r4, #4]
	return FR_OK;
   12ab8:	e750      	b.n	1295c <chk_mounted+0x48>
		if (tbl[4]) {						/* Is the partition existing? */
   12aba:	23f9      	movs	r3, #249	; 0xf9
   12abc:	005b      	lsls	r3, r3, #1
   12abe:	5ce3      	ldrb	r3, [r4, r3]
   12ac0:	2b00      	cmp	r3, #0
   12ac2:	d100      	bne.n	12ac6 <chk_mounted+0x1b2>
   12ac4:	e770      	b.n	129a8 <chk_mounted+0x94>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   12ac6:	23fb      	movs	r3, #251	; 0xfb
   12ac8:	005b      	lsls	r3, r3, #1
   12aca:	18e2      	adds	r2, r4, r3
   12acc:	5ce6      	ldrb	r6, [r4, r3]
   12ace:	7853      	ldrb	r3, [r2, #1]
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12ad0:	0020      	movs	r0, r4
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   12ad2:	021b      	lsls	r3, r3, #8
   12ad4:	4333      	orrs	r3, r6
   12ad6:	7896      	ldrb	r6, [r2, #2]
   12ad8:	0436      	lsls	r6, r6, #16
   12ada:	4333      	orrs	r3, r6
   12adc:	78d6      	ldrb	r6, [r2, #3]
   12ade:	0636      	lsls	r6, r6, #24
   12ae0:	431e      	orrs	r6, r3
			fmt = check_fs(fs, bsect);		/* Check the partition */
   12ae2:	0031      	movs	r1, r6
   12ae4:	47a8      	blx	r5
   12ae6:	e75a      	b.n	1299e <chk_mounted+0x8a>
	if (fmt == 3) return FR_DISK_ERR;
   12ae8:	2001      	movs	r0, #1
   12aea:	e737      	b.n	1295c <chk_mounted+0x48>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   12aec:	4b36      	ldr	r3, [pc, #216]	; (12bc8 <chk_mounted+0x2b4>)
   12aee:	4a37      	ldr	r2, [pc, #220]	; (12bcc <chk_mounted+0x2b8>)
   12af0:	5ce3      	ldrb	r3, [r4, r3]
   12af2:	5ca2      	ldrb	r2, [r4, r2]
   12af4:	021b      	lsls	r3, r3, #8
   12af6:	431a      	orrs	r2, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   12af8:	4935      	ldr	r1, [pc, #212]	; (12bd0 <chk_mounted+0x2bc>)
   12afa:	b212      	sxth	r2, r2
   12afc:	2303      	movs	r3, #3
   12afe:	428a      	cmp	r2, r1
   12b00:	d1d0      	bne.n	12aa4 <chk_mounted+0x190>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   12b02:	4a34      	ldr	r2, [pc, #208]	; (12bd4 <chk_mounted+0x2c0>)
   12b04:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12b06:	4291      	cmp	r1, r2
   12b08:	d1cc      	bne.n	12aa4 <chk_mounted+0x190>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   12b0a:	2385      	movs	r3, #133	; 0x85
   12b0c:	009b      	lsls	r3, r3, #2
   12b0e:	58e1      	ldr	r1, [r4, r3]
   12b10:	4a31      	ldr	r2, [pc, #196]	; (12bd8 <chk_mounted+0x2c4>)
   12b12:	2303      	movs	r3, #3
   12b14:	4291      	cmp	r1, r2
   12b16:	d1c5      	bne.n	12aa4 <chk_mounted+0x190>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   12b18:	2287      	movs	r2, #135	; 0x87
   12b1a:	0092      	lsls	r2, r2, #2
   12b1c:	58a2      	ldr	r2, [r4, r2]
   12b1e:	60e2      	str	r2, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   12b20:	2286      	movs	r2, #134	; 0x86
   12b22:	0092      	lsls	r2, r2, #2
   12b24:	58a2      	ldr	r2, [r4, r2]
   12b26:	6122      	str	r2, [r4, #16]
   12b28:	e7bc      	b.n	12aa4 <chk_mounted+0x190>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12b2a:	4643      	mov	r3, r8
	fs->database = bsect + sysect;						/* Data start sector */
   12b2c:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12b2e:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12b30:	4456      	add	r6, sl
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12b32:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12b34:	62a5      	str	r5, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12b36:	6226      	str	r6, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d100      	bne.n	12b3e <chk_mounted+0x22a>
   12b3c:	e734      	b.n	129a8 <chk_mounted+0x94>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b3e:	4b1f      	ldr	r3, [pc, #124]	; (12bbc <chk_mounted+0x2a8>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12b40:	0040      	lsls	r0, r0, #1
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   12b42:	444e      	add	r6, r9
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b44:	18c3      	adds	r3, r0, r3
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   12b46:	6266      	str	r6, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b48:	0a5b      	lsrs	r3, r3, #9
   12b4a:	429f      	cmp	r7, r3
   12b4c:	d200      	bcs.n	12b50 <chk_mounted+0x23c>
   12b4e:	e72b      	b.n	129a8 <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   12b50:	2301      	movs	r3, #1
   12b52:	425b      	negs	r3, r3
   12b54:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
   12b56:	2300      	movs	r3, #0
   12b58:	60e3      	str	r3, [r4, #12]
   12b5a:	3302      	adds	r3, #2
   12b5c:	e7a2      	b.n	12aa4 <chk_mounted+0x190>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12b5e:	4643      	mov	r3, r8
	fs->database = bsect + sysect;						/* Data start sector */
   12b60:	1975      	adds	r5, r6, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12b62:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12b64:	4456      	add	r6, sl
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   12b66:	61a0      	str	r0, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   12b68:	62a5      	str	r5, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   12b6a:	6226      	str	r6, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   12b6c:	2b00      	cmp	r3, #0
   12b6e:	d100      	bne.n	12b72 <chk_mounted+0x25e>
   12b70:	e71a      	b.n	129a8 <chk_mounted+0x94>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12b72:	2301      	movs	r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b74:	4911      	ldr	r1, [pc, #68]	; (12bbc <chk_mounted+0x2a8>)
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12b76:	0002      	movs	r2, r0
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b78:	468c      	mov	ip, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   12b7a:	39fd      	subs	r1, #253	; 0xfd
   12b7c:	39ff      	subs	r1, #255	; 0xff
   12b7e:	4348      	muls	r0, r1
   12b80:	40d8      	lsrs	r0, r3
   12b82:	401a      	ands	r2, r3
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b84:	4462      	add	r2, ip
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   12b86:	444e      	add	r6, r9
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b88:	1812      	adds	r2, r2, r0
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   12b8a:	6266      	str	r6, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   12b8c:	0a52      	lsrs	r2, r2, #9
   12b8e:	4297      	cmp	r7, r2
   12b90:	d200      	bcs.n	12b94 <chk_mounted+0x280>
   12b92:	e709      	b.n	129a8 <chk_mounted+0x94>
	fs->free_clust = 0xFFFFFFFF;
   12b94:	2201      	movs	r2, #1
   12b96:	4252      	negs	r2, r2
   12b98:	6122      	str	r2, [r4, #16]
	fs->last_clust = 0;
   12b9a:	2200      	movs	r2, #0
   12b9c:	60e2      	str	r2, [r4, #12]
   12b9e:	e781      	b.n	12aa4 <chk_mounted+0x190>
   12ba0:	20000ba8 	.word	0x20000ba8
   12ba4:	00012515 	.word	0x00012515
   12ba8:	00012489 	.word	0x00012489
   12bac:	00012891 	.word	0x00012891
   12bb0:	000138a9 	.word	0x000138a9
   12bb4:	00000ff5 	.word	0x00000ff5
   12bb8:	0000fff5 	.word	0x0000fff5
   12bbc:	000001ff 	.word	0x000001ff
   12bc0:	00012535 	.word	0x00012535
   12bc4:	20000bac 	.word	0x20000bac
   12bc8:	0000022f 	.word	0x0000022f
   12bcc:	0000022e 	.word	0x0000022e
   12bd0:	ffffaa55 	.word	0xffffaa55
   12bd4:	41615252 	.word	0x41615252
   12bd8:	61417272 	.word	0x61417272

00012bdc <get_fat.part.4>:
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   12bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bde:	46ce      	mov	lr, r9
   12be0:	4647      	mov	r7, r8
   12be2:	b580      	push	{r7, lr}
	switch (fs->fs_type) {
   12be4:	7806      	ldrb	r6, [r0, #0]
static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   12be6:	0004      	movs	r4, r0
   12be8:	000d      	movs	r5, r1
	switch (fs->fs_type) {
   12bea:	2e02      	cmp	r6, #2
   12bec:	d04e      	beq.n	12c8c <get_fat.part.4+0xb0>
   12bee:	2e03      	cmp	r6, #3
   12bf0:	d02e      	beq.n	12c50 <get_fat.part.4+0x74>
   12bf2:	2e01      	cmp	r6, #1
   12bf4:	d005      	beq.n	12c02 <get_fat.part.4+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   12bf6:	2001      	movs	r0, #1
   12bf8:	4240      	negs	r0, r0
}
   12bfa:	bc0c      	pop	{r2, r3}
   12bfc:	4690      	mov	r8, r2
   12bfe:	4699      	mov	r9, r3
   12c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12c02:	6a03      	ldr	r3, [r0, #32]
		bc = (UINT)clst; bc += bc / 2;
   12c04:	084f      	lsrs	r7, r1, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12c06:	469c      	mov	ip, r3
		bc = (UINT)clst; bc += bc / 2;
   12c08:	187f      	adds	r7, r7, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12c0a:	0a79      	lsrs	r1, r7, #9
   12c0c:	4b29      	ldr	r3, [pc, #164]	; (12cb4 <get_fat.part.4+0xd8>)
   12c0e:	4461      	add	r1, ip
   12c10:	4698      	mov	r8, r3
   12c12:	4798      	blx	r3
   12c14:	2800      	cmp	r0, #0
   12c16:	d1ee      	bne.n	12bf6 <get_fat.part.4+0x1a>
		wc = fs->win[bc % SS(fs)]; bc++;
   12c18:	05fb      	lsls	r3, r7, #23
   12c1a:	0ddb      	lsrs	r3, r3, #23
   12c1c:	18e3      	adds	r3, r4, r3
   12c1e:	3330      	adds	r3, #48	; 0x30
   12c20:	781b      	ldrb	r3, [r3, #0]
   12c22:	3701      	adds	r7, #1
   12c24:	4699      	mov	r9, r3
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   12c26:	6a23      	ldr	r3, [r4, #32]
   12c28:	0a79      	lsrs	r1, r7, #9
   12c2a:	469c      	mov	ip, r3
   12c2c:	0020      	movs	r0, r4
   12c2e:	4461      	add	r1, ip
   12c30:	47c0      	blx	r8
   12c32:	2800      	cmp	r0, #0
   12c34:	d1df      	bne.n	12bf6 <get_fat.part.4+0x1a>
		wc |= fs->win[bc % SS(fs)] << 8;
   12c36:	464b      	mov	r3, r9
   12c38:	05ff      	lsls	r7, r7, #23
   12c3a:	0dff      	lsrs	r7, r7, #23
   12c3c:	19e4      	adds	r4, r4, r7
   12c3e:	3430      	adds	r4, #48	; 0x30
   12c40:	7820      	ldrb	r0, [r4, #0]
   12c42:	0200      	lsls	r0, r0, #8
   12c44:	4318      	orrs	r0, r3
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   12c46:	422e      	tst	r6, r5
   12c48:	d11e      	bne.n	12c88 <get_fat.part.4+0xac>
   12c4a:	0500      	lsls	r0, r0, #20
   12c4c:	0d00      	lsrs	r0, r0, #20
   12c4e:	e7d4      	b.n	12bfa <get_fat.part.4+0x1e>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   12c50:	6a03      	ldr	r3, [r0, #32]
   12c52:	09c9      	lsrs	r1, r1, #7
   12c54:	469c      	mov	ip, r3
   12c56:	4b17      	ldr	r3, [pc, #92]	; (12cb4 <get_fat.part.4+0xd8>)
   12c58:	4461      	add	r1, ip
   12c5a:	4798      	blx	r3
   12c5c:	2800      	cmp	r0, #0
   12c5e:	d1ca      	bne.n	12bf6 <get_fat.part.4+0x1a>
		p = &fs->win[clst * 4 % SS(fs)];
   12c60:	23fe      	movs	r3, #254	; 0xfe
   12c62:	00ad      	lsls	r5, r5, #2
   12c64:	005b      	lsls	r3, r3, #1
   12c66:	401d      	ands	r5, r3
   12c68:	002b      	movs	r3, r5
   12c6a:	3330      	adds	r3, #48	; 0x30
   12c6c:	18e3      	adds	r3, r4, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   12c6e:	78d8      	ldrb	r0, [r3, #3]
   12c70:	789a      	ldrb	r2, [r3, #2]
   12c72:	1964      	adds	r4, r4, r5
   12c74:	0412      	lsls	r2, r2, #16
   12c76:	0600      	lsls	r0, r0, #24
   12c78:	3430      	adds	r4, #48	; 0x30
   12c7a:	4310      	orrs	r0, r2
   12c7c:	785b      	ldrb	r3, [r3, #1]
   12c7e:	7822      	ldrb	r2, [r4, #0]
   12c80:	021b      	lsls	r3, r3, #8
   12c82:	4310      	orrs	r0, r2
   12c84:	4318      	orrs	r0, r3
   12c86:	0100      	lsls	r0, r0, #4
   12c88:	0900      	lsrs	r0, r0, #4
   12c8a:	e7b6      	b.n	12bfa <get_fat.part.4+0x1e>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   12c8c:	6a03      	ldr	r3, [r0, #32]
   12c8e:	0a09      	lsrs	r1, r1, #8
   12c90:	469c      	mov	ip, r3
   12c92:	4b08      	ldr	r3, [pc, #32]	; (12cb4 <get_fat.part.4+0xd8>)
   12c94:	4461      	add	r1, ip
   12c96:	4798      	blx	r3
   12c98:	2800      	cmp	r0, #0
   12c9a:	d1ac      	bne.n	12bf6 <get_fat.part.4+0x1a>
		p = &fs->win[clst * 2 % SS(fs)];
   12c9c:	23ff      	movs	r3, #255	; 0xff
   12c9e:	006d      	lsls	r5, r5, #1
   12ca0:	005b      	lsls	r3, r3, #1
   12ca2:	401d      	ands	r5, r3
		return LD_WORD(p);
   12ca4:	1964      	adds	r4, r4, r5
   12ca6:	3430      	adds	r4, #48	; 0x30
   12ca8:	7863      	ldrb	r3, [r4, #1]
   12caa:	7820      	ldrb	r0, [r4, #0]
   12cac:	021b      	lsls	r3, r3, #8
   12cae:	4318      	orrs	r0, r3
   12cb0:	e7a3      	b.n	12bfa <get_fat.part.4+0x1e>
   12cb2:	46c0      	nop			; (mov r8, r8)
   12cb4:	000126f9 	.word	0x000126f9

00012cb8 <dir_sdi>:
{
   12cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cba:	0005      	movs	r5, r0
	dj->index = idx;
   12cbc:	80e9      	strh	r1, [r5, #6]
{
   12cbe:	000c      	movs	r4, r1
	clst = dj->sclust;
   12cc0:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   12cc2:	2901      	cmp	r1, #1
   12cc4:	d003      	beq.n	12cce <dir_sdi+0x16>
   12cc6:	6800      	ldr	r0, [r0, #0]
   12cc8:	6983      	ldr	r3, [r0, #24]
   12cca:	4299      	cmp	r1, r3
   12ccc:	d301      	bcc.n	12cd2 <dir_sdi+0x1a>
		return FR_INT_ERR;
   12cce:	2002      	movs	r0, #2
}
   12cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   12cd2:	2900      	cmp	r1, #0
   12cd4:	d117      	bne.n	12d06 <dir_sdi+0x4e>
   12cd6:	7803      	ldrb	r3, [r0, #0]
   12cd8:	2b03      	cmp	r3, #3
   12cda:	d011      	beq.n	12d00 <dir_sdi+0x48>
		dj->clust = clst;
   12cdc:	2300      	movs	r3, #0
   12cde:	60eb      	str	r3, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   12ce0:	8903      	ldrh	r3, [r0, #8]
   12ce2:	42a3      	cmp	r3, r4
   12ce4:	d9f3      	bls.n	12cce <dir_sdi+0x16>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12ce6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   12ce8:	0923      	lsrs	r3, r4, #4
   12cea:	4694      	mov	ip, r2
   12cec:	4463      	add	r3, ip
   12cee:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   12cf0:	230f      	movs	r3, #15
   12cf2:	401c      	ands	r4, r3
   12cf4:	3030      	adds	r0, #48	; 0x30
   12cf6:	0164      	lsls	r4, r4, #5
   12cf8:	1900      	adds	r0, r0, r4
   12cfa:	6168      	str	r0, [r5, #20]
	return FR_OK;	/* Seek succeeded */
   12cfc:	2000      	movs	r0, #0
   12cfe:	e7e7      	b.n	12cd0 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   12d00:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   12d02:	2900      	cmp	r1, #0
   12d04:	d0ea      	beq.n	12cdc <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   12d06:	7886      	ldrb	r6, [r0, #2]
   12d08:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   12d0a:	42b4      	cmp	r4, r6
   12d0c:	d315      	bcc.n	12d3a <dir_sdi+0x82>
   12d0e:	4f13      	ldr	r7, [pc, #76]	; (12d5c <dir_sdi+0xa4>)
   12d10:	e00d      	b.n	12d2e <dir_sdi+0x76>
   12d12:	47b8      	blx	r7
   12d14:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12d16:	1c43      	adds	r3, r0, #1
   12d18:	d01e      	beq.n	12d58 <dir_sdi+0xa0>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   12d1a:	2801      	cmp	r0, #1
   12d1c:	d9d7      	bls.n	12cce <dir_sdi+0x16>
   12d1e:	6828      	ldr	r0, [r5, #0]
   12d20:	6983      	ldr	r3, [r0, #24]
   12d22:	428b      	cmp	r3, r1
   12d24:	d9d3      	bls.n	12cce <dir_sdi+0x16>
			idx -= ic;
   12d26:	1ba4      	subs	r4, r4, r6
   12d28:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
   12d2a:	42a6      	cmp	r6, r4
   12d2c:	d805      	bhi.n	12d3a <dir_sdi+0x82>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12d2e:	2901      	cmp	r1, #1
   12d30:	d9cd      	bls.n	12cce <dir_sdi+0x16>
   12d32:	6983      	ldr	r3, [r0, #24]
   12d34:	428b      	cmp	r3, r1
   12d36:	d9ca      	bls.n	12cce <dir_sdi+0x16>
   12d38:	e7eb      	b.n	12d12 <dir_sdi+0x5a>
		dj->clust = clst;
   12d3a:	60e9      	str	r1, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   12d3c:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
   12d3e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   12d40:	3b02      	subs	r3, #2
   12d42:	2200      	movs	r2, #0
   12d44:	4299      	cmp	r1, r3
   12d46:	d203      	bcs.n	12d50 <dir_sdi+0x98>
	return clst * fs->csize + fs->database;
   12d48:	7883      	ldrb	r3, [r0, #2]
   12d4a:	4359      	muls	r1, r3
   12d4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12d4e:	18ca      	adds	r2, r1, r3
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   12d50:	0921      	lsrs	r1, r4, #4
   12d52:	1889      	adds	r1, r1, r2
   12d54:	6129      	str	r1, [r5, #16]
   12d56:	e7cb      	b.n	12cf0 <dir_sdi+0x38>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   12d58:	2001      	movs	r0, #1
   12d5a:	e7b9      	b.n	12cd0 <dir_sdi+0x18>
   12d5c:	00012bdd 	.word	0x00012bdd

00012d60 <put_fat.part.5>:
static FRESULT put_fat (
   12d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d62:	464f      	mov	r7, r9
   12d64:	4646      	mov	r6, r8
   12d66:	46d6      	mov	lr, sl
   12d68:	b5c0      	push	{r6, r7, lr}
		switch (fs->fs_type) {
   12d6a:	7807      	ldrb	r7, [r0, #0]
static FRESULT put_fat (
   12d6c:	0004      	movs	r4, r0
   12d6e:	000d      	movs	r5, r1
   12d70:	4690      	mov	r8, r2
		switch (fs->fs_type) {
   12d72:	2f02      	cmp	r7, #2
   12d74:	d052      	beq.n	12e1c <put_fat.part.5+0xbc>
   12d76:	2f03      	cmp	r7, #3
   12d78:	d032      	beq.n	12de0 <put_fat.part.5+0x80>
			res = FR_INT_ERR;
   12d7a:	2602      	movs	r6, #2
		switch (fs->fs_type) {
   12d7c:	2f01      	cmp	r7, #1
   12d7e:	d007      	beq.n	12d90 <put_fat.part.5+0x30>
		fs->wflag = 1;
   12d80:	2301      	movs	r3, #1
}
   12d82:	0030      	movs	r0, r6
		fs->wflag = 1;
   12d84:	7123      	strb	r3, [r4, #4]
}
   12d86:	bc1c      	pop	{r2, r3, r4}
   12d88:	4690      	mov	r8, r2
   12d8a:	4699      	mov	r9, r3
   12d8c:	46a2      	mov	sl, r4
   12d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = clst; bc += bc / 2;
   12d90:	084b      	lsrs	r3, r1, #1
   12d92:	4699      	mov	r9, r3
   12d94:	4489      	add	r9, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12d96:	464b      	mov	r3, r9
   12d98:	0a59      	lsrs	r1, r3, #9
   12d9a:	6a03      	ldr	r3, [r0, #32]
   12d9c:	469c      	mov	ip, r3
   12d9e:	4b3b      	ldr	r3, [pc, #236]	; (12e8c <put_fat.part.5+0x12c>)
   12da0:	4461      	add	r1, ip
   12da2:	469a      	mov	sl, r3
   12da4:	4798      	blx	r3
   12da6:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   12da8:	d1ea      	bne.n	12d80 <put_fat.part.5+0x20>
			p = &fs->win[bc % SS(fs)];
   12daa:	464b      	mov	r3, r9
   12dac:	05db      	lsls	r3, r3, #23
   12dae:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12db0:	18e3      	adds	r3, r4, r3
   12db2:	3330      	adds	r3, #48	; 0x30
   12db4:	422f      	tst	r7, r5
   12db6:	d045      	beq.n	12e44 <put_fat.part.5+0xe4>
   12db8:	220f      	movs	r2, #15
   12dba:	7819      	ldrb	r1, [r3, #0]
			bc++;
   12dbc:	464d      	mov	r5, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12dbe:	4011      	ands	r1, r2
   12dc0:	4642      	mov	r2, r8
   12dc2:	0112      	lsls	r2, r2, #4
   12dc4:	430a      	orrs	r2, r1
   12dc6:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12dc8:	6a23      	ldr	r3, [r4, #32]
			bc++;
   12dca:	3501      	adds	r5, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12dcc:	469c      	mov	ip, r3
   12dce:	0a69      	lsrs	r1, r5, #9
			fs->wflag = 1;
   12dd0:	7127      	strb	r7, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12dd2:	4461      	add	r1, ip
   12dd4:	0020      	movs	r0, r4
   12dd6:	47d0      	blx	sl
			if (res != FR_OK) break;
   12dd8:	2800      	cmp	r0, #0
   12dda:	d04f      	beq.n	12e7c <put_fat.part.5+0x11c>
   12ddc:	0006      	movs	r6, r0
   12dde:	e7cf      	b.n	12d80 <put_fat.part.5+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12de0:	6a03      	ldr	r3, [r0, #32]
   12de2:	09c9      	lsrs	r1, r1, #7
   12de4:	469c      	mov	ip, r3
   12de6:	4b29      	ldr	r3, [pc, #164]	; (12e8c <put_fat.part.5+0x12c>)
   12de8:	4461      	add	r1, ip
   12dea:	4798      	blx	r3
   12dec:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   12dee:	d1c7      	bne.n	12d80 <put_fat.part.5+0x20>
			p = &fs->win[clst * 4 % SS(fs)];
   12df0:	23fe      	movs	r3, #254	; 0xfe
   12df2:	00ad      	lsls	r5, r5, #2
   12df4:	005b      	lsls	r3, r3, #1
   12df6:	401d      	ands	r5, r3
   12df8:	002a      	movs	r2, r5
			val |= LD_DWORD(p) & 0xF0000000;
   12dfa:	4647      	mov	r7, r8
			p = &fs->win[clst * 4 % SS(fs)];
   12dfc:	3230      	adds	r2, #48	; 0x30
   12dfe:	18a2      	adds	r2, r4, r2
			val |= LD_DWORD(p) & 0xF0000000;
   12e00:	78d3      	ldrb	r3, [r2, #3]
   12e02:	1965      	adds	r5, r4, r5
   12e04:	091b      	lsrs	r3, r3, #4
   12e06:	071b      	lsls	r3, r3, #28
   12e08:	431f      	orrs	r7, r3
			ST_DWORD(p, val);
   12e0a:	0a3b      	lsrs	r3, r7, #8
			val |= LD_DWORD(p) & 0xF0000000;
   12e0c:	3530      	adds	r5, #48	; 0x30
			ST_DWORD(p, val);
   12e0e:	702f      	strb	r7, [r5, #0]
   12e10:	7053      	strb	r3, [r2, #1]
   12e12:	0c3b      	lsrs	r3, r7, #16
   12e14:	0e3f      	lsrs	r7, r7, #24
   12e16:	7093      	strb	r3, [r2, #2]
   12e18:	70d7      	strb	r7, [r2, #3]
   12e1a:	e7b1      	b.n	12d80 <put_fat.part.5+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12e1c:	6a03      	ldr	r3, [r0, #32]
   12e1e:	0a09      	lsrs	r1, r1, #8
   12e20:	469c      	mov	ip, r3
   12e22:	4b1a      	ldr	r3, [pc, #104]	; (12e8c <put_fat.part.5+0x12c>)
   12e24:	4461      	add	r1, ip
   12e26:	4798      	blx	r3
   12e28:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
   12e2a:	d1a9      	bne.n	12d80 <put_fat.part.5+0x20>
			p = &fs->win[clst * 2 % SS(fs)];
   12e2c:	006b      	lsls	r3, r5, #1
   12e2e:	25ff      	movs	r5, #255	; 0xff
			ST_WORD(p, (WORD)val);
   12e30:	4642      	mov	r2, r8
			p = &fs->win[clst * 2 % SS(fs)];
   12e32:	006d      	lsls	r5, r5, #1
   12e34:	402b      	ands	r3, r5
			ST_WORD(p, (WORD)val);
   12e36:	18e3      	adds	r3, r4, r3
   12e38:	3330      	adds	r3, #48	; 0x30
   12e3a:	701a      	strb	r2, [r3, #0]
   12e3c:	4642      	mov	r2, r8
   12e3e:	0a17      	lsrs	r7, r2, #8
   12e40:	705f      	strb	r7, [r3, #1]
   12e42:	e79d      	b.n	12d80 <put_fat.part.5+0x20>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12e44:	4642      	mov	r2, r8
   12e46:	701a      	strb	r2, [r3, #0]
			bc++;
   12e48:	464d      	mov	r5, r9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12e4a:	6a23      	ldr	r3, [r4, #32]
			bc++;
   12e4c:	3501      	adds	r5, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12e4e:	469c      	mov	ip, r3
   12e50:	0a69      	lsrs	r1, r5, #9
			fs->wflag = 1;
   12e52:	7127      	strb	r7, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12e54:	4461      	add	r1, ip
   12e56:	0020      	movs	r0, r4
   12e58:	47d0      	blx	sl
			if (res != FR_OK) break;
   12e5a:	2800      	cmp	r0, #0
   12e5c:	d1be      	bne.n	12ddc <put_fat.part.5+0x7c>
			p = &fs->win[bc % SS(fs)];
   12e5e:	05ed      	lsls	r5, r5, #23
   12e60:	0ded      	lsrs	r5, r5, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12e62:	1965      	adds	r5, r4, r5
   12e64:	002b      	movs	r3, r5
   12e66:	4641      	mov	r1, r8
   12e68:	220f      	movs	r2, #15
   12e6a:	3330      	adds	r3, #48	; 0x30
   12e6c:	781b      	ldrb	r3, [r3, #0]
   12e6e:	0a0f      	lsrs	r7, r1, #8
   12e70:	4393      	bics	r3, r2
   12e72:	4017      	ands	r7, r2
   12e74:	431f      	orrs	r7, r3
   12e76:	3530      	adds	r5, #48	; 0x30
   12e78:	702f      	strb	r7, [r5, #0]
   12e7a:	e781      	b.n	12d80 <put_fat.part.5+0x20>
   12e7c:	4643      	mov	r3, r8
			p = &fs->win[bc % SS(fs)];
   12e7e:	05ed      	lsls	r5, r5, #23
   12e80:	0ded      	lsrs	r5, r5, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12e82:	091f      	lsrs	r7, r3, #4
   12e84:	b2ff      	uxtb	r7, r7
   12e86:	1965      	adds	r5, r4, r5
   12e88:	e7f5      	b.n	12e76 <put_fat.part.5+0x116>
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	000126f9 	.word	0x000126f9

00012e90 <create_chain>:
{
   12e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e92:	46c6      	mov	lr, r8
   12e94:	0005      	movs	r5, r0
   12e96:	b500      	push	{lr}
   12e98:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   12e9a:	2900      	cmp	r1, #0
   12e9c:	d122      	bne.n	12ee4 <create_chain+0x54>
		scl = fs->last_clust;			/* Get suggested start point */
   12e9e:	68c6      	ldr	r6, [r0, #12]
   12ea0:	6983      	ldr	r3, [r0, #24]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12ea2:	2e00      	cmp	r6, #0
   12ea4:	d12d      	bne.n	12f02 <create_chain+0x72>
   12ea6:	3601      	adds	r6, #1
   12ea8:	0034      	movs	r4, r6
   12eaa:	4f2c      	ldr	r7, [pc, #176]	; (12f5c <create_chain+0xcc>)
   12eac:	e010      	b.n	12ed0 <create_chain+0x40>
			if (ncl > scl) return 0;	/* No free cluster */
   12eae:	2e01      	cmp	r6, #1
   12eb0:	d92b      	bls.n	12f0a <create_chain+0x7a>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12eb2:	2b02      	cmp	r3, #2
   12eb4:	d911      	bls.n	12eda <create_chain+0x4a>
			ncl = 2;
   12eb6:	2402      	movs	r4, #2
   12eb8:	0021      	movs	r1, r4
   12eba:	0028      	movs	r0, r5
   12ebc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   12ebe:	2800      	cmp	r0, #0
   12ec0:	d025      	beq.n	12f0e <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   12ec2:	1c43      	adds	r3, r0, #1
   12ec4:	d047      	beq.n	12f56 <create_chain+0xc6>
   12ec6:	2801      	cmp	r0, #1
   12ec8:	d007      	beq.n	12eda <create_chain+0x4a>
		if (ncl == scl) return 0;		/* No free cluster */
   12eca:	42a6      	cmp	r6, r4
   12ecc:	d01d      	beq.n	12f0a <create_chain+0x7a>
   12ece:	69ab      	ldr	r3, [r5, #24]
		ncl++;							/* Next cluster */
   12ed0:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   12ed2:	429c      	cmp	r4, r3
   12ed4:	d2eb      	bcs.n	12eae <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12ed6:	2c01      	cmp	r4, #1
   12ed8:	d8ee      	bhi.n	12eb8 <create_chain+0x28>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   12eda:	2401      	movs	r4, #1
}
   12edc:	0020      	movs	r0, r4
   12ede:	bc04      	pop	{r2}
   12ee0:	4690      	mov	r8, r2
   12ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12ee4:	2901      	cmp	r1, #1
   12ee6:	d9f8      	bls.n	12eda <create_chain+0x4a>
   12ee8:	6983      	ldr	r3, [r0, #24]
   12eea:	4299      	cmp	r1, r3
   12eec:	d2f5      	bcs.n	12eda <create_chain+0x4a>
   12eee:	4b1b      	ldr	r3, [pc, #108]	; (12f5c <create_chain+0xcc>)
   12ef0:	4798      	blx	r3
   12ef2:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
   12ef4:	2801      	cmp	r0, #1
   12ef6:	d9f0      	bls.n	12eda <create_chain+0x4a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12ef8:	69ab      	ldr	r3, [r5, #24]
   12efa:	4283      	cmp	r3, r0
   12efc:	d8ee      	bhi.n	12edc <create_chain+0x4c>
   12efe:	4646      	mov	r6, r8
   12f00:	e7d2      	b.n	12ea8 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   12f02:	429e      	cmp	r6, r3
   12f04:	d3d0      	bcc.n	12ea8 <create_chain+0x18>
   12f06:	2601      	movs	r6, #1
   12f08:	e7ce      	b.n	12ea8 <create_chain+0x18>
			if (ncl > scl) return 0;	/* No free cluster */
   12f0a:	2400      	movs	r4, #0
   12f0c:	e7e6      	b.n	12edc <create_chain+0x4c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12f0e:	69ab      	ldr	r3, [r5, #24]
   12f10:	42a3      	cmp	r3, r4
   12f12:	d9e2      	bls.n	12eda <create_chain+0x4a>
   12f14:	4a12      	ldr	r2, [pc, #72]	; (12f60 <create_chain+0xd0>)
   12f16:	0021      	movs	r1, r4
   12f18:	0028      	movs	r0, r5
   12f1a:	4e12      	ldr	r6, [pc, #72]	; (12f64 <create_chain+0xd4>)
   12f1c:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
   12f1e:	2800      	cmp	r0, #0
   12f20:	d117      	bne.n	12f52 <create_chain+0xc2>
   12f22:	4643      	mov	r3, r8
   12f24:	2b00      	cmp	r3, #0
   12f26:	d00b      	beq.n	12f40 <create_chain+0xb0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   12f28:	4643      	mov	r3, r8
   12f2a:	2b01      	cmp	r3, #1
   12f2c:	d9d5      	bls.n	12eda <create_chain+0x4a>
   12f2e:	69ab      	ldr	r3, [r5, #24]
   12f30:	4598      	cmp	r8, r3
   12f32:	d2d2      	bcs.n	12eda <create_chain+0x4a>
   12f34:	0022      	movs	r2, r4
   12f36:	4641      	mov	r1, r8
   12f38:	0028      	movs	r0, r5
   12f3a:	47b0      	blx	r6
	if (res == FR_OK) {
   12f3c:	2800      	cmp	r0, #0
   12f3e:	d108      	bne.n	12f52 <create_chain+0xc2>
		if (fs->free_clust != 0xFFFFFFFF) {
   12f40:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
   12f42:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   12f44:	1c5a      	adds	r2, r3, #1
   12f46:	d0c9      	beq.n	12edc <create_chain+0x4c>
			fs->free_clust--;
   12f48:	3b01      	subs	r3, #1
   12f4a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   12f4c:	2301      	movs	r3, #1
   12f4e:	716b      	strb	r3, [r5, #5]
   12f50:	e7c4      	b.n	12edc <create_chain+0x4c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   12f52:	2801      	cmp	r0, #1
   12f54:	d1c1      	bne.n	12eda <create_chain+0x4a>
			if (ncl > scl) return 0;	/* No free cluster */
   12f56:	2401      	movs	r4, #1
   12f58:	4264      	negs	r4, r4
   12f5a:	e7bf      	b.n	12edc <create_chain+0x4c>
   12f5c:	00012bdd 	.word	0x00012bdd
   12f60:	0fffffff 	.word	0x0fffffff
   12f64:	00012d61 	.word	0x00012d61

00012f68 <dir_next>:
{
   12f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f6a:	464e      	mov	r6, r9
   12f6c:	4645      	mov	r5, r8
   12f6e:	46de      	mov	lr, fp
   12f70:	4657      	mov	r7, sl
   12f72:	b5e0      	push	{r5, r6, r7, lr}
	i = dj->index + 1;
   12f74:	88c4      	ldrh	r4, [r0, #6]
{
   12f76:	0005      	movs	r5, r0
	i = dj->index + 1;
   12f78:	3401      	adds	r4, #1
   12f7a:	b2a4      	uxth	r4, r4
{
   12f7c:	000e      	movs	r6, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12f7e:	2c00      	cmp	r4, #0
   12f80:	d106      	bne.n	12f90 <dir_next+0x28>
		return FR_NO_FILE;
   12f82:	2004      	movs	r0, #4
}
   12f84:	bc3c      	pop	{r2, r3, r4, r5}
   12f86:	4690      	mov	r8, r2
   12f88:	4699      	mov	r9, r3
   12f8a:	46a2      	mov	sl, r4
   12f8c:	46ab      	mov	fp, r5
   12f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   12f90:	6903      	ldr	r3, [r0, #16]
   12f92:	2b00      	cmp	r3, #0
   12f94:	d0f5      	beq.n	12f82 <dir_next+0x1a>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   12f96:	270f      	movs	r7, #15
   12f98:	4027      	ands	r7, r4
   12f9a:	d007      	beq.n	12fac <dir_next+0x44>
   12f9c:	6800      	ldr	r0, [r0, #0]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12f9e:	3030      	adds	r0, #48	; 0x30
   12fa0:	017f      	lsls	r7, r7, #5
   12fa2:	19c7      	adds	r7, r0, r7
	dj->index = i;
   12fa4:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   12fa6:	616f      	str	r7, [r5, #20]
	return FR_OK;
   12fa8:	2000      	movs	r0, #0
   12faa:	e7eb      	b.n	12f84 <dir_next+0x1c>
		if (dj->clust == 0) {	/* Static table */
   12fac:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
   12fae:	3301      	adds	r3, #1
   12fb0:	6103      	str	r3, [r0, #16]
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12fb2:	6800      	ldr	r0, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
   12fb4:	2900      	cmp	r1, #0
   12fb6:	d00b      	beq.n	12fd0 <dir_next+0x68>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   12fb8:	7883      	ldrb	r3, [r0, #2]
   12fba:	0922      	lsrs	r2, r4, #4
   12fbc:	3b01      	subs	r3, #1
   12fbe:	421a      	tst	r2, r3
   12fc0:	d1ed      	bne.n	12f9e <dir_next+0x36>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   12fc2:	2901      	cmp	r1, #1
   12fc4:	d902      	bls.n	12fcc <dir_next+0x64>
   12fc6:	6983      	ldr	r3, [r0, #24]
   12fc8:	4299      	cmp	r1, r3
   12fca:	d305      	bcc.n	12fd8 <dir_next+0x70>
				if (clst <= 1) return FR_INT_ERR;
   12fcc:	2002      	movs	r0, #2
   12fce:	e7d9      	b.n	12f84 <dir_next+0x1c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   12fd0:	8903      	ldrh	r3, [r0, #8]
   12fd2:	42a3      	cmp	r3, r4
   12fd4:	d9d5      	bls.n	12f82 <dir_next+0x1a>
   12fd6:	e7e2      	b.n	12f9e <dir_next+0x36>
   12fd8:	4b34      	ldr	r3, [pc, #208]	; (130ac <dir_next+0x144>)
   12fda:	4798      	blx	r3
   12fdc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   12fde:	0003      	movs	r3, r0
   12fe0:	2801      	cmp	r0, #1
   12fe2:	d9f3      	bls.n	12fcc <dir_next+0x64>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12fe4:	3301      	adds	r3, #1
   12fe6:	d05e      	beq.n	130a6 <dir_next+0x13e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   12fe8:	6828      	ldr	r0, [r5, #0]
   12fea:	6983      	ldr	r3, [r0, #24]
   12fec:	4543      	cmp	r3, r8
   12fee:	d90e      	bls.n	1300e <dir_next+0xa6>
   12ff0:	4643      	mov	r3, r8
   12ff2:	1e9e      	subs	r6, r3, #2
				dj->clust = clst;				/* Initialize data for new cluster */
   12ff4:	4643      	mov	r3, r8
   12ff6:	60eb      	str	r3, [r5, #12]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   12ff8:	6983      	ldr	r3, [r0, #24]
   12ffa:	2200      	movs	r2, #0
   12ffc:	3b02      	subs	r3, #2
   12ffe:	429e      	cmp	r6, r3
   13000:	d203      	bcs.n	1300a <dir_next+0xa2>
	return clst * fs->csize + fs->database;
   13002:	7883      	ldrb	r3, [r0, #2]
   13004:	435e      	muls	r6, r3
   13006:	6a83      	ldr	r3, [r0, #40]	; 0x28
   13008:	18f2      	adds	r2, r6, r3
				dj->sect = clust2sect(dj->fs, clst);
   1300a:	612a      	str	r2, [r5, #16]
   1300c:	e7c7      	b.n	12f9e <dir_next+0x36>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   1300e:	2e00      	cmp	r6, #0
   13010:	d0b7      	beq.n	12f82 <dir_next+0x1a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   13012:	4b27      	ldr	r3, [pc, #156]	; (130b0 <dir_next+0x148>)
   13014:	68e9      	ldr	r1, [r5, #12]
   13016:	4798      	blx	r3
   13018:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1301a:	4643      	mov	r3, r8
   1301c:	2007      	movs	r0, #7
   1301e:	2b00      	cmp	r3, #0
   13020:	d0b0      	beq.n	12f84 <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
   13022:	2b01      	cmp	r3, #1
   13024:	d0d2      	beq.n	12fcc <dir_next+0x64>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   13026:	3301      	adds	r3, #1
   13028:	d03d      	beq.n	130a6 <dir_next+0x13e>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1302a:	4b22      	ldr	r3, [pc, #136]	; (130b4 <dir_next+0x14c>)
   1302c:	2100      	movs	r1, #0
   1302e:	6828      	ldr	r0, [r5, #0]
   13030:	469a      	mov	sl, r3
   13032:	4798      	blx	r3
   13034:	2800      	cmp	r0, #0
   13036:	d136      	bne.n	130a6 <dir_next+0x13e>
   13038:	218c      	movs	r1, #140	; 0x8c
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1303a:	682a      	ldr	r2, [r5, #0]
   1303c:	0089      	lsls	r1, r1, #2
   1303e:	0013      	movs	r3, r2
   13040:	468c      	mov	ip, r1
   13042:	3330      	adds	r3, #48	; 0x30
   13044:	4462      	add	r2, ip
		*d++ = (BYTE)val;
   13046:	7018      	strb	r0, [r3, #0]
   13048:	3301      	adds	r3, #1
	while (cnt--)
   1304a:	4293      	cmp	r3, r2
   1304c:	d1fb      	bne.n	13046 <dir_next+0xde>
	clst -= 2;
   1304e:	4643      	mov	r3, r8
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   13050:	682a      	ldr	r2, [r5, #0]
	clst -= 2;
   13052:	1e9e      	subs	r6, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   13054:	6993      	ldr	r3, [r2, #24]
   13056:	1e99      	subs	r1, r3, #2
   13058:	2300      	movs	r3, #0
   1305a:	428e      	cmp	r6, r1
   1305c:	d204      	bcs.n	13068 <dir_next+0x100>
	return clst * fs->csize + fs->database;
   1305e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   13060:	7893      	ldrb	r3, [r2, #2]
   13062:	468c      	mov	ip, r1
   13064:	4373      	muls	r3, r6
   13066:	4463      	add	r3, ip
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   13068:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1306a:	2300      	movs	r3, #0
   1306c:	4699      	mov	r9, r3
						dj->fs->wflag = 1;
   1306e:	3301      	adds	r3, #1
   13070:	469b      	mov	fp, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   13072:	e00e      	b.n	13092 <dir_next+0x12a>
						dj->fs->wflag = 1;
   13074:	465a      	mov	r2, fp
   13076:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   13078:	2100      	movs	r1, #0
   1307a:	6828      	ldr	r0, [r5, #0]
   1307c:	47d0      	blx	sl
   1307e:	2800      	cmp	r0, #0
   13080:	d111      	bne.n	130a6 <dir_next+0x13e>
						dj->fs->winsect++;
   13082:	682a      	ldr	r2, [r5, #0]
   13084:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   13086:	3301      	adds	r3, #1
   13088:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   1308a:	464b      	mov	r3, r9
   1308c:	3301      	adds	r3, #1
   1308e:	b2db      	uxtb	r3, r3
   13090:	4699      	mov	r9, r3
   13092:	682b      	ldr	r3, [r5, #0]
   13094:	789a      	ldrb	r2, [r3, #2]
   13096:	454a      	cmp	r2, r9
   13098:	d8ec      	bhi.n	13074 <dir_next+0x10c>
					dj->fs->winsect -= c;						/* Rewind window address */
   1309a:	4649      	mov	r1, r9
   1309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1309e:	1a52      	subs	r2, r2, r1
   130a0:	62da      	str	r2, [r3, #44]	; 0x2c
   130a2:	6828      	ldr	r0, [r5, #0]
   130a4:	e7a6      	b.n	12ff4 <dir_next+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   130a6:	2001      	movs	r0, #1
   130a8:	e76c      	b.n	12f84 <dir_next+0x1c>
   130aa:	46c0      	nop			; (mov r8, r8)
   130ac:	00012bdd 	.word	0x00012bdd
   130b0:	00012e91 	.word	0x00012e91
   130b4:	000126f9 	.word	0x000126f9

000130b8 <follow_path>:
{
   130b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130ba:	4645      	mov	r5, r8
   130bc:	46de      	mov	lr, fp
   130be:	4657      	mov	r7, sl
   130c0:	464e      	mov	r6, r9
   130c2:	b5e0      	push	{r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   130c4:	780b      	ldrb	r3, [r1, #0]
{
   130c6:	0005      	movs	r5, r0
   130c8:	000c      	movs	r4, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   130ca:	2b2f      	cmp	r3, #47	; 0x2f
   130cc:	d100      	bne.n	130d0 <follow_path+0x18>
   130ce:	e0ca      	b.n	13266 <follow_path+0x1ae>
   130d0:	2b5c      	cmp	r3, #92	; 0x5c
   130d2:	d100      	bne.n	130d6 <follow_path+0x1e>
   130d4:	e0c7      	b.n	13266 <follow_path+0x1ae>
	dj->sclust = 0;						/* Start from the root dir */
   130d6:	2700      	movs	r7, #0
   130d8:	60af      	str	r7, [r5, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   130da:	7822      	ldrb	r2, [r4, #0]
   130dc:	2a1f      	cmp	r2, #31
   130de:	d800      	bhi.n	130e2 <follow_path+0x2a>
   130e0:	e0c8      	b.n	13274 <follow_path+0x1bc>
	while (cnt--)
   130e2:	2108      	movs	r1, #8
   130e4:	468a      	mov	sl, r1
		res = dir_next(dj, 0);		/* Next entry */
   130e6:	4978      	ldr	r1, [pc, #480]	; (132c8 <follow_path+0x210>)
   130e8:	69ab      	ldr	r3, [r5, #24]
   130ea:	468b      	mov	fp, r1
   130ec:	e001      	b.n	130f2 <follow_path+0x3a>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   130ee:	3401      	adds	r4, #1
   130f0:	7822      	ldrb	r2, [r4, #0]
   130f2:	2a2f      	cmp	r2, #47	; 0x2f
   130f4:	d0fb      	beq.n	130ee <follow_path+0x36>
   130f6:	2a5c      	cmp	r2, #92	; 0x5c
   130f8:	d0f9      	beq.n	130ee <follow_path+0x36>
   130fa:	0018      	movs	r0, r3
   130fc:	001a      	movs	r2, r3
		*d++ = (BYTE)val;
   130fe:	2120      	movs	r1, #32
   13100:	300b      	adds	r0, #11
   13102:	7011      	strb	r1, [r2, #0]
   13104:	3201      	adds	r2, #1
	while (cnt--)
   13106:	4290      	cmp	r0, r2
   13108:	d1fb      	bne.n	13102 <follow_path+0x4a>
   1310a:	2200      	movs	r2, #0
   1310c:	2701      	movs	r7, #1
   1310e:	4694      	mov	ip, r2
   13110:	3208      	adds	r2, #8
   13112:	4691      	mov	r9, r2
   13114:	2200      	movs	r2, #0
   13116:	1b3f      	subs	r7, r7, r4
   13118:	4690      	mov	r8, r2
   1311a:	003a      	movs	r2, r7
   1311c:	0026      	movs	r6, r4
   1311e:	4667      	mov	r7, ip
   13120:	469c      	mov	ip, r3
   13122:	0013      	movs	r3, r2
		c = (BYTE)p[si++];
   13124:	7832      	ldrb	r2, [r6, #0]
   13126:	1999      	adds	r1, r3, r6
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   13128:	2a20      	cmp	r2, #32
   1312a:	d925      	bls.n	13178 <follow_path+0xc0>
   1312c:	2a2f      	cmp	r2, #47	; 0x2f
   1312e:	d04a      	beq.n	131c6 <follow_path+0x10e>
   13130:	2a5c      	cmp	r2, #92	; 0x5c
   13132:	d048      	beq.n	131c6 <follow_path+0x10e>
		if (c == '.' || i >= ni) {
   13134:	2a2e      	cmp	r2, #46	; 0x2e
   13136:	d02e      	beq.n	13196 <follow_path+0xde>
   13138:	45b9      	cmp	r9, r7
   1313a:	d924      	bls.n	13186 <follow_path+0xce>
		if (c >= 0x80) {				/* Extended char? */
   1313c:	b251      	sxtb	r1, r2
   1313e:	2900      	cmp	r1, #0
   13140:	db21      	blt.n	13186 <follow_path+0xce>
	while (*str && *str != chr) str++;
   13142:	2a22      	cmp	r2, #34	; 0x22
   13144:	d01f      	beq.n	13186 <follow_path+0xce>
   13146:	212a      	movs	r1, #42	; 0x2a
   13148:	4860      	ldr	r0, [pc, #384]	; (132cc <follow_path+0x214>)
   1314a:	428a      	cmp	r2, r1
   1314c:	d01b      	beq.n	13186 <follow_path+0xce>
   1314e:	3001      	adds	r0, #1
   13150:	7801      	ldrb	r1, [r0, #0]
   13152:	2900      	cmp	r1, #0
   13154:	d1f9      	bne.n	1314a <follow_path+0x92>
			if (IsUpper(c)) {			/* ASCII large capital? */
   13156:	0011      	movs	r1, r2
   13158:	3941      	subs	r1, #65	; 0x41
   1315a:	2919      	cmp	r1, #25
   1315c:	d827      	bhi.n	131ae <follow_path+0xf6>
				b |= 2;
   1315e:	4641      	mov	r1, r8
   13160:	2002      	movs	r0, #2
   13162:	4301      	orrs	r1, r0
   13164:	b2c9      	uxtb	r1, r1
   13166:	4688      	mov	r8, r1
			sfn[i++] = c;
   13168:	4661      	mov	r1, ip
   1316a:	3601      	adds	r6, #1
   1316c:	55ca      	strb	r2, [r1, r7]
   1316e:	3701      	adds	r7, #1
		c = (BYTE)p[si++];
   13170:	7832      	ldrb	r2, [r6, #0]
   13172:	1999      	adds	r1, r3, r6
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   13174:	2a20      	cmp	r2, #32
   13176:	d8d9      	bhi.n	1312c <follow_path+0x74>
   13178:	4663      	mov	r3, ip
   1317a:	46bc      	mov	ip, r7
	*path = &p[si];						/* Return pointer to the next segment */
   1317c:	1864      	adds	r4, r4, r1
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   1317e:	4661      	mov	r1, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   13180:	2204      	movs	r2, #4
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   13182:	2900      	cmp	r1, #0
   13184:	d126      	bne.n	131d4 <follow_path+0x11c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   13186:	2606      	movs	r6, #6
}
   13188:	0030      	movs	r0, r6
   1318a:	bc3c      	pop	{r2, r3, r4, r5}
   1318c:	4690      	mov	r8, r2
   1318e:	4699      	mov	r9, r3
   13190:	46a2      	mov	sl, r4
   13192:	46ab      	mov	fp, r5
   13194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   13196:	464a      	mov	r2, r9
   13198:	2a08      	cmp	r2, #8
   1319a:	d1f4      	bne.n	13186 <follow_path+0xce>
			b <<= 2; continue;
   1319c:	4642      	mov	r2, r8
   1319e:	0092      	lsls	r2, r2, #2
   131a0:	b2d2      	uxtb	r2, r2
   131a2:	4690      	mov	r8, r2
			i = 8; ni = 11;
   131a4:	220b      	movs	r2, #11
   131a6:	2708      	movs	r7, #8
   131a8:	4691      	mov	r9, r2
   131aa:	3601      	adds	r6, #1
   131ac:	e7e0      	b.n	13170 <follow_path+0xb8>
				if (IsLower(c)) {		/* ASCII small capital? */
   131ae:	0011      	movs	r1, r2
   131b0:	3961      	subs	r1, #97	; 0x61
   131b2:	2919      	cmp	r1, #25
   131b4:	d8d8      	bhi.n	13168 <follow_path+0xb0>
					b |= 1; c -= 0x20;
   131b6:	4641      	mov	r1, r8
   131b8:	2001      	movs	r0, #1
   131ba:	4301      	orrs	r1, r0
   131bc:	b2c9      	uxtb	r1, r1
   131be:	3a20      	subs	r2, #32
   131c0:	4688      	mov	r8, r1
   131c2:	b2d2      	uxtb	r2, r2
   131c4:	e7d0      	b.n	13168 <follow_path+0xb0>
   131c6:	4663      	mov	r3, ip
   131c8:	46bc      	mov	ip, r7
	*path = &p[si];						/* Return pointer to the next segment */
   131ca:	1864      	adds	r4, r4, r1
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   131cc:	4661      	mov	r1, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   131ce:	2200      	movs	r2, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   131d0:	2900      	cmp	r1, #0
   131d2:	d0d8      	beq.n	13186 <follow_path+0xce>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   131d4:	7819      	ldrb	r1, [r3, #0]
   131d6:	29e5      	cmp	r1, #229	; 0xe5
   131d8:	d073      	beq.n	132c2 <follow_path+0x20a>
	if (ni == 8) b <<= 2;
   131da:	4649      	mov	r1, r9
   131dc:	2908      	cmp	r1, #8
   131de:	d06b      	beq.n	132b8 <follow_path+0x200>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   131e0:	2103      	movs	r1, #3
   131e2:	4640      	mov	r0, r8
   131e4:	4001      	ands	r1, r0
   131e6:	2901      	cmp	r1, #1
   131e8:	d063      	beq.n	132b2 <follow_path+0x1fa>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   131ea:	210c      	movs	r1, #12
   131ec:	4640      	mov	r0, r8
   131ee:	4001      	ands	r1, r0
   131f0:	2904      	cmp	r1, #4
   131f2:	d05b      	beq.n	132ac <follow_path+0x1f4>
	sfn[NS] = c;		/* Store NT flag, File name is created */
   131f4:	72da      	strb	r2, [r3, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   131f6:	2100      	movs	r1, #0
   131f8:	0028      	movs	r0, r5
   131fa:	4b35      	ldr	r3, [pc, #212]	; (132d0 <follow_path+0x218>)
   131fc:	4798      	blx	r3
	if (res != FR_OK) return res;
   131fe:	2800      	cmp	r0, #0
   13200:	d14e      	bne.n	132a0 <follow_path+0x1e8>
   13202:	4b34      	ldr	r3, [pc, #208]	; (132d4 <follow_path+0x21c>)
   13204:	4699      	mov	r9, r3
		res = move_window(dj->fs, dj->sect);
   13206:	6929      	ldr	r1, [r5, #16]
   13208:	6828      	ldr	r0, [r5, #0]
   1320a:	47c8      	blx	r9
		if (res != FR_OK) break;
   1320c:	2800      	cmp	r0, #0
   1320e:	d13d      	bne.n	1328c <follow_path+0x1d4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   13210:	696b      	ldr	r3, [r5, #20]
		c = dir[DIR_Name];
   13212:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   13214:	2900      	cmp	r1, #0
   13216:	d03d      	beq.n	13294 <follow_path+0x1dc>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   13218:	7ada      	ldrb	r2, [r3, #11]
   1321a:	4690      	mov	r8, r2
   1321c:	4652      	mov	r2, sl
   1321e:	4646      	mov	r6, r8
   13220:	4232      	tst	r2, r6
   13222:	d12e      	bne.n	13282 <follow_path+0x1ca>
   13224:	69af      	ldr	r7, [r5, #24]
   13226:	2200      	movs	r2, #0
   13228:	e000      	b.n	1322c <follow_path+0x174>
   1322a:	5c99      	ldrb	r1, [r3, r2]
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   1322c:	5cbe      	ldrb	r6, [r7, r2]
   1322e:	428e      	cmp	r6, r1
   13230:	d127      	bne.n	13282 <follow_path+0x1ca>
   13232:	3201      	adds	r2, #1
   13234:	2a0b      	cmp	r2, #11
   13236:	d1f8      	bne.n	1322a <follow_path+0x172>
   13238:	0002      	movs	r2, r0
   1323a:	0018      	movs	r0, r3
   1323c:	003b      	movs	r3, r7
   1323e:	0017      	movs	r7, r2
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   13240:	7ada      	ldrb	r2, [r3, #11]
   13242:	0752      	lsls	r2, r2, #29
   13244:	d42e      	bmi.n	132a4 <follow_path+0x1ec>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   13246:	4642      	mov	r2, r8
   13248:	06d2      	lsls	r2, r2, #27
   1324a:	d527      	bpl.n	1329c <follow_path+0x1e4>
			dj->sclust = LD_CLUST(dir);
   1324c:	7d41      	ldrb	r1, [r0, #21]
   1324e:	7d02      	ldrb	r2, [r0, #20]
   13250:	0209      	lsls	r1, r1, #8
   13252:	7ec6      	ldrb	r6, [r0, #27]
   13254:	430a      	orrs	r2, r1
   13256:	7e81      	ldrb	r1, [r0, #26]
   13258:	0236      	lsls	r6, r6, #8
   1325a:	0412      	lsls	r2, r2, #16
   1325c:	4331      	orrs	r1, r6
   1325e:	430a      	orrs	r2, r1
   13260:	60aa      	str	r2, [r5, #8]
   13262:	7822      	ldrb	r2, [r4, #0]
			res = create_name(dj, &path);	/* Get a segment */
   13264:	e745      	b.n	130f2 <follow_path+0x3a>
	dj->sclust = 0;						/* Start from the root dir */
   13266:	2700      	movs	r7, #0
		path++;
   13268:	3401      	adds	r4, #1
	dj->sclust = 0;						/* Start from the root dir */
   1326a:	60af      	str	r7, [r5, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1326c:	7822      	ldrb	r2, [r4, #0]
   1326e:	2a1f      	cmp	r2, #31
   13270:	d900      	bls.n	13274 <follow_path+0x1bc>
   13272:	e736      	b.n	130e2 <follow_path+0x2a>
		res = dir_sdi(dj, 0);
   13274:	2100      	movs	r1, #0
   13276:	0028      	movs	r0, r5
   13278:	4b15      	ldr	r3, [pc, #84]	; (132d0 <follow_path+0x218>)
   1327a:	4798      	blx	r3
		dj->dir = 0;
   1327c:	616f      	str	r7, [r5, #20]
		res = dir_sdi(dj, 0);
   1327e:	0006      	movs	r6, r0
   13280:	e782      	b.n	13188 <follow_path+0xd0>
		res = dir_next(dj, 0);		/* Next entry */
   13282:	2100      	movs	r1, #0
   13284:	0028      	movs	r0, r5
   13286:	47d8      	blx	fp
	} while (res == FR_OK);
   13288:	2800      	cmp	r0, #0
   1328a:	d0bc      	beq.n	13206 <follow_path+0x14e>
   1328c:	0006      	movs	r6, r0
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1328e:	2e04      	cmp	r6, #4
   13290:	d000      	beq.n	13294 <follow_path+0x1dc>
   13292:	e779      	b.n	13188 <follow_path+0xd0>
			ns = *(dj->fn+NS);
   13294:	69ab      	ldr	r3, [r5, #24]
   13296:	7adb      	ldrb	r3, [r3, #11]
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   13298:	075b      	lsls	r3, r3, #29
   1329a:	d405      	bmi.n	132a8 <follow_path+0x1f0>
   1329c:	2605      	movs	r6, #5
   1329e:	e773      	b.n	13188 <follow_path+0xd0>
   132a0:	0006      	movs	r6, r0
   132a2:	e7f4      	b.n	1328e <follow_path+0x1d6>
   132a4:	003e      	movs	r6, r7
   132a6:	e76f      	b.n	13188 <follow_path+0xd0>
   132a8:	2604      	movs	r6, #4
   132aa:	e76d      	b.n	13188 <follow_path+0xd0>
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   132ac:	3104      	adds	r1, #4
   132ae:	430a      	orrs	r2, r1
   132b0:	e7a0      	b.n	131f4 <follow_path+0x13c>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   132b2:	310f      	adds	r1, #15
   132b4:	430a      	orrs	r2, r1
   132b6:	e798      	b.n	131ea <follow_path+0x132>
	if (ni == 8) b <<= 2;
   132b8:	4641      	mov	r1, r8
   132ba:	0089      	lsls	r1, r1, #2
   132bc:	b2c9      	uxtb	r1, r1
   132be:	4688      	mov	r8, r1
   132c0:	e78e      	b.n	131e0 <follow_path+0x128>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
   132c2:	39e0      	subs	r1, #224	; 0xe0
   132c4:	7019      	strb	r1, [r3, #0]
   132c6:	e788      	b.n	131da <follow_path+0x122>
   132c8:	00012f69 	.word	0x00012f69
   132cc:	00016afd 	.word	0x00016afd
   132d0:	00012cb9 	.word	0x00012cb9
   132d4:	000126f9 	.word	0x000126f9

000132d8 <remove_chain.part.6>:
FRESULT remove_chain (
   132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132da:	4b1a      	ldr	r3, [pc, #104]	; (13344 <remove_chain.part.6+0x6c>)
   132dc:	46ce      	mov	lr, r9
   132de:	0004      	movs	r4, r0
   132e0:	4699      	mov	r9, r3
				fs->fsi_flag = 1;
   132e2:	2301      	movs	r3, #1
FRESULT remove_chain (
   132e4:	4647      	mov	r7, r8
				fs->fsi_flag = 1;
   132e6:	4698      	mov	r8, r3
		while (clst < fs->n_fatent) {			/* Not a last link? */
   132e8:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
   132ea:	b580      	push	{r7, lr}
   132ec:	000d      	movs	r5, r1
   132ee:	4f16      	ldr	r7, [pc, #88]	; (13348 <remove_chain.part.6+0x70>)
		while (clst < fs->n_fatent) {			/* Not a last link? */
   132f0:	429d      	cmp	r5, r3
   132f2:	d223      	bcs.n	1333c <remove_chain.part.6+0x64>
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   132f4:	2d01      	cmp	r5, #1
   132f6:	d90b      	bls.n	13310 <remove_chain.part.6+0x38>
   132f8:	0029      	movs	r1, r5
   132fa:	0020      	movs	r0, r4
   132fc:	47b8      	blx	r7
   132fe:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   13300:	d01c      	beq.n	1333c <remove_chain.part.6+0x64>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   13302:	2801      	cmp	r0, #1
   13304:	d004      	beq.n	13310 <remove_chain.part.6+0x38>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   13306:	1c43      	adds	r3, r0, #1
   13308:	d01a      	beq.n	13340 <remove_chain.part.6+0x68>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1330a:	69a3      	ldr	r3, [r4, #24]
   1330c:	429d      	cmp	r5, r3
   1330e:	d304      	bcc.n	1331a <remove_chain.part.6+0x42>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   13310:	2002      	movs	r0, #2
}
   13312:	bc0c      	pop	{r2, r3}
   13314:	4690      	mov	r8, r2
   13316:	4699      	mov	r9, r3
   13318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1331a:	2200      	movs	r2, #0
   1331c:	0029      	movs	r1, r5
   1331e:	0020      	movs	r0, r4
   13320:	47c8      	blx	r9
			if (res != FR_OK) break;
   13322:	2800      	cmp	r0, #0
   13324:	d1f5      	bne.n	13312 <remove_chain.part.6+0x3a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   13326:	6923      	ldr	r3, [r4, #16]
   13328:	1c5a      	adds	r2, r3, #1
   1332a:	d003      	beq.n	13334 <remove_chain.part.6+0x5c>
				fs->free_clust++;
   1332c:	3301      	adds	r3, #1
   1332e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   13330:	4643      	mov	r3, r8
   13332:	7163      	strb	r3, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   13334:	69a3      	ldr	r3, [r4, #24]
FRESULT remove_chain (
   13336:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   13338:	429d      	cmp	r5, r3
   1333a:	d3db      	bcc.n	132f4 <remove_chain.part.6+0x1c>
FRESULT remove_chain (
   1333c:	2000      	movs	r0, #0
   1333e:	e7e8      	b.n	13312 <remove_chain.part.6+0x3a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   13340:	2001      	movs	r0, #1
   13342:	e7e6      	b.n	13312 <remove_chain.part.6+0x3a>
   13344:	00012d61 	.word	0x00012d61
   13348:	00012bdd 	.word	0x00012bdd

0001334c <dir_register>:
{
   1334c:	b570      	push	{r4, r5, r6, lr}
	res = dir_sdi(dj, 0);
   1334e:	2100      	movs	r1, #0
   13350:	4b18      	ldr	r3, [pc, #96]	; (133b4 <dir_register+0x68>)
{
   13352:	0004      	movs	r4, r0
	res = dir_sdi(dj, 0);
   13354:	4798      	blx	r3
	if (res == FR_OK) {
   13356:	2800      	cmp	r0, #0
   13358:	d112      	bne.n	13380 <dir_register+0x34>
   1335a:	4d17      	ldr	r5, [pc, #92]	; (133b8 <dir_register+0x6c>)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
   1335c:	4e17      	ldr	r6, [pc, #92]	; (133bc <dir_register+0x70>)
   1335e:	e00a      	b.n	13376 <dir_register+0x2a>
			c = *dj->dir;
   13360:	6963      	ldr	r3, [r4, #20]
   13362:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
   13364:	2be5      	cmp	r3, #229	; 0xe5
   13366:	d00c      	beq.n	13382 <dir_register+0x36>
   13368:	2b00      	cmp	r3, #0
   1336a:	d00a      	beq.n	13382 <dir_register+0x36>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
   1336c:	2101      	movs	r1, #1
   1336e:	0020      	movs	r0, r4
   13370:	47b0      	blx	r6
		} while (res == FR_OK);
   13372:	2800      	cmp	r0, #0
   13374:	d104      	bne.n	13380 <dir_register+0x34>
			res = move_window(dj->fs, dj->sect);
   13376:	6921      	ldr	r1, [r4, #16]
   13378:	6820      	ldr	r0, [r4, #0]
   1337a:	47a8      	blx	r5
			if (res != FR_OK) break;
   1337c:	2800      	cmp	r0, #0
   1337e:	d0ef      	beq.n	13360 <dir_register+0x14>
}
   13380:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(dj->fs, dj->sect);
   13382:	6921      	ldr	r1, [r4, #16]
   13384:	6820      	ldr	r0, [r4, #0]
   13386:	47a8      	blx	r5
		if (res == FR_OK) {
   13388:	2800      	cmp	r0, #0
   1338a:	d1f9      	bne.n	13380 <dir_register+0x34>
			dir = dj->dir;
   1338c:	6965      	ldr	r5, [r4, #20]
		*d++ = (BYTE)val;
   1338e:	2200      	movs	r2, #0
   13390:	0029      	movs	r1, r5
   13392:	002b      	movs	r3, r5
   13394:	3120      	adds	r1, #32
   13396:	701a      	strb	r2, [r3, #0]
   13398:	3301      	adds	r3, #1
	while (cnt--)
   1339a:	428b      	cmp	r3, r1
   1339c:	d1fb      	bne.n	13396 <dir_register+0x4a>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   1339e:	2300      	movs	r3, #0
   133a0:	69a1      	ldr	r1, [r4, #24]
		*d++ = *s++;
   133a2:	5cca      	ldrb	r2, [r1, r3]
   133a4:	54ea      	strb	r2, [r5, r3]
   133a6:	3301      	adds	r3, #1
	while (cnt--)
   133a8:	2b0b      	cmp	r3, #11
   133aa:	d1fa      	bne.n	133a2 <dir_register+0x56>
			dj->fs->wflag = 1;
   133ac:	2201      	movs	r2, #1
   133ae:	6823      	ldr	r3, [r4, #0]
   133b0:	711a      	strb	r2, [r3, #4]
   133b2:	e7e5      	b.n	13380 <dir_register+0x34>
   133b4:	00012cb9 	.word	0x00012cb9
   133b8:	000126f9 	.word	0x000126f9
   133bc:	00012f69 	.word	0x00012f69

000133c0 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   133c0:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   133c2:	2800      	cmp	r0, #0
   133c4:	d001      	beq.n	133ca <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   133c6:	0018      	movs	r0, r3
   133c8:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   133ca:	4b06      	ldr	r3, [pc, #24]	; (133e4 <f_mount+0x24>)
   133cc:	681a      	ldr	r2, [r3, #0]
	if (rfs) {
   133ce:	2a00      	cmp	r2, #0
   133d0:	d000      	beq.n	133d4 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
   133d2:	7010      	strb	r0, [r2, #0]
	if (fs) {
   133d4:	2900      	cmp	r1, #0
   133d6:	d001      	beq.n	133dc <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
   133d8:	2200      	movs	r2, #0
   133da:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   133dc:	6019      	str	r1, [r3, #0]
	return FR_OK;
   133de:	2300      	movs	r3, #0
   133e0:	e7f1      	b.n	133c6 <f_mount+0x6>
   133e2:	46c0      	nop			; (mov r8, r8)
   133e4:	20000ba8 	.word	0x20000ba8

000133e8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   133e8:	b5f0      	push	{r4, r5, r6, r7, lr}


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   133ea:	271f      	movs	r7, #31
{
   133ec:	46c6      	mov	lr, r8
   133ee:	0016      	movs	r6, r2
	fp->fs = 0;			/* Clear file object */
   133f0:	2300      	movs	r3, #0
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   133f2:	4017      	ands	r7, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   133f4:	221e      	movs	r2, #30
{
   133f6:	b500      	push	{lr}
   133f8:	b08c      	sub	sp, #48	; 0x30
	fp->fs = 0;			/* Clear file object */
   133fa:	6003      	str	r3, [r0, #0]
{
   133fc:	9101      	str	r1, [sp, #4]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   133fe:	4b53      	ldr	r3, [pc, #332]	; (1354c <f_open+0x164>)
{
   13400:	0005      	movs	r5, r0
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   13402:	4032      	ands	r2, r6
   13404:	a905      	add	r1, sp, #20
   13406:	a801      	add	r0, sp, #4
   13408:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1340a:	ab02      	add	r3, sp, #8
   1340c:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK)
   1340e:	2800      	cmp	r0, #0
   13410:	d009      	beq.n	13426 <f_open+0x3e>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13412:	231c      	movs	r3, #28
   13414:	4233      	tst	r3, r6
   13416:	d002      	beq.n	1341e <f_open+0x36>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   13418:	2804      	cmp	r0, #4
   1341a:	d100      	bne.n	1341e <f_open+0x36>
   1341c:	e08d      	b.n	1353a <f_open+0x152>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
   1341e:	b00c      	add	sp, #48	; 0x30
   13420:	bc04      	pop	{r2}
   13422:	4690      	mov	r8, r2
   13424:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);	/* Follow the file path */
   13426:	9901      	ldr	r1, [sp, #4]
   13428:	a805      	add	r0, sp, #20
   1342a:	4b49      	ldr	r3, [pc, #292]	; (13550 <f_open+0x168>)
   1342c:	4798      	blx	r3
	dir = dj.dir;
   1342e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	if (res == FR_OK) {
   13430:	2800      	cmp	r0, #0
   13432:	d1ee      	bne.n	13412 <f_open+0x2a>
		if (!dir)	/* Current dir itself */
   13434:	2c00      	cmp	r4, #0
   13436:	d03b      	beq.n	134b0 <f_open+0xc8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   13438:	231c      	movs	r3, #28
   1343a:	4233      	tst	r3, r6
   1343c:	d02c      	beq.n	13498 <f_open+0xb0>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1343e:	2211      	movs	r2, #17
   13440:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_DENIED;
   13442:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   13444:	421a      	tst	r2, r3
   13446:	d1ea      	bne.n	1341e <f_open+0x36>
					res = FR_EXIST;
   13448:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1344a:	0773      	lsls	r3, r6, #29
   1344c:	d4e7      	bmi.n	1341e <f_open+0x36>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1344e:	073b      	lsls	r3, r7, #28
   13450:	d430      	bmi.n	134b4 <f_open+0xcc>
   13452:	9a05      	ldr	r2, [sp, #20]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   13454:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		fp->dir_ptr = dir;
   13456:	622c      	str	r4, [r5, #32]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   13458:	61eb      	str	r3, [r5, #28]
		fp->flag = mode;					/* File access mode */
   1345a:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1345c:	7d61      	ldrb	r1, [r4, #21]
   1345e:	7d23      	ldrb	r3, [r4, #20]
   13460:	7ee0      	ldrb	r0, [r4, #27]
   13462:	0209      	lsls	r1, r1, #8
   13464:	430b      	orrs	r3, r1
   13466:	7ea1      	ldrb	r1, [r4, #26]
   13468:	0200      	lsls	r0, r0, #8
   1346a:	4301      	orrs	r1, r0
   1346c:	041b      	lsls	r3, r3, #16
   1346e:	430b      	orrs	r3, r1
   13470:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   13472:	7f61      	ldrb	r1, [r4, #29]
   13474:	7f23      	ldrb	r3, [r4, #28]
   13476:	0209      	lsls	r1, r1, #8
   13478:	4319      	orrs	r1, r3
   1347a:	7fa3      	ldrb	r3, [r4, #30]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1347c:	2000      	movs	r0, #0
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1347e:	041b      	lsls	r3, r3, #16
   13480:	4319      	orrs	r1, r3
   13482:	7fe3      	ldrb	r3, [r4, #31]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   13484:	602a      	str	r2, [r5, #0]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   13486:	061b      	lsls	r3, r3, #24
   13488:	430b      	orrs	r3, r1
   1348a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   1348c:	2300      	movs	r3, #0
   1348e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   13490:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   13492:	88d3      	ldrh	r3, [r2, #6]
   13494:	80ab      	strh	r3, [r5, #4]
   13496:	e7c2      	b.n	1341e <f_open+0x36>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   13498:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   1349a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1349c:	06da      	lsls	r2, r3, #27
   1349e:	d4be      	bmi.n	1341e <f_open+0x36>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   134a0:	07b2      	lsls	r2, r6, #30
   134a2:	d445      	bmi.n	13530 <f_open+0x148>
   134a4:	9a05      	ldr	r2, [sp, #20]
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   134a6:	0733      	lsls	r3, r6, #28
   134a8:	d5d4      	bpl.n	13454 <f_open+0x6c>
			mode |= FA__WRITTEN;
   134aa:	2320      	movs	r3, #32
   134ac:	431f      	orrs	r7, r3
   134ae:	e7d1      	b.n	13454 <f_open+0x6c>
			res = FR_INVALID_NAME;
   134b0:	2006      	movs	r0, #6
   134b2:	e7b4      	b.n	1341e <f_open+0x36>
			dw = get_fattime();					/* Created time */
   134b4:	4b27      	ldr	r3, [pc, #156]	; (13554 <f_open+0x16c>)
   134b6:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   134b8:	0a03      	lsrs	r3, r0, #8
   134ba:	73e3      	strb	r3, [r4, #15]
   134bc:	0c03      	lsrs	r3, r0, #16
   134be:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   134c0:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
   134c2:	7d62      	ldrb	r2, [r4, #21]
   134c4:	7d26      	ldrb	r6, [r4, #20]
   134c6:	7ee1      	ldrb	r1, [r4, #27]
   134c8:	0212      	lsls	r2, r2, #8
   134ca:	4316      	orrs	r6, r2
   134cc:	7ea2      	ldrb	r2, [r4, #26]
   134ce:	0209      	lsls	r1, r1, #8
   134d0:	430a      	orrs	r2, r1
   134d2:	0436      	lsls	r6, r6, #16
   134d4:	4316      	orrs	r6, r2
			dj.fs->wflag = 1;
   134d6:	9a05      	ldr	r2, [sp, #20]
			ST_DWORD(dir+DIR_CrtTime, dw);
   134d8:	73a0      	strb	r0, [r4, #14]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   134da:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   134dc:	7723      	strb	r3, [r4, #28]
   134de:	7763      	strb	r3, [r4, #29]
   134e0:	77a3      	strb	r3, [r4, #30]
   134e2:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   134e4:	76a3      	strb	r3, [r4, #26]
   134e6:	76e3      	strb	r3, [r4, #27]
   134e8:	7523      	strb	r3, [r4, #20]
   134ea:	7563      	strb	r3, [r4, #21]
			ST_DWORD(dir+DIR_CrtTime, dw);
   134ec:	0e00      	lsrs	r0, r0, #24
			dj.fs->wflag = 1;
   134ee:	3301      	adds	r3, #1
			ST_DWORD(dir+DIR_CrtTime, dw);
   134f0:	7460      	strb	r0, [r4, #17]
			dj.fs->wflag = 1;
   134f2:	7113      	strb	r3, [r2, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   134f4:	2e00      	cmp	r6, #0
   134f6:	d0d8      	beq.n	134aa <f_open+0xc2>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   134f8:	2002      	movs	r0, #2
   134fa:	2e01      	cmp	r6, #1
   134fc:	d100      	bne.n	13500 <f_open+0x118>
   134fe:	e78e      	b.n	1341e <f_open+0x36>
   13500:	6993      	ldr	r3, [r2, #24]
   13502:	429e      	cmp	r6, r3
   13504:	d300      	bcc.n	13508 <f_open+0x120>
   13506:	e78a      	b.n	1341e <f_open+0x36>
				dw = dj.fs->winsect;
   13508:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1350a:	0031      	movs	r1, r6
   1350c:	4698      	mov	r8, r3
   1350e:	0010      	movs	r0, r2
   13510:	4b11      	ldr	r3, [pc, #68]	; (13558 <f_open+0x170>)
   13512:	4798      	blx	r3
				if (res == FR_OK) {
   13514:	2800      	cmp	r0, #0
   13516:	d000      	beq.n	1351a <f_open+0x132>
   13518:	e781      	b.n	1341e <f_open+0x36>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1351a:	9805      	ldr	r0, [sp, #20]
   1351c:	3e01      	subs	r6, #1
   1351e:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
   13520:	4641      	mov	r1, r8
   13522:	4b0e      	ldr	r3, [pc, #56]	; (1355c <f_open+0x174>)
   13524:	4798      	blx	r3
	if (res == FR_OK) {
   13526:	2800      	cmp	r0, #0
   13528:	d000      	beq.n	1352c <f_open+0x144>
   1352a:	e778      	b.n	1341e <f_open+0x36>
   1352c:	9a05      	ldr	r2, [sp, #20]
   1352e:	e7bc      	b.n	134aa <f_open+0xc2>
				res = FR_DENIED;
   13530:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   13532:	07db      	lsls	r3, r3, #31
   13534:	d500      	bpl.n	13538 <f_open+0x150>
   13536:	e772      	b.n	1341e <f_open+0x36>
   13538:	e7b4      	b.n	134a4 <f_open+0xbc>
				res = dir_register(&dj);
   1353a:	4b09      	ldr	r3, [pc, #36]	; (13560 <f_open+0x178>)
   1353c:	a805      	add	r0, sp, #20
   1353e:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   13540:	2308      	movs	r3, #8
   13542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13544:	431f      	orrs	r7, r3
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   13546:	2800      	cmp	r0, #0
   13548:	d081      	beq.n	1344e <f_open+0x66>
   1354a:	e768      	b.n	1341e <f_open+0x36>
   1354c:	00012915 	.word	0x00012915
   13550:	000130b9 	.word	0x000130b9
   13554:	000126a9 	.word	0x000126a9
   13558:	000132d9 	.word	0x000132d9
   1355c:	000126f9 	.word	0x000126f9
   13560:	0001334d 	.word	0x0001334d

00013564 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   13564:	b5f0      	push	{r4, r5, r6, r7, lr}
   13566:	4657      	mov	r7, sl
   13568:	469a      	mov	sl, r3
   1356a:	464e      	mov	r6, r9
   1356c:	46de      	mov	lr, fp
   1356e:	4645      	mov	r5, r8
   13570:	4691      	mov	r9, r2
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   13572:	2300      	movs	r3, #0
   13574:	4652      	mov	r2, sl
{
   13576:	b5e0      	push	{r5, r6, r7, lr}
	*bw = 0;	/* Initialize byte counter */
   13578:	6013      	str	r3, [r2, #0]
{
   1357a:	0006      	movs	r6, r0

	res = validate(fp->fs, fp->id);			/* Check validity */
   1357c:	6800      	ldr	r0, [r0, #0]
{
   1357e:	b083      	sub	sp, #12
   13580:	000f      	movs	r7, r1
	if (!fs || !fs->fs_type || fs->id != id)
   13582:	2800      	cmp	r0, #0
   13584:	d021      	beq.n	135ca <f_write+0x66>
   13586:	2209      	movs	r2, #9
   13588:	7803      	ldrb	r3, [r0, #0]
   1358a:	4693      	mov	fp, r2
   1358c:	2b00      	cmp	r3, #0
   1358e:	d107      	bne.n	135a0 <f_write+0x3c>

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
   13590:	4658      	mov	r0, fp
   13592:	b003      	add	sp, #12
   13594:	bc3c      	pop	{r2, r3, r4, r5}
   13596:	4690      	mov	r8, r2
   13598:	4699      	mov	r9, r3
   1359a:	46a2      	mov	sl, r4
   1359c:	46ab      	mov	fp, r5
   1359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   135a0:	88b2      	ldrh	r2, [r6, #4]
   135a2:	88c3      	ldrh	r3, [r0, #6]
   135a4:	429a      	cmp	r2, r3
   135a6:	d1f3      	bne.n	13590 <f_write+0x2c>
   135a8:	4b83      	ldr	r3, [pc, #524]	; (137b8 <f_write+0x254>)
   135aa:	4798      	blx	r3
   135ac:	4683      	mov	fp, r0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   135ae:	2800      	cmp	r0, #0
   135b0:	d1ee      	bne.n	13590 <f_write+0x2c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   135b2:	79b3      	ldrb	r3, [r6, #6]
   135b4:	b25a      	sxtb	r2, r3
   135b6:	2a00      	cmp	r2, #0
   135b8:	db04      	blt.n	135c4 <f_write+0x60>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   135ba:	079a      	lsls	r2, r3, #30
   135bc:	d408      	bmi.n	135d0 <f_write+0x6c>
		LEAVE_FF(fp->fs, FR_DENIED);
   135be:	2307      	movs	r3, #7
   135c0:	469b      	mov	fp, r3
   135c2:	e7e5      	b.n	13590 <f_write+0x2c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   135c4:	2302      	movs	r3, #2
   135c6:	469b      	mov	fp, r3
   135c8:	e7e2      	b.n	13590 <f_write+0x2c>
	if (!fs || !fs->fs_type || fs->id != id)
   135ca:	2309      	movs	r3, #9
   135cc:	469b      	mov	fp, r3
   135ce:	e7df      	b.n	13590 <f_write+0x2c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   135d0:	4649      	mov	r1, r9
   135d2:	68f2      	ldr	r2, [r6, #12]
   135d4:	1851      	adds	r1, r2, r1
   135d6:	428a      	cmp	r2, r1
   135d8:	d907      	bls.n	135ea <f_write+0x86>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   135da:	68b1      	ldr	r1, [r6, #8]
   135dc:	4291      	cmp	r1, r2
   135de:	d900      	bls.n	135e2 <f_write+0x7e>
   135e0:	60f1      	str	r1, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   135e2:	2220      	movs	r2, #32
   135e4:	4313      	orrs	r3, r2
   135e6:	71b3      	strb	r3, [r6, #6]
	LEAVE_FF(fp->fs, FR_OK);
   135e8:	e7d2      	b.n	13590 <f_write+0x2c>
	for ( ;  btw;							/* Repeat until all data written */
   135ea:	4649      	mov	r1, r9
   135ec:	2900      	cmp	r1, #0
   135ee:	d0f4      	beq.n	135da <f_write+0x76>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   135f0:	464c      	mov	r4, r9
   135f2:	4655      	mov	r5, sl
   135f4:	9700      	str	r7, [sp, #0]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   135f6:	68b3      	ldr	r3, [r6, #8]
   135f8:	05da      	lsls	r2, r3, #23
   135fa:	0dd2      	lsrs	r2, r2, #23
   135fc:	d000      	beq.n	13600 <f_write+0x9c>
   135fe:	e07e      	b.n	136fe <f_write+0x19a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   13600:	6830      	ldr	r0, [r6, #0]
   13602:	0a5a      	lsrs	r2, r3, #9
   13604:	7881      	ldrb	r1, [r0, #2]
   13606:	3901      	subs	r1, #1
   13608:	400a      	ands	r2, r1
   1360a:	b2d2      	uxtb	r2, r2
   1360c:	4692      	mov	sl, r2
			if (!csect) {					/* On the cluster boundary? */
   1360e:	2a00      	cmp	r2, #0
   13610:	d10e      	bne.n	13630 <f_write+0xcc>
				if (fp->fptr == 0) {		/* On the top of the file? */
   13612:	2b00      	cmp	r3, #0
   13614:	d000      	beq.n	13618 <f_write+0xb4>
   13616:	e09f      	b.n	13758 <f_write+0x1f4>
					clst = fp->sclust;		/* Follow from the origin */
   13618:	6933      	ldr	r3, [r6, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   1361a:	2b00      	cmp	r3, #0
   1361c:	d100      	bne.n	13620 <f_write+0xbc>
   1361e:	e0a3      	b.n	13768 <f_write+0x204>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   13620:	2b01      	cmp	r3, #1
   13622:	d100      	bne.n	13626 <f_write+0xc2>
   13624:	e0b9      	b.n	1379a <f_write+0x236>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   13626:	1c5a      	adds	r2, r3, #1
   13628:	d100      	bne.n	1362c <f_write+0xc8>
   1362a:	e0bd      	b.n	137a8 <f_write+0x244>
   1362c:	6830      	ldr	r0, [r6, #0]
				fp->clust = clst;			/* Update current cluster */
   1362e:	6173      	str	r3, [r6, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
   13630:	2340      	movs	r3, #64	; 0x40
   13632:	4698      	mov	r8, r3
   13634:	4642      	mov	r2, r8
   13636:	79b3      	ldrb	r3, [r6, #6]
   13638:	421a      	tst	r2, r3
   1363a:	d176      	bne.n	1372a <f_write+0x1c6>
	clst -= 2;
   1363c:	6973      	ldr	r3, [r6, #20]
   1363e:	1e99      	subs	r1, r3, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   13640:	6983      	ldr	r3, [r0, #24]
   13642:	3b02      	subs	r3, #2
   13644:	4299      	cmp	r1, r3
   13646:	d300      	bcc.n	1364a <f_write+0xe6>
   13648:	e09f      	b.n	1378a <f_write+0x226>
	return clst * fs->csize + fs->database;
   1364a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1364c:	7883      	ldrb	r3, [r0, #2]
   1364e:	4694      	mov	ip, r2
   13650:	4359      	muls	r1, r3
   13652:	4461      	add	r1, ip
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   13654:	2900      	cmp	r1, #0
   13656:	d100      	bne.n	1365a <f_write+0xf6>
   13658:	e097      	b.n	1378a <f_write+0x226>
			sect += csect;
   1365a:	4451      	add	r1, sl
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1365c:	0a62      	lsrs	r2, r4, #9
			sect += csect;
   1365e:	4689      	mov	r9, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   13660:	4690      	mov	r8, r2
			if (cc) {						/* Write maximum contiguous sectors directly */
   13662:	d041      	beq.n	136e8 <f_write+0x184>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   13664:	4652      	mov	r2, sl
   13666:	4442      	add	r2, r8
   13668:	429a      	cmp	r2, r3
   1366a:	d902      	bls.n	13672 <f_write+0x10e>
					cc = fp->fs->csize - csect;
   1366c:	4652      	mov	r2, sl
   1366e:	1a9b      	subs	r3, r3, r2
   13670:	4698      	mov	r8, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   13672:	466a      	mov	r2, sp
   13674:	4643      	mov	r3, r8
   13676:	71d3      	strb	r3, [r2, #7]
   13678:	79d3      	ldrb	r3, [r2, #7]
   1367a:	7840      	ldrb	r0, [r0, #1]
   1367c:	464a      	mov	r2, r9
   1367e:	9900      	ldr	r1, [sp, #0]
   13680:	4f4e      	ldr	r7, [pc, #312]	; (137bc <f_write+0x258>)
   13682:	47b8      	blx	r7
   13684:	2800      	cmp	r0, #0
   13686:	d15f      	bne.n	13748 <f_write+0x1e4>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   13688:	464a      	mov	r2, r9
   1368a:	69b3      	ldr	r3, [r6, #24]
   1368c:	1a99      	subs	r1, r3, r2
   1368e:	4588      	cmp	r8, r1
   13690:	d918      	bls.n	136c4 <f_write+0x160>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   13692:	2324      	movs	r3, #36	; 0x24
   13694:	9f00      	ldr	r7, [sp, #0]
   13696:	469c      	mov	ip, r3
   13698:	46b9      	mov	r9, r7
	while (cnt--)
   1369a:	0022      	movs	r2, r4
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   1369c:	0249      	lsls	r1, r1, #9
   1369e:	44b4      	add	ip, r6
   136a0:	4449      	add	r1, r9
	while (cnt--)
   136a2:	2080      	movs	r0, #128	; 0x80
   136a4:	000c      	movs	r4, r1
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   136a6:	2300      	movs	r3, #0
	while (cnt--)
   136a8:	4661      	mov	r1, ip
   136aa:	4694      	mov	ip, r2
   136ac:	0080      	lsls	r0, r0, #2
		*d++ = *s++;
   136ae:	5ce2      	ldrb	r2, [r4, r3]
   136b0:	54ca      	strb	r2, [r1, r3]
   136b2:	3301      	adds	r3, #1
	while (cnt--)
   136b4:	4283      	cmp	r3, r0
   136b6:	d1fa      	bne.n	136ae <f_write+0x14a>
					fp->flag &= ~FA__DIRTY;
   136b8:	2240      	movs	r2, #64	; 0x40
   136ba:	4664      	mov	r4, ip
   136bc:	79b3      	ldrb	r3, [r6, #6]
   136be:	9700      	str	r7, [sp, #0]
   136c0:	4393      	bics	r3, r2
   136c2:	71b3      	strb	r3, [r6, #6]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   136c4:	4643      	mov	r3, r8
   136c6:	0258      	lsls	r0, r3, #9
   136c8:	68b3      	ldr	r3, [r6, #8]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   136ca:	9a00      	ldr	r2, [sp, #0]
   136cc:	18c3      	adds	r3, r0, r3
   136ce:	4694      	mov	ip, r2
   136d0:	4484      	add	ip, r0
   136d2:	4662      	mov	r2, ip
   136d4:	60b3      	str	r3, [r6, #8]
   136d6:	682b      	ldr	r3, [r5, #0]
   136d8:	9200      	str	r2, [sp, #0]
   136da:	181b      	adds	r3, r3, r0
   136dc:	602b      	str	r3, [r5, #0]
   136de:	1a24      	subs	r4, r4, r0
	for ( ;  btw;							/* Repeat until all data written */
   136e0:	d189      	bne.n	135f6 <f_write+0x92>
   136e2:	68f2      	ldr	r2, [r6, #12]
   136e4:	79b3      	ldrb	r3, [r6, #6]
   136e6:	e778      	b.n	135da <f_write+0x76>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   136e8:	69b3      	ldr	r3, [r6, #24]
				if (fp->fptr < fp->fsize &&
   136ea:	68b2      	ldr	r2, [r6, #8]
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
   136ec:	4299      	cmp	r1, r3
   136ee:	d002      	beq.n	136f6 <f_write+0x192>
				if (fp->fptr < fp->fsize &&
   136f0:	68f3      	ldr	r3, [r6, #12]
   136f2:	429a      	cmp	r2, r3
   136f4:	d33e      	bcc.n	13774 <f_write+0x210>
			fp->dsect = sect;
   136f6:	464b      	mov	r3, r9
   136f8:	05d2      	lsls	r2, r2, #23
   136fa:	61b3      	str	r3, [r6, #24]
   136fc:	0dd2      	lsrs	r2, r2, #23
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   136fe:	2080      	movs	r0, #128	; 0x80
   13700:	0080      	lsls	r0, r0, #2
   13702:	1a80      	subs	r0, r0, r2
   13704:	42a0      	cmp	r0, r4
   13706:	d900      	bls.n	1370a <f_write+0x1a6>
   13708:	0020      	movs	r0, r4
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1370a:	2300      	movs	r3, #0
   1370c:	3224      	adds	r2, #36	; 0x24
   1370e:	9f00      	ldr	r7, [sp, #0]
   13710:	18b2      	adds	r2, r6, r2
		*d++ = *s++;
   13712:	5cf9      	ldrb	r1, [r7, r3]
   13714:	54d1      	strb	r1, [r2, r3]
   13716:	3301      	adds	r3, #1
	while (cnt--)
   13718:	4298      	cmp	r0, r3
   1371a:	d1fa      	bne.n	13712 <f_write+0x1ae>
		fp->flag |= FA__DIRTY;
   1371c:	2140      	movs	r1, #64	; 0x40
   1371e:	79b2      	ldrb	r2, [r6, #6]
   13720:	9700      	str	r7, [sp, #0]
   13722:	430a      	orrs	r2, r1
   13724:	68b3      	ldr	r3, [r6, #8]
   13726:	71b2      	strb	r2, [r6, #6]
   13728:	e7cf      	b.n	136ca <f_write+0x166>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   1372a:	0031      	movs	r1, r6
   1372c:	7840      	ldrb	r0, [r0, #1]
   1372e:	2301      	movs	r3, #1
   13730:	69b2      	ldr	r2, [r6, #24]
   13732:	3124      	adds	r1, #36	; 0x24
   13734:	4f21      	ldr	r7, [pc, #132]	; (137bc <f_write+0x258>)
   13736:	47b8      	blx	r7
   13738:	2800      	cmp	r0, #0
   1373a:	d105      	bne.n	13748 <f_write+0x1e4>
				fp->flag &= ~FA__DIRTY;
   1373c:	4642      	mov	r2, r8
   1373e:	79b3      	ldrb	r3, [r6, #6]
   13740:	6830      	ldr	r0, [r6, #0]
   13742:	4393      	bics	r3, r2
   13744:	71b3      	strb	r3, [r6, #6]
   13746:	e779      	b.n	1363c <f_write+0xd8>
						ABORT(fp->fs, FR_DISK_ERR);
   13748:	2380      	movs	r3, #128	; 0x80
   1374a:	79b2      	ldrb	r2, [r6, #6]
   1374c:	425b      	negs	r3, r3
   1374e:	4313      	orrs	r3, r2
   13750:	71b3      	strb	r3, [r6, #6]
   13752:	2301      	movs	r3, #1
   13754:	469b      	mov	fp, r3
   13756:	e71b      	b.n	13590 <f_write+0x2c>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13758:	4b19      	ldr	r3, [pc, #100]	; (137c0 <f_write+0x25c>)
   1375a:	6971      	ldr	r1, [r6, #20]
   1375c:	4798      	blx	r3
   1375e:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13760:	2b00      	cmp	r3, #0
   13762:	d000      	beq.n	13766 <f_write+0x202>
   13764:	e75c      	b.n	13620 <f_write+0xbc>
   13766:	e7bc      	b.n	136e2 <f_write+0x17e>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   13768:	4b15      	ldr	r3, [pc, #84]	; (137c0 <f_write+0x25c>)
   1376a:	2100      	movs	r1, #0
   1376c:	4798      	blx	r3
   1376e:	0003      	movs	r3, r0
   13770:	6130      	str	r0, [r6, #16]
   13772:	e7f5      	b.n	13760 <f_write+0x1fc>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
   13774:	000a      	movs	r2, r1
   13776:	0031      	movs	r1, r6
   13778:	7840      	ldrb	r0, [r0, #1]
   1377a:	2301      	movs	r3, #1
   1377c:	3124      	adds	r1, #36	; 0x24
   1377e:	4f11      	ldr	r7, [pc, #68]	; (137c4 <f_write+0x260>)
   13780:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
   13782:	2800      	cmp	r0, #0
   13784:	d1e0      	bne.n	13748 <f_write+0x1e4>
   13786:	68b2      	ldr	r2, [r6, #8]
   13788:	e7b5      	b.n	136f6 <f_write+0x192>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1378a:	2380      	movs	r3, #128	; 0x80
   1378c:	79b2      	ldrb	r2, [r6, #6]
   1378e:	425b      	negs	r3, r3
   13790:	4313      	orrs	r3, r2
   13792:	71b3      	strb	r3, [r6, #6]
   13794:	2302      	movs	r3, #2
   13796:	469b      	mov	fp, r3
   13798:	e6fa      	b.n	13590 <f_write+0x2c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1379a:	79b2      	ldrb	r2, [r6, #6]
   1379c:	3b81      	subs	r3, #129	; 0x81
   1379e:	4313      	orrs	r3, r2
   137a0:	71b3      	strb	r3, [r6, #6]
   137a2:	2302      	movs	r3, #2
   137a4:	469b      	mov	fp, r3
   137a6:	e6f3      	b.n	13590 <f_write+0x2c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   137a8:	79b2      	ldrb	r2, [r6, #6]
   137aa:	3b7f      	subs	r3, #127	; 0x7f
   137ac:	4313      	orrs	r3, r2
   137ae:	71b3      	strb	r3, [r6, #6]
   137b0:	2301      	movs	r3, #1
   137b2:	469b      	mov	fp, r3
   137b4:	e6ec      	b.n	13590 <f_write+0x2c>
   137b6:	46c0      	nop			; (mov r8, r8)
   137b8:	00012879 	.word	0x00012879
   137bc:	000125b9 	.word	0x000125b9
   137c0:	00012e91 	.word	0x00012e91
   137c4:	00012535 	.word	0x00012535

000137c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   137c8:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   137ca:	6803      	ldr	r3, [r0, #0]
{
   137cc:	0004      	movs	r4, r0
	if (!fs || !fs->fs_type || fs->id != id)
   137ce:	2b00      	cmp	r3, #0
   137d0:	d054      	beq.n	1387c <f_sync+0xb4>
   137d2:	781a      	ldrb	r2, [r3, #0]
   137d4:	2009      	movs	r0, #9
   137d6:	2a00      	cmp	r2, #0
   137d8:	d100      	bne.n	137dc <f_sync+0x14>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   137da:	bd70      	pop	{r4, r5, r6, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   137dc:	88a1      	ldrh	r1, [r4, #4]
   137de:	88da      	ldrh	r2, [r3, #6]
   137e0:	4291      	cmp	r1, r2
   137e2:	d1fa      	bne.n	137da <f_sync+0x12>
   137e4:	0018      	movs	r0, r3
   137e6:	4b26      	ldr	r3, [pc, #152]	; (13880 <f_sync+0xb8>)
   137e8:	4798      	blx	r3
	if (res == FR_OK) {
   137ea:	2800      	cmp	r0, #0
   137ec:	d1f5      	bne.n	137da <f_sync+0x12>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   137ee:	79a3      	ldrb	r3, [r4, #6]
   137f0:	069a      	lsls	r2, r3, #26
   137f2:	d5f2      	bpl.n	137da <f_sync+0x12>
			if (fp->flag & FA__DIRTY) {
   137f4:	2540      	movs	r5, #64	; 0x40
   137f6:	421d      	tst	r5, r3
   137f8:	d00e      	beq.n	13818 <f_sync+0x50>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   137fa:	0021      	movs	r1, r4
   137fc:	6823      	ldr	r3, [r4, #0]
   137fe:	69a2      	ldr	r2, [r4, #24]
   13800:	7858      	ldrb	r0, [r3, #1]
   13802:	3124      	adds	r1, #36	; 0x24
   13804:	2301      	movs	r3, #1
   13806:	4e1f      	ldr	r6, [pc, #124]	; (13884 <f_sync+0xbc>)
   13808:	47b0      	blx	r6
   1380a:	0003      	movs	r3, r0
					LEAVE_FF(fp->fs, FR_DISK_ERR);
   1380c:	2001      	movs	r0, #1
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
   1380e:	2b00      	cmp	r3, #0
   13810:	d1e3      	bne.n	137da <f_sync+0x12>
				fp->flag &= ~FA__DIRTY;
   13812:	79a3      	ldrb	r3, [r4, #6]
   13814:	43ab      	bics	r3, r5
   13816:	71a3      	strb	r3, [r4, #6]
			res = move_window(fp->fs, fp->dir_sect);
   13818:	69e1      	ldr	r1, [r4, #28]
   1381a:	6820      	ldr	r0, [r4, #0]
   1381c:	4b1a      	ldr	r3, [pc, #104]	; (13888 <f_sync+0xc0>)
   1381e:	4798      	blx	r3
			if (res == FR_OK) {
   13820:	2800      	cmp	r0, #0
   13822:	d1da      	bne.n	137da <f_sync+0x12>
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13824:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
   13826:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13828:	7aeb      	ldrb	r3, [r5, #11]
   1382a:	4313      	orrs	r3, r2
   1382c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1382e:	7b23      	ldrb	r3, [r4, #12]
   13830:	772b      	strb	r3, [r5, #28]
   13832:	89a3      	ldrh	r3, [r4, #12]
   13834:	0a1b      	lsrs	r3, r3, #8
   13836:	776b      	strb	r3, [r5, #29]
   13838:	89e3      	ldrh	r3, [r4, #14]
   1383a:	77ab      	strb	r3, [r5, #30]
   1383c:	7be3      	ldrb	r3, [r4, #15]
   1383e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   13840:	7c23      	ldrb	r3, [r4, #16]
   13842:	76ab      	strb	r3, [r5, #26]
   13844:	8a23      	ldrh	r3, [r4, #16]
   13846:	0a1b      	lsrs	r3, r3, #8
   13848:	76eb      	strb	r3, [r5, #27]
   1384a:	8a63      	ldrh	r3, [r4, #18]
   1384c:	752b      	strb	r3, [r5, #20]
   1384e:	8a63      	ldrh	r3, [r4, #18]
   13850:	0a1b      	lsrs	r3, r3, #8
   13852:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   13854:	4b0d      	ldr	r3, [pc, #52]	; (1388c <f_sync+0xc4>)
   13856:	4798      	blx	r3
				fp->flag &= ~FA__WRITTEN;
   13858:	2220      	movs	r2, #32
				ST_DWORD(dir+DIR_WrtTime, tim);
   1385a:	0a03      	lsrs	r3, r0, #8
   1385c:	75a8      	strb	r0, [r5, #22]
   1385e:	75eb      	strb	r3, [r5, #23]
   13860:	0c03      	lsrs	r3, r0, #16
   13862:	0e00      	lsrs	r0, r0, #24
   13864:	762b      	strb	r3, [r5, #24]
   13866:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   13868:	79a3      	ldrb	r3, [r4, #6]
   1386a:	4393      	bics	r3, r2
   1386c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   1386e:	2301      	movs	r3, #1
   13870:	6822      	ldr	r2, [r4, #0]
   13872:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   13874:	6820      	ldr	r0, [r4, #0]
   13876:	4b06      	ldr	r3, [pc, #24]	; (13890 <f_sync+0xc8>)
   13878:	4798      	blx	r3
   1387a:	e7ae      	b.n	137da <f_sync+0x12>
	if (!fs || !fs->fs_type || fs->id != id)
   1387c:	2009      	movs	r0, #9
   1387e:	e7ac      	b.n	137da <f_sync+0x12>
   13880:	00012879 	.word	0x00012879
   13884:	000125b9 	.word	0x000125b9
   13888:	000126f9 	.word	0x000126f9
   1388c:	000126a9 	.word	0x000126a9
   13890:	00012785 	.word	0x00012785

00013894 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   13894:	b510      	push	{r4, lr}
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   13896:	4b03      	ldr	r3, [pc, #12]	; (138a4 <f_close+0x10>)
{
   13898:	0004      	movs	r4, r0
	res = f_sync(fp);		/* Flush cached data */
   1389a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1389c:	2800      	cmp	r0, #0
   1389e:	d100      	bne.n	138a2 <f_close+0xe>
   138a0:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
   138a2:	bd10      	pop	{r4, pc}
   138a4:	000137c9 	.word	0x000137c9

000138a8 <__udivsi3>:
   138a8:	2200      	movs	r2, #0
   138aa:	0843      	lsrs	r3, r0, #1
   138ac:	428b      	cmp	r3, r1
   138ae:	d374      	bcc.n	1399a <__udivsi3+0xf2>
   138b0:	0903      	lsrs	r3, r0, #4
   138b2:	428b      	cmp	r3, r1
   138b4:	d35f      	bcc.n	13976 <__udivsi3+0xce>
   138b6:	0a03      	lsrs	r3, r0, #8
   138b8:	428b      	cmp	r3, r1
   138ba:	d344      	bcc.n	13946 <__udivsi3+0x9e>
   138bc:	0b03      	lsrs	r3, r0, #12
   138be:	428b      	cmp	r3, r1
   138c0:	d328      	bcc.n	13914 <__udivsi3+0x6c>
   138c2:	0c03      	lsrs	r3, r0, #16
   138c4:	428b      	cmp	r3, r1
   138c6:	d30d      	bcc.n	138e4 <__udivsi3+0x3c>
   138c8:	22ff      	movs	r2, #255	; 0xff
   138ca:	0209      	lsls	r1, r1, #8
   138cc:	ba12      	rev	r2, r2
   138ce:	0c03      	lsrs	r3, r0, #16
   138d0:	428b      	cmp	r3, r1
   138d2:	d302      	bcc.n	138da <__udivsi3+0x32>
   138d4:	1212      	asrs	r2, r2, #8
   138d6:	0209      	lsls	r1, r1, #8
   138d8:	d065      	beq.n	139a6 <__udivsi3+0xfe>
   138da:	0b03      	lsrs	r3, r0, #12
   138dc:	428b      	cmp	r3, r1
   138de:	d319      	bcc.n	13914 <__udivsi3+0x6c>
   138e0:	e000      	b.n	138e4 <__udivsi3+0x3c>
   138e2:	0a09      	lsrs	r1, r1, #8
   138e4:	0bc3      	lsrs	r3, r0, #15
   138e6:	428b      	cmp	r3, r1
   138e8:	d301      	bcc.n	138ee <__udivsi3+0x46>
   138ea:	03cb      	lsls	r3, r1, #15
   138ec:	1ac0      	subs	r0, r0, r3
   138ee:	4152      	adcs	r2, r2
   138f0:	0b83      	lsrs	r3, r0, #14
   138f2:	428b      	cmp	r3, r1
   138f4:	d301      	bcc.n	138fa <__udivsi3+0x52>
   138f6:	038b      	lsls	r3, r1, #14
   138f8:	1ac0      	subs	r0, r0, r3
   138fa:	4152      	adcs	r2, r2
   138fc:	0b43      	lsrs	r3, r0, #13
   138fe:	428b      	cmp	r3, r1
   13900:	d301      	bcc.n	13906 <__udivsi3+0x5e>
   13902:	034b      	lsls	r3, r1, #13
   13904:	1ac0      	subs	r0, r0, r3
   13906:	4152      	adcs	r2, r2
   13908:	0b03      	lsrs	r3, r0, #12
   1390a:	428b      	cmp	r3, r1
   1390c:	d301      	bcc.n	13912 <__udivsi3+0x6a>
   1390e:	030b      	lsls	r3, r1, #12
   13910:	1ac0      	subs	r0, r0, r3
   13912:	4152      	adcs	r2, r2
   13914:	0ac3      	lsrs	r3, r0, #11
   13916:	428b      	cmp	r3, r1
   13918:	d301      	bcc.n	1391e <__udivsi3+0x76>
   1391a:	02cb      	lsls	r3, r1, #11
   1391c:	1ac0      	subs	r0, r0, r3
   1391e:	4152      	adcs	r2, r2
   13920:	0a83      	lsrs	r3, r0, #10
   13922:	428b      	cmp	r3, r1
   13924:	d301      	bcc.n	1392a <__udivsi3+0x82>
   13926:	028b      	lsls	r3, r1, #10
   13928:	1ac0      	subs	r0, r0, r3
   1392a:	4152      	adcs	r2, r2
   1392c:	0a43      	lsrs	r3, r0, #9
   1392e:	428b      	cmp	r3, r1
   13930:	d301      	bcc.n	13936 <__udivsi3+0x8e>
   13932:	024b      	lsls	r3, r1, #9
   13934:	1ac0      	subs	r0, r0, r3
   13936:	4152      	adcs	r2, r2
   13938:	0a03      	lsrs	r3, r0, #8
   1393a:	428b      	cmp	r3, r1
   1393c:	d301      	bcc.n	13942 <__udivsi3+0x9a>
   1393e:	020b      	lsls	r3, r1, #8
   13940:	1ac0      	subs	r0, r0, r3
   13942:	4152      	adcs	r2, r2
   13944:	d2cd      	bcs.n	138e2 <__udivsi3+0x3a>
   13946:	09c3      	lsrs	r3, r0, #7
   13948:	428b      	cmp	r3, r1
   1394a:	d301      	bcc.n	13950 <__udivsi3+0xa8>
   1394c:	01cb      	lsls	r3, r1, #7
   1394e:	1ac0      	subs	r0, r0, r3
   13950:	4152      	adcs	r2, r2
   13952:	0983      	lsrs	r3, r0, #6
   13954:	428b      	cmp	r3, r1
   13956:	d301      	bcc.n	1395c <__udivsi3+0xb4>
   13958:	018b      	lsls	r3, r1, #6
   1395a:	1ac0      	subs	r0, r0, r3
   1395c:	4152      	adcs	r2, r2
   1395e:	0943      	lsrs	r3, r0, #5
   13960:	428b      	cmp	r3, r1
   13962:	d301      	bcc.n	13968 <__udivsi3+0xc0>
   13964:	014b      	lsls	r3, r1, #5
   13966:	1ac0      	subs	r0, r0, r3
   13968:	4152      	adcs	r2, r2
   1396a:	0903      	lsrs	r3, r0, #4
   1396c:	428b      	cmp	r3, r1
   1396e:	d301      	bcc.n	13974 <__udivsi3+0xcc>
   13970:	010b      	lsls	r3, r1, #4
   13972:	1ac0      	subs	r0, r0, r3
   13974:	4152      	adcs	r2, r2
   13976:	08c3      	lsrs	r3, r0, #3
   13978:	428b      	cmp	r3, r1
   1397a:	d301      	bcc.n	13980 <__udivsi3+0xd8>
   1397c:	00cb      	lsls	r3, r1, #3
   1397e:	1ac0      	subs	r0, r0, r3
   13980:	4152      	adcs	r2, r2
   13982:	0883      	lsrs	r3, r0, #2
   13984:	428b      	cmp	r3, r1
   13986:	d301      	bcc.n	1398c <__udivsi3+0xe4>
   13988:	008b      	lsls	r3, r1, #2
   1398a:	1ac0      	subs	r0, r0, r3
   1398c:	4152      	adcs	r2, r2
   1398e:	0843      	lsrs	r3, r0, #1
   13990:	428b      	cmp	r3, r1
   13992:	d301      	bcc.n	13998 <__udivsi3+0xf0>
   13994:	004b      	lsls	r3, r1, #1
   13996:	1ac0      	subs	r0, r0, r3
   13998:	4152      	adcs	r2, r2
   1399a:	1a41      	subs	r1, r0, r1
   1399c:	d200      	bcs.n	139a0 <__udivsi3+0xf8>
   1399e:	4601      	mov	r1, r0
   139a0:	4152      	adcs	r2, r2
   139a2:	4610      	mov	r0, r2
   139a4:	4770      	bx	lr
   139a6:	e7ff      	b.n	139a8 <__udivsi3+0x100>
   139a8:	b501      	push	{r0, lr}
   139aa:	2000      	movs	r0, #0
   139ac:	f000 f8f0 	bl	13b90 <__aeabi_idiv0>
   139b0:	bd02      	pop	{r1, pc}
   139b2:	46c0      	nop			; (mov r8, r8)

000139b4 <__aeabi_uidivmod>:
   139b4:	2900      	cmp	r1, #0
   139b6:	d0f7      	beq.n	139a8 <__udivsi3+0x100>
   139b8:	e776      	b.n	138a8 <__udivsi3>
   139ba:	4770      	bx	lr

000139bc <__divsi3>:
   139bc:	4603      	mov	r3, r0
   139be:	430b      	orrs	r3, r1
   139c0:	d47f      	bmi.n	13ac2 <__divsi3+0x106>
   139c2:	2200      	movs	r2, #0
   139c4:	0843      	lsrs	r3, r0, #1
   139c6:	428b      	cmp	r3, r1
   139c8:	d374      	bcc.n	13ab4 <__divsi3+0xf8>
   139ca:	0903      	lsrs	r3, r0, #4
   139cc:	428b      	cmp	r3, r1
   139ce:	d35f      	bcc.n	13a90 <__divsi3+0xd4>
   139d0:	0a03      	lsrs	r3, r0, #8
   139d2:	428b      	cmp	r3, r1
   139d4:	d344      	bcc.n	13a60 <__divsi3+0xa4>
   139d6:	0b03      	lsrs	r3, r0, #12
   139d8:	428b      	cmp	r3, r1
   139da:	d328      	bcc.n	13a2e <__divsi3+0x72>
   139dc:	0c03      	lsrs	r3, r0, #16
   139de:	428b      	cmp	r3, r1
   139e0:	d30d      	bcc.n	139fe <__divsi3+0x42>
   139e2:	22ff      	movs	r2, #255	; 0xff
   139e4:	0209      	lsls	r1, r1, #8
   139e6:	ba12      	rev	r2, r2
   139e8:	0c03      	lsrs	r3, r0, #16
   139ea:	428b      	cmp	r3, r1
   139ec:	d302      	bcc.n	139f4 <__divsi3+0x38>
   139ee:	1212      	asrs	r2, r2, #8
   139f0:	0209      	lsls	r1, r1, #8
   139f2:	d065      	beq.n	13ac0 <__divsi3+0x104>
   139f4:	0b03      	lsrs	r3, r0, #12
   139f6:	428b      	cmp	r3, r1
   139f8:	d319      	bcc.n	13a2e <__divsi3+0x72>
   139fa:	e000      	b.n	139fe <__divsi3+0x42>
   139fc:	0a09      	lsrs	r1, r1, #8
   139fe:	0bc3      	lsrs	r3, r0, #15
   13a00:	428b      	cmp	r3, r1
   13a02:	d301      	bcc.n	13a08 <__divsi3+0x4c>
   13a04:	03cb      	lsls	r3, r1, #15
   13a06:	1ac0      	subs	r0, r0, r3
   13a08:	4152      	adcs	r2, r2
   13a0a:	0b83      	lsrs	r3, r0, #14
   13a0c:	428b      	cmp	r3, r1
   13a0e:	d301      	bcc.n	13a14 <__divsi3+0x58>
   13a10:	038b      	lsls	r3, r1, #14
   13a12:	1ac0      	subs	r0, r0, r3
   13a14:	4152      	adcs	r2, r2
   13a16:	0b43      	lsrs	r3, r0, #13
   13a18:	428b      	cmp	r3, r1
   13a1a:	d301      	bcc.n	13a20 <__divsi3+0x64>
   13a1c:	034b      	lsls	r3, r1, #13
   13a1e:	1ac0      	subs	r0, r0, r3
   13a20:	4152      	adcs	r2, r2
   13a22:	0b03      	lsrs	r3, r0, #12
   13a24:	428b      	cmp	r3, r1
   13a26:	d301      	bcc.n	13a2c <__divsi3+0x70>
   13a28:	030b      	lsls	r3, r1, #12
   13a2a:	1ac0      	subs	r0, r0, r3
   13a2c:	4152      	adcs	r2, r2
   13a2e:	0ac3      	lsrs	r3, r0, #11
   13a30:	428b      	cmp	r3, r1
   13a32:	d301      	bcc.n	13a38 <__divsi3+0x7c>
   13a34:	02cb      	lsls	r3, r1, #11
   13a36:	1ac0      	subs	r0, r0, r3
   13a38:	4152      	adcs	r2, r2
   13a3a:	0a83      	lsrs	r3, r0, #10
   13a3c:	428b      	cmp	r3, r1
   13a3e:	d301      	bcc.n	13a44 <__divsi3+0x88>
   13a40:	028b      	lsls	r3, r1, #10
   13a42:	1ac0      	subs	r0, r0, r3
   13a44:	4152      	adcs	r2, r2
   13a46:	0a43      	lsrs	r3, r0, #9
   13a48:	428b      	cmp	r3, r1
   13a4a:	d301      	bcc.n	13a50 <__divsi3+0x94>
   13a4c:	024b      	lsls	r3, r1, #9
   13a4e:	1ac0      	subs	r0, r0, r3
   13a50:	4152      	adcs	r2, r2
   13a52:	0a03      	lsrs	r3, r0, #8
   13a54:	428b      	cmp	r3, r1
   13a56:	d301      	bcc.n	13a5c <__divsi3+0xa0>
   13a58:	020b      	lsls	r3, r1, #8
   13a5a:	1ac0      	subs	r0, r0, r3
   13a5c:	4152      	adcs	r2, r2
   13a5e:	d2cd      	bcs.n	139fc <__divsi3+0x40>
   13a60:	09c3      	lsrs	r3, r0, #7
   13a62:	428b      	cmp	r3, r1
   13a64:	d301      	bcc.n	13a6a <__divsi3+0xae>
   13a66:	01cb      	lsls	r3, r1, #7
   13a68:	1ac0      	subs	r0, r0, r3
   13a6a:	4152      	adcs	r2, r2
   13a6c:	0983      	lsrs	r3, r0, #6
   13a6e:	428b      	cmp	r3, r1
   13a70:	d301      	bcc.n	13a76 <__divsi3+0xba>
   13a72:	018b      	lsls	r3, r1, #6
   13a74:	1ac0      	subs	r0, r0, r3
   13a76:	4152      	adcs	r2, r2
   13a78:	0943      	lsrs	r3, r0, #5
   13a7a:	428b      	cmp	r3, r1
   13a7c:	d301      	bcc.n	13a82 <__divsi3+0xc6>
   13a7e:	014b      	lsls	r3, r1, #5
   13a80:	1ac0      	subs	r0, r0, r3
   13a82:	4152      	adcs	r2, r2
   13a84:	0903      	lsrs	r3, r0, #4
   13a86:	428b      	cmp	r3, r1
   13a88:	d301      	bcc.n	13a8e <__divsi3+0xd2>
   13a8a:	010b      	lsls	r3, r1, #4
   13a8c:	1ac0      	subs	r0, r0, r3
   13a8e:	4152      	adcs	r2, r2
   13a90:	08c3      	lsrs	r3, r0, #3
   13a92:	428b      	cmp	r3, r1
   13a94:	d301      	bcc.n	13a9a <__divsi3+0xde>
   13a96:	00cb      	lsls	r3, r1, #3
   13a98:	1ac0      	subs	r0, r0, r3
   13a9a:	4152      	adcs	r2, r2
   13a9c:	0883      	lsrs	r3, r0, #2
   13a9e:	428b      	cmp	r3, r1
   13aa0:	d301      	bcc.n	13aa6 <__divsi3+0xea>
   13aa2:	008b      	lsls	r3, r1, #2
   13aa4:	1ac0      	subs	r0, r0, r3
   13aa6:	4152      	adcs	r2, r2
   13aa8:	0843      	lsrs	r3, r0, #1
   13aaa:	428b      	cmp	r3, r1
   13aac:	d301      	bcc.n	13ab2 <__divsi3+0xf6>
   13aae:	004b      	lsls	r3, r1, #1
   13ab0:	1ac0      	subs	r0, r0, r3
   13ab2:	4152      	adcs	r2, r2
   13ab4:	1a41      	subs	r1, r0, r1
   13ab6:	d200      	bcs.n	13aba <__divsi3+0xfe>
   13ab8:	4601      	mov	r1, r0
   13aba:	4152      	adcs	r2, r2
   13abc:	4610      	mov	r0, r2
   13abe:	4770      	bx	lr
   13ac0:	e05d      	b.n	13b7e <__divsi3+0x1c2>
   13ac2:	0fca      	lsrs	r2, r1, #31
   13ac4:	d000      	beq.n	13ac8 <__divsi3+0x10c>
   13ac6:	4249      	negs	r1, r1
   13ac8:	1003      	asrs	r3, r0, #32
   13aca:	d300      	bcc.n	13ace <__divsi3+0x112>
   13acc:	4240      	negs	r0, r0
   13ace:	4053      	eors	r3, r2
   13ad0:	2200      	movs	r2, #0
   13ad2:	469c      	mov	ip, r3
   13ad4:	0903      	lsrs	r3, r0, #4
   13ad6:	428b      	cmp	r3, r1
   13ad8:	d32d      	bcc.n	13b36 <__divsi3+0x17a>
   13ada:	0a03      	lsrs	r3, r0, #8
   13adc:	428b      	cmp	r3, r1
   13ade:	d312      	bcc.n	13b06 <__divsi3+0x14a>
   13ae0:	22fc      	movs	r2, #252	; 0xfc
   13ae2:	0189      	lsls	r1, r1, #6
   13ae4:	ba12      	rev	r2, r2
   13ae6:	0a03      	lsrs	r3, r0, #8
   13ae8:	428b      	cmp	r3, r1
   13aea:	d30c      	bcc.n	13b06 <__divsi3+0x14a>
   13aec:	0189      	lsls	r1, r1, #6
   13aee:	1192      	asrs	r2, r2, #6
   13af0:	428b      	cmp	r3, r1
   13af2:	d308      	bcc.n	13b06 <__divsi3+0x14a>
   13af4:	0189      	lsls	r1, r1, #6
   13af6:	1192      	asrs	r2, r2, #6
   13af8:	428b      	cmp	r3, r1
   13afa:	d304      	bcc.n	13b06 <__divsi3+0x14a>
   13afc:	0189      	lsls	r1, r1, #6
   13afe:	d03a      	beq.n	13b76 <__divsi3+0x1ba>
   13b00:	1192      	asrs	r2, r2, #6
   13b02:	e000      	b.n	13b06 <__divsi3+0x14a>
   13b04:	0989      	lsrs	r1, r1, #6
   13b06:	09c3      	lsrs	r3, r0, #7
   13b08:	428b      	cmp	r3, r1
   13b0a:	d301      	bcc.n	13b10 <__divsi3+0x154>
   13b0c:	01cb      	lsls	r3, r1, #7
   13b0e:	1ac0      	subs	r0, r0, r3
   13b10:	4152      	adcs	r2, r2
   13b12:	0983      	lsrs	r3, r0, #6
   13b14:	428b      	cmp	r3, r1
   13b16:	d301      	bcc.n	13b1c <__divsi3+0x160>
   13b18:	018b      	lsls	r3, r1, #6
   13b1a:	1ac0      	subs	r0, r0, r3
   13b1c:	4152      	adcs	r2, r2
   13b1e:	0943      	lsrs	r3, r0, #5
   13b20:	428b      	cmp	r3, r1
   13b22:	d301      	bcc.n	13b28 <__divsi3+0x16c>
   13b24:	014b      	lsls	r3, r1, #5
   13b26:	1ac0      	subs	r0, r0, r3
   13b28:	4152      	adcs	r2, r2
   13b2a:	0903      	lsrs	r3, r0, #4
   13b2c:	428b      	cmp	r3, r1
   13b2e:	d301      	bcc.n	13b34 <__divsi3+0x178>
   13b30:	010b      	lsls	r3, r1, #4
   13b32:	1ac0      	subs	r0, r0, r3
   13b34:	4152      	adcs	r2, r2
   13b36:	08c3      	lsrs	r3, r0, #3
   13b38:	428b      	cmp	r3, r1
   13b3a:	d301      	bcc.n	13b40 <__divsi3+0x184>
   13b3c:	00cb      	lsls	r3, r1, #3
   13b3e:	1ac0      	subs	r0, r0, r3
   13b40:	4152      	adcs	r2, r2
   13b42:	0883      	lsrs	r3, r0, #2
   13b44:	428b      	cmp	r3, r1
   13b46:	d301      	bcc.n	13b4c <__divsi3+0x190>
   13b48:	008b      	lsls	r3, r1, #2
   13b4a:	1ac0      	subs	r0, r0, r3
   13b4c:	4152      	adcs	r2, r2
   13b4e:	d2d9      	bcs.n	13b04 <__divsi3+0x148>
   13b50:	0843      	lsrs	r3, r0, #1
   13b52:	428b      	cmp	r3, r1
   13b54:	d301      	bcc.n	13b5a <__divsi3+0x19e>
   13b56:	004b      	lsls	r3, r1, #1
   13b58:	1ac0      	subs	r0, r0, r3
   13b5a:	4152      	adcs	r2, r2
   13b5c:	1a41      	subs	r1, r0, r1
   13b5e:	d200      	bcs.n	13b62 <__divsi3+0x1a6>
   13b60:	4601      	mov	r1, r0
   13b62:	4663      	mov	r3, ip
   13b64:	4152      	adcs	r2, r2
   13b66:	105b      	asrs	r3, r3, #1
   13b68:	4610      	mov	r0, r2
   13b6a:	d301      	bcc.n	13b70 <__divsi3+0x1b4>
   13b6c:	4240      	negs	r0, r0
   13b6e:	2b00      	cmp	r3, #0
   13b70:	d500      	bpl.n	13b74 <__divsi3+0x1b8>
   13b72:	4249      	negs	r1, r1
   13b74:	4770      	bx	lr
   13b76:	4663      	mov	r3, ip
   13b78:	105b      	asrs	r3, r3, #1
   13b7a:	d300      	bcc.n	13b7e <__divsi3+0x1c2>
   13b7c:	4240      	negs	r0, r0
   13b7e:	b501      	push	{r0, lr}
   13b80:	2000      	movs	r0, #0
   13b82:	f000 f805 	bl	13b90 <__aeabi_idiv0>
   13b86:	bd02      	pop	{r1, pc}

00013b88 <__aeabi_idivmod>:
   13b88:	2900      	cmp	r1, #0
   13b8a:	d0f8      	beq.n	13b7e <__divsi3+0x1c2>
   13b8c:	e716      	b.n	139bc <__divsi3>
   13b8e:	4770      	bx	lr

00013b90 <__aeabi_idiv0>:
   13b90:	4770      	bx	lr
   13b92:	46c0      	nop			; (mov r8, r8)

00013b94 <__ctzsi2>:
   13b94:	4241      	negs	r1, r0
   13b96:	4008      	ands	r0, r1
   13b98:	211c      	movs	r1, #28
   13b9a:	2301      	movs	r3, #1
   13b9c:	041b      	lsls	r3, r3, #16
   13b9e:	4298      	cmp	r0, r3
   13ba0:	d301      	bcc.n	13ba6 <__ctzsi2+0x12>
   13ba2:	0c00      	lsrs	r0, r0, #16
   13ba4:	3910      	subs	r1, #16
   13ba6:	0a1b      	lsrs	r3, r3, #8
   13ba8:	4298      	cmp	r0, r3
   13baa:	d301      	bcc.n	13bb0 <__ctzsi2+0x1c>
   13bac:	0a00      	lsrs	r0, r0, #8
   13bae:	3908      	subs	r1, #8
   13bb0:	091b      	lsrs	r3, r3, #4
   13bb2:	4298      	cmp	r0, r3
   13bb4:	d301      	bcc.n	13bba <__ctzsi2+0x26>
   13bb6:	0900      	lsrs	r0, r0, #4
   13bb8:	3904      	subs	r1, #4
   13bba:	a202      	add	r2, pc, #8	; (adr r2, 13bc4 <__ctzsi2+0x30>)
   13bbc:	5c10      	ldrb	r0, [r2, r0]
   13bbe:	1a40      	subs	r0, r0, r1
   13bc0:	4770      	bx	lr
   13bc2:	46c0      	nop			; (mov r8, r8)
   13bc4:	1d1d1c1b 	.word	0x1d1d1c1b
   13bc8:	1e1e1e1e 	.word	0x1e1e1e1e
   13bcc:	1f1f1f1f 	.word	0x1f1f1f1f
   13bd0:	1f1f1f1f 	.word	0x1f1f1f1f

00013bd4 <atoi>:
   13bd4:	b510      	push	{r4, lr}
   13bd6:	220a      	movs	r2, #10
   13bd8:	2100      	movs	r1, #0
   13bda:	f000 fb93 	bl	14304 <strtol>
   13bde:	bd10      	pop	{r4, pc}

00013be0 <__libc_init_array>:
   13be0:	b570      	push	{r4, r5, r6, lr}
   13be2:	2600      	movs	r6, #0
   13be4:	4d0c      	ldr	r5, [pc, #48]	; (13c18 <__libc_init_array+0x38>)
   13be6:	4c0d      	ldr	r4, [pc, #52]	; (13c1c <__libc_init_array+0x3c>)
   13be8:	1b64      	subs	r4, r4, r5
   13bea:	10a4      	asrs	r4, r4, #2
   13bec:	42a6      	cmp	r6, r4
   13bee:	d109      	bne.n	13c04 <__libc_init_array+0x24>
   13bf0:	2600      	movs	r6, #0
   13bf2:	f003 f85d 	bl	16cb0 <_init>
   13bf6:	4d0a      	ldr	r5, [pc, #40]	; (13c20 <__libc_init_array+0x40>)
   13bf8:	4c0a      	ldr	r4, [pc, #40]	; (13c24 <__libc_init_array+0x44>)
   13bfa:	1b64      	subs	r4, r4, r5
   13bfc:	10a4      	asrs	r4, r4, #2
   13bfe:	42a6      	cmp	r6, r4
   13c00:	d105      	bne.n	13c0e <__libc_init_array+0x2e>
   13c02:	bd70      	pop	{r4, r5, r6, pc}
   13c04:	00b3      	lsls	r3, r6, #2
   13c06:	58eb      	ldr	r3, [r5, r3]
   13c08:	4798      	blx	r3
   13c0a:	3601      	adds	r6, #1
   13c0c:	e7ee      	b.n	13bec <__libc_init_array+0xc>
   13c0e:	00b3      	lsls	r3, r6, #2
   13c10:	58eb      	ldr	r3, [r5, r3]
   13c12:	4798      	blx	r3
   13c14:	3601      	adds	r6, #1
   13c16:	e7f2      	b.n	13bfe <__libc_init_array+0x1e>
   13c18:	00016cbc 	.word	0x00016cbc
   13c1c:	00016cbc 	.word	0x00016cbc
   13c20:	00016cbc 	.word	0x00016cbc
   13c24:	00016cc0 	.word	0x00016cc0

00013c28 <malloc>:
   13c28:	b510      	push	{r4, lr}
   13c2a:	4b03      	ldr	r3, [pc, #12]	; (13c38 <malloc+0x10>)
   13c2c:	0001      	movs	r1, r0
   13c2e:	6818      	ldr	r0, [r3, #0]
   13c30:	f000 f87c 	bl	13d2c <_malloc_r>
   13c34:	bd10      	pop	{r4, pc}
   13c36:	46c0      	nop			; (mov r8, r8)
   13c38:	200001fc 	.word	0x200001fc

00013c3c <free>:
   13c3c:	b510      	push	{r4, lr}
   13c3e:	4b03      	ldr	r3, [pc, #12]	; (13c4c <free+0x10>)
   13c40:	0001      	movs	r1, r0
   13c42:	6818      	ldr	r0, [r3, #0]
   13c44:	f000 f828 	bl	13c98 <_free_r>
   13c48:	bd10      	pop	{r4, pc}
   13c4a:	46c0      	nop			; (mov r8, r8)
   13c4c:	200001fc 	.word	0x200001fc

00013c50 <memcpy>:
   13c50:	2300      	movs	r3, #0
   13c52:	b510      	push	{r4, lr}
   13c54:	429a      	cmp	r2, r3
   13c56:	d100      	bne.n	13c5a <memcpy+0xa>
   13c58:	bd10      	pop	{r4, pc}
   13c5a:	5ccc      	ldrb	r4, [r1, r3]
   13c5c:	54c4      	strb	r4, [r0, r3]
   13c5e:	3301      	adds	r3, #1
   13c60:	e7f8      	b.n	13c54 <memcpy+0x4>

00013c62 <memmove>:
   13c62:	b510      	push	{r4, lr}
   13c64:	4288      	cmp	r0, r1
   13c66:	d902      	bls.n	13c6e <memmove+0xc>
   13c68:	188b      	adds	r3, r1, r2
   13c6a:	4298      	cmp	r0, r3
   13c6c:	d308      	bcc.n	13c80 <memmove+0x1e>
   13c6e:	2300      	movs	r3, #0
   13c70:	429a      	cmp	r2, r3
   13c72:	d007      	beq.n	13c84 <memmove+0x22>
   13c74:	5ccc      	ldrb	r4, [r1, r3]
   13c76:	54c4      	strb	r4, [r0, r3]
   13c78:	3301      	adds	r3, #1
   13c7a:	e7f9      	b.n	13c70 <memmove+0xe>
   13c7c:	5c8b      	ldrb	r3, [r1, r2]
   13c7e:	5483      	strb	r3, [r0, r2]
   13c80:	3a01      	subs	r2, #1
   13c82:	d2fb      	bcs.n	13c7c <memmove+0x1a>
   13c84:	bd10      	pop	{r4, pc}

00013c86 <memset>:
   13c86:	0003      	movs	r3, r0
   13c88:	1882      	adds	r2, r0, r2
   13c8a:	4293      	cmp	r3, r2
   13c8c:	d100      	bne.n	13c90 <memset+0xa>
   13c8e:	4770      	bx	lr
   13c90:	7019      	strb	r1, [r3, #0]
   13c92:	3301      	adds	r3, #1
   13c94:	e7f9      	b.n	13c8a <memset+0x4>
	...

00013c98 <_free_r>:
   13c98:	b570      	push	{r4, r5, r6, lr}
   13c9a:	0005      	movs	r5, r0
   13c9c:	2900      	cmp	r1, #0
   13c9e:	d010      	beq.n	13cc2 <_free_r+0x2a>
   13ca0:	1f0c      	subs	r4, r1, #4
   13ca2:	6823      	ldr	r3, [r4, #0]
   13ca4:	2b00      	cmp	r3, #0
   13ca6:	da00      	bge.n	13caa <_free_r+0x12>
   13ca8:	18e4      	adds	r4, r4, r3
   13caa:	0028      	movs	r0, r5
   13cac:	f000 fe12 	bl	148d4 <__malloc_lock>
   13cb0:	4a1d      	ldr	r2, [pc, #116]	; (13d28 <_free_r+0x90>)
   13cb2:	6813      	ldr	r3, [r2, #0]
   13cb4:	2b00      	cmp	r3, #0
   13cb6:	d105      	bne.n	13cc4 <_free_r+0x2c>
   13cb8:	6063      	str	r3, [r4, #4]
   13cba:	6014      	str	r4, [r2, #0]
   13cbc:	0028      	movs	r0, r5
   13cbe:	f000 fe0a 	bl	148d6 <__malloc_unlock>
   13cc2:	bd70      	pop	{r4, r5, r6, pc}
   13cc4:	42a3      	cmp	r3, r4
   13cc6:	d909      	bls.n	13cdc <_free_r+0x44>
   13cc8:	6821      	ldr	r1, [r4, #0]
   13cca:	1860      	adds	r0, r4, r1
   13ccc:	4283      	cmp	r3, r0
   13cce:	d1f3      	bne.n	13cb8 <_free_r+0x20>
   13cd0:	6818      	ldr	r0, [r3, #0]
   13cd2:	685b      	ldr	r3, [r3, #4]
   13cd4:	1841      	adds	r1, r0, r1
   13cd6:	6021      	str	r1, [r4, #0]
   13cd8:	e7ee      	b.n	13cb8 <_free_r+0x20>
   13cda:	0013      	movs	r3, r2
   13cdc:	685a      	ldr	r2, [r3, #4]
   13cde:	2a00      	cmp	r2, #0
   13ce0:	d001      	beq.n	13ce6 <_free_r+0x4e>
   13ce2:	42a2      	cmp	r2, r4
   13ce4:	d9f9      	bls.n	13cda <_free_r+0x42>
   13ce6:	6819      	ldr	r1, [r3, #0]
   13ce8:	1858      	adds	r0, r3, r1
   13cea:	42a0      	cmp	r0, r4
   13cec:	d10b      	bne.n	13d06 <_free_r+0x6e>
   13cee:	6820      	ldr	r0, [r4, #0]
   13cf0:	1809      	adds	r1, r1, r0
   13cf2:	1858      	adds	r0, r3, r1
   13cf4:	6019      	str	r1, [r3, #0]
   13cf6:	4282      	cmp	r2, r0
   13cf8:	d1e0      	bne.n	13cbc <_free_r+0x24>
   13cfa:	6810      	ldr	r0, [r2, #0]
   13cfc:	6852      	ldr	r2, [r2, #4]
   13cfe:	1841      	adds	r1, r0, r1
   13d00:	6019      	str	r1, [r3, #0]
   13d02:	605a      	str	r2, [r3, #4]
   13d04:	e7da      	b.n	13cbc <_free_r+0x24>
   13d06:	42a0      	cmp	r0, r4
   13d08:	d902      	bls.n	13d10 <_free_r+0x78>
   13d0a:	230c      	movs	r3, #12
   13d0c:	602b      	str	r3, [r5, #0]
   13d0e:	e7d5      	b.n	13cbc <_free_r+0x24>
   13d10:	6821      	ldr	r1, [r4, #0]
   13d12:	1860      	adds	r0, r4, r1
   13d14:	4282      	cmp	r2, r0
   13d16:	d103      	bne.n	13d20 <_free_r+0x88>
   13d18:	6810      	ldr	r0, [r2, #0]
   13d1a:	6852      	ldr	r2, [r2, #4]
   13d1c:	1841      	adds	r1, r0, r1
   13d1e:	6021      	str	r1, [r4, #0]
   13d20:	6062      	str	r2, [r4, #4]
   13d22:	605c      	str	r4, [r3, #4]
   13d24:	e7ca      	b.n	13cbc <_free_r+0x24>
   13d26:	46c0      	nop			; (mov r8, r8)
   13d28:	20000bb0 	.word	0x20000bb0

00013d2c <_malloc_r>:
   13d2c:	2303      	movs	r3, #3
   13d2e:	b570      	push	{r4, r5, r6, lr}
   13d30:	1ccd      	adds	r5, r1, #3
   13d32:	439d      	bics	r5, r3
   13d34:	3508      	adds	r5, #8
   13d36:	0006      	movs	r6, r0
   13d38:	2d0c      	cmp	r5, #12
   13d3a:	d21e      	bcs.n	13d7a <_malloc_r+0x4e>
   13d3c:	250c      	movs	r5, #12
   13d3e:	42a9      	cmp	r1, r5
   13d40:	d81d      	bhi.n	13d7e <_malloc_r+0x52>
   13d42:	0030      	movs	r0, r6
   13d44:	f000 fdc6 	bl	148d4 <__malloc_lock>
   13d48:	4a25      	ldr	r2, [pc, #148]	; (13de0 <_malloc_r+0xb4>)
   13d4a:	6814      	ldr	r4, [r2, #0]
   13d4c:	0021      	movs	r1, r4
   13d4e:	2900      	cmp	r1, #0
   13d50:	d119      	bne.n	13d86 <_malloc_r+0x5a>
   13d52:	4c24      	ldr	r4, [pc, #144]	; (13de4 <_malloc_r+0xb8>)
   13d54:	6823      	ldr	r3, [r4, #0]
   13d56:	2b00      	cmp	r3, #0
   13d58:	d103      	bne.n	13d62 <_malloc_r+0x36>
   13d5a:	0030      	movs	r0, r6
   13d5c:	f000 f8dc 	bl	13f18 <_sbrk_r>
   13d60:	6020      	str	r0, [r4, #0]
   13d62:	0029      	movs	r1, r5
   13d64:	0030      	movs	r0, r6
   13d66:	f000 f8d7 	bl	13f18 <_sbrk_r>
   13d6a:	1c43      	adds	r3, r0, #1
   13d6c:	d12c      	bne.n	13dc8 <_malloc_r+0x9c>
   13d6e:	230c      	movs	r3, #12
   13d70:	0030      	movs	r0, r6
   13d72:	6033      	str	r3, [r6, #0]
   13d74:	f000 fdaf 	bl	148d6 <__malloc_unlock>
   13d78:	e003      	b.n	13d82 <_malloc_r+0x56>
   13d7a:	2d00      	cmp	r5, #0
   13d7c:	dadf      	bge.n	13d3e <_malloc_r+0x12>
   13d7e:	230c      	movs	r3, #12
   13d80:	6033      	str	r3, [r6, #0]
   13d82:	2000      	movs	r0, #0
   13d84:	bd70      	pop	{r4, r5, r6, pc}
   13d86:	680b      	ldr	r3, [r1, #0]
   13d88:	1b5b      	subs	r3, r3, r5
   13d8a:	d41a      	bmi.n	13dc2 <_malloc_r+0x96>
   13d8c:	2b0b      	cmp	r3, #11
   13d8e:	d903      	bls.n	13d98 <_malloc_r+0x6c>
   13d90:	600b      	str	r3, [r1, #0]
   13d92:	18cc      	adds	r4, r1, r3
   13d94:	6025      	str	r5, [r4, #0]
   13d96:	e003      	b.n	13da0 <_malloc_r+0x74>
   13d98:	428c      	cmp	r4, r1
   13d9a:	d10e      	bne.n	13dba <_malloc_r+0x8e>
   13d9c:	6863      	ldr	r3, [r4, #4]
   13d9e:	6013      	str	r3, [r2, #0]
   13da0:	0030      	movs	r0, r6
   13da2:	f000 fd98 	bl	148d6 <__malloc_unlock>
   13da6:	0020      	movs	r0, r4
   13da8:	2207      	movs	r2, #7
   13daa:	300b      	adds	r0, #11
   13dac:	1d23      	adds	r3, r4, #4
   13dae:	4390      	bics	r0, r2
   13db0:	1ac3      	subs	r3, r0, r3
   13db2:	d0e7      	beq.n	13d84 <_malloc_r+0x58>
   13db4:	425a      	negs	r2, r3
   13db6:	50e2      	str	r2, [r4, r3]
   13db8:	e7e4      	b.n	13d84 <_malloc_r+0x58>
   13dba:	684b      	ldr	r3, [r1, #4]
   13dbc:	6063      	str	r3, [r4, #4]
   13dbe:	000c      	movs	r4, r1
   13dc0:	e7ee      	b.n	13da0 <_malloc_r+0x74>
   13dc2:	000c      	movs	r4, r1
   13dc4:	6849      	ldr	r1, [r1, #4]
   13dc6:	e7c2      	b.n	13d4e <_malloc_r+0x22>
   13dc8:	2303      	movs	r3, #3
   13dca:	1cc4      	adds	r4, r0, #3
   13dcc:	439c      	bics	r4, r3
   13dce:	42a0      	cmp	r0, r4
   13dd0:	d0e0      	beq.n	13d94 <_malloc_r+0x68>
   13dd2:	1a21      	subs	r1, r4, r0
   13dd4:	0030      	movs	r0, r6
   13dd6:	f000 f89f 	bl	13f18 <_sbrk_r>
   13dda:	1c43      	adds	r3, r0, #1
   13ddc:	d1da      	bne.n	13d94 <_malloc_r+0x68>
   13dde:	e7c6      	b.n	13d6e <_malloc_r+0x42>
   13de0:	20000bb0 	.word	0x20000bb0
   13de4:	20000bb4 	.word	0x20000bb4

00013de8 <iprintf>:
   13de8:	b40f      	push	{r0, r1, r2, r3}
   13dea:	4b0b      	ldr	r3, [pc, #44]	; (13e18 <iprintf+0x30>)
   13dec:	b513      	push	{r0, r1, r4, lr}
   13dee:	681c      	ldr	r4, [r3, #0]
   13df0:	2c00      	cmp	r4, #0
   13df2:	d005      	beq.n	13e00 <iprintf+0x18>
   13df4:	69a3      	ldr	r3, [r4, #24]
   13df6:	2b00      	cmp	r3, #0
   13df8:	d102      	bne.n	13e00 <iprintf+0x18>
   13dfa:	0020      	movs	r0, r4
   13dfc:	f000 fc5a 	bl	146b4 <__sinit>
   13e00:	ab05      	add	r3, sp, #20
   13e02:	9a04      	ldr	r2, [sp, #16]
   13e04:	68a1      	ldr	r1, [r4, #8]
   13e06:	0020      	movs	r0, r4
   13e08:	9301      	str	r3, [sp, #4]
   13e0a:	f000 fef3 	bl	14bf4 <_vfiprintf_r>
   13e0e:	bc16      	pop	{r1, r2, r4}
   13e10:	bc08      	pop	{r3}
   13e12:	b004      	add	sp, #16
   13e14:	4718      	bx	r3
   13e16:	46c0      	nop			; (mov r8, r8)
   13e18:	200001fc 	.word	0x200001fc

00013e1c <putchar>:
   13e1c:	4b08      	ldr	r3, [pc, #32]	; (13e40 <putchar+0x24>)
   13e1e:	b570      	push	{r4, r5, r6, lr}
   13e20:	681c      	ldr	r4, [r3, #0]
   13e22:	0005      	movs	r5, r0
   13e24:	2c00      	cmp	r4, #0
   13e26:	d005      	beq.n	13e34 <putchar+0x18>
   13e28:	69a3      	ldr	r3, [r4, #24]
   13e2a:	2b00      	cmp	r3, #0
   13e2c:	d102      	bne.n	13e34 <putchar+0x18>
   13e2e:	0020      	movs	r0, r4
   13e30:	f000 fc40 	bl	146b4 <__sinit>
   13e34:	0029      	movs	r1, r5
   13e36:	68a2      	ldr	r2, [r4, #8]
   13e38:	0020      	movs	r0, r4
   13e3a:	f001 f97f 	bl	1513c <_putc_r>
   13e3e:	bd70      	pop	{r4, r5, r6, pc}
   13e40:	200001fc 	.word	0x200001fc

00013e44 <_puts_r>:
   13e44:	b570      	push	{r4, r5, r6, lr}
   13e46:	0005      	movs	r5, r0
   13e48:	000e      	movs	r6, r1
   13e4a:	2800      	cmp	r0, #0
   13e4c:	d004      	beq.n	13e58 <_puts_r+0x14>
   13e4e:	6983      	ldr	r3, [r0, #24]
   13e50:	2b00      	cmp	r3, #0
   13e52:	d101      	bne.n	13e58 <_puts_r+0x14>
   13e54:	f000 fc2e 	bl	146b4 <__sinit>
   13e58:	69ab      	ldr	r3, [r5, #24]
   13e5a:	68ac      	ldr	r4, [r5, #8]
   13e5c:	2b00      	cmp	r3, #0
   13e5e:	d102      	bne.n	13e66 <_puts_r+0x22>
   13e60:	0028      	movs	r0, r5
   13e62:	f000 fc27 	bl	146b4 <__sinit>
   13e66:	4b24      	ldr	r3, [pc, #144]	; (13ef8 <_puts_r+0xb4>)
   13e68:	429c      	cmp	r4, r3
   13e6a:	d10f      	bne.n	13e8c <_puts_r+0x48>
   13e6c:	686c      	ldr	r4, [r5, #4]
   13e6e:	89a3      	ldrh	r3, [r4, #12]
   13e70:	071b      	lsls	r3, r3, #28
   13e72:	d502      	bpl.n	13e7a <_puts_r+0x36>
   13e74:	6923      	ldr	r3, [r4, #16]
   13e76:	2b00      	cmp	r3, #0
   13e78:	d120      	bne.n	13ebc <_puts_r+0x78>
   13e7a:	0021      	movs	r1, r4
   13e7c:	0028      	movs	r0, r5
   13e7e:	f000 faab 	bl	143d8 <__swsetup_r>
   13e82:	2800      	cmp	r0, #0
   13e84:	d01a      	beq.n	13ebc <_puts_r+0x78>
   13e86:	2001      	movs	r0, #1
   13e88:	4240      	negs	r0, r0
   13e8a:	bd70      	pop	{r4, r5, r6, pc}
   13e8c:	4b1b      	ldr	r3, [pc, #108]	; (13efc <_puts_r+0xb8>)
   13e8e:	429c      	cmp	r4, r3
   13e90:	d101      	bne.n	13e96 <_puts_r+0x52>
   13e92:	68ac      	ldr	r4, [r5, #8]
   13e94:	e7eb      	b.n	13e6e <_puts_r+0x2a>
   13e96:	4b1a      	ldr	r3, [pc, #104]	; (13f00 <_puts_r+0xbc>)
   13e98:	429c      	cmp	r4, r3
   13e9a:	d1e8      	bne.n	13e6e <_puts_r+0x2a>
   13e9c:	68ec      	ldr	r4, [r5, #12]
   13e9e:	e7e6      	b.n	13e6e <_puts_r+0x2a>
   13ea0:	3b01      	subs	r3, #1
   13ea2:	3601      	adds	r6, #1
   13ea4:	60a3      	str	r3, [r4, #8]
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	da04      	bge.n	13eb4 <_puts_r+0x70>
   13eaa:	69a2      	ldr	r2, [r4, #24]
   13eac:	4293      	cmp	r3, r2
   13eae:	db16      	blt.n	13ede <_puts_r+0x9a>
   13eb0:	290a      	cmp	r1, #10
   13eb2:	d014      	beq.n	13ede <_puts_r+0x9a>
   13eb4:	6823      	ldr	r3, [r4, #0]
   13eb6:	1c5a      	adds	r2, r3, #1
   13eb8:	6022      	str	r2, [r4, #0]
   13eba:	7019      	strb	r1, [r3, #0]
   13ebc:	7831      	ldrb	r1, [r6, #0]
   13ebe:	68a3      	ldr	r3, [r4, #8]
   13ec0:	2900      	cmp	r1, #0
   13ec2:	d1ed      	bne.n	13ea0 <_puts_r+0x5c>
   13ec4:	3b01      	subs	r3, #1
   13ec6:	60a3      	str	r3, [r4, #8]
   13ec8:	2b00      	cmp	r3, #0
   13eca:	da0f      	bge.n	13eec <_puts_r+0xa8>
   13ecc:	0022      	movs	r2, r4
   13ece:	310a      	adds	r1, #10
   13ed0:	0028      	movs	r0, r5
   13ed2:	f000 fa2b 	bl	1432c <__swbuf_r>
   13ed6:	1c43      	adds	r3, r0, #1
   13ed8:	d0d5      	beq.n	13e86 <_puts_r+0x42>
   13eda:	200a      	movs	r0, #10
   13edc:	e7d5      	b.n	13e8a <_puts_r+0x46>
   13ede:	0022      	movs	r2, r4
   13ee0:	0028      	movs	r0, r5
   13ee2:	f000 fa23 	bl	1432c <__swbuf_r>
   13ee6:	1c43      	adds	r3, r0, #1
   13ee8:	d1e8      	bne.n	13ebc <_puts_r+0x78>
   13eea:	e7cc      	b.n	13e86 <_puts_r+0x42>
   13eec:	200a      	movs	r0, #10
   13eee:	6823      	ldr	r3, [r4, #0]
   13ef0:	1c5a      	adds	r2, r3, #1
   13ef2:	6022      	str	r2, [r4, #0]
   13ef4:	7018      	strb	r0, [r3, #0]
   13ef6:	e7c8      	b.n	13e8a <_puts_r+0x46>
   13ef8:	00016b30 	.word	0x00016b30
   13efc:	00016b50 	.word	0x00016b50
   13f00:	00016b10 	.word	0x00016b10

00013f04 <puts>:
   13f04:	b510      	push	{r4, lr}
   13f06:	4b03      	ldr	r3, [pc, #12]	; (13f14 <puts+0x10>)
   13f08:	0001      	movs	r1, r0
   13f0a:	6818      	ldr	r0, [r3, #0]
   13f0c:	f7ff ff9a 	bl	13e44 <_puts_r>
   13f10:	bd10      	pop	{r4, pc}
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	200001fc 	.word	0x200001fc

00013f18 <_sbrk_r>:
   13f18:	2300      	movs	r3, #0
   13f1a:	b570      	push	{r4, r5, r6, lr}
   13f1c:	4c06      	ldr	r4, [pc, #24]	; (13f38 <_sbrk_r+0x20>)
   13f1e:	0005      	movs	r5, r0
   13f20:	0008      	movs	r0, r1
   13f22:	6023      	str	r3, [r4, #0]
   13f24:	f7fe fa94 	bl	12450 <_sbrk>
   13f28:	1c43      	adds	r3, r0, #1
   13f2a:	d103      	bne.n	13f34 <_sbrk_r+0x1c>
   13f2c:	6823      	ldr	r3, [r4, #0]
   13f2e:	2b00      	cmp	r3, #0
   13f30:	d000      	beq.n	13f34 <_sbrk_r+0x1c>
   13f32:	602b      	str	r3, [r5, #0]
   13f34:	bd70      	pop	{r4, r5, r6, pc}
   13f36:	46c0      	nop			; (mov r8, r8)
   13f38:	200012a0 	.word	0x200012a0

00013f3c <setbuf>:
   13f3c:	424a      	negs	r2, r1
   13f3e:	414a      	adcs	r2, r1
   13f40:	2380      	movs	r3, #128	; 0x80
   13f42:	b510      	push	{r4, lr}
   13f44:	0052      	lsls	r2, r2, #1
   13f46:	00db      	lsls	r3, r3, #3
   13f48:	f000 f802 	bl	13f50 <setvbuf>
   13f4c:	bd10      	pop	{r4, pc}
	...

00013f50 <setvbuf>:
   13f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f52:	001d      	movs	r5, r3
   13f54:	4b4f      	ldr	r3, [pc, #316]	; (14094 <setvbuf+0x144>)
   13f56:	b085      	sub	sp, #20
   13f58:	681e      	ldr	r6, [r3, #0]
   13f5a:	0004      	movs	r4, r0
   13f5c:	000f      	movs	r7, r1
   13f5e:	9200      	str	r2, [sp, #0]
   13f60:	2e00      	cmp	r6, #0
   13f62:	d005      	beq.n	13f70 <setvbuf+0x20>
   13f64:	69b3      	ldr	r3, [r6, #24]
   13f66:	2b00      	cmp	r3, #0
   13f68:	d102      	bne.n	13f70 <setvbuf+0x20>
   13f6a:	0030      	movs	r0, r6
   13f6c:	f000 fba2 	bl	146b4 <__sinit>
   13f70:	4b49      	ldr	r3, [pc, #292]	; (14098 <setvbuf+0x148>)
   13f72:	429c      	cmp	r4, r3
   13f74:	d150      	bne.n	14018 <setvbuf+0xc8>
   13f76:	6874      	ldr	r4, [r6, #4]
   13f78:	9b00      	ldr	r3, [sp, #0]
   13f7a:	2b02      	cmp	r3, #2
   13f7c:	d005      	beq.n	13f8a <setvbuf+0x3a>
   13f7e:	2b01      	cmp	r3, #1
   13f80:	d900      	bls.n	13f84 <setvbuf+0x34>
   13f82:	e084      	b.n	1408e <setvbuf+0x13e>
   13f84:	2d00      	cmp	r5, #0
   13f86:	da00      	bge.n	13f8a <setvbuf+0x3a>
   13f88:	e081      	b.n	1408e <setvbuf+0x13e>
   13f8a:	0021      	movs	r1, r4
   13f8c:	0030      	movs	r0, r6
   13f8e:	f000 fb23 	bl	145d8 <_fflush_r>
   13f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13f94:	2900      	cmp	r1, #0
   13f96:	d008      	beq.n	13faa <setvbuf+0x5a>
   13f98:	0023      	movs	r3, r4
   13f9a:	3344      	adds	r3, #68	; 0x44
   13f9c:	4299      	cmp	r1, r3
   13f9e:	d002      	beq.n	13fa6 <setvbuf+0x56>
   13fa0:	0030      	movs	r0, r6
   13fa2:	f7ff fe79 	bl	13c98 <_free_r>
   13fa6:	2300      	movs	r3, #0
   13fa8:	6363      	str	r3, [r4, #52]	; 0x34
   13faa:	2300      	movs	r3, #0
   13fac:	61a3      	str	r3, [r4, #24]
   13fae:	6063      	str	r3, [r4, #4]
   13fb0:	89a3      	ldrh	r3, [r4, #12]
   13fb2:	061b      	lsls	r3, r3, #24
   13fb4:	d503      	bpl.n	13fbe <setvbuf+0x6e>
   13fb6:	6921      	ldr	r1, [r4, #16]
   13fb8:	0030      	movs	r0, r6
   13fba:	f7ff fe6d 	bl	13c98 <_free_r>
   13fbe:	89a3      	ldrh	r3, [r4, #12]
   13fc0:	4a36      	ldr	r2, [pc, #216]	; (1409c <setvbuf+0x14c>)
   13fc2:	4013      	ands	r3, r2
   13fc4:	81a3      	strh	r3, [r4, #12]
   13fc6:	9b00      	ldr	r3, [sp, #0]
   13fc8:	2b02      	cmp	r3, #2
   13fca:	d05a      	beq.n	14082 <setvbuf+0x132>
   13fcc:	ab03      	add	r3, sp, #12
   13fce:	aa02      	add	r2, sp, #8
   13fd0:	0021      	movs	r1, r4
   13fd2:	0030      	movs	r0, r6
   13fd4:	f000 fc06 	bl	147e4 <__swhatbuf_r>
   13fd8:	89a3      	ldrh	r3, [r4, #12]
   13fda:	4318      	orrs	r0, r3
   13fdc:	81a0      	strh	r0, [r4, #12]
   13fde:	2d00      	cmp	r5, #0
   13fe0:	d124      	bne.n	1402c <setvbuf+0xdc>
   13fe2:	9d02      	ldr	r5, [sp, #8]
   13fe4:	0028      	movs	r0, r5
   13fe6:	f7ff fe1f 	bl	13c28 <malloc>
   13fea:	9501      	str	r5, [sp, #4]
   13fec:	1e07      	subs	r7, r0, #0
   13fee:	d142      	bne.n	14076 <setvbuf+0x126>
   13ff0:	9b02      	ldr	r3, [sp, #8]
   13ff2:	9301      	str	r3, [sp, #4]
   13ff4:	42ab      	cmp	r3, r5
   13ff6:	d139      	bne.n	1406c <setvbuf+0x11c>
   13ff8:	2001      	movs	r0, #1
   13ffa:	4240      	negs	r0, r0
   13ffc:	2302      	movs	r3, #2
   13ffe:	89a2      	ldrh	r2, [r4, #12]
   14000:	4313      	orrs	r3, r2
   14002:	81a3      	strh	r3, [r4, #12]
   14004:	2300      	movs	r3, #0
   14006:	60a3      	str	r3, [r4, #8]
   14008:	0023      	movs	r3, r4
   1400a:	3347      	adds	r3, #71	; 0x47
   1400c:	6023      	str	r3, [r4, #0]
   1400e:	6123      	str	r3, [r4, #16]
   14010:	2301      	movs	r3, #1
   14012:	6163      	str	r3, [r4, #20]
   14014:	b005      	add	sp, #20
   14016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14018:	4b21      	ldr	r3, [pc, #132]	; (140a0 <setvbuf+0x150>)
   1401a:	429c      	cmp	r4, r3
   1401c:	d101      	bne.n	14022 <setvbuf+0xd2>
   1401e:	68b4      	ldr	r4, [r6, #8]
   14020:	e7aa      	b.n	13f78 <setvbuf+0x28>
   14022:	4b20      	ldr	r3, [pc, #128]	; (140a4 <setvbuf+0x154>)
   14024:	429c      	cmp	r4, r3
   14026:	d1a7      	bne.n	13f78 <setvbuf+0x28>
   14028:	68f4      	ldr	r4, [r6, #12]
   1402a:	e7a5      	b.n	13f78 <setvbuf+0x28>
   1402c:	2f00      	cmp	r7, #0
   1402e:	d0d9      	beq.n	13fe4 <setvbuf+0x94>
   14030:	69b3      	ldr	r3, [r6, #24]
   14032:	2b00      	cmp	r3, #0
   14034:	d102      	bne.n	1403c <setvbuf+0xec>
   14036:	0030      	movs	r0, r6
   14038:	f000 fb3c 	bl	146b4 <__sinit>
   1403c:	9b00      	ldr	r3, [sp, #0]
   1403e:	2b01      	cmp	r3, #1
   14040:	d103      	bne.n	1404a <setvbuf+0xfa>
   14042:	89a3      	ldrh	r3, [r4, #12]
   14044:	9a00      	ldr	r2, [sp, #0]
   14046:	431a      	orrs	r2, r3
   14048:	81a2      	strh	r2, [r4, #12]
   1404a:	2008      	movs	r0, #8
   1404c:	89a3      	ldrh	r3, [r4, #12]
   1404e:	6027      	str	r7, [r4, #0]
   14050:	6127      	str	r7, [r4, #16]
   14052:	6165      	str	r5, [r4, #20]
   14054:	4018      	ands	r0, r3
   14056:	d018      	beq.n	1408a <setvbuf+0x13a>
   14058:	2001      	movs	r0, #1
   1405a:	4018      	ands	r0, r3
   1405c:	2300      	movs	r3, #0
   1405e:	4298      	cmp	r0, r3
   14060:	d011      	beq.n	14086 <setvbuf+0x136>
   14062:	426d      	negs	r5, r5
   14064:	60a3      	str	r3, [r4, #8]
   14066:	61a5      	str	r5, [r4, #24]
   14068:	0018      	movs	r0, r3
   1406a:	e7d3      	b.n	14014 <setvbuf+0xc4>
   1406c:	9801      	ldr	r0, [sp, #4]
   1406e:	f7ff fddb 	bl	13c28 <malloc>
   14072:	1e07      	subs	r7, r0, #0
   14074:	d0c0      	beq.n	13ff8 <setvbuf+0xa8>
   14076:	2380      	movs	r3, #128	; 0x80
   14078:	89a2      	ldrh	r2, [r4, #12]
   1407a:	9d01      	ldr	r5, [sp, #4]
   1407c:	4313      	orrs	r3, r2
   1407e:	81a3      	strh	r3, [r4, #12]
   14080:	e7d6      	b.n	14030 <setvbuf+0xe0>
   14082:	2000      	movs	r0, #0
   14084:	e7ba      	b.n	13ffc <setvbuf+0xac>
   14086:	60a5      	str	r5, [r4, #8]
   14088:	e7c4      	b.n	14014 <setvbuf+0xc4>
   1408a:	60a0      	str	r0, [r4, #8]
   1408c:	e7c2      	b.n	14014 <setvbuf+0xc4>
   1408e:	2001      	movs	r0, #1
   14090:	4240      	negs	r0, r0
   14092:	e7bf      	b.n	14014 <setvbuf+0xc4>
   14094:	200001fc 	.word	0x200001fc
   14098:	00016b30 	.word	0x00016b30
   1409c:	fffff35c 	.word	0xfffff35c
   140a0:	00016b50 	.word	0x00016b50
   140a4:	00016b10 	.word	0x00016b10

000140a8 <siprintf>:
   140a8:	b40e      	push	{r1, r2, r3}
   140aa:	b510      	push	{r4, lr}
   140ac:	b09d      	sub	sp, #116	; 0x74
   140ae:	a902      	add	r1, sp, #8
   140b0:	9002      	str	r0, [sp, #8]
   140b2:	6108      	str	r0, [r1, #16]
   140b4:	480b      	ldr	r0, [pc, #44]	; (140e4 <siprintf+0x3c>)
   140b6:	2482      	movs	r4, #130	; 0x82
   140b8:	6088      	str	r0, [r1, #8]
   140ba:	6148      	str	r0, [r1, #20]
   140bc:	2001      	movs	r0, #1
   140be:	4240      	negs	r0, r0
   140c0:	ab1f      	add	r3, sp, #124	; 0x7c
   140c2:	81c8      	strh	r0, [r1, #14]
   140c4:	4808      	ldr	r0, [pc, #32]	; (140e8 <siprintf+0x40>)
   140c6:	cb04      	ldmia	r3!, {r2}
   140c8:	00a4      	lsls	r4, r4, #2
   140ca:	6800      	ldr	r0, [r0, #0]
   140cc:	9301      	str	r3, [sp, #4]
   140ce:	818c      	strh	r4, [r1, #12]
   140d0:	f000 fc64 	bl	1499c <_svfiprintf_r>
   140d4:	2300      	movs	r3, #0
   140d6:	9a02      	ldr	r2, [sp, #8]
   140d8:	7013      	strb	r3, [r2, #0]
   140da:	b01d      	add	sp, #116	; 0x74
   140dc:	bc10      	pop	{r4}
   140de:	bc08      	pop	{r3}
   140e0:	b003      	add	sp, #12
   140e2:	4718      	bx	r3
   140e4:	7fffffff 	.word	0x7fffffff
   140e8:	200001fc 	.word	0x200001fc

000140ec <strcmp>:
   140ec:	7802      	ldrb	r2, [r0, #0]
   140ee:	780b      	ldrb	r3, [r1, #0]
   140f0:	2a00      	cmp	r2, #0
   140f2:	d003      	beq.n	140fc <strcmp+0x10>
   140f4:	3001      	adds	r0, #1
   140f6:	3101      	adds	r1, #1
   140f8:	429a      	cmp	r2, r3
   140fa:	d0f7      	beq.n	140ec <strcmp>
   140fc:	1ad0      	subs	r0, r2, r3
   140fe:	4770      	bx	lr

00014100 <strcpy>:
   14100:	1c03      	adds	r3, r0, #0
   14102:	780a      	ldrb	r2, [r1, #0]
   14104:	3101      	adds	r1, #1
   14106:	701a      	strb	r2, [r3, #0]
   14108:	3301      	adds	r3, #1
   1410a:	2a00      	cmp	r2, #0
   1410c:	d1f9      	bne.n	14102 <strcpy+0x2>
   1410e:	4770      	bx	lr

00014110 <strdup>:
   14110:	b510      	push	{r4, lr}
   14112:	4b03      	ldr	r3, [pc, #12]	; (14120 <strdup+0x10>)
   14114:	0001      	movs	r1, r0
   14116:	6818      	ldr	r0, [r3, #0]
   14118:	f000 f804 	bl	14124 <_strdup_r>
   1411c:	bd10      	pop	{r4, pc}
   1411e:	46c0      	nop			; (mov r8, r8)
   14120:	200001fc 	.word	0x200001fc

00014124 <_strdup_r>:
   14124:	b570      	push	{r4, r5, r6, lr}
   14126:	0005      	movs	r5, r0
   14128:	0008      	movs	r0, r1
   1412a:	000e      	movs	r6, r1
   1412c:	f000 f80d 	bl	1414a <strlen>
   14130:	1c44      	adds	r4, r0, #1
   14132:	0021      	movs	r1, r4
   14134:	0028      	movs	r0, r5
   14136:	f7ff fdf9 	bl	13d2c <_malloc_r>
   1413a:	1e05      	subs	r5, r0, #0
   1413c:	d003      	beq.n	14146 <_strdup_r+0x22>
   1413e:	0022      	movs	r2, r4
   14140:	0031      	movs	r1, r6
   14142:	f7ff fd85 	bl	13c50 <memcpy>
   14146:	0028      	movs	r0, r5
   14148:	bd70      	pop	{r4, r5, r6, pc}

0001414a <strlen>:
   1414a:	2300      	movs	r3, #0
   1414c:	5cc2      	ldrb	r2, [r0, r3]
   1414e:	3301      	adds	r3, #1
   14150:	2a00      	cmp	r2, #0
   14152:	d1fb      	bne.n	1414c <strlen+0x2>
   14154:	1e58      	subs	r0, r3, #1
   14156:	4770      	bx	lr

00014158 <strncmp>:
   14158:	2300      	movs	r3, #0
   1415a:	b530      	push	{r4, r5, lr}
   1415c:	429a      	cmp	r2, r3
   1415e:	d00a      	beq.n	14176 <strncmp+0x1e>
   14160:	3a01      	subs	r2, #1
   14162:	5cc4      	ldrb	r4, [r0, r3]
   14164:	5ccd      	ldrb	r5, [r1, r3]
   14166:	42ac      	cmp	r4, r5
   14168:	d104      	bne.n	14174 <strncmp+0x1c>
   1416a:	429a      	cmp	r2, r3
   1416c:	d002      	beq.n	14174 <strncmp+0x1c>
   1416e:	3301      	adds	r3, #1
   14170:	2c00      	cmp	r4, #0
   14172:	d1f6      	bne.n	14162 <strncmp+0xa>
   14174:	1b63      	subs	r3, r4, r5
   14176:	0018      	movs	r0, r3
   14178:	bd30      	pop	{r4, r5, pc}

0001417a <strncpy>:
   1417a:	b570      	push	{r4, r5, r6, lr}
   1417c:	0004      	movs	r4, r0
   1417e:	2a00      	cmp	r2, #0
   14180:	d100      	bne.n	14184 <strncpy+0xa>
   14182:	bd70      	pop	{r4, r5, r6, pc}
   14184:	780d      	ldrb	r5, [r1, #0]
   14186:	1e56      	subs	r6, r2, #1
   14188:	1c63      	adds	r3, r4, #1
   1418a:	7025      	strb	r5, [r4, #0]
   1418c:	3101      	adds	r1, #1
   1418e:	2d00      	cmp	r5, #0
   14190:	d105      	bne.n	1419e <strncpy+0x24>
   14192:	18a4      	adds	r4, r4, r2
   14194:	429c      	cmp	r4, r3
   14196:	d0f4      	beq.n	14182 <strncpy+0x8>
   14198:	701d      	strb	r5, [r3, #0]
   1419a:	3301      	adds	r3, #1
   1419c:	e7fa      	b.n	14194 <strncpy+0x1a>
   1419e:	001c      	movs	r4, r3
   141a0:	0032      	movs	r2, r6
   141a2:	e7ec      	b.n	1417e <strncpy+0x4>

000141a4 <strrchr>:
   141a4:	b570      	push	{r4, r5, r6, lr}
   141a6:	000d      	movs	r5, r1
   141a8:	2400      	movs	r4, #0
   141aa:	2900      	cmp	r1, #0
   141ac:	d105      	bne.n	141ba <strrchr+0x16>
   141ae:	f001 f847 	bl	15240 <strchr>
   141b2:	0004      	movs	r4, r0
   141b4:	e006      	b.n	141c4 <strrchr+0x20>
   141b6:	001c      	movs	r4, r3
   141b8:	1c58      	adds	r0, r3, #1
   141ba:	0029      	movs	r1, r5
   141bc:	f001 f840 	bl	15240 <strchr>
   141c0:	1e03      	subs	r3, r0, #0
   141c2:	d1f8      	bne.n	141b6 <strrchr+0x12>
   141c4:	0020      	movs	r0, r4
   141c6:	bd70      	pop	{r4, r5, r6, pc}

000141c8 <strstr>:
   141c8:	b510      	push	{r4, lr}
   141ca:	0002      	movs	r2, r0
   141cc:	7800      	ldrb	r0, [r0, #0]
   141ce:	2800      	cmp	r0, #0
   141d0:	d104      	bne.n	141dc <strstr+0x14>
   141d2:	7809      	ldrb	r1, [r1, #0]
   141d4:	2900      	cmp	r1, #0
   141d6:	d00d      	beq.n	141f4 <strstr+0x2c>
   141d8:	bd10      	pop	{r4, pc}
   141da:	3201      	adds	r2, #1
   141dc:	7810      	ldrb	r0, [r2, #0]
   141de:	2800      	cmp	r0, #0
   141e0:	d0fa      	beq.n	141d8 <strstr+0x10>
   141e2:	2300      	movs	r3, #0
   141e4:	5cc8      	ldrb	r0, [r1, r3]
   141e6:	2800      	cmp	r0, #0
   141e8:	d004      	beq.n	141f4 <strstr+0x2c>
   141ea:	5cd4      	ldrb	r4, [r2, r3]
   141ec:	4284      	cmp	r4, r0
   141ee:	d1f4      	bne.n	141da <strstr+0x12>
   141f0:	3301      	adds	r3, #1
   141f2:	e7f7      	b.n	141e4 <strstr+0x1c>
   141f4:	0010      	movs	r0, r2
   141f6:	e7ef      	b.n	141d8 <strstr+0x10>

000141f8 <_strtol_l.isra.0>:
   141f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   141fa:	001f      	movs	r7, r3
   141fc:	000e      	movs	r6, r1
   141fe:	b087      	sub	sp, #28
   14200:	9005      	str	r0, [sp, #20]
   14202:	9103      	str	r1, [sp, #12]
   14204:	9202      	str	r2, [sp, #8]
   14206:	980c      	ldr	r0, [sp, #48]	; 0x30
   14208:	7834      	ldrb	r4, [r6, #0]
   1420a:	f000 fae8 	bl	147de <__locale_ctype_ptr_l>
   1420e:	2208      	movs	r2, #8
   14210:	1900      	adds	r0, r0, r4
   14212:	7843      	ldrb	r3, [r0, #1]
   14214:	1c75      	adds	r5, r6, #1
   14216:	4013      	ands	r3, r2
   14218:	d10c      	bne.n	14234 <_strtol_l.isra.0+0x3c>
   1421a:	2c2d      	cmp	r4, #45	; 0x2d
   1421c:	d10c      	bne.n	14238 <_strtol_l.isra.0+0x40>
   1421e:	3301      	adds	r3, #1
   14220:	782c      	ldrb	r4, [r5, #0]
   14222:	9301      	str	r3, [sp, #4]
   14224:	1cb5      	adds	r5, r6, #2
   14226:	2f00      	cmp	r7, #0
   14228:	d00c      	beq.n	14244 <_strtol_l.isra.0+0x4c>
   1422a:	2f10      	cmp	r7, #16
   1422c:	d114      	bne.n	14258 <_strtol_l.isra.0+0x60>
   1422e:	2c30      	cmp	r4, #48	; 0x30
   14230:	d00a      	beq.n	14248 <_strtol_l.isra.0+0x50>
   14232:	e011      	b.n	14258 <_strtol_l.isra.0+0x60>
   14234:	002e      	movs	r6, r5
   14236:	e7e6      	b.n	14206 <_strtol_l.isra.0+0xe>
   14238:	9301      	str	r3, [sp, #4]
   1423a:	2c2b      	cmp	r4, #43	; 0x2b
   1423c:	d1f3      	bne.n	14226 <_strtol_l.isra.0+0x2e>
   1423e:	782c      	ldrb	r4, [r5, #0]
   14240:	1cb5      	adds	r5, r6, #2
   14242:	e7f0      	b.n	14226 <_strtol_l.isra.0+0x2e>
   14244:	2c30      	cmp	r4, #48	; 0x30
   14246:	d12f      	bne.n	142a8 <_strtol_l.isra.0+0xb0>
   14248:	2220      	movs	r2, #32
   1424a:	782b      	ldrb	r3, [r5, #0]
   1424c:	4393      	bics	r3, r2
   1424e:	2b58      	cmp	r3, #88	; 0x58
   14250:	d151      	bne.n	142f6 <_strtol_l.isra.0+0xfe>
   14252:	2710      	movs	r7, #16
   14254:	786c      	ldrb	r4, [r5, #1]
   14256:	3502      	adds	r5, #2
   14258:	9b01      	ldr	r3, [sp, #4]
   1425a:	4a29      	ldr	r2, [pc, #164]	; (14300 <_strtol_l.isra.0+0x108>)
   1425c:	0039      	movs	r1, r7
   1425e:	189e      	adds	r6, r3, r2
   14260:	0030      	movs	r0, r6
   14262:	f7ff fba7 	bl	139b4 <__aeabi_uidivmod>
   14266:	0030      	movs	r0, r6
   14268:	9104      	str	r1, [sp, #16]
   1426a:	0039      	movs	r1, r7
   1426c:	f7ff fb1c 	bl	138a8 <__udivsi3>
   14270:	2101      	movs	r1, #1
   14272:	2300      	movs	r3, #0
   14274:	4249      	negs	r1, r1
   14276:	0002      	movs	r2, r0
   14278:	468c      	mov	ip, r1
   1427a:	0018      	movs	r0, r3
   1427c:	0021      	movs	r1, r4
   1427e:	3930      	subs	r1, #48	; 0x30
   14280:	2909      	cmp	r1, #9
   14282:	d813      	bhi.n	142ac <_strtol_l.isra.0+0xb4>
   14284:	000c      	movs	r4, r1
   14286:	42a7      	cmp	r7, r4
   14288:	dd1c      	ble.n	142c4 <_strtol_l.isra.0+0xcc>
   1428a:	1c59      	adds	r1, r3, #1
   1428c:	d009      	beq.n	142a2 <_strtol_l.isra.0+0xaa>
   1428e:	4663      	mov	r3, ip
   14290:	4282      	cmp	r2, r0
   14292:	d306      	bcc.n	142a2 <_strtol_l.isra.0+0xaa>
   14294:	d102      	bne.n	1429c <_strtol_l.isra.0+0xa4>
   14296:	9904      	ldr	r1, [sp, #16]
   14298:	42a1      	cmp	r1, r4
   1429a:	db02      	blt.n	142a2 <_strtol_l.isra.0+0xaa>
   1429c:	2301      	movs	r3, #1
   1429e:	4378      	muls	r0, r7
   142a0:	1820      	adds	r0, r4, r0
   142a2:	782c      	ldrb	r4, [r5, #0]
   142a4:	3501      	adds	r5, #1
   142a6:	e7e9      	b.n	1427c <_strtol_l.isra.0+0x84>
   142a8:	270a      	movs	r7, #10
   142aa:	e7d5      	b.n	14258 <_strtol_l.isra.0+0x60>
   142ac:	0021      	movs	r1, r4
   142ae:	3941      	subs	r1, #65	; 0x41
   142b0:	2919      	cmp	r1, #25
   142b2:	d801      	bhi.n	142b8 <_strtol_l.isra.0+0xc0>
   142b4:	3c37      	subs	r4, #55	; 0x37
   142b6:	e7e6      	b.n	14286 <_strtol_l.isra.0+0x8e>
   142b8:	0021      	movs	r1, r4
   142ba:	3961      	subs	r1, #97	; 0x61
   142bc:	2919      	cmp	r1, #25
   142be:	d801      	bhi.n	142c4 <_strtol_l.isra.0+0xcc>
   142c0:	3c57      	subs	r4, #87	; 0x57
   142c2:	e7e0      	b.n	14286 <_strtol_l.isra.0+0x8e>
   142c4:	1c5a      	adds	r2, r3, #1
   142c6:	d108      	bne.n	142da <_strtol_l.isra.0+0xe2>
   142c8:	9a05      	ldr	r2, [sp, #20]
   142ca:	3323      	adds	r3, #35	; 0x23
   142cc:	6013      	str	r3, [r2, #0]
   142ce:	9b02      	ldr	r3, [sp, #8]
   142d0:	0030      	movs	r0, r6
   142d2:	2b00      	cmp	r3, #0
   142d4:	d10b      	bne.n	142ee <_strtol_l.isra.0+0xf6>
   142d6:	b007      	add	sp, #28
   142d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142da:	9a01      	ldr	r2, [sp, #4]
   142dc:	2a00      	cmp	r2, #0
   142de:	d000      	beq.n	142e2 <_strtol_l.isra.0+0xea>
   142e0:	4240      	negs	r0, r0
   142e2:	9a02      	ldr	r2, [sp, #8]
   142e4:	2a00      	cmp	r2, #0
   142e6:	d0f6      	beq.n	142d6 <_strtol_l.isra.0+0xde>
   142e8:	9a03      	ldr	r2, [sp, #12]
   142ea:	2b00      	cmp	r3, #0
   142ec:	d000      	beq.n	142f0 <_strtol_l.isra.0+0xf8>
   142ee:	1e6a      	subs	r2, r5, #1
   142f0:	9b02      	ldr	r3, [sp, #8]
   142f2:	601a      	str	r2, [r3, #0]
   142f4:	e7ef      	b.n	142d6 <_strtol_l.isra.0+0xde>
   142f6:	2430      	movs	r4, #48	; 0x30
   142f8:	2f00      	cmp	r7, #0
   142fa:	d1ad      	bne.n	14258 <_strtol_l.isra.0+0x60>
   142fc:	3708      	adds	r7, #8
   142fe:	e7ab      	b.n	14258 <_strtol_l.isra.0+0x60>
   14300:	7fffffff 	.word	0x7fffffff

00014304 <strtol>:
   14304:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14306:	0013      	movs	r3, r2
   14308:	4a06      	ldr	r2, [pc, #24]	; (14324 <strtol+0x20>)
   1430a:	0005      	movs	r5, r0
   1430c:	6810      	ldr	r0, [r2, #0]
   1430e:	6a04      	ldr	r4, [r0, #32]
   14310:	2c00      	cmp	r4, #0
   14312:	d100      	bne.n	14316 <strtol+0x12>
   14314:	4c04      	ldr	r4, [pc, #16]	; (14328 <strtol+0x24>)
   14316:	000a      	movs	r2, r1
   14318:	9400      	str	r4, [sp, #0]
   1431a:	0029      	movs	r1, r5
   1431c:	f7ff ff6c 	bl	141f8 <_strtol_l.isra.0>
   14320:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14322:	46c0      	nop			; (mov r8, r8)
   14324:	200001fc 	.word	0x200001fc
   14328:	20000260 	.word	0x20000260

0001432c <__swbuf_r>:
   1432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1432e:	0005      	movs	r5, r0
   14330:	000e      	movs	r6, r1
   14332:	0014      	movs	r4, r2
   14334:	2800      	cmp	r0, #0
   14336:	d004      	beq.n	14342 <__swbuf_r+0x16>
   14338:	6983      	ldr	r3, [r0, #24]
   1433a:	2b00      	cmp	r3, #0
   1433c:	d101      	bne.n	14342 <__swbuf_r+0x16>
   1433e:	f000 f9b9 	bl	146b4 <__sinit>
   14342:	4b22      	ldr	r3, [pc, #136]	; (143cc <__swbuf_r+0xa0>)
   14344:	429c      	cmp	r4, r3
   14346:	d12d      	bne.n	143a4 <__swbuf_r+0x78>
   14348:	686c      	ldr	r4, [r5, #4]
   1434a:	69a3      	ldr	r3, [r4, #24]
   1434c:	60a3      	str	r3, [r4, #8]
   1434e:	89a3      	ldrh	r3, [r4, #12]
   14350:	071b      	lsls	r3, r3, #28
   14352:	d531      	bpl.n	143b8 <__swbuf_r+0x8c>
   14354:	6923      	ldr	r3, [r4, #16]
   14356:	2b00      	cmp	r3, #0
   14358:	d02e      	beq.n	143b8 <__swbuf_r+0x8c>
   1435a:	6823      	ldr	r3, [r4, #0]
   1435c:	6922      	ldr	r2, [r4, #16]
   1435e:	b2f7      	uxtb	r7, r6
   14360:	1a98      	subs	r0, r3, r2
   14362:	6963      	ldr	r3, [r4, #20]
   14364:	b2f6      	uxtb	r6, r6
   14366:	4298      	cmp	r0, r3
   14368:	db05      	blt.n	14376 <__swbuf_r+0x4a>
   1436a:	0021      	movs	r1, r4
   1436c:	0028      	movs	r0, r5
   1436e:	f000 f933 	bl	145d8 <_fflush_r>
   14372:	2800      	cmp	r0, #0
   14374:	d126      	bne.n	143c4 <__swbuf_r+0x98>
   14376:	68a3      	ldr	r3, [r4, #8]
   14378:	3001      	adds	r0, #1
   1437a:	3b01      	subs	r3, #1
   1437c:	60a3      	str	r3, [r4, #8]
   1437e:	6823      	ldr	r3, [r4, #0]
   14380:	1c5a      	adds	r2, r3, #1
   14382:	6022      	str	r2, [r4, #0]
   14384:	701f      	strb	r7, [r3, #0]
   14386:	6963      	ldr	r3, [r4, #20]
   14388:	4298      	cmp	r0, r3
   1438a:	d004      	beq.n	14396 <__swbuf_r+0x6a>
   1438c:	89a3      	ldrh	r3, [r4, #12]
   1438e:	07db      	lsls	r3, r3, #31
   14390:	d51a      	bpl.n	143c8 <__swbuf_r+0x9c>
   14392:	2e0a      	cmp	r6, #10
   14394:	d118      	bne.n	143c8 <__swbuf_r+0x9c>
   14396:	0021      	movs	r1, r4
   14398:	0028      	movs	r0, r5
   1439a:	f000 f91d 	bl	145d8 <_fflush_r>
   1439e:	2800      	cmp	r0, #0
   143a0:	d012      	beq.n	143c8 <__swbuf_r+0x9c>
   143a2:	e00f      	b.n	143c4 <__swbuf_r+0x98>
   143a4:	4b0a      	ldr	r3, [pc, #40]	; (143d0 <__swbuf_r+0xa4>)
   143a6:	429c      	cmp	r4, r3
   143a8:	d101      	bne.n	143ae <__swbuf_r+0x82>
   143aa:	68ac      	ldr	r4, [r5, #8]
   143ac:	e7cd      	b.n	1434a <__swbuf_r+0x1e>
   143ae:	4b09      	ldr	r3, [pc, #36]	; (143d4 <__swbuf_r+0xa8>)
   143b0:	429c      	cmp	r4, r3
   143b2:	d1ca      	bne.n	1434a <__swbuf_r+0x1e>
   143b4:	68ec      	ldr	r4, [r5, #12]
   143b6:	e7c8      	b.n	1434a <__swbuf_r+0x1e>
   143b8:	0021      	movs	r1, r4
   143ba:	0028      	movs	r0, r5
   143bc:	f000 f80c 	bl	143d8 <__swsetup_r>
   143c0:	2800      	cmp	r0, #0
   143c2:	d0ca      	beq.n	1435a <__swbuf_r+0x2e>
   143c4:	2601      	movs	r6, #1
   143c6:	4276      	negs	r6, r6
   143c8:	0030      	movs	r0, r6
   143ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143cc:	00016b30 	.word	0x00016b30
   143d0:	00016b50 	.word	0x00016b50
   143d4:	00016b10 	.word	0x00016b10

000143d8 <__swsetup_r>:
   143d8:	4b36      	ldr	r3, [pc, #216]	; (144b4 <__swsetup_r+0xdc>)
   143da:	b570      	push	{r4, r5, r6, lr}
   143dc:	681d      	ldr	r5, [r3, #0]
   143de:	0006      	movs	r6, r0
   143e0:	000c      	movs	r4, r1
   143e2:	2d00      	cmp	r5, #0
   143e4:	d005      	beq.n	143f2 <__swsetup_r+0x1a>
   143e6:	69ab      	ldr	r3, [r5, #24]
   143e8:	2b00      	cmp	r3, #0
   143ea:	d102      	bne.n	143f2 <__swsetup_r+0x1a>
   143ec:	0028      	movs	r0, r5
   143ee:	f000 f961 	bl	146b4 <__sinit>
   143f2:	4b31      	ldr	r3, [pc, #196]	; (144b8 <__swsetup_r+0xe0>)
   143f4:	429c      	cmp	r4, r3
   143f6:	d10f      	bne.n	14418 <__swsetup_r+0x40>
   143f8:	686c      	ldr	r4, [r5, #4]
   143fa:	230c      	movs	r3, #12
   143fc:	5ee2      	ldrsh	r2, [r4, r3]
   143fe:	b293      	uxth	r3, r2
   14400:	0719      	lsls	r1, r3, #28
   14402:	d42d      	bmi.n	14460 <__swsetup_r+0x88>
   14404:	06d9      	lsls	r1, r3, #27
   14406:	d411      	bmi.n	1442c <__swsetup_r+0x54>
   14408:	2309      	movs	r3, #9
   1440a:	2001      	movs	r0, #1
   1440c:	6033      	str	r3, [r6, #0]
   1440e:	3337      	adds	r3, #55	; 0x37
   14410:	4313      	orrs	r3, r2
   14412:	81a3      	strh	r3, [r4, #12]
   14414:	4240      	negs	r0, r0
   14416:	bd70      	pop	{r4, r5, r6, pc}
   14418:	4b28      	ldr	r3, [pc, #160]	; (144bc <__swsetup_r+0xe4>)
   1441a:	429c      	cmp	r4, r3
   1441c:	d101      	bne.n	14422 <__swsetup_r+0x4a>
   1441e:	68ac      	ldr	r4, [r5, #8]
   14420:	e7eb      	b.n	143fa <__swsetup_r+0x22>
   14422:	4b27      	ldr	r3, [pc, #156]	; (144c0 <__swsetup_r+0xe8>)
   14424:	429c      	cmp	r4, r3
   14426:	d1e8      	bne.n	143fa <__swsetup_r+0x22>
   14428:	68ec      	ldr	r4, [r5, #12]
   1442a:	e7e6      	b.n	143fa <__swsetup_r+0x22>
   1442c:	075b      	lsls	r3, r3, #29
   1442e:	d513      	bpl.n	14458 <__swsetup_r+0x80>
   14430:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14432:	2900      	cmp	r1, #0
   14434:	d008      	beq.n	14448 <__swsetup_r+0x70>
   14436:	0023      	movs	r3, r4
   14438:	3344      	adds	r3, #68	; 0x44
   1443a:	4299      	cmp	r1, r3
   1443c:	d002      	beq.n	14444 <__swsetup_r+0x6c>
   1443e:	0030      	movs	r0, r6
   14440:	f7ff fc2a 	bl	13c98 <_free_r>
   14444:	2300      	movs	r3, #0
   14446:	6363      	str	r3, [r4, #52]	; 0x34
   14448:	2224      	movs	r2, #36	; 0x24
   1444a:	89a3      	ldrh	r3, [r4, #12]
   1444c:	4393      	bics	r3, r2
   1444e:	81a3      	strh	r3, [r4, #12]
   14450:	2300      	movs	r3, #0
   14452:	6063      	str	r3, [r4, #4]
   14454:	6923      	ldr	r3, [r4, #16]
   14456:	6023      	str	r3, [r4, #0]
   14458:	2308      	movs	r3, #8
   1445a:	89a2      	ldrh	r2, [r4, #12]
   1445c:	4313      	orrs	r3, r2
   1445e:	81a3      	strh	r3, [r4, #12]
   14460:	6923      	ldr	r3, [r4, #16]
   14462:	2b00      	cmp	r3, #0
   14464:	d10b      	bne.n	1447e <__swsetup_r+0xa6>
   14466:	21a0      	movs	r1, #160	; 0xa0
   14468:	2280      	movs	r2, #128	; 0x80
   1446a:	89a3      	ldrh	r3, [r4, #12]
   1446c:	0089      	lsls	r1, r1, #2
   1446e:	0092      	lsls	r2, r2, #2
   14470:	400b      	ands	r3, r1
   14472:	4293      	cmp	r3, r2
   14474:	d003      	beq.n	1447e <__swsetup_r+0xa6>
   14476:	0021      	movs	r1, r4
   14478:	0030      	movs	r0, r6
   1447a:	f000 f9db 	bl	14834 <__smakebuf_r>
   1447e:	2301      	movs	r3, #1
   14480:	89a2      	ldrh	r2, [r4, #12]
   14482:	4013      	ands	r3, r2
   14484:	d011      	beq.n	144aa <__swsetup_r+0xd2>
   14486:	2300      	movs	r3, #0
   14488:	60a3      	str	r3, [r4, #8]
   1448a:	6963      	ldr	r3, [r4, #20]
   1448c:	425b      	negs	r3, r3
   1448e:	61a3      	str	r3, [r4, #24]
   14490:	2000      	movs	r0, #0
   14492:	6923      	ldr	r3, [r4, #16]
   14494:	4283      	cmp	r3, r0
   14496:	d1be      	bne.n	14416 <__swsetup_r+0x3e>
   14498:	230c      	movs	r3, #12
   1449a:	5ee2      	ldrsh	r2, [r4, r3]
   1449c:	0613      	lsls	r3, r2, #24
   1449e:	d5ba      	bpl.n	14416 <__swsetup_r+0x3e>
   144a0:	2340      	movs	r3, #64	; 0x40
   144a2:	4313      	orrs	r3, r2
   144a4:	81a3      	strh	r3, [r4, #12]
   144a6:	3801      	subs	r0, #1
   144a8:	e7b5      	b.n	14416 <__swsetup_r+0x3e>
   144aa:	0792      	lsls	r2, r2, #30
   144ac:	d400      	bmi.n	144b0 <__swsetup_r+0xd8>
   144ae:	6963      	ldr	r3, [r4, #20]
   144b0:	60a3      	str	r3, [r4, #8]
   144b2:	e7ed      	b.n	14490 <__swsetup_r+0xb8>
   144b4:	200001fc 	.word	0x200001fc
   144b8:	00016b30 	.word	0x00016b30
   144bc:	00016b50 	.word	0x00016b50
   144c0:	00016b10 	.word	0x00016b10

000144c4 <__sflush_r>:
   144c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   144c6:	898a      	ldrh	r2, [r1, #12]
   144c8:	0005      	movs	r5, r0
   144ca:	000c      	movs	r4, r1
   144cc:	0713      	lsls	r3, r2, #28
   144ce:	d460      	bmi.n	14592 <__sflush_r+0xce>
   144d0:	684b      	ldr	r3, [r1, #4]
   144d2:	2b00      	cmp	r3, #0
   144d4:	dc04      	bgt.n	144e0 <__sflush_r+0x1c>
   144d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   144d8:	2b00      	cmp	r3, #0
   144da:	dc01      	bgt.n	144e0 <__sflush_r+0x1c>
   144dc:	2000      	movs	r0, #0
   144de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   144e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   144e2:	2f00      	cmp	r7, #0
   144e4:	d0fa      	beq.n	144dc <__sflush_r+0x18>
   144e6:	2300      	movs	r3, #0
   144e8:	682e      	ldr	r6, [r5, #0]
   144ea:	602b      	str	r3, [r5, #0]
   144ec:	2380      	movs	r3, #128	; 0x80
   144ee:	015b      	lsls	r3, r3, #5
   144f0:	401a      	ands	r2, r3
   144f2:	d034      	beq.n	1455e <__sflush_r+0x9a>
   144f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   144f6:	89a3      	ldrh	r3, [r4, #12]
   144f8:	075b      	lsls	r3, r3, #29
   144fa:	d506      	bpl.n	1450a <__sflush_r+0x46>
   144fc:	6863      	ldr	r3, [r4, #4]
   144fe:	1ac0      	subs	r0, r0, r3
   14500:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14502:	2b00      	cmp	r3, #0
   14504:	d001      	beq.n	1450a <__sflush_r+0x46>
   14506:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14508:	1ac0      	subs	r0, r0, r3
   1450a:	0002      	movs	r2, r0
   1450c:	6a21      	ldr	r1, [r4, #32]
   1450e:	2300      	movs	r3, #0
   14510:	0028      	movs	r0, r5
   14512:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   14514:	47b8      	blx	r7
   14516:	89a1      	ldrh	r1, [r4, #12]
   14518:	1c43      	adds	r3, r0, #1
   1451a:	d106      	bne.n	1452a <__sflush_r+0x66>
   1451c:	682b      	ldr	r3, [r5, #0]
   1451e:	2b1d      	cmp	r3, #29
   14520:	d831      	bhi.n	14586 <__sflush_r+0xc2>
   14522:	4a2c      	ldr	r2, [pc, #176]	; (145d4 <__sflush_r+0x110>)
   14524:	40da      	lsrs	r2, r3
   14526:	07d3      	lsls	r3, r2, #31
   14528:	d52d      	bpl.n	14586 <__sflush_r+0xc2>
   1452a:	2300      	movs	r3, #0
   1452c:	6063      	str	r3, [r4, #4]
   1452e:	6923      	ldr	r3, [r4, #16]
   14530:	6023      	str	r3, [r4, #0]
   14532:	04cb      	lsls	r3, r1, #19
   14534:	d505      	bpl.n	14542 <__sflush_r+0x7e>
   14536:	1c43      	adds	r3, r0, #1
   14538:	d102      	bne.n	14540 <__sflush_r+0x7c>
   1453a:	682b      	ldr	r3, [r5, #0]
   1453c:	2b00      	cmp	r3, #0
   1453e:	d100      	bne.n	14542 <__sflush_r+0x7e>
   14540:	6560      	str	r0, [r4, #84]	; 0x54
   14542:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14544:	602e      	str	r6, [r5, #0]
   14546:	2900      	cmp	r1, #0
   14548:	d0c8      	beq.n	144dc <__sflush_r+0x18>
   1454a:	0023      	movs	r3, r4
   1454c:	3344      	adds	r3, #68	; 0x44
   1454e:	4299      	cmp	r1, r3
   14550:	d002      	beq.n	14558 <__sflush_r+0x94>
   14552:	0028      	movs	r0, r5
   14554:	f7ff fba0 	bl	13c98 <_free_r>
   14558:	2000      	movs	r0, #0
   1455a:	6360      	str	r0, [r4, #52]	; 0x34
   1455c:	e7bf      	b.n	144de <__sflush_r+0x1a>
   1455e:	2301      	movs	r3, #1
   14560:	6a21      	ldr	r1, [r4, #32]
   14562:	0028      	movs	r0, r5
   14564:	47b8      	blx	r7
   14566:	1c43      	adds	r3, r0, #1
   14568:	d1c5      	bne.n	144f6 <__sflush_r+0x32>
   1456a:	682b      	ldr	r3, [r5, #0]
   1456c:	2b00      	cmp	r3, #0
   1456e:	d0c2      	beq.n	144f6 <__sflush_r+0x32>
   14570:	2b1d      	cmp	r3, #29
   14572:	d001      	beq.n	14578 <__sflush_r+0xb4>
   14574:	2b16      	cmp	r3, #22
   14576:	d101      	bne.n	1457c <__sflush_r+0xb8>
   14578:	602e      	str	r6, [r5, #0]
   1457a:	e7af      	b.n	144dc <__sflush_r+0x18>
   1457c:	2340      	movs	r3, #64	; 0x40
   1457e:	89a2      	ldrh	r2, [r4, #12]
   14580:	4313      	orrs	r3, r2
   14582:	81a3      	strh	r3, [r4, #12]
   14584:	e7ab      	b.n	144de <__sflush_r+0x1a>
   14586:	2340      	movs	r3, #64	; 0x40
   14588:	430b      	orrs	r3, r1
   1458a:	2001      	movs	r0, #1
   1458c:	81a3      	strh	r3, [r4, #12]
   1458e:	4240      	negs	r0, r0
   14590:	e7a5      	b.n	144de <__sflush_r+0x1a>
   14592:	690f      	ldr	r7, [r1, #16]
   14594:	2f00      	cmp	r7, #0
   14596:	d0a1      	beq.n	144dc <__sflush_r+0x18>
   14598:	680b      	ldr	r3, [r1, #0]
   1459a:	600f      	str	r7, [r1, #0]
   1459c:	1bdb      	subs	r3, r3, r7
   1459e:	9301      	str	r3, [sp, #4]
   145a0:	2300      	movs	r3, #0
   145a2:	0792      	lsls	r2, r2, #30
   145a4:	d100      	bne.n	145a8 <__sflush_r+0xe4>
   145a6:	694b      	ldr	r3, [r1, #20]
   145a8:	60a3      	str	r3, [r4, #8]
   145aa:	9b01      	ldr	r3, [sp, #4]
   145ac:	2b00      	cmp	r3, #0
   145ae:	dc00      	bgt.n	145b2 <__sflush_r+0xee>
   145b0:	e794      	b.n	144dc <__sflush_r+0x18>
   145b2:	9b01      	ldr	r3, [sp, #4]
   145b4:	003a      	movs	r2, r7
   145b6:	6a21      	ldr	r1, [r4, #32]
   145b8:	0028      	movs	r0, r5
   145ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   145bc:	47b0      	blx	r6
   145be:	2800      	cmp	r0, #0
   145c0:	dc03      	bgt.n	145ca <__sflush_r+0x106>
   145c2:	2340      	movs	r3, #64	; 0x40
   145c4:	89a2      	ldrh	r2, [r4, #12]
   145c6:	4313      	orrs	r3, r2
   145c8:	e7df      	b.n	1458a <__sflush_r+0xc6>
   145ca:	9b01      	ldr	r3, [sp, #4]
   145cc:	183f      	adds	r7, r7, r0
   145ce:	1a1b      	subs	r3, r3, r0
   145d0:	9301      	str	r3, [sp, #4]
   145d2:	e7ea      	b.n	145aa <__sflush_r+0xe6>
   145d4:	20400001 	.word	0x20400001

000145d8 <_fflush_r>:
   145d8:	690b      	ldr	r3, [r1, #16]
   145da:	b570      	push	{r4, r5, r6, lr}
   145dc:	0005      	movs	r5, r0
   145de:	000c      	movs	r4, r1
   145e0:	2b00      	cmp	r3, #0
   145e2:	d101      	bne.n	145e8 <_fflush_r+0x10>
   145e4:	2000      	movs	r0, #0
   145e6:	bd70      	pop	{r4, r5, r6, pc}
   145e8:	2800      	cmp	r0, #0
   145ea:	d004      	beq.n	145f6 <_fflush_r+0x1e>
   145ec:	6983      	ldr	r3, [r0, #24]
   145ee:	2b00      	cmp	r3, #0
   145f0:	d101      	bne.n	145f6 <_fflush_r+0x1e>
   145f2:	f000 f85f 	bl	146b4 <__sinit>
   145f6:	4b0b      	ldr	r3, [pc, #44]	; (14624 <_fflush_r+0x4c>)
   145f8:	429c      	cmp	r4, r3
   145fa:	d109      	bne.n	14610 <_fflush_r+0x38>
   145fc:	686c      	ldr	r4, [r5, #4]
   145fe:	220c      	movs	r2, #12
   14600:	5ea3      	ldrsh	r3, [r4, r2]
   14602:	2b00      	cmp	r3, #0
   14604:	d0ee      	beq.n	145e4 <_fflush_r+0xc>
   14606:	0021      	movs	r1, r4
   14608:	0028      	movs	r0, r5
   1460a:	f7ff ff5b 	bl	144c4 <__sflush_r>
   1460e:	e7ea      	b.n	145e6 <_fflush_r+0xe>
   14610:	4b05      	ldr	r3, [pc, #20]	; (14628 <_fflush_r+0x50>)
   14612:	429c      	cmp	r4, r3
   14614:	d101      	bne.n	1461a <_fflush_r+0x42>
   14616:	68ac      	ldr	r4, [r5, #8]
   14618:	e7f1      	b.n	145fe <_fflush_r+0x26>
   1461a:	4b04      	ldr	r3, [pc, #16]	; (1462c <_fflush_r+0x54>)
   1461c:	429c      	cmp	r4, r3
   1461e:	d1ee      	bne.n	145fe <_fflush_r+0x26>
   14620:	68ec      	ldr	r4, [r5, #12]
   14622:	e7ec      	b.n	145fe <_fflush_r+0x26>
   14624:	00016b30 	.word	0x00016b30
   14628:	00016b50 	.word	0x00016b50
   1462c:	00016b10 	.word	0x00016b10

00014630 <_cleanup_r>:
   14630:	b510      	push	{r4, lr}
   14632:	4902      	ldr	r1, [pc, #8]	; (1463c <_cleanup_r+0xc>)
   14634:	f000 f8b2 	bl	1479c <_fwalk_reent>
   14638:	bd10      	pop	{r4, pc}
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	000145d9 	.word	0x000145d9

00014640 <std.isra.0>:
   14640:	2300      	movs	r3, #0
   14642:	b510      	push	{r4, lr}
   14644:	0004      	movs	r4, r0
   14646:	6003      	str	r3, [r0, #0]
   14648:	6043      	str	r3, [r0, #4]
   1464a:	6083      	str	r3, [r0, #8]
   1464c:	8181      	strh	r1, [r0, #12]
   1464e:	6643      	str	r3, [r0, #100]	; 0x64
   14650:	81c2      	strh	r2, [r0, #14]
   14652:	6103      	str	r3, [r0, #16]
   14654:	6143      	str	r3, [r0, #20]
   14656:	6183      	str	r3, [r0, #24]
   14658:	0019      	movs	r1, r3
   1465a:	2208      	movs	r2, #8
   1465c:	305c      	adds	r0, #92	; 0x5c
   1465e:	f7ff fb12 	bl	13c86 <memset>
   14662:	4b05      	ldr	r3, [pc, #20]	; (14678 <std.isra.0+0x38>)
   14664:	6224      	str	r4, [r4, #32]
   14666:	6263      	str	r3, [r4, #36]	; 0x24
   14668:	4b04      	ldr	r3, [pc, #16]	; (1467c <std.isra.0+0x3c>)
   1466a:	62a3      	str	r3, [r4, #40]	; 0x28
   1466c:	4b04      	ldr	r3, [pc, #16]	; (14680 <std.isra.0+0x40>)
   1466e:	62e3      	str	r3, [r4, #44]	; 0x2c
   14670:	4b04      	ldr	r3, [pc, #16]	; (14684 <std.isra.0+0x44>)
   14672:	6323      	str	r3, [r4, #48]	; 0x30
   14674:	bd10      	pop	{r4, pc}
   14676:	46c0      	nop			; (mov r8, r8)
   14678:	000151a9 	.word	0x000151a9
   1467c:	000151d1 	.word	0x000151d1
   14680:	00015209 	.word	0x00015209
   14684:	00015235 	.word	0x00015235

00014688 <__sfmoreglue>:
   14688:	b570      	push	{r4, r5, r6, lr}
   1468a:	2568      	movs	r5, #104	; 0x68
   1468c:	1e4a      	subs	r2, r1, #1
   1468e:	4355      	muls	r5, r2
   14690:	000e      	movs	r6, r1
   14692:	0029      	movs	r1, r5
   14694:	3174      	adds	r1, #116	; 0x74
   14696:	f7ff fb49 	bl	13d2c <_malloc_r>
   1469a:	1e04      	subs	r4, r0, #0
   1469c:	d008      	beq.n	146b0 <__sfmoreglue+0x28>
   1469e:	2100      	movs	r1, #0
   146a0:	002a      	movs	r2, r5
   146a2:	6001      	str	r1, [r0, #0]
   146a4:	6046      	str	r6, [r0, #4]
   146a6:	300c      	adds	r0, #12
   146a8:	60a0      	str	r0, [r4, #8]
   146aa:	3268      	adds	r2, #104	; 0x68
   146ac:	f7ff faeb 	bl	13c86 <memset>
   146b0:	0020      	movs	r0, r4
   146b2:	bd70      	pop	{r4, r5, r6, pc}

000146b4 <__sinit>:
   146b4:	6983      	ldr	r3, [r0, #24]
   146b6:	b513      	push	{r0, r1, r4, lr}
   146b8:	0004      	movs	r4, r0
   146ba:	2b00      	cmp	r3, #0
   146bc:	d128      	bne.n	14710 <__sinit+0x5c>
   146be:	6483      	str	r3, [r0, #72]	; 0x48
   146c0:	64c3      	str	r3, [r0, #76]	; 0x4c
   146c2:	6503      	str	r3, [r0, #80]	; 0x50
   146c4:	4b13      	ldr	r3, [pc, #76]	; (14714 <__sinit+0x60>)
   146c6:	4a14      	ldr	r2, [pc, #80]	; (14718 <__sinit+0x64>)
   146c8:	681b      	ldr	r3, [r3, #0]
   146ca:	6282      	str	r2, [r0, #40]	; 0x28
   146cc:	9301      	str	r3, [sp, #4]
   146ce:	4298      	cmp	r0, r3
   146d0:	d101      	bne.n	146d6 <__sinit+0x22>
   146d2:	2301      	movs	r3, #1
   146d4:	6183      	str	r3, [r0, #24]
   146d6:	0020      	movs	r0, r4
   146d8:	f000 f820 	bl	1471c <__sfp>
   146dc:	6060      	str	r0, [r4, #4]
   146de:	0020      	movs	r0, r4
   146e0:	f000 f81c 	bl	1471c <__sfp>
   146e4:	60a0      	str	r0, [r4, #8]
   146e6:	0020      	movs	r0, r4
   146e8:	f000 f818 	bl	1471c <__sfp>
   146ec:	2200      	movs	r2, #0
   146ee:	60e0      	str	r0, [r4, #12]
   146f0:	2104      	movs	r1, #4
   146f2:	6860      	ldr	r0, [r4, #4]
   146f4:	f7ff ffa4 	bl	14640 <std.isra.0>
   146f8:	2201      	movs	r2, #1
   146fa:	2109      	movs	r1, #9
   146fc:	68a0      	ldr	r0, [r4, #8]
   146fe:	f7ff ff9f 	bl	14640 <std.isra.0>
   14702:	2202      	movs	r2, #2
   14704:	2112      	movs	r1, #18
   14706:	68e0      	ldr	r0, [r4, #12]
   14708:	f7ff ff9a 	bl	14640 <std.isra.0>
   1470c:	2301      	movs	r3, #1
   1470e:	61a3      	str	r3, [r4, #24]
   14710:	bd13      	pop	{r0, r1, r4, pc}
   14712:	46c0      	nop			; (mov r8, r8)
   14714:	00016b0c 	.word	0x00016b0c
   14718:	00014631 	.word	0x00014631

0001471c <__sfp>:
   1471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1471e:	4b1e      	ldr	r3, [pc, #120]	; (14798 <__sfp+0x7c>)
   14720:	0007      	movs	r7, r0
   14722:	681e      	ldr	r6, [r3, #0]
   14724:	69b3      	ldr	r3, [r6, #24]
   14726:	2b00      	cmp	r3, #0
   14728:	d102      	bne.n	14730 <__sfp+0x14>
   1472a:	0030      	movs	r0, r6
   1472c:	f7ff ffc2 	bl	146b4 <__sinit>
   14730:	3648      	adds	r6, #72	; 0x48
   14732:	68b4      	ldr	r4, [r6, #8]
   14734:	6873      	ldr	r3, [r6, #4]
   14736:	3b01      	subs	r3, #1
   14738:	d504      	bpl.n	14744 <__sfp+0x28>
   1473a:	6833      	ldr	r3, [r6, #0]
   1473c:	2b00      	cmp	r3, #0
   1473e:	d007      	beq.n	14750 <__sfp+0x34>
   14740:	6836      	ldr	r6, [r6, #0]
   14742:	e7f6      	b.n	14732 <__sfp+0x16>
   14744:	220c      	movs	r2, #12
   14746:	5ea5      	ldrsh	r5, [r4, r2]
   14748:	2d00      	cmp	r5, #0
   1474a:	d00d      	beq.n	14768 <__sfp+0x4c>
   1474c:	3468      	adds	r4, #104	; 0x68
   1474e:	e7f2      	b.n	14736 <__sfp+0x1a>
   14750:	2104      	movs	r1, #4
   14752:	0038      	movs	r0, r7
   14754:	f7ff ff98 	bl	14688 <__sfmoreglue>
   14758:	6030      	str	r0, [r6, #0]
   1475a:	2800      	cmp	r0, #0
   1475c:	d1f0      	bne.n	14740 <__sfp+0x24>
   1475e:	230c      	movs	r3, #12
   14760:	0004      	movs	r4, r0
   14762:	603b      	str	r3, [r7, #0]
   14764:	0020      	movs	r0, r4
   14766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14768:	2301      	movs	r3, #1
   1476a:	0020      	movs	r0, r4
   1476c:	425b      	negs	r3, r3
   1476e:	81e3      	strh	r3, [r4, #14]
   14770:	3302      	adds	r3, #2
   14772:	81a3      	strh	r3, [r4, #12]
   14774:	6665      	str	r5, [r4, #100]	; 0x64
   14776:	6025      	str	r5, [r4, #0]
   14778:	60a5      	str	r5, [r4, #8]
   1477a:	6065      	str	r5, [r4, #4]
   1477c:	6125      	str	r5, [r4, #16]
   1477e:	6165      	str	r5, [r4, #20]
   14780:	61a5      	str	r5, [r4, #24]
   14782:	2208      	movs	r2, #8
   14784:	0029      	movs	r1, r5
   14786:	305c      	adds	r0, #92	; 0x5c
   14788:	f7ff fa7d 	bl	13c86 <memset>
   1478c:	6365      	str	r5, [r4, #52]	; 0x34
   1478e:	63a5      	str	r5, [r4, #56]	; 0x38
   14790:	64a5      	str	r5, [r4, #72]	; 0x48
   14792:	64e5      	str	r5, [r4, #76]	; 0x4c
   14794:	e7e6      	b.n	14764 <__sfp+0x48>
   14796:	46c0      	nop			; (mov r8, r8)
   14798:	00016b0c 	.word	0x00016b0c

0001479c <_fwalk_reent>:
   1479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1479e:	0004      	movs	r4, r0
   147a0:	0007      	movs	r7, r0
   147a2:	2600      	movs	r6, #0
   147a4:	9101      	str	r1, [sp, #4]
   147a6:	3448      	adds	r4, #72	; 0x48
   147a8:	2c00      	cmp	r4, #0
   147aa:	d101      	bne.n	147b0 <_fwalk_reent+0x14>
   147ac:	0030      	movs	r0, r6
   147ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   147b0:	6863      	ldr	r3, [r4, #4]
   147b2:	68a5      	ldr	r5, [r4, #8]
   147b4:	9300      	str	r3, [sp, #0]
   147b6:	9b00      	ldr	r3, [sp, #0]
   147b8:	3b01      	subs	r3, #1
   147ba:	9300      	str	r3, [sp, #0]
   147bc:	d501      	bpl.n	147c2 <_fwalk_reent+0x26>
   147be:	6824      	ldr	r4, [r4, #0]
   147c0:	e7f2      	b.n	147a8 <_fwalk_reent+0xc>
   147c2:	89ab      	ldrh	r3, [r5, #12]
   147c4:	2b01      	cmp	r3, #1
   147c6:	d908      	bls.n	147da <_fwalk_reent+0x3e>
   147c8:	220e      	movs	r2, #14
   147ca:	5eab      	ldrsh	r3, [r5, r2]
   147cc:	3301      	adds	r3, #1
   147ce:	d004      	beq.n	147da <_fwalk_reent+0x3e>
   147d0:	0029      	movs	r1, r5
   147d2:	0038      	movs	r0, r7
   147d4:	9b01      	ldr	r3, [sp, #4]
   147d6:	4798      	blx	r3
   147d8:	4306      	orrs	r6, r0
   147da:	3568      	adds	r5, #104	; 0x68
   147dc:	e7eb      	b.n	147b6 <_fwalk_reent+0x1a>

000147de <__locale_ctype_ptr_l>:
   147de:	30ec      	adds	r0, #236	; 0xec
   147e0:	6800      	ldr	r0, [r0, #0]
   147e2:	4770      	bx	lr

000147e4 <__swhatbuf_r>:
   147e4:	b570      	push	{r4, r5, r6, lr}
   147e6:	000e      	movs	r6, r1
   147e8:	001d      	movs	r5, r3
   147ea:	230e      	movs	r3, #14
   147ec:	5ec9      	ldrsh	r1, [r1, r3]
   147ee:	b090      	sub	sp, #64	; 0x40
   147f0:	0014      	movs	r4, r2
   147f2:	2900      	cmp	r1, #0
   147f4:	da07      	bge.n	14806 <__swhatbuf_r+0x22>
   147f6:	2300      	movs	r3, #0
   147f8:	602b      	str	r3, [r5, #0]
   147fa:	89b3      	ldrh	r3, [r6, #12]
   147fc:	061b      	lsls	r3, r3, #24
   147fe:	d411      	bmi.n	14824 <__swhatbuf_r+0x40>
   14800:	2380      	movs	r3, #128	; 0x80
   14802:	00db      	lsls	r3, r3, #3
   14804:	e00f      	b.n	14826 <__swhatbuf_r+0x42>
   14806:	aa01      	add	r2, sp, #4
   14808:	f000 fd5a 	bl	152c0 <_fstat_r>
   1480c:	2800      	cmp	r0, #0
   1480e:	dbf2      	blt.n	147f6 <__swhatbuf_r+0x12>
   14810:	22f0      	movs	r2, #240	; 0xf0
   14812:	9b02      	ldr	r3, [sp, #8]
   14814:	0212      	lsls	r2, r2, #8
   14816:	4013      	ands	r3, r2
   14818:	4a05      	ldr	r2, [pc, #20]	; (14830 <__swhatbuf_r+0x4c>)
   1481a:	189b      	adds	r3, r3, r2
   1481c:	425a      	negs	r2, r3
   1481e:	4153      	adcs	r3, r2
   14820:	602b      	str	r3, [r5, #0]
   14822:	e7ed      	b.n	14800 <__swhatbuf_r+0x1c>
   14824:	2340      	movs	r3, #64	; 0x40
   14826:	2000      	movs	r0, #0
   14828:	6023      	str	r3, [r4, #0]
   1482a:	b010      	add	sp, #64	; 0x40
   1482c:	bd70      	pop	{r4, r5, r6, pc}
   1482e:	46c0      	nop			; (mov r8, r8)
   14830:	ffffe000 	.word	0xffffe000

00014834 <__smakebuf_r>:
   14834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14836:	2602      	movs	r6, #2
   14838:	898b      	ldrh	r3, [r1, #12]
   1483a:	0005      	movs	r5, r0
   1483c:	000c      	movs	r4, r1
   1483e:	4233      	tst	r3, r6
   14840:	d006      	beq.n	14850 <__smakebuf_r+0x1c>
   14842:	0023      	movs	r3, r4
   14844:	3347      	adds	r3, #71	; 0x47
   14846:	6023      	str	r3, [r4, #0]
   14848:	6123      	str	r3, [r4, #16]
   1484a:	2301      	movs	r3, #1
   1484c:	6163      	str	r3, [r4, #20]
   1484e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14850:	ab01      	add	r3, sp, #4
   14852:	466a      	mov	r2, sp
   14854:	f7ff ffc6 	bl	147e4 <__swhatbuf_r>
   14858:	9900      	ldr	r1, [sp, #0]
   1485a:	0007      	movs	r7, r0
   1485c:	0028      	movs	r0, r5
   1485e:	f7ff fa65 	bl	13d2c <_malloc_r>
   14862:	2800      	cmp	r0, #0
   14864:	d106      	bne.n	14874 <__smakebuf_r+0x40>
   14866:	220c      	movs	r2, #12
   14868:	5ea3      	ldrsh	r3, [r4, r2]
   1486a:	059a      	lsls	r2, r3, #22
   1486c:	d4ef      	bmi.n	1484e <__smakebuf_r+0x1a>
   1486e:	431e      	orrs	r6, r3
   14870:	81a6      	strh	r6, [r4, #12]
   14872:	e7e6      	b.n	14842 <__smakebuf_r+0xe>
   14874:	4b0d      	ldr	r3, [pc, #52]	; (148ac <__smakebuf_r+0x78>)
   14876:	62ab      	str	r3, [r5, #40]	; 0x28
   14878:	2380      	movs	r3, #128	; 0x80
   1487a:	89a2      	ldrh	r2, [r4, #12]
   1487c:	6020      	str	r0, [r4, #0]
   1487e:	4313      	orrs	r3, r2
   14880:	81a3      	strh	r3, [r4, #12]
   14882:	9b00      	ldr	r3, [sp, #0]
   14884:	6120      	str	r0, [r4, #16]
   14886:	6163      	str	r3, [r4, #20]
   14888:	9b01      	ldr	r3, [sp, #4]
   1488a:	2b00      	cmp	r3, #0
   1488c:	d00a      	beq.n	148a4 <__smakebuf_r+0x70>
   1488e:	230e      	movs	r3, #14
   14890:	5ee1      	ldrsh	r1, [r4, r3]
   14892:	0028      	movs	r0, r5
   14894:	f000 fd26 	bl	152e4 <_isatty_r>
   14898:	2800      	cmp	r0, #0
   1489a:	d003      	beq.n	148a4 <__smakebuf_r+0x70>
   1489c:	2301      	movs	r3, #1
   1489e:	89a2      	ldrh	r2, [r4, #12]
   148a0:	4313      	orrs	r3, r2
   148a2:	81a3      	strh	r3, [r4, #12]
   148a4:	89a0      	ldrh	r0, [r4, #12]
   148a6:	4338      	orrs	r0, r7
   148a8:	81a0      	strh	r0, [r4, #12]
   148aa:	e7d0      	b.n	1484e <__smakebuf_r+0x1a>
   148ac:	00014631 	.word	0x00014631

000148b0 <__ascii_mbtowc>:
   148b0:	b082      	sub	sp, #8
   148b2:	2900      	cmp	r1, #0
   148b4:	d100      	bne.n	148b8 <__ascii_mbtowc+0x8>
   148b6:	a901      	add	r1, sp, #4
   148b8:	1e10      	subs	r0, r2, #0
   148ba:	d006      	beq.n	148ca <__ascii_mbtowc+0x1a>
   148bc:	2b00      	cmp	r3, #0
   148be:	d006      	beq.n	148ce <__ascii_mbtowc+0x1e>
   148c0:	7813      	ldrb	r3, [r2, #0]
   148c2:	600b      	str	r3, [r1, #0]
   148c4:	7810      	ldrb	r0, [r2, #0]
   148c6:	1e43      	subs	r3, r0, #1
   148c8:	4198      	sbcs	r0, r3
   148ca:	b002      	add	sp, #8
   148cc:	4770      	bx	lr
   148ce:	2002      	movs	r0, #2
   148d0:	4240      	negs	r0, r0
   148d2:	e7fa      	b.n	148ca <__ascii_mbtowc+0x1a>

000148d4 <__malloc_lock>:
   148d4:	4770      	bx	lr

000148d6 <__malloc_unlock>:
   148d6:	4770      	bx	lr

000148d8 <__ssputs_r>:
   148d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   148da:	688e      	ldr	r6, [r1, #8]
   148dc:	b085      	sub	sp, #20
   148de:	0007      	movs	r7, r0
   148e0:	000c      	movs	r4, r1
   148e2:	9203      	str	r2, [sp, #12]
   148e4:	9301      	str	r3, [sp, #4]
   148e6:	429e      	cmp	r6, r3
   148e8:	d839      	bhi.n	1495e <__ssputs_r+0x86>
   148ea:	2390      	movs	r3, #144	; 0x90
   148ec:	898a      	ldrh	r2, [r1, #12]
   148ee:	00db      	lsls	r3, r3, #3
   148f0:	421a      	tst	r2, r3
   148f2:	d034      	beq.n	1495e <__ssputs_r+0x86>
   148f4:	2503      	movs	r5, #3
   148f6:	6909      	ldr	r1, [r1, #16]
   148f8:	6823      	ldr	r3, [r4, #0]
   148fa:	1a5b      	subs	r3, r3, r1
   148fc:	9302      	str	r3, [sp, #8]
   148fe:	6963      	ldr	r3, [r4, #20]
   14900:	9802      	ldr	r0, [sp, #8]
   14902:	435d      	muls	r5, r3
   14904:	0feb      	lsrs	r3, r5, #31
   14906:	195d      	adds	r5, r3, r5
   14908:	9b01      	ldr	r3, [sp, #4]
   1490a:	106d      	asrs	r5, r5, #1
   1490c:	3301      	adds	r3, #1
   1490e:	181b      	adds	r3, r3, r0
   14910:	42ab      	cmp	r3, r5
   14912:	d900      	bls.n	14916 <__ssputs_r+0x3e>
   14914:	001d      	movs	r5, r3
   14916:	0553      	lsls	r3, r2, #21
   14918:	d532      	bpl.n	14980 <__ssputs_r+0xa8>
   1491a:	0029      	movs	r1, r5
   1491c:	0038      	movs	r0, r7
   1491e:	f7ff fa05 	bl	13d2c <_malloc_r>
   14922:	1e06      	subs	r6, r0, #0
   14924:	d109      	bne.n	1493a <__ssputs_r+0x62>
   14926:	230c      	movs	r3, #12
   14928:	603b      	str	r3, [r7, #0]
   1492a:	2340      	movs	r3, #64	; 0x40
   1492c:	2001      	movs	r0, #1
   1492e:	89a2      	ldrh	r2, [r4, #12]
   14930:	4240      	negs	r0, r0
   14932:	4313      	orrs	r3, r2
   14934:	81a3      	strh	r3, [r4, #12]
   14936:	b005      	add	sp, #20
   14938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1493a:	9a02      	ldr	r2, [sp, #8]
   1493c:	6921      	ldr	r1, [r4, #16]
   1493e:	f7ff f987 	bl	13c50 <memcpy>
   14942:	89a3      	ldrh	r3, [r4, #12]
   14944:	4a14      	ldr	r2, [pc, #80]	; (14998 <__ssputs_r+0xc0>)
   14946:	401a      	ands	r2, r3
   14948:	2380      	movs	r3, #128	; 0x80
   1494a:	4313      	orrs	r3, r2
   1494c:	81a3      	strh	r3, [r4, #12]
   1494e:	9b02      	ldr	r3, [sp, #8]
   14950:	6126      	str	r6, [r4, #16]
   14952:	18f6      	adds	r6, r6, r3
   14954:	6026      	str	r6, [r4, #0]
   14956:	6165      	str	r5, [r4, #20]
   14958:	9e01      	ldr	r6, [sp, #4]
   1495a:	1aed      	subs	r5, r5, r3
   1495c:	60a5      	str	r5, [r4, #8]
   1495e:	9b01      	ldr	r3, [sp, #4]
   14960:	42b3      	cmp	r3, r6
   14962:	d200      	bcs.n	14966 <__ssputs_r+0x8e>
   14964:	001e      	movs	r6, r3
   14966:	0032      	movs	r2, r6
   14968:	9903      	ldr	r1, [sp, #12]
   1496a:	6820      	ldr	r0, [r4, #0]
   1496c:	f7ff f979 	bl	13c62 <memmove>
   14970:	68a3      	ldr	r3, [r4, #8]
   14972:	2000      	movs	r0, #0
   14974:	1b9b      	subs	r3, r3, r6
   14976:	60a3      	str	r3, [r4, #8]
   14978:	6823      	ldr	r3, [r4, #0]
   1497a:	199e      	adds	r6, r3, r6
   1497c:	6026      	str	r6, [r4, #0]
   1497e:	e7da      	b.n	14936 <__ssputs_r+0x5e>
   14980:	002a      	movs	r2, r5
   14982:	0038      	movs	r0, r7
   14984:	f000 fcdf 	bl	15346 <_realloc_r>
   14988:	1e06      	subs	r6, r0, #0
   1498a:	d1e0      	bne.n	1494e <__ssputs_r+0x76>
   1498c:	6921      	ldr	r1, [r4, #16]
   1498e:	0038      	movs	r0, r7
   14990:	f7ff f982 	bl	13c98 <_free_r>
   14994:	e7c7      	b.n	14926 <__ssputs_r+0x4e>
   14996:	46c0      	nop			; (mov r8, r8)
   14998:	fffffb7f 	.word	0xfffffb7f

0001499c <_svfiprintf_r>:
   1499c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1499e:	b09f      	sub	sp, #124	; 0x7c
   149a0:	9002      	str	r0, [sp, #8]
   149a2:	9305      	str	r3, [sp, #20]
   149a4:	898b      	ldrh	r3, [r1, #12]
   149a6:	000f      	movs	r7, r1
   149a8:	0016      	movs	r6, r2
   149aa:	061b      	lsls	r3, r3, #24
   149ac:	d511      	bpl.n	149d2 <_svfiprintf_r+0x36>
   149ae:	690b      	ldr	r3, [r1, #16]
   149b0:	2b00      	cmp	r3, #0
   149b2:	d10e      	bne.n	149d2 <_svfiprintf_r+0x36>
   149b4:	2140      	movs	r1, #64	; 0x40
   149b6:	f7ff f9b9 	bl	13d2c <_malloc_r>
   149ba:	6038      	str	r0, [r7, #0]
   149bc:	6138      	str	r0, [r7, #16]
   149be:	2800      	cmp	r0, #0
   149c0:	d105      	bne.n	149ce <_svfiprintf_r+0x32>
   149c2:	230c      	movs	r3, #12
   149c4:	9a02      	ldr	r2, [sp, #8]
   149c6:	3801      	subs	r0, #1
   149c8:	6013      	str	r3, [r2, #0]
   149ca:	b01f      	add	sp, #124	; 0x7c
   149cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149ce:	2340      	movs	r3, #64	; 0x40
   149d0:	617b      	str	r3, [r7, #20]
   149d2:	2300      	movs	r3, #0
   149d4:	ad06      	add	r5, sp, #24
   149d6:	616b      	str	r3, [r5, #20]
   149d8:	3320      	adds	r3, #32
   149da:	766b      	strb	r3, [r5, #25]
   149dc:	3310      	adds	r3, #16
   149de:	76ab      	strb	r3, [r5, #26]
   149e0:	0034      	movs	r4, r6
   149e2:	7823      	ldrb	r3, [r4, #0]
   149e4:	2b00      	cmp	r3, #0
   149e6:	d147      	bne.n	14a78 <_svfiprintf_r+0xdc>
   149e8:	1ba3      	subs	r3, r4, r6
   149ea:	9304      	str	r3, [sp, #16]
   149ec:	d00d      	beq.n	14a0a <_svfiprintf_r+0x6e>
   149ee:	1ba3      	subs	r3, r4, r6
   149f0:	0032      	movs	r2, r6
   149f2:	0039      	movs	r1, r7
   149f4:	9802      	ldr	r0, [sp, #8]
   149f6:	f7ff ff6f 	bl	148d8 <__ssputs_r>
   149fa:	1c43      	adds	r3, r0, #1
   149fc:	d100      	bne.n	14a00 <_svfiprintf_r+0x64>
   149fe:	e0b5      	b.n	14b6c <_svfiprintf_r+0x1d0>
   14a00:	696a      	ldr	r2, [r5, #20]
   14a02:	9b04      	ldr	r3, [sp, #16]
   14a04:	4694      	mov	ip, r2
   14a06:	4463      	add	r3, ip
   14a08:	616b      	str	r3, [r5, #20]
   14a0a:	7823      	ldrb	r3, [r4, #0]
   14a0c:	2b00      	cmp	r3, #0
   14a0e:	d100      	bne.n	14a12 <_svfiprintf_r+0x76>
   14a10:	e0ac      	b.n	14b6c <_svfiprintf_r+0x1d0>
   14a12:	2201      	movs	r2, #1
   14a14:	2300      	movs	r3, #0
   14a16:	4252      	negs	r2, r2
   14a18:	606a      	str	r2, [r5, #4]
   14a1a:	a902      	add	r1, sp, #8
   14a1c:	3254      	adds	r2, #84	; 0x54
   14a1e:	1852      	adds	r2, r2, r1
   14a20:	3401      	adds	r4, #1
   14a22:	602b      	str	r3, [r5, #0]
   14a24:	60eb      	str	r3, [r5, #12]
   14a26:	60ab      	str	r3, [r5, #8]
   14a28:	7013      	strb	r3, [r2, #0]
   14a2a:	65ab      	str	r3, [r5, #88]	; 0x58
   14a2c:	4e58      	ldr	r6, [pc, #352]	; (14b90 <_svfiprintf_r+0x1f4>)
   14a2e:	2205      	movs	r2, #5
   14a30:	7821      	ldrb	r1, [r4, #0]
   14a32:	0030      	movs	r0, r6
   14a34:	f000 fc7c 	bl	15330 <memchr>
   14a38:	1c62      	adds	r2, r4, #1
   14a3a:	2800      	cmp	r0, #0
   14a3c:	d120      	bne.n	14a80 <_svfiprintf_r+0xe4>
   14a3e:	6829      	ldr	r1, [r5, #0]
   14a40:	06cb      	lsls	r3, r1, #27
   14a42:	d504      	bpl.n	14a4e <_svfiprintf_r+0xb2>
   14a44:	2353      	movs	r3, #83	; 0x53
   14a46:	ae02      	add	r6, sp, #8
   14a48:	3020      	adds	r0, #32
   14a4a:	199b      	adds	r3, r3, r6
   14a4c:	7018      	strb	r0, [r3, #0]
   14a4e:	070b      	lsls	r3, r1, #28
   14a50:	d504      	bpl.n	14a5c <_svfiprintf_r+0xc0>
   14a52:	2353      	movs	r3, #83	; 0x53
   14a54:	202b      	movs	r0, #43	; 0x2b
   14a56:	ae02      	add	r6, sp, #8
   14a58:	199b      	adds	r3, r3, r6
   14a5a:	7018      	strb	r0, [r3, #0]
   14a5c:	7823      	ldrb	r3, [r4, #0]
   14a5e:	2b2a      	cmp	r3, #42	; 0x2a
   14a60:	d016      	beq.n	14a90 <_svfiprintf_r+0xf4>
   14a62:	2000      	movs	r0, #0
   14a64:	210a      	movs	r1, #10
   14a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a68:	7822      	ldrb	r2, [r4, #0]
   14a6a:	3a30      	subs	r2, #48	; 0x30
   14a6c:	2a09      	cmp	r2, #9
   14a6e:	d955      	bls.n	14b1c <_svfiprintf_r+0x180>
   14a70:	2800      	cmp	r0, #0
   14a72:	d015      	beq.n	14aa0 <_svfiprintf_r+0x104>
   14a74:	9309      	str	r3, [sp, #36]	; 0x24
   14a76:	e013      	b.n	14aa0 <_svfiprintf_r+0x104>
   14a78:	2b25      	cmp	r3, #37	; 0x25
   14a7a:	d0b5      	beq.n	149e8 <_svfiprintf_r+0x4c>
   14a7c:	3401      	adds	r4, #1
   14a7e:	e7b0      	b.n	149e2 <_svfiprintf_r+0x46>
   14a80:	2301      	movs	r3, #1
   14a82:	1b80      	subs	r0, r0, r6
   14a84:	4083      	lsls	r3, r0
   14a86:	6829      	ldr	r1, [r5, #0]
   14a88:	0014      	movs	r4, r2
   14a8a:	430b      	orrs	r3, r1
   14a8c:	602b      	str	r3, [r5, #0]
   14a8e:	e7cd      	b.n	14a2c <_svfiprintf_r+0x90>
   14a90:	9b05      	ldr	r3, [sp, #20]
   14a92:	1d18      	adds	r0, r3, #4
   14a94:	681b      	ldr	r3, [r3, #0]
   14a96:	9005      	str	r0, [sp, #20]
   14a98:	2b00      	cmp	r3, #0
   14a9a:	db39      	blt.n	14b10 <_svfiprintf_r+0x174>
   14a9c:	9309      	str	r3, [sp, #36]	; 0x24
   14a9e:	0014      	movs	r4, r2
   14aa0:	7823      	ldrb	r3, [r4, #0]
   14aa2:	2b2e      	cmp	r3, #46	; 0x2e
   14aa4:	d10b      	bne.n	14abe <_svfiprintf_r+0x122>
   14aa6:	7863      	ldrb	r3, [r4, #1]
   14aa8:	1c62      	adds	r2, r4, #1
   14aaa:	2b2a      	cmp	r3, #42	; 0x2a
   14aac:	d13e      	bne.n	14b2c <_svfiprintf_r+0x190>
   14aae:	9b05      	ldr	r3, [sp, #20]
   14ab0:	3402      	adds	r4, #2
   14ab2:	1d1a      	adds	r2, r3, #4
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	9205      	str	r2, [sp, #20]
   14ab8:	2b00      	cmp	r3, #0
   14aba:	db34      	blt.n	14b26 <_svfiprintf_r+0x18a>
   14abc:	9307      	str	r3, [sp, #28]
   14abe:	4e35      	ldr	r6, [pc, #212]	; (14b94 <_svfiprintf_r+0x1f8>)
   14ac0:	7821      	ldrb	r1, [r4, #0]
   14ac2:	2203      	movs	r2, #3
   14ac4:	0030      	movs	r0, r6
   14ac6:	f000 fc33 	bl	15330 <memchr>
   14aca:	2800      	cmp	r0, #0
   14acc:	d006      	beq.n	14adc <_svfiprintf_r+0x140>
   14ace:	2340      	movs	r3, #64	; 0x40
   14ad0:	1b80      	subs	r0, r0, r6
   14ad2:	4083      	lsls	r3, r0
   14ad4:	682a      	ldr	r2, [r5, #0]
   14ad6:	3401      	adds	r4, #1
   14ad8:	4313      	orrs	r3, r2
   14ada:	602b      	str	r3, [r5, #0]
   14adc:	7821      	ldrb	r1, [r4, #0]
   14ade:	2206      	movs	r2, #6
   14ae0:	482d      	ldr	r0, [pc, #180]	; (14b98 <_svfiprintf_r+0x1fc>)
   14ae2:	1c66      	adds	r6, r4, #1
   14ae4:	7629      	strb	r1, [r5, #24]
   14ae6:	f000 fc23 	bl	15330 <memchr>
   14aea:	2800      	cmp	r0, #0
   14aec:	d046      	beq.n	14b7c <_svfiprintf_r+0x1e0>
   14aee:	4b2b      	ldr	r3, [pc, #172]	; (14b9c <_svfiprintf_r+0x200>)
   14af0:	2b00      	cmp	r3, #0
   14af2:	d12f      	bne.n	14b54 <_svfiprintf_r+0x1b8>
   14af4:	6829      	ldr	r1, [r5, #0]
   14af6:	9b05      	ldr	r3, [sp, #20]
   14af8:	2207      	movs	r2, #7
   14afa:	05c9      	lsls	r1, r1, #23
   14afc:	d528      	bpl.n	14b50 <_svfiprintf_r+0x1b4>
   14afe:	189b      	adds	r3, r3, r2
   14b00:	4393      	bics	r3, r2
   14b02:	3308      	adds	r3, #8
   14b04:	9305      	str	r3, [sp, #20]
   14b06:	696b      	ldr	r3, [r5, #20]
   14b08:	9a03      	ldr	r2, [sp, #12]
   14b0a:	189b      	adds	r3, r3, r2
   14b0c:	616b      	str	r3, [r5, #20]
   14b0e:	e767      	b.n	149e0 <_svfiprintf_r+0x44>
   14b10:	425b      	negs	r3, r3
   14b12:	60eb      	str	r3, [r5, #12]
   14b14:	2302      	movs	r3, #2
   14b16:	430b      	orrs	r3, r1
   14b18:	602b      	str	r3, [r5, #0]
   14b1a:	e7c0      	b.n	14a9e <_svfiprintf_r+0x102>
   14b1c:	434b      	muls	r3, r1
   14b1e:	3401      	adds	r4, #1
   14b20:	189b      	adds	r3, r3, r2
   14b22:	2001      	movs	r0, #1
   14b24:	e7a0      	b.n	14a68 <_svfiprintf_r+0xcc>
   14b26:	2301      	movs	r3, #1
   14b28:	425b      	negs	r3, r3
   14b2a:	e7c7      	b.n	14abc <_svfiprintf_r+0x120>
   14b2c:	2300      	movs	r3, #0
   14b2e:	0014      	movs	r4, r2
   14b30:	200a      	movs	r0, #10
   14b32:	001a      	movs	r2, r3
   14b34:	606b      	str	r3, [r5, #4]
   14b36:	7821      	ldrb	r1, [r4, #0]
   14b38:	3930      	subs	r1, #48	; 0x30
   14b3a:	2909      	cmp	r1, #9
   14b3c:	d903      	bls.n	14b46 <_svfiprintf_r+0x1aa>
   14b3e:	2b00      	cmp	r3, #0
   14b40:	d0bd      	beq.n	14abe <_svfiprintf_r+0x122>
   14b42:	9207      	str	r2, [sp, #28]
   14b44:	e7bb      	b.n	14abe <_svfiprintf_r+0x122>
   14b46:	4342      	muls	r2, r0
   14b48:	3401      	adds	r4, #1
   14b4a:	1852      	adds	r2, r2, r1
   14b4c:	2301      	movs	r3, #1
   14b4e:	e7f2      	b.n	14b36 <_svfiprintf_r+0x19a>
   14b50:	3307      	adds	r3, #7
   14b52:	e7d5      	b.n	14b00 <_svfiprintf_r+0x164>
   14b54:	ab05      	add	r3, sp, #20
   14b56:	9300      	str	r3, [sp, #0]
   14b58:	003a      	movs	r2, r7
   14b5a:	4b11      	ldr	r3, [pc, #68]	; (14ba0 <_svfiprintf_r+0x204>)
   14b5c:	0029      	movs	r1, r5
   14b5e:	9802      	ldr	r0, [sp, #8]
   14b60:	e000      	b.n	14b64 <_svfiprintf_r+0x1c8>
   14b62:	bf00      	nop
   14b64:	9003      	str	r0, [sp, #12]
   14b66:	9b03      	ldr	r3, [sp, #12]
   14b68:	3301      	adds	r3, #1
   14b6a:	d1cc      	bne.n	14b06 <_svfiprintf_r+0x16a>
   14b6c:	89bb      	ldrh	r3, [r7, #12]
   14b6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14b70:	065b      	lsls	r3, r3, #25
   14b72:	d400      	bmi.n	14b76 <_svfiprintf_r+0x1da>
   14b74:	e729      	b.n	149ca <_svfiprintf_r+0x2e>
   14b76:	2001      	movs	r0, #1
   14b78:	4240      	negs	r0, r0
   14b7a:	e726      	b.n	149ca <_svfiprintf_r+0x2e>
   14b7c:	ab05      	add	r3, sp, #20
   14b7e:	9300      	str	r3, [sp, #0]
   14b80:	003a      	movs	r2, r7
   14b82:	4b07      	ldr	r3, [pc, #28]	; (14ba0 <_svfiprintf_r+0x204>)
   14b84:	0029      	movs	r1, r5
   14b86:	9802      	ldr	r0, [sp, #8]
   14b88:	f000 f9be 	bl	14f08 <_printf_i>
   14b8c:	e7ea      	b.n	14b64 <_svfiprintf_r+0x1c8>
   14b8e:	46c0      	nop			; (mov r8, r8)
   14b90:	00016b7a 	.word	0x00016b7a
   14b94:	00016b80 	.word	0x00016b80
   14b98:	00016b84 	.word	0x00016b84
   14b9c:	00000000 	.word	0x00000000
   14ba0:	000148d9 	.word	0x000148d9

00014ba4 <__sfputc_r>:
   14ba4:	6893      	ldr	r3, [r2, #8]
   14ba6:	b510      	push	{r4, lr}
   14ba8:	3b01      	subs	r3, #1
   14baa:	6093      	str	r3, [r2, #8]
   14bac:	2b00      	cmp	r3, #0
   14bae:	da05      	bge.n	14bbc <__sfputc_r+0x18>
   14bb0:	6994      	ldr	r4, [r2, #24]
   14bb2:	42a3      	cmp	r3, r4
   14bb4:	db08      	blt.n	14bc8 <__sfputc_r+0x24>
   14bb6:	b2cb      	uxtb	r3, r1
   14bb8:	2b0a      	cmp	r3, #10
   14bba:	d005      	beq.n	14bc8 <__sfputc_r+0x24>
   14bbc:	6813      	ldr	r3, [r2, #0]
   14bbe:	1c58      	adds	r0, r3, #1
   14bc0:	6010      	str	r0, [r2, #0]
   14bc2:	7019      	strb	r1, [r3, #0]
   14bc4:	b2c8      	uxtb	r0, r1
   14bc6:	bd10      	pop	{r4, pc}
   14bc8:	f7ff fbb0 	bl	1432c <__swbuf_r>
   14bcc:	e7fb      	b.n	14bc6 <__sfputc_r+0x22>

00014bce <__sfputs_r>:
   14bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bd0:	0006      	movs	r6, r0
   14bd2:	000f      	movs	r7, r1
   14bd4:	0014      	movs	r4, r2
   14bd6:	18d5      	adds	r5, r2, r3
   14bd8:	42ac      	cmp	r4, r5
   14bda:	d101      	bne.n	14be0 <__sfputs_r+0x12>
   14bdc:	2000      	movs	r0, #0
   14bde:	e007      	b.n	14bf0 <__sfputs_r+0x22>
   14be0:	7821      	ldrb	r1, [r4, #0]
   14be2:	003a      	movs	r2, r7
   14be4:	0030      	movs	r0, r6
   14be6:	f7ff ffdd 	bl	14ba4 <__sfputc_r>
   14bea:	3401      	adds	r4, #1
   14bec:	1c43      	adds	r3, r0, #1
   14bee:	d1f3      	bne.n	14bd8 <__sfputs_r+0xa>
   14bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014bf4 <_vfiprintf_r>:
   14bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bf6:	b09f      	sub	sp, #124	; 0x7c
   14bf8:	0006      	movs	r6, r0
   14bfa:	000f      	movs	r7, r1
   14bfc:	0014      	movs	r4, r2
   14bfe:	9305      	str	r3, [sp, #20]
   14c00:	2800      	cmp	r0, #0
   14c02:	d004      	beq.n	14c0e <_vfiprintf_r+0x1a>
   14c04:	6983      	ldr	r3, [r0, #24]
   14c06:	2b00      	cmp	r3, #0
   14c08:	d101      	bne.n	14c0e <_vfiprintf_r+0x1a>
   14c0a:	f7ff fd53 	bl	146b4 <__sinit>
   14c0e:	4b7f      	ldr	r3, [pc, #508]	; (14e0c <_vfiprintf_r+0x218>)
   14c10:	429f      	cmp	r7, r3
   14c12:	d15c      	bne.n	14cce <_vfiprintf_r+0xda>
   14c14:	6877      	ldr	r7, [r6, #4]
   14c16:	89bb      	ldrh	r3, [r7, #12]
   14c18:	071b      	lsls	r3, r3, #28
   14c1a:	d562      	bpl.n	14ce2 <_vfiprintf_r+0xee>
   14c1c:	693b      	ldr	r3, [r7, #16]
   14c1e:	2b00      	cmp	r3, #0
   14c20:	d05f      	beq.n	14ce2 <_vfiprintf_r+0xee>
   14c22:	2300      	movs	r3, #0
   14c24:	ad06      	add	r5, sp, #24
   14c26:	616b      	str	r3, [r5, #20]
   14c28:	3320      	adds	r3, #32
   14c2a:	766b      	strb	r3, [r5, #25]
   14c2c:	3310      	adds	r3, #16
   14c2e:	76ab      	strb	r3, [r5, #26]
   14c30:	9402      	str	r4, [sp, #8]
   14c32:	9c02      	ldr	r4, [sp, #8]
   14c34:	7823      	ldrb	r3, [r4, #0]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d15d      	bne.n	14cf6 <_vfiprintf_r+0x102>
   14c3a:	9b02      	ldr	r3, [sp, #8]
   14c3c:	1ae3      	subs	r3, r4, r3
   14c3e:	9304      	str	r3, [sp, #16]
   14c40:	d00d      	beq.n	14c5e <_vfiprintf_r+0x6a>
   14c42:	9b04      	ldr	r3, [sp, #16]
   14c44:	9a02      	ldr	r2, [sp, #8]
   14c46:	0039      	movs	r1, r7
   14c48:	0030      	movs	r0, r6
   14c4a:	f7ff ffc0 	bl	14bce <__sfputs_r>
   14c4e:	1c43      	adds	r3, r0, #1
   14c50:	d100      	bne.n	14c54 <_vfiprintf_r+0x60>
   14c52:	e0cc      	b.n	14dee <_vfiprintf_r+0x1fa>
   14c54:	696a      	ldr	r2, [r5, #20]
   14c56:	9b04      	ldr	r3, [sp, #16]
   14c58:	4694      	mov	ip, r2
   14c5a:	4463      	add	r3, ip
   14c5c:	616b      	str	r3, [r5, #20]
   14c5e:	7823      	ldrb	r3, [r4, #0]
   14c60:	2b00      	cmp	r3, #0
   14c62:	d100      	bne.n	14c66 <_vfiprintf_r+0x72>
   14c64:	e0c3      	b.n	14dee <_vfiprintf_r+0x1fa>
   14c66:	2201      	movs	r2, #1
   14c68:	2300      	movs	r3, #0
   14c6a:	4252      	negs	r2, r2
   14c6c:	606a      	str	r2, [r5, #4]
   14c6e:	a902      	add	r1, sp, #8
   14c70:	3254      	adds	r2, #84	; 0x54
   14c72:	1852      	adds	r2, r2, r1
   14c74:	3401      	adds	r4, #1
   14c76:	602b      	str	r3, [r5, #0]
   14c78:	60eb      	str	r3, [r5, #12]
   14c7a:	60ab      	str	r3, [r5, #8]
   14c7c:	7013      	strb	r3, [r2, #0]
   14c7e:	65ab      	str	r3, [r5, #88]	; 0x58
   14c80:	7821      	ldrb	r1, [r4, #0]
   14c82:	2205      	movs	r2, #5
   14c84:	4862      	ldr	r0, [pc, #392]	; (14e10 <_vfiprintf_r+0x21c>)
   14c86:	f000 fb53 	bl	15330 <memchr>
   14c8a:	1c63      	adds	r3, r4, #1
   14c8c:	469c      	mov	ip, r3
   14c8e:	2800      	cmp	r0, #0
   14c90:	d135      	bne.n	14cfe <_vfiprintf_r+0x10a>
   14c92:	6829      	ldr	r1, [r5, #0]
   14c94:	06cb      	lsls	r3, r1, #27
   14c96:	d504      	bpl.n	14ca2 <_vfiprintf_r+0xae>
   14c98:	2353      	movs	r3, #83	; 0x53
   14c9a:	aa02      	add	r2, sp, #8
   14c9c:	3020      	adds	r0, #32
   14c9e:	189b      	adds	r3, r3, r2
   14ca0:	7018      	strb	r0, [r3, #0]
   14ca2:	070b      	lsls	r3, r1, #28
   14ca4:	d504      	bpl.n	14cb0 <_vfiprintf_r+0xbc>
   14ca6:	2353      	movs	r3, #83	; 0x53
   14ca8:	202b      	movs	r0, #43	; 0x2b
   14caa:	aa02      	add	r2, sp, #8
   14cac:	189b      	adds	r3, r3, r2
   14cae:	7018      	strb	r0, [r3, #0]
   14cb0:	7823      	ldrb	r3, [r4, #0]
   14cb2:	2b2a      	cmp	r3, #42	; 0x2a
   14cb4:	d02c      	beq.n	14d10 <_vfiprintf_r+0x11c>
   14cb6:	2000      	movs	r0, #0
   14cb8:	210a      	movs	r1, #10
   14cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14cbc:	7822      	ldrb	r2, [r4, #0]
   14cbe:	3a30      	subs	r2, #48	; 0x30
   14cc0:	2a09      	cmp	r2, #9
   14cc2:	d800      	bhi.n	14cc6 <_vfiprintf_r+0xd2>
   14cc4:	e06b      	b.n	14d9e <_vfiprintf_r+0x1aa>
   14cc6:	2800      	cmp	r0, #0
   14cc8:	d02a      	beq.n	14d20 <_vfiprintf_r+0x12c>
   14cca:	9309      	str	r3, [sp, #36]	; 0x24
   14ccc:	e028      	b.n	14d20 <_vfiprintf_r+0x12c>
   14cce:	4b51      	ldr	r3, [pc, #324]	; (14e14 <_vfiprintf_r+0x220>)
   14cd0:	429f      	cmp	r7, r3
   14cd2:	d101      	bne.n	14cd8 <_vfiprintf_r+0xe4>
   14cd4:	68b7      	ldr	r7, [r6, #8]
   14cd6:	e79e      	b.n	14c16 <_vfiprintf_r+0x22>
   14cd8:	4b4f      	ldr	r3, [pc, #316]	; (14e18 <_vfiprintf_r+0x224>)
   14cda:	429f      	cmp	r7, r3
   14cdc:	d19b      	bne.n	14c16 <_vfiprintf_r+0x22>
   14cde:	68f7      	ldr	r7, [r6, #12]
   14ce0:	e799      	b.n	14c16 <_vfiprintf_r+0x22>
   14ce2:	0039      	movs	r1, r7
   14ce4:	0030      	movs	r0, r6
   14ce6:	f7ff fb77 	bl	143d8 <__swsetup_r>
   14cea:	2800      	cmp	r0, #0
   14cec:	d099      	beq.n	14c22 <_vfiprintf_r+0x2e>
   14cee:	2001      	movs	r0, #1
   14cf0:	4240      	negs	r0, r0
   14cf2:	b01f      	add	sp, #124	; 0x7c
   14cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cf6:	2b25      	cmp	r3, #37	; 0x25
   14cf8:	d09f      	beq.n	14c3a <_vfiprintf_r+0x46>
   14cfa:	3401      	adds	r4, #1
   14cfc:	e79a      	b.n	14c34 <_vfiprintf_r+0x40>
   14cfe:	4b44      	ldr	r3, [pc, #272]	; (14e10 <_vfiprintf_r+0x21c>)
   14d00:	6829      	ldr	r1, [r5, #0]
   14d02:	1ac0      	subs	r0, r0, r3
   14d04:	2301      	movs	r3, #1
   14d06:	4083      	lsls	r3, r0
   14d08:	430b      	orrs	r3, r1
   14d0a:	602b      	str	r3, [r5, #0]
   14d0c:	4664      	mov	r4, ip
   14d0e:	e7b7      	b.n	14c80 <_vfiprintf_r+0x8c>
   14d10:	9b05      	ldr	r3, [sp, #20]
   14d12:	1d18      	adds	r0, r3, #4
   14d14:	681b      	ldr	r3, [r3, #0]
   14d16:	9005      	str	r0, [sp, #20]
   14d18:	2b00      	cmp	r3, #0
   14d1a:	db3a      	blt.n	14d92 <_vfiprintf_r+0x19e>
   14d1c:	9309      	str	r3, [sp, #36]	; 0x24
   14d1e:	4664      	mov	r4, ip
   14d20:	7823      	ldrb	r3, [r4, #0]
   14d22:	2b2e      	cmp	r3, #46	; 0x2e
   14d24:	d10b      	bne.n	14d3e <_vfiprintf_r+0x14a>
   14d26:	7863      	ldrb	r3, [r4, #1]
   14d28:	1c62      	adds	r2, r4, #1
   14d2a:	2b2a      	cmp	r3, #42	; 0x2a
   14d2c:	d13f      	bne.n	14dae <_vfiprintf_r+0x1ba>
   14d2e:	9b05      	ldr	r3, [sp, #20]
   14d30:	3402      	adds	r4, #2
   14d32:	1d1a      	adds	r2, r3, #4
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	9205      	str	r2, [sp, #20]
   14d38:	2b00      	cmp	r3, #0
   14d3a:	db35      	blt.n	14da8 <_vfiprintf_r+0x1b4>
   14d3c:	9307      	str	r3, [sp, #28]
   14d3e:	7821      	ldrb	r1, [r4, #0]
   14d40:	2203      	movs	r2, #3
   14d42:	4836      	ldr	r0, [pc, #216]	; (14e1c <_vfiprintf_r+0x228>)
   14d44:	f000 faf4 	bl	15330 <memchr>
   14d48:	2800      	cmp	r0, #0
   14d4a:	d007      	beq.n	14d5c <_vfiprintf_r+0x168>
   14d4c:	4b33      	ldr	r3, [pc, #204]	; (14e1c <_vfiprintf_r+0x228>)
   14d4e:	682a      	ldr	r2, [r5, #0]
   14d50:	1ac0      	subs	r0, r0, r3
   14d52:	2340      	movs	r3, #64	; 0x40
   14d54:	4083      	lsls	r3, r0
   14d56:	4313      	orrs	r3, r2
   14d58:	602b      	str	r3, [r5, #0]
   14d5a:	3401      	adds	r4, #1
   14d5c:	7821      	ldrb	r1, [r4, #0]
   14d5e:	1c63      	adds	r3, r4, #1
   14d60:	2206      	movs	r2, #6
   14d62:	482f      	ldr	r0, [pc, #188]	; (14e20 <_vfiprintf_r+0x22c>)
   14d64:	9302      	str	r3, [sp, #8]
   14d66:	7629      	strb	r1, [r5, #24]
   14d68:	f000 fae2 	bl	15330 <memchr>
   14d6c:	2800      	cmp	r0, #0
   14d6e:	d044      	beq.n	14dfa <_vfiprintf_r+0x206>
   14d70:	4b2c      	ldr	r3, [pc, #176]	; (14e24 <_vfiprintf_r+0x230>)
   14d72:	2b00      	cmp	r3, #0
   14d74:	d12f      	bne.n	14dd6 <_vfiprintf_r+0x1e2>
   14d76:	6829      	ldr	r1, [r5, #0]
   14d78:	9b05      	ldr	r3, [sp, #20]
   14d7a:	2207      	movs	r2, #7
   14d7c:	05c9      	lsls	r1, r1, #23
   14d7e:	d528      	bpl.n	14dd2 <_vfiprintf_r+0x1de>
   14d80:	189b      	adds	r3, r3, r2
   14d82:	4393      	bics	r3, r2
   14d84:	3308      	adds	r3, #8
   14d86:	9305      	str	r3, [sp, #20]
   14d88:	696b      	ldr	r3, [r5, #20]
   14d8a:	9a03      	ldr	r2, [sp, #12]
   14d8c:	189b      	adds	r3, r3, r2
   14d8e:	616b      	str	r3, [r5, #20]
   14d90:	e74f      	b.n	14c32 <_vfiprintf_r+0x3e>
   14d92:	425b      	negs	r3, r3
   14d94:	60eb      	str	r3, [r5, #12]
   14d96:	2302      	movs	r3, #2
   14d98:	430b      	orrs	r3, r1
   14d9a:	602b      	str	r3, [r5, #0]
   14d9c:	e7bf      	b.n	14d1e <_vfiprintf_r+0x12a>
   14d9e:	434b      	muls	r3, r1
   14da0:	3401      	adds	r4, #1
   14da2:	189b      	adds	r3, r3, r2
   14da4:	2001      	movs	r0, #1
   14da6:	e789      	b.n	14cbc <_vfiprintf_r+0xc8>
   14da8:	2301      	movs	r3, #1
   14daa:	425b      	negs	r3, r3
   14dac:	e7c6      	b.n	14d3c <_vfiprintf_r+0x148>
   14dae:	2300      	movs	r3, #0
   14db0:	0014      	movs	r4, r2
   14db2:	200a      	movs	r0, #10
   14db4:	001a      	movs	r2, r3
   14db6:	606b      	str	r3, [r5, #4]
   14db8:	7821      	ldrb	r1, [r4, #0]
   14dba:	3930      	subs	r1, #48	; 0x30
   14dbc:	2909      	cmp	r1, #9
   14dbe:	d903      	bls.n	14dc8 <_vfiprintf_r+0x1d4>
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d0bc      	beq.n	14d3e <_vfiprintf_r+0x14a>
   14dc4:	9207      	str	r2, [sp, #28]
   14dc6:	e7ba      	b.n	14d3e <_vfiprintf_r+0x14a>
   14dc8:	4342      	muls	r2, r0
   14dca:	3401      	adds	r4, #1
   14dcc:	1852      	adds	r2, r2, r1
   14dce:	2301      	movs	r3, #1
   14dd0:	e7f2      	b.n	14db8 <_vfiprintf_r+0x1c4>
   14dd2:	3307      	adds	r3, #7
   14dd4:	e7d5      	b.n	14d82 <_vfiprintf_r+0x18e>
   14dd6:	ab05      	add	r3, sp, #20
   14dd8:	9300      	str	r3, [sp, #0]
   14dda:	003a      	movs	r2, r7
   14ddc:	4b12      	ldr	r3, [pc, #72]	; (14e28 <_vfiprintf_r+0x234>)
   14dde:	0029      	movs	r1, r5
   14de0:	0030      	movs	r0, r6
   14de2:	e000      	b.n	14de6 <_vfiprintf_r+0x1f2>
   14de4:	bf00      	nop
   14de6:	9003      	str	r0, [sp, #12]
   14de8:	9b03      	ldr	r3, [sp, #12]
   14dea:	3301      	adds	r3, #1
   14dec:	d1cc      	bne.n	14d88 <_vfiprintf_r+0x194>
   14dee:	89bb      	ldrh	r3, [r7, #12]
   14df0:	065b      	lsls	r3, r3, #25
   14df2:	d500      	bpl.n	14df6 <_vfiprintf_r+0x202>
   14df4:	e77b      	b.n	14cee <_vfiprintf_r+0xfa>
   14df6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14df8:	e77b      	b.n	14cf2 <_vfiprintf_r+0xfe>
   14dfa:	ab05      	add	r3, sp, #20
   14dfc:	9300      	str	r3, [sp, #0]
   14dfe:	003a      	movs	r2, r7
   14e00:	4b09      	ldr	r3, [pc, #36]	; (14e28 <_vfiprintf_r+0x234>)
   14e02:	0029      	movs	r1, r5
   14e04:	0030      	movs	r0, r6
   14e06:	f000 f87f 	bl	14f08 <_printf_i>
   14e0a:	e7ec      	b.n	14de6 <_vfiprintf_r+0x1f2>
   14e0c:	00016b30 	.word	0x00016b30
   14e10:	00016b7a 	.word	0x00016b7a
   14e14:	00016b50 	.word	0x00016b50
   14e18:	00016b10 	.word	0x00016b10
   14e1c:	00016b80 	.word	0x00016b80
   14e20:	00016b84 	.word	0x00016b84
   14e24:	00000000 	.word	0x00000000
   14e28:	00014bcf 	.word	0x00014bcf

00014e2c <_printf_common>:
   14e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e2e:	0015      	movs	r5, r2
   14e30:	9301      	str	r3, [sp, #4]
   14e32:	688a      	ldr	r2, [r1, #8]
   14e34:	690b      	ldr	r3, [r1, #16]
   14e36:	9000      	str	r0, [sp, #0]
   14e38:	000c      	movs	r4, r1
   14e3a:	4293      	cmp	r3, r2
   14e3c:	da00      	bge.n	14e40 <_printf_common+0x14>
   14e3e:	0013      	movs	r3, r2
   14e40:	0022      	movs	r2, r4
   14e42:	602b      	str	r3, [r5, #0]
   14e44:	3243      	adds	r2, #67	; 0x43
   14e46:	7812      	ldrb	r2, [r2, #0]
   14e48:	2a00      	cmp	r2, #0
   14e4a:	d001      	beq.n	14e50 <_printf_common+0x24>
   14e4c:	3301      	adds	r3, #1
   14e4e:	602b      	str	r3, [r5, #0]
   14e50:	6823      	ldr	r3, [r4, #0]
   14e52:	069b      	lsls	r3, r3, #26
   14e54:	d502      	bpl.n	14e5c <_printf_common+0x30>
   14e56:	682b      	ldr	r3, [r5, #0]
   14e58:	3302      	adds	r3, #2
   14e5a:	602b      	str	r3, [r5, #0]
   14e5c:	2706      	movs	r7, #6
   14e5e:	6823      	ldr	r3, [r4, #0]
   14e60:	401f      	ands	r7, r3
   14e62:	d027      	beq.n	14eb4 <_printf_common+0x88>
   14e64:	0023      	movs	r3, r4
   14e66:	3343      	adds	r3, #67	; 0x43
   14e68:	781b      	ldrb	r3, [r3, #0]
   14e6a:	1e5a      	subs	r2, r3, #1
   14e6c:	4193      	sbcs	r3, r2
   14e6e:	6822      	ldr	r2, [r4, #0]
   14e70:	0692      	lsls	r2, r2, #26
   14e72:	d430      	bmi.n	14ed6 <_printf_common+0xaa>
   14e74:	0022      	movs	r2, r4
   14e76:	9901      	ldr	r1, [sp, #4]
   14e78:	3243      	adds	r2, #67	; 0x43
   14e7a:	9800      	ldr	r0, [sp, #0]
   14e7c:	9e08      	ldr	r6, [sp, #32]
   14e7e:	47b0      	blx	r6
   14e80:	1c43      	adds	r3, r0, #1
   14e82:	d025      	beq.n	14ed0 <_printf_common+0xa4>
   14e84:	2306      	movs	r3, #6
   14e86:	6820      	ldr	r0, [r4, #0]
   14e88:	682a      	ldr	r2, [r5, #0]
   14e8a:	68e1      	ldr	r1, [r4, #12]
   14e8c:	4003      	ands	r3, r0
   14e8e:	2500      	movs	r5, #0
   14e90:	2b04      	cmp	r3, #4
   14e92:	d103      	bne.n	14e9c <_printf_common+0x70>
   14e94:	1a8d      	subs	r5, r1, r2
   14e96:	43eb      	mvns	r3, r5
   14e98:	17db      	asrs	r3, r3, #31
   14e9a:	401d      	ands	r5, r3
   14e9c:	68a3      	ldr	r3, [r4, #8]
   14e9e:	6922      	ldr	r2, [r4, #16]
   14ea0:	4293      	cmp	r3, r2
   14ea2:	dd01      	ble.n	14ea8 <_printf_common+0x7c>
   14ea4:	1a9b      	subs	r3, r3, r2
   14ea6:	18ed      	adds	r5, r5, r3
   14ea8:	2700      	movs	r7, #0
   14eaa:	42bd      	cmp	r5, r7
   14eac:	d120      	bne.n	14ef0 <_printf_common+0xc4>
   14eae:	2000      	movs	r0, #0
   14eb0:	e010      	b.n	14ed4 <_printf_common+0xa8>
   14eb2:	3701      	adds	r7, #1
   14eb4:	68e3      	ldr	r3, [r4, #12]
   14eb6:	682a      	ldr	r2, [r5, #0]
   14eb8:	1a9b      	subs	r3, r3, r2
   14eba:	429f      	cmp	r7, r3
   14ebc:	dad2      	bge.n	14e64 <_printf_common+0x38>
   14ebe:	0022      	movs	r2, r4
   14ec0:	2301      	movs	r3, #1
   14ec2:	3219      	adds	r2, #25
   14ec4:	9901      	ldr	r1, [sp, #4]
   14ec6:	9800      	ldr	r0, [sp, #0]
   14ec8:	9e08      	ldr	r6, [sp, #32]
   14eca:	47b0      	blx	r6
   14ecc:	1c43      	adds	r3, r0, #1
   14ece:	d1f0      	bne.n	14eb2 <_printf_common+0x86>
   14ed0:	2001      	movs	r0, #1
   14ed2:	4240      	negs	r0, r0
   14ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14ed6:	2030      	movs	r0, #48	; 0x30
   14ed8:	18e1      	adds	r1, r4, r3
   14eda:	3143      	adds	r1, #67	; 0x43
   14edc:	7008      	strb	r0, [r1, #0]
   14ede:	0021      	movs	r1, r4
   14ee0:	1c5a      	adds	r2, r3, #1
   14ee2:	3145      	adds	r1, #69	; 0x45
   14ee4:	7809      	ldrb	r1, [r1, #0]
   14ee6:	18a2      	adds	r2, r4, r2
   14ee8:	3243      	adds	r2, #67	; 0x43
   14eea:	3302      	adds	r3, #2
   14eec:	7011      	strb	r1, [r2, #0]
   14eee:	e7c1      	b.n	14e74 <_printf_common+0x48>
   14ef0:	0022      	movs	r2, r4
   14ef2:	2301      	movs	r3, #1
   14ef4:	321a      	adds	r2, #26
   14ef6:	9901      	ldr	r1, [sp, #4]
   14ef8:	9800      	ldr	r0, [sp, #0]
   14efa:	9e08      	ldr	r6, [sp, #32]
   14efc:	47b0      	blx	r6
   14efe:	1c43      	adds	r3, r0, #1
   14f00:	d0e6      	beq.n	14ed0 <_printf_common+0xa4>
   14f02:	3701      	adds	r7, #1
   14f04:	e7d1      	b.n	14eaa <_printf_common+0x7e>
	...

00014f08 <_printf_i>:
   14f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f0a:	b08b      	sub	sp, #44	; 0x2c
   14f0c:	9206      	str	r2, [sp, #24]
   14f0e:	000a      	movs	r2, r1
   14f10:	3243      	adds	r2, #67	; 0x43
   14f12:	9307      	str	r3, [sp, #28]
   14f14:	9005      	str	r0, [sp, #20]
   14f16:	9204      	str	r2, [sp, #16]
   14f18:	7e0a      	ldrb	r2, [r1, #24]
   14f1a:	000c      	movs	r4, r1
   14f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14f1e:	2a6e      	cmp	r2, #110	; 0x6e
   14f20:	d100      	bne.n	14f24 <_printf_i+0x1c>
   14f22:	e08f      	b.n	15044 <_printf_i+0x13c>
   14f24:	d817      	bhi.n	14f56 <_printf_i+0x4e>
   14f26:	2a63      	cmp	r2, #99	; 0x63
   14f28:	d02c      	beq.n	14f84 <_printf_i+0x7c>
   14f2a:	d808      	bhi.n	14f3e <_printf_i+0x36>
   14f2c:	2a00      	cmp	r2, #0
   14f2e:	d100      	bne.n	14f32 <_printf_i+0x2a>
   14f30:	e099      	b.n	15066 <_printf_i+0x15e>
   14f32:	2a58      	cmp	r2, #88	; 0x58
   14f34:	d054      	beq.n	14fe0 <_printf_i+0xd8>
   14f36:	0026      	movs	r6, r4
   14f38:	3642      	adds	r6, #66	; 0x42
   14f3a:	7032      	strb	r2, [r6, #0]
   14f3c:	e029      	b.n	14f92 <_printf_i+0x8a>
   14f3e:	2a64      	cmp	r2, #100	; 0x64
   14f40:	d001      	beq.n	14f46 <_printf_i+0x3e>
   14f42:	2a69      	cmp	r2, #105	; 0x69
   14f44:	d1f7      	bne.n	14f36 <_printf_i+0x2e>
   14f46:	6821      	ldr	r1, [r4, #0]
   14f48:	681a      	ldr	r2, [r3, #0]
   14f4a:	0608      	lsls	r0, r1, #24
   14f4c:	d523      	bpl.n	14f96 <_printf_i+0x8e>
   14f4e:	1d11      	adds	r1, r2, #4
   14f50:	6019      	str	r1, [r3, #0]
   14f52:	6815      	ldr	r5, [r2, #0]
   14f54:	e025      	b.n	14fa2 <_printf_i+0x9a>
   14f56:	2a73      	cmp	r2, #115	; 0x73
   14f58:	d100      	bne.n	14f5c <_printf_i+0x54>
   14f5a:	e088      	b.n	1506e <_printf_i+0x166>
   14f5c:	d808      	bhi.n	14f70 <_printf_i+0x68>
   14f5e:	2a6f      	cmp	r2, #111	; 0x6f
   14f60:	d029      	beq.n	14fb6 <_printf_i+0xae>
   14f62:	2a70      	cmp	r2, #112	; 0x70
   14f64:	d1e7      	bne.n	14f36 <_printf_i+0x2e>
   14f66:	2220      	movs	r2, #32
   14f68:	6809      	ldr	r1, [r1, #0]
   14f6a:	430a      	orrs	r2, r1
   14f6c:	6022      	str	r2, [r4, #0]
   14f6e:	e003      	b.n	14f78 <_printf_i+0x70>
   14f70:	2a75      	cmp	r2, #117	; 0x75
   14f72:	d020      	beq.n	14fb6 <_printf_i+0xae>
   14f74:	2a78      	cmp	r2, #120	; 0x78
   14f76:	d1de      	bne.n	14f36 <_printf_i+0x2e>
   14f78:	0022      	movs	r2, r4
   14f7a:	2178      	movs	r1, #120	; 0x78
   14f7c:	3245      	adds	r2, #69	; 0x45
   14f7e:	7011      	strb	r1, [r2, #0]
   14f80:	4a6c      	ldr	r2, [pc, #432]	; (15134 <_printf_i+0x22c>)
   14f82:	e030      	b.n	14fe6 <_printf_i+0xde>
   14f84:	000e      	movs	r6, r1
   14f86:	681a      	ldr	r2, [r3, #0]
   14f88:	3642      	adds	r6, #66	; 0x42
   14f8a:	1d11      	adds	r1, r2, #4
   14f8c:	6019      	str	r1, [r3, #0]
   14f8e:	6813      	ldr	r3, [r2, #0]
   14f90:	7033      	strb	r3, [r6, #0]
   14f92:	2301      	movs	r3, #1
   14f94:	e079      	b.n	1508a <_printf_i+0x182>
   14f96:	0649      	lsls	r1, r1, #25
   14f98:	d5d9      	bpl.n	14f4e <_printf_i+0x46>
   14f9a:	1d11      	adds	r1, r2, #4
   14f9c:	6019      	str	r1, [r3, #0]
   14f9e:	2300      	movs	r3, #0
   14fa0:	5ed5      	ldrsh	r5, [r2, r3]
   14fa2:	2d00      	cmp	r5, #0
   14fa4:	da03      	bge.n	14fae <_printf_i+0xa6>
   14fa6:	232d      	movs	r3, #45	; 0x2d
   14fa8:	9a04      	ldr	r2, [sp, #16]
   14faa:	426d      	negs	r5, r5
   14fac:	7013      	strb	r3, [r2, #0]
   14fae:	4b62      	ldr	r3, [pc, #392]	; (15138 <_printf_i+0x230>)
   14fb0:	270a      	movs	r7, #10
   14fb2:	9303      	str	r3, [sp, #12]
   14fb4:	e02f      	b.n	15016 <_printf_i+0x10e>
   14fb6:	6820      	ldr	r0, [r4, #0]
   14fb8:	6819      	ldr	r1, [r3, #0]
   14fba:	0605      	lsls	r5, r0, #24
   14fbc:	d503      	bpl.n	14fc6 <_printf_i+0xbe>
   14fbe:	1d08      	adds	r0, r1, #4
   14fc0:	6018      	str	r0, [r3, #0]
   14fc2:	680d      	ldr	r5, [r1, #0]
   14fc4:	e005      	b.n	14fd2 <_printf_i+0xca>
   14fc6:	0640      	lsls	r0, r0, #25
   14fc8:	d5f9      	bpl.n	14fbe <_printf_i+0xb6>
   14fca:	680d      	ldr	r5, [r1, #0]
   14fcc:	1d08      	adds	r0, r1, #4
   14fce:	6018      	str	r0, [r3, #0]
   14fd0:	b2ad      	uxth	r5, r5
   14fd2:	4b59      	ldr	r3, [pc, #356]	; (15138 <_printf_i+0x230>)
   14fd4:	2708      	movs	r7, #8
   14fd6:	9303      	str	r3, [sp, #12]
   14fd8:	2a6f      	cmp	r2, #111	; 0x6f
   14fda:	d018      	beq.n	1500e <_printf_i+0x106>
   14fdc:	270a      	movs	r7, #10
   14fde:	e016      	b.n	1500e <_printf_i+0x106>
   14fe0:	3145      	adds	r1, #69	; 0x45
   14fe2:	700a      	strb	r2, [r1, #0]
   14fe4:	4a54      	ldr	r2, [pc, #336]	; (15138 <_printf_i+0x230>)
   14fe6:	9203      	str	r2, [sp, #12]
   14fe8:	681a      	ldr	r2, [r3, #0]
   14fea:	6821      	ldr	r1, [r4, #0]
   14fec:	1d10      	adds	r0, r2, #4
   14fee:	6018      	str	r0, [r3, #0]
   14ff0:	6815      	ldr	r5, [r2, #0]
   14ff2:	0608      	lsls	r0, r1, #24
   14ff4:	d522      	bpl.n	1503c <_printf_i+0x134>
   14ff6:	07cb      	lsls	r3, r1, #31
   14ff8:	d502      	bpl.n	15000 <_printf_i+0xf8>
   14ffa:	2320      	movs	r3, #32
   14ffc:	4319      	orrs	r1, r3
   14ffe:	6021      	str	r1, [r4, #0]
   15000:	2710      	movs	r7, #16
   15002:	2d00      	cmp	r5, #0
   15004:	d103      	bne.n	1500e <_printf_i+0x106>
   15006:	2320      	movs	r3, #32
   15008:	6822      	ldr	r2, [r4, #0]
   1500a:	439a      	bics	r2, r3
   1500c:	6022      	str	r2, [r4, #0]
   1500e:	0023      	movs	r3, r4
   15010:	2200      	movs	r2, #0
   15012:	3343      	adds	r3, #67	; 0x43
   15014:	701a      	strb	r2, [r3, #0]
   15016:	6863      	ldr	r3, [r4, #4]
   15018:	60a3      	str	r3, [r4, #8]
   1501a:	2b00      	cmp	r3, #0
   1501c:	db5c      	blt.n	150d8 <_printf_i+0x1d0>
   1501e:	2204      	movs	r2, #4
   15020:	6821      	ldr	r1, [r4, #0]
   15022:	4391      	bics	r1, r2
   15024:	6021      	str	r1, [r4, #0]
   15026:	2d00      	cmp	r5, #0
   15028:	d158      	bne.n	150dc <_printf_i+0x1d4>
   1502a:	9e04      	ldr	r6, [sp, #16]
   1502c:	2b00      	cmp	r3, #0
   1502e:	d064      	beq.n	150fa <_printf_i+0x1f2>
   15030:	0026      	movs	r6, r4
   15032:	9b03      	ldr	r3, [sp, #12]
   15034:	3642      	adds	r6, #66	; 0x42
   15036:	781b      	ldrb	r3, [r3, #0]
   15038:	7033      	strb	r3, [r6, #0]
   1503a:	e05e      	b.n	150fa <_printf_i+0x1f2>
   1503c:	0648      	lsls	r0, r1, #25
   1503e:	d5da      	bpl.n	14ff6 <_printf_i+0xee>
   15040:	b2ad      	uxth	r5, r5
   15042:	e7d8      	b.n	14ff6 <_printf_i+0xee>
   15044:	6809      	ldr	r1, [r1, #0]
   15046:	681a      	ldr	r2, [r3, #0]
   15048:	0608      	lsls	r0, r1, #24
   1504a:	d505      	bpl.n	15058 <_printf_i+0x150>
   1504c:	1d11      	adds	r1, r2, #4
   1504e:	6019      	str	r1, [r3, #0]
   15050:	6813      	ldr	r3, [r2, #0]
   15052:	6962      	ldr	r2, [r4, #20]
   15054:	601a      	str	r2, [r3, #0]
   15056:	e006      	b.n	15066 <_printf_i+0x15e>
   15058:	0649      	lsls	r1, r1, #25
   1505a:	d5f7      	bpl.n	1504c <_printf_i+0x144>
   1505c:	1d11      	adds	r1, r2, #4
   1505e:	6019      	str	r1, [r3, #0]
   15060:	6813      	ldr	r3, [r2, #0]
   15062:	8aa2      	ldrh	r2, [r4, #20]
   15064:	801a      	strh	r2, [r3, #0]
   15066:	2300      	movs	r3, #0
   15068:	9e04      	ldr	r6, [sp, #16]
   1506a:	6123      	str	r3, [r4, #16]
   1506c:	e054      	b.n	15118 <_printf_i+0x210>
   1506e:	681a      	ldr	r2, [r3, #0]
   15070:	1d11      	adds	r1, r2, #4
   15072:	6019      	str	r1, [r3, #0]
   15074:	6816      	ldr	r6, [r2, #0]
   15076:	2100      	movs	r1, #0
   15078:	6862      	ldr	r2, [r4, #4]
   1507a:	0030      	movs	r0, r6
   1507c:	f000 f958 	bl	15330 <memchr>
   15080:	2800      	cmp	r0, #0
   15082:	d001      	beq.n	15088 <_printf_i+0x180>
   15084:	1b80      	subs	r0, r0, r6
   15086:	6060      	str	r0, [r4, #4]
   15088:	6863      	ldr	r3, [r4, #4]
   1508a:	6123      	str	r3, [r4, #16]
   1508c:	2300      	movs	r3, #0
   1508e:	9a04      	ldr	r2, [sp, #16]
   15090:	7013      	strb	r3, [r2, #0]
   15092:	e041      	b.n	15118 <_printf_i+0x210>
   15094:	6923      	ldr	r3, [r4, #16]
   15096:	0032      	movs	r2, r6
   15098:	9906      	ldr	r1, [sp, #24]
   1509a:	9805      	ldr	r0, [sp, #20]
   1509c:	9d07      	ldr	r5, [sp, #28]
   1509e:	47a8      	blx	r5
   150a0:	1c43      	adds	r3, r0, #1
   150a2:	d043      	beq.n	1512c <_printf_i+0x224>
   150a4:	6823      	ldr	r3, [r4, #0]
   150a6:	2500      	movs	r5, #0
   150a8:	079b      	lsls	r3, r3, #30
   150aa:	d40f      	bmi.n	150cc <_printf_i+0x1c4>
   150ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   150ae:	68e0      	ldr	r0, [r4, #12]
   150b0:	4298      	cmp	r0, r3
   150b2:	da3d      	bge.n	15130 <_printf_i+0x228>
   150b4:	0018      	movs	r0, r3
   150b6:	e03b      	b.n	15130 <_printf_i+0x228>
   150b8:	0022      	movs	r2, r4
   150ba:	2301      	movs	r3, #1
   150bc:	3219      	adds	r2, #25
   150be:	9906      	ldr	r1, [sp, #24]
   150c0:	9805      	ldr	r0, [sp, #20]
   150c2:	9e07      	ldr	r6, [sp, #28]
   150c4:	47b0      	blx	r6
   150c6:	1c43      	adds	r3, r0, #1
   150c8:	d030      	beq.n	1512c <_printf_i+0x224>
   150ca:	3501      	adds	r5, #1
   150cc:	68e3      	ldr	r3, [r4, #12]
   150ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   150d0:	1a9b      	subs	r3, r3, r2
   150d2:	429d      	cmp	r5, r3
   150d4:	dbf0      	blt.n	150b8 <_printf_i+0x1b0>
   150d6:	e7e9      	b.n	150ac <_printf_i+0x1a4>
   150d8:	2d00      	cmp	r5, #0
   150da:	d0a9      	beq.n	15030 <_printf_i+0x128>
   150dc:	9e04      	ldr	r6, [sp, #16]
   150de:	0028      	movs	r0, r5
   150e0:	0039      	movs	r1, r7
   150e2:	f7fe fc67 	bl	139b4 <__aeabi_uidivmod>
   150e6:	9b03      	ldr	r3, [sp, #12]
   150e8:	3e01      	subs	r6, #1
   150ea:	5c5b      	ldrb	r3, [r3, r1]
   150ec:	0028      	movs	r0, r5
   150ee:	7033      	strb	r3, [r6, #0]
   150f0:	0039      	movs	r1, r7
   150f2:	f7fe fbd9 	bl	138a8 <__udivsi3>
   150f6:	1e05      	subs	r5, r0, #0
   150f8:	d1f1      	bne.n	150de <_printf_i+0x1d6>
   150fa:	2f08      	cmp	r7, #8
   150fc:	d109      	bne.n	15112 <_printf_i+0x20a>
   150fe:	6823      	ldr	r3, [r4, #0]
   15100:	07db      	lsls	r3, r3, #31
   15102:	d506      	bpl.n	15112 <_printf_i+0x20a>
   15104:	6863      	ldr	r3, [r4, #4]
   15106:	6922      	ldr	r2, [r4, #16]
   15108:	4293      	cmp	r3, r2
   1510a:	dc02      	bgt.n	15112 <_printf_i+0x20a>
   1510c:	2330      	movs	r3, #48	; 0x30
   1510e:	3e01      	subs	r6, #1
   15110:	7033      	strb	r3, [r6, #0]
   15112:	9b04      	ldr	r3, [sp, #16]
   15114:	1b9b      	subs	r3, r3, r6
   15116:	6123      	str	r3, [r4, #16]
   15118:	9b07      	ldr	r3, [sp, #28]
   1511a:	aa09      	add	r2, sp, #36	; 0x24
   1511c:	9300      	str	r3, [sp, #0]
   1511e:	0021      	movs	r1, r4
   15120:	9b06      	ldr	r3, [sp, #24]
   15122:	9805      	ldr	r0, [sp, #20]
   15124:	f7ff fe82 	bl	14e2c <_printf_common>
   15128:	1c43      	adds	r3, r0, #1
   1512a:	d1b3      	bne.n	15094 <_printf_i+0x18c>
   1512c:	2001      	movs	r0, #1
   1512e:	4240      	negs	r0, r0
   15130:	b00b      	add	sp, #44	; 0x2c
   15132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15134:	00016b9c 	.word	0x00016b9c
   15138:	00016b8b 	.word	0x00016b8b

0001513c <_putc_r>:
   1513c:	b570      	push	{r4, r5, r6, lr}
   1513e:	0006      	movs	r6, r0
   15140:	000d      	movs	r5, r1
   15142:	0014      	movs	r4, r2
   15144:	2800      	cmp	r0, #0
   15146:	d004      	beq.n	15152 <_putc_r+0x16>
   15148:	6983      	ldr	r3, [r0, #24]
   1514a:	2b00      	cmp	r3, #0
   1514c:	d101      	bne.n	15152 <_putc_r+0x16>
   1514e:	f7ff fab1 	bl	146b4 <__sinit>
   15152:	4b12      	ldr	r3, [pc, #72]	; (1519c <_putc_r+0x60>)
   15154:	429c      	cmp	r4, r3
   15156:	d111      	bne.n	1517c <_putc_r+0x40>
   15158:	6874      	ldr	r4, [r6, #4]
   1515a:	68a3      	ldr	r3, [r4, #8]
   1515c:	3b01      	subs	r3, #1
   1515e:	60a3      	str	r3, [r4, #8]
   15160:	2b00      	cmp	r3, #0
   15162:	da05      	bge.n	15170 <_putc_r+0x34>
   15164:	69a2      	ldr	r2, [r4, #24]
   15166:	4293      	cmp	r3, r2
   15168:	db12      	blt.n	15190 <_putc_r+0x54>
   1516a:	b2eb      	uxtb	r3, r5
   1516c:	2b0a      	cmp	r3, #10
   1516e:	d00f      	beq.n	15190 <_putc_r+0x54>
   15170:	6823      	ldr	r3, [r4, #0]
   15172:	b2e8      	uxtb	r0, r5
   15174:	1c5a      	adds	r2, r3, #1
   15176:	6022      	str	r2, [r4, #0]
   15178:	701d      	strb	r5, [r3, #0]
   1517a:	bd70      	pop	{r4, r5, r6, pc}
   1517c:	4b08      	ldr	r3, [pc, #32]	; (151a0 <_putc_r+0x64>)
   1517e:	429c      	cmp	r4, r3
   15180:	d101      	bne.n	15186 <_putc_r+0x4a>
   15182:	68b4      	ldr	r4, [r6, #8]
   15184:	e7e9      	b.n	1515a <_putc_r+0x1e>
   15186:	4b07      	ldr	r3, [pc, #28]	; (151a4 <_putc_r+0x68>)
   15188:	429c      	cmp	r4, r3
   1518a:	d1e6      	bne.n	1515a <_putc_r+0x1e>
   1518c:	68f4      	ldr	r4, [r6, #12]
   1518e:	e7e4      	b.n	1515a <_putc_r+0x1e>
   15190:	0022      	movs	r2, r4
   15192:	0029      	movs	r1, r5
   15194:	0030      	movs	r0, r6
   15196:	f7ff f8c9 	bl	1432c <__swbuf_r>
   1519a:	e7ee      	b.n	1517a <_putc_r+0x3e>
   1519c:	00016b30 	.word	0x00016b30
   151a0:	00016b50 	.word	0x00016b50
   151a4:	00016b10 	.word	0x00016b10

000151a8 <__sread>:
   151a8:	b570      	push	{r4, r5, r6, lr}
   151aa:	000c      	movs	r4, r1
   151ac:	250e      	movs	r5, #14
   151ae:	5f49      	ldrsh	r1, [r1, r5]
   151b0:	f000 f8f0 	bl	15394 <_read_r>
   151b4:	2800      	cmp	r0, #0
   151b6:	db03      	blt.n	151c0 <__sread+0x18>
   151b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   151ba:	181b      	adds	r3, r3, r0
   151bc:	6563      	str	r3, [r4, #84]	; 0x54
   151be:	bd70      	pop	{r4, r5, r6, pc}
   151c0:	89a3      	ldrh	r3, [r4, #12]
   151c2:	4a02      	ldr	r2, [pc, #8]	; (151cc <__sread+0x24>)
   151c4:	4013      	ands	r3, r2
   151c6:	81a3      	strh	r3, [r4, #12]
   151c8:	e7f9      	b.n	151be <__sread+0x16>
   151ca:	46c0      	nop			; (mov r8, r8)
   151cc:	ffffefff 	.word	0xffffefff

000151d0 <__swrite>:
   151d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151d2:	001f      	movs	r7, r3
   151d4:	898b      	ldrh	r3, [r1, #12]
   151d6:	0005      	movs	r5, r0
   151d8:	000c      	movs	r4, r1
   151da:	0016      	movs	r6, r2
   151dc:	05db      	lsls	r3, r3, #23
   151de:	d505      	bpl.n	151ec <__swrite+0x1c>
   151e0:	230e      	movs	r3, #14
   151e2:	5ec9      	ldrsh	r1, [r1, r3]
   151e4:	2200      	movs	r2, #0
   151e6:	2302      	movs	r3, #2
   151e8:	f000 f88e 	bl	15308 <_lseek_r>
   151ec:	89a3      	ldrh	r3, [r4, #12]
   151ee:	4a05      	ldr	r2, [pc, #20]	; (15204 <__swrite+0x34>)
   151f0:	0028      	movs	r0, r5
   151f2:	4013      	ands	r3, r2
   151f4:	81a3      	strh	r3, [r4, #12]
   151f6:	0032      	movs	r2, r6
   151f8:	230e      	movs	r3, #14
   151fa:	5ee1      	ldrsh	r1, [r4, r3]
   151fc:	003b      	movs	r3, r7
   151fe:	f000 f839 	bl	15274 <_write_r>
   15202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15204:	ffffefff 	.word	0xffffefff

00015208 <__sseek>:
   15208:	b570      	push	{r4, r5, r6, lr}
   1520a:	000c      	movs	r4, r1
   1520c:	250e      	movs	r5, #14
   1520e:	5f49      	ldrsh	r1, [r1, r5]
   15210:	f000 f87a 	bl	15308 <_lseek_r>
   15214:	89a3      	ldrh	r3, [r4, #12]
   15216:	1c42      	adds	r2, r0, #1
   15218:	d103      	bne.n	15222 <__sseek+0x1a>
   1521a:	4a05      	ldr	r2, [pc, #20]	; (15230 <__sseek+0x28>)
   1521c:	4013      	ands	r3, r2
   1521e:	81a3      	strh	r3, [r4, #12]
   15220:	bd70      	pop	{r4, r5, r6, pc}
   15222:	2280      	movs	r2, #128	; 0x80
   15224:	0152      	lsls	r2, r2, #5
   15226:	4313      	orrs	r3, r2
   15228:	81a3      	strh	r3, [r4, #12]
   1522a:	6560      	str	r0, [r4, #84]	; 0x54
   1522c:	e7f8      	b.n	15220 <__sseek+0x18>
   1522e:	46c0      	nop			; (mov r8, r8)
   15230:	ffffefff 	.word	0xffffefff

00015234 <__sclose>:
   15234:	b510      	push	{r4, lr}
   15236:	230e      	movs	r3, #14
   15238:	5ec9      	ldrsh	r1, [r1, r3]
   1523a:	f000 f82f 	bl	1529c <_close_r>
   1523e:	bd10      	pop	{r4, pc}

00015240 <strchr>:
   15240:	b2c9      	uxtb	r1, r1
   15242:	7803      	ldrb	r3, [r0, #0]
   15244:	2b00      	cmp	r3, #0
   15246:	d004      	beq.n	15252 <strchr+0x12>
   15248:	4299      	cmp	r1, r3
   1524a:	d100      	bne.n	1524e <strchr+0xe>
   1524c:	4770      	bx	lr
   1524e:	3001      	adds	r0, #1
   15250:	e7f7      	b.n	15242 <strchr+0x2>
   15252:	424b      	negs	r3, r1
   15254:	4159      	adcs	r1, r3
   15256:	4249      	negs	r1, r1
   15258:	4008      	ands	r0, r1
   1525a:	e7f7      	b.n	1524c <strchr+0xc>

0001525c <__ascii_wctomb>:
   1525c:	1e0b      	subs	r3, r1, #0
   1525e:	d004      	beq.n	1526a <__ascii_wctomb+0xe>
   15260:	2aff      	cmp	r2, #255	; 0xff
   15262:	d904      	bls.n	1526e <__ascii_wctomb+0x12>
   15264:	238a      	movs	r3, #138	; 0x8a
   15266:	6003      	str	r3, [r0, #0]
   15268:	3b8b      	subs	r3, #139	; 0x8b
   1526a:	0018      	movs	r0, r3
   1526c:	4770      	bx	lr
   1526e:	700a      	strb	r2, [r1, #0]
   15270:	2301      	movs	r3, #1
   15272:	e7fa      	b.n	1526a <__ascii_wctomb+0xe>

00015274 <_write_r>:
   15274:	b570      	push	{r4, r5, r6, lr}
   15276:	0005      	movs	r5, r0
   15278:	0008      	movs	r0, r1
   1527a:	0011      	movs	r1, r2
   1527c:	2200      	movs	r2, #0
   1527e:	4c06      	ldr	r4, [pc, #24]	; (15298 <_write_r+0x24>)
   15280:	6022      	str	r2, [r4, #0]
   15282:	001a      	movs	r2, r3
   15284:	f7fd f8c0 	bl	12408 <_write>
   15288:	1c43      	adds	r3, r0, #1
   1528a:	d103      	bne.n	15294 <_write_r+0x20>
   1528c:	6823      	ldr	r3, [r4, #0]
   1528e:	2b00      	cmp	r3, #0
   15290:	d000      	beq.n	15294 <_write_r+0x20>
   15292:	602b      	str	r3, [r5, #0]
   15294:	bd70      	pop	{r4, r5, r6, pc}
   15296:	46c0      	nop			; (mov r8, r8)
   15298:	200012a0 	.word	0x200012a0

0001529c <_close_r>:
   1529c:	2300      	movs	r3, #0
   1529e:	b570      	push	{r4, r5, r6, lr}
   152a0:	4c06      	ldr	r4, [pc, #24]	; (152bc <_close_r+0x20>)
   152a2:	0005      	movs	r5, r0
   152a4:	0008      	movs	r0, r1
   152a6:	6023      	str	r3, [r4, #0]
   152a8:	f7fd f8e0 	bl	1246c <_close>
   152ac:	1c43      	adds	r3, r0, #1
   152ae:	d103      	bne.n	152b8 <_close_r+0x1c>
   152b0:	6823      	ldr	r3, [r4, #0]
   152b2:	2b00      	cmp	r3, #0
   152b4:	d000      	beq.n	152b8 <_close_r+0x1c>
   152b6:	602b      	str	r3, [r5, #0]
   152b8:	bd70      	pop	{r4, r5, r6, pc}
   152ba:	46c0      	nop			; (mov r8, r8)
   152bc:	200012a0 	.word	0x200012a0

000152c0 <_fstat_r>:
   152c0:	2300      	movs	r3, #0
   152c2:	b570      	push	{r4, r5, r6, lr}
   152c4:	4c06      	ldr	r4, [pc, #24]	; (152e0 <_fstat_r+0x20>)
   152c6:	0005      	movs	r5, r0
   152c8:	0008      	movs	r0, r1
   152ca:	0011      	movs	r1, r2
   152cc:	6023      	str	r3, [r4, #0]
   152ce:	f7fd f8d1 	bl	12474 <_fstat>
   152d2:	1c43      	adds	r3, r0, #1
   152d4:	d103      	bne.n	152de <_fstat_r+0x1e>
   152d6:	6823      	ldr	r3, [r4, #0]
   152d8:	2b00      	cmp	r3, #0
   152da:	d000      	beq.n	152de <_fstat_r+0x1e>
   152dc:	602b      	str	r3, [r5, #0]
   152de:	bd70      	pop	{r4, r5, r6, pc}
   152e0:	200012a0 	.word	0x200012a0

000152e4 <_isatty_r>:
   152e4:	2300      	movs	r3, #0
   152e6:	b570      	push	{r4, r5, r6, lr}
   152e8:	4c06      	ldr	r4, [pc, #24]	; (15304 <_isatty_r+0x20>)
   152ea:	0005      	movs	r5, r0
   152ec:	0008      	movs	r0, r1
   152ee:	6023      	str	r3, [r4, #0]
   152f0:	f7fd f8c6 	bl	12480 <_isatty>
   152f4:	1c43      	adds	r3, r0, #1
   152f6:	d103      	bne.n	15300 <_isatty_r+0x1c>
   152f8:	6823      	ldr	r3, [r4, #0]
   152fa:	2b00      	cmp	r3, #0
   152fc:	d000      	beq.n	15300 <_isatty_r+0x1c>
   152fe:	602b      	str	r3, [r5, #0]
   15300:	bd70      	pop	{r4, r5, r6, pc}
   15302:	46c0      	nop			; (mov r8, r8)
   15304:	200012a0 	.word	0x200012a0

00015308 <_lseek_r>:
   15308:	b570      	push	{r4, r5, r6, lr}
   1530a:	0005      	movs	r5, r0
   1530c:	0008      	movs	r0, r1
   1530e:	0011      	movs	r1, r2
   15310:	2200      	movs	r2, #0
   15312:	4c06      	ldr	r4, [pc, #24]	; (1532c <_lseek_r+0x24>)
   15314:	6022      	str	r2, [r4, #0]
   15316:	001a      	movs	r2, r3
   15318:	f7fd f8b4 	bl	12484 <_lseek>
   1531c:	1c43      	adds	r3, r0, #1
   1531e:	d103      	bne.n	15328 <_lseek_r+0x20>
   15320:	6823      	ldr	r3, [r4, #0]
   15322:	2b00      	cmp	r3, #0
   15324:	d000      	beq.n	15328 <_lseek_r+0x20>
   15326:	602b      	str	r3, [r5, #0]
   15328:	bd70      	pop	{r4, r5, r6, pc}
   1532a:	46c0      	nop			; (mov r8, r8)
   1532c:	200012a0 	.word	0x200012a0

00015330 <memchr>:
   15330:	b2c9      	uxtb	r1, r1
   15332:	1882      	adds	r2, r0, r2
   15334:	4290      	cmp	r0, r2
   15336:	d101      	bne.n	1533c <memchr+0xc>
   15338:	2000      	movs	r0, #0
   1533a:	4770      	bx	lr
   1533c:	7803      	ldrb	r3, [r0, #0]
   1533e:	428b      	cmp	r3, r1
   15340:	d0fb      	beq.n	1533a <memchr+0xa>
   15342:	3001      	adds	r0, #1
   15344:	e7f6      	b.n	15334 <memchr+0x4>

00015346 <_realloc_r>:
   15346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15348:	0007      	movs	r7, r0
   1534a:	000d      	movs	r5, r1
   1534c:	0016      	movs	r6, r2
   1534e:	2900      	cmp	r1, #0
   15350:	d105      	bne.n	1535e <_realloc_r+0x18>
   15352:	0011      	movs	r1, r2
   15354:	f7fe fcea 	bl	13d2c <_malloc_r>
   15358:	0004      	movs	r4, r0
   1535a:	0020      	movs	r0, r4
   1535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1535e:	2a00      	cmp	r2, #0
   15360:	d103      	bne.n	1536a <_realloc_r+0x24>
   15362:	f7fe fc99 	bl	13c98 <_free_r>
   15366:	0034      	movs	r4, r6
   15368:	e7f7      	b.n	1535a <_realloc_r+0x14>
   1536a:	f000 f827 	bl	153bc <_malloc_usable_size_r>
   1536e:	002c      	movs	r4, r5
   15370:	4286      	cmp	r6, r0
   15372:	d9f2      	bls.n	1535a <_realloc_r+0x14>
   15374:	0031      	movs	r1, r6
   15376:	0038      	movs	r0, r7
   15378:	f7fe fcd8 	bl	13d2c <_malloc_r>
   1537c:	1e04      	subs	r4, r0, #0
   1537e:	d0ec      	beq.n	1535a <_realloc_r+0x14>
   15380:	0029      	movs	r1, r5
   15382:	0032      	movs	r2, r6
   15384:	f7fe fc64 	bl	13c50 <memcpy>
   15388:	0029      	movs	r1, r5
   1538a:	0038      	movs	r0, r7
   1538c:	f7fe fc84 	bl	13c98 <_free_r>
   15390:	e7e3      	b.n	1535a <_realloc_r+0x14>
	...

00015394 <_read_r>:
   15394:	b570      	push	{r4, r5, r6, lr}
   15396:	0005      	movs	r5, r0
   15398:	0008      	movs	r0, r1
   1539a:	0011      	movs	r1, r2
   1539c:	2200      	movs	r2, #0
   1539e:	4c06      	ldr	r4, [pc, #24]	; (153b8 <_read_r+0x24>)
   153a0:	6022      	str	r2, [r4, #0]
   153a2:	001a      	movs	r2, r3
   153a4:	f7fd f80e 	bl	123c4 <_read>
   153a8:	1c43      	adds	r3, r0, #1
   153aa:	d103      	bne.n	153b4 <_read_r+0x20>
   153ac:	6823      	ldr	r3, [r4, #0]
   153ae:	2b00      	cmp	r3, #0
   153b0:	d000      	beq.n	153b4 <_read_r+0x20>
   153b2:	602b      	str	r3, [r5, #0]
   153b4:	bd70      	pop	{r4, r5, r6, pc}
   153b6:	46c0      	nop			; (mov r8, r8)
   153b8:	200012a0 	.word	0x200012a0

000153bc <_malloc_usable_size_r>:
   153bc:	1f0b      	subs	r3, r1, #4
   153be:	681b      	ldr	r3, [r3, #0]
   153c0:	1f18      	subs	r0, r3, #4
   153c2:	2b00      	cmp	r3, #0
   153c4:	da01      	bge.n	153ca <_malloc_usable_size_r+0xe>
   153c6:	580b      	ldr	r3, [r1, r0]
   153c8:	18c0      	adds	r0, r0, r3
   153ca:	4770      	bx	lr

000153cc <_tcc_cc_nums>:
   153cc:	0204 0002                                   ....

000153d0 <_tcc_gclk_ids>:
   153d0:	1a1a 001b                                   ....

000153d4 <_tcc_maxs>:
   153d4:	ffff 00ff ffff 00ff ffff 0000               ............

000153e0 <_tcc_ow_nums>:
   153e0:	0408 0002                                   ....

000153e4 <_tcc_intflag>:
   153e4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   153f4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   15404:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00015414 <tcc_interrupt_vectors.12434>:
   15414:	100f 0011 9770 0000 976a 0000 9764 0000     ....p...j...d...
   15424:	974c 0000 9742 0000 9746 0000 9742 0000     L...B...F...B...
   15434:	9736 0000 975e 0000 9742 0000 9736 0000     6...^...B...6...
   15444:	9736 0000 978e 0000 9794 0000 9746 0000     6...........F...
   15454:	9788 0000 9782 0000 977c 0000 9776 0000     ........|...v...
   15464:	9724 0000 9724 0000 9724 0000 9730 0000     $...$...$...0...
   15474:	9758 0000 9724 0000 9730 0000 9730 0000     X...$...0...0...
   15484:	9752 0000 97a6 0000 97d6 0000 97d0 0000     R...............
   15494:	97ca 0000 97b8 0000 97dc 0000 97ac 0000     ................
   154a4:	97dc 0000 979a 0000 97b2 0000 97dc 0000     ................
   154b4:	979a 0000 979a 0000 97be 0000 97c4 0000     ................
   154c4:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   154d4:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
   154e4:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
   154f4:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
   15504:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   15514:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   15524:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   15534:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   15544:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   15554:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
   15564:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
   15574:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
   15584:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
   15594:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
   155a4:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
   155b4:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
   155c4:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
   155d4:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
   155e4:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
   155f4:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
   15604:	2800 4200 9f28 0000 9f16 0000 9f30 0000     .(.B(.......0...
   15614:	9ecc 0000 9eee 0000 7468 7074 635f 696c     ........http_cli
   15624:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   15634:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   15644:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
   15654:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   15664:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   15674:	706d 656c 6574 2e64 000d 0000 7468 7074     mpleted.....http
   15684:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   15694:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   156a4:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   156b4:	2520 0d75 000a 0000 7473 726f 5f65 6966      %u.....store_fi
   156c4:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   156d4:	6420 7461 2e61 000d 7468 7074 635f 696c      data...http_cli
   156e4:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   156f4:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   15704:	6e6f 253a 0d64 000a 0a0a 2d0a 2d2d 7453     on:%d......---St
   15714:	7261 6574 2064 544f 4641 2055 6966 656c     arted OTAFU file
   15724:	6420 776f 6c6e 616f 6564 2072 7061 6c70      downloader appl
   15734:	6369 7461 6f69 2d6e 2d2d 0000 6f63 666e     ication---..conf
   15744:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   15754:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   15764:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   15774:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   15784:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   15794:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   157a4:	206c 6166 6c69 6465 0d2e 0000 6e69 7469     l failed....init
   157b4:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   157c4:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   157d4:	7420 6568 6320 7261 2e64 000d 6e69 7469      the card...init
   157e4:	735f 6f74 6172 6567 203a 6f6d 6e75 6974     _storage: mounti
   157f4:	676e 5320 2044 6163 6472 2e2e 0d2e 0000     ng SD card......
   15804:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   15814:	6320 7261 2064 6f6d 6e75 2074 6166 6c69      card mount fail
   15824:	6465 2021 7228 7365 2520 2964 0a0d 0000     ed! (res %d)....
   15834:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   15844:	6320 7261 2064 6f6d 6e75 2074 4b4f 0d2e      card mount OK..
   15854:	0000 0000 2e2e 502e 7561 6573 2e64 5020     .......Paused. P
   15864:	6572 7373 6220 7475 6f74 206e 6f74 6320     ress button to c
   15874:	6e6f 6974 756e 2e65 2e2e 0000 616d 6e69     ontinue.....main
   15884:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   15894:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   158a4:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   158b4:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   158c4:	4120 2050 7325 2e2e 0d2e 000a 6f44 6e77      AP %s......Down
   158d4:	6f6c 6461 7265 6320 6d6f 6c70 7465 2e65     loader complete.
   158e4:	2020 6550 6672 726f 696d 676e 6220 6f6f       Performing boo
   158f4:	6c74 616f 6564 2072 6572 6573 2e74 0000     tloader reset...
   15904:	3025 6433 0000 0000 6572 6f73 766c 5f65     %03d....resolve_
   15914:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   15924:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   15934:	0a0d 0a0d 0000 0000 7473 7261 5f74 6f64     ........start_do
   15944:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   15954:	6761 2065 6f6e 2074 6572 6461 2e79 000d     age not ready...
   15964:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   15974:	6957 462d 2069 7369 6e20 746f 6320 6e6f     Wi-Fi is not con
   15984:	656e 7463 6465 0d2e 0000 0000 7473 7261     nected......star
   15994:	5f74 6f64 6e77 6f6c 6461 203a 6572 7571     t_download: requ
   159a4:	7365 2074 7369 7320 6e65 2074 6c61 6572     est is sent alre
   159b4:	6461 2e79 000d 0000 7473 7261 5f74 6f64     ady.....start_do
   159c4:	6e77 6f6c 6461 203a 7572 6e6e 6e69 2067     wnload: running 
   159d4:	6f64 6e77 6f6c 6461 6120 726c 6165 7964     download already
   159e4:	0d2e 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   159f4:	6461 203a 6573 646e 6e69 2067 5448 5054     ad: sending HTTP
   15a04:	7220 7165 6575 7473 2e2e 0d2e 0000 0000      request........
   15a14:	7468 7074 2f3a 772f 7777 732e 6165 2e73     http://www.seas.
   15a24:	7075 6e65 2e6e 6465 2f75 707e 7261 6170     upenn.edu/~parpa
   15a34:	6574 2f6c 4453 495f 414d 4547 422e 4e49     tel/SD_IMAGE.BIN
   15a44:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   15a54:	6361 656b 3a74 6320 6572 7461 6e69 2067     acket: creating 
   15a64:	6966 656c 5b20 7325 0d5d 000a 7473 726f     file [%s]...stor
   15a74:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   15a84:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   15a94:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   15aa4:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
   15ab4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   15ac4:	6c69 2065 7263 6165 6974 6e6f 6520 7272     ile creation err
   15ad4:	726f 2021 6572 3a74 6425 0a0d 0000 0000     or! ret:%d......
   15ae4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   15af4:	3a74 6620 6c69 2065 7277 7469 2065 7265     t: file write er
   15b04:	6f72 2c72 6420 776f 6c6e 616f 2064 6163     ror, download ca
   15b14:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
   15b24:	5f65 6966 656c 705f 6361 656b 3a74 7220     e_file_packet: r
   15b34:	6365 6965 6576 5b64 6c25 5d75 202c 6966     eceived[%lu], fi
   15b44:	656c 7320 7a69 5b65 6c25 5d75 0a0d 0000     le size[%lu]....
   15b54:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   15b64:	3a74 6620 6c69 2065 6f64 6e77 6f6c 6461     t: file download
   15b74:	6465 7320 6375 6563 7373 7566 6c6c 2e79     ed successfully.
   15b84:	000d 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
   15b94:	575f 4649 5f49 4f43 4e4e 4345 4554 0d44     _WIFI_CONNECTED.
   15ba4:	0000 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
   15bb4:	575f 4649 5f49 4944 4353 4e4f 454e 5443     _WIFI_DISCONNECT
   15bc4:	4445 000d 6f71 706f 6f71 706f 0000 0000     ED..qoopqoop....
   15bd4:	7350 6f70 0074 0000 6977 6966 635f 3a62     Pspot...wifi_cb:
   15be4:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   15bf4:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......

00015c04 <mmc_trans_multipliers>:
   15c04:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   15c14:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   15c24:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   15c34:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00015c44 <sd_mmc_trans_units>:
   15c44:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00015c60 <sd_trans_multipliers>:
   15c60:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   15c70:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   15c80:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   15c90:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00015ca0 <__FUNCTION__.15306>:
   15ca0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   15cb0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   15cc0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   15cd0:	746c 6320 646d 0000 c050 0000 c020 0000     lt cmd..P... ...
   15ce0:	c028 0000 c030 0000 c038 0000 c040 0000     (...0...8...@...
   15cf0:	c048 0000 c018 0000                         H.......

00015cf8 <__FUNCTION__.13058>:
   15cf8:	6968 5f66 6573 646e 0000 0000               hif_send....

00015d04 <__FUNCTION__.13068>:
   15d04:	6968 5f66 7369 0072                         hif_isr.

00015d0c <__FUNCTION__.13074>:
   15d0c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00015d1c <__FUNCTION__.13086>:
   15d1c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00015d28 <__FUNCTION__.13102>:
   15d28:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   15d38:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   15d48:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   15d58:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   15d68:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   15d78:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   15d88:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   15d98:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   15da8:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   15db8:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   15dc8:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   15dd8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   15de8:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   15df8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   15e08:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   15e18:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   15e28:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   15e38:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   15e48:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   15e58:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   15e68:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   15e78:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   15e88:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   15e98:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   15ea8:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   15eb8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   15ec8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   15ed8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   15ee8:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   15ef8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   15f08:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   15f18:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   15f28:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   15f38:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   15f48:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   15f58:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   15f68:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   15f78:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   15f88:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   15f98:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   15fa8:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   15fb8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   15fc8:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   15fd8:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   15fe8:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   15ff8:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   16008:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00016018 <__FUNCTION__.13037>:
   16018:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00016024 <__FUNCTION__.13066>:
   16024:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00016034 <__FUNCTION__.13094>:
   16034:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   16044:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   16054:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   16064:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   16074:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   16084:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   16094:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   160a4:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   160b4:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   160c4:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   160d4:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   160e4:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   160f4:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   16104:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   16114:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   16124:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   16134:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   16144:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   16154:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   16164:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   16174:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   16184:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   16194:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   161a4:	3231 343a 3a35 3535 0000 0000 7041 2072     12:45:55....Apr 
   161b4:	3931 3220 3130 0037 7244 7669 7265 6220     19 2017.Driver b
   161c4:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   161d4:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   161e4:	2065 6556 7372 6f69 006e 0000               e Version...

000161f0 <__FUNCTION__.12900>:
   161f0:	6863 7069 775f 6b61 0065 0000               chip_wake...

000161fc <__FUNCTION__.12949>:
   161fc:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   1620c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   1621c:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   1622c:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   1623c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   1624c:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   1625c:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0001626c <__FUNCTION__.12947>:
   1626c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00016278 <__FUNCTION__.12954>:
   16278:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   16288:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   16298:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   162a8:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   162b8:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   162c8:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   162d8:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   162e8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   162f8:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   16308:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   16318:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   16328:	4920 2044 6c25 0a78 0000 0000 cf90 0000      ID %lx.........
   16338:	cf90 0000 cfa6 0000 cfcc 0000 ced2 0000     ................
   16348:	ced2 0000 cf48 0000 cf48 0000 cf62 0000     ....H...H...b...
   16358:	cf80 0000 cfea 0000 cfea 0000 cfea 0000     ................
   16368:	cfea 0000 cf44 0000 2000 c9c3 cac4 0000     ....D.... ......

00016378 <__FUNCTION__.12253>:
   16378:	7073 5f69 6d63 0064                         spi_cmd.

00016380 <__FUNCTION__.12260>:
   16380:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00016390 <__FUNCTION__.12269>:
   16390:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0001639c <__FUNCTION__.12285>:
   1639c:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

000163ac <__FUNCTION__.12300>:
   163ac:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000163bc <__FUNCTION__.12312>:
   163bc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000163cc <__FUNCTION__.12323>:
   163cc:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000163dc <__FUNCTION__.12335>:
   163dc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000163ec <__FUNCTION__.12348>:
   163ec:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000163f8 <__FUNCTION__.12369>:
   163f8:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00016404 <crc7_syndrome_table>:
   16404:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   16414:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   16424:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   16434:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   16444:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   16454:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   16464:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   16474:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   16484:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   16494:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   164a4:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   164b4:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   164c4:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   164d4:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   164e4:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   164f4:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   16504:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16514:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   16524:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   16534:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   16544:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   16554:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16564:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   16574:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   16584:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   16594:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   165a4:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   165b4:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   165c4:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   165d4:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   165e4:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   165f4:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   16604:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16614:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   16624:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   16634:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   16644:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   16654:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   16664:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   16674:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   16684:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16694:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   166a4:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   166b4:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   166c4:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   166d4:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   166e4:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   166f4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   16704:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   16714:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   16724:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16734:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   16744:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   16754:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16764:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   16774:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   16784:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   16794:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   167a4:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   167b4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   167c4:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   167d4:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   167e4:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   167f4:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   16804:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16814:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   16824:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   16834:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16844:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   16854:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   16864:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16874:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   16884:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   16894:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   168a4:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   168b4:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   168c4:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   168d4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   168e4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   168f4:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   16904:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   16914:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   16924:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   16934:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   16944:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   16954:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   16964:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   16974:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   16984:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   16994:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   169a4:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   169b4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   169c4:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   169d4:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   169e4:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   169f4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16a04:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   16a14:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   16a24:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   16a34:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   16a44:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   16a54:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   16a64:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   16a74:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   16a84:	206e 4449 3d20 2520 0d64 000a 3231 2e2e     n ID = %d...12..
   16a94:	452e 0046 0800 4200 0c00 4200 1000 4200     .EF....B...B...B
   16aa4:	1400 4200 1800 4200 1c00 4200 017a 0001     ...B...B...Bz...
   16ab4:	0192 0001 0192 0001 0142 0001 0142 0001     ........B...B...
   16ac4:	0148 0001 014e 0001 015c 0001 0180 0001     H...N...\.......
   16ad4:	186c 0001 187a 0001 18f2 0001 182e 0001     l...z...........
   16ae4:	184e 0001                                   N...

00016ae8 <_usb_device_irq_bits>:
   16ae8:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

00016af8 <_usb_endpoint_irq_bits>:
   16af8:	0c03 6010 2a22 2c2b 3b3a 3d3c 3f3e 5d5b     ...`"*+,:;<=>?[]
   16b08:	7f7c 0000                                   |...

00016b0c <_global_impure_ptr>:
   16b0c:	0200 2000                                   ... 

00016b10 <__sf_fake_stderr>:
	...

00016b30 <__sf_fake_stdin>:
	...

00016b50 <__sf_fake_stdout>:
	...
   16b70:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   16b80:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   16b90:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   16ba0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00016bad <_ctype_>:
   16bad:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   16bbd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   16bcd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   16bdd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   16bed:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   16bfd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   16c0d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   16c1d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   16c2d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00016cb0 <_init>:
   16cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cb2:	46c0      	nop			; (mov r8, r8)
   16cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16cb6:	bc08      	pop	{r3}
   16cb8:	469e      	mov	lr, r3
   16cba:	4770      	bx	lr

00016cbc <__init_array_start>:
   16cbc:	000080dd 	.word	0x000080dd

00016cc0 <_fini>:
   16cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cc2:	46c0      	nop			; (mov r8, r8)
   16cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16cc6:	bc08      	pop	{r3}
   16cc8:	469e      	mov	lr, r3
   16cca:	4770      	bx	lr

00016ccc <__fini_array_start>:
   16ccc:	000080b5 	.word	0x000080b5
